
Elisa3-avr-studio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800200  0000a99a  0000aa2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000a99a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000094c  0080022e  0080022e  0000aa5c  2**0
                  ALLOC
  3 .stab         000037ec  00000000  00000000  0000aa5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f7b  00000000  00000000  0000e248  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000238  00000000  00000000  0000f1c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00002679  00000000  00000000  0000f3fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000066bb  00000000  00000000  00011a74  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001282  00000000  00000000  0001812f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000080b9  00000000  00000000  000193b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000910  00000000  00000000  0002146c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001d70  00000000  00000000  00021d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002838  00000000  00000000  00023aec  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000296  00000000  00000000  00026324  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000128  00000000  00000000  000265ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__ctors_end>
       4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
       8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
       c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      10:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      14:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      18:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      1c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      20:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      24:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      28:	0c 94 dd 14 	jmp	0x29ba	; 0x29ba <__vector_10>
      2c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      30:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      34:	0c 94 11 15 	jmp	0x2a22	; 0x2a22 <__vector_13>
      38:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      3c:	0c 94 c9 20 	jmp	0x4192	; 0x4192 <__vector_15>
      40:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      44:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      48:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      4c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      50:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      54:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      58:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      5c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      60:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      64:	0c 94 8d 1f 	jmp	0x3f1a	; 0x3f1a <__vector_25>
      68:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      6c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      70:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      74:	0c 94 ab 21 	jmp	0x4356	; 0x4356 <__vector_29>
      78:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      7c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      80:	0c 94 f2 3a 	jmp	0x75e4	; 0x75e4 <__vector_32>
      84:	0c 94 08 3b 	jmp	0x7610	; 0x7610 <__vector_33>
      88:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      8c:	0c 94 65 3a 	jmp	0x74ca	; 0x74ca <__vector_35>
      90:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      94:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      98:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      9c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      a0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      a4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      a8:	0c 94 39 3a 	jmp	0x7472	; 0x7472 <__vector_42>
      ac:	0c 94 4f 3a 	jmp	0x749e	; 0x749e <__vector_43>
      b0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      b4:	0c 94 a2 39 	jmp	0x7344	; 0x7344 <__vector_45>
      b8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      bc:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      c0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      c4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      c8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      cc:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      d0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      d4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      d8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      dc:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      e0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      e4:	ee 17       	cp	r30, r30
      e6:	d2 17       	cp	r29, r18
      e8:	a0 17       	cp	r26, r16
      ea:	8b 17       	cp	r24, r27
      ec:	62 17       	cp	r22, r18
      ee:	50 17       	cp	r21, r16
      f0:	27 17       	cp	r18, r23
      f2:	0b 17       	cp	r16, r27
      f4:	d2 16       	cp	r13, r18
      f6:	ba 16       	cp	r11, r26
      f8:	53 16       	cp	r5, r19
      fa:	53 16       	cp	r5, r19
      fc:	53 16       	cp	r5, r19
      fe:	53 16       	cp	r5, r19
     100:	53 16       	cp	r5, r19
     102:	53 16       	cp	r5, r19
     104:	ff 16       	cp	r15, r31
     106:	af 16       	cp	r10, r31
     108:	53 16       	cp	r5, r19
     10a:	53 16       	cp	r5, r19
     10c:	53 16       	cp	r5, r19
     10e:	53 16       	cp	r5, r19
     110:	53 16       	cp	r5, r19
     112:	53 16       	cp	r5, r19
     114:	53 16       	cp	r5, r19
     116:	53 16       	cp	r5, r19
     118:	53 16       	cp	r5, r19
     11a:	53 16       	cp	r5, r19
     11c:	53 16       	cp	r5, r19
     11e:	53 16       	cp	r5, r19
     120:	d2 16       	cp	r13, r18
     122:	a0 17       	cp	r26, r16
     124:	87 16       	cp	r8, r23
     126:	7a 16       	cp	r7, r26
     128:	53 16       	cp	r5, r19
     12a:	53 16       	cp	r5, r19
     12c:	53 16       	cp	r5, r19
     12e:	53 16       	cp	r5, r19
     130:	53 16       	cp	r5, r19
     132:	53 16       	cp	r5, r19
     134:	53 16       	cp	r5, r19
     136:	53 16       	cp	r5, r19
     138:	53 16       	cp	r5, r19
     13a:	53 16       	cp	r5, r19
     13c:	53 16       	cp	r5, r19
     13e:	53 16       	cp	r5, r19
     140:	62 17       	cp	r22, r18
     142:	27 17       	cp	r18, r23
     144:	53 16       	cp	r5, r19
     146:	53 16       	cp	r5, r19
     148:	ee 17       	cp	r30, r30
     14a:	50 17       	cp	r21, r16
     14c:	93 16       	cp	r9, r19
     14e:	08 4a       	sbci	r16, 0xA8	; 168
     150:	d7 3b       	cpi	r29, 0xB7	; 183
     152:	3b ce       	rjmp	.-906    	; 0xfffffdca <__eeprom_end+0xff7efdca>
     154:	01 6e       	ori	r16, 0xE1	; 225
     156:	84 bc       	out	0x24, r8	; 36
     158:	bf fd       	.word	0xfdbf	; ????
     15a:	c1 2f       	mov	r28, r17
     15c:	3d 6c       	ori	r19, 0xCD	; 205
     15e:	74 31       	cpi	r23, 0x14	; 20
     160:	9a bd       	out	0x2a, r25	; 42
     162:	56 83       	std	Z+6, r21	; 0x06
     164:	3d da       	rcall	.-2950   	; 0xfffff5e0 <__eeprom_end+0xff7ef5e0>
     166:	3d 00       	.word	0x003d	; ????
     168:	c7 7f       	andi	r28, 0xF7	; 247
     16a:	11 be       	out	0x31, r1	; 49
     16c:	d9 e4       	ldi	r29, 0x49	; 73
     16e:	bb 4c       	sbci	r27, 0xCB	; 203
     170:	3e 91       	ld	r19, -X
     172:	6b aa       	std	Y+51, r6	; 0x33
     174:	aa be       	out	0x3a, r10	; 58
     176:	00 00       	nop
     178:	00 80       	ld	r0, Z
     17a:	3f 05       	cpc	r19, r15
     17c:	a8 4c       	sbci	r26, 0xC8	; 200
     17e:	cd b2       	in	r12, 0x1d	; 29
     180:	d4 4e       	sbci	r29, 0xE4	; 228
     182:	b9 38       	cpi	r27, 0x89	; 137
     184:	36 a9       	ldd	r19, Z+54	; 0x36
     186:	02 0c       	add	r0, r2
     188:	50 b9       	out	0x00, r21	; 0
     18a:	91 86       	std	Z+9, r9	; 0x09
     18c:	88 08       	sbc	r8, r8
     18e:	3c a6       	std	Y+44, r3	; 0x2c
     190:	aa aa       	std	Y+50, r10	; 0x32
     192:	2a be       	out	0x3a, r2	; 58
     194:	00 00       	nop
     196:	00 80       	ld	r0, Z
     198:	3f 00       	.word	0x003f	; ????

0000019a <__ctors_end>:
     19a:	11 24       	eor	r1, r1
     19c:	1f be       	out	0x3f, r1	; 63
     19e:	cf ef       	ldi	r28, 0xFF	; 255
     1a0:	d1 e2       	ldi	r29, 0x21	; 33
     1a2:	de bf       	out	0x3e, r29	; 62
     1a4:	cd bf       	out	0x3d, r28	; 61
     1a6:	00 e0       	ldi	r16, 0x00	; 0
     1a8:	0c bf       	out	0x3c, r16	; 60

000001aa <__do_copy_data>:
     1aa:	12 e0       	ldi	r17, 0x02	; 2
     1ac:	a0 e0       	ldi	r26, 0x00	; 0
     1ae:	b2 e0       	ldi	r27, 0x02	; 2
     1b0:	ea e9       	ldi	r30, 0x9A	; 154
     1b2:	f9 ea       	ldi	r31, 0xA9	; 169
     1b4:	02 c0       	rjmp	.+4      	; 0x1ba <.do_copy_data_start>

000001b6 <.do_copy_data_loop>:
     1b6:	05 90       	lpm	r0, Z+
     1b8:	0d 92       	st	X+, r0

000001ba <.do_copy_data_start>:
     1ba:	ae 32       	cpi	r26, 0x2E	; 46
     1bc:	b1 07       	cpc	r27, r17
     1be:	d9 f7       	brne	.-10     	; 0x1b6 <.do_copy_data_loop>

000001c0 <__do_clear_bss>:
     1c0:	1b e0       	ldi	r17, 0x0B	; 11
     1c2:	ae e2       	ldi	r26, 0x2E	; 46
     1c4:	b2 e0       	ldi	r27, 0x02	; 2
     1c6:	01 c0       	rjmp	.+2      	; 0x1ca <.do_clear_bss_start>

000001c8 <.do_clear_bss_loop>:
     1c8:	1d 92       	st	X+, r1

000001ca <.do_clear_bss_start>:
     1ca:	aa 37       	cpi	r26, 0x7A	; 122
     1cc:	b1 07       	cpc	r27, r17
     1ce:	e1 f7       	brne	.-8      	; 0x1c8 <.do_clear_bss_loop>
     1d0:	0e 94 ee 00 	call	0x1dc	; 0x1dc <main>
     1d4:	0c 94 cc 54 	jmp	0xa998	; 0xa998 <_exit>

000001d8 <__bad_interrupt>:
     1d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001dc <main>:
#include "nRF24L01.h"
#include "behaviors.h"
#include "sensors.h"
#include "irCommunication.h"

int main(void) {
     1dc:	2f 92       	push	r2
     1de:	3f 92       	push	r3
     1e0:	4f 92       	push	r4
     1e2:	5f 92       	push	r5
     1e4:	6f 92       	push	r6
     1e6:	7f 92       	push	r7
     1e8:	8f 92       	push	r8
     1ea:	9f 92       	push	r9
     1ec:	af 92       	push	r10
     1ee:	bf 92       	push	r11
     1f0:	cf 92       	push	r12
     1f2:	df 92       	push	r13
     1f4:	ef 92       	push	r14
     1f6:	ff 92       	push	r15
     1f8:	0f 93       	push	r16
     1fa:	1f 93       	push	r17
     1fc:	df 93       	push	r29
     1fe:	cf 93       	push	r28
     200:	cd b7       	in	r28, 0x3d	; 61
     202:	de b7       	in	r29, 0x3e	; 62
     204:	2a 97       	sbiw	r28, 0x0a	; 10
     206:	0f b6       	in	r0, 0x3f	; 63
     208:	f8 94       	cli
     20a:	de bf       	out	0x3e, r29	; 62
     20c:	0f be       	out	0x3f, r0	; 63
     20e:	cd bf       	out	0x3d, r28	; 61
	unsigned char prevSelector=0;
	unsigned int i=0;
	unsigned int currRand=0, currRand2=0;
	float targetAngle=0;

	initPeripherals();
     210:	0e 94 68 20 	call	0x40d0	; 0x40d0 <initPeripherals>

	calibrateSensors();
     214:	0e 94 a4 40 	call	0x8148	; 0x8148 <calibrateSensors>

	initBehaviors();
     218:	0e 94 1e 3b 	call	0x763c	; 0x763c <initBehaviors>

	startTime = getTime100MicroSec();
     21c:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
     220:	6b 01       	movw	r12, r22
     222:	7c 01       	movw	r14, r24

	speedStepCounter = getTime100MicroSec();
     224:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
     228:	9b 01       	movw	r18, r22
     22a:	ac 01       	movw	r20, r24
     22c:	60 93 70 04 	sts	0x0470, r22
     230:	30 93 71 04 	sts	0x0471, r19
     234:	40 93 72 04 	sts	0x0472, r20
     238:	50 93 73 04 	sts	0x0473, r21
     23c:	10 92 74 04 	sts	0x0474, r1
     240:	10 92 75 04 	sts	0x0475, r1
     244:	10 92 76 04 	sts	0x0476, r1
     248:	10 92 77 04 	sts	0x0477, r1

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
	unsigned char prevSelector=0;
	unsigned int i=0;
	unsigned int currRand=0, currRand2=0;
	float targetAngle=0;
     24c:	20 e0       	ldi	r18, 0x00	; 0
     24e:	30 e0       	ldi	r19, 0x00	; 0
     250:	a9 01       	movw	r20, r18
     252:	2d 83       	std	Y+5, r18	; 0x05
     254:	3e 83       	std	Y+6, r19	; 0x06
     256:	4f 83       	std	Y+7, r20	; 0x07
     258:	58 87       	std	Y+8, r21	; 0x08
int main(void) {

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
	unsigned char prevSelector=0;
	unsigned int i=0;
	unsigned int currRand=0, currRand2=0;
     25a:	aa 24       	eor	r10, r10
     25c:	bb 24       	eor	r11, r11

int main(void) {

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
	unsigned char prevSelector=0;
	unsigned int i=0;
     25e:	1a 86       	std	Y+10, r1	; 0x0a
     260:	19 86       	std	Y+9, r1	; 0x09
#include "irCommunication.h"

int main(void) {

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
	unsigned char prevSelector=0;
     262:	00 e0       	ldi	r16, 0x00	; 0
#include "sensors.h"
#include "irCommunication.h"

int main(void) {

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
     264:	19 82       	std	Y+1, r1	; 0x01
     266:	1a 82       	std	Y+2, r1	; 0x02
     268:	1b 82       	std	Y+3, r1	; 0x03
     26a:	1c 82       	std	Y+4, r1	; 0x04
		computeAngle();

		// turn off the rgb leds after one half second in the "charger demo"
		if(currentSelector==7) {
			if((getTime100MicroSec()-turnOffLedsTime) > PAUSE_500_MSEC) {
				pwm_red = 255;
     26c:	1f ef       	ldi	r17, 0xFF	; 255
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption

				switch(rgbState) {
					case 0:
						pwm_red = 255 - currRand;	
						rgbState = 1;
     26e:	22 24       	eor	r2, r2
     270:	23 94       	inc	r2
	eeprom_update_block(calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
*/

	while(1) {

		currentSelector = getSelector();	// update selector position
     272:	0e 94 43 20 	call	0x4086	; 0x4086 <getSelector>
     276:	80 93 5c 04 	sts	0x045C, r24

		readAccelXYZ();						// update accelerometer values to compute the angle
     27a:	0e 94 e4 3f 	call	0x7fc8	; 0x7fc8 <readAccelXYZ>

		computeAngle();
     27e:	0e 94 20 45 	call	0x8a40	; 0x8a40 <computeAngle>

		// turn off the rgb leds after one half second in the "charger demo"
		if(currentSelector==7) {
     282:	80 91 5c 04 	lds	r24, 0x045C
     286:	87 30       	cpi	r24, 0x07	; 7
     288:	09 f4       	brne	.+2      	; 0x28c <main+0xb0>
     28a:	5a c2       	rjmp	.+1204   	; 0x740 <main+0x564>
				pwm_green = 255;
				pwm_blue = 255;			
			}
		}

		endTime = getTime100MicroSec();
     28c:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
     290:	6c 19       	sub	r22, r12
     292:	7d 09       	sbc	r23, r13
     294:	8e 09       	sbc	r24, r14
     296:	9f 09       	sbc	r25, r15
     298:	6e 31       	cpi	r22, 0x1E	; 30
     29a:	4b e4       	ldi	r20, 0x4B	; 75
     29c:	74 07       	cpc	r23, r20
     29e:	40 e0       	ldi	r20, 0x00	; 0
     2a0:	84 07       	cpc	r24, r20
     2a2:	40 e0       	ldi	r20, 0x00	; 0
     2a4:	94 07       	cpc	r25, r20
     2a6:	08 f0       	brcs	.+2      	; 0x2aa <main+0xce>
     2a8:	37 c2       	rjmp	.+1134   	; 0x718 <main+0x53c>
			startTime = getTime100MicroSec();
		}

		
		//if(calibrateOdomFlag==0) {
			handleIRRemoteCommands();
     2aa:	0e 94 41 16 	call	0x2c82	; 0x2c82 <handleIRRemoteCommands>
		//}


		//if(calibrateOdomFlag==0) {
			handleRFCommands();
     2ae:	0e 94 cd 10 	call	0x219a	; 0x219a <handleRFCommands>
		//}


		if(calibrateOdomFlag==0) {
     2b2:	80 91 67 05 	lds	r24, 0x0567
     2b6:	88 23       	and	r24, r24
     2b8:	09 f4       	brne	.+2      	; 0x2bc <main+0xe0>
     2ba:	fd c0       	rjmp	.+506    	; 0x4b6 <main+0x2da>

		//if(currentSelector!=6 && currentSelector!=15) {
		//	usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		//}

		switch(currentSelector) {
     2bc:	80 91 5c 04 	lds	r24, 0x045C
     2c0:	87 30       	cpi	r24, 0x07	; 7
     2c2:	09 f4       	brne	.+2      	; 0x2c6 <main+0xea>
     2c4:	e9 c1       	rjmp	.+978    	; 0x698 <main+0x4bc>
     2c6:	88 30       	cpi	r24, 0x08	; 8
     2c8:	08 f0       	brcs	.+2      	; 0x2cc <main+0xf0>
     2ca:	61 c0       	rjmp	.+194    	; 0x38e <main+0x1b2>
     2cc:	83 30       	cpi	r24, 0x03	; 3
     2ce:	09 f4       	brne	.+2      	; 0x2d2 <main+0xf6>
     2d0:	92 c2       	rjmp	.+1316   	; 0x7f6 <main+0x61a>
     2d2:	84 30       	cpi	r24, 0x04	; 4
     2d4:	08 f0       	brcs	.+2      	; 0x2d8 <main+0xfc>
     2d6:	4e c2       	rjmp	.+1180   	; 0x774 <main+0x598>
     2d8:	81 30       	cpi	r24, 0x01	; 1
     2da:	09 f4       	brne	.+2      	; 0x2de <main+0x102>
     2dc:	2b c3       	rjmp	.+1622   	; 0x934 <main+0x758>
     2de:	82 30       	cpi	r24, 0x02	; 2
     2e0:	08 f0       	brcs	.+2      	; 0x2e4 <main+0x108>
     2e2:	8b c2       	rjmp	.+1302   	; 0x7fa <main+0x61e>
    
			case 0:	// motors in direct power control (no speed control)
					handleMotorsWithNoController();
     2e4:	0e 94 1e 28 	call	0x503c	; 0x503c <handleMotorsWithNoController>
     2e8:	80 91 5c 04 	lds	r24, 0x045C
					//usart0Transmit(currentOsccal,1);
					break;

		}

		if(currentSelector!=0) {
     2ec:	88 23       	and	r24, r24
     2ee:	09 f0       	breq	.+2      	; 0x2f2 <main+0x116>
     2f0:	dd c0       	rjmp	.+442    	; 0x4ac <main+0x2d0>
     2f2:	80 e0       	ldi	r24, 0x00	; 0
			handleMotorsWithSpeedController();  
		}

		if(prevSelector != currentSelector) {	// in case the selector is changed, reset the robot state
     2f4:	08 17       	cp	r16, r24
     2f6:	09 f4       	brne	.+2      	; 0x2fa <main+0x11e>
     2f8:	bc cf       	rjmp	.-136    	; 0x272 <main+0x96>
			disableObstacleAvoidance();
     2fa:	0e 94 65 3d 	call	0x7aca	; 0x7aca <disableObstacleAvoidance>
			disableCliffAvoidance();
     2fe:	0e 94 6c 3d 	call	0x7ad8	; 0x7ad8 <disableCliffAvoidance>
			GREEN_LED0_OFF;
     302:	80 91 0b 01 	lds	r24, 0x010B
     306:	81 60       	ori	r24, 0x01	; 1
     308:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED1_OFF;
     30c:	80 91 0b 01 	lds	r24, 0x010B
     310:	82 60       	ori	r24, 0x02	; 2
     312:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED2_OFF;
     316:	80 91 0b 01 	lds	r24, 0x010B
     31a:	84 60       	ori	r24, 0x04	; 4
     31c:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED3_OFF;
     320:	a3 9a       	sbi	0x14, 3	; 20
			GREEN_LED4_OFF;
     322:	80 91 0b 01 	lds	r24, 0x010B
     326:	80 61       	ori	r24, 0x10	; 16
     328:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED5_OFF;
     32c:	80 91 0b 01 	lds	r24, 0x010B
     330:	80 62       	ori	r24, 0x20	; 32
     332:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED6_OFF;
     336:	80 91 0b 01 	lds	r24, 0x010B
     33a:	80 64       	ori	r24, 0x40	; 64
     33c:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED7_OFF;
     340:	80 91 0b 01 	lds	r24, 0x010B
     344:	80 68       	ori	r24, 0x80	; 128
     346:	80 93 0b 01 	sts	0x010B, r24
			pwm_red = 255;
     34a:	10 93 0c 02 	sts	0x020C, r17
			pwm_green = 255;
     34e:	10 93 0d 02 	sts	0x020D, r17
			pwm_blue = 255;
     352:	10 93 0e 02 	sts	0x020E, r17
			updateRedLed(pwm_red);
     356:	8f ef       	ldi	r24, 0xFF	; 255
     358:	0e 94 ac 3d 	call	0x7b58	; 0x7b58 <updateRedLed>
			updateGreenLed(pwm_green);
     35c:	80 91 0d 02 	lds	r24, 0x020D
     360:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <updateGreenLed>
			updateBlueLed(pwm_blue);
     364:	80 91 0e 02 	lds	r24, 0x020E
     368:	0e 94 d4 3d 	call	0x7ba8	; 0x7ba8 <updateBlueLed>
			setRightSpeed(0);
     36c:	80 e0       	ldi	r24, 0x00	; 0
     36e:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <setRightSpeed>
			setLeftSpeed(0);
     372:	80 e0       	ldi	r24, 0x00	; 0
     374:	0e 94 4e 29 	call	0x529c	; 0x529c <setLeftSpeed>
			rgbState = 0;
     378:	10 92 2c 03 	sts	0x032C, r1
			calibrationWritten = 0;
     37c:	10 92 79 04 	sts	0x0479, r1
			demoState = 0;
     380:	10 92 60 04 	sts	0x0460, r1

			irCommState = 0;
     384:	10 92 d7 04 	sts	0x04D7, r1
     388:	00 91 5c 04 	lds	r16, 0x045C
     38c:	72 cf       	rjmp	.-284    	; 0x272 <main+0x96>

		//if(currentSelector!=6 && currentSelector!=15) {
		//	usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		//}

		switch(currentSelector) {
     38e:	8b 30       	cpi	r24, 0x0B	; 11
     390:	09 f4       	brne	.+2      	; 0x394 <main+0x1b8>
     392:	d5 c2       	rjmp	.+1450   	; 0x93e <main+0x762>
     394:	8c 30       	cpi	r24, 0x0C	; 12
     396:	08 f0       	brcs	.+2      	; 0x39a <main+0x1be>
     398:	19 c2       	rjmp	.+1074   	; 0x7cc <main+0x5f0>
     39a:	89 30       	cpi	r24, 0x09	; 9
     39c:	09 f4       	brne	.+2      	; 0x3a0 <main+0x1c4>
     39e:	3e c2       	rjmp	.+1148   	; 0x81c <main+0x640>
     3a0:	8a 30       	cpi	r24, 0x0A	; 10
     3a2:	08 f4       	brcc	.+2      	; 0x3a6 <main+0x1ca>
     3a4:	2f c2       	rjmp	.+1118   	; 0x804 <main+0x628>
							break;
					}
					break;

			case 10:// obstacle avoidance with random colors; 4 seconds motion and 10 seconds pause					
					switch(demoState) {
     3a6:	80 91 60 04 	lds	r24, 0x0460
     3aa:	81 30       	cpi	r24, 0x01	; 1
     3ac:	09 f4       	brne	.+2      	; 0x3b0 <main+0x1d4>
     3ae:	76 c5       	rjmp	.+2796   	; 0xe9c <main+0xcc0>
     3b0:	81 30       	cpi	r24, 0x01	; 1
     3b2:	08 f0       	brcs	.+2      	; 0x3b6 <main+0x1da>
     3b4:	1b c4       	rjmp	.+2102   	; 0xbec <main+0xa10>
						case 0: // get first clock tick and start moving the robot with obstacle avoidance enabled
							demoStartTime = getTime100MicroSec();
     3b6:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
     3ba:	60 93 64 04 	sts	0x0464, r22
     3be:	70 93 65 04 	sts	0x0465, r23
     3c2:	80 93 66 04 	sts	0x0466, r24
     3c6:	90 93 67 04 	sts	0x0467, r25
							demoEndTime = getTime100MicroSec();							
     3ca:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
     3ce:	60 93 6c 04 	sts	0x046C, r22
     3d2:	70 93 6d 04 	sts	0x046D, r23
     3d6:	80 93 6e 04 	sts	0x046E, r24
     3da:	90 93 6f 04 	sts	0x046F, r25
							demoStartTime2 = getTime100MicroSec();
     3de:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
     3e2:	60 93 68 04 	sts	0x0468, r22
     3e6:	70 93 69 04 	sts	0x0469, r23
     3ea:	80 93 6a 04 	sts	0x046A, r24
     3ee:	90 93 6b 04 	sts	0x046B, r25
							enableObstacleAvoidance();
     3f2:	0e 94 61 3d 	call	0x7ac2	; 0x7ac2 <enableObstacleAvoidance>
							setLeftSpeed(20);
     3f6:	84 e1       	ldi	r24, 0x14	; 20
     3f8:	0e 94 4e 29 	call	0x529c	; 0x529c <setLeftSpeed>
							setRightSpeed(20);
     3fc:	84 e1       	ldi	r24, 0x14	; 20
     3fe:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <setRightSpeed>
							demoState = 1;
     402:	20 92 60 04 	sts	0x0460, r2
								demoState = 1;							
							}
							break;
					}	
					
					switch(rgbLedState) {
     406:	80 91 7b 04 	lds	r24, 0x047B
     40a:	81 30       	cpi	r24, 0x01	; 1
     40c:	09 f4       	brne	.+2      	; 0x410 <main+0x234>
     40e:	21 c4       	rjmp	.+2114   	; 0xc52 <main+0xa76>
     410:	81 30       	cpi	r24, 0x01	; 1
     412:	08 f0       	brcs	.+2      	; 0x416 <main+0x23a>
     414:	b0 c3       	rjmp	.+1888   	; 0xb76 <main+0x99a>
						case 0:							
							pwm_red = 255;
     416:	10 93 0c 02 	sts	0x020C, r17
							pwm_green = 255;
     41a:	10 93 0d 02 	sts	0x020D, r17
							pwm_blue = 255;
     41e:	10 93 0e 02 	sts	0x020E, r17
							if((getTime100MicroSec()-demoEndTime) >= (PAUSE_100_MSEC)) {
     422:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
     426:	9b 01       	movw	r18, r22
     428:	ac 01       	movw	r20, r24
     42a:	80 91 6c 04 	lds	r24, 0x046C
     42e:	90 91 6d 04 	lds	r25, 0x046D
     432:	a0 91 6e 04 	lds	r26, 0x046E
     436:	b0 91 6f 04 	lds	r27, 0x046F
     43a:	28 1b       	sub	r18, r24
     43c:	39 0b       	sbc	r19, r25
     43e:	4a 0b       	sbc	r20, r26
     440:	5b 0b       	sbc	r21, r27
     442:	21 3c       	cpi	r18, 0xC1	; 193
     444:	f3 e0       	ldi	r31, 0x03	; 3
     446:	3f 07       	cpc	r19, r31
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	4f 07       	cpc	r20, r31
     44c:	f0 e0       	ldi	r31, 0x00	; 0
     44e:	5f 07       	cpc	r21, r31
     450:	10 f0       	brcs	.+4      	; 0x456 <main+0x27a>
     452:	0c 94 a6 0c 	jmp	0x194c	; 0x194c <main+0x1770>
									greenLedState = 0;
								}
								setGreenLed(greenLedState, 1);
								demoEndTime = getTime100MicroSec();											
							}
							if((getTime100MicroSec()-demoStartTime2) >= (PAUSE_2_SEC)) {
     456:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
     45a:	9b 01       	movw	r18, r22
     45c:	ac 01       	movw	r20, r24
     45e:	80 91 68 04 	lds	r24, 0x0468
     462:	90 91 69 04 	lds	r25, 0x0469
     466:	a0 91 6a 04 	lds	r26, 0x046A
     46a:	b0 91 6b 04 	lds	r27, 0x046B
     46e:	28 1b       	sub	r18, r24
     470:	39 0b       	sbc	r19, r25
     472:	4a 0b       	sbc	r20, r26
     474:	5b 0b       	sbc	r21, r27
     476:	2e 31       	cpi	r18, 0x1E	; 30
     478:	6b e4       	ldi	r22, 0x4B	; 75
     47a:	36 07       	cpc	r19, r22
     47c:	60 e0       	ldi	r22, 0x00	; 0
     47e:	46 07       	cpc	r20, r22
     480:	60 e0       	ldi	r22, 0x00	; 0
     482:	56 07       	cpc	r21, r22
     484:	10 f0       	brcs	.+4      	; 0x48a <main+0x2ae>
     486:	0c 94 98 0c 	jmp	0x1930	; 0x1930 <main+0x1754>
								rgbLedState = 1;
								demoStartTime2 = getTime100MicroSec();
							}
							updateRedLed(pwm_red);
     48a:	80 91 0c 02 	lds	r24, 0x020C
     48e:	0e 94 ac 3d 	call	0x7b58	; 0x7b58 <updateRedLed>
							updateGreenLed(pwm_green);
     492:	80 91 0d 02 	lds	r24, 0x020D
     496:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <updateGreenLed>
							updateBlueLed(pwm_blue);
     49a:	80 91 0e 02 	lds	r24, 0x020E
     49e:	0e 94 d4 3d 	call	0x7ba8	; 0x7ba8 <updateBlueLed>
     4a2:	80 91 5c 04 	lds	r24, 0x045C
					//usart0Transmit(currentOsccal,1);
					break;

		}

		if(currentSelector!=0) {
     4a6:	88 23       	and	r24, r24
     4a8:	09 f4       	brne	.+2      	; 0x4ac <main+0x2d0>
     4aa:	23 cf       	rjmp	.-442    	; 0x2f2 <main+0x116>
			handleMotorsWithSpeedController();  
     4ac:	0e 94 c8 34 	call	0x6990	; 0x6990 <handleMotorsWithSpeedController>
     4b0:	80 91 5c 04 	lds	r24, 0x045C
     4b4:	1f cf       	rjmp	.-450    	; 0x2f4 <main+0x118>
			handleRFCommands();
		//}


		if(calibrateOdomFlag==0) {
			if((getTime100MicroSec()-speedStepCounter) >= SPEED_STEP_DELAY) {
     4b6:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
     4ba:	9b 01       	movw	r18, r22
     4bc:	ac 01       	movw	r20, r24
     4be:	60 e0       	ldi	r22, 0x00	; 0
     4c0:	70 e0       	ldi	r23, 0x00	; 0
     4c2:	cb 01       	movw	r24, r22
     4c4:	f0 91 70 04 	lds	r31, 0x0470
     4c8:	e0 91 71 04 	lds	r30, 0x0471
     4cc:	80 90 72 04 	lds	r8, 0x0472
     4d0:	40 90 73 04 	lds	r4, 0x0473
     4d4:	30 90 74 04 	lds	r3, 0x0474
     4d8:	50 90 75 04 	lds	r5, 0x0475
     4dc:	60 90 76 04 	lds	r6, 0x0476
     4e0:	70 90 77 04 	lds	r7, 0x0477
     4e4:	b2 2f       	mov	r27, r18
     4e6:	bf 1b       	sub	r27, r31
     4e8:	a1 e0       	ldi	r26, 0x01	; 1
     4ea:	2b 17       	cp	r18, r27
     4ec:	08 f0       	brcs	.+2      	; 0x4f0 <main+0x314>
     4ee:	a0 e0       	ldi	r26, 0x00	; 0
     4f0:	f3 2f       	mov	r31, r19
     4f2:	fe 1b       	sub	r31, r30
     4f4:	ef 2f       	mov	r30, r31
     4f6:	f1 e0       	ldi	r31, 0x01	; 1
     4f8:	3e 17       	cp	r19, r30
     4fa:	08 f0       	brcs	.+2      	; 0x4fe <main+0x322>
     4fc:	f0 e0       	ldi	r31, 0x00	; 0
     4fe:	9e 2e       	mov	r9, r30
     500:	9a 1a       	sub	r9, r26
     502:	a9 2d       	mov	r26, r9
     504:	99 24       	eor	r9, r9
     506:	93 94       	inc	r9
     508:	ea 17       	cp	r30, r26
     50a:	08 f0       	brcs	.+2      	; 0x50e <main+0x332>
     50c:	99 24       	eor	r9, r9
     50e:	f9 29       	or	r31, r9
     510:	e4 2f       	mov	r30, r20
     512:	e8 19       	sub	r30, r8
     514:	8e 2e       	mov	r8, r30
     516:	e1 e0       	ldi	r30, 0x01	; 1
     518:	48 15       	cp	r20, r8
     51a:	08 f0       	brcs	.+2      	; 0x51e <main+0x342>
     51c:	e0 e0       	ldi	r30, 0x00	; 0
     51e:	98 2c       	mov	r9, r8
     520:	9f 1a       	sub	r9, r31
     522:	f1 e0       	ldi	r31, 0x01	; 1
     524:	89 14       	cp	r8, r9
     526:	08 f0       	brcs	.+2      	; 0x52a <main+0x34e>
     528:	f0 e0       	ldi	r31, 0x00	; 0
     52a:	ef 2b       	or	r30, r31
     52c:	f5 2f       	mov	r31, r21
     52e:	f4 19       	sub	r31, r4
     530:	4f 2e       	mov	r4, r31
     532:	f1 e0       	ldi	r31, 0x01	; 1
     534:	54 15       	cp	r21, r4
     536:	08 f0       	brcs	.+2      	; 0x53a <main+0x35e>
     538:	f0 e0       	ldi	r31, 0x00	; 0
     53a:	84 2c       	mov	r8, r4
     53c:	8e 1a       	sub	r8, r30
     53e:	e1 e0       	ldi	r30, 0x01	; 1
     540:	48 14       	cp	r4, r8
     542:	08 f0       	brcs	.+2      	; 0x546 <main+0x36a>
     544:	e0 e0       	ldi	r30, 0x00	; 0
     546:	fe 2b       	or	r31, r30
     548:	31 94       	neg	r3
     54a:	e1 e0       	ldi	r30, 0x01	; 1
     54c:	63 15       	cp	r22, r3
     54e:	08 f0       	brcs	.+2      	; 0x552 <main+0x376>
     550:	e0 e0       	ldi	r30, 0x00	; 0
     552:	43 2c       	mov	r4, r3
     554:	4f 1a       	sub	r4, r31
     556:	f1 e0       	ldi	r31, 0x01	; 1
     558:	34 14       	cp	r3, r4
     55a:	08 f0       	brcs	.+2      	; 0x55e <main+0x382>
     55c:	f0 e0       	ldi	r31, 0x00	; 0
     55e:	ef 2b       	or	r30, r31
     560:	51 94       	neg	r5
     562:	f1 e0       	ldi	r31, 0x01	; 1
     564:	75 15       	cp	r23, r5
     566:	08 f0       	brcs	.+2      	; 0x56a <main+0x38e>
     568:	f0 e0       	ldi	r31, 0x00	; 0
     56a:	35 2c       	mov	r3, r5
     56c:	3e 1a       	sub	r3, r30
     56e:	e1 e0       	ldi	r30, 0x01	; 1
     570:	53 14       	cp	r5, r3
     572:	08 f0       	brcs	.+2      	; 0x576 <main+0x39a>
     574:	e0 e0       	ldi	r30, 0x00	; 0
     576:	fe 2b       	or	r31, r30
     578:	61 94       	neg	r6
     57a:	e1 e0       	ldi	r30, 0x01	; 1
     57c:	86 15       	cp	r24, r6
     57e:	08 f0       	brcs	.+2      	; 0x582 <main+0x3a6>
     580:	e0 e0       	ldi	r30, 0x00	; 0
     582:	96 2d       	mov	r25, r6
     584:	9f 1b       	sub	r25, r31
     586:	81 e0       	ldi	r24, 0x01	; 1
     588:	69 16       	cp	r6, r25
     58a:	08 f0       	brcs	.+2      	; 0x58e <main+0x3b2>
     58c:	80 e0       	ldi	r24, 0x00	; 0
     58e:	e8 2b       	or	r30, r24
     590:	71 94       	neg	r7
     592:	7e 16       	cp	r7, r30
     594:	91 f4       	brne	.+36     	; 0x5ba <main+0x3de>
     596:	99 23       	and	r25, r25
     598:	81 f4       	brne	.+32     	; 0x5ba <main+0x3de>
     59a:	33 20       	and	r3, r3
     59c:	71 f4       	brne	.+28     	; 0x5ba <main+0x3de>
     59e:	44 20       	and	r4, r4
     5a0:	61 f4       	brne	.+24     	; 0x5ba <main+0x3de>
     5a2:	88 20       	and	r8, r8
     5a4:	51 f4       	brne	.+20     	; 0x5ba <main+0x3de>
     5a6:	99 20       	and	r9, r9
     5a8:	41 f4       	brne	.+16     	; 0x5ba <main+0x3de>
     5aa:	a2 30       	cpi	r26, 0x02	; 2
     5ac:	30 f4       	brcc	.+12     	; 0x5ba <main+0x3de>
     5ae:	a1 30       	cpi	r26, 0x01	; 1
     5b0:	09 f0       	breq	.+2      	; 0x5b4 <main+0x3d8>
     5b2:	84 ce       	rjmp	.-760    	; 0x2bc <main+0xe0>
     5b4:	b0 39       	cpi	r27, 0x90	; 144
     5b6:	08 f4       	brcc	.+2      	; 0x5ba <main+0x3de>
     5b8:	81 ce       	rjmp	.-766    	; 0x2bc <main+0xe0>
				speedStepCounter = getTime100MicroSec();
     5ba:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
     5be:	9b 01       	movw	r18, r22
     5c0:	ac 01       	movw	r20, r24
     5c2:	60 93 70 04 	sts	0x0470, r22
     5c6:	30 93 71 04 	sts	0x0471, r19
     5ca:	40 93 72 04 	sts	0x0472, r20
     5ce:	50 93 73 04 	sts	0x0473, r21
     5d2:	10 92 74 04 	sts	0x0474, r1
     5d6:	10 92 75 04 	sts	0x0475, r1
     5da:	10 92 76 04 	sts	0x0476, r1
     5de:	10 92 77 04 	sts	0x0477, r1

				if(softAccEnabled) {
     5e2:	80 91 78 04 	lds	r24, 0x0478
     5e6:	88 23       	and	r24, r24
     5e8:	09 f4       	brne	.+2      	; 0x5ec <main+0x410>
     5ea:	ea c1       	rjmp	.+980    	; 0x9c0 <main+0x7e4>
					if(pwm_right_desired == 0) {
     5ec:	80 91 09 03 	lds	r24, 0x0309
     5f0:	90 91 0a 03 	lds	r25, 0x030A
     5f4:	00 97       	sbiw	r24, 0x00	; 0
     5f6:	09 f4       	brne	.+2      	; 0x5fa <main+0x41e>
     5f8:	88 c2       	rjmp	.+1296   	; 0xb0a <main+0x92e>
						pwm_intermediate_right_desired = 0;
					} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
     5fa:	20 91 0d 03 	lds	r18, 0x030D
     5fe:	30 91 0e 03 	lds	r19, 0x030E
     602:	28 9f       	mul	r18, r24
     604:	a0 01       	movw	r20, r0
     606:	29 9f       	mul	r18, r25
     608:	50 0d       	add	r21, r0
     60a:	38 9f       	mul	r19, r24
     60c:	50 0d       	add	r21, r0
     60e:	11 24       	eor	r1, r1
     610:	57 fd       	sbrc	r21, 7
     612:	7b c2       	rjmp	.+1270   	; 0xb0a <main+0x92e>
						pwm_intermediate_right_desired = 0;
					} else if(pwm_right_desired > pwm_intermediate_right_desired) {
     614:	28 17       	cp	r18, r24
     616:	39 07       	cpc	r19, r25
     618:	14 f0       	brlt	.+4      	; 0x61e <main+0x442>
     61a:	0c 94 70 0c 	jmp	0x18e0	; 0x18e0 <main+0x1704>
						pwm_intermediate_right_desired += speedStep;
     61e:	40 91 17 02 	lds	r20, 0x0217
     622:	24 0f       	add	r18, r20
     624:	31 1d       	adc	r19, r1
     626:	30 93 0e 03 	sts	0x030E, r19
     62a:	20 93 0d 03 	sts	0x030D, r18
						if(pwm_intermediate_right_desired > pwm_right_desired) {
     62e:	82 17       	cp	r24, r18
     630:	93 07       	cpc	r25, r19
     632:	24 f4       	brge	.+8      	; 0x63c <main+0x460>
							pwm_intermediate_right_desired = pwm_right_desired;
						}
					} else if(pwm_right_desired < pwm_intermediate_right_desired) {
						pwm_intermediate_right_desired -= speedStep;
						if(pwm_intermediate_right_desired < pwm_right_desired) {
							pwm_intermediate_right_desired = pwm_right_desired;
     634:	90 93 0e 03 	sts	0x030E, r25
     638:	80 93 0d 03 	sts	0x030D, r24
						}					
					}
	
					if(pwm_left_desired == 0) {
     63c:	80 91 0b 03 	lds	r24, 0x030B
     640:	90 91 0c 03 	lds	r25, 0x030C
     644:	00 97       	sbiw	r24, 0x00	; 0
     646:	09 f4       	brne	.+2      	; 0x64a <main+0x46e>
     648:	5b c2       	rjmp	.+1206   	; 0xb00 <main+0x924>
						pwm_intermediate_left_desired = 0;
					} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
     64a:	20 91 0f 03 	lds	r18, 0x030F
     64e:	30 91 10 03 	lds	r19, 0x0310
     652:	28 9f       	mul	r18, r24
     654:	a0 01       	movw	r20, r0
     656:	29 9f       	mul	r18, r25
     658:	50 0d       	add	r21, r0
     65a:	38 9f       	mul	r19, r24
     65c:	50 0d       	add	r21, r0
     65e:	11 24       	eor	r1, r1
     660:	57 fd       	sbrc	r21, 7
     662:	4e c2       	rjmp	.+1180   	; 0xb00 <main+0x924>
						pwm_intermediate_left_desired = 0;
					} else if(pwm_left_desired > pwm_intermediate_left_desired) {
     664:	28 17       	cp	r18, r24
     666:	39 07       	cpc	r19, r25
     668:	14 f0       	brlt	.+4      	; 0x66e <main+0x492>
     66a:	0c 94 84 0c 	jmp	0x1908	; 0x1908 <main+0x172c>
						pwm_intermediate_left_desired += speedStep;
     66e:	40 91 17 02 	lds	r20, 0x0217
     672:	24 0f       	add	r18, r20
     674:	31 1d       	adc	r19, r1
     676:	30 93 10 03 	sts	0x0310, r19
     67a:	20 93 0f 03 	sts	0x030F, r18
						if(pwm_intermediate_left_desired > pwm_left_desired) {
     67e:	82 17       	cp	r24, r18
     680:	93 07       	cpc	r25, r19
     682:	0c f0       	brlt	.+2      	; 0x686 <main+0x4aa>
     684:	1b ce       	rjmp	.-970    	; 0x2bc <main+0xe0>
							pwm_intermediate_left_desired = pwm_left_desired;
						}					
					}
				} else {
					pwm_intermediate_right_desired = pwm_right_desired;
					pwm_intermediate_left_desired = pwm_left_desired;
     686:	90 93 10 03 	sts	0x0310, r25
     68a:	80 93 0f 03 	sts	0x030F, r24

		//if(currentSelector!=6 && currentSelector!=15) {
		//	usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		//}

		switch(currentSelector) {
     68e:	80 91 5c 04 	lds	r24, 0x045C
     692:	87 30       	cpi	r24, 0x07	; 7
     694:	09 f0       	breq	.+2      	; 0x698 <main+0x4bc>
     696:	17 ce       	rjmp	.-978    	; 0x2c6 <main+0xea>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
     698:	80 91 60 04 	lds	r24, 0x0460
     69c:	82 30       	cpi	r24, 0x02	; 2
     69e:	09 f4       	brne	.+2      	; 0x6a2 <main+0x4c6>
     6a0:	68 c7       	rjmp	.+3792   	; 0x1572 <main+0x1396>
     6a2:	83 30       	cpi	r24, 0x03	; 3
     6a4:	08 f0       	brcs	.+2      	; 0x6a8 <main+0x4cc>
     6a6:	8d c3       	rjmp	.+1818   	; 0xdc2 <main+0xbe6>
     6a8:	88 23       	and	r24, r24
     6aa:	09 f0       	breq	.+2      	; 0x6ae <main+0x4d2>
     6ac:	bc c6       	rjmp	.+3448   	; 0x1426 <main+0x124a>
						case 0:	// move around
							turnOffGreenLeds();
     6ae:	0e 94 85 3e 	call	0x7d0a	; 0x7d0a <turnOffGreenLeds>
							GREEN_LED0_ON;
     6b2:	80 91 0b 01 	lds	r24, 0x010B
     6b6:	8e 7f       	andi	r24, 0xFE	; 254
     6b8:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED1_ON;
							lineFound = 0;
     6bc:	10 92 61 04 	sts	0x0461, r1
							enableObstacleAvoidance();
     6c0:	0e 94 61 3d 	call	0x7ac2	; 0x7ac2 <enableObstacleAvoidance>
							setRightSpeed(20);
     6c4:	84 e1       	ldi	r24, 0x14	; 20
     6c6:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <setRightSpeed>
							setLeftSpeed(20);
     6ca:	84 e1       	ldi	r24, 0x14	; 20
     6cc:	0e 94 4e 29 	call	0x529c	; 0x529c <setLeftSpeed>
							demoEndTime = getTime100MicroSec();
     6d0:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
     6d4:	9b 01       	movw	r18, r22
     6d6:	ac 01       	movw	r20, r24
     6d8:	60 93 6c 04 	sts	0x046C, r22
     6dc:	70 93 6d 04 	sts	0x046D, r23
     6e0:	80 93 6e 04 	sts	0x046E, r24
     6e4:	90 93 6f 04 	sts	0x046F, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {
     6e8:	80 91 64 04 	lds	r24, 0x0464
     6ec:	90 91 65 04 	lds	r25, 0x0465
     6f0:	a0 91 66 04 	lds	r26, 0x0466
     6f4:	b0 91 67 04 	lds	r27, 0x0467
     6f8:	28 1b       	sub	r18, r24
     6fa:	39 0b       	sbc	r19, r25
     6fc:	4a 0b       	sbc	r20, r26
     6fe:	5b 0b       	sbc	r21, r27
     700:	23 33       	cpi	r18, 0x33	; 51
     702:	6f ee       	ldi	r22, 0xEF	; 239
     704:	36 07       	cpc	r19, r22
     706:	62 e0       	ldi	r22, 0x02	; 2
     708:	46 07       	cpc	r20, r22
     70a:	60 e0       	ldi	r22, 0x00	; 0
     70c:	56 07       	cpc	r21, r22
     70e:	08 f4       	brcc	.+2      	; 0x712 <main+0x536>
     710:	bc ce       	rjmp	.-648    	; 0x48a <main+0x2ae>

								if(proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {
									outOfLine++;
									if(outOfLine > 250) {
										chargeContact = 0;
										demoState = 1;
     712:	20 92 60 04 	sts	0x0460, r2
										break;
     716:	b9 ce       	rjmp	.-654    	; 0x48a <main+0x2ae>
			}
		}

		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
     718:	0e 94 48 21 	call	0x4290	; 0x4290 <readBatteryLevel>
             		
			if(currentSelector==4 || currentSelector==5) {
     71c:	80 91 5c 04 	lds	r24, 0x045C
     720:	98 2f       	mov	r25, r24
     722:	94 50       	subi	r25, 0x04	; 4
     724:	92 30       	cpi	r25, 0x02	; 2
     726:	08 f4       	brcc	.+2      	; 0x72a <main+0x54e>
     728:	58 c1       	rjmp	.+688    	; 0x9da <main+0x7fe>
					}
				} else {	// do nothing => all 3 leds turned on

				}

			} else if(currentSelector==7) {
     72a:	87 30       	cpi	r24, 0x07	; 7
     72c:	09 f4       	brne	.+2      	; 0x730 <main+0x554>
     72e:	80 c1       	rjmp	.+768    	; 0xa30 <main+0x854>

				}

				turnOffLedsTime = getTime100MicroSec();

			} else if(currentSelector==6) {
     730:	86 30       	cpi	r24, 0x06	; 6
     732:	09 f4       	brne	.+2      	; 0x736 <main+0x55a>
     734:	2a c1       	rjmp	.+596    	; 0x98a <main+0x7ae>
						rgbState = 0;
					}
				}
			}

			startTime = getTime100MicroSec();
     736:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
     73a:	6b 01       	movw	r12, r22
     73c:	7c 01       	movw	r14, r24
     73e:	b5 cd       	rjmp	.-1174   	; 0x2aa <main+0xce>

		computeAngle();

		// turn off the rgb leds after one half second in the "charger demo"
		if(currentSelector==7) {
			if((getTime100MicroSec()-turnOffLedsTime) > PAUSE_500_MSEC) {
     740:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
     744:	29 81       	ldd	r18, Y+1	; 0x01
     746:	3a 81       	ldd	r19, Y+2	; 0x02
     748:	4b 81       	ldd	r20, Y+3	; 0x03
     74a:	5c 81       	ldd	r21, Y+4	; 0x04
     74c:	62 1b       	sub	r22, r18
     74e:	73 0b       	sbc	r23, r19
     750:	84 0b       	sbc	r24, r20
     752:	95 0b       	sbc	r25, r21
     754:	68 3c       	cpi	r22, 0xC8	; 200
     756:	32 e1       	ldi	r19, 0x12	; 18
     758:	73 07       	cpc	r23, r19
     75a:	30 e0       	ldi	r19, 0x00	; 0
     75c:	83 07       	cpc	r24, r19
     75e:	30 e0       	ldi	r19, 0x00	; 0
     760:	93 07       	cpc	r25, r19
     762:	08 f4       	brcc	.+2      	; 0x766 <main+0x58a>
     764:	93 cd       	rjmp	.-1242   	; 0x28c <main+0xb0>
				pwm_red = 255;
     766:	10 93 0c 02 	sts	0x020C, r17
				pwm_green = 255;
     76a:	10 93 0d 02 	sts	0x020D, r17
				pwm_blue = 255;			
     76e:	10 93 0e 02 	sts	0x020E, r17
     772:	8c cd       	rjmp	.-1256   	; 0x28c <main+0xb0>

		//if(currentSelector!=6 && currentSelector!=15) {
		//	usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		//}

		switch(currentSelector) {
     774:	85 30       	cpi	r24, 0x05	; 5
     776:	09 f4       	brne	.+2      	; 0x77a <main+0x59e>
     778:	8d c0       	rjmp	.+282    	; 0x894 <main+0x6b8>
     77a:	86 30       	cpi	r24, 0x06	; 6
     77c:	08 f4       	brcc	.+2      	; 0x780 <main+0x5a4>
     77e:	65 c0       	rjmp	.+202    	; 0x84a <main+0x66e>
					setLeftSpeed(25);
					setRightSpeed(25);
					break;

			case 6:	// robot testing
					switch(menuChoice) {
     780:	80 91 33 04 	lds	r24, 0x0433
     784:	81 30       	cpi	r24, 0x01	; 1
     786:	09 f4       	brne	.+2      	; 0x78a <main+0x5ae>
     788:	b6 c3       	rjmp	.+1900   	; 0xef6 <main+0xd1a>
     78a:	81 30       	cpi	r24, 0x01	; 1
     78c:	08 f0       	brcs	.+2      	; 0x790 <main+0x5b4>
     78e:	a6 c2       	rjmp	.+1356   	; 0xcdc <main+0xb00>
						case 0:
							setRightSpeed(0);
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <setRightSpeed>
							setLeftSpeed(0);
     796:	80 e0       	ldi	r24, 0x00	; 0
     798:	0e 94 4e 29 	call	0x529c	; 0x529c <setLeftSpeed>
							turnOffGreenLeds();
     79c:	0e 94 85 3e 	call	0x7d0a	; 0x7d0a <turnOffGreenLeds>
							pwm_red=255;
     7a0:	10 93 0c 02 	sts	0x020C, r17
							pwm_green=255;
     7a4:	10 93 0d 02 	sts	0x020D, r17
							pwm_blue=255;
     7a8:	10 93 0e 02 	sts	0x020E, r17
							updateRedLed(pwm_red);
     7ac:	8f ef       	ldi	r24, 0xFF	; 255
     7ae:	0e 94 ac 3d 	call	0x7b58	; 0x7b58 <updateRedLed>
							updateGreenLed(pwm_green);
     7b2:	80 91 0d 02 	lds	r24, 0x020D
     7b6:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <updateGreenLed>
							updateBlueLed(pwm_blue);
     7ba:	80 91 0e 02 	lds	r24, 0x020E
     7be:	0e 94 d4 3d 	call	0x7ba8	; 0x7ba8 <updateBlueLed>
							LED_IR1_HIGH;
     7c2:	44 9a       	sbi	0x08, 4	; 8
							LED_IR2_HIGH;
     7c4:	45 9a       	sbi	0x08, 5	; 8
     7c6:	80 91 5c 04 	lds	r24, 0x045C
							break;
     7ca:	90 cd       	rjmp	.-1248   	; 0x2ec <main+0x110>

		//if(currentSelector!=6 && currentSelector!=15) {
		//	usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		//}

		switch(currentSelector) {
     7cc:	8d 30       	cpi	r24, 0x0D	; 13
     7ce:	09 f4       	brne	.+2      	; 0x7d2 <main+0x5f6>
     7d0:	9e c0       	rjmp	.+316    	; 0x90e <main+0x732>
     7d2:	8d 30       	cpi	r24, 0x0D	; 13
     7d4:	08 f4       	brcc	.+2      	; 0x7d8 <main+0x5fc>
     7d6:	75 c0       	rjmp	.+234    	; 0x8c2 <main+0x6e6>
     7d8:	8e 30       	cpi	r24, 0x0E	; 14
     7da:	09 f0       	breq	.+2      	; 0x7de <main+0x602>
     7dc:	87 cd       	rjmp	.-1266   	; 0x2ec <main+0x110>
						break;
				}
				break;
			
			case 14: // IR local communication: listen only
				switch(demoState) {
     7de:	80 91 60 04 	lds	r24, 0x0460
     7e2:	88 23       	and	r24, r24
     7e4:	09 f0       	breq	.+2      	; 0x7e8 <main+0x60c>
     7e6:	7f c1       	rjmp	.+766    	; 0xae6 <main+0x90a>
					case 0:
						irCommInit();
     7e8:	0e 94 c1 45 	call	0x8b82	; 0x8b82 <irCommInit>
					case 0:
						irCommInit();
						enableObstacleAvoidance();
						setLeftSpeed(10);
						setRightSpeed(10);
						demoState = 1;
     7ec:	20 92 60 04 	sts	0x0460, r2
     7f0:	80 91 5c 04 	lds	r24, 0x045C
						break;
     7f4:	7b cd       	rjmp	.-1290   	; 0x2ec <main+0x110>
             		enableCliffAvoidance();
					break;
    
			case 3:	// both obstacle and cliff avoidance enabled (the robot does not move untill commands are
					// received from the radio or tv remote)
            		enableObstacleAvoidance();
     7f6:	0e 94 61 3d 	call	0x7ac2	; 0x7ac2 <enableObstacleAvoidance>
					enableCliffAvoidance();
     7fa:	0e 94 68 3d 	call	0x7ad0	; 0x7ad0 <enableCliffAvoidance>
     7fe:	80 91 5c 04 	lds	r24, 0x045C
					break;
     802:	74 cd       	rjmp	.-1304   	; 0x2ec <main+0x110>
					updateBlueLed(pwm_blue);

					break;
  
			case 8:	// motors calibration
					irEnabled = 1;
     804:	20 92 12 02 	sts	0x0212, r2
					if(calibrateOdomFlag==1) {
     808:	80 91 67 05 	lds	r24, 0x0567
     80c:	81 30       	cpi	r24, 0x01	; 1
     80e:	09 f0       	breq	.+2      	; 0x812 <main+0x636>
     810:	4d ce       	rjmp	.-870    	; 0x4ac <main+0x2d0>
						handleCalibration();
     812:	0e 94 6f 2a 	call	0x54de	; 0x54de <handleCalibration>
     816:	80 91 5c 04 	lds	r24, 0x045C
     81a:	68 cd       	rjmp	.-1328   	; 0x2ec <main+0x110>
					break;

			case 9:	// write default calibration values; wait 2 seconds before start writing the calibration values
					// in eeprom in order to avoid rewriting the data involuntarily when moving the selector and passing 
					// through selector position 9
					switch(demoState) {
     81c:	80 91 60 04 	lds	r24, 0x0460
     820:	81 30       	cpi	r24, 0x01	; 1
     822:	09 f4       	brne	.+2      	; 0x826 <main+0x64a>
     824:	d6 c5       	rjmp	.+2988   	; 0x13d2 <main+0x11f6>
     826:	81 30       	cpi	r24, 0x01	; 1
     828:	08 f0       	brcs	.+2      	; 0x82c <main+0x650>
     82a:	77 c2       	rjmp	.+1262   	; 0xd1a <main+0xb3e>
						case 0:
							demoStartTime = getTime100MicroSec();
     82c:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
     830:	60 93 64 04 	sts	0x0464, r22
     834:	70 93 65 04 	sts	0x0465, r23
     838:	80 93 66 04 	sts	0x0466, r24
     83c:	90 93 67 04 	sts	0x0467, r25
							demoState = 1;
     840:	20 92 60 04 	sts	0x0460, r2
     844:	80 91 5c 04 	lds	r24, 0x045C
							break;
     848:	51 cd       	rjmp	.-1374   	; 0x2ec <main+0x110>
            		enableObstacleAvoidance();
					enableCliffAvoidance();
					break;
            
			case 4:	// random colors on RGB leds; small green leds turned on
					GREEN_LED0_ON;
     84a:	80 91 0b 01 	lds	r24, 0x010B
     84e:	8e 7f       	andi	r24, 0xFE	; 254
     850:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED1_ON;
     854:	80 91 0b 01 	lds	r24, 0x010B
     858:	8d 7f       	andi	r24, 0xFD	; 253
     85a:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED2_ON;
     85e:	80 91 0b 01 	lds	r24, 0x010B
     862:	8b 7f       	andi	r24, 0xFB	; 251
     864:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED3_ON;
     868:	a3 98       	cbi	0x14, 3	; 20
					GREEN_LED4_ON;
     86a:	80 91 0b 01 	lds	r24, 0x010B
     86e:	8f 7e       	andi	r24, 0xEF	; 239
     870:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED5_ON;
     874:	80 91 0b 01 	lds	r24, 0x010B
     878:	8f 7d       	andi	r24, 0xDF	; 223
     87a:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED6_ON;
     87e:	80 91 0b 01 	lds	r24, 0x010B
     882:	8f 7b       	andi	r24, 0xBF	; 191
     884:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED7_ON;
     888:	80 91 0b 01 	lds	r24, 0x010B
     88c:	8f 77       	andi	r24, 0x7F	; 127
     88e:	80 93 0b 01 	sts	0x010B, r24
     892:	fb cd       	rjmp	.-1034   	; 0x48a <main+0x2ae>
					updateBlueLed(pwm_blue);
					break;
             
			case 5:	// random colors on RGB leds; obstacle avoidance enabled; robot start moving automatically
					// (motors speed setting)
					updateRedLed(pwm_red);
     894:	80 91 0c 02 	lds	r24, 0x020C
     898:	0e 94 ac 3d 	call	0x7b58	; 0x7b58 <updateRedLed>
					updateGreenLed(pwm_green);
     89c:	80 91 0d 02 	lds	r24, 0x020D
     8a0:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <updateGreenLed>
					updateBlueLed(pwm_blue);
     8a4:	80 91 0e 02 	lds	r24, 0x020E
     8a8:	0e 94 d4 3d 	call	0x7ba8	; 0x7ba8 <updateBlueLed>
					enableObstacleAvoidance();
     8ac:	0e 94 61 3d 	call	0x7ac2	; 0x7ac2 <enableObstacleAvoidance>
					setLeftSpeed(25);
     8b0:	89 e1       	ldi	r24, 0x19	; 25
     8b2:	0e 94 4e 29 	call	0x529c	; 0x529c <setLeftSpeed>
					setRightSpeed(25);
     8b6:	89 e1       	ldi	r24, 0x19	; 25
     8b8:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <setRightSpeed>
     8bc:	80 91 5c 04 	lds	r24, 0x045C
					break;
     8c0:	15 cd       	rjmp	.-1494   	; 0x2ec <main+0x110>
				}
				break;

			case 12:	// sync-react demo using the IR local communication (2 robots only): the robots move around with obstacle avoidance
						// enabled and when they detect each other they try to point towards each other
				switch(demoState) {
     8c2:	80 91 60 04 	lds	r24, 0x0460
     8c6:	82 30       	cpi	r24, 0x02	; 2
     8c8:	09 f4       	brne	.+2      	; 0x8cc <main+0x6f0>
     8ca:	ad c7       	rjmp	.+3930   	; 0x1826 <main+0x164a>
     8cc:	83 30       	cpi	r24, 0x03	; 3
     8ce:	08 f0       	brcs	.+2      	; 0x8d2 <main+0x6f6>
     8d0:	21 c1       	rjmp	.+578    	; 0xb14 <main+0x938>
     8d2:	88 23       	and	r24, r24
     8d4:	09 f4       	brne	.+2      	; 0x8d8 <main+0x6fc>
     8d6:	b8 c2       	rjmp	.+1392   	; 0xe48 <main+0xc6c>
     8d8:	81 30       	cpi	r24, 0x01	; 1
     8da:	09 f0       	breq	.+2      	; 0x8de <main+0x702>
     8dc:	e7 cd       	rjmp	.-1074   	; 0x4ac <main+0x2d0>
						irCommInit();
						demoState = 1;
						break;

					case 1:						
						enableObstacleAvoidance();
     8de:	0e 94 61 3d 	call	0x7ac2	; 0x7ac2 <enableObstacleAvoidance>
						setLeftSpeed(10);
     8e2:	8a e0       	ldi	r24, 0x0A	; 10
     8e4:	0e 94 4e 29 	call	0x529c	; 0x529c <setLeftSpeed>
						setRightSpeed(10);
     8e8:	8a e0       	ldi	r24, 0x0A	; 10
     8ea:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <setRightSpeed>
						demoState = 2;
     8ee:	a2 e0       	ldi	r26, 0x02	; 2
     8f0:	a0 93 60 04 	sts	0x0460, r26
						demoStartTime = getTime100MicroSec();
     8f4:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
     8f8:	60 93 64 04 	sts	0x0464, r22
     8fc:	70 93 65 04 	sts	0x0465, r23
     900:	80 93 66 04 	sts	0x0466, r24
     904:	90 93 67 04 	sts	0x0467, r25
     908:	80 91 5c 04 	lds	r24, 0x045C
						break;
     90c:	ef cc       	rjmp	.-1570   	; 0x2ec <main+0x110>

				}
				break;

			case 13: // IR local communication: listen and transmit continuously
				switch(demoState) {
     90e:	80 91 60 04 	lds	r24, 0x0460
     912:	81 30       	cpi	r24, 0x01	; 1
     914:	09 f4       	brne	.+2      	; 0x918 <main+0x73c>
     916:	b8 c2       	rjmp	.+1392   	; 0xe88 <main+0xcac>
     918:	81 30       	cpi	r24, 0x01	; 1
     91a:	08 f0       	brcs	.+2      	; 0x91e <main+0x742>
     91c:	3b c2       	rjmp	.+1142   	; 0xd94 <main+0xbb8>
					case 0:
						irCommInit();
     91e:	0e 94 c1 45 	call	0x8b82	; 0x8b82 <irCommInit>
						enableObstacleAvoidance();
     922:	0e 94 61 3d 	call	0x7ac2	; 0x7ac2 <enableObstacleAvoidance>
						setLeftSpeed(10);
     926:	8a e0       	ldi	r24, 0x0A	; 10
     928:	0e 94 4e 29 	call	0x529c	; 0x529c <setLeftSpeed>
						setRightSpeed(10);
     92c:	8a e0       	ldi	r24, 0x0A	; 10
     92e:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <setRightSpeed>
     932:	5c cf       	rjmp	.-328    	; 0x7ec <main+0x610>
					handleMotorsWithNoController();
					break;
             
			case 1:	// obstacle avoidance enabled (the robot does not move untill commands are 
					// received from the radio or tv remote)
             		enableObstacleAvoidance();
     934:	0e 94 61 3d 	call	0x7ac2	; 0x7ac2 <enableObstacleAvoidance>
     938:	80 91 5c 04 	lds	r24, 0x045C
					break;
     93c:	d7 cc       	rjmp	.-1618   	; 0x2ec <main+0x110>

					break;

			case 11: 	// sync-react demo using the IR local communication (2 robots only): the robots move around with obstacle avoidance
						// enabled and when they detect each other they try to align towards the same direction rotating in place
				switch(demoState) {
     93e:	80 91 60 04 	lds	r24, 0x0460
     942:	82 30       	cpi	r24, 0x02	; 2
     944:	09 f4       	brne	.+2      	; 0x948 <main+0x76c>
     946:	d5 c5       	rjmp	.+2986   	; 0x14f2 <main+0x1316>
     948:	83 30       	cpi	r24, 0x03	; 3
     94a:	08 f0       	brcs	.+2      	; 0x94e <main+0x772>
     94c:	f5 c1       	rjmp	.+1002   	; 0xd38 <main+0xb5c>
     94e:	88 23       	and	r24, r24
     950:	09 f4       	brne	.+2      	; 0x954 <main+0x778>
     952:	7a c2       	rjmp	.+1268   	; 0xe48 <main+0xc6c>
     954:	81 30       	cpi	r24, 0x01	; 1
     956:	09 f0       	breq	.+2      	; 0x95a <main+0x77e>
     958:	a9 cd       	rjmp	.-1198   	; 0x4ac <main+0x2d0>
						irCommInit();
						demoState = 1;
						break;

					case 1:						
						enableObstacleAvoidance();
     95a:	0e 94 61 3d 	call	0x7ac2	; 0x7ac2 <enableObstacleAvoidance>
						setLeftSpeed(10);
     95e:	8a e0       	ldi	r24, 0x0A	; 10
     960:	0e 94 4e 29 	call	0x529c	; 0x529c <setLeftSpeed>
						setRightSpeed(10);
     964:	8a e0       	ldi	r24, 0x0A	; 10
     966:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <setRightSpeed>
						demoState = 2;
     96a:	f2 e0       	ldi	r31, 0x02	; 2
     96c:	f0 93 60 04 	sts	0x0460, r31
						demoStartTime = getTime100MicroSec();
     970:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
     974:	60 93 64 04 	sts	0x0464, r22
     978:	70 93 65 04 	sts	0x0465, r23
     97c:	80 93 66 04 	sts	0x0466, r24
     980:	90 93 67 04 	sts	0x0467, r25
     984:	80 91 5c 04 	lds	r24, 0x045C
						break;
     988:	b1 cc       	rjmp	.-1694   	; 0x2ec <main+0x110>
				}

				turnOffLedsTime = getTime100MicroSec();

			} else if(currentSelector==6) {
				if(menuChoice==1 && rfFlags<=1) {
     98a:	80 91 33 04 	lds	r24, 0x0433
     98e:	81 30       	cpi	r24, 0x01	; 1
     990:	09 f0       	breq	.+2      	; 0x994 <main+0x7b8>
     992:	d1 ce       	rjmp	.-606    	; 0x736 <main+0x55a>
     994:	90 91 27 03 	lds	r25, 0x0327
     998:	92 30       	cpi	r25, 0x02	; 2
     99a:	08 f0       	brcs	.+2      	; 0x99e <main+0x7c2>
     99c:	cc ce       	rjmp	.-616    	; 0x736 <main+0x55a>
					if(rgbState == 0) {
     99e:	90 91 2c 03 	lds	r25, 0x032C
     9a2:	99 23       	and	r25, r25
     9a4:	11 f0       	breq	.+4      	; 0x9aa <main+0x7ce>
     9a6:	0c 94 58 0d 	jmp	0x1ab0	; 0x1ab0 <main+0x18d4>
						pwm_red = 254;
     9aa:	5e ef       	ldi	r21, 0xFE	; 254
     9ac:	95 2e       	mov	r9, r21
     9ae:	90 92 0c 02 	sts	0x020C, r9
						pwm_green = 255;
     9b2:	10 93 0d 02 	sts	0x020D, r17
						pwm_blue = 255;
     9b6:	10 93 0e 02 	sts	0x020E, r17
						rgbState = 1;
     9ba:	80 93 2c 03 	sts	0x032C, r24
     9be:	bb ce       	rjmp	.-650    	; 0x736 <main+0x55a>
						if(pwm_intermediate_left_desired < pwm_left_desired) {
							pwm_intermediate_left_desired = pwm_left_desired;
						}					
					}
				} else {
					pwm_intermediate_right_desired = pwm_right_desired;
     9c0:	80 91 09 03 	lds	r24, 0x0309
     9c4:	90 91 0a 03 	lds	r25, 0x030A
     9c8:	90 93 0e 03 	sts	0x030E, r25
     9cc:	80 93 0d 03 	sts	0x030D, r24
					pwm_intermediate_left_desired = pwm_left_desired;
     9d0:	80 91 0b 03 	lds	r24, 0x030B
     9d4:	90 91 0c 03 	lds	r25, 0x030C
     9d8:	56 ce       	rjmp	.-852    	; 0x686 <main+0x4aa>
		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
             		
			if(currentSelector==4 || currentSelector==5) {
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption
     9da:	0e 94 5c 54 	call	0xa8b8	; 0xa8b8 <rand>
     9de:	6e e1       	ldi	r22, 0x1E	; 30
     9e0:	70 e0       	ldi	r23, 0x00	; 0
     9e2:	0e 94 be 53 	call	0xa77c	; 0xa77c <__divmodhi4>
     9e6:	a8 0e       	add	r10, r24
     9e8:	b9 1e       	adc	r11, r25
     9ea:	5f e7       	ldi	r21, 0x7F	; 127
     9ec:	a5 22       	and	r10, r21
     9ee:	bb 24       	eor	r11, r11

				switch(rgbState) {
     9f0:	80 91 2c 03 	lds	r24, 0x032C
     9f4:	81 30       	cpi	r24, 0x01	; 1
     9f6:	09 f4       	brne	.+2      	; 0x9fa <main+0x81e>
     9f8:	b4 c5       	rjmp	.+2920   	; 0x1562 <main+0x1386>
     9fa:	81 30       	cpi	r24, 0x01	; 1
     9fc:	08 f0       	brcs	.+2      	; 0xa00 <main+0x824>
     9fe:	09 c5       	rjmp	.+2578   	; 0x1412 <main+0x1236>
					case 0:
						pwm_red = 255 - currRand;	
     a00:	8a 2d       	mov	r24, r10
     a02:	80 95       	com	r24
     a04:	80 93 0c 02 	sts	0x020C, r24
						rgbState = 1;
     a08:	20 92 2c 03 	sts	0x032C, r2
						pwm_blue = 255 - currRand;
						rgbState = 0;
						break;
				}
				
				if(currRand<32) {
     a0c:	80 e2       	ldi	r24, 0x20	; 32
     a0e:	a8 16       	cp	r10, r24
     a10:	b1 04       	cpc	r11, r1
     a12:	08 f0       	brcs	.+2      	; 0xa16 <main+0x83a>
     a14:	20 c2       	rjmp	.+1088   	; 0xe56 <main+0xc7a>
					if(pwm_green!=255 && pwm_blue!=255) {	// do not turn on all leds
     a16:	80 91 0d 02 	lds	r24, 0x020D
     a1a:	8f 3f       	cpi	r24, 0xFF	; 255
     a1c:	09 f4       	brne	.+2      	; 0xa20 <main+0x844>
     a1e:	8b ce       	rjmp	.-746    	; 0x736 <main+0x55a>
     a20:	80 91 0e 02 	lds	r24, 0x020E
     a24:	8f 3f       	cpi	r24, 0xFF	; 255
     a26:	09 f4       	brne	.+2      	; 0xa2a <main+0x84e>
     a28:	86 ce       	rjmp	.-756    	; 0x736 <main+0x55a>
						pwm_red = 255;
     a2a:	10 93 0c 02 	sts	0x020C, r17
     a2e:	83 ce       	rjmp	.-762    	; 0x736 <main+0x55a>

				}

			} else if(currentSelector==7) {

				srand(TCNT3);
     a30:	80 91 94 00 	lds	r24, 0x0094
     a34:	90 91 95 00 	lds	r25, 0x0095
     a38:	0e 94 61 54 	call	0xa8c2	; 0xa8c2 <srand>
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption
     a3c:	0e 94 5c 54 	call	0xa8b8	; 0xa8b8 <rand>
     a40:	6e e1       	ldi	r22, 0x1E	; 30
     a42:	70 e0       	ldi	r23, 0x00	; 0
     a44:	0e 94 be 53 	call	0xa77c	; 0xa77c <__divmodhi4>
     a48:	4c 01       	movw	r8, r24
     a4a:	8a 0c       	add	r8, r10
     a4c:	9b 1c       	adc	r9, r11
     a4e:	bf e7       	ldi	r27, 0x7F	; 127
     a50:	8b 22       	and	r8, r27
     a52:	99 24       	eor	r9, r9

				pwm_red = 255 - currRand;
     a54:	88 2d       	mov	r24, r8
     a56:	80 95       	com	r24
     a58:	80 93 0c 02 	sts	0x020C, r24
				
				srand(TCNT3);
     a5c:	80 91 94 00 	lds	r24, 0x0094
     a60:	90 91 95 00 	lds	r25, 0x0095
     a64:	0e 94 61 54 	call	0xa8c2	; 0xa8c2 <srand>
				currRand = (currRand + rand()%30) % 128;	
     a68:	0e 94 5c 54 	call	0xa8b8	; 0xa8b8 <rand>
     a6c:	6e e1       	ldi	r22, 0x1E	; 30
     a6e:	70 e0       	ldi	r23, 0x00	; 0
     a70:	0e 94 be 53 	call	0xa77c	; 0xa77c <__divmodhi4>
     a74:	6c 01       	movw	r12, r24
     a76:	c8 0c       	add	r12, r8
     a78:	d9 1c       	adc	r13, r9
     a7a:	ef e7       	ldi	r30, 0x7F	; 127
     a7c:	ce 22       	and	r12, r30
     a7e:	dd 24       	eor	r13, r13
				pwm_green = 255 - currRand;
     a80:	8c 2d       	mov	r24, r12
     a82:	80 95       	com	r24
     a84:	80 93 0d 02 	sts	0x020D, r24

				srand(TCNT3);
     a88:	80 91 94 00 	lds	r24, 0x0094
     a8c:	90 91 95 00 	lds	r25, 0x0095
     a90:	0e 94 61 54 	call	0xa8c2	; 0xa8c2 <srand>
				currRand = (currRand + rand()%30) % 128;
     a94:	0e 94 5c 54 	call	0xa8b8	; 0xa8b8 <rand>
     a98:	6e e1       	ldi	r22, 0x1E	; 30
     a9a:	70 e0       	ldi	r23, 0x00	; 0
     a9c:	0e 94 be 53 	call	0xa77c	; 0xa77c <__divmodhi4>
     aa0:	5c 01       	movw	r10, r24
     aa2:	ac 0c       	add	r10, r12
     aa4:	bd 1c       	adc	r11, r13
     aa6:	ff e7       	ldi	r31, 0x7F	; 127
     aa8:	af 22       	and	r10, r31
     aaa:	bb 24       	eor	r11, r11
				pwm_blue = 255 - currRand;
     aac:	8a 2d       	mov	r24, r10
     aae:	80 95       	com	r24
     ab0:	80 93 0e 02 	sts	0x020E, r24

			
				srand(TCNT3);
     ab4:	80 91 94 00 	lds	r24, 0x0094
     ab8:	90 91 95 00 	lds	r25, 0x0095
     abc:	0e 94 61 54 	call	0xa8c2	; 0xa8c2 <srand>
				currRand2 = rand()%128;
     ac0:	0e 94 5c 54 	call	0xa8b8	; 0xa8b8 <rand>
     ac4:	60 e8       	ldi	r22, 0x80	; 128
     ac6:	70 e0       	ldi	r23, 0x00	; 0
     ac8:	0e 94 be 53 	call	0xa77c	; 0xa77c <__divmodhi4>
				if(currRand2<32) {
     acc:	80 32       	cpi	r24, 0x20	; 32
     ace:	91 05       	cpc	r25, r1
     ad0:	08 f0       	brcs	.+2      	; 0xad4 <main+0x8f8>
     ad2:	d3 c1       	rjmp	.+934    	; 0xe7a <main+0xc9e>
					pwm_red = 255;
     ad4:	10 93 0c 02 	sts	0x020C, r17
					pwm_blue = 255;
				} else {	// do nothing => all 3 leds turned on

				}

				turnOffLedsTime = getTime100MicroSec();
     ad8:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
     adc:	69 83       	std	Y+1, r22	; 0x01
     ade:	7a 83       	std	Y+2, r23	; 0x02
     ae0:	8b 83       	std	Y+3, r24	; 0x03
     ae2:	9c 83       	std	Y+4, r25	; 0x04
     ae4:	28 ce       	rjmp	.-944    	; 0x736 <main+0x55a>
						break;
				}
				break;
			
			case 14: // IR local communication: listen only
				switch(demoState) {
     ae6:	81 30       	cpi	r24, 0x01	; 1
     ae8:	09 f0       	breq	.+2      	; 0xaec <main+0x910>
     aea:	e0 cc       	rjmp	.-1600   	; 0x4ac <main+0x2d0>
						//setRightSpeed(25);
						demoState = 1;
						break;

					case 1:
						irCommTasks();
     aec:	0e 94 a8 46 	call	0x8d50	; 0x8d50 <irCommTasks>
						if(irCommDataAvailable()==1) {
     af0:	0e 94 63 50 	call	0xa0c6	; 0xa0c6 <irCommDataAvailable>
     af4:	81 30       	cpi	r24, 0x01	; 1
     af6:	09 f4       	brne	.+2      	; 0xafa <main+0x91e>
     af8:	bc c7       	rjmp	.+3960   	; 0x1a72 <main+0x1896>
							i = irCommReadData();
     afa:	80 91 5c 04 	lds	r24, 0x045C
     afe:	f6 cb       	rjmp	.-2068   	; 0x2ec <main+0x110>
					}
	
					if(pwm_left_desired == 0) {
						pwm_intermediate_left_desired = 0;
					} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
						pwm_intermediate_left_desired = 0;
     b00:	10 92 10 03 	sts	0x0310, r1
     b04:	10 92 0f 03 	sts	0x030F, r1
     b08:	d9 cb       	rjmp	.-2126   	; 0x2bc <main+0xe0>

				if(softAccEnabled) {
					if(pwm_right_desired == 0) {
						pwm_intermediate_right_desired = 0;
					} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
						pwm_intermediate_right_desired = 0;
     b0a:	10 92 0e 03 	sts	0x030E, r1
     b0e:	10 92 0d 03 	sts	0x030D, r1
     b12:	94 cd       	rjmp	.-1240   	; 0x63c <main+0x460>
				}
				break;

			case 12:	// sync-react demo using the IR local communication (2 robots only): the robots move around with obstacle avoidance
						// enabled and when they detect each other they try to point towards each other
				switch(demoState) {
     b14:	84 30       	cpi	r24, 0x04	; 4
     b16:	09 f4       	brne	.+2      	; 0xb1a <main+0x93e>
     b18:	d2 c5       	rjmp	.+2980   	; 0x16be <main+0x14e2>
     b1a:	84 30       	cpi	r24, 0x04	; 4
     b1c:	08 f4       	brcc	.+2      	; 0xb20 <main+0x944>
     b1e:	a6 c5       	rjmp	.+2892   	; 0x166c <main+0x1490>
     b20:	85 30       	cpi	r24, 0x05	; 5
     b22:	09 f0       	breq	.+2      	; 0xb26 <main+0x94a>
     b24:	c3 cc       	rjmp	.-1658   	; 0x4ac <main+0x2d0>
							demoStartTime = getTime100MicroSec();
						}
						break;

					case 5:
						irCommTasks();
     b26:	0e 94 a8 46 	call	0x8d50	; 0x8d50 <irCommTasks>
						if(theta >= targetAngle) {
     b2a:	60 91 7f 04 	lds	r22, 0x047F
     b2e:	70 91 80 04 	lds	r23, 0x0480
     b32:	80 91 81 04 	lds	r24, 0x0481
     b36:	90 91 82 04 	lds	r25, 0x0482
     b3a:	2d 81       	ldd	r18, Y+5	; 0x05
     b3c:	3e 81       	ldd	r19, Y+6	; 0x06
     b3e:	4f 81       	ldd	r20, Y+7	; 0x07
     b40:	58 85       	ldd	r21, Y+8	; 0x08
     b42:	0e 94 f5 52 	call	0xa5ea	; 0xa5ea <__gesf2>
     b46:	87 fd       	sbrc	r24, 7
     b48:	d8 cf       	rjmp	.-80     	; 0xafa <main+0x91e>
							setLeftSpeed(0);
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	0e 94 4e 29 	call	0x529c	; 0x529c <setLeftSpeed>
							setRightSpeed(0);
     b50:	80 e0       	ldi	r24, 0x00	; 0
     b52:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <setRightSpeed>
							demoState = 2;
     b56:	e2 e0       	ldi	r30, 0x02	; 2
     b58:	e0 93 60 04 	sts	0x0460, r30
							demoStartTime = getTime100MicroSec();
     b5c:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
     b60:	60 93 64 04 	sts	0x0464, r22
     b64:	70 93 65 04 	sts	0x0465, r23
     b68:	80 93 66 04 	sts	0x0466, r24
     b6c:	90 93 67 04 	sts	0x0467, r25
     b70:	80 91 5c 04 	lds	r24, 0x045C
     b74:	bb cb       	rjmp	.-2186   	; 0x2ec <main+0x110>
								demoState = 1;							
							}
							break;
					}	
					
					switch(rgbLedState) {
     b76:	82 30       	cpi	r24, 0x02	; 2
     b78:	09 f0       	breq	.+2      	; 0xb7c <main+0x9a0>
     b7a:	bf cf       	rjmp	.-130    	; 0xafa <main+0x91e>
							updateBlueLed(pwm_blue);
							rgbLedState = 2;
							break;

						case 2:
							if((getTime100MicroSec()-demoStartTime2) >= (PAUSE_500_MSEC)) {
     b7c:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
     b80:	9b 01       	movw	r18, r22
     b82:	ac 01       	movw	r20, r24
     b84:	80 91 68 04 	lds	r24, 0x0468
     b88:	90 91 69 04 	lds	r25, 0x0469
     b8c:	a0 91 6a 04 	lds	r26, 0x046A
     b90:	b0 91 6b 04 	lds	r27, 0x046B
     b94:	28 1b       	sub	r18, r24
     b96:	39 0b       	sbc	r19, r25
     b98:	4a 0b       	sbc	r20, r26
     b9a:	5b 0b       	sbc	r21, r27
     b9c:	27 3c       	cpi	r18, 0xC7	; 199
     b9e:	e2 e1       	ldi	r30, 0x12	; 18
     ba0:	3e 07       	cpc	r19, r30
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	4e 07       	cpc	r20, r30
     ba6:	e0 e0       	ldi	r30, 0x00	; 0
     ba8:	5e 07       	cpc	r21, r30
     baa:	08 f4       	brcc	.+2      	; 0xbae <main+0x9d2>
     bac:	a6 cf       	rjmp	.-180    	; 0xafa <main+0x91e>
								rgbLedState = 0;
     bae:	10 92 7b 04 	sts	0x047B, r1
								demoStartTime2 = getTime100MicroSec();
     bb2:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
     bb6:	60 93 68 04 	sts	0x0468, r22
     bba:	70 93 69 04 	sts	0x0469, r23
     bbe:	80 93 6a 04 	sts	0x046A, r24
     bc2:	90 93 6b 04 	sts	0x046B, r25
								demoEndTime = getTime100MicroSec();
     bc6:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
     bca:	60 93 6c 04 	sts	0x046C, r22
     bce:	70 93 6d 04 	sts	0x046D, r23
     bd2:	80 93 6e 04 	sts	0x046E, r24
     bd6:	90 93 6f 04 	sts	0x046F, r25
								greenLedState = 0;
     bda:	10 92 7a 04 	sts	0x047A, r1
								setGreenLed(greenLedState, 1);
     bde:	80 e0       	ldi	r24, 0x00	; 0
     be0:	61 e0       	ldi	r22, 0x01	; 1
     be2:	0e 94 e8 3d 	call	0x7bd0	; 0x7bd0 <setGreenLed>
     be6:	80 91 5c 04 	lds	r24, 0x045C
     bea:	80 cb       	rjmp	.-2304   	; 0x2ec <main+0x110>
							break;
					}
					break;

			case 10:// obstacle avoidance with random colors; 4 seconds motion and 10 seconds pause					
					switch(demoState) {
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	09 f0       	breq	.+2      	; 0xbf2 <main+0xa16>
     bf0:	0a cc       	rjmp	.-2028   	; 0x406 <main+0x22a>
								demoState = 2;							
							}
							break;

						case 2: // pause							
							if((getTime100MicroSec()-demoStartTime) >= (PAUSE_10_SEC)) {
     bf2:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
     bf6:	9b 01       	movw	r18, r22
     bf8:	ac 01       	movw	r20, r24
     bfa:	80 91 64 04 	lds	r24, 0x0464
     bfe:	90 91 65 04 	lds	r25, 0x0465
     c02:	a0 91 66 04 	lds	r26, 0x0466
     c06:	b0 91 67 04 	lds	r27, 0x0467
     c0a:	28 1b       	sub	r18, r24
     c0c:	39 0b       	sbc	r19, r25
     c0e:	4a 0b       	sbc	r20, r26
     c10:	5b 0b       	sbc	r21, r27
     c12:	2a 39       	cpi	r18, 0x9A	; 154
     c14:	e7 e7       	ldi	r30, 0x77	; 119
     c16:	3e 07       	cpc	r19, r30
     c18:	e1 e0       	ldi	r30, 0x01	; 1
     c1a:	4e 07       	cpc	r20, r30
     c1c:	e0 e0       	ldi	r30, 0x00	; 0
     c1e:	5e 07       	cpc	r21, r30
     c20:	08 f4       	brcc	.+2      	; 0xc24 <main+0xa48>
     c22:	f1 cb       	rjmp	.-2078   	; 0x406 <main+0x22a>
								setRightSpeed(20);
     c24:	84 e1       	ldi	r24, 0x14	; 20
     c26:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <setRightSpeed>
								setLeftSpeed(20);								
     c2a:	84 e1       	ldi	r24, 0x14	; 20
     c2c:	0e 94 4e 29 	call	0x529c	; 0x529c <setLeftSpeed>
								demoStartTime = getTime100MicroSec();								
     c30:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
     c34:	60 93 64 04 	sts	0x0464, r22
     c38:	70 93 65 04 	sts	0x0465, r23
     c3c:	80 93 66 04 	sts	0x0466, r24
     c40:	90 93 67 04 	sts	0x0467, r25
								demoState = 1;							
     c44:	20 92 60 04 	sts	0x0460, r2
							}
							break;
					}	
					
					switch(rgbLedState) {
     c48:	80 91 7b 04 	lds	r24, 0x047B
     c4c:	81 30       	cpi	r24, 0x01	; 1
     c4e:	09 f0       	breq	.+2      	; 0xc52 <main+0xa76>
     c50:	df cb       	rjmp	.-2114   	; 0x410 <main+0x234>
							updateGreenLed(pwm_green);
							updateBlueLed(pwm_blue);
							break;

						case 1:		
							turnOffGreenLeds();					
     c52:	0e 94 85 3e 	call	0x7d0a	; 0x7d0a <turnOffGreenLeds>
							currRand = rand()% 128;	// 0 to 255 is the maximum, we use 0 to 127 to get brighter colors
     c56:	0e 94 5c 54 	call	0xa8b8	; 0xa8b8 <rand>
     c5a:	60 e8       	ldi	r22, 0x80	; 128
     c5c:	70 e0       	ldi	r23, 0x00	; 0
     c5e:	0e 94 be 53 	call	0xa77c	; 0xa77c <__divmodhi4>
							if(currRand > 95) {
     c62:	80 36       	cpi	r24, 0x60	; 96
     c64:	91 05       	cpc	r25, r1
     c66:	08 f4       	brcc	.+2      	; 0xc6a <main+0xa8e>
     c68:	38 c6       	rjmp	.+3184   	; 0x18da <main+0x16fe>
								pwm_red = 255;
     c6a:	10 93 0c 02 	sts	0x020C, r17
							} else {
								pwm_red = currRand;
							}

							currRand = rand()% 128;
     c6e:	0e 94 5c 54 	call	0xa8b8	; 0xa8b8 <rand>
     c72:	60 e8       	ldi	r22, 0x80	; 128
     c74:	70 e0       	ldi	r23, 0x00	; 0
     c76:	0e 94 be 53 	call	0xa77c	; 0xa77c <__divmodhi4>
							if(currRand > 95) {
     c7a:	80 36       	cpi	r24, 0x60	; 96
     c7c:	91 05       	cpc	r25, r1
     c7e:	08 f4       	brcc	.+2      	; 0xc82 <main+0xaa6>
     c80:	29 c6       	rjmp	.+3154   	; 0x18d4 <main+0x16f8>
								pwm_green = 255;
     c82:	10 93 0d 02 	sts	0x020D, r17
							} else {
								pwm_green = currRand;
							}

							currRand = rand()% 128;
     c86:	0e 94 5c 54 	call	0xa8b8	; 0xa8b8 <rand>
     c8a:	60 e8       	ldi	r22, 0x80	; 128
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	0e 94 be 53 	call	0xa77c	; 0xa77c <__divmodhi4>
							if(currRand > 95) {
     c92:	80 36       	cpi	r24, 0x60	; 96
     c94:	91 05       	cpc	r25, r1
     c96:	08 f4       	brcc	.+2      	; 0xc9a <main+0xabe>
     c98:	1a c6       	rjmp	.+3124   	; 0x18ce <main+0x16f2>
								pwm_blue = 255;
     c9a:	10 93 0e 02 	sts	0x020E, r17
							} else {
								pwm_blue = currRand;
							}

							currRand = rand()% 200;
     c9e:	0e 94 5c 54 	call	0xa8b8	; 0xa8b8 <rand>
     ca2:	68 ec       	ldi	r22, 0xC8	; 200
     ca4:	70 e0       	ldi	r23, 0x00	; 0
     ca6:	0e 94 be 53 	call	0xa77c	; 0xa77c <__divmodhi4>
     caa:	5c 01       	movw	r10, r24
							if(currRand<50) {
     cac:	82 e3       	ldi	r24, 0x32	; 50
     cae:	a8 16       	cp	r10, r24
     cb0:	b1 04       	cpc	r11, r1
     cb2:	08 f0       	brcs	.+2      	; 0xcb6 <main+0xada>
     cb4:	02 c6       	rjmp	.+3076   	; 0x18ba <main+0x16de>
								pwm_red = 255;
     cb6:	10 93 0c 02 	sts	0x020C, r17
     cba:	8f ef       	ldi	r24, 0xFF	; 255
							} else if(currRand<100) {
								pwm_green = 255;
							} else if (currRand<150) {	
								pwm_blue = 255;
							}
							updateRedLed(pwm_red);
     cbc:	0e 94 ac 3d 	call	0x7b58	; 0x7b58 <updateRedLed>
							updateGreenLed(pwm_green);
     cc0:	80 91 0d 02 	lds	r24, 0x020D
     cc4:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <updateGreenLed>
							updateBlueLed(pwm_blue);
     cc8:	80 91 0e 02 	lds	r24, 0x020E
     ccc:	0e 94 d4 3d 	call	0x7ba8	; 0x7ba8 <updateBlueLed>
							rgbLedState = 2;
     cd0:	b2 e0       	ldi	r27, 0x02	; 2
     cd2:	b0 93 7b 04 	sts	0x047B, r27
     cd6:	80 91 5c 04 	lds	r24, 0x045C
							break;
     cda:	08 cb       	rjmp	.-2544   	; 0x2ec <main+0x110>
					setLeftSpeed(25);
					setRightSpeed(25);
					break;

			case 6:	// robot testing
					switch(menuChoice) {
     cdc:	82 30       	cpi	r24, 0x02	; 2
     cde:	09 f0       	breq	.+2      	; 0xce2 <main+0xb06>
     ce0:	e5 cb       	rjmp	.-2102   	; 0x4ac <main+0x2d0>
							}

							break;

						case 2:	// address writing in eeprom
							if(addressReceived) {
     ce2:	80 91 34 04 	lds	r24, 0x0434
     ce6:	88 23       	and	r24, r24
     ce8:	09 f4       	brne	.+2      	; 0xcec <main+0xb10>
     cea:	e0 cb       	rjmp	.-2112   	; 0x4ac <main+0x2d0>
								turnOnGreenLeds();
     cec:	0e 94 9e 3e 	call	0x7d3c	; 0x7d3c <turnOnGreenLeds>
								eeprom_write_word((uint16_t*)4094, rfAddress);
     cf0:	60 91 25 03 	lds	r22, 0x0325
     cf4:	70 91 26 03 	lds	r23, 0x0326
     cf8:	8e ef       	ldi	r24, 0xFE	; 254
     cfa:	9f e0       	ldi	r25, 0x0F	; 15
     cfc:	0e 94 c7 54 	call	0xa98e	; 0xa98e <__eewr_word_m2560>
								turnOffGreenLeds();
     d00:	0e 94 85 3e 	call	0x7d0a	; 0x7d0a <turnOffGreenLeds>
								usart0Transmit(0xAA, 1);	// successfully written
     d04:	8a ea       	ldi	r24, 0xAA	; 170
     d06:	61 e0       	ldi	r22, 0x01	; 1
     d08:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
								addressReceived = 0;
     d0c:	10 92 34 04 	sts	0x0434, r1
								menuChoice = 0;
     d10:	10 92 33 04 	sts	0x0433, r1
     d14:	80 91 5c 04 	lds	r24, 0x045C
     d18:	e9 ca       	rjmp	.-2606   	; 0x2ec <main+0x110>
					break;

			case 9:	// write default calibration values; wait 2 seconds before start writing the calibration values
					// in eeprom in order to avoid rewriting the data involuntarily when moving the selector and passing 
					// through selector position 9
					switch(demoState) {
     d1a:	82 30       	cpi	r24, 0x02	; 2
     d1c:	09 f0       	breq	.+2      	; 0xd20 <main+0xb44>
     d1e:	c6 cb       	rjmp	.-2164   	; 0x4ac <main+0x2d0>
								demoState = 2;
							}
							break;						

						case 2:
							if(!calibrationWritten) {
     d20:	80 91 79 04 	lds	r24, 0x0479
     d24:	88 23       	and	r24, r24
     d26:	09 f0       	breq	.+2      	; 0xd2a <main+0xb4e>
     d28:	c1 cb       	rjmp	.-2174   	; 0x4ac <main+0x2d0>
								calibrationWritten = 1;
     d2a:	20 92 79 04 	sts	0x0479, r2
								writeDefaultCalibration();
     d2e:	0e 94 d3 37 	call	0x6fa6	; 0x6fa6 <writeDefaultCalibration>
     d32:	80 91 5c 04 	lds	r24, 0x045C
     d36:	da ca       	rjmp	.-2636   	; 0x2ec <main+0x110>

					break;

			case 11: 	// sync-react demo using the IR local communication (2 robots only): the robots move around with obstacle avoidance
						// enabled and when they detect each other they try to align towards the same direction rotating in place
				switch(demoState) {
     d38:	83 30       	cpi	r24, 0x03	; 3
     d3a:	09 f4       	brne	.+2      	; 0xd3e <main+0xb62>
     d3c:	b0 c3       	rjmp	.+1888   	; 0x149e <main+0x12c2>
     d3e:	84 30       	cpi	r24, 0x04	; 4
     d40:	09 f0       	breq	.+2      	; 0xd44 <main+0xb68>
     d42:	b4 cb       	rjmp	.-2200   	; 0x4ac <main+0x2d0>
							demoStartTime = getTime100MicroSec();
						}
						break;

					case 4:	// rotate left
						irCommTasks();
     d44:	0e 94 a8 46 	call	0x8d50	; 0x8d50 <irCommTasks>
						if(theta >= targetAngle) {
     d48:	60 91 7f 04 	lds	r22, 0x047F
     d4c:	70 91 80 04 	lds	r23, 0x0480
     d50:	80 91 81 04 	lds	r24, 0x0481
     d54:	90 91 82 04 	lds	r25, 0x0482
     d58:	2d 81       	ldd	r18, Y+5	; 0x05
     d5a:	3e 81       	ldd	r19, Y+6	; 0x06
     d5c:	4f 81       	ldd	r20, Y+7	; 0x07
     d5e:	58 85       	ldd	r21, Y+8	; 0x08
     d60:	0e 94 f5 52 	call	0xa5ea	; 0xa5ea <__gesf2>
     d64:	87 fd       	sbrc	r24, 7
     d66:	c9 ce       	rjmp	.-622    	; 0xafa <main+0x91e>
							setLeftSpeed(0);
     d68:	80 e0       	ldi	r24, 0x00	; 0
     d6a:	0e 94 4e 29 	call	0x529c	; 0x529c <setLeftSpeed>
							setRightSpeed(0);
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <setRightSpeed>
							demoState = 2;
     d74:	92 e0       	ldi	r25, 0x02	; 2
     d76:	90 93 60 04 	sts	0x0460, r25
							demoStartTime = getTime100MicroSec();
     d7a:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
     d7e:	60 93 64 04 	sts	0x0464, r22
     d82:	70 93 65 04 	sts	0x0465, r23
     d86:	80 93 66 04 	sts	0x0466, r24
     d8a:	90 93 67 04 	sts	0x0467, r25
     d8e:	80 91 5c 04 	lds	r24, 0x045C
     d92:	ac ca       	rjmp	.-2728   	; 0x2ec <main+0x110>

				}
				break;

			case 13: // IR local communication: listen and transmit continuously
				switch(demoState) {
     d94:	82 30       	cpi	r24, 0x02	; 2
     d96:	09 f0       	breq	.+2      	; 0xd9a <main+0xbbe>
     d98:	89 cb       	rjmp	.-2286   	; 0x4ac <main+0x2d0>
						irCommSendData(irCommRxByteExpected);													
						demoState = 2;
						break;

					case 2:
						irCommTasks();
     d9a:	0e 94 a8 46 	call	0x8d50	; 0x8d50 <irCommTasks>
						if(irCommDataSent()==1) {
     d9e:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <irCommDataSent>
     da2:	81 30       	cpi	r24, 0x01	; 1
     da4:	09 f0       	breq	.+2      	; 0xda8 <main+0xbcc>
     da6:	a9 ce       	rjmp	.-686    	; 0xafa <main+0x91e>
							demoState = 1;
     da8:	80 93 60 04 	sts	0x0460, r24
							//irCommRxByteExpected++;
							//if(irCommRxByteExpected==8) {
							//	irCommRxByteExpected=0;
							//}

							if(irCommRxByteExpected<255) {
     dac:	80 91 15 05 	lds	r24, 0x0515
     db0:	8f 3f       	cpi	r24, 0xFF	; 255
     db2:	09 f4       	brne	.+2      	; 0xdb6 <main+0xbda>
     db4:	16 c7       	rjmp	.+3628   	; 0x1be2 <main+0x1a06>
								irCommRxByteExpected++;
     db6:	8f 5f       	subi	r24, 0xFF	; 255
     db8:	80 93 15 05 	sts	0x0515, r24
     dbc:	80 91 5c 04 	lds	r24, 0x045C
     dc0:	95 ca       	rjmp	.-2774   	; 0x2ec <main+0x110>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
     dc2:	84 30       	cpi	r24, 0x04	; 4
     dc4:	09 f4       	brne	.+2      	; 0xdc8 <main+0xbec>
     dc6:	eb c4       	rjmp	.+2518   	; 0x179e <main+0x15c2>
     dc8:	84 30       	cpi	r24, 0x04	; 4
     dca:	08 f4       	brcc	.+2      	; 0xdce <main+0xbf2>
     dcc:	a2 c4       	rjmp	.+2372   	; 0x1712 <main+0x1536>
     dce:	85 30       	cpi	r24, 0x05	; 5
     dd0:	09 f0       	breq	.+2      	; 0xdd4 <main+0xbf8>
     dd2:	5b cb       	rjmp	.-2378   	; 0x48a <main+0x2ae>
							//pwm_green = 0;
							//pwm_blue = 255;													
							break;

						case 5:	// turn around
							turnOffGreenLeds();
     dd4:	0e 94 85 3e 	call	0x7d0a	; 0x7d0a <turnOffGreenLeds>
							GREEN_LED6_ON;
     dd8:	80 91 0b 01 	lds	r24, 0x010B
     ddc:	8f 7b       	andi	r24, 0xBF	; 191
     dde:	80 93 0b 01 	sts	0x010B, r24
							GREEN_LED7_ON;
     de2:	80 91 0b 01 	lds	r24, 0x010B
     de6:	8f 77       	andi	r24, 0x7F	; 127
     de8:	80 93 0b 01 	sts	0x010B, r24
							demoEndTime = getTime100MicroSec();
     dec:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
     df0:	9b 01       	movw	r18, r22
     df2:	ac 01       	movw	r20, r24
     df4:	60 93 6c 04 	sts	0x046C, r22
     df8:	70 93 6d 04 	sts	0x046D, r23
     dfc:	80 93 6e 04 	sts	0x046E, r24
     e00:	90 93 6f 04 	sts	0x046F, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_750_MSEC)) {
     e04:	80 91 64 04 	lds	r24, 0x0464
     e08:	90 91 65 04 	lds	r25, 0x0465
     e0c:	a0 91 66 04 	lds	r26, 0x0466
     e10:	b0 91 67 04 	lds	r27, 0x0467
     e14:	28 1b       	sub	r18, r24
     e16:	39 0b       	sbc	r19, r25
     e18:	4a 0b       	sbc	r20, r26
     e1a:	5b 0b       	sbc	r21, r27
     e1c:	2b 32       	cpi	r18, 0x2B	; 43
     e1e:	6c e1       	ldi	r22, 0x1C	; 28
     e20:	36 07       	cpc	r19, r22
     e22:	60 e0       	ldi	r22, 0x00	; 0
     e24:	46 07       	cpc	r20, r22
     e26:	60 e0       	ldi	r22, 0x00	; 0
     e28:	56 07       	cpc	r21, r22
     e2a:	08 f4       	brcc	.+2      	; 0xe2e <main+0xc52>
     e2c:	2e cb       	rjmp	.-2468   	; 0x48a <main+0x2ae>
								demoStartTime = getTime100MicroSec();
     e2e:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
     e32:	60 93 64 04 	sts	0x0464, r22
     e36:	70 93 65 04 	sts	0x0465, r23
     e3a:	80 93 66 04 	sts	0x0466, r24
     e3e:	90 93 67 04 	sts	0x0467, r25
								demoState = 0;							
     e42:	10 92 60 04 	sts	0x0460, r1
     e46:	21 cb       	rjmp	.-2494   	; 0x48a <main+0x2ae>

			case 12:	// sync-react demo using the IR local communication (2 robots only): the robots move around with obstacle avoidance
						// enabled and when they detect each other they try to point towards each other
				switch(demoState) {
					case 0:
						irCommInit();
     e48:	0e 94 c1 45 	call	0x8b82	; 0x8b82 <irCommInit>
						demoState = 1;
     e4c:	20 92 60 04 	sts	0x0460, r2
     e50:	80 91 5c 04 	lds	r24, 0x045C
						break;
     e54:	4b ca       	rjmp	.-2922   	; 0x2ec <main+0x110>
				
				if(currRand<32) {
					if(pwm_green!=255 && pwm_blue!=255) {	// do not turn on all leds
						pwm_red = 255;
					}
				} else if(currRand<64) {
     e56:	90 e4       	ldi	r25, 0x40	; 64
     e58:	a9 16       	cp	r10, r25
     e5a:	b1 04       	cpc	r11, r1
     e5c:	08 f0       	brcs	.+2      	; 0xe60 <main+0xc84>
     e5e:	6f c3       	rjmp	.+1758   	; 0x153e <main+0x1362>
					if(pwm_red!=255 && pwm_blue!=255) {
     e60:	80 91 0c 02 	lds	r24, 0x020C
     e64:	8f 3f       	cpi	r24, 0xFF	; 255
     e66:	09 f4       	brne	.+2      	; 0xe6a <main+0xc8e>
     e68:	66 cc       	rjmp	.-1844   	; 0x736 <main+0x55a>
     e6a:	80 91 0e 02 	lds	r24, 0x020E
     e6e:	8f 3f       	cpi	r24, 0xFF	; 255
     e70:	09 f4       	brne	.+2      	; 0xe74 <main+0xc98>
     e72:	61 cc       	rjmp	.-1854   	; 0x736 <main+0x55a>
						pwm_green = 255;
     e74:	10 93 0d 02 	sts	0x020D, r17
     e78:	5e cc       	rjmp	.-1860   	; 0x736 <main+0x55a>
			
				srand(TCNT3);
				currRand2 = rand()%128;
				if(currRand2<32) {
					pwm_red = 255;
				} else if(currRand2<64) {
     e7a:	80 34       	cpi	r24, 0x40	; 64
     e7c:	91 05       	cpc	r25, r1
     e7e:	08 f0       	brcs	.+2      	; 0xe82 <main+0xca6>
     e80:	f8 c4       	rjmp	.+2544   	; 0x1872 <main+0x1696>
					pwm_green = 255;
     e82:	10 93 0d 02 	sts	0x020D, r17
     e86:	28 ce       	rjmp	.-944    	; 0xad8 <main+0x8fc>
						setRightSpeed(10);
						demoState = 1;
						break;

					case 1:						
						irCommSendData(irCommRxByteExpected);													
     e88:	80 91 15 05 	lds	r24, 0x0515
     e8c:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <irCommSendData>
						demoState = 2;
     e90:	f2 e0       	ldi	r31, 0x02	; 2
     e92:	f0 93 60 04 	sts	0x0460, r31
     e96:	80 91 5c 04 	lds	r24, 0x045C
						break;
     e9a:	28 ca       	rjmp	.-2992   	; 0x2ec <main+0x110>
							setLeftSpeed(20);
							setRightSpeed(20);
							demoState = 1;
							break;
						case 1: // motion					
							if((getTime100MicroSec()-demoStartTime) >= (PAUSE_4_SEC)) {
     e9c:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
     ea0:	9b 01       	movw	r18, r22
     ea2:	ac 01       	movw	r20, r24
     ea4:	80 91 64 04 	lds	r24, 0x0464
     ea8:	90 91 65 04 	lds	r25, 0x0465
     eac:	a0 91 66 04 	lds	r26, 0x0466
     eb0:	b0 91 67 04 	lds	r27, 0x0467
     eb4:	28 1b       	sub	r18, r24
     eb6:	39 0b       	sbc	r19, r25
     eb8:	4a 0b       	sbc	r20, r26
     eba:	5b 0b       	sbc	r21, r27
     ebc:	2e 33       	cpi	r18, 0x3E	; 62
     ebe:	a6 e9       	ldi	r26, 0x96	; 150
     ec0:	3a 07       	cpc	r19, r26
     ec2:	a0 e0       	ldi	r26, 0x00	; 0
     ec4:	4a 07       	cpc	r20, r26
     ec6:	a0 e0       	ldi	r26, 0x00	; 0
     ec8:	5a 07       	cpc	r21, r26
     eca:	08 f4       	brcc	.+2      	; 0xece <main+0xcf2>
     ecc:	9c ca       	rjmp	.-2760   	; 0x406 <main+0x22a>
								setRightSpeed(0);
     ece:	80 e0       	ldi	r24, 0x00	; 0
     ed0:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <setRightSpeed>
								setLeftSpeed(0);								
     ed4:	80 e0       	ldi	r24, 0x00	; 0
     ed6:	0e 94 4e 29 	call	0x529c	; 0x529c <setLeftSpeed>
								demoStartTime = getTime100MicroSec();
     eda:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
     ede:	60 93 64 04 	sts	0x0464, r22
     ee2:	70 93 65 04 	sts	0x0465, r23
     ee6:	80 93 66 04 	sts	0x0466, r24
     eea:	90 93 67 04 	sts	0x0467, r25
								demoState = 2;							
     eee:	b2 e0       	ldi	r27, 0x02	; 2
     ef0:	b0 93 60 04 	sts	0x0460, r27
     ef4:	88 ca       	rjmp	.-2800   	; 0x406 <main+0x22a>
							break;

						case 1:	// send sensors data and activate actuators
							//setRightSpeed(20);
							//setLeftSpeed(20);
							turnOnGreenLeds();
     ef6:	0e 94 9e 3e 	call	0x7d3c	; 0x7d3c <turnOnGreenLeds>
							updateRedLed(pwm_red);
     efa:	80 91 0c 02 	lds	r24, 0x020C
     efe:	0e 94 ac 3d 	call	0x7b58	; 0x7b58 <updateRedLed>
							updateGreenLed(pwm_green);
     f02:	80 91 0d 02 	lds	r24, 0x020D
     f06:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <updateGreenLed>
							updateBlueLed(pwm_blue);
     f0a:	80 91 0e 02 	lds	r24, 0x020E
     f0e:	0e 94 d4 3d 	call	0x7ba8	; 0x7ba8 <updateBlueLed>
							LED_IR1_LOW;
     f12:	44 98       	cbi	0x08, 4	; 8
							LED_IR2_LOW;
     f14:	45 98       	cbi	0x08, 5	; 8
							
							if(getDataNow) {
     f16:	80 91 36 04 	lds	r24, 0x0436
     f1a:	88 23       	and	r24, r24
     f1c:	09 f4       	brne	.+2      	; 0xf20 <main+0xd44>
     f1e:	ed cd       	rjmp	.-1062   	; 0xafa <main+0x91e>
								getDataNow = 0;	
     f20:	10 92 36 04 	sts	0x0436, r1
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     f24:	80 91 69 02 	lds	r24, 0x0269
     f28:	61 e0       	ldi	r22, 0x01	; 1
     f2a:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     f2e:	80 91 6a 02 	lds	r24, 0x026A
     f32:	61 e0       	ldi	r22, 0x01	; 1
     f34:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     f38:	80 91 39 02 	lds	r24, 0x0239
     f3c:	90 91 3a 02 	lds	r25, 0x023A
     f40:	61 e0       	ldi	r22, 0x01	; 1
     f42:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     f46:	80 91 39 02 	lds	r24, 0x0239
     f4a:	90 91 3a 02 	lds	r25, 0x023A
     f4e:	89 2f       	mov	r24, r25
     f50:	61 e0       	ldi	r22, 0x01	; 1
     f52:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     f56:	80 91 6b 02 	lds	r24, 0x026B
     f5a:	61 e0       	ldi	r22, 0x01	; 1
     f5c:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     f60:	80 91 6c 02 	lds	r24, 0x026C
     f64:	61 e0       	ldi	r22, 0x01	; 1
     f66:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     f6a:	80 91 3d 02 	lds	r24, 0x023D
     f6e:	90 91 3e 02 	lds	r25, 0x023E
     f72:	61 e0       	ldi	r22, 0x01	; 1
     f74:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     f78:	80 91 3d 02 	lds	r24, 0x023D
     f7c:	90 91 3e 02 	lds	r25, 0x023E
     f80:	89 2f       	mov	r24, r25
     f82:	61 e0       	ldi	r22, 0x01	; 1
     f84:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     f88:	80 91 6d 02 	lds	r24, 0x026D
     f8c:	61 e0       	ldi	r22, 0x01	; 1
     f8e:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     f92:	80 91 6e 02 	lds	r24, 0x026E
     f96:	61 e0       	ldi	r22, 0x01	; 1
     f98:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     f9c:	80 91 41 02 	lds	r24, 0x0241
     fa0:	90 91 42 02 	lds	r25, 0x0242
     fa4:	61 e0       	ldi	r22, 0x01	; 1
     fa6:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     faa:	80 91 41 02 	lds	r24, 0x0241
     fae:	90 91 42 02 	lds	r25, 0x0242
     fb2:	89 2f       	mov	r24, r25
     fb4:	61 e0       	ldi	r22, 0x01	; 1
     fb6:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     fba:	80 91 6f 02 	lds	r24, 0x026F
     fbe:	61 e0       	ldi	r22, 0x01	; 1
     fc0:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     fc4:	80 91 70 02 	lds	r24, 0x0270
     fc8:	61 e0       	ldi	r22, 0x01	; 1
     fca:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     fce:	80 91 45 02 	lds	r24, 0x0245
     fd2:	90 91 46 02 	lds	r25, 0x0246
     fd6:	61 e0       	ldi	r22, 0x01	; 1
     fd8:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     fdc:	80 91 45 02 	lds	r24, 0x0245
     fe0:	90 91 46 02 	lds	r25, 0x0246
     fe4:	89 2f       	mov	r24, r25
     fe6:	61 e0       	ldi	r22, 0x01	; 1
     fe8:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     fec:	80 91 71 02 	lds	r24, 0x0271
     ff0:	61 e0       	ldi	r22, 0x01	; 1
     ff2:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     ff6:	80 91 72 02 	lds	r24, 0x0272
     ffa:	61 e0       	ldi	r22, 0x01	; 1
     ffc:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
    1000:	80 91 49 02 	lds	r24, 0x0249
    1004:	90 91 4a 02 	lds	r25, 0x024A
    1008:	61 e0       	ldi	r22, 0x01	; 1
    100a:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
    100e:	80 91 49 02 	lds	r24, 0x0249
    1012:	90 91 4a 02 	lds	r25, 0x024A
    1016:	89 2f       	mov	r24, r25
    1018:	61 e0       	ldi	r22, 0x01	; 1
    101a:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
    101e:	80 91 73 02 	lds	r24, 0x0273
    1022:	61 e0       	ldi	r22, 0x01	; 1
    1024:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
    1028:	80 91 74 02 	lds	r24, 0x0274
    102c:	61 e0       	ldi	r22, 0x01	; 1
    102e:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
    1032:	80 91 4d 02 	lds	r24, 0x024D
    1036:	90 91 4e 02 	lds	r25, 0x024E
    103a:	61 e0       	ldi	r22, 0x01	; 1
    103c:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
    1040:	80 91 4d 02 	lds	r24, 0x024D
    1044:	90 91 4e 02 	lds	r25, 0x024E
    1048:	89 2f       	mov	r24, r25
    104a:	61 e0       	ldi	r22, 0x01	; 1
    104c:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
    1050:	80 91 75 02 	lds	r24, 0x0275
    1054:	61 e0       	ldi	r22, 0x01	; 1
    1056:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
    105a:	80 91 76 02 	lds	r24, 0x0276
    105e:	61 e0       	ldi	r22, 0x01	; 1
    1060:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
    1064:	80 91 51 02 	lds	r24, 0x0251
    1068:	90 91 52 02 	lds	r25, 0x0252
    106c:	61 e0       	ldi	r22, 0x01	; 1
    106e:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
    1072:	80 91 51 02 	lds	r24, 0x0251
    1076:	90 91 52 02 	lds	r25, 0x0252
    107a:	89 2f       	mov	r24, r25
    107c:	61 e0       	ldi	r22, 0x01	; 1
    107e:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
    1082:	80 91 77 02 	lds	r24, 0x0277
    1086:	61 e0       	ldi	r22, 0x01	; 1
    1088:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
    108c:	80 91 78 02 	lds	r24, 0x0278
    1090:	61 e0       	ldi	r22, 0x01	; 1
    1092:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
    1096:	80 91 55 02 	lds	r24, 0x0255
    109a:	90 91 56 02 	lds	r25, 0x0256
    109e:	61 e0       	ldi	r22, 0x01	; 1
    10a0:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
    10a4:	80 91 55 02 	lds	r24, 0x0255
    10a8:	90 91 56 02 	lds	r25, 0x0256
    10ac:	89 2f       	mov	r24, r25
    10ae:	61 e0       	ldi	r22, 0x01	; 1
    10b0:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
    10b4:	80 91 79 02 	lds	r24, 0x0279
    10b8:	61 e0       	ldi	r22, 0x01	; 1
    10ba:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
    10be:	80 91 7a 02 	lds	r24, 0x027A
    10c2:	61 e0       	ldi	r22, 0x01	; 1
    10c4:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
    10c8:	80 91 59 02 	lds	r24, 0x0259
    10cc:	90 91 5a 02 	lds	r25, 0x025A
    10d0:	61 e0       	ldi	r22, 0x01	; 1
    10d2:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
    10d6:	80 91 59 02 	lds	r24, 0x0259
    10da:	90 91 5a 02 	lds	r25, 0x025A
    10de:	89 2f       	mov	r24, r25
    10e0:	61 e0       	ldi	r22, 0x01	; 1
    10e2:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
    10e6:	80 91 7b 02 	lds	r24, 0x027B
    10ea:	61 e0       	ldi	r22, 0x01	; 1
    10ec:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
    10f0:	80 91 7c 02 	lds	r24, 0x027C
    10f4:	61 e0       	ldi	r22, 0x01	; 1
    10f6:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
    10fa:	80 91 5d 02 	lds	r24, 0x025D
    10fe:	90 91 5e 02 	lds	r25, 0x025E
    1102:	61 e0       	ldi	r22, 0x01	; 1
    1104:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
    1108:	80 91 5d 02 	lds	r24, 0x025D
    110c:	90 91 5e 02 	lds	r25, 0x025E
    1110:	89 2f       	mov	r24, r25
    1112:	61 e0       	ldi	r22, 0x01	; 1
    1114:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
    1118:	80 91 7d 02 	lds	r24, 0x027D
    111c:	61 e0       	ldi	r22, 0x01	; 1
    111e:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
    1122:	80 91 7e 02 	lds	r24, 0x027E
    1126:	61 e0       	ldi	r22, 0x01	; 1
    1128:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
    112c:	80 91 61 02 	lds	r24, 0x0261
    1130:	90 91 62 02 	lds	r25, 0x0262
    1134:	61 e0       	ldi	r22, 0x01	; 1
    1136:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
    113a:	80 91 61 02 	lds	r24, 0x0261
    113e:	90 91 62 02 	lds	r25, 0x0262
    1142:	89 2f       	mov	r24, r25
    1144:	61 e0       	ldi	r22, 0x01	; 1
    1146:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
    114a:	80 91 7f 02 	lds	r24, 0x027F
    114e:	61 e0       	ldi	r22, 0x01	; 1
    1150:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
    1154:	80 91 80 02 	lds	r24, 0x0280
    1158:	61 e0       	ldi	r22, 0x01	; 1
    115a:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
    115e:	80 91 65 02 	lds	r24, 0x0265
    1162:	90 91 66 02 	lds	r25, 0x0266
    1166:	61 e0       	ldi	r22, 0x01	; 1
    1168:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
    116c:	80 91 65 02 	lds	r24, 0x0265
    1170:	90 91 66 02 	lds	r25, 0x0266
    1174:	89 2f       	mov	r24, r25
    1176:	61 e0       	ldi	r22, 0x01	; 1
    1178:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
								}
								usart0Transmit(accX&0xFF,1);
    117c:	80 91 3c 04 	lds	r24, 0x043C
    1180:	61 e0       	ldi	r22, 0x01	; 1
    1182:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
								usart0Transmit(accX>>8,1);
    1186:	80 91 3d 04 	lds	r24, 0x043D
    118a:	61 e0       	ldi	r22, 0x01	; 1
    118c:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
								usart0Transmit(accY&0xFF,1);
    1190:	80 91 3e 04 	lds	r24, 0x043E
    1194:	61 e0       	ldi	r22, 0x01	; 1
    1196:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
								usart0Transmit(accY>>8,1);
    119a:	80 91 3f 04 	lds	r24, 0x043F
    119e:	61 e0       	ldi	r22, 0x01	; 1
    11a0:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
								usart0Transmit(accZ&0xFF,1);
    11a4:	80 91 40 04 	lds	r24, 0x0440
    11a8:	61 e0       	ldi	r22, 0x01	; 1
    11aa:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
								usart0Transmit(accZ>>8,1);
    11ae:	80 91 41 04 	lds	r24, 0x0441
    11b2:	61 e0       	ldi	r22, 0x01	; 1
    11b4:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
								usart0Transmit(irCommand,1);
    11b8:	80 91 37 04 	lds	r24, 0x0437
    11bc:	61 e0       	ldi	r22, 0x01	; 1
    11be:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
								usart0Transmit(currentSelector,1);
    11c2:	80 91 5c 04 	lds	r24, 0x045C
    11c6:	61 e0       	ldi	r22, 0x01	; 1
    11c8:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
								usart0Transmit(BUTTON0,1);
    11cc:	80 91 03 01 	lds	r24, 0x0103
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	80 72       	andi	r24, 0x20	; 32
    11d4:	90 70       	andi	r25, 0x00	; 0
    11d6:	95 95       	asr	r25
    11d8:	87 95       	ror	r24
    11da:	95 95       	asr	r25
    11dc:	87 95       	ror	r24
    11de:	95 95       	asr	r25
    11e0:	87 95       	ror	r24
    11e2:	95 95       	asr	r25
    11e4:	87 95       	ror	r24
    11e6:	95 95       	asr	r25
    11e8:	87 95       	ror	r24
    11ea:	61 e0       	ldi	r22, 0x01	; 1
    11ec:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
								usart0Transmit(rfFlags,1);
    11f0:	80 91 27 03 	lds	r24, 0x0327
    11f4:	61 e0       	ldi	r22, 0x01	; 1
    11f6:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
								usart0Transmit(((unsigned int)(theta*573.0))&0xFF,1);	// radians to degrees => 573 = 1800/PI
    11fa:	60 91 7f 04 	lds	r22, 0x047F
    11fe:	70 91 80 04 	lds	r23, 0x0480
    1202:	80 91 81 04 	lds	r24, 0x0481
    1206:	90 91 82 04 	lds	r25, 0x0482
    120a:	20 e0       	ldi	r18, 0x00	; 0
    120c:	30 e4       	ldi	r19, 0x40	; 64
    120e:	4f e0       	ldi	r20, 0x0F	; 15
    1210:	54 e4       	ldi	r21, 0x44	; 68
    1212:	0e 94 00 53 	call	0xa600	; 0xa600 <__mulsf3>
    1216:	0e 94 b9 51 	call	0xa372	; 0xa372 <__fixunssfsi>
    121a:	86 2f       	mov	r24, r22
    121c:	61 e0       	ldi	r22, 0x01	; 1
    121e:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
								usart0Transmit(((unsigned int)(theta*573.0))>>8,1);
    1222:	60 91 7f 04 	lds	r22, 0x047F
    1226:	70 91 80 04 	lds	r23, 0x0480
    122a:	80 91 81 04 	lds	r24, 0x0481
    122e:	90 91 82 04 	lds	r25, 0x0482
    1232:	20 e0       	ldi	r18, 0x00	; 0
    1234:	30 e4       	ldi	r19, 0x40	; 64
    1236:	4f e0       	ldi	r20, 0x0F	; 15
    1238:	54 e4       	ldi	r21, 0x44	; 68
    123a:	0e 94 00 53 	call	0xa600	; 0xa600 <__mulsf3>
    123e:	0e 94 b9 51 	call	0xa372	; 0xa372 <__fixunssfsi>
    1242:	87 2f       	mov	r24, r23
    1244:	61 e0       	ldi	r22, 0x01	; 1
    1246:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
								usart0Transmit(((unsigned int)xPos)&0xFF,1);
    124a:	60 91 87 04 	lds	r22, 0x0487
    124e:	70 91 88 04 	lds	r23, 0x0488
    1252:	80 91 89 04 	lds	r24, 0x0489
    1256:	90 91 8a 04 	lds	r25, 0x048A
    125a:	0e 94 b9 51 	call	0xa372	; 0xa372 <__fixunssfsi>
    125e:	86 2f       	mov	r24, r22
    1260:	61 e0       	ldi	r22, 0x01	; 1
    1262:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
								usart0Transmit(((unsigned int)xPos)>>8,1);
    1266:	60 91 87 04 	lds	r22, 0x0487
    126a:	70 91 88 04 	lds	r23, 0x0488
    126e:	80 91 89 04 	lds	r24, 0x0489
    1272:	90 91 8a 04 	lds	r25, 0x048A
    1276:	0e 94 b9 51 	call	0xa372	; 0xa372 <__fixunssfsi>
    127a:	87 2f       	mov	r24, r23
    127c:	61 e0       	ldi	r22, 0x01	; 1
    127e:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
								usart0Transmit(((unsigned int)yPos)&0xFF,1);
    1282:	60 91 8b 04 	lds	r22, 0x048B
    1286:	70 91 8c 04 	lds	r23, 0x048C
    128a:	80 91 8d 04 	lds	r24, 0x048D
    128e:	90 91 8e 04 	lds	r25, 0x048E
    1292:	0e 94 b9 51 	call	0xa372	; 0xa372 <__fixunssfsi>
    1296:	86 2f       	mov	r24, r22
    1298:	61 e0       	ldi	r22, 0x01	; 1
    129a:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
								usart0Transmit(((unsigned int)yPos)>>8,1);
    129e:	60 91 8b 04 	lds	r22, 0x048B
    12a2:	70 91 8c 04 	lds	r23, 0x048C
    12a6:	80 91 8d 04 	lds	r24, 0x048D
    12aa:	90 91 8e 04 	lds	r25, 0x048E
    12ae:	0e 94 b9 51 	call	0xa372	; 0xa372 <__fixunssfsi>
    12b2:	87 2f       	mov	r24, r23
    12b4:	61 e0       	ldi	r22, 0x01	; 1
    12b6:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)&0xFF,1);
    12ba:	60 91 e5 02 	lds	r22, 0x02E5
    12be:	70 91 e6 02 	lds	r23, 0x02E6
    12c2:	80 91 e7 02 	lds	r24, 0x02E7
    12c6:	90 91 e8 02 	lds	r25, 0x02E8
    12ca:	0e 94 b4 51 	call	0xa368	; 0xa368 <__fixsfsi>
    12ce:	86 2f       	mov	r24, r22
    12d0:	61 e0       	ldi	r22, 0x01	; 1
    12d2:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)>>8,1);
    12d6:	60 91 e5 02 	lds	r22, 0x02E5
    12da:	70 91 e6 02 	lds	r23, 0x02E6
    12de:	80 91 e7 02 	lds	r24, 0x02E7
    12e2:	90 91 e8 02 	lds	r25, 0x02E8
    12e6:	0e 94 b4 51 	call	0xa368	; 0xa368 <__fixsfsi>
    12ea:	87 2f       	mov	r24, r23
    12ec:	61 e0       	ldi	r22, 0x01	; 1
    12ee:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)>>16,1);
    12f2:	60 91 e5 02 	lds	r22, 0x02E5
    12f6:	70 91 e6 02 	lds	r23, 0x02E6
    12fa:	80 91 e7 02 	lds	r24, 0x02E7
    12fe:	90 91 e8 02 	lds	r25, 0x02E8
    1302:	0e 94 b4 51 	call	0xa368	; 0xa368 <__fixsfsi>
    1306:	61 e0       	ldi	r22, 0x01	; 1
    1308:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)>>24,1);
    130c:	60 91 e5 02 	lds	r22, 0x02E5
    1310:	70 91 e6 02 	lds	r23, 0x02E6
    1314:	80 91 e7 02 	lds	r24, 0x02E7
    1318:	90 91 e8 02 	lds	r25, 0x02E8
    131c:	0e 94 b4 51 	call	0xa368	; 0xa368 <__fixsfsi>
    1320:	89 2f       	mov	r24, r25
    1322:	61 e0       	ldi	r22, 0x01	; 1
    1324:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)&0xFF,1);
    1328:	60 91 e1 02 	lds	r22, 0x02E1
    132c:	70 91 e2 02 	lds	r23, 0x02E2
    1330:	80 91 e3 02 	lds	r24, 0x02E3
    1334:	90 91 e4 02 	lds	r25, 0x02E4
    1338:	0e 94 b4 51 	call	0xa368	; 0xa368 <__fixsfsi>
    133c:	86 2f       	mov	r24, r22
    133e:	61 e0       	ldi	r22, 0x01	; 1
    1340:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)>>8,1);
    1344:	60 91 e1 02 	lds	r22, 0x02E1
    1348:	70 91 e2 02 	lds	r23, 0x02E2
    134c:	80 91 e3 02 	lds	r24, 0x02E3
    1350:	90 91 e4 02 	lds	r25, 0x02E4
    1354:	0e 94 b4 51 	call	0xa368	; 0xa368 <__fixsfsi>
    1358:	87 2f       	mov	r24, r23
    135a:	61 e0       	ldi	r22, 0x01	; 1
    135c:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)>>16,1);
    1360:	60 91 e1 02 	lds	r22, 0x02E1
    1364:	70 91 e2 02 	lds	r23, 0x02E2
    1368:	80 91 e3 02 	lds	r24, 0x02E3
    136c:	90 91 e4 02 	lds	r25, 0x02E4
    1370:	0e 94 b4 51 	call	0xa368	; 0xa368 <__fixsfsi>
    1374:	61 e0       	ldi	r22, 0x01	; 1
    1376:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)>>24,1);
    137a:	60 91 e1 02 	lds	r22, 0x02E1
    137e:	70 91 e2 02 	lds	r23, 0x02E2
    1382:	80 91 e3 02 	lds	r24, 0x02E3
    1386:	90 91 e4 02 	lds	r25, 0x02E4
    138a:	0e 94 b4 51 	call	0xa368	; 0xa368 <__fixsfsi>
    138e:	89 2f       	mov	r24, r25
    1390:	61 e0       	ldi	r22, 0x01	; 1
    1392:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
								usart0Transmit(pwm_left_desired>>2, 1);
    1396:	80 91 0b 03 	lds	r24, 0x030B
    139a:	90 91 0c 03 	lds	r25, 0x030C
    139e:	95 95       	asr	r25
    13a0:	87 95       	ror	r24
    13a2:	95 95       	asr	r25
    13a4:	87 95       	ror	r24
    13a6:	61 e0       	ldi	r22, 0x01	; 1
    13a8:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
								usart0Transmit(pwm_right_desired>>2, 1);
    13ac:	80 91 09 03 	lds	r24, 0x0309
    13b0:	90 91 0a 03 	lds	r25, 0x030A
    13b4:	95 95       	asr	r25
    13b6:	87 95       	ror	r24
    13b8:	95 95       	asr	r25
    13ba:	87 95       	ror	r24
    13bc:	61 e0       	ldi	r22, 0x01	; 1
    13be:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
    13c2:	80 91 5c 04 	lds	r24, 0x045C
    13c6:	2c e0       	ldi	r18, 0x0C	; 12
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	3a 87       	std	Y+10, r19	; 0x0a
    13cc:	29 87       	std	Y+9, r18	; 0x09
    13ce:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <main+0x110>
							demoStartTime = getTime100MicroSec();
							demoState = 1;
							break;

						case 1:
							if((getTime100MicroSec()-demoStartTime) >= (PAUSE_2_SEC)) {
    13d2:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
    13d6:	9b 01       	movw	r18, r22
    13d8:	ac 01       	movw	r20, r24
    13da:	80 91 64 04 	lds	r24, 0x0464
    13de:	90 91 65 04 	lds	r25, 0x0465
    13e2:	a0 91 66 04 	lds	r26, 0x0466
    13e6:	b0 91 67 04 	lds	r27, 0x0467
    13ea:	28 1b       	sub	r18, r24
    13ec:	39 0b       	sbc	r19, r25
    13ee:	4a 0b       	sbc	r20, r26
    13f0:	5b 0b       	sbc	r21, r27
    13f2:	2e 31       	cpi	r18, 0x1E	; 30
    13f4:	8b e4       	ldi	r24, 0x4B	; 75
    13f6:	38 07       	cpc	r19, r24
    13f8:	80 e0       	ldi	r24, 0x00	; 0
    13fa:	48 07       	cpc	r20, r24
    13fc:	80 e0       	ldi	r24, 0x00	; 0
    13fe:	58 07       	cpc	r21, r24
    1400:	08 f4       	brcc	.+2      	; 0x1404 <main+0x1228>
    1402:	7b cb       	rjmp	.-2314   	; 0xafa <main+0x91e>
								demoState = 2;
    1404:	92 e0       	ldi	r25, 0x02	; 2
    1406:	90 93 60 04 	sts	0x0460, r25
    140a:	80 91 5c 04 	lds	r24, 0x045C
    140e:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <main+0x110>
			readBatteryLevel();				// the battery level is updated every two seconds
             		
			if(currentSelector==4 || currentSelector==5) {
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption

				switch(rgbState) {
    1412:	82 30       	cpi	r24, 0x02	; 2
    1414:	09 f0       	breq	.+2      	; 0x1418 <main+0x123c>
    1416:	fa ca       	rjmp	.-2572   	; 0xa0c <main+0x830>
						pwm_green = 255 - currRand;
						rgbState = 2;
						break;

					case 2:
						pwm_blue = 255 - currRand;
    1418:	8a 2d       	mov	r24, r10
    141a:	80 95       	com	r24
    141c:	80 93 0e 02 	sts	0x020E, r24
						rgbState = 0;
    1420:	10 92 2c 03 	sts	0x032C, r1
						break;
    1424:	f3 ca       	rjmp	.-2586   	; 0xa0c <main+0x830>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
    1426:	81 30       	cpi	r24, 0x01	; 1
    1428:	09 f0       	breq	.+2      	; 0x142c <main+0x1250>
    142a:	2f c8       	rjmp	.-4002   	; 0x48a <main+0x2ae>
							//pwm_green = 255;
							//pwm_blue = 255;
							break;

						case 1:	// search for a line
							turnOffGreenLeds();
    142c:	0e 94 85 3e 	call	0x7d0a	; 0x7d0a <turnOffGreenLeds>
							GREEN_LED2_ON;
    1430:	80 91 0b 01 	lds	r24, 0x010B
    1434:	8b 7f       	andi	r24, 0xFB	; 251
    1436:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED3_ON;
							outOfLine = 0;
    143a:	10 92 62 04 	sts	0x0462, r1
							enableObstacleAvoidance();
    143e:	0e 94 61 3d 	call	0x7ac2	; 0x7ac2 <enableObstacleAvoidance>
							setRightSpeed(15);
    1442:	8f e0       	ldi	r24, 0x0F	; 15
    1444:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <setRightSpeed>
							setLeftSpeed(15);
    1448:	8f e0       	ldi	r24, 0x0F	; 15
    144a:	0e 94 4e 29 	call	0x529c	; 0x529c <setLeftSpeed>
							if(proximityResult[9]<LINE_IN_THR || proximityResult[10]<LINE_IN_THR || proximityResult[8]<LINE_IN_THR || proximityResult[11]<LINE_IN_THR) {
    144e:	80 91 7b 02 	lds	r24, 0x027B
    1452:	90 91 7c 02 	lds	r25, 0x027C
    1456:	a1 e0       	ldi	r26, 0x01	; 1
    1458:	80 39       	cpi	r24, 0x90	; 144
    145a:	9a 07       	cpc	r25, r26
    145c:	0c f4       	brge	.+2      	; 0x1460 <main+0x1284>
    145e:	10 c2       	rjmp	.+1056   	; 0x1880 <main+0x16a4>
    1460:	80 91 7d 02 	lds	r24, 0x027D
    1464:	90 91 7e 02 	lds	r25, 0x027E
    1468:	b1 e0       	ldi	r27, 0x01	; 1
    146a:	80 39       	cpi	r24, 0x90	; 144
    146c:	9b 07       	cpc	r25, r27
    146e:	0c f4       	brge	.+2      	; 0x1472 <main+0x1296>
    1470:	07 c2       	rjmp	.+1038   	; 0x1880 <main+0x16a4>
    1472:	80 91 79 02 	lds	r24, 0x0279
    1476:	90 91 7a 02 	lds	r25, 0x027A
    147a:	e1 e0       	ldi	r30, 0x01	; 1
    147c:	80 39       	cpi	r24, 0x90	; 144
    147e:	9e 07       	cpc	r25, r30
    1480:	0c f4       	brge	.+2      	; 0x1484 <main+0x12a8>
    1482:	fe c1       	rjmp	.+1020   	; 0x1880 <main+0x16a4>
    1484:	80 91 7f 02 	lds	r24, 0x027F
    1488:	90 91 80 02 	lds	r25, 0x0280
    148c:	f1 e0       	ldi	r31, 0x01	; 1
    148e:	80 39       	cpi	r24, 0x90	; 144
    1490:	9f 07       	cpc	r25, r31
    1492:	0c f4       	brge	.+2      	; 0x1496 <main+0x12ba>
    1494:	f5 c1       	rjmp	.+1002   	; 0x1880 <main+0x16a4>
									demoStartTime = getTime100MicroSec();
									demoState = 2;
									break;
								}
							} else {
								lineFound = 0;
    1496:	10 92 61 04 	sts	0x0461, r1
    149a:	0c 94 45 02 	jmp	0x48a	; 0x48a <main+0x2ae>
							demoState = 1;
						}
						break;

					case 3:	// rotate right
						irCommTasks();
    149e:	0e 94 a8 46 	call	0x8d50	; 0x8d50 <irCommTasks>
						if(theta <= targetAngle) {
    14a2:	60 91 7f 04 	lds	r22, 0x047F
    14a6:	70 91 80 04 	lds	r23, 0x0480
    14aa:	80 91 81 04 	lds	r24, 0x0481
    14ae:	90 91 82 04 	lds	r25, 0x0482
    14b2:	2d 81       	ldd	r18, Y+5	; 0x05
    14b4:	3e 81       	ldd	r19, Y+6	; 0x06
    14b6:	4f 81       	ldd	r20, Y+7	; 0x07
    14b8:	58 85       	ldd	r21, Y+8	; 0x08
    14ba:	0e 94 45 51 	call	0xa28a	; 0xa28a <__cmpsf2>
    14be:	18 16       	cp	r1, r24
    14c0:	0c f4       	brge	.+2      	; 0x14c4 <main+0x12e8>
    14c2:	1b cb       	rjmp	.-2506   	; 0xafa <main+0x91e>
							setLeftSpeed(0);
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	0e 94 4e 29 	call	0x529c	; 0x529c <setLeftSpeed>
							setRightSpeed(0);
    14ca:	80 e0       	ldi	r24, 0x00	; 0
    14cc:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <setRightSpeed>
							demoState = 2;
    14d0:	82 e0       	ldi	r24, 0x02	; 2
    14d2:	80 93 60 04 	sts	0x0460, r24
							demoStartTime = getTime100MicroSec();
    14d6:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
    14da:	60 93 64 04 	sts	0x0464, r22
    14de:	70 93 65 04 	sts	0x0465, r23
    14e2:	80 93 66 04 	sts	0x0466, r24
    14e6:	90 93 67 04 	sts	0x0467, r25
    14ea:	80 91 5c 04 	lds	r24, 0x045C
    14ee:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <main+0x110>
						demoState = 2;
						demoStartTime = getTime100MicroSec();
						break;

					case 2:
						irCommTasks();
    14f2:	0e 94 a8 46 	call	0x8d50	; 0x8d50 <irCommTasks>
						if(irCommDataSent()==1) {
    14f6:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <irCommDataSent>
    14fa:	81 30       	cpi	r24, 0x01	; 1
    14fc:	09 f4       	brne	.+2      	; 0x1500 <main+0x1324>
    14fe:	55 c3       	rjmp	.+1706   	; 0x1baa <main+0x19ce>
							angleDegEncode = (unsigned char)((float)angleDeg*0.7084);
							irCommSendData(angleDegEncode);
						}
						if(irCommDataAvailable()==1) {
    1500:	0e 94 63 50 	call	0xa0c6	; 0xa0c6 <irCommDataAvailable>
    1504:	81 30       	cpi	r24, 0x01	; 1
    1506:	09 f4       	brne	.+2      	; 0x150a <main+0x132e>
    1508:	ed c2       	rjmp	.+1498   	; 0x1ae4 <main+0x1908>
								i = irCommReceivingSensor();
								resetOdometry();
								demoState = 3;								
							}							
						}
						if((getTime100MicroSec()-demoStartTime) >= (PAUSE_5_SEC)) {
    150a:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
    150e:	9b 01       	movw	r18, r22
    1510:	ac 01       	movw	r20, r24
    1512:	80 91 64 04 	lds	r24, 0x0464
    1516:	90 91 65 04 	lds	r25, 0x0465
    151a:	a0 91 66 04 	lds	r26, 0x0466
    151e:	b0 91 67 04 	lds	r27, 0x0467
    1522:	28 1b       	sub	r18, r24
    1524:	39 0b       	sbc	r19, r25
    1526:	4a 0b       	sbc	r20, r26
    1528:	5b 0b       	sbc	r21, r27
    152a:	2d 3c       	cpi	r18, 0xCD	; 205
    152c:	6b eb       	ldi	r22, 0xBB	; 187
    152e:	36 07       	cpc	r19, r22
    1530:	60 e0       	ldi	r22, 0x00	; 0
    1532:	46 07       	cpc	r20, r22
    1534:	60 e0       	ldi	r22, 0x00	; 0
    1536:	56 07       	cpc	r21, r22
    1538:	08 f0       	brcs	.+2      	; 0x153c <main+0x1360>
    153a:	58 c9       	rjmp	.-3408   	; 0x7ec <main+0x610>
    153c:	de ca       	rjmp	.-2628   	; 0xafa <main+0x91e>
					}
				} else if(currRand<64) {
					if(pwm_red!=255 && pwm_blue!=255) {
						pwm_green = 255;
					}
				} else if (currRand<96) {
    153e:	a0 e6       	ldi	r26, 0x60	; 96
    1540:	aa 16       	cp	r10, r26
    1542:	b1 04       	cpc	r11, r1
    1544:	08 f0       	brcs	.+2      	; 0x1548 <main+0x136c>
    1546:	f7 c8       	rjmp	.-3602   	; 0x736 <main+0x55a>
					if(pwm_red!=255 && pwm_green!=255) {
    1548:	80 91 0c 02 	lds	r24, 0x020C
    154c:	8f 3f       	cpi	r24, 0xFF	; 255
    154e:	09 f4       	brne	.+2      	; 0x1552 <main+0x1376>
    1550:	f2 c8       	rjmp	.-3612   	; 0x736 <main+0x55a>
    1552:	80 91 0d 02 	lds	r24, 0x020D
    1556:	8f 3f       	cpi	r24, 0xFF	; 255
    1558:	09 f4       	brne	.+2      	; 0x155c <main+0x1380>
    155a:	ed c8       	rjmp	.-3622   	; 0x736 <main+0x55a>
						pwm_blue = 255;
    155c:	10 93 0e 02 	sts	0x020E, r17
    1560:	ea c8       	rjmp	.-3628   	; 0x736 <main+0x55a>
						pwm_red = 255 - currRand;	
						rgbState = 1;
						break;

					case 1:
						pwm_green = 255 - currRand;
    1562:	8a 2d       	mov	r24, r10
    1564:	80 95       	com	r24
    1566:	80 93 0d 02 	sts	0x020D, r24
						rgbState = 2;
    156a:	62 e0       	ldi	r22, 0x02	; 2
    156c:	60 93 2c 03 	sts	0x032C, r22
						break;
    1570:	4d ca       	rjmp	.-2918   	; 0xa0c <main+0x830>
							//pwm_green = 0;
							//pwm_blue = 255;
							break;

						case 2:	// line found, follow it
							turnOffGreenLeds();
    1572:	0e 94 85 3e 	call	0x7d0a	; 0x7d0a <turnOffGreenLeds>
							GREEN_LED4_ON;
    1576:	80 91 0b 01 	lds	r24, 0x010B
    157a:	8f 7e       	andi	r24, 0xEF	; 239
    157c:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED5_ON;
							disableObstacleAvoidance();
    1580:	0e 94 65 3d 	call	0x7aca	; 0x7aca <disableObstacleAvoidance>

							demoEndTime = getTime100MicroSec();
    1584:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
    1588:	9b 01       	movw	r18, r22
    158a:	ac 01       	movw	r20, r24
    158c:	60 93 6c 04 	sts	0x046C, r22
    1590:	70 93 6d 04 	sts	0x046D, r23
    1594:	80 93 6e 04 	sts	0x046E, r24
    1598:	90 93 6f 04 	sts	0x046F, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {	// the robot seems to be blocked somehow
    159c:	80 91 64 04 	lds	r24, 0x0464
    15a0:	90 91 65 04 	lds	r25, 0x0465
    15a4:	a0 91 66 04 	lds	r26, 0x0466
    15a8:	b0 91 67 04 	lds	r27, 0x0467
    15ac:	28 1b       	sub	r18, r24
    15ae:	39 0b       	sbc	r19, r25
    15b0:	4a 0b       	sbc	r20, r26
    15b2:	5b 0b       	sbc	r21, r27
    15b4:	23 33       	cpi	r18, 0x33	; 51
    15b6:	6f ee       	ldi	r22, 0xEF	; 239
    15b8:	36 07       	cpc	r19, r22
    15ba:	62 e0       	ldi	r22, 0x02	; 2
    15bc:	46 07       	cpc	r20, r22
    15be:	60 e0       	ldi	r22, 0x00	; 0
    15c0:	56 07       	cpc	r21, r22
    15c2:	08 f0       	brcs	.+2      	; 0x15c6 <main+0x13ea>
    15c4:	5d c2       	rjmp	.+1210   	; 0x1a80 <main+0x18a4>
								demoStartTime = getTime100MicroSec();
								demoState = 4;
								break;
							}

							if(CHARGE_ON) {
    15c6:	80 91 03 01 	lds	r24, 0x0103
    15ca:	84 ff       	sbrs	r24, 4
    15cc:	15 c2       	rjmp	.+1066   	; 0x19f8 <main+0x181c>
								outOfLine = 0;
    15ce:	10 92 62 04 	sts	0x0462, r1
								chargeContact++;
    15d2:	80 91 63 04 	lds	r24, 0x0463
    15d6:	8f 5f       	subi	r24, 0xFF	; 255
    15d8:	80 93 63 04 	sts	0x0463, r24
								if(chargeContact > 20) {
    15dc:	85 31       	cpi	r24, 0x15	; 21
    15de:	08 f0       	brcs	.+2      	; 0x15e2 <main+0x1406>
    15e0:	4d c3       	rjmp	.+1690   	; 0x1c7c <main+0x1aa0>
    15e2:	80 91 7b 02 	lds	r24, 0x027B
    15e6:	90 91 7c 02 	lds	r25, 0x027C
								} else {
									outOfLine = 0;
								}
							}
							
							if(proximityResult[8]<LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR && proximityResult[11]>LINE_OUT_THR) {	// left ground is the only within the black line => turn left
    15ea:	20 91 79 02 	lds	r18, 0x0279
    15ee:	30 91 7a 02 	lds	r19, 0x027A
    15f2:	e1 e0       	ldi	r30, 0x01	; 1
    15f4:	22 3c       	cpi	r18, 0xC2	; 194
    15f6:	3e 07       	cpc	r19, r30
    15f8:	ac f4       	brge	.+42     	; 0x1624 <main+0x1448>
    15fa:	f1 e0       	ldi	r31, 0x01	; 1
    15fc:	83 3c       	cpi	r24, 0xC3	; 195
    15fe:	9f 07       	cpc	r25, r31
    1600:	8c f0       	brlt	.+34     	; 0x1624 <main+0x1448>
    1602:	40 91 7d 02 	lds	r20, 0x027D
    1606:	50 91 7e 02 	lds	r21, 0x027E
    160a:	61 e0       	ldi	r22, 0x01	; 1
    160c:	43 3c       	cpi	r20, 0xC3	; 195
    160e:	56 07       	cpc	r21, r22
    1610:	4c f0       	brlt	.+18     	; 0x1624 <main+0x1448>
    1612:	40 91 7f 02 	lds	r20, 0x027F
    1616:	50 91 80 02 	lds	r21, 0x0280
    161a:	a1 e0       	ldi	r26, 0x01	; 1
    161c:	43 3c       	cpi	r20, 0xC3	; 195
    161e:	5a 07       	cpc	r21, r26
    1620:	0c f0       	brlt	.+2      	; 0x1624 <main+0x1448>
    1622:	77 c3       	rjmp	.+1774   	; 0x1d12 <main+0x1b36>
								setLeftSpeed(-10);
								setRightSpeed(15);
							} else if(proximityResult[11]<LINE_OUT_THR && proximityResult[8]>LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {	// right ground is the only within the black line => turn right
    1624:	40 91 7f 02 	lds	r20, 0x027F
    1628:	50 91 80 02 	lds	r21, 0x0280
    162c:	b1 e0       	ldi	r27, 0x01	; 1
    162e:	42 3c       	cpi	r20, 0xC2	; 194
    1630:	5b 07       	cpc	r21, r27
    1632:	0c f0       	brlt	.+2      	; 0x1636 <main+0x145a>
    1634:	cb c1       	rjmp	.+918    	; 0x19cc <main+0x17f0>
    1636:	e1 e0       	ldi	r30, 0x01	; 1
    1638:	23 3c       	cpi	r18, 0xC3	; 195
    163a:	3e 07       	cpc	r19, r30
    163c:	0c f4       	brge	.+2      	; 0x1640 <main+0x1464>
    163e:	c6 c1       	rjmp	.+908    	; 0x19cc <main+0x17f0>
    1640:	f1 e0       	ldi	r31, 0x01	; 1
    1642:	83 3c       	cpi	r24, 0xC3	; 195
    1644:	9f 07       	cpc	r25, r31
    1646:	0c f4       	brge	.+2      	; 0x164a <main+0x146e>
    1648:	c6 c1       	rjmp	.+908    	; 0x19d6 <main+0x17fa>
    164a:	80 91 7d 02 	lds	r24, 0x027D
    164e:	90 91 7e 02 	lds	r25, 0x027E
    1652:	21 e0       	ldi	r18, 0x01	; 1
    1654:	83 3c       	cpi	r24, 0xC3	; 195
    1656:	92 07       	cpc	r25, r18
    1658:	0c f0       	brlt	.+2      	; 0x165c <main+0x1480>
    165a:	53 c3       	rjmp	.+1702   	; 0x1d02 <main+0x1b26>
								setLeftSpeed(15);
								setRightSpeed(-10);
							} else if(proximityResult[9]>LINE_OUT_THR) {	// center left is leaving the line => turn right
								setLeftSpeed(15);
    165c:	8f e0       	ldi	r24, 0x0F	; 15
    165e:	0e 94 4e 29 	call	0x529c	; 0x529c <setLeftSpeed>
								setRightSpeed(-5);
    1662:	8b ef       	ldi	r24, 0xFB	; 251
    1664:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <setRightSpeed>
    1668:	0c 94 45 02 	jmp	0x48a	; 0x48a <main+0x2ae>
							demoState = 1;
						}
						break;

					case 3:
						irCommTasks();
    166c:	0e 94 a8 46 	call	0x8d50	; 0x8d50 <irCommTasks>
						switch(i) {	// receiving sensor
    1670:	89 85       	ldd	r24, Y+9	; 0x09
    1672:	9a 85       	ldd	r25, Y+10	; 0x0a
    1674:	83 30       	cpi	r24, 0x03	; 3
    1676:	91 05       	cpc	r25, r1
    1678:	09 f4       	brne	.+2      	; 0x167c <main+0x14a0>
    167a:	e6 c2       	rjmp	.+1484   	; 0x1c48 <main+0x1a6c>
    167c:	84 30       	cpi	r24, 0x04	; 4
    167e:	91 05       	cpc	r25, r1
    1680:	08 f0       	brcs	.+2      	; 0x1684 <main+0x14a8>
    1682:	d8 c1       	rjmp	.+944    	; 0x1a34 <main+0x1858>
    1684:	81 30       	cpi	r24, 0x01	; 1
    1686:	91 05       	cpc	r25, r1
    1688:	09 f4       	brne	.+2      	; 0x168c <main+0x14b0>
    168a:	ef c2       	rjmp	.+1502   	; 0x1c6a <main+0x1a8e>
    168c:	82 30       	cpi	r24, 0x02	; 2
    168e:	91 05       	cpc	r25, r1
    1690:	08 f4       	brcc	.+2      	; 0x1694 <main+0x14b8>
    1692:	e3 c2       	rjmp	.+1478   	; 0x1c5a <main+0x1a7e>
								break;
							case 1:
								targetAngle = -0.785;
								break;
							case 2:
								targetAngle = -1.57;
    1694:	83 ec       	ldi	r24, 0xC3	; 195
    1696:	95 ef       	ldi	r25, 0xF5	; 245
    1698:	a8 ec       	ldi	r26, 0xC8	; 200
    169a:	bf eb       	ldi	r27, 0xBF	; 191
    169c:	8d 83       	std	Y+5, r24	; 0x05
    169e:	9e 83       	std	Y+6, r25	; 0x06
    16a0:	af 83       	std	Y+7, r26	; 0x07
    16a2:	b8 87       	std	Y+8, r27	; 0x08
							case 7:
								targetAngle = 0.785;
								break;
						}
						if(targetAngle < 0.0) {
							setLeftSpeed(10);
    16a4:	8a e0       	ldi	r24, 0x0A	; 10
    16a6:	0e 94 4e 29 	call	0x529c	; 0x529c <setLeftSpeed>
							setRightSpeed(-10);
    16aa:	86 ef       	ldi	r24, 0xF6	; 246
    16ac:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <setRightSpeed>
							demoState = 4;
    16b0:	94 e0       	ldi	r25, 0x04	; 4
    16b2:	90 93 60 04 	sts	0x0460, r25
    16b6:	80 91 5c 04 	lds	r24, 0x045C
    16ba:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <main+0x110>
							demoState = 5;
						}
						
						break;
					case 4:
						irCommTasks();
    16be:	0e 94 a8 46 	call	0x8d50	; 0x8d50 <irCommTasks>
						if(theta <= targetAngle) {
    16c2:	60 91 7f 04 	lds	r22, 0x047F
    16c6:	70 91 80 04 	lds	r23, 0x0480
    16ca:	80 91 81 04 	lds	r24, 0x0481
    16ce:	90 91 82 04 	lds	r25, 0x0482
    16d2:	2d 81       	ldd	r18, Y+5	; 0x05
    16d4:	3e 81       	ldd	r19, Y+6	; 0x06
    16d6:	4f 81       	ldd	r20, Y+7	; 0x07
    16d8:	58 85       	ldd	r21, Y+8	; 0x08
    16da:	0e 94 45 51 	call	0xa28a	; 0xa28a <__cmpsf2>
    16de:	18 16       	cp	r1, r24
    16e0:	0c f4       	brge	.+2      	; 0x16e4 <main+0x1508>
    16e2:	0b ca       	rjmp	.-3050   	; 0xafa <main+0x91e>
							setLeftSpeed(0);
    16e4:	80 e0       	ldi	r24, 0x00	; 0
    16e6:	0e 94 4e 29 	call	0x529c	; 0x529c <setLeftSpeed>
							setRightSpeed(0);
    16ea:	80 e0       	ldi	r24, 0x00	; 0
    16ec:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <setRightSpeed>
							demoState = 2;
    16f0:	b2 e0       	ldi	r27, 0x02	; 2
    16f2:	b0 93 60 04 	sts	0x0460, r27
							demoStartTime = getTime100MicroSec();
    16f6:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
    16fa:	60 93 64 04 	sts	0x0464, r22
    16fe:	70 93 65 04 	sts	0x0465, r23
    1702:	80 93 66 04 	sts	0x0466, r24
    1706:	90 93 67 04 	sts	0x0467, r25
    170a:	80 91 5c 04 	lds	r24, 0x045C
    170e:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <main+0x110>
							//pwm_green = 255;
							//pwm_blue = 0;
							break;

						case 3:	// charge for some time
							turnOffGreenLeds();
    1712:	0e 94 85 3e 	call	0x7d0a	; 0x7d0a <turnOffGreenLeds>
							GREEN_LED6_ON;
    1716:	80 91 0b 01 	lds	r24, 0x010B
    171a:	8f 7b       	andi	r24, 0xBF	; 191
    171c:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED7_ON;
							demoEndTime = getTime100MicroSec();
    1720:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
    1724:	9b 01       	movw	r18, r22
    1726:	ac 01       	movw	r20, r24
    1728:	60 93 6c 04 	sts	0x046C, r22
    172c:	70 93 6d 04 	sts	0x046D, r23
    1730:	80 93 6e 04 	sts	0x046E, r24
    1734:	90 93 6f 04 	sts	0x046F, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_30_SEC)) {
    1738:	80 91 64 04 	lds	r24, 0x0464
    173c:	90 91 65 04 	lds	r25, 0x0465
    1740:	a0 91 66 04 	lds	r26, 0x0466
    1744:	b0 91 67 04 	lds	r27, 0x0467
    1748:	28 1b       	sub	r18, r24
    174a:	39 0b       	sbc	r19, r25
    174c:	4a 0b       	sbc	r20, r26
    174e:	5b 0b       	sbc	r21, r27
    1750:	2d 3c       	cpi	r18, 0xCD	; 205
    1752:	66 e6       	ldi	r22, 0x66	; 102
    1754:	36 07       	cpc	r19, r22
    1756:	64 e0       	ldi	r22, 0x04	; 4
    1758:	46 07       	cpc	r20, r22
    175a:	60 e0       	ldi	r22, 0x00	; 0
    175c:	56 07       	cpc	r21, r22
    175e:	08 f4       	brcc	.+2      	; 0x1762 <main+0x1586>
    1760:	13 c1       	rjmp	.+550    	; 0x1988 <main+0x17ac>
								if(batteryLevel<890) {//860) {	// stay in charge if too much discharged (consider the fact that the robot
    1762:	80 91 cd 02 	lds	r24, 0x02CD
    1766:	90 91 ce 02 	lds	r25, 0x02CE
    176a:	a3 e0       	ldi	r26, 0x03	; 3
    176c:	8a 37       	cpi	r24, 0x7A	; 122
    176e:	9a 07       	cpc	r25, r26
    1770:	08 f4       	brcc	.+2      	; 0x1774 <main+0x1598>
    1772:	17 c1       	rjmp	.+558    	; 0x19a2 <main+0x17c6>
														// is still in charge thus the battery value measured is higher)
									demoStartTime = getTime100MicroSec();
									break;
								} else {
									setRightSpeed(-13);
    1774:	83 ef       	ldi	r24, 0xF3	; 243
    1776:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <setRightSpeed>
									setLeftSpeed(-13);
    177a:	83 ef       	ldi	r24, 0xF3	; 243
    177c:	0e 94 4e 29 	call	0x529c	; 0x529c <setLeftSpeed>
									demoStartTime = getTime100MicroSec();
    1780:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
    1784:	60 93 64 04 	sts	0x0464, r22
    1788:	70 93 65 04 	sts	0x0465, r23
    178c:	80 93 66 04 	sts	0x0466, r24
    1790:	90 93 67 04 	sts	0x0467, r25
									demoState = 4;
    1794:	b4 e0       	ldi	r27, 0x04	; 4
    1796:	b0 93 60 04 	sts	0x0460, r27
									break;
    179a:	0c 94 45 02 	jmp	0x48a	; 0x48a <main+0x2ae>
							//pwm_green = 255;
							//pwm_blue = 0;
							break;
						
						case 4: // go back from charger
							turnOffGreenLeds();
    179e:	0e 94 85 3e 	call	0x7d0a	; 0x7d0a <turnOffGreenLeds>
							GREEN_LED6_ON;
    17a2:	80 91 0b 01 	lds	r24, 0x010B
    17a6:	8f 7b       	andi	r24, 0xBF	; 191
    17a8:	80 93 0b 01 	sts	0x010B, r24
							GREEN_LED7_ON;
    17ac:	80 91 0b 01 	lds	r24, 0x010B
    17b0:	8f 77       	andi	r24, 0x7F	; 127
    17b2:	80 93 0b 01 	sts	0x010B, r24
							demoEndTime = getTime100MicroSec();
    17b6:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
    17ba:	9b 01       	movw	r18, r22
    17bc:	ac 01       	movw	r20, r24
    17be:	60 93 6c 04 	sts	0x046C, r22
    17c2:	70 93 6d 04 	sts	0x046D, r23
    17c6:	80 93 6e 04 	sts	0x046E, r24
    17ca:	90 93 6f 04 	sts	0x046F, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_1_SEC)) {
    17ce:	80 91 64 04 	lds	r24, 0x0464
    17d2:	90 91 65 04 	lds	r25, 0x0465
    17d6:	a0 91 66 04 	lds	r26, 0x0466
    17da:	b0 91 67 04 	lds	r27, 0x0467
    17de:	28 1b       	sub	r18, r24
    17e0:	39 0b       	sbc	r19, r25
    17e2:	4a 0b       	sbc	r20, r26
    17e4:	5b 0b       	sbc	r21, r27
    17e6:	2f 38       	cpi	r18, 0x8F	; 143
    17e8:	f5 e2       	ldi	r31, 0x25	; 37
    17ea:	3f 07       	cpc	r19, r31
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	4f 07       	cpc	r20, r31
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	5f 07       	cpc	r21, r31
    17f4:	10 f4       	brcc	.+4      	; 0x17fa <main+0x161e>
    17f6:	0c 94 45 02 	jmp	0x48a	; 0x48a <main+0x2ae>
								setRightSpeed(20);
    17fa:	84 e1       	ldi	r24, 0x14	; 20
    17fc:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <setRightSpeed>
								setLeftSpeed(-20);								
    1800:	8c ee       	ldi	r24, 0xEC	; 236
    1802:	0e 94 4e 29 	call	0x529c	; 0x529c <setLeftSpeed>
								demoStartTime = getTime100MicroSec();
    1806:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
    180a:	60 93 64 04 	sts	0x0464, r22
    180e:	70 93 65 04 	sts	0x0465, r23
    1812:	80 93 66 04 	sts	0x0466, r24
    1816:	90 93 67 04 	sts	0x0467, r25
								demoState = 5;							
    181a:	85 e0       	ldi	r24, 0x05	; 5
    181c:	98 2e       	mov	r9, r24
    181e:	90 92 60 04 	sts	0x0460, r9
    1822:	0c 94 45 02 	jmp	0x48a	; 0x48a <main+0x2ae>
						demoState = 2;
						demoStartTime = getTime100MicroSec();
						break;

					case 2:						
						irCommTasks();
    1826:	0e 94 a8 46 	call	0x8d50	; 0x8d50 <irCommTasks>
						if(irCommDataSent()==1) {
    182a:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <irCommDataSent>
    182e:	81 30       	cpi	r24, 0x01	; 1
    1830:	09 f4       	brne	.+2      	; 0x1834 <main+0x1658>
    1832:	d3 c1       	rjmp	.+934    	; 0x1bda <main+0x19fe>
							irCommSendData(0xAA);
						}
						if(irCommDataAvailable()==1) {
    1834:	0e 94 63 50 	call	0xa0c6	; 0xa0c6 <irCommDataAvailable>
    1838:	81 30       	cpi	r24, 0x01	; 1
    183a:	09 f0       	breq	.+2      	; 0x183e <main+0x1662>
    183c:	66 ce       	rjmp	.-820    	; 0x150a <main+0x132e>
							i = irCommReadData();
    183e:	0e 94 66 50 	call	0xa0cc	; 0xa0cc <irCommReadData>
    1842:	e8 2f       	mov	r30, r24
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	fa 87       	std	Y+10, r31	; 0x0a
    1848:	e9 87       	std	Y+9, r30	; 0x09
							if(i == 0xAA) {
    184a:	ea 3a       	cpi	r30, 0xAA	; 170
    184c:	f1 05       	cpc	r31, r1
    184e:	09 f0       	breq	.+2      	; 0x1852 <main+0x1676>
    1850:	5c ce       	rjmp	.-840    	; 0x150a <main+0x132e>
								disableObstacleAvoidance();
    1852:	0e 94 65 3d 	call	0x7aca	; 0x7aca <disableObstacleAvoidance>
								i = irCommReceivingSensor();
    1856:	0e 94 6b 50 	call	0xa0d6	; 0xa0d6 <irCommReceivingSensor>
    185a:	28 2f       	mov	r18, r24
    185c:	33 27       	eor	r19, r19
    185e:	27 fd       	sbrc	r18, 7
    1860:	30 95       	com	r19
    1862:	3a 87       	std	Y+10, r19	; 0x0a
    1864:	29 87       	std	Y+9, r18	; 0x09
								resetOdometry();
    1866:	0e 94 4c 21 	call	0x4298	; 0x4298 <resetOdometry>
								demoState = 3;								
    186a:	33 e0       	ldi	r19, 0x03	; 3
    186c:	30 93 60 04 	sts	0x0460, r19
    1870:	4c ce       	rjmp	.-872    	; 0x150a <main+0x132e>
				currRand2 = rand()%128;
				if(currRand2<32) {
					pwm_red = 255;
				} else if(currRand2<64) {
					pwm_green = 255;
				} else if (currRand2<96) {
    1872:	80 36       	cpi	r24, 0x60	; 96
    1874:	91 05       	cpc	r25, r1
    1876:	08 f0       	brcs	.+2      	; 0x187a <main+0x169e>
    1878:	2f c9       	rjmp	.-3490   	; 0xad8 <main+0x8fc>
					pwm_blue = 255;
    187a:	10 93 0e 02 	sts	0x020E, r17
    187e:	2c c9       	rjmp	.-3496   	; 0xad8 <main+0x8fc>
							outOfLine = 0;
							enableObstacleAvoidance();
							setRightSpeed(15);
							setLeftSpeed(15);
							if(proximityResult[9]<LINE_IN_THR || proximityResult[10]<LINE_IN_THR || proximityResult[8]<LINE_IN_THR || proximityResult[11]<LINE_IN_THR) {
								lineFound++;
    1880:	80 91 61 04 	lds	r24, 0x0461
    1884:	8f 5f       	subi	r24, 0xFF	; 255
    1886:	80 93 61 04 	sts	0x0461, r24
								if(lineFound > 10) {
    188a:	8b 30       	cpi	r24, 0x0B	; 11
    188c:	10 f4       	brcc	.+4      	; 0x1892 <main+0x16b6>
    188e:	0c 94 45 02 	jmp	0x48a	; 0x48a <main+0x2ae>
									outOfLine = 0;
    1892:	10 92 62 04 	sts	0x0462, r1
									chargeContact = 0;
    1896:	10 92 63 04 	sts	0x0463, r1
									demoStartTime = getTime100MicroSec();
    189a:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
    189e:	60 93 64 04 	sts	0x0464, r22
    18a2:	70 93 65 04 	sts	0x0465, r23
    18a6:	80 93 66 04 	sts	0x0466, r24
    18aa:	90 93 67 04 	sts	0x0467, r25
									demoState = 2;
    18ae:	92 e0       	ldi	r25, 0x02	; 2
    18b0:	99 2e       	mov	r9, r25
    18b2:	90 92 60 04 	sts	0x0460, r9
									break;
    18b6:	0c 94 45 02 	jmp	0x48a	; 0x48a <main+0x2ae>
							}

							currRand = rand()% 200;
							if(currRand<50) {
								pwm_red = 255;
							} else if(currRand<100) {
    18ba:	94 e6       	ldi	r25, 0x64	; 100
    18bc:	a9 16       	cp	r10, r25
    18be:	b1 04       	cpc	r11, r1
    18c0:	08 f0       	brcs	.+2      	; 0x18c4 <main+0x16e8>
    18c2:	7b c0       	rjmp	.+246    	; 0x19ba <main+0x17de>
								pwm_green = 255;
    18c4:	10 93 0d 02 	sts	0x020D, r17
    18c8:	80 91 0c 02 	lds	r24, 0x020C
    18cc:	f7 c9       	rjmp	.-3090   	; 0xcbc <main+0xae0>

							currRand = rand()% 128;
							if(currRand > 95) {
								pwm_blue = 255;
							} else {
								pwm_blue = currRand;
    18ce:	80 93 0e 02 	sts	0x020E, r24
    18d2:	e5 c9       	rjmp	.-3126   	; 0xc9e <main+0xac2>

							currRand = rand()% 128;
							if(currRand > 95) {
								pwm_green = 255;
							} else {
								pwm_green = currRand;
    18d4:	80 93 0d 02 	sts	0x020D, r24
    18d8:	d6 c9       	rjmp	.-3156   	; 0xc86 <main+0xaaa>
							turnOffGreenLeds();					
							currRand = rand()% 128;	// 0 to 255 is the maximum, we use 0 to 127 to get brighter colors
							if(currRand > 95) {
								pwm_red = 255;
							} else {
								pwm_red = currRand;
    18da:	80 93 0c 02 	sts	0x020C, r24
    18de:	c7 c9       	rjmp	.-3186   	; 0xc6e <main+0xa92>
					} else if(pwm_right_desired > pwm_intermediate_right_desired) {
						pwm_intermediate_right_desired += speedStep;
						if(pwm_intermediate_right_desired > pwm_right_desired) {
							pwm_intermediate_right_desired = pwm_right_desired;
						}
					} else if(pwm_right_desired < pwm_intermediate_right_desired) {
    18e0:	82 17       	cp	r24, r18
    18e2:	93 07       	cpc	r25, r19
    18e4:	14 f0       	brlt	.+4      	; 0x18ea <main+0x170e>
    18e6:	0c 94 1e 03 	jmp	0x63c	; 0x63c <main+0x460>
						pwm_intermediate_right_desired -= speedStep;
    18ea:	40 91 17 02 	lds	r20, 0x0217
    18ee:	24 1b       	sub	r18, r20
    18f0:	31 09       	sbc	r19, r1
    18f2:	30 93 0e 03 	sts	0x030E, r19
    18f6:	20 93 0d 03 	sts	0x030D, r18
						if(pwm_intermediate_right_desired < pwm_right_desired) {
    18fa:	28 17       	cp	r18, r24
    18fc:	39 07       	cpc	r19, r25
    18fe:	14 f0       	brlt	.+4      	; 0x1904 <main+0x1728>
    1900:	0c 94 1e 03 	jmp	0x63c	; 0x63c <main+0x460>
    1904:	0c 94 1a 03 	jmp	0x634	; 0x634 <main+0x458>
					} else if(pwm_left_desired > pwm_intermediate_left_desired) {
						pwm_intermediate_left_desired += speedStep;
						if(pwm_intermediate_left_desired > pwm_left_desired) {
							pwm_intermediate_left_desired = pwm_left_desired;
						}
					} else if(pwm_left_desired < pwm_intermediate_left_desired) {
    1908:	82 17       	cp	r24, r18
    190a:	93 07       	cpc	r25, r19
    190c:	14 f0       	brlt	.+4      	; 0x1912 <main+0x1736>
    190e:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <main+0xe0>
						pwm_intermediate_left_desired -= speedStep;
    1912:	40 91 17 02 	lds	r20, 0x0217
    1916:	24 1b       	sub	r18, r20
    1918:	31 09       	sbc	r19, r1
    191a:	30 93 10 03 	sts	0x0310, r19
    191e:	20 93 0f 03 	sts	0x030F, r18
						if(pwm_intermediate_left_desired < pwm_left_desired) {
    1922:	28 17       	cp	r18, r24
    1924:	39 07       	cpc	r19, r25
    1926:	14 f0       	brlt	.+4      	; 0x192c <main+0x1750>
    1928:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <main+0xe0>
    192c:	0c 94 43 03 	jmp	0x686	; 0x686 <main+0x4aa>
								}
								setGreenLed(greenLedState, 1);
								demoEndTime = getTime100MicroSec();											
							}
							if((getTime100MicroSec()-demoStartTime2) >= (PAUSE_2_SEC)) {
								rgbLedState = 1;
    1930:	20 92 7b 04 	sts	0x047B, r2
								demoStartTime2 = getTime100MicroSec();
    1934:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
    1938:	60 93 68 04 	sts	0x0468, r22
    193c:	70 93 69 04 	sts	0x0469, r23
    1940:	80 93 6a 04 	sts	0x046A, r24
    1944:	90 93 6b 04 	sts	0x046B, r25
    1948:	0c 94 45 02 	jmp	0x48a	; 0x48a <main+0x2ae>
						case 0:							
							pwm_red = 255;
							pwm_green = 255;
							pwm_blue = 255;
							if((getTime100MicroSec()-demoEndTime) >= (PAUSE_100_MSEC)) {
								setGreenLed(greenLedState, 0);
    194c:	80 91 7a 04 	lds	r24, 0x047A
    1950:	60 e0       	ldi	r22, 0x00	; 0
    1952:	0e 94 e8 3d 	call	0x7bd0	; 0x7bd0 <setGreenLed>
								greenLedState++;
    1956:	80 91 7a 04 	lds	r24, 0x047A
    195a:	8f 5f       	subi	r24, 0xFF	; 255
    195c:	80 93 7a 04 	sts	0x047A, r24
								if(greenLedState > 7) {
    1960:	88 30       	cpi	r24, 0x08	; 8
    1962:	18 f0       	brcs	.+6      	; 0x196a <main+0x178e>
									greenLedState = 0;
    1964:	10 92 7a 04 	sts	0x047A, r1
    1968:	80 e0       	ldi	r24, 0x00	; 0
								}
								setGreenLed(greenLedState, 1);
    196a:	61 e0       	ldi	r22, 0x01	; 1
    196c:	0e 94 e8 3d 	call	0x7bd0	; 0x7bd0 <setGreenLed>
								demoEndTime = getTime100MicroSec();											
    1970:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
    1974:	60 93 6c 04 	sts	0x046C, r22
    1978:	70 93 6d 04 	sts	0x046D, r23
    197c:	80 93 6e 04 	sts	0x046E, r24
    1980:	90 93 6f 04 	sts	0x046F, r25
    1984:	0c 94 2b 02 	jmp	0x456	; 0x456 <main+0x27a>
									demoStartTime = getTime100MicroSec();
									demoState = 4;
									break;
								}
							}
							if(!CHARGE_ON) {
    1988:	80 91 03 01 	lds	r24, 0x0103
    198c:	84 ff       	sbrs	r24, 4
    198e:	02 c0       	rjmp	.+4      	; 0x1994 <main+0x17b8>
    1990:	0c 94 45 02 	jmp	0x48a	; 0x48a <main+0x2ae>
								chargeContact = 0;
    1994:	10 92 63 04 	sts	0x0463, r1
								outOfLine = 0;
    1998:	10 92 62 04 	sts	0x0462, r1
								demoState = 2;
    199c:	e2 e0       	ldi	r30, 0x02	; 2
    199e:	e0 93 60 04 	sts	0x0460, r30
								demoStartTime = getTime100MicroSec();
    19a2:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
    19a6:	60 93 64 04 	sts	0x0464, r22
    19aa:	70 93 65 04 	sts	0x0465, r23
    19ae:	80 93 66 04 	sts	0x0466, r24
    19b2:	90 93 67 04 	sts	0x0467, r25
								break;						
    19b6:	0c 94 45 02 	jmp	0x48a	; 0x48a <main+0x2ae>
							currRand = rand()% 200;
							if(currRand<50) {
								pwm_red = 255;
							} else if(currRand<100) {
								pwm_green = 255;
							} else if (currRand<150) {	
    19ba:	a6 e9       	ldi	r26, 0x96	; 150
    19bc:	aa 16       	cp	r10, r26
    19be:	b1 04       	cpc	r11, r1
    19c0:	10 f4       	brcc	.+4      	; 0x19c6 <main+0x17ea>
								pwm_blue = 255;
    19c2:	10 93 0e 02 	sts	0x020E, r17
    19c6:	80 91 0c 02 	lds	r24, 0x020C
    19ca:	78 c9       	rjmp	.-3344   	; 0xcbc <main+0xae0>
								setLeftSpeed(-10);
								setRightSpeed(15);
							} else if(proximityResult[11]<LINE_OUT_THR && proximityResult[8]>LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {	// right ground is the only within the black line => turn right
								setLeftSpeed(15);
								setRightSpeed(-10);
							} else if(proximityResult[9]>LINE_OUT_THR) {	// center left is leaving the line => turn right
    19cc:	31 e0       	ldi	r19, 0x01	; 1
    19ce:	83 3c       	cpi	r24, 0xC3	; 195
    19d0:	93 07       	cpc	r25, r19
    19d2:	0c f0       	brlt	.+2      	; 0x19d6 <main+0x17fa>
    19d4:	43 ce       	rjmp	.-890    	; 0x165c <main+0x1480>
								setRightSpeed(-5);
								//outOfLine++;
								//if(outOfLine > 250) {
								//	demoState = 1;
								//}
							} else if(proximityResult[10]>LINE_OUT_THR) {	// center right is leaving the lnie => turn left
    19d6:	80 91 7d 02 	lds	r24, 0x027D
    19da:	90 91 7e 02 	lds	r25, 0x027E
    19de:	41 e0       	ldi	r20, 0x01	; 1
    19e0:	83 3c       	cpi	r24, 0xC3	; 195
    19e2:	94 07       	cpc	r25, r20
    19e4:	0c f4       	brge	.+2      	; 0x19e8 <main+0x180c>
    19e6:	76 c0       	rjmp	.+236    	; 0x1ad4 <main+0x18f8>
								setLeftSpeed(-5);
    19e8:	8b ef       	ldi	r24, 0xFB	; 251
    19ea:	0e 94 4e 29 	call	0x529c	; 0x529c <setLeftSpeed>
								setRightSpeed(15);
    19ee:	8f e0       	ldi	r24, 0x0F	; 15
    19f0:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <setRightSpeed>
    19f4:	0c 94 45 02 	jmp	0x48a	; 0x48a <main+0x2ae>
									demoStartTime = getTime100MicroSec();
									demoState = 3;
									break;
								}
							} else {
								chargeContact = 0;
    19f8:	10 92 63 04 	sts	0x0463, r1

								if(proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {
    19fc:	80 91 7b 02 	lds	r24, 0x027B
    1a00:	90 91 7c 02 	lds	r25, 0x027C
    1a04:	a1 e0       	ldi	r26, 0x01	; 1
    1a06:	83 3c       	cpi	r24, 0xC3	; 195
    1a08:	9a 07       	cpc	r25, r26
    1a0a:	0c f4       	brge	.+2      	; 0x1a0e <main+0x1832>
    1a0c:	4e c0       	rjmp	.+156    	; 0x1aaa <main+0x18ce>
    1a0e:	20 91 7d 02 	lds	r18, 0x027D
    1a12:	30 91 7e 02 	lds	r19, 0x027E
    1a16:	b1 e0       	ldi	r27, 0x01	; 1
    1a18:	23 3c       	cpi	r18, 0xC3	; 195
    1a1a:	3b 07       	cpc	r19, r27
    1a1c:	0c f4       	brge	.+2      	; 0x1a20 <main+0x1844>
    1a1e:	45 c0       	rjmp	.+138    	; 0x1aaa <main+0x18ce>
									outOfLine++;
    1a20:	20 91 62 04 	lds	r18, 0x0462
    1a24:	2f 5f       	subi	r18, 0xFF	; 255
    1a26:	20 93 62 04 	sts	0x0462, r18
									if(outOfLine > 250) {
    1a2a:	2b 3f       	cpi	r18, 0xFB	; 251
    1a2c:	08 f4       	brcc	.+2      	; 0x1a30 <main+0x1854>
    1a2e:	dd cd       	rjmp	.-1094   	; 0x15ea <main+0x140e>
    1a30:	0c 94 89 03 	jmp	0x712	; 0x712 <main+0x536>
						}
						break;

					case 3:
						irCommTasks();
						switch(i) {	// receiving sensor
    1a34:	a9 85       	ldd	r26, Y+9	; 0x09
    1a36:	ba 85       	ldd	r27, Y+10	; 0x0a
    1a38:	a5 30       	cpi	r26, 0x05	; 5
    1a3a:	b1 05       	cpc	r27, r1
    1a3c:	09 f4       	brne	.+2      	; 0x1a40 <main+0x1864>
    1a3e:	e9 c0       	rjmp	.+466    	; 0x1c12 <main+0x1a36>
    1a40:	a5 30       	cpi	r26, 0x05	; 5
    1a42:	b1 05       	cpc	r27, r1
    1a44:	08 f0       	brcs	.+2      	; 0x1a48 <main+0x186c>
    1a46:	d3 c0       	rjmp	.+422    	; 0x1bee <main+0x1a12>
								break;
							case 3:
								targetAngle = -2.356;
								break;
							case 4:
								targetAngle = 3.14;
    1a48:	23 ec       	ldi	r18, 0xC3	; 195
    1a4a:	35 ef       	ldi	r19, 0xF5	; 245
    1a4c:	48 e4       	ldi	r20, 0x48	; 72
    1a4e:	50 e4       	ldi	r21, 0x40	; 64
    1a50:	2d 83       	std	Y+5, r18	; 0x05
    1a52:	3e 83       	std	Y+6, r19	; 0x06
    1a54:	4f 83       	std	Y+7, r20	; 0x07
    1a56:	58 87       	std	Y+8, r21	; 0x08
						if(targetAngle < 0.0) {
							setLeftSpeed(10);
							setRightSpeed(-10);
							demoState = 4;
						} else {
							setLeftSpeed(-10);
    1a58:	86 ef       	ldi	r24, 0xF6	; 246
    1a5a:	0e 94 4e 29 	call	0x529c	; 0x529c <setLeftSpeed>
							setRightSpeed(10);
    1a5e:	8a e0       	ldi	r24, 0x0A	; 10
    1a60:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <setRightSpeed>
							demoState = 5;
    1a64:	a5 e0       	ldi	r26, 0x05	; 5
    1a66:	a0 93 60 04 	sts	0x0460, r26
    1a6a:	80 91 5c 04 	lds	r24, 0x045C
    1a6e:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <main+0x110>
						break;

					case 1:
						irCommTasks();
						if(irCommDataAvailable()==1) {
							i = irCommReadData();
    1a72:	0e 94 66 50 	call	0xa0cc	; 0xa0cc <irCommReadData>
    1a76:	28 2f       	mov	r18, r24
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	3a 87       	std	Y+10, r19	; 0x0a
    1a7c:	29 87       	std	Y+9, r18	; 0x09
    1a7e:	3d c8       	rjmp	.-3974   	; 0xafa <main+0x91e>
							disableObstacleAvoidance();

							demoEndTime = getTime100MicroSec();
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {	// the robot seems to be blocked somehow
								// go back for a while
								setRightSpeed(-20);
    1a80:	8c ee       	ldi	r24, 0xEC	; 236
    1a82:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <setRightSpeed>
								setLeftSpeed(-20);
    1a86:	8c ee       	ldi	r24, 0xEC	; 236
    1a88:	0e 94 4e 29 	call	0x529c	; 0x529c <setLeftSpeed>
								demoStartTime = getTime100MicroSec();
    1a8c:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
    1a90:	60 93 64 04 	sts	0x0464, r22
    1a94:	70 93 65 04 	sts	0x0465, r23
    1a98:	80 93 66 04 	sts	0x0466, r24
    1a9c:	90 93 67 04 	sts	0x0467, r25
								demoState = 4;
    1aa0:	84 e0       	ldi	r24, 0x04	; 4
    1aa2:	80 93 60 04 	sts	0x0460, r24
								break;
    1aa6:	0c 94 45 02 	jmp	0x48a	; 0x48a <main+0x2ae>
										chargeContact = 0;
										demoState = 1;
										break;
									}
								} else {
									outOfLine = 0;
    1aaa:	10 92 62 04 	sts	0x0462, r1
    1aae:	9d cd       	rjmp	.-1222   	; 0x15ea <main+0x140e>
					if(rgbState == 0) {
						pwm_red = 254;
						pwm_green = 255;
						pwm_blue = 255;
						rgbState = 1;
					} else if(rgbState == 1) {
    1ab0:	91 30       	cpi	r25, 0x01	; 1
    1ab2:	09 f4       	brne	.+2      	; 0x1ab6 <main+0x18da>
    1ab4:	13 c1       	rjmp	.+550    	; 0x1cdc <main+0x1b00>
						pwm_red = 255;
						pwm_green = 254;
						pwm_blue = 255;
						rgbState = 2;
					} else if(rgbState == 2) {
    1ab6:	92 30       	cpi	r25, 0x02	; 2
    1ab8:	11 f0       	breq	.+4      	; 0x1abe <main+0x18e2>
    1aba:	0c 94 9b 03 	jmp	0x736	; 0x736 <main+0x55a>
						pwm_red = 255;
    1abe:	10 93 0c 02 	sts	0x020C, r17
						pwm_green = 255;
    1ac2:	10 93 0d 02 	sts	0x020D, r17
						pwm_blue = 254;
    1ac6:	4e ef       	ldi	r20, 0xFE	; 254
    1ac8:	40 93 0e 02 	sts	0x020E, r20
						rgbState = 0;
    1acc:	10 92 2c 03 	sts	0x032C, r1
    1ad0:	0c 94 9b 03 	jmp	0x736	; 0x736 <main+0x55a>
								//outOfLine++;
								//if(outOfLine > 250) {
								//	demoState = 1;
								//}
							} else {
								setRightSpeed(15);
    1ad4:	8f e0       	ldi	r24, 0x0F	; 15
    1ad6:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <setRightSpeed>
								setLeftSpeed(15);
    1ada:	8f e0       	ldi	r24, 0x0F	; 15
    1adc:	0e 94 4e 29 	call	0x529c	; 0x529c <setLeftSpeed>
    1ae0:	0c 94 45 02 	jmp	0x48a	; 0x48a <main+0x2ae>
						if(irCommDataSent()==1) {
							angleDegEncode = (unsigned char)((float)angleDeg*0.7084);
							irCommSendData(angleDegEncode);
						}
						if(irCommDataAvailable()==1) {
							demoStartTime = getTime100MicroSec();
    1ae4:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
    1ae8:	60 93 64 04 	sts	0x0464, r22
    1aec:	70 93 65 04 	sts	0x0465, r23
    1af0:	80 93 66 04 	sts	0x0466, r24
    1af4:	90 93 67 04 	sts	0x0467, r25
							irCommLastData = irCommReadData();
    1af8:	0e 94 66 50 	call	0xa0cc	; 0xa0cc <irCommReadData>
    1afc:	90 e0       	ldi	r25, 0x00	; 0
							irCommLastData = (int)((float)irCommLastData*1.411);
    1afe:	9c 01       	movw	r18, r24
    1b00:	b9 01       	movw	r22, r18
    1b02:	88 27       	eor	r24, r24
    1b04:	77 fd       	sbrc	r23, 7
    1b06:	80 95       	com	r24
    1b08:	98 2f       	mov	r25, r24
    1b0a:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <__floatsisf>
    1b0e:	26 ea       	ldi	r18, 0xA6	; 166
    1b10:	3b e9       	ldi	r19, 0x9B	; 155
    1b12:	44 eb       	ldi	r20, 0xB4	; 180
    1b14:	5f e3       	ldi	r21, 0x3F	; 63
    1b16:	0e 94 00 53 	call	0xa600	; 0xa600 <__mulsf3>
    1b1a:	0e 94 b4 51 	call	0xa368	; 0xa368 <__fixsfsi>
    1b1e:	70 93 e5 04 	sts	0x04E5, r23
    1b22:	60 93 e4 04 	sts	0x04E4, r22
							irCommLastSensor = irCommReceivingSensor();	
    1b26:	0e 94 6b 50 	call	0xa0d6	; 0xa0d6 <irCommReceivingSensor>
    1b2a:	80 93 18 02 	sts	0x0218, r24
							disableObstacleAvoidance();										
    1b2e:	0e 94 65 3d 	call	0x7aca	; 0x7aca <disableObstacleAvoidance>
							angleDeg = getBearing(irCommLastSensor);
    1b32:	80 91 18 02 	lds	r24, 0x0218
    1b36:	0e 94 6e 50 	call	0xa0dc	; 0xa0dc <getBearing>
    1b3a:	90 93 e7 04 	sts	0x04E7, r25
    1b3e:	80 93 e6 04 	sts	0x04E6, r24
							if(angleDeg < 0) {
    1b42:	97 fd       	sbrc	r25, 7
    1b44:	d7 c0       	rjmp	.+430    	; 0x1cf4 <main+0x1b18>
								angleDeg += 360;
							}
							angleError = angleDeg - irCommLastData;
    1b46:	20 91 e4 04 	lds	r18, 0x04E4
    1b4a:	30 91 e5 04 	lds	r19, 0x04E5
    1b4e:	44 eb       	ldi	r20, 0xB4	; 180
    1b50:	50 e0       	ldi	r21, 0x00	; 0
    1b52:	42 1b       	sub	r20, r18
    1b54:	53 0b       	sbc	r21, r19
    1b56:	9a 01       	movw	r18, r20
							angleError += 180;
    1b58:	28 0f       	add	r18, r24
    1b5a:	39 1f       	adc	r19, r25
    1b5c:	30 93 e9 04 	sts	0x04E9, r19
    1b60:	20 93 e8 04 	sts	0x04E8, r18
							if(angleError > 180) {
    1b64:	25 3b       	cpi	r18, 0xB5	; 181
    1b66:	31 05       	cpc	r19, r1
    1b68:	34 f0       	brlt	.+12     	; 0x1b76 <main+0x199a>
								angleError -= 360;
    1b6a:	28 56       	subi	r18, 0x68	; 104
    1b6c:	31 40       	sbci	r19, 0x01	; 1
    1b6e:	30 93 e9 04 	sts	0x04E9, r19
    1b72:	20 93 e8 04 	sts	0x04E8, r18
							}
							if(angleError < -180) {
    1b76:	80 91 e8 04 	lds	r24, 0x04E8
    1b7a:	90 91 e9 04 	lds	r25, 0x04E9
    1b7e:	5f ef       	ldi	r21, 0xFF	; 255
    1b80:	8c 34       	cpi	r24, 0x4C	; 76
    1b82:	95 07       	cpc	r25, r21
    1b84:	34 f4       	brge	.+12     	; 0x1b92 <main+0x19b6>
								angleError += 360;
    1b86:	88 59       	subi	r24, 0x98	; 152
    1b88:	9e 4f       	sbci	r25, 0xFE	; 254
    1b8a:	90 93 e9 04 	sts	0x04E9, r25
    1b8e:	80 93 e8 04 	sts	0x04E8, r24
							}
							if(abs(angleError) < 10) {
    1b92:	09 96       	adiw	r24, 0x09	; 9
    1b94:	83 31       	cpi	r24, 0x13	; 19
    1b96:	91 05       	cpc	r25, r1
    1b98:	08 f0       	brcs	.+2      	; 0x1b9c <main+0x19c0>
    1b9a:	85 c0       	rjmp	.+266    	; 0x1ca6 <main+0x1aca>
								setLeftSpeed(0);
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
    1b9e:	0e 94 4e 29 	call	0x529c	; 0x529c <setLeftSpeed>
								setRightSpeed(0);
    1ba2:	80 e0       	ldi	r24, 0x00	; 0
    1ba4:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <setRightSpeed>
    1ba8:	b0 cc       	rjmp	.-1696   	; 0x150a <main+0x132e>
						break;

					case 2:
						irCommTasks();
						if(irCommDataSent()==1) {
							angleDegEncode = (unsigned char)((float)angleDeg*0.7084);
    1baa:	60 91 e6 04 	lds	r22, 0x04E6
    1bae:	70 91 e7 04 	lds	r23, 0x04E7
    1bb2:	88 27       	eor	r24, r24
    1bb4:	77 fd       	sbrc	r23, 7
    1bb6:	80 95       	com	r24
    1bb8:	98 2f       	mov	r25, r24
    1bba:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <__floatsisf>
    1bbe:	24 eb       	ldi	r18, 0xB4	; 180
    1bc0:	39 e5       	ldi	r19, 0x59	; 89
    1bc2:	45 e3       	ldi	r20, 0x35	; 53
    1bc4:	5f e3       	ldi	r21, 0x3F	; 63
    1bc6:	0e 94 00 53 	call	0xa600	; 0xa600 <__mulsf3>
    1bca:	0e 94 b9 51 	call	0xa372	; 0xa372 <__fixunssfsi>
    1bce:	86 2f       	mov	r24, r22
    1bd0:	60 93 ea 04 	sts	0x04EA, r22
							irCommSendData(angleDegEncode);
    1bd4:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <irCommSendData>
    1bd8:	93 cc       	rjmp	.-1754   	; 0x1500 <main+0x1324>
						break;

					case 2:						
						irCommTasks();
						if(irCommDataSent()==1) {
							irCommSendData(0xAA);
    1bda:	8a ea       	ldi	r24, 0xAA	; 170
    1bdc:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <irCommSendData>
    1be0:	29 ce       	rjmp	.-942    	; 0x1834 <main+0x1658>
							//}

							if(irCommRxByteExpected<255) {
								irCommRxByteExpected++;
							} else {
								irCommRxByteExpected = 0;
    1be2:	10 92 15 05 	sts	0x0515, r1
    1be6:	80 91 5c 04 	lds	r24, 0x045C
    1bea:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <main+0x110>
						}
						break;

					case 3:
						irCommTasks();
						switch(i) {	// receiving sensor
    1bee:	a6 30       	cpi	r26, 0x06	; 6
    1bf0:	b1 05       	cpc	r27, r1
    1bf2:	09 f1       	breq	.+66     	; 0x1c36 <main+0x1a5a>
    1bf4:	a7 30       	cpi	r26, 0x07	; 7
    1bf6:	b1 05       	cpc	r27, r1
    1bf8:	a9 f0       	breq	.+42     	; 0x1c24 <main+0x1a48>
								break;
							case 7:
								targetAngle = 0.785;
								break;
						}
						if(targetAngle < 0.0) {
    1bfa:	6d 81       	ldd	r22, Y+5	; 0x05
    1bfc:	7e 81       	ldd	r23, Y+6	; 0x06
    1bfe:	8f 81       	ldd	r24, Y+7	; 0x07
    1c00:	98 85       	ldd	r25, Y+8	; 0x08
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	a9 01       	movw	r20, r18
    1c08:	0e 94 45 51 	call	0xa28a	; 0xa28a <__cmpsf2>
    1c0c:	87 ff       	sbrs	r24, 7
    1c0e:	24 cf       	rjmp	.-440    	; 0x1a58 <main+0x187c>
    1c10:	49 cd       	rjmp	.-1390   	; 0x16a4 <main+0x14c8>
								break;
							case 4:
								targetAngle = 3.14;
								break;
							case 5:
								targetAngle = 2.356;
    1c12:	24 eb       	ldi	r18, 0xB4	; 180
    1c14:	38 ec       	ldi	r19, 0xC8	; 200
    1c16:	46 e1       	ldi	r20, 0x16	; 22
    1c18:	50 e4       	ldi	r21, 0x40	; 64
    1c1a:	2d 83       	std	Y+5, r18	; 0x05
    1c1c:	3e 83       	std	Y+6, r19	; 0x06
    1c1e:	4f 83       	std	Y+7, r20	; 0x07
    1c20:	58 87       	std	Y+8, r21	; 0x08
    1c22:	1a cf       	rjmp	.-460    	; 0x1a58 <main+0x187c>
								break;
							case 6:
								targetAngle = 1.57;
								break;
							case 7:
								targetAngle = 0.785;
    1c24:	83 ec       	ldi	r24, 0xC3	; 195
    1c26:	95 ef       	ldi	r25, 0xF5	; 245
    1c28:	a8 e4       	ldi	r26, 0x48	; 72
    1c2a:	bf e3       	ldi	r27, 0x3F	; 63
    1c2c:	8d 83       	std	Y+5, r24	; 0x05
    1c2e:	9e 83       	std	Y+6, r25	; 0x06
    1c30:	af 83       	std	Y+7, r26	; 0x07
    1c32:	b8 87       	std	Y+8, r27	; 0x08
								break;
    1c34:	11 cf       	rjmp	.-478    	; 0x1a58 <main+0x187c>
								break;
							case 5:
								targetAngle = 2.356;
								break;
							case 6:
								targetAngle = 1.57;
    1c36:	23 ec       	ldi	r18, 0xC3	; 195
    1c38:	35 ef       	ldi	r19, 0xF5	; 245
    1c3a:	48 ec       	ldi	r20, 0xC8	; 200
    1c3c:	5f e3       	ldi	r21, 0x3F	; 63
    1c3e:	2d 83       	std	Y+5, r18	; 0x05
    1c40:	3e 83       	std	Y+6, r19	; 0x06
    1c42:	4f 83       	std	Y+7, r20	; 0x07
    1c44:	58 87       	std	Y+8, r21	; 0x08
								break;
    1c46:	08 cf       	rjmp	.-496    	; 0x1a58 <main+0x187c>
								break;
							case 2:
								targetAngle = -1.57;
								break;
							case 3:
								targetAngle = -2.356;
    1c48:	24 eb       	ldi	r18, 0xB4	; 180
    1c4a:	38 ec       	ldi	r19, 0xC8	; 200
    1c4c:	46 e1       	ldi	r20, 0x16	; 22
    1c4e:	50 ec       	ldi	r21, 0xC0	; 192
    1c50:	2d 83       	std	Y+5, r18	; 0x05
    1c52:	3e 83       	std	Y+6, r19	; 0x06
    1c54:	4f 83       	std	Y+7, r20	; 0x07
    1c56:	58 87       	std	Y+8, r21	; 0x08
    1c58:	25 cd       	rjmp	.-1462   	; 0x16a4 <main+0x14c8>

					case 3:
						irCommTasks();
						switch(i) {	// receiving sensor
							case 0:
								targetAngle = 0.0;
    1c5a:	80 e0       	ldi	r24, 0x00	; 0
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	dc 01       	movw	r26, r24
    1c60:	8d 83       	std	Y+5, r24	; 0x05
    1c62:	9e 83       	std	Y+6, r25	; 0x06
    1c64:	af 83       	std	Y+7, r26	; 0x07
    1c66:	b8 87       	std	Y+8, r27	; 0x08
    1c68:	f7 ce       	rjmp	.-530    	; 0x1a58 <main+0x187c>
								break;
							case 1:
								targetAngle = -0.785;
    1c6a:	83 ec       	ldi	r24, 0xC3	; 195
    1c6c:	95 ef       	ldi	r25, 0xF5	; 245
    1c6e:	a8 e4       	ldi	r26, 0x48	; 72
    1c70:	bf eb       	ldi	r27, 0xBF	; 191
    1c72:	8d 83       	std	Y+5, r24	; 0x05
    1c74:	9e 83       	std	Y+6, r25	; 0x06
    1c76:	af 83       	std	Y+7, r26	; 0x07
    1c78:	b8 87       	std	Y+8, r27	; 0x08
    1c7a:	14 cd       	rjmp	.-1496   	; 0x16a4 <main+0x14c8>

							if(CHARGE_ON) {
								outOfLine = 0;
								chargeContact++;
								if(chargeContact > 20) {
									setLeftSpeed(0);
    1c7c:	80 e0       	ldi	r24, 0x00	; 0
    1c7e:	0e 94 4e 29 	call	0x529c	; 0x529c <setLeftSpeed>
									setRightSpeed(0);
    1c82:	80 e0       	ldi	r24, 0x00	; 0
    1c84:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <setRightSpeed>
									demoStartTime = getTime100MicroSec();
    1c88:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
    1c8c:	60 93 64 04 	sts	0x0464, r22
    1c90:	70 93 65 04 	sts	0x0465, r23
    1c94:	80 93 66 04 	sts	0x0466, r24
    1c98:	90 93 67 04 	sts	0x0467, r25
									demoState = 3;
    1c9c:	93 e0       	ldi	r25, 0x03	; 3
    1c9e:	90 93 60 04 	sts	0x0460, r25
									break;
    1ca2:	0c 94 45 02 	jmp	0x48a	; 0x48a <main+0x2ae>
							}
							if(abs(angleError) < 10) {
								setLeftSpeed(0);
								setRightSpeed(0);
							} else {
								resetOdometry();
    1ca6:	0e 94 4c 21 	call	0x4298	; 0x4298 <resetOdometry>
								if(angleError > 0) {	// turn left
    1caa:	80 91 e8 04 	lds	r24, 0x04E8
    1cae:	90 91 e9 04 	lds	r25, 0x04E9
    1cb2:	18 16       	cp	r1, r24
    1cb4:	19 06       	cpc	r1, r25
    1cb6:	ac f5       	brge	.+106    	; 0x1d22 <main+0x1b46>
									setLeftSpeed(-7);
    1cb8:	89 ef       	ldi	r24, 0xF9	; 249
    1cba:	0e 94 4e 29 	call	0x529c	; 0x529c <setLeftSpeed>
									setRightSpeed(7);
    1cbe:	87 e0       	ldi	r24, 0x07	; 7
    1cc0:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <setRightSpeed>
									targetAngle = 0.09;	// about -10 degrees
									demoState = 4;
    1cc4:	64 e0       	ldi	r22, 0x04	; 4
    1cc6:	60 93 60 04 	sts	0x0460, r22
							} else {
								resetOdometry();
								if(angleError > 0) {	// turn left
									setLeftSpeed(-7);
									setRightSpeed(7);
									targetAngle = 0.09;	// about -10 degrees
    1cca:	8c ee       	ldi	r24, 0xEC	; 236
    1ccc:	91 e5       	ldi	r25, 0x51	; 81
    1cce:	a8 eb       	ldi	r26, 0xB8	; 184
    1cd0:	bd e3       	ldi	r27, 0x3D	; 61
    1cd2:	8d 83       	std	Y+5, r24	; 0x05
    1cd4:	9e 83       	std	Y+6, r25	; 0x06
    1cd6:	af 83       	std	Y+7, r26	; 0x07
    1cd8:	b8 87       	std	Y+8, r27	; 0x08
    1cda:	17 cc       	rjmp	.-2002   	; 0x150a <main+0x132e>
						pwm_red = 254;
						pwm_green = 255;
						pwm_blue = 255;
						rgbState = 1;
					} else if(rgbState == 1) {
						pwm_red = 255;
    1cdc:	10 93 0c 02 	sts	0x020C, r17
						pwm_green = 254;
    1ce0:	2e ef       	ldi	r18, 0xFE	; 254
    1ce2:	20 93 0d 02 	sts	0x020D, r18
						pwm_blue = 255;
    1ce6:	10 93 0e 02 	sts	0x020E, r17
						rgbState = 2;
    1cea:	32 e0       	ldi	r19, 0x02	; 2
    1cec:	30 93 2c 03 	sts	0x032C, r19
    1cf0:	0c 94 9b 03 	jmp	0x736	; 0x736 <main+0x55a>
							irCommLastData = (int)((float)irCommLastData*1.411);
							irCommLastSensor = irCommReceivingSensor();	
							disableObstacleAvoidance();										
							angleDeg = getBearing(irCommLastSensor);
							if(angleDeg < 0) {
								angleDeg += 360;
    1cf4:	88 59       	subi	r24, 0x98	; 152
    1cf6:	9e 4f       	sbci	r25, 0xFE	; 254
    1cf8:	90 93 e7 04 	sts	0x04E7, r25
    1cfc:	80 93 e6 04 	sts	0x04E6, r24
    1d00:	22 cf       	rjmp	.-444    	; 0x1b46 <main+0x196a>
							
							if(proximityResult[8]<LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR && proximityResult[11]>LINE_OUT_THR) {	// left ground is the only within the black line => turn left
								setLeftSpeed(-10);
								setRightSpeed(15);
							} else if(proximityResult[11]<LINE_OUT_THR && proximityResult[8]>LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {	// right ground is the only within the black line => turn right
								setLeftSpeed(15);
    1d02:	8f e0       	ldi	r24, 0x0F	; 15
    1d04:	0e 94 4e 29 	call	0x529c	; 0x529c <setLeftSpeed>
								setRightSpeed(-10);
    1d08:	86 ef       	ldi	r24, 0xF6	; 246
    1d0a:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <setRightSpeed>
    1d0e:	0c 94 45 02 	jmp	0x48a	; 0x48a <main+0x2ae>
									outOfLine = 0;
								}
							}
							
							if(proximityResult[8]<LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR && proximityResult[11]>LINE_OUT_THR) {	// left ground is the only within the black line => turn left
								setLeftSpeed(-10);
    1d12:	86 ef       	ldi	r24, 0xF6	; 246
    1d14:	0e 94 4e 29 	call	0x529c	; 0x529c <setLeftSpeed>
								setRightSpeed(15);
    1d18:	8f e0       	ldi	r24, 0x0F	; 15
    1d1a:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <setRightSpeed>
    1d1e:	0c 94 45 02 	jmp	0x48a	; 0x48a <main+0x2ae>
									setLeftSpeed(-7);
									setRightSpeed(7);
									targetAngle = 0.09;	// about -10 degrees
									demoState = 4;
								} else {	// turn right
									setLeftSpeed(7);
    1d22:	87 e0       	ldi	r24, 0x07	; 7
    1d24:	0e 94 4e 29 	call	0x529c	; 0x529c <setLeftSpeed>
									setRightSpeed(-7);
    1d28:	89 ef       	ldi	r24, 0xF9	; 249
    1d2a:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <setRightSpeed>
									targetAngle = -0.09;	// about 10 degrees
									demoState = 3;
    1d2e:	93 e0       	ldi	r25, 0x03	; 3
    1d30:	90 93 60 04 	sts	0x0460, r25
									targetAngle = 0.09;	// about -10 degrees
									demoState = 4;
								} else {	// turn right
									setLeftSpeed(7);
									setRightSpeed(-7);
									targetAngle = -0.09;	// about 10 degrees
    1d34:	2c ee       	ldi	r18, 0xEC	; 236
    1d36:	31 e5       	ldi	r19, 0x51	; 81
    1d38:	48 eb       	ldi	r20, 0xB8	; 184
    1d3a:	5d eb       	ldi	r21, 0xBD	; 189
    1d3c:	2d 83       	std	Y+5, r18	; 0x05
    1d3e:	3e 83       	std	Y+6, r19	; 0x06
    1d40:	4f 83       	std	Y+7, r20	; 0x07
    1d42:	58 87       	std	Y+8, r21	; 0x08
    1d44:	e2 cb       	rjmp	.-2108   	; 0x150a <main+0x132e>

00001d46 <SPI_WAIT>:
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	90 e0       	ldi	r25, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
    1d4a:	21 e0       	ldi	r18, 0x01	; 1
		}
	
		if(SPSR & _BV(SPIF)) {
    1d4c:	0d b4       	in	r0, 0x2d	; 45
    1d4e:	07 fc       	sbrc	r0, 7
    1d50:	0a c0       	rjmp	.+20     	; 0x1d66 <SPI_WAIT+0x20>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1d52:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
    1d54:	37 e2       	ldi	r19, 0x27	; 39
    1d56:	80 31       	cpi	r24, 0x10	; 16
    1d58:	93 07       	cpc	r25, r19
    1d5a:	c0 f3       	brcs	.-16     	; 0x1d4c <SPI_WAIT+0x6>
			spiCommError = 1;
    1d5c:	20 93 28 03 	sts	0x0328, r18
		}
	
		if(SPSR & _BV(SPIF)) {
    1d60:	0d b4       	in	r0, 0x2d	; 45
    1d62:	07 fe       	sbrs	r0, 7
    1d64:	f6 cf       	rjmp	.-20     	; 0x1d52 <SPI_WAIT+0xc>
			return;
		}
	}
}
    1d66:	08 95       	ret

00001d68 <initSPI>:

void initSPI() {

    SPI_DDR &= ~((1<<SPI_MOSI)|(1<<SPI_MISO)|(1<<SPI_SS)|(1<<SPI_SCK));
    1d68:	84 b1       	in	r24, 0x04	; 4
    1d6a:	80 7f       	andi	r24, 0xF0	; 240
    1d6c:	84 b9       	out	0x04, r24	; 4
    // Define the following pins as output
    SPI_DDR |= ((1<<SPI_MOSI)|(1<<SPI_SS)|(1<<SPI_SCK));
    1d6e:	84 b1       	in	r24, 0x04	; 4
    1d70:	87 60       	ori	r24, 0x07	; 7
    1d72:	84 b9       	out	0x04, r24	; 4

    
    SPCR = ((1<<SPE)|               // SPI Enable
    1d74:	80 e5       	ldi	r24, 0x50	; 80
    1d76:	8c bd       	out	0x2c, r24	; 44
            (1<<MSTR)|              // 1:Master/ 0:Slave
            (0<<SPR1)|(0<<SPR0)|    // SPI Clock Rate => default 1/4 => 2 MHz
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR |= (1<<SPI2X);              // Double Clock Rate
    1d78:	8d b5       	in	r24, 0x2d	; 45
    1d7a:	81 60       	ori	r24, 0x01	; 1
    1d7c:	8d bd       	out	0x2d, r24	; 45

}
    1d7e:	08 95       	ret

00001d80 <closeSPI>:

void closeSPI() {

	SPCR = 0x00;
    1d80:	1c bc       	out	0x2c, r1	; 44
	SPSR = 0x00;
    1d82:	1d bc       	out	0x2d, r1	; 45
}
    1d84:	08 95       	ret

00001d86 <SPI_ReadWrite_Block>:

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1d86:	44 23       	and	r20, r20
    1d88:	09 f1       	breq	.+66     	; 0x1dcc <SPI_ReadWrite_Block+0x46>
    1d8a:	a6 2f       	mov	r26, r22
    1d8c:	b7 2f       	mov	r27, r23
    1d8e:	e8 2f       	mov	r30, r24
    1d90:	f9 2f       	mov	r31, r25
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
    1d92:	91 e0       	ldi	r25, 0x01	; 1
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
    1d94:	21 91       	ld	r18, Z+
    1d96:	2e bd       	out	0x2e, r18	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1d98:	21 e0       	ldi	r18, 0x01	; 1
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
    1d9c:	0d b4       	in	r0, 0x2d	; 45
    1d9e:	07 fc       	sbrc	r0, 7
    1da0:	0b c0       	rjmp	.+22     	; 0x1db8 <SPI_ReadWrite_Block+0x32>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1da2:	2f 5f       	subi	r18, 0xFF	; 255
    1da4:	3f 4f       	sbci	r19, 0xFF	; 255
		if(timeout>=10000) {
    1da6:	57 e2       	ldi	r21, 0x27	; 39
    1da8:	20 31       	cpi	r18, 0x10	; 16
    1daa:	35 07       	cpc	r19, r21
    1dac:	b8 f3       	brcs	.-18     	; 0x1d9c <SPI_ReadWrite_Block+0x16>
			spiCommError = 1;
    1dae:	90 93 28 03 	sts	0x0328, r25
		}
	
		if(SPSR & _BV(SPIF)) {
    1db2:	0d b4       	in	r0, 0x2d	; 45
    1db4:	07 fe       	sbrs	r0, 7
    1db6:	f5 cf       	rjmp	.-22     	; 0x1da2 <SPI_ReadWrite_Block+0x1c>
void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
          SPI_WAIT();
		  if(spiCommError) {
    1db8:	20 91 28 03 	lds	r18, 0x0328
    1dbc:	22 23       	and	r18, r18
    1dbe:	31 f4       	brne	.+12     	; 0x1dcc <SPI_ReadWrite_Block+0x46>
			return;
		  }
          buffer[i] = SPDR;
    1dc0:	2e b5       	in	r18, 0x2e	; 46
    1dc2:	2d 93       	st	X+, r18
	SPSR = 0x00;
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1dc4:	2e 2f       	mov	r18, r30
    1dc6:	28 1b       	sub	r18, r24
    1dc8:	24 17       	cp	r18, r20
    1dca:	20 f3       	brcs	.-56     	; 0x1d94 <SPI_ReadWrite_Block+0xe>
    1dcc:	08 95       	ret

00001dce <SPI_Write_Block>:
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1dce:	66 23       	and	r22, r22
    1dd0:	e9 f0       	breq	.+58     	; 0x1e0c <SPI_Write_Block+0x3e>
    1dd2:	e8 2f       	mov	r30, r24
    1dd4:	f9 2f       	mov	r31, r25
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
    1dd6:	91 e0       	ldi	r25, 0x01	; 1
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
    1dd8:	21 91       	ld	r18, Z+
    1dda:	2e bd       	out	0x2e, r18	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1ddc:	21 e0       	ldi	r18, 0x01	; 1
    1dde:	30 e0       	ldi	r19, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
    1de0:	0d b4       	in	r0, 0x2d	; 45
    1de2:	07 fc       	sbrc	r0, 7
    1de4:	0b c0       	rjmp	.+22     	; 0x1dfc <SPI_Write_Block+0x2e>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1de6:	2f 5f       	subi	r18, 0xFF	; 255
    1de8:	3f 4f       	sbci	r19, 0xFF	; 255
		if(timeout>=10000) {
    1dea:	47 e2       	ldi	r20, 0x27	; 39
    1dec:	20 31       	cpi	r18, 0x10	; 16
    1dee:	34 07       	cpc	r19, r20
    1df0:	b8 f3       	brcs	.-18     	; 0x1de0 <SPI_Write_Block+0x12>
			spiCommError = 1;
    1df2:	90 93 28 03 	sts	0x0328, r25
		}
	
		if(SPSR & _BV(SPIF)) {
    1df6:	0d b4       	in	r0, 0x2d	; 45
    1df8:	07 fe       	sbrs	r0, 7
    1dfa:	f5 cf       	rjmp	.-22     	; 0x1de6 <SPI_Write_Block+0x18>
void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
          SPI_WAIT();
		  if(spiCommError) {
    1dfc:	20 91 28 03 	lds	r18, 0x0328
    1e00:	22 23       	and	r18, r18
    1e02:	21 f4       	brne	.+8      	; 0x1e0c <SPI_Write_Block+0x3e>
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1e04:	2e 2f       	mov	r18, r30
    1e06:	28 1b       	sub	r18, r24
    1e08:	26 17       	cp	r18, r22
    1e0a:	30 f3       	brcs	.-52     	; 0x1dd8 <SPI_Write_Block+0xa>
    1e0c:	08 95       	ret

00001e0e <SPI_Write_Byte>:
    }

}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    1e0e:	8e bd       	out	0x2e, r24	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	90 e0       	ldi	r25, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
    1e14:	21 e0       	ldi	r18, 0x01	; 1
		}
	
		if(SPSR & _BV(SPIF)) {
    1e16:	0d b4       	in	r0, 0x2d	; 45
    1e18:	07 fc       	sbrc	r0, 7
    1e1a:	0a c0       	rjmp	.+20     	; 0x1e30 <SPI_Write_Byte+0x22>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1e1c:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
    1e1e:	37 e2       	ldi	r19, 0x27	; 39
    1e20:	80 31       	cpi	r24, 0x10	; 16
    1e22:	93 07       	cpc	r25, r19
    1e24:	c0 f3       	brcs	.-16     	; 0x1e16 <SPI_Write_Byte+0x8>
			spiCommError = 1;
    1e26:	20 93 28 03 	sts	0x0328, r18
		}
	
		if(SPSR & _BV(SPIF)) {
    1e2a:	0d b4       	in	r0, 0x2d	; 45
    1e2c:	07 fe       	sbrs	r0, 7
    1e2e:	f6 cf       	rjmp	.-20     	; 0x1e1c <SPI_Write_Byte+0xe>
}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    SPI_WAIT();
    return SPDR;
    1e30:	8e b5       	in	r24, 0x2e	; 46
}
    1e32:	08 95       	ret

00001e34 <mirf_config>:


void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
    1e34:	0f 93       	push	r16
    1e36:	1f 93       	push	r17
    1e38:	df 93       	push	r29
    1e3a:	cf 93       	push	r28
    1e3c:	00 d0       	rcall	.+0      	; 0x1e3e <mirf_config+0xa>
    1e3e:	cd b7       	in	r28, 0x3d	; 61
    1e40:	de b7       	in	r29, 0x3e	; 62
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1e42:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1e44:	80 e2       	ldi	r24, 0x20	; 32
    1e46:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1e4a:	8d e0       	ldi	r24, 0x0D	; 13
    1e4c:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    mirf_CSN_hi;
    1e50:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1e52:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1e54:	83 e2       	ldi	r24, 0x23	; 35
    1e56:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1e5a:	81 e0       	ldi	r24, 0x01	; 1
    1e5c:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    mirf_CSN_hi;
    1e60:	28 9a       	sbi	0x05, 0	; 5

	// address width
	mirf_config_register(SETUP_AW, 0x01);

	// tx address
	temp[0] = (rfAddress>>8)&0xFF;
    1e62:	80 91 25 03 	lds	r24, 0x0325
    1e66:	90 91 26 03 	lds	r25, 0x0326
    1e6a:	99 83       	std	Y+1, r25	; 0x01
	temp[1] = rfAddress & 0xFF;
    1e6c:	8a 83       	std	Y+2, r24	; 0x02
	temp[2] = 0x00;
    1e6e:	1b 82       	std	Y+3, r1	; 0x03
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1e70:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1e72:	80 e3       	ldi	r24, 0x30	; 48
    1e74:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1e78:	8e 01       	movw	r16, r28
    1e7a:	0f 5f       	subi	r16, 0xFF	; 255
    1e7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e7e:	c8 01       	movw	r24, r16
    1e80:	63 e0       	ldi	r22, 0x03	; 3
    1e82:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <SPI_Write_Block>
    mirf_CSN_hi;
    1e86:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1e88:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1e8a:	8a e2       	ldi	r24, 0x2A	; 42
    1e8c:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1e90:	c8 01       	movw	r24, r16
    1e92:	63 e0       	ldi	r22, 0x03	; 3
    1e94:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <SPI_Write_Block>
    mirf_CSN_hi;
    1e98:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1e9a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1e9c:	81 e2       	ldi	r24, 0x21	; 33
    1e9e:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1ea2:	81 e0       	ldi	r24, 0x01	; 1
    1ea4:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    mirf_CSN_hi;
    1ea8:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1eaa:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1eac:	82 e2       	ldi	r24, 0x22	; 34
    1eae:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    mirf_CSN_hi;
    1eb8:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1eba:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1ebc:	84 e2       	ldi	r24, 0x24	; 36
    1ebe:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1ec2:	82 e1       	ldi	r24, 0x12	; 18
    1ec4:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    mirf_CSN_hi;
    1ec8:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1eca:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1ecc:	85 e2       	ldi	r24, 0x25	; 37
    1ece:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1ed2:	88 e2       	ldi	r24, 0x28	; 40
    1ed4:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    mirf_CSN_hi;
    1ed8:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1eda:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1edc:	81 e3       	ldi	r24, 0x31	; 49
    1ede:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1ee2:	8d e0       	ldi	r24, 0x0D	; 13
    1ee4:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    mirf_CSN_hi;
    1ee8:	28 9a       	sbi	0x05, 0	; 5

	// RX payload size; it isn't needed because the dynamic payload length is activated for ACK+PAYLOAD feature
    mirf_config_register(RX_PW_P0, PAYLOAD_SIZE);

	// enable extra features
    mirf_CSN_lo;
    1eea:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_ACTIVATE);
    1eec:	80 e5       	ldi	r24, 0x50	; 80
    1eee:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    SPI_Write_Byte(0x73);
    1ef2:	83 e7       	ldi	r24, 0x73	; 115
    1ef4:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    mirf_CSN_hi;
    1ef8:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1efa:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1efc:	8c e3       	ldi	r24, 0x3C	; 60
    1efe:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    mirf_CSN_hi;
    1f08:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1f0a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1f0c:	8d e3       	ldi	r24, 0x3D	; 61
    1f0e:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1f12:	86 e0       	ldi	r24, 0x06	; 6
    1f14:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    mirf_CSN_hi;
    1f18:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1f1a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1f1c:	80 e2       	ldi	r24, 0x20	; 32
    1f1e:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1f22:	8f e0       	ldi	r24, 0x0F	; 15
    1f24:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    mirf_CSN_hi;
    1f28:	28 9a       	sbi	0x05, 0	; 5

    // Start receiver 
    //PTX = 0;        // Start in receiving mode
    //RX_POWERUP;     // Power up in receiving mode
    //mirf_CE_hi;     // Listening for pakets
}
    1f2a:	0f 90       	pop	r0
    1f2c:	0f 90       	pop	r0
    1f2e:	0f 90       	pop	r0
    1f30:	cf 91       	pop	r28
    1f32:	df 91       	pop	r29
    1f34:	1f 91       	pop	r17
    1f36:	0f 91       	pop	r16
    1f38:	08 95       	ret

00001f3a <mirf_init>:
// Initializes pins as interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    //DDRB |= ((1<<CSN)|(1<<CE));
    mirf_CE_hi;
    1f3a:	2c 9a       	sbi	0x05, 4	; 5
    mirf_CSN_hi;
    1f3c:	28 9a       	sbi	0x05, 0	; 5

	mirf_config();
    1f3e:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <mirf_config>
}
    1f42:	08 95       	ret

00001f44 <mirf_set_RADDR>:
    //mirf_CE_hi;     // Listening for pakets
}

void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    1f44:	cf 93       	push	r28
    1f46:	df 93       	push	r29
    1f48:	ec 01       	movw	r28, r24
    mirf_CE_lo;
    1f4a:	2c 98       	cbi	0x05, 4	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1f4c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1f4e:	8a e2       	ldi	r24, 0x2A	; 42
    1f50:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1f54:	ce 01       	movw	r24, r28
    1f56:	65 e0       	ldi	r22, 0x05	; 5
    1f58:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <SPI_Write_Block>
    mirf_CSN_hi;
    1f5c:	28 9a       	sbi	0x05, 0	; 5
void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    mirf_CE_lo;
    mirf_write_register(RX_ADDR_P0,adr,5);
    mirf_CE_hi;
    1f5e:	2c 9a       	sbi	0x05, 4	; 5
}
    1f60:	df 91       	pop	r29
    1f62:	cf 91       	pop	r28
    1f64:	08 95       	ret

00001f66 <mirf_set_TADDR>:

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
    1f66:	cf 93       	push	r28
    1f68:	df 93       	push	r29
    1f6a:	ec 01       	movw	r28, r24
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1f6c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1f6e:	80 e3       	ldi	r24, 0x30	; 48
    1f70:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1f74:	ce 01       	movw	r24, r28
    1f76:	65 e0       	ldi	r22, 0x05	; 5
    1f78:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <SPI_Write_Block>
    mirf_CSN_hi;
    1f7c:	28 9a       	sbi	0x05, 0	; 5

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
	mirf_write_register(TX_ADDR, adr,5);
}
    1f7e:	df 91       	pop	r29
    1f80:	cf 91       	pop	r28
    1f82:	08 95       	ret

00001f84 <mirf_data_ready>:
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
    1f84:	80 91 2e 05 	lds	r24, 0x052E
    1f88:	88 23       	and	r24, r24
    1f8a:	11 f0       	breq	.+4      	; 0x1f90 <mirf_data_ready+0xc>
    1f8c:	80 e0       	ldi	r24, 0x00	; 0
    mirf_CSN_lo;                                // Pull down chip select
    status = SPI_Write_Byte(NOP);               // Read status register
    mirf_CSN_hi;                                // Pull up chip select
    return status & (1<<RX_DR);

}
    1f8e:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    1f90:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
    1f92:	8f ef       	ldi	r24, 0xFF	; 255
    1f94:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
    1f98:	28 9a       	sbi	0x05, 0	; 5
    return status & (1<<RX_DR);
    1f9a:	80 74       	andi	r24, 0x40	; 64
    1f9c:	08 95       	ret

00001f9e <rx_fifo_is_empty>:

}

uint8_t rx_fifo_is_empty() {
    1f9e:	df 93       	push	r29
    1fa0:	cf 93       	push	r28
    1fa2:	0f 92       	push	r0
    1fa4:	cd b7       	in	r28, 0x3d	; 61
    1fa6:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t fifo_status = 0;
    1fa8:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
    1faa:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    1fac:	87 e1       	ldi	r24, 0x17	; 23
    1fae:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    1fb2:	be 01       	movw	r22, r28
    1fb4:	6f 5f       	subi	r22, 0xFF	; 255
    1fb6:	7f 4f       	sbci	r23, 0xFF	; 255
    1fb8:	cb 01       	movw	r24, r22
    1fba:	41 e0       	ldi	r20, 0x01	; 1
    1fbc:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    1fc0:	28 9a       	sbi	0x05, 0	; 5
	
	uint8_t fifo_status = 0;

	mirf_read_register(FIFO_STATUS, &fifo_status, 1);
	
	return (uint8_t)(fifo_status&0x01);
    1fc2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fc4:	81 70       	andi	r24, 0x01	; 1
    1fc6:	0f 90       	pop	r0
    1fc8:	cf 91       	pop	r28
    1fca:	df 91       	pop	r29
    1fcc:	08 95       	ret

00001fce <flush_rx_fifo>:

void flush_rx_fifo() {

    mirf_CSN_lo;
    1fce:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
    1fd0:	82 ee       	ldi	r24, 0xE2	; 226
    1fd2:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    mirf_CSN_hi;
    1fd6:	28 9a       	sbi	0x05, 0	; 5

}
    1fd8:	08 95       	ret

00001fda <mirf_get_data>:

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    1fda:	cf 93       	push	r28
    1fdc:	df 93       	push	r29
    1fde:	ec 01       	movw	r28, r24
    mirf_CSN_lo;                               		// Pull down chip select
    1fe0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    1fe2:	81 e6       	ldi	r24, 0x61	; 97
    1fe4:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    1fe8:	ce 01       	movw	r24, r28
    1fea:	be 01       	movw	r22, r28
    1fec:	4d e0       	ldi	r20, 0x0D	; 13
    1fee:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
    1ff2:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1ff4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1ff6:	87 e2       	ldi	r24, 0x27	; 39
    1ff8:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1ffc:	80 e4       	ldi	r24, 0x40	; 64
    1ffe:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    mirf_CSN_hi;
    2002:	28 9a       	sbi	0x05, 0	; 5
    mirf_CSN_lo;                               		// Pull down chip select
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    mirf_CSN_hi;                               		// Pull up chip select
    mirf_config_register(STATUS,(1<<RX_DR));   		// Reset status register
}
    2004:	df 91       	pop	r29
    2006:	cf 91       	pop	r28
    2008:	08 95       	ret

0000200a <mirf_config_register>:

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    200a:	df 93       	push	r29
    200c:	cf 93       	push	r28
    200e:	0f 92       	push	r0
    2010:	cd b7       	in	r28, 0x3d	; 61
    2012:	de b7       	in	r29, 0x3e	; 62
    mirf_CSN_lo;
    2014:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2016:	8f 71       	andi	r24, 0x1F	; 31
    2018:	80 62       	ori	r24, 0x20	; 32
    201a:	69 83       	std	Y+1, r22	; 0x01
    201c:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    SPI_Write_Byte(value);
    2020:	69 81       	ldd	r22, Y+1	; 0x01
    2022:	86 2f       	mov	r24, r22
    2024:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    mirf_CSN_hi;
    2028:	28 9a       	sbi	0x05, 0	; 5
}
    202a:	0f 90       	pop	r0
    202c:	cf 91       	pop	r28
    202e:	df 91       	pop	r29
    2030:	08 95       	ret

00002032 <mirf_read_register>:

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    2032:	0f 93       	push	r16
    2034:	1f 93       	push	r17
    2036:	df 93       	push	r29
    2038:	cf 93       	push	r28
    203a:	0f 92       	push	r0
    203c:	cd b7       	in	r28, 0x3d	; 61
    203e:	de b7       	in	r29, 0x3e	; 62
    2040:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    2042:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    2044:	8f 71       	andi	r24, 0x1F	; 31
    2046:	49 83       	std	Y+1, r20	; 0x01
    2048:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    204c:	c8 01       	movw	r24, r16
    204e:	b8 01       	movw	r22, r16
    2050:	49 81       	ldd	r20, Y+1	; 0x01
    2052:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    2056:	28 9a       	sbi	0x05, 0	; 5
}
    2058:	0f 90       	pop	r0
    205a:	cf 91       	pop	r28
    205c:	df 91       	pop	r29
    205e:	1f 91       	pop	r17
    2060:	0f 91       	pop	r16
    2062:	08 95       	ret

00002064 <mirf_write_register>:

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    2064:	0f 93       	push	r16
    2066:	1f 93       	push	r17
    2068:	df 93       	push	r29
    206a:	cf 93       	push	r28
    206c:	0f 92       	push	r0
    206e:	cd b7       	in	r28, 0x3d	; 61
    2070:	de b7       	in	r29, 0x3e	; 62
    2072:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    2074:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2076:	8f 71       	andi	r24, 0x1F	; 31
    2078:	80 62       	ori	r24, 0x20	; 32
    207a:	49 83       	std	Y+1, r20	; 0x01
    207c:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    2080:	c8 01       	movw	r24, r16
    2082:	49 81       	ldd	r20, Y+1	; 0x01
    2084:	64 2f       	mov	r22, r20
    2086:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <SPI_Write_Block>
    mirf_CSN_hi;
    208a:	28 9a       	sbi	0x05, 0	; 5
}
    208c:	0f 90       	pop	r0
    208e:	cf 91       	pop	r28
    2090:	df 91       	pop	r29
    2092:	1f 91       	pop	r17
    2094:	0f 91       	pop	r16
    2096:	08 95       	ret

00002098 <mirf_send>:


void mirf_send(uint8_t * value, uint8_t len) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
    2098:	0f 93       	push	r16
    209a:	1f 93       	push	r17
    209c:	df 93       	push	r29
    209e:	cf 93       	push	r28
    20a0:	0f 92       	push	r0
    20a2:	cd b7       	in	r28, 0x3d	; 61
    20a4:	de b7       	in	r29, 0x3e	; 62
    20a6:	8c 01       	movw	r16, r24
    while (PTX) {}                  // Wait until last paket is send
    20a8:	80 91 2e 05 	lds	r24, 0x052E
    20ac:	88 23       	and	r24, r24
    20ae:	e1 f7       	brne	.-8      	; 0x20a8 <mirf_send+0x10>

    mirf_CE_lo;
    20b0:	2c 98       	cbi	0x05, 4	; 5

    PTX = 1;                        // Set to transmitter mode
    20b2:	81 e0       	ldi	r24, 0x01	; 1
    20b4:	80 93 2e 05 	sts	0x052E, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    20b8:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    20ba:	80 e2       	ldi	r24, 0x20	; 32
    20bc:	69 83       	std	Y+1, r22	; 0x01
    20be:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    SPI_Write_Byte(value);
    20c2:	8a e4       	ldi	r24, 0x4A	; 74
    20c4:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    mirf_CSN_hi;
    20c8:	28 9a       	sbi	0x05, 0	; 5
    mirf_CE_lo;

    PTX = 1;                        // Set to transmitter mode
    TX_POWERUP;                     // Power up
    
    mirf_CSN_lo;                    // Pull down chip select
    20ca:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( FLUSH_TX );     // Write cmd to flush tx fifo
    20cc:	81 ee       	ldi	r24, 0xE1	; 225
    20ce:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    mirf_CSN_hi;                    // Pull up chip select
    20d2:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CSN_lo;                    // Pull down chip select
    20d4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( W_TX_PAYLOAD ); // Write cmd to write payload
    20d6:	80 ea       	ldi	r24, 0xA0	; 160
    20d8:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    SPI_Write_Block(value,len);   // Write payload
    20dc:	c8 01       	movw	r24, r16
    20de:	69 81       	ldd	r22, Y+1	; 0x01
    20e0:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <SPI_Write_Block>
    mirf_CSN_hi;                    // Pull up chip select
    20e4:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CE_hi;                     // Start transmission
    20e6:	2c 9a       	sbi	0x05, 4	; 5
}
    20e8:	0f 90       	pop	r0
    20ea:	cf 91       	pop	r28
    20ec:	df 91       	pop	r29
    20ee:	1f 91       	pop	r17
    20f0:	0f 91       	pop	r16
    20f2:	08 95       	ret

000020f4 <writeAckPayload>:

void writeAckPayload(unsigned char *data, unsigned char size) {
    20f4:	ef 92       	push	r14
    20f6:	ff 92       	push	r15
    20f8:	0f 93       	push	r16
    20fa:	1f 93       	push	r17
    20fc:	df 93       	push	r29
    20fe:	cf 93       	push	r28
    2100:	0f 92       	push	r0
    2102:	cd b7       	in	r28, 0x3d	; 61
    2104:	de b7       	in	r29, 0x3e	; 62
    2106:	18 2f       	mov	r17, r24
    2108:	06 2f       	mov	r16, r22
	return pWidth;
}

void flushTxFifo() {

    mirf_CSN_lo;
    210a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    210c:	81 ee       	ldi	r24, 0xE1	; 225
    210e:	99 83       	std	Y+1, r25	; 0x01
    2110:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    mirf_CSN_hi;
    2114:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
    2116:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
    2118:	88 ea       	ldi	r24, 0xA8	; 168
    211a:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>

	for(k=0; k<size; k++) {
    211e:	99 81       	ldd	r25, Y+1	; 0x01
    2120:	00 23       	and	r16, r16
    2122:	61 f0       	breq	.+24     	; 0x213c <writeAckPayload+0x48>
    2124:	61 2f       	mov	r22, r17
    2126:	79 2f       	mov	r23, r25
    2128:	7b 01       	movw	r14, r22
		SPI_Write_Byte(data[k]);
    212a:	f7 01       	movw	r30, r14
    212c:	81 91       	ld	r24, Z+
    212e:	7f 01       	movw	r14, r30
    2130:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>

    mirf_CSN_lo;

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);

	for(k=0; k<size; k++) {
    2134:	8e 2d       	mov	r24, r14
    2136:	81 1b       	sub	r24, r17
    2138:	80 17       	cp	r24, r16
    213a:	b8 f3       	brcs	.-18     	; 0x212a <writeAckPayload+0x36>
		SPI_Write_Byte(data[k]);
	}	

    mirf_CSN_hi;
    213c:	28 9a       	sbi	0x05, 0	; 5


}
    213e:	0f 90       	pop	r0
    2140:	cf 91       	pop	r28
    2142:	df 91       	pop	r29
    2144:	1f 91       	pop	r17
    2146:	0f 91       	pop	r16
    2148:	ff 90       	pop	r15
    214a:	ef 90       	pop	r14
    214c:	08 95       	ret

0000214e <readPayloadWidthFromTopFifo>:

uint8_t readPayloadWidthFromTopFifo() {
	uint8_t pWidth = 0;

    mirf_CSN_lo;
    214e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_R_RX_PL_WID);
    2150:	80 e6       	ldi	r24, 0x60	; 96
    2152:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
	pWidth = SPI_Write_Byte(NOP); 	// not specified in the datasheet but the "NRF_R_RX_PL_WID" has a parameter,
    2156:	8f ef       	ldi	r24, 0xFF	; 255
    2158:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
									// we need to send a NOP to receive the actual payload size
    mirf_CSN_hi;
    215c:	28 9a       	sbi	0x05, 0	; 5
	
	return pWidth;
}
    215e:	08 95       	ret

00002160 <readPayloadWidthFromPipe0>:

uint8_t readPayloadWidthFromPipe0() {
    2160:	df 93       	push	r29
    2162:	cf 93       	push	r28
    2164:	0f 92       	push	r0
    2166:	cd b7       	in	r28, 0x3d	; 61
    2168:	de b7       	in	r29, 0x3e	; 62
	uint8_t pWidth = 0;
    216a:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
    216c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    216e:	81 e1       	ldi	r24, 0x11	; 17
    2170:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    2174:	be 01       	movw	r22, r28
    2176:	6f 5f       	subi	r22, 0xFF	; 255
    2178:	7f 4f       	sbci	r23, 0xFF	; 255
    217a:	cb 01       	movw	r24, r22
    217c:	41 e0       	ldi	r20, 0x01	; 1
    217e:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    2182:	28 9a       	sbi	0x05, 0	; 5
	uint8_t pWidth = 0;

	mirf_read_register(RX_PW_P0, &pWidth, 1);
	
	return pWidth;
}
    2184:	89 81       	ldd	r24, Y+1	; 0x01
    2186:	0f 90       	pop	r0
    2188:	cf 91       	pop	r28
    218a:	df 91       	pop	r29
    218c:	08 95       	ret

0000218e <flushTxFifo>:

void flushTxFifo() {

    mirf_CSN_lo;
    218e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    2190:	81 ee       	ldi	r24, 0xE1	; 225
    2192:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    mirf_CSN_hi;
    2196:	28 9a       	sbi	0x05, 0	; 5

}
    2198:	08 95       	ret

0000219a <handleRFCommands>:

void handleRFCommands() {
    219a:	ff 92       	push	r15
    219c:	0f 93       	push	r16
    219e:	1f 93       	push	r17
    21a0:	df 93       	push	r29
    21a2:	cf 93       	push	r28
    21a4:	0f 92       	push	r0
    21a6:	cd b7       	in	r28, 0x3d	; 61
    21a8:	de b7       	in	r29, 0x3e	; 62
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
    21aa:	80 91 2e 05 	lds	r24, 0x052E
    21ae:	88 23       	and	r24, r24
    21b0:	39 f0       	breq	.+14     	; 0x21c0 <handleRFCommands+0x26>

		

	}

}
    21b2:	0f 90       	pop	r0
    21b4:	cf 91       	pop	r28
    21b6:	df 91       	pop	r29
    21b8:	1f 91       	pop	r17
    21ba:	0f 91       	pop	r16
    21bc:	ff 90       	pop	r15
    21be:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    21c0:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
    21c2:	8f ef       	ldi	r24, 0xFF	; 255
    21c4:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
    21c8:	28 9a       	sbi	0x05, 0	; 5

	unsigned int i=0;
	//uint8_t pWidth = 0;
	//uint8_t pWidthP0 = 0;

	if(mirf_data_ready()) {
    21ca:	86 ff       	sbrs	r24, 6
    21cc:	f2 cf       	rjmp	.-28     	; 0x21b2 <handleRFCommands+0x18>
		//if(spiCommError) {
		//	usart0Transmit(0xFE,1);
		//	return;
		//}

		rfFlags |= 0x02;
    21ce:	80 91 27 03 	lds	r24, 0x0327
    21d2:	82 60       	ori	r24, 0x02	; 2
    21d4:	80 93 27 03 	sts	0x0327, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    21d8:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    21da:	87 e2       	ldi	r24, 0x27	; 39
    21dc:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    SPI_Write_Byte(value);
    21e0:	80 e7       	ldi	r24, 0x70	; 112
    21e2:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    mirf_CSN_hi;
    21e6:	28 9a       	sbi	0x05, 0	; 5

}

uint8_t rx_fifo_is_empty() {
	
	uint8_t fifo_status = 0;
    21e8:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
    21ea:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    21ec:	87 e1       	ldi	r24, 0x17	; 23
    21ee:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    21f2:	be 01       	movw	r22, r28
    21f4:	6f 5f       	subi	r22, 0xFF	; 255
    21f6:	7f 4f       	sbci	r23, 0xFF	; 255
    21f8:	cb 01       	movw	r24, r22
    21fa:	41 e0       	ldi	r20, 0x01	; 1
    21fc:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    2200:	28 9a       	sbi	0x05, 0	; 5
	
	uint8_t fifo_status = 0;

	mirf_read_register(FIFO_STATUS, &fifo_status, 1);
	
	return (uint8_t)(fifo_status&0x01);
    2202:	89 81       	ldd	r24, Y+1	; 0x01
		// aren't present in the fifo with consequent wrong data read and wrong behavior of the robot.
		// To avoid this situtation we add this check before actually reading from the fifo to be 
		// sure there are correct data to be read.
		// We don't know why the IRQ for data reception is raised, maybe is not correctly reset sometimes
		// or it is raised when it shouldn't...
		if(rx_fifo_is_empty()) {
    2204:	80 fd       	sbrc	r24, 0
    2206:	d5 cf       	rjmp	.-86     	; 0x21b2 <handleRFCommands+0x18>
}

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    mirf_CSN_lo;                               		// Pull down chip select
    2208:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    220a:	81 e6       	ldi	r24, 0x61	; 97
    220c:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    2210:	85 e8       	ldi	r24, 0x85	; 133
    2212:	99 e0       	ldi	r25, 0x09	; 9
    2214:	bc 01       	movw	r22, r24
    2216:	4d e0       	ldi	r20, 0x0D	; 13
    2218:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
    221c:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    221e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2220:	87 e2       	ldi	r24, 0x27	; 39
    2222:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    SPI_Write_Byte(value);
    2226:	80 e4       	ldi	r24, 0x40	; 64
    2228:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    mirf_CSN_hi;
    222c:	28 9a       	sbi	0x05, 0	; 5
	return (uint8_t)(fifo_status&0x01);
}

void flush_rx_fifo() {

    mirf_CSN_lo;
    222e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
    2230:	82 ee       	ldi	r24, 0xE2	; 226
    2232:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    mirf_CSN_hi;
    2236:	28 9a       	sbi	0x05, 0	; 5
		mirf_get_data(rfData);
		flush_rx_fifo();

		//usartTransmit(rfData[0]);

		if(rfDebugMode==1) {
    2238:	80 91 29 03 	lds	r24, 0x0329
    223c:	81 30       	cpi	r24, 0x01	; 1
    223e:	09 f4       	brne	.+2      	; 0x2242 <__stack+0x43>
    2240:	4b c1       	rjmp	.+662    	; 0x24d8 <__stack+0x2d9>

			//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
			// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
			// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    2242:	40 91 85 09 	lds	r20, 0x0985
    2246:	24 2f       	mov	r18, r20
    2248:	44 23       	and	r20, r20
    224a:	09 f0       	breq	.+2      	; 0x224e <__stack+0x4f>
    224c:	9c c1       	rjmp	.+824    	; 0x2586 <__stack+0x387>
    224e:	50 91 86 09 	lds	r21, 0x0986
    2252:	e5 2f       	mov	r30, r21
    2254:	55 23       	and	r21, r21
    2256:	09 f4       	brne	.+2      	; 0x225a <__stack+0x5b>
    2258:	10 c2       	rjmp	.+1056   	; 0x267a <__stack+0x47b>

				sleep(60);
    225a:	00 91 87 09 	lds	r16, 0x0987

			}

			if(calibrateOdomFlag==0) { 
    225e:	80 91 67 05 	lds	r24, 0x0567
    2262:	88 23       	and	r24, r24
    2264:	41 f5       	brne	.+80     	; 0x22b6 <__stack+0xb7>
				speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    2266:	70 91 89 09 	lds	r23, 0x0989
    226a:	27 2f       	mov	r18, r23
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	2f 77       	andi	r18, 0x7F	; 127
    2270:	30 70       	andi	r19, 0x00	; 0
    2272:	30 93 24 03 	sts	0x0324, r19
    2276:	20 93 23 03 	sts	0x0323, r18
				speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
    227a:	60 91 8a 09 	lds	r22, 0x098A
    227e:	86 2f       	mov	r24, r22
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	8f 77       	andi	r24, 0x7F	; 127
    2284:	90 70       	andi	r25, 0x00	; 0
    2286:	90 93 22 03 	sts	0x0322, r25
    228a:	80 93 21 03 	sts	0x0321, r24
											// in the same range of the measured speed that is 0..800.
											// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
											// this means that the range is more or less 0..400.


				if((rfData[4]&0x80)==0x80) {			// motor right forward
    228e:	77 fd       	sbrc	r23, 7
    2290:	03 c0       	rjmp	.+6      	; 0x2298 <__stack+0x99>
					pwm_right_desired = speedr; 		// speed received (0..127) is expressed in 1/5 of mm/s (0..635 mm/s)
				} else {								// backward
					pwm_right_desired = -(speedr);
    2292:	30 95       	com	r19
    2294:	21 95       	neg	r18
    2296:	3f 4f       	sbci	r19, 0xFF	; 255
    2298:	30 93 0a 03 	sts	0x030A, r19
    229c:	20 93 09 03 	sts	0x0309, r18
				}

				if((rfData[5]&0x80)==0x80) {			// motor left forward
    22a0:	67 fd       	sbrc	r22, 7
    22a2:	03 c0       	rjmp	.+6      	; 0x22aa <__stack+0xab>
					pwm_left_desired = speedl;
				} else {								// backward
					pwm_left_desired = -(speedl);
    22a4:	90 95       	com	r25
    22a6:	81 95       	neg	r24
    22a8:	9f 4f       	sbci	r25, 0xFF	; 255
    22aa:	90 93 0c 03 	sts	0x030C, r25
    22ae:	80 93 0b 03 	sts	0x030B, r24
    22b2:	24 2f       	mov	r18, r20
    22b4:	e5 2f       	mov	r30, r21

			}


			for(i=0; i<3; i++) {
				dataLED[i]=rfData[i]&0xFF;
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	30 93 6e 09 	sts	0x096E, r19
    22bc:	20 93 6d 09 	sts	0x096D, r18
    22c0:	f0 e0       	ldi	r31, 0x00	; 0
    22c2:	f0 93 70 09 	sts	0x0970, r31
    22c6:	e0 93 6f 09 	sts	0x096F, r30
    22ca:	10 e0       	ldi	r17, 0x00	; 0
    22cc:	10 93 72 09 	sts	0x0972, r17
    22d0:	00 93 71 09 	sts	0x0971, r16
			}
			pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
    22d4:	92 2f       	mov	r25, r18
    22d6:	88 27       	eor	r24, r24
    22d8:	82 1b       	sub	r24, r18
    22da:	93 0b       	sbc	r25, r19
    22dc:	24 e6       	ldi	r18, 0x64	; 100
    22de:	30 e0       	ldi	r19, 0x00	; 0
    22e0:	b9 01       	movw	r22, r18
    22e2:	0e 94 aa 53 	call	0xa754	; 0xa754 <__udivmodhi4>
    22e6:	f6 2e       	mov	r15, r22
    22e8:	f0 94       	com	r15
    22ea:	f0 92 0c 02 	sts	0x020C, r15
			pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
    22ee:	5e 2f       	mov	r21, r30
    22f0:	44 27       	eor	r20, r20
    22f2:	4e 1b       	sub	r20, r30
    22f4:	5f 0b       	sbc	r21, r31
    22f6:	ca 01       	movw	r24, r20
    22f8:	b9 01       	movw	r22, r18
    22fa:	0e 94 aa 53 	call	0xa754	; 0xa754 <__udivmodhi4>
    22fe:	60 95       	com	r22
    2300:	60 93 0e 02 	sts	0x020E, r22
			pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
    2304:	50 2f       	mov	r21, r16
    2306:	44 27       	eor	r20, r20
    2308:	40 1b       	sub	r20, r16
    230a:	51 0b       	sbc	r21, r17
    230c:	ca 01       	movw	r24, r20
    230e:	b9 01       	movw	r22, r18
    2310:	0e 94 aa 53 	call	0xa754	; 0xa754 <__udivmodhi4>
    2314:	60 95       	com	r22
    2316:	60 93 0d 02 	sts	0x020D, r22
			updateRedLed(pwm_red);
    231a:	8f 2d       	mov	r24, r15
    231c:	0e 94 ac 3d 	call	0x7b58	; 0x7b58 <updateRedLed>
			updateGreenLed(pwm_green);
    2320:	80 91 0d 02 	lds	r24, 0x020D
    2324:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <updateGreenLed>
			updateBlueLed(pwm_blue);
    2328:	80 91 0e 02 	lds	r24, 0x020E
    232c:	0e 94 d4 3d 	call	0x7ba8	; 0x7ba8 <updateBlueLed>


			if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
    2330:	80 91 88 09 	lds	r24, 0x0988
    2334:	80 ff       	sbrs	r24, 0
    2336:	59 c1       	rjmp	.+690    	; 0x25ea <__stack+0x3eb>
				LED_IR1_LOW;
    2338:	44 98       	cbi	0x08, 4	; 8
			} else {
				LED_IR1_HIGH;
			}

			if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
    233a:	81 ff       	sbrs	r24, 1
    233c:	54 c1       	rjmp	.+680    	; 0x25e6 <__stack+0x3e7>
				LED_IR2_LOW;
    233e:	45 98       	cbi	0x08, 5	; 8
			} else {
				LED_IR2_HIGH;
			}

			if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
    2340:	98 2f       	mov	r25, r24
    2342:	82 ff       	sbrs	r24, 2
    2344:	4d c1       	rjmp	.+666    	; 0x25e0 <__stack+0x3e1>
				irEnabled = 1;
    2346:	21 e0       	ldi	r18, 0x01	; 1
    2348:	20 93 12 02 	sts	0x0212, r18
			} else {
				irEnabled = 0;
			}

			if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
    234c:	84 fd       	sbrc	r24, 4
    234e:	a2 c1       	rjmp	.+836    	; 0x2694 <__stack+0x495>
				calibrateSensors();
				resetOdometry();
			}

			if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
    2350:	86 ff       	sbrs	r24, 6
    2352:	43 c1       	rjmp	.+646    	; 0x25da <__stack+0x3db>
				obstacleAvoidanceEnabled = 1;
    2354:	81 e0       	ldi	r24, 0x01	; 1
    2356:	80 93 7c 04 	sts	0x047C, r24
			} else {
				obstacleAvoidanceEnabled = 0;
			}

			if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
    235a:	97 fd       	sbrc	r25, 7
    235c:	c6 c1       	rjmp	.+908    	; 0x26ea <__stack+0x4eb>
				cliffAvoidanceEnabled = 1;
			} else {
				cliffAvoidanceEnabled = 0;
    235e:	10 92 7d 04 	sts	0x047D, r1
			}

			// handle small green leds
			#ifdef HW_REV_3_1			

				if(bit_is_set(rfData[6], 0) ) {
    2362:	80 91 8b 09 	lds	r24, 0x098B
    2366:	80 ff       	sbrs	r24, 0
    2368:	32 c1       	rjmp	.+612    	; 0x25ce <__stack+0x3cf>
					GREEN_LED0_ON;
    236a:	80 91 0b 01 	lds	r24, 0x010B
    236e:	8e 7f       	andi	r24, 0xFE	; 254
    2370:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED0_OFF;
				}
				
				if(bit_is_set(rfData[6], 1) ) {
    2374:	80 91 8b 09 	lds	r24, 0x098B
    2378:	81 ff       	sbrs	r24, 1
    237a:	23 c1       	rjmp	.+582    	; 0x25c2 <__stack+0x3c3>
					GREEN_LED1_ON;
    237c:	80 91 0b 01 	lds	r24, 0x010B
    2380:	8d 7f       	andi	r24, 0xFD	; 253
    2382:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED1_OFF;
				}
				
				if(bit_is_set(rfData[6], 2) ) {
    2386:	80 91 8b 09 	lds	r24, 0x098B
    238a:	82 ff       	sbrs	r24, 2
    238c:	14 c1       	rjmp	.+552    	; 0x25b6 <__stack+0x3b7>
					GREEN_LED2_ON;
    238e:	80 91 0b 01 	lds	r24, 0x010B
    2392:	8b 7f       	andi	r24, 0xFB	; 251
    2394:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED2_OFF;
				}												

				if(bit_is_set(rfData[6], 3) ) {
    2398:	80 91 8b 09 	lds	r24, 0x098B
    239c:	83 ff       	sbrs	r24, 3
    239e:	09 c1       	rjmp	.+530    	; 0x25b2 <__stack+0x3b3>
					GREEN_LED3_ON;
    23a0:	a3 98       	cbi	0x14, 3	; 20
				} else {
					GREEN_LED3_OFF;
				}

				if(bit_is_set(rfData[6], 4) ) {
    23a2:	80 91 8b 09 	lds	r24, 0x098B
    23a6:	84 ff       	sbrs	r24, 4
    23a8:	fe c0       	rjmp	.+508    	; 0x25a6 <__stack+0x3a7>
					GREEN_LED4_ON;
    23aa:	80 91 0b 01 	lds	r24, 0x010B
    23ae:	8f 7e       	andi	r24, 0xEF	; 239
    23b0:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED4_OFF;
				}

				if(bit_is_set(rfData[6], 5) ) {
    23b4:	80 91 8b 09 	lds	r24, 0x098B
    23b8:	85 ff       	sbrs	r24, 5
    23ba:	ef c0       	rjmp	.+478    	; 0x259a <__stack+0x39b>
					GREEN_LED5_ON;
    23bc:	80 91 0b 01 	lds	r24, 0x010B
    23c0:	8f 7d       	andi	r24, 0xDF	; 223
    23c2:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED5_OFF;
				}

				if(bit_is_set(rfData[6], 6) ) {
    23c6:	80 91 8b 09 	lds	r24, 0x098B
    23ca:	86 ff       	sbrs	r24, 6
    23cc:	e0 c0       	rjmp	.+448    	; 0x258e <__stack+0x38f>
					GREEN_LED6_ON;
    23ce:	80 91 0b 01 	lds	r24, 0x010B
    23d2:	8f 7b       	andi	r24, 0xBF	; 191
    23d4:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED6_OFF;
				}

				if(bit_is_set(rfData[6], 7) ) {
    23d8:	80 91 8b 09 	lds	r24, 0x098B
    23dc:	87 fd       	sbrc	r24, 7
    23de:	7f c1       	rjmp	.+766    	; 0x26de <__stack+0x4df>
					GREEN_LED7_ON;
				} else {
					GREEN_LED7_OFF;
    23e0:	80 91 0b 01 	lds	r24, 0x010B
    23e4:	80 68       	ori	r24, 0x80	; 128
    23e6:	80 93 0b 01 	sts	0x010B, r24
				}

			#endif
		
			if(currentSelector == 8) {
    23ea:	80 91 5c 04 	lds	r24, 0x045C
    23ee:	88 30       	cpi	r24, 0x08	; 8
    23f0:	09 f4       	brne	.+2      	; 0x23f4 <__stack+0x1f5>
    23f2:	58 c1       	rjmp	.+688    	; 0x26a4 <__stack+0x4a5>

			// read and handle the remaining bytes of the payload (at the moment not used)


			// write back the ack payload
			ackPayload[0] = packetId&0xFF;
    23f4:	80 91 0b 02 	lds	r24, 0x020B
    23f8:	80 93 bd 08 	sts	0x08BD, r24

			switch(packetId) {
    23fc:	85 30       	cpi	r24, 0x05	; 5
    23fe:	09 f4       	brne	.+2      	; 0x2402 <__stack+0x203>
    2400:	78 c1       	rjmp	.+752    	; 0x26f2 <__stack+0x4f3>
    2402:	86 30       	cpi	r24, 0x06	; 6
    2404:	08 f4       	brcc	.+2      	; 0x2408 <__stack+0x209>
    2406:	f3 c0       	rjmp	.+486    	; 0x25ee <__stack+0x3ef>
    2408:	86 30       	cpi	r24, 0x06	; 6
    240a:	09 f4       	brne	.+2      	; 0x240e <__stack+0x20f>
    240c:	30 c2       	rjmp	.+1120   	; 0x286e <__stack+0x66f>
    240e:	87 30       	cpi	r24, 0x07	; 7
    2410:	09 f0       	breq	.+2      	; 0x2414 <__stack+0x215>
    2412:	62 c0       	rjmp	.+196    	; 0x24d8 <__stack+0x2d9>
					packetId = 7;
					break;


				case 7:
					ackPayload[1] = ((signed long int)leftMotSteps)&0xFF;
    2414:	60 91 e5 02 	lds	r22, 0x02E5
    2418:	70 91 e6 02 	lds	r23, 0x02E6
    241c:	80 91 e7 02 	lds	r24, 0x02E7
    2420:	90 91 e8 02 	lds	r25, 0x02E8
    2424:	0e 94 b4 51 	call	0xa368	; 0xa368 <__fixsfsi>
    2428:	60 93 be 08 	sts	0x08BE, r22
					ackPayload[2] = ((signed long int)leftMotSteps)>>8;
    242c:	70 93 bf 08 	sts	0x08BF, r23
					ackPayload[3] = ((signed long int)leftMotSteps)>>16;
    2430:	80 93 c0 08 	sts	0x08C0, r24
					ackPayload[4] = ((signed long int)leftMotSteps)>>24;
    2434:	90 93 c1 08 	sts	0x08C1, r25
					ackPayload[5] = ((signed long int)rightMotSteps)&0xFF;
    2438:	60 91 e1 02 	lds	r22, 0x02E1
    243c:	70 91 e2 02 	lds	r23, 0x02E2
    2440:	80 91 e3 02 	lds	r24, 0x02E3
    2444:	90 91 e4 02 	lds	r25, 0x02E4
    2448:	0e 94 b4 51 	call	0xa368	; 0xa368 <__fixsfsi>
    244c:	60 93 c2 08 	sts	0x08C2, r22
					ackPayload[6] = ((signed long int)rightMotSteps)>>8;
    2450:	70 93 c3 08 	sts	0x08C3, r23
					ackPayload[7] = ((signed long int)rightMotSteps)>>16;
    2454:	80 93 c4 08 	sts	0x08C4, r24
					ackPayload[8] = ((signed long int)rightMotSteps)>>24;
    2458:	90 93 c5 08 	sts	0x08C5, r25
					lastTheta = theta;
    245c:	60 91 7f 04 	lds	r22, 0x047F
    2460:	70 91 80 04 	lds	r23, 0x0480
    2464:	80 91 81 04 	lds	r24, 0x0481
    2468:	90 91 82 04 	lds	r25, 0x0482
    246c:	60 93 83 04 	sts	0x0483, r22
    2470:	70 93 84 04 	sts	0x0484, r23
    2474:	80 93 85 04 	sts	0x0485, r24
    2478:	90 93 86 04 	sts	0x0486, r25
					ackPayload[9] = ((signed int)(lastTheta*573.0))&0xFF;	// radians to degrees => 573 = 1800/PI
    247c:	20 e0       	ldi	r18, 0x00	; 0
    247e:	30 e4       	ldi	r19, 0x40	; 64
    2480:	4f e0       	ldi	r20, 0x0F	; 15
    2482:	54 e4       	ldi	r21, 0x44	; 68
    2484:	0e 94 00 53 	call	0xa600	; 0xa600 <__mulsf3>
    2488:	0e 94 b4 51 	call	0xa368	; 0xa368 <__fixsfsi>
    248c:	26 2f       	mov	r18, r22
    248e:	20 93 c6 08 	sts	0x08C6, r18
					ackPayload[10] = ((signed int)(lastTheta*573.0))>>8;				
    2492:	70 93 c7 08 	sts	0x08C7, r23
					ackPayload[11] = ((unsigned int)xPos)&0xFF;
    2496:	60 91 87 04 	lds	r22, 0x0487
    249a:	70 91 88 04 	lds	r23, 0x0488
    249e:	80 91 89 04 	lds	r24, 0x0489
    24a2:	90 91 8a 04 	lds	r25, 0x048A
    24a6:	0e 94 b9 51 	call	0xa372	; 0xa372 <__fixunssfsi>
    24aa:	60 93 c8 08 	sts	0x08C8, r22
					ackPayload[12] = ((unsigned int)xPos)>>8;
    24ae:	70 93 c9 08 	sts	0x08C9, r23
					ackPayload[13] = ((unsigned int)yPos)&0xFF;
    24b2:	60 91 8b 04 	lds	r22, 0x048B
    24b6:	70 91 8c 04 	lds	r23, 0x048C
    24ba:	80 91 8d 04 	lds	r24, 0x048D
    24be:	90 91 8e 04 	lds	r25, 0x048E
    24c2:	0e 94 b9 51 	call	0xa372	; 0xa372 <__fixunssfsi>
    24c6:	60 93 ca 08 	sts	0x08CA, r22
					ackPayload[14] = ((unsigned int)yPos)>>8;
    24ca:	70 93 cb 08 	sts	0x08CB, r23
					//ackPayload[10] = ((unsigned int)(thetaOld*573.0))>>8;
					//ackPayload[11] = ((unsigned int)xPosOld)&0xFF;
					//ackPayload[12] = ((unsigned int)xPosOld)>>8;
					//ackPayload[13] = ((unsigned int)yPosOld)&0xFF;
					//ackPayload[14] = ((unsigned int)yPosOld)>>8;
					ackPayload[15] = 0;
    24ce:	10 92 cc 08 	sts	0x08CC, r1
					packetId = 3;
    24d2:	83 e0       	ldi	r24, 0x03	; 3
    24d4:	80 93 0b 02 	sts	0x020B, r24
	return pWidth;
}

void flushTxFifo() {

    mirf_CSN_lo;
    24d8:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    24da:	81 ee       	ldi	r24, 0xE1	; 225
    24dc:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    mirf_CSN_hi;
    24e0:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
    24e2:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
    24e4:	88 ea       	ldi	r24, 0xA8	; 168
    24e6:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>

	for(k=0; k<size; k++) {
		SPI_Write_Byte(data[k]);
    24ea:	80 91 bd 08 	lds	r24, 0x08BD
    24ee:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    24f2:	80 91 be 08 	lds	r24, 0x08BE
    24f6:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    24fa:	80 91 bf 08 	lds	r24, 0x08BF
    24fe:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    2502:	80 91 c0 08 	lds	r24, 0x08C0
    2506:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    250a:	80 91 c1 08 	lds	r24, 0x08C1
    250e:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    2512:	80 91 c2 08 	lds	r24, 0x08C2
    2516:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    251a:	80 91 c3 08 	lds	r24, 0x08C3
    251e:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    2522:	80 91 c4 08 	lds	r24, 0x08C4
    2526:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    252a:	80 91 c5 08 	lds	r24, 0x08C5
    252e:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    2532:	80 91 c6 08 	lds	r24, 0x08C6
    2536:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    253a:	80 91 c7 08 	lds	r24, 0x08C7
    253e:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    2542:	80 91 c8 08 	lds	r24, 0x08C8
    2546:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    254a:	80 91 c9 08 	lds	r24, 0x08C9
    254e:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    2552:	80 91 ca 08 	lds	r24, 0x08CA
    2556:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    255a:	80 91 cb 08 	lds	r24, 0x08CB
    255e:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
    2562:	80 91 cc 08 	lds	r24, 0x08CC
    2566:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SPI_Write_Byte>
	}	

    mirf_CSN_hi;
    256a:	28 9a       	sbi	0x05, 0	; 5

		

	}

}
    256c:	0f 90       	pop	r0
    256e:	cf 91       	pop	r28
    2570:	df 91       	pop	r29
    2572:	1f 91       	pop	r17
    2574:	0f 91       	pop	r16
    2576:	ff 90       	pop	r15
    2578:	08 95       	ret
			// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
			// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {

				sleep(60);
    257a:	8c e3       	ldi	r24, 0x3C	; 60
    257c:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <sleep>
    2580:	40 91 85 09 	lds	r20, 0x0985
    2584:	24 2f       	mov	r18, r20
    2586:	50 91 86 09 	lds	r21, 0x0986
    258a:	e5 2f       	mov	r30, r21
    258c:	66 ce       	rjmp	.-820    	; 0x225a <__stack+0x5b>
				}

				if(bit_is_set(rfData[6], 6) ) {
					GREEN_LED6_ON;
				} else {
					GREEN_LED6_OFF;
    258e:	80 91 0b 01 	lds	r24, 0x010B
    2592:	80 64       	ori	r24, 0x40	; 64
    2594:	80 93 0b 01 	sts	0x010B, r24
    2598:	1f cf       	rjmp	.-450    	; 0x23d8 <__stack+0x1d9>
				}

				if(bit_is_set(rfData[6], 5) ) {
					GREEN_LED5_ON;
				} else {
					GREEN_LED5_OFF;
    259a:	80 91 0b 01 	lds	r24, 0x010B
    259e:	80 62       	ori	r24, 0x20	; 32
    25a0:	80 93 0b 01 	sts	0x010B, r24
    25a4:	10 cf       	rjmp	.-480    	; 0x23c6 <__stack+0x1c7>
				}

				if(bit_is_set(rfData[6], 4) ) {
					GREEN_LED4_ON;
				} else {
					GREEN_LED4_OFF;
    25a6:	80 91 0b 01 	lds	r24, 0x010B
    25aa:	80 61       	ori	r24, 0x10	; 16
    25ac:	80 93 0b 01 	sts	0x010B, r24
    25b0:	01 cf       	rjmp	.-510    	; 0x23b4 <__stack+0x1b5>
				}												

				if(bit_is_set(rfData[6], 3) ) {
					GREEN_LED3_ON;
				} else {
					GREEN_LED3_OFF;
    25b2:	a3 9a       	sbi	0x14, 3	; 20
    25b4:	f6 ce       	rjmp	.-532    	; 0x23a2 <__stack+0x1a3>
				}
				
				if(bit_is_set(rfData[6], 2) ) {
					GREEN_LED2_ON;
				} else {
					GREEN_LED2_OFF;
    25b6:	80 91 0b 01 	lds	r24, 0x010B
    25ba:	84 60       	ori	r24, 0x04	; 4
    25bc:	80 93 0b 01 	sts	0x010B, r24
    25c0:	eb ce       	rjmp	.-554    	; 0x2398 <__stack+0x199>
				}
				
				if(bit_is_set(rfData[6], 1) ) {
					GREEN_LED1_ON;
				} else {
					GREEN_LED1_OFF;
    25c2:	80 91 0b 01 	lds	r24, 0x010B
    25c6:	82 60       	ori	r24, 0x02	; 2
    25c8:	80 93 0b 01 	sts	0x010B, r24
    25cc:	dc ce       	rjmp	.-584    	; 0x2386 <__stack+0x187>
			#ifdef HW_REV_3_1			

				if(bit_is_set(rfData[6], 0) ) {
					GREEN_LED0_ON;
				} else {
					GREEN_LED0_OFF;
    25ce:	80 91 0b 01 	lds	r24, 0x010B
    25d2:	81 60       	ori	r24, 0x01	; 1
    25d4:	80 93 0b 01 	sts	0x010B, r24
    25d8:	cd ce       	rjmp	.-614    	; 0x2374 <__stack+0x175>
			}

			if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
				obstacleAvoidanceEnabled = 1;
			} else {
				obstacleAvoidanceEnabled = 0;
    25da:	10 92 7c 04 	sts	0x047C, r1
    25de:	bd ce       	rjmp	.-646    	; 0x235a <__stack+0x15b>
			}

			if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
				irEnabled = 1;
			} else {
				irEnabled = 0;
    25e0:	10 92 12 02 	sts	0x0212, r1
    25e4:	b3 ce       	rjmp	.-666    	; 0x234c <__stack+0x14d>
			}

			if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
				LED_IR2_LOW;
			} else {
				LED_IR2_HIGH;
    25e6:	45 9a       	sbi	0x08, 5	; 8
    25e8:	ab ce       	rjmp	.-682    	; 0x2340 <__stack+0x141>


			if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
				LED_IR1_LOW;
			} else {
				LED_IR1_HIGH;
    25ea:	44 9a       	sbi	0x08, 4	; 8
    25ec:	a6 ce       	rjmp	.-692    	; 0x233a <__stack+0x13b>


			// write back the ack payload
			ackPayload[0] = packetId&0xFF;

			switch(packetId) {
    25ee:	83 30       	cpi	r24, 0x03	; 3
    25f0:	09 f4       	brne	.+2      	; 0x25f4 <__stack+0x3f5>
    25f2:	db c0       	rjmp	.+438    	; 0x27aa <__stack+0x5ab>
    25f4:	84 30       	cpi	r24, 0x04	; 4
    25f6:	09 f0       	breq	.+2      	; 0x25fa <__stack+0x3fb>
    25f8:	6f cf       	rjmp	.-290    	; 0x24d8 <__stack+0x2d9>
					#endif
					packetId = 4;
					break;

				case 4:
					ackPayload[1] = proximityResult[4]&0xFF;
    25fa:	90 91 71 02 	lds	r25, 0x0271
    25fe:	80 91 72 02 	lds	r24, 0x0272
    2602:	90 93 be 08 	sts	0x08BE, r25
					ackPayload[2] = proximityResult[4]>>8;
    2606:	80 93 bf 08 	sts	0x08BF, r24
					ackPayload[3] = proximityResult[8]&0xFF;
    260a:	90 91 79 02 	lds	r25, 0x0279
    260e:	80 91 7a 02 	lds	r24, 0x027A
    2612:	90 93 c0 08 	sts	0x08C0, r25
					ackPayload[4] = proximityResult[8]>>8;
    2616:	80 93 c1 08 	sts	0x08C1, r24
					ackPayload[5] = proximityResult[9]&0xFF;
    261a:	90 91 7b 02 	lds	r25, 0x027B
    261e:	80 91 7c 02 	lds	r24, 0x027C
    2622:	90 93 c2 08 	sts	0x08C2, r25
					ackPayload[6] = proximityResult[9]>>8;
    2626:	80 93 c3 08 	sts	0x08C3, r24
					ackPayload[7] = proximityResult[10]&0xFF;
    262a:	90 91 7d 02 	lds	r25, 0x027D
    262e:	80 91 7e 02 	lds	r24, 0x027E
    2632:	90 93 c4 08 	sts	0x08C4, r25
					ackPayload[8] = proximityResult[10]>>8;
    2636:	80 93 c5 08 	sts	0x08C5, r24
					ackPayload[9] = proximityResult[11]&0xFF;
    263a:	90 91 7f 02 	lds	r25, 0x027F
    263e:	80 91 80 02 	lds	r24, 0x0280
    2642:	90 93 c6 08 	sts	0x08C6, r25
					ackPayload[10] = proximityResult[11]>>8;
    2646:	80 93 c7 08 	sts	0x08C7, r24
					ackPayload[11] = accX&0xFF;
    264a:	90 91 3c 04 	lds	r25, 0x043C
    264e:	80 91 3d 04 	lds	r24, 0x043D
    2652:	90 93 c8 08 	sts	0x08C8, r25
					ackPayload[12] = accX>>8;
    2656:	80 93 c9 08 	sts	0x08C9, r24
					ackPayload[13] = accY&0xFF;
    265a:	90 91 3e 04 	lds	r25, 0x043E
    265e:	80 91 3f 04 	lds	r24, 0x043F
    2662:	90 93 ca 08 	sts	0x08CA, r25
					ackPayload[14] = accY>>8;
    2666:	80 93 cb 08 	sts	0x08CB, r24
					ackPayload[15] = irCommand;
    266a:	80 91 37 04 	lds	r24, 0x0437
    266e:	80 93 cc 08 	sts	0x08CC, r24
					packetId = 5;
    2672:	85 e0       	ldi	r24, 0x05	; 5
    2674:	80 93 0b 02 	sts	0x020B, r24
					break;
    2678:	2f cf       	rjmp	.-418    	; 0x24d8 <__stack+0x2d9>

			//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
			// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
			// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    267a:	00 91 87 09 	lds	r16, 0x0987
    267e:	00 23       	and	r16, r16
    2680:	09 f0       	breq	.+2      	; 0x2684 <__stack+0x485>
    2682:	47 c1       	rjmp	.+654    	; 0x2912 <__stack+0x713>
    2684:	80 91 88 09 	lds	r24, 0x0988
    2688:	88 30       	cpi	r24, 0x08	; 8
    268a:	09 f4       	brne	.+2      	; 0x268e <__stack+0x48f>
    268c:	44 c1       	rjmp	.+648    	; 0x2916 <__stack+0x717>
    268e:	e0 2f       	mov	r30, r16
    2690:	20 2f       	mov	r18, r16
    2692:	e5 cd       	rjmp	.-1078   	; 0x225e <__stack+0x5f>
			} else {
				irEnabled = 0;
			}

			if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
				calibrateSensors();
    2694:	0e 94 a4 40 	call	0x8148	; 0x8148 <calibrateSensors>
				resetOdometry();
    2698:	0e 94 4c 21 	call	0x4298	; 0x4298 <resetOdometry>
    269c:	90 91 88 09 	lds	r25, 0x0988
    26a0:	89 2f       	mov	r24, r25
    26a2:	56 ce       	rjmp	.-852    	; 0x2350 <__stack+0x151>
				}

			#endif
		
			if(currentSelector == 8) {
				if(calibrateOdomFlag==0) {
    26a4:	80 91 67 05 	lds	r24, 0x0567
    26a8:	88 23       	and	r24, r24
    26aa:	09 f0       	breq	.+2      	; 0x26ae <__stack+0x4af>
    26ac:	a3 ce       	rjmp	.-698    	; 0x23f4 <__stack+0x1f5>
					if((rfData[7]&0b00000001)==0b00000001) {
    26ae:	80 91 8c 09 	lds	r24, 0x098C
    26b2:	80 ff       	sbrs	r24, 0
    26b4:	9f ce       	rjmp	.-706    	; 0x23f4 <__stack+0x1f5>
						calibrateSensors();
    26b6:	0e 94 a4 40 	call	0x8148	; 0x8148 <calibrateSensors>
						proximityResult[8] = 1023;	// because the first time this value could be low after calibration
    26ba:	8f ef       	ldi	r24, 0xFF	; 255
    26bc:	93 e0       	ldi	r25, 0x03	; 3
    26be:	90 93 7a 02 	sts	0x027A, r25
    26c2:	80 93 79 02 	sts	0x0279, r24
						proximityResult[11] = 1023;	// and in that case a false black line will be detected
    26c6:	90 93 80 02 	sts	0x0280, r25
    26ca:	80 93 7f 02 	sts	0x027F, r24
						calibState = 0;
    26ce:	10 92 5c 0b 	sts	0x0B5C, r1
						calibVelIndex = 1;
    26d2:	81 e0       	ldi	r24, 0x01	; 1
    26d4:	80 93 b6 08 	sts	0x08B6, r24
						calibrateOdomFlag = 1;
    26d8:	80 93 67 05 	sts	0x0567, r24
    26dc:	8b ce       	rjmp	.-746    	; 0x23f4 <__stack+0x1f5>
				} else {
					GREEN_LED6_OFF;
				}

				if(bit_is_set(rfData[6], 7) ) {
					GREEN_LED7_ON;
    26de:	80 91 0b 01 	lds	r24, 0x010B
    26e2:	8f 77       	andi	r24, 0x7F	; 127
    26e4:	80 93 0b 01 	sts	0x010B, r24
    26e8:	80 ce       	rjmp	.-768    	; 0x23ea <__stack+0x1eb>
			} else {
				obstacleAvoidanceEnabled = 0;
			}

			if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
				cliffAvoidanceEnabled = 1;
    26ea:	81 e0       	ldi	r24, 0x01	; 1
    26ec:	80 93 7d 04 	sts	0x047D, r24
    26f0:	38 ce       	rjmp	.-912    	; 0x2362 <__stack+0x163>
					ackPayload[15] = irCommand;
					packetId = 5;
					break;

				case 5:
					ackPayload[1] = proximityValue[0]&0xFF;
    26f2:	80 91 39 02 	lds	r24, 0x0239
    26f6:	90 91 3a 02 	lds	r25, 0x023A
    26fa:	80 93 be 08 	sts	0x08BE, r24
					ackPayload[2] = proximityValue[0]>>8;
    26fe:	80 91 39 02 	lds	r24, 0x0239
    2702:	90 91 3a 02 	lds	r25, 0x023A
    2706:	90 93 bf 08 	sts	0x08BF, r25
					ackPayload[3] = proximityValue[2]&0xFF;
    270a:	80 91 3d 02 	lds	r24, 0x023D
    270e:	90 91 3e 02 	lds	r25, 0x023E
    2712:	80 93 c0 08 	sts	0x08C0, r24
					ackPayload[4] = proximityValue[2]>>8;
    2716:	80 91 3d 02 	lds	r24, 0x023D
    271a:	90 91 3e 02 	lds	r25, 0x023E
    271e:	90 93 c1 08 	sts	0x08C1, r25
					ackPayload[5] = proximityValue[4]&0xFF;
    2722:	80 91 41 02 	lds	r24, 0x0241
    2726:	90 91 42 02 	lds	r25, 0x0242
    272a:	80 93 c2 08 	sts	0x08C2, r24
					ackPayload[6] = proximityValue[4]>>8;
    272e:	80 91 41 02 	lds	r24, 0x0241
    2732:	90 91 42 02 	lds	r25, 0x0242
    2736:	90 93 c3 08 	sts	0x08C3, r25
					ackPayload[7] = proximityValue[6]&0xFF;
    273a:	80 91 45 02 	lds	r24, 0x0245
    273e:	90 91 46 02 	lds	r25, 0x0246
    2742:	80 93 c4 08 	sts	0x08C4, r24
					ackPayload[8] = proximityValue[6]>>8;
    2746:	80 91 45 02 	lds	r24, 0x0245
    274a:	90 91 46 02 	lds	r25, 0x0246
    274e:	90 93 c5 08 	sts	0x08C5, r25
					ackPayload[9] = proximityValue[10]&0xFF;
    2752:	80 91 4d 02 	lds	r24, 0x024D
    2756:	90 91 4e 02 	lds	r25, 0x024E
    275a:	80 93 c6 08 	sts	0x08C6, r24
					ackPayload[10] = proximityValue[10]>>8;
    275e:	80 91 4d 02 	lds	r24, 0x024D
    2762:	90 91 4e 02 	lds	r25, 0x024E
    2766:	90 93 c7 08 	sts	0x08C7, r25
					ackPayload[11] = proximityValue[12]&0xFF;
    276a:	80 91 51 02 	lds	r24, 0x0251
    276e:	90 91 52 02 	lds	r25, 0x0252
    2772:	80 93 c8 08 	sts	0x08C8, r24
					ackPayload[12] = proximityValue[12]>>8;
    2776:	80 91 51 02 	lds	r24, 0x0251
    277a:	90 91 52 02 	lds	r25, 0x0252
    277e:	90 93 c9 08 	sts	0x08C9, r25
					ackPayload[13] = proximityValue[14]&0xFF;
    2782:	80 91 55 02 	lds	r24, 0x0255
    2786:	90 91 56 02 	lds	r25, 0x0256
    278a:	80 93 ca 08 	sts	0x08CA, r24
					ackPayload[14] = proximityValue[14]>>8;
    278e:	80 91 55 02 	lds	r24, 0x0255
    2792:	90 91 56 02 	lds	r25, 0x0256
    2796:	90 93 cb 08 	sts	0x08CB, r25
					ackPayload[15] = currentSelector;
    279a:	80 91 5c 04 	lds	r24, 0x045C
    279e:	80 93 cc 08 	sts	0x08CC, r24
					packetId = 6;
    27a2:	86 e0       	ldi	r24, 0x06	; 6
    27a4:	80 93 0b 02 	sts	0x020B, r24
					break;
    27a8:	97 ce       	rjmp	.-722    	; 0x24d8 <__stack+0x2d9>
			// write back the ack payload
			ackPayload[0] = packetId&0xFF;

			switch(packetId) {
				case 3:
					ackPayload[1] = angleDegEncode; //proximityResult[0]&0xFF;
    27aa:	80 91 ea 04 	lds	r24, 0x04EA
    27ae:	80 93 be 08 	sts	0x08BE, r24
					ackPayload[2] = 0; //proximityResult[0]>>8;
    27b2:	10 92 bf 08 	sts	0x08BF, r1
					ackPayload[3] = irCommLastData&0xFF; //proximityResult[1]&0xFF;
    27b6:	90 91 e4 04 	lds	r25, 0x04E4
    27ba:	80 91 e5 04 	lds	r24, 0x04E5
    27be:	90 93 c0 08 	sts	0x08C0, r25
					ackPayload[4] = irCommLastData>>8; //proximityResult[1]>>8;
    27c2:	80 93 c1 08 	sts	0x08C1, r24
					ackPayload[5] = irCommLastSensor; //proximityResult[2]&0xFF;
    27c6:	80 91 18 02 	lds	r24, 0x0218
    27ca:	80 93 c2 08 	sts	0x08C2, r24
					ackPayload[6] = 0; //proximityResult[2]>>8;
    27ce:	10 92 c3 08 	sts	0x08C3, r1
					ackPayload[7] = angleDeg&0xFF; //proximityResult[3]&0xFF;
    27d2:	90 91 e6 04 	lds	r25, 0x04E6
    27d6:	80 91 e7 04 	lds	r24, 0x04E7
    27da:	90 93 c4 08 	sts	0x08C4, r25
					ackPayload[8] = angleDeg>>8; //proximityResult[3]>>8;
    27de:	80 93 c5 08 	sts	0x08C5, r24
					ackPayload[9] = angleError&0xFF; //proximityResult[5]&0xFF;
    27e2:	90 91 e8 04 	lds	r25, 0x04E8
    27e6:	80 91 e9 04 	lds	r24, 0x04E9
    27ea:	90 93 c6 08 	sts	0x08C6, r25
					ackPayload[10] = angleError>>8; //proximityResult[5]>>8;
    27ee:	80 93 c7 08 	sts	0x08C7, r24
					ackPayload[11] = proximityResult[6]&0xFF;
    27f2:	90 91 75 02 	lds	r25, 0x0275
    27f6:	80 91 76 02 	lds	r24, 0x0276
    27fa:	90 93 c8 08 	sts	0x08C8, r25
					ackPayload[12] = proximityResult[6]>>8;
    27fe:	80 93 c9 08 	sts	0x08C9, r24
					ackPayload[13] = proximityResult[7]&0xFF;
    2802:	90 91 77 02 	lds	r25, 0x0277
    2806:	80 91 78 02 	lds	r24, 0x0278
    280a:	90 93 ca 08 	sts	0x08CA, r25
					ackPayload[14] = proximityResult[7]>>8;
    280e:	80 93 cb 08 	sts	0x08CB, r24
					#ifdef HW_REV_3_1
						ackPayload[15] = CHARGE_ON | (BUTTON0 << 1) | (CHARGE_STAT << 2);
    2812:	30 91 03 01 	lds	r19, 0x0103
    2816:	80 91 03 01 	lds	r24, 0x0103
    281a:	20 91 03 01 	lds	r18, 0x0103
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	80 72       	andi	r24, 0x20	; 32
    2822:	90 70       	andi	r25, 0x00	; 0
    2824:	95 95       	asr	r25
    2826:	87 95       	ror	r24
    2828:	95 95       	asr	r25
    282a:	87 95       	ror	r24
    282c:	95 95       	asr	r25
    282e:	87 95       	ror	r24
    2830:	95 95       	asr	r25
    2832:	87 95       	ror	r24
    2834:	95 95       	asr	r25
    2836:	87 95       	ror	r24
    2838:	88 0f       	add	r24, r24
    283a:	99 1f       	adc	r25, r25
    283c:	22 1f       	adc	r18, r18
    283e:	22 27       	eor	r18, r18
    2840:	22 1f       	adc	r18, r18
    2842:	22 0f       	add	r18, r18
    2844:	22 0f       	add	r18, r18
    2846:	28 2b       	or	r18, r24
    2848:	83 2f       	mov	r24, r19
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	80 71       	andi	r24, 0x10	; 16
    284e:	90 70       	andi	r25, 0x00	; 0
    2850:	95 95       	asr	r25
    2852:	87 95       	ror	r24
    2854:	95 95       	asr	r25
    2856:	87 95       	ror	r24
    2858:	95 95       	asr	r25
    285a:	87 95       	ror	r24
    285c:	95 95       	asr	r25
    285e:	87 95       	ror	r24
    2860:	28 2b       	or	r18, r24
    2862:	20 93 cc 08 	sts	0x08CC, r18
					#else
						ackPayload[15] = CHARGE_ON | (BUTTON0 << 1);
					#endif
					packetId = 4;
    2866:	84 e0       	ldi	r24, 0x04	; 4
    2868:	80 93 0b 02 	sts	0x020B, r24
					break;
    286c:	35 ce       	rjmp	.-918    	; 0x24d8 <__stack+0x2d9>
					ackPayload[15] = currentSelector;
					packetId = 6;
					break;

				case 6:
					ackPayload[1] = proximityValue[8]&0xFF;
    286e:	80 91 49 02 	lds	r24, 0x0249
    2872:	90 91 4a 02 	lds	r25, 0x024A
    2876:	80 93 be 08 	sts	0x08BE, r24
					ackPayload[2] = proximityValue[8]>>8;
    287a:	80 91 49 02 	lds	r24, 0x0249
    287e:	90 91 4a 02 	lds	r25, 0x024A
    2882:	90 93 bf 08 	sts	0x08BF, r25
					ackPayload[3] = proximityValue[16]&0xFF;
    2886:	80 91 59 02 	lds	r24, 0x0259
    288a:	90 91 5a 02 	lds	r25, 0x025A
    288e:	80 93 c0 08 	sts	0x08C0, r24
					ackPayload[4] = proximityValue[16]>>8;
    2892:	80 91 59 02 	lds	r24, 0x0259
    2896:	90 91 5a 02 	lds	r25, 0x025A
    289a:	90 93 c1 08 	sts	0x08C1, r25
					ackPayload[5] = proximityValue[18]&0xFF;
    289e:	80 91 5d 02 	lds	r24, 0x025D
    28a2:	90 91 5e 02 	lds	r25, 0x025E
    28a6:	80 93 c2 08 	sts	0x08C2, r24
					ackPayload[6] = proximityValue[18]>>8;
    28aa:	80 91 5d 02 	lds	r24, 0x025D
    28ae:	90 91 5e 02 	lds	r25, 0x025E
    28b2:	90 93 c3 08 	sts	0x08C3, r25
					ackPayload[7] = proximityValue[20]&0xFF;
    28b6:	80 91 61 02 	lds	r24, 0x0261
    28ba:	90 91 62 02 	lds	r25, 0x0262
    28be:	80 93 c4 08 	sts	0x08C4, r24
					ackPayload[8] = proximityValue[20]>>8;
    28c2:	80 91 61 02 	lds	r24, 0x0261
    28c6:	90 91 62 02 	lds	r25, 0x0262
    28ca:	90 93 c5 08 	sts	0x08C5, r25
					ackPayload[9] = proximityValue[22]&0xFF;
    28ce:	80 91 65 02 	lds	r24, 0x0265
    28d2:	90 91 66 02 	lds	r25, 0x0266
    28d6:	80 93 c6 08 	sts	0x08C6, r24
					ackPayload[10] = proximityValue[22]>>8;
    28da:	80 91 65 02 	lds	r24, 0x0265
    28de:	90 91 66 02 	lds	r25, 0x0266
    28e2:	90 93 c7 08 	sts	0x08C7, r25
					ackPayload[11] = accZ&0xFF;
    28e6:	90 91 40 04 	lds	r25, 0x0440
    28ea:	80 91 41 04 	lds	r24, 0x0441
    28ee:	90 93 c8 08 	sts	0x08C8, r25
					ackPayload[12] = accZ>>8;	
    28f2:	80 93 c9 08 	sts	0x08C9, r24
					ackPayload[13] = batteryLevel&0xFF;
    28f6:	90 91 cd 02 	lds	r25, 0x02CD
    28fa:	80 91 ce 02 	lds	r24, 0x02CE
    28fe:	90 93 ca 08 	sts	0x08CA, r25
					ackPayload[14] = batteryLevel>>8;
    2902:	80 93 cb 08 	sts	0x08CB, r24
					ackPayload[15] = 0;
    2906:	10 92 cc 08 	sts	0x08CC, r1
					packetId = 7;
    290a:	87 e0       	ldi	r24, 0x07	; 7
    290c:	80 93 0b 02 	sts	0x020B, r24
					break;
    2910:	e3 cd       	rjmp	.-1082   	; 0x24d8 <__stack+0x2d9>

			//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
			// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
			// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    2912:	25 2f       	mov	r18, r21
    2914:	a4 cc       	rjmp	.-1720   	; 0x225e <__stack+0x5f>
    2916:	80 91 89 09 	lds	r24, 0x0989
    291a:	88 23       	and	r24, r24
    291c:	09 f0       	breq	.+2      	; 0x2920 <__stack+0x721>
    291e:	b7 ce       	rjmp	.-658    	; 0x268e <__stack+0x48f>
    2920:	80 91 8a 09 	lds	r24, 0x098A
    2924:	88 23       	and	r24, r24
    2926:	09 f4       	brne	.+2      	; 0x292a <__stack+0x72b>
    2928:	28 ce       	rjmp	.-944    	; 0x257a <__stack+0x37b>
    292a:	e0 e0       	ldi	r30, 0x00	; 0
    292c:	20 e0       	ldi	r18, 0x00	; 0
    292e:	97 cc       	rjmp	.-1746   	; 0x225e <__stack+0x5f>

00002930 <rfEnableDebugMode>:
	}

}

void rfEnableDebugMode() {
	rfDebugMode = 1;
    2930:	81 e0       	ldi	r24, 0x01	; 1
    2932:	80 93 29 03 	sts	0x0329, r24
	rfDebugCounter = 3;
    2936:	83 e0       	ldi	r24, 0x03	; 3
    2938:	80 93 2a 03 	sts	0x032A, r24
}
    293c:	08 95       	ret

0000293e <rfDisableDebugMode>:

void rfDisableDebugMode() {
	rfDebugMode = 0;
    293e:	10 92 29 03 	sts	0x0329, r1
}
    2942:	08 95       	ret

00002944 <rfDebugSendData>:

void rfDebugSendData() {
	ackPayload[0] = rfDebugCounter;
    2944:	80 91 2a 03 	lds	r24, 0x032A
    2948:	80 93 bd 08 	sts	0x08BD, r24
	while(rfData[0] != rfDebugCounter) {
    294c:	90 91 85 09 	lds	r25, 0x0985
    2950:	89 17       	cp	r24, r25
    2952:	41 f0       	breq	.+16     	; 0x2964 <rfDebugSendData+0x20>
		handleRFCommands();
    2954:	0e 94 cd 10 	call	0x219a	; 0x219a <handleRFCommands>
	rfDebugMode = 0;
}

void rfDebugSendData() {
	ackPayload[0] = rfDebugCounter;
	while(rfData[0] != rfDebugCounter) {
    2958:	80 91 2a 03 	lds	r24, 0x032A
    295c:	90 91 85 09 	lds	r25, 0x0985
    2960:	98 17       	cp	r25, r24
    2962:	c1 f7       	brne	.-16     	; 0x2954 <rfDebugSendData+0x10>
		handleRFCommands();
	}
	ackPayload[0] = 0x00;
    2964:	10 92 bd 08 	sts	0x08BD, r1
	if(rfDebugCounter < 255) {
    2968:	8f 3f       	cpi	r24, 0xFF	; 255
    296a:	21 f0       	breq	.+8      	; 0x2974 <rfDebugSendData+0x30>
		rfDebugCounter++;
    296c:	8f 5f       	subi	r24, 0xFF	; 255
    296e:	80 93 2a 03 	sts	0x032A, r24
    2972:	08 95       	ret
	} else {
		rfDebugCounter = 3;
    2974:	83 e0       	ldi	r24, 0x03	; 3
    2976:	80 93 2a 03 	sts	0x032A, r24
    297a:	08 95       	ret

0000297c <rfDebugNextPacket>:
	}
}

void rfDebugNextPacket() {
	rfDebugCounter = 3;
    297c:	83 e0       	ldi	r24, 0x03	; 3
    297e:	80 93 2a 03 	sts	0x032A, r24
}
    2982:	08 95       	ret

00002984 <init_ir_remote_control>:
static unsigned char check_temp = 0;
unsigned char address = 0;
unsigned char data_ir = 0;
unsigned char check = 2;

void init_ir_remote_control(void) { 	
    2984:	cf 93       	push	r28
    2986:	df 93       	push	r29

	PCICR = 0;
    2988:	c8 e6       	ldi	r28, 0x68	; 104
    298a:	d0 e0       	ldi	r29, 0x00	; 0
    298c:	18 82       	st	Y, r1
	PCMSK1 = 0;
    298e:	ac e6       	ldi	r26, 0x6C	; 108
    2990:	b0 e0       	ldi	r27, 0x00	; 0
    2992:	1c 92       	st	X, r1
	TCCR2A = 0;
    2994:	e0 eb       	ldi	r30, 0xB0	; 176
    2996:	f0 e0       	ldi	r31, 0x00	; 0
    2998:	10 82       	st	Z, r1
	TCCR2B = 0;
    299a:	10 92 b1 00 	sts	0x00B1, r1
	TIMSK2 = 0;
    299e:	10 92 70 00 	sts	0x0070, r1

	PCICR |= (1 << PCIE1);			// enable interrupt on change of PCINT15:8 pins
    29a2:	88 81       	ld	r24, Y
    29a4:	82 60       	ori	r24, 0x02	; 2
    29a6:	88 83       	st	Y, r24
	PCMSK1 |= (1 << PCINT15);		// enable PCINT15
    29a8:	8c 91       	ld	r24, X
    29aa:	80 68       	ori	r24, 0x80	; 128
    29ac:	8c 93       	st	X, r24
	TCCR2A |= (1 << WGM21); 		// mode 2 => CTC mode
    29ae:	80 81       	ld	r24, Z
    29b0:	82 60       	ori	r24, 0x02	; 2
    29b2:	80 83       	st	Z, r24

}
    29b4:	df 91       	pop	r29
    29b6:	cf 91       	pop	r28
    29b8:	08 95       	ret

000029ba <__vector_10>:

// external interrupt service routine
ISR(PCINT1_vect) {
    29ba:	1f 92       	push	r1
    29bc:	0f 92       	push	r0
    29be:	0f b6       	in	r0, 0x3f	; 63
    29c0:	0f 92       	push	r0
    29c2:	11 24       	eor	r1, r1
    29c4:	8f 93       	push	r24

	if(irEnabled) {						// if the robot is configured to accept TV remote commands
    29c6:	80 91 12 02 	lds	r24, 0x0212
    29ca:	88 23       	and	r24, r24
    29cc:	21 f1       	breq	.+72     	; 0x2a16 <__vector_10+0x5c>

		if(bit_is_clear(PINJ, 6)) {		// the interrupt is generated at every pin state change; we only look
    29ce:	80 91 03 01 	lds	r24, 0x0103
    29d2:	86 fd       	sbrc	r24, 6
    29d4:	20 c0       	rjmp	.+64     	; 0x2a16 <__vector_10+0x5c>
										// for the falling edge
			PCICR &= ~(1 << PCIE1);		// disable external interrupt
    29d6:	80 91 68 00 	lds	r24, 0x0068
    29da:	8d 7f       	andi	r24, 0xFD	; 253
    29dc:	80 93 68 00 	sts	0x0068, r24
			PCMSK1 &= ~(1 << PCINT15);
    29e0:	80 91 6c 00 	lds	r24, 0x006C
    29e4:	8f 77       	andi	r24, 0x7F	; 127
    29e6:	80 93 6c 00 	sts	0x006C, r24
		
			// check the pin change isn't due to a glitch; to check this verify that
			// the pin remain low for at least 400 us (the giltches last about 200 us)
			// 0.4 / 0.032 = 13 => 0.416 us
			checkGlitch = 1;							// we're checking if this is a glitch
    29ea:	81 e0       	ldi	r24, 0x01	; 1
    29ec:	80 93 13 02 	sts	0x0213, r24
			OCR2A = 13;									// output compare register
    29f0:	8d e0       	ldi	r24, 0x0D	; 13
    29f2:	80 93 b3 00 	sts	0x00B3, r24
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    29f6:	80 91 b1 00 	lds	r24, 0x00B1
    29fa:	86 60       	ori	r24, 0x06	; 6
    29fc:	80 93 b1 00 	sts	0x00B1, r24
			TIMSK2 |= (1 << OCIE2A);					// enable output compare interrupt
    2a00:	80 91 70 00 	lds	r24, 0x0070
    2a04:	82 60       	ori	r24, 0x02	; 2
    2a06:	80 93 70 00 	sts	0x0070, r24

			check_temp = address_temp = data_temp = 0;
    2a0a:	10 92 30 02 	sts	0x0230, r1
    2a0e:	10 92 31 02 	sts	0x0231, r1
    2a12:	10 92 32 02 	sts	0x0232, r1

		}

	}
	
}
    2a16:	8f 91       	pop	r24
    2a18:	0f 90       	pop	r0
    2a1a:	0f be       	out	0x3f, r0	; 63
    2a1c:	0f 90       	pop	r0
    2a1e:	1f 90       	pop	r1
    2a20:	18 95       	reti

00002a22 <__vector_13>:

ISR(TIMER2_COMPA_vect) {
    2a22:	1f 92       	push	r1
    2a24:	0f 92       	push	r0
    2a26:	0f b6       	in	r0, 0x3f	; 63
    2a28:	0f 92       	push	r0
    2a2a:	11 24       	eor	r1, r1
    2a2c:	2f 93       	push	r18
    2a2e:	3f 93       	push	r19
    2a30:	4f 93       	push	r20
    2a32:	5f 93       	push	r21
    2a34:	8f 93       	push	r24
    2a36:	9f 93       	push	r25

	static int i = -1;

	//PORTB ^= (1 << 5);	// toggle red led

	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);		// stop timer2
    2a38:	80 91 b1 00 	lds	r24, 0x00B1
    2a3c:	88 7f       	andi	r24, 0xF8	; 248
    2a3e:	80 93 b1 00 	sts	0x00B1, r24
	
		if(checkGlitch) {					// if checking this is a glitch
    2a42:	80 91 13 02 	lds	r24, 0x0213
    2a46:	88 23       	and	r24, r24
    2a48:	a9 f0       	breq	.+42     	; 0x2a74 <__vector_13+0x52>

			if(REMOTE) {					// if high it is a glitch
    2a4a:	80 91 03 01 	lds	r24, 0x0103
    2a4e:	86 ff       	sbrs	r24, 6
    2a50:	65 c0       	rjmp	.+202    	; 0x2b1c <__vector_13+0xfa>

				PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    2a52:	80 91 68 00 	lds	r24, 0x0068
    2a56:	82 60       	ori	r24, 0x02	; 2
    2a58:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    2a5c:	80 91 6c 00 	lds	r24, 0x006C
    2a60:	80 68       	ori	r24, 0x80	; 128
    2a62:	80 93 6c 00 	sts	0x006C, r24
				i = -1;			
    2a66:	8f ef       	ldi	r24, 0xFF	; 255
    2a68:	9f ef       	ldi	r25, 0xFF	; 255
    2a6a:	90 93 02 02 	sts	0x0202, r25
    2a6e:	80 93 01 02 	sts	0x0201, r24
    2a72:	49 c0       	rjmp	.+146    	; 0x2b06 <__vector_13+0xe4>
			}

		} else {


			if (i == -1) { 						// start bit confirmed
    2a74:	80 91 01 02 	lds	r24, 0x0201
    2a78:	90 91 02 02 	lds	r25, 0x0202
    2a7c:	2f ef       	ldi	r18, 0xFF	; 255
    2a7e:	8f 3f       	cpi	r24, 0xFF	; 255
    2a80:	92 07       	cpc	r25, r18
    2a82:	09 f4       	brne	.+2      	; 0x2a86 <__vector_13+0x64>
    2a84:	63 c0       	rjmp	.+198    	; 0x2b4c <__vector_13+0x12a>
					check_temp = address_temp = data_temp = 0;
					i=0;

				}

			} else if (i == 1)	{ 						// check bit read and change timer period
    2a86:	81 30       	cpi	r24, 0x01	; 1
    2a88:	91 05       	cpc	r25, r1
    2a8a:	09 f4       	brne	.+2      	; 0x2a8e <__vector_13+0x6c>
    2a8c:	98 c0       	rjmp	.+304    	; 0x2bbe <__vector_13+0x19c>
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
    2a8e:	9c 01       	movw	r18, r24
    2a90:	22 50       	subi	r18, 0x02	; 2
    2a92:	30 40       	sbci	r19, 0x00	; 0
    2a94:	25 30       	cpi	r18, 0x05	; 5
    2a96:	31 05       	cpc	r19, r1
    2a98:	08 f4       	brcc	.+2      	; 0x2a9c <__vector_13+0x7a>
    2a9a:	67 c0       	rjmp	.+206    	; 0x2b6a <__vector_13+0x148>

				unsigned char temp = REMOTE;
				temp <<= 6-i;
				address_temp += temp;

			} else if ((i > 6) && (i < 13 )) { 			// we read data
    2a9c:	9c 01       	movw	r18, r24
    2a9e:	27 50       	subi	r18, 0x07	; 7
    2aa0:	30 40       	sbci	r19, 0x00	; 0
    2aa2:	26 30       	cpi	r18, 0x06	; 6
    2aa4:	31 05       	cpc	r19, r1
    2aa6:	08 f0       	brcs	.+2      	; 0x2aaa <__vector_13+0x88>
    2aa8:	bd c0       	rjmp	.+378    	; 0x2c24 <__vector_13+0x202>

				OCR2A = 54;
    2aaa:	26 e3       	ldi	r18, 0x36	; 54
    2aac:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    2ab0:	20 91 b1 00 	lds	r18, 0x00B1
    2ab4:	26 60       	ori	r18, 0x06	; 6
    2ab6:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    2aba:	20 91 70 00 	lds	r18, 0x0070
    2abe:	22 60       	ori	r18, 0x02	; 2
    2ac0:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    2ac4:	20 91 03 01 	lds	r18, 0x0103
    2ac8:	30 e0       	ldi	r19, 0x00	; 0
    2aca:	20 74       	andi	r18, 0x40	; 64
    2acc:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6+6-i;
    2ace:	00 24       	eor	r0, r0
    2ad0:	22 0f       	add	r18, r18
    2ad2:	33 1f       	adc	r19, r19
    2ad4:	00 1c       	adc	r0, r0
    2ad6:	22 0f       	add	r18, r18
    2ad8:	33 1f       	adc	r19, r19
    2ada:	00 1c       	adc	r0, r0
    2adc:	23 2f       	mov	r18, r19
    2ade:	30 2d       	mov	r19, r0
    2ae0:	4c e0       	ldi	r20, 0x0C	; 12
    2ae2:	50 e0       	ldi	r21, 0x00	; 0
    2ae4:	48 1b       	sub	r20, r24
    2ae6:	59 0b       	sbc	r21, r25
    2ae8:	02 c0       	rjmp	.+4      	; 0x2aee <__vector_13+0xcc>
    2aea:	22 0f       	add	r18, r18
    2aec:	33 1f       	adc	r19, r19
    2aee:	4a 95       	dec	r20
    2af0:	e2 f7       	brpl	.-8      	; 0x2aea <__vector_13+0xc8>
				data_temp += temp;
    2af2:	40 91 30 02 	lds	r20, 0x0230
    2af6:	42 0f       	add	r20, r18
    2af8:	40 93 30 02 	sts	0x0230, r20

				i = -1;
				check = check_temp;
				address = address_temp;
				data_ir = data_temp;
				command_received=1;
    2afc:	01 96       	adiw	r24, 0x01	; 1

		}
	
		if(i!=-1) {

			i++;
    2afe:	90 93 02 02 	sts	0x0202, r25
    2b02:	80 93 01 02 	sts	0x0201, r24

		}

}
    2b06:	9f 91       	pop	r25
    2b08:	8f 91       	pop	r24
    2b0a:	5f 91       	pop	r21
    2b0c:	4f 91       	pop	r20
    2b0e:	3f 91       	pop	r19
    2b10:	2f 91       	pop	r18
    2b12:	0f 90       	pop	r0
    2b14:	0f be       	out	0x3f, r0	; 63
    2b16:	0f 90       	pop	r0
    2b18:	1f 90       	pop	r1
    2b1a:	18 95       	reti
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
				i = -1;			

			} else {						// not a glitch => real command received

				checkGlitch = 0;
    2b1c:	10 92 13 02 	sts	0x0213, r1

				// activate the IR Receiver with a 2.1 ms cycle value
				// we set the resolution of the timer to be 0.032 ms (prescaler 1/256) so:
				// 2.1 / 0.032 = 64 to be set in the output compare register (=> 2.048 ms)
				// but we already wait 0.416 us => 13, so 64-13=51
				OCR2A = 51;								// output compare register
    2b20:	83 e3       	ldi	r24, 0x33	; 51
    2b22:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    2b26:	80 91 b1 00 	lds	r24, 0x00B1
    2b2a:	86 60       	ori	r24, 0x06	; 6
    2b2c:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    2b30:	80 91 70 00 	lds	r24, 0x0070
    2b34:	82 60       	ori	r24, 0x02	; 2
    2b36:	80 93 70 00 	sts	0x0070, r24
    2b3a:	80 91 01 02 	lds	r24, 0x0201
    2b3e:	90 91 02 02 	lds	r25, 0x0202

			} 

		}
	
		if(i!=-1) {
    2b42:	2f ef       	ldi	r18, 0xFF	; 255
    2b44:	8f 3f       	cpi	r24, 0xFF	; 255
    2b46:	92 07       	cpc	r25, r18
    2b48:	c9 f6       	brne	.-78     	; 0x2afc <__vector_13+0xda>
    2b4a:	dd cf       	rjmp	.-70     	; 0x2b06 <__vector_13+0xe4>
		} else {


			if (i == -1) { 						// start bit confirmed

				if(REMOTE) {					// double check => if high it is only a noise
    2b4c:	20 91 03 01 	lds	r18, 0x0103
    2b50:	26 ff       	sbrs	r18, 6
    2b52:	52 c0       	rjmp	.+164    	; 0x2bf8 <__vector_13+0x1d6>

					PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    2b54:	20 91 68 00 	lds	r18, 0x0068
    2b58:	22 60       	ori	r18, 0x02	; 2
    2b5a:	20 93 68 00 	sts	0x0068, r18
					PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    2b5e:	20 91 6c 00 	lds	r18, 0x006C
    2b62:	20 68       	ori	r18, 0x80	; 128
    2b64:	20 93 6c 00 	sts	0x006C, r18
    2b68:	ce cf       	rjmp	.-100    	; 0x2b06 <__vector_13+0xe4>
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
		
				OCR2A = 54;
    2b6a:	26 e3       	ldi	r18, 0x36	; 54
    2b6c:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    2b70:	20 91 b1 00 	lds	r18, 0x00B1
    2b74:	26 60       	ori	r18, 0x06	; 6
    2b76:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    2b7a:	20 91 70 00 	lds	r18, 0x0070
    2b7e:	22 60       	ori	r18, 0x02	; 2
    2b80:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    2b84:	20 91 03 01 	lds	r18, 0x0103
    2b88:	30 e0       	ldi	r19, 0x00	; 0
    2b8a:	20 74       	andi	r18, 0x40	; 64
    2b8c:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6-i;
    2b8e:	00 24       	eor	r0, r0
    2b90:	22 0f       	add	r18, r18
    2b92:	33 1f       	adc	r19, r19
    2b94:	00 1c       	adc	r0, r0
    2b96:	22 0f       	add	r18, r18
    2b98:	33 1f       	adc	r19, r19
    2b9a:	00 1c       	adc	r0, r0
    2b9c:	23 2f       	mov	r18, r19
    2b9e:	30 2d       	mov	r19, r0
    2ba0:	46 e0       	ldi	r20, 0x06	; 6
    2ba2:	50 e0       	ldi	r21, 0x00	; 0
    2ba4:	48 1b       	sub	r20, r24
    2ba6:	59 0b       	sbc	r21, r25
    2ba8:	02 c0       	rjmp	.+4      	; 0x2bae <__vector_13+0x18c>
    2baa:	22 0f       	add	r18, r18
    2bac:	33 1f       	adc	r19, r19
    2bae:	4a 95       	dec	r20
    2bb0:	e2 f7       	brpl	.-8      	; 0x2baa <__vector_13+0x188>
				address_temp += temp;
    2bb2:	40 91 31 02 	lds	r20, 0x0231
    2bb6:	42 0f       	add	r20, r18
    2bb8:	40 93 31 02 	sts	0x0231, r20
    2bbc:	9f cf       	rjmp	.-194    	; 0x2afc <__vector_13+0xda>

				}

			} else if (i == 1)	{ 						// check bit read and change timer period

				check_temp = REMOTE;	   				// read the check bit
    2bbe:	20 91 03 01 	lds	r18, 0x0103
    2bc2:	30 e0       	ldi	r19, 0x00	; 0
    2bc4:	20 74       	andi	r18, 0x40	; 64
    2bc6:	30 70       	andi	r19, 0x00	; 0
    2bc8:	02 2e       	mov	r0, r18
    2bca:	23 2f       	mov	r18, r19
    2bcc:	00 0c       	add	r0, r0
    2bce:	22 1f       	adc	r18, r18
    2bd0:	33 0b       	sbc	r19, r19
    2bd2:	00 0c       	add	r0, r0
    2bd4:	22 1f       	adc	r18, r18
    2bd6:	33 1f       	adc	r19, r19
    2bd8:	20 93 32 02 	sts	0x0232, r18
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
    2bdc:	26 e3       	ldi	r18, 0x36	; 54
    2bde:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    2be2:	20 91 b1 00 	lds	r18, 0x00B1
    2be6:	26 60       	ori	r18, 0x06	; 6
    2be8:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    2bec:	20 91 70 00 	lds	r18, 0x0070
    2bf0:	22 60       	ori	r18, 0x02	; 2
    2bf2:	20 93 70 00 	sts	0x0070, r18
    2bf6:	82 cf       	rjmp	.-252    	; 0x2afc <__vector_13+0xda>

				} else {	// read the check bit
			
					//cycle value is 0.9 ms to go to check bit so:
					// 0.9 / 0.032 = 28 => 0.896
					OCR2A = 28;								// output compare register
    2bf8:	8c e1       	ldi	r24, 0x1C	; 28
    2bfa:	80 93 b3 00 	sts	0x00B3, r24
					TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    2bfe:	80 91 b1 00 	lds	r24, 0x00B1
    2c02:	86 60       	ori	r24, 0x06	; 6
    2c04:	80 93 b1 00 	sts	0x00B1, r24
					TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt					
    2c08:	80 91 70 00 	lds	r24, 0x0070
    2c0c:	82 60       	ori	r24, 0x02	; 2
    2c0e:	80 93 70 00 	sts	0x0070, r24

					check_temp = address_temp = data_temp = 0;
    2c12:	10 92 30 02 	sts	0x0230, r1
    2c16:	10 92 31 02 	sts	0x0231, r1
    2c1a:	10 92 32 02 	sts	0x0232, r1
    2c1e:	81 e0       	ldi	r24, 0x01	; 1
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	6d cf       	rjmp	.-294    	; 0x2afe <__vector_13+0xdc>

				unsigned char temp = REMOTE;
				temp <<= 6+6-i;
				data_temp += temp;

			} else if (i == 13) { 						// last bit read
    2c24:	8d 30       	cpi	r24, 0x0D	; 13
    2c26:	91 05       	cpc	r25, r1
    2c28:	09 f0       	breq	.+2      	; 0x2c2c <__vector_13+0x20a>
    2c2a:	68 cf       	rjmp	.-304    	; 0x2afc <__vector_13+0xda>
				
				TIMSK2 = 0;								// disable all interrupt for timer2
    2c2c:	10 92 70 00 	sts	0x0070, r1
				PCICR |= (1 << PCIE1);					// enable external interrupt to receive next command
    2c30:	80 91 68 00 	lds	r24, 0x0068
    2c34:	82 60       	ori	r24, 0x02	; 2
    2c36:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);				// clear interrupt flag
    2c3a:	80 91 6c 00 	lds	r24, 0x006C
    2c3e:	80 68       	ori	r24, 0x80	; 128
    2c40:	80 93 6c 00 	sts	0x006C, r24

				i = -1;
    2c44:	8f ef       	ldi	r24, 0xFF	; 255
    2c46:	9f ef       	ldi	r25, 0xFF	; 255
    2c48:	90 93 02 02 	sts	0x0202, r25
    2c4c:	80 93 01 02 	sts	0x0201, r24
				check = check_temp;
    2c50:	80 91 32 02 	lds	r24, 0x0232
    2c54:	80 93 00 02 	sts	0x0200, r24
				address = address_temp;
    2c58:	80 91 31 02 	lds	r24, 0x0231
    2c5c:	80 93 2e 02 	sts	0x022E, r24
				data_ir = data_temp;
    2c60:	80 91 30 02 	lds	r24, 0x0230
    2c64:	80 93 2f 02 	sts	0x022F, r24
				command_received=1;
    2c68:	81 e0       	ldi	r24, 0x01	; 1
    2c6a:	80 93 38 04 	sts	0x0438, r24
    2c6e:	4b cf       	rjmp	.-362    	; 0x2b06 <__vector_13+0xe4>

00002c70 <ir_remote_get_check>:

}

unsigned char ir_remote_get_check(void) {
	return check;
}
    2c70:	80 91 00 02 	lds	r24, 0x0200
    2c74:	08 95       	ret

00002c76 <ir_remote_get_address>:

unsigned char ir_remote_get_address(void) {
	return address;
}
    2c76:	80 91 2e 02 	lds	r24, 0x022E
    2c7a:	08 95       	ret

00002c7c <ir_remote_get_data>:

unsigned char ir_remote_get_data(void) {
	return data_ir;
}
    2c7c:	80 91 2f 02 	lds	r24, 0x022F
    2c80:	08 95       	ret

00002c82 <handleIRRemoteCommands>:

void handleIRRemoteCommands() {

	if(irEnabled) {
    2c82:	80 91 12 02 	lds	r24, 0x0212
    2c86:	88 23       	and	r24, r24
    2c88:	51 f1       	breq	.+84     	; 0x2cde <handleIRRemoteCommands+0x5c>

		if(command_received) {
    2c8a:	80 91 38 04 	lds	r24, 0x0438
    2c8e:	88 23       	and	r24, r24
    2c90:	31 f1       	breq	.+76     	; 0x2cde <handleIRRemoteCommands+0x5c>
unsigned char ir_remote_get_address(void) {
	return address;
}

unsigned char ir_remote_get_data(void) {
	return data_ir;
    2c92:	e0 91 2f 02 	lds	r30, 0x022F

	if(irEnabled) {

		if(command_received) {

            irCommand = ir_remote_get_data();
    2c96:	e0 93 37 04 	sts	0x0437, r30

		    //usartTransmit(irCommand);

			command_received = 0;
    2c9a:	10 92 38 04 	sts	0x0438, r1

			switch(irCommand) {
    2c9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ca0:	e5 33       	cpi	r30, 0x35	; 53
    2ca2:	f1 05       	cpc	r31, r1
    2ca4:	e8 f0       	brcs	.+58     	; 0x2ce0 <handleIRRemoteCommands+0x5e>
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 1;
							break;
						case 3:
							obstacleAvoidanceEnabled = 1;
							cliffAvoidanceEnabled = 1;
    2ca6:	20 91 09 03 	lds	r18, 0x0309
    2caa:	30 91 0a 03 	lds	r19, 0x030A
    2cae:	80 91 0b 03 	lds	r24, 0x030B
    2cb2:	90 91 0c 03 	lds	r25, 0x030C
	               	break;

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
    2cb6:	37 fd       	sbrc	r19, 7
    2cb8:	b9 c1       	rjmp	.+882    	; 0x302c <handleIRRemoteCommands+0x3aa>
				speedr = pwm_right_desired;
			} else {
				speedr = (-pwm_right_desired);
    2cba:	30 93 24 03 	sts	0x0324, r19
    2cbe:	20 93 23 03 	sts	0x0323, r18
			}
			if(pwm_left_desired >= 0) {
    2cc2:	97 fd       	sbrc	r25, 7
    2cc4:	05 c0       	rjmp	.+10     	; 0x2cd0 <handleIRRemoteCommands+0x4e>
				speedl = pwm_left_desired;
    2cc6:	90 93 22 03 	sts	0x0322, r25
    2cca:	80 93 21 03 	sts	0x0321, r24
    2cce:	08 95       	ret
			} else {
				speedl = (-pwm_left_desired);
    2cd0:	90 95       	com	r25
    2cd2:	81 95       	neg	r24
    2cd4:	9f 4f       	sbci	r25, 0xFF	; 255
    2cd6:	90 93 22 03 	sts	0x0322, r25
    2cda:	80 93 21 03 	sts	0x0321, r24
    2cde:	08 95       	ret

		    //usartTransmit(irCommand);

			command_received = 0;

			switch(irCommand) {
    2ce0:	ee 58       	subi	r30, 0x8E	; 142
    2ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce4:	ee 0f       	add	r30, r30
    2ce6:	ff 1f       	adc	r31, r31
    2ce8:	05 90       	lpm	r0, Z+
    2cea:	f4 91       	lpm	r31, Z+
    2cec:	e0 2d       	mov	r30, r0
    2cee:	19 94       	eijmp
						case 0:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 0;
							break;
						case 1:
							obstacleAvoidanceEnabled = 1;
    2cf0:	80 93 7c 04 	sts	0x047C, r24
							cliffAvoidanceEnabled = 0;
    2cf4:	10 92 7d 04 	sts	0x047D, r1
    2cf8:	20 91 09 03 	lds	r18, 0x0309
    2cfc:	30 91 0a 03 	lds	r19, 0x030A
    2d00:	80 91 0b 03 	lds	r24, 0x030B
    2d04:	90 91 0c 03 	lds	r25, 0x030C
							break;
    2d08:	d6 cf       	rjmp	.-84     	; 0x2cb6 <handleIRRemoteCommands+0x34>
						case 2:
							obstacleAvoidanceEnabled = 0;
    2d0a:	10 92 7c 04 	sts	0x047C, r1
							cliffAvoidanceEnabled = 1;
    2d0e:	81 e0       	ldi	r24, 0x01	; 1
    2d10:	80 93 7d 04 	sts	0x047D, r24
    2d14:	20 91 09 03 	lds	r18, 0x0309
    2d18:	30 91 0a 03 	lds	r19, 0x030A
    2d1c:	80 91 0b 03 	lds	r24, 0x030B
    2d20:	90 91 0c 03 	lds	r25, 0x030C
							break;
    2d24:	c8 cf       	rjmp	.-112    	; 0x2cb6 <handleIRRemoteCommands+0x34>
				case 33:	// program -
					cliffAvoidanceEnabled = 0;
					break;

				case 52:	// av/tv button
					behaviorState = (behaviorState+1)%4;
    2d26:	80 91 3a 04 	lds	r24, 0x043A
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	01 96       	adiw	r24, 0x01	; 1
    2d2e:	83 70       	andi	r24, 0x03	; 3
    2d30:	90 70       	andi	r25, 0x00	; 0
    2d32:	80 93 3a 04 	sts	0x043A, r24
					switch(behaviorState) {
    2d36:	82 30       	cpi	r24, 0x02	; 2
    2d38:	41 f3       	breq	.-48     	; 0x2d0a <handleIRRemoteCommands+0x88>
    2d3a:	83 30       	cpi	r24, 0x03	; 3
    2d3c:	09 f4       	brne	.+2      	; 0x2d40 <handleIRRemoteCommands+0xbe>
    2d3e:	8a c1       	rjmp	.+788    	; 0x3054 <handleIRRemoteCommands+0x3d2>
    2d40:	81 30       	cpi	r24, 0x01	; 1
    2d42:	b1 f2       	breq	.-84     	; 0x2cf0 <handleIRRemoteCommands+0x6e>
						case 0:
							obstacleAvoidanceEnabled = 0;
    2d44:	10 92 7c 04 	sts	0x047C, r1
							cliffAvoidanceEnabled = 0;
    2d48:	10 92 7d 04 	sts	0x047D, r1
    2d4c:	20 91 09 03 	lds	r18, 0x0309
    2d50:	30 91 0a 03 	lds	r19, 0x030A
    2d54:	80 91 0b 03 	lds	r24, 0x030B
    2d58:	90 91 0c 03 	lds	r25, 0x030C
							break;
    2d5c:	ac cf       	rjmp	.-168    	; 0x2cb6 <handleIRRemoteCommands+0x34>
				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
					break;

				case 17:	// volume -
					obstacleAvoidanceEnabled = 0;
    2d5e:	10 92 7c 04 	sts	0x047C, r1
    2d62:	20 91 09 03 	lds	r18, 0x0309
    2d66:	30 91 0a 03 	lds	r19, 0x030A
    2d6a:	80 91 0b 03 	lds	r24, 0x030B
    2d6e:	90 91 0c 03 	lds	r25, 0x030C
					break;
    2d72:	a1 cf       	rjmp	.-190    	; 0x2cb6 <handleIRRemoteCommands+0x34>
					pwm_right_desired += STEP_MOTORS;
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
					break;

				case 9:	// left motor backward
					pwm_left_desired -= STEP_MOTORS;
    2d74:	80 91 0b 03 	lds	r24, 0x030B
    2d78:	90 91 0c 03 	lds	r25, 0x030C
    2d7c:	02 97       	sbiw	r24, 0x02	; 2
    2d7e:	90 93 0c 03 	sts	0x030C, r25
    2d82:	80 93 0b 03 	sts	0x030B, r24
	           	    if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    2d86:	2e ef       	ldi	r18, 0xFE	; 254
    2d88:	80 30       	cpi	r24, 0x00	; 0
    2d8a:	92 07       	cpc	r25, r18
    2d8c:	9c f5       	brge	.+102    	; 0x2df4 <handleIRRemoteCommands+0x172>
    2d8e:	80 e0       	ldi	r24, 0x00	; 0
    2d90:	9e ef       	ldi	r25, 0xFE	; 254
    2d92:	90 93 0c 03 	sts	0x030C, r25
    2d96:	80 93 0b 03 	sts	0x030B, r24
    2d9a:	20 91 09 03 	lds	r18, 0x0309
    2d9e:	30 91 0a 03 	lds	r19, 0x030A
    2da2:	89 cf       	rjmp	.-238    	; 0x2cb6 <handleIRRemoteCommands+0x34>
    	            if (pwm_left_desired > (MAX_MOTORS_PWM/2)) pwm_left_desired = (MAX_MOTORS_PWM/2);
               		break;

				case 8:	// both motors backward
				case 30:
					if(pwm_right_desired < pwm_left) {
    2da4:	20 91 09 03 	lds	r18, 0x0309
    2da8:	30 91 0a 03 	lds	r19, 0x030A
    2dac:	80 91 07 03 	lds	r24, 0x0307
    2db0:	90 91 08 03 	lds	r25, 0x0308
    2db4:	28 17       	cp	r18, r24
    2db6:	39 07       	cpc	r19, r25
    2db8:	24 f0       	brlt	.+8      	; 0x2dc2 <handleIRRemoteCommands+0x140>
						pwm_left_desired  = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
    2dba:	20 91 0b 03 	lds	r18, 0x030B
    2dbe:	30 91 0c 03 	lds	r19, 0x030C
					}
					pwm_right_desired -= STEP_MOTORS;
    2dc2:	22 50       	subi	r18, 0x02	; 2
    2dc4:	30 40       	sbci	r19, 0x00	; 0
    2dc6:	30 93 0a 03 	sts	0x030A, r19
    2dca:	20 93 09 03 	sts	0x0309, r18
					pwm_left_desired -= STEP_MOTORS;
    2dce:	c9 01       	movw	r24, r18
    2dd0:	30 93 0c 03 	sts	0x030C, r19
    2dd4:	20 93 0b 03 	sts	0x030B, r18
	                if (pwm_right_desired < -(MAX_MOTORS_PWM/2)) pwm_right_desired = -(MAX_MOTORS_PWM/2);
    2dd8:	4e ef       	ldi	r20, 0xFE	; 254
    2dda:	20 30       	cpi	r18, 0x00	; 0
    2ddc:	34 07       	cpc	r19, r20
    2dde:	34 f4       	brge	.+12     	; 0x2dec <handleIRRemoteCommands+0x16a>
    2de0:	40 e0       	ldi	r20, 0x00	; 0
    2de2:	5e ef       	ldi	r21, 0xFE	; 254
    2de4:	50 93 0a 03 	sts	0x030A, r21
    2de8:	40 93 09 03 	sts	0x0309, r20
    	            if (pwm_left_desired < -(MAX_MOTORS_PWM/2)) pwm_left_desired = -(MAX_MOTORS_PWM/2);
    2dec:	4e ef       	ldi	r20, 0xFE	; 254
    2dee:	20 30       	cpi	r18, 0x00	; 0
    2df0:	34 07       	cpc	r19, r20
    2df2:	6c f2       	brlt	.-102    	; 0x2d8e <handleIRRemoteCommands+0x10c>
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    2df4:	20 91 09 03 	lds	r18, 0x0309
    2df8:	30 91 0a 03 	lds	r19, 0x030A
    2dfc:	5c cf       	rjmp	.-328    	; 0x2cb6 <handleIRRemoteCommands+0x34>
					updateBlueLed(pwm_blue);

	               	break;

				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
    2dfe:	81 e0       	ldi	r24, 0x01	; 1
    2e00:	80 93 7c 04 	sts	0x047C, r24
    2e04:	20 91 09 03 	lds	r18, 0x0309
    2e08:	30 91 0a 03 	lds	r19, 0x030A
    2e0c:	80 91 0b 03 	lds	r24, 0x030B
    2e10:	90 91 0c 03 	lds	r25, 0x030C
					break;
    2e14:	50 cf       	rjmp	.-352    	; 0x2cb6 <handleIRRemoteCommands+0x34>
					pwm_left_desired -= STEP_MOTORS;
	           	    if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 7:	// right motor backward
					pwm_right_desired -= STEP_MOTORS;
    2e16:	20 91 09 03 	lds	r18, 0x0309
    2e1a:	30 91 0a 03 	lds	r19, 0x030A
    2e1e:	22 50       	subi	r18, 0x02	; 2
    2e20:	30 40       	sbci	r19, 0x00	; 0
    2e22:	30 93 0a 03 	sts	0x030A, r19
    2e26:	20 93 09 03 	sts	0x0309, r18
	               	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    2e2a:	4e ef       	ldi	r20, 0xFE	; 254
    2e2c:	20 30       	cpi	r18, 0x00	; 0
    2e2e:	34 07       	cpc	r19, r20
    2e30:	0c f0       	brlt	.+2      	; 0x2e34 <handleIRRemoteCommands+0x1b2>
    2e32:	3d cf       	rjmp	.-390    	; 0x2cae <handleIRRemoteCommands+0x2c>
    2e34:	80 e0       	ldi	r24, 0x00	; 0
    2e36:	9e ef       	ldi	r25, 0xFE	; 254
    2e38:	90 93 0a 03 	sts	0x030A, r25
    2e3c:	80 93 09 03 	sts	0x0309, r24
    2e40:	80 91 0b 03 	lds	r24, 0x030B
    2e44:	90 91 0c 03 	lds	r25, 0x030C
    2e48:	20 e0       	ldi	r18, 0x00	; 0
    2e4a:	32 e0       	ldi	r19, 0x02	; 2
    2e4c:	36 cf       	rjmp	.-404    	; 0x2cba <handleIRRemoteCommands+0x38>
    	            if (pwm_left_desired < -(MAX_MOTORS_PWM/2)) pwm_left_desired = -(MAX_MOTORS_PWM/2);
                  	break;

				case 6:	// both motors right
				case 47:
					pwm_right_desired -= STEP_MOTORS;
    2e4e:	20 91 09 03 	lds	r18, 0x0309
    2e52:	30 91 0a 03 	lds	r19, 0x030A
    2e56:	22 50       	subi	r18, 0x02	; 2
    2e58:	30 40       	sbci	r19, 0x00	; 0
    2e5a:	30 93 0a 03 	sts	0x030A, r19
    2e5e:	20 93 09 03 	sts	0x0309, r18
					pwm_left_desired += STEP_MOTORS;
    2e62:	80 91 0b 03 	lds	r24, 0x030B
    2e66:	90 91 0c 03 	lds	r25, 0x030C
    2e6a:	02 96       	adiw	r24, 0x02	; 2
    2e6c:	90 93 0c 03 	sts	0x030C, r25
    2e70:	80 93 0b 03 	sts	0x030B, r24
                	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    2e74:	4e ef       	ldi	r20, 0xFE	; 254
    2e76:	20 30       	cpi	r18, 0x00	; 0
    2e78:	34 07       	cpc	r19, r20
    2e7a:	34 f4       	brge	.+12     	; 0x2e88 <handleIRRemoteCommands+0x206>
    2e7c:	20 e0       	ldi	r18, 0x00	; 0
    2e7e:	3e ef       	ldi	r19, 0xFE	; 254
    2e80:	30 93 0a 03 	sts	0x030A, r19
    2e84:	20 93 09 03 	sts	0x0309, r18
                	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    2e88:	42 e0       	ldi	r20, 0x02	; 2
    2e8a:	81 30       	cpi	r24, 0x01	; 1
    2e8c:	94 07       	cpc	r25, r20
    2e8e:	0c f4       	brge	.+2      	; 0x2e92 <handleIRRemoteCommands+0x210>
    2e90:	12 cf       	rjmp	.-476    	; 0x2cb6 <handleIRRemoteCommands+0x34>
    2e92:	80 e0       	ldi	r24, 0x00	; 0
    2e94:	92 e0       	ldi	r25, 0x02	; 2
    2e96:	90 93 0c 03 	sts	0x030C, r25
    2e9a:	80 93 0b 03 	sts	0x030B, r24
    2e9e:	0b cf       	rjmp	.-490    	; 0x2cb6 <handleIRRemoteCommands+0x34>
			switch(irCommand) {
				// sometimes there are two cases for the same command because two different
				// remote controls are used; one of this do not contain "numbers"
				case 5:	// stop motors
				case 51:
					pwm_right_desired = 0;
    2ea0:	10 92 0a 03 	sts	0x030A, r1
    2ea4:	10 92 09 03 	sts	0x0309, r1
					pwm_left_desired = 0;
    2ea8:	10 92 0c 03 	sts	0x030C, r1
    2eac:	10 92 0b 03 	sts	0x030B, r1
					if(currentSelector == 8) {
    2eb0:	80 91 5c 04 	lds	r24, 0x045C
    2eb4:	88 30       	cpi	r24, 0x08	; 8
    2eb6:	09 f4       	brne	.+2      	; 0x2eba <handleIRRemoteCommands+0x238>
    2eb8:	db c0       	rjmp	.+438    	; 0x3070 <handleIRRemoteCommands+0x3ee>
    2eba:	80 e0       	ldi	r24, 0x00	; 0
    2ebc:	90 e0       	ldi	r25, 0x00	; 0
    2ebe:	20 e0       	ldi	r18, 0x00	; 0
    2ec0:	30 e0       	ldi	r19, 0x00	; 0
    2ec2:	fb ce       	rjmp	.-522    	; 0x2cba <handleIRRemoteCommands+0x38>
                	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
					break;

				case 4:	// both motors left
				case 46:
					pwm_right_desired += STEP_MOTORS;
    2ec4:	20 91 09 03 	lds	r18, 0x0309
    2ec8:	30 91 0a 03 	lds	r19, 0x030A
    2ecc:	2e 5f       	subi	r18, 0xFE	; 254
    2ece:	3f 4f       	sbci	r19, 0xFF	; 255
    2ed0:	30 93 0a 03 	sts	0x030A, r19
    2ed4:	20 93 09 03 	sts	0x0309, r18
					pwm_left_desired -= STEP_MOTORS;
    2ed8:	80 91 0b 03 	lds	r24, 0x030B
    2edc:	90 91 0c 03 	lds	r25, 0x030C
    2ee0:	02 97       	sbiw	r24, 0x02	; 2
    2ee2:	90 93 0c 03 	sts	0x030C, r25
    2ee6:	80 93 0b 03 	sts	0x030B, r24
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    2eea:	42 e0       	ldi	r20, 0x02	; 2
    2eec:	21 30       	cpi	r18, 0x01	; 1
    2eee:	34 07       	cpc	r19, r20
    2ef0:	34 f0       	brlt	.+12     	; 0x2efe <handleIRRemoteCommands+0x27c>
    2ef2:	20 e0       	ldi	r18, 0x00	; 0
    2ef4:	32 e0       	ldi	r19, 0x02	; 2
    2ef6:	30 93 0a 03 	sts	0x030A, r19
    2efa:	20 93 09 03 	sts	0x0309, r18
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    2efe:	4e ef       	ldi	r20, 0xFE	; 254
    2f00:	80 30       	cpi	r24, 0x00	; 0
    2f02:	94 07       	cpc	r25, r20
    2f04:	0c f0       	brlt	.+2      	; 0x2f08 <handleIRRemoteCommands+0x286>
    2f06:	d7 ce       	rjmp	.-594    	; 0x2cb6 <handleIRRemoteCommands+0x34>
    2f08:	80 e0       	ldi	r24, 0x00	; 0
    2f0a:	9e ef       	ldi	r25, 0xFE	; 254
    2f0c:	90 93 0c 03 	sts	0x030C, r25
    2f10:	80 93 0b 03 	sts	0x030B, r24
    2f14:	d0 ce       	rjmp	.-608    	; 0x2cb6 <handleIRRemoteCommands+0x34>
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
    2f16:	80 91 0b 03 	lds	r24, 0x030B
    2f1a:	90 91 0c 03 	lds	r25, 0x030C
    2f1e:	02 96       	adiw	r24, 0x02	; 2
    2f20:	90 93 0c 03 	sts	0x030C, r25
    2f24:	80 93 0b 03 	sts	0x030B, r24
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    2f28:	22 e0       	ldi	r18, 0x02	; 2
    2f2a:	81 30       	cpi	r24, 0x01	; 1
    2f2c:	92 07       	cpc	r25, r18
    2f2e:	0c f4       	brge	.+2      	; 0x2f32 <handleIRRemoteCommands+0x2b0>
    2f30:	61 cf       	rjmp	.-318    	; 0x2df4 <handleIRRemoteCommands+0x172>
    2f32:	80 e0       	ldi	r24, 0x00	; 0
    2f34:	92 e0       	ldi	r25, 0x02	; 2
    2f36:	90 93 0c 03 	sts	0x030C, r25
    2f3a:	80 93 0b 03 	sts	0x030B, r24
    2f3e:	5a cf       	rjmp	.-332    	; 0x2df4 <handleIRRemoteCommands+0x172>
					}
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    2f40:	20 91 09 03 	lds	r18, 0x0309
    2f44:	30 91 0a 03 	lds	r19, 0x030A
    2f48:	80 91 0b 03 	lds	r24, 0x030B
    2f4c:	90 91 0c 03 	lds	r25, 0x030C
    2f50:	82 17       	cp	r24, r18
    2f52:	93 07       	cpc	r25, r19
    2f54:	0c f4       	brge	.+2      	; 0x2f58 <handleIRRemoteCommands+0x2d6>
    2f56:	6e c0       	rjmp	.+220    	; 0x3034 <handleIRRemoteCommands+0x3b2>
    2f58:	9c 01       	movw	r18, r24
						pwm_left_desired = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
					}
					pwm_right_desired += STEP_MOTORS;
    2f5a:	2e 5f       	subi	r18, 0xFE	; 254
    2f5c:	3f 4f       	sbci	r19, 0xFF	; 255
    2f5e:	30 93 0a 03 	sts	0x030A, r19
    2f62:	20 93 09 03 	sts	0x0309, r18
					pwm_left_desired += STEP_MOTORS;
    2f66:	02 96       	adiw	r24, 0x02	; 2
    2f68:	90 93 0c 03 	sts	0x030C, r25
    2f6c:	80 93 0b 03 	sts	0x030B, r24
	                if (pwm_right_desired > (MAX_MOTORS_PWM/2)) pwm_right_desired = (MAX_MOTORS_PWM/2);
    2f70:	42 e0       	ldi	r20, 0x02	; 2
    2f72:	21 30       	cpi	r18, 0x01	; 1
    2f74:	34 07       	cpc	r19, r20
    2f76:	34 f0       	brlt	.+12     	; 0x2f84 <handleIRRemoteCommands+0x302>
    2f78:	20 e0       	ldi	r18, 0x00	; 0
    2f7a:	32 e0       	ldi	r19, 0x02	; 2
    2f7c:	30 93 0a 03 	sts	0x030A, r19
    2f80:	20 93 09 03 	sts	0x0309, r18
    	            if (pwm_left_desired > (MAX_MOTORS_PWM/2)) pwm_left_desired = (MAX_MOTORS_PWM/2);
    2f84:	22 e0       	ldi	r18, 0x02	; 2
    2f86:	81 30       	cpi	r24, 0x01	; 1
    2f88:	92 07       	cpc	r25, r18
    2f8a:	0c f4       	brge	.+2      	; 0x2f8e <handleIRRemoteCommands+0x30c>
    2f8c:	33 cf       	rjmp	.-410    	; 0x2df4 <handleIRRemoteCommands+0x172>
    2f8e:	80 e0       	ldi	r24, 0x00	; 0
    2f90:	92 e0       	ldi	r25, 0x02	; 2
    2f92:	90 93 0c 03 	sts	0x030C, r25
    2f96:	80 93 0b 03 	sts	0x030B, r24
    2f9a:	20 91 09 03 	lds	r18, 0x0309
    2f9e:	30 91 0a 03 	lds	r19, 0x030A
    2fa2:	89 ce       	rjmp	.-750    	; 0x2cb6 <handleIRRemoteCommands+0x34>
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
					break;

				case 1:	// right motor forward
					pwm_right_desired += STEP_MOTORS;
    2fa4:	20 91 09 03 	lds	r18, 0x0309
    2fa8:	30 91 0a 03 	lds	r19, 0x030A
    2fac:	2e 5f       	subi	r18, 0xFE	; 254
    2fae:	3f 4f       	sbci	r19, 0xFF	; 255
    2fb0:	30 93 0a 03 	sts	0x030A, r19
    2fb4:	20 93 09 03 	sts	0x0309, r18
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    2fb8:	42 e0       	ldi	r20, 0x02	; 2
    2fba:	21 30       	cpi	r18, 0x01	; 1
    2fbc:	34 07       	cpc	r19, r20
    2fbe:	0c f4       	brge	.+2      	; 0x2fc2 <handleIRRemoteCommands+0x340>
    2fc0:	76 ce       	rjmp	.-788    	; 0x2cae <handleIRRemoteCommands+0x2c>
    2fc2:	80 e0       	ldi	r24, 0x00	; 0
    2fc4:	92 e0       	ldi	r25, 0x02	; 2
    2fc6:	90 93 0a 03 	sts	0x030A, r25
    2fca:	80 93 09 03 	sts	0x0309, r24
    2fce:	80 91 0b 03 	lds	r24, 0x030B
    2fd2:	90 91 0c 03 	lds	r25, 0x030C
	               	break;

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
    2fd6:	20 e0       	ldi	r18, 0x00	; 0
    2fd8:	32 e0       	ldi	r19, 0x02	; 2
    2fda:	6f ce       	rjmp	.-802    	; 0x2cba <handleIRRemoteCommands+0x38>
	               	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
					break;

	           	case 0:	// colors
				case 50:
					colorState = (colorState+1)%5;
    2fdc:	80 91 39 04 	lds	r24, 0x0439
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
    2fe2:	01 96       	adiw	r24, 0x01	; 1
    2fe4:	65 e0       	ldi	r22, 0x05	; 5
    2fe6:	70 e0       	ldi	r23, 0x00	; 0
    2fe8:	0e 94 be 53 	call	0xa77c	; 0xa77c <__divmodhi4>
    2fec:	80 93 39 04 	sts	0x0439, r24

					if(colorState==0) {			// turn on blue and off all IRs
    2ff0:	88 23       	and	r24, r24
    2ff2:	11 f5       	brne	.+68     	; 0x3038 <handleIRRemoteCommands+0x3b6>
						LED_IR1_HIGH;
    2ff4:	44 9a       	sbi	0x08, 4	; 8
						LED_IR2_HIGH;
    2ff6:	45 9a       	sbi	0x08, 5	; 8
						pwm_blue = 0;
    2ff8:	10 92 0e 02 	sts	0x020E, r1
						pwm_green = MAX_LEDS_PWM;
    2ffc:	8f ef       	ldi	r24, 0xFF	; 255
    2ffe:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = MAX_LEDS_PWM;
    3002:	80 93 0c 02 	sts	0x020C, r24
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					}

					updateRedLed(pwm_red);
    3006:	0e 94 ac 3d 	call	0x7b58	; 0x7b58 <updateRedLed>
					updateGreenLed(pwm_green);
    300a:	80 91 0d 02 	lds	r24, 0x020D
    300e:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <updateGreenLed>
					updateBlueLed(pwm_blue);
    3012:	80 91 0e 02 	lds	r24, 0x020E
    3016:	0e 94 d4 3d 	call	0x7ba8	; 0x7ba8 <updateBlueLed>
    301a:	20 91 09 03 	lds	r18, 0x0309
    301e:	30 91 0a 03 	lds	r19, 0x030A
    3022:	80 91 0b 03 	lds	r24, 0x030B
    3026:	90 91 0c 03 	lds	r25, 0x030C

	               	break;
    302a:	45 ce       	rjmp	.-886    	; 0x2cb6 <handleIRRemoteCommands+0x34>

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
				speedr = pwm_right_desired;
    302c:	30 95       	com	r19
    302e:	21 95       	neg	r18
    3030:	3f 4f       	sbci	r19, 0xFF	; 255
    3032:	43 ce       	rjmp	.-890    	; 0x2cba <handleIRRemoteCommands+0x38>
					}
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    3034:	c9 01       	movw	r24, r18
    3036:	91 cf       	rjmp	.-222    	; 0x2f5a <handleIRRemoteCommands+0x2d8>
						LED_IR1_HIGH;
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
    3038:	81 30       	cpi	r24, 0x01	; 1
    303a:	91 f0       	breq	.+36     	; 0x3060 <handleIRRemoteCommands+0x3de>
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = 0;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==2) {	// turn on red and on all IRs
    303c:	82 30       	cpi	r24, 0x02	; 2
    303e:	a1 f1       	breq	.+104    	; 0x30a8 <handleIRRemoteCommands+0x426>
						LED_IR1_LOW;
						LED_IR2_LOW;
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = 0;
					} else if(colorState==3) {	// turn on white
    3040:	83 30       	cpi	r24, 0x03	; 3
    3042:	e9 f1       	breq	.+122    	; 0x30be <handleIRRemoteCommands+0x43c>
						pwm_blue = 0;
						pwm_green = 0;
						pwm_red = 0;
					} else if(colorState==4) {	// turn off all leds
						pwm_blue = MAX_LEDS_PWM;
    3044:	8f ef       	ldi	r24, 0xFF	; 255
    3046:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = MAX_LEDS_PWM;
    304a:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = MAX_LEDS_PWM;
    304e:	80 93 0c 02 	sts	0x020C, r24
    3052:	d9 cf       	rjmp	.-78     	; 0x3006 <handleIRRemoteCommands+0x384>
						case 2:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 1;
							break;
						case 3:
							obstacleAvoidanceEnabled = 1;
    3054:	81 e0       	ldi	r24, 0x01	; 1
    3056:	80 93 7c 04 	sts	0x047C, r24
							cliffAvoidanceEnabled = 1;
    305a:	80 93 7d 04 	sts	0x047D, r24
    305e:	23 ce       	rjmp	.-954    	; 0x2ca6 <handleIRRemoteCommands+0x24>
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
						pwm_blue = MAX_LEDS_PWM;
    3060:	8f ef       	ldi	r24, 0xFF	; 255
    3062:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = 0;
    3066:	10 92 0d 02 	sts	0x020D, r1
						pwm_red = MAX_LEDS_PWM;
    306a:	80 93 0c 02 	sts	0x020C, r24
    306e:	cb cf       	rjmp	.-106    	; 0x3006 <handleIRRemoteCommands+0x384>
				case 5:	// stop motors
				case 51:
					pwm_right_desired = 0;
					pwm_left_desired = 0;
					if(currentSelector == 8) {
						calibrateSensors();
    3070:	0e 94 a4 40 	call	0x8148	; 0x8148 <calibrateSensors>
						proximityResult[8] = 1023;	// because the first time this value could be low after calibration
    3074:	8f ef       	ldi	r24, 0xFF	; 255
    3076:	93 e0       	ldi	r25, 0x03	; 3
    3078:	90 93 7a 02 	sts	0x027A, r25
    307c:	80 93 79 02 	sts	0x0279, r24
						proximityResult[11] = 1023;	// and in that case a false black line will be detected
    3080:	90 93 80 02 	sts	0x0280, r25
    3084:	80 93 7f 02 	sts	0x027F, r24
						calibState = 0;
    3088:	10 92 5c 0b 	sts	0x0B5C, r1
						calibVelIndex = 1;
    308c:	81 e0       	ldi	r24, 0x01	; 1
    308e:	80 93 b6 08 	sts	0x08B6, r24
						calibrateOdomFlag = 1;
    3092:	80 93 67 05 	sts	0x0567, r24
    3096:	20 91 09 03 	lds	r18, 0x0309
    309a:	30 91 0a 03 	lds	r19, 0x030A
    309e:	80 91 0b 03 	lds	r24, 0x030B
    30a2:	90 91 0c 03 	lds	r25, 0x030C
    30a6:	07 ce       	rjmp	.-1010   	; 0x2cb6 <handleIRRemoteCommands+0x34>
					} else if(colorState==1) {	// turn on green
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = 0;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==2) {	// turn on red and on all IRs
						LED_IR1_LOW;
    30a8:	44 98       	cbi	0x08, 4	; 8
						LED_IR2_LOW;
    30aa:	45 98       	cbi	0x08, 5	; 8
						pwm_blue = MAX_LEDS_PWM;
    30ac:	8f ef       	ldi	r24, 0xFF	; 255
    30ae:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = MAX_LEDS_PWM;
    30b2:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = 0;
    30b6:	10 92 0c 02 	sts	0x020C, r1
    30ba:	80 e0       	ldi	r24, 0x00	; 0
    30bc:	a4 cf       	rjmp	.-184    	; 0x3006 <handleIRRemoteCommands+0x384>
					} else if(colorState==3) {	// turn on white
						pwm_blue = 0;
    30be:	10 92 0e 02 	sts	0x020E, r1
						pwm_green = 0;
    30c2:	10 92 0d 02 	sts	0x020D, r1
						pwm_red = 0;
    30c6:	10 92 0c 02 	sts	0x020C, r1
    30ca:	80 e0       	ldi	r24, 0x00	; 0
    30cc:	9c cf       	rjmp	.-200    	; 0x3006 <handleIRRemoteCommands+0x384>

000030ce <init_speed_control>:
	//d_speed_control = 5;
	//i_speed_control = 10;
	//i_limit_speed_control = 3200;
	//k_ff_speed_control_left = INIT_KFF;
	//k_ff_speed_control_right = INIT_KFF;
}
    30ce:	08 95       	ret

000030d0 <start_vertical_speed_control_left>:

void start_vertical_speed_control_left(signed int *pwm_left) {
    30d0:	cf 92       	push	r12
    30d2:	df 92       	push	r13
    30d4:	ef 92       	push	r14
    30d6:	ff 92       	push	r15
    30d8:	0f 93       	push	r16
    30da:	1f 93       	push	r17
    30dc:	cf 93       	push	r28
    30de:	df 93       	push	r29
    30e0:	fc 01       	movw	r30, r24
	
	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).
	
	if(*pwm_left==0) {
    30e2:	80 81       	ld	r24, Z
    30e4:	91 81       	ldd	r25, Z+1	; 0x01
    30e6:	00 97       	sbiw	r24, 0x00	; 0
    30e8:	09 f4       	brne	.+2      	; 0x30ec <start_vertical_speed_control_left+0x1c>
    30ea:	f7 c0       	rjmp	.+494    	; 0x32da <start_vertical_speed_control_left+0x20a>
		delta_left_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    30ec:	20 91 4e 04 	lds	r18, 0x044E
    30f0:	30 91 4f 04 	lds	r19, 0x044F
    30f4:	41 e0       	ldi	r20, 0x01	; 1
    30f6:	2e 30       	cpi	r18, 0x0E	; 14
    30f8:	34 07       	cpc	r19, r20
    30fa:	0c f4       	brge	.+2      	; 0x30fe <start_vertical_speed_control_left+0x2e>
    30fc:	c7 c0       	rjmp	.+398    	; 0x328c <start_vertical_speed_control_left+0x1bc>
		if(*pwm_left > 0) {
    30fe:	18 16       	cp	r1, r24
    3100:	19 06       	cpc	r1, r25
    3102:	0c f0       	brlt	.+2      	; 0x3106 <start_vertical_speed_control_left+0x36>
    3104:	68 c1       	rjmp	.+720    	; 0x33d6 <start_vertical_speed_control_left+0x306>
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
    3106:	88 e6       	ldi	r24, 0x68	; 104
    3108:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    310a:	82 1b       	sub	r24, r18
    310c:	93 0b       	sbc	r25, r19
    310e:	95 95       	asr	r25
    3110:	87 95       	ror	r24
    3112:	95 95       	asr	r25
    3114:	87 95       	ror	r24
    3116:	29 e1       	ldi	r18, 0x19	; 25
    3118:	30 e0       	ldi	r19, 0x00	; 0
    311a:	28 1b       	sub	r18, r24
    311c:	39 0b       	sbc	r19, r25
    311e:	30 93 04 02 	sts	0x0204, r19
    3122:	20 93 03 02 	sts	0x0203, r18
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
		}
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    3126:	c0 91 6c 05 	lds	r28, 0x056C
    312a:	d0 91 6d 05 	lds	r29, 0x056D
    312e:	d0 93 84 09 	sts	0x0984, r29
    3132:	c0 93 83 09 	sts	0x0983, r28
	if(*pwm_left >= 0) {
    3136:	80 81       	ld	r24, Z
    3138:	91 81       	ldd	r25, Z+1	; 0x01
    313a:	97 fd       	sbrc	r25, 7
    313c:	2e c1       	rjmp	.+604    	; 0x339a <start_vertical_speed_control_left+0x2ca>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    313e:	20 91 01 03 	lds	r18, 0x0301
    3142:	30 91 02 03 	lds	r19, 0x0302
    3146:	dc 01       	movw	r26, r24
    3148:	a2 1b       	sub	r26, r18
    314a:	b3 0b       	sbc	r27, r19
    314c:	b0 93 6d 05 	sts	0x056D, r27
    3150:	a0 93 6c 05 	sts	0x056C, r26
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;
    3154:	80 91 19 03 	lds	r24, 0x0319
    3158:	90 91 1a 03 	lds	r25, 0x031A
    315c:	8a 0f       	add	r24, r26
    315e:	9b 1f       	adc	r25, r27
    3160:	90 93 1a 03 	sts	0x031A, r25
    3164:	80 93 19 03 	sts	0x0319, r24

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
    3168:	66 e0       	ldi	r22, 0x06	; 6
    316a:	81 34       	cpi	r24, 0x41	; 65
    316c:	96 07       	cpc	r25, r22
    316e:	0c f4       	brge	.+2      	; 0x3172 <start_vertical_speed_control_left+0xa2>
    3170:	cb c0       	rjmp	.+406    	; 0x3308 <start_vertical_speed_control_left+0x238>
		delta_left_speed_sum = I_LIMIT_VERTICAL;
    3172:	80 e4       	ldi	r24, 0x40	; 64
    3174:	96 e0       	ldi	r25, 0x06	; 6
    3176:	90 93 1a 03 	sts	0x031A, r25
    317a:	80 93 19 03 	sts	0x0319, r24
    317e:	10 ec       	ldi	r17, 0xC0	; 192
    3180:	c1 2e       	mov	r12, r17
    3182:	12 e1       	ldi	r17, 0x12	; 18
    3184:	d1 2e       	mov	r13, r17
    3186:	e1 2c       	mov	r14, r1
    3188:	f1 2c       	mov	r15, r1
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_left_speed_controller = (signed long int)(k_ff_speed_control_left*(*pwm_left));
    318a:	00 81       	ld	r16, Z
    318c:	11 81       	ldd	r17, Z+1	; 0x01
	pwm_left_speed_controller += (signed long int)(P_VERTICAL * delta_left_speed_current);
    318e:	9d 01       	movw	r18, r26
    3190:	22 0f       	add	r18, r18
    3192:	33 1f       	adc	r19, r19
    3194:	2a 0f       	add	r18, r26
    3196:	3b 1f       	adc	r19, r27
    3198:	22 0f       	add	r18, r18
    319a:	33 1f       	adc	r19, r19
    319c:	22 0f       	add	r18, r18
    319e:	33 1f       	adc	r19, r19
    31a0:	22 0f       	add	r18, r18
    31a2:	33 1f       	adc	r19, r19
    31a4:	2a 0f       	add	r18, r26
    31a6:	3b 1f       	adc	r19, r27
    31a8:	44 27       	eor	r20, r20
    31aa:	37 fd       	sbrc	r19, 7
    31ac:	40 95       	com	r20
    31ae:	54 2f       	mov	r21, r20
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_left_speed_controller = (signed long int)(k_ff_speed_control_left*(*pwm_left));
    31b0:	80 91 03 02 	lds	r24, 0x0203
    31b4:	90 91 04 02 	lds	r25, 0x0204
    31b8:	08 9f       	mul	r16, r24
    31ba:	b0 01       	movw	r22, r0
    31bc:	09 9f       	mul	r16, r25
    31be:	70 0d       	add	r23, r0
    31c0:	18 9f       	mul	r17, r24
    31c2:	70 0d       	add	r23, r0
    31c4:	11 24       	eor	r1, r1
    31c6:	88 27       	eor	r24, r24
    31c8:	77 fd       	sbrc	r23, 7
    31ca:	80 95       	com	r24
    31cc:	98 2f       	mov	r25, r24
	pwm_left_speed_controller += (signed long int)(P_VERTICAL * delta_left_speed_current);
    31ce:	26 0f       	add	r18, r22
    31d0:	37 1f       	adc	r19, r23
    31d2:	48 1f       	adc	r20, r24
    31d4:	59 1f       	adc	r21, r25
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
    31d6:	ac 1b       	sub	r26, r28
    31d8:	bd 0b       	sbc	r27, r29
    31da:	aa 0f       	add	r26, r26
    31dc:	bb 1f       	adc	r27, r27
    31de:	bd 01       	movw	r22, r26
    31e0:	cb 01       	movw	r24, r22
    31e2:	aa 27       	eor	r26, r26
    31e4:	97 fd       	sbrc	r25, 7
    31e6:	a0 95       	com	r26
    31e8:	ba 2f       	mov	r27, r26
    31ea:	28 0f       	add	r18, r24
    31ec:	39 1f       	adc	r19, r25
    31ee:	4a 1f       	adc	r20, r26
    31f0:	5b 1f       	adc	r21, r27
	pwm_left_speed_controller += (signed long int)(I_VERTICAL*delta_left_speed_sum);
    31f2:	2c 0d       	add	r18, r12
    31f4:	3d 1d       	adc	r19, r13
    31f6:	4e 1d       	adc	r20, r14
    31f8:	5f 1d       	adc	r21, r15
    31fa:	20 93 15 03 	sts	0x0315, r18
    31fe:	30 93 16 03 	sts	0x0316, r19
    3202:	40 93 17 03 	sts	0x0317, r20
    3206:	50 93 18 03 	sts	0x0318, r21

	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    320a:	57 fd       	sbrc	r21, 7
    320c:	9d c0       	rjmp	.+314    	; 0x3348 <start_vertical_speed_control_left+0x278>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    320e:	12 16       	cp	r1, r18
    3210:	13 06       	cpc	r1, r19
    3212:	14 06       	cpc	r1, r20
    3214:	15 06       	cpc	r1, r21
    3216:	0c f0       	brlt	.+2      	; 0x321a <start_vertical_speed_control_left+0x14a>
    3218:	a4 c0       	rjmp	.+328    	; 0x3362 <start_vertical_speed_control_left+0x292>
    321a:	17 fd       	sbrc	r17, 7
    321c:	c9 c0       	rjmp	.+402    	; 0x33b0 <start_vertical_speed_control_left+0x2e0>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    321e:	21 3c       	cpi	r18, 0xC1	; 193
    3220:	7d e5       	ldi	r23, 0x5D	; 93
    3222:	37 07       	cpc	r19, r23
    3224:	70 e0       	ldi	r23, 0x00	; 0
    3226:	47 07       	cpc	r20, r23
    3228:	70 e0       	ldi	r23, 0x00	; 0
    322a:	57 07       	cpc	r21, r23
    322c:	0c f4       	brge	.+2      	; 0x3230 <start_vertical_speed_control_left+0x160>
    322e:	99 c0       	rjmp	.+306    	; 0x3362 <start_vertical_speed_control_left+0x292>
    3230:	80 ec       	ldi	r24, 0xC0	; 192
    3232:	9d e5       	ldi	r25, 0x5D	; 93
    3234:	a0 e0       	ldi	r26, 0x00	; 0
    3236:	b0 e0       	ldi	r27, 0x00	; 0
    3238:	80 93 15 03 	sts	0x0315, r24
    323c:	90 93 16 03 	sts	0x0316, r25
    3240:	a0 93 17 03 	sts	0x0317, r26
    3244:	b0 93 18 03 	sts	0x0318, r27
    3248:	2c ed       	ldi	r18, 0xDC	; 220
    324a:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = (signed int)(pwm_left_speed_controller>>4);
    324c:	31 83       	std	Z+1, r19	; 0x01
    324e:	20 83       	st	Z, r18

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
    3250:	80 91 fb 02 	lds	r24, 0x02FB
    3254:	90 91 fc 02 	lds	r25, 0x02FC
    3258:	18 16       	cp	r1, r24
    325a:	19 06       	cpc	r1, r25
    325c:	0c f0       	brlt	.+2      	; 0x3260 <start_vertical_speed_control_left+0x190>
    325e:	98 c0       	rjmp	.+304    	; 0x3390 <start_vertical_speed_control_left+0x2c0>
		*pwm_left += 1;
    3260:	2f 5f       	subi	r18, 0xFF	; 255
    3262:	3f 4f       	sbci	r19, 0xFF	; 255
    3264:	31 83       	std	Z+1, r19	; 0x01
    3266:	20 83       	st	Z, r18
	} else {
		*pwm_left -= 1;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    3268:	42 e0       	ldi	r20, 0x02	; 2
    326a:	21 30       	cpi	r18, 0x01	; 1
    326c:	34 07       	cpc	r19, r20
    326e:	0c f4       	brge	.+2      	; 0x3272 <start_vertical_speed_control_left+0x1a2>
    3270:	41 c0       	rjmp	.+130    	; 0x32f4 <start_vertical_speed_control_left+0x224>
    3272:	80 e0       	ldi	r24, 0x00	; 0
    3274:	92 e0       	ldi	r25, 0x02	; 2
    3276:	91 83       	std	Z+1, r25	; 0x01
    3278:	80 83       	st	Z, r24
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);


}
    327a:	df 91       	pop	r29
    327c:	cf 91       	pop	r28
    327e:	1f 91       	pop	r17
    3280:	0f 91       	pop	r16
    3282:	ff 90       	pop	r15
    3284:	ef 90       	pop	r14
    3286:	df 90       	pop	r13
    3288:	cf 90       	pop	r12
    328a:	08 95       	ret
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    328c:	24 3b       	cpi	r18, 0xB4	; 180
    328e:	31 05       	cpc	r19, r1
    3290:	94 f4       	brge	.+36     	; 0x32b6 <start_vertical_speed_control_left+0x1e6>
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
    3292:	2a 35       	cpi	r18, 0x5A	; 90
    3294:	31 05       	cpc	r19, r1
    3296:	7c f4       	brge	.+30     	; 0x32b6 <start_vertical_speed_control_left+0x1e6>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
    3298:	18 16       	cp	r1, r24
    329a:	19 06       	cpc	r1, r25
    329c:	0c f0       	brlt	.+2      	; 0x32a0 <start_vertical_speed_control_left+0x1d0>
    329e:	a9 c0       	rjmp	.+338    	; 0x33f2 <start_vertical_speed_control_left+0x322>
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
    32a0:	35 95       	asr	r19
    32a2:	27 95       	ror	r18
    32a4:	35 95       	asr	r19
    32a6:	27 95       	ror	r18
    32a8:	27 5e       	subi	r18, 0xE7	; 231
    32aa:	3f 4f       	sbci	r19, 0xFF	; 255
    32ac:	30 93 04 02 	sts	0x0204, r19
    32b0:	20 93 03 02 	sts	0x0203, r18
    32b4:	38 cf       	rjmp	.-400    	; 0x3126 <start_vertical_speed_control_left+0x56>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
    32b6:	18 16       	cp	r1, r24
    32b8:	19 06       	cpc	r1, r25
    32ba:	0c f0       	brlt	.+2      	; 0x32be <start_vertical_speed_control_left+0x1ee>
    32bc:	42 c0       	rjmp	.+132    	; 0x3342 <start_vertical_speed_control_left+0x272>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
    32be:	84 eb       	ldi	r24, 0xB4	; 180
    32c0:	90 e0       	ldi	r25, 0x00	; 0
    32c2:	82 1b       	sub	r24, r18
    32c4:	93 0b       	sbc	r25, r19
    32c6:	95 95       	asr	r25
    32c8:	87 95       	ror	r24
    32ca:	95 95       	asr	r25
    32cc:	87 95       	ror	r24
    32ce:	49 96       	adiw	r24, 0x19	; 25
    32d0:	90 93 04 02 	sts	0x0204, r25
    32d4:	80 93 03 02 	sts	0x0203, r24
    32d8:	26 cf       	rjmp	.-436    	; 0x3126 <start_vertical_speed_control_left+0x56>
void start_vertical_speed_control_left(signed int *pwm_left) {
	
	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).
	
	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    32da:	10 92 1a 03 	sts	0x031A, r1
    32de:	10 92 19 03 	sts	0x0319, r1
		delta_left_speed_current = 0;
    32e2:	10 92 6d 05 	sts	0x056D, r1
    32e6:	10 92 6c 05 	sts	0x056C, r1
		delta_left_speed_prev = 0;
    32ea:	10 92 84 09 	sts	0x0984, r1
    32ee:	10 92 83 09 	sts	0x0983, r1
		return;
    32f2:	c3 cf       	rjmp	.-122    	; 0x327a <start_vertical_speed_control_left+0x1aa>
	} else {
		*pwm_left -= 1;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    32f4:	6e ef       	ldi	r22, 0xFE	; 254
    32f6:	20 30       	cpi	r18, 0x00	; 0
    32f8:	36 07       	cpc	r19, r22
    32fa:	0c f0       	brlt	.+2      	; 0x32fe <start_vertical_speed_control_left+0x22e>
    32fc:	be cf       	rjmp	.-132    	; 0x327a <start_vertical_speed_control_left+0x1aa>
    32fe:	80 e0       	ldi	r24, 0x00	; 0
    3300:	9e ef       	ldi	r25, 0xFE	; 254
    3302:	91 83       	std	Z+1, r25	; 0x01
    3304:	80 83       	st	Z, r24
    3306:	b9 cf       	rjmp	.-142    	; 0x327a <start_vertical_speed_control_left+0x1aa>
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    3308:	79 ef       	ldi	r23, 0xF9	; 249
    330a:	80 3c       	cpi	r24, 0xC0	; 192
    330c:	97 07       	cpc	r25, r23
    330e:	7c f4       	brge	.+30     	; 0x332e <start_vertical_speed_control_left+0x25e>
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
    3310:	80 ec       	ldi	r24, 0xC0	; 192
    3312:	99 ef       	ldi	r25, 0xF9	; 249
    3314:	90 93 1a 03 	sts	0x031A, r25
    3318:	80 93 19 03 	sts	0x0319, r24
    331c:	60 e4       	ldi	r22, 0x40	; 64
    331e:	c6 2e       	mov	r12, r22
    3320:	6d ee       	ldi	r22, 0xED	; 237
    3322:	d6 2e       	mov	r13, r22
    3324:	6f ef       	ldi	r22, 0xFF	; 255
    3326:	e6 2e       	mov	r14, r22
    3328:	6f ef       	ldi	r22, 0xFF	; 255
    332a:	f6 2e       	mov	r15, r22
    332c:	2e cf       	rjmp	.-420    	; 0x318a <start_vertical_speed_control_left+0xba>
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    332e:	6c 01       	movw	r12, r24
    3330:	cc 0c       	add	r12, r12
    3332:	dd 1c       	adc	r13, r13
    3334:	c8 0e       	add	r12, r24
    3336:	d9 1e       	adc	r13, r25
    3338:	ee 24       	eor	r14, r14
    333a:	d7 fc       	sbrc	r13, 7
    333c:	e0 94       	com	r14
    333e:	fe 2c       	mov	r15, r14
    3340:	24 cf       	rjmp	.-440    	; 0x318a <start_vertical_speed_control_left+0xba>
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    3342:	84 eb       	ldi	r24, 0xB4	; 180
    3344:	90 e0       	ldi	r25, 0x00	; 0
    3346:	e1 ce       	rjmp	.-574    	; 0x310a <start_vertical_speed_control_left+0x3a>
	pwm_left_speed_controller += (signed long int)(P_VERTICAL * delta_left_speed_current);
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
	pwm_left_speed_controller += (signed long int)(I_VERTICAL*delta_left_speed_sum);

	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    3348:	17 fd       	sbrc	r17, 7
    334a:	0b c0       	rjmp	.+22     	; 0x3362 <start_vertical_speed_control_left+0x292>
		pwm_left_speed_controller = 0;
    334c:	10 92 15 03 	sts	0x0315, r1
    3350:	10 92 16 03 	sts	0x0316, r1
    3354:	10 92 17 03 	sts	0x0317, r1
    3358:	10 92 18 03 	sts	0x0318, r1
    335c:	20 e0       	ldi	r18, 0x00	; 0
    335e:	30 e0       	ldi	r19, 0x00	; 0
    3360:	a9 01       	movw	r20, r18
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    3362:	20 34       	cpi	r18, 0x40	; 64
    3364:	82 ea       	ldi	r24, 0xA2	; 162
    3366:	38 07       	cpc	r19, r24
    3368:	8f ef       	ldi	r24, 0xFF	; 255
    336a:	48 07       	cpc	r20, r24
    336c:	8f ef       	ldi	r24, 0xFF	; 255
    336e:	58 07       	cpc	r21, r24
    3370:	54 f5       	brge	.+84     	; 0x33c6 <start_vertical_speed_control_left+0x2f6>
    3372:	80 e4       	ldi	r24, 0x40	; 64
    3374:	92 ea       	ldi	r25, 0xA2	; 162
    3376:	af ef       	ldi	r26, 0xFF	; 255
    3378:	bf ef       	ldi	r27, 0xFF	; 255
    337a:	80 93 15 03 	sts	0x0315, r24
    337e:	90 93 16 03 	sts	0x0316, r25
    3382:	a0 93 17 03 	sts	0x0317, r26
    3386:	b0 93 18 03 	sts	0x0318, r27
    338a:	24 e2       	ldi	r18, 0x24	; 36
    338c:	3a ef       	ldi	r19, 0xFA	; 250
    338e:	5e cf       	rjmp	.-324    	; 0x324c <start_vertical_speed_control_left+0x17c>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
		*pwm_left += 1;
	} else {
		*pwm_left -= 1;
    3390:	21 50       	subi	r18, 0x01	; 1
    3392:	30 40       	sbci	r19, 0x00	; 0
    3394:	31 83       	std	Z+1, r19	; 0x01
    3396:	20 83       	st	Z, r18
    3398:	67 cf       	rjmp	.-306    	; 0x3268 <start_vertical_speed_control_left+0x198>
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    339a:	a0 91 01 03 	lds	r26, 0x0301
    339e:	b0 91 02 03 	lds	r27, 0x0302
    33a2:	a8 0f       	add	r26, r24
    33a4:	b9 1f       	adc	r27, r25
    33a6:	b0 93 6d 05 	sts	0x056D, r27
    33aa:	a0 93 6c 05 	sts	0x056C, r26
    33ae:	d2 ce       	rjmp	.-604    	; 0x3154 <start_vertical_speed_control_left+0x84>
	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    33b0:	10 92 15 03 	sts	0x0315, r1
    33b4:	10 92 16 03 	sts	0x0316, r1
    33b8:	10 92 17 03 	sts	0x0317, r1
    33bc:	10 92 18 03 	sts	0x0318, r1
    33c0:	20 e0       	ldi	r18, 0x00	; 0
    33c2:	30 e0       	ldi	r19, 0x00	; 0
    33c4:	a9 01       	movw	r20, r18
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    33c6:	84 e0       	ldi	r24, 0x04	; 4
    33c8:	55 95       	asr	r21
    33ca:	47 95       	ror	r20
    33cc:	37 95       	ror	r19
    33ce:	27 95       	ror	r18
    33d0:	8a 95       	dec	r24
    33d2:	d1 f7       	brne	.-12     	; 0x33c8 <start_vertical_speed_control_left+0x2f8>
    33d4:	3b cf       	rjmp	.-394    	; 0x324c <start_vertical_speed_control_left+0x17c>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
    33d6:	88 e6       	ldi	r24, 0x68	; 104
    33d8:	91 e0       	ldi	r25, 0x01	; 1
    33da:	82 1b       	sub	r24, r18
    33dc:	93 0b       	sbc	r25, r19
    33de:	95 95       	asr	r25
    33e0:	87 95       	ror	r24
    33e2:	95 95       	asr	r25
    33e4:	87 95       	ror	r24
    33e6:	49 96       	adiw	r24, 0x19	; 25
    33e8:	90 93 04 02 	sts	0x0204, r25
    33ec:	80 93 03 02 	sts	0x0203, r24
    33f0:	9a ce       	rjmp	.-716    	; 0x3126 <start_vertical_speed_control_left+0x56>
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
    33f2:	35 95       	asr	r19
    33f4:	27 95       	ror	r18
    33f6:	35 95       	asr	r19
    33f8:	27 95       	ror	r18
    33fa:	89 e1       	ldi	r24, 0x19	; 25
    33fc:	90 e0       	ldi	r25, 0x00	; 0
    33fe:	82 1b       	sub	r24, r18
    3400:	93 0b       	sbc	r25, r19
    3402:	90 93 04 02 	sts	0x0204, r25
    3406:	80 93 03 02 	sts	0x0203, r24
    340a:	8d ce       	rjmp	.-742    	; 0x3126 <start_vertical_speed_control_left+0x56>

0000340c <start_vertical_speed_control_right>:


}


void start_vertical_speed_control_right(signed int *pwm_right) {
    340c:	cf 92       	push	r12
    340e:	df 92       	push	r13
    3410:	ef 92       	push	r14
    3412:	ff 92       	push	r15
    3414:	0f 93       	push	r16
    3416:	1f 93       	push	r17
    3418:	cf 93       	push	r28
    341a:	df 93       	push	r29
    341c:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    341e:	80 81       	ld	r24, Z
    3420:	91 81       	ldd	r25, Z+1	; 0x01
    3422:	00 97       	sbiw	r24, 0x00	; 0
    3424:	09 f4       	brne	.+2      	; 0x3428 <start_vertical_speed_control_right+0x1c>
    3426:	f7 c0       	rjmp	.+494    	; 0x3616 <start_vertical_speed_control_right+0x20a>
		delta_right_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    3428:	20 91 4e 04 	lds	r18, 0x044E
    342c:	30 91 4f 04 	lds	r19, 0x044F
    3430:	41 e0       	ldi	r20, 0x01	; 1
    3432:	2e 30       	cpi	r18, 0x0E	; 14
    3434:	34 07       	cpc	r19, r20
    3436:	0c f4       	brge	.+2      	; 0x343a <start_vertical_speed_control_right+0x2e>
    3438:	c7 c0       	rjmp	.+398    	; 0x35c8 <start_vertical_speed_control_right+0x1bc>
		if(*pwm_right > 0) {
    343a:	18 16       	cp	r1, r24
    343c:	19 06       	cpc	r1, r25
    343e:	0c f0       	brlt	.+2      	; 0x3442 <start_vertical_speed_control_right+0x36>
    3440:	68 c1       	rjmp	.+720    	; 0x3712 <start_vertical_speed_control_right+0x306>
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
    3442:	88 e6       	ldi	r24, 0x68	; 104
    3444:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    3446:	82 1b       	sub	r24, r18
    3448:	93 0b       	sbc	r25, r19
    344a:	95 95       	asr	r25
    344c:	87 95       	ror	r24
    344e:	95 95       	asr	r25
    3450:	87 95       	ror	r24
    3452:	29 e1       	ldi	r18, 0x19	; 25
    3454:	30 e0       	ldi	r19, 0x00	; 0
    3456:	28 1b       	sub	r18, r24
    3458:	39 0b       	sbc	r19, r25
    345a:	30 93 06 02 	sts	0x0206, r19
    345e:	20 93 05 02 	sts	0x0205, r18
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
		}
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    3462:	c0 91 22 0b 	lds	r28, 0x0B22
    3466:	d0 91 23 0b 	lds	r29, 0x0B23
    346a:	d0 93 bc 08 	sts	0x08BC, r29
    346e:	c0 93 bb 08 	sts	0x08BB, r28
	if(*pwm_right >= 0) {
    3472:	80 81       	ld	r24, Z
    3474:	91 81       	ldd	r25, Z+1	; 0x01
    3476:	97 fd       	sbrc	r25, 7
    3478:	2e c1       	rjmp	.+604    	; 0x36d6 <start_vertical_speed_control_right+0x2ca>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    347a:	20 91 03 03 	lds	r18, 0x0303
    347e:	30 91 04 03 	lds	r19, 0x0304
    3482:	dc 01       	movw	r26, r24
    3484:	a2 1b       	sub	r26, r18
    3486:	b3 0b       	sbc	r27, r19
    3488:	b0 93 23 0b 	sts	0x0B23, r27
    348c:	a0 93 22 0b 	sts	0x0B22, r26
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    3490:	80 91 1b 03 	lds	r24, 0x031B
    3494:	90 91 1c 03 	lds	r25, 0x031C
    3498:	8a 0f       	add	r24, r26
    349a:	9b 1f       	adc	r25, r27
    349c:	90 93 1c 03 	sts	0x031C, r25
    34a0:	80 93 1b 03 	sts	0x031B, r24

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
    34a4:	66 e0       	ldi	r22, 0x06	; 6
    34a6:	81 34       	cpi	r24, 0x41	; 65
    34a8:	96 07       	cpc	r25, r22
    34aa:	0c f4       	brge	.+2      	; 0x34ae <start_vertical_speed_control_right+0xa2>
    34ac:	cb c0       	rjmp	.+406    	; 0x3644 <start_vertical_speed_control_right+0x238>
		delta_right_speed_sum = I_LIMIT_VERTICAL;
    34ae:	80 e4       	ldi	r24, 0x40	; 64
    34b0:	96 e0       	ldi	r25, 0x06	; 6
    34b2:	90 93 1c 03 	sts	0x031C, r25
    34b6:	80 93 1b 03 	sts	0x031B, r24
    34ba:	40 ec       	ldi	r20, 0xC0	; 192
    34bc:	c4 2e       	mov	r12, r20
    34be:	42 e1       	ldi	r20, 0x12	; 18
    34c0:	d4 2e       	mov	r13, r20
    34c2:	e1 2c       	mov	r14, r1
    34c4:	f1 2c       	mov	r15, r1
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_right_speed_controller = (signed long int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
    34c6:	00 81       	ld	r16, Z
    34c8:	11 81       	ldd	r17, Z+1	; 0x01
	pwm_right_speed_controller += (signed long int)(P_VERTICAL * delta_right_speed_current);
    34ca:	9d 01       	movw	r18, r26
    34cc:	22 0f       	add	r18, r18
    34ce:	33 1f       	adc	r19, r19
    34d0:	2a 0f       	add	r18, r26
    34d2:	3b 1f       	adc	r19, r27
    34d4:	22 0f       	add	r18, r18
    34d6:	33 1f       	adc	r19, r19
    34d8:	22 0f       	add	r18, r18
    34da:	33 1f       	adc	r19, r19
    34dc:	22 0f       	add	r18, r18
    34de:	33 1f       	adc	r19, r19
    34e0:	2a 0f       	add	r18, r26
    34e2:	3b 1f       	adc	r19, r27
    34e4:	44 27       	eor	r20, r20
    34e6:	37 fd       	sbrc	r19, 7
    34e8:	40 95       	com	r20
    34ea:	54 2f       	mov	r21, r20
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_right_speed_controller = (signed long int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
    34ec:	80 91 05 02 	lds	r24, 0x0205
    34f0:	90 91 06 02 	lds	r25, 0x0206
    34f4:	08 9f       	mul	r16, r24
    34f6:	b0 01       	movw	r22, r0
    34f8:	09 9f       	mul	r16, r25
    34fa:	70 0d       	add	r23, r0
    34fc:	18 9f       	mul	r17, r24
    34fe:	70 0d       	add	r23, r0
    3500:	11 24       	eor	r1, r1
    3502:	88 27       	eor	r24, r24
    3504:	77 fd       	sbrc	r23, 7
    3506:	80 95       	com	r24
    3508:	98 2f       	mov	r25, r24
	pwm_right_speed_controller += (signed long int)(P_VERTICAL * delta_right_speed_current);
    350a:	26 0f       	add	r18, r22
    350c:	37 1f       	adc	r19, r23
    350e:	48 1f       	adc	r20, r24
    3510:	59 1f       	adc	r21, r25
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
    3512:	ac 1b       	sub	r26, r28
    3514:	bd 0b       	sbc	r27, r29
    3516:	aa 0f       	add	r26, r26
    3518:	bb 1f       	adc	r27, r27
    351a:	bd 01       	movw	r22, r26
    351c:	cb 01       	movw	r24, r22
    351e:	aa 27       	eor	r26, r26
    3520:	97 fd       	sbrc	r25, 7
    3522:	a0 95       	com	r26
    3524:	ba 2f       	mov	r27, r26
    3526:	28 0f       	add	r18, r24
    3528:	39 1f       	adc	r19, r25
    352a:	4a 1f       	adc	r20, r26
    352c:	5b 1f       	adc	r21, r27
	pwm_right_speed_controller += (signed long int)(I_VERTICAL*delta_right_speed_sum);
    352e:	2c 0d       	add	r18, r12
    3530:	3d 1d       	adc	r19, r13
    3532:	4e 1d       	adc	r20, r14
    3534:	5f 1d       	adc	r21, r15
    3536:	20 93 11 03 	sts	0x0311, r18
    353a:	30 93 12 03 	sts	0x0312, r19
    353e:	40 93 13 03 	sts	0x0313, r20
    3542:	50 93 14 03 	sts	0x0314, r21

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    3546:	57 fd       	sbrc	r21, 7
    3548:	9d c0       	rjmp	.+314    	; 0x3684 <start_vertical_speed_control_right+0x278>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    354a:	12 16       	cp	r1, r18
    354c:	13 06       	cpc	r1, r19
    354e:	14 06       	cpc	r1, r20
    3550:	15 06       	cpc	r1, r21
    3552:	0c f0       	brlt	.+2      	; 0x3556 <start_vertical_speed_control_right+0x14a>
    3554:	a4 c0       	rjmp	.+328    	; 0x369e <start_vertical_speed_control_right+0x292>
    3556:	17 fd       	sbrc	r17, 7
    3558:	c9 c0       	rjmp	.+402    	; 0x36ec <start_vertical_speed_control_right+0x2e0>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    355a:	21 3c       	cpi	r18, 0xC1	; 193
    355c:	7d e5       	ldi	r23, 0x5D	; 93
    355e:	37 07       	cpc	r19, r23
    3560:	70 e0       	ldi	r23, 0x00	; 0
    3562:	47 07       	cpc	r20, r23
    3564:	70 e0       	ldi	r23, 0x00	; 0
    3566:	57 07       	cpc	r21, r23
    3568:	0c f4       	brge	.+2      	; 0x356c <start_vertical_speed_control_right+0x160>
    356a:	99 c0       	rjmp	.+306    	; 0x369e <start_vertical_speed_control_right+0x292>
    356c:	80 ec       	ldi	r24, 0xC0	; 192
    356e:	9d e5       	ldi	r25, 0x5D	; 93
    3570:	a0 e0       	ldi	r26, 0x00	; 0
    3572:	b0 e0       	ldi	r27, 0x00	; 0
    3574:	80 93 11 03 	sts	0x0311, r24
    3578:	90 93 12 03 	sts	0x0312, r25
    357c:	a0 93 13 03 	sts	0x0313, r26
    3580:	b0 93 14 03 	sts	0x0314, r27
    3584:	2c ed       	ldi	r18, 0xDC	; 220
    3586:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = (signed int)(pwm_right_speed_controller>>4);
    3588:	31 83       	std	Z+1, r19	; 0x01
    358a:	20 83       	st	Z, r18

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
    358c:	80 91 f9 02 	lds	r24, 0x02F9
    3590:	90 91 fa 02 	lds	r25, 0x02FA
    3594:	18 16       	cp	r1, r24
    3596:	19 06       	cpc	r1, r25
    3598:	0c f0       	brlt	.+2      	; 0x359c <start_vertical_speed_control_right+0x190>
    359a:	98 c0       	rjmp	.+304    	; 0x36cc <start_vertical_speed_control_right+0x2c0>
		*pwm_right += 1;
    359c:	2f 5f       	subi	r18, 0xFF	; 255
    359e:	3f 4f       	sbci	r19, 0xFF	; 255
    35a0:	31 83       	std	Z+1, r19	; 0x01
    35a2:	20 83       	st	Z, r18
	} else {
		*pwm_right -= 1;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    35a4:	42 e0       	ldi	r20, 0x02	; 2
    35a6:	21 30       	cpi	r18, 0x01	; 1
    35a8:	34 07       	cpc	r19, r20
    35aa:	0c f4       	brge	.+2      	; 0x35ae <start_vertical_speed_control_right+0x1a2>
    35ac:	41 c0       	rjmp	.+130    	; 0x3630 <start_vertical_speed_control_right+0x224>
    35ae:	80 e0       	ldi	r24, 0x00	; 0
    35b0:	92 e0       	ldi	r25, 0x02	; 2
    35b2:	91 83       	std	Z+1, r25	; 0x01
    35b4:	80 83       	st	Z, r24
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    35b6:	df 91       	pop	r29
    35b8:	cf 91       	pop	r28
    35ba:	1f 91       	pop	r17
    35bc:	0f 91       	pop	r16
    35be:	ff 90       	pop	r15
    35c0:	ef 90       	pop	r14
    35c2:	df 90       	pop	r13
    35c4:	cf 90       	pop	r12
    35c6:	08 95       	ret
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    35c8:	24 3b       	cpi	r18, 0xB4	; 180
    35ca:	31 05       	cpc	r19, r1
    35cc:	94 f4       	brge	.+36     	; 0x35f2 <start_vertical_speed_control_right+0x1e6>
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
    35ce:	2a 35       	cpi	r18, 0x5A	; 90
    35d0:	31 05       	cpc	r19, r1
    35d2:	7c f4       	brge	.+30     	; 0x35f2 <start_vertical_speed_control_right+0x1e6>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
    35d4:	18 16       	cp	r1, r24
    35d6:	19 06       	cpc	r1, r25
    35d8:	0c f0       	brlt	.+2      	; 0x35dc <start_vertical_speed_control_right+0x1d0>
    35da:	a9 c0       	rjmp	.+338    	; 0x372e <start_vertical_speed_control_right+0x322>
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
    35dc:	35 95       	asr	r19
    35de:	27 95       	ror	r18
    35e0:	35 95       	asr	r19
    35e2:	27 95       	ror	r18
    35e4:	27 5e       	subi	r18, 0xE7	; 231
    35e6:	3f 4f       	sbci	r19, 0xFF	; 255
    35e8:	30 93 06 02 	sts	0x0206, r19
    35ec:	20 93 05 02 	sts	0x0205, r18
    35f0:	38 cf       	rjmp	.-400    	; 0x3462 <start_vertical_speed_control_right+0x56>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
    35f2:	18 16       	cp	r1, r24
    35f4:	19 06       	cpc	r1, r25
    35f6:	0c f0       	brlt	.+2      	; 0x35fa <start_vertical_speed_control_right+0x1ee>
    35f8:	42 c0       	rjmp	.+132    	; 0x367e <start_vertical_speed_control_right+0x272>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
    35fa:	84 eb       	ldi	r24, 0xB4	; 180
    35fc:	90 e0       	ldi	r25, 0x00	; 0
    35fe:	82 1b       	sub	r24, r18
    3600:	93 0b       	sbc	r25, r19
    3602:	95 95       	asr	r25
    3604:	87 95       	ror	r24
    3606:	95 95       	asr	r25
    3608:	87 95       	ror	r24
    360a:	49 96       	adiw	r24, 0x19	; 25
    360c:	90 93 06 02 	sts	0x0206, r25
    3610:	80 93 05 02 	sts	0x0205, r24
    3614:	26 cf       	rjmp	.-436    	; 0x3462 <start_vertical_speed_control_right+0x56>
void start_vertical_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    3616:	10 92 1c 03 	sts	0x031C, r1
    361a:	10 92 1b 03 	sts	0x031B, r1
		delta_right_speed_current = 0;
    361e:	10 92 23 0b 	sts	0x0B23, r1
    3622:	10 92 22 0b 	sts	0x0B22, r1
		delta_right_speed_prev = 0;
    3626:	10 92 bc 08 	sts	0x08BC, r1
    362a:	10 92 bb 08 	sts	0x08BB, r1
		return;
    362e:	c3 cf       	rjmp	.-122    	; 0x35b6 <start_vertical_speed_control_right+0x1aa>
	} else {
		*pwm_right -= 1;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    3630:	6e ef       	ldi	r22, 0xFE	; 254
    3632:	20 30       	cpi	r18, 0x00	; 0
    3634:	36 07       	cpc	r19, r22
    3636:	0c f0       	brlt	.+2      	; 0x363a <start_vertical_speed_control_right+0x22e>
    3638:	be cf       	rjmp	.-132    	; 0x35b6 <start_vertical_speed_control_right+0x1aa>
    363a:	80 e0       	ldi	r24, 0x00	; 0
    363c:	9e ef       	ldi	r25, 0xFE	; 254
    363e:	91 83       	std	Z+1, r25	; 0x01
    3640:	80 83       	st	Z, r24
    3642:	b9 cf       	rjmp	.-142    	; 0x35b6 <start_vertical_speed_control_right+0x1aa>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    3644:	79 ef       	ldi	r23, 0xF9	; 249
    3646:	80 3c       	cpi	r24, 0xC0	; 192
    3648:	97 07       	cpc	r25, r23
    364a:	7c f4       	brge	.+30     	; 0x366a <start_vertical_speed_control_right+0x25e>
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
    364c:	80 ec       	ldi	r24, 0xC0	; 192
    364e:	99 ef       	ldi	r25, 0xF9	; 249
    3650:	90 93 1c 03 	sts	0x031C, r25
    3654:	80 93 1b 03 	sts	0x031B, r24
    3658:	20 e4       	ldi	r18, 0x40	; 64
    365a:	c2 2e       	mov	r12, r18
    365c:	2d ee       	ldi	r18, 0xED	; 237
    365e:	d2 2e       	mov	r13, r18
    3660:	2f ef       	ldi	r18, 0xFF	; 255
    3662:	e2 2e       	mov	r14, r18
    3664:	2f ef       	ldi	r18, 0xFF	; 255
    3666:	f2 2e       	mov	r15, r18
    3668:	2e cf       	rjmp	.-420    	; 0x34c6 <start_vertical_speed_control_right+0xba>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    366a:	6c 01       	movw	r12, r24
    366c:	cc 0c       	add	r12, r12
    366e:	dd 1c       	adc	r13, r13
    3670:	c8 0e       	add	r12, r24
    3672:	d9 1e       	adc	r13, r25
    3674:	ee 24       	eor	r14, r14
    3676:	d7 fc       	sbrc	r13, 7
    3678:	e0 94       	com	r14
    367a:	fe 2c       	mov	r15, r14
    367c:	24 cf       	rjmp	.-440    	; 0x34c6 <start_vertical_speed_control_right+0xba>
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    367e:	84 eb       	ldi	r24, 0xB4	; 180
    3680:	90 e0       	ldi	r25, 0x00	; 0
    3682:	e1 ce       	rjmp	.-574    	; 0x3446 <start_vertical_speed_control_right+0x3a>
	pwm_right_speed_controller += (signed long int)(P_VERTICAL * delta_right_speed_current);
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
	pwm_right_speed_controller += (signed long int)(I_VERTICAL*delta_right_speed_sum);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    3684:	17 fd       	sbrc	r17, 7
    3686:	0b c0       	rjmp	.+22     	; 0x369e <start_vertical_speed_control_right+0x292>
		pwm_right_speed_controller = 0;
    3688:	10 92 11 03 	sts	0x0311, r1
    368c:	10 92 12 03 	sts	0x0312, r1
    3690:	10 92 13 03 	sts	0x0313, r1
    3694:	10 92 14 03 	sts	0x0314, r1
    3698:	20 e0       	ldi	r18, 0x00	; 0
    369a:	30 e0       	ldi	r19, 0x00	; 0
    369c:	a9 01       	movw	r20, r18
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    369e:	20 34       	cpi	r18, 0x40	; 64
    36a0:	82 ea       	ldi	r24, 0xA2	; 162
    36a2:	38 07       	cpc	r19, r24
    36a4:	8f ef       	ldi	r24, 0xFF	; 255
    36a6:	48 07       	cpc	r20, r24
    36a8:	8f ef       	ldi	r24, 0xFF	; 255
    36aa:	58 07       	cpc	r21, r24
    36ac:	54 f5       	brge	.+84     	; 0x3702 <start_vertical_speed_control_right+0x2f6>
    36ae:	80 e4       	ldi	r24, 0x40	; 64
    36b0:	92 ea       	ldi	r25, 0xA2	; 162
    36b2:	af ef       	ldi	r26, 0xFF	; 255
    36b4:	bf ef       	ldi	r27, 0xFF	; 255
    36b6:	80 93 11 03 	sts	0x0311, r24
    36ba:	90 93 12 03 	sts	0x0312, r25
    36be:	a0 93 13 03 	sts	0x0313, r26
    36c2:	b0 93 14 03 	sts	0x0314, r27
    36c6:	24 e2       	ldi	r18, 0x24	; 36
    36c8:	3a ef       	ldi	r19, 0xFA	; 250
    36ca:	5e cf       	rjmp	.-324    	; 0x3588 <start_vertical_speed_control_right+0x17c>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
		*pwm_right += 1;
	} else {
		*pwm_right -= 1;
    36cc:	21 50       	subi	r18, 0x01	; 1
    36ce:	30 40       	sbci	r19, 0x00	; 0
    36d0:	31 83       	std	Z+1, r19	; 0x01
    36d2:	20 83       	st	Z, r18
    36d4:	67 cf       	rjmp	.-306    	; 0x35a4 <start_vertical_speed_control_right+0x198>
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    36d6:	a0 91 03 03 	lds	r26, 0x0303
    36da:	b0 91 04 03 	lds	r27, 0x0304
    36de:	a8 0f       	add	r26, r24
    36e0:	b9 1f       	adc	r27, r25
    36e2:	b0 93 23 0b 	sts	0x0B23, r27
    36e6:	a0 93 22 0b 	sts	0x0B22, r26
    36ea:	d2 ce       	rjmp	.-604    	; 0x3490 <start_vertical_speed_control_right+0x84>
	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    36ec:	10 92 11 03 	sts	0x0311, r1
    36f0:	10 92 12 03 	sts	0x0312, r1
    36f4:	10 92 13 03 	sts	0x0313, r1
    36f8:	10 92 14 03 	sts	0x0314, r1
    36fc:	20 e0       	ldi	r18, 0x00	; 0
    36fe:	30 e0       	ldi	r19, 0x00	; 0
    3700:	a9 01       	movw	r20, r18
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    3702:	64 e0       	ldi	r22, 0x04	; 4
    3704:	55 95       	asr	r21
    3706:	47 95       	ror	r20
    3708:	37 95       	ror	r19
    370a:	27 95       	ror	r18
    370c:	6a 95       	dec	r22
    370e:	d1 f7       	brne	.-12     	; 0x3704 <start_vertical_speed_control_right+0x2f8>
    3710:	3b cf       	rjmp	.-394    	; 0x3588 <start_vertical_speed_control_right+0x17c>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
    3712:	88 e6       	ldi	r24, 0x68	; 104
    3714:	91 e0       	ldi	r25, 0x01	; 1
    3716:	82 1b       	sub	r24, r18
    3718:	93 0b       	sbc	r25, r19
    371a:	95 95       	asr	r25
    371c:	87 95       	ror	r24
    371e:	95 95       	asr	r25
    3720:	87 95       	ror	r24
    3722:	49 96       	adiw	r24, 0x19	; 25
    3724:	90 93 06 02 	sts	0x0206, r25
    3728:	80 93 05 02 	sts	0x0205, r24
    372c:	9a ce       	rjmp	.-716    	; 0x3462 <start_vertical_speed_control_right+0x56>
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
    372e:	35 95       	asr	r19
    3730:	27 95       	ror	r18
    3732:	35 95       	asr	r19
    3734:	27 95       	ror	r18
    3736:	89 e1       	ldi	r24, 0x19	; 25
    3738:	90 e0       	ldi	r25, 0x00	; 0
    373a:	82 1b       	sub	r24, r18
    373c:	93 0b       	sbc	r25, r19
    373e:	90 93 06 02 	sts	0x0206, r25
    3742:	80 93 05 02 	sts	0x0205, r24
    3746:	8d ce       	rjmp	.-742    	; 0x3462 <start_vertical_speed_control_right+0x56>

00003748 <start_horizontal_speed_control_right>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_right(signed int *pwm_right) {
    3748:	cf 92       	push	r12
    374a:	df 92       	push	r13
    374c:	ef 92       	push	r14
    374e:	ff 92       	push	r15
    3750:	0f 93       	push	r16
    3752:	1f 93       	push	r17
    3754:	cf 93       	push	r28
    3756:	df 93       	push	r29
    3758:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    375a:	80 81       	ld	r24, Z
    375c:	91 81       	ldd	r25, Z+1	; 0x01
    375e:	00 97       	sbiw	r24, 0x00	; 0
    3760:	09 f4       	brne	.+2      	; 0x3764 <start_horizontal_speed_control_right+0x1c>
    3762:	b8 c0       	rjmp	.+368    	; 0x38d4 <start_horizontal_speed_control_right+0x18c>
		delta_right_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    3764:	c0 91 22 0b 	lds	r28, 0x0B22
    3768:	d0 91 23 0b 	lds	r29, 0x0B23
    376c:	d0 93 bc 08 	sts	0x08BC, r29
    3770:	c0 93 bb 08 	sts	0x08BB, r28
	if(*pwm_right >= 0) {
    3774:	80 81       	ld	r24, Z
    3776:	91 81       	ldd	r25, Z+1	; 0x01
    3778:	97 fd       	sbrc	r25, 7
    377a:	cd c0       	rjmp	.+410    	; 0x3916 <start_horizontal_speed_control_right+0x1ce>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    377c:	20 91 03 03 	lds	r18, 0x0303
    3780:	30 91 04 03 	lds	r19, 0x0304
    3784:	dc 01       	movw	r26, r24
    3786:	a2 1b       	sub	r26, r18
    3788:	b3 0b       	sbc	r27, r19
    378a:	b0 93 23 0b 	sts	0x0B23, r27
    378e:	a0 93 22 0b 	sts	0x0B22, r26
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}

	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    3792:	c0 90 1b 03 	lds	r12, 0x031B
    3796:	d0 90 1c 03 	lds	r13, 0x031C
    379a:	ca 0e       	add	r12, r26
    379c:	db 1e       	adc	r13, r27
    379e:	d0 92 1c 03 	sts	0x031C, r13
    37a2:	c0 92 1b 03 	sts	0x031B, r12

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
    37a6:	81 e4       	ldi	r24, 0x41	; 65
    37a8:	c8 16       	cp	r12, r24
    37aa:	86 e0       	ldi	r24, 0x06	; 6
    37ac:	d8 06       	cpc	r13, r24
    37ae:	0c f4       	brge	.+2      	; 0x37b2 <start_horizontal_speed_control_right+0x6a>
    37b0:	9e c0       	rjmp	.+316    	; 0x38ee <start_horizontal_speed_control_right+0x1a6>
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
    37b2:	80 e4       	ldi	r24, 0x40	; 64
    37b4:	96 e0       	ldi	r25, 0x06	; 6
    37b6:	90 93 1c 03 	sts	0x031C, r25
    37ba:	80 93 1b 03 	sts	0x031B, r24
    37be:	10 e8       	ldi	r17, 0x80	; 128
    37c0:	c1 2e       	mov	r12, r17
    37c2:	1c e0       	ldi	r17, 0x0C	; 12
    37c4:	d1 2e       	mov	r13, r17
    37c6:	e1 2c       	mov	r14, r1
    37c8:	f1 2c       	mov	r15, r1
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
	}		

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed long int)((*pwm_right) << 3);
    37ca:	00 81       	ld	r16, Z
    37cc:	11 81       	ldd	r17, Z+1	; 0x01
	pwm_right_speed_controller += (signed long int)(delta_right_speed_current*P_HORIZONTAL);
    37ce:	cd 01       	movw	r24, r26
    37d0:	88 0f       	add	r24, r24
    37d2:	99 1f       	adc	r25, r25
    37d4:	8a 0f       	add	r24, r26
    37d6:	9b 1f       	adc	r25, r27
    37d8:	9c 01       	movw	r18, r24
    37da:	22 0f       	add	r18, r18
    37dc:	33 1f       	adc	r19, r19
    37de:	22 0f       	add	r18, r18
    37e0:	33 1f       	adc	r19, r19
    37e2:	28 0f       	add	r18, r24
    37e4:	39 1f       	adc	r19, r25
    37e6:	44 27       	eor	r20, r20
    37e8:	37 fd       	sbrc	r19, 7
    37ea:	40 95       	com	r20
    37ec:	54 2f       	mov	r21, r20
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
	}		

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed long int)((*pwm_right) << 3);
    37ee:	b8 01       	movw	r22, r16
    37f0:	66 0f       	add	r22, r22
    37f2:	77 1f       	adc	r23, r23
    37f4:	66 0f       	add	r22, r22
    37f6:	77 1f       	adc	r23, r23
    37f8:	66 0f       	add	r22, r22
    37fa:	77 1f       	adc	r23, r23
    37fc:	88 27       	eor	r24, r24
    37fe:	77 fd       	sbrc	r23, 7
    3800:	80 95       	com	r24
    3802:	98 2f       	mov	r25, r24
	pwm_right_speed_controller += (signed long int)(delta_right_speed_current*P_HORIZONTAL);
    3804:	26 0f       	add	r18, r22
    3806:	37 1f       	adc	r19, r23
    3808:	48 1f       	adc	r20, r24
    380a:	59 1f       	adc	r21, r25
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
    380c:	ac 1b       	sub	r26, r28
    380e:	bd 0b       	sbc	r27, r29
    3810:	cd 01       	movw	r24, r26
    3812:	88 0f       	add	r24, r24
    3814:	99 1f       	adc	r25, r25
    3816:	8a 0f       	add	r24, r26
    3818:	9b 1f       	adc	r25, r27
    381a:	aa 27       	eor	r26, r26
    381c:	97 fd       	sbrc	r25, 7
    381e:	a0 95       	com	r26
    3820:	ba 2f       	mov	r27, r26
    3822:	28 0f       	add	r18, r24
    3824:	39 1f       	adc	r19, r25
    3826:	4a 1f       	adc	r20, r26
    3828:	5b 1f       	adc	r21, r27
	pwm_right_speed_controller += (signed long int)(delta_right_speed_sum*I_HORIZONTAL);
    382a:	2c 0d       	add	r18, r12
    382c:	3d 1d       	adc	r19, r13
    382e:	4e 1d       	adc	r20, r14
    3830:	5f 1d       	adc	r21, r15
    3832:	20 93 11 03 	sts	0x0311, r18
    3836:	30 93 12 03 	sts	0x0312, r19
    383a:	40 93 13 03 	sts	0x0313, r20
    383e:	50 93 14 03 	sts	0x0314, r21

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    3842:	57 fd       	sbrc	r21, 7
    3844:	7a c0       	rjmp	.+244    	; 0x393a <start_horizontal_speed_control_right+0x1f2>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    3846:	12 16       	cp	r1, r18
    3848:	13 06       	cpc	r1, r19
    384a:	14 06       	cpc	r1, r20
    384c:	15 06       	cpc	r1, r21
    384e:	0c f0       	brlt	.+2      	; 0x3852 <start_horizontal_speed_control_right+0x10a>
    3850:	81 c0       	rjmp	.+258    	; 0x3954 <start_horizontal_speed_control_right+0x20c>
    3852:	17 fd       	sbrc	r17, 7
    3854:	ad c0       	rjmp	.+346    	; 0x39b0 <start_horizontal_speed_control_right+0x268>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    3856:	21 3c       	cpi	r18, 0xC1	; 193
    3858:	8d e5       	ldi	r24, 0x5D	; 93
    385a:	38 07       	cpc	r19, r24
    385c:	80 e0       	ldi	r24, 0x00	; 0
    385e:	48 07       	cpc	r20, r24
    3860:	80 e0       	ldi	r24, 0x00	; 0
    3862:	58 07       	cpc	r21, r24
    3864:	0c f4       	brge	.+2      	; 0x3868 <start_horizontal_speed_control_right+0x120>
    3866:	76 c0       	rjmp	.+236    	; 0x3954 <start_horizontal_speed_control_right+0x20c>
    3868:	80 ec       	ldi	r24, 0xC0	; 192
    386a:	9d e5       	ldi	r25, 0x5D	; 93
    386c:	a0 e0       	ldi	r26, 0x00	; 0
    386e:	b0 e0       	ldi	r27, 0x00	; 0
    3870:	80 93 11 03 	sts	0x0311, r24
    3874:	90 93 12 03 	sts	0x0312, r25
    3878:	a0 93 13 03 	sts	0x0313, r26
    387c:	b0 93 14 03 	sts	0x0314, r27
    3880:	2c ed       	ldi	r18, 0xDC	; 220
    3882:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = (signed int)(pwm_right_speed_controller>>4);
    3884:	31 83       	std	Z+1, r19	; 0x01
    3886:	20 83       	st	Z, r18

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
    3888:	80 91 f9 02 	lds	r24, 0x02F9
    388c:	90 91 fa 02 	lds	r25, 0x02FA
    3890:	18 16       	cp	r1, r24
    3892:	19 06       	cpc	r1, r25
    3894:	0c f0       	brlt	.+2      	; 0x3898 <start_horizontal_speed_control_right+0x150>
    3896:	87 c0       	rjmp	.+270    	; 0x39a6 <start_horizontal_speed_control_right+0x25e>
		*pwm_right += 1;
    3898:	2f 5f       	subi	r18, 0xFF	; 255
    389a:	3f 4f       	sbci	r19, 0xFF	; 255
    389c:	31 83       	std	Z+1, r19	; 0x01
    389e:	20 83       	st	Z, r18
	} else {
		*pwm_right -= 1;
	}

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
    38a0:	12 16       	cp	r1, r18
    38a2:	13 06       	cpc	r1, r19
    38a4:	0c f0       	brlt	.+2      	; 0x38a8 <start_horizontal_speed_control_right+0x160>
    38a6:	6d c0       	rjmp	.+218    	; 0x3982 <start_horizontal_speed_control_right+0x23a>
		*pwm_right += 30;
    38a8:	22 5e       	subi	r18, 0xE2	; 226
    38aa:	3f 4f       	sbci	r19, 0xFF	; 255
    38ac:	31 83       	std	Z+1, r19	; 0x01
    38ae:	20 83       	st	Z, r18
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    38b0:	82 e0       	ldi	r24, 0x02	; 2
    38b2:	21 30       	cpi	r18, 0x01	; 1
    38b4:	38 07       	cpc	r19, r24
    38b6:	0c f4       	brge	.+2      	; 0x38ba <start_horizontal_speed_control_right+0x172>
    38b8:	6c c0       	rjmp	.+216    	; 0x3992 <start_horizontal_speed_control_right+0x24a>
    38ba:	80 e0       	ldi	r24, 0x00	; 0
    38bc:	92 e0       	ldi	r25, 0x02	; 2
    38be:	91 83       	std	Z+1, r25	; 0x01
    38c0:	80 83       	st	Z, r24
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    38c2:	df 91       	pop	r29
    38c4:	cf 91       	pop	r28
    38c6:	1f 91       	pop	r17
    38c8:	0f 91       	pop	r16
    38ca:	ff 90       	pop	r15
    38cc:	ef 90       	pop	r14
    38ce:	df 90       	pop	r13
    38d0:	cf 90       	pop	r12
    38d2:	08 95       	ret
void start_horizontal_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    38d4:	10 92 1c 03 	sts	0x031C, r1
    38d8:	10 92 1b 03 	sts	0x031B, r1
		delta_right_speed_current = 0;
    38dc:	10 92 23 0b 	sts	0x0B23, r1
    38e0:	10 92 22 0b 	sts	0x0B22, r1
		delta_right_speed_prev = 0;
    38e4:	10 92 bc 08 	sts	0x08BC, r1
    38e8:	10 92 bb 08 	sts	0x08BB, r1
		return;
    38ec:	ea cf       	rjmp	.-44     	; 0x38c2 <start_horizontal_speed_control_right+0x17a>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    38ee:	80 ec       	ldi	r24, 0xC0	; 192
    38f0:	c8 16       	cp	r12, r24
    38f2:	89 ef       	ldi	r24, 0xF9	; 249
    38f4:	d8 06       	cpc	r13, r24
    38f6:	d4 f4       	brge	.+52     	; 0x392c <start_horizontal_speed_control_right+0x1e4>
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
    38f8:	80 ec       	ldi	r24, 0xC0	; 192
    38fa:	99 ef       	ldi	r25, 0xF9	; 249
    38fc:	90 93 1c 03 	sts	0x031C, r25
    3900:	80 93 1b 03 	sts	0x031B, r24
    3904:	60 e8       	ldi	r22, 0x80	; 128
    3906:	c6 2e       	mov	r12, r22
    3908:	63 ef       	ldi	r22, 0xF3	; 243
    390a:	d6 2e       	mov	r13, r22
    390c:	6f ef       	ldi	r22, 0xFF	; 255
    390e:	e6 2e       	mov	r14, r22
    3910:	6f ef       	ldi	r22, 0xFF	; 255
    3912:	f6 2e       	mov	r15, r22
    3914:	5a cf       	rjmp	.-332    	; 0x37ca <start_horizontal_speed_control_right+0x82>
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    3916:	a0 91 03 03 	lds	r26, 0x0303
    391a:	b0 91 04 03 	lds	r27, 0x0304
    391e:	a8 0f       	add	r26, r24
    3920:	b9 1f       	adc	r27, r25
    3922:	b0 93 23 0b 	sts	0x0B23, r27
    3926:	a0 93 22 0b 	sts	0x0B22, r26
    392a:	33 cf       	rjmp	.-410    	; 0x3792 <start_horizontal_speed_control_right+0x4a>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    392c:	cc 0c       	add	r12, r12
    392e:	dd 1c       	adc	r13, r13
    3930:	ee 24       	eor	r14, r14
    3932:	d7 fc       	sbrc	r13, 7
    3934:	e0 94       	com	r14
    3936:	fe 2c       	mov	r15, r14
    3938:	48 cf       	rjmp	.-368    	; 0x37ca <start_horizontal_speed_control_right+0x82>
	pwm_right_speed_controller += (signed long int)(delta_right_speed_current*P_HORIZONTAL);
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
	pwm_right_speed_controller += (signed long int)(delta_right_speed_sum*I_HORIZONTAL);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    393a:	17 fd       	sbrc	r17, 7
    393c:	0b c0       	rjmp	.+22     	; 0x3954 <start_horizontal_speed_control_right+0x20c>
		pwm_right_speed_controller = 0;
    393e:	10 92 11 03 	sts	0x0311, r1
    3942:	10 92 12 03 	sts	0x0312, r1
    3946:	10 92 13 03 	sts	0x0313, r1
    394a:	10 92 14 03 	sts	0x0314, r1
    394e:	20 e0       	ldi	r18, 0x00	; 0
    3950:	30 e0       	ldi	r19, 0x00	; 0
    3952:	a9 01       	movw	r20, r18
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    3954:	20 34       	cpi	r18, 0x40	; 64
    3956:	82 ea       	ldi	r24, 0xA2	; 162
    3958:	38 07       	cpc	r19, r24
    395a:	8f ef       	ldi	r24, 0xFF	; 255
    395c:	48 07       	cpc	r20, r24
    395e:	8f ef       	ldi	r24, 0xFF	; 255
    3960:	58 07       	cpc	r21, r24
    3962:	8c f5       	brge	.+98     	; 0x39c6 <start_horizontal_speed_control_right+0x27e>
    3964:	80 e4       	ldi	r24, 0x40	; 64
    3966:	92 ea       	ldi	r25, 0xA2	; 162
    3968:	af ef       	ldi	r26, 0xFF	; 255
    396a:	bf ef       	ldi	r27, 0xFF	; 255
    396c:	80 93 11 03 	sts	0x0311, r24
    3970:	90 93 12 03 	sts	0x0312, r25
    3974:	a0 93 13 03 	sts	0x0313, r26
    3978:	b0 93 14 03 	sts	0x0314, r27
    397c:	24 e2       	ldi	r18, 0x24	; 36
    397e:	3a ef       	ldi	r19, 0xFA	; 250
    3980:	81 cf       	rjmp	.-254    	; 0x3884 <start_horizontal_speed_control_right+0x13c>
	}

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
		*pwm_right += 30;
	} else if(*pwm_right < 0) {
    3982:	21 15       	cp	r18, r1
    3984:	31 05       	cpc	r19, r1
    3986:	09 f4       	brne	.+2      	; 0x398a <start_horizontal_speed_control_right+0x242>
    3988:	9c cf       	rjmp	.-200    	; 0x38c2 <start_horizontal_speed_control_right+0x17a>
		*pwm_right -= 30;
    398a:	2e 51       	subi	r18, 0x1E	; 30
    398c:	30 40       	sbci	r19, 0x00	; 0
    398e:	31 83       	std	Z+1, r19	; 0x01
    3990:	20 83       	st	Z, r18
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    3992:	8e ef       	ldi	r24, 0xFE	; 254
    3994:	20 30       	cpi	r18, 0x00	; 0
    3996:	38 07       	cpc	r19, r24
    3998:	0c f0       	brlt	.+2      	; 0x399c <start_horizontal_speed_control_right+0x254>
    399a:	93 cf       	rjmp	.-218    	; 0x38c2 <start_horizontal_speed_control_right+0x17a>
    399c:	80 e0       	ldi	r24, 0x00	; 0
    399e:	9e ef       	ldi	r25, 0xFE	; 254
    39a0:	91 83       	std	Z+1, r25	; 0x01
    39a2:	80 83       	st	Z, r24
    39a4:	8e cf       	rjmp	.-228    	; 0x38c2 <start_horizontal_speed_control_right+0x17a>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
		*pwm_right += 1;
	} else {
		*pwm_right -= 1;
    39a6:	21 50       	subi	r18, 0x01	; 1
    39a8:	30 40       	sbci	r19, 0x00	; 0
    39aa:	31 83       	std	Z+1, r19	; 0x01
    39ac:	20 83       	st	Z, r18
    39ae:	78 cf       	rjmp	.-272    	; 0x38a0 <start_horizontal_speed_control_right+0x158>
	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    39b0:	10 92 11 03 	sts	0x0311, r1
    39b4:	10 92 12 03 	sts	0x0312, r1
    39b8:	10 92 13 03 	sts	0x0313, r1
    39bc:	10 92 14 03 	sts	0x0314, r1
    39c0:	20 e0       	ldi	r18, 0x00	; 0
    39c2:	30 e0       	ldi	r19, 0x00	; 0
    39c4:	a9 01       	movw	r20, r18
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    39c6:	14 e0       	ldi	r17, 0x04	; 4
    39c8:	55 95       	asr	r21
    39ca:	47 95       	ror	r20
    39cc:	37 95       	ror	r19
    39ce:	27 95       	ror	r18
    39d0:	1a 95       	dec	r17
    39d2:	d1 f7       	brne	.-12     	; 0x39c8 <start_horizontal_speed_control_right+0x280>
    39d4:	57 cf       	rjmp	.-338    	; 0x3884 <start_horizontal_speed_control_right+0x13c>

000039d6 <start_horizontal_speed_control_left>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_left(signed int *pwm_left) {
    39d6:	cf 92       	push	r12
    39d8:	df 92       	push	r13
    39da:	ef 92       	push	r14
    39dc:	ff 92       	push	r15
    39de:	0f 93       	push	r16
    39e0:	1f 93       	push	r17
    39e2:	cf 93       	push	r28
    39e4:	df 93       	push	r29
    39e6:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
    39e8:	80 81       	ld	r24, Z
    39ea:	91 81       	ldd	r25, Z+1	; 0x01
    39ec:	00 97       	sbiw	r24, 0x00	; 0
    39ee:	09 f4       	brne	.+2      	; 0x39f2 <start_horizontal_speed_control_left+0x1c>
    39f0:	b8 c0       	rjmp	.+368    	; 0x3b62 <start_horizontal_speed_control_left+0x18c>
		delta_left_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    39f2:	c0 91 6c 05 	lds	r28, 0x056C
    39f6:	d0 91 6d 05 	lds	r29, 0x056D
    39fa:	d0 93 84 09 	sts	0x0984, r29
    39fe:	c0 93 83 09 	sts	0x0983, r28
	if(*pwm_left >= 0) {
    3a02:	80 81       	ld	r24, Z
    3a04:	91 81       	ldd	r25, Z+1	; 0x01
    3a06:	97 fd       	sbrc	r25, 7
    3a08:	cd c0       	rjmp	.+410    	; 0x3ba4 <start_horizontal_speed_control_left+0x1ce>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    3a0a:	20 91 01 03 	lds	r18, 0x0301
    3a0e:	30 91 02 03 	lds	r19, 0x0302
    3a12:	dc 01       	movw	r26, r24
    3a14:	a2 1b       	sub	r26, r18
    3a16:	b3 0b       	sbc	r27, r19
    3a18:	b0 93 6d 05 	sts	0x056D, r27
    3a1c:	a0 93 6c 05 	sts	0x056C, r26
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;
    3a20:	c0 90 19 03 	lds	r12, 0x0319
    3a24:	d0 90 1a 03 	lds	r13, 0x031A
    3a28:	ca 0e       	add	r12, r26
    3a2a:	db 1e       	adc	r13, r27
    3a2c:	d0 92 1a 03 	sts	0x031A, r13
    3a30:	c0 92 19 03 	sts	0x0319, r12

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
    3a34:	81 e4       	ldi	r24, 0x41	; 65
    3a36:	c8 16       	cp	r12, r24
    3a38:	86 e0       	ldi	r24, 0x06	; 6
    3a3a:	d8 06       	cpc	r13, r24
    3a3c:	0c f4       	brge	.+2      	; 0x3a40 <start_horizontal_speed_control_left+0x6a>
    3a3e:	9e c0       	rjmp	.+316    	; 0x3b7c <start_horizontal_speed_control_left+0x1a6>
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
    3a40:	80 e4       	ldi	r24, 0x40	; 64
    3a42:	96 e0       	ldi	r25, 0x06	; 6
    3a44:	90 93 1a 03 	sts	0x031A, r25
    3a48:	80 93 19 03 	sts	0x0319, r24
    3a4c:	10 e8       	ldi	r17, 0x80	; 128
    3a4e:	c1 2e       	mov	r12, r17
    3a50:	1c e0       	ldi	r17, 0x0C	; 12
    3a52:	d1 2e       	mov	r13, r17
    3a54:	e1 2c       	mov	r14, r1
    3a56:	f1 2c       	mov	r15, r1
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed long int)((*pwm_left) << 3);
    3a58:	00 81       	ld	r16, Z
    3a5a:	11 81       	ldd	r17, Z+1	; 0x01
	pwm_left_speed_controller += (signed long int)(delta_left_speed_current*P_HORIZONTAL);
    3a5c:	cd 01       	movw	r24, r26
    3a5e:	88 0f       	add	r24, r24
    3a60:	99 1f       	adc	r25, r25
    3a62:	8a 0f       	add	r24, r26
    3a64:	9b 1f       	adc	r25, r27
    3a66:	9c 01       	movw	r18, r24
    3a68:	22 0f       	add	r18, r18
    3a6a:	33 1f       	adc	r19, r19
    3a6c:	22 0f       	add	r18, r18
    3a6e:	33 1f       	adc	r19, r19
    3a70:	28 0f       	add	r18, r24
    3a72:	39 1f       	adc	r19, r25
    3a74:	44 27       	eor	r20, r20
    3a76:	37 fd       	sbrc	r19, 7
    3a78:	40 95       	com	r20
    3a7a:	54 2f       	mov	r21, r20
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed long int)((*pwm_left) << 3);
    3a7c:	b8 01       	movw	r22, r16
    3a7e:	66 0f       	add	r22, r22
    3a80:	77 1f       	adc	r23, r23
    3a82:	66 0f       	add	r22, r22
    3a84:	77 1f       	adc	r23, r23
    3a86:	66 0f       	add	r22, r22
    3a88:	77 1f       	adc	r23, r23
    3a8a:	88 27       	eor	r24, r24
    3a8c:	77 fd       	sbrc	r23, 7
    3a8e:	80 95       	com	r24
    3a90:	98 2f       	mov	r25, r24
	pwm_left_speed_controller += (signed long int)(delta_left_speed_current*P_HORIZONTAL);
    3a92:	26 0f       	add	r18, r22
    3a94:	37 1f       	adc	r19, r23
    3a96:	48 1f       	adc	r20, r24
    3a98:	59 1f       	adc	r21, r25
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
    3a9a:	ac 1b       	sub	r26, r28
    3a9c:	bd 0b       	sbc	r27, r29
    3a9e:	cd 01       	movw	r24, r26
    3aa0:	88 0f       	add	r24, r24
    3aa2:	99 1f       	adc	r25, r25
    3aa4:	8a 0f       	add	r24, r26
    3aa6:	9b 1f       	adc	r25, r27
    3aa8:	aa 27       	eor	r26, r26
    3aaa:	97 fd       	sbrc	r25, 7
    3aac:	a0 95       	com	r26
    3aae:	ba 2f       	mov	r27, r26
    3ab0:	28 0f       	add	r18, r24
    3ab2:	39 1f       	adc	r19, r25
    3ab4:	4a 1f       	adc	r20, r26
    3ab6:	5b 1f       	adc	r21, r27
	pwm_left_speed_controller += (signed long int)(delta_left_speed_sum*I_HORIZONTAL);
    3ab8:	2c 0d       	add	r18, r12
    3aba:	3d 1d       	adc	r19, r13
    3abc:	4e 1d       	adc	r20, r14
    3abe:	5f 1d       	adc	r21, r15
    3ac0:	20 93 15 03 	sts	0x0315, r18
    3ac4:	30 93 16 03 	sts	0x0316, r19
    3ac8:	40 93 17 03 	sts	0x0317, r20
    3acc:	50 93 18 03 	sts	0x0318, r21

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    3ad0:	57 fd       	sbrc	r21, 7
    3ad2:	7a c0       	rjmp	.+244    	; 0x3bc8 <start_horizontal_speed_control_left+0x1f2>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    3ad4:	12 16       	cp	r1, r18
    3ad6:	13 06       	cpc	r1, r19
    3ad8:	14 06       	cpc	r1, r20
    3ada:	15 06       	cpc	r1, r21
    3adc:	0c f0       	brlt	.+2      	; 0x3ae0 <start_horizontal_speed_control_left+0x10a>
    3ade:	81 c0       	rjmp	.+258    	; 0x3be2 <start_horizontal_speed_control_left+0x20c>
    3ae0:	17 fd       	sbrc	r17, 7
    3ae2:	ad c0       	rjmp	.+346    	; 0x3c3e <start_horizontal_speed_control_left+0x268>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    3ae4:	21 3c       	cpi	r18, 0xC1	; 193
    3ae6:	8d e5       	ldi	r24, 0x5D	; 93
    3ae8:	38 07       	cpc	r19, r24
    3aea:	80 e0       	ldi	r24, 0x00	; 0
    3aec:	48 07       	cpc	r20, r24
    3aee:	80 e0       	ldi	r24, 0x00	; 0
    3af0:	58 07       	cpc	r21, r24
    3af2:	0c f4       	brge	.+2      	; 0x3af6 <start_horizontal_speed_control_left+0x120>
    3af4:	76 c0       	rjmp	.+236    	; 0x3be2 <start_horizontal_speed_control_left+0x20c>
    3af6:	80 ec       	ldi	r24, 0xC0	; 192
    3af8:	9d e5       	ldi	r25, 0x5D	; 93
    3afa:	a0 e0       	ldi	r26, 0x00	; 0
    3afc:	b0 e0       	ldi	r27, 0x00	; 0
    3afe:	80 93 15 03 	sts	0x0315, r24
    3b02:	90 93 16 03 	sts	0x0316, r25
    3b06:	a0 93 17 03 	sts	0x0317, r26
    3b0a:	b0 93 18 03 	sts	0x0318, r27
    3b0e:	2c ed       	ldi	r18, 0xDC	; 220
    3b10:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = (signed int)(pwm_left_speed_controller>>4);
    3b12:	31 83       	std	Z+1, r19	; 0x01
    3b14:	20 83       	st	Z, r18

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
    3b16:	80 91 fb 02 	lds	r24, 0x02FB
    3b1a:	90 91 fc 02 	lds	r25, 0x02FC
    3b1e:	18 16       	cp	r1, r24
    3b20:	19 06       	cpc	r1, r25
    3b22:	0c f0       	brlt	.+2      	; 0x3b26 <start_horizontal_speed_control_left+0x150>
    3b24:	87 c0       	rjmp	.+270    	; 0x3c34 <start_horizontal_speed_control_left+0x25e>
		*pwm_left += 1;
    3b26:	2f 5f       	subi	r18, 0xFF	; 255
    3b28:	3f 4f       	sbci	r19, 0xFF	; 255
    3b2a:	31 83       	std	Z+1, r19	; 0x01
    3b2c:	20 83       	st	Z, r18
	} else {
		*pwm_left -= 1;
	}

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
    3b2e:	12 16       	cp	r1, r18
    3b30:	13 06       	cpc	r1, r19
    3b32:	0c f0       	brlt	.+2      	; 0x3b36 <start_horizontal_speed_control_left+0x160>
    3b34:	6d c0       	rjmp	.+218    	; 0x3c10 <start_horizontal_speed_control_left+0x23a>
		*pwm_left += 30;
    3b36:	22 5e       	subi	r18, 0xE2	; 226
    3b38:	3f 4f       	sbci	r19, 0xFF	; 255
    3b3a:	31 83       	std	Z+1, r19	; 0x01
    3b3c:	20 83       	st	Z, r18
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    3b3e:	82 e0       	ldi	r24, 0x02	; 2
    3b40:	21 30       	cpi	r18, 0x01	; 1
    3b42:	38 07       	cpc	r19, r24
    3b44:	0c f4       	brge	.+2      	; 0x3b48 <start_horizontal_speed_control_left+0x172>
    3b46:	6c c0       	rjmp	.+216    	; 0x3c20 <start_horizontal_speed_control_left+0x24a>
    3b48:	80 e0       	ldi	r24, 0x00	; 0
    3b4a:	92 e0       	ldi	r25, 0x02	; 2
    3b4c:	91 83       	std	Z+1, r25	; 0x01
    3b4e:	80 83       	st	Z, r24
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);

}
    3b50:	df 91       	pop	r29
    3b52:	cf 91       	pop	r28
    3b54:	1f 91       	pop	r17
    3b56:	0f 91       	pop	r16
    3b58:	ff 90       	pop	r15
    3b5a:	ef 90       	pop	r14
    3b5c:	df 90       	pop	r13
    3b5e:	cf 90       	pop	r12
    3b60:	08 95       	ret
void start_horizontal_speed_control_left(signed int *pwm_left) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    3b62:	10 92 1a 03 	sts	0x031A, r1
    3b66:	10 92 19 03 	sts	0x0319, r1
		delta_left_speed_current = 0;
    3b6a:	10 92 6d 05 	sts	0x056D, r1
    3b6e:	10 92 6c 05 	sts	0x056C, r1
		delta_left_speed_prev = 0;
    3b72:	10 92 84 09 	sts	0x0984, r1
    3b76:	10 92 83 09 	sts	0x0983, r1
		return;
    3b7a:	ea cf       	rjmp	.-44     	; 0x3b50 <start_horizontal_speed_control_left+0x17a>
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    3b7c:	80 ec       	ldi	r24, 0xC0	; 192
    3b7e:	c8 16       	cp	r12, r24
    3b80:	89 ef       	ldi	r24, 0xF9	; 249
    3b82:	d8 06       	cpc	r13, r24
    3b84:	d4 f4       	brge	.+52     	; 0x3bba <start_horizontal_speed_control_left+0x1e4>
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
    3b86:	80 ec       	ldi	r24, 0xC0	; 192
    3b88:	99 ef       	ldi	r25, 0xF9	; 249
    3b8a:	90 93 1a 03 	sts	0x031A, r25
    3b8e:	80 93 19 03 	sts	0x0319, r24
    3b92:	60 e8       	ldi	r22, 0x80	; 128
    3b94:	c6 2e       	mov	r12, r22
    3b96:	63 ef       	ldi	r22, 0xF3	; 243
    3b98:	d6 2e       	mov	r13, r22
    3b9a:	6f ef       	ldi	r22, 0xFF	; 255
    3b9c:	e6 2e       	mov	r14, r22
    3b9e:	6f ef       	ldi	r22, 0xFF	; 255
    3ba0:	f6 2e       	mov	r15, r22
    3ba2:	5a cf       	rjmp	.-332    	; 0x3a58 <start_horizontal_speed_control_left+0x82>
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    3ba4:	a0 91 01 03 	lds	r26, 0x0301
    3ba8:	b0 91 02 03 	lds	r27, 0x0302
    3bac:	a8 0f       	add	r26, r24
    3bae:	b9 1f       	adc	r27, r25
    3bb0:	b0 93 6d 05 	sts	0x056D, r27
    3bb4:	a0 93 6c 05 	sts	0x056C, r26
    3bb8:	33 cf       	rjmp	.-410    	; 0x3a20 <start_horizontal_speed_control_left+0x4a>
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    3bba:	cc 0c       	add	r12, r12
    3bbc:	dd 1c       	adc	r13, r13
    3bbe:	ee 24       	eor	r14, r14
    3bc0:	d7 fc       	sbrc	r13, 7
    3bc2:	e0 94       	com	r14
    3bc4:	fe 2c       	mov	r15, r14
    3bc6:	48 cf       	rjmp	.-368    	; 0x3a58 <start_horizontal_speed_control_left+0x82>
	pwm_left_speed_controller += (signed long int)(delta_left_speed_current*P_HORIZONTAL);
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
	pwm_left_speed_controller += (signed long int)(delta_left_speed_sum*I_HORIZONTAL);

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    3bc8:	17 fd       	sbrc	r17, 7
    3bca:	0b c0       	rjmp	.+22     	; 0x3be2 <start_horizontal_speed_control_left+0x20c>
		pwm_left_speed_controller = 0;
    3bcc:	10 92 15 03 	sts	0x0315, r1
    3bd0:	10 92 16 03 	sts	0x0316, r1
    3bd4:	10 92 17 03 	sts	0x0317, r1
    3bd8:	10 92 18 03 	sts	0x0318, r1
    3bdc:	20 e0       	ldi	r18, 0x00	; 0
    3bde:	30 e0       	ldi	r19, 0x00	; 0
    3be0:	a9 01       	movw	r20, r18
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    3be2:	20 34       	cpi	r18, 0x40	; 64
    3be4:	82 ea       	ldi	r24, 0xA2	; 162
    3be6:	38 07       	cpc	r19, r24
    3be8:	8f ef       	ldi	r24, 0xFF	; 255
    3bea:	48 07       	cpc	r20, r24
    3bec:	8f ef       	ldi	r24, 0xFF	; 255
    3bee:	58 07       	cpc	r21, r24
    3bf0:	8c f5       	brge	.+98     	; 0x3c54 <start_horizontal_speed_control_left+0x27e>
    3bf2:	80 e4       	ldi	r24, 0x40	; 64
    3bf4:	92 ea       	ldi	r25, 0xA2	; 162
    3bf6:	af ef       	ldi	r26, 0xFF	; 255
    3bf8:	bf ef       	ldi	r27, 0xFF	; 255
    3bfa:	80 93 15 03 	sts	0x0315, r24
    3bfe:	90 93 16 03 	sts	0x0316, r25
    3c02:	a0 93 17 03 	sts	0x0317, r26
    3c06:	b0 93 18 03 	sts	0x0318, r27
    3c0a:	24 e2       	ldi	r18, 0x24	; 36
    3c0c:	3a ef       	ldi	r19, 0xFA	; 250
    3c0e:	81 cf       	rjmp	.-254    	; 0x3b12 <start_horizontal_speed_control_left+0x13c>
	}

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
		*pwm_left += 30;
	} else if(*pwm_left < 0) {
    3c10:	21 15       	cp	r18, r1
    3c12:	31 05       	cpc	r19, r1
    3c14:	09 f4       	brne	.+2      	; 0x3c18 <start_horizontal_speed_control_left+0x242>
    3c16:	9c cf       	rjmp	.-200    	; 0x3b50 <start_horizontal_speed_control_left+0x17a>
		*pwm_left -= 30;
    3c18:	2e 51       	subi	r18, 0x1E	; 30
    3c1a:	30 40       	sbci	r19, 0x00	; 0
    3c1c:	31 83       	std	Z+1, r19	; 0x01
    3c1e:	20 83       	st	Z, r18
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    3c20:	8e ef       	ldi	r24, 0xFE	; 254
    3c22:	20 30       	cpi	r18, 0x00	; 0
    3c24:	38 07       	cpc	r19, r24
    3c26:	0c f0       	brlt	.+2      	; 0x3c2a <start_horizontal_speed_control_left+0x254>
    3c28:	93 cf       	rjmp	.-218    	; 0x3b50 <start_horizontal_speed_control_left+0x17a>
    3c2a:	80 e0       	ldi	r24, 0x00	; 0
    3c2c:	9e ef       	ldi	r25, 0xFE	; 254
    3c2e:	91 83       	std	Z+1, r25	; 0x01
    3c30:	80 83       	st	Z, r24
    3c32:	8e cf       	rjmp	.-228    	; 0x3b50 <start_horizontal_speed_control_left+0x17a>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
		*pwm_left += 1;
	} else {
		*pwm_left -= 1;
    3c34:	21 50       	subi	r18, 0x01	; 1
    3c36:	30 40       	sbci	r19, 0x00	; 0
    3c38:	31 83       	std	Z+1, r19	; 0x01
    3c3a:	20 83       	st	Z, r18
    3c3c:	78 cf       	rjmp	.-272    	; 0x3b2e <start_horizontal_speed_control_left+0x158>
	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    3c3e:	10 92 15 03 	sts	0x0315, r1
    3c42:	10 92 16 03 	sts	0x0316, r1
    3c46:	10 92 17 03 	sts	0x0317, r1
    3c4a:	10 92 18 03 	sts	0x0318, r1
    3c4e:	20 e0       	ldi	r18, 0x00	; 0
    3c50:	30 e0       	ldi	r19, 0x00	; 0
    3c52:	a9 01       	movw	r20, r18
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    3c54:	04 e0       	ldi	r16, 0x04	; 4
    3c56:	55 95       	asr	r21
    3c58:	47 95       	ror	r20
    3c5a:	37 95       	ror	r19
    3c5c:	27 95       	ror	r18
    3c5e:	0a 95       	dec	r16
    3c60:	d1 f7       	brne	.-12     	; 0x3c56 <start_horizontal_speed_control_left+0x280>
    3c62:	57 cf       	rjmp	.-338    	; 0x3b12 <start_horizontal_speed_control_left+0x13c>

00003c64 <initPortsIO>:
#include "ports_io.h"


void initPortsIO(void) {

	MCUCR |= (1 << PUD);	// pull-up disable for all ports
    3c64:	85 b7       	in	r24, 0x35	; 53
    3c66:	80 61       	ori	r24, 0x10	; 16
    3c68:	85 bf       	out	0x35, r24	; 53

	DDRA = 0xFF;			// proximity pulses as output
    3c6a:	8f ef       	ldi	r24, 0xFF	; 255
    3c6c:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;			// proximity pulses turned off
    3c6e:	12 b8       	out	0x02, r1	; 2
	
	DDRB = 0xF7;			// pwm for led r/g/b as output; CE, MOSI, SCK, SS as output (master) 
    3c70:	97 ef       	ldi	r25, 0xF7	; 247
    3c72:	94 b9       	out	0x04, r25	; 4
	PORTB = 0xE0;			// r,g,b leds turned off on high state
    3c74:	90 ee       	ldi	r25, 0xE0	; 224
    3c76:	95 b9       	out	0x05, r25	; 5

	DDRC = 0xF0;			// selector as input; IR leds as output; sens-enable, sleep as output
    3c78:	90 ef       	ldi	r25, 0xF0	; 240
    3c7a:	97 b9       	out	0x07, r25	; 7
	PORTC = 0xB0;			// sleep = 1 (no sleep), sense_enable=0, IR leds = 1
    3c7c:	90 eb       	ldi	r25, 0xB0	; 176
    3c7e:	98 b9       	out	0x08, r25	; 8

	DDRD = 0xFC;			// all pins to output; when usart and i2c peripherals are activated they change the pins direction accordingly
    3c80:	9c ef       	ldi	r25, 0xFC	; 252
    3c82:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0x03;			// default for unused pins is 0
    3c84:	93 e0       	ldi	r25, 0x03	; 3
    3c86:	9b b9       	out	0x0b, r25	; 11

	DDRE = 0xFF;			// all pins to output (pwm and dir for motor right as output; when usart is activated it changes the pins direction accordingly)
    3c88:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    3c8a:	1e b8       	out	0x0e, r1	; 14

	DDRF = 0x00;			// adc channel pins as input		
    3c8c:	10 ba       	out	0x10, r1	; 16

	DDRG = 0xFF;			// unused pins as output
    3c8e:	83 bb       	out	0x13, r24	; 19
	if(hardwareRevision == HW_REV_3_0) {
    3c90:	80 91 5f 04 	lds	r24, 0x045F
    3c94:	88 23       	and	r24, r24
    3c96:	e1 f0       	breq	.+56     	; 0x3cd0 <initPortsIO+0x6c>
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    3c98:	81 30       	cpi	r24, 0x01	; 1
    3c9a:	d1 f0       	breq	.+52     	; 0x3cd0 <initPortsIO+0x6c>
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    3c9c:	82 30       	cpi	r24, 0x02	; 2
    3c9e:	51 f1       	breq	.+84     	; 0x3cf4 <initPortsIO+0x90>
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
	}	

	DDRH = 0xFF;			// all pins to output; when usart is activated it changes the pins direction accordingly
    3ca0:	9f ef       	ldi	r25, 0xFF	; 255
    3ca2:	90 93 01 01 	sts	0x0101, r25
	PORTH = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    3ca6:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
    3caa:	9f e0       	ldi	r25, 0x0F	; 15
    3cac:	90 93 04 01 	sts	0x0104, r25
	if(hardwareRevision == HW_REV_3_0) {
    3cb0:	88 23       	and	r24, r24
    3cb2:	a9 f4       	brne	.+42     	; 0x3cde <initPortsIO+0x7a>
		PORTJ &= 0x00;		// cliff pulse turned off
    3cb4:	90 91 05 01 	lds	r25, 0x0105
    3cb8:	10 92 05 01 	sts	0x0105, r1
	if(hardwareRevision == HW_REV_3_1) {
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.1)"
	}	

	DDRK = 0x00;			// adc channel pins as input
    3cbc:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;			// all pins to output
    3cc0:	9f ef       	ldi	r25, 0xFF	; 255
    3cc2:	90 93 0a 01 	sts	0x010A, r25
	if(hardwareRevision == HW_REV_3_0) {
    3cc6:	88 23       	and	r24, r24
    3cc8:	29 f4       	brne	.+10     	; 0x3cd4 <initPortsIO+0x70>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
    3cca:	10 92 0b 01 	sts	0x010B, r1
    3cce:	08 95       	ret
	DDRG = 0xFF;			// unused pins as output
	if(hardwareRevision == HW_REV_3_0) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
    3cd0:	14 ba       	out	0x14, r1	; 20
    3cd2:	e6 cf       	rjmp	.-52     	; 0x3ca0 <initPortsIO+0x3c>

	DDRL = 0xFF;			// all pins to output
	if(hardwareRevision == HW_REV_3_0) {
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
    3cd4:	81 30       	cpi	r24, 0x01	; 1
    3cd6:	c9 f3       	breq	.-14     	; 0x3cca <initPortsIO+0x66>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    3cd8:	82 30       	cpi	r24, 0x02	; 2
    3cda:	41 f0       	breq	.+16     	; 0x3cec <initPortsIO+0x88>
    3cdc:	08 95       	ret
	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
	if(hardwareRevision == HW_REV_3_0) {
		PORTJ &= 0x00;		// cliff pulse turned off
		//#warning "Normal logic for ground sensors (hw rev 3.0)"
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    3cde:	81 30       	cpi	r24, 0x01	; 1
    3ce0:	11 f0       	breq	.+4      	; 0x3ce6 <initPortsIO+0x82>
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.0.1)"
	}
	if(hardwareRevision == HW_REV_3_1) {
    3ce2:	82 30       	cpi	r24, 0x02	; 2
    3ce4:	59 f7       	brne	.-42     	; 0x3cbc <initPortsIO+0x58>
		PORTJ = 0x0F;
    3ce6:	90 93 05 01 	sts	0x0105, r25
    3cea:	e8 cf       	rjmp	.-48     	; 0x3cbc <initPortsIO+0x58>
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTL = 0xF7;		// pwm (unused) to 0, leds turned off on high state
    3cec:	87 ef       	ldi	r24, 0xF7	; 247
    3cee:	80 93 0b 01 	sts	0x010B, r24
    3cf2:	08 95       	ret
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
    3cf4:	98 e0       	ldi	r25, 0x08	; 8
    3cf6:	94 bb       	out	0x14, r25	; 20
    3cf8:	d3 cf       	rjmp	.-90     	; 0x3ca0 <initPortsIO+0x3c>

00003cfa <i2c_close>:

/* I2C clock in Hz */
#define SCL_CLOCK  440000L

void i2c_close() {
	TWBR = 0x00;
    3cfa:	10 92 b8 00 	sts	0x00B8, r1
	TWCR = 0x00;
    3cfe:	10 92 bc 00 	sts	0x00BC, r1
}
    3d02:	08 95       	ret

00003d04 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
    sbi(PORTD, 0);
    3d04:	58 9a       	sbi	0x0b, 0	; 11
    sbi(PORTD, 1);
    3d06:	59 9a       	sbi	0x0b, 1	; 11

  TWSR = 0;                         /* no prescaler */
    3d08:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    3d0c:	81 e0       	ldi	r24, 0x01	; 1
    3d0e:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
    3d12:	08 95       	ret

00003d14 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    3d14:	94 ea       	ldi	r25, 0xA4	; 164
    3d16:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    3d1a:	90 91 bc 00 	lds	r25, 0x00BC
    3d1e:	97 ff       	sbrs	r25, 7
    3d20:	fc cf       	rjmp	.-8      	; 0x3d1a <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    3d22:	90 91 b9 00 	lds	r25, 0x00B9
    3d26:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    3d28:	98 30       	cpi	r25, 0x08	; 8
    3d2a:	21 f0       	breq	.+8      	; 0x3d34 <i2c_start+0x20>
    3d2c:	90 31       	cpi	r25, 0x10	; 16
    3d2e:	11 f0       	breq	.+4      	; 0x3d34 <i2c_start+0x20>
		//usartTransmit(twst);
		return 1;
    3d30:	81 e0       	ldi	r24, 0x01	; 1
    3d32:	08 95       	ret
	}

	// send device address
	TWDR = address;
    3d34:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    3d38:	84 e8       	ldi	r24, 0x84	; 132
    3d3a:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    3d3e:	80 91 bc 00 	lds	r24, 0x00BC
    3d42:	87 ff       	sbrs	r24, 7
    3d44:	fc cf       	rjmp	.-8      	; 0x3d3e <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    3d46:	90 91 b9 00 	lds	r25, 0x00B9
    3d4a:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    3d4c:	98 31       	cpi	r25, 0x18	; 24
    3d4e:	21 f0       	breq	.+8      	; 0x3d58 <i2c_start+0x44>

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    3d50:	81 e0       	ldi	r24, 0x01	; 1
    3d52:	90 34       	cpi	r25, 0x40	; 64
    3d54:	19 f0       	breq	.+6      	; 0x3d5c <i2c_start+0x48>
		return 1;
	}

	return 0;

}/* i2c_start */
    3d56:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    3d58:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    3d5a:	08 95       	ret

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    3d5c:	80 e0       	ldi	r24, 0x00	; 0
    3d5e:	08 95       	ret

00003d60 <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    3d60:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    3d62:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    3d64:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    3d66:	20 93 bc 00 	sts	0x00BC, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    3d6a:	90 91 bc 00 	lds	r25, 0x00BC
    3d6e:	97 ff       	sbrs	r25, 7
    3d70:	fc cf       	rjmp	.-8      	; 0x3d6a <i2c_start_wait+0xa>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    3d72:	90 91 b9 00 	lds	r25, 0x00B9
    3d76:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    3d78:	98 30       	cpi	r25, 0x08	; 8
    3d7a:	11 f0       	breq	.+4      	; 0x3d80 <i2c_start_wait+0x20>
    3d7c:	90 31       	cpi	r25, 0x10	; 16
    3d7e:	99 f7       	brne	.-26     	; 0x3d66 <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    3d80:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    3d84:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    3d88:	90 91 bc 00 	lds	r25, 0x00BC
    3d8c:	97 ff       	sbrs	r25, 7
    3d8e:	fc cf       	rjmp	.-8      	; 0x3d88 <i2c_start_wait+0x28>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    3d90:	90 91 b9 00 	lds	r25, 0x00B9
    3d94:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    3d96:	90 32       	cpi	r25, 0x20	; 32
    3d98:	19 f0       	breq	.+6      	; 0x3da0 <i2c_start_wait+0x40>
    3d9a:	98 35       	cpi	r25, 0x58	; 88
    3d9c:	09 f0       	breq	.+2      	; 0x3da0 <i2c_start_wait+0x40>
    3d9e:	08 95       	ret
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    3da0:	40 93 bc 00 	sts	0x00BC, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    3da4:	90 91 bc 00 	lds	r25, 0x00BC
    3da8:	94 fd       	sbrc	r25, 4
    3daa:	fc cf       	rjmp	.-8      	; 0x3da4 <i2c_start_wait+0x44>
    3dac:	dc cf       	rjmp	.-72     	; 0x3d66 <i2c_start_wait+0x6>

00003dae <i2c_rep_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    3dae:	94 ea       	ldi	r25, 0xA4	; 164
    3db0:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    3db4:	90 91 bc 00 	lds	r25, 0x00BC
    3db8:	97 ff       	sbrs	r25, 7
    3dba:	fc cf       	rjmp	.-8      	; 0x3db4 <i2c_rep_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    3dbc:	90 91 b9 00 	lds	r25, 0x00B9
    3dc0:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    3dc2:	98 30       	cpi	r25, 0x08	; 8
    3dc4:	21 f0       	breq	.+8      	; 0x3dce <i2c_rep_start+0x20>
    3dc6:	90 31       	cpi	r25, 0x10	; 16
    3dc8:	11 f0       	breq	.+4      	; 0x3dce <i2c_rep_start+0x20>
		//usartTransmit(twst);
		return 1;
    3dca:	81 e0       	ldi	r24, 0x01	; 1
    3dcc:	08 95       	ret
	}

	// send device address
	TWDR = address;
    3dce:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    3dd2:	84 e8       	ldi	r24, 0x84	; 132
    3dd4:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    3dd8:	80 91 bc 00 	lds	r24, 0x00BC
    3ddc:	87 ff       	sbrs	r24, 7
    3dde:	fc cf       	rjmp	.-8      	; 0x3dd8 <i2c_rep_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    3de0:	90 91 b9 00 	lds	r25, 0x00B9
    3de4:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    3de6:	98 31       	cpi	r25, 0x18	; 24
    3de8:	21 f0       	breq	.+8      	; 0x3df2 <i2c_rep_start+0x44>
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    3dea:	81 e0       	ldi	r24, 0x01	; 1
    3dec:	90 34       	cpi	r25, 0x40	; 64
    3dee:	19 f0       	breq	.+6      	; 0x3df6 <i2c_rep_start+0x48>
{
    return i2c_start( address );

}/* i2c_rep_start */
    3df0:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    3df2:	80 e0       	ldi	r24, 0x00	; 0
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    3df4:	08 95       	ret
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    3df6:	80 e0       	ldi	r24, 0x00	; 0
    3df8:	08 95       	ret

00003dfa <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    3dfa:	84 e9       	ldi	r24, 0x94	; 148
    3dfc:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    3e00:	80 91 bc 00 	lds	r24, 0x00BC
    3e04:	84 fd       	sbrc	r24, 4
    3e06:	fc cf       	rjmp	.-8      	; 0x3e00 <i2c_stop+0x6>

}/* i2c_stop */
    3e08:	08 95       	ret

00003e0a <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    3e0a:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    3e0e:	84 e8       	ldi	r24, 0x84	; 132
    3e10:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    3e14:	80 91 bc 00 	lds	r24, 0x00BC
    3e18:	87 ff       	sbrs	r24, 7
    3e1a:	fc cf       	rjmp	.-8      	; 0x3e14 <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    3e1c:	90 91 b9 00 	lds	r25, 0x00B9
    3e20:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    3e22:	81 e0       	ldi	r24, 0x01	; 1
    3e24:	98 32       	cpi	r25, 0x28	; 40
    3e26:	09 f0       	breq	.+2      	; 0x3e2a <i2c_write+0x20>
	return 0;

}/* i2c_write */
    3e28:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
    3e2a:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
    3e2c:	08 95       	ret

00003e2e <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    3e2e:	84 ec       	ldi	r24, 0xC4	; 196
    3e30:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    3e34:	80 91 bc 00 	lds	r24, 0x00BC
    3e38:	87 ff       	sbrs	r24, 7
    3e3a:	fc cf       	rjmp	.-8      	; 0x3e34 <i2c_readAck+0x6>

    return TWDR;
    3e3c:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    3e40:	08 95       	ret

00003e42 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    3e42:	84 e8       	ldi	r24, 0x84	; 132
    3e44:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    3e48:	80 91 bc 00 	lds	r24, 0x00BC
    3e4c:	87 ff       	sbrs	r24, 7
    3e4e:	fc cf       	rjmp	.-8      	; 0x3e48 <i2c_readNak+0x6>
	
    return TWDR;
    3e50:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    3e54:	08 95       	ret

00003e56 <initUsart0>:
	// @38400 baud: 8000000/16/38400-1 = 12 => 8000000/16/13 = 38461 => 100-(38400/38461*100)=0.15% of error
	// Double speed mode:
	// @57600 baud: 8000000/8/57600-1 = 16 => 8000000/8/17 = 58823 => 100-(57600/58823*100)=2.08% of error	


	UBRR0H = 0;												// set baudrate
    3e56:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 16;
    3e5a:	80 e1       	ldi	r24, 0x10	; 16
    3e5c:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0A  |= (1 << U2X0);									// enable double speed
    3e60:	e0 ec       	ldi	r30, 0xC0	; 192
    3e62:	f0 e0       	ldi	r31, 0x00	; 0
    3e64:	80 81       	ld	r24, Z
    3e66:	82 60       	ori	r24, 0x02	; 2
    3e68:	80 83       	st	Z, r24
	//UCSR0A &= ~(1 << U2X0);
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);	// enable uart0 transmitter and receiver; enable rx interrupt for use with aseba
    3e6a:	e1 ec       	ldi	r30, 0xC1	; 193
    3e6c:	f0 e0       	ldi	r31, 0x00	; 0
    3e6e:	80 81       	ld	r24, Z
    3e70:	88 69       	ori	r24, 0x98	; 152
    3e72:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);					// set frame format: 8-bit data, no parity, 1 stop bit
    3e74:	e2 ec       	ldi	r30, 0xC2	; 194
    3e76:	f0 e0       	ldi	r31, 0x00	; 0
    3e78:	80 81       	ld	r24, Z
    3e7a:	86 60       	ori	r24, 0x06	; 6
    3e7c:	80 83       	st	Z, r24



}
    3e7e:	08 95       	ret

00003e80 <initUsart1>:

void initUsart1() {

	UBRR1H = 0;												// set baudrate
    3e80:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = 16;
    3e84:	80 e1       	ldi	r24, 0x10	; 16
    3e86:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1A  |= (1 << U2X1);									// enable double speed
    3e8a:	e8 ec       	ldi	r30, 0xC8	; 200
    3e8c:	f0 e0       	ldi	r31, 0x00	; 0
    3e8e:	80 81       	ld	r24, Z
    3e90:	82 60       	ori	r24, 0x02	; 2
    3e92:	80 83       	st	Z, r24
	//UCSR0A &= ~(1 << U2X1);
	UCSR1B |= (1 << TXEN1) | (1 << RXEN1);					// enable uart0 transmitter and receiver
    3e94:	e9 ec       	ldi	r30, 0xC9	; 201
    3e96:	f0 e0       	ldi	r31, 0x00	; 0
    3e98:	80 81       	ld	r24, Z
    3e9a:	88 61       	ori	r24, 0x18	; 24
    3e9c:	80 83       	st	Z, r24
	UCSR1C |= (1<<UCSZ11) | (1<<UCSZ10);					// set frame format: 8-bit data, no parity, 1 stop bit
    3e9e:	ea ec       	ldi	r30, 0xCA	; 202
    3ea0:	f0 e0       	ldi	r31, 0x00	; 0
    3ea2:	80 81       	ld	r24, Z
    3ea4:	86 60       	ori	r24, 0x06	; 6
    3ea6:	80 83       	st	Z, r24

}
    3ea8:	08 95       	ret

00003eaa <closeUsart>:

void closeUsart() {

	UCSR0A = 0x00;	// clear all usart registers
    3eaa:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0x00;
    3eae:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 0x00;
    3eb2:	10 92 c2 00 	sts	0x00C2, r1

}
    3eb6:	08 95       	ret

00003eb8 <usart0Transmit>:

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    3eb8:	90 91 c0 00 	lds	r25, 0x00C0
    3ebc:	95 ff       	sbrs	r25, 5
    3ebe:	fc cf       	rjmp	.-8      	; 0x3eb8 <usart0Transmit>
	UDR0 = data;						// put data into buffer, sends the data
    3ec0:	80 93 c6 00 	sts	0x00C6, r24
	if(isBlocking) {
    3ec4:	66 23       	and	r22, r22
    3ec6:	21 f0       	breq	.+8      	; 0x3ed0 <usart0Transmit+0x18>
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    3ec8:	80 91 c0 00 	lds	r24, 0x00C0
    3ecc:	86 ff       	sbrs	r24, 6
    3ece:	fc cf       	rjmp	.-8      	; 0x3ec8 <usart0Transmit+0x10>
    3ed0:	08 95       	ret

00003ed2 <usart1Transmit>:
	}
}

void usart1Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR1A & (1<<UDRE1)));		// wait for empty transmit buffer
    3ed2:	90 91 c8 00 	lds	r25, 0x00C8
    3ed6:	95 ff       	sbrs	r25, 5
    3ed8:	fc cf       	rjmp	.-8      	; 0x3ed2 <usart1Transmit>
	UDR1 = data;						// put data into buffer, sends the data
    3eda:	80 93 ce 00 	sts	0x00CE, r24
	if(isBlocking) {
    3ede:	66 23       	and	r22, r22
    3ee0:	21 f0       	breq	.+8      	; 0x3eea <usart1Transmit+0x18>
		while (!(UCSR1A & (1<<TXC1)));	// wait transmission complete
    3ee2:	80 91 c8 00 	lds	r24, 0x00C8
    3ee6:	86 ff       	sbrs	r24, 6
    3ee8:	fc cf       	rjmp	.-8      	; 0x3ee2 <usart1Transmit+0x10>
    3eea:	08 95       	ret

00003eec <usart0InputBufferEmpty>:

}

char usart0InputBufferEmpty() {

	if(UCSR0A & (1<<RXC0)) {	// something received
    3eec:	80 91 c0 00 	lds	r24, 0x00C0
		return 0;
    3ef0:	80 95       	com	r24
	} else {
		return 1;
	}

}
    3ef2:	88 1f       	adc	r24, r24
    3ef4:	88 27       	eor	r24, r24
    3ef6:	88 1f       	adc	r24, r24
    3ef8:	08 95       	ret

00003efa <usart0Receive>:

unsigned char usart0Receive() {

	unsigned int i=0;

	while(usart0InputBufferEmpty()) {
    3efa:	87 e9       	ldi	r24, 0x97	; 151
    3efc:	90 e0       	ldi	r25, 0x00	; 0

}

char usart0InputBufferEmpty() {

	if(UCSR0A & (1<<RXC0)) {	// something received
    3efe:	20 91 c0 00 	lds	r18, 0x00C0
    3f02:	27 fd       	sbrc	r18, 7
    3f04:	07 c0       	rjmp	.+14     	; 0x3f14 <usart0Receive+0x1a>
			commError = 1;
			return 0;				// timeout
		}
	}								// wait for data to be received

	return UDR0;					// get and return received data from buffer
    3f06:	01 97       	sbiw	r24, 0x01	; 1

	unsigned int i=0;

	while(usart0InputBufferEmpty()) {
		i++;
		if(i>150) {
    3f08:	d1 f7       	brne	.-12     	; 0x3efe <usart0Receive+0x4>
			/*
			if(UCSR0A & (1<<3)) {	// overflow flag
			}
			*/
			commError = 1;
    3f0a:	81 e0       	ldi	r24, 0x01	; 1
    3f0c:	80 93 2e 03 	sts	0x032E, r24
			return 0;				// timeout
    3f10:	80 e0       	ldi	r24, 0x00	; 0
    3f12:	08 95       	ret
		}
	}								// wait for data to be received

	return UDR0;					// get and return received data from buffer
    3f14:	80 91 c6 00 	lds	r24, 0x00C6

}
    3f18:	08 95       	ret

00003f1a <__vector_25>:
		}
	}
}
*/

ISR(USART0_RX_vect) {
    3f1a:	1f 92       	push	r1
    3f1c:	0f 92       	push	r0
    3f1e:	0f b6       	in	r0, 0x3f	; 63
    3f20:	0f 92       	push	r0
    3f22:	0b b6       	in	r0, 0x3b	; 59
    3f24:	0f 92       	push	r0
    3f26:	11 24       	eor	r1, r1
    3f28:	2f 93       	push	r18
    3f2a:	3f 93       	push	r19
    3f2c:	4f 93       	push	r20
    3f2e:	5f 93       	push	r21
    3f30:	6f 93       	push	r22
    3f32:	7f 93       	push	r23
    3f34:	8f 93       	push	r24
    3f36:	9f 93       	push	r25
    3f38:	af 93       	push	r26
    3f3a:	bf 93       	push	r27
    3f3c:	ef 93       	push	r30
    3f3e:	ff 93       	push	r31

	char receivedByte = UDR0;
    3f40:	90 91 c6 00 	lds	r25, 0x00C6


	if(currentSelector==14) {
    3f44:	80 91 5c 04 	lds	r24, 0x045C
    3f48:	8e 30       	cpi	r24, 0x0E	; 14
    3f4a:	09 f4       	brne	.+2      	; 0x3f4e <__vector_25+0x34>
    3f4c:	3f c0       	rjmp	.+126    	; 0x3fcc <__vector_25+0xb2>
		if(receivedByte == 0xAA) {
			irCommSendValues = 1;
		}
	} else if(currentSelector==15) {
    3f4e:	8f 30       	cpi	r24, 0x0F	; 15
    3f50:	09 f4       	brne	.+2      	; 0x3f54 <__vector_25+0x3a>
    3f52:	42 c0       	rjmp	.+132    	; 0x3fd8 <__vector_25+0xbe>
			eeprom_write_byte((uint8_t*) 4093, currentOsccal); 
		}

	} else {

		if(chooseMenu) {
    3f54:	80 91 11 02 	lds	r24, 0x0211
    3f58:	88 23       	and	r24, r24
    3f5a:	09 f5       	brne	.+66     	; 0x3f9e <__vector_25+0x84>
			chooseMenu = 0;
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
    3f5c:	80 91 33 04 	lds	r24, 0x0433
    3f60:	81 30       	cpi	r24, 0x01	; 1
    3f62:	09 f4       	brne	.+2      	; 0x3f66 <__vector_25+0x4c>
    3f64:	65 c0       	rjmp	.+202    	; 0x4030 <__vector_25+0x116>
    3f66:	82 30       	cpi	r24, 0x02	; 2
    3f68:	f1 f4       	brne	.+60     	; 0x3fa6 <__vector_25+0x8c>
						menuChoice = 0;
					}
					break;

				case 2:	// address writing in eeprom
					if(menuState == 0) { // receive rf address LSB:
    3f6a:	40 91 35 04 	lds	r20, 0x0435
    3f6e:	44 23       	and	r20, r20
    3f70:	09 f4       	brne	.+2      	; 0x3f74 <__vector_25+0x5a>
    3f72:	74 c0       	rjmp	.+232    	; 0x405c <__vector_25+0x142>
						rfAddress = (unsigned int)receivedByte&0x00FF;
						menuState = 1;
					} else if(menuState == 1) { // receive rf address MSB
    3f74:	41 30       	cpi	r20, 0x01	; 1
    3f76:	b9 f4       	brne	.+46     	; 0x3fa6 <__vector_25+0x8c>
						rfAddress |= ((unsigned int)receivedByte<<8);
    3f78:	39 2f       	mov	r19, r25
    3f7a:	20 e0       	ldi	r18, 0x00	; 0
    3f7c:	80 91 25 03 	lds	r24, 0x0325
    3f80:	90 91 26 03 	lds	r25, 0x0326
    3f84:	82 2b       	or	r24, r18
    3f86:	93 2b       	or	r25, r19
    3f88:	90 93 26 03 	sts	0x0326, r25
    3f8c:	80 93 25 03 	sts	0x0325, r24
						addressReceived = 1;
    3f90:	40 93 34 04 	sts	0x0434, r20
						menuState = 0;
    3f94:	10 92 35 04 	sts	0x0435, r1
						chooseMenu = 1;
    3f98:	40 93 11 02 	sts	0x0211, r20
    3f9c:	04 c0       	rjmp	.+8      	; 0x3fa6 <__vector_25+0x8c>
		}

	} else {

		if(chooseMenu) {
			chooseMenu = 0;
    3f9e:	10 92 11 02 	sts	0x0211, r1
			menuChoice = receivedByte;
    3fa2:	90 93 33 04 	sts	0x0433, r25
			}
		}

	}

}
    3fa6:	ff 91       	pop	r31
    3fa8:	ef 91       	pop	r30
    3faa:	bf 91       	pop	r27
    3fac:	af 91       	pop	r26
    3fae:	9f 91       	pop	r25
    3fb0:	8f 91       	pop	r24
    3fb2:	7f 91       	pop	r23
    3fb4:	6f 91       	pop	r22
    3fb6:	5f 91       	pop	r21
    3fb8:	4f 91       	pop	r20
    3fba:	3f 91       	pop	r19
    3fbc:	2f 91       	pop	r18
    3fbe:	0f 90       	pop	r0
    3fc0:	0b be       	out	0x3b, r0	; 59
    3fc2:	0f 90       	pop	r0
    3fc4:	0f be       	out	0x3f, r0	; 63
    3fc6:	0f 90       	pop	r0
    3fc8:	1f 90       	pop	r1
    3fca:	18 95       	reti

	char receivedByte = UDR0;


	if(currentSelector==14) {
		if(receivedByte == 0xAA) {
    3fcc:	9a 3a       	cpi	r25, 0xAA	; 170
    3fce:	59 f7       	brne	.-42     	; 0x3fa6 <__vector_25+0x8c>
			irCommSendValues = 1;
    3fd0:	81 e0       	ldi	r24, 0x01	; 1
    3fd2:	80 93 da 04 	sts	0x04DA, r24
    3fd6:	e7 cf       	rjmp	.-50     	; 0x3fa6 <__vector_25+0x8c>
		}
	} else if(currentSelector==15) {

		if(receivedByte == '+') {
    3fd8:	9b 32       	cpi	r25, 0x2B	; 43
    3fda:	01 f1       	breq	.+64     	; 0x401c <__vector_25+0x102>
				currentOsccal++;
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
    3fdc:	9d 32       	cpi	r25, 0x2D	; 45
    3fde:	91 f1       	breq	.+100    	; 0x4044 <__vector_25+0x12a>
				currentOsccal--;	
			}
			OSCCAL = currentOsccal;;
		}

		if(receivedByte == 'g') {
    3fe0:	97 36       	cpi	r25, 0x67	; 103
    3fe2:	09 f0       	breq	.+2      	; 0x3fe6 <__vector_25+0xcc>
    3fe4:	43 c0       	rjmp	.+134    	; 0x406c <__vector_25+0x152>
			usart0Transmit(irCommand,1);
    3fe6:	90 91 37 04 	lds	r25, 0x0437

}

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    3fea:	80 91 c0 00 	lds	r24, 0x00C0
    3fee:	85 ff       	sbrs	r24, 5
    3ff0:	fc cf       	rjmp	.-8      	; 0x3fea <__vector_25+0xd0>
	UDR0 = data;						// put data into buffer, sends the data
    3ff2:	90 93 c6 00 	sts	0x00C6, r25
	if(isBlocking) {
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    3ff6:	80 91 c0 00 	lds	r24, 0x00C0
    3ffa:	86 ff       	sbrs	r24, 6
    3ffc:	fc cf       	rjmp	.-8      	; 0x3ff6 <__vector_25+0xdc>
			OSCCAL = currentOsccal;;
		}

		if(receivedByte == 'g') {
			usart0Transmit(irCommand,1);
			currentOsccal = OSCCAL;
    3ffe:	90 91 66 00 	lds	r25, 0x0066
    4002:	90 93 49 05 	sts	0x0549, r25

}

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    4006:	80 91 c0 00 	lds	r24, 0x00C0
    400a:	85 ff       	sbrs	r24, 5
    400c:	fc cf       	rjmp	.-8      	; 0x4006 <__vector_25+0xec>
	UDR0 = data;						// put data into buffer, sends the data
    400e:	90 93 c6 00 	sts	0x00C6, r25
	if(isBlocking) {
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    4012:	80 91 c0 00 	lds	r24, 0x00C0
    4016:	86 ff       	sbrs	r24, 6
    4018:	fc cf       	rjmp	.-8      	; 0x4012 <__vector_25+0xf8>
    401a:	c5 cf       	rjmp	.-118    	; 0x3fa6 <__vector_25+0x8c>
			irCommSendValues = 1;
		}
	} else if(currentSelector==15) {

		if(receivedByte == '+') {
			if(currentOsccal<255) {
    401c:	80 91 49 05 	lds	r24, 0x0549
    4020:	8f 3f       	cpi	r24, 0xFF	; 255
    4022:	d1 f0       	breq	.+52     	; 0x4058 <__vector_25+0x13e>
				currentOsccal++;
    4024:	8f 5f       	subi	r24, 0xFF	; 255
    4026:	80 93 49 05 	sts	0x0549, r24

		if(receivedByte == '-') {
			if(currentOsccal>0) {
				currentOsccal--;	
			}
			OSCCAL = currentOsccal;;
    402a:	80 93 66 00 	sts	0x0066, r24
    402e:	bb cf       	rjmp	.-138    	; 0x3fa6 <__vector_25+0x8c>
			chooseMenu = 0;
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
				case 1: // send sensors data and activate actuators
					if(receivedByte == 0xAA) {
    4030:	9a 3a       	cpi	r25, 0xAA	; 170
    4032:	31 f1       	breq	.+76     	; 0x4080 <__vector_25+0x166>
						getDataNow = 1;
					} else if(receivedByte == 0x55) {
    4034:	95 35       	cpi	r25, 0x55	; 85
    4036:	09 f0       	breq	.+2      	; 0x403a <__vector_25+0x120>
    4038:	b6 cf       	rjmp	.-148    	; 0x3fa6 <__vector_25+0x8c>
						chooseMenu = 1;
    403a:	80 93 11 02 	sts	0x0211, r24
						menuChoice = 0;
    403e:	10 92 33 04 	sts	0x0433, r1
    4042:	b1 cf       	rjmp	.-158    	; 0x3fa6 <__vector_25+0x8c>
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
			if(currentOsccal>0) {
    4044:	80 91 49 05 	lds	r24, 0x0549
    4048:	88 23       	and	r24, r24
    404a:	21 f0       	breq	.+8      	; 0x4054 <__vector_25+0x13a>
				currentOsccal--;	
    404c:	81 50       	subi	r24, 0x01	; 1
    404e:	80 93 49 05 	sts	0x0549, r24
    4052:	eb cf       	rjmp	.-42     	; 0x402a <__vector_25+0x110>
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
			if(currentOsccal>0) {
    4054:	80 e0       	ldi	r24, 0x00	; 0
    4056:	e9 cf       	rjmp	.-46     	; 0x402a <__vector_25+0x110>
			irCommSendValues = 1;
		}
	} else if(currentSelector==15) {

		if(receivedByte == '+') {
			if(currentOsccal<255) {
    4058:	8f ef       	ldi	r24, 0xFF	; 255
    405a:	e7 cf       	rjmp	.-50     	; 0x402a <__vector_25+0x110>
					}
					break;

				case 2:	// address writing in eeprom
					if(menuState == 0) { // receive rf address LSB:
						rfAddress = (unsigned int)receivedByte&0x00FF;
    405c:	90 93 25 03 	sts	0x0325, r25
    4060:	10 92 26 03 	sts	0x0326, r1
						menuState = 1;
    4064:	81 e0       	ldi	r24, 0x01	; 1
    4066:	80 93 35 04 	sts	0x0435, r24
    406a:	9d cf       	rjmp	.-198    	; 0x3fa6 <__vector_25+0x8c>
			usart0Transmit(irCommand,1);
			currentOsccal = OSCCAL;
			usart0Transmit(currentOsccal,1);
		}

		if(receivedByte == 's') {
    406c:	93 37       	cpi	r25, 0x73	; 115
    406e:	09 f0       	breq	.+2      	; 0x4072 <__vector_25+0x158>
    4070:	9a cf       	rjmp	.-204    	; 0x3fa6 <__vector_25+0x8c>
			eeprom_write_byte((uint8_t*) 4093, currentOsccal); 
    4072:	8d ef       	ldi	r24, 0xFD	; 253
    4074:	9f e0       	ldi	r25, 0x0F	; 15
    4076:	60 91 49 05 	lds	r22, 0x0549
    407a:	0e 94 b9 54 	call	0xa972	; 0xa972 <__eewr_byte_m2560>
    407e:	93 cf       	rjmp	.-218    	; 0x3fa6 <__vector_25+0x8c>
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
				case 1: // send sensors data and activate actuators
					if(receivedByte == 0xAA) {
						getDataNow = 1;
    4080:	80 93 36 04 	sts	0x0436, r24
    4084:	90 cf       	rjmp	.-224    	; 0x3fa6 <__vector_25+0x8c>

00004086 <getSelector>:

#include "utility.h"

unsigned char getSelector() {
   return (SEL0) + 2*(SEL1) + 4*(SEL2) + 8*(SEL3);
    4086:	86 b1       	in	r24, 0x06	; 6
    4088:	66 b1       	in	r22, 0x06	; 6
    408a:	26 b1       	in	r18, 0x06	; 6
    408c:	46 b1       	in	r20, 0x06	; 6
    408e:	30 e0       	ldi	r19, 0x00	; 0
    4090:	28 70       	andi	r18, 0x08	; 8
    4092:	30 70       	andi	r19, 0x00	; 0
    4094:	35 95       	asr	r19
    4096:	27 95       	ror	r18
    4098:	35 95       	asr	r19
    409a:	27 95       	ror	r18
    409c:	35 95       	asr	r19
    409e:	27 95       	ror	r18
    40a0:	22 0f       	add	r18, r18
    40a2:	33 1f       	adc	r19, r19
    40a4:	70 e0       	ldi	r23, 0x00	; 0
    40a6:	64 70       	andi	r22, 0x04	; 4
    40a8:	70 70       	andi	r23, 0x00	; 0
    40aa:	75 95       	asr	r23
    40ac:	67 95       	ror	r22
    40ae:	75 95       	asr	r23
    40b0:	67 95       	ror	r22
    40b2:	26 0f       	add	r18, r22
    40b4:	37 1f       	adc	r19, r23
    40b6:	22 0f       	add	r18, r18
    40b8:	33 1f       	adc	r19, r19
    40ba:	50 e0       	ldi	r21, 0x00	; 0
    40bc:	42 70       	andi	r20, 0x02	; 2
    40be:	50 70       	andi	r21, 0x00	; 0
    40c0:	55 95       	asr	r21
    40c2:	47 95       	ror	r20
    40c4:	24 0f       	add	r18, r20
    40c6:	35 1f       	adc	r19, r21
    40c8:	22 0f       	add	r18, r18
    40ca:	81 70       	andi	r24, 0x01	; 1
}
    40cc:	82 0f       	add	r24, r18
    40ce:	08 95       	ret

000040d0 <initPeripherals>:
    

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
    40d0:	f8 94       	cli
	
	// reset all registers touched by arduino in the "init()" functions (wiring.c) not used by the robot
	TCCR0A = 0;
    40d2:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
    40d4:	15 bc       	out	0x25, r1	; 37
	TIMSK0 = 0;
    40d6:	10 92 6e 00 	sts	0x006E, r1
	TCCR5A = 0;
    40da:	10 92 20 01 	sts	0x0120, r1
	TCCR5B = 0;
    40de:	10 92 21 01 	sts	0x0121, r1

	rfAddress = eeprom_read_word((uint16_t*)4094);
    40e2:	8e ef       	ldi	r24, 0xFE	; 254
    40e4:	9f e0       	ldi	r25, 0x0F	; 15
    40e6:	0e 94 8b 54 	call	0xa916	; 0xa916 <__eerd_word_m2560>
    40ea:	90 93 26 03 	sts	0x0326, r25
    40ee:	80 93 25 03 	sts	0x0325, r24
	currentOsccal = eeprom_read_byte((uint8_t*)4093);
    40f2:	8d ef       	ldi	r24, 0xFD	; 253
    40f4:	9f e0       	ldi	r25, 0x0F	; 15
    40f6:	0e 94 83 54 	call	0xa906	; 0xa906 <__eerd_byte_m2560>
    40fa:	80 93 49 05 	sts	0x0549, r24
	if(currentOsccal!=0 && currentOsccal!=255) { // clear memory
    40fe:	98 2f       	mov	r25, r24
    4100:	91 50       	subi	r25, 0x01	; 1
    4102:	9e 3f       	cpi	r25, 0xFE	; 254
    4104:	e8 f5       	brcc	.+122    	; 0x4180 <initPeripherals+0xb0>
		OSCCAL = currentOsccal;
    4106:	80 93 66 00 	sts	0x0066, r24
		currentOsccal = OSCCAL;
		eeprom_write_byte((uint8_t*) 4093, currentOsccal);
	}
	
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
    410a:	80 91 25 03 	lds	r24, 0x0325
    410e:	90 91 26 03 	lds	r25, 0x0326
    4112:	9c 01       	movw	r18, r24
    4114:	21 58       	subi	r18, 0x81	; 129
    4116:	3c 40       	sbci	r19, 0x0C	; 12
    4118:	23 30       	cpi	r18, 0x03	; 3
    411a:	31 05       	cpc	r19, r1
    411c:	08 f5       	brcc	.+66     	; 0x4160 <initPeripherals+0x90>
		hardwareRevision = HW_REV_3_0;
    411e:	10 92 5f 04 	sts	0x045F, r1

	if(rfAddress > 3203) {
		hardwareRevision = HW_REV_3_1;
	}

	initCalibration();
    4122:	0e 94 94 39 	call	0x7328	; 0x7328 <initCalibration>
	initPortsIO();
    4126:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <initPortsIO>
	initAdc();
    412a:	0e 94 88 21 	call	0x4310	; 0x4310 <initAdc>
	initMotors();
    412e:	0e 94 b0 27 	call	0x4f60	; 0x4f60 <initMotors>
	initRGBleds();
    4132:	0e 94 6f 3d 	call	0x7ade	; 0x7ade <initRGBleds>
	initSPI();
    4136:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <initSPI>
	mirf_init();
    413a:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <mirf_init>
	if(spiCommError==0) {
    413e:	80 91 28 03 	lds	r24, 0x0328
    4142:	88 23       	and	r24, r24
    4144:	29 f4       	brne	.+10     	; 0x4150 <initPeripherals+0x80>
		rfFlags |= 1;
    4146:	80 91 27 03 	lds	r24, 0x0327
    414a:	81 60       	ori	r24, 0x01	; 1
    414c:	80 93 27 03 	sts	0x0327, r24
	}
	initUsart0();
    4150:	0e 94 2b 1f 	call	0x3e56	; 0x3e56 <initUsart0>
	initAccelerometer();
    4154:	0e 94 b7 3e 	call	0x7d6e	; 0x7d6e <initAccelerometer>
	init_ir_remote_control();
    4158:	0e 94 c2 14 	call	0x2984	; 0x2984 <init_ir_remote_control>

	sei();			// enable global interrupts
    415c:	78 94       	sei

	
}
    415e:	08 95       	ret
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
		hardwareRevision = HW_REV_3_0;
	}

	if(rfAddress == 3200) {
    4160:	2c e0       	ldi	r18, 0x0C	; 12
    4162:	80 38       	cpi	r24, 0x80	; 128
    4164:	92 07       	cpc	r25, r18
    4166:	21 f4       	brne	.+8      	; 0x4170 <initPeripherals+0xa0>
		hardwareRevision = HW_REV_3_0_1;
    4168:	81 e0       	ldi	r24, 0x01	; 1
    416a:	80 93 5f 04 	sts	0x045F, r24
    416e:	d9 cf       	rjmp	.-78     	; 0x4122 <initPeripherals+0x52>
	}

	if(rfAddress > 3203) {
    4170:	2c e0       	ldi	r18, 0x0C	; 12
    4172:	84 38       	cpi	r24, 0x84	; 132
    4174:	92 07       	cpc	r25, r18
    4176:	a8 f2       	brcs	.-86     	; 0x4122 <initPeripherals+0x52>
		hardwareRevision = HW_REV_3_1;
    4178:	82 e0       	ldi	r24, 0x02	; 2
    417a:	80 93 5f 04 	sts	0x045F, r24
    417e:	d1 cf       	rjmp	.-94     	; 0x4122 <initPeripherals+0x52>
	rfAddress = eeprom_read_word((uint16_t*)4094);
	currentOsccal = eeprom_read_byte((uint8_t*)4093);
	if(currentOsccal!=0 && currentOsccal!=255) { // clear memory
		OSCCAL = currentOsccal;
	} else {
		currentOsccal = OSCCAL;
    4180:	60 91 66 00 	lds	r22, 0x0066
    4184:	60 93 49 05 	sts	0x0549, r22
		eeprom_write_byte((uint8_t*) 4093, currentOsccal);
    4188:	8d ef       	ldi	r24, 0xFD	; 253
    418a:	9f e0       	ldi	r25, 0x0F	; 15
    418c:	0e 94 b9 54 	call	0xa972	; 0xa972 <__eewr_byte_m2560>
    4190:	bc cf       	rjmp	.-136    	; 0x410a <initPeripherals+0x3a>

00004192 <__vector_15>:

	
}

// used only for wake-up from sleep
ISR(TIMER2_OVF_vect) {
    4192:	1f 92       	push	r1
    4194:	0f 92       	push	r0
    4196:	0f b6       	in	r0, 0x3f	; 63
    4198:	0f 92       	push	r0
    419a:	11 24       	eor	r1, r1

}
    419c:	0f 90       	pop	r0
    419e:	0f be       	out	0x3f, r0	; 63
    41a0:	0f 90       	pop	r0
    41a2:	1f 90       	pop	r1
    41a4:	18 95       	reti

000041a6 <sleep>:

void sleep(unsigned char seconds) {
    41a6:	cf 93       	push	r28
    41a8:	df 93       	push	r29

	unsigned int pause = seconds*30;	// the timer2 used to wake-up from sleep is configured to run at 30 Hz
    41aa:	9e e1       	ldi	r25, 0x1E	; 30
    41ac:	89 9f       	mul	r24, r25
    41ae:	e0 01       	movw	r28, r0
    41b0:	11 24       	eor	r1, r1

	// disable external interrupt because it uses the timer2 to interpret the tv
	// remote signal and the timer2 must be free in order to be used for wake-up from sleep
	PCICR &= ~(1 << PCIE1);			// disable interrupt from falling edge
    41b2:	80 91 68 00 	lds	r24, 0x0068
    41b6:	8d 7f       	andi	r24, 0xFD	; 253
    41b8:	80 93 68 00 	sts	0x0068, r24
	PCMSK1 &= ~(1 << PCINT15);		
    41bc:	80 91 6c 00 	lds	r24, 0x006C
    41c0:	8f 77       	andi	r24, 0x7F	; 127
    41c2:	80 93 6c 00 	sts	0x006C, r24
	PCIFR |= (1 << PCIF1);			// clear interrupt flag
    41c6:	d9 9a       	sbi	0x1b, 1	; 27

	// disable adc
	ADCSRA = 0x00;					// disable interrupt and turn off adc
    41c8:	10 92 7a 00 	sts	0x007A, r1
	ADCSRA |= (1 << ADIF);			// clear interrupt flag
    41cc:	80 91 7a 00 	lds	r24, 0x007A
    41d0:	80 61       	ori	r24, 0x10	; 16
    41d2:	80 93 7a 00 	sts	0x007A, r24

	// disable motors pwm
	TCCR3A = 0x00;	// turn off timer
    41d6:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0x00;
    41da:	10 92 91 00 	sts	0x0091, r1
	TIMSK3 = 0x00;	// disable interrupt
    41de:	10 92 71 00 	sts	0x0071, r1
	TIFR3 |= (1 << OCF3A) | (1 << OCF3B) | (1 << TOV3);	// clear output compares and timer overflow interrupt flags
    41e2:	88 b3       	in	r24, 0x18	; 24
    41e4:	87 60       	ori	r24, 0x07	; 7
    41e6:	88 bb       	out	0x18, r24	; 24
	TCCR4A = 0x00;
    41e8:	10 92 a0 00 	sts	0x00A0, r1
	TCCR4B = 0x00;
    41ec:	10 92 a1 00 	sts	0x00A1, r1
	TIMSK4 = 0x00;
    41f0:	10 92 72 00 	sts	0x0072, r1
	TIFR4 |= (1 << OCF4A) | (1 << OCF4B) | (1 << TOV4);	// clear output compares and timer overflow interrupt flags
    41f4:	89 b3       	in	r24, 0x19	; 25
    41f6:	87 60       	ori	r24, 0x07	; 7
    41f8:	89 bb       	out	0x19, r24	; 25

	// disable leds pwm
	TCCR1A = 0x00;	// turn off timer
    41fa:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x00;
    41fe:	10 92 81 00 	sts	0x0081, r1

	// close communication channels
	closeUsart();
    4202:	0e 94 55 1f 	call	0x3eaa	; 0x3eaa <closeUsart>
	closeSPI();
    4206:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <closeSPI>
	i2c_close();
    420a:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <i2c_close>

	// set port pins
	initPortsIO();
    420e:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <initPortsIO>
	//PORTB &= ~(1 << 4);	// radio CE pin
	//DDRD = 0xFF;
	//PORTD = 0x00;	// I2C and uart pins to 0

	// set extendend standby mode and enable it
	SMCR |= (1 << SM2) | (1 << SM1) | (1 << SM0) | (1 << SE);	// extended standby
    4212:	83 b7       	in	r24, 0x33	; 51
    4214:	8f 60       	ori	r24, 0x0F	; 15
    4216:	83 bf       	out	0x33, r24	; 51

	// set timer2 for wake-up: 
	// source clock = 8 MHz
	// prescaler = 1/1024 => 7812.5 Hz
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
    4218:	81 e0       	ldi	r24, 0x01	; 1
    421a:	80 93 70 00 	sts	0x0070, r24
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
    421e:	80 91 b0 00 	lds	r24, 0x00B0
    4222:	8d 7f       	andi	r24, 0xFD	; 253
    4224:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler
    4228:	80 91 b1 00 	lds	r24, 0x00B1
    422c:	87 60       	ori	r24, 0x07	; 7
    422e:	80 93 b1 00 	sts	0x00B1, r24

	while(pause > 0) {	
    4232:	20 97       	sbiw	r28, 0x00	; 0
    4234:	19 f0       	breq	.+6      	; 0x423c <sleep+0x96>
		// enter extended standby mode
		//sleep_cpu();
		__asm__("sleep");
    4236:	88 95       	sleep
		pause--;
    4238:	21 97       	sbiw	r28, 0x01	; 1
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler

	while(pause > 0) {	
    423a:	e9 f7       	brne	.-6      	; 0x4236 <sleep+0x90>
//		PORTB ^= (1 << 6);
	}

	// disable power mode
	//SMCR &= ~(1 << SE);
	SMCR = 0x00;
    423c:	13 be       	out	0x33, r1	; 51

	// disable timer2 and its timer overflow interrupt
	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);	// disable timer2
    423e:	80 91 b1 00 	lds	r24, 0x00B1
    4242:	88 7f       	andi	r24, 0xF8	; 248
    4244:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;					// disable all interrupt for timer2
    4248:	10 92 70 00 	sts	0x0070, r1
	TCCR2A |= (1 << WGM21); 	// mode 2 => CTC mode
    424c:	80 91 b0 00 	lds	r24, 0x00B0
    4250:	82 60       	ori	r24, 0x02	; 2
    4252:	80 93 b0 00 	sts	0x00B0, r24

	pwm_red = 255;
    4256:	8f ef       	ldi	r24, 0xFF	; 255
    4258:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    425c:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    4260:	80 93 0e 02 	sts	0x020E, r24
	pwm_right = 0;
    4264:	10 92 06 03 	sts	0x0306, r1
    4268:	10 92 05 03 	sts	0x0305, r1
	pwm_left = 0;
    426c:	10 92 08 03 	sts	0x0308, r1
    4270:	10 92 07 03 	sts	0x0307, r1
	initPeripherals();
    4274:	0e 94 68 20 	call	0x40d0	; 0x40d0 <initPeripherals>

}
    4278:	df 91       	pop	r29
    427a:	cf 91       	pop	r28
    427c:	08 95       	ret

0000427e <getTime100MicroSec>:

unsigned long int getTime100MicroSec() {
    427e:	60 91 58 04 	lds	r22, 0x0458
    4282:	70 91 59 04 	lds	r23, 0x0459
	return clockTick;
}
    4286:	80 91 5a 04 	lds	r24, 0x045A
    428a:	90 91 5b 04 	lds	r25, 0x045B
    428e:	08 95       	ret

00004290 <readBatteryLevel>:

void readBatteryLevel() {
	measBattery = 1;
    4290:	81 e0       	ldi	r24, 0x01	; 1
    4292:	80 93 cf 02 	sts	0x02CF, r24
}
    4296:	08 95       	ret

00004298 <resetOdometry>:

void resetOdometry() {
	leftMotSteps = 0;
    4298:	80 e0       	ldi	r24, 0x00	; 0
    429a:	90 e0       	ldi	r25, 0x00	; 0
    429c:	dc 01       	movw	r26, r24
    429e:	80 93 e5 02 	sts	0x02E5, r24
    42a2:	90 93 e6 02 	sts	0x02E6, r25
    42a6:	a0 93 e7 02 	sts	0x02E7, r26
    42aa:	b0 93 e8 02 	sts	0x02E8, r27
	rightMotSteps = 0;
    42ae:	80 93 e1 02 	sts	0x02E1, r24
    42b2:	90 93 e2 02 	sts	0x02E2, r25
    42b6:	a0 93 e3 02 	sts	0x02E3, r26
    42ba:	b0 93 e4 02 	sts	0x02E4, r27
	theta = 0;
    42be:	80 93 7f 04 	sts	0x047F, r24
    42c2:	90 93 80 04 	sts	0x0480, r25
    42c6:	a0 93 81 04 	sts	0x0481, r26
    42ca:	b0 93 82 04 	sts	0x0482, r27
	xPos = 0;
    42ce:	80 93 87 04 	sts	0x0487, r24
    42d2:	90 93 88 04 	sts	0x0488, r25
    42d6:	a0 93 89 04 	sts	0x0489, r26
    42da:	b0 93 8a 04 	sts	0x048A, r27
	yPos = 0;
    42de:	80 93 8b 04 	sts	0x048B, r24
    42e2:	90 93 8c 04 	sts	0x048C, r25
    42e6:	a0 93 8d 04 	sts	0x048D, r26
    42ea:	b0 93 8e 04 	sts	0x048E, r27
	rightDist = 0;
    42ee:	80 93 a7 04 	sts	0x04A7, r24
    42f2:	90 93 a8 04 	sts	0x04A8, r25
    42f6:	a0 93 a9 04 	sts	0x04A9, r26
    42fa:	b0 93 aa 04 	sts	0x04AA, r27
	leftDist = 0;
    42fe:	80 93 a3 04 	sts	0x04A3, r24
    4302:	90 93 a4 04 	sts	0x04A4, r25
    4306:	a0 93 a5 04 	sts	0x04A5, r26
    430a:	b0 93 a6 04 	sts	0x04A6, r27
}
    430e:	08 95       	ret

00004310 <initAdc>:

#include "adc.h"


void initAdc(void) {
    4310:	cf 93       	push	r28
    4312:	df 93       	push	r29
	// ADMUX  -----> REFS1	REFS0	 ADLAR	MUX4	MUX3 	 MUX2	MUX1	MUX0
	// default		 0		0		 0		0		0		 0		0		0
	// ADCSRB -----> -		ACME	 - 		- 		MUX5 	 ADTS2 	ADTS1 	ADTS0
	// default		 0		0		 0		0		0		 0		0		0

	ADCSRA = 0;
    4314:	ea e7       	ldi	r30, 0x7A	; 122
    4316:	f0 e0       	ldi	r31, 0x00	; 0
    4318:	10 82       	st	Z, r1
	ADCSRB = 0;
    431a:	ab e7       	ldi	r26, 0x7B	; 123
    431c:	b0 e0       	ldi	r27, 0x00	; 0
    431e:	1c 92       	st	X, r1
	ADMUX = 0;
    4320:	cc e7       	ldi	r28, 0x7C	; 124
    4322:	d0 e0       	ldi	r29, 0x00	; 0
    4324:	18 82       	st	Y, r1

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// 1/64 prescaler => 8 MHz/64=125 KHz => Tad (adc clock)
    4326:	80 81       	ld	r24, Z
    4328:	86 60       	ori	r24, 0x06	; 6
    432a:	80 83       	st	Z, r24
											// one sample need 13 Tad in free running mode, so interrupt 
											// frequency is 125/13=9.6 KHz (104 us between adc interrupts)
	ADMUX |= (1 << REFS0); 	// voltage reference to AVCC (external)
    432c:	88 81       	ld	r24, Y
    432e:	80 64       	ori	r24, 0x40	; 64
    4330:	88 83       	st	Y, r24
	ADCSRA |= (1 << ADATE); // auto-trigger mode: the new sampling is started just after the last one is completed
    4332:	80 81       	ld	r24, Z
    4334:	80 62       	ori	r24, 0x20	; 32
    4336:	80 83       	st	Z, r24
	ADCSRB &= 0xF8;			// for safety...ADTS2:0 in ADCSRB should be already set to free running by default (0b000)
    4338:	8c 91       	ld	r24, X
    433a:	88 7f       	andi	r24, 0xF8	; 248
    433c:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADIE);	// enable interrupt on conversion completion
    433e:	80 81       	ld	r24, Z
    4340:	88 60       	ori	r24, 0x08	; 8
    4342:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	// enable ADC
    4344:	80 81       	ld	r24, Z
    4346:	80 68       	ori	r24, 0x80	; 128
    4348:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);	// start first conversion (start from channel 0)
    434a:	80 81       	ld	r24, Z
    434c:	80 64       	ori	r24, 0x40	; 64
    434e:	80 83       	st	Z, r24

}
    4350:	df 91       	pop	r29
    4352:	cf 91       	pop	r28
    4354:	08 95       	ret

00004356 <__vector_29>:

ISR(ADC_vect) {
    4356:	1f 92       	push	r1
    4358:	0f 92       	push	r0
    435a:	0f b6       	in	r0, 0x3f	; 63
    435c:	0f 92       	push	r0
    435e:	0b b6       	in	r0, 0x3b	; 59
    4360:	0f 92       	push	r0
    4362:	11 24       	eor	r1, r1
    4364:	1f 93       	push	r17
    4366:	2f 93       	push	r18
    4368:	3f 93       	push	r19
    436a:	4f 93       	push	r20
    436c:	5f 93       	push	r21
    436e:	6f 93       	push	r22
    4370:	7f 93       	push	r23
    4372:	8f 93       	push	r24
    4374:	9f 93       	push	r25
    4376:	af 93       	push	r26
    4378:	bf 93       	push	r27
    437a:	ef 93       	push	r30
    437c:	ff 93       	push	r31
	// channel 15:    active phase when going forward: motor left current; passive phase when going backward: motor left velocity


	//LED_BLUE_ON;

	clockTick++;				// this variable is used as base time for timed processes/functions (e,g, delay); 
    437e:	80 91 58 04 	lds	r24, 0x0458
    4382:	90 91 59 04 	lds	r25, 0x0459
    4386:	a0 91 5a 04 	lds	r26, 0x045A
    438a:	b0 91 5b 04 	lds	r27, 0x045B
    438e:	01 96       	adiw	r24, 0x01	; 1
    4390:	a1 1d       	adc	r26, r1
    4392:	b1 1d       	adc	r27, r1
    4394:	80 93 58 04 	sts	0x0458, r24
    4398:	90 93 59 04 	sts	0x0459, r25
    439c:	a0 93 5a 04 	sts	0x045A, r26
    43a0:	b0 93 5b 04 	sts	0x045B, r27
								// resolution of 104 us based on adc interrupts

	unsigned int value = ADCL;			// get the sample; low byte must be read first!!
    43a4:	80 91 78 00 	lds	r24, 0x0078
    43a8:	90 e0       	ldi	r25, 0x00	; 0
	value = (ADCH<<8) | value;
    43aa:	40 91 79 00 	lds	r20, 0x0079
    43ae:	34 2f       	mov	r19, r20
    43b0:	20 e0       	ldi	r18, 0x00	; 0
    43b2:	82 2b       	or	r24, r18
    43b4:	93 2b       	or	r25, r19
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    43b6:	20 91 c9 02 	lds	r18, 0x02C9
    43ba:	22 30       	cpi	r18, 0x02	; 2
    43bc:	09 f4       	brne	.+2      	; 0x43c0 <__vector_29+0x6a>
    43be:	c1 c1       	rjmp	.+898    	; 0x4742 <__vector_29+0x3ec>
    43c0:	23 30       	cpi	r18, 0x03	; 3
    43c2:	08 f4       	brcc	.+2      	; 0x43c6 <__vector_29+0x70>
    43c4:	4c c0       	rjmp	.+152    	; 0x445e <__vector_29+0x108>
    43c6:	24 30       	cpi	r18, 0x04	; 4
    43c8:	09 f4       	brne	.+2      	; 0x43cc <__vector_29+0x76>
    43ca:	e5 c1       	rjmp	.+970    	; 0x4796 <__vector_29+0x440>
    43cc:	24 30       	cpi	r18, 0x04	; 4
    43ce:	08 f0       	brcs	.+2      	; 0x43d2 <__vector_29+0x7c>
    43d0:	2a c1       	rjmp	.+596    	; 0x4626 <__vector_29+0x2d0>
				}
			}
			break;

		case SAVE_TO_LEFT_MOTOR_CURRENT:
			left_current_avg += value;
    43d2:	20 91 f1 02 	lds	r18, 0x02F1
    43d6:	30 91 f2 02 	lds	r19, 0x02F2
    43da:	28 0f       	add	r18, r24
    43dc:	39 1f       	adc	r19, r25
			left_current_avg = left_current_avg >> 1;
    43de:	36 95       	lsr	r19
    43e0:	27 95       	ror	r18
    43e2:	30 93 f2 02 	sts	0x02F2, r19
    43e6:	20 93 f1 02 	sts	0x02F1, r18
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
    43ea:	80 91 d6 04 	lds	r24, 0x04D6
    43ee:	82 30       	cpi	r24, 0x02	; 2
    43f0:	09 f0       	breq	.+2      	; 0x43f4 <__vector_29+0x9e>
    43f2:	4b c0       	rjmp	.+150    	; 0x448a <__vector_29+0x134>
		switch(irCommAdcTxState) {
    43f4:	80 91 1d 05 	lds	r24, 0x051D
    43f8:	81 30       	cpi	r24, 0x01	; 1
    43fa:	09 f4       	brne	.+2      	; 0x43fe <__vector_29+0xa8>
    43fc:	a0 c2       	rjmp	.+1344   	; 0x493e <__vector_29+0x5e8>
    43fe:	81 30       	cpi	r24, 0x01	; 1
    4400:	08 f0       	brcs	.+2      	; 0x4404 <__vector_29+0xae>
    4402:	f7 c1       	rjmp	.+1006   	; 0x47f2 <__vector_29+0x49c>
				}
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ1;
				break;

			case IRCOMM_TX_ADC_IDLE:
				if(irCommTxByteEnqueued==1) {					
    4404:	80 91 1f 05 	lds	r24, 0x051F
    4408:	81 30       	cpi	r24, 0x01	; 1
    440a:	09 f4       	brne	.+2      	; 0x440e <__vector_29+0xb8>
    440c:	09 c3       	rjmp	.+1554   	; 0x4a20 <__vector_29+0x6ca>
    440e:	80 91 ca 02 	lds	r24, 0x02CA
	
	}

	// channel selection in the adc register; continuously manually change the channel 
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
    4412:	90 91 33 02 	lds	r25, 0x0233
    4416:	98 30       	cpi	r25, 0x08	; 8
    4418:	08 f0       	brcs	.+2      	; 0x441c <__vector_29+0xc6>
    441a:	4b c1       	rjmp	.+662    	; 0x46b2 <__vector_29+0x35c>
		ADCSRB &= ~(1 << MUX5);
    441c:	90 91 7b 00 	lds	r25, 0x007B
    4420:	97 7f       	andi	r25, 0xF7	; 247
    4422:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + currentAdChannel;
    4426:	90 91 33 02 	lds	r25, 0x0233
    442a:	90 5c       	subi	r25, 0xC0	; 192
    442c:	90 93 7c 00 	sts	0x007C, r25
		ADCSRB |= (1 << MUX5);
		ADMUX = 0x40 + (currentAdChannel-8);
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if((adcSamplingState==2) && (irCommMode==IRCOMM_MODE_SENSORS_SAMPLING)) {
    4430:	82 30       	cpi	r24, 0x02	; 2
    4432:	09 f4       	brne	.+2      	; 0x4436 <__vector_29+0xe0>
    4434:	4b c1       	rjmp	.+662    	; 0x46cc <__vector_29+0x376>

	}

	//LED_BLUE_OFF;

}
    4436:	ff 91       	pop	r31
    4438:	ef 91       	pop	r30
    443a:	bf 91       	pop	r27
    443c:	af 91       	pop	r26
    443e:	9f 91       	pop	r25
    4440:	8f 91       	pop	r24
    4442:	7f 91       	pop	r23
    4444:	6f 91       	pop	r22
    4446:	5f 91       	pop	r21
    4448:	4f 91       	pop	r20
    444a:	3f 91       	pop	r19
    444c:	2f 91       	pop	r18
    444e:	1f 91       	pop	r17
    4450:	0f 90       	pop	r0
    4452:	0b be       	out	0x3b, r0	; 59
    4454:	0f 90       	pop	r0
    4456:	0f be       	out	0x3f, r0	; 63
    4458:	0f 90       	pop	r0
    445a:	1f 90       	pop	r1
    445c:	18 95       	reti
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    445e:	22 23       	and	r18, r18
    4460:	09 f4       	brne	.+2      	; 0x4464 <__vector_29+0x10e>
    4462:	4d c0       	rjmp	.+154    	; 0x44fe <__vector_29+0x1a8>
    4464:	21 30       	cpi	r18, 0x01	; 1
    4466:	61 f4       	brne	.+24     	; 0x4480 <__vector_29+0x12a>
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
			}											// is sampled; thus 12 sensors x 2 phases = 24 samples
			break;

		case SAVE_TO_RIGHT_MOTOR_CURRENT:
			right_current_avg += value;
    4468:	20 91 f3 02 	lds	r18, 0x02F3
    446c:	30 91 f4 02 	lds	r19, 0x02F4
    4470:	28 0f       	add	r18, r24
    4472:	39 1f       	adc	r19, r25
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
    4474:	36 95       	lsr	r19
    4476:	27 95       	ror	r18
    4478:	30 93 f4 02 	sts	0x02F4, r19
    447c:	20 93 f3 02 	sts	0x02F3, r18
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
    4480:	80 91 d6 04 	lds	r24, 0x04D6
    4484:	82 30       	cpi	r24, 0x02	; 2
    4486:	09 f4       	brne	.+2      	; 0x448a <__vector_29+0x134>
    4488:	b5 cf       	rjmp	.-150    	; 0x43f4 <__vector_29+0x9e>
					irCommAdcTxState = IRCOMM_TX_ADC_TURN_OFF_SENSORS;
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
    448a:	81 30       	cpi	r24, 0x01	; 1
    448c:	09 f4       	brne	.+2      	; 0x4490 <__vector_29+0x13a>
    448e:	38 c1       	rjmp	.+624    	; 0x4700 <__vector_29+0x3aa>
			case 12:
				adcSaveDataTo = SKIP_SAMPLE;
				break;

		}
	} else if(irCommMode==IRCOMM_MODE_SENSORS_SAMPLING) {
    4490:	88 23       	and	r24, r24
    4492:	09 f0       	breq	.+2      	; 0x4496 <__vector_29+0x140>
    4494:	bc cf       	rjmp	.-136    	; 0x440e <__vector_29+0xb8>
		switch(adcSamplingState) {
    4496:	80 91 ca 02 	lds	r24, 0x02CA
    449a:	82 30       	cpi	r24, 0x02	; 2
    449c:	09 f4       	brne	.+2      	; 0x44a0 <__vector_29+0x14a>
    449e:	23 c3       	rjmp	.+1606   	; 0x4ae6 <__vector_29+0x790>
    44a0:	83 30       	cpi	r24, 0x03	; 3
    44a2:	08 f0       	brcs	.+2      	; 0x44a6 <__vector_29+0x150>
    44a4:	d3 c1       	rjmp	.+934    	; 0x484c <__vector_29+0x4f6>
    44a6:	88 23       	and	r24, r24
    44a8:	09 f4       	brne	.+2      	; 0x44ac <__vector_29+0x156>
    44aa:	76 c2       	rjmp	.+1260   	; 0x4998 <__vector_29+0x642>
    44ac:	81 30       	cpi	r24, 0x01	; 1
    44ae:	09 f0       	breq	.+2      	; 0x44b2 <__vector_29+0x15c>
    44b0:	b0 cf       	rjmp	.-160    	; 0x4412 <__vector_29+0xbc>
				}
				adcSamplingState = 1;
				break;

			case 1:	// left motor
				currentAdChannel = currentMotLeftChannel;
    44b2:	80 91 35 02 	lds	r24, 0x0235
    44b6:	80 93 33 02 	sts	0x0233, r24
				leftChannelPhase = leftMotorPhase;
    44ba:	80 91 38 02 	lds	r24, 0x0238
    44be:	80 93 cc 02 	sts	0x02CC, r24
				adcSaveDataTo = SAVE_TO_PROX;
    44c2:	10 92 c9 02 	sts	0x02C9, r1
				adcSamplingState = 2;
    44c6:	82 e0       	ldi	r24, 0x02	; 2
    44c8:	80 93 ca 02 	sts	0x02CA, r24
				if(irCommEnabled==IRCOMM_MODE_RECEIVE && currentProx==23) {					
    44cc:	10 91 d4 04 	lds	r17, 0x04D4
    44d0:	11 30       	cpi	r17, 0x01	; 1
    44d2:	09 f4       	brne	.+2      	; 0x44d6 <__vector_29+0x180>
    44d4:	0b c4       	rjmp	.+2070   	; 0x4cec <__vector_29+0x996>
					irCommRxWindowSamples = 0;
					memset(irCommMaxSensorValueAdc, 0x00, 16);
					memset(irCommMinSensorValueAdc, 0xFF, 16);
					irCommMode = IRCOMM_MODE_RECEIVE;					
				}
				if(irCommEnabled==IRCOMM_MODE_TRANSMIT && currentProx==23) {
    44d6:	12 30       	cpi	r17, 0x02	; 2
    44d8:	09 f0       	breq	.+2      	; 0x44dc <__vector_29+0x186>
    44da:	99 cf       	rjmp	.-206    	; 0x440e <__vector_29+0xb8>
    44dc:	80 91 34 02 	lds	r24, 0x0234
    44e0:	87 31       	cpi	r24, 0x17	; 23
    44e2:	09 f0       	breq	.+2      	; 0x44e6 <__vector_29+0x190>
    44e4:	94 cf       	rjmp	.-216    	; 0x440e <__vector_29+0xb8>
					irCommMode = IRCOMM_MODE_TRANSMIT;
    44e6:	10 93 d6 04 	sts	0x04D6, r17
					if(irCommTxByteEnqueued==1) {
    44ea:	80 91 1f 05 	lds	r24, 0x051F
    44ee:	81 30       	cpi	r24, 0x01	; 1
    44f0:	09 f4       	brne	.+2      	; 0x44f4 <__vector_29+0x19e>
    44f2:	96 c2       	rjmp	.+1324   	; 0x4a20 <__vector_29+0x6ca>
						irCommAdcTxState = IRCOMM_TX_ADC_TURN_OFF_SENSORS;
					} else {
						irCommMode=IRCOMM_MODE_SENSORS_SAMPLING; // no data to be transmitted, restart sensors sampling
    44f4:	10 92 d6 04 	sts	0x04D6, r1
    44f8:	80 91 ca 02 	lds	r24, 0x02CA
    44fc:	8a cf       	rjmp	.-236    	; 0x4412 <__vector_29+0xbc>
			}
			currentProx++;
			break;

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    44fe:	60 91 34 02 	lds	r22, 0x0234
    4502:	6e 30       	cpi	r22, 0x0E	; 14
    4504:	09 f4       	brne	.+2      	; 0x4508 <__vector_29+0x1b2>
    4506:	02 c3       	rjmp	.+1540   	; 0x4b0c <__vector_29+0x7b6>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
				measBattery = 0;
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
			} else {
				proximityValue[currentProx] = value;	// even indexes contain ambient values; odd indexes contains "reflected" values
    4508:	26 2f       	mov	r18, r22
    450a:	30 e0       	ldi	r19, 0x00	; 0
    450c:	f9 01       	movw	r30, r18
    450e:	ee 0f       	add	r30, r30
    4510:	ff 1f       	adc	r31, r31
    4512:	e7 5c       	subi	r30, 0xC7	; 199
    4514:	fd 4f       	sbci	r31, 0xFD	; 253
    4516:	91 83       	std	Z+1, r25	; 0x01
    4518:	80 83       	st	Z, r24
			}

			if(currentProx & 0x01) {
    451a:	20 ff       	sbrs	r18, 0
    451c:	78 c0       	rjmp	.+240    	; 0x460e <__vector_29+0x2b8>
				//if(currentProx < 16) {	// prox
					proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
    451e:	f9 01       	movw	r30, r18
    4520:	ee 0f       	add	r30, r30
    4522:	ff 1f       	adc	r31, r31
    4524:	e9 5c       	subi	r30, 0xC9	; 201
    4526:	fd 4f       	sbci	r31, 0xFD	; 253
    4528:	80 81       	ld	r24, Z
    452a:	91 81       	ldd	r25, Z+1	; 0x01
    452c:	f9 01       	movw	r30, r18
    452e:	ee 0f       	add	r30, r30
    4530:	ff 1f       	adc	r31, r31
    4532:	e7 5c       	subi	r30, 0xC7	; 199
    4534:	fd 4f       	sbci	r31, 0xFD	; 253
    4536:	40 81       	ld	r20, Z
    4538:	51 81       	ldd	r21, Z+1	; 0x01
    453a:	26 2f       	mov	r18, r22
    453c:	26 95       	lsr	r18
    453e:	30 e0       	ldi	r19, 0x00	; 0
    4540:	84 1b       	sub	r24, r20
    4542:	95 0b       	sbc	r25, r21
    4544:	22 0f       	add	r18, r18
    4546:	33 1f       	adc	r19, r19
    4548:	f9 01       	movw	r30, r18
    454a:	ef 57       	subi	r30, 0x7F	; 127
    454c:	fd 4f       	sbci	r31, 0xFD	; 253
    454e:	40 81       	ld	r20, Z
    4550:	51 81       	ldd	r21, Z+1	; 0x01
    4552:	84 1b       	sub	r24, r20
    4554:	95 0b       	sbc	r25, r21
    4556:	f9 01       	movw	r30, r18
    4558:	e7 59       	subi	r30, 0x97	; 151
    455a:	fd 4f       	sbci	r31, 0xFD	; 253
    455c:	91 83       	std	Z+1, r25	; 0x01
    455e:	80 83       	st	Z, r24
				//} else {	// ground
				//	proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx];
				//}
				if(proximityResult[currentProx>>1] < 0) {
    4560:	97 fd       	sbrc	r25, 7
    4562:	fe c2       	rjmp	.+1532   	; 0x4b60 <__vector_29+0x80a>
					proximityResult[currentProx>>1] = 0;
				}
				if(proximityResult[currentProx>>1] > 1024) {
    4564:	44 e0       	ldi	r20, 0x04	; 4
    4566:	81 30       	cpi	r24, 0x01	; 1
    4568:	94 07       	cpc	r25, r20
    456a:	24 f0       	brlt	.+8      	; 0x4574 <__vector_29+0x21e>
					proximityResult[currentProx>>1] = 1024;
    456c:	80 e0       	ldi	r24, 0x00	; 0
    456e:	94 e0       	ldi	r25, 0x04	; 4
    4570:	91 83       	std	Z+1, r25	; 0x01
    4572:	80 83       	st	Z, r24
				// 1) from 0 to PHASE1: y = x (where x = proximity value9
				// 2) from PHASE1 to PHASE2: y = x/2 + 30
				// 3) from PHASE2 to PHASE3: y = x/4 + 75
				// 4) from PHASE3 upwards: y = x/8 + 127.5
				// The linearized values are used for the obstacles avoidance.
				if(currentProx < 16) {	// only for proximity (not ground sensors)
    4574:	60 31       	cpi	r22, 0x10	; 16
    4576:	50 f4       	brcc	.+20     	; 0x458c <__vector_29+0x236>
					
					if(proximityResult[currentProx>>1] < PHASE1) {
    4578:	8c 33       	cpi	r24, 0x3C	; 60
    457a:	91 05       	cpc	r25, r1
    457c:	0c f0       	brlt	.+2      	; 0x4580 <__vector_29+0x22a>
    457e:	f5 c2       	rjmp	.+1514   	; 0x4b6a <__vector_29+0x814>

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];
    4580:	2f 52       	subi	r18, 0x2F	; 47
    4582:	3d 4f       	sbci	r19, 0xFD	; 253
    4584:	d9 01       	movw	r26, r18
    4586:	11 96       	adiw	r26, 0x01	; 1
    4588:	9c 93       	st	X, r25
    458a:	8e 93       	st	-X, r24
				}

				// the cliff avoidance behavior is inserted within this interrupt service routine in order to react
				// as fast as possible; the maximum speed usable with cliff avoidance is 30 in all kind of surface 
				// (apart from black ones) after calibration.
				if(cliffAvoidanceEnabled) {
    458c:	80 91 7d 04 	lds	r24, 0x047D
    4590:	88 23       	and	r24, r24
    4592:	09 f4       	brne	.+2      	; 0x4596 <__vector_29+0x240>
    4594:	12 c2       	rjmp	.+1060   	; 0x49ba <__vector_29+0x664>
					if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    4596:	80 91 79 02 	lds	r24, 0x0279
    459a:	90 91 7a 02 	lds	r25, 0x027A
    459e:	f1 e0       	ldi	r31, 0x01	; 1
    45a0:	84 3a       	cpi	r24, 0xA4	; 164
    45a2:	9f 07       	cpc	r25, r31
    45a4:	cc f0       	brlt	.+50     	; 0x45d8 <__vector_29+0x282>
    45a6:	80 91 7b 02 	lds	r24, 0x027B
    45aa:	90 91 7c 02 	lds	r25, 0x027C
    45ae:	21 e0       	ldi	r18, 0x01	; 1
    45b0:	84 3a       	cpi	r24, 0xA4	; 164
    45b2:	92 07       	cpc	r25, r18
    45b4:	8c f0       	brlt	.+34     	; 0x45d8 <__vector_29+0x282>
    45b6:	80 91 7d 02 	lds	r24, 0x027D
    45ba:	90 91 7e 02 	lds	r25, 0x027E
    45be:	41 e0       	ldi	r20, 0x01	; 1
    45c0:	84 3a       	cpi	r24, 0xA4	; 164
    45c2:	94 07       	cpc	r25, r20
    45c4:	4c f0       	brlt	.+18     	; 0x45d8 <__vector_29+0x282>
    45c6:	80 91 7f 02 	lds	r24, 0x027F
    45ca:	90 91 80 02 	lds	r25, 0x0280
    45ce:	a1 e0       	ldi	r26, 0x01	; 1
    45d0:	84 3a       	cpi	r24, 0xA4	; 164
    45d2:	9a 07       	cpc	r25, r26
    45d4:	0c f0       	brlt	.+2      	; 0x45d8 <__vector_29+0x282>
    45d6:	f1 c1       	rjmp	.+994    	; 0x49ba <__vector_29+0x664>
					//if(proximityResult[8]<(proximityOffset[8]>>1) || proximityResult[9]<(proximityOffset[9]>>1) || proximityResult[10]<(proximityOffset[10]>>1) || proximityResult[11]<(proximityOffset[11]>>1)) {
						cliffDetectedFlag = 1;
    45d8:	81 e0       	ldi	r24, 0x01	; 1
    45da:	80 93 7e 04 	sts	0x047E, r24
						//LED_RED_ON;			
						// set resulting velocity to 0 and change the pwm registers directly to be able
						// to stop as fast as possible (the next pwm cycle)
						// left motor
						pwm_left = 0;
    45de:	10 92 08 03 	sts	0x0308, r1
    45e2:	10 92 07 03 	sts	0x0307, r1
						OCR4A = 0;
    45e6:	10 92 a9 00 	sts	0x00A9, r1
    45ea:	10 92 a8 00 	sts	0x00A8, r1
						OCR4B = 0;
    45ee:	10 92 ab 00 	sts	0x00AB, r1
    45f2:	10 92 aa 00 	sts	0x00AA, r1
						// right motor
						pwm_right = 0;
    45f6:	10 92 06 03 	sts	0x0306, r1
    45fa:	10 92 05 03 	sts	0x0305, r1
						OCR3A = 0;
    45fe:	10 92 99 00 	sts	0x0099, r1
    4602:	10 92 98 00 	sts	0x0098, r1
						OCR3B = 0;
    4606:	10 92 9b 00 	sts	0x009B, r1
    460a:	10 92 9a 00 	sts	0x009A, r1
				} else {
					cliffDetectedFlag = 0;
				}

			}			
			currentProx++;
    460e:	6f 5f       	subi	r22, 0xFF	; 255
    4610:	60 93 34 02 	sts	0x0234, r22
			if(currentProx > 23) {						// in total there are 8 proximity sensors and 4 ground sensors => 12 sensors
    4614:	68 31       	cpi	r22, 0x18	; 24
    4616:	08 f4       	brcc	.+2      	; 0x461a <__vector_29+0x2c4>
    4618:	33 cf       	rjmp	.-410    	; 0x4480 <__vector_29+0x12a>
				currentProx = 0;						// for each one there is a passive phase in which the ambient light is sampled,
    461a:	10 92 34 02 	sts	0x0234, r1
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
    461e:	81 e0       	ldi	r24, 0x01	; 1
    4620:	80 93 d0 02 	sts	0x02D0, r24
    4624:	2d cf       	rjmp	.-422    	; 0x4480 <__vector_29+0x12a>
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    4626:	26 30       	cpi	r18, 0x06	; 6
    4628:	09 f0       	breq	.+2      	; 0x462c <__vector_29+0x2d6>
    462a:	2a cf       	rjmp	.-428    	; 0x4480 <__vector_29+0x12a>
		case SAVE_TO_PROX_IRCOMM:
			irCommProxValuesAdc[currentProx+irCommRxWindowSamples*8] = value;
    462c:	20 91 00 05 	lds	r18, 0x0500
    4630:	30 e0       	ldi	r19, 0x00	; 0
    4632:	40 91 34 02 	lds	r20, 0x0234
    4636:	22 0f       	add	r18, r18
    4638:	33 1f       	adc	r19, r19
    463a:	22 0f       	add	r18, r18
    463c:	33 1f       	adc	r19, r19
    463e:	22 0f       	add	r18, r18
    4640:	33 1f       	adc	r19, r19
    4642:	24 0f       	add	r18, r20
    4644:	31 1d       	adc	r19, r1
    4646:	22 0f       	add	r18, r18
    4648:	33 1f       	adc	r19, r19
    464a:	e0 91 64 08 	lds	r30, 0x0864
    464e:	f0 91 65 08 	lds	r31, 0x0865
    4652:	e2 0f       	add	r30, r18
    4654:	f3 1f       	adc	r31, r19
    4656:	91 83       	std	Z+1, r25	; 0x01
    4658:	80 83       	st	Z, r24
			// get the min and max values in the sampling window for all the sensors
			if(irCommMaxSensorValueAdc[currentProx] < value) {
    465a:	60 91 34 02 	lds	r22, 0x0234
    465e:	26 2f       	mov	r18, r22
    4660:	30 e0       	ldi	r19, 0x00	; 0
    4662:	22 0f       	add	r18, r18
    4664:	33 1f       	adc	r19, r19
    4666:	e0 91 32 0b 	lds	r30, 0x0B32
    466a:	f0 91 33 0b 	lds	r31, 0x0B33
    466e:	e2 0f       	add	r30, r18
    4670:	f3 1f       	adc	r31, r19
    4672:	40 81       	ld	r20, Z
    4674:	51 81       	ldd	r21, Z+1	; 0x01
    4676:	48 17       	cp	r20, r24
    4678:	59 07       	cpc	r21, r25
    467a:	40 f4       	brcc	.+16     	; 0x468c <__vector_29+0x336>
				irCommMaxSensorValueAdc[currentProx] = value;
    467c:	91 83       	std	Z+1, r25	; 0x01
    467e:	80 83       	st	Z, r24
    4680:	60 91 34 02 	lds	r22, 0x0234
    4684:	26 2f       	mov	r18, r22
    4686:	30 e0       	ldi	r19, 0x00	; 0
    4688:	22 0f       	add	r18, r18
    468a:	33 1f       	adc	r19, r19
			}
			if(irCommMinSensorValueAdc[currentProx] > value) {
    468c:	e0 91 c0 05 	lds	r30, 0x05C0
    4690:	f0 91 c1 05 	lds	r31, 0x05C1
    4694:	e2 0f       	add	r30, r18
    4696:	f3 1f       	adc	r31, r19
    4698:	20 81       	ld	r18, Z
    469a:	31 81       	ldd	r19, Z+1	; 0x01
    469c:	82 17       	cp	r24, r18
    469e:	93 07       	cpc	r25, r19
    46a0:	20 f4       	brcc	.+8      	; 0x46aa <__vector_29+0x354>
				irCommMinSensorValueAdc[currentProx] = value;
    46a2:	91 83       	std	Z+1, r25	; 0x01
    46a4:	80 83       	st	Z, r24
    46a6:	60 91 34 02 	lds	r22, 0x0234
			}
			currentProx++;
    46aa:	6f 5f       	subi	r22, 0xFF	; 255
    46ac:	60 93 34 02 	sts	0x0234, r22
			break;
    46b0:	e7 ce       	rjmp	.-562    	; 0x4480 <__vector_29+0x12a>
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
		ADCSRB &= ~(1 << MUX5);
		ADMUX = 0x40 + currentAdChannel;
	} else {						// MUX5=1 + ADMUX=0..7 => adc channel=8..15
		ADCSRB |= (1 << MUX5);
    46b2:	90 91 7b 00 	lds	r25, 0x007B
    46b6:	98 60       	ori	r25, 0x08	; 8
    46b8:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + (currentAdChannel-8);
    46bc:	90 91 33 02 	lds	r25, 0x0233
    46c0:	98 5c       	subi	r25, 0xC8	; 200
    46c2:	90 93 7c 00 	sts	0x007C, r25
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if((adcSamplingState==2) && (irCommMode==IRCOMM_MODE_SENSORS_SAMPLING)) {
    46c6:	82 30       	cpi	r24, 0x02	; 2
    46c8:	09 f0       	breq	.+2      	; 0x46cc <__vector_29+0x376>
    46ca:	b5 ce       	rjmp	.-662    	; 0x4436 <__vector_29+0xe0>
    46cc:	80 91 d6 04 	lds	r24, 0x04D6
    46d0:	88 23       	and	r24, r24
    46d2:	09 f0       	breq	.+2      	; 0x46d6 <__vector_29+0x380>
    46d4:	b0 ce       	rjmp	.-672    	; 0x4436 <__vector_29+0xe0>

		if(hardwareRevision == HW_REV_3_0) {
    46d6:	20 91 5f 04 	lds	r18, 0x045F
    46da:	22 23       	and	r18, r18
    46dc:	39 f4       	brne	.+14     	; 0x46ec <__vector_29+0x396>
			PORTJ &= 0xF0;
    46de:	80 91 05 01 	lds	r24, 0x0105
    46e2:	80 7f       	andi	r24, 0xF0	; 240
    46e4:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    46e8:	12 b8       	out	0x02, r1	; 2
    46ea:	a5 ce       	rjmp	.-694    	; 0x4436 <__vector_29+0xe0>
			//#warning "turn off pulse with 0 (hw rev 3.0)"
		}

		if(hardwareRevision == HW_REV_3_0_1) {
    46ec:	21 30       	cpi	r18, 0x01	; 1
    46ee:	19 f0       	breq	.+6      	; 0x46f6 <__vector_29+0x3a0>
			PORTJ = 0xFF;
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0.1)"
		}

		if(hardwareRevision == HW_REV_3_1) {
    46f0:	22 30       	cpi	r18, 0x02	; 2
    46f2:	09 f0       	breq	.+2      	; 0x46f6 <__vector_29+0x3a0>
    46f4:	a0 ce       	rjmp	.-704    	; 0x4436 <__vector_29+0xe0>
			PORTJ = 0xFF;
    46f6:	8f ef       	ldi	r24, 0xFF	; 255
    46f8:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    46fc:	12 b8       	out	0x02, r1	; 2
    46fe:	9b ce       	rjmp	.-714    	; 0x4436 <__vector_29+0xe0>
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
    4700:	90 91 ff 04 	lds	r25, 0x04FF
    4704:	96 30       	cpi	r25, 0x06	; 6
    4706:	09 f4       	brne	.+2      	; 0x470a <__vector_29+0x3b4>
    4708:	43 c2       	rjmp	.+1158   	; 0x4b90 <__vector_29+0x83a>
    470a:	97 30       	cpi	r25, 0x07	; 7
    470c:	08 f0       	brcs	.+2      	; 0x4710 <__vector_29+0x3ba>
    470e:	ce c0       	rjmp	.+412    	; 0x48ac <__vector_29+0x556>
    4710:	92 30       	cpi	r25, 0x02	; 2
    4712:	09 f4       	brne	.+2      	; 0x4716 <__vector_29+0x3c0>
    4714:	a9 c2       	rjmp	.+1362   	; 0x4c68 <__vector_29+0x912>
    4716:	93 30       	cpi	r25, 0x03	; 3
    4718:	08 f4       	brcc	.+2      	; 0x471c <__vector_29+0x3c6>
    471a:	6e c1       	rjmp	.+732    	; 0x49f8 <__vector_29+0x6a2>
    471c:	94 30       	cpi	r25, 0x04	; 4
    471e:	09 f4       	brne	.+2      	; 0x4722 <__vector_29+0x3cc>
    4720:	d0 c2       	rjmp	.+1440   	; 0x4cc2 <__vector_29+0x96c>
    4722:	95 30       	cpi	r25, 0x05	; 5
    4724:	08 f4       	brcc	.+2      	; 0x4728 <__vector_29+0x3d2>
    4726:	bf c2       	rjmp	.+1406   	; 0x4ca6 <__vector_29+0x950>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 5;
				break;

			case 5:
				currentAdChannel = currentProx+1;
    4728:	80 91 34 02 	lds	r24, 0x0234
    472c:	8f 5f       	subi	r24, 0xFF	; 255
    472e:	80 93 33 02 	sts	0x0233, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    4732:	86 e0       	ldi	r24, 0x06	; 6
    4734:	80 93 c9 02 	sts	0x02C9, r24
				irCommAdcRxState = 6;
    4738:	80 93 ff 04 	sts	0x04FF, r24
    473c:	80 91 ca 02 	lds	r24, 0x02CA
				break;
    4740:	68 ce       	rjmp	.-816    	; 0x4412 <__vector_29+0xbc>
			right_current_avg += value;
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
			break;

		case SAVE_TO_RIGHT_MOTOR_VEL:
			if(firstSampleRight > 0) {
    4742:	20 91 09 02 	lds	r18, 0x0209
    4746:	22 23       	and	r18, r18
    4748:	09 f4       	brne	.+2      	; 0x474c <__vector_29+0x3f6>
    474a:	9a ce       	rjmp	.-716    	; 0x4480 <__vector_29+0x12a>
			    // sometimes it was noticed that the velocity is sampled even if the pwm
			    // is in its active phase; as a workaround simply skip the samples in these
			    // cases
				if(((PINE & _BV(PE3))>>3) || ((PINE & _BV(PE4))>>4)) {  // if active phase for either forward or backward direction
    474c:	63 99       	sbic	0x0c, 3	; 12
    474e:	98 ce       	rjmp	.-720    	; 0x4480 <__vector_29+0x12a>
    4750:	64 99       	sbic	0x0c, 4	; 12
    4752:	96 ce       	rjmp	.-724    	; 0x4480 <__vector_29+0x12a>
					//LED_RED_ON;
					break;
				}
				firstSampleRight++;
    4754:	42 2f       	mov	r20, r18
    4756:	4f 5f       	subi	r20, 0xFF	; 255
    4758:	40 93 09 02 	sts	0x0209, r20
				if(firstSampleRight > 4) {				// to skip undesired samples (3 samples skipped) in which there could be glitches
    475c:	45 30       	cpi	r20, 0x05	; 5
    475e:	08 f4       	brcc	.+2      	; 0x4762 <__vector_29+0x40c>
    4760:	8f ce       	rjmp	.-738    	; 0x4480 <__vector_29+0x12a>
					if(pwm_right != 0) {
    4762:	20 91 05 03 	lds	r18, 0x0305
    4766:	30 91 06 03 	lds	r19, 0x0306
    476a:	21 15       	cp	r18, r1
    476c:	31 05       	cpc	r19, r1
    476e:	51 f0       	breq	.+20     	; 0x4784 <__vector_29+0x42e>
						right_vel_sum += value;
    4770:	20 91 ff 02 	lds	r18, 0x02FF
    4774:	30 91 00 03 	lds	r19, 0x0300
    4778:	28 0f       	add	r18, r24
    477a:	39 1f       	adc	r19, r25
    477c:	30 93 00 03 	sts	0x0300, r19
    4780:	20 93 ff 02 	sts	0x02FF, r18
					}
					if(firstSampleRight==8) {			// number of samples to take for the speed computation (average of 4 samples)
    4784:	48 30       	cpi	r20, 0x08	; 8
    4786:	09 f0       	breq	.+2      	; 0x478a <__vector_29+0x434>
    4788:	7b ce       	rjmp	.-778    	; 0x4480 <__vector_29+0x12a>
						firstSampleRight = 0;
    478a:	10 92 09 02 	sts	0x0209, r1
						compute_right_vel = 1;
    478e:	81 e0       	ldi	r24, 0x01	; 1
    4790:	80 93 08 02 	sts	0x0208, r24
    4794:	75 ce       	rjmp	.-790    	; 0x4480 <__vector_29+0x12a>
			left_current_avg += value;
			left_current_avg = left_current_avg >> 1;
			break;

		case SAVE_TO_LEFT_MOTOR_VEL:
			if(firstSampleLeft > 0) {
    4796:	20 91 0a 02 	lds	r18, 0x020A
    479a:	22 23       	and	r18, r18
    479c:	09 f4       	brne	.+2      	; 0x47a0 <__vector_29+0x44a>
    479e:	70 ce       	rjmp	.-800    	; 0x4480 <__vector_29+0x12a>
				if(((PINH & _BV(PH3))>>3) || ((PINH & _BV(PH4))>>4)) {
    47a0:	30 91 00 01 	lds	r19, 0x0100
    47a4:	33 fd       	sbrc	r19, 3
    47a6:	6c ce       	rjmp	.-808    	; 0x4480 <__vector_29+0x12a>
    47a8:	30 91 00 01 	lds	r19, 0x0100
    47ac:	34 fd       	sbrc	r19, 4
    47ae:	68 ce       	rjmp	.-816    	; 0x4480 <__vector_29+0x12a>
					//LED_RED_ON;
					break;
				}
				firstSampleLeft++;
    47b0:	42 2f       	mov	r20, r18
    47b2:	4f 5f       	subi	r20, 0xFF	; 255
    47b4:	40 93 0a 02 	sts	0x020A, r20
				if(firstSampleLeft > 4) {
    47b8:	45 30       	cpi	r20, 0x05	; 5
    47ba:	08 f4       	brcc	.+2      	; 0x47be <__vector_29+0x468>
    47bc:	61 ce       	rjmp	.-830    	; 0x4480 <__vector_29+0x12a>
					if(pwm_left != 0) {
    47be:	20 91 07 03 	lds	r18, 0x0307
    47c2:	30 91 08 03 	lds	r19, 0x0308
    47c6:	21 15       	cp	r18, r1
    47c8:	31 05       	cpc	r19, r1
    47ca:	51 f0       	breq	.+20     	; 0x47e0 <__vector_29+0x48a>
						left_vel_sum += value;
    47cc:	20 91 fd 02 	lds	r18, 0x02FD
    47d0:	30 91 fe 02 	lds	r19, 0x02FE
    47d4:	28 0f       	add	r18, r24
    47d6:	39 1f       	adc	r19, r25
    47d8:	30 93 fe 02 	sts	0x02FE, r19
    47dc:	20 93 fd 02 	sts	0x02FD, r18
					}
					if(firstSampleLeft==8) {
    47e0:	48 30       	cpi	r20, 0x08	; 8
    47e2:	09 f0       	breq	.+2      	; 0x47e6 <__vector_29+0x490>
    47e4:	4d ce       	rjmp	.-870    	; 0x4480 <__vector_29+0x12a>
						firstSampleLeft = 0;
    47e6:	10 92 0a 02 	sts	0x020A, r1
						compute_left_vel = 1;
    47ea:	81 e0       	ldi	r24, 0x01	; 1
    47ec:	80 93 07 02 	sts	0x0207, r24
    47f0:	47 ce       	rjmp	.-882    	; 0x4480 <__vector_29+0x12a>
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
		switch(irCommAdcTxState) {
    47f2:	83 30       	cpi	r24, 0x03	; 3
    47f4:	09 f4       	brne	.+2      	; 0x47f8 <__vector_29+0x4a2>
    47f6:	7c c0       	rjmp	.+248    	; 0x48f0 <__vector_29+0x59a>
    47f8:	84 30       	cpi	r24, 0x04	; 4
    47fa:	09 f0       	breq	.+2      	; 0x47fe <__vector_29+0x4a8>
    47fc:	08 ce       	rjmp	.-1008   	; 0x440e <__vector_29+0xb8>
				}
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ2;
				break;

			case IRCOMM_TX_ADC_TRANSMISSION_SEQ2:
				irCommTxDurationCycle++;
    47fe:	20 91 2b 05 	lds	r18, 0x052B
    4802:	2f 5f       	subi	r18, 0xFF	; 255
    4804:	20 93 2b 05 	sts	0x052B, r18
				if(irCommTxDurationCycle == irCommTxDuration) {
    4808:	30 e0       	ldi	r19, 0x00	; 0
    480a:	80 91 27 05 	lds	r24, 0x0527
    480e:	90 91 28 05 	lds	r25, 0x0528
    4812:	28 17       	cp	r18, r24
    4814:	39 07       	cpc	r19, r25
    4816:	09 f4       	brne	.+2      	; 0x481a <__vector_29+0x4c4>
    4818:	08 c1       	rjmp	.+528    	; 0x4a2a <__vector_29+0x6d4>
						irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;
						adcSaveDataTo = SKIP_SAMPLE;
						break;
					}
				}
				currentAdChannel = currentMotLeftChannel;
    481a:	80 91 35 02 	lds	r24, 0x0235
    481e:	80 93 33 02 	sts	0x0233, r24
				leftChannelPhase = leftMotorPhase;
    4822:	80 91 38 02 	lds	r24, 0x0238
    4826:	80 93 cc 02 	sts	0x02CC, r24
				if(rightChannelPhase == ACTIVE_PHASE) {
    482a:	80 91 cb 02 	lds	r24, 0x02CB
    482e:	88 23       	and	r24, r24
    4830:	09 f4       	brne	.+2      	; 0x4834 <__vector_29+0x4de>
    4832:	cf c0       	rjmp	.+414    	; 0x49d2 <__vector_29+0x67c>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    4834:	81 30       	cpi	r24, 0x01	; 1
    4836:	09 f4       	brne	.+2      	; 0x483a <__vector_29+0x4e4>
    4838:	b5 c2       	rjmp	.+1386   	; 0x4da4 <__vector_29+0xa4e>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    483a:	85 e0       	ldi	r24, 0x05	; 5
    483c:	80 93 c9 02 	sts	0x02C9, r24
				}
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ1;
    4840:	83 e0       	ldi	r24, 0x03	; 3
    4842:	80 93 1d 05 	sts	0x051D, r24
    4846:	80 91 ca 02 	lds	r24, 0x02CA
				break;
    484a:	e3 cd       	rjmp	.-1082   	; 0x4412 <__vector_29+0xbc>
				adcSaveDataTo = SKIP_SAMPLE;
				break;

		}
	} else if(irCommMode==IRCOMM_MODE_SENSORS_SAMPLING) {
		switch(adcSamplingState) {
    484c:	83 30       	cpi	r24, 0x03	; 3
    484e:	09 f4       	brne	.+2      	; 0x4852 <__vector_29+0x4fc>
    4850:	37 c1       	rjmp	.+622    	; 0x4ac0 <__vector_29+0x76a>
    4852:	84 30       	cpi	r24, 0x04	; 4
    4854:	09 f0       	breq	.+2      	; 0x4858 <__vector_29+0x502>
    4856:	dd cd       	rjmp	.-1094   	; 0x4412 <__vector_29+0xbc>
				}
				adcSamplingState = 4;
				break;

			case 4:	// right motor
				currentAdChannel = currentMotRightChannel;
    4858:	90 91 36 02 	lds	r25, 0x0236
    485c:	90 93 33 02 	sts	0x0233, r25
				rightChannelPhase = rightMotorPhase;
    4860:	90 91 37 02 	lds	r25, 0x0237
    4864:	90 93 cb 02 	sts	0x02CB, r25
				if(leftChannelPhase == ACTIVE_PHASE) {
    4868:	90 91 cc 02 	lds	r25, 0x02CC
    486c:	99 23       	and	r25, r25
    486e:	09 f0       	breq	.+2      	; 0x4872 <__vector_29+0x51c>
    4870:	6a c1       	rjmp	.+724    	; 0x4b46 <__vector_29+0x7f0>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    4872:	83 e0       	ldi	r24, 0x03	; 3
    4874:	80 93 c9 02 	sts	0x02C9, r24
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 0;
    4878:	10 92 ca 02 	sts	0x02CA, r1

				if(currentProx==14 && measBattery==1) {
    487c:	60 91 34 02 	lds	r22, 0x0234
    4880:	6e 30       	cpi	r22, 0x0E	; 14
    4882:	09 f4       	brne	.+2      	; 0x4886 <__vector_29+0x530>
    4884:	2c c2       	rjmp	.+1112   	; 0x4cde <__vector_29+0x988>
					measBattery=2;
					SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
				}

				// turn on the IR pulses for the proximities only in their active phases
				if(currentProx & 0x01) {
    4886:	86 2f       	mov	r24, r22
    4888:	90 e0       	ldi	r25, 0x00	; 0
    488a:	60 ff       	sbrs	r22, 0
    488c:	c0 cd       	rjmp	.-1152   	; 0x440e <__vector_29+0xb8>
					if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
    488e:	60 31       	cpi	r22, 0x10	; 16
    4890:	08 f0       	brcs	.+2      	; 0x4894 <__vector_29+0x53e>
    4892:	33 c2       	rjmp	.+1126   	; 0x4cfa <__vector_29+0x9a4>
											// PORTA for proximity sensors, PORTJ for ground sensors
						PORTA = (1 << (currentProx>>1));	// pulse on
    4894:	66 95       	lsr	r22
    4896:	81 e0       	ldi	r24, 0x01	; 1
    4898:	90 e0       	ldi	r25, 0x00	; 0
    489a:	02 c0       	rjmp	.+4      	; 0x48a0 <__vector_29+0x54a>
    489c:	88 0f       	add	r24, r24
    489e:	99 1f       	adc	r25, r25
    48a0:	6a 95       	dec	r22
    48a2:	e2 f7       	brpl	.-8      	; 0x489c <__vector_29+0x546>
    48a4:	82 b9       	out	0x02, r24	; 2
    48a6:	80 91 ca 02 	lds	r24, 0x02CA
    48aa:	b3 cd       	rjmp	.-1178   	; 0x4412 <__vector_29+0xbc>
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
    48ac:	99 30       	cpi	r25, 0x09	; 9
    48ae:	09 f4       	brne	.+2      	; 0x48b2 <__vector_29+0x55c>
    48b0:	c3 c1       	rjmp	.+902    	; 0x4c38 <__vector_29+0x8e2>
    48b2:	9a 30       	cpi	r25, 0x0A	; 10
    48b4:	08 f0       	brcs	.+2      	; 0x48b8 <__vector_29+0x562>
    48b6:	91 c0       	rjmp	.+290    	; 0x49da <__vector_29+0x684>
    48b8:	97 30       	cpi	r25, 0x07	; 7
    48ba:	09 f4       	brne	.+2      	; 0x48be <__vector_29+0x568>
    48bc:	e3 c1       	rjmp	.+966    	; 0x4c84 <__vector_29+0x92e>
    48be:	98 30       	cpi	r25, 0x08	; 8
    48c0:	09 f0       	breq	.+2      	; 0x48c4 <__vector_29+0x56e>
    48c2:	a5 cd       	rjmp	.-1206   	; 0x440e <__vector_29+0xb8>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 8;
				break;

			case 8:
				currentAdChannel = currentMotRightChannel;
    48c4:	80 91 36 02 	lds	r24, 0x0236
    48c8:	80 93 33 02 	sts	0x0233, r24
				rightChannelPhase = rightMotorPhase;
    48cc:	80 91 37 02 	lds	r24, 0x0237
    48d0:	80 93 cb 02 	sts	0x02CB, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    48d4:	80 91 cc 02 	lds	r24, 0x02CC
    48d8:	88 23       	and	r24, r24
    48da:	09 f0       	breq	.+2      	; 0x48de <__vector_29+0x588>
    48dc:	67 c2       	rjmp	.+1230   	; 0x4dac <__vector_29+0xa56>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    48de:	83 e0       	ldi	r24, 0x03	; 3
    48e0:	80 93 c9 02 	sts	0x02C9, r24
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				irCommAdcRxState = 9;
    48e4:	89 e0       	ldi	r24, 0x09	; 9
    48e6:	80 93 ff 04 	sts	0x04FF, r24
    48ea:	80 91 ca 02 	lds	r24, 0x02CA
				break;
    48ee:	91 cd       	rjmp	.-1246   	; 0x4412 <__vector_29+0xbc>

			case IRCOMM_TX_ADC_WAIT_PREPARATION:
				break;

			case IRCOMM_TX_ADC_TRANSMISSION_SEQ1:
				irCommTxDurationCycle++;
    48f0:	20 91 2b 05 	lds	r18, 0x052B
    48f4:	2f 5f       	subi	r18, 0xFF	; 255
    48f6:	20 93 2b 05 	sts	0x052B, r18
				if(irCommTxDurationCycle == irCommTxDuration) {
    48fa:	30 e0       	ldi	r19, 0x00	; 0
    48fc:	80 91 27 05 	lds	r24, 0x0527
    4900:	90 91 28 05 	lds	r25, 0x0528
    4904:	28 17       	cp	r18, r24
    4906:	39 07       	cpc	r19, r25
    4908:	09 f4       	brne	.+2      	; 0x490c <__vector_29+0x5b6>
    490a:	be c0       	rjmp	.+380    	; 0x4a88 <__vector_29+0x732>
						irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;						
						adcSaveDataTo = SKIP_SAMPLE;
						break;
					}
				}	
				currentAdChannel = currentMotRightChannel;
    490c:	80 91 36 02 	lds	r24, 0x0236
    4910:	80 93 33 02 	sts	0x0233, r24
				rightChannelPhase = rightMotorPhase;
    4914:	80 91 37 02 	lds	r24, 0x0237
    4918:	80 93 cb 02 	sts	0x02CB, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    491c:	80 91 cc 02 	lds	r24, 0x02CC
    4920:	88 23       	and	r24, r24
    4922:	09 f4       	brne	.+2      	; 0x4926 <__vector_29+0x5d0>
    4924:	52 c0       	rjmp	.+164    	; 0x49ca <__vector_29+0x674>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    4926:	81 30       	cpi	r24, 0x01	; 1
    4928:	09 f4       	brne	.+2      	; 0x492c <__vector_29+0x5d6>
    492a:	38 c2       	rjmp	.+1136   	; 0x4d9c <__vector_29+0xa46>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    492c:	85 e0       	ldi	r24, 0x05	; 5
    492e:	80 93 c9 02 	sts	0x02C9, r24
				}
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ2;
    4932:	84 e0       	ldi	r24, 0x04	; 4
    4934:	80 93 1d 05 	sts	0x051D, r24
    4938:	80 91 ca 02 	lds	r24, 0x02CA
				break;
    493c:	6a cd       	rjmp	.-1324   	; 0x4412 <__vector_29+0xbc>
	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
		switch(irCommAdcTxState) {
			case IRCOMM_TX_ADC_TURN_OFF_SENSORS:
				// turn off all proximity
				if(hardwareRevision == HW_REV_3_0) {
    493e:	20 91 5f 04 	lds	r18, 0x045F
    4942:	22 23       	and	r18, r18
    4944:	01 f5       	brne	.+64     	; 0x4986 <__vector_29+0x630>
					PORTJ &= 0xF0;	// ground
    4946:	80 91 05 01 	lds	r24, 0x0105
    494a:	80 7f       	andi	r24, 0xF0	; 240
    494c:	80 93 05 01 	sts	0x0105, r24
					PORTA = 0x00;	// proximity
    4950:	12 b8       	out	0x02, r1	; 2

				if(hardwareRevision == HW_REV_3_1) {
					PORTJ = 0xFF;	// ground
					PORTA = 0x00;	// proximtiy
				}
				currentAdChannel = currentMotLeftChannel;
    4952:	80 91 35 02 	lds	r24, 0x0235
    4956:	80 93 33 02 	sts	0x0233, r24
				leftChannelPhase = leftMotorPhase;
    495a:	80 91 38 02 	lds	r24, 0x0238
    495e:	80 93 cc 02 	sts	0x02CC, r24
				adcSaveDataTo = SKIP_SAMPLE;				
    4962:	85 e0       	ldi	r24, 0x05	; 5
    4964:	80 93 c9 02 	sts	0x02C9, r24
				irCommState = IRCOMM_TX_PREPARE_TRANSMISSION;
    4968:	80 93 d7 04 	sts	0x04D7, r24
				irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;
    496c:	82 e0       	ldi	r24, 0x02	; 2
    496e:	80 93 1d 05 	sts	0x051D, r24
				if(irCommTxSensorGroup==0) {
    4972:	80 91 2d 05 	lds	r24, 0x052D
    4976:	88 23       	and	r24, r24
    4978:	19 f5       	brne	.+70     	; 0x49c0 <__vector_29+0x66a>
					irCommTxSensorGroup = 1;
    497a:	81 e0       	ldi	r24, 0x01	; 1
    497c:	80 93 2d 05 	sts	0x052D, r24
    4980:	80 91 ca 02 	lds	r24, 0x02CA
    4984:	46 cd       	rjmp	.-1396   	; 0x4412 <__vector_29+0xbc>
				if(hardwareRevision == HW_REV_3_0) {
					PORTJ &= 0xF0;	// ground
					PORTA = 0x00;	// proximity
				}

				if(hardwareRevision == HW_REV_3_0_1) {
    4986:	21 30       	cpi	r18, 0x01	; 1
    4988:	11 f0       	breq	.+4      	; 0x498e <__vector_29+0x638>
					PORTJ = 0xFF;	// ground
					PORTA = 0x00;	// proximity
				}

				if(hardwareRevision == HW_REV_3_1) {
    498a:	22 30       	cpi	r18, 0x02	; 2
    498c:	11 f7       	brne	.-60     	; 0x4952 <__vector_29+0x5fc>
					PORTJ = 0xFF;	// ground
    498e:	8f ef       	ldi	r24, 0xFF	; 255
    4990:	80 93 05 01 	sts	0x0105, r24
					PORTA = 0x00;	// proximtiy
    4994:	12 b8       	out	0x02, r1	; 2
    4996:	dd cf       	rjmp	.-70     	; 0x4952 <__vector_29+0x5fc>
		}
	} else if(irCommMode==IRCOMM_MODE_SENSORS_SAMPLING) {
		switch(adcSamplingState) {

			case 0:	// proximity
				currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
    4998:	80 91 34 02 	lds	r24, 0x0234
    499c:	86 95       	lsr	r24
    499e:	80 93 33 02 	sts	0x0233, r24
																// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
				if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
    49a2:	80 91 cb 02 	lds	r24, 0x02CB
    49a6:	88 23       	and	r24, r24
    49a8:	09 f0       	breq	.+2      	; 0x49ac <__vector_29+0x656>
    49aa:	bf c0       	rjmp	.+382    	; 0x4b2a <__vector_29+0x7d4>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    49ac:	81 e0       	ldi	r24, 0x01	; 1
    49ae:	80 93 c9 02 	sts	0x02C9, r24
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 1;
    49b2:	81 e0       	ldi	r24, 0x01	; 1
    49b4:	80 93 ca 02 	sts	0x02CA, r24
				break;
    49b8:	2c cd       	rjmp	.-1448   	; 0x4412 <__vector_29+0xbc>
					} else {
						cliffDetectedFlag = 0;
						//LED_RED_OFF;
					}
				} else {
					cliffDetectedFlag = 0;
    49ba:	10 92 7e 04 	sts	0x047E, r1
    49be:	27 ce       	rjmp	.-946    	; 0x460e <__vector_29+0x2b8>
				irCommState = IRCOMM_TX_PREPARE_TRANSMISSION;
				irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;
				if(irCommTxSensorGroup==0) {
					irCommTxSensorGroup = 1;
				} else {
					irCommTxSensorGroup = 0;
    49c0:	10 92 2d 05 	sts	0x052D, r1
    49c4:	80 91 ca 02 	lds	r24, 0x02CA
    49c8:	24 cd       	rjmp	.-1464   	; 0x4412 <__vector_29+0xbc>
					}
				}	
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    49ca:	83 e0       	ldi	r24, 0x03	; 3
    49cc:	80 93 c9 02 	sts	0x02C9, r24
    49d0:	b0 cf       	rjmp	.-160    	; 0x4932 <__vector_29+0x5dc>
					}
				}
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    49d2:	81 e0       	ldi	r24, 0x01	; 1
    49d4:	80 93 c9 02 	sts	0x02C9, r24
    49d8:	33 cf       	rjmp	.-410    	; 0x4840 <__vector_29+0x4ea>
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
    49da:	9b 30       	cpi	r25, 0x0B	; 11
    49dc:	09 f4       	brne	.+2      	; 0x49e0 <__vector_29+0x68a>
    49de:	0f c1       	rjmp	.+542    	; 0x4bfe <__vector_29+0x8a8>
    49e0:	9b 30       	cpi	r25, 0x0B	; 11
    49e2:	08 f4       	brcc	.+2      	; 0x49e6 <__vector_29+0x690>
    49e4:	e2 c0       	rjmp	.+452    	; 0x4baa <__vector_29+0x854>
    49e6:	9c 30       	cpi	r25, 0x0C	; 12
    49e8:	09 f0       	breq	.+2      	; 0x49ec <__vector_29+0x696>
    49ea:	11 cd       	rjmp	.-1502   	; 0x440e <__vector_29+0xb8>
				}
				irCommAdcRxState = 0;
				break;

			case 12:
				adcSaveDataTo = SKIP_SAMPLE;
    49ec:	85 e0       	ldi	r24, 0x05	; 5
    49ee:	80 93 c9 02 	sts	0x02C9, r24
    49f2:	80 91 ca 02 	lds	r24, 0x02CA
				break;
    49f6:	0d cd       	rjmp	.-1510   	; 0x4412 <__vector_29+0xbc>
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
    49f8:	99 23       	and	r25, r25
    49fa:	09 f4       	brne	.+2      	; 0x49fe <__vector_29+0x6a8>
    49fc:	11 c1       	rjmp	.+546    	; 0x4c20 <__vector_29+0x8ca>
    49fe:	91 30       	cpi	r25, 0x01	; 1
    4a00:	09 f0       	breq	.+2      	; 0x4a04 <__vector_29+0x6ae>
    4a02:	05 cd       	rjmp	.-1526   	; 0x440e <__vector_29+0xb8>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 1;
				break;

			case 1:
				currentAdChannel = currentProx+1;
    4a04:	80 91 34 02 	lds	r24, 0x0234
    4a08:	8f 5f       	subi	r24, 0xFF	; 255
    4a0a:	80 93 33 02 	sts	0x0233, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    4a0e:	86 e0       	ldi	r24, 0x06	; 6
    4a10:	80 93 c9 02 	sts	0x02C9, r24
				irCommAdcRxState = 2;
    4a14:	82 e0       	ldi	r24, 0x02	; 2
    4a16:	80 93 ff 04 	sts	0x04FF, r24
    4a1a:	80 91 ca 02 	lds	r24, 0x02CA
				break;
    4a1e:	f9 cc       	rjmp	.-1550   	; 0x4412 <__vector_29+0xbc>
					irCommMode = IRCOMM_MODE_RECEIVE;					
				}
				if(irCommEnabled==IRCOMM_MODE_TRANSMIT && currentProx==23) {
					irCommMode = IRCOMM_MODE_TRANSMIT;
					if(irCommTxByteEnqueued==1) {
						irCommAdcTxState = IRCOMM_TX_ADC_TURN_OFF_SENSORS;
    4a20:	80 93 1d 05 	sts	0x051D, r24
    4a24:	80 91 ca 02 	lds	r24, 0x02CA
    4a28:	f4 cc       	rjmp	.-1560   	; 0x4412 <__vector_29+0xbc>
				break;

			case IRCOMM_TX_ADC_TRANSMISSION_SEQ2:
				irCommTxDurationCycle++;
				if(irCommTxDurationCycle == irCommTxDuration) {
					irCommTxDurationCycle = 0;
    4a2a:	10 92 2b 05 	sts	0x052B, r1
					if(irCommTxPulseState == 0) {
    4a2e:	80 91 26 05 	lds	r24, 0x0526
    4a32:	88 23       	and	r24, r24
    4a34:	09 f0       	breq	.+2      	; 0x4a38 <__vector_29+0x6e2>
    4a36:	a7 c1       	rjmp	.+846    	; 0x4d86 <__vector_29+0xa30>
						irCommTxPulseState = 1;
    4a38:	81 e0       	ldi	r24, 0x01	; 1
    4a3a:	80 93 26 05 	sts	0x0526, r24
						//PORTA = 0xFF;
						//PORTA = 0x01;
						//PORTA = irCommTxSensorMask;
						if(irCommTxSensorGroup==0) {
    4a3e:	80 91 2d 05 	lds	r24, 0x052D
    4a42:	88 23       	and	r24, r24
    4a44:	09 f0       	breq	.+2      	; 0x4a48 <__vector_29+0x6f2>
    4a46:	e2 c1       	rjmp	.+964    	; 0x4e0c <__vector_29+0xab6>
							PORTA = 0xAA;
    4a48:	8a ea       	ldi	r24, 0xAA	; 170
    4a4a:	82 b9       	out	0x02, r24	; 2
						}
					} else {
						irCommTxPulseState = 0;
						PORTA = 0x00;
					}
					irCommTxSwitchCounter++;
    4a4c:	80 91 2a 05 	lds	r24, 0x052A
    4a50:	8f 5f       	subi	r24, 0xFF	; 255
    4a52:	80 93 2a 05 	sts	0x052A, r24
					if(irCommTxSwitchCounter == irCommTxSwitchCount) {
    4a56:	90 91 29 05 	lds	r25, 0x0529
    4a5a:	89 17       	cp	r24, r25
    4a5c:	09 f0       	breq	.+2      	; 0x4a60 <__vector_29+0x70a>
    4a5e:	dd ce       	rjmp	.-582    	; 0x481a <__vector_29+0x4c4>
						irCommTxBitCount++;
    4a60:	80 91 25 05 	lds	r24, 0x0525
    4a64:	8f 5f       	subi	r24, 0xFF	; 255
    4a66:	80 93 25 05 	sts	0x0525, r24
						if(irCommTxBitCount==12) {
    4a6a:	8c 30       	cpi	r24, 0x0C	; 12
    4a6c:	09 f4       	brne	.+2      	; 0x4a70 <__vector_29+0x71a>
    4a6e:	5b c2       	rjmp	.+1206   	; 0x4f26 <__vector_29+0xbd0>
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
							irCommInitReceiver();
							PORTA = 0x00;
							irCommTxLastTransmissionTime = getTime100MicroSec();
						} else {
							irCommState = IRCOMM_TX_COMPUTE_TIMINGS;
    4a70:	82 e0       	ldi	r24, 0x02	; 2
    4a72:	80 93 d7 04 	sts	0x04D7, r24
						}
						irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;
    4a76:	82 e0       	ldi	r24, 0x02	; 2
    4a78:	80 93 1d 05 	sts	0x051D, r24
						adcSaveDataTo = SKIP_SAMPLE;
    4a7c:	85 e0       	ldi	r24, 0x05	; 5
    4a7e:	80 93 c9 02 	sts	0x02C9, r24
    4a82:	80 91 ca 02 	lds	r24, 0x02CA
						break;
    4a86:	c5 cc       	rjmp	.-1654   	; 0x4412 <__vector_29+0xbc>
				break;

			case IRCOMM_TX_ADC_TRANSMISSION_SEQ1:
				irCommTxDurationCycle++;
				if(irCommTxDurationCycle == irCommTxDuration) {
					irCommTxDurationCycle = 0;
    4a88:	10 92 2b 05 	sts	0x052B, r1
					if(irCommTxPulseState == 0) {
    4a8c:	80 91 26 05 	lds	r24, 0x0526
    4a90:	88 23       	and	r24, r24
    4a92:	09 f0       	breq	.+2      	; 0x4a96 <__vector_29+0x740>
    4a94:	74 c1       	rjmp	.+744    	; 0x4d7e <__vector_29+0xa28>
						irCommTxPulseState = 1;
    4a96:	81 e0       	ldi	r24, 0x01	; 1
    4a98:	80 93 26 05 	sts	0x0526, r24
						//PORTA = 0xFF;
						//PORTA = 0x01;
						//PORTA = irCommTxSensorMask;
						if(irCommTxSensorGroup==0) {
    4a9c:	80 91 2d 05 	lds	r24, 0x052D
    4aa0:	88 23       	and	r24, r24
    4aa2:	09 f0       	breq	.+2      	; 0x4aa6 <__vector_29+0x750>
    4aa4:	b0 c1       	rjmp	.+864    	; 0x4e06 <__vector_29+0xab0>
							PORTA = 0xAA;
    4aa6:	8a ea       	ldi	r24, 0xAA	; 170
    4aa8:	82 b9       	out	0x02, r24	; 2
						}
					} else {
						irCommTxPulseState = 0;
						PORTA = 0x00;
					}
					irCommTxSwitchCounter++;
    4aaa:	80 91 2a 05 	lds	r24, 0x052A
    4aae:	8f 5f       	subi	r24, 0xFF	; 255
    4ab0:	80 93 2a 05 	sts	0x052A, r24
					if(irCommTxSwitchCounter == irCommTxSwitchCount) {
    4ab4:	90 91 29 05 	lds	r25, 0x0529
    4ab8:	89 17       	cp	r24, r25
    4aba:	09 f0       	breq	.+2      	; 0x4abe <__vector_29+0x768>
    4abc:	27 cf       	rjmp	.-434    	; 0x490c <__vector_29+0x5b6>
    4abe:	d0 cf       	rjmp	.-96     	; 0x4a60 <__vector_29+0x70a>
				}
				adcSamplingState = 3;
				break;

			case 3:	// left motor
				currentAdChannel = currentMotLeftChannel;
    4ac0:	80 91 35 02 	lds	r24, 0x0235
    4ac4:	80 93 33 02 	sts	0x0233, r24
				leftChannelPhase = leftMotorPhase;
    4ac8:	80 91 38 02 	lds	r24, 0x0238
    4acc:	80 93 cc 02 	sts	0x02CC, r24
				if(rightChannelPhase == ACTIVE_PHASE) {
    4ad0:	80 91 cb 02 	lds	r24, 0x02CB
    4ad4:	88 23       	and	r24, r24
    4ad6:	e9 f5       	brne	.+122    	; 0x4b52 <__vector_29+0x7fc>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    4ad8:	81 e0       	ldi	r24, 0x01	; 1
    4ada:	80 93 c9 02 	sts	0x02C9, r24
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 4;
    4ade:	84 e0       	ldi	r24, 0x04	; 4
    4ae0:	80 93 ca 02 	sts	0x02CA, r24
				break;
    4ae4:	96 cc       	rjmp	.-1748   	; 0x4412 <__vector_29+0xbc>
					}
				}
				break;

			case 2:	// right motor
				currentAdChannel = currentMotRightChannel;
    4ae6:	80 91 36 02 	lds	r24, 0x0236
    4aea:	80 93 33 02 	sts	0x0233, r24
				rightChannelPhase = rightMotorPhase;
    4aee:	80 91 37 02 	lds	r24, 0x0237
    4af2:	80 93 cb 02 	sts	0x02CB, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    4af6:	80 91 cc 02 	lds	r24, 0x02CC
    4afa:	88 23       	and	r24, r24
    4afc:	e9 f4       	brne	.+58     	; 0x4b38 <__vector_29+0x7e2>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    4afe:	83 e0       	ldi	r24, 0x03	; 3
    4b00:	80 93 c9 02 	sts	0x02C9, r24
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 3;
    4b04:	83 e0       	ldi	r24, 0x03	; 3
    4b06:	80 93 ca 02 	sts	0x02CA, r24
				break;
    4b0a:	83 cc       	rjmp	.-1786   	; 0x4412 <__vector_29+0xbc>
			}
			currentProx++;
			break;

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    4b0c:	20 91 cf 02 	lds	r18, 0x02CF
    4b10:	22 30       	cpi	r18, 0x02	; 2
    4b12:	09 f0       	breq	.+2      	; 0x4b16 <__vector_29+0x7c0>
    4b14:	f9 cc       	rjmp	.-1550   	; 0x4508 <__vector_29+0x1b2>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
    4b16:	90 93 ce 02 	sts	0x02CE, r25
    4b1a:	80 93 cd 02 	sts	0x02CD, r24
				measBattery = 0;
    4b1e:	10 92 cf 02 	sts	0x02CF, r1
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
    4b22:	46 98       	cbi	0x08, 6	; 8
    4b24:	2e e0       	ldi	r18, 0x0E	; 14
    4b26:	30 e0       	ldi	r19, 0x00	; 0
    4b28:	f8 cc       	rjmp	.-1552   	; 0x451a <__vector_29+0x1c4>
			case 0:	// proximity
				currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
																// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
				if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    4b2a:	81 30       	cpi	r24, 0x01	; 1
    4b2c:	09 f4       	brne	.+2      	; 0x4b30 <__vector_29+0x7da>
    4b2e:	48 c1       	rjmp	.+656    	; 0x4dc0 <__vector_29+0xa6a>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4b30:	85 e0       	ldi	r24, 0x05	; 5
    4b32:	80 93 c9 02 	sts	0x02C9, r24
    4b36:	3d cf       	rjmp	.-390    	; 0x49b2 <__vector_29+0x65c>
			case 2:	// right motor
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    4b38:	81 30       	cpi	r24, 0x01	; 1
    4b3a:	09 f4       	brne	.+2      	; 0x4b3e <__vector_29+0x7e8>
    4b3c:	3d c1       	rjmp	.+634    	; 0x4db8 <__vector_29+0xa62>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4b3e:	85 e0       	ldi	r24, 0x05	; 5
    4b40:	80 93 c9 02 	sts	0x02C9, r24
    4b44:	df cf       	rjmp	.-66     	; 0x4b04 <__vector_29+0x7ae>
			case 4:	// right motor
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    4b46:	91 30       	cpi	r25, 0x01	; 1
    4b48:	09 f0       	breq	.+2      	; 0x4b4c <__vector_29+0x7f6>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4b4a:	85 e0       	ldi	r24, 0x05	; 5
    4b4c:	80 93 c9 02 	sts	0x02C9, r24
    4b50:	93 ce       	rjmp	.-730    	; 0x4878 <__vector_29+0x522>
			case 3:	// left motor
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    4b52:	81 30       	cpi	r24, 0x01	; 1
    4b54:	09 f4       	brne	.+2      	; 0x4b58 <__vector_29+0x802>
    4b56:	38 c1       	rjmp	.+624    	; 0x4dc8 <__vector_29+0xa72>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4b58:	85 e0       	ldi	r24, 0x05	; 5
    4b5a:	80 93 c9 02 	sts	0x02C9, r24
    4b5e:	bf cf       	rjmp	.-130    	; 0x4ade <__vector_29+0x788>
					proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
				//} else {	// ground
				//	proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx];
				//}
				if(proximityResult[currentProx>>1] < 0) {
					proximityResult[currentProx>>1] = 0;
    4b60:	11 82       	std	Z+1, r1	; 0x01
    4b62:	10 82       	st	Z, r1
    4b64:	80 e0       	ldi	r24, 0x00	; 0
    4b66:	90 e0       	ldi	r25, 0x00	; 0
    4b68:	05 cd       	rjmp	.-1526   	; 0x4574 <__vector_29+0x21e>
					
					if(proximityResult[currentProx>>1] < PHASE1) {

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
    4b6a:	ac 01       	movw	r20, r24
    4b6c:	44 5c       	subi	r20, 0xC4	; 196
    4b6e:	5f 4f       	sbci	r21, 0xFF	; 255
    4b70:	55 95       	asr	r21
    4b72:	47 95       	ror	r20
    4b74:	48 37       	cpi	r20, 0x78	; 120
    4b76:	51 05       	cpc	r21, r1
    4b78:	0c f0       	brlt	.+2      	; 0x4b7c <__vector_29+0x826>
    4b7a:	e8 c0       	rjmp	.+464    	; 0x4d4c <__vector_29+0x9f6>
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;
    4b7c:	2f 52       	subi	r18, 0x2F	; 47
    4b7e:	3d 4f       	sbci	r19, 0xFD	; 253
    4b80:	cc 97       	sbiw	r24, 0x3c	; 60
    4b82:	95 95       	asr	r25
    4b84:	87 95       	ror	r24
    4b86:	cc 96       	adiw	r24, 0x3c	; 60
    4b88:	f9 01       	movw	r30, r18
    4b8a:	91 83       	std	Z+1, r25	; 0x01
    4b8c:	80 83       	st	Z, r24
    4b8e:	fe cc       	rjmp	.-1540   	; 0x458c <__vector_29+0x236>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 6;
				break;

			case 6:
				currentAdChannel = currentProx+1;
    4b90:	80 91 34 02 	lds	r24, 0x0234
    4b94:	8f 5f       	subi	r24, 0xFF	; 255
    4b96:	80 93 33 02 	sts	0x0233, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    4b9a:	90 93 c9 02 	sts	0x02C9, r25
				irCommAdcRxState = 7;
    4b9e:	87 e0       	ldi	r24, 0x07	; 7
    4ba0:	80 93 ff 04 	sts	0x04FF, r24
    4ba4:	80 91 ca 02 	lds	r24, 0x02CA
				break;
    4ba8:	34 cc       	rjmp	.-1944   	; 0x4412 <__vector_29+0xbc>
				}
				irCommAdcRxState = 10;
				break;

			case 10:
				currentAdChannel = currentMotRightChannel;
    4baa:	80 91 36 02 	lds	r24, 0x0236
    4bae:	80 93 33 02 	sts	0x0233, r24
				rightChannelPhase = rightMotorPhase;
    4bb2:	80 91 37 02 	lds	r24, 0x0237
    4bb6:	80 93 cb 02 	sts	0x02CB, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    4bba:	80 91 cc 02 	lds	r24, 0x02CC
    4bbe:	88 23       	and	r24, r24
    4bc0:	09 f0       	breq	.+2      	; 0x4bc4 <__vector_29+0x86e>
    4bc2:	e5 c0       	rjmp	.+458    	; 0x4d8e <__vector_29+0xa38>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    4bc4:	83 e0       	ldi	r24, 0x03	; 3
    4bc6:	80 93 c9 02 	sts	0x02C9, r24
					}
				} else {
					irCommRxWindowSamples++;
				}
				*/
				if(irCommRxBitSkipped < 254) {	// safety check
    4bca:	90 91 19 05 	lds	r25, 0x0519
    4bce:	9e 3f       	cpi	r25, 0xFE	; 254
    4bd0:	18 f4       	brcc	.+6      	; 0x4bd8 <__vector_29+0x882>
					irCommRxBitSkipped++;
    4bd2:	9f 5f       	subi	r25, 0xFF	; 255
    4bd4:	90 93 19 05 	sts	0x0519, r25
				}
				irCommRxWindowSamples++;
    4bd8:	80 91 00 05 	lds	r24, 0x0500
    4bdc:	8f 5f       	subi	r24, 0xFF	; 255
    4bde:	80 93 00 05 	sts	0x0500, r24
				if(irCommState==IRCOMM_RX_SYNC_SIGNAL) {
    4be2:	20 91 d7 04 	lds	r18, 0x04D7
    4be6:	24 30       	cpi	r18, 0x04	; 4
    4be8:	09 f4       	brne	.+2      	; 0x4bec <__vector_29+0x896>
    4bea:	02 c1       	rjmp	.+516    	; 0x4df0 <__vector_29+0xa9a>
					if(irCommRxBitSkipped >= irCommShiftCount) {
						irCommState = IRCOMM_RX_WAITING_BIT;
					}
				}

				if(irCommRxWindowSamples == IRCOMM_SAMPLING_WINDOW) {					
    4bec:	84 31       	cpi	r24, 0x14	; 20
    4bee:	09 f4       	brne	.+2      	; 0x4bf2 <__vector_29+0x89c>
    4bf0:	21 c1       	rjmp	.+578    	; 0x4e34 <__vector_29+0xade>
				} else {
					irCommTickCounter = 0;
					updateBlueLed(0);
				}
				*/
				irCommAdcRxState = 11;
    4bf2:	8b e0       	ldi	r24, 0x0B	; 11
    4bf4:	80 93 ff 04 	sts	0x04FF, r24
    4bf8:	80 91 ca 02 	lds	r24, 0x02CA
				break;
    4bfc:	0a cc       	rjmp	.-2028   	; 0x4412 <__vector_29+0xbc>

			case 11:
				currentAdChannel = 0;	// prox0
    4bfe:	10 92 33 02 	sts	0x0233, r1
				if(rightChannelPhase == ACTIVE_PHASE) {
    4c02:	90 91 cb 02 	lds	r25, 0x02CB
    4c06:	99 23       	and	r25, r25
    4c08:	21 f0       	breq	.+8      	; 0x4c12 <__vector_29+0x8bc>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    4c0a:	91 30       	cpi	r25, 0x01	; 1
    4c0c:	09 f4       	brne	.+2      	; 0x4c10 <__vector_29+0x8ba>
    4c0e:	0a c1       	rjmp	.+532    	; 0x4e24 <__vector_29+0xace>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4c10:	85 e0       	ldi	r24, 0x05	; 5
    4c12:	80 93 c9 02 	sts	0x02C9, r24
				}
				irCommAdcRxState = 0;
    4c16:	10 92 ff 04 	sts	0x04FF, r1
    4c1a:	80 91 ca 02 	lds	r24, 0x02CA
				break;
    4c1e:	f9 cb       	rjmp	.-2062   	; 0x4412 <__vector_29+0xbc>

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
			case 0:				
				currentProx = 0;
    4c20:	10 92 34 02 	sts	0x0234, r1
				currentAdChannel = currentProx+1;				
    4c24:	80 93 33 02 	sts	0x0233, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    4c28:	96 e0       	ldi	r25, 0x06	; 6
    4c2a:	90 93 c9 02 	sts	0x02C9, r25
				irCommAdcRxState = 1;
    4c2e:	80 93 ff 04 	sts	0x04FF, r24
    4c32:	80 91 ca 02 	lds	r24, 0x02CA
				break;
    4c36:	ed cb       	rjmp	.-2086   	; 0x4412 <__vector_29+0xbc>
				}
				irCommAdcRxState = 9;
				break;

			case 9:
				currentAdChannel = currentMotLeftChannel;
    4c38:	90 91 35 02 	lds	r25, 0x0235
    4c3c:	90 93 33 02 	sts	0x0233, r25
				leftChannelPhase = leftMotorPhase;
    4c40:	90 91 38 02 	lds	r25, 0x0238
    4c44:	90 93 cc 02 	sts	0x02CC, r25
				if(rightChannelPhase == ACTIVE_PHASE) {
    4c48:	90 91 cb 02 	lds	r25, 0x02CB
    4c4c:	99 23       	and	r25, r25
    4c4e:	21 f0       	breq	.+8      	; 0x4c58 <__vector_29+0x902>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    4c50:	91 30       	cpi	r25, 0x01	; 1
    4c52:	09 f4       	brne	.+2      	; 0x4c56 <__vector_29+0x900>
    4c54:	eb c0       	rjmp	.+470    	; 0x4e2c <__vector_29+0xad6>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4c56:	85 e0       	ldi	r24, 0x05	; 5
    4c58:	80 93 c9 02 	sts	0x02C9, r24
				}
				irCommAdcRxState = 10;
    4c5c:	8a e0       	ldi	r24, 0x0A	; 10
    4c5e:	80 93 ff 04 	sts	0x04FF, r24
    4c62:	80 91 ca 02 	lds	r24, 0x02CA
				break;
    4c66:	d5 cb       	rjmp	.-2134   	; 0x4412 <__vector_29+0xbc>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 2;
				break;

			case 2:
				currentAdChannel = currentProx+1;
    4c68:	80 91 34 02 	lds	r24, 0x0234
    4c6c:	8f 5f       	subi	r24, 0xFF	; 255
    4c6e:	80 93 33 02 	sts	0x0233, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    4c72:	86 e0       	ldi	r24, 0x06	; 6
    4c74:	80 93 c9 02 	sts	0x02C9, r24
				irCommAdcRxState = 3;
    4c78:	83 e0       	ldi	r24, 0x03	; 3
    4c7a:	80 93 ff 04 	sts	0x04FF, r24
    4c7e:	80 91 ca 02 	lds	r24, 0x02CA
				break;
    4c82:	c7 cb       	rjmp	.-2162   	; 0x4412 <__vector_29+0xbc>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 7;
				break;

			case 7:
				currentAdChannel = currentMotLeftChannel;
    4c84:	80 91 35 02 	lds	r24, 0x0235
    4c88:	80 93 33 02 	sts	0x0233, r24
				leftChannelPhase = leftMotorPhase;
    4c8c:	80 91 38 02 	lds	r24, 0x0238
    4c90:	80 93 cc 02 	sts	0x02CC, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    4c94:	86 e0       	ldi	r24, 0x06	; 6
    4c96:	80 93 c9 02 	sts	0x02C9, r24
				irCommAdcRxState = 8;
    4c9a:	88 e0       	ldi	r24, 0x08	; 8
    4c9c:	80 93 ff 04 	sts	0x04FF, r24
    4ca0:	80 91 ca 02 	lds	r24, 0x02CA
				break;
    4ca4:	b6 cb       	rjmp	.-2196   	; 0x4412 <__vector_29+0xbc>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 3;
				break;

			case 3:
				currentAdChannel = currentProx+1;
    4ca6:	80 91 34 02 	lds	r24, 0x0234
    4caa:	8f 5f       	subi	r24, 0xFF	; 255
    4cac:	80 93 33 02 	sts	0x0233, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    4cb0:	86 e0       	ldi	r24, 0x06	; 6
    4cb2:	80 93 c9 02 	sts	0x02C9, r24
				irCommAdcRxState = 4;
    4cb6:	84 e0       	ldi	r24, 0x04	; 4
    4cb8:	80 93 ff 04 	sts	0x04FF, r24
    4cbc:	80 91 ca 02 	lds	r24, 0x02CA
				break;
    4cc0:	a8 cb       	rjmp	.-2224   	; 0x4412 <__vector_29+0xbc>

			case 4:
				currentAdChannel = currentProx+1;
    4cc2:	80 91 34 02 	lds	r24, 0x0234
    4cc6:	8f 5f       	subi	r24, 0xFF	; 255
    4cc8:	80 93 33 02 	sts	0x0233, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    4ccc:	86 e0       	ldi	r24, 0x06	; 6
    4cce:	80 93 c9 02 	sts	0x02C9, r24
				irCommAdcRxState = 5;
    4cd2:	85 e0       	ldi	r24, 0x05	; 5
    4cd4:	80 93 ff 04 	sts	0x04FF, r24
    4cd8:	80 91 ca 02 	lds	r24, 0x02CA
				break;
    4cdc:	9a cb       	rjmp	.-2252   	; 0x4412 <__vector_29+0xbc>
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 0;

				if(currentProx==14 && measBattery==1) {
    4cde:	80 91 cf 02 	lds	r24, 0x02CF
    4ce2:	81 30       	cpi	r24, 0x01	; 1
    4ce4:	09 f4       	brne	.+2      	; 0x4ce8 <__vector_29+0x992>
    4ce6:	95 c0       	rjmp	.+298    	; 0x4e12 <__vector_29+0xabc>
    4ce8:	80 e0       	ldi	r24, 0x00	; 0
    4cea:	93 cb       	rjmp	.-2266   	; 0x4412 <__vector_29+0xbc>
			case 1:	// left motor
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				adcSaveDataTo = SAVE_TO_PROX;
				adcSamplingState = 2;
				if(irCommEnabled==IRCOMM_MODE_RECEIVE && currentProx==23) {					
    4cec:	80 91 34 02 	lds	r24, 0x0234
    4cf0:	87 31       	cpi	r24, 0x17	; 23
    4cf2:	09 f4       	brne	.+2      	; 0x4cf6 <__vector_29+0x9a0>
    4cf4:	f8 c0       	rjmp	.+496    	; 0x4ee6 <__vector_29+0xb90>
    4cf6:	82 e0       	ldi	r24, 0x02	; 2
    4cf8:	8c cb       	rjmp	.-2280   	; 0x4412 <__vector_29+0xbc>
				if(currentProx & 0x01) {
					if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
											// PORTA for proximity sensors, PORTJ for ground sensors
						PORTA = (1 << (currentProx>>1));	// pulse on
					} else {
						if(hardwareRevision == HW_REV_3_0) {
    4cfa:	20 91 5f 04 	lds	r18, 0x045F
    4cfe:	22 23       	and	r18, r18
    4d00:	79 f4       	brne	.+30     	; 0x4d20 <__vector_29+0x9ca>
							PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
    4d02:	40 97       	sbiw	r24, 0x10	; 16
    4d04:	95 95       	asr	r25
    4d06:	87 95       	ror	r24
    4d08:	21 e0       	ldi	r18, 0x01	; 1
    4d0a:	30 e0       	ldi	r19, 0x00	; 0
    4d0c:	02 c0       	rjmp	.+4      	; 0x4d12 <__vector_29+0x9bc>
    4d0e:	22 0f       	add	r18, r18
    4d10:	33 1f       	adc	r19, r19
    4d12:	8a 95       	dec	r24
    4d14:	e2 f7       	brpl	.-8      	; 0x4d0e <__vector_29+0x9b8>
    4d16:	20 93 05 01 	sts	0x0105, r18
    4d1a:	80 91 ca 02 	lds	r24, 0x02CA
    4d1e:	79 cb       	rjmp	.-2318   	; 0x4412 <__vector_29+0xbc>
						}

						if(hardwareRevision == HW_REV_3_0_1) {
    4d20:	21 30       	cpi	r18, 0x01	; 1
    4d22:	19 f0       	breq	.+6      	; 0x4d2a <__vector_29+0x9d4>
							PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
						}

						if(hardwareRevision == HW_REV_3_1) {
    4d24:	22 30       	cpi	r18, 0x02	; 2
    4d26:	09 f0       	breq	.+2      	; 0x4d2a <__vector_29+0x9d4>
    4d28:	72 cb       	rjmp	.-2332   	; 0x440e <__vector_29+0xb8>
							PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
    4d2a:	40 91 05 01 	lds	r20, 0x0105
    4d2e:	40 97       	sbiw	r24, 0x10	; 16
    4d30:	95 95       	asr	r25
    4d32:	87 95       	ror	r24
    4d34:	21 e0       	ldi	r18, 0x01	; 1
    4d36:	30 e0       	ldi	r19, 0x00	; 0
    4d38:	02 c0       	rjmp	.+4      	; 0x4d3e <__vector_29+0x9e8>
    4d3a:	22 0f       	add	r18, r18
    4d3c:	33 1f       	adc	r19, r19
    4d3e:	8a 95       	dec	r24
    4d40:	e2 f7       	brpl	.-8      	; 0x4d3a <__vector_29+0x9e4>
    4d42:	20 95       	com	r18
    4d44:	24 23       	and	r18, r20
    4d46:	20 93 05 01 	sts	0x0105, r18
    4d4a:	61 cb       	rjmp	.-2366   	; 0x440e <__vector_29+0xb8>

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;

					} else if(((proximityResult[currentProx>>1]+300)>>2) < PHASE3) {
    4d4c:	ac 01       	movw	r20, r24
    4d4e:	44 5d       	subi	r20, 0xD4	; 212
    4d50:	5e 4f       	sbci	r21, 0xFE	; 254
    4d52:	55 95       	asr	r21
    4d54:	47 95       	ror	r20
    4d56:	55 95       	asr	r21
    4d58:	47 95       	ror	r20
    4d5a:	44 3b       	cpi	r20, 0xB4	; 180
    4d5c:	51 05       	cpc	r21, r1
    4d5e:	c4 f5       	brge	.+112    	; 0x4dd0 <__vector_29+0xa7a>

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-180)>>2) + PHASE2;
    4d60:	2f 52       	subi	r18, 0x2F	; 47
    4d62:	3d 4f       	sbci	r19, 0xFD	; 253
    4d64:	84 5b       	subi	r24, 0xB4	; 180
    4d66:	90 40       	sbci	r25, 0x00	; 0
    4d68:	95 95       	asr	r25
    4d6a:	87 95       	ror	r24
    4d6c:	95 95       	asr	r25
    4d6e:	87 95       	ror	r24
    4d70:	88 58       	subi	r24, 0x88	; 136
    4d72:	9f 4f       	sbci	r25, 0xFF	; 255
    4d74:	d9 01       	movw	r26, r18
    4d76:	11 96       	adiw	r26, 0x01	; 1
    4d78:	9c 93       	st	X, r25
    4d7a:	8e 93       	st	-X, r24
    4d7c:	07 cc       	rjmp	.-2034   	; 0x458c <__vector_29+0x236>
							PORTA = 0xAA;
						} else {
							PORTA = 0x55;
						}
					} else {
						irCommTxPulseState = 0;
    4d7e:	10 92 26 05 	sts	0x0526, r1
						PORTA = 0x00;
    4d82:	12 b8       	out	0x02, r1	; 2
    4d84:	92 ce       	rjmp	.-732    	; 0x4aaa <__vector_29+0x754>
							PORTA = 0xAA;
						} else {
							PORTA = 0x55;
						}
					} else {
						irCommTxPulseState = 0;
    4d86:	10 92 26 05 	sts	0x0526, r1
						PORTA = 0x00;
    4d8a:	12 b8       	out	0x02, r1	; 2
    4d8c:	5f ce       	rjmp	.-834    	; 0x4a4c <__vector_29+0x6f6>
			case 10:
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    4d8e:	81 30       	cpi	r24, 0x01	; 1
    4d90:	09 f4       	brne	.+2      	; 0x4d94 <__vector_29+0xa3e>
    4d92:	a5 c0       	rjmp	.+330    	; 0x4ede <__vector_29+0xb88>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4d94:	85 e0       	ldi	r24, 0x05	; 5
    4d96:	80 93 c9 02 	sts	0x02C9, r24
    4d9a:	17 cf       	rjmp	.-466    	; 0x4bca <__vector_29+0x874>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    4d9c:	84 e0       	ldi	r24, 0x04	; 4
    4d9e:	80 93 c9 02 	sts	0x02C9, r24
    4da2:	c7 cd       	rjmp	.-1138   	; 0x4932 <__vector_29+0x5dc>
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    4da4:	82 e0       	ldi	r24, 0x02	; 2
    4da6:	80 93 c9 02 	sts	0x02C9, r24
    4daa:	4a cd       	rjmp	.-1388   	; 0x4840 <__vector_29+0x4ea>
			case 8:
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    4dac:	81 30       	cpi	r24, 0x01	; 1
    4dae:	b1 f1       	breq	.+108    	; 0x4e1c <__vector_29+0xac6>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4db0:	85 e0       	ldi	r24, 0x05	; 5
    4db2:	80 93 c9 02 	sts	0x02C9, r24
    4db6:	96 cd       	rjmp	.-1236   	; 0x48e4 <__vector_29+0x58e>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    4db8:	84 e0       	ldi	r24, 0x04	; 4
    4dba:	80 93 c9 02 	sts	0x02C9, r24
    4dbe:	a2 ce       	rjmp	.-700    	; 0x4b04 <__vector_29+0x7ae>
				currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
																// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
				if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    4dc0:	82 e0       	ldi	r24, 0x02	; 2
    4dc2:	80 93 c9 02 	sts	0x02C9, r24
    4dc6:	f5 cd       	rjmp	.-1046   	; 0x49b2 <__vector_29+0x65c>
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    4dc8:	82 e0       	ldi	r24, 0x02	; 2
    4dca:	80 93 c9 02 	sts	0x02C9, r24
    4dce:	87 ce       	rjmp	.-754    	; 0x4ade <__vector_29+0x788>

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-180)>>2) + PHASE2;

					} else {

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-420)>>3) + PHASE3;
    4dd0:	2f 52       	subi	r18, 0x2F	; 47
    4dd2:	3d 4f       	sbci	r19, 0xFD	; 253
    4dd4:	84 5a       	subi	r24, 0xA4	; 164
    4dd6:	91 40       	sbci	r25, 0x01	; 1
    4dd8:	95 95       	asr	r25
    4dda:	87 95       	ror	r24
    4ddc:	95 95       	asr	r25
    4dde:	87 95       	ror	r24
    4de0:	95 95       	asr	r25
    4de2:	87 95       	ror	r24
    4de4:	8c 54       	subi	r24, 0x4C	; 76
    4de6:	9f 4f       	sbci	r25, 0xFF	; 255
    4de8:	f9 01       	movw	r30, r18
    4dea:	91 83       	std	Z+1, r25	; 0x01
    4dec:	80 83       	st	Z, r24
    4dee:	ce cb       	rjmp	.-2148   	; 0x458c <__vector_29+0x236>
				if(irCommRxBitSkipped < 254) {	// safety check
					irCommRxBitSkipped++;
				}
				irCommRxWindowSamples++;
				if(irCommState==IRCOMM_RX_SYNC_SIGNAL) {
					irCommRxWindowSamples = 0;
    4df0:	10 92 00 05 	sts	0x0500, r1
					if(irCommRxBitSkipped >= irCommShiftCount) {
    4df4:	80 91 0a 05 	lds	r24, 0x050A
    4df8:	98 17       	cp	r25, r24
    4dfa:	08 f4       	brcc	.+2      	; 0x4dfe <__vector_29+0xaa8>
    4dfc:	fa ce       	rjmp	.-524    	; 0x4bf2 <__vector_29+0x89c>
						irCommState = IRCOMM_RX_WAITING_BIT;
    4dfe:	85 e0       	ldi	r24, 0x05	; 5
    4e00:	80 93 d7 04 	sts	0x04D7, r24
    4e04:	f6 ce       	rjmp	.-532    	; 0x4bf2 <__vector_29+0x89c>
						//PORTA = 0x01;
						//PORTA = irCommTxSensorMask;
						if(irCommTxSensorGroup==0) {
							PORTA = 0xAA;
						} else {
							PORTA = 0x55;
    4e06:	85 e5       	ldi	r24, 0x55	; 85
    4e08:	82 b9       	out	0x02, r24	; 2
    4e0a:	4f ce       	rjmp	.-866    	; 0x4aaa <__vector_29+0x754>
						//PORTA = 0x01;
						//PORTA = irCommTxSensorMask;
						if(irCommTxSensorGroup==0) {
							PORTA = 0xAA;
						} else {
							PORTA = 0x55;
    4e0c:	85 e5       	ldi	r24, 0x55	; 85
    4e0e:	82 b9       	out	0x02, r24	; 2
    4e10:	1d ce       	rjmp	.-966    	; 0x4a4c <__vector_29+0x6f6>
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 0;

				if(currentProx==14 && measBattery==1) {
					measBattery=2;
    4e12:	82 e0       	ldi	r24, 0x02	; 2
    4e14:	80 93 cf 02 	sts	0x02CF, r24
					SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
    4e18:	46 9a       	sbi	0x08, 6	; 8
    4e1a:	35 cd       	rjmp	.-1430   	; 0x4886 <__vector_29+0x530>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    4e1c:	84 e0       	ldi	r24, 0x04	; 4
    4e1e:	80 93 c9 02 	sts	0x02C9, r24
    4e22:	60 cd       	rjmp	.-1344   	; 0x48e4 <__vector_29+0x58e>
			case 11:
				currentAdChannel = 0;	// prox0
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    4e24:	82 e0       	ldi	r24, 0x02	; 2
    4e26:	80 93 c9 02 	sts	0x02C9, r24
    4e2a:	f5 ce       	rjmp	.-534    	; 0x4c16 <__vector_29+0x8c0>
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    4e2c:	82 e0       	ldi	r24, 0x02	; 2
    4e2e:	80 93 c9 02 	sts	0x02C9, r24
    4e32:	14 cf       	rjmp	.-472    	; 0x4c5c <__vector_29+0x906>
						irCommState = IRCOMM_RX_WAITING_BIT;
					}
				}

				if(irCommRxWindowSamples == IRCOMM_SAMPLING_WINDOW) {					
					irCommRxWindowSamples = 0;
    4e34:	10 92 00 05 	sts	0x0500, r1
					irCommTempPointer = irCommProxValuesCurr;
    4e38:	80 91 46 08 	lds	r24, 0x0846
    4e3c:	90 91 47 08 	lds	r25, 0x0847
					irCommProxValuesCurr = irCommProxValuesAdc;
    4e40:	20 91 64 08 	lds	r18, 0x0864
    4e44:	30 91 65 08 	lds	r19, 0x0865
    4e48:	30 93 47 08 	sts	0x0847, r19
    4e4c:	20 93 46 08 	sts	0x0846, r18
					irCommProxValuesAdc = irCommTempPointer;
    4e50:	90 93 65 08 	sts	0x0865, r25
    4e54:	80 93 64 08 	sts	0x0864, r24
					irCommTempPointer = irCommMaxSensorValueCurr;
    4e58:	50 91 43 05 	lds	r21, 0x0543
    4e5c:	40 91 44 05 	lds	r20, 0x0544
					irCommMaxSensorValueCurr = irCommMaxSensorValueAdc;
    4e60:	80 91 32 0b 	lds	r24, 0x0B32
    4e64:	90 91 33 0b 	lds	r25, 0x0B33
    4e68:	90 93 44 05 	sts	0x0544, r25
    4e6c:	80 93 43 05 	sts	0x0543, r24
					irCommMaxSensorValueAdc = irCommTempPointer;
    4e70:	50 93 32 0b 	sts	0x0B32, r21
    4e74:	40 93 33 0b 	sts	0x0B33, r20
					irCommTempPointer = irCommMinSensorValueCurr;
    4e78:	80 91 2f 05 	lds	r24, 0x052F
    4e7c:	90 91 30 05 	lds	r25, 0x0530
    4e80:	90 93 74 0b 	sts	0x0B74, r25
    4e84:	80 93 73 0b 	sts	0x0B73, r24
					irCommMinSensorValueCurr = irCommMinSensorValueAdc;
    4e88:	20 91 c0 05 	lds	r18, 0x05C0
    4e8c:	30 91 c1 05 	lds	r19, 0x05C1
    4e90:	30 93 30 05 	sts	0x0530, r19
    4e94:	20 93 2f 05 	sts	0x052F, r18
					irCommMinSensorValueAdc = irCommTempPointer;
    4e98:	90 93 c1 05 	sts	0x05C1, r25
    4e9c:	80 93 c0 05 	sts	0x05C0, r24
					memset(irCommMaxSensorValueAdc, 0x00, 16);
    4ea0:	e5 2f       	mov	r30, r21
    4ea2:	f4 2f       	mov	r31, r20
    4ea4:	80 e1       	ldi	r24, 0x10	; 16
    4ea6:	df 01       	movw	r26, r30
    4ea8:	1d 92       	st	X+, r1
    4eaa:	8a 95       	dec	r24
    4eac:	e9 f7       	brne	.-6      	; 0x4ea8 <__vector_29+0xb52>
					memset(irCommMinSensorValueAdc, 0xFF, 16);
    4eae:	80 91 c0 05 	lds	r24, 0x05C0
    4eb2:	90 91 c1 05 	lds	r25, 0x05C1
    4eb6:	6f ef       	ldi	r22, 0xFF	; 255
    4eb8:	70 e0       	ldi	r23, 0x00	; 0
    4eba:	40 e1       	ldi	r20, 0x10	; 16
    4ebc:	50 e0       	ldi	r21, 0x00	; 0
    4ebe:	0e 94 6c 54 	call	0xa8d8	; 0xa8d8 <memset>
					if(irCommState == IRCOMM_RX_IDLE_STATE) {
    4ec2:	80 91 d7 04 	lds	r24, 0x04D7
    4ec6:	81 30       	cpi	r24, 0x01	; 1
    4ec8:	09 f4       	brne	.+2      	; 0x4ecc <__vector_29+0xb76>
    4eca:	44 c0       	rjmp	.+136    	; 0x4f54 <__vector_29+0xbfe>
						irCommRxBitSkipped = 0;
					}
					//if(irCommState == IRCOMM_RX_SYNC_SIGNAL) {
					//	irCommSecondBitSkipped = 1;	// the second start bit is just sampled, skip it and sync with the received signal						
					//}
					if(irCommState == IRCOMM_RX_WAITING_BIT) {
    4ecc:	80 91 d7 04 	lds	r24, 0x04D7
    4ed0:	85 30       	cpi	r24, 0x05	; 5
    4ed2:	09 f0       	breq	.+2      	; 0x4ed6 <__vector_29+0xb80>
    4ed4:	8e ce       	rjmp	.-740    	; 0x4bf2 <__vector_29+0x89c>
						irCommState = IRCOMM_RX_READ_BIT;
    4ed6:	86 e0       	ldi	r24, 0x06	; 6
    4ed8:	80 93 d7 04 	sts	0x04D7, r24
    4edc:	8a ce       	rjmp	.-748    	; 0x4bf2 <__vector_29+0x89c>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    4ede:	84 e0       	ldi	r24, 0x04	; 4
    4ee0:	80 93 c9 02 	sts	0x02C9, r24
    4ee4:	72 ce       	rjmp	.-796    	; 0x4bca <__vector_29+0x874>
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				adcSaveDataTo = SAVE_TO_PROX;
				adcSamplingState = 2;
				if(irCommEnabled==IRCOMM_MODE_RECEIVE && currentProx==23) {					
					currentAdChannel = 0;	// prox0					
    4ee6:	10 92 33 02 	sts	0x0233, r1
					measBattery = 0;
    4eea:	10 92 cf 02 	sts	0x02CF, r1
					irCommAdcRxState = 0;					
    4eee:	10 92 ff 04 	sts	0x04FF, r1
					irCommRxWindowSamples = 0;
    4ef2:	10 92 00 05 	sts	0x0500, r1
					memset(irCommMaxSensorValueAdc, 0x00, 16);
    4ef6:	e0 91 32 0b 	lds	r30, 0x0B32
    4efa:	f0 91 33 0b 	lds	r31, 0x0B33
    4efe:	80 e1       	ldi	r24, 0x10	; 16
    4f00:	df 01       	movw	r26, r30
    4f02:	1d 92       	st	X+, r1
    4f04:	8a 95       	dec	r24
    4f06:	e9 f7       	brne	.-6      	; 0x4f02 <__vector_29+0xbac>
					memset(irCommMinSensorValueAdc, 0xFF, 16);
    4f08:	80 91 c0 05 	lds	r24, 0x05C0
    4f0c:	90 91 c1 05 	lds	r25, 0x05C1
    4f10:	6f ef       	ldi	r22, 0xFF	; 255
    4f12:	70 e0       	ldi	r23, 0x00	; 0
    4f14:	40 e1       	ldi	r20, 0x10	; 16
    4f16:	50 e0       	ldi	r21, 0x00	; 0
    4f18:	0e 94 6c 54 	call	0xa8d8	; 0xa8d8 <memset>
					irCommMode = IRCOMM_MODE_RECEIVE;					
    4f1c:	10 93 d6 04 	sts	0x04D6, r17
    4f20:	10 91 d4 04 	lds	r17, 0x04D4
    4f24:	d8 ca       	rjmp	.-2640   	; 0x44d6 <__vector_29+0x180>
					}
					irCommTxSwitchCounter++;
					if(irCommTxSwitchCounter == irCommTxSwitchCount) {
						irCommTxBitCount++;
						if(irCommTxBitCount==12) {
							irCommState = IRCOMM_TX_IDLE_STATE;
    4f26:	81 e0       	ldi	r24, 0x01	; 1
    4f28:	80 93 d7 04 	sts	0x04D7, r24
							irCommTxByteEnqueued = 0;
    4f2c:	10 92 1f 05 	sts	0x051F, r1
							adcSamplingState = 0;
    4f30:	10 92 ca 02 	sts	0x02CA, r1
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    4f34:	10 92 d6 04 	sts	0x04D6, r1
							irCommInitReceiver();
    4f38:	0e 94 b9 45 	call	0x8b72	; 0x8b72 <irCommInitReceiver>
							PORTA = 0x00;
    4f3c:	12 b8       	out	0x02, r1	; 2
							irCommTxLastTransmissionTime = getTime100MicroSec();
    4f3e:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
    4f42:	60 93 20 05 	sts	0x0520, r22
    4f46:	70 93 21 05 	sts	0x0521, r23
    4f4a:	80 93 22 05 	sts	0x0522, r24
    4f4e:	90 93 23 05 	sts	0x0523, r25
    4f52:	91 cd       	rjmp	.-1246   	; 0x4a76 <__vector_29+0x720>
					irCommMinSensorValueCurr = irCommMinSensorValueAdc;
					irCommMinSensorValueAdc = irCommTempPointer;
					memset(irCommMaxSensorValueAdc, 0x00, 16);
					memset(irCommMinSensorValueAdc, 0xFF, 16);
					if(irCommState == IRCOMM_RX_IDLE_STATE) {
						irCommState = IRCOMM_RX_MAX_SENSOR_STATE;
    4f54:	82 e0       	ldi	r24, 0x02	; 2
    4f56:	80 93 d7 04 	sts	0x04D7, r24
						irCommRxBitSkipped = 0;
    4f5a:	10 92 19 05 	sts	0x0519, r1
    4f5e:	b6 cf       	rjmp	.-148    	; 0x4ecc <__vector_29+0xb76>

00004f60 <initMotors>:

#include "motors.h"

void initMotors() {
    4f60:	0f 93       	push	r16
    4f62:	1f 93       	push	r17
    4f64:	cf 93       	push	r28
    4f66:	df 93       	push	r29
	// Using 10-bit resolution (waveform generation mode 7) we have a period of: 8000000/1024 = 7812.5 Hz
	// We need to apply a prescaler to the timer in such a way to get the desired period:
	// 7812.5/100 = 78.125 => ideal prescaler, the nearest one is 1/64 and we get a period of:
	// 8000000/64/1024 = 122 Hz

	TCCR3A = 0;
    4f68:	e0 e9       	ldi	r30, 0x90	; 144
    4f6a:	f0 e0       	ldi	r31, 0x00	; 0
    4f6c:	10 82       	st	Z, r1
	TCCR3B = 0;
    4f6e:	41 e9       	ldi	r20, 0x91	; 145
    4f70:	50 e0       	ldi	r21, 0x00	; 0
    4f72:	da 01       	movw	r26, r20
    4f74:	1c 92       	st	X, r1
	TIMSK3 = 0;
    4f76:	21 e7       	ldi	r18, 0x71	; 113
    4f78:	30 e0       	ldi	r19, 0x00	; 0
    4f7a:	e9 01       	movw	r28, r18
    4f7c:	18 82       	st	Y, r1
	TCCR4A = 0;
    4f7e:	a0 ea       	ldi	r26, 0xA0	; 160
    4f80:	b0 e0       	ldi	r27, 0x00	; 0
    4f82:	1c 92       	st	X, r1
	TCCR4B = 0;
    4f84:	81 ea       	ldi	r24, 0xA1	; 161
    4f86:	90 e0       	ldi	r25, 0x00	; 0
    4f88:	ec 01       	movw	r28, r24
    4f8a:	18 82       	st	Y, r1
	TIMSK4 = 0;
    4f8c:	02 e7       	ldi	r16, 0x72	; 114
    4f8e:	10 e0       	ldi	r17, 0x00	; 0
    4f90:	e8 01       	movw	r28, r16
    4f92:	18 82       	st	Y, r1

	TCCR3A |= (1 << COM3A1) | (1 << WGM31) | (1 << WGM30); 	// enable OCA; clear on match, set at bottom
    4f94:	60 81       	ld	r22, Z
    4f96:	63 68       	ori	r22, 0x83	; 131
    4f98:	60 83       	st	Z, r22
	TCCR3A |= (1 << WGM31) | (1 << WGM30);
    4f9a:	60 81       	ld	r22, Z
    4f9c:	63 60       	ori	r22, 0x03	; 3
    4f9e:	60 83       	st	Z, r22
	TCCR3B |= (1 << WGM32) | (1 << CS31) | (1 << CS30);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    4fa0:	ea 01       	movw	r28, r20
    4fa2:	68 81       	ld	r22, Y
    4fa4:	6b 60       	ori	r22, 0x0B	; 11
    4fa6:	68 83       	st	Y, r22
	// the values for motors goes from 0 (stopped) to 1023 (max power)
	OCR3A = pwm_right;
    4fa8:	40 91 05 03 	lds	r20, 0x0305
    4fac:	50 91 06 03 	lds	r21, 0x0306
    4fb0:	50 93 99 00 	sts	0x0099, r21
    4fb4:	40 93 98 00 	sts	0x0098, r20
	OCR3B = 0;
    4fb8:	10 92 9b 00 	sts	0x009B, r1
    4fbc:	10 92 9a 00 	sts	0x009A, r1
	TIMSK3 |= (1 << TOIE3);		// Enable timer overflow interrupt
    4fc0:	e9 01       	movw	r28, r18
    4fc2:	48 81       	ld	r20, Y
    4fc4:	41 60       	ori	r20, 0x01	; 1
    4fc6:	48 83       	st	Y, r20

	// stop right motor
	TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    4fc8:	20 81       	ld	r18, Z
    4fca:	2f 75       	andi	r18, 0x5F	; 95
    4fcc:	20 83       	st	Z, r18
	PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    4fce:	2e b1       	in	r18, 0x0e	; 14
    4fd0:	27 7e       	andi	r18, 0xE7	; 231
    4fd2:	2e b9       	out	0x0e, r18	; 14

	// Motor left timer4/pwm
	// same configuration as timer3
	TCCR4A |= (1 << COM4A1) | (1 << WGM41) | (1 << WGM40); 	// enable OCA; clear on match, set at bottom
    4fd4:	2c 91       	ld	r18, X
    4fd6:	23 68       	ori	r18, 0x83	; 131
    4fd8:	2c 93       	st	X, r18
	TCCR4B |= (1 << WGM42) | (1 << CS41) | (1 << CS40);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    4fda:	fc 01       	movw	r30, r24
    4fdc:	20 81       	ld	r18, Z
    4fde:	2b 60       	ori	r18, 0x0B	; 11
    4fe0:	20 83       	st	Z, r18
	// the values for motors goes from 0 (stopped) to 1024 (max power)
	OCR4A = pwm_left;
    4fe2:	80 91 07 03 	lds	r24, 0x0307
    4fe6:	90 91 08 03 	lds	r25, 0x0308
    4fea:	90 93 a9 00 	sts	0x00A9, r25
    4fee:	80 93 a8 00 	sts	0x00A8, r24
	OCR4B = 0;
    4ff2:	10 92 ab 00 	sts	0x00AB, r1
    4ff6:	10 92 aa 00 	sts	0x00AA, r1
	TIMSK4 |= (1 << TOIE4);		// Enable timer overflow interrupt
    4ffa:	e8 01       	movw	r28, r16
    4ffc:	88 81       	ld	r24, Y
    4ffe:	81 60       	ori	r24, 0x01	; 1
    5000:	88 83       	st	Y, r24
	// stop left motor
	TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    5002:	8c 91       	ld	r24, X
    5004:	8f 75       	andi	r24, 0x5F	; 95
    5006:	8c 93       	st	X, r24
	PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    5008:	e2 e0       	ldi	r30, 0x02	; 2
    500a:	f1 e0       	ldi	r31, 0x01	; 1
    500c:	80 81       	ld	r24, Z
    500e:	87 7e       	andi	r24, 0xE7	; 231
    5010:	80 83       	st	Z, r24


}
    5012:	df 91       	pop	r29
    5014:	cf 91       	pop	r28
    5016:	1f 91       	pop	r17
    5018:	0f 91       	pop	r16
    501a:	08 95       	ret

0000501c <cast_speed>:

signed int cast_speed(signed int vel) {
    501c:	28 2f       	mov	r18, r24
    501e:	39 2f       	mov	r19, r25
    5020:	8e ef       	ldi	r24, 0xFE	; 254
    5022:	20 30       	cpi	r18, 0x00	; 0
    5024:	38 07       	cpc	r19, r24
    5026:	14 f4       	brge	.+4      	; 0x502c <cast_speed+0x10>
    5028:	20 e0       	ldi	r18, 0x00	; 0
    502a:	3e ef       	ldi	r19, 0xFE	; 254
    502c:	82 e0       	ldi	r24, 0x02	; 2
    502e:	21 30       	cpi	r18, 0x01	; 1
    5030:	38 07       	cpc	r19, r24
    5032:	14 f0       	brlt	.+4      	; 0x5038 <cast_speed+0x1c>
    5034:	20 e0       	ldi	r18, 0x00	; 0
    5036:	32 e0       	ldi	r19, 0x02	; 2
        vel = MAX_MOTORS_PWM/2;
    } else if(vel < -(MAX_MOTORS_PWM/2)) {
        vel = -(MAX_MOTORS_PWM/2);
    }
    return vel;
}
    5038:	c9 01       	movw	r24, r18
    503a:	08 95       	ret

0000503c <handleMotorsWithNoController>:

void handleMotorsWithNoController() {

	// compute velocities even if they aren't used
	if(compute_left_vel) {
    503c:	80 91 07 02 	lds	r24, 0x0207
    5040:	88 23       	and	r24, r24
    5042:	c1 f1       	breq	.+112    	; 0x50b4 <handleMotorsWithNoController+0x78>
		last_left_vel = left_vel_sum>>2;
    5044:	60 91 fd 02 	lds	r22, 0x02FD
    5048:	70 91 fe 02 	lds	r23, 0x02FE
    504c:	76 95       	lsr	r23
    504e:	67 95       	ror	r22
    5050:	76 95       	lsr	r23
    5052:	67 95       	ror	r22
    5054:	70 93 02 03 	sts	0x0302, r23
    5058:	60 93 01 03 	sts	0x0301, r22
		compute_left_vel = 0;
    505c:	10 92 07 02 	sts	0x0207, r1
		left_vel_sum = 0;
    5060:	10 92 fe 02 	sts	0x02FE, r1
    5064:	10 92 fd 02 	sts	0x02FD, r1

		if(pwm_left_desired >= 0) {
    5068:	80 91 0b 03 	lds	r24, 0x030B
    506c:	90 91 0c 03 	lds	r25, 0x030C
    5070:	97 fd       	sbrc	r25, 7
    5072:	e3 c0       	rjmp	.+454    	; 0x523a <handleMotorsWithNoController+0x1fe>
			leftMotSteps += (last_left_vel>>3);
    5074:	75 95       	asr	r23
    5076:	67 95       	ror	r22
    5078:	75 95       	asr	r23
    507a:	67 95       	ror	r22
    507c:	75 95       	asr	r23
    507e:	67 95       	ror	r22
    5080:	88 27       	eor	r24, r24
    5082:	77 fd       	sbrc	r23, 7
    5084:	80 95       	com	r24
    5086:	98 2f       	mov	r25, r24
    5088:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <__floatsisf>
    508c:	9b 01       	movw	r18, r22
    508e:	ac 01       	movw	r20, r24
    5090:	60 91 e5 02 	lds	r22, 0x02E5
    5094:	70 91 e6 02 	lds	r23, 0x02E6
    5098:	80 91 e7 02 	lds	r24, 0x02E7
    509c:	90 91 e8 02 	lds	r25, 0x02E8
    50a0:	0e 94 7f 50 	call	0xa0fe	; 0xa0fe <__addsf3>
    50a4:	60 93 e5 02 	sts	0x02E5, r22
    50a8:	70 93 e6 02 	sts	0x02E6, r23
    50ac:	80 93 e7 02 	sts	0x02E7, r24
    50b0:	90 93 e8 02 	sts	0x02E8, r25
		} else {
			leftMotSteps -= (last_left_vel>>3);
		}
	}

	if(compute_right_vel) {
    50b4:	80 91 08 02 	lds	r24, 0x0208
    50b8:	88 23       	and	r24, r24
    50ba:	c1 f1       	breq	.+112    	; 0x512c <handleMotorsWithNoController+0xf0>
		last_right_vel = right_vel_sum>>2;
    50bc:	60 91 ff 02 	lds	r22, 0x02FF
    50c0:	70 91 00 03 	lds	r23, 0x0300
    50c4:	76 95       	lsr	r23
    50c6:	67 95       	ror	r22
    50c8:	76 95       	lsr	r23
    50ca:	67 95       	ror	r22
    50cc:	70 93 04 03 	sts	0x0304, r23
    50d0:	60 93 03 03 	sts	0x0303, r22
		compute_right_vel = 0;
    50d4:	10 92 08 02 	sts	0x0208, r1
		right_vel_sum = 0;
    50d8:	10 92 00 03 	sts	0x0300, r1
    50dc:	10 92 ff 02 	sts	0x02FF, r1

		if(pwm_right_desired >= 0) {
    50e0:	80 91 09 03 	lds	r24, 0x0309
    50e4:	90 91 0a 03 	lds	r25, 0x030A
    50e8:	97 fd       	sbrc	r25, 7
    50ea:	86 c0       	rjmp	.+268    	; 0x51f8 <handleMotorsWithNoController+0x1bc>
			rightMotSteps += (last_right_vel>>3);
    50ec:	75 95       	asr	r23
    50ee:	67 95       	ror	r22
    50f0:	75 95       	asr	r23
    50f2:	67 95       	ror	r22
    50f4:	75 95       	asr	r23
    50f6:	67 95       	ror	r22
    50f8:	88 27       	eor	r24, r24
    50fa:	77 fd       	sbrc	r23, 7
    50fc:	80 95       	com	r24
    50fe:	98 2f       	mov	r25, r24
    5100:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <__floatsisf>
    5104:	9b 01       	movw	r18, r22
    5106:	ac 01       	movw	r20, r24
    5108:	60 91 e1 02 	lds	r22, 0x02E1
    510c:	70 91 e2 02 	lds	r23, 0x02E2
    5110:	80 91 e3 02 	lds	r24, 0x02E3
    5114:	90 91 e4 02 	lds	r25, 0x02E4
    5118:	0e 94 7f 50 	call	0xa0fe	; 0xa0fe <__addsf3>
    511c:	60 93 e1 02 	sts	0x02E1, r22
    5120:	70 93 e2 02 	sts	0x02E2, r23
    5124:	80 93 e3 02 	sts	0x02E3, r24
    5128:	90 93 e4 02 	sts	0x02E4, r25
		} else {
			rightMotSteps -= (last_right_vel>>3);
		}
	}

	pwm_right_working = pwm_intermediate_right_desired*BYTE_TO_MM_S;	// pwm in the range -635..635 (127*BYTE_TO_MM_S)
    512c:	20 91 0d 03 	lds	r18, 0x030D
    5130:	30 91 0e 03 	lds	r19, 0x030E
    5134:	c9 01       	movw	r24, r18
    5136:	88 0f       	add	r24, r24
    5138:	99 1f       	adc	r25, r25
    513a:	88 0f       	add	r24, r24
    513c:	99 1f       	adc	r25, r25
    513e:	82 0f       	add	r24, r18
    5140:	93 1f       	adc	r25, r19
    5142:	90 93 1e 03 	sts	0x031E, r25
    5146:	80 93 1d 03 	sts	0x031D, r24
	pwm_left_working = pwm_intermediate_left_desired*BYTE_TO_MM_S;	
    514a:	40 91 0f 03 	lds	r20, 0x030F
    514e:	50 91 10 03 	lds	r21, 0x0310
    5152:	9a 01       	movw	r18, r20
    5154:	22 0f       	add	r18, r18
    5156:	33 1f       	adc	r19, r19
    5158:	22 0f       	add	r18, r18
    515a:	33 1f       	adc	r19, r19
    515c:	24 0f       	add	r18, r20
    515e:	35 1f       	adc	r19, r21
    5160:	52 2f       	mov	r21, r18
    5162:	43 2f       	mov	r20, r19
    5164:	20 93 1f 03 	sts	0x031F, r18
    5168:	30 93 20 03 	sts	0x0320, r19
	if(obstacleAvoidanceEnabled) {
    516c:	20 91 7c 04 	lds	r18, 0x047C
    5170:	22 23       	and	r18, r18
    5172:	39 f5       	brne	.+78     	; 0x51c2 <handleMotorsWithNoController+0x186>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);		// out is in the range -MAX_MOTORS_PWM/2..MAX_MOTORS_PWM/2
	}
	//pwm_left_desired_to_control = cast_speed(pwm_left_working);		// pwm in the range -MAX_MOTORS_PWM/2..MAX_MOTORS_PWM/2
	//pwm_right_desired_to_control = cast_speed(pwm_right_working);

	pwm_left = pwm_left_working;
    5174:	50 93 07 03 	sts	0x0307, r21
    5178:	40 93 08 03 	sts	0x0308, r20
	pwm_right = pwm_right_working;
    517c:	90 93 06 03 	sts	0x0306, r25
    5180:	80 93 05 03 	sts	0x0305, r24

	if(pwm_right > 0) {
    5184:	18 16       	cp	r1, r24
    5186:	19 06       	cpc	r1, r25
    5188:	5c f5       	brge	.+86     	; 0x51e0 <handleMotorsWithNoController+0x1a4>
		OCR3A = (unsigned int)pwm_right;
    518a:	90 93 99 00 	sts	0x0099, r25
    518e:	80 93 98 00 	sts	0x0098, r24
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
		OCR3B = 0;
	}
	if(pwm_left > 0) {
    5192:	80 91 07 03 	lds	r24, 0x0307
    5196:	90 91 08 03 	lds	r25, 0x0308
    519a:	18 16       	cp	r1, r24
    519c:	19 06       	cpc	r1, r25
    519e:	2c f4       	brge	.+10     	; 0x51aa <handleMotorsWithNoController+0x16e>
		OCR4A = (unsigned int)pwm_left;
    51a0:	90 93 a9 00 	sts	0x00A9, r25
    51a4:	80 93 a8 00 	sts	0x00A8, r24
    51a8:	08 95       	ret
	} else if(pwm_left < 0) {
    51aa:	00 97       	sbiw	r24, 0x00	; 0
    51ac:	09 f0       	breq	.+2      	; 0x51b0 <handleMotorsWithNoController+0x174>
    51ae:	6e c0       	rjmp	.+220    	; 0x528c <handleMotorsWithNoController+0x250>
		OCR4B =(unsigned int)( -pwm_left);
	} else {
		OCR4A = 0;
    51b0:	10 92 a9 00 	sts	0x00A9, r1
    51b4:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    51b8:	10 92 ab 00 	sts	0x00AB, r1
    51bc:	10 92 aa 00 	sts	0x00AA, r1
    51c0:	08 95       	ret
	}

	pwm_right_working = pwm_intermediate_right_desired*BYTE_TO_MM_S;	// pwm in the range -635..635 (127*BYTE_TO_MM_S)
	pwm_left_working = pwm_intermediate_left_desired*BYTE_TO_MM_S;	
	if(obstacleAvoidanceEnabled) {
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);		// out is in the range -MAX_MOTORS_PWM/2..MAX_MOTORS_PWM/2
    51c2:	8f e1       	ldi	r24, 0x1F	; 31
    51c4:	93 e0       	ldi	r25, 0x03	; 3
    51c6:	6d e1       	ldi	r22, 0x1D	; 29
    51c8:	73 e0       	ldi	r23, 0x03	; 3
    51ca:	0e 94 25 3b 	call	0x764a	; 0x764a <obstacleAvoidance>
    51ce:	50 91 1f 03 	lds	r21, 0x031F
    51d2:	40 91 20 03 	lds	r20, 0x0320
    51d6:	80 91 1d 03 	lds	r24, 0x031D
    51da:	90 91 1e 03 	lds	r25, 0x031E
    51de:	ca cf       	rjmp	.-108    	; 0x5174 <handleMotorsWithNoController+0x138>
	pwm_left = pwm_left_working;
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
    51e0:	00 97       	sbiw	r24, 0x00	; 0
    51e2:	09 f0       	breq	.+2      	; 0x51e6 <handleMotorsWithNoController+0x1aa>
    51e4:	4b c0       	rjmp	.+150    	; 0x527c <handleMotorsWithNoController+0x240>
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
    51e6:	10 92 99 00 	sts	0x0099, r1
    51ea:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    51ee:	10 92 9b 00 	sts	0x009B, r1
    51f2:	10 92 9a 00 	sts	0x009A, r1
    51f6:	cd cf       	rjmp	.-102    	; 0x5192 <handleMotorsWithNoController+0x156>
		right_vel_sum = 0;

		if(pwm_right_desired >= 0) {
			rightMotSteps += (last_right_vel>>3);
		} else {
			rightMotSteps -= (last_right_vel>>3);
    51f8:	75 95       	asr	r23
    51fa:	67 95       	ror	r22
    51fc:	75 95       	asr	r23
    51fe:	67 95       	ror	r22
    5200:	75 95       	asr	r23
    5202:	67 95       	ror	r22
    5204:	88 27       	eor	r24, r24
    5206:	77 fd       	sbrc	r23, 7
    5208:	80 95       	com	r24
    520a:	98 2f       	mov	r25, r24
    520c:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <__floatsisf>
    5210:	9b 01       	movw	r18, r22
    5212:	ac 01       	movw	r20, r24
    5214:	60 91 e1 02 	lds	r22, 0x02E1
    5218:	70 91 e2 02 	lds	r23, 0x02E2
    521c:	80 91 e3 02 	lds	r24, 0x02E3
    5220:	90 91 e4 02 	lds	r25, 0x02E4
    5224:	0e 94 7e 50 	call	0xa0fc	; 0xa0fc <__subsf3>
    5228:	60 93 e1 02 	sts	0x02E1, r22
    522c:	70 93 e2 02 	sts	0x02E2, r23
    5230:	80 93 e3 02 	sts	0x02E3, r24
    5234:	90 93 e4 02 	sts	0x02E4, r25
    5238:	79 cf       	rjmp	.-270    	; 0x512c <handleMotorsWithNoController+0xf0>
		left_vel_sum = 0;

		if(pwm_left_desired >= 0) {
			leftMotSteps += (last_left_vel>>3);
		} else {
			leftMotSteps -= (last_left_vel>>3);
    523a:	75 95       	asr	r23
    523c:	67 95       	ror	r22
    523e:	75 95       	asr	r23
    5240:	67 95       	ror	r22
    5242:	75 95       	asr	r23
    5244:	67 95       	ror	r22
    5246:	88 27       	eor	r24, r24
    5248:	77 fd       	sbrc	r23, 7
    524a:	80 95       	com	r24
    524c:	98 2f       	mov	r25, r24
    524e:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <__floatsisf>
    5252:	9b 01       	movw	r18, r22
    5254:	ac 01       	movw	r20, r24
    5256:	60 91 e5 02 	lds	r22, 0x02E5
    525a:	70 91 e6 02 	lds	r23, 0x02E6
    525e:	80 91 e7 02 	lds	r24, 0x02E7
    5262:	90 91 e8 02 	lds	r25, 0x02E8
    5266:	0e 94 7e 50 	call	0xa0fc	; 0xa0fc <__subsf3>
    526a:	60 93 e5 02 	sts	0x02E5, r22
    526e:	70 93 e6 02 	sts	0x02E6, r23
    5272:	80 93 e7 02 	sts	0x02E7, r24
    5276:	90 93 e8 02 	sts	0x02E8, r25
    527a:	1c cf       	rjmp	.-456    	; 0x50b4 <handleMotorsWithNoController+0x78>
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
		OCR3B = (unsigned int)(-pwm_right);
    527c:	90 95       	com	r25
    527e:	81 95       	neg	r24
    5280:	9f 4f       	sbci	r25, 0xFF	; 255
    5282:	90 93 9b 00 	sts	0x009B, r25
    5286:	80 93 9a 00 	sts	0x009A, r24
    528a:	83 cf       	rjmp	.-250    	; 0x5192 <handleMotorsWithNoController+0x156>
		OCR3B = 0;
	}
	if(pwm_left > 0) {
		OCR4A = (unsigned int)pwm_left;
	} else if(pwm_left < 0) {
		OCR4B =(unsigned int)( -pwm_left);
    528c:	90 95       	com	r25
    528e:	81 95       	neg	r24
    5290:	9f 4f       	sbci	r25, 0xFF	; 255
    5292:	90 93 ab 00 	sts	0x00AB, r25
    5296:	80 93 aa 00 	sts	0x00AA, r24
    529a:	08 95       	ret

0000529c <setLeftSpeed>:
}

// vel expressed in 1/5 of mm/s
void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    529c:	28 2f       	mov	r18, r24
    529e:	33 27       	eor	r19, r19
    52a0:	27 fd       	sbrc	r18, 7
    52a2:	30 95       	com	r19
    52a4:	37 fd       	sbrc	r19, 7
    52a6:	13 c0       	rjmp	.+38     	; 0x52ce <setLeftSpeed+0x32>
    52a8:	30 93 22 03 	sts	0x0322, r19
    52ac:	20 93 21 03 	sts	0x0321, r18

    if(vel >= 0) {
    52b0:	87 fd       	sbrc	r24, 7
    52b2:	05 c0       	rjmp	.+10     	; 0x52be <setLeftSpeed+0x22>
        pwm_left_desired = speedl;
    } else {
        pwm_left_desired = -(speedl);
    52b4:	30 93 0c 03 	sts	0x030C, r19
    52b8:	20 93 0b 03 	sts	0x030B, r18
    52bc:	08 95       	ret
    52be:	30 95       	com	r19
    52c0:	21 95       	neg	r18
    52c2:	3f 4f       	sbci	r19, 0xFF	; 255
    52c4:	30 93 0c 03 	sts	0x030C, r19
    52c8:	20 93 0b 03 	sts	0x030B, r18
    52cc:	08 95       	ret
}

// vel expressed in 1/5 of mm/s
void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    52ce:	30 95       	com	r19
    52d0:	21 95       	neg	r18
    52d2:	3f 4f       	sbci	r19, 0xFF	; 255
    52d4:	e9 cf       	rjmp	.-46     	; 0x52a8 <setLeftSpeed+0xc>

000052d6 <setRightSpeed>:

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    52d6:	28 2f       	mov	r18, r24
    52d8:	33 27       	eor	r19, r19
    52da:	27 fd       	sbrc	r18, 7
    52dc:	30 95       	com	r19
    52de:	37 fd       	sbrc	r19, 7
    52e0:	13 c0       	rjmp	.+38     	; 0x5308 <setRightSpeed+0x32>
    52e2:	30 93 24 03 	sts	0x0324, r19
    52e6:	20 93 23 03 	sts	0x0323, r18

    if(vel >= 0) {
    52ea:	87 fd       	sbrc	r24, 7
    52ec:	05 c0       	rjmp	.+10     	; 0x52f8 <setRightSpeed+0x22>
        pwm_right_desired = speedr;
    } else {
        pwm_right_desired = -(speedr);
    52ee:	30 93 0a 03 	sts	0x030A, r19
    52f2:	20 93 09 03 	sts	0x0309, r18
    52f6:	08 95       	ret
    52f8:	30 95       	com	r19
    52fa:	21 95       	neg	r18
    52fc:	3f 4f       	sbci	r19, 0xFF	; 255
    52fe:	30 93 0a 03 	sts	0x030A, r19
    5302:	20 93 09 03 	sts	0x0309, r18
    5306:	08 95       	ret

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    5308:	30 95       	com	r19
    530a:	21 95       	neg	r18
    530c:	3f 4f       	sbci	r19, 0xFF	; 255
    530e:	e9 cf       	rjmp	.-46     	; 0x52e2 <setRightSpeed+0xc>

00005310 <updateOdomData>:
}


void updateOdomData() {

    if(calibWheel == LEFT_WHEEL_FW_SC) {
    5310:	80 91 4c 05 	lds	r24, 0x054C
    5314:	88 23       	and	r24, r24
    5316:	89 f5       	brne	.+98     	; 0x537a <updateOdomData+0x6a>
        if(calibVelIndex>1) {
    5318:	e0 91 b6 08 	lds	r30, 0x08B6
    531c:	e2 30       	cpi	r30, 0x02	; 2
    531e:	08 f4       	brcc	.+2      	; 0x5322 <updateOdomData+0x12>
    5320:	96 c0       	rjmp	.+300    	; 0x544e <updateOdomData+0x13e>
            if(calibration[calibVelIndex-2][1] >= tempVel) {  // check that we have always increasing values of speed, otherwise there
    5322:	f0 e0       	ldi	r31, 0x00	; 0
    5324:	df 01       	movw	r26, r30
    5326:	a2 95       	swap	r26
    5328:	b2 95       	swap	r27
    532a:	b0 7f       	andi	r27, 0xF0	; 240
    532c:	ba 27       	eor	r27, r26
    532e:	a0 7f       	andi	r26, 0xF0	; 240
    5330:	ba 27       	eor	r27, r26
    5332:	a3 54       	subi	r26, 0x43	; 67
    5334:	b7 4f       	sbci	r27, 0xF7	; 247
    5336:	12 96       	adiw	r26, 0x02	; 2
    5338:	2d 91       	ld	r18, X+
    533a:	3c 91       	ld	r19, X
    533c:	13 97       	sbiw	r26, 0x03	; 3
    533e:	80 91 71 0b 	lds	r24, 0x0B71
    5342:	90 91 72 0b 	lds	r25, 0x0B72
    5346:	28 17       	cp	r18, r24
    5348:	39 07       	cpc	r19, r25
    534a:	34 f0       	brlt	.+12     	; 0x5358 <updateOdomData+0x48>
                tempVel = calibration[calibVelIndex-2][1]+1; // will be problems when getting data from the lookup table
    534c:	c9 01       	movw	r24, r18
    534e:	01 96       	adiw	r24, 0x01	; 1
    5350:	90 93 72 0b 	sts	0x0B72, r25
    5354:	80 93 71 0b 	sts	0x0B71, r24
            }
        }
        calibration[calibVelIndex-1][0] = avgLeftSpeed;
    5358:	e2 95       	swap	r30
    535a:	f2 95       	swap	r31
    535c:	f0 7f       	andi	r31, 0xF0	; 240
    535e:	fe 27       	eor	r31, r30
    5360:	e0 7f       	andi	r30, 0xF0	; 240
    5362:	fe 27       	eor	r31, r30
    5364:	e3 53       	subi	r30, 0x33	; 51
    5366:	f7 4f       	sbci	r31, 0xF7	; 247
    5368:	20 91 c4 04 	lds	r18, 0x04C4
    536c:	30 91 c5 04 	lds	r19, 0x04C5
    5370:	31 83       	std	Z+1, r19	; 0x01
    5372:	20 83       	st	Z, r18
        calibration[calibVelIndex-1][1] = tempVel;
    5374:	93 83       	std	Z+3, r25	; 0x03
    5376:	82 83       	std	Z+2, r24	; 0x02
    5378:	08 95       	ret
    } else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    537a:	81 30       	cpi	r24, 0x01	; 1
    537c:	31 f0       	breq	.+12     	; 0x538a <updateOdomData+0x7a>
                tempVel = calibration[calibVelIndex-2][3]+1;
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
        calibration[calibVelIndex-1][3] = tempVel;
    } else if(calibWheel == LEFT_WHEEL_BW_SC) {
    537e:	82 30       	cpi	r24, 0x02	; 2
    5380:	09 f4       	brne	.+2      	; 0x5384 <updateOdomData+0x74>
    5382:	6b c0       	rjmp	.+214    	; 0x545a <updateOdomData+0x14a>
                tempVel = calibration[calibVelIndex-2][5]+1;
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
        calibration[calibVelIndex-1][5] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    5384:	83 30       	cpi	r24, 0x03	; 3
    5386:	91 f1       	breq	.+100    	; 0x53ec <updateOdomData+0xdc>
    5388:	08 95       	ret
            }
        }
        calibration[calibVelIndex-1][0] = avgLeftSpeed;
        calibration[calibVelIndex-1][1] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_FW_SC) {
        if(calibVelIndex>1) {
    538a:	e0 91 b6 08 	lds	r30, 0x08B6
    538e:	e2 30       	cpi	r30, 0x02	; 2
    5390:	08 f4       	brcc	.+2      	; 0x5394 <updateOdomData+0x84>
    5392:	93 c0       	rjmp	.+294    	; 0x54ba <updateOdomData+0x1aa>
            if(calibration[calibVelIndex-2][3] >= tempVel) {
    5394:	f0 e0       	ldi	r31, 0x00	; 0
    5396:	df 01       	movw	r26, r30
    5398:	a2 95       	swap	r26
    539a:	b2 95       	swap	r27
    539c:	b0 7f       	andi	r27, 0xF0	; 240
    539e:	ba 27       	eor	r27, r26
    53a0:	a0 7f       	andi	r26, 0xF0	; 240
    53a2:	ba 27       	eor	r27, r26
    53a4:	a3 54       	subi	r26, 0x43	; 67
    53a6:	b7 4f       	sbci	r27, 0xF7	; 247
    53a8:	16 96       	adiw	r26, 0x06	; 6
    53aa:	2d 91       	ld	r18, X+
    53ac:	3c 91       	ld	r19, X
    53ae:	17 97       	sbiw	r26, 0x07	; 7
    53b0:	80 91 71 0b 	lds	r24, 0x0B71
    53b4:	90 91 72 0b 	lds	r25, 0x0B72
    53b8:	28 17       	cp	r18, r24
    53ba:	39 07       	cpc	r19, r25
    53bc:	34 f0       	brlt	.+12     	; 0x53ca <updateOdomData+0xba>
                tempVel = calibration[calibVelIndex-2][3]+1;
    53be:	c9 01       	movw	r24, r18
    53c0:	01 96       	adiw	r24, 0x01	; 1
    53c2:	90 93 72 0b 	sts	0x0B72, r25
    53c6:	80 93 71 0b 	sts	0x0B71, r24
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
    53ca:	e2 95       	swap	r30
    53cc:	f2 95       	swap	r31
    53ce:	f0 7f       	andi	r31, 0xF0	; 240
    53d0:	fe 27       	eor	r31, r30
    53d2:	e0 7f       	andi	r30, 0xF0	; 240
    53d4:	fe 27       	eor	r31, r30
    53d6:	e3 53       	subi	r30, 0x33	; 51
    53d8:	f7 4f       	sbci	r31, 0xF7	; 247
    53da:	20 91 c6 04 	lds	r18, 0x04C6
    53de:	30 91 c7 04 	lds	r19, 0x04C7
    53e2:	35 83       	std	Z+5, r19	; 0x05
    53e4:	24 83       	std	Z+4, r18	; 0x04
        calibration[calibVelIndex-1][3] = tempVel;
    53e6:	97 83       	std	Z+7, r25	; 0x07
    53e8:	86 83       	std	Z+6, r24	; 0x06
    53ea:	08 95       	ret
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
        calibration[calibVelIndex-1][5] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    53ec:	e0 91 b6 08 	lds	r30, 0x08B6
    53f0:	e2 30       	cpi	r30, 0x02	; 2
    53f2:	08 f4       	brcc	.+2      	; 0x53f6 <updateOdomData+0xe6>
    53f4:	68 c0       	rjmp	.+208    	; 0x54c6 <updateOdomData+0x1b6>
            if(calibration[calibVelIndex-2][7] >= tempVel) {
    53f6:	f0 e0       	ldi	r31, 0x00	; 0
    53f8:	df 01       	movw	r26, r30
    53fa:	a2 95       	swap	r26
    53fc:	b2 95       	swap	r27
    53fe:	b0 7f       	andi	r27, 0xF0	; 240
    5400:	ba 27       	eor	r27, r26
    5402:	a0 7f       	andi	r26, 0xF0	; 240
    5404:	ba 27       	eor	r27, r26
    5406:	a3 54       	subi	r26, 0x43	; 67
    5408:	b7 4f       	sbci	r27, 0xF7	; 247
    540a:	1e 96       	adiw	r26, 0x0e	; 14
    540c:	2d 91       	ld	r18, X+
    540e:	3c 91       	ld	r19, X
    5410:	1f 97       	sbiw	r26, 0x0f	; 15
    5412:	80 91 71 0b 	lds	r24, 0x0B71
    5416:	90 91 72 0b 	lds	r25, 0x0B72
    541a:	28 17       	cp	r18, r24
    541c:	39 07       	cpc	r19, r25
    541e:	34 f0       	brlt	.+12     	; 0x542c <updateOdomData+0x11c>
                tempVel = calibration[calibVelIndex-2][7]+1;
    5420:	c9 01       	movw	r24, r18
    5422:	01 96       	adiw	r24, 0x01	; 1
    5424:	90 93 72 0b 	sts	0x0B72, r25
    5428:	80 93 71 0b 	sts	0x0B71, r24
            }
        }
		calibration[calibVelIndex-1][6] = avgRightSpeed;
    542c:	e2 95       	swap	r30
    542e:	f2 95       	swap	r31
    5430:	f0 7f       	andi	r31, 0xF0	; 240
    5432:	fe 27       	eor	r31, r30
    5434:	e0 7f       	andi	r30, 0xF0	; 240
    5436:	fe 27       	eor	r31, r30
    5438:	e3 53       	subi	r30, 0x33	; 51
    543a:	f7 4f       	sbci	r31, 0xF7	; 247
    543c:	20 91 c6 04 	lds	r18, 0x04C6
    5440:	30 91 c7 04 	lds	r19, 0x04C7
    5444:	35 87       	std	Z+13, r19	; 0x0d
    5446:	24 87       	std	Z+12, r18	; 0x0c
        calibration[calibVelIndex-1][7] = tempVel;
    5448:	97 87       	std	Z+15, r25	; 0x0f
    544a:	86 87       	std	Z+14, r24	; 0x0e
    544c:	08 95       	ret


void updateOdomData() {

    if(calibWheel == LEFT_WHEEL_FW_SC) {
        if(calibVelIndex>1) {
    544e:	f0 e0       	ldi	r31, 0x00	; 0
    5450:	80 91 71 0b 	lds	r24, 0x0B71
    5454:	90 91 72 0b 	lds	r25, 0x0B72
    5458:	7f cf       	rjmp	.-258    	; 0x5358 <updateOdomData+0x48>
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
        calibration[calibVelIndex-1][3] = tempVel;
    } else if(calibWheel == LEFT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    545a:	e0 91 b6 08 	lds	r30, 0x08B6
    545e:	e2 30       	cpi	r30, 0x02	; 2
    5460:	c0 f1       	brcs	.+112    	; 0x54d2 <updateOdomData+0x1c2>
            if(calibration[calibVelIndex-2][5] >= tempVel) {
    5462:	f0 e0       	ldi	r31, 0x00	; 0
    5464:	df 01       	movw	r26, r30
    5466:	a2 95       	swap	r26
    5468:	b2 95       	swap	r27
    546a:	b0 7f       	andi	r27, 0xF0	; 240
    546c:	ba 27       	eor	r27, r26
    546e:	a0 7f       	andi	r26, 0xF0	; 240
    5470:	ba 27       	eor	r27, r26
    5472:	a3 54       	subi	r26, 0x43	; 67
    5474:	b7 4f       	sbci	r27, 0xF7	; 247
    5476:	1a 96       	adiw	r26, 0x0a	; 10
    5478:	2d 91       	ld	r18, X+
    547a:	3c 91       	ld	r19, X
    547c:	1b 97       	sbiw	r26, 0x0b	; 11
    547e:	80 91 71 0b 	lds	r24, 0x0B71
    5482:	90 91 72 0b 	lds	r25, 0x0B72
    5486:	28 17       	cp	r18, r24
    5488:	39 07       	cpc	r19, r25
    548a:	34 f0       	brlt	.+12     	; 0x5498 <updateOdomData+0x188>
                tempVel = calibration[calibVelIndex-2][5]+1;
    548c:	c9 01       	movw	r24, r18
    548e:	01 96       	adiw	r24, 0x01	; 1
    5490:	90 93 72 0b 	sts	0x0B72, r25
    5494:	80 93 71 0b 	sts	0x0B71, r24
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
    5498:	e2 95       	swap	r30
    549a:	f2 95       	swap	r31
    549c:	f0 7f       	andi	r31, 0xF0	; 240
    549e:	fe 27       	eor	r31, r30
    54a0:	e0 7f       	andi	r30, 0xF0	; 240
    54a2:	fe 27       	eor	r31, r30
    54a4:	e3 53       	subi	r30, 0x33	; 51
    54a6:	f7 4f       	sbci	r31, 0xF7	; 247
    54a8:	20 91 c4 04 	lds	r18, 0x04C4
    54ac:	30 91 c5 04 	lds	r19, 0x04C5
    54b0:	31 87       	std	Z+9, r19	; 0x09
    54b2:	20 87       	std	Z+8, r18	; 0x08
        calibration[calibVelIndex-1][5] = tempVel;
    54b4:	93 87       	std	Z+11, r25	; 0x0b
    54b6:	82 87       	std	Z+10, r24	; 0x0a
    54b8:	08 95       	ret
            }
        }
        calibration[calibVelIndex-1][0] = avgLeftSpeed;
        calibration[calibVelIndex-1][1] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_FW_SC) {
        if(calibVelIndex>1) {
    54ba:	f0 e0       	ldi	r31, 0x00	; 0
    54bc:	80 91 71 0b 	lds	r24, 0x0B71
    54c0:	90 91 72 0b 	lds	r25, 0x0B72
    54c4:	82 cf       	rjmp	.-252    	; 0x53ca <updateOdomData+0xba>
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
        calibration[calibVelIndex-1][5] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    54c6:	f0 e0       	ldi	r31, 0x00	; 0
    54c8:	80 91 71 0b 	lds	r24, 0x0B71
    54cc:	90 91 72 0b 	lds	r25, 0x0B72
    54d0:	ad cf       	rjmp	.-166    	; 0x542c <updateOdomData+0x11c>
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
        calibration[calibVelIndex-1][3] = tempVel;
    } else if(calibWheel == LEFT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    54d2:	f0 e0       	ldi	r31, 0x00	; 0
    54d4:	80 91 71 0b 	lds	r24, 0x0B71
    54d8:	90 91 72 0b 	lds	r25, 0x0B72
    54dc:	dd cf       	rjmp	.-70     	; 0x5498 <updateOdomData+0x188>

000054de <handleCalibration>:

}

void handleCalibration() {

	switch(calibState) {
    54de:	80 91 5c 0b 	lds	r24, 0x0B5C
    54e2:	82 30       	cpi	r24, 0x02	; 2
    54e4:	09 f4       	brne	.+2      	; 0x54e8 <handleCalibration+0xa>
    54e6:	d0 c0       	rjmp	.+416    	; 0x5688 <handleCalibration+0x1aa>
    54e8:	83 30       	cpi	r24, 0x03	; 3
    54ea:	08 f4       	brcc	.+2      	; 0x54ee <handleCalibration+0x10>
    54ec:	3f c0       	rjmp	.+126    	; 0x556c <handleCalibration+0x8e>
    54ee:	84 30       	cpi	r24, 0x04	; 4
    54f0:	09 f4       	brne	.+2      	; 0x54f4 <handleCalibration+0x16>
    54f2:	91 c0       	rjmp	.+290    	; 0x5616 <handleCalibration+0x138>
    54f4:	84 30       	cpi	r24, 0x04	; 4
    54f6:	08 f0       	brcs	.+2      	; 0x54fa <handleCalibration+0x1c>
    54f8:	63 c0       	rjmp	.+198    	; 0x55c0 <handleCalibration+0xe2>
                calibState = 5;
			}
            break;

		case 3: // look for black line again, stop time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    54fa:	80 91 4c 05 	lds	r24, 0x054C
    54fe:	88 23       	and	r24, r24
    5500:	09 f4       	brne	.+2      	; 0x5504 <handleCalibration+0x26>
    5502:	e1 c0       	rjmp	.+450    	; 0x56c6 <handleCalibration+0x1e8>
    5504:	82 30       	cpi	r24, 0x02	; 2
    5506:	09 f4       	brne	.+2      	; 0x550a <handleCalibration+0x2c>
    5508:	de c0       	rjmp	.+444    	; 0x56c6 <handleCalibration+0x1e8>
                    updateOdomData();
                    calibState = 4;
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
            	if(proximityResult[11]<(512-2*HYSTERESIS_THR)) {
    550a:	80 91 7f 02 	lds	r24, 0x027F
    550e:	90 91 80 02 	lds	r25, 0x0280
    5512:	21 e0       	ldi	r18, 0x01	; 1
    5514:	8a 36       	cpi	r24, 0x6A	; 106
    5516:	92 07       	cpc	r25, r18
    5518:	0c f4       	brge	.+2      	; 0x551c <handleCalibration+0x3e>
    551a:	8a c1       	rjmp	.+788    	; 0x5830 <handleCalibration+0x352>
					updateOdomData();
                    calibState = 4;
                    timeoutOdometry = getTime100MicroSec();;
				}
			}
			if((getTime100MicroSec() - timeoutOdometry)>PAUSE_60_SEC) {    // the robot seems to be still, go to next velcoity
    551c:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
    5520:	20 91 2c 0b 	lds	r18, 0x0B2C
    5524:	30 91 2d 0b 	lds	r19, 0x0B2D
    5528:	40 91 2e 0b 	lds	r20, 0x0B2E
    552c:	50 91 2f 0b 	lds	r21, 0x0B2F
    5530:	62 1b       	sub	r22, r18
    5532:	73 0b       	sbc	r23, r19
    5534:	84 0b       	sbc	r24, r20
    5536:	95 0b       	sbc	r25, r21
    5538:	6c 39       	cpi	r22, 0x9C	; 156
    553a:	2d ec       	ldi	r18, 0xCD	; 205
    553c:	72 07       	cpc	r23, r18
    553e:	28 e0       	ldi	r18, 0x08	; 8
    5540:	82 07       	cpc	r24, r18
    5542:	20 e0       	ldi	r18, 0x00	; 0
    5544:	92 07       	cpc	r25, r18
    5546:	d8 f1       	brcs	.+118    	; 0x55be <handleCalibration+0xe0>
            	tempVel = 0;
    5548:	10 92 72 0b 	sts	0x0B72, r1
    554c:	10 92 71 0b 	sts	0x0B71, r1
				avgLeftSpeed = 0;
    5550:	10 92 c5 04 	sts	0x04C5, r1
    5554:	10 92 c4 04 	sts	0x04C4, r1
				avgRightSpeed = 0;
    5558:	10 92 c7 04 	sts	0x04C7, r1
    555c:	10 92 c6 04 	sts	0x04C6, r1
                updateOdomData();
    5560:	0e 94 88 29 	call	0x5310	; 0x5310 <updateOdomData>
                calibState = 5;
    5564:	85 e0       	ldi	r24, 0x05	; 5
    5566:	80 93 5c 0b 	sts	0x0B5C, r24
    556a:	08 95       	ret

}

void handleCalibration() {

	switch(calibState) {
    556c:	88 23       	and	r24, r24
    556e:	29 f5       	brne	.+74     	; 0x55ba <handleCalibration+0xdc>

    	case 0: // set speed
        	if(calibWheel == LEFT_WHEEL_FW_SC) {
    5570:	80 91 4c 05 	lds	r24, 0x054C
    5574:	88 23       	and	r24, r24
    5576:	09 f0       	breq	.+2      	; 0x557a <handleCalibration+0x9c>
    5578:	3c c1       	rjmp	.+632    	; 0x57f2 <handleCalibration+0x314>
				pwm_intermediate_right_desired = 0;
    557a:	10 92 0e 03 	sts	0x030E, r1
    557e:	10 92 0d 03 	sts	0x030D, r1
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
    5582:	90 91 b6 08 	lds	r25, 0x08B6
    5586:	85 e0       	ldi	r24, 0x05	; 5
    5588:	98 9f       	mul	r25, r24
    558a:	c0 01       	movw	r24, r0
    558c:	11 24       	eor	r1, r1
    558e:	88 0f       	add	r24, r24
    5590:	99 1f       	adc	r25, r25
    5592:	88 0f       	add	r24, r24
    5594:	99 1f       	adc	r25, r25
    5596:	90 93 10 03 	sts	0x0310, r25
    559a:	80 93 0f 03 	sts	0x030F, r24
				pwm_intermediate_left_desired = -((INDEX_STEP*calibVelIndex)<<2);
        	} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
				pwm_intermediate_right_desired = -((INDEX_STEP*calibVelIndex)<<2);
				pwm_intermediate_left_desired = 0;
			}               
            calibState = 1;
    559e:	81 e0       	ldi	r24, 0x01	; 1
    55a0:	80 93 5c 0b 	sts	0x0B5C, r24
            timeoutOdometry = getTime100MicroSec();
    55a4:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
    55a8:	60 93 2c 0b 	sts	0x0B2C, r22
    55ac:	70 93 2d 0b 	sts	0x0B2D, r23
    55b0:	80 93 2e 0b 	sts	0x0B2E, r24
    55b4:	90 93 2f 0b 	sts	0x0B2F, r25
            break;
    55b8:	08 95       	ret

}

void handleCalibration() {

	switch(calibState) {
    55ba:	81 30       	cpi	r24, 0x01	; 1
    55bc:	71 f0       	breq	.+28     	; 0x55da <handleCalibration+0xfc>
    55be:	08 95       	ret
    55c0:	85 30       	cpi	r24, 0x05	; 5
    55c2:	e9 f7       	brne	.-6      	; 0x55be <handleCalibration+0xe0>
                calibState = 5;
			}
            break;

		case 5:
        	calibVelIndex++;
    55c4:	80 91 b6 08 	lds	r24, 0x08B6
    55c8:	8f 5f       	subi	r24, 0xFF	; 255
    55ca:	80 93 b6 08 	sts	0x08B6, r24
            if(calibVelIndex == 10) {
    55ce:	8a 30       	cpi	r24, 0x0A	; 10
    55d0:	09 f4       	brne	.+2      	; 0x55d4 <handleCalibration+0xf6>
    55d2:	8b c1       	rjmp	.+790    	; 0x58ea <handleCalibration+0x40c>
					// red off
					writeCalibrationToFlash();
					calibrateOdomFlag = 0;
				}
			}
			calibState = 0;
    55d4:	10 92 5c 0b 	sts	0x0B5C, r1
    55d8:	08 95       	ret
            calibState = 1;
            timeoutOdometry = getTime100MicroSec();
            break;

		case 1: // look for black line, start time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    55da:	80 91 4c 05 	lds	r24, 0x054C
    55de:	88 23       	and	r24, r24
    55e0:	09 f4       	brne	.+2      	; 0x55e4 <handleCalibration+0x106>
    55e2:	d0 c0       	rjmp	.+416    	; 0x5784 <handleCalibration+0x2a6>
    55e4:	82 30       	cpi	r24, 0x02	; 2
    55e6:	09 f4       	brne	.+2      	; 0x55ea <handleCalibration+0x10c>
    55e8:	cd c0       	rjmp	.+410    	; 0x5784 <handleCalibration+0x2a6>
                    timeOdometry = getTime100MicroSec();;
                    calibState = 2;
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
            	if(proximityResult[11]<(512-2*HYSTERESIS_THR)) {
    55ea:	80 91 7f 02 	lds	r24, 0x027F
    55ee:	90 91 80 02 	lds	r25, 0x0280
    55f2:	21 e0       	ldi	r18, 0x01	; 1
    55f4:	8a 36       	cpi	r24, 0x6A	; 106
    55f6:	92 07       	cpc	r25, r18
    55f8:	0c f0       	brlt	.+2      	; 0x55fc <handleCalibration+0x11e>
    55fa:	90 cf       	rjmp	.-224    	; 0x551c <handleCalibration+0x3e>
				//if((proximityResult[11])<(proximityOffset[11]>>1)) {	
					rightSumCount = 0;
    55fc:	10 92 c3 04 	sts	0x04C3, r1
    5600:	10 92 c2 04 	sts	0x04C2, r1
					rightSpeedSumOdom = 0;
    5604:	10 92 bc 04 	sts	0x04BC, r1
    5608:	10 92 bd 04 	sts	0x04BD, r1
    560c:	10 92 be 04 	sts	0x04BE, r1
    5610:	10 92 bf 04 	sts	0x04BF, r1
    5614:	cc c0       	rjmp	.+408    	; 0x57ae <handleCalibration+0x2d0>
                calibState = 5;
			}
            break;

		case 4: // exit from black line again
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    5616:	80 91 4c 05 	lds	r24, 0x054C
    561a:	88 23       	and	r24, r24
    561c:	49 f1       	breq	.+82     	; 0x5670 <handleCalibration+0x192>
    561e:	82 30       	cpi	r24, 0x02	; 2
    5620:	39 f1       	breq	.+78     	; 0x5670 <handleCalibration+0x192>
            	if(proximityResult[8]>(512-HYSTERESIS_THR)) {
				//if((proximityResult[8])>(proximityOffset[8]>>1)) {	
                	calibState = 5;
				}
			} else {
            	if(proximityResult[11]>(512-HYSTERESIS_THR)) {
    5622:	80 91 7f 02 	lds	r24, 0x027F
    5626:	90 91 80 02 	lds	r25, 0x0280
    562a:	21 e0       	ldi	r18, 0x01	; 1
    562c:	86 3b       	cpi	r24, 0xB6	; 182
    562e:	92 07       	cpc	r25, r18
    5630:	3c f5       	brge	.+78     	; 0x5680 <handleCalibration+0x1a2>
				//if((proximityResult[11])>(proximityOffset[11]>>1)) {	
					calibState = 5;
				}
			}
            if((getTime100MicroSec() - timeoutOdometry)>PAUSE_60_SEC) {    // the robot seems to be still, go to next velocity
    5632:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
    5636:	20 91 2c 0b 	lds	r18, 0x0B2C
    563a:	30 91 2d 0b 	lds	r19, 0x0B2D
    563e:	40 91 2e 0b 	lds	r20, 0x0B2E
    5642:	50 91 2f 0b 	lds	r21, 0x0B2F
    5646:	62 1b       	sub	r22, r18
    5648:	73 0b       	sbc	r23, r19
    564a:	84 0b       	sbc	r24, r20
    564c:	95 0b       	sbc	r25, r21
    564e:	6c 39       	cpi	r22, 0x9C	; 156
    5650:	2d ec       	ldi	r18, 0xCD	; 205
    5652:	72 07       	cpc	r23, r18
    5654:	28 e0       	ldi	r18, 0x08	; 8
    5656:	82 07       	cpc	r24, r18
    5658:	20 e0       	ldi	r18, 0x00	; 0
    565a:	92 07       	cpc	r25, r18
    565c:	08 f4       	brcc	.+2      	; 0x5660 <handleCalibration+0x182>
    565e:	af cf       	rjmp	.-162    	; 0x55be <handleCalibration+0xe0>
            	tempVel = 0;
    5660:	10 92 72 0b 	sts	0x0B72, r1
    5664:	10 92 71 0b 	sts	0x0B71, r1
                //updateOdomData();
                calibState = 5;
    5668:	85 e0       	ldi	r24, 0x05	; 5
    566a:	80 93 5c 0b 	sts	0x0B5C, r24
    566e:	08 95       	ret
			}
            break;

		case 4: // exit from black line again
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
            	if(proximityResult[8]>(512-HYSTERESIS_THR)) {
    5670:	80 91 79 02 	lds	r24, 0x0279
    5674:	90 91 7a 02 	lds	r25, 0x027A
    5678:	21 e0       	ldi	r18, 0x01	; 1
    567a:	86 3b       	cpi	r24, 0xB6	; 182
    567c:	92 07       	cpc	r25, r18
    567e:	cc f2       	brlt	.-78     	; 0x5632 <handleCalibration+0x154>
                	calibState = 5;
				}
			} else {
            	if(proximityResult[11]>(512-HYSTERESIS_THR)) {
				//if((proximityResult[11])>(proximityOffset[11]>>1)) {	
					calibState = 5;
    5680:	85 e0       	ldi	r24, 0x05	; 5
    5682:	80 93 5c 0b 	sts	0x0B5C, r24
    5686:	d5 cf       	rjmp	.-86     	; 0x5632 <handleCalibration+0x154>
                calibState = 5;
			}
			break;

		case 2: // exit from black line
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    5688:	80 91 4c 05 	lds	r24, 0x054C
    568c:	88 23       	and	r24, r24
    568e:	09 f4       	brne	.+2      	; 0x5692 <handleCalibration+0x1b4>
    5690:	a6 c0       	rjmp	.+332    	; 0x57de <handleCalibration+0x300>
    5692:	82 30       	cpi	r24, 0x02	; 2
    5694:	09 f4       	brne	.+2      	; 0x5698 <handleCalibration+0x1ba>
    5696:	a3 c0       	rjmp	.+326    	; 0x57de <handleCalibration+0x300>
				//if((proximityResult[8])>(proximityOffset[8]>>1)) {	
                	calibState = 3;
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
            	if(proximityResult[11]>(512-HYSTERESIS_THR)) {
    5698:	80 91 7f 02 	lds	r24, 0x027F
    569c:	90 91 80 02 	lds	r25, 0x0280
    56a0:	21 e0       	ldi	r18, 0x01	; 1
    56a2:	86 3b       	cpi	r24, 0xB6	; 182
    56a4:	92 07       	cpc	r25, r18
    56a6:	0c f4       	brge	.+2      	; 0x56aa <handleCalibration+0x1cc>
    56a8:	39 cf       	rjmp	.-398    	; 0x551c <handleCalibration+0x3e>
				//if((proximityResult[11])>(proximityOffset[11]>>1)) {	
                	calibState = 3;
    56aa:	83 e0       	ldi	r24, 0x03	; 3
    56ac:	80 93 5c 0b 	sts	0x0B5C, r24
                    timeoutOdometry = getTime100MicroSec();;
    56b0:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
    56b4:	60 93 2c 0b 	sts	0x0B2C, r22
    56b8:	70 93 2d 0b 	sts	0x0B2D, r23
    56bc:	80 93 2e 0b 	sts	0x0B2E, r24
    56c0:	90 93 2f 0b 	sts	0x0B2F, r25
    56c4:	2b cf       	rjmp	.-426    	; 0x551c <handleCalibration+0x3e>
			}
            break;

		case 3: // look for black line again, stop time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
            	if(proximityResult[8]<(512-2*HYSTERESIS_THR)) {
    56c6:	80 91 79 02 	lds	r24, 0x0279
    56ca:	90 91 7a 02 	lds	r25, 0x027A
    56ce:	21 e0       	ldi	r18, 0x01	; 1
    56d0:	8a 36       	cpi	r24, 0x6A	; 106
    56d2:	92 07       	cpc	r25, r18
    56d4:	0c f0       	brlt	.+2      	; 0x56d8 <handleCalibration+0x1fa>
    56d6:	22 cf       	rjmp	.-444    	; 0x551c <handleCalibration+0x3e>
				//if((proximityResult[8])<(proximityOffset[8]>>1)) {	
                	timeOdometry = getTime100MicroSec() - timeOdometry;
    56d8:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
    56dc:	20 91 45 05 	lds	r18, 0x0545
    56e0:	30 91 46 05 	lds	r19, 0x0546
    56e4:	40 91 47 05 	lds	r20, 0x0547
    56e8:	50 91 48 05 	lds	r21, 0x0548
    56ec:	62 1b       	sub	r22, r18
    56ee:	73 0b       	sbc	r23, r19
    56f0:	84 0b       	sbc	r24, r20
    56f2:	95 0b       	sbc	r25, r21
    56f4:	60 93 45 05 	sts	0x0545, r22
    56f8:	70 93 46 05 	sts	0x0546, r23
    56fc:	80 93 47 05 	sts	0x0547, r24
    5700:	90 93 48 05 	sts	0x0548, r25
                    tempVel = (unsigned int)(DISTANCE_MM/((float)timeOdometry*104.0/1000000.0));
    5704:	0e 94 e5 51 	call	0xa3ca	; 0xa3ca <__floatunsisf>
    5708:	20 e0       	ldi	r18, 0x00	; 0
    570a:	30 e0       	ldi	r19, 0x00	; 0
    570c:	40 ed       	ldi	r20, 0xD0	; 208
    570e:	52 e4       	ldi	r21, 0x42	; 66
    5710:	0e 94 00 53 	call	0xa600	; 0xa600 <__mulsf3>
    5714:	20 e0       	ldi	r18, 0x00	; 0
    5716:	34 e2       	ldi	r19, 0x24	; 36
    5718:	44 e7       	ldi	r20, 0x74	; 116
    571a:	59 e4       	ldi	r21, 0x49	; 73
    571c:	0e 94 4c 51 	call	0xa298	; 0xa298 <__divsf3>
    5720:	9b 01       	movw	r18, r22
    5722:	ac 01       	movw	r20, r24
    5724:	64 e1       	ldi	r22, 0x14	; 20
    5726:	7e e2       	ldi	r23, 0x2E	; 46
    5728:	88 e7       	ldi	r24, 0x78	; 120
    572a:	93 e4       	ldi	r25, 0x43	; 67
    572c:	0e 94 4c 51 	call	0xa298	; 0xa298 <__divsf3>
    5730:	0e 94 b9 51 	call	0xa372	; 0xa372 <__fixunssfsi>
    5734:	70 93 72 0b 	sts	0x0B72, r23
    5738:	60 93 71 0b 	sts	0x0B71, r22
					avgLeftSpeed = leftSpeedSumOdom/leftSumCount;
    573c:	20 91 c0 04 	lds	r18, 0x04C0
    5740:	30 91 c1 04 	lds	r19, 0x04C1
    5744:	40 e0       	ldi	r20, 0x00	; 0
    5746:	50 e0       	ldi	r21, 0x00	; 0
    5748:	60 91 b8 04 	lds	r22, 0x04B8
    574c:	70 91 b9 04 	lds	r23, 0x04B9
    5750:	80 91 ba 04 	lds	r24, 0x04BA
    5754:	90 91 bb 04 	lds	r25, 0x04BB
    5758:	0e 94 d1 53 	call	0xa7a2	; 0xa7a2 <__divmodsi4>
    575c:	30 93 c5 04 	sts	0x04C5, r19
    5760:	20 93 c4 04 	sts	0x04C4, r18
            	if(proximityResult[11]<(512-2*HYSTERESIS_THR)) {
				//if((proximityResult[11])<(proximityOffset[11]>>1)) {	
                	timeOdometry = getTime100MicroSec() - timeOdometry;
                    tempVel = (unsigned int)(DISTANCE_MM/((float)timeOdometry*104.0/1000000.0));
                    avgRightSpeed = rightSpeedSumOdom/rightSumCount;
					updateOdomData();
    5764:	0e 94 88 29 	call	0x5310	; 0x5310 <updateOdomData>
                    calibState = 4;
    5768:	84 e0       	ldi	r24, 0x04	; 4
    576a:	80 93 5c 0b 	sts	0x0B5C, r24
                    timeoutOdometry = getTime100MicroSec();;
    576e:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
    5772:	60 93 2c 0b 	sts	0x0B2C, r22
    5776:	70 93 2d 0b 	sts	0x0B2D, r23
    577a:	80 93 2e 0b 	sts	0x0B2E, r24
    577e:	90 93 2f 0b 	sts	0x0B2F, r25
    5782:	cc ce       	rjmp	.-616    	; 0x551c <handleCalibration+0x3e>
            timeoutOdometry = getTime100MicroSec();
            break;

		case 1: // look for black line, start time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
            	if(proximityResult[8]<(512-2*HYSTERESIS_THR)) {
    5784:	80 91 79 02 	lds	r24, 0x0279
    5788:	90 91 7a 02 	lds	r25, 0x027A
    578c:	21 e0       	ldi	r18, 0x01	; 1
    578e:	8a 36       	cpi	r24, 0x6A	; 106
    5790:	92 07       	cpc	r25, r18
    5792:	0c f0       	brlt	.+2      	; 0x5796 <handleCalibration+0x2b8>
    5794:	c3 ce       	rjmp	.-634    	; 0x551c <handleCalibration+0x3e>
				//if((proximityResult[8])<(proximityOffset[8]>>1)) {				
                	leftSumCount = 0;
    5796:	10 92 c1 04 	sts	0x04C1, r1
    579a:	10 92 c0 04 	sts	0x04C0, r1
                    leftSpeedSumOdom = 0;
    579e:	10 92 b8 04 	sts	0x04B8, r1
    57a2:	10 92 b9 04 	sts	0x04B9, r1
    57a6:	10 92 ba 04 	sts	0x04BA, r1
    57aa:	10 92 bb 04 	sts	0x04BB, r1
			} else {
            	if(proximityResult[11]<(512-2*HYSTERESIS_THR)) {
				//if((proximityResult[11])<(proximityOffset[11]>>1)) {	
					rightSumCount = 0;
					rightSpeedSumOdom = 0;
                    timeOdometry = getTime100MicroSec();;
    57ae:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
    57b2:	60 93 45 05 	sts	0x0545, r22
    57b6:	70 93 46 05 	sts	0x0546, r23
    57ba:	80 93 47 05 	sts	0x0547, r24
    57be:	90 93 48 05 	sts	0x0548, r25
                    calibState = 2;
    57c2:	82 e0       	ldi	r24, 0x02	; 2
    57c4:	80 93 5c 0b 	sts	0x0B5C, r24
                    timeoutOdometry = getTime100MicroSec();;
    57c8:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
    57cc:	60 93 2c 0b 	sts	0x0B2C, r22
    57d0:	70 93 2d 0b 	sts	0x0B2D, r23
    57d4:	80 93 2e 0b 	sts	0x0B2E, r24
    57d8:	90 93 2f 0b 	sts	0x0B2F, r25
    57dc:	9f ce       	rjmp	.-706    	; 0x551c <handleCalibration+0x3e>
			}
			break;

		case 2: // exit from black line
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
            	if(proximityResult[8]>(512-HYSTERESIS_THR)) {
    57de:	80 91 79 02 	lds	r24, 0x0279
    57e2:	90 91 7a 02 	lds	r25, 0x027A
    57e6:	21 e0       	ldi	r18, 0x01	; 1
    57e8:	86 3b       	cpi	r24, 0xB6	; 182
    57ea:	92 07       	cpc	r25, r18
    57ec:	0c f4       	brge	.+2      	; 0x57f0 <handleCalibration+0x312>
    57ee:	96 ce       	rjmp	.-724    	; 0x551c <handleCalibration+0x3e>
    57f0:	5c cf       	rjmp	.-328    	; 0x56aa <handleCalibration+0x1cc>

    	case 0: // set speed
        	if(calibWheel == LEFT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = 0;
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    57f2:	81 30       	cpi	r24, 0x01	; 1
    57f4:	09 f4       	brne	.+2      	; 0x57f8 <handleCalibration+0x31a>
    57f6:	84 c0       	rjmp	.+264    	; 0x5900 <handleCalibration+0x422>
				pwm_intermediate_right_desired = (INDEX_STEP*calibVelIndex)<<2;
				pwm_intermediate_left_desired = 0;
			} else if(calibWheel == LEFT_WHEEL_BW_SC) {
    57f8:	82 30       	cpi	r24, 0x02	; 2
    57fa:	09 f4       	brne	.+2      	; 0x57fe <handleCalibration+0x320>
    57fc:	60 c0       	rjmp	.+192    	; 0x58be <handleCalibration+0x3e0>
				pwm_intermediate_right_desired = 0;
				pwm_intermediate_left_desired = -((INDEX_STEP*calibVelIndex)<<2);
        	} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    57fe:	83 30       	cpi	r24, 0x03	; 3
    5800:	09 f0       	breq	.+2      	; 0x5804 <handleCalibration+0x326>
    5802:	cd ce       	rjmp	.-614    	; 0x559e <handleCalibration+0xc0>
				pwm_intermediate_right_desired = -((INDEX_STEP*calibVelIndex)<<2);
    5804:	90 91 b6 08 	lds	r25, 0x08B6
    5808:	85 e0       	ldi	r24, 0x05	; 5
    580a:	98 9f       	mul	r25, r24
    580c:	c0 01       	movw	r24, r0
    580e:	11 24       	eor	r1, r1
    5810:	88 0f       	add	r24, r24
    5812:	99 1f       	adc	r25, r25
    5814:	88 0f       	add	r24, r24
    5816:	99 1f       	adc	r25, r25
    5818:	90 95       	com	r25
    581a:	81 95       	neg	r24
    581c:	9f 4f       	sbci	r25, 0xFF	; 255
    581e:	90 93 0e 03 	sts	0x030E, r25
    5822:	80 93 0d 03 	sts	0x030D, r24
				pwm_intermediate_left_desired = 0;
    5826:	10 92 10 03 	sts	0x0310, r1
    582a:	10 92 0f 03 	sts	0x030F, r1
    582e:	b7 ce       	rjmp	.-658    	; 0x559e <handleCalibration+0xc0>
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
            	if(proximityResult[11]<(512-2*HYSTERESIS_THR)) {
				//if((proximityResult[11])<(proximityOffset[11]>>1)) {	
                	timeOdometry = getTime100MicroSec() - timeOdometry;
    5830:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
    5834:	20 91 45 05 	lds	r18, 0x0545
    5838:	30 91 46 05 	lds	r19, 0x0546
    583c:	40 91 47 05 	lds	r20, 0x0547
    5840:	50 91 48 05 	lds	r21, 0x0548
    5844:	62 1b       	sub	r22, r18
    5846:	73 0b       	sbc	r23, r19
    5848:	84 0b       	sbc	r24, r20
    584a:	95 0b       	sbc	r25, r21
    584c:	60 93 45 05 	sts	0x0545, r22
    5850:	70 93 46 05 	sts	0x0546, r23
    5854:	80 93 47 05 	sts	0x0547, r24
    5858:	90 93 48 05 	sts	0x0548, r25
                    tempVel = (unsigned int)(DISTANCE_MM/((float)timeOdometry*104.0/1000000.0));
    585c:	0e 94 e5 51 	call	0xa3ca	; 0xa3ca <__floatunsisf>
    5860:	20 e0       	ldi	r18, 0x00	; 0
    5862:	30 e0       	ldi	r19, 0x00	; 0
    5864:	40 ed       	ldi	r20, 0xD0	; 208
    5866:	52 e4       	ldi	r21, 0x42	; 66
    5868:	0e 94 00 53 	call	0xa600	; 0xa600 <__mulsf3>
    586c:	20 e0       	ldi	r18, 0x00	; 0
    586e:	34 e2       	ldi	r19, 0x24	; 36
    5870:	44 e7       	ldi	r20, 0x74	; 116
    5872:	59 e4       	ldi	r21, 0x49	; 73
    5874:	0e 94 4c 51 	call	0xa298	; 0xa298 <__divsf3>
    5878:	9b 01       	movw	r18, r22
    587a:	ac 01       	movw	r20, r24
    587c:	64 e1       	ldi	r22, 0x14	; 20
    587e:	7e e2       	ldi	r23, 0x2E	; 46
    5880:	88 e7       	ldi	r24, 0x78	; 120
    5882:	93 e4       	ldi	r25, 0x43	; 67
    5884:	0e 94 4c 51 	call	0xa298	; 0xa298 <__divsf3>
    5888:	0e 94 b9 51 	call	0xa372	; 0xa372 <__fixunssfsi>
    588c:	70 93 72 0b 	sts	0x0B72, r23
    5890:	60 93 71 0b 	sts	0x0B71, r22
                    avgRightSpeed = rightSpeedSumOdom/rightSumCount;
    5894:	20 91 c2 04 	lds	r18, 0x04C2
    5898:	30 91 c3 04 	lds	r19, 0x04C3
    589c:	40 e0       	ldi	r20, 0x00	; 0
    589e:	50 e0       	ldi	r21, 0x00	; 0
    58a0:	60 91 bc 04 	lds	r22, 0x04BC
    58a4:	70 91 bd 04 	lds	r23, 0x04BD
    58a8:	80 91 be 04 	lds	r24, 0x04BE
    58ac:	90 91 bf 04 	lds	r25, 0x04BF
    58b0:	0e 94 d1 53 	call	0xa7a2	; 0xa7a2 <__divmodsi4>
    58b4:	30 93 c7 04 	sts	0x04C7, r19
    58b8:	20 93 c6 04 	sts	0x04C6, r18
    58bc:	53 cf       	rjmp	.-346    	; 0x5764 <handleCalibration+0x286>
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = (INDEX_STEP*calibVelIndex)<<2;
				pwm_intermediate_left_desired = 0;
			} else if(calibWheel == LEFT_WHEEL_BW_SC) {
				pwm_intermediate_right_desired = 0;
    58be:	10 92 0e 03 	sts	0x030E, r1
    58c2:	10 92 0d 03 	sts	0x030D, r1
				pwm_intermediate_left_desired = -((INDEX_STEP*calibVelIndex)<<2);
    58c6:	90 91 b6 08 	lds	r25, 0x08B6
    58ca:	85 e0       	ldi	r24, 0x05	; 5
    58cc:	98 9f       	mul	r25, r24
    58ce:	c0 01       	movw	r24, r0
    58d0:	11 24       	eor	r1, r1
    58d2:	88 0f       	add	r24, r24
    58d4:	99 1f       	adc	r25, r25
    58d6:	88 0f       	add	r24, r24
    58d8:	99 1f       	adc	r25, r25
    58da:	90 95       	com	r25
    58dc:	81 95       	neg	r24
    58de:	9f 4f       	sbci	r25, 0xFF	; 255
    58e0:	90 93 10 03 	sts	0x0310, r25
    58e4:	80 93 0f 03 	sts	0x030F, r24
    58e8:	5a ce       	rjmp	.-844    	; 0x559e <handleCalibration+0xc0>
            break;

		case 5:
        	calibVelIndex++;
            if(calibVelIndex == 10) {
            	calibVelIndex = 1;
    58ea:	91 e0       	ldi	r25, 0x01	; 1
    58ec:	90 93 b6 08 	sts	0x08B6, r25
                if(calibWheel == LEFT_WHEEL_FW_SC) {
    58f0:	80 91 4c 05 	lds	r24, 0x054C
    58f4:	88 23       	and	r24, r24
    58f6:	b9 f4       	brne	.+46     	; 0x5926 <handleCalibration+0x448>
                	calibWheel = LEFT_WHEEL_BW_SC;
    58f8:	82 e0       	ldi	r24, 0x02	; 2
    58fa:	80 93 4c 05 	sts	0x054C, r24
    58fe:	6a ce       	rjmp	.-812    	; 0x55d4 <handleCalibration+0xf6>
    	case 0: // set speed
        	if(calibWheel == LEFT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = 0;
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = (INDEX_STEP*calibVelIndex)<<2;
    5900:	90 91 b6 08 	lds	r25, 0x08B6
    5904:	85 e0       	ldi	r24, 0x05	; 5
    5906:	98 9f       	mul	r25, r24
    5908:	c0 01       	movw	r24, r0
    590a:	11 24       	eor	r1, r1
    590c:	88 0f       	add	r24, r24
    590e:	99 1f       	adc	r25, r25
    5910:	88 0f       	add	r24, r24
    5912:	99 1f       	adc	r25, r25
    5914:	90 93 0e 03 	sts	0x030E, r25
    5918:	80 93 0d 03 	sts	0x030D, r24
				pwm_intermediate_left_desired = 0;
    591c:	10 92 10 03 	sts	0x0310, r1
    5920:	10 92 0f 03 	sts	0x030F, r1
    5924:	3c ce       	rjmp	.-904    	; 0x559e <handleCalibration+0xc0>
        	calibVelIndex++;
            if(calibVelIndex == 10) {
            	calibVelIndex = 1;
                if(calibWheel == LEFT_WHEEL_FW_SC) {
                	calibWheel = LEFT_WHEEL_BW_SC;
				} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    5926:	81 30       	cpi	r24, 0x01	; 1
    5928:	61 f0       	breq	.+24     	; 0x5942 <handleCalibration+0x464>
                	calibWheel = RIGHT_WHEEL_BW_SC;
				} else if(calibWheel == LEFT_WHEEL_BW_SC) {
    592a:	82 30       	cpi	r24, 0x02	; 2
    592c:	71 f0       	breq	.+28     	; 0x594a <handleCalibration+0x46c>
                	calibWheel = RIGHT_WHEEL_FW_SC;
					calibrateOdomFlag = 0;
					// red on
				} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    592e:	83 30       	cpi	r24, 0x03	; 3
    5930:	09 f0       	breq	.+2      	; 0x5934 <handleCalibration+0x456>
    5932:	50 ce       	rjmp	.-864    	; 0x55d4 <handleCalibration+0xf6>
                	calibWheel = LEFT_WHEEL_FW_SC;					
    5934:	10 92 4c 05 	sts	0x054C, r1
					// red off
					writeCalibrationToFlash();
    5938:	0e 94 9a 45 	call	0x8b34	; 0x8b34 <writeCalibrationToFlash>
					calibrateOdomFlag = 0;
    593c:	10 92 67 05 	sts	0x0567, r1
    5940:	49 ce       	rjmp	.-878    	; 0x55d4 <handleCalibration+0xf6>
            if(calibVelIndex == 10) {
            	calibVelIndex = 1;
                if(calibWheel == LEFT_WHEEL_FW_SC) {
                	calibWheel = LEFT_WHEEL_BW_SC;
				} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
                	calibWheel = RIGHT_WHEEL_BW_SC;
    5942:	83 e0       	ldi	r24, 0x03	; 3
    5944:	80 93 4c 05 	sts	0x054C, r24
    5948:	45 ce       	rjmp	.-886    	; 0x55d4 <handleCalibration+0xf6>
				} else if(calibWheel == LEFT_WHEEL_BW_SC) {
                	calibWheel = RIGHT_WHEEL_FW_SC;
    594a:	90 93 4c 05 	sts	0x054C, r25
					calibrateOdomFlag = 0;
    594e:	10 92 67 05 	sts	0x0567, r1
    5952:	40 ce       	rjmp	.-896    	; 0x55d4 <handleCalibration+0xf6>

00005954 <getInputFromSpeed>:

}

// extract data to pass to speed controller given a desired speed in mm/s
// mode => return a measured speed 0..1023
signed int getInputFromSpeed(signed int s, unsigned char mode) {
    5954:	af 92       	push	r10
    5956:	bf 92       	push	r11
    5958:	cf 92       	push	r12
    595a:	df 92       	push	r13
    595c:	ef 92       	push	r14
    595e:	ff 92       	push	r15
    5960:	0f 93       	push	r16
    5962:	1f 93       	push	r17
    5964:	cf 93       	push	r28
    5966:	df 93       	push	r29
    
    int i = 0;
    signed int currVel = s*BYTE_TO_MM_S;
    5968:	9c 01       	movw	r18, r24
    596a:	22 0f       	add	r18, r18
    596c:	33 1f       	adc	r19, r19
    596e:	22 0f       	add	r18, r18
    5970:	33 1f       	adc	r19, r19
    5972:	28 0f       	add	r18, r24
    5974:	39 1f       	adc	r19, r25
    signed int temp = 0;

    if(currVel == 0) {
    5976:	21 15       	cp	r18, r1
    5978:	31 05       	cpc	r19, r1
    597a:	09 f4       	brne	.+2      	; 0x597e <getInputFromSpeed+0x2a>
    597c:	7b c0       	rjmp	.+246    	; 0x5a74 <getInputFromSpeed+0x120>
        return 0;
    }

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
    597e:	86 2f       	mov	r24, r22
    5980:	82 50       	subi	r24, 0x02	; 2
    5982:	82 30       	cpi	r24, 0x02	; 2
    5984:	08 f4       	brcc	.+2      	; 0x5988 <getInputFromSpeed+0x34>
    5986:	84 c0       	rjmp	.+264    	; 0x5a90 <getInputFromSpeed+0x13c>
        currVel = -currVel; // consider only positive values
    5988:	66 23       	and	r22, r22
    598a:	09 f0       	breq	.+2      	; 0x598e <getInputFromSpeed+0x3a>
    598c:	84 c0       	rjmp	.+264    	; 0x5a96 <getInputFromSpeed+0x142>
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
    598e:	80 91 df 08 	lds	r24, 0x08DF
    5992:	90 91 e0 08 	lds	r25, 0x08E0
    5996:	82 17       	cp	r24, r18
    5998:	93 07       	cpc	r25, r19
    599a:	0c f0       	brlt	.+2      	; 0x599e <getInputFromSpeed+0x4a>
    599c:	1b c2       	rjmp	.+1078   	; 0x5dd4 <getInputFromSpeed+0x480>
    599e:	80 91 ef 08 	lds	r24, 0x08EF
    59a2:	90 91 f0 08 	lds	r25, 0x08F0
    59a6:	82 17       	cp	r24, r18
    59a8:	93 07       	cpc	r25, r19
    59aa:	0c f0       	brlt	.+2      	; 0x59ae <getInputFromSpeed+0x5a>
    59ac:	1c c2       	rjmp	.+1080   	; 0x5de6 <getInputFromSpeed+0x492>
    59ae:	80 91 ff 08 	lds	r24, 0x08FF
    59b2:	90 91 00 09 	lds	r25, 0x0900
    59b6:	82 17       	cp	r24, r18
    59b8:	93 07       	cpc	r25, r19
    59ba:	0c f0       	brlt	.+2      	; 0x59be <getInputFromSpeed+0x6a>
    59bc:	17 c2       	rjmp	.+1070   	; 0x5dec <getInputFromSpeed+0x498>
    59be:	80 91 0f 09 	lds	r24, 0x090F
    59c2:	90 91 10 09 	lds	r25, 0x0910
    59c6:	82 17       	cp	r24, r18
    59c8:	93 07       	cpc	r25, r19
    59ca:	0c f0       	brlt	.+2      	; 0x59ce <getInputFromSpeed+0x7a>
    59cc:	12 c2       	rjmp	.+1060   	; 0x5df2 <getInputFromSpeed+0x49e>
    59ce:	80 91 1f 09 	lds	r24, 0x091F
    59d2:	90 91 20 09 	lds	r25, 0x0920
    59d6:	82 17       	cp	r24, r18
    59d8:	93 07       	cpc	r25, r19
    59da:	0c f0       	brlt	.+2      	; 0x59de <getInputFromSpeed+0x8a>
    59dc:	fe c1       	rjmp	.+1020   	; 0x5dda <getInputFromSpeed+0x486>
    59de:	80 91 2f 09 	lds	r24, 0x092F
    59e2:	90 91 30 09 	lds	r25, 0x0930
    59e6:	82 17       	cp	r24, r18
    59e8:	93 07       	cpc	r25, r19
    59ea:	0c f0       	brlt	.+2      	; 0x59ee <getInputFromSpeed+0x9a>
    59ec:	f9 c1       	rjmp	.+1010   	; 0x5de0 <getInputFromSpeed+0x48c>
    59ee:	80 91 3f 09 	lds	r24, 0x093F
    59f2:	90 91 40 09 	lds	r25, 0x0940
    59f6:	82 17       	cp	r24, r18
    59f8:	93 07       	cpc	r25, r19
    59fa:	0c f0       	brlt	.+2      	; 0x59fe <getInputFromSpeed+0xaa>
    59fc:	02 c2       	rjmp	.+1028   	; 0x5e02 <getInputFromSpeed+0x4ae>
    59fe:	80 91 4f 09 	lds	r24, 0x094F
    5a02:	90 91 50 09 	lds	r25, 0x0950
    5a06:	82 17       	cp	r24, r18
    5a08:	93 07       	cpc	r25, r19
    5a0a:	0c f0       	brlt	.+2      	; 0x5a0e <getInputFromSpeed+0xba>
    5a0c:	fd c1       	rjmp	.+1018   	; 0x5e08 <getInputFromSpeed+0x4b4>
    5a0e:	c0 91 5f 09 	lds	r28, 0x095F
    5a12:	d0 91 60 09 	lds	r29, 0x0960
    5a16:	c2 17       	cp	r28, r18
    5a18:	d3 07       	cpc	r29, r19
    5a1a:	0c f0       	brlt	.+2      	; 0x5a1e <getInputFromSpeed+0xca>
    5a1c:	7a c1       	rjmp	.+756    	; 0x5d12 <getInputFromSpeed+0x3be>
            temp = currVel*calibration[0][6]/calibration[0][7];
            temp = -temp;
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
    5a1e:	b9 01       	movw	r22, r18
    5a20:	88 27       	eor	r24, r24
    5a22:	77 fd       	sbrc	r23, 7
    5a24:	80 95       	com	r24
    5a26:	98 2f       	mov	r25, r24
    5a28:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <__floatsisf>
    5a2c:	7b 01       	movw	r14, r22
    5a2e:	8c 01       	movw	r16, r24
    5a30:	60 91 5d 09 	lds	r22, 0x095D
    5a34:	70 91 5e 09 	lds	r23, 0x095E
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
    5a38:	88 27       	eor	r24, r24
    5a3a:	77 fd       	sbrc	r23, 7
    5a3c:	80 95       	com	r24
    5a3e:	98 2f       	mov	r25, r24
    5a40:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <__floatsisf>
    5a44:	9b 01       	movw	r18, r22
    5a46:	ac 01       	movw	r20, r24
    5a48:	c8 01       	movw	r24, r16
    5a4a:	b7 01       	movw	r22, r14
    5a4c:	0e 94 00 53 	call	0xa600	; 0xa600 <__mulsf3>
    5a50:	7b 01       	movw	r14, r22
    5a52:	8c 01       	movw	r16, r24
    5a54:	be 01       	movw	r22, r28
    5a56:	88 27       	eor	r24, r24
    5a58:	77 fd       	sbrc	r23, 7
    5a5a:	80 95       	com	r24
    5a5c:	98 2f       	mov	r25, r24
    5a5e:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <__floatsisf>
    5a62:	9b 01       	movw	r18, r22
    5a64:	ac 01       	movw	r20, r24
    5a66:	c8 01       	movw	r24, r16
    5a68:	b7 01       	movw	r22, r14
    5a6a:	0e 94 4c 51 	call	0xa298	; 0xa298 <__divsf3>
    5a6e:	0e 94 b4 51 	call	0xa368	; 0xa368 <__fixsfsi>
    5a72:	02 c0       	rjmp	.+4      	; 0x5a78 <getInputFromSpeed+0x124>
// mode => return a measured speed 0..1023
signed int getInputFromSpeed(signed int s, unsigned char mode) {
    
    int i = 0;
    signed int currVel = s*BYTE_TO_MM_S;
    signed int temp = 0;
    5a74:	60 e0       	ldi	r22, 0x00	; 0
    5a76:	70 e0       	ldi	r23, 0x00	; 0
            temp = -temp;
        }        
    }
    
    return temp;
}
    5a78:	cb 01       	movw	r24, r22
    5a7a:	df 91       	pop	r29
    5a7c:	cf 91       	pop	r28
    5a7e:	1f 91       	pop	r17
    5a80:	0f 91       	pop	r16
    5a82:	ff 90       	pop	r15
    5a84:	ef 90       	pop	r14
    5a86:	df 90       	pop	r13
    5a88:	cf 90       	pop	r12
    5a8a:	bf 90       	pop	r11
    5a8c:	af 90       	pop	r10
    5a8e:	08 95       	ret
    if(currVel == 0) {
        return 0;
    }

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
        currVel = -currVel; // consider only positive values
    5a90:	30 95       	com	r19
    5a92:	21 95       	neg	r18
    5a94:	3f 4f       	sbci	r19, 0xFF	; 255
    5a96:	63 30       	cpi	r22, 0x03	; 3
    5a98:	09 f4       	brne	.+2      	; 0x5a9c <getInputFromSpeed+0x148>
    5a9a:	f3 c0       	rjmp	.+486    	; 0x5c82 <getInputFromSpeed+0x32e>
    5a9c:	62 30       	cpi	r22, 0x02	; 2
    5a9e:	01 f1       	breq	.+64     	; 0x5ae0 <getInputFromSpeed+0x18c>
    5aa0:	61 30       	cpi	r22, 0x01	; 1
    5aa2:	09 f4       	brne	.+2      	; 0x5aa6 <getInputFromSpeed+0x152>
    5aa4:	98 c0       	rjmp	.+304    	; 0x5bd6 <getInputFromSpeed+0x282>
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][6]/calibration[0][7];
            temp = -temp;
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
    5aa6:	66 23       	and	r22, r22
    5aa8:	09 f4       	brne	.+2      	; 0x5aac <getInputFromSpeed+0x158>
    5aaa:	90 c0       	rjmp	.+288    	; 0x5bcc <getInputFromSpeed+0x278>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
    5aac:	61 30       	cpi	r22, 0x01	; 1
    5aae:	09 f4       	brne	.+2      	; 0x5ab2 <getInputFromSpeed+0x15e>
    5ab0:	8c c1       	rjmp	.+792    	; 0x5dca <getInputFromSpeed+0x476>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
        } else if(mode==LEFT_WHEEL_BW_SC) {
    5ab2:	62 30       	cpi	r22, 0x02	; 2
    5ab4:	09 f4       	brne	.+2      	; 0x5ab8 <getInputFromSpeed+0x164>
    5ab6:	a0 c1       	rjmp	.+832    	; 0x5df8 <getInputFromSpeed+0x4a4>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][4]/(float)calibration[CALIBRATION_SAMPLES-1][5]);
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
    5ab8:	63 30       	cpi	r22, 0x03	; 3
    5aba:	e1 f6       	brne	.-72     	; 0x5a74 <getInputFromSpeed+0x120>
    5abc:	c0 91 6b 09 	lds	r28, 0x096B
    5ac0:	d0 91 6c 09 	lds	r29, 0x096C
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][6]/(float)calibration[CALIBRATION_SAMPLES-1][7]);
    5ac4:	b9 01       	movw	r22, r18
    5ac6:	88 27       	eor	r24, r24
    5ac8:	77 fd       	sbrc	r23, 7
    5aca:	80 95       	com	r24
    5acc:	98 2f       	mov	r25, r24
    5ace:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <__floatsisf>
    5ad2:	7b 01       	movw	r14, r22
    5ad4:	8c 01       	movw	r16, r24
    5ad6:	60 91 69 09 	lds	r22, 0x0969
    5ada:	70 91 6a 09 	lds	r23, 0x096A
    5ade:	55 c0       	rjmp	.+170    	; 0x5b8a <getInputFromSpeed+0x236>
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            if(calibration[i][3] >= currVel) {
                break;
            }
        } else if(mode==LEFT_WHEEL_BW_SC) {
            if(calibration[i][5] >= currVel) {
    5ae0:	80 91 e7 08 	lds	r24, 0x08E7
    5ae4:	90 91 e8 08 	lds	r25, 0x08E8
    5ae8:	82 17       	cp	r24, r18
    5aea:	93 07       	cpc	r25, r19
    5aec:	0c f0       	brlt	.+2      	; 0x5af0 <getInputFromSpeed+0x19c>
    5aee:	72 c1       	rjmp	.+740    	; 0x5dd4 <getInputFromSpeed+0x480>
    5af0:	80 91 f7 08 	lds	r24, 0x08F7
    5af4:	90 91 f8 08 	lds	r25, 0x08F8
    5af8:	82 17       	cp	r24, r18
    5afa:	93 07       	cpc	r25, r19
    5afc:	0c f0       	brlt	.+2      	; 0x5b00 <getInputFromSpeed+0x1ac>
    5afe:	73 c1       	rjmp	.+742    	; 0x5de6 <getInputFromSpeed+0x492>
    5b00:	80 91 07 09 	lds	r24, 0x0907
    5b04:	90 91 08 09 	lds	r25, 0x0908
    5b08:	82 17       	cp	r24, r18
    5b0a:	93 07       	cpc	r25, r19
    5b0c:	0c f0       	brlt	.+2      	; 0x5b10 <getInputFromSpeed+0x1bc>
    5b0e:	6e c1       	rjmp	.+732    	; 0x5dec <getInputFromSpeed+0x498>
    5b10:	80 91 17 09 	lds	r24, 0x0917
    5b14:	90 91 18 09 	lds	r25, 0x0918
    5b18:	82 17       	cp	r24, r18
    5b1a:	93 07       	cpc	r25, r19
    5b1c:	0c f0       	brlt	.+2      	; 0x5b20 <getInputFromSpeed+0x1cc>
    5b1e:	69 c1       	rjmp	.+722    	; 0x5df2 <getInputFromSpeed+0x49e>
    5b20:	80 91 27 09 	lds	r24, 0x0927
    5b24:	90 91 28 09 	lds	r25, 0x0928
    5b28:	82 17       	cp	r24, r18
    5b2a:	93 07       	cpc	r25, r19
    5b2c:	0c f0       	brlt	.+2      	; 0x5b30 <getInputFromSpeed+0x1dc>
    5b2e:	55 c1       	rjmp	.+682    	; 0x5dda <getInputFromSpeed+0x486>
    5b30:	80 91 37 09 	lds	r24, 0x0937
    5b34:	90 91 38 09 	lds	r25, 0x0938
    5b38:	82 17       	cp	r24, r18
    5b3a:	93 07       	cpc	r25, r19
    5b3c:	0c f0       	brlt	.+2      	; 0x5b40 <getInputFromSpeed+0x1ec>
    5b3e:	50 c1       	rjmp	.+672    	; 0x5de0 <getInputFromSpeed+0x48c>
    5b40:	80 91 47 09 	lds	r24, 0x0947
    5b44:	90 91 48 09 	lds	r25, 0x0948
    5b48:	82 17       	cp	r24, r18
    5b4a:	93 07       	cpc	r25, r19
    5b4c:	0c f0       	brlt	.+2      	; 0x5b50 <getInputFromSpeed+0x1fc>
    5b4e:	59 c1       	rjmp	.+690    	; 0x5e02 <getInputFromSpeed+0x4ae>
    5b50:	80 91 57 09 	lds	r24, 0x0957
    5b54:	90 91 58 09 	lds	r25, 0x0958
    5b58:	82 17       	cp	r24, r18
    5b5a:	93 07       	cpc	r25, r19
    5b5c:	0c f0       	brlt	.+2      	; 0x5b60 <getInputFromSpeed+0x20c>
    5b5e:	54 c1       	rjmp	.+680    	; 0x5e08 <getInputFromSpeed+0x4b4>
    5b60:	c0 91 67 09 	lds	r28, 0x0967
    5b64:	d0 91 68 09 	lds	r29, 0x0968
    5b68:	c2 17       	cp	r28, r18
    5b6a:	d3 07       	cpc	r29, r19
    5b6c:	0c f0       	brlt	.+2      	; 0x5b70 <getInputFromSpeed+0x21c>
    5b6e:	d1 c0       	rjmp	.+418    	; 0x5d12 <getInputFromSpeed+0x3be>
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][4]/(float)calibration[CALIBRATION_SAMPLES-1][5]);
    5b70:	b9 01       	movw	r22, r18
    5b72:	88 27       	eor	r24, r24
    5b74:	77 fd       	sbrc	r23, 7
    5b76:	80 95       	com	r24
    5b78:	98 2f       	mov	r25, r24
    5b7a:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <__floatsisf>
    5b7e:	7b 01       	movw	r14, r22
    5b80:	8c 01       	movw	r16, r24
    5b82:	60 91 65 09 	lds	r22, 0x0965
    5b86:	70 91 66 09 	lds	r23, 0x0966
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][6]/(float)calibration[CALIBRATION_SAMPLES-1][7]);
    5b8a:	88 27       	eor	r24, r24
    5b8c:	77 fd       	sbrc	r23, 7
    5b8e:	80 95       	com	r24
    5b90:	98 2f       	mov	r25, r24
    5b92:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <__floatsisf>
    5b96:	9b 01       	movw	r18, r22
    5b98:	ac 01       	movw	r20, r24
    5b9a:	c8 01       	movw	r24, r16
    5b9c:	b7 01       	movw	r22, r14
    5b9e:	0e 94 00 53 	call	0xa600	; 0xa600 <__mulsf3>
    5ba2:	7b 01       	movw	r14, r22
    5ba4:	8c 01       	movw	r16, r24
    5ba6:	be 01       	movw	r22, r28
    5ba8:	88 27       	eor	r24, r24
    5baa:	77 fd       	sbrc	r23, 7
    5bac:	80 95       	com	r24
    5bae:	98 2f       	mov	r25, r24
    5bb0:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <__floatsisf>
    5bb4:	9b 01       	movw	r18, r22
    5bb6:	ac 01       	movw	r20, r24
    5bb8:	c8 01       	movw	r24, r16
    5bba:	b7 01       	movw	r22, r14
    5bbc:	0e 94 4c 51 	call	0xa298	; 0xa298 <__divsf3>
    5bc0:	0e 94 b4 51 	call	0xa368	; 0xa368 <__fixsfsi>
            temp = -temp;
    5bc4:	70 95       	com	r23
    5bc6:	61 95       	neg	r22
    5bc8:	7f 4f       	sbci	r23, 0xFF	; 255
    5bca:	56 cf       	rjmp	.-340    	; 0x5a78 <getInputFromSpeed+0x124>
    5bcc:	c0 91 5f 09 	lds	r28, 0x095F
    5bd0:	d0 91 60 09 	lds	r29, 0x0960
    5bd4:	24 cf       	rjmp	.-440    	; 0x5a1e <getInputFromSpeed+0xca>
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
                break;
            }
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            if(calibration[i][3] >= currVel) {
    5bd6:	80 91 e3 08 	lds	r24, 0x08E3
    5bda:	90 91 e4 08 	lds	r25, 0x08E4
    5bde:	82 17       	cp	r24, r18
    5be0:	93 07       	cpc	r25, r19
    5be2:	0c f0       	brlt	.+2      	; 0x5be6 <getInputFromSpeed+0x292>
    5be4:	f7 c0       	rjmp	.+494    	; 0x5dd4 <getInputFromSpeed+0x480>
    5be6:	80 91 f3 08 	lds	r24, 0x08F3
    5bea:	90 91 f4 08 	lds	r25, 0x08F4
    5bee:	82 17       	cp	r24, r18
    5bf0:	93 07       	cpc	r25, r19
    5bf2:	0c f0       	brlt	.+2      	; 0x5bf6 <getInputFromSpeed+0x2a2>
    5bf4:	f8 c0       	rjmp	.+496    	; 0x5de6 <getInputFromSpeed+0x492>
    5bf6:	80 91 03 09 	lds	r24, 0x0903
    5bfa:	90 91 04 09 	lds	r25, 0x0904
    5bfe:	82 17       	cp	r24, r18
    5c00:	93 07       	cpc	r25, r19
    5c02:	0c f0       	brlt	.+2      	; 0x5c06 <getInputFromSpeed+0x2b2>
    5c04:	f3 c0       	rjmp	.+486    	; 0x5dec <getInputFromSpeed+0x498>
    5c06:	80 91 13 09 	lds	r24, 0x0913
    5c0a:	90 91 14 09 	lds	r25, 0x0914
    5c0e:	82 17       	cp	r24, r18
    5c10:	93 07       	cpc	r25, r19
    5c12:	0c f0       	brlt	.+2      	; 0x5c16 <getInputFromSpeed+0x2c2>
    5c14:	ee c0       	rjmp	.+476    	; 0x5df2 <getInputFromSpeed+0x49e>
    5c16:	80 91 23 09 	lds	r24, 0x0923
    5c1a:	90 91 24 09 	lds	r25, 0x0924
    5c1e:	82 17       	cp	r24, r18
    5c20:	93 07       	cpc	r25, r19
    5c22:	0c f0       	brlt	.+2      	; 0x5c26 <getInputFromSpeed+0x2d2>
    5c24:	da c0       	rjmp	.+436    	; 0x5dda <getInputFromSpeed+0x486>
    5c26:	80 91 33 09 	lds	r24, 0x0933
    5c2a:	90 91 34 09 	lds	r25, 0x0934
    5c2e:	82 17       	cp	r24, r18
    5c30:	93 07       	cpc	r25, r19
    5c32:	0c f0       	brlt	.+2      	; 0x5c36 <getInputFromSpeed+0x2e2>
    5c34:	d5 c0       	rjmp	.+426    	; 0x5de0 <getInputFromSpeed+0x48c>
    5c36:	80 91 43 09 	lds	r24, 0x0943
    5c3a:	90 91 44 09 	lds	r25, 0x0944
    5c3e:	82 17       	cp	r24, r18
    5c40:	93 07       	cpc	r25, r19
    5c42:	0c f0       	brlt	.+2      	; 0x5c46 <getInputFromSpeed+0x2f2>
    5c44:	de c0       	rjmp	.+444    	; 0x5e02 <getInputFromSpeed+0x4ae>
    5c46:	80 91 53 09 	lds	r24, 0x0953
    5c4a:	90 91 54 09 	lds	r25, 0x0954
    5c4e:	82 17       	cp	r24, r18
    5c50:	93 07       	cpc	r25, r19
    5c52:	0c f0       	brlt	.+2      	; 0x5c56 <getInputFromSpeed+0x302>
    5c54:	d9 c0       	rjmp	.+434    	; 0x5e08 <getInputFromSpeed+0x4b4>
    5c56:	c0 91 63 09 	lds	r28, 0x0963
    5c5a:	d0 91 64 09 	lds	r29, 0x0964
    5c5e:	c2 17       	cp	r28, r18
    5c60:	d3 07       	cpc	r29, r19
    5c62:	0c f0       	brlt	.+2      	; 0x5c66 <getInputFromSpeed+0x312>
    5c64:	56 c0       	rjmp	.+172    	; 0x5d12 <getInputFromSpeed+0x3be>
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
    5c66:	b9 01       	movw	r22, r18
    5c68:	88 27       	eor	r24, r24
    5c6a:	77 fd       	sbrc	r23, 7
    5c6c:	80 95       	com	r24
    5c6e:	98 2f       	mov	r25, r24
    5c70:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <__floatsisf>
    5c74:	7b 01       	movw	r14, r22
    5c76:	8c 01       	movw	r16, r24
    5c78:	60 91 61 09 	lds	r22, 0x0961
    5c7c:	70 91 62 09 	lds	r23, 0x0962
    5c80:	db ce       	rjmp	.-586    	; 0x5a38 <getInputFromSpeed+0xe4>
        } else if(mode==LEFT_WHEEL_BW_SC) {
            if(calibration[i][5] >= currVel) {
                break;
            }
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            if(calibration[i][7] >= currVel) {
    5c82:	80 91 eb 08 	lds	r24, 0x08EB
    5c86:	90 91 ec 08 	lds	r25, 0x08EC
    5c8a:	82 17       	cp	r24, r18
    5c8c:	93 07       	cpc	r25, r19
    5c8e:	0c f0       	brlt	.+2      	; 0x5c92 <getInputFromSpeed+0x33e>
    5c90:	a1 c0       	rjmp	.+322    	; 0x5dd4 <getInputFromSpeed+0x480>
    5c92:	80 91 fb 08 	lds	r24, 0x08FB
    5c96:	90 91 fc 08 	lds	r25, 0x08FC
    5c9a:	82 17       	cp	r24, r18
    5c9c:	93 07       	cpc	r25, r19
    5c9e:	0c f0       	brlt	.+2      	; 0x5ca2 <getInputFromSpeed+0x34e>
    5ca0:	a2 c0       	rjmp	.+324    	; 0x5de6 <getInputFromSpeed+0x492>
    5ca2:	80 91 0b 09 	lds	r24, 0x090B
    5ca6:	90 91 0c 09 	lds	r25, 0x090C
    5caa:	82 17       	cp	r24, r18
    5cac:	93 07       	cpc	r25, r19
    5cae:	0c f0       	brlt	.+2      	; 0x5cb2 <getInputFromSpeed+0x35e>
    5cb0:	9d c0       	rjmp	.+314    	; 0x5dec <getInputFromSpeed+0x498>
    5cb2:	80 91 1b 09 	lds	r24, 0x091B
    5cb6:	90 91 1c 09 	lds	r25, 0x091C
    5cba:	82 17       	cp	r24, r18
    5cbc:	93 07       	cpc	r25, r19
    5cbe:	0c f0       	brlt	.+2      	; 0x5cc2 <getInputFromSpeed+0x36e>
    5cc0:	98 c0       	rjmp	.+304    	; 0x5df2 <getInputFromSpeed+0x49e>
    5cc2:	80 91 2b 09 	lds	r24, 0x092B
    5cc6:	90 91 2c 09 	lds	r25, 0x092C
    5cca:	82 17       	cp	r24, r18
    5ccc:	93 07       	cpc	r25, r19
    5cce:	0c f0       	brlt	.+2      	; 0x5cd2 <getInputFromSpeed+0x37e>
    5cd0:	84 c0       	rjmp	.+264    	; 0x5dda <getInputFromSpeed+0x486>
    5cd2:	80 91 3b 09 	lds	r24, 0x093B
    5cd6:	90 91 3c 09 	lds	r25, 0x093C
    5cda:	82 17       	cp	r24, r18
    5cdc:	93 07       	cpc	r25, r19
    5cde:	0c f0       	brlt	.+2      	; 0x5ce2 <getInputFromSpeed+0x38e>
    5ce0:	7f c0       	rjmp	.+254    	; 0x5de0 <getInputFromSpeed+0x48c>
    5ce2:	80 91 4b 09 	lds	r24, 0x094B
    5ce6:	90 91 4c 09 	lds	r25, 0x094C
    5cea:	82 17       	cp	r24, r18
    5cec:	93 07       	cpc	r25, r19
    5cee:	0c f0       	brlt	.+2      	; 0x5cf2 <getInputFromSpeed+0x39e>
    5cf0:	88 c0       	rjmp	.+272    	; 0x5e02 <getInputFromSpeed+0x4ae>
    5cf2:	80 91 5b 09 	lds	r24, 0x095B
    5cf6:	90 91 5c 09 	lds	r25, 0x095C
    5cfa:	82 17       	cp	r24, r18
    5cfc:	93 07       	cpc	r25, r19
    5cfe:	0c f0       	brlt	.+2      	; 0x5d02 <getInputFromSpeed+0x3ae>
    5d00:	83 c0       	rjmp	.+262    	; 0x5e08 <getInputFromSpeed+0x4b4>
    5d02:	c0 91 6b 09 	lds	r28, 0x096B
    5d06:	d0 91 6c 09 	lds	r29, 0x096C
    5d0a:	c2 17       	cp	r28, r18
    5d0c:	d3 07       	cpc	r29, r19
    5d0e:	0c f4       	brge	.+2      	; 0x5d12 <getInputFromSpeed+0x3be>
    5d10:	d9 ce       	rjmp	.-590    	; 0x5ac4 <getInputFromSpeed+0x170>
        currVel = -currVel; // consider only positive values
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
    5d12:	c8 e0       	ldi	r28, 0x08	; 8
    5d14:	d0 e0       	ldi	r29, 0x00	; 0
                break;
            }
        } 
    }

    if(i==0) {  // the velocity is lower than first saved in the matrix
    5d16:	20 97       	sbiw	r28, 0x00	; 0
    5d18:	09 f0       	breq	.+2      	; 0x5d1c <getInputFromSpeed+0x3c8>
    5d1a:	79 c0       	rjmp	.+242    	; 0x5e0e <getInputFromSpeed+0x4ba>
        if(mode==LEFT_WHEEL_FW_SC) {
    5d1c:	66 23       	and	r22, r22
    5d1e:	91 f4       	brne	.+36     	; 0x5d44 <getInputFromSpeed+0x3f0>
            temp = (currVel*calibration[0][0])/calibration[0][1];
    5d20:	40 91 dd 08 	lds	r20, 0x08DD
    5d24:	50 91 de 08 	lds	r21, 0x08DE
    5d28:	24 9f       	mul	r18, r20
    5d2a:	c0 01       	movw	r24, r0
    5d2c:	25 9f       	mul	r18, r21
    5d2e:	90 0d       	add	r25, r0
    5d30:	34 9f       	mul	r19, r20
    5d32:	90 0d       	add	r25, r0
    5d34:	11 24       	eor	r1, r1
    5d36:	60 91 df 08 	lds	r22, 0x08DF
    5d3a:	70 91 e0 08 	lds	r23, 0x08E0
    5d3e:	0e 94 be 53 	call	0xa77c	; 0xa77c <__divmodhi4>
    5d42:	9a ce       	rjmp	.-716    	; 0x5a78 <getInputFromSpeed+0x124>
        } else if(mode==RIGHT_WHEEL_FW_SC) {
    5d44:	61 30       	cpi	r22, 0x01	; 1
    5d46:	d1 f0       	breq	.+52     	; 0x5d7c <getInputFromSpeed+0x428>
            temp = (currVel*calibration[0][2])/calibration[0][3];
        } else if(mode==LEFT_WHEEL_BW_SC) {
    5d48:	62 30       	cpi	r22, 0x02	; 2
    5d4a:	51 f1       	breq	.+84     	; 0x5da0 <getInputFromSpeed+0x44c>
            temp = currVel*calibration[0][4]/calibration[0][5];
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
    5d4c:	63 30       	cpi	r22, 0x03	; 3
    5d4e:	09 f0       	breq	.+2      	; 0x5d52 <getInputFromSpeed+0x3fe>
    5d50:	91 ce       	rjmp	.-734    	; 0x5a74 <getInputFromSpeed+0x120>
            temp = currVel*calibration[0][6]/calibration[0][7];
    5d52:	40 91 e9 08 	lds	r20, 0x08E9
    5d56:	50 91 ea 08 	lds	r21, 0x08EA
    5d5a:	24 9f       	mul	r18, r20
    5d5c:	c0 01       	movw	r24, r0
    5d5e:	25 9f       	mul	r18, r21
    5d60:	90 0d       	add	r25, r0
    5d62:	34 9f       	mul	r19, r20
    5d64:	90 0d       	add	r25, r0
    5d66:	11 24       	eor	r1, r1
    5d68:	60 91 eb 08 	lds	r22, 0x08EB
    5d6c:	70 91 ec 08 	lds	r23, 0x08EC
    5d70:	0e 94 be 53 	call	0xa77c	; 0xa77c <__divmodhi4>
            temp = -temp;
    5d74:	70 95       	com	r23
    5d76:	61 95       	neg	r22
    5d78:	7f 4f       	sbci	r23, 0xFF	; 255
    5d7a:	7e ce       	rjmp	.-772    	; 0x5a78 <getInputFromSpeed+0x124>

    if(i==0) {  // the velocity is lower than first saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][0])/calibration[0][1];
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][2])/calibration[0][3];
    5d7c:	40 91 e1 08 	lds	r20, 0x08E1
    5d80:	50 91 e2 08 	lds	r21, 0x08E2
    5d84:	24 9f       	mul	r18, r20
    5d86:	c0 01       	movw	r24, r0
    5d88:	25 9f       	mul	r18, r21
    5d8a:	90 0d       	add	r25, r0
    5d8c:	34 9f       	mul	r19, r20
    5d8e:	90 0d       	add	r25, r0
    5d90:	11 24       	eor	r1, r1
    5d92:	60 91 e3 08 	lds	r22, 0x08E3
    5d96:	70 91 e4 08 	lds	r23, 0x08E4
    5d9a:	0e 94 be 53 	call	0xa77c	; 0xa77c <__divmodhi4>
    5d9e:	6c ce       	rjmp	.-808    	; 0x5a78 <getInputFromSpeed+0x124>
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][4]/calibration[0][5];
    5da0:	40 91 e5 08 	lds	r20, 0x08E5
    5da4:	50 91 e6 08 	lds	r21, 0x08E6
    5da8:	24 9f       	mul	r18, r20
    5daa:	c0 01       	movw	r24, r0
    5dac:	25 9f       	mul	r18, r21
    5dae:	90 0d       	add	r25, r0
    5db0:	34 9f       	mul	r19, r20
    5db2:	90 0d       	add	r25, r0
    5db4:	11 24       	eor	r1, r1
    5db6:	60 91 e7 08 	lds	r22, 0x08E7
    5dba:	70 91 e8 08 	lds	r23, 0x08E8
    5dbe:	0e 94 be 53 	call	0xa77c	; 0xa77c <__divmodhi4>
            temp = -temp;
    5dc2:	70 95       	com	r23
    5dc4:	61 95       	neg	r22
    5dc6:	7f 4f       	sbci	r23, 0xFF	; 255
    5dc8:	57 ce       	rjmp	.-850    	; 0x5a78 <getInputFromSpeed+0x124>
    5dca:	c0 91 63 09 	lds	r28, 0x0963
    5dce:	d0 91 64 09 	lds	r29, 0x0964
    5dd2:	49 cf       	rjmp	.-366    	; 0x5c66 <getInputFromSpeed+0x312>

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
        currVel = -currVel; // consider only positive values
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    5dd4:	c0 e0       	ldi	r28, 0x00	; 0
    5dd6:	d0 e0       	ldi	r29, 0x00	; 0
    5dd8:	9e cf       	rjmp	.-196    	; 0x5d16 <getInputFromSpeed+0x3c2>
    5dda:	c4 e0       	ldi	r28, 0x04	; 4
    5ddc:	d0 e0       	ldi	r29, 0x00	; 0
    5dde:	9b cf       	rjmp	.-202    	; 0x5d16 <getInputFromSpeed+0x3c2>
    5de0:	c5 e0       	ldi	r28, 0x05	; 5
    5de2:	d0 e0       	ldi	r29, 0x00	; 0
    5de4:	98 cf       	rjmp	.-208    	; 0x5d16 <getInputFromSpeed+0x3c2>
    5de6:	c1 e0       	ldi	r28, 0x01	; 1
    5de8:	d0 e0       	ldi	r29, 0x00	; 0
    5dea:	95 cf       	rjmp	.-214    	; 0x5d16 <getInputFromSpeed+0x3c2>
    5dec:	c2 e0       	ldi	r28, 0x02	; 2
    5dee:	d0 e0       	ldi	r29, 0x00	; 0
    5df0:	92 cf       	rjmp	.-220    	; 0x5d16 <getInputFromSpeed+0x3c2>
    5df2:	c3 e0       	ldi	r28, 0x03	; 3
    5df4:	d0 e0       	ldi	r29, 0x00	; 0
    5df6:	8f cf       	rjmp	.-226    	; 0x5d16 <getInputFromSpeed+0x3c2>
    5df8:	c0 91 67 09 	lds	r28, 0x0967
    5dfc:	d0 91 68 09 	lds	r29, 0x0968
    5e00:	b7 ce       	rjmp	.-658    	; 0x5b70 <getInputFromSpeed+0x21c>
    5e02:	c6 e0       	ldi	r28, 0x06	; 6
    5e04:	d0 e0       	ldi	r29, 0x00	; 0
    5e06:	87 cf       	rjmp	.-242    	; 0x5d16 <getInputFromSpeed+0x3c2>
    5e08:	c7 e0       	ldi	r28, 0x07	; 7
    5e0a:	d0 e0       	ldi	r29, 0x00	; 0
    5e0c:	84 cf       	rjmp	.-248    	; 0x5d16 <getInputFromSpeed+0x3c2>
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][6]/calibration[0][7];
            temp = -temp;
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    5e0e:	c9 30       	cpi	r28, 0x09	; 9
    5e10:	d1 05       	cpc	r29, r1
    5e12:	09 f4       	brne	.+2      	; 0x5e16 <getInputFromSpeed+0x4c2>
    5e14:	48 ce       	rjmp	.-880    	; 0x5aa6 <getInputFromSpeed+0x152>
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][6]/(float)calibration[CALIBRATION_SAMPLES-1][7]);
            temp = -temp;
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
    5e16:	66 23       	and	r22, r22
    5e18:	09 f0       	breq	.+2      	; 0x5e1c <getInputFromSpeed+0x4c8>
    5e1a:	47 c0       	rjmp	.+142    	; 0x5eaa <getInputFromSpeed+0x556>
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
    5e1c:	fe 01       	movw	r30, r28
    5e1e:	e2 95       	swap	r30
    5e20:	f2 95       	swap	r31
    5e22:	f0 7f       	andi	r31, 0xF0	; 240
    5e24:	fe 27       	eor	r31, r30
    5e26:	e0 7f       	andi	r30, 0xF0	; 240
    5e28:	fe 27       	eor	r31, r30
    5e2a:	e3 53       	subi	r30, 0x33	; 51
    5e2c:	f7 4f       	sbci	r31, 0xF7	; 247
    5e2e:	c2 80       	ldd	r12, Z+2	; 0x02
    5e30:	d3 80       	ldd	r13, Z+3	; 0x03
    5e32:	a0 80       	ld	r10, Z
    5e34:	b1 80       	ldd	r11, Z+1	; 0x01
    5e36:	2c 19       	sub	r18, r12
    5e38:	3d 09       	sbc	r19, r13
    5e3a:	b9 01       	movw	r22, r18
    5e3c:	88 27       	eor	r24, r24
    5e3e:	77 fd       	sbrc	r23, 7
    5e40:	80 95       	com	r24
    5e42:	98 2f       	mov	r25, r24
    5e44:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <__floatsisf>
    5e48:	7b 01       	movw	r14, r22
    5e4a:	8c 01       	movw	r16, r24
    5e4c:	c2 95       	swap	r28
    5e4e:	d2 95       	swap	r29
    5e50:	d0 7f       	andi	r29, 0xF0	; 240
    5e52:	dc 27       	eor	r29, r28
    5e54:	c0 7f       	andi	r28, 0xF0	; 240
    5e56:	dc 27       	eor	r29, r28
    5e58:	c3 52       	subi	r28, 0x23	; 35
    5e5a:	d7 4f       	sbci	r29, 0xF7	; 247
    5e5c:	68 81       	ld	r22, Y
    5e5e:	79 81       	ldd	r23, Y+1	; 0x01
    5e60:	6a 19       	sub	r22, r10
    5e62:	7b 09       	sbc	r23, r11
    5e64:	88 27       	eor	r24, r24
    5e66:	77 fd       	sbrc	r23, 7
    5e68:	80 95       	com	r24
    5e6a:	98 2f       	mov	r25, r24
    5e6c:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <__floatsisf>
    5e70:	9b 01       	movw	r18, r22
    5e72:	ac 01       	movw	r20, r24
    5e74:	c8 01       	movw	r24, r16
    5e76:	b7 01       	movw	r22, r14
    5e78:	0e 94 00 53 	call	0xa600	; 0xa600 <__mulsf3>
    5e7c:	7b 01       	movw	r14, r22
    5e7e:	8c 01       	movw	r16, r24
    5e80:	6a 81       	ldd	r22, Y+2	; 0x02
    5e82:	7b 81       	ldd	r23, Y+3	; 0x03
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
    5e84:	6c 19       	sub	r22, r12
    5e86:	7d 09       	sbc	r23, r13
    5e88:	88 27       	eor	r24, r24
    5e8a:	77 fd       	sbrc	r23, 7
    5e8c:	80 95       	com	r24
    5e8e:	98 2f       	mov	r25, r24
    5e90:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <__floatsisf>
    5e94:	9b 01       	movw	r18, r22
    5e96:	ac 01       	movw	r20, r24
    5e98:	c8 01       	movw	r24, r16
    5e9a:	b7 01       	movw	r22, r14
    5e9c:	0e 94 4c 51 	call	0xa298	; 0xa298 <__divsf3>
    5ea0:	0e 94 b4 51 	call	0xa368	; 0xa368 <__fixsfsi>
    5ea4:	6a 0d       	add	r22, r10
    5ea6:	7b 1d       	adc	r23, r11
    5ea8:	e7 cd       	rjmp	.-1074   	; 0x5a78 <getInputFromSpeed+0x124>
            temp = -temp;
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
        } else if(mode==RIGHT_WHEEL_FW_SC) {
    5eaa:	61 30       	cpi	r22, 0x01	; 1
    5eac:	09 f4       	brne	.+2      	; 0x5eb0 <getInputFromSpeed+0x55c>
    5eae:	50 c0       	rjmp	.+160    	; 0x5f50 <getInputFromSpeed+0x5fc>
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
        } else if(mode==LEFT_WHEEL_BW_SC) {
    5eb0:	62 30       	cpi	r22, 0x02	; 2
    5eb2:	09 f4       	brne	.+2      	; 0x5eb6 <getInputFromSpeed+0x562>
    5eb4:	82 c0       	rjmp	.+260    	; 0x5fba <getInputFromSpeed+0x666>
            temp = calibration[i-1][4] + (signed int)(((float)(currVel-calibration[i-1][5])*(float)(calibration[i][4]-calibration[i-1][4]))/(float)(calibration[i][5]-calibration[i-1][5]));
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
    5eb6:	63 30       	cpi	r22, 0x03	; 3
    5eb8:	09 f0       	breq	.+2      	; 0x5ebc <getInputFromSpeed+0x568>
    5eba:	dc cd       	rjmp	.-1096   	; 0x5a74 <getInputFromSpeed+0x120>
            temp = calibration[i-1][6] + (signed int)(((float)(currVel-calibration[i-1][7])*(float)(calibration[i][6]-calibration[i-1][6]))/(float)(calibration[i][7]-calibration[i-1][7]));
    5ebc:	fe 01       	movw	r30, r28
    5ebe:	e2 95       	swap	r30
    5ec0:	f2 95       	swap	r31
    5ec2:	f0 7f       	andi	r31, 0xF0	; 240
    5ec4:	fe 27       	eor	r31, r30
    5ec6:	e0 7f       	andi	r30, 0xF0	; 240
    5ec8:	fe 27       	eor	r31, r30
    5eca:	e3 53       	subi	r30, 0x33	; 51
    5ecc:	f7 4f       	sbci	r31, 0xF7	; 247
    5ece:	c6 84       	ldd	r12, Z+14	; 0x0e
    5ed0:	d7 84       	ldd	r13, Z+15	; 0x0f
    5ed2:	a4 84       	ldd	r10, Z+12	; 0x0c
    5ed4:	b5 84       	ldd	r11, Z+13	; 0x0d
    5ed6:	2c 19       	sub	r18, r12
    5ed8:	3d 09       	sbc	r19, r13
    5eda:	b9 01       	movw	r22, r18
    5edc:	88 27       	eor	r24, r24
    5ede:	77 fd       	sbrc	r23, 7
    5ee0:	80 95       	com	r24
    5ee2:	98 2f       	mov	r25, r24
    5ee4:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <__floatsisf>
    5ee8:	7b 01       	movw	r14, r22
    5eea:	8c 01       	movw	r16, r24
    5eec:	c2 95       	swap	r28
    5eee:	d2 95       	swap	r29
    5ef0:	d0 7f       	andi	r29, 0xF0	; 240
    5ef2:	dc 27       	eor	r29, r28
    5ef4:	c0 7f       	andi	r28, 0xF0	; 240
    5ef6:	dc 27       	eor	r29, r28
    5ef8:	c3 52       	subi	r28, 0x23	; 35
    5efa:	d7 4f       	sbci	r29, 0xF7	; 247
    5efc:	6c 85       	ldd	r22, Y+12	; 0x0c
    5efe:	7d 85       	ldd	r23, Y+13	; 0x0d
    5f00:	6a 19       	sub	r22, r10
    5f02:	7b 09       	sbc	r23, r11
    5f04:	88 27       	eor	r24, r24
    5f06:	77 fd       	sbrc	r23, 7
    5f08:	80 95       	com	r24
    5f0a:	98 2f       	mov	r25, r24
    5f0c:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <__floatsisf>
    5f10:	9b 01       	movw	r18, r22
    5f12:	ac 01       	movw	r20, r24
    5f14:	c8 01       	movw	r24, r16
    5f16:	b7 01       	movw	r22, r14
    5f18:	0e 94 00 53 	call	0xa600	; 0xa600 <__mulsf3>
    5f1c:	7b 01       	movw	r14, r22
    5f1e:	8c 01       	movw	r16, r24
    5f20:	6e 85       	ldd	r22, Y+14	; 0x0e
    5f22:	7f 85       	ldd	r23, Y+15	; 0x0f
    5f24:	6c 19       	sub	r22, r12
    5f26:	7d 09       	sbc	r23, r13
    5f28:	88 27       	eor	r24, r24
    5f2a:	77 fd       	sbrc	r23, 7
    5f2c:	80 95       	com	r24
    5f2e:	98 2f       	mov	r25, r24
    5f30:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <__floatsisf>
    5f34:	9b 01       	movw	r18, r22
    5f36:	ac 01       	movw	r20, r24
    5f38:	c8 01       	movw	r24, r16
    5f3a:	b7 01       	movw	r22, r14
    5f3c:	0e 94 4c 51 	call	0xa298	; 0xa298 <__divsf3>
    5f40:	0e 94 b4 51 	call	0xa368	; 0xa368 <__fixsfsi>
    5f44:	6a 0d       	add	r22, r10
    5f46:	7b 1d       	adc	r23, r11
            temp = -temp;
    5f48:	70 95       	com	r23
    5f4a:	61 95       	neg	r22
    5f4c:	7f 4f       	sbci	r23, 0xFF	; 255
    5f4e:	94 cd       	rjmp	.-1240   	; 0x5a78 <getInputFromSpeed+0x124>
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
    5f50:	fe 01       	movw	r30, r28
    5f52:	e2 95       	swap	r30
    5f54:	f2 95       	swap	r31
    5f56:	f0 7f       	andi	r31, 0xF0	; 240
    5f58:	fe 27       	eor	r31, r30
    5f5a:	e0 7f       	andi	r30, 0xF0	; 240
    5f5c:	fe 27       	eor	r31, r30
    5f5e:	e3 53       	subi	r30, 0x33	; 51
    5f60:	f7 4f       	sbci	r31, 0xF7	; 247
    5f62:	c6 80       	ldd	r12, Z+6	; 0x06
    5f64:	d7 80       	ldd	r13, Z+7	; 0x07
    5f66:	a4 80       	ldd	r10, Z+4	; 0x04
    5f68:	b5 80       	ldd	r11, Z+5	; 0x05
    5f6a:	2c 19       	sub	r18, r12
    5f6c:	3d 09       	sbc	r19, r13
    5f6e:	b9 01       	movw	r22, r18
    5f70:	88 27       	eor	r24, r24
    5f72:	77 fd       	sbrc	r23, 7
    5f74:	80 95       	com	r24
    5f76:	98 2f       	mov	r25, r24
    5f78:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <__floatsisf>
    5f7c:	7b 01       	movw	r14, r22
    5f7e:	8c 01       	movw	r16, r24
    5f80:	c2 95       	swap	r28
    5f82:	d2 95       	swap	r29
    5f84:	d0 7f       	andi	r29, 0xF0	; 240
    5f86:	dc 27       	eor	r29, r28
    5f88:	c0 7f       	andi	r28, 0xF0	; 240
    5f8a:	dc 27       	eor	r29, r28
    5f8c:	c3 52       	subi	r28, 0x23	; 35
    5f8e:	d7 4f       	sbci	r29, 0xF7	; 247
    5f90:	6c 81       	ldd	r22, Y+4	; 0x04
    5f92:	7d 81       	ldd	r23, Y+5	; 0x05
    5f94:	6a 19       	sub	r22, r10
    5f96:	7b 09       	sbc	r23, r11
    5f98:	88 27       	eor	r24, r24
    5f9a:	77 fd       	sbrc	r23, 7
    5f9c:	80 95       	com	r24
    5f9e:	98 2f       	mov	r25, r24
    5fa0:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <__floatsisf>
    5fa4:	9b 01       	movw	r18, r22
    5fa6:	ac 01       	movw	r20, r24
    5fa8:	c8 01       	movw	r24, r16
    5faa:	b7 01       	movw	r22, r14
    5fac:	0e 94 00 53 	call	0xa600	; 0xa600 <__mulsf3>
    5fb0:	7b 01       	movw	r14, r22
    5fb2:	8c 01       	movw	r16, r24
    5fb4:	6e 81       	ldd	r22, Y+6	; 0x06
    5fb6:	7f 81       	ldd	r23, Y+7	; 0x07
    5fb8:	65 cf       	rjmp	.-310    	; 0x5e84 <getInputFromSpeed+0x530>
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = calibration[i-1][4] + (signed int)(((float)(currVel-calibration[i-1][5])*(float)(calibration[i][4]-calibration[i-1][4]))/(float)(calibration[i][5]-calibration[i-1][5]));
    5fba:	fe 01       	movw	r30, r28
    5fbc:	e2 95       	swap	r30
    5fbe:	f2 95       	swap	r31
    5fc0:	f0 7f       	andi	r31, 0xF0	; 240
    5fc2:	fe 27       	eor	r31, r30
    5fc4:	e0 7f       	andi	r30, 0xF0	; 240
    5fc6:	fe 27       	eor	r31, r30
    5fc8:	e3 53       	subi	r30, 0x33	; 51
    5fca:	f7 4f       	sbci	r31, 0xF7	; 247
    5fcc:	c2 84       	ldd	r12, Z+10	; 0x0a
    5fce:	d3 84       	ldd	r13, Z+11	; 0x0b
    5fd0:	a0 84       	ldd	r10, Z+8	; 0x08
    5fd2:	b1 84       	ldd	r11, Z+9	; 0x09
    5fd4:	2c 19       	sub	r18, r12
    5fd6:	3d 09       	sbc	r19, r13
    5fd8:	b9 01       	movw	r22, r18
    5fda:	88 27       	eor	r24, r24
    5fdc:	77 fd       	sbrc	r23, 7
    5fde:	80 95       	com	r24
    5fe0:	98 2f       	mov	r25, r24
    5fe2:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <__floatsisf>
    5fe6:	7b 01       	movw	r14, r22
    5fe8:	8c 01       	movw	r16, r24
    5fea:	c2 95       	swap	r28
    5fec:	d2 95       	swap	r29
    5fee:	d0 7f       	andi	r29, 0xF0	; 240
    5ff0:	dc 27       	eor	r29, r28
    5ff2:	c0 7f       	andi	r28, 0xF0	; 240
    5ff4:	dc 27       	eor	r29, r28
    5ff6:	c3 52       	subi	r28, 0x23	; 35
    5ff8:	d7 4f       	sbci	r29, 0xF7	; 247
    5ffa:	68 85       	ldd	r22, Y+8	; 0x08
    5ffc:	79 85       	ldd	r23, Y+9	; 0x09
    5ffe:	6a 19       	sub	r22, r10
    6000:	7b 09       	sbc	r23, r11
    6002:	88 27       	eor	r24, r24
    6004:	77 fd       	sbrc	r23, 7
    6006:	80 95       	com	r24
    6008:	98 2f       	mov	r25, r24
    600a:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <__floatsisf>
    600e:	9b 01       	movw	r18, r22
    6010:	ac 01       	movw	r20, r24
    6012:	c8 01       	movw	r24, r16
    6014:	b7 01       	movw	r22, r14
    6016:	0e 94 00 53 	call	0xa600	; 0xa600 <__mulsf3>
    601a:	7b 01       	movw	r14, r22
    601c:	8c 01       	movw	r16, r24
    601e:	6a 85       	ldd	r22, Y+10	; 0x0a
    6020:	7b 85       	ldd	r23, Y+11	; 0x0b
    6022:	80 cf       	rjmp	.-256    	; 0x5f24 <getInputFromSpeed+0x5d0>

00006024 <getRightSpeedFromInput>:
    
    return temp;
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {
    6024:	8f 92       	push	r8
    6026:	9f 92       	push	r9
    6028:	af 92       	push	r10
    602a:	bf 92       	push	r11
    602c:	cf 92       	push	r12
    602e:	df 92       	push	r13
    6030:	ef 92       	push	r14
    6032:	ff 92       	push	r15
    6034:	0f 93       	push	r16
    6036:	1f 93       	push	r17
    6038:	cf 93       	push	r28
    603a:	df 93       	push	r29

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    603c:	c0 91 03 03 	lds	r28, 0x0303
    6040:	d0 91 04 03 	lds	r29, 0x0304
    6044:	80 91 05 03 	lds	r24, 0x0305
    6048:	90 91 06 03 	lds	r25, 0x0306
    604c:	97 fd       	sbrc	r25, 7
    604e:	d9 c0       	rjmp	.+434    	; 0x6202 <getRightSpeedFromInput+0x1de>
    6050:	60 91 e1 08 	lds	r22, 0x08E1
    6054:	70 91 e2 08 	lds	r23, 0x08E2
    6058:	6c 17       	cp	r22, r28
    605a:	7d 07       	cpc	r23, r29
    605c:	0c f0       	brlt	.+2      	; 0x6060 <getRightSpeedFromInput+0x3c>
    605e:	bd c0       	rjmp	.+378    	; 0x61da <getRightSpeedFromInput+0x1b6>
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    6060:	0f ef       	ldi	r16, 0xFF	; 255
    6062:	1f ef       	ldi	r17, 0xFF	; 255
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    6064:	80 91 f1 08 	lds	r24, 0x08F1
    6068:	90 91 f2 08 	lds	r25, 0x08F2
    606c:	8c 17       	cp	r24, r28
    606e:	9d 07       	cpc	r25, r29
    6070:	44 f0       	brlt	.+16     	; 0x6082 <getRightSpeedFromInput+0x5e>
    
    return temp;
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {
    6072:	81 e0       	ldi	r24, 0x01	; 1
    6074:	9f ef       	ldi	r25, 0xFF	; 255
    6076:	0f 3f       	cpi	r16, 0xFF	; 255
    6078:	19 07       	cpc	r17, r25
    607a:	09 f0       	breq	.+2      	; 0x607e <getRightSpeedFromInput+0x5a>
    607c:	80 e0       	ldi	r24, 0x00	; 0
    607e:	08 2f       	mov	r16, r24
    6080:	10 e0       	ldi	r17, 0x00	; 0

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    6082:	80 91 01 09 	lds	r24, 0x0901
    6086:	90 91 02 09 	lds	r25, 0x0902
    608a:	8c 17       	cp	r24, r28
    608c:	9d 07       	cpc	r25, r29
    608e:	2c f0       	brlt	.+10     	; 0x609a <getRightSpeedFromInput+0x76>
    6090:	8f ef       	ldi	r24, 0xFF	; 255
    6092:	0f 3f       	cpi	r16, 0xFF	; 255
    6094:	18 07       	cpc	r17, r24
    6096:	09 f4       	brne	.+2      	; 0x609a <getRightSpeedFromInput+0x76>
    6098:	6c c1       	rjmp	.+728    	; 0x6372 <getRightSpeedFromInput+0x34e>
    609a:	80 91 11 09 	lds	r24, 0x0911
    609e:	90 91 12 09 	lds	r25, 0x0912
    60a2:	8c 17       	cp	r24, r28
    60a4:	9d 07       	cpc	r25, r29
    60a6:	2c f0       	brlt	.+10     	; 0x60b2 <getRightSpeedFromInput+0x8e>
    60a8:	9f ef       	ldi	r25, 0xFF	; 255
    60aa:	0f 3f       	cpi	r16, 0xFF	; 255
    60ac:	19 07       	cpc	r17, r25
    60ae:	09 f4       	brne	.+2      	; 0x60b2 <getRightSpeedFromInput+0x8e>
    60b0:	72 c1       	rjmp	.+740    	; 0x6396 <getRightSpeedFromInput+0x372>
    60b2:	80 91 21 09 	lds	r24, 0x0921
    60b6:	90 91 22 09 	lds	r25, 0x0922
    60ba:	8c 17       	cp	r24, r28
    60bc:	9d 07       	cpc	r25, r29
    60be:	2c f0       	brlt	.+10     	; 0x60ca <getRightSpeedFromInput+0xa6>
    60c0:	8f ef       	ldi	r24, 0xFF	; 255
    60c2:	0f 3f       	cpi	r16, 0xFF	; 255
    60c4:	18 07       	cpc	r17, r24
    60c6:	09 f4       	brne	.+2      	; 0x60ca <getRightSpeedFromInput+0xa6>
    60c8:	63 c1       	rjmp	.+710    	; 0x6390 <getRightSpeedFromInput+0x36c>
    60ca:	80 91 31 09 	lds	r24, 0x0931
    60ce:	90 91 32 09 	lds	r25, 0x0932
    60d2:	8c 17       	cp	r24, r28
    60d4:	9d 07       	cpc	r25, r29
    60d6:	2c f0       	brlt	.+10     	; 0x60e2 <getRightSpeedFromInput+0xbe>
    60d8:	9f ef       	ldi	r25, 0xFF	; 255
    60da:	0f 3f       	cpi	r16, 0xFF	; 255
    60dc:	19 07       	cpc	r17, r25
    60de:	09 f4       	brne	.+2      	; 0x60e2 <getRightSpeedFromInput+0xbe>
    60e0:	54 c1       	rjmp	.+680    	; 0x638a <getRightSpeedFromInput+0x366>
    60e2:	80 91 41 09 	lds	r24, 0x0941
    60e6:	90 91 42 09 	lds	r25, 0x0942
    60ea:	8c 17       	cp	r24, r28
    60ec:	9d 07       	cpc	r25, r29
    60ee:	2c f0       	brlt	.+10     	; 0x60fa <getRightSpeedFromInput+0xd6>
    60f0:	8f ef       	ldi	r24, 0xFF	; 255
    60f2:	0f 3f       	cpi	r16, 0xFF	; 255
    60f4:	18 07       	cpc	r17, r24
    60f6:	09 f4       	brne	.+2      	; 0x60fa <getRightSpeedFromInput+0xd6>
    60f8:	45 c1       	rjmp	.+650    	; 0x6384 <getRightSpeedFromInput+0x360>
    60fa:	80 91 51 09 	lds	r24, 0x0951
    60fe:	90 91 52 09 	lds	r25, 0x0952
    6102:	8c 17       	cp	r24, r28
    6104:	9d 07       	cpc	r25, r29
    6106:	2c f0       	brlt	.+10     	; 0x6112 <getRightSpeedFromInput+0xee>
    6108:	9f ef       	ldi	r25, 0xFF	; 255
    610a:	0f 3f       	cpi	r16, 0xFF	; 255
    610c:	19 07       	cpc	r17, r25
    610e:	09 f4       	brne	.+2      	; 0x6112 <getRightSpeedFromInput+0xee>
    6110:	36 c1       	rjmp	.+620    	; 0x637e <getRightSpeedFromInput+0x35a>
    6112:	e0 90 61 09 	lds	r14, 0x0961
    6116:	f0 90 62 09 	lds	r15, 0x0962
    611a:	ec 16       	cp	r14, r28
    611c:	fd 06       	cpc	r15, r29
    611e:	2c f0       	brlt	.+10     	; 0x612a <getRightSpeedFromInput+0x106>
    6120:	8f ef       	ldi	r24, 0xFF	; 255
    6122:	0f 3f       	cpi	r16, 0xFF	; 255
    6124:	18 07       	cpc	r17, r24
    6126:	09 f4       	brne	.+2      	; 0x612a <getRightSpeedFromInput+0x106>
    6128:	27 c1       	rjmp	.+590    	; 0x6378 <getRightSpeedFromInput+0x354>
			}
		}        
    }

    if(pwm_right >= 0) {
        if(last_right_vel == 0) {
    612a:	20 97       	sbiw	r28, 0x00	; 0
    612c:	09 f4       	brne	.+2      	; 0x6130 <getRightSpeedFromInput+0x10c>
    612e:	58 c0       	rjmp	.+176    	; 0x61e0 <getRightSpeedFromInput+0x1bc>
            speedRightFromEnc = 0;
        } else {
            if(indFwR==0) {  // the velocity is lower than first saved in the matrix
    6130:	01 15       	cp	r16, r1
    6132:	11 05       	cpc	r17, r1
    6134:	09 f4       	brne	.+2      	; 0x6138 <getRightSpeedFromInput+0x114>
    6136:	32 c1       	rjmp	.+612    	; 0x639c <getRightSpeedFromInput+0x378>
                speedRightFromEnc = (last_right_vel*calibration[0][3])/calibration[0][2];
            } else if(indFwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    6138:	9f ef       	ldi	r25, 0xFF	; 255
    613a:	0f 3f       	cpi	r16, 0xFF	; 255
    613c:	19 07       	cpc	r17, r25
    613e:	09 f4       	brne	.+2      	; 0x6142 <getRightSpeedFromInput+0x11e>
    6140:	e9 c0       	rjmp	.+466    	; 0x6314 <getRightSpeedFromInput+0x2f0>
                speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][3]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][2]);  // take the max
            } else {
                speedRightFromEnc = calibration[indFwR-1][3] + (signed int)(((float)(last_right_vel-calibration[indFwR-1][2])*(float)(calibration[indFwR][3]-calibration[indFwR-1][3]))/(float)(calibration[indFwR][2]-calibration[indFwR-1][2]));
    6142:	f8 01       	movw	r30, r16
    6144:	e2 95       	swap	r30
    6146:	f2 95       	swap	r31
    6148:	f0 7f       	andi	r31, 0xF0	; 240
    614a:	fe 27       	eor	r31, r30
    614c:	e0 7f       	andi	r30, 0xF0	; 240
    614e:	fe 27       	eor	r31, r30
    6150:	e3 53       	subi	r30, 0x33	; 51
    6152:	f7 4f       	sbci	r31, 0xF7	; 247
    6154:	a4 80       	ldd	r10, Z+4	; 0x04
    6156:	b5 80       	ldd	r11, Z+5	; 0x05
    6158:	86 80       	ldd	r8, Z+6	; 0x06
    615a:	97 80       	ldd	r9, Z+7	; 0x07
    615c:	ca 19       	sub	r28, r10
    615e:	db 09       	sbc	r29, r11
    6160:	be 01       	movw	r22, r28
    6162:	88 27       	eor	r24, r24
    6164:	77 fd       	sbrc	r23, 7
    6166:	80 95       	com	r24
    6168:	98 2f       	mov	r25, r24
    616a:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <__floatsisf>
    616e:	6b 01       	movw	r12, r22
    6170:	7c 01       	movw	r14, r24
    6172:	e8 01       	movw	r28, r16
    6174:	c2 95       	swap	r28
    6176:	d2 95       	swap	r29
    6178:	d0 7f       	andi	r29, 0xF0	; 240
    617a:	dc 27       	eor	r29, r28
    617c:	c0 7f       	andi	r28, 0xF0	; 240
    617e:	dc 27       	eor	r29, r28
    6180:	c3 52       	subi	r28, 0x23	; 35
    6182:	d7 4f       	sbci	r29, 0xF7	; 247
    6184:	6e 81       	ldd	r22, Y+6	; 0x06
    6186:	7f 81       	ldd	r23, Y+7	; 0x07
    6188:	68 19       	sub	r22, r8
    618a:	79 09       	sbc	r23, r9
    618c:	88 27       	eor	r24, r24
    618e:	77 fd       	sbrc	r23, 7
    6190:	80 95       	com	r24
    6192:	98 2f       	mov	r25, r24
    6194:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <__floatsisf>
    6198:	9b 01       	movw	r18, r22
    619a:	ac 01       	movw	r20, r24
    619c:	c7 01       	movw	r24, r14
    619e:	b6 01       	movw	r22, r12
    61a0:	0e 94 00 53 	call	0xa600	; 0xa600 <__mulsf3>
    61a4:	7b 01       	movw	r14, r22
    61a6:	8c 01       	movw	r16, r24
    61a8:	6c 81       	ldd	r22, Y+4	; 0x04
    61aa:	7d 81       	ldd	r23, Y+5	; 0x05
    61ac:	6a 19       	sub	r22, r10
    61ae:	7b 09       	sbc	r23, r11
    61b0:	88 27       	eor	r24, r24
    61b2:	77 fd       	sbrc	r23, 7
    61b4:	80 95       	com	r24
    61b6:	98 2f       	mov	r25, r24
    61b8:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <__floatsisf>
    61bc:	9b 01       	movw	r18, r22
    61be:	ac 01       	movw	r20, r24
    61c0:	c8 01       	movw	r24, r16
    61c2:	b7 01       	movw	r22, r14
    61c4:	0e 94 4c 51 	call	0xa298	; 0xa298 <__divsf3>
    61c8:	0e 94 b4 51 	call	0xa368	; 0xa368 <__fixsfsi>
    61cc:	68 0d       	add	r22, r8
    61ce:	79 1d       	adc	r23, r9
    61d0:	70 93 cb 04 	sts	0x04CB, r23
    61d4:	60 93 ca 04 	sts	0x04CA, r22
    61d8:	07 c0       	rjmp	.+14     	; 0x61e8 <getRightSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    61da:	00 e0       	ldi	r16, 0x00	; 0
    61dc:	10 e0       	ldi	r17, 0x00	; 0
    61de:	42 cf       	rjmp	.-380    	; 0x6064 <getRightSpeedFromInput+0x40>
		}        
    }

    if(pwm_right >= 0) {
        if(last_right_vel == 0) {
            speedRightFromEnc = 0;
    61e0:	10 92 cb 04 	sts	0x04CB, r1
    61e4:	10 92 ca 04 	sts	0x04CA, r1
        	speedRightFromEnc = calibration[indBwR-1][7] + (signed int)(((float)(last_right_vel-calibration[indBwR-1][6])*(float)(calibration[indBwR][7]-calibration[indBwR-1][7]))/(float)(calibration[indBwR][6]-calibration[indBwR-1][6]));
		}
		speedRightFromEnc = -speedRightFromEnc;
    }
    
}
    61e8:	df 91       	pop	r29
    61ea:	cf 91       	pop	r28
    61ec:	1f 91       	pop	r17
    61ee:	0f 91       	pop	r16
    61f0:	ff 90       	pop	r15
    61f2:	ef 90       	pop	r14
    61f4:	df 90       	pop	r13
    61f6:	cf 90       	pop	r12
    61f8:	bf 90       	pop	r11
    61fa:	af 90       	pop	r10
    61fc:	9f 90       	pop	r9
    61fe:	8f 90       	pop	r8
    6200:	08 95       	ret
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    6202:	60 91 e9 08 	lds	r22, 0x08E9
    6206:	70 91 ea 08 	lds	r23, 0x08EA
    620a:	6c 17       	cp	r22, r28
    620c:	7d 07       	cpc	r23, r29
    620e:	0c f0       	brlt	.+2      	; 0x6212 <getRightSpeedFromInput+0x1ee>
    6210:	7e c0       	rjmp	.+252    	; 0x630e <getRightSpeedFromInput+0x2ea>
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    6212:	0f ef       	ldi	r16, 0xFF	; 255
    6214:	1f ef       	ldi	r17, 0xFF	; 255
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    6216:	80 91 f9 08 	lds	r24, 0x08F9
    621a:	90 91 fa 08 	lds	r25, 0x08FA
    621e:	8c 17       	cp	r24, r28
    6220:	9d 07       	cpc	r25, r29
    6222:	44 f0       	brlt	.+16     	; 0x6234 <getRightSpeedFromInput+0x210>
    
    return temp;
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {
    6224:	81 e0       	ldi	r24, 0x01	; 1
    6226:	9f ef       	ldi	r25, 0xFF	; 255
    6228:	0f 3f       	cpi	r16, 0xFF	; 255
    622a:	19 07       	cpc	r17, r25
    622c:	09 f0       	breq	.+2      	; 0x6230 <getRightSpeedFromInput+0x20c>
    622e:	80 e0       	ldi	r24, 0x00	; 0
    6230:	08 2f       	mov	r16, r24
    6232:	10 e0       	ldi	r17, 0x00	; 0
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    6234:	80 91 09 09 	lds	r24, 0x0909
    6238:	90 91 0a 09 	lds	r25, 0x090A
    623c:	8c 17       	cp	r24, r28
    623e:	9d 07       	cpc	r25, r29
    6240:	2c f0       	brlt	.+10     	; 0x624c <getRightSpeedFromInput+0x228>
    6242:	8f ef       	ldi	r24, 0xFF	; 255
    6244:	0f 3f       	cpi	r16, 0xFF	; 255
    6246:	18 07       	cpc	r17, r24
    6248:	09 f4       	brne	.+2      	; 0x624c <getRightSpeedFromInput+0x228>
    624a:	19 c1       	rjmp	.+562    	; 0x647e <getRightSpeedFromInput+0x45a>
    624c:	80 91 19 09 	lds	r24, 0x0919
    6250:	90 91 1a 09 	lds	r25, 0x091A
    6254:	8c 17       	cp	r24, r28
    6256:	9d 07       	cpc	r25, r29
    6258:	2c f0       	brlt	.+10     	; 0x6264 <getRightSpeedFromInput+0x240>
    625a:	9f ef       	ldi	r25, 0xFF	; 255
    625c:	0f 3f       	cpi	r16, 0xFF	; 255
    625e:	19 07       	cpc	r17, r25
    6260:	09 f4       	brne	.+2      	; 0x6264 <getRightSpeedFromInput+0x240>
    6262:	0a c1       	rjmp	.+532    	; 0x6478 <getRightSpeedFromInput+0x454>
    6264:	80 91 29 09 	lds	r24, 0x0929
    6268:	90 91 2a 09 	lds	r25, 0x092A
    626c:	8c 17       	cp	r24, r28
    626e:	9d 07       	cpc	r25, r29
    6270:	2c f0       	brlt	.+10     	; 0x627c <getRightSpeedFromInput+0x258>
    6272:	8f ef       	ldi	r24, 0xFF	; 255
    6274:	0f 3f       	cpi	r16, 0xFF	; 255
    6276:	18 07       	cpc	r17, r24
    6278:	09 f4       	brne	.+2      	; 0x627c <getRightSpeedFromInput+0x258>
    627a:	fb c0       	rjmp	.+502    	; 0x6472 <getRightSpeedFromInput+0x44e>
    627c:	80 91 39 09 	lds	r24, 0x0939
    6280:	90 91 3a 09 	lds	r25, 0x093A
    6284:	8c 17       	cp	r24, r28
    6286:	9d 07       	cpc	r25, r29
    6288:	2c f0       	brlt	.+10     	; 0x6294 <getRightSpeedFromInput+0x270>
    628a:	9f ef       	ldi	r25, 0xFF	; 255
    628c:	0f 3f       	cpi	r16, 0xFF	; 255
    628e:	19 07       	cpc	r17, r25
    6290:	09 f4       	brne	.+2      	; 0x6294 <getRightSpeedFromInput+0x270>
    6292:	ec c0       	rjmp	.+472    	; 0x646c <getRightSpeedFromInput+0x448>
    6294:	80 91 49 09 	lds	r24, 0x0949
    6298:	90 91 4a 09 	lds	r25, 0x094A
    629c:	8c 17       	cp	r24, r28
    629e:	9d 07       	cpc	r25, r29
    62a0:	2c f0       	brlt	.+10     	; 0x62ac <getRightSpeedFromInput+0x288>
    62a2:	8f ef       	ldi	r24, 0xFF	; 255
    62a4:	0f 3f       	cpi	r16, 0xFF	; 255
    62a6:	18 07       	cpc	r17, r24
    62a8:	09 f4       	brne	.+2      	; 0x62ac <getRightSpeedFromInput+0x288>
    62aa:	dd c0       	rjmp	.+442    	; 0x6466 <getRightSpeedFromInput+0x442>
    62ac:	80 91 59 09 	lds	r24, 0x0959
    62b0:	90 91 5a 09 	lds	r25, 0x095A
    62b4:	8c 17       	cp	r24, r28
    62b6:	9d 07       	cpc	r25, r29
    62b8:	2c f0       	brlt	.+10     	; 0x62c4 <getRightSpeedFromInput+0x2a0>
    62ba:	9f ef       	ldi	r25, 0xFF	; 255
    62bc:	0f 3f       	cpi	r16, 0xFF	; 255
    62be:	19 07       	cpc	r17, r25
    62c0:	09 f4       	brne	.+2      	; 0x62c4 <getRightSpeedFromInput+0x2a0>
    62c2:	ce c0       	rjmp	.+412    	; 0x6460 <getRightSpeedFromInput+0x43c>
    62c4:	e0 90 69 09 	lds	r14, 0x0969
    62c8:	f0 90 6a 09 	lds	r15, 0x096A
    62cc:	ec 16       	cp	r14, r28
    62ce:	fd 06       	cpc	r15, r29
    62d0:	2c f0       	brlt	.+10     	; 0x62dc <getRightSpeedFromInput+0x2b8>
    62d2:	8f ef       	ldi	r24, 0xFF	; 255
    62d4:	0f 3f       	cpi	r16, 0xFF	; 255
    62d6:	18 07       	cpc	r17, r24
    62d8:	09 f4       	brne	.+2      	; 0x62dc <getRightSpeedFromInput+0x2b8>
    62da:	bf c0       	rjmp	.+382    	; 0x645a <getRightSpeedFromInput+0x436>
            } else {
                speedRightFromEnc = calibration[indFwR-1][3] + (signed int)(((float)(last_right_vel-calibration[indFwR-1][2])*(float)(calibration[indFwR][3]-calibration[indFwR-1][3]))/(float)(calibration[indFwR][2]-calibration[indFwR-1][2]));
            }
        }
    } else {
		if(indBwR==0) {  // the velocity is lower than first saved in the matrix
    62dc:	01 15       	cp	r16, r1
    62de:	11 05       	cpc	r17, r1
    62e0:	09 f0       	breq	.+2      	; 0x62e4 <getRightSpeedFromInput+0x2c0>
    62e2:	6e c0       	rjmp	.+220    	; 0x63c0 <getRightSpeedFromInput+0x39c>
        	speedRightFromEnc = (last_right_vel*calibration[0][7])/calibration[0][6];
    62e4:	20 91 eb 08 	lds	r18, 0x08EB
    62e8:	30 91 ec 08 	lds	r19, 0x08EC
    62ec:	c2 9f       	mul	r28, r18
    62ee:	c0 01       	movw	r24, r0
    62f0:	c3 9f       	mul	r28, r19
    62f2:	90 0d       	add	r25, r0
    62f4:	d2 9f       	mul	r29, r18
    62f6:	90 0d       	add	r25, r0
    62f8:	11 24       	eor	r1, r1
    62fa:	0e 94 be 53 	call	0xa77c	; 0xa77c <__divmodhi4>
		} else if(indBwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][7]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][6]);  // take the max
		} else {
        	speedRightFromEnc = calibration[indBwR-1][7] + (signed int)(((float)(last_right_vel-calibration[indBwR-1][6])*(float)(calibration[indBwR][7]-calibration[indBwR-1][7]))/(float)(calibration[indBwR][6]-calibration[indBwR-1][6]));
		}
		speedRightFromEnc = -speedRightFromEnc;
    62fe:	70 95       	com	r23
    6300:	61 95       	neg	r22
    6302:	7f 4f       	sbci	r23, 0xFF	; 255
    6304:	70 93 cb 04 	sts	0x04CB, r23
    6308:	60 93 ca 04 	sts	0x04CA, r22
    630c:	6d cf       	rjmp	.-294    	; 0x61e8 <getRightSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    630e:	00 e0       	ldi	r16, 0x00	; 0
    6310:	10 e0       	ldi	r17, 0x00	; 0
    6312:	81 cf       	rjmp	.-254    	; 0x6216 <getRightSpeedFromInput+0x1f2>
            speedRightFromEnc = 0;
        } else {
            if(indFwR==0) {  // the velocity is lower than first saved in the matrix
                speedRightFromEnc = (last_right_vel*calibration[0][3])/calibration[0][2];
            } else if(indFwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
                speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][3]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][2]);  // take the max
    6314:	60 91 63 09 	lds	r22, 0x0963
    6318:	70 91 64 09 	lds	r23, 0x0964
    631c:	88 27       	eor	r24, r24
    631e:	77 fd       	sbrc	r23, 7
    6320:	80 95       	com	r24
    6322:	98 2f       	mov	r25, r24
    6324:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <__floatsisf>
    6328:	5b 01       	movw	r10, r22
    632a:	6c 01       	movw	r12, r24
    632c:	be 01       	movw	r22, r28
    632e:	88 27       	eor	r24, r24
    6330:	77 fd       	sbrc	r23, 7
    6332:	80 95       	com	r24
    6334:	98 2f       	mov	r25, r24
    6336:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <__floatsisf>
    633a:	9b 01       	movw	r18, r22
    633c:	ac 01       	movw	r20, r24
    633e:	c6 01       	movw	r24, r12
    6340:	b5 01       	movw	r22, r10
    6342:	0e 94 00 53 	call	0xa600	; 0xa600 <__mulsf3>
    6346:	5b 01       	movw	r10, r22
    6348:	6c 01       	movw	r12, r24
    634a:	b7 01       	movw	r22, r14
    634c:	88 27       	eor	r24, r24
    634e:	77 fd       	sbrc	r23, 7
    6350:	80 95       	com	r24
    6352:	98 2f       	mov	r25, r24
    6354:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <__floatsisf>
    6358:	9b 01       	movw	r18, r22
    635a:	ac 01       	movw	r20, r24
    635c:	c6 01       	movw	r24, r12
    635e:	b5 01       	movw	r22, r10
    6360:	0e 94 4c 51 	call	0xa298	; 0xa298 <__divsf3>
    6364:	0e 94 b4 51 	call	0xa368	; 0xa368 <__fixsfsi>
    6368:	70 93 cb 04 	sts	0x04CB, r23
    636c:	60 93 ca 04 	sts	0x04CA, r22
    6370:	3b cf       	rjmp	.-394    	; 0x61e8 <getRightSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    6372:	02 e0       	ldi	r16, 0x02	; 2
    6374:	10 e0       	ldi	r17, 0x00	; 0
    6376:	91 ce       	rjmp	.-734    	; 0x609a <getRightSpeedFromInput+0x76>
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    6378:	08 e0       	ldi	r16, 0x08	; 8
    637a:	10 e0       	ldi	r17, 0x00	; 0
    637c:	d6 ce       	rjmp	.-596    	; 0x612a <getRightSpeedFromInput+0x106>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    637e:	07 e0       	ldi	r16, 0x07	; 7
    6380:	10 e0       	ldi	r17, 0x00	; 0
    6382:	c7 ce       	rjmp	.-626    	; 0x6112 <getRightSpeedFromInput+0xee>
    6384:	06 e0       	ldi	r16, 0x06	; 6
    6386:	10 e0       	ldi	r17, 0x00	; 0
    6388:	b8 ce       	rjmp	.-656    	; 0x60fa <getRightSpeedFromInput+0xd6>
    638a:	05 e0       	ldi	r16, 0x05	; 5
    638c:	10 e0       	ldi	r17, 0x00	; 0
    638e:	a9 ce       	rjmp	.-686    	; 0x60e2 <getRightSpeedFromInput+0xbe>
    6390:	04 e0       	ldi	r16, 0x04	; 4
    6392:	10 e0       	ldi	r17, 0x00	; 0
    6394:	9a ce       	rjmp	.-716    	; 0x60ca <getRightSpeedFromInput+0xa6>
    6396:	03 e0       	ldi	r16, 0x03	; 3
    6398:	10 e0       	ldi	r17, 0x00	; 0
    639a:	8b ce       	rjmp	.-746    	; 0x60b2 <getRightSpeedFromInput+0x8e>
    if(pwm_right >= 0) {
        if(last_right_vel == 0) {
            speedRightFromEnc = 0;
        } else {
            if(indFwR==0) {  // the velocity is lower than first saved in the matrix
                speedRightFromEnc = (last_right_vel*calibration[0][3])/calibration[0][2];
    639c:	20 91 e3 08 	lds	r18, 0x08E3
    63a0:	30 91 e4 08 	lds	r19, 0x08E4
    63a4:	c2 9f       	mul	r28, r18
    63a6:	c0 01       	movw	r24, r0
    63a8:	c3 9f       	mul	r28, r19
    63aa:	90 0d       	add	r25, r0
    63ac:	d2 9f       	mul	r29, r18
    63ae:	90 0d       	add	r25, r0
    63b0:	11 24       	eor	r1, r1
    63b2:	0e 94 be 53 	call	0xa77c	; 0xa77c <__divmodhi4>
    63b6:	70 93 cb 04 	sts	0x04CB, r23
    63ba:	60 93 ca 04 	sts	0x04CA, r22
    63be:	14 cf       	rjmp	.-472    	; 0x61e8 <getRightSpeedFromInput+0x1c4>
            }
        }
    } else {
		if(indBwR==0) {  // the velocity is lower than first saved in the matrix
        	speedRightFromEnc = (last_right_vel*calibration[0][7])/calibration[0][6];
		} else if(indBwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    63c0:	8f ef       	ldi	r24, 0xFF	; 255
    63c2:	0f 3f       	cpi	r16, 0xFF	; 255
    63c4:	18 07       	cpc	r17, r24
    63c6:	09 f4       	brne	.+2      	; 0x63ca <getRightSpeedFromInput+0x3a6>
    63c8:	5d c0       	rjmp	.+186    	; 0x6484 <getRightSpeedFromInput+0x460>
        	speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][7]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][6]);  // take the max
		} else {
        	speedRightFromEnc = calibration[indBwR-1][7] + (signed int)(((float)(last_right_vel-calibration[indBwR-1][6])*(float)(calibration[indBwR][7]-calibration[indBwR-1][7]))/(float)(calibration[indBwR][6]-calibration[indBwR-1][6]));
    63ca:	f8 01       	movw	r30, r16
    63cc:	e2 95       	swap	r30
    63ce:	f2 95       	swap	r31
    63d0:	f0 7f       	andi	r31, 0xF0	; 240
    63d2:	fe 27       	eor	r31, r30
    63d4:	e0 7f       	andi	r30, 0xF0	; 240
    63d6:	fe 27       	eor	r31, r30
    63d8:	e3 53       	subi	r30, 0x33	; 51
    63da:	f7 4f       	sbci	r31, 0xF7	; 247
    63dc:	a4 84       	ldd	r10, Z+12	; 0x0c
    63de:	b5 84       	ldd	r11, Z+13	; 0x0d
    63e0:	86 84       	ldd	r8, Z+14	; 0x0e
    63e2:	97 84       	ldd	r9, Z+15	; 0x0f
    63e4:	ca 19       	sub	r28, r10
    63e6:	db 09       	sbc	r29, r11
    63e8:	be 01       	movw	r22, r28
    63ea:	88 27       	eor	r24, r24
    63ec:	77 fd       	sbrc	r23, 7
    63ee:	80 95       	com	r24
    63f0:	98 2f       	mov	r25, r24
    63f2:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <__floatsisf>
    63f6:	6b 01       	movw	r12, r22
    63f8:	7c 01       	movw	r14, r24
    63fa:	e8 01       	movw	r28, r16
    63fc:	c2 95       	swap	r28
    63fe:	d2 95       	swap	r29
    6400:	d0 7f       	andi	r29, 0xF0	; 240
    6402:	dc 27       	eor	r29, r28
    6404:	c0 7f       	andi	r28, 0xF0	; 240
    6406:	dc 27       	eor	r29, r28
    6408:	c3 52       	subi	r28, 0x23	; 35
    640a:	d7 4f       	sbci	r29, 0xF7	; 247
    640c:	6e 85       	ldd	r22, Y+14	; 0x0e
    640e:	7f 85       	ldd	r23, Y+15	; 0x0f
    6410:	68 19       	sub	r22, r8
    6412:	79 09       	sbc	r23, r9
    6414:	88 27       	eor	r24, r24
    6416:	77 fd       	sbrc	r23, 7
    6418:	80 95       	com	r24
    641a:	98 2f       	mov	r25, r24
    641c:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <__floatsisf>
    6420:	9b 01       	movw	r18, r22
    6422:	ac 01       	movw	r20, r24
    6424:	c7 01       	movw	r24, r14
    6426:	b6 01       	movw	r22, r12
    6428:	0e 94 00 53 	call	0xa600	; 0xa600 <__mulsf3>
    642c:	7b 01       	movw	r14, r22
    642e:	8c 01       	movw	r16, r24
    6430:	6c 85       	ldd	r22, Y+12	; 0x0c
    6432:	7d 85       	ldd	r23, Y+13	; 0x0d
    6434:	6a 19       	sub	r22, r10
    6436:	7b 09       	sbc	r23, r11
    6438:	88 27       	eor	r24, r24
    643a:	77 fd       	sbrc	r23, 7
    643c:	80 95       	com	r24
    643e:	98 2f       	mov	r25, r24
    6440:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <__floatsisf>
    6444:	9b 01       	movw	r18, r22
    6446:	ac 01       	movw	r20, r24
    6448:	c8 01       	movw	r24, r16
    644a:	b7 01       	movw	r22, r14
    644c:	0e 94 4c 51 	call	0xa298	; 0xa298 <__divsf3>
    6450:	0e 94 b4 51 	call	0xa368	; 0xa368 <__fixsfsi>
    6454:	68 0d       	add	r22, r8
    6456:	79 1d       	adc	r23, r9
    6458:	52 cf       	rjmp	.-348    	; 0x62fe <getRightSpeedFromInput+0x2da>
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    645a:	08 e0       	ldi	r16, 0x08	; 8
    645c:	10 e0       	ldi	r17, 0x00	; 0
    645e:	3e cf       	rjmp	.-388    	; 0x62dc <getRightSpeedFromInput+0x2b8>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    6460:	07 e0       	ldi	r16, 0x07	; 7
    6462:	10 e0       	ldi	r17, 0x00	; 0
    6464:	2f cf       	rjmp	.-418    	; 0x62c4 <getRightSpeedFromInput+0x2a0>
    6466:	06 e0       	ldi	r16, 0x06	; 6
    6468:	10 e0       	ldi	r17, 0x00	; 0
    646a:	20 cf       	rjmp	.-448    	; 0x62ac <getRightSpeedFromInput+0x288>
    646c:	05 e0       	ldi	r16, 0x05	; 5
    646e:	10 e0       	ldi	r17, 0x00	; 0
    6470:	11 cf       	rjmp	.-478    	; 0x6294 <getRightSpeedFromInput+0x270>
    6472:	04 e0       	ldi	r16, 0x04	; 4
    6474:	10 e0       	ldi	r17, 0x00	; 0
    6476:	02 cf       	rjmp	.-508    	; 0x627c <getRightSpeedFromInput+0x258>
    6478:	03 e0       	ldi	r16, 0x03	; 3
    647a:	10 e0       	ldi	r17, 0x00	; 0
    647c:	f3 ce       	rjmp	.-538    	; 0x6264 <getRightSpeedFromInput+0x240>
    647e:	02 e0       	ldi	r16, 0x02	; 2
    6480:	10 e0       	ldi	r17, 0x00	; 0
    6482:	e4 ce       	rjmp	.-568    	; 0x624c <getRightSpeedFromInput+0x228>
        }
    } else {
		if(indBwR==0) {  // the velocity is lower than first saved in the matrix
        	speedRightFromEnc = (last_right_vel*calibration[0][7])/calibration[0][6];
		} else if(indBwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][7]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][6]);  // take the max
    6484:	60 91 6b 09 	lds	r22, 0x096B
    6488:	70 91 6c 09 	lds	r23, 0x096C
    648c:	88 27       	eor	r24, r24
    648e:	77 fd       	sbrc	r23, 7
    6490:	80 95       	com	r24
    6492:	98 2f       	mov	r25, r24
    6494:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <__floatsisf>
    6498:	5b 01       	movw	r10, r22
    649a:	6c 01       	movw	r12, r24
    649c:	be 01       	movw	r22, r28
    649e:	88 27       	eor	r24, r24
    64a0:	77 fd       	sbrc	r23, 7
    64a2:	80 95       	com	r24
    64a4:	98 2f       	mov	r25, r24
    64a6:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <__floatsisf>
    64aa:	9b 01       	movw	r18, r22
    64ac:	ac 01       	movw	r20, r24
    64ae:	c6 01       	movw	r24, r12
    64b0:	b5 01       	movw	r22, r10
    64b2:	0e 94 00 53 	call	0xa600	; 0xa600 <__mulsf3>
    64b6:	5b 01       	movw	r10, r22
    64b8:	6c 01       	movw	r12, r24
    64ba:	b7 01       	movw	r22, r14
    64bc:	88 27       	eor	r24, r24
    64be:	77 fd       	sbrc	r23, 7
    64c0:	80 95       	com	r24
    64c2:	98 2f       	mov	r25, r24
    64c4:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <__floatsisf>
    64c8:	9b 01       	movw	r18, r22
    64ca:	ac 01       	movw	r20, r24
    64cc:	c6 01       	movw	r24, r12
    64ce:	b5 01       	movw	r22, r10
    64d0:	0e 94 4c 51 	call	0xa298	; 0xa298 <__divsf3>
    64d4:	0e 94 b4 51 	call	0xa368	; 0xa368 <__fixsfsi>
    64d8:	12 cf       	rjmp	.-476    	; 0x62fe <getRightSpeedFromInput+0x2da>

000064da <getLeftSpeedFromInput>:
    }
    
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {
    64da:	8f 92       	push	r8
    64dc:	9f 92       	push	r9
    64de:	af 92       	push	r10
    64e0:	bf 92       	push	r11
    64e2:	cf 92       	push	r12
    64e4:	df 92       	push	r13
    64e6:	ef 92       	push	r14
    64e8:	ff 92       	push	r15
    64ea:	0f 93       	push	r16
    64ec:	1f 93       	push	r17
    64ee:	cf 93       	push	r28
    64f0:	df 93       	push	r29

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    64f2:	c0 91 01 03 	lds	r28, 0x0301
    64f6:	d0 91 02 03 	lds	r29, 0x0302
    64fa:	80 91 07 03 	lds	r24, 0x0307
    64fe:	90 91 08 03 	lds	r25, 0x0308
    6502:	97 fd       	sbrc	r25, 7
    6504:	d9 c0       	rjmp	.+434    	; 0x66b8 <getLeftSpeedFromInput+0x1de>
    6506:	60 91 dd 08 	lds	r22, 0x08DD
    650a:	70 91 de 08 	lds	r23, 0x08DE
    650e:	6c 17       	cp	r22, r28
    6510:	7d 07       	cpc	r23, r29
    6512:	0c f0       	brlt	.+2      	; 0x6516 <getLeftSpeedFromInput+0x3c>
    6514:	bd c0       	rjmp	.+378    	; 0x6690 <getLeftSpeedFromInput+0x1b6>
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    6516:	0f ef       	ldi	r16, 0xFF	; 255
    6518:	1f ef       	ldi	r17, 0xFF	; 255
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    651a:	80 91 ed 08 	lds	r24, 0x08ED
    651e:	90 91 ee 08 	lds	r25, 0x08EE
    6522:	8c 17       	cp	r24, r28
    6524:	9d 07       	cpc	r25, r29
    6526:	44 f0       	brlt	.+16     	; 0x6538 <getLeftSpeedFromInput+0x5e>
    }
    
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {
    6528:	81 e0       	ldi	r24, 0x01	; 1
    652a:	9f ef       	ldi	r25, 0xFF	; 255
    652c:	0f 3f       	cpi	r16, 0xFF	; 255
    652e:	19 07       	cpc	r17, r25
    6530:	09 f0       	breq	.+2      	; 0x6534 <getLeftSpeedFromInput+0x5a>
    6532:	80 e0       	ldi	r24, 0x00	; 0
    6534:	08 2f       	mov	r16, r24
    6536:	10 e0       	ldi	r17, 0x00	; 0

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    6538:	80 91 fd 08 	lds	r24, 0x08FD
    653c:	90 91 fe 08 	lds	r25, 0x08FE
    6540:	8c 17       	cp	r24, r28
    6542:	9d 07       	cpc	r25, r29
    6544:	2c f0       	brlt	.+10     	; 0x6550 <getLeftSpeedFromInput+0x76>
    6546:	8f ef       	ldi	r24, 0xFF	; 255
    6548:	0f 3f       	cpi	r16, 0xFF	; 255
    654a:	18 07       	cpc	r17, r24
    654c:	09 f4       	brne	.+2      	; 0x6550 <getLeftSpeedFromInput+0x76>
    654e:	6c c1       	rjmp	.+728    	; 0x6828 <getLeftSpeedFromInput+0x34e>
    6550:	80 91 0d 09 	lds	r24, 0x090D
    6554:	90 91 0e 09 	lds	r25, 0x090E
    6558:	8c 17       	cp	r24, r28
    655a:	9d 07       	cpc	r25, r29
    655c:	2c f0       	brlt	.+10     	; 0x6568 <getLeftSpeedFromInput+0x8e>
    655e:	9f ef       	ldi	r25, 0xFF	; 255
    6560:	0f 3f       	cpi	r16, 0xFF	; 255
    6562:	19 07       	cpc	r17, r25
    6564:	09 f4       	brne	.+2      	; 0x6568 <getLeftSpeedFromInput+0x8e>
    6566:	72 c1       	rjmp	.+740    	; 0x684c <getLeftSpeedFromInput+0x372>
    6568:	80 91 1d 09 	lds	r24, 0x091D
    656c:	90 91 1e 09 	lds	r25, 0x091E
    6570:	8c 17       	cp	r24, r28
    6572:	9d 07       	cpc	r25, r29
    6574:	2c f0       	brlt	.+10     	; 0x6580 <getLeftSpeedFromInput+0xa6>
    6576:	8f ef       	ldi	r24, 0xFF	; 255
    6578:	0f 3f       	cpi	r16, 0xFF	; 255
    657a:	18 07       	cpc	r17, r24
    657c:	09 f4       	brne	.+2      	; 0x6580 <getLeftSpeedFromInput+0xa6>
    657e:	63 c1       	rjmp	.+710    	; 0x6846 <getLeftSpeedFromInput+0x36c>
    6580:	80 91 2d 09 	lds	r24, 0x092D
    6584:	90 91 2e 09 	lds	r25, 0x092E
    6588:	8c 17       	cp	r24, r28
    658a:	9d 07       	cpc	r25, r29
    658c:	2c f0       	brlt	.+10     	; 0x6598 <getLeftSpeedFromInput+0xbe>
    658e:	9f ef       	ldi	r25, 0xFF	; 255
    6590:	0f 3f       	cpi	r16, 0xFF	; 255
    6592:	19 07       	cpc	r17, r25
    6594:	09 f4       	brne	.+2      	; 0x6598 <getLeftSpeedFromInput+0xbe>
    6596:	54 c1       	rjmp	.+680    	; 0x6840 <getLeftSpeedFromInput+0x366>
    6598:	80 91 3d 09 	lds	r24, 0x093D
    659c:	90 91 3e 09 	lds	r25, 0x093E
    65a0:	8c 17       	cp	r24, r28
    65a2:	9d 07       	cpc	r25, r29
    65a4:	2c f0       	brlt	.+10     	; 0x65b0 <getLeftSpeedFromInput+0xd6>
    65a6:	8f ef       	ldi	r24, 0xFF	; 255
    65a8:	0f 3f       	cpi	r16, 0xFF	; 255
    65aa:	18 07       	cpc	r17, r24
    65ac:	09 f4       	brne	.+2      	; 0x65b0 <getLeftSpeedFromInput+0xd6>
    65ae:	45 c1       	rjmp	.+650    	; 0x683a <getLeftSpeedFromInput+0x360>
    65b0:	80 91 4d 09 	lds	r24, 0x094D
    65b4:	90 91 4e 09 	lds	r25, 0x094E
    65b8:	8c 17       	cp	r24, r28
    65ba:	9d 07       	cpc	r25, r29
    65bc:	2c f0       	brlt	.+10     	; 0x65c8 <getLeftSpeedFromInput+0xee>
    65be:	9f ef       	ldi	r25, 0xFF	; 255
    65c0:	0f 3f       	cpi	r16, 0xFF	; 255
    65c2:	19 07       	cpc	r17, r25
    65c4:	09 f4       	brne	.+2      	; 0x65c8 <getLeftSpeedFromInput+0xee>
    65c6:	36 c1       	rjmp	.+620    	; 0x6834 <getLeftSpeedFromInput+0x35a>
    65c8:	e0 90 5d 09 	lds	r14, 0x095D
    65cc:	f0 90 5e 09 	lds	r15, 0x095E
    65d0:	ec 16       	cp	r14, r28
    65d2:	fd 06       	cpc	r15, r29
    65d4:	2c f0       	brlt	.+10     	; 0x65e0 <getLeftSpeedFromInput+0x106>
    65d6:	8f ef       	ldi	r24, 0xFF	; 255
    65d8:	0f 3f       	cpi	r16, 0xFF	; 255
    65da:	18 07       	cpc	r17, r24
    65dc:	09 f4       	brne	.+2      	; 0x65e0 <getLeftSpeedFromInput+0x106>
    65de:	27 c1       	rjmp	.+590    	; 0x682e <getLeftSpeedFromInput+0x354>
			}
		}     
    }

    if(pwm_left >= 0) {
        if(last_left_vel == 0) {
    65e0:	20 97       	sbiw	r28, 0x00	; 0
    65e2:	09 f4       	brne	.+2      	; 0x65e6 <getLeftSpeedFromInput+0x10c>
    65e4:	58 c0       	rjmp	.+176    	; 0x6696 <getLeftSpeedFromInput+0x1bc>
            speedLeftFromEnc = 0;
        } else {
            if(indFwL==0) {  // the velocity is lower than first saved in the matrix
    65e6:	01 15       	cp	r16, r1
    65e8:	11 05       	cpc	r17, r1
    65ea:	09 f4       	brne	.+2      	; 0x65ee <getLeftSpeedFromInput+0x114>
    65ec:	32 c1       	rjmp	.+612    	; 0x6852 <getLeftSpeedFromInput+0x378>
                speedLeftFromEnc = (last_left_vel*calibration[0][1])/calibration[0][0];
            } else if(indFwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    65ee:	9f ef       	ldi	r25, 0xFF	; 255
    65f0:	0f 3f       	cpi	r16, 0xFF	; 255
    65f2:	19 07       	cpc	r17, r25
    65f4:	09 f4       	brne	.+2      	; 0x65f8 <getLeftSpeedFromInput+0x11e>
    65f6:	e9 c0       	rjmp	.+466    	; 0x67ca <getLeftSpeedFromInput+0x2f0>
                speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][1]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][0]);  // take the max
            } else {
                speedLeftFromEnc = calibration[indFwL-1][1] + (signed int)(((float)(last_left_vel-calibration[indFwL-1][0])*(float)(calibration[indFwL][1]-calibration[indFwL-1][1]))/(float)(calibration[indFwL][0]-calibration[indFwL-1][0]));
    65f8:	f8 01       	movw	r30, r16
    65fa:	e2 95       	swap	r30
    65fc:	f2 95       	swap	r31
    65fe:	f0 7f       	andi	r31, 0xF0	; 240
    6600:	fe 27       	eor	r31, r30
    6602:	e0 7f       	andi	r30, 0xF0	; 240
    6604:	fe 27       	eor	r31, r30
    6606:	e3 53       	subi	r30, 0x33	; 51
    6608:	f7 4f       	sbci	r31, 0xF7	; 247
    660a:	a0 80       	ld	r10, Z
    660c:	b1 80       	ldd	r11, Z+1	; 0x01
    660e:	82 80       	ldd	r8, Z+2	; 0x02
    6610:	93 80       	ldd	r9, Z+3	; 0x03
    6612:	ca 19       	sub	r28, r10
    6614:	db 09       	sbc	r29, r11
    6616:	be 01       	movw	r22, r28
    6618:	88 27       	eor	r24, r24
    661a:	77 fd       	sbrc	r23, 7
    661c:	80 95       	com	r24
    661e:	98 2f       	mov	r25, r24
    6620:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <__floatsisf>
    6624:	6b 01       	movw	r12, r22
    6626:	7c 01       	movw	r14, r24
    6628:	e8 01       	movw	r28, r16
    662a:	c2 95       	swap	r28
    662c:	d2 95       	swap	r29
    662e:	d0 7f       	andi	r29, 0xF0	; 240
    6630:	dc 27       	eor	r29, r28
    6632:	c0 7f       	andi	r28, 0xF0	; 240
    6634:	dc 27       	eor	r29, r28
    6636:	c3 52       	subi	r28, 0x23	; 35
    6638:	d7 4f       	sbci	r29, 0xF7	; 247
    663a:	6a 81       	ldd	r22, Y+2	; 0x02
    663c:	7b 81       	ldd	r23, Y+3	; 0x03
    663e:	68 19       	sub	r22, r8
    6640:	79 09       	sbc	r23, r9
    6642:	88 27       	eor	r24, r24
    6644:	77 fd       	sbrc	r23, 7
    6646:	80 95       	com	r24
    6648:	98 2f       	mov	r25, r24
    664a:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <__floatsisf>
    664e:	9b 01       	movw	r18, r22
    6650:	ac 01       	movw	r20, r24
    6652:	c7 01       	movw	r24, r14
    6654:	b6 01       	movw	r22, r12
    6656:	0e 94 00 53 	call	0xa600	; 0xa600 <__mulsf3>
    665a:	7b 01       	movw	r14, r22
    665c:	8c 01       	movw	r16, r24
    665e:	68 81       	ld	r22, Y
    6660:	79 81       	ldd	r23, Y+1	; 0x01
    6662:	6a 19       	sub	r22, r10
    6664:	7b 09       	sbc	r23, r11
    6666:	88 27       	eor	r24, r24
    6668:	77 fd       	sbrc	r23, 7
    666a:	80 95       	com	r24
    666c:	98 2f       	mov	r25, r24
    666e:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <__floatsisf>
    6672:	9b 01       	movw	r18, r22
    6674:	ac 01       	movw	r20, r24
    6676:	c8 01       	movw	r24, r16
    6678:	b7 01       	movw	r22, r14
    667a:	0e 94 4c 51 	call	0xa298	; 0xa298 <__divsf3>
    667e:	0e 94 b4 51 	call	0xa368	; 0xa368 <__fixsfsi>
    6682:	68 0d       	add	r22, r8
    6684:	79 1d       	adc	r23, r9
    6686:	70 93 c9 04 	sts	0x04C9, r23
    668a:	60 93 c8 04 	sts	0x04C8, r22
    668e:	07 c0       	rjmp	.+14     	; 0x669e <getLeftSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    6690:	00 e0       	ldi	r16, 0x00	; 0
    6692:	10 e0       	ldi	r17, 0x00	; 0
    6694:	42 cf       	rjmp	.-380    	; 0x651a <getLeftSpeedFromInput+0x40>
		}     
    }

    if(pwm_left >= 0) {
        if(last_left_vel == 0) {
            speedLeftFromEnc = 0;
    6696:	10 92 c9 04 	sts	0x04C9, r1
    669a:	10 92 c8 04 	sts	0x04C8, r1
        	speedLeftFromEnc = calibration[indBwL-1][5] + (signed int)(((float)(last_left_vel-calibration[indBwL-1][4])*(float)(calibration[indBwL][5]-calibration[indBwL-1][5]))/(float)(calibration[indBwL][4]-calibration[indBwL-1][4]));
		}
		speedLeftFromEnc = -speedLeftFromEnc;
    }
    
}
    669e:	df 91       	pop	r29
    66a0:	cf 91       	pop	r28
    66a2:	1f 91       	pop	r17
    66a4:	0f 91       	pop	r16
    66a6:	ff 90       	pop	r15
    66a8:	ef 90       	pop	r14
    66aa:	df 90       	pop	r13
    66ac:	cf 90       	pop	r12
    66ae:	bf 90       	pop	r11
    66b0:	af 90       	pop	r10
    66b2:	9f 90       	pop	r9
    66b4:	8f 90       	pop	r8
    66b6:	08 95       	ret
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    66b8:	60 91 e5 08 	lds	r22, 0x08E5
    66bc:	70 91 e6 08 	lds	r23, 0x08E6
    66c0:	6c 17       	cp	r22, r28
    66c2:	7d 07       	cpc	r23, r29
    66c4:	0c f0       	brlt	.+2      	; 0x66c8 <getLeftSpeedFromInput+0x1ee>
    66c6:	7e c0       	rjmp	.+252    	; 0x67c4 <getLeftSpeedFromInput+0x2ea>
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    66c8:	0f ef       	ldi	r16, 0xFF	; 255
    66ca:	1f ef       	ldi	r17, 0xFF	; 255
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    66cc:	80 91 f5 08 	lds	r24, 0x08F5
    66d0:	90 91 f6 08 	lds	r25, 0x08F6
    66d4:	8c 17       	cp	r24, r28
    66d6:	9d 07       	cpc	r25, r29
    66d8:	44 f0       	brlt	.+16     	; 0x66ea <getLeftSpeedFromInput+0x210>
    }
    
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {
    66da:	81 e0       	ldi	r24, 0x01	; 1
    66dc:	9f ef       	ldi	r25, 0xFF	; 255
    66de:	0f 3f       	cpi	r16, 0xFF	; 255
    66e0:	19 07       	cpc	r17, r25
    66e2:	09 f0       	breq	.+2      	; 0x66e6 <getLeftSpeedFromInput+0x20c>
    66e4:	80 e0       	ldi	r24, 0x00	; 0
    66e6:	08 2f       	mov	r16, r24
    66e8:	10 e0       	ldi	r17, 0x00	; 0
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    66ea:	80 91 05 09 	lds	r24, 0x0905
    66ee:	90 91 06 09 	lds	r25, 0x0906
    66f2:	8c 17       	cp	r24, r28
    66f4:	9d 07       	cpc	r25, r29
    66f6:	2c f0       	brlt	.+10     	; 0x6702 <getLeftSpeedFromInput+0x228>
    66f8:	8f ef       	ldi	r24, 0xFF	; 255
    66fa:	0f 3f       	cpi	r16, 0xFF	; 255
    66fc:	18 07       	cpc	r17, r24
    66fe:	09 f4       	brne	.+2      	; 0x6702 <getLeftSpeedFromInput+0x228>
    6700:	19 c1       	rjmp	.+562    	; 0x6934 <getLeftSpeedFromInput+0x45a>
    6702:	80 91 15 09 	lds	r24, 0x0915
    6706:	90 91 16 09 	lds	r25, 0x0916
    670a:	8c 17       	cp	r24, r28
    670c:	9d 07       	cpc	r25, r29
    670e:	2c f0       	brlt	.+10     	; 0x671a <getLeftSpeedFromInput+0x240>
    6710:	9f ef       	ldi	r25, 0xFF	; 255
    6712:	0f 3f       	cpi	r16, 0xFF	; 255
    6714:	19 07       	cpc	r17, r25
    6716:	09 f4       	brne	.+2      	; 0x671a <getLeftSpeedFromInput+0x240>
    6718:	0a c1       	rjmp	.+532    	; 0x692e <getLeftSpeedFromInput+0x454>
    671a:	80 91 25 09 	lds	r24, 0x0925
    671e:	90 91 26 09 	lds	r25, 0x0926
    6722:	8c 17       	cp	r24, r28
    6724:	9d 07       	cpc	r25, r29
    6726:	2c f0       	brlt	.+10     	; 0x6732 <getLeftSpeedFromInput+0x258>
    6728:	8f ef       	ldi	r24, 0xFF	; 255
    672a:	0f 3f       	cpi	r16, 0xFF	; 255
    672c:	18 07       	cpc	r17, r24
    672e:	09 f4       	brne	.+2      	; 0x6732 <getLeftSpeedFromInput+0x258>
    6730:	fb c0       	rjmp	.+502    	; 0x6928 <getLeftSpeedFromInput+0x44e>
    6732:	80 91 35 09 	lds	r24, 0x0935
    6736:	90 91 36 09 	lds	r25, 0x0936
    673a:	8c 17       	cp	r24, r28
    673c:	9d 07       	cpc	r25, r29
    673e:	2c f0       	brlt	.+10     	; 0x674a <getLeftSpeedFromInput+0x270>
    6740:	9f ef       	ldi	r25, 0xFF	; 255
    6742:	0f 3f       	cpi	r16, 0xFF	; 255
    6744:	19 07       	cpc	r17, r25
    6746:	09 f4       	brne	.+2      	; 0x674a <getLeftSpeedFromInput+0x270>
    6748:	ec c0       	rjmp	.+472    	; 0x6922 <getLeftSpeedFromInput+0x448>
    674a:	80 91 45 09 	lds	r24, 0x0945
    674e:	90 91 46 09 	lds	r25, 0x0946
    6752:	8c 17       	cp	r24, r28
    6754:	9d 07       	cpc	r25, r29
    6756:	2c f0       	brlt	.+10     	; 0x6762 <getLeftSpeedFromInput+0x288>
    6758:	8f ef       	ldi	r24, 0xFF	; 255
    675a:	0f 3f       	cpi	r16, 0xFF	; 255
    675c:	18 07       	cpc	r17, r24
    675e:	09 f4       	brne	.+2      	; 0x6762 <getLeftSpeedFromInput+0x288>
    6760:	dd c0       	rjmp	.+442    	; 0x691c <getLeftSpeedFromInput+0x442>
    6762:	80 91 55 09 	lds	r24, 0x0955
    6766:	90 91 56 09 	lds	r25, 0x0956
    676a:	8c 17       	cp	r24, r28
    676c:	9d 07       	cpc	r25, r29
    676e:	2c f0       	brlt	.+10     	; 0x677a <getLeftSpeedFromInput+0x2a0>
    6770:	9f ef       	ldi	r25, 0xFF	; 255
    6772:	0f 3f       	cpi	r16, 0xFF	; 255
    6774:	19 07       	cpc	r17, r25
    6776:	09 f4       	brne	.+2      	; 0x677a <getLeftSpeedFromInput+0x2a0>
    6778:	ce c0       	rjmp	.+412    	; 0x6916 <getLeftSpeedFromInput+0x43c>
    677a:	e0 90 65 09 	lds	r14, 0x0965
    677e:	f0 90 66 09 	lds	r15, 0x0966
    6782:	ec 16       	cp	r14, r28
    6784:	fd 06       	cpc	r15, r29
    6786:	2c f0       	brlt	.+10     	; 0x6792 <getLeftSpeedFromInput+0x2b8>
    6788:	8f ef       	ldi	r24, 0xFF	; 255
    678a:	0f 3f       	cpi	r16, 0xFF	; 255
    678c:	18 07       	cpc	r17, r24
    678e:	09 f4       	brne	.+2      	; 0x6792 <getLeftSpeedFromInput+0x2b8>
    6790:	bf c0       	rjmp	.+382    	; 0x6910 <getLeftSpeedFromInput+0x436>
            } else {
                speedLeftFromEnc = calibration[indFwL-1][1] + (signed int)(((float)(last_left_vel-calibration[indFwL-1][0])*(float)(calibration[indFwL][1]-calibration[indFwL-1][1]))/(float)(calibration[indFwL][0]-calibration[indFwL-1][0]));
            }
        }
    } else {
		if(indBwL==0) {  // the velocity is lower than first saved in the matrix
    6792:	01 15       	cp	r16, r1
    6794:	11 05       	cpc	r17, r1
    6796:	09 f0       	breq	.+2      	; 0x679a <getLeftSpeedFromInput+0x2c0>
    6798:	6e c0       	rjmp	.+220    	; 0x6876 <getLeftSpeedFromInput+0x39c>
        	speedLeftFromEnc = (last_left_vel*calibration[0][5])/calibration[0][4];
    679a:	20 91 e7 08 	lds	r18, 0x08E7
    679e:	30 91 e8 08 	lds	r19, 0x08E8
    67a2:	c2 9f       	mul	r28, r18
    67a4:	c0 01       	movw	r24, r0
    67a6:	c3 9f       	mul	r28, r19
    67a8:	90 0d       	add	r25, r0
    67aa:	d2 9f       	mul	r29, r18
    67ac:	90 0d       	add	r25, r0
    67ae:	11 24       	eor	r1, r1
    67b0:	0e 94 be 53 	call	0xa77c	; 0xa77c <__divmodhi4>
		} else if(indBwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][5]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][4]);  // take the max
		} else {
        	speedLeftFromEnc = calibration[indBwL-1][5] + (signed int)(((float)(last_left_vel-calibration[indBwL-1][4])*(float)(calibration[indBwL][5]-calibration[indBwL-1][5]))/(float)(calibration[indBwL][4]-calibration[indBwL-1][4]));
		}
		speedLeftFromEnc = -speedLeftFromEnc;
    67b4:	70 95       	com	r23
    67b6:	61 95       	neg	r22
    67b8:	7f 4f       	sbci	r23, 0xFF	; 255
    67ba:	70 93 c9 04 	sts	0x04C9, r23
    67be:	60 93 c8 04 	sts	0x04C8, r22
    67c2:	6d cf       	rjmp	.-294    	; 0x669e <getLeftSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    67c4:	00 e0       	ldi	r16, 0x00	; 0
    67c6:	10 e0       	ldi	r17, 0x00	; 0
    67c8:	81 cf       	rjmp	.-254    	; 0x66cc <getLeftSpeedFromInput+0x1f2>
            speedLeftFromEnc = 0;
        } else {
            if(indFwL==0) {  // the velocity is lower than first saved in the matrix
                speedLeftFromEnc = (last_left_vel*calibration[0][1])/calibration[0][0];
            } else if(indFwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
                speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][1]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][0]);  // take the max
    67ca:	60 91 5f 09 	lds	r22, 0x095F
    67ce:	70 91 60 09 	lds	r23, 0x0960
    67d2:	88 27       	eor	r24, r24
    67d4:	77 fd       	sbrc	r23, 7
    67d6:	80 95       	com	r24
    67d8:	98 2f       	mov	r25, r24
    67da:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <__floatsisf>
    67de:	5b 01       	movw	r10, r22
    67e0:	6c 01       	movw	r12, r24
    67e2:	be 01       	movw	r22, r28
    67e4:	88 27       	eor	r24, r24
    67e6:	77 fd       	sbrc	r23, 7
    67e8:	80 95       	com	r24
    67ea:	98 2f       	mov	r25, r24
    67ec:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <__floatsisf>
    67f0:	9b 01       	movw	r18, r22
    67f2:	ac 01       	movw	r20, r24
    67f4:	c6 01       	movw	r24, r12
    67f6:	b5 01       	movw	r22, r10
    67f8:	0e 94 00 53 	call	0xa600	; 0xa600 <__mulsf3>
    67fc:	5b 01       	movw	r10, r22
    67fe:	6c 01       	movw	r12, r24
    6800:	b7 01       	movw	r22, r14
    6802:	88 27       	eor	r24, r24
    6804:	77 fd       	sbrc	r23, 7
    6806:	80 95       	com	r24
    6808:	98 2f       	mov	r25, r24
    680a:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <__floatsisf>
    680e:	9b 01       	movw	r18, r22
    6810:	ac 01       	movw	r20, r24
    6812:	c6 01       	movw	r24, r12
    6814:	b5 01       	movw	r22, r10
    6816:	0e 94 4c 51 	call	0xa298	; 0xa298 <__divsf3>
    681a:	0e 94 b4 51 	call	0xa368	; 0xa368 <__fixsfsi>
    681e:	70 93 c9 04 	sts	0x04C9, r23
    6822:	60 93 c8 04 	sts	0x04C8, r22
    6826:	3b cf       	rjmp	.-394    	; 0x669e <getLeftSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    6828:	02 e0       	ldi	r16, 0x02	; 2
    682a:	10 e0       	ldi	r17, 0x00	; 0
    682c:	91 ce       	rjmp	.-734    	; 0x6550 <getLeftSpeedFromInput+0x76>
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    682e:	08 e0       	ldi	r16, 0x08	; 8
    6830:	10 e0       	ldi	r17, 0x00	; 0
    6832:	d6 ce       	rjmp	.-596    	; 0x65e0 <getLeftSpeedFromInput+0x106>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    6834:	07 e0       	ldi	r16, 0x07	; 7
    6836:	10 e0       	ldi	r17, 0x00	; 0
    6838:	c7 ce       	rjmp	.-626    	; 0x65c8 <getLeftSpeedFromInput+0xee>
    683a:	06 e0       	ldi	r16, 0x06	; 6
    683c:	10 e0       	ldi	r17, 0x00	; 0
    683e:	b8 ce       	rjmp	.-656    	; 0x65b0 <getLeftSpeedFromInput+0xd6>
    6840:	05 e0       	ldi	r16, 0x05	; 5
    6842:	10 e0       	ldi	r17, 0x00	; 0
    6844:	a9 ce       	rjmp	.-686    	; 0x6598 <getLeftSpeedFromInput+0xbe>
    6846:	04 e0       	ldi	r16, 0x04	; 4
    6848:	10 e0       	ldi	r17, 0x00	; 0
    684a:	9a ce       	rjmp	.-716    	; 0x6580 <getLeftSpeedFromInput+0xa6>
    684c:	03 e0       	ldi	r16, 0x03	; 3
    684e:	10 e0       	ldi	r17, 0x00	; 0
    6850:	8b ce       	rjmp	.-746    	; 0x6568 <getLeftSpeedFromInput+0x8e>
    if(pwm_left >= 0) {
        if(last_left_vel == 0) {
            speedLeftFromEnc = 0;
        } else {
            if(indFwL==0) {  // the velocity is lower than first saved in the matrix
                speedLeftFromEnc = (last_left_vel*calibration[0][1])/calibration[0][0];
    6852:	20 91 df 08 	lds	r18, 0x08DF
    6856:	30 91 e0 08 	lds	r19, 0x08E0
    685a:	c2 9f       	mul	r28, r18
    685c:	c0 01       	movw	r24, r0
    685e:	c3 9f       	mul	r28, r19
    6860:	90 0d       	add	r25, r0
    6862:	d2 9f       	mul	r29, r18
    6864:	90 0d       	add	r25, r0
    6866:	11 24       	eor	r1, r1
    6868:	0e 94 be 53 	call	0xa77c	; 0xa77c <__divmodhi4>
    686c:	70 93 c9 04 	sts	0x04C9, r23
    6870:	60 93 c8 04 	sts	0x04C8, r22
    6874:	14 cf       	rjmp	.-472    	; 0x669e <getLeftSpeedFromInput+0x1c4>
            }
        }
    } else {
		if(indBwL==0) {  // the velocity is lower than first saved in the matrix
        	speedLeftFromEnc = (last_left_vel*calibration[0][5])/calibration[0][4];
		} else if(indBwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    6876:	8f ef       	ldi	r24, 0xFF	; 255
    6878:	0f 3f       	cpi	r16, 0xFF	; 255
    687a:	18 07       	cpc	r17, r24
    687c:	09 f4       	brne	.+2      	; 0x6880 <getLeftSpeedFromInput+0x3a6>
    687e:	5d c0       	rjmp	.+186    	; 0x693a <getLeftSpeedFromInput+0x460>
        	speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][5]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][4]);  // take the max
		} else {
        	speedLeftFromEnc = calibration[indBwL-1][5] + (signed int)(((float)(last_left_vel-calibration[indBwL-1][4])*(float)(calibration[indBwL][5]-calibration[indBwL-1][5]))/(float)(calibration[indBwL][4]-calibration[indBwL-1][4]));
    6880:	f8 01       	movw	r30, r16
    6882:	e2 95       	swap	r30
    6884:	f2 95       	swap	r31
    6886:	f0 7f       	andi	r31, 0xF0	; 240
    6888:	fe 27       	eor	r31, r30
    688a:	e0 7f       	andi	r30, 0xF0	; 240
    688c:	fe 27       	eor	r31, r30
    688e:	e3 53       	subi	r30, 0x33	; 51
    6890:	f7 4f       	sbci	r31, 0xF7	; 247
    6892:	a0 84       	ldd	r10, Z+8	; 0x08
    6894:	b1 84       	ldd	r11, Z+9	; 0x09
    6896:	82 84       	ldd	r8, Z+10	; 0x0a
    6898:	93 84       	ldd	r9, Z+11	; 0x0b
    689a:	ca 19       	sub	r28, r10
    689c:	db 09       	sbc	r29, r11
    689e:	be 01       	movw	r22, r28
    68a0:	88 27       	eor	r24, r24
    68a2:	77 fd       	sbrc	r23, 7
    68a4:	80 95       	com	r24
    68a6:	98 2f       	mov	r25, r24
    68a8:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <__floatsisf>
    68ac:	6b 01       	movw	r12, r22
    68ae:	7c 01       	movw	r14, r24
    68b0:	e8 01       	movw	r28, r16
    68b2:	c2 95       	swap	r28
    68b4:	d2 95       	swap	r29
    68b6:	d0 7f       	andi	r29, 0xF0	; 240
    68b8:	dc 27       	eor	r29, r28
    68ba:	c0 7f       	andi	r28, 0xF0	; 240
    68bc:	dc 27       	eor	r29, r28
    68be:	c3 52       	subi	r28, 0x23	; 35
    68c0:	d7 4f       	sbci	r29, 0xF7	; 247
    68c2:	6a 85       	ldd	r22, Y+10	; 0x0a
    68c4:	7b 85       	ldd	r23, Y+11	; 0x0b
    68c6:	68 19       	sub	r22, r8
    68c8:	79 09       	sbc	r23, r9
    68ca:	88 27       	eor	r24, r24
    68cc:	77 fd       	sbrc	r23, 7
    68ce:	80 95       	com	r24
    68d0:	98 2f       	mov	r25, r24
    68d2:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <__floatsisf>
    68d6:	9b 01       	movw	r18, r22
    68d8:	ac 01       	movw	r20, r24
    68da:	c7 01       	movw	r24, r14
    68dc:	b6 01       	movw	r22, r12
    68de:	0e 94 00 53 	call	0xa600	; 0xa600 <__mulsf3>
    68e2:	7b 01       	movw	r14, r22
    68e4:	8c 01       	movw	r16, r24
    68e6:	68 85       	ldd	r22, Y+8	; 0x08
    68e8:	79 85       	ldd	r23, Y+9	; 0x09
    68ea:	6a 19       	sub	r22, r10
    68ec:	7b 09       	sbc	r23, r11
    68ee:	88 27       	eor	r24, r24
    68f0:	77 fd       	sbrc	r23, 7
    68f2:	80 95       	com	r24
    68f4:	98 2f       	mov	r25, r24
    68f6:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <__floatsisf>
    68fa:	9b 01       	movw	r18, r22
    68fc:	ac 01       	movw	r20, r24
    68fe:	c8 01       	movw	r24, r16
    6900:	b7 01       	movw	r22, r14
    6902:	0e 94 4c 51 	call	0xa298	; 0xa298 <__divsf3>
    6906:	0e 94 b4 51 	call	0xa368	; 0xa368 <__fixsfsi>
    690a:	68 0d       	add	r22, r8
    690c:	79 1d       	adc	r23, r9
    690e:	52 cf       	rjmp	.-348    	; 0x67b4 <getLeftSpeedFromInput+0x2da>
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    6910:	08 e0       	ldi	r16, 0x08	; 8
    6912:	10 e0       	ldi	r17, 0x00	; 0
    6914:	3e cf       	rjmp	.-388    	; 0x6792 <getLeftSpeedFromInput+0x2b8>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    6916:	07 e0       	ldi	r16, 0x07	; 7
    6918:	10 e0       	ldi	r17, 0x00	; 0
    691a:	2f cf       	rjmp	.-418    	; 0x677a <getLeftSpeedFromInput+0x2a0>
    691c:	06 e0       	ldi	r16, 0x06	; 6
    691e:	10 e0       	ldi	r17, 0x00	; 0
    6920:	20 cf       	rjmp	.-448    	; 0x6762 <getLeftSpeedFromInput+0x288>
    6922:	05 e0       	ldi	r16, 0x05	; 5
    6924:	10 e0       	ldi	r17, 0x00	; 0
    6926:	11 cf       	rjmp	.-478    	; 0x674a <getLeftSpeedFromInput+0x270>
    6928:	04 e0       	ldi	r16, 0x04	; 4
    692a:	10 e0       	ldi	r17, 0x00	; 0
    692c:	02 cf       	rjmp	.-508    	; 0x6732 <getLeftSpeedFromInput+0x258>
    692e:	03 e0       	ldi	r16, 0x03	; 3
    6930:	10 e0       	ldi	r17, 0x00	; 0
    6932:	f3 ce       	rjmp	.-538    	; 0x671a <getLeftSpeedFromInput+0x240>
    6934:	02 e0       	ldi	r16, 0x02	; 2
    6936:	10 e0       	ldi	r17, 0x00	; 0
    6938:	e4 ce       	rjmp	.-568    	; 0x6702 <getLeftSpeedFromInput+0x228>
        }
    } else {
		if(indBwL==0) {  // the velocity is lower than first saved in the matrix
        	speedLeftFromEnc = (last_left_vel*calibration[0][5])/calibration[0][4];
		} else if(indBwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][5]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][4]);  // take the max
    693a:	60 91 67 09 	lds	r22, 0x0967
    693e:	70 91 68 09 	lds	r23, 0x0968
    6942:	88 27       	eor	r24, r24
    6944:	77 fd       	sbrc	r23, 7
    6946:	80 95       	com	r24
    6948:	98 2f       	mov	r25, r24
    694a:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <__floatsisf>
    694e:	5b 01       	movw	r10, r22
    6950:	6c 01       	movw	r12, r24
    6952:	be 01       	movw	r22, r28
    6954:	88 27       	eor	r24, r24
    6956:	77 fd       	sbrc	r23, 7
    6958:	80 95       	com	r24
    695a:	98 2f       	mov	r25, r24
    695c:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <__floatsisf>
    6960:	9b 01       	movw	r18, r22
    6962:	ac 01       	movw	r20, r24
    6964:	c6 01       	movw	r24, r12
    6966:	b5 01       	movw	r22, r10
    6968:	0e 94 00 53 	call	0xa600	; 0xa600 <__mulsf3>
    696c:	5b 01       	movw	r10, r22
    696e:	6c 01       	movw	r12, r24
    6970:	b7 01       	movw	r22, r14
    6972:	88 27       	eor	r24, r24
    6974:	77 fd       	sbrc	r23, 7
    6976:	80 95       	com	r24
    6978:	98 2f       	mov	r25, r24
    697a:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <__floatsisf>
    697e:	9b 01       	movw	r18, r22
    6980:	ac 01       	movw	r20, r24
    6982:	c6 01       	movw	r24, r12
    6984:	b5 01       	movw	r22, r10
    6986:	0e 94 4c 51 	call	0xa298	; 0xa298 <__divsf3>
    698a:	0e 94 b4 51 	call	0xa368	; 0xa368 <__fixsfsi>
    698e:	12 cf       	rjmp	.-476    	; 0x67b4 <getLeftSpeedFromInput+0x2da>

00006990 <handleMotorsWithSpeedController>:
		OCR4B = 0;
	}

}

void handleMotorsWithSpeedController() {
    6990:	2f 92       	push	r2
    6992:	3f 92       	push	r3
    6994:	4f 92       	push	r4
    6996:	5f 92       	push	r5
    6998:	6f 92       	push	r6
    699a:	7f 92       	push	r7
    699c:	8f 92       	push	r8
    699e:	9f 92       	push	r9
    69a0:	af 92       	push	r10
    69a2:	bf 92       	push	r11
    69a4:	cf 92       	push	r12
    69a6:	df 92       	push	r13
    69a8:	ef 92       	push	r14
    69aa:	ff 92       	push	r15
    69ac:	0f 93       	push	r16
    69ae:	1f 93       	push	r17

	if(calibrateOdomFlag==1) {
    69b0:	80 91 67 05 	lds	r24, 0x0567
    69b4:	81 30       	cpi	r24, 0x01	; 1
    69b6:	09 f4       	brne	.+2      	; 0x69ba <handleMotorsWithSpeedController+0x2a>
    69b8:	50 c2       	rjmp	.+1184   	; 0x6e5a <handleMotorsWithSpeedController+0x4ca>
		pwm_right_working = pwm_intermediate_right_desired;
		pwm_left_working = pwm_intermediate_left_desired;
	} else {
		if(pwm_intermediate_right_desired >= 0) {		// pwm in the range -127..127
    69ba:	80 91 0d 03 	lds	r24, 0x030D
    69be:	90 91 0e 03 	lds	r25, 0x030E
    69c2:	97 fd       	sbrc	r25, 7
    69c4:	c2 c2       	rjmp	.+1412   	; 0x6f4a <handleMotorsWithSpeedController+0x5ba>
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_FW_SC);
    69c6:	61 e0       	ldi	r22, 0x01	; 1
    69c8:	0e 94 aa 2c 	call	0x5954	; 0x5954 <getInputFromSpeed>
    69cc:	90 93 1e 03 	sts	0x031E, r25
    69d0:	80 93 1d 03 	sts	0x031D, r24
		} else {
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_BW_SC);
		}
		if(pwm_intermediate_left_desired >= 0) {		// pwm in the range -127..127
    69d4:	80 91 0f 03 	lds	r24, 0x030F
    69d8:	90 91 10 03 	lds	r25, 0x0310
    69dc:	97 fd       	sbrc	r25, 7
    69de:	ad c2       	rjmp	.+1370   	; 0x6f3a <handleMotorsWithSpeedController+0x5aa>
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_FW_SC);
    69e0:	60 e0       	ldi	r22, 0x00	; 0
    69e2:	0e 94 aa 2c 	call	0x5954	; 0x5954 <getInputFromSpeed>
    69e6:	90 93 20 03 	sts	0x0320, r25
    69ea:	80 93 1f 03 	sts	0x031F, r24
		} else {
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_BW_SC);
		}
	}

	if(obstacleAvoidanceEnabled) {
    69ee:	20 91 7c 04 	lds	r18, 0x047C
    69f2:	22 23       	and	r18, r18
    69f4:	09 f0       	breq	.+2      	; 0x69f8 <handleMotorsWithSpeedController+0x68>
    69f6:	26 c2       	rjmp	.+1100   	; 0x6e44 <handleMotorsWithSpeedController+0x4b4>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
	}
	pwm_left_desired_to_control = pwm_left_working;
    69f8:	90 93 fc 02 	sts	0x02FC, r25
    69fc:	80 93 fb 02 	sts	0x02FB, r24
	pwm_right_desired_to_control = pwm_right_working;
    6a00:	80 91 1d 03 	lds	r24, 0x031D
    6a04:	90 91 1e 03 	lds	r25, 0x031E
    6a08:	90 93 fa 02 	sts	0x02FA, r25
    6a0c:	80 93 f9 02 	sts	0x02F9, r24

	if(compute_left_vel) {
    6a10:	80 91 07 02 	lds	r24, 0x0207
    6a14:	88 23       	and	r24, r24
    6a16:	09 f4       	brne	.+2      	; 0x6a1a <handleMotorsWithSpeedController+0x8a>
    6a18:	a7 c0       	rjmp	.+334    	; 0x6b68 <handleMotorsWithSpeedController+0x1d8>

		last_left_vel = left_vel_sum>>2;
    6a1a:	20 91 fd 02 	lds	r18, 0x02FD
    6a1e:	30 91 fe 02 	lds	r19, 0x02FE
    6a22:	36 95       	lsr	r19
    6a24:	27 95       	ror	r18
    6a26:	36 95       	lsr	r19
    6a28:	27 95       	ror	r18
    6a2a:	30 93 02 03 	sts	0x0302, r19
    6a2e:	20 93 01 03 	sts	0x0301, r18
		compute_left_vel = 0;
    6a32:	10 92 07 02 	sts	0x0207, r1
		left_vel_sum = 0;
    6a36:	10 92 fe 02 	sts	0x02FE, r1
    6a3a:	10 92 fd 02 	sts	0x02FD, r1
		
		if(calibrateOdomFlag==1) {
    6a3e:	80 91 67 05 	lds	r24, 0x0567
    6a42:	81 30       	cpi	r24, 0x01	; 1
    6a44:	09 f4       	brne	.+2      	; 0x6a48 <handleMotorsWithSpeedController+0xb8>
    6a46:	30 c2       	rjmp	.+1120   	; 0x6ea8 <handleMotorsWithSpeedController+0x518>
			leftSpeedSumOdom += last_left_vel;
			leftSumCount++;
		}

		getLeftSpeedFromInput();	// get speed in mm/s
    6a48:	0e 94 6d 32 	call	0x64da	; 0x64da <getLeftSpeedFromInput>
		leftDistPrev = leftDist;
    6a4c:	80 91 a3 04 	lds	r24, 0x04A3
    6a50:	90 91 a4 04 	lds	r25, 0x04A4
    6a54:	a0 91 a5 04 	lds	r26, 0x04A5
    6a58:	b0 91 a6 04 	lds	r27, 0x04A6
    6a5c:	80 93 ab 04 	sts	0x04AB, r24
    6a60:	90 93 ac 04 	sts	0x04AC, r25
    6a64:	a0 93 ad 04 	sts	0x04AD, r26
    6a68:	b0 93 ae 04 	sts	0x04AE, r27
		//timeOdometry = getTime100MicroSec()-timeLeftOdom;
		leftDist += ((float)speedLeftFromEnc*((float)(getTime100MicroSec()-timeLeftOdom)*104.0))/1000000.0;	// distance in mm				
    6a6c:	60 91 c8 04 	lds	r22, 0x04C8
    6a70:	70 91 c9 04 	lds	r23, 0x04C9
    6a74:	88 27       	eor	r24, r24
    6a76:	77 fd       	sbrc	r23, 7
    6a78:	80 95       	com	r24
    6a7a:	98 2f       	mov	r25, r24
    6a7c:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <__floatsisf>
    6a80:	7b 01       	movw	r14, r22
    6a82:	8c 01       	movw	r16, r24
    6a84:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
    6a88:	20 91 cc 04 	lds	r18, 0x04CC
    6a8c:	30 91 cd 04 	lds	r19, 0x04CD
    6a90:	40 91 ce 04 	lds	r20, 0x04CE
    6a94:	50 91 cf 04 	lds	r21, 0x04CF
    6a98:	62 1b       	sub	r22, r18
    6a9a:	73 0b       	sbc	r23, r19
    6a9c:	84 0b       	sbc	r24, r20
    6a9e:	95 0b       	sbc	r25, r21
    6aa0:	0e 94 e5 51 	call	0xa3ca	; 0xa3ca <__floatunsisf>
    6aa4:	20 e0       	ldi	r18, 0x00	; 0
    6aa6:	30 e0       	ldi	r19, 0x00	; 0
    6aa8:	40 ed       	ldi	r20, 0xD0	; 208
    6aaa:	52 e4       	ldi	r21, 0x42	; 66
    6aac:	0e 94 00 53 	call	0xa600	; 0xa600 <__mulsf3>
    6ab0:	9b 01       	movw	r18, r22
    6ab2:	ac 01       	movw	r20, r24
    6ab4:	c8 01       	movw	r24, r16
    6ab6:	b7 01       	movw	r22, r14
    6ab8:	0e 94 00 53 	call	0xa600	; 0xa600 <__mulsf3>
    6abc:	20 e0       	ldi	r18, 0x00	; 0
    6abe:	34 e2       	ldi	r19, 0x24	; 36
    6ac0:	44 e7       	ldi	r20, 0x74	; 116
    6ac2:	59 e4       	ldi	r21, 0x49	; 73
    6ac4:	0e 94 4c 51 	call	0xa298	; 0xa298 <__divsf3>
    6ac8:	9b 01       	movw	r18, r22
    6aca:	ac 01       	movw	r20, r24
    6acc:	60 91 a3 04 	lds	r22, 0x04A3
    6ad0:	70 91 a4 04 	lds	r23, 0x04A4
    6ad4:	80 91 a5 04 	lds	r24, 0x04A5
    6ad8:	90 91 a6 04 	lds	r25, 0x04A6
    6adc:	0e 94 7f 50 	call	0xa0fe	; 0xa0fe <__addsf3>
    6ae0:	60 93 a3 04 	sts	0x04A3, r22
    6ae4:	70 93 a4 04 	sts	0x04A4, r23
    6ae8:	80 93 a5 04 	sts	0x04A5, r24
    6aec:	90 93 a6 04 	sts	0x04A6, r25
		timeLeftOdom = getTime100MicroSec();
    6af0:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
    6af4:	60 93 cc 04 	sts	0x04CC, r22
    6af8:	70 93 cd 04 	sts	0x04CD, r23
    6afc:	80 93 ce 04 	sts	0x04CE, r24
    6b00:	90 93 cf 04 	sts	0x04CF, r25
		leftMotSteps = (signed long int)leftDist;
    6b04:	60 91 a3 04 	lds	r22, 0x04A3
    6b08:	70 91 a4 04 	lds	r23, 0x04A4
    6b0c:	80 91 a5 04 	lds	r24, 0x04A5
    6b10:	90 91 a6 04 	lds	r25, 0x04A6
    6b14:	0e 94 b4 51 	call	0xa368	; 0xa368 <__fixsfsi>
    6b18:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <__floatsisf>
    6b1c:	60 93 e5 02 	sts	0x02E5, r22
    6b20:	70 93 e6 02 	sts	0x02E6, r23
    6b24:	80 93 e7 02 	sts	0x02E7, r24
    6b28:	90 93 e8 02 	sts	0x02E8, r25
		} else {
			leftMotSteps -= ((float)(last_left_vel>>3))*(LEFT_ENC_OFFSET-ENC_SLOPE*((float)(last_left_vel>>2)))/1000.0;
		}

*/
		if(robotPosition == HORIZONTAL_POS) {
    6b2c:	80 91 16 02 	lds	r24, 0x0216
    6b30:	81 30       	cpi	r24, 0x01	; 1
    6b32:	09 f4       	brne	.+2      	; 0x6b36 <handleMotorsWithSpeedController+0x1a6>
    6b34:	db c1       	rjmp	.+950    	; 0x6eec <handleMotorsWithSpeedController+0x55c>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_left(&pwm_left_working);
			//PORTB |= (1 << 5);
		} else {
			//PORTB &= ~(1 << 6);
			start_vertical_speed_control_left(&pwm_left_working);
    6b36:	8f e1       	ldi	r24, 0x1F	; 31
    6b38:	93 e0       	ldi	r25, 0x03	; 3
    6b3a:	0e 94 68 18 	call	0x30d0	; 0x30d0 <start_vertical_speed_control_left>
			//PORTB |= (1 << 6);
		}

		pwm_left = pwm_left_working;
    6b3e:	80 91 1f 03 	lds	r24, 0x031F
    6b42:	90 91 20 03 	lds	r25, 0x0320
    6b46:	90 93 08 03 	sts	0x0308, r25
    6b4a:	80 93 07 03 	sts	0x0307, r24

		if(pwm_left > 0) {
    6b4e:	18 16       	cp	r1, r24
    6b50:	19 06       	cpc	r1, r25
    6b52:	0c f0       	brlt	.+2      	; 0x6b56 <handleMotorsWithSpeedController+0x1c6>
    6b54:	0d c2       	rjmp	.+1050   	; 0x6f70 <handleMotorsWithSpeedController+0x5e0>
			OCR4A = (unsigned int)pwm_left;
    6b56:	90 93 a9 00 	sts	0x00A9, r25
    6b5a:	80 93 a8 00 	sts	0x00A8, r24
		} else {
			OCR4A = 0;
			OCR4B = 0;
		}

		computeOdometry++;
    6b5e:	80 91 b3 04 	lds	r24, 0x04B3
    6b62:	8f 5f       	subi	r24, 0xFF	; 255
    6b64:	80 93 b3 04 	sts	0x04B3, r24

	}

	if(compute_right_vel) {
    6b68:	80 91 08 02 	lds	r24, 0x0208
    6b6c:	88 23       	and	r24, r24
    6b6e:	09 f0       	breq	.+2      	; 0x6b72 <handleMotorsWithSpeedController+0x1e2>
    6b70:	c1 c0       	rjmp	.+386    	; 0x6cf4 <handleMotorsWithSpeedController+0x364>
    6b72:	80 91 b3 04 	lds	r24, 0x04B3

		computeOdometry++;

	}

	if(computeOdometry>=2) {	// compute odometry when we get the last encoders values for both wheels
    6b76:	82 30       	cpi	r24, 0x02	; 2
    6b78:	08 f4       	brcc	.+2      	; 0x6b7c <handleMotorsWithSpeedController+0x1ec>
    6b7a:	ab c0       	rjmp	.+342    	; 0x6cd2 <handleMotorsWithSpeedController+0x342>

		// the odometry computation takes about 1 ms

		computeOdometry = 0;
    6b7c:	10 92 b3 04 	sts	0x04B3, r1

		deltaDist = ((rightDist-rightDistPrev)+(leftDist-leftDistPrev))/2.0;
    6b80:	60 90 a7 04 	lds	r6, 0x04A7
    6b84:	70 90 a8 04 	lds	r7, 0x04A8
    6b88:	80 90 a9 04 	lds	r8, 0x04A9
    6b8c:	90 90 aa 04 	lds	r9, 0x04AA
    6b90:	20 90 a3 04 	lds	r2, 0x04A3
    6b94:	30 90 a4 04 	lds	r3, 0x04A4
    6b98:	40 90 a5 04 	lds	r4, 0x04A5
    6b9c:	50 90 a6 04 	lds	r5, 0x04A6
    6ba0:	c4 01       	movw	r24, r8
    6ba2:	b3 01       	movw	r22, r6
    6ba4:	20 91 af 04 	lds	r18, 0x04AF
    6ba8:	30 91 b0 04 	lds	r19, 0x04B0
    6bac:	40 91 b1 04 	lds	r20, 0x04B1
    6bb0:	50 91 b2 04 	lds	r21, 0x04B2
    6bb4:	0e 94 7e 50 	call	0xa0fc	; 0xa0fc <__subsf3>
    6bb8:	7b 01       	movw	r14, r22
    6bba:	8c 01       	movw	r16, r24
    6bbc:	c2 01       	movw	r24, r4
    6bbe:	b1 01       	movw	r22, r2
    6bc0:	20 91 ab 04 	lds	r18, 0x04AB
    6bc4:	30 91 ac 04 	lds	r19, 0x04AC
    6bc8:	40 91 ad 04 	lds	r20, 0x04AD
    6bcc:	50 91 ae 04 	lds	r21, 0x04AE
    6bd0:	0e 94 7e 50 	call	0xa0fc	; 0xa0fc <__subsf3>
    6bd4:	9b 01       	movw	r18, r22
    6bd6:	ac 01       	movw	r20, r24
    6bd8:	c8 01       	movw	r24, r16
    6bda:	b7 01       	movw	r22, r14
    6bdc:	0e 94 7f 50 	call	0xa0fe	; 0xa0fe <__addsf3>
    6be0:	20 e0       	ldi	r18, 0x00	; 0
    6be2:	30 e0       	ldi	r19, 0x00	; 0
    6be4:	40 e0       	ldi	r20, 0x00	; 0
    6be6:	5f e3       	ldi	r21, 0x3F	; 63
    6be8:	0e 94 00 53 	call	0xa600	; 0xa600 <__mulsf3>
    6bec:	d6 2e       	mov	r13, r22
    6bee:	c7 2e       	mov	r12, r23
    6bf0:	b8 2e       	mov	r11, r24
    6bf2:	a9 2e       	mov	r10, r25
    6bf4:	a6 01       	movw	r20, r12
    6bf6:	95 01       	movw	r18, r10
    6bf8:	85 2f       	mov	r24, r21
    6bfa:	94 2f       	mov	r25, r20
    6bfc:	a3 2f       	mov	r26, r19
    6bfe:	b2 2f       	mov	r27, r18
    6c00:	80 93 8f 04 	sts	0x048F, r24
    6c04:	90 93 90 04 	sts	0x0490, r25
    6c08:	a0 93 91 04 	sts	0x0491, r26
    6c0c:	b0 93 92 04 	sts	0x0492, r27

		if(robotPosition == HORIZONTAL_POS) {
    6c10:	80 91 16 02 	lds	r24, 0x0216
    6c14:	81 30       	cpi	r24, 0x01	; 1
    6c16:	09 f4       	brne	.+2      	; 0x6c1a <handleMotorsWithSpeedController+0x28a>
    6c18:	31 c1       	rjmp	.+610    	; 0x6e7c <handleMotorsWithSpeedController+0x4ec>
			//thetaOld = (rightMotSteps - leftMotSteps)/WHEEL_DIST;	// radians
			theta = (rightDist-leftDist)/WHEEL_DIST;
		} else {
			//thetaOld = thetaAcc;
			theta = thetaAcc;
    6c1a:	f0 90 b4 04 	lds	r15, 0x04B4
    6c1e:	00 91 b5 04 	lds	r16, 0x04B5
    6c22:	10 91 b6 04 	lds	r17, 0x04B6
    6c26:	e0 90 b7 04 	lds	r14, 0x04B7
    6c2a:	8f 2d       	mov	r24, r15
    6c2c:	90 2f       	mov	r25, r16
    6c2e:	a1 2f       	mov	r26, r17
    6c30:	be 2d       	mov	r27, r14
    6c32:	80 93 7f 04 	sts	0x047F, r24
    6c36:	90 93 80 04 	sts	0x0480, r25
    6c3a:	a0 93 81 04 	sts	0x0481, r26
    6c3e:	b0 93 82 04 	sts	0x0482, r27
		}

		//deltaDistOld = ((rightMotSteps-rightMotStepsOld)+(leftMotSteps-leftMotStepsOld))/2.0;

		xPos = xPos + cos(theta)*deltaDist;				
    6c42:	6f 2d       	mov	r22, r15
    6c44:	70 2f       	mov	r23, r16
    6c46:	81 2f       	mov	r24, r17
    6c48:	9e 2d       	mov	r25, r14
    6c4a:	0e 94 49 51 	call	0xa292	; 0xa292 <cos>
    6c4e:	9b 01       	movw	r18, r22
    6c50:	ac 01       	movw	r20, r24
    6c52:	d6 01       	movw	r26, r12
    6c54:	f5 01       	movw	r30, r10
    6c56:	6b 2f       	mov	r22, r27
    6c58:	7c 2d       	mov	r23, r12
    6c5a:	8f 2f       	mov	r24, r31
    6c5c:	9a 2d       	mov	r25, r10
    6c5e:	0e 94 00 53 	call	0xa600	; 0xa600 <__mulsf3>
    6c62:	9b 01       	movw	r18, r22
    6c64:	ac 01       	movw	r20, r24
    6c66:	60 91 87 04 	lds	r22, 0x0487
    6c6a:	70 91 88 04 	lds	r23, 0x0488
    6c6e:	80 91 89 04 	lds	r24, 0x0489
    6c72:	90 91 8a 04 	lds	r25, 0x048A
    6c76:	0e 94 7f 50 	call	0xa0fe	; 0xa0fe <__addsf3>
    6c7a:	60 93 87 04 	sts	0x0487, r22
    6c7e:	70 93 88 04 	sts	0x0488, r23
    6c82:	80 93 89 04 	sts	0x0489, r24
    6c86:	90 93 8a 04 	sts	0x048A, r25
		yPos = yPos + sin(theta)*deltaDist;
    6c8a:	6f 2d       	mov	r22, r15
    6c8c:	70 2f       	mov	r23, r16
    6c8e:	81 2f       	mov	r24, r17
    6c90:	9e 2d       	mov	r25, r14
    6c92:	0e 94 63 53 	call	0xa6c6	; 0xa6c6 <sin>
    6c96:	9b 01       	movw	r18, r22
    6c98:	ac 01       	movw	r20, r24
    6c9a:	d6 01       	movw	r26, r12
    6c9c:	f5 01       	movw	r30, r10
    6c9e:	6b 2f       	mov	r22, r27
    6ca0:	7c 2d       	mov	r23, r12
    6ca2:	8f 2f       	mov	r24, r31
    6ca4:	9a 2d       	mov	r25, r10
    6ca6:	0e 94 00 53 	call	0xa600	; 0xa600 <__mulsf3>
    6caa:	9b 01       	movw	r18, r22
    6cac:	ac 01       	movw	r20, r24
    6cae:	60 91 8b 04 	lds	r22, 0x048B
    6cb2:	70 91 8c 04 	lds	r23, 0x048C
    6cb6:	80 91 8d 04 	lds	r24, 0x048D
    6cba:	90 91 8e 04 	lds	r25, 0x048E
    6cbe:	0e 94 7f 50 	call	0xa0fe	; 0xa0fe <__addsf3>
    6cc2:	60 93 8b 04 	sts	0x048B, r22
    6cc6:	70 93 8c 04 	sts	0x048C, r23
    6cca:	80 93 8d 04 	sts	0x048D, r24
    6cce:	90 93 8e 04 	sts	0x048E, r25
		//xPosOld = xPosOld + cos(thetaOld)*deltaDistOld;				
		//yPosOld = yPosOld + sin(thetaOld)*deltaDistOld;

	}

}
    6cd2:	1f 91       	pop	r17
    6cd4:	0f 91       	pop	r16
    6cd6:	ff 90       	pop	r15
    6cd8:	ef 90       	pop	r14
    6cda:	df 90       	pop	r13
    6cdc:	cf 90       	pop	r12
    6cde:	bf 90       	pop	r11
    6ce0:	af 90       	pop	r10
    6ce2:	9f 90       	pop	r9
    6ce4:	8f 90       	pop	r8
    6ce6:	7f 90       	pop	r7
    6ce8:	6f 90       	pop	r6
    6cea:	5f 90       	pop	r5
    6cec:	4f 90       	pop	r4
    6cee:	3f 90       	pop	r3
    6cf0:	2f 90       	pop	r2
    6cf2:	08 95       	ret

	}

	if(compute_right_vel) {

		last_right_vel = right_vel_sum>>2;
    6cf4:	20 91 ff 02 	lds	r18, 0x02FF
    6cf8:	30 91 00 03 	lds	r19, 0x0300
    6cfc:	36 95       	lsr	r19
    6cfe:	27 95       	ror	r18
    6d00:	36 95       	lsr	r19
    6d02:	27 95       	ror	r18
    6d04:	30 93 04 03 	sts	0x0304, r19
    6d08:	20 93 03 03 	sts	0x0303, r18
		compute_right_vel = 0;
    6d0c:	10 92 08 02 	sts	0x0208, r1
		right_vel_sum = 0;
    6d10:	10 92 00 03 	sts	0x0300, r1
    6d14:	10 92 ff 02 	sts	0x02FF, r1

		if(calibrateOdomFlag==1) {
    6d18:	80 91 67 05 	lds	r24, 0x0567
    6d1c:	81 30       	cpi	r24, 0x01	; 1
    6d1e:	09 f4       	brne	.+2      	; 0x6d22 <handleMotorsWithSpeedController+0x392>
    6d20:	ea c0       	rjmp	.+468    	; 0x6ef6 <handleMotorsWithSpeedController+0x566>
			rightSpeedSumOdom += last_right_vel;
			rightSumCount++;
		}

		getRightSpeedFromInput();
    6d22:	0e 94 12 30 	call	0x6024	; 0x6024 <getRightSpeedFromInput>
		rightDistPrev = rightDist;
    6d26:	80 91 a7 04 	lds	r24, 0x04A7
    6d2a:	90 91 a8 04 	lds	r25, 0x04A8
    6d2e:	a0 91 a9 04 	lds	r26, 0x04A9
    6d32:	b0 91 aa 04 	lds	r27, 0x04AA
    6d36:	80 93 af 04 	sts	0x04AF, r24
    6d3a:	90 93 b0 04 	sts	0x04B0, r25
    6d3e:	a0 93 b1 04 	sts	0x04B1, r26
    6d42:	b0 93 b2 04 	sts	0x04B2, r27
		rightDist += ((float)speedRightFromEnc*((float)(getTime100MicroSec()-timeRightOdom)*104.0))/1000000.0;	// distance in mm				
    6d46:	60 91 ca 04 	lds	r22, 0x04CA
    6d4a:	70 91 cb 04 	lds	r23, 0x04CB
    6d4e:	88 27       	eor	r24, r24
    6d50:	77 fd       	sbrc	r23, 7
    6d52:	80 95       	com	r24
    6d54:	98 2f       	mov	r25, r24
    6d56:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <__floatsisf>
    6d5a:	7b 01       	movw	r14, r22
    6d5c:	8c 01       	movw	r16, r24
    6d5e:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
    6d62:	20 91 d0 04 	lds	r18, 0x04D0
    6d66:	30 91 d1 04 	lds	r19, 0x04D1
    6d6a:	40 91 d2 04 	lds	r20, 0x04D2
    6d6e:	50 91 d3 04 	lds	r21, 0x04D3
    6d72:	62 1b       	sub	r22, r18
    6d74:	73 0b       	sbc	r23, r19
    6d76:	84 0b       	sbc	r24, r20
    6d78:	95 0b       	sbc	r25, r21
    6d7a:	0e 94 e5 51 	call	0xa3ca	; 0xa3ca <__floatunsisf>
    6d7e:	20 e0       	ldi	r18, 0x00	; 0
    6d80:	30 e0       	ldi	r19, 0x00	; 0
    6d82:	40 ed       	ldi	r20, 0xD0	; 208
    6d84:	52 e4       	ldi	r21, 0x42	; 66
    6d86:	0e 94 00 53 	call	0xa600	; 0xa600 <__mulsf3>
    6d8a:	9b 01       	movw	r18, r22
    6d8c:	ac 01       	movw	r20, r24
    6d8e:	c8 01       	movw	r24, r16
    6d90:	b7 01       	movw	r22, r14
    6d92:	0e 94 00 53 	call	0xa600	; 0xa600 <__mulsf3>
    6d96:	20 e0       	ldi	r18, 0x00	; 0
    6d98:	34 e2       	ldi	r19, 0x24	; 36
    6d9a:	44 e7       	ldi	r20, 0x74	; 116
    6d9c:	59 e4       	ldi	r21, 0x49	; 73
    6d9e:	0e 94 4c 51 	call	0xa298	; 0xa298 <__divsf3>
    6da2:	9b 01       	movw	r18, r22
    6da4:	ac 01       	movw	r20, r24
    6da6:	60 91 a7 04 	lds	r22, 0x04A7
    6daa:	70 91 a8 04 	lds	r23, 0x04A8
    6dae:	80 91 a9 04 	lds	r24, 0x04A9
    6db2:	90 91 aa 04 	lds	r25, 0x04AA
    6db6:	0e 94 7f 50 	call	0xa0fe	; 0xa0fe <__addsf3>
    6dba:	60 93 a7 04 	sts	0x04A7, r22
    6dbe:	70 93 a8 04 	sts	0x04A8, r23
    6dc2:	80 93 a9 04 	sts	0x04A9, r24
    6dc6:	90 93 aa 04 	sts	0x04AA, r25
		timeRightOdom = getTime100MicroSec();
    6dca:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
    6dce:	60 93 d0 04 	sts	0x04D0, r22
    6dd2:	70 93 d1 04 	sts	0x04D1, r23
    6dd6:	80 93 d2 04 	sts	0x04D2, r24
    6dda:	90 93 d3 04 	sts	0x04D3, r25
		rightMotSteps = (signed long int)rightDist;
    6dde:	60 91 a7 04 	lds	r22, 0x04A7
    6de2:	70 91 a8 04 	lds	r23, 0x04A8
    6de6:	80 91 a9 04 	lds	r24, 0x04A9
    6dea:	90 91 aa 04 	lds	r25, 0x04AA
    6dee:	0e 94 b4 51 	call	0xa368	; 0xa368 <__fixsfsi>
    6df2:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <__floatsisf>
    6df6:	60 93 e1 02 	sts	0x02E1, r22
    6dfa:	70 93 e2 02 	sts	0x02E2, r23
    6dfe:	80 93 e3 02 	sts	0x02E3, r24
    6e02:	90 93 e4 02 	sts	0x02E4, r25
		} else {
			rightMotSteps -= ((float)(last_right_vel>>3))*(RIGHT_ENC_OFFSET-ENC_SLOPE*((float)(last_right_vel>>2)))/1000.0;
		}
*/

		if(robotPosition == HORIZONTAL_POS) {
    6e06:	80 91 16 02 	lds	r24, 0x0216
    6e0a:	81 30       	cpi	r24, 0x01	; 1
    6e0c:	09 f4       	brne	.+2      	; 0x6e10 <handleMotorsWithSpeedController+0x480>
    6e0e:	47 c0       	rjmp	.+142    	; 0x6e9e <handleMotorsWithSpeedController+0x50e>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_right(&pwm_right_working);
			//PORTB |= (1 << 5);
		} else {
			//PORTB &= ~(1 << 6);
			start_vertical_speed_control_right(&pwm_right_working);
    6e10:	8d e1       	ldi	r24, 0x1D	; 29
    6e12:	93 e0       	ldi	r25, 0x03	; 3
    6e14:	0e 94 06 1a 	call	0x340c	; 0x340c <start_vertical_speed_control_right>
			//PORTB |= (1 << 6);
		}

		pwm_right = pwm_right_working;
    6e18:	80 91 1d 03 	lds	r24, 0x031D
    6e1c:	90 91 1e 03 	lds	r25, 0x031E
    6e20:	90 93 06 03 	sts	0x0306, r25
    6e24:	80 93 05 03 	sts	0x0305, r24

		if(pwm_right > 0) {
    6e28:	18 16       	cp	r1, r24
    6e2a:	19 06       	cpc	r1, r25
    6e2c:	0c f0       	brlt	.+2      	; 0x6e30 <handleMotorsWithSpeedController+0x4a0>
    6e2e:	95 c0       	rjmp	.+298    	; 0x6f5a <handleMotorsWithSpeedController+0x5ca>
			OCR3A = (unsigned int)pwm_right;
    6e30:	90 93 99 00 	sts	0x0099, r25
    6e34:	80 93 98 00 	sts	0x0098, r24
		} else {
			OCR3A = 0;
			OCR3B = 0;
		}

		computeOdometry++;
    6e38:	80 91 b3 04 	lds	r24, 0x04B3
    6e3c:	8f 5f       	subi	r24, 0xFF	; 255
    6e3e:	80 93 b3 04 	sts	0x04B3, r24
    6e42:	99 ce       	rjmp	.-718    	; 0x6b76 <handleMotorsWithSpeedController+0x1e6>
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_BW_SC);
		}
	}

	if(obstacleAvoidanceEnabled) {
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
    6e44:	8f e1       	ldi	r24, 0x1F	; 31
    6e46:	93 e0       	ldi	r25, 0x03	; 3
    6e48:	6d e1       	ldi	r22, 0x1D	; 29
    6e4a:	73 e0       	ldi	r23, 0x03	; 3
    6e4c:	0e 94 25 3b 	call	0x764a	; 0x764a <obstacleAvoidance>
    6e50:	80 91 1f 03 	lds	r24, 0x031F
    6e54:	90 91 20 03 	lds	r25, 0x0320
    6e58:	cf cd       	rjmp	.-1122   	; 0x69f8 <handleMotorsWithSpeedController+0x68>
}

void handleMotorsWithSpeedController() {

	if(calibrateOdomFlag==1) {
		pwm_right_working = pwm_intermediate_right_desired;
    6e5a:	80 91 0d 03 	lds	r24, 0x030D
    6e5e:	90 91 0e 03 	lds	r25, 0x030E
    6e62:	90 93 1e 03 	sts	0x031E, r25
    6e66:	80 93 1d 03 	sts	0x031D, r24
		pwm_left_working = pwm_intermediate_left_desired;
    6e6a:	80 91 0f 03 	lds	r24, 0x030F
    6e6e:	90 91 10 03 	lds	r25, 0x0310
    6e72:	90 93 20 03 	sts	0x0320, r25
    6e76:	80 93 1f 03 	sts	0x031F, r24
    6e7a:	b9 cd       	rjmp	.-1166   	; 0x69ee <handleMotorsWithSpeedController+0x5e>

		deltaDist = ((rightDist-rightDistPrev)+(leftDist-leftDistPrev))/2.0;

		if(robotPosition == HORIZONTAL_POS) {
			//thetaOld = (rightMotSteps - leftMotSteps)/WHEEL_DIST;	// radians
			theta = (rightDist-leftDist)/WHEEL_DIST;
    6e7c:	c4 01       	movw	r24, r8
    6e7e:	b3 01       	movw	r22, r6
    6e80:	a2 01       	movw	r20, r4
    6e82:	91 01       	movw	r18, r2
    6e84:	0e 94 7e 50 	call	0xa0fc	; 0xa0fc <__subsf3>
    6e88:	20 e0       	ldi	r18, 0x00	; 0
    6e8a:	30 e0       	ldi	r19, 0x00	; 0
    6e8c:	4e e1       	ldi	r20, 0x1E	; 30
    6e8e:	52 e4       	ldi	r21, 0x42	; 66
    6e90:	0e 94 4c 51 	call	0xa298	; 0xa298 <__divsf3>
    6e94:	f6 2e       	mov	r15, r22
    6e96:	07 2f       	mov	r16, r23
    6e98:	18 2f       	mov	r17, r24
    6e9a:	e9 2e       	mov	r14, r25
    6e9c:	c6 ce       	rjmp	.-628    	; 0x6c2a <handleMotorsWithSpeedController+0x29a>
		}
*/

		if(robotPosition == HORIZONTAL_POS) {
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_right(&pwm_right_working);
    6e9e:	8d e1       	ldi	r24, 0x1D	; 29
    6ea0:	93 e0       	ldi	r25, 0x03	; 3
    6ea2:	0e 94 a4 1b 	call	0x3748	; 0x3748 <start_horizontal_speed_control_right>
    6ea6:	b8 cf       	rjmp	.-144    	; 0x6e18 <handleMotorsWithSpeedController+0x488>
		last_left_vel = left_vel_sum>>2;
		compute_left_vel = 0;
		left_vel_sum = 0;
		
		if(calibrateOdomFlag==1) {
			leftSpeedSumOdom += last_left_vel;
    6ea8:	44 27       	eor	r20, r20
    6eaa:	37 fd       	sbrc	r19, 7
    6eac:	40 95       	com	r20
    6eae:	54 2f       	mov	r21, r20
    6eb0:	80 91 b8 04 	lds	r24, 0x04B8
    6eb4:	90 91 b9 04 	lds	r25, 0x04B9
    6eb8:	a0 91 ba 04 	lds	r26, 0x04BA
    6ebc:	b0 91 bb 04 	lds	r27, 0x04BB
    6ec0:	82 0f       	add	r24, r18
    6ec2:	93 1f       	adc	r25, r19
    6ec4:	a4 1f       	adc	r26, r20
    6ec6:	b5 1f       	adc	r27, r21
    6ec8:	80 93 b8 04 	sts	0x04B8, r24
    6ecc:	90 93 b9 04 	sts	0x04B9, r25
    6ed0:	a0 93 ba 04 	sts	0x04BA, r26
    6ed4:	b0 93 bb 04 	sts	0x04BB, r27
			leftSumCount++;
    6ed8:	80 91 c0 04 	lds	r24, 0x04C0
    6edc:	90 91 c1 04 	lds	r25, 0x04C1
    6ee0:	01 96       	adiw	r24, 0x01	; 1
    6ee2:	90 93 c1 04 	sts	0x04C1, r25
    6ee6:	80 93 c0 04 	sts	0x04C0, r24
    6eea:	ae cd       	rjmp	.-1188   	; 0x6a48 <handleMotorsWithSpeedController+0xb8>
		}

*/
		if(robotPosition == HORIZONTAL_POS) {
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_left(&pwm_left_working);
    6eec:	8f e1       	ldi	r24, 0x1F	; 31
    6eee:	93 e0       	ldi	r25, 0x03	; 3
    6ef0:	0e 94 eb 1c 	call	0x39d6	; 0x39d6 <start_horizontal_speed_control_left>
    6ef4:	24 ce       	rjmp	.-952    	; 0x6b3e <handleMotorsWithSpeedController+0x1ae>
		last_right_vel = right_vel_sum>>2;
		compute_right_vel = 0;
		right_vel_sum = 0;

		if(calibrateOdomFlag==1) {
			rightSpeedSumOdom += last_right_vel;
    6ef6:	44 27       	eor	r20, r20
    6ef8:	37 fd       	sbrc	r19, 7
    6efa:	40 95       	com	r20
    6efc:	54 2f       	mov	r21, r20
    6efe:	80 91 bc 04 	lds	r24, 0x04BC
    6f02:	90 91 bd 04 	lds	r25, 0x04BD
    6f06:	a0 91 be 04 	lds	r26, 0x04BE
    6f0a:	b0 91 bf 04 	lds	r27, 0x04BF
    6f0e:	82 0f       	add	r24, r18
    6f10:	93 1f       	adc	r25, r19
    6f12:	a4 1f       	adc	r26, r20
    6f14:	b5 1f       	adc	r27, r21
    6f16:	80 93 bc 04 	sts	0x04BC, r24
    6f1a:	90 93 bd 04 	sts	0x04BD, r25
    6f1e:	a0 93 be 04 	sts	0x04BE, r26
    6f22:	b0 93 bf 04 	sts	0x04BF, r27
			rightSumCount++;
    6f26:	80 91 c2 04 	lds	r24, 0x04C2
    6f2a:	90 91 c3 04 	lds	r25, 0x04C3
    6f2e:	01 96       	adiw	r24, 0x01	; 1
    6f30:	90 93 c3 04 	sts	0x04C3, r25
    6f34:	80 93 c2 04 	sts	0x04C2, r24
    6f38:	f4 ce       	rjmp	.-536    	; 0x6d22 <handleMotorsWithSpeedController+0x392>
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_BW_SC);
		}
		if(pwm_intermediate_left_desired >= 0) {		// pwm in the range -127..127
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_FW_SC);
		} else {
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_BW_SC);
    6f3a:	62 e0       	ldi	r22, 0x02	; 2
    6f3c:	0e 94 aa 2c 	call	0x5954	; 0x5954 <getInputFromSpeed>
    6f40:	90 93 20 03 	sts	0x0320, r25
    6f44:	80 93 1f 03 	sts	0x031F, r24
    6f48:	52 cd       	rjmp	.-1372   	; 0x69ee <handleMotorsWithSpeedController+0x5e>
		pwm_left_working = pwm_intermediate_left_desired;
	} else {
		if(pwm_intermediate_right_desired >= 0) {		// pwm in the range -127..127
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_FW_SC);
		} else {
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_BW_SC);
    6f4a:	63 e0       	ldi	r22, 0x03	; 3
    6f4c:	0e 94 aa 2c 	call	0x5954	; 0x5954 <getInputFromSpeed>
    6f50:	90 93 1e 03 	sts	0x031E, r25
    6f54:	80 93 1d 03 	sts	0x031D, r24
    6f58:	3d cd       	rjmp	.-1414   	; 0x69d4 <handleMotorsWithSpeedController+0x44>

		pwm_right = pwm_right_working;

		if(pwm_right > 0) {
			OCR3A = (unsigned int)pwm_right;
		} else if(pwm_right < 0) {
    6f5a:	00 97       	sbiw	r24, 0x00	; 0
    6f5c:	a1 f4       	brne	.+40     	; 0x6f86 <handleMotorsWithSpeedController+0x5f6>
			OCR3B = (unsigned int)(-pwm_right);
		} else {
			OCR3A = 0;
    6f5e:	10 92 99 00 	sts	0x0099, r1
    6f62:	10 92 98 00 	sts	0x0098, r1
			OCR3B = 0;
    6f66:	10 92 9b 00 	sts	0x009B, r1
    6f6a:	10 92 9a 00 	sts	0x009A, r1
    6f6e:	64 cf       	rjmp	.-312    	; 0x6e38 <handleMotorsWithSpeedController+0x4a8>

		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
    6f70:	00 97       	sbiw	r24, 0x00	; 0
    6f72:	89 f4       	brne	.+34     	; 0x6f96 <handleMotorsWithSpeedController+0x606>
			OCR4B =(unsigned int)( -pwm_left);
		} else {
			OCR4A = 0;
    6f74:	10 92 a9 00 	sts	0x00A9, r1
    6f78:	10 92 a8 00 	sts	0x00A8, r1
			OCR4B = 0;
    6f7c:	10 92 ab 00 	sts	0x00AB, r1
    6f80:	10 92 aa 00 	sts	0x00AA, r1
    6f84:	ec cd       	rjmp	.-1064   	; 0x6b5e <handleMotorsWithSpeedController+0x1ce>
		pwm_right = pwm_right_working;

		if(pwm_right > 0) {
			OCR3A = (unsigned int)pwm_right;
		} else if(pwm_right < 0) {
			OCR3B = (unsigned int)(-pwm_right);
    6f86:	90 95       	com	r25
    6f88:	81 95       	neg	r24
    6f8a:	9f 4f       	sbci	r25, 0xFF	; 255
    6f8c:	90 93 9b 00 	sts	0x009B, r25
    6f90:	80 93 9a 00 	sts	0x009A, r24
    6f94:	51 cf       	rjmp	.-350    	; 0x6e38 <handleMotorsWithSpeedController+0x4a8>
		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
			OCR4B =(unsigned int)( -pwm_left);
    6f96:	90 95       	com	r25
    6f98:	81 95       	neg	r24
    6f9a:	9f 4f       	sbci	r25, 0xFF	; 255
    6f9c:	90 93 ab 00 	sts	0x00AB, r25
    6fa0:	80 93 aa 00 	sts	0x00AA, r24
    6fa4:	dc cd       	rjmp	.-1096   	; 0x6b5e <handleMotorsWithSpeedController+0x1ce>

00006fa6 <writeDefaultCalibration>:
		speedLeftFromEnc = -speedLeftFromEnc;
    }
    
}

void writeDefaultCalibration() {
    6fa6:	2f 92       	push	r2
    6fa8:	3f 92       	push	r3
    6faa:	4f 92       	push	r4
    6fac:	5f 92       	push	r5
    6fae:	6f 92       	push	r6
    6fb0:	7f 92       	push	r7
    6fb2:	8f 92       	push	r8
    6fb4:	9f 92       	push	r9
    6fb6:	af 92       	push	r10
    6fb8:	bf 92       	push	r11
    6fba:	cf 92       	push	r12
    6fbc:	df 92       	push	r13
    6fbe:	ef 92       	push	r14
    6fc0:	ff 92       	push	r15
    6fc2:	0f 93       	push	r16
    6fc4:	1f 93       	push	r17
    6fc6:	cf 93       	push	r28
    6fc8:	df 93       	push	r29
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    	calibration[i][0] = i+1;
	}
    // the following values are taken from a field test
    // forward left, speed control enabled
    calibration[0][0] = 20;		// measured speed with back EMF (adc 0..1023)
    6fca:	a4 e1       	ldi	r26, 0x14	; 20
    6fcc:	b0 e0       	ldi	r27, 0x00	; 0
    6fce:	b0 93 de 08 	sts	0x08DE, r27
    6fd2:	a0 93 dd 08 	sts	0x08DD, r26
    calibration[1][0] = 40;
    6fd6:	88 e2       	ldi	r24, 0x28	; 40
    6fd8:	90 e0       	ldi	r25, 0x00	; 0
    6fda:	90 93 ee 08 	sts	0x08EE, r25
    6fde:	80 93 ed 08 	sts	0x08ED, r24
    calibration[2][0] = 59;
    6fe2:	6b e3       	ldi	r22, 0x3B	; 59
    6fe4:	70 e0       	ldi	r23, 0x00	; 0
    6fe6:	70 93 fe 08 	sts	0x08FE, r23
    6fea:	60 93 fd 08 	sts	0x08FD, r22
    calibration[3][0] = 79;
    6fee:	0f e4       	ldi	r16, 0x4F	; 79
    6ff0:	10 e0       	ldi	r17, 0x00	; 0
    6ff2:	10 93 0e 09 	sts	0x090E, r17
    6ff6:	00 93 0d 09 	sts	0x090D, r16
    calibration[4][0] = 100;
    6ffa:	84 e6       	ldi	r24, 0x64	; 100
    6ffc:	90 e0       	ldi	r25, 0x00	; 0
    6ffe:	90 93 1e 09 	sts	0x091E, r25
    7002:	80 93 1d 09 	sts	0x091D, r24
    calibration[5][0] = 120;
    7006:	f8 e7       	ldi	r31, 0x78	; 120
    7008:	af 2e       	mov	r10, r31
    700a:	b1 2c       	mov	r11, r1
    700c:	b0 92 2e 09 	sts	0x092E, r11
    7010:	a0 92 2d 09 	sts	0x092D, r10
    calibration[6][0] = 139;
    7014:	8b e8       	ldi	r24, 0x8B	; 139
    7016:	90 e0       	ldi	r25, 0x00	; 0
    7018:	90 93 3e 09 	sts	0x093E, r25
    701c:	80 93 3d 09 	sts	0x093D, r24
    calibration[7][0] = 159;
    7020:	2f e9       	ldi	r18, 0x9F	; 159
    7022:	30 e0       	ldi	r19, 0x00	; 0
    7024:	30 93 4e 09 	sts	0x094E, r19
    7028:	20 93 4d 09 	sts	0x094D, r18
	calibration[8][0] = 180;
    702c:	44 eb       	ldi	r20, 0xB4	; 180
    702e:	50 e0       	ldi	r21, 0x00	; 0
    7030:	50 93 5e 09 	sts	0x095E, r21
    7034:	40 93 5d 09 	sts	0x095D, r20
    calibration[0][1] = 19;    	// real speed measured in mm/s
    7038:	63 e1       	ldi	r22, 0x13	; 19
    703a:	70 e0       	ldi	r23, 0x00	; 0
    703c:	70 93 e0 08 	sts	0x08E0, r23
    7040:	60 93 df 08 	sts	0x08DF, r22
    calibration[1][1] = 47;
    7044:	2f e2       	ldi	r18, 0x2F	; 47
    7046:	30 e0       	ldi	r19, 0x00	; 0
    7048:	30 93 f0 08 	sts	0x08F0, r19
    704c:	20 93 ef 08 	sts	0x08EF, r18
    calibration[2][1] = 72;
    7050:	28 e4       	ldi	r18, 0x48	; 72
    7052:	30 e0       	ldi	r19, 0x00	; 0
    7054:	30 93 00 09 	sts	0x0900, r19
    7058:	20 93 ff 08 	sts	0x08FF, r18
    calibration[3][1] = 91;
    705c:	2b e5       	ldi	r18, 0x5B	; 91
    705e:	30 e0       	ldi	r19, 0x00	; 0
    7060:	30 93 10 09 	sts	0x0910, r19
    7064:	20 93 0f 09 	sts	0x090F, r18
    calibration[4][1] = 109;
    7068:	2d e6       	ldi	r18, 0x6D	; 109
    706a:	30 e0       	ldi	r19, 0x00	; 0
    706c:	30 93 20 09 	sts	0x0920, r19
    7070:	20 93 1f 09 	sts	0x091F, r18
    calibration[5][1] = 125;
    7074:	ed e7       	ldi	r30, 0x7D	; 125
    7076:	6e 2e       	mov	r6, r30
    7078:	71 2c       	mov	r7, r1
    707a:	70 92 30 09 	sts	0x0930, r7
    707e:	60 92 2f 09 	sts	0x092F, r6
    calibration[6][1] = 143;
    7082:	2f e8       	ldi	r18, 0x8F	; 143
    7084:	30 e0       	ldi	r19, 0x00	; 0
    7086:	30 93 40 09 	sts	0x0940, r19
    708a:	20 93 3f 09 	sts	0x093F, r18
    calibration[7][1] = 160;
    708e:	20 ea       	ldi	r18, 0xA0	; 160
    7090:	30 e0       	ldi	r19, 0x00	; 0
    7092:	30 93 50 09 	sts	0x0950, r19
    7096:	20 93 4f 09 	sts	0x094F, r18
	calibration[8][1] = 174;
    709a:	ee ea       	ldi	r30, 0xAE	; 174
    709c:	f0 e0       	ldi	r31, 0x00	; 0
    709e:	f0 93 60 09 	sts	0x0960, r31
    70a2:	e0 93 5f 09 	sts	0x095F, r30
    // forward right, speed control enabled
    calibration[0][2] = 19;		// measured speed with back EMF (adc 0..1023)
    70a6:	70 93 e2 08 	sts	0x08E2, r23
    70aa:	60 93 e1 08 	sts	0x08E1, r22
    calibration[1][2] = 39;
    70ae:	e7 e2       	ldi	r30, 0x27	; 39
    70b0:	f0 e0       	ldi	r31, 0x00	; 0
    70b2:	f0 93 f2 08 	sts	0x08F2, r31
    70b6:	e0 93 f1 08 	sts	0x08F1, r30
    calibration[2][2] = 60;
    70ba:	cc e3       	ldi	r28, 0x3C	; 60
    70bc:	d0 e0       	ldi	r29, 0x00	; 0
    70be:	d0 93 02 09 	sts	0x0902, r29
    70c2:	c0 93 01 09 	sts	0x0901, r28
    calibration[3][2] = 80;
    70c6:	60 e5       	ldi	r22, 0x50	; 80
    70c8:	70 e0       	ldi	r23, 0x00	; 0
    70ca:	70 93 12 09 	sts	0x0912, r23
    70ce:	60 93 11 09 	sts	0x0911, r22
    calibration[4][2] = 99;
    70d2:	63 e6       	ldi	r22, 0x63	; 99
    70d4:	e6 2e       	mov	r14, r22
    70d6:	f1 2c       	mov	r15, r1
    70d8:	f0 92 22 09 	sts	0x0922, r15
    70dc:	e0 92 21 09 	sts	0x0921, r14
    calibration[5][2] = 119;
    70e0:	67 e7       	ldi	r22, 0x77	; 119
    70e2:	70 e0       	ldi	r23, 0x00	; 0
    70e4:	70 93 32 09 	sts	0x0932, r23
    70e8:	60 93 31 09 	sts	0x0931, r22
    calibration[6][2] = 140;
    70ec:	0f 2e       	mov	r0, r31
    70ee:	fc e8       	ldi	r31, 0x8C	; 140
    70f0:	cf 2e       	mov	r12, r31
    70f2:	dd 24       	eor	r13, r13
    70f4:	f0 2d       	mov	r31, r0
    70f6:	d0 92 42 09 	sts	0x0942, r13
    70fa:	c0 92 41 09 	sts	0x0941, r12
    calibration[7][2] = 160;
    70fe:	30 93 52 09 	sts	0x0952, r19
    7102:	20 93 51 09 	sts	0x0951, r18
	calibration[8][2] = 180;
    7106:	50 93 62 09 	sts	0x0962, r21
    710a:	40 93 61 09 	sts	0x0961, r20
    calibration[0][3] = 23;    	// real speed measured in mm/s
    710e:	0f 2e       	mov	r0, r31
    7110:	f7 e1       	ldi	r31, 0x17	; 23
    7112:	8f 2e       	mov	r8, r31
    7114:	99 24       	eor	r9, r9
    7116:	f0 2d       	mov	r31, r0
    7118:	90 92 e4 08 	sts	0x08E4, r9
    711c:	80 92 e3 08 	sts	0x08E3, r8
    calibration[1][3] = 46;
    7120:	0f 2e       	mov	r0, r31
    7122:	fe e2       	ldi	r31, 0x2E	; 46
    7124:	4f 2e       	mov	r4, r31
    7126:	55 24       	eor	r5, r5
    7128:	f0 2d       	mov	r31, r0
    712a:	50 92 f4 08 	sts	0x08F4, r5
    712e:	40 92 f3 08 	sts	0x08F3, r4
    calibration[2][3] = 64;
    7132:	88 24       	eor	r8, r8
    7134:	99 24       	eor	r9, r9
    7136:	68 94       	set
    7138:	86 f8       	bld	r8, 6
    713a:	90 92 04 09 	sts	0x0904, r9
    713e:	80 92 03 09 	sts	0x0903, r8
    calibration[3][3] = 81;
    7142:	0f 2e       	mov	r0, r31
    7144:	f1 e5       	ldi	r31, 0x51	; 81
    7146:	2f 2e       	mov	r2, r31
    7148:	33 24       	eor	r3, r3
    714a:	f0 2d       	mov	r31, r0
    714c:	30 92 14 09 	sts	0x0914, r3
    7150:	20 92 13 09 	sts	0x0913, r2
    calibration[4][3] = 97;
    7154:	0f 2e       	mov	r0, r31
    7156:	f1 e6       	ldi	r31, 0x61	; 97
    7158:	8f 2e       	mov	r8, r31
    715a:	99 24       	eor	r9, r9
    715c:	f0 2d       	mov	r31, r0
    715e:	90 92 24 09 	sts	0x0924, r9
    7162:	80 92 23 09 	sts	0x0923, r8
    calibration[5][3] = 112;
    7166:	0f 2e       	mov	r0, r31
    7168:	f0 e7       	ldi	r31, 0x70	; 112
    716a:	8f 2e       	mov	r8, r31
    716c:	99 24       	eor	r9, r9
    716e:	f0 2d       	mov	r31, r0
    7170:	90 92 34 09 	sts	0x0934, r9
    7174:	80 92 33 09 	sts	0x0933, r8
    calibration[6][3] = 125;
    7178:	70 92 44 09 	sts	0x0944, r7
    717c:	60 92 43 09 	sts	0x0943, r6
    calibration[7][3] = 139;
    7180:	90 93 54 09 	sts	0x0954, r25
    7184:	80 93 53 09 	sts	0x0953, r24
	calibration[8][3] = 152;
    7188:	0f 2e       	mov	r0, r31
    718a:	f8 e9       	ldi	r31, 0x98	; 152
    718c:	8f 2e       	mov	r8, r31
    718e:	99 24       	eor	r9, r9
    7190:	f0 2d       	mov	r31, r0
    7192:	90 92 64 09 	sts	0x0964, r9
    7196:	80 92 63 09 	sts	0x0963, r8
    // backward left, speed control enabled
    calibration[0][4] = 20;		// measured speed with back EMF (adc 0..1023)
    719a:	b0 93 e6 08 	sts	0x08E6, r27
    719e:	a0 93 e5 08 	sts	0x08E5, r26
    calibration[1][4] = 39;
    71a2:	f0 93 f6 08 	sts	0x08F6, r31
    71a6:	e0 93 f5 08 	sts	0x08F5, r30
    calibration[2][4] = 60;
    71aa:	d0 93 06 09 	sts	0x0906, r29
    71ae:	c0 93 05 09 	sts	0x0905, r28
    calibration[3][4] = 79;
    71b2:	10 93 16 09 	sts	0x0916, r17
    71b6:	00 93 15 09 	sts	0x0915, r16
    calibration[4][4] = 99;
    71ba:	f0 92 26 09 	sts	0x0926, r15
    71be:	e0 92 25 09 	sts	0x0925, r14
    calibration[5][4] = 120;
    71c2:	b0 92 36 09 	sts	0x0936, r11
    71c6:	a0 92 35 09 	sts	0x0935, r10
    calibration[6][4] = 140;
    71ca:	d0 92 46 09 	sts	0x0946, r13
    71ce:	c0 92 45 09 	sts	0x0945, r12
    calibration[7][4] = 160;
    71d2:	30 93 56 09 	sts	0x0956, r19
    71d6:	20 93 55 09 	sts	0x0955, r18
	calibration[8][4] = 179;
    71da:	c3 eb       	ldi	r28, 0xB3	; 179
    71dc:	d0 e0       	ldi	r29, 0x00	; 0
    71de:	d0 93 66 09 	sts	0x0966, r29
    71e2:	c0 93 65 09 	sts	0x0965, r28
    calibration[0][5] = 18;    	// real speed measured in mm/s
    71e6:	c2 e1       	ldi	r28, 0x12	; 18
    71e8:	d0 e0       	ldi	r29, 0x00	; 0
    71ea:	d0 93 e8 08 	sts	0x08E8, r29
    71ee:	c0 93 e7 08 	sts	0x08E7, r28
    calibration[1][5] = 45;
    71f2:	cd e2       	ldi	r28, 0x2D	; 45
    71f4:	d0 e0       	ldi	r29, 0x00	; 0
    71f6:	d0 93 f8 08 	sts	0x08F8, r29
    71fa:	c0 93 f7 08 	sts	0x08F7, r28
    calibration[2][5] = 68;
    71fe:	c4 e4       	ldi	r28, 0x44	; 68
    7200:	d0 e0       	ldi	r29, 0x00	; 0
    7202:	d0 93 08 09 	sts	0x0908, r29
    7206:	c0 93 07 09 	sts	0x0907, r28
    calibration[3][5] = 87;
    720a:	c7 e5       	ldi	r28, 0x57	; 87
    720c:	d0 e0       	ldi	r29, 0x00	; 0
    720e:	d0 93 18 09 	sts	0x0918, r29
    7212:	c0 93 17 09 	sts	0x0917, r28
    calibration[4][5] = 105;
    7216:	c9 e6       	ldi	r28, 0x69	; 105
    7218:	d0 e0       	ldi	r29, 0x00	; 0
    721a:	d0 93 28 09 	sts	0x0928, r29
    721e:	c0 93 27 09 	sts	0x0927, r28
    calibration[5][5] = 119;
    7222:	70 93 38 09 	sts	0x0938, r23
    7226:	60 93 37 09 	sts	0x0937, r22
    calibration[6][5] = 137;
    722a:	c9 e8       	ldi	r28, 0x89	; 137
    722c:	d0 e0       	ldi	r29, 0x00	; 0
    722e:	d0 93 48 09 	sts	0x0948, r29
    7232:	c0 93 47 09 	sts	0x0947, r28
    calibration[7][5] = 151;
    7236:	c7 e9       	ldi	r28, 0x97	; 151
    7238:	d0 e0       	ldi	r29, 0x00	; 0
    723a:	d0 93 58 09 	sts	0x0958, r29
    723e:	c0 93 57 09 	sts	0x0957, r28
	calibration[8][5] = 168;
    7242:	c8 ea       	ldi	r28, 0xA8	; 168
    7244:	d0 e0       	ldi	r29, 0x00	; 0
    7246:	d0 93 68 09 	sts	0x0968, r29
    724a:	c0 93 67 09 	sts	0x0967, r28
    // backward right, speed control enabled
    calibration[0][6] = 20;		// measured speed with back EMF (adc 0..1023)
    724e:	b0 93 ea 08 	sts	0x08EA, r27
    7252:	a0 93 e9 08 	sts	0x08E9, r26
    calibration[1][6] = 39;
    7256:	f0 93 fa 08 	sts	0x08FA, r31
    725a:	e0 93 f9 08 	sts	0x08F9, r30
    calibration[2][6] = 59;
    725e:	eb e3       	ldi	r30, 0x3B	; 59
    7260:	f0 e0       	ldi	r31, 0x00	; 0
    7262:	f0 93 0a 09 	sts	0x090A, r31
    7266:	e0 93 09 09 	sts	0x0909, r30
    calibration[3][6] = 80;
    726a:	e0 e5       	ldi	r30, 0x50	; 80
    726c:	f0 e0       	ldi	r31, 0x00	; 0
    726e:	f0 93 1a 09 	sts	0x091A, r31
    7272:	e0 93 19 09 	sts	0x0919, r30
    calibration[4][6] = 100;
    7276:	e4 e6       	ldi	r30, 0x64	; 100
    7278:	f0 e0       	ldi	r31, 0x00	; 0
    727a:	f0 93 2a 09 	sts	0x092A, r31
    727e:	e0 93 29 09 	sts	0x0929, r30
    calibration[5][6] = 119;
    7282:	70 93 3a 09 	sts	0x093A, r23
    7286:	60 93 39 09 	sts	0x0939, r22
    calibration[6][6] = 139;
    728a:	90 93 4a 09 	sts	0x094A, r25
    728e:	80 93 49 09 	sts	0x0949, r24
    calibration[7][6] = 160;
    7292:	30 93 5a 09 	sts	0x095A, r19
    7296:	20 93 59 09 	sts	0x0959, r18
	calibration[8][6] = 180;
    729a:	50 93 6a 09 	sts	0x096A, r21
    729e:	40 93 69 09 	sts	0x0969, r20
    calibration[0][7] = 22;    	// real speed measured in mm/s
    72a2:	26 e1       	ldi	r18, 0x16	; 22
    72a4:	30 e0       	ldi	r19, 0x00	; 0
    72a6:	30 93 ec 08 	sts	0x08EC, r19
    72aa:	20 93 eb 08 	sts	0x08EB, r18
    calibration[1][7] = 46;
    72ae:	50 92 fc 08 	sts	0x08FC, r5
    72b2:	40 92 fb 08 	sts	0x08FB, r4
    calibration[2][7] = 65;
    72b6:	21 e4       	ldi	r18, 0x41	; 65
    72b8:	30 e0       	ldi	r19, 0x00	; 0
    72ba:	30 93 0c 09 	sts	0x090C, r19
    72be:	20 93 0b 09 	sts	0x090B, r18
    calibration[3][7] = 81;
    72c2:	30 92 1c 09 	sts	0x091C, r3
    72c6:	20 92 1b 09 	sts	0x091B, r2
    calibration[4][7] = 96;
    72ca:	20 e6       	ldi	r18, 0x60	; 96
    72cc:	30 e0       	ldi	r19, 0x00	; 0
    72ce:	30 93 2c 09 	sts	0x092C, r19
    72d2:	20 93 2b 09 	sts	0x092B, r18
    calibration[5][7] = 111;
    72d6:	2f e6       	ldi	r18, 0x6F	; 111
    72d8:	30 e0       	ldi	r19, 0x00	; 0
    72da:	30 93 3c 09 	sts	0x093C, r19
    72de:	20 93 3b 09 	sts	0x093B, r18
    calibration[6][7] = 125;
    72e2:	70 92 4c 09 	sts	0x094C, r7
    72e6:	60 92 4b 09 	sts	0x094B, r6
    calibration[7][7] = 139;
    72ea:	90 93 5c 09 	sts	0x095C, r25
    72ee:	80 93 5b 09 	sts	0x095B, r24
	calibration[8][7] = 153;
    72f2:	89 e9       	ldi	r24, 0x99	; 153
    72f4:	90 e0       	ldi	r25, 0x00	; 0
    72f6:	90 93 6c 09 	sts	0x096C, r25
    72fa:	80 93 6b 09 	sts	0x096B, r24

    writeCalibrationToFlash();
    72fe:	0e 94 9a 45 	call	0x8b34	; 0x8b34 <writeCalibrationToFlash>
}
    7302:	df 91       	pop	r29
    7304:	cf 91       	pop	r28
    7306:	1f 91       	pop	r17
    7308:	0f 91       	pop	r16
    730a:	ff 90       	pop	r15
    730c:	ef 90       	pop	r14
    730e:	df 90       	pop	r13
    7310:	cf 90       	pop	r12
    7312:	bf 90       	pop	r11
    7314:	af 90       	pop	r10
    7316:	9f 90       	pop	r9
    7318:	8f 90       	pop	r8
    731a:	7f 90       	pop	r7
    731c:	6f 90       	pop	r6
    731e:	5f 90       	pop	r5
    7320:	4f 90       	pop	r4
    7322:	3f 90       	pop	r3
    7324:	2f 90       	pop	r2
    7326:	08 95       	ret

00007328 <initCalibration>:

void initCalibration() {

    unsigned int temp=0;
 
 	temp = eeprom_read_word((uint16_t*)CALIB_CHECK_ADDRESS);
    7328:	8a e6       	ldi	r24, 0x6A	; 106
    732a:	9f e0       	ldi	r25, 0x0F	; 15
    732c:	0e 94 8b 54 	call	0xa916	; 0xa916 <__eerd_word_m2560>

    if(temp==0xAA55) {   // valid odometry data saved in flash, read them
    7330:	2a ea       	ldi	r18, 0xAA	; 170
    7332:	85 35       	cpi	r24, 0x55	; 85
    7334:	92 07       	cpc	r25, r18
    7336:	19 f0       	breq	.+6      	; 0x733e <initCalibration+0x16>
        readCalibrationFromFlash();
    } else {
		writeDefaultCalibration();		
    7338:	0e 94 d3 37 	call	0x6fa6	; 0x6fa6 <writeDefaultCalibration>
    733c:	08 95       	ret
    unsigned int temp=0;
 
 	temp = eeprom_read_word((uint16_t*)CALIB_CHECK_ADDRESS);

    if(temp==0xAA55) {   // valid odometry data saved in flash, read them
        readCalibrationFromFlash();
    733e:	0e 94 a9 45 	call	0x8b52	; 0x8b52 <readCalibrationFromFlash>
    7342:	08 95       	ret

00007344 <__vector_45>:
    }

}

// Motor left
ISR(TIMER4_OVF_vect) {
    7344:	1f 92       	push	r1
    7346:	0f 92       	push	r0
    7348:	0f b6       	in	r0, 0x3f	; 63
    734a:	0f 92       	push	r0
    734c:	11 24       	eor	r1, r1
    734e:	8f 93       	push	r24
    7350:	9f 93       	push	r25

//	LED_GREEN_ON;

	if(cliffDetectedFlag) {
    7352:	80 91 7e 04 	lds	r24, 0x047E
    7356:	88 23       	and	r24, r24
    7358:	61 f0       	breq	.+24     	; 0x7372 <__vector_45+0x2e>
		pwm_left = 0;
    735a:	10 92 08 03 	sts	0x0308, r1
    735e:	10 92 07 03 	sts	0x0307, r1
		OCR4A = 0;
    7362:	10 92 a9 00 	sts	0x00A9, r1
    7366:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    736a:	10 92 ab 00 	sts	0x00AB, r1
    736e:	10 92 aa 00 	sts	0x00AA, r1
	}

	left_current_avg = 0;
    7372:	10 92 f2 02 	sts	0x02F2, r1
    7376:	10 92 f1 02 	sts	0x02F1, r1

	// set pins mode based on controller output
	if(pwm_left == 0) {
    737a:	80 91 07 03 	lds	r24, 0x0307
    737e:	90 91 08 03 	lds	r25, 0x0308
    7382:	00 97       	sbiw	r24, 0x00	; 0
    7384:	41 f5       	brne	.+80     	; 0x73d6 <__vector_45+0x92>


		//leftMotorPhase = NO_PHASE;
		//compute_left_vel = 1;

		if(pwm_left_desired_to_control >= 0) {
    7386:	80 91 fb 02 	lds	r24, 0x02FB
    738a:	90 91 fc 02 	lds	r25, 0x02FC
    738e:	97 fd       	sbrc	r25, 7
    7390:	69 c0       	rjmp	.+210    	; 0x7464 <__vector_45+0x120>
			leftMotorPhase = PASSIVE_PHASE;
    7392:	81 e0       	ldi	r24, 0x01	; 1
    7394:	80 93 38 02 	sts	0x0238, r24
			currentMotLeftChannel = 14;
    7398:	8e e0       	ldi	r24, 0x0E	; 14
    739a:	80 93 35 02 	sts	0x0235, r24
		} else {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 15;
		}
		firstSampleLeft = 1;
    739e:	81 e0       	ldi	r24, 0x01	; 1
    73a0:	80 93 0a 02 	sts	0x020A, r24

		// select channel 15 to sample left current
		//currentMotLeftChannel = 15;
		TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    73a4:	80 91 a0 00 	lds	r24, 0x00A0
    73a8:	8f 75       	andi	r24, 0x5F	; 95
    73aa:	80 93 a0 00 	sts	0x00A0, r24
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    73ae:	80 91 02 01 	lds	r24, 0x0102
    73b2:	87 7e       	andi	r24, 0xE7	; 231
    73b4:	80 93 02 01 	sts	0x0102, r24
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
    73b8:	80 91 72 00 	lds	r24, 0x0072
    73bc:	89 7f       	andi	r24, 0xF9	; 249
    73be:	80 93 72 00 	sts	0x0072, r24
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
    73c2:	89 b3       	in	r24, 0x19	; 25
    73c4:	86 60       	ori	r24, 0x06	; 6
    73c6:	89 bb       	out	0x19, r24	; 25
	}
*/

//	LED_GREEN_OFF;

}
    73c8:	9f 91       	pop	r25
    73ca:	8f 91       	pop	r24
    73cc:	0f 90       	pop	r0
    73ce:	0f be       	out	0x3f, r0	; 63
    73d0:	0f 90       	pop	r0
    73d2:	1f 90       	pop	r1
    73d4:	18 95       	reti
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
	} else if(pwm_left > 0) {   		// move forward
    73d6:	18 16       	cp	r1, r24
    73d8:	19 06       	cpc	r1, r25
    73da:	2c f5       	brge	.+74     	; 0x7426 <__vector_45+0xe2>
		leftMotorPhase = ACTIVE_PHASE;
    73dc:	10 92 38 02 	sts	0x0238, r1
		// select channel 15 to sample left current
		currentMotLeftChannel = 15;
    73e0:	8f e0       	ldi	r24, 0x0F	; 15
    73e2:	80 93 35 02 	sts	0x0235, r24
		TCCR4A  &= ~(1 << COM4B1);		// disable OCB
    73e6:	80 91 a0 00 	lds	r24, 0x00A0
    73ea:	8f 7d       	andi	r24, 0xDF	; 223
    73ec:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
    73f0:	80 91 72 00 	lds	r24, 0x0072
    73f4:	8b 7f       	andi	r24, 0xFB	; 251
    73f6:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 4);				// output to 0
    73fa:	80 91 02 01 	lds	r24, 0x0102
    73fe:	8f 7e       	andi	r24, 0xEF	; 239
    7400:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4A1);		// enable OCA
    7404:	80 91 a0 00 	lds	r24, 0x00A0
    7408:	80 68       	ori	r24, 0x80	; 128
    740a:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
    740e:	80 91 72 00 	lds	r24, 0x0072
    7412:	82 60       	ori	r24, 0x02	; 2
    7414:	80 93 72 00 	sts	0x0072, r24
	}
*/

//	LED_GREEN_OFF;

}
    7418:	9f 91       	pop	r25
    741a:	8f 91       	pop	r24
    741c:	0f 90       	pop	r0
    741e:	0f be       	out	0x3f, r0	; 63
    7420:	0f 90       	pop	r0
    7422:	1f 90       	pop	r1
    7424:	18 95       	reti
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
		PORTH &= ~(1 << 4);				// output to 0
		TCCR4A |= (1 << COM4A1);		// enable OCA
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
	} else if(pwm_left < 0) {      		// move backward
		leftMotorPhase = ACTIVE_PHASE;
    7426:	10 92 38 02 	sts	0x0238, r1
		// select channel 14 to sample left current
		currentMotLeftChannel = 14;
    742a:	8e e0       	ldi	r24, 0x0E	; 14
    742c:	80 93 35 02 	sts	0x0235, r24
		TCCR4A  &= ~(1 << COM4A1);		// disable OCA
    7430:	80 91 a0 00 	lds	r24, 0x00A0
    7434:	8f 77       	andi	r24, 0x7F	; 127
    7436:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4A);		// disable OCA interrupt
    743a:	80 91 72 00 	lds	r24, 0x0072
    743e:	8d 7f       	andi	r24, 0xFD	; 253
    7440:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 3);				// output to 0
    7444:	80 91 02 01 	lds	r24, 0x0102
    7448:	87 7f       	andi	r24, 0xF7	; 247
    744a:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4B1);		// enable OCB
    744e:	80 91 a0 00 	lds	r24, 0x00A0
    7452:	80 62       	ori	r24, 0x20	; 32
    7454:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
    7458:	80 91 72 00 	lds	r24, 0x0072
    745c:	84 60       	ori	r24, 0x04	; 4
    745e:	80 93 72 00 	sts	0x0072, r24
    7462:	b2 cf       	rjmp	.-156    	; 0x73c8 <__vector_45+0x84>

		if(pwm_left_desired_to_control >= 0) {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 14;
		} else {
			leftMotorPhase = PASSIVE_PHASE;
    7464:	81 e0       	ldi	r24, 0x01	; 1
    7466:	80 93 38 02 	sts	0x0238, r24
			currentMotLeftChannel = 15;
    746a:	8f e0       	ldi	r24, 0x0F	; 15
    746c:	80 93 35 02 	sts	0x0235, r24
    7470:	96 cf       	rjmp	.-212    	; 0x739e <__vector_45+0x5a>

00007472 <__vector_42>:
//	LED_GREEN_OFF;

}

// motor left forward
ISR(TIMER4_COMPA_vect) {
    7472:	1f 92       	push	r1
    7474:	0f 92       	push	r0
    7476:	0f b6       	in	r0, 0x3f	; 63
    7478:	0f 92       	push	r0
    747a:	11 24       	eor	r1, r1
    747c:	8f 93       	push	r24
    747e:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    7480:	81 e0       	ldi	r24, 0x01	; 1
    7482:	80 93 38 02 	sts	0x0238, r24
	// select channel 14 to sample the left velocity
	currentMotLeftChannel = 14;
    7486:	9e e0       	ldi	r25, 0x0E	; 14
    7488:	90 93 35 02 	sts	0x0235, r25

	firstSampleLeft = 1;
    748c:	80 93 0a 02 	sts	0x020A, r24

//	LED_GREEN_OFF;

}
    7490:	9f 91       	pop	r25
    7492:	8f 91       	pop	r24
    7494:	0f 90       	pop	r0
    7496:	0f be       	out	0x3f, r0	; 63
    7498:	0f 90       	pop	r0
    749a:	1f 90       	pop	r1
    749c:	18 95       	reti

0000749e <__vector_43>:

// motor left backward
ISR(TIMER4_COMPB_vect) {
    749e:	1f 92       	push	r1
    74a0:	0f 92       	push	r0
    74a2:	0f b6       	in	r0, 0x3f	; 63
    74a4:	0f 92       	push	r0
    74a6:	11 24       	eor	r1, r1
    74a8:	8f 93       	push	r24
    74aa:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    74ac:	81 e0       	ldi	r24, 0x01	; 1
    74ae:	80 93 38 02 	sts	0x0238, r24
	// select channel 15 to sample the left velocity
	currentMotLeftChannel = 15;
    74b2:	9f e0       	ldi	r25, 0x0F	; 15
    74b4:	90 93 35 02 	sts	0x0235, r25

	firstSampleLeft = 1;
    74b8:	80 93 0a 02 	sts	0x020A, r24

//	LED_GREEN_OFF;

}
    74bc:	9f 91       	pop	r25
    74be:	8f 91       	pop	r24
    74c0:	0f 90       	pop	r0
    74c2:	0f be       	out	0x3f, r0	; 63
    74c4:	0f 90       	pop	r0
    74c6:	1f 90       	pop	r1
    74c8:	18 95       	reti

000074ca <__vector_35>:

// Motor right
ISR(TIMER3_OVF_vect) {
    74ca:	1f 92       	push	r1
    74cc:	0f 92       	push	r0
    74ce:	0f b6       	in	r0, 0x3f	; 63
    74d0:	0f 92       	push	r0
    74d2:	11 24       	eor	r1, r1
    74d4:	8f 93       	push	r24
    74d6:	9f 93       	push	r25

//	LED_GREEN_ON;

  	// PORTB ^= (1 << 7); // Toggle the LED

	if(cliffDetectedFlag) {
    74d8:	80 91 7e 04 	lds	r24, 0x047E
    74dc:	88 23       	and	r24, r24
    74de:	61 f0       	breq	.+24     	; 0x74f8 <__vector_35+0x2e>
		pwm_right = 0;
    74e0:	10 92 06 03 	sts	0x0306, r1
    74e4:	10 92 05 03 	sts	0x0305, r1
		OCR3A = 0;
    74e8:	10 92 99 00 	sts	0x0099, r1
    74ec:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    74f0:	10 92 9b 00 	sts	0x009B, r1
    74f4:	10 92 9a 00 	sts	0x009A, r1
	}

	right_current_avg = 0;
    74f8:	10 92 f4 02 	sts	0x02F4, r1
    74fc:	10 92 f3 02 	sts	0x02F3, r1


	if(pwm_right == 0) {
    7500:	80 91 05 03 	lds	r24, 0x0305
    7504:	90 91 06 03 	lds	r25, 0x0306
    7508:	00 97       	sbiw	r24, 0x00	; 0
    750a:	31 f5       	brne	.+76     	; 0x7558 <__vector_35+0x8e>
		//firstSampleRight = 0;

		//rightMotorPhase = NO_PHASE;
		//compute_right_vel = 1;

		if(pwm_right_desired_to_control >= 0) {
    750c:	80 91 f9 02 	lds	r24, 0x02F9
    7510:	90 91 fa 02 	lds	r25, 0x02FA
    7514:	97 fd       	sbrc	r25, 7
    7516:	5f c0       	rjmp	.+190    	; 0x75d6 <__vector_35+0x10c>
			rightMotorPhase = PASSIVE_PHASE;
    7518:	81 e0       	ldi	r24, 0x01	; 1
    751a:	80 93 37 02 	sts	0x0237, r24
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
    751e:	8c e0       	ldi	r24, 0x0C	; 12
    7520:	80 93 36 02 	sts	0x0236, r24
		} else {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
		}
		firstSampleRight = 1;
    7524:	81 e0       	ldi	r24, 0x01	; 1
    7526:	80 93 09 02 	sts	0x0209, r24

		// select channel 13 to sample left current
		//currentMotRightChannel = 13;
		TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    752a:	80 91 90 00 	lds	r24, 0x0090
    752e:	8f 75       	andi	r24, 0x5F	; 95
    7530:	80 93 90 00 	sts	0x0090, r24
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    7534:	8e b1       	in	r24, 0x0e	; 14
    7536:	87 7e       	andi	r24, 0xE7	; 231
    7538:	8e b9       	out	0x0e, r24	; 14
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
    753a:	80 91 71 00 	lds	r24, 0x0071
    753e:	89 7f       	andi	r24, 0xF9	; 249
    7540:	80 93 71 00 	sts	0x0071, r24
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
    7544:	88 b3       	in	r24, 0x18	; 24
    7546:	86 60       	ori	r24, 0x06	; 6
    7548:	88 bb       	out	0x18, r24	; 24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    754a:	9f 91       	pop	r25
    754c:	8f 91       	pop	r24
    754e:	0f 90       	pop	r0
    7550:	0f be       	out	0x3f, r0	; 63
    7552:	0f 90       	pop	r0
    7554:	1f 90       	pop	r1
    7556:	18 95       	reti
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
	}else if(pwm_right > 0) {   		// move forward
    7558:	18 16       	cp	r1, r24
    755a:	19 06       	cpc	r1, r25
    755c:	0c f5       	brge	.+66     	; 0x75a0 <__vector_35+0xd6>
		rightMotorPhase = ACTIVE_PHASE;
    755e:	10 92 37 02 	sts	0x0237, r1
		// select channel 13 to sample left current
		currentMotRightChannel = 13;
    7562:	8d e0       	ldi	r24, 0x0D	; 13
    7564:	80 93 36 02 	sts	0x0236, r24
		TCCR3A  &= ~(1 << COM3B1);		// disable OCB
    7568:	80 91 90 00 	lds	r24, 0x0090
    756c:	8f 7d       	andi	r24, 0xDF	; 223
    756e:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
    7572:	80 91 71 00 	lds	r24, 0x0071
    7576:	8b 7f       	andi	r24, 0xFB	; 251
    7578:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 4);				// output to 0
    757c:	74 98       	cbi	0x0e, 4	; 14
		TCCR3A |= (1 << COM3A1);		// enable OCA
    757e:	80 91 90 00 	lds	r24, 0x0090
    7582:	80 68       	ori	r24, 0x80	; 128
    7584:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
    7588:	80 91 71 00 	lds	r24, 0x0071
    758c:	82 60       	ori	r24, 0x02	; 2
    758e:	80 93 71 00 	sts	0x0071, r24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    7592:	9f 91       	pop	r25
    7594:	8f 91       	pop	r24
    7596:	0f 90       	pop	r0
    7598:	0f be       	out	0x3f, r0	; 63
    759a:	0f 90       	pop	r0
    759c:	1f 90       	pop	r1
    759e:	18 95       	reti
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
		PORTE &= ~(1 << 4);				// output to 0
		TCCR3A |= (1 << COM3A1);		// enable OCA
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
	} else if(pwm_right < 0) {      	// move backward
		rightMotorPhase = ACTIVE_PHASE;
    75a0:	10 92 37 02 	sts	0x0237, r1
		// select channel 12 to sample left current
		currentMotRightChannel = 12;
    75a4:	8c e0       	ldi	r24, 0x0C	; 12
    75a6:	80 93 36 02 	sts	0x0236, r24
		TCCR3A  &= ~(1 << COM3A1);		// disable OCA
    75aa:	80 91 90 00 	lds	r24, 0x0090
    75ae:	8f 77       	andi	r24, 0x7F	; 127
    75b0:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3A);		// disable OCA interrupt
    75b4:	80 91 71 00 	lds	r24, 0x0071
    75b8:	8d 7f       	andi	r24, 0xFD	; 253
    75ba:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 3);				// output to 0
    75be:	73 98       	cbi	0x0e, 3	; 14
		TCCR3A |= (1 << COM3B1);		// enable OCB
    75c0:	80 91 90 00 	lds	r24, 0x0090
    75c4:	80 62       	ori	r24, 0x20	; 32
    75c6:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3B);		// enable OCB interrupt
    75ca:	80 91 71 00 	lds	r24, 0x0071
    75ce:	84 60       	ori	r24, 0x04	; 4
    75d0:	80 93 71 00 	sts	0x0071, r24
    75d4:	ba cf       	rjmp	.-140    	; 0x754a <__vector_35+0x80>
		if(pwm_right_desired_to_control >= 0) {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
		} else {
			rightMotorPhase = PASSIVE_PHASE;
    75d6:	81 e0       	ldi	r24, 0x01	; 1
    75d8:	80 93 37 02 	sts	0x0237, r24
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
    75dc:	8d e0       	ldi	r24, 0x0D	; 13
    75de:	80 93 36 02 	sts	0x0236, r24
    75e2:	a0 cf       	rjmp	.-192    	; 0x7524 <__vector_35+0x5a>

000075e4 <__vector_32>:
//	LED_GREEN_OFF;

}

// motor right forward
ISR(TIMER3_COMPA_vect) {
    75e4:	1f 92       	push	r1
    75e6:	0f 92       	push	r0
    75e8:	0f b6       	in	r0, 0x3f	; 63
    75ea:	0f 92       	push	r0
    75ec:	11 24       	eor	r1, r1
    75ee:	8f 93       	push	r24
    75f0:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    75f2:	81 e0       	ldi	r24, 0x01	; 1
    75f4:	80 93 37 02 	sts	0x0237, r24
	// select channel 12 to sample the right velocity
	currentMotRightChannel = 12;
    75f8:	9c e0       	ldi	r25, 0x0C	; 12
    75fa:	90 93 36 02 	sts	0x0236, r25

	firstSampleRight = 1;
    75fe:	80 93 09 02 	sts	0x0209, r24

//	LED_RED_OFF;

}
    7602:	9f 91       	pop	r25
    7604:	8f 91       	pop	r24
    7606:	0f 90       	pop	r0
    7608:	0f be       	out	0x3f, r0	; 63
    760a:	0f 90       	pop	r0
    760c:	1f 90       	pop	r1
    760e:	18 95       	reti

00007610 <__vector_33>:

// motor right backward
ISR(TIMER3_COMPB_vect) {
    7610:	1f 92       	push	r1
    7612:	0f 92       	push	r0
    7614:	0f b6       	in	r0, 0x3f	; 63
    7616:	0f 92       	push	r0
    7618:	11 24       	eor	r1, r1
    761a:	8f 93       	push	r24
    761c:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    761e:	81 e0       	ldi	r24, 0x01	; 1
    7620:	80 93 37 02 	sts	0x0237, r24
	// select channel 13 to sample the right velocity
	currentMotRightChannel = 13;
    7624:	9d e0       	ldi	r25, 0x0D	; 13
    7626:	90 93 36 02 	sts	0x0236, r25

	firstSampleRight = 1;
    762a:	80 93 09 02 	sts	0x0209, r24

//	LED_RED_OFF;
}
    762e:	9f 91       	pop	r25
    7630:	8f 91       	pop	r24
    7632:	0f 90       	pop	r0
    7634:	0f be       	out	0x3f, r0	; 63
    7636:	0f 90       	pop	r0
    7638:	1f 90       	pop	r1
    763a:	18 95       	reti

0000763c <initBehaviors>:

#include "behaviors.h"

void initBehaviors() {

	srand(TCNT3);	// initialize random seed (used in obstacle avoidance)
    763c:	80 91 94 00 	lds	r24, 0x0094
    7640:	90 91 95 00 	lds	r25, 0x0095
    7644:	0e 94 61 54 	call	0xa8c2	; 0xa8c2 <srand>

}
    7648:	08 95       	ret

0000764a <obstacleAvoidance>:

void obstacleAvoidance(signed int *pwmLeft, signed int *pwmRight) {
    764a:	2f 92       	push	r2
    764c:	3f 92       	push	r3
    764e:	4f 92       	push	r4
    7650:	5f 92       	push	r5
    7652:	6f 92       	push	r6
    7654:	7f 92       	push	r7
    7656:	8f 92       	push	r8
    7658:	9f 92       	push	r9
    765a:	af 92       	push	r10
    765c:	bf 92       	push	r11
    765e:	cf 92       	push	r12
    7660:	df 92       	push	r13
    7662:	ef 92       	push	r14
    7664:	ff 92       	push	r15
    7666:	0f 93       	push	r16
    7668:	1f 93       	push	r17
    766a:	df 93       	push	r29
    766c:	cf 93       	push	r28
    766e:	cd b7       	in	r28, 0x3d	; 61
    7670:	de b7       	in	r29, 0x3e	; 62
    7672:	28 97       	sbiw	r28, 0x08	; 8
    7674:	0f b6       	in	r0, 0x3f	; 63
    7676:	f8 94       	cli
    7678:	de bf       	out	0x3e, r29	; 62
    767a:	0f be       	out	0x3f, r0	; 63
    767c:	cd bf       	out	0x3d, r28	; 61
    767e:	3c 01       	movw	r6, r24
    7680:	7a 83       	std	Y+2, r23	; 0x02
    7682:	69 83       	std	Y+1, r22	; 0x01
	//	y	0		0.5		1		0.5		0		-0.5	-1		-0.5

	unsigned int i=0;
	signed int long res=0;
	signed int sumSensorsX=0, sumSensorsY=0;
	signed int desL=*pwmLeft, desR=*pwmRight;
    7684:	fc 01       	movw	r30, r24
    7686:	01 90       	ld	r0, Z+
    7688:	f0 81       	ld	r31, Z
    768a:	e0 2d       	mov	r30, r0
    768c:	fc 83       	std	Y+4, r31	; 0x04
    768e:	eb 83       	std	Y+3, r30	; 0x03
    7690:	fb 01       	movw	r30, r22
    7692:	01 90       	ld	r0, Z+
    7694:	f0 81       	ld	r31, Z
    7696:	e0 2d       	mov	r30, r0
    7698:	fe 83       	std	Y+6, r31	; 0x06
    769a:	ed 83       	std	Y+5, r30	; 0x05

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    769c:	00 91 d1 02 	lds	r16, 0x02D1
    76a0:	10 91 d2 02 	lds	r17, 0x02D2
    76a4:	05 30       	cpi	r16, 0x05	; 5
    76a6:	11 05       	cpc	r17, r1
    76a8:	34 f4       	brge	.+12     	; 0x76b6 <obstacleAvoidance+0x6c>
			proximityResultLinear[i] = 0;
    76aa:	10 92 d2 02 	sts	0x02D2, r1
    76ae:	10 92 d1 02 	sts	0x02D1, r1
    76b2:	00 e0       	ldi	r16, 0x00	; 0
    76b4:	10 e0       	ldi	r17, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    76b6:	60 91 d3 02 	lds	r22, 0x02D3
    76ba:	70 91 d4 02 	lds	r23, 0x02D4
    76be:	65 30       	cpi	r22, 0x05	; 5
    76c0:	71 05       	cpc	r23, r1
    76c2:	34 f4       	brge	.+12     	; 0x76d0 <obstacleAvoidance+0x86>
			proximityResultLinear[i] = 0;
    76c4:	10 92 d4 02 	sts	0x02D4, r1
    76c8:	10 92 d3 02 	sts	0x02D3, r1
    76cc:	60 e0       	ldi	r22, 0x00	; 0
    76ce:	70 e0       	ldi	r23, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    76d0:	80 91 d5 02 	lds	r24, 0x02D5
    76d4:	90 91 d6 02 	lds	r25, 0x02D6
    76d8:	85 30       	cpi	r24, 0x05	; 5
    76da:	91 05       	cpc	r25, r1
    76dc:	24 f4       	brge	.+8      	; 0x76e6 <obstacleAvoidance+0x9c>
			proximityResultLinear[i] = 0;
    76de:	10 92 d6 02 	sts	0x02D6, r1
    76e2:	10 92 d5 02 	sts	0x02D5, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    76e6:	40 91 d7 02 	lds	r20, 0x02D7
    76ea:	50 91 d8 02 	lds	r21, 0x02D8
    76ee:	45 30       	cpi	r20, 0x05	; 5
    76f0:	51 05       	cpc	r21, r1
    76f2:	34 f4       	brge	.+12     	; 0x7700 <obstacleAvoidance+0xb6>
			proximityResultLinear[i] = 0;
    76f4:	10 92 d8 02 	sts	0x02D8, r1
    76f8:	10 92 d7 02 	sts	0x02D7, r1
    76fc:	40 e0       	ldi	r20, 0x00	; 0
    76fe:	50 e0       	ldi	r21, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    7700:	40 90 d9 02 	lds	r4, 0x02D9
    7704:	50 90 da 02 	lds	r5, 0x02DA
    7708:	f5 e0       	ldi	r31, 0x05	; 5
    770a:	4f 16       	cp	r4, r31
    770c:	51 04       	cpc	r5, r1
    770e:	34 f4       	brge	.+12     	; 0x771c <obstacleAvoidance+0xd2>
			proximityResultLinear[i] = 0;
    7710:	10 92 da 02 	sts	0x02DA, r1
    7714:	10 92 d9 02 	sts	0x02D9, r1
    7718:	44 24       	eor	r4, r4
    771a:	55 24       	eor	r5, r5
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    771c:	20 91 db 02 	lds	r18, 0x02DB
    7720:	30 91 dc 02 	lds	r19, 0x02DC
    7724:	25 30       	cpi	r18, 0x05	; 5
    7726:	31 05       	cpc	r19, r1
    7728:	34 f4       	brge	.+12     	; 0x7736 <obstacleAvoidance+0xec>
			proximityResultLinear[i] = 0;
    772a:	10 92 dc 02 	sts	0x02DC, r1
    772e:	10 92 db 02 	sts	0x02DB, r1
    7732:	20 e0       	ldi	r18, 0x00	; 0
    7734:	30 e0       	ldi	r19, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    7736:	80 91 dd 02 	lds	r24, 0x02DD
    773a:	90 91 de 02 	lds	r25, 0x02DE
    773e:	85 30       	cpi	r24, 0x05	; 5
    7740:	91 05       	cpc	r25, r1
    7742:	24 f4       	brge	.+8      	; 0x774c <obstacleAvoidance+0x102>
			proximityResultLinear[i] = 0;
    7744:	10 92 de 02 	sts	0x02DE, r1
    7748:	10 92 dd 02 	sts	0x02DD, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    774c:	80 91 df 02 	lds	r24, 0x02DF
    7750:	90 91 e0 02 	lds	r25, 0x02E0
    7754:	85 30       	cpi	r24, 0x05	; 5
    7756:	91 05       	cpc	r25, r1
    7758:	34 f4       	brge	.+12     	; 0x7766 <obstacleAvoidance+0x11c>
			proximityResultLinear[i] = 0;
    775a:	10 92 e0 02 	sts	0x02E0, r1
    775e:	10 92 df 02 	sts	0x02DF, r1
    7762:	80 e0       	ldi	r24, 0x00	; 0
    7764:	90 e0       	ldi	r25, 0x00	; 0
	}

	// sum the contribution of each sensor (based on the previous weights table);
	// give more weight to prox2 and prox6 (side proximities) in order to get more stability in narrow aisles;
	// add some noise to the sum in order to escape from dead-lock positions
	sumSensorsX = -proximityResultLinear[0] - (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) + proximityResultLinear[4] + (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + ((rand()%60)-30);
    7766:	10 95       	com	r17
    7768:	01 95       	neg	r16
    776a:	1f 4f       	sbci	r17, 0xFF	; 255
    776c:	5b 01       	movw	r10, r22
    776e:	b5 94       	asr	r11
    7770:	a7 94       	ror	r10
    7772:	7a 01       	movw	r14, r20
    7774:	f5 94       	asr	r15
    7776:	e7 94       	ror	r14
    7778:	69 01       	movw	r12, r18
    777a:	d5 94       	asr	r13
    777c:	c7 94       	ror	r12
    777e:	4c 01       	movw	r8, r24
    7780:	95 94       	asr	r9
    7782:	87 94       	ror	r8
    7784:	0e 94 5c 54 	call	0xa8b8	; 0xa8b8 <rand>
    7788:	92 01       	movw	r18, r4
    778a:	2e 51       	subi	r18, 0x1E	; 30
    778c:	30 40       	sbci	r19, 0x00	; 0
    778e:	20 0f       	add	r18, r16
    7790:	31 1f       	adc	r19, r17
    7792:	2e 0d       	add	r18, r14
    7794:	3f 1d       	adc	r19, r15
    7796:	2c 0d       	add	r18, r12
    7798:	3d 1d       	adc	r19, r13
    779a:	2a 19       	sub	r18, r10
    779c:	3b 09       	sbc	r19, r11
    779e:	28 19       	sub	r18, r8
    77a0:	39 09       	sbc	r19, r9
    77a2:	6c e3       	ldi	r22, 0x3C	; 60
    77a4:	26 2e       	mov	r2, r22
    77a6:	31 2c       	mov	r3, r1
    77a8:	b1 01       	movw	r22, r2
    77aa:	0e 94 be 53 	call	0xa77c	; 0xa77c <__divmodhi4>
    77ae:	28 0f       	add	r18, r24
    77b0:	39 1f       	adc	r19, r25
    77b2:	38 87       	std	Y+8, r19	; 0x08
    77b4:	2f 83       	std	Y+7, r18	; 0x07
	//sumSensorsX = -proximityResultLinear[0]  + proximityResultLinear[4];	
	sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[2]>>2) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[6]>>2) - (proximityResultLinear[7]>>1)+ ((rand()%60)-30);
    77b6:	e0 90 d3 02 	lds	r14, 0x02D3
    77ba:	f0 90 d4 02 	lds	r15, 0x02D4
    77be:	f5 94       	asr	r15
    77c0:	e7 94       	ror	r14
    77c2:	00 91 d5 02 	lds	r16, 0x02D5
    77c6:	10 91 d6 02 	lds	r17, 0x02D6
    77ca:	15 95       	asr	r17
    77cc:	07 95       	ror	r16
    77ce:	15 95       	asr	r17
    77d0:	07 95       	ror	r16
    77d2:	c0 90 d7 02 	lds	r12, 0x02D7
    77d6:	d0 90 d8 02 	lds	r13, 0x02D8
    77da:	d5 94       	asr	r13
    77dc:	c7 94       	ror	r12
    77de:	a0 90 db 02 	lds	r10, 0x02DB
    77e2:	b0 90 dc 02 	lds	r11, 0x02DC
    77e6:	b5 94       	asr	r11
    77e8:	a7 94       	ror	r10
    77ea:	40 90 dd 02 	lds	r4, 0x02DD
    77ee:	50 90 de 02 	lds	r5, 0x02DE
    77f2:	55 94       	asr	r5
    77f4:	47 94       	ror	r4
    77f6:	55 94       	asr	r5
    77f8:	47 94       	ror	r4
    77fa:	80 90 df 02 	lds	r8, 0x02DF
    77fe:	90 90 e0 02 	lds	r9, 0x02E0
    7802:	95 94       	asr	r9
    7804:	87 94       	ror	r8
    7806:	0e 94 5c 54 	call	0xa8b8	; 0xa8b8 <rand>
    780a:	97 01       	movw	r18, r14
    780c:	20 0f       	add	r18, r16
    780e:	31 1f       	adc	r19, r17
    7810:	2e 51       	subi	r18, 0x1E	; 30
    7812:	30 40       	sbci	r19, 0x00	; 0
    7814:	2c 0d       	add	r18, r12
    7816:	3d 1d       	adc	r19, r13
    7818:	2a 19       	sub	r18, r10
    781a:	3b 09       	sbc	r19, r11
    781c:	28 19       	sub	r18, r8
    781e:	39 09       	sbc	r19, r9
    7820:	24 19       	sub	r18, r4
    7822:	35 09       	sbc	r19, r5
    7824:	b1 01       	movw	r22, r2
    7826:	0e 94 be 53 	call	0xa77c	; 0xa77c <__divmodhi4>
    782a:	28 0f       	add	r18, r24
    782c:	39 1f       	adc	r19, r25
	//sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + (rand()%30);

	// modify the velocity components based on sensor values
	if(desL >= 0) {
    782e:	4b 81       	ldd	r20, Y+3	; 0x03
    7830:	5c 81       	ldd	r21, Y+4	; 0x04
    7832:	57 fd       	sbrc	r21, 7
    7834:	e5 c0       	rjmp	.+458    	; 0x7a00 <obstacleAvoidance+0x3b6>
		res = (signed long int)desL + (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
    7836:	5a 01       	movw	r10, r20
    7838:	cc 24       	eor	r12, r12
    783a:	b7 fc       	sbrc	r11, 7
    783c:	c0 94       	com	r12
    783e:	dc 2c       	mov	r13, r12
    7840:	8f 81       	ldd	r24, Y+7	; 0x07
    7842:	98 85       	ldd	r25, Y+8	; 0x08
    7844:	1c 01       	movw	r2, r24
    7846:	44 24       	eor	r4, r4
    7848:	37 fc       	sbrc	r3, 7
    784a:	40 94       	com	r4
    784c:	54 2c       	mov	r5, r4
    784e:	79 01       	movw	r14, r18
    7850:	00 27       	eor	r16, r16
    7852:	f7 fc       	sbrc	r15, 7
    7854:	00 95       	com	r16
    7856:	10 2f       	mov	r17, r16
    7858:	c2 01       	movw	r24, r4
    785a:	b1 01       	movw	r22, r2
    785c:	6e 19       	sub	r22, r14
    785e:	7f 09       	sbc	r23, r15
    7860:	80 0b       	sbc	r24, r16
    7862:	91 0b       	sbc	r25, r17
    7864:	a6 01       	movw	r20, r12
    7866:	95 01       	movw	r18, r10
    7868:	0e 94 8b 53 	call	0xa716	; 0xa716 <__mulsi3>
    786c:	b6 e0       	ldi	r27, 0x06	; 6
    786e:	95 95       	asr	r25
    7870:	87 95       	ror	r24
    7872:	77 95       	ror	r23
    7874:	67 95       	ror	r22
    7876:	ba 95       	dec	r27
    7878:	d1 f7       	brne	.-12     	; 0x786e <obstacleAvoidance+0x224>
    787a:	6a 0d       	add	r22, r10
    787c:	7b 1d       	adc	r23, r11
    787e:	8c 1d       	adc	r24, r12
    7880:	9d 1d       	adc	r25, r13
		*pwmLeft = (signed int)res;
    7882:	f3 01       	movw	r30, r6
    7884:	71 83       	std	Z+1, r23	; 0x01
    7886:	60 83       	st	Z, r22
	} else {
		res = (signed long int)desL - (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
		*pwmLeft = (signed int)res;
	}
	if(desR >=0) {
    7888:	2d 81       	ldd	r18, Y+5	; 0x05
    788a:	3e 81       	ldd	r19, Y+6	; 0x06
    788c:	37 fd       	sbrc	r19, 7
    788e:	97 c0       	rjmp	.+302    	; 0x79be <obstacleAvoidance+0x374>
		res = (signed long int)desR + (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
    7890:	59 01       	movw	r10, r18
    7892:	cc 24       	eor	r12, r12
    7894:	b7 fc       	sbrc	r11, 7
    7896:	c0 94       	com	r12
    7898:	dc 2c       	mov	r13, r12
    789a:	c8 01       	movw	r24, r16
    789c:	b7 01       	movw	r22, r14
    789e:	62 0d       	add	r22, r2
    78a0:	73 1d       	adc	r23, r3
    78a2:	84 1d       	adc	r24, r4
    78a4:	95 1d       	adc	r25, r5
    78a6:	a6 01       	movw	r20, r12
    78a8:	95 01       	movw	r18, r10
    78aa:	0e 94 8b 53 	call	0xa716	; 0xa716 <__mulsi3>
    78ae:	f6 e0       	ldi	r31, 0x06	; 6
    78b0:	95 95       	asr	r25
    78b2:	87 95       	ror	r24
    78b4:	77 95       	ror	r23
    78b6:	67 95       	ror	r22
    78b8:	fa 95       	dec	r31
    78ba:	d1 f7       	brne	.-12     	; 0x78b0 <obstacleAvoidance+0x266>
    78bc:	6a 0d       	add	r22, r10
    78be:	7b 1d       	adc	r23, r11
    78c0:	8c 1d       	adc	r24, r12
    78c2:	9d 1d       	adc	r25, r13
		*pwmRight = (signed int)res;
    78c4:	9b 01       	movw	r18, r22
    78c6:	e9 81       	ldd	r30, Y+1	; 0x01
    78c8:	fa 81       	ldd	r31, Y+2	; 0x02
    78ca:	71 83       	std	Z+1, r23	; 0x01
    78cc:	60 83       	st	Z, r22
	} else {
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	}

	if(currentSelector == 10) {	// force a little bit the upwards direction in vertical motion
    78ce:	80 91 5c 04 	lds	r24, 0x045C
    78d2:	8a 30       	cpi	r24, 0x0A	; 10
    78d4:	09 f4       	brne	.+2      	; 0x78d8 <obstacleAvoidance+0x28e>
    78d6:	4b c0       	rjmp	.+150    	; 0x796e <obstacleAvoidance+0x324>
			}
		}
	}

	// force the values to be in the pwm maximum range
	if (*pwmRight>(MAX_MOTORS_PWM/2)) *pwmRight=(MAX_MOTORS_PWM/2);
    78d8:	f2 e0       	ldi	r31, 0x02	; 2
    78da:	21 30       	cpi	r18, 0x01	; 1
    78dc:	3f 07       	cpc	r19, r31
    78de:	44 f0       	brlt	.+16     	; 0x78f0 <obstacleAvoidance+0x2a6>
    78e0:	80 e0       	ldi	r24, 0x00	; 0
    78e2:	92 e0       	ldi	r25, 0x02	; 2
    78e4:	e9 81       	ldd	r30, Y+1	; 0x01
    78e6:	fa 81       	ldd	r31, Y+2	; 0x02
    78e8:	91 83       	std	Z+1, r25	; 0x01
    78ea:	80 83       	st	Z, r24
    78ec:	20 e0       	ldi	r18, 0x00	; 0
    78ee:	32 e0       	ldi	r19, 0x02	; 2
	if (*pwmLeft>(MAX_MOTORS_PWM/2)) *pwmLeft=(MAX_MOTORS_PWM/2);
    78f0:	f3 01       	movw	r30, r6
    78f2:	80 81       	ld	r24, Z
    78f4:	91 81       	ldd	r25, Z+1	; 0x01
    78f6:	f2 e0       	ldi	r31, 0x02	; 2
    78f8:	81 30       	cpi	r24, 0x01	; 1
    78fa:	9f 07       	cpc	r25, r31
    78fc:	4c f0       	brlt	.+18     	; 0x7910 <obstacleAvoidance+0x2c6>
    78fe:	80 e0       	ldi	r24, 0x00	; 0
    7900:	92 e0       	ldi	r25, 0x02	; 2
    7902:	f3 01       	movw	r30, r6
    7904:	91 83       	std	Z+1, r25	; 0x01
    7906:	80 83       	st	Z, r24
    7908:	e9 81       	ldd	r30, Y+1	; 0x01
    790a:	fa 81       	ldd	r31, Y+2	; 0x02
    790c:	20 81       	ld	r18, Z
    790e:	31 81       	ldd	r19, Z+1	; 0x01
	if (*pwmRight<-(MAX_MOTORS_PWM/2)) *pwmRight=-(MAX_MOTORS_PWM/2);
    7910:	fe ef       	ldi	r31, 0xFE	; 254
    7912:	20 30       	cpi	r18, 0x00	; 0
    7914:	3f 07       	cpc	r19, r31
    7916:	4c f4       	brge	.+18     	; 0x792a <obstacleAvoidance+0x2e0>
    7918:	80 e0       	ldi	r24, 0x00	; 0
    791a:	9e ef       	ldi	r25, 0xFE	; 254
    791c:	e9 81       	ldd	r30, Y+1	; 0x01
    791e:	fa 81       	ldd	r31, Y+2	; 0x02
    7920:	91 83       	std	Z+1, r25	; 0x01
    7922:	80 83       	st	Z, r24
    7924:	f3 01       	movw	r30, r6
    7926:	80 81       	ld	r24, Z
    7928:	91 81       	ldd	r25, Z+1	; 0x01
	if (*pwmLeft<-(MAX_MOTORS_PWM/2)) *pwmLeft=-(MAX_MOTORS_PWM/2);
    792a:	fe ef       	ldi	r31, 0xFE	; 254
    792c:	80 30       	cpi	r24, 0x00	; 0
    792e:	9f 07       	cpc	r25, r31
    7930:	2c f4       	brge	.+10     	; 0x793c <obstacleAvoidance+0x2f2>
    7932:	80 e0       	ldi	r24, 0x00	; 0
    7934:	9e ef       	ldi	r25, 0xFE	; 254
    7936:	f3 01       	movw	r30, r6
    7938:	91 83       	std	Z+1, r25	; 0x01
    793a:	80 83       	st	Z, r24

}
    793c:	28 96       	adiw	r28, 0x08	; 8
    793e:	0f b6       	in	r0, 0x3f	; 63
    7940:	f8 94       	cli
    7942:	de bf       	out	0x3e, r29	; 62
    7944:	0f be       	out	0x3f, r0	; 63
    7946:	cd bf       	out	0x3d, r28	; 61
    7948:	cf 91       	pop	r28
    794a:	df 91       	pop	r29
    794c:	1f 91       	pop	r17
    794e:	0f 91       	pop	r16
    7950:	ff 90       	pop	r15
    7952:	ef 90       	pop	r14
    7954:	df 90       	pop	r13
    7956:	cf 90       	pop	r12
    7958:	bf 90       	pop	r11
    795a:	af 90       	pop	r10
    795c:	9f 90       	pop	r9
    795e:	8f 90       	pop	r8
    7960:	7f 90       	pop	r7
    7962:	6f 90       	pop	r6
    7964:	5f 90       	pop	r5
    7966:	4f 90       	pop	r4
    7968:	3f 90       	pop	r3
    796a:	2f 90       	pop	r2
    796c:	08 95       	ret
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	}

	if(currentSelector == 10) {	// force a little bit the upwards direction in vertical motion
		if(desL!=0 && desR!=0) {
    796e:	2b 81       	ldd	r18, Y+3	; 0x03
    7970:	3c 81       	ldd	r19, Y+4	; 0x04
    7972:	21 15       	cp	r18, r1
    7974:	31 05       	cpc	r19, r1
    7976:	f1 f0       	breq	.+60     	; 0x79b4 <obstacleAvoidance+0x36a>
    7978:	2d 81       	ldd	r18, Y+5	; 0x05
    797a:	3e 81       	ldd	r19, Y+6	; 0x06
    797c:	21 15       	cp	r18, r1
    797e:	31 05       	cpc	r19, r1
    7980:	c9 f0       	breq	.+50     	; 0x79b4 <obstacleAvoidance+0x36a>
			if(currentAngle<270 && currentAngle>90) {
    7982:	80 91 4e 04 	lds	r24, 0x044E
    7986:	90 91 4f 04 	lds	r25, 0x044F
    798a:	8b 55       	subi	r24, 0x5B	; 91
    798c:	90 40       	sbci	r25, 0x00	; 0
    798e:	83 3b       	cpi	r24, 0xB3	; 179
    7990:	91 05       	cpc	r25, r1
    7992:	08 f0       	brcs	.+2      	; 0x7996 <obstacleAvoidance+0x34c>
    7994:	5f c0       	rjmp	.+190    	; 0x7a54 <obstacleAvoidance+0x40a>
				*pwmLeft += 10;
    7996:	f3 01       	movw	r30, r6
    7998:	80 81       	ld	r24, Z
    799a:	91 81       	ldd	r25, Z+1	; 0x01
    799c:	0a 96       	adiw	r24, 0x0a	; 10
    799e:	91 83       	std	Z+1, r25	; 0x01
    79a0:	80 83       	st	Z, r24
				*pwmRight -= 10;
    79a2:	e9 81       	ldd	r30, Y+1	; 0x01
    79a4:	fa 81       	ldd	r31, Y+2	; 0x02
    79a6:	20 81       	ld	r18, Z
    79a8:	31 81       	ldd	r19, Z+1	; 0x01
    79aa:	2a 50       	subi	r18, 0x0A	; 10
    79ac:	30 40       	sbci	r19, 0x00	; 0
    79ae:	31 83       	std	Z+1, r19	; 0x01
    79b0:	20 83       	st	Z, r18
    79b2:	92 cf       	rjmp	.-220    	; 0x78d8 <obstacleAvoidance+0x28e>
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	}

	if(currentSelector == 10) {	// force a little bit the upwards direction in vertical motion
		if(desL!=0 && desR!=0) {
    79b4:	e9 81       	ldd	r30, Y+1	; 0x01
    79b6:	fa 81       	ldd	r31, Y+2	; 0x02
    79b8:	20 81       	ld	r18, Z
    79ba:	31 81       	ldd	r19, Z+1	; 0x01
    79bc:	8d cf       	rjmp	.-230    	; 0x78d8 <obstacleAvoidance+0x28e>
	}
	if(desR >=0) {
		res = (signed long int)desR + (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	} else {
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
    79be:	59 01       	movw	r10, r18
    79c0:	cc 24       	eor	r12, r12
    79c2:	b7 fc       	sbrc	r11, 7
    79c4:	c0 94       	com	r12
    79c6:	dc 2c       	mov	r13, r12
    79c8:	c2 01       	movw	r24, r4
    79ca:	b1 01       	movw	r22, r2
    79cc:	6e 19       	sub	r22, r14
    79ce:	7f 09       	sbc	r23, r15
    79d0:	80 0b       	sbc	r24, r16
    79d2:	91 0b       	sbc	r25, r17
    79d4:	a6 01       	movw	r20, r12
    79d6:	95 01       	movw	r18, r10
    79d8:	0e 94 8b 53 	call	0xa716	; 0xa716 <__mulsi3>
    79dc:	e6 e0       	ldi	r30, 0x06	; 6
    79de:	95 95       	asr	r25
    79e0:	87 95       	ror	r24
    79e2:	77 95       	ror	r23
    79e4:	67 95       	ror	r22
    79e6:	ea 95       	dec	r30
    79e8:	d1 f7       	brne	.-12     	; 0x79de <obstacleAvoidance+0x394>
    79ea:	26 1b       	sub	r18, r22
    79ec:	37 0b       	sbc	r19, r23
    79ee:	48 0b       	sbc	r20, r24
    79f0:	59 0b       	sbc	r21, r25
    79f2:	da 01       	movw	r26, r20
    79f4:	c9 01       	movw	r24, r18
		*pwmRight = (signed int)res;
    79f6:	e9 81       	ldd	r30, Y+1	; 0x01
    79f8:	fa 81       	ldd	r31, Y+2	; 0x02
    79fa:	91 83       	std	Z+1, r25	; 0x01
    79fc:	80 83       	st	Z, r24
    79fe:	67 cf       	rjmp	.-306    	; 0x78ce <obstacleAvoidance+0x284>
	// modify the velocity components based on sensor values
	if(desL >= 0) {
		res = (signed long int)desL + (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmLeft = (signed int)res;
	} else {
		res = (signed long int)desL - (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
    7a00:	5a 01       	movw	r10, r20
    7a02:	cc 24       	eor	r12, r12
    7a04:	b7 fc       	sbrc	r11, 7
    7a06:	c0 94       	com	r12
    7a08:	dc 2c       	mov	r13, r12
    7a0a:	8f 81       	ldd	r24, Y+7	; 0x07
    7a0c:	98 85       	ldd	r25, Y+8	; 0x08
    7a0e:	1c 01       	movw	r2, r24
    7a10:	44 24       	eor	r4, r4
    7a12:	37 fc       	sbrc	r3, 7
    7a14:	40 94       	com	r4
    7a16:	54 2c       	mov	r5, r4
    7a18:	79 01       	movw	r14, r18
    7a1a:	00 27       	eor	r16, r16
    7a1c:	f7 fc       	sbrc	r15, 7
    7a1e:	00 95       	com	r16
    7a20:	10 2f       	mov	r17, r16
    7a22:	c8 01       	movw	r24, r16
    7a24:	b7 01       	movw	r22, r14
    7a26:	62 0d       	add	r22, r2
    7a28:	73 1d       	adc	r23, r3
    7a2a:	84 1d       	adc	r24, r4
    7a2c:	95 1d       	adc	r25, r5
    7a2e:	a6 01       	movw	r20, r12
    7a30:	95 01       	movw	r18, r10
    7a32:	0e 94 8b 53 	call	0xa716	; 0xa716 <__mulsi3>
    7a36:	a6 e0       	ldi	r26, 0x06	; 6
    7a38:	95 95       	asr	r25
    7a3a:	87 95       	ror	r24
    7a3c:	77 95       	ror	r23
    7a3e:	67 95       	ror	r22
    7a40:	aa 95       	dec	r26
    7a42:	d1 f7       	brne	.-12     	; 0x7a38 <obstacleAvoidance+0x3ee>
    7a44:	26 1b       	sub	r18, r22
    7a46:	37 0b       	sbc	r19, r23
    7a48:	48 0b       	sbc	r20, r24
    7a4a:	59 0b       	sbc	r21, r25
		*pwmLeft = (signed int)res;
    7a4c:	f3 01       	movw	r30, r6
    7a4e:	31 83       	std	Z+1, r19	; 0x01
    7a50:	20 83       	st	Z, r18
    7a52:	1a cf       	rjmp	.-460    	; 0x7888 <obstacleAvoidance+0x23e>
		if(desL!=0 && desR!=0) {
			if(currentAngle<270 && currentAngle>90) {
				*pwmLeft += 10;
				*pwmRight -= 10;
			} else {
				*pwmLeft -= 10;
    7a54:	f3 01       	movw	r30, r6
    7a56:	80 81       	ld	r24, Z
    7a58:	91 81       	ldd	r25, Z+1	; 0x01
    7a5a:	0a 97       	sbiw	r24, 0x0a	; 10
    7a5c:	91 83       	std	Z+1, r25	; 0x01
    7a5e:	80 83       	st	Z, r24
				*pwmRight += 10;
    7a60:	e9 81       	ldd	r30, Y+1	; 0x01
    7a62:	fa 81       	ldd	r31, Y+2	; 0x02
    7a64:	20 81       	ld	r18, Z
    7a66:	31 81       	ldd	r19, Z+1	; 0x01
    7a68:	26 5f       	subi	r18, 0xF6	; 246
    7a6a:	3f 4f       	sbci	r19, 0xFF	; 255
    7a6c:	31 83       	std	Z+1, r19	; 0x01
    7a6e:	20 83       	st	Z, r18
    7a70:	33 cf       	rjmp	.-410    	; 0x78d8 <obstacleAvoidance+0x28e>

00007a72 <cliffDetected>:


char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    7a72:	80 91 79 02 	lds	r24, 0x0279
    7a76:	90 91 7a 02 	lds	r25, 0x027A
    7a7a:	21 e0       	ldi	r18, 0x01	; 1
    7a7c:	84 3a       	cpi	r24, 0xA4	; 164
    7a7e:	92 07       	cpc	r25, r18
    7a80:	d4 f0       	brlt	.+52     	; 0x7ab6 <cliffDetected+0x44>
    7a82:	80 91 7b 02 	lds	r24, 0x027B
    7a86:	90 91 7c 02 	lds	r25, 0x027C
    7a8a:	21 e0       	ldi	r18, 0x01	; 1
    7a8c:	84 3a       	cpi	r24, 0xA4	; 164
    7a8e:	92 07       	cpc	r25, r18
    7a90:	94 f0       	brlt	.+36     	; 0x7ab6 <cliffDetected+0x44>
    7a92:	80 91 7d 02 	lds	r24, 0x027D
    7a96:	90 91 7e 02 	lds	r25, 0x027E
    7a9a:	21 e0       	ldi	r18, 0x01	; 1
    7a9c:	84 3a       	cpi	r24, 0xA4	; 164
    7a9e:	92 07       	cpc	r25, r18
    7aa0:	74 f0       	brlt	.+28     	; 0x7abe <cliffDetected+0x4c>
	//if(proximityResult[8]<(proximityOffset[8]>>1) || proximityResult[9]<(proximityOffset[9]>>1) || proximityResult[10]<(proximityOffset[10]>>1) || proximityResult[11]<(proximityOffset[11]>>1)) {
		return 1;
    7aa2:	81 e0       	ldi	r24, 0x01	; 1
    7aa4:	20 91 7f 02 	lds	r18, 0x027F
    7aa8:	30 91 80 02 	lds	r19, 0x0280
    7aac:	91 e0       	ldi	r25, 0x01	; 1
    7aae:	24 3a       	cpi	r18, 0xA4	; 164
    7ab0:	39 07       	cpc	r19, r25
    7ab2:	1c f4       	brge	.+6      	; 0x7aba <cliffDetected+0x48>
	} else {
		return 0;
	}


}
    7ab4:	08 95       	ret
char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
	//if(proximityResult[8]<(proximityOffset[8]>>1) || proximityResult[9]<(proximityOffset[9]>>1) || proximityResult[10]<(proximityOffset[10]>>1) || proximityResult[11]<(proximityOffset[11]>>1)) {
		return 1;
    7ab6:	81 e0       	ldi	r24, 0x01	; 1
    7ab8:	08 95       	ret
    7aba:	80 e0       	ldi	r24, 0x00	; 0
    7abc:	08 95       	ret
    7abe:	81 e0       	ldi	r24, 0x01	; 1
	} else {
		return 0;
	}


}
    7ac0:	08 95       	ret

00007ac2 <enableObstacleAvoidance>:

void enableObstacleAvoidance() {
	obstacleAvoidanceEnabled=1;
    7ac2:	81 e0       	ldi	r24, 0x01	; 1
    7ac4:	80 93 7c 04 	sts	0x047C, r24
}
    7ac8:	08 95       	ret

00007aca <disableObstacleAvoidance>:

void disableObstacleAvoidance() {
	obstacleAvoidanceEnabled=0;
    7aca:	10 92 7c 04 	sts	0x047C, r1
}
    7ace:	08 95       	ret

00007ad0 <enableCliffAvoidance>:

void enableCliffAvoidance() {
	cliffAvoidanceEnabled=1;
    7ad0:	81 e0       	ldi	r24, 0x01	; 1
    7ad2:	80 93 7d 04 	sts	0x047D, r24
}
    7ad6:	08 95       	ret

00007ad8 <disableCliffAvoidance>:

void disableCliffAvoidance() {
	cliffAvoidanceEnabled=0;
    7ad8:	10 92 7d 04 	sts	0x047D, r1
}
    7adc:	08 95       	ret

00007ade <initRGBleds>:
	// Period freq = Fosc/TOP (max timer value) => TOP = Fosc/period freq
	// We need a frequency of about 30 KHz => 8000000/30000 = 266
	// The waveform generation mode let us chose the TOP value to be 256
	// thus we get period freq = 8000000/256 = 31250 Hz

	TCCR1A = 0;
    7ade:	a0 e8       	ldi	r26, 0x80	; 128
    7ae0:	b0 e0       	ldi	r27, 0x00	; 0
    7ae2:	1c 92       	st	X, r1
	TCCR1B = 0;
    7ae4:	e1 e8       	ldi	r30, 0x81	; 129
    7ae6:	f0 e0       	ldi	r31, 0x00	; 0
    7ae8:	10 82       	st	Z, r1

	// enable OCA, OCB, OCC; clear on match, set at bottom
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << COM1C1) | (1 << WGM10); 	
    7aea:	8c 91       	ld	r24, X
    7aec:	89 6a       	ori	r24, 0xA9	; 169
    7aee:	8c 93       	st	X, r24
	// mode 5 => fast-pwm 8 bit; no prescaler
	TCCR1B |= (1 << WGM12) | (1 << CS10);										
    7af0:	80 81       	ld	r24, Z
    7af2:	89 60       	ori	r24, 0x09	; 9
    7af4:	80 83       	st	Z, r24
	// the values for the leds pwm goes from 0 (max power on) to 255 (off)
	OCR1A = pwm_red;
    7af6:	80 91 0c 02 	lds	r24, 0x020C
    7afa:	90 e0       	ldi	r25, 0x00	; 0
    7afc:	90 93 89 00 	sts	0x0089, r25
    7b00:	80 93 88 00 	sts	0x0088, r24
	OCR1B = pwm_green;
    7b04:	80 91 0d 02 	lds	r24, 0x020D
    7b08:	90 e0       	ldi	r25, 0x00	; 0
    7b0a:	90 93 8b 00 	sts	0x008B, r25
    7b0e:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = pwm_blue;
    7b12:	80 91 0e 02 	lds	r24, 0x020E
    7b16:	90 e0       	ldi	r25, 0x00	; 0
    7b18:	90 93 8d 00 	sts	0x008D, r25
    7b1c:	80 93 8c 00 	sts	0x008C, r24

}
    7b20:	08 95       	ret

00007b22 <toggleBlueLed>:

void toggleBlueLed() {

	blinkState = 1 - blinkState;
    7b22:	81 e0       	ldi	r24, 0x01	; 1
    7b24:	90 91 2b 03 	lds	r25, 0x032B
    7b28:	89 1b       	sub	r24, r25
    7b2a:	80 93 2b 03 	sts	0x032B, r24

	if(blinkState) {
    7b2e:	88 23       	and	r24, r24
    7b30:	39 f4       	brne	.+14     	; 0x7b40 <toggleBlueLed+0x1e>
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
		OCR1C = 255;
	} else {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC to get the maximum output power; this is due to the fact 
    7b32:	80 91 80 00 	lds	r24, 0x0080
    7b36:	87 7f       	andi	r24, 0xF7	; 247
    7b38:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// that the minimum duty cycle when the output compare is enable is 1 
    7b3c:	2f 98       	cbi	0x05, 7	; 5
    7b3e:	08 95       	ret
void toggleBlueLed() {

	blinkState = 1 - blinkState;

	if(blinkState) {
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
    7b40:	80 91 80 00 	lds	r24, 0x0080
    7b44:	88 60       	ori	r24, 0x08	; 8
    7b46:	80 93 80 00 	sts	0x0080, r24
		OCR1C = 255;
    7b4a:	8f ef       	ldi	r24, 0xFF	; 255
    7b4c:	90 e0       	ldi	r25, 0x00	; 0
    7b4e:	90 93 8d 00 	sts	0x008D, r25
    7b52:	80 93 8c 00 	sts	0x008C, r24
    7b56:	08 95       	ret

00007b58 <updateRedLed>:

}

void updateRedLed(unsigned char value) {

	if(value == 0) {
    7b58:	88 23       	and	r24, r24
    7b5a:	59 f0       	breq	.+22     	; 0x7b72 <updateRedLed+0x1a>
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1A1);	// always enable OCA in case it was disabled
    7b5c:	90 91 80 00 	lds	r25, 0x0080
    7b60:	90 68       	ori	r25, 0x80	; 128
    7b62:	90 93 80 00 	sts	0x0080, r25
		OCR1A = value;
    7b66:	90 e0       	ldi	r25, 0x00	; 0
    7b68:	90 93 89 00 	sts	0x0089, r25
    7b6c:	80 93 88 00 	sts	0x0088, r24
    7b70:	08 95       	ret
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
    7b72:	80 91 80 00 	lds	r24, 0x0080
    7b76:	8f 77       	andi	r24, 0x7F	; 127
    7b78:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
    7b7c:	2d 98       	cbi	0x05, 5	; 5
    7b7e:	08 95       	ret

00007b80 <updateGreenLed>:

}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
    7b80:	88 23       	and	r24, r24
    7b82:	59 f0       	breq	.+22     	; 0x7b9a <updateGreenLed+0x1a>
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
	} else {	
		TCCR1A |= (1 << COM1B1);	// always enable OCA in case it was disabled
    7b84:	90 91 80 00 	lds	r25, 0x0080
    7b88:	90 62       	ori	r25, 0x20	; 32
    7b8a:	90 93 80 00 	sts	0x0080, r25
		OCR1B = value;
    7b8e:	90 e0       	ldi	r25, 0x00	; 0
    7b90:	90 93 8b 00 	sts	0x008B, r25
    7b94:	80 93 8a 00 	sts	0x008A, r24
    7b98:	08 95       	ret
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
    7b9a:	80 91 80 00 	lds	r24, 0x0080
    7b9e:	8f 7d       	andi	r24, 0xDF	; 223
    7ba0:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
    7ba4:	2e 98       	cbi	0x05, 6	; 5
    7ba6:	08 95       	ret

00007ba8 <updateBlueLed>:

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
    7ba8:	88 23       	and	r24, r24
    7baa:	59 f0       	breq	.+22     	; 0x7bc2 <updateBlueLed+0x1a>
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1C1);	// always enable OCA in case it was disabled
    7bac:	90 91 80 00 	lds	r25, 0x0080
    7bb0:	98 60       	ori	r25, 0x08	; 8
    7bb2:	90 93 80 00 	sts	0x0080, r25
		OCR1C = value;
    7bb6:	90 e0       	ldi	r25, 0x00	; 0
    7bb8:	90 93 8d 00 	sts	0x008D, r25
    7bbc:	80 93 8c 00 	sts	0x008C, r24
    7bc0:	08 95       	ret
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
    7bc2:	80 91 80 00 	lds	r24, 0x0080
    7bc6:	87 7f       	andi	r24, 0xF7	; 247
    7bc8:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
    7bcc:	2f 98       	cbi	0x05, 7	; 5
    7bce:	08 95       	ret

00007bd0 <setGreenLed>:

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    7bd0:	83 30       	cpi	r24, 0x03	; 3
    7bd2:	09 f4       	brne	.+2      	; 0x7bd6 <setGreenLed+0x6>
    7bd4:	5a c0       	rjmp	.+180    	; 0x7c8a <setGreenLed+0xba>
    7bd6:	84 30       	cpi	r24, 0x04	; 4
    7bd8:	80 f0       	brcs	.+32     	; 0x7bfa <setGreenLed+0x2a>
    7bda:	85 30       	cpi	r24, 0x05	; 5
    7bdc:	09 f4       	brne	.+2      	; 0x7be0 <setGreenLed+0x10>
    7bde:	41 c0       	rjmp	.+130    	; 0x7c62 <setGreenLed+0x92>
    7be0:	85 30       	cpi	r24, 0x05	; 5
    7be2:	d0 f4       	brcc	.+52     	; 0x7c18 <setGreenLed+0x48>
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
    7be4:	66 23       	and	r22, r22
    7be6:	09 f4       	brne	.+2      	; 0x7bea <setGreenLed+0x1a>
    7be8:	68 c0       	rjmp	.+208    	; 0x7cba <setGreenLed+0xea>
    7bea:	80 91 0b 01 	lds	r24, 0x010B
    7bee:	8f 7e       	andi	r24, 0xEF	; 239
    7bf0:	80 93 0b 01 	sts	0x010B, r24
    7bf4:	80 91 0b 01 	lds	r24, 0x010B
    7bf8:	08 95       	ret

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    7bfa:	81 30       	cpi	r24, 0x01	; 1
    7bfc:	e1 f1       	breq	.+120    	; 0x7c76 <setGreenLed+0xa6>
    7bfe:	82 30       	cpi	r24, 0x02	; 2
    7c00:	80 f0       	brcs	.+32     	; 0x7c22 <setGreenLed+0x52>
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
    7c02:	66 23       	and	r22, r22
    7c04:	09 f4       	brne	.+2      	; 0x7c08 <setGreenLed+0x38>
    7c06:	46 c0       	rjmp	.+140    	; 0x7c94 <setGreenLed+0xc4>
    7c08:	80 91 0b 01 	lds	r24, 0x010B
    7c0c:	8b 7f       	andi	r24, 0xFB	; 251
    7c0e:	80 93 0b 01 	sts	0x010B, r24
    7c12:	80 91 0b 01 	lds	r24, 0x010B
    7c16:	08 95       	ret

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    7c18:	86 30       	cpi	r24, 0x06	; 6
    7c1a:	c9 f0       	breq	.+50     	; 0x7c4e <setGreenLed+0x7e>
    7c1c:	87 30       	cpi	r24, 0x07	; 7
    7c1e:	61 f0       	breq	.+24     	; 0x7c38 <setGreenLed+0x68>
    7c20:	08 95       	ret

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
    7c22:	66 23       	and	r22, r22
    7c24:	09 f4       	brne	.+2      	; 0x7c28 <setGreenLed+0x58>
    7c26:	51 c0       	rjmp	.+162    	; 0x7cca <setGreenLed+0xfa>
    7c28:	80 91 0b 01 	lds	r24, 0x010B
    7c2c:	8e 7f       	andi	r24, 0xFE	; 254
    7c2e:	80 93 0b 01 	sts	0x010B, r24
    7c32:	80 91 0b 01 	lds	r24, 0x010B
    7c36:	08 95       	ret
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
				break;

		case 7:	isOn?GREEN_LED7_ON:GREEN_LED7_OFF;
    7c38:	66 23       	and	r22, r22
    7c3a:	09 f0       	breq	.+2      	; 0x7c3e <setGreenLed+0x6e>
    7c3c:	5e c0       	rjmp	.+188    	; 0x7cfa <setGreenLed+0x12a>
    7c3e:	80 91 0b 01 	lds	r24, 0x010B
    7c42:	80 68       	ori	r24, 0x80	; 128
    7c44:	80 93 0b 01 	sts	0x010B, r24
    7c48:	80 91 0b 01 	lds	r24, 0x010B
    7c4c:	08 95       	ret
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
    7c4e:	66 23       	and	r22, r22
    7c50:	49 f1       	breq	.+82     	; 0x7ca4 <setGreenLed+0xd4>
    7c52:	80 91 0b 01 	lds	r24, 0x010B
    7c56:	8f 7b       	andi	r24, 0xBF	; 191
    7c58:	80 93 0b 01 	sts	0x010B, r24
    7c5c:	80 91 0b 01 	lds	r24, 0x010B
    7c60:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
    7c62:	66 23       	and	r22, r22
    7c64:	d1 f1       	breq	.+116    	; 0x7cda <setGreenLed+0x10a>
    7c66:	80 91 0b 01 	lds	r24, 0x010B
    7c6a:	8f 7d       	andi	r24, 0xDF	; 223
    7c6c:	80 93 0b 01 	sts	0x010B, r24
    7c70:	80 91 0b 01 	lds	r24, 0x010B
    7c74:	08 95       	ret
	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
    7c76:	66 23       	and	r22, r22
    7c78:	c1 f1       	breq	.+112    	; 0x7cea <setGreenLed+0x11a>
    7c7a:	80 91 0b 01 	lds	r24, 0x010B
    7c7e:	8d 7f       	andi	r24, 0xFD	; 253
    7c80:	80 93 0b 01 	sts	0x010B, r24
    7c84:	80 91 0b 01 	lds	r24, 0x010B
    7c88:	08 95       	ret
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
    7c8a:	66 23       	and	r22, r22
    7c8c:	99 f0       	breq	.+38     	; 0x7cb4 <setGreenLed+0xe4>
    7c8e:	a3 98       	cbi	0x14, 3	; 20
    7c90:	84 b3       	in	r24, 0x14	; 20
    7c92:	08 95       	ret
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
    7c94:	80 91 0b 01 	lds	r24, 0x010B
    7c98:	84 60       	ori	r24, 0x04	; 4
    7c9a:	80 93 0b 01 	sts	0x010B, r24
    7c9e:	80 91 0b 01 	lds	r24, 0x010B
    7ca2:	08 95       	ret
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
    7ca4:	80 91 0b 01 	lds	r24, 0x010B
    7ca8:	80 64       	ori	r24, 0x40	; 64
    7caa:	80 93 0b 01 	sts	0x010B, r24
    7cae:	80 91 0b 01 	lds	r24, 0x010B
    7cb2:	08 95       	ret
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
    7cb4:	a3 9a       	sbi	0x14, 3	; 20
    7cb6:	84 b3       	in	r24, 0x14	; 20
    7cb8:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
    7cba:	80 91 0b 01 	lds	r24, 0x010B
    7cbe:	80 61       	ori	r24, 0x10	; 16
    7cc0:	80 93 0b 01 	sts	0x010B, r24
    7cc4:	80 91 0b 01 	lds	r24, 0x010B
    7cc8:	08 95       	ret

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
    7cca:	80 91 0b 01 	lds	r24, 0x010B
    7cce:	81 60       	ori	r24, 0x01	; 1
    7cd0:	80 93 0b 01 	sts	0x010B, r24
    7cd4:	80 91 0b 01 	lds	r24, 0x010B
    7cd8:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
    7cda:	80 91 0b 01 	lds	r24, 0x010B
    7cde:	80 62       	ori	r24, 0x20	; 32
    7ce0:	80 93 0b 01 	sts	0x010B, r24
    7ce4:	80 91 0b 01 	lds	r24, 0x010B
    7ce8:	08 95       	ret
	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
    7cea:	80 91 0b 01 	lds	r24, 0x010B
    7cee:	82 60       	ori	r24, 0x02	; 2
    7cf0:	80 93 0b 01 	sts	0x010B, r24
    7cf4:	80 91 0b 01 	lds	r24, 0x010B
    7cf8:	08 95       	ret
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
				break;

		case 7:	isOn?GREEN_LED7_ON:GREEN_LED7_OFF;
    7cfa:	80 91 0b 01 	lds	r24, 0x010B
    7cfe:	8f 77       	andi	r24, 0x7F	; 127
    7d00:	80 93 0b 01 	sts	0x010B, r24
    7d04:	80 91 0b 01 	lds	r24, 0x010B
    7d08:	08 95       	ret

00007d0a <turnOffGreenLeds>:

}

void turnOffGreenLeds() {

	GREEN_LED0_OFF;
    7d0a:	eb e0       	ldi	r30, 0x0B	; 11
    7d0c:	f1 e0       	ldi	r31, 0x01	; 1
    7d0e:	80 81       	ld	r24, Z
    7d10:	81 60       	ori	r24, 0x01	; 1
    7d12:	80 83       	st	Z, r24
	GREEN_LED1_OFF;
    7d14:	80 81       	ld	r24, Z
    7d16:	82 60       	ori	r24, 0x02	; 2
    7d18:	80 83       	st	Z, r24
	GREEN_LED2_OFF;
    7d1a:	80 81       	ld	r24, Z
    7d1c:	84 60       	ori	r24, 0x04	; 4
    7d1e:	80 83       	st	Z, r24
	GREEN_LED3_OFF;
    7d20:	a3 9a       	sbi	0x14, 3	; 20
	GREEN_LED4_OFF;
    7d22:	80 81       	ld	r24, Z
    7d24:	80 61       	ori	r24, 0x10	; 16
    7d26:	80 83       	st	Z, r24
	GREEN_LED5_OFF;
    7d28:	80 81       	ld	r24, Z
    7d2a:	80 62       	ori	r24, 0x20	; 32
    7d2c:	80 83       	st	Z, r24
	GREEN_LED6_OFF;
    7d2e:	80 81       	ld	r24, Z
    7d30:	80 64       	ori	r24, 0x40	; 64
    7d32:	80 83       	st	Z, r24
	GREEN_LED7_OFF;
    7d34:	80 81       	ld	r24, Z
    7d36:	80 68       	ori	r24, 0x80	; 128
    7d38:	80 83       	st	Z, r24

}
    7d3a:	08 95       	ret

00007d3c <turnOnGreenLeds>:


void turnOnGreenLeds() {

	GREEN_LED0_ON;
    7d3c:	eb e0       	ldi	r30, 0x0B	; 11
    7d3e:	f1 e0       	ldi	r31, 0x01	; 1
    7d40:	80 81       	ld	r24, Z
    7d42:	8e 7f       	andi	r24, 0xFE	; 254
    7d44:	80 83       	st	Z, r24
	GREEN_LED1_ON;
    7d46:	80 81       	ld	r24, Z
    7d48:	8d 7f       	andi	r24, 0xFD	; 253
    7d4a:	80 83       	st	Z, r24
	GREEN_LED2_ON;
    7d4c:	80 81       	ld	r24, Z
    7d4e:	8b 7f       	andi	r24, 0xFB	; 251
    7d50:	80 83       	st	Z, r24
	GREEN_LED3_ON;
    7d52:	a3 98       	cbi	0x14, 3	; 20
	GREEN_LED4_ON;
    7d54:	80 81       	ld	r24, Z
    7d56:	8f 7e       	andi	r24, 0xEF	; 239
    7d58:	80 83       	st	Z, r24
	GREEN_LED5_ON;
    7d5a:	80 81       	ld	r24, Z
    7d5c:	8f 7d       	andi	r24, 0xDF	; 223
    7d5e:	80 83       	st	Z, r24
	GREEN_LED6_ON;
    7d60:	80 81       	ld	r24, Z
    7d62:	8f 7b       	andi	r24, 0xBF	; 191
    7d64:	80 83       	st	Z, r24
	GREEN_LED7_ON;
    7d66:	80 81       	ld	r24, Z
    7d68:	8f 77       	andi	r24, 0x7F	; 127
    7d6a:	80 83       	st	Z, r24

}
    7d6c:	08 95       	ret

00007d6e <initAccelerometer>:

void initAccelerometer() {

	unsigned char ret;

	i2c_init();		// init I2C bus
    7d6e:	0e 94 82 1e 	call	0x3d04	; 0x3d04 <i2c_init>
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7d72:	80 91 14 02 	lds	r24, 0x0214
    7d76:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    7d7a:	88 23       	and	r24, r24
    7d7c:	49 f4       	brne	.+18     	; 0x7d90 <initAccelerometer+0x22>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    7d7e:	86 e1       	ldi	r24, 0x16	; 22
    7d80:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    7d84:	85 e4       	ldi	r24, 0x45	; 69
    7d86:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    7d8a:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <i2c_stop>
    7d8e:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    7d90:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <i2c_stop>
	i2c_init();		// init I2C bus

	ret = initMMA7455L();

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
    7d94:	86 ea       	ldi	r24, 0xA6	; 166
    7d96:	90 e0       	ldi	r25, 0x00	; 0
    7d98:	90 93 15 02 	sts	0x0215, r25
    7d9c:	80 93 14 02 	sts	0x0214, r24
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7da0:	86 ea       	ldi	r24, 0xA6	; 166
    7da2:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    7da6:	88 23       	and	r24, r24
    7da8:	41 f5       	brne	.+80     	; 0x7dfa <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    7daa:	8d e2       	ldi	r24, 0x2D	; 45
    7dac:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <i2c_write>
        i2c_write(0x08);	// measurement mode
    7db0:	88 e0       	ldi	r24, 0x08	; 8
    7db2:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    7db6:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7dba:	80 91 14 02 	lds	r24, 0x0214
    7dbe:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    7dc2:	88 23       	and	r24, r24
    7dc4:	d1 f4       	brne	.+52     	; 0x7dfa <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    7dc6:	81 e3       	ldi	r24, 0x31	; 49
    7dc8:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    7dcc:	80 e0       	ldi	r24, 0x00	; 0
    7dce:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    7dd2:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7dd6:	80 91 14 02 	lds	r24, 0x0214
    7dda:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    7dde:	88 23       	and	r24, r24
    7de0:	61 f4       	brne	.+24     	; 0x7dfa <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    7de2:	8c e2       	ldi	r24, 0x2C	; 44
    7de4:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    7de8:	89 e0       	ldi	r24, 0x09	; 9
    7dea:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    7dee:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <i2c_stop>
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
		} else {
			useAccel = USE_ADXL345;
    7df2:	81 e0       	ldi	r24, 0x01	; 1
    7df4:	80 93 3b 04 	sts	0x043B, r24
    7df8:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    7dfa:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <i2c_stop>

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
    7dfe:	82 e0       	ldi	r24, 0x02	; 2
    7e00:	80 93 3b 04 	sts	0x043B, r24
    7e04:	08 95       	ret

00007e06 <initMMA7455L>:
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7e06:	80 91 14 02 	lds	r24, 0x0214
    7e0a:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    7e0e:	88 23       	and	r24, r24
    7e10:	51 f4       	brne	.+20     	; 0x7e26 <initMMA7455L+0x20>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    7e12:	86 e1       	ldi	r24, 0x16	; 22
    7e14:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    7e18:	85 e4       	ldi	r24, 0x45	; 69
    7e1a:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    7e1e:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <i2c_stop>
    }

	return 0;				// configuration ok
    7e22:	80 e0       	ldi	r24, 0x00	; 0

}
    7e24:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    7e26:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <i2c_stop>
		return 1;
    7e2a:	81 e0       	ldi	r24, 0x01	; 1
    7e2c:	08 95       	ret

00007e2e <initADXL345>:
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7e2e:	80 91 14 02 	lds	r24, 0x0214
    7e32:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    7e36:	88 23       	and	r24, r24
    7e38:	31 f5       	brne	.+76     	; 0x7e86 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    7e3a:	8d e2       	ldi	r24, 0x2D	; 45
    7e3c:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <i2c_write>
        i2c_write(0x08);	// measurement mode
    7e40:	88 e0       	ldi	r24, 0x08	; 8
    7e42:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    7e46:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7e4a:	80 91 14 02 	lds	r24, 0x0214
    7e4e:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    7e52:	88 23       	and	r24, r24
    7e54:	c1 f4       	brne	.+48     	; 0x7e86 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    7e56:	81 e3       	ldi	r24, 0x31	; 49
    7e58:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    7e5c:	80 e0       	ldi	r24, 0x00	; 0
    7e5e:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    7e62:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7e66:	80 91 14 02 	lds	r24, 0x0214
    7e6a:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    7e6e:	88 23       	and	r24, r24
    7e70:	51 f4       	brne	.+20     	; 0x7e86 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    7e72:	8c e2       	ldi	r24, 0x2C	; 44
    7e74:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    7e78:	89 e0       	ldi	r24, 0x09	; 9
    7e7a:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    7e7e:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <i2c_stop>
    }

	return 0;
    7e82:	80 e0       	ldi	r24, 0x00	; 0

}
    7e84:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    7e86:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <i2c_stop>
		return 1;
    7e8a:	81 e0       	ldi	r24, 0x01	; 1
    7e8c:	08 95       	ret

00007e8e <readAccelXY>:

	return 0;

}

void readAccelXY() {
    7e8e:	ff 92       	push	r15
    7e90:	0f 93       	push	r16
    7e92:	1f 93       	push	r17
    7e94:	df 93       	push	r29
    7e96:	cf 93       	push	r28
    7e98:	0f 92       	push	r0
    7e9a:	cd b7       	in	r28, 0x3d	; 61
    7e9c:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[4];

	if(useAccel == USE_MMAX7455L) {
    7e9e:	80 91 3b 04 	lds	r24, 0x043B
    7ea2:	88 23       	and	r24, r24
    7ea4:	91 f0       	breq	.+36     	; 0x7eca <readAccelXY+0x3c>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else if(useAccel == USE_ADXL345) {
    7ea6:	81 30       	cpi	r24, 0x01	; 1
    7ea8:	09 f4       	brne	.+2      	; 0x7eac <readAccelXY+0x1e>
    7eaa:	88 c0       	rjmp	.+272    	; 0x7fbc <readAccelXY+0x12e>
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else {

		accX = 0;
    7eac:	10 92 3d 04 	sts	0x043D, r1
    7eb0:	10 92 3c 04 	sts	0x043C, r1
		accY = 0;
    7eb4:	10 92 3f 04 	sts	0x043F, r1
    7eb8:	10 92 3e 04 	sts	0x043E, r1

	}

}
    7ebc:	0f 90       	pop	r0
    7ebe:	cf 91       	pop	r28
    7ec0:	df 91       	pop	r29
    7ec2:	1f 91       	pop	r17
    7ec4:	0f 91       	pop	r16
    7ec6:	ff 90       	pop	r15
    7ec8:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    7eca:	80 91 14 02 	lds	r24, 0x0214
    7ece:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    7ed2:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
		i2c_write(0x32);											// sends address to read from (X LSB)
    7ed4:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    7ed8:	80 91 14 02 	lds	r24, 0x0214
    7edc:	8f 5f       	subi	r24, 0xFF	; 255
    7ede:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <i2c_rep_start>

		for(i=0; i<3; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    7ee2:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <i2c_readAck>
    7ee6:	08 2f       	mov	r16, r24
    7ee8:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <i2c_readAck>
    7eec:	f8 2e       	mov	r15, r24
    7eee:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <i2c_readAck>
    7ef2:	18 2f       	mov	r17, r24
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    7ef4:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <i2c_readNak>
		i2c_stop();													// set stop conditon = release bus
    7ef8:	89 83       	std	Y+1, r24	; 0x01
    7efa:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    7efe:	90 91 77 0b 	lds	r25, 0x0B77
    7f02:	89 81       	ldd	r24, Y+1	; 0x01
    7f04:	99 23       	and	r25, r25
    7f06:	39 f1       	breq	.+78     	; 0x7f56 <readAccelXY+0xc8>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    7f08:	4f 2d       	mov	r20, r15
    7f0a:	55 27       	eor	r21, r21
    7f0c:	47 fd       	sbrc	r20, 7
    7f0e:	50 95       	com	r21
    7f10:	54 2f       	mov	r21, r20
    7f12:	44 27       	eor	r20, r20
    7f14:	60 2f       	mov	r22, r16
    7f16:	77 27       	eor	r23, r23
    7f18:	67 fd       	sbrc	r22, 7
    7f1a:	70 95       	com	r23
    7f1c:	46 2b       	or	r20, r22
    7f1e:	57 2b       	or	r21, r23
    7f20:	50 93 3d 04 	sts	0x043D, r21
    7f24:	40 93 3c 04 	sts	0x043C, r20
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    7f28:	28 2f       	mov	r18, r24
    7f2a:	33 27       	eor	r19, r19
    7f2c:	27 fd       	sbrc	r18, 7
    7f2e:	30 95       	com	r19
    7f30:	32 2f       	mov	r19, r18
    7f32:	22 27       	eor	r18, r18
    7f34:	81 2f       	mov	r24, r17
    7f36:	99 27       	eor	r25, r25
    7f38:	87 fd       	sbrc	r24, 7
    7f3a:	90 95       	com	r25
    7f3c:	28 2b       	or	r18, r24
    7f3e:	39 2b       	or	r19, r25
    7f40:	30 93 3f 04 	sts	0x043F, r19
    7f44:	20 93 3e 04 	sts	0x043E, r18
		accX = 0;
		accY = 0;

	}

}
    7f48:	0f 90       	pop	r0
    7f4a:	cf 91       	pop	r28
    7f4c:	df 91       	pop	r29
    7f4e:	1f 91       	pop	r17
    7f50:	0f 91       	pop	r16
    7f52:	ff 90       	pop	r15
    7f54:	08 95       	ret

		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    7f56:	4f 2d       	mov	r20, r15
    7f58:	55 27       	eor	r21, r21
    7f5a:	47 fd       	sbrc	r20, 7
    7f5c:	50 95       	com	r21
    7f5e:	54 2f       	mov	r21, r20
    7f60:	44 27       	eor	r20, r20
    7f62:	60 2f       	mov	r22, r16
    7f64:	77 27       	eor	r23, r23
    7f66:	67 fd       	sbrc	r22, 7
    7f68:	70 95       	com	r23
    7f6a:	46 2b       	or	r20, r22
    7f6c:	57 2b       	or	r21, r23
    7f6e:	60 91 42 04 	lds	r22, 0x0442
    7f72:	70 91 43 04 	lds	r23, 0x0443
    7f76:	46 1b       	sub	r20, r22
    7f78:	57 0b       	sbc	r21, r23
    7f7a:	50 93 3d 04 	sts	0x043D, r21
    7f7e:	40 93 3c 04 	sts	0x043C, r20
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    7f82:	28 2f       	mov	r18, r24
    7f84:	33 27       	eor	r19, r19
    7f86:	27 fd       	sbrc	r18, 7
    7f88:	30 95       	com	r19
    7f8a:	32 2f       	mov	r19, r18
    7f8c:	22 27       	eor	r18, r18
    7f8e:	81 2f       	mov	r24, r17
    7f90:	99 27       	eor	r25, r25
    7f92:	87 fd       	sbrc	r24, 7
    7f94:	90 95       	com	r25
    7f96:	28 2b       	or	r18, r24
    7f98:	39 2b       	or	r19, r25
    7f9a:	80 91 44 04 	lds	r24, 0x0444
    7f9e:	90 91 45 04 	lds	r25, 0x0445
    7fa2:	28 1b       	sub	r18, r24
    7fa4:	39 0b       	sbc	r19, r25
    7fa6:	30 93 3f 04 	sts	0x043F, r19
    7faa:	20 93 3e 04 	sts	0x043E, r18
		accX = 0;
		accY = 0;

	}

}
    7fae:	0f 90       	pop	r0
    7fb0:	cf 91       	pop	r28
    7fb2:	df 91       	pop	r29
    7fb4:	1f 91       	pop	r17
    7fb6:	0f 91       	pop	r16
    7fb8:	ff 90       	pop	r15
    7fba:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    7fbc:	80 91 14 02 	lds	r24, 0x0214
    7fc0:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    7fc4:	82 e3       	ldi	r24, 0x32	; 50
    7fc6:	86 cf       	rjmp	.-244    	; 0x7ed4 <readAccelXY+0x46>

00007fc8 <readAccelXYZ>:

	}

}

void readAccelXYZ() {
    7fc8:	df 93       	push	r29
    7fca:	cf 93       	push	r28
    7fcc:	00 d0       	rcall	.+0      	; 0x7fce <readAccelXYZ+0x6>
    7fce:	00 d0       	rcall	.+0      	; 0x7fd0 <readAccelXYZ+0x8>
    7fd0:	cd b7       	in	r28, 0x3d	; 61
    7fd2:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[6];

	if(useAccel == USE_MMAX7455L) {
    7fd4:	80 91 3b 04 	lds	r24, 0x043B
    7fd8:	88 23       	and	r24, r24
    7fda:	c1 f0       	breq	.+48     	; 0x800c <readAccelXYZ+0x44>
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    7fdc:	81 30       	cpi	r24, 0x01	; 1
    7fde:	09 f4       	brne	.+2      	; 0x7fe2 <readAccelXYZ+0x1a>
    7fe0:	ad c0       	rjmp	.+346    	; 0x813c <readAccelXYZ+0x174>
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else {

		accX = 0;
    7fe2:	10 92 3d 04 	sts	0x043D, r1
    7fe6:	10 92 3c 04 	sts	0x043C, r1
		accY = 0;
    7fea:	10 92 3f 04 	sts	0x043F, r1
    7fee:	10 92 3e 04 	sts	0x043E, r1
		accZ = 0;
    7ff2:	10 92 41 04 	sts	0x0441, r1
    7ff6:	10 92 40 04 	sts	0x0440, r1

	}

}
    7ffa:	26 96       	adiw	r28, 0x06	; 6
    7ffc:	0f b6       	in	r0, 0x3f	; 63
    7ffe:	f8 94       	cli
    8000:	de bf       	out	0x3e, r29	; 62
    8002:	0f be       	out	0x3f, r0	; 63
    8004:	cd bf       	out	0x3d, r28	; 61
    8006:	cf 91       	pop	r28
    8008:	df 91       	pop	r29
    800a:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    800c:	80 91 14 02 	lds	r24, 0x0214
    8010:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    8014:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
		i2c_write(0x32);											// sends address to read from (X LSB)
    8016:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    801a:	80 91 14 02 	lds	r24, 0x0214
    801e:	8f 5f       	subi	r24, 0xFF	; 255
    8020:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <i2c_rep_start>

		for(i=0; i<5; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    8024:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <i2c_readAck>
    8028:	89 83       	std	Y+1, r24	; 0x01
    802a:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <i2c_readAck>
    802e:	8a 83       	std	Y+2, r24	; 0x02
    8030:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <i2c_readAck>
    8034:	8b 83       	std	Y+3, r24	; 0x03
    8036:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <i2c_readAck>
    803a:	8c 83       	std	Y+4, r24	; 0x04
    803c:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <i2c_readAck>
    8040:	8d 83       	std	Y+5, r24	; 0x05
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    8042:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <i2c_readNak>
    8046:	8e 83       	std	Y+6, r24	; 0x06
		i2c_stop();													// set stop conditon = release bus
    8048:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    804c:	80 91 77 0b 	lds	r24, 0x0B77
    8050:	88 23       	and	r24, r24
    8052:	89 f1       	breq	.+98     	; 0x80b6 <readAccelXYZ+0xee>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    8054:	8a 81       	ldd	r24, Y+2	; 0x02
    8056:	99 27       	eor	r25, r25
    8058:	87 fd       	sbrc	r24, 7
    805a:	90 95       	com	r25
    805c:	98 2f       	mov	r25, r24
    805e:	88 27       	eor	r24, r24
    8060:	29 81       	ldd	r18, Y+1	; 0x01
    8062:	33 27       	eor	r19, r19
    8064:	27 fd       	sbrc	r18, 7
    8066:	30 95       	com	r19
    8068:	82 2b       	or	r24, r18
    806a:	93 2b       	or	r25, r19
    806c:	90 93 3d 04 	sts	0x043D, r25
    8070:	80 93 3c 04 	sts	0x043C, r24
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    8074:	8c 81       	ldd	r24, Y+4	; 0x04
    8076:	99 27       	eor	r25, r25
    8078:	87 fd       	sbrc	r24, 7
    807a:	90 95       	com	r25
    807c:	98 2f       	mov	r25, r24
    807e:	88 27       	eor	r24, r24
    8080:	2b 81       	ldd	r18, Y+3	; 0x03
    8082:	33 27       	eor	r19, r19
    8084:	27 fd       	sbrc	r18, 7
    8086:	30 95       	com	r19
    8088:	82 2b       	or	r24, r18
    808a:	93 2b       	or	r25, r19
    808c:	90 93 3f 04 	sts	0x043F, r25
    8090:	80 93 3e 04 	sts	0x043E, r24
			accZ = ((signed int)buff[5]<<8)|buff[4];    			// Z axis
    8094:	8e 81       	ldd	r24, Y+6	; 0x06
    8096:	99 27       	eor	r25, r25
    8098:	87 fd       	sbrc	r24, 7
    809a:	90 95       	com	r25
    809c:	98 2f       	mov	r25, r24
    809e:	88 27       	eor	r24, r24
    80a0:	2d 81       	ldd	r18, Y+5	; 0x05
    80a2:	33 27       	eor	r19, r19
    80a4:	27 fd       	sbrc	r18, 7
    80a6:	30 95       	com	r19
    80a8:	82 2b       	or	r24, r18
    80aa:	93 2b       	or	r25, r19
    80ac:	90 93 41 04 	sts	0x0441, r25
    80b0:	80 93 40 04 	sts	0x0440, r24
    80b4:	a2 cf       	rjmp	.-188    	; 0x7ffa <readAccelXYZ+0x32>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    80b6:	8a 81       	ldd	r24, Y+2	; 0x02
    80b8:	99 27       	eor	r25, r25
    80ba:	87 fd       	sbrc	r24, 7
    80bc:	90 95       	com	r25
    80be:	98 2f       	mov	r25, r24
    80c0:	88 27       	eor	r24, r24
    80c2:	29 81       	ldd	r18, Y+1	; 0x01
    80c4:	33 27       	eor	r19, r19
    80c6:	27 fd       	sbrc	r18, 7
    80c8:	30 95       	com	r19
    80ca:	82 2b       	or	r24, r18
    80cc:	93 2b       	or	r25, r19
    80ce:	20 91 42 04 	lds	r18, 0x0442
    80d2:	30 91 43 04 	lds	r19, 0x0443
    80d6:	82 1b       	sub	r24, r18
    80d8:	93 0b       	sbc	r25, r19
    80da:	90 93 3d 04 	sts	0x043D, r25
    80de:	80 93 3c 04 	sts	0x043C, r24
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    80e2:	8c 81       	ldd	r24, Y+4	; 0x04
    80e4:	99 27       	eor	r25, r25
    80e6:	87 fd       	sbrc	r24, 7
    80e8:	90 95       	com	r25
    80ea:	98 2f       	mov	r25, r24
    80ec:	88 27       	eor	r24, r24
    80ee:	2b 81       	ldd	r18, Y+3	; 0x03
    80f0:	33 27       	eor	r19, r19
    80f2:	27 fd       	sbrc	r18, 7
    80f4:	30 95       	com	r19
    80f6:	82 2b       	or	r24, r18
    80f8:	93 2b       	or	r25, r19
    80fa:	20 91 44 04 	lds	r18, 0x0444
    80fe:	30 91 45 04 	lds	r19, 0x0445
    8102:	82 1b       	sub	r24, r18
    8104:	93 0b       	sbc	r25, r19
    8106:	90 93 3f 04 	sts	0x043F, r25
    810a:	80 93 3e 04 	sts	0x043E, r24
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
    810e:	8e 81       	ldd	r24, Y+6	; 0x06
    8110:	99 27       	eor	r25, r25
    8112:	87 fd       	sbrc	r24, 7
    8114:	90 95       	com	r25
    8116:	98 2f       	mov	r25, r24
    8118:	88 27       	eor	r24, r24
    811a:	2d 81       	ldd	r18, Y+5	; 0x05
    811c:	33 27       	eor	r19, r19
    811e:	27 fd       	sbrc	r18, 7
    8120:	30 95       	com	r19
    8122:	82 2b       	or	r24, r18
    8124:	93 2b       	or	r25, r19
    8126:	20 91 46 04 	lds	r18, 0x0446
    812a:	30 91 47 04 	lds	r19, 0x0447
    812e:	82 1b       	sub	r24, r18
    8130:	93 0b       	sbc	r25, r19
    8132:	90 93 41 04 	sts	0x0441, r25
    8136:	80 93 40 04 	sts	0x0440, r24
    813a:	5f cf       	rjmp	.-322    	; 0x7ffa <readAccelXYZ+0x32>
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    813c:	80 91 14 02 	lds	r24, 0x0214
    8140:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    8144:	82 e3       	ldi	r24, 0x32	; 50
    8146:	67 cf       	rjmp	.-306    	; 0x8016 <readAccelXYZ+0x4e>

00008148 <calibrateSensors>:

#include "sensors.h"


void calibrateSensors() {
    8148:	cf 93       	push	r28
    814a:	df 93       	push	r29

	unsigned int i=0;

	pwm_red = 0;
    814c:	10 92 0c 02 	sts	0x020C, r1
	pwm_green = 0;
    8150:	10 92 0d 02 	sts	0x020D, r1
	pwm_blue = 0;
    8154:	10 92 0e 02 	sts	0x020E, r1
	updateRedLed(pwm_red);
    8158:	80 e0       	ldi	r24, 0x00	; 0
    815a:	0e 94 ac 3d 	call	0x7b58	; 0x7b58 <updateRedLed>
	updateGreenLed(pwm_green);
    815e:	80 91 0d 02 	lds	r24, 0x020D
    8162:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <updateGreenLed>
	updateBlueLed(pwm_blue);
    8166:	80 91 0e 02 	lds	r24, 0x020E
    816a:	0e 94 d4 3d 	call	0x7ba8	; 0x7ba8 <updateBlueLed>

	calibrationCycle = 0;
    816e:	10 92 5e 04 	sts	0x045E, r1
    8172:	10 92 5d 04 	sts	0x045D, r1
	startCalibration = 1;
    8176:	81 e0       	ldi	r24, 0x01	; 1
    8178:	80 93 77 0b 	sts	0x0B77, r24
					}
					accOffsetXSum = 0;
					accOffsetYSum = 0;
					accOffsetZSum = 0;

					calibrationCycle++;
    817c:	c1 e0       	ldi	r28, 0x01	; 1
    817e:	d0 e0       	ldi	r29, 0x00	; 0
	calibrationCycle = 0;
	startCalibration = 1;

	while(startCalibration) {

		readAccelXYZ();
    8180:	0e 94 e4 3f 	call	0x7fc8	; 0x7fc8 <readAccelXYZ>

		if(calibrationCycle<=CALIBRATION_CYCLES) {
    8184:	20 91 5d 04 	lds	r18, 0x045D
    8188:	30 91 5e 04 	lds	r19, 0x045E
    818c:	21 31       	cpi	r18, 0x11	; 17
    818e:	31 05       	cpc	r19, r1
    8190:	0c f4       	brge	.+2      	; 0x8194 <calibrateSensors+0x4c>
    8192:	35 c1       	rjmp	.+618    	; 0x83fe <calibrateSensors+0x2b6>
			continue;

		} else if(calibrationCycle > CALIBRATION_CYCLES) {

			for(i=0;i<12;i++) {
				proximityOffset[i] = proximitySum[i]>>4;
    8194:	80 91 99 02 	lds	r24, 0x0299
    8198:	90 91 9a 02 	lds	r25, 0x029A
    819c:	a0 91 9b 02 	lds	r26, 0x029B
    81a0:	b0 91 9c 02 	lds	r27, 0x029C
    81a4:	54 e0       	ldi	r21, 0x04	; 4
    81a6:	b6 95       	lsr	r27
    81a8:	a7 95       	ror	r26
    81aa:	97 95       	ror	r25
    81ac:	87 95       	ror	r24
    81ae:	5a 95       	dec	r21
    81b0:	d1 f7       	brne	.-12     	; 0x81a6 <calibrateSensors+0x5e>
    81b2:	90 93 82 02 	sts	0x0282, r25
    81b6:	80 93 81 02 	sts	0x0281, r24
    81ba:	80 91 9d 02 	lds	r24, 0x029D
    81be:	90 91 9e 02 	lds	r25, 0x029E
    81c2:	a0 91 9f 02 	lds	r26, 0x029F
    81c6:	b0 91 a0 02 	lds	r27, 0x02A0
    81ca:	44 e0       	ldi	r20, 0x04	; 4
    81cc:	b6 95       	lsr	r27
    81ce:	a7 95       	ror	r26
    81d0:	97 95       	ror	r25
    81d2:	87 95       	ror	r24
    81d4:	4a 95       	dec	r20
    81d6:	d1 f7       	brne	.-12     	; 0x81cc <calibrateSensors+0x84>
    81d8:	90 93 84 02 	sts	0x0284, r25
    81dc:	80 93 83 02 	sts	0x0283, r24
    81e0:	80 91 a1 02 	lds	r24, 0x02A1
    81e4:	90 91 a2 02 	lds	r25, 0x02A2
    81e8:	a0 91 a3 02 	lds	r26, 0x02A3
    81ec:	b0 91 a4 02 	lds	r27, 0x02A4
    81f0:	34 e0       	ldi	r19, 0x04	; 4
    81f2:	b6 95       	lsr	r27
    81f4:	a7 95       	ror	r26
    81f6:	97 95       	ror	r25
    81f8:	87 95       	ror	r24
    81fa:	3a 95       	dec	r19
    81fc:	d1 f7       	brne	.-12     	; 0x81f2 <calibrateSensors+0xaa>
    81fe:	90 93 86 02 	sts	0x0286, r25
    8202:	80 93 85 02 	sts	0x0285, r24
    8206:	80 91 a5 02 	lds	r24, 0x02A5
    820a:	90 91 a6 02 	lds	r25, 0x02A6
    820e:	a0 91 a7 02 	lds	r26, 0x02A7
    8212:	b0 91 a8 02 	lds	r27, 0x02A8
    8216:	24 e0       	ldi	r18, 0x04	; 4
    8218:	b6 95       	lsr	r27
    821a:	a7 95       	ror	r26
    821c:	97 95       	ror	r25
    821e:	87 95       	ror	r24
    8220:	2a 95       	dec	r18
    8222:	d1 f7       	brne	.-12     	; 0x8218 <calibrateSensors+0xd0>
    8224:	90 93 88 02 	sts	0x0288, r25
    8228:	80 93 87 02 	sts	0x0287, r24
    822c:	80 91 a9 02 	lds	r24, 0x02A9
    8230:	90 91 aa 02 	lds	r25, 0x02AA
    8234:	a0 91 ab 02 	lds	r26, 0x02AB
    8238:	b0 91 ac 02 	lds	r27, 0x02AC
    823c:	f4 e0       	ldi	r31, 0x04	; 4
    823e:	b6 95       	lsr	r27
    8240:	a7 95       	ror	r26
    8242:	97 95       	ror	r25
    8244:	87 95       	ror	r24
    8246:	fa 95       	dec	r31
    8248:	d1 f7       	brne	.-12     	; 0x823e <calibrateSensors+0xf6>
    824a:	90 93 8a 02 	sts	0x028A, r25
    824e:	80 93 89 02 	sts	0x0289, r24
    8252:	80 91 ad 02 	lds	r24, 0x02AD
    8256:	90 91 ae 02 	lds	r25, 0x02AE
    825a:	a0 91 af 02 	lds	r26, 0x02AF
    825e:	b0 91 b0 02 	lds	r27, 0x02B0
    8262:	e4 e0       	ldi	r30, 0x04	; 4
    8264:	b6 95       	lsr	r27
    8266:	a7 95       	ror	r26
    8268:	97 95       	ror	r25
    826a:	87 95       	ror	r24
    826c:	ea 95       	dec	r30
    826e:	d1 f7       	brne	.-12     	; 0x8264 <calibrateSensors+0x11c>
    8270:	90 93 8c 02 	sts	0x028C, r25
    8274:	80 93 8b 02 	sts	0x028B, r24
    8278:	80 91 b1 02 	lds	r24, 0x02B1
    827c:	90 91 b2 02 	lds	r25, 0x02B2
    8280:	a0 91 b3 02 	lds	r26, 0x02B3
    8284:	b0 91 b4 02 	lds	r27, 0x02B4
    8288:	74 e0       	ldi	r23, 0x04	; 4
    828a:	b6 95       	lsr	r27
    828c:	a7 95       	ror	r26
    828e:	97 95       	ror	r25
    8290:	87 95       	ror	r24
    8292:	7a 95       	dec	r23
    8294:	d1 f7       	brne	.-12     	; 0x828a <calibrateSensors+0x142>
    8296:	90 93 8e 02 	sts	0x028E, r25
    829a:	80 93 8d 02 	sts	0x028D, r24
    829e:	80 91 b5 02 	lds	r24, 0x02B5
    82a2:	90 91 b6 02 	lds	r25, 0x02B6
    82a6:	a0 91 b7 02 	lds	r26, 0x02B7
    82aa:	b0 91 b8 02 	lds	r27, 0x02B8
    82ae:	64 e0       	ldi	r22, 0x04	; 4
    82b0:	b6 95       	lsr	r27
    82b2:	a7 95       	ror	r26
    82b4:	97 95       	ror	r25
    82b6:	87 95       	ror	r24
    82b8:	6a 95       	dec	r22
    82ba:	d1 f7       	brne	.-12     	; 0x82b0 <calibrateSensors+0x168>
    82bc:	90 93 90 02 	sts	0x0290, r25
    82c0:	80 93 8f 02 	sts	0x028F, r24
    82c4:	80 91 bd 02 	lds	r24, 0x02BD
    82c8:	90 91 be 02 	lds	r25, 0x02BE
    82cc:	a0 91 bf 02 	lds	r26, 0x02BF
    82d0:	b0 91 c0 02 	lds	r27, 0x02C0
    82d4:	54 e0       	ldi	r21, 0x04	; 4
    82d6:	b6 95       	lsr	r27
    82d8:	a7 95       	ror	r26
    82da:	97 95       	ror	r25
    82dc:	87 95       	ror	r24
    82de:	5a 95       	dec	r21
    82e0:	d1 f7       	brne	.-12     	; 0x82d6 <calibrateSensors+0x18e>
    82e2:	9c 01       	movw	r18, r24
    82e4:	80 91 c1 02 	lds	r24, 0x02C1
    82e8:	90 91 c2 02 	lds	r25, 0x02C2
    82ec:	a0 91 c3 02 	lds	r26, 0x02C3
    82f0:	b0 91 c4 02 	lds	r27, 0x02C4
    82f4:	44 e0       	ldi	r20, 0x04	; 4
    82f6:	b6 95       	lsr	r27
    82f8:	a7 95       	ror	r26
    82fa:	97 95       	ror	r25
    82fc:	87 95       	ror	r24
    82fe:	4a 95       	dec	r20
    8300:	d1 f7       	brne	.-12     	; 0x82f6 <calibrateSensors+0x1ae>
    8302:	bc 01       	movw	r22, r24
    8304:	80 91 c5 02 	lds	r24, 0x02C5
    8308:	90 91 c6 02 	lds	r25, 0x02C6
    830c:	a0 91 c7 02 	lds	r26, 0x02C7
    8310:	b0 91 c8 02 	lds	r27, 0x02C8
    8314:	f4 e0       	ldi	r31, 0x04	; 4
    8316:	b6 95       	lsr	r27
    8318:	a7 95       	ror	r26
    831a:	97 95       	ror	r25
    831c:	87 95       	ror	r24
    831e:	fa 95       	dec	r31
    8320:	d1 f7       	brne	.-12     	; 0x8316 <calibrateSensors+0x1ce>
    8322:	ac 01       	movw	r20, r24
    8324:	80 91 b9 02 	lds	r24, 0x02B9
    8328:	90 91 ba 02 	lds	r25, 0x02BA
    832c:	a0 91 bb 02 	lds	r26, 0x02BB
    8330:	b0 91 bc 02 	lds	r27, 0x02BC
    8334:	e4 e0       	ldi	r30, 0x04	; 4
    8336:	b6 95       	lsr	r27
    8338:	a7 95       	ror	r26
    833a:	97 95       	ror	r25
    833c:	87 95       	ror	r24
    833e:	ea 95       	dec	r30
    8340:	d1 f7       	brne	.-12     	; 0x8336 <calibrateSensors+0x1ee>
			}

			for(i=8; i<12; i++) {
				proximityOffset[i] -= 512;	// move the "0" to 512 (values around 512)
    8342:	80 50       	subi	r24, 0x00	; 0
    8344:	92 40       	sbci	r25, 0x02	; 2
    8346:	90 93 92 02 	sts	0x0292, r25
    834a:	80 93 91 02 	sts	0x0291, r24
    834e:	20 50       	subi	r18, 0x00	; 0
    8350:	32 40       	sbci	r19, 0x02	; 2
    8352:	30 93 94 02 	sts	0x0294, r19
    8356:	20 93 93 02 	sts	0x0293, r18
    835a:	60 50       	subi	r22, 0x00	; 0
    835c:	72 40       	sbci	r23, 0x02	; 2
    835e:	70 93 96 02 	sts	0x0296, r23
    8362:	60 93 95 02 	sts	0x0295, r22
    8366:	40 50       	subi	r20, 0x00	; 0
    8368:	52 40       	sbci	r21, 0x02	; 2
    836a:	50 93 98 02 	sts	0x0298, r21
    836e:	40 93 97 02 	sts	0x0297, r20
			}

			accOffsetX = accOffsetXSum>>4;
    8372:	80 91 48 04 	lds	r24, 0x0448
    8376:	90 91 49 04 	lds	r25, 0x0449
    837a:	95 95       	asr	r25
    837c:	87 95       	ror	r24
    837e:	95 95       	asr	r25
    8380:	87 95       	ror	r24
    8382:	95 95       	asr	r25
    8384:	87 95       	ror	r24
    8386:	95 95       	asr	r25
    8388:	87 95       	ror	r24
    838a:	90 93 43 04 	sts	0x0443, r25
    838e:	80 93 42 04 	sts	0x0442, r24
			accOffsetY = accOffsetYSum>>4;
    8392:	80 91 4a 04 	lds	r24, 0x044A
    8396:	90 91 4b 04 	lds	r25, 0x044B
    839a:	95 95       	asr	r25
    839c:	87 95       	ror	r24
    839e:	95 95       	asr	r25
    83a0:	87 95       	ror	r24
    83a2:	95 95       	asr	r25
    83a4:	87 95       	ror	r24
    83a6:	95 95       	asr	r25
    83a8:	87 95       	ror	r24
    83aa:	90 93 45 04 	sts	0x0445, r25
    83ae:	80 93 44 04 	sts	0x0444, r24
			accOffsetZ = accOffsetZSum>>4;
    83b2:	80 91 4c 04 	lds	r24, 0x044C
    83b6:	90 91 4d 04 	lds	r25, 0x044D
    83ba:	95 95       	asr	r25
    83bc:	87 95       	ror	r24
    83be:	95 95       	asr	r25
    83c0:	87 95       	ror	r24
    83c2:	95 95       	asr	r25
    83c4:	87 95       	ror	r24
    83c6:	95 95       	asr	r25
    83c8:	87 95       	ror	r24
    83ca:	90 93 47 04 	sts	0x0447, r25
    83ce:	80 93 46 04 	sts	0x0446, r24

			//proxUpdated = 0;
			//if(proxUpdated) {	
				startCalibration = 0;					
    83d2:	10 92 77 0b 	sts	0x0B77, r1

		}

	}

	pwm_red = 255;
    83d6:	8f ef       	ldi	r24, 0xFF	; 255
    83d8:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    83dc:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    83e0:	80 93 0e 02 	sts	0x020E, r24
	updateRedLed(pwm_red);
    83e4:	0e 94 ac 3d 	call	0x7b58	; 0x7b58 <updateRedLed>
	updateGreenLed(pwm_green);
    83e8:	80 91 0d 02 	lds	r24, 0x020D
    83ec:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <updateGreenLed>
	updateBlueLed(pwm_blue);
    83f0:	80 91 0e 02 	lds	r24, 0x020E
    83f4:	0e 94 d4 3d 	call	0x7ba8	; 0x7ba8 <updateBlueLed>

}
    83f8:	df 91       	pop	r29
    83fa:	cf 91       	pop	r28
    83fc:	08 95       	ret

		readAccelXYZ();

		if(calibrationCycle<=CALIBRATION_CYCLES) {

			if(proxUpdated) {
    83fe:	80 91 d0 02 	lds	r24, 0x02D0
    8402:	88 23       	and	r24, r24
    8404:	09 f4       	brne	.+2      	; 0x8408 <calibrateSensors+0x2c0>
    8406:	86 c1       	rjmp	.+780    	; 0x8714 <calibrateSensors+0x5cc>

				proxUpdated = 0;
    8408:	10 92 d0 02 	sts	0x02D0, r1

				if(calibrationCycle==0) {		// reset all variables
    840c:	21 15       	cp	r18, r1
    840e:	31 05       	cpc	r19, r1
    8410:	09 f4       	brne	.+2      	; 0x8414 <calibrateSensors+0x2cc>
    8412:	86 c1       	rjmp	.+780    	; 0x8720 <calibrateSensors+0x5d8>
												// "proximityResult" hasn't the offset reset to 0. so we start the actual calibration
												// the next time
				}

				for (i=0;i<12;i++) {
					proximitySum[i] += proximityResult[i];
    8414:	80 91 69 02 	lds	r24, 0x0269
    8418:	90 91 6a 02 	lds	r25, 0x026A
    841c:	aa 27       	eor	r26, r26
    841e:	97 fd       	sbrc	r25, 7
    8420:	a0 95       	com	r26
    8422:	ba 2f       	mov	r27, r26
    8424:	40 91 99 02 	lds	r20, 0x0299
    8428:	50 91 9a 02 	lds	r21, 0x029A
    842c:	60 91 9b 02 	lds	r22, 0x029B
    8430:	70 91 9c 02 	lds	r23, 0x029C
    8434:	84 0f       	add	r24, r20
    8436:	95 1f       	adc	r25, r21
    8438:	a6 1f       	adc	r26, r22
    843a:	b7 1f       	adc	r27, r23
    843c:	80 93 99 02 	sts	0x0299, r24
    8440:	90 93 9a 02 	sts	0x029A, r25
    8444:	a0 93 9b 02 	sts	0x029B, r26
    8448:	b0 93 9c 02 	sts	0x029C, r27
    844c:	80 91 6b 02 	lds	r24, 0x026B
    8450:	90 91 6c 02 	lds	r25, 0x026C
    8454:	aa 27       	eor	r26, r26
    8456:	97 fd       	sbrc	r25, 7
    8458:	a0 95       	com	r26
    845a:	ba 2f       	mov	r27, r26
    845c:	40 91 9d 02 	lds	r20, 0x029D
    8460:	50 91 9e 02 	lds	r21, 0x029E
    8464:	60 91 9f 02 	lds	r22, 0x029F
    8468:	70 91 a0 02 	lds	r23, 0x02A0
    846c:	84 0f       	add	r24, r20
    846e:	95 1f       	adc	r25, r21
    8470:	a6 1f       	adc	r26, r22
    8472:	b7 1f       	adc	r27, r23
    8474:	80 93 9d 02 	sts	0x029D, r24
    8478:	90 93 9e 02 	sts	0x029E, r25
    847c:	a0 93 9f 02 	sts	0x029F, r26
    8480:	b0 93 a0 02 	sts	0x02A0, r27
    8484:	80 91 6d 02 	lds	r24, 0x026D
    8488:	90 91 6e 02 	lds	r25, 0x026E
    848c:	aa 27       	eor	r26, r26
    848e:	97 fd       	sbrc	r25, 7
    8490:	a0 95       	com	r26
    8492:	ba 2f       	mov	r27, r26
    8494:	40 91 a1 02 	lds	r20, 0x02A1
    8498:	50 91 a2 02 	lds	r21, 0x02A2
    849c:	60 91 a3 02 	lds	r22, 0x02A3
    84a0:	70 91 a4 02 	lds	r23, 0x02A4
    84a4:	84 0f       	add	r24, r20
    84a6:	95 1f       	adc	r25, r21
    84a8:	a6 1f       	adc	r26, r22
    84aa:	b7 1f       	adc	r27, r23
    84ac:	80 93 a1 02 	sts	0x02A1, r24
    84b0:	90 93 a2 02 	sts	0x02A2, r25
    84b4:	a0 93 a3 02 	sts	0x02A3, r26
    84b8:	b0 93 a4 02 	sts	0x02A4, r27
    84bc:	80 91 6f 02 	lds	r24, 0x026F
    84c0:	90 91 70 02 	lds	r25, 0x0270
    84c4:	aa 27       	eor	r26, r26
    84c6:	97 fd       	sbrc	r25, 7
    84c8:	a0 95       	com	r26
    84ca:	ba 2f       	mov	r27, r26
    84cc:	40 91 a5 02 	lds	r20, 0x02A5
    84d0:	50 91 a6 02 	lds	r21, 0x02A6
    84d4:	60 91 a7 02 	lds	r22, 0x02A7
    84d8:	70 91 a8 02 	lds	r23, 0x02A8
    84dc:	84 0f       	add	r24, r20
    84de:	95 1f       	adc	r25, r21
    84e0:	a6 1f       	adc	r26, r22
    84e2:	b7 1f       	adc	r27, r23
    84e4:	80 93 a5 02 	sts	0x02A5, r24
    84e8:	90 93 a6 02 	sts	0x02A6, r25
    84ec:	a0 93 a7 02 	sts	0x02A7, r26
    84f0:	b0 93 a8 02 	sts	0x02A8, r27
    84f4:	80 91 71 02 	lds	r24, 0x0271
    84f8:	90 91 72 02 	lds	r25, 0x0272
    84fc:	aa 27       	eor	r26, r26
    84fe:	97 fd       	sbrc	r25, 7
    8500:	a0 95       	com	r26
    8502:	ba 2f       	mov	r27, r26
    8504:	40 91 a9 02 	lds	r20, 0x02A9
    8508:	50 91 aa 02 	lds	r21, 0x02AA
    850c:	60 91 ab 02 	lds	r22, 0x02AB
    8510:	70 91 ac 02 	lds	r23, 0x02AC
    8514:	84 0f       	add	r24, r20
    8516:	95 1f       	adc	r25, r21
    8518:	a6 1f       	adc	r26, r22
    851a:	b7 1f       	adc	r27, r23
    851c:	80 93 a9 02 	sts	0x02A9, r24
    8520:	90 93 aa 02 	sts	0x02AA, r25
    8524:	a0 93 ab 02 	sts	0x02AB, r26
    8528:	b0 93 ac 02 	sts	0x02AC, r27
    852c:	80 91 73 02 	lds	r24, 0x0273
    8530:	90 91 74 02 	lds	r25, 0x0274
    8534:	aa 27       	eor	r26, r26
    8536:	97 fd       	sbrc	r25, 7
    8538:	a0 95       	com	r26
    853a:	ba 2f       	mov	r27, r26
    853c:	40 91 ad 02 	lds	r20, 0x02AD
    8540:	50 91 ae 02 	lds	r21, 0x02AE
    8544:	60 91 af 02 	lds	r22, 0x02AF
    8548:	70 91 b0 02 	lds	r23, 0x02B0
    854c:	84 0f       	add	r24, r20
    854e:	95 1f       	adc	r25, r21
    8550:	a6 1f       	adc	r26, r22
    8552:	b7 1f       	adc	r27, r23
    8554:	80 93 ad 02 	sts	0x02AD, r24
    8558:	90 93 ae 02 	sts	0x02AE, r25
    855c:	a0 93 af 02 	sts	0x02AF, r26
    8560:	b0 93 b0 02 	sts	0x02B0, r27
    8564:	80 91 75 02 	lds	r24, 0x0275
    8568:	90 91 76 02 	lds	r25, 0x0276
    856c:	aa 27       	eor	r26, r26
    856e:	97 fd       	sbrc	r25, 7
    8570:	a0 95       	com	r26
    8572:	ba 2f       	mov	r27, r26
    8574:	40 91 b1 02 	lds	r20, 0x02B1
    8578:	50 91 b2 02 	lds	r21, 0x02B2
    857c:	60 91 b3 02 	lds	r22, 0x02B3
    8580:	70 91 b4 02 	lds	r23, 0x02B4
    8584:	84 0f       	add	r24, r20
    8586:	95 1f       	adc	r25, r21
    8588:	a6 1f       	adc	r26, r22
    858a:	b7 1f       	adc	r27, r23
    858c:	80 93 b1 02 	sts	0x02B1, r24
    8590:	90 93 b2 02 	sts	0x02B2, r25
    8594:	a0 93 b3 02 	sts	0x02B3, r26
    8598:	b0 93 b4 02 	sts	0x02B4, r27
    859c:	80 91 77 02 	lds	r24, 0x0277
    85a0:	90 91 78 02 	lds	r25, 0x0278
    85a4:	aa 27       	eor	r26, r26
    85a6:	97 fd       	sbrc	r25, 7
    85a8:	a0 95       	com	r26
    85aa:	ba 2f       	mov	r27, r26
    85ac:	40 91 b5 02 	lds	r20, 0x02B5
    85b0:	50 91 b6 02 	lds	r21, 0x02B6
    85b4:	60 91 b7 02 	lds	r22, 0x02B7
    85b8:	70 91 b8 02 	lds	r23, 0x02B8
    85bc:	84 0f       	add	r24, r20
    85be:	95 1f       	adc	r25, r21
    85c0:	a6 1f       	adc	r26, r22
    85c2:	b7 1f       	adc	r27, r23
    85c4:	80 93 b5 02 	sts	0x02B5, r24
    85c8:	90 93 b6 02 	sts	0x02B6, r25
    85cc:	a0 93 b7 02 	sts	0x02B7, r26
    85d0:	b0 93 b8 02 	sts	0x02B8, r27
    85d4:	80 91 79 02 	lds	r24, 0x0279
    85d8:	90 91 7a 02 	lds	r25, 0x027A
    85dc:	aa 27       	eor	r26, r26
    85de:	97 fd       	sbrc	r25, 7
    85e0:	a0 95       	com	r26
    85e2:	ba 2f       	mov	r27, r26
    85e4:	40 91 b9 02 	lds	r20, 0x02B9
    85e8:	50 91 ba 02 	lds	r21, 0x02BA
    85ec:	60 91 bb 02 	lds	r22, 0x02BB
    85f0:	70 91 bc 02 	lds	r23, 0x02BC
    85f4:	84 0f       	add	r24, r20
    85f6:	95 1f       	adc	r25, r21
    85f8:	a6 1f       	adc	r26, r22
    85fa:	b7 1f       	adc	r27, r23
    85fc:	80 93 b9 02 	sts	0x02B9, r24
    8600:	90 93 ba 02 	sts	0x02BA, r25
    8604:	a0 93 bb 02 	sts	0x02BB, r26
    8608:	b0 93 bc 02 	sts	0x02BC, r27
    860c:	80 91 7b 02 	lds	r24, 0x027B
    8610:	90 91 7c 02 	lds	r25, 0x027C
    8614:	aa 27       	eor	r26, r26
    8616:	97 fd       	sbrc	r25, 7
    8618:	a0 95       	com	r26
    861a:	ba 2f       	mov	r27, r26
    861c:	40 91 bd 02 	lds	r20, 0x02BD
    8620:	50 91 be 02 	lds	r21, 0x02BE
    8624:	60 91 bf 02 	lds	r22, 0x02BF
    8628:	70 91 c0 02 	lds	r23, 0x02C0
    862c:	84 0f       	add	r24, r20
    862e:	95 1f       	adc	r25, r21
    8630:	a6 1f       	adc	r26, r22
    8632:	b7 1f       	adc	r27, r23
    8634:	80 93 bd 02 	sts	0x02BD, r24
    8638:	90 93 be 02 	sts	0x02BE, r25
    863c:	a0 93 bf 02 	sts	0x02BF, r26
    8640:	b0 93 c0 02 	sts	0x02C0, r27
    8644:	80 91 7d 02 	lds	r24, 0x027D
    8648:	90 91 7e 02 	lds	r25, 0x027E
    864c:	aa 27       	eor	r26, r26
    864e:	97 fd       	sbrc	r25, 7
    8650:	a0 95       	com	r26
    8652:	ba 2f       	mov	r27, r26
    8654:	40 91 c1 02 	lds	r20, 0x02C1
    8658:	50 91 c2 02 	lds	r21, 0x02C2
    865c:	60 91 c3 02 	lds	r22, 0x02C3
    8660:	70 91 c4 02 	lds	r23, 0x02C4
    8664:	84 0f       	add	r24, r20
    8666:	95 1f       	adc	r25, r21
    8668:	a6 1f       	adc	r26, r22
    866a:	b7 1f       	adc	r27, r23
    866c:	80 93 c1 02 	sts	0x02C1, r24
    8670:	90 93 c2 02 	sts	0x02C2, r25
    8674:	a0 93 c3 02 	sts	0x02C3, r26
    8678:	b0 93 c4 02 	sts	0x02C4, r27
    867c:	80 91 7f 02 	lds	r24, 0x027F
    8680:	90 91 80 02 	lds	r25, 0x0280
    8684:	aa 27       	eor	r26, r26
    8686:	97 fd       	sbrc	r25, 7
    8688:	a0 95       	com	r26
    868a:	ba 2f       	mov	r27, r26
    868c:	40 91 c5 02 	lds	r20, 0x02C5
    8690:	50 91 c6 02 	lds	r21, 0x02C6
    8694:	60 91 c7 02 	lds	r22, 0x02C7
    8698:	70 91 c8 02 	lds	r23, 0x02C8
    869c:	84 0f       	add	r24, r20
    869e:	95 1f       	adc	r25, r21
    86a0:	a6 1f       	adc	r26, r22
    86a2:	b7 1f       	adc	r27, r23
    86a4:	80 93 c5 02 	sts	0x02C5, r24
    86a8:	90 93 c6 02 	sts	0x02C6, r25
    86ac:	a0 93 c7 02 	sts	0x02C7, r26
    86b0:	b0 93 c8 02 	sts	0x02C8, r27
				}

				accOffsetXSum += accX;
    86b4:	80 91 48 04 	lds	r24, 0x0448
    86b8:	90 91 49 04 	lds	r25, 0x0449
    86bc:	40 91 3c 04 	lds	r20, 0x043C
    86c0:	50 91 3d 04 	lds	r21, 0x043D
    86c4:	84 0f       	add	r24, r20
    86c6:	95 1f       	adc	r25, r21
    86c8:	90 93 49 04 	sts	0x0449, r25
    86cc:	80 93 48 04 	sts	0x0448, r24
				accOffsetYSum += accY;
    86d0:	80 91 4a 04 	lds	r24, 0x044A
    86d4:	90 91 4b 04 	lds	r25, 0x044B
    86d8:	40 91 3e 04 	lds	r20, 0x043E
    86dc:	50 91 3f 04 	lds	r21, 0x043F
    86e0:	84 0f       	add	r24, r20
    86e2:	95 1f       	adc	r25, r21
    86e4:	90 93 4b 04 	sts	0x044B, r25
    86e8:	80 93 4a 04 	sts	0x044A, r24
				accOffsetZSum += accZ;
    86ec:	80 91 4c 04 	lds	r24, 0x044C
    86f0:	90 91 4d 04 	lds	r25, 0x044D
    86f4:	40 91 40 04 	lds	r20, 0x0440
    86f8:	50 91 41 04 	lds	r21, 0x0441
    86fc:	84 0f       	add	r24, r20
    86fe:	95 1f       	adc	r25, r21
    8700:	90 93 4d 04 	sts	0x044D, r25
    8704:	80 93 4c 04 	sts	0x044C, r24

				calibrationCycle++;
    8708:	2f 5f       	subi	r18, 0xFF	; 255
    870a:	3f 4f       	sbci	r19, 0xFF	; 255
    870c:	30 93 5e 04 	sts	0x045E, r19
    8710:	20 93 5d 04 	sts	0x045D, r18
    8714:	80 91 77 0b 	lds	r24, 0x0B77
	updateBlueLed(pwm_blue);

	calibrationCycle = 0;
	startCalibration = 1;

	while(startCalibration) {
    8718:	88 23       	and	r24, r24
    871a:	09 f0       	breq	.+2      	; 0x871e <calibrateSensors+0x5d6>
    871c:	31 cd       	rjmp	.-1438   	; 0x8180 <calibrateSensors+0x38>
    871e:	5b ce       	rjmp	.-842    	; 0x83d6 <calibrateSensors+0x28e>

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8720:	10 92 99 02 	sts	0x0299, r1
    8724:	10 92 9a 02 	sts	0x029A, r1
    8728:	10 92 9b 02 	sts	0x029B, r1
    872c:	10 92 9c 02 	sts	0x029C, r1
						proximityOffset[i] = 0;
    8730:	10 92 82 02 	sts	0x0282, r1
    8734:	10 92 81 02 	sts	0x0281, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8738:	10 92 9d 02 	sts	0x029D, r1
    873c:	10 92 9e 02 	sts	0x029E, r1
    8740:	10 92 9f 02 	sts	0x029F, r1
    8744:	10 92 a0 02 	sts	0x02A0, r1
						proximityOffset[i] = 0;
    8748:	10 92 84 02 	sts	0x0284, r1
    874c:	10 92 83 02 	sts	0x0283, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8750:	10 92 a1 02 	sts	0x02A1, r1
    8754:	10 92 a2 02 	sts	0x02A2, r1
    8758:	10 92 a3 02 	sts	0x02A3, r1
    875c:	10 92 a4 02 	sts	0x02A4, r1
						proximityOffset[i] = 0;
    8760:	10 92 86 02 	sts	0x0286, r1
    8764:	10 92 85 02 	sts	0x0285, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8768:	10 92 a5 02 	sts	0x02A5, r1
    876c:	10 92 a6 02 	sts	0x02A6, r1
    8770:	10 92 a7 02 	sts	0x02A7, r1
    8774:	10 92 a8 02 	sts	0x02A8, r1
						proximityOffset[i] = 0;
    8778:	10 92 88 02 	sts	0x0288, r1
    877c:	10 92 87 02 	sts	0x0287, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8780:	10 92 a9 02 	sts	0x02A9, r1
    8784:	10 92 aa 02 	sts	0x02AA, r1
    8788:	10 92 ab 02 	sts	0x02AB, r1
    878c:	10 92 ac 02 	sts	0x02AC, r1
						proximityOffset[i] = 0;
    8790:	10 92 8a 02 	sts	0x028A, r1
    8794:	10 92 89 02 	sts	0x0289, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8798:	10 92 ad 02 	sts	0x02AD, r1
    879c:	10 92 ae 02 	sts	0x02AE, r1
    87a0:	10 92 af 02 	sts	0x02AF, r1
    87a4:	10 92 b0 02 	sts	0x02B0, r1
						proximityOffset[i] = 0;
    87a8:	10 92 8c 02 	sts	0x028C, r1
    87ac:	10 92 8b 02 	sts	0x028B, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    87b0:	10 92 b1 02 	sts	0x02B1, r1
    87b4:	10 92 b2 02 	sts	0x02B2, r1
    87b8:	10 92 b3 02 	sts	0x02B3, r1
    87bc:	10 92 b4 02 	sts	0x02B4, r1
						proximityOffset[i] = 0;
    87c0:	10 92 8e 02 	sts	0x028E, r1
    87c4:	10 92 8d 02 	sts	0x028D, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    87c8:	10 92 b5 02 	sts	0x02B5, r1
    87cc:	10 92 b6 02 	sts	0x02B6, r1
    87d0:	10 92 b7 02 	sts	0x02B7, r1
    87d4:	10 92 b8 02 	sts	0x02B8, r1
						proximityOffset[i] = 0;
    87d8:	10 92 90 02 	sts	0x0290, r1
    87dc:	10 92 8f 02 	sts	0x028F, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    87e0:	10 92 b9 02 	sts	0x02B9, r1
    87e4:	10 92 ba 02 	sts	0x02BA, r1
    87e8:	10 92 bb 02 	sts	0x02BB, r1
    87ec:	10 92 bc 02 	sts	0x02BC, r1
						proximityOffset[i] = 0;
    87f0:	10 92 92 02 	sts	0x0292, r1
    87f4:	10 92 91 02 	sts	0x0291, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    87f8:	10 92 bd 02 	sts	0x02BD, r1
    87fc:	10 92 be 02 	sts	0x02BE, r1
    8800:	10 92 bf 02 	sts	0x02BF, r1
    8804:	10 92 c0 02 	sts	0x02C0, r1
						proximityOffset[i] = 0;
    8808:	10 92 94 02 	sts	0x0294, r1
    880c:	10 92 93 02 	sts	0x0293, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8810:	10 92 c1 02 	sts	0x02C1, r1
    8814:	10 92 c2 02 	sts	0x02C2, r1
    8818:	10 92 c3 02 	sts	0x02C3, r1
    881c:	10 92 c4 02 	sts	0x02C4, r1
						proximityOffset[i] = 0;
    8820:	10 92 96 02 	sts	0x0296, r1
    8824:	10 92 95 02 	sts	0x0295, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8828:	10 92 c5 02 	sts	0x02C5, r1
    882c:	10 92 c6 02 	sts	0x02C6, r1
    8830:	10 92 c7 02 	sts	0x02C7, r1
    8834:	10 92 c8 02 	sts	0x02C8, r1
						proximityOffset[i] = 0;
    8838:	10 92 98 02 	sts	0x0298, r1
    883c:	10 92 97 02 	sts	0x0297, r1
					}
					accOffsetXSum = 0;
    8840:	10 92 49 04 	sts	0x0449, r1
    8844:	10 92 48 04 	sts	0x0448, r1
					accOffsetYSum = 0;
    8848:	10 92 4b 04 	sts	0x044B, r1
    884c:	10 92 4a 04 	sts	0x044A, r1
					accOffsetZSum = 0;
    8850:	10 92 4d 04 	sts	0x044D, r1
    8854:	10 92 4c 04 	sts	0x044C, r1

					calibrationCycle++;
    8858:	d0 93 5e 04 	sts	0x045E, r29
    885c:	c0 93 5d 04 	sts	0x045D, r28
    8860:	80 91 77 0b 	lds	r24, 0x0B77

					continue;					// the first time "proxUpdated" is set, all the proximity values saved in the array 
    8864:	59 cf       	rjmp	.-334    	; 0x8718 <calibrateSensors+0x5d0>

00008866 <readAccelXYZ_1>:

void readAccelXYZ_1() {

	int i = 0;

	if(useAccel == USE_MMAX7455L) {
    8866:	80 91 3b 04 	lds	r24, 0x043B
    886a:	88 23       	and	r24, r24
    886c:	79 f0       	breq	.+30     	; 0x888c <readAccelXYZ_1+0x26>
		for(i=0; i<2; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
		}
		return;

	} else if(useAccel == USE_ADXL345) {							
    886e:	81 30       	cpi	r24, 0x01	; 1
    8870:	11 f1       	breq	.+68     	; 0x88b6 <readAccelXYZ_1+0x50>
		}
		return;

	} else {

		accX = 0;
    8872:	10 92 3d 04 	sts	0x043D, r1
    8876:	10 92 3c 04 	sts	0x043C, r1
		accY = 0;
    887a:	10 92 3f 04 	sts	0x043F, r1
    887e:	10 92 3e 04 	sts	0x043E, r1
		accZ = 0;
    8882:	10 92 41 04 	sts	0x0441, r1
    8886:	10 92 40 04 	sts	0x0440, r1
    888a:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    888c:	80 91 14 02 	lds	r24, 0x0214
    8890:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    8894:	80 e0       	ldi	r24, 0x00	; 0
    8896:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    889a:	80 91 14 02 	lds	r24, 0x0214
    889e:	8f 5f       	subi	r24, 0xFF	; 255
    88a0:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <i2c_rep_start>

		for(i=0; i<2; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    88a4:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <i2c_readAck>
    88a8:	80 93 52 04 	sts	0x0452, r24
    88ac:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <i2c_readAck>
    88b0:	80 93 53 04 	sts	0x0453, r24
    88b4:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    88b6:	80 91 14 02 	lds	r24, 0x0214
    88ba:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    88be:	82 e3       	ldi	r24, 0x32	; 50
    88c0:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    88c4:	80 91 14 02 	lds	r24, 0x0214
    88c8:	8f 5f       	subi	r24, 0xFF	; 255
    88ca:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <i2c_rep_start>

		for(i=0; i<3; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    88ce:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <i2c_readAck>
    88d2:	80 93 52 04 	sts	0x0452, r24
    88d6:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <i2c_readAck>
    88da:	80 93 53 04 	sts	0x0453, r24
    88de:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <i2c_readAck>
    88e2:	80 93 54 04 	sts	0x0454, r24
    88e6:	08 95       	ret

000088e8 <readAccelXYZ_2>:

void readAccelXYZ_2() {

	int i = 2;

	if(useAccel == USE_MMAX7455L) {
    88e8:	80 91 3b 04 	lds	r24, 0x043B
    88ec:	88 23       	and	r24, r24
    88ee:	09 f0       	breq	.+2      	; 0x88f2 <readAccelXYZ_2+0xa>
    88f0:	4e c0       	rjmp	.+156    	; 0x898e <readAccelXYZ_2+0xa6>

		for(i=2; i<5; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    88f2:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <i2c_readAck>
    88f6:	80 93 54 04 	sts	0x0454, r24
		}

	} else if(useAccel == USE_ADXL345) {							

		for(i=3; i<5; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    88fa:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <i2c_readAck>
    88fe:	80 93 55 04 	sts	0x0455, r24
    8902:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <i2c_readAck>
    8906:	80 93 56 04 	sts	0x0456, r24
		}
		accBuff[i] = i2c_readNak();									// read last byte sending NACK
    890a:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <i2c_readNak>
    890e:	80 93 57 04 	sts	0x0457, r24
		i2c_stop();													// set stop conditon = release bus
    8912:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    8916:	80 91 77 0b 	lds	r24, 0x0B77
    891a:	88 23       	and	r24, r24
    891c:	09 f4       	brne	.+2      	; 0x8920 <readAccelXYZ_2+0x38>
    891e:	47 c0       	rjmp	.+142    	; 0x89ae <readAccelXYZ_2+0xc6>
			accX = ((signed int)accBuff[1]<<8)|accBuff[0];    			// X axis
    8920:	80 91 53 04 	lds	r24, 0x0453
    8924:	99 27       	eor	r25, r25
    8926:	87 fd       	sbrc	r24, 7
    8928:	90 95       	com	r25
    892a:	98 2f       	mov	r25, r24
    892c:	88 27       	eor	r24, r24
    892e:	20 91 52 04 	lds	r18, 0x0452
    8932:	33 27       	eor	r19, r19
    8934:	27 fd       	sbrc	r18, 7
    8936:	30 95       	com	r19
    8938:	82 2b       	or	r24, r18
    893a:	93 2b       	or	r25, r19
    893c:	90 93 3d 04 	sts	0x043D, r25
    8940:	80 93 3c 04 	sts	0x043C, r24
			accY = ((signed int)accBuff[3]<<8)|accBuff[2];    			// Y axis
    8944:	80 91 55 04 	lds	r24, 0x0455
    8948:	99 27       	eor	r25, r25
    894a:	87 fd       	sbrc	r24, 7
    894c:	90 95       	com	r25
    894e:	98 2f       	mov	r25, r24
    8950:	88 27       	eor	r24, r24
    8952:	20 91 54 04 	lds	r18, 0x0454
    8956:	33 27       	eor	r19, r19
    8958:	27 fd       	sbrc	r18, 7
    895a:	30 95       	com	r19
    895c:	82 2b       	or	r24, r18
    895e:	93 2b       	or	r25, r19
    8960:	90 93 3f 04 	sts	0x043F, r25
    8964:	80 93 3e 04 	sts	0x043E, r24
			accZ = ((signed int)accBuff[5]<<8)|accBuff[4];    			// Z axis
    8968:	80 91 57 04 	lds	r24, 0x0457
    896c:	99 27       	eor	r25, r25
    896e:	87 fd       	sbrc	r24, 7
    8970:	90 95       	com	r25
    8972:	98 2f       	mov	r25, r24
    8974:	88 27       	eor	r24, r24
    8976:	20 91 56 04 	lds	r18, 0x0456
    897a:	33 27       	eor	r19, r19
    897c:	27 fd       	sbrc	r18, 7
    897e:	30 95       	com	r19
    8980:	82 2b       	or	r24, r18
    8982:	93 2b       	or	r25, r19
    8984:	90 93 41 04 	sts	0x0441, r25
    8988:	80 93 40 04 	sts	0x0440, r24
    898c:	08 95       	ret
			accX = (((signed int)accBuff[1]<<8)|accBuff[0])-accOffsetX;	// X axis
			accY = (((signed int)accBuff[3]<<8)|accBuff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    898e:	81 30       	cpi	r24, 0x01	; 1
    8990:	09 f4       	brne	.+2      	; 0x8994 <readAccelXYZ_2+0xac>
    8992:	b3 cf       	rjmp	.-154    	; 0x88fa <readAccelXYZ_2+0x12>
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
		}

	} else {

		accX = 0;
    8994:	10 92 3d 04 	sts	0x043D, r1
    8998:	10 92 3c 04 	sts	0x043C, r1
		accY = 0;
    899c:	10 92 3f 04 	sts	0x043F, r1
    89a0:	10 92 3e 04 	sts	0x043E, r1
		accZ = 0;
    89a4:	10 92 41 04 	sts	0x0441, r1
    89a8:	10 92 40 04 	sts	0x0440, r1
    89ac:	08 95       	ret
		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)accBuff[1]<<8)|accBuff[0];    			// X axis
			accY = ((signed int)accBuff[3]<<8)|accBuff[2];    			// Y axis
			accZ = ((signed int)accBuff[5]<<8)|accBuff[4];    			// Z axis
		} else {													// else return the calibrated values
			accX = (((signed int)accBuff[1]<<8)|accBuff[0])-accOffsetX;	// X axis
    89ae:	80 91 53 04 	lds	r24, 0x0453
    89b2:	99 27       	eor	r25, r25
    89b4:	87 fd       	sbrc	r24, 7
    89b6:	90 95       	com	r25
    89b8:	98 2f       	mov	r25, r24
    89ba:	88 27       	eor	r24, r24
    89bc:	20 91 52 04 	lds	r18, 0x0452
    89c0:	33 27       	eor	r19, r19
    89c2:	27 fd       	sbrc	r18, 7
    89c4:	30 95       	com	r19
    89c6:	82 2b       	or	r24, r18
    89c8:	93 2b       	or	r25, r19
    89ca:	20 91 42 04 	lds	r18, 0x0442
    89ce:	30 91 43 04 	lds	r19, 0x0443
    89d2:	82 1b       	sub	r24, r18
    89d4:	93 0b       	sbc	r25, r19
    89d6:	90 93 3d 04 	sts	0x043D, r25
    89da:	80 93 3c 04 	sts	0x043C, r24
			accY = (((signed int)accBuff[3]<<8)|accBuff[2])-accOffsetY;	// Y axis
    89de:	80 91 55 04 	lds	r24, 0x0455
    89e2:	99 27       	eor	r25, r25
    89e4:	87 fd       	sbrc	r24, 7
    89e6:	90 95       	com	r25
    89e8:	98 2f       	mov	r25, r24
    89ea:	88 27       	eor	r24, r24
    89ec:	20 91 54 04 	lds	r18, 0x0454
    89f0:	33 27       	eor	r19, r19
    89f2:	27 fd       	sbrc	r18, 7
    89f4:	30 95       	com	r19
    89f6:	82 2b       	or	r24, r18
    89f8:	93 2b       	or	r25, r19
    89fa:	20 91 44 04 	lds	r18, 0x0444
    89fe:	30 91 45 04 	lds	r19, 0x0445
    8a02:	82 1b       	sub	r24, r18
    8a04:	93 0b       	sbc	r25, r19
    8a06:	90 93 3f 04 	sts	0x043F, r25
    8a0a:	80 93 3e 04 	sts	0x043E, r24
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
    8a0e:	80 91 57 04 	lds	r24, 0x0457
    8a12:	99 27       	eor	r25, r25
    8a14:	87 fd       	sbrc	r24, 7
    8a16:	90 95       	com	r25
    8a18:	98 2f       	mov	r25, r24
    8a1a:	88 27       	eor	r24, r24
    8a1c:	20 91 56 04 	lds	r18, 0x0456
    8a20:	33 27       	eor	r19, r19
    8a22:	27 fd       	sbrc	r18, 7
    8a24:	30 95       	com	r19
    8a26:	82 2b       	or	r24, r18
    8a28:	93 2b       	or	r25, r19
    8a2a:	20 91 46 04 	lds	r18, 0x0446
    8a2e:	30 91 47 04 	lds	r19, 0x0447
    8a32:	82 1b       	sub	r24, r18
    8a34:	93 0b       	sbc	r25, r19
    8a36:	90 93 41 04 	sts	0x0441, r25
    8a3a:	80 93 40 04 	sts	0x0440, r24
    8a3e:	08 95       	ret

00008a40 <computeAngle>:

	}

}

void computeAngle() {
    8a40:	ef 92       	push	r14
    8a42:	ff 92       	push	r15
    8a44:	0f 93       	push	r16
    8a46:	1f 93       	push	r17

	unsigned int abs_acc_z=abs(accZ);
    8a48:	80 91 40 04 	lds	r24, 0x0440
    8a4c:	90 91 41 04 	lds	r25, 0x0441
    8a50:	97 fd       	sbrc	r25, 7
    8a52:	6c c0       	rjmp	.+216    	; 0x8b2c <computeAngle+0xec>

	// check the robot motion plane (horizontal or vertical) based on the Z axes;
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
    8a54:	85 31       	cpi	r24, 0x15	; 21
    8a56:	91 05       	cpc	r25, r1
    8a58:	08 f0       	brcs	.+2      	; 0x8a5c <computeAngle+0x1c>
    8a5a:	54 c0       	rjmp	.+168    	; 0x8b04 <computeAngle+0xc4>
		currPosition = HORIZONTAL_POS;
    8a5c:	81 e0       	ldi	r24, 0x01	; 1
    8a5e:	80 93 15 02 	sts	0x0215, r24
    8a62:	21 e0       	ldi	r18, 0x01	; 1
	} else {
		currPosition = VERTICAL_POS;	
	}
	if(currPosition != robotPosition) {			
    8a64:	80 91 16 02 	lds	r24, 0x0216
    8a68:	82 17       	cp	r24, r18
    8a6a:	09 f4       	brne	.+2      	; 0x8a6e <computeAngle+0x2e>
    8a6c:	53 c0       	rjmp	.+166    	; 0x8b14 <computeAngle+0xd4>
		timesInSamePos++;
    8a6e:	80 91 50 04 	lds	r24, 0x0450
    8a72:	90 91 51 04 	lds	r25, 0x0451
    8a76:	01 96       	adiw	r24, 0x01	; 1
    8a78:	90 93 51 04 	sts	0x0451, r25
    8a7c:	80 93 50 04 	sts	0x0450, r24
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
    8a80:	88 3c       	cpi	r24, 0xC8	; 200
    8a82:	91 05       	cpc	r25, r1
    8a84:	08 f0       	brcs	.+2      	; 0x8a88 <computeAngle+0x48>
    8a86:	4b c0       	rjmp	.+150    	; 0x8b1e <computeAngle+0xde>
	} else {
		timesInSamePos = 0;
	}

	// compute the angle using the X and Y axis
	thetaAcc = atan2((float)accX, (float)accY);
    8a88:	60 91 3c 04 	lds	r22, 0x043C
    8a8c:	70 91 3d 04 	lds	r23, 0x043D
    8a90:	88 27       	eor	r24, r24
    8a92:	77 fd       	sbrc	r23, 7
    8a94:	80 95       	com	r24
    8a96:	98 2f       	mov	r25, r24
    8a98:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <__floatsisf>
    8a9c:	7b 01       	movw	r14, r22
    8a9e:	8c 01       	movw	r16, r24
    8aa0:	60 91 3e 04 	lds	r22, 0x043E
    8aa4:	70 91 3f 04 	lds	r23, 0x043F
    8aa8:	88 27       	eor	r24, r24
    8aaa:	77 fd       	sbrc	r23, 7
    8aac:	80 95       	com	r24
    8aae:	98 2f       	mov	r25, r24
    8ab0:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <__floatsisf>
    8ab4:	9b 01       	movw	r18, r22
    8ab6:	ac 01       	movw	r20, r24
    8ab8:	c8 01       	movw	r24, r16
    8aba:	b7 01       	movw	r22, r14
    8abc:	0e 94 f2 50 	call	0xa1e4	; 0xa1e4 <atan2>
    8ac0:	60 93 b4 04 	sts	0x04B4, r22
    8ac4:	70 93 b5 04 	sts	0x04B5, r23
    8ac8:	80 93 b6 04 	sts	0x04B6, r24
    8acc:	90 93 b7 04 	sts	0x04B7, r25
	currentAngle = (signed int)(thetaAcc*RAD_2_DEG);
    8ad0:	21 ee       	ldi	r18, 0xE1	; 225
    8ad2:	3e e2       	ldi	r19, 0x2E	; 46
    8ad4:	45 e6       	ldi	r20, 0x65	; 101
    8ad6:	52 e4       	ldi	r21, 0x42	; 66
    8ad8:	0e 94 00 53 	call	0xa600	; 0xa600 <__mulsf3>
    8adc:	0e 94 b4 51 	call	0xa368	; 0xa368 <__fixsfsi>
    8ae0:	9b 01       	movw	r18, r22
    8ae2:	70 93 4f 04 	sts	0x044F, r23
    8ae6:	60 93 4e 04 	sts	0x044E, r22

	if(currentAngle < 0) {
    8aea:	77 ff       	sbrs	r23, 7
    8aec:	06 c0       	rjmp	.+12     	; 0x8afa <computeAngle+0xba>
		currentAngle = currentAngle + (signed int)360;	// angles from 0 to 360
    8aee:	28 59       	subi	r18, 0x98	; 152
    8af0:	3e 4f       	sbci	r19, 0xFE	; 254
    8af2:	30 93 4f 04 	sts	0x044F, r19
    8af6:	20 93 4e 04 	sts	0x044E, r18
	}

}
    8afa:	1f 91       	pop	r17
    8afc:	0f 91       	pop	r16
    8afe:	ff 90       	pop	r15
    8b00:	ef 90       	pop	r14
    8b02:	08 95       	ret
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
		currPosition = HORIZONTAL_POS;
	} else {
		currPosition = VERTICAL_POS;	
    8b04:	10 92 15 02 	sts	0x0215, r1
    8b08:	20 e0       	ldi	r18, 0x00	; 0
	}
	if(currPosition != robotPosition) {			
    8b0a:	80 91 16 02 	lds	r24, 0x0216
    8b0e:	82 17       	cp	r24, r18
    8b10:	09 f0       	breq	.+2      	; 0x8b14 <computeAngle+0xd4>
    8b12:	ad cf       	rjmp	.-166    	; 0x8a6e <computeAngle+0x2e>
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
			robotPosition = currPosition;
		}
	} else {
		timesInSamePos = 0;
    8b14:	10 92 51 04 	sts	0x0451, r1
    8b18:	10 92 50 04 	sts	0x0450, r1
    8b1c:	b5 cf       	rjmp	.-150    	; 0x8a88 <computeAngle+0x48>
		currPosition = VERTICAL_POS;	
	}
	if(currPosition != robotPosition) {			
		timesInSamePos++;
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
    8b1e:	10 92 51 04 	sts	0x0451, r1
    8b22:	10 92 50 04 	sts	0x0450, r1
			robotPosition = currPosition;
    8b26:	20 93 16 02 	sts	0x0216, r18
    8b2a:	ae cf       	rjmp	.-164    	; 0x8a88 <computeAngle+0x48>

}

void computeAngle() {

	unsigned int abs_acc_z=abs(accZ);
    8b2c:	90 95       	com	r25
    8b2e:	81 95       	neg	r24
    8b30:	9f 4f       	sbci	r25, 0xFF	; 255
    8b32:	90 cf       	rjmp	.-224    	; 0x8a54 <computeAngle+0x14>

00008b34 <writeCalibrationToFlash>:


#include "eepromIO.h"

void writeCalibrationToFlash() {	
	eeprom_update_block(calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
    8b34:	8d ed       	ldi	r24, 0xDD	; 221
    8b36:	98 e0       	ldi	r25, 0x08	; 8
    8b38:	6c e6       	ldi	r22, 0x6C	; 108
    8b3a:	7f e0       	ldi	r23, 0x0F	; 15
    8b3c:	40 e9       	ldi	r20, 0x90	; 144
    8b3e:	50 e0       	ldi	r21, 0x00	; 0
    8b40:	0e 94 91 54 	call	0xa922	; 0xa922 <__eeupd_block_m2560>
	eeprom_update_word ((uint16_t*) CALIB_CHECK_ADDRESS, 0xAA55);   // to let know the calibration data are valid
    8b44:	8a e6       	ldi	r24, 0x6A	; 106
    8b46:	9f e0       	ldi	r25, 0x0F	; 15
    8b48:	65 e5       	ldi	r22, 0x55	; 85
    8b4a:	7a ea       	ldi	r23, 0xAA	; 170
    8b4c:	0e 94 b3 54 	call	0xa966	; 0xa966 <__eeupd_word_m2560>
}
    8b50:	08 95       	ret

00008b52 <readCalibrationFromFlash>:

void readCalibrationFromFlash() {
	eeprom_read_block (calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
    8b52:	8d ed       	ldi	r24, 0xDD	; 221
    8b54:	98 e0       	ldi	r25, 0x08	; 8
    8b56:	6c e6       	ldi	r22, 0x6C	; 108
    8b58:	7f e0       	ldi	r23, 0x0F	; 15
    8b5a:	40 e9       	ldi	r20, 0x90	; 144
    8b5c:	50 e0       	ldi	r21, 0x00	; 0
    8b5e:	0e 94 73 54 	call	0xa8e6	; 0xa8e6 <__eerd_block_m2560>
}
    8b62:	08 95       	ret

00008b64 <irCommInitTransmitter>:
#include "irCommunication.h"


void irCommInitTransmitter() {
	irCommEnabled = IRCOMM_MODE_TRANSMIT;
    8b64:	82 e0       	ldi	r24, 0x02	; 2
    8b66:	80 93 d4 04 	sts	0x04D4, r24
	irCommState = IRCOMM_TX_IDLE_STATE;
    8b6a:	81 e0       	ldi	r24, 0x01	; 1
    8b6c:	80 93 d7 04 	sts	0x04D7, r24
}
    8b70:	08 95       	ret

00008b72 <irCommInitReceiver>:

void irCommInitReceiver() {
	irCommEnabled = IRCOMM_MODE_RECEIVE;
    8b72:	81 e0       	ldi	r24, 0x01	; 1
    8b74:	80 93 d4 04 	sts	0x04D4, r24
	irCommState = IRCOMM_RX_IDLE_STATE;
    8b78:	80 93 d7 04 	sts	0x04D7, r24
	irCommEnabledNext = IRCOMM_MODE_RECEIVE;
    8b7c:	80 93 d5 04 	sts	0x04D5, r24
}
    8b80:	08 95       	ret

00008b82 <irCommInit>:

void irCommInit() {
	irCommProxValuesAdc = irCommProxValuesBuff1;
    8b82:	84 ec       	ldi	r24, 0xC4	; 196
    8b84:	95 e0       	ldi	r25, 0x05	; 5
    8b86:	90 93 65 08 	sts	0x0865, r25
    8b8a:	80 93 64 08 	sts	0x0864, r24
	irCommProxValuesCurr = irCommProxValuesBuff2;
    8b8e:	86 e0       	ldi	r24, 0x06	; 6
    8b90:	97 e0       	ldi	r25, 0x07	; 7
    8b92:	90 93 47 08 	sts	0x0847, r25
    8b96:	80 93 46 08 	sts	0x0846, r24
	irCommMaxSensorValueAdc = irCommMaxSensorValueBuff1;
    8b9a:	e3 e7       	ldi	r30, 0x73	; 115
    8b9c:	f9 e0       	ldi	r31, 0x09	; 9
    8b9e:	f0 93 33 0b 	sts	0x0B33, r31
    8ba2:	e0 93 32 0b 	sts	0x0B32, r30
	irCommMaxSensorValueCurr = irCommMaxSensorValueBuff2;
    8ba6:	81 e6       	ldi	r24, 0x61	; 97
    8ba8:	9b e0       	ldi	r25, 0x0B	; 11
    8baa:	90 93 44 05 	sts	0x0544, r25
    8bae:	80 93 43 05 	sts	0x0543, r24
	irCommMinSensorValueAdc = irCommMinSensorValueBuff1;
    8bb2:	88 e4       	ldi	r24, 0x48	; 72
    8bb4:	98 e0       	ldi	r25, 0x08	; 8
    8bb6:	90 93 c1 05 	sts	0x05C1, r25
    8bba:	80 93 c0 05 	sts	0x05C0, r24
	irCommMinSensorValueCurr = irCommMinSensorValueBuff2;
    8bbe:	2d ec       	ldi	r18, 0xCD	; 205
    8bc0:	38 e0       	ldi	r19, 0x08	; 8
    8bc2:	30 93 30 05 	sts	0x0530, r19
    8bc6:	20 93 2f 05 	sts	0x052F, r18
	memset(irCommMaxSensorValueAdc, 0x00, 16);
    8bca:	20 e1       	ldi	r18, 0x10	; 16
    8bcc:	df 01       	movw	r26, r30
    8bce:	1d 92       	st	X+, r1
    8bd0:	2a 95       	dec	r18
    8bd2:	e9 f7       	brne	.-6      	; 0x8bce <irCommInit+0x4c>
	memset(irCommMinSensorValueAdc, 0xFF, 16);
    8bd4:	6f ef       	ldi	r22, 0xFF	; 255
    8bd6:	70 e0       	ldi	r23, 0x00	; 0
    8bd8:	40 e1       	ldi	r20, 0x10	; 16
    8bda:	50 e0       	ldi	r21, 0x00	; 0
    8bdc:	0e 94 6c 54 	call	0xa8d8	; 0xa8d8 <memset>
	irCommMode = IRCOMM_MODE_SENSORS_SAMPLING;
    8be0:	10 92 d6 04 	sts	0x04D6, r1
	irCommEnabled = IRCOMM_MODE_TRANSMIT;
	irCommState = IRCOMM_TX_IDLE_STATE;
}

void irCommInitReceiver() {
	irCommEnabled = IRCOMM_MODE_RECEIVE;
    8be4:	81 e0       	ldi	r24, 0x01	; 1
    8be6:	80 93 d4 04 	sts	0x04D4, r24
	irCommState = IRCOMM_RX_IDLE_STATE;
    8bea:	80 93 d7 04 	sts	0x04D7, r24
	irCommEnabledNext = IRCOMM_MODE_RECEIVE;
    8bee:	80 93 d5 04 	sts	0x04D5, r24
	irCommMinSensorValueCurr = irCommMinSensorValueBuff2;
	memset(irCommMaxSensorValueAdc, 0x00, 16);
	memset(irCommMinSensorValueAdc, 0xFF, 16);
	irCommMode = IRCOMM_MODE_SENSORS_SAMPLING;
	irCommInitReceiver();
}
    8bf2:	08 95       	ret

00008bf4 <irCommDeinit>:

void irCommDeinit() {
	irCommEnabled = IRCOMM_MODE_SENSORS_SAMPLING;
    8bf4:	10 92 d4 04 	sts	0x04D4, r1
	irCommMode = IRCOMM_MODE_SENSORS_SAMPLING;
    8bf8:	10 92 d6 04 	sts	0x04D6, r1
}
    8bfc:	08 95       	ret

00008bfe <resetDebugVariables>:

void resetDebugVariables() {
    8bfe:	ef 92       	push	r14
    8c00:	ff 92       	push	r15
    8c02:	0f 93       	push	r16
    8c04:	1f 93       	push	r17
    8c06:	cf 93       	push	r28
    8c08:	df 93       	push	r29
	irCommRxMaxSensorIndexTemp=0;
    8c0a:	10 92 ed 04 	sts	0x04ED, r1
	irCommRxMaxDiffIndexTemp=0;
    8c0e:	10 92 ee 04 	sts	0x04EE, r1
	irCommMaxSensorValueCurrIndexTemp=0;
    8c12:	10 92 f1 04 	sts	0x04F1, r1
	irCommMinSensorValueCurrIndexTemp=0;
    8c16:	10 92 f2 04 	sts	0x04F2, r1
	memset(irCommRxMaxSensorTemp, 0xFF, 4);
    8c1a:	ee 24       	eor	r14, r14
    8c1c:	ea 94       	dec	r14
    8c1e:	fe 2c       	mov	r15, r14
    8c20:	87 01       	movw	r16, r14
    8c22:	e0 92 24 0b 	sts	0x0B24, r14
    8c26:	f0 92 25 0b 	sts	0x0B25, r15
    8c2a:	00 93 26 0b 	sts	0x0B26, r16
    8c2e:	10 93 27 0b 	sts	0x0B27, r17
	memset(irCommRxMaxDiffTemp, 0xFF, 4);
    8c32:	e0 92 5d 0b 	sts	0x0B5D, r14
    8c36:	f0 92 5e 0b 	sts	0x0B5E, r15
    8c3a:	00 93 5f 0b 	sts	0x0B5F, r16
    8c3e:	10 93 60 0b 	sts	0x0B60, r17
	memset(irCommMaxSensorValueCurrTemp, 0xFF, 4);
    8c42:	e0 92 31 05 	sts	0x0531, r14
    8c46:	f0 92 32 05 	sts	0x0532, r15
    8c4a:	00 93 33 05 	sts	0x0533, r16
    8c4e:	10 93 34 05 	sts	0x0534, r17
	memset(irCommMinSensorValueCurrTemp, 0xFF, 4);
    8c52:	e0 92 28 0b 	sts	0x0B28, r14
    8c56:	f0 92 29 0b 	sts	0x0B29, r15
    8c5a:	00 93 2a 0b 	sts	0x0B2A, r16
    8c5e:	10 93 2b 0b 	sts	0x0B2B, r17

	irCommStateIndexTemp = 0;					
    8c62:	10 92 fa 04 	sts	0x04FA, r1
	memset(irCommStateTemp, 0xFF, 14);
    8c66:	85 e3       	ldi	r24, 0x35	; 53
    8c68:	95 e0       	ldi	r25, 0x05	; 5
    8c6a:	6f ef       	ldi	r22, 0xFF	; 255
    8c6c:	70 e0       	ldi	r23, 0x00	; 0
    8c6e:	4e e0       	ldi	r20, 0x0E	; 14
    8c70:	50 e0       	ldi	r21, 0x00	; 0
    8c72:	0e 94 6c 54 	call	0xa8d8	; 0xa8d8 <memset>

	irCommShiftCountFinalIndexTemp = 0;
    8c76:	10 92 f4 04 	sts	0x04F4, r1
	memset(irCommShiftCountFinalTemp, 0xFF, 2);
    8c7a:	cf ef       	ldi	r28, 0xFF	; 255
    8c7c:	df ef       	ldi	r29, 0xFF	; 255
    8c7e:	d0 93 31 0b 	sts	0x0B31, r29
    8c82:	c0 93 30 0b 	sts	0x0B30, r28
	irCommRxStartBitDetectedIndexTemp = 0;
    8c86:	10 92 f9 04 	sts	0x04F9, r1
	memset(irCommRxStartBitDetectedTemp, 0xFF, 2);
    8c8a:	d0 93 6f 05 	sts	0x056F, r29
    8c8e:	c0 93 6e 05 	sts	0x056E, r28
	irCommSwitchCountIndexTemp = 0;
    8c92:	10 92 f0 04 	sts	0x04F0, r1
	memset(irCommSwitchCountTemp, 0xFF, 2);
    8c96:	d0 93 4b 05 	sts	0x054B, r29
    8c9a:	c0 93 4a 05 	sts	0x054A, r28
	irCommMaxSensorSignalFiltIndexTemp = 0;
    8c9e:	10 92 ec 04 	sts	0x04EC, r1
	memset(irCommMaxSensorSignalFiltTemp, 0xFF, 80);
    8ca2:	80 e7       	ldi	r24, 0x70	; 112
    8ca4:	95 e0       	ldi	r25, 0x05	; 5
    8ca6:	6f ef       	ldi	r22, 0xFF	; 255
    8ca8:	70 e0       	ldi	r23, 0x00	; 0
    8caa:	40 e5       	ldi	r20, 0x50	; 80
    8cac:	50 e0       	ldi	r21, 0x00	; 0
    8cae:	0e 94 6c 54 	call	0xa8d8	; 0xa8d8 <memset>
	irCommMaxSensorSignalIndexTemp = 0;
    8cb2:	10 92 eb 04 	sts	0x04EB, r1
	memset(irCommMaxSensorSignalTemp, 0xFF, 80);
    8cb6:	86 e6       	ldi	r24, 0x66	; 102
    8cb8:	98 e0       	ldi	r25, 0x08	; 8
    8cba:	6f ef       	ldi	r22, 0xFF	; 255
    8cbc:	70 e0       	ldi	r23, 0x00	; 0
    8cbe:	40 e5       	ldi	r20, 0x50	; 80
    8cc0:	50 e0       	ldi	r21, 0x00	; 0
    8cc2:	0e 94 6c 54 	call	0xa8d8	; 0xa8d8 <memset>
	irCommProxMeanIndexTemp = 0;
    8cc6:	10 92 ef 04 	sts	0x04EF, r1
	memset(irCommProxMeanTemp, 0xFF, 4);
    8cca:	e0 92 68 05 	sts	0x0568, r14
    8cce:	f0 92 69 05 	sts	0x0569, r15
    8cd2:	00 93 6a 05 	sts	0x056A, r16
    8cd6:	10 93 6b 05 	sts	0x056B, r17
	irCommComputeShiftIndexTemp = 0;
    8cda:	10 92 f6 04 	sts	0x04F6, r1
	memset(irCommComputeShiftTemp, 0xFF, 2);
    8cde:	d0 93 66 05 	sts	0x0566, r29
    8ce2:	c0 93 65 05 	sts	0x0565, r28
	irCommShiftCountIndexTemp = 0;
    8ce6:	10 92 f3 04 	sts	0x04F3, r1
	memset(irCommShiftCountTemp, 0xFF, 2);
    8cea:	d0 93 79 0b 	sts	0x0B79, r29
    8cee:	c0 93 78 0b 	sts	0x0B78, r28
	irCommRxPeakHighToLowIndexTemp = 0;
    8cf2:	10 92 f7 04 	sts	0x04F7, r1
	memset(irCommRxPeakHighToLowTemp, 0xFF, 2);
    8cf6:	d0 93 c3 05 	sts	0x05C3, r29
    8cfa:	c0 93 c2 05 	sts	0x05C2, r28
	irCommRxStartPeakDurationIndexTemp = 0;
    8cfe:	10 92 f8 04 	sts	0x04F8, r1
	memset(irCommRxStartPeakDurationTemp, 0xFF, 2);
    8d02:	d0 93 05 07 	sts	0x0705, r29
    8d06:	c0 93 04 07 	sts	0x0704, r28
	irCommStartDiffIndexTemp = 0;
    8d0a:	10 92 f5 04 	sts	0x04F5, r1
	memset(irCommSyncStateTemp, 0xFF, 2);
    8d0e:	d0 93 64 05 	sts	0x0564, r29
    8d12:	c0 93 63 05 	sts	0x0563, r28
	irCommSyncStateIndexTemp = 0;
    8d16:	10 92 fb 04 	sts	0x04FB, r1
	memset(irCommBitsSignalTemp, 0xFF, 400);
    8d1a:	82 e9       	ldi	r24, 0x92	; 146
    8d1c:	99 e0       	ldi	r25, 0x09	; 9
    8d1e:	6f ef       	ldi	r22, 0xFF	; 255
    8d20:	70 e0       	ldi	r23, 0x00	; 0
    8d22:	40 e9       	ldi	r20, 0x90	; 144
    8d24:	51 e0       	ldi	r21, 0x01	; 1
    8d26:	0e 94 6c 54 	call	0xa8d8	; 0xa8d8 <memset>
	irCommBitsSignalIndexTemp = 0;
    8d2a:	10 92 fc 04 	sts	0x04FC, r1
	memset(irCommRxBitReceivedTemp, 0xFF, 10);
    8d2e:	88 e5       	ldi	r24, 0x58	; 88
    8d30:	98 e0       	ldi	r25, 0x08	; 8
    8d32:	6f ef       	ldi	r22, 0xFF	; 255
    8d34:	70 e0       	ldi	r23, 0x00	; 0
    8d36:	4a e0       	ldi	r20, 0x0A	; 10
    8d38:	50 e0       	ldi	r21, 0x00	; 0
    8d3a:	0e 94 6c 54 	call	0xa8d8	; 0xa8d8 <memset>
	irCommRxBitReceivedIndexTemp = 0;
    8d3e:	10 92 fd 04 	sts	0x04FD, r1
	
	
}
    8d42:	df 91       	pop	r29
    8d44:	cf 91       	pop	r28
    8d46:	1f 91       	pop	r17
    8d48:	0f 91       	pop	r16
    8d4a:	ff 90       	pop	r15
    8d4c:	ef 90       	pop	r14
    8d4e:	08 95       	ret

00008d50 <irCommTasks>:

void irCommTasks() {
    8d50:	2f 92       	push	r2
    8d52:	3f 92       	push	r3
    8d54:	5f 92       	push	r5
    8d56:	6f 92       	push	r6
    8d58:	7f 92       	push	r7
    8d5a:	8f 92       	push	r8
    8d5c:	9f 92       	push	r9
    8d5e:	af 92       	push	r10
    8d60:	bf 92       	push	r11
    8d62:	cf 92       	push	r12
    8d64:	df 92       	push	r13
    8d66:	ef 92       	push	r14
    8d68:	ff 92       	push	r15
    8d6a:	0f 93       	push	r16
    8d6c:	1f 93       	push	r17
    8d6e:	cf 93       	push	r28
    8d70:	df 93       	push	r29
	int i = 0;

	if(irCommMode==IRCOMM_MODE_RECEIVE) {
    8d72:	00 91 d6 04 	lds	r16, 0x04D6
    8d76:	01 30       	cpi	r16, 0x01	; 1
    8d78:	09 f4       	brne	.+2      	; 0x8d7c <irCommTasks+0x2c>
    8d7a:	cd c0       	rjmp	.+410    	; 0x8f16 <irCommTasks+0x1c6>
			case IRCOMM_RX_STOP:
				break;
					
		}

	} else if(irCommMode==IRCOMM_MODE_TRANSMIT) {
    8d7c:	02 30       	cpi	r16, 0x02	; 2
    8d7e:	91 f0       	breq	.+36     	; 0x8da4 <irCommTasks+0x54>

		}

	}

}
    8d80:	df 91       	pop	r29
    8d82:	cf 91       	pop	r28
    8d84:	1f 91       	pop	r17
    8d86:	0f 91       	pop	r16
    8d88:	ff 90       	pop	r15
    8d8a:	ef 90       	pop	r14
    8d8c:	df 90       	pop	r13
    8d8e:	cf 90       	pop	r12
    8d90:	bf 90       	pop	r11
    8d92:	af 90       	pop	r10
    8d94:	9f 90       	pop	r9
    8d96:	8f 90       	pop	r8
    8d98:	7f 90       	pop	r7
    8d9a:	6f 90       	pop	r6
    8d9c:	5f 90       	pop	r5
    8d9e:	3f 90       	pop	r3
    8da0:	2f 90       	pop	r2
    8da2:	08 95       	ret
					
		}

	} else if(irCommMode==IRCOMM_MODE_TRANSMIT) {

		switch(irCommState) {
    8da4:	80 91 d7 04 	lds	r24, 0x04D7
    8da8:	82 30       	cpi	r24, 0x02	; 2
    8daa:	09 f4       	brne	.+2      	; 0x8dae <irCommTasks+0x5e>
    8dac:	f0 c1       	rjmp	.+992    	; 0x918e <irCommTasks+0x43e>
    8dae:	85 30       	cpi	r24, 0x05	; 5
    8db0:	39 f7       	brne	.-50     	; 0x8d80 <irCommTasks+0x30>
				break;

			case IRCOMM_TX_PREPARE_TRANSMISSION:				
				//updateBlueLed(255);
				//updateBlueLed(0);
				irCommTickCounter = getTime100MicroSec()-irCommTickCounter2;
    8db2:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
    8db6:	20 91 df 04 	lds	r18, 0x04DF
    8dba:	30 91 e0 04 	lds	r19, 0x04E0
    8dbe:	40 91 e1 04 	lds	r20, 0x04E1
    8dc2:	50 91 e2 04 	lds	r21, 0x04E2
    8dc6:	62 1b       	sub	r22, r18
    8dc8:	73 0b       	sbc	r23, r19
    8dca:	84 0b       	sbc	r24, r20
    8dcc:	95 0b       	sbc	r25, r21
    8dce:	60 93 db 04 	sts	0x04DB, r22
    8dd2:	70 93 dc 04 	sts	0x04DC, r23
    8dd6:	80 93 dd 04 	sts	0x04DD, r24
    8dda:	90 93 de 04 	sts	0x04DE, r25
				irCommTickCounter2 = getTime100MicroSec();
    8dde:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
    8de2:	60 93 df 04 	sts	0x04DF, r22
    8de6:	70 93 e0 04 	sts	0x04E0, r23
    8dea:	80 93 e1 04 	sts	0x04E1, r24
    8dee:	90 93 e2 04 	sts	0x04E2, r25
				irCommTxBitToTransmit[0] = 2;	// start bit 1
    8df2:	00 93 4d 05 	sts	0x054D, r16
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
    8df6:	83 e0       	ldi	r24, 0x03	; 3
    8df8:	80 93 4e 05 	sts	0x054E, r24
    8dfc:	80 91 1e 05 	lds	r24, 0x051E
    8e00:	90 e0       	ldi	r25, 0x00	; 0
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    8e02:	9c 01       	movw	r18, r24
    8e04:	21 70       	andi	r18, 0x01	; 1
    8e06:	30 70       	andi	r19, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    8e08:	20 93 56 05 	sts	0x0556, r18
	irCommRxBitReceivedIndexTemp = 0;
	
	
}

void irCommTasks() {
    8e0c:	41 e0       	ldi	r20, 0x01	; 1
    8e0e:	21 30       	cpi	r18, 0x01	; 1
    8e10:	31 05       	cpc	r19, r1
    8e12:	09 f0       	breq	.+2      	; 0x8e16 <irCommTasks+0xc6>
    8e14:	40 e0       	ldi	r20, 0x00	; 0
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    8e16:	9c 01       	movw	r18, r24
    8e18:	35 95       	asr	r19
    8e1a:	27 95       	ror	r18
    8e1c:	21 70       	andi	r18, 0x01	; 1
    8e1e:	30 70       	andi	r19, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    8e20:	20 93 55 05 	sts	0x0555, r18
					if(irCommTempValue==1) {
    8e24:	21 30       	cpi	r18, 0x01	; 1
    8e26:	31 05       	cpc	r19, r1
    8e28:	09 f4       	brne	.+2      	; 0x8e2c <irCommTasks+0xdc>
    8e2a:	b9 c6       	rjmp	.+3442   	; 0x9b9e <irCommTasks+0xe4e>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    8e2c:	9c 01       	movw	r18, r24
    8e2e:	35 95       	asr	r19
    8e30:	27 95       	ror	r18
    8e32:	35 95       	asr	r19
    8e34:	27 95       	ror	r18
    8e36:	21 70       	andi	r18, 0x01	; 1
    8e38:	30 70       	andi	r19, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    8e3a:	20 93 54 05 	sts	0x0554, r18
					if(irCommTempValue==1) {
    8e3e:	21 30       	cpi	r18, 0x01	; 1
    8e40:	31 05       	cpc	r19, r1
    8e42:	09 f4       	brne	.+2      	; 0x8e46 <irCommTasks+0xf6>
    8e44:	aa c6       	rjmp	.+3412   	; 0x9b9a <irCommTasks+0xe4a>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    8e46:	9c 01       	movw	r18, r24
    8e48:	35 95       	asr	r19
    8e4a:	27 95       	ror	r18
    8e4c:	35 95       	asr	r19
    8e4e:	27 95       	ror	r18
    8e50:	35 95       	asr	r19
    8e52:	27 95       	ror	r18
    8e54:	21 70       	andi	r18, 0x01	; 1
    8e56:	30 70       	andi	r19, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    8e58:	20 93 53 05 	sts	0x0553, r18
					if(irCommTempValue==1) {
    8e5c:	21 30       	cpi	r18, 0x01	; 1
    8e5e:	31 05       	cpc	r19, r1
    8e60:	09 f4       	brne	.+2      	; 0x8e64 <irCommTasks+0x114>
    8e62:	99 c6       	rjmp	.+3378   	; 0x9b96 <irCommTasks+0xe46>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    8e64:	9c 01       	movw	r18, r24
    8e66:	35 95       	asr	r19
    8e68:	27 95       	ror	r18
    8e6a:	35 95       	asr	r19
    8e6c:	27 95       	ror	r18
    8e6e:	35 95       	asr	r19
    8e70:	27 95       	ror	r18
    8e72:	35 95       	asr	r19
    8e74:	27 95       	ror	r18
    8e76:	21 70       	andi	r18, 0x01	; 1
    8e78:	30 70       	andi	r19, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    8e7a:	20 93 52 05 	sts	0x0552, r18
					if(irCommTempValue==1) {
    8e7e:	21 30       	cpi	r18, 0x01	; 1
    8e80:	31 05       	cpc	r19, r1
    8e82:	09 f4       	brne	.+2      	; 0x8e86 <irCommTasks+0x136>
    8e84:	86 c6       	rjmp	.+3340   	; 0x9b92 <irCommTasks+0xe42>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    8e86:	9c 01       	movw	r18, r24
    8e88:	35 95       	asr	r19
    8e8a:	27 95       	ror	r18
    8e8c:	35 95       	asr	r19
    8e8e:	27 95       	ror	r18
    8e90:	35 95       	asr	r19
    8e92:	27 95       	ror	r18
    8e94:	35 95       	asr	r19
    8e96:	27 95       	ror	r18
    8e98:	35 95       	asr	r19
    8e9a:	27 95       	ror	r18
    8e9c:	21 70       	andi	r18, 0x01	; 1
    8e9e:	30 70       	andi	r19, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    8ea0:	20 93 51 05 	sts	0x0551, r18
					if(irCommTempValue==1) {
    8ea4:	21 30       	cpi	r18, 0x01	; 1
    8ea6:	31 05       	cpc	r19, r1
    8ea8:	09 f4       	brne	.+2      	; 0x8eac <irCommTasks+0x15c>
    8eaa:	87 c6       	rjmp	.+3342   	; 0x9bba <irCommTasks+0xe6a>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    8eac:	9c 01       	movw	r18, r24
    8eae:	02 2e       	mov	r0, r18
    8eb0:	23 2f       	mov	r18, r19
    8eb2:	00 0c       	add	r0, r0
    8eb4:	22 1f       	adc	r18, r18
    8eb6:	33 0b       	sbc	r19, r19
    8eb8:	00 0c       	add	r0, r0
    8eba:	22 1f       	adc	r18, r18
    8ebc:	33 1f       	adc	r19, r19
    8ebe:	21 70       	andi	r18, 0x01	; 1
    8ec0:	30 70       	andi	r19, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    8ec2:	20 93 50 05 	sts	0x0550, r18
					if(irCommTempValue==1) {
    8ec6:	21 30       	cpi	r18, 0x01	; 1
    8ec8:	31 05       	cpc	r19, r1
    8eca:	09 f4       	brne	.+2      	; 0x8ece <irCommTasks+0x17e>
    8ecc:	74 c6       	rjmp	.+3304   	; 0x9bb6 <irCommTasks+0xe66>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    8ece:	88 0f       	add	r24, r24
    8ed0:	89 2f       	mov	r24, r25
    8ed2:	88 1f       	adc	r24, r24
    8ed4:	99 0b       	sbc	r25, r25
    8ed6:	91 95       	neg	r25
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    8ed8:	80 93 4f 05 	sts	0x054F, r24
					if(irCommTempValue==1) {
    8edc:	81 30       	cpi	r24, 0x01	; 1
    8ede:	91 05       	cpc	r25, r1
    8ee0:	09 f4       	brne	.+2      	; 0x8ee4 <irCommTasks+0x194>
    8ee2:	55 c6       	rjmp	.+3242   	; 0x9b8e <irCommTasks+0xe3e>
						irCommTxCrc++;
    8ee4:	90 93 d9 04 	sts	0x04D9, r25
    8ee8:	80 93 d8 04 	sts	0x04D8, r24
					}
					//irCommTxBitToTransmit[9-i] = 2;
				}
				irCommTxCrc = irCommTxCrc % 4;
    8eec:	43 70       	andi	r20, 0x03	; 3
				irCommTxCrc = 4 - irCommTxCrc;
    8eee:	84 e0       	ldi	r24, 0x04	; 4
    8ef0:	84 1b       	sub	r24, r20
    8ef2:	80 93 24 05 	sts	0x0524, r24
				irCommTxBitToTransmit[10] = (irCommTxCrc>>1)&0x01;
    8ef6:	98 2f       	mov	r25, r24
    8ef8:	96 95       	lsr	r25
    8efa:	91 70       	andi	r25, 0x01	; 1
    8efc:	90 93 57 05 	sts	0x0557, r25
				irCommTxBitToTransmit[11] = irCommTxCrc&0x01;	
    8f00:	81 70       	andi	r24, 0x01	; 1
    8f02:	80 93 58 05 	sts	0x0558, r24
				irCommTxBitCount = 0;							
    8f06:	10 92 25 05 	sts	0x0525, r1
				irCommTxPulseState = 0;	
    8f0a:	10 92 26 05 	sts	0x0526, r1
				irCommState = IRCOMM_TX_COMPUTE_TIMINGS;				
    8f0e:	82 e0       	ldi	r24, 0x02	; 2
    8f10:	80 93 d7 04 	sts	0x04D7, r24
				break;
    8f14:	35 cf       	rjmp	.-406    	; 0x8d80 <irCommTasks+0x30>
void irCommTasks() {
	int i = 0;

	if(irCommMode==IRCOMM_MODE_RECEIVE) {

		switch(irCommState) {
    8f16:	10 91 d7 04 	lds	r17, 0x04D7
    8f1a:	13 30       	cpi	r17, 0x03	; 3
    8f1c:	09 f4       	brne	.+2      	; 0x8f20 <irCommTasks+0x1d0>
    8f1e:	00 c2       	rjmp	.+1024   	; 0x9320 <irCommTasks+0x5d0>
    8f20:	14 30       	cpi	r17, 0x04	; 4
    8f22:	08 f0       	brcs	.+2      	; 0x8f26 <irCommTasks+0x1d6>
    8f24:	63 c1       	rjmp	.+710    	; 0x91ec <irCommTasks+0x49c>
    8f26:	11 30       	cpi	r17, 0x01	; 1
    8f28:	09 f4       	brne	.+2      	; 0x8f2c <irCommTasks+0x1dc>
    8f2a:	9c c5       	rjmp	.+2872   	; 0x9a64 <irCommTasks+0xd14>
    8f2c:	12 30       	cpi	r17, 0x02	; 2
    8f2e:	09 f0       	breq	.+2      	; 0x8f32 <irCommTasks+0x1e2>
    8f30:	27 cf       	rjmp	.-434    	; 0x8d80 <irCommTasks+0x30>
					}					
				}
				break;

			case IRCOMM_RX_MAX_SENSOR_STATE:				
				irCommRxMaxDiff = -1;
    8f32:	8f ef       	ldi	r24, 0xFF	; 255
    8f34:	9f ef       	ldi	r25, 0xFF	; 255
    8f36:	90 93 63 08 	sts	0x0863, r25
    8f3a:	80 93 62 08 	sts	0x0862, r24
    			irCommRxMaxSensor = -1;
    8f3e:	90 93 76 0b 	sts	0x0B76, r25
    8f42:	80 93 75 0b 	sts	0x0B75, r24
    8f46:	a0 91 43 05 	lds	r26, 0x0543
    8f4a:	b0 91 44 05 	lds	r27, 0x0544
    8f4e:	e0 91 2f 05 	lds	r30, 0x052F
    8f52:	f0 91 30 05 	lds	r31, 0x0530
				for(i=0; i<8; i++) {
					if ((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) > irCommRxMaxDiff) {
    8f56:	8d 91       	ld	r24, X+
    8f58:	9c 91       	ld	r25, X
    8f5a:	11 97       	sbiw	r26, 0x01	; 1
    8f5c:	20 81       	ld	r18, Z
    8f5e:	31 81       	ldd	r19, Z+1	; 0x01
    8f60:	82 1b       	sub	r24, r18
    8f62:	93 0b       	sbc	r25, r19
    8f64:	97 fd       	sbrc	r25, 7
    8f66:	08 c0       	rjmp	.+16     	; 0x8f78 <irCommTasks+0x228>
						irCommRxMaxDiff = irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i];
    8f68:	90 93 63 08 	sts	0x0863, r25
    8f6c:	80 93 62 08 	sts	0x0862, r24
						irCommRxMaxSensor = i;
    8f70:	10 92 76 0b 	sts	0x0B76, r1
    8f74:	10 92 75 0b 	sts	0x0B75, r1

			case IRCOMM_RX_MAX_SENSOR_STATE:				
				irCommRxMaxDiff = -1;
    			irCommRxMaxSensor = -1;
				for(i=0; i<8; i++) {
					if ((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) > irCommRxMaxDiff) {
    8f78:	12 96       	adiw	r26, 0x02	; 2
    8f7a:	2d 91       	ld	r18, X+
    8f7c:	3c 91       	ld	r19, X
    8f7e:	13 97       	sbiw	r26, 0x03	; 3
    8f80:	82 81       	ldd	r24, Z+2	; 0x02
    8f82:	93 81       	ldd	r25, Z+3	; 0x03
    8f84:	28 1b       	sub	r18, r24
    8f86:	39 0b       	sbc	r19, r25
    8f88:	80 91 62 08 	lds	r24, 0x0862
    8f8c:	90 91 63 08 	lds	r25, 0x0863
    8f90:	82 17       	cp	r24, r18
    8f92:	93 07       	cpc	r25, r19
    8f94:	5c f4       	brge	.+22     	; 0x8fac <irCommTasks+0x25c>
						irCommRxMaxDiff = irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i];
    8f96:	30 93 63 08 	sts	0x0863, r19
    8f9a:	20 93 62 08 	sts	0x0862, r18
						irCommRxMaxSensor = i;
    8f9e:	81 e0       	ldi	r24, 0x01	; 1
    8fa0:	90 e0       	ldi	r25, 0x00	; 0
    8fa2:	90 93 76 0b 	sts	0x0B76, r25
    8fa6:	80 93 75 0b 	sts	0x0B75, r24
    8faa:	c9 01       	movw	r24, r18

			case IRCOMM_RX_MAX_SENSOR_STATE:				
				irCommRxMaxDiff = -1;
    			irCommRxMaxSensor = -1;
				for(i=0; i<8; i++) {
					if ((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) > irCommRxMaxDiff) {
    8fac:	14 96       	adiw	r26, 0x04	; 4
    8fae:	2d 91       	ld	r18, X+
    8fb0:	3c 91       	ld	r19, X
    8fb2:	15 97       	sbiw	r26, 0x05	; 5
    8fb4:	44 81       	ldd	r20, Z+4	; 0x04
    8fb6:	55 81       	ldd	r21, Z+5	; 0x05
    8fb8:	24 1b       	sub	r18, r20
    8fba:	35 0b       	sbc	r19, r21
    8fbc:	82 17       	cp	r24, r18
    8fbe:	93 07       	cpc	r25, r19
    8fc0:	5c f4       	brge	.+22     	; 0x8fd8 <irCommTasks+0x288>
						irCommRxMaxDiff = irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i];
    8fc2:	30 93 63 08 	sts	0x0863, r19
    8fc6:	20 93 62 08 	sts	0x0862, r18
						irCommRxMaxSensor = i;
    8fca:	82 e0       	ldi	r24, 0x02	; 2
    8fcc:	90 e0       	ldi	r25, 0x00	; 0
    8fce:	90 93 76 0b 	sts	0x0B76, r25
    8fd2:	80 93 75 0b 	sts	0x0B75, r24
    8fd6:	c9 01       	movw	r24, r18

			case IRCOMM_RX_MAX_SENSOR_STATE:				
				irCommRxMaxDiff = -1;
    			irCommRxMaxSensor = -1;
				for(i=0; i<8; i++) {
					if ((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) > irCommRxMaxDiff) {
    8fd8:	16 96       	adiw	r26, 0x06	; 6
    8fda:	2d 91       	ld	r18, X+
    8fdc:	3c 91       	ld	r19, X
    8fde:	17 97       	sbiw	r26, 0x07	; 7
    8fe0:	46 81       	ldd	r20, Z+6	; 0x06
    8fe2:	57 81       	ldd	r21, Z+7	; 0x07
    8fe4:	24 1b       	sub	r18, r20
    8fe6:	35 0b       	sbc	r19, r21
    8fe8:	82 17       	cp	r24, r18
    8fea:	93 07       	cpc	r25, r19
    8fec:	5c f4       	brge	.+22     	; 0x9004 <irCommTasks+0x2b4>
						irCommRxMaxDiff = irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i];
    8fee:	30 93 63 08 	sts	0x0863, r19
    8ff2:	20 93 62 08 	sts	0x0862, r18
						irCommRxMaxSensor = i;
    8ff6:	83 e0       	ldi	r24, 0x03	; 3
    8ff8:	90 e0       	ldi	r25, 0x00	; 0
    8ffa:	90 93 76 0b 	sts	0x0B76, r25
    8ffe:	80 93 75 0b 	sts	0x0B75, r24
    9002:	c9 01       	movw	r24, r18

			case IRCOMM_RX_MAX_SENSOR_STATE:				
				irCommRxMaxDiff = -1;
    			irCommRxMaxSensor = -1;
				for(i=0; i<8; i++) {
					if ((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) > irCommRxMaxDiff) {
    9004:	18 96       	adiw	r26, 0x08	; 8
    9006:	2d 91       	ld	r18, X+
    9008:	3c 91       	ld	r19, X
    900a:	19 97       	sbiw	r26, 0x09	; 9
    900c:	40 85       	ldd	r20, Z+8	; 0x08
    900e:	51 85       	ldd	r21, Z+9	; 0x09
    9010:	24 1b       	sub	r18, r20
    9012:	35 0b       	sbc	r19, r21
    9014:	82 17       	cp	r24, r18
    9016:	93 07       	cpc	r25, r19
    9018:	5c f4       	brge	.+22     	; 0x9030 <irCommTasks+0x2e0>
						irCommRxMaxDiff = irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i];
    901a:	30 93 63 08 	sts	0x0863, r19
    901e:	20 93 62 08 	sts	0x0862, r18
						irCommRxMaxSensor = i;
    9022:	84 e0       	ldi	r24, 0x04	; 4
    9024:	90 e0       	ldi	r25, 0x00	; 0
    9026:	90 93 76 0b 	sts	0x0B76, r25
    902a:	80 93 75 0b 	sts	0x0B75, r24
    902e:	c9 01       	movw	r24, r18

			case IRCOMM_RX_MAX_SENSOR_STATE:				
				irCommRxMaxDiff = -1;
    			irCommRxMaxSensor = -1;
				for(i=0; i<8; i++) {
					if ((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) > irCommRxMaxDiff) {
    9030:	1a 96       	adiw	r26, 0x0a	; 10
    9032:	2d 91       	ld	r18, X+
    9034:	3c 91       	ld	r19, X
    9036:	1b 97       	sbiw	r26, 0x0b	; 11
    9038:	42 85       	ldd	r20, Z+10	; 0x0a
    903a:	53 85       	ldd	r21, Z+11	; 0x0b
    903c:	24 1b       	sub	r18, r20
    903e:	35 0b       	sbc	r19, r21
    9040:	82 17       	cp	r24, r18
    9042:	93 07       	cpc	r25, r19
    9044:	5c f4       	brge	.+22     	; 0x905c <irCommTasks+0x30c>
						irCommRxMaxDiff = irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i];
    9046:	30 93 63 08 	sts	0x0863, r19
    904a:	20 93 62 08 	sts	0x0862, r18
						irCommRxMaxSensor = i;
    904e:	85 e0       	ldi	r24, 0x05	; 5
    9050:	90 e0       	ldi	r25, 0x00	; 0
    9052:	90 93 76 0b 	sts	0x0B76, r25
    9056:	80 93 75 0b 	sts	0x0B75, r24
    905a:	c9 01       	movw	r24, r18

			case IRCOMM_RX_MAX_SENSOR_STATE:				
				irCommRxMaxDiff = -1;
    			irCommRxMaxSensor = -1;
				for(i=0; i<8; i++) {
					if ((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) > irCommRxMaxDiff) {
    905c:	1c 96       	adiw	r26, 0x0c	; 12
    905e:	2d 91       	ld	r18, X+
    9060:	3c 91       	ld	r19, X
    9062:	1d 97       	sbiw	r26, 0x0d	; 13
    9064:	44 85       	ldd	r20, Z+12	; 0x0c
    9066:	55 85       	ldd	r21, Z+13	; 0x0d
    9068:	24 1b       	sub	r18, r20
    906a:	35 0b       	sbc	r19, r21
    906c:	82 17       	cp	r24, r18
    906e:	93 07       	cpc	r25, r19
    9070:	5c f4       	brge	.+22     	; 0x9088 <irCommTasks+0x338>
						irCommRxMaxDiff = irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i];
    9072:	30 93 63 08 	sts	0x0863, r19
    9076:	20 93 62 08 	sts	0x0862, r18
						irCommRxMaxSensor = i;
    907a:	86 e0       	ldi	r24, 0x06	; 6
    907c:	90 e0       	ldi	r25, 0x00	; 0
    907e:	90 93 76 0b 	sts	0x0B76, r25
    9082:	80 93 75 0b 	sts	0x0B75, r24
    9086:	c9 01       	movw	r24, r18

			case IRCOMM_RX_MAX_SENSOR_STATE:				
				irCommRxMaxDiff = -1;
    			irCommRxMaxSensor = -1;
				for(i=0; i<8; i++) {
					if ((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) > irCommRxMaxDiff) {
    9088:	1e 96       	adiw	r26, 0x0e	; 14
    908a:	2d 91       	ld	r18, X+
    908c:	3c 91       	ld	r19, X
    908e:	1f 97       	sbiw	r26, 0x0f	; 15
    9090:	46 85       	ldd	r20, Z+14	; 0x0e
    9092:	57 85       	ldd	r21, Z+15	; 0x0f
    9094:	24 1b       	sub	r18, r20
    9096:	35 0b       	sbc	r19, r21
    9098:	82 17       	cp	r24, r18
    909a:	93 07       	cpc	r25, r19
    909c:	5c f4       	brge	.+22     	; 0x90b4 <irCommTasks+0x364>
						irCommRxMaxDiff = irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i];
    909e:	30 93 63 08 	sts	0x0863, r19
    90a2:	20 93 62 08 	sts	0x0862, r18
						irCommRxMaxSensor = i;
    90a6:	87 e0       	ldi	r24, 0x07	; 7
    90a8:	90 e0       	ldi	r25, 0x00	; 0
    90aa:	90 93 76 0b 	sts	0x0B76, r25
    90ae:	80 93 75 0b 	sts	0x0B75, r24
    90b2:	c9 01       	movw	r24, r18
					}
				}

				if(irCommRxMaxSensorIndexTemp>1) {
    90b4:	20 91 ed 04 	lds	r18, 0x04ED
    90b8:	22 30       	cpi	r18, 0x02	; 2
    90ba:	08 f4       	brcc	.+2      	; 0x90be <irCommTasks+0x36e>
    90bc:	fe c5       	rjmp	.+3068   	; 0x9cba <irCommTasks+0xf6a>
    90be:	42 e0       	ldi	r20, 0x02	; 2
    90c0:	c1 e0       	ldi	r28, 0x01	; 1
    90c2:	d0 e0       	ldi	r29, 0x00	; 0
					irCommRxMaxSensorIndexTemp = 1;
					//updateBlueLed(0);
				}
				irCommRxMaxSensorTemp[irCommRxMaxSensorIndexTemp] = irCommRxMaxSensor;
    90c4:	20 91 75 0b 	lds	r18, 0x0B75
    90c8:	30 91 76 0b 	lds	r19, 0x0B76
    90cc:	cc 0f       	add	r28, r28
    90ce:	dd 1f       	adc	r29, r29
    90d0:	cc 5d       	subi	r28, 0xDC	; 220
    90d2:	d4 4f       	sbci	r29, 0xF4	; 244
    90d4:	39 83       	std	Y+1, r19	; 0x01
    90d6:	28 83       	st	Y, r18
				irCommRxMaxSensorIndexTemp++;
    90d8:	40 93 ed 04 	sts	0x04ED, r20
					
				if(irCommRxMaxDiffIndexTemp>1) {
    90dc:	40 91 ee 04 	lds	r20, 0x04EE
    90e0:	42 30       	cpi	r20, 0x02	; 2
    90e2:	08 f4       	brcc	.+2      	; 0x90e6 <irCommTasks+0x396>
    90e4:	e6 c5       	rjmp	.+3020   	; 0x9cb2 <irCommTasks+0xf62>
    90e6:	42 e0       	ldi	r20, 0x02	; 2
    90e8:	c1 e0       	ldi	r28, 0x01	; 1
    90ea:	d0 e0       	ldi	r29, 0x00	; 0
					irCommRxMaxDiffIndexTemp = 1;
					//updateBlueLed(0);
				}
				irCommRxMaxDiffTemp[irCommRxMaxDiffIndexTemp] = irCommRxMaxDiff;
    90ec:	cc 0f       	add	r28, r28
    90ee:	dd 1f       	adc	r29, r29
    90f0:	c3 5a       	subi	r28, 0xA3	; 163
    90f2:	d4 4f       	sbci	r29, 0xF4	; 244
    90f4:	99 83       	std	Y+1, r25	; 0x01
    90f6:	88 83       	st	Y, r24
				irCommRxMaxDiffIndexTemp++;
    90f8:	40 93 ee 04 	sts	0x04EE, r20
				
				if(irCommMaxSensorValueCurrIndexTemp>1) {
    90fc:	40 91 f1 04 	lds	r20, 0x04F1
    9100:	42 30       	cpi	r20, 0x02	; 2
    9102:	08 f4       	brcc	.+2      	; 0x9106 <irCommTasks+0x3b6>
    9104:	d1 c5       	rjmp	.+2978   	; 0x9ca8 <irCommTasks+0xf58>
					irCommMaxSensorValueCurrIndexTemp = 1;
    9106:	41 e0       	ldi	r20, 0x01	; 1
    9108:	40 93 f1 04 	sts	0x04F1, r20
    910c:	62 e0       	ldi	r22, 0x02	; 2
    910e:	c1 e0       	ldi	r28, 0x01	; 1
    9110:	d0 e0       	ldi	r29, 0x00	; 0
					//updateBlueLed(0);
				}
				irCommMaxSensorValueCurrTemp[irCommMaxSensorValueCurrIndexTemp] = irCommMaxSensorValueCurr[irCommRxMaxSensor];
    9112:	22 0f       	add	r18, r18
    9114:	33 1f       	adc	r19, r19
    9116:	cc 0f       	add	r28, r28
    9118:	dd 1f       	adc	r29, r29
    911a:	cf 5c       	subi	r28, 0xCF	; 207
    911c:	da 4f       	sbci	r29, 0xFA	; 250
    911e:	a2 0f       	add	r26, r18
    9120:	b3 1f       	adc	r27, r19
    9122:	4d 91       	ld	r20, X+
    9124:	5c 91       	ld	r21, X
    9126:	11 97       	sbiw	r26, 0x01	; 1
    9128:	59 83       	std	Y+1, r21	; 0x01
    912a:	48 83       	st	Y, r20
				irCommMaxSensorValueCurrIndexTemp++;
    912c:	60 93 f1 04 	sts	0x04F1, r22
				
				if(irCommMinSensorValueCurrIndexTemp>1) {
    9130:	40 91 f2 04 	lds	r20, 0x04F2
    9134:	42 30       	cpi	r20, 0x02	; 2
    9136:	08 f4       	brcc	.+2      	; 0x913a <irCommTasks+0x3ea>
    9138:	b3 c5       	rjmp	.+2918   	; 0x9ca0 <irCommTasks+0xf50>
					irCommMinSensorValueCurrIndexTemp = 1;
    913a:	41 e0       	ldi	r20, 0x01	; 1
    913c:	40 93 f2 04 	sts	0x04F2, r20
    9140:	42 e0       	ldi	r20, 0x02	; 2
    9142:	a1 e0       	ldi	r26, 0x01	; 1
    9144:	b0 e0       	ldi	r27, 0x00	; 0
					//updateBlueLed(0);
				}
				irCommMinSensorValueCurrTemp[irCommMinSensorValueCurrIndexTemp] = irCommMinSensorValueCurr[irCommRxMaxSensor];
    9146:	aa 0f       	add	r26, r26
    9148:	bb 1f       	adc	r27, r27
    914a:	a8 5d       	subi	r26, 0xD8	; 216
    914c:	b4 4f       	sbci	r27, 0xF4	; 244
    914e:	e2 0f       	add	r30, r18
    9150:	f3 1f       	adc	r31, r19
    9152:	20 81       	ld	r18, Z
    9154:	31 81       	ldd	r19, Z+1	; 0x01
    9156:	11 96       	adiw	r26, 0x01	; 1
    9158:	3c 93       	st	X, r19
    915a:	2e 93       	st	-X, r18
				irCommMinSensorValueCurrIndexTemp++;			
    915c:	40 93 f2 04 	sts	0x04F2, r20


				//if(irCommRxMaxSensor == -1) {
				//	updateRedLed(0);
				//}
				if(irCommRxMaxDiff >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    9160:	80 35       	cpi	r24, 0x50	; 80
    9162:	91 05       	cpc	r25, r1
    9164:	0c f4       	brge	.+2      	; 0x9168 <irCommTasks+0x418>
    9166:	37 c5       	rjmp	.+2670   	; 0x9bd6 <irCommTasks+0xe86>
					irCommState = IRCOMM_RX_DETECT_START_BIT_STATE;	
    9168:	83 e0       	ldi	r24, 0x03	; 3
    916a:	80 93 d7 04 	sts	0x04D7, r24
					
					if(irCommStateIndexTemp>13) {
    916e:	80 91 fa 04 	lds	r24, 0x04FA
    9172:	8e 30       	cpi	r24, 0x0E	; 14
    9174:	08 f4       	brcc	.+2      	; 0x9178 <irCommTasks+0x428>
    9176:	00 c5       	rjmp	.+2560   	; 0x9b78 <irCommTasks+0xe28>
					irCommStateIndexTemp++;

				} else {
					irCommState = IRCOMM_RX_WAITING_BIT;

					if(irCommStateIndexTemp>13) {
    9178:	8e e0       	ldi	r24, 0x0E	; 14
    917a:	ed e0       	ldi	r30, 0x0D	; 13
    917c:	f0 e0       	ldi	r31, 0x00	; 0
						irCommStateIndexTemp = 13;
						//updateRedLed(0);
					}
					irCommStateTemp[irCommStateIndexTemp] = irCommState;
    917e:	90 91 d7 04 	lds	r25, 0x04D7
    9182:	eb 5c       	subi	r30, 0xCB	; 203
    9184:	fa 4f       	sbci	r31, 0xFA	; 250
    9186:	90 83       	st	Z, r25
					irCommStateIndexTemp++;
    9188:	80 93 fa 04 	sts	0x04FA, r24
    918c:	f9 cd       	rjmp	.-1038   	; 0x8d80 <irCommTasks+0x30>
				irCommState = IRCOMM_TX_COMPUTE_TIMINGS;				
				break;

			case IRCOMM_TX_COMPUTE_TIMINGS:
				//updateBlueLed(255);
				if(irCommTxBitToTransmit[irCommTxBitCount] == 3) {
    918e:	30 91 25 05 	lds	r19, 0x0525
    9192:	e3 2f       	mov	r30, r19
    9194:	f0 e0       	ldi	r31, 0x00	; 0
    9196:	e3 5b       	subi	r30, 0xB3	; 179
    9198:	fa 4f       	sbci	r31, 0xFA	; 250
    919a:	20 81       	ld	r18, Z
    919c:	23 30       	cpi	r18, 0x03	; 3
    919e:	09 f4       	brne	.+2      	; 0x91a2 <irCommTasks+0x452>
    91a0:	00 c5       	rjmp	.+2560   	; 0x9ba2 <irCommTasks+0xe52>
					//updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START2_DURATION;					
					irCommTxSwitchCount = IRCOMM_BIT_START2_SWITCH_COUNT;
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 2) {
    91a2:	22 30       	cpi	r18, 0x02	; 2
    91a4:	09 f4       	brne	.+2      	; 0x91a8 <irCommTasks+0x458>
    91a6:	27 c1       	rjmp	.+590    	; 0x93f6 <irCommTasks+0x6a6>
					//updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START1_DURATION;					
					irCommTxSwitchCount = IRCOMM_BIT_START1_SWITCH_COUNT;
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 1) {
    91a8:	21 30       	cpi	r18, 0x01	; 1
    91aa:	09 f4       	brne	.+2      	; 0x91ae <irCommTasks+0x45e>
    91ac:	42 c5       	rjmp	.+2692   	; 0x9c32 <irCommTasks+0xee2>
					irCommTxDuration = IRCOMM_BIT1_DURATOIN;					
					irCommTxSwitchCount = IRCOMM_BIT1_SWITCH_COUNT;
				} else {
					irCommTxDuration = IRCOMM_BIT0_DURATION;						
    91ae:	8e e1       	ldi	r24, 0x1E	; 30
    91b0:	90 e0       	ldi	r25, 0x00	; 0
    91b2:	90 93 28 05 	sts	0x0528, r25
    91b6:	80 93 27 05 	sts	0x0527, r24
					irCommTxSwitchCount = IRCOMM_BIT0_SWITCH_COUNT;
    91ba:	88 e0       	ldi	r24, 0x08	; 8
    91bc:	80 93 29 05 	sts	0x0529, r24
				}
				if(irCommTxBitCount == 0) {
    91c0:	33 23       	and	r19, r19
    91c2:	51 f4       	brne	.+20     	; 0x91d8 <irCommTasks+0x488>
					//PORTA = irCommTxSensorMask;
					if(irCommTxSensorGroup==0) {
    91c4:	80 91 2d 05 	lds	r24, 0x052D
    91c8:	88 23       	and	r24, r24
    91ca:	09 f0       	breq	.+2      	; 0x91ce <irCommTasks+0x47e>
    91cc:	f8 c4       	rjmp	.+2544   	; 0x9bbe <irCommTasks+0xe6e>
						PORTA = 0xAA;
    91ce:	8a ea       	ldi	r24, 0xAA	; 170
    91d0:	82 b9       	out	0x02, r24	; 2
					} else {
						PORTA = 0x55;
					}					
					irCommTxPulseState = 1;
    91d2:	81 e0       	ldi	r24, 0x01	; 1
    91d4:	80 93 26 05 	sts	0x0526, r24
				}
				irCommTxDurationCycle = 0;
    91d8:	10 92 2b 05 	sts	0x052B, r1
				irCommTxSwitchCounter = 0;						
    91dc:	10 92 2a 05 	sts	0x052A, r1
				irCommState = IRCOMM_TX_TRANSMIT_BIT;
    91e0:	83 e0       	ldi	r24, 0x03	; 3
    91e2:	80 93 d7 04 	sts	0x04D7, r24
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ1;
    91e6:	80 93 1d 05 	sts	0x051D, r24
    91ea:	ca cd       	rjmp	.-1132   	; 0x8d80 <irCommTasks+0x30>
void irCommTasks() {
	int i = 0;

	if(irCommMode==IRCOMM_MODE_RECEIVE) {

		switch(irCommState) {
    91ec:	17 30       	cpi	r17, 0x07	; 7
    91ee:	09 f4       	brne	.+2      	; 0x91f2 <irCommTasks+0x4a2>
    91f0:	7a c2       	rjmp	.+1268   	; 0x96e6 <irCommTasks+0x996>
    91f2:	18 30       	cpi	r17, 0x08	; 8
    91f4:	09 f4       	brne	.+2      	; 0x91f8 <irCommTasks+0x4a8>
    91f6:	a1 c2       	rjmp	.+1346   	; 0x973a <irCommTasks+0x9ea>
    91f8:	16 30       	cpi	r17, 0x06	; 6
    91fa:	09 f0       	breq	.+2      	; 0x91fe <irCommTasks+0x4ae>
    91fc:	c1 cd       	rjmp	.-1150   	; 0x8d80 <irCommTasks+0x30>
			case IRCOMM_RX_WAITING_BIT:
				break;

			case IRCOMM_RX_READ_BIT:
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
    91fe:	10 92 02 05 	sts	0x0502, r1
    9202:	10 92 03 05 	sts	0x0503, r1
    9206:	10 92 04 05 	sts	0x0504, r1
    920a:	10 92 05 05 	sts	0x0505, r1
				irCommTempMin = 1024;
    920e:	80 e0       	ldi	r24, 0x00	; 0
    9210:	94 e0       	ldi	r25, 0x04	; 4
    9212:	90 93 09 05 	sts	0x0509, r25
    9216:	80 93 08 05 	sts	0x0508, r24
				irCommTempMax = 0;
    921a:	10 92 07 05 	sts	0x0507, r1
    921e:	10 92 06 05 	sts	0x0506, r1
	irCommRxBitReceivedIndexTemp = 0;
	
	
}

void irCommTasks() {
    9222:	80 91 75 0b 	lds	r24, 0x0B75
    9226:	90 91 76 0b 	lds	r25, 0x0B76
    922a:	88 0f       	add	r24, r24
    922c:	99 1f       	adc	r25, r25
    922e:	e0 91 46 08 	lds	r30, 0x0846
    9232:	f0 91 47 08 	lds	r31, 0x0847
    9236:	e8 0f       	add	r30, r24
    9238:	f9 1f       	adc	r31, r25

			case IRCOMM_RX_READ_BIT:
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
				irCommTempMin = 1024;
				irCommTempMax = 0;
    923a:	14 e3       	ldi	r17, 0x34	; 52
    923c:	c1 2e       	mov	r12, r17
    923e:	1b e0       	ldi	r17, 0x0B	; 11
    9240:	d1 2e       	mov	r13, r17
	irCommRxBitReceivedIndexTemp = 0;
	
	
}

void irCommTasks() {
    9242:	e6 01       	movw	r28, r12
    9244:	60 e0       	ldi	r22, 0x00	; 0
    9246:	70 e0       	ldi	r23, 0x00	; 0
    9248:	40 e0       	ldi	r20, 0x00	; 0
    924a:	54 e0       	ldi	r21, 0x04	; 4
    924c:	ee 24       	eor	r14, r14
    924e:	ff 24       	eor	r15, r15
    9250:	87 01       	movw	r16, r14
    9252:	08 c0       	rjmp	.+16     	; 0x9264 <irCommTasks+0x514>
			case IRCOMM_RX_READ_BIT:
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
				irCommTempMin = 1024;
				irCommTempMax = 0;
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    9254:	40 91 08 05 	lds	r20, 0x0508
    9258:	50 91 09 05 	lds	r21, 0x0509
    925c:	60 91 06 05 	lds	r22, 0x0506
    9260:	70 91 07 05 	lds	r23, 0x0507
					irCommMaxSensorSignal[i] = irCommProxValuesCurr[irCommRxMaxSensor+i*8];
    9264:	20 81       	ld	r18, Z
    9266:	31 81       	ldd	r19, Z+1	; 0x01
    9268:	29 93       	st	Y+, r18
    926a:	39 93       	st	Y+, r19
					irCommProxSum += irCommMaxSensorSignal[i];
    926c:	c9 01       	movw	r24, r18
    926e:	aa 27       	eor	r26, r26
    9270:	97 fd       	sbrc	r25, 7
    9272:	a0 95       	com	r26
    9274:	ba 2f       	mov	r27, r26
    9276:	e8 0e       	add	r14, r24
    9278:	f9 1e       	adc	r15, r25
    927a:	0a 1f       	adc	r16, r26
    927c:	1b 1f       	adc	r17, r27
					if(irCommTempMin > irCommMaxSensorSignal[i]) {
    927e:	24 17       	cp	r18, r20
    9280:	35 07       	cpc	r19, r21
    9282:	2c f4       	brge	.+10     	; 0x928e <irCommTasks+0x53e>
						irCommTempMin = irCommMaxSensorSignal[i];
    9284:	30 93 09 05 	sts	0x0509, r19
    9288:	20 93 08 05 	sts	0x0508, r18
    928c:	a9 01       	movw	r20, r18
					}
					if(irCommTempMax < irCommMaxSensorSignal[i]) {
    928e:	62 17       	cp	r22, r18
    9290:	73 07       	cpc	r23, r19
    9292:	2c f4       	brge	.+10     	; 0x929e <irCommTasks+0x54e>
						irCommTempMax = irCommMaxSensorSignal[i];
    9294:	30 93 07 05 	sts	0x0507, r19
    9298:	20 93 06 05 	sts	0x0506, r18
    929c:	b9 01       	movw	r22, r18
    929e:	70 96       	adiw	r30, 0x10	; 16
			case IRCOMM_RX_READ_BIT:
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
				irCommTempMin = 1024;
				irCommTempMax = 0;
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    92a0:	2b e0       	ldi	r18, 0x0B	; 11
    92a2:	cc 35       	cpi	r28, 0x5C	; 92
    92a4:	d2 07       	cpc	r29, r18
    92a6:	b1 f6       	brne	.-84     	; 0x9254 <irCommTasks+0x504>
    92a8:	e0 92 02 05 	sts	0x0502, r14
    92ac:	f0 92 03 05 	sts	0x0503, r15
    92b0:	00 93 04 05 	sts	0x0504, r16
    92b4:	10 93 05 05 	sts	0x0505, r17
					if(irCommTempMax < irCommMaxSensorSignal[i]) {
						irCommTempMax = irCommMaxSensorSignal[i];
					}
				}

				if((irCommTempMax-irCommTempMin) < IRCOMM_DETECTION_AMPLITUDE_THR) {	// error...no significant signal perceived					
    92b8:	64 1b       	sub	r22, r20
    92ba:	75 0b       	sbc	r23, r21
    92bc:	60 35       	cpi	r22, 0x50	; 80
    92be:	71 05       	cpc	r23, r1
    92c0:	0c f4       	brge	.+2      	; 0x92c4 <irCommTasks+0x574>
    92c2:	8b c4       	rjmp	.+2326   	; 0x9bda <irCommTasks+0xe8a>

					resetDebugVariables();
					break;
				}

				irCommProxMean = (int)(irCommProxSum / IRCOMM_SAMPLING_WINDOW);
    92c4:	c8 01       	movw	r24, r16
    92c6:	b7 01       	movw	r22, r14
    92c8:	24 e1       	ldi	r18, 0x14	; 20
    92ca:	30 e0       	ldi	r19, 0x00	; 0
    92cc:	40 e0       	ldi	r20, 0x00	; 0
    92ce:	50 e0       	ldi	r21, 0x00	; 0
    92d0:	0e 94 d1 53 	call	0xa7a2	; 0xa7a2 <__divmodsi4>
    92d4:	b9 01       	movw	r22, r18
    92d6:	30 93 0d 05 	sts	0x050D, r19
    92da:	20 93 0c 05 	sts	0x050C, r18
    92de:	20 91 fc 04 	lds	r18, 0x04FC
    92e2:	0f c0       	rjmp	.+30     	; 0x9302 <irCommTasks+0x5b2>

				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
					irCommMaxSensorSignal[i] -= irCommProxMean;

					if(irCommBitsSignalIndexTemp>199) {
    92e4:	e2 2f       	mov	r30, r18
    92e6:	f0 e0       	ldi	r31, 0x00	; 0
    92e8:	2f 5f       	subi	r18, 0xFF	; 255
						irCommBitsSignalIndexTemp = 199;
						//updateRedLed(0);
					}
					irCommBitsSignalTemp[irCommBitsSignalIndexTemp] = irCommMaxSensorSignal[i];
    92ea:	ee 0f       	add	r30, r30
    92ec:	ff 1f       	adc	r31, r31
    92ee:	ee 56       	subi	r30, 0x6E	; 110
    92f0:	f6 4f       	sbci	r31, 0xF6	; 246
    92f2:	91 83       	std	Z+1, r25	; 0x01
    92f4:	80 83       	st	Z, r24
				}

				irCommProxMean = (int)(irCommProxSum / IRCOMM_SAMPLING_WINDOW);

				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    92f6:	fc e5       	ldi	r31, 0x5C	; 92
    92f8:	cf 16       	cp	r12, r31
    92fa:	fb e0       	ldi	r31, 0x0B	; 11
    92fc:	df 06       	cpc	r13, r31
    92fe:	09 f4       	brne	.+2      	; 0x9302 <irCommTasks+0x5b2>
    9300:	da c3       	rjmp	.+1972   	; 0x9ab6 <irCommTasks+0xd66>
					irCommMaxSensorSignal[i] -= irCommProxMean;
    9302:	e6 01       	movw	r28, r12
    9304:	88 81       	ld	r24, Y
    9306:	99 81       	ldd	r25, Y+1	; 0x01
    9308:	86 1b       	sub	r24, r22
    930a:	97 0b       	sbc	r25, r23
    930c:	f6 01       	movw	r30, r12
    930e:	81 93       	st	Z+, r24
    9310:	91 93       	st	Z+, r25
    9312:	6f 01       	movw	r12, r30

					if(irCommBitsSignalIndexTemp>199) {
    9314:	28 3c       	cpi	r18, 0xC8	; 200
    9316:	30 f3       	brcs	.-52     	; 0x92e4 <irCommTasks+0x594>
    9318:	28 ec       	ldi	r18, 0xC8	; 200
    931a:	e7 ec       	ldi	r30, 0xC7	; 199
    931c:	f0 e0       	ldi	r31, 0x00	; 0
    931e:	e5 cf       	rjmp	.-54     	; 0x92ea <irCommTasks+0x59a>
												
				break;

			case IRCOMM_RX_DETECT_START_BIT_STATE:
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
    9320:	10 92 02 05 	sts	0x0502, r1
    9324:	10 92 03 05 	sts	0x0503, r1
    9328:	10 92 04 05 	sts	0x0504, r1
    932c:	10 92 05 05 	sts	0x0505, r1
				irCommTempMin = 1024;
    9330:	80 e0       	ldi	r24, 0x00	; 0
    9332:	94 e0       	ldi	r25, 0x04	; 4
    9334:	90 93 09 05 	sts	0x0509, r25
    9338:	80 93 08 05 	sts	0x0508, r24
				irCommTempMax = 0;
    933c:	10 92 07 05 	sts	0x0507, r1
    9340:	10 92 06 05 	sts	0x0506, r1
				irCommShiftCount = 0;
    9344:	10 92 0a 05 	sts	0x050A, r1
				irCommComputeShift = 1;												
    9348:	00 93 0b 05 	sts	0x050B, r16
    934c:	e0 90 eb 04 	lds	r14, 0x04EB
    9350:	60 e0       	ldi	r22, 0x00	; 0
    9352:	70 e0       	ldi	r23, 0x00	; 0
    9354:	cb 01       	movw	r24, r22
	irCommRxBitReceivedIndexTemp = 0;
	
	
}

void irCommTasks() {
    9356:	20 91 75 0b 	lds	r18, 0x0B75
    935a:	30 91 76 0b 	lds	r19, 0x0B76
    935e:	22 0f       	add	r18, r18
    9360:	33 1f       	adc	r19, r19
    9362:	a0 91 46 08 	lds	r26, 0x0846
    9366:	b0 91 47 08 	lds	r27, 0x0847
    936a:	a2 0f       	add	r26, r18
    936c:	b3 1f       	adc	r27, r19
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
				irCommTempMin = 1024;
				irCommTempMax = 0;
				irCommShiftCount = 0;
				irCommComputeShift = 1;												
    936e:	04 e3       	ldi	r16, 0x34	; 52
    9370:	1b e0       	ldi	r17, 0x0B	; 11
	irCommRxBitReceivedIndexTemp = 0;
	
	
}

void irCommTasks() {
    9372:	f8 e2       	ldi	r31, 0x28	; 40
    9374:	8f 2e       	mov	r8, r31
    9376:	91 2c       	mov	r9, r1
    9378:	80 0e       	add	r8, r16
    937a:	91 1e       	adc	r9, r17
    937c:	18 01       	movw	r2, r16
    937e:	cc 24       	eor	r12, r12
    9380:	c3 94       	inc	r12
    9382:	ff 24       	eor	r15, r15
							} else {
								//updateGreenLed(0);
							}
							irCommTempMin = irCommMaxSensorSignal[i];	// otherwise I cannot detect spike of one sample (peakDuration=1), related to sensors sampling
							irCommTempMax = irCommMaxSensorSignal[i];
							irCommComputeShift = 2;
    9384:	e2 e0       	ldi	r30, 0x02	; 2
    9386:	6e 2e       	mov	r6, r30
							

							if(irCommMaxSensorSignal[i] == irCommTempMax) {
								irCommRxPeakHighToLow = 0;
							} else if(irCommMaxSensorSignal[i] == irCommTempMin) {
								irCommRxPeakHighToLow = 1;
    9388:	55 24       	eor	r5, r5
    938a:	53 94       	inc	r5
    938c:	25 c0       	rjmp	.+74     	; 0x93d8 <irCommTasks+0x688>
				irCommShiftCount = 0;
				irCommComputeShift = 1;												
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
					irCommMaxSensorSignal[i] = irCommProxValuesCurr[irCommRxMaxSensor+i*8];

					if(irCommMaxSensorSignalIndexTemp>39) {
    938e:	2e 2d       	mov	r18, r14
    9390:	30 e0       	ldi	r19, 0x00	; 0
    9392:	e3 94       	inc	r14
						irCommMaxSensorSignalIndexTemp = 39;
						//updateRedLed(0);
					}
					irCommMaxSensorSignalTemp[irCommMaxSensorSignalIndexTemp] = irCommMaxSensorSignal[i];
    9394:	22 0f       	add	r18, r18
    9396:	33 1f       	adc	r19, r19
    9398:	2a 59       	subi	r18, 0x9A	; 154
    939a:	37 4f       	sbci	r19, 0xF7	; 247
    939c:	e9 01       	movw	r28, r18
    939e:	f9 83       	std	Y+1, r31	; 0x01
    93a0:	e8 83       	st	Y, r30
					irCommMaxSensorSignalIndexTemp++;					
    93a2:	e0 92 eb 04 	sts	0x04EB, r14

					irCommProxSum += irCommMaxSensorSignal[i];
    93a6:	9f 01       	movw	r18, r30
    93a8:	44 27       	eor	r20, r20
    93aa:	37 fd       	sbrc	r19, 7
    93ac:	40 95       	com	r20
    93ae:	54 2f       	mov	r21, r20
    93b0:	62 0f       	add	r22, r18
    93b2:	73 1f       	adc	r23, r19
    93b4:	84 1f       	adc	r24, r20
    93b6:	95 1f       	adc	r25, r21
					if(irCommComputeShift == 1) {	// compute the shift between the rx sampling and tx signal
    93b8:	2c 2d       	mov	r18, r12
    93ba:	21 30       	cpi	r18, 0x01	; 1
    93bc:	29 f1       	breq	.+74     	; 0x9408 <irCommTasks+0x6b8>
							irCommTempMax = irCommMaxSensorSignal[i];
							irCommComputeShift = 2;
							irCommShiftCount--;	// the current sample is already part of the signal start thus do not skip it
							irCommRxStartPeakDuration = 0;
						}
					 } else if(irCommComputeShift == 2) {		
    93be:	2c 2d       	mov	r18, r12
    93c0:	22 30       	cpi	r18, 0x02	; 2
    93c2:	09 f4       	brne	.+2      	; 0x93c6 <irCommTasks+0x676>
    93c4:	76 c0       	rjmp	.+236    	; 0x94b2 <irCommTasks+0x762>
						}	
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
							if((irCommMaxSensorSignal[i]==irCommTempMax) && (irCommRxPeakHighToLow==1)) {
								irCommComputeShift = 0;
							} else if((irCommMaxSensorSignal[i]==irCommTempMin) && (irCommRxPeakHighToLow==0)) {
								irCommComputeShift = 0;
    93c6:	50 96       	adiw	r26, 0x10	; 16
				irCommProxSum = 0;
				irCommTempMin = 1024;
				irCommTempMax = 0;
				irCommShiftCount = 0;
				irCommComputeShift = 1;												
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    93c8:	ec e5       	ldi	r30, 0x5C	; 92
    93ca:	2e 16       	cp	r2, r30
    93cc:	eb e0       	ldi	r30, 0x0B	; 11
    93ce:	3e 06       	cpc	r3, r30
    93d0:	09 f4       	brne	.+2      	; 0x93d4 <irCommTasks+0x684>
    93d2:	a4 c0       	rjmp	.+328    	; 0x951c <irCommTasks+0x7cc>
    93d4:	c0 90 0b 05 	lds	r12, 0x050B
					irCommMaxSensorSignal[i] = irCommProxValuesCurr[irCommRxMaxSensor+i*8];
    93d8:	ed 91       	ld	r30, X+
    93da:	fc 91       	ld	r31, X
    93dc:	11 97       	sbiw	r26, 0x01	; 1
    93de:	e1 01       	movw	r28, r2
    93e0:	e9 93       	st	Y+, r30
    93e2:	f9 93       	st	Y+, r31
    93e4:	1e 01       	movw	r2, r28

					if(irCommMaxSensorSignalIndexTemp>39) {
    93e6:	2e 2d       	mov	r18, r14
    93e8:	28 32       	cpi	r18, 0x28	; 40
    93ea:	88 f2       	brcs	.-94     	; 0x938e <irCommTasks+0x63e>
    93ec:	58 e2       	ldi	r21, 0x28	; 40
    93ee:	e5 2e       	mov	r14, r21
    93f0:	27 e2       	ldi	r18, 0x27	; 39
    93f2:	30 e0       	ldi	r19, 0x00	; 0
    93f4:	cf cf       	rjmp	.-98     	; 0x9394 <irCommTasks+0x644>
					//updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START2_DURATION;					
					irCommTxSwitchCount = IRCOMM_BIT_START2_SWITCH_COUNT;
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 2) {
					//updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START1_DURATION;					
    93f6:	88 e7       	ldi	r24, 0x78	; 120
    93f8:	90 e0       	ldi	r25, 0x00	; 0
    93fa:	90 93 28 05 	sts	0x0528, r25
    93fe:	80 93 27 05 	sts	0x0527, r24
					irCommTxSwitchCount = IRCOMM_BIT_START1_SWITCH_COUNT;
    9402:	20 93 29 05 	sts	0x0529, r18
    9406:	dc ce       	rjmp	.-584    	; 0x91c0 <irCommTasks+0x470>
					irCommMaxSensorSignalTemp[irCommMaxSensorSignalIndexTemp] = irCommMaxSensorSignal[i];
					irCommMaxSensorSignalIndexTemp++;					

					irCommProxSum += irCommMaxSensorSignal[i];
					if(irCommComputeShift == 1) {	// compute the shift between the rx sampling and tx signal
						irCommShiftCount++;								
    9408:	f3 94       	inc	r15
    940a:	f0 92 0a 05 	sts	0x050A, r15
						if(irCommTempMin > irCommMaxSensorSignal[i]) {
    940e:	a0 90 08 05 	lds	r10, 0x0508
    9412:	b0 90 09 05 	lds	r11, 0x0509
    9416:	ea 15       	cp	r30, r10
    9418:	fb 05       	cpc	r31, r11
    941a:	2c f4       	brge	.+10     	; 0x9426 <irCommTasks+0x6d6>
							irCommTempMin = irCommMaxSensorSignal[i];
    941c:	f0 93 09 05 	sts	0x0509, r31
    9420:	e0 93 08 05 	sts	0x0508, r30
    9424:	5f 01       	movw	r10, r30
						}
						if(irCommTempMax < irCommMaxSensorSignal[i]) {
    9426:	40 91 06 05 	lds	r20, 0x0506
    942a:	50 91 07 05 	lds	r21, 0x0507
    942e:	4e 17       	cp	r20, r30
    9430:	5f 07       	cpc	r21, r31
    9432:	2c f4       	brge	.+10     	; 0x943e <irCommTasks+0x6ee>
							irCommTempMax = irCommMaxSensorSignal[i];
    9434:	f0 93 07 05 	sts	0x0507, r31
    9438:	e0 93 06 05 	sts	0x0506, r30
    943c:	af 01       	movw	r20, r30
						}
						irCommTempValue = (irCommTempMax - irCommTempMin);						
    943e:	9a 01       	movw	r18, r20
    9440:	2a 19       	sub	r18, r10
    9442:	3b 09       	sbc	r19, r11
    9444:	72 2e       	mov	r7, r18
    9446:	d3 2e       	mov	r13, r19
    9448:	20 93 d8 04 	sts	0x04D8, r18
    944c:	30 93 d9 04 	sts	0x04D9, r19
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    9450:	20 35       	cpi	r18, 0x50	; 80
    9452:	31 05       	cpc	r19, r1
    9454:	0c f4       	brge	.+2      	; 0x9458 <irCommTasks+0x708>
    9456:	b7 cf       	rjmp	.-146    	; 0x93c6 <irCommTasks+0x676>

							if(irCommStartDiffIndexTemp>1) {
    9458:	c0 90 f5 04 	lds	r12, 0x04F5
    945c:	2c 2d       	mov	r18, r12
    945e:	22 30       	cpi	r18, 0x02	; 2
    9460:	08 f4       	brcc	.+2      	; 0x9464 <irCommTasks+0x714>
    9462:	91 c3       	rjmp	.+1826   	; 0x9b86 <irCommTasks+0xe36>
    9464:	22 e0       	ldi	r18, 0x02	; 2
    9466:	c2 2e       	mov	r12, r18
    9468:	21 e0       	ldi	r18, 0x01	; 1
    946a:	30 e0       	ldi	r19, 0x00	; 0
								irCommStartDiffIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommStartDiffTemp[irCommStartDiffIndexTemp] = irCommTempValue;
    946c:	22 0f       	add	r18, r18
    946e:	33 1f       	adc	r19, r19
    9470:	29 54       	subi	r18, 0x49	; 73
    9472:	37 4f       	sbci	r19, 0xF7	; 247
    9474:	e9 01       	movw	r28, r18
    9476:	78 82       	st	Y, r7
    9478:	d9 82       	std	Y+1, r13	; 0x01
							irCommStartDiffIndexTemp++;
    947a:	c0 92 f5 04 	sts	0x04F5, r12
							

							if(irCommMaxSensorSignal[i] == irCommTempMax) {
    947e:	e4 17       	cp	r30, r20
    9480:	f5 07       	cpc	r31, r21
    9482:	09 f4       	brne	.+2      	; 0x9486 <irCommTasks+0x736>
    9484:	7d c3       	rjmp	.+1786   	; 0x9b80 <irCommTasks+0xe30>
								irCommRxPeakHighToLow = 0;
							} else if(irCommMaxSensorSignal[i] == irCommTempMin) {
    9486:	ea 15       	cp	r30, r10
    9488:	fb 05       	cpc	r31, r11
    948a:	09 f4       	brne	.+2      	; 0x948e <irCommTasks+0x73e>
    948c:	9b c3       	rjmp	.+1846   	; 0x9bc4 <irCommTasks+0xe74>
								irCommRxPeakHighToLow = 1;
							} else {
								//updateGreenLed(0);
							}
							irCommTempMin = irCommMaxSensorSignal[i];	// otherwise I cannot detect spike of one sample (peakDuration=1), related to sensors sampling
    948e:	f0 93 09 05 	sts	0x0509, r31
    9492:	e0 93 08 05 	sts	0x0508, r30
							irCommTempMax = irCommMaxSensorSignal[i];
    9496:	f0 93 07 05 	sts	0x0507, r31
    949a:	e0 93 06 05 	sts	0x0506, r30
							irCommComputeShift = 2;
    949e:	60 92 0b 05 	sts	0x050B, r6
							irCommShiftCount--;	// the current sample is already part of the signal start thus do not skip it
    94a2:	fa 94       	dec	r15
    94a4:	f0 92 0a 05 	sts	0x050A, r15
							irCommRxStartPeakDuration = 0;
    94a8:	10 92 1c 05 	sts	0x051C, r1
    94ac:	52 e0       	ldi	r21, 0x02	; 2
    94ae:	c5 2e       	mov	r12, r21
    94b0:	8a cf       	rjmp	.-236    	; 0x93c6 <irCommTasks+0x676>
						}
					 } else if(irCommComputeShift == 2) {		
					 	irCommRxStartPeakDuration++;					
    94b2:	20 91 1c 05 	lds	r18, 0x051C
    94b6:	2f 5f       	subi	r18, 0xFF	; 255
    94b8:	20 93 1c 05 	sts	0x051C, r18
						if(irCommTempMin > irCommMaxSensorSignal[i]) {
    94bc:	a0 90 08 05 	lds	r10, 0x0508
    94c0:	b0 90 09 05 	lds	r11, 0x0509
    94c4:	ea 15       	cp	r30, r10
    94c6:	fb 05       	cpc	r31, r11
    94c8:	2c f4       	brge	.+10     	; 0x94d4 <irCommTasks+0x784>
							irCommTempMin = irCommMaxSensorSignal[i];
    94ca:	f0 93 09 05 	sts	0x0509, r31
    94ce:	e0 93 08 05 	sts	0x0508, r30
    94d2:	5f 01       	movw	r10, r30
						}
						if(irCommTempMax < irCommMaxSensorSignal[i]) {
    94d4:	40 91 06 05 	lds	r20, 0x0506
    94d8:	50 91 07 05 	lds	r21, 0x0507
    94dc:	4e 17       	cp	r20, r30
    94de:	5f 07       	cpc	r21, r31
    94e0:	2c f4       	brge	.+10     	; 0x94ec <irCommTasks+0x79c>
							irCommTempMax = irCommMaxSensorSignal[i];
    94e2:	f0 93 07 05 	sts	0x0507, r31
    94e6:	e0 93 06 05 	sts	0x0506, r30
    94ea:	af 01       	movw	r20, r30
						}	
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    94ec:	9a 01       	movw	r18, r20
    94ee:	2a 19       	sub	r18, r10
    94f0:	3b 09       	sbc	r19, r11
    94f2:	20 35       	cpi	r18, 0x50	; 80
    94f4:	31 05       	cpc	r19, r1
    94f6:	0c f4       	brge	.+2      	; 0x94fa <irCommTasks+0x7aa>
    94f8:	66 cf       	rjmp	.-308    	; 0x93c6 <irCommTasks+0x676>
							if((irCommMaxSensorSignal[i]==irCommTempMax) && (irCommRxPeakHighToLow==1)) {
    94fa:	e4 17       	cp	r30, r20
    94fc:	f5 07       	cpc	r31, r21
    94fe:	09 f4       	brne	.+2      	; 0x9502 <irCommTasks+0x7b2>
    9500:	64 c3       	rjmp	.+1736   	; 0x9bca <irCommTasks+0xe7a>
								irCommComputeShift = 0;
							} else if((irCommMaxSensorSignal[i]==irCommTempMin) && (irCommRxPeakHighToLow==0)) {
    9502:	ea 15       	cp	r30, r10
    9504:	fb 05       	cpc	r31, r11
    9506:	09 f0       	breq	.+2      	; 0x950a <irCommTasks+0x7ba>
    9508:	5e cf       	rjmp	.-324    	; 0x93c6 <irCommTasks+0x676>
    950a:	20 91 1b 05 	lds	r18, 0x051B
    950e:	22 23       	and	r18, r18
    9510:	09 f0       	breq	.+2      	; 0x9514 <irCommTasks+0x7c4>
    9512:	59 cf       	rjmp	.-334    	; 0x93c6 <irCommTasks+0x676>
								irCommComputeShift = 0;
    9514:	10 92 0b 05 	sts	0x050B, r1
    9518:	cc 24       	eor	r12, r12
    951a:	55 cf       	rjmp	.-342    	; 0x93c6 <irCommTasks+0x676>
				irCommProxSum = 0;
				irCommTempMin = 1024;
				irCommTempMax = 0;
				irCommShiftCount = 0;
				irCommComputeShift = 1;												
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    951c:	60 93 02 05 	sts	0x0502, r22
    9520:	70 93 03 05 	sts	0x0503, r23
    9524:	80 93 04 05 	sts	0x0504, r24
    9528:	90 93 05 05 	sts	0x0505, r25
						}											
					 }

				}

				if(irCommComputeShiftIndexTemp>1) {
    952c:	20 91 f6 04 	lds	r18, 0x04F6
    9530:	22 30       	cpi	r18, 0x02	; 2
    9532:	08 f4       	brcc	.+2      	; 0x9536 <irCommTasks+0x7e6>
    9534:	dd c3       	rjmp	.+1978   	; 0x9cf0 <irCommTasks+0xfa0>
    9536:	22 e0       	ldi	r18, 0x02	; 2
    9538:	e1 e0       	ldi	r30, 0x01	; 1
    953a:	f0 e0       	ldi	r31, 0x00	; 0
					irCommComputeShiftIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommComputeShiftTemp[irCommComputeShiftIndexTemp] = irCommComputeShift;
    953c:	eb 59       	subi	r30, 0x9B	; 155
    953e:	fa 4f       	sbci	r31, 0xFA	; 250
    9540:	c0 82       	st	Z, r12
				irCommComputeShiftIndexTemp++;
    9542:	20 93 f6 04 	sts	0x04F6, r18
				
				if(irCommShiftCountIndexTemp>1) {
    9546:	20 91 f3 04 	lds	r18, 0x04F3
    954a:	22 30       	cpi	r18, 0x02	; 2
    954c:	08 f4       	brcc	.+2      	; 0x9550 <irCommTasks+0x800>
    954e:	cc c3       	rjmp	.+1944   	; 0x9ce8 <irCommTasks+0xf98>
    9550:	22 e0       	ldi	r18, 0x02	; 2
    9552:	e1 e0       	ldi	r30, 0x01	; 1
    9554:	f0 e0       	ldi	r31, 0x00	; 0
					irCommShiftCountIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommShiftCountTemp[irCommShiftCountIndexTemp] = irCommShiftCount;
    9556:	e8 58       	subi	r30, 0x88	; 136
    9558:	f4 4f       	sbci	r31, 0xF4	; 244
    955a:	f0 82       	st	Z, r15
				irCommShiftCountIndexTemp++;
    955c:	20 93 f3 04 	sts	0x04F3, r18
				
				if(irCommRxPeakHighToLowIndexTemp>1) {
    9560:	20 91 f7 04 	lds	r18, 0x04F7
    9564:	22 30       	cpi	r18, 0x02	; 2
    9566:	08 f4       	brcc	.+2      	; 0x956a <irCommTasks+0x81a>
    9568:	b1 c3       	rjmp	.+1890   	; 0x9ccc <irCommTasks+0xf7c>
    956a:	22 e0       	ldi	r18, 0x02	; 2
    956c:	e1 e0       	ldi	r30, 0x01	; 1
    956e:	f0 e0       	ldi	r31, 0x00	; 0
					irCommRxPeakHighToLowIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommRxPeakHighToLowTemp[irCommRxPeakHighToLowIndexTemp] = irCommRxPeakHighToLow;
    9570:	ee 53       	subi	r30, 0x3E	; 62
    9572:	fa 4f       	sbci	r31, 0xFA	; 250
    9574:	30 91 1b 05 	lds	r19, 0x051B
    9578:	30 83       	st	Z, r19
				irCommRxPeakHighToLowIndexTemp++;
    957a:	20 93 f7 04 	sts	0x04F7, r18
				
				if(irCommRxStartPeakDurationIndexTemp>1) {
    957e:	20 91 f8 04 	lds	r18, 0x04F8
    9582:	22 30       	cpi	r18, 0x02	; 2
    9584:	08 f4       	brcc	.+2      	; 0x9588 <irCommTasks+0x838>
    9586:	9e c3       	rjmp	.+1852   	; 0x9cc4 <irCommTasks+0xf74>
    9588:	22 e0       	ldi	r18, 0x02	; 2
    958a:	e1 e0       	ldi	r30, 0x01	; 1
    958c:	f0 e0       	ldi	r31, 0x00	; 0
					irCommRxStartPeakDurationIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommRxStartPeakDurationTemp[irCommRxStartPeakDurationIndexTemp] = irCommRxStartPeakDuration;
    958e:	ec 5f       	subi	r30, 0xFC	; 252
    9590:	f8 4f       	sbci	r31, 0xF8	; 248
    9592:	30 91 1c 05 	lds	r19, 0x051C
    9596:	30 83       	st	Z, r19
				irCommRxStartPeakDurationIndexTemp++;
    9598:	20 93 f8 04 	sts	0x04F8, r18
					
				
				//if(irCommComputeShift != 0) {	// it should not be never 1 because the difference between min and max in the current signal
					//updateRedLed(0);			// is at least IRCOMM_DETECTION_AMPLITUDE_THR (checked in the previous state)
				//}
				irCommProxMean = (int)(irCommProxSum / IRCOMM_SAMPLING_WINDOW);
    959c:	24 e1       	ldi	r18, 0x14	; 20
    959e:	30 e0       	ldi	r19, 0x00	; 0
    95a0:	40 e0       	ldi	r20, 0x00	; 0
    95a2:	50 e0       	ldi	r21, 0x00	; 0
    95a4:	0e 94 d1 53 	call	0xa7a2	; 0xa7a2 <__divmodsi4>
    95a8:	b9 01       	movw	r22, r18
    95aa:	30 93 0d 05 	sts	0x050D, r19
    95ae:	20 93 0c 05 	sts	0x050C, r18

				if(irCommProxMeanIndexTemp>1) {
    95b2:	80 91 ef 04 	lds	r24, 0x04EF
    95b6:	82 30       	cpi	r24, 0x02	; 2
    95b8:	08 f4       	brcc	.+2      	; 0x95bc <irCommTasks+0x86c>
    95ba:	92 c3       	rjmp	.+1828   	; 0x9ce0 <irCommTasks+0xf90>
    95bc:	82 e0       	ldi	r24, 0x02	; 2
    95be:	e1 e0       	ldi	r30, 0x01	; 1
    95c0:	f0 e0       	ldi	r31, 0x00	; 0
					irCommProxMeanIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommProxMeanTemp[irCommProxMeanIndexTemp] = irCommProxMean;
    95c2:	ee 0f       	add	r30, r30
    95c4:	ff 1f       	adc	r31, r31
    95c6:	e8 59       	subi	r30, 0x98	; 152
    95c8:	fa 4f       	sbci	r31, 0xFA	; 250
    95ca:	71 83       	std	Z+1, r23	; 0x01
    95cc:	60 83       	st	Z, r22
				irCommProxMeanIndexTemp++;
    95ce:	80 93 ef 04 	sts	0x04EF, r24
    95d2:	20 91 ec 04 	lds	r18, 0x04EC
    95d6:	0d c0       	rjmp	.+26     	; 0x95f2 <irCommTasks+0x8a2>

				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
					irCommMaxSensorSignal[i] -= irCommProxMean;

					if(irCommMaxSensorSignalFiltIndexTemp>39) {
    95d8:	e2 2f       	mov	r30, r18
    95da:	f0 e0       	ldi	r31, 0x00	; 0
    95dc:	2f 5f       	subi	r18, 0xFF	; 255
						irCommMaxSensorSignalFiltIndexTemp = 39;
						//updateRedLed(0);
					}
					irCommMaxSensorSignalFiltTemp[irCommMaxSensorSignalFiltIndexTemp] = irCommMaxSensorSignal[i];
    95de:	ee 0f       	add	r30, r30
    95e0:	ff 1f       	adc	r31, r31
    95e2:	e0 59       	subi	r30, 0x90	; 144
    95e4:	fa 4f       	sbci	r31, 0xFA	; 250
    95e6:	91 83       	std	Z+1, r25	; 0x01
    95e8:	80 83       	st	Z, r24
				irCommProxMeanTemp[irCommProxMeanIndexTemp] = irCommProxMean;
				irCommProxMeanIndexTemp++;
				

				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    95ea:	fb e0       	ldi	r31, 0x0B	; 11
    95ec:	0c 35       	cpi	r16, 0x5C	; 92
    95ee:	1f 07       	cpc	r17, r31
    95f0:	79 f0       	breq	.+30     	; 0x9610 <irCommTasks+0x8c0>
					irCommMaxSensorSignal[i] -= irCommProxMean;
    95f2:	e8 01       	movw	r28, r16
    95f4:	88 81       	ld	r24, Y
    95f6:	99 81       	ldd	r25, Y+1	; 0x01
    95f8:	86 1b       	sub	r24, r22
    95fa:	97 0b       	sbc	r25, r23
    95fc:	f8 01       	movw	r30, r16
    95fe:	81 93       	st	Z+, r24
    9600:	91 93       	st	Z+, r25
    9602:	8f 01       	movw	r16, r30

					if(irCommMaxSensorSignalFiltIndexTemp>39) {
    9604:	28 32       	cpi	r18, 0x28	; 40
    9606:	40 f3       	brcs	.-48     	; 0x95d8 <irCommTasks+0x888>
    9608:	28 e2       	ldi	r18, 0x28	; 40
    960a:	e7 e2       	ldi	r30, 0x27	; 39
    960c:	f0 e0       	ldi	r31, 0x00	; 0
    960e:	e7 cf       	rjmp	.-50     	; 0x95de <irCommTasks+0x88e>
				irCommProxMeanTemp[irCommProxMeanIndexTemp] = irCommProxMean;
				irCommProxMeanIndexTemp++;
				

				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    9610:	20 93 ec 04 	sts	0x04EC, r18
					irCommMaxSensorSignalFiltIndexTemp++;
					
				}
						
				// start counting number of switch around mean signal
				if(irCommMaxSensorSignal[0] > 0) {
    9614:	80 91 34 0b 	lds	r24, 0x0B34
    9618:	90 91 35 0b 	lds	r25, 0x0B35
    961c:	18 16       	cp	r1, r24
    961e:	19 06       	cpc	r1, r25
    9620:	0c f0       	brlt	.+2      	; 0x9624 <irCommTasks+0x8d4>
    9622:	58 c3       	rjmp	.+1712   	; 0x9cd4 <irCommTasks+0xf84>
					irCommSignalState = 1;
    9624:	81 e0       	ldi	r24, 0x01	; 1
    9626:	80 93 0e 05 	sts	0x050E, r24
    962a:	21 e0       	ldi	r18, 0x01	; 1
    962c:	38 2f       	mov	r19, r24
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
    962e:	e6 e3       	ldi	r30, 0x36	; 54
    9630:	fb e0       	ldi	r31, 0x0B	; 11
    9632:	40 e0       	ldi	r20, 0x00	; 0
    9634:	06 c0       	rjmp	.+12     	; 0x9642 <irCommTasks+0x8f2>
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
    9636:	27 fd       	sbrc	r18, 7
    9638:	0e c0       	rjmp	.+28     	; 0x9656 <irCommTasks+0x906>
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
    963a:	8e 16       	cp	r8, r30
    963c:	9f 06       	cpc	r9, r31
    963e:	71 f0       	breq	.+28     	; 0x965c <irCommTasks+0x90c>
    9640:	23 2f       	mov	r18, r19
					if(irCommMaxSensorSignal[i] > 0) {
    9642:	81 91       	ld	r24, Z+
    9644:	91 91       	ld	r25, Z+
    9646:	18 16       	cp	r1, r24
    9648:	19 06       	cpc	r1, r25
    964a:	ac f3       	brlt	.-22     	; 0x9636 <irCommTasks+0x8e6>
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
							irCommSwitchCount++;
						}
					} else {
						if(irCommSignalState > 0) {
    964c:	12 16       	cp	r1, r18
    964e:	ac f7       	brge	.-22     	; 0x963a <irCommTasks+0x8ea>
							irCommSignalState = -1;
							irCommSwitchCount++;
    9650:	4f 5f       	subi	r20, 0xFF	; 255
							irCommSignalState = 1;
							irCommSwitchCount++;
						}
					} else {
						if(irCommSignalState > 0) {
							irCommSignalState = -1;
    9652:	3f ef       	ldi	r19, 0xFF	; 255
    9654:	f2 cf       	rjmp	.-28     	; 0x963a <irCommTasks+0x8ea>
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
							irCommSwitchCount++;
    9656:	4f 5f       	subi	r20, 0xFF	; 255
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
    9658:	31 e0       	ldi	r19, 0x01	; 1
    965a:	ef cf       	rjmp	.-34     	; 0x963a <irCommTasks+0x8ea>
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
    965c:	30 93 0e 05 	sts	0x050E, r19
    9660:	40 93 0f 05 	sts	0x050F, r20
							irCommSwitchCount++;
						}
					}
				}

				if(irCommSwitchCountIndexTemp>1) {
    9664:	80 91 f0 04 	lds	r24, 0x04F0
    9668:	82 30       	cpi	r24, 0x02	; 2
    966a:	08 f4       	brcc	.+2      	; 0x966e <irCommTasks+0x91e>
    966c:	15 c3       	rjmp	.+1578   	; 0x9c98 <irCommTasks+0xf48>
    966e:	82 e0       	ldi	r24, 0x02	; 2
    9670:	e1 e0       	ldi	r30, 0x01	; 1
    9672:	f0 e0       	ldi	r31, 0x00	; 0
					irCommSwitchCountIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommSwitchCountTemp[irCommSwitchCountIndexTemp] = irCommSwitchCount;
    9674:	e6 5b       	subi	r30, 0xB6	; 182
    9676:	fa 4f       	sbci	r31, 0xFA	; 250
    9678:	90 91 0f 05 	lds	r25, 0x050F
    967c:	90 83       	st	Z, r25
				irCommSwitchCountIndexTemp++;
    967e:	80 93 f0 04 	sts	0x04F0, r24
				

				turnOffGreenLeds();
    9682:	0e 94 85 3e 	call	0x7d0a	; 0x7d0a <turnOffGreenLeds>
				if(irCommRxPeakHighToLow==1) {
    9686:	80 91 1b 05 	lds	r24, 0x051B
    968a:	81 30       	cpi	r24, 0x01	; 1
    968c:	09 f4       	brne	.+2      	; 0x9690 <irCommTasks+0x940>
    968e:	db c2       	rjmp	.+1462   	; 0x9c46 <irCommTasks+0xef6>
							resetDebugVariables();				
							break;
						}
					}
				} else {
					if(irCommRxStartBitDetected==1) {
    9690:	80 91 1a 05 	lds	r24, 0x051A
    9694:	81 30       	cpi	r24, 0x01	; 1
    9696:	09 f4       	brne	.+2      	; 0x969a <irCommTasks+0x94a>
    9698:	3e c3       	rjmp	.+1660   	; 0x9d16 <irCommTasks+0xfc6>

							resetDebugVariables();				
							break;
						}
					} else {
						if(irCommSwitchCount==2) {
    969a:	80 91 0f 05 	lds	r24, 0x050F
    969e:	82 30       	cpi	r24, 0x02	; 2
    96a0:	09 f4       	brne	.+2      	; 0x96a4 <irCommTasks+0x954>
    96a2:	5f c3       	rjmp	.+1726   	; 0x9d62 <irCommTasks+0x1012>
							irCommShiftCounter = 0;
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else if(irCommSwitchCount==1) {
    96a4:	81 30       	cpi	r24, 0x01	; 1
    96a6:	09 f4       	brne	.+2      	; 0x96aa <irCommTasks+0x95a>
    96a8:	b2 c3       	rjmp	.+1892   	; 0x9e0e <irCommTasks+0x10be>
								irCommRxCrc = 0;	
								irCommRxByte = 0;
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
							}
						} else {
							currentProx = 0;
    96aa:	10 92 34 02 	sts	0x0234, r1
							adcSaveDataTo = SKIP_SAMPLE;
    96ae:	85 e0       	ldi	r24, 0x05	; 5
    96b0:	80 93 c9 02 	sts	0x02C9, r24
							adcSamplingState = 0;
    96b4:	10 92 ca 02 	sts	0x02CA, r1
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;							
    96b8:	10 92 d6 04 	sts	0x04D6, r1
							irCommState = IRCOMM_RX_IDLE_STATE;
    96bc:	81 e0       	ldi	r24, 0x01	; 1
    96be:	80 93 d7 04 	sts	0x04D7, r24

							if(irCommSyncStateIndexTemp>1) {
    96c2:	20 91 fb 04 	lds	r18, 0x04FB
    96c6:	22 30       	cpi	r18, 0x02	; 2
    96c8:	08 f4       	brcc	.+2      	; 0x96cc <irCommTasks+0x97c>
    96ca:	44 c4       	rjmp	.+2184   	; 0x9f54 <irCommTasks+0x1204>
    96cc:	22 e0       	ldi	r18, 0x02	; 2
    96ce:	81 e0       	ldi	r24, 0x01	; 1
    96d0:	90 e0       	ldi	r25, 0x00	; 0
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 15;
    96d2:	8d 59       	subi	r24, 0x9D	; 157
    96d4:	9a 4f       	sbci	r25, 0xFA	; 250
    96d6:	3f e0       	ldi	r19, 0x0F	; 15
    96d8:	fc 01       	movw	r30, r24
    96da:	30 83       	st	Z, r19
							irCommSyncStateIndexTemp++;
    96dc:	20 93 fb 04 	sts	0x04FB, r18
							//irCommState = IRCOMM_RX_DEBUG;
							//irCommAdcRxState = 12;
							//updateRedLed(0);
							//break;

							resetDebugVariables();				
    96e0:	0e 94 ff 45 	call	0x8bfe	; 0x8bfe <resetDebugVariables>
							break;				
    96e4:	4d cb       	rjmp	.-2406   	; 0x8d80 <irCommTasks+0x30>

				}							
				break;

			case IRCOMM_RX_CHECK_CRC:
				irCommRxCrcError = (irCommRxCrc + (irCommRxBitReceived[8]<<1) + irCommRxBitReceived[9])&0x03;
    96e6:	80 91 62 05 	lds	r24, 0x0562
    96ea:	90 91 01 05 	lds	r25, 0x0501
    96ee:	89 0f       	add	r24, r25
    96f0:	90 91 61 05 	lds	r25, 0x0561
    96f4:	99 0f       	add	r25, r25
    96f6:	89 0f       	add	r24, r25
    96f8:	83 70       	andi	r24, 0x03	; 3
    96fa:	80 93 11 05 	sts	0x0511, r24
				if(irCommRxCrcError==0) {
    96fe:	88 23       	and	r24, r24
    9700:	69 f4       	brne	.+26     	; 0x971c <irCommTasks+0x9cc>
					irCommRxLastDataReceived = irCommRxByte;
    9702:	80 91 12 05 	lds	r24, 0x0512
    9706:	80 93 17 05 	sts	0x0517, r24
					irCommRxReceivingSensor = irCommRxMaxSensor;
    970a:	90 91 75 0b 	lds	r25, 0x0B75
    970e:	90 93 19 02 	sts	0x0219, r25
					irCommRxDataAvailable = 1;
    9712:	00 93 18 05 	sts	0x0518, r16
					//updateBlueLed(0);
					usart0Transmit(irCommRxByte,1);		
    9716:	61 e0       	ldi	r22, 0x01	; 1
    9718:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
					//updateBlueLed(255);
				}
												
				currentProx = 0;
    971c:	10 92 34 02 	sts	0x0234, r1
				adcSaveDataTo = SKIP_SAMPLE;
    9720:	85 e0       	ldi	r24, 0x05	; 5
    9722:	80 93 c9 02 	sts	0x02C9, r24
				adcSamplingState = 0;
    9726:	10 92 ca 02 	sts	0x02CA, r1
				irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;				
    972a:	10 92 d6 04 	sts	0x04D6, r1
				} else {
					irCommRxPrevDataReceived = irCommRxLastDataReceived;
				}
				*/

				resetDebugVariables();
    972e:	0e 94 ff 45 	call	0x8bfe	; 0x8bfe <resetDebugVariables>

				irCommState = IRCOMM_RX_IDLE_STATE;
    9732:	81 e0       	ldi	r24, 0x01	; 1
    9734:	80 93 d7 04 	sts	0x04D7, r24

				break;
    9738:	23 cb       	rjmp	.-2490   	; 0x8d80 <irCommTasks+0x30>

			case IRCOMM_RX_DEBUG:								
				irCommSendValues = 0;						
    973a:	10 92 da 04 	sts	0x04DA, r1
				while(irCommSendValues==0);	// wait for the start from the uart (computer)
    973e:	80 91 da 04 	lds	r24, 0x04DA
    9742:	88 23       	and	r24, r24
    9744:	e1 f3       	breq	.-8      	; 0x973e <irCommTasks+0x9ee>
				usart0Transmit(0xFF, 1);
    9746:	8f ef       	ldi	r24, 0xFF	; 255
    9748:	61 e0       	ldi	r22, 0x01	; 1
    974a:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
				usart0Transmit(irCommRxMaxSensorTemp[0],1);
    974e:	80 91 24 0b 	lds	r24, 0x0B24
    9752:	61 e0       	ldi	r22, 0x01	; 1
    9754:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
				usart0Transmit(irCommRxMaxSensorTemp[1],1);
    9758:	80 91 26 0b 	lds	r24, 0x0B26
    975c:	61 e0       	ldi	r22, 0x01	; 1
    975e:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
				usart0Transmit(irCommRxMaxDiffTemp[0]&0xFF,1);
    9762:	80 91 5d 0b 	lds	r24, 0x0B5D
    9766:	61 e0       	ldi	r22, 0x01	; 1
    9768:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
				usart0Transmit(irCommRxMaxDiffTemp[0]>>8,1);
    976c:	80 91 5e 0b 	lds	r24, 0x0B5E
    9770:	61 e0       	ldi	r22, 0x01	; 1
    9772:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
				usart0Transmit(irCommRxMaxDiffTemp[1]&0xFF,1);
    9776:	80 91 5f 0b 	lds	r24, 0x0B5F
    977a:	61 e0       	ldi	r22, 0x01	; 1
    977c:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
				usart0Transmit(irCommRxMaxDiffTemp[1]>>8,1);
    9780:	80 91 60 0b 	lds	r24, 0x0B60
    9784:	61 e0       	ldi	r22, 0x01	; 1
    9786:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
				usart0Transmit(irCommProxMeanTemp[0]&0xFF,1);
    978a:	80 91 68 05 	lds	r24, 0x0568
    978e:	61 e0       	ldi	r22, 0x01	; 1
    9790:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
				usart0Transmit(irCommProxMeanTemp[0]>>8,1);
    9794:	80 91 69 05 	lds	r24, 0x0569
    9798:	61 e0       	ldi	r22, 0x01	; 1
    979a:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
				usart0Transmit(irCommProxMeanTemp[1]&0xFF,1);
    979e:	80 91 6a 05 	lds	r24, 0x056A
    97a2:	61 e0       	ldi	r22, 0x01	; 1
    97a4:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
				usart0Transmit(irCommProxMeanTemp[1]>>8,1);
    97a8:	80 91 6b 05 	lds	r24, 0x056B
    97ac:	61 e0       	ldi	r22, 0x01	; 1
    97ae:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
				usart0Transmit(irCommSwitchCountTemp[0],1);
    97b2:	80 91 4a 05 	lds	r24, 0x054A
    97b6:	61 e0       	ldi	r22, 0x01	; 1
    97b8:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
				usart0Transmit(irCommSwitchCountTemp[1],1);
    97bc:	80 91 4b 05 	lds	r24, 0x054B
    97c0:	61 e0       	ldi	r22, 0x01	; 1
    97c2:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
    97c6:	c6 e6       	ldi	r28, 0x66	; 102
    97c8:	d8 e0       	ldi	r29, 0x08	; 8
    97ca:	00 e7       	ldi	r16, 0x70	; 112
    97cc:	15 e0       	ldi	r17, 0x05	; 5
				for(i=0; i<IRCOMM_SAMPLING_WINDOW*2; i++) {
					irCommTempValue = irCommMaxSensorSignalTemp[i];
    97ce:	88 81       	ld	r24, Y
    97d0:	99 81       	ldd	r25, Y+1	; 0x01
    97d2:	22 96       	adiw	r28, 0x02	; 2
    97d4:	80 93 d8 04 	sts	0x04D8, r24
    97d8:	90 93 d9 04 	sts	0x04D9, r25
					usart0Transmit(irCommTempValue&0xFF,1);
    97dc:	61 e0       	ldi	r22, 0x01	; 1
    97de:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
					usart0Transmit(irCommTempValue>>8,1);
    97e2:	80 91 d9 04 	lds	r24, 0x04D9
    97e6:	61 e0       	ldi	r22, 0x01	; 1
    97e8:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
					irCommTempValue = irCommMaxSensorSignalFiltTemp[i];
    97ec:	f8 01       	movw	r30, r16
    97ee:	80 81       	ld	r24, Z
    97f0:	91 81       	ldd	r25, Z+1	; 0x01
    97f2:	0e 5f       	subi	r16, 0xFE	; 254
    97f4:	1f 4f       	sbci	r17, 0xFF	; 255
    97f6:	80 93 d8 04 	sts	0x04D8, r24
    97fa:	90 93 d9 04 	sts	0x04D9, r25
					usart0Transmit(irCommTempValue&0xFF,1);
    97fe:	61 e0       	ldi	r22, 0x01	; 1
    9800:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
					usart0Transmit(irCommTempValue>>8,1);
    9804:	80 91 d9 04 	lds	r24, 0x04D9
    9808:	61 e0       	ldi	r22, 0x01	; 1
    980a:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
				usart0Transmit(irCommProxMeanTemp[0]>>8,1);
				usart0Transmit(irCommProxMeanTemp[1]&0xFF,1);
				usart0Transmit(irCommProxMeanTemp[1]>>8,1);
				usart0Transmit(irCommSwitchCountTemp[0],1);
				usart0Transmit(irCommSwitchCountTemp[1],1);
				for(i=0; i<IRCOMM_SAMPLING_WINDOW*2; i++) {
    980e:	f8 e0       	ldi	r31, 0x08	; 8
    9810:	c6 3b       	cpi	r28, 0xB6	; 182
    9812:	df 07       	cpc	r29, r31
    9814:	e1 f6       	brne	.-72     	; 0x97ce <irCommTasks+0xa7e>
					usart0Transmit(irCommTempValue>>8,1);
					irCommTempValue = irCommMaxSensorSignalFiltTemp[i];
					usart0Transmit(irCommTempValue&0xFF,1);
					usart0Transmit(irCommTempValue>>8,1);
				}
				usart0Transmit(irCommMaxSensorValueCurrTemp[0]&0xFF,1);
    9816:	80 91 31 05 	lds	r24, 0x0531
    981a:	61 e0       	ldi	r22, 0x01	; 1
    981c:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
				usart0Transmit(irCommMaxSensorValueCurrTemp[0]>>8,1);
    9820:	80 91 32 05 	lds	r24, 0x0532
    9824:	61 e0       	ldi	r22, 0x01	; 1
    9826:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
				usart0Transmit(irCommMaxSensorValueCurrTemp[1]&0xFF,1);
    982a:	80 91 33 05 	lds	r24, 0x0533
    982e:	61 e0       	ldi	r22, 0x01	; 1
    9830:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
				usart0Transmit(irCommMaxSensorValueCurrTemp[1]>>8,1);
    9834:	80 91 34 05 	lds	r24, 0x0534
    9838:	61 e0       	ldi	r22, 0x01	; 1
    983a:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
				usart0Transmit(irCommMinSensorValueCurrTemp[0]&0xFF,1);
    983e:	80 91 28 0b 	lds	r24, 0x0B28
    9842:	61 e0       	ldi	r22, 0x01	; 1
    9844:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
				usart0Transmit(irCommMinSensorValueCurrTemp[0]>>8,1);
    9848:	80 91 29 0b 	lds	r24, 0x0B29
    984c:	61 e0       	ldi	r22, 0x01	; 1
    984e:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
				usart0Transmit(irCommMinSensorValueCurrTemp[1]&0xFF,1);
    9852:	80 91 2a 0b 	lds	r24, 0x0B2A
    9856:	61 e0       	ldi	r22, 0x01	; 1
    9858:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
				usart0Transmit(irCommMinSensorValueCurrTemp[1]>>8,1);
    985c:	80 91 2b 0b 	lds	r24, 0x0B2B
    9860:	61 e0       	ldi	r22, 0x01	; 1
    9862:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
				usart0Transmit(irCommShiftCountTemp[0],1);
    9866:	80 91 78 0b 	lds	r24, 0x0B78
    986a:	61 e0       	ldi	r22, 0x01	; 1
    986c:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
				usart0Transmit(irCommShiftCountTemp[1],1);
    9870:	80 91 79 0b 	lds	r24, 0x0B79
    9874:	61 e0       	ldi	r22, 0x01	; 1
    9876:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
				usart0Transmit(irCommShiftCountFinalTemp[0],1);
    987a:	80 91 30 0b 	lds	r24, 0x0B30
    987e:	61 e0       	ldi	r22, 0x01	; 1
    9880:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
				usart0Transmit(irCommShiftCountFinalTemp[1],1);
    9884:	80 91 31 0b 	lds	r24, 0x0B31
    9888:	61 e0       	ldi	r22, 0x01	; 1
    988a:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
				usart0Transmit(irCommStartDiffTemp[0]&0xFF,1);
    988e:	80 91 b7 08 	lds	r24, 0x08B7
    9892:	61 e0       	ldi	r22, 0x01	; 1
    9894:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
				usart0Transmit(irCommStartDiffTemp[0]>>8,1);
    9898:	80 91 b8 08 	lds	r24, 0x08B8
    989c:	61 e0       	ldi	r22, 0x01	; 1
    989e:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
				usart0Transmit(irCommStartDiffTemp[1]&0xFF,1);
    98a2:	80 91 b9 08 	lds	r24, 0x08B9
    98a6:	61 e0       	ldi	r22, 0x01	; 1
    98a8:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
				usart0Transmit(irCommStartDiffTemp[1]>>8,1);
    98ac:	80 91 ba 08 	lds	r24, 0x08BA
    98b0:	61 e0       	ldi	r22, 0x01	; 1
    98b2:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
				usart0Transmit(irCommComputeShiftTemp[0],1);
    98b6:	80 91 65 05 	lds	r24, 0x0565
    98ba:	61 e0       	ldi	r22, 0x01	; 1
    98bc:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
				usart0Transmit(irCommComputeShiftTemp[1],1);
    98c0:	80 91 66 05 	lds	r24, 0x0566
    98c4:	61 e0       	ldi	r22, 0x01	; 1
    98c6:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
				usart0Transmit(irCommRxPeakHighToLowTemp[0],1);
    98ca:	80 91 c2 05 	lds	r24, 0x05C2
    98ce:	61 e0       	ldi	r22, 0x01	; 1
    98d0:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
				usart0Transmit(irCommRxPeakHighToLowTemp[1],1);
    98d4:	80 91 c3 05 	lds	r24, 0x05C3
    98d8:	61 e0       	ldi	r22, 0x01	; 1
    98da:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
				usart0Transmit(irCommRxStartPeakDurationTemp[0],1);
    98de:	80 91 04 07 	lds	r24, 0x0704
    98e2:	61 e0       	ldi	r22, 0x01	; 1
    98e4:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
				usart0Transmit(irCommRxStartPeakDurationTemp[1],1);
    98e8:	80 91 05 07 	lds	r24, 0x0705
    98ec:	61 e0       	ldi	r22, 0x01	; 1
    98ee:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
				usart0Transmit(irCommRxStartBitDetectedTemp[0],1);
    98f2:	80 91 6e 05 	lds	r24, 0x056E
    98f6:	61 e0       	ldi	r22, 0x01	; 1
    98f8:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
				usart0Transmit(irCommRxStartBitDetectedTemp[1],1);
    98fc:	80 91 6f 05 	lds	r24, 0x056F
    9900:	61 e0       	ldi	r22, 0x01	; 1
    9902:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
				usart0Transmit(irCommSyncStateTemp[0],1);
    9906:	80 91 63 05 	lds	r24, 0x0563
    990a:	61 e0       	ldi	r22, 0x01	; 1
    990c:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
				usart0Transmit(irCommSyncStateTemp[1],1);
    9910:	80 91 64 05 	lds	r24, 0x0564
    9914:	61 e0       	ldi	r22, 0x01	; 1
    9916:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
				for(i=0; i<14; i++) {
					usart0Transmit(irCommStateTemp[i],1);
    991a:	80 91 35 05 	lds	r24, 0x0535
    991e:	61 e0       	ldi	r22, 0x01	; 1
    9920:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
    9924:	80 91 36 05 	lds	r24, 0x0536
    9928:	61 e0       	ldi	r22, 0x01	; 1
    992a:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
    992e:	80 91 37 05 	lds	r24, 0x0537
    9932:	61 e0       	ldi	r22, 0x01	; 1
    9934:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
    9938:	80 91 38 05 	lds	r24, 0x0538
    993c:	61 e0       	ldi	r22, 0x01	; 1
    993e:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
    9942:	80 91 39 05 	lds	r24, 0x0539
    9946:	61 e0       	ldi	r22, 0x01	; 1
    9948:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
    994c:	80 91 3a 05 	lds	r24, 0x053A
    9950:	61 e0       	ldi	r22, 0x01	; 1
    9952:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
    9956:	80 91 3b 05 	lds	r24, 0x053B
    995a:	61 e0       	ldi	r22, 0x01	; 1
    995c:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
    9960:	80 91 3c 05 	lds	r24, 0x053C
    9964:	61 e0       	ldi	r22, 0x01	; 1
    9966:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
    996a:	80 91 3d 05 	lds	r24, 0x053D
    996e:	61 e0       	ldi	r22, 0x01	; 1
    9970:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
    9974:	80 91 3e 05 	lds	r24, 0x053E
    9978:	61 e0       	ldi	r22, 0x01	; 1
    997a:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
    997e:	80 91 3f 05 	lds	r24, 0x053F
    9982:	61 e0       	ldi	r22, 0x01	; 1
    9984:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
    9988:	80 91 40 05 	lds	r24, 0x0540
    998c:	61 e0       	ldi	r22, 0x01	; 1
    998e:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
    9992:	80 91 41 05 	lds	r24, 0x0541
    9996:	61 e0       	ldi	r22, 0x01	; 1
    9998:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
    999c:	80 91 42 05 	lds	r24, 0x0542
    99a0:	61 e0       	ldi	r22, 0x01	; 1
    99a2:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
    99a6:	c2 e9       	ldi	r28, 0x92	; 146
    99a8:	d9 e0       	ldi	r29, 0x09	; 9
				}
				for(i=0; i<200; i++) {
					irCommTempValue = irCommBitsSignalTemp[i];
    99aa:	88 81       	ld	r24, Y
    99ac:	99 81       	ldd	r25, Y+1	; 0x01
    99ae:	22 96       	adiw	r28, 0x02	; 2
    99b0:	80 93 d8 04 	sts	0x04D8, r24
    99b4:	90 93 d9 04 	sts	0x04D9, r25
					usart0Transmit(irCommTempValue&0xFF,1);
    99b8:	61 e0       	ldi	r22, 0x01	; 1
    99ba:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
					usart0Transmit(irCommTempValue>>8,1);
    99be:	80 91 d9 04 	lds	r24, 0x04D9
    99c2:	61 e0       	ldi	r22, 0x01	; 1
    99c4:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
				usart0Transmit(irCommSyncStateTemp[0],1);
				usart0Transmit(irCommSyncStateTemp[1],1);
				for(i=0; i<14; i++) {
					usart0Transmit(irCommStateTemp[i],1);
				}
				for(i=0; i<200; i++) {
    99c8:	2b e0       	ldi	r18, 0x0B	; 11
    99ca:	c2 32       	cpi	r28, 0x22	; 34
    99cc:	d2 07       	cpc	r29, r18
    99ce:	69 f7       	brne	.-38     	; 0x99aa <irCommTasks+0xc5a>
					irCommTempValue = irCommBitsSignalTemp[i];
					usart0Transmit(irCommTempValue&0xFF,1);
					usart0Transmit(irCommTempValue>>8,1);
				}
				for(i=0; i<10; i++) {
					usart0Transmit(irCommRxBitReceivedTemp[i],1);
    99d0:	80 91 58 08 	lds	r24, 0x0858
    99d4:	61 e0       	ldi	r22, 0x01	; 1
    99d6:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
    99da:	80 91 59 08 	lds	r24, 0x0859
    99de:	61 e0       	ldi	r22, 0x01	; 1
    99e0:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
    99e4:	80 91 5a 08 	lds	r24, 0x085A
    99e8:	61 e0       	ldi	r22, 0x01	; 1
    99ea:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
    99ee:	80 91 5b 08 	lds	r24, 0x085B
    99f2:	61 e0       	ldi	r22, 0x01	; 1
    99f4:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
    99f8:	80 91 5c 08 	lds	r24, 0x085C
    99fc:	61 e0       	ldi	r22, 0x01	; 1
    99fe:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
    9a02:	80 91 5d 08 	lds	r24, 0x085D
    9a06:	61 e0       	ldi	r22, 0x01	; 1
    9a08:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
    9a0c:	80 91 5e 08 	lds	r24, 0x085E
    9a10:	61 e0       	ldi	r22, 0x01	; 1
    9a12:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
    9a16:	80 91 5f 08 	lds	r24, 0x085F
    9a1a:	61 e0       	ldi	r22, 0x01	; 1
    9a1c:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
    9a20:	80 91 60 08 	lds	r24, 0x0860
    9a24:	61 e0       	ldi	r22, 0x01	; 1
    9a26:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
    9a2a:	80 91 61 08 	lds	r24, 0x0861
    9a2e:	61 e0       	ldi	r22, 0x01	; 1
    9a30:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
				}
				usart0Transmit(irCommRxCrc,1);
    9a34:	80 91 01 05 	lds	r24, 0x0501
    9a38:	61 e0       	ldi	r22, 0x01	; 1
    9a3a:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
				usart0Transmit(irCommRxCrcError,1);
    9a3e:	80 91 11 05 	lds	r24, 0x0511
    9a42:	61 e0       	ldi	r22, 0x01	; 1
    9a44:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
				usart0Transmit(irCommRxByte,1);
    9a48:	80 91 12 05 	lds	r24, 0x0512
    9a4c:	61 e0       	ldi	r22, 0x01	; 1
    9a4e:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>
				usart0Transmit(irCommRxByteExpected,1);				
    9a52:	80 91 15 05 	lds	r24, 0x0515
    9a56:	61 e0       	ldi	r22, 0x01	; 1
    9a58:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <usart0Transmit>

				irCommState = IRCOMM_RX_STOP;
    9a5c:	89 e0       	ldi	r24, 0x09	; 9
    9a5e:	80 93 d7 04 	sts	0x04D7, r24
				break;
    9a62:	8e c9       	rjmp	.-3300   	; 0x8d80 <irCommTasks+0x30>

	if(irCommMode==IRCOMM_MODE_RECEIVE) {

		switch(irCommState) {
			case IRCOMM_RX_IDLE_STATE:				
				if((irCommRxStartBitDetected==0) && (irCommEnabled!=irCommEnabledNext)) {
    9a64:	80 91 1a 05 	lds	r24, 0x051A
    9a68:	88 23       	and	r24, r24
    9a6a:	09 f0       	breq	.+2      	; 0x9a6e <irCommTasks+0xd1e>
    9a6c:	89 c9       	rjmp	.-3310   	; 0x8d80 <irCommTasks+0x30>
    9a6e:	90 91 d4 04 	lds	r25, 0x04D4
    9a72:	80 91 d5 04 	lds	r24, 0x04D5
    9a76:	98 17       	cp	r25, r24
    9a78:	09 f4       	brne	.+2      	; 0x9a7c <irCommTasks+0xd2c>
    9a7a:	82 c9       	rjmp	.-3324   	; 0x8d80 <irCommTasks+0x30>
					if((getTime100MicroSec() - irCommTxLastTransmissionTime) > PAUSE_200_MSEC) {
    9a7c:	0e 94 3f 21 	call	0x427e	; 0x427e <getTime100MicroSec>
    9a80:	20 91 20 05 	lds	r18, 0x0520
    9a84:	30 91 21 05 	lds	r19, 0x0521
    9a88:	40 91 22 05 	lds	r20, 0x0522
    9a8c:	50 91 23 05 	lds	r21, 0x0523
    9a90:	62 1b       	sub	r22, r18
    9a92:	73 0b       	sbc	r23, r19
    9a94:	84 0b       	sbc	r24, r20
    9a96:	95 0b       	sbc	r25, r21
    9a98:	64 38       	cpi	r22, 0x84	; 132
    9a9a:	27 e0       	ldi	r18, 0x07	; 7
    9a9c:	72 07       	cpc	r23, r18
    9a9e:	20 e0       	ldi	r18, 0x00	; 0
    9aa0:	82 07       	cpc	r24, r18
    9aa2:	20 e0       	ldi	r18, 0x00	; 0
    9aa4:	92 07       	cpc	r25, r18
    9aa6:	08 f4       	brcc	.+2      	; 0x9aaa <irCommTasks+0xd5a>
    9aa8:	6b c9       	rjmp	.-3370   	; 0x8d80 <irCommTasks+0x30>
#include "irCommunication.h"


void irCommInitTransmitter() {
	irCommEnabled = IRCOMM_MODE_TRANSMIT;
    9aaa:	82 e0       	ldi	r24, 0x02	; 2
    9aac:	80 93 d4 04 	sts	0x04D4, r24
	irCommState = IRCOMM_TX_IDLE_STATE;
    9ab0:	10 93 d7 04 	sts	0x04D7, r17
    9ab4:	65 c9       	rjmp	.-3382   	; 0x8d80 <irCommTasks+0x30>
				}

				irCommProxMean = (int)(irCommProxSum / IRCOMM_SAMPLING_WINDOW);

				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    9ab6:	20 93 fc 04 	sts	0x04FC, r18
					irCommBitsSignalTemp[irCommBitsSignalIndexTemp] = irCommMaxSensorSignal[i];
					irCommBitsSignalIndexTemp++;
				}
						
				// start counting number of switch around mean signal
				if(irCommMaxSensorSignal[0] > 0) {
    9aba:	80 91 34 0b 	lds	r24, 0x0B34
    9abe:	90 91 35 0b 	lds	r25, 0x0B35
    9ac2:	18 16       	cp	r1, r24
    9ac4:	19 06       	cpc	r1, r25
    9ac6:	0c f0       	brlt	.+2      	; 0x9aca <irCommTasks+0xd7a>
    9ac8:	17 c1       	rjmp	.+558    	; 0x9cf8 <irCommTasks+0xfa8>
					irCommSignalState = 1;
    9aca:	81 e0       	ldi	r24, 0x01	; 1
    9acc:	80 93 0e 05 	sts	0x050E, r24
    9ad0:	21 e0       	ldi	r18, 0x01	; 1
    9ad2:	38 2f       	mov	r19, r24
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
    9ad4:	e6 e3       	ldi	r30, 0x36	; 54
    9ad6:	fb e0       	ldi	r31, 0x0B	; 11
    9ad8:	40 e0       	ldi	r20, 0x00	; 0
    9ada:	07 c0       	rjmp	.+14     	; 0x9aea <irCommTasks+0xd9a>
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
    9adc:	27 fd       	sbrc	r18, 7
    9ade:	0f c0       	rjmp	.+30     	; 0x9afe <irCommTasks+0xdae>
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
    9ae0:	2b e0       	ldi	r18, 0x0B	; 11
    9ae2:	ec 35       	cpi	r30, 0x5C	; 92
    9ae4:	f2 07       	cpc	r31, r18
    9ae6:	71 f0       	breq	.+28     	; 0x9b04 <irCommTasks+0xdb4>
    9ae8:	23 2f       	mov	r18, r19
					if(irCommMaxSensorSignal[i] > 0) {
    9aea:	81 91       	ld	r24, Z+
    9aec:	91 91       	ld	r25, Z+
    9aee:	18 16       	cp	r1, r24
    9af0:	19 06       	cpc	r1, r25
    9af2:	a4 f3       	brlt	.-24     	; 0x9adc <irCommTasks+0xd8c>
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
							irCommSwitchCount++;
						}
					} else {
						if(irCommSignalState > 0) {
    9af4:	12 16       	cp	r1, r18
    9af6:	a4 f7       	brge	.-24     	; 0x9ae0 <irCommTasks+0xd90>
							irCommSignalState = -1;
							irCommSwitchCount++;
    9af8:	4f 5f       	subi	r20, 0xFF	; 255
							irCommSignalState = 1;
							irCommSwitchCount++;
						}
					} else {
						if(irCommSignalState > 0) {
							irCommSignalState = -1;
    9afa:	3f ef       	ldi	r19, 0xFF	; 255
    9afc:	f1 cf       	rjmp	.-30     	; 0x9ae0 <irCommTasks+0xd90>
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
							irCommSwitchCount++;
    9afe:	4f 5f       	subi	r20, 0xFF	; 255
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
    9b00:	31 e0       	ldi	r19, 0x01	; 1
    9b02:	ee cf       	rjmp	.-36     	; 0x9ae0 <irCommTasks+0xd90>
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
    9b04:	30 93 0e 05 	sts	0x050E, r19
    9b08:	40 93 0f 05 	sts	0x050F, r20
							irCommSwitchCount++;
						}
					}
				}
				// check whether we received either a "0" or a "1"
				if(irCommSwitchCount >= (IRCOMM_BIT0_SWITCH_COUNT-2)) {
    9b0c:	46 30       	cpi	r20, 0x06	; 6
    9b0e:	08 f4       	brcc	.+2      	; 0x9b12 <irCommTasks+0xdc2>
    9b10:	73 c0       	rjmp	.+230    	; 0x9bf8 <irCommTasks+0xea8>
					irCommRxBitReceived[irCommRxBitCount] = 0;
    9b12:	80 91 10 05 	lds	r24, 0x0510
    9b16:	e8 2f       	mov	r30, r24
    9b18:	f0 e0       	ldi	r31, 0x00	; 0
    9b1a:	e7 5a       	subi	r30, 0xA7	; 167
    9b1c:	fa 4f       	sbci	r31, 0xFA	; 250
    9b1e:	10 82       	st	Z, r1
					if(irCommRxBitCount<8) {	// do not consider the crc for byte interpretation
    9b20:	88 30       	cpi	r24, 0x08	; 8
    9b22:	28 f4       	brcc	.+10     	; 0x9b2e <irCommTasks+0xdde>
						irCommRxByte = irCommRxByte<<1;	// bit0, only shift
    9b24:	90 91 12 05 	lds	r25, 0x0512
    9b28:	99 0f       	add	r25, r25
    9b2a:	90 93 12 05 	sts	0x0512, r25
					resetDebugVariables();
					break;

				}

				if(irCommRxBitReceivedIndexTemp>9) {
    9b2e:	90 91 fd 04 	lds	r25, 0x04FD
    9b32:	9a 30       	cpi	r25, 0x0A	; 10
    9b34:	08 f0       	brcs	.+2      	; 0x9b38 <irCommTasks+0xde8>
    9b36:	79 c0       	rjmp	.+242    	; 0x9c2a <irCommTasks+0xeda>
    9b38:	a9 2f       	mov	r26, r25
    9b3a:	b0 e0       	ldi	r27, 0x00	; 0
    9b3c:	9f 5f       	subi	r25, 0xFF	; 255
					irCommRxBitReceivedIndexTemp = 9;
					//updateRedLed(0);
				}
				irCommRxBitReceivedTemp[irCommRxBitReceivedIndexTemp] = irCommRxBitReceived[irCommRxBitCount];
    9b3e:	a8 5a       	subi	r26, 0xA8	; 168
    9b40:	b7 4f       	sbci	r27, 0xF7	; 247
    9b42:	e8 2f       	mov	r30, r24
    9b44:	f0 e0       	ldi	r31, 0x00	; 0
    9b46:	e7 5a       	subi	r30, 0xA7	; 167
    9b48:	fa 4f       	sbci	r31, 0xFA	; 250
    9b4a:	20 81       	ld	r18, Z
    9b4c:	2c 93       	st	X, r18
				irCommRxBitReceivedIndexTemp++;
    9b4e:	90 93 fd 04 	sts	0x04FD, r25

				setGreenLed(irCommRxBitCount, 1);
    9b52:	61 e0       	ldi	r22, 0x01	; 1
    9b54:	0e 94 e8 3d 	call	0x7bd0	; 0x7bd0 <setGreenLed>

				irCommRxBitCount++;
    9b58:	80 91 10 05 	lds	r24, 0x0510
    9b5c:	8f 5f       	subi	r24, 0xFF	; 255
    9b5e:	80 93 10 05 	sts	0x0510, r24
				if(irCommRxBitCount == 10) {	// received 8 bit of data + 2 bit of crc
    9b62:	8a 30       	cpi	r24, 0x0A	; 10
    9b64:	09 f4       	brne	.+2      	; 0x9b68 <irCommTasks+0xe18>
    9b66:	ce c0       	rjmp	.+412    	; 0x9d04 <irCommTasks+0xfb4>
					}
					irCommStateTemp[irCommStateIndexTemp] = irCommState;
					irCommStateIndexTemp++;

				} else {
					irCommState = IRCOMM_RX_WAITING_BIT;
    9b68:	85 e0       	ldi	r24, 0x05	; 5
    9b6a:	80 93 d7 04 	sts	0x04D7, r24

					if(irCommStateIndexTemp>13) {
    9b6e:	80 91 fa 04 	lds	r24, 0x04FA
    9b72:	8e 30       	cpi	r24, 0x0E	; 14
    9b74:	08 f0       	brcs	.+2      	; 0x9b78 <irCommTasks+0xe28>
    9b76:	00 cb       	rjmp	.-2560   	; 0x9178 <irCommTasks+0x428>
    9b78:	e8 2f       	mov	r30, r24
    9b7a:	f0 e0       	ldi	r31, 0x00	; 0
    9b7c:	8f 5f       	subi	r24, 0xFF	; 255
    9b7e:	ff ca       	rjmp	.-2562   	; 0x917e <irCommTasks+0x42e>
							irCommStartDiffTemp[irCommStartDiffIndexTemp] = irCommTempValue;
							irCommStartDiffIndexTemp++;
							

							if(irCommMaxSensorSignal[i] == irCommTempMax) {
								irCommRxPeakHighToLow = 0;
    9b80:	10 92 1b 05 	sts	0x051B, r1
    9b84:	84 cc       	rjmp	.-1784   	; 0x948e <irCommTasks+0x73e>
							irCommTempMax = irCommMaxSensorSignal[i];
						}
						irCommTempValue = (irCommTempMax - irCommTempMin);						
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {

							if(irCommStartDiffIndexTemp>1) {
    9b86:	2c 2d       	mov	r18, r12
    9b88:	30 e0       	ldi	r19, 0x00	; 0
    9b8a:	c3 94       	inc	r12
    9b8c:	6f cc       	rjmp	.-1826   	; 0x946c <irCommTasks+0x71c>
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
					irCommTxBitToTransmit[9-i] = irCommTempValue;
					if(irCommTempValue==1) {
						irCommTxCrc++;
    9b8e:	4f 5f       	subi	r20, 0xFF	; 255
    9b90:	a9 c9       	rjmp	.-3246   	; 0x8ee4 <irCommTasks+0x194>
    9b92:	4f 5f       	subi	r20, 0xFF	; 255
    9b94:	78 c9       	rjmp	.-3344   	; 0x8e86 <irCommTasks+0x136>
    9b96:	4f 5f       	subi	r20, 0xFF	; 255
    9b98:	65 c9       	rjmp	.-3382   	; 0x8e64 <irCommTasks+0x114>
    9b9a:	4f 5f       	subi	r20, 0xFF	; 255
    9b9c:	54 c9       	rjmp	.-3416   	; 0x8e46 <irCommTasks+0xf6>
    9b9e:	4f 5f       	subi	r20, 0xFF	; 255
    9ba0:	45 c9       	rjmp	.-3446   	; 0x8e2c <irCommTasks+0xdc>

			case IRCOMM_TX_COMPUTE_TIMINGS:
				//updateBlueLed(255);
				if(irCommTxBitToTransmit[irCommTxBitCount] == 3) {
					//updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START2_DURATION;					
    9ba2:	80 ef       	ldi	r24, 0xF0	; 240
    9ba4:	90 e0       	ldi	r25, 0x00	; 0
    9ba6:	90 93 28 05 	sts	0x0528, r25
    9baa:	80 93 27 05 	sts	0x0527, r24
					irCommTxSwitchCount = IRCOMM_BIT_START2_SWITCH_COUNT;
    9bae:	81 e0       	ldi	r24, 0x01	; 1
    9bb0:	80 93 29 05 	sts	0x0529, r24
    9bb4:	05 cb       	rjmp	.-2550   	; 0x91c0 <irCommTasks+0x470>
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
					irCommTxBitToTransmit[9-i] = irCommTempValue;
					if(irCommTempValue==1) {
						irCommTxCrc++;
    9bb6:	4f 5f       	subi	r20, 0xFF	; 255
    9bb8:	8a c9       	rjmp	.-3308   	; 0x8ece <irCommTasks+0x17e>
    9bba:	4f 5f       	subi	r20, 0xFF	; 255
    9bbc:	77 c9       	rjmp	.-3346   	; 0x8eac <irCommTasks+0x15c>
				if(irCommTxBitCount == 0) {
					//PORTA = irCommTxSensorMask;
					if(irCommTxSensorGroup==0) {
						PORTA = 0xAA;
					} else {
						PORTA = 0x55;
    9bbe:	85 e5       	ldi	r24, 0x55	; 85
    9bc0:	82 b9       	out	0x02, r24	; 2
    9bc2:	07 cb       	rjmp	.-2546   	; 0x91d2 <irCommTasks+0x482>
							

							if(irCommMaxSensorSignal[i] == irCommTempMax) {
								irCommRxPeakHighToLow = 0;
							} else if(irCommMaxSensorSignal[i] == irCommTempMin) {
								irCommRxPeakHighToLow = 1;
    9bc4:	50 92 1b 05 	sts	0x051B, r5
    9bc8:	62 cc       	rjmp	.-1852   	; 0x948e <irCommTasks+0x73e>
						}
						if(irCommTempMax < irCommMaxSensorSignal[i]) {
							irCommTempMax = irCommMaxSensorSignal[i];
						}	
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
							if((irCommMaxSensorSignal[i]==irCommTempMax) && (irCommRxPeakHighToLow==1)) {
    9bca:	20 91 1b 05 	lds	r18, 0x051B
    9bce:	21 30       	cpi	r18, 0x01	; 1
    9bd0:	09 f0       	breq	.+2      	; 0x9bd4 <irCommTasks+0xe84>
    9bd2:	97 cc       	rjmp	.-1746   	; 0x9502 <irCommTasks+0x7b2>
    9bd4:	9f cc       	rjmp	.-1730   	; 0x9514 <irCommTasks+0x7c4>
					//if(irCommRxStartBitDetected == 1) {	// signal becomes too low to be reliable...or something else happened				
					//	irCommState = IRCOMM_RX_DEBUG;
					//	irCommAdcRxState = 12;
					//	updateGreenLed(0);
					//} else {
						irCommRxStartBitDetected = 0;
    9bd6:	10 92 1a 05 	sts	0x051A, r1
						irCommRxByte += 1;
					}
				} else {	// error...no significant signal perceived
					//irCommRxBitReceived[irCommRxBitCount] = 0xFF;
					//updateRedLed(0);
					currentProx = 0;
    9bda:	10 92 34 02 	sts	0x0234, r1
					adcSaveDataTo = SKIP_SAMPLE;
    9bde:	85 e0       	ldi	r24, 0x05	; 5
    9be0:	80 93 c9 02 	sts	0x02C9, r24
					adcSamplingState = 0;
    9be4:	10 92 ca 02 	sts	0x02CA, r1
					irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;					
    9be8:	10 92 d6 04 	sts	0x04D6, r1
					irCommState = IRCOMM_RX_IDLE_STATE;
    9bec:	81 e0       	ldi	r24, 0x01	; 1
    9bee:	80 93 d7 04 	sts	0x04D7, r24

					//irCommState = IRCOMM_RX_DEBUG;
					//irCommAdcRxState = 12;
					//break;

					resetDebugVariables();
    9bf2:	0e 94 ff 45 	call	0x8bfe	; 0x8bfe <resetDebugVariables>
					break;
    9bf6:	c4 c8       	rjmp	.-3704   	; 0x8d80 <irCommTasks+0x30>
				if(irCommSwitchCount >= (IRCOMM_BIT0_SWITCH_COUNT-2)) {
					irCommRxBitReceived[irCommRxBitCount] = 0;
					if(irCommRxBitCount<8) {	// do not consider the crc for byte interpretation
						irCommRxByte = irCommRxByte<<1;	// bit0, only shift
					}
				} else if(irCommSwitchCount >= (IRCOMM_BIT1_SWITCH_COUNT-1)) {
    9bf8:	43 30       	cpi	r20, 0x03	; 3
    9bfa:	78 f3       	brcs	.-34     	; 0x9bda <irCommTasks+0xe8a>
					irCommRxBitReceived[irCommRxBitCount] = 1;
    9bfc:	80 91 10 05 	lds	r24, 0x0510
    9c00:	e8 2f       	mov	r30, r24
    9c02:	f0 e0       	ldi	r31, 0x00	; 0
    9c04:	e7 5a       	subi	r30, 0xA7	; 167
    9c06:	fa 4f       	sbci	r31, 0xFA	; 250
    9c08:	91 e0       	ldi	r25, 0x01	; 1
    9c0a:	90 83       	st	Z, r25
					if(irCommRxBitCount<8) {	// do not consider the crc for byte interpretation
    9c0c:	88 30       	cpi	r24, 0x08	; 8
    9c0e:	08 f0       	brcs	.+2      	; 0x9c12 <irCommTasks+0xec2>
    9c10:	8e cf       	rjmp	.-228    	; 0x9b2e <irCommTasks+0xdde>
						irCommRxCrc++;
    9c12:	90 91 01 05 	lds	r25, 0x0501
    9c16:	9f 5f       	subi	r25, 0xFF	; 255
    9c18:	90 93 01 05 	sts	0x0501, r25
						irCommRxByte = irCommRxByte<<1;	// bit1, shift and add 1
    9c1c:	90 91 12 05 	lds	r25, 0x0512
    9c20:	99 0f       	add	r25, r25
						irCommRxByte += 1;
    9c22:	9f 5f       	subi	r25, 0xFF	; 255
    9c24:	90 93 12 05 	sts	0x0512, r25
    9c28:	82 cf       	rjmp	.-252    	; 0x9b2e <irCommTasks+0xdde>
					resetDebugVariables();
					break;

				}

				if(irCommRxBitReceivedIndexTemp>9) {
    9c2a:	9a e0       	ldi	r25, 0x0A	; 10
    9c2c:	a9 e0       	ldi	r26, 0x09	; 9
    9c2e:	b0 e0       	ldi	r27, 0x00	; 0
    9c30:	86 cf       	rjmp	.-244    	; 0x9b3e <irCommTasks+0xdee>
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 2) {
					//updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START1_DURATION;					
					irCommTxSwitchCount = IRCOMM_BIT_START1_SWITCH_COUNT;
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 1) {
					irCommTxDuration = IRCOMM_BIT1_DURATOIN;					
    9c32:	8c e3       	ldi	r24, 0x3C	; 60
    9c34:	90 e0       	ldi	r25, 0x00	; 0
    9c36:	90 93 28 05 	sts	0x0528, r25
    9c3a:	80 93 27 05 	sts	0x0527, r24
					irCommTxSwitchCount = IRCOMM_BIT1_SWITCH_COUNT;
    9c3e:	84 e0       	ldi	r24, 0x04	; 4
    9c40:	80 93 29 05 	sts	0x0529, r24
    9c44:	bd ca       	rjmp	.-2694   	; 0x91c0 <irCommTasks+0x470>
				irCommSwitchCountIndexTemp++;
				

				turnOffGreenLeds();
				if(irCommRxPeakHighToLow==1) {
					if(irCommRxStartBitDetected==1) {
    9c46:	90 91 1a 05 	lds	r25, 0x051A
    9c4a:	91 30       	cpi	r25, 0x01	; 1
    9c4c:	09 f4       	brne	.+2      	; 0x9c50 <irCommTasks+0xf00>
    9c4e:	05 c1       	rjmp	.+522    	; 0x9e5a <irCommTasks+0x110a>

							resetDebugVariables();				
							break;
						}
					} else {
						if(irCommSwitchCount==2) {
    9c50:	90 91 0f 05 	lds	r25, 0x050F
    9c54:	92 30       	cpi	r25, 0x02	; 2
    9c56:	09 f4       	brne	.+2      	; 0x9c5a <irCommTasks+0xf0a>
    9c58:	27 c1       	rjmp	.+590    	; 0x9ea8 <irCommTasks+0x1158>
								irCommRxBitCount = 0;	
								irCommRxCrc = 0;	
								irCommRxByte = 0;
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
							}
						} else if(irCommSwitchCount==1) {		
    9c5a:	91 30       	cpi	r25, 0x01	; 1
    9c5c:	09 f4       	brne	.+2      	; 0x9c60 <irCommTasks+0xf10>
    9c5e:	a6 c1       	rjmp	.+844    	; 0x9fac <irCommTasks+0x125c>
								irCommState = IRCOMM_RX_IDLE_STATE;

								irCommSyncStateIndexTemp++;
							}							
						} else {							
							currentProx = 0;
    9c60:	10 92 34 02 	sts	0x0234, r1
							adcSaveDataTo = SKIP_SAMPLE;
    9c64:	95 e0       	ldi	r25, 0x05	; 5
    9c66:	90 93 c9 02 	sts	0x02C9, r25
							adcSamplingState = 0;
    9c6a:	10 92 ca 02 	sts	0x02CA, r1
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;							
    9c6e:	10 92 d6 04 	sts	0x04D6, r1
							irCommState = IRCOMM_RX_IDLE_STATE;	
    9c72:	80 93 d7 04 	sts	0x04D7, r24

							if(irCommSyncStateIndexTemp>1) {
    9c76:	80 91 fb 04 	lds	r24, 0x04FB
    9c7a:	82 30       	cpi	r24, 0x02	; 2
    9c7c:	08 f0       	brcs	.+2      	; 0x9c80 <irCommTasks+0xf30>
    9c7e:	81 e0       	ldi	r24, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 11;
    9c80:	e8 2f       	mov	r30, r24
    9c82:	f0 e0       	ldi	r31, 0x00	; 0
    9c84:	ed 59       	subi	r30, 0x9D	; 157
    9c86:	fa 4f       	sbci	r31, 0xFA	; 250
    9c88:	9b e0       	ldi	r25, 0x0B	; 11
    9c8a:	90 83       	st	Z, r25
							irCommSyncStateIndexTemp++;
    9c8c:	8f 5f       	subi	r24, 0xFF	; 255
    9c8e:	80 93 fb 04 	sts	0x04FB, r24
							//irCommState = IRCOMM_RX_DEBUG;
							//irCommAdcRxState = 12;
							//updateRedLed(0);
							//break;

							resetDebugVariables();				
    9c92:	0e 94 ff 45 	call	0x8bfe	; 0x8bfe <resetDebugVariables>
							break;
    9c96:	74 c8       	rjmp	.-3864   	; 0x8d80 <irCommTasks+0x30>
							irCommSwitchCount++;
						}
					}
				}

				if(irCommSwitchCountIndexTemp>1) {
    9c98:	e8 2f       	mov	r30, r24
    9c9a:	f0 e0       	ldi	r31, 0x00	; 0
    9c9c:	8f 5f       	subi	r24, 0xFF	; 255
    9c9e:	ea cc       	rjmp	.-1580   	; 0x9674 <irCommTasks+0x924>
					//updateBlueLed(0);
				}
				irCommMaxSensorValueCurrTemp[irCommMaxSensorValueCurrIndexTemp] = irCommMaxSensorValueCurr[irCommRxMaxSensor];
				irCommMaxSensorValueCurrIndexTemp++;
				
				if(irCommMinSensorValueCurrIndexTemp>1) {
    9ca0:	a4 2f       	mov	r26, r20
    9ca2:	b0 e0       	ldi	r27, 0x00	; 0
    9ca4:	4f 5f       	subi	r20, 0xFF	; 255
    9ca6:	4f ca       	rjmp	.-2914   	; 0x9146 <irCommTasks+0x3f6>
					//updateBlueLed(0);
				}
				irCommRxMaxDiffTemp[irCommRxMaxDiffIndexTemp] = irCommRxMaxDiff;
				irCommRxMaxDiffIndexTemp++;
				
				if(irCommMaxSensorValueCurrIndexTemp>1) {
    9ca8:	c4 2f       	mov	r28, r20
    9caa:	d0 e0       	ldi	r29, 0x00	; 0
    9cac:	64 2f       	mov	r22, r20
    9cae:	6f 5f       	subi	r22, 0xFF	; 255
    9cb0:	30 ca       	rjmp	.-2976   	; 0x9112 <irCommTasks+0x3c2>
					//updateBlueLed(0);
				}
				irCommRxMaxSensorTemp[irCommRxMaxSensorIndexTemp] = irCommRxMaxSensor;
				irCommRxMaxSensorIndexTemp++;
					
				if(irCommRxMaxDiffIndexTemp>1) {
    9cb2:	c4 2f       	mov	r28, r20
    9cb4:	d0 e0       	ldi	r29, 0x00	; 0
    9cb6:	4f 5f       	subi	r20, 0xFF	; 255
    9cb8:	19 ca       	rjmp	.-3022   	; 0x90ec <irCommTasks+0x39c>
						irCommRxMaxDiff = irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i];
						irCommRxMaxSensor = i;
					}
				}

				if(irCommRxMaxSensorIndexTemp>1) {
    9cba:	c2 2f       	mov	r28, r18
    9cbc:	d0 e0       	ldi	r29, 0x00	; 0
    9cbe:	42 2f       	mov	r20, r18
    9cc0:	4f 5f       	subi	r20, 0xFF	; 255
    9cc2:	00 ca       	rjmp	.-3072   	; 0x90c4 <irCommTasks+0x374>
					//updateRedLed(0);
				}
				irCommRxPeakHighToLowTemp[irCommRxPeakHighToLowIndexTemp] = irCommRxPeakHighToLow;
				irCommRxPeakHighToLowIndexTemp++;
				
				if(irCommRxStartPeakDurationIndexTemp>1) {
    9cc4:	e2 2f       	mov	r30, r18
    9cc6:	f0 e0       	ldi	r31, 0x00	; 0
    9cc8:	2f 5f       	subi	r18, 0xFF	; 255
    9cca:	61 cc       	rjmp	.-1854   	; 0x958e <irCommTasks+0x83e>
					//updateRedLed(0);
				}
				irCommShiftCountTemp[irCommShiftCountIndexTemp] = irCommShiftCount;
				irCommShiftCountIndexTemp++;
				
				if(irCommRxPeakHighToLowIndexTemp>1) {
    9ccc:	e2 2f       	mov	r30, r18
    9cce:	f0 e0       	ldi	r31, 0x00	; 0
    9cd0:	2f 5f       	subi	r18, 0xFF	; 255
    9cd2:	4e cc       	rjmp	.-1892   	; 0x9570 <irCommTasks+0x820>
						
				// start counting number of switch around mean signal
				if(irCommMaxSensorSignal[0] > 0) {
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
    9cd4:	8f ef       	ldi	r24, 0xFF	; 255
    9cd6:	80 93 0e 05 	sts	0x050E, r24
    9cda:	2f ef       	ldi	r18, 0xFF	; 255
    9cdc:	38 2f       	mov	r19, r24
    9cde:	a7 cc       	rjmp	.-1714   	; 0x962e <irCommTasks+0x8de>
				//if(irCommComputeShift != 0) {	// it should not be never 1 because the difference between min and max in the current signal
					//updateRedLed(0);			// is at least IRCOMM_DETECTION_AMPLITUDE_THR (checked in the previous state)
				//}
				irCommProxMean = (int)(irCommProxSum / IRCOMM_SAMPLING_WINDOW);

				if(irCommProxMeanIndexTemp>1) {
    9ce0:	e8 2f       	mov	r30, r24
    9ce2:	f0 e0       	ldi	r31, 0x00	; 0
    9ce4:	8f 5f       	subi	r24, 0xFF	; 255
    9ce6:	6d cc       	rjmp	.-1830   	; 0x95c2 <irCommTasks+0x872>
					//updateRedLed(0);
				}
				irCommComputeShiftTemp[irCommComputeShiftIndexTemp] = irCommComputeShift;
				irCommComputeShiftIndexTemp++;
				
				if(irCommShiftCountIndexTemp>1) {
    9ce8:	e2 2f       	mov	r30, r18
    9cea:	f0 e0       	ldi	r31, 0x00	; 0
    9cec:	2f 5f       	subi	r18, 0xFF	; 255
    9cee:	33 cc       	rjmp	.-1946   	; 0x9556 <irCommTasks+0x806>
						}											
					 }

				}

				if(irCommComputeShiftIndexTemp>1) {
    9cf0:	e2 2f       	mov	r30, r18
    9cf2:	f0 e0       	ldi	r31, 0x00	; 0
    9cf4:	2f 5f       	subi	r18, 0xFF	; 255
    9cf6:	22 cc       	rjmp	.-1980   	; 0x953c <irCommTasks+0x7ec>
						
				// start counting number of switch around mean signal
				if(irCommMaxSensorSignal[0] > 0) {
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
    9cf8:	8f ef       	ldi	r24, 0xFF	; 255
    9cfa:	80 93 0e 05 	sts	0x050E, r24
    9cfe:	2f ef       	ldi	r18, 0xFF	; 255
    9d00:	38 2f       	mov	r19, r24
    9d02:	e8 ce       	rjmp	.-560    	; 0x9ad4 <irCommTasks+0xd84>

				setGreenLed(irCommRxBitCount, 1);

				irCommRxBitCount++;
				if(irCommRxBitCount == 10) {	// received 8 bit of data + 2 bit of crc
					irCommState = IRCOMM_RX_CHECK_CRC;
    9d04:	87 e0       	ldi	r24, 0x07	; 7
    9d06:	80 93 d7 04 	sts	0x04D7, r24

					if(irCommStateIndexTemp>13) {
    9d0a:	80 91 fa 04 	lds	r24, 0x04FA
    9d0e:	8e 30       	cpi	r24, 0x0E	; 14
    9d10:	08 f0       	brcs	.+2      	; 0x9d14 <irCommTasks+0xfc4>
    9d12:	32 ca       	rjmp	.-2972   	; 0x9178 <irCommTasks+0x428>
    9d14:	31 cf       	rjmp	.-414    	; 0x9b78 <irCommTasks+0xe28>
							break;
						}
					}
				} else {
					if(irCommRxStartBitDetected==1) {
						if(irCommSwitchCount==2) {
    9d16:	90 91 0f 05 	lds	r25, 0x050F
    9d1a:	92 30       	cpi	r25, 0x02	; 2
    9d1c:	09 f4       	brne	.+2      	; 0x9d20 <irCommTasks+0xfd0>
    9d1e:	e6 c0       	rjmp	.+460    	; 0x9eec <irCommTasks+0x119c>
							irCommShiftCounter = 0;
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else if(irCommSwitchCount==1) {
    9d20:	91 30       	cpi	r25, 0x01	; 1
    9d22:	09 f4       	brne	.+2      	; 0x9d26 <irCommTasks+0xfd6>
    9d24:	1b c1       	rjmp	.+566    	; 0x9f5c <irCommTasks+0x120c>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_WAITING_BIT;
						} else {
							irCommRxStartBitDetected = 0;
    9d26:	10 92 1a 05 	sts	0x051A, r1
							currentProx = 0;
    9d2a:	10 92 34 02 	sts	0x0234, r1
							adcSaveDataTo = SKIP_SAMPLE;
    9d2e:	95 e0       	ldi	r25, 0x05	; 5
    9d30:	90 93 c9 02 	sts	0x02C9, r25
							adcSamplingState = 0;
    9d34:	10 92 ca 02 	sts	0x02CA, r1
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    9d38:	10 92 d6 04 	sts	0x04D6, r1
							irCommState = IRCOMM_RX_IDLE_STATE;	
    9d3c:	80 93 d7 04 	sts	0x04D7, r24

							if(irCommSyncStateIndexTemp>1) {
    9d40:	80 91 fb 04 	lds	r24, 0x04FB
    9d44:	82 30       	cpi	r24, 0x02	; 2
    9d46:	08 f0       	brcs	.+2      	; 0x9d4a <irCommTasks+0xffa>
    9d48:	81 e0       	ldi	r24, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 13;
    9d4a:	e8 2f       	mov	r30, r24
    9d4c:	f0 e0       	ldi	r31, 0x00	; 0
    9d4e:	ed 59       	subi	r30, 0x9D	; 157
    9d50:	fa 4f       	sbci	r31, 0xFA	; 250
    9d52:	9d e0       	ldi	r25, 0x0D	; 13
    9d54:	90 83       	st	Z, r25
							irCommSyncStateIndexTemp++;
    9d56:	8f 5f       	subi	r24, 0xFF	; 255
    9d58:	80 93 fb 04 	sts	0x04FB, r24
							//irCommState = IRCOMM_RX_DEBUG;
							//irCommAdcRxState = 12;
							//updateRedLed(0);
							//break;

							resetDebugVariables();				
    9d5c:	0e 94 ff 45 	call	0x8bfe	; 0x8bfe <resetDebugVariables>
							break;
    9d60:	0f c8       	rjmp	.-4066   	; 0x8d80 <irCommTasks+0x30>
						}
					} else {
						if(irCommSwitchCount==2) {
							if(irCommSyncStateIndexTemp>1) {
    9d62:	20 91 fb 04 	lds	r18, 0x04FB
    9d66:	22 30       	cpi	r18, 0x02	; 2
    9d68:	08 f4       	brcc	.+2      	; 0x9d6c <irCommTasks+0x101c>
    9d6a:	1c c1       	rjmp	.+568    	; 0x9fa4 <irCommTasks+0x1254>
    9d6c:	22 e0       	ldi	r18, 0x02	; 2
    9d6e:	81 e0       	ldi	r24, 0x01	; 1
    9d70:	90 e0       	ldi	r25, 0x00	; 0
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 1;
    9d72:	8d 59       	subi	r24, 0x9D	; 157
    9d74:	9a 4f       	sbci	r25, 0xFA	; 250
    9d76:	31 e0       	ldi	r19, 0x01	; 1
    9d78:	ec 01       	movw	r28, r24
    9d7a:	38 83       	st	Y, r19
							irCommSyncStateIndexTemp++;
    9d7c:	20 93 fb 04 	sts	0x04FB, r18

							irCommShiftCount = IRCOMM_SAMPLING_WINDOW/2 + irCommShiftCount;
    9d80:	80 91 0a 05 	lds	r24, 0x050A
    9d84:	86 5f       	subi	r24, 0xF6	; 246
    9d86:	80 93 0a 05 	sts	0x050A, r24
							irCommRxPeakHighToLow = 0;
    9d8a:	10 92 1b 05 	sts	0x051B, r1
							irCommRxStartBitDetected = 0;
    9d8e:	10 92 1a 05 	sts	0x051A, r1
							irCommSecondBitSkipped = 0;
    9d92:	10 92 13 05 	sts	0x0513, r1
							irCommShiftCounter = 0;
    9d96:	10 92 14 05 	sts	0x0514, r1
							irCommRxBitCount = 0;	
    9d9a:	10 92 10 05 	sts	0x0510, r1
							irCommRxCrc = 0;	
    9d9e:	10 92 01 05 	sts	0x0501, r1
							irCommRxByte = 0;
    9da2:	10 92 12 05 	sts	0x0512, r1
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
    9da6:	94 e0       	ldi	r25, 0x04	; 4
    9da8:	90 93 d7 04 	sts	0x04D7, r25
    9dac:	90 e0       	ldi	r25, 0x00	; 0
							break;				
						}
					}
				}
	
				if(irCommStateIndexTemp>13) {
    9dae:	20 91 fa 04 	lds	r18, 0x04FA
    9db2:	2e 30       	cpi	r18, 0x0E	; 14
    9db4:	20 f5       	brcc	.+72     	; 0x9dfe <irCommTasks+0x10ae>
    9db6:	e2 2f       	mov	r30, r18
    9db8:	f0 e0       	ldi	r31, 0x00	; 0
    9dba:	2f 5f       	subi	r18, 0xFF	; 255
					irCommStateIndexTemp = 13;
					//updateRedLed(0);
				}
				irCommStateTemp[irCommStateIndexTemp] = irCommState;
    9dbc:	30 91 d7 04 	lds	r19, 0x04D7
    9dc0:	eb 5c       	subi	r30, 0xCB	; 203
    9dc2:	fa 4f       	sbci	r31, 0xFA	; 250
    9dc4:	30 83       	st	Z, r19
				irCommStateIndexTemp++;
    9dc6:	20 93 fa 04 	sts	0x04FA, r18
				
				if(irCommShiftCountFinalIndexTemp>1) {
    9dca:	20 91 f4 04 	lds	r18, 0x04F4
    9dce:	22 30       	cpi	r18, 0x02	; 2
    9dd0:	d0 f0       	brcs	.+52     	; 0x9e06 <irCommTasks+0x10b6>
    9dd2:	22 e0       	ldi	r18, 0x02	; 2
    9dd4:	e1 e0       	ldi	r30, 0x01	; 1
    9dd6:	f0 e0       	ldi	r31, 0x00	; 0
					irCommShiftCountFinalIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommShiftCountFinalTemp[irCommShiftCountFinalIndexTemp] = irCommShiftCount;
    9dd8:	e0 5d       	subi	r30, 0xD0	; 208
    9dda:	f4 4f       	sbci	r31, 0xF4	; 244
    9ddc:	80 83       	st	Z, r24
				irCommShiftCountFinalIndexTemp++;
    9dde:	20 93 f4 04 	sts	0x04F4, r18
				
				if(irCommRxStartBitDetectedIndexTemp>1) {
    9de2:	80 91 f9 04 	lds	r24, 0x04F9
    9de6:	82 30       	cpi	r24, 0x02	; 2
    9de8:	a0 f1       	brcs	.+104    	; 0x9e52 <irCommTasks+0x1102>
    9dea:	82 e0       	ldi	r24, 0x02	; 2
    9dec:	e1 e0       	ldi	r30, 0x01	; 1
    9dee:	f0 e0       	ldi	r31, 0x00	; 0
					irCommRxStartBitDetectedIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommRxStartBitDetectedTemp[irCommRxStartBitDetectedIndexTemp] = irCommRxStartBitDetected;
    9df0:	e2 59       	subi	r30, 0x92	; 146
    9df2:	fa 4f       	sbci	r31, 0xFA	; 250
    9df4:	90 83       	st	Z, r25
				irCommRxStartBitDetectedIndexTemp++;			
    9df6:	80 93 f9 04 	sts	0x04F9, r24
					usart0Transmit(irCommState,1);					
				}
				updateBlueLed(255);
				*/

				break;
    9dfa:	0c 94 c0 46 	jmp	0x8d80	; 0x8d80 <irCommTasks+0x30>
							break;				
						}
					}
				}
	
				if(irCommStateIndexTemp>13) {
    9dfe:	2e e0       	ldi	r18, 0x0E	; 14
    9e00:	ed e0       	ldi	r30, 0x0D	; 13
    9e02:	f0 e0       	ldi	r31, 0x00	; 0
    9e04:	db cf       	rjmp	.-74     	; 0x9dbc <irCommTasks+0x106c>
					//updateRedLed(0);
				}
				irCommStateTemp[irCommStateIndexTemp] = irCommState;
				irCommStateIndexTemp++;
				
				if(irCommShiftCountFinalIndexTemp>1) {
    9e06:	e2 2f       	mov	r30, r18
    9e08:	f0 e0       	ldi	r31, 0x00	; 0
    9e0a:	2f 5f       	subi	r18, 0xFF	; 255
    9e0c:	e5 cf       	rjmp	.-54     	; 0x9dd8 <irCommTasks+0x1088>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else if(irCommSwitchCount==1) {
							if(irCommRxStartPeakDuration > IRCOMM_SAMPLING_WINDOW/2) {
    9e0e:	90 91 1c 05 	lds	r25, 0x051C
    9e12:	9b 30       	cpi	r25, 0x0B	; 11
    9e14:	08 f4       	brcc	.+2      	; 0x9e18 <irCommTasks+0x10c8>
    9e16:	79 c0       	rjmp	.+242    	; 0x9f0a <irCommTasks+0x11ba>
								currentProx = 0;
    9e18:	10 92 34 02 	sts	0x0234, r1
								adcSaveDataTo = SKIP_SAMPLE;
    9e1c:	95 e0       	ldi	r25, 0x05	; 5
    9e1e:	90 93 c9 02 	sts	0x02C9, r25
								adcSamplingState = 0;
    9e22:	10 92 ca 02 	sts	0x02CA, r1
								irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;								
    9e26:	10 92 d6 04 	sts	0x04D6, r1
								irCommState = IRCOMM_RX_IDLE_STATE;
    9e2a:	80 93 d7 04 	sts	0x04D7, r24

								if(irCommSyncStateIndexTemp>1) {
    9e2e:	80 91 fb 04 	lds	r24, 0x04FB
    9e32:	82 30       	cpi	r24, 0x02	; 2
    9e34:	08 f0       	brcs	.+2      	; 0x9e38 <irCommTasks+0x10e8>
    9e36:	81 e0       	ldi	r24, 0x01	; 1
									irCommSyncStateIndexTemp = 1;
									//updateRedLed(0);
								}
								irCommSyncStateTemp[irCommSyncStateIndexTemp] = 14;
    9e38:	e8 2f       	mov	r30, r24
    9e3a:	f0 e0       	ldi	r31, 0x00	; 0
    9e3c:	ed 59       	subi	r30, 0x9D	; 157
    9e3e:	fa 4f       	sbci	r31, 0xFA	; 250
    9e40:	9e e0       	ldi	r25, 0x0E	; 14
    9e42:	90 83       	st	Z, r25
								irCommSyncStateIndexTemp++;
    9e44:	8f 5f       	subi	r24, 0xFF	; 255
    9e46:	80 93 fb 04 	sts	0x04FB, r24
								//irCommState = IRCOMM_RX_DEBUG;
								//irCommAdcRxState = 12;
								//updateRedLed(0);
								//break;

								resetDebugVariables();				
    9e4a:	0e 94 ff 45 	call	0x8bfe	; 0x8bfe <resetDebugVariables>
								break;
    9e4e:	0c 94 c0 46 	jmp	0x8d80	; 0x8d80 <irCommTasks+0x30>
					//updateRedLed(0);
				}
				irCommShiftCountFinalTemp[irCommShiftCountFinalIndexTemp] = irCommShiftCount;
				irCommShiftCountFinalIndexTemp++;
				
				if(irCommRxStartBitDetectedIndexTemp>1) {
    9e52:	e8 2f       	mov	r30, r24
    9e54:	f0 e0       	ldi	r31, 0x00	; 0
    9e56:	8f 5f       	subi	r24, 0xFF	; 255
    9e58:	cb cf       	rjmp	.-106    	; 0x9df0 <irCommTasks+0x10a0>
				

				turnOffGreenLeds();
				if(irCommRxPeakHighToLow==1) {
					if(irCommRxStartBitDetected==1) {
						if(irCommSwitchCount==2) {
    9e5a:	80 91 0f 05 	lds	r24, 0x050F
    9e5e:	82 30       	cpi	r24, 0x02	; 2
    9e60:	09 f4       	brne	.+2      	; 0x9e64 <irCommTasks+0x1114>
    9e62:	15 c1       	rjmp	.+554    	; 0xa08e <irCommTasks+0x133e>
							irCommShiftCounter = 0;
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_WAITING_BIT;
						} else if(irCommSwitchCount==1) {
    9e64:	81 30       	cpi	r24, 0x01	; 1
    9e66:	09 f4       	brne	.+2      	; 0x9e6a <irCommTasks+0x111a>
    9e68:	ef c0       	rjmp	.+478    	; 0xa048 <irCommTasks+0x12f8>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else {
							irCommRxStartBitDetected = 0;
    9e6a:	10 92 1a 05 	sts	0x051A, r1
							currentProx = 0;
    9e6e:	10 92 34 02 	sts	0x0234, r1
							adcSaveDataTo = SKIP_SAMPLE;
    9e72:	85 e0       	ldi	r24, 0x05	; 5
    9e74:	80 93 c9 02 	sts	0x02C9, r24
							adcSamplingState = 0;
    9e78:	10 92 ca 02 	sts	0x02CA, r1
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    9e7c:	10 92 d6 04 	sts	0x04D6, r1
							irCommState = IRCOMM_RX_IDLE_STATE;	
    9e80:	90 93 d7 04 	sts	0x04D7, r25

							if(irCommSyncStateIndexTemp>1) {
    9e84:	80 91 fb 04 	lds	r24, 0x04FB
    9e88:	82 30       	cpi	r24, 0x02	; 2
    9e8a:	08 f0       	brcs	.+2      	; 0x9e8e <irCommTasks+0x113e>
    9e8c:	81 e0       	ldi	r24, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 12;
    9e8e:	e8 2f       	mov	r30, r24
    9e90:	f0 e0       	ldi	r31, 0x00	; 0
    9e92:	ed 59       	subi	r30, 0x9D	; 157
    9e94:	fa 4f       	sbci	r31, 0xFA	; 250
    9e96:	9c e0       	ldi	r25, 0x0C	; 12
    9e98:	90 83       	st	Z, r25
							irCommSyncStateIndexTemp++;
    9e9a:	8f 5f       	subi	r24, 0xFF	; 255
    9e9c:	80 93 fb 04 	sts	0x04FB, r24
							//irCommState = IRCOMM_RX_DEBUG;
							//irCommAdcRxState = 12;
							//updateRedLed(0);
							//break;

							resetDebugVariables();				
    9ea0:	0e 94 ff 45 	call	0x8bfe	; 0x8bfe <resetDebugVariables>
							break;
    9ea4:	0c 94 c0 46 	jmp	0x8d80	; 0x8d80 <irCommTasks+0x30>
						}
					} else {
						if(irCommSwitchCount==2) {
							if(irCommRxStartPeakDuration<=3) {	// peak due to sensors sampling detected
    9ea8:	90 91 1c 05 	lds	r25, 0x051C
    9eac:	94 30       	cpi	r25, 0x04	; 4
    9eae:	08 f0       	brcs	.+2      	; 0x9eb2 <irCommTasks+0x1162>
    9eb0:	a5 c0       	rjmp	.+330    	; 0x9ffc <irCommTasks+0x12ac>
								currentProx = 0;
    9eb2:	10 92 34 02 	sts	0x0234, r1
								adcSaveDataTo = SKIP_SAMPLE;
    9eb6:	95 e0       	ldi	r25, 0x05	; 5
    9eb8:	90 93 c9 02 	sts	0x02C9, r25
								adcSamplingState = 0;
    9ebc:	10 92 ca 02 	sts	0x02CA, r1
								irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;							
    9ec0:	10 92 d6 04 	sts	0x04D6, r1
								irCommState = IRCOMM_RX_IDLE_STATE;
    9ec4:	80 93 d7 04 	sts	0x04D7, r24

								if(irCommSyncStateIndexTemp>1) {
    9ec8:	80 91 fb 04 	lds	r24, 0x04FB
    9ecc:	82 30       	cpi	r24, 0x02	; 2
    9ece:	08 f0       	brcs	.+2      	; 0x9ed2 <irCommTasks+0x1182>
    9ed0:	81 e0       	ldi	r24, 0x01	; 1
									irCommSyncStateIndexTemp = 1;
									//updateRedLed(0);
								}
								irCommSyncStateTemp[irCommSyncStateIndexTemp] = 16;
    9ed2:	e8 2f       	mov	r30, r24
    9ed4:	f0 e0       	ldi	r31, 0x00	; 0
    9ed6:	ed 59       	subi	r30, 0x9D	; 157
    9ed8:	fa 4f       	sbci	r31, 0xFA	; 250
    9eda:	90 e1       	ldi	r25, 0x10	; 16
    9edc:	90 83       	st	Z, r25
								irCommSyncStateIndexTemp++;
    9ede:	8f 5f       	subi	r24, 0xFF	; 255
    9ee0:	80 93 fb 04 	sts	0x04FB, r24
								//irCommState = IRCOMM_RX_DEBUG;
								//irCommAdcRxState = 12;
								//updateGreenLed(0);
								//break;

								resetDebugVariables();
    9ee4:	0e 94 ff 45 	call	0x8bfe	; 0x8bfe <resetDebugVariables>
								break;
    9ee8:	0c 94 c0 46 	jmp	0x8d80	; 0x8d80 <irCommTasks+0x30>
						}
					}
				} else {
					if(irCommRxStartBitDetected==1) {
						if(irCommSwitchCount==2) {
							if(irCommSyncStateIndexTemp>1) {
    9eec:	80 91 fb 04 	lds	r24, 0x04FB
    9ef0:	82 30       	cpi	r24, 0x02	; 2
    9ef2:	08 f0       	brcs	.+2      	; 0x9ef6 <irCommTasks+0x11a6>
    9ef4:	81 e0       	ldi	r24, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 5;
    9ef6:	e8 2f       	mov	r30, r24
    9ef8:	f0 e0       	ldi	r31, 0x00	; 0
    9efa:	ed 59       	subi	r30, 0x9D	; 157
    9efc:	fa 4f       	sbci	r31, 0xFA	; 250
    9efe:	95 e0       	ldi	r25, 0x05	; 5
    9f00:	90 83       	st	Z, r25
							irCommSyncStateIndexTemp++;
    9f02:	8f 5f       	subi	r24, 0xFF	; 255
    9f04:	80 93 fb 04 	sts	0x04FB, r24
    9f08:	3b cf       	rjmp	.-394    	; 0x9d80 <irCommTasks+0x1030>
								//break;

								resetDebugVariables();				
								break;
							} else {
								if(irCommSyncStateIndexTemp>1) {
    9f0a:	80 91 fb 04 	lds	r24, 0x04FB
    9f0e:	82 30       	cpi	r24, 0x02	; 2
    9f10:	08 f0       	brcs	.+2      	; 0x9f14 <irCommTasks+0x11c4>
    9f12:	81 e0       	ldi	r24, 0x01	; 1
									irCommSyncStateIndexTemp = 1;
									//updateRedLed(0);
								}
								irCommSyncStateTemp[irCommSyncStateIndexTemp] = 7;
    9f14:	e8 2f       	mov	r30, r24
    9f16:	f0 e0       	ldi	r31, 0x00	; 0
    9f18:	ed 59       	subi	r30, 0x9D	; 157
    9f1a:	fa 4f       	sbci	r31, 0xFA	; 250
    9f1c:	97 e0       	ldi	r25, 0x07	; 7
    9f1e:	90 83       	st	Z, r25
								irCommSyncStateIndexTemp++;
    9f20:	8f 5f       	subi	r24, 0xFF	; 255
    9f22:	80 93 fb 04 	sts	0x04FB, r24

								irCommShiftCount = IRCOMM_SAMPLING_WINDOW;
    9f26:	84 e1       	ldi	r24, 0x14	; 20
    9f28:	80 93 0a 05 	sts	0x050A, r24
								irCommRxPeakHighToLow = 0;
    9f2c:	10 92 1b 05 	sts	0x051B, r1
								irCommRxStartBitDetected = 0;
    9f30:	10 92 1a 05 	sts	0x051A, r1
								irCommSecondBitSkipped = 0;
    9f34:	10 92 13 05 	sts	0x0513, r1
								irCommShiftCounter = 0;
    9f38:	10 92 14 05 	sts	0x0514, r1
								irCommRxBitCount = 0;	
    9f3c:	10 92 10 05 	sts	0x0510, r1
								irCommRxCrc = 0;	
    9f40:	10 92 01 05 	sts	0x0501, r1
								irCommRxByte = 0;
    9f44:	10 92 12 05 	sts	0x0512, r1
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
    9f48:	84 e0       	ldi	r24, 0x04	; 4
    9f4a:	80 93 d7 04 	sts	0x04D7, r24
    9f4e:	90 e0       	ldi	r25, 0x00	; 0
    9f50:	84 e1       	ldi	r24, 0x14	; 20
    9f52:	2d cf       	rjmp	.-422    	; 0x9dae <irCommTasks+0x105e>
							adcSaveDataTo = SKIP_SAMPLE;
							adcSamplingState = 0;
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;							
							irCommState = IRCOMM_RX_IDLE_STATE;

							if(irCommSyncStateIndexTemp>1) {
    9f54:	82 2f       	mov	r24, r18
    9f56:	90 e0       	ldi	r25, 0x00	; 0
    9f58:	2f 5f       	subi	r18, 0xFF	; 255
    9f5a:	bb cb       	rjmp	.-2186   	; 0x96d2 <irCommTasks+0x982>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else if(irCommSwitchCount==1) {
							if(irCommSyncStateIndexTemp>1) {
    9f5c:	80 91 fb 04 	lds	r24, 0x04FB
    9f60:	82 30       	cpi	r24, 0x02	; 2
    9f62:	08 f0       	brcs	.+2      	; 0x9f66 <irCommTasks+0x1216>
    9f64:	81 e0       	ldi	r24, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 8;
    9f66:	e8 2f       	mov	r30, r24
    9f68:	f0 e0       	ldi	r31, 0x00	; 0
    9f6a:	ed 59       	subi	r30, 0x9D	; 157
    9f6c:	fa 4f       	sbci	r31, 0xFA	; 250
    9f6e:	98 e0       	ldi	r25, 0x08	; 8
    9f70:	90 83       	st	Z, r25
							irCommSyncStateIndexTemp++;
    9f72:	8f 5f       	subi	r24, 0xFF	; 255
    9f74:	80 93 fb 04 	sts	0x04FB, r24

							irCommShiftCount = 0;
    9f78:	10 92 0a 05 	sts	0x050A, r1
							irCommRxPeakHighToLow = 0;
    9f7c:	10 92 1b 05 	sts	0x051B, r1
							irCommRxStartBitDetected = 0;
    9f80:	10 92 1a 05 	sts	0x051A, r1
							irCommSecondBitSkipped = 0;
    9f84:	10 92 13 05 	sts	0x0513, r1
							irCommShiftCounter = 0;
    9f88:	10 92 14 05 	sts	0x0514, r1
							irCommRxBitCount = 0;	
    9f8c:	10 92 10 05 	sts	0x0510, r1
							irCommRxCrc = 0;	
    9f90:	10 92 01 05 	sts	0x0501, r1
							irCommRxByte = 0;
    9f94:	10 92 12 05 	sts	0x0512, r1
							irCommState = IRCOMM_RX_WAITING_BIT;
    9f98:	85 e0       	ldi	r24, 0x05	; 5
    9f9a:	80 93 d7 04 	sts	0x04D7, r24
    9f9e:	90 e0       	ldi	r25, 0x00	; 0
    9fa0:	80 e0       	ldi	r24, 0x00	; 0
    9fa2:	05 cf       	rjmp	.-502    	; 0x9dae <irCommTasks+0x105e>
							resetDebugVariables();				
							break;
						}
					} else {
						if(irCommSwitchCount==2) {
							if(irCommSyncStateIndexTemp>1) {
    9fa4:	82 2f       	mov	r24, r18
    9fa6:	90 e0       	ldi	r25, 0x00	; 0
    9fa8:	2f 5f       	subi	r18, 0xFF	; 255
    9faa:	e3 ce       	rjmp	.-570    	; 0x9d72 <irCommTasks+0x1022>
								irCommRxCrc = 0;	
								irCommRxByte = 0;
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
							}
						} else if(irCommSwitchCount==1) {		
							irCommRxStartBitDetected = 1;					
    9fac:	90 93 1a 05 	sts	0x051A, r25
							if(irCommRxStartPeakDuration > IRCOMM_SAMPLING_WINDOW/2) {
    9fb0:	80 91 1c 05 	lds	r24, 0x051C
    9fb4:	8b 30       	cpi	r24, 0x0B	; 11
    9fb6:	a0 f1       	brcs	.+104    	; 0xa020 <irCommTasks+0x12d0>
								if(irCommSyncStateIndexTemp>1) {
    9fb8:	80 91 fb 04 	lds	r24, 0x04FB
    9fbc:	82 30       	cpi	r24, 0x02	; 2
    9fbe:	08 f0       	brcs	.+2      	; 0x9fc2 <irCommTasks+0x1272>
    9fc0:	81 e0       	ldi	r24, 0x01	; 1
									irCommSyncStateIndexTemp = 1;
									//updateRedLed(0);
								}
								irCommSyncStateTemp[irCommSyncStateIndexTemp] = 4;
    9fc2:	e8 2f       	mov	r30, r24
    9fc4:	f0 e0       	ldi	r31, 0x00	; 0
    9fc6:	ed 59       	subi	r30, 0x9D	; 157
    9fc8:	fa 4f       	sbci	r31, 0xFA	; 250
    9fca:	94 e0       	ldi	r25, 0x04	; 4
    9fcc:	90 83       	st	Z, r25
								irCommSyncStateIndexTemp++;
    9fce:	8f 5f       	subi	r24, 0xFF	; 255
    9fd0:	80 93 fb 04 	sts	0x04FB, r24

								//irCommShiftCount = irCommShiftCount;
								irCommRxPeakHighToLow = 0;
    9fd4:	10 92 1b 05 	sts	0x051B, r1
								irCommRxStartBitDetected = 0;
    9fd8:	10 92 1a 05 	sts	0x051A, r1
								irCommSecondBitSkipped = 0;
    9fdc:	10 92 13 05 	sts	0x0513, r1
								irCommShiftCounter = 0;
    9fe0:	10 92 14 05 	sts	0x0514, r1
								irCommRxBitCount = 0;	
    9fe4:	10 92 10 05 	sts	0x0510, r1
								irCommRxCrc = 0;	
    9fe8:	10 92 01 05 	sts	0x0501, r1
								irCommRxByte = 0;
    9fec:	10 92 12 05 	sts	0x0512, r1
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
    9ff0:	90 93 d7 04 	sts	0x04D7, r25
    9ff4:	80 91 0a 05 	lds	r24, 0x050A
    9ff8:	90 e0       	ldi	r25, 0x00	; 0
    9ffa:	d9 ce       	rjmp	.-590    	; 0x9dae <irCommTasks+0x105e>
								//break;

								resetDebugVariables();
								break;
							} else {
								if(irCommSyncStateIndexTemp>1) {
    9ffc:	80 91 fb 04 	lds	r24, 0x04FB
    a000:	82 30       	cpi	r24, 0x02	; 2
    a002:	08 f0       	brcs	.+2      	; 0xa006 <irCommTasks+0x12b6>
    a004:	81 e0       	ldi	r24, 0x01	; 1
									irCommSyncStateIndexTemp = 1;
									//updateRedLed(0);
								}
								irCommSyncStateTemp[irCommSyncStateIndexTemp] = 3;
    a006:	e8 2f       	mov	r30, r24
    a008:	f0 e0       	ldi	r31, 0x00	; 0
    a00a:	ed 59       	subi	r30, 0x9D	; 157
    a00c:	fa 4f       	sbci	r31, 0xFA	; 250
    a00e:	93 e0       	ldi	r25, 0x03	; 3
    a010:	90 83       	st	Z, r25
								irCommSyncStateIndexTemp++;
    a012:	8f 5f       	subi	r24, 0xFF	; 255
    a014:	80 93 fb 04 	sts	0x04FB, r24

								irCommShiftCount = IRCOMM_SAMPLING_WINDOW + irCommShiftCount;
    a018:	80 91 0a 05 	lds	r24, 0x050A
    a01c:	8c 5e       	subi	r24, 0xEC	; 236
    a01e:	b3 ce       	rjmp	.-666    	; 0x9d86 <irCommTasks+0x1036>
								irCommRxBitCount = 0;	
								irCommRxCrc = 0;	
								irCommRxByte = 0;
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
							} else {
								currentProx = 0;
    a020:	10 92 34 02 	sts	0x0234, r1
								adcSaveDataTo = SKIP_SAMPLE;
    a024:	85 e0       	ldi	r24, 0x05	; 5
    a026:	80 93 c9 02 	sts	0x02C9, r24
								adcSamplingState = 0;
    a02a:	10 92 ca 02 	sts	0x02CA, r1
								irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;								
    a02e:	10 92 d6 04 	sts	0x04D6, r1
								irCommState = IRCOMM_RX_IDLE_STATE;
    a032:	90 93 d7 04 	sts	0x04D7, r25

								irCommSyncStateIndexTemp++;
    a036:	80 91 fb 04 	lds	r24, 0x04FB
    a03a:	8f 5f       	subi	r24, 0xFF	; 255
    a03c:	80 93 fb 04 	sts	0x04FB, r24
    a040:	80 91 0a 05 	lds	r24, 0x050A
    a044:	91 e0       	ldi	r25, 0x01	; 1
    a046:	b3 ce       	rjmp	.-666    	; 0x9dae <irCommTasks+0x105e>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_WAITING_BIT;
						} else if(irCommSwitchCount==1) {
							if(irCommSyncStateIndexTemp>1) {
    a048:	80 91 fb 04 	lds	r24, 0x04FB
    a04c:	82 30       	cpi	r24, 0x02	; 2
    a04e:	08 f0       	brcs	.+2      	; 0xa052 <irCommTasks+0x1302>
    a050:	81 e0       	ldi	r24, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 2;
    a052:	e8 2f       	mov	r30, r24
    a054:	f0 e0       	ldi	r31, 0x00	; 0
    a056:	ed 59       	subi	r30, 0x9D	; 157
    a058:	fa 4f       	sbci	r31, 0xFA	; 250
    a05a:	92 e0       	ldi	r25, 0x02	; 2
    a05c:	90 83       	st	Z, r25
							irCommSyncStateIndexTemp++;
    a05e:	8f 5f       	subi	r24, 0xFF	; 255
    a060:	80 93 fb 04 	sts	0x04FB, r24

							//irCommShiftCount = irCommShiftCount;
							irCommRxPeakHighToLow = 0;
    a064:	10 92 1b 05 	sts	0x051B, r1
							irCommRxStartBitDetected = 0;
    a068:	10 92 1a 05 	sts	0x051A, r1
							irCommSecondBitSkipped = 0;
    a06c:	10 92 13 05 	sts	0x0513, r1
							irCommShiftCounter = 0;
    a070:	10 92 14 05 	sts	0x0514, r1
							irCommRxBitCount = 0;	
    a074:	10 92 10 05 	sts	0x0510, r1
							irCommRxCrc = 0;	
    a078:	10 92 01 05 	sts	0x0501, r1
							irCommRxByte = 0;
    a07c:	10 92 12 05 	sts	0x0512, r1
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
    a080:	84 e0       	ldi	r24, 0x04	; 4
    a082:	80 93 d7 04 	sts	0x04D7, r24
    a086:	80 91 0a 05 	lds	r24, 0x050A
    a08a:	90 e0       	ldi	r25, 0x00	; 0
    a08c:	90 ce       	rjmp	.-736    	; 0x9dae <irCommTasks+0x105e>

				turnOffGreenLeds();
				if(irCommRxPeakHighToLow==1) {
					if(irCommRxStartBitDetected==1) {
						if(irCommSwitchCount==2) {
							if(irCommSyncStateIndexTemp>1) {
    a08e:	80 91 fb 04 	lds	r24, 0x04FB
    a092:	82 30       	cpi	r24, 0x02	; 2
    a094:	08 f0       	brcs	.+2      	; 0xa098 <irCommTasks+0x1348>
    a096:	81 e0       	ldi	r24, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 6;
    a098:	e8 2f       	mov	r30, r24
    a09a:	f0 e0       	ldi	r31, 0x00	; 0
    a09c:	ed 59       	subi	r30, 0x9D	; 157
    a09e:	fa 4f       	sbci	r31, 0xFA	; 250
    a0a0:	96 e0       	ldi	r25, 0x06	; 6
    a0a2:	66 cf       	rjmp	.-308    	; 0x9f70 <irCommTasks+0x1220>

0000a0a4 <irCommSendData>:
//	irCommTxSensorMask = sensorMask;
//	irCommEnabledNext = IRCOMM_MODE_TRANSMIT;
//}

void irCommSendData(unsigned char value) {
	irCommTxByte = value;
    a0a4:	80 93 1e 05 	sts	0x051E, r24
	irCommTxByteEnqueued = 1;
    a0a8:	81 e0       	ldi	r24, 0x01	; 1
    a0aa:	80 93 1f 05 	sts	0x051F, r24
	irCommEnabledNext = IRCOMM_MODE_TRANSMIT;
    a0ae:	82 e0       	ldi	r24, 0x02	; 2
    a0b0:	80 93 d5 04 	sts	0x04D5, r24
}
    a0b4:	08 95       	ret

0000a0b6 <irCommDataSent>:

unsigned char irCommDataSent() {
	if(irCommTxByteEnqueued==1) {
		return 0;
    a0b6:	81 e0       	ldi	r24, 0x01	; 1
    a0b8:	90 91 1f 05 	lds	r25, 0x051F
    a0bc:	91 30       	cpi	r25, 0x01	; 1
    a0be:	09 f0       	breq	.+2      	; 0xa0c2 <irCommDataSent+0xc>
	} else {
		return 1;
	}
}
    a0c0:	08 95       	ret
	irCommEnabledNext = IRCOMM_MODE_TRANSMIT;
}

unsigned char irCommDataSent() {
	if(irCommTxByteEnqueued==1) {
		return 0;
    a0c2:	80 e0       	ldi	r24, 0x00	; 0
	} else {
		return 1;
	}
}
    a0c4:	08 95       	ret

0000a0c6 <irCommDataAvailable>:

unsigned char irCommDataAvailable() {
	return irCommRxDataAvailable;
}
    a0c6:	80 91 18 05 	lds	r24, 0x0518
    a0ca:	08 95       	ret

0000a0cc <irCommReadData>:

unsigned char irCommReadData() {
	irCommRxDataAvailable = 0;
    a0cc:	10 92 18 05 	sts	0x0518, r1
	return irCommRxLastDataReceived;
}
    a0d0:	80 91 17 05 	lds	r24, 0x0517
    a0d4:	08 95       	ret

0000a0d6 <irCommReceivingSensor>:

signed char irCommReceivingSensor() {
	return irCommRxReceivingSensor;
}
    a0d6:	80 91 19 02 	lds	r24, 0x0219
    a0da:	08 95       	ret

0000a0dc <getBearing>:

signed int getBearing(unsigned char sensor) {
    a0dc:	88 30       	cpi	r24, 0x08	; 8
    a0de:	50 f4       	brcc	.+20     	; 0xa0f4 <getBearing+0x18>
    a0e0:	e8 2f       	mov	r30, r24
    a0e2:	f0 e0       	ldi	r31, 0x00	; 0
    a0e4:	ee 0f       	add	r30, r30
    a0e6:	ff 1f       	adc	r31, r31
    a0e8:	e6 5e       	subi	r30, 0xE6	; 230
    a0ea:	fd 4f       	sbci	r31, 0xFD	; 253
    a0ec:	20 81       	ld	r18, Z
    a0ee:	31 81       	ldd	r19, Z+1	; 0x01
		case 7:
			return 45;
		default:
			return -1;
	}
}
    a0f0:	c9 01       	movw	r24, r18
    a0f2:	08 95       	ret

signed char irCommReceivingSensor() {
	return irCommRxReceivingSensor;
}

signed int getBearing(unsigned char sensor) {
    a0f4:	2f ef       	ldi	r18, 0xFF	; 255
    a0f6:	3f ef       	ldi	r19, 0xFF	; 255
		case 7:
			return 45;
		default:
			return -1;
	}
}
    a0f8:	c9 01       	movw	r24, r18
    a0fa:	08 95       	ret

0000a0fc <__subsf3>:
    a0fc:	50 58       	subi	r21, 0x80	; 128

0000a0fe <__addsf3>:
    a0fe:	bb 27       	eor	r27, r27
    a100:	aa 27       	eor	r26, r26
    a102:	0e d0       	rcall	.+28     	; 0xa120 <__addsf3x>
    a104:	27 c2       	rjmp	.+1102   	; 0xa554 <__fp_round>
    a106:	f0 d1       	rcall	.+992    	; 0xa4e8 <__fp_pscA>
    a108:	30 f0       	brcs	.+12     	; 0xa116 <__addsf3+0x18>
    a10a:	f5 d1       	rcall	.+1002   	; 0xa4f6 <__fp_pscB>
    a10c:	20 f0       	brcs	.+8      	; 0xa116 <__addsf3+0x18>
    a10e:	31 f4       	brne	.+12     	; 0xa11c <__addsf3+0x1e>
    a110:	9f 3f       	cpi	r25, 0xFF	; 255
    a112:	11 f4       	brne	.+4      	; 0xa118 <__addsf3+0x1a>
    a114:	1e f4       	brtc	.+6      	; 0xa11c <__addsf3+0x1e>
    a116:	c0 c1       	rjmp	.+896    	; 0xa498 <__fp_nan>
    a118:	0e f4       	brtc	.+2      	; 0xa11c <__addsf3+0x1e>
    a11a:	e0 95       	com	r30
    a11c:	e7 fb       	bst	r30, 7
    a11e:	b6 c1       	rjmp	.+876    	; 0xa48c <__fp_inf>

0000a120 <__addsf3x>:
    a120:	e9 2f       	mov	r30, r25
    a122:	3a d2       	rcall	.+1140   	; 0xa598 <__fp_split3>
    a124:	80 f3       	brcs	.-32     	; 0xa106 <__addsf3+0x8>
    a126:	ba 17       	cp	r27, r26
    a128:	62 07       	cpc	r22, r18
    a12a:	73 07       	cpc	r23, r19
    a12c:	84 07       	cpc	r24, r20
    a12e:	95 07       	cpc	r25, r21
    a130:	18 f0       	brcs	.+6      	; 0xa138 <__addsf3x+0x18>
    a132:	71 f4       	brne	.+28     	; 0xa150 <__addsf3x+0x30>
    a134:	9e f5       	brtc	.+102    	; 0xa19c <__addsf3x+0x7c>
    a136:	52 c2       	rjmp	.+1188   	; 0xa5dc <__fp_zero>
    a138:	0e f4       	brtc	.+2      	; 0xa13c <__addsf3x+0x1c>
    a13a:	e0 95       	com	r30
    a13c:	0b 2e       	mov	r0, r27
    a13e:	ba 2f       	mov	r27, r26
    a140:	a0 2d       	mov	r26, r0
    a142:	0b 01       	movw	r0, r22
    a144:	b9 01       	movw	r22, r18
    a146:	90 01       	movw	r18, r0
    a148:	0c 01       	movw	r0, r24
    a14a:	ca 01       	movw	r24, r20
    a14c:	a0 01       	movw	r20, r0
    a14e:	11 24       	eor	r1, r1
    a150:	ff 27       	eor	r31, r31
    a152:	59 1b       	sub	r21, r25
    a154:	99 f0       	breq	.+38     	; 0xa17c <__addsf3x+0x5c>
    a156:	59 3f       	cpi	r21, 0xF9	; 249
    a158:	50 f4       	brcc	.+20     	; 0xa16e <__addsf3x+0x4e>
    a15a:	50 3e       	cpi	r21, 0xE0	; 224
    a15c:	68 f1       	brcs	.+90     	; 0xa1b8 <__addsf3x+0x98>
    a15e:	1a 16       	cp	r1, r26
    a160:	f0 40       	sbci	r31, 0x00	; 0
    a162:	a2 2f       	mov	r26, r18
    a164:	23 2f       	mov	r18, r19
    a166:	34 2f       	mov	r19, r20
    a168:	44 27       	eor	r20, r20
    a16a:	58 5f       	subi	r21, 0xF8	; 248
    a16c:	f3 cf       	rjmp	.-26     	; 0xa154 <__addsf3x+0x34>
    a16e:	46 95       	lsr	r20
    a170:	37 95       	ror	r19
    a172:	27 95       	ror	r18
    a174:	a7 95       	ror	r26
    a176:	f0 40       	sbci	r31, 0x00	; 0
    a178:	53 95       	inc	r21
    a17a:	c9 f7       	brne	.-14     	; 0xa16e <__addsf3x+0x4e>
    a17c:	7e f4       	brtc	.+30     	; 0xa19c <__addsf3x+0x7c>
    a17e:	1f 16       	cp	r1, r31
    a180:	ba 0b       	sbc	r27, r26
    a182:	62 0b       	sbc	r22, r18
    a184:	73 0b       	sbc	r23, r19
    a186:	84 0b       	sbc	r24, r20
    a188:	ba f0       	brmi	.+46     	; 0xa1b8 <__addsf3x+0x98>
    a18a:	91 50       	subi	r25, 0x01	; 1
    a18c:	a1 f0       	breq	.+40     	; 0xa1b6 <__addsf3x+0x96>
    a18e:	ff 0f       	add	r31, r31
    a190:	bb 1f       	adc	r27, r27
    a192:	66 1f       	adc	r22, r22
    a194:	77 1f       	adc	r23, r23
    a196:	88 1f       	adc	r24, r24
    a198:	c2 f7       	brpl	.-16     	; 0xa18a <__addsf3x+0x6a>
    a19a:	0e c0       	rjmp	.+28     	; 0xa1b8 <__addsf3x+0x98>
    a19c:	ba 0f       	add	r27, r26
    a19e:	62 1f       	adc	r22, r18
    a1a0:	73 1f       	adc	r23, r19
    a1a2:	84 1f       	adc	r24, r20
    a1a4:	48 f4       	brcc	.+18     	; 0xa1b8 <__addsf3x+0x98>
    a1a6:	87 95       	ror	r24
    a1a8:	77 95       	ror	r23
    a1aa:	67 95       	ror	r22
    a1ac:	b7 95       	ror	r27
    a1ae:	f7 95       	ror	r31
    a1b0:	9e 3f       	cpi	r25, 0xFE	; 254
    a1b2:	08 f0       	brcs	.+2      	; 0xa1b6 <__addsf3x+0x96>
    a1b4:	b3 cf       	rjmp	.-154    	; 0xa11c <__addsf3+0x1e>
    a1b6:	93 95       	inc	r25
    a1b8:	88 0f       	add	r24, r24
    a1ba:	08 f0       	brcs	.+2      	; 0xa1be <__addsf3x+0x9e>
    a1bc:	99 27       	eor	r25, r25
    a1be:	ee 0f       	add	r30, r30
    a1c0:	97 95       	ror	r25
    a1c2:	87 95       	ror	r24
    a1c4:	08 95       	ret
    a1c6:	90 d1       	rcall	.+800    	; 0xa4e8 <__fp_pscA>
    a1c8:	58 f0       	brcs	.+22     	; 0xa1e0 <__addsf3x+0xc0>
    a1ca:	80 e8       	ldi	r24, 0x80	; 128
    a1cc:	91 e0       	ldi	r25, 0x01	; 1
    a1ce:	09 f4       	brne	.+2      	; 0xa1d2 <__addsf3x+0xb2>
    a1d0:	9e ef       	ldi	r25, 0xFE	; 254
    a1d2:	91 d1       	rcall	.+802    	; 0xa4f6 <__fp_pscB>
    a1d4:	28 f0       	brcs	.+10     	; 0xa1e0 <__addsf3x+0xc0>
    a1d6:	40 e8       	ldi	r20, 0x80	; 128
    a1d8:	51 e0       	ldi	r21, 0x01	; 1
    a1da:	59 f4       	brne	.+22     	; 0xa1f2 <atan2+0xe>
    a1dc:	5e ef       	ldi	r21, 0xFE	; 254
    a1de:	09 c0       	rjmp	.+18     	; 0xa1f2 <atan2+0xe>
    a1e0:	5b c1       	rjmp	.+694    	; 0xa498 <__fp_nan>
    a1e2:	fc c1       	rjmp	.+1016   	; 0xa5dc <__fp_zero>

0000a1e4 <atan2>:
    a1e4:	e9 2f       	mov	r30, r25
    a1e6:	e0 78       	andi	r30, 0x80	; 128
    a1e8:	d7 d1       	rcall	.+942    	; 0xa598 <__fp_split3>
    a1ea:	68 f3       	brcs	.-38     	; 0xa1c6 <__addsf3x+0xa6>
    a1ec:	09 2e       	mov	r0, r25
    a1ee:	05 2a       	or	r0, r21
    a1f0:	c1 f3       	breq	.-16     	; 0xa1e2 <__addsf3x+0xc2>
    a1f2:	26 17       	cp	r18, r22
    a1f4:	37 07       	cpc	r19, r23
    a1f6:	48 07       	cpc	r20, r24
    a1f8:	59 07       	cpc	r21, r25
    a1fa:	38 f0       	brcs	.+14     	; 0xa20a <atan2+0x26>
    a1fc:	0e 2e       	mov	r0, r30
    a1fe:	07 f8       	bld	r0, 7
    a200:	e0 25       	eor	r30, r0
    a202:	69 f0       	breq	.+26     	; 0xa21e <atan2+0x3a>
    a204:	e0 25       	eor	r30, r0
    a206:	e0 64       	ori	r30, 0x40	; 64
    a208:	0a c0       	rjmp	.+20     	; 0xa21e <atan2+0x3a>
    a20a:	ef 63       	ori	r30, 0x3F	; 63
    a20c:	07 f8       	bld	r0, 7
    a20e:	00 94       	com	r0
    a210:	07 fa       	bst	r0, 7
    a212:	db 01       	movw	r26, r22
    a214:	b9 01       	movw	r22, r18
    a216:	9d 01       	movw	r18, r26
    a218:	dc 01       	movw	r26, r24
    a21a:	ca 01       	movw	r24, r20
    a21c:	ad 01       	movw	r20, r26
    a21e:	ef 93       	push	r30
    a220:	4a d0       	rcall	.+148    	; 0xa2b6 <__divsf3_pse>
    a222:	98 d1       	rcall	.+816    	; 0xa554 <__fp_round>
    a224:	0a d0       	rcall	.+20     	; 0xa23a <atan>
    a226:	5f 91       	pop	r21
    a228:	55 23       	and	r21, r21
    a22a:	31 f0       	breq	.+12     	; 0xa238 <atan2+0x54>
    a22c:	2b ed       	ldi	r18, 0xDB	; 219
    a22e:	3f e0       	ldi	r19, 0x0F	; 15
    a230:	49 e4       	ldi	r20, 0x49	; 73
    a232:	50 fd       	sbrc	r21, 0
    a234:	49 ec       	ldi	r20, 0xC9	; 201
    a236:	63 cf       	rjmp	.-314    	; 0xa0fe <__addsf3>
    a238:	08 95       	ret

0000a23a <atan>:
    a23a:	df 93       	push	r29
    a23c:	dd 27       	eor	r29, r29
    a23e:	b9 2f       	mov	r27, r25
    a240:	bf 77       	andi	r27, 0x7F	; 127
    a242:	40 e8       	ldi	r20, 0x80	; 128
    a244:	5f e3       	ldi	r21, 0x3F	; 63
    a246:	16 16       	cp	r1, r22
    a248:	17 06       	cpc	r1, r23
    a24a:	48 07       	cpc	r20, r24
    a24c:	5b 07       	cpc	r21, r27
    a24e:	10 f4       	brcc	.+4      	; 0xa254 <atan+0x1a>
    a250:	d9 2f       	mov	r29, r25
    a252:	cf d1       	rcall	.+926    	; 0xa5f2 <inverse>
    a254:	9f 93       	push	r25
    a256:	8f 93       	push	r24
    a258:	7f 93       	push	r23
    a25a:	6f 93       	push	r22
    a25c:	3a d2       	rcall	.+1140   	; 0xa6d2 <square>
    a25e:	ee e4       	ldi	r30, 0x4E	; 78
    a260:	f1 e0       	ldi	r31, 0x01	; 1
    a262:	1d d1       	rcall	.+570    	; 0xa49e <__fp_powser>
    a264:	77 d1       	rcall	.+750    	; 0xa554 <__fp_round>
    a266:	2f 91       	pop	r18
    a268:	3f 91       	pop	r19
    a26a:	4f 91       	pop	r20
    a26c:	5f 91       	pop	r21
    a26e:	d4 d1       	rcall	.+936    	; 0xa618 <__mulsf3x>
    a270:	dd 23       	and	r29, r29
    a272:	49 f0       	breq	.+18     	; 0xa286 <atan+0x4c>
    a274:	90 58       	subi	r25, 0x80	; 128
    a276:	a2 ea       	ldi	r26, 0xA2	; 162
    a278:	2a ed       	ldi	r18, 0xDA	; 218
    a27a:	3f e0       	ldi	r19, 0x0F	; 15
    a27c:	49 ec       	ldi	r20, 0xC9	; 201
    a27e:	5f e3       	ldi	r21, 0x3F	; 63
    a280:	d0 78       	andi	r29, 0x80	; 128
    a282:	5d 27       	eor	r21, r29
    a284:	4d df       	rcall	.-358    	; 0xa120 <__addsf3x>
    a286:	df 91       	pop	r29
    a288:	65 c1       	rjmp	.+714    	; 0xa554 <__fp_round>

0000a28a <__cmpsf2>:
    a28a:	dc d0       	rcall	.+440    	; 0xa444 <__fp_cmp>
    a28c:	08 f4       	brcc	.+2      	; 0xa290 <__cmpsf2+0x6>
    a28e:	81 e0       	ldi	r24, 0x01	; 1
    a290:	08 95       	ret

0000a292 <cos>:
    a292:	39 d1       	rcall	.+626    	; 0xa506 <__fp_rempio2>
    a294:	e3 95       	inc	r30
    a296:	6f c1       	rjmp	.+734    	; 0xa576 <__fp_sinus>

0000a298 <__divsf3>:
    a298:	0c d0       	rcall	.+24     	; 0xa2b2 <__divsf3x>
    a29a:	5c c1       	rjmp	.+696    	; 0xa554 <__fp_round>
    a29c:	2c d1       	rcall	.+600    	; 0xa4f6 <__fp_pscB>
    a29e:	40 f0       	brcs	.+16     	; 0xa2b0 <__divsf3+0x18>
    a2a0:	23 d1       	rcall	.+582    	; 0xa4e8 <__fp_pscA>
    a2a2:	30 f0       	brcs	.+12     	; 0xa2b0 <__divsf3+0x18>
    a2a4:	21 f4       	brne	.+8      	; 0xa2ae <__divsf3+0x16>
    a2a6:	5f 3f       	cpi	r21, 0xFF	; 255
    a2a8:	19 f0       	breq	.+6      	; 0xa2b0 <__divsf3+0x18>
    a2aa:	f0 c0       	rjmp	.+480    	; 0xa48c <__fp_inf>
    a2ac:	51 11       	cpse	r21, r1
    a2ae:	97 c1       	rjmp	.+814    	; 0xa5de <__fp_szero>
    a2b0:	f3 c0       	rjmp	.+486    	; 0xa498 <__fp_nan>

0000a2b2 <__divsf3x>:
    a2b2:	72 d1       	rcall	.+740    	; 0xa598 <__fp_split3>
    a2b4:	98 f3       	brcs	.-26     	; 0xa29c <__divsf3+0x4>

0000a2b6 <__divsf3_pse>:
    a2b6:	99 23       	and	r25, r25
    a2b8:	c9 f3       	breq	.-14     	; 0xa2ac <__divsf3+0x14>
    a2ba:	55 23       	and	r21, r21
    a2bc:	b1 f3       	breq	.-20     	; 0xa2aa <__divsf3+0x12>
    a2be:	95 1b       	sub	r25, r21
    a2c0:	55 0b       	sbc	r21, r21
    a2c2:	bb 27       	eor	r27, r27
    a2c4:	aa 27       	eor	r26, r26
    a2c6:	62 17       	cp	r22, r18
    a2c8:	73 07       	cpc	r23, r19
    a2ca:	84 07       	cpc	r24, r20
    a2cc:	38 f0       	brcs	.+14     	; 0xa2dc <__divsf3_pse+0x26>
    a2ce:	9f 5f       	subi	r25, 0xFF	; 255
    a2d0:	5f 4f       	sbci	r21, 0xFF	; 255
    a2d2:	22 0f       	add	r18, r18
    a2d4:	33 1f       	adc	r19, r19
    a2d6:	44 1f       	adc	r20, r20
    a2d8:	aa 1f       	adc	r26, r26
    a2da:	a9 f3       	breq	.-22     	; 0xa2c6 <__divsf3_pse+0x10>
    a2dc:	33 d0       	rcall	.+102    	; 0xa344 <__divsf3_pse+0x8e>
    a2de:	0e 2e       	mov	r0, r30
    a2e0:	3a f0       	brmi	.+14     	; 0xa2f0 <__divsf3_pse+0x3a>
    a2e2:	e0 e8       	ldi	r30, 0x80	; 128
    a2e4:	30 d0       	rcall	.+96     	; 0xa346 <__divsf3_pse+0x90>
    a2e6:	91 50       	subi	r25, 0x01	; 1
    a2e8:	50 40       	sbci	r21, 0x00	; 0
    a2ea:	e6 95       	lsr	r30
    a2ec:	00 1c       	adc	r0, r0
    a2ee:	ca f7       	brpl	.-14     	; 0xa2e2 <__divsf3_pse+0x2c>
    a2f0:	29 d0       	rcall	.+82     	; 0xa344 <__divsf3_pse+0x8e>
    a2f2:	fe 2f       	mov	r31, r30
    a2f4:	27 d0       	rcall	.+78     	; 0xa344 <__divsf3_pse+0x8e>
    a2f6:	66 0f       	add	r22, r22
    a2f8:	77 1f       	adc	r23, r23
    a2fa:	88 1f       	adc	r24, r24
    a2fc:	bb 1f       	adc	r27, r27
    a2fe:	26 17       	cp	r18, r22
    a300:	37 07       	cpc	r19, r23
    a302:	48 07       	cpc	r20, r24
    a304:	ab 07       	cpc	r26, r27
    a306:	b0 e8       	ldi	r27, 0x80	; 128
    a308:	09 f0       	breq	.+2      	; 0xa30c <__divsf3_pse+0x56>
    a30a:	bb 0b       	sbc	r27, r27
    a30c:	80 2d       	mov	r24, r0
    a30e:	bf 01       	movw	r22, r30
    a310:	ff 27       	eor	r31, r31
    a312:	93 58       	subi	r25, 0x83	; 131
    a314:	5f 4f       	sbci	r21, 0xFF	; 255
    a316:	2a f0       	brmi	.+10     	; 0xa322 <__divsf3_pse+0x6c>
    a318:	9e 3f       	cpi	r25, 0xFE	; 254
    a31a:	51 05       	cpc	r21, r1
    a31c:	68 f0       	brcs	.+26     	; 0xa338 <__divsf3_pse+0x82>
    a31e:	b6 c0       	rjmp	.+364    	; 0xa48c <__fp_inf>
    a320:	5e c1       	rjmp	.+700    	; 0xa5de <__fp_szero>
    a322:	5f 3f       	cpi	r21, 0xFF	; 255
    a324:	ec f3       	brlt	.-6      	; 0xa320 <__divsf3_pse+0x6a>
    a326:	98 3e       	cpi	r25, 0xE8	; 232
    a328:	dc f3       	brlt	.-10     	; 0xa320 <__divsf3_pse+0x6a>
    a32a:	86 95       	lsr	r24
    a32c:	77 95       	ror	r23
    a32e:	67 95       	ror	r22
    a330:	b7 95       	ror	r27
    a332:	f7 95       	ror	r31
    a334:	9f 5f       	subi	r25, 0xFF	; 255
    a336:	c9 f7       	brne	.-14     	; 0xa32a <__divsf3_pse+0x74>
    a338:	88 0f       	add	r24, r24
    a33a:	91 1d       	adc	r25, r1
    a33c:	96 95       	lsr	r25
    a33e:	87 95       	ror	r24
    a340:	97 f9       	bld	r25, 7
    a342:	08 95       	ret
    a344:	e1 e0       	ldi	r30, 0x01	; 1
    a346:	66 0f       	add	r22, r22
    a348:	77 1f       	adc	r23, r23
    a34a:	88 1f       	adc	r24, r24
    a34c:	bb 1f       	adc	r27, r27
    a34e:	62 17       	cp	r22, r18
    a350:	73 07       	cpc	r23, r19
    a352:	84 07       	cpc	r24, r20
    a354:	ba 07       	cpc	r27, r26
    a356:	20 f0       	brcs	.+8      	; 0xa360 <__divsf3_pse+0xaa>
    a358:	62 1b       	sub	r22, r18
    a35a:	73 0b       	sbc	r23, r19
    a35c:	84 0b       	sbc	r24, r20
    a35e:	ba 0b       	sbc	r27, r26
    a360:	ee 1f       	adc	r30, r30
    a362:	88 f7       	brcc	.-30     	; 0xa346 <__divsf3_pse+0x90>
    a364:	e0 95       	com	r30
    a366:	08 95       	ret

0000a368 <__fixsfsi>:
    a368:	04 d0       	rcall	.+8      	; 0xa372 <__fixunssfsi>
    a36a:	68 94       	set
    a36c:	b1 11       	cpse	r27, r1
    a36e:	37 c1       	rjmp	.+622    	; 0xa5de <__fp_szero>
    a370:	08 95       	ret

0000a372 <__fixunssfsi>:
    a372:	1a d1       	rcall	.+564    	; 0xa5a8 <__fp_splitA>
    a374:	88 f0       	brcs	.+34     	; 0xa398 <__fixunssfsi+0x26>
    a376:	9f 57       	subi	r25, 0x7F	; 127
    a378:	90 f0       	brcs	.+36     	; 0xa39e <__fixunssfsi+0x2c>
    a37a:	b9 2f       	mov	r27, r25
    a37c:	99 27       	eor	r25, r25
    a37e:	b7 51       	subi	r27, 0x17	; 23
    a380:	a0 f0       	brcs	.+40     	; 0xa3aa <__fixunssfsi+0x38>
    a382:	d1 f0       	breq	.+52     	; 0xa3b8 <__fixunssfsi+0x46>
    a384:	66 0f       	add	r22, r22
    a386:	77 1f       	adc	r23, r23
    a388:	88 1f       	adc	r24, r24
    a38a:	99 1f       	adc	r25, r25
    a38c:	1a f0       	brmi	.+6      	; 0xa394 <__fixunssfsi+0x22>
    a38e:	ba 95       	dec	r27
    a390:	c9 f7       	brne	.-14     	; 0xa384 <__fixunssfsi+0x12>
    a392:	12 c0       	rjmp	.+36     	; 0xa3b8 <__fixunssfsi+0x46>
    a394:	b1 30       	cpi	r27, 0x01	; 1
    a396:	81 f0       	breq	.+32     	; 0xa3b8 <__fixunssfsi+0x46>
    a398:	21 d1       	rcall	.+578    	; 0xa5dc <__fp_zero>
    a39a:	b1 e0       	ldi	r27, 0x01	; 1
    a39c:	08 95       	ret
    a39e:	1e c1       	rjmp	.+572    	; 0xa5dc <__fp_zero>
    a3a0:	67 2f       	mov	r22, r23
    a3a2:	78 2f       	mov	r23, r24
    a3a4:	88 27       	eor	r24, r24
    a3a6:	b8 5f       	subi	r27, 0xF8	; 248
    a3a8:	39 f0       	breq	.+14     	; 0xa3b8 <__fixunssfsi+0x46>
    a3aa:	b9 3f       	cpi	r27, 0xF9	; 249
    a3ac:	cc f3       	brlt	.-14     	; 0xa3a0 <__fixunssfsi+0x2e>
    a3ae:	86 95       	lsr	r24
    a3b0:	77 95       	ror	r23
    a3b2:	67 95       	ror	r22
    a3b4:	b3 95       	inc	r27
    a3b6:	d9 f7       	brne	.-10     	; 0xa3ae <__fixunssfsi+0x3c>
    a3b8:	3e f4       	brtc	.+14     	; 0xa3c8 <__fixunssfsi+0x56>
    a3ba:	90 95       	com	r25
    a3bc:	80 95       	com	r24
    a3be:	70 95       	com	r23
    a3c0:	61 95       	neg	r22
    a3c2:	7f 4f       	sbci	r23, 0xFF	; 255
    a3c4:	8f 4f       	sbci	r24, 0xFF	; 255
    a3c6:	9f 4f       	sbci	r25, 0xFF	; 255
    a3c8:	08 95       	ret

0000a3ca <__floatunsisf>:
    a3ca:	e8 94       	clt
    a3cc:	09 c0       	rjmp	.+18     	; 0xa3e0 <__floatsisf+0x12>

0000a3ce <__floatsisf>:
    a3ce:	97 fb       	bst	r25, 7
    a3d0:	3e f4       	brtc	.+14     	; 0xa3e0 <__floatsisf+0x12>
    a3d2:	90 95       	com	r25
    a3d4:	80 95       	com	r24
    a3d6:	70 95       	com	r23
    a3d8:	61 95       	neg	r22
    a3da:	7f 4f       	sbci	r23, 0xFF	; 255
    a3dc:	8f 4f       	sbci	r24, 0xFF	; 255
    a3de:	9f 4f       	sbci	r25, 0xFF	; 255
    a3e0:	99 23       	and	r25, r25
    a3e2:	a9 f0       	breq	.+42     	; 0xa40e <__floatsisf+0x40>
    a3e4:	f9 2f       	mov	r31, r25
    a3e6:	96 e9       	ldi	r25, 0x96	; 150
    a3e8:	bb 27       	eor	r27, r27
    a3ea:	93 95       	inc	r25
    a3ec:	f6 95       	lsr	r31
    a3ee:	87 95       	ror	r24
    a3f0:	77 95       	ror	r23
    a3f2:	67 95       	ror	r22
    a3f4:	b7 95       	ror	r27
    a3f6:	f1 11       	cpse	r31, r1
    a3f8:	f8 cf       	rjmp	.-16     	; 0xa3ea <__floatsisf+0x1c>
    a3fa:	fa f4       	brpl	.+62     	; 0xa43a <__floatsisf+0x6c>
    a3fc:	bb 0f       	add	r27, r27
    a3fe:	11 f4       	brne	.+4      	; 0xa404 <__floatsisf+0x36>
    a400:	60 ff       	sbrs	r22, 0
    a402:	1b c0       	rjmp	.+54     	; 0xa43a <__floatsisf+0x6c>
    a404:	6f 5f       	subi	r22, 0xFF	; 255
    a406:	7f 4f       	sbci	r23, 0xFF	; 255
    a408:	8f 4f       	sbci	r24, 0xFF	; 255
    a40a:	9f 4f       	sbci	r25, 0xFF	; 255
    a40c:	16 c0       	rjmp	.+44     	; 0xa43a <__floatsisf+0x6c>
    a40e:	88 23       	and	r24, r24
    a410:	11 f0       	breq	.+4      	; 0xa416 <__floatsisf+0x48>
    a412:	96 e9       	ldi	r25, 0x96	; 150
    a414:	11 c0       	rjmp	.+34     	; 0xa438 <__floatsisf+0x6a>
    a416:	77 23       	and	r23, r23
    a418:	21 f0       	breq	.+8      	; 0xa422 <__floatsisf+0x54>
    a41a:	9e e8       	ldi	r25, 0x8E	; 142
    a41c:	87 2f       	mov	r24, r23
    a41e:	76 2f       	mov	r23, r22
    a420:	05 c0       	rjmp	.+10     	; 0xa42c <__floatsisf+0x5e>
    a422:	66 23       	and	r22, r22
    a424:	71 f0       	breq	.+28     	; 0xa442 <__floatsisf+0x74>
    a426:	96 e8       	ldi	r25, 0x86	; 134
    a428:	86 2f       	mov	r24, r22
    a42a:	70 e0       	ldi	r23, 0x00	; 0
    a42c:	60 e0       	ldi	r22, 0x00	; 0
    a42e:	2a f0       	brmi	.+10     	; 0xa43a <__floatsisf+0x6c>
    a430:	9a 95       	dec	r25
    a432:	66 0f       	add	r22, r22
    a434:	77 1f       	adc	r23, r23
    a436:	88 1f       	adc	r24, r24
    a438:	da f7       	brpl	.-10     	; 0xa430 <__floatsisf+0x62>
    a43a:	88 0f       	add	r24, r24
    a43c:	96 95       	lsr	r25
    a43e:	87 95       	ror	r24
    a440:	97 f9       	bld	r25, 7
    a442:	08 95       	ret

0000a444 <__fp_cmp>:
    a444:	99 0f       	add	r25, r25
    a446:	00 08       	sbc	r0, r0
    a448:	55 0f       	add	r21, r21
    a44a:	aa 0b       	sbc	r26, r26
    a44c:	e0 e8       	ldi	r30, 0x80	; 128
    a44e:	fe ef       	ldi	r31, 0xFE	; 254
    a450:	16 16       	cp	r1, r22
    a452:	17 06       	cpc	r1, r23
    a454:	e8 07       	cpc	r30, r24
    a456:	f9 07       	cpc	r31, r25
    a458:	c0 f0       	brcs	.+48     	; 0xa48a <__fp_cmp+0x46>
    a45a:	12 16       	cp	r1, r18
    a45c:	13 06       	cpc	r1, r19
    a45e:	e4 07       	cpc	r30, r20
    a460:	f5 07       	cpc	r31, r21
    a462:	98 f0       	brcs	.+38     	; 0xa48a <__fp_cmp+0x46>
    a464:	62 1b       	sub	r22, r18
    a466:	73 0b       	sbc	r23, r19
    a468:	84 0b       	sbc	r24, r20
    a46a:	95 0b       	sbc	r25, r21
    a46c:	39 f4       	brne	.+14     	; 0xa47c <__fp_cmp+0x38>
    a46e:	0a 26       	eor	r0, r26
    a470:	61 f0       	breq	.+24     	; 0xa48a <__fp_cmp+0x46>
    a472:	23 2b       	or	r18, r19
    a474:	24 2b       	or	r18, r20
    a476:	25 2b       	or	r18, r21
    a478:	21 f4       	brne	.+8      	; 0xa482 <__fp_cmp+0x3e>
    a47a:	08 95       	ret
    a47c:	0a 26       	eor	r0, r26
    a47e:	09 f4       	brne	.+2      	; 0xa482 <__fp_cmp+0x3e>
    a480:	a1 40       	sbci	r26, 0x01	; 1
    a482:	a6 95       	lsr	r26
    a484:	8f ef       	ldi	r24, 0xFF	; 255
    a486:	81 1d       	adc	r24, r1
    a488:	81 1d       	adc	r24, r1
    a48a:	08 95       	ret

0000a48c <__fp_inf>:
    a48c:	97 f9       	bld	r25, 7
    a48e:	9f 67       	ori	r25, 0x7F	; 127
    a490:	80 e8       	ldi	r24, 0x80	; 128
    a492:	70 e0       	ldi	r23, 0x00	; 0
    a494:	60 e0       	ldi	r22, 0x00	; 0
    a496:	08 95       	ret

0000a498 <__fp_nan>:
    a498:	9f ef       	ldi	r25, 0xFF	; 255
    a49a:	80 ec       	ldi	r24, 0xC0	; 192
    a49c:	08 95       	ret

0000a49e <__fp_powser>:
    a49e:	df 93       	push	r29
    a4a0:	cf 93       	push	r28
    a4a2:	1f 93       	push	r17
    a4a4:	0f 93       	push	r16
    a4a6:	ff 92       	push	r15
    a4a8:	ef 92       	push	r14
    a4aa:	df 92       	push	r13
    a4ac:	7b 01       	movw	r14, r22
    a4ae:	8c 01       	movw	r16, r24
    a4b0:	68 94       	set
    a4b2:	05 c0       	rjmp	.+10     	; 0xa4be <__fp_powser+0x20>
    a4b4:	da 2e       	mov	r13, r26
    a4b6:	ef 01       	movw	r28, r30
    a4b8:	af d0       	rcall	.+350    	; 0xa618 <__mulsf3x>
    a4ba:	fe 01       	movw	r30, r28
    a4bc:	e8 94       	clt
    a4be:	a5 91       	lpm	r26, Z+
    a4c0:	25 91       	lpm	r18, Z+
    a4c2:	35 91       	lpm	r19, Z+
    a4c4:	45 91       	lpm	r20, Z+
    a4c6:	55 91       	lpm	r21, Z+
    a4c8:	ae f3       	brts	.-22     	; 0xa4b4 <__fp_powser+0x16>
    a4ca:	ef 01       	movw	r28, r30
    a4cc:	29 de       	rcall	.-942    	; 0xa120 <__addsf3x>
    a4ce:	fe 01       	movw	r30, r28
    a4d0:	97 01       	movw	r18, r14
    a4d2:	a8 01       	movw	r20, r16
    a4d4:	da 94       	dec	r13
    a4d6:	79 f7       	brne	.-34     	; 0xa4b6 <__fp_powser+0x18>
    a4d8:	df 90       	pop	r13
    a4da:	ef 90       	pop	r14
    a4dc:	ff 90       	pop	r15
    a4de:	0f 91       	pop	r16
    a4e0:	1f 91       	pop	r17
    a4e2:	cf 91       	pop	r28
    a4e4:	df 91       	pop	r29
    a4e6:	08 95       	ret

0000a4e8 <__fp_pscA>:
    a4e8:	00 24       	eor	r0, r0
    a4ea:	0a 94       	dec	r0
    a4ec:	16 16       	cp	r1, r22
    a4ee:	17 06       	cpc	r1, r23
    a4f0:	18 06       	cpc	r1, r24
    a4f2:	09 06       	cpc	r0, r25
    a4f4:	08 95       	ret

0000a4f6 <__fp_pscB>:
    a4f6:	00 24       	eor	r0, r0
    a4f8:	0a 94       	dec	r0
    a4fa:	12 16       	cp	r1, r18
    a4fc:	13 06       	cpc	r1, r19
    a4fe:	14 06       	cpc	r1, r20
    a500:	05 06       	cpc	r0, r21
    a502:	08 95       	ret
    a504:	c9 cf       	rjmp	.-110    	; 0xa498 <__fp_nan>

0000a506 <__fp_rempio2>:
    a506:	50 d0       	rcall	.+160    	; 0xa5a8 <__fp_splitA>
    a508:	e8 f3       	brcs	.-6      	; 0xa504 <__fp_pscB+0xe>
    a50a:	e8 94       	clt
    a50c:	e0 e0       	ldi	r30, 0x00	; 0
    a50e:	bb 27       	eor	r27, r27
    a510:	9f 57       	subi	r25, 0x7F	; 127
    a512:	f0 f0       	brcs	.+60     	; 0xa550 <__fp_rempio2+0x4a>
    a514:	2a ed       	ldi	r18, 0xDA	; 218
    a516:	3f e0       	ldi	r19, 0x0F	; 15
    a518:	49 ec       	ldi	r20, 0xC9	; 201
    a51a:	06 c0       	rjmp	.+12     	; 0xa528 <__fp_rempio2+0x22>
    a51c:	ee 0f       	add	r30, r30
    a51e:	bb 0f       	add	r27, r27
    a520:	66 1f       	adc	r22, r22
    a522:	77 1f       	adc	r23, r23
    a524:	88 1f       	adc	r24, r24
    a526:	28 f0       	brcs	.+10     	; 0xa532 <__fp_rempio2+0x2c>
    a528:	b2 3a       	cpi	r27, 0xA2	; 162
    a52a:	62 07       	cpc	r22, r18
    a52c:	73 07       	cpc	r23, r19
    a52e:	84 07       	cpc	r24, r20
    a530:	28 f0       	brcs	.+10     	; 0xa53c <__fp_rempio2+0x36>
    a532:	b2 5a       	subi	r27, 0xA2	; 162
    a534:	62 0b       	sbc	r22, r18
    a536:	73 0b       	sbc	r23, r19
    a538:	84 0b       	sbc	r24, r20
    a53a:	e3 95       	inc	r30
    a53c:	9a 95       	dec	r25
    a53e:	72 f7       	brpl	.-36     	; 0xa51c <__fp_rempio2+0x16>
    a540:	80 38       	cpi	r24, 0x80	; 128
    a542:	30 f4       	brcc	.+12     	; 0xa550 <__fp_rempio2+0x4a>
    a544:	9a 95       	dec	r25
    a546:	bb 0f       	add	r27, r27
    a548:	66 1f       	adc	r22, r22
    a54a:	77 1f       	adc	r23, r23
    a54c:	88 1f       	adc	r24, r24
    a54e:	d2 f7       	brpl	.-12     	; 0xa544 <__fp_rempio2+0x3e>
    a550:	90 48       	sbci	r25, 0x80	; 128
    a552:	c4 c0       	rjmp	.+392    	; 0xa6dc <__fp_mpack_finite>

0000a554 <__fp_round>:
    a554:	09 2e       	mov	r0, r25
    a556:	03 94       	inc	r0
    a558:	00 0c       	add	r0, r0
    a55a:	11 f4       	brne	.+4      	; 0xa560 <__fp_round+0xc>
    a55c:	88 23       	and	r24, r24
    a55e:	52 f0       	brmi	.+20     	; 0xa574 <__fp_round+0x20>
    a560:	bb 0f       	add	r27, r27
    a562:	40 f4       	brcc	.+16     	; 0xa574 <__fp_round+0x20>
    a564:	bf 2b       	or	r27, r31
    a566:	11 f4       	brne	.+4      	; 0xa56c <__fp_round+0x18>
    a568:	60 ff       	sbrs	r22, 0
    a56a:	04 c0       	rjmp	.+8      	; 0xa574 <__fp_round+0x20>
    a56c:	6f 5f       	subi	r22, 0xFF	; 255
    a56e:	7f 4f       	sbci	r23, 0xFF	; 255
    a570:	8f 4f       	sbci	r24, 0xFF	; 255
    a572:	9f 4f       	sbci	r25, 0xFF	; 255
    a574:	08 95       	ret

0000a576 <__fp_sinus>:
    a576:	ef 93       	push	r30
    a578:	e0 ff       	sbrs	r30, 0
    a57a:	06 c0       	rjmp	.+12     	; 0xa588 <__fp_sinus+0x12>
    a57c:	a2 ea       	ldi	r26, 0xA2	; 162
    a57e:	2a ed       	ldi	r18, 0xDA	; 218
    a580:	3f e0       	ldi	r19, 0x0F	; 15
    a582:	49 ec       	ldi	r20, 0xC9	; 201
    a584:	5f eb       	ldi	r21, 0xBF	; 191
    a586:	cc dd       	rcall	.-1128   	; 0xa120 <__addsf3x>
    a588:	e5 df       	rcall	.-54     	; 0xa554 <__fp_round>
    a58a:	0f 90       	pop	r0
    a58c:	03 94       	inc	r0
    a58e:	01 fc       	sbrc	r0, 1
    a590:	90 58       	subi	r25, 0x80	; 128
    a592:	eb e7       	ldi	r30, 0x7B	; 123
    a594:	f1 e0       	ldi	r31, 0x01	; 1
    a596:	ae c0       	rjmp	.+348    	; 0xa6f4 <__fp_powsodd>

0000a598 <__fp_split3>:
    a598:	57 fd       	sbrc	r21, 7
    a59a:	90 58       	subi	r25, 0x80	; 128
    a59c:	44 0f       	add	r20, r20
    a59e:	55 1f       	adc	r21, r21
    a5a0:	59 f0       	breq	.+22     	; 0xa5b8 <__fp_splitA+0x10>
    a5a2:	5f 3f       	cpi	r21, 0xFF	; 255
    a5a4:	71 f0       	breq	.+28     	; 0xa5c2 <__fp_splitA+0x1a>
    a5a6:	47 95       	ror	r20

0000a5a8 <__fp_splitA>:
    a5a8:	88 0f       	add	r24, r24
    a5aa:	97 fb       	bst	r25, 7
    a5ac:	99 1f       	adc	r25, r25
    a5ae:	61 f0       	breq	.+24     	; 0xa5c8 <__fp_splitA+0x20>
    a5b0:	9f 3f       	cpi	r25, 0xFF	; 255
    a5b2:	79 f0       	breq	.+30     	; 0xa5d2 <__fp_splitA+0x2a>
    a5b4:	87 95       	ror	r24
    a5b6:	08 95       	ret
    a5b8:	12 16       	cp	r1, r18
    a5ba:	13 06       	cpc	r1, r19
    a5bc:	14 06       	cpc	r1, r20
    a5be:	55 1f       	adc	r21, r21
    a5c0:	f2 cf       	rjmp	.-28     	; 0xa5a6 <__fp_split3+0xe>
    a5c2:	46 95       	lsr	r20
    a5c4:	f1 df       	rcall	.-30     	; 0xa5a8 <__fp_splitA>
    a5c6:	08 c0       	rjmp	.+16     	; 0xa5d8 <__fp_splitA+0x30>
    a5c8:	16 16       	cp	r1, r22
    a5ca:	17 06       	cpc	r1, r23
    a5cc:	18 06       	cpc	r1, r24
    a5ce:	99 1f       	adc	r25, r25
    a5d0:	f1 cf       	rjmp	.-30     	; 0xa5b4 <__fp_splitA+0xc>
    a5d2:	86 95       	lsr	r24
    a5d4:	71 05       	cpc	r23, r1
    a5d6:	61 05       	cpc	r22, r1
    a5d8:	08 94       	sec
    a5da:	08 95       	ret

0000a5dc <__fp_zero>:
    a5dc:	e8 94       	clt

0000a5de <__fp_szero>:
    a5de:	bb 27       	eor	r27, r27
    a5e0:	66 27       	eor	r22, r22
    a5e2:	77 27       	eor	r23, r23
    a5e4:	cb 01       	movw	r24, r22
    a5e6:	97 f9       	bld	r25, 7
    a5e8:	08 95       	ret

0000a5ea <__gesf2>:
    a5ea:	2c df       	rcall	.-424    	; 0xa444 <__fp_cmp>
    a5ec:	08 f4       	brcc	.+2      	; 0xa5f0 <__gesf2+0x6>
    a5ee:	8f ef       	ldi	r24, 0xFF	; 255
    a5f0:	08 95       	ret

0000a5f2 <inverse>:
    a5f2:	9b 01       	movw	r18, r22
    a5f4:	ac 01       	movw	r20, r24
    a5f6:	60 e0       	ldi	r22, 0x00	; 0
    a5f8:	70 e0       	ldi	r23, 0x00	; 0
    a5fa:	80 e8       	ldi	r24, 0x80	; 128
    a5fc:	9f e3       	ldi	r25, 0x3F	; 63
    a5fe:	4c ce       	rjmp	.-872    	; 0xa298 <__divsf3>

0000a600 <__mulsf3>:
    a600:	0b d0       	rcall	.+22     	; 0xa618 <__mulsf3x>
    a602:	a8 cf       	rjmp	.-176    	; 0xa554 <__fp_round>
    a604:	71 df       	rcall	.-286    	; 0xa4e8 <__fp_pscA>
    a606:	28 f0       	brcs	.+10     	; 0xa612 <__mulsf3+0x12>
    a608:	76 df       	rcall	.-276    	; 0xa4f6 <__fp_pscB>
    a60a:	18 f0       	brcs	.+6      	; 0xa612 <__mulsf3+0x12>
    a60c:	95 23       	and	r25, r21
    a60e:	09 f0       	breq	.+2      	; 0xa612 <__mulsf3+0x12>
    a610:	3d cf       	rjmp	.-390    	; 0xa48c <__fp_inf>
    a612:	42 cf       	rjmp	.-380    	; 0xa498 <__fp_nan>
    a614:	11 24       	eor	r1, r1
    a616:	e3 cf       	rjmp	.-58     	; 0xa5de <__fp_szero>

0000a618 <__mulsf3x>:
    a618:	bf df       	rcall	.-130    	; 0xa598 <__fp_split3>
    a61a:	a0 f3       	brcs	.-24     	; 0xa604 <__mulsf3+0x4>

0000a61c <__mulsf3_pse>:
    a61c:	95 9f       	mul	r25, r21
    a61e:	d1 f3       	breq	.-12     	; 0xa614 <__mulsf3+0x14>
    a620:	95 0f       	add	r25, r21
    a622:	50 e0       	ldi	r21, 0x00	; 0
    a624:	55 1f       	adc	r21, r21
    a626:	62 9f       	mul	r22, r18
    a628:	f0 01       	movw	r30, r0
    a62a:	72 9f       	mul	r23, r18
    a62c:	bb 27       	eor	r27, r27
    a62e:	f0 0d       	add	r31, r0
    a630:	b1 1d       	adc	r27, r1
    a632:	63 9f       	mul	r22, r19
    a634:	aa 27       	eor	r26, r26
    a636:	f0 0d       	add	r31, r0
    a638:	b1 1d       	adc	r27, r1
    a63a:	aa 1f       	adc	r26, r26
    a63c:	64 9f       	mul	r22, r20
    a63e:	66 27       	eor	r22, r22
    a640:	b0 0d       	add	r27, r0
    a642:	a1 1d       	adc	r26, r1
    a644:	66 1f       	adc	r22, r22
    a646:	82 9f       	mul	r24, r18
    a648:	22 27       	eor	r18, r18
    a64a:	b0 0d       	add	r27, r0
    a64c:	a1 1d       	adc	r26, r1
    a64e:	62 1f       	adc	r22, r18
    a650:	73 9f       	mul	r23, r19
    a652:	b0 0d       	add	r27, r0
    a654:	a1 1d       	adc	r26, r1
    a656:	62 1f       	adc	r22, r18
    a658:	83 9f       	mul	r24, r19
    a65a:	a0 0d       	add	r26, r0
    a65c:	61 1d       	adc	r22, r1
    a65e:	22 1f       	adc	r18, r18
    a660:	74 9f       	mul	r23, r20
    a662:	33 27       	eor	r19, r19
    a664:	a0 0d       	add	r26, r0
    a666:	61 1d       	adc	r22, r1
    a668:	23 1f       	adc	r18, r19
    a66a:	84 9f       	mul	r24, r20
    a66c:	60 0d       	add	r22, r0
    a66e:	21 1d       	adc	r18, r1
    a670:	82 2f       	mov	r24, r18
    a672:	76 2f       	mov	r23, r22
    a674:	6a 2f       	mov	r22, r26
    a676:	11 24       	eor	r1, r1
    a678:	9f 57       	subi	r25, 0x7F	; 127
    a67a:	50 40       	sbci	r21, 0x00	; 0
    a67c:	8a f0       	brmi	.+34     	; 0xa6a0 <__mulsf3_pse+0x84>
    a67e:	e1 f0       	breq	.+56     	; 0xa6b8 <__mulsf3_pse+0x9c>
    a680:	88 23       	and	r24, r24
    a682:	4a f0       	brmi	.+18     	; 0xa696 <__mulsf3_pse+0x7a>
    a684:	ee 0f       	add	r30, r30
    a686:	ff 1f       	adc	r31, r31
    a688:	bb 1f       	adc	r27, r27
    a68a:	66 1f       	adc	r22, r22
    a68c:	77 1f       	adc	r23, r23
    a68e:	88 1f       	adc	r24, r24
    a690:	91 50       	subi	r25, 0x01	; 1
    a692:	50 40       	sbci	r21, 0x00	; 0
    a694:	a9 f7       	brne	.-22     	; 0xa680 <__mulsf3_pse+0x64>
    a696:	9e 3f       	cpi	r25, 0xFE	; 254
    a698:	51 05       	cpc	r21, r1
    a69a:	70 f0       	brcs	.+28     	; 0xa6b8 <__mulsf3_pse+0x9c>
    a69c:	f7 ce       	rjmp	.-530    	; 0xa48c <__fp_inf>
    a69e:	9f cf       	rjmp	.-194    	; 0xa5de <__fp_szero>
    a6a0:	5f 3f       	cpi	r21, 0xFF	; 255
    a6a2:	ec f3       	brlt	.-6      	; 0xa69e <__mulsf3_pse+0x82>
    a6a4:	98 3e       	cpi	r25, 0xE8	; 232
    a6a6:	dc f3       	brlt	.-10     	; 0xa69e <__mulsf3_pse+0x82>
    a6a8:	86 95       	lsr	r24
    a6aa:	77 95       	ror	r23
    a6ac:	67 95       	ror	r22
    a6ae:	b7 95       	ror	r27
    a6b0:	f7 95       	ror	r31
    a6b2:	e7 95       	ror	r30
    a6b4:	9f 5f       	subi	r25, 0xFF	; 255
    a6b6:	c1 f7       	brne	.-16     	; 0xa6a8 <__mulsf3_pse+0x8c>
    a6b8:	fe 2b       	or	r31, r30
    a6ba:	88 0f       	add	r24, r24
    a6bc:	91 1d       	adc	r25, r1
    a6be:	96 95       	lsr	r25
    a6c0:	87 95       	ror	r24
    a6c2:	97 f9       	bld	r25, 7
    a6c4:	08 95       	ret

0000a6c6 <sin>:
    a6c6:	9f 93       	push	r25
    a6c8:	1e df       	rcall	.-452    	; 0xa506 <__fp_rempio2>
    a6ca:	0f 90       	pop	r0
    a6cc:	07 fc       	sbrc	r0, 7
    a6ce:	ee 5f       	subi	r30, 0xFE	; 254
    a6d0:	52 cf       	rjmp	.-348    	; 0xa576 <__fp_sinus>

0000a6d2 <square>:
    a6d2:	9b 01       	movw	r18, r22
    a6d4:	ac 01       	movw	r20, r24
    a6d6:	94 cf       	rjmp	.-216    	; 0xa600 <__mulsf3>

0000a6d8 <__fp_mpack>:
    a6d8:	9f 3f       	cpi	r25, 0xFF	; 255
    a6da:	31 f0       	breq	.+12     	; 0xa6e8 <__fp_mpack_finite+0xc>

0000a6dc <__fp_mpack_finite>:
    a6dc:	91 50       	subi	r25, 0x01	; 1
    a6de:	20 f4       	brcc	.+8      	; 0xa6e8 <__fp_mpack_finite+0xc>
    a6e0:	87 95       	ror	r24
    a6e2:	77 95       	ror	r23
    a6e4:	67 95       	ror	r22
    a6e6:	b7 95       	ror	r27
    a6e8:	88 0f       	add	r24, r24
    a6ea:	91 1d       	adc	r25, r1
    a6ec:	96 95       	lsr	r25
    a6ee:	87 95       	ror	r24
    a6f0:	97 f9       	bld	r25, 7
    a6f2:	08 95       	ret

0000a6f4 <__fp_powsodd>:
    a6f4:	9f 93       	push	r25
    a6f6:	8f 93       	push	r24
    a6f8:	7f 93       	push	r23
    a6fa:	6f 93       	push	r22
    a6fc:	ff 93       	push	r31
    a6fe:	ef 93       	push	r30
    a700:	9b 01       	movw	r18, r22
    a702:	ac 01       	movw	r20, r24
    a704:	7d df       	rcall	.-262    	; 0xa600 <__mulsf3>
    a706:	ef 91       	pop	r30
    a708:	ff 91       	pop	r31
    a70a:	c9 de       	rcall	.-622    	; 0xa49e <__fp_powser>
    a70c:	2f 91       	pop	r18
    a70e:	3f 91       	pop	r19
    a710:	4f 91       	pop	r20
    a712:	5f 91       	pop	r21
    a714:	75 cf       	rjmp	.-278    	; 0xa600 <__mulsf3>

0000a716 <__mulsi3>:
    a716:	62 9f       	mul	r22, r18
    a718:	d0 01       	movw	r26, r0
    a71a:	73 9f       	mul	r23, r19
    a71c:	f0 01       	movw	r30, r0
    a71e:	82 9f       	mul	r24, r18
    a720:	e0 0d       	add	r30, r0
    a722:	f1 1d       	adc	r31, r1
    a724:	64 9f       	mul	r22, r20
    a726:	e0 0d       	add	r30, r0
    a728:	f1 1d       	adc	r31, r1
    a72a:	92 9f       	mul	r25, r18
    a72c:	f0 0d       	add	r31, r0
    a72e:	83 9f       	mul	r24, r19
    a730:	f0 0d       	add	r31, r0
    a732:	74 9f       	mul	r23, r20
    a734:	f0 0d       	add	r31, r0
    a736:	65 9f       	mul	r22, r21
    a738:	f0 0d       	add	r31, r0
    a73a:	99 27       	eor	r25, r25
    a73c:	72 9f       	mul	r23, r18
    a73e:	b0 0d       	add	r27, r0
    a740:	e1 1d       	adc	r30, r1
    a742:	f9 1f       	adc	r31, r25
    a744:	63 9f       	mul	r22, r19
    a746:	b0 0d       	add	r27, r0
    a748:	e1 1d       	adc	r30, r1
    a74a:	f9 1f       	adc	r31, r25
    a74c:	bd 01       	movw	r22, r26
    a74e:	cf 01       	movw	r24, r30
    a750:	11 24       	eor	r1, r1
    a752:	08 95       	ret

0000a754 <__udivmodhi4>:
    a754:	aa 1b       	sub	r26, r26
    a756:	bb 1b       	sub	r27, r27
    a758:	51 e1       	ldi	r21, 0x11	; 17
    a75a:	07 c0       	rjmp	.+14     	; 0xa76a <__udivmodhi4_ep>

0000a75c <__udivmodhi4_loop>:
    a75c:	aa 1f       	adc	r26, r26
    a75e:	bb 1f       	adc	r27, r27
    a760:	a6 17       	cp	r26, r22
    a762:	b7 07       	cpc	r27, r23
    a764:	10 f0       	brcs	.+4      	; 0xa76a <__udivmodhi4_ep>
    a766:	a6 1b       	sub	r26, r22
    a768:	b7 0b       	sbc	r27, r23

0000a76a <__udivmodhi4_ep>:
    a76a:	88 1f       	adc	r24, r24
    a76c:	99 1f       	adc	r25, r25
    a76e:	5a 95       	dec	r21
    a770:	a9 f7       	brne	.-22     	; 0xa75c <__udivmodhi4_loop>
    a772:	80 95       	com	r24
    a774:	90 95       	com	r25
    a776:	bc 01       	movw	r22, r24
    a778:	cd 01       	movw	r24, r26
    a77a:	08 95       	ret

0000a77c <__divmodhi4>:
    a77c:	97 fb       	bst	r25, 7
    a77e:	09 2e       	mov	r0, r25
    a780:	07 26       	eor	r0, r23
    a782:	0a d0       	rcall	.+20     	; 0xa798 <__divmodhi4_neg1>
    a784:	77 fd       	sbrc	r23, 7
    a786:	04 d0       	rcall	.+8      	; 0xa790 <__divmodhi4_neg2>
    a788:	e5 df       	rcall	.-54     	; 0xa754 <__udivmodhi4>
    a78a:	06 d0       	rcall	.+12     	; 0xa798 <__divmodhi4_neg1>
    a78c:	00 20       	and	r0, r0
    a78e:	1a f4       	brpl	.+6      	; 0xa796 <__divmodhi4_exit>

0000a790 <__divmodhi4_neg2>:
    a790:	70 95       	com	r23
    a792:	61 95       	neg	r22
    a794:	7f 4f       	sbci	r23, 0xFF	; 255

0000a796 <__divmodhi4_exit>:
    a796:	08 95       	ret

0000a798 <__divmodhi4_neg1>:
    a798:	f6 f7       	brtc	.-4      	; 0xa796 <__divmodhi4_exit>
    a79a:	90 95       	com	r25
    a79c:	81 95       	neg	r24
    a79e:	9f 4f       	sbci	r25, 0xFF	; 255
    a7a0:	08 95       	ret

0000a7a2 <__divmodsi4>:
    a7a2:	97 fb       	bst	r25, 7
    a7a4:	09 2e       	mov	r0, r25
    a7a6:	05 26       	eor	r0, r21
    a7a8:	0e d0       	rcall	.+28     	; 0xa7c6 <__divmodsi4_neg1>
    a7aa:	57 fd       	sbrc	r21, 7
    a7ac:	04 d0       	rcall	.+8      	; 0xa7b6 <__divmodsi4_neg2>
    a7ae:	14 d0       	rcall	.+40     	; 0xa7d8 <__udivmodsi4>
    a7b0:	0a d0       	rcall	.+20     	; 0xa7c6 <__divmodsi4_neg1>
    a7b2:	00 1c       	adc	r0, r0
    a7b4:	38 f4       	brcc	.+14     	; 0xa7c4 <__divmodsi4_exit>

0000a7b6 <__divmodsi4_neg2>:
    a7b6:	50 95       	com	r21
    a7b8:	40 95       	com	r20
    a7ba:	30 95       	com	r19
    a7bc:	21 95       	neg	r18
    a7be:	3f 4f       	sbci	r19, 0xFF	; 255
    a7c0:	4f 4f       	sbci	r20, 0xFF	; 255
    a7c2:	5f 4f       	sbci	r21, 0xFF	; 255

0000a7c4 <__divmodsi4_exit>:
    a7c4:	08 95       	ret

0000a7c6 <__divmodsi4_neg1>:
    a7c6:	f6 f7       	brtc	.-4      	; 0xa7c4 <__divmodsi4_exit>
    a7c8:	90 95       	com	r25
    a7ca:	80 95       	com	r24
    a7cc:	70 95       	com	r23
    a7ce:	61 95       	neg	r22
    a7d0:	7f 4f       	sbci	r23, 0xFF	; 255
    a7d2:	8f 4f       	sbci	r24, 0xFF	; 255
    a7d4:	9f 4f       	sbci	r25, 0xFF	; 255
    a7d6:	08 95       	ret

0000a7d8 <__udivmodsi4>:
    a7d8:	a1 e2       	ldi	r26, 0x21	; 33
    a7da:	1a 2e       	mov	r1, r26
    a7dc:	aa 1b       	sub	r26, r26
    a7de:	bb 1b       	sub	r27, r27
    a7e0:	fd 01       	movw	r30, r26
    a7e2:	0d c0       	rjmp	.+26     	; 0xa7fe <__udivmodsi4_ep>

0000a7e4 <__udivmodsi4_loop>:
    a7e4:	aa 1f       	adc	r26, r26
    a7e6:	bb 1f       	adc	r27, r27
    a7e8:	ee 1f       	adc	r30, r30
    a7ea:	ff 1f       	adc	r31, r31
    a7ec:	a2 17       	cp	r26, r18
    a7ee:	b3 07       	cpc	r27, r19
    a7f0:	e4 07       	cpc	r30, r20
    a7f2:	f5 07       	cpc	r31, r21
    a7f4:	20 f0       	brcs	.+8      	; 0xa7fe <__udivmodsi4_ep>
    a7f6:	a2 1b       	sub	r26, r18
    a7f8:	b3 0b       	sbc	r27, r19
    a7fa:	e4 0b       	sbc	r30, r20
    a7fc:	f5 0b       	sbc	r31, r21

0000a7fe <__udivmodsi4_ep>:
    a7fe:	66 1f       	adc	r22, r22
    a800:	77 1f       	adc	r23, r23
    a802:	88 1f       	adc	r24, r24
    a804:	99 1f       	adc	r25, r25
    a806:	1a 94       	dec	r1
    a808:	69 f7       	brne	.-38     	; 0xa7e4 <__udivmodsi4_loop>
    a80a:	60 95       	com	r22
    a80c:	70 95       	com	r23
    a80e:	80 95       	com	r24
    a810:	90 95       	com	r25
    a812:	9b 01       	movw	r18, r22
    a814:	ac 01       	movw	r20, r24
    a816:	bd 01       	movw	r22, r26
    a818:	cf 01       	movw	r24, r30
    a81a:	08 95       	ret

0000a81c <do_rand>:
    a81c:	af 92       	push	r10
    a81e:	bf 92       	push	r11
    a820:	cf 92       	push	r12
    a822:	df 92       	push	r13
    a824:	ef 92       	push	r14
    a826:	ff 92       	push	r15
    a828:	0f 93       	push	r16
    a82a:	1f 93       	push	r17
    a82c:	cf 93       	push	r28
    a82e:	df 93       	push	r29
    a830:	ec 01       	movw	r28, r24
    a832:	68 81       	ld	r22, Y
    a834:	79 81       	ldd	r23, Y+1	; 0x01
    a836:	8a 81       	ldd	r24, Y+2	; 0x02
    a838:	9b 81       	ldd	r25, Y+3	; 0x03
    a83a:	61 15       	cp	r22, r1
    a83c:	71 05       	cpc	r23, r1
    a83e:	81 05       	cpc	r24, r1
    a840:	91 05       	cpc	r25, r1
    a842:	21 f4       	brne	.+8      	; 0xa84c <do_rand+0x30>
    a844:	64 e2       	ldi	r22, 0x24	; 36
    a846:	79 ed       	ldi	r23, 0xD9	; 217
    a848:	8b e5       	ldi	r24, 0x5B	; 91
    a84a:	97 e0       	ldi	r25, 0x07	; 7
    a84c:	2d e1       	ldi	r18, 0x1D	; 29
    a84e:	33 ef       	ldi	r19, 0xF3	; 243
    a850:	41 e0       	ldi	r20, 0x01	; 1
    a852:	50 e0       	ldi	r21, 0x00	; 0
    a854:	0e 94 d1 53 	call	0xa7a2	; 0xa7a2 <__divmodsi4>
    a858:	79 01       	movw	r14, r18
    a85a:	8a 01       	movw	r16, r20
    a85c:	27 ea       	ldi	r18, 0xA7	; 167
    a85e:	31 e4       	ldi	r19, 0x41	; 65
    a860:	40 e0       	ldi	r20, 0x00	; 0
    a862:	50 e0       	ldi	r21, 0x00	; 0
    a864:	0e 94 8b 53 	call	0xa716	; 0xa716 <__mulsi3>
    a868:	5b 01       	movw	r10, r22
    a86a:	6c 01       	movw	r12, r24
    a86c:	c8 01       	movw	r24, r16
    a86e:	b7 01       	movw	r22, r14
    a870:	2c ee       	ldi	r18, 0xEC	; 236
    a872:	34 ef       	ldi	r19, 0xF4	; 244
    a874:	4f ef       	ldi	r20, 0xFF	; 255
    a876:	5f ef       	ldi	r21, 0xFF	; 255
    a878:	0e 94 8b 53 	call	0xa716	; 0xa716 <__mulsi3>
    a87c:	6a 0d       	add	r22, r10
    a87e:	7b 1d       	adc	r23, r11
    a880:	8c 1d       	adc	r24, r12
    a882:	9d 1d       	adc	r25, r13
    a884:	97 ff       	sbrs	r25, 7
    a886:	04 c0       	rjmp	.+8      	; 0xa890 <do_rand+0x74>
    a888:	61 50       	subi	r22, 0x01	; 1
    a88a:	70 40       	sbci	r23, 0x00	; 0
    a88c:	80 40       	sbci	r24, 0x00	; 0
    a88e:	90 48       	sbci	r25, 0x80	; 128
    a890:	68 83       	st	Y, r22
    a892:	79 83       	std	Y+1, r23	; 0x01
    a894:	8a 83       	std	Y+2, r24	; 0x02
    a896:	9b 83       	std	Y+3, r25	; 0x03
    a898:	7f 77       	andi	r23, 0x7F	; 127
    a89a:	cb 01       	movw	r24, r22
    a89c:	df 91       	pop	r29
    a89e:	cf 91       	pop	r28
    a8a0:	1f 91       	pop	r17
    a8a2:	0f 91       	pop	r16
    a8a4:	ff 90       	pop	r15
    a8a6:	ef 90       	pop	r14
    a8a8:	df 90       	pop	r13
    a8aa:	cf 90       	pop	r12
    a8ac:	bf 90       	pop	r11
    a8ae:	af 90       	pop	r10
    a8b0:	08 95       	ret

0000a8b2 <rand_r>:
    a8b2:	0e 94 0e 54 	call	0xa81c	; 0xa81c <do_rand>
    a8b6:	08 95       	ret

0000a8b8 <rand>:
    a8b8:	8a e2       	ldi	r24, 0x2A	; 42
    a8ba:	92 e0       	ldi	r25, 0x02	; 2
    a8bc:	0e 94 0e 54 	call	0xa81c	; 0xa81c <do_rand>
    a8c0:	08 95       	ret

0000a8c2 <srand>:
    a8c2:	a0 e0       	ldi	r26, 0x00	; 0
    a8c4:	b0 e0       	ldi	r27, 0x00	; 0
    a8c6:	80 93 2a 02 	sts	0x022A, r24
    a8ca:	90 93 2b 02 	sts	0x022B, r25
    a8ce:	a0 93 2c 02 	sts	0x022C, r26
    a8d2:	b0 93 2d 02 	sts	0x022D, r27
    a8d6:	08 95       	ret

0000a8d8 <memset>:
    a8d8:	dc 01       	movw	r26, r24
    a8da:	01 c0       	rjmp	.+2      	; 0xa8de <memset+0x6>
    a8dc:	6d 93       	st	X+, r22
    a8de:	41 50       	subi	r20, 0x01	; 1
    a8e0:	50 40       	sbci	r21, 0x00	; 0
    a8e2:	e0 f7       	brcc	.-8      	; 0xa8dc <memset+0x4>
    a8e4:	08 95       	ret

0000a8e6 <__eerd_block_m2560>:
    a8e6:	dc 01       	movw	r26, r24
    a8e8:	cb 01       	movw	r24, r22

0000a8ea <__eerd_blraw_m2560>:
    a8ea:	fc 01       	movw	r30, r24
    a8ec:	f9 99       	sbic	0x1f, 1	; 31
    a8ee:	fe cf       	rjmp	.-4      	; 0xa8ec <__eerd_blraw_m2560+0x2>
    a8f0:	06 c0       	rjmp	.+12     	; 0xa8fe <__eerd_blraw_m2560+0x14>
    a8f2:	f2 bd       	out	0x22, r31	; 34
    a8f4:	e1 bd       	out	0x21, r30	; 33
    a8f6:	f8 9a       	sbi	0x1f, 0	; 31
    a8f8:	31 96       	adiw	r30, 0x01	; 1
    a8fa:	00 b4       	in	r0, 0x20	; 32
    a8fc:	0d 92       	st	X+, r0
    a8fe:	41 50       	subi	r20, 0x01	; 1
    a900:	50 40       	sbci	r21, 0x00	; 0
    a902:	b8 f7       	brcc	.-18     	; 0xa8f2 <__eerd_blraw_m2560+0x8>
    a904:	08 95       	ret

0000a906 <__eerd_byte_m2560>:
    a906:	f9 99       	sbic	0x1f, 1	; 31
    a908:	fe cf       	rjmp	.-4      	; 0xa906 <__eerd_byte_m2560>
    a90a:	92 bd       	out	0x22, r25	; 34
    a90c:	81 bd       	out	0x21, r24	; 33
    a90e:	f8 9a       	sbi	0x1f, 0	; 31
    a910:	99 27       	eor	r25, r25
    a912:	80 b5       	in	r24, 0x20	; 32
    a914:	08 95       	ret

0000a916 <__eerd_word_m2560>:
    a916:	a8 e1       	ldi	r26, 0x18	; 24
    a918:	b0 e0       	ldi	r27, 0x00	; 0
    a91a:	42 e0       	ldi	r20, 0x02	; 2
    a91c:	50 e0       	ldi	r21, 0x00	; 0
    a91e:	0c 94 75 54 	jmp	0xa8ea	; 0xa8ea <__eerd_blraw_m2560>

0000a922 <__eeupd_block_m2560>:
    a922:	dc 01       	movw	r26, r24
    a924:	a4 0f       	add	r26, r20
    a926:	b5 1f       	adc	r27, r21
    a928:	41 50       	subi	r20, 0x01	; 1
    a92a:	50 40       	sbci	r21, 0x00	; 0
    a92c:	48 f0       	brcs	.+18     	; 0xa940 <__eeupd_block_m2560+0x1e>
    a92e:	cb 01       	movw	r24, r22
    a930:	84 0f       	add	r24, r20
    a932:	95 1f       	adc	r25, r21
    a934:	2e 91       	ld	r18, -X
    a936:	0e 94 a2 54 	call	0xa944	; 0xa944 <__eeupd_r18_m2560>
    a93a:	41 50       	subi	r20, 0x01	; 1
    a93c:	50 40       	sbci	r21, 0x00	; 0
    a93e:	d0 f7       	brcc	.-12     	; 0xa934 <__eeupd_block_m2560+0x12>
    a940:	08 95       	ret

0000a942 <__eeupd_byte_m2560>:
    a942:	26 2f       	mov	r18, r22

0000a944 <__eeupd_r18_m2560>:
    a944:	f9 99       	sbic	0x1f, 1	; 31
    a946:	fe cf       	rjmp	.-4      	; 0xa944 <__eeupd_r18_m2560>
    a948:	92 bd       	out	0x22, r25	; 34
    a94a:	81 bd       	out	0x21, r24	; 33
    a94c:	f8 9a       	sbi	0x1f, 0	; 31
    a94e:	01 97       	sbiw	r24, 0x01	; 1
    a950:	00 b4       	in	r0, 0x20	; 32
    a952:	02 16       	cp	r0, r18
    a954:	39 f0       	breq	.+14     	; 0xa964 <__eeupd_r18_m2560+0x20>
    a956:	1f ba       	out	0x1f, r1	; 31
    a958:	20 bd       	out	0x20, r18	; 32
    a95a:	0f b6       	in	r0, 0x3f	; 63
    a95c:	f8 94       	cli
    a95e:	fa 9a       	sbi	0x1f, 2	; 31
    a960:	f9 9a       	sbi	0x1f, 1	; 31
    a962:	0f be       	out	0x3f, r0	; 63
    a964:	08 95       	ret

0000a966 <__eeupd_word_m2560>:
    a966:	01 96       	adiw	r24, 0x01	; 1
    a968:	27 2f       	mov	r18, r23
    a96a:	0e 94 a2 54 	call	0xa944	; 0xa944 <__eeupd_r18_m2560>
    a96e:	0c 94 a1 54 	jmp	0xa942	; 0xa942 <__eeupd_byte_m2560>

0000a972 <__eewr_byte_m2560>:
    a972:	26 2f       	mov	r18, r22

0000a974 <__eewr_r18_m2560>:
    a974:	f9 99       	sbic	0x1f, 1	; 31
    a976:	fe cf       	rjmp	.-4      	; 0xa974 <__eewr_r18_m2560>
    a978:	1f ba       	out	0x1f, r1	; 31
    a97a:	92 bd       	out	0x22, r25	; 34
    a97c:	81 bd       	out	0x21, r24	; 33
    a97e:	20 bd       	out	0x20, r18	; 32
    a980:	0f b6       	in	r0, 0x3f	; 63
    a982:	f8 94       	cli
    a984:	fa 9a       	sbi	0x1f, 2	; 31
    a986:	f9 9a       	sbi	0x1f, 1	; 31
    a988:	0f be       	out	0x3f, r0	; 63
    a98a:	01 96       	adiw	r24, 0x01	; 1
    a98c:	08 95       	ret

0000a98e <__eewr_word_m2560>:
    a98e:	0e 94 b9 54 	call	0xa972	; 0xa972 <__eewr_byte_m2560>
    a992:	27 2f       	mov	r18, r23
    a994:	0c 94 ba 54 	jmp	0xa974	; 0xa974 <__eewr_r18_m2560>

0000a998 <_exit>:
    a998:	ff cf       	rjmp	.-2      	; 0xa998 <_exit>
