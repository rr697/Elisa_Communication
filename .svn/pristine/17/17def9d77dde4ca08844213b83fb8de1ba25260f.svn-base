
Elisa3-avr-studio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800200  0000b0cc  0000b160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000b0cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000957  0080022e  0080022e  0000b18e  2**0
                  ALLOC
  3 .stab         000037ec  00000000  00000000  0000b190  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f7b  00000000  00000000  0000e97c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000238  00000000  00000000  0000f8f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00002728  00000000  00000000  0000fb2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000067e9  00000000  00000000  00012257  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001291  00000000  00000000  00018a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000085cd  00000000  00000000  00019cd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000920  00000000  00000000  000222a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001dfb  00000000  00000000  00022bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002966  00000000  00000000  000249bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000296  00000000  00000000  00027321  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000140  00000000  00000000  000275b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__ctors_end>
       4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
       8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
       c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      10:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      14:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      18:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      1c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      20:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      24:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      28:	0c 94 d4 15 	jmp	0x2ba8	; 0x2ba8 <__vector_10>
      2c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      30:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      34:	0c 94 08 16 	jmp	0x2c10	; 0x2c10 <__vector_13>
      38:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      3c:	0c 94 c1 21 	jmp	0x4382	; 0x4382 <__vector_15>
      40:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      44:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      48:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      4c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      50:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      54:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      58:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      5c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      60:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      64:	0c 94 85 20 	jmp	0x410a	; 0x410a <__vector_25>
      68:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      6c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      70:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      74:	0c 94 a3 22 	jmp	0x4546	; 0x4546 <__vector_29>
      78:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      7c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      80:	0c 94 d7 3c 	jmp	0x79ae	; 0x79ae <__vector_32>
      84:	0c 94 ed 3c 	jmp	0x79da	; 0x79da <__vector_33>
      88:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      8c:	0c 94 4a 3c 	jmp	0x7894	; 0x7894 <__vector_35>
      90:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      94:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      98:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      9c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      a0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      a4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      a8:	0c 94 1e 3c 	jmp	0x783c	; 0x783c <__vector_42>
      ac:	0c 94 34 3c 	jmp	0x7868	; 0x7868 <__vector_43>
      b0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      b4:	0c 94 87 3b 	jmp	0x770e	; 0x770e <__vector_45>
      b8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      bc:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      c0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      c4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      c8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      cc:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      d0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      d4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      d8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      dc:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      e0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      e4:	e5 18       	sub	r14, r5
      e6:	c9 18       	sub	r12, r9
      e8:	97 18       	sub	r9, r7
      ea:	82 18       	sub	r8, r2
      ec:	59 18       	sub	r5, r9
      ee:	47 18       	sub	r4, r7
      f0:	1e 18       	sub	r1, r14
      f2:	02 18       	sub	r0, r2
      f4:	c9 17       	cp	r28, r25
      f6:	b1 17       	cp	r27, r17
      f8:	4a 17       	cp	r20, r26
      fa:	4a 17       	cp	r20, r26
      fc:	4a 17       	cp	r20, r26
      fe:	4a 17       	cp	r20, r26
     100:	4a 17       	cp	r20, r26
     102:	4a 17       	cp	r20, r26
     104:	f6 17       	cp	r31, r22
     106:	a6 17       	cp	r26, r22
     108:	4a 17       	cp	r20, r26
     10a:	4a 17       	cp	r20, r26
     10c:	4a 17       	cp	r20, r26
     10e:	4a 17       	cp	r20, r26
     110:	4a 17       	cp	r20, r26
     112:	4a 17       	cp	r20, r26
     114:	4a 17       	cp	r20, r26
     116:	4a 17       	cp	r20, r26
     118:	4a 17       	cp	r20, r26
     11a:	4a 17       	cp	r20, r26
     11c:	4a 17       	cp	r20, r26
     11e:	4a 17       	cp	r20, r26
     120:	c9 17       	cp	r28, r25
     122:	97 18       	sub	r9, r7
     124:	7e 17       	cp	r23, r30
     126:	71 17       	cp	r23, r17
     128:	4a 17       	cp	r20, r26
     12a:	4a 17       	cp	r20, r26
     12c:	4a 17       	cp	r20, r26
     12e:	4a 17       	cp	r20, r26
     130:	4a 17       	cp	r20, r26
     132:	4a 17       	cp	r20, r26
     134:	4a 17       	cp	r20, r26
     136:	4a 17       	cp	r20, r26
     138:	4a 17       	cp	r20, r26
     13a:	4a 17       	cp	r20, r26
     13c:	4a 17       	cp	r20, r26
     13e:	4a 17       	cp	r20, r26
     140:	59 18       	sub	r5, r9
     142:	1e 18       	sub	r1, r14
     144:	4a 17       	cp	r20, r26
     146:	4a 17       	cp	r20, r26
     148:	e5 18       	sub	r14, r5
     14a:	47 18       	sub	r4, r7
     14c:	8a 17       	cp	r24, r26
     14e:	08 4a       	sbci	r16, 0xA8	; 168
     150:	d7 3b       	cpi	r29, 0xB7	; 183
     152:	3b ce       	rjmp	.-906    	; 0xfffffdca <__eeprom_end+0xff7efdca>
     154:	01 6e       	ori	r16, 0xE1	; 225
     156:	84 bc       	out	0x24, r8	; 36
     158:	bf fd       	.word	0xfdbf	; ????
     15a:	c1 2f       	mov	r28, r17
     15c:	3d 6c       	ori	r19, 0xCD	; 205
     15e:	74 31       	cpi	r23, 0x14	; 20
     160:	9a bd       	out	0x2a, r25	; 42
     162:	56 83       	std	Z+6, r21	; 0x06
     164:	3d da       	rcall	.-2950   	; 0xfffff5e0 <__eeprom_end+0xff7ef5e0>
     166:	3d 00       	.word	0x003d	; ????
     168:	c7 7f       	andi	r28, 0xF7	; 247
     16a:	11 be       	out	0x31, r1	; 49
     16c:	d9 e4       	ldi	r29, 0x49	; 73
     16e:	bb 4c       	sbci	r27, 0xCB	; 203
     170:	3e 91       	ld	r19, -X
     172:	6b aa       	std	Y+51, r6	; 0x33
     174:	aa be       	out	0x3a, r10	; 58
     176:	00 00       	nop
     178:	00 80       	ld	r0, Z
     17a:	3f 05       	cpc	r19, r15
     17c:	a8 4c       	sbci	r26, 0xC8	; 200
     17e:	cd b2       	in	r12, 0x1d	; 29
     180:	d4 4e       	sbci	r29, 0xE4	; 228
     182:	b9 38       	cpi	r27, 0x89	; 137
     184:	36 a9       	ldd	r19, Z+54	; 0x36
     186:	02 0c       	add	r0, r2
     188:	50 b9       	out	0x00, r21	; 0
     18a:	91 86       	std	Z+9, r9	; 0x09
     18c:	88 08       	sbc	r8, r8
     18e:	3c a6       	std	Y+44, r3	; 0x2c
     190:	aa aa       	std	Y+50, r10	; 0x32
     192:	2a be       	out	0x3a, r2	; 58
     194:	00 00       	nop
     196:	00 80       	ld	r0, Z
     198:	3f 00       	.word	0x003f	; ????

0000019a <__ctors_end>:
     19a:	11 24       	eor	r1, r1
     19c:	1f be       	out	0x3f, r1	; 63
     19e:	cf ef       	ldi	r28, 0xFF	; 255
     1a0:	d1 e2       	ldi	r29, 0x21	; 33
     1a2:	de bf       	out	0x3e, r29	; 62
     1a4:	cd bf       	out	0x3d, r28	; 61
     1a6:	00 e0       	ldi	r16, 0x00	; 0
     1a8:	0c bf       	out	0x3c, r16	; 60

000001aa <__do_copy_data>:
     1aa:	12 e0       	ldi	r17, 0x02	; 2
     1ac:	a0 e0       	ldi	r26, 0x00	; 0
     1ae:	b2 e0       	ldi	r27, 0x02	; 2
     1b0:	ec ec       	ldi	r30, 0xCC	; 204
     1b2:	f0 eb       	ldi	r31, 0xB0	; 176
     1b4:	02 c0       	rjmp	.+4      	; 0x1ba <.do_copy_data_start>

000001b6 <.do_copy_data_loop>:
     1b6:	05 90       	lpm	r0, Z+
     1b8:	0d 92       	st	X+, r0

000001ba <.do_copy_data_start>:
     1ba:	ae 32       	cpi	r26, 0x2E	; 46
     1bc:	b1 07       	cpc	r27, r17
     1be:	d9 f7       	brne	.-10     	; 0x1b6 <.do_copy_data_loop>

000001c0 <__do_clear_bss>:
     1c0:	1b e0       	ldi	r17, 0x0B	; 11
     1c2:	ae e2       	ldi	r26, 0x2E	; 46
     1c4:	b2 e0       	ldi	r27, 0x02	; 2
     1c6:	01 c0       	rjmp	.+2      	; 0x1ca <.do_clear_bss_start>

000001c8 <.do_clear_bss_loop>:
     1c8:	1d 92       	st	X+, r1

000001ca <.do_clear_bss_start>:
     1ca:	a5 38       	cpi	r26, 0x85	; 133
     1cc:	b1 07       	cpc	r27, r17
     1ce:	e1 f7       	brne	.-8      	; 0x1c8 <.do_clear_bss_loop>
     1d0:	0e 94 ee 00 	call	0x1dc	; 0x1dc <main>
     1d4:	0c 94 65 58 	jmp	0xb0ca	; 0xb0ca <_exit>

000001d8 <__bad_interrupt>:
     1d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001dc <main>:
#include "nRF24L01.h"
#include "behaviors.h"
#include "sensors.h"
#include "irCommunication.h"

int main(void) {
     1dc:	2f 92       	push	r2
     1de:	3f 92       	push	r3
     1e0:	4f 92       	push	r4
     1e2:	5f 92       	push	r5
     1e4:	6f 92       	push	r6
     1e6:	7f 92       	push	r7
     1e8:	8f 92       	push	r8
     1ea:	9f 92       	push	r9
     1ec:	af 92       	push	r10
     1ee:	bf 92       	push	r11
     1f0:	cf 92       	push	r12
     1f2:	df 92       	push	r13
     1f4:	ef 92       	push	r14
     1f6:	ff 92       	push	r15
     1f8:	0f 93       	push	r16
     1fa:	1f 93       	push	r17
     1fc:	df 93       	push	r29
     1fe:	cf 93       	push	r28
     200:	cd b7       	in	r28, 0x3d	; 61
     202:	de b7       	in	r29, 0x3e	; 62
     204:	2a 97       	sbiw	r28, 0x0a	; 10
     206:	0f b6       	in	r0, 0x3f	; 63
     208:	f8 94       	cli
     20a:	de bf       	out	0x3e, r29	; 62
     20c:	0f be       	out	0x3f, r0	; 63
     20e:	cd bf       	out	0x3d, r28	; 61
	unsigned char prevSelector=0;
	unsigned int i=0;
	unsigned int currRand=0, currRand2=0;
	float targetAngle=0;

	initPeripherals();
     210:	0e 94 60 21 	call	0x42c0	; 0x42c0 <initPeripherals>

	calibrateSensors();
     214:	0e 94 89 42 	call	0x8512	; 0x8512 <calibrateSensors>

	initBehaviors();
     218:	0e 94 03 3d 	call	0x7a06	; 0x7a06 <initBehaviors>

	startTime = getTime100MicroSec();
     21c:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
     220:	6b 01       	movw	r12, r22
     222:	7c 01       	movw	r14, r24

	speedStepCounter = getTime100MicroSec();
     224:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
     228:	9b 01       	movw	r18, r22
     22a:	ac 01       	movw	r20, r24
     22c:	60 93 70 04 	sts	0x0470, r22
     230:	30 93 71 04 	sts	0x0471, r19
     234:	40 93 72 04 	sts	0x0472, r20
     238:	50 93 73 04 	sts	0x0473, r21
     23c:	10 92 74 04 	sts	0x0474, r1
     240:	10 92 75 04 	sts	0x0475, r1
     244:	10 92 76 04 	sts	0x0476, r1
     248:	10 92 77 04 	sts	0x0477, r1

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
	unsigned char prevSelector=0;
	unsigned int i=0;
	unsigned int currRand=0, currRand2=0;
	float targetAngle=0;
     24c:	20 e0       	ldi	r18, 0x00	; 0
     24e:	30 e0       	ldi	r19, 0x00	; 0
     250:	a9 01       	movw	r20, r18
     252:	2f 83       	std	Y+7, r18	; 0x07
     254:	38 87       	std	Y+8, r19	; 0x08
     256:	49 87       	std	Y+9, r20	; 0x09
     258:	5a 87       	std	Y+10, r21	; 0x0a
int main(void) {

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
	unsigned char prevSelector=0;
	unsigned int i=0;
	unsigned int currRand=0, currRand2=0;
     25a:	aa 24       	eor	r10, r10
     25c:	bb 24       	eor	r11, r11

int main(void) {

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
	unsigned char prevSelector=0;
	unsigned int i=0;
     25e:	1e 82       	std	Y+6, r1	; 0x06
     260:	1d 82       	std	Y+5, r1	; 0x05
#include "irCommunication.h"

int main(void) {

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
	unsigned char prevSelector=0;
     262:	00 e0       	ldi	r16, 0x00	; 0
#include "sensors.h"
#include "irCommunication.h"

int main(void) {

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
     264:	19 82       	std	Y+1, r1	; 0x01
     266:	1a 82       	std	Y+2, r1	; 0x02
     268:	1b 82       	std	Y+3, r1	; 0x03
     26a:	1c 82       	std	Y+4, r1	; 0x04
		computeAngle();

		// turn off the rgb leds after one half second in the "charger demo"
		if(currentSelector==7) {
			if((getTime100MicroSec()-turnOffLedsTime) > PAUSE_500_MSEC) {
				pwm_red = 255;
     26c:	1f ef       	ldi	r17, 0xFF	; 255
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption

				switch(rgbState) {
					case 0:
						pwm_red = 255 - currRand;	
						rgbState = 1;
     26e:	22 24       	eor	r2, r2
     270:	23 94       	inc	r2
	eeprom_update_block(calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
*/

	while(1) {

		currentSelector = getSelector();	// update selector position
     272:	0e 94 3b 21 	call	0x4276	; 0x4276 <getSelector>
     276:	80 93 5c 04 	sts	0x045C, r24

		readAccelXYZ();						// update accelerometer values to compute the angle
     27a:	0e 94 c9 41 	call	0x8392	; 0x8392 <readAccelXYZ>

		computeAngle();
     27e:	0e 94 05 47 	call	0x8e0a	; 0x8e0a <computeAngle>

		// turn off the rgb leds after one half second in the "charger demo"
		if(currentSelector==7) {
     282:	80 91 5c 04 	lds	r24, 0x045C
     286:	87 30       	cpi	r24, 0x07	; 7
     288:	09 f4       	brne	.+2      	; 0x28c <main+0xb0>
     28a:	5c c2       	rjmp	.+1208   	; 0x744 <main+0x568>
				pwm_green = 255;
				pwm_blue = 255;			
			}
		}

		endTime = getTime100MicroSec();
     28c:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
     290:	6c 19       	sub	r22, r12
     292:	7d 09       	sbc	r23, r13
     294:	8e 09       	sbc	r24, r14
     296:	9f 09       	sbc	r25, r15
     298:	6e 31       	cpi	r22, 0x1E	; 30
     29a:	4b e4       	ldi	r20, 0x4B	; 75
     29c:	74 07       	cpc	r23, r20
     29e:	40 e0       	ldi	r20, 0x00	; 0
     2a0:	84 07       	cpc	r24, r20
     2a2:	40 e0       	ldi	r20, 0x00	; 0
     2a4:	94 07       	cpc	r25, r20
     2a6:	08 f0       	brcs	.+2      	; 0x2aa <main+0xce>
     2a8:	39 c2       	rjmp	.+1138   	; 0x71c <main+0x540>
			startTime = getTime100MicroSec();
		}

		
		//if(calibrateOdomFlag==0) {
			handleIRRemoteCommands();
     2aa:	0e 94 38 17 	call	0x2e70	; 0x2e70 <handleIRRemoteCommands>
		//}


		//if(calibrateOdomFlag==0) {
			handleRFCommands();
     2ae:	0e 94 bf 11 	call	0x237e	; 0x237e <handleRFCommands>
		//}


		if(calibrateOdomFlag==0) {
     2b2:	80 91 76 05 	lds	r24, 0x0576
     2b6:	88 23       	and	r24, r24
     2b8:	09 f4       	brne	.+2      	; 0x2bc <main+0xe0>
     2ba:	fe c0       	rjmp	.+508    	; 0x4b8 <main+0x2dc>

		//if(currentSelector!=6 && currentSelector!=15) {
		//	usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		//}

		switch(currentSelector) {
     2bc:	80 91 5c 04 	lds	r24, 0x045C
     2c0:	87 30       	cpi	r24, 0x07	; 7
     2c2:	09 f4       	brne	.+2      	; 0x2c6 <main+0xea>
     2c4:	ea c1       	rjmp	.+980    	; 0x69a <main+0x4be>
     2c6:	88 30       	cpi	r24, 0x08	; 8
     2c8:	08 f0       	brcs	.+2      	; 0x2cc <main+0xf0>
     2ca:	61 c0       	rjmp	.+194    	; 0x38e <main+0x1b2>
     2cc:	83 30       	cpi	r24, 0x03	; 3
     2ce:	09 f4       	brne	.+2      	; 0x2d2 <main+0xf6>
     2d0:	98 c2       	rjmp	.+1328   	; 0x802 <main+0x626>
     2d2:	84 30       	cpi	r24, 0x04	; 4
     2d4:	08 f0       	brcs	.+2      	; 0x2d8 <main+0xfc>
     2d6:	50 c2       	rjmp	.+1184   	; 0x778 <main+0x59c>
     2d8:	81 30       	cpi	r24, 0x01	; 1
     2da:	09 f4       	brne	.+2      	; 0x2de <main+0x102>
     2dc:	4d c3       	rjmp	.+1690   	; 0x978 <main+0x79c>
     2de:	82 30       	cpi	r24, 0x02	; 2
     2e0:	08 f0       	brcs	.+2      	; 0x2e4 <main+0x108>
     2e2:	91 c2       	rjmp	.+1314   	; 0x806 <main+0x62a>
    
			case 0:	// motors in direct power control (no speed control)
					handleMotorsWithNoController();
     2e4:	0e 94 16 29 	call	0x522c	; 0x522c <handleMotorsWithNoController>
     2e8:	80 91 5c 04 	lds	r24, 0x045C
					//usart0Transmit(currentOsccal,1);
					break;

		}

		if(currentSelector!=0) {
     2ec:	88 23       	and	r24, r24
     2ee:	09 f0       	breq	.+2      	; 0x2f2 <main+0x116>
     2f0:	de c0       	rjmp	.+444    	; 0x4ae <main+0x2d2>
     2f2:	80 e0       	ldi	r24, 0x00	; 0
			handleMotorsWithSpeedController();  
		}

		if(prevSelector != currentSelector) {	// in case the selector is changed, reset the robot state
     2f4:	08 17       	cp	r16, r24
     2f6:	09 f4       	brne	.+2      	; 0x2fa <main+0x11e>
     2f8:	bc cf       	rjmp	.-136    	; 0x272 <main+0x96>
			disableObstacleAvoidance();
     2fa:	0e 94 4a 3f 	call	0x7e94	; 0x7e94 <disableObstacleAvoidance>
			disableCliffAvoidance();
     2fe:	0e 94 51 3f 	call	0x7ea2	; 0x7ea2 <disableCliffAvoidance>
			GREEN_LED0_OFF;
     302:	80 91 0b 01 	lds	r24, 0x010B
     306:	81 60       	ori	r24, 0x01	; 1
     308:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED1_OFF;
     30c:	80 91 0b 01 	lds	r24, 0x010B
     310:	82 60       	ori	r24, 0x02	; 2
     312:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED2_OFF;
     316:	80 91 0b 01 	lds	r24, 0x010B
     31a:	84 60       	ori	r24, 0x04	; 4
     31c:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED3_OFF;
     320:	a3 9a       	sbi	0x14, 3	; 20
			GREEN_LED4_OFF;
     322:	80 91 0b 01 	lds	r24, 0x010B
     326:	80 61       	ori	r24, 0x10	; 16
     328:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED5_OFF;
     32c:	80 91 0b 01 	lds	r24, 0x010B
     330:	80 62       	ori	r24, 0x20	; 32
     332:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED6_OFF;
     336:	80 91 0b 01 	lds	r24, 0x010B
     33a:	80 64       	ori	r24, 0x40	; 64
     33c:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED7_OFF;
     340:	80 91 0b 01 	lds	r24, 0x010B
     344:	80 68       	ori	r24, 0x80	; 128
     346:	80 93 0b 01 	sts	0x010B, r24
			pwm_red = 255;
     34a:	10 93 0c 02 	sts	0x020C, r17
			pwm_green = 255;
     34e:	10 93 0d 02 	sts	0x020D, r17
			pwm_blue = 255;
     352:	10 93 0e 02 	sts	0x020E, r17
			updateRedLed(pwm_red);
     356:	8f ef       	ldi	r24, 0xFF	; 255
     358:	0e 94 91 3f 	call	0x7f22	; 0x7f22 <updateRedLed>
			updateGreenLed(pwm_green);
     35c:	80 91 0d 02 	lds	r24, 0x020D
     360:	0e 94 a5 3f 	call	0x7f4a	; 0x7f4a <updateGreenLed>
			updateBlueLed(pwm_blue);
     364:	80 91 0e 02 	lds	r24, 0x020E
     368:	0e 94 b9 3f 	call	0x7f72	; 0x7f72 <updateBlueLed>
			setRightSpeed(0);
     36c:	80 e0       	ldi	r24, 0x00	; 0
     36e:	0e 94 63 2a 	call	0x54c6	; 0x54c6 <setRightSpeed>
			setLeftSpeed(0);
     372:	80 e0       	ldi	r24, 0x00	; 0
     374:	0e 94 46 2a 	call	0x548c	; 0x548c <setLeftSpeed>
			rgbState = 0;
     378:	10 92 2c 03 	sts	0x032C, r1
			calibrationWritten = 0;
     37c:	10 92 79 04 	sts	0x0479, r1
			demoState = 0;
     380:	10 92 60 04 	sts	0x0460, r1

			irCommState = 0;
     384:	10 92 dd 04 	sts	0x04DD, r1
     388:	00 91 5c 04 	lds	r16, 0x045C
     38c:	72 cf       	rjmp	.-284    	; 0x272 <main+0x96>

		//if(currentSelector!=6 && currentSelector!=15) {
		//	usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		//}

		switch(currentSelector) {
     38e:	8b 30       	cpi	r24, 0x0B	; 11
     390:	09 f4       	brne	.+2      	; 0x394 <main+0x1b8>
     392:	cc c2       	rjmp	.+1432   	; 0x92c <main+0x750>
     394:	8c 30       	cpi	r24, 0x0C	; 12
     396:	08 f0       	brcs	.+2      	; 0x39a <main+0x1be>
     398:	1b c2       	rjmp	.+1078   	; 0x7d0 <main+0x5f4>
     39a:	89 30       	cpi	r24, 0x09	; 9
     39c:	09 f4       	brne	.+2      	; 0x3a0 <main+0x1c4>
     39e:	44 c2       	rjmp	.+1160   	; 0x828 <main+0x64c>
     3a0:	8a 30       	cpi	r24, 0x0A	; 10
     3a2:	08 f4       	brcc	.+2      	; 0x3a6 <main+0x1ca>
     3a4:	35 c2       	rjmp	.+1130   	; 0x810 <main+0x634>
							break;
					}
					break;

			case 10:// obstacle avoidance with random colors; 4 seconds motion and 10 seconds pause					
					switch(demoState) {
     3a6:	80 91 60 04 	lds	r24, 0x0460
     3aa:	81 30       	cpi	r24, 0x01	; 1
     3ac:	11 f4       	brne	.+4      	; 0x3b2 <main+0x1d6>
     3ae:	0c 94 f0 09 	jmp	0x13e0	; 0x13e0 <main+0x1204>
     3b2:	81 30       	cpi	r24, 0x01	; 1
     3b4:	08 f0       	brcs	.+2      	; 0x3b8 <main+0x1dc>
     3b6:	18 c4       	rjmp	.+2096   	; 0xbe8 <main+0xa0c>
						case 0: // get first clock tick and start moving the robot with obstacle avoidance enabled
							demoStartTime = getTime100MicroSec();
     3b8:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
     3bc:	60 93 64 04 	sts	0x0464, r22
     3c0:	70 93 65 04 	sts	0x0465, r23
     3c4:	80 93 66 04 	sts	0x0466, r24
     3c8:	90 93 67 04 	sts	0x0467, r25
							demoEndTime = getTime100MicroSec();							
     3cc:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
     3d0:	60 93 6c 04 	sts	0x046C, r22
     3d4:	70 93 6d 04 	sts	0x046D, r23
     3d8:	80 93 6e 04 	sts	0x046E, r24
     3dc:	90 93 6f 04 	sts	0x046F, r25
							demoStartTime2 = getTime100MicroSec();
     3e0:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
     3e4:	60 93 68 04 	sts	0x0468, r22
     3e8:	70 93 69 04 	sts	0x0469, r23
     3ec:	80 93 6a 04 	sts	0x046A, r24
     3f0:	90 93 6b 04 	sts	0x046B, r25
							enableObstacleAvoidance();
     3f4:	0e 94 46 3f 	call	0x7e8c	; 0x7e8c <enableObstacleAvoidance>
							setLeftSpeed(20);
     3f8:	84 e1       	ldi	r24, 0x14	; 20
     3fa:	0e 94 46 2a 	call	0x548c	; 0x548c <setLeftSpeed>
							setRightSpeed(20);
     3fe:	84 e1       	ldi	r24, 0x14	; 20
     400:	0e 94 63 2a 	call	0x54c6	; 0x54c6 <setRightSpeed>
							demoState = 1;
     404:	20 92 60 04 	sts	0x0460, r2
								demoState = 1;							
							}
							break;
					}	
					
					switch(rgbLedState) {
     408:	80 91 7b 04 	lds	r24, 0x047B
     40c:	81 30       	cpi	r24, 0x01	; 1
     40e:	09 f4       	brne	.+2      	; 0x412 <main+0x236>
     410:	1e c4       	rjmp	.+2108   	; 0xc4e <main+0xa72>
     412:	81 30       	cpi	r24, 0x01	; 1
     414:	08 f0       	brcs	.+2      	; 0x418 <main+0x23c>
     416:	ae c3       	rjmp	.+1884   	; 0xb74 <main+0x998>
						case 0:							
							pwm_red = 255;
     418:	10 93 0c 02 	sts	0x020C, r17
							pwm_green = 255;
     41c:	10 93 0d 02 	sts	0x020D, r17
							pwm_blue = 255;
     420:	10 93 0e 02 	sts	0x020E, r17
							if((getTime100MicroSec()-demoEndTime) >= (PAUSE_100_MSEC)) {
     424:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
     428:	9b 01       	movw	r18, r22
     42a:	ac 01       	movw	r20, r24
     42c:	80 91 6c 04 	lds	r24, 0x046C
     430:	90 91 6d 04 	lds	r25, 0x046D
     434:	a0 91 6e 04 	lds	r26, 0x046E
     438:	b0 91 6f 04 	lds	r27, 0x046F
     43c:	28 1b       	sub	r18, r24
     43e:	39 0b       	sbc	r19, r25
     440:	4a 0b       	sbc	r20, r26
     442:	5b 0b       	sbc	r21, r27
     444:	21 3c       	cpi	r18, 0xC1	; 193
     446:	f3 e0       	ldi	r31, 0x03	; 3
     448:	3f 07       	cpc	r19, r31
     44a:	f0 e0       	ldi	r31, 0x00	; 0
     44c:	4f 07       	cpc	r20, r31
     44e:	f0 e0       	ldi	r31, 0x00	; 0
     450:	5f 07       	cpc	r21, r31
     452:	10 f0       	brcs	.+4      	; 0x458 <main+0x27c>
     454:	0c 94 bd 0c 	jmp	0x197a	; 0x197a <main+0x179e>
									greenLedState = 0;
								}
								setGreenLed(greenLedState, 1);
								demoEndTime = getTime100MicroSec();											
							}
							if((getTime100MicroSec()-demoStartTime2) >= (PAUSE_2_SEC)) {
     458:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
     45c:	9b 01       	movw	r18, r22
     45e:	ac 01       	movw	r20, r24
     460:	80 91 68 04 	lds	r24, 0x0468
     464:	90 91 69 04 	lds	r25, 0x0469
     468:	a0 91 6a 04 	lds	r26, 0x046A
     46c:	b0 91 6b 04 	lds	r27, 0x046B
     470:	28 1b       	sub	r18, r24
     472:	39 0b       	sbc	r19, r25
     474:	4a 0b       	sbc	r20, r26
     476:	5b 0b       	sbc	r21, r27
     478:	2e 31       	cpi	r18, 0x1E	; 30
     47a:	6b e4       	ldi	r22, 0x4B	; 75
     47c:	36 07       	cpc	r19, r22
     47e:	60 e0       	ldi	r22, 0x00	; 0
     480:	46 07       	cpc	r20, r22
     482:	60 e0       	ldi	r22, 0x00	; 0
     484:	56 07       	cpc	r21, r22
     486:	10 f0       	brcs	.+4      	; 0x48c <main+0x2b0>
     488:	0c 94 af 0c 	jmp	0x195e	; 0x195e <main+0x1782>
								rgbLedState = 1;
								demoStartTime2 = getTime100MicroSec();
							}
							updateRedLed(pwm_red);
     48c:	80 91 0c 02 	lds	r24, 0x020C
     490:	0e 94 91 3f 	call	0x7f22	; 0x7f22 <updateRedLed>
							updateGreenLed(pwm_green);
     494:	80 91 0d 02 	lds	r24, 0x020D
     498:	0e 94 a5 3f 	call	0x7f4a	; 0x7f4a <updateGreenLed>
							updateBlueLed(pwm_blue);
     49c:	80 91 0e 02 	lds	r24, 0x020E
     4a0:	0e 94 b9 3f 	call	0x7f72	; 0x7f72 <updateBlueLed>
     4a4:	80 91 5c 04 	lds	r24, 0x045C
					//usart0Transmit(currentOsccal,1);
					break;

		}

		if(currentSelector!=0) {
     4a8:	88 23       	and	r24, r24
     4aa:	09 f4       	brne	.+2      	; 0x4ae <main+0x2d2>
     4ac:	22 cf       	rjmp	.-444    	; 0x2f2 <main+0x116>
			handleMotorsWithSpeedController();  
     4ae:	0e 94 ad 36 	call	0x6d5a	; 0x6d5a <handleMotorsWithSpeedController>
     4b2:	80 91 5c 04 	lds	r24, 0x045C
     4b6:	1e cf       	rjmp	.-452    	; 0x2f4 <main+0x118>
			handleRFCommands();
		//}


		if(calibrateOdomFlag==0) {
			if((getTime100MicroSec()-speedStepCounter) >= SPEED_STEP_DELAY) {
     4b8:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
     4bc:	9b 01       	movw	r18, r22
     4be:	ac 01       	movw	r20, r24
     4c0:	60 e0       	ldi	r22, 0x00	; 0
     4c2:	70 e0       	ldi	r23, 0x00	; 0
     4c4:	cb 01       	movw	r24, r22
     4c6:	f0 91 70 04 	lds	r31, 0x0470
     4ca:	e0 91 71 04 	lds	r30, 0x0471
     4ce:	80 90 72 04 	lds	r8, 0x0472
     4d2:	40 90 73 04 	lds	r4, 0x0473
     4d6:	30 90 74 04 	lds	r3, 0x0474
     4da:	50 90 75 04 	lds	r5, 0x0475
     4de:	60 90 76 04 	lds	r6, 0x0476
     4e2:	70 90 77 04 	lds	r7, 0x0477
     4e6:	b2 2f       	mov	r27, r18
     4e8:	bf 1b       	sub	r27, r31
     4ea:	a1 e0       	ldi	r26, 0x01	; 1
     4ec:	2b 17       	cp	r18, r27
     4ee:	08 f0       	brcs	.+2      	; 0x4f2 <main+0x316>
     4f0:	a0 e0       	ldi	r26, 0x00	; 0
     4f2:	f3 2f       	mov	r31, r19
     4f4:	fe 1b       	sub	r31, r30
     4f6:	ef 2f       	mov	r30, r31
     4f8:	f1 e0       	ldi	r31, 0x01	; 1
     4fa:	3e 17       	cp	r19, r30
     4fc:	08 f0       	brcs	.+2      	; 0x500 <main+0x324>
     4fe:	f0 e0       	ldi	r31, 0x00	; 0
     500:	9e 2e       	mov	r9, r30
     502:	9a 1a       	sub	r9, r26
     504:	a9 2d       	mov	r26, r9
     506:	99 24       	eor	r9, r9
     508:	93 94       	inc	r9
     50a:	ea 17       	cp	r30, r26
     50c:	08 f0       	brcs	.+2      	; 0x510 <main+0x334>
     50e:	99 24       	eor	r9, r9
     510:	f9 29       	or	r31, r9
     512:	e4 2f       	mov	r30, r20
     514:	e8 19       	sub	r30, r8
     516:	8e 2e       	mov	r8, r30
     518:	e1 e0       	ldi	r30, 0x01	; 1
     51a:	48 15       	cp	r20, r8
     51c:	08 f0       	brcs	.+2      	; 0x520 <main+0x344>
     51e:	e0 e0       	ldi	r30, 0x00	; 0
     520:	98 2c       	mov	r9, r8
     522:	9f 1a       	sub	r9, r31
     524:	f1 e0       	ldi	r31, 0x01	; 1
     526:	89 14       	cp	r8, r9
     528:	08 f0       	brcs	.+2      	; 0x52c <main+0x350>
     52a:	f0 e0       	ldi	r31, 0x00	; 0
     52c:	ef 2b       	or	r30, r31
     52e:	f5 2f       	mov	r31, r21
     530:	f4 19       	sub	r31, r4
     532:	4f 2e       	mov	r4, r31
     534:	f1 e0       	ldi	r31, 0x01	; 1
     536:	54 15       	cp	r21, r4
     538:	08 f0       	brcs	.+2      	; 0x53c <main+0x360>
     53a:	f0 e0       	ldi	r31, 0x00	; 0
     53c:	84 2c       	mov	r8, r4
     53e:	8e 1a       	sub	r8, r30
     540:	e1 e0       	ldi	r30, 0x01	; 1
     542:	48 14       	cp	r4, r8
     544:	08 f0       	brcs	.+2      	; 0x548 <main+0x36c>
     546:	e0 e0       	ldi	r30, 0x00	; 0
     548:	fe 2b       	or	r31, r30
     54a:	31 94       	neg	r3
     54c:	e1 e0       	ldi	r30, 0x01	; 1
     54e:	63 15       	cp	r22, r3
     550:	08 f0       	brcs	.+2      	; 0x554 <main+0x378>
     552:	e0 e0       	ldi	r30, 0x00	; 0
     554:	43 2c       	mov	r4, r3
     556:	4f 1a       	sub	r4, r31
     558:	f1 e0       	ldi	r31, 0x01	; 1
     55a:	34 14       	cp	r3, r4
     55c:	08 f0       	brcs	.+2      	; 0x560 <main+0x384>
     55e:	f0 e0       	ldi	r31, 0x00	; 0
     560:	ef 2b       	or	r30, r31
     562:	51 94       	neg	r5
     564:	f1 e0       	ldi	r31, 0x01	; 1
     566:	75 15       	cp	r23, r5
     568:	08 f0       	brcs	.+2      	; 0x56c <main+0x390>
     56a:	f0 e0       	ldi	r31, 0x00	; 0
     56c:	35 2c       	mov	r3, r5
     56e:	3e 1a       	sub	r3, r30
     570:	e1 e0       	ldi	r30, 0x01	; 1
     572:	53 14       	cp	r5, r3
     574:	08 f0       	brcs	.+2      	; 0x578 <main+0x39c>
     576:	e0 e0       	ldi	r30, 0x00	; 0
     578:	fe 2b       	or	r31, r30
     57a:	61 94       	neg	r6
     57c:	e1 e0       	ldi	r30, 0x01	; 1
     57e:	86 15       	cp	r24, r6
     580:	08 f0       	brcs	.+2      	; 0x584 <main+0x3a8>
     582:	e0 e0       	ldi	r30, 0x00	; 0
     584:	96 2d       	mov	r25, r6
     586:	9f 1b       	sub	r25, r31
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	69 16       	cp	r6, r25
     58c:	08 f0       	brcs	.+2      	; 0x590 <main+0x3b4>
     58e:	80 e0       	ldi	r24, 0x00	; 0
     590:	e8 2b       	or	r30, r24
     592:	71 94       	neg	r7
     594:	7e 16       	cp	r7, r30
     596:	91 f4       	brne	.+36     	; 0x5bc <main+0x3e0>
     598:	99 23       	and	r25, r25
     59a:	81 f4       	brne	.+32     	; 0x5bc <main+0x3e0>
     59c:	33 20       	and	r3, r3
     59e:	71 f4       	brne	.+28     	; 0x5bc <main+0x3e0>
     5a0:	44 20       	and	r4, r4
     5a2:	61 f4       	brne	.+24     	; 0x5bc <main+0x3e0>
     5a4:	88 20       	and	r8, r8
     5a6:	51 f4       	brne	.+20     	; 0x5bc <main+0x3e0>
     5a8:	99 20       	and	r9, r9
     5aa:	41 f4       	brne	.+16     	; 0x5bc <main+0x3e0>
     5ac:	a2 30       	cpi	r26, 0x02	; 2
     5ae:	30 f4       	brcc	.+12     	; 0x5bc <main+0x3e0>
     5b0:	a1 30       	cpi	r26, 0x01	; 1
     5b2:	09 f0       	breq	.+2      	; 0x5b6 <main+0x3da>
     5b4:	83 ce       	rjmp	.-762    	; 0x2bc <main+0xe0>
     5b6:	b0 39       	cpi	r27, 0x90	; 144
     5b8:	08 f4       	brcc	.+2      	; 0x5bc <main+0x3e0>
     5ba:	80 ce       	rjmp	.-768    	; 0x2bc <main+0xe0>
				speedStepCounter = getTime100MicroSec();
     5bc:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
     5c0:	9b 01       	movw	r18, r22
     5c2:	ac 01       	movw	r20, r24
     5c4:	60 93 70 04 	sts	0x0470, r22
     5c8:	30 93 71 04 	sts	0x0471, r19
     5cc:	40 93 72 04 	sts	0x0472, r20
     5d0:	50 93 73 04 	sts	0x0473, r21
     5d4:	10 92 74 04 	sts	0x0474, r1
     5d8:	10 92 75 04 	sts	0x0475, r1
     5dc:	10 92 76 04 	sts	0x0476, r1
     5e0:	10 92 77 04 	sts	0x0477, r1

				if(softAccEnabled) {
     5e4:	80 91 78 04 	lds	r24, 0x0478
     5e8:	88 23       	and	r24, r24
     5ea:	09 f4       	brne	.+2      	; 0x5ee <main+0x412>
     5ec:	e5 c1       	rjmp	.+970    	; 0x9b8 <main+0x7dc>
					if(pwm_right_desired == 0) {
     5ee:	80 91 09 03 	lds	r24, 0x0309
     5f2:	90 91 0a 03 	lds	r25, 0x030A
     5f6:	00 97       	sbiw	r24, 0x00	; 0
     5f8:	09 f4       	brne	.+2      	; 0x5fc <main+0x420>
     5fa:	89 c2       	rjmp	.+1298   	; 0xb0e <main+0x932>
						pwm_intermediate_right_desired = 0;
					} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
     5fc:	20 91 0d 03 	lds	r18, 0x030D
     600:	30 91 0e 03 	lds	r19, 0x030E
     604:	28 9f       	mul	r18, r24
     606:	a0 01       	movw	r20, r0
     608:	29 9f       	mul	r18, r25
     60a:	50 0d       	add	r21, r0
     60c:	38 9f       	mul	r19, r24
     60e:	50 0d       	add	r21, r0
     610:	11 24       	eor	r1, r1
     612:	57 fd       	sbrc	r21, 7
     614:	7c c2       	rjmp	.+1272   	; 0xb0e <main+0x932>
						pwm_intermediate_right_desired = 0;
					} else if(pwm_right_desired > pwm_intermediate_right_desired) {
     616:	28 17       	cp	r18, r24
     618:	39 07       	cpc	r19, r25
     61a:	14 f0       	brlt	.+4      	; 0x620 <main+0x444>
     61c:	0c 94 9b 0c 	jmp	0x1936	; 0x1936 <main+0x175a>
						pwm_intermediate_right_desired += speedStep;
     620:	40 91 17 02 	lds	r20, 0x0217
     624:	24 0f       	add	r18, r20
     626:	31 1d       	adc	r19, r1
     628:	30 93 0e 03 	sts	0x030E, r19
     62c:	20 93 0d 03 	sts	0x030D, r18
						if(pwm_intermediate_right_desired > pwm_right_desired) {
     630:	82 17       	cp	r24, r18
     632:	93 07       	cpc	r25, r19
     634:	24 f4       	brge	.+8      	; 0x63e <main+0x462>
							pwm_intermediate_right_desired = pwm_right_desired;
						}
					} else if(pwm_right_desired < pwm_intermediate_right_desired) {
						pwm_intermediate_right_desired -= speedStep;
						if(pwm_intermediate_right_desired < pwm_right_desired) {
							pwm_intermediate_right_desired = pwm_right_desired;
     636:	90 93 0e 03 	sts	0x030E, r25
     63a:	80 93 0d 03 	sts	0x030D, r24
						}					
					}
	
					if(pwm_left_desired == 0) {
     63e:	80 91 0b 03 	lds	r24, 0x030B
     642:	90 91 0c 03 	lds	r25, 0x030C
     646:	00 97       	sbiw	r24, 0x00	; 0
     648:	09 f4       	brne	.+2      	; 0x64c <main+0x470>
     64a:	5c c2       	rjmp	.+1208   	; 0xb04 <main+0x928>
						pwm_intermediate_left_desired = 0;
					} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
     64c:	20 91 0f 03 	lds	r18, 0x030F
     650:	30 91 10 03 	lds	r19, 0x0310
     654:	28 9f       	mul	r18, r24
     656:	a0 01       	movw	r20, r0
     658:	29 9f       	mul	r18, r25
     65a:	50 0d       	add	r21, r0
     65c:	38 9f       	mul	r19, r24
     65e:	50 0d       	add	r21, r0
     660:	11 24       	eor	r1, r1
     662:	57 fd       	sbrc	r21, 7
     664:	4f c2       	rjmp	.+1182   	; 0xb04 <main+0x928>
						pwm_intermediate_left_desired = 0;
					} else if(pwm_left_desired > pwm_intermediate_left_desired) {
     666:	28 17       	cp	r18, r24
     668:	39 07       	cpc	r19, r25
     66a:	14 f0       	brlt	.+4      	; 0x670 <main+0x494>
     66c:	0c 94 87 0c 	jmp	0x190e	; 0x190e <main+0x1732>
						pwm_intermediate_left_desired += speedStep;
     670:	40 91 17 02 	lds	r20, 0x0217
     674:	24 0f       	add	r18, r20
     676:	31 1d       	adc	r19, r1
     678:	30 93 10 03 	sts	0x0310, r19
     67c:	20 93 0f 03 	sts	0x030F, r18
						if(pwm_intermediate_left_desired > pwm_left_desired) {
     680:	82 17       	cp	r24, r18
     682:	93 07       	cpc	r25, r19
     684:	0c f0       	brlt	.+2      	; 0x688 <main+0x4ac>
     686:	1a ce       	rjmp	.-972    	; 0x2bc <main+0xe0>
							pwm_intermediate_left_desired = pwm_left_desired;
						}					
					}
				} else {
					pwm_intermediate_right_desired = pwm_right_desired;
					pwm_intermediate_left_desired = pwm_left_desired;
     688:	90 93 10 03 	sts	0x0310, r25
     68c:	80 93 0f 03 	sts	0x030F, r24

		//if(currentSelector!=6 && currentSelector!=15) {
		//	usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		//}

		switch(currentSelector) {
     690:	80 91 5c 04 	lds	r24, 0x045C
     694:	87 30       	cpi	r24, 0x07	; 7
     696:	09 f0       	breq	.+2      	; 0x69a <main+0x4be>
     698:	16 ce       	rjmp	.-980    	; 0x2c6 <main+0xea>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
     69a:	80 91 60 04 	lds	r24, 0x0460
     69e:	82 30       	cpi	r24, 0x02	; 2
     6a0:	11 f4       	brne	.+4      	; 0x6a6 <main+0x4ca>
     6a2:	0c 94 8d 0b 	jmp	0x171a	; 0x171a <main+0x153e>
     6a6:	83 30       	cpi	r24, 0x03	; 3
     6a8:	08 f0       	brcs	.+2      	; 0x6ac <main+0x4d0>
     6aa:	44 c3       	rjmp	.+1672   	; 0xd34 <main+0xb58>
     6ac:	88 23       	and	r24, r24
     6ae:	09 f0       	breq	.+2      	; 0x6b2 <main+0x4d6>
     6b0:	3c c7       	rjmp	.+3704   	; 0x152a <main+0x134e>
						case 0:	// move around
							turnOffGreenLeds();
     6b2:	0e 94 6a 40 	call	0x80d4	; 0x80d4 <turnOffGreenLeds>
							GREEN_LED0_ON;
     6b6:	80 91 0b 01 	lds	r24, 0x010B
     6ba:	8e 7f       	andi	r24, 0xFE	; 254
     6bc:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED1_ON;
							lineFound = 0;
     6c0:	10 92 61 04 	sts	0x0461, r1
							enableObstacleAvoidance();
     6c4:	0e 94 46 3f 	call	0x7e8c	; 0x7e8c <enableObstacleAvoidance>
							setRightSpeed(20);
     6c8:	84 e1       	ldi	r24, 0x14	; 20
     6ca:	0e 94 63 2a 	call	0x54c6	; 0x54c6 <setRightSpeed>
							setLeftSpeed(20);
     6ce:	84 e1       	ldi	r24, 0x14	; 20
     6d0:	0e 94 46 2a 	call	0x548c	; 0x548c <setLeftSpeed>
							demoEndTime = getTime100MicroSec();
     6d4:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
     6d8:	9b 01       	movw	r18, r22
     6da:	ac 01       	movw	r20, r24
     6dc:	60 93 6c 04 	sts	0x046C, r22
     6e0:	70 93 6d 04 	sts	0x046D, r23
     6e4:	80 93 6e 04 	sts	0x046E, r24
     6e8:	90 93 6f 04 	sts	0x046F, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {
     6ec:	80 91 64 04 	lds	r24, 0x0464
     6f0:	90 91 65 04 	lds	r25, 0x0465
     6f4:	a0 91 66 04 	lds	r26, 0x0466
     6f8:	b0 91 67 04 	lds	r27, 0x0467
     6fc:	28 1b       	sub	r18, r24
     6fe:	39 0b       	sbc	r19, r25
     700:	4a 0b       	sbc	r20, r26
     702:	5b 0b       	sbc	r21, r27
     704:	23 33       	cpi	r18, 0x33	; 51
     706:	6f ee       	ldi	r22, 0xEF	; 239
     708:	36 07       	cpc	r19, r22
     70a:	62 e0       	ldi	r22, 0x02	; 2
     70c:	46 07       	cpc	r20, r22
     70e:	60 e0       	ldi	r22, 0x00	; 0
     710:	56 07       	cpc	r21, r22
     712:	08 f4       	brcc	.+2      	; 0x716 <main+0x53a>
     714:	bb ce       	rjmp	.-650    	; 0x48c <main+0x2b0>

								if(proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {
									outOfLine++;
									if(outOfLine > 250) {
										chargeContact = 0;
										demoState = 1;
     716:	20 92 60 04 	sts	0x0460, r2
										break;
     71a:	b8 ce       	rjmp	.-656    	; 0x48c <main+0x2b0>
			}
		}

		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
     71c:	0e 94 40 22 	call	0x4480	; 0x4480 <readBatteryLevel>
             		
			if(currentSelector==4 || currentSelector==5) {
     720:	80 91 5c 04 	lds	r24, 0x045C
     724:	98 2f       	mov	r25, r24
     726:	94 50       	subi	r25, 0x04	; 4
     728:	92 30       	cpi	r25, 0x02	; 2
     72a:	08 f4       	brcc	.+2      	; 0x72e <main+0x552>
     72c:	52 c1       	rjmp	.+676    	; 0x9d2 <main+0x7f6>
					}
				} else {	// do nothing => all 3 leds turned on

				}

			} else if(currentSelector==7) {
     72e:	87 30       	cpi	r24, 0x07	; 7
     730:	09 f4       	brne	.+2      	; 0x734 <main+0x558>
     732:	7a c1       	rjmp	.+756    	; 0xa28 <main+0x84c>

				}

				turnOffLedsTime = getTime100MicroSec();

			} else if(currentSelector==6) {
     734:	86 30       	cpi	r24, 0x06	; 6
     736:	09 f4       	brne	.+2      	; 0x73a <main+0x55e>
     738:	24 c1       	rjmp	.+584    	; 0x982 <main+0x7a6>
						rgbState = 0;
					}
				}
			}

			startTime = getTime100MicroSec();
     73a:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
     73e:	6b 01       	movw	r12, r22
     740:	7c 01       	movw	r14, r24
     742:	b3 cd       	rjmp	.-1178   	; 0x2aa <main+0xce>

		computeAngle();

		// turn off the rgb leds after one half second in the "charger demo"
		if(currentSelector==7) {
			if((getTime100MicroSec()-turnOffLedsTime) > PAUSE_500_MSEC) {
     744:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
     748:	29 81       	ldd	r18, Y+1	; 0x01
     74a:	3a 81       	ldd	r19, Y+2	; 0x02
     74c:	4b 81       	ldd	r20, Y+3	; 0x03
     74e:	5c 81       	ldd	r21, Y+4	; 0x04
     750:	62 1b       	sub	r22, r18
     752:	73 0b       	sbc	r23, r19
     754:	84 0b       	sbc	r24, r20
     756:	95 0b       	sbc	r25, r21
     758:	68 3c       	cpi	r22, 0xC8	; 200
     75a:	32 e1       	ldi	r19, 0x12	; 18
     75c:	73 07       	cpc	r23, r19
     75e:	30 e0       	ldi	r19, 0x00	; 0
     760:	83 07       	cpc	r24, r19
     762:	30 e0       	ldi	r19, 0x00	; 0
     764:	93 07       	cpc	r25, r19
     766:	08 f4       	brcc	.+2      	; 0x76a <main+0x58e>
     768:	91 cd       	rjmp	.-1246   	; 0x28c <main+0xb0>
				pwm_red = 255;
     76a:	10 93 0c 02 	sts	0x020C, r17
				pwm_green = 255;
     76e:	10 93 0d 02 	sts	0x020D, r17
				pwm_blue = 255;			
     772:	10 93 0e 02 	sts	0x020E, r17
     776:	8a cd       	rjmp	.-1260   	; 0x28c <main+0xb0>

		//if(currentSelector!=6 && currentSelector!=15) {
		//	usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		//}

		switch(currentSelector) {
     778:	85 30       	cpi	r24, 0x05	; 5
     77a:	09 f4       	brne	.+2      	; 0x77e <main+0x5a2>
     77c:	91 c0       	rjmp	.+290    	; 0x8a0 <main+0x6c4>
     77e:	86 30       	cpi	r24, 0x06	; 6
     780:	08 f4       	brcc	.+2      	; 0x784 <main+0x5a8>
     782:	69 c0       	rjmp	.+210    	; 0x856 <main+0x67a>
					setLeftSpeed(25);
					setRightSpeed(25);
					break;

			case 6:	// robot testing
					switch(menuChoice) {
     784:	80 91 33 04 	lds	r24, 0x0433
     788:	81 30       	cpi	r24, 0x01	; 1
     78a:	09 f4       	brne	.+2      	; 0x78e <main+0x5b2>
     78c:	9b c3       	rjmp	.+1846   	; 0xec4 <main+0xce8>
     78e:	81 30       	cpi	r24, 0x01	; 1
     790:	08 f0       	brcs	.+2      	; 0x794 <main+0x5b8>
     792:	a2 c2       	rjmp	.+1348   	; 0xcd8 <main+0xafc>
						case 0:
							setRightSpeed(0);
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	0e 94 63 2a 	call	0x54c6	; 0x54c6 <setRightSpeed>
							setLeftSpeed(0);
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	0e 94 46 2a 	call	0x548c	; 0x548c <setLeftSpeed>
							turnOffGreenLeds();
     7a0:	0e 94 6a 40 	call	0x80d4	; 0x80d4 <turnOffGreenLeds>
							pwm_red=255;
     7a4:	10 93 0c 02 	sts	0x020C, r17
							pwm_green=255;
     7a8:	10 93 0d 02 	sts	0x020D, r17
							pwm_blue=255;
     7ac:	10 93 0e 02 	sts	0x020E, r17
							updateRedLed(pwm_red);
     7b0:	8f ef       	ldi	r24, 0xFF	; 255
     7b2:	0e 94 91 3f 	call	0x7f22	; 0x7f22 <updateRedLed>
							updateGreenLed(pwm_green);
     7b6:	80 91 0d 02 	lds	r24, 0x020D
     7ba:	0e 94 a5 3f 	call	0x7f4a	; 0x7f4a <updateGreenLed>
							updateBlueLed(pwm_blue);
     7be:	80 91 0e 02 	lds	r24, 0x020E
     7c2:	0e 94 b9 3f 	call	0x7f72	; 0x7f72 <updateBlueLed>
							LED_IR1_HIGH;
     7c6:	44 9a       	sbi	0x08, 4	; 8
							LED_IR2_HIGH;
     7c8:	45 9a       	sbi	0x08, 5	; 8
     7ca:	80 91 5c 04 	lds	r24, 0x045C
							break;
     7ce:	8e cd       	rjmp	.-1252   	; 0x2ec <main+0x110>

		//if(currentSelector!=6 && currentSelector!=15) {
		//	usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		//}

		switch(currentSelector) {
     7d0:	8d 30       	cpi	r24, 0x0D	; 13
     7d2:	09 f4       	brne	.+2      	; 0x7d6 <main+0x5fa>
     7d4:	92 c0       	rjmp	.+292    	; 0x8fa <main+0x71e>
     7d6:	8d 30       	cpi	r24, 0x0D	; 13
     7d8:	08 f4       	brcc	.+2      	; 0x7dc <main+0x600>
     7da:	79 c0       	rjmp	.+242    	; 0x8ce <main+0x6f2>
     7dc:	8e 30       	cpi	r24, 0x0E	; 14
     7de:	09 f0       	breq	.+2      	; 0x7e2 <main+0x606>
     7e0:	85 cd       	rjmp	.-1270   	; 0x2ec <main+0x110>
						break;
				}
				break;
			
			case 14: // Multirobots communication: continuously change current color and make it change also for other robots
				switch(demoState) {
     7e2:	80 91 60 04 	lds	r24, 0x0460
     7e6:	88 23       	and	r24, r24
     7e8:	09 f0       	breq	.+2      	; 0x7ec <main+0x610>
     7ea:	79 c1       	rjmp	.+754    	; 0xade <main+0x902>
					case 0:
						irCommInit();
     7ec:	0e 94 bc 47 	call	0x8f78	; 0x8f78 <irCommInit>
						demoState = 1;
     7f0:	20 92 60 04 	sts	0x0460, r2
						irCommRxByteExpected = 1;
     7f4:	20 92 1f 05 	sts	0x051F, r2
						irCommMsgCount = 0;
     7f8:	10 92 f4 04 	sts	0x04F4, r1
     7fc:	80 91 5c 04 	lds	r24, 0x045C
						break;
     800:	75 cd       	rjmp	.-1302   	; 0x2ec <main+0x110>
             		enableCliffAvoidance();
					break;
    
			case 3:	// both obstacle and cliff avoidance enabled (the robot does not move untill commands are
					// received from the radio or tv remote)
            		enableObstacleAvoidance();
     802:	0e 94 46 3f 	call	0x7e8c	; 0x7e8c <enableObstacleAvoidance>
					enableCliffAvoidance();
     806:	0e 94 4d 3f 	call	0x7e9a	; 0x7e9a <enableCliffAvoidance>
     80a:	80 91 5c 04 	lds	r24, 0x045C
					break;
     80e:	6e cd       	rjmp	.-1316   	; 0x2ec <main+0x110>
					updateBlueLed(pwm_blue);

					break;
  
			case 8:	// motors calibration
					irEnabled = 1;
     810:	20 92 12 02 	sts	0x0212, r2
					if(calibrateOdomFlag==1) {
     814:	80 91 76 05 	lds	r24, 0x0576
     818:	81 30       	cpi	r24, 0x01	; 1
     81a:	09 f0       	breq	.+2      	; 0x81e <main+0x642>
     81c:	48 ce       	rjmp	.-880    	; 0x4ae <main+0x2d2>
						handleCalibration();
     81e:	0e 94 67 2b 	call	0x56ce	; 0x56ce <handleCalibration>
     822:	80 91 5c 04 	lds	r24, 0x045C
     826:	62 cd       	rjmp	.-1340   	; 0x2ec <main+0x110>
					break;

			case 9:	// write default calibration values; wait 2 seconds before start writing the calibration values
					// in eeprom in order to avoid rewriting the data involuntarily when moving the selector and passing 
					// through selector position 9
					switch(demoState) {
     828:	80 91 60 04 	lds	r24, 0x0460
     82c:	81 30       	cpi	r24, 0x01	; 1
     82e:	09 f4       	brne	.+2      	; 0x832 <main+0x656>
     830:	b7 c5       	rjmp	.+2926   	; 0x13a0 <main+0x11c4>
     832:	81 30       	cpi	r24, 0x01	; 1
     834:	08 f0       	brcs	.+2      	; 0x838 <main+0x65c>
     836:	6f c2       	rjmp	.+1246   	; 0xd16 <main+0xb3a>
						case 0:
							demoStartTime = getTime100MicroSec();
     838:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
     83c:	60 93 64 04 	sts	0x0464, r22
     840:	70 93 65 04 	sts	0x0465, r23
     844:	80 93 66 04 	sts	0x0466, r24
     848:	90 93 67 04 	sts	0x0467, r25
							demoState = 1;
     84c:	20 92 60 04 	sts	0x0460, r2
     850:	80 91 5c 04 	lds	r24, 0x045C
							break;
     854:	4b cd       	rjmp	.-1386   	; 0x2ec <main+0x110>
            		enableObstacleAvoidance();
					enableCliffAvoidance();
					break;
            
			case 4:	// random colors on RGB leds; small green leds turned on
					GREEN_LED0_ON;
     856:	80 91 0b 01 	lds	r24, 0x010B
     85a:	8e 7f       	andi	r24, 0xFE	; 254
     85c:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED1_ON;
     860:	80 91 0b 01 	lds	r24, 0x010B
     864:	8d 7f       	andi	r24, 0xFD	; 253
     866:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED2_ON;
     86a:	80 91 0b 01 	lds	r24, 0x010B
     86e:	8b 7f       	andi	r24, 0xFB	; 251
     870:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED3_ON;
     874:	a3 98       	cbi	0x14, 3	; 20
					GREEN_LED4_ON;
     876:	80 91 0b 01 	lds	r24, 0x010B
     87a:	8f 7e       	andi	r24, 0xEF	; 239
     87c:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED5_ON;
     880:	80 91 0b 01 	lds	r24, 0x010B
     884:	8f 7d       	andi	r24, 0xDF	; 223
     886:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED6_ON;
     88a:	80 91 0b 01 	lds	r24, 0x010B
     88e:	8f 7b       	andi	r24, 0xBF	; 191
     890:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED7_ON;
     894:	80 91 0b 01 	lds	r24, 0x010B
     898:	8f 77       	andi	r24, 0x7F	; 127
     89a:	80 93 0b 01 	sts	0x010B, r24
     89e:	f6 cd       	rjmp	.-1044   	; 0x48c <main+0x2b0>
					updateBlueLed(pwm_blue);
					break;
             
			case 5:	// random colors on RGB leds; obstacle avoidance enabled; robot start moving automatically
					// (motors speed setting)
					updateRedLed(pwm_red);
     8a0:	80 91 0c 02 	lds	r24, 0x020C
     8a4:	0e 94 91 3f 	call	0x7f22	; 0x7f22 <updateRedLed>
					updateGreenLed(pwm_green);
     8a8:	80 91 0d 02 	lds	r24, 0x020D
     8ac:	0e 94 a5 3f 	call	0x7f4a	; 0x7f4a <updateGreenLed>
					updateBlueLed(pwm_blue);
     8b0:	80 91 0e 02 	lds	r24, 0x020E
     8b4:	0e 94 b9 3f 	call	0x7f72	; 0x7f72 <updateBlueLed>
					enableObstacleAvoidance();
     8b8:	0e 94 46 3f 	call	0x7e8c	; 0x7e8c <enableObstacleAvoidance>
					setLeftSpeed(25);
     8bc:	89 e1       	ldi	r24, 0x19	; 25
     8be:	0e 94 46 2a 	call	0x548c	; 0x548c <setLeftSpeed>
					setRightSpeed(25);
     8c2:	89 e1       	ldi	r24, 0x19	; 25
     8c4:	0e 94 63 2a 	call	0x54c6	; 0x54c6 <setRightSpeed>
     8c8:	80 91 5c 04 	lds	r24, 0x045C
					break;
     8cc:	0f cd       	rjmp	.-1506   	; 0x2ec <main+0x110>
						break;
				}
				break;

			case 12:	// IR local communication: 2 or more robots pass information between them in sequence
				switch(demoState) {
     8ce:	80 91 60 04 	lds	r24, 0x0460
     8d2:	81 30       	cpi	r24, 0x01	; 1
     8d4:	09 f4       	brne	.+2      	; 0x8d8 <main+0x6fc>
     8d6:	f3 c5       	rjmp	.+3046   	; 0x14be <main+0x12e2>
     8d8:	81 30       	cpi	r24, 0x01	; 1
     8da:	08 f0       	brcs	.+2      	; 0x8de <main+0x702>
     8dc:	93 c2       	rjmp	.+1318   	; 0xe04 <main+0xc28>
					case 0:
						irCommInit();
     8de:	0e 94 bc 47 	call	0x8f78	; 0x8f78 <irCommInit>
						irCommRobotsNum = 4;	// total number of robots that exchange data
     8e2:	a4 e0       	ldi	r26, 0x04	; 4
     8e4:	a0 93 f2 04 	sts	0x04F2, r26
						irCommRobotId = 3;		// choose the id of the robot (a different id for each robot), from 0 to 254 (255 is reserved)
     8e8:	b3 e0       	ldi	r27, 0x03	; 3
     8ea:	b0 93 f1 04 	sts	0x04F1, r27
							updateBlueLed(255);
							updateRedLed(255);
							updateGreenLed(128);
							demoState = 1;
						} else {
							demoState = 2;
     8ee:	e2 e0       	ldi	r30, 0x02	; 2
     8f0:	e0 93 60 04 	sts	0x0460, r30
     8f4:	80 91 5c 04 	lds	r24, 0x045C
     8f8:	f9 cc       	rjmp	.-1550   	; 0x2ec <main+0x110>

				}
				break;

			case 13: // IR local communication: listen and transmit continuously
				switch(demoState) {
     8fa:	80 91 60 04 	lds	r24, 0x0460
     8fe:	81 30       	cpi	r24, 0x01	; 1
     900:	09 f4       	brne	.+2      	; 0x904 <main+0x728>
     902:	d6 c2       	rjmp	.+1452   	; 0xeb0 <main+0xcd4>
     904:	81 30       	cpi	r24, 0x01	; 1
     906:	08 f0       	brcs	.+2      	; 0x90a <main+0x72e>
     908:	58 c2       	rjmp	.+1200   	; 0xdba <main+0xbde>
					case 0:
						irCommInit();
     90a:	0e 94 bc 47 	call	0x8f78	; 0x8f78 <irCommInit>
						enableObstacleAvoidance();
     90e:	0e 94 46 3f 	call	0x7e8c	; 0x7e8c <enableObstacleAvoidance>
						setLeftSpeed(10);
     912:	8a e0       	ldi	r24, 0x0A	; 10
     914:	0e 94 46 2a 	call	0x548c	; 0x548c <setLeftSpeed>
						setRightSpeed(10);
     918:	8a e0       	ldi	r24, 0x0A	; 10
     91a:	0e 94 63 2a 	call	0x54c6	; 0x54c6 <setRightSpeed>
						demoState = 1;
     91e:	20 92 60 04 	sts	0x0460, r2
     922:	80 91 5c 04 	lds	r24, 0x045C
						i = 0;
     926:	1e 82       	std	Y+6, r1	; 0x06
     928:	1d 82       	std	Y+5, r1	; 0x05
						break;
     92a:	e0 cc       	rjmp	.-1600   	; 0x2ec <main+0x110>

					break;

			case 11: 	// sync-react demo using the IR local communication (2 robots only): the robots move around with obstacle avoidance
						// enabled and when they detect each other they try to align towards the same direction rotating in place
				switch(demoState) {
     92c:	80 91 60 04 	lds	r24, 0x0460
     930:	82 30       	cpi	r24, 0x02	; 2
     932:	09 f4       	brne	.+2      	; 0x936 <main+0x75a>
     934:	69 c6       	rjmp	.+3282   	; 0x1608 <main+0x142c>
     936:	83 30       	cpi	r24, 0x03	; 3
     938:	08 f0       	brcs	.+2      	; 0x93c <main+0x760>
     93a:	ee c0       	rjmp	.+476    	; 0xb18 <main+0x93c>
     93c:	88 23       	and	r24, r24
     93e:	09 f4       	brne	.+2      	; 0x942 <main+0x766>
     940:	31 c6       	rjmp	.+3170   	; 0x15a4 <main+0x13c8>
     942:	81 30       	cpi	r24, 0x01	; 1
     944:	09 f0       	breq	.+2      	; 0x948 <main+0x76c>
     946:	b3 cd       	rjmp	.-1178   	; 0x4ae <main+0x2d2>
						irCommInit();
						demoState = 1;
						break;

					case 1:						
						enableObstacleAvoidance();
     948:	0e 94 46 3f 	call	0x7e8c	; 0x7e8c <enableObstacleAvoidance>
						setLeftSpeed(10);
     94c:	8a e0       	ldi	r24, 0x0A	; 10
     94e:	0e 94 46 2a 	call	0x548c	; 0x548c <setLeftSpeed>
						setRightSpeed(10);
     952:	8a e0       	ldi	r24, 0x0A	; 10
     954:	0e 94 63 2a 	call	0x54c6	; 0x54c6 <setRightSpeed>
						demoState = 2;
     958:	f2 e0       	ldi	r31, 0x02	; 2
     95a:	f0 93 60 04 	sts	0x0460, r31
						demoStartTime = getTime100MicroSec();
     95e:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
     962:	60 93 64 04 	sts	0x0464, r22
     966:	70 93 65 04 	sts	0x0465, r23
     96a:	80 93 66 04 	sts	0x0466, r24
     96e:	90 93 67 04 	sts	0x0467, r25
     972:	80 91 5c 04 	lds	r24, 0x045C
						break;
     976:	ba cc       	rjmp	.-1676   	; 0x2ec <main+0x110>
					handleMotorsWithNoController();
					break;
             
			case 1:	// obstacle avoidance enabled (the robot does not move untill commands are 
					// received from the radio or tv remote)
             		enableObstacleAvoidance();
     978:	0e 94 46 3f 	call	0x7e8c	; 0x7e8c <enableObstacleAvoidance>
     97c:	80 91 5c 04 	lds	r24, 0x045C
					break;
     980:	b5 cc       	rjmp	.-1686   	; 0x2ec <main+0x110>
				}

				turnOffLedsTime = getTime100MicroSec();

			} else if(currentSelector==6) {
				if(menuChoice==1 && rfFlags<=1) {
     982:	80 91 33 04 	lds	r24, 0x0433
     986:	81 30       	cpi	r24, 0x01	; 1
     988:	09 f0       	breq	.+2      	; 0x98c <main+0x7b0>
     98a:	d7 ce       	rjmp	.-594    	; 0x73a <main+0x55e>
     98c:	90 91 27 03 	lds	r25, 0x0327
     990:	92 30       	cpi	r25, 0x02	; 2
     992:	08 f0       	brcs	.+2      	; 0x996 <main+0x7ba>
     994:	d2 ce       	rjmp	.-604    	; 0x73a <main+0x55e>
					if(rgbState == 0) {
     996:	90 91 2c 03 	lds	r25, 0x032C
     99a:	99 23       	and	r25, r25
     99c:	11 f0       	breq	.+4      	; 0x9a2 <main+0x7c6>
     99e:	0c 94 9d 0d 	jmp	0x1b3a	; 0x1b3a <main+0x195e>
						pwm_red = 254;
     9a2:	5e ef       	ldi	r21, 0xFE	; 254
     9a4:	95 2e       	mov	r9, r21
     9a6:	90 92 0c 02 	sts	0x020C, r9
						pwm_green = 255;
     9aa:	10 93 0d 02 	sts	0x020D, r17
						pwm_blue = 255;
     9ae:	10 93 0e 02 	sts	0x020E, r17
						rgbState = 1;
     9b2:	80 93 2c 03 	sts	0x032C, r24
     9b6:	c1 ce       	rjmp	.-638    	; 0x73a <main+0x55e>
						if(pwm_intermediate_left_desired < pwm_left_desired) {
							pwm_intermediate_left_desired = pwm_left_desired;
						}					
					}
				} else {
					pwm_intermediate_right_desired = pwm_right_desired;
     9b8:	80 91 09 03 	lds	r24, 0x0309
     9bc:	90 91 0a 03 	lds	r25, 0x030A
     9c0:	90 93 0e 03 	sts	0x030E, r25
     9c4:	80 93 0d 03 	sts	0x030D, r24
					pwm_intermediate_left_desired = pwm_left_desired;
     9c8:	80 91 0b 03 	lds	r24, 0x030B
     9cc:	90 91 0c 03 	lds	r25, 0x030C
     9d0:	5b ce       	rjmp	.-842    	; 0x688 <main+0x4ac>
		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
             		
			if(currentSelector==4 || currentSelector==5) {
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption
     9d2:	0e 94 f5 57 	call	0xafea	; 0xafea <rand>
     9d6:	6e e1       	ldi	r22, 0x1E	; 30
     9d8:	70 e0       	ldi	r23, 0x00	; 0
     9da:	0e 94 57 57 	call	0xaeae	; 0xaeae <__divmodhi4>
     9de:	a8 0e       	add	r10, r24
     9e0:	b9 1e       	adc	r11, r25
     9e2:	5f e7       	ldi	r21, 0x7F	; 127
     9e4:	a5 22       	and	r10, r21
     9e6:	bb 24       	eor	r11, r11

				switch(rgbState) {
     9e8:	80 91 2c 03 	lds	r24, 0x032C
     9ec:	81 30       	cpi	r24, 0x01	; 1
     9ee:	09 f4       	brne	.+2      	; 0x9f2 <main+0x816>
     9f0:	36 c6       	rjmp	.+3180   	; 0x165e <main+0x1482>
     9f2:	81 30       	cpi	r24, 0x01	; 1
     9f4:	08 f0       	brcs	.+2      	; 0x9f8 <main+0x81c>
     9f6:	23 c5       	rjmp	.+2630   	; 0x143e <main+0x1262>
					case 0:
						pwm_red = 255 - currRand;	
     9f8:	8a 2d       	mov	r24, r10
     9fa:	80 95       	com	r24
     9fc:	80 93 0c 02 	sts	0x020C, r24
						rgbState = 1;
     a00:	20 92 2c 03 	sts	0x032C, r2
						pwm_blue = 255 - currRand;
						rgbState = 0;
						break;
				}
				
				if(currRand<32) {
     a04:	80 e2       	ldi	r24, 0x20	; 32
     a06:	a8 16       	cp	r10, r24
     a08:	b1 04       	cpc	r11, r1
     a0a:	08 f0       	brcs	.+2      	; 0xa0e <main+0x832>
     a0c:	38 c2       	rjmp	.+1136   	; 0xe7e <main+0xca2>
					if(pwm_green!=255 && pwm_blue!=255) {	// do not turn on all leds
     a0e:	80 91 0d 02 	lds	r24, 0x020D
     a12:	8f 3f       	cpi	r24, 0xFF	; 255
     a14:	09 f4       	brne	.+2      	; 0xa18 <main+0x83c>
     a16:	91 ce       	rjmp	.-734    	; 0x73a <main+0x55e>
     a18:	80 91 0e 02 	lds	r24, 0x020E
     a1c:	8f 3f       	cpi	r24, 0xFF	; 255
     a1e:	09 f4       	brne	.+2      	; 0xa22 <main+0x846>
     a20:	8c ce       	rjmp	.-744    	; 0x73a <main+0x55e>
						pwm_red = 255;
     a22:	10 93 0c 02 	sts	0x020C, r17
     a26:	89 ce       	rjmp	.-750    	; 0x73a <main+0x55e>

				}

			} else if(currentSelector==7) {

				srand(TCNT3);
     a28:	80 91 94 00 	lds	r24, 0x0094
     a2c:	90 91 95 00 	lds	r25, 0x0095
     a30:	0e 94 fa 57 	call	0xaff4	; 0xaff4 <srand>
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption
     a34:	0e 94 f5 57 	call	0xafea	; 0xafea <rand>
     a38:	6e e1       	ldi	r22, 0x1E	; 30
     a3a:	70 e0       	ldi	r23, 0x00	; 0
     a3c:	0e 94 57 57 	call	0xaeae	; 0xaeae <__divmodhi4>
     a40:	4c 01       	movw	r8, r24
     a42:	8a 0c       	add	r8, r10
     a44:	9b 1c       	adc	r9, r11
     a46:	bf e7       	ldi	r27, 0x7F	; 127
     a48:	8b 22       	and	r8, r27
     a4a:	99 24       	eor	r9, r9

				pwm_red = 255 - currRand;
     a4c:	88 2d       	mov	r24, r8
     a4e:	80 95       	com	r24
     a50:	80 93 0c 02 	sts	0x020C, r24
				
				srand(TCNT3);
     a54:	80 91 94 00 	lds	r24, 0x0094
     a58:	90 91 95 00 	lds	r25, 0x0095
     a5c:	0e 94 fa 57 	call	0xaff4	; 0xaff4 <srand>
				currRand = (currRand + rand()%30) % 128;	
     a60:	0e 94 f5 57 	call	0xafea	; 0xafea <rand>
     a64:	6e e1       	ldi	r22, 0x1E	; 30
     a66:	70 e0       	ldi	r23, 0x00	; 0
     a68:	0e 94 57 57 	call	0xaeae	; 0xaeae <__divmodhi4>
     a6c:	6c 01       	movw	r12, r24
     a6e:	c8 0c       	add	r12, r8
     a70:	d9 1c       	adc	r13, r9
     a72:	ef e7       	ldi	r30, 0x7F	; 127
     a74:	ce 22       	and	r12, r30
     a76:	dd 24       	eor	r13, r13
				pwm_green = 255 - currRand;
     a78:	8c 2d       	mov	r24, r12
     a7a:	80 95       	com	r24
     a7c:	80 93 0d 02 	sts	0x020D, r24

				srand(TCNT3);
     a80:	80 91 94 00 	lds	r24, 0x0094
     a84:	90 91 95 00 	lds	r25, 0x0095
     a88:	0e 94 fa 57 	call	0xaff4	; 0xaff4 <srand>
				currRand = (currRand + rand()%30) % 128;
     a8c:	0e 94 f5 57 	call	0xafea	; 0xafea <rand>
     a90:	6e e1       	ldi	r22, 0x1E	; 30
     a92:	70 e0       	ldi	r23, 0x00	; 0
     a94:	0e 94 57 57 	call	0xaeae	; 0xaeae <__divmodhi4>
     a98:	5c 01       	movw	r10, r24
     a9a:	ac 0c       	add	r10, r12
     a9c:	bd 1c       	adc	r11, r13
     a9e:	ff e7       	ldi	r31, 0x7F	; 127
     aa0:	af 22       	and	r10, r31
     aa2:	bb 24       	eor	r11, r11
				pwm_blue = 255 - currRand;
     aa4:	8a 2d       	mov	r24, r10
     aa6:	80 95       	com	r24
     aa8:	80 93 0e 02 	sts	0x020E, r24

			
				srand(TCNT3);
     aac:	80 91 94 00 	lds	r24, 0x0094
     ab0:	90 91 95 00 	lds	r25, 0x0095
     ab4:	0e 94 fa 57 	call	0xaff4	; 0xaff4 <srand>
				currRand2 = rand()%128;
     ab8:	0e 94 f5 57 	call	0xafea	; 0xafea <rand>
     abc:	60 e8       	ldi	r22, 0x80	; 128
     abe:	70 e0       	ldi	r23, 0x00	; 0
     ac0:	0e 94 57 57 	call	0xaeae	; 0xaeae <__divmodhi4>
				if(currRand2<32) {
     ac4:	80 32       	cpi	r24, 0x20	; 32
     ac6:	91 05       	cpc	r25, r1
     ac8:	08 f0       	brcs	.+2      	; 0xacc <main+0x8f0>
     aca:	eb c1       	rjmp	.+982    	; 0xea2 <main+0xcc6>
					pwm_red = 255;
     acc:	10 93 0c 02 	sts	0x020C, r17
					pwm_blue = 255;
				} else {	// do nothing => all 3 leds turned on

				}

				turnOffLedsTime = getTime100MicroSec();
     ad0:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
     ad4:	69 83       	std	Y+1, r22	; 0x01
     ad6:	7a 83       	std	Y+2, r23	; 0x02
     ad8:	8b 83       	std	Y+3, r24	; 0x03
     ada:	9c 83       	std	Y+4, r25	; 0x04
     adc:	2e ce       	rjmp	.-932    	; 0x73a <main+0x55e>
						break;
				}
				break;
			
			case 14: // Multirobots communication: continuously change current color and make it change also for other robots
				switch(demoState) {
     ade:	81 30       	cpi	r24, 0x01	; 1
     ae0:	09 f0       	breq	.+2      	; 0xae4 <main+0x908>
     ae2:	e5 cc       	rjmp	.-1590   	; 0x4ae <main+0x2d2>
						irCommRxByteExpected = 1;
						irCommMsgCount = 0;
						break;

					case 1:	
						irCommTasks();
     ae4:	0e 94 a3 48 	call	0x9146	; 0x9146 <irCommTasks>
						if(irCommDataSent()==1) {	
     ae8:	0e 94 f4 53 	call	0xa7e8	; 0xa7e8 <irCommDataSent>
     aec:	81 30       	cpi	r24, 0x01	; 1
     aee:	11 f4       	brne	.+4      	; 0xaf4 <main+0x918>
     af0:	0c 94 7f 0d 	jmp	0x1afe	; 0x1afe <main+0x1922>
							irCommSendData(irCommRxByteExpected);					
						}
						if(irCommDataAvailable()==1) {							
     af4:	0e 94 fc 53 	call	0xa7f8	; 0xa7f8 <irCommDataAvailable>
     af8:	81 30       	cpi	r24, 0x01	; 1
     afa:	09 f4       	brne	.+2      	; 0xafe <main+0x922>
     afc:	ce c7       	rjmp	.+3996   	; 0x1a9a <main+0x18be>
									updateBlueLed(235);
									break;
								case 7: 
									updateRedLed(235);
									updateGreenLed(235);
									updateBlueLed(235);
     afe:	80 91 5c 04 	lds	r24, 0x045C
									break;
     b02:	f4 cb       	rjmp	.-2072   	; 0x2ec <main+0x110>
					}
	
					if(pwm_left_desired == 0) {
						pwm_intermediate_left_desired = 0;
					} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
						pwm_intermediate_left_desired = 0;
     b04:	10 92 10 03 	sts	0x0310, r1
     b08:	10 92 0f 03 	sts	0x030F, r1
     b0c:	d7 cb       	rjmp	.-2130   	; 0x2bc <main+0xe0>

				if(softAccEnabled) {
					if(pwm_right_desired == 0) {
						pwm_intermediate_right_desired = 0;
					} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
						pwm_intermediate_right_desired = 0;
     b0e:	10 92 0e 03 	sts	0x030E, r1
     b12:	10 92 0d 03 	sts	0x030D, r1
     b16:	93 cd       	rjmp	.-1242   	; 0x63e <main+0x462>

					break;

			case 11: 	// sync-react demo using the IR local communication (2 robots only): the robots move around with obstacle avoidance
						// enabled and when they detect each other they try to align towards the same direction rotating in place
				switch(demoState) {
     b18:	83 30       	cpi	r24, 0x03	; 3
     b1a:	09 f4       	brne	.+2      	; 0xb1e <main+0x942>
     b1c:	4b c5       	rjmp	.+2710   	; 0x15b4 <main+0x13d8>
     b1e:	84 30       	cpi	r24, 0x04	; 4
     b20:	09 f0       	breq	.+2      	; 0xb24 <main+0x948>
     b22:	c5 cc       	rjmp	.-1654   	; 0x4ae <main+0x2d2>
							demoStartTime = getTime100MicroSec();
						}
						break;

					case 4:	// rotate left
						irCommTasks();
     b24:	0e 94 a3 48 	call	0x9146	; 0x9146 <irCommTasks>
						if(theta >= targetAngle) {
     b28:	60 91 7f 04 	lds	r22, 0x047F
     b2c:	70 91 80 04 	lds	r23, 0x0480
     b30:	80 91 81 04 	lds	r24, 0x0481
     b34:	90 91 82 04 	lds	r25, 0x0482
     b38:	2f 81       	ldd	r18, Y+7	; 0x07
     b3a:	38 85       	ldd	r19, Y+8	; 0x08
     b3c:	49 85       	ldd	r20, Y+9	; 0x09
     b3e:	5a 85       	ldd	r21, Y+10	; 0x0a
     b40:	0e 94 8e 56 	call	0xad1c	; 0xad1c <__gesf2>
     b44:	87 fd       	sbrc	r24, 7
     b46:	db cf       	rjmp	.-74     	; 0xafe <main+0x922>
							setLeftSpeed(0);
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	0e 94 46 2a 	call	0x548c	; 0x548c <setLeftSpeed>
							setRightSpeed(0);
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	0e 94 63 2a 	call	0x54c6	; 0x54c6 <setRightSpeed>
							demoState = 2;
     b54:	92 e0       	ldi	r25, 0x02	; 2
     b56:	90 93 60 04 	sts	0x0460, r25
							demoStartTime = getTime100MicroSec();
     b5a:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
     b5e:	60 93 64 04 	sts	0x0464, r22
     b62:	70 93 65 04 	sts	0x0465, r23
     b66:	80 93 66 04 	sts	0x0466, r24
     b6a:	90 93 67 04 	sts	0x0467, r25
     b6e:	80 91 5c 04 	lds	r24, 0x045C
     b72:	bc cb       	rjmp	.-2184   	; 0x2ec <main+0x110>
								demoState = 1;							
							}
							break;
					}	
					
					switch(rgbLedState) {
     b74:	82 30       	cpi	r24, 0x02	; 2
     b76:	19 f6       	brne	.-122    	; 0xafe <main+0x922>
							updateBlueLed(pwm_blue);
							rgbLedState = 2;
							break;

						case 2:
							if((getTime100MicroSec()-demoStartTime2) >= (PAUSE_500_MSEC)) {
     b78:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
     b7c:	9b 01       	movw	r18, r22
     b7e:	ac 01       	movw	r20, r24
     b80:	80 91 68 04 	lds	r24, 0x0468
     b84:	90 91 69 04 	lds	r25, 0x0469
     b88:	a0 91 6a 04 	lds	r26, 0x046A
     b8c:	b0 91 6b 04 	lds	r27, 0x046B
     b90:	28 1b       	sub	r18, r24
     b92:	39 0b       	sbc	r19, r25
     b94:	4a 0b       	sbc	r20, r26
     b96:	5b 0b       	sbc	r21, r27
     b98:	27 3c       	cpi	r18, 0xC7	; 199
     b9a:	e2 e1       	ldi	r30, 0x12	; 18
     b9c:	3e 07       	cpc	r19, r30
     b9e:	e0 e0       	ldi	r30, 0x00	; 0
     ba0:	4e 07       	cpc	r20, r30
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	5e 07       	cpc	r21, r30
     ba6:	08 f4       	brcc	.+2      	; 0xbaa <main+0x9ce>
     ba8:	aa cf       	rjmp	.-172    	; 0xafe <main+0x922>
								rgbLedState = 0;
     baa:	10 92 7b 04 	sts	0x047B, r1
								demoStartTime2 = getTime100MicroSec();
     bae:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
     bb2:	60 93 68 04 	sts	0x0468, r22
     bb6:	70 93 69 04 	sts	0x0469, r23
     bba:	80 93 6a 04 	sts	0x046A, r24
     bbe:	90 93 6b 04 	sts	0x046B, r25
								demoEndTime = getTime100MicroSec();
     bc2:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
     bc6:	60 93 6c 04 	sts	0x046C, r22
     bca:	70 93 6d 04 	sts	0x046D, r23
     bce:	80 93 6e 04 	sts	0x046E, r24
     bd2:	90 93 6f 04 	sts	0x046F, r25
								greenLedState = 0;
     bd6:	10 92 7a 04 	sts	0x047A, r1
								setGreenLed(greenLedState, 1);
     bda:	80 e0       	ldi	r24, 0x00	; 0
     bdc:	61 e0       	ldi	r22, 0x01	; 1
     bde:	0e 94 cd 3f 	call	0x7f9a	; 0x7f9a <setGreenLed>
     be2:	80 91 5c 04 	lds	r24, 0x045C
     be6:	82 cb       	rjmp	.-2300   	; 0x2ec <main+0x110>
							break;
					}
					break;

			case 10:// obstacle avoidance with random colors; 4 seconds motion and 10 seconds pause					
					switch(demoState) {
     be8:	82 30       	cpi	r24, 0x02	; 2
     bea:	09 f0       	breq	.+2      	; 0xbee <main+0xa12>
     bec:	0d cc       	rjmp	.-2022   	; 0x408 <main+0x22c>
								demoState = 2;							
							}
							break;

						case 2: // pause							
							if((getTime100MicroSec()-demoStartTime) >= (PAUSE_10_SEC)) {
     bee:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
     bf2:	9b 01       	movw	r18, r22
     bf4:	ac 01       	movw	r20, r24
     bf6:	80 91 64 04 	lds	r24, 0x0464
     bfa:	90 91 65 04 	lds	r25, 0x0465
     bfe:	a0 91 66 04 	lds	r26, 0x0466
     c02:	b0 91 67 04 	lds	r27, 0x0467
     c06:	28 1b       	sub	r18, r24
     c08:	39 0b       	sbc	r19, r25
     c0a:	4a 0b       	sbc	r20, r26
     c0c:	5b 0b       	sbc	r21, r27
     c0e:	2a 39       	cpi	r18, 0x9A	; 154
     c10:	e7 e7       	ldi	r30, 0x77	; 119
     c12:	3e 07       	cpc	r19, r30
     c14:	e1 e0       	ldi	r30, 0x01	; 1
     c16:	4e 07       	cpc	r20, r30
     c18:	e0 e0       	ldi	r30, 0x00	; 0
     c1a:	5e 07       	cpc	r21, r30
     c1c:	08 f4       	brcc	.+2      	; 0xc20 <main+0xa44>
     c1e:	f4 cb       	rjmp	.-2072   	; 0x408 <main+0x22c>
								setRightSpeed(20);
     c20:	84 e1       	ldi	r24, 0x14	; 20
     c22:	0e 94 63 2a 	call	0x54c6	; 0x54c6 <setRightSpeed>
								setLeftSpeed(20);								
     c26:	84 e1       	ldi	r24, 0x14	; 20
     c28:	0e 94 46 2a 	call	0x548c	; 0x548c <setLeftSpeed>
								demoStartTime = getTime100MicroSec();								
     c2c:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
     c30:	60 93 64 04 	sts	0x0464, r22
     c34:	70 93 65 04 	sts	0x0465, r23
     c38:	80 93 66 04 	sts	0x0466, r24
     c3c:	90 93 67 04 	sts	0x0467, r25
								demoState = 1;							
     c40:	20 92 60 04 	sts	0x0460, r2
							}
							break;
					}	
					
					switch(rgbLedState) {
     c44:	80 91 7b 04 	lds	r24, 0x047B
     c48:	81 30       	cpi	r24, 0x01	; 1
     c4a:	09 f0       	breq	.+2      	; 0xc4e <main+0xa72>
     c4c:	e2 cb       	rjmp	.-2108   	; 0x412 <main+0x236>
							updateGreenLed(pwm_green);
							updateBlueLed(pwm_blue);
							break;

						case 1:		
							turnOffGreenLeds();					
     c4e:	0e 94 6a 40 	call	0x80d4	; 0x80d4 <turnOffGreenLeds>
							currRand = rand()% 128;	// 0 to 255 is the maximum, we use 0 to 127 to get brighter colors
     c52:	0e 94 f5 57 	call	0xafea	; 0xafea <rand>
     c56:	60 e8       	ldi	r22, 0x80	; 128
     c58:	70 e0       	ldi	r23, 0x00	; 0
     c5a:	0e 94 57 57 	call	0xaeae	; 0xaeae <__divmodhi4>
							if(currRand > 95) {
     c5e:	80 36       	cpi	r24, 0x60	; 96
     c60:	91 05       	cpc	r25, r1
     c62:	08 f4       	brcc	.+2      	; 0xc66 <main+0xa8a>
     c64:	51 c6       	rjmp	.+3234   	; 0x1908 <main+0x172c>
								pwm_red = 255;
     c66:	10 93 0c 02 	sts	0x020C, r17
							} else {
								pwm_red = currRand;
							}

							currRand = rand()% 128;
     c6a:	0e 94 f5 57 	call	0xafea	; 0xafea <rand>
     c6e:	60 e8       	ldi	r22, 0x80	; 128
     c70:	70 e0       	ldi	r23, 0x00	; 0
     c72:	0e 94 57 57 	call	0xaeae	; 0xaeae <__divmodhi4>
							if(currRand > 95) {
     c76:	80 36       	cpi	r24, 0x60	; 96
     c78:	91 05       	cpc	r25, r1
     c7a:	08 f4       	brcc	.+2      	; 0xc7e <main+0xaa2>
     c7c:	42 c6       	rjmp	.+3204   	; 0x1902 <main+0x1726>
								pwm_green = 255;
     c7e:	10 93 0d 02 	sts	0x020D, r17
							} else {
								pwm_green = currRand;
							}

							currRand = rand()% 128;
     c82:	0e 94 f5 57 	call	0xafea	; 0xafea <rand>
     c86:	60 e8       	ldi	r22, 0x80	; 128
     c88:	70 e0       	ldi	r23, 0x00	; 0
     c8a:	0e 94 57 57 	call	0xaeae	; 0xaeae <__divmodhi4>
							if(currRand > 95) {
     c8e:	80 36       	cpi	r24, 0x60	; 96
     c90:	91 05       	cpc	r25, r1
     c92:	08 f4       	brcc	.+2      	; 0xc96 <main+0xaba>
     c94:	33 c6       	rjmp	.+3174   	; 0x18fc <main+0x1720>
								pwm_blue = 255;
     c96:	10 93 0e 02 	sts	0x020E, r17
							} else {
								pwm_blue = currRand;
							}

							currRand = rand()% 200;
     c9a:	0e 94 f5 57 	call	0xafea	; 0xafea <rand>
     c9e:	68 ec       	ldi	r22, 0xC8	; 200
     ca0:	70 e0       	ldi	r23, 0x00	; 0
     ca2:	0e 94 57 57 	call	0xaeae	; 0xaeae <__divmodhi4>
     ca6:	5c 01       	movw	r10, r24
							if(currRand<50) {
     ca8:	82 e3       	ldi	r24, 0x32	; 50
     caa:	a8 16       	cp	r10, r24
     cac:	b1 04       	cpc	r11, r1
     cae:	08 f0       	brcs	.+2      	; 0xcb2 <main+0xad6>
     cb0:	1b c6       	rjmp	.+3126   	; 0x18e8 <main+0x170c>
								pwm_red = 255;
     cb2:	10 93 0c 02 	sts	0x020C, r17
     cb6:	8f ef       	ldi	r24, 0xFF	; 255
							} else if(currRand<100) {
								pwm_green = 255;
							} else if (currRand<150) {	
								pwm_blue = 255;
							}
							updateRedLed(pwm_red);
     cb8:	0e 94 91 3f 	call	0x7f22	; 0x7f22 <updateRedLed>
							updateGreenLed(pwm_green);
     cbc:	80 91 0d 02 	lds	r24, 0x020D
     cc0:	0e 94 a5 3f 	call	0x7f4a	; 0x7f4a <updateGreenLed>
							updateBlueLed(pwm_blue);
     cc4:	80 91 0e 02 	lds	r24, 0x020E
     cc8:	0e 94 b9 3f 	call	0x7f72	; 0x7f72 <updateBlueLed>
							rgbLedState = 2;
     ccc:	b2 e0       	ldi	r27, 0x02	; 2
     cce:	b0 93 7b 04 	sts	0x047B, r27
     cd2:	80 91 5c 04 	lds	r24, 0x045C
							break;
     cd6:	0a cb       	rjmp	.-2540   	; 0x2ec <main+0x110>
					setLeftSpeed(25);
					setRightSpeed(25);
					break;

			case 6:	// robot testing
					switch(menuChoice) {
     cd8:	82 30       	cpi	r24, 0x02	; 2
     cda:	09 f0       	breq	.+2      	; 0xcde <main+0xb02>
     cdc:	e8 cb       	rjmp	.-2096   	; 0x4ae <main+0x2d2>
							}

							break;

						case 2:	// address writing in eeprom
							if(addressReceived) {
     cde:	80 91 34 04 	lds	r24, 0x0434
     ce2:	88 23       	and	r24, r24
     ce4:	09 f4       	brne	.+2      	; 0xce8 <main+0xb0c>
     ce6:	e3 cb       	rjmp	.-2106   	; 0x4ae <main+0x2d2>
								turnOnGreenLeds();
     ce8:	0e 94 83 40 	call	0x8106	; 0x8106 <turnOnGreenLeds>
								eeprom_write_word((uint16_t*)4094, rfAddress);
     cec:	60 91 25 03 	lds	r22, 0x0325
     cf0:	70 91 26 03 	lds	r23, 0x0326
     cf4:	8e ef       	ldi	r24, 0xFE	; 254
     cf6:	9f e0       	ldi	r25, 0x0F	; 15
     cf8:	0e 94 60 58 	call	0xb0c0	; 0xb0c0 <__eewr_word_m2560>
								turnOffGreenLeds();
     cfc:	0e 94 6a 40 	call	0x80d4	; 0x80d4 <turnOffGreenLeds>
								usart0Transmit(0xAA, 1);	// successfully written
     d00:	8a ea       	ldi	r24, 0xAA	; 170
     d02:	61 e0       	ldi	r22, 0x01	; 1
     d04:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
								addressReceived = 0;
     d08:	10 92 34 04 	sts	0x0434, r1
								menuChoice = 0;
     d0c:	10 92 33 04 	sts	0x0433, r1
     d10:	80 91 5c 04 	lds	r24, 0x045C
     d14:	eb ca       	rjmp	.-2602   	; 0x2ec <main+0x110>
					break;

			case 9:	// write default calibration values; wait 2 seconds before start writing the calibration values
					// in eeprom in order to avoid rewriting the data involuntarily when moving the selector and passing 
					// through selector position 9
					switch(demoState) {
     d16:	82 30       	cpi	r24, 0x02	; 2
     d18:	09 f0       	breq	.+2      	; 0xd1c <main+0xb40>
     d1a:	c9 cb       	rjmp	.-2158   	; 0x4ae <main+0x2d2>
								demoState = 2;
							}
							break;						

						case 2:
							if(!calibrationWritten) {
     d1c:	80 91 79 04 	lds	r24, 0x0479
     d20:	88 23       	and	r24, r24
     d22:	09 f0       	breq	.+2      	; 0xd26 <main+0xb4a>
     d24:	c4 cb       	rjmp	.-2168   	; 0x4ae <main+0x2d2>
								calibrationWritten = 1;
     d26:	20 92 79 04 	sts	0x0479, r2
								writeDefaultCalibration();
     d2a:	0e 94 b8 39 	call	0x7370	; 0x7370 <writeDefaultCalibration>
     d2e:	80 91 5c 04 	lds	r24, 0x045C
     d32:	dc ca       	rjmp	.-2632   	; 0x2ec <main+0x110>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
     d34:	84 30       	cpi	r24, 0x04	; 4
     d36:	09 f4       	brne	.+2      	; 0xd3a <main+0xb5e>
     d38:	ac c4       	rjmp	.+2392   	; 0x1692 <main+0x14b6>
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	08 f4       	brcc	.+2      	; 0xd40 <main+0xb64>
     d3e:	6a c5       	rjmp	.+2772   	; 0x1814 <main+0x1638>
     d40:	85 30       	cpi	r24, 0x05	; 5
     d42:	09 f0       	breq	.+2      	; 0xd46 <main+0xb6a>
     d44:	a3 cb       	rjmp	.-2234   	; 0x48c <main+0x2b0>
							//pwm_green = 0;
							//pwm_blue = 255;													
							break;

						case 5:	// turn around
							turnOffGreenLeds();
     d46:	0e 94 6a 40 	call	0x80d4	; 0x80d4 <turnOffGreenLeds>
							GREEN_LED6_ON;
     d4a:	80 91 0b 01 	lds	r24, 0x010B
     d4e:	8f 7b       	andi	r24, 0xBF	; 191
     d50:	80 93 0b 01 	sts	0x010B, r24
							GREEN_LED7_ON;
     d54:	80 91 0b 01 	lds	r24, 0x010B
     d58:	8f 77       	andi	r24, 0x7F	; 127
     d5a:	80 93 0b 01 	sts	0x010B, r24
							demoEndTime = getTime100MicroSec();
     d5e:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
     d62:	9b 01       	movw	r18, r22
     d64:	ac 01       	movw	r20, r24
     d66:	60 93 6c 04 	sts	0x046C, r22
     d6a:	70 93 6d 04 	sts	0x046D, r23
     d6e:	80 93 6e 04 	sts	0x046E, r24
     d72:	90 93 6f 04 	sts	0x046F, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_750_MSEC)) {
     d76:	80 91 64 04 	lds	r24, 0x0464
     d7a:	90 91 65 04 	lds	r25, 0x0465
     d7e:	a0 91 66 04 	lds	r26, 0x0466
     d82:	b0 91 67 04 	lds	r27, 0x0467
     d86:	28 1b       	sub	r18, r24
     d88:	39 0b       	sbc	r19, r25
     d8a:	4a 0b       	sbc	r20, r26
     d8c:	5b 0b       	sbc	r21, r27
     d8e:	2b 32       	cpi	r18, 0x2B	; 43
     d90:	6c e1       	ldi	r22, 0x1C	; 28
     d92:	36 07       	cpc	r19, r22
     d94:	60 e0       	ldi	r22, 0x00	; 0
     d96:	46 07       	cpc	r20, r22
     d98:	60 e0       	ldi	r22, 0x00	; 0
     d9a:	56 07       	cpc	r21, r22
     d9c:	08 f4       	brcc	.+2      	; 0xda0 <main+0xbc4>
     d9e:	76 cb       	rjmp	.-2324   	; 0x48c <main+0x2b0>
								demoStartTime = getTime100MicroSec();
     da0:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
     da4:	60 93 64 04 	sts	0x0464, r22
     da8:	70 93 65 04 	sts	0x0465, r23
     dac:	80 93 66 04 	sts	0x0466, r24
     db0:	90 93 67 04 	sts	0x0467, r25
								demoState = 0;							
     db4:	10 92 60 04 	sts	0x0460, r1
     db8:	69 cb       	rjmp	.-2350   	; 0x48c <main+0x2b0>

				}
				break;

			case 13: // IR local communication: listen and transmit continuously
				switch(demoState) {
     dba:	82 30       	cpi	r24, 0x02	; 2
     dbc:	09 f0       	breq	.+2      	; 0xdc0 <main+0xbe4>
     dbe:	77 cb       	rjmp	.-2322   	; 0x4ae <main+0x2d2>
						irCommSendData(irCommRxByteExpected);													
						demoState = 2;
						break;

					case 2:
						irCommTasks();
     dc0:	0e 94 a3 48 	call	0x9146	; 0x9146 <irCommTasks>
						if(irCommDataSent()==1) {							
     dc4:	0e 94 f4 53 	call	0xa7e8	; 0xa7e8 <irCommDataSent>
     dc8:	81 30       	cpi	r24, 0x01	; 1
     dca:	09 f4       	brne	.+2      	; 0xdce <main+0xbf2>
     dcc:	0d c6       	rjmp	.+3098   	; 0x19e8 <main+0x180c>
								irCommRxByteExpected++;
							} else {
								irCommRxByteExpected = 0;
							}
						}
						if(irCommDataAvailable()==1) {
     dce:	0e 94 fc 53 	call	0xa7f8	; 0xa7f8 <irCommDataAvailable>
     dd2:	81 30       	cpi	r24, 0x01	; 1
     dd4:	09 f0       	breq	.+2      	; 0xdd8 <main+0xbfc>
     dd6:	93 ce       	rjmp	.-730    	; 0xafe <main+0x922>
							irCommReadData();
     dd8:	0e 94 ff 53 	call	0xa7fe	; 0xa7fe <irCommReadData>
							if(i<7) {
     ddc:	2d 81       	ldd	r18, Y+5	; 0x05
     dde:	3e 81       	ldd	r19, Y+6	; 0x06
     de0:	27 30       	cpi	r18, 0x07	; 7
     de2:	31 05       	cpc	r19, r1
     de4:	08 f4       	brcc	.+2      	; 0xde8 <main+0xc0c>
     de6:	5c c7       	rjmp	.+3768   	; 0x1ca0 <main+0x1ac4>
							} else {
								i = 0;
							}
							switch(i) {
								case 0: 
									updateRedLed(255);
     de8:	8f ef       	ldi	r24, 0xFF	; 255
     dea:	0e 94 91 3f 	call	0x7f22	; 0x7f22 <updateRedLed>
									updateGreenLed(255);
     dee:	8f ef       	ldi	r24, 0xFF	; 255
     df0:	0e 94 a5 3f 	call	0x7f4a	; 0x7f4a <updateGreenLed>
									updateBlueLed(255);
     df4:	8f ef       	ldi	r24, 0xFF	; 255
     df6:	0e 94 b9 3f 	call	0x7f72	; 0x7f72 <updateBlueLed>
     dfa:	80 91 5c 04 	lds	r24, 0x045C
									break;
     dfe:	1e 82       	std	Y+6, r1	; 0x06
     e00:	1d 82       	std	Y+5, r1	; 0x05
     e02:	74 ca       	rjmp	.-2840   	; 0x2ec <main+0x110>
						break;
				}
				break;

			case 12:	// IR local communication: 2 or more robots pass information between them in sequence
				switch(demoState) {
     e04:	82 30       	cpi	r24, 0x02	; 2
     e06:	09 f4       	brne	.+2      	; 0xe0a <main+0xc2e>
     e08:	24 c3       	rjmp	.+1608   	; 0x1452 <main+0x1276>
     e0a:	83 30       	cpi	r24, 0x03	; 3
     e0c:	09 f0       	breq	.+2      	; 0xe10 <main+0xc34>
     e0e:	4f cb       	rjmp	.-2402   	; 0x4ae <main+0x2d2>
						break;

					case 3:	// led is on
							// transmission: send 0xFF untill the previous robot is turned off
							// reception: I know that it is turned off when I receive the previous robot id 
						irCommTasks();
     e10:	0e 94 a3 48 	call	0x9146	; 0x9146 <irCommTasks>
						if(irCommDataSent()==1) {
     e14:	0e 94 f4 53 	call	0xa7e8	; 0xa7e8 <irCommDataSent>
     e18:	81 30       	cpi	r24, 0x01	; 1
     e1a:	09 f0       	breq	.+2      	; 0xe1e <main+0xc42>
     e1c:	70 ce       	rjmp	.-800    	; 0xafe <main+0x922>
							if(irCommDataAvailable()==1) {
     e1e:	0e 94 fc 53 	call	0xa7f8	; 0xa7f8 <irCommDataAvailable>
     e22:	81 30       	cpi	r24, 0x01	; 1
     e24:	09 f0       	breq	.+2      	; 0xe28 <main+0xc4c>
     e26:	6b ce       	rjmp	.-810    	; 0xafe <main+0x922>
								if(irCommLedToggle==0) {
     e28:	90 91 f3 04 	lds	r25, 0x04F3
     e2c:	99 23       	and	r25, r25
     e2e:	11 f0       	breq	.+4      	; 0xe34 <main+0xc58>
     e30:	0c 94 55 0f 	jmp	0x1eaa	; 0x1eaa <main+0x1cce>
									irCommLedToggle = 1;
     e34:	80 93 f3 04 	sts	0x04F3, r24
									updateBlueLed(255);
     e38:	8f ef       	ldi	r24, 0xFF	; 255
     e3a:	0e 94 b9 3f 	call	0x7f72	; 0x7f72 <updateBlueLed>
									updateRedLed(255);
     e3e:	8f ef       	ldi	r24, 0xFF	; 255
     e40:	0e 94 91 3f 	call	0x7f22	; 0x7f22 <updateRedLed>
									updateGreenLed(128);
     e44:	80 e8       	ldi	r24, 0x80	; 128
     e46:	0e 94 a5 3f 	call	0x7f4a	; 0x7f4a <updateGreenLed>
									irCommLedToggle = 0;
									updateBlueLed(255);
									updateRedLed(255);
									updateGreenLed(235);
								}
								i = irCommReadData();
     e4a:	0e 94 ff 53 	call	0xa7fe	; 0xa7fe <irCommReadData>
     e4e:	a8 2f       	mov	r26, r24
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	be 83       	std	Y+6, r27	; 0x06
     e54:	ad 83       	std	Y+5, r26	; 0x05
								if(irCommRobotId == 0) {
     e56:	80 91 f1 04 	lds	r24, 0x04F1
     e5a:	88 23       	and	r24, r24
     e5c:	11 f0       	breq	.+4      	; 0xe62 <main+0xc86>
     e5e:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <main+0x1cba>
									if(i == (unsigned int)(irCommRobotsNum-1)) {
     e62:	80 91 f2 04 	lds	r24, 0x04F2
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	01 97       	sbiw	r24, 0x01	; 1
     e6a:	8a 17       	cp	r24, r26
     e6c:	9b 07       	cpc	r25, r27
     e6e:	09 f4       	brne	.+2      	; 0xe72 <main+0xc96>
     e70:	f0 c3       	rjmp	.+2016   	; 0x1652 <main+0x1476>
									}
								} else {
									if(i == (unsigned int)(irCommRobotId-1)) {
										demoState = 1;
									} else {
										irCommSendData(0xFF);
     e72:	8f ef       	ldi	r24, 0xFF	; 255
     e74:	0e 94 eb 53 	call	0xa7d6	; 0xa7d6 <irCommSendData>
     e78:	80 91 5c 04 	lds	r24, 0x045C
     e7c:	37 ca       	rjmp	.-2962   	; 0x2ec <main+0x110>
				
				if(currRand<32) {
					if(pwm_green!=255 && pwm_blue!=255) {	// do not turn on all leds
						pwm_red = 255;
					}
				} else if(currRand<64) {
     e7e:	90 e4       	ldi	r25, 0x40	; 64
     e80:	a9 16       	cp	r10, r25
     e82:	b1 04       	cpc	r11, r1
     e84:	08 f0       	brcs	.+2      	; 0xe88 <main+0xcac>
     e86:	f3 c3       	rjmp	.+2022   	; 0x166e <main+0x1492>
					if(pwm_red!=255 && pwm_blue!=255) {
     e88:	80 91 0c 02 	lds	r24, 0x020C
     e8c:	8f 3f       	cpi	r24, 0xFF	; 255
     e8e:	09 f4       	brne	.+2      	; 0xe92 <main+0xcb6>
     e90:	54 cc       	rjmp	.-1880   	; 0x73a <main+0x55e>
     e92:	80 91 0e 02 	lds	r24, 0x020E
     e96:	8f 3f       	cpi	r24, 0xFF	; 255
     e98:	09 f4       	brne	.+2      	; 0xe9c <main+0xcc0>
     e9a:	4f cc       	rjmp	.-1890   	; 0x73a <main+0x55e>
						pwm_green = 255;
     e9c:	10 93 0d 02 	sts	0x020D, r17
     ea0:	4c cc       	rjmp	.-1896   	; 0x73a <main+0x55e>
			
				srand(TCNT3);
				currRand2 = rand()%128;
				if(currRand2<32) {
					pwm_red = 255;
				} else if(currRand2<64) {
     ea2:	80 34       	cpi	r24, 0x40	; 64
     ea4:	91 05       	cpc	r25, r1
     ea6:	08 f0       	brcs	.+2      	; 0xeaa <main+0xcce>
     ea8:	fb c4       	rjmp	.+2550   	; 0x18a0 <main+0x16c4>
					pwm_green = 255;
     eaa:	10 93 0d 02 	sts	0x020D, r17
     eae:	10 ce       	rjmp	.-992    	; 0xad0 <main+0x8f4>
						demoState = 1;
						i = 0;
						break;

					case 1:						
						irCommSendData(irCommRxByteExpected);													
     eb0:	80 91 1f 05 	lds	r24, 0x051F
     eb4:	0e 94 eb 53 	call	0xa7d6	; 0xa7d6 <irCommSendData>
						demoState = 2;
     eb8:	f2 e0       	ldi	r31, 0x02	; 2
     eba:	f0 93 60 04 	sts	0x0460, r31
     ebe:	80 91 5c 04 	lds	r24, 0x045C
						break;
     ec2:	14 ca       	rjmp	.-3032   	; 0x2ec <main+0x110>
							break;

						case 1:	// send sensors data and activate actuators
							//setRightSpeed(20);
							//setLeftSpeed(20);
							turnOnGreenLeds();
     ec4:	0e 94 83 40 	call	0x8106	; 0x8106 <turnOnGreenLeds>
							updateRedLed(pwm_red);
     ec8:	80 91 0c 02 	lds	r24, 0x020C
     ecc:	0e 94 91 3f 	call	0x7f22	; 0x7f22 <updateRedLed>
							updateGreenLed(pwm_green);
     ed0:	80 91 0d 02 	lds	r24, 0x020D
     ed4:	0e 94 a5 3f 	call	0x7f4a	; 0x7f4a <updateGreenLed>
							updateBlueLed(pwm_blue);
     ed8:	80 91 0e 02 	lds	r24, 0x020E
     edc:	0e 94 b9 3f 	call	0x7f72	; 0x7f72 <updateBlueLed>
							LED_IR1_LOW;
     ee0:	44 98       	cbi	0x08, 4	; 8
							LED_IR2_LOW;
     ee2:	45 98       	cbi	0x08, 5	; 8
							
							if(getDataNow) {
     ee4:	80 91 36 04 	lds	r24, 0x0436
     ee8:	88 23       	and	r24, r24
     eea:	09 f4       	brne	.+2      	; 0xeee <main+0xd12>
     eec:	08 ce       	rjmp	.-1008   	; 0xafe <main+0x922>
								getDataNow = 0;	
     eee:	10 92 36 04 	sts	0x0436, r1
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     ef2:	80 91 69 02 	lds	r24, 0x0269
     ef6:	61 e0       	ldi	r22, 0x01	; 1
     ef8:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     efc:	80 91 6a 02 	lds	r24, 0x026A
     f00:	61 e0       	ldi	r22, 0x01	; 1
     f02:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     f06:	80 91 39 02 	lds	r24, 0x0239
     f0a:	90 91 3a 02 	lds	r25, 0x023A
     f0e:	61 e0       	ldi	r22, 0x01	; 1
     f10:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     f14:	80 91 39 02 	lds	r24, 0x0239
     f18:	90 91 3a 02 	lds	r25, 0x023A
     f1c:	89 2f       	mov	r24, r25
     f1e:	61 e0       	ldi	r22, 0x01	; 1
     f20:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     f24:	80 91 6b 02 	lds	r24, 0x026B
     f28:	61 e0       	ldi	r22, 0x01	; 1
     f2a:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     f2e:	80 91 6c 02 	lds	r24, 0x026C
     f32:	61 e0       	ldi	r22, 0x01	; 1
     f34:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     f38:	80 91 3d 02 	lds	r24, 0x023D
     f3c:	90 91 3e 02 	lds	r25, 0x023E
     f40:	61 e0       	ldi	r22, 0x01	; 1
     f42:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     f46:	80 91 3d 02 	lds	r24, 0x023D
     f4a:	90 91 3e 02 	lds	r25, 0x023E
     f4e:	89 2f       	mov	r24, r25
     f50:	61 e0       	ldi	r22, 0x01	; 1
     f52:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     f56:	80 91 6d 02 	lds	r24, 0x026D
     f5a:	61 e0       	ldi	r22, 0x01	; 1
     f5c:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     f60:	80 91 6e 02 	lds	r24, 0x026E
     f64:	61 e0       	ldi	r22, 0x01	; 1
     f66:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     f6a:	80 91 41 02 	lds	r24, 0x0241
     f6e:	90 91 42 02 	lds	r25, 0x0242
     f72:	61 e0       	ldi	r22, 0x01	; 1
     f74:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     f78:	80 91 41 02 	lds	r24, 0x0241
     f7c:	90 91 42 02 	lds	r25, 0x0242
     f80:	89 2f       	mov	r24, r25
     f82:	61 e0       	ldi	r22, 0x01	; 1
     f84:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     f88:	80 91 6f 02 	lds	r24, 0x026F
     f8c:	61 e0       	ldi	r22, 0x01	; 1
     f8e:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     f92:	80 91 70 02 	lds	r24, 0x0270
     f96:	61 e0       	ldi	r22, 0x01	; 1
     f98:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     f9c:	80 91 45 02 	lds	r24, 0x0245
     fa0:	90 91 46 02 	lds	r25, 0x0246
     fa4:	61 e0       	ldi	r22, 0x01	; 1
     fa6:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     faa:	80 91 45 02 	lds	r24, 0x0245
     fae:	90 91 46 02 	lds	r25, 0x0246
     fb2:	89 2f       	mov	r24, r25
     fb4:	61 e0       	ldi	r22, 0x01	; 1
     fb6:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     fba:	80 91 71 02 	lds	r24, 0x0271
     fbe:	61 e0       	ldi	r22, 0x01	; 1
     fc0:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     fc4:	80 91 72 02 	lds	r24, 0x0272
     fc8:	61 e0       	ldi	r22, 0x01	; 1
     fca:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     fce:	80 91 49 02 	lds	r24, 0x0249
     fd2:	90 91 4a 02 	lds	r25, 0x024A
     fd6:	61 e0       	ldi	r22, 0x01	; 1
     fd8:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     fdc:	80 91 49 02 	lds	r24, 0x0249
     fe0:	90 91 4a 02 	lds	r25, 0x024A
     fe4:	89 2f       	mov	r24, r25
     fe6:	61 e0       	ldi	r22, 0x01	; 1
     fe8:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     fec:	80 91 73 02 	lds	r24, 0x0273
     ff0:	61 e0       	ldi	r22, 0x01	; 1
     ff2:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     ff6:	80 91 74 02 	lds	r24, 0x0274
     ffa:	61 e0       	ldi	r22, 0x01	; 1
     ffc:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
    1000:	80 91 4d 02 	lds	r24, 0x024D
    1004:	90 91 4e 02 	lds	r25, 0x024E
    1008:	61 e0       	ldi	r22, 0x01	; 1
    100a:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
    100e:	80 91 4d 02 	lds	r24, 0x024D
    1012:	90 91 4e 02 	lds	r25, 0x024E
    1016:	89 2f       	mov	r24, r25
    1018:	61 e0       	ldi	r22, 0x01	; 1
    101a:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
    101e:	80 91 75 02 	lds	r24, 0x0275
    1022:	61 e0       	ldi	r22, 0x01	; 1
    1024:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
    1028:	80 91 76 02 	lds	r24, 0x0276
    102c:	61 e0       	ldi	r22, 0x01	; 1
    102e:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
    1032:	80 91 51 02 	lds	r24, 0x0251
    1036:	90 91 52 02 	lds	r25, 0x0252
    103a:	61 e0       	ldi	r22, 0x01	; 1
    103c:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
    1040:	80 91 51 02 	lds	r24, 0x0251
    1044:	90 91 52 02 	lds	r25, 0x0252
    1048:	89 2f       	mov	r24, r25
    104a:	61 e0       	ldi	r22, 0x01	; 1
    104c:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
    1050:	80 91 77 02 	lds	r24, 0x0277
    1054:	61 e0       	ldi	r22, 0x01	; 1
    1056:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
    105a:	80 91 78 02 	lds	r24, 0x0278
    105e:	61 e0       	ldi	r22, 0x01	; 1
    1060:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
    1064:	80 91 55 02 	lds	r24, 0x0255
    1068:	90 91 56 02 	lds	r25, 0x0256
    106c:	61 e0       	ldi	r22, 0x01	; 1
    106e:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
    1072:	80 91 55 02 	lds	r24, 0x0255
    1076:	90 91 56 02 	lds	r25, 0x0256
    107a:	89 2f       	mov	r24, r25
    107c:	61 e0       	ldi	r22, 0x01	; 1
    107e:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
    1082:	80 91 79 02 	lds	r24, 0x0279
    1086:	61 e0       	ldi	r22, 0x01	; 1
    1088:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
    108c:	80 91 7a 02 	lds	r24, 0x027A
    1090:	61 e0       	ldi	r22, 0x01	; 1
    1092:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
    1096:	80 91 59 02 	lds	r24, 0x0259
    109a:	90 91 5a 02 	lds	r25, 0x025A
    109e:	61 e0       	ldi	r22, 0x01	; 1
    10a0:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
    10a4:	80 91 59 02 	lds	r24, 0x0259
    10a8:	90 91 5a 02 	lds	r25, 0x025A
    10ac:	89 2f       	mov	r24, r25
    10ae:	61 e0       	ldi	r22, 0x01	; 1
    10b0:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
    10b4:	80 91 7b 02 	lds	r24, 0x027B
    10b8:	61 e0       	ldi	r22, 0x01	; 1
    10ba:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
    10be:	80 91 7c 02 	lds	r24, 0x027C
    10c2:	61 e0       	ldi	r22, 0x01	; 1
    10c4:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
    10c8:	80 91 5d 02 	lds	r24, 0x025D
    10cc:	90 91 5e 02 	lds	r25, 0x025E
    10d0:	61 e0       	ldi	r22, 0x01	; 1
    10d2:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
    10d6:	80 91 5d 02 	lds	r24, 0x025D
    10da:	90 91 5e 02 	lds	r25, 0x025E
    10de:	89 2f       	mov	r24, r25
    10e0:	61 e0       	ldi	r22, 0x01	; 1
    10e2:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
    10e6:	80 91 7d 02 	lds	r24, 0x027D
    10ea:	61 e0       	ldi	r22, 0x01	; 1
    10ec:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
    10f0:	80 91 7e 02 	lds	r24, 0x027E
    10f4:	61 e0       	ldi	r22, 0x01	; 1
    10f6:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
    10fa:	80 91 61 02 	lds	r24, 0x0261
    10fe:	90 91 62 02 	lds	r25, 0x0262
    1102:	61 e0       	ldi	r22, 0x01	; 1
    1104:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
    1108:	80 91 61 02 	lds	r24, 0x0261
    110c:	90 91 62 02 	lds	r25, 0x0262
    1110:	89 2f       	mov	r24, r25
    1112:	61 e0       	ldi	r22, 0x01	; 1
    1114:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
    1118:	80 91 7f 02 	lds	r24, 0x027F
    111c:	61 e0       	ldi	r22, 0x01	; 1
    111e:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
    1122:	80 91 80 02 	lds	r24, 0x0280
    1126:	61 e0       	ldi	r22, 0x01	; 1
    1128:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
    112c:	80 91 65 02 	lds	r24, 0x0265
    1130:	90 91 66 02 	lds	r25, 0x0266
    1134:	61 e0       	ldi	r22, 0x01	; 1
    1136:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
    113a:	80 91 65 02 	lds	r24, 0x0265
    113e:	90 91 66 02 	lds	r25, 0x0266
    1142:	89 2f       	mov	r24, r25
    1144:	61 e0       	ldi	r22, 0x01	; 1
    1146:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
								}
								usart0Transmit(accX&0xFF,1);
    114a:	80 91 3c 04 	lds	r24, 0x043C
    114e:	61 e0       	ldi	r22, 0x01	; 1
    1150:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
								usart0Transmit(accX>>8,1);
    1154:	80 91 3d 04 	lds	r24, 0x043D
    1158:	61 e0       	ldi	r22, 0x01	; 1
    115a:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
								usart0Transmit(accY&0xFF,1);
    115e:	80 91 3e 04 	lds	r24, 0x043E
    1162:	61 e0       	ldi	r22, 0x01	; 1
    1164:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
								usart0Transmit(accY>>8,1);
    1168:	80 91 3f 04 	lds	r24, 0x043F
    116c:	61 e0       	ldi	r22, 0x01	; 1
    116e:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
								usart0Transmit(accZ&0xFF,1);
    1172:	80 91 40 04 	lds	r24, 0x0440
    1176:	61 e0       	ldi	r22, 0x01	; 1
    1178:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
								usart0Transmit(accZ>>8,1);
    117c:	80 91 41 04 	lds	r24, 0x0441
    1180:	61 e0       	ldi	r22, 0x01	; 1
    1182:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
								usart0Transmit(irCommand,1);
    1186:	80 91 37 04 	lds	r24, 0x0437
    118a:	61 e0       	ldi	r22, 0x01	; 1
    118c:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
								usart0Transmit(currentSelector,1);
    1190:	80 91 5c 04 	lds	r24, 0x045C
    1194:	61 e0       	ldi	r22, 0x01	; 1
    1196:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
								usart0Transmit(BUTTON0,1);
    119a:	80 91 03 01 	lds	r24, 0x0103
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	80 72       	andi	r24, 0x20	; 32
    11a2:	90 70       	andi	r25, 0x00	; 0
    11a4:	95 95       	asr	r25
    11a6:	87 95       	ror	r24
    11a8:	95 95       	asr	r25
    11aa:	87 95       	ror	r24
    11ac:	95 95       	asr	r25
    11ae:	87 95       	ror	r24
    11b0:	95 95       	asr	r25
    11b2:	87 95       	ror	r24
    11b4:	95 95       	asr	r25
    11b6:	87 95       	ror	r24
    11b8:	61 e0       	ldi	r22, 0x01	; 1
    11ba:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
								usart0Transmit(rfFlags,1);
    11be:	80 91 27 03 	lds	r24, 0x0327
    11c2:	61 e0       	ldi	r22, 0x01	; 1
    11c4:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
								usart0Transmit(((unsigned int)(theta*573.0))&0xFF,1);	// radians to degrees => 573 = 1800/PI
    11c8:	60 91 7f 04 	lds	r22, 0x047F
    11cc:	70 91 80 04 	lds	r23, 0x0480
    11d0:	80 91 81 04 	lds	r24, 0x0481
    11d4:	90 91 82 04 	lds	r25, 0x0482
    11d8:	20 e0       	ldi	r18, 0x00	; 0
    11da:	30 e4       	ldi	r19, 0x40	; 64
    11dc:	4f e0       	ldi	r20, 0x0F	; 15
    11de:	54 e4       	ldi	r21, 0x44	; 68
    11e0:	0e 94 99 56 	call	0xad32	; 0xad32 <__mulsf3>
    11e4:	0e 94 52 55 	call	0xaaa4	; 0xaaa4 <__fixunssfsi>
    11e8:	86 2f       	mov	r24, r22
    11ea:	61 e0       	ldi	r22, 0x01	; 1
    11ec:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
								usart0Transmit(((unsigned int)(theta*573.0))>>8,1);
    11f0:	60 91 7f 04 	lds	r22, 0x047F
    11f4:	70 91 80 04 	lds	r23, 0x0480
    11f8:	80 91 81 04 	lds	r24, 0x0481
    11fc:	90 91 82 04 	lds	r25, 0x0482
    1200:	20 e0       	ldi	r18, 0x00	; 0
    1202:	30 e4       	ldi	r19, 0x40	; 64
    1204:	4f e0       	ldi	r20, 0x0F	; 15
    1206:	54 e4       	ldi	r21, 0x44	; 68
    1208:	0e 94 99 56 	call	0xad32	; 0xad32 <__mulsf3>
    120c:	0e 94 52 55 	call	0xaaa4	; 0xaaa4 <__fixunssfsi>
    1210:	87 2f       	mov	r24, r23
    1212:	61 e0       	ldi	r22, 0x01	; 1
    1214:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
								usart0Transmit(((unsigned int)xPos)&0xFF,1);
    1218:	60 91 87 04 	lds	r22, 0x0487
    121c:	70 91 88 04 	lds	r23, 0x0488
    1220:	80 91 89 04 	lds	r24, 0x0489
    1224:	90 91 8a 04 	lds	r25, 0x048A
    1228:	0e 94 52 55 	call	0xaaa4	; 0xaaa4 <__fixunssfsi>
    122c:	86 2f       	mov	r24, r22
    122e:	61 e0       	ldi	r22, 0x01	; 1
    1230:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
								usart0Transmit(((unsigned int)xPos)>>8,1);
    1234:	60 91 87 04 	lds	r22, 0x0487
    1238:	70 91 88 04 	lds	r23, 0x0488
    123c:	80 91 89 04 	lds	r24, 0x0489
    1240:	90 91 8a 04 	lds	r25, 0x048A
    1244:	0e 94 52 55 	call	0xaaa4	; 0xaaa4 <__fixunssfsi>
    1248:	87 2f       	mov	r24, r23
    124a:	61 e0       	ldi	r22, 0x01	; 1
    124c:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
								usart0Transmit(((unsigned int)yPos)&0xFF,1);
    1250:	60 91 8b 04 	lds	r22, 0x048B
    1254:	70 91 8c 04 	lds	r23, 0x048C
    1258:	80 91 8d 04 	lds	r24, 0x048D
    125c:	90 91 8e 04 	lds	r25, 0x048E
    1260:	0e 94 52 55 	call	0xaaa4	; 0xaaa4 <__fixunssfsi>
    1264:	86 2f       	mov	r24, r22
    1266:	61 e0       	ldi	r22, 0x01	; 1
    1268:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
								usart0Transmit(((unsigned int)yPos)>>8,1);
    126c:	60 91 8b 04 	lds	r22, 0x048B
    1270:	70 91 8c 04 	lds	r23, 0x048C
    1274:	80 91 8d 04 	lds	r24, 0x048D
    1278:	90 91 8e 04 	lds	r25, 0x048E
    127c:	0e 94 52 55 	call	0xaaa4	; 0xaaa4 <__fixunssfsi>
    1280:	87 2f       	mov	r24, r23
    1282:	61 e0       	ldi	r22, 0x01	; 1
    1284:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)&0xFF,1);
    1288:	60 91 e5 02 	lds	r22, 0x02E5
    128c:	70 91 e6 02 	lds	r23, 0x02E6
    1290:	80 91 e7 02 	lds	r24, 0x02E7
    1294:	90 91 e8 02 	lds	r25, 0x02E8
    1298:	0e 94 4d 55 	call	0xaa9a	; 0xaa9a <__fixsfsi>
    129c:	86 2f       	mov	r24, r22
    129e:	61 e0       	ldi	r22, 0x01	; 1
    12a0:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)>>8,1);
    12a4:	60 91 e5 02 	lds	r22, 0x02E5
    12a8:	70 91 e6 02 	lds	r23, 0x02E6
    12ac:	80 91 e7 02 	lds	r24, 0x02E7
    12b0:	90 91 e8 02 	lds	r25, 0x02E8
    12b4:	0e 94 4d 55 	call	0xaa9a	; 0xaa9a <__fixsfsi>
    12b8:	87 2f       	mov	r24, r23
    12ba:	61 e0       	ldi	r22, 0x01	; 1
    12bc:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)>>16,1);
    12c0:	60 91 e5 02 	lds	r22, 0x02E5
    12c4:	70 91 e6 02 	lds	r23, 0x02E6
    12c8:	80 91 e7 02 	lds	r24, 0x02E7
    12cc:	90 91 e8 02 	lds	r25, 0x02E8
    12d0:	0e 94 4d 55 	call	0xaa9a	; 0xaa9a <__fixsfsi>
    12d4:	61 e0       	ldi	r22, 0x01	; 1
    12d6:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)>>24,1);
    12da:	60 91 e5 02 	lds	r22, 0x02E5
    12de:	70 91 e6 02 	lds	r23, 0x02E6
    12e2:	80 91 e7 02 	lds	r24, 0x02E7
    12e6:	90 91 e8 02 	lds	r25, 0x02E8
    12ea:	0e 94 4d 55 	call	0xaa9a	; 0xaa9a <__fixsfsi>
    12ee:	89 2f       	mov	r24, r25
    12f0:	61 e0       	ldi	r22, 0x01	; 1
    12f2:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)&0xFF,1);
    12f6:	60 91 e1 02 	lds	r22, 0x02E1
    12fa:	70 91 e2 02 	lds	r23, 0x02E2
    12fe:	80 91 e3 02 	lds	r24, 0x02E3
    1302:	90 91 e4 02 	lds	r25, 0x02E4
    1306:	0e 94 4d 55 	call	0xaa9a	; 0xaa9a <__fixsfsi>
    130a:	86 2f       	mov	r24, r22
    130c:	61 e0       	ldi	r22, 0x01	; 1
    130e:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)>>8,1);
    1312:	60 91 e1 02 	lds	r22, 0x02E1
    1316:	70 91 e2 02 	lds	r23, 0x02E2
    131a:	80 91 e3 02 	lds	r24, 0x02E3
    131e:	90 91 e4 02 	lds	r25, 0x02E4
    1322:	0e 94 4d 55 	call	0xaa9a	; 0xaa9a <__fixsfsi>
    1326:	87 2f       	mov	r24, r23
    1328:	61 e0       	ldi	r22, 0x01	; 1
    132a:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)>>16,1);
    132e:	60 91 e1 02 	lds	r22, 0x02E1
    1332:	70 91 e2 02 	lds	r23, 0x02E2
    1336:	80 91 e3 02 	lds	r24, 0x02E3
    133a:	90 91 e4 02 	lds	r25, 0x02E4
    133e:	0e 94 4d 55 	call	0xaa9a	; 0xaa9a <__fixsfsi>
    1342:	61 e0       	ldi	r22, 0x01	; 1
    1344:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)>>24,1);
    1348:	60 91 e1 02 	lds	r22, 0x02E1
    134c:	70 91 e2 02 	lds	r23, 0x02E2
    1350:	80 91 e3 02 	lds	r24, 0x02E3
    1354:	90 91 e4 02 	lds	r25, 0x02E4
    1358:	0e 94 4d 55 	call	0xaa9a	; 0xaa9a <__fixsfsi>
    135c:	89 2f       	mov	r24, r25
    135e:	61 e0       	ldi	r22, 0x01	; 1
    1360:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
								usart0Transmit(pwm_left_desired>>2, 1);
    1364:	80 91 0b 03 	lds	r24, 0x030B
    1368:	90 91 0c 03 	lds	r25, 0x030C
    136c:	95 95       	asr	r25
    136e:	87 95       	ror	r24
    1370:	95 95       	asr	r25
    1372:	87 95       	ror	r24
    1374:	61 e0       	ldi	r22, 0x01	; 1
    1376:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
								usart0Transmit(pwm_right_desired>>2, 1);
    137a:	80 91 09 03 	lds	r24, 0x0309
    137e:	90 91 0a 03 	lds	r25, 0x030A
    1382:	95 95       	asr	r25
    1384:	87 95       	ror	r24
    1386:	95 95       	asr	r25
    1388:	87 95       	ror	r24
    138a:	61 e0       	ldi	r22, 0x01	; 1
    138c:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
    1390:	80 91 5c 04 	lds	r24, 0x045C
    1394:	2c e0       	ldi	r18, 0x0C	; 12
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	3e 83       	std	Y+6, r19	; 0x06
    139a:	2d 83       	std	Y+5, r18	; 0x05
    139c:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <main+0x110>
							demoStartTime = getTime100MicroSec();
							demoState = 1;
							break;

						case 1:
							if((getTime100MicroSec()-demoStartTime) >= (PAUSE_2_SEC)) {
    13a0:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
    13a4:	9b 01       	movw	r18, r22
    13a6:	ac 01       	movw	r20, r24
    13a8:	80 91 64 04 	lds	r24, 0x0464
    13ac:	90 91 65 04 	lds	r25, 0x0465
    13b0:	a0 91 66 04 	lds	r26, 0x0466
    13b4:	b0 91 67 04 	lds	r27, 0x0467
    13b8:	28 1b       	sub	r18, r24
    13ba:	39 0b       	sbc	r19, r25
    13bc:	4a 0b       	sbc	r20, r26
    13be:	5b 0b       	sbc	r21, r27
    13c0:	2e 31       	cpi	r18, 0x1E	; 30
    13c2:	8b e4       	ldi	r24, 0x4B	; 75
    13c4:	38 07       	cpc	r19, r24
    13c6:	80 e0       	ldi	r24, 0x00	; 0
    13c8:	48 07       	cpc	r20, r24
    13ca:	80 e0       	ldi	r24, 0x00	; 0
    13cc:	58 07       	cpc	r21, r24
    13ce:	08 f4       	brcc	.+2      	; 0x13d2 <main+0x11f6>
    13d0:	96 cb       	rjmp	.-2260   	; 0xafe <main+0x922>
								demoState = 2;
    13d2:	92 e0       	ldi	r25, 0x02	; 2
    13d4:	90 93 60 04 	sts	0x0460, r25
    13d8:	80 91 5c 04 	lds	r24, 0x045C
    13dc:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <main+0x110>
							setLeftSpeed(20);
							setRightSpeed(20);
							demoState = 1;
							break;
						case 1: // motion					
							if((getTime100MicroSec()-demoStartTime) >= (PAUSE_4_SEC)) {
    13e0:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
    13e4:	9b 01       	movw	r18, r22
    13e6:	ac 01       	movw	r20, r24
    13e8:	80 91 64 04 	lds	r24, 0x0464
    13ec:	90 91 65 04 	lds	r25, 0x0465
    13f0:	a0 91 66 04 	lds	r26, 0x0466
    13f4:	b0 91 67 04 	lds	r27, 0x0467
    13f8:	28 1b       	sub	r18, r24
    13fa:	39 0b       	sbc	r19, r25
    13fc:	4a 0b       	sbc	r20, r26
    13fe:	5b 0b       	sbc	r21, r27
    1400:	2e 33       	cpi	r18, 0x3E	; 62
    1402:	a6 e9       	ldi	r26, 0x96	; 150
    1404:	3a 07       	cpc	r19, r26
    1406:	a0 e0       	ldi	r26, 0x00	; 0
    1408:	4a 07       	cpc	r20, r26
    140a:	a0 e0       	ldi	r26, 0x00	; 0
    140c:	5a 07       	cpc	r21, r26
    140e:	10 f4       	brcc	.+4      	; 0x1414 <main+0x1238>
    1410:	0c 94 04 02 	jmp	0x408	; 0x408 <main+0x22c>
								setRightSpeed(0);
    1414:	80 e0       	ldi	r24, 0x00	; 0
    1416:	0e 94 63 2a 	call	0x54c6	; 0x54c6 <setRightSpeed>
								setLeftSpeed(0);								
    141a:	80 e0       	ldi	r24, 0x00	; 0
    141c:	0e 94 46 2a 	call	0x548c	; 0x548c <setLeftSpeed>
								demoStartTime = getTime100MicroSec();
    1420:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
    1424:	60 93 64 04 	sts	0x0464, r22
    1428:	70 93 65 04 	sts	0x0465, r23
    142c:	80 93 66 04 	sts	0x0466, r24
    1430:	90 93 67 04 	sts	0x0467, r25
								demoState = 2;							
    1434:	b2 e0       	ldi	r27, 0x02	; 2
    1436:	b0 93 60 04 	sts	0x0460, r27
    143a:	0c 94 04 02 	jmp	0x408	; 0x408 <main+0x22c>
			readBatteryLevel();				// the battery level is updated every two seconds
             		
			if(currentSelector==4 || currentSelector==5) {
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption

				switch(rgbState) {
    143e:	82 30       	cpi	r24, 0x02	; 2
    1440:	09 f0       	breq	.+2      	; 0x1444 <main+0x1268>
    1442:	e0 ca       	rjmp	.-2624   	; 0xa04 <main+0x828>
						pwm_green = 255 - currRand;
						rgbState = 2;
						break;

					case 2:
						pwm_blue = 255 - currRand;
    1444:	8a 2d       	mov	r24, r10
    1446:	80 95       	com	r24
    1448:	80 93 0e 02 	sts	0x020E, r24
						rgbState = 0;
    144c:	10 92 2c 03 	sts	0x032C, r1
						break;
    1450:	d9 ca       	rjmp	.-2638   	; 0xa04 <main+0x828>
						break;

					case 2: // led is off
							// transmission: continuously send my robot id to tell the next robot I turned off the led
							// reception: listen for my robot id and then turn on the led				
						irCommTasks();
    1452:	0e 94 a3 48 	call	0x9146	; 0x9146 <irCommTasks>
						if(irCommDataSent()==1) {
    1456:	0e 94 f4 53 	call	0xa7e8	; 0xa7e8 <irCommDataSent>
    145a:	81 30       	cpi	r24, 0x01	; 1
    145c:	09 f4       	brne	.+2      	; 0x1460 <main+0x1284>
    145e:	85 c3       	rjmp	.+1802   	; 0x1b6a <main+0x198e>
							irCommSendData(irCommRobotId);							
						}
						if(irCommDataAvailable()==1) {
    1460:	0e 94 fc 53 	call	0xa7f8	; 0xa7f8 <irCommDataAvailable>
    1464:	81 30       	cpi	r24, 0x01	; 1
    1466:	09 f0       	breq	.+2      	; 0x146a <main+0x128e>
    1468:	4a cb       	rjmp	.-2412   	; 0xafe <main+0x922>
							if(irCommLedToggle==0) {
    146a:	90 91 f3 04 	lds	r25, 0x04F3
    146e:	99 23       	and	r25, r25
    1470:	09 f0       	breq	.+2      	; 0x1474 <main+0x1298>
    1472:	75 c3       	rjmp	.+1770   	; 0x1b5e <main+0x1982>
								irCommLedToggle = 1;
    1474:	80 93 f3 04 	sts	0x04F3, r24
								updateRedLed(255);
    1478:	8f ef       	ldi	r24, 0xFF	; 255
    147a:	0e 94 91 3f 	call	0x7f22	; 0x7f22 <updateRedLed>
							} else {
								irCommLedToggle = 0;
								updateRedLed(235);
							}
							i = irCommReadData();
    147e:	0e 94 ff 53 	call	0xa7fe	; 0xa7fe <irCommReadData>
    1482:	48 2f       	mov	r20, r24
    1484:	50 e0       	ldi	r21, 0x00	; 0
    1486:	5e 83       	std	Y+6, r21	; 0x06
    1488:	4d 83       	std	Y+5, r20	; 0x05
							if(i == irCommRobotId) {
    148a:	80 91 f1 04 	lds	r24, 0x04F1
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	84 17       	cp	r24, r20
    1492:	95 07       	cpc	r25, r21
    1494:	09 f0       	breq	.+2      	; 0x1498 <main+0x12bc>
    1496:	33 cb       	rjmp	.-2458   	; 0xafe <main+0x922>
								updateBlueLed(255);
    1498:	8f ef       	ldi	r24, 0xFF	; 255
    149a:	0e 94 b9 3f 	call	0x7f72	; 0x7f72 <updateBlueLed>
								updateRedLed(255);
    149e:	8f ef       	ldi	r24, 0xFF	; 255
    14a0:	0e 94 91 3f 	call	0x7f22	; 0x7f22 <updateRedLed>
								updateGreenLed(128);
    14a4:	80 e8       	ldi	r24, 0x80	; 128
    14a6:	0e 94 a5 3f 	call	0x7f4a	; 0x7f4a <updateGreenLed>
								irCommSendData(0xFF);
    14aa:	8f ef       	ldi	r24, 0xFF	; 255
    14ac:	0e 94 eb 53 	call	0xa7d6	; 0xa7d6 <irCommSendData>
								demoState = 3;					
    14b0:	53 e0       	ldi	r21, 0x03	; 3
    14b2:	50 93 60 04 	sts	0x0460, r21
    14b6:	80 91 5c 04 	lds	r24, 0x045C
    14ba:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <main+0x110>

					case 1: // led is on
							// transmission: continuously send the next robot id to tell him to turn on the led
							// reception: listen for 0xFF and then turn off the led; when I receive 0xFF it means the next robot has
							// received its id, thus it has turned on its led
						irCommTasks();
    14be:	0e 94 a3 48 	call	0x9146	; 0x9146 <irCommTasks>
						if(irCommDataSent()==1) {
    14c2:	0e 94 f4 53 	call	0xa7e8	; 0xa7e8 <irCommDataSent>
    14c6:	81 30       	cpi	r24, 0x01	; 1
    14c8:	09 f4       	brne	.+2      	; 0x14cc <main+0x12f0>
    14ca:	b8 c2       	rjmp	.+1392   	; 0x1a3c <main+0x1860>
								irCommSendData(irCommRobotId+1);
							} else {
								irCommSendData(0x00);
							}							
						}
						if(irCommDataAvailable()==1) {
    14cc:	0e 94 fc 53 	call	0xa7f8	; 0xa7f8 <irCommDataAvailable>
    14d0:	81 30       	cpi	r24, 0x01	; 1
    14d2:	09 f0       	breq	.+2      	; 0x14d6 <main+0x12fa>
    14d4:	14 cb       	rjmp	.-2520   	; 0xafe <main+0x922>
							if(irCommLedToggle==0) {
    14d6:	90 91 f3 04 	lds	r25, 0x04F3
    14da:	99 23       	and	r25, r25
    14dc:	09 f0       	breq	.+2      	; 0x14e0 <main+0x1304>
    14de:	4a c3       	rjmp	.+1684   	; 0x1b74 <main+0x1998>
								irCommLedToggle = 1;
    14e0:	80 93 f3 04 	sts	0x04F3, r24
								updateBlueLed(255);
    14e4:	8f ef       	ldi	r24, 0xFF	; 255
    14e6:	0e 94 b9 3f 	call	0x7f72	; 0x7f72 <updateBlueLed>
								updateRedLed(255);
    14ea:	8f ef       	ldi	r24, 0xFF	; 255
    14ec:	0e 94 91 3f 	call	0x7f22	; 0x7f22 <updateRedLed>
								updateGreenLed(128);
    14f0:	80 e8       	ldi	r24, 0x80	; 128
    14f2:	0e 94 a5 3f 	call	0x7f4a	; 0x7f4a <updateGreenLed>
								irCommLedToggle = 0;
								updateBlueLed(255);
								updateRedLed(255);
								updateGreenLed(235);
							}
							i = irCommReadData();
    14f6:	0e 94 ff 53 	call	0xa7fe	; 0xa7fe <irCommReadData>
    14fa:	28 2f       	mov	r18, r24
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	3e 83       	std	Y+6, r19	; 0x06
    1500:	2d 83       	std	Y+5, r18	; 0x05
							if(i == 0xFF) {
    1502:	2f 3f       	cpi	r18, 0xFF	; 255
    1504:	31 05       	cpc	r19, r1
    1506:	09 f0       	breq	.+2      	; 0x150a <main+0x132e>
    1508:	fa ca       	rjmp	.-2572   	; 0xafe <main+0x922>
								demoState = 2;
    150a:	32 e0       	ldi	r19, 0x02	; 2
    150c:	30 93 60 04 	sts	0x0460, r19
								updateBlueLed(255);		
    1510:	8f ef       	ldi	r24, 0xFF	; 255
    1512:	0e 94 b9 3f 	call	0x7f72	; 0x7f72 <updateBlueLed>
								updateRedLed(255);
    1516:	8f ef       	ldi	r24, 0xFF	; 255
    1518:	0e 94 91 3f 	call	0x7f22	; 0x7f22 <updateRedLed>
								updateGreenLed(255);		
    151c:	8f ef       	ldi	r24, 0xFF	; 255
    151e:	0e 94 a5 3f 	call	0x7f4a	; 0x7f4a <updateGreenLed>
    1522:	80 91 5c 04 	lds	r24, 0x045C
    1526:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <main+0x110>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
    152a:	81 30       	cpi	r24, 0x01	; 1
    152c:	11 f0       	breq	.+4      	; 0x1532 <main+0x1356>
    152e:	0c 94 46 02 	jmp	0x48c	; 0x48c <main+0x2b0>
							//pwm_green = 255;
							//pwm_blue = 255;
							break;

						case 1:	// search for a line
							turnOffGreenLeds();
    1532:	0e 94 6a 40 	call	0x80d4	; 0x80d4 <turnOffGreenLeds>
							GREEN_LED2_ON;
    1536:	80 91 0b 01 	lds	r24, 0x010B
    153a:	8b 7f       	andi	r24, 0xFB	; 251
    153c:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED3_ON;
							outOfLine = 0;
    1540:	10 92 62 04 	sts	0x0462, r1
							enableObstacleAvoidance();
    1544:	0e 94 46 3f 	call	0x7e8c	; 0x7e8c <enableObstacleAvoidance>
							setRightSpeed(15);
    1548:	8f e0       	ldi	r24, 0x0F	; 15
    154a:	0e 94 63 2a 	call	0x54c6	; 0x54c6 <setRightSpeed>
							setLeftSpeed(15);
    154e:	8f e0       	ldi	r24, 0x0F	; 15
    1550:	0e 94 46 2a 	call	0x548c	; 0x548c <setLeftSpeed>
							if(proximityResult[9]<LINE_IN_THR || proximityResult[10]<LINE_IN_THR || proximityResult[8]<LINE_IN_THR || proximityResult[11]<LINE_IN_THR) {
    1554:	80 91 7b 02 	lds	r24, 0x027B
    1558:	90 91 7c 02 	lds	r25, 0x027C
    155c:	a1 e0       	ldi	r26, 0x01	; 1
    155e:	80 39       	cpi	r24, 0x90	; 144
    1560:	9a 07       	cpc	r25, r26
    1562:	0c f4       	brge	.+2      	; 0x1566 <main+0x138a>
    1564:	a4 c1       	rjmp	.+840    	; 0x18ae <main+0x16d2>
    1566:	80 91 7d 02 	lds	r24, 0x027D
    156a:	90 91 7e 02 	lds	r25, 0x027E
    156e:	b1 e0       	ldi	r27, 0x01	; 1
    1570:	80 39       	cpi	r24, 0x90	; 144
    1572:	9b 07       	cpc	r25, r27
    1574:	0c f4       	brge	.+2      	; 0x1578 <main+0x139c>
    1576:	9b c1       	rjmp	.+822    	; 0x18ae <main+0x16d2>
    1578:	80 91 79 02 	lds	r24, 0x0279
    157c:	90 91 7a 02 	lds	r25, 0x027A
    1580:	e1 e0       	ldi	r30, 0x01	; 1
    1582:	80 39       	cpi	r24, 0x90	; 144
    1584:	9e 07       	cpc	r25, r30
    1586:	0c f4       	brge	.+2      	; 0x158a <main+0x13ae>
    1588:	92 c1       	rjmp	.+804    	; 0x18ae <main+0x16d2>
    158a:	80 91 7f 02 	lds	r24, 0x027F
    158e:	90 91 80 02 	lds	r25, 0x0280
    1592:	f1 e0       	ldi	r31, 0x01	; 1
    1594:	80 39       	cpi	r24, 0x90	; 144
    1596:	9f 07       	cpc	r25, r31
    1598:	0c f4       	brge	.+2      	; 0x159c <main+0x13c0>
    159a:	89 c1       	rjmp	.+786    	; 0x18ae <main+0x16d2>
									demoStartTime = getTime100MicroSec();
									demoState = 2;
									break;
								}
							} else {
								lineFound = 0;
    159c:	10 92 61 04 	sts	0x0461, r1
    15a0:	0c 94 46 02 	jmp	0x48c	; 0x48c <main+0x2b0>

			case 11: 	// sync-react demo using the IR local communication (2 robots only): the robots move around with obstacle avoidance
						// enabled and when they detect each other they try to align towards the same direction rotating in place
				switch(demoState) {
					case 0:
						irCommInit();
    15a4:	0e 94 bc 47 	call	0x8f78	; 0x8f78 <irCommInit>
						demoState = 1;
    15a8:	20 92 60 04 	sts	0x0460, r2
    15ac:	80 91 5c 04 	lds	r24, 0x045C
						break;
    15b0:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <main+0x110>
							demoState = 1;
						}
						break;

					case 3:	// rotate right
						irCommTasks();
    15b4:	0e 94 a3 48 	call	0x9146	; 0x9146 <irCommTasks>
						if(theta <= targetAngle) {
    15b8:	60 91 7f 04 	lds	r22, 0x047F
    15bc:	70 91 80 04 	lds	r23, 0x0480
    15c0:	80 91 81 04 	lds	r24, 0x0481
    15c4:	90 91 82 04 	lds	r25, 0x0482
    15c8:	2f 81       	ldd	r18, Y+7	; 0x07
    15ca:	38 85       	ldd	r19, Y+8	; 0x08
    15cc:	49 85       	ldd	r20, Y+9	; 0x09
    15ce:	5a 85       	ldd	r21, Y+10	; 0x0a
    15d0:	0e 94 de 54 	call	0xa9bc	; 0xa9bc <__cmpsf2>
    15d4:	18 16       	cp	r1, r24
    15d6:	0c f4       	brge	.+2      	; 0x15da <main+0x13fe>
    15d8:	92 ca       	rjmp	.-2780   	; 0xafe <main+0x922>
							setLeftSpeed(0);
    15da:	80 e0       	ldi	r24, 0x00	; 0
    15dc:	0e 94 46 2a 	call	0x548c	; 0x548c <setLeftSpeed>
							setRightSpeed(0);
    15e0:	80 e0       	ldi	r24, 0x00	; 0
    15e2:	0e 94 63 2a 	call	0x54c6	; 0x54c6 <setRightSpeed>
							demoState = 2;
    15e6:	82 e0       	ldi	r24, 0x02	; 2
    15e8:	80 93 60 04 	sts	0x0460, r24
							demoStartTime = getTime100MicroSec();
    15ec:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
    15f0:	60 93 64 04 	sts	0x0464, r22
    15f4:	70 93 65 04 	sts	0x0465, r23
    15f8:	80 93 66 04 	sts	0x0466, r24
    15fc:	90 93 67 04 	sts	0x0467, r25
    1600:	80 91 5c 04 	lds	r24, 0x045C
    1604:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <main+0x110>
						demoState = 2;
						demoStartTime = getTime100MicroSec();
						break;

					case 2:
						irCommTasks();
    1608:	0e 94 a3 48 	call	0x9146	; 0x9146 <irCommTasks>
						if(irCommDataSent()==1) {
    160c:	0e 94 f4 53 	call	0xa7e8	; 0xa7e8 <irCommDataSent>
    1610:	81 30       	cpi	r24, 0x01	; 1
    1612:	09 f4       	brne	.+2      	; 0x1616 <main+0x143a>
    1614:	2a c3       	rjmp	.+1620   	; 0x1c6a <main+0x1a8e>
							angleDegEncode = (unsigned char)((float)angleDeg*0.7084);
							irCommSendData(angleDegEncode);
						}
						if(irCommDataAvailable()==1) {
    1616:	0e 94 fc 53 	call	0xa7f8	; 0xa7f8 <irCommDataAvailable>
    161a:	81 30       	cpi	r24, 0x01	; 1
    161c:	09 f4       	brne	.+2      	; 0x1620 <main+0x1444>
    161e:	c2 c2       	rjmp	.+1412   	; 0x1ba4 <main+0x19c8>
									demoState = 3;
								}								
							}

						}
						if((getTime100MicroSec()-demoStartTime) >= (PAUSE_5_SEC)) {
    1620:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
    1624:	9b 01       	movw	r18, r22
    1626:	ac 01       	movw	r20, r24
    1628:	80 91 64 04 	lds	r24, 0x0464
    162c:	90 91 65 04 	lds	r25, 0x0465
    1630:	a0 91 66 04 	lds	r26, 0x0466
    1634:	b0 91 67 04 	lds	r27, 0x0467
    1638:	28 1b       	sub	r18, r24
    163a:	39 0b       	sbc	r19, r25
    163c:	4a 0b       	sbc	r20, r26
    163e:	5b 0b       	sbc	r21, r27
    1640:	2d 3c       	cpi	r18, 0xCD	; 205
    1642:	6b eb       	ldi	r22, 0xBB	; 187
    1644:	36 07       	cpc	r19, r22
    1646:	60 e0       	ldi	r22, 0x00	; 0
    1648:	46 07       	cpc	r20, r22
    164a:	60 e0       	ldi	r22, 0x00	; 0
    164c:	56 07       	cpc	r21, r22
    164e:	08 f4       	brcc	.+2      	; 0x1652 <main+0x1476>
    1650:	56 ca       	rjmp	.-2900   	; 0xafe <main+0x922>
									} else {
										irCommSendData(0xFF);
									}
								} else {
									if(i == (unsigned int)(irCommRobotId-1)) {
										demoState = 1;
    1652:	20 92 60 04 	sts	0x0460, r2
    1656:	80 91 5c 04 	lds	r24, 0x045C
    165a:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <main+0x110>
						pwm_red = 255 - currRand;	
						rgbState = 1;
						break;

					case 1:
						pwm_green = 255 - currRand;
    165e:	8a 2d       	mov	r24, r10
    1660:	80 95       	com	r24
    1662:	80 93 0d 02 	sts	0x020D, r24
						rgbState = 2;
    1666:	62 e0       	ldi	r22, 0x02	; 2
    1668:	60 93 2c 03 	sts	0x032C, r22
						break;
    166c:	cb c9       	rjmp	.-3178   	; 0xa04 <main+0x828>
					}
				} else if(currRand<64) {
					if(pwm_red!=255 && pwm_blue!=255) {
						pwm_green = 255;
					}
				} else if (currRand<96) {
    166e:	a0 e6       	ldi	r26, 0x60	; 96
    1670:	aa 16       	cp	r10, r26
    1672:	b1 04       	cpc	r11, r1
    1674:	08 f0       	brcs	.+2      	; 0x1678 <main+0x149c>
    1676:	61 c8       	rjmp	.-3902   	; 0x73a <main+0x55e>
					if(pwm_red!=255 && pwm_green!=255) {
    1678:	80 91 0c 02 	lds	r24, 0x020C
    167c:	8f 3f       	cpi	r24, 0xFF	; 255
    167e:	09 f4       	brne	.+2      	; 0x1682 <main+0x14a6>
    1680:	5c c8       	rjmp	.-3912   	; 0x73a <main+0x55e>
    1682:	80 91 0d 02 	lds	r24, 0x020D
    1686:	8f 3f       	cpi	r24, 0xFF	; 255
    1688:	09 f4       	brne	.+2      	; 0x168c <main+0x14b0>
    168a:	57 c8       	rjmp	.-3922   	; 0x73a <main+0x55e>
						pwm_blue = 255;
    168c:	10 93 0e 02 	sts	0x020E, r17
    1690:	54 c8       	rjmp	.-3928   	; 0x73a <main+0x55e>
							//pwm_green = 255;
							//pwm_blue = 0;
							break;
						
						case 4: // go back from charger
							turnOffGreenLeds();
    1692:	0e 94 6a 40 	call	0x80d4	; 0x80d4 <turnOffGreenLeds>
							GREEN_LED6_ON;
    1696:	80 91 0b 01 	lds	r24, 0x010B
    169a:	8f 7b       	andi	r24, 0xBF	; 191
    169c:	80 93 0b 01 	sts	0x010B, r24
							GREEN_LED7_ON;
    16a0:	80 91 0b 01 	lds	r24, 0x010B
    16a4:	8f 77       	andi	r24, 0x7F	; 127
    16a6:	80 93 0b 01 	sts	0x010B, r24
							demoEndTime = getTime100MicroSec();
    16aa:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
    16ae:	9b 01       	movw	r18, r22
    16b0:	ac 01       	movw	r20, r24
    16b2:	60 93 6c 04 	sts	0x046C, r22
    16b6:	70 93 6d 04 	sts	0x046D, r23
    16ba:	80 93 6e 04 	sts	0x046E, r24
    16be:	90 93 6f 04 	sts	0x046F, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_1_SEC)) {
    16c2:	80 91 64 04 	lds	r24, 0x0464
    16c6:	90 91 65 04 	lds	r25, 0x0465
    16ca:	a0 91 66 04 	lds	r26, 0x0466
    16ce:	b0 91 67 04 	lds	r27, 0x0467
    16d2:	28 1b       	sub	r18, r24
    16d4:	39 0b       	sbc	r19, r25
    16d6:	4a 0b       	sbc	r20, r26
    16d8:	5b 0b       	sbc	r21, r27
    16da:	2f 38       	cpi	r18, 0x8F	; 143
    16dc:	f5 e2       	ldi	r31, 0x25	; 37
    16de:	3f 07       	cpc	r19, r31
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	4f 07       	cpc	r20, r31
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	5f 07       	cpc	r21, r31
    16e8:	10 f4       	brcc	.+4      	; 0x16ee <main+0x1512>
    16ea:	0c 94 46 02 	jmp	0x48c	; 0x48c <main+0x2b0>
								setRightSpeed(20);
    16ee:	84 e1       	ldi	r24, 0x14	; 20
    16f0:	0e 94 63 2a 	call	0x54c6	; 0x54c6 <setRightSpeed>
								setLeftSpeed(-20);								
    16f4:	8c ee       	ldi	r24, 0xEC	; 236
    16f6:	0e 94 46 2a 	call	0x548c	; 0x548c <setLeftSpeed>
								demoStartTime = getTime100MicroSec();
    16fa:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
    16fe:	60 93 64 04 	sts	0x0464, r22
    1702:	70 93 65 04 	sts	0x0465, r23
    1706:	80 93 66 04 	sts	0x0466, r24
    170a:	90 93 67 04 	sts	0x0467, r25
								demoState = 5;							
    170e:	85 e0       	ldi	r24, 0x05	; 5
    1710:	98 2e       	mov	r9, r24
    1712:	90 92 60 04 	sts	0x0460, r9
    1716:	0c 94 46 02 	jmp	0x48c	; 0x48c <main+0x2b0>
							//pwm_green = 0;
							//pwm_blue = 255;
							break;

						case 2:	// line found, follow it
							turnOffGreenLeds();
    171a:	0e 94 6a 40 	call	0x80d4	; 0x80d4 <turnOffGreenLeds>
							GREEN_LED4_ON;
    171e:	80 91 0b 01 	lds	r24, 0x010B
    1722:	8f 7e       	andi	r24, 0xEF	; 239
    1724:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED5_ON;
							disableObstacleAvoidance();
    1728:	0e 94 4a 3f 	call	0x7e94	; 0x7e94 <disableObstacleAvoidance>

							demoEndTime = getTime100MicroSec();
    172c:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
    1730:	9b 01       	movw	r18, r22
    1732:	ac 01       	movw	r20, r24
    1734:	60 93 6c 04 	sts	0x046C, r22
    1738:	70 93 6d 04 	sts	0x046D, r23
    173c:	80 93 6e 04 	sts	0x046E, r24
    1740:	90 93 6f 04 	sts	0x046F, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {	// the robot seems to be blocked somehow
    1744:	80 91 64 04 	lds	r24, 0x0464
    1748:	90 91 65 04 	lds	r25, 0x0465
    174c:	a0 91 66 04 	lds	r26, 0x0466
    1750:	b0 91 67 04 	lds	r27, 0x0467
    1754:	28 1b       	sub	r18, r24
    1756:	39 0b       	sbc	r19, r25
    1758:	4a 0b       	sbc	r20, r26
    175a:	5b 0b       	sbc	r21, r27
    175c:	23 33       	cpi	r18, 0x33	; 51
    175e:	6f ee       	ldi	r22, 0xEF	; 239
    1760:	36 07       	cpc	r19, r22
    1762:	62 e0       	ldi	r22, 0x02	; 2
    1764:	46 07       	cpc	r20, r22
    1766:	60 e0       	ldi	r22, 0x00	; 0
    1768:	56 07       	cpc	r21, r22
    176a:	08 f0       	brcs	.+2      	; 0x176e <main+0x1592>
    176c:	ce c1       	rjmp	.+924    	; 0x1b0a <main+0x192e>
								demoStartTime = getTime100MicroSec();
								demoState = 4;
								break;
							}

							if(CHARGE_ON) {
    176e:	80 91 03 01 	lds	r24, 0x0103
    1772:	84 ff       	sbrs	r24, 4
    1774:	74 c1       	rjmp	.+744    	; 0x1a5e <main+0x1882>
								outOfLine = 0;
    1776:	10 92 62 04 	sts	0x0462, r1
								chargeContact++;
    177a:	80 91 63 04 	lds	r24, 0x0463
    177e:	8f 5f       	subi	r24, 0xFF	; 255
    1780:	80 93 63 04 	sts	0x0463, r24
								if(chargeContact > 20) {
    1784:	85 31       	cpi	r24, 0x15	; 21
    1786:	08 f0       	brcs	.+2      	; 0x178a <main+0x15ae>
    1788:	b0 c2       	rjmp	.+1376   	; 0x1cea <main+0x1b0e>
    178a:	80 91 7b 02 	lds	r24, 0x027B
    178e:	90 91 7c 02 	lds	r25, 0x027C
								} else {
									outOfLine = 0;
								}
							}
							
							if(proximityResult[8]<LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR && proximityResult[11]>LINE_OUT_THR) {	// left ground is the only within the black line => turn left
    1792:	20 91 79 02 	lds	r18, 0x0279
    1796:	30 91 7a 02 	lds	r19, 0x027A
    179a:	e1 e0       	ldi	r30, 0x01	; 1
    179c:	22 3c       	cpi	r18, 0xC2	; 194
    179e:	3e 07       	cpc	r19, r30
    17a0:	ac f4       	brge	.+42     	; 0x17cc <main+0x15f0>
    17a2:	f1 e0       	ldi	r31, 0x01	; 1
    17a4:	83 3c       	cpi	r24, 0xC3	; 195
    17a6:	9f 07       	cpc	r25, r31
    17a8:	8c f0       	brlt	.+34     	; 0x17cc <main+0x15f0>
    17aa:	40 91 7d 02 	lds	r20, 0x027D
    17ae:	50 91 7e 02 	lds	r21, 0x027E
    17b2:	61 e0       	ldi	r22, 0x01	; 1
    17b4:	43 3c       	cpi	r20, 0xC3	; 195
    17b6:	56 07       	cpc	r21, r22
    17b8:	4c f0       	brlt	.+18     	; 0x17cc <main+0x15f0>
    17ba:	40 91 7f 02 	lds	r20, 0x027F
    17be:	50 91 80 02 	lds	r21, 0x0280
    17c2:	a1 e0       	ldi	r26, 0x01	; 1
    17c4:	43 3c       	cpi	r20, 0xC3	; 195
    17c6:	5a 07       	cpc	r21, r26
    17c8:	0c f0       	brlt	.+2      	; 0x17cc <main+0x15f0>
    17ca:	7c c3       	rjmp	.+1784   	; 0x1ec4 <main+0x1ce8>
								setLeftSpeed(-10);
								setRightSpeed(15);
							} else if(proximityResult[11]<LINE_OUT_THR && proximityResult[8]>LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {	// right ground is the only within the black line => turn right
    17cc:	40 91 7f 02 	lds	r20, 0x027F
    17d0:	50 91 80 02 	lds	r21, 0x0280
    17d4:	b1 e0       	ldi	r27, 0x01	; 1
    17d6:	42 3c       	cpi	r20, 0xC2	; 194
    17d8:	5b 07       	cpc	r21, r27
    17da:	0c f0       	brlt	.+2      	; 0x17de <main+0x1602>
    17dc:	19 c1       	rjmp	.+562    	; 0x1a10 <main+0x1834>
    17de:	e1 e0       	ldi	r30, 0x01	; 1
    17e0:	23 3c       	cpi	r18, 0xC3	; 195
    17e2:	3e 07       	cpc	r19, r30
    17e4:	0c f4       	brge	.+2      	; 0x17e8 <main+0x160c>
    17e6:	14 c1       	rjmp	.+552    	; 0x1a10 <main+0x1834>
    17e8:	f1 e0       	ldi	r31, 0x01	; 1
    17ea:	83 3c       	cpi	r24, 0xC3	; 195
    17ec:	9f 07       	cpc	r25, r31
    17ee:	0c f4       	brge	.+2      	; 0x17f2 <main+0x1616>
    17f0:	14 c1       	rjmp	.+552    	; 0x1a1a <main+0x183e>
    17f2:	80 91 7d 02 	lds	r24, 0x027D
    17f6:	90 91 7e 02 	lds	r25, 0x027E
    17fa:	21 e0       	ldi	r18, 0x01	; 1
    17fc:	83 3c       	cpi	r24, 0xC3	; 195
    17fe:	92 07       	cpc	r25, r18
    1800:	0c f0       	brlt	.+2      	; 0x1804 <main+0x1628>
    1802:	7a c3       	rjmp	.+1780   	; 0x1ef8 <main+0x1d1c>
								setLeftSpeed(15);
								setRightSpeed(-10);
							} else if(proximityResult[9]>LINE_OUT_THR) {	// center left is leaving the line => turn right
								setLeftSpeed(15);
    1804:	8f e0       	ldi	r24, 0x0F	; 15
    1806:	0e 94 46 2a 	call	0x548c	; 0x548c <setLeftSpeed>
								setRightSpeed(-5);
    180a:	8b ef       	ldi	r24, 0xFB	; 251
    180c:	0e 94 63 2a 	call	0x54c6	; 0x54c6 <setRightSpeed>
    1810:	0c 94 46 02 	jmp	0x48c	; 0x48c <main+0x2b0>
							//pwm_green = 255;
							//pwm_blue = 0;
							break;

						case 3:	// charge for some time
							turnOffGreenLeds();
    1814:	0e 94 6a 40 	call	0x80d4	; 0x80d4 <turnOffGreenLeds>
							GREEN_LED6_ON;
    1818:	80 91 0b 01 	lds	r24, 0x010B
    181c:	8f 7b       	andi	r24, 0xBF	; 191
    181e:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED7_ON;
							demoEndTime = getTime100MicroSec();
    1822:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
    1826:	9b 01       	movw	r18, r22
    1828:	ac 01       	movw	r20, r24
    182a:	60 93 6c 04 	sts	0x046C, r22
    182e:	70 93 6d 04 	sts	0x046D, r23
    1832:	80 93 6e 04 	sts	0x046E, r24
    1836:	90 93 6f 04 	sts	0x046F, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_30_SEC)) {
    183a:	80 91 64 04 	lds	r24, 0x0464
    183e:	90 91 65 04 	lds	r25, 0x0465
    1842:	a0 91 66 04 	lds	r26, 0x0466
    1846:	b0 91 67 04 	lds	r27, 0x0467
    184a:	28 1b       	sub	r18, r24
    184c:	39 0b       	sbc	r19, r25
    184e:	4a 0b       	sbc	r20, r26
    1850:	5b 0b       	sbc	r21, r27
    1852:	2d 3c       	cpi	r18, 0xCD	; 205
    1854:	66 e6       	ldi	r22, 0x66	; 102
    1856:	36 07       	cpc	r19, r22
    1858:	64 e0       	ldi	r22, 0x04	; 4
    185a:	46 07       	cpc	r20, r22
    185c:	60 e0       	ldi	r22, 0x00	; 0
    185e:	56 07       	cpc	r21, r22
    1860:	08 f4       	brcc	.+2      	; 0x1864 <main+0x1688>
    1862:	a9 c0       	rjmp	.+338    	; 0x19b6 <main+0x17da>
								if(batteryLevel<890) {//860) {	// stay in charge if too much discharged (consider the fact that the robot
    1864:	80 91 cd 02 	lds	r24, 0x02CD
    1868:	90 91 ce 02 	lds	r25, 0x02CE
    186c:	a3 e0       	ldi	r26, 0x03	; 3
    186e:	8a 37       	cpi	r24, 0x7A	; 122
    1870:	9a 07       	cpc	r25, r26
    1872:	08 f4       	brcc	.+2      	; 0x1876 <main+0x169a>
    1874:	ad c0       	rjmp	.+346    	; 0x19d0 <main+0x17f4>
														// is still in charge thus the battery value measured is higher)
									demoStartTime = getTime100MicroSec();
									break;
								} else {
									setRightSpeed(-13);
    1876:	83 ef       	ldi	r24, 0xF3	; 243
    1878:	0e 94 63 2a 	call	0x54c6	; 0x54c6 <setRightSpeed>
									setLeftSpeed(-13);
    187c:	83 ef       	ldi	r24, 0xF3	; 243
    187e:	0e 94 46 2a 	call	0x548c	; 0x548c <setLeftSpeed>
									demoStartTime = getTime100MicroSec();
    1882:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
    1886:	60 93 64 04 	sts	0x0464, r22
    188a:	70 93 65 04 	sts	0x0465, r23
    188e:	80 93 66 04 	sts	0x0466, r24
    1892:	90 93 67 04 	sts	0x0467, r25
									demoState = 4;
    1896:	b4 e0       	ldi	r27, 0x04	; 4
    1898:	b0 93 60 04 	sts	0x0460, r27
									break;
    189c:	0c 94 46 02 	jmp	0x48c	; 0x48c <main+0x2b0>
				currRand2 = rand()%128;
				if(currRand2<32) {
					pwm_red = 255;
				} else if(currRand2<64) {
					pwm_green = 255;
				} else if (currRand2<96) {
    18a0:	80 36       	cpi	r24, 0x60	; 96
    18a2:	91 05       	cpc	r25, r1
    18a4:	08 f0       	brcs	.+2      	; 0x18a8 <main+0x16cc>
    18a6:	14 c9       	rjmp	.-3544   	; 0xad0 <main+0x8f4>
					pwm_blue = 255;
    18a8:	10 93 0e 02 	sts	0x020E, r17
    18ac:	11 c9       	rjmp	.-3550   	; 0xad0 <main+0x8f4>
							outOfLine = 0;
							enableObstacleAvoidance();
							setRightSpeed(15);
							setLeftSpeed(15);
							if(proximityResult[9]<LINE_IN_THR || proximityResult[10]<LINE_IN_THR || proximityResult[8]<LINE_IN_THR || proximityResult[11]<LINE_IN_THR) {
								lineFound++;
    18ae:	80 91 61 04 	lds	r24, 0x0461
    18b2:	8f 5f       	subi	r24, 0xFF	; 255
    18b4:	80 93 61 04 	sts	0x0461, r24
								if(lineFound > 10) {
    18b8:	8b 30       	cpi	r24, 0x0B	; 11
    18ba:	10 f4       	brcc	.+4      	; 0x18c0 <main+0x16e4>
    18bc:	0c 94 46 02 	jmp	0x48c	; 0x48c <main+0x2b0>
									outOfLine = 0;
    18c0:	10 92 62 04 	sts	0x0462, r1
									chargeContact = 0;
    18c4:	10 92 63 04 	sts	0x0463, r1
									demoStartTime = getTime100MicroSec();
    18c8:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
    18cc:	60 93 64 04 	sts	0x0464, r22
    18d0:	70 93 65 04 	sts	0x0465, r23
    18d4:	80 93 66 04 	sts	0x0466, r24
    18d8:	90 93 67 04 	sts	0x0467, r25
									demoState = 2;
    18dc:	92 e0       	ldi	r25, 0x02	; 2
    18de:	99 2e       	mov	r9, r25
    18e0:	90 92 60 04 	sts	0x0460, r9
									break;
    18e4:	0c 94 46 02 	jmp	0x48c	; 0x48c <main+0x2b0>
							}

							currRand = rand()% 200;
							if(currRand<50) {
								pwm_red = 255;
							} else if(currRand<100) {
    18e8:	94 e6       	ldi	r25, 0x64	; 100
    18ea:	a9 16       	cp	r10, r25
    18ec:	b1 04       	cpc	r11, r1
    18ee:	08 f0       	brcs	.+2      	; 0x18f2 <main+0x1716>
    18f0:	86 c0       	rjmp	.+268    	; 0x19fe <main+0x1822>
								pwm_green = 255;
    18f2:	10 93 0d 02 	sts	0x020D, r17
    18f6:	80 91 0c 02 	lds	r24, 0x020C
    18fa:	de c9       	rjmp	.-3140   	; 0xcb8 <main+0xadc>

							currRand = rand()% 128;
							if(currRand > 95) {
								pwm_blue = 255;
							} else {
								pwm_blue = currRand;
    18fc:	80 93 0e 02 	sts	0x020E, r24
    1900:	cc c9       	rjmp	.-3176   	; 0xc9a <main+0xabe>

							currRand = rand()% 128;
							if(currRand > 95) {
								pwm_green = 255;
							} else {
								pwm_green = currRand;
    1902:	80 93 0d 02 	sts	0x020D, r24
    1906:	bd c9       	rjmp	.-3206   	; 0xc82 <main+0xaa6>
							turnOffGreenLeds();					
							currRand = rand()% 128;	// 0 to 255 is the maximum, we use 0 to 127 to get brighter colors
							if(currRand > 95) {
								pwm_red = 255;
							} else {
								pwm_red = currRand;
    1908:	80 93 0c 02 	sts	0x020C, r24
    190c:	ae c9       	rjmp	.-3236   	; 0xc6a <main+0xa8e>
					} else if(pwm_left_desired > pwm_intermediate_left_desired) {
						pwm_intermediate_left_desired += speedStep;
						if(pwm_intermediate_left_desired > pwm_left_desired) {
							pwm_intermediate_left_desired = pwm_left_desired;
						}
					} else if(pwm_left_desired < pwm_intermediate_left_desired) {
    190e:	82 17       	cp	r24, r18
    1910:	93 07       	cpc	r25, r19
    1912:	14 f0       	brlt	.+4      	; 0x1918 <main+0x173c>
    1914:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <main+0xe0>
						pwm_intermediate_left_desired -= speedStep;
    1918:	40 91 17 02 	lds	r20, 0x0217
    191c:	24 1b       	sub	r18, r20
    191e:	31 09       	sbc	r19, r1
    1920:	30 93 10 03 	sts	0x0310, r19
    1924:	20 93 0f 03 	sts	0x030F, r18
						if(pwm_intermediate_left_desired < pwm_left_desired) {
    1928:	28 17       	cp	r18, r24
    192a:	39 07       	cpc	r19, r25
    192c:	14 f0       	brlt	.+4      	; 0x1932 <main+0x1756>
    192e:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <main+0xe0>
    1932:	0c 94 44 03 	jmp	0x688	; 0x688 <main+0x4ac>
					} else if(pwm_right_desired > pwm_intermediate_right_desired) {
						pwm_intermediate_right_desired += speedStep;
						if(pwm_intermediate_right_desired > pwm_right_desired) {
							pwm_intermediate_right_desired = pwm_right_desired;
						}
					} else if(pwm_right_desired < pwm_intermediate_right_desired) {
    1936:	82 17       	cp	r24, r18
    1938:	93 07       	cpc	r25, r19
    193a:	14 f0       	brlt	.+4      	; 0x1940 <main+0x1764>
    193c:	0c 94 1f 03 	jmp	0x63e	; 0x63e <main+0x462>
						pwm_intermediate_right_desired -= speedStep;
    1940:	40 91 17 02 	lds	r20, 0x0217
    1944:	24 1b       	sub	r18, r20
    1946:	31 09       	sbc	r19, r1
    1948:	30 93 0e 03 	sts	0x030E, r19
    194c:	20 93 0d 03 	sts	0x030D, r18
						if(pwm_intermediate_right_desired < pwm_right_desired) {
    1950:	28 17       	cp	r18, r24
    1952:	39 07       	cpc	r19, r25
    1954:	14 f0       	brlt	.+4      	; 0x195a <main+0x177e>
    1956:	0c 94 1f 03 	jmp	0x63e	; 0x63e <main+0x462>
    195a:	0c 94 1b 03 	jmp	0x636	; 0x636 <main+0x45a>
								}
								setGreenLed(greenLedState, 1);
								demoEndTime = getTime100MicroSec();											
							}
							if((getTime100MicroSec()-demoStartTime2) >= (PAUSE_2_SEC)) {
								rgbLedState = 1;
    195e:	20 92 7b 04 	sts	0x047B, r2
								demoStartTime2 = getTime100MicroSec();
    1962:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
    1966:	60 93 68 04 	sts	0x0468, r22
    196a:	70 93 69 04 	sts	0x0469, r23
    196e:	80 93 6a 04 	sts	0x046A, r24
    1972:	90 93 6b 04 	sts	0x046B, r25
    1976:	0c 94 46 02 	jmp	0x48c	; 0x48c <main+0x2b0>
						case 0:							
							pwm_red = 255;
							pwm_green = 255;
							pwm_blue = 255;
							if((getTime100MicroSec()-demoEndTime) >= (PAUSE_100_MSEC)) {
								setGreenLed(greenLedState, 0);
    197a:	80 91 7a 04 	lds	r24, 0x047A
    197e:	60 e0       	ldi	r22, 0x00	; 0
    1980:	0e 94 cd 3f 	call	0x7f9a	; 0x7f9a <setGreenLed>
								greenLedState++;
    1984:	80 91 7a 04 	lds	r24, 0x047A
    1988:	8f 5f       	subi	r24, 0xFF	; 255
    198a:	80 93 7a 04 	sts	0x047A, r24
								if(greenLedState > 7) {
    198e:	88 30       	cpi	r24, 0x08	; 8
    1990:	18 f0       	brcs	.+6      	; 0x1998 <main+0x17bc>
									greenLedState = 0;
    1992:	10 92 7a 04 	sts	0x047A, r1
    1996:	80 e0       	ldi	r24, 0x00	; 0
								}
								setGreenLed(greenLedState, 1);
    1998:	61 e0       	ldi	r22, 0x01	; 1
    199a:	0e 94 cd 3f 	call	0x7f9a	; 0x7f9a <setGreenLed>
								demoEndTime = getTime100MicroSec();											
    199e:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
    19a2:	60 93 6c 04 	sts	0x046C, r22
    19a6:	70 93 6d 04 	sts	0x046D, r23
    19aa:	80 93 6e 04 	sts	0x046E, r24
    19ae:	90 93 6f 04 	sts	0x046F, r25
    19b2:	0c 94 2c 02 	jmp	0x458	; 0x458 <main+0x27c>
									demoStartTime = getTime100MicroSec();
									demoState = 4;
									break;
								}
							}
							if(!CHARGE_ON) {
    19b6:	80 91 03 01 	lds	r24, 0x0103
    19ba:	84 ff       	sbrs	r24, 4
    19bc:	02 c0       	rjmp	.+4      	; 0x19c2 <main+0x17e6>
    19be:	0c 94 46 02 	jmp	0x48c	; 0x48c <main+0x2b0>
								chargeContact = 0;
    19c2:	10 92 63 04 	sts	0x0463, r1
								outOfLine = 0;
    19c6:	10 92 62 04 	sts	0x0462, r1
								demoState = 2;
    19ca:	e2 e0       	ldi	r30, 0x02	; 2
    19cc:	e0 93 60 04 	sts	0x0460, r30
								demoStartTime = getTime100MicroSec();
    19d0:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
    19d4:	60 93 64 04 	sts	0x0464, r22
    19d8:	70 93 65 04 	sts	0x0465, r23
    19dc:	80 93 66 04 	sts	0x0466, r24
    19e0:	90 93 67 04 	sts	0x0467, r25
								break;						
    19e4:	0c 94 46 02 	jmp	0x48c	; 0x48c <main+0x2b0>
						break;

					case 2:
						irCommTasks();
						if(irCommDataSent()==1) {							
							demoState = 1;
    19e8:	80 93 60 04 	sts	0x0460, r24
							if(irCommRxByteExpected<255) {
    19ec:	80 91 1f 05 	lds	r24, 0x051F
    19f0:	8f 3f       	cpi	r24, 0xFF	; 255
    19f2:	09 f4       	brne	.+2      	; 0x19f6 <main+0x181a>
    19f4:	52 c1       	rjmp	.+676    	; 0x1c9a <main+0x1abe>
								irCommRxByteExpected++;
    19f6:	8f 5f       	subi	r24, 0xFF	; 255
    19f8:	80 93 1f 05 	sts	0x051F, r24
    19fc:	e8 c9       	rjmp	.-3120   	; 0xdce <main+0xbf2>
							currRand = rand()% 200;
							if(currRand<50) {
								pwm_red = 255;
							} else if(currRand<100) {
								pwm_green = 255;
							} else if (currRand<150) {	
    19fe:	a6 e9       	ldi	r26, 0x96	; 150
    1a00:	aa 16       	cp	r10, r26
    1a02:	b1 04       	cpc	r11, r1
    1a04:	10 f4       	brcc	.+4      	; 0x1a0a <main+0x182e>
								pwm_blue = 255;
    1a06:	10 93 0e 02 	sts	0x020E, r17
    1a0a:	80 91 0c 02 	lds	r24, 0x020C
    1a0e:	54 c9       	rjmp	.-3416   	; 0xcb8 <main+0xadc>
								setLeftSpeed(-10);
								setRightSpeed(15);
							} else if(proximityResult[11]<LINE_OUT_THR && proximityResult[8]>LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {	// right ground is the only within the black line => turn right
								setLeftSpeed(15);
								setRightSpeed(-10);
							} else if(proximityResult[9]>LINE_OUT_THR) {	// center left is leaving the line => turn right
    1a10:	31 e0       	ldi	r19, 0x01	; 1
    1a12:	83 3c       	cpi	r24, 0xC3	; 195
    1a14:	93 07       	cpc	r25, r19
    1a16:	0c f0       	brlt	.+2      	; 0x1a1a <main+0x183e>
    1a18:	f5 ce       	rjmp	.-534    	; 0x1804 <main+0x1628>
								setRightSpeed(-5);
								//outOfLine++;
								//if(outOfLine > 250) {
								//	demoState = 1;
								//}
							} else if(proximityResult[10]>LINE_OUT_THR) {	// center right is leaving the lnie => turn left
    1a1a:	80 91 7d 02 	lds	r24, 0x027D
    1a1e:	90 91 7e 02 	lds	r25, 0x027E
    1a22:	41 e0       	ldi	r20, 0x01	; 1
    1a24:	83 3c       	cpi	r24, 0xC3	; 195
    1a26:	94 07       	cpc	r25, r20
    1a28:	0c f4       	brge	.+2      	; 0x1a2c <main+0x1850>
    1a2a:	b4 c0       	rjmp	.+360    	; 0x1b94 <main+0x19b8>
								setLeftSpeed(-5);
    1a2c:	8b ef       	ldi	r24, 0xFB	; 251
    1a2e:	0e 94 46 2a 	call	0x548c	; 0x548c <setLeftSpeed>
								setRightSpeed(15);
    1a32:	8f e0       	ldi	r24, 0x0F	; 15
    1a34:	0e 94 63 2a 	call	0x54c6	; 0x54c6 <setRightSpeed>
    1a38:	0c 94 46 02 	jmp	0x48c	; 0x48c <main+0x2b0>
							// transmission: continuously send the next robot id to tell him to turn on the led
							// reception: listen for 0xFF and then turn off the led; when I receive 0xFF it means the next robot has
							// received its id, thus it has turned on its led
						irCommTasks();
						if(irCommDataSent()==1) {
							if(irCommRobotId < (irCommRobotsNum-1)) {
    1a3c:	80 91 f1 04 	lds	r24, 0x04F1
    1a40:	48 2f       	mov	r20, r24
    1a42:	50 e0       	ldi	r21, 0x00	; 0
    1a44:	20 91 f2 04 	lds	r18, 0x04F2
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	21 50       	subi	r18, 0x01	; 1
    1a4c:	30 40       	sbci	r19, 0x00	; 0
    1a4e:	42 17       	cp	r20, r18
    1a50:	53 07       	cpc	r21, r19
    1a52:	0c f0       	brlt	.+2      	; 0x1a56 <main+0x187a>
    1a54:	9b c0       	rjmp	.+310    	; 0x1b8c <main+0x19b0>
								irCommSendData(irCommRobotId+1);
    1a56:	8f 5f       	subi	r24, 0xFF	; 255
    1a58:	0e 94 eb 53 	call	0xa7d6	; 0xa7d6 <irCommSendData>
    1a5c:	37 cd       	rjmp	.-1426   	; 0x14cc <main+0x12f0>
									demoStartTime = getTime100MicroSec();
									demoState = 3;
									break;
								}
							} else {
								chargeContact = 0;
    1a5e:	10 92 63 04 	sts	0x0463, r1

								if(proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {
    1a62:	80 91 7b 02 	lds	r24, 0x027B
    1a66:	90 91 7c 02 	lds	r25, 0x027C
    1a6a:	a1 e0       	ldi	r26, 0x01	; 1
    1a6c:	83 3c       	cpi	r24, 0xC3	; 195
    1a6e:	9a 07       	cpc	r25, r26
    1a70:	0c f4       	brge	.+2      	; 0x1a74 <main+0x1898>
    1a72:	60 c0       	rjmp	.+192    	; 0x1b34 <main+0x1958>
    1a74:	20 91 7d 02 	lds	r18, 0x027D
    1a78:	30 91 7e 02 	lds	r19, 0x027E
    1a7c:	b1 e0       	ldi	r27, 0x01	; 1
    1a7e:	23 3c       	cpi	r18, 0xC3	; 195
    1a80:	3b 07       	cpc	r19, r27
    1a82:	0c f4       	brge	.+2      	; 0x1a86 <main+0x18aa>
    1a84:	57 c0       	rjmp	.+174    	; 0x1b34 <main+0x1958>
									outOfLine++;
    1a86:	20 91 62 04 	lds	r18, 0x0462
    1a8a:	2f 5f       	subi	r18, 0xFF	; 255
    1a8c:	20 93 62 04 	sts	0x0462, r18
									if(outOfLine > 250) {
    1a90:	2b 3f       	cpi	r18, 0xFB	; 251
    1a92:	08 f4       	brcc	.+2      	; 0x1a96 <main+0x18ba>
    1a94:	7e ce       	rjmp	.-772    	; 0x1792 <main+0x15b6>
    1a96:	0c 94 8b 03 	jmp	0x716	; 0x716 <main+0x53a>
						irCommTasks();
						if(irCommDataSent()==1) {	
							irCommSendData(irCommRxByteExpected);					
						}
						if(irCommDataAvailable()==1) {							
							i = irCommReadData();
    1a9a:	0e 94 ff 53 	call	0xa7fe	; 0xa7fe <irCommReadData>
    1a9e:	e8 2f       	mov	r30, r24
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	fe 83       	std	Y+6, r31	; 0x06
    1aa4:	ed 83       	std	Y+5, r30	; 0x05
							if(i == irCommRxByteExpected) {
    1aa6:	90 91 1f 05 	lds	r25, 0x051F
    1aaa:	29 2f       	mov	r18, r25
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	2e 17       	cp	r18, r30
    1ab0:	3f 07       	cpc	r19, r31
    1ab2:	09 f4       	brne	.+2      	; 0x1ab6 <main+0x18da>
    1ab4:	47 c1       	rjmp	.+654    	; 0x1d44 <main+0x1b68>
									} else {
										irCommRxByteExpected = 0;
									}
								}
							} else {
								if(irCommRxByteExpected==7) {
    1ab6:	97 30       	cpi	r25, 0x07	; 7
    1ab8:	09 f4       	brne	.+2      	; 0x1abc <main+0x18e0>
    1aba:	7d c1       	rjmp	.+762    	; 0x1db6 <main+0x1bda>
									if(i==0) {
										irCommRxByteExpected = 0;
										irCommMsgCount = 0;
									}
								} else {
									if(irCommRxByteExpected==(i-1)) {
    1abc:	4d 81       	ldd	r20, Y+5	; 0x05
    1abe:	5e 81       	ldd	r21, Y+6	; 0x06
    1ac0:	41 50       	subi	r20, 0x01	; 1
    1ac2:	50 40       	sbci	r21, 0x00	; 0
    1ac4:	24 17       	cp	r18, r20
    1ac6:	35 07       	cpc	r19, r21
    1ac8:	09 f4       	brne	.+2      	; 0x1acc <main+0x18f0>
    1aca:	8c c1       	rjmp	.+792    	; 0x1de4 <main+0x1c08>
										irCommRxByteExpected = i;
										irCommMsgCount = 0;
									}
								}
							}
							switch(irCommRxByteExpected) {
    1acc:	93 30       	cpi	r25, 0x03	; 3
    1ace:	09 f4       	brne	.+2      	; 0x1ad2 <main+0x18f6>
    1ad0:	bf c1       	rjmp	.+894    	; 0x1e50 <main+0x1c74>
    1ad2:	94 30       	cpi	r25, 0x04	; 4
    1ad4:	08 f0       	brcs	.+2      	; 0x1ad8 <main+0x18fc>
    1ad6:	1e c1       	rjmp	.+572    	; 0x1d14 <main+0x1b38>
    1ad8:	91 30       	cpi	r25, 0x01	; 1
    1ada:	09 f4       	brne	.+2      	; 0x1ade <main+0x1902>
    1adc:	b7 c1       	rjmp	.+878    	; 0x1e4c <main+0x1c70>
    1ade:	92 30       	cpi	r25, 0x02	; 2
    1ae0:	08 f4       	brcc	.+2      	; 0x1ae4 <main+0x1908>
    1ae2:	73 c1       	rjmp	.+742    	; 0x1dca <main+0x1bee>
									updateRedLed(235);
									updateGreenLed(255);
									updateBlueLed(255);
									break;	
								case 2: 
									updateRedLed(255);
    1ae4:	8f ef       	ldi	r24, 0xFF	; 255
									updateRedLed(255);
									updateGreenLed(255);
									updateBlueLed(235);
									break;
								case 4: 
									updateRedLed(235);
    1ae6:	0e 94 91 3f 	call	0x7f22	; 0x7f22 <updateRedLed>
									updateGreenLed(235);
    1aea:	8b ee       	ldi	r24, 0xEB	; 235
    1aec:	0e 94 a5 3f 	call	0x7f4a	; 0x7f4a <updateGreenLed>
									updateBlueLed(255);
    1af0:	8f ef       	ldi	r24, 0xFF	; 255
    1af2:	0e 94 b9 3f 	call	0x7f72	; 0x7f72 <updateBlueLed>
    1af6:	80 91 5c 04 	lds	r24, 0x045C
									break;
    1afa:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <main+0x110>
						break;

					case 1:	
						irCommTasks();
						if(irCommDataSent()==1) {	
							irCommSendData(irCommRxByteExpected);					
    1afe:	80 91 1f 05 	lds	r24, 0x051F
    1b02:	0e 94 eb 53 	call	0xa7d6	; 0xa7d6 <irCommSendData>
    1b06:	0c 94 7a 05 	jmp	0xaf4	; 0xaf4 <main+0x918>
							disableObstacleAvoidance();

							demoEndTime = getTime100MicroSec();
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {	// the robot seems to be blocked somehow
								// go back for a while
								setRightSpeed(-20);
    1b0a:	8c ee       	ldi	r24, 0xEC	; 236
    1b0c:	0e 94 63 2a 	call	0x54c6	; 0x54c6 <setRightSpeed>
								setLeftSpeed(-20);
    1b10:	8c ee       	ldi	r24, 0xEC	; 236
    1b12:	0e 94 46 2a 	call	0x548c	; 0x548c <setLeftSpeed>
								demoStartTime = getTime100MicroSec();
    1b16:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
    1b1a:	60 93 64 04 	sts	0x0464, r22
    1b1e:	70 93 65 04 	sts	0x0465, r23
    1b22:	80 93 66 04 	sts	0x0466, r24
    1b26:	90 93 67 04 	sts	0x0467, r25
								demoState = 4;
    1b2a:	84 e0       	ldi	r24, 0x04	; 4
    1b2c:	80 93 60 04 	sts	0x0460, r24
								break;
    1b30:	0c 94 46 02 	jmp	0x48c	; 0x48c <main+0x2b0>
										chargeContact = 0;
										demoState = 1;
										break;
									}
								} else {
									outOfLine = 0;
    1b34:	10 92 62 04 	sts	0x0462, r1
    1b38:	2c ce       	rjmp	.-936    	; 0x1792 <main+0x15b6>
					if(rgbState == 0) {
						pwm_red = 254;
						pwm_green = 255;
						pwm_blue = 255;
						rgbState = 1;
					} else if(rgbState == 1) {
    1b3a:	91 30       	cpi	r25, 0x01	; 1
    1b3c:	09 f4       	brne	.+2      	; 0x1b40 <main+0x1964>
    1b3e:	2f c1       	rjmp	.+606    	; 0x1d9e <main+0x1bc2>
						pwm_red = 255;
						pwm_green = 254;
						pwm_blue = 255;
						rgbState = 2;
					} else if(rgbState == 2) {
    1b40:	92 30       	cpi	r25, 0x02	; 2
    1b42:	11 f0       	breq	.+4      	; 0x1b48 <main+0x196c>
    1b44:	0c 94 9d 03 	jmp	0x73a	; 0x73a <main+0x55e>
						pwm_red = 255;
    1b48:	10 93 0c 02 	sts	0x020C, r17
						pwm_green = 255;
    1b4c:	10 93 0d 02 	sts	0x020D, r17
						pwm_blue = 254;
    1b50:	4e ef       	ldi	r20, 0xFE	; 254
    1b52:	40 93 0e 02 	sts	0x020E, r20
						rgbState = 0;
    1b56:	10 92 2c 03 	sts	0x032C, r1
    1b5a:	0c 94 9d 03 	jmp	0x73a	; 0x73a <main+0x55e>
						if(irCommDataAvailable()==1) {
							if(irCommLedToggle==0) {
								irCommLedToggle = 1;
								updateRedLed(255);
							} else {
								irCommLedToggle = 0;
    1b5e:	10 92 f3 04 	sts	0x04F3, r1
								updateRedLed(235);
    1b62:	8b ee       	ldi	r24, 0xEB	; 235
    1b64:	0e 94 91 3f 	call	0x7f22	; 0x7f22 <updateRedLed>
    1b68:	8a cc       	rjmp	.-1772   	; 0x147e <main+0x12a2>
					case 2: // led is off
							// transmission: continuously send my robot id to tell the next robot I turned off the led
							// reception: listen for my robot id and then turn on the led				
						irCommTasks();
						if(irCommDataSent()==1) {
							irCommSendData(irCommRobotId);							
    1b6a:	80 91 f1 04 	lds	r24, 0x04F1
    1b6e:	0e 94 eb 53 	call	0xa7d6	; 0xa7d6 <irCommSendData>
    1b72:	76 cc       	rjmp	.-1812   	; 0x1460 <main+0x1284>
								irCommLedToggle = 1;
								updateBlueLed(255);
								updateRedLed(255);
								updateGreenLed(128);
							} else {
								irCommLedToggle = 0;
    1b74:	10 92 f3 04 	sts	0x04F3, r1
								updateBlueLed(255);
    1b78:	8f ef       	ldi	r24, 0xFF	; 255
    1b7a:	0e 94 b9 3f 	call	0x7f72	; 0x7f72 <updateBlueLed>
								updateRedLed(255);
    1b7e:	8f ef       	ldi	r24, 0xFF	; 255
    1b80:	0e 94 91 3f 	call	0x7f22	; 0x7f22 <updateRedLed>
								updateGreenLed(235);
    1b84:	8b ee       	ldi	r24, 0xEB	; 235
    1b86:	0e 94 a5 3f 	call	0x7f4a	; 0x7f4a <updateGreenLed>
    1b8a:	b5 cc       	rjmp	.-1686   	; 0x14f6 <main+0x131a>
						irCommTasks();
						if(irCommDataSent()==1) {
							if(irCommRobotId < (irCommRobotsNum-1)) {
								irCommSendData(irCommRobotId+1);
							} else {
								irCommSendData(0x00);
    1b8c:	80 e0       	ldi	r24, 0x00	; 0
    1b8e:	0e 94 eb 53 	call	0xa7d6	; 0xa7d6 <irCommSendData>
    1b92:	9c cc       	rjmp	.-1736   	; 0x14cc <main+0x12f0>
								//outOfLine++;
								//if(outOfLine > 250) {
								//	demoState = 1;
								//}
							} else {
								setRightSpeed(15);
    1b94:	8f e0       	ldi	r24, 0x0F	; 15
    1b96:	0e 94 63 2a 	call	0x54c6	; 0x54c6 <setRightSpeed>
								setLeftSpeed(15);
    1b9a:	8f e0       	ldi	r24, 0x0F	; 15
    1b9c:	0e 94 46 2a 	call	0x548c	; 0x548c <setLeftSpeed>
    1ba0:	0c 94 46 02 	jmp	0x48c	; 0x48c <main+0x2b0>
						if(irCommDataSent()==1) {
							angleDegEncode = (unsigned char)((float)angleDeg*0.7084);
							irCommSendData(angleDegEncode);
						}
						if(irCommDataAvailable()==1) {
							demoStartTime = getTime100MicroSec();
    1ba4:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
    1ba8:	60 93 64 04 	sts	0x0464, r22
    1bac:	70 93 65 04 	sts	0x0465, r23
    1bb0:	80 93 66 04 	sts	0x0466, r24
    1bb4:	90 93 67 04 	sts	0x0467, r25
							irCommLastData = irCommReadData();
    1bb8:	0e 94 ff 53 	call	0xa7fe	; 0xa7fe <irCommReadData>
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
							irCommLastData = (int)((float)irCommLastData*1.411);
    1bbe:	9c 01       	movw	r18, r24
    1bc0:	b9 01       	movw	r22, r18
    1bc2:	88 27       	eor	r24, r24
    1bc4:	77 fd       	sbrc	r23, 7
    1bc6:	80 95       	com	r24
    1bc8:	98 2f       	mov	r25, r24
    1bca:	0e 94 80 55 	call	0xab00	; 0xab00 <__floatsisf>
    1bce:	26 ea       	ldi	r18, 0xA6	; 166
    1bd0:	3b e9       	ldi	r19, 0x9B	; 155
    1bd2:	44 eb       	ldi	r20, 0xB4	; 180
    1bd4:	5f e3       	ldi	r21, 0x3F	; 63
    1bd6:	0e 94 99 56 	call	0xad32	; 0xad32 <__mulsf3>
    1bda:	0e 94 4d 55 	call	0xaa9a	; 0xaa9a <__fixsfsi>
    1bde:	70 93 eb 04 	sts	0x04EB, r23
    1be2:	60 93 ea 04 	sts	0x04EA, r22
							irCommLastSensor = irCommReceivingSensor();	
    1be6:	0e 94 04 54 	call	0xa808	; 0xa808 <irCommReceivingSensor>
    1bea:	80 93 18 02 	sts	0x0218, r24
							disableObstacleAvoidance();										
    1bee:	0e 94 4a 3f 	call	0x7e94	; 0x7e94 <disableObstacleAvoidance>
							angleDeg = getBearing(irCommLastSensor);
    1bf2:	80 91 18 02 	lds	r24, 0x0218
    1bf6:	0e 94 07 54 	call	0xa80e	; 0xa80e <getBearing>
    1bfa:	90 93 ed 04 	sts	0x04ED, r25
    1bfe:	80 93 ec 04 	sts	0x04EC, r24
							if(angleDeg < 0) {
    1c02:	97 fd       	sbrc	r25, 7
    1c04:	0f c1       	rjmp	.+542    	; 0x1e24 <main+0x1c48>
								angleDeg += 360;
							}
							angleError = angleDeg - irCommLastData;
    1c06:	20 91 ea 04 	lds	r18, 0x04EA
    1c0a:	30 91 eb 04 	lds	r19, 0x04EB
    1c0e:	44 eb       	ldi	r20, 0xB4	; 180
    1c10:	50 e0       	ldi	r21, 0x00	; 0
    1c12:	42 1b       	sub	r20, r18
    1c14:	53 0b       	sbc	r21, r19
    1c16:	9a 01       	movw	r18, r20
							angleError += 180;
    1c18:	28 0f       	add	r18, r24
    1c1a:	39 1f       	adc	r19, r25
    1c1c:	30 93 ef 04 	sts	0x04EF, r19
    1c20:	20 93 ee 04 	sts	0x04EE, r18
							if(angleError > 180) {
    1c24:	25 3b       	cpi	r18, 0xB5	; 181
    1c26:	31 05       	cpc	r19, r1
    1c28:	34 f0       	brlt	.+12     	; 0x1c36 <main+0x1a5a>
								angleError -= 360;
    1c2a:	28 56       	subi	r18, 0x68	; 104
    1c2c:	31 40       	sbci	r19, 0x01	; 1
    1c2e:	30 93 ef 04 	sts	0x04EF, r19
    1c32:	20 93 ee 04 	sts	0x04EE, r18
							}
							if(angleError < -180) {
    1c36:	80 91 ee 04 	lds	r24, 0x04EE
    1c3a:	90 91 ef 04 	lds	r25, 0x04EF
    1c3e:	5f ef       	ldi	r21, 0xFF	; 255
    1c40:	8c 34       	cpi	r24, 0x4C	; 76
    1c42:	95 07       	cpc	r25, r21
    1c44:	34 f4       	brge	.+12     	; 0x1c52 <main+0x1a76>
								angleError += 360;
    1c46:	88 59       	subi	r24, 0x98	; 152
    1c48:	9e 4f       	sbci	r25, 0xFE	; 254
    1c4a:	90 93 ef 04 	sts	0x04EF, r25
    1c4e:	80 93 ee 04 	sts	0x04EE, r24
							}
							if(abs(angleError) < 10) {
    1c52:	09 96       	adiw	r24, 0x09	; 9
    1c54:	83 31       	cpi	r24, 0x13	; 19
    1c56:	91 05       	cpc	r25, r1
    1c58:	08 f0       	brcs	.+2      	; 0x1c5c <main+0x1a80>
    1c5a:	85 c0       	rjmp	.+266    	; 0x1d66 <main+0x1b8a>
								setLeftSpeed(0);
    1c5c:	80 e0       	ldi	r24, 0x00	; 0
    1c5e:	0e 94 46 2a 	call	0x548c	; 0x548c <setLeftSpeed>
								setRightSpeed(0);
    1c62:	80 e0       	ldi	r24, 0x00	; 0
    1c64:	0e 94 63 2a 	call	0x54c6	; 0x54c6 <setRightSpeed>
    1c68:	db cc       	rjmp	.-1610   	; 0x1620 <main+0x1444>
						break;

					case 2:
						irCommTasks();
						if(irCommDataSent()==1) {
							angleDegEncode = (unsigned char)((float)angleDeg*0.7084);
    1c6a:	60 91 ec 04 	lds	r22, 0x04EC
    1c6e:	70 91 ed 04 	lds	r23, 0x04ED
    1c72:	88 27       	eor	r24, r24
    1c74:	77 fd       	sbrc	r23, 7
    1c76:	80 95       	com	r24
    1c78:	98 2f       	mov	r25, r24
    1c7a:	0e 94 80 55 	call	0xab00	; 0xab00 <__floatsisf>
    1c7e:	24 eb       	ldi	r18, 0xB4	; 180
    1c80:	39 e5       	ldi	r19, 0x59	; 89
    1c82:	45 e3       	ldi	r20, 0x35	; 53
    1c84:	5f e3       	ldi	r21, 0x3F	; 63
    1c86:	0e 94 99 56 	call	0xad32	; 0xad32 <__mulsf3>
    1c8a:	0e 94 52 55 	call	0xaaa4	; 0xaaa4 <__fixunssfsi>
    1c8e:	86 2f       	mov	r24, r22
    1c90:	60 93 f0 04 	sts	0x04F0, r22
							irCommSendData(angleDegEncode);
    1c94:	0e 94 eb 53 	call	0xa7d6	; 0xa7d6 <irCommSendData>
    1c98:	be cc       	rjmp	.-1668   	; 0x1616 <main+0x143a>
						if(irCommDataSent()==1) {							
							demoState = 1;
							if(irCommRxByteExpected<255) {
								irCommRxByteExpected++;
							} else {
								irCommRxByteExpected = 0;
    1c9a:	10 92 1f 05 	sts	0x051F, r1
    1c9e:	97 c8       	rjmp	.-3794   	; 0xdce <main+0xbf2>
							}
						}
						if(irCommDataAvailable()==1) {
							irCommReadData();
							if(i<7) {
								i++;
    1ca0:	2f 5f       	subi	r18, 0xFF	; 255
    1ca2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ca4:	3e 83       	std	Y+6, r19	; 0x06
    1ca6:	2d 83       	std	Y+5, r18	; 0x05
							} else {
								i = 0;
							}
							switch(i) {
    1ca8:	24 30       	cpi	r18, 0x04	; 4
    1caa:	31 05       	cpc	r19, r1
    1cac:	09 f4       	brne	.+2      	; 0x1cb0 <main+0x1ad4>
    1cae:	2c c1       	rjmp	.+600    	; 0x1f08 <main+0x1d2c>
    1cb0:	25 30       	cpi	r18, 0x05	; 5
    1cb2:	31 05       	cpc	r19, r1
    1cb4:	08 f0       	brcs	.+2      	; 0x1cb8 <main+0x1adc>
    1cb6:	9c c0       	rjmp	.+312    	; 0x1df0 <main+0x1c14>
    1cb8:	22 30       	cpi	r18, 0x02	; 2
    1cba:	31 05       	cpc	r19, r1
    1cbc:	09 f4       	brne	.+2      	; 0x1cc0 <main+0x1ae4>
    1cbe:	33 c1       	rjmp	.+614    	; 0x1f26 <main+0x1d4a>
    1cc0:	23 30       	cpi	r18, 0x03	; 3
    1cc2:	31 05       	cpc	r19, r1
    1cc4:	09 f4       	brne	.+2      	; 0x1cc8 <main+0x1aec>
    1cc6:	2d c1       	rjmp	.+602    	; 0x1f22 <main+0x1d46>
									updateRedLed(255);
									updateGreenLed(255);
									updateBlueLed(255);
									break;
								case 1: 
									updateRedLed(0);
    1cc8:	80 e0       	ldi	r24, 0x00	; 0
    1cca:	0e 94 91 3f 	call	0x7f22	; 0x7f22 <updateRedLed>
									updateGreenLed(255);
    1cce:	8f ef       	ldi	r24, 0xFF	; 255
    1cd0:	0e 94 a5 3f 	call	0x7f4a	; 0x7f4a <updateGreenLed>
									updateBlueLed(255);
    1cd4:	8f ef       	ldi	r24, 0xFF	; 255
    1cd6:	0e 94 b9 3f 	call	0x7f72	; 0x7f72 <updateBlueLed>
    1cda:	80 91 5c 04 	lds	r24, 0x045C
									break;	
    1cde:	a1 e0       	ldi	r26, 0x01	; 1
    1ce0:	b0 e0       	ldi	r27, 0x00	; 0
    1ce2:	be 83       	std	Y+6, r27	; 0x06
    1ce4:	ad 83       	std	Y+5, r26	; 0x05
    1ce6:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <main+0x110>

							if(CHARGE_ON) {
								outOfLine = 0;
								chargeContact++;
								if(chargeContact > 20) {
									setLeftSpeed(0);
    1cea:	80 e0       	ldi	r24, 0x00	; 0
    1cec:	0e 94 46 2a 	call	0x548c	; 0x548c <setLeftSpeed>
									setRightSpeed(0);
    1cf0:	80 e0       	ldi	r24, 0x00	; 0
    1cf2:	0e 94 63 2a 	call	0x54c6	; 0x54c6 <setRightSpeed>
									demoStartTime = getTime100MicroSec();
    1cf6:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
    1cfa:	60 93 64 04 	sts	0x0464, r22
    1cfe:	70 93 65 04 	sts	0x0465, r23
    1d02:	80 93 66 04 	sts	0x0466, r24
    1d06:	90 93 67 04 	sts	0x0467, r25
									demoState = 3;
    1d0a:	93 e0       	ldi	r25, 0x03	; 3
    1d0c:	90 93 60 04 	sts	0x0460, r25
									break;
    1d10:	0c 94 46 02 	jmp	0x48c	; 0x48c <main+0x2b0>
										irCommRxByteExpected = i;
										irCommMsgCount = 0;
									}
								}
							}
							switch(irCommRxByteExpected) {
    1d14:	95 30       	cpi	r25, 0x05	; 5
    1d16:	09 f4       	brne	.+2      	; 0x1d1a <main+0x1b3e>
    1d18:	aa c0       	rjmp	.+340    	; 0x1e6e <main+0x1c92>
    1d1a:	95 30       	cpi	r25, 0x05	; 5
    1d1c:	08 f4       	brcc	.+2      	; 0x1d20 <main+0x1b44>
    1d1e:	a5 c0       	rjmp	.+330    	; 0x1e6a <main+0x1c8e>
    1d20:	96 30       	cpi	r25, 0x06	; 6
    1d22:	09 f4       	brne	.+2      	; 0x1d26 <main+0x1b4a>
    1d24:	86 c0       	rjmp	.+268    	; 0x1e32 <main+0x1c56>
    1d26:	97 30       	cpi	r25, 0x07	; 7
    1d28:	11 f0       	breq	.+4      	; 0x1d2e <main+0x1b52>
    1d2a:	0c 94 7f 05 	jmp	0xafe	; 0xafe <main+0x922>
									updateRedLed(255);
									updateGreenLed(235);
									updateBlueLed(235);
									break;
								case 7: 
									updateRedLed(235);
    1d2e:	8b ee       	ldi	r24, 0xEB	; 235
    1d30:	0e 94 91 3f 	call	0x7f22	; 0x7f22 <updateRedLed>
									updateGreenLed(235);
    1d34:	8b ee       	ldi	r24, 0xEB	; 235
    1d36:	0e 94 a5 3f 	call	0x7f4a	; 0x7f4a <updateGreenLed>
									updateBlueLed(235);
    1d3a:	8b ee       	ldi	r24, 0xEB	; 235
    1d3c:	0e 94 b9 3f 	call	0x7f72	; 0x7f72 <updateBlueLed>
    1d40:	0c 94 7f 05 	jmp	0xafe	; 0xafe <main+0x922>
							irCommSendData(irCommRxByteExpected);					
						}
						if(irCommDataAvailable()==1) {							
							i = irCommReadData();
							if(i == irCommRxByteExpected) {
								irCommMsgCount++;
    1d44:	80 91 f4 04 	lds	r24, 0x04F4
    1d48:	8f 5f       	subi	r24, 0xFF	; 255
    1d4a:	80 93 f4 04 	sts	0x04F4, r24
								if(irCommMsgCount >= 4) {
    1d4e:	84 30       	cpi	r24, 0x04	; 4
    1d50:	08 f4       	brcc	.+2      	; 0x1d54 <main+0x1b78>
    1d52:	bc ce       	rjmp	.-648    	; 0x1acc <main+0x18f0>
									irCommMsgCount = 0;
    1d54:	10 92 f4 04 	sts	0x04F4, r1
									if(irCommRxByteExpected < 7) {
    1d58:	97 30       	cpi	r25, 0x07	; 7
    1d5a:	08 f0       	brcs	.+2      	; 0x1d5e <main+0x1b82>
    1d5c:	8a c0       	rjmp	.+276    	; 0x1e72 <main+0x1c96>
										irCommRxByteExpected++;
    1d5e:	9f 5f       	subi	r25, 0xFF	; 255
    1d60:	90 93 1f 05 	sts	0x051F, r25
    1d64:	b3 ce       	rjmp	.-666    	; 0x1acc <main+0x18f0>
							}
							if(abs(angleError) < 10) {
								setLeftSpeed(0);
								setRightSpeed(0);
							} else {
								resetOdometry();
    1d66:	0e 94 44 22 	call	0x4488	; 0x4488 <resetOdometry>
								if(angleError > 0) {	// turn left
    1d6a:	80 91 ee 04 	lds	r24, 0x04EE
    1d6e:	90 91 ef 04 	lds	r25, 0x04EF
    1d72:	18 16       	cp	r1, r24
    1d74:	19 06       	cpc	r1, r25
    1d76:	0c f0       	brlt	.+2      	; 0x1d7a <main+0x1b9e>
    1d78:	ad c0       	rjmp	.+346    	; 0x1ed4 <main+0x1cf8>
									setLeftSpeed(-7);
    1d7a:	89 ef       	ldi	r24, 0xF9	; 249
    1d7c:	0e 94 46 2a 	call	0x548c	; 0x548c <setLeftSpeed>
									setRightSpeed(7);
    1d80:	87 e0       	ldi	r24, 0x07	; 7
    1d82:	0e 94 63 2a 	call	0x54c6	; 0x54c6 <setRightSpeed>
									targetAngle = 0.09;	// about -10 degrees
									demoState = 4;
    1d86:	64 e0       	ldi	r22, 0x04	; 4
    1d88:	60 93 60 04 	sts	0x0460, r22
							} else {
								resetOdometry();
								if(angleError > 0) {	// turn left
									setLeftSpeed(-7);
									setRightSpeed(7);
									targetAngle = 0.09;	// about -10 degrees
    1d8c:	8c ee       	ldi	r24, 0xEC	; 236
    1d8e:	91 e5       	ldi	r25, 0x51	; 81
    1d90:	a8 eb       	ldi	r26, 0xB8	; 184
    1d92:	bd e3       	ldi	r27, 0x3D	; 61
    1d94:	8f 83       	std	Y+7, r24	; 0x07
    1d96:	98 87       	std	Y+8, r25	; 0x08
    1d98:	a9 87       	std	Y+9, r26	; 0x09
    1d9a:	ba 87       	std	Y+10, r27	; 0x0a
    1d9c:	41 cc       	rjmp	.-1918   	; 0x1620 <main+0x1444>
						pwm_red = 254;
						pwm_green = 255;
						pwm_blue = 255;
						rgbState = 1;
					} else if(rgbState == 1) {
						pwm_red = 255;
    1d9e:	10 93 0c 02 	sts	0x020C, r17
						pwm_green = 254;
    1da2:	2e ef       	ldi	r18, 0xFE	; 254
    1da4:	20 93 0d 02 	sts	0x020D, r18
						pwm_blue = 255;
    1da8:	10 93 0e 02 	sts	0x020E, r17
						rgbState = 2;
    1dac:	32 e0       	ldi	r19, 0x02	; 2
    1dae:	30 93 2c 03 	sts	0x032C, r19
    1db2:	0c 94 9d 03 	jmp	0x73a	; 0x73a <main+0x55e>
										irCommRxByteExpected = 0;
									}
								}
							} else {
								if(irCommRxByteExpected==7) {
									if(i==0) {
    1db6:	2d 81       	ldd	r18, Y+5	; 0x05
    1db8:	3e 81       	ldd	r19, Y+6	; 0x06
    1dba:	21 15       	cp	r18, r1
    1dbc:	31 05       	cpc	r19, r1
    1dbe:	09 f0       	breq	.+2      	; 0x1dc2 <main+0x1be6>
    1dc0:	b6 cf       	rjmp	.-148    	; 0x1d2e <main+0x1b52>
										irCommRxByteExpected = 0;
    1dc2:	10 92 1f 05 	sts	0x051F, r1
										irCommMsgCount = 0;
    1dc6:	10 92 f4 04 	sts	0x04F4, r1
									}
								}
							}
							switch(irCommRxByteExpected) {
								case 0: 
									updateRedLed(255);
    1dca:	8f ef       	ldi	r24, 0xFF	; 255
									updateGreenLed(255);
									updateBlueLed(255);
									break;
								case 1: 
									updateRedLed(235);
    1dcc:	0e 94 91 3f 	call	0x7f22	; 0x7f22 <updateRedLed>
									updateGreenLed(255);
    1dd0:	8f ef       	ldi	r24, 0xFF	; 255
    1dd2:	0e 94 a5 3f 	call	0x7f4a	; 0x7f4a <updateGreenLed>
									updateBlueLed(255);
    1dd6:	8f ef       	ldi	r24, 0xFF	; 255
    1dd8:	0e 94 b9 3f 	call	0x7f72	; 0x7f72 <updateBlueLed>
    1ddc:	80 91 5c 04 	lds	r24, 0x045C
									break;	
    1de0:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <main+0x110>
										irCommRxByteExpected = 0;
										irCommMsgCount = 0;
									}
								} else {
									if(irCommRxByteExpected==(i-1)) {
										irCommRxByteExpected = i;
    1de4:	80 93 1f 05 	sts	0x051F, r24
										irCommMsgCount = 0;
    1de8:	10 92 f4 04 	sts	0x04F4, r1
    1dec:	98 2f       	mov	r25, r24
    1dee:	6e ce       	rjmp	.-804    	; 0x1acc <main+0x18f0>
							if(i<7) {
								i++;
							} else {
								i = 0;
							}
							switch(i) {
    1df0:	4d 81       	ldd	r20, Y+5	; 0x05
    1df2:	5e 81       	ldd	r21, Y+6	; 0x06
    1df4:	46 30       	cpi	r20, 0x06	; 6
    1df6:	51 05       	cpc	r21, r1
    1df8:	09 f4       	brne	.+2      	; 0x1dfc <main+0x1c20>
    1dfa:	4b c0       	rjmp	.+150    	; 0x1e92 <main+0x1cb6>
    1dfc:	46 30       	cpi	r20, 0x06	; 6
    1dfe:	51 05       	cpc	r21, r1
    1e00:	d8 f1       	brcs	.+118    	; 0x1e78 <main+0x1c9c>
    1e02:	47 30       	cpi	r20, 0x07	; 7
    1e04:	51 05       	cpc	r21, r1
    1e06:	09 f0       	breq	.+2      	; 0x1e0a <main+0x1c2e>
    1e08:	5f cf       	rjmp	.-322    	; 0x1cc8 <main+0x1aec>
									updateRedLed(255);
									updateGreenLed(0);
									updateBlueLed(0);
									break;
								case 7: 
									updateRedLed(0);
    1e0a:	80 e0       	ldi	r24, 0x00	; 0
    1e0c:	0e 94 91 3f 	call	0x7f22	; 0x7f22 <updateRedLed>
									updateGreenLed(0);
    1e10:	80 e0       	ldi	r24, 0x00	; 0
    1e12:	0e 94 a5 3f 	call	0x7f4a	; 0x7f4a <updateGreenLed>
									updateBlueLed(0);
    1e16:	80 e0       	ldi	r24, 0x00	; 0
    1e18:	0e 94 b9 3f 	call	0x7f72	; 0x7f72 <updateBlueLed>
    1e1c:	80 91 5c 04 	lds	r24, 0x045C
									break;
    1e20:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <main+0x110>
							irCommLastData = (int)((float)irCommLastData*1.411);
							irCommLastSensor = irCommReceivingSensor();	
							disableObstacleAvoidance();										
							angleDeg = getBearing(irCommLastSensor);
							if(angleDeg < 0) {
								angleDeg += 360;
    1e24:	88 59       	subi	r24, 0x98	; 152
    1e26:	9e 4f       	sbci	r25, 0xFE	; 254
    1e28:	90 93 ed 04 	sts	0x04ED, r25
    1e2c:	80 93 ec 04 	sts	0x04EC, r24
    1e30:	ea ce       	rjmp	.-556    	; 0x1c06 <main+0x1a2a>
									updateRedLed(235);
									updateGreenLed(255);
									updateBlueLed(235);
									break;
								case 6: 
									updateRedLed(255);
    1e32:	8f ef       	ldi	r24, 0xFF	; 255
    1e34:	0e 94 91 3f 	call	0x7f22	; 0x7f22 <updateRedLed>
									updateGreenLed(235);
    1e38:	8b ee       	ldi	r24, 0xEB	; 235
    1e3a:	0e 94 a5 3f 	call	0x7f4a	; 0x7f4a <updateGreenLed>
									updateBlueLed(235);
    1e3e:	8b ee       	ldi	r24, 0xEB	; 235
    1e40:	0e 94 b9 3f 	call	0x7f72	; 0x7f72 <updateBlueLed>
    1e44:	80 91 5c 04 	lds	r24, 0x045C
									break;
    1e48:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <main+0x110>
									updateRedLed(255);
									updateGreenLed(255);
									updateBlueLed(255);
									break;
								case 1: 
									updateRedLed(235);
    1e4c:	8b ee       	ldi	r24, 0xEB	; 235
    1e4e:	be cf       	rjmp	.-132    	; 0x1dcc <main+0x1bf0>
									updateRedLed(255);
									updateGreenLed(235);
									updateBlueLed(255);
									break;
								case 3: 
									updateRedLed(255);
    1e50:	8f ef       	ldi	r24, 0xFF	; 255
									updateRedLed(235);
									updateGreenLed(235);
									updateBlueLed(255);
									break;
								case 5: 
									updateRedLed(235);
    1e52:	0e 94 91 3f 	call	0x7f22	; 0x7f22 <updateRedLed>
									updateGreenLed(255);
    1e56:	8f ef       	ldi	r24, 0xFF	; 255
    1e58:	0e 94 a5 3f 	call	0x7f4a	; 0x7f4a <updateGreenLed>
									updateBlueLed(235);
    1e5c:	8b ee       	ldi	r24, 0xEB	; 235
    1e5e:	0e 94 b9 3f 	call	0x7f72	; 0x7f72 <updateBlueLed>
    1e62:	80 91 5c 04 	lds	r24, 0x045C
									break;
    1e66:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <main+0x110>
									updateRedLed(255);
									updateGreenLed(255);
									updateBlueLed(235);
									break;
								case 4: 
									updateRedLed(235);
    1e6a:	8b ee       	ldi	r24, 0xEB	; 235
    1e6c:	3c ce       	rjmp	.-904    	; 0x1ae6 <main+0x190a>
									updateGreenLed(235);
									updateBlueLed(255);
									break;
								case 5: 
									updateRedLed(235);
    1e6e:	8b ee       	ldi	r24, 0xEB	; 235
    1e70:	f0 cf       	rjmp	.-32     	; 0x1e52 <main+0x1c76>
								if(irCommMsgCount >= 4) {
									irCommMsgCount = 0;
									if(irCommRxByteExpected < 7) {
										irCommRxByteExpected++;
									} else {
										irCommRxByteExpected = 0;
    1e72:	10 92 1f 05 	sts	0x051F, r1
    1e76:	a9 cf       	rjmp	.-174    	; 0x1dca <main+0x1bee>
									updateRedLed(0);
									updateGreenLed(0);
									updateBlueLed(255);
									break;
								case 5: 
									updateRedLed(0);
    1e78:	80 e0       	ldi	r24, 0x00	; 0
    1e7a:	0e 94 91 3f 	call	0x7f22	; 0x7f22 <updateRedLed>
									updateGreenLed(255);
    1e7e:	8f ef       	ldi	r24, 0xFF	; 255
    1e80:	0e 94 a5 3f 	call	0x7f4a	; 0x7f4a <updateGreenLed>
									updateBlueLed(0);
    1e84:	80 e0       	ldi	r24, 0x00	; 0
    1e86:	0e 94 b9 3f 	call	0x7f72	; 0x7f72 <updateBlueLed>
    1e8a:	80 91 5c 04 	lds	r24, 0x045C
									break;
    1e8e:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <main+0x110>
								case 6: 
									updateRedLed(255);
    1e92:	8f ef       	ldi	r24, 0xFF	; 255
    1e94:	bb cf       	rjmp	.-138    	; 0x1e0c <main+0x1c30>
										demoState = 1;
									} else {
										irCommSendData(0xFF);
									}
								} else {
									if(i == (unsigned int)(irCommRobotId-1)) {
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	01 97       	sbiw	r24, 0x01	; 1
    1e9a:	ed 81       	ldd	r30, Y+5	; 0x05
    1e9c:	fe 81       	ldd	r31, Y+6	; 0x06
    1e9e:	8e 17       	cp	r24, r30
    1ea0:	9f 07       	cpc	r25, r31
    1ea2:	11 f0       	breq	.+4      	; 0x1ea8 <main+0x1ccc>
    1ea4:	0c 94 39 07 	jmp	0xe72	; 0xe72 <main+0xc96>
    1ea8:	d4 cb       	rjmp	.-2136   	; 0x1652 <main+0x1476>
									irCommLedToggle = 1;
									updateBlueLed(255);
									updateRedLed(255);
									updateGreenLed(128);
								} else {
									irCommLedToggle = 0;
    1eaa:	10 92 f3 04 	sts	0x04F3, r1
									updateBlueLed(255);
    1eae:	8f ef       	ldi	r24, 0xFF	; 255
    1eb0:	0e 94 b9 3f 	call	0x7f72	; 0x7f72 <updateBlueLed>
									updateRedLed(255);
    1eb4:	8f ef       	ldi	r24, 0xFF	; 255
    1eb6:	0e 94 91 3f 	call	0x7f22	; 0x7f22 <updateRedLed>
									updateGreenLed(235);
    1eba:	8b ee       	ldi	r24, 0xEB	; 235
    1ebc:	0e 94 a5 3f 	call	0x7f4a	; 0x7f4a <updateGreenLed>
    1ec0:	0c 94 25 07 	jmp	0xe4a	; 0xe4a <main+0xc6e>
									outOfLine = 0;
								}
							}
							
							if(proximityResult[8]<LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR && proximityResult[11]>LINE_OUT_THR) {	// left ground is the only within the black line => turn left
								setLeftSpeed(-10);
    1ec4:	86 ef       	ldi	r24, 0xF6	; 246
    1ec6:	0e 94 46 2a 	call	0x548c	; 0x548c <setLeftSpeed>
								setRightSpeed(15);
    1eca:	8f e0       	ldi	r24, 0x0F	; 15
    1ecc:	0e 94 63 2a 	call	0x54c6	; 0x54c6 <setRightSpeed>
    1ed0:	0c 94 46 02 	jmp	0x48c	; 0x48c <main+0x2b0>
									setLeftSpeed(-7);
									setRightSpeed(7);
									targetAngle = 0.09;	// about -10 degrees
									demoState = 4;
								} else {	// turn right
									setLeftSpeed(7);
    1ed4:	87 e0       	ldi	r24, 0x07	; 7
    1ed6:	0e 94 46 2a 	call	0x548c	; 0x548c <setLeftSpeed>
									setRightSpeed(-7);
    1eda:	89 ef       	ldi	r24, 0xF9	; 249
    1edc:	0e 94 63 2a 	call	0x54c6	; 0x54c6 <setRightSpeed>
									targetAngle = -0.09;	// about 10 degrees
									demoState = 3;
    1ee0:	93 e0       	ldi	r25, 0x03	; 3
    1ee2:	90 93 60 04 	sts	0x0460, r25
									targetAngle = 0.09;	// about -10 degrees
									demoState = 4;
								} else {	// turn right
									setLeftSpeed(7);
									setRightSpeed(-7);
									targetAngle = -0.09;	// about 10 degrees
    1ee6:	2c ee       	ldi	r18, 0xEC	; 236
    1ee8:	31 e5       	ldi	r19, 0x51	; 81
    1eea:	48 eb       	ldi	r20, 0xB8	; 184
    1eec:	5d eb       	ldi	r21, 0xBD	; 189
    1eee:	2f 83       	std	Y+7, r18	; 0x07
    1ef0:	38 87       	std	Y+8, r19	; 0x08
    1ef2:	49 87       	std	Y+9, r20	; 0x09
    1ef4:	5a 87       	std	Y+10, r21	; 0x0a
    1ef6:	94 cb       	rjmp	.-2264   	; 0x1620 <main+0x1444>
							
							if(proximityResult[8]<LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR && proximityResult[11]>LINE_OUT_THR) {	// left ground is the only within the black line => turn left
								setLeftSpeed(-10);
								setRightSpeed(15);
							} else if(proximityResult[11]<LINE_OUT_THR && proximityResult[8]>LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {	// right ground is the only within the black line => turn right
								setLeftSpeed(15);
    1ef8:	8f e0       	ldi	r24, 0x0F	; 15
    1efa:	0e 94 46 2a 	call	0x548c	; 0x548c <setLeftSpeed>
								setRightSpeed(-10);
    1efe:	86 ef       	ldi	r24, 0xF6	; 246
    1f00:	0e 94 63 2a 	call	0x54c6	; 0x54c6 <setRightSpeed>
    1f04:	0c 94 46 02 	jmp	0x48c	; 0x48c <main+0x2b0>
									updateRedLed(255);
									updateGreenLed(255);
									updateBlueLed(0);
									break;
								case 4: 
									updateRedLed(0);
    1f08:	80 e0       	ldi	r24, 0x00	; 0
    1f0a:	0e 94 91 3f 	call	0x7f22	; 0x7f22 <updateRedLed>
									updateGreenLed(0);
    1f0e:	80 e0       	ldi	r24, 0x00	; 0
    1f10:	0e 94 a5 3f 	call	0x7f4a	; 0x7f4a <updateGreenLed>
									updateBlueLed(255);
    1f14:	8f ef       	ldi	r24, 0xFF	; 255
    1f16:	0e 94 b9 3f 	call	0x7f72	; 0x7f72 <updateBlueLed>
    1f1a:	80 91 5c 04 	lds	r24, 0x045C
									break;
    1f1e:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <main+0x110>
									updateRedLed(255);
									updateGreenLed(0);
									updateBlueLed(255);
									break;
								case 3: 
									updateRedLed(255);
    1f22:	8f ef       	ldi	r24, 0xFF	; 255
    1f24:	aa cf       	rjmp	.-172    	; 0x1e7a <main+0x1c9e>
									updateRedLed(0);
									updateGreenLed(255);
									updateBlueLed(255);
									break;	
								case 2: 
									updateRedLed(255);
    1f26:	8f ef       	ldi	r24, 0xFF	; 255
    1f28:	f0 cf       	rjmp	.-32     	; 0x1f0a <main+0x1d2e>

00001f2a <SPI_WAIT>:
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1f2a:	81 e0       	ldi	r24, 0x01	; 1
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
    1f2e:	21 e0       	ldi	r18, 0x01	; 1
		}
	
		if(SPSR & _BV(SPIF)) {
    1f30:	0d b4       	in	r0, 0x2d	; 45
    1f32:	07 fc       	sbrc	r0, 7
    1f34:	0a c0       	rjmp	.+20     	; 0x1f4a <SPI_WAIT+0x20>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1f36:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
    1f38:	37 e2       	ldi	r19, 0x27	; 39
    1f3a:	80 31       	cpi	r24, 0x10	; 16
    1f3c:	93 07       	cpc	r25, r19
    1f3e:	c0 f3       	brcs	.-16     	; 0x1f30 <SPI_WAIT+0x6>
			spiCommError = 1;
    1f40:	20 93 28 03 	sts	0x0328, r18
		}
	
		if(SPSR & _BV(SPIF)) {
    1f44:	0d b4       	in	r0, 0x2d	; 45
    1f46:	07 fe       	sbrs	r0, 7
    1f48:	f6 cf       	rjmp	.-20     	; 0x1f36 <SPI_WAIT+0xc>
			return;
		}
	}
}
    1f4a:	08 95       	ret

00001f4c <initSPI>:

void initSPI() {

    SPI_DDR &= ~((1<<SPI_MOSI)|(1<<SPI_MISO)|(1<<SPI_SS)|(1<<SPI_SCK));
    1f4c:	84 b1       	in	r24, 0x04	; 4
    1f4e:	80 7f       	andi	r24, 0xF0	; 240
    1f50:	84 b9       	out	0x04, r24	; 4
    // Define the following pins as output
    SPI_DDR |= ((1<<SPI_MOSI)|(1<<SPI_SS)|(1<<SPI_SCK));
    1f52:	84 b1       	in	r24, 0x04	; 4
    1f54:	87 60       	ori	r24, 0x07	; 7
    1f56:	84 b9       	out	0x04, r24	; 4

    
    SPCR = ((1<<SPE)|               // SPI Enable
    1f58:	80 e5       	ldi	r24, 0x50	; 80
    1f5a:	8c bd       	out	0x2c, r24	; 44
            (1<<MSTR)|              // 1:Master/ 0:Slave
            (0<<SPR1)|(0<<SPR0)|    // SPI Clock Rate => default 1/4 => 2 MHz
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR |= (1<<SPI2X);              // Double Clock Rate
    1f5c:	8d b5       	in	r24, 0x2d	; 45
    1f5e:	81 60       	ori	r24, 0x01	; 1
    1f60:	8d bd       	out	0x2d, r24	; 45

}
    1f62:	08 95       	ret

00001f64 <closeSPI>:

void closeSPI() {

	SPCR = 0x00;
    1f64:	1c bc       	out	0x2c, r1	; 44
	SPSR = 0x00;
    1f66:	1d bc       	out	0x2d, r1	; 45
}
    1f68:	08 95       	ret

00001f6a <SPI_ReadWrite_Block>:

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1f6a:	44 23       	and	r20, r20
    1f6c:	09 f1       	breq	.+66     	; 0x1fb0 <SPI_ReadWrite_Block+0x46>
    1f6e:	a6 2f       	mov	r26, r22
    1f70:	b7 2f       	mov	r27, r23
    1f72:	e8 2f       	mov	r30, r24
    1f74:	f9 2f       	mov	r31, r25
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
    1f76:	91 e0       	ldi	r25, 0x01	; 1
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
    1f78:	21 91       	ld	r18, Z+
    1f7a:	2e bd       	out	0x2e, r18	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1f7c:	21 e0       	ldi	r18, 0x01	; 1
    1f7e:	30 e0       	ldi	r19, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
    1f80:	0d b4       	in	r0, 0x2d	; 45
    1f82:	07 fc       	sbrc	r0, 7
    1f84:	0b c0       	rjmp	.+22     	; 0x1f9c <SPI_ReadWrite_Block+0x32>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1f86:	2f 5f       	subi	r18, 0xFF	; 255
    1f88:	3f 4f       	sbci	r19, 0xFF	; 255
		if(timeout>=10000) {
    1f8a:	57 e2       	ldi	r21, 0x27	; 39
    1f8c:	20 31       	cpi	r18, 0x10	; 16
    1f8e:	35 07       	cpc	r19, r21
    1f90:	b8 f3       	brcs	.-18     	; 0x1f80 <SPI_ReadWrite_Block+0x16>
			spiCommError = 1;
    1f92:	90 93 28 03 	sts	0x0328, r25
		}
	
		if(SPSR & _BV(SPIF)) {
    1f96:	0d b4       	in	r0, 0x2d	; 45
    1f98:	07 fe       	sbrs	r0, 7
    1f9a:	f5 cf       	rjmp	.-22     	; 0x1f86 <SPI_ReadWrite_Block+0x1c>
void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
          SPI_WAIT();
		  if(spiCommError) {
    1f9c:	20 91 28 03 	lds	r18, 0x0328
    1fa0:	22 23       	and	r18, r18
    1fa2:	31 f4       	brne	.+12     	; 0x1fb0 <SPI_ReadWrite_Block+0x46>
			return;
		  }
          buffer[i] = SPDR;
    1fa4:	2e b5       	in	r18, 0x2e	; 46
    1fa6:	2d 93       	st	X+, r18
	SPSR = 0x00;
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1fa8:	2e 2f       	mov	r18, r30
    1faa:	28 1b       	sub	r18, r24
    1fac:	24 17       	cp	r18, r20
    1fae:	20 f3       	brcs	.-56     	; 0x1f78 <SPI_ReadWrite_Block+0xe>
    1fb0:	08 95       	ret

00001fb2 <SPI_Write_Block>:
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1fb2:	66 23       	and	r22, r22
    1fb4:	e9 f0       	breq	.+58     	; 0x1ff0 <SPI_Write_Block+0x3e>
    1fb6:	e8 2f       	mov	r30, r24
    1fb8:	f9 2f       	mov	r31, r25
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
    1fba:	91 e0       	ldi	r25, 0x01	; 1
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
    1fbc:	21 91       	ld	r18, Z+
    1fbe:	2e bd       	out	0x2e, r18	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1fc0:	21 e0       	ldi	r18, 0x01	; 1
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
    1fc4:	0d b4       	in	r0, 0x2d	; 45
    1fc6:	07 fc       	sbrc	r0, 7
    1fc8:	0b c0       	rjmp	.+22     	; 0x1fe0 <SPI_Write_Block+0x2e>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1fca:	2f 5f       	subi	r18, 0xFF	; 255
    1fcc:	3f 4f       	sbci	r19, 0xFF	; 255
		if(timeout>=10000) {
    1fce:	47 e2       	ldi	r20, 0x27	; 39
    1fd0:	20 31       	cpi	r18, 0x10	; 16
    1fd2:	34 07       	cpc	r19, r20
    1fd4:	b8 f3       	brcs	.-18     	; 0x1fc4 <SPI_Write_Block+0x12>
			spiCommError = 1;
    1fd6:	90 93 28 03 	sts	0x0328, r25
		}
	
		if(SPSR & _BV(SPIF)) {
    1fda:	0d b4       	in	r0, 0x2d	; 45
    1fdc:	07 fe       	sbrs	r0, 7
    1fde:	f5 cf       	rjmp	.-22     	; 0x1fca <SPI_Write_Block+0x18>
void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
          SPI_WAIT();
		  if(spiCommError) {
    1fe0:	20 91 28 03 	lds	r18, 0x0328
    1fe4:	22 23       	and	r18, r18
    1fe6:	21 f4       	brne	.+8      	; 0x1ff0 <SPI_Write_Block+0x3e>
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1fe8:	2e 2f       	mov	r18, r30
    1fea:	28 1b       	sub	r18, r24
    1fec:	26 17       	cp	r18, r22
    1fee:	30 f3       	brcs	.-52     	; 0x1fbc <SPI_Write_Block+0xa>
    1ff0:	08 95       	ret

00001ff2 <SPI_Write_Byte>:
    }

}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    1ff2:	8e bd       	out	0x2e, r24	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
    1ff8:	21 e0       	ldi	r18, 0x01	; 1
		}
	
		if(SPSR & _BV(SPIF)) {
    1ffa:	0d b4       	in	r0, 0x2d	; 45
    1ffc:	07 fc       	sbrc	r0, 7
    1ffe:	0a c0       	rjmp	.+20     	; 0x2014 <SPI_Write_Byte+0x22>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    2000:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
    2002:	37 e2       	ldi	r19, 0x27	; 39
    2004:	80 31       	cpi	r24, 0x10	; 16
    2006:	93 07       	cpc	r25, r19
    2008:	c0 f3       	brcs	.-16     	; 0x1ffa <SPI_Write_Byte+0x8>
			spiCommError = 1;
    200a:	20 93 28 03 	sts	0x0328, r18
		}
	
		if(SPSR & _BV(SPIF)) {
    200e:	0d b4       	in	r0, 0x2d	; 45
    2010:	07 fe       	sbrs	r0, 7
    2012:	f6 cf       	rjmp	.-20     	; 0x2000 <SPI_Write_Byte+0xe>
}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    SPI_WAIT();
    return SPDR;
    2014:	8e b5       	in	r24, 0x2e	; 46
}
    2016:	08 95       	ret

00002018 <mirf_config>:


void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
    2018:	0f 93       	push	r16
    201a:	1f 93       	push	r17
    201c:	df 93       	push	r29
    201e:	cf 93       	push	r28
    2020:	00 d0       	rcall	.+0      	; 0x2022 <mirf_config+0xa>
    2022:	cd b7       	in	r28, 0x3d	; 61
    2024:	de b7       	in	r29, 0x3e	; 62
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    2026:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2028:	80 e2       	ldi	r24, 0x20	; 32
    202a:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    202e:	8d e0       	ldi	r24, 0x0D	; 13
    2030:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    mirf_CSN_hi;
    2034:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    2036:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2038:	83 e2       	ldi	r24, 0x23	; 35
    203a:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    203e:	81 e0       	ldi	r24, 0x01	; 1
    2040:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    mirf_CSN_hi;
    2044:	28 9a       	sbi	0x05, 0	; 5

	// address width
	mirf_config_register(SETUP_AW, 0x01);

	// tx address
	temp[0] = (rfAddress>>8)&0xFF;
    2046:	80 91 25 03 	lds	r24, 0x0325
    204a:	90 91 26 03 	lds	r25, 0x0326
    204e:	99 83       	std	Y+1, r25	; 0x01
	temp[1] = rfAddress & 0xFF;
    2050:	8a 83       	std	Y+2, r24	; 0x02
	temp[2] = 0x00;
    2052:	1b 82       	std	Y+3, r1	; 0x03
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    2054:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2056:	80 e3       	ldi	r24, 0x30	; 48
    2058:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    205c:	8e 01       	movw	r16, r28
    205e:	0f 5f       	subi	r16, 0xFF	; 255
    2060:	1f 4f       	sbci	r17, 0xFF	; 255
    2062:	c8 01       	movw	r24, r16
    2064:	63 e0       	ldi	r22, 0x03	; 3
    2066:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <SPI_Write_Block>
    mirf_CSN_hi;
    206a:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    206c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    206e:	8a e2       	ldi	r24, 0x2A	; 42
    2070:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    2074:	c8 01       	movw	r24, r16
    2076:	63 e0       	ldi	r22, 0x03	; 3
    2078:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <SPI_Write_Block>
    mirf_CSN_hi;
    207c:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    207e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2080:	81 e2       	ldi	r24, 0x21	; 33
    2082:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    2086:	81 e0       	ldi	r24, 0x01	; 1
    2088:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    mirf_CSN_hi;
    208c:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    208e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2090:	82 e2       	ldi	r24, 0x22	; 34
    2092:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    2096:	81 e0       	ldi	r24, 0x01	; 1
    2098:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    mirf_CSN_hi;
    209c:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    209e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    20a0:	84 e2       	ldi	r24, 0x24	; 36
    20a2:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    20a6:	82 e1       	ldi	r24, 0x12	; 18
    20a8:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    mirf_CSN_hi;
    20ac:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    20ae:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    20b0:	85 e2       	ldi	r24, 0x25	; 37
    20b2:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    20b6:	88 e2       	ldi	r24, 0x28	; 40
    20b8:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    mirf_CSN_hi;
    20bc:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    20be:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    20c0:	81 e3       	ldi	r24, 0x31	; 49
    20c2:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    20c6:	8d e0       	ldi	r24, 0x0D	; 13
    20c8:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    mirf_CSN_hi;
    20cc:	28 9a       	sbi	0x05, 0	; 5

	// RX payload size; it isn't needed because the dynamic payload length is activated for ACK+PAYLOAD feature
    mirf_config_register(RX_PW_P0, PAYLOAD_SIZE);

	// enable extra features
    mirf_CSN_lo;
    20ce:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_ACTIVATE);
    20d0:	80 e5       	ldi	r24, 0x50	; 80
    20d2:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    SPI_Write_Byte(0x73);
    20d6:	83 e7       	ldi	r24, 0x73	; 115
    20d8:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    mirf_CSN_hi;
    20dc:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    20de:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    20e0:	8c e3       	ldi	r24, 0x3C	; 60
    20e2:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    20e6:	81 e0       	ldi	r24, 0x01	; 1
    20e8:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    mirf_CSN_hi;
    20ec:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    20ee:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    20f0:	8d e3       	ldi	r24, 0x3D	; 61
    20f2:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    20f6:	86 e0       	ldi	r24, 0x06	; 6
    20f8:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    mirf_CSN_hi;
    20fc:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    20fe:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2100:	80 e2       	ldi	r24, 0x20	; 32
    2102:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    2106:	8f e0       	ldi	r24, 0x0F	; 15
    2108:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    mirf_CSN_hi;
    210c:	28 9a       	sbi	0x05, 0	; 5

    // Start receiver 
    //PTX = 0;        // Start in receiving mode
    //RX_POWERUP;     // Power up in receiving mode
    //mirf_CE_hi;     // Listening for pakets
}
    210e:	0f 90       	pop	r0
    2110:	0f 90       	pop	r0
    2112:	0f 90       	pop	r0
    2114:	cf 91       	pop	r28
    2116:	df 91       	pop	r29
    2118:	1f 91       	pop	r17
    211a:	0f 91       	pop	r16
    211c:	08 95       	ret

0000211e <mirf_init>:
// Initializes pins as interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    //DDRB |= ((1<<CSN)|(1<<CE));
    mirf_CE_hi;
    211e:	2c 9a       	sbi	0x05, 4	; 5
    mirf_CSN_hi;
    2120:	28 9a       	sbi	0x05, 0	; 5

	mirf_config();
    2122:	0e 94 0c 10 	call	0x2018	; 0x2018 <mirf_config>
}
    2126:	08 95       	ret

00002128 <mirf_set_RADDR>:
    //mirf_CE_hi;     // Listening for pakets
}

void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    2128:	cf 93       	push	r28
    212a:	df 93       	push	r29
    212c:	ec 01       	movw	r28, r24
    mirf_CE_lo;
    212e:	2c 98       	cbi	0x05, 4	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    2130:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2132:	8a e2       	ldi	r24, 0x2A	; 42
    2134:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    2138:	ce 01       	movw	r24, r28
    213a:	65 e0       	ldi	r22, 0x05	; 5
    213c:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <SPI_Write_Block>
    mirf_CSN_hi;
    2140:	28 9a       	sbi	0x05, 0	; 5
void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    mirf_CE_lo;
    mirf_write_register(RX_ADDR_P0,adr,5);
    mirf_CE_hi;
    2142:	2c 9a       	sbi	0x05, 4	; 5
}
    2144:	df 91       	pop	r29
    2146:	cf 91       	pop	r28
    2148:	08 95       	ret

0000214a <mirf_set_TADDR>:

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
    214a:	cf 93       	push	r28
    214c:	df 93       	push	r29
    214e:	ec 01       	movw	r28, r24
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    2150:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2152:	80 e3       	ldi	r24, 0x30	; 48
    2154:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    2158:	ce 01       	movw	r24, r28
    215a:	65 e0       	ldi	r22, 0x05	; 5
    215c:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <SPI_Write_Block>
    mirf_CSN_hi;
    2160:	28 9a       	sbi	0x05, 0	; 5

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
	mirf_write_register(TX_ADDR, adr,5);
}
    2162:	df 91       	pop	r29
    2164:	cf 91       	pop	r28
    2166:	08 95       	ret

00002168 <mirf_data_ready>:
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
    2168:	80 91 3d 05 	lds	r24, 0x053D
    216c:	88 23       	and	r24, r24
    216e:	11 f0       	breq	.+4      	; 0x2174 <mirf_data_ready+0xc>
    2170:	80 e0       	ldi	r24, 0x00	; 0
    mirf_CSN_lo;                                // Pull down chip select
    status = SPI_Write_Byte(NOP);               // Read status register
    mirf_CSN_hi;                                // Pull up chip select
    return status & (1<<RX_DR);

}
    2172:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    2174:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
    2176:	8f ef       	ldi	r24, 0xFF	; 255
    2178:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
    217c:	28 9a       	sbi	0x05, 0	; 5
    return status & (1<<RX_DR);
    217e:	80 74       	andi	r24, 0x40	; 64
    2180:	08 95       	ret

00002182 <rx_fifo_is_empty>:

}

uint8_t rx_fifo_is_empty() {
    2182:	df 93       	push	r29
    2184:	cf 93       	push	r28
    2186:	0f 92       	push	r0
    2188:	cd b7       	in	r28, 0x3d	; 61
    218a:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t fifo_status = 0;
    218c:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
    218e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    2190:	87 e1       	ldi	r24, 0x17	; 23
    2192:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    2196:	be 01       	movw	r22, r28
    2198:	6f 5f       	subi	r22, 0xFF	; 255
    219a:	7f 4f       	sbci	r23, 0xFF	; 255
    219c:	cb 01       	movw	r24, r22
    219e:	41 e0       	ldi	r20, 0x01	; 1
    21a0:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    21a4:	28 9a       	sbi	0x05, 0	; 5
	
	uint8_t fifo_status = 0;

	mirf_read_register(FIFO_STATUS, &fifo_status, 1);
	
	return (uint8_t)(fifo_status&0x01);
    21a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    21a8:	81 70       	andi	r24, 0x01	; 1
    21aa:	0f 90       	pop	r0
    21ac:	cf 91       	pop	r28
    21ae:	df 91       	pop	r29
    21b0:	08 95       	ret

000021b2 <flush_rx_fifo>:

void flush_rx_fifo() {

    mirf_CSN_lo;
    21b2:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
    21b4:	82 ee       	ldi	r24, 0xE2	; 226
    21b6:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    mirf_CSN_hi;
    21ba:	28 9a       	sbi	0x05, 0	; 5

}
    21bc:	08 95       	ret

000021be <mirf_get_data>:

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    21be:	cf 93       	push	r28
    21c0:	df 93       	push	r29
    21c2:	ec 01       	movw	r28, r24
    mirf_CSN_lo;                               		// Pull down chip select
    21c4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    21c6:	81 e6       	ldi	r24, 0x61	; 97
    21c8:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    21cc:	ce 01       	movw	r24, r28
    21ce:	be 01       	movw	r22, r28
    21d0:	4d e0       	ldi	r20, 0x0D	; 13
    21d2:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
    21d6:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    21d8:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    21da:	87 e2       	ldi	r24, 0x27	; 39
    21dc:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    21e0:	80 e4       	ldi	r24, 0x40	; 64
    21e2:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    mirf_CSN_hi;
    21e6:	28 9a       	sbi	0x05, 0	; 5
    mirf_CSN_lo;                               		// Pull down chip select
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    mirf_CSN_hi;                               		// Pull up chip select
    mirf_config_register(STATUS,(1<<RX_DR));   		// Reset status register
}
    21e8:	df 91       	pop	r29
    21ea:	cf 91       	pop	r28
    21ec:	08 95       	ret

000021ee <mirf_config_register>:

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    21ee:	df 93       	push	r29
    21f0:	cf 93       	push	r28
    21f2:	0f 92       	push	r0
    21f4:	cd b7       	in	r28, 0x3d	; 61
    21f6:	de b7       	in	r29, 0x3e	; 62
    mirf_CSN_lo;
    21f8:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    21fa:	8f 71       	andi	r24, 0x1F	; 31
    21fc:	80 62       	ori	r24, 0x20	; 32
    21fe:	69 83       	std	Y+1, r22	; 0x01
    2200:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    2204:	69 81       	ldd	r22, Y+1	; 0x01
    2206:	86 2f       	mov	r24, r22
    2208:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    mirf_CSN_hi;
    220c:	28 9a       	sbi	0x05, 0	; 5
}
    220e:	0f 90       	pop	r0
    2210:	cf 91       	pop	r28
    2212:	df 91       	pop	r29
    2214:	08 95       	ret

00002216 <mirf_read_register>:

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    2216:	0f 93       	push	r16
    2218:	1f 93       	push	r17
    221a:	df 93       	push	r29
    221c:	cf 93       	push	r28
    221e:	0f 92       	push	r0
    2220:	cd b7       	in	r28, 0x3d	; 61
    2222:	de b7       	in	r29, 0x3e	; 62
    2224:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    2226:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    2228:	8f 71       	andi	r24, 0x1F	; 31
    222a:	49 83       	std	Y+1, r20	; 0x01
    222c:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    2230:	c8 01       	movw	r24, r16
    2232:	b8 01       	movw	r22, r16
    2234:	49 81       	ldd	r20, Y+1	; 0x01
    2236:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    223a:	28 9a       	sbi	0x05, 0	; 5
}
    223c:	0f 90       	pop	r0
    223e:	cf 91       	pop	r28
    2240:	df 91       	pop	r29
    2242:	1f 91       	pop	r17
    2244:	0f 91       	pop	r16
    2246:	08 95       	ret

00002248 <mirf_write_register>:

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    2248:	0f 93       	push	r16
    224a:	1f 93       	push	r17
    224c:	df 93       	push	r29
    224e:	cf 93       	push	r28
    2250:	0f 92       	push	r0
    2252:	cd b7       	in	r28, 0x3d	; 61
    2254:	de b7       	in	r29, 0x3e	; 62
    2256:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    2258:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    225a:	8f 71       	andi	r24, 0x1F	; 31
    225c:	80 62       	ori	r24, 0x20	; 32
    225e:	49 83       	std	Y+1, r20	; 0x01
    2260:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    2264:	c8 01       	movw	r24, r16
    2266:	49 81       	ldd	r20, Y+1	; 0x01
    2268:	64 2f       	mov	r22, r20
    226a:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <SPI_Write_Block>
    mirf_CSN_hi;
    226e:	28 9a       	sbi	0x05, 0	; 5
}
    2270:	0f 90       	pop	r0
    2272:	cf 91       	pop	r28
    2274:	df 91       	pop	r29
    2276:	1f 91       	pop	r17
    2278:	0f 91       	pop	r16
    227a:	08 95       	ret

0000227c <mirf_send>:


void mirf_send(uint8_t * value, uint8_t len) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
    227c:	0f 93       	push	r16
    227e:	1f 93       	push	r17
    2280:	df 93       	push	r29
    2282:	cf 93       	push	r28
    2284:	0f 92       	push	r0
    2286:	cd b7       	in	r28, 0x3d	; 61
    2288:	de b7       	in	r29, 0x3e	; 62
    228a:	8c 01       	movw	r16, r24
    while (PTX) {}                  // Wait until last paket is send
    228c:	80 91 3d 05 	lds	r24, 0x053D
    2290:	88 23       	and	r24, r24
    2292:	e1 f7       	brne	.-8      	; 0x228c <mirf_send+0x10>

    mirf_CE_lo;
    2294:	2c 98       	cbi	0x05, 4	; 5

    PTX = 1;                        // Set to transmitter mode
    2296:	81 e0       	ldi	r24, 0x01	; 1
    2298:	80 93 3d 05 	sts	0x053D, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    229c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    229e:	80 e2       	ldi	r24, 0x20	; 32
    22a0:	69 83       	std	Y+1, r22	; 0x01
    22a2:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    22a6:	8a e4       	ldi	r24, 0x4A	; 74
    22a8:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    mirf_CSN_hi;
    22ac:	28 9a       	sbi	0x05, 0	; 5
    mirf_CE_lo;

    PTX = 1;                        // Set to transmitter mode
    TX_POWERUP;                     // Power up
    
    mirf_CSN_lo;                    // Pull down chip select
    22ae:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( FLUSH_TX );     // Write cmd to flush tx fifo
    22b0:	81 ee       	ldi	r24, 0xE1	; 225
    22b2:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    mirf_CSN_hi;                    // Pull up chip select
    22b6:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CSN_lo;                    // Pull down chip select
    22b8:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( W_TX_PAYLOAD ); // Write cmd to write payload
    22ba:	80 ea       	ldi	r24, 0xA0	; 160
    22bc:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    SPI_Write_Block(value,len);   // Write payload
    22c0:	c8 01       	movw	r24, r16
    22c2:	69 81       	ldd	r22, Y+1	; 0x01
    22c4:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <SPI_Write_Block>
    mirf_CSN_hi;                    // Pull up chip select
    22c8:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CE_hi;                     // Start transmission
    22ca:	2c 9a       	sbi	0x05, 4	; 5
}
    22cc:	0f 90       	pop	r0
    22ce:	cf 91       	pop	r28
    22d0:	df 91       	pop	r29
    22d2:	1f 91       	pop	r17
    22d4:	0f 91       	pop	r16
    22d6:	08 95       	ret

000022d8 <writeAckPayload>:

void writeAckPayload(unsigned char *data, unsigned char size) {
    22d8:	ef 92       	push	r14
    22da:	ff 92       	push	r15
    22dc:	0f 93       	push	r16
    22de:	1f 93       	push	r17
    22e0:	df 93       	push	r29
    22e2:	cf 93       	push	r28
    22e4:	0f 92       	push	r0
    22e6:	cd b7       	in	r28, 0x3d	; 61
    22e8:	de b7       	in	r29, 0x3e	; 62
    22ea:	18 2f       	mov	r17, r24
    22ec:	06 2f       	mov	r16, r22
	return pWidth;
}

void flushTxFifo() {

    mirf_CSN_lo;
    22ee:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    22f0:	81 ee       	ldi	r24, 0xE1	; 225
    22f2:	99 83       	std	Y+1, r25	; 0x01
    22f4:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    mirf_CSN_hi;
    22f8:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
    22fa:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
    22fc:	88 ea       	ldi	r24, 0xA8	; 168
    22fe:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>

	for(k=0; k<size; k++) {
    2302:	99 81       	ldd	r25, Y+1	; 0x01
    2304:	00 23       	and	r16, r16
    2306:	61 f0       	breq	.+24     	; 0x2320 <writeAckPayload+0x48>
    2308:	61 2f       	mov	r22, r17
    230a:	79 2f       	mov	r23, r25
    230c:	7b 01       	movw	r14, r22
		SPI_Write_Byte(data[k]);
    230e:	f7 01       	movw	r30, r14
    2310:	81 91       	ld	r24, Z+
    2312:	7f 01       	movw	r14, r30
    2314:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>

    mirf_CSN_lo;

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);

	for(k=0; k<size; k++) {
    2318:	8e 2d       	mov	r24, r14
    231a:	81 1b       	sub	r24, r17
    231c:	80 17       	cp	r24, r16
    231e:	b8 f3       	brcs	.-18     	; 0x230e <writeAckPayload+0x36>
		SPI_Write_Byte(data[k]);
	}	

    mirf_CSN_hi;
    2320:	28 9a       	sbi	0x05, 0	; 5


}
    2322:	0f 90       	pop	r0
    2324:	cf 91       	pop	r28
    2326:	df 91       	pop	r29
    2328:	1f 91       	pop	r17
    232a:	0f 91       	pop	r16
    232c:	ff 90       	pop	r15
    232e:	ef 90       	pop	r14
    2330:	08 95       	ret

00002332 <readPayloadWidthFromTopFifo>:

uint8_t readPayloadWidthFromTopFifo() {
	uint8_t pWidth = 0;

    mirf_CSN_lo;
    2332:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_R_RX_PL_WID);
    2334:	80 e6       	ldi	r24, 0x60	; 96
    2336:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
	pWidth = SPI_Write_Byte(NOP); 	// not specified in the datasheet but the "NRF_R_RX_PL_WID" has a parameter,
    233a:	8f ef       	ldi	r24, 0xFF	; 255
    233c:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
									// we need to send a NOP to receive the actual payload size
    mirf_CSN_hi;
    2340:	28 9a       	sbi	0x05, 0	; 5
	
	return pWidth;
}
    2342:	08 95       	ret

00002344 <readPayloadWidthFromPipe0>:

uint8_t readPayloadWidthFromPipe0() {
    2344:	df 93       	push	r29
    2346:	cf 93       	push	r28
    2348:	0f 92       	push	r0
    234a:	cd b7       	in	r28, 0x3d	; 61
    234c:	de b7       	in	r29, 0x3e	; 62
	uint8_t pWidth = 0;
    234e:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
    2350:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    2352:	81 e1       	ldi	r24, 0x11	; 17
    2354:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    2358:	be 01       	movw	r22, r28
    235a:	6f 5f       	subi	r22, 0xFF	; 255
    235c:	7f 4f       	sbci	r23, 0xFF	; 255
    235e:	cb 01       	movw	r24, r22
    2360:	41 e0       	ldi	r20, 0x01	; 1
    2362:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    2366:	28 9a       	sbi	0x05, 0	; 5
	uint8_t pWidth = 0;

	mirf_read_register(RX_PW_P0, &pWidth, 1);
	
	return pWidth;
}
    2368:	89 81       	ldd	r24, Y+1	; 0x01
    236a:	0f 90       	pop	r0
    236c:	cf 91       	pop	r28
    236e:	df 91       	pop	r29
    2370:	08 95       	ret

00002372 <flushTxFifo>:

void flushTxFifo() {

    mirf_CSN_lo;
    2372:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    2374:	81 ee       	ldi	r24, 0xE1	; 225
    2376:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    mirf_CSN_hi;
    237a:	28 9a       	sbi	0x05, 0	; 5

}
    237c:	08 95       	ret

0000237e <handleRFCommands>:

void handleRFCommands() {
    237e:	ff 92       	push	r15
    2380:	0f 93       	push	r16
    2382:	1f 93       	push	r17
    2384:	df 93       	push	r29
    2386:	cf 93       	push	r28
    2388:	0f 92       	push	r0
    238a:	cd b7       	in	r28, 0x3d	; 61
    238c:	de b7       	in	r29, 0x3e	; 62
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
    238e:	80 91 3d 05 	lds	r24, 0x053D
    2392:	88 23       	and	r24, r24
    2394:	39 f0       	breq	.+14     	; 0x23a4 <handleRFCommands+0x26>

		

	}

}
    2396:	0f 90       	pop	r0
    2398:	cf 91       	pop	r28
    239a:	df 91       	pop	r29
    239c:	1f 91       	pop	r17
    239e:	0f 91       	pop	r16
    23a0:	ff 90       	pop	r15
    23a2:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    23a4:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
    23a6:	8f ef       	ldi	r24, 0xFF	; 255
    23a8:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
    23ac:	28 9a       	sbi	0x05, 0	; 5

	unsigned int i=0;
	//uint8_t pWidth = 0;
	//uint8_t pWidthP0 = 0;

	if(mirf_data_ready()) {
    23ae:	86 ff       	sbrs	r24, 6
    23b0:	f2 cf       	rjmp	.-28     	; 0x2396 <handleRFCommands+0x18>
		//if(spiCommError) {
		//	usart0Transmit(0xFE,1);
		//	return;
		//}

		rfFlags |= 0x02;
    23b2:	80 91 27 03 	lds	r24, 0x0327
    23b6:	82 60       	ori	r24, 0x02	; 2
    23b8:	80 93 27 03 	sts	0x0327, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    23bc:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    23be:	87 e2       	ldi	r24, 0x27	; 39
    23c0:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    23c4:	80 e7       	ldi	r24, 0x70	; 112
    23c6:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    mirf_CSN_hi;
    23ca:	28 9a       	sbi	0x05, 0	; 5

}

uint8_t rx_fifo_is_empty() {
	
	uint8_t fifo_status = 0;
    23cc:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
    23ce:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    23d0:	87 e1       	ldi	r24, 0x17	; 23
    23d2:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    23d6:	be 01       	movw	r22, r28
    23d8:	6f 5f       	subi	r22, 0xFF	; 255
    23da:	7f 4f       	sbci	r23, 0xFF	; 255
    23dc:	cb 01       	movw	r24, r22
    23de:	41 e0       	ldi	r20, 0x01	; 1
    23e0:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    23e4:	28 9a       	sbi	0x05, 0	; 5
	
	uint8_t fifo_status = 0;

	mirf_read_register(FIFO_STATUS, &fifo_status, 1);
	
	return (uint8_t)(fifo_status&0x01);
    23e6:	89 81       	ldd	r24, Y+1	; 0x01
		// aren't present in the fifo with consequent wrong data read and wrong behavior of the robot.
		// To avoid this situtation we add this check before actually reading from the fifo to be 
		// sure there are correct data to be read.
		// We don't know why the IRQ for data reception is raised, maybe is not correctly reset sometimes
		// or it is raised when it shouldn't...
		if(rx_fifo_is_empty()) {
    23e8:	80 fd       	sbrc	r24, 0
    23ea:	d5 cf       	rjmp	.-86     	; 0x2396 <handleRFCommands+0x18>
}

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    mirf_CSN_lo;                               		// Pull down chip select
    23ec:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    23ee:	81 e6       	ldi	r24, 0x61	; 97
    23f0:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    23f4:	82 e9       	ldi	r24, 0x92	; 146
    23f6:	99 e0       	ldi	r25, 0x09	; 9
    23f8:	bc 01       	movw	r22, r24
    23fa:	4d e0       	ldi	r20, 0x0D	; 13
    23fc:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
    2400:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    2402:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2404:	87 e2       	ldi	r24, 0x27	; 39
    2406:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    240a:	80 e4       	ldi	r24, 0x40	; 64
    240c:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    mirf_CSN_hi;
    2410:	28 9a       	sbi	0x05, 0	; 5
	return (uint8_t)(fifo_status&0x01);
}

void flush_rx_fifo() {

    mirf_CSN_lo;
    2412:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
    2414:	82 ee       	ldi	r24, 0xE2	; 226
    2416:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    mirf_CSN_hi;
    241a:	28 9a       	sbi	0x05, 0	; 5
		mirf_get_data(rfData);
		flush_rx_fifo();

		//usartTransmit(rfData[0]);

		if(rfDebugMode==1) {
    241c:	80 91 29 03 	lds	r24, 0x0329
    2420:	81 30       	cpi	r24, 0x01	; 1
    2422:	09 f4       	brne	.+2      	; 0x2426 <handleRFCommands+0xa8>
    2424:	4b c1       	rjmp	.+662    	; 0x26bc <handleRFCommands+0x33e>

			//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
			// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
			// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    2426:	40 91 92 09 	lds	r20, 0x0992
    242a:	24 2f       	mov	r18, r20
    242c:	44 23       	and	r20, r20
    242e:	09 f0       	breq	.+2      	; 0x2432 <handleRFCommands+0xb4>
    2430:	9c c1       	rjmp	.+824    	; 0x276a <handleRFCommands+0x3ec>
    2432:	50 91 93 09 	lds	r21, 0x0993
    2436:	e5 2f       	mov	r30, r21
    2438:	55 23       	and	r21, r21
    243a:	09 f4       	brne	.+2      	; 0x243e <handleRFCommands+0xc0>
    243c:	10 c2       	rjmp	.+1056   	; 0x285e <handleRFCommands+0x4e0>

				sleep(60);
    243e:	00 91 94 09 	lds	r16, 0x0994

			}

			if(calibrateOdomFlag==0) { 
    2442:	80 91 76 05 	lds	r24, 0x0576
    2446:	88 23       	and	r24, r24
    2448:	41 f5       	brne	.+80     	; 0x249a <handleRFCommands+0x11c>
				speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    244a:	70 91 96 09 	lds	r23, 0x0996
    244e:	27 2f       	mov	r18, r23
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	2f 77       	andi	r18, 0x7F	; 127
    2454:	30 70       	andi	r19, 0x00	; 0
    2456:	30 93 24 03 	sts	0x0324, r19
    245a:	20 93 23 03 	sts	0x0323, r18
				speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
    245e:	60 91 97 09 	lds	r22, 0x0997
    2462:	86 2f       	mov	r24, r22
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	8f 77       	andi	r24, 0x7F	; 127
    2468:	90 70       	andi	r25, 0x00	; 0
    246a:	90 93 22 03 	sts	0x0322, r25
    246e:	80 93 21 03 	sts	0x0321, r24
											// in the same range of the measured speed that is 0..800.
											// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
											// this means that the range is more or less 0..400.


				if((rfData[4]&0x80)==0x80) {			// motor right forward
    2472:	77 fd       	sbrc	r23, 7
    2474:	03 c0       	rjmp	.+6      	; 0x247c <handleRFCommands+0xfe>
					pwm_right_desired = speedr; 		// speed received (0..127) is expressed in 1/5 of mm/s (0..635 mm/s)
				} else {								// backward
					pwm_right_desired = -(speedr);
    2476:	30 95       	com	r19
    2478:	21 95       	neg	r18
    247a:	3f 4f       	sbci	r19, 0xFF	; 255
    247c:	30 93 0a 03 	sts	0x030A, r19
    2480:	20 93 09 03 	sts	0x0309, r18
				}

				if((rfData[5]&0x80)==0x80) {			// motor left forward
    2484:	67 fd       	sbrc	r22, 7
    2486:	03 c0       	rjmp	.+6      	; 0x248e <handleRFCommands+0x110>
					pwm_left_desired = speedl;
				} else {								// backward
					pwm_left_desired = -(speedl);
    2488:	90 95       	com	r25
    248a:	81 95       	neg	r24
    248c:	9f 4f       	sbci	r25, 0xFF	; 255
    248e:	90 93 0c 03 	sts	0x030C, r25
    2492:	80 93 0b 03 	sts	0x030B, r24
    2496:	24 2f       	mov	r18, r20
    2498:	e5 2f       	mov	r30, r21

			}


			for(i=0; i<3; i++) {
				dataLED[i]=rfData[i]&0xFF;
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	30 93 7b 09 	sts	0x097B, r19
    24a0:	20 93 7a 09 	sts	0x097A, r18
    24a4:	f0 e0       	ldi	r31, 0x00	; 0
    24a6:	f0 93 7d 09 	sts	0x097D, r31
    24aa:	e0 93 7c 09 	sts	0x097C, r30
    24ae:	10 e0       	ldi	r17, 0x00	; 0
    24b0:	10 93 7f 09 	sts	0x097F, r17
    24b4:	00 93 7e 09 	sts	0x097E, r16
			}
			pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
    24b8:	92 2f       	mov	r25, r18
    24ba:	88 27       	eor	r24, r24
    24bc:	82 1b       	sub	r24, r18
    24be:	93 0b       	sbc	r25, r19
    24c0:	24 e6       	ldi	r18, 0x64	; 100
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	b9 01       	movw	r22, r18
    24c6:	0e 94 43 57 	call	0xae86	; 0xae86 <__udivmodhi4>
    24ca:	f6 2e       	mov	r15, r22
    24cc:	f0 94       	com	r15
    24ce:	f0 92 0c 02 	sts	0x020C, r15
			pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
    24d2:	5e 2f       	mov	r21, r30
    24d4:	44 27       	eor	r20, r20
    24d6:	4e 1b       	sub	r20, r30
    24d8:	5f 0b       	sbc	r21, r31
    24da:	ca 01       	movw	r24, r20
    24dc:	b9 01       	movw	r22, r18
    24de:	0e 94 43 57 	call	0xae86	; 0xae86 <__udivmodhi4>
    24e2:	60 95       	com	r22
    24e4:	60 93 0e 02 	sts	0x020E, r22
			pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
    24e8:	50 2f       	mov	r21, r16
    24ea:	44 27       	eor	r20, r20
    24ec:	40 1b       	sub	r20, r16
    24ee:	51 0b       	sbc	r21, r17
    24f0:	ca 01       	movw	r24, r20
    24f2:	b9 01       	movw	r22, r18
    24f4:	0e 94 43 57 	call	0xae86	; 0xae86 <__udivmodhi4>
    24f8:	60 95       	com	r22
    24fa:	60 93 0d 02 	sts	0x020D, r22
			updateRedLed(pwm_red);
    24fe:	8f 2d       	mov	r24, r15
    2500:	0e 94 91 3f 	call	0x7f22	; 0x7f22 <updateRedLed>
			updateGreenLed(pwm_green);
    2504:	80 91 0d 02 	lds	r24, 0x020D
    2508:	0e 94 a5 3f 	call	0x7f4a	; 0x7f4a <updateGreenLed>
			updateBlueLed(pwm_blue);
    250c:	80 91 0e 02 	lds	r24, 0x020E
    2510:	0e 94 b9 3f 	call	0x7f72	; 0x7f72 <updateBlueLed>


			if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
    2514:	80 91 95 09 	lds	r24, 0x0995
    2518:	80 ff       	sbrs	r24, 0
    251a:	59 c1       	rjmp	.+690    	; 0x27ce <handleRFCommands+0x450>
				LED_IR1_LOW;
    251c:	44 98       	cbi	0x08, 4	; 8
			} else {
				LED_IR1_HIGH;
			}

			if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
    251e:	81 ff       	sbrs	r24, 1
    2520:	54 c1       	rjmp	.+680    	; 0x27ca <handleRFCommands+0x44c>
				LED_IR2_LOW;
    2522:	45 98       	cbi	0x08, 5	; 8
			} else {
				LED_IR2_HIGH;
			}

			if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
    2524:	98 2f       	mov	r25, r24
    2526:	82 ff       	sbrs	r24, 2
    2528:	4d c1       	rjmp	.+666    	; 0x27c4 <handleRFCommands+0x446>
				irEnabled = 1;
    252a:	21 e0       	ldi	r18, 0x01	; 1
    252c:	20 93 12 02 	sts	0x0212, r18
			} else {
				irEnabled = 0;
			}

			if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
    2530:	84 fd       	sbrc	r24, 4
    2532:	a2 c1       	rjmp	.+836    	; 0x2878 <handleRFCommands+0x4fa>
				calibrateSensors();
				resetOdometry();
			}

			if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
    2534:	86 ff       	sbrs	r24, 6
    2536:	43 c1       	rjmp	.+646    	; 0x27be <handleRFCommands+0x440>
				obstacleAvoidanceEnabled = 1;
    2538:	81 e0       	ldi	r24, 0x01	; 1
    253a:	80 93 7c 04 	sts	0x047C, r24
			} else {
				obstacleAvoidanceEnabled = 0;
			}

			if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
    253e:	97 fd       	sbrc	r25, 7
    2540:	c7 c1       	rjmp	.+910    	; 0x28d0 <handleRFCommands+0x552>
				cliffAvoidanceEnabled = 1;
			} else {
				cliffAvoidanceEnabled = 0;
    2542:	10 92 7d 04 	sts	0x047D, r1
			}

			// handle small green leds
			#ifdef HW_REV_3_1			

				if(bit_is_set(rfData[6], 0) ) {
    2546:	80 91 98 09 	lds	r24, 0x0998
    254a:	80 ff       	sbrs	r24, 0
    254c:	32 c1       	rjmp	.+612    	; 0x27b2 <handleRFCommands+0x434>
					GREEN_LED0_ON;
    254e:	80 91 0b 01 	lds	r24, 0x010B
    2552:	8e 7f       	andi	r24, 0xFE	; 254
    2554:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED0_OFF;
				}
				
				if(bit_is_set(rfData[6], 1) ) {
    2558:	80 91 98 09 	lds	r24, 0x0998
    255c:	81 ff       	sbrs	r24, 1
    255e:	23 c1       	rjmp	.+582    	; 0x27a6 <handleRFCommands+0x428>
					GREEN_LED1_ON;
    2560:	80 91 0b 01 	lds	r24, 0x010B
    2564:	8d 7f       	andi	r24, 0xFD	; 253
    2566:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED1_OFF;
				}
				
				if(bit_is_set(rfData[6], 2) ) {
    256a:	80 91 98 09 	lds	r24, 0x0998
    256e:	82 ff       	sbrs	r24, 2
    2570:	14 c1       	rjmp	.+552    	; 0x279a <handleRFCommands+0x41c>
					GREEN_LED2_ON;
    2572:	80 91 0b 01 	lds	r24, 0x010B
    2576:	8b 7f       	andi	r24, 0xFB	; 251
    2578:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED2_OFF;
				}												

				if(bit_is_set(rfData[6], 3) ) {
    257c:	80 91 98 09 	lds	r24, 0x0998
    2580:	83 ff       	sbrs	r24, 3
    2582:	09 c1       	rjmp	.+530    	; 0x2796 <handleRFCommands+0x418>
					GREEN_LED3_ON;
    2584:	a3 98       	cbi	0x14, 3	; 20
				} else {
					GREEN_LED3_OFF;
				}

				if(bit_is_set(rfData[6], 4) ) {
    2586:	80 91 98 09 	lds	r24, 0x0998
    258a:	84 ff       	sbrs	r24, 4
    258c:	fe c0       	rjmp	.+508    	; 0x278a <handleRFCommands+0x40c>
					GREEN_LED4_ON;
    258e:	80 91 0b 01 	lds	r24, 0x010B
    2592:	8f 7e       	andi	r24, 0xEF	; 239
    2594:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED4_OFF;
				}

				if(bit_is_set(rfData[6], 5) ) {
    2598:	80 91 98 09 	lds	r24, 0x0998
    259c:	85 ff       	sbrs	r24, 5
    259e:	ef c0       	rjmp	.+478    	; 0x277e <handleRFCommands+0x400>
					GREEN_LED5_ON;
    25a0:	80 91 0b 01 	lds	r24, 0x010B
    25a4:	8f 7d       	andi	r24, 0xDF	; 223
    25a6:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED5_OFF;
				}

				if(bit_is_set(rfData[6], 6) ) {
    25aa:	80 91 98 09 	lds	r24, 0x0998
    25ae:	86 ff       	sbrs	r24, 6
    25b0:	e0 c0       	rjmp	.+448    	; 0x2772 <handleRFCommands+0x3f4>
					GREEN_LED6_ON;
    25b2:	80 91 0b 01 	lds	r24, 0x010B
    25b6:	8f 7b       	andi	r24, 0xBF	; 191
    25b8:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED6_OFF;
				}

				if(bit_is_set(rfData[6], 7) ) {
    25bc:	80 91 98 09 	lds	r24, 0x0998
    25c0:	87 fd       	sbrc	r24, 7
    25c2:	80 c1       	rjmp	.+768    	; 0x28c4 <handleRFCommands+0x546>
					GREEN_LED7_ON;
				} else {
					GREEN_LED7_OFF;
    25c4:	80 91 0b 01 	lds	r24, 0x010B
    25c8:	80 68       	ori	r24, 0x80	; 128
    25ca:	80 93 0b 01 	sts	0x010B, r24
				}

			#endif
		
			if(currentSelector == 8) {
    25ce:	80 91 5c 04 	lds	r24, 0x045C
    25d2:	88 30       	cpi	r24, 0x08	; 8
    25d4:	09 f4       	brne	.+2      	; 0x25d8 <handleRFCommands+0x25a>
    25d6:	58 c1       	rjmp	.+688    	; 0x2888 <handleRFCommands+0x50a>

			// read and handle the remaining bytes of the payload (at the moment not used)


			// write back the ack payload
			ackPayload[0] = packetId&0xFF;
    25d8:	80 91 0b 02 	lds	r24, 0x020B
    25dc:	80 93 ca 08 	sts	0x08CA, r24

			switch(packetId) {
    25e0:	85 30       	cpi	r24, 0x05	; 5
    25e2:	09 f4       	brne	.+2      	; 0x25e6 <handleRFCommands+0x268>
    25e4:	79 c1       	rjmp	.+754    	; 0x28d8 <handleRFCommands+0x55a>
    25e6:	86 30       	cpi	r24, 0x06	; 6
    25e8:	08 f4       	brcc	.+2      	; 0x25ec <handleRFCommands+0x26e>
    25ea:	f3 c0       	rjmp	.+486    	; 0x27d2 <handleRFCommands+0x454>
    25ec:	86 30       	cpi	r24, 0x06	; 6
    25ee:	09 f4       	brne	.+2      	; 0x25f2 <handleRFCommands+0x274>
    25f0:	35 c2       	rjmp	.+1130   	; 0x2a5c <handleRFCommands+0x6de>
    25f2:	87 30       	cpi	r24, 0x07	; 7
    25f4:	09 f0       	breq	.+2      	; 0x25f8 <handleRFCommands+0x27a>
    25f6:	62 c0       	rjmp	.+196    	; 0x26bc <handleRFCommands+0x33e>
					packetId = 7;
					break;


				case 7:
					ackPayload[1] = ((signed long int)leftMotSteps)&0xFF;
    25f8:	60 91 e5 02 	lds	r22, 0x02E5
    25fc:	70 91 e6 02 	lds	r23, 0x02E6
    2600:	80 91 e7 02 	lds	r24, 0x02E7
    2604:	90 91 e8 02 	lds	r25, 0x02E8
    2608:	0e 94 4d 55 	call	0xaa9a	; 0xaa9a <__fixsfsi>
    260c:	60 93 cb 08 	sts	0x08CB, r22
					ackPayload[2] = ((signed long int)leftMotSteps)>>8;
    2610:	70 93 cc 08 	sts	0x08CC, r23
					ackPayload[3] = ((signed long int)leftMotSteps)>>16;
    2614:	80 93 cd 08 	sts	0x08CD, r24
					ackPayload[4] = ((signed long int)leftMotSteps)>>24;
    2618:	90 93 ce 08 	sts	0x08CE, r25
					ackPayload[5] = ((signed long int)rightMotSteps)&0xFF;
    261c:	60 91 e1 02 	lds	r22, 0x02E1
    2620:	70 91 e2 02 	lds	r23, 0x02E2
    2624:	80 91 e3 02 	lds	r24, 0x02E3
    2628:	90 91 e4 02 	lds	r25, 0x02E4
    262c:	0e 94 4d 55 	call	0xaa9a	; 0xaa9a <__fixsfsi>
    2630:	60 93 cf 08 	sts	0x08CF, r22
					ackPayload[6] = ((signed long int)rightMotSteps)>>8;
    2634:	70 93 d0 08 	sts	0x08D0, r23
					ackPayload[7] = ((signed long int)rightMotSteps)>>16;
    2638:	80 93 d1 08 	sts	0x08D1, r24
					ackPayload[8] = ((signed long int)rightMotSteps)>>24;
    263c:	90 93 d2 08 	sts	0x08D2, r25
					lastTheta = theta;
    2640:	60 91 7f 04 	lds	r22, 0x047F
    2644:	70 91 80 04 	lds	r23, 0x0480
    2648:	80 91 81 04 	lds	r24, 0x0481
    264c:	90 91 82 04 	lds	r25, 0x0482
    2650:	60 93 83 04 	sts	0x0483, r22
    2654:	70 93 84 04 	sts	0x0484, r23
    2658:	80 93 85 04 	sts	0x0485, r24
    265c:	90 93 86 04 	sts	0x0486, r25
					ackPayload[9] = ((signed int)(lastTheta*573.0))&0xFF;	// radians to degrees => 573 = 1800/PI
    2660:	20 e0       	ldi	r18, 0x00	; 0
    2662:	30 e4       	ldi	r19, 0x40	; 64
    2664:	4f e0       	ldi	r20, 0x0F	; 15
    2666:	54 e4       	ldi	r21, 0x44	; 68
    2668:	0e 94 99 56 	call	0xad32	; 0xad32 <__mulsf3>
    266c:	0e 94 4d 55 	call	0xaa9a	; 0xaa9a <__fixsfsi>
    2670:	26 2f       	mov	r18, r22
    2672:	20 93 d3 08 	sts	0x08D3, r18
					ackPayload[10] = ((signed int)(lastTheta*573.0))>>8;				
    2676:	70 93 d4 08 	sts	0x08D4, r23
					ackPayload[11] = ((unsigned int)xPos)&0xFF;
    267a:	60 91 87 04 	lds	r22, 0x0487
    267e:	70 91 88 04 	lds	r23, 0x0488
    2682:	80 91 89 04 	lds	r24, 0x0489
    2686:	90 91 8a 04 	lds	r25, 0x048A
    268a:	0e 94 52 55 	call	0xaaa4	; 0xaaa4 <__fixunssfsi>
    268e:	60 93 d5 08 	sts	0x08D5, r22
					ackPayload[12] = ((unsigned int)xPos)>>8;
    2692:	70 93 d6 08 	sts	0x08D6, r23
					ackPayload[13] = ((unsigned int)yPos)&0xFF;
    2696:	60 91 8b 04 	lds	r22, 0x048B
    269a:	70 91 8c 04 	lds	r23, 0x048C
    269e:	80 91 8d 04 	lds	r24, 0x048D
    26a2:	90 91 8e 04 	lds	r25, 0x048E
    26a6:	0e 94 52 55 	call	0xaaa4	; 0xaaa4 <__fixunssfsi>
    26aa:	60 93 d7 08 	sts	0x08D7, r22
					ackPayload[14] = ((unsigned int)yPos)>>8;
    26ae:	70 93 d8 08 	sts	0x08D8, r23
					//ackPayload[10] = ((unsigned int)(thetaOld*573.0))>>8;
					//ackPayload[11] = ((unsigned int)xPosOld)&0xFF;
					//ackPayload[12] = ((unsigned int)xPosOld)>>8;
					//ackPayload[13] = ((unsigned int)yPosOld)&0xFF;
					//ackPayload[14] = ((unsigned int)yPosOld)>>8;
					ackPayload[15] = 0;
    26b2:	10 92 d9 08 	sts	0x08D9, r1
					packetId = 3;
    26b6:	83 e0       	ldi	r24, 0x03	; 3
    26b8:	80 93 0b 02 	sts	0x020B, r24
	return pWidth;
}

void flushTxFifo() {

    mirf_CSN_lo;
    26bc:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    26be:	81 ee       	ldi	r24, 0xE1	; 225
    26c0:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    mirf_CSN_hi;
    26c4:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
    26c6:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
    26c8:	88 ea       	ldi	r24, 0xA8	; 168
    26ca:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>

	for(k=0; k<size; k++) {
		SPI_Write_Byte(data[k]);
    26ce:	80 91 ca 08 	lds	r24, 0x08CA
    26d2:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    26d6:	80 91 cb 08 	lds	r24, 0x08CB
    26da:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    26de:	80 91 cc 08 	lds	r24, 0x08CC
    26e2:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    26e6:	80 91 cd 08 	lds	r24, 0x08CD
    26ea:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    26ee:	80 91 ce 08 	lds	r24, 0x08CE
    26f2:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    26f6:	80 91 cf 08 	lds	r24, 0x08CF
    26fa:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    26fe:	80 91 d0 08 	lds	r24, 0x08D0
    2702:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    2706:	80 91 d1 08 	lds	r24, 0x08D1
    270a:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    270e:	80 91 d2 08 	lds	r24, 0x08D2
    2712:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    2716:	80 91 d3 08 	lds	r24, 0x08D3
    271a:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    271e:	80 91 d4 08 	lds	r24, 0x08D4
    2722:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    2726:	80 91 d5 08 	lds	r24, 0x08D5
    272a:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    272e:	80 91 d6 08 	lds	r24, 0x08D6
    2732:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    2736:	80 91 d7 08 	lds	r24, 0x08D7
    273a:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    273e:	80 91 d8 08 	lds	r24, 0x08D8
    2742:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    2746:	80 91 d9 08 	lds	r24, 0x08D9
    274a:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
	}	

    mirf_CSN_hi;
    274e:	28 9a       	sbi	0x05, 0	; 5

		

	}

}
    2750:	0f 90       	pop	r0
    2752:	cf 91       	pop	r28
    2754:	df 91       	pop	r29
    2756:	1f 91       	pop	r17
    2758:	0f 91       	pop	r16
    275a:	ff 90       	pop	r15
    275c:	08 95       	ret
			// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
			// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {

				sleep(60);
    275e:	8c e3       	ldi	r24, 0x3C	; 60
    2760:	0e 94 cb 21 	call	0x4396	; 0x4396 <sleep>
    2764:	40 91 92 09 	lds	r20, 0x0992
    2768:	24 2f       	mov	r18, r20
    276a:	50 91 93 09 	lds	r21, 0x0993
    276e:	e5 2f       	mov	r30, r21
    2770:	66 ce       	rjmp	.-820    	; 0x243e <handleRFCommands+0xc0>
				}

				if(bit_is_set(rfData[6], 6) ) {
					GREEN_LED6_ON;
				} else {
					GREEN_LED6_OFF;
    2772:	80 91 0b 01 	lds	r24, 0x010B
    2776:	80 64       	ori	r24, 0x40	; 64
    2778:	80 93 0b 01 	sts	0x010B, r24
    277c:	1f cf       	rjmp	.-450    	; 0x25bc <handleRFCommands+0x23e>
				}

				if(bit_is_set(rfData[6], 5) ) {
					GREEN_LED5_ON;
				} else {
					GREEN_LED5_OFF;
    277e:	80 91 0b 01 	lds	r24, 0x010B
    2782:	80 62       	ori	r24, 0x20	; 32
    2784:	80 93 0b 01 	sts	0x010B, r24
    2788:	10 cf       	rjmp	.-480    	; 0x25aa <handleRFCommands+0x22c>
				}

				if(bit_is_set(rfData[6], 4) ) {
					GREEN_LED4_ON;
				} else {
					GREEN_LED4_OFF;
    278a:	80 91 0b 01 	lds	r24, 0x010B
    278e:	80 61       	ori	r24, 0x10	; 16
    2790:	80 93 0b 01 	sts	0x010B, r24
    2794:	01 cf       	rjmp	.-510    	; 0x2598 <handleRFCommands+0x21a>
				}												

				if(bit_is_set(rfData[6], 3) ) {
					GREEN_LED3_ON;
				} else {
					GREEN_LED3_OFF;
    2796:	a3 9a       	sbi	0x14, 3	; 20
    2798:	f6 ce       	rjmp	.-532    	; 0x2586 <handleRFCommands+0x208>
				}
				
				if(bit_is_set(rfData[6], 2) ) {
					GREEN_LED2_ON;
				} else {
					GREEN_LED2_OFF;
    279a:	80 91 0b 01 	lds	r24, 0x010B
    279e:	84 60       	ori	r24, 0x04	; 4
    27a0:	80 93 0b 01 	sts	0x010B, r24
    27a4:	eb ce       	rjmp	.-554    	; 0x257c <handleRFCommands+0x1fe>
				}
				
				if(bit_is_set(rfData[6], 1) ) {
					GREEN_LED1_ON;
				} else {
					GREEN_LED1_OFF;
    27a6:	80 91 0b 01 	lds	r24, 0x010B
    27aa:	82 60       	ori	r24, 0x02	; 2
    27ac:	80 93 0b 01 	sts	0x010B, r24
    27b0:	dc ce       	rjmp	.-584    	; 0x256a <handleRFCommands+0x1ec>
			#ifdef HW_REV_3_1			

				if(bit_is_set(rfData[6], 0) ) {
					GREEN_LED0_ON;
				} else {
					GREEN_LED0_OFF;
    27b2:	80 91 0b 01 	lds	r24, 0x010B
    27b6:	81 60       	ori	r24, 0x01	; 1
    27b8:	80 93 0b 01 	sts	0x010B, r24
    27bc:	cd ce       	rjmp	.-614    	; 0x2558 <handleRFCommands+0x1da>
			}

			if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
				obstacleAvoidanceEnabled = 1;
			} else {
				obstacleAvoidanceEnabled = 0;
    27be:	10 92 7c 04 	sts	0x047C, r1
    27c2:	bd ce       	rjmp	.-646    	; 0x253e <handleRFCommands+0x1c0>
			}

			if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
				irEnabled = 1;
			} else {
				irEnabled = 0;
    27c4:	10 92 12 02 	sts	0x0212, r1
    27c8:	b3 ce       	rjmp	.-666    	; 0x2530 <handleRFCommands+0x1b2>
			}

			if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
				LED_IR2_LOW;
			} else {
				LED_IR2_HIGH;
    27ca:	45 9a       	sbi	0x08, 5	; 8
    27cc:	ab ce       	rjmp	.-682    	; 0x2524 <handleRFCommands+0x1a6>


			if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
				LED_IR1_LOW;
			} else {
				LED_IR1_HIGH;
    27ce:	44 9a       	sbi	0x08, 4	; 8
    27d0:	a6 ce       	rjmp	.-692    	; 0x251e <handleRFCommands+0x1a0>


			// write back the ack payload
			ackPayload[0] = packetId&0xFF;

			switch(packetId) {
    27d2:	83 30       	cpi	r24, 0x03	; 3
    27d4:	09 f4       	brne	.+2      	; 0x27d8 <handleRFCommands+0x45a>
    27d6:	dc c0       	rjmp	.+440    	; 0x2990 <handleRFCommands+0x612>
    27d8:	84 30       	cpi	r24, 0x04	; 4
    27da:	09 f0       	breq	.+2      	; 0x27de <handleRFCommands+0x460>
    27dc:	6f cf       	rjmp	.-290    	; 0x26bc <handleRFCommands+0x33e>
					#endif
					packetId = 4;
					break;

				case 4:
					ackPayload[1] = proximityResult[4]&0xFF;
    27de:	90 91 71 02 	lds	r25, 0x0271
    27e2:	80 91 72 02 	lds	r24, 0x0272
    27e6:	90 93 cb 08 	sts	0x08CB, r25
					ackPayload[2] = proximityResult[4]>>8;
    27ea:	80 93 cc 08 	sts	0x08CC, r24
					ackPayload[3] = proximityResult[8]&0xFF;
    27ee:	90 91 79 02 	lds	r25, 0x0279
    27f2:	80 91 7a 02 	lds	r24, 0x027A
    27f6:	90 93 cd 08 	sts	0x08CD, r25
					ackPayload[4] = proximityResult[8]>>8;
    27fa:	80 93 ce 08 	sts	0x08CE, r24
					ackPayload[5] = proximityResult[9]&0xFF;
    27fe:	90 91 7b 02 	lds	r25, 0x027B
    2802:	80 91 7c 02 	lds	r24, 0x027C
    2806:	90 93 cf 08 	sts	0x08CF, r25
					ackPayload[6] = proximityResult[9]>>8;
    280a:	80 93 d0 08 	sts	0x08D0, r24
					ackPayload[7] = proximityResult[10]&0xFF;
    280e:	90 91 7d 02 	lds	r25, 0x027D
    2812:	80 91 7e 02 	lds	r24, 0x027E
    2816:	90 93 d1 08 	sts	0x08D1, r25
					ackPayload[8] = proximityResult[10]>>8;
    281a:	80 93 d2 08 	sts	0x08D2, r24
					ackPayload[9] = proximityResult[11]&0xFF;
    281e:	90 91 7f 02 	lds	r25, 0x027F
    2822:	80 91 80 02 	lds	r24, 0x0280
    2826:	90 93 d3 08 	sts	0x08D3, r25
					ackPayload[10] = proximityResult[11]>>8;
    282a:	80 93 d4 08 	sts	0x08D4, r24
					ackPayload[11] = accX&0xFF;
    282e:	90 91 3c 04 	lds	r25, 0x043C
    2832:	80 91 3d 04 	lds	r24, 0x043D
    2836:	90 93 d5 08 	sts	0x08D5, r25
					ackPayload[12] = accX>>8;
    283a:	80 93 d6 08 	sts	0x08D6, r24
					ackPayload[13] = accY&0xFF;
    283e:	90 91 3e 04 	lds	r25, 0x043E
    2842:	80 91 3f 04 	lds	r24, 0x043F
    2846:	90 93 d7 08 	sts	0x08D7, r25
					ackPayload[14] = accY>>8;
    284a:	80 93 d8 08 	sts	0x08D8, r24
					ackPayload[15] = irCommand;
    284e:	80 91 37 04 	lds	r24, 0x0437
    2852:	80 93 d9 08 	sts	0x08D9, r24
					packetId = 5;
    2856:	85 e0       	ldi	r24, 0x05	; 5
    2858:	80 93 0b 02 	sts	0x020B, r24
					break;
    285c:	2f cf       	rjmp	.-418    	; 0x26bc <handleRFCommands+0x33e>

			//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
			// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
			// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    285e:	00 91 94 09 	lds	r16, 0x0994
    2862:	00 23       	and	r16, r16
    2864:	09 f0       	breq	.+2      	; 0x2868 <handleRFCommands+0x4ea>
    2866:	4c c1       	rjmp	.+664    	; 0x2b00 <handleRFCommands+0x782>
    2868:	80 91 95 09 	lds	r24, 0x0995
    286c:	88 30       	cpi	r24, 0x08	; 8
    286e:	09 f4       	brne	.+2      	; 0x2872 <handleRFCommands+0x4f4>
    2870:	49 c1       	rjmp	.+658    	; 0x2b04 <handleRFCommands+0x786>
    2872:	e0 2f       	mov	r30, r16
    2874:	20 2f       	mov	r18, r16
    2876:	e5 cd       	rjmp	.-1078   	; 0x2442 <handleRFCommands+0xc4>
			} else {
				irEnabled = 0;
			}

			if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
				calibrateSensors();
    2878:	0e 94 89 42 	call	0x8512	; 0x8512 <calibrateSensors>
				resetOdometry();
    287c:	0e 94 44 22 	call	0x4488	; 0x4488 <resetOdometry>
    2880:	90 91 95 09 	lds	r25, 0x0995
    2884:	89 2f       	mov	r24, r25
    2886:	56 ce       	rjmp	.-852    	; 0x2534 <handleRFCommands+0x1b6>
				}

			#endif
		
			if(currentSelector == 8) {
				if(calibrateOdomFlag==0) {
    2888:	80 91 76 05 	lds	r24, 0x0576
    288c:	88 23       	and	r24, r24
    288e:	09 f0       	breq	.+2      	; 0x2892 <handleRFCommands+0x514>
    2890:	a3 ce       	rjmp	.-698    	; 0x25d8 <handleRFCommands+0x25a>
					if((rfData[7]&0b00000001)==0b00000001) {
    2892:	80 91 99 09 	lds	r24, 0x0999
    2896:	80 ff       	sbrs	r24, 0
    2898:	9f ce       	rjmp	.-706    	; 0x25d8 <handleRFCommands+0x25a>
						calibrateSensors();
    289a:	0e 94 89 42 	call	0x8512	; 0x8512 <calibrateSensors>
						proximityResult[8] = 1023;	// because the first time this value could be low after calibration
    289e:	8f ef       	ldi	r24, 0xFF	; 255
    28a0:	93 e0       	ldi	r25, 0x03	; 3
    28a2:	90 93 7a 02 	sts	0x027A, r25
    28a6:	80 93 79 02 	sts	0x0279, r24
						proximityResult[11] = 1023;	// and in that case a false black line will be detected
    28aa:	90 93 80 02 	sts	0x0280, r25
    28ae:	80 93 7f 02 	sts	0x027F, r24
						calibState = CALIBRATION_STATE_FIND_THRS_0;
    28b2:	86 e0       	ldi	r24, 0x06	; 6
    28b4:	80 93 69 0b 	sts	0x0B69, r24
						calibVelIndex = 1;
    28b8:	81 e0       	ldi	r24, 0x01	; 1
    28ba:	80 93 c3 08 	sts	0x08C3, r24
						calibrateOdomFlag = 1;
    28be:	80 93 76 05 	sts	0x0576, r24
    28c2:	8a ce       	rjmp	.-748    	; 0x25d8 <handleRFCommands+0x25a>
				} else {
					GREEN_LED6_OFF;
				}

				if(bit_is_set(rfData[6], 7) ) {
					GREEN_LED7_ON;
    28c4:	80 91 0b 01 	lds	r24, 0x010B
    28c8:	8f 77       	andi	r24, 0x7F	; 127
    28ca:	80 93 0b 01 	sts	0x010B, r24
    28ce:	7f ce       	rjmp	.-770    	; 0x25ce <handleRFCommands+0x250>
			} else {
				obstacleAvoidanceEnabled = 0;
			}

			if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
				cliffAvoidanceEnabled = 1;
    28d0:	81 e0       	ldi	r24, 0x01	; 1
    28d2:	80 93 7d 04 	sts	0x047D, r24
    28d6:	37 ce       	rjmp	.-914    	; 0x2546 <handleRFCommands+0x1c8>
					ackPayload[15] = irCommand;
					packetId = 5;
					break;

				case 5:
					ackPayload[1] = proximityValue[0]&0xFF;
    28d8:	80 91 39 02 	lds	r24, 0x0239
    28dc:	90 91 3a 02 	lds	r25, 0x023A
    28e0:	80 93 cb 08 	sts	0x08CB, r24
					ackPayload[2] = proximityValue[0]>>8;
    28e4:	80 91 39 02 	lds	r24, 0x0239
    28e8:	90 91 3a 02 	lds	r25, 0x023A
    28ec:	90 93 cc 08 	sts	0x08CC, r25
					ackPayload[3] = proximityValue[2]&0xFF;
    28f0:	80 91 3d 02 	lds	r24, 0x023D
    28f4:	90 91 3e 02 	lds	r25, 0x023E
    28f8:	80 93 cd 08 	sts	0x08CD, r24
					ackPayload[4] = proximityValue[2]>>8;
    28fc:	80 91 3d 02 	lds	r24, 0x023D
    2900:	90 91 3e 02 	lds	r25, 0x023E
    2904:	90 93 ce 08 	sts	0x08CE, r25
					ackPayload[5] = proximityValue[4]&0xFF;
    2908:	80 91 41 02 	lds	r24, 0x0241
    290c:	90 91 42 02 	lds	r25, 0x0242
    2910:	80 93 cf 08 	sts	0x08CF, r24
					ackPayload[6] = proximityValue[4]>>8;
    2914:	80 91 41 02 	lds	r24, 0x0241
    2918:	90 91 42 02 	lds	r25, 0x0242
    291c:	90 93 d0 08 	sts	0x08D0, r25
					ackPayload[7] = proximityValue[6]&0xFF;
    2920:	80 91 45 02 	lds	r24, 0x0245
    2924:	90 91 46 02 	lds	r25, 0x0246
    2928:	80 93 d1 08 	sts	0x08D1, r24
					ackPayload[8] = proximityValue[6]>>8;
    292c:	80 91 45 02 	lds	r24, 0x0245
    2930:	90 91 46 02 	lds	r25, 0x0246
    2934:	90 93 d2 08 	sts	0x08D2, r25
					ackPayload[9] = proximityValue[10]&0xFF;
    2938:	80 91 4d 02 	lds	r24, 0x024D
    293c:	90 91 4e 02 	lds	r25, 0x024E
    2940:	80 93 d3 08 	sts	0x08D3, r24
					ackPayload[10] = proximityValue[10]>>8;
    2944:	80 91 4d 02 	lds	r24, 0x024D
    2948:	90 91 4e 02 	lds	r25, 0x024E
    294c:	90 93 d4 08 	sts	0x08D4, r25
					ackPayload[11] = proximityValue[12]&0xFF;
    2950:	80 91 51 02 	lds	r24, 0x0251
    2954:	90 91 52 02 	lds	r25, 0x0252
    2958:	80 93 d5 08 	sts	0x08D5, r24
					ackPayload[12] = proximityValue[12]>>8;
    295c:	80 91 51 02 	lds	r24, 0x0251
    2960:	90 91 52 02 	lds	r25, 0x0252
    2964:	90 93 d6 08 	sts	0x08D6, r25
					ackPayload[13] = proximityValue[14]&0xFF;
    2968:	80 91 55 02 	lds	r24, 0x0255
    296c:	90 91 56 02 	lds	r25, 0x0256
    2970:	80 93 d7 08 	sts	0x08D7, r24
					ackPayload[14] = proximityValue[14]>>8;
    2974:	80 91 55 02 	lds	r24, 0x0255
    2978:	90 91 56 02 	lds	r25, 0x0256
    297c:	90 93 d8 08 	sts	0x08D8, r25
					ackPayload[15] = currentSelector;
    2980:	80 91 5c 04 	lds	r24, 0x045C
    2984:	80 93 d9 08 	sts	0x08D9, r24
					packetId = 6;
    2988:	86 e0       	ldi	r24, 0x06	; 6
    298a:	80 93 0b 02 	sts	0x020B, r24
					break;
    298e:	96 ce       	rjmp	.-724    	; 0x26bc <handleRFCommands+0x33e>
			// write back the ack payload
			ackPayload[0] = packetId&0xFF;

			switch(packetId) {
				case 3:
					ackPayload[1] = proximityResult[0]&0xFF;
    2990:	90 91 69 02 	lds	r25, 0x0269
    2994:	80 91 6a 02 	lds	r24, 0x026A
    2998:	90 93 cb 08 	sts	0x08CB, r25
					ackPayload[2] = proximityResult[0]>>8;
    299c:	80 93 cc 08 	sts	0x08CC, r24
					ackPayload[3] = proximityResult[1]&0xFF;
    29a0:	90 91 6b 02 	lds	r25, 0x026B
    29a4:	80 91 6c 02 	lds	r24, 0x026C
    29a8:	90 93 cd 08 	sts	0x08CD, r25
					ackPayload[4] = proximityResult[1]>>8;
    29ac:	80 93 ce 08 	sts	0x08CE, r24
					ackPayload[5] = proximityResult[2]&0xFF;
    29b0:	90 91 6d 02 	lds	r25, 0x026D
    29b4:	80 91 6e 02 	lds	r24, 0x026E
    29b8:	90 93 cf 08 	sts	0x08CF, r25
					ackPayload[6] = proximityResult[2]>>8;
    29bc:	80 93 d0 08 	sts	0x08D0, r24
					ackPayload[7] = proximityResult[3]&0xFF;
    29c0:	90 91 6f 02 	lds	r25, 0x026F
    29c4:	80 91 70 02 	lds	r24, 0x0270
    29c8:	90 93 d1 08 	sts	0x08D1, r25
					ackPayload[8] = proximityResult[3]>>8;
    29cc:	80 93 d2 08 	sts	0x08D2, r24
					ackPayload[9] = proximityResult[5]&0xFF;
    29d0:	90 91 73 02 	lds	r25, 0x0273
    29d4:	80 91 74 02 	lds	r24, 0x0274
    29d8:	90 93 d3 08 	sts	0x08D3, r25
					ackPayload[10] = proximityResult[5]>>8;
    29dc:	80 93 d4 08 	sts	0x08D4, r24
					ackPayload[11] = proximityResult[6]&0xFF;
    29e0:	90 91 75 02 	lds	r25, 0x0275
    29e4:	80 91 76 02 	lds	r24, 0x0276
    29e8:	90 93 d5 08 	sts	0x08D5, r25
					ackPayload[12] = proximityResult[6]>>8;
    29ec:	80 93 d6 08 	sts	0x08D6, r24
					ackPayload[13] = proximityResult[7]&0xFF;
    29f0:	90 91 77 02 	lds	r25, 0x0277
    29f4:	80 91 78 02 	lds	r24, 0x0278
    29f8:	90 93 d7 08 	sts	0x08D7, r25
					ackPayload[14] = proximityResult[7]>>8;
    29fc:	80 93 d8 08 	sts	0x08D8, r24
					#ifdef HW_REV_3_1
						ackPayload[15] = CHARGE_ON | (BUTTON0 << 1) | (CHARGE_STAT << 2);
    2a00:	30 91 03 01 	lds	r19, 0x0103
    2a04:	80 91 03 01 	lds	r24, 0x0103
    2a08:	20 91 03 01 	lds	r18, 0x0103
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	80 72       	andi	r24, 0x20	; 32
    2a10:	90 70       	andi	r25, 0x00	; 0
    2a12:	95 95       	asr	r25
    2a14:	87 95       	ror	r24
    2a16:	95 95       	asr	r25
    2a18:	87 95       	ror	r24
    2a1a:	95 95       	asr	r25
    2a1c:	87 95       	ror	r24
    2a1e:	95 95       	asr	r25
    2a20:	87 95       	ror	r24
    2a22:	95 95       	asr	r25
    2a24:	87 95       	ror	r24
    2a26:	88 0f       	add	r24, r24
    2a28:	99 1f       	adc	r25, r25
    2a2a:	22 1f       	adc	r18, r18
    2a2c:	22 27       	eor	r18, r18
    2a2e:	22 1f       	adc	r18, r18
    2a30:	22 0f       	add	r18, r18
    2a32:	22 0f       	add	r18, r18
    2a34:	28 2b       	or	r18, r24
    2a36:	83 2f       	mov	r24, r19
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	80 71       	andi	r24, 0x10	; 16
    2a3c:	90 70       	andi	r25, 0x00	; 0
    2a3e:	95 95       	asr	r25
    2a40:	87 95       	ror	r24
    2a42:	95 95       	asr	r25
    2a44:	87 95       	ror	r24
    2a46:	95 95       	asr	r25
    2a48:	87 95       	ror	r24
    2a4a:	95 95       	asr	r25
    2a4c:	87 95       	ror	r24
    2a4e:	28 2b       	or	r18, r24
    2a50:	20 93 d9 08 	sts	0x08D9, r18
					#else
						ackPayload[15] = CHARGE_ON | (BUTTON0 << 1);
					#endif
					packetId = 4;
    2a54:	84 e0       	ldi	r24, 0x04	; 4
    2a56:	80 93 0b 02 	sts	0x020B, r24
					break;
    2a5a:	30 ce       	rjmp	.-928    	; 0x26bc <handleRFCommands+0x33e>
					ackPayload[15] = currentSelector;
					packetId = 6;
					break;

				case 6:
					ackPayload[1] = proximityValue[8]&0xFF;
    2a5c:	80 91 49 02 	lds	r24, 0x0249
    2a60:	90 91 4a 02 	lds	r25, 0x024A
    2a64:	80 93 cb 08 	sts	0x08CB, r24
					ackPayload[2] = proximityValue[8]>>8;
    2a68:	80 91 49 02 	lds	r24, 0x0249
    2a6c:	90 91 4a 02 	lds	r25, 0x024A
    2a70:	90 93 cc 08 	sts	0x08CC, r25
					ackPayload[3] = proximityValue[16]&0xFF;
    2a74:	80 91 59 02 	lds	r24, 0x0259
    2a78:	90 91 5a 02 	lds	r25, 0x025A
    2a7c:	80 93 cd 08 	sts	0x08CD, r24
					ackPayload[4] = proximityValue[16]>>8;
    2a80:	80 91 59 02 	lds	r24, 0x0259
    2a84:	90 91 5a 02 	lds	r25, 0x025A
    2a88:	90 93 ce 08 	sts	0x08CE, r25
					ackPayload[5] = proximityValue[18]&0xFF;
    2a8c:	80 91 5d 02 	lds	r24, 0x025D
    2a90:	90 91 5e 02 	lds	r25, 0x025E
    2a94:	80 93 cf 08 	sts	0x08CF, r24
					ackPayload[6] = proximityValue[18]>>8;
    2a98:	80 91 5d 02 	lds	r24, 0x025D
    2a9c:	90 91 5e 02 	lds	r25, 0x025E
    2aa0:	90 93 d0 08 	sts	0x08D0, r25
					ackPayload[7] = proximityValue[20]&0xFF;
    2aa4:	80 91 61 02 	lds	r24, 0x0261
    2aa8:	90 91 62 02 	lds	r25, 0x0262
    2aac:	80 93 d1 08 	sts	0x08D1, r24
					ackPayload[8] = proximityValue[20]>>8;
    2ab0:	80 91 61 02 	lds	r24, 0x0261
    2ab4:	90 91 62 02 	lds	r25, 0x0262
    2ab8:	90 93 d2 08 	sts	0x08D2, r25
					ackPayload[9] = proximityValue[22]&0xFF;
    2abc:	80 91 65 02 	lds	r24, 0x0265
    2ac0:	90 91 66 02 	lds	r25, 0x0266
    2ac4:	80 93 d3 08 	sts	0x08D3, r24
					ackPayload[10] = proximityValue[22]>>8;
    2ac8:	80 91 65 02 	lds	r24, 0x0265
    2acc:	90 91 66 02 	lds	r25, 0x0266
    2ad0:	90 93 d4 08 	sts	0x08D4, r25
					ackPayload[11] = accZ&0xFF;
    2ad4:	90 91 40 04 	lds	r25, 0x0440
    2ad8:	80 91 41 04 	lds	r24, 0x0441
    2adc:	90 93 d5 08 	sts	0x08D5, r25
					ackPayload[12] = accZ>>8;	
    2ae0:	80 93 d6 08 	sts	0x08D6, r24
					ackPayload[13] = batteryLevel&0xFF;
    2ae4:	90 91 cd 02 	lds	r25, 0x02CD
    2ae8:	80 91 ce 02 	lds	r24, 0x02CE
    2aec:	90 93 d7 08 	sts	0x08D7, r25
					ackPayload[14] = batteryLevel>>8;
    2af0:	80 93 d8 08 	sts	0x08D8, r24
					ackPayload[15] = 0;
    2af4:	10 92 d9 08 	sts	0x08D9, r1
					packetId = 7;
    2af8:	87 e0       	ldi	r24, 0x07	; 7
    2afa:	80 93 0b 02 	sts	0x020B, r24
					break;
    2afe:	de cd       	rjmp	.-1092   	; 0x26bc <handleRFCommands+0x33e>

			//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
			// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
			// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    2b00:	25 2f       	mov	r18, r21
    2b02:	9f cc       	rjmp	.-1730   	; 0x2442 <handleRFCommands+0xc4>
    2b04:	80 91 96 09 	lds	r24, 0x0996
    2b08:	88 23       	and	r24, r24
    2b0a:	09 f0       	breq	.+2      	; 0x2b0e <handleRFCommands+0x790>
    2b0c:	b2 ce       	rjmp	.-668    	; 0x2872 <handleRFCommands+0x4f4>
    2b0e:	80 91 97 09 	lds	r24, 0x0997
    2b12:	88 23       	and	r24, r24
    2b14:	09 f4       	brne	.+2      	; 0x2b18 <handleRFCommands+0x79a>
    2b16:	23 ce       	rjmp	.-954    	; 0x275e <handleRFCommands+0x3e0>
    2b18:	e0 e0       	ldi	r30, 0x00	; 0
    2b1a:	20 e0       	ldi	r18, 0x00	; 0
    2b1c:	92 cc       	rjmp	.-1756   	; 0x2442 <handleRFCommands+0xc4>

00002b1e <rfEnableDebugMode>:
	}

}

void rfEnableDebugMode() {
	rfDebugMode = 1;
    2b1e:	81 e0       	ldi	r24, 0x01	; 1
    2b20:	80 93 29 03 	sts	0x0329, r24
	rfDebugCounter = 3;
    2b24:	83 e0       	ldi	r24, 0x03	; 3
    2b26:	80 93 2a 03 	sts	0x032A, r24
}
    2b2a:	08 95       	ret

00002b2c <rfDisableDebugMode>:

void rfDisableDebugMode() {
	rfDebugMode = 0;
    2b2c:	10 92 29 03 	sts	0x0329, r1
}
    2b30:	08 95       	ret

00002b32 <rfDebugSendData>:

void rfDebugSendData() {
	ackPayload[0] = rfDebugCounter;
    2b32:	80 91 2a 03 	lds	r24, 0x032A
    2b36:	80 93 ca 08 	sts	0x08CA, r24
	while(rfData[0] != rfDebugCounter) {
    2b3a:	90 91 92 09 	lds	r25, 0x0992
    2b3e:	89 17       	cp	r24, r25
    2b40:	41 f0       	breq	.+16     	; 0x2b52 <rfDebugSendData+0x20>
		handleRFCommands();
    2b42:	0e 94 bf 11 	call	0x237e	; 0x237e <handleRFCommands>
	rfDebugMode = 0;
}

void rfDebugSendData() {
	ackPayload[0] = rfDebugCounter;
	while(rfData[0] != rfDebugCounter) {
    2b46:	80 91 2a 03 	lds	r24, 0x032A
    2b4a:	90 91 92 09 	lds	r25, 0x0992
    2b4e:	98 17       	cp	r25, r24
    2b50:	c1 f7       	brne	.-16     	; 0x2b42 <rfDebugSendData+0x10>
		handleRFCommands();
	}
	ackPayload[0] = 0x00;
    2b52:	10 92 ca 08 	sts	0x08CA, r1
	if(rfDebugCounter < 255) {
    2b56:	8f 3f       	cpi	r24, 0xFF	; 255
    2b58:	21 f0       	breq	.+8      	; 0x2b62 <rfDebugSendData+0x30>
		rfDebugCounter++;
    2b5a:	8f 5f       	subi	r24, 0xFF	; 255
    2b5c:	80 93 2a 03 	sts	0x032A, r24
    2b60:	08 95       	ret
	} else {
		rfDebugCounter = 3;
    2b62:	83 e0       	ldi	r24, 0x03	; 3
    2b64:	80 93 2a 03 	sts	0x032A, r24
    2b68:	08 95       	ret

00002b6a <rfDebugNextPacket>:
	}
}

void rfDebugNextPacket() {
	rfDebugCounter = 3;
    2b6a:	83 e0       	ldi	r24, 0x03	; 3
    2b6c:	80 93 2a 03 	sts	0x032A, r24
}
    2b70:	08 95       	ret

00002b72 <init_ir_remote_control>:
static unsigned char check_temp = 0;
unsigned char address = 0;
unsigned char data_ir = 0;
unsigned char check = 2;

void init_ir_remote_control(void) { 	
    2b72:	cf 93       	push	r28
    2b74:	df 93       	push	r29

	PCICR = 0;
    2b76:	c8 e6       	ldi	r28, 0x68	; 104
    2b78:	d0 e0       	ldi	r29, 0x00	; 0
    2b7a:	18 82       	st	Y, r1
	PCMSK1 = 0;
    2b7c:	ac e6       	ldi	r26, 0x6C	; 108
    2b7e:	b0 e0       	ldi	r27, 0x00	; 0
    2b80:	1c 92       	st	X, r1
	TCCR2A = 0;
    2b82:	e0 eb       	ldi	r30, 0xB0	; 176
    2b84:	f0 e0       	ldi	r31, 0x00	; 0
    2b86:	10 82       	st	Z, r1
	TCCR2B = 0;
    2b88:	10 92 b1 00 	sts	0x00B1, r1
	TIMSK2 = 0;
    2b8c:	10 92 70 00 	sts	0x0070, r1

	PCICR |= (1 << PCIE1);			// enable interrupt on change of PCINT15:8 pins
    2b90:	88 81       	ld	r24, Y
    2b92:	82 60       	ori	r24, 0x02	; 2
    2b94:	88 83       	st	Y, r24
	PCMSK1 |= (1 << PCINT15);		// enable PCINT15
    2b96:	8c 91       	ld	r24, X
    2b98:	80 68       	ori	r24, 0x80	; 128
    2b9a:	8c 93       	st	X, r24
	TCCR2A |= (1 << WGM21); 		// mode 2 => CTC mode
    2b9c:	80 81       	ld	r24, Z
    2b9e:	82 60       	ori	r24, 0x02	; 2
    2ba0:	80 83       	st	Z, r24

}
    2ba2:	df 91       	pop	r29
    2ba4:	cf 91       	pop	r28
    2ba6:	08 95       	ret

00002ba8 <__vector_10>:

// external interrupt service routine
ISR(PCINT1_vect) {
    2ba8:	1f 92       	push	r1
    2baa:	0f 92       	push	r0
    2bac:	0f b6       	in	r0, 0x3f	; 63
    2bae:	0f 92       	push	r0
    2bb0:	11 24       	eor	r1, r1
    2bb2:	8f 93       	push	r24

	if(irEnabled) {						// if the robot is configured to accept TV remote commands
    2bb4:	80 91 12 02 	lds	r24, 0x0212
    2bb8:	88 23       	and	r24, r24
    2bba:	21 f1       	breq	.+72     	; 0x2c04 <__vector_10+0x5c>

		if(bit_is_clear(PINJ, 6)) {		// the interrupt is generated at every pin state change; we only look
    2bbc:	80 91 03 01 	lds	r24, 0x0103
    2bc0:	86 fd       	sbrc	r24, 6
    2bc2:	20 c0       	rjmp	.+64     	; 0x2c04 <__vector_10+0x5c>
										// for the falling edge
			PCICR &= ~(1 << PCIE1);		// disable external interrupt
    2bc4:	80 91 68 00 	lds	r24, 0x0068
    2bc8:	8d 7f       	andi	r24, 0xFD	; 253
    2bca:	80 93 68 00 	sts	0x0068, r24
			PCMSK1 &= ~(1 << PCINT15);
    2bce:	80 91 6c 00 	lds	r24, 0x006C
    2bd2:	8f 77       	andi	r24, 0x7F	; 127
    2bd4:	80 93 6c 00 	sts	0x006C, r24
		
			// check the pin change isn't due to a glitch; to check this verify that
			// the pin remain low for at least 400 us (the giltches last about 200 us)
			// 0.4 / 0.032 = 13 => 0.416 us
			checkGlitch = 1;							// we're checking if this is a glitch
    2bd8:	81 e0       	ldi	r24, 0x01	; 1
    2bda:	80 93 13 02 	sts	0x0213, r24
			OCR2A = 13;									// output compare register
    2bde:	8d e0       	ldi	r24, 0x0D	; 13
    2be0:	80 93 b3 00 	sts	0x00B3, r24
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    2be4:	80 91 b1 00 	lds	r24, 0x00B1
    2be8:	86 60       	ori	r24, 0x06	; 6
    2bea:	80 93 b1 00 	sts	0x00B1, r24
			TIMSK2 |= (1 << OCIE2A);					// enable output compare interrupt
    2bee:	80 91 70 00 	lds	r24, 0x0070
    2bf2:	82 60       	ori	r24, 0x02	; 2
    2bf4:	80 93 70 00 	sts	0x0070, r24

			check_temp = address_temp = data_temp = 0;
    2bf8:	10 92 30 02 	sts	0x0230, r1
    2bfc:	10 92 31 02 	sts	0x0231, r1
    2c00:	10 92 32 02 	sts	0x0232, r1

		}

	}
	
}
    2c04:	8f 91       	pop	r24
    2c06:	0f 90       	pop	r0
    2c08:	0f be       	out	0x3f, r0	; 63
    2c0a:	0f 90       	pop	r0
    2c0c:	1f 90       	pop	r1
    2c0e:	18 95       	reti

00002c10 <__vector_13>:

ISR(TIMER2_COMPA_vect) {
    2c10:	1f 92       	push	r1
    2c12:	0f 92       	push	r0
    2c14:	0f b6       	in	r0, 0x3f	; 63
    2c16:	0f 92       	push	r0
    2c18:	11 24       	eor	r1, r1
    2c1a:	2f 93       	push	r18
    2c1c:	3f 93       	push	r19
    2c1e:	4f 93       	push	r20
    2c20:	5f 93       	push	r21
    2c22:	8f 93       	push	r24
    2c24:	9f 93       	push	r25

	static int i = -1;

	//PORTB ^= (1 << 5);	// toggle red led

	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);		// stop timer2
    2c26:	80 91 b1 00 	lds	r24, 0x00B1
    2c2a:	88 7f       	andi	r24, 0xF8	; 248
    2c2c:	80 93 b1 00 	sts	0x00B1, r24
	
		if(checkGlitch) {					// if checking this is a glitch
    2c30:	80 91 13 02 	lds	r24, 0x0213
    2c34:	88 23       	and	r24, r24
    2c36:	a9 f0       	breq	.+42     	; 0x2c62 <__vector_13+0x52>

			if(REMOTE) {					// if high it is a glitch
    2c38:	80 91 03 01 	lds	r24, 0x0103
    2c3c:	86 ff       	sbrs	r24, 6
    2c3e:	65 c0       	rjmp	.+202    	; 0x2d0a <__vector_13+0xfa>

				PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    2c40:	80 91 68 00 	lds	r24, 0x0068
    2c44:	82 60       	ori	r24, 0x02	; 2
    2c46:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    2c4a:	80 91 6c 00 	lds	r24, 0x006C
    2c4e:	80 68       	ori	r24, 0x80	; 128
    2c50:	80 93 6c 00 	sts	0x006C, r24
				i = -1;			
    2c54:	8f ef       	ldi	r24, 0xFF	; 255
    2c56:	9f ef       	ldi	r25, 0xFF	; 255
    2c58:	90 93 02 02 	sts	0x0202, r25
    2c5c:	80 93 01 02 	sts	0x0201, r24
    2c60:	49 c0       	rjmp	.+146    	; 0x2cf4 <__vector_13+0xe4>
			}

		} else {


			if (i == -1) { 						// start bit confirmed
    2c62:	80 91 01 02 	lds	r24, 0x0201
    2c66:	90 91 02 02 	lds	r25, 0x0202
    2c6a:	2f ef       	ldi	r18, 0xFF	; 255
    2c6c:	8f 3f       	cpi	r24, 0xFF	; 255
    2c6e:	92 07       	cpc	r25, r18
    2c70:	09 f4       	brne	.+2      	; 0x2c74 <__vector_13+0x64>
    2c72:	63 c0       	rjmp	.+198    	; 0x2d3a <__vector_13+0x12a>
					check_temp = address_temp = data_temp = 0;
					i=0;

				}

			} else if (i == 1)	{ 						// check bit read and change timer period
    2c74:	81 30       	cpi	r24, 0x01	; 1
    2c76:	91 05       	cpc	r25, r1
    2c78:	09 f4       	brne	.+2      	; 0x2c7c <__vector_13+0x6c>
    2c7a:	98 c0       	rjmp	.+304    	; 0x2dac <__vector_13+0x19c>
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
    2c7c:	9c 01       	movw	r18, r24
    2c7e:	22 50       	subi	r18, 0x02	; 2
    2c80:	30 40       	sbci	r19, 0x00	; 0
    2c82:	25 30       	cpi	r18, 0x05	; 5
    2c84:	31 05       	cpc	r19, r1
    2c86:	08 f4       	brcc	.+2      	; 0x2c8a <__vector_13+0x7a>
    2c88:	67 c0       	rjmp	.+206    	; 0x2d58 <__vector_13+0x148>

				unsigned char temp = REMOTE;
				temp <<= 6-i;
				address_temp += temp;

			} else if ((i > 6) && (i < 13 )) { 			// we read data
    2c8a:	9c 01       	movw	r18, r24
    2c8c:	27 50       	subi	r18, 0x07	; 7
    2c8e:	30 40       	sbci	r19, 0x00	; 0
    2c90:	26 30       	cpi	r18, 0x06	; 6
    2c92:	31 05       	cpc	r19, r1
    2c94:	08 f0       	brcs	.+2      	; 0x2c98 <__vector_13+0x88>
    2c96:	bd c0       	rjmp	.+378    	; 0x2e12 <__vector_13+0x202>

				OCR2A = 54;
    2c98:	26 e3       	ldi	r18, 0x36	; 54
    2c9a:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    2c9e:	20 91 b1 00 	lds	r18, 0x00B1
    2ca2:	26 60       	ori	r18, 0x06	; 6
    2ca4:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    2ca8:	20 91 70 00 	lds	r18, 0x0070
    2cac:	22 60       	ori	r18, 0x02	; 2
    2cae:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    2cb2:	20 91 03 01 	lds	r18, 0x0103
    2cb6:	30 e0       	ldi	r19, 0x00	; 0
    2cb8:	20 74       	andi	r18, 0x40	; 64
    2cba:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6+6-i;
    2cbc:	00 24       	eor	r0, r0
    2cbe:	22 0f       	add	r18, r18
    2cc0:	33 1f       	adc	r19, r19
    2cc2:	00 1c       	adc	r0, r0
    2cc4:	22 0f       	add	r18, r18
    2cc6:	33 1f       	adc	r19, r19
    2cc8:	00 1c       	adc	r0, r0
    2cca:	23 2f       	mov	r18, r19
    2ccc:	30 2d       	mov	r19, r0
    2cce:	4c e0       	ldi	r20, 0x0C	; 12
    2cd0:	50 e0       	ldi	r21, 0x00	; 0
    2cd2:	48 1b       	sub	r20, r24
    2cd4:	59 0b       	sbc	r21, r25
    2cd6:	02 c0       	rjmp	.+4      	; 0x2cdc <__vector_13+0xcc>
    2cd8:	22 0f       	add	r18, r18
    2cda:	33 1f       	adc	r19, r19
    2cdc:	4a 95       	dec	r20
    2cde:	e2 f7       	brpl	.-8      	; 0x2cd8 <__vector_13+0xc8>
				data_temp += temp;
    2ce0:	40 91 30 02 	lds	r20, 0x0230
    2ce4:	42 0f       	add	r20, r18
    2ce6:	40 93 30 02 	sts	0x0230, r20

				i = -1;
				check = check_temp;
				address = address_temp;
				data_ir = data_temp;
				command_received=1;
    2cea:	01 96       	adiw	r24, 0x01	; 1

		}
	
		if(i!=-1) {

			i++;
    2cec:	90 93 02 02 	sts	0x0202, r25
    2cf0:	80 93 01 02 	sts	0x0201, r24

		}

}
    2cf4:	9f 91       	pop	r25
    2cf6:	8f 91       	pop	r24
    2cf8:	5f 91       	pop	r21
    2cfa:	4f 91       	pop	r20
    2cfc:	3f 91       	pop	r19
    2cfe:	2f 91       	pop	r18
    2d00:	0f 90       	pop	r0
    2d02:	0f be       	out	0x3f, r0	; 63
    2d04:	0f 90       	pop	r0
    2d06:	1f 90       	pop	r1
    2d08:	18 95       	reti
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
				i = -1;			

			} else {						// not a glitch => real command received

				checkGlitch = 0;
    2d0a:	10 92 13 02 	sts	0x0213, r1

				// activate the IR Receiver with a 2.1 ms cycle value
				// we set the resolution of the timer to be 0.032 ms (prescaler 1/256) so:
				// 2.1 / 0.032 = 64 to be set in the output compare register (=> 2.048 ms)
				// but we already wait 0.416 us => 13, so 64-13=51
				OCR2A = 51;								// output compare register
    2d0e:	83 e3       	ldi	r24, 0x33	; 51
    2d10:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    2d14:	80 91 b1 00 	lds	r24, 0x00B1
    2d18:	86 60       	ori	r24, 0x06	; 6
    2d1a:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    2d1e:	80 91 70 00 	lds	r24, 0x0070
    2d22:	82 60       	ori	r24, 0x02	; 2
    2d24:	80 93 70 00 	sts	0x0070, r24
    2d28:	80 91 01 02 	lds	r24, 0x0201
    2d2c:	90 91 02 02 	lds	r25, 0x0202

			} 

		}
	
		if(i!=-1) {
    2d30:	2f ef       	ldi	r18, 0xFF	; 255
    2d32:	8f 3f       	cpi	r24, 0xFF	; 255
    2d34:	92 07       	cpc	r25, r18
    2d36:	c9 f6       	brne	.-78     	; 0x2cea <__vector_13+0xda>
    2d38:	dd cf       	rjmp	.-70     	; 0x2cf4 <__vector_13+0xe4>
		} else {


			if (i == -1) { 						// start bit confirmed

				if(REMOTE) {					// double check => if high it is only a noise
    2d3a:	20 91 03 01 	lds	r18, 0x0103
    2d3e:	26 ff       	sbrs	r18, 6
    2d40:	52 c0       	rjmp	.+164    	; 0x2de6 <__vector_13+0x1d6>

					PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    2d42:	20 91 68 00 	lds	r18, 0x0068
    2d46:	22 60       	ori	r18, 0x02	; 2
    2d48:	20 93 68 00 	sts	0x0068, r18
					PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    2d4c:	20 91 6c 00 	lds	r18, 0x006C
    2d50:	20 68       	ori	r18, 0x80	; 128
    2d52:	20 93 6c 00 	sts	0x006C, r18
    2d56:	ce cf       	rjmp	.-100    	; 0x2cf4 <__vector_13+0xe4>
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
		
				OCR2A = 54;
    2d58:	26 e3       	ldi	r18, 0x36	; 54
    2d5a:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    2d5e:	20 91 b1 00 	lds	r18, 0x00B1
    2d62:	26 60       	ori	r18, 0x06	; 6
    2d64:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    2d68:	20 91 70 00 	lds	r18, 0x0070
    2d6c:	22 60       	ori	r18, 0x02	; 2
    2d6e:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    2d72:	20 91 03 01 	lds	r18, 0x0103
    2d76:	30 e0       	ldi	r19, 0x00	; 0
    2d78:	20 74       	andi	r18, 0x40	; 64
    2d7a:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6-i;
    2d7c:	00 24       	eor	r0, r0
    2d7e:	22 0f       	add	r18, r18
    2d80:	33 1f       	adc	r19, r19
    2d82:	00 1c       	adc	r0, r0
    2d84:	22 0f       	add	r18, r18
    2d86:	33 1f       	adc	r19, r19
    2d88:	00 1c       	adc	r0, r0
    2d8a:	23 2f       	mov	r18, r19
    2d8c:	30 2d       	mov	r19, r0
    2d8e:	46 e0       	ldi	r20, 0x06	; 6
    2d90:	50 e0       	ldi	r21, 0x00	; 0
    2d92:	48 1b       	sub	r20, r24
    2d94:	59 0b       	sbc	r21, r25
    2d96:	02 c0       	rjmp	.+4      	; 0x2d9c <__vector_13+0x18c>
    2d98:	22 0f       	add	r18, r18
    2d9a:	33 1f       	adc	r19, r19
    2d9c:	4a 95       	dec	r20
    2d9e:	e2 f7       	brpl	.-8      	; 0x2d98 <__vector_13+0x188>
				address_temp += temp;
    2da0:	40 91 31 02 	lds	r20, 0x0231
    2da4:	42 0f       	add	r20, r18
    2da6:	40 93 31 02 	sts	0x0231, r20
    2daa:	9f cf       	rjmp	.-194    	; 0x2cea <__vector_13+0xda>

				}

			} else if (i == 1)	{ 						// check bit read and change timer period

				check_temp = REMOTE;	   				// read the check bit
    2dac:	20 91 03 01 	lds	r18, 0x0103
    2db0:	30 e0       	ldi	r19, 0x00	; 0
    2db2:	20 74       	andi	r18, 0x40	; 64
    2db4:	30 70       	andi	r19, 0x00	; 0
    2db6:	02 2e       	mov	r0, r18
    2db8:	23 2f       	mov	r18, r19
    2dba:	00 0c       	add	r0, r0
    2dbc:	22 1f       	adc	r18, r18
    2dbe:	33 0b       	sbc	r19, r19
    2dc0:	00 0c       	add	r0, r0
    2dc2:	22 1f       	adc	r18, r18
    2dc4:	33 1f       	adc	r19, r19
    2dc6:	20 93 32 02 	sts	0x0232, r18
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
    2dca:	26 e3       	ldi	r18, 0x36	; 54
    2dcc:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    2dd0:	20 91 b1 00 	lds	r18, 0x00B1
    2dd4:	26 60       	ori	r18, 0x06	; 6
    2dd6:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    2dda:	20 91 70 00 	lds	r18, 0x0070
    2dde:	22 60       	ori	r18, 0x02	; 2
    2de0:	20 93 70 00 	sts	0x0070, r18
    2de4:	82 cf       	rjmp	.-252    	; 0x2cea <__vector_13+0xda>

				} else {	// read the check bit
			
					//cycle value is 0.9 ms to go to check bit so:
					// 0.9 / 0.032 = 28 => 0.896
					OCR2A = 28;								// output compare register
    2de6:	8c e1       	ldi	r24, 0x1C	; 28
    2de8:	80 93 b3 00 	sts	0x00B3, r24
					TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    2dec:	80 91 b1 00 	lds	r24, 0x00B1
    2df0:	86 60       	ori	r24, 0x06	; 6
    2df2:	80 93 b1 00 	sts	0x00B1, r24
					TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt					
    2df6:	80 91 70 00 	lds	r24, 0x0070
    2dfa:	82 60       	ori	r24, 0x02	; 2
    2dfc:	80 93 70 00 	sts	0x0070, r24

					check_temp = address_temp = data_temp = 0;
    2e00:	10 92 30 02 	sts	0x0230, r1
    2e04:	10 92 31 02 	sts	0x0231, r1
    2e08:	10 92 32 02 	sts	0x0232, r1
    2e0c:	81 e0       	ldi	r24, 0x01	; 1
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	6d cf       	rjmp	.-294    	; 0x2cec <__vector_13+0xdc>

				unsigned char temp = REMOTE;
				temp <<= 6+6-i;
				data_temp += temp;

			} else if (i == 13) { 						// last bit read
    2e12:	8d 30       	cpi	r24, 0x0D	; 13
    2e14:	91 05       	cpc	r25, r1
    2e16:	09 f0       	breq	.+2      	; 0x2e1a <__vector_13+0x20a>
    2e18:	68 cf       	rjmp	.-304    	; 0x2cea <__vector_13+0xda>
				
				TIMSK2 = 0;								// disable all interrupt for timer2
    2e1a:	10 92 70 00 	sts	0x0070, r1
				PCICR |= (1 << PCIE1);					// enable external interrupt to receive next command
    2e1e:	80 91 68 00 	lds	r24, 0x0068
    2e22:	82 60       	ori	r24, 0x02	; 2
    2e24:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);				// clear interrupt flag
    2e28:	80 91 6c 00 	lds	r24, 0x006C
    2e2c:	80 68       	ori	r24, 0x80	; 128
    2e2e:	80 93 6c 00 	sts	0x006C, r24

				i = -1;
    2e32:	8f ef       	ldi	r24, 0xFF	; 255
    2e34:	9f ef       	ldi	r25, 0xFF	; 255
    2e36:	90 93 02 02 	sts	0x0202, r25
    2e3a:	80 93 01 02 	sts	0x0201, r24
				check = check_temp;
    2e3e:	80 91 32 02 	lds	r24, 0x0232
    2e42:	80 93 00 02 	sts	0x0200, r24
				address = address_temp;
    2e46:	80 91 31 02 	lds	r24, 0x0231
    2e4a:	80 93 2e 02 	sts	0x022E, r24
				data_ir = data_temp;
    2e4e:	80 91 30 02 	lds	r24, 0x0230
    2e52:	80 93 2f 02 	sts	0x022F, r24
				command_received=1;
    2e56:	81 e0       	ldi	r24, 0x01	; 1
    2e58:	80 93 38 04 	sts	0x0438, r24
    2e5c:	4b cf       	rjmp	.-362    	; 0x2cf4 <__vector_13+0xe4>

00002e5e <ir_remote_get_check>:

}

unsigned char ir_remote_get_check(void) {
	return check;
}
    2e5e:	80 91 00 02 	lds	r24, 0x0200
    2e62:	08 95       	ret

00002e64 <ir_remote_get_address>:

unsigned char ir_remote_get_address(void) {
	return address;
}
    2e64:	80 91 2e 02 	lds	r24, 0x022E
    2e68:	08 95       	ret

00002e6a <ir_remote_get_data>:

unsigned char ir_remote_get_data(void) {
	return data_ir;
}
    2e6a:	80 91 2f 02 	lds	r24, 0x022F
    2e6e:	08 95       	ret

00002e70 <handleIRRemoteCommands>:

void handleIRRemoteCommands() {

	if(irEnabled) {
    2e70:	80 91 12 02 	lds	r24, 0x0212
    2e74:	88 23       	and	r24, r24
    2e76:	51 f1       	breq	.+84     	; 0x2ecc <handleIRRemoteCommands+0x5c>

		if(command_received) {
    2e78:	80 91 38 04 	lds	r24, 0x0438
    2e7c:	88 23       	and	r24, r24
    2e7e:	31 f1       	breq	.+76     	; 0x2ecc <handleIRRemoteCommands+0x5c>
unsigned char ir_remote_get_address(void) {
	return address;
}

unsigned char ir_remote_get_data(void) {
	return data_ir;
    2e80:	e0 91 2f 02 	lds	r30, 0x022F

	if(irEnabled) {

		if(command_received) {

            irCommand = ir_remote_get_data();
    2e84:	e0 93 37 04 	sts	0x0437, r30

		    //usartTransmit(irCommand);

			command_received = 0;
    2e88:	10 92 38 04 	sts	0x0438, r1

			switch(irCommand) {
    2e8c:	f0 e0       	ldi	r31, 0x00	; 0
    2e8e:	e5 33       	cpi	r30, 0x35	; 53
    2e90:	f1 05       	cpc	r31, r1
    2e92:	e8 f0       	brcs	.+58     	; 0x2ece <handleIRRemoteCommands+0x5e>
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 1;
							break;
						case 3:
							obstacleAvoidanceEnabled = 1;
							cliffAvoidanceEnabled = 1;
    2e94:	20 91 09 03 	lds	r18, 0x0309
    2e98:	30 91 0a 03 	lds	r19, 0x030A
    2e9c:	80 91 0b 03 	lds	r24, 0x030B
    2ea0:	90 91 0c 03 	lds	r25, 0x030C
	               	break;

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
    2ea4:	37 fd       	sbrc	r19, 7
    2ea6:	b9 c1       	rjmp	.+882    	; 0x321a <handleIRRemoteCommands+0x3aa>
				speedr = pwm_right_desired;
			} else {
				speedr = (-pwm_right_desired);
    2ea8:	30 93 24 03 	sts	0x0324, r19
    2eac:	20 93 23 03 	sts	0x0323, r18
			}
			if(pwm_left_desired >= 0) {
    2eb0:	97 fd       	sbrc	r25, 7
    2eb2:	05 c0       	rjmp	.+10     	; 0x2ebe <handleIRRemoteCommands+0x4e>
				speedl = pwm_left_desired;
    2eb4:	90 93 22 03 	sts	0x0322, r25
    2eb8:	80 93 21 03 	sts	0x0321, r24
    2ebc:	08 95       	ret
			} else {
				speedl = (-pwm_left_desired);
    2ebe:	90 95       	com	r25
    2ec0:	81 95       	neg	r24
    2ec2:	9f 4f       	sbci	r25, 0xFF	; 255
    2ec4:	90 93 22 03 	sts	0x0322, r25
    2ec8:	80 93 21 03 	sts	0x0321, r24
    2ecc:	08 95       	ret

		    //usartTransmit(irCommand);

			command_received = 0;

			switch(irCommand) {
    2ece:	ee 58       	subi	r30, 0x8E	; 142
    2ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed2:	ee 0f       	add	r30, r30
    2ed4:	ff 1f       	adc	r31, r31
    2ed6:	05 90       	lpm	r0, Z+
    2ed8:	f4 91       	lpm	r31, Z+
    2eda:	e0 2d       	mov	r30, r0
    2edc:	19 94       	eijmp
						case 0:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 0;
							break;
						case 1:
							obstacleAvoidanceEnabled = 1;
    2ede:	80 93 7c 04 	sts	0x047C, r24
							cliffAvoidanceEnabled = 0;
    2ee2:	10 92 7d 04 	sts	0x047D, r1
    2ee6:	20 91 09 03 	lds	r18, 0x0309
    2eea:	30 91 0a 03 	lds	r19, 0x030A
    2eee:	80 91 0b 03 	lds	r24, 0x030B
    2ef2:	90 91 0c 03 	lds	r25, 0x030C
							break;
    2ef6:	d6 cf       	rjmp	.-84     	; 0x2ea4 <handleIRRemoteCommands+0x34>
						case 2:
							obstacleAvoidanceEnabled = 0;
    2ef8:	10 92 7c 04 	sts	0x047C, r1
							cliffAvoidanceEnabled = 1;
    2efc:	81 e0       	ldi	r24, 0x01	; 1
    2efe:	80 93 7d 04 	sts	0x047D, r24
    2f02:	20 91 09 03 	lds	r18, 0x0309
    2f06:	30 91 0a 03 	lds	r19, 0x030A
    2f0a:	80 91 0b 03 	lds	r24, 0x030B
    2f0e:	90 91 0c 03 	lds	r25, 0x030C
							break;
    2f12:	c8 cf       	rjmp	.-112    	; 0x2ea4 <handleIRRemoteCommands+0x34>
				case 33:	// program -
					cliffAvoidanceEnabled = 0;
					break;

				case 52:	// av/tv button
					behaviorState = (behaviorState+1)%4;
    2f14:	80 91 3a 04 	lds	r24, 0x043A
    2f18:	90 e0       	ldi	r25, 0x00	; 0
    2f1a:	01 96       	adiw	r24, 0x01	; 1
    2f1c:	83 70       	andi	r24, 0x03	; 3
    2f1e:	90 70       	andi	r25, 0x00	; 0
    2f20:	80 93 3a 04 	sts	0x043A, r24
					switch(behaviorState) {
    2f24:	82 30       	cpi	r24, 0x02	; 2
    2f26:	41 f3       	breq	.-48     	; 0x2ef8 <handleIRRemoteCommands+0x88>
    2f28:	83 30       	cpi	r24, 0x03	; 3
    2f2a:	09 f4       	brne	.+2      	; 0x2f2e <handleIRRemoteCommands+0xbe>
    2f2c:	8a c1       	rjmp	.+788    	; 0x3242 <handleIRRemoteCommands+0x3d2>
    2f2e:	81 30       	cpi	r24, 0x01	; 1
    2f30:	b1 f2       	breq	.-84     	; 0x2ede <handleIRRemoteCommands+0x6e>
						case 0:
							obstacleAvoidanceEnabled = 0;
    2f32:	10 92 7c 04 	sts	0x047C, r1
							cliffAvoidanceEnabled = 0;
    2f36:	10 92 7d 04 	sts	0x047D, r1
    2f3a:	20 91 09 03 	lds	r18, 0x0309
    2f3e:	30 91 0a 03 	lds	r19, 0x030A
    2f42:	80 91 0b 03 	lds	r24, 0x030B
    2f46:	90 91 0c 03 	lds	r25, 0x030C
							break;
    2f4a:	ac cf       	rjmp	.-168    	; 0x2ea4 <handleIRRemoteCommands+0x34>
				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
					break;

				case 17:	// volume -
					obstacleAvoidanceEnabled = 0;
    2f4c:	10 92 7c 04 	sts	0x047C, r1
    2f50:	20 91 09 03 	lds	r18, 0x0309
    2f54:	30 91 0a 03 	lds	r19, 0x030A
    2f58:	80 91 0b 03 	lds	r24, 0x030B
    2f5c:	90 91 0c 03 	lds	r25, 0x030C
					break;
    2f60:	a1 cf       	rjmp	.-190    	; 0x2ea4 <handleIRRemoteCommands+0x34>
					pwm_right_desired += STEP_MOTORS;
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
					break;

				case 9:	// left motor backward
					pwm_left_desired -= STEP_MOTORS;
    2f62:	80 91 0b 03 	lds	r24, 0x030B
    2f66:	90 91 0c 03 	lds	r25, 0x030C
    2f6a:	02 97       	sbiw	r24, 0x02	; 2
    2f6c:	90 93 0c 03 	sts	0x030C, r25
    2f70:	80 93 0b 03 	sts	0x030B, r24
	           	    if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    2f74:	2e ef       	ldi	r18, 0xFE	; 254
    2f76:	80 30       	cpi	r24, 0x00	; 0
    2f78:	92 07       	cpc	r25, r18
    2f7a:	9c f5       	brge	.+102    	; 0x2fe2 <handleIRRemoteCommands+0x172>
    2f7c:	80 e0       	ldi	r24, 0x00	; 0
    2f7e:	9e ef       	ldi	r25, 0xFE	; 254
    2f80:	90 93 0c 03 	sts	0x030C, r25
    2f84:	80 93 0b 03 	sts	0x030B, r24
    2f88:	20 91 09 03 	lds	r18, 0x0309
    2f8c:	30 91 0a 03 	lds	r19, 0x030A
    2f90:	89 cf       	rjmp	.-238    	; 0x2ea4 <handleIRRemoteCommands+0x34>
    	            if (pwm_left_desired > (MAX_MOTORS_PWM/2)) pwm_left_desired = (MAX_MOTORS_PWM/2);
               		break;

				case 8:	// both motors backward
				case 30:
					if(pwm_right_desired < pwm_left) {
    2f92:	20 91 09 03 	lds	r18, 0x0309
    2f96:	30 91 0a 03 	lds	r19, 0x030A
    2f9a:	80 91 07 03 	lds	r24, 0x0307
    2f9e:	90 91 08 03 	lds	r25, 0x0308
    2fa2:	28 17       	cp	r18, r24
    2fa4:	39 07       	cpc	r19, r25
    2fa6:	24 f0       	brlt	.+8      	; 0x2fb0 <handleIRRemoteCommands+0x140>
						pwm_left_desired  = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
    2fa8:	20 91 0b 03 	lds	r18, 0x030B
    2fac:	30 91 0c 03 	lds	r19, 0x030C
					}
					pwm_right_desired -= STEP_MOTORS;
    2fb0:	22 50       	subi	r18, 0x02	; 2
    2fb2:	30 40       	sbci	r19, 0x00	; 0
    2fb4:	30 93 0a 03 	sts	0x030A, r19
    2fb8:	20 93 09 03 	sts	0x0309, r18
					pwm_left_desired -= STEP_MOTORS;
    2fbc:	c9 01       	movw	r24, r18
    2fbe:	30 93 0c 03 	sts	0x030C, r19
    2fc2:	20 93 0b 03 	sts	0x030B, r18
	                if (pwm_right_desired < -(MAX_MOTORS_PWM/2)) pwm_right_desired = -(MAX_MOTORS_PWM/2);
    2fc6:	4e ef       	ldi	r20, 0xFE	; 254
    2fc8:	20 30       	cpi	r18, 0x00	; 0
    2fca:	34 07       	cpc	r19, r20
    2fcc:	34 f4       	brge	.+12     	; 0x2fda <handleIRRemoteCommands+0x16a>
    2fce:	40 e0       	ldi	r20, 0x00	; 0
    2fd0:	5e ef       	ldi	r21, 0xFE	; 254
    2fd2:	50 93 0a 03 	sts	0x030A, r21
    2fd6:	40 93 09 03 	sts	0x0309, r20
    	            if (pwm_left_desired < -(MAX_MOTORS_PWM/2)) pwm_left_desired = -(MAX_MOTORS_PWM/2);
    2fda:	4e ef       	ldi	r20, 0xFE	; 254
    2fdc:	20 30       	cpi	r18, 0x00	; 0
    2fde:	34 07       	cpc	r19, r20
    2fe0:	6c f2       	brlt	.-102    	; 0x2f7c <handleIRRemoteCommands+0x10c>
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    2fe2:	20 91 09 03 	lds	r18, 0x0309
    2fe6:	30 91 0a 03 	lds	r19, 0x030A
    2fea:	5c cf       	rjmp	.-328    	; 0x2ea4 <handleIRRemoteCommands+0x34>
					updateBlueLed(pwm_blue);

	               	break;

				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
    2fec:	81 e0       	ldi	r24, 0x01	; 1
    2fee:	80 93 7c 04 	sts	0x047C, r24
    2ff2:	20 91 09 03 	lds	r18, 0x0309
    2ff6:	30 91 0a 03 	lds	r19, 0x030A
    2ffa:	80 91 0b 03 	lds	r24, 0x030B
    2ffe:	90 91 0c 03 	lds	r25, 0x030C
					break;
    3002:	50 cf       	rjmp	.-352    	; 0x2ea4 <handleIRRemoteCommands+0x34>
					pwm_left_desired -= STEP_MOTORS;
	           	    if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 7:	// right motor backward
					pwm_right_desired -= STEP_MOTORS;
    3004:	20 91 09 03 	lds	r18, 0x0309
    3008:	30 91 0a 03 	lds	r19, 0x030A
    300c:	22 50       	subi	r18, 0x02	; 2
    300e:	30 40       	sbci	r19, 0x00	; 0
    3010:	30 93 0a 03 	sts	0x030A, r19
    3014:	20 93 09 03 	sts	0x0309, r18
	               	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    3018:	4e ef       	ldi	r20, 0xFE	; 254
    301a:	20 30       	cpi	r18, 0x00	; 0
    301c:	34 07       	cpc	r19, r20
    301e:	0c f0       	brlt	.+2      	; 0x3022 <handleIRRemoteCommands+0x1b2>
    3020:	3d cf       	rjmp	.-390    	; 0x2e9c <handleIRRemoteCommands+0x2c>
    3022:	80 e0       	ldi	r24, 0x00	; 0
    3024:	9e ef       	ldi	r25, 0xFE	; 254
    3026:	90 93 0a 03 	sts	0x030A, r25
    302a:	80 93 09 03 	sts	0x0309, r24
    302e:	80 91 0b 03 	lds	r24, 0x030B
    3032:	90 91 0c 03 	lds	r25, 0x030C
    3036:	20 e0       	ldi	r18, 0x00	; 0
    3038:	32 e0       	ldi	r19, 0x02	; 2
    303a:	36 cf       	rjmp	.-404    	; 0x2ea8 <handleIRRemoteCommands+0x38>
    	            if (pwm_left_desired < -(MAX_MOTORS_PWM/2)) pwm_left_desired = -(MAX_MOTORS_PWM/2);
                  	break;

				case 6:	// both motors right
				case 47:
					pwm_right_desired -= STEP_MOTORS;
    303c:	20 91 09 03 	lds	r18, 0x0309
    3040:	30 91 0a 03 	lds	r19, 0x030A
    3044:	22 50       	subi	r18, 0x02	; 2
    3046:	30 40       	sbci	r19, 0x00	; 0
    3048:	30 93 0a 03 	sts	0x030A, r19
    304c:	20 93 09 03 	sts	0x0309, r18
					pwm_left_desired += STEP_MOTORS;
    3050:	80 91 0b 03 	lds	r24, 0x030B
    3054:	90 91 0c 03 	lds	r25, 0x030C
    3058:	02 96       	adiw	r24, 0x02	; 2
    305a:	90 93 0c 03 	sts	0x030C, r25
    305e:	80 93 0b 03 	sts	0x030B, r24
                	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    3062:	4e ef       	ldi	r20, 0xFE	; 254
    3064:	20 30       	cpi	r18, 0x00	; 0
    3066:	34 07       	cpc	r19, r20
    3068:	34 f4       	brge	.+12     	; 0x3076 <handleIRRemoteCommands+0x206>
    306a:	20 e0       	ldi	r18, 0x00	; 0
    306c:	3e ef       	ldi	r19, 0xFE	; 254
    306e:	30 93 0a 03 	sts	0x030A, r19
    3072:	20 93 09 03 	sts	0x0309, r18
                	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    3076:	42 e0       	ldi	r20, 0x02	; 2
    3078:	81 30       	cpi	r24, 0x01	; 1
    307a:	94 07       	cpc	r25, r20
    307c:	0c f4       	brge	.+2      	; 0x3080 <handleIRRemoteCommands+0x210>
    307e:	12 cf       	rjmp	.-476    	; 0x2ea4 <handleIRRemoteCommands+0x34>
    3080:	80 e0       	ldi	r24, 0x00	; 0
    3082:	92 e0       	ldi	r25, 0x02	; 2
    3084:	90 93 0c 03 	sts	0x030C, r25
    3088:	80 93 0b 03 	sts	0x030B, r24
    308c:	0b cf       	rjmp	.-490    	; 0x2ea4 <handleIRRemoteCommands+0x34>
			switch(irCommand) {
				// sometimes there are two cases for the same command because two different
				// remote controls are used; one of this do not contain "numbers"
				case 5:	// stop motors
				case 51:
					pwm_right_desired = 0;
    308e:	10 92 0a 03 	sts	0x030A, r1
    3092:	10 92 09 03 	sts	0x0309, r1
					pwm_left_desired = 0;
    3096:	10 92 0c 03 	sts	0x030C, r1
    309a:	10 92 0b 03 	sts	0x030B, r1
					if(currentSelector == 8) {
    309e:	80 91 5c 04 	lds	r24, 0x045C
    30a2:	88 30       	cpi	r24, 0x08	; 8
    30a4:	09 f4       	brne	.+2      	; 0x30a8 <handleIRRemoteCommands+0x238>
    30a6:	db c0       	rjmp	.+438    	; 0x325e <handleIRRemoteCommands+0x3ee>
    30a8:	80 e0       	ldi	r24, 0x00	; 0
    30aa:	90 e0       	ldi	r25, 0x00	; 0
    30ac:	20 e0       	ldi	r18, 0x00	; 0
    30ae:	30 e0       	ldi	r19, 0x00	; 0
    30b0:	fb ce       	rjmp	.-522    	; 0x2ea8 <handleIRRemoteCommands+0x38>
                	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
					break;

				case 4:	// both motors left
				case 46:
					pwm_right_desired += STEP_MOTORS;
    30b2:	20 91 09 03 	lds	r18, 0x0309
    30b6:	30 91 0a 03 	lds	r19, 0x030A
    30ba:	2e 5f       	subi	r18, 0xFE	; 254
    30bc:	3f 4f       	sbci	r19, 0xFF	; 255
    30be:	30 93 0a 03 	sts	0x030A, r19
    30c2:	20 93 09 03 	sts	0x0309, r18
					pwm_left_desired -= STEP_MOTORS;
    30c6:	80 91 0b 03 	lds	r24, 0x030B
    30ca:	90 91 0c 03 	lds	r25, 0x030C
    30ce:	02 97       	sbiw	r24, 0x02	; 2
    30d0:	90 93 0c 03 	sts	0x030C, r25
    30d4:	80 93 0b 03 	sts	0x030B, r24
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    30d8:	42 e0       	ldi	r20, 0x02	; 2
    30da:	21 30       	cpi	r18, 0x01	; 1
    30dc:	34 07       	cpc	r19, r20
    30de:	34 f0       	brlt	.+12     	; 0x30ec <handleIRRemoteCommands+0x27c>
    30e0:	20 e0       	ldi	r18, 0x00	; 0
    30e2:	32 e0       	ldi	r19, 0x02	; 2
    30e4:	30 93 0a 03 	sts	0x030A, r19
    30e8:	20 93 09 03 	sts	0x0309, r18
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    30ec:	4e ef       	ldi	r20, 0xFE	; 254
    30ee:	80 30       	cpi	r24, 0x00	; 0
    30f0:	94 07       	cpc	r25, r20
    30f2:	0c f0       	brlt	.+2      	; 0x30f6 <handleIRRemoteCommands+0x286>
    30f4:	d7 ce       	rjmp	.-594    	; 0x2ea4 <handleIRRemoteCommands+0x34>
    30f6:	80 e0       	ldi	r24, 0x00	; 0
    30f8:	9e ef       	ldi	r25, 0xFE	; 254
    30fa:	90 93 0c 03 	sts	0x030C, r25
    30fe:	80 93 0b 03 	sts	0x030B, r24
    3102:	d0 ce       	rjmp	.-608    	; 0x2ea4 <handleIRRemoteCommands+0x34>
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
    3104:	80 91 0b 03 	lds	r24, 0x030B
    3108:	90 91 0c 03 	lds	r25, 0x030C
    310c:	02 96       	adiw	r24, 0x02	; 2
    310e:	90 93 0c 03 	sts	0x030C, r25
    3112:	80 93 0b 03 	sts	0x030B, r24
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    3116:	22 e0       	ldi	r18, 0x02	; 2
    3118:	81 30       	cpi	r24, 0x01	; 1
    311a:	92 07       	cpc	r25, r18
    311c:	0c f4       	brge	.+2      	; 0x3120 <handleIRRemoteCommands+0x2b0>
    311e:	61 cf       	rjmp	.-318    	; 0x2fe2 <handleIRRemoteCommands+0x172>
    3120:	80 e0       	ldi	r24, 0x00	; 0
    3122:	92 e0       	ldi	r25, 0x02	; 2
    3124:	90 93 0c 03 	sts	0x030C, r25
    3128:	80 93 0b 03 	sts	0x030B, r24
    312c:	5a cf       	rjmp	.-332    	; 0x2fe2 <handleIRRemoteCommands+0x172>
					}
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    312e:	20 91 09 03 	lds	r18, 0x0309
    3132:	30 91 0a 03 	lds	r19, 0x030A
    3136:	80 91 0b 03 	lds	r24, 0x030B
    313a:	90 91 0c 03 	lds	r25, 0x030C
    313e:	82 17       	cp	r24, r18
    3140:	93 07       	cpc	r25, r19
    3142:	0c f4       	brge	.+2      	; 0x3146 <handleIRRemoteCommands+0x2d6>
    3144:	6e c0       	rjmp	.+220    	; 0x3222 <handleIRRemoteCommands+0x3b2>
    3146:	9c 01       	movw	r18, r24
						pwm_left_desired = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
					}
					pwm_right_desired += STEP_MOTORS;
    3148:	2e 5f       	subi	r18, 0xFE	; 254
    314a:	3f 4f       	sbci	r19, 0xFF	; 255
    314c:	30 93 0a 03 	sts	0x030A, r19
    3150:	20 93 09 03 	sts	0x0309, r18
					pwm_left_desired += STEP_MOTORS;
    3154:	02 96       	adiw	r24, 0x02	; 2
    3156:	90 93 0c 03 	sts	0x030C, r25
    315a:	80 93 0b 03 	sts	0x030B, r24
	                if (pwm_right_desired > (MAX_MOTORS_PWM/2)) pwm_right_desired = (MAX_MOTORS_PWM/2);
    315e:	42 e0       	ldi	r20, 0x02	; 2
    3160:	21 30       	cpi	r18, 0x01	; 1
    3162:	34 07       	cpc	r19, r20
    3164:	34 f0       	brlt	.+12     	; 0x3172 <handleIRRemoteCommands+0x302>
    3166:	20 e0       	ldi	r18, 0x00	; 0
    3168:	32 e0       	ldi	r19, 0x02	; 2
    316a:	30 93 0a 03 	sts	0x030A, r19
    316e:	20 93 09 03 	sts	0x0309, r18
    	            if (pwm_left_desired > (MAX_MOTORS_PWM/2)) pwm_left_desired = (MAX_MOTORS_PWM/2);
    3172:	22 e0       	ldi	r18, 0x02	; 2
    3174:	81 30       	cpi	r24, 0x01	; 1
    3176:	92 07       	cpc	r25, r18
    3178:	0c f4       	brge	.+2      	; 0x317c <handleIRRemoteCommands+0x30c>
    317a:	33 cf       	rjmp	.-410    	; 0x2fe2 <handleIRRemoteCommands+0x172>
    317c:	80 e0       	ldi	r24, 0x00	; 0
    317e:	92 e0       	ldi	r25, 0x02	; 2
    3180:	90 93 0c 03 	sts	0x030C, r25
    3184:	80 93 0b 03 	sts	0x030B, r24
    3188:	20 91 09 03 	lds	r18, 0x0309
    318c:	30 91 0a 03 	lds	r19, 0x030A
    3190:	89 ce       	rjmp	.-750    	; 0x2ea4 <handleIRRemoteCommands+0x34>
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
					break;

				case 1:	// right motor forward
					pwm_right_desired += STEP_MOTORS;
    3192:	20 91 09 03 	lds	r18, 0x0309
    3196:	30 91 0a 03 	lds	r19, 0x030A
    319a:	2e 5f       	subi	r18, 0xFE	; 254
    319c:	3f 4f       	sbci	r19, 0xFF	; 255
    319e:	30 93 0a 03 	sts	0x030A, r19
    31a2:	20 93 09 03 	sts	0x0309, r18
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    31a6:	42 e0       	ldi	r20, 0x02	; 2
    31a8:	21 30       	cpi	r18, 0x01	; 1
    31aa:	34 07       	cpc	r19, r20
    31ac:	0c f4       	brge	.+2      	; 0x31b0 <handleIRRemoteCommands+0x340>
    31ae:	76 ce       	rjmp	.-788    	; 0x2e9c <handleIRRemoteCommands+0x2c>
    31b0:	80 e0       	ldi	r24, 0x00	; 0
    31b2:	92 e0       	ldi	r25, 0x02	; 2
    31b4:	90 93 0a 03 	sts	0x030A, r25
    31b8:	80 93 09 03 	sts	0x0309, r24
    31bc:	80 91 0b 03 	lds	r24, 0x030B
    31c0:	90 91 0c 03 	lds	r25, 0x030C
	               	break;

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
    31c4:	20 e0       	ldi	r18, 0x00	; 0
    31c6:	32 e0       	ldi	r19, 0x02	; 2
    31c8:	6f ce       	rjmp	.-802    	; 0x2ea8 <handleIRRemoteCommands+0x38>
	               	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
					break;

	           	case 0:	// colors
				case 50:
					colorState = (colorState+1)%5;
    31ca:	80 91 39 04 	lds	r24, 0x0439
    31ce:	90 e0       	ldi	r25, 0x00	; 0
    31d0:	01 96       	adiw	r24, 0x01	; 1
    31d2:	65 e0       	ldi	r22, 0x05	; 5
    31d4:	70 e0       	ldi	r23, 0x00	; 0
    31d6:	0e 94 57 57 	call	0xaeae	; 0xaeae <__divmodhi4>
    31da:	80 93 39 04 	sts	0x0439, r24

					if(colorState==0) {			// turn on blue and off all IRs
    31de:	88 23       	and	r24, r24
    31e0:	11 f5       	brne	.+68     	; 0x3226 <handleIRRemoteCommands+0x3b6>
						LED_IR1_HIGH;
    31e2:	44 9a       	sbi	0x08, 4	; 8
						LED_IR2_HIGH;
    31e4:	45 9a       	sbi	0x08, 5	; 8
						pwm_blue = 0;
    31e6:	10 92 0e 02 	sts	0x020E, r1
						pwm_green = MAX_LEDS_PWM;
    31ea:	8f ef       	ldi	r24, 0xFF	; 255
    31ec:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = MAX_LEDS_PWM;
    31f0:	80 93 0c 02 	sts	0x020C, r24
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					}

					updateRedLed(pwm_red);
    31f4:	0e 94 91 3f 	call	0x7f22	; 0x7f22 <updateRedLed>
					updateGreenLed(pwm_green);
    31f8:	80 91 0d 02 	lds	r24, 0x020D
    31fc:	0e 94 a5 3f 	call	0x7f4a	; 0x7f4a <updateGreenLed>
					updateBlueLed(pwm_blue);
    3200:	80 91 0e 02 	lds	r24, 0x020E
    3204:	0e 94 b9 3f 	call	0x7f72	; 0x7f72 <updateBlueLed>
    3208:	20 91 09 03 	lds	r18, 0x0309
    320c:	30 91 0a 03 	lds	r19, 0x030A
    3210:	80 91 0b 03 	lds	r24, 0x030B
    3214:	90 91 0c 03 	lds	r25, 0x030C

	               	break;
    3218:	45 ce       	rjmp	.-886    	; 0x2ea4 <handleIRRemoteCommands+0x34>

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
				speedr = pwm_right_desired;
    321a:	30 95       	com	r19
    321c:	21 95       	neg	r18
    321e:	3f 4f       	sbci	r19, 0xFF	; 255
    3220:	43 ce       	rjmp	.-890    	; 0x2ea8 <handleIRRemoteCommands+0x38>
					}
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    3222:	c9 01       	movw	r24, r18
    3224:	91 cf       	rjmp	.-222    	; 0x3148 <handleIRRemoteCommands+0x2d8>
						LED_IR1_HIGH;
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
    3226:	81 30       	cpi	r24, 0x01	; 1
    3228:	91 f0       	breq	.+36     	; 0x324e <handleIRRemoteCommands+0x3de>
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = 0;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==2) {	// turn on red and on all IRs
    322a:	82 30       	cpi	r24, 0x02	; 2
    322c:	a9 f1       	breq	.+106    	; 0x3298 <handleIRRemoteCommands+0x428>
						LED_IR1_LOW;
						LED_IR2_LOW;
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = 0;
					} else if(colorState==3) {	// turn on white
    322e:	83 30       	cpi	r24, 0x03	; 3
    3230:	f1 f1       	breq	.+124    	; 0x32ae <handleIRRemoteCommands+0x43e>
						pwm_blue = 0;
						pwm_green = 0;
						pwm_red = 0;
					} else if(colorState==4) {	// turn off all leds
						pwm_blue = MAX_LEDS_PWM;
    3232:	8f ef       	ldi	r24, 0xFF	; 255
    3234:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = MAX_LEDS_PWM;
    3238:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = MAX_LEDS_PWM;
    323c:	80 93 0c 02 	sts	0x020C, r24
    3240:	d9 cf       	rjmp	.-78     	; 0x31f4 <handleIRRemoteCommands+0x384>
						case 2:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 1;
							break;
						case 3:
							obstacleAvoidanceEnabled = 1;
    3242:	81 e0       	ldi	r24, 0x01	; 1
    3244:	80 93 7c 04 	sts	0x047C, r24
							cliffAvoidanceEnabled = 1;
    3248:	80 93 7d 04 	sts	0x047D, r24
    324c:	23 ce       	rjmp	.-954    	; 0x2e94 <handleIRRemoteCommands+0x24>
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
						pwm_blue = MAX_LEDS_PWM;
    324e:	8f ef       	ldi	r24, 0xFF	; 255
    3250:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = 0;
    3254:	10 92 0d 02 	sts	0x020D, r1
						pwm_red = MAX_LEDS_PWM;
    3258:	80 93 0c 02 	sts	0x020C, r24
    325c:	cb cf       	rjmp	.-106    	; 0x31f4 <handleIRRemoteCommands+0x384>
				case 5:	// stop motors
				case 51:
					pwm_right_desired = 0;
					pwm_left_desired = 0;
					if(currentSelector == 8) {
						calibrateSensors();
    325e:	0e 94 89 42 	call	0x8512	; 0x8512 <calibrateSensors>
						proximityResult[8] = 1023;	// because the first time this value could be low after calibration
    3262:	8f ef       	ldi	r24, 0xFF	; 255
    3264:	93 e0       	ldi	r25, 0x03	; 3
    3266:	90 93 7a 02 	sts	0x027A, r25
    326a:	80 93 79 02 	sts	0x0279, r24
						proximityResult[11] = 1023;	// and in that case a false black line will be detected
    326e:	90 93 80 02 	sts	0x0280, r25
    3272:	80 93 7f 02 	sts	0x027F, r24
						calibState = CALIBRATION_STATE_FIND_THRS_0;
    3276:	86 e0       	ldi	r24, 0x06	; 6
    3278:	80 93 69 0b 	sts	0x0B69, r24
						calibVelIndex = 1;
    327c:	81 e0       	ldi	r24, 0x01	; 1
    327e:	80 93 c3 08 	sts	0x08C3, r24
						calibrateOdomFlag = 1;
    3282:	80 93 76 05 	sts	0x0576, r24
    3286:	20 91 09 03 	lds	r18, 0x0309
    328a:	30 91 0a 03 	lds	r19, 0x030A
    328e:	80 91 0b 03 	lds	r24, 0x030B
    3292:	90 91 0c 03 	lds	r25, 0x030C
    3296:	06 ce       	rjmp	.-1012   	; 0x2ea4 <handleIRRemoteCommands+0x34>
					} else if(colorState==1) {	// turn on green
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = 0;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==2) {	// turn on red and on all IRs
						LED_IR1_LOW;
    3298:	44 98       	cbi	0x08, 4	; 8
						LED_IR2_LOW;
    329a:	45 98       	cbi	0x08, 5	; 8
						pwm_blue = MAX_LEDS_PWM;
    329c:	8f ef       	ldi	r24, 0xFF	; 255
    329e:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = MAX_LEDS_PWM;
    32a2:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = 0;
    32a6:	10 92 0c 02 	sts	0x020C, r1
    32aa:	80 e0       	ldi	r24, 0x00	; 0
    32ac:	a3 cf       	rjmp	.-186    	; 0x31f4 <handleIRRemoteCommands+0x384>
					} else if(colorState==3) {	// turn on white
						pwm_blue = 0;
    32ae:	10 92 0e 02 	sts	0x020E, r1
						pwm_green = 0;
    32b2:	10 92 0d 02 	sts	0x020D, r1
						pwm_red = 0;
    32b6:	10 92 0c 02 	sts	0x020C, r1
    32ba:	80 e0       	ldi	r24, 0x00	; 0
    32bc:	9b cf       	rjmp	.-202    	; 0x31f4 <handleIRRemoteCommands+0x384>

000032be <init_speed_control>:
	//d_speed_control = 5;
	//i_speed_control = 10;
	//i_limit_speed_control = 3200;
	//k_ff_speed_control_left = INIT_KFF;
	//k_ff_speed_control_right = INIT_KFF;
}
    32be:	08 95       	ret

000032c0 <start_vertical_speed_control_left>:

void start_vertical_speed_control_left(signed int *pwm_left) {
    32c0:	cf 92       	push	r12
    32c2:	df 92       	push	r13
    32c4:	ef 92       	push	r14
    32c6:	ff 92       	push	r15
    32c8:	0f 93       	push	r16
    32ca:	1f 93       	push	r17
    32cc:	cf 93       	push	r28
    32ce:	df 93       	push	r29
    32d0:	fc 01       	movw	r30, r24
	
	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).
	
	if(*pwm_left==0) {
    32d2:	80 81       	ld	r24, Z
    32d4:	91 81       	ldd	r25, Z+1	; 0x01
    32d6:	00 97       	sbiw	r24, 0x00	; 0
    32d8:	09 f4       	brne	.+2      	; 0x32dc <start_vertical_speed_control_left+0x1c>
    32da:	f7 c0       	rjmp	.+494    	; 0x34ca <start_vertical_speed_control_left+0x20a>
		delta_left_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    32dc:	20 91 4e 04 	lds	r18, 0x044E
    32e0:	30 91 4f 04 	lds	r19, 0x044F
    32e4:	41 e0       	ldi	r20, 0x01	; 1
    32e6:	2e 30       	cpi	r18, 0x0E	; 14
    32e8:	34 07       	cpc	r19, r20
    32ea:	0c f4       	brge	.+2      	; 0x32ee <start_vertical_speed_control_left+0x2e>
    32ec:	c7 c0       	rjmp	.+398    	; 0x347c <start_vertical_speed_control_left+0x1bc>
		if(*pwm_left > 0) {
    32ee:	18 16       	cp	r1, r24
    32f0:	19 06       	cpc	r1, r25
    32f2:	0c f0       	brlt	.+2      	; 0x32f6 <start_vertical_speed_control_left+0x36>
    32f4:	68 c1       	rjmp	.+720    	; 0x35c6 <start_vertical_speed_control_left+0x306>
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
    32f6:	88 e6       	ldi	r24, 0x68	; 104
    32f8:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    32fa:	82 1b       	sub	r24, r18
    32fc:	93 0b       	sbc	r25, r19
    32fe:	95 95       	asr	r25
    3300:	87 95       	ror	r24
    3302:	95 95       	asr	r25
    3304:	87 95       	ror	r24
    3306:	29 e1       	ldi	r18, 0x19	; 25
    3308:	30 e0       	ldi	r19, 0x00	; 0
    330a:	28 1b       	sub	r18, r24
    330c:	39 0b       	sbc	r19, r25
    330e:	30 93 04 02 	sts	0x0204, r19
    3312:	20 93 03 02 	sts	0x0203, r18
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
		}
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    3316:	c0 91 7b 05 	lds	r28, 0x057B
    331a:	d0 91 7c 05 	lds	r29, 0x057C
    331e:	d0 93 91 09 	sts	0x0991, r29
    3322:	c0 93 90 09 	sts	0x0990, r28
	if(*pwm_left >= 0) {
    3326:	80 81       	ld	r24, Z
    3328:	91 81       	ldd	r25, Z+1	; 0x01
    332a:	97 fd       	sbrc	r25, 7
    332c:	2e c1       	rjmp	.+604    	; 0x358a <start_vertical_speed_control_left+0x2ca>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    332e:	20 91 01 03 	lds	r18, 0x0301
    3332:	30 91 02 03 	lds	r19, 0x0302
    3336:	dc 01       	movw	r26, r24
    3338:	a2 1b       	sub	r26, r18
    333a:	b3 0b       	sbc	r27, r19
    333c:	b0 93 7c 05 	sts	0x057C, r27
    3340:	a0 93 7b 05 	sts	0x057B, r26
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;
    3344:	80 91 19 03 	lds	r24, 0x0319
    3348:	90 91 1a 03 	lds	r25, 0x031A
    334c:	8a 0f       	add	r24, r26
    334e:	9b 1f       	adc	r25, r27
    3350:	90 93 1a 03 	sts	0x031A, r25
    3354:	80 93 19 03 	sts	0x0319, r24

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
    3358:	66 e0       	ldi	r22, 0x06	; 6
    335a:	81 34       	cpi	r24, 0x41	; 65
    335c:	96 07       	cpc	r25, r22
    335e:	0c f4       	brge	.+2      	; 0x3362 <start_vertical_speed_control_left+0xa2>
    3360:	cb c0       	rjmp	.+406    	; 0x34f8 <start_vertical_speed_control_left+0x238>
		delta_left_speed_sum = I_LIMIT_VERTICAL;
    3362:	80 e4       	ldi	r24, 0x40	; 64
    3364:	96 e0       	ldi	r25, 0x06	; 6
    3366:	90 93 1a 03 	sts	0x031A, r25
    336a:	80 93 19 03 	sts	0x0319, r24
    336e:	10 ec       	ldi	r17, 0xC0	; 192
    3370:	c1 2e       	mov	r12, r17
    3372:	12 e1       	ldi	r17, 0x12	; 18
    3374:	d1 2e       	mov	r13, r17
    3376:	e1 2c       	mov	r14, r1
    3378:	f1 2c       	mov	r15, r1
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_left_speed_controller = (signed long int)(k_ff_speed_control_left*(*pwm_left));
    337a:	00 81       	ld	r16, Z
    337c:	11 81       	ldd	r17, Z+1	; 0x01
	pwm_left_speed_controller += (signed long int)(P_VERTICAL * delta_left_speed_current);
    337e:	9d 01       	movw	r18, r26
    3380:	22 0f       	add	r18, r18
    3382:	33 1f       	adc	r19, r19
    3384:	2a 0f       	add	r18, r26
    3386:	3b 1f       	adc	r19, r27
    3388:	22 0f       	add	r18, r18
    338a:	33 1f       	adc	r19, r19
    338c:	22 0f       	add	r18, r18
    338e:	33 1f       	adc	r19, r19
    3390:	22 0f       	add	r18, r18
    3392:	33 1f       	adc	r19, r19
    3394:	2a 0f       	add	r18, r26
    3396:	3b 1f       	adc	r19, r27
    3398:	44 27       	eor	r20, r20
    339a:	37 fd       	sbrc	r19, 7
    339c:	40 95       	com	r20
    339e:	54 2f       	mov	r21, r20
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_left_speed_controller = (signed long int)(k_ff_speed_control_left*(*pwm_left));
    33a0:	80 91 03 02 	lds	r24, 0x0203
    33a4:	90 91 04 02 	lds	r25, 0x0204
    33a8:	08 9f       	mul	r16, r24
    33aa:	b0 01       	movw	r22, r0
    33ac:	09 9f       	mul	r16, r25
    33ae:	70 0d       	add	r23, r0
    33b0:	18 9f       	mul	r17, r24
    33b2:	70 0d       	add	r23, r0
    33b4:	11 24       	eor	r1, r1
    33b6:	88 27       	eor	r24, r24
    33b8:	77 fd       	sbrc	r23, 7
    33ba:	80 95       	com	r24
    33bc:	98 2f       	mov	r25, r24
	pwm_left_speed_controller += (signed long int)(P_VERTICAL * delta_left_speed_current);
    33be:	26 0f       	add	r18, r22
    33c0:	37 1f       	adc	r19, r23
    33c2:	48 1f       	adc	r20, r24
    33c4:	59 1f       	adc	r21, r25
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
    33c6:	ac 1b       	sub	r26, r28
    33c8:	bd 0b       	sbc	r27, r29
    33ca:	aa 0f       	add	r26, r26
    33cc:	bb 1f       	adc	r27, r27
    33ce:	bd 01       	movw	r22, r26
    33d0:	cb 01       	movw	r24, r22
    33d2:	aa 27       	eor	r26, r26
    33d4:	97 fd       	sbrc	r25, 7
    33d6:	a0 95       	com	r26
    33d8:	ba 2f       	mov	r27, r26
    33da:	28 0f       	add	r18, r24
    33dc:	39 1f       	adc	r19, r25
    33de:	4a 1f       	adc	r20, r26
    33e0:	5b 1f       	adc	r21, r27
	pwm_left_speed_controller += (signed long int)(I_VERTICAL*delta_left_speed_sum);
    33e2:	2c 0d       	add	r18, r12
    33e4:	3d 1d       	adc	r19, r13
    33e6:	4e 1d       	adc	r20, r14
    33e8:	5f 1d       	adc	r21, r15
    33ea:	20 93 15 03 	sts	0x0315, r18
    33ee:	30 93 16 03 	sts	0x0316, r19
    33f2:	40 93 17 03 	sts	0x0317, r20
    33f6:	50 93 18 03 	sts	0x0318, r21

	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    33fa:	57 fd       	sbrc	r21, 7
    33fc:	9d c0       	rjmp	.+314    	; 0x3538 <start_vertical_speed_control_left+0x278>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    33fe:	12 16       	cp	r1, r18
    3400:	13 06       	cpc	r1, r19
    3402:	14 06       	cpc	r1, r20
    3404:	15 06       	cpc	r1, r21
    3406:	0c f0       	brlt	.+2      	; 0x340a <start_vertical_speed_control_left+0x14a>
    3408:	a4 c0       	rjmp	.+328    	; 0x3552 <start_vertical_speed_control_left+0x292>
    340a:	17 fd       	sbrc	r17, 7
    340c:	c9 c0       	rjmp	.+402    	; 0x35a0 <start_vertical_speed_control_left+0x2e0>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    340e:	21 3c       	cpi	r18, 0xC1	; 193
    3410:	7d e5       	ldi	r23, 0x5D	; 93
    3412:	37 07       	cpc	r19, r23
    3414:	70 e0       	ldi	r23, 0x00	; 0
    3416:	47 07       	cpc	r20, r23
    3418:	70 e0       	ldi	r23, 0x00	; 0
    341a:	57 07       	cpc	r21, r23
    341c:	0c f4       	brge	.+2      	; 0x3420 <start_vertical_speed_control_left+0x160>
    341e:	99 c0       	rjmp	.+306    	; 0x3552 <start_vertical_speed_control_left+0x292>
    3420:	80 ec       	ldi	r24, 0xC0	; 192
    3422:	9d e5       	ldi	r25, 0x5D	; 93
    3424:	a0 e0       	ldi	r26, 0x00	; 0
    3426:	b0 e0       	ldi	r27, 0x00	; 0
    3428:	80 93 15 03 	sts	0x0315, r24
    342c:	90 93 16 03 	sts	0x0316, r25
    3430:	a0 93 17 03 	sts	0x0317, r26
    3434:	b0 93 18 03 	sts	0x0318, r27
    3438:	2c ed       	ldi	r18, 0xDC	; 220
    343a:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = (signed int)(pwm_left_speed_controller>>4);
    343c:	31 83       	std	Z+1, r19	; 0x01
    343e:	20 83       	st	Z, r18

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
    3440:	80 91 fb 02 	lds	r24, 0x02FB
    3444:	90 91 fc 02 	lds	r25, 0x02FC
    3448:	18 16       	cp	r1, r24
    344a:	19 06       	cpc	r1, r25
    344c:	0c f0       	brlt	.+2      	; 0x3450 <start_vertical_speed_control_left+0x190>
    344e:	98 c0       	rjmp	.+304    	; 0x3580 <start_vertical_speed_control_left+0x2c0>
		*pwm_left += 1;
    3450:	2f 5f       	subi	r18, 0xFF	; 255
    3452:	3f 4f       	sbci	r19, 0xFF	; 255
    3454:	31 83       	std	Z+1, r19	; 0x01
    3456:	20 83       	st	Z, r18
	} else {
		*pwm_left -= 1;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    3458:	42 e0       	ldi	r20, 0x02	; 2
    345a:	21 30       	cpi	r18, 0x01	; 1
    345c:	34 07       	cpc	r19, r20
    345e:	0c f4       	brge	.+2      	; 0x3462 <start_vertical_speed_control_left+0x1a2>
    3460:	41 c0       	rjmp	.+130    	; 0x34e4 <start_vertical_speed_control_left+0x224>
    3462:	80 e0       	ldi	r24, 0x00	; 0
    3464:	92 e0       	ldi	r25, 0x02	; 2
    3466:	91 83       	std	Z+1, r25	; 0x01
    3468:	80 83       	st	Z, r24
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);


}
    346a:	df 91       	pop	r29
    346c:	cf 91       	pop	r28
    346e:	1f 91       	pop	r17
    3470:	0f 91       	pop	r16
    3472:	ff 90       	pop	r15
    3474:	ef 90       	pop	r14
    3476:	df 90       	pop	r13
    3478:	cf 90       	pop	r12
    347a:	08 95       	ret
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    347c:	24 3b       	cpi	r18, 0xB4	; 180
    347e:	31 05       	cpc	r19, r1
    3480:	94 f4       	brge	.+36     	; 0x34a6 <start_vertical_speed_control_left+0x1e6>
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
    3482:	2a 35       	cpi	r18, 0x5A	; 90
    3484:	31 05       	cpc	r19, r1
    3486:	7c f4       	brge	.+30     	; 0x34a6 <start_vertical_speed_control_left+0x1e6>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
    3488:	18 16       	cp	r1, r24
    348a:	19 06       	cpc	r1, r25
    348c:	0c f0       	brlt	.+2      	; 0x3490 <start_vertical_speed_control_left+0x1d0>
    348e:	a9 c0       	rjmp	.+338    	; 0x35e2 <start_vertical_speed_control_left+0x322>
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
    3490:	35 95       	asr	r19
    3492:	27 95       	ror	r18
    3494:	35 95       	asr	r19
    3496:	27 95       	ror	r18
    3498:	27 5e       	subi	r18, 0xE7	; 231
    349a:	3f 4f       	sbci	r19, 0xFF	; 255
    349c:	30 93 04 02 	sts	0x0204, r19
    34a0:	20 93 03 02 	sts	0x0203, r18
    34a4:	38 cf       	rjmp	.-400    	; 0x3316 <start_vertical_speed_control_left+0x56>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
    34a6:	18 16       	cp	r1, r24
    34a8:	19 06       	cpc	r1, r25
    34aa:	0c f0       	brlt	.+2      	; 0x34ae <start_vertical_speed_control_left+0x1ee>
    34ac:	42 c0       	rjmp	.+132    	; 0x3532 <start_vertical_speed_control_left+0x272>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
    34ae:	84 eb       	ldi	r24, 0xB4	; 180
    34b0:	90 e0       	ldi	r25, 0x00	; 0
    34b2:	82 1b       	sub	r24, r18
    34b4:	93 0b       	sbc	r25, r19
    34b6:	95 95       	asr	r25
    34b8:	87 95       	ror	r24
    34ba:	95 95       	asr	r25
    34bc:	87 95       	ror	r24
    34be:	49 96       	adiw	r24, 0x19	; 25
    34c0:	90 93 04 02 	sts	0x0204, r25
    34c4:	80 93 03 02 	sts	0x0203, r24
    34c8:	26 cf       	rjmp	.-436    	; 0x3316 <start_vertical_speed_control_left+0x56>
void start_vertical_speed_control_left(signed int *pwm_left) {
	
	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).
	
	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    34ca:	10 92 1a 03 	sts	0x031A, r1
    34ce:	10 92 19 03 	sts	0x0319, r1
		delta_left_speed_current = 0;
    34d2:	10 92 7c 05 	sts	0x057C, r1
    34d6:	10 92 7b 05 	sts	0x057B, r1
		delta_left_speed_prev = 0;
    34da:	10 92 91 09 	sts	0x0991, r1
    34de:	10 92 90 09 	sts	0x0990, r1
		return;
    34e2:	c3 cf       	rjmp	.-122    	; 0x346a <start_vertical_speed_control_left+0x1aa>
	} else {
		*pwm_left -= 1;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    34e4:	6e ef       	ldi	r22, 0xFE	; 254
    34e6:	20 30       	cpi	r18, 0x00	; 0
    34e8:	36 07       	cpc	r19, r22
    34ea:	0c f0       	brlt	.+2      	; 0x34ee <start_vertical_speed_control_left+0x22e>
    34ec:	be cf       	rjmp	.-132    	; 0x346a <start_vertical_speed_control_left+0x1aa>
    34ee:	80 e0       	ldi	r24, 0x00	; 0
    34f0:	9e ef       	ldi	r25, 0xFE	; 254
    34f2:	91 83       	std	Z+1, r25	; 0x01
    34f4:	80 83       	st	Z, r24
    34f6:	b9 cf       	rjmp	.-142    	; 0x346a <start_vertical_speed_control_left+0x1aa>
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    34f8:	79 ef       	ldi	r23, 0xF9	; 249
    34fa:	80 3c       	cpi	r24, 0xC0	; 192
    34fc:	97 07       	cpc	r25, r23
    34fe:	7c f4       	brge	.+30     	; 0x351e <start_vertical_speed_control_left+0x25e>
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
    3500:	80 ec       	ldi	r24, 0xC0	; 192
    3502:	99 ef       	ldi	r25, 0xF9	; 249
    3504:	90 93 1a 03 	sts	0x031A, r25
    3508:	80 93 19 03 	sts	0x0319, r24
    350c:	60 e4       	ldi	r22, 0x40	; 64
    350e:	c6 2e       	mov	r12, r22
    3510:	6d ee       	ldi	r22, 0xED	; 237
    3512:	d6 2e       	mov	r13, r22
    3514:	6f ef       	ldi	r22, 0xFF	; 255
    3516:	e6 2e       	mov	r14, r22
    3518:	6f ef       	ldi	r22, 0xFF	; 255
    351a:	f6 2e       	mov	r15, r22
    351c:	2e cf       	rjmp	.-420    	; 0x337a <start_vertical_speed_control_left+0xba>
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    351e:	6c 01       	movw	r12, r24
    3520:	cc 0c       	add	r12, r12
    3522:	dd 1c       	adc	r13, r13
    3524:	c8 0e       	add	r12, r24
    3526:	d9 1e       	adc	r13, r25
    3528:	ee 24       	eor	r14, r14
    352a:	d7 fc       	sbrc	r13, 7
    352c:	e0 94       	com	r14
    352e:	fe 2c       	mov	r15, r14
    3530:	24 cf       	rjmp	.-440    	; 0x337a <start_vertical_speed_control_left+0xba>
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    3532:	84 eb       	ldi	r24, 0xB4	; 180
    3534:	90 e0       	ldi	r25, 0x00	; 0
    3536:	e1 ce       	rjmp	.-574    	; 0x32fa <start_vertical_speed_control_left+0x3a>
	pwm_left_speed_controller += (signed long int)(P_VERTICAL * delta_left_speed_current);
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
	pwm_left_speed_controller += (signed long int)(I_VERTICAL*delta_left_speed_sum);

	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    3538:	17 fd       	sbrc	r17, 7
    353a:	0b c0       	rjmp	.+22     	; 0x3552 <start_vertical_speed_control_left+0x292>
		pwm_left_speed_controller = 0;
    353c:	10 92 15 03 	sts	0x0315, r1
    3540:	10 92 16 03 	sts	0x0316, r1
    3544:	10 92 17 03 	sts	0x0317, r1
    3548:	10 92 18 03 	sts	0x0318, r1
    354c:	20 e0       	ldi	r18, 0x00	; 0
    354e:	30 e0       	ldi	r19, 0x00	; 0
    3550:	a9 01       	movw	r20, r18
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    3552:	20 34       	cpi	r18, 0x40	; 64
    3554:	82 ea       	ldi	r24, 0xA2	; 162
    3556:	38 07       	cpc	r19, r24
    3558:	8f ef       	ldi	r24, 0xFF	; 255
    355a:	48 07       	cpc	r20, r24
    355c:	8f ef       	ldi	r24, 0xFF	; 255
    355e:	58 07       	cpc	r21, r24
    3560:	54 f5       	brge	.+84     	; 0x35b6 <start_vertical_speed_control_left+0x2f6>
    3562:	80 e4       	ldi	r24, 0x40	; 64
    3564:	92 ea       	ldi	r25, 0xA2	; 162
    3566:	af ef       	ldi	r26, 0xFF	; 255
    3568:	bf ef       	ldi	r27, 0xFF	; 255
    356a:	80 93 15 03 	sts	0x0315, r24
    356e:	90 93 16 03 	sts	0x0316, r25
    3572:	a0 93 17 03 	sts	0x0317, r26
    3576:	b0 93 18 03 	sts	0x0318, r27
    357a:	24 e2       	ldi	r18, 0x24	; 36
    357c:	3a ef       	ldi	r19, 0xFA	; 250
    357e:	5e cf       	rjmp	.-324    	; 0x343c <start_vertical_speed_control_left+0x17c>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
		*pwm_left += 1;
	} else {
		*pwm_left -= 1;
    3580:	21 50       	subi	r18, 0x01	; 1
    3582:	30 40       	sbci	r19, 0x00	; 0
    3584:	31 83       	std	Z+1, r19	; 0x01
    3586:	20 83       	st	Z, r18
    3588:	67 cf       	rjmp	.-306    	; 0x3458 <start_vertical_speed_control_left+0x198>
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    358a:	a0 91 01 03 	lds	r26, 0x0301
    358e:	b0 91 02 03 	lds	r27, 0x0302
    3592:	a8 0f       	add	r26, r24
    3594:	b9 1f       	adc	r27, r25
    3596:	b0 93 7c 05 	sts	0x057C, r27
    359a:	a0 93 7b 05 	sts	0x057B, r26
    359e:	d2 ce       	rjmp	.-604    	; 0x3344 <start_vertical_speed_control_left+0x84>
	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    35a0:	10 92 15 03 	sts	0x0315, r1
    35a4:	10 92 16 03 	sts	0x0316, r1
    35a8:	10 92 17 03 	sts	0x0317, r1
    35ac:	10 92 18 03 	sts	0x0318, r1
    35b0:	20 e0       	ldi	r18, 0x00	; 0
    35b2:	30 e0       	ldi	r19, 0x00	; 0
    35b4:	a9 01       	movw	r20, r18
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    35b6:	84 e0       	ldi	r24, 0x04	; 4
    35b8:	55 95       	asr	r21
    35ba:	47 95       	ror	r20
    35bc:	37 95       	ror	r19
    35be:	27 95       	ror	r18
    35c0:	8a 95       	dec	r24
    35c2:	d1 f7       	brne	.-12     	; 0x35b8 <start_vertical_speed_control_left+0x2f8>
    35c4:	3b cf       	rjmp	.-394    	; 0x343c <start_vertical_speed_control_left+0x17c>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
    35c6:	88 e6       	ldi	r24, 0x68	; 104
    35c8:	91 e0       	ldi	r25, 0x01	; 1
    35ca:	82 1b       	sub	r24, r18
    35cc:	93 0b       	sbc	r25, r19
    35ce:	95 95       	asr	r25
    35d0:	87 95       	ror	r24
    35d2:	95 95       	asr	r25
    35d4:	87 95       	ror	r24
    35d6:	49 96       	adiw	r24, 0x19	; 25
    35d8:	90 93 04 02 	sts	0x0204, r25
    35dc:	80 93 03 02 	sts	0x0203, r24
    35e0:	9a ce       	rjmp	.-716    	; 0x3316 <start_vertical_speed_control_left+0x56>
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
    35e2:	35 95       	asr	r19
    35e4:	27 95       	ror	r18
    35e6:	35 95       	asr	r19
    35e8:	27 95       	ror	r18
    35ea:	89 e1       	ldi	r24, 0x19	; 25
    35ec:	90 e0       	ldi	r25, 0x00	; 0
    35ee:	82 1b       	sub	r24, r18
    35f0:	93 0b       	sbc	r25, r19
    35f2:	90 93 04 02 	sts	0x0204, r25
    35f6:	80 93 03 02 	sts	0x0203, r24
    35fa:	8d ce       	rjmp	.-742    	; 0x3316 <start_vertical_speed_control_left+0x56>

000035fc <start_vertical_speed_control_right>:


}


void start_vertical_speed_control_right(signed int *pwm_right) {
    35fc:	cf 92       	push	r12
    35fe:	df 92       	push	r13
    3600:	ef 92       	push	r14
    3602:	ff 92       	push	r15
    3604:	0f 93       	push	r16
    3606:	1f 93       	push	r17
    3608:	cf 93       	push	r28
    360a:	df 93       	push	r29
    360c:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    360e:	80 81       	ld	r24, Z
    3610:	91 81       	ldd	r25, Z+1	; 0x01
    3612:	00 97       	sbiw	r24, 0x00	; 0
    3614:	09 f4       	brne	.+2      	; 0x3618 <start_vertical_speed_control_right+0x1c>
    3616:	f7 c0       	rjmp	.+494    	; 0x3806 <start_vertical_speed_control_right+0x20a>
		delta_right_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    3618:	20 91 4e 04 	lds	r18, 0x044E
    361c:	30 91 4f 04 	lds	r19, 0x044F
    3620:	41 e0       	ldi	r20, 0x01	; 1
    3622:	2e 30       	cpi	r18, 0x0E	; 14
    3624:	34 07       	cpc	r19, r20
    3626:	0c f4       	brge	.+2      	; 0x362a <start_vertical_speed_control_right+0x2e>
    3628:	c7 c0       	rjmp	.+398    	; 0x37b8 <start_vertical_speed_control_right+0x1bc>
		if(*pwm_right > 0) {
    362a:	18 16       	cp	r1, r24
    362c:	19 06       	cpc	r1, r25
    362e:	0c f0       	brlt	.+2      	; 0x3632 <start_vertical_speed_control_right+0x36>
    3630:	68 c1       	rjmp	.+720    	; 0x3902 <start_vertical_speed_control_right+0x306>
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
    3632:	88 e6       	ldi	r24, 0x68	; 104
    3634:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    3636:	82 1b       	sub	r24, r18
    3638:	93 0b       	sbc	r25, r19
    363a:	95 95       	asr	r25
    363c:	87 95       	ror	r24
    363e:	95 95       	asr	r25
    3640:	87 95       	ror	r24
    3642:	29 e1       	ldi	r18, 0x19	; 25
    3644:	30 e0       	ldi	r19, 0x00	; 0
    3646:	28 1b       	sub	r18, r24
    3648:	39 0b       	sbc	r19, r25
    364a:	30 93 06 02 	sts	0x0206, r19
    364e:	20 93 05 02 	sts	0x0205, r18
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
		}
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    3652:	c0 91 2f 0b 	lds	r28, 0x0B2F
    3656:	d0 91 30 0b 	lds	r29, 0x0B30
    365a:	d0 93 c9 08 	sts	0x08C9, r29
    365e:	c0 93 c8 08 	sts	0x08C8, r28
	if(*pwm_right >= 0) {
    3662:	80 81       	ld	r24, Z
    3664:	91 81       	ldd	r25, Z+1	; 0x01
    3666:	97 fd       	sbrc	r25, 7
    3668:	2e c1       	rjmp	.+604    	; 0x38c6 <start_vertical_speed_control_right+0x2ca>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    366a:	20 91 03 03 	lds	r18, 0x0303
    366e:	30 91 04 03 	lds	r19, 0x0304
    3672:	dc 01       	movw	r26, r24
    3674:	a2 1b       	sub	r26, r18
    3676:	b3 0b       	sbc	r27, r19
    3678:	b0 93 30 0b 	sts	0x0B30, r27
    367c:	a0 93 2f 0b 	sts	0x0B2F, r26
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    3680:	80 91 1b 03 	lds	r24, 0x031B
    3684:	90 91 1c 03 	lds	r25, 0x031C
    3688:	8a 0f       	add	r24, r26
    368a:	9b 1f       	adc	r25, r27
    368c:	90 93 1c 03 	sts	0x031C, r25
    3690:	80 93 1b 03 	sts	0x031B, r24

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
    3694:	66 e0       	ldi	r22, 0x06	; 6
    3696:	81 34       	cpi	r24, 0x41	; 65
    3698:	96 07       	cpc	r25, r22
    369a:	0c f4       	brge	.+2      	; 0x369e <start_vertical_speed_control_right+0xa2>
    369c:	cb c0       	rjmp	.+406    	; 0x3834 <start_vertical_speed_control_right+0x238>
		delta_right_speed_sum = I_LIMIT_VERTICAL;
    369e:	80 e4       	ldi	r24, 0x40	; 64
    36a0:	96 e0       	ldi	r25, 0x06	; 6
    36a2:	90 93 1c 03 	sts	0x031C, r25
    36a6:	80 93 1b 03 	sts	0x031B, r24
    36aa:	40 ec       	ldi	r20, 0xC0	; 192
    36ac:	c4 2e       	mov	r12, r20
    36ae:	42 e1       	ldi	r20, 0x12	; 18
    36b0:	d4 2e       	mov	r13, r20
    36b2:	e1 2c       	mov	r14, r1
    36b4:	f1 2c       	mov	r15, r1
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_right_speed_controller = (signed long int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
    36b6:	00 81       	ld	r16, Z
    36b8:	11 81       	ldd	r17, Z+1	; 0x01
	pwm_right_speed_controller += (signed long int)(P_VERTICAL * delta_right_speed_current);
    36ba:	9d 01       	movw	r18, r26
    36bc:	22 0f       	add	r18, r18
    36be:	33 1f       	adc	r19, r19
    36c0:	2a 0f       	add	r18, r26
    36c2:	3b 1f       	adc	r19, r27
    36c4:	22 0f       	add	r18, r18
    36c6:	33 1f       	adc	r19, r19
    36c8:	22 0f       	add	r18, r18
    36ca:	33 1f       	adc	r19, r19
    36cc:	22 0f       	add	r18, r18
    36ce:	33 1f       	adc	r19, r19
    36d0:	2a 0f       	add	r18, r26
    36d2:	3b 1f       	adc	r19, r27
    36d4:	44 27       	eor	r20, r20
    36d6:	37 fd       	sbrc	r19, 7
    36d8:	40 95       	com	r20
    36da:	54 2f       	mov	r21, r20
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_right_speed_controller = (signed long int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
    36dc:	80 91 05 02 	lds	r24, 0x0205
    36e0:	90 91 06 02 	lds	r25, 0x0206
    36e4:	08 9f       	mul	r16, r24
    36e6:	b0 01       	movw	r22, r0
    36e8:	09 9f       	mul	r16, r25
    36ea:	70 0d       	add	r23, r0
    36ec:	18 9f       	mul	r17, r24
    36ee:	70 0d       	add	r23, r0
    36f0:	11 24       	eor	r1, r1
    36f2:	88 27       	eor	r24, r24
    36f4:	77 fd       	sbrc	r23, 7
    36f6:	80 95       	com	r24
    36f8:	98 2f       	mov	r25, r24
	pwm_right_speed_controller += (signed long int)(P_VERTICAL * delta_right_speed_current);
    36fa:	26 0f       	add	r18, r22
    36fc:	37 1f       	adc	r19, r23
    36fe:	48 1f       	adc	r20, r24
    3700:	59 1f       	adc	r21, r25
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
    3702:	ac 1b       	sub	r26, r28
    3704:	bd 0b       	sbc	r27, r29
    3706:	aa 0f       	add	r26, r26
    3708:	bb 1f       	adc	r27, r27
    370a:	bd 01       	movw	r22, r26
    370c:	cb 01       	movw	r24, r22
    370e:	aa 27       	eor	r26, r26
    3710:	97 fd       	sbrc	r25, 7
    3712:	a0 95       	com	r26
    3714:	ba 2f       	mov	r27, r26
    3716:	28 0f       	add	r18, r24
    3718:	39 1f       	adc	r19, r25
    371a:	4a 1f       	adc	r20, r26
    371c:	5b 1f       	adc	r21, r27
	pwm_right_speed_controller += (signed long int)(I_VERTICAL*delta_right_speed_sum);
    371e:	2c 0d       	add	r18, r12
    3720:	3d 1d       	adc	r19, r13
    3722:	4e 1d       	adc	r20, r14
    3724:	5f 1d       	adc	r21, r15
    3726:	20 93 11 03 	sts	0x0311, r18
    372a:	30 93 12 03 	sts	0x0312, r19
    372e:	40 93 13 03 	sts	0x0313, r20
    3732:	50 93 14 03 	sts	0x0314, r21

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    3736:	57 fd       	sbrc	r21, 7
    3738:	9d c0       	rjmp	.+314    	; 0x3874 <start_vertical_speed_control_right+0x278>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    373a:	12 16       	cp	r1, r18
    373c:	13 06       	cpc	r1, r19
    373e:	14 06       	cpc	r1, r20
    3740:	15 06       	cpc	r1, r21
    3742:	0c f0       	brlt	.+2      	; 0x3746 <start_vertical_speed_control_right+0x14a>
    3744:	a4 c0       	rjmp	.+328    	; 0x388e <start_vertical_speed_control_right+0x292>
    3746:	17 fd       	sbrc	r17, 7
    3748:	c9 c0       	rjmp	.+402    	; 0x38dc <start_vertical_speed_control_right+0x2e0>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    374a:	21 3c       	cpi	r18, 0xC1	; 193
    374c:	7d e5       	ldi	r23, 0x5D	; 93
    374e:	37 07       	cpc	r19, r23
    3750:	70 e0       	ldi	r23, 0x00	; 0
    3752:	47 07       	cpc	r20, r23
    3754:	70 e0       	ldi	r23, 0x00	; 0
    3756:	57 07       	cpc	r21, r23
    3758:	0c f4       	brge	.+2      	; 0x375c <start_vertical_speed_control_right+0x160>
    375a:	99 c0       	rjmp	.+306    	; 0x388e <start_vertical_speed_control_right+0x292>
    375c:	80 ec       	ldi	r24, 0xC0	; 192
    375e:	9d e5       	ldi	r25, 0x5D	; 93
    3760:	a0 e0       	ldi	r26, 0x00	; 0
    3762:	b0 e0       	ldi	r27, 0x00	; 0
    3764:	80 93 11 03 	sts	0x0311, r24
    3768:	90 93 12 03 	sts	0x0312, r25
    376c:	a0 93 13 03 	sts	0x0313, r26
    3770:	b0 93 14 03 	sts	0x0314, r27
    3774:	2c ed       	ldi	r18, 0xDC	; 220
    3776:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = (signed int)(pwm_right_speed_controller>>4);
    3778:	31 83       	std	Z+1, r19	; 0x01
    377a:	20 83       	st	Z, r18

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
    377c:	80 91 f9 02 	lds	r24, 0x02F9
    3780:	90 91 fa 02 	lds	r25, 0x02FA
    3784:	18 16       	cp	r1, r24
    3786:	19 06       	cpc	r1, r25
    3788:	0c f0       	brlt	.+2      	; 0x378c <start_vertical_speed_control_right+0x190>
    378a:	98 c0       	rjmp	.+304    	; 0x38bc <start_vertical_speed_control_right+0x2c0>
		*pwm_right += 1;
    378c:	2f 5f       	subi	r18, 0xFF	; 255
    378e:	3f 4f       	sbci	r19, 0xFF	; 255
    3790:	31 83       	std	Z+1, r19	; 0x01
    3792:	20 83       	st	Z, r18
	} else {
		*pwm_right -= 1;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    3794:	42 e0       	ldi	r20, 0x02	; 2
    3796:	21 30       	cpi	r18, 0x01	; 1
    3798:	34 07       	cpc	r19, r20
    379a:	0c f4       	brge	.+2      	; 0x379e <start_vertical_speed_control_right+0x1a2>
    379c:	41 c0       	rjmp	.+130    	; 0x3820 <start_vertical_speed_control_right+0x224>
    379e:	80 e0       	ldi	r24, 0x00	; 0
    37a0:	92 e0       	ldi	r25, 0x02	; 2
    37a2:	91 83       	std	Z+1, r25	; 0x01
    37a4:	80 83       	st	Z, r24
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    37a6:	df 91       	pop	r29
    37a8:	cf 91       	pop	r28
    37aa:	1f 91       	pop	r17
    37ac:	0f 91       	pop	r16
    37ae:	ff 90       	pop	r15
    37b0:	ef 90       	pop	r14
    37b2:	df 90       	pop	r13
    37b4:	cf 90       	pop	r12
    37b6:	08 95       	ret
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    37b8:	24 3b       	cpi	r18, 0xB4	; 180
    37ba:	31 05       	cpc	r19, r1
    37bc:	94 f4       	brge	.+36     	; 0x37e2 <start_vertical_speed_control_right+0x1e6>
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
    37be:	2a 35       	cpi	r18, 0x5A	; 90
    37c0:	31 05       	cpc	r19, r1
    37c2:	7c f4       	brge	.+30     	; 0x37e2 <start_vertical_speed_control_right+0x1e6>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
    37c4:	18 16       	cp	r1, r24
    37c6:	19 06       	cpc	r1, r25
    37c8:	0c f0       	brlt	.+2      	; 0x37cc <start_vertical_speed_control_right+0x1d0>
    37ca:	a9 c0       	rjmp	.+338    	; 0x391e <start_vertical_speed_control_right+0x322>
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
    37cc:	35 95       	asr	r19
    37ce:	27 95       	ror	r18
    37d0:	35 95       	asr	r19
    37d2:	27 95       	ror	r18
    37d4:	27 5e       	subi	r18, 0xE7	; 231
    37d6:	3f 4f       	sbci	r19, 0xFF	; 255
    37d8:	30 93 06 02 	sts	0x0206, r19
    37dc:	20 93 05 02 	sts	0x0205, r18
    37e0:	38 cf       	rjmp	.-400    	; 0x3652 <start_vertical_speed_control_right+0x56>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
    37e2:	18 16       	cp	r1, r24
    37e4:	19 06       	cpc	r1, r25
    37e6:	0c f0       	brlt	.+2      	; 0x37ea <start_vertical_speed_control_right+0x1ee>
    37e8:	42 c0       	rjmp	.+132    	; 0x386e <start_vertical_speed_control_right+0x272>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
    37ea:	84 eb       	ldi	r24, 0xB4	; 180
    37ec:	90 e0       	ldi	r25, 0x00	; 0
    37ee:	82 1b       	sub	r24, r18
    37f0:	93 0b       	sbc	r25, r19
    37f2:	95 95       	asr	r25
    37f4:	87 95       	ror	r24
    37f6:	95 95       	asr	r25
    37f8:	87 95       	ror	r24
    37fa:	49 96       	adiw	r24, 0x19	; 25
    37fc:	90 93 06 02 	sts	0x0206, r25
    3800:	80 93 05 02 	sts	0x0205, r24
    3804:	26 cf       	rjmp	.-436    	; 0x3652 <start_vertical_speed_control_right+0x56>
void start_vertical_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    3806:	10 92 1c 03 	sts	0x031C, r1
    380a:	10 92 1b 03 	sts	0x031B, r1
		delta_right_speed_current = 0;
    380e:	10 92 30 0b 	sts	0x0B30, r1
    3812:	10 92 2f 0b 	sts	0x0B2F, r1
		delta_right_speed_prev = 0;
    3816:	10 92 c9 08 	sts	0x08C9, r1
    381a:	10 92 c8 08 	sts	0x08C8, r1
		return;
    381e:	c3 cf       	rjmp	.-122    	; 0x37a6 <start_vertical_speed_control_right+0x1aa>
	} else {
		*pwm_right -= 1;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    3820:	6e ef       	ldi	r22, 0xFE	; 254
    3822:	20 30       	cpi	r18, 0x00	; 0
    3824:	36 07       	cpc	r19, r22
    3826:	0c f0       	brlt	.+2      	; 0x382a <start_vertical_speed_control_right+0x22e>
    3828:	be cf       	rjmp	.-132    	; 0x37a6 <start_vertical_speed_control_right+0x1aa>
    382a:	80 e0       	ldi	r24, 0x00	; 0
    382c:	9e ef       	ldi	r25, 0xFE	; 254
    382e:	91 83       	std	Z+1, r25	; 0x01
    3830:	80 83       	st	Z, r24
    3832:	b9 cf       	rjmp	.-142    	; 0x37a6 <start_vertical_speed_control_right+0x1aa>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    3834:	79 ef       	ldi	r23, 0xF9	; 249
    3836:	80 3c       	cpi	r24, 0xC0	; 192
    3838:	97 07       	cpc	r25, r23
    383a:	7c f4       	brge	.+30     	; 0x385a <start_vertical_speed_control_right+0x25e>
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
    383c:	80 ec       	ldi	r24, 0xC0	; 192
    383e:	99 ef       	ldi	r25, 0xF9	; 249
    3840:	90 93 1c 03 	sts	0x031C, r25
    3844:	80 93 1b 03 	sts	0x031B, r24
    3848:	20 e4       	ldi	r18, 0x40	; 64
    384a:	c2 2e       	mov	r12, r18
    384c:	2d ee       	ldi	r18, 0xED	; 237
    384e:	d2 2e       	mov	r13, r18
    3850:	2f ef       	ldi	r18, 0xFF	; 255
    3852:	e2 2e       	mov	r14, r18
    3854:	2f ef       	ldi	r18, 0xFF	; 255
    3856:	f2 2e       	mov	r15, r18
    3858:	2e cf       	rjmp	.-420    	; 0x36b6 <start_vertical_speed_control_right+0xba>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    385a:	6c 01       	movw	r12, r24
    385c:	cc 0c       	add	r12, r12
    385e:	dd 1c       	adc	r13, r13
    3860:	c8 0e       	add	r12, r24
    3862:	d9 1e       	adc	r13, r25
    3864:	ee 24       	eor	r14, r14
    3866:	d7 fc       	sbrc	r13, 7
    3868:	e0 94       	com	r14
    386a:	fe 2c       	mov	r15, r14
    386c:	24 cf       	rjmp	.-440    	; 0x36b6 <start_vertical_speed_control_right+0xba>
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    386e:	84 eb       	ldi	r24, 0xB4	; 180
    3870:	90 e0       	ldi	r25, 0x00	; 0
    3872:	e1 ce       	rjmp	.-574    	; 0x3636 <start_vertical_speed_control_right+0x3a>
	pwm_right_speed_controller += (signed long int)(P_VERTICAL * delta_right_speed_current);
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
	pwm_right_speed_controller += (signed long int)(I_VERTICAL*delta_right_speed_sum);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    3874:	17 fd       	sbrc	r17, 7
    3876:	0b c0       	rjmp	.+22     	; 0x388e <start_vertical_speed_control_right+0x292>
		pwm_right_speed_controller = 0;
    3878:	10 92 11 03 	sts	0x0311, r1
    387c:	10 92 12 03 	sts	0x0312, r1
    3880:	10 92 13 03 	sts	0x0313, r1
    3884:	10 92 14 03 	sts	0x0314, r1
    3888:	20 e0       	ldi	r18, 0x00	; 0
    388a:	30 e0       	ldi	r19, 0x00	; 0
    388c:	a9 01       	movw	r20, r18
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    388e:	20 34       	cpi	r18, 0x40	; 64
    3890:	82 ea       	ldi	r24, 0xA2	; 162
    3892:	38 07       	cpc	r19, r24
    3894:	8f ef       	ldi	r24, 0xFF	; 255
    3896:	48 07       	cpc	r20, r24
    3898:	8f ef       	ldi	r24, 0xFF	; 255
    389a:	58 07       	cpc	r21, r24
    389c:	54 f5       	brge	.+84     	; 0x38f2 <start_vertical_speed_control_right+0x2f6>
    389e:	80 e4       	ldi	r24, 0x40	; 64
    38a0:	92 ea       	ldi	r25, 0xA2	; 162
    38a2:	af ef       	ldi	r26, 0xFF	; 255
    38a4:	bf ef       	ldi	r27, 0xFF	; 255
    38a6:	80 93 11 03 	sts	0x0311, r24
    38aa:	90 93 12 03 	sts	0x0312, r25
    38ae:	a0 93 13 03 	sts	0x0313, r26
    38b2:	b0 93 14 03 	sts	0x0314, r27
    38b6:	24 e2       	ldi	r18, 0x24	; 36
    38b8:	3a ef       	ldi	r19, 0xFA	; 250
    38ba:	5e cf       	rjmp	.-324    	; 0x3778 <start_vertical_speed_control_right+0x17c>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
		*pwm_right += 1;
	} else {
		*pwm_right -= 1;
    38bc:	21 50       	subi	r18, 0x01	; 1
    38be:	30 40       	sbci	r19, 0x00	; 0
    38c0:	31 83       	std	Z+1, r19	; 0x01
    38c2:	20 83       	st	Z, r18
    38c4:	67 cf       	rjmp	.-306    	; 0x3794 <start_vertical_speed_control_right+0x198>
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    38c6:	a0 91 03 03 	lds	r26, 0x0303
    38ca:	b0 91 04 03 	lds	r27, 0x0304
    38ce:	a8 0f       	add	r26, r24
    38d0:	b9 1f       	adc	r27, r25
    38d2:	b0 93 30 0b 	sts	0x0B30, r27
    38d6:	a0 93 2f 0b 	sts	0x0B2F, r26
    38da:	d2 ce       	rjmp	.-604    	; 0x3680 <start_vertical_speed_control_right+0x84>
	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    38dc:	10 92 11 03 	sts	0x0311, r1
    38e0:	10 92 12 03 	sts	0x0312, r1
    38e4:	10 92 13 03 	sts	0x0313, r1
    38e8:	10 92 14 03 	sts	0x0314, r1
    38ec:	20 e0       	ldi	r18, 0x00	; 0
    38ee:	30 e0       	ldi	r19, 0x00	; 0
    38f0:	a9 01       	movw	r20, r18
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    38f2:	64 e0       	ldi	r22, 0x04	; 4
    38f4:	55 95       	asr	r21
    38f6:	47 95       	ror	r20
    38f8:	37 95       	ror	r19
    38fa:	27 95       	ror	r18
    38fc:	6a 95       	dec	r22
    38fe:	d1 f7       	brne	.-12     	; 0x38f4 <start_vertical_speed_control_right+0x2f8>
    3900:	3b cf       	rjmp	.-394    	; 0x3778 <start_vertical_speed_control_right+0x17c>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
    3902:	88 e6       	ldi	r24, 0x68	; 104
    3904:	91 e0       	ldi	r25, 0x01	; 1
    3906:	82 1b       	sub	r24, r18
    3908:	93 0b       	sbc	r25, r19
    390a:	95 95       	asr	r25
    390c:	87 95       	ror	r24
    390e:	95 95       	asr	r25
    3910:	87 95       	ror	r24
    3912:	49 96       	adiw	r24, 0x19	; 25
    3914:	90 93 06 02 	sts	0x0206, r25
    3918:	80 93 05 02 	sts	0x0205, r24
    391c:	9a ce       	rjmp	.-716    	; 0x3652 <start_vertical_speed_control_right+0x56>
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
    391e:	35 95       	asr	r19
    3920:	27 95       	ror	r18
    3922:	35 95       	asr	r19
    3924:	27 95       	ror	r18
    3926:	89 e1       	ldi	r24, 0x19	; 25
    3928:	90 e0       	ldi	r25, 0x00	; 0
    392a:	82 1b       	sub	r24, r18
    392c:	93 0b       	sbc	r25, r19
    392e:	90 93 06 02 	sts	0x0206, r25
    3932:	80 93 05 02 	sts	0x0205, r24
    3936:	8d ce       	rjmp	.-742    	; 0x3652 <start_vertical_speed_control_right+0x56>

00003938 <start_horizontal_speed_control_right>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_right(signed int *pwm_right) {
    3938:	cf 92       	push	r12
    393a:	df 92       	push	r13
    393c:	ef 92       	push	r14
    393e:	ff 92       	push	r15
    3940:	0f 93       	push	r16
    3942:	1f 93       	push	r17
    3944:	cf 93       	push	r28
    3946:	df 93       	push	r29
    3948:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    394a:	80 81       	ld	r24, Z
    394c:	91 81       	ldd	r25, Z+1	; 0x01
    394e:	00 97       	sbiw	r24, 0x00	; 0
    3950:	09 f4       	brne	.+2      	; 0x3954 <start_horizontal_speed_control_right+0x1c>
    3952:	b8 c0       	rjmp	.+368    	; 0x3ac4 <start_horizontal_speed_control_right+0x18c>
		delta_right_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    3954:	c0 91 2f 0b 	lds	r28, 0x0B2F
    3958:	d0 91 30 0b 	lds	r29, 0x0B30
    395c:	d0 93 c9 08 	sts	0x08C9, r29
    3960:	c0 93 c8 08 	sts	0x08C8, r28
	if(*pwm_right >= 0) {
    3964:	80 81       	ld	r24, Z
    3966:	91 81       	ldd	r25, Z+1	; 0x01
    3968:	97 fd       	sbrc	r25, 7
    396a:	cd c0       	rjmp	.+410    	; 0x3b06 <start_horizontal_speed_control_right+0x1ce>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    396c:	20 91 03 03 	lds	r18, 0x0303
    3970:	30 91 04 03 	lds	r19, 0x0304
    3974:	dc 01       	movw	r26, r24
    3976:	a2 1b       	sub	r26, r18
    3978:	b3 0b       	sbc	r27, r19
    397a:	b0 93 30 0b 	sts	0x0B30, r27
    397e:	a0 93 2f 0b 	sts	0x0B2F, r26
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}

	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    3982:	c0 90 1b 03 	lds	r12, 0x031B
    3986:	d0 90 1c 03 	lds	r13, 0x031C
    398a:	ca 0e       	add	r12, r26
    398c:	db 1e       	adc	r13, r27
    398e:	d0 92 1c 03 	sts	0x031C, r13
    3992:	c0 92 1b 03 	sts	0x031B, r12

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
    3996:	81 e4       	ldi	r24, 0x41	; 65
    3998:	c8 16       	cp	r12, r24
    399a:	86 e0       	ldi	r24, 0x06	; 6
    399c:	d8 06       	cpc	r13, r24
    399e:	0c f4       	brge	.+2      	; 0x39a2 <start_horizontal_speed_control_right+0x6a>
    39a0:	9e c0       	rjmp	.+316    	; 0x3ade <start_horizontal_speed_control_right+0x1a6>
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
    39a2:	80 e4       	ldi	r24, 0x40	; 64
    39a4:	96 e0       	ldi	r25, 0x06	; 6
    39a6:	90 93 1c 03 	sts	0x031C, r25
    39aa:	80 93 1b 03 	sts	0x031B, r24
    39ae:	10 e8       	ldi	r17, 0x80	; 128
    39b0:	c1 2e       	mov	r12, r17
    39b2:	1c e0       	ldi	r17, 0x0C	; 12
    39b4:	d1 2e       	mov	r13, r17
    39b6:	e1 2c       	mov	r14, r1
    39b8:	f1 2c       	mov	r15, r1
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
	}		

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed long int)((*pwm_right) << 3);
    39ba:	00 81       	ld	r16, Z
    39bc:	11 81       	ldd	r17, Z+1	; 0x01
	pwm_right_speed_controller += (signed long int)(delta_right_speed_current*P_HORIZONTAL);
    39be:	cd 01       	movw	r24, r26
    39c0:	88 0f       	add	r24, r24
    39c2:	99 1f       	adc	r25, r25
    39c4:	8a 0f       	add	r24, r26
    39c6:	9b 1f       	adc	r25, r27
    39c8:	9c 01       	movw	r18, r24
    39ca:	22 0f       	add	r18, r18
    39cc:	33 1f       	adc	r19, r19
    39ce:	22 0f       	add	r18, r18
    39d0:	33 1f       	adc	r19, r19
    39d2:	28 0f       	add	r18, r24
    39d4:	39 1f       	adc	r19, r25
    39d6:	44 27       	eor	r20, r20
    39d8:	37 fd       	sbrc	r19, 7
    39da:	40 95       	com	r20
    39dc:	54 2f       	mov	r21, r20
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
	}		

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed long int)((*pwm_right) << 3);
    39de:	b8 01       	movw	r22, r16
    39e0:	66 0f       	add	r22, r22
    39e2:	77 1f       	adc	r23, r23
    39e4:	66 0f       	add	r22, r22
    39e6:	77 1f       	adc	r23, r23
    39e8:	66 0f       	add	r22, r22
    39ea:	77 1f       	adc	r23, r23
    39ec:	88 27       	eor	r24, r24
    39ee:	77 fd       	sbrc	r23, 7
    39f0:	80 95       	com	r24
    39f2:	98 2f       	mov	r25, r24
	pwm_right_speed_controller += (signed long int)(delta_right_speed_current*P_HORIZONTAL);
    39f4:	26 0f       	add	r18, r22
    39f6:	37 1f       	adc	r19, r23
    39f8:	48 1f       	adc	r20, r24
    39fa:	59 1f       	adc	r21, r25
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
    39fc:	ac 1b       	sub	r26, r28
    39fe:	bd 0b       	sbc	r27, r29
    3a00:	cd 01       	movw	r24, r26
    3a02:	88 0f       	add	r24, r24
    3a04:	99 1f       	adc	r25, r25
    3a06:	8a 0f       	add	r24, r26
    3a08:	9b 1f       	adc	r25, r27
    3a0a:	aa 27       	eor	r26, r26
    3a0c:	97 fd       	sbrc	r25, 7
    3a0e:	a0 95       	com	r26
    3a10:	ba 2f       	mov	r27, r26
    3a12:	28 0f       	add	r18, r24
    3a14:	39 1f       	adc	r19, r25
    3a16:	4a 1f       	adc	r20, r26
    3a18:	5b 1f       	adc	r21, r27
	pwm_right_speed_controller += (signed long int)(delta_right_speed_sum*I_HORIZONTAL);
    3a1a:	2c 0d       	add	r18, r12
    3a1c:	3d 1d       	adc	r19, r13
    3a1e:	4e 1d       	adc	r20, r14
    3a20:	5f 1d       	adc	r21, r15
    3a22:	20 93 11 03 	sts	0x0311, r18
    3a26:	30 93 12 03 	sts	0x0312, r19
    3a2a:	40 93 13 03 	sts	0x0313, r20
    3a2e:	50 93 14 03 	sts	0x0314, r21

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    3a32:	57 fd       	sbrc	r21, 7
    3a34:	7a c0       	rjmp	.+244    	; 0x3b2a <start_horizontal_speed_control_right+0x1f2>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    3a36:	12 16       	cp	r1, r18
    3a38:	13 06       	cpc	r1, r19
    3a3a:	14 06       	cpc	r1, r20
    3a3c:	15 06       	cpc	r1, r21
    3a3e:	0c f0       	brlt	.+2      	; 0x3a42 <start_horizontal_speed_control_right+0x10a>
    3a40:	81 c0       	rjmp	.+258    	; 0x3b44 <start_horizontal_speed_control_right+0x20c>
    3a42:	17 fd       	sbrc	r17, 7
    3a44:	ad c0       	rjmp	.+346    	; 0x3ba0 <start_horizontal_speed_control_right+0x268>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    3a46:	21 3c       	cpi	r18, 0xC1	; 193
    3a48:	8d e5       	ldi	r24, 0x5D	; 93
    3a4a:	38 07       	cpc	r19, r24
    3a4c:	80 e0       	ldi	r24, 0x00	; 0
    3a4e:	48 07       	cpc	r20, r24
    3a50:	80 e0       	ldi	r24, 0x00	; 0
    3a52:	58 07       	cpc	r21, r24
    3a54:	0c f4       	brge	.+2      	; 0x3a58 <start_horizontal_speed_control_right+0x120>
    3a56:	76 c0       	rjmp	.+236    	; 0x3b44 <start_horizontal_speed_control_right+0x20c>
    3a58:	80 ec       	ldi	r24, 0xC0	; 192
    3a5a:	9d e5       	ldi	r25, 0x5D	; 93
    3a5c:	a0 e0       	ldi	r26, 0x00	; 0
    3a5e:	b0 e0       	ldi	r27, 0x00	; 0
    3a60:	80 93 11 03 	sts	0x0311, r24
    3a64:	90 93 12 03 	sts	0x0312, r25
    3a68:	a0 93 13 03 	sts	0x0313, r26
    3a6c:	b0 93 14 03 	sts	0x0314, r27
    3a70:	2c ed       	ldi	r18, 0xDC	; 220
    3a72:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = (signed int)(pwm_right_speed_controller>>4);
    3a74:	31 83       	std	Z+1, r19	; 0x01
    3a76:	20 83       	st	Z, r18

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
    3a78:	80 91 f9 02 	lds	r24, 0x02F9
    3a7c:	90 91 fa 02 	lds	r25, 0x02FA
    3a80:	18 16       	cp	r1, r24
    3a82:	19 06       	cpc	r1, r25
    3a84:	0c f0       	brlt	.+2      	; 0x3a88 <start_horizontal_speed_control_right+0x150>
    3a86:	87 c0       	rjmp	.+270    	; 0x3b96 <start_horizontal_speed_control_right+0x25e>
		*pwm_right += 1;
    3a88:	2f 5f       	subi	r18, 0xFF	; 255
    3a8a:	3f 4f       	sbci	r19, 0xFF	; 255
    3a8c:	31 83       	std	Z+1, r19	; 0x01
    3a8e:	20 83       	st	Z, r18
	} else {
		*pwm_right -= 1;
	}

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
    3a90:	12 16       	cp	r1, r18
    3a92:	13 06       	cpc	r1, r19
    3a94:	0c f0       	brlt	.+2      	; 0x3a98 <start_horizontal_speed_control_right+0x160>
    3a96:	6d c0       	rjmp	.+218    	; 0x3b72 <start_horizontal_speed_control_right+0x23a>
		*pwm_right += 30;
    3a98:	22 5e       	subi	r18, 0xE2	; 226
    3a9a:	3f 4f       	sbci	r19, 0xFF	; 255
    3a9c:	31 83       	std	Z+1, r19	; 0x01
    3a9e:	20 83       	st	Z, r18
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    3aa0:	82 e0       	ldi	r24, 0x02	; 2
    3aa2:	21 30       	cpi	r18, 0x01	; 1
    3aa4:	38 07       	cpc	r19, r24
    3aa6:	0c f4       	brge	.+2      	; 0x3aaa <start_horizontal_speed_control_right+0x172>
    3aa8:	6c c0       	rjmp	.+216    	; 0x3b82 <start_horizontal_speed_control_right+0x24a>
    3aaa:	80 e0       	ldi	r24, 0x00	; 0
    3aac:	92 e0       	ldi	r25, 0x02	; 2
    3aae:	91 83       	std	Z+1, r25	; 0x01
    3ab0:	80 83       	st	Z, r24
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    3ab2:	df 91       	pop	r29
    3ab4:	cf 91       	pop	r28
    3ab6:	1f 91       	pop	r17
    3ab8:	0f 91       	pop	r16
    3aba:	ff 90       	pop	r15
    3abc:	ef 90       	pop	r14
    3abe:	df 90       	pop	r13
    3ac0:	cf 90       	pop	r12
    3ac2:	08 95       	ret
void start_horizontal_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    3ac4:	10 92 1c 03 	sts	0x031C, r1
    3ac8:	10 92 1b 03 	sts	0x031B, r1
		delta_right_speed_current = 0;
    3acc:	10 92 30 0b 	sts	0x0B30, r1
    3ad0:	10 92 2f 0b 	sts	0x0B2F, r1
		delta_right_speed_prev = 0;
    3ad4:	10 92 c9 08 	sts	0x08C9, r1
    3ad8:	10 92 c8 08 	sts	0x08C8, r1
		return;
    3adc:	ea cf       	rjmp	.-44     	; 0x3ab2 <start_horizontal_speed_control_right+0x17a>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    3ade:	80 ec       	ldi	r24, 0xC0	; 192
    3ae0:	c8 16       	cp	r12, r24
    3ae2:	89 ef       	ldi	r24, 0xF9	; 249
    3ae4:	d8 06       	cpc	r13, r24
    3ae6:	d4 f4       	brge	.+52     	; 0x3b1c <start_horizontal_speed_control_right+0x1e4>
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
    3ae8:	80 ec       	ldi	r24, 0xC0	; 192
    3aea:	99 ef       	ldi	r25, 0xF9	; 249
    3aec:	90 93 1c 03 	sts	0x031C, r25
    3af0:	80 93 1b 03 	sts	0x031B, r24
    3af4:	60 e8       	ldi	r22, 0x80	; 128
    3af6:	c6 2e       	mov	r12, r22
    3af8:	63 ef       	ldi	r22, 0xF3	; 243
    3afa:	d6 2e       	mov	r13, r22
    3afc:	6f ef       	ldi	r22, 0xFF	; 255
    3afe:	e6 2e       	mov	r14, r22
    3b00:	6f ef       	ldi	r22, 0xFF	; 255
    3b02:	f6 2e       	mov	r15, r22
    3b04:	5a cf       	rjmp	.-332    	; 0x39ba <start_horizontal_speed_control_right+0x82>
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    3b06:	a0 91 03 03 	lds	r26, 0x0303
    3b0a:	b0 91 04 03 	lds	r27, 0x0304
    3b0e:	a8 0f       	add	r26, r24
    3b10:	b9 1f       	adc	r27, r25
    3b12:	b0 93 30 0b 	sts	0x0B30, r27
    3b16:	a0 93 2f 0b 	sts	0x0B2F, r26
    3b1a:	33 cf       	rjmp	.-410    	; 0x3982 <start_horizontal_speed_control_right+0x4a>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    3b1c:	cc 0c       	add	r12, r12
    3b1e:	dd 1c       	adc	r13, r13
    3b20:	ee 24       	eor	r14, r14
    3b22:	d7 fc       	sbrc	r13, 7
    3b24:	e0 94       	com	r14
    3b26:	fe 2c       	mov	r15, r14
    3b28:	48 cf       	rjmp	.-368    	; 0x39ba <start_horizontal_speed_control_right+0x82>
	pwm_right_speed_controller += (signed long int)(delta_right_speed_current*P_HORIZONTAL);
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
	pwm_right_speed_controller += (signed long int)(delta_right_speed_sum*I_HORIZONTAL);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    3b2a:	17 fd       	sbrc	r17, 7
    3b2c:	0b c0       	rjmp	.+22     	; 0x3b44 <start_horizontal_speed_control_right+0x20c>
		pwm_right_speed_controller = 0;
    3b2e:	10 92 11 03 	sts	0x0311, r1
    3b32:	10 92 12 03 	sts	0x0312, r1
    3b36:	10 92 13 03 	sts	0x0313, r1
    3b3a:	10 92 14 03 	sts	0x0314, r1
    3b3e:	20 e0       	ldi	r18, 0x00	; 0
    3b40:	30 e0       	ldi	r19, 0x00	; 0
    3b42:	a9 01       	movw	r20, r18
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    3b44:	20 34       	cpi	r18, 0x40	; 64
    3b46:	82 ea       	ldi	r24, 0xA2	; 162
    3b48:	38 07       	cpc	r19, r24
    3b4a:	8f ef       	ldi	r24, 0xFF	; 255
    3b4c:	48 07       	cpc	r20, r24
    3b4e:	8f ef       	ldi	r24, 0xFF	; 255
    3b50:	58 07       	cpc	r21, r24
    3b52:	8c f5       	brge	.+98     	; 0x3bb6 <start_horizontal_speed_control_right+0x27e>
    3b54:	80 e4       	ldi	r24, 0x40	; 64
    3b56:	92 ea       	ldi	r25, 0xA2	; 162
    3b58:	af ef       	ldi	r26, 0xFF	; 255
    3b5a:	bf ef       	ldi	r27, 0xFF	; 255
    3b5c:	80 93 11 03 	sts	0x0311, r24
    3b60:	90 93 12 03 	sts	0x0312, r25
    3b64:	a0 93 13 03 	sts	0x0313, r26
    3b68:	b0 93 14 03 	sts	0x0314, r27
    3b6c:	24 e2       	ldi	r18, 0x24	; 36
    3b6e:	3a ef       	ldi	r19, 0xFA	; 250
    3b70:	81 cf       	rjmp	.-254    	; 0x3a74 <start_horizontal_speed_control_right+0x13c>
	}

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
		*pwm_right += 30;
	} else if(*pwm_right < 0) {
    3b72:	21 15       	cp	r18, r1
    3b74:	31 05       	cpc	r19, r1
    3b76:	09 f4       	brne	.+2      	; 0x3b7a <start_horizontal_speed_control_right+0x242>
    3b78:	9c cf       	rjmp	.-200    	; 0x3ab2 <start_horizontal_speed_control_right+0x17a>
		*pwm_right -= 30;
    3b7a:	2e 51       	subi	r18, 0x1E	; 30
    3b7c:	30 40       	sbci	r19, 0x00	; 0
    3b7e:	31 83       	std	Z+1, r19	; 0x01
    3b80:	20 83       	st	Z, r18
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    3b82:	8e ef       	ldi	r24, 0xFE	; 254
    3b84:	20 30       	cpi	r18, 0x00	; 0
    3b86:	38 07       	cpc	r19, r24
    3b88:	0c f0       	brlt	.+2      	; 0x3b8c <start_horizontal_speed_control_right+0x254>
    3b8a:	93 cf       	rjmp	.-218    	; 0x3ab2 <start_horizontal_speed_control_right+0x17a>
    3b8c:	80 e0       	ldi	r24, 0x00	; 0
    3b8e:	9e ef       	ldi	r25, 0xFE	; 254
    3b90:	91 83       	std	Z+1, r25	; 0x01
    3b92:	80 83       	st	Z, r24
    3b94:	8e cf       	rjmp	.-228    	; 0x3ab2 <start_horizontal_speed_control_right+0x17a>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
		*pwm_right += 1;
	} else {
		*pwm_right -= 1;
    3b96:	21 50       	subi	r18, 0x01	; 1
    3b98:	30 40       	sbci	r19, 0x00	; 0
    3b9a:	31 83       	std	Z+1, r19	; 0x01
    3b9c:	20 83       	st	Z, r18
    3b9e:	78 cf       	rjmp	.-272    	; 0x3a90 <start_horizontal_speed_control_right+0x158>
	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    3ba0:	10 92 11 03 	sts	0x0311, r1
    3ba4:	10 92 12 03 	sts	0x0312, r1
    3ba8:	10 92 13 03 	sts	0x0313, r1
    3bac:	10 92 14 03 	sts	0x0314, r1
    3bb0:	20 e0       	ldi	r18, 0x00	; 0
    3bb2:	30 e0       	ldi	r19, 0x00	; 0
    3bb4:	a9 01       	movw	r20, r18
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    3bb6:	14 e0       	ldi	r17, 0x04	; 4
    3bb8:	55 95       	asr	r21
    3bba:	47 95       	ror	r20
    3bbc:	37 95       	ror	r19
    3bbe:	27 95       	ror	r18
    3bc0:	1a 95       	dec	r17
    3bc2:	d1 f7       	brne	.-12     	; 0x3bb8 <start_horizontal_speed_control_right+0x280>
    3bc4:	57 cf       	rjmp	.-338    	; 0x3a74 <start_horizontal_speed_control_right+0x13c>

00003bc6 <start_horizontal_speed_control_left>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_left(signed int *pwm_left) {
    3bc6:	cf 92       	push	r12
    3bc8:	df 92       	push	r13
    3bca:	ef 92       	push	r14
    3bcc:	ff 92       	push	r15
    3bce:	0f 93       	push	r16
    3bd0:	1f 93       	push	r17
    3bd2:	cf 93       	push	r28
    3bd4:	df 93       	push	r29
    3bd6:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
    3bd8:	80 81       	ld	r24, Z
    3bda:	91 81       	ldd	r25, Z+1	; 0x01
    3bdc:	00 97       	sbiw	r24, 0x00	; 0
    3bde:	09 f4       	brne	.+2      	; 0x3be2 <start_horizontal_speed_control_left+0x1c>
    3be0:	b8 c0       	rjmp	.+368    	; 0x3d52 <start_horizontal_speed_control_left+0x18c>
		delta_left_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    3be2:	c0 91 7b 05 	lds	r28, 0x057B
    3be6:	d0 91 7c 05 	lds	r29, 0x057C
    3bea:	d0 93 91 09 	sts	0x0991, r29
    3bee:	c0 93 90 09 	sts	0x0990, r28
	if(*pwm_left >= 0) {
    3bf2:	80 81       	ld	r24, Z
    3bf4:	91 81       	ldd	r25, Z+1	; 0x01
    3bf6:	97 fd       	sbrc	r25, 7
    3bf8:	cd c0       	rjmp	.+410    	; 0x3d94 <start_horizontal_speed_control_left+0x1ce>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    3bfa:	20 91 01 03 	lds	r18, 0x0301
    3bfe:	30 91 02 03 	lds	r19, 0x0302
    3c02:	dc 01       	movw	r26, r24
    3c04:	a2 1b       	sub	r26, r18
    3c06:	b3 0b       	sbc	r27, r19
    3c08:	b0 93 7c 05 	sts	0x057C, r27
    3c0c:	a0 93 7b 05 	sts	0x057B, r26
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;
    3c10:	c0 90 19 03 	lds	r12, 0x0319
    3c14:	d0 90 1a 03 	lds	r13, 0x031A
    3c18:	ca 0e       	add	r12, r26
    3c1a:	db 1e       	adc	r13, r27
    3c1c:	d0 92 1a 03 	sts	0x031A, r13
    3c20:	c0 92 19 03 	sts	0x0319, r12

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
    3c24:	81 e4       	ldi	r24, 0x41	; 65
    3c26:	c8 16       	cp	r12, r24
    3c28:	86 e0       	ldi	r24, 0x06	; 6
    3c2a:	d8 06       	cpc	r13, r24
    3c2c:	0c f4       	brge	.+2      	; 0x3c30 <start_horizontal_speed_control_left+0x6a>
    3c2e:	9e c0       	rjmp	.+316    	; 0x3d6c <start_horizontal_speed_control_left+0x1a6>
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
    3c30:	80 e4       	ldi	r24, 0x40	; 64
    3c32:	96 e0       	ldi	r25, 0x06	; 6
    3c34:	90 93 1a 03 	sts	0x031A, r25
    3c38:	80 93 19 03 	sts	0x0319, r24
    3c3c:	10 e8       	ldi	r17, 0x80	; 128
    3c3e:	c1 2e       	mov	r12, r17
    3c40:	1c e0       	ldi	r17, 0x0C	; 12
    3c42:	d1 2e       	mov	r13, r17
    3c44:	e1 2c       	mov	r14, r1
    3c46:	f1 2c       	mov	r15, r1
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed long int)((*pwm_left) << 3);
    3c48:	00 81       	ld	r16, Z
    3c4a:	11 81       	ldd	r17, Z+1	; 0x01
	pwm_left_speed_controller += (signed long int)(delta_left_speed_current*P_HORIZONTAL);
    3c4c:	cd 01       	movw	r24, r26
    3c4e:	88 0f       	add	r24, r24
    3c50:	99 1f       	adc	r25, r25
    3c52:	8a 0f       	add	r24, r26
    3c54:	9b 1f       	adc	r25, r27
    3c56:	9c 01       	movw	r18, r24
    3c58:	22 0f       	add	r18, r18
    3c5a:	33 1f       	adc	r19, r19
    3c5c:	22 0f       	add	r18, r18
    3c5e:	33 1f       	adc	r19, r19
    3c60:	28 0f       	add	r18, r24
    3c62:	39 1f       	adc	r19, r25
    3c64:	44 27       	eor	r20, r20
    3c66:	37 fd       	sbrc	r19, 7
    3c68:	40 95       	com	r20
    3c6a:	54 2f       	mov	r21, r20
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed long int)((*pwm_left) << 3);
    3c6c:	b8 01       	movw	r22, r16
    3c6e:	66 0f       	add	r22, r22
    3c70:	77 1f       	adc	r23, r23
    3c72:	66 0f       	add	r22, r22
    3c74:	77 1f       	adc	r23, r23
    3c76:	66 0f       	add	r22, r22
    3c78:	77 1f       	adc	r23, r23
    3c7a:	88 27       	eor	r24, r24
    3c7c:	77 fd       	sbrc	r23, 7
    3c7e:	80 95       	com	r24
    3c80:	98 2f       	mov	r25, r24
	pwm_left_speed_controller += (signed long int)(delta_left_speed_current*P_HORIZONTAL);
    3c82:	26 0f       	add	r18, r22
    3c84:	37 1f       	adc	r19, r23
    3c86:	48 1f       	adc	r20, r24
    3c88:	59 1f       	adc	r21, r25
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
    3c8a:	ac 1b       	sub	r26, r28
    3c8c:	bd 0b       	sbc	r27, r29
    3c8e:	cd 01       	movw	r24, r26
    3c90:	88 0f       	add	r24, r24
    3c92:	99 1f       	adc	r25, r25
    3c94:	8a 0f       	add	r24, r26
    3c96:	9b 1f       	adc	r25, r27
    3c98:	aa 27       	eor	r26, r26
    3c9a:	97 fd       	sbrc	r25, 7
    3c9c:	a0 95       	com	r26
    3c9e:	ba 2f       	mov	r27, r26
    3ca0:	28 0f       	add	r18, r24
    3ca2:	39 1f       	adc	r19, r25
    3ca4:	4a 1f       	adc	r20, r26
    3ca6:	5b 1f       	adc	r21, r27
	pwm_left_speed_controller += (signed long int)(delta_left_speed_sum*I_HORIZONTAL);
    3ca8:	2c 0d       	add	r18, r12
    3caa:	3d 1d       	adc	r19, r13
    3cac:	4e 1d       	adc	r20, r14
    3cae:	5f 1d       	adc	r21, r15
    3cb0:	20 93 15 03 	sts	0x0315, r18
    3cb4:	30 93 16 03 	sts	0x0316, r19
    3cb8:	40 93 17 03 	sts	0x0317, r20
    3cbc:	50 93 18 03 	sts	0x0318, r21

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    3cc0:	57 fd       	sbrc	r21, 7
    3cc2:	7a c0       	rjmp	.+244    	; 0x3db8 <start_horizontal_speed_control_left+0x1f2>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    3cc4:	12 16       	cp	r1, r18
    3cc6:	13 06       	cpc	r1, r19
    3cc8:	14 06       	cpc	r1, r20
    3cca:	15 06       	cpc	r1, r21
    3ccc:	0c f0       	brlt	.+2      	; 0x3cd0 <start_horizontal_speed_control_left+0x10a>
    3cce:	81 c0       	rjmp	.+258    	; 0x3dd2 <start_horizontal_speed_control_left+0x20c>
    3cd0:	17 fd       	sbrc	r17, 7
    3cd2:	ad c0       	rjmp	.+346    	; 0x3e2e <start_horizontal_speed_control_left+0x268>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    3cd4:	21 3c       	cpi	r18, 0xC1	; 193
    3cd6:	8d e5       	ldi	r24, 0x5D	; 93
    3cd8:	38 07       	cpc	r19, r24
    3cda:	80 e0       	ldi	r24, 0x00	; 0
    3cdc:	48 07       	cpc	r20, r24
    3cde:	80 e0       	ldi	r24, 0x00	; 0
    3ce0:	58 07       	cpc	r21, r24
    3ce2:	0c f4       	brge	.+2      	; 0x3ce6 <start_horizontal_speed_control_left+0x120>
    3ce4:	76 c0       	rjmp	.+236    	; 0x3dd2 <start_horizontal_speed_control_left+0x20c>
    3ce6:	80 ec       	ldi	r24, 0xC0	; 192
    3ce8:	9d e5       	ldi	r25, 0x5D	; 93
    3cea:	a0 e0       	ldi	r26, 0x00	; 0
    3cec:	b0 e0       	ldi	r27, 0x00	; 0
    3cee:	80 93 15 03 	sts	0x0315, r24
    3cf2:	90 93 16 03 	sts	0x0316, r25
    3cf6:	a0 93 17 03 	sts	0x0317, r26
    3cfa:	b0 93 18 03 	sts	0x0318, r27
    3cfe:	2c ed       	ldi	r18, 0xDC	; 220
    3d00:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = (signed int)(pwm_left_speed_controller>>4);
    3d02:	31 83       	std	Z+1, r19	; 0x01
    3d04:	20 83       	st	Z, r18

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
    3d06:	80 91 fb 02 	lds	r24, 0x02FB
    3d0a:	90 91 fc 02 	lds	r25, 0x02FC
    3d0e:	18 16       	cp	r1, r24
    3d10:	19 06       	cpc	r1, r25
    3d12:	0c f0       	brlt	.+2      	; 0x3d16 <start_horizontal_speed_control_left+0x150>
    3d14:	87 c0       	rjmp	.+270    	; 0x3e24 <start_horizontal_speed_control_left+0x25e>
		*pwm_left += 1;
    3d16:	2f 5f       	subi	r18, 0xFF	; 255
    3d18:	3f 4f       	sbci	r19, 0xFF	; 255
    3d1a:	31 83       	std	Z+1, r19	; 0x01
    3d1c:	20 83       	st	Z, r18
	} else {
		*pwm_left -= 1;
	}

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
    3d1e:	12 16       	cp	r1, r18
    3d20:	13 06       	cpc	r1, r19
    3d22:	0c f0       	brlt	.+2      	; 0x3d26 <start_horizontal_speed_control_left+0x160>
    3d24:	6d c0       	rjmp	.+218    	; 0x3e00 <start_horizontal_speed_control_left+0x23a>
		*pwm_left += 30;
    3d26:	22 5e       	subi	r18, 0xE2	; 226
    3d28:	3f 4f       	sbci	r19, 0xFF	; 255
    3d2a:	31 83       	std	Z+1, r19	; 0x01
    3d2c:	20 83       	st	Z, r18
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    3d2e:	82 e0       	ldi	r24, 0x02	; 2
    3d30:	21 30       	cpi	r18, 0x01	; 1
    3d32:	38 07       	cpc	r19, r24
    3d34:	0c f4       	brge	.+2      	; 0x3d38 <start_horizontal_speed_control_left+0x172>
    3d36:	6c c0       	rjmp	.+216    	; 0x3e10 <start_horizontal_speed_control_left+0x24a>
    3d38:	80 e0       	ldi	r24, 0x00	; 0
    3d3a:	92 e0       	ldi	r25, 0x02	; 2
    3d3c:	91 83       	std	Z+1, r25	; 0x01
    3d3e:	80 83       	st	Z, r24
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);

}
    3d40:	df 91       	pop	r29
    3d42:	cf 91       	pop	r28
    3d44:	1f 91       	pop	r17
    3d46:	0f 91       	pop	r16
    3d48:	ff 90       	pop	r15
    3d4a:	ef 90       	pop	r14
    3d4c:	df 90       	pop	r13
    3d4e:	cf 90       	pop	r12
    3d50:	08 95       	ret
void start_horizontal_speed_control_left(signed int *pwm_left) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    3d52:	10 92 1a 03 	sts	0x031A, r1
    3d56:	10 92 19 03 	sts	0x0319, r1
		delta_left_speed_current = 0;
    3d5a:	10 92 7c 05 	sts	0x057C, r1
    3d5e:	10 92 7b 05 	sts	0x057B, r1
		delta_left_speed_prev = 0;
    3d62:	10 92 91 09 	sts	0x0991, r1
    3d66:	10 92 90 09 	sts	0x0990, r1
		return;
    3d6a:	ea cf       	rjmp	.-44     	; 0x3d40 <start_horizontal_speed_control_left+0x17a>
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    3d6c:	80 ec       	ldi	r24, 0xC0	; 192
    3d6e:	c8 16       	cp	r12, r24
    3d70:	89 ef       	ldi	r24, 0xF9	; 249
    3d72:	d8 06       	cpc	r13, r24
    3d74:	d4 f4       	brge	.+52     	; 0x3daa <start_horizontal_speed_control_left+0x1e4>
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
    3d76:	80 ec       	ldi	r24, 0xC0	; 192
    3d78:	99 ef       	ldi	r25, 0xF9	; 249
    3d7a:	90 93 1a 03 	sts	0x031A, r25
    3d7e:	80 93 19 03 	sts	0x0319, r24
    3d82:	60 e8       	ldi	r22, 0x80	; 128
    3d84:	c6 2e       	mov	r12, r22
    3d86:	63 ef       	ldi	r22, 0xF3	; 243
    3d88:	d6 2e       	mov	r13, r22
    3d8a:	6f ef       	ldi	r22, 0xFF	; 255
    3d8c:	e6 2e       	mov	r14, r22
    3d8e:	6f ef       	ldi	r22, 0xFF	; 255
    3d90:	f6 2e       	mov	r15, r22
    3d92:	5a cf       	rjmp	.-332    	; 0x3c48 <start_horizontal_speed_control_left+0x82>
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    3d94:	a0 91 01 03 	lds	r26, 0x0301
    3d98:	b0 91 02 03 	lds	r27, 0x0302
    3d9c:	a8 0f       	add	r26, r24
    3d9e:	b9 1f       	adc	r27, r25
    3da0:	b0 93 7c 05 	sts	0x057C, r27
    3da4:	a0 93 7b 05 	sts	0x057B, r26
    3da8:	33 cf       	rjmp	.-410    	; 0x3c10 <start_horizontal_speed_control_left+0x4a>
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    3daa:	cc 0c       	add	r12, r12
    3dac:	dd 1c       	adc	r13, r13
    3dae:	ee 24       	eor	r14, r14
    3db0:	d7 fc       	sbrc	r13, 7
    3db2:	e0 94       	com	r14
    3db4:	fe 2c       	mov	r15, r14
    3db6:	48 cf       	rjmp	.-368    	; 0x3c48 <start_horizontal_speed_control_left+0x82>
	pwm_left_speed_controller += (signed long int)(delta_left_speed_current*P_HORIZONTAL);
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
	pwm_left_speed_controller += (signed long int)(delta_left_speed_sum*I_HORIZONTAL);

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    3db8:	17 fd       	sbrc	r17, 7
    3dba:	0b c0       	rjmp	.+22     	; 0x3dd2 <start_horizontal_speed_control_left+0x20c>
		pwm_left_speed_controller = 0;
    3dbc:	10 92 15 03 	sts	0x0315, r1
    3dc0:	10 92 16 03 	sts	0x0316, r1
    3dc4:	10 92 17 03 	sts	0x0317, r1
    3dc8:	10 92 18 03 	sts	0x0318, r1
    3dcc:	20 e0       	ldi	r18, 0x00	; 0
    3dce:	30 e0       	ldi	r19, 0x00	; 0
    3dd0:	a9 01       	movw	r20, r18
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    3dd2:	20 34       	cpi	r18, 0x40	; 64
    3dd4:	82 ea       	ldi	r24, 0xA2	; 162
    3dd6:	38 07       	cpc	r19, r24
    3dd8:	8f ef       	ldi	r24, 0xFF	; 255
    3dda:	48 07       	cpc	r20, r24
    3ddc:	8f ef       	ldi	r24, 0xFF	; 255
    3dde:	58 07       	cpc	r21, r24
    3de0:	8c f5       	brge	.+98     	; 0x3e44 <start_horizontal_speed_control_left+0x27e>
    3de2:	80 e4       	ldi	r24, 0x40	; 64
    3de4:	92 ea       	ldi	r25, 0xA2	; 162
    3de6:	af ef       	ldi	r26, 0xFF	; 255
    3de8:	bf ef       	ldi	r27, 0xFF	; 255
    3dea:	80 93 15 03 	sts	0x0315, r24
    3dee:	90 93 16 03 	sts	0x0316, r25
    3df2:	a0 93 17 03 	sts	0x0317, r26
    3df6:	b0 93 18 03 	sts	0x0318, r27
    3dfa:	24 e2       	ldi	r18, 0x24	; 36
    3dfc:	3a ef       	ldi	r19, 0xFA	; 250
    3dfe:	81 cf       	rjmp	.-254    	; 0x3d02 <start_horizontal_speed_control_left+0x13c>
	}

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
		*pwm_left += 30;
	} else if(*pwm_left < 0) {
    3e00:	21 15       	cp	r18, r1
    3e02:	31 05       	cpc	r19, r1
    3e04:	09 f4       	brne	.+2      	; 0x3e08 <start_horizontal_speed_control_left+0x242>
    3e06:	9c cf       	rjmp	.-200    	; 0x3d40 <start_horizontal_speed_control_left+0x17a>
		*pwm_left -= 30;
    3e08:	2e 51       	subi	r18, 0x1E	; 30
    3e0a:	30 40       	sbci	r19, 0x00	; 0
    3e0c:	31 83       	std	Z+1, r19	; 0x01
    3e0e:	20 83       	st	Z, r18
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    3e10:	8e ef       	ldi	r24, 0xFE	; 254
    3e12:	20 30       	cpi	r18, 0x00	; 0
    3e14:	38 07       	cpc	r19, r24
    3e16:	0c f0       	brlt	.+2      	; 0x3e1a <start_horizontal_speed_control_left+0x254>
    3e18:	93 cf       	rjmp	.-218    	; 0x3d40 <start_horizontal_speed_control_left+0x17a>
    3e1a:	80 e0       	ldi	r24, 0x00	; 0
    3e1c:	9e ef       	ldi	r25, 0xFE	; 254
    3e1e:	91 83       	std	Z+1, r25	; 0x01
    3e20:	80 83       	st	Z, r24
    3e22:	8e cf       	rjmp	.-228    	; 0x3d40 <start_horizontal_speed_control_left+0x17a>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
		*pwm_left += 1;
	} else {
		*pwm_left -= 1;
    3e24:	21 50       	subi	r18, 0x01	; 1
    3e26:	30 40       	sbci	r19, 0x00	; 0
    3e28:	31 83       	std	Z+1, r19	; 0x01
    3e2a:	20 83       	st	Z, r18
    3e2c:	78 cf       	rjmp	.-272    	; 0x3d1e <start_horizontal_speed_control_left+0x158>
	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    3e2e:	10 92 15 03 	sts	0x0315, r1
    3e32:	10 92 16 03 	sts	0x0316, r1
    3e36:	10 92 17 03 	sts	0x0317, r1
    3e3a:	10 92 18 03 	sts	0x0318, r1
    3e3e:	20 e0       	ldi	r18, 0x00	; 0
    3e40:	30 e0       	ldi	r19, 0x00	; 0
    3e42:	a9 01       	movw	r20, r18
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    3e44:	04 e0       	ldi	r16, 0x04	; 4
    3e46:	55 95       	asr	r21
    3e48:	47 95       	ror	r20
    3e4a:	37 95       	ror	r19
    3e4c:	27 95       	ror	r18
    3e4e:	0a 95       	dec	r16
    3e50:	d1 f7       	brne	.-12     	; 0x3e46 <start_horizontal_speed_control_left+0x280>
    3e52:	57 cf       	rjmp	.-338    	; 0x3d02 <start_horizontal_speed_control_left+0x13c>

00003e54 <initPortsIO>:
#include "ports_io.h"


void initPortsIO(void) {

	MCUCR |= (1 << PUD);	// pull-up disable for all ports
    3e54:	85 b7       	in	r24, 0x35	; 53
    3e56:	80 61       	ori	r24, 0x10	; 16
    3e58:	85 bf       	out	0x35, r24	; 53

	DDRA = 0xFF;			// proximity pulses as output
    3e5a:	8f ef       	ldi	r24, 0xFF	; 255
    3e5c:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;			// proximity pulses turned off
    3e5e:	12 b8       	out	0x02, r1	; 2
	
	DDRB = 0xF7;			// pwm for led r/g/b as output; CE, MOSI, SCK, SS as output (master) 
    3e60:	97 ef       	ldi	r25, 0xF7	; 247
    3e62:	94 b9       	out	0x04, r25	; 4
	PORTB = 0xE0;			// r,g,b leds turned off on high state
    3e64:	90 ee       	ldi	r25, 0xE0	; 224
    3e66:	95 b9       	out	0x05, r25	; 5

	DDRC = 0xF0;			// selector as input; IR leds as output; sens-enable, sleep as output
    3e68:	90 ef       	ldi	r25, 0xF0	; 240
    3e6a:	97 b9       	out	0x07, r25	; 7
	PORTC = 0xB0;			// sleep = 1 (no sleep), sense_enable=0, IR leds = 1
    3e6c:	90 eb       	ldi	r25, 0xB0	; 176
    3e6e:	98 b9       	out	0x08, r25	; 8

	DDRD = 0xFC;			// all pins to output; when usart and i2c peripherals are activated they change the pins direction accordingly
    3e70:	9c ef       	ldi	r25, 0xFC	; 252
    3e72:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0x03;			// default for unused pins is 0
    3e74:	93 e0       	ldi	r25, 0x03	; 3
    3e76:	9b b9       	out	0x0b, r25	; 11

	DDRE = 0xFF;			// all pins to output (pwm and dir for motor right as output; when usart is activated it changes the pins direction accordingly)
    3e78:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    3e7a:	1e b8       	out	0x0e, r1	; 14

	DDRF = 0x00;			// adc channel pins as input		
    3e7c:	10 ba       	out	0x10, r1	; 16

	DDRG = 0xFF;			// unused pins as output
    3e7e:	83 bb       	out	0x13, r24	; 19
	if(hardwareRevision == HW_REV_3_0) {
    3e80:	80 91 5f 04 	lds	r24, 0x045F
    3e84:	88 23       	and	r24, r24
    3e86:	e1 f0       	breq	.+56     	; 0x3ec0 <initPortsIO+0x6c>
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    3e88:	81 30       	cpi	r24, 0x01	; 1
    3e8a:	d1 f0       	breq	.+52     	; 0x3ec0 <initPortsIO+0x6c>
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    3e8c:	82 30       	cpi	r24, 0x02	; 2
    3e8e:	51 f1       	breq	.+84     	; 0x3ee4 <initPortsIO+0x90>
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
	}	

	DDRH = 0xFF;			// all pins to output; when usart is activated it changes the pins direction accordingly
    3e90:	9f ef       	ldi	r25, 0xFF	; 255
    3e92:	90 93 01 01 	sts	0x0101, r25
	PORTH = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    3e96:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
    3e9a:	9f e0       	ldi	r25, 0x0F	; 15
    3e9c:	90 93 04 01 	sts	0x0104, r25
	if(hardwareRevision == HW_REV_3_0) {
    3ea0:	88 23       	and	r24, r24
    3ea2:	a9 f4       	brne	.+42     	; 0x3ece <initPortsIO+0x7a>
		PORTJ &= 0x00;		// cliff pulse turned off
    3ea4:	90 91 05 01 	lds	r25, 0x0105
    3ea8:	10 92 05 01 	sts	0x0105, r1
	if(hardwareRevision == HW_REV_3_1) {
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.1)"
	}	

	DDRK = 0x00;			// adc channel pins as input
    3eac:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;			// all pins to output
    3eb0:	9f ef       	ldi	r25, 0xFF	; 255
    3eb2:	90 93 0a 01 	sts	0x010A, r25
	if(hardwareRevision == HW_REV_3_0) {
    3eb6:	88 23       	and	r24, r24
    3eb8:	29 f4       	brne	.+10     	; 0x3ec4 <initPortsIO+0x70>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
    3eba:	10 92 0b 01 	sts	0x010B, r1
    3ebe:	08 95       	ret
	DDRG = 0xFF;			// unused pins as output
	if(hardwareRevision == HW_REV_3_0) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
    3ec0:	14 ba       	out	0x14, r1	; 20
    3ec2:	e6 cf       	rjmp	.-52     	; 0x3e90 <initPortsIO+0x3c>

	DDRL = 0xFF;			// all pins to output
	if(hardwareRevision == HW_REV_3_0) {
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
    3ec4:	81 30       	cpi	r24, 0x01	; 1
    3ec6:	c9 f3       	breq	.-14     	; 0x3eba <initPortsIO+0x66>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    3ec8:	82 30       	cpi	r24, 0x02	; 2
    3eca:	41 f0       	breq	.+16     	; 0x3edc <initPortsIO+0x88>
    3ecc:	08 95       	ret
	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
	if(hardwareRevision == HW_REV_3_0) {
		PORTJ &= 0x00;		// cliff pulse turned off
		//#warning "Normal logic for ground sensors (hw rev 3.0)"
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    3ece:	81 30       	cpi	r24, 0x01	; 1
    3ed0:	11 f0       	breq	.+4      	; 0x3ed6 <initPortsIO+0x82>
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.0.1)"
	}
	if(hardwareRevision == HW_REV_3_1) {
    3ed2:	82 30       	cpi	r24, 0x02	; 2
    3ed4:	59 f7       	brne	.-42     	; 0x3eac <initPortsIO+0x58>
		PORTJ = 0x0F;
    3ed6:	90 93 05 01 	sts	0x0105, r25
    3eda:	e8 cf       	rjmp	.-48     	; 0x3eac <initPortsIO+0x58>
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTL = 0xF7;		// pwm (unused) to 0, leds turned off on high state
    3edc:	87 ef       	ldi	r24, 0xF7	; 247
    3ede:	80 93 0b 01 	sts	0x010B, r24
    3ee2:	08 95       	ret
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
    3ee4:	98 e0       	ldi	r25, 0x08	; 8
    3ee6:	94 bb       	out	0x14, r25	; 20
    3ee8:	d3 cf       	rjmp	.-90     	; 0x3e90 <initPortsIO+0x3c>

00003eea <i2c_close>:

/* I2C clock in Hz */
#define SCL_CLOCK  440000L

void i2c_close() {
	TWBR = 0x00;
    3eea:	10 92 b8 00 	sts	0x00B8, r1
	TWCR = 0x00;
    3eee:	10 92 bc 00 	sts	0x00BC, r1
}
    3ef2:	08 95       	ret

00003ef4 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
    sbi(PORTD, 0);
    3ef4:	58 9a       	sbi	0x0b, 0	; 11
    sbi(PORTD, 1);
    3ef6:	59 9a       	sbi	0x0b, 1	; 11

  TWSR = 0;                         /* no prescaler */
    3ef8:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    3efc:	81 e0       	ldi	r24, 0x01	; 1
    3efe:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
    3f02:	08 95       	ret

00003f04 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    3f04:	94 ea       	ldi	r25, 0xA4	; 164
    3f06:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    3f0a:	90 91 bc 00 	lds	r25, 0x00BC
    3f0e:	97 ff       	sbrs	r25, 7
    3f10:	fc cf       	rjmp	.-8      	; 0x3f0a <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    3f12:	90 91 b9 00 	lds	r25, 0x00B9
    3f16:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    3f18:	98 30       	cpi	r25, 0x08	; 8
    3f1a:	21 f0       	breq	.+8      	; 0x3f24 <i2c_start+0x20>
    3f1c:	90 31       	cpi	r25, 0x10	; 16
    3f1e:	11 f0       	breq	.+4      	; 0x3f24 <i2c_start+0x20>
		//usartTransmit(twst);
		return 1;
    3f20:	81 e0       	ldi	r24, 0x01	; 1
    3f22:	08 95       	ret
	}

	// send device address
	TWDR = address;
    3f24:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    3f28:	84 e8       	ldi	r24, 0x84	; 132
    3f2a:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    3f2e:	80 91 bc 00 	lds	r24, 0x00BC
    3f32:	87 ff       	sbrs	r24, 7
    3f34:	fc cf       	rjmp	.-8      	; 0x3f2e <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    3f36:	90 91 b9 00 	lds	r25, 0x00B9
    3f3a:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    3f3c:	98 31       	cpi	r25, 0x18	; 24
    3f3e:	21 f0       	breq	.+8      	; 0x3f48 <i2c_start+0x44>

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    3f40:	81 e0       	ldi	r24, 0x01	; 1
    3f42:	90 34       	cpi	r25, 0x40	; 64
    3f44:	19 f0       	breq	.+6      	; 0x3f4c <i2c_start+0x48>
		return 1;
	}

	return 0;

}/* i2c_start */
    3f46:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    3f48:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    3f4a:	08 95       	ret

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    3f4c:	80 e0       	ldi	r24, 0x00	; 0
    3f4e:	08 95       	ret

00003f50 <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    3f50:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    3f52:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    3f54:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    3f56:	20 93 bc 00 	sts	0x00BC, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    3f5a:	90 91 bc 00 	lds	r25, 0x00BC
    3f5e:	97 ff       	sbrs	r25, 7
    3f60:	fc cf       	rjmp	.-8      	; 0x3f5a <i2c_start_wait+0xa>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    3f62:	90 91 b9 00 	lds	r25, 0x00B9
    3f66:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    3f68:	98 30       	cpi	r25, 0x08	; 8
    3f6a:	11 f0       	breq	.+4      	; 0x3f70 <i2c_start_wait+0x20>
    3f6c:	90 31       	cpi	r25, 0x10	; 16
    3f6e:	99 f7       	brne	.-26     	; 0x3f56 <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    3f70:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    3f74:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    3f78:	90 91 bc 00 	lds	r25, 0x00BC
    3f7c:	97 ff       	sbrs	r25, 7
    3f7e:	fc cf       	rjmp	.-8      	; 0x3f78 <i2c_start_wait+0x28>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    3f80:	90 91 b9 00 	lds	r25, 0x00B9
    3f84:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    3f86:	90 32       	cpi	r25, 0x20	; 32
    3f88:	19 f0       	breq	.+6      	; 0x3f90 <i2c_start_wait+0x40>
    3f8a:	98 35       	cpi	r25, 0x58	; 88
    3f8c:	09 f0       	breq	.+2      	; 0x3f90 <i2c_start_wait+0x40>
    3f8e:	08 95       	ret
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    3f90:	40 93 bc 00 	sts	0x00BC, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    3f94:	90 91 bc 00 	lds	r25, 0x00BC
    3f98:	94 fd       	sbrc	r25, 4
    3f9a:	fc cf       	rjmp	.-8      	; 0x3f94 <i2c_start_wait+0x44>
    3f9c:	dc cf       	rjmp	.-72     	; 0x3f56 <i2c_start_wait+0x6>

00003f9e <i2c_rep_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    3f9e:	94 ea       	ldi	r25, 0xA4	; 164
    3fa0:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    3fa4:	90 91 bc 00 	lds	r25, 0x00BC
    3fa8:	97 ff       	sbrs	r25, 7
    3faa:	fc cf       	rjmp	.-8      	; 0x3fa4 <i2c_rep_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    3fac:	90 91 b9 00 	lds	r25, 0x00B9
    3fb0:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    3fb2:	98 30       	cpi	r25, 0x08	; 8
    3fb4:	21 f0       	breq	.+8      	; 0x3fbe <i2c_rep_start+0x20>
    3fb6:	90 31       	cpi	r25, 0x10	; 16
    3fb8:	11 f0       	breq	.+4      	; 0x3fbe <i2c_rep_start+0x20>
		//usartTransmit(twst);
		return 1;
    3fba:	81 e0       	ldi	r24, 0x01	; 1
    3fbc:	08 95       	ret
	}

	// send device address
	TWDR = address;
    3fbe:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    3fc2:	84 e8       	ldi	r24, 0x84	; 132
    3fc4:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    3fc8:	80 91 bc 00 	lds	r24, 0x00BC
    3fcc:	87 ff       	sbrs	r24, 7
    3fce:	fc cf       	rjmp	.-8      	; 0x3fc8 <i2c_rep_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    3fd0:	90 91 b9 00 	lds	r25, 0x00B9
    3fd4:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    3fd6:	98 31       	cpi	r25, 0x18	; 24
    3fd8:	21 f0       	breq	.+8      	; 0x3fe2 <i2c_rep_start+0x44>
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    3fda:	81 e0       	ldi	r24, 0x01	; 1
    3fdc:	90 34       	cpi	r25, 0x40	; 64
    3fde:	19 f0       	breq	.+6      	; 0x3fe6 <i2c_rep_start+0x48>
{
    return i2c_start( address );

}/* i2c_rep_start */
    3fe0:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    3fe2:	80 e0       	ldi	r24, 0x00	; 0
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    3fe4:	08 95       	ret
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    3fe6:	80 e0       	ldi	r24, 0x00	; 0
    3fe8:	08 95       	ret

00003fea <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    3fea:	84 e9       	ldi	r24, 0x94	; 148
    3fec:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    3ff0:	80 91 bc 00 	lds	r24, 0x00BC
    3ff4:	84 fd       	sbrc	r24, 4
    3ff6:	fc cf       	rjmp	.-8      	; 0x3ff0 <i2c_stop+0x6>

}/* i2c_stop */
    3ff8:	08 95       	ret

00003ffa <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    3ffa:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    3ffe:	84 e8       	ldi	r24, 0x84	; 132
    4000:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    4004:	80 91 bc 00 	lds	r24, 0x00BC
    4008:	87 ff       	sbrs	r24, 7
    400a:	fc cf       	rjmp	.-8      	; 0x4004 <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    400c:	90 91 b9 00 	lds	r25, 0x00B9
    4010:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    4012:	81 e0       	ldi	r24, 0x01	; 1
    4014:	98 32       	cpi	r25, 0x28	; 40
    4016:	09 f0       	breq	.+2      	; 0x401a <i2c_write+0x20>
	return 0;

}/* i2c_write */
    4018:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
    401a:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
    401c:	08 95       	ret

0000401e <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    401e:	84 ec       	ldi	r24, 0xC4	; 196
    4020:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    4024:	80 91 bc 00 	lds	r24, 0x00BC
    4028:	87 ff       	sbrs	r24, 7
    402a:	fc cf       	rjmp	.-8      	; 0x4024 <i2c_readAck+0x6>

    return TWDR;
    402c:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    4030:	08 95       	ret

00004032 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    4032:	84 e8       	ldi	r24, 0x84	; 132
    4034:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    4038:	80 91 bc 00 	lds	r24, 0x00BC
    403c:	87 ff       	sbrs	r24, 7
    403e:	fc cf       	rjmp	.-8      	; 0x4038 <i2c_readNak+0x6>
	
    return TWDR;
    4040:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    4044:	08 95       	ret

00004046 <initUsart0>:
	// @38400 baud: 8000000/16/38400-1 = 12 => 8000000/16/13 = 38461 => 100-(38400/38461*100)=0.15% of error
	// Double speed mode:
	// @57600 baud: 8000000/8/57600-1 = 16 => 8000000/8/17 = 58823 => 100-(57600/58823*100)=2.08% of error	


	UBRR0H = 0;												// set baudrate
    4046:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 16;
    404a:	80 e1       	ldi	r24, 0x10	; 16
    404c:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0A  |= (1 << U2X0);									// enable double speed
    4050:	e0 ec       	ldi	r30, 0xC0	; 192
    4052:	f0 e0       	ldi	r31, 0x00	; 0
    4054:	80 81       	ld	r24, Z
    4056:	82 60       	ori	r24, 0x02	; 2
    4058:	80 83       	st	Z, r24
	//UCSR0A &= ~(1 << U2X0);
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);	// enable uart0 transmitter and receiver; enable rx interrupt for use with aseba
    405a:	e1 ec       	ldi	r30, 0xC1	; 193
    405c:	f0 e0       	ldi	r31, 0x00	; 0
    405e:	80 81       	ld	r24, Z
    4060:	88 69       	ori	r24, 0x98	; 152
    4062:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);					// set frame format: 8-bit data, no parity, 1 stop bit
    4064:	e2 ec       	ldi	r30, 0xC2	; 194
    4066:	f0 e0       	ldi	r31, 0x00	; 0
    4068:	80 81       	ld	r24, Z
    406a:	86 60       	ori	r24, 0x06	; 6
    406c:	80 83       	st	Z, r24



}
    406e:	08 95       	ret

00004070 <initUsart1>:

void initUsart1() {

	UBRR1H = 0;												// set baudrate
    4070:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = 16;
    4074:	80 e1       	ldi	r24, 0x10	; 16
    4076:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1A  |= (1 << U2X1);									// enable double speed
    407a:	e8 ec       	ldi	r30, 0xC8	; 200
    407c:	f0 e0       	ldi	r31, 0x00	; 0
    407e:	80 81       	ld	r24, Z
    4080:	82 60       	ori	r24, 0x02	; 2
    4082:	80 83       	st	Z, r24
	//UCSR0A &= ~(1 << U2X1);
	UCSR1B |= (1 << TXEN1) | (1 << RXEN1);					// enable uart0 transmitter and receiver
    4084:	e9 ec       	ldi	r30, 0xC9	; 201
    4086:	f0 e0       	ldi	r31, 0x00	; 0
    4088:	80 81       	ld	r24, Z
    408a:	88 61       	ori	r24, 0x18	; 24
    408c:	80 83       	st	Z, r24
	UCSR1C |= (1<<UCSZ11) | (1<<UCSZ10);					// set frame format: 8-bit data, no parity, 1 stop bit
    408e:	ea ec       	ldi	r30, 0xCA	; 202
    4090:	f0 e0       	ldi	r31, 0x00	; 0
    4092:	80 81       	ld	r24, Z
    4094:	86 60       	ori	r24, 0x06	; 6
    4096:	80 83       	st	Z, r24

}
    4098:	08 95       	ret

0000409a <closeUsart>:

void closeUsart() {

	UCSR0A = 0x00;	// clear all usart registers
    409a:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0x00;
    409e:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 0x00;
    40a2:	10 92 c2 00 	sts	0x00C2, r1

}
    40a6:	08 95       	ret

000040a8 <usart0Transmit>:

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    40a8:	90 91 c0 00 	lds	r25, 0x00C0
    40ac:	95 ff       	sbrs	r25, 5
    40ae:	fc cf       	rjmp	.-8      	; 0x40a8 <usart0Transmit>
	UDR0 = data;						// put data into buffer, sends the data
    40b0:	80 93 c6 00 	sts	0x00C6, r24
	if(isBlocking) {
    40b4:	66 23       	and	r22, r22
    40b6:	21 f0       	breq	.+8      	; 0x40c0 <usart0Transmit+0x18>
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    40b8:	80 91 c0 00 	lds	r24, 0x00C0
    40bc:	86 ff       	sbrs	r24, 6
    40be:	fc cf       	rjmp	.-8      	; 0x40b8 <usart0Transmit+0x10>
    40c0:	08 95       	ret

000040c2 <usart1Transmit>:
	}
}

void usart1Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR1A & (1<<UDRE1)));		// wait for empty transmit buffer
    40c2:	90 91 c8 00 	lds	r25, 0x00C8
    40c6:	95 ff       	sbrs	r25, 5
    40c8:	fc cf       	rjmp	.-8      	; 0x40c2 <usart1Transmit>
	UDR1 = data;						// put data into buffer, sends the data
    40ca:	80 93 ce 00 	sts	0x00CE, r24
	if(isBlocking) {
    40ce:	66 23       	and	r22, r22
    40d0:	21 f0       	breq	.+8      	; 0x40da <usart1Transmit+0x18>
		while (!(UCSR1A & (1<<TXC1)));	// wait transmission complete
    40d2:	80 91 c8 00 	lds	r24, 0x00C8
    40d6:	86 ff       	sbrs	r24, 6
    40d8:	fc cf       	rjmp	.-8      	; 0x40d2 <usart1Transmit+0x10>
    40da:	08 95       	ret

000040dc <usart0InputBufferEmpty>:

}

char usart0InputBufferEmpty() {

	if(UCSR0A & (1<<RXC0)) {	// something received
    40dc:	80 91 c0 00 	lds	r24, 0x00C0
		return 0;
    40e0:	80 95       	com	r24
	} else {
		return 1;
	}

}
    40e2:	88 1f       	adc	r24, r24
    40e4:	88 27       	eor	r24, r24
    40e6:	88 1f       	adc	r24, r24
    40e8:	08 95       	ret

000040ea <usart0Receive>:

unsigned char usart0Receive() {

	unsigned int i=0;

	while(usart0InputBufferEmpty()) {
    40ea:	87 e9       	ldi	r24, 0x97	; 151
    40ec:	90 e0       	ldi	r25, 0x00	; 0

}

char usart0InputBufferEmpty() {

	if(UCSR0A & (1<<RXC0)) {	// something received
    40ee:	20 91 c0 00 	lds	r18, 0x00C0
    40f2:	27 fd       	sbrc	r18, 7
    40f4:	07 c0       	rjmp	.+14     	; 0x4104 <usart0Receive+0x1a>
			commError = 1;
			return 0;				// timeout
		}
	}								// wait for data to be received

	return UDR0;					// get and return received data from buffer
    40f6:	01 97       	sbiw	r24, 0x01	; 1

	unsigned int i=0;

	while(usart0InputBufferEmpty()) {
		i++;
		if(i>150) {
    40f8:	d1 f7       	brne	.-12     	; 0x40ee <usart0Receive+0x4>
			/*
			if(UCSR0A & (1<<3)) {	// overflow flag
			}
			*/
			commError = 1;
    40fa:	81 e0       	ldi	r24, 0x01	; 1
    40fc:	80 93 2e 03 	sts	0x032E, r24
			return 0;				// timeout
    4100:	80 e0       	ldi	r24, 0x00	; 0
    4102:	08 95       	ret
		}
	}								// wait for data to be received

	return UDR0;					// get and return received data from buffer
    4104:	80 91 c6 00 	lds	r24, 0x00C6

}
    4108:	08 95       	ret

0000410a <__vector_25>:
		}
	}
}
*/

ISR(USART0_RX_vect) {
    410a:	1f 92       	push	r1
    410c:	0f 92       	push	r0
    410e:	0f b6       	in	r0, 0x3f	; 63
    4110:	0f 92       	push	r0
    4112:	0b b6       	in	r0, 0x3b	; 59
    4114:	0f 92       	push	r0
    4116:	11 24       	eor	r1, r1
    4118:	2f 93       	push	r18
    411a:	3f 93       	push	r19
    411c:	4f 93       	push	r20
    411e:	5f 93       	push	r21
    4120:	6f 93       	push	r22
    4122:	7f 93       	push	r23
    4124:	8f 93       	push	r24
    4126:	9f 93       	push	r25
    4128:	af 93       	push	r26
    412a:	bf 93       	push	r27
    412c:	ef 93       	push	r30
    412e:	ff 93       	push	r31

	char receivedByte = UDR0;
    4130:	90 91 c6 00 	lds	r25, 0x00C6


	if(currentSelector==14) {
    4134:	80 91 5c 04 	lds	r24, 0x045C
    4138:	8e 30       	cpi	r24, 0x0E	; 14
    413a:	09 f4       	brne	.+2      	; 0x413e <__vector_25+0x34>
    413c:	3f c0       	rjmp	.+126    	; 0x41bc <__vector_25+0xb2>
		if(receivedByte == 0xAA) {
			irCommSendValues = 1;
		}
	} else if(currentSelector==15) {
    413e:	8f 30       	cpi	r24, 0x0F	; 15
    4140:	09 f4       	brne	.+2      	; 0x4144 <__vector_25+0x3a>
    4142:	42 c0       	rjmp	.+132    	; 0x41c8 <__vector_25+0xbe>
			eeprom_write_byte((uint8_t*) 4093, currentOsccal); 
		}

	} else {

		if(chooseMenu) {
    4144:	80 91 11 02 	lds	r24, 0x0211
    4148:	88 23       	and	r24, r24
    414a:	09 f5       	brne	.+66     	; 0x418e <__vector_25+0x84>
			chooseMenu = 0;
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
    414c:	80 91 33 04 	lds	r24, 0x0433
    4150:	81 30       	cpi	r24, 0x01	; 1
    4152:	09 f4       	brne	.+2      	; 0x4156 <__vector_25+0x4c>
    4154:	65 c0       	rjmp	.+202    	; 0x4220 <__vector_25+0x116>
    4156:	82 30       	cpi	r24, 0x02	; 2
    4158:	f1 f4       	brne	.+60     	; 0x4196 <__vector_25+0x8c>
						menuChoice = 0;
					}
					break;

				case 2:	// address writing in eeprom
					if(menuState == 0) { // receive rf address LSB:
    415a:	40 91 35 04 	lds	r20, 0x0435
    415e:	44 23       	and	r20, r20
    4160:	09 f4       	brne	.+2      	; 0x4164 <__vector_25+0x5a>
    4162:	74 c0       	rjmp	.+232    	; 0x424c <__vector_25+0x142>
						rfAddress = (unsigned int)receivedByte&0x00FF;
						menuState = 1;
					} else if(menuState == 1) { // receive rf address MSB
    4164:	41 30       	cpi	r20, 0x01	; 1
    4166:	b9 f4       	brne	.+46     	; 0x4196 <__vector_25+0x8c>
						rfAddress |= ((unsigned int)receivedByte<<8);
    4168:	39 2f       	mov	r19, r25
    416a:	20 e0       	ldi	r18, 0x00	; 0
    416c:	80 91 25 03 	lds	r24, 0x0325
    4170:	90 91 26 03 	lds	r25, 0x0326
    4174:	82 2b       	or	r24, r18
    4176:	93 2b       	or	r25, r19
    4178:	90 93 26 03 	sts	0x0326, r25
    417c:	80 93 25 03 	sts	0x0325, r24
						addressReceived = 1;
    4180:	40 93 34 04 	sts	0x0434, r20
						menuState = 0;
    4184:	10 92 35 04 	sts	0x0435, r1
						chooseMenu = 1;
    4188:	40 93 11 02 	sts	0x0211, r20
    418c:	04 c0       	rjmp	.+8      	; 0x4196 <__vector_25+0x8c>
		}

	} else {

		if(chooseMenu) {
			chooseMenu = 0;
    418e:	10 92 11 02 	sts	0x0211, r1
			menuChoice = receivedByte;
    4192:	90 93 33 04 	sts	0x0433, r25
			}
		}

	}

}
    4196:	ff 91       	pop	r31
    4198:	ef 91       	pop	r30
    419a:	bf 91       	pop	r27
    419c:	af 91       	pop	r26
    419e:	9f 91       	pop	r25
    41a0:	8f 91       	pop	r24
    41a2:	7f 91       	pop	r23
    41a4:	6f 91       	pop	r22
    41a6:	5f 91       	pop	r21
    41a8:	4f 91       	pop	r20
    41aa:	3f 91       	pop	r19
    41ac:	2f 91       	pop	r18
    41ae:	0f 90       	pop	r0
    41b0:	0b be       	out	0x3b, r0	; 59
    41b2:	0f 90       	pop	r0
    41b4:	0f be       	out	0x3f, r0	; 63
    41b6:	0f 90       	pop	r0
    41b8:	1f 90       	pop	r1
    41ba:	18 95       	reti

	char receivedByte = UDR0;


	if(currentSelector==14) {
		if(receivedByte == 0xAA) {
    41bc:	9a 3a       	cpi	r25, 0xAA	; 170
    41be:	59 f7       	brne	.-42     	; 0x4196 <__vector_25+0x8c>
			irCommSendValues = 1;
    41c0:	81 e0       	ldi	r24, 0x01	; 1
    41c2:	80 93 e0 04 	sts	0x04E0, r24
    41c6:	e7 cf       	rjmp	.-50     	; 0x4196 <__vector_25+0x8c>
		}
	} else if(currentSelector==15) {

		if(receivedByte == '+') {
    41c8:	9b 32       	cpi	r25, 0x2B	; 43
    41ca:	01 f1       	breq	.+64     	; 0x420c <__vector_25+0x102>
				currentOsccal++;
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
    41cc:	9d 32       	cpi	r25, 0x2D	; 45
    41ce:	91 f1       	breq	.+100    	; 0x4234 <__vector_25+0x12a>
				currentOsccal--;	
			}
			OSCCAL = currentOsccal;;
		}

		if(receivedByte == 'g') {
    41d0:	97 36       	cpi	r25, 0x67	; 103
    41d2:	09 f0       	breq	.+2      	; 0x41d6 <__vector_25+0xcc>
    41d4:	43 c0       	rjmp	.+134    	; 0x425c <__vector_25+0x152>
			usart0Transmit(irCommand,1);
    41d6:	90 91 37 04 	lds	r25, 0x0437

}

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    41da:	80 91 c0 00 	lds	r24, 0x00C0
    41de:	85 ff       	sbrs	r24, 5
    41e0:	fc cf       	rjmp	.-8      	; 0x41da <__vector_25+0xd0>
	UDR0 = data;						// put data into buffer, sends the data
    41e2:	90 93 c6 00 	sts	0x00C6, r25
	if(isBlocking) {
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    41e6:	80 91 c0 00 	lds	r24, 0x00C0
    41ea:	86 ff       	sbrs	r24, 6
    41ec:	fc cf       	rjmp	.-8      	; 0x41e6 <__vector_25+0xdc>
			OSCCAL = currentOsccal;;
		}

		if(receivedByte == 'g') {
			usart0Transmit(irCommand,1);
			currentOsccal = OSCCAL;
    41ee:	90 91 66 00 	lds	r25, 0x0066
    41f2:	90 93 58 05 	sts	0x0558, r25

}

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    41f6:	80 91 c0 00 	lds	r24, 0x00C0
    41fa:	85 ff       	sbrs	r24, 5
    41fc:	fc cf       	rjmp	.-8      	; 0x41f6 <__vector_25+0xec>
	UDR0 = data;						// put data into buffer, sends the data
    41fe:	90 93 c6 00 	sts	0x00C6, r25
	if(isBlocking) {
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    4202:	80 91 c0 00 	lds	r24, 0x00C0
    4206:	86 ff       	sbrs	r24, 6
    4208:	fc cf       	rjmp	.-8      	; 0x4202 <__vector_25+0xf8>
    420a:	c5 cf       	rjmp	.-118    	; 0x4196 <__vector_25+0x8c>
			irCommSendValues = 1;
		}
	} else if(currentSelector==15) {

		if(receivedByte == '+') {
			if(currentOsccal<255) {
    420c:	80 91 58 05 	lds	r24, 0x0558
    4210:	8f 3f       	cpi	r24, 0xFF	; 255
    4212:	d1 f0       	breq	.+52     	; 0x4248 <__vector_25+0x13e>
				currentOsccal++;
    4214:	8f 5f       	subi	r24, 0xFF	; 255
    4216:	80 93 58 05 	sts	0x0558, r24

		if(receivedByte == '-') {
			if(currentOsccal>0) {
				currentOsccal--;	
			}
			OSCCAL = currentOsccal;;
    421a:	80 93 66 00 	sts	0x0066, r24
    421e:	bb cf       	rjmp	.-138    	; 0x4196 <__vector_25+0x8c>
			chooseMenu = 0;
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
				case 1: // send sensors data and activate actuators
					if(receivedByte == 0xAA) {
    4220:	9a 3a       	cpi	r25, 0xAA	; 170
    4222:	31 f1       	breq	.+76     	; 0x4270 <__vector_25+0x166>
						getDataNow = 1;
					} else if(receivedByte == 0x55) {
    4224:	95 35       	cpi	r25, 0x55	; 85
    4226:	09 f0       	breq	.+2      	; 0x422a <__vector_25+0x120>
    4228:	b6 cf       	rjmp	.-148    	; 0x4196 <__vector_25+0x8c>
						chooseMenu = 1;
    422a:	80 93 11 02 	sts	0x0211, r24
						menuChoice = 0;
    422e:	10 92 33 04 	sts	0x0433, r1
    4232:	b1 cf       	rjmp	.-158    	; 0x4196 <__vector_25+0x8c>
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
			if(currentOsccal>0) {
    4234:	80 91 58 05 	lds	r24, 0x0558
    4238:	88 23       	and	r24, r24
    423a:	21 f0       	breq	.+8      	; 0x4244 <__vector_25+0x13a>
				currentOsccal--;	
    423c:	81 50       	subi	r24, 0x01	; 1
    423e:	80 93 58 05 	sts	0x0558, r24
    4242:	eb cf       	rjmp	.-42     	; 0x421a <__vector_25+0x110>
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
			if(currentOsccal>0) {
    4244:	80 e0       	ldi	r24, 0x00	; 0
    4246:	e9 cf       	rjmp	.-46     	; 0x421a <__vector_25+0x110>
			irCommSendValues = 1;
		}
	} else if(currentSelector==15) {

		if(receivedByte == '+') {
			if(currentOsccal<255) {
    4248:	8f ef       	ldi	r24, 0xFF	; 255
    424a:	e7 cf       	rjmp	.-50     	; 0x421a <__vector_25+0x110>
					}
					break;

				case 2:	// address writing in eeprom
					if(menuState == 0) { // receive rf address LSB:
						rfAddress = (unsigned int)receivedByte&0x00FF;
    424c:	90 93 25 03 	sts	0x0325, r25
    4250:	10 92 26 03 	sts	0x0326, r1
						menuState = 1;
    4254:	81 e0       	ldi	r24, 0x01	; 1
    4256:	80 93 35 04 	sts	0x0435, r24
    425a:	9d cf       	rjmp	.-198    	; 0x4196 <__vector_25+0x8c>
			usart0Transmit(irCommand,1);
			currentOsccal = OSCCAL;
			usart0Transmit(currentOsccal,1);
		}

		if(receivedByte == 's') {
    425c:	93 37       	cpi	r25, 0x73	; 115
    425e:	09 f0       	breq	.+2      	; 0x4262 <__vector_25+0x158>
    4260:	9a cf       	rjmp	.-204    	; 0x4196 <__vector_25+0x8c>
			eeprom_write_byte((uint8_t*) 4093, currentOsccal); 
    4262:	8d ef       	ldi	r24, 0xFD	; 253
    4264:	9f e0       	ldi	r25, 0x0F	; 15
    4266:	60 91 58 05 	lds	r22, 0x0558
    426a:	0e 94 52 58 	call	0xb0a4	; 0xb0a4 <__eewr_byte_m2560>
    426e:	93 cf       	rjmp	.-218    	; 0x4196 <__vector_25+0x8c>
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
				case 1: // send sensors data and activate actuators
					if(receivedByte == 0xAA) {
						getDataNow = 1;
    4270:	80 93 36 04 	sts	0x0436, r24
    4274:	90 cf       	rjmp	.-224    	; 0x4196 <__vector_25+0x8c>

00004276 <getSelector>:

#include "utility.h"

unsigned char getSelector() {
   return (SEL0) + 2*(SEL1) + 4*(SEL2) + 8*(SEL3);
    4276:	86 b1       	in	r24, 0x06	; 6
    4278:	66 b1       	in	r22, 0x06	; 6
    427a:	26 b1       	in	r18, 0x06	; 6
    427c:	46 b1       	in	r20, 0x06	; 6
    427e:	30 e0       	ldi	r19, 0x00	; 0
    4280:	28 70       	andi	r18, 0x08	; 8
    4282:	30 70       	andi	r19, 0x00	; 0
    4284:	35 95       	asr	r19
    4286:	27 95       	ror	r18
    4288:	35 95       	asr	r19
    428a:	27 95       	ror	r18
    428c:	35 95       	asr	r19
    428e:	27 95       	ror	r18
    4290:	22 0f       	add	r18, r18
    4292:	33 1f       	adc	r19, r19
    4294:	70 e0       	ldi	r23, 0x00	; 0
    4296:	64 70       	andi	r22, 0x04	; 4
    4298:	70 70       	andi	r23, 0x00	; 0
    429a:	75 95       	asr	r23
    429c:	67 95       	ror	r22
    429e:	75 95       	asr	r23
    42a0:	67 95       	ror	r22
    42a2:	26 0f       	add	r18, r22
    42a4:	37 1f       	adc	r19, r23
    42a6:	22 0f       	add	r18, r18
    42a8:	33 1f       	adc	r19, r19
    42aa:	50 e0       	ldi	r21, 0x00	; 0
    42ac:	42 70       	andi	r20, 0x02	; 2
    42ae:	50 70       	andi	r21, 0x00	; 0
    42b0:	55 95       	asr	r21
    42b2:	47 95       	ror	r20
    42b4:	24 0f       	add	r18, r20
    42b6:	35 1f       	adc	r19, r21
    42b8:	22 0f       	add	r18, r18
    42ba:	81 70       	andi	r24, 0x01	; 1
}
    42bc:	82 0f       	add	r24, r18
    42be:	08 95       	ret

000042c0 <initPeripherals>:
    

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
    42c0:	f8 94       	cli
	
	// reset all registers touched by arduino in the "init()" functions (wiring.c) not used by the robot
	TCCR0A = 0;
    42c2:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
    42c4:	15 bc       	out	0x25, r1	; 37
	TIMSK0 = 0;
    42c6:	10 92 6e 00 	sts	0x006E, r1
	TCCR5A = 0;
    42ca:	10 92 20 01 	sts	0x0120, r1
	TCCR5B = 0;
    42ce:	10 92 21 01 	sts	0x0121, r1

	rfAddress = eeprom_read_word((uint16_t*)4094);
    42d2:	8e ef       	ldi	r24, 0xFE	; 254
    42d4:	9f e0       	ldi	r25, 0x0F	; 15
    42d6:	0e 94 24 58 	call	0xb048	; 0xb048 <__eerd_word_m2560>
    42da:	90 93 26 03 	sts	0x0326, r25
    42de:	80 93 25 03 	sts	0x0325, r24
	currentOsccal = eeprom_read_byte((uint8_t*)4093);
    42e2:	8d ef       	ldi	r24, 0xFD	; 253
    42e4:	9f e0       	ldi	r25, 0x0F	; 15
    42e6:	0e 94 1c 58 	call	0xb038	; 0xb038 <__eerd_byte_m2560>
    42ea:	80 93 58 05 	sts	0x0558, r24
	if(currentOsccal!=0 && currentOsccal!=255) { // clear memory
    42ee:	98 2f       	mov	r25, r24
    42f0:	91 50       	subi	r25, 0x01	; 1
    42f2:	9e 3f       	cpi	r25, 0xFE	; 254
    42f4:	e8 f5       	brcc	.+122    	; 0x4370 <initPeripherals+0xb0>
		OSCCAL = currentOsccal;
    42f6:	80 93 66 00 	sts	0x0066, r24
		currentOsccal = OSCCAL;
		eeprom_write_byte((uint8_t*) 4093, currentOsccal);
	}
	
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
    42fa:	80 91 25 03 	lds	r24, 0x0325
    42fe:	90 91 26 03 	lds	r25, 0x0326
    4302:	9c 01       	movw	r18, r24
    4304:	21 58       	subi	r18, 0x81	; 129
    4306:	3c 40       	sbci	r19, 0x0C	; 12
    4308:	23 30       	cpi	r18, 0x03	; 3
    430a:	31 05       	cpc	r19, r1
    430c:	08 f5       	brcc	.+66     	; 0x4350 <initPeripherals+0x90>
		hardwareRevision = HW_REV_3_0;
    430e:	10 92 5f 04 	sts	0x045F, r1

	if(rfAddress > 3203) {
		hardwareRevision = HW_REV_3_1;
	}

	initCalibration();
    4312:	0e 94 79 3b 	call	0x76f2	; 0x76f2 <initCalibration>
	initPortsIO();
    4316:	0e 94 2a 1f 	call	0x3e54	; 0x3e54 <initPortsIO>
	initAdc();
    431a:	0e 94 80 22 	call	0x4500	; 0x4500 <initAdc>
	initMotors();
    431e:	0e 94 a8 28 	call	0x5150	; 0x5150 <initMotors>
	initRGBleds();
    4322:	0e 94 54 3f 	call	0x7ea8	; 0x7ea8 <initRGBleds>
	initSPI();
    4326:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <initSPI>
	mirf_init();
    432a:	0e 94 8f 10 	call	0x211e	; 0x211e <mirf_init>
	if(spiCommError==0) {
    432e:	80 91 28 03 	lds	r24, 0x0328
    4332:	88 23       	and	r24, r24
    4334:	29 f4       	brne	.+10     	; 0x4340 <initPeripherals+0x80>
		rfFlags |= 1;
    4336:	80 91 27 03 	lds	r24, 0x0327
    433a:	81 60       	ori	r24, 0x01	; 1
    433c:	80 93 27 03 	sts	0x0327, r24
	}
	initUsart0();
    4340:	0e 94 23 20 	call	0x4046	; 0x4046 <initUsart0>
	initAccelerometer();
    4344:	0e 94 9c 40 	call	0x8138	; 0x8138 <initAccelerometer>
	init_ir_remote_control();
    4348:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <init_ir_remote_control>

	sei();			// enable global interrupts
    434c:	78 94       	sei

	
}
    434e:	08 95       	ret
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
		hardwareRevision = HW_REV_3_0;
	}

	if(rfAddress == 3200) {
    4350:	2c e0       	ldi	r18, 0x0C	; 12
    4352:	80 38       	cpi	r24, 0x80	; 128
    4354:	92 07       	cpc	r25, r18
    4356:	21 f4       	brne	.+8      	; 0x4360 <initPeripherals+0xa0>
		hardwareRevision = HW_REV_3_0_1;
    4358:	81 e0       	ldi	r24, 0x01	; 1
    435a:	80 93 5f 04 	sts	0x045F, r24
    435e:	d9 cf       	rjmp	.-78     	; 0x4312 <initPeripherals+0x52>
	}

	if(rfAddress > 3203) {
    4360:	2c e0       	ldi	r18, 0x0C	; 12
    4362:	84 38       	cpi	r24, 0x84	; 132
    4364:	92 07       	cpc	r25, r18
    4366:	a8 f2       	brcs	.-86     	; 0x4312 <initPeripherals+0x52>
		hardwareRevision = HW_REV_3_1;
    4368:	82 e0       	ldi	r24, 0x02	; 2
    436a:	80 93 5f 04 	sts	0x045F, r24
    436e:	d1 cf       	rjmp	.-94     	; 0x4312 <initPeripherals+0x52>
	rfAddress = eeprom_read_word((uint16_t*)4094);
	currentOsccal = eeprom_read_byte((uint8_t*)4093);
	if(currentOsccal!=0 && currentOsccal!=255) { // clear memory
		OSCCAL = currentOsccal;
	} else {
		currentOsccal = OSCCAL;
    4370:	60 91 66 00 	lds	r22, 0x0066
    4374:	60 93 58 05 	sts	0x0558, r22
		eeprom_write_byte((uint8_t*) 4093, currentOsccal);
    4378:	8d ef       	ldi	r24, 0xFD	; 253
    437a:	9f e0       	ldi	r25, 0x0F	; 15
    437c:	0e 94 52 58 	call	0xb0a4	; 0xb0a4 <__eewr_byte_m2560>
    4380:	bc cf       	rjmp	.-136    	; 0x42fa <initPeripherals+0x3a>

00004382 <__vector_15>:

	
}

// used only for wake-up from sleep
ISR(TIMER2_OVF_vect) {
    4382:	1f 92       	push	r1
    4384:	0f 92       	push	r0
    4386:	0f b6       	in	r0, 0x3f	; 63
    4388:	0f 92       	push	r0
    438a:	11 24       	eor	r1, r1

}
    438c:	0f 90       	pop	r0
    438e:	0f be       	out	0x3f, r0	; 63
    4390:	0f 90       	pop	r0
    4392:	1f 90       	pop	r1
    4394:	18 95       	reti

00004396 <sleep>:

void sleep(unsigned char seconds) {
    4396:	cf 93       	push	r28
    4398:	df 93       	push	r29

	unsigned int pause = seconds*30;	// the timer2 used to wake-up from sleep is configured to run at 30 Hz
    439a:	9e e1       	ldi	r25, 0x1E	; 30
    439c:	89 9f       	mul	r24, r25
    439e:	e0 01       	movw	r28, r0
    43a0:	11 24       	eor	r1, r1

	// disable external interrupt because it uses the timer2 to interpret the tv
	// remote signal and the timer2 must be free in order to be used for wake-up from sleep
	PCICR &= ~(1 << PCIE1);			// disable interrupt from falling edge
    43a2:	80 91 68 00 	lds	r24, 0x0068
    43a6:	8d 7f       	andi	r24, 0xFD	; 253
    43a8:	80 93 68 00 	sts	0x0068, r24
	PCMSK1 &= ~(1 << PCINT15);		
    43ac:	80 91 6c 00 	lds	r24, 0x006C
    43b0:	8f 77       	andi	r24, 0x7F	; 127
    43b2:	80 93 6c 00 	sts	0x006C, r24
	PCIFR |= (1 << PCIF1);			// clear interrupt flag
    43b6:	d9 9a       	sbi	0x1b, 1	; 27

	// disable adc
	ADCSRA = 0x00;					// disable interrupt and turn off adc
    43b8:	10 92 7a 00 	sts	0x007A, r1
	ADCSRA |= (1 << ADIF);			// clear interrupt flag
    43bc:	80 91 7a 00 	lds	r24, 0x007A
    43c0:	80 61       	ori	r24, 0x10	; 16
    43c2:	80 93 7a 00 	sts	0x007A, r24

	// disable motors pwm
	TCCR3A = 0x00;	// turn off timer
    43c6:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0x00;
    43ca:	10 92 91 00 	sts	0x0091, r1
	TIMSK3 = 0x00;	// disable interrupt
    43ce:	10 92 71 00 	sts	0x0071, r1
	TIFR3 |= (1 << OCF3A) | (1 << OCF3B) | (1 << TOV3);	// clear output compares and timer overflow interrupt flags
    43d2:	88 b3       	in	r24, 0x18	; 24
    43d4:	87 60       	ori	r24, 0x07	; 7
    43d6:	88 bb       	out	0x18, r24	; 24
	TCCR4A = 0x00;
    43d8:	10 92 a0 00 	sts	0x00A0, r1
	TCCR4B = 0x00;
    43dc:	10 92 a1 00 	sts	0x00A1, r1
	TIMSK4 = 0x00;
    43e0:	10 92 72 00 	sts	0x0072, r1
	TIFR4 |= (1 << OCF4A) | (1 << OCF4B) | (1 << TOV4);	// clear output compares and timer overflow interrupt flags
    43e4:	89 b3       	in	r24, 0x19	; 25
    43e6:	87 60       	ori	r24, 0x07	; 7
    43e8:	89 bb       	out	0x19, r24	; 25

	// disable leds pwm
	TCCR1A = 0x00;	// turn off timer
    43ea:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x00;
    43ee:	10 92 81 00 	sts	0x0081, r1

	// close communication channels
	closeUsart();
    43f2:	0e 94 4d 20 	call	0x409a	; 0x409a <closeUsart>
	closeSPI();
    43f6:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <closeSPI>
	i2c_close();
    43fa:	0e 94 75 1f 	call	0x3eea	; 0x3eea <i2c_close>

	// set port pins
	initPortsIO();
    43fe:	0e 94 2a 1f 	call	0x3e54	; 0x3e54 <initPortsIO>
	//PORTB &= ~(1 << 4);	// radio CE pin
	//DDRD = 0xFF;
	//PORTD = 0x00;	// I2C and uart pins to 0

	// set extendend standby mode and enable it
	SMCR |= (1 << SM2) | (1 << SM1) | (1 << SM0) | (1 << SE);	// extended standby
    4402:	83 b7       	in	r24, 0x33	; 51
    4404:	8f 60       	ori	r24, 0x0F	; 15
    4406:	83 bf       	out	0x33, r24	; 51

	// set timer2 for wake-up: 
	// source clock = 8 MHz
	// prescaler = 1/1024 => 7812.5 Hz
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
    4408:	81 e0       	ldi	r24, 0x01	; 1
    440a:	80 93 70 00 	sts	0x0070, r24
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
    440e:	80 91 b0 00 	lds	r24, 0x00B0
    4412:	8d 7f       	andi	r24, 0xFD	; 253
    4414:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler
    4418:	80 91 b1 00 	lds	r24, 0x00B1
    441c:	87 60       	ori	r24, 0x07	; 7
    441e:	80 93 b1 00 	sts	0x00B1, r24

	while(pause > 0) {	
    4422:	20 97       	sbiw	r28, 0x00	; 0
    4424:	19 f0       	breq	.+6      	; 0x442c <sleep+0x96>
		// enter extended standby mode
		//sleep_cpu();
		__asm__("sleep");
    4426:	88 95       	sleep
		pause--;
    4428:	21 97       	sbiw	r28, 0x01	; 1
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler

	while(pause > 0) {	
    442a:	e9 f7       	brne	.-6      	; 0x4426 <sleep+0x90>
//		PORTB ^= (1 << 6);
	}

	// disable power mode
	//SMCR &= ~(1 << SE);
	SMCR = 0x00;
    442c:	13 be       	out	0x33, r1	; 51

	// disable timer2 and its timer overflow interrupt
	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);	// disable timer2
    442e:	80 91 b1 00 	lds	r24, 0x00B1
    4432:	88 7f       	andi	r24, 0xF8	; 248
    4434:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;					// disable all interrupt for timer2
    4438:	10 92 70 00 	sts	0x0070, r1
	TCCR2A |= (1 << WGM21); 	// mode 2 => CTC mode
    443c:	80 91 b0 00 	lds	r24, 0x00B0
    4440:	82 60       	ori	r24, 0x02	; 2
    4442:	80 93 b0 00 	sts	0x00B0, r24

	pwm_red = 255;
    4446:	8f ef       	ldi	r24, 0xFF	; 255
    4448:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    444c:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    4450:	80 93 0e 02 	sts	0x020E, r24
	pwm_right = 0;
    4454:	10 92 06 03 	sts	0x0306, r1
    4458:	10 92 05 03 	sts	0x0305, r1
	pwm_left = 0;
    445c:	10 92 08 03 	sts	0x0308, r1
    4460:	10 92 07 03 	sts	0x0307, r1
	initPeripherals();
    4464:	0e 94 60 21 	call	0x42c0	; 0x42c0 <initPeripherals>

}
    4468:	df 91       	pop	r29
    446a:	cf 91       	pop	r28
    446c:	08 95       	ret

0000446e <getTime100MicroSec>:

unsigned long int getTime100MicroSec() {
    446e:	60 91 58 04 	lds	r22, 0x0458
    4472:	70 91 59 04 	lds	r23, 0x0459
	return clockTick;
}
    4476:	80 91 5a 04 	lds	r24, 0x045A
    447a:	90 91 5b 04 	lds	r25, 0x045B
    447e:	08 95       	ret

00004480 <readBatteryLevel>:

void readBatteryLevel() {
	measBattery = 1;
    4480:	81 e0       	ldi	r24, 0x01	; 1
    4482:	80 93 cf 02 	sts	0x02CF, r24
}
    4486:	08 95       	ret

00004488 <resetOdometry>:

void resetOdometry() {
	leftMotSteps = 0;
    4488:	80 e0       	ldi	r24, 0x00	; 0
    448a:	90 e0       	ldi	r25, 0x00	; 0
    448c:	dc 01       	movw	r26, r24
    448e:	80 93 e5 02 	sts	0x02E5, r24
    4492:	90 93 e6 02 	sts	0x02E6, r25
    4496:	a0 93 e7 02 	sts	0x02E7, r26
    449a:	b0 93 e8 02 	sts	0x02E8, r27
	rightMotSteps = 0;
    449e:	80 93 e1 02 	sts	0x02E1, r24
    44a2:	90 93 e2 02 	sts	0x02E2, r25
    44a6:	a0 93 e3 02 	sts	0x02E3, r26
    44aa:	b0 93 e4 02 	sts	0x02E4, r27
	theta = 0;
    44ae:	80 93 7f 04 	sts	0x047F, r24
    44b2:	90 93 80 04 	sts	0x0480, r25
    44b6:	a0 93 81 04 	sts	0x0481, r26
    44ba:	b0 93 82 04 	sts	0x0482, r27
	xPos = 0;
    44be:	80 93 87 04 	sts	0x0487, r24
    44c2:	90 93 88 04 	sts	0x0488, r25
    44c6:	a0 93 89 04 	sts	0x0489, r26
    44ca:	b0 93 8a 04 	sts	0x048A, r27
	yPos = 0;
    44ce:	80 93 8b 04 	sts	0x048B, r24
    44d2:	90 93 8c 04 	sts	0x048C, r25
    44d6:	a0 93 8d 04 	sts	0x048D, r26
    44da:	b0 93 8e 04 	sts	0x048E, r27
	rightDist = 0;
    44de:	80 93 a7 04 	sts	0x04A7, r24
    44e2:	90 93 a8 04 	sts	0x04A8, r25
    44e6:	a0 93 a9 04 	sts	0x04A9, r26
    44ea:	b0 93 aa 04 	sts	0x04AA, r27
	leftDist = 0;
    44ee:	80 93 a3 04 	sts	0x04A3, r24
    44f2:	90 93 a4 04 	sts	0x04A4, r25
    44f6:	a0 93 a5 04 	sts	0x04A5, r26
    44fa:	b0 93 a6 04 	sts	0x04A6, r27
}
    44fe:	08 95       	ret

00004500 <initAdc>:

#include "adc.h"


void initAdc(void) {
    4500:	cf 93       	push	r28
    4502:	df 93       	push	r29
	// ADMUX  -----> REFS1	REFS0	 ADLAR	MUX4	MUX3 	 MUX2	MUX1	MUX0
	// default		 0		0		 0		0		0		 0		0		0
	// ADCSRB -----> -		ACME	 - 		- 		MUX5 	 ADTS2 	ADTS1 	ADTS0
	// default		 0		0		 0		0		0		 0		0		0

	ADCSRA = 0;
    4504:	ea e7       	ldi	r30, 0x7A	; 122
    4506:	f0 e0       	ldi	r31, 0x00	; 0
    4508:	10 82       	st	Z, r1
	ADCSRB = 0;
    450a:	ab e7       	ldi	r26, 0x7B	; 123
    450c:	b0 e0       	ldi	r27, 0x00	; 0
    450e:	1c 92       	st	X, r1
	ADMUX = 0;
    4510:	cc e7       	ldi	r28, 0x7C	; 124
    4512:	d0 e0       	ldi	r29, 0x00	; 0
    4514:	18 82       	st	Y, r1

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// 1/64 prescaler => 8 MHz/64=125 KHz => Tad (adc clock)
    4516:	80 81       	ld	r24, Z
    4518:	86 60       	ori	r24, 0x06	; 6
    451a:	80 83       	st	Z, r24
											// one sample need 13 Tad in free running mode, so interrupt 
											// frequency is 125/13=9.6 KHz (104 us between adc interrupts)
	ADMUX |= (1 << REFS0); 	// voltage reference to AVCC (external)
    451c:	88 81       	ld	r24, Y
    451e:	80 64       	ori	r24, 0x40	; 64
    4520:	88 83       	st	Y, r24
	ADCSRA |= (1 << ADATE); // auto-trigger mode: the new sampling is started just after the last one is completed
    4522:	80 81       	ld	r24, Z
    4524:	80 62       	ori	r24, 0x20	; 32
    4526:	80 83       	st	Z, r24
	ADCSRB &= 0xF8;			// for safety...ADTS2:0 in ADCSRB should be already set to free running by default (0b000)
    4528:	8c 91       	ld	r24, X
    452a:	88 7f       	andi	r24, 0xF8	; 248
    452c:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADIE);	// enable interrupt on conversion completion
    452e:	80 81       	ld	r24, Z
    4530:	88 60       	ori	r24, 0x08	; 8
    4532:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	// enable ADC
    4534:	80 81       	ld	r24, Z
    4536:	80 68       	ori	r24, 0x80	; 128
    4538:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);	// start first conversion (start from channel 0)
    453a:	80 81       	ld	r24, Z
    453c:	80 64       	ori	r24, 0x40	; 64
    453e:	80 83       	st	Z, r24

}
    4540:	df 91       	pop	r29
    4542:	cf 91       	pop	r28
    4544:	08 95       	ret

00004546 <__vector_29>:

ISR(ADC_vect) {
    4546:	1f 92       	push	r1
    4548:	0f 92       	push	r0
    454a:	0f b6       	in	r0, 0x3f	; 63
    454c:	0f 92       	push	r0
    454e:	0b b6       	in	r0, 0x3b	; 59
    4550:	0f 92       	push	r0
    4552:	11 24       	eor	r1, r1
    4554:	1f 93       	push	r17
    4556:	2f 93       	push	r18
    4558:	3f 93       	push	r19
    455a:	4f 93       	push	r20
    455c:	5f 93       	push	r21
    455e:	6f 93       	push	r22
    4560:	7f 93       	push	r23
    4562:	8f 93       	push	r24
    4564:	9f 93       	push	r25
    4566:	af 93       	push	r26
    4568:	bf 93       	push	r27
    456a:	ef 93       	push	r30
    456c:	ff 93       	push	r31
	// channel 15:    active phase when going forward: motor left current; passive phase when going backward: motor left velocity


	//LED_BLUE_ON;

	clockTick++;				// this variable is used as base time for timed processes/functions (e,g, delay); 
    456e:	80 91 58 04 	lds	r24, 0x0458
    4572:	90 91 59 04 	lds	r25, 0x0459
    4576:	a0 91 5a 04 	lds	r26, 0x045A
    457a:	b0 91 5b 04 	lds	r27, 0x045B
    457e:	01 96       	adiw	r24, 0x01	; 1
    4580:	a1 1d       	adc	r26, r1
    4582:	b1 1d       	adc	r27, r1
    4584:	80 93 58 04 	sts	0x0458, r24
    4588:	90 93 59 04 	sts	0x0459, r25
    458c:	a0 93 5a 04 	sts	0x045A, r26
    4590:	b0 93 5b 04 	sts	0x045B, r27
								// resolution of 104 us based on adc interrupts

	unsigned int value = ADCL;			// get the sample; low byte must be read first!!
    4594:	80 91 78 00 	lds	r24, 0x0078
    4598:	90 e0       	ldi	r25, 0x00	; 0
	value = (ADCH<<8) | value;
    459a:	40 91 79 00 	lds	r20, 0x0079
    459e:	34 2f       	mov	r19, r20
    45a0:	20 e0       	ldi	r18, 0x00	; 0
    45a2:	82 2b       	or	r24, r18
    45a4:	93 2b       	or	r25, r19
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    45a6:	20 91 c9 02 	lds	r18, 0x02C9
    45aa:	22 30       	cpi	r18, 0x02	; 2
    45ac:	09 f4       	brne	.+2      	; 0x45b0 <__vector_29+0x6a>
    45ae:	c1 c1       	rjmp	.+898    	; 0x4932 <__vector_29+0x3ec>
    45b0:	23 30       	cpi	r18, 0x03	; 3
    45b2:	08 f4       	brcc	.+2      	; 0x45b6 <__vector_29+0x70>
    45b4:	4c c0       	rjmp	.+152    	; 0x464e <__vector_29+0x108>
    45b6:	24 30       	cpi	r18, 0x04	; 4
    45b8:	09 f4       	brne	.+2      	; 0x45bc <__vector_29+0x76>
    45ba:	e5 c1       	rjmp	.+970    	; 0x4986 <__vector_29+0x440>
    45bc:	24 30       	cpi	r18, 0x04	; 4
    45be:	08 f0       	brcs	.+2      	; 0x45c2 <__vector_29+0x7c>
    45c0:	2a c1       	rjmp	.+596    	; 0x4816 <__vector_29+0x2d0>
				}
			}
			break;

		case SAVE_TO_LEFT_MOTOR_CURRENT:
			left_current_avg += value;
    45c2:	20 91 f1 02 	lds	r18, 0x02F1
    45c6:	30 91 f2 02 	lds	r19, 0x02F2
    45ca:	28 0f       	add	r18, r24
    45cc:	39 1f       	adc	r19, r25
			left_current_avg = left_current_avg >> 1;
    45ce:	36 95       	lsr	r19
    45d0:	27 95       	ror	r18
    45d2:	30 93 f2 02 	sts	0x02F2, r19
    45d6:	20 93 f1 02 	sts	0x02F1, r18
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
    45da:	80 91 dc 04 	lds	r24, 0x04DC
    45de:	82 30       	cpi	r24, 0x02	; 2
    45e0:	09 f0       	breq	.+2      	; 0x45e4 <__vector_29+0x9e>
    45e2:	4b c0       	rjmp	.+150    	; 0x467a <__vector_29+0x134>
		switch(irCommAdcTxState) {
    45e4:	80 91 2c 05 	lds	r24, 0x052C
    45e8:	81 30       	cpi	r24, 0x01	; 1
    45ea:	09 f4       	brne	.+2      	; 0x45ee <__vector_29+0xa8>
    45ec:	a0 c2       	rjmp	.+1344   	; 0x4b2e <__vector_29+0x5e8>
    45ee:	81 30       	cpi	r24, 0x01	; 1
    45f0:	08 f0       	brcs	.+2      	; 0x45f4 <__vector_29+0xae>
    45f2:	f7 c1       	rjmp	.+1006   	; 0x49e2 <__vector_29+0x49c>
				}
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ1;
				break;

			case IRCOMM_TX_ADC_IDLE:
				if(irCommTxByteEnqueued==1) {					
    45f4:	80 91 2e 05 	lds	r24, 0x052E
    45f8:	81 30       	cpi	r24, 0x01	; 1
    45fa:	09 f4       	brne	.+2      	; 0x45fe <__vector_29+0xb8>
    45fc:	09 c3       	rjmp	.+1554   	; 0x4c10 <__vector_29+0x6ca>
    45fe:	80 91 ca 02 	lds	r24, 0x02CA
	
	}

	// channel selection in the adc register; continuously manually change the channel 
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
    4602:	90 91 33 02 	lds	r25, 0x0233
    4606:	98 30       	cpi	r25, 0x08	; 8
    4608:	08 f0       	brcs	.+2      	; 0x460c <__vector_29+0xc6>
    460a:	4b c1       	rjmp	.+662    	; 0x48a2 <__vector_29+0x35c>
		ADCSRB &= ~(1 << MUX5);
    460c:	90 91 7b 00 	lds	r25, 0x007B
    4610:	97 7f       	andi	r25, 0xF7	; 247
    4612:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + currentAdChannel;
    4616:	90 91 33 02 	lds	r25, 0x0233
    461a:	90 5c       	subi	r25, 0xC0	; 192
    461c:	90 93 7c 00 	sts	0x007C, r25
		ADCSRB |= (1 << MUX5);
		ADMUX = 0x40 + (currentAdChannel-8);
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if((adcSamplingState==2) && (irCommMode==IRCOMM_MODE_SENSORS_SAMPLING)) {
    4620:	82 30       	cpi	r24, 0x02	; 2
    4622:	09 f4       	brne	.+2      	; 0x4626 <__vector_29+0xe0>
    4624:	4b c1       	rjmp	.+662    	; 0x48bc <__vector_29+0x376>

	}

	//LED_BLUE_OFF;

}
    4626:	ff 91       	pop	r31
    4628:	ef 91       	pop	r30
    462a:	bf 91       	pop	r27
    462c:	af 91       	pop	r26
    462e:	9f 91       	pop	r25
    4630:	8f 91       	pop	r24
    4632:	7f 91       	pop	r23
    4634:	6f 91       	pop	r22
    4636:	5f 91       	pop	r21
    4638:	4f 91       	pop	r20
    463a:	3f 91       	pop	r19
    463c:	2f 91       	pop	r18
    463e:	1f 91       	pop	r17
    4640:	0f 90       	pop	r0
    4642:	0b be       	out	0x3b, r0	; 59
    4644:	0f 90       	pop	r0
    4646:	0f be       	out	0x3f, r0	; 63
    4648:	0f 90       	pop	r0
    464a:	1f 90       	pop	r1
    464c:	18 95       	reti
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    464e:	22 23       	and	r18, r18
    4650:	09 f4       	brne	.+2      	; 0x4654 <__vector_29+0x10e>
    4652:	4d c0       	rjmp	.+154    	; 0x46ee <__vector_29+0x1a8>
    4654:	21 30       	cpi	r18, 0x01	; 1
    4656:	61 f4       	brne	.+24     	; 0x4670 <__vector_29+0x12a>
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
			}											// is sampled; thus 12 sensors x 2 phases = 24 samples
			break;

		case SAVE_TO_RIGHT_MOTOR_CURRENT:
			right_current_avg += value;
    4658:	20 91 f3 02 	lds	r18, 0x02F3
    465c:	30 91 f4 02 	lds	r19, 0x02F4
    4660:	28 0f       	add	r18, r24
    4662:	39 1f       	adc	r19, r25
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
    4664:	36 95       	lsr	r19
    4666:	27 95       	ror	r18
    4668:	30 93 f4 02 	sts	0x02F4, r19
    466c:	20 93 f3 02 	sts	0x02F3, r18
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
    4670:	80 91 dc 04 	lds	r24, 0x04DC
    4674:	82 30       	cpi	r24, 0x02	; 2
    4676:	09 f4       	brne	.+2      	; 0x467a <__vector_29+0x134>
    4678:	b5 cf       	rjmp	.-150    	; 0x45e4 <__vector_29+0x9e>
					irCommAdcTxState = IRCOMM_TX_ADC_TURN_OFF_SENSORS;
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
    467a:	81 30       	cpi	r24, 0x01	; 1
    467c:	09 f4       	brne	.+2      	; 0x4680 <__vector_29+0x13a>
    467e:	38 c1       	rjmp	.+624    	; 0x48f0 <__vector_29+0x3aa>
			case 12:
				adcSaveDataTo = SKIP_SAMPLE;
				break;

		}
	} else if(irCommMode==IRCOMM_MODE_SENSORS_SAMPLING) {
    4680:	88 23       	and	r24, r24
    4682:	09 f0       	breq	.+2      	; 0x4686 <__vector_29+0x140>
    4684:	bc cf       	rjmp	.-136    	; 0x45fe <__vector_29+0xb8>
		switch(adcSamplingState) {
    4686:	80 91 ca 02 	lds	r24, 0x02CA
    468a:	82 30       	cpi	r24, 0x02	; 2
    468c:	09 f4       	brne	.+2      	; 0x4690 <__vector_29+0x14a>
    468e:	23 c3       	rjmp	.+1606   	; 0x4cd6 <__vector_29+0x790>
    4690:	83 30       	cpi	r24, 0x03	; 3
    4692:	08 f0       	brcs	.+2      	; 0x4696 <__vector_29+0x150>
    4694:	d3 c1       	rjmp	.+934    	; 0x4a3c <__vector_29+0x4f6>
    4696:	88 23       	and	r24, r24
    4698:	09 f4       	brne	.+2      	; 0x469c <__vector_29+0x156>
    469a:	76 c2       	rjmp	.+1260   	; 0x4b88 <__vector_29+0x642>
    469c:	81 30       	cpi	r24, 0x01	; 1
    469e:	09 f0       	breq	.+2      	; 0x46a2 <__vector_29+0x15c>
    46a0:	b0 cf       	rjmp	.-160    	; 0x4602 <__vector_29+0xbc>
				}
				adcSamplingState = 1;
				break;

			case 1:	// left motor
				currentAdChannel = currentMotLeftChannel;
    46a2:	80 91 35 02 	lds	r24, 0x0235
    46a6:	80 93 33 02 	sts	0x0233, r24
				leftChannelPhase = leftMotorPhase;
    46aa:	80 91 38 02 	lds	r24, 0x0238
    46ae:	80 93 cc 02 	sts	0x02CC, r24
				adcSaveDataTo = SAVE_TO_PROX;
    46b2:	10 92 c9 02 	sts	0x02C9, r1
				adcSamplingState = 2;
    46b6:	82 e0       	ldi	r24, 0x02	; 2
    46b8:	80 93 ca 02 	sts	0x02CA, r24
				if(irCommEnabled==IRCOMM_MODE_RECEIVE && currentProx==23) {					
    46bc:	10 91 da 04 	lds	r17, 0x04DA
    46c0:	11 30       	cpi	r17, 0x01	; 1
    46c2:	09 f4       	brne	.+2      	; 0x46c6 <__vector_29+0x180>
    46c4:	0b c4       	rjmp	.+2070   	; 0x4edc <__vector_29+0x996>
					irCommRxWindowSamples = 0;
					memset(irCommMaxSensorValueAdc, 0x00, 16);
					memset(irCommMinSensorValueAdc, 0xFF, 16);
					irCommMode = IRCOMM_MODE_RECEIVE;					
				}
				if(irCommEnabled==IRCOMM_MODE_TRANSMIT && currentProx==23) {
    46c6:	12 30       	cpi	r17, 0x02	; 2
    46c8:	09 f0       	breq	.+2      	; 0x46cc <__vector_29+0x186>
    46ca:	99 cf       	rjmp	.-206    	; 0x45fe <__vector_29+0xb8>
    46cc:	80 91 34 02 	lds	r24, 0x0234
    46d0:	87 31       	cpi	r24, 0x17	; 23
    46d2:	09 f0       	breq	.+2      	; 0x46d6 <__vector_29+0x190>
    46d4:	94 cf       	rjmp	.-216    	; 0x45fe <__vector_29+0xb8>
					irCommMode = IRCOMM_MODE_TRANSMIT;
    46d6:	10 93 dc 04 	sts	0x04DC, r17
					if(irCommTxByteEnqueued==1) {
    46da:	80 91 2e 05 	lds	r24, 0x052E
    46de:	81 30       	cpi	r24, 0x01	; 1
    46e0:	09 f4       	brne	.+2      	; 0x46e4 <__vector_29+0x19e>
    46e2:	96 c2       	rjmp	.+1324   	; 0x4c10 <__vector_29+0x6ca>
						irCommAdcTxState = IRCOMM_TX_ADC_TURN_OFF_SENSORS;
					} else {
						irCommMode=IRCOMM_MODE_SENSORS_SAMPLING; // no data to be transmitted, restart sensors sampling
    46e4:	10 92 dc 04 	sts	0x04DC, r1
    46e8:	80 91 ca 02 	lds	r24, 0x02CA
    46ec:	8a cf       	rjmp	.-236    	; 0x4602 <__vector_29+0xbc>
			}
			currentProx++;
			break;

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    46ee:	60 91 34 02 	lds	r22, 0x0234
    46f2:	6e 30       	cpi	r22, 0x0E	; 14
    46f4:	09 f4       	brne	.+2      	; 0x46f8 <__vector_29+0x1b2>
    46f6:	02 c3       	rjmp	.+1540   	; 0x4cfc <__vector_29+0x7b6>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
				measBattery = 0;
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
			} else {
				proximityValue[currentProx] = value;	// even indexes contain ambient values; odd indexes contains "reflected" values
    46f8:	26 2f       	mov	r18, r22
    46fa:	30 e0       	ldi	r19, 0x00	; 0
    46fc:	f9 01       	movw	r30, r18
    46fe:	ee 0f       	add	r30, r30
    4700:	ff 1f       	adc	r31, r31
    4702:	e7 5c       	subi	r30, 0xC7	; 199
    4704:	fd 4f       	sbci	r31, 0xFD	; 253
    4706:	91 83       	std	Z+1, r25	; 0x01
    4708:	80 83       	st	Z, r24
			}

			if(currentProx & 0x01) {
    470a:	20 ff       	sbrs	r18, 0
    470c:	78 c0       	rjmp	.+240    	; 0x47fe <__vector_29+0x2b8>
				//if(currentProx < 16) {	// prox
					proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
    470e:	f9 01       	movw	r30, r18
    4710:	ee 0f       	add	r30, r30
    4712:	ff 1f       	adc	r31, r31
    4714:	e9 5c       	subi	r30, 0xC9	; 201
    4716:	fd 4f       	sbci	r31, 0xFD	; 253
    4718:	80 81       	ld	r24, Z
    471a:	91 81       	ldd	r25, Z+1	; 0x01
    471c:	f9 01       	movw	r30, r18
    471e:	ee 0f       	add	r30, r30
    4720:	ff 1f       	adc	r31, r31
    4722:	e7 5c       	subi	r30, 0xC7	; 199
    4724:	fd 4f       	sbci	r31, 0xFD	; 253
    4726:	40 81       	ld	r20, Z
    4728:	51 81       	ldd	r21, Z+1	; 0x01
    472a:	26 2f       	mov	r18, r22
    472c:	26 95       	lsr	r18
    472e:	30 e0       	ldi	r19, 0x00	; 0
    4730:	84 1b       	sub	r24, r20
    4732:	95 0b       	sbc	r25, r21
    4734:	22 0f       	add	r18, r18
    4736:	33 1f       	adc	r19, r19
    4738:	f9 01       	movw	r30, r18
    473a:	ef 57       	subi	r30, 0x7F	; 127
    473c:	fd 4f       	sbci	r31, 0xFD	; 253
    473e:	40 81       	ld	r20, Z
    4740:	51 81       	ldd	r21, Z+1	; 0x01
    4742:	84 1b       	sub	r24, r20
    4744:	95 0b       	sbc	r25, r21
    4746:	f9 01       	movw	r30, r18
    4748:	e7 59       	subi	r30, 0x97	; 151
    474a:	fd 4f       	sbci	r31, 0xFD	; 253
    474c:	91 83       	std	Z+1, r25	; 0x01
    474e:	80 83       	st	Z, r24
				//} else {	// ground
				//	proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx];
				//}
				if(proximityResult[currentProx>>1] < 0) {
    4750:	97 fd       	sbrc	r25, 7
    4752:	fe c2       	rjmp	.+1532   	; 0x4d50 <__vector_29+0x80a>
					proximityResult[currentProx>>1] = 0;
				}
				if(proximityResult[currentProx>>1] > 1024) {
    4754:	44 e0       	ldi	r20, 0x04	; 4
    4756:	81 30       	cpi	r24, 0x01	; 1
    4758:	94 07       	cpc	r25, r20
    475a:	24 f0       	brlt	.+8      	; 0x4764 <__vector_29+0x21e>
					proximityResult[currentProx>>1] = 1024;
    475c:	80 e0       	ldi	r24, 0x00	; 0
    475e:	94 e0       	ldi	r25, 0x04	; 4
    4760:	91 83       	std	Z+1, r25	; 0x01
    4762:	80 83       	st	Z, r24
				// 1) from 0 to PHASE1: y = x (where x = proximity value9
				// 2) from PHASE1 to PHASE2: y = x/2 + 30
				// 3) from PHASE2 to PHASE3: y = x/4 + 75
				// 4) from PHASE3 upwards: y = x/8 + 127.5
				// The linearized values are used for the obstacles avoidance.
				if(currentProx < 16) {	// only for proximity (not ground sensors)
    4764:	60 31       	cpi	r22, 0x10	; 16
    4766:	50 f4       	brcc	.+20     	; 0x477c <__vector_29+0x236>
					
					if(proximityResult[currentProx>>1] < PHASE1) {
    4768:	8c 33       	cpi	r24, 0x3C	; 60
    476a:	91 05       	cpc	r25, r1
    476c:	0c f0       	brlt	.+2      	; 0x4770 <__vector_29+0x22a>
    476e:	f5 c2       	rjmp	.+1514   	; 0x4d5a <__vector_29+0x814>

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];
    4770:	2f 52       	subi	r18, 0x2F	; 47
    4772:	3d 4f       	sbci	r19, 0xFD	; 253
    4774:	d9 01       	movw	r26, r18
    4776:	11 96       	adiw	r26, 0x01	; 1
    4778:	9c 93       	st	X, r25
    477a:	8e 93       	st	-X, r24
				}

				// the cliff avoidance behavior is inserted within this interrupt service routine in order to react
				// as fast as possible; the maximum speed usable with cliff avoidance is 30 in all kind of surface 
				// (apart from black ones) after calibration.
				if(cliffAvoidanceEnabled) {
    477c:	80 91 7d 04 	lds	r24, 0x047D
    4780:	88 23       	and	r24, r24
    4782:	09 f4       	brne	.+2      	; 0x4786 <__vector_29+0x240>
    4784:	12 c2       	rjmp	.+1060   	; 0x4baa <__vector_29+0x664>
					if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    4786:	80 91 79 02 	lds	r24, 0x0279
    478a:	90 91 7a 02 	lds	r25, 0x027A
    478e:	f1 e0       	ldi	r31, 0x01	; 1
    4790:	84 3a       	cpi	r24, 0xA4	; 164
    4792:	9f 07       	cpc	r25, r31
    4794:	cc f0       	brlt	.+50     	; 0x47c8 <__vector_29+0x282>
    4796:	80 91 7b 02 	lds	r24, 0x027B
    479a:	90 91 7c 02 	lds	r25, 0x027C
    479e:	21 e0       	ldi	r18, 0x01	; 1
    47a0:	84 3a       	cpi	r24, 0xA4	; 164
    47a2:	92 07       	cpc	r25, r18
    47a4:	8c f0       	brlt	.+34     	; 0x47c8 <__vector_29+0x282>
    47a6:	80 91 7d 02 	lds	r24, 0x027D
    47aa:	90 91 7e 02 	lds	r25, 0x027E
    47ae:	41 e0       	ldi	r20, 0x01	; 1
    47b0:	84 3a       	cpi	r24, 0xA4	; 164
    47b2:	94 07       	cpc	r25, r20
    47b4:	4c f0       	brlt	.+18     	; 0x47c8 <__vector_29+0x282>
    47b6:	80 91 7f 02 	lds	r24, 0x027F
    47ba:	90 91 80 02 	lds	r25, 0x0280
    47be:	a1 e0       	ldi	r26, 0x01	; 1
    47c0:	84 3a       	cpi	r24, 0xA4	; 164
    47c2:	9a 07       	cpc	r25, r26
    47c4:	0c f0       	brlt	.+2      	; 0x47c8 <__vector_29+0x282>
    47c6:	f1 c1       	rjmp	.+994    	; 0x4baa <__vector_29+0x664>
					//if(proximityResult[8]<(proximityOffset[8]>>1) || proximityResult[9]<(proximityOffset[9]>>1) || proximityResult[10]<(proximityOffset[10]>>1) || proximityResult[11]<(proximityOffset[11]>>1)) {
						cliffDetectedFlag = 1;
    47c8:	81 e0       	ldi	r24, 0x01	; 1
    47ca:	80 93 7e 04 	sts	0x047E, r24
						//LED_RED_ON;			
						// set resulting velocity to 0 and change the pwm registers directly to be able
						// to stop as fast as possible (the next pwm cycle)
						// left motor
						pwm_left = 0;
    47ce:	10 92 08 03 	sts	0x0308, r1
    47d2:	10 92 07 03 	sts	0x0307, r1
						OCR4A = 0;
    47d6:	10 92 a9 00 	sts	0x00A9, r1
    47da:	10 92 a8 00 	sts	0x00A8, r1
						OCR4B = 0;
    47de:	10 92 ab 00 	sts	0x00AB, r1
    47e2:	10 92 aa 00 	sts	0x00AA, r1
						// right motor
						pwm_right = 0;
    47e6:	10 92 06 03 	sts	0x0306, r1
    47ea:	10 92 05 03 	sts	0x0305, r1
						OCR3A = 0;
    47ee:	10 92 99 00 	sts	0x0099, r1
    47f2:	10 92 98 00 	sts	0x0098, r1
						OCR3B = 0;
    47f6:	10 92 9b 00 	sts	0x009B, r1
    47fa:	10 92 9a 00 	sts	0x009A, r1
				} else {
					cliffDetectedFlag = 0;
				}

			}			
			currentProx++;
    47fe:	6f 5f       	subi	r22, 0xFF	; 255
    4800:	60 93 34 02 	sts	0x0234, r22
			if(currentProx > 23) {						// in total there are 8 proximity sensors and 4 ground sensors => 12 sensors
    4804:	68 31       	cpi	r22, 0x18	; 24
    4806:	08 f4       	brcc	.+2      	; 0x480a <__vector_29+0x2c4>
    4808:	33 cf       	rjmp	.-410    	; 0x4670 <__vector_29+0x12a>
				currentProx = 0;						// for each one there is a passive phase in which the ambient light is sampled,
    480a:	10 92 34 02 	sts	0x0234, r1
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
    480e:	81 e0       	ldi	r24, 0x01	; 1
    4810:	80 93 d0 02 	sts	0x02D0, r24
    4814:	2d cf       	rjmp	.-422    	; 0x4670 <__vector_29+0x12a>
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    4816:	26 30       	cpi	r18, 0x06	; 6
    4818:	09 f0       	breq	.+2      	; 0x481c <__vector_29+0x2d6>
    481a:	2a cf       	rjmp	.-428    	; 0x4670 <__vector_29+0x12a>
		case SAVE_TO_PROX_IRCOMM:
			irCommProxValuesAdc[currentProx+irCommRxWindowSamples*8] = value;
    481c:	20 91 0a 05 	lds	r18, 0x050A
    4820:	30 e0       	ldi	r19, 0x00	; 0
    4822:	40 91 34 02 	lds	r20, 0x0234
    4826:	22 0f       	add	r18, r18
    4828:	33 1f       	adc	r19, r19
    482a:	22 0f       	add	r18, r18
    482c:	33 1f       	adc	r19, r19
    482e:	22 0f       	add	r18, r18
    4830:	33 1f       	adc	r19, r19
    4832:	24 0f       	add	r18, r20
    4834:	31 1d       	adc	r19, r1
    4836:	22 0f       	add	r18, r18
    4838:	33 1f       	adc	r19, r19
    483a:	e0 91 71 08 	lds	r30, 0x0871
    483e:	f0 91 72 08 	lds	r31, 0x0872
    4842:	e2 0f       	add	r30, r18
    4844:	f3 1f       	adc	r31, r19
    4846:	91 83       	std	Z+1, r25	; 0x01
    4848:	80 83       	st	Z, r24
			// get the min and max values in the sampling window for all the sensors
			if(irCommMaxSensorValueAdc[currentProx] < value) {
    484a:	60 91 34 02 	lds	r22, 0x0234
    484e:	26 2f       	mov	r18, r22
    4850:	30 e0       	ldi	r19, 0x00	; 0
    4852:	22 0f       	add	r18, r18
    4854:	33 1f       	adc	r19, r19
    4856:	e0 91 3f 0b 	lds	r30, 0x0B3F
    485a:	f0 91 40 0b 	lds	r31, 0x0B40
    485e:	e2 0f       	add	r30, r18
    4860:	f3 1f       	adc	r31, r19
    4862:	40 81       	ld	r20, Z
    4864:	51 81       	ldd	r21, Z+1	; 0x01
    4866:	48 17       	cp	r20, r24
    4868:	59 07       	cpc	r21, r25
    486a:	40 f4       	brcc	.+16     	; 0x487c <__vector_29+0x336>
				irCommMaxSensorValueAdc[currentProx] = value;
    486c:	91 83       	std	Z+1, r25	; 0x01
    486e:	80 83       	st	Z, r24
    4870:	60 91 34 02 	lds	r22, 0x0234
    4874:	26 2f       	mov	r18, r22
    4876:	30 e0       	ldi	r19, 0x00	; 0
    4878:	22 0f       	add	r18, r18
    487a:	33 1f       	adc	r19, r19
			}
			if(irCommMinSensorValueAdc[currentProx] > value) {
    487c:	e0 91 cf 05 	lds	r30, 0x05CF
    4880:	f0 91 d0 05 	lds	r31, 0x05D0
    4884:	e2 0f       	add	r30, r18
    4886:	f3 1f       	adc	r31, r19
    4888:	20 81       	ld	r18, Z
    488a:	31 81       	ldd	r19, Z+1	; 0x01
    488c:	82 17       	cp	r24, r18
    488e:	93 07       	cpc	r25, r19
    4890:	20 f4       	brcc	.+8      	; 0x489a <__vector_29+0x354>
				irCommMinSensorValueAdc[currentProx] = value;
    4892:	91 83       	std	Z+1, r25	; 0x01
    4894:	80 83       	st	Z, r24
    4896:	60 91 34 02 	lds	r22, 0x0234
			}
			currentProx++;
    489a:	6f 5f       	subi	r22, 0xFF	; 255
    489c:	60 93 34 02 	sts	0x0234, r22
			break;
    48a0:	e7 ce       	rjmp	.-562    	; 0x4670 <__vector_29+0x12a>
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
		ADCSRB &= ~(1 << MUX5);
		ADMUX = 0x40 + currentAdChannel;
	} else {						// MUX5=1 + ADMUX=0..7 => adc channel=8..15
		ADCSRB |= (1 << MUX5);
    48a2:	90 91 7b 00 	lds	r25, 0x007B
    48a6:	98 60       	ori	r25, 0x08	; 8
    48a8:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + (currentAdChannel-8);
    48ac:	90 91 33 02 	lds	r25, 0x0233
    48b0:	98 5c       	subi	r25, 0xC8	; 200
    48b2:	90 93 7c 00 	sts	0x007C, r25
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if((adcSamplingState==2) && (irCommMode==IRCOMM_MODE_SENSORS_SAMPLING)) {
    48b6:	82 30       	cpi	r24, 0x02	; 2
    48b8:	09 f0       	breq	.+2      	; 0x48bc <__vector_29+0x376>
    48ba:	b5 ce       	rjmp	.-662    	; 0x4626 <__vector_29+0xe0>
    48bc:	80 91 dc 04 	lds	r24, 0x04DC
    48c0:	88 23       	and	r24, r24
    48c2:	09 f0       	breq	.+2      	; 0x48c6 <__vector_29+0x380>
    48c4:	b0 ce       	rjmp	.-672    	; 0x4626 <__vector_29+0xe0>

		if(hardwareRevision == HW_REV_3_0) {
    48c6:	20 91 5f 04 	lds	r18, 0x045F
    48ca:	22 23       	and	r18, r18
    48cc:	39 f4       	brne	.+14     	; 0x48dc <__vector_29+0x396>
			PORTJ &= 0xF0;
    48ce:	80 91 05 01 	lds	r24, 0x0105
    48d2:	80 7f       	andi	r24, 0xF0	; 240
    48d4:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    48d8:	12 b8       	out	0x02, r1	; 2
    48da:	a5 ce       	rjmp	.-694    	; 0x4626 <__vector_29+0xe0>
			//#warning "turn off pulse with 0 (hw rev 3.0)"
		}

		if(hardwareRevision == HW_REV_3_0_1) {
    48dc:	21 30       	cpi	r18, 0x01	; 1
    48de:	19 f0       	breq	.+6      	; 0x48e6 <__vector_29+0x3a0>
			PORTJ = 0xFF;
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0.1)"
		}

		if(hardwareRevision == HW_REV_3_1) {
    48e0:	22 30       	cpi	r18, 0x02	; 2
    48e2:	09 f0       	breq	.+2      	; 0x48e6 <__vector_29+0x3a0>
    48e4:	a0 ce       	rjmp	.-704    	; 0x4626 <__vector_29+0xe0>
			PORTJ = 0xFF;
    48e6:	8f ef       	ldi	r24, 0xFF	; 255
    48e8:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    48ec:	12 b8       	out	0x02, r1	; 2
    48ee:	9b ce       	rjmp	.-714    	; 0x4626 <__vector_29+0xe0>
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
    48f0:	90 91 09 05 	lds	r25, 0x0509
    48f4:	96 30       	cpi	r25, 0x06	; 6
    48f6:	09 f4       	brne	.+2      	; 0x48fa <__vector_29+0x3b4>
    48f8:	43 c2       	rjmp	.+1158   	; 0x4d80 <__vector_29+0x83a>
    48fa:	97 30       	cpi	r25, 0x07	; 7
    48fc:	08 f0       	brcs	.+2      	; 0x4900 <__vector_29+0x3ba>
    48fe:	ce c0       	rjmp	.+412    	; 0x4a9c <__vector_29+0x556>
    4900:	92 30       	cpi	r25, 0x02	; 2
    4902:	09 f4       	brne	.+2      	; 0x4906 <__vector_29+0x3c0>
    4904:	a9 c2       	rjmp	.+1362   	; 0x4e58 <__vector_29+0x912>
    4906:	93 30       	cpi	r25, 0x03	; 3
    4908:	08 f4       	brcc	.+2      	; 0x490c <__vector_29+0x3c6>
    490a:	6e c1       	rjmp	.+732    	; 0x4be8 <__vector_29+0x6a2>
    490c:	94 30       	cpi	r25, 0x04	; 4
    490e:	09 f4       	brne	.+2      	; 0x4912 <__vector_29+0x3cc>
    4910:	d0 c2       	rjmp	.+1440   	; 0x4eb2 <__vector_29+0x96c>
    4912:	95 30       	cpi	r25, 0x05	; 5
    4914:	08 f4       	brcc	.+2      	; 0x4918 <__vector_29+0x3d2>
    4916:	bf c2       	rjmp	.+1406   	; 0x4e96 <__vector_29+0x950>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 5;
				break;

			case 5:
				currentAdChannel = currentProx+1;
    4918:	80 91 34 02 	lds	r24, 0x0234
    491c:	8f 5f       	subi	r24, 0xFF	; 255
    491e:	80 93 33 02 	sts	0x0233, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    4922:	86 e0       	ldi	r24, 0x06	; 6
    4924:	80 93 c9 02 	sts	0x02C9, r24
				irCommAdcRxState = 6;
    4928:	80 93 09 05 	sts	0x0509, r24
    492c:	80 91 ca 02 	lds	r24, 0x02CA
				break;
    4930:	68 ce       	rjmp	.-816    	; 0x4602 <__vector_29+0xbc>
			right_current_avg += value;
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
			break;

		case SAVE_TO_RIGHT_MOTOR_VEL:
			if(firstSampleRight > 0) {
    4932:	20 91 09 02 	lds	r18, 0x0209
    4936:	22 23       	and	r18, r18
    4938:	09 f4       	brne	.+2      	; 0x493c <__vector_29+0x3f6>
    493a:	9a ce       	rjmp	.-716    	; 0x4670 <__vector_29+0x12a>
			    // sometimes it was noticed that the velocity is sampled even if the pwm
			    // is in its active phase; as a workaround simply skip the samples in these
			    // cases
				if(((PINE & _BV(PE3))>>3) || ((PINE & _BV(PE4))>>4)) {  // if active phase for either forward or backward direction
    493c:	63 99       	sbic	0x0c, 3	; 12
    493e:	98 ce       	rjmp	.-720    	; 0x4670 <__vector_29+0x12a>
    4940:	64 99       	sbic	0x0c, 4	; 12
    4942:	96 ce       	rjmp	.-724    	; 0x4670 <__vector_29+0x12a>
					//LED_RED_ON;
					break;
				}
				firstSampleRight++;
    4944:	42 2f       	mov	r20, r18
    4946:	4f 5f       	subi	r20, 0xFF	; 255
    4948:	40 93 09 02 	sts	0x0209, r20
				if(firstSampleRight > 4) {				// to skip undesired samples (3 samples skipped) in which there could be glitches
    494c:	45 30       	cpi	r20, 0x05	; 5
    494e:	08 f4       	brcc	.+2      	; 0x4952 <__vector_29+0x40c>
    4950:	8f ce       	rjmp	.-738    	; 0x4670 <__vector_29+0x12a>
					if(pwm_right != 0) {
    4952:	20 91 05 03 	lds	r18, 0x0305
    4956:	30 91 06 03 	lds	r19, 0x0306
    495a:	21 15       	cp	r18, r1
    495c:	31 05       	cpc	r19, r1
    495e:	51 f0       	breq	.+20     	; 0x4974 <__vector_29+0x42e>
						right_vel_sum += value;
    4960:	20 91 ff 02 	lds	r18, 0x02FF
    4964:	30 91 00 03 	lds	r19, 0x0300
    4968:	28 0f       	add	r18, r24
    496a:	39 1f       	adc	r19, r25
    496c:	30 93 00 03 	sts	0x0300, r19
    4970:	20 93 ff 02 	sts	0x02FF, r18
					}
					if(firstSampleRight==8) {			// number of samples to take for the speed computation (average of 4 samples)
    4974:	48 30       	cpi	r20, 0x08	; 8
    4976:	09 f0       	breq	.+2      	; 0x497a <__vector_29+0x434>
    4978:	7b ce       	rjmp	.-778    	; 0x4670 <__vector_29+0x12a>
						firstSampleRight = 0;
    497a:	10 92 09 02 	sts	0x0209, r1
						compute_right_vel = 1;
    497e:	81 e0       	ldi	r24, 0x01	; 1
    4980:	80 93 08 02 	sts	0x0208, r24
    4984:	75 ce       	rjmp	.-790    	; 0x4670 <__vector_29+0x12a>
			left_current_avg += value;
			left_current_avg = left_current_avg >> 1;
			break;

		case SAVE_TO_LEFT_MOTOR_VEL:
			if(firstSampleLeft > 0) {
    4986:	20 91 0a 02 	lds	r18, 0x020A
    498a:	22 23       	and	r18, r18
    498c:	09 f4       	brne	.+2      	; 0x4990 <__vector_29+0x44a>
    498e:	70 ce       	rjmp	.-800    	; 0x4670 <__vector_29+0x12a>
				if(((PINH & _BV(PH3))>>3) || ((PINH & _BV(PH4))>>4)) {
    4990:	30 91 00 01 	lds	r19, 0x0100
    4994:	33 fd       	sbrc	r19, 3
    4996:	6c ce       	rjmp	.-808    	; 0x4670 <__vector_29+0x12a>
    4998:	30 91 00 01 	lds	r19, 0x0100
    499c:	34 fd       	sbrc	r19, 4
    499e:	68 ce       	rjmp	.-816    	; 0x4670 <__vector_29+0x12a>
					//LED_RED_ON;
					break;
				}
				firstSampleLeft++;
    49a0:	42 2f       	mov	r20, r18
    49a2:	4f 5f       	subi	r20, 0xFF	; 255
    49a4:	40 93 0a 02 	sts	0x020A, r20
				if(firstSampleLeft > 4) {
    49a8:	45 30       	cpi	r20, 0x05	; 5
    49aa:	08 f4       	brcc	.+2      	; 0x49ae <__vector_29+0x468>
    49ac:	61 ce       	rjmp	.-830    	; 0x4670 <__vector_29+0x12a>
					if(pwm_left != 0) {
    49ae:	20 91 07 03 	lds	r18, 0x0307
    49b2:	30 91 08 03 	lds	r19, 0x0308
    49b6:	21 15       	cp	r18, r1
    49b8:	31 05       	cpc	r19, r1
    49ba:	51 f0       	breq	.+20     	; 0x49d0 <__vector_29+0x48a>
						left_vel_sum += value;
    49bc:	20 91 fd 02 	lds	r18, 0x02FD
    49c0:	30 91 fe 02 	lds	r19, 0x02FE
    49c4:	28 0f       	add	r18, r24
    49c6:	39 1f       	adc	r19, r25
    49c8:	30 93 fe 02 	sts	0x02FE, r19
    49cc:	20 93 fd 02 	sts	0x02FD, r18
					}
					if(firstSampleLeft==8) {
    49d0:	48 30       	cpi	r20, 0x08	; 8
    49d2:	09 f0       	breq	.+2      	; 0x49d6 <__vector_29+0x490>
    49d4:	4d ce       	rjmp	.-870    	; 0x4670 <__vector_29+0x12a>
						firstSampleLeft = 0;
    49d6:	10 92 0a 02 	sts	0x020A, r1
						compute_left_vel = 1;
    49da:	81 e0       	ldi	r24, 0x01	; 1
    49dc:	80 93 07 02 	sts	0x0207, r24
    49e0:	47 ce       	rjmp	.-882    	; 0x4670 <__vector_29+0x12a>
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
		switch(irCommAdcTxState) {
    49e2:	83 30       	cpi	r24, 0x03	; 3
    49e4:	09 f4       	brne	.+2      	; 0x49e8 <__vector_29+0x4a2>
    49e6:	7c c0       	rjmp	.+248    	; 0x4ae0 <__vector_29+0x59a>
    49e8:	84 30       	cpi	r24, 0x04	; 4
    49ea:	09 f0       	breq	.+2      	; 0x49ee <__vector_29+0x4a8>
    49ec:	08 ce       	rjmp	.-1008   	; 0x45fe <__vector_29+0xb8>
				}
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ2;
				break;

			case IRCOMM_TX_ADC_TRANSMISSION_SEQ2:
				irCommTxDurationCycle++;
    49ee:	20 91 3a 05 	lds	r18, 0x053A
    49f2:	2f 5f       	subi	r18, 0xFF	; 255
    49f4:	20 93 3a 05 	sts	0x053A, r18
				if(irCommTxDurationCycle == irCommTxDuration) {
    49f8:	30 e0       	ldi	r19, 0x00	; 0
    49fa:	80 91 36 05 	lds	r24, 0x0536
    49fe:	90 91 37 05 	lds	r25, 0x0537
    4a02:	28 17       	cp	r18, r24
    4a04:	39 07       	cpc	r19, r25
    4a06:	09 f4       	brne	.+2      	; 0x4a0a <__vector_29+0x4c4>
    4a08:	08 c1       	rjmp	.+528    	; 0x4c1a <__vector_29+0x6d4>
						irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;
						adcSaveDataTo = SKIP_SAMPLE;
						break;
					}
				}
				currentAdChannel = currentMotLeftChannel;
    4a0a:	80 91 35 02 	lds	r24, 0x0235
    4a0e:	80 93 33 02 	sts	0x0233, r24
				leftChannelPhase = leftMotorPhase;
    4a12:	80 91 38 02 	lds	r24, 0x0238
    4a16:	80 93 cc 02 	sts	0x02CC, r24
				if(rightChannelPhase == ACTIVE_PHASE) {
    4a1a:	80 91 cb 02 	lds	r24, 0x02CB
    4a1e:	88 23       	and	r24, r24
    4a20:	09 f4       	brne	.+2      	; 0x4a24 <__vector_29+0x4de>
    4a22:	cf c0       	rjmp	.+414    	; 0x4bc2 <__vector_29+0x67c>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    4a24:	81 30       	cpi	r24, 0x01	; 1
    4a26:	09 f4       	brne	.+2      	; 0x4a2a <__vector_29+0x4e4>
    4a28:	b5 c2       	rjmp	.+1386   	; 0x4f94 <__vector_29+0xa4e>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4a2a:	85 e0       	ldi	r24, 0x05	; 5
    4a2c:	80 93 c9 02 	sts	0x02C9, r24
				}
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ1;
    4a30:	83 e0       	ldi	r24, 0x03	; 3
    4a32:	80 93 2c 05 	sts	0x052C, r24
    4a36:	80 91 ca 02 	lds	r24, 0x02CA
				break;
    4a3a:	e3 cd       	rjmp	.-1082   	; 0x4602 <__vector_29+0xbc>
				adcSaveDataTo = SKIP_SAMPLE;
				break;

		}
	} else if(irCommMode==IRCOMM_MODE_SENSORS_SAMPLING) {
		switch(adcSamplingState) {
    4a3c:	83 30       	cpi	r24, 0x03	; 3
    4a3e:	09 f4       	brne	.+2      	; 0x4a42 <__vector_29+0x4fc>
    4a40:	37 c1       	rjmp	.+622    	; 0x4cb0 <__vector_29+0x76a>
    4a42:	84 30       	cpi	r24, 0x04	; 4
    4a44:	09 f0       	breq	.+2      	; 0x4a48 <__vector_29+0x502>
    4a46:	dd cd       	rjmp	.-1094   	; 0x4602 <__vector_29+0xbc>
				}
				adcSamplingState = 4;
				break;

			case 4:	// right motor
				currentAdChannel = currentMotRightChannel;
    4a48:	90 91 36 02 	lds	r25, 0x0236
    4a4c:	90 93 33 02 	sts	0x0233, r25
				rightChannelPhase = rightMotorPhase;
    4a50:	90 91 37 02 	lds	r25, 0x0237
    4a54:	90 93 cb 02 	sts	0x02CB, r25
				if(leftChannelPhase == ACTIVE_PHASE) {
    4a58:	90 91 cc 02 	lds	r25, 0x02CC
    4a5c:	99 23       	and	r25, r25
    4a5e:	09 f0       	breq	.+2      	; 0x4a62 <__vector_29+0x51c>
    4a60:	6a c1       	rjmp	.+724    	; 0x4d36 <__vector_29+0x7f0>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    4a62:	83 e0       	ldi	r24, 0x03	; 3
    4a64:	80 93 c9 02 	sts	0x02C9, r24
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 0;
    4a68:	10 92 ca 02 	sts	0x02CA, r1

				if(currentProx==14 && measBattery==1) {
    4a6c:	60 91 34 02 	lds	r22, 0x0234
    4a70:	6e 30       	cpi	r22, 0x0E	; 14
    4a72:	09 f4       	brne	.+2      	; 0x4a76 <__vector_29+0x530>
    4a74:	2c c2       	rjmp	.+1112   	; 0x4ece <__vector_29+0x988>
					measBattery=2;
					SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
				}

				// turn on the IR pulses for the proximities only in their active phases
				if(currentProx & 0x01) {
    4a76:	86 2f       	mov	r24, r22
    4a78:	90 e0       	ldi	r25, 0x00	; 0
    4a7a:	60 ff       	sbrs	r22, 0
    4a7c:	c0 cd       	rjmp	.-1152   	; 0x45fe <__vector_29+0xb8>
					if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
    4a7e:	60 31       	cpi	r22, 0x10	; 16
    4a80:	08 f0       	brcs	.+2      	; 0x4a84 <__vector_29+0x53e>
    4a82:	33 c2       	rjmp	.+1126   	; 0x4eea <__vector_29+0x9a4>
											// PORTA for proximity sensors, PORTJ for ground sensors
						PORTA = (1 << (currentProx>>1));	// pulse on
    4a84:	66 95       	lsr	r22
    4a86:	81 e0       	ldi	r24, 0x01	; 1
    4a88:	90 e0       	ldi	r25, 0x00	; 0
    4a8a:	02 c0       	rjmp	.+4      	; 0x4a90 <__vector_29+0x54a>
    4a8c:	88 0f       	add	r24, r24
    4a8e:	99 1f       	adc	r25, r25
    4a90:	6a 95       	dec	r22
    4a92:	e2 f7       	brpl	.-8      	; 0x4a8c <__vector_29+0x546>
    4a94:	82 b9       	out	0x02, r24	; 2
    4a96:	80 91 ca 02 	lds	r24, 0x02CA
    4a9a:	b3 cd       	rjmp	.-1178   	; 0x4602 <__vector_29+0xbc>
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
    4a9c:	99 30       	cpi	r25, 0x09	; 9
    4a9e:	09 f4       	brne	.+2      	; 0x4aa2 <__vector_29+0x55c>
    4aa0:	c3 c1       	rjmp	.+902    	; 0x4e28 <__vector_29+0x8e2>
    4aa2:	9a 30       	cpi	r25, 0x0A	; 10
    4aa4:	08 f0       	brcs	.+2      	; 0x4aa8 <__vector_29+0x562>
    4aa6:	91 c0       	rjmp	.+290    	; 0x4bca <__vector_29+0x684>
    4aa8:	97 30       	cpi	r25, 0x07	; 7
    4aaa:	09 f4       	brne	.+2      	; 0x4aae <__vector_29+0x568>
    4aac:	e3 c1       	rjmp	.+966    	; 0x4e74 <__vector_29+0x92e>
    4aae:	98 30       	cpi	r25, 0x08	; 8
    4ab0:	09 f0       	breq	.+2      	; 0x4ab4 <__vector_29+0x56e>
    4ab2:	a5 cd       	rjmp	.-1206   	; 0x45fe <__vector_29+0xb8>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 8;
				break;

			case 8:
				currentAdChannel = currentMotRightChannel;
    4ab4:	80 91 36 02 	lds	r24, 0x0236
    4ab8:	80 93 33 02 	sts	0x0233, r24
				rightChannelPhase = rightMotorPhase;
    4abc:	80 91 37 02 	lds	r24, 0x0237
    4ac0:	80 93 cb 02 	sts	0x02CB, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    4ac4:	80 91 cc 02 	lds	r24, 0x02CC
    4ac8:	88 23       	and	r24, r24
    4aca:	09 f0       	breq	.+2      	; 0x4ace <__vector_29+0x588>
    4acc:	67 c2       	rjmp	.+1230   	; 0x4f9c <__vector_29+0xa56>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    4ace:	83 e0       	ldi	r24, 0x03	; 3
    4ad0:	80 93 c9 02 	sts	0x02C9, r24
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				irCommAdcRxState = 9;
    4ad4:	89 e0       	ldi	r24, 0x09	; 9
    4ad6:	80 93 09 05 	sts	0x0509, r24
    4ada:	80 91 ca 02 	lds	r24, 0x02CA
				break;
    4ade:	91 cd       	rjmp	.-1246   	; 0x4602 <__vector_29+0xbc>

			case IRCOMM_TX_ADC_WAIT_PREPARATION:
				break;

			case IRCOMM_TX_ADC_TRANSMISSION_SEQ1:
				irCommTxDurationCycle++;
    4ae0:	20 91 3a 05 	lds	r18, 0x053A
    4ae4:	2f 5f       	subi	r18, 0xFF	; 255
    4ae6:	20 93 3a 05 	sts	0x053A, r18
				if(irCommTxDurationCycle == irCommTxDuration) {
    4aea:	30 e0       	ldi	r19, 0x00	; 0
    4aec:	80 91 36 05 	lds	r24, 0x0536
    4af0:	90 91 37 05 	lds	r25, 0x0537
    4af4:	28 17       	cp	r18, r24
    4af6:	39 07       	cpc	r19, r25
    4af8:	09 f4       	brne	.+2      	; 0x4afc <__vector_29+0x5b6>
    4afa:	be c0       	rjmp	.+380    	; 0x4c78 <__vector_29+0x732>
						irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;						
						adcSaveDataTo = SKIP_SAMPLE;
						break;
					}
				}	
				currentAdChannel = currentMotRightChannel;
    4afc:	80 91 36 02 	lds	r24, 0x0236
    4b00:	80 93 33 02 	sts	0x0233, r24
				rightChannelPhase = rightMotorPhase;
    4b04:	80 91 37 02 	lds	r24, 0x0237
    4b08:	80 93 cb 02 	sts	0x02CB, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    4b0c:	80 91 cc 02 	lds	r24, 0x02CC
    4b10:	88 23       	and	r24, r24
    4b12:	09 f4       	brne	.+2      	; 0x4b16 <__vector_29+0x5d0>
    4b14:	52 c0       	rjmp	.+164    	; 0x4bba <__vector_29+0x674>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    4b16:	81 30       	cpi	r24, 0x01	; 1
    4b18:	09 f4       	brne	.+2      	; 0x4b1c <__vector_29+0x5d6>
    4b1a:	38 c2       	rjmp	.+1136   	; 0x4f8c <__vector_29+0xa46>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4b1c:	85 e0       	ldi	r24, 0x05	; 5
    4b1e:	80 93 c9 02 	sts	0x02C9, r24
				}
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ2;
    4b22:	84 e0       	ldi	r24, 0x04	; 4
    4b24:	80 93 2c 05 	sts	0x052C, r24
    4b28:	80 91 ca 02 	lds	r24, 0x02CA
				break;
    4b2c:	6a cd       	rjmp	.-1324   	; 0x4602 <__vector_29+0xbc>
	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
		switch(irCommAdcTxState) {
			case IRCOMM_TX_ADC_TURN_OFF_SENSORS:
				// turn off all proximity
				if(hardwareRevision == HW_REV_3_0) {
    4b2e:	20 91 5f 04 	lds	r18, 0x045F
    4b32:	22 23       	and	r18, r18
    4b34:	01 f5       	brne	.+64     	; 0x4b76 <__vector_29+0x630>
					PORTJ &= 0xF0;	// ground
    4b36:	80 91 05 01 	lds	r24, 0x0105
    4b3a:	80 7f       	andi	r24, 0xF0	; 240
    4b3c:	80 93 05 01 	sts	0x0105, r24
					PORTA = 0x00;	// proximity
    4b40:	12 b8       	out	0x02, r1	; 2

				if(hardwareRevision == HW_REV_3_1) {
					PORTJ = 0xFF;	// ground
					PORTA = 0x00;	// proximtiy
				}
				currentAdChannel = currentMotLeftChannel;
    4b42:	80 91 35 02 	lds	r24, 0x0235
    4b46:	80 93 33 02 	sts	0x0233, r24
				leftChannelPhase = leftMotorPhase;
    4b4a:	80 91 38 02 	lds	r24, 0x0238
    4b4e:	80 93 cc 02 	sts	0x02CC, r24
				adcSaveDataTo = SKIP_SAMPLE;				
    4b52:	85 e0       	ldi	r24, 0x05	; 5
    4b54:	80 93 c9 02 	sts	0x02C9, r24
				irCommState = IRCOMM_TX_PREPARE_TRANSMISSION;
    4b58:	80 93 dd 04 	sts	0x04DD, r24
				irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;
    4b5c:	82 e0       	ldi	r24, 0x02	; 2
    4b5e:	80 93 2c 05 	sts	0x052C, r24
				if(irCommTxSensorGroup==0) {
    4b62:	80 91 3c 05 	lds	r24, 0x053C
    4b66:	88 23       	and	r24, r24
    4b68:	19 f5       	brne	.+70     	; 0x4bb0 <__vector_29+0x66a>
					irCommTxSensorGroup = 1;
    4b6a:	81 e0       	ldi	r24, 0x01	; 1
    4b6c:	80 93 3c 05 	sts	0x053C, r24
    4b70:	80 91 ca 02 	lds	r24, 0x02CA
    4b74:	46 cd       	rjmp	.-1396   	; 0x4602 <__vector_29+0xbc>
				if(hardwareRevision == HW_REV_3_0) {
					PORTJ &= 0xF0;	// ground
					PORTA = 0x00;	// proximity
				}

				if(hardwareRevision == HW_REV_3_0_1) {
    4b76:	21 30       	cpi	r18, 0x01	; 1
    4b78:	11 f0       	breq	.+4      	; 0x4b7e <__vector_29+0x638>
					PORTJ = 0xFF;	// ground
					PORTA = 0x00;	// proximity
				}

				if(hardwareRevision == HW_REV_3_1) {
    4b7a:	22 30       	cpi	r18, 0x02	; 2
    4b7c:	11 f7       	brne	.-60     	; 0x4b42 <__vector_29+0x5fc>
					PORTJ = 0xFF;	// ground
    4b7e:	8f ef       	ldi	r24, 0xFF	; 255
    4b80:	80 93 05 01 	sts	0x0105, r24
					PORTA = 0x00;	// proximtiy
    4b84:	12 b8       	out	0x02, r1	; 2
    4b86:	dd cf       	rjmp	.-70     	; 0x4b42 <__vector_29+0x5fc>
		}
	} else if(irCommMode==IRCOMM_MODE_SENSORS_SAMPLING) {
		switch(adcSamplingState) {

			case 0:	// proximity
				currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
    4b88:	80 91 34 02 	lds	r24, 0x0234
    4b8c:	86 95       	lsr	r24
    4b8e:	80 93 33 02 	sts	0x0233, r24
																// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
				if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
    4b92:	80 91 cb 02 	lds	r24, 0x02CB
    4b96:	88 23       	and	r24, r24
    4b98:	09 f0       	breq	.+2      	; 0x4b9c <__vector_29+0x656>
    4b9a:	bf c0       	rjmp	.+382    	; 0x4d1a <__vector_29+0x7d4>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    4b9c:	81 e0       	ldi	r24, 0x01	; 1
    4b9e:	80 93 c9 02 	sts	0x02C9, r24
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 1;
    4ba2:	81 e0       	ldi	r24, 0x01	; 1
    4ba4:	80 93 ca 02 	sts	0x02CA, r24
				break;
    4ba8:	2c cd       	rjmp	.-1448   	; 0x4602 <__vector_29+0xbc>
					} else {
						cliffDetectedFlag = 0;
						//LED_RED_OFF;
					}
				} else {
					cliffDetectedFlag = 0;
    4baa:	10 92 7e 04 	sts	0x047E, r1
    4bae:	27 ce       	rjmp	.-946    	; 0x47fe <__vector_29+0x2b8>
				irCommState = IRCOMM_TX_PREPARE_TRANSMISSION;
				irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;
				if(irCommTxSensorGroup==0) {
					irCommTxSensorGroup = 1;
				} else {
					irCommTxSensorGroup = 0;
    4bb0:	10 92 3c 05 	sts	0x053C, r1
    4bb4:	80 91 ca 02 	lds	r24, 0x02CA
    4bb8:	24 cd       	rjmp	.-1464   	; 0x4602 <__vector_29+0xbc>
					}
				}	
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    4bba:	83 e0       	ldi	r24, 0x03	; 3
    4bbc:	80 93 c9 02 	sts	0x02C9, r24
    4bc0:	b0 cf       	rjmp	.-160    	; 0x4b22 <__vector_29+0x5dc>
					}
				}
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    4bc2:	81 e0       	ldi	r24, 0x01	; 1
    4bc4:	80 93 c9 02 	sts	0x02C9, r24
    4bc8:	33 cf       	rjmp	.-410    	; 0x4a30 <__vector_29+0x4ea>
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
    4bca:	9b 30       	cpi	r25, 0x0B	; 11
    4bcc:	09 f4       	brne	.+2      	; 0x4bd0 <__vector_29+0x68a>
    4bce:	0f c1       	rjmp	.+542    	; 0x4dee <__vector_29+0x8a8>
    4bd0:	9b 30       	cpi	r25, 0x0B	; 11
    4bd2:	08 f4       	brcc	.+2      	; 0x4bd6 <__vector_29+0x690>
    4bd4:	e2 c0       	rjmp	.+452    	; 0x4d9a <__vector_29+0x854>
    4bd6:	9c 30       	cpi	r25, 0x0C	; 12
    4bd8:	09 f0       	breq	.+2      	; 0x4bdc <__vector_29+0x696>
    4bda:	11 cd       	rjmp	.-1502   	; 0x45fe <__vector_29+0xb8>
				}
				irCommAdcRxState = 0;
				break;

			case 12:
				adcSaveDataTo = SKIP_SAMPLE;
    4bdc:	85 e0       	ldi	r24, 0x05	; 5
    4bde:	80 93 c9 02 	sts	0x02C9, r24
    4be2:	80 91 ca 02 	lds	r24, 0x02CA
				break;
    4be6:	0d cd       	rjmp	.-1510   	; 0x4602 <__vector_29+0xbc>
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
    4be8:	99 23       	and	r25, r25
    4bea:	09 f4       	brne	.+2      	; 0x4bee <__vector_29+0x6a8>
    4bec:	11 c1       	rjmp	.+546    	; 0x4e10 <__vector_29+0x8ca>
    4bee:	91 30       	cpi	r25, 0x01	; 1
    4bf0:	09 f0       	breq	.+2      	; 0x4bf4 <__vector_29+0x6ae>
    4bf2:	05 cd       	rjmp	.-1526   	; 0x45fe <__vector_29+0xb8>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 1;
				break;

			case 1:
				currentAdChannel = currentProx+1;
    4bf4:	80 91 34 02 	lds	r24, 0x0234
    4bf8:	8f 5f       	subi	r24, 0xFF	; 255
    4bfa:	80 93 33 02 	sts	0x0233, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    4bfe:	86 e0       	ldi	r24, 0x06	; 6
    4c00:	80 93 c9 02 	sts	0x02C9, r24
				irCommAdcRxState = 2;
    4c04:	82 e0       	ldi	r24, 0x02	; 2
    4c06:	80 93 09 05 	sts	0x0509, r24
    4c0a:	80 91 ca 02 	lds	r24, 0x02CA
				break;
    4c0e:	f9 cc       	rjmp	.-1550   	; 0x4602 <__vector_29+0xbc>
					irCommMode = IRCOMM_MODE_RECEIVE;					
				}
				if(irCommEnabled==IRCOMM_MODE_TRANSMIT && currentProx==23) {
					irCommMode = IRCOMM_MODE_TRANSMIT;
					if(irCommTxByteEnqueued==1) {
						irCommAdcTxState = IRCOMM_TX_ADC_TURN_OFF_SENSORS;
    4c10:	80 93 2c 05 	sts	0x052C, r24
    4c14:	80 91 ca 02 	lds	r24, 0x02CA
    4c18:	f4 cc       	rjmp	.-1560   	; 0x4602 <__vector_29+0xbc>
				break;

			case IRCOMM_TX_ADC_TRANSMISSION_SEQ2:
				irCommTxDurationCycle++;
				if(irCommTxDurationCycle == irCommTxDuration) {
					irCommTxDurationCycle = 0;
    4c1a:	10 92 3a 05 	sts	0x053A, r1
					if(irCommTxPulseState == 0) {
    4c1e:	80 91 35 05 	lds	r24, 0x0535
    4c22:	88 23       	and	r24, r24
    4c24:	09 f0       	breq	.+2      	; 0x4c28 <__vector_29+0x6e2>
    4c26:	a7 c1       	rjmp	.+846    	; 0x4f76 <__vector_29+0xa30>
						irCommTxPulseState = 1;
    4c28:	81 e0       	ldi	r24, 0x01	; 1
    4c2a:	80 93 35 05 	sts	0x0535, r24
						//PORTA = 0xFF;
						//PORTA = 0x01;
						//PORTA = irCommTxSensorMask;
						if(irCommTxSensorGroup==0) {
    4c2e:	80 91 3c 05 	lds	r24, 0x053C
    4c32:	88 23       	and	r24, r24
    4c34:	09 f0       	breq	.+2      	; 0x4c38 <__vector_29+0x6f2>
    4c36:	e2 c1       	rjmp	.+964    	; 0x4ffc <__vector_29+0xab6>
							PORTA = 0xAA;
    4c38:	8a ea       	ldi	r24, 0xAA	; 170
    4c3a:	82 b9       	out	0x02, r24	; 2
						}
					} else {
						irCommTxPulseState = 0;
						PORTA = 0x00;
					}
					irCommTxSwitchCounter++;
    4c3c:	80 91 39 05 	lds	r24, 0x0539
    4c40:	8f 5f       	subi	r24, 0xFF	; 255
    4c42:	80 93 39 05 	sts	0x0539, r24
					if(irCommTxSwitchCounter == irCommTxSwitchCount) {
    4c46:	90 91 38 05 	lds	r25, 0x0538
    4c4a:	89 17       	cp	r24, r25
    4c4c:	09 f0       	breq	.+2      	; 0x4c50 <__vector_29+0x70a>
    4c4e:	dd ce       	rjmp	.-582    	; 0x4a0a <__vector_29+0x4c4>
						irCommTxBitCount++;
    4c50:	80 91 34 05 	lds	r24, 0x0534
    4c54:	8f 5f       	subi	r24, 0xFF	; 255
    4c56:	80 93 34 05 	sts	0x0534, r24
						if(irCommTxBitCount==12) {
    4c5a:	8c 30       	cpi	r24, 0x0C	; 12
    4c5c:	09 f4       	brne	.+2      	; 0x4c60 <__vector_29+0x71a>
    4c5e:	5b c2       	rjmp	.+1206   	; 0x5116 <__vector_29+0xbd0>
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
							irCommInitReceiver();
							PORTA = 0x00;
							irCommTxLastTransmissionTime = getTime100MicroSec();
						} else {
							irCommState = IRCOMM_TX_COMPUTE_TIMINGS;
    4c60:	82 e0       	ldi	r24, 0x02	; 2
    4c62:	80 93 dd 04 	sts	0x04DD, r24
						}
						irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;
    4c66:	82 e0       	ldi	r24, 0x02	; 2
    4c68:	80 93 2c 05 	sts	0x052C, r24
						adcSaveDataTo = SKIP_SAMPLE;
    4c6c:	85 e0       	ldi	r24, 0x05	; 5
    4c6e:	80 93 c9 02 	sts	0x02C9, r24
    4c72:	80 91 ca 02 	lds	r24, 0x02CA
						break;
    4c76:	c5 cc       	rjmp	.-1654   	; 0x4602 <__vector_29+0xbc>
				break;

			case IRCOMM_TX_ADC_TRANSMISSION_SEQ1:
				irCommTxDurationCycle++;
				if(irCommTxDurationCycle == irCommTxDuration) {
					irCommTxDurationCycle = 0;
    4c78:	10 92 3a 05 	sts	0x053A, r1
					if(irCommTxPulseState == 0) {
    4c7c:	80 91 35 05 	lds	r24, 0x0535
    4c80:	88 23       	and	r24, r24
    4c82:	09 f0       	breq	.+2      	; 0x4c86 <__vector_29+0x740>
    4c84:	74 c1       	rjmp	.+744    	; 0x4f6e <__vector_29+0xa28>
						irCommTxPulseState = 1;
    4c86:	81 e0       	ldi	r24, 0x01	; 1
    4c88:	80 93 35 05 	sts	0x0535, r24
						//PORTA = 0xFF;
						//PORTA = 0x01;
						//PORTA = irCommTxSensorMask;
						if(irCommTxSensorGroup==0) {
    4c8c:	80 91 3c 05 	lds	r24, 0x053C
    4c90:	88 23       	and	r24, r24
    4c92:	09 f0       	breq	.+2      	; 0x4c96 <__vector_29+0x750>
    4c94:	b0 c1       	rjmp	.+864    	; 0x4ff6 <__vector_29+0xab0>
							PORTA = 0xAA;
    4c96:	8a ea       	ldi	r24, 0xAA	; 170
    4c98:	82 b9       	out	0x02, r24	; 2
						}
					} else {
						irCommTxPulseState = 0;
						PORTA = 0x00;
					}
					irCommTxSwitchCounter++;
    4c9a:	80 91 39 05 	lds	r24, 0x0539
    4c9e:	8f 5f       	subi	r24, 0xFF	; 255
    4ca0:	80 93 39 05 	sts	0x0539, r24
					if(irCommTxSwitchCounter == irCommTxSwitchCount) {
    4ca4:	90 91 38 05 	lds	r25, 0x0538
    4ca8:	89 17       	cp	r24, r25
    4caa:	09 f0       	breq	.+2      	; 0x4cae <__vector_29+0x768>
    4cac:	27 cf       	rjmp	.-434    	; 0x4afc <__vector_29+0x5b6>
    4cae:	d0 cf       	rjmp	.-96     	; 0x4c50 <__vector_29+0x70a>
				}
				adcSamplingState = 3;
				break;

			case 3:	// left motor
				currentAdChannel = currentMotLeftChannel;
    4cb0:	80 91 35 02 	lds	r24, 0x0235
    4cb4:	80 93 33 02 	sts	0x0233, r24
				leftChannelPhase = leftMotorPhase;
    4cb8:	80 91 38 02 	lds	r24, 0x0238
    4cbc:	80 93 cc 02 	sts	0x02CC, r24
				if(rightChannelPhase == ACTIVE_PHASE) {
    4cc0:	80 91 cb 02 	lds	r24, 0x02CB
    4cc4:	88 23       	and	r24, r24
    4cc6:	e9 f5       	brne	.+122    	; 0x4d42 <__vector_29+0x7fc>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    4cc8:	81 e0       	ldi	r24, 0x01	; 1
    4cca:	80 93 c9 02 	sts	0x02C9, r24
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 4;
    4cce:	84 e0       	ldi	r24, 0x04	; 4
    4cd0:	80 93 ca 02 	sts	0x02CA, r24
				break;
    4cd4:	96 cc       	rjmp	.-1748   	; 0x4602 <__vector_29+0xbc>
					}
				}
				break;

			case 2:	// right motor
				currentAdChannel = currentMotRightChannel;
    4cd6:	80 91 36 02 	lds	r24, 0x0236
    4cda:	80 93 33 02 	sts	0x0233, r24
				rightChannelPhase = rightMotorPhase;
    4cde:	80 91 37 02 	lds	r24, 0x0237
    4ce2:	80 93 cb 02 	sts	0x02CB, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    4ce6:	80 91 cc 02 	lds	r24, 0x02CC
    4cea:	88 23       	and	r24, r24
    4cec:	e9 f4       	brne	.+58     	; 0x4d28 <__vector_29+0x7e2>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    4cee:	83 e0       	ldi	r24, 0x03	; 3
    4cf0:	80 93 c9 02 	sts	0x02C9, r24
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 3;
    4cf4:	83 e0       	ldi	r24, 0x03	; 3
    4cf6:	80 93 ca 02 	sts	0x02CA, r24
				break;
    4cfa:	83 cc       	rjmp	.-1786   	; 0x4602 <__vector_29+0xbc>
			}
			currentProx++;
			break;

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    4cfc:	20 91 cf 02 	lds	r18, 0x02CF
    4d00:	22 30       	cpi	r18, 0x02	; 2
    4d02:	09 f0       	breq	.+2      	; 0x4d06 <__vector_29+0x7c0>
    4d04:	f9 cc       	rjmp	.-1550   	; 0x46f8 <__vector_29+0x1b2>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
    4d06:	90 93 ce 02 	sts	0x02CE, r25
    4d0a:	80 93 cd 02 	sts	0x02CD, r24
				measBattery = 0;
    4d0e:	10 92 cf 02 	sts	0x02CF, r1
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
    4d12:	46 98       	cbi	0x08, 6	; 8
    4d14:	2e e0       	ldi	r18, 0x0E	; 14
    4d16:	30 e0       	ldi	r19, 0x00	; 0
    4d18:	f8 cc       	rjmp	.-1552   	; 0x470a <__vector_29+0x1c4>
			case 0:	// proximity
				currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
																// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
				if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    4d1a:	81 30       	cpi	r24, 0x01	; 1
    4d1c:	09 f4       	brne	.+2      	; 0x4d20 <__vector_29+0x7da>
    4d1e:	48 c1       	rjmp	.+656    	; 0x4fb0 <__vector_29+0xa6a>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4d20:	85 e0       	ldi	r24, 0x05	; 5
    4d22:	80 93 c9 02 	sts	0x02C9, r24
    4d26:	3d cf       	rjmp	.-390    	; 0x4ba2 <__vector_29+0x65c>
			case 2:	// right motor
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    4d28:	81 30       	cpi	r24, 0x01	; 1
    4d2a:	09 f4       	brne	.+2      	; 0x4d2e <__vector_29+0x7e8>
    4d2c:	3d c1       	rjmp	.+634    	; 0x4fa8 <__vector_29+0xa62>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4d2e:	85 e0       	ldi	r24, 0x05	; 5
    4d30:	80 93 c9 02 	sts	0x02C9, r24
    4d34:	df cf       	rjmp	.-66     	; 0x4cf4 <__vector_29+0x7ae>
			case 4:	// right motor
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    4d36:	91 30       	cpi	r25, 0x01	; 1
    4d38:	09 f0       	breq	.+2      	; 0x4d3c <__vector_29+0x7f6>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4d3a:	85 e0       	ldi	r24, 0x05	; 5
    4d3c:	80 93 c9 02 	sts	0x02C9, r24
    4d40:	93 ce       	rjmp	.-730    	; 0x4a68 <__vector_29+0x522>
			case 3:	// left motor
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    4d42:	81 30       	cpi	r24, 0x01	; 1
    4d44:	09 f4       	brne	.+2      	; 0x4d48 <__vector_29+0x802>
    4d46:	38 c1       	rjmp	.+624    	; 0x4fb8 <__vector_29+0xa72>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4d48:	85 e0       	ldi	r24, 0x05	; 5
    4d4a:	80 93 c9 02 	sts	0x02C9, r24
    4d4e:	bf cf       	rjmp	.-130    	; 0x4cce <__vector_29+0x788>
					proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
				//} else {	// ground
				//	proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx];
				//}
				if(proximityResult[currentProx>>1] < 0) {
					proximityResult[currentProx>>1] = 0;
    4d50:	11 82       	std	Z+1, r1	; 0x01
    4d52:	10 82       	st	Z, r1
    4d54:	80 e0       	ldi	r24, 0x00	; 0
    4d56:	90 e0       	ldi	r25, 0x00	; 0
    4d58:	05 cd       	rjmp	.-1526   	; 0x4764 <__vector_29+0x21e>
					
					if(proximityResult[currentProx>>1] < PHASE1) {

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
    4d5a:	ac 01       	movw	r20, r24
    4d5c:	44 5c       	subi	r20, 0xC4	; 196
    4d5e:	5f 4f       	sbci	r21, 0xFF	; 255
    4d60:	55 95       	asr	r21
    4d62:	47 95       	ror	r20
    4d64:	48 37       	cpi	r20, 0x78	; 120
    4d66:	51 05       	cpc	r21, r1
    4d68:	0c f0       	brlt	.+2      	; 0x4d6c <__vector_29+0x826>
    4d6a:	e8 c0       	rjmp	.+464    	; 0x4f3c <__vector_29+0x9f6>
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;
    4d6c:	2f 52       	subi	r18, 0x2F	; 47
    4d6e:	3d 4f       	sbci	r19, 0xFD	; 253
    4d70:	cc 97       	sbiw	r24, 0x3c	; 60
    4d72:	95 95       	asr	r25
    4d74:	87 95       	ror	r24
    4d76:	cc 96       	adiw	r24, 0x3c	; 60
    4d78:	f9 01       	movw	r30, r18
    4d7a:	91 83       	std	Z+1, r25	; 0x01
    4d7c:	80 83       	st	Z, r24
    4d7e:	fe cc       	rjmp	.-1540   	; 0x477c <__vector_29+0x236>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 6;
				break;

			case 6:
				currentAdChannel = currentProx+1;
    4d80:	80 91 34 02 	lds	r24, 0x0234
    4d84:	8f 5f       	subi	r24, 0xFF	; 255
    4d86:	80 93 33 02 	sts	0x0233, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    4d8a:	90 93 c9 02 	sts	0x02C9, r25
				irCommAdcRxState = 7;
    4d8e:	87 e0       	ldi	r24, 0x07	; 7
    4d90:	80 93 09 05 	sts	0x0509, r24
    4d94:	80 91 ca 02 	lds	r24, 0x02CA
				break;
    4d98:	34 cc       	rjmp	.-1944   	; 0x4602 <__vector_29+0xbc>
				}
				irCommAdcRxState = 10;
				break;

			case 10:
				currentAdChannel = currentMotRightChannel;
    4d9a:	80 91 36 02 	lds	r24, 0x0236
    4d9e:	80 93 33 02 	sts	0x0233, r24
				rightChannelPhase = rightMotorPhase;
    4da2:	80 91 37 02 	lds	r24, 0x0237
    4da6:	80 93 cb 02 	sts	0x02CB, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    4daa:	80 91 cc 02 	lds	r24, 0x02CC
    4dae:	88 23       	and	r24, r24
    4db0:	09 f0       	breq	.+2      	; 0x4db4 <__vector_29+0x86e>
    4db2:	e5 c0       	rjmp	.+458    	; 0x4f7e <__vector_29+0xa38>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    4db4:	83 e0       	ldi	r24, 0x03	; 3
    4db6:	80 93 c9 02 	sts	0x02C9, r24
					}
				} else {
					irCommRxWindowSamples++;
				}
				*/
				if(irCommRxBitSkipped < 254) {	// safety check
    4dba:	90 91 23 05 	lds	r25, 0x0523
    4dbe:	9e 3f       	cpi	r25, 0xFE	; 254
    4dc0:	18 f4       	brcc	.+6      	; 0x4dc8 <__vector_29+0x882>
					irCommRxBitSkipped++;
    4dc2:	9f 5f       	subi	r25, 0xFF	; 255
    4dc4:	90 93 23 05 	sts	0x0523, r25
				}
				irCommRxWindowSamples++;
    4dc8:	80 91 0a 05 	lds	r24, 0x050A
    4dcc:	8f 5f       	subi	r24, 0xFF	; 255
    4dce:	80 93 0a 05 	sts	0x050A, r24
				if(irCommState==IRCOMM_RX_SYNC_SIGNAL) {
    4dd2:	20 91 dd 04 	lds	r18, 0x04DD
    4dd6:	24 30       	cpi	r18, 0x04	; 4
    4dd8:	09 f4       	brne	.+2      	; 0x4ddc <__vector_29+0x896>
    4dda:	02 c1       	rjmp	.+516    	; 0x4fe0 <__vector_29+0xa9a>
					if(irCommRxBitSkipped >= irCommShiftCount) {
						irCommState = IRCOMM_RX_WAITING_BIT;
					}
				}

				if(irCommRxWindowSamples == IRCOMM_SAMPLING_WINDOW) {					
    4ddc:	84 31       	cpi	r24, 0x14	; 20
    4dde:	09 f4       	brne	.+2      	; 0x4de2 <__vector_29+0x89c>
    4de0:	21 c1       	rjmp	.+578    	; 0x5024 <__vector_29+0xade>
				} else {
					irCommTickCounter = 0;
					updateBlueLed(0);
				}
				*/
				irCommAdcRxState = 11;
    4de2:	8b e0       	ldi	r24, 0x0B	; 11
    4de4:	80 93 09 05 	sts	0x0509, r24
    4de8:	80 91 ca 02 	lds	r24, 0x02CA
				break;
    4dec:	0a cc       	rjmp	.-2028   	; 0x4602 <__vector_29+0xbc>

			case 11:
				currentAdChannel = 0;	// prox0
    4dee:	10 92 33 02 	sts	0x0233, r1
				if(rightChannelPhase == ACTIVE_PHASE) {
    4df2:	90 91 cb 02 	lds	r25, 0x02CB
    4df6:	99 23       	and	r25, r25
    4df8:	21 f0       	breq	.+8      	; 0x4e02 <__vector_29+0x8bc>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    4dfa:	91 30       	cpi	r25, 0x01	; 1
    4dfc:	09 f4       	brne	.+2      	; 0x4e00 <__vector_29+0x8ba>
    4dfe:	0a c1       	rjmp	.+532    	; 0x5014 <__vector_29+0xace>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4e00:	85 e0       	ldi	r24, 0x05	; 5
    4e02:	80 93 c9 02 	sts	0x02C9, r24
				}
				irCommAdcRxState = 0;
    4e06:	10 92 09 05 	sts	0x0509, r1
    4e0a:	80 91 ca 02 	lds	r24, 0x02CA
				break;
    4e0e:	f9 cb       	rjmp	.-2062   	; 0x4602 <__vector_29+0xbc>

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
			case 0:				
				currentProx = 0;
    4e10:	10 92 34 02 	sts	0x0234, r1
				currentAdChannel = currentProx+1;				
    4e14:	80 93 33 02 	sts	0x0233, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    4e18:	96 e0       	ldi	r25, 0x06	; 6
    4e1a:	90 93 c9 02 	sts	0x02C9, r25
				irCommAdcRxState = 1;
    4e1e:	80 93 09 05 	sts	0x0509, r24
    4e22:	80 91 ca 02 	lds	r24, 0x02CA
				break;
    4e26:	ed cb       	rjmp	.-2086   	; 0x4602 <__vector_29+0xbc>
				}
				irCommAdcRxState = 9;
				break;

			case 9:
				currentAdChannel = currentMotLeftChannel;
    4e28:	90 91 35 02 	lds	r25, 0x0235
    4e2c:	90 93 33 02 	sts	0x0233, r25
				leftChannelPhase = leftMotorPhase;
    4e30:	90 91 38 02 	lds	r25, 0x0238
    4e34:	90 93 cc 02 	sts	0x02CC, r25
				if(rightChannelPhase == ACTIVE_PHASE) {
    4e38:	90 91 cb 02 	lds	r25, 0x02CB
    4e3c:	99 23       	and	r25, r25
    4e3e:	21 f0       	breq	.+8      	; 0x4e48 <__vector_29+0x902>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    4e40:	91 30       	cpi	r25, 0x01	; 1
    4e42:	09 f4       	brne	.+2      	; 0x4e46 <__vector_29+0x900>
    4e44:	eb c0       	rjmp	.+470    	; 0x501c <__vector_29+0xad6>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4e46:	85 e0       	ldi	r24, 0x05	; 5
    4e48:	80 93 c9 02 	sts	0x02C9, r24
				}
				irCommAdcRxState = 10;
    4e4c:	8a e0       	ldi	r24, 0x0A	; 10
    4e4e:	80 93 09 05 	sts	0x0509, r24
    4e52:	80 91 ca 02 	lds	r24, 0x02CA
				break;
    4e56:	d5 cb       	rjmp	.-2134   	; 0x4602 <__vector_29+0xbc>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 2;
				break;

			case 2:
				currentAdChannel = currentProx+1;
    4e58:	80 91 34 02 	lds	r24, 0x0234
    4e5c:	8f 5f       	subi	r24, 0xFF	; 255
    4e5e:	80 93 33 02 	sts	0x0233, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    4e62:	86 e0       	ldi	r24, 0x06	; 6
    4e64:	80 93 c9 02 	sts	0x02C9, r24
				irCommAdcRxState = 3;
    4e68:	83 e0       	ldi	r24, 0x03	; 3
    4e6a:	80 93 09 05 	sts	0x0509, r24
    4e6e:	80 91 ca 02 	lds	r24, 0x02CA
				break;
    4e72:	c7 cb       	rjmp	.-2162   	; 0x4602 <__vector_29+0xbc>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 7;
				break;

			case 7:
				currentAdChannel = currentMotLeftChannel;
    4e74:	80 91 35 02 	lds	r24, 0x0235
    4e78:	80 93 33 02 	sts	0x0233, r24
				leftChannelPhase = leftMotorPhase;
    4e7c:	80 91 38 02 	lds	r24, 0x0238
    4e80:	80 93 cc 02 	sts	0x02CC, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    4e84:	86 e0       	ldi	r24, 0x06	; 6
    4e86:	80 93 c9 02 	sts	0x02C9, r24
				irCommAdcRxState = 8;
    4e8a:	88 e0       	ldi	r24, 0x08	; 8
    4e8c:	80 93 09 05 	sts	0x0509, r24
    4e90:	80 91 ca 02 	lds	r24, 0x02CA
				break;
    4e94:	b6 cb       	rjmp	.-2196   	; 0x4602 <__vector_29+0xbc>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 3;
				break;

			case 3:
				currentAdChannel = currentProx+1;
    4e96:	80 91 34 02 	lds	r24, 0x0234
    4e9a:	8f 5f       	subi	r24, 0xFF	; 255
    4e9c:	80 93 33 02 	sts	0x0233, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    4ea0:	86 e0       	ldi	r24, 0x06	; 6
    4ea2:	80 93 c9 02 	sts	0x02C9, r24
				irCommAdcRxState = 4;
    4ea6:	84 e0       	ldi	r24, 0x04	; 4
    4ea8:	80 93 09 05 	sts	0x0509, r24
    4eac:	80 91 ca 02 	lds	r24, 0x02CA
				break;
    4eb0:	a8 cb       	rjmp	.-2224   	; 0x4602 <__vector_29+0xbc>

			case 4:
				currentAdChannel = currentProx+1;
    4eb2:	80 91 34 02 	lds	r24, 0x0234
    4eb6:	8f 5f       	subi	r24, 0xFF	; 255
    4eb8:	80 93 33 02 	sts	0x0233, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    4ebc:	86 e0       	ldi	r24, 0x06	; 6
    4ebe:	80 93 c9 02 	sts	0x02C9, r24
				irCommAdcRxState = 5;
    4ec2:	85 e0       	ldi	r24, 0x05	; 5
    4ec4:	80 93 09 05 	sts	0x0509, r24
    4ec8:	80 91 ca 02 	lds	r24, 0x02CA
				break;
    4ecc:	9a cb       	rjmp	.-2252   	; 0x4602 <__vector_29+0xbc>
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 0;

				if(currentProx==14 && measBattery==1) {
    4ece:	80 91 cf 02 	lds	r24, 0x02CF
    4ed2:	81 30       	cpi	r24, 0x01	; 1
    4ed4:	09 f4       	brne	.+2      	; 0x4ed8 <__vector_29+0x992>
    4ed6:	95 c0       	rjmp	.+298    	; 0x5002 <__vector_29+0xabc>
    4ed8:	80 e0       	ldi	r24, 0x00	; 0
    4eda:	93 cb       	rjmp	.-2266   	; 0x4602 <__vector_29+0xbc>
			case 1:	// left motor
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				adcSaveDataTo = SAVE_TO_PROX;
				adcSamplingState = 2;
				if(irCommEnabled==IRCOMM_MODE_RECEIVE && currentProx==23) {					
    4edc:	80 91 34 02 	lds	r24, 0x0234
    4ee0:	87 31       	cpi	r24, 0x17	; 23
    4ee2:	09 f4       	brne	.+2      	; 0x4ee6 <__vector_29+0x9a0>
    4ee4:	f8 c0       	rjmp	.+496    	; 0x50d6 <__vector_29+0xb90>
    4ee6:	82 e0       	ldi	r24, 0x02	; 2
    4ee8:	8c cb       	rjmp	.-2280   	; 0x4602 <__vector_29+0xbc>
				if(currentProx & 0x01) {
					if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
											// PORTA for proximity sensors, PORTJ for ground sensors
						PORTA = (1 << (currentProx>>1));	// pulse on
					} else {
						if(hardwareRevision == HW_REV_3_0) {
    4eea:	20 91 5f 04 	lds	r18, 0x045F
    4eee:	22 23       	and	r18, r18
    4ef0:	79 f4       	brne	.+30     	; 0x4f10 <__vector_29+0x9ca>
							PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
    4ef2:	40 97       	sbiw	r24, 0x10	; 16
    4ef4:	95 95       	asr	r25
    4ef6:	87 95       	ror	r24
    4ef8:	21 e0       	ldi	r18, 0x01	; 1
    4efa:	30 e0       	ldi	r19, 0x00	; 0
    4efc:	02 c0       	rjmp	.+4      	; 0x4f02 <__vector_29+0x9bc>
    4efe:	22 0f       	add	r18, r18
    4f00:	33 1f       	adc	r19, r19
    4f02:	8a 95       	dec	r24
    4f04:	e2 f7       	brpl	.-8      	; 0x4efe <__vector_29+0x9b8>
    4f06:	20 93 05 01 	sts	0x0105, r18
    4f0a:	80 91 ca 02 	lds	r24, 0x02CA
    4f0e:	79 cb       	rjmp	.-2318   	; 0x4602 <__vector_29+0xbc>
						}

						if(hardwareRevision == HW_REV_3_0_1) {
    4f10:	21 30       	cpi	r18, 0x01	; 1
    4f12:	19 f0       	breq	.+6      	; 0x4f1a <__vector_29+0x9d4>
							PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
						}

						if(hardwareRevision == HW_REV_3_1) {
    4f14:	22 30       	cpi	r18, 0x02	; 2
    4f16:	09 f0       	breq	.+2      	; 0x4f1a <__vector_29+0x9d4>
    4f18:	72 cb       	rjmp	.-2332   	; 0x45fe <__vector_29+0xb8>
							PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
    4f1a:	40 91 05 01 	lds	r20, 0x0105
    4f1e:	40 97       	sbiw	r24, 0x10	; 16
    4f20:	95 95       	asr	r25
    4f22:	87 95       	ror	r24
    4f24:	21 e0       	ldi	r18, 0x01	; 1
    4f26:	30 e0       	ldi	r19, 0x00	; 0
    4f28:	02 c0       	rjmp	.+4      	; 0x4f2e <__vector_29+0x9e8>
    4f2a:	22 0f       	add	r18, r18
    4f2c:	33 1f       	adc	r19, r19
    4f2e:	8a 95       	dec	r24
    4f30:	e2 f7       	brpl	.-8      	; 0x4f2a <__vector_29+0x9e4>
    4f32:	20 95       	com	r18
    4f34:	24 23       	and	r18, r20
    4f36:	20 93 05 01 	sts	0x0105, r18
    4f3a:	61 cb       	rjmp	.-2366   	; 0x45fe <__vector_29+0xb8>

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;

					} else if(((proximityResult[currentProx>>1]+300)>>2) < PHASE3) {
    4f3c:	ac 01       	movw	r20, r24
    4f3e:	44 5d       	subi	r20, 0xD4	; 212
    4f40:	5e 4f       	sbci	r21, 0xFE	; 254
    4f42:	55 95       	asr	r21
    4f44:	47 95       	ror	r20
    4f46:	55 95       	asr	r21
    4f48:	47 95       	ror	r20
    4f4a:	44 3b       	cpi	r20, 0xB4	; 180
    4f4c:	51 05       	cpc	r21, r1
    4f4e:	c4 f5       	brge	.+112    	; 0x4fc0 <__vector_29+0xa7a>

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-180)>>2) + PHASE2;
    4f50:	2f 52       	subi	r18, 0x2F	; 47
    4f52:	3d 4f       	sbci	r19, 0xFD	; 253
    4f54:	84 5b       	subi	r24, 0xB4	; 180
    4f56:	90 40       	sbci	r25, 0x00	; 0
    4f58:	95 95       	asr	r25
    4f5a:	87 95       	ror	r24
    4f5c:	95 95       	asr	r25
    4f5e:	87 95       	ror	r24
    4f60:	88 58       	subi	r24, 0x88	; 136
    4f62:	9f 4f       	sbci	r25, 0xFF	; 255
    4f64:	d9 01       	movw	r26, r18
    4f66:	11 96       	adiw	r26, 0x01	; 1
    4f68:	9c 93       	st	X, r25
    4f6a:	8e 93       	st	-X, r24
    4f6c:	07 cc       	rjmp	.-2034   	; 0x477c <__vector_29+0x236>
							PORTA = 0xAA;
						} else {
							PORTA = 0x55;
						}
					} else {
						irCommTxPulseState = 0;
    4f6e:	10 92 35 05 	sts	0x0535, r1
						PORTA = 0x00;
    4f72:	12 b8       	out	0x02, r1	; 2
    4f74:	92 ce       	rjmp	.-732    	; 0x4c9a <__vector_29+0x754>
							PORTA = 0xAA;
						} else {
							PORTA = 0x55;
						}
					} else {
						irCommTxPulseState = 0;
    4f76:	10 92 35 05 	sts	0x0535, r1
						PORTA = 0x00;
    4f7a:	12 b8       	out	0x02, r1	; 2
    4f7c:	5f ce       	rjmp	.-834    	; 0x4c3c <__vector_29+0x6f6>
			case 10:
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    4f7e:	81 30       	cpi	r24, 0x01	; 1
    4f80:	09 f4       	brne	.+2      	; 0x4f84 <__vector_29+0xa3e>
    4f82:	a5 c0       	rjmp	.+330    	; 0x50ce <__vector_29+0xb88>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4f84:	85 e0       	ldi	r24, 0x05	; 5
    4f86:	80 93 c9 02 	sts	0x02C9, r24
    4f8a:	17 cf       	rjmp	.-466    	; 0x4dba <__vector_29+0x874>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    4f8c:	84 e0       	ldi	r24, 0x04	; 4
    4f8e:	80 93 c9 02 	sts	0x02C9, r24
    4f92:	c7 cd       	rjmp	.-1138   	; 0x4b22 <__vector_29+0x5dc>
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    4f94:	82 e0       	ldi	r24, 0x02	; 2
    4f96:	80 93 c9 02 	sts	0x02C9, r24
    4f9a:	4a cd       	rjmp	.-1388   	; 0x4a30 <__vector_29+0x4ea>
			case 8:
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    4f9c:	81 30       	cpi	r24, 0x01	; 1
    4f9e:	b1 f1       	breq	.+108    	; 0x500c <__vector_29+0xac6>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4fa0:	85 e0       	ldi	r24, 0x05	; 5
    4fa2:	80 93 c9 02 	sts	0x02C9, r24
    4fa6:	96 cd       	rjmp	.-1236   	; 0x4ad4 <__vector_29+0x58e>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    4fa8:	84 e0       	ldi	r24, 0x04	; 4
    4faa:	80 93 c9 02 	sts	0x02C9, r24
    4fae:	a2 ce       	rjmp	.-700    	; 0x4cf4 <__vector_29+0x7ae>
				currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
																// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
				if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    4fb0:	82 e0       	ldi	r24, 0x02	; 2
    4fb2:	80 93 c9 02 	sts	0x02C9, r24
    4fb6:	f5 cd       	rjmp	.-1046   	; 0x4ba2 <__vector_29+0x65c>
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    4fb8:	82 e0       	ldi	r24, 0x02	; 2
    4fba:	80 93 c9 02 	sts	0x02C9, r24
    4fbe:	87 ce       	rjmp	.-754    	; 0x4cce <__vector_29+0x788>

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-180)>>2) + PHASE2;

					} else {

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-420)>>3) + PHASE3;
    4fc0:	2f 52       	subi	r18, 0x2F	; 47
    4fc2:	3d 4f       	sbci	r19, 0xFD	; 253
    4fc4:	84 5a       	subi	r24, 0xA4	; 164
    4fc6:	91 40       	sbci	r25, 0x01	; 1
    4fc8:	95 95       	asr	r25
    4fca:	87 95       	ror	r24
    4fcc:	95 95       	asr	r25
    4fce:	87 95       	ror	r24
    4fd0:	95 95       	asr	r25
    4fd2:	87 95       	ror	r24
    4fd4:	8c 54       	subi	r24, 0x4C	; 76
    4fd6:	9f 4f       	sbci	r25, 0xFF	; 255
    4fd8:	f9 01       	movw	r30, r18
    4fda:	91 83       	std	Z+1, r25	; 0x01
    4fdc:	80 83       	st	Z, r24
    4fde:	ce cb       	rjmp	.-2148   	; 0x477c <__vector_29+0x236>
				if(irCommRxBitSkipped < 254) {	// safety check
					irCommRxBitSkipped++;
				}
				irCommRxWindowSamples++;
				if(irCommState==IRCOMM_RX_SYNC_SIGNAL) {
					irCommRxWindowSamples = 0;
    4fe0:	10 92 0a 05 	sts	0x050A, r1
					if(irCommRxBitSkipped >= irCommShiftCount) {
    4fe4:	80 91 14 05 	lds	r24, 0x0514
    4fe8:	98 17       	cp	r25, r24
    4fea:	08 f4       	brcc	.+2      	; 0x4fee <__vector_29+0xaa8>
    4fec:	fa ce       	rjmp	.-524    	; 0x4de2 <__vector_29+0x89c>
						irCommState = IRCOMM_RX_WAITING_BIT;
    4fee:	85 e0       	ldi	r24, 0x05	; 5
    4ff0:	80 93 dd 04 	sts	0x04DD, r24
    4ff4:	f6 ce       	rjmp	.-532    	; 0x4de2 <__vector_29+0x89c>
						//PORTA = 0x01;
						//PORTA = irCommTxSensorMask;
						if(irCommTxSensorGroup==0) {
							PORTA = 0xAA;
						} else {
							PORTA = 0x55;
    4ff6:	85 e5       	ldi	r24, 0x55	; 85
    4ff8:	82 b9       	out	0x02, r24	; 2
    4ffa:	4f ce       	rjmp	.-866    	; 0x4c9a <__vector_29+0x754>
						//PORTA = 0x01;
						//PORTA = irCommTxSensorMask;
						if(irCommTxSensorGroup==0) {
							PORTA = 0xAA;
						} else {
							PORTA = 0x55;
    4ffc:	85 e5       	ldi	r24, 0x55	; 85
    4ffe:	82 b9       	out	0x02, r24	; 2
    5000:	1d ce       	rjmp	.-966    	; 0x4c3c <__vector_29+0x6f6>
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 0;

				if(currentProx==14 && measBattery==1) {
					measBattery=2;
    5002:	82 e0       	ldi	r24, 0x02	; 2
    5004:	80 93 cf 02 	sts	0x02CF, r24
					SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
    5008:	46 9a       	sbi	0x08, 6	; 8
    500a:	35 cd       	rjmp	.-1430   	; 0x4a76 <__vector_29+0x530>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    500c:	84 e0       	ldi	r24, 0x04	; 4
    500e:	80 93 c9 02 	sts	0x02C9, r24
    5012:	60 cd       	rjmp	.-1344   	; 0x4ad4 <__vector_29+0x58e>
			case 11:
				currentAdChannel = 0;	// prox0
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    5014:	82 e0       	ldi	r24, 0x02	; 2
    5016:	80 93 c9 02 	sts	0x02C9, r24
    501a:	f5 ce       	rjmp	.-534    	; 0x4e06 <__vector_29+0x8c0>
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    501c:	82 e0       	ldi	r24, 0x02	; 2
    501e:	80 93 c9 02 	sts	0x02C9, r24
    5022:	14 cf       	rjmp	.-472    	; 0x4e4c <__vector_29+0x906>
						irCommState = IRCOMM_RX_WAITING_BIT;
					}
				}

				if(irCommRxWindowSamples == IRCOMM_SAMPLING_WINDOW) {					
					irCommRxWindowSamples = 0;
    5024:	10 92 0a 05 	sts	0x050A, r1
					irCommTempPointer = irCommProxValuesCurr;
    5028:	80 91 55 08 	lds	r24, 0x0855
    502c:	90 91 56 08 	lds	r25, 0x0856
					irCommProxValuesCurr = irCommProxValuesAdc;
    5030:	20 91 71 08 	lds	r18, 0x0871
    5034:	30 91 72 08 	lds	r19, 0x0872
    5038:	30 93 56 08 	sts	0x0856, r19
    503c:	20 93 55 08 	sts	0x0855, r18
					irCommProxValuesAdc = irCommTempPointer;
    5040:	90 93 72 08 	sts	0x0872, r25
    5044:	80 93 71 08 	sts	0x0871, r24
					irCommTempPointer = irCommMaxSensorValueCurr;
    5048:	50 91 52 05 	lds	r21, 0x0552
    504c:	40 91 53 05 	lds	r20, 0x0553
					irCommMaxSensorValueCurr = irCommMaxSensorValueAdc;
    5050:	80 91 3f 0b 	lds	r24, 0x0B3F
    5054:	90 91 40 0b 	lds	r25, 0x0B40
    5058:	90 93 53 05 	sts	0x0553, r25
    505c:	80 93 52 05 	sts	0x0552, r24
					irCommMaxSensorValueAdc = irCommTempPointer;
    5060:	50 93 3f 0b 	sts	0x0B3F, r21
    5064:	40 93 40 0b 	sts	0x0B40, r20
					irCommTempPointer = irCommMinSensorValueCurr;
    5068:	80 91 3e 05 	lds	r24, 0x053E
    506c:	90 91 3f 05 	lds	r25, 0x053F
    5070:	90 93 81 0b 	sts	0x0B81, r25
    5074:	80 93 80 0b 	sts	0x0B80, r24
					irCommMinSensorValueCurr = irCommMinSensorValueAdc;
    5078:	20 91 cf 05 	lds	r18, 0x05CF
    507c:	30 91 d0 05 	lds	r19, 0x05D0
    5080:	30 93 3f 05 	sts	0x053F, r19
    5084:	20 93 3e 05 	sts	0x053E, r18
					irCommMinSensorValueAdc = irCommTempPointer;
    5088:	90 93 d0 05 	sts	0x05D0, r25
    508c:	80 93 cf 05 	sts	0x05CF, r24
					memset(irCommMaxSensorValueAdc, 0x00, 16);
    5090:	e5 2f       	mov	r30, r21
    5092:	f4 2f       	mov	r31, r20
    5094:	80 e1       	ldi	r24, 0x10	; 16
    5096:	df 01       	movw	r26, r30
    5098:	1d 92       	st	X+, r1
    509a:	8a 95       	dec	r24
    509c:	e9 f7       	brne	.-6      	; 0x5098 <__vector_29+0xb52>
					memset(irCommMinSensorValueAdc, 0xFF, 16);
    509e:	80 91 cf 05 	lds	r24, 0x05CF
    50a2:	90 91 d0 05 	lds	r25, 0x05D0
    50a6:	6f ef       	ldi	r22, 0xFF	; 255
    50a8:	70 e0       	ldi	r23, 0x00	; 0
    50aa:	40 e1       	ldi	r20, 0x10	; 16
    50ac:	50 e0       	ldi	r21, 0x00	; 0
    50ae:	0e 94 05 58 	call	0xb00a	; 0xb00a <memset>
					if(irCommState == IRCOMM_RX_IDLE_STATE) {
    50b2:	80 91 dd 04 	lds	r24, 0x04DD
    50b6:	81 30       	cpi	r24, 0x01	; 1
    50b8:	09 f4       	brne	.+2      	; 0x50bc <__vector_29+0xb76>
    50ba:	44 c0       	rjmp	.+136    	; 0x5144 <__vector_29+0xbfe>
						irCommRxBitSkipped = 0;
					}
					//if(irCommState == IRCOMM_RX_SYNC_SIGNAL) {
					//	irCommSecondBitSkipped = 1;	// the second start bit is just sampled, skip it and sync with the received signal						
					//}
					if(irCommState == IRCOMM_RX_WAITING_BIT) {
    50bc:	80 91 dd 04 	lds	r24, 0x04DD
    50c0:	85 30       	cpi	r24, 0x05	; 5
    50c2:	09 f0       	breq	.+2      	; 0x50c6 <__vector_29+0xb80>
    50c4:	8e ce       	rjmp	.-740    	; 0x4de2 <__vector_29+0x89c>
						irCommState = IRCOMM_RX_READ_BIT;
    50c6:	86 e0       	ldi	r24, 0x06	; 6
    50c8:	80 93 dd 04 	sts	0x04DD, r24
    50cc:	8a ce       	rjmp	.-748    	; 0x4de2 <__vector_29+0x89c>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    50ce:	84 e0       	ldi	r24, 0x04	; 4
    50d0:	80 93 c9 02 	sts	0x02C9, r24
    50d4:	72 ce       	rjmp	.-796    	; 0x4dba <__vector_29+0x874>
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				adcSaveDataTo = SAVE_TO_PROX;
				adcSamplingState = 2;
				if(irCommEnabled==IRCOMM_MODE_RECEIVE && currentProx==23) {					
					currentAdChannel = 0;	// prox0					
    50d6:	10 92 33 02 	sts	0x0233, r1
					measBattery = 0;
    50da:	10 92 cf 02 	sts	0x02CF, r1
					irCommAdcRxState = 0;					
    50de:	10 92 09 05 	sts	0x0509, r1
					irCommRxWindowSamples = 0;
    50e2:	10 92 0a 05 	sts	0x050A, r1
					memset(irCommMaxSensorValueAdc, 0x00, 16);
    50e6:	e0 91 3f 0b 	lds	r30, 0x0B3F
    50ea:	f0 91 40 0b 	lds	r31, 0x0B40
    50ee:	80 e1       	ldi	r24, 0x10	; 16
    50f0:	df 01       	movw	r26, r30
    50f2:	1d 92       	st	X+, r1
    50f4:	8a 95       	dec	r24
    50f6:	e9 f7       	brne	.-6      	; 0x50f2 <__vector_29+0xbac>
					memset(irCommMinSensorValueAdc, 0xFF, 16);
    50f8:	80 91 cf 05 	lds	r24, 0x05CF
    50fc:	90 91 d0 05 	lds	r25, 0x05D0
    5100:	6f ef       	ldi	r22, 0xFF	; 255
    5102:	70 e0       	ldi	r23, 0x00	; 0
    5104:	40 e1       	ldi	r20, 0x10	; 16
    5106:	50 e0       	ldi	r21, 0x00	; 0
    5108:	0e 94 05 58 	call	0xb00a	; 0xb00a <memset>
					irCommMode = IRCOMM_MODE_RECEIVE;					
    510c:	10 93 dc 04 	sts	0x04DC, r17
    5110:	10 91 da 04 	lds	r17, 0x04DA
    5114:	d8 ca       	rjmp	.-2640   	; 0x46c6 <__vector_29+0x180>
					}
					irCommTxSwitchCounter++;
					if(irCommTxSwitchCounter == irCommTxSwitchCount) {
						irCommTxBitCount++;
						if(irCommTxBitCount==12) {
							irCommState = IRCOMM_TX_IDLE_STATE;
    5116:	81 e0       	ldi	r24, 0x01	; 1
    5118:	80 93 dd 04 	sts	0x04DD, r24
							irCommTxByteEnqueued = 0;
    511c:	10 92 2e 05 	sts	0x052E, r1
							adcSamplingState = 0;
    5120:	10 92 ca 02 	sts	0x02CA, r1
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    5124:	10 92 dc 04 	sts	0x04DC, r1
							irCommInitReceiver();
    5128:	0e 94 9e 47 	call	0x8f3c	; 0x8f3c <irCommInitReceiver>
							PORTA = 0x00;
    512c:	12 b8       	out	0x02, r1	; 2
							irCommTxLastTransmissionTime = getTime100MicroSec();
    512e:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
    5132:	60 93 2f 05 	sts	0x052F, r22
    5136:	70 93 30 05 	sts	0x0530, r23
    513a:	80 93 31 05 	sts	0x0531, r24
    513e:	90 93 32 05 	sts	0x0532, r25
    5142:	91 cd       	rjmp	.-1246   	; 0x4c66 <__vector_29+0x720>
					irCommMinSensorValueCurr = irCommMinSensorValueAdc;
					irCommMinSensorValueAdc = irCommTempPointer;
					memset(irCommMaxSensorValueAdc, 0x00, 16);
					memset(irCommMinSensorValueAdc, 0xFF, 16);
					if(irCommState == IRCOMM_RX_IDLE_STATE) {
						irCommState = IRCOMM_RX_MAX_SENSOR_STATE;
    5144:	82 e0       	ldi	r24, 0x02	; 2
    5146:	80 93 dd 04 	sts	0x04DD, r24
						irCommRxBitSkipped = 0;
    514a:	10 92 23 05 	sts	0x0523, r1
    514e:	b6 cf       	rjmp	.-148    	; 0x50bc <__vector_29+0xb76>

00005150 <initMotors>:

#include "motors.h"

void initMotors() {
    5150:	0f 93       	push	r16
    5152:	1f 93       	push	r17
    5154:	cf 93       	push	r28
    5156:	df 93       	push	r29
	// Using 10-bit resolution (waveform generation mode 7) we have a period of: 8000000/1024 = 7812.5 Hz
	// We need to apply a prescaler to the timer in such a way to get the desired period:
	// 7812.5/100 = 78.125 => ideal prescaler, the nearest one is 1/64 and we get a period of:
	// 8000000/64/1024 = 122 Hz

	TCCR3A = 0;
    5158:	e0 e9       	ldi	r30, 0x90	; 144
    515a:	f0 e0       	ldi	r31, 0x00	; 0
    515c:	10 82       	st	Z, r1
	TCCR3B = 0;
    515e:	41 e9       	ldi	r20, 0x91	; 145
    5160:	50 e0       	ldi	r21, 0x00	; 0
    5162:	da 01       	movw	r26, r20
    5164:	1c 92       	st	X, r1
	TIMSK3 = 0;
    5166:	21 e7       	ldi	r18, 0x71	; 113
    5168:	30 e0       	ldi	r19, 0x00	; 0
    516a:	e9 01       	movw	r28, r18
    516c:	18 82       	st	Y, r1
	TCCR4A = 0;
    516e:	a0 ea       	ldi	r26, 0xA0	; 160
    5170:	b0 e0       	ldi	r27, 0x00	; 0
    5172:	1c 92       	st	X, r1
	TCCR4B = 0;
    5174:	81 ea       	ldi	r24, 0xA1	; 161
    5176:	90 e0       	ldi	r25, 0x00	; 0
    5178:	ec 01       	movw	r28, r24
    517a:	18 82       	st	Y, r1
	TIMSK4 = 0;
    517c:	02 e7       	ldi	r16, 0x72	; 114
    517e:	10 e0       	ldi	r17, 0x00	; 0
    5180:	e8 01       	movw	r28, r16
    5182:	18 82       	st	Y, r1

	TCCR3A |= (1 << COM3A1) | (1 << WGM31) | (1 << WGM30); 	// enable OCA; clear on match, set at bottom
    5184:	60 81       	ld	r22, Z
    5186:	63 68       	ori	r22, 0x83	; 131
    5188:	60 83       	st	Z, r22
	TCCR3A |= (1 << WGM31) | (1 << WGM30);
    518a:	60 81       	ld	r22, Z
    518c:	63 60       	ori	r22, 0x03	; 3
    518e:	60 83       	st	Z, r22
	TCCR3B |= (1 << WGM32) | (1 << CS31) | (1 << CS30);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    5190:	ea 01       	movw	r28, r20
    5192:	68 81       	ld	r22, Y
    5194:	6b 60       	ori	r22, 0x0B	; 11
    5196:	68 83       	st	Y, r22
	// the values for motors goes from 0 (stopped) to 1023 (max power)
	OCR3A = pwm_right;
    5198:	40 91 05 03 	lds	r20, 0x0305
    519c:	50 91 06 03 	lds	r21, 0x0306
    51a0:	50 93 99 00 	sts	0x0099, r21
    51a4:	40 93 98 00 	sts	0x0098, r20
	OCR3B = 0;
    51a8:	10 92 9b 00 	sts	0x009B, r1
    51ac:	10 92 9a 00 	sts	0x009A, r1
	TIMSK3 |= (1 << TOIE3);		// Enable timer overflow interrupt
    51b0:	e9 01       	movw	r28, r18
    51b2:	48 81       	ld	r20, Y
    51b4:	41 60       	ori	r20, 0x01	; 1
    51b6:	48 83       	st	Y, r20

	// stop right motor
	TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    51b8:	20 81       	ld	r18, Z
    51ba:	2f 75       	andi	r18, 0x5F	; 95
    51bc:	20 83       	st	Z, r18
	PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    51be:	2e b1       	in	r18, 0x0e	; 14
    51c0:	27 7e       	andi	r18, 0xE7	; 231
    51c2:	2e b9       	out	0x0e, r18	; 14

	// Motor left timer4/pwm
	// same configuration as timer3
	TCCR4A |= (1 << COM4A1) | (1 << WGM41) | (1 << WGM40); 	// enable OCA; clear on match, set at bottom
    51c4:	2c 91       	ld	r18, X
    51c6:	23 68       	ori	r18, 0x83	; 131
    51c8:	2c 93       	st	X, r18
	TCCR4B |= (1 << WGM42) | (1 << CS41) | (1 << CS40);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    51ca:	fc 01       	movw	r30, r24
    51cc:	20 81       	ld	r18, Z
    51ce:	2b 60       	ori	r18, 0x0B	; 11
    51d0:	20 83       	st	Z, r18
	// the values for motors goes from 0 (stopped) to 1024 (max power)
	OCR4A = pwm_left;
    51d2:	80 91 07 03 	lds	r24, 0x0307
    51d6:	90 91 08 03 	lds	r25, 0x0308
    51da:	90 93 a9 00 	sts	0x00A9, r25
    51de:	80 93 a8 00 	sts	0x00A8, r24
	OCR4B = 0;
    51e2:	10 92 ab 00 	sts	0x00AB, r1
    51e6:	10 92 aa 00 	sts	0x00AA, r1
	TIMSK4 |= (1 << TOIE4);		// Enable timer overflow interrupt
    51ea:	e8 01       	movw	r28, r16
    51ec:	88 81       	ld	r24, Y
    51ee:	81 60       	ori	r24, 0x01	; 1
    51f0:	88 83       	st	Y, r24
	// stop left motor
	TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    51f2:	8c 91       	ld	r24, X
    51f4:	8f 75       	andi	r24, 0x5F	; 95
    51f6:	8c 93       	st	X, r24
	PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    51f8:	e2 e0       	ldi	r30, 0x02	; 2
    51fa:	f1 e0       	ldi	r31, 0x01	; 1
    51fc:	80 81       	ld	r24, Z
    51fe:	87 7e       	andi	r24, 0xE7	; 231
    5200:	80 83       	st	Z, r24


}
    5202:	df 91       	pop	r29
    5204:	cf 91       	pop	r28
    5206:	1f 91       	pop	r17
    5208:	0f 91       	pop	r16
    520a:	08 95       	ret

0000520c <cast_speed>:

signed int cast_speed(signed int vel) {
    520c:	28 2f       	mov	r18, r24
    520e:	39 2f       	mov	r19, r25
    5210:	8e ef       	ldi	r24, 0xFE	; 254
    5212:	20 30       	cpi	r18, 0x00	; 0
    5214:	38 07       	cpc	r19, r24
    5216:	14 f4       	brge	.+4      	; 0x521c <cast_speed+0x10>
    5218:	20 e0       	ldi	r18, 0x00	; 0
    521a:	3e ef       	ldi	r19, 0xFE	; 254
    521c:	82 e0       	ldi	r24, 0x02	; 2
    521e:	21 30       	cpi	r18, 0x01	; 1
    5220:	38 07       	cpc	r19, r24
    5222:	14 f0       	brlt	.+4      	; 0x5228 <cast_speed+0x1c>
    5224:	20 e0       	ldi	r18, 0x00	; 0
    5226:	32 e0       	ldi	r19, 0x02	; 2
        vel = MAX_MOTORS_PWM/2;
    } else if(vel < -(MAX_MOTORS_PWM/2)) {
        vel = -(MAX_MOTORS_PWM/2);
    }
    return vel;
}
    5228:	c9 01       	movw	r24, r18
    522a:	08 95       	ret

0000522c <handleMotorsWithNoController>:

void handleMotorsWithNoController() {

	// compute velocities even if they aren't used
	if(compute_left_vel) {
    522c:	80 91 07 02 	lds	r24, 0x0207
    5230:	88 23       	and	r24, r24
    5232:	c1 f1       	breq	.+112    	; 0x52a4 <handleMotorsWithNoController+0x78>
		last_left_vel = left_vel_sum>>2;
    5234:	60 91 fd 02 	lds	r22, 0x02FD
    5238:	70 91 fe 02 	lds	r23, 0x02FE
    523c:	76 95       	lsr	r23
    523e:	67 95       	ror	r22
    5240:	76 95       	lsr	r23
    5242:	67 95       	ror	r22
    5244:	70 93 02 03 	sts	0x0302, r23
    5248:	60 93 01 03 	sts	0x0301, r22
		compute_left_vel = 0;
    524c:	10 92 07 02 	sts	0x0207, r1
		left_vel_sum = 0;
    5250:	10 92 fe 02 	sts	0x02FE, r1
    5254:	10 92 fd 02 	sts	0x02FD, r1

		if(pwm_left_desired >= 0) {
    5258:	80 91 0b 03 	lds	r24, 0x030B
    525c:	90 91 0c 03 	lds	r25, 0x030C
    5260:	97 fd       	sbrc	r25, 7
    5262:	e3 c0       	rjmp	.+454    	; 0x542a <handleMotorsWithNoController+0x1fe>
			leftMotSteps += (last_left_vel>>3);
    5264:	75 95       	asr	r23
    5266:	67 95       	ror	r22
    5268:	75 95       	asr	r23
    526a:	67 95       	ror	r22
    526c:	75 95       	asr	r23
    526e:	67 95       	ror	r22
    5270:	88 27       	eor	r24, r24
    5272:	77 fd       	sbrc	r23, 7
    5274:	80 95       	com	r24
    5276:	98 2f       	mov	r25, r24
    5278:	0e 94 80 55 	call	0xab00	; 0xab00 <__floatsisf>
    527c:	9b 01       	movw	r18, r22
    527e:	ac 01       	movw	r20, r24
    5280:	60 91 e5 02 	lds	r22, 0x02E5
    5284:	70 91 e6 02 	lds	r23, 0x02E6
    5288:	80 91 e7 02 	lds	r24, 0x02E7
    528c:	90 91 e8 02 	lds	r25, 0x02E8
    5290:	0e 94 18 54 	call	0xa830	; 0xa830 <__addsf3>
    5294:	60 93 e5 02 	sts	0x02E5, r22
    5298:	70 93 e6 02 	sts	0x02E6, r23
    529c:	80 93 e7 02 	sts	0x02E7, r24
    52a0:	90 93 e8 02 	sts	0x02E8, r25
		} else {
			leftMotSteps -= (last_left_vel>>3);
		}
	}

	if(compute_right_vel) {
    52a4:	80 91 08 02 	lds	r24, 0x0208
    52a8:	88 23       	and	r24, r24
    52aa:	c1 f1       	breq	.+112    	; 0x531c <handleMotorsWithNoController+0xf0>
		last_right_vel = right_vel_sum>>2;
    52ac:	60 91 ff 02 	lds	r22, 0x02FF
    52b0:	70 91 00 03 	lds	r23, 0x0300
    52b4:	76 95       	lsr	r23
    52b6:	67 95       	ror	r22
    52b8:	76 95       	lsr	r23
    52ba:	67 95       	ror	r22
    52bc:	70 93 04 03 	sts	0x0304, r23
    52c0:	60 93 03 03 	sts	0x0303, r22
		compute_right_vel = 0;
    52c4:	10 92 08 02 	sts	0x0208, r1
		right_vel_sum = 0;
    52c8:	10 92 00 03 	sts	0x0300, r1
    52cc:	10 92 ff 02 	sts	0x02FF, r1

		if(pwm_right_desired >= 0) {
    52d0:	80 91 09 03 	lds	r24, 0x0309
    52d4:	90 91 0a 03 	lds	r25, 0x030A
    52d8:	97 fd       	sbrc	r25, 7
    52da:	86 c0       	rjmp	.+268    	; 0x53e8 <handleMotorsWithNoController+0x1bc>
			rightMotSteps += (last_right_vel>>3);
    52dc:	75 95       	asr	r23
    52de:	67 95       	ror	r22
    52e0:	75 95       	asr	r23
    52e2:	67 95       	ror	r22
    52e4:	75 95       	asr	r23
    52e6:	67 95       	ror	r22
    52e8:	88 27       	eor	r24, r24
    52ea:	77 fd       	sbrc	r23, 7
    52ec:	80 95       	com	r24
    52ee:	98 2f       	mov	r25, r24
    52f0:	0e 94 80 55 	call	0xab00	; 0xab00 <__floatsisf>
    52f4:	9b 01       	movw	r18, r22
    52f6:	ac 01       	movw	r20, r24
    52f8:	60 91 e1 02 	lds	r22, 0x02E1
    52fc:	70 91 e2 02 	lds	r23, 0x02E2
    5300:	80 91 e3 02 	lds	r24, 0x02E3
    5304:	90 91 e4 02 	lds	r25, 0x02E4
    5308:	0e 94 18 54 	call	0xa830	; 0xa830 <__addsf3>
    530c:	60 93 e1 02 	sts	0x02E1, r22
    5310:	70 93 e2 02 	sts	0x02E2, r23
    5314:	80 93 e3 02 	sts	0x02E3, r24
    5318:	90 93 e4 02 	sts	0x02E4, r25
		} else {
			rightMotSteps -= (last_right_vel>>3);
		}
	}

	pwm_right_working = pwm_intermediate_right_desired*BYTE_TO_MM_S;	// pwm in the range -635..635 (127*BYTE_TO_MM_S)
    531c:	20 91 0d 03 	lds	r18, 0x030D
    5320:	30 91 0e 03 	lds	r19, 0x030E
    5324:	c9 01       	movw	r24, r18
    5326:	88 0f       	add	r24, r24
    5328:	99 1f       	adc	r25, r25
    532a:	88 0f       	add	r24, r24
    532c:	99 1f       	adc	r25, r25
    532e:	82 0f       	add	r24, r18
    5330:	93 1f       	adc	r25, r19
    5332:	90 93 1e 03 	sts	0x031E, r25
    5336:	80 93 1d 03 	sts	0x031D, r24
	pwm_left_working = pwm_intermediate_left_desired*BYTE_TO_MM_S;	
    533a:	40 91 0f 03 	lds	r20, 0x030F
    533e:	50 91 10 03 	lds	r21, 0x0310
    5342:	9a 01       	movw	r18, r20
    5344:	22 0f       	add	r18, r18
    5346:	33 1f       	adc	r19, r19
    5348:	22 0f       	add	r18, r18
    534a:	33 1f       	adc	r19, r19
    534c:	24 0f       	add	r18, r20
    534e:	35 1f       	adc	r19, r21
    5350:	52 2f       	mov	r21, r18
    5352:	43 2f       	mov	r20, r19
    5354:	20 93 1f 03 	sts	0x031F, r18
    5358:	30 93 20 03 	sts	0x0320, r19
	if(obstacleAvoidanceEnabled) {
    535c:	20 91 7c 04 	lds	r18, 0x047C
    5360:	22 23       	and	r18, r18
    5362:	39 f5       	brne	.+78     	; 0x53b2 <handleMotorsWithNoController+0x186>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);		// out is in the range -MAX_MOTORS_PWM/2..MAX_MOTORS_PWM/2
	}
	//pwm_left_desired_to_control = cast_speed(pwm_left_working);		// pwm in the range -MAX_MOTORS_PWM/2..MAX_MOTORS_PWM/2
	//pwm_right_desired_to_control = cast_speed(pwm_right_working);

	pwm_left = pwm_left_working;
    5364:	50 93 07 03 	sts	0x0307, r21
    5368:	40 93 08 03 	sts	0x0308, r20
	pwm_right = pwm_right_working;
    536c:	90 93 06 03 	sts	0x0306, r25
    5370:	80 93 05 03 	sts	0x0305, r24

	if(pwm_right > 0) {
    5374:	18 16       	cp	r1, r24
    5376:	19 06       	cpc	r1, r25
    5378:	5c f5       	brge	.+86     	; 0x53d0 <handleMotorsWithNoController+0x1a4>
		OCR3A = (unsigned int)pwm_right;
    537a:	90 93 99 00 	sts	0x0099, r25
    537e:	80 93 98 00 	sts	0x0098, r24
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
		OCR3B = 0;
	}
	if(pwm_left > 0) {
    5382:	80 91 07 03 	lds	r24, 0x0307
    5386:	90 91 08 03 	lds	r25, 0x0308
    538a:	18 16       	cp	r1, r24
    538c:	19 06       	cpc	r1, r25
    538e:	2c f4       	brge	.+10     	; 0x539a <handleMotorsWithNoController+0x16e>
		OCR4A = (unsigned int)pwm_left;
    5390:	90 93 a9 00 	sts	0x00A9, r25
    5394:	80 93 a8 00 	sts	0x00A8, r24
    5398:	08 95       	ret
	} else if(pwm_left < 0) {
    539a:	00 97       	sbiw	r24, 0x00	; 0
    539c:	09 f0       	breq	.+2      	; 0x53a0 <handleMotorsWithNoController+0x174>
    539e:	6e c0       	rjmp	.+220    	; 0x547c <handleMotorsWithNoController+0x250>
		OCR4B =(unsigned int)( -pwm_left);
	} else {
		OCR4A = 0;
    53a0:	10 92 a9 00 	sts	0x00A9, r1
    53a4:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    53a8:	10 92 ab 00 	sts	0x00AB, r1
    53ac:	10 92 aa 00 	sts	0x00AA, r1
    53b0:	08 95       	ret
	}

	pwm_right_working = pwm_intermediate_right_desired*BYTE_TO_MM_S;	// pwm in the range -635..635 (127*BYTE_TO_MM_S)
	pwm_left_working = pwm_intermediate_left_desired*BYTE_TO_MM_S;	
	if(obstacleAvoidanceEnabled) {
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);		// out is in the range -MAX_MOTORS_PWM/2..MAX_MOTORS_PWM/2
    53b2:	8f e1       	ldi	r24, 0x1F	; 31
    53b4:	93 e0       	ldi	r25, 0x03	; 3
    53b6:	6d e1       	ldi	r22, 0x1D	; 29
    53b8:	73 e0       	ldi	r23, 0x03	; 3
    53ba:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <obstacleAvoidance>
    53be:	50 91 1f 03 	lds	r21, 0x031F
    53c2:	40 91 20 03 	lds	r20, 0x0320
    53c6:	80 91 1d 03 	lds	r24, 0x031D
    53ca:	90 91 1e 03 	lds	r25, 0x031E
    53ce:	ca cf       	rjmp	.-108    	; 0x5364 <handleMotorsWithNoController+0x138>
	pwm_left = pwm_left_working;
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
    53d0:	00 97       	sbiw	r24, 0x00	; 0
    53d2:	09 f0       	breq	.+2      	; 0x53d6 <handleMotorsWithNoController+0x1aa>
    53d4:	4b c0       	rjmp	.+150    	; 0x546c <handleMotorsWithNoController+0x240>
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
    53d6:	10 92 99 00 	sts	0x0099, r1
    53da:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    53de:	10 92 9b 00 	sts	0x009B, r1
    53e2:	10 92 9a 00 	sts	0x009A, r1
    53e6:	cd cf       	rjmp	.-102    	; 0x5382 <handleMotorsWithNoController+0x156>
		right_vel_sum = 0;

		if(pwm_right_desired >= 0) {
			rightMotSteps += (last_right_vel>>3);
		} else {
			rightMotSteps -= (last_right_vel>>3);
    53e8:	75 95       	asr	r23
    53ea:	67 95       	ror	r22
    53ec:	75 95       	asr	r23
    53ee:	67 95       	ror	r22
    53f0:	75 95       	asr	r23
    53f2:	67 95       	ror	r22
    53f4:	88 27       	eor	r24, r24
    53f6:	77 fd       	sbrc	r23, 7
    53f8:	80 95       	com	r24
    53fa:	98 2f       	mov	r25, r24
    53fc:	0e 94 80 55 	call	0xab00	; 0xab00 <__floatsisf>
    5400:	9b 01       	movw	r18, r22
    5402:	ac 01       	movw	r20, r24
    5404:	60 91 e1 02 	lds	r22, 0x02E1
    5408:	70 91 e2 02 	lds	r23, 0x02E2
    540c:	80 91 e3 02 	lds	r24, 0x02E3
    5410:	90 91 e4 02 	lds	r25, 0x02E4
    5414:	0e 94 17 54 	call	0xa82e	; 0xa82e <__subsf3>
    5418:	60 93 e1 02 	sts	0x02E1, r22
    541c:	70 93 e2 02 	sts	0x02E2, r23
    5420:	80 93 e3 02 	sts	0x02E3, r24
    5424:	90 93 e4 02 	sts	0x02E4, r25
    5428:	79 cf       	rjmp	.-270    	; 0x531c <handleMotorsWithNoController+0xf0>
		left_vel_sum = 0;

		if(pwm_left_desired >= 0) {
			leftMotSteps += (last_left_vel>>3);
		} else {
			leftMotSteps -= (last_left_vel>>3);
    542a:	75 95       	asr	r23
    542c:	67 95       	ror	r22
    542e:	75 95       	asr	r23
    5430:	67 95       	ror	r22
    5432:	75 95       	asr	r23
    5434:	67 95       	ror	r22
    5436:	88 27       	eor	r24, r24
    5438:	77 fd       	sbrc	r23, 7
    543a:	80 95       	com	r24
    543c:	98 2f       	mov	r25, r24
    543e:	0e 94 80 55 	call	0xab00	; 0xab00 <__floatsisf>
    5442:	9b 01       	movw	r18, r22
    5444:	ac 01       	movw	r20, r24
    5446:	60 91 e5 02 	lds	r22, 0x02E5
    544a:	70 91 e6 02 	lds	r23, 0x02E6
    544e:	80 91 e7 02 	lds	r24, 0x02E7
    5452:	90 91 e8 02 	lds	r25, 0x02E8
    5456:	0e 94 17 54 	call	0xa82e	; 0xa82e <__subsf3>
    545a:	60 93 e5 02 	sts	0x02E5, r22
    545e:	70 93 e6 02 	sts	0x02E6, r23
    5462:	80 93 e7 02 	sts	0x02E7, r24
    5466:	90 93 e8 02 	sts	0x02E8, r25
    546a:	1c cf       	rjmp	.-456    	; 0x52a4 <handleMotorsWithNoController+0x78>
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
		OCR3B = (unsigned int)(-pwm_right);
    546c:	90 95       	com	r25
    546e:	81 95       	neg	r24
    5470:	9f 4f       	sbci	r25, 0xFF	; 255
    5472:	90 93 9b 00 	sts	0x009B, r25
    5476:	80 93 9a 00 	sts	0x009A, r24
    547a:	83 cf       	rjmp	.-250    	; 0x5382 <handleMotorsWithNoController+0x156>
		OCR3B = 0;
	}
	if(pwm_left > 0) {
		OCR4A = (unsigned int)pwm_left;
	} else if(pwm_left < 0) {
		OCR4B =(unsigned int)( -pwm_left);
    547c:	90 95       	com	r25
    547e:	81 95       	neg	r24
    5480:	9f 4f       	sbci	r25, 0xFF	; 255
    5482:	90 93 ab 00 	sts	0x00AB, r25
    5486:	80 93 aa 00 	sts	0x00AA, r24
    548a:	08 95       	ret

0000548c <setLeftSpeed>:
}

// vel expressed in 1/5 of mm/s
void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    548c:	28 2f       	mov	r18, r24
    548e:	33 27       	eor	r19, r19
    5490:	27 fd       	sbrc	r18, 7
    5492:	30 95       	com	r19
    5494:	37 fd       	sbrc	r19, 7
    5496:	13 c0       	rjmp	.+38     	; 0x54be <setLeftSpeed+0x32>
    5498:	30 93 22 03 	sts	0x0322, r19
    549c:	20 93 21 03 	sts	0x0321, r18

    if(vel >= 0) {
    54a0:	87 fd       	sbrc	r24, 7
    54a2:	05 c0       	rjmp	.+10     	; 0x54ae <setLeftSpeed+0x22>
        pwm_left_desired = speedl;
    } else {
        pwm_left_desired = -(speedl);
    54a4:	30 93 0c 03 	sts	0x030C, r19
    54a8:	20 93 0b 03 	sts	0x030B, r18
    54ac:	08 95       	ret
    54ae:	30 95       	com	r19
    54b0:	21 95       	neg	r18
    54b2:	3f 4f       	sbci	r19, 0xFF	; 255
    54b4:	30 93 0c 03 	sts	0x030C, r19
    54b8:	20 93 0b 03 	sts	0x030B, r18
    54bc:	08 95       	ret
}

// vel expressed in 1/5 of mm/s
void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    54be:	30 95       	com	r19
    54c0:	21 95       	neg	r18
    54c2:	3f 4f       	sbci	r19, 0xFF	; 255
    54c4:	e9 cf       	rjmp	.-46     	; 0x5498 <setLeftSpeed+0xc>

000054c6 <setRightSpeed>:

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    54c6:	28 2f       	mov	r18, r24
    54c8:	33 27       	eor	r19, r19
    54ca:	27 fd       	sbrc	r18, 7
    54cc:	30 95       	com	r19
    54ce:	37 fd       	sbrc	r19, 7
    54d0:	13 c0       	rjmp	.+38     	; 0x54f8 <setRightSpeed+0x32>
    54d2:	30 93 24 03 	sts	0x0324, r19
    54d6:	20 93 23 03 	sts	0x0323, r18

    if(vel >= 0) {
    54da:	87 fd       	sbrc	r24, 7
    54dc:	05 c0       	rjmp	.+10     	; 0x54e8 <setRightSpeed+0x22>
        pwm_right_desired = speedr;
    } else {
        pwm_right_desired = -(speedr);
    54de:	30 93 0a 03 	sts	0x030A, r19
    54e2:	20 93 09 03 	sts	0x0309, r18
    54e6:	08 95       	ret
    54e8:	30 95       	com	r19
    54ea:	21 95       	neg	r18
    54ec:	3f 4f       	sbci	r19, 0xFF	; 255
    54ee:	30 93 0a 03 	sts	0x030A, r19
    54f2:	20 93 09 03 	sts	0x0309, r18
    54f6:	08 95       	ret

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    54f8:	30 95       	com	r19
    54fa:	21 95       	neg	r18
    54fc:	3f 4f       	sbci	r19, 0xFF	; 255
    54fe:	e9 cf       	rjmp	.-46     	; 0x54d2 <setRightSpeed+0xc>

00005500 <updateOdomData>:
}


void updateOdomData() {

    if(calibWheel == LEFT_WHEEL_FW_SC) {
    5500:	80 91 5b 05 	lds	r24, 0x055B
    5504:	88 23       	and	r24, r24
    5506:	89 f5       	brne	.+98     	; 0x556a <updateOdomData+0x6a>
        if(calibVelIndex>1) {
    5508:	e0 91 c3 08 	lds	r30, 0x08C3
    550c:	e2 30       	cpi	r30, 0x02	; 2
    550e:	08 f4       	brcc	.+2      	; 0x5512 <updateOdomData+0x12>
    5510:	96 c0       	rjmp	.+300    	; 0x563e <updateOdomData+0x13e>
            if(calibration[calibVelIndex-2][1] >= tempVel) {  // check that we have always increasing values of speed, otherwise there
    5512:	f0 e0       	ldi	r31, 0x00	; 0
    5514:	df 01       	movw	r26, r30
    5516:	a2 95       	swap	r26
    5518:	b2 95       	swap	r27
    551a:	b0 7f       	andi	r27, 0xF0	; 240
    551c:	ba 27       	eor	r27, r26
    551e:	a0 7f       	andi	r26, 0xF0	; 240
    5520:	ba 27       	eor	r27, r26
    5522:	a6 53       	subi	r26, 0x36	; 54
    5524:	b7 4f       	sbci	r27, 0xF7	; 247
    5526:	12 96       	adiw	r26, 0x02	; 2
    5528:	2d 91       	ld	r18, X+
    552a:	3c 91       	ld	r19, X
    552c:	13 97       	sbiw	r26, 0x03	; 3
    552e:	80 91 7e 0b 	lds	r24, 0x0B7E
    5532:	90 91 7f 0b 	lds	r25, 0x0B7F
    5536:	28 17       	cp	r18, r24
    5538:	39 07       	cpc	r19, r25
    553a:	34 f0       	brlt	.+12     	; 0x5548 <updateOdomData+0x48>
                tempVel = calibration[calibVelIndex-2][1]+1; // will be problems when getting data from the lookup table
    553c:	c9 01       	movw	r24, r18
    553e:	01 96       	adiw	r24, 0x01	; 1
    5540:	90 93 7f 0b 	sts	0x0B7F, r25
    5544:	80 93 7e 0b 	sts	0x0B7E, r24
            }
        }
        calibration[calibVelIndex-1][0] = avgLeftSpeed;
    5548:	e2 95       	swap	r30
    554a:	f2 95       	swap	r31
    554c:	f0 7f       	andi	r31, 0xF0	; 240
    554e:	fe 27       	eor	r31, r30
    5550:	e0 7f       	andi	r30, 0xF0	; 240
    5552:	fe 27       	eor	r31, r30
    5554:	e6 52       	subi	r30, 0x26	; 38
    5556:	f7 4f       	sbci	r31, 0xF7	; 247
    5558:	20 91 c4 04 	lds	r18, 0x04C4
    555c:	30 91 c5 04 	lds	r19, 0x04C5
    5560:	31 83       	std	Z+1, r19	; 0x01
    5562:	20 83       	st	Z, r18
        calibration[calibVelIndex-1][1] = tempVel;
    5564:	93 83       	std	Z+3, r25	; 0x03
    5566:	82 83       	std	Z+2, r24	; 0x02
    5568:	08 95       	ret
    } else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    556a:	81 30       	cpi	r24, 0x01	; 1
    556c:	31 f0       	breq	.+12     	; 0x557a <updateOdomData+0x7a>
                tempVel = calibration[calibVelIndex-2][3]+1;
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
        calibration[calibVelIndex-1][3] = tempVel;
    } else if(calibWheel == LEFT_WHEEL_BW_SC) {
    556e:	82 30       	cpi	r24, 0x02	; 2
    5570:	09 f4       	brne	.+2      	; 0x5574 <updateOdomData+0x74>
    5572:	6b c0       	rjmp	.+214    	; 0x564a <updateOdomData+0x14a>
                tempVel = calibration[calibVelIndex-2][5]+1;
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
        calibration[calibVelIndex-1][5] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    5574:	83 30       	cpi	r24, 0x03	; 3
    5576:	91 f1       	breq	.+100    	; 0x55dc <updateOdomData+0xdc>
    5578:	08 95       	ret
            }
        }
        calibration[calibVelIndex-1][0] = avgLeftSpeed;
        calibration[calibVelIndex-1][1] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_FW_SC) {
        if(calibVelIndex>1) {
    557a:	e0 91 c3 08 	lds	r30, 0x08C3
    557e:	e2 30       	cpi	r30, 0x02	; 2
    5580:	08 f4       	brcc	.+2      	; 0x5584 <updateOdomData+0x84>
    5582:	93 c0       	rjmp	.+294    	; 0x56aa <updateOdomData+0x1aa>
            if(calibration[calibVelIndex-2][3] >= tempVel) {
    5584:	f0 e0       	ldi	r31, 0x00	; 0
    5586:	df 01       	movw	r26, r30
    5588:	a2 95       	swap	r26
    558a:	b2 95       	swap	r27
    558c:	b0 7f       	andi	r27, 0xF0	; 240
    558e:	ba 27       	eor	r27, r26
    5590:	a0 7f       	andi	r26, 0xF0	; 240
    5592:	ba 27       	eor	r27, r26
    5594:	a6 53       	subi	r26, 0x36	; 54
    5596:	b7 4f       	sbci	r27, 0xF7	; 247
    5598:	16 96       	adiw	r26, 0x06	; 6
    559a:	2d 91       	ld	r18, X+
    559c:	3c 91       	ld	r19, X
    559e:	17 97       	sbiw	r26, 0x07	; 7
    55a0:	80 91 7e 0b 	lds	r24, 0x0B7E
    55a4:	90 91 7f 0b 	lds	r25, 0x0B7F
    55a8:	28 17       	cp	r18, r24
    55aa:	39 07       	cpc	r19, r25
    55ac:	34 f0       	brlt	.+12     	; 0x55ba <updateOdomData+0xba>
                tempVel = calibration[calibVelIndex-2][3]+1;
    55ae:	c9 01       	movw	r24, r18
    55b0:	01 96       	adiw	r24, 0x01	; 1
    55b2:	90 93 7f 0b 	sts	0x0B7F, r25
    55b6:	80 93 7e 0b 	sts	0x0B7E, r24
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
    55ba:	e2 95       	swap	r30
    55bc:	f2 95       	swap	r31
    55be:	f0 7f       	andi	r31, 0xF0	; 240
    55c0:	fe 27       	eor	r31, r30
    55c2:	e0 7f       	andi	r30, 0xF0	; 240
    55c4:	fe 27       	eor	r31, r30
    55c6:	e6 52       	subi	r30, 0x26	; 38
    55c8:	f7 4f       	sbci	r31, 0xF7	; 247
    55ca:	20 91 c6 04 	lds	r18, 0x04C6
    55ce:	30 91 c7 04 	lds	r19, 0x04C7
    55d2:	35 83       	std	Z+5, r19	; 0x05
    55d4:	24 83       	std	Z+4, r18	; 0x04
        calibration[calibVelIndex-1][3] = tempVel;
    55d6:	97 83       	std	Z+7, r25	; 0x07
    55d8:	86 83       	std	Z+6, r24	; 0x06
    55da:	08 95       	ret
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
        calibration[calibVelIndex-1][5] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    55dc:	e0 91 c3 08 	lds	r30, 0x08C3
    55e0:	e2 30       	cpi	r30, 0x02	; 2
    55e2:	08 f4       	brcc	.+2      	; 0x55e6 <updateOdomData+0xe6>
    55e4:	68 c0       	rjmp	.+208    	; 0x56b6 <updateOdomData+0x1b6>
            if(calibration[calibVelIndex-2][7] >= tempVel) {
    55e6:	f0 e0       	ldi	r31, 0x00	; 0
    55e8:	df 01       	movw	r26, r30
    55ea:	a2 95       	swap	r26
    55ec:	b2 95       	swap	r27
    55ee:	b0 7f       	andi	r27, 0xF0	; 240
    55f0:	ba 27       	eor	r27, r26
    55f2:	a0 7f       	andi	r26, 0xF0	; 240
    55f4:	ba 27       	eor	r27, r26
    55f6:	a6 53       	subi	r26, 0x36	; 54
    55f8:	b7 4f       	sbci	r27, 0xF7	; 247
    55fa:	1e 96       	adiw	r26, 0x0e	; 14
    55fc:	2d 91       	ld	r18, X+
    55fe:	3c 91       	ld	r19, X
    5600:	1f 97       	sbiw	r26, 0x0f	; 15
    5602:	80 91 7e 0b 	lds	r24, 0x0B7E
    5606:	90 91 7f 0b 	lds	r25, 0x0B7F
    560a:	28 17       	cp	r18, r24
    560c:	39 07       	cpc	r19, r25
    560e:	34 f0       	brlt	.+12     	; 0x561c <updateOdomData+0x11c>
                tempVel = calibration[calibVelIndex-2][7]+1;
    5610:	c9 01       	movw	r24, r18
    5612:	01 96       	adiw	r24, 0x01	; 1
    5614:	90 93 7f 0b 	sts	0x0B7F, r25
    5618:	80 93 7e 0b 	sts	0x0B7E, r24
            }
        }
		calibration[calibVelIndex-1][6] = avgRightSpeed;
    561c:	e2 95       	swap	r30
    561e:	f2 95       	swap	r31
    5620:	f0 7f       	andi	r31, 0xF0	; 240
    5622:	fe 27       	eor	r31, r30
    5624:	e0 7f       	andi	r30, 0xF0	; 240
    5626:	fe 27       	eor	r31, r30
    5628:	e6 52       	subi	r30, 0x26	; 38
    562a:	f7 4f       	sbci	r31, 0xF7	; 247
    562c:	20 91 c6 04 	lds	r18, 0x04C6
    5630:	30 91 c7 04 	lds	r19, 0x04C7
    5634:	35 87       	std	Z+13, r19	; 0x0d
    5636:	24 87       	std	Z+12, r18	; 0x0c
        calibration[calibVelIndex-1][7] = tempVel;
    5638:	97 87       	std	Z+15, r25	; 0x0f
    563a:	86 87       	std	Z+14, r24	; 0x0e
    563c:	08 95       	ret


void updateOdomData() {

    if(calibWheel == LEFT_WHEEL_FW_SC) {
        if(calibVelIndex>1) {
    563e:	f0 e0       	ldi	r31, 0x00	; 0
    5640:	80 91 7e 0b 	lds	r24, 0x0B7E
    5644:	90 91 7f 0b 	lds	r25, 0x0B7F
    5648:	7f cf       	rjmp	.-258    	; 0x5548 <updateOdomData+0x48>
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
        calibration[calibVelIndex-1][3] = tempVel;
    } else if(calibWheel == LEFT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    564a:	e0 91 c3 08 	lds	r30, 0x08C3
    564e:	e2 30       	cpi	r30, 0x02	; 2
    5650:	c0 f1       	brcs	.+112    	; 0x56c2 <updateOdomData+0x1c2>
            if(calibration[calibVelIndex-2][5] >= tempVel) {
    5652:	f0 e0       	ldi	r31, 0x00	; 0
    5654:	df 01       	movw	r26, r30
    5656:	a2 95       	swap	r26
    5658:	b2 95       	swap	r27
    565a:	b0 7f       	andi	r27, 0xF0	; 240
    565c:	ba 27       	eor	r27, r26
    565e:	a0 7f       	andi	r26, 0xF0	; 240
    5660:	ba 27       	eor	r27, r26
    5662:	a6 53       	subi	r26, 0x36	; 54
    5664:	b7 4f       	sbci	r27, 0xF7	; 247
    5666:	1a 96       	adiw	r26, 0x0a	; 10
    5668:	2d 91       	ld	r18, X+
    566a:	3c 91       	ld	r19, X
    566c:	1b 97       	sbiw	r26, 0x0b	; 11
    566e:	80 91 7e 0b 	lds	r24, 0x0B7E
    5672:	90 91 7f 0b 	lds	r25, 0x0B7F
    5676:	28 17       	cp	r18, r24
    5678:	39 07       	cpc	r19, r25
    567a:	34 f0       	brlt	.+12     	; 0x5688 <updateOdomData+0x188>
                tempVel = calibration[calibVelIndex-2][5]+1;
    567c:	c9 01       	movw	r24, r18
    567e:	01 96       	adiw	r24, 0x01	; 1
    5680:	90 93 7f 0b 	sts	0x0B7F, r25
    5684:	80 93 7e 0b 	sts	0x0B7E, r24
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
    5688:	e2 95       	swap	r30
    568a:	f2 95       	swap	r31
    568c:	f0 7f       	andi	r31, 0xF0	; 240
    568e:	fe 27       	eor	r31, r30
    5690:	e0 7f       	andi	r30, 0xF0	; 240
    5692:	fe 27       	eor	r31, r30
    5694:	e6 52       	subi	r30, 0x26	; 38
    5696:	f7 4f       	sbci	r31, 0xF7	; 247
    5698:	20 91 c4 04 	lds	r18, 0x04C4
    569c:	30 91 c5 04 	lds	r19, 0x04C5
    56a0:	31 87       	std	Z+9, r19	; 0x09
    56a2:	20 87       	std	Z+8, r18	; 0x08
        calibration[calibVelIndex-1][5] = tempVel;
    56a4:	93 87       	std	Z+11, r25	; 0x0b
    56a6:	82 87       	std	Z+10, r24	; 0x0a
    56a8:	08 95       	ret
            }
        }
        calibration[calibVelIndex-1][0] = avgLeftSpeed;
        calibration[calibVelIndex-1][1] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_FW_SC) {
        if(calibVelIndex>1) {
    56aa:	f0 e0       	ldi	r31, 0x00	; 0
    56ac:	80 91 7e 0b 	lds	r24, 0x0B7E
    56b0:	90 91 7f 0b 	lds	r25, 0x0B7F
    56b4:	82 cf       	rjmp	.-252    	; 0x55ba <updateOdomData+0xba>
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
        calibration[calibVelIndex-1][5] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    56b6:	f0 e0       	ldi	r31, 0x00	; 0
    56b8:	80 91 7e 0b 	lds	r24, 0x0B7E
    56bc:	90 91 7f 0b 	lds	r25, 0x0B7F
    56c0:	ad cf       	rjmp	.-166    	; 0x561c <updateOdomData+0x11c>
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
        calibration[calibVelIndex-1][3] = tempVel;
    } else if(calibWheel == LEFT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    56c2:	f0 e0       	ldi	r31, 0x00	; 0
    56c4:	80 91 7e 0b 	lds	r24, 0x0B7E
    56c8:	90 91 7f 0b 	lds	r25, 0x0B7F
    56cc:	dd cf       	rjmp	.-70     	; 0x5688 <updateOdomData+0x188>

000056ce <handleCalibration>:

}

void handleCalibration() {

	switch(calibState) {
    56ce:	80 91 69 0b 	lds	r24, 0x0B69
    56d2:	84 30       	cpi	r24, 0x04	; 4
    56d4:	09 f4       	brne	.+2      	; 0x56d8 <handleCalibration+0xa>
    56d6:	d6 c1       	rjmp	.+940    	; 0x5a84 <handleCalibration+0x3b6>
    56d8:	85 30       	cpi	r24, 0x05	; 5
    56da:	80 f0       	brcs	.+32     	; 0x56fc <handleCalibration+0x2e>
    56dc:	86 30       	cpi	r24, 0x06	; 6
    56de:	09 f4       	brne	.+2      	; 0x56e2 <handleCalibration+0x14>
    56e0:	83 c2       	rjmp	.+1286   	; 0x5be8 <handleCalibration+0x51a>
    56e2:	86 30       	cpi	r24, 0x06	; 6
    56e4:	b0 f5       	brcc	.+108    	; 0x5752 <handleCalibration+0x84>
                calibState = CALIBRATION_STATE_NEXT;
			}
            break;

		case CALIBRATION_STATE_NEXT:
        	calibVelIndex++;
    56e6:	80 91 c3 08 	lds	r24, 0x08C3
    56ea:	8f 5f       	subi	r24, 0xFF	; 255
    56ec:	80 93 c3 08 	sts	0x08C3, r24
            if(calibVelIndex == 10) {
    56f0:	8a 30       	cpi	r24, 0x0A	; 10
    56f2:	09 f4       	brne	.+2      	; 0x56f6 <handleCalibration+0x28>
    56f4:	c3 c2       	rjmp	.+1414   	; 0x5c7c <handleCalibration+0x5ae>
					// red off
					writeCalibrationToFlash();
					calibrateOdomFlag = 0;
				}
			}
			calibState = CALIBRATION_STATE_SET_SPEED;
    56f6:	10 92 69 0b 	sts	0x0B69, r1
    56fa:	08 95       	ret

}

void handleCalibration() {

	switch(calibState) {
    56fc:	81 30       	cpi	r24, 0x01	; 1
    56fe:	09 f4       	brne	.+2      	; 0x5702 <handleCalibration+0x34>
    5700:	72 c1       	rjmp	.+740    	; 0x59e6 <handleCalibration+0x318>
    5702:	81 30       	cpi	r24, 0x01	; 1
    5704:	08 f0       	brcs	.+2      	; 0x5708 <handleCalibration+0x3a>
    5706:	73 c0       	rjmp	.+230    	; 0x57ee <handleCalibration+0x120>
			}
			break;


    	case CALIBRATION_STATE_SET_SPEED: // set speed
        	if(calibWheel == LEFT_WHEEL_FW_SC) {
    5708:	80 91 5b 05 	lds	r24, 0x055B
    570c:	88 23       	and	r24, r24
    570e:	09 f0       	breq	.+2      	; 0x5712 <handleCalibration+0x44>
    5710:	79 c2       	rjmp	.+1266   	; 0x5c04 <handleCalibration+0x536>
				pwm_intermediate_right_desired = 0;
    5712:	10 92 0e 03 	sts	0x030E, r1
    5716:	10 92 0d 03 	sts	0x030D, r1
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
    571a:	90 91 c3 08 	lds	r25, 0x08C3
    571e:	85 e0       	ldi	r24, 0x05	; 5
    5720:	98 9f       	mul	r25, r24
    5722:	c0 01       	movw	r24, r0
    5724:	11 24       	eor	r1, r1
    5726:	88 0f       	add	r24, r24
    5728:	99 1f       	adc	r25, r25
    572a:	88 0f       	add	r24, r24
    572c:	99 1f       	adc	r25, r25
    572e:	90 93 10 03 	sts	0x0310, r25
    5732:	80 93 0f 03 	sts	0x030F, r24
				pwm_intermediate_left_desired = -((INDEX_STEP*calibVelIndex)<<2);
        	} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
				pwm_intermediate_right_desired = -((INDEX_STEP*calibVelIndex)<<2);
				pwm_intermediate_left_desired = 0;
			}               
            calibState = CALIBRATION_STATE_START_MEASURE;
    5736:	81 e0       	ldi	r24, 0x01	; 1
    5738:	80 93 69 0b 	sts	0x0B69, r24
            timeoutOdometry = getTime100MicroSec();
    573c:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
    5740:	60 93 39 0b 	sts	0x0B39, r22
    5744:	70 93 3a 0b 	sts	0x0B3A, r23
    5748:	80 93 3b 0b 	sts	0x0B3B, r24
    574c:	90 93 3c 0b 	sts	0x0B3C, r25
            break;
    5750:	08 95       	ret

}

void handleCalibration() {

	switch(calibState) {
    5752:	87 30       	cpi	r24, 0x07	; 7
    5754:	09 f4       	brne	.+2      	; 0x5758 <handleCalibration+0x8a>
    5756:	02 c2       	rjmp	.+1028   	; 0x5b5c <handleCalibration+0x48e>
    5758:	88 30       	cpi	r24, 0x08	; 8
    575a:	79 f6       	brne	.-98     	; 0x56fa <handleCalibration+0x2c>
	            timeoutOdometry = getTime100MicroSec();
			}
			break;

		case CALIBRATION_STATE_FIND_THRS_2:	// Wait for 5 seconds during which the ground min and max values are saved.
			if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    575c:	80 91 5b 05 	lds	r24, 0x055B
    5760:	88 23       	and	r24, r24
    5762:	09 f4       	brne	.+2      	; 0x5766 <handleCalibration+0x98>
    5764:	dc c0       	rjmp	.+440    	; 0x591e <handleCalibration+0x250>
    5766:	82 30       	cpi	r24, 0x02	; 2
    5768:	09 f4       	brne	.+2      	; 0x576c <handleCalibration+0x9e>
    576a:	d9 c0       	rjmp	.+434    	; 0x591e <handleCalibration+0x250>
				}
				if(proximityResult[8] > maxGround) {
					maxGround = proximityResult[8];
				}
			} else {
				if(proximityResult[11] < minGround) {
    576c:	80 91 7f 02 	lds	r24, 0x027F
    5770:	90 91 80 02 	lds	r25, 0x0280
    5774:	20 91 d4 04 	lds	r18, 0x04D4
    5778:	30 91 d5 04 	lds	r19, 0x04D5
    577c:	82 17       	cp	r24, r18
    577e:	93 07       	cpc	r25, r19
    5780:	0c f4       	brge	.+2      	; 0x5784 <handleCalibration+0xb6>
    5782:	d9 c0       	rjmp	.+434    	; 0x5936 <handleCalibration+0x268>
					minGround = proximityResult[11];
				}
				if(proximityResult[11] > maxGround) {
    5784:	20 91 d6 04 	lds	r18, 0x04D6
    5788:	30 91 d7 04 	lds	r19, 0x04D7
    578c:	28 17       	cp	r18, r24
    578e:	39 07       	cpc	r19, r25
    5790:	24 f4       	brge	.+8      	; 0x579a <handleCalibration+0xcc>
					maxGround = proximityResult[11];
    5792:	90 93 d7 04 	sts	0x04D7, r25
    5796:	80 93 d6 04 	sts	0x04D6, r24
				}
			}
			if((getTime100MicroSec() - timeoutOdometry)>PAUSE_5_SEC) {    // the robot seems to be still, go to next velcoity
    579a:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
    579e:	20 91 39 0b 	lds	r18, 0x0B39
    57a2:	30 91 3a 0b 	lds	r19, 0x0B3A
    57a6:	40 91 3b 0b 	lds	r20, 0x0B3B
    57aa:	50 91 3c 0b 	lds	r21, 0x0B3C
    57ae:	62 1b       	sub	r22, r18
    57b0:	73 0b       	sbc	r23, r19
    57b2:	84 0b       	sbc	r24, r20
    57b4:	95 0b       	sbc	r25, r21
    57b6:	6e 3c       	cpi	r22, 0xCE	; 206
    57b8:	2b eb       	ldi	r18, 0xBB	; 187
    57ba:	72 07       	cpc	r23, r18
    57bc:	20 e0       	ldi	r18, 0x00	; 0
    57be:	82 07       	cpc	r24, r18
    57c0:	20 e0       	ldi	r18, 0x00	; 0
    57c2:	92 07       	cpc	r25, r18
    57c4:	08 f4       	brcc	.+2      	; 0x57c8 <handleCalibration+0xfa>
    57c6:	99 cf       	rjmp	.-206    	; 0x56fa <handleCalibration+0x2c>
				calibrationThr = (minGround + maxGround)>>1;	// Take the average of the 2 as the reference threshold value.
    57c8:	80 91 d6 04 	lds	r24, 0x04D6
    57cc:	90 91 d7 04 	lds	r25, 0x04D7
    57d0:	20 91 d4 04 	lds	r18, 0x04D4
    57d4:	30 91 d5 04 	lds	r19, 0x04D5
    57d8:	82 0f       	add	r24, r18
    57da:	93 1f       	adc	r25, r19
    57dc:	95 95       	asr	r25
    57de:	87 95       	ror	r24
    57e0:	90 93 d9 04 	sts	0x04D9, r25
    57e4:	80 93 d8 04 	sts	0x04D8, r24
				//calibrationThrLow = calibrationThr - ((maxGround-minGround)>>2);	// Use an histeresys between max and min (not needed...).
				//calibrationThrHigh = calibrationThr + ((maxGround-minGround)>>2);
                calibState = CALIBRATION_STATE_SET_SPEED;
    57e8:	10 92 69 0b 	sts	0x0B69, r1
    57ec:	08 95       	ret

}

void handleCalibration() {

	switch(calibState) {
    57ee:	82 30       	cpi	r24, 0x02	; 2
    57f0:	09 f4       	brne	.+2      	; 0x57f4 <handleCalibration+0x126>
    57f2:	87 c1       	rjmp	.+782    	; 0x5b02 <handleCalibration+0x434>
    57f4:	83 30       	cpi	r24, 0x03	; 3
    57f6:	09 f0       	breq	.+2      	; 0x57fa <handleCalibration+0x12c>
    57f8:	80 cf       	rjmp	.-256    	; 0x56fa <handleCalibration+0x2c>
                calibState = CALIBRATION_STATE_NEXT;
			}
            break;

		case CALIBRATION_STATE_STOP_MEASURE: // look for black line again, stop time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    57fa:	80 91 5b 05 	lds	r24, 0x055B
    57fe:	88 23       	and	r24, r24
    5800:	09 f4       	brne	.+2      	; 0x5804 <handleCalibration+0x136>
    5802:	9e c0       	rjmp	.+316    	; 0x5940 <handleCalibration+0x272>
    5804:	82 30       	cpi	r24, 0x02	; 2
    5806:	09 f4       	brne	.+2      	; 0x580a <handleCalibration+0x13c>
    5808:	9b c0       	rjmp	.+310    	; 0x5940 <handleCalibration+0x272>
                    updateOdomData();
                    calibState = CALIBRATION_STATE_EXIT_BLACK_LINE_2;
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
				if(proximityResult[11] < calibrationThr) {	
    580a:	20 91 7f 02 	lds	r18, 0x027F
    580e:	30 91 80 02 	lds	r19, 0x0280
    5812:	80 91 d8 04 	lds	r24, 0x04D8
    5816:	90 91 d9 04 	lds	r25, 0x04D9
    581a:	28 17       	cp	r18, r24
    581c:	39 07       	cpc	r19, r25
    581e:	0c f0       	brlt	.+2      	; 0x5822 <handleCalibration+0x154>
    5820:	55 c0       	rjmp	.+170    	; 0x58cc <handleCalibration+0x1fe>
                	timeOdometry = getTime100MicroSec() - timeOdometry;
    5822:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
    5826:	20 91 54 05 	lds	r18, 0x0554
    582a:	30 91 55 05 	lds	r19, 0x0555
    582e:	40 91 56 05 	lds	r20, 0x0556
    5832:	50 91 57 05 	lds	r21, 0x0557
    5836:	62 1b       	sub	r22, r18
    5838:	73 0b       	sbc	r23, r19
    583a:	84 0b       	sbc	r24, r20
    583c:	95 0b       	sbc	r25, r21
    583e:	60 93 54 05 	sts	0x0554, r22
    5842:	70 93 55 05 	sts	0x0555, r23
    5846:	80 93 56 05 	sts	0x0556, r24
    584a:	90 93 57 05 	sts	0x0557, r25
                    tempVel = (unsigned int)(DISTANCE_MM/((float)timeOdometry*104.0/1000000.0));
    584e:	0e 94 7e 55 	call	0xaafc	; 0xaafc <__floatunsisf>
    5852:	20 e0       	ldi	r18, 0x00	; 0
    5854:	30 e0       	ldi	r19, 0x00	; 0
    5856:	40 ed       	ldi	r20, 0xD0	; 208
    5858:	52 e4       	ldi	r21, 0x42	; 66
    585a:	0e 94 99 56 	call	0xad32	; 0xad32 <__mulsf3>
    585e:	20 e0       	ldi	r18, 0x00	; 0
    5860:	34 e2       	ldi	r19, 0x24	; 36
    5862:	44 e7       	ldi	r20, 0x74	; 116
    5864:	59 e4       	ldi	r21, 0x49	; 73
    5866:	0e 94 e5 54 	call	0xa9ca	; 0xa9ca <__divsf3>
    586a:	9b 01       	movw	r18, r22
    586c:	ac 01       	movw	r20, r24
    586e:	64 e1       	ldi	r22, 0x14	; 20
    5870:	7e e2       	ldi	r23, 0x2E	; 46
    5872:	88 e7       	ldi	r24, 0x78	; 120
    5874:	93 e4       	ldi	r25, 0x43	; 67
    5876:	0e 94 e5 54 	call	0xa9ca	; 0xa9ca <__divsf3>
    587a:	0e 94 52 55 	call	0xaaa4	; 0xaaa4 <__fixunssfsi>
    587e:	70 93 7f 0b 	sts	0x0B7F, r23
    5882:	60 93 7e 0b 	sts	0x0B7E, r22
                    avgRightSpeed = rightSpeedSumOdom/rightSumCount;
    5886:	20 91 c2 04 	lds	r18, 0x04C2
    588a:	30 91 c3 04 	lds	r19, 0x04C3
    588e:	40 e0       	ldi	r20, 0x00	; 0
    5890:	50 e0       	ldi	r21, 0x00	; 0
    5892:	60 91 bc 04 	lds	r22, 0x04BC
    5896:	70 91 bd 04 	lds	r23, 0x04BD
    589a:	80 91 be 04 	lds	r24, 0x04BE
    589e:	90 91 bf 04 	lds	r25, 0x04BF
    58a2:	0e 94 6a 57 	call	0xaed4	; 0xaed4 <__divmodsi4>
    58a6:	30 93 c7 04 	sts	0x04C7, r19
    58aa:	20 93 c6 04 	sts	0x04C6, r18
					updateOdomData();
    58ae:	0e 94 80 2a 	call	0x5500	; 0x5500 <updateOdomData>
                    calibState = CALIBRATION_STATE_EXIT_BLACK_LINE_2;
    58b2:	84 e0       	ldi	r24, 0x04	; 4
    58b4:	80 93 69 0b 	sts	0x0B69, r24
                    timeoutOdometry = getTime100MicroSec();;
    58b8:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
    58bc:	60 93 39 0b 	sts	0x0B39, r22
    58c0:	70 93 3a 0b 	sts	0x0B3A, r23
    58c4:	80 93 3b 0b 	sts	0x0B3B, r24
    58c8:	90 93 3c 0b 	sts	0x0B3C, r25
				}
			}
			if((getTime100MicroSec() - timeoutOdometry)>PAUSE_60_SEC) {    // the robot seems to be still, go to next velcoity
    58cc:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
    58d0:	20 91 39 0b 	lds	r18, 0x0B39
    58d4:	30 91 3a 0b 	lds	r19, 0x0B3A
    58d8:	40 91 3b 0b 	lds	r20, 0x0B3B
    58dc:	50 91 3c 0b 	lds	r21, 0x0B3C
    58e0:	62 1b       	sub	r22, r18
    58e2:	73 0b       	sbc	r23, r19
    58e4:	84 0b       	sbc	r24, r20
    58e6:	95 0b       	sbc	r25, r21
    58e8:	6c 39       	cpi	r22, 0x9C	; 156
    58ea:	2d ec       	ldi	r18, 0xCD	; 205
    58ec:	72 07       	cpc	r23, r18
    58ee:	28 e0       	ldi	r18, 0x08	; 8
    58f0:	82 07       	cpc	r24, r18
    58f2:	20 e0       	ldi	r18, 0x00	; 0
    58f4:	92 07       	cpc	r25, r18
    58f6:	08 f4       	brcc	.+2      	; 0x58fa <handleCalibration+0x22c>
    58f8:	00 cf       	rjmp	.-512    	; 0x56fa <handleCalibration+0x2c>
            	tempVel = 0;
    58fa:	10 92 7f 0b 	sts	0x0B7F, r1
    58fe:	10 92 7e 0b 	sts	0x0B7E, r1
				avgLeftSpeed = 0;
    5902:	10 92 c5 04 	sts	0x04C5, r1
    5906:	10 92 c4 04 	sts	0x04C4, r1
				avgRightSpeed = 0;
    590a:	10 92 c7 04 	sts	0x04C7, r1
    590e:	10 92 c6 04 	sts	0x04C6, r1
                updateOdomData();
    5912:	0e 94 80 2a 	call	0x5500	; 0x5500 <updateOdomData>
                calibState = CALIBRATION_STATE_NEXT;
    5916:	85 e0       	ldi	r24, 0x05	; 5
    5918:	80 93 69 0b 	sts	0x0B69, r24
    591c:	08 95       	ret
			}
			break;

		case CALIBRATION_STATE_FIND_THRS_2:	// Wait for 5 seconds during which the ground min and max values are saved.
			if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
				if(proximityResult[8] < minGround) {
    591e:	80 91 79 02 	lds	r24, 0x0279
    5922:	90 91 7a 02 	lds	r25, 0x027A
    5926:	20 91 d4 04 	lds	r18, 0x04D4
    592a:	30 91 d5 04 	lds	r19, 0x04D5
    592e:	82 17       	cp	r24, r18
    5930:	93 07       	cpc	r25, r19
    5932:	0c f0       	brlt	.+2      	; 0x5936 <handleCalibration+0x268>
    5934:	27 cf       	rjmp	.-434    	; 0x5784 <handleCalibration+0xb6>
				if(proximityResult[8] > maxGround) {
					maxGround = proximityResult[8];
				}
			} else {
				if(proximityResult[11] < minGround) {
					minGround = proximityResult[11];
    5936:	90 93 d5 04 	sts	0x04D5, r25
    593a:	80 93 d4 04 	sts	0x04D4, r24
    593e:	22 cf       	rjmp	.-444    	; 0x5784 <handleCalibration+0xb6>
			}
            break;

		case CALIBRATION_STATE_STOP_MEASURE: // look for black line again, stop time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
				if(proximityResult[8] < calibrationThr) {	
    5940:	20 91 79 02 	lds	r18, 0x0279
    5944:	30 91 7a 02 	lds	r19, 0x027A
    5948:	80 91 d8 04 	lds	r24, 0x04D8
    594c:	90 91 d9 04 	lds	r25, 0x04D9
    5950:	28 17       	cp	r18, r24
    5952:	39 07       	cpc	r19, r25
    5954:	0c f0       	brlt	.+2      	; 0x5958 <handleCalibration+0x28a>
    5956:	ba cf       	rjmp	.-140    	; 0x58cc <handleCalibration+0x1fe>
                	timeOdometry = getTime100MicroSec() - timeOdometry;
    5958:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
    595c:	20 91 54 05 	lds	r18, 0x0554
    5960:	30 91 55 05 	lds	r19, 0x0555
    5964:	40 91 56 05 	lds	r20, 0x0556
    5968:	50 91 57 05 	lds	r21, 0x0557
    596c:	62 1b       	sub	r22, r18
    596e:	73 0b       	sbc	r23, r19
    5970:	84 0b       	sbc	r24, r20
    5972:	95 0b       	sbc	r25, r21
    5974:	60 93 54 05 	sts	0x0554, r22
    5978:	70 93 55 05 	sts	0x0555, r23
    597c:	80 93 56 05 	sts	0x0556, r24
    5980:	90 93 57 05 	sts	0x0557, r25
                    tempVel = (unsigned int)(DISTANCE_MM/((float)timeOdometry*104.0/1000000.0));
    5984:	0e 94 7e 55 	call	0xaafc	; 0xaafc <__floatunsisf>
    5988:	20 e0       	ldi	r18, 0x00	; 0
    598a:	30 e0       	ldi	r19, 0x00	; 0
    598c:	40 ed       	ldi	r20, 0xD0	; 208
    598e:	52 e4       	ldi	r21, 0x42	; 66
    5990:	0e 94 99 56 	call	0xad32	; 0xad32 <__mulsf3>
    5994:	20 e0       	ldi	r18, 0x00	; 0
    5996:	34 e2       	ldi	r19, 0x24	; 36
    5998:	44 e7       	ldi	r20, 0x74	; 116
    599a:	59 e4       	ldi	r21, 0x49	; 73
    599c:	0e 94 e5 54 	call	0xa9ca	; 0xa9ca <__divsf3>
    59a0:	9b 01       	movw	r18, r22
    59a2:	ac 01       	movw	r20, r24
    59a4:	64 e1       	ldi	r22, 0x14	; 20
    59a6:	7e e2       	ldi	r23, 0x2E	; 46
    59a8:	88 e7       	ldi	r24, 0x78	; 120
    59aa:	93 e4       	ldi	r25, 0x43	; 67
    59ac:	0e 94 e5 54 	call	0xa9ca	; 0xa9ca <__divsf3>
    59b0:	0e 94 52 55 	call	0xaaa4	; 0xaaa4 <__fixunssfsi>
    59b4:	70 93 7f 0b 	sts	0x0B7F, r23
    59b8:	60 93 7e 0b 	sts	0x0B7E, r22
					avgLeftSpeed = leftSpeedSumOdom/leftSumCount;
    59bc:	20 91 c0 04 	lds	r18, 0x04C0
    59c0:	30 91 c1 04 	lds	r19, 0x04C1
    59c4:	40 e0       	ldi	r20, 0x00	; 0
    59c6:	50 e0       	ldi	r21, 0x00	; 0
    59c8:	60 91 b8 04 	lds	r22, 0x04B8
    59cc:	70 91 b9 04 	lds	r23, 0x04B9
    59d0:	80 91 ba 04 	lds	r24, 0x04BA
    59d4:	90 91 bb 04 	lds	r25, 0x04BB
    59d8:	0e 94 6a 57 	call	0xaed4	; 0xaed4 <__divmodsi4>
    59dc:	30 93 c5 04 	sts	0x04C5, r19
    59e0:	20 93 c4 04 	sts	0x04C4, r18
    59e4:	64 cf       	rjmp	.-312    	; 0x58ae <handleCalibration+0x1e0>
            calibState = CALIBRATION_STATE_START_MEASURE;
            timeoutOdometry = getTime100MicroSec();
            break;

		case CALIBRATION_STATE_START_MEASURE: // look for black line, start time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    59e6:	80 91 5b 05 	lds	r24, 0x055B
    59ea:	88 23       	and	r24, r24
    59ec:	91 f1       	breq	.+100    	; 0x5a52 <handleCalibration+0x384>
    59ee:	82 30       	cpi	r24, 0x02	; 2
    59f0:	81 f1       	breq	.+96     	; 0x5a52 <handleCalibration+0x384>
                    timeOdometry = getTime100MicroSec();;
                    calibState = CALIBRATION_STATE_EXIT_BLACK_LINE_1;
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
				if(proximityResult[11] < calibrationThr) {	
    59f2:	20 91 7f 02 	lds	r18, 0x027F
    59f6:	30 91 80 02 	lds	r19, 0x0280
    59fa:	80 91 d8 04 	lds	r24, 0x04D8
    59fe:	90 91 d9 04 	lds	r25, 0x04D9
    5a02:	28 17       	cp	r18, r24
    5a04:	39 07       	cpc	r19, r25
    5a06:	0c f0       	brlt	.+2      	; 0x5a0a <handleCalibration+0x33c>
    5a08:	61 cf       	rjmp	.-318    	; 0x58cc <handleCalibration+0x1fe>
					rightSumCount = 0;
    5a0a:	10 92 c3 04 	sts	0x04C3, r1
    5a0e:	10 92 c2 04 	sts	0x04C2, r1
					rightSpeedSumOdom = 0;
    5a12:	10 92 bc 04 	sts	0x04BC, r1
    5a16:	10 92 bd 04 	sts	0x04BD, r1
    5a1a:	10 92 be 04 	sts	0x04BE, r1
    5a1e:	10 92 bf 04 	sts	0x04BF, r1
                    timeOdometry = getTime100MicroSec();;
    5a22:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
    5a26:	60 93 54 05 	sts	0x0554, r22
    5a2a:	70 93 55 05 	sts	0x0555, r23
    5a2e:	80 93 56 05 	sts	0x0556, r24
    5a32:	90 93 57 05 	sts	0x0557, r25
                    calibState = CALIBRATION_STATE_EXIT_BLACK_LINE_1;
    5a36:	82 e0       	ldi	r24, 0x02	; 2
    5a38:	80 93 69 0b 	sts	0x0B69, r24
                    timeoutOdometry = getTime100MicroSec();;
    5a3c:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
    5a40:	60 93 39 0b 	sts	0x0B39, r22
    5a44:	70 93 3a 0b 	sts	0x0B3A, r23
    5a48:	80 93 3b 0b 	sts	0x0B3B, r24
    5a4c:	90 93 3c 0b 	sts	0x0B3C, r25
    5a50:	3d cf       	rjmp	.-390    	; 0x58cc <handleCalibration+0x1fe>
            timeoutOdometry = getTime100MicroSec();
            break;

		case CALIBRATION_STATE_START_MEASURE: // look for black line, start time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
				if(proximityResult[8] < calibrationThr) {				
    5a52:	20 91 79 02 	lds	r18, 0x0279
    5a56:	30 91 7a 02 	lds	r19, 0x027A
    5a5a:	80 91 d8 04 	lds	r24, 0x04D8
    5a5e:	90 91 d9 04 	lds	r25, 0x04D9
    5a62:	28 17       	cp	r18, r24
    5a64:	39 07       	cpc	r19, r25
    5a66:	0c f0       	brlt	.+2      	; 0x5a6a <handleCalibration+0x39c>
    5a68:	31 cf       	rjmp	.-414    	; 0x58cc <handleCalibration+0x1fe>
                	leftSumCount = 0;
    5a6a:	10 92 c1 04 	sts	0x04C1, r1
    5a6e:	10 92 c0 04 	sts	0x04C0, r1
                    leftSpeedSumOdom = 0;
    5a72:	10 92 b8 04 	sts	0x04B8, r1
    5a76:	10 92 b9 04 	sts	0x04B9, r1
    5a7a:	10 92 ba 04 	sts	0x04BA, r1
    5a7e:	10 92 bb 04 	sts	0x04BB, r1
    5a82:	cf cf       	rjmp	.-98     	; 0x5a22 <handleCalibration+0x354>
                calibState = CALIBRATION_STATE_NEXT;
			}
            break;

		case CALIBRATION_STATE_EXIT_BLACK_LINE_2: // exit from black line again
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    5a84:	80 91 5b 05 	lds	r24, 0x055B
    5a88:	88 23       	and	r24, r24
    5a8a:	61 f1       	breq	.+88     	; 0x5ae4 <handleCalibration+0x416>
    5a8c:	82 30       	cpi	r24, 0x02	; 2
    5a8e:	51 f1       	breq	.+84     	; 0x5ae4 <handleCalibration+0x416>
				if(proximityResult[8] > calibrationThr) {	
                	calibState = CALIBRATION_STATE_NEXT;
				}
			} else {
				if(proximityResult[11] > calibrationThr) {	
    5a90:	20 91 7f 02 	lds	r18, 0x027F
    5a94:	30 91 80 02 	lds	r19, 0x0280
    5a98:	80 91 d8 04 	lds	r24, 0x04D8
    5a9c:	90 91 d9 04 	lds	r25, 0x04D9
    5aa0:	82 17       	cp	r24, r18
    5aa2:	93 07       	cpc	r25, r19
    5aa4:	54 f1       	brlt	.+84     	; 0x5afa <handleCalibration+0x42c>
					calibState = CALIBRATION_STATE_NEXT;
				}
			}
            if((getTime100MicroSec() - timeoutOdometry)>PAUSE_60_SEC) {    // the robot seems to be still, go to next velocity
    5aa6:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
    5aaa:	20 91 39 0b 	lds	r18, 0x0B39
    5aae:	30 91 3a 0b 	lds	r19, 0x0B3A
    5ab2:	40 91 3b 0b 	lds	r20, 0x0B3B
    5ab6:	50 91 3c 0b 	lds	r21, 0x0B3C
    5aba:	62 1b       	sub	r22, r18
    5abc:	73 0b       	sbc	r23, r19
    5abe:	84 0b       	sbc	r24, r20
    5ac0:	95 0b       	sbc	r25, r21
    5ac2:	6c 39       	cpi	r22, 0x9C	; 156
    5ac4:	2d ec       	ldi	r18, 0xCD	; 205
    5ac6:	72 07       	cpc	r23, r18
    5ac8:	28 e0       	ldi	r18, 0x08	; 8
    5aca:	82 07       	cpc	r24, r18
    5acc:	20 e0       	ldi	r18, 0x00	; 0
    5ace:	92 07       	cpc	r25, r18
    5ad0:	08 f4       	brcc	.+2      	; 0x5ad4 <handleCalibration+0x406>
    5ad2:	13 ce       	rjmp	.-986    	; 0x56fa <handleCalibration+0x2c>
            	tempVel = 0;
    5ad4:	10 92 7f 0b 	sts	0x0B7F, r1
    5ad8:	10 92 7e 0b 	sts	0x0B7E, r1
                //updateOdomData();
                calibState = CALIBRATION_STATE_NEXT;
    5adc:	85 e0       	ldi	r24, 0x05	; 5
    5ade:	80 93 69 0b 	sts	0x0B69, r24
    5ae2:	08 95       	ret
			}
            break;

		case CALIBRATION_STATE_EXIT_BLACK_LINE_2: // exit from black line again
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
				if(proximityResult[8] > calibrationThr) {	
    5ae4:	20 91 79 02 	lds	r18, 0x0279
    5ae8:	30 91 7a 02 	lds	r19, 0x027A
    5aec:	80 91 d8 04 	lds	r24, 0x04D8
    5af0:	90 91 d9 04 	lds	r25, 0x04D9
    5af4:	82 17       	cp	r24, r18
    5af6:	93 07       	cpc	r25, r19
    5af8:	b4 f6       	brge	.-84     	; 0x5aa6 <handleCalibration+0x3d8>
                	calibState = CALIBRATION_STATE_NEXT;
				}
			} else {
				if(proximityResult[11] > calibrationThr) {	
					calibState = CALIBRATION_STATE_NEXT;
    5afa:	85 e0       	ldi	r24, 0x05	; 5
    5afc:	80 93 69 0b 	sts	0x0B69, r24
    5b00:	d2 cf       	rjmp	.-92     	; 0x5aa6 <handleCalibration+0x3d8>
                calibState = CALIBRATION_STATE_NEXT;
			}
			break;

		case CALIBRATION_STATE_EXIT_BLACK_LINE_1: // exit from black line
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    5b02:	80 91 5b 05 	lds	r24, 0x055B
    5b06:	88 23       	and	r24, r24
    5b08:	e1 f0       	breq	.+56     	; 0x5b42 <handleCalibration+0x474>
    5b0a:	82 30       	cpi	r24, 0x02	; 2
    5b0c:	d1 f0       	breq	.+52     	; 0x5b42 <handleCalibration+0x474>
				if(proximityResult[8] > calibrationThr) {	
                	calibState = CALIBRATION_STATE_STOP_MEASURE;
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
				if(proximityResult[11] > calibrationThr) {	
    5b0e:	20 91 7f 02 	lds	r18, 0x027F
    5b12:	30 91 80 02 	lds	r19, 0x0280
    5b16:	80 91 d8 04 	lds	r24, 0x04D8
    5b1a:	90 91 d9 04 	lds	r25, 0x04D9
    5b1e:	82 17       	cp	r24, r18
    5b20:	93 07       	cpc	r25, r19
    5b22:	0c f0       	brlt	.+2      	; 0x5b26 <handleCalibration+0x458>
    5b24:	d3 ce       	rjmp	.-602    	; 0x58cc <handleCalibration+0x1fe>
                	calibState = CALIBRATION_STATE_STOP_MEASURE;
    5b26:	83 e0       	ldi	r24, 0x03	; 3
    5b28:	80 93 69 0b 	sts	0x0B69, r24
                    timeoutOdometry = getTime100MicroSec();;
    5b2c:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
    5b30:	60 93 39 0b 	sts	0x0B39, r22
    5b34:	70 93 3a 0b 	sts	0x0B3A, r23
    5b38:	80 93 3b 0b 	sts	0x0B3B, r24
    5b3c:	90 93 3c 0b 	sts	0x0B3C, r25
    5b40:	c5 ce       	rjmp	.-630    	; 0x58cc <handleCalibration+0x1fe>
			}
			break;

		case CALIBRATION_STATE_EXIT_BLACK_LINE_1: // exit from black line
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
				if(proximityResult[8] > calibrationThr) {	
    5b42:	20 91 79 02 	lds	r18, 0x0279
    5b46:	30 91 7a 02 	lds	r19, 0x027A
    5b4a:	80 91 d8 04 	lds	r24, 0x04D8
    5b4e:	90 91 d9 04 	lds	r25, 0x04D9
    5b52:	82 17       	cp	r24, r18
    5b54:	93 07       	cpc	r25, r19
    5b56:	0c f0       	brlt	.+2      	; 0x5b5a <handleCalibration+0x48c>
    5b58:	b9 ce       	rjmp	.-654    	; 0x58cc <handleCalibration+0x1fe>
    5b5a:	e5 cf       	rjmp	.-54     	; 0x5b26 <handleCalibration+0x458>
			calibState = CALIBRATION_STATE_FIND_THRS_1;
			break;
		
		case CALIBRATION_STATE_FIND_THRS_1:	// Find the max and min of the ground sensor value in order to get a threshold to detect 
											// the black line securily (the threshold will be the average of the min and max).
			if((getTime100MicroSec() - timeoutOdometry)>PAUSE_1_SEC) { 	// Wait for the current sensor calibration to be terminated 
    5b5c:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
    5b60:	20 91 39 0b 	lds	r18, 0x0B39
    5b64:	30 91 3a 0b 	lds	r19, 0x0B3A
    5b68:	40 91 3b 0b 	lds	r20, 0x0B3B
    5b6c:	50 91 3c 0b 	lds	r21, 0x0B3C
    5b70:	62 1b       	sub	r22, r18
    5b72:	73 0b       	sbc	r23, r19
    5b74:	84 0b       	sbc	r24, r20
    5b76:	95 0b       	sbc	r25, r21
    5b78:	60 39       	cpi	r22, 0x90	; 144
    5b7a:	25 e2       	ldi	r18, 0x25	; 37
    5b7c:	72 07       	cpc	r23, r18
    5b7e:	20 e0       	ldi	r18, 0x00	; 0
    5b80:	82 07       	cpc	r24, r18
    5b82:	20 e0       	ldi	r18, 0x00	; 0
    5b84:	92 07       	cpc	r25, r18
    5b86:	08 f4       	brcc	.+2      	; 0x5b8a <handleCalibration+0x4bc>
    5b88:	b8 cd       	rjmp	.-1168   	; 0x56fa <handleCalibration+0x2c>
																		// (started when calibration is started).
				if(calibWheel == LEFT_WHEEL_FW_SC) {
    5b8a:	80 91 5b 05 	lds	r24, 0x055B
    5b8e:	88 23       	and	r24, r24
    5b90:	09 f4       	brne	.+2      	; 0x5b94 <handleCalibration+0x4c6>
    5b92:	56 c0       	rjmp	.+172    	; 0x5c40 <handleCalibration+0x572>
					pwm_intermediate_right_desired = 0;
					pwm_intermediate_left_desired = (INDEX_STEP*3)<<2;		// Use a moderate speed.
	        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    5b94:	81 30       	cpi	r24, 0x01	; 1
    5b96:	09 f4       	brne	.+2      	; 0x5b9a <handleCalibration+0x4cc>
    5b98:	a0 c0       	rjmp	.+320    	; 0x5cda <handleCalibration+0x60c>
					pwm_intermediate_right_desired = (INDEX_STEP*3)<<2;
					pwm_intermediate_left_desired = 0;
				} else if(calibWheel == LEFT_WHEEL_BW_SC) {
    5b9a:	82 30       	cpi	r24, 0x02	; 2
    5b9c:	09 f4       	brne	.+2      	; 0x5ba0 <handleCalibration+0x4d2>
    5b9e:	a8 c0       	rjmp	.+336    	; 0x5cf0 <handleCalibration+0x622>
					pwm_intermediate_right_desired = 0;
					pwm_intermediate_left_desired = -((INDEX_STEP*3)<<2);
	        	} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    5ba0:	83 30       	cpi	r24, 0x03	; 3
    5ba2:	51 f4       	brne	.+20     	; 0x5bb8 <handleCalibration+0x4ea>
					pwm_intermediate_right_desired = -((INDEX_STEP*3)<<2);
    5ba4:	84 ec       	ldi	r24, 0xC4	; 196
    5ba6:	9f ef       	ldi	r25, 0xFF	; 255
    5ba8:	90 93 0e 03 	sts	0x030E, r25
    5bac:	80 93 0d 03 	sts	0x030D, r24
					pwm_intermediate_left_desired = 0;
    5bb0:	10 92 10 03 	sts	0x0310, r1
    5bb4:	10 92 0f 03 	sts	0x030F, r1
				}               
				minGround = 1023;
    5bb8:	8f ef       	ldi	r24, 0xFF	; 255
    5bba:	93 e0       	ldi	r25, 0x03	; 3
    5bbc:	90 93 d5 04 	sts	0x04D5, r25
    5bc0:	80 93 d4 04 	sts	0x04D4, r24
				maxGround = 0;
    5bc4:	10 92 d7 04 	sts	0x04D7, r1
    5bc8:	10 92 d6 04 	sts	0x04D6, r1
	            calibState = CALIBRATION_STATE_FIND_THRS_2;
    5bcc:	88 e0       	ldi	r24, 0x08	; 8
    5bce:	80 93 69 0b 	sts	0x0B69, r24
	            timeoutOdometry = getTime100MicroSec();
    5bd2:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
    5bd6:	60 93 39 0b 	sts	0x0B39, r22
    5bda:	70 93 3a 0b 	sts	0x0B3A, r23
    5bde:	80 93 3b 0b 	sts	0x0B3B, r24
    5be2:	90 93 3c 0b 	sts	0x0B3C, r25
    5be6:	08 95       	ret

void handleCalibration() {

	switch(calibState) {
		case CALIBRATION_STATE_FIND_THRS_0:
			timeoutOdometry = getTime100MicroSec();
    5be8:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
    5bec:	60 93 39 0b 	sts	0x0B39, r22
    5bf0:	70 93 3a 0b 	sts	0x0B3A, r23
    5bf4:	80 93 3b 0b 	sts	0x0B3B, r24
    5bf8:	90 93 3c 0b 	sts	0x0B3C, r25
			calibState = CALIBRATION_STATE_FIND_THRS_1;
    5bfc:	87 e0       	ldi	r24, 0x07	; 7
    5bfe:	80 93 69 0b 	sts	0x0B69, r24
			break;
    5c02:	08 95       	ret

    	case CALIBRATION_STATE_SET_SPEED: // set speed
        	if(calibWheel == LEFT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = 0;
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    5c04:	81 30       	cpi	r24, 0x01	; 1
    5c06:	39 f1       	breq	.+78     	; 0x5c56 <handleCalibration+0x588>
				pwm_intermediate_right_desired = (INDEX_STEP*calibVelIndex)<<2;
				pwm_intermediate_left_desired = 0;
			} else if(calibWheel == LEFT_WHEEL_BW_SC) {
    5c08:	82 30       	cpi	r24, 0x02	; 2
    5c0a:	09 f4       	brne	.+2      	; 0x5c0e <handleCalibration+0x540>
    5c0c:	50 c0       	rjmp	.+160    	; 0x5cae <handleCalibration+0x5e0>
				pwm_intermediate_right_desired = 0;
				pwm_intermediate_left_desired = -((INDEX_STEP*calibVelIndex)<<2);
        	} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    5c0e:	83 30       	cpi	r24, 0x03	; 3
    5c10:	09 f0       	breq	.+2      	; 0x5c14 <handleCalibration+0x546>
    5c12:	91 cd       	rjmp	.-1246   	; 0x5736 <handleCalibration+0x68>
				pwm_intermediate_right_desired = -((INDEX_STEP*calibVelIndex)<<2);
    5c14:	90 91 c3 08 	lds	r25, 0x08C3
    5c18:	85 e0       	ldi	r24, 0x05	; 5
    5c1a:	98 9f       	mul	r25, r24
    5c1c:	c0 01       	movw	r24, r0
    5c1e:	11 24       	eor	r1, r1
    5c20:	88 0f       	add	r24, r24
    5c22:	99 1f       	adc	r25, r25
    5c24:	88 0f       	add	r24, r24
    5c26:	99 1f       	adc	r25, r25
    5c28:	90 95       	com	r25
    5c2a:	81 95       	neg	r24
    5c2c:	9f 4f       	sbci	r25, 0xFF	; 255
    5c2e:	90 93 0e 03 	sts	0x030E, r25
    5c32:	80 93 0d 03 	sts	0x030D, r24
				pwm_intermediate_left_desired = 0;
    5c36:	10 92 10 03 	sts	0x0310, r1
    5c3a:	10 92 0f 03 	sts	0x030F, r1
    5c3e:	7b cd       	rjmp	.-1290   	; 0x5736 <handleCalibration+0x68>
		case CALIBRATION_STATE_FIND_THRS_1:	// Find the max and min of the ground sensor value in order to get a threshold to detect 
											// the black line securily (the threshold will be the average of the min and max).
			if((getTime100MicroSec() - timeoutOdometry)>PAUSE_1_SEC) { 	// Wait for the current sensor calibration to be terminated 
																		// (started when calibration is started).
				if(calibWheel == LEFT_WHEEL_FW_SC) {
					pwm_intermediate_right_desired = 0;
    5c40:	10 92 0e 03 	sts	0x030E, r1
    5c44:	10 92 0d 03 	sts	0x030D, r1
					pwm_intermediate_left_desired = (INDEX_STEP*3)<<2;		// Use a moderate speed.
    5c48:	8c e3       	ldi	r24, 0x3C	; 60
    5c4a:	90 e0       	ldi	r25, 0x00	; 0
    5c4c:	90 93 10 03 	sts	0x0310, r25
    5c50:	80 93 0f 03 	sts	0x030F, r24
    5c54:	b1 cf       	rjmp	.-158    	; 0x5bb8 <handleCalibration+0x4ea>
    	case CALIBRATION_STATE_SET_SPEED: // set speed
        	if(calibWheel == LEFT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = 0;
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = (INDEX_STEP*calibVelIndex)<<2;
    5c56:	90 91 c3 08 	lds	r25, 0x08C3
    5c5a:	85 e0       	ldi	r24, 0x05	; 5
    5c5c:	98 9f       	mul	r25, r24
    5c5e:	c0 01       	movw	r24, r0
    5c60:	11 24       	eor	r1, r1
    5c62:	88 0f       	add	r24, r24
    5c64:	99 1f       	adc	r25, r25
    5c66:	88 0f       	add	r24, r24
    5c68:	99 1f       	adc	r25, r25
    5c6a:	90 93 0e 03 	sts	0x030E, r25
    5c6e:	80 93 0d 03 	sts	0x030D, r24
				pwm_intermediate_left_desired = 0;
    5c72:	10 92 10 03 	sts	0x0310, r1
    5c76:	10 92 0f 03 	sts	0x030F, r1
    5c7a:	5d cd       	rjmp	.-1350   	; 0x5736 <handleCalibration+0x68>
            break;

		case CALIBRATION_STATE_NEXT:
        	calibVelIndex++;
            if(calibVelIndex == 10) {
            	calibVelIndex = 1;
    5c7c:	91 e0       	ldi	r25, 0x01	; 1
    5c7e:	90 93 c3 08 	sts	0x08C3, r25
                if(calibWheel == LEFT_WHEEL_FW_SC) {
    5c82:	80 91 5b 05 	lds	r24, 0x055B
    5c86:	88 23       	and	r24, r24
    5c88:	21 f4       	brne	.+8      	; 0x5c92 <handleCalibration+0x5c4>
                	calibWheel = LEFT_WHEEL_BW_SC;
    5c8a:	82 e0       	ldi	r24, 0x02	; 2
    5c8c:	80 93 5b 05 	sts	0x055B, r24
    5c90:	32 cd       	rjmp	.-1436   	; 0x56f6 <handleCalibration+0x28>
				} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    5c92:	81 30       	cpi	r24, 0x01	; 1
    5c94:	c1 f1       	breq	.+112    	; 0x5d06 <handleCalibration+0x638>
                	calibWheel = RIGHT_WHEEL_BW_SC;
				} else if(calibWheel == LEFT_WHEEL_BW_SC) {
    5c96:	82 30       	cpi	r24, 0x02	; 2
    5c98:	d1 f1       	breq	.+116    	; 0x5d0e <handleCalibration+0x640>
                	calibWheel = RIGHT_WHEEL_FW_SC;
					calibrateOdomFlag = 0;
					calibState = CALIBRATION_STATE_FIND_THRS_0;	// Recompute the thresholds for the right ground.
					break;
					// red on
				} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    5c9a:	83 30       	cpi	r24, 0x03	; 3
    5c9c:	09 f0       	breq	.+2      	; 0x5ca0 <handleCalibration+0x5d2>
    5c9e:	2b cd       	rjmp	.-1450   	; 0x56f6 <handleCalibration+0x28>
                	calibWheel = LEFT_WHEEL_FW_SC;					
    5ca0:	10 92 5b 05 	sts	0x055B, r1
					// red off
					writeCalibrationToFlash();
    5ca4:	0e 94 7f 47 	call	0x8efe	; 0x8efe <writeCalibrationToFlash>
					calibrateOdomFlag = 0;
    5ca8:	10 92 76 05 	sts	0x0576, r1
    5cac:	24 cd       	rjmp	.-1464   	; 0x56f6 <handleCalibration+0x28>
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = (INDEX_STEP*calibVelIndex)<<2;
				pwm_intermediate_left_desired = 0;
			} else if(calibWheel == LEFT_WHEEL_BW_SC) {
				pwm_intermediate_right_desired = 0;
    5cae:	10 92 0e 03 	sts	0x030E, r1
    5cb2:	10 92 0d 03 	sts	0x030D, r1
				pwm_intermediate_left_desired = -((INDEX_STEP*calibVelIndex)<<2);
    5cb6:	90 91 c3 08 	lds	r25, 0x08C3
    5cba:	85 e0       	ldi	r24, 0x05	; 5
    5cbc:	98 9f       	mul	r25, r24
    5cbe:	c0 01       	movw	r24, r0
    5cc0:	11 24       	eor	r1, r1
    5cc2:	88 0f       	add	r24, r24
    5cc4:	99 1f       	adc	r25, r25
    5cc6:	88 0f       	add	r24, r24
    5cc8:	99 1f       	adc	r25, r25
    5cca:	90 95       	com	r25
    5ccc:	81 95       	neg	r24
    5cce:	9f 4f       	sbci	r25, 0xFF	; 255
    5cd0:	90 93 10 03 	sts	0x0310, r25
    5cd4:	80 93 0f 03 	sts	0x030F, r24
    5cd8:	2e cd       	rjmp	.-1444   	; 0x5736 <handleCalibration+0x68>
																		// (started when calibration is started).
				if(calibWheel == LEFT_WHEEL_FW_SC) {
					pwm_intermediate_right_desired = 0;
					pwm_intermediate_left_desired = (INDEX_STEP*3)<<2;		// Use a moderate speed.
	        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
					pwm_intermediate_right_desired = (INDEX_STEP*3)<<2;
    5cda:	8c e3       	ldi	r24, 0x3C	; 60
    5cdc:	90 e0       	ldi	r25, 0x00	; 0
    5cde:	90 93 0e 03 	sts	0x030E, r25
    5ce2:	80 93 0d 03 	sts	0x030D, r24
					pwm_intermediate_left_desired = 0;
    5ce6:	10 92 10 03 	sts	0x0310, r1
    5cea:	10 92 0f 03 	sts	0x030F, r1
    5cee:	64 cf       	rjmp	.-312    	; 0x5bb8 <handleCalibration+0x4ea>
				} else if(calibWheel == LEFT_WHEEL_BW_SC) {
					pwm_intermediate_right_desired = 0;
    5cf0:	10 92 0e 03 	sts	0x030E, r1
    5cf4:	10 92 0d 03 	sts	0x030D, r1
					pwm_intermediate_left_desired = -((INDEX_STEP*3)<<2);
    5cf8:	84 ec       	ldi	r24, 0xC4	; 196
    5cfa:	9f ef       	ldi	r25, 0xFF	; 255
    5cfc:	90 93 10 03 	sts	0x0310, r25
    5d00:	80 93 0f 03 	sts	0x030F, r24
    5d04:	59 cf       	rjmp	.-334    	; 0x5bb8 <handleCalibration+0x4ea>
            if(calibVelIndex == 10) {
            	calibVelIndex = 1;
                if(calibWheel == LEFT_WHEEL_FW_SC) {
                	calibWheel = LEFT_WHEEL_BW_SC;
				} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
                	calibWheel = RIGHT_WHEEL_BW_SC;
    5d06:	83 e0       	ldi	r24, 0x03	; 3
    5d08:	80 93 5b 05 	sts	0x055B, r24
    5d0c:	f4 cc       	rjmp	.-1560   	; 0x56f6 <handleCalibration+0x28>
				} else if(calibWheel == LEFT_WHEEL_BW_SC) {
                	calibWheel = RIGHT_WHEEL_FW_SC;
    5d0e:	90 93 5b 05 	sts	0x055B, r25
					calibrateOdomFlag = 0;
    5d12:	10 92 76 05 	sts	0x0576, r1
					calibState = CALIBRATION_STATE_FIND_THRS_0;	// Recompute the thresholds for the right ground.
    5d16:	86 e0       	ldi	r24, 0x06	; 6
    5d18:	80 93 69 0b 	sts	0x0B69, r24
					break;
    5d1c:	08 95       	ret

00005d1e <getInputFromSpeed>:

}

// extract data to pass to speed controller given a desired speed in mm/s
// mode => return a measured speed 0..1023
signed int getInputFromSpeed(signed int s, unsigned char mode) {
    5d1e:	af 92       	push	r10
    5d20:	bf 92       	push	r11
    5d22:	cf 92       	push	r12
    5d24:	df 92       	push	r13
    5d26:	ef 92       	push	r14
    5d28:	ff 92       	push	r15
    5d2a:	0f 93       	push	r16
    5d2c:	1f 93       	push	r17
    5d2e:	cf 93       	push	r28
    5d30:	df 93       	push	r29
    
    int i = 0;
    signed int currVel = s*BYTE_TO_MM_S;
    5d32:	9c 01       	movw	r18, r24
    5d34:	22 0f       	add	r18, r18
    5d36:	33 1f       	adc	r19, r19
    5d38:	22 0f       	add	r18, r18
    5d3a:	33 1f       	adc	r19, r19
    5d3c:	28 0f       	add	r18, r24
    5d3e:	39 1f       	adc	r19, r25
    signed int temp = 0;

    if(currVel == 0) {
    5d40:	21 15       	cp	r18, r1
    5d42:	31 05       	cpc	r19, r1
    5d44:	09 f4       	brne	.+2      	; 0x5d48 <getInputFromSpeed+0x2a>
    5d46:	7b c0       	rjmp	.+246    	; 0x5e3e <getInputFromSpeed+0x120>
        return 0;
    }

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
    5d48:	86 2f       	mov	r24, r22
    5d4a:	82 50       	subi	r24, 0x02	; 2
    5d4c:	82 30       	cpi	r24, 0x02	; 2
    5d4e:	08 f4       	brcc	.+2      	; 0x5d52 <getInputFromSpeed+0x34>
    5d50:	84 c0       	rjmp	.+264    	; 0x5e5a <getInputFromSpeed+0x13c>
        currVel = -currVel; // consider only positive values
    5d52:	66 23       	and	r22, r22
    5d54:	09 f0       	breq	.+2      	; 0x5d58 <getInputFromSpeed+0x3a>
    5d56:	84 c0       	rjmp	.+264    	; 0x5e60 <getInputFromSpeed+0x142>
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
    5d58:	80 91 ec 08 	lds	r24, 0x08EC
    5d5c:	90 91 ed 08 	lds	r25, 0x08ED
    5d60:	82 17       	cp	r24, r18
    5d62:	93 07       	cpc	r25, r19
    5d64:	0c f0       	brlt	.+2      	; 0x5d68 <getInputFromSpeed+0x4a>
    5d66:	1b c2       	rjmp	.+1078   	; 0x619e <getInputFromSpeed+0x480>
    5d68:	80 91 fc 08 	lds	r24, 0x08FC
    5d6c:	90 91 fd 08 	lds	r25, 0x08FD
    5d70:	82 17       	cp	r24, r18
    5d72:	93 07       	cpc	r25, r19
    5d74:	0c f0       	brlt	.+2      	; 0x5d78 <getInputFromSpeed+0x5a>
    5d76:	1c c2       	rjmp	.+1080   	; 0x61b0 <getInputFromSpeed+0x492>
    5d78:	80 91 0c 09 	lds	r24, 0x090C
    5d7c:	90 91 0d 09 	lds	r25, 0x090D
    5d80:	82 17       	cp	r24, r18
    5d82:	93 07       	cpc	r25, r19
    5d84:	0c f0       	brlt	.+2      	; 0x5d88 <getInputFromSpeed+0x6a>
    5d86:	17 c2       	rjmp	.+1070   	; 0x61b6 <getInputFromSpeed+0x498>
    5d88:	80 91 1c 09 	lds	r24, 0x091C
    5d8c:	90 91 1d 09 	lds	r25, 0x091D
    5d90:	82 17       	cp	r24, r18
    5d92:	93 07       	cpc	r25, r19
    5d94:	0c f0       	brlt	.+2      	; 0x5d98 <getInputFromSpeed+0x7a>
    5d96:	12 c2       	rjmp	.+1060   	; 0x61bc <getInputFromSpeed+0x49e>
    5d98:	80 91 2c 09 	lds	r24, 0x092C
    5d9c:	90 91 2d 09 	lds	r25, 0x092D
    5da0:	82 17       	cp	r24, r18
    5da2:	93 07       	cpc	r25, r19
    5da4:	0c f0       	brlt	.+2      	; 0x5da8 <getInputFromSpeed+0x8a>
    5da6:	fe c1       	rjmp	.+1020   	; 0x61a4 <getInputFromSpeed+0x486>
    5da8:	80 91 3c 09 	lds	r24, 0x093C
    5dac:	90 91 3d 09 	lds	r25, 0x093D
    5db0:	82 17       	cp	r24, r18
    5db2:	93 07       	cpc	r25, r19
    5db4:	0c f0       	brlt	.+2      	; 0x5db8 <getInputFromSpeed+0x9a>
    5db6:	f9 c1       	rjmp	.+1010   	; 0x61aa <getInputFromSpeed+0x48c>
    5db8:	80 91 4c 09 	lds	r24, 0x094C
    5dbc:	90 91 4d 09 	lds	r25, 0x094D
    5dc0:	82 17       	cp	r24, r18
    5dc2:	93 07       	cpc	r25, r19
    5dc4:	0c f0       	brlt	.+2      	; 0x5dc8 <getInputFromSpeed+0xaa>
    5dc6:	02 c2       	rjmp	.+1028   	; 0x61cc <getInputFromSpeed+0x4ae>
    5dc8:	80 91 5c 09 	lds	r24, 0x095C
    5dcc:	90 91 5d 09 	lds	r25, 0x095D
    5dd0:	82 17       	cp	r24, r18
    5dd2:	93 07       	cpc	r25, r19
    5dd4:	0c f0       	brlt	.+2      	; 0x5dd8 <getInputFromSpeed+0xba>
    5dd6:	fd c1       	rjmp	.+1018   	; 0x61d2 <getInputFromSpeed+0x4b4>
    5dd8:	c0 91 6c 09 	lds	r28, 0x096C
    5ddc:	d0 91 6d 09 	lds	r29, 0x096D
    5de0:	c2 17       	cp	r28, r18
    5de2:	d3 07       	cpc	r29, r19
    5de4:	0c f0       	brlt	.+2      	; 0x5de8 <getInputFromSpeed+0xca>
    5de6:	7a c1       	rjmp	.+756    	; 0x60dc <getInputFromSpeed+0x3be>
            temp = currVel*calibration[0][6]/calibration[0][7];
            temp = -temp;
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
    5de8:	b9 01       	movw	r22, r18
    5dea:	88 27       	eor	r24, r24
    5dec:	77 fd       	sbrc	r23, 7
    5dee:	80 95       	com	r24
    5df0:	98 2f       	mov	r25, r24
    5df2:	0e 94 80 55 	call	0xab00	; 0xab00 <__floatsisf>
    5df6:	7b 01       	movw	r14, r22
    5df8:	8c 01       	movw	r16, r24
    5dfa:	60 91 6a 09 	lds	r22, 0x096A
    5dfe:	70 91 6b 09 	lds	r23, 0x096B
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
    5e02:	88 27       	eor	r24, r24
    5e04:	77 fd       	sbrc	r23, 7
    5e06:	80 95       	com	r24
    5e08:	98 2f       	mov	r25, r24
    5e0a:	0e 94 80 55 	call	0xab00	; 0xab00 <__floatsisf>
    5e0e:	9b 01       	movw	r18, r22
    5e10:	ac 01       	movw	r20, r24
    5e12:	c8 01       	movw	r24, r16
    5e14:	b7 01       	movw	r22, r14
    5e16:	0e 94 99 56 	call	0xad32	; 0xad32 <__mulsf3>
    5e1a:	7b 01       	movw	r14, r22
    5e1c:	8c 01       	movw	r16, r24
    5e1e:	be 01       	movw	r22, r28
    5e20:	88 27       	eor	r24, r24
    5e22:	77 fd       	sbrc	r23, 7
    5e24:	80 95       	com	r24
    5e26:	98 2f       	mov	r25, r24
    5e28:	0e 94 80 55 	call	0xab00	; 0xab00 <__floatsisf>
    5e2c:	9b 01       	movw	r18, r22
    5e2e:	ac 01       	movw	r20, r24
    5e30:	c8 01       	movw	r24, r16
    5e32:	b7 01       	movw	r22, r14
    5e34:	0e 94 e5 54 	call	0xa9ca	; 0xa9ca <__divsf3>
    5e38:	0e 94 4d 55 	call	0xaa9a	; 0xaa9a <__fixsfsi>
    5e3c:	02 c0       	rjmp	.+4      	; 0x5e42 <getInputFromSpeed+0x124>
// mode => return a measured speed 0..1023
signed int getInputFromSpeed(signed int s, unsigned char mode) {
    
    int i = 0;
    signed int currVel = s*BYTE_TO_MM_S;
    signed int temp = 0;
    5e3e:	60 e0       	ldi	r22, 0x00	; 0
    5e40:	70 e0       	ldi	r23, 0x00	; 0
            temp = -temp;
        }        
    }
    
    return temp;
}
    5e42:	cb 01       	movw	r24, r22
    5e44:	df 91       	pop	r29
    5e46:	cf 91       	pop	r28
    5e48:	1f 91       	pop	r17
    5e4a:	0f 91       	pop	r16
    5e4c:	ff 90       	pop	r15
    5e4e:	ef 90       	pop	r14
    5e50:	df 90       	pop	r13
    5e52:	cf 90       	pop	r12
    5e54:	bf 90       	pop	r11
    5e56:	af 90       	pop	r10
    5e58:	08 95       	ret
    if(currVel == 0) {
        return 0;
    }

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
        currVel = -currVel; // consider only positive values
    5e5a:	30 95       	com	r19
    5e5c:	21 95       	neg	r18
    5e5e:	3f 4f       	sbci	r19, 0xFF	; 255
    5e60:	63 30       	cpi	r22, 0x03	; 3
    5e62:	09 f4       	brne	.+2      	; 0x5e66 <getInputFromSpeed+0x148>
    5e64:	f3 c0       	rjmp	.+486    	; 0x604c <getInputFromSpeed+0x32e>
    5e66:	62 30       	cpi	r22, 0x02	; 2
    5e68:	01 f1       	breq	.+64     	; 0x5eaa <getInputFromSpeed+0x18c>
    5e6a:	61 30       	cpi	r22, 0x01	; 1
    5e6c:	09 f4       	brne	.+2      	; 0x5e70 <getInputFromSpeed+0x152>
    5e6e:	98 c0       	rjmp	.+304    	; 0x5fa0 <getInputFromSpeed+0x282>
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][6]/calibration[0][7];
            temp = -temp;
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
    5e70:	66 23       	and	r22, r22
    5e72:	09 f4       	brne	.+2      	; 0x5e76 <getInputFromSpeed+0x158>
    5e74:	90 c0       	rjmp	.+288    	; 0x5f96 <getInputFromSpeed+0x278>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
    5e76:	61 30       	cpi	r22, 0x01	; 1
    5e78:	09 f4       	brne	.+2      	; 0x5e7c <getInputFromSpeed+0x15e>
    5e7a:	8c c1       	rjmp	.+792    	; 0x6194 <getInputFromSpeed+0x476>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
        } else if(mode==LEFT_WHEEL_BW_SC) {
    5e7c:	62 30       	cpi	r22, 0x02	; 2
    5e7e:	09 f4       	brne	.+2      	; 0x5e82 <getInputFromSpeed+0x164>
    5e80:	a0 c1       	rjmp	.+832    	; 0x61c2 <getInputFromSpeed+0x4a4>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][4]/(float)calibration[CALIBRATION_SAMPLES-1][5]);
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
    5e82:	63 30       	cpi	r22, 0x03	; 3
    5e84:	e1 f6       	brne	.-72     	; 0x5e3e <getInputFromSpeed+0x120>
    5e86:	c0 91 78 09 	lds	r28, 0x0978
    5e8a:	d0 91 79 09 	lds	r29, 0x0979
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][6]/(float)calibration[CALIBRATION_SAMPLES-1][7]);
    5e8e:	b9 01       	movw	r22, r18
    5e90:	88 27       	eor	r24, r24
    5e92:	77 fd       	sbrc	r23, 7
    5e94:	80 95       	com	r24
    5e96:	98 2f       	mov	r25, r24
    5e98:	0e 94 80 55 	call	0xab00	; 0xab00 <__floatsisf>
    5e9c:	7b 01       	movw	r14, r22
    5e9e:	8c 01       	movw	r16, r24
    5ea0:	60 91 76 09 	lds	r22, 0x0976
    5ea4:	70 91 77 09 	lds	r23, 0x0977
    5ea8:	55 c0       	rjmp	.+170    	; 0x5f54 <getInputFromSpeed+0x236>
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            if(calibration[i][3] >= currVel) {
                break;
            }
        } else if(mode==LEFT_WHEEL_BW_SC) {
            if(calibration[i][5] >= currVel) {
    5eaa:	80 91 f4 08 	lds	r24, 0x08F4
    5eae:	90 91 f5 08 	lds	r25, 0x08F5
    5eb2:	82 17       	cp	r24, r18
    5eb4:	93 07       	cpc	r25, r19
    5eb6:	0c f0       	brlt	.+2      	; 0x5eba <getInputFromSpeed+0x19c>
    5eb8:	72 c1       	rjmp	.+740    	; 0x619e <getInputFromSpeed+0x480>
    5eba:	80 91 04 09 	lds	r24, 0x0904
    5ebe:	90 91 05 09 	lds	r25, 0x0905
    5ec2:	82 17       	cp	r24, r18
    5ec4:	93 07       	cpc	r25, r19
    5ec6:	0c f0       	brlt	.+2      	; 0x5eca <getInputFromSpeed+0x1ac>
    5ec8:	73 c1       	rjmp	.+742    	; 0x61b0 <getInputFromSpeed+0x492>
    5eca:	80 91 14 09 	lds	r24, 0x0914
    5ece:	90 91 15 09 	lds	r25, 0x0915
    5ed2:	82 17       	cp	r24, r18
    5ed4:	93 07       	cpc	r25, r19
    5ed6:	0c f0       	brlt	.+2      	; 0x5eda <getInputFromSpeed+0x1bc>
    5ed8:	6e c1       	rjmp	.+732    	; 0x61b6 <getInputFromSpeed+0x498>
    5eda:	80 91 24 09 	lds	r24, 0x0924
    5ede:	90 91 25 09 	lds	r25, 0x0925
    5ee2:	82 17       	cp	r24, r18
    5ee4:	93 07       	cpc	r25, r19
    5ee6:	0c f0       	brlt	.+2      	; 0x5eea <getInputFromSpeed+0x1cc>
    5ee8:	69 c1       	rjmp	.+722    	; 0x61bc <getInputFromSpeed+0x49e>
    5eea:	80 91 34 09 	lds	r24, 0x0934
    5eee:	90 91 35 09 	lds	r25, 0x0935
    5ef2:	82 17       	cp	r24, r18
    5ef4:	93 07       	cpc	r25, r19
    5ef6:	0c f0       	brlt	.+2      	; 0x5efa <getInputFromSpeed+0x1dc>
    5ef8:	55 c1       	rjmp	.+682    	; 0x61a4 <getInputFromSpeed+0x486>
    5efa:	80 91 44 09 	lds	r24, 0x0944
    5efe:	90 91 45 09 	lds	r25, 0x0945
    5f02:	82 17       	cp	r24, r18
    5f04:	93 07       	cpc	r25, r19
    5f06:	0c f0       	brlt	.+2      	; 0x5f0a <getInputFromSpeed+0x1ec>
    5f08:	50 c1       	rjmp	.+672    	; 0x61aa <getInputFromSpeed+0x48c>
    5f0a:	80 91 54 09 	lds	r24, 0x0954
    5f0e:	90 91 55 09 	lds	r25, 0x0955
    5f12:	82 17       	cp	r24, r18
    5f14:	93 07       	cpc	r25, r19
    5f16:	0c f0       	brlt	.+2      	; 0x5f1a <getInputFromSpeed+0x1fc>
    5f18:	59 c1       	rjmp	.+690    	; 0x61cc <getInputFromSpeed+0x4ae>
    5f1a:	80 91 64 09 	lds	r24, 0x0964
    5f1e:	90 91 65 09 	lds	r25, 0x0965
    5f22:	82 17       	cp	r24, r18
    5f24:	93 07       	cpc	r25, r19
    5f26:	0c f0       	brlt	.+2      	; 0x5f2a <getInputFromSpeed+0x20c>
    5f28:	54 c1       	rjmp	.+680    	; 0x61d2 <getInputFromSpeed+0x4b4>
    5f2a:	c0 91 74 09 	lds	r28, 0x0974
    5f2e:	d0 91 75 09 	lds	r29, 0x0975
    5f32:	c2 17       	cp	r28, r18
    5f34:	d3 07       	cpc	r29, r19
    5f36:	0c f0       	brlt	.+2      	; 0x5f3a <getInputFromSpeed+0x21c>
    5f38:	d1 c0       	rjmp	.+418    	; 0x60dc <getInputFromSpeed+0x3be>
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][4]/(float)calibration[CALIBRATION_SAMPLES-1][5]);
    5f3a:	b9 01       	movw	r22, r18
    5f3c:	88 27       	eor	r24, r24
    5f3e:	77 fd       	sbrc	r23, 7
    5f40:	80 95       	com	r24
    5f42:	98 2f       	mov	r25, r24
    5f44:	0e 94 80 55 	call	0xab00	; 0xab00 <__floatsisf>
    5f48:	7b 01       	movw	r14, r22
    5f4a:	8c 01       	movw	r16, r24
    5f4c:	60 91 72 09 	lds	r22, 0x0972
    5f50:	70 91 73 09 	lds	r23, 0x0973
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][6]/(float)calibration[CALIBRATION_SAMPLES-1][7]);
    5f54:	88 27       	eor	r24, r24
    5f56:	77 fd       	sbrc	r23, 7
    5f58:	80 95       	com	r24
    5f5a:	98 2f       	mov	r25, r24
    5f5c:	0e 94 80 55 	call	0xab00	; 0xab00 <__floatsisf>
    5f60:	9b 01       	movw	r18, r22
    5f62:	ac 01       	movw	r20, r24
    5f64:	c8 01       	movw	r24, r16
    5f66:	b7 01       	movw	r22, r14
    5f68:	0e 94 99 56 	call	0xad32	; 0xad32 <__mulsf3>
    5f6c:	7b 01       	movw	r14, r22
    5f6e:	8c 01       	movw	r16, r24
    5f70:	be 01       	movw	r22, r28
    5f72:	88 27       	eor	r24, r24
    5f74:	77 fd       	sbrc	r23, 7
    5f76:	80 95       	com	r24
    5f78:	98 2f       	mov	r25, r24
    5f7a:	0e 94 80 55 	call	0xab00	; 0xab00 <__floatsisf>
    5f7e:	9b 01       	movw	r18, r22
    5f80:	ac 01       	movw	r20, r24
    5f82:	c8 01       	movw	r24, r16
    5f84:	b7 01       	movw	r22, r14
    5f86:	0e 94 e5 54 	call	0xa9ca	; 0xa9ca <__divsf3>
    5f8a:	0e 94 4d 55 	call	0xaa9a	; 0xaa9a <__fixsfsi>
            temp = -temp;
    5f8e:	70 95       	com	r23
    5f90:	61 95       	neg	r22
    5f92:	7f 4f       	sbci	r23, 0xFF	; 255
    5f94:	56 cf       	rjmp	.-340    	; 0x5e42 <getInputFromSpeed+0x124>
    5f96:	c0 91 6c 09 	lds	r28, 0x096C
    5f9a:	d0 91 6d 09 	lds	r29, 0x096D
    5f9e:	24 cf       	rjmp	.-440    	; 0x5de8 <getInputFromSpeed+0xca>
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
                break;
            }
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            if(calibration[i][3] >= currVel) {
    5fa0:	80 91 f0 08 	lds	r24, 0x08F0
    5fa4:	90 91 f1 08 	lds	r25, 0x08F1
    5fa8:	82 17       	cp	r24, r18
    5faa:	93 07       	cpc	r25, r19
    5fac:	0c f0       	brlt	.+2      	; 0x5fb0 <getInputFromSpeed+0x292>
    5fae:	f7 c0       	rjmp	.+494    	; 0x619e <getInputFromSpeed+0x480>
    5fb0:	80 91 00 09 	lds	r24, 0x0900
    5fb4:	90 91 01 09 	lds	r25, 0x0901
    5fb8:	82 17       	cp	r24, r18
    5fba:	93 07       	cpc	r25, r19
    5fbc:	0c f0       	brlt	.+2      	; 0x5fc0 <getInputFromSpeed+0x2a2>
    5fbe:	f8 c0       	rjmp	.+496    	; 0x61b0 <getInputFromSpeed+0x492>
    5fc0:	80 91 10 09 	lds	r24, 0x0910
    5fc4:	90 91 11 09 	lds	r25, 0x0911
    5fc8:	82 17       	cp	r24, r18
    5fca:	93 07       	cpc	r25, r19
    5fcc:	0c f0       	brlt	.+2      	; 0x5fd0 <getInputFromSpeed+0x2b2>
    5fce:	f3 c0       	rjmp	.+486    	; 0x61b6 <getInputFromSpeed+0x498>
    5fd0:	80 91 20 09 	lds	r24, 0x0920
    5fd4:	90 91 21 09 	lds	r25, 0x0921
    5fd8:	82 17       	cp	r24, r18
    5fda:	93 07       	cpc	r25, r19
    5fdc:	0c f0       	brlt	.+2      	; 0x5fe0 <getInputFromSpeed+0x2c2>
    5fde:	ee c0       	rjmp	.+476    	; 0x61bc <getInputFromSpeed+0x49e>
    5fe0:	80 91 30 09 	lds	r24, 0x0930
    5fe4:	90 91 31 09 	lds	r25, 0x0931
    5fe8:	82 17       	cp	r24, r18
    5fea:	93 07       	cpc	r25, r19
    5fec:	0c f0       	brlt	.+2      	; 0x5ff0 <getInputFromSpeed+0x2d2>
    5fee:	da c0       	rjmp	.+436    	; 0x61a4 <getInputFromSpeed+0x486>
    5ff0:	80 91 40 09 	lds	r24, 0x0940
    5ff4:	90 91 41 09 	lds	r25, 0x0941
    5ff8:	82 17       	cp	r24, r18
    5ffa:	93 07       	cpc	r25, r19
    5ffc:	0c f0       	brlt	.+2      	; 0x6000 <getInputFromSpeed+0x2e2>
    5ffe:	d5 c0       	rjmp	.+426    	; 0x61aa <getInputFromSpeed+0x48c>
    6000:	80 91 50 09 	lds	r24, 0x0950
    6004:	90 91 51 09 	lds	r25, 0x0951
    6008:	82 17       	cp	r24, r18
    600a:	93 07       	cpc	r25, r19
    600c:	0c f0       	brlt	.+2      	; 0x6010 <getInputFromSpeed+0x2f2>
    600e:	de c0       	rjmp	.+444    	; 0x61cc <getInputFromSpeed+0x4ae>
    6010:	80 91 60 09 	lds	r24, 0x0960
    6014:	90 91 61 09 	lds	r25, 0x0961
    6018:	82 17       	cp	r24, r18
    601a:	93 07       	cpc	r25, r19
    601c:	0c f0       	brlt	.+2      	; 0x6020 <getInputFromSpeed+0x302>
    601e:	d9 c0       	rjmp	.+434    	; 0x61d2 <getInputFromSpeed+0x4b4>
    6020:	c0 91 70 09 	lds	r28, 0x0970
    6024:	d0 91 71 09 	lds	r29, 0x0971
    6028:	c2 17       	cp	r28, r18
    602a:	d3 07       	cpc	r29, r19
    602c:	0c f0       	brlt	.+2      	; 0x6030 <getInputFromSpeed+0x312>
    602e:	56 c0       	rjmp	.+172    	; 0x60dc <getInputFromSpeed+0x3be>
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
    6030:	b9 01       	movw	r22, r18
    6032:	88 27       	eor	r24, r24
    6034:	77 fd       	sbrc	r23, 7
    6036:	80 95       	com	r24
    6038:	98 2f       	mov	r25, r24
    603a:	0e 94 80 55 	call	0xab00	; 0xab00 <__floatsisf>
    603e:	7b 01       	movw	r14, r22
    6040:	8c 01       	movw	r16, r24
    6042:	60 91 6e 09 	lds	r22, 0x096E
    6046:	70 91 6f 09 	lds	r23, 0x096F
    604a:	db ce       	rjmp	.-586    	; 0x5e02 <getInputFromSpeed+0xe4>
        } else if(mode==LEFT_WHEEL_BW_SC) {
            if(calibration[i][5] >= currVel) {
                break;
            }
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            if(calibration[i][7] >= currVel) {
    604c:	80 91 f8 08 	lds	r24, 0x08F8
    6050:	90 91 f9 08 	lds	r25, 0x08F9
    6054:	82 17       	cp	r24, r18
    6056:	93 07       	cpc	r25, r19
    6058:	0c f0       	brlt	.+2      	; 0x605c <getInputFromSpeed+0x33e>
    605a:	a1 c0       	rjmp	.+322    	; 0x619e <getInputFromSpeed+0x480>
    605c:	80 91 08 09 	lds	r24, 0x0908
    6060:	90 91 09 09 	lds	r25, 0x0909
    6064:	82 17       	cp	r24, r18
    6066:	93 07       	cpc	r25, r19
    6068:	0c f0       	brlt	.+2      	; 0x606c <getInputFromSpeed+0x34e>
    606a:	a2 c0       	rjmp	.+324    	; 0x61b0 <getInputFromSpeed+0x492>
    606c:	80 91 18 09 	lds	r24, 0x0918
    6070:	90 91 19 09 	lds	r25, 0x0919
    6074:	82 17       	cp	r24, r18
    6076:	93 07       	cpc	r25, r19
    6078:	0c f0       	brlt	.+2      	; 0x607c <getInputFromSpeed+0x35e>
    607a:	9d c0       	rjmp	.+314    	; 0x61b6 <getInputFromSpeed+0x498>
    607c:	80 91 28 09 	lds	r24, 0x0928
    6080:	90 91 29 09 	lds	r25, 0x0929
    6084:	82 17       	cp	r24, r18
    6086:	93 07       	cpc	r25, r19
    6088:	0c f0       	brlt	.+2      	; 0x608c <getInputFromSpeed+0x36e>
    608a:	98 c0       	rjmp	.+304    	; 0x61bc <getInputFromSpeed+0x49e>
    608c:	80 91 38 09 	lds	r24, 0x0938
    6090:	90 91 39 09 	lds	r25, 0x0939
    6094:	82 17       	cp	r24, r18
    6096:	93 07       	cpc	r25, r19
    6098:	0c f0       	brlt	.+2      	; 0x609c <getInputFromSpeed+0x37e>
    609a:	84 c0       	rjmp	.+264    	; 0x61a4 <getInputFromSpeed+0x486>
    609c:	80 91 48 09 	lds	r24, 0x0948
    60a0:	90 91 49 09 	lds	r25, 0x0949
    60a4:	82 17       	cp	r24, r18
    60a6:	93 07       	cpc	r25, r19
    60a8:	0c f0       	brlt	.+2      	; 0x60ac <getInputFromSpeed+0x38e>
    60aa:	7f c0       	rjmp	.+254    	; 0x61aa <getInputFromSpeed+0x48c>
    60ac:	80 91 58 09 	lds	r24, 0x0958
    60b0:	90 91 59 09 	lds	r25, 0x0959
    60b4:	82 17       	cp	r24, r18
    60b6:	93 07       	cpc	r25, r19
    60b8:	0c f0       	brlt	.+2      	; 0x60bc <getInputFromSpeed+0x39e>
    60ba:	88 c0       	rjmp	.+272    	; 0x61cc <getInputFromSpeed+0x4ae>
    60bc:	80 91 68 09 	lds	r24, 0x0968
    60c0:	90 91 69 09 	lds	r25, 0x0969
    60c4:	82 17       	cp	r24, r18
    60c6:	93 07       	cpc	r25, r19
    60c8:	0c f0       	brlt	.+2      	; 0x60cc <getInputFromSpeed+0x3ae>
    60ca:	83 c0       	rjmp	.+262    	; 0x61d2 <getInputFromSpeed+0x4b4>
    60cc:	c0 91 78 09 	lds	r28, 0x0978
    60d0:	d0 91 79 09 	lds	r29, 0x0979
    60d4:	c2 17       	cp	r28, r18
    60d6:	d3 07       	cpc	r29, r19
    60d8:	0c f4       	brge	.+2      	; 0x60dc <getInputFromSpeed+0x3be>
    60da:	d9 ce       	rjmp	.-590    	; 0x5e8e <getInputFromSpeed+0x170>
        currVel = -currVel; // consider only positive values
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
    60dc:	c8 e0       	ldi	r28, 0x08	; 8
    60de:	d0 e0       	ldi	r29, 0x00	; 0
                break;
            }
        } 
    }

    if(i==0) {  // the velocity is lower than first saved in the matrix
    60e0:	20 97       	sbiw	r28, 0x00	; 0
    60e2:	09 f0       	breq	.+2      	; 0x60e6 <getInputFromSpeed+0x3c8>
    60e4:	79 c0       	rjmp	.+242    	; 0x61d8 <getInputFromSpeed+0x4ba>
        if(mode==LEFT_WHEEL_FW_SC) {
    60e6:	66 23       	and	r22, r22
    60e8:	91 f4       	brne	.+36     	; 0x610e <getInputFromSpeed+0x3f0>
            temp = (currVel*calibration[0][0])/calibration[0][1];
    60ea:	40 91 ea 08 	lds	r20, 0x08EA
    60ee:	50 91 eb 08 	lds	r21, 0x08EB
    60f2:	24 9f       	mul	r18, r20
    60f4:	c0 01       	movw	r24, r0
    60f6:	25 9f       	mul	r18, r21
    60f8:	90 0d       	add	r25, r0
    60fa:	34 9f       	mul	r19, r20
    60fc:	90 0d       	add	r25, r0
    60fe:	11 24       	eor	r1, r1
    6100:	60 91 ec 08 	lds	r22, 0x08EC
    6104:	70 91 ed 08 	lds	r23, 0x08ED
    6108:	0e 94 57 57 	call	0xaeae	; 0xaeae <__divmodhi4>
    610c:	9a ce       	rjmp	.-716    	; 0x5e42 <getInputFromSpeed+0x124>
        } else if(mode==RIGHT_WHEEL_FW_SC) {
    610e:	61 30       	cpi	r22, 0x01	; 1
    6110:	d1 f0       	breq	.+52     	; 0x6146 <getInputFromSpeed+0x428>
            temp = (currVel*calibration[0][2])/calibration[0][3];
        } else if(mode==LEFT_WHEEL_BW_SC) {
    6112:	62 30       	cpi	r22, 0x02	; 2
    6114:	51 f1       	breq	.+84     	; 0x616a <getInputFromSpeed+0x44c>
            temp = currVel*calibration[0][4]/calibration[0][5];
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
    6116:	63 30       	cpi	r22, 0x03	; 3
    6118:	09 f0       	breq	.+2      	; 0x611c <getInputFromSpeed+0x3fe>
    611a:	91 ce       	rjmp	.-734    	; 0x5e3e <getInputFromSpeed+0x120>
            temp = currVel*calibration[0][6]/calibration[0][7];
    611c:	40 91 f6 08 	lds	r20, 0x08F6
    6120:	50 91 f7 08 	lds	r21, 0x08F7
    6124:	24 9f       	mul	r18, r20
    6126:	c0 01       	movw	r24, r0
    6128:	25 9f       	mul	r18, r21
    612a:	90 0d       	add	r25, r0
    612c:	34 9f       	mul	r19, r20
    612e:	90 0d       	add	r25, r0
    6130:	11 24       	eor	r1, r1
    6132:	60 91 f8 08 	lds	r22, 0x08F8
    6136:	70 91 f9 08 	lds	r23, 0x08F9
    613a:	0e 94 57 57 	call	0xaeae	; 0xaeae <__divmodhi4>
            temp = -temp;
    613e:	70 95       	com	r23
    6140:	61 95       	neg	r22
    6142:	7f 4f       	sbci	r23, 0xFF	; 255
    6144:	7e ce       	rjmp	.-772    	; 0x5e42 <getInputFromSpeed+0x124>

    if(i==0) {  // the velocity is lower than first saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][0])/calibration[0][1];
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][2])/calibration[0][3];
    6146:	40 91 ee 08 	lds	r20, 0x08EE
    614a:	50 91 ef 08 	lds	r21, 0x08EF
    614e:	24 9f       	mul	r18, r20
    6150:	c0 01       	movw	r24, r0
    6152:	25 9f       	mul	r18, r21
    6154:	90 0d       	add	r25, r0
    6156:	34 9f       	mul	r19, r20
    6158:	90 0d       	add	r25, r0
    615a:	11 24       	eor	r1, r1
    615c:	60 91 f0 08 	lds	r22, 0x08F0
    6160:	70 91 f1 08 	lds	r23, 0x08F1
    6164:	0e 94 57 57 	call	0xaeae	; 0xaeae <__divmodhi4>
    6168:	6c ce       	rjmp	.-808    	; 0x5e42 <getInputFromSpeed+0x124>
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][4]/calibration[0][5];
    616a:	40 91 f2 08 	lds	r20, 0x08F2
    616e:	50 91 f3 08 	lds	r21, 0x08F3
    6172:	24 9f       	mul	r18, r20
    6174:	c0 01       	movw	r24, r0
    6176:	25 9f       	mul	r18, r21
    6178:	90 0d       	add	r25, r0
    617a:	34 9f       	mul	r19, r20
    617c:	90 0d       	add	r25, r0
    617e:	11 24       	eor	r1, r1
    6180:	60 91 f4 08 	lds	r22, 0x08F4
    6184:	70 91 f5 08 	lds	r23, 0x08F5
    6188:	0e 94 57 57 	call	0xaeae	; 0xaeae <__divmodhi4>
            temp = -temp;
    618c:	70 95       	com	r23
    618e:	61 95       	neg	r22
    6190:	7f 4f       	sbci	r23, 0xFF	; 255
    6192:	57 ce       	rjmp	.-850    	; 0x5e42 <getInputFromSpeed+0x124>
    6194:	c0 91 70 09 	lds	r28, 0x0970
    6198:	d0 91 71 09 	lds	r29, 0x0971
    619c:	49 cf       	rjmp	.-366    	; 0x6030 <getInputFromSpeed+0x312>

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
        currVel = -currVel; // consider only positive values
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    619e:	c0 e0       	ldi	r28, 0x00	; 0
    61a0:	d0 e0       	ldi	r29, 0x00	; 0
    61a2:	9e cf       	rjmp	.-196    	; 0x60e0 <getInputFromSpeed+0x3c2>
    61a4:	c4 e0       	ldi	r28, 0x04	; 4
    61a6:	d0 e0       	ldi	r29, 0x00	; 0
    61a8:	9b cf       	rjmp	.-202    	; 0x60e0 <getInputFromSpeed+0x3c2>
    61aa:	c5 e0       	ldi	r28, 0x05	; 5
    61ac:	d0 e0       	ldi	r29, 0x00	; 0
    61ae:	98 cf       	rjmp	.-208    	; 0x60e0 <getInputFromSpeed+0x3c2>
    61b0:	c1 e0       	ldi	r28, 0x01	; 1
    61b2:	d0 e0       	ldi	r29, 0x00	; 0
    61b4:	95 cf       	rjmp	.-214    	; 0x60e0 <getInputFromSpeed+0x3c2>
    61b6:	c2 e0       	ldi	r28, 0x02	; 2
    61b8:	d0 e0       	ldi	r29, 0x00	; 0
    61ba:	92 cf       	rjmp	.-220    	; 0x60e0 <getInputFromSpeed+0x3c2>
    61bc:	c3 e0       	ldi	r28, 0x03	; 3
    61be:	d0 e0       	ldi	r29, 0x00	; 0
    61c0:	8f cf       	rjmp	.-226    	; 0x60e0 <getInputFromSpeed+0x3c2>
    61c2:	c0 91 74 09 	lds	r28, 0x0974
    61c6:	d0 91 75 09 	lds	r29, 0x0975
    61ca:	b7 ce       	rjmp	.-658    	; 0x5f3a <getInputFromSpeed+0x21c>
    61cc:	c6 e0       	ldi	r28, 0x06	; 6
    61ce:	d0 e0       	ldi	r29, 0x00	; 0
    61d0:	87 cf       	rjmp	.-242    	; 0x60e0 <getInputFromSpeed+0x3c2>
    61d2:	c7 e0       	ldi	r28, 0x07	; 7
    61d4:	d0 e0       	ldi	r29, 0x00	; 0
    61d6:	84 cf       	rjmp	.-248    	; 0x60e0 <getInputFromSpeed+0x3c2>
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][6]/calibration[0][7];
            temp = -temp;
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    61d8:	c9 30       	cpi	r28, 0x09	; 9
    61da:	d1 05       	cpc	r29, r1
    61dc:	09 f4       	brne	.+2      	; 0x61e0 <getInputFromSpeed+0x4c2>
    61de:	48 ce       	rjmp	.-880    	; 0x5e70 <getInputFromSpeed+0x152>
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][6]/(float)calibration[CALIBRATION_SAMPLES-1][7]);
            temp = -temp;
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
    61e0:	66 23       	and	r22, r22
    61e2:	09 f0       	breq	.+2      	; 0x61e6 <getInputFromSpeed+0x4c8>
    61e4:	47 c0       	rjmp	.+142    	; 0x6274 <getInputFromSpeed+0x556>
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
    61e6:	fe 01       	movw	r30, r28
    61e8:	e2 95       	swap	r30
    61ea:	f2 95       	swap	r31
    61ec:	f0 7f       	andi	r31, 0xF0	; 240
    61ee:	fe 27       	eor	r31, r30
    61f0:	e0 7f       	andi	r30, 0xF0	; 240
    61f2:	fe 27       	eor	r31, r30
    61f4:	e6 52       	subi	r30, 0x26	; 38
    61f6:	f7 4f       	sbci	r31, 0xF7	; 247
    61f8:	c2 80       	ldd	r12, Z+2	; 0x02
    61fa:	d3 80       	ldd	r13, Z+3	; 0x03
    61fc:	a0 80       	ld	r10, Z
    61fe:	b1 80       	ldd	r11, Z+1	; 0x01
    6200:	2c 19       	sub	r18, r12
    6202:	3d 09       	sbc	r19, r13
    6204:	b9 01       	movw	r22, r18
    6206:	88 27       	eor	r24, r24
    6208:	77 fd       	sbrc	r23, 7
    620a:	80 95       	com	r24
    620c:	98 2f       	mov	r25, r24
    620e:	0e 94 80 55 	call	0xab00	; 0xab00 <__floatsisf>
    6212:	7b 01       	movw	r14, r22
    6214:	8c 01       	movw	r16, r24
    6216:	c2 95       	swap	r28
    6218:	d2 95       	swap	r29
    621a:	d0 7f       	andi	r29, 0xF0	; 240
    621c:	dc 27       	eor	r29, r28
    621e:	c0 7f       	andi	r28, 0xF0	; 240
    6220:	dc 27       	eor	r29, r28
    6222:	c6 51       	subi	r28, 0x16	; 22
    6224:	d7 4f       	sbci	r29, 0xF7	; 247
    6226:	68 81       	ld	r22, Y
    6228:	79 81       	ldd	r23, Y+1	; 0x01
    622a:	6a 19       	sub	r22, r10
    622c:	7b 09       	sbc	r23, r11
    622e:	88 27       	eor	r24, r24
    6230:	77 fd       	sbrc	r23, 7
    6232:	80 95       	com	r24
    6234:	98 2f       	mov	r25, r24
    6236:	0e 94 80 55 	call	0xab00	; 0xab00 <__floatsisf>
    623a:	9b 01       	movw	r18, r22
    623c:	ac 01       	movw	r20, r24
    623e:	c8 01       	movw	r24, r16
    6240:	b7 01       	movw	r22, r14
    6242:	0e 94 99 56 	call	0xad32	; 0xad32 <__mulsf3>
    6246:	7b 01       	movw	r14, r22
    6248:	8c 01       	movw	r16, r24
    624a:	6a 81       	ldd	r22, Y+2	; 0x02
    624c:	7b 81       	ldd	r23, Y+3	; 0x03
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
    624e:	6c 19       	sub	r22, r12
    6250:	7d 09       	sbc	r23, r13
    6252:	88 27       	eor	r24, r24
    6254:	77 fd       	sbrc	r23, 7
    6256:	80 95       	com	r24
    6258:	98 2f       	mov	r25, r24
    625a:	0e 94 80 55 	call	0xab00	; 0xab00 <__floatsisf>
    625e:	9b 01       	movw	r18, r22
    6260:	ac 01       	movw	r20, r24
    6262:	c8 01       	movw	r24, r16
    6264:	b7 01       	movw	r22, r14
    6266:	0e 94 e5 54 	call	0xa9ca	; 0xa9ca <__divsf3>
    626a:	0e 94 4d 55 	call	0xaa9a	; 0xaa9a <__fixsfsi>
    626e:	6a 0d       	add	r22, r10
    6270:	7b 1d       	adc	r23, r11
    6272:	e7 cd       	rjmp	.-1074   	; 0x5e42 <getInputFromSpeed+0x124>
            temp = -temp;
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
        } else if(mode==RIGHT_WHEEL_FW_SC) {
    6274:	61 30       	cpi	r22, 0x01	; 1
    6276:	09 f4       	brne	.+2      	; 0x627a <getInputFromSpeed+0x55c>
    6278:	50 c0       	rjmp	.+160    	; 0x631a <getInputFromSpeed+0x5fc>
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
        } else if(mode==LEFT_WHEEL_BW_SC) {
    627a:	62 30       	cpi	r22, 0x02	; 2
    627c:	09 f4       	brne	.+2      	; 0x6280 <getInputFromSpeed+0x562>
    627e:	82 c0       	rjmp	.+260    	; 0x6384 <getInputFromSpeed+0x666>
            temp = calibration[i-1][4] + (signed int)(((float)(currVel-calibration[i-1][5])*(float)(calibration[i][4]-calibration[i-1][4]))/(float)(calibration[i][5]-calibration[i-1][5]));
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
    6280:	63 30       	cpi	r22, 0x03	; 3
    6282:	09 f0       	breq	.+2      	; 0x6286 <getInputFromSpeed+0x568>
    6284:	dc cd       	rjmp	.-1096   	; 0x5e3e <getInputFromSpeed+0x120>
            temp = calibration[i-1][6] + (signed int)(((float)(currVel-calibration[i-1][7])*(float)(calibration[i][6]-calibration[i-1][6]))/(float)(calibration[i][7]-calibration[i-1][7]));
    6286:	fe 01       	movw	r30, r28
    6288:	e2 95       	swap	r30
    628a:	f2 95       	swap	r31
    628c:	f0 7f       	andi	r31, 0xF0	; 240
    628e:	fe 27       	eor	r31, r30
    6290:	e0 7f       	andi	r30, 0xF0	; 240
    6292:	fe 27       	eor	r31, r30
    6294:	e6 52       	subi	r30, 0x26	; 38
    6296:	f7 4f       	sbci	r31, 0xF7	; 247
    6298:	c6 84       	ldd	r12, Z+14	; 0x0e
    629a:	d7 84       	ldd	r13, Z+15	; 0x0f
    629c:	a4 84       	ldd	r10, Z+12	; 0x0c
    629e:	b5 84       	ldd	r11, Z+13	; 0x0d
    62a0:	2c 19       	sub	r18, r12
    62a2:	3d 09       	sbc	r19, r13
    62a4:	b9 01       	movw	r22, r18
    62a6:	88 27       	eor	r24, r24
    62a8:	77 fd       	sbrc	r23, 7
    62aa:	80 95       	com	r24
    62ac:	98 2f       	mov	r25, r24
    62ae:	0e 94 80 55 	call	0xab00	; 0xab00 <__floatsisf>
    62b2:	7b 01       	movw	r14, r22
    62b4:	8c 01       	movw	r16, r24
    62b6:	c2 95       	swap	r28
    62b8:	d2 95       	swap	r29
    62ba:	d0 7f       	andi	r29, 0xF0	; 240
    62bc:	dc 27       	eor	r29, r28
    62be:	c0 7f       	andi	r28, 0xF0	; 240
    62c0:	dc 27       	eor	r29, r28
    62c2:	c6 51       	subi	r28, 0x16	; 22
    62c4:	d7 4f       	sbci	r29, 0xF7	; 247
    62c6:	6c 85       	ldd	r22, Y+12	; 0x0c
    62c8:	7d 85       	ldd	r23, Y+13	; 0x0d
    62ca:	6a 19       	sub	r22, r10
    62cc:	7b 09       	sbc	r23, r11
    62ce:	88 27       	eor	r24, r24
    62d0:	77 fd       	sbrc	r23, 7
    62d2:	80 95       	com	r24
    62d4:	98 2f       	mov	r25, r24
    62d6:	0e 94 80 55 	call	0xab00	; 0xab00 <__floatsisf>
    62da:	9b 01       	movw	r18, r22
    62dc:	ac 01       	movw	r20, r24
    62de:	c8 01       	movw	r24, r16
    62e0:	b7 01       	movw	r22, r14
    62e2:	0e 94 99 56 	call	0xad32	; 0xad32 <__mulsf3>
    62e6:	7b 01       	movw	r14, r22
    62e8:	8c 01       	movw	r16, r24
    62ea:	6e 85       	ldd	r22, Y+14	; 0x0e
    62ec:	7f 85       	ldd	r23, Y+15	; 0x0f
    62ee:	6c 19       	sub	r22, r12
    62f0:	7d 09       	sbc	r23, r13
    62f2:	88 27       	eor	r24, r24
    62f4:	77 fd       	sbrc	r23, 7
    62f6:	80 95       	com	r24
    62f8:	98 2f       	mov	r25, r24
    62fa:	0e 94 80 55 	call	0xab00	; 0xab00 <__floatsisf>
    62fe:	9b 01       	movw	r18, r22
    6300:	ac 01       	movw	r20, r24
    6302:	c8 01       	movw	r24, r16
    6304:	b7 01       	movw	r22, r14
    6306:	0e 94 e5 54 	call	0xa9ca	; 0xa9ca <__divsf3>
    630a:	0e 94 4d 55 	call	0xaa9a	; 0xaa9a <__fixsfsi>
    630e:	6a 0d       	add	r22, r10
    6310:	7b 1d       	adc	r23, r11
            temp = -temp;
    6312:	70 95       	com	r23
    6314:	61 95       	neg	r22
    6316:	7f 4f       	sbci	r23, 0xFF	; 255
    6318:	94 cd       	rjmp	.-1240   	; 0x5e42 <getInputFromSpeed+0x124>
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
    631a:	fe 01       	movw	r30, r28
    631c:	e2 95       	swap	r30
    631e:	f2 95       	swap	r31
    6320:	f0 7f       	andi	r31, 0xF0	; 240
    6322:	fe 27       	eor	r31, r30
    6324:	e0 7f       	andi	r30, 0xF0	; 240
    6326:	fe 27       	eor	r31, r30
    6328:	e6 52       	subi	r30, 0x26	; 38
    632a:	f7 4f       	sbci	r31, 0xF7	; 247
    632c:	c6 80       	ldd	r12, Z+6	; 0x06
    632e:	d7 80       	ldd	r13, Z+7	; 0x07
    6330:	a4 80       	ldd	r10, Z+4	; 0x04
    6332:	b5 80       	ldd	r11, Z+5	; 0x05
    6334:	2c 19       	sub	r18, r12
    6336:	3d 09       	sbc	r19, r13
    6338:	b9 01       	movw	r22, r18
    633a:	88 27       	eor	r24, r24
    633c:	77 fd       	sbrc	r23, 7
    633e:	80 95       	com	r24
    6340:	98 2f       	mov	r25, r24
    6342:	0e 94 80 55 	call	0xab00	; 0xab00 <__floatsisf>
    6346:	7b 01       	movw	r14, r22
    6348:	8c 01       	movw	r16, r24
    634a:	c2 95       	swap	r28
    634c:	d2 95       	swap	r29
    634e:	d0 7f       	andi	r29, 0xF0	; 240
    6350:	dc 27       	eor	r29, r28
    6352:	c0 7f       	andi	r28, 0xF0	; 240
    6354:	dc 27       	eor	r29, r28
    6356:	c6 51       	subi	r28, 0x16	; 22
    6358:	d7 4f       	sbci	r29, 0xF7	; 247
    635a:	6c 81       	ldd	r22, Y+4	; 0x04
    635c:	7d 81       	ldd	r23, Y+5	; 0x05
    635e:	6a 19       	sub	r22, r10
    6360:	7b 09       	sbc	r23, r11
    6362:	88 27       	eor	r24, r24
    6364:	77 fd       	sbrc	r23, 7
    6366:	80 95       	com	r24
    6368:	98 2f       	mov	r25, r24
    636a:	0e 94 80 55 	call	0xab00	; 0xab00 <__floatsisf>
    636e:	9b 01       	movw	r18, r22
    6370:	ac 01       	movw	r20, r24
    6372:	c8 01       	movw	r24, r16
    6374:	b7 01       	movw	r22, r14
    6376:	0e 94 99 56 	call	0xad32	; 0xad32 <__mulsf3>
    637a:	7b 01       	movw	r14, r22
    637c:	8c 01       	movw	r16, r24
    637e:	6e 81       	ldd	r22, Y+6	; 0x06
    6380:	7f 81       	ldd	r23, Y+7	; 0x07
    6382:	65 cf       	rjmp	.-310    	; 0x624e <getInputFromSpeed+0x530>
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = calibration[i-1][4] + (signed int)(((float)(currVel-calibration[i-1][5])*(float)(calibration[i][4]-calibration[i-1][4]))/(float)(calibration[i][5]-calibration[i-1][5]));
    6384:	fe 01       	movw	r30, r28
    6386:	e2 95       	swap	r30
    6388:	f2 95       	swap	r31
    638a:	f0 7f       	andi	r31, 0xF0	; 240
    638c:	fe 27       	eor	r31, r30
    638e:	e0 7f       	andi	r30, 0xF0	; 240
    6390:	fe 27       	eor	r31, r30
    6392:	e6 52       	subi	r30, 0x26	; 38
    6394:	f7 4f       	sbci	r31, 0xF7	; 247
    6396:	c2 84       	ldd	r12, Z+10	; 0x0a
    6398:	d3 84       	ldd	r13, Z+11	; 0x0b
    639a:	a0 84       	ldd	r10, Z+8	; 0x08
    639c:	b1 84       	ldd	r11, Z+9	; 0x09
    639e:	2c 19       	sub	r18, r12
    63a0:	3d 09       	sbc	r19, r13
    63a2:	b9 01       	movw	r22, r18
    63a4:	88 27       	eor	r24, r24
    63a6:	77 fd       	sbrc	r23, 7
    63a8:	80 95       	com	r24
    63aa:	98 2f       	mov	r25, r24
    63ac:	0e 94 80 55 	call	0xab00	; 0xab00 <__floatsisf>
    63b0:	7b 01       	movw	r14, r22
    63b2:	8c 01       	movw	r16, r24
    63b4:	c2 95       	swap	r28
    63b6:	d2 95       	swap	r29
    63b8:	d0 7f       	andi	r29, 0xF0	; 240
    63ba:	dc 27       	eor	r29, r28
    63bc:	c0 7f       	andi	r28, 0xF0	; 240
    63be:	dc 27       	eor	r29, r28
    63c0:	c6 51       	subi	r28, 0x16	; 22
    63c2:	d7 4f       	sbci	r29, 0xF7	; 247
    63c4:	68 85       	ldd	r22, Y+8	; 0x08
    63c6:	79 85       	ldd	r23, Y+9	; 0x09
    63c8:	6a 19       	sub	r22, r10
    63ca:	7b 09       	sbc	r23, r11
    63cc:	88 27       	eor	r24, r24
    63ce:	77 fd       	sbrc	r23, 7
    63d0:	80 95       	com	r24
    63d2:	98 2f       	mov	r25, r24
    63d4:	0e 94 80 55 	call	0xab00	; 0xab00 <__floatsisf>
    63d8:	9b 01       	movw	r18, r22
    63da:	ac 01       	movw	r20, r24
    63dc:	c8 01       	movw	r24, r16
    63de:	b7 01       	movw	r22, r14
    63e0:	0e 94 99 56 	call	0xad32	; 0xad32 <__mulsf3>
    63e4:	7b 01       	movw	r14, r22
    63e6:	8c 01       	movw	r16, r24
    63e8:	6a 85       	ldd	r22, Y+10	; 0x0a
    63ea:	7b 85       	ldd	r23, Y+11	; 0x0b
    63ec:	80 cf       	rjmp	.-256    	; 0x62ee <getInputFromSpeed+0x5d0>

000063ee <getRightSpeedFromInput>:
    
    return temp;
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {
    63ee:	8f 92       	push	r8
    63f0:	9f 92       	push	r9
    63f2:	af 92       	push	r10
    63f4:	bf 92       	push	r11
    63f6:	cf 92       	push	r12
    63f8:	df 92       	push	r13
    63fa:	ef 92       	push	r14
    63fc:	ff 92       	push	r15
    63fe:	0f 93       	push	r16
    6400:	1f 93       	push	r17
    6402:	cf 93       	push	r28
    6404:	df 93       	push	r29

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    6406:	c0 91 03 03 	lds	r28, 0x0303
    640a:	d0 91 04 03 	lds	r29, 0x0304
    640e:	80 91 05 03 	lds	r24, 0x0305
    6412:	90 91 06 03 	lds	r25, 0x0306
    6416:	97 fd       	sbrc	r25, 7
    6418:	d9 c0       	rjmp	.+434    	; 0x65cc <getRightSpeedFromInput+0x1de>
    641a:	60 91 ee 08 	lds	r22, 0x08EE
    641e:	70 91 ef 08 	lds	r23, 0x08EF
    6422:	6c 17       	cp	r22, r28
    6424:	7d 07       	cpc	r23, r29
    6426:	0c f0       	brlt	.+2      	; 0x642a <getRightSpeedFromInput+0x3c>
    6428:	bd c0       	rjmp	.+378    	; 0x65a4 <getRightSpeedFromInput+0x1b6>
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    642a:	0f ef       	ldi	r16, 0xFF	; 255
    642c:	1f ef       	ldi	r17, 0xFF	; 255
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    642e:	80 91 fe 08 	lds	r24, 0x08FE
    6432:	90 91 ff 08 	lds	r25, 0x08FF
    6436:	8c 17       	cp	r24, r28
    6438:	9d 07       	cpc	r25, r29
    643a:	44 f0       	brlt	.+16     	; 0x644c <getRightSpeedFromInput+0x5e>
    
    return temp;
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {
    643c:	81 e0       	ldi	r24, 0x01	; 1
    643e:	9f ef       	ldi	r25, 0xFF	; 255
    6440:	0f 3f       	cpi	r16, 0xFF	; 255
    6442:	19 07       	cpc	r17, r25
    6444:	09 f0       	breq	.+2      	; 0x6448 <getRightSpeedFromInput+0x5a>
    6446:	80 e0       	ldi	r24, 0x00	; 0
    6448:	08 2f       	mov	r16, r24
    644a:	10 e0       	ldi	r17, 0x00	; 0

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    644c:	80 91 0e 09 	lds	r24, 0x090E
    6450:	90 91 0f 09 	lds	r25, 0x090F
    6454:	8c 17       	cp	r24, r28
    6456:	9d 07       	cpc	r25, r29
    6458:	2c f0       	brlt	.+10     	; 0x6464 <getRightSpeedFromInput+0x76>
    645a:	8f ef       	ldi	r24, 0xFF	; 255
    645c:	0f 3f       	cpi	r16, 0xFF	; 255
    645e:	18 07       	cpc	r17, r24
    6460:	09 f4       	brne	.+2      	; 0x6464 <getRightSpeedFromInput+0x76>
    6462:	6c c1       	rjmp	.+728    	; 0x673c <getRightSpeedFromInput+0x34e>
    6464:	80 91 1e 09 	lds	r24, 0x091E
    6468:	90 91 1f 09 	lds	r25, 0x091F
    646c:	8c 17       	cp	r24, r28
    646e:	9d 07       	cpc	r25, r29
    6470:	2c f0       	brlt	.+10     	; 0x647c <getRightSpeedFromInput+0x8e>
    6472:	9f ef       	ldi	r25, 0xFF	; 255
    6474:	0f 3f       	cpi	r16, 0xFF	; 255
    6476:	19 07       	cpc	r17, r25
    6478:	09 f4       	brne	.+2      	; 0x647c <getRightSpeedFromInput+0x8e>
    647a:	72 c1       	rjmp	.+740    	; 0x6760 <getRightSpeedFromInput+0x372>
    647c:	80 91 2e 09 	lds	r24, 0x092E
    6480:	90 91 2f 09 	lds	r25, 0x092F
    6484:	8c 17       	cp	r24, r28
    6486:	9d 07       	cpc	r25, r29
    6488:	2c f0       	brlt	.+10     	; 0x6494 <getRightSpeedFromInput+0xa6>
    648a:	8f ef       	ldi	r24, 0xFF	; 255
    648c:	0f 3f       	cpi	r16, 0xFF	; 255
    648e:	18 07       	cpc	r17, r24
    6490:	09 f4       	brne	.+2      	; 0x6494 <getRightSpeedFromInput+0xa6>
    6492:	63 c1       	rjmp	.+710    	; 0x675a <getRightSpeedFromInput+0x36c>
    6494:	80 91 3e 09 	lds	r24, 0x093E
    6498:	90 91 3f 09 	lds	r25, 0x093F
    649c:	8c 17       	cp	r24, r28
    649e:	9d 07       	cpc	r25, r29
    64a0:	2c f0       	brlt	.+10     	; 0x64ac <getRightSpeedFromInput+0xbe>
    64a2:	9f ef       	ldi	r25, 0xFF	; 255
    64a4:	0f 3f       	cpi	r16, 0xFF	; 255
    64a6:	19 07       	cpc	r17, r25
    64a8:	09 f4       	brne	.+2      	; 0x64ac <getRightSpeedFromInput+0xbe>
    64aa:	54 c1       	rjmp	.+680    	; 0x6754 <getRightSpeedFromInput+0x366>
    64ac:	80 91 4e 09 	lds	r24, 0x094E
    64b0:	90 91 4f 09 	lds	r25, 0x094F
    64b4:	8c 17       	cp	r24, r28
    64b6:	9d 07       	cpc	r25, r29
    64b8:	2c f0       	brlt	.+10     	; 0x64c4 <getRightSpeedFromInput+0xd6>
    64ba:	8f ef       	ldi	r24, 0xFF	; 255
    64bc:	0f 3f       	cpi	r16, 0xFF	; 255
    64be:	18 07       	cpc	r17, r24
    64c0:	09 f4       	brne	.+2      	; 0x64c4 <getRightSpeedFromInput+0xd6>
    64c2:	45 c1       	rjmp	.+650    	; 0x674e <getRightSpeedFromInput+0x360>
    64c4:	80 91 5e 09 	lds	r24, 0x095E
    64c8:	90 91 5f 09 	lds	r25, 0x095F
    64cc:	8c 17       	cp	r24, r28
    64ce:	9d 07       	cpc	r25, r29
    64d0:	2c f0       	brlt	.+10     	; 0x64dc <getRightSpeedFromInput+0xee>
    64d2:	9f ef       	ldi	r25, 0xFF	; 255
    64d4:	0f 3f       	cpi	r16, 0xFF	; 255
    64d6:	19 07       	cpc	r17, r25
    64d8:	09 f4       	brne	.+2      	; 0x64dc <getRightSpeedFromInput+0xee>
    64da:	36 c1       	rjmp	.+620    	; 0x6748 <getRightSpeedFromInput+0x35a>
    64dc:	e0 90 6e 09 	lds	r14, 0x096E
    64e0:	f0 90 6f 09 	lds	r15, 0x096F
    64e4:	ec 16       	cp	r14, r28
    64e6:	fd 06       	cpc	r15, r29
    64e8:	2c f0       	brlt	.+10     	; 0x64f4 <getRightSpeedFromInput+0x106>
    64ea:	8f ef       	ldi	r24, 0xFF	; 255
    64ec:	0f 3f       	cpi	r16, 0xFF	; 255
    64ee:	18 07       	cpc	r17, r24
    64f0:	09 f4       	brne	.+2      	; 0x64f4 <getRightSpeedFromInput+0x106>
    64f2:	27 c1       	rjmp	.+590    	; 0x6742 <getRightSpeedFromInput+0x354>
			}
		}        
    }

    if(pwm_right >= 0) {
        if(last_right_vel == 0) {
    64f4:	20 97       	sbiw	r28, 0x00	; 0
    64f6:	09 f4       	brne	.+2      	; 0x64fa <getRightSpeedFromInput+0x10c>
    64f8:	58 c0       	rjmp	.+176    	; 0x65aa <getRightSpeedFromInput+0x1bc>
            speedRightFromEnc = 0;
        } else {
            if(indFwR==0) {  // the velocity is lower than first saved in the matrix
    64fa:	01 15       	cp	r16, r1
    64fc:	11 05       	cpc	r17, r1
    64fe:	09 f4       	brne	.+2      	; 0x6502 <getRightSpeedFromInput+0x114>
    6500:	32 c1       	rjmp	.+612    	; 0x6766 <getRightSpeedFromInput+0x378>
                speedRightFromEnc = (last_right_vel*calibration[0][3])/calibration[0][2];
            } else if(indFwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    6502:	9f ef       	ldi	r25, 0xFF	; 255
    6504:	0f 3f       	cpi	r16, 0xFF	; 255
    6506:	19 07       	cpc	r17, r25
    6508:	09 f4       	brne	.+2      	; 0x650c <getRightSpeedFromInput+0x11e>
    650a:	e9 c0       	rjmp	.+466    	; 0x66de <getRightSpeedFromInput+0x2f0>
                speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][3]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][2]);  // take the max
            } else {
                speedRightFromEnc = calibration[indFwR-1][3] + (signed int)(((float)(last_right_vel-calibration[indFwR-1][2])*(float)(calibration[indFwR][3]-calibration[indFwR-1][3]))/(float)(calibration[indFwR][2]-calibration[indFwR-1][2]));
    650c:	f8 01       	movw	r30, r16
    650e:	e2 95       	swap	r30
    6510:	f2 95       	swap	r31
    6512:	f0 7f       	andi	r31, 0xF0	; 240
    6514:	fe 27       	eor	r31, r30
    6516:	e0 7f       	andi	r30, 0xF0	; 240
    6518:	fe 27       	eor	r31, r30
    651a:	e6 52       	subi	r30, 0x26	; 38
    651c:	f7 4f       	sbci	r31, 0xF7	; 247
    651e:	a4 80       	ldd	r10, Z+4	; 0x04
    6520:	b5 80       	ldd	r11, Z+5	; 0x05
    6522:	86 80       	ldd	r8, Z+6	; 0x06
    6524:	97 80       	ldd	r9, Z+7	; 0x07
    6526:	ca 19       	sub	r28, r10
    6528:	db 09       	sbc	r29, r11
    652a:	be 01       	movw	r22, r28
    652c:	88 27       	eor	r24, r24
    652e:	77 fd       	sbrc	r23, 7
    6530:	80 95       	com	r24
    6532:	98 2f       	mov	r25, r24
    6534:	0e 94 80 55 	call	0xab00	; 0xab00 <__floatsisf>
    6538:	6b 01       	movw	r12, r22
    653a:	7c 01       	movw	r14, r24
    653c:	e8 01       	movw	r28, r16
    653e:	c2 95       	swap	r28
    6540:	d2 95       	swap	r29
    6542:	d0 7f       	andi	r29, 0xF0	; 240
    6544:	dc 27       	eor	r29, r28
    6546:	c0 7f       	andi	r28, 0xF0	; 240
    6548:	dc 27       	eor	r29, r28
    654a:	c6 51       	subi	r28, 0x16	; 22
    654c:	d7 4f       	sbci	r29, 0xF7	; 247
    654e:	6e 81       	ldd	r22, Y+6	; 0x06
    6550:	7f 81       	ldd	r23, Y+7	; 0x07
    6552:	68 19       	sub	r22, r8
    6554:	79 09       	sbc	r23, r9
    6556:	88 27       	eor	r24, r24
    6558:	77 fd       	sbrc	r23, 7
    655a:	80 95       	com	r24
    655c:	98 2f       	mov	r25, r24
    655e:	0e 94 80 55 	call	0xab00	; 0xab00 <__floatsisf>
    6562:	9b 01       	movw	r18, r22
    6564:	ac 01       	movw	r20, r24
    6566:	c7 01       	movw	r24, r14
    6568:	b6 01       	movw	r22, r12
    656a:	0e 94 99 56 	call	0xad32	; 0xad32 <__mulsf3>
    656e:	7b 01       	movw	r14, r22
    6570:	8c 01       	movw	r16, r24
    6572:	6c 81       	ldd	r22, Y+4	; 0x04
    6574:	7d 81       	ldd	r23, Y+5	; 0x05
    6576:	6a 19       	sub	r22, r10
    6578:	7b 09       	sbc	r23, r11
    657a:	88 27       	eor	r24, r24
    657c:	77 fd       	sbrc	r23, 7
    657e:	80 95       	com	r24
    6580:	98 2f       	mov	r25, r24
    6582:	0e 94 80 55 	call	0xab00	; 0xab00 <__floatsisf>
    6586:	9b 01       	movw	r18, r22
    6588:	ac 01       	movw	r20, r24
    658a:	c8 01       	movw	r24, r16
    658c:	b7 01       	movw	r22, r14
    658e:	0e 94 e5 54 	call	0xa9ca	; 0xa9ca <__divsf3>
    6592:	0e 94 4d 55 	call	0xaa9a	; 0xaa9a <__fixsfsi>
    6596:	68 0d       	add	r22, r8
    6598:	79 1d       	adc	r23, r9
    659a:	70 93 cb 04 	sts	0x04CB, r23
    659e:	60 93 ca 04 	sts	0x04CA, r22
    65a2:	07 c0       	rjmp	.+14     	; 0x65b2 <getRightSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    65a4:	00 e0       	ldi	r16, 0x00	; 0
    65a6:	10 e0       	ldi	r17, 0x00	; 0
    65a8:	42 cf       	rjmp	.-380    	; 0x642e <getRightSpeedFromInput+0x40>
		}        
    }

    if(pwm_right >= 0) {
        if(last_right_vel == 0) {
            speedRightFromEnc = 0;
    65aa:	10 92 cb 04 	sts	0x04CB, r1
    65ae:	10 92 ca 04 	sts	0x04CA, r1
        	speedRightFromEnc = calibration[indBwR-1][7] + (signed int)(((float)(last_right_vel-calibration[indBwR-1][6])*(float)(calibration[indBwR][7]-calibration[indBwR-1][7]))/(float)(calibration[indBwR][6]-calibration[indBwR-1][6]));
		}
		speedRightFromEnc = -speedRightFromEnc;
    }
    
}
    65b2:	df 91       	pop	r29
    65b4:	cf 91       	pop	r28
    65b6:	1f 91       	pop	r17
    65b8:	0f 91       	pop	r16
    65ba:	ff 90       	pop	r15
    65bc:	ef 90       	pop	r14
    65be:	df 90       	pop	r13
    65c0:	cf 90       	pop	r12
    65c2:	bf 90       	pop	r11
    65c4:	af 90       	pop	r10
    65c6:	9f 90       	pop	r9
    65c8:	8f 90       	pop	r8
    65ca:	08 95       	ret
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    65cc:	60 91 f6 08 	lds	r22, 0x08F6
    65d0:	70 91 f7 08 	lds	r23, 0x08F7
    65d4:	6c 17       	cp	r22, r28
    65d6:	7d 07       	cpc	r23, r29
    65d8:	0c f0       	brlt	.+2      	; 0x65dc <getRightSpeedFromInput+0x1ee>
    65da:	7e c0       	rjmp	.+252    	; 0x66d8 <getRightSpeedFromInput+0x2ea>
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    65dc:	0f ef       	ldi	r16, 0xFF	; 255
    65de:	1f ef       	ldi	r17, 0xFF	; 255
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    65e0:	80 91 06 09 	lds	r24, 0x0906
    65e4:	90 91 07 09 	lds	r25, 0x0907
    65e8:	8c 17       	cp	r24, r28
    65ea:	9d 07       	cpc	r25, r29
    65ec:	44 f0       	brlt	.+16     	; 0x65fe <getRightSpeedFromInput+0x210>
    
    return temp;
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {
    65ee:	81 e0       	ldi	r24, 0x01	; 1
    65f0:	9f ef       	ldi	r25, 0xFF	; 255
    65f2:	0f 3f       	cpi	r16, 0xFF	; 255
    65f4:	19 07       	cpc	r17, r25
    65f6:	09 f0       	breq	.+2      	; 0x65fa <getRightSpeedFromInput+0x20c>
    65f8:	80 e0       	ldi	r24, 0x00	; 0
    65fa:	08 2f       	mov	r16, r24
    65fc:	10 e0       	ldi	r17, 0x00	; 0
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    65fe:	80 91 16 09 	lds	r24, 0x0916
    6602:	90 91 17 09 	lds	r25, 0x0917
    6606:	8c 17       	cp	r24, r28
    6608:	9d 07       	cpc	r25, r29
    660a:	2c f0       	brlt	.+10     	; 0x6616 <getRightSpeedFromInput+0x228>
    660c:	8f ef       	ldi	r24, 0xFF	; 255
    660e:	0f 3f       	cpi	r16, 0xFF	; 255
    6610:	18 07       	cpc	r17, r24
    6612:	09 f4       	brne	.+2      	; 0x6616 <getRightSpeedFromInput+0x228>
    6614:	19 c1       	rjmp	.+562    	; 0x6848 <getRightSpeedFromInput+0x45a>
    6616:	80 91 26 09 	lds	r24, 0x0926
    661a:	90 91 27 09 	lds	r25, 0x0927
    661e:	8c 17       	cp	r24, r28
    6620:	9d 07       	cpc	r25, r29
    6622:	2c f0       	brlt	.+10     	; 0x662e <getRightSpeedFromInput+0x240>
    6624:	9f ef       	ldi	r25, 0xFF	; 255
    6626:	0f 3f       	cpi	r16, 0xFF	; 255
    6628:	19 07       	cpc	r17, r25
    662a:	09 f4       	brne	.+2      	; 0x662e <getRightSpeedFromInput+0x240>
    662c:	0a c1       	rjmp	.+532    	; 0x6842 <getRightSpeedFromInput+0x454>
    662e:	80 91 36 09 	lds	r24, 0x0936
    6632:	90 91 37 09 	lds	r25, 0x0937
    6636:	8c 17       	cp	r24, r28
    6638:	9d 07       	cpc	r25, r29
    663a:	2c f0       	brlt	.+10     	; 0x6646 <getRightSpeedFromInput+0x258>
    663c:	8f ef       	ldi	r24, 0xFF	; 255
    663e:	0f 3f       	cpi	r16, 0xFF	; 255
    6640:	18 07       	cpc	r17, r24
    6642:	09 f4       	brne	.+2      	; 0x6646 <getRightSpeedFromInput+0x258>
    6644:	fb c0       	rjmp	.+502    	; 0x683c <getRightSpeedFromInput+0x44e>
    6646:	80 91 46 09 	lds	r24, 0x0946
    664a:	90 91 47 09 	lds	r25, 0x0947
    664e:	8c 17       	cp	r24, r28
    6650:	9d 07       	cpc	r25, r29
    6652:	2c f0       	brlt	.+10     	; 0x665e <getRightSpeedFromInput+0x270>
    6654:	9f ef       	ldi	r25, 0xFF	; 255
    6656:	0f 3f       	cpi	r16, 0xFF	; 255
    6658:	19 07       	cpc	r17, r25
    665a:	09 f4       	brne	.+2      	; 0x665e <getRightSpeedFromInput+0x270>
    665c:	ec c0       	rjmp	.+472    	; 0x6836 <getRightSpeedFromInput+0x448>
    665e:	80 91 56 09 	lds	r24, 0x0956
    6662:	90 91 57 09 	lds	r25, 0x0957
    6666:	8c 17       	cp	r24, r28
    6668:	9d 07       	cpc	r25, r29
    666a:	2c f0       	brlt	.+10     	; 0x6676 <getRightSpeedFromInput+0x288>
    666c:	8f ef       	ldi	r24, 0xFF	; 255
    666e:	0f 3f       	cpi	r16, 0xFF	; 255
    6670:	18 07       	cpc	r17, r24
    6672:	09 f4       	brne	.+2      	; 0x6676 <getRightSpeedFromInput+0x288>
    6674:	dd c0       	rjmp	.+442    	; 0x6830 <getRightSpeedFromInput+0x442>
    6676:	80 91 66 09 	lds	r24, 0x0966
    667a:	90 91 67 09 	lds	r25, 0x0967
    667e:	8c 17       	cp	r24, r28
    6680:	9d 07       	cpc	r25, r29
    6682:	2c f0       	brlt	.+10     	; 0x668e <getRightSpeedFromInput+0x2a0>
    6684:	9f ef       	ldi	r25, 0xFF	; 255
    6686:	0f 3f       	cpi	r16, 0xFF	; 255
    6688:	19 07       	cpc	r17, r25
    668a:	09 f4       	brne	.+2      	; 0x668e <getRightSpeedFromInput+0x2a0>
    668c:	ce c0       	rjmp	.+412    	; 0x682a <getRightSpeedFromInput+0x43c>
    668e:	e0 90 76 09 	lds	r14, 0x0976
    6692:	f0 90 77 09 	lds	r15, 0x0977
    6696:	ec 16       	cp	r14, r28
    6698:	fd 06       	cpc	r15, r29
    669a:	2c f0       	brlt	.+10     	; 0x66a6 <getRightSpeedFromInput+0x2b8>
    669c:	8f ef       	ldi	r24, 0xFF	; 255
    669e:	0f 3f       	cpi	r16, 0xFF	; 255
    66a0:	18 07       	cpc	r17, r24
    66a2:	09 f4       	brne	.+2      	; 0x66a6 <getRightSpeedFromInput+0x2b8>
    66a4:	bf c0       	rjmp	.+382    	; 0x6824 <getRightSpeedFromInput+0x436>
            } else {
                speedRightFromEnc = calibration[indFwR-1][3] + (signed int)(((float)(last_right_vel-calibration[indFwR-1][2])*(float)(calibration[indFwR][3]-calibration[indFwR-1][3]))/(float)(calibration[indFwR][2]-calibration[indFwR-1][2]));
            }
        }
    } else {
		if(indBwR==0) {  // the velocity is lower than first saved in the matrix
    66a6:	01 15       	cp	r16, r1
    66a8:	11 05       	cpc	r17, r1
    66aa:	09 f0       	breq	.+2      	; 0x66ae <getRightSpeedFromInput+0x2c0>
    66ac:	6e c0       	rjmp	.+220    	; 0x678a <getRightSpeedFromInput+0x39c>
        	speedRightFromEnc = (last_right_vel*calibration[0][7])/calibration[0][6];
    66ae:	20 91 f8 08 	lds	r18, 0x08F8
    66b2:	30 91 f9 08 	lds	r19, 0x08F9
    66b6:	c2 9f       	mul	r28, r18
    66b8:	c0 01       	movw	r24, r0
    66ba:	c3 9f       	mul	r28, r19
    66bc:	90 0d       	add	r25, r0
    66be:	d2 9f       	mul	r29, r18
    66c0:	90 0d       	add	r25, r0
    66c2:	11 24       	eor	r1, r1
    66c4:	0e 94 57 57 	call	0xaeae	; 0xaeae <__divmodhi4>
		} else if(indBwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][7]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][6]);  // take the max
		} else {
        	speedRightFromEnc = calibration[indBwR-1][7] + (signed int)(((float)(last_right_vel-calibration[indBwR-1][6])*(float)(calibration[indBwR][7]-calibration[indBwR-1][7]))/(float)(calibration[indBwR][6]-calibration[indBwR-1][6]));
		}
		speedRightFromEnc = -speedRightFromEnc;
    66c8:	70 95       	com	r23
    66ca:	61 95       	neg	r22
    66cc:	7f 4f       	sbci	r23, 0xFF	; 255
    66ce:	70 93 cb 04 	sts	0x04CB, r23
    66d2:	60 93 ca 04 	sts	0x04CA, r22
    66d6:	6d cf       	rjmp	.-294    	; 0x65b2 <getRightSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    66d8:	00 e0       	ldi	r16, 0x00	; 0
    66da:	10 e0       	ldi	r17, 0x00	; 0
    66dc:	81 cf       	rjmp	.-254    	; 0x65e0 <getRightSpeedFromInput+0x1f2>
            speedRightFromEnc = 0;
        } else {
            if(indFwR==0) {  // the velocity is lower than first saved in the matrix
                speedRightFromEnc = (last_right_vel*calibration[0][3])/calibration[0][2];
            } else if(indFwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
                speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][3]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][2]);  // take the max
    66de:	60 91 70 09 	lds	r22, 0x0970
    66e2:	70 91 71 09 	lds	r23, 0x0971
    66e6:	88 27       	eor	r24, r24
    66e8:	77 fd       	sbrc	r23, 7
    66ea:	80 95       	com	r24
    66ec:	98 2f       	mov	r25, r24
    66ee:	0e 94 80 55 	call	0xab00	; 0xab00 <__floatsisf>
    66f2:	5b 01       	movw	r10, r22
    66f4:	6c 01       	movw	r12, r24
    66f6:	be 01       	movw	r22, r28
    66f8:	88 27       	eor	r24, r24
    66fa:	77 fd       	sbrc	r23, 7
    66fc:	80 95       	com	r24
    66fe:	98 2f       	mov	r25, r24
    6700:	0e 94 80 55 	call	0xab00	; 0xab00 <__floatsisf>
    6704:	9b 01       	movw	r18, r22
    6706:	ac 01       	movw	r20, r24
    6708:	c6 01       	movw	r24, r12
    670a:	b5 01       	movw	r22, r10
    670c:	0e 94 99 56 	call	0xad32	; 0xad32 <__mulsf3>
    6710:	5b 01       	movw	r10, r22
    6712:	6c 01       	movw	r12, r24
    6714:	b7 01       	movw	r22, r14
    6716:	88 27       	eor	r24, r24
    6718:	77 fd       	sbrc	r23, 7
    671a:	80 95       	com	r24
    671c:	98 2f       	mov	r25, r24
    671e:	0e 94 80 55 	call	0xab00	; 0xab00 <__floatsisf>
    6722:	9b 01       	movw	r18, r22
    6724:	ac 01       	movw	r20, r24
    6726:	c6 01       	movw	r24, r12
    6728:	b5 01       	movw	r22, r10
    672a:	0e 94 e5 54 	call	0xa9ca	; 0xa9ca <__divsf3>
    672e:	0e 94 4d 55 	call	0xaa9a	; 0xaa9a <__fixsfsi>
    6732:	70 93 cb 04 	sts	0x04CB, r23
    6736:	60 93 ca 04 	sts	0x04CA, r22
    673a:	3b cf       	rjmp	.-394    	; 0x65b2 <getRightSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    673c:	02 e0       	ldi	r16, 0x02	; 2
    673e:	10 e0       	ldi	r17, 0x00	; 0
    6740:	91 ce       	rjmp	.-734    	; 0x6464 <getRightSpeedFromInput+0x76>
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    6742:	08 e0       	ldi	r16, 0x08	; 8
    6744:	10 e0       	ldi	r17, 0x00	; 0
    6746:	d6 ce       	rjmp	.-596    	; 0x64f4 <getRightSpeedFromInput+0x106>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    6748:	07 e0       	ldi	r16, 0x07	; 7
    674a:	10 e0       	ldi	r17, 0x00	; 0
    674c:	c7 ce       	rjmp	.-626    	; 0x64dc <getRightSpeedFromInput+0xee>
    674e:	06 e0       	ldi	r16, 0x06	; 6
    6750:	10 e0       	ldi	r17, 0x00	; 0
    6752:	b8 ce       	rjmp	.-656    	; 0x64c4 <getRightSpeedFromInput+0xd6>
    6754:	05 e0       	ldi	r16, 0x05	; 5
    6756:	10 e0       	ldi	r17, 0x00	; 0
    6758:	a9 ce       	rjmp	.-686    	; 0x64ac <getRightSpeedFromInput+0xbe>
    675a:	04 e0       	ldi	r16, 0x04	; 4
    675c:	10 e0       	ldi	r17, 0x00	; 0
    675e:	9a ce       	rjmp	.-716    	; 0x6494 <getRightSpeedFromInput+0xa6>
    6760:	03 e0       	ldi	r16, 0x03	; 3
    6762:	10 e0       	ldi	r17, 0x00	; 0
    6764:	8b ce       	rjmp	.-746    	; 0x647c <getRightSpeedFromInput+0x8e>
    if(pwm_right >= 0) {
        if(last_right_vel == 0) {
            speedRightFromEnc = 0;
        } else {
            if(indFwR==0) {  // the velocity is lower than first saved in the matrix
                speedRightFromEnc = (last_right_vel*calibration[0][3])/calibration[0][2];
    6766:	20 91 f0 08 	lds	r18, 0x08F0
    676a:	30 91 f1 08 	lds	r19, 0x08F1
    676e:	c2 9f       	mul	r28, r18
    6770:	c0 01       	movw	r24, r0
    6772:	c3 9f       	mul	r28, r19
    6774:	90 0d       	add	r25, r0
    6776:	d2 9f       	mul	r29, r18
    6778:	90 0d       	add	r25, r0
    677a:	11 24       	eor	r1, r1
    677c:	0e 94 57 57 	call	0xaeae	; 0xaeae <__divmodhi4>
    6780:	70 93 cb 04 	sts	0x04CB, r23
    6784:	60 93 ca 04 	sts	0x04CA, r22
    6788:	14 cf       	rjmp	.-472    	; 0x65b2 <getRightSpeedFromInput+0x1c4>
            }
        }
    } else {
		if(indBwR==0) {  // the velocity is lower than first saved in the matrix
        	speedRightFromEnc = (last_right_vel*calibration[0][7])/calibration[0][6];
		} else if(indBwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    678a:	8f ef       	ldi	r24, 0xFF	; 255
    678c:	0f 3f       	cpi	r16, 0xFF	; 255
    678e:	18 07       	cpc	r17, r24
    6790:	09 f4       	brne	.+2      	; 0x6794 <getRightSpeedFromInput+0x3a6>
    6792:	5d c0       	rjmp	.+186    	; 0x684e <getRightSpeedFromInput+0x460>
        	speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][7]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][6]);  // take the max
		} else {
        	speedRightFromEnc = calibration[indBwR-1][7] + (signed int)(((float)(last_right_vel-calibration[indBwR-1][6])*(float)(calibration[indBwR][7]-calibration[indBwR-1][7]))/(float)(calibration[indBwR][6]-calibration[indBwR-1][6]));
    6794:	f8 01       	movw	r30, r16
    6796:	e2 95       	swap	r30
    6798:	f2 95       	swap	r31
    679a:	f0 7f       	andi	r31, 0xF0	; 240
    679c:	fe 27       	eor	r31, r30
    679e:	e0 7f       	andi	r30, 0xF0	; 240
    67a0:	fe 27       	eor	r31, r30
    67a2:	e6 52       	subi	r30, 0x26	; 38
    67a4:	f7 4f       	sbci	r31, 0xF7	; 247
    67a6:	a4 84       	ldd	r10, Z+12	; 0x0c
    67a8:	b5 84       	ldd	r11, Z+13	; 0x0d
    67aa:	86 84       	ldd	r8, Z+14	; 0x0e
    67ac:	97 84       	ldd	r9, Z+15	; 0x0f
    67ae:	ca 19       	sub	r28, r10
    67b0:	db 09       	sbc	r29, r11
    67b2:	be 01       	movw	r22, r28
    67b4:	88 27       	eor	r24, r24
    67b6:	77 fd       	sbrc	r23, 7
    67b8:	80 95       	com	r24
    67ba:	98 2f       	mov	r25, r24
    67bc:	0e 94 80 55 	call	0xab00	; 0xab00 <__floatsisf>
    67c0:	6b 01       	movw	r12, r22
    67c2:	7c 01       	movw	r14, r24
    67c4:	e8 01       	movw	r28, r16
    67c6:	c2 95       	swap	r28
    67c8:	d2 95       	swap	r29
    67ca:	d0 7f       	andi	r29, 0xF0	; 240
    67cc:	dc 27       	eor	r29, r28
    67ce:	c0 7f       	andi	r28, 0xF0	; 240
    67d0:	dc 27       	eor	r29, r28
    67d2:	c6 51       	subi	r28, 0x16	; 22
    67d4:	d7 4f       	sbci	r29, 0xF7	; 247
    67d6:	6e 85       	ldd	r22, Y+14	; 0x0e
    67d8:	7f 85       	ldd	r23, Y+15	; 0x0f
    67da:	68 19       	sub	r22, r8
    67dc:	79 09       	sbc	r23, r9
    67de:	88 27       	eor	r24, r24
    67e0:	77 fd       	sbrc	r23, 7
    67e2:	80 95       	com	r24
    67e4:	98 2f       	mov	r25, r24
    67e6:	0e 94 80 55 	call	0xab00	; 0xab00 <__floatsisf>
    67ea:	9b 01       	movw	r18, r22
    67ec:	ac 01       	movw	r20, r24
    67ee:	c7 01       	movw	r24, r14
    67f0:	b6 01       	movw	r22, r12
    67f2:	0e 94 99 56 	call	0xad32	; 0xad32 <__mulsf3>
    67f6:	7b 01       	movw	r14, r22
    67f8:	8c 01       	movw	r16, r24
    67fa:	6c 85       	ldd	r22, Y+12	; 0x0c
    67fc:	7d 85       	ldd	r23, Y+13	; 0x0d
    67fe:	6a 19       	sub	r22, r10
    6800:	7b 09       	sbc	r23, r11
    6802:	88 27       	eor	r24, r24
    6804:	77 fd       	sbrc	r23, 7
    6806:	80 95       	com	r24
    6808:	98 2f       	mov	r25, r24
    680a:	0e 94 80 55 	call	0xab00	; 0xab00 <__floatsisf>
    680e:	9b 01       	movw	r18, r22
    6810:	ac 01       	movw	r20, r24
    6812:	c8 01       	movw	r24, r16
    6814:	b7 01       	movw	r22, r14
    6816:	0e 94 e5 54 	call	0xa9ca	; 0xa9ca <__divsf3>
    681a:	0e 94 4d 55 	call	0xaa9a	; 0xaa9a <__fixsfsi>
    681e:	68 0d       	add	r22, r8
    6820:	79 1d       	adc	r23, r9
    6822:	52 cf       	rjmp	.-348    	; 0x66c8 <getRightSpeedFromInput+0x2da>
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    6824:	08 e0       	ldi	r16, 0x08	; 8
    6826:	10 e0       	ldi	r17, 0x00	; 0
    6828:	3e cf       	rjmp	.-388    	; 0x66a6 <getRightSpeedFromInput+0x2b8>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    682a:	07 e0       	ldi	r16, 0x07	; 7
    682c:	10 e0       	ldi	r17, 0x00	; 0
    682e:	2f cf       	rjmp	.-418    	; 0x668e <getRightSpeedFromInput+0x2a0>
    6830:	06 e0       	ldi	r16, 0x06	; 6
    6832:	10 e0       	ldi	r17, 0x00	; 0
    6834:	20 cf       	rjmp	.-448    	; 0x6676 <getRightSpeedFromInput+0x288>
    6836:	05 e0       	ldi	r16, 0x05	; 5
    6838:	10 e0       	ldi	r17, 0x00	; 0
    683a:	11 cf       	rjmp	.-478    	; 0x665e <getRightSpeedFromInput+0x270>
    683c:	04 e0       	ldi	r16, 0x04	; 4
    683e:	10 e0       	ldi	r17, 0x00	; 0
    6840:	02 cf       	rjmp	.-508    	; 0x6646 <getRightSpeedFromInput+0x258>
    6842:	03 e0       	ldi	r16, 0x03	; 3
    6844:	10 e0       	ldi	r17, 0x00	; 0
    6846:	f3 ce       	rjmp	.-538    	; 0x662e <getRightSpeedFromInput+0x240>
    6848:	02 e0       	ldi	r16, 0x02	; 2
    684a:	10 e0       	ldi	r17, 0x00	; 0
    684c:	e4 ce       	rjmp	.-568    	; 0x6616 <getRightSpeedFromInput+0x228>
        }
    } else {
		if(indBwR==0) {  // the velocity is lower than first saved in the matrix
        	speedRightFromEnc = (last_right_vel*calibration[0][7])/calibration[0][6];
		} else if(indBwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][7]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][6]);  // take the max
    684e:	60 91 78 09 	lds	r22, 0x0978
    6852:	70 91 79 09 	lds	r23, 0x0979
    6856:	88 27       	eor	r24, r24
    6858:	77 fd       	sbrc	r23, 7
    685a:	80 95       	com	r24
    685c:	98 2f       	mov	r25, r24
    685e:	0e 94 80 55 	call	0xab00	; 0xab00 <__floatsisf>
    6862:	5b 01       	movw	r10, r22
    6864:	6c 01       	movw	r12, r24
    6866:	be 01       	movw	r22, r28
    6868:	88 27       	eor	r24, r24
    686a:	77 fd       	sbrc	r23, 7
    686c:	80 95       	com	r24
    686e:	98 2f       	mov	r25, r24
    6870:	0e 94 80 55 	call	0xab00	; 0xab00 <__floatsisf>
    6874:	9b 01       	movw	r18, r22
    6876:	ac 01       	movw	r20, r24
    6878:	c6 01       	movw	r24, r12
    687a:	b5 01       	movw	r22, r10
    687c:	0e 94 99 56 	call	0xad32	; 0xad32 <__mulsf3>
    6880:	5b 01       	movw	r10, r22
    6882:	6c 01       	movw	r12, r24
    6884:	b7 01       	movw	r22, r14
    6886:	88 27       	eor	r24, r24
    6888:	77 fd       	sbrc	r23, 7
    688a:	80 95       	com	r24
    688c:	98 2f       	mov	r25, r24
    688e:	0e 94 80 55 	call	0xab00	; 0xab00 <__floatsisf>
    6892:	9b 01       	movw	r18, r22
    6894:	ac 01       	movw	r20, r24
    6896:	c6 01       	movw	r24, r12
    6898:	b5 01       	movw	r22, r10
    689a:	0e 94 e5 54 	call	0xa9ca	; 0xa9ca <__divsf3>
    689e:	0e 94 4d 55 	call	0xaa9a	; 0xaa9a <__fixsfsi>
    68a2:	12 cf       	rjmp	.-476    	; 0x66c8 <getRightSpeedFromInput+0x2da>

000068a4 <getLeftSpeedFromInput>:
    }
    
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {
    68a4:	8f 92       	push	r8
    68a6:	9f 92       	push	r9
    68a8:	af 92       	push	r10
    68aa:	bf 92       	push	r11
    68ac:	cf 92       	push	r12
    68ae:	df 92       	push	r13
    68b0:	ef 92       	push	r14
    68b2:	ff 92       	push	r15
    68b4:	0f 93       	push	r16
    68b6:	1f 93       	push	r17
    68b8:	cf 93       	push	r28
    68ba:	df 93       	push	r29

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    68bc:	c0 91 01 03 	lds	r28, 0x0301
    68c0:	d0 91 02 03 	lds	r29, 0x0302
    68c4:	80 91 07 03 	lds	r24, 0x0307
    68c8:	90 91 08 03 	lds	r25, 0x0308
    68cc:	97 fd       	sbrc	r25, 7
    68ce:	d9 c0       	rjmp	.+434    	; 0x6a82 <getLeftSpeedFromInput+0x1de>
    68d0:	60 91 ea 08 	lds	r22, 0x08EA
    68d4:	70 91 eb 08 	lds	r23, 0x08EB
    68d8:	6c 17       	cp	r22, r28
    68da:	7d 07       	cpc	r23, r29
    68dc:	0c f0       	brlt	.+2      	; 0x68e0 <getLeftSpeedFromInput+0x3c>
    68de:	bd c0       	rjmp	.+378    	; 0x6a5a <getLeftSpeedFromInput+0x1b6>
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    68e0:	0f ef       	ldi	r16, 0xFF	; 255
    68e2:	1f ef       	ldi	r17, 0xFF	; 255
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    68e4:	80 91 fa 08 	lds	r24, 0x08FA
    68e8:	90 91 fb 08 	lds	r25, 0x08FB
    68ec:	8c 17       	cp	r24, r28
    68ee:	9d 07       	cpc	r25, r29
    68f0:	44 f0       	brlt	.+16     	; 0x6902 <getLeftSpeedFromInput+0x5e>
    }
    
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {
    68f2:	81 e0       	ldi	r24, 0x01	; 1
    68f4:	9f ef       	ldi	r25, 0xFF	; 255
    68f6:	0f 3f       	cpi	r16, 0xFF	; 255
    68f8:	19 07       	cpc	r17, r25
    68fa:	09 f0       	breq	.+2      	; 0x68fe <getLeftSpeedFromInput+0x5a>
    68fc:	80 e0       	ldi	r24, 0x00	; 0
    68fe:	08 2f       	mov	r16, r24
    6900:	10 e0       	ldi	r17, 0x00	; 0

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    6902:	80 91 0a 09 	lds	r24, 0x090A
    6906:	90 91 0b 09 	lds	r25, 0x090B
    690a:	8c 17       	cp	r24, r28
    690c:	9d 07       	cpc	r25, r29
    690e:	2c f0       	brlt	.+10     	; 0x691a <getLeftSpeedFromInput+0x76>
    6910:	8f ef       	ldi	r24, 0xFF	; 255
    6912:	0f 3f       	cpi	r16, 0xFF	; 255
    6914:	18 07       	cpc	r17, r24
    6916:	09 f4       	brne	.+2      	; 0x691a <getLeftSpeedFromInput+0x76>
    6918:	6c c1       	rjmp	.+728    	; 0x6bf2 <getLeftSpeedFromInput+0x34e>
    691a:	80 91 1a 09 	lds	r24, 0x091A
    691e:	90 91 1b 09 	lds	r25, 0x091B
    6922:	8c 17       	cp	r24, r28
    6924:	9d 07       	cpc	r25, r29
    6926:	2c f0       	brlt	.+10     	; 0x6932 <getLeftSpeedFromInput+0x8e>
    6928:	9f ef       	ldi	r25, 0xFF	; 255
    692a:	0f 3f       	cpi	r16, 0xFF	; 255
    692c:	19 07       	cpc	r17, r25
    692e:	09 f4       	brne	.+2      	; 0x6932 <getLeftSpeedFromInput+0x8e>
    6930:	72 c1       	rjmp	.+740    	; 0x6c16 <getLeftSpeedFromInput+0x372>
    6932:	80 91 2a 09 	lds	r24, 0x092A
    6936:	90 91 2b 09 	lds	r25, 0x092B
    693a:	8c 17       	cp	r24, r28
    693c:	9d 07       	cpc	r25, r29
    693e:	2c f0       	brlt	.+10     	; 0x694a <getLeftSpeedFromInput+0xa6>
    6940:	8f ef       	ldi	r24, 0xFF	; 255
    6942:	0f 3f       	cpi	r16, 0xFF	; 255
    6944:	18 07       	cpc	r17, r24
    6946:	09 f4       	brne	.+2      	; 0x694a <getLeftSpeedFromInput+0xa6>
    6948:	63 c1       	rjmp	.+710    	; 0x6c10 <getLeftSpeedFromInput+0x36c>
    694a:	80 91 3a 09 	lds	r24, 0x093A
    694e:	90 91 3b 09 	lds	r25, 0x093B
    6952:	8c 17       	cp	r24, r28
    6954:	9d 07       	cpc	r25, r29
    6956:	2c f0       	brlt	.+10     	; 0x6962 <getLeftSpeedFromInput+0xbe>
    6958:	9f ef       	ldi	r25, 0xFF	; 255
    695a:	0f 3f       	cpi	r16, 0xFF	; 255
    695c:	19 07       	cpc	r17, r25
    695e:	09 f4       	brne	.+2      	; 0x6962 <getLeftSpeedFromInput+0xbe>
    6960:	54 c1       	rjmp	.+680    	; 0x6c0a <getLeftSpeedFromInput+0x366>
    6962:	80 91 4a 09 	lds	r24, 0x094A
    6966:	90 91 4b 09 	lds	r25, 0x094B
    696a:	8c 17       	cp	r24, r28
    696c:	9d 07       	cpc	r25, r29
    696e:	2c f0       	brlt	.+10     	; 0x697a <getLeftSpeedFromInput+0xd6>
    6970:	8f ef       	ldi	r24, 0xFF	; 255
    6972:	0f 3f       	cpi	r16, 0xFF	; 255
    6974:	18 07       	cpc	r17, r24
    6976:	09 f4       	brne	.+2      	; 0x697a <getLeftSpeedFromInput+0xd6>
    6978:	45 c1       	rjmp	.+650    	; 0x6c04 <getLeftSpeedFromInput+0x360>
    697a:	80 91 5a 09 	lds	r24, 0x095A
    697e:	90 91 5b 09 	lds	r25, 0x095B
    6982:	8c 17       	cp	r24, r28
    6984:	9d 07       	cpc	r25, r29
    6986:	2c f0       	brlt	.+10     	; 0x6992 <getLeftSpeedFromInput+0xee>
    6988:	9f ef       	ldi	r25, 0xFF	; 255
    698a:	0f 3f       	cpi	r16, 0xFF	; 255
    698c:	19 07       	cpc	r17, r25
    698e:	09 f4       	brne	.+2      	; 0x6992 <getLeftSpeedFromInput+0xee>
    6990:	36 c1       	rjmp	.+620    	; 0x6bfe <getLeftSpeedFromInput+0x35a>
    6992:	e0 90 6a 09 	lds	r14, 0x096A
    6996:	f0 90 6b 09 	lds	r15, 0x096B
    699a:	ec 16       	cp	r14, r28
    699c:	fd 06       	cpc	r15, r29
    699e:	2c f0       	brlt	.+10     	; 0x69aa <getLeftSpeedFromInput+0x106>
    69a0:	8f ef       	ldi	r24, 0xFF	; 255
    69a2:	0f 3f       	cpi	r16, 0xFF	; 255
    69a4:	18 07       	cpc	r17, r24
    69a6:	09 f4       	brne	.+2      	; 0x69aa <getLeftSpeedFromInput+0x106>
    69a8:	27 c1       	rjmp	.+590    	; 0x6bf8 <getLeftSpeedFromInput+0x354>
			}
		}     
    }

    if(pwm_left >= 0) {
        if(last_left_vel == 0) {
    69aa:	20 97       	sbiw	r28, 0x00	; 0
    69ac:	09 f4       	brne	.+2      	; 0x69b0 <getLeftSpeedFromInput+0x10c>
    69ae:	58 c0       	rjmp	.+176    	; 0x6a60 <getLeftSpeedFromInput+0x1bc>
            speedLeftFromEnc = 0;
        } else {
            if(indFwL==0) {  // the velocity is lower than first saved in the matrix
    69b0:	01 15       	cp	r16, r1
    69b2:	11 05       	cpc	r17, r1
    69b4:	09 f4       	brne	.+2      	; 0x69b8 <getLeftSpeedFromInput+0x114>
    69b6:	32 c1       	rjmp	.+612    	; 0x6c1c <getLeftSpeedFromInput+0x378>
                speedLeftFromEnc = (last_left_vel*calibration[0][1])/calibration[0][0];
            } else if(indFwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    69b8:	9f ef       	ldi	r25, 0xFF	; 255
    69ba:	0f 3f       	cpi	r16, 0xFF	; 255
    69bc:	19 07       	cpc	r17, r25
    69be:	09 f4       	brne	.+2      	; 0x69c2 <getLeftSpeedFromInput+0x11e>
    69c0:	e9 c0       	rjmp	.+466    	; 0x6b94 <getLeftSpeedFromInput+0x2f0>
                speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][1]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][0]);  // take the max
            } else {
                speedLeftFromEnc = calibration[indFwL-1][1] + (signed int)(((float)(last_left_vel-calibration[indFwL-1][0])*(float)(calibration[indFwL][1]-calibration[indFwL-1][1]))/(float)(calibration[indFwL][0]-calibration[indFwL-1][0]));
    69c2:	f8 01       	movw	r30, r16
    69c4:	e2 95       	swap	r30
    69c6:	f2 95       	swap	r31
    69c8:	f0 7f       	andi	r31, 0xF0	; 240
    69ca:	fe 27       	eor	r31, r30
    69cc:	e0 7f       	andi	r30, 0xF0	; 240
    69ce:	fe 27       	eor	r31, r30
    69d0:	e6 52       	subi	r30, 0x26	; 38
    69d2:	f7 4f       	sbci	r31, 0xF7	; 247
    69d4:	a0 80       	ld	r10, Z
    69d6:	b1 80       	ldd	r11, Z+1	; 0x01
    69d8:	82 80       	ldd	r8, Z+2	; 0x02
    69da:	93 80       	ldd	r9, Z+3	; 0x03
    69dc:	ca 19       	sub	r28, r10
    69de:	db 09       	sbc	r29, r11
    69e0:	be 01       	movw	r22, r28
    69e2:	88 27       	eor	r24, r24
    69e4:	77 fd       	sbrc	r23, 7
    69e6:	80 95       	com	r24
    69e8:	98 2f       	mov	r25, r24
    69ea:	0e 94 80 55 	call	0xab00	; 0xab00 <__floatsisf>
    69ee:	6b 01       	movw	r12, r22
    69f0:	7c 01       	movw	r14, r24
    69f2:	e8 01       	movw	r28, r16
    69f4:	c2 95       	swap	r28
    69f6:	d2 95       	swap	r29
    69f8:	d0 7f       	andi	r29, 0xF0	; 240
    69fa:	dc 27       	eor	r29, r28
    69fc:	c0 7f       	andi	r28, 0xF0	; 240
    69fe:	dc 27       	eor	r29, r28
    6a00:	c6 51       	subi	r28, 0x16	; 22
    6a02:	d7 4f       	sbci	r29, 0xF7	; 247
    6a04:	6a 81       	ldd	r22, Y+2	; 0x02
    6a06:	7b 81       	ldd	r23, Y+3	; 0x03
    6a08:	68 19       	sub	r22, r8
    6a0a:	79 09       	sbc	r23, r9
    6a0c:	88 27       	eor	r24, r24
    6a0e:	77 fd       	sbrc	r23, 7
    6a10:	80 95       	com	r24
    6a12:	98 2f       	mov	r25, r24
    6a14:	0e 94 80 55 	call	0xab00	; 0xab00 <__floatsisf>
    6a18:	9b 01       	movw	r18, r22
    6a1a:	ac 01       	movw	r20, r24
    6a1c:	c7 01       	movw	r24, r14
    6a1e:	b6 01       	movw	r22, r12
    6a20:	0e 94 99 56 	call	0xad32	; 0xad32 <__mulsf3>
    6a24:	7b 01       	movw	r14, r22
    6a26:	8c 01       	movw	r16, r24
    6a28:	68 81       	ld	r22, Y
    6a2a:	79 81       	ldd	r23, Y+1	; 0x01
    6a2c:	6a 19       	sub	r22, r10
    6a2e:	7b 09       	sbc	r23, r11
    6a30:	88 27       	eor	r24, r24
    6a32:	77 fd       	sbrc	r23, 7
    6a34:	80 95       	com	r24
    6a36:	98 2f       	mov	r25, r24
    6a38:	0e 94 80 55 	call	0xab00	; 0xab00 <__floatsisf>
    6a3c:	9b 01       	movw	r18, r22
    6a3e:	ac 01       	movw	r20, r24
    6a40:	c8 01       	movw	r24, r16
    6a42:	b7 01       	movw	r22, r14
    6a44:	0e 94 e5 54 	call	0xa9ca	; 0xa9ca <__divsf3>
    6a48:	0e 94 4d 55 	call	0xaa9a	; 0xaa9a <__fixsfsi>
    6a4c:	68 0d       	add	r22, r8
    6a4e:	79 1d       	adc	r23, r9
    6a50:	70 93 c9 04 	sts	0x04C9, r23
    6a54:	60 93 c8 04 	sts	0x04C8, r22
    6a58:	07 c0       	rjmp	.+14     	; 0x6a68 <getLeftSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    6a5a:	00 e0       	ldi	r16, 0x00	; 0
    6a5c:	10 e0       	ldi	r17, 0x00	; 0
    6a5e:	42 cf       	rjmp	.-380    	; 0x68e4 <getLeftSpeedFromInput+0x40>
		}     
    }

    if(pwm_left >= 0) {
        if(last_left_vel == 0) {
            speedLeftFromEnc = 0;
    6a60:	10 92 c9 04 	sts	0x04C9, r1
    6a64:	10 92 c8 04 	sts	0x04C8, r1
        	speedLeftFromEnc = calibration[indBwL-1][5] + (signed int)(((float)(last_left_vel-calibration[indBwL-1][4])*(float)(calibration[indBwL][5]-calibration[indBwL-1][5]))/(float)(calibration[indBwL][4]-calibration[indBwL-1][4]));
		}
		speedLeftFromEnc = -speedLeftFromEnc;
    }
    
}
    6a68:	df 91       	pop	r29
    6a6a:	cf 91       	pop	r28
    6a6c:	1f 91       	pop	r17
    6a6e:	0f 91       	pop	r16
    6a70:	ff 90       	pop	r15
    6a72:	ef 90       	pop	r14
    6a74:	df 90       	pop	r13
    6a76:	cf 90       	pop	r12
    6a78:	bf 90       	pop	r11
    6a7a:	af 90       	pop	r10
    6a7c:	9f 90       	pop	r9
    6a7e:	8f 90       	pop	r8
    6a80:	08 95       	ret
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    6a82:	60 91 f2 08 	lds	r22, 0x08F2
    6a86:	70 91 f3 08 	lds	r23, 0x08F3
    6a8a:	6c 17       	cp	r22, r28
    6a8c:	7d 07       	cpc	r23, r29
    6a8e:	0c f0       	brlt	.+2      	; 0x6a92 <getLeftSpeedFromInput+0x1ee>
    6a90:	7e c0       	rjmp	.+252    	; 0x6b8e <getLeftSpeedFromInput+0x2ea>
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    6a92:	0f ef       	ldi	r16, 0xFF	; 255
    6a94:	1f ef       	ldi	r17, 0xFF	; 255
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    6a96:	80 91 02 09 	lds	r24, 0x0902
    6a9a:	90 91 03 09 	lds	r25, 0x0903
    6a9e:	8c 17       	cp	r24, r28
    6aa0:	9d 07       	cpc	r25, r29
    6aa2:	44 f0       	brlt	.+16     	; 0x6ab4 <getLeftSpeedFromInput+0x210>
    }
    
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {
    6aa4:	81 e0       	ldi	r24, 0x01	; 1
    6aa6:	9f ef       	ldi	r25, 0xFF	; 255
    6aa8:	0f 3f       	cpi	r16, 0xFF	; 255
    6aaa:	19 07       	cpc	r17, r25
    6aac:	09 f0       	breq	.+2      	; 0x6ab0 <getLeftSpeedFromInput+0x20c>
    6aae:	80 e0       	ldi	r24, 0x00	; 0
    6ab0:	08 2f       	mov	r16, r24
    6ab2:	10 e0       	ldi	r17, 0x00	; 0
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    6ab4:	80 91 12 09 	lds	r24, 0x0912
    6ab8:	90 91 13 09 	lds	r25, 0x0913
    6abc:	8c 17       	cp	r24, r28
    6abe:	9d 07       	cpc	r25, r29
    6ac0:	2c f0       	brlt	.+10     	; 0x6acc <getLeftSpeedFromInput+0x228>
    6ac2:	8f ef       	ldi	r24, 0xFF	; 255
    6ac4:	0f 3f       	cpi	r16, 0xFF	; 255
    6ac6:	18 07       	cpc	r17, r24
    6ac8:	09 f4       	brne	.+2      	; 0x6acc <getLeftSpeedFromInput+0x228>
    6aca:	19 c1       	rjmp	.+562    	; 0x6cfe <getLeftSpeedFromInput+0x45a>
    6acc:	80 91 22 09 	lds	r24, 0x0922
    6ad0:	90 91 23 09 	lds	r25, 0x0923
    6ad4:	8c 17       	cp	r24, r28
    6ad6:	9d 07       	cpc	r25, r29
    6ad8:	2c f0       	brlt	.+10     	; 0x6ae4 <getLeftSpeedFromInput+0x240>
    6ada:	9f ef       	ldi	r25, 0xFF	; 255
    6adc:	0f 3f       	cpi	r16, 0xFF	; 255
    6ade:	19 07       	cpc	r17, r25
    6ae0:	09 f4       	brne	.+2      	; 0x6ae4 <getLeftSpeedFromInput+0x240>
    6ae2:	0a c1       	rjmp	.+532    	; 0x6cf8 <getLeftSpeedFromInput+0x454>
    6ae4:	80 91 32 09 	lds	r24, 0x0932
    6ae8:	90 91 33 09 	lds	r25, 0x0933
    6aec:	8c 17       	cp	r24, r28
    6aee:	9d 07       	cpc	r25, r29
    6af0:	2c f0       	brlt	.+10     	; 0x6afc <getLeftSpeedFromInput+0x258>
    6af2:	8f ef       	ldi	r24, 0xFF	; 255
    6af4:	0f 3f       	cpi	r16, 0xFF	; 255
    6af6:	18 07       	cpc	r17, r24
    6af8:	09 f4       	brne	.+2      	; 0x6afc <getLeftSpeedFromInput+0x258>
    6afa:	fb c0       	rjmp	.+502    	; 0x6cf2 <getLeftSpeedFromInput+0x44e>
    6afc:	80 91 42 09 	lds	r24, 0x0942
    6b00:	90 91 43 09 	lds	r25, 0x0943
    6b04:	8c 17       	cp	r24, r28
    6b06:	9d 07       	cpc	r25, r29
    6b08:	2c f0       	brlt	.+10     	; 0x6b14 <getLeftSpeedFromInput+0x270>
    6b0a:	9f ef       	ldi	r25, 0xFF	; 255
    6b0c:	0f 3f       	cpi	r16, 0xFF	; 255
    6b0e:	19 07       	cpc	r17, r25
    6b10:	09 f4       	brne	.+2      	; 0x6b14 <getLeftSpeedFromInput+0x270>
    6b12:	ec c0       	rjmp	.+472    	; 0x6cec <getLeftSpeedFromInput+0x448>
    6b14:	80 91 52 09 	lds	r24, 0x0952
    6b18:	90 91 53 09 	lds	r25, 0x0953
    6b1c:	8c 17       	cp	r24, r28
    6b1e:	9d 07       	cpc	r25, r29
    6b20:	2c f0       	brlt	.+10     	; 0x6b2c <getLeftSpeedFromInput+0x288>
    6b22:	8f ef       	ldi	r24, 0xFF	; 255
    6b24:	0f 3f       	cpi	r16, 0xFF	; 255
    6b26:	18 07       	cpc	r17, r24
    6b28:	09 f4       	brne	.+2      	; 0x6b2c <getLeftSpeedFromInput+0x288>
    6b2a:	dd c0       	rjmp	.+442    	; 0x6ce6 <getLeftSpeedFromInput+0x442>
    6b2c:	80 91 62 09 	lds	r24, 0x0962
    6b30:	90 91 63 09 	lds	r25, 0x0963
    6b34:	8c 17       	cp	r24, r28
    6b36:	9d 07       	cpc	r25, r29
    6b38:	2c f0       	brlt	.+10     	; 0x6b44 <getLeftSpeedFromInput+0x2a0>
    6b3a:	9f ef       	ldi	r25, 0xFF	; 255
    6b3c:	0f 3f       	cpi	r16, 0xFF	; 255
    6b3e:	19 07       	cpc	r17, r25
    6b40:	09 f4       	brne	.+2      	; 0x6b44 <getLeftSpeedFromInput+0x2a0>
    6b42:	ce c0       	rjmp	.+412    	; 0x6ce0 <getLeftSpeedFromInput+0x43c>
    6b44:	e0 90 72 09 	lds	r14, 0x0972
    6b48:	f0 90 73 09 	lds	r15, 0x0973
    6b4c:	ec 16       	cp	r14, r28
    6b4e:	fd 06       	cpc	r15, r29
    6b50:	2c f0       	brlt	.+10     	; 0x6b5c <getLeftSpeedFromInput+0x2b8>
    6b52:	8f ef       	ldi	r24, 0xFF	; 255
    6b54:	0f 3f       	cpi	r16, 0xFF	; 255
    6b56:	18 07       	cpc	r17, r24
    6b58:	09 f4       	brne	.+2      	; 0x6b5c <getLeftSpeedFromInput+0x2b8>
    6b5a:	bf c0       	rjmp	.+382    	; 0x6cda <getLeftSpeedFromInput+0x436>
            } else {
                speedLeftFromEnc = calibration[indFwL-1][1] + (signed int)(((float)(last_left_vel-calibration[indFwL-1][0])*(float)(calibration[indFwL][1]-calibration[indFwL-1][1]))/(float)(calibration[indFwL][0]-calibration[indFwL-1][0]));
            }
        }
    } else {
		if(indBwL==0) {  // the velocity is lower than first saved in the matrix
    6b5c:	01 15       	cp	r16, r1
    6b5e:	11 05       	cpc	r17, r1
    6b60:	09 f0       	breq	.+2      	; 0x6b64 <getLeftSpeedFromInput+0x2c0>
    6b62:	6e c0       	rjmp	.+220    	; 0x6c40 <getLeftSpeedFromInput+0x39c>
        	speedLeftFromEnc = (last_left_vel*calibration[0][5])/calibration[0][4];
    6b64:	20 91 f4 08 	lds	r18, 0x08F4
    6b68:	30 91 f5 08 	lds	r19, 0x08F5
    6b6c:	c2 9f       	mul	r28, r18
    6b6e:	c0 01       	movw	r24, r0
    6b70:	c3 9f       	mul	r28, r19
    6b72:	90 0d       	add	r25, r0
    6b74:	d2 9f       	mul	r29, r18
    6b76:	90 0d       	add	r25, r0
    6b78:	11 24       	eor	r1, r1
    6b7a:	0e 94 57 57 	call	0xaeae	; 0xaeae <__divmodhi4>
		} else if(indBwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][5]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][4]);  // take the max
		} else {
        	speedLeftFromEnc = calibration[indBwL-1][5] + (signed int)(((float)(last_left_vel-calibration[indBwL-1][4])*(float)(calibration[indBwL][5]-calibration[indBwL-1][5]))/(float)(calibration[indBwL][4]-calibration[indBwL-1][4]));
		}
		speedLeftFromEnc = -speedLeftFromEnc;
    6b7e:	70 95       	com	r23
    6b80:	61 95       	neg	r22
    6b82:	7f 4f       	sbci	r23, 0xFF	; 255
    6b84:	70 93 c9 04 	sts	0x04C9, r23
    6b88:	60 93 c8 04 	sts	0x04C8, r22
    6b8c:	6d cf       	rjmp	.-294    	; 0x6a68 <getLeftSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    6b8e:	00 e0       	ldi	r16, 0x00	; 0
    6b90:	10 e0       	ldi	r17, 0x00	; 0
    6b92:	81 cf       	rjmp	.-254    	; 0x6a96 <getLeftSpeedFromInput+0x1f2>
            speedLeftFromEnc = 0;
        } else {
            if(indFwL==0) {  // the velocity is lower than first saved in the matrix
                speedLeftFromEnc = (last_left_vel*calibration[0][1])/calibration[0][0];
            } else if(indFwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
                speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][1]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][0]);  // take the max
    6b94:	60 91 6c 09 	lds	r22, 0x096C
    6b98:	70 91 6d 09 	lds	r23, 0x096D
    6b9c:	88 27       	eor	r24, r24
    6b9e:	77 fd       	sbrc	r23, 7
    6ba0:	80 95       	com	r24
    6ba2:	98 2f       	mov	r25, r24
    6ba4:	0e 94 80 55 	call	0xab00	; 0xab00 <__floatsisf>
    6ba8:	5b 01       	movw	r10, r22
    6baa:	6c 01       	movw	r12, r24
    6bac:	be 01       	movw	r22, r28
    6bae:	88 27       	eor	r24, r24
    6bb0:	77 fd       	sbrc	r23, 7
    6bb2:	80 95       	com	r24
    6bb4:	98 2f       	mov	r25, r24
    6bb6:	0e 94 80 55 	call	0xab00	; 0xab00 <__floatsisf>
    6bba:	9b 01       	movw	r18, r22
    6bbc:	ac 01       	movw	r20, r24
    6bbe:	c6 01       	movw	r24, r12
    6bc0:	b5 01       	movw	r22, r10
    6bc2:	0e 94 99 56 	call	0xad32	; 0xad32 <__mulsf3>
    6bc6:	5b 01       	movw	r10, r22
    6bc8:	6c 01       	movw	r12, r24
    6bca:	b7 01       	movw	r22, r14
    6bcc:	88 27       	eor	r24, r24
    6bce:	77 fd       	sbrc	r23, 7
    6bd0:	80 95       	com	r24
    6bd2:	98 2f       	mov	r25, r24
    6bd4:	0e 94 80 55 	call	0xab00	; 0xab00 <__floatsisf>
    6bd8:	9b 01       	movw	r18, r22
    6bda:	ac 01       	movw	r20, r24
    6bdc:	c6 01       	movw	r24, r12
    6bde:	b5 01       	movw	r22, r10
    6be0:	0e 94 e5 54 	call	0xa9ca	; 0xa9ca <__divsf3>
    6be4:	0e 94 4d 55 	call	0xaa9a	; 0xaa9a <__fixsfsi>
    6be8:	70 93 c9 04 	sts	0x04C9, r23
    6bec:	60 93 c8 04 	sts	0x04C8, r22
    6bf0:	3b cf       	rjmp	.-394    	; 0x6a68 <getLeftSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    6bf2:	02 e0       	ldi	r16, 0x02	; 2
    6bf4:	10 e0       	ldi	r17, 0x00	; 0
    6bf6:	91 ce       	rjmp	.-734    	; 0x691a <getLeftSpeedFromInput+0x76>
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    6bf8:	08 e0       	ldi	r16, 0x08	; 8
    6bfa:	10 e0       	ldi	r17, 0x00	; 0
    6bfc:	d6 ce       	rjmp	.-596    	; 0x69aa <getLeftSpeedFromInput+0x106>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    6bfe:	07 e0       	ldi	r16, 0x07	; 7
    6c00:	10 e0       	ldi	r17, 0x00	; 0
    6c02:	c7 ce       	rjmp	.-626    	; 0x6992 <getLeftSpeedFromInput+0xee>
    6c04:	06 e0       	ldi	r16, 0x06	; 6
    6c06:	10 e0       	ldi	r17, 0x00	; 0
    6c08:	b8 ce       	rjmp	.-656    	; 0x697a <getLeftSpeedFromInput+0xd6>
    6c0a:	05 e0       	ldi	r16, 0x05	; 5
    6c0c:	10 e0       	ldi	r17, 0x00	; 0
    6c0e:	a9 ce       	rjmp	.-686    	; 0x6962 <getLeftSpeedFromInput+0xbe>
    6c10:	04 e0       	ldi	r16, 0x04	; 4
    6c12:	10 e0       	ldi	r17, 0x00	; 0
    6c14:	9a ce       	rjmp	.-716    	; 0x694a <getLeftSpeedFromInput+0xa6>
    6c16:	03 e0       	ldi	r16, 0x03	; 3
    6c18:	10 e0       	ldi	r17, 0x00	; 0
    6c1a:	8b ce       	rjmp	.-746    	; 0x6932 <getLeftSpeedFromInput+0x8e>
    if(pwm_left >= 0) {
        if(last_left_vel == 0) {
            speedLeftFromEnc = 0;
        } else {
            if(indFwL==0) {  // the velocity is lower than first saved in the matrix
                speedLeftFromEnc = (last_left_vel*calibration[0][1])/calibration[0][0];
    6c1c:	20 91 ec 08 	lds	r18, 0x08EC
    6c20:	30 91 ed 08 	lds	r19, 0x08ED
    6c24:	c2 9f       	mul	r28, r18
    6c26:	c0 01       	movw	r24, r0
    6c28:	c3 9f       	mul	r28, r19
    6c2a:	90 0d       	add	r25, r0
    6c2c:	d2 9f       	mul	r29, r18
    6c2e:	90 0d       	add	r25, r0
    6c30:	11 24       	eor	r1, r1
    6c32:	0e 94 57 57 	call	0xaeae	; 0xaeae <__divmodhi4>
    6c36:	70 93 c9 04 	sts	0x04C9, r23
    6c3a:	60 93 c8 04 	sts	0x04C8, r22
    6c3e:	14 cf       	rjmp	.-472    	; 0x6a68 <getLeftSpeedFromInput+0x1c4>
            }
        }
    } else {
		if(indBwL==0) {  // the velocity is lower than first saved in the matrix
        	speedLeftFromEnc = (last_left_vel*calibration[0][5])/calibration[0][4];
		} else if(indBwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    6c40:	8f ef       	ldi	r24, 0xFF	; 255
    6c42:	0f 3f       	cpi	r16, 0xFF	; 255
    6c44:	18 07       	cpc	r17, r24
    6c46:	09 f4       	brne	.+2      	; 0x6c4a <getLeftSpeedFromInput+0x3a6>
    6c48:	5d c0       	rjmp	.+186    	; 0x6d04 <getLeftSpeedFromInput+0x460>
        	speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][5]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][4]);  // take the max
		} else {
        	speedLeftFromEnc = calibration[indBwL-1][5] + (signed int)(((float)(last_left_vel-calibration[indBwL-1][4])*(float)(calibration[indBwL][5]-calibration[indBwL-1][5]))/(float)(calibration[indBwL][4]-calibration[indBwL-1][4]));
    6c4a:	f8 01       	movw	r30, r16
    6c4c:	e2 95       	swap	r30
    6c4e:	f2 95       	swap	r31
    6c50:	f0 7f       	andi	r31, 0xF0	; 240
    6c52:	fe 27       	eor	r31, r30
    6c54:	e0 7f       	andi	r30, 0xF0	; 240
    6c56:	fe 27       	eor	r31, r30
    6c58:	e6 52       	subi	r30, 0x26	; 38
    6c5a:	f7 4f       	sbci	r31, 0xF7	; 247
    6c5c:	a0 84       	ldd	r10, Z+8	; 0x08
    6c5e:	b1 84       	ldd	r11, Z+9	; 0x09
    6c60:	82 84       	ldd	r8, Z+10	; 0x0a
    6c62:	93 84       	ldd	r9, Z+11	; 0x0b
    6c64:	ca 19       	sub	r28, r10
    6c66:	db 09       	sbc	r29, r11
    6c68:	be 01       	movw	r22, r28
    6c6a:	88 27       	eor	r24, r24
    6c6c:	77 fd       	sbrc	r23, 7
    6c6e:	80 95       	com	r24
    6c70:	98 2f       	mov	r25, r24
    6c72:	0e 94 80 55 	call	0xab00	; 0xab00 <__floatsisf>
    6c76:	6b 01       	movw	r12, r22
    6c78:	7c 01       	movw	r14, r24
    6c7a:	e8 01       	movw	r28, r16
    6c7c:	c2 95       	swap	r28
    6c7e:	d2 95       	swap	r29
    6c80:	d0 7f       	andi	r29, 0xF0	; 240
    6c82:	dc 27       	eor	r29, r28
    6c84:	c0 7f       	andi	r28, 0xF0	; 240
    6c86:	dc 27       	eor	r29, r28
    6c88:	c6 51       	subi	r28, 0x16	; 22
    6c8a:	d7 4f       	sbci	r29, 0xF7	; 247
    6c8c:	6a 85       	ldd	r22, Y+10	; 0x0a
    6c8e:	7b 85       	ldd	r23, Y+11	; 0x0b
    6c90:	68 19       	sub	r22, r8
    6c92:	79 09       	sbc	r23, r9
    6c94:	88 27       	eor	r24, r24
    6c96:	77 fd       	sbrc	r23, 7
    6c98:	80 95       	com	r24
    6c9a:	98 2f       	mov	r25, r24
    6c9c:	0e 94 80 55 	call	0xab00	; 0xab00 <__floatsisf>
    6ca0:	9b 01       	movw	r18, r22
    6ca2:	ac 01       	movw	r20, r24
    6ca4:	c7 01       	movw	r24, r14
    6ca6:	b6 01       	movw	r22, r12
    6ca8:	0e 94 99 56 	call	0xad32	; 0xad32 <__mulsf3>
    6cac:	7b 01       	movw	r14, r22
    6cae:	8c 01       	movw	r16, r24
    6cb0:	68 85       	ldd	r22, Y+8	; 0x08
    6cb2:	79 85       	ldd	r23, Y+9	; 0x09
    6cb4:	6a 19       	sub	r22, r10
    6cb6:	7b 09       	sbc	r23, r11
    6cb8:	88 27       	eor	r24, r24
    6cba:	77 fd       	sbrc	r23, 7
    6cbc:	80 95       	com	r24
    6cbe:	98 2f       	mov	r25, r24
    6cc0:	0e 94 80 55 	call	0xab00	; 0xab00 <__floatsisf>
    6cc4:	9b 01       	movw	r18, r22
    6cc6:	ac 01       	movw	r20, r24
    6cc8:	c8 01       	movw	r24, r16
    6cca:	b7 01       	movw	r22, r14
    6ccc:	0e 94 e5 54 	call	0xa9ca	; 0xa9ca <__divsf3>
    6cd0:	0e 94 4d 55 	call	0xaa9a	; 0xaa9a <__fixsfsi>
    6cd4:	68 0d       	add	r22, r8
    6cd6:	79 1d       	adc	r23, r9
    6cd8:	52 cf       	rjmp	.-348    	; 0x6b7e <getLeftSpeedFromInput+0x2da>
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    6cda:	08 e0       	ldi	r16, 0x08	; 8
    6cdc:	10 e0       	ldi	r17, 0x00	; 0
    6cde:	3e cf       	rjmp	.-388    	; 0x6b5c <getLeftSpeedFromInput+0x2b8>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    6ce0:	07 e0       	ldi	r16, 0x07	; 7
    6ce2:	10 e0       	ldi	r17, 0x00	; 0
    6ce4:	2f cf       	rjmp	.-418    	; 0x6b44 <getLeftSpeedFromInput+0x2a0>
    6ce6:	06 e0       	ldi	r16, 0x06	; 6
    6ce8:	10 e0       	ldi	r17, 0x00	; 0
    6cea:	20 cf       	rjmp	.-448    	; 0x6b2c <getLeftSpeedFromInput+0x288>
    6cec:	05 e0       	ldi	r16, 0x05	; 5
    6cee:	10 e0       	ldi	r17, 0x00	; 0
    6cf0:	11 cf       	rjmp	.-478    	; 0x6b14 <getLeftSpeedFromInput+0x270>
    6cf2:	04 e0       	ldi	r16, 0x04	; 4
    6cf4:	10 e0       	ldi	r17, 0x00	; 0
    6cf6:	02 cf       	rjmp	.-508    	; 0x6afc <getLeftSpeedFromInput+0x258>
    6cf8:	03 e0       	ldi	r16, 0x03	; 3
    6cfa:	10 e0       	ldi	r17, 0x00	; 0
    6cfc:	f3 ce       	rjmp	.-538    	; 0x6ae4 <getLeftSpeedFromInput+0x240>
    6cfe:	02 e0       	ldi	r16, 0x02	; 2
    6d00:	10 e0       	ldi	r17, 0x00	; 0
    6d02:	e4 ce       	rjmp	.-568    	; 0x6acc <getLeftSpeedFromInput+0x228>
        }
    } else {
		if(indBwL==0) {  // the velocity is lower than first saved in the matrix
        	speedLeftFromEnc = (last_left_vel*calibration[0][5])/calibration[0][4];
		} else if(indBwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][5]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][4]);  // take the max
    6d04:	60 91 74 09 	lds	r22, 0x0974
    6d08:	70 91 75 09 	lds	r23, 0x0975
    6d0c:	88 27       	eor	r24, r24
    6d0e:	77 fd       	sbrc	r23, 7
    6d10:	80 95       	com	r24
    6d12:	98 2f       	mov	r25, r24
    6d14:	0e 94 80 55 	call	0xab00	; 0xab00 <__floatsisf>
    6d18:	5b 01       	movw	r10, r22
    6d1a:	6c 01       	movw	r12, r24
    6d1c:	be 01       	movw	r22, r28
    6d1e:	88 27       	eor	r24, r24
    6d20:	77 fd       	sbrc	r23, 7
    6d22:	80 95       	com	r24
    6d24:	98 2f       	mov	r25, r24
    6d26:	0e 94 80 55 	call	0xab00	; 0xab00 <__floatsisf>
    6d2a:	9b 01       	movw	r18, r22
    6d2c:	ac 01       	movw	r20, r24
    6d2e:	c6 01       	movw	r24, r12
    6d30:	b5 01       	movw	r22, r10
    6d32:	0e 94 99 56 	call	0xad32	; 0xad32 <__mulsf3>
    6d36:	5b 01       	movw	r10, r22
    6d38:	6c 01       	movw	r12, r24
    6d3a:	b7 01       	movw	r22, r14
    6d3c:	88 27       	eor	r24, r24
    6d3e:	77 fd       	sbrc	r23, 7
    6d40:	80 95       	com	r24
    6d42:	98 2f       	mov	r25, r24
    6d44:	0e 94 80 55 	call	0xab00	; 0xab00 <__floatsisf>
    6d48:	9b 01       	movw	r18, r22
    6d4a:	ac 01       	movw	r20, r24
    6d4c:	c6 01       	movw	r24, r12
    6d4e:	b5 01       	movw	r22, r10
    6d50:	0e 94 e5 54 	call	0xa9ca	; 0xa9ca <__divsf3>
    6d54:	0e 94 4d 55 	call	0xaa9a	; 0xaa9a <__fixsfsi>
    6d58:	12 cf       	rjmp	.-476    	; 0x6b7e <getLeftSpeedFromInput+0x2da>

00006d5a <handleMotorsWithSpeedController>:
		OCR4B = 0;
	}

}

void handleMotorsWithSpeedController() {
    6d5a:	2f 92       	push	r2
    6d5c:	3f 92       	push	r3
    6d5e:	4f 92       	push	r4
    6d60:	5f 92       	push	r5
    6d62:	6f 92       	push	r6
    6d64:	7f 92       	push	r7
    6d66:	8f 92       	push	r8
    6d68:	9f 92       	push	r9
    6d6a:	af 92       	push	r10
    6d6c:	bf 92       	push	r11
    6d6e:	cf 92       	push	r12
    6d70:	df 92       	push	r13
    6d72:	ef 92       	push	r14
    6d74:	ff 92       	push	r15
    6d76:	0f 93       	push	r16
    6d78:	1f 93       	push	r17

	if(calibrateOdomFlag==1) {
    6d7a:	80 91 76 05 	lds	r24, 0x0576
    6d7e:	81 30       	cpi	r24, 0x01	; 1
    6d80:	09 f4       	brne	.+2      	; 0x6d84 <handleMotorsWithSpeedController+0x2a>
    6d82:	50 c2       	rjmp	.+1184   	; 0x7224 <handleMotorsWithSpeedController+0x4ca>
		pwm_right_working = pwm_intermediate_right_desired;
		pwm_left_working = pwm_intermediate_left_desired;
	} else {
		if(pwm_intermediate_right_desired >= 0) {		// pwm in the range -127..127
    6d84:	80 91 0d 03 	lds	r24, 0x030D
    6d88:	90 91 0e 03 	lds	r25, 0x030E
    6d8c:	97 fd       	sbrc	r25, 7
    6d8e:	c2 c2       	rjmp	.+1412   	; 0x7314 <handleMotorsWithSpeedController+0x5ba>
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_FW_SC);
    6d90:	61 e0       	ldi	r22, 0x01	; 1
    6d92:	0e 94 8f 2e 	call	0x5d1e	; 0x5d1e <getInputFromSpeed>
    6d96:	90 93 1e 03 	sts	0x031E, r25
    6d9a:	80 93 1d 03 	sts	0x031D, r24
		} else {
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_BW_SC);
		}
		if(pwm_intermediate_left_desired >= 0) {		// pwm in the range -127..127
    6d9e:	80 91 0f 03 	lds	r24, 0x030F
    6da2:	90 91 10 03 	lds	r25, 0x0310
    6da6:	97 fd       	sbrc	r25, 7
    6da8:	ad c2       	rjmp	.+1370   	; 0x7304 <handleMotorsWithSpeedController+0x5aa>
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_FW_SC);
    6daa:	60 e0       	ldi	r22, 0x00	; 0
    6dac:	0e 94 8f 2e 	call	0x5d1e	; 0x5d1e <getInputFromSpeed>
    6db0:	90 93 20 03 	sts	0x0320, r25
    6db4:	80 93 1f 03 	sts	0x031F, r24
		} else {
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_BW_SC);
		}
	}

	if(obstacleAvoidanceEnabled) {
    6db8:	20 91 7c 04 	lds	r18, 0x047C
    6dbc:	22 23       	and	r18, r18
    6dbe:	09 f0       	breq	.+2      	; 0x6dc2 <handleMotorsWithSpeedController+0x68>
    6dc0:	26 c2       	rjmp	.+1100   	; 0x720e <handleMotorsWithSpeedController+0x4b4>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
	}
	pwm_left_desired_to_control = pwm_left_working;
    6dc2:	90 93 fc 02 	sts	0x02FC, r25
    6dc6:	80 93 fb 02 	sts	0x02FB, r24
	pwm_right_desired_to_control = pwm_right_working;
    6dca:	80 91 1d 03 	lds	r24, 0x031D
    6dce:	90 91 1e 03 	lds	r25, 0x031E
    6dd2:	90 93 fa 02 	sts	0x02FA, r25
    6dd6:	80 93 f9 02 	sts	0x02F9, r24

	if(compute_left_vel) {
    6dda:	80 91 07 02 	lds	r24, 0x0207
    6dde:	88 23       	and	r24, r24
    6de0:	09 f4       	brne	.+2      	; 0x6de4 <handleMotorsWithSpeedController+0x8a>
    6de2:	a7 c0       	rjmp	.+334    	; 0x6f32 <handleMotorsWithSpeedController+0x1d8>

		last_left_vel = left_vel_sum>>2;
    6de4:	20 91 fd 02 	lds	r18, 0x02FD
    6de8:	30 91 fe 02 	lds	r19, 0x02FE
    6dec:	36 95       	lsr	r19
    6dee:	27 95       	ror	r18
    6df0:	36 95       	lsr	r19
    6df2:	27 95       	ror	r18
    6df4:	30 93 02 03 	sts	0x0302, r19
    6df8:	20 93 01 03 	sts	0x0301, r18
		compute_left_vel = 0;
    6dfc:	10 92 07 02 	sts	0x0207, r1
		left_vel_sum = 0;
    6e00:	10 92 fe 02 	sts	0x02FE, r1
    6e04:	10 92 fd 02 	sts	0x02FD, r1
		
		if(calibrateOdomFlag==1) {
    6e08:	80 91 76 05 	lds	r24, 0x0576
    6e0c:	81 30       	cpi	r24, 0x01	; 1
    6e0e:	09 f4       	brne	.+2      	; 0x6e12 <handleMotorsWithSpeedController+0xb8>
    6e10:	30 c2       	rjmp	.+1120   	; 0x7272 <handleMotorsWithSpeedController+0x518>
			leftSpeedSumOdom += last_left_vel;
			leftSumCount++;
		}

		getLeftSpeedFromInput();	// get speed in mm/s
    6e12:	0e 94 52 34 	call	0x68a4	; 0x68a4 <getLeftSpeedFromInput>
		leftDistPrev = leftDist;
    6e16:	80 91 a3 04 	lds	r24, 0x04A3
    6e1a:	90 91 a4 04 	lds	r25, 0x04A4
    6e1e:	a0 91 a5 04 	lds	r26, 0x04A5
    6e22:	b0 91 a6 04 	lds	r27, 0x04A6
    6e26:	80 93 ab 04 	sts	0x04AB, r24
    6e2a:	90 93 ac 04 	sts	0x04AC, r25
    6e2e:	a0 93 ad 04 	sts	0x04AD, r26
    6e32:	b0 93 ae 04 	sts	0x04AE, r27
		//timeOdometry = getTime100MicroSec()-timeLeftOdom;
		leftDist += ((float)speedLeftFromEnc*((float)(getTime100MicroSec()-timeLeftOdom)*104.0))/1000000.0;	// distance in mm				
    6e36:	60 91 c8 04 	lds	r22, 0x04C8
    6e3a:	70 91 c9 04 	lds	r23, 0x04C9
    6e3e:	88 27       	eor	r24, r24
    6e40:	77 fd       	sbrc	r23, 7
    6e42:	80 95       	com	r24
    6e44:	98 2f       	mov	r25, r24
    6e46:	0e 94 80 55 	call	0xab00	; 0xab00 <__floatsisf>
    6e4a:	7b 01       	movw	r14, r22
    6e4c:	8c 01       	movw	r16, r24
    6e4e:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
    6e52:	20 91 cc 04 	lds	r18, 0x04CC
    6e56:	30 91 cd 04 	lds	r19, 0x04CD
    6e5a:	40 91 ce 04 	lds	r20, 0x04CE
    6e5e:	50 91 cf 04 	lds	r21, 0x04CF
    6e62:	62 1b       	sub	r22, r18
    6e64:	73 0b       	sbc	r23, r19
    6e66:	84 0b       	sbc	r24, r20
    6e68:	95 0b       	sbc	r25, r21
    6e6a:	0e 94 7e 55 	call	0xaafc	; 0xaafc <__floatunsisf>
    6e6e:	20 e0       	ldi	r18, 0x00	; 0
    6e70:	30 e0       	ldi	r19, 0x00	; 0
    6e72:	40 ed       	ldi	r20, 0xD0	; 208
    6e74:	52 e4       	ldi	r21, 0x42	; 66
    6e76:	0e 94 99 56 	call	0xad32	; 0xad32 <__mulsf3>
    6e7a:	9b 01       	movw	r18, r22
    6e7c:	ac 01       	movw	r20, r24
    6e7e:	c8 01       	movw	r24, r16
    6e80:	b7 01       	movw	r22, r14
    6e82:	0e 94 99 56 	call	0xad32	; 0xad32 <__mulsf3>
    6e86:	20 e0       	ldi	r18, 0x00	; 0
    6e88:	34 e2       	ldi	r19, 0x24	; 36
    6e8a:	44 e7       	ldi	r20, 0x74	; 116
    6e8c:	59 e4       	ldi	r21, 0x49	; 73
    6e8e:	0e 94 e5 54 	call	0xa9ca	; 0xa9ca <__divsf3>
    6e92:	9b 01       	movw	r18, r22
    6e94:	ac 01       	movw	r20, r24
    6e96:	60 91 a3 04 	lds	r22, 0x04A3
    6e9a:	70 91 a4 04 	lds	r23, 0x04A4
    6e9e:	80 91 a5 04 	lds	r24, 0x04A5
    6ea2:	90 91 a6 04 	lds	r25, 0x04A6
    6ea6:	0e 94 18 54 	call	0xa830	; 0xa830 <__addsf3>
    6eaa:	60 93 a3 04 	sts	0x04A3, r22
    6eae:	70 93 a4 04 	sts	0x04A4, r23
    6eb2:	80 93 a5 04 	sts	0x04A5, r24
    6eb6:	90 93 a6 04 	sts	0x04A6, r25
		timeLeftOdom = getTime100MicroSec();
    6eba:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
    6ebe:	60 93 cc 04 	sts	0x04CC, r22
    6ec2:	70 93 cd 04 	sts	0x04CD, r23
    6ec6:	80 93 ce 04 	sts	0x04CE, r24
    6eca:	90 93 cf 04 	sts	0x04CF, r25
		leftMotSteps = (signed long int)leftDist;
    6ece:	60 91 a3 04 	lds	r22, 0x04A3
    6ed2:	70 91 a4 04 	lds	r23, 0x04A4
    6ed6:	80 91 a5 04 	lds	r24, 0x04A5
    6eda:	90 91 a6 04 	lds	r25, 0x04A6
    6ede:	0e 94 4d 55 	call	0xaa9a	; 0xaa9a <__fixsfsi>
    6ee2:	0e 94 80 55 	call	0xab00	; 0xab00 <__floatsisf>
    6ee6:	60 93 e5 02 	sts	0x02E5, r22
    6eea:	70 93 e6 02 	sts	0x02E6, r23
    6eee:	80 93 e7 02 	sts	0x02E7, r24
    6ef2:	90 93 e8 02 	sts	0x02E8, r25
		} else {
			leftMotSteps -= ((float)(last_left_vel>>3))*(LEFT_ENC_OFFSET-ENC_SLOPE*((float)(last_left_vel>>2)))/1000.0;
		}

*/
		if(robotPosition == HORIZONTAL_POS) {
    6ef6:	80 91 16 02 	lds	r24, 0x0216
    6efa:	81 30       	cpi	r24, 0x01	; 1
    6efc:	09 f4       	brne	.+2      	; 0x6f00 <handleMotorsWithSpeedController+0x1a6>
    6efe:	db c1       	rjmp	.+950    	; 0x72b6 <handleMotorsWithSpeedController+0x55c>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_left(&pwm_left_working);
			//PORTB |= (1 << 5);
		} else {
			//PORTB &= ~(1 << 6);
			start_vertical_speed_control_left(&pwm_left_working);
    6f00:	8f e1       	ldi	r24, 0x1F	; 31
    6f02:	93 e0       	ldi	r25, 0x03	; 3
    6f04:	0e 94 60 19 	call	0x32c0	; 0x32c0 <start_vertical_speed_control_left>
			//PORTB |= (1 << 6);
		}

		pwm_left = pwm_left_working;
    6f08:	80 91 1f 03 	lds	r24, 0x031F
    6f0c:	90 91 20 03 	lds	r25, 0x0320
    6f10:	90 93 08 03 	sts	0x0308, r25
    6f14:	80 93 07 03 	sts	0x0307, r24

		if(pwm_left > 0) {
    6f18:	18 16       	cp	r1, r24
    6f1a:	19 06       	cpc	r1, r25
    6f1c:	0c f0       	brlt	.+2      	; 0x6f20 <handleMotorsWithSpeedController+0x1c6>
    6f1e:	0d c2       	rjmp	.+1050   	; 0x733a <handleMotorsWithSpeedController+0x5e0>
			OCR4A = (unsigned int)pwm_left;
    6f20:	90 93 a9 00 	sts	0x00A9, r25
    6f24:	80 93 a8 00 	sts	0x00A8, r24
		} else {
			OCR4A = 0;
			OCR4B = 0;
		}

		computeOdometry++;
    6f28:	80 91 b3 04 	lds	r24, 0x04B3
    6f2c:	8f 5f       	subi	r24, 0xFF	; 255
    6f2e:	80 93 b3 04 	sts	0x04B3, r24

	}

	if(compute_right_vel) {
    6f32:	80 91 08 02 	lds	r24, 0x0208
    6f36:	88 23       	and	r24, r24
    6f38:	09 f0       	breq	.+2      	; 0x6f3c <handleMotorsWithSpeedController+0x1e2>
    6f3a:	c1 c0       	rjmp	.+386    	; 0x70be <handleMotorsWithSpeedController+0x364>
    6f3c:	80 91 b3 04 	lds	r24, 0x04B3

		computeOdometry++;

	}

	if(computeOdometry>=2) {	// compute odometry when we get the last encoders values for both wheels
    6f40:	82 30       	cpi	r24, 0x02	; 2
    6f42:	08 f4       	brcc	.+2      	; 0x6f46 <handleMotorsWithSpeedController+0x1ec>
    6f44:	ab c0       	rjmp	.+342    	; 0x709c <handleMotorsWithSpeedController+0x342>

		// the odometry computation takes about 1 ms

		computeOdometry = 0;
    6f46:	10 92 b3 04 	sts	0x04B3, r1

		deltaDist = ((rightDist-rightDistPrev)+(leftDist-leftDistPrev))/2.0;
    6f4a:	60 90 a7 04 	lds	r6, 0x04A7
    6f4e:	70 90 a8 04 	lds	r7, 0x04A8
    6f52:	80 90 a9 04 	lds	r8, 0x04A9
    6f56:	90 90 aa 04 	lds	r9, 0x04AA
    6f5a:	20 90 a3 04 	lds	r2, 0x04A3
    6f5e:	30 90 a4 04 	lds	r3, 0x04A4
    6f62:	40 90 a5 04 	lds	r4, 0x04A5
    6f66:	50 90 a6 04 	lds	r5, 0x04A6
    6f6a:	c4 01       	movw	r24, r8
    6f6c:	b3 01       	movw	r22, r6
    6f6e:	20 91 af 04 	lds	r18, 0x04AF
    6f72:	30 91 b0 04 	lds	r19, 0x04B0
    6f76:	40 91 b1 04 	lds	r20, 0x04B1
    6f7a:	50 91 b2 04 	lds	r21, 0x04B2
    6f7e:	0e 94 17 54 	call	0xa82e	; 0xa82e <__subsf3>
    6f82:	7b 01       	movw	r14, r22
    6f84:	8c 01       	movw	r16, r24
    6f86:	c2 01       	movw	r24, r4
    6f88:	b1 01       	movw	r22, r2
    6f8a:	20 91 ab 04 	lds	r18, 0x04AB
    6f8e:	30 91 ac 04 	lds	r19, 0x04AC
    6f92:	40 91 ad 04 	lds	r20, 0x04AD
    6f96:	50 91 ae 04 	lds	r21, 0x04AE
    6f9a:	0e 94 17 54 	call	0xa82e	; 0xa82e <__subsf3>
    6f9e:	9b 01       	movw	r18, r22
    6fa0:	ac 01       	movw	r20, r24
    6fa2:	c8 01       	movw	r24, r16
    6fa4:	b7 01       	movw	r22, r14
    6fa6:	0e 94 18 54 	call	0xa830	; 0xa830 <__addsf3>
    6faa:	20 e0       	ldi	r18, 0x00	; 0
    6fac:	30 e0       	ldi	r19, 0x00	; 0
    6fae:	40 e0       	ldi	r20, 0x00	; 0
    6fb0:	5f e3       	ldi	r21, 0x3F	; 63
    6fb2:	0e 94 99 56 	call	0xad32	; 0xad32 <__mulsf3>
    6fb6:	d6 2e       	mov	r13, r22
    6fb8:	c7 2e       	mov	r12, r23
    6fba:	b8 2e       	mov	r11, r24
    6fbc:	a9 2e       	mov	r10, r25
    6fbe:	a6 01       	movw	r20, r12
    6fc0:	95 01       	movw	r18, r10
    6fc2:	85 2f       	mov	r24, r21
    6fc4:	94 2f       	mov	r25, r20
    6fc6:	a3 2f       	mov	r26, r19
    6fc8:	b2 2f       	mov	r27, r18
    6fca:	80 93 8f 04 	sts	0x048F, r24
    6fce:	90 93 90 04 	sts	0x0490, r25
    6fd2:	a0 93 91 04 	sts	0x0491, r26
    6fd6:	b0 93 92 04 	sts	0x0492, r27

		if(robotPosition == HORIZONTAL_POS) {
    6fda:	80 91 16 02 	lds	r24, 0x0216
    6fde:	81 30       	cpi	r24, 0x01	; 1
    6fe0:	09 f4       	brne	.+2      	; 0x6fe4 <handleMotorsWithSpeedController+0x28a>
    6fe2:	31 c1       	rjmp	.+610    	; 0x7246 <handleMotorsWithSpeedController+0x4ec>
			//thetaOld = (rightMotSteps - leftMotSteps)/WHEEL_DIST;	// radians
			theta = (rightDist-leftDist)/WHEEL_DIST;
		} else {
			//thetaOld = thetaAcc;
			theta = thetaAcc;
    6fe4:	f0 90 b4 04 	lds	r15, 0x04B4
    6fe8:	00 91 b5 04 	lds	r16, 0x04B5
    6fec:	10 91 b6 04 	lds	r17, 0x04B6
    6ff0:	e0 90 b7 04 	lds	r14, 0x04B7
    6ff4:	8f 2d       	mov	r24, r15
    6ff6:	90 2f       	mov	r25, r16
    6ff8:	a1 2f       	mov	r26, r17
    6ffa:	be 2d       	mov	r27, r14
    6ffc:	80 93 7f 04 	sts	0x047F, r24
    7000:	90 93 80 04 	sts	0x0480, r25
    7004:	a0 93 81 04 	sts	0x0481, r26
    7008:	b0 93 82 04 	sts	0x0482, r27
		}

		//deltaDistOld = ((rightMotSteps-rightMotStepsOld)+(leftMotSteps-leftMotStepsOld))/2.0;

		xPos = xPos + cos(theta)*deltaDist;				
    700c:	6f 2d       	mov	r22, r15
    700e:	70 2f       	mov	r23, r16
    7010:	81 2f       	mov	r24, r17
    7012:	9e 2d       	mov	r25, r14
    7014:	0e 94 e2 54 	call	0xa9c4	; 0xa9c4 <cos>
    7018:	9b 01       	movw	r18, r22
    701a:	ac 01       	movw	r20, r24
    701c:	d6 01       	movw	r26, r12
    701e:	f5 01       	movw	r30, r10
    7020:	6b 2f       	mov	r22, r27
    7022:	7c 2d       	mov	r23, r12
    7024:	8f 2f       	mov	r24, r31
    7026:	9a 2d       	mov	r25, r10
    7028:	0e 94 99 56 	call	0xad32	; 0xad32 <__mulsf3>
    702c:	9b 01       	movw	r18, r22
    702e:	ac 01       	movw	r20, r24
    7030:	60 91 87 04 	lds	r22, 0x0487
    7034:	70 91 88 04 	lds	r23, 0x0488
    7038:	80 91 89 04 	lds	r24, 0x0489
    703c:	90 91 8a 04 	lds	r25, 0x048A
    7040:	0e 94 18 54 	call	0xa830	; 0xa830 <__addsf3>
    7044:	60 93 87 04 	sts	0x0487, r22
    7048:	70 93 88 04 	sts	0x0488, r23
    704c:	80 93 89 04 	sts	0x0489, r24
    7050:	90 93 8a 04 	sts	0x048A, r25
		yPos = yPos + sin(theta)*deltaDist;
    7054:	6f 2d       	mov	r22, r15
    7056:	70 2f       	mov	r23, r16
    7058:	81 2f       	mov	r24, r17
    705a:	9e 2d       	mov	r25, r14
    705c:	0e 94 fc 56 	call	0xadf8	; 0xadf8 <sin>
    7060:	9b 01       	movw	r18, r22
    7062:	ac 01       	movw	r20, r24
    7064:	d6 01       	movw	r26, r12
    7066:	f5 01       	movw	r30, r10
    7068:	6b 2f       	mov	r22, r27
    706a:	7c 2d       	mov	r23, r12
    706c:	8f 2f       	mov	r24, r31
    706e:	9a 2d       	mov	r25, r10
    7070:	0e 94 99 56 	call	0xad32	; 0xad32 <__mulsf3>
    7074:	9b 01       	movw	r18, r22
    7076:	ac 01       	movw	r20, r24
    7078:	60 91 8b 04 	lds	r22, 0x048B
    707c:	70 91 8c 04 	lds	r23, 0x048C
    7080:	80 91 8d 04 	lds	r24, 0x048D
    7084:	90 91 8e 04 	lds	r25, 0x048E
    7088:	0e 94 18 54 	call	0xa830	; 0xa830 <__addsf3>
    708c:	60 93 8b 04 	sts	0x048B, r22
    7090:	70 93 8c 04 	sts	0x048C, r23
    7094:	80 93 8d 04 	sts	0x048D, r24
    7098:	90 93 8e 04 	sts	0x048E, r25
		//xPosOld = xPosOld + cos(thetaOld)*deltaDistOld;				
		//yPosOld = yPosOld + sin(thetaOld)*deltaDistOld;

	}

}
    709c:	1f 91       	pop	r17
    709e:	0f 91       	pop	r16
    70a0:	ff 90       	pop	r15
    70a2:	ef 90       	pop	r14
    70a4:	df 90       	pop	r13
    70a6:	cf 90       	pop	r12
    70a8:	bf 90       	pop	r11
    70aa:	af 90       	pop	r10
    70ac:	9f 90       	pop	r9
    70ae:	8f 90       	pop	r8
    70b0:	7f 90       	pop	r7
    70b2:	6f 90       	pop	r6
    70b4:	5f 90       	pop	r5
    70b6:	4f 90       	pop	r4
    70b8:	3f 90       	pop	r3
    70ba:	2f 90       	pop	r2
    70bc:	08 95       	ret

	}

	if(compute_right_vel) {

		last_right_vel = right_vel_sum>>2;
    70be:	20 91 ff 02 	lds	r18, 0x02FF
    70c2:	30 91 00 03 	lds	r19, 0x0300
    70c6:	36 95       	lsr	r19
    70c8:	27 95       	ror	r18
    70ca:	36 95       	lsr	r19
    70cc:	27 95       	ror	r18
    70ce:	30 93 04 03 	sts	0x0304, r19
    70d2:	20 93 03 03 	sts	0x0303, r18
		compute_right_vel = 0;
    70d6:	10 92 08 02 	sts	0x0208, r1
		right_vel_sum = 0;
    70da:	10 92 00 03 	sts	0x0300, r1
    70de:	10 92 ff 02 	sts	0x02FF, r1

		if(calibrateOdomFlag==1) {
    70e2:	80 91 76 05 	lds	r24, 0x0576
    70e6:	81 30       	cpi	r24, 0x01	; 1
    70e8:	09 f4       	brne	.+2      	; 0x70ec <handleMotorsWithSpeedController+0x392>
    70ea:	ea c0       	rjmp	.+468    	; 0x72c0 <handleMotorsWithSpeedController+0x566>
			rightSpeedSumOdom += last_right_vel;
			rightSumCount++;
		}

		getRightSpeedFromInput();
    70ec:	0e 94 f7 31 	call	0x63ee	; 0x63ee <getRightSpeedFromInput>
		rightDistPrev = rightDist;
    70f0:	80 91 a7 04 	lds	r24, 0x04A7
    70f4:	90 91 a8 04 	lds	r25, 0x04A8
    70f8:	a0 91 a9 04 	lds	r26, 0x04A9
    70fc:	b0 91 aa 04 	lds	r27, 0x04AA
    7100:	80 93 af 04 	sts	0x04AF, r24
    7104:	90 93 b0 04 	sts	0x04B0, r25
    7108:	a0 93 b1 04 	sts	0x04B1, r26
    710c:	b0 93 b2 04 	sts	0x04B2, r27
		rightDist += ((float)speedRightFromEnc*((float)(getTime100MicroSec()-timeRightOdom)*104.0))/1000000.0;	// distance in mm				
    7110:	60 91 ca 04 	lds	r22, 0x04CA
    7114:	70 91 cb 04 	lds	r23, 0x04CB
    7118:	88 27       	eor	r24, r24
    711a:	77 fd       	sbrc	r23, 7
    711c:	80 95       	com	r24
    711e:	98 2f       	mov	r25, r24
    7120:	0e 94 80 55 	call	0xab00	; 0xab00 <__floatsisf>
    7124:	7b 01       	movw	r14, r22
    7126:	8c 01       	movw	r16, r24
    7128:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
    712c:	20 91 d0 04 	lds	r18, 0x04D0
    7130:	30 91 d1 04 	lds	r19, 0x04D1
    7134:	40 91 d2 04 	lds	r20, 0x04D2
    7138:	50 91 d3 04 	lds	r21, 0x04D3
    713c:	62 1b       	sub	r22, r18
    713e:	73 0b       	sbc	r23, r19
    7140:	84 0b       	sbc	r24, r20
    7142:	95 0b       	sbc	r25, r21
    7144:	0e 94 7e 55 	call	0xaafc	; 0xaafc <__floatunsisf>
    7148:	20 e0       	ldi	r18, 0x00	; 0
    714a:	30 e0       	ldi	r19, 0x00	; 0
    714c:	40 ed       	ldi	r20, 0xD0	; 208
    714e:	52 e4       	ldi	r21, 0x42	; 66
    7150:	0e 94 99 56 	call	0xad32	; 0xad32 <__mulsf3>
    7154:	9b 01       	movw	r18, r22
    7156:	ac 01       	movw	r20, r24
    7158:	c8 01       	movw	r24, r16
    715a:	b7 01       	movw	r22, r14
    715c:	0e 94 99 56 	call	0xad32	; 0xad32 <__mulsf3>
    7160:	20 e0       	ldi	r18, 0x00	; 0
    7162:	34 e2       	ldi	r19, 0x24	; 36
    7164:	44 e7       	ldi	r20, 0x74	; 116
    7166:	59 e4       	ldi	r21, 0x49	; 73
    7168:	0e 94 e5 54 	call	0xa9ca	; 0xa9ca <__divsf3>
    716c:	9b 01       	movw	r18, r22
    716e:	ac 01       	movw	r20, r24
    7170:	60 91 a7 04 	lds	r22, 0x04A7
    7174:	70 91 a8 04 	lds	r23, 0x04A8
    7178:	80 91 a9 04 	lds	r24, 0x04A9
    717c:	90 91 aa 04 	lds	r25, 0x04AA
    7180:	0e 94 18 54 	call	0xa830	; 0xa830 <__addsf3>
    7184:	60 93 a7 04 	sts	0x04A7, r22
    7188:	70 93 a8 04 	sts	0x04A8, r23
    718c:	80 93 a9 04 	sts	0x04A9, r24
    7190:	90 93 aa 04 	sts	0x04AA, r25
		timeRightOdom = getTime100MicroSec();
    7194:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
    7198:	60 93 d0 04 	sts	0x04D0, r22
    719c:	70 93 d1 04 	sts	0x04D1, r23
    71a0:	80 93 d2 04 	sts	0x04D2, r24
    71a4:	90 93 d3 04 	sts	0x04D3, r25
		rightMotSteps = (signed long int)rightDist;
    71a8:	60 91 a7 04 	lds	r22, 0x04A7
    71ac:	70 91 a8 04 	lds	r23, 0x04A8
    71b0:	80 91 a9 04 	lds	r24, 0x04A9
    71b4:	90 91 aa 04 	lds	r25, 0x04AA
    71b8:	0e 94 4d 55 	call	0xaa9a	; 0xaa9a <__fixsfsi>
    71bc:	0e 94 80 55 	call	0xab00	; 0xab00 <__floatsisf>
    71c0:	60 93 e1 02 	sts	0x02E1, r22
    71c4:	70 93 e2 02 	sts	0x02E2, r23
    71c8:	80 93 e3 02 	sts	0x02E3, r24
    71cc:	90 93 e4 02 	sts	0x02E4, r25
		} else {
			rightMotSteps -= ((float)(last_right_vel>>3))*(RIGHT_ENC_OFFSET-ENC_SLOPE*((float)(last_right_vel>>2)))/1000.0;
		}
*/

		if(robotPosition == HORIZONTAL_POS) {
    71d0:	80 91 16 02 	lds	r24, 0x0216
    71d4:	81 30       	cpi	r24, 0x01	; 1
    71d6:	09 f4       	brne	.+2      	; 0x71da <handleMotorsWithSpeedController+0x480>
    71d8:	47 c0       	rjmp	.+142    	; 0x7268 <handleMotorsWithSpeedController+0x50e>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_right(&pwm_right_working);
			//PORTB |= (1 << 5);
		} else {
			//PORTB &= ~(1 << 6);
			start_vertical_speed_control_right(&pwm_right_working);
    71da:	8d e1       	ldi	r24, 0x1D	; 29
    71dc:	93 e0       	ldi	r25, 0x03	; 3
    71de:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <start_vertical_speed_control_right>
			//PORTB |= (1 << 6);
		}

		pwm_right = pwm_right_working;
    71e2:	80 91 1d 03 	lds	r24, 0x031D
    71e6:	90 91 1e 03 	lds	r25, 0x031E
    71ea:	90 93 06 03 	sts	0x0306, r25
    71ee:	80 93 05 03 	sts	0x0305, r24

		if(pwm_right > 0) {
    71f2:	18 16       	cp	r1, r24
    71f4:	19 06       	cpc	r1, r25
    71f6:	0c f0       	brlt	.+2      	; 0x71fa <handleMotorsWithSpeedController+0x4a0>
    71f8:	95 c0       	rjmp	.+298    	; 0x7324 <handleMotorsWithSpeedController+0x5ca>
			OCR3A = (unsigned int)pwm_right;
    71fa:	90 93 99 00 	sts	0x0099, r25
    71fe:	80 93 98 00 	sts	0x0098, r24
		} else {
			OCR3A = 0;
			OCR3B = 0;
		}

		computeOdometry++;
    7202:	80 91 b3 04 	lds	r24, 0x04B3
    7206:	8f 5f       	subi	r24, 0xFF	; 255
    7208:	80 93 b3 04 	sts	0x04B3, r24
    720c:	99 ce       	rjmp	.-718    	; 0x6f40 <handleMotorsWithSpeedController+0x1e6>
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_BW_SC);
		}
	}

	if(obstacleAvoidanceEnabled) {
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
    720e:	8f e1       	ldi	r24, 0x1F	; 31
    7210:	93 e0       	ldi	r25, 0x03	; 3
    7212:	6d e1       	ldi	r22, 0x1D	; 29
    7214:	73 e0       	ldi	r23, 0x03	; 3
    7216:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <obstacleAvoidance>
    721a:	80 91 1f 03 	lds	r24, 0x031F
    721e:	90 91 20 03 	lds	r25, 0x0320
    7222:	cf cd       	rjmp	.-1122   	; 0x6dc2 <handleMotorsWithSpeedController+0x68>
}

void handleMotorsWithSpeedController() {

	if(calibrateOdomFlag==1) {
		pwm_right_working = pwm_intermediate_right_desired;
    7224:	80 91 0d 03 	lds	r24, 0x030D
    7228:	90 91 0e 03 	lds	r25, 0x030E
    722c:	90 93 1e 03 	sts	0x031E, r25
    7230:	80 93 1d 03 	sts	0x031D, r24
		pwm_left_working = pwm_intermediate_left_desired;
    7234:	80 91 0f 03 	lds	r24, 0x030F
    7238:	90 91 10 03 	lds	r25, 0x0310
    723c:	90 93 20 03 	sts	0x0320, r25
    7240:	80 93 1f 03 	sts	0x031F, r24
    7244:	b9 cd       	rjmp	.-1166   	; 0x6db8 <handleMotorsWithSpeedController+0x5e>

		deltaDist = ((rightDist-rightDistPrev)+(leftDist-leftDistPrev))/2.0;

		if(robotPosition == HORIZONTAL_POS) {
			//thetaOld = (rightMotSteps - leftMotSteps)/WHEEL_DIST;	// radians
			theta = (rightDist-leftDist)/WHEEL_DIST;
    7246:	c4 01       	movw	r24, r8
    7248:	b3 01       	movw	r22, r6
    724a:	a2 01       	movw	r20, r4
    724c:	91 01       	movw	r18, r2
    724e:	0e 94 17 54 	call	0xa82e	; 0xa82e <__subsf3>
    7252:	20 e0       	ldi	r18, 0x00	; 0
    7254:	30 e0       	ldi	r19, 0x00	; 0
    7256:	4e e1       	ldi	r20, 0x1E	; 30
    7258:	52 e4       	ldi	r21, 0x42	; 66
    725a:	0e 94 e5 54 	call	0xa9ca	; 0xa9ca <__divsf3>
    725e:	f6 2e       	mov	r15, r22
    7260:	07 2f       	mov	r16, r23
    7262:	18 2f       	mov	r17, r24
    7264:	e9 2e       	mov	r14, r25
    7266:	c6 ce       	rjmp	.-628    	; 0x6ff4 <handleMotorsWithSpeedController+0x29a>
		}
*/

		if(robotPosition == HORIZONTAL_POS) {
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_right(&pwm_right_working);
    7268:	8d e1       	ldi	r24, 0x1D	; 29
    726a:	93 e0       	ldi	r25, 0x03	; 3
    726c:	0e 94 9c 1c 	call	0x3938	; 0x3938 <start_horizontal_speed_control_right>
    7270:	b8 cf       	rjmp	.-144    	; 0x71e2 <handleMotorsWithSpeedController+0x488>
		last_left_vel = left_vel_sum>>2;
		compute_left_vel = 0;
		left_vel_sum = 0;
		
		if(calibrateOdomFlag==1) {
			leftSpeedSumOdom += last_left_vel;
    7272:	44 27       	eor	r20, r20
    7274:	37 fd       	sbrc	r19, 7
    7276:	40 95       	com	r20
    7278:	54 2f       	mov	r21, r20
    727a:	80 91 b8 04 	lds	r24, 0x04B8
    727e:	90 91 b9 04 	lds	r25, 0x04B9
    7282:	a0 91 ba 04 	lds	r26, 0x04BA
    7286:	b0 91 bb 04 	lds	r27, 0x04BB
    728a:	82 0f       	add	r24, r18
    728c:	93 1f       	adc	r25, r19
    728e:	a4 1f       	adc	r26, r20
    7290:	b5 1f       	adc	r27, r21
    7292:	80 93 b8 04 	sts	0x04B8, r24
    7296:	90 93 b9 04 	sts	0x04B9, r25
    729a:	a0 93 ba 04 	sts	0x04BA, r26
    729e:	b0 93 bb 04 	sts	0x04BB, r27
			leftSumCount++;
    72a2:	80 91 c0 04 	lds	r24, 0x04C0
    72a6:	90 91 c1 04 	lds	r25, 0x04C1
    72aa:	01 96       	adiw	r24, 0x01	; 1
    72ac:	90 93 c1 04 	sts	0x04C1, r25
    72b0:	80 93 c0 04 	sts	0x04C0, r24
    72b4:	ae cd       	rjmp	.-1188   	; 0x6e12 <handleMotorsWithSpeedController+0xb8>
		}

*/
		if(robotPosition == HORIZONTAL_POS) {
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_left(&pwm_left_working);
    72b6:	8f e1       	ldi	r24, 0x1F	; 31
    72b8:	93 e0       	ldi	r25, 0x03	; 3
    72ba:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <start_horizontal_speed_control_left>
    72be:	24 ce       	rjmp	.-952    	; 0x6f08 <handleMotorsWithSpeedController+0x1ae>
		last_right_vel = right_vel_sum>>2;
		compute_right_vel = 0;
		right_vel_sum = 0;

		if(calibrateOdomFlag==1) {
			rightSpeedSumOdom += last_right_vel;
    72c0:	44 27       	eor	r20, r20
    72c2:	37 fd       	sbrc	r19, 7
    72c4:	40 95       	com	r20
    72c6:	54 2f       	mov	r21, r20
    72c8:	80 91 bc 04 	lds	r24, 0x04BC
    72cc:	90 91 bd 04 	lds	r25, 0x04BD
    72d0:	a0 91 be 04 	lds	r26, 0x04BE
    72d4:	b0 91 bf 04 	lds	r27, 0x04BF
    72d8:	82 0f       	add	r24, r18
    72da:	93 1f       	adc	r25, r19
    72dc:	a4 1f       	adc	r26, r20
    72de:	b5 1f       	adc	r27, r21
    72e0:	80 93 bc 04 	sts	0x04BC, r24
    72e4:	90 93 bd 04 	sts	0x04BD, r25
    72e8:	a0 93 be 04 	sts	0x04BE, r26
    72ec:	b0 93 bf 04 	sts	0x04BF, r27
			rightSumCount++;
    72f0:	80 91 c2 04 	lds	r24, 0x04C2
    72f4:	90 91 c3 04 	lds	r25, 0x04C3
    72f8:	01 96       	adiw	r24, 0x01	; 1
    72fa:	90 93 c3 04 	sts	0x04C3, r25
    72fe:	80 93 c2 04 	sts	0x04C2, r24
    7302:	f4 ce       	rjmp	.-536    	; 0x70ec <handleMotorsWithSpeedController+0x392>
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_BW_SC);
		}
		if(pwm_intermediate_left_desired >= 0) {		// pwm in the range -127..127
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_FW_SC);
		} else {
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_BW_SC);
    7304:	62 e0       	ldi	r22, 0x02	; 2
    7306:	0e 94 8f 2e 	call	0x5d1e	; 0x5d1e <getInputFromSpeed>
    730a:	90 93 20 03 	sts	0x0320, r25
    730e:	80 93 1f 03 	sts	0x031F, r24
    7312:	52 cd       	rjmp	.-1372   	; 0x6db8 <handleMotorsWithSpeedController+0x5e>
		pwm_left_working = pwm_intermediate_left_desired;
	} else {
		if(pwm_intermediate_right_desired >= 0) {		// pwm in the range -127..127
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_FW_SC);
		} else {
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_BW_SC);
    7314:	63 e0       	ldi	r22, 0x03	; 3
    7316:	0e 94 8f 2e 	call	0x5d1e	; 0x5d1e <getInputFromSpeed>
    731a:	90 93 1e 03 	sts	0x031E, r25
    731e:	80 93 1d 03 	sts	0x031D, r24
    7322:	3d cd       	rjmp	.-1414   	; 0x6d9e <handleMotorsWithSpeedController+0x44>

		pwm_right = pwm_right_working;

		if(pwm_right > 0) {
			OCR3A = (unsigned int)pwm_right;
		} else if(pwm_right < 0) {
    7324:	00 97       	sbiw	r24, 0x00	; 0
    7326:	a1 f4       	brne	.+40     	; 0x7350 <handleMotorsWithSpeedController+0x5f6>
			OCR3B = (unsigned int)(-pwm_right);
		} else {
			OCR3A = 0;
    7328:	10 92 99 00 	sts	0x0099, r1
    732c:	10 92 98 00 	sts	0x0098, r1
			OCR3B = 0;
    7330:	10 92 9b 00 	sts	0x009B, r1
    7334:	10 92 9a 00 	sts	0x009A, r1
    7338:	64 cf       	rjmp	.-312    	; 0x7202 <handleMotorsWithSpeedController+0x4a8>

		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
    733a:	00 97       	sbiw	r24, 0x00	; 0
    733c:	89 f4       	brne	.+34     	; 0x7360 <handleMotorsWithSpeedController+0x606>
			OCR4B =(unsigned int)( -pwm_left);
		} else {
			OCR4A = 0;
    733e:	10 92 a9 00 	sts	0x00A9, r1
    7342:	10 92 a8 00 	sts	0x00A8, r1
			OCR4B = 0;
    7346:	10 92 ab 00 	sts	0x00AB, r1
    734a:	10 92 aa 00 	sts	0x00AA, r1
    734e:	ec cd       	rjmp	.-1064   	; 0x6f28 <handleMotorsWithSpeedController+0x1ce>
		pwm_right = pwm_right_working;

		if(pwm_right > 0) {
			OCR3A = (unsigned int)pwm_right;
		} else if(pwm_right < 0) {
			OCR3B = (unsigned int)(-pwm_right);
    7350:	90 95       	com	r25
    7352:	81 95       	neg	r24
    7354:	9f 4f       	sbci	r25, 0xFF	; 255
    7356:	90 93 9b 00 	sts	0x009B, r25
    735a:	80 93 9a 00 	sts	0x009A, r24
    735e:	51 cf       	rjmp	.-350    	; 0x7202 <handleMotorsWithSpeedController+0x4a8>
		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
			OCR4B =(unsigned int)( -pwm_left);
    7360:	90 95       	com	r25
    7362:	81 95       	neg	r24
    7364:	9f 4f       	sbci	r25, 0xFF	; 255
    7366:	90 93 ab 00 	sts	0x00AB, r25
    736a:	80 93 aa 00 	sts	0x00AA, r24
    736e:	dc cd       	rjmp	.-1096   	; 0x6f28 <handleMotorsWithSpeedController+0x1ce>

00007370 <writeDefaultCalibration>:
		speedLeftFromEnc = -speedLeftFromEnc;
    }
    
}

void writeDefaultCalibration() {
    7370:	2f 92       	push	r2
    7372:	3f 92       	push	r3
    7374:	4f 92       	push	r4
    7376:	5f 92       	push	r5
    7378:	6f 92       	push	r6
    737a:	7f 92       	push	r7
    737c:	8f 92       	push	r8
    737e:	9f 92       	push	r9
    7380:	af 92       	push	r10
    7382:	bf 92       	push	r11
    7384:	cf 92       	push	r12
    7386:	df 92       	push	r13
    7388:	ef 92       	push	r14
    738a:	ff 92       	push	r15
    738c:	0f 93       	push	r16
    738e:	1f 93       	push	r17
    7390:	cf 93       	push	r28
    7392:	df 93       	push	r29
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    	calibration[i][0] = i+1;
	}
    // the following values are taken from a field test
    // forward left, speed control enabled
    calibration[0][0] = 20;		// measured speed with back EMF (adc 0..1023)
    7394:	a4 e1       	ldi	r26, 0x14	; 20
    7396:	b0 e0       	ldi	r27, 0x00	; 0
    7398:	b0 93 eb 08 	sts	0x08EB, r27
    739c:	a0 93 ea 08 	sts	0x08EA, r26
    calibration[1][0] = 40;
    73a0:	88 e2       	ldi	r24, 0x28	; 40
    73a2:	90 e0       	ldi	r25, 0x00	; 0
    73a4:	90 93 fb 08 	sts	0x08FB, r25
    73a8:	80 93 fa 08 	sts	0x08FA, r24
    calibration[2][0] = 59;
    73ac:	6b e3       	ldi	r22, 0x3B	; 59
    73ae:	70 e0       	ldi	r23, 0x00	; 0
    73b0:	70 93 0b 09 	sts	0x090B, r23
    73b4:	60 93 0a 09 	sts	0x090A, r22
    calibration[3][0] = 79;
    73b8:	0f e4       	ldi	r16, 0x4F	; 79
    73ba:	10 e0       	ldi	r17, 0x00	; 0
    73bc:	10 93 1b 09 	sts	0x091B, r17
    73c0:	00 93 1a 09 	sts	0x091A, r16
    calibration[4][0] = 100;
    73c4:	84 e6       	ldi	r24, 0x64	; 100
    73c6:	90 e0       	ldi	r25, 0x00	; 0
    73c8:	90 93 2b 09 	sts	0x092B, r25
    73cc:	80 93 2a 09 	sts	0x092A, r24
    calibration[5][0] = 120;
    73d0:	f8 e7       	ldi	r31, 0x78	; 120
    73d2:	af 2e       	mov	r10, r31
    73d4:	b1 2c       	mov	r11, r1
    73d6:	b0 92 3b 09 	sts	0x093B, r11
    73da:	a0 92 3a 09 	sts	0x093A, r10
    calibration[6][0] = 139;
    73de:	8b e8       	ldi	r24, 0x8B	; 139
    73e0:	90 e0       	ldi	r25, 0x00	; 0
    73e2:	90 93 4b 09 	sts	0x094B, r25
    73e6:	80 93 4a 09 	sts	0x094A, r24
    calibration[7][0] = 159;
    73ea:	2f e9       	ldi	r18, 0x9F	; 159
    73ec:	30 e0       	ldi	r19, 0x00	; 0
    73ee:	30 93 5b 09 	sts	0x095B, r19
    73f2:	20 93 5a 09 	sts	0x095A, r18
	calibration[8][0] = 180;
    73f6:	44 eb       	ldi	r20, 0xB4	; 180
    73f8:	50 e0       	ldi	r21, 0x00	; 0
    73fa:	50 93 6b 09 	sts	0x096B, r21
    73fe:	40 93 6a 09 	sts	0x096A, r20
    calibration[0][1] = 19;    	// real speed measured in mm/s
    7402:	63 e1       	ldi	r22, 0x13	; 19
    7404:	70 e0       	ldi	r23, 0x00	; 0
    7406:	70 93 ed 08 	sts	0x08ED, r23
    740a:	60 93 ec 08 	sts	0x08EC, r22
    calibration[1][1] = 47;
    740e:	2f e2       	ldi	r18, 0x2F	; 47
    7410:	30 e0       	ldi	r19, 0x00	; 0
    7412:	30 93 fd 08 	sts	0x08FD, r19
    7416:	20 93 fc 08 	sts	0x08FC, r18
    calibration[2][1] = 72;
    741a:	28 e4       	ldi	r18, 0x48	; 72
    741c:	30 e0       	ldi	r19, 0x00	; 0
    741e:	30 93 0d 09 	sts	0x090D, r19
    7422:	20 93 0c 09 	sts	0x090C, r18
    calibration[3][1] = 91;
    7426:	2b e5       	ldi	r18, 0x5B	; 91
    7428:	30 e0       	ldi	r19, 0x00	; 0
    742a:	30 93 1d 09 	sts	0x091D, r19
    742e:	20 93 1c 09 	sts	0x091C, r18
    calibration[4][1] = 109;
    7432:	2d e6       	ldi	r18, 0x6D	; 109
    7434:	30 e0       	ldi	r19, 0x00	; 0
    7436:	30 93 2d 09 	sts	0x092D, r19
    743a:	20 93 2c 09 	sts	0x092C, r18
    calibration[5][1] = 125;
    743e:	ed e7       	ldi	r30, 0x7D	; 125
    7440:	6e 2e       	mov	r6, r30
    7442:	71 2c       	mov	r7, r1
    7444:	70 92 3d 09 	sts	0x093D, r7
    7448:	60 92 3c 09 	sts	0x093C, r6
    calibration[6][1] = 143;
    744c:	2f e8       	ldi	r18, 0x8F	; 143
    744e:	30 e0       	ldi	r19, 0x00	; 0
    7450:	30 93 4d 09 	sts	0x094D, r19
    7454:	20 93 4c 09 	sts	0x094C, r18
    calibration[7][1] = 160;
    7458:	20 ea       	ldi	r18, 0xA0	; 160
    745a:	30 e0       	ldi	r19, 0x00	; 0
    745c:	30 93 5d 09 	sts	0x095D, r19
    7460:	20 93 5c 09 	sts	0x095C, r18
	calibration[8][1] = 174;
    7464:	ee ea       	ldi	r30, 0xAE	; 174
    7466:	f0 e0       	ldi	r31, 0x00	; 0
    7468:	f0 93 6d 09 	sts	0x096D, r31
    746c:	e0 93 6c 09 	sts	0x096C, r30
    // forward right, speed control enabled
    calibration[0][2] = 19;		// measured speed with back EMF (adc 0..1023)
    7470:	70 93 ef 08 	sts	0x08EF, r23
    7474:	60 93 ee 08 	sts	0x08EE, r22
    calibration[1][2] = 39;
    7478:	e7 e2       	ldi	r30, 0x27	; 39
    747a:	f0 e0       	ldi	r31, 0x00	; 0
    747c:	f0 93 ff 08 	sts	0x08FF, r31
    7480:	e0 93 fe 08 	sts	0x08FE, r30
    calibration[2][2] = 60;
    7484:	cc e3       	ldi	r28, 0x3C	; 60
    7486:	d0 e0       	ldi	r29, 0x00	; 0
    7488:	d0 93 0f 09 	sts	0x090F, r29
    748c:	c0 93 0e 09 	sts	0x090E, r28
    calibration[3][2] = 80;
    7490:	60 e5       	ldi	r22, 0x50	; 80
    7492:	70 e0       	ldi	r23, 0x00	; 0
    7494:	70 93 1f 09 	sts	0x091F, r23
    7498:	60 93 1e 09 	sts	0x091E, r22
    calibration[4][2] = 99;
    749c:	63 e6       	ldi	r22, 0x63	; 99
    749e:	e6 2e       	mov	r14, r22
    74a0:	f1 2c       	mov	r15, r1
    74a2:	f0 92 2f 09 	sts	0x092F, r15
    74a6:	e0 92 2e 09 	sts	0x092E, r14
    calibration[5][2] = 119;
    74aa:	67 e7       	ldi	r22, 0x77	; 119
    74ac:	70 e0       	ldi	r23, 0x00	; 0
    74ae:	70 93 3f 09 	sts	0x093F, r23
    74b2:	60 93 3e 09 	sts	0x093E, r22
    calibration[6][2] = 140;
    74b6:	0f 2e       	mov	r0, r31
    74b8:	fc e8       	ldi	r31, 0x8C	; 140
    74ba:	cf 2e       	mov	r12, r31
    74bc:	dd 24       	eor	r13, r13
    74be:	f0 2d       	mov	r31, r0
    74c0:	d0 92 4f 09 	sts	0x094F, r13
    74c4:	c0 92 4e 09 	sts	0x094E, r12
    calibration[7][2] = 160;
    74c8:	30 93 5f 09 	sts	0x095F, r19
    74cc:	20 93 5e 09 	sts	0x095E, r18
	calibration[8][2] = 180;
    74d0:	50 93 6f 09 	sts	0x096F, r21
    74d4:	40 93 6e 09 	sts	0x096E, r20
    calibration[0][3] = 23;    	// real speed measured in mm/s
    74d8:	0f 2e       	mov	r0, r31
    74da:	f7 e1       	ldi	r31, 0x17	; 23
    74dc:	8f 2e       	mov	r8, r31
    74de:	99 24       	eor	r9, r9
    74e0:	f0 2d       	mov	r31, r0
    74e2:	90 92 f1 08 	sts	0x08F1, r9
    74e6:	80 92 f0 08 	sts	0x08F0, r8
    calibration[1][3] = 46;
    74ea:	0f 2e       	mov	r0, r31
    74ec:	fe e2       	ldi	r31, 0x2E	; 46
    74ee:	4f 2e       	mov	r4, r31
    74f0:	55 24       	eor	r5, r5
    74f2:	f0 2d       	mov	r31, r0
    74f4:	50 92 01 09 	sts	0x0901, r5
    74f8:	40 92 00 09 	sts	0x0900, r4
    calibration[2][3] = 64;
    74fc:	88 24       	eor	r8, r8
    74fe:	99 24       	eor	r9, r9
    7500:	68 94       	set
    7502:	86 f8       	bld	r8, 6
    7504:	90 92 11 09 	sts	0x0911, r9
    7508:	80 92 10 09 	sts	0x0910, r8
    calibration[3][3] = 81;
    750c:	0f 2e       	mov	r0, r31
    750e:	f1 e5       	ldi	r31, 0x51	; 81
    7510:	2f 2e       	mov	r2, r31
    7512:	33 24       	eor	r3, r3
    7514:	f0 2d       	mov	r31, r0
    7516:	30 92 21 09 	sts	0x0921, r3
    751a:	20 92 20 09 	sts	0x0920, r2
    calibration[4][3] = 97;
    751e:	0f 2e       	mov	r0, r31
    7520:	f1 e6       	ldi	r31, 0x61	; 97
    7522:	8f 2e       	mov	r8, r31
    7524:	99 24       	eor	r9, r9
    7526:	f0 2d       	mov	r31, r0
    7528:	90 92 31 09 	sts	0x0931, r9
    752c:	80 92 30 09 	sts	0x0930, r8
    calibration[5][3] = 112;
    7530:	0f 2e       	mov	r0, r31
    7532:	f0 e7       	ldi	r31, 0x70	; 112
    7534:	8f 2e       	mov	r8, r31
    7536:	99 24       	eor	r9, r9
    7538:	f0 2d       	mov	r31, r0
    753a:	90 92 41 09 	sts	0x0941, r9
    753e:	80 92 40 09 	sts	0x0940, r8
    calibration[6][3] = 125;
    7542:	70 92 51 09 	sts	0x0951, r7
    7546:	60 92 50 09 	sts	0x0950, r6
    calibration[7][3] = 139;
    754a:	90 93 61 09 	sts	0x0961, r25
    754e:	80 93 60 09 	sts	0x0960, r24
	calibration[8][3] = 152;
    7552:	0f 2e       	mov	r0, r31
    7554:	f8 e9       	ldi	r31, 0x98	; 152
    7556:	8f 2e       	mov	r8, r31
    7558:	99 24       	eor	r9, r9
    755a:	f0 2d       	mov	r31, r0
    755c:	90 92 71 09 	sts	0x0971, r9
    7560:	80 92 70 09 	sts	0x0970, r8
    // backward left, speed control enabled
    calibration[0][4] = 20;		// measured speed with back EMF (adc 0..1023)
    7564:	b0 93 f3 08 	sts	0x08F3, r27
    7568:	a0 93 f2 08 	sts	0x08F2, r26
    calibration[1][4] = 39;
    756c:	f0 93 03 09 	sts	0x0903, r31
    7570:	e0 93 02 09 	sts	0x0902, r30
    calibration[2][4] = 60;
    7574:	d0 93 13 09 	sts	0x0913, r29
    7578:	c0 93 12 09 	sts	0x0912, r28
    calibration[3][4] = 79;
    757c:	10 93 23 09 	sts	0x0923, r17
    7580:	00 93 22 09 	sts	0x0922, r16
    calibration[4][4] = 99;
    7584:	f0 92 33 09 	sts	0x0933, r15
    7588:	e0 92 32 09 	sts	0x0932, r14
    calibration[5][4] = 120;
    758c:	b0 92 43 09 	sts	0x0943, r11
    7590:	a0 92 42 09 	sts	0x0942, r10
    calibration[6][4] = 140;
    7594:	d0 92 53 09 	sts	0x0953, r13
    7598:	c0 92 52 09 	sts	0x0952, r12
    calibration[7][4] = 160;
    759c:	30 93 63 09 	sts	0x0963, r19
    75a0:	20 93 62 09 	sts	0x0962, r18
	calibration[8][4] = 179;
    75a4:	c3 eb       	ldi	r28, 0xB3	; 179
    75a6:	d0 e0       	ldi	r29, 0x00	; 0
    75a8:	d0 93 73 09 	sts	0x0973, r29
    75ac:	c0 93 72 09 	sts	0x0972, r28
    calibration[0][5] = 18;    	// real speed measured in mm/s
    75b0:	c2 e1       	ldi	r28, 0x12	; 18
    75b2:	d0 e0       	ldi	r29, 0x00	; 0
    75b4:	d0 93 f5 08 	sts	0x08F5, r29
    75b8:	c0 93 f4 08 	sts	0x08F4, r28
    calibration[1][5] = 45;
    75bc:	cd e2       	ldi	r28, 0x2D	; 45
    75be:	d0 e0       	ldi	r29, 0x00	; 0
    75c0:	d0 93 05 09 	sts	0x0905, r29
    75c4:	c0 93 04 09 	sts	0x0904, r28
    calibration[2][5] = 68;
    75c8:	c4 e4       	ldi	r28, 0x44	; 68
    75ca:	d0 e0       	ldi	r29, 0x00	; 0
    75cc:	d0 93 15 09 	sts	0x0915, r29
    75d0:	c0 93 14 09 	sts	0x0914, r28
    calibration[3][5] = 87;
    75d4:	c7 e5       	ldi	r28, 0x57	; 87
    75d6:	d0 e0       	ldi	r29, 0x00	; 0
    75d8:	d0 93 25 09 	sts	0x0925, r29
    75dc:	c0 93 24 09 	sts	0x0924, r28
    calibration[4][5] = 105;
    75e0:	c9 e6       	ldi	r28, 0x69	; 105
    75e2:	d0 e0       	ldi	r29, 0x00	; 0
    75e4:	d0 93 35 09 	sts	0x0935, r29
    75e8:	c0 93 34 09 	sts	0x0934, r28
    calibration[5][5] = 119;
    75ec:	70 93 45 09 	sts	0x0945, r23
    75f0:	60 93 44 09 	sts	0x0944, r22
    calibration[6][5] = 137;
    75f4:	c9 e8       	ldi	r28, 0x89	; 137
    75f6:	d0 e0       	ldi	r29, 0x00	; 0
    75f8:	d0 93 55 09 	sts	0x0955, r29
    75fc:	c0 93 54 09 	sts	0x0954, r28
    calibration[7][5] = 151;
    7600:	c7 e9       	ldi	r28, 0x97	; 151
    7602:	d0 e0       	ldi	r29, 0x00	; 0
    7604:	d0 93 65 09 	sts	0x0965, r29
    7608:	c0 93 64 09 	sts	0x0964, r28
	calibration[8][5] = 168;
    760c:	c8 ea       	ldi	r28, 0xA8	; 168
    760e:	d0 e0       	ldi	r29, 0x00	; 0
    7610:	d0 93 75 09 	sts	0x0975, r29
    7614:	c0 93 74 09 	sts	0x0974, r28
    // backward right, speed control enabled
    calibration[0][6] = 20;		// measured speed with back EMF (adc 0..1023)
    7618:	b0 93 f7 08 	sts	0x08F7, r27
    761c:	a0 93 f6 08 	sts	0x08F6, r26
    calibration[1][6] = 39;
    7620:	f0 93 07 09 	sts	0x0907, r31
    7624:	e0 93 06 09 	sts	0x0906, r30
    calibration[2][6] = 59;
    7628:	eb e3       	ldi	r30, 0x3B	; 59
    762a:	f0 e0       	ldi	r31, 0x00	; 0
    762c:	f0 93 17 09 	sts	0x0917, r31
    7630:	e0 93 16 09 	sts	0x0916, r30
    calibration[3][6] = 80;
    7634:	e0 e5       	ldi	r30, 0x50	; 80
    7636:	f0 e0       	ldi	r31, 0x00	; 0
    7638:	f0 93 27 09 	sts	0x0927, r31
    763c:	e0 93 26 09 	sts	0x0926, r30
    calibration[4][6] = 100;
    7640:	e4 e6       	ldi	r30, 0x64	; 100
    7642:	f0 e0       	ldi	r31, 0x00	; 0
    7644:	f0 93 37 09 	sts	0x0937, r31
    7648:	e0 93 36 09 	sts	0x0936, r30
    calibration[5][6] = 119;
    764c:	70 93 47 09 	sts	0x0947, r23
    7650:	60 93 46 09 	sts	0x0946, r22
    calibration[6][6] = 139;
    7654:	90 93 57 09 	sts	0x0957, r25
    7658:	80 93 56 09 	sts	0x0956, r24
    calibration[7][6] = 160;
    765c:	30 93 67 09 	sts	0x0967, r19
    7660:	20 93 66 09 	sts	0x0966, r18
	calibration[8][6] = 180;
    7664:	50 93 77 09 	sts	0x0977, r21
    7668:	40 93 76 09 	sts	0x0976, r20
    calibration[0][7] = 22;    	// real speed measured in mm/s
    766c:	26 e1       	ldi	r18, 0x16	; 22
    766e:	30 e0       	ldi	r19, 0x00	; 0
    7670:	30 93 f9 08 	sts	0x08F9, r19
    7674:	20 93 f8 08 	sts	0x08F8, r18
    calibration[1][7] = 46;
    7678:	50 92 09 09 	sts	0x0909, r5
    767c:	40 92 08 09 	sts	0x0908, r4
    calibration[2][7] = 65;
    7680:	21 e4       	ldi	r18, 0x41	; 65
    7682:	30 e0       	ldi	r19, 0x00	; 0
    7684:	30 93 19 09 	sts	0x0919, r19
    7688:	20 93 18 09 	sts	0x0918, r18
    calibration[3][7] = 81;
    768c:	30 92 29 09 	sts	0x0929, r3
    7690:	20 92 28 09 	sts	0x0928, r2
    calibration[4][7] = 96;
    7694:	20 e6       	ldi	r18, 0x60	; 96
    7696:	30 e0       	ldi	r19, 0x00	; 0
    7698:	30 93 39 09 	sts	0x0939, r19
    769c:	20 93 38 09 	sts	0x0938, r18
    calibration[5][7] = 111;
    76a0:	2f e6       	ldi	r18, 0x6F	; 111
    76a2:	30 e0       	ldi	r19, 0x00	; 0
    76a4:	30 93 49 09 	sts	0x0949, r19
    76a8:	20 93 48 09 	sts	0x0948, r18
    calibration[6][7] = 125;
    76ac:	70 92 59 09 	sts	0x0959, r7
    76b0:	60 92 58 09 	sts	0x0958, r6
    calibration[7][7] = 139;
    76b4:	90 93 69 09 	sts	0x0969, r25
    76b8:	80 93 68 09 	sts	0x0968, r24
	calibration[8][7] = 153;
    76bc:	89 e9       	ldi	r24, 0x99	; 153
    76be:	90 e0       	ldi	r25, 0x00	; 0
    76c0:	90 93 79 09 	sts	0x0979, r25
    76c4:	80 93 78 09 	sts	0x0978, r24

    writeCalibrationToFlash();
    76c8:	0e 94 7f 47 	call	0x8efe	; 0x8efe <writeCalibrationToFlash>
}
    76cc:	df 91       	pop	r29
    76ce:	cf 91       	pop	r28
    76d0:	1f 91       	pop	r17
    76d2:	0f 91       	pop	r16
    76d4:	ff 90       	pop	r15
    76d6:	ef 90       	pop	r14
    76d8:	df 90       	pop	r13
    76da:	cf 90       	pop	r12
    76dc:	bf 90       	pop	r11
    76de:	af 90       	pop	r10
    76e0:	9f 90       	pop	r9
    76e2:	8f 90       	pop	r8
    76e4:	7f 90       	pop	r7
    76e6:	6f 90       	pop	r6
    76e8:	5f 90       	pop	r5
    76ea:	4f 90       	pop	r4
    76ec:	3f 90       	pop	r3
    76ee:	2f 90       	pop	r2
    76f0:	08 95       	ret

000076f2 <initCalibration>:

void initCalibration() {

    unsigned int temp=0;
 
 	temp = eeprom_read_word((uint16_t*)CALIB_CHECK_ADDRESS);
    76f2:	8a e6       	ldi	r24, 0x6A	; 106
    76f4:	9f e0       	ldi	r25, 0x0F	; 15
    76f6:	0e 94 24 58 	call	0xb048	; 0xb048 <__eerd_word_m2560>

    if(temp==0xAA55) {   // valid odometry data saved in flash, read them
    76fa:	2a ea       	ldi	r18, 0xAA	; 170
    76fc:	85 35       	cpi	r24, 0x55	; 85
    76fe:	92 07       	cpc	r25, r18
    7700:	19 f0       	breq	.+6      	; 0x7708 <initCalibration+0x16>
        readCalibrationFromFlash();
    } else {
		writeDefaultCalibration();		
    7702:	0e 94 b8 39 	call	0x7370	; 0x7370 <writeDefaultCalibration>
    7706:	08 95       	ret
    unsigned int temp=0;
 
 	temp = eeprom_read_word((uint16_t*)CALIB_CHECK_ADDRESS);

    if(temp==0xAA55) {   // valid odometry data saved in flash, read them
        readCalibrationFromFlash();
    7708:	0e 94 8e 47 	call	0x8f1c	; 0x8f1c <readCalibrationFromFlash>
    770c:	08 95       	ret

0000770e <__vector_45>:
    }

}

// Motor left
ISR(TIMER4_OVF_vect) {
    770e:	1f 92       	push	r1
    7710:	0f 92       	push	r0
    7712:	0f b6       	in	r0, 0x3f	; 63
    7714:	0f 92       	push	r0
    7716:	11 24       	eor	r1, r1
    7718:	8f 93       	push	r24
    771a:	9f 93       	push	r25

//	LED_GREEN_ON;

	if(cliffDetectedFlag) {
    771c:	80 91 7e 04 	lds	r24, 0x047E
    7720:	88 23       	and	r24, r24
    7722:	61 f0       	breq	.+24     	; 0x773c <__vector_45+0x2e>
		pwm_left = 0;
    7724:	10 92 08 03 	sts	0x0308, r1
    7728:	10 92 07 03 	sts	0x0307, r1
		OCR4A = 0;
    772c:	10 92 a9 00 	sts	0x00A9, r1
    7730:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    7734:	10 92 ab 00 	sts	0x00AB, r1
    7738:	10 92 aa 00 	sts	0x00AA, r1
	}

	left_current_avg = 0;
    773c:	10 92 f2 02 	sts	0x02F2, r1
    7740:	10 92 f1 02 	sts	0x02F1, r1

	// set pins mode based on controller output
	if(pwm_left == 0) {
    7744:	80 91 07 03 	lds	r24, 0x0307
    7748:	90 91 08 03 	lds	r25, 0x0308
    774c:	00 97       	sbiw	r24, 0x00	; 0
    774e:	41 f5       	brne	.+80     	; 0x77a0 <__vector_45+0x92>


		//leftMotorPhase = NO_PHASE;
		//compute_left_vel = 1;

		if(pwm_left_desired_to_control >= 0) {
    7750:	80 91 fb 02 	lds	r24, 0x02FB
    7754:	90 91 fc 02 	lds	r25, 0x02FC
    7758:	97 fd       	sbrc	r25, 7
    775a:	69 c0       	rjmp	.+210    	; 0x782e <__vector_45+0x120>
			leftMotorPhase = PASSIVE_PHASE;
    775c:	81 e0       	ldi	r24, 0x01	; 1
    775e:	80 93 38 02 	sts	0x0238, r24
			currentMotLeftChannel = 14;
    7762:	8e e0       	ldi	r24, 0x0E	; 14
    7764:	80 93 35 02 	sts	0x0235, r24
		} else {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 15;
		}
		firstSampleLeft = 1;
    7768:	81 e0       	ldi	r24, 0x01	; 1
    776a:	80 93 0a 02 	sts	0x020A, r24

		// select channel 15 to sample left current
		//currentMotLeftChannel = 15;
		TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    776e:	80 91 a0 00 	lds	r24, 0x00A0
    7772:	8f 75       	andi	r24, 0x5F	; 95
    7774:	80 93 a0 00 	sts	0x00A0, r24
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    7778:	80 91 02 01 	lds	r24, 0x0102
    777c:	87 7e       	andi	r24, 0xE7	; 231
    777e:	80 93 02 01 	sts	0x0102, r24
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
    7782:	80 91 72 00 	lds	r24, 0x0072
    7786:	89 7f       	andi	r24, 0xF9	; 249
    7788:	80 93 72 00 	sts	0x0072, r24
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
    778c:	89 b3       	in	r24, 0x19	; 25
    778e:	86 60       	ori	r24, 0x06	; 6
    7790:	89 bb       	out	0x19, r24	; 25
	}
*/

//	LED_GREEN_OFF;

}
    7792:	9f 91       	pop	r25
    7794:	8f 91       	pop	r24
    7796:	0f 90       	pop	r0
    7798:	0f be       	out	0x3f, r0	; 63
    779a:	0f 90       	pop	r0
    779c:	1f 90       	pop	r1
    779e:	18 95       	reti
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
	} else if(pwm_left > 0) {   		// move forward
    77a0:	18 16       	cp	r1, r24
    77a2:	19 06       	cpc	r1, r25
    77a4:	2c f5       	brge	.+74     	; 0x77f0 <__vector_45+0xe2>
		leftMotorPhase = ACTIVE_PHASE;
    77a6:	10 92 38 02 	sts	0x0238, r1
		// select channel 15 to sample left current
		currentMotLeftChannel = 15;
    77aa:	8f e0       	ldi	r24, 0x0F	; 15
    77ac:	80 93 35 02 	sts	0x0235, r24
		TCCR4A  &= ~(1 << COM4B1);		// disable OCB
    77b0:	80 91 a0 00 	lds	r24, 0x00A0
    77b4:	8f 7d       	andi	r24, 0xDF	; 223
    77b6:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
    77ba:	80 91 72 00 	lds	r24, 0x0072
    77be:	8b 7f       	andi	r24, 0xFB	; 251
    77c0:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 4);				// output to 0
    77c4:	80 91 02 01 	lds	r24, 0x0102
    77c8:	8f 7e       	andi	r24, 0xEF	; 239
    77ca:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4A1);		// enable OCA
    77ce:	80 91 a0 00 	lds	r24, 0x00A0
    77d2:	80 68       	ori	r24, 0x80	; 128
    77d4:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
    77d8:	80 91 72 00 	lds	r24, 0x0072
    77dc:	82 60       	ori	r24, 0x02	; 2
    77de:	80 93 72 00 	sts	0x0072, r24
	}
*/

//	LED_GREEN_OFF;

}
    77e2:	9f 91       	pop	r25
    77e4:	8f 91       	pop	r24
    77e6:	0f 90       	pop	r0
    77e8:	0f be       	out	0x3f, r0	; 63
    77ea:	0f 90       	pop	r0
    77ec:	1f 90       	pop	r1
    77ee:	18 95       	reti
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
		PORTH &= ~(1 << 4);				// output to 0
		TCCR4A |= (1 << COM4A1);		// enable OCA
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
	} else if(pwm_left < 0) {      		// move backward
		leftMotorPhase = ACTIVE_PHASE;
    77f0:	10 92 38 02 	sts	0x0238, r1
		// select channel 14 to sample left current
		currentMotLeftChannel = 14;
    77f4:	8e e0       	ldi	r24, 0x0E	; 14
    77f6:	80 93 35 02 	sts	0x0235, r24
		TCCR4A  &= ~(1 << COM4A1);		// disable OCA
    77fa:	80 91 a0 00 	lds	r24, 0x00A0
    77fe:	8f 77       	andi	r24, 0x7F	; 127
    7800:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4A);		// disable OCA interrupt
    7804:	80 91 72 00 	lds	r24, 0x0072
    7808:	8d 7f       	andi	r24, 0xFD	; 253
    780a:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 3);				// output to 0
    780e:	80 91 02 01 	lds	r24, 0x0102
    7812:	87 7f       	andi	r24, 0xF7	; 247
    7814:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4B1);		// enable OCB
    7818:	80 91 a0 00 	lds	r24, 0x00A0
    781c:	80 62       	ori	r24, 0x20	; 32
    781e:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
    7822:	80 91 72 00 	lds	r24, 0x0072
    7826:	84 60       	ori	r24, 0x04	; 4
    7828:	80 93 72 00 	sts	0x0072, r24
    782c:	b2 cf       	rjmp	.-156    	; 0x7792 <__vector_45+0x84>

		if(pwm_left_desired_to_control >= 0) {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 14;
		} else {
			leftMotorPhase = PASSIVE_PHASE;
    782e:	81 e0       	ldi	r24, 0x01	; 1
    7830:	80 93 38 02 	sts	0x0238, r24
			currentMotLeftChannel = 15;
    7834:	8f e0       	ldi	r24, 0x0F	; 15
    7836:	80 93 35 02 	sts	0x0235, r24
    783a:	96 cf       	rjmp	.-212    	; 0x7768 <__vector_45+0x5a>

0000783c <__vector_42>:
//	LED_GREEN_OFF;

}

// motor left forward
ISR(TIMER4_COMPA_vect) {
    783c:	1f 92       	push	r1
    783e:	0f 92       	push	r0
    7840:	0f b6       	in	r0, 0x3f	; 63
    7842:	0f 92       	push	r0
    7844:	11 24       	eor	r1, r1
    7846:	8f 93       	push	r24
    7848:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    784a:	81 e0       	ldi	r24, 0x01	; 1
    784c:	80 93 38 02 	sts	0x0238, r24
	// select channel 14 to sample the left velocity
	currentMotLeftChannel = 14;
    7850:	9e e0       	ldi	r25, 0x0E	; 14
    7852:	90 93 35 02 	sts	0x0235, r25

	firstSampleLeft = 1;
    7856:	80 93 0a 02 	sts	0x020A, r24

//	LED_GREEN_OFF;

}
    785a:	9f 91       	pop	r25
    785c:	8f 91       	pop	r24
    785e:	0f 90       	pop	r0
    7860:	0f be       	out	0x3f, r0	; 63
    7862:	0f 90       	pop	r0
    7864:	1f 90       	pop	r1
    7866:	18 95       	reti

00007868 <__vector_43>:

// motor left backward
ISR(TIMER4_COMPB_vect) {
    7868:	1f 92       	push	r1
    786a:	0f 92       	push	r0
    786c:	0f b6       	in	r0, 0x3f	; 63
    786e:	0f 92       	push	r0
    7870:	11 24       	eor	r1, r1
    7872:	8f 93       	push	r24
    7874:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    7876:	81 e0       	ldi	r24, 0x01	; 1
    7878:	80 93 38 02 	sts	0x0238, r24
	// select channel 15 to sample the left velocity
	currentMotLeftChannel = 15;
    787c:	9f e0       	ldi	r25, 0x0F	; 15
    787e:	90 93 35 02 	sts	0x0235, r25

	firstSampleLeft = 1;
    7882:	80 93 0a 02 	sts	0x020A, r24

//	LED_GREEN_OFF;

}
    7886:	9f 91       	pop	r25
    7888:	8f 91       	pop	r24
    788a:	0f 90       	pop	r0
    788c:	0f be       	out	0x3f, r0	; 63
    788e:	0f 90       	pop	r0
    7890:	1f 90       	pop	r1
    7892:	18 95       	reti

00007894 <__vector_35>:

// Motor right
ISR(TIMER3_OVF_vect) {
    7894:	1f 92       	push	r1
    7896:	0f 92       	push	r0
    7898:	0f b6       	in	r0, 0x3f	; 63
    789a:	0f 92       	push	r0
    789c:	11 24       	eor	r1, r1
    789e:	8f 93       	push	r24
    78a0:	9f 93       	push	r25

//	LED_GREEN_ON;

  	// PORTB ^= (1 << 7); // Toggle the LED

	if(cliffDetectedFlag) {
    78a2:	80 91 7e 04 	lds	r24, 0x047E
    78a6:	88 23       	and	r24, r24
    78a8:	61 f0       	breq	.+24     	; 0x78c2 <__vector_35+0x2e>
		pwm_right = 0;
    78aa:	10 92 06 03 	sts	0x0306, r1
    78ae:	10 92 05 03 	sts	0x0305, r1
		OCR3A = 0;
    78b2:	10 92 99 00 	sts	0x0099, r1
    78b6:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    78ba:	10 92 9b 00 	sts	0x009B, r1
    78be:	10 92 9a 00 	sts	0x009A, r1
	}

	right_current_avg = 0;
    78c2:	10 92 f4 02 	sts	0x02F4, r1
    78c6:	10 92 f3 02 	sts	0x02F3, r1


	if(pwm_right == 0) {
    78ca:	80 91 05 03 	lds	r24, 0x0305
    78ce:	90 91 06 03 	lds	r25, 0x0306
    78d2:	00 97       	sbiw	r24, 0x00	; 0
    78d4:	31 f5       	brne	.+76     	; 0x7922 <__vector_35+0x8e>
		//firstSampleRight = 0;

		//rightMotorPhase = NO_PHASE;
		//compute_right_vel = 1;

		if(pwm_right_desired_to_control >= 0) {
    78d6:	80 91 f9 02 	lds	r24, 0x02F9
    78da:	90 91 fa 02 	lds	r25, 0x02FA
    78de:	97 fd       	sbrc	r25, 7
    78e0:	5f c0       	rjmp	.+190    	; 0x79a0 <__vector_35+0x10c>
			rightMotorPhase = PASSIVE_PHASE;
    78e2:	81 e0       	ldi	r24, 0x01	; 1
    78e4:	80 93 37 02 	sts	0x0237, r24
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
    78e8:	8c e0       	ldi	r24, 0x0C	; 12
    78ea:	80 93 36 02 	sts	0x0236, r24
		} else {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
		}
		firstSampleRight = 1;
    78ee:	81 e0       	ldi	r24, 0x01	; 1
    78f0:	80 93 09 02 	sts	0x0209, r24

		// select channel 13 to sample left current
		//currentMotRightChannel = 13;
		TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    78f4:	80 91 90 00 	lds	r24, 0x0090
    78f8:	8f 75       	andi	r24, 0x5F	; 95
    78fa:	80 93 90 00 	sts	0x0090, r24
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    78fe:	8e b1       	in	r24, 0x0e	; 14
    7900:	87 7e       	andi	r24, 0xE7	; 231
    7902:	8e b9       	out	0x0e, r24	; 14
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
    7904:	80 91 71 00 	lds	r24, 0x0071
    7908:	89 7f       	andi	r24, 0xF9	; 249
    790a:	80 93 71 00 	sts	0x0071, r24
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
    790e:	88 b3       	in	r24, 0x18	; 24
    7910:	86 60       	ori	r24, 0x06	; 6
    7912:	88 bb       	out	0x18, r24	; 24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    7914:	9f 91       	pop	r25
    7916:	8f 91       	pop	r24
    7918:	0f 90       	pop	r0
    791a:	0f be       	out	0x3f, r0	; 63
    791c:	0f 90       	pop	r0
    791e:	1f 90       	pop	r1
    7920:	18 95       	reti
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
	}else if(pwm_right > 0) {   		// move forward
    7922:	18 16       	cp	r1, r24
    7924:	19 06       	cpc	r1, r25
    7926:	0c f5       	brge	.+66     	; 0x796a <__vector_35+0xd6>
		rightMotorPhase = ACTIVE_PHASE;
    7928:	10 92 37 02 	sts	0x0237, r1
		// select channel 13 to sample left current
		currentMotRightChannel = 13;
    792c:	8d e0       	ldi	r24, 0x0D	; 13
    792e:	80 93 36 02 	sts	0x0236, r24
		TCCR3A  &= ~(1 << COM3B1);		// disable OCB
    7932:	80 91 90 00 	lds	r24, 0x0090
    7936:	8f 7d       	andi	r24, 0xDF	; 223
    7938:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
    793c:	80 91 71 00 	lds	r24, 0x0071
    7940:	8b 7f       	andi	r24, 0xFB	; 251
    7942:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 4);				// output to 0
    7946:	74 98       	cbi	0x0e, 4	; 14
		TCCR3A |= (1 << COM3A1);		// enable OCA
    7948:	80 91 90 00 	lds	r24, 0x0090
    794c:	80 68       	ori	r24, 0x80	; 128
    794e:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
    7952:	80 91 71 00 	lds	r24, 0x0071
    7956:	82 60       	ori	r24, 0x02	; 2
    7958:	80 93 71 00 	sts	0x0071, r24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    795c:	9f 91       	pop	r25
    795e:	8f 91       	pop	r24
    7960:	0f 90       	pop	r0
    7962:	0f be       	out	0x3f, r0	; 63
    7964:	0f 90       	pop	r0
    7966:	1f 90       	pop	r1
    7968:	18 95       	reti
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
		PORTE &= ~(1 << 4);				// output to 0
		TCCR3A |= (1 << COM3A1);		// enable OCA
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
	} else if(pwm_right < 0) {      	// move backward
		rightMotorPhase = ACTIVE_PHASE;
    796a:	10 92 37 02 	sts	0x0237, r1
		// select channel 12 to sample left current
		currentMotRightChannel = 12;
    796e:	8c e0       	ldi	r24, 0x0C	; 12
    7970:	80 93 36 02 	sts	0x0236, r24
		TCCR3A  &= ~(1 << COM3A1);		// disable OCA
    7974:	80 91 90 00 	lds	r24, 0x0090
    7978:	8f 77       	andi	r24, 0x7F	; 127
    797a:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3A);		// disable OCA interrupt
    797e:	80 91 71 00 	lds	r24, 0x0071
    7982:	8d 7f       	andi	r24, 0xFD	; 253
    7984:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 3);				// output to 0
    7988:	73 98       	cbi	0x0e, 3	; 14
		TCCR3A |= (1 << COM3B1);		// enable OCB
    798a:	80 91 90 00 	lds	r24, 0x0090
    798e:	80 62       	ori	r24, 0x20	; 32
    7990:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3B);		// enable OCB interrupt
    7994:	80 91 71 00 	lds	r24, 0x0071
    7998:	84 60       	ori	r24, 0x04	; 4
    799a:	80 93 71 00 	sts	0x0071, r24
    799e:	ba cf       	rjmp	.-140    	; 0x7914 <__vector_35+0x80>
		if(pwm_right_desired_to_control >= 0) {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
		} else {
			rightMotorPhase = PASSIVE_PHASE;
    79a0:	81 e0       	ldi	r24, 0x01	; 1
    79a2:	80 93 37 02 	sts	0x0237, r24
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
    79a6:	8d e0       	ldi	r24, 0x0D	; 13
    79a8:	80 93 36 02 	sts	0x0236, r24
    79ac:	a0 cf       	rjmp	.-192    	; 0x78ee <__vector_35+0x5a>

000079ae <__vector_32>:
//	LED_GREEN_OFF;

}

// motor right forward
ISR(TIMER3_COMPA_vect) {
    79ae:	1f 92       	push	r1
    79b0:	0f 92       	push	r0
    79b2:	0f b6       	in	r0, 0x3f	; 63
    79b4:	0f 92       	push	r0
    79b6:	11 24       	eor	r1, r1
    79b8:	8f 93       	push	r24
    79ba:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    79bc:	81 e0       	ldi	r24, 0x01	; 1
    79be:	80 93 37 02 	sts	0x0237, r24
	// select channel 12 to sample the right velocity
	currentMotRightChannel = 12;
    79c2:	9c e0       	ldi	r25, 0x0C	; 12
    79c4:	90 93 36 02 	sts	0x0236, r25

	firstSampleRight = 1;
    79c8:	80 93 09 02 	sts	0x0209, r24

//	LED_RED_OFF;

}
    79cc:	9f 91       	pop	r25
    79ce:	8f 91       	pop	r24
    79d0:	0f 90       	pop	r0
    79d2:	0f be       	out	0x3f, r0	; 63
    79d4:	0f 90       	pop	r0
    79d6:	1f 90       	pop	r1
    79d8:	18 95       	reti

000079da <__vector_33>:

// motor right backward
ISR(TIMER3_COMPB_vect) {
    79da:	1f 92       	push	r1
    79dc:	0f 92       	push	r0
    79de:	0f b6       	in	r0, 0x3f	; 63
    79e0:	0f 92       	push	r0
    79e2:	11 24       	eor	r1, r1
    79e4:	8f 93       	push	r24
    79e6:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    79e8:	81 e0       	ldi	r24, 0x01	; 1
    79ea:	80 93 37 02 	sts	0x0237, r24
	// select channel 13 to sample the right velocity
	currentMotRightChannel = 13;
    79ee:	9d e0       	ldi	r25, 0x0D	; 13
    79f0:	90 93 36 02 	sts	0x0236, r25

	firstSampleRight = 1;
    79f4:	80 93 09 02 	sts	0x0209, r24

//	LED_RED_OFF;
}
    79f8:	9f 91       	pop	r25
    79fa:	8f 91       	pop	r24
    79fc:	0f 90       	pop	r0
    79fe:	0f be       	out	0x3f, r0	; 63
    7a00:	0f 90       	pop	r0
    7a02:	1f 90       	pop	r1
    7a04:	18 95       	reti

00007a06 <initBehaviors>:

#include "behaviors.h"

void initBehaviors() {

	srand(TCNT3);	// initialize random seed (used in obstacle avoidance)
    7a06:	80 91 94 00 	lds	r24, 0x0094
    7a0a:	90 91 95 00 	lds	r25, 0x0095
    7a0e:	0e 94 fa 57 	call	0xaff4	; 0xaff4 <srand>

}
    7a12:	08 95       	ret

00007a14 <obstacleAvoidance>:

void obstacleAvoidance(signed int *pwmLeft, signed int *pwmRight) {
    7a14:	2f 92       	push	r2
    7a16:	3f 92       	push	r3
    7a18:	4f 92       	push	r4
    7a1a:	5f 92       	push	r5
    7a1c:	6f 92       	push	r6
    7a1e:	7f 92       	push	r7
    7a20:	8f 92       	push	r8
    7a22:	9f 92       	push	r9
    7a24:	af 92       	push	r10
    7a26:	bf 92       	push	r11
    7a28:	cf 92       	push	r12
    7a2a:	df 92       	push	r13
    7a2c:	ef 92       	push	r14
    7a2e:	ff 92       	push	r15
    7a30:	0f 93       	push	r16
    7a32:	1f 93       	push	r17
    7a34:	df 93       	push	r29
    7a36:	cf 93       	push	r28
    7a38:	cd b7       	in	r28, 0x3d	; 61
    7a3a:	de b7       	in	r29, 0x3e	; 62
    7a3c:	28 97       	sbiw	r28, 0x08	; 8
    7a3e:	0f b6       	in	r0, 0x3f	; 63
    7a40:	f8 94       	cli
    7a42:	de bf       	out	0x3e, r29	; 62
    7a44:	0f be       	out	0x3f, r0	; 63
    7a46:	cd bf       	out	0x3d, r28	; 61
    7a48:	3c 01       	movw	r6, r24
    7a4a:	7a 83       	std	Y+2, r23	; 0x02
    7a4c:	69 83       	std	Y+1, r22	; 0x01
	//	y	0		0.5		1		0.5		0		-0.5	-1		-0.5

	unsigned int i=0;
	signed int long res=0;
	signed int sumSensorsX=0, sumSensorsY=0;
	signed int desL=*pwmLeft, desR=*pwmRight;
    7a4e:	fc 01       	movw	r30, r24
    7a50:	01 90       	ld	r0, Z+
    7a52:	f0 81       	ld	r31, Z
    7a54:	e0 2d       	mov	r30, r0
    7a56:	fc 83       	std	Y+4, r31	; 0x04
    7a58:	eb 83       	std	Y+3, r30	; 0x03
    7a5a:	fb 01       	movw	r30, r22
    7a5c:	01 90       	ld	r0, Z+
    7a5e:	f0 81       	ld	r31, Z
    7a60:	e0 2d       	mov	r30, r0
    7a62:	fe 83       	std	Y+6, r31	; 0x06
    7a64:	ed 83       	std	Y+5, r30	; 0x05

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    7a66:	00 91 d1 02 	lds	r16, 0x02D1
    7a6a:	10 91 d2 02 	lds	r17, 0x02D2
    7a6e:	05 30       	cpi	r16, 0x05	; 5
    7a70:	11 05       	cpc	r17, r1
    7a72:	34 f4       	brge	.+12     	; 0x7a80 <obstacleAvoidance+0x6c>
			proximityResultLinear[i] = 0;
    7a74:	10 92 d2 02 	sts	0x02D2, r1
    7a78:	10 92 d1 02 	sts	0x02D1, r1
    7a7c:	00 e0       	ldi	r16, 0x00	; 0
    7a7e:	10 e0       	ldi	r17, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    7a80:	60 91 d3 02 	lds	r22, 0x02D3
    7a84:	70 91 d4 02 	lds	r23, 0x02D4
    7a88:	65 30       	cpi	r22, 0x05	; 5
    7a8a:	71 05       	cpc	r23, r1
    7a8c:	34 f4       	brge	.+12     	; 0x7a9a <obstacleAvoidance+0x86>
			proximityResultLinear[i] = 0;
    7a8e:	10 92 d4 02 	sts	0x02D4, r1
    7a92:	10 92 d3 02 	sts	0x02D3, r1
    7a96:	60 e0       	ldi	r22, 0x00	; 0
    7a98:	70 e0       	ldi	r23, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    7a9a:	80 91 d5 02 	lds	r24, 0x02D5
    7a9e:	90 91 d6 02 	lds	r25, 0x02D6
    7aa2:	85 30       	cpi	r24, 0x05	; 5
    7aa4:	91 05       	cpc	r25, r1
    7aa6:	24 f4       	brge	.+8      	; 0x7ab0 <obstacleAvoidance+0x9c>
			proximityResultLinear[i] = 0;
    7aa8:	10 92 d6 02 	sts	0x02D6, r1
    7aac:	10 92 d5 02 	sts	0x02D5, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    7ab0:	40 91 d7 02 	lds	r20, 0x02D7
    7ab4:	50 91 d8 02 	lds	r21, 0x02D8
    7ab8:	45 30       	cpi	r20, 0x05	; 5
    7aba:	51 05       	cpc	r21, r1
    7abc:	34 f4       	brge	.+12     	; 0x7aca <obstacleAvoidance+0xb6>
			proximityResultLinear[i] = 0;
    7abe:	10 92 d8 02 	sts	0x02D8, r1
    7ac2:	10 92 d7 02 	sts	0x02D7, r1
    7ac6:	40 e0       	ldi	r20, 0x00	; 0
    7ac8:	50 e0       	ldi	r21, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    7aca:	40 90 d9 02 	lds	r4, 0x02D9
    7ace:	50 90 da 02 	lds	r5, 0x02DA
    7ad2:	f5 e0       	ldi	r31, 0x05	; 5
    7ad4:	4f 16       	cp	r4, r31
    7ad6:	51 04       	cpc	r5, r1
    7ad8:	34 f4       	brge	.+12     	; 0x7ae6 <obstacleAvoidance+0xd2>
			proximityResultLinear[i] = 0;
    7ada:	10 92 da 02 	sts	0x02DA, r1
    7ade:	10 92 d9 02 	sts	0x02D9, r1
    7ae2:	44 24       	eor	r4, r4
    7ae4:	55 24       	eor	r5, r5
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    7ae6:	20 91 db 02 	lds	r18, 0x02DB
    7aea:	30 91 dc 02 	lds	r19, 0x02DC
    7aee:	25 30       	cpi	r18, 0x05	; 5
    7af0:	31 05       	cpc	r19, r1
    7af2:	34 f4       	brge	.+12     	; 0x7b00 <obstacleAvoidance+0xec>
			proximityResultLinear[i] = 0;
    7af4:	10 92 dc 02 	sts	0x02DC, r1
    7af8:	10 92 db 02 	sts	0x02DB, r1
    7afc:	20 e0       	ldi	r18, 0x00	; 0
    7afe:	30 e0       	ldi	r19, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    7b00:	80 91 dd 02 	lds	r24, 0x02DD
    7b04:	90 91 de 02 	lds	r25, 0x02DE
    7b08:	85 30       	cpi	r24, 0x05	; 5
    7b0a:	91 05       	cpc	r25, r1
    7b0c:	24 f4       	brge	.+8      	; 0x7b16 <obstacleAvoidance+0x102>
			proximityResultLinear[i] = 0;
    7b0e:	10 92 de 02 	sts	0x02DE, r1
    7b12:	10 92 dd 02 	sts	0x02DD, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    7b16:	80 91 df 02 	lds	r24, 0x02DF
    7b1a:	90 91 e0 02 	lds	r25, 0x02E0
    7b1e:	85 30       	cpi	r24, 0x05	; 5
    7b20:	91 05       	cpc	r25, r1
    7b22:	34 f4       	brge	.+12     	; 0x7b30 <obstacleAvoidance+0x11c>
			proximityResultLinear[i] = 0;
    7b24:	10 92 e0 02 	sts	0x02E0, r1
    7b28:	10 92 df 02 	sts	0x02DF, r1
    7b2c:	80 e0       	ldi	r24, 0x00	; 0
    7b2e:	90 e0       	ldi	r25, 0x00	; 0
	}

	// sum the contribution of each sensor (based on the previous weights table);
	// give more weight to prox2 and prox6 (side proximities) in order to get more stability in narrow aisles;
	// add some noise to the sum in order to escape from dead-lock positions
	sumSensorsX = -proximityResultLinear[0] - (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) + proximityResultLinear[4] + (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + ((rand()%60)-30);
    7b30:	10 95       	com	r17
    7b32:	01 95       	neg	r16
    7b34:	1f 4f       	sbci	r17, 0xFF	; 255
    7b36:	5b 01       	movw	r10, r22
    7b38:	b5 94       	asr	r11
    7b3a:	a7 94       	ror	r10
    7b3c:	7a 01       	movw	r14, r20
    7b3e:	f5 94       	asr	r15
    7b40:	e7 94       	ror	r14
    7b42:	69 01       	movw	r12, r18
    7b44:	d5 94       	asr	r13
    7b46:	c7 94       	ror	r12
    7b48:	4c 01       	movw	r8, r24
    7b4a:	95 94       	asr	r9
    7b4c:	87 94       	ror	r8
    7b4e:	0e 94 f5 57 	call	0xafea	; 0xafea <rand>
    7b52:	92 01       	movw	r18, r4
    7b54:	2e 51       	subi	r18, 0x1E	; 30
    7b56:	30 40       	sbci	r19, 0x00	; 0
    7b58:	20 0f       	add	r18, r16
    7b5a:	31 1f       	adc	r19, r17
    7b5c:	2e 0d       	add	r18, r14
    7b5e:	3f 1d       	adc	r19, r15
    7b60:	2c 0d       	add	r18, r12
    7b62:	3d 1d       	adc	r19, r13
    7b64:	2a 19       	sub	r18, r10
    7b66:	3b 09       	sbc	r19, r11
    7b68:	28 19       	sub	r18, r8
    7b6a:	39 09       	sbc	r19, r9
    7b6c:	6c e3       	ldi	r22, 0x3C	; 60
    7b6e:	26 2e       	mov	r2, r22
    7b70:	31 2c       	mov	r3, r1
    7b72:	b1 01       	movw	r22, r2
    7b74:	0e 94 57 57 	call	0xaeae	; 0xaeae <__divmodhi4>
    7b78:	28 0f       	add	r18, r24
    7b7a:	39 1f       	adc	r19, r25
    7b7c:	38 87       	std	Y+8, r19	; 0x08
    7b7e:	2f 83       	std	Y+7, r18	; 0x07
	//sumSensorsX = -proximityResultLinear[0]  + proximityResultLinear[4];	
	sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[2]>>2) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[6]>>2) - (proximityResultLinear[7]>>1)+ ((rand()%60)-30);
    7b80:	e0 90 d3 02 	lds	r14, 0x02D3
    7b84:	f0 90 d4 02 	lds	r15, 0x02D4
    7b88:	f5 94       	asr	r15
    7b8a:	e7 94       	ror	r14
    7b8c:	00 91 d5 02 	lds	r16, 0x02D5
    7b90:	10 91 d6 02 	lds	r17, 0x02D6
    7b94:	15 95       	asr	r17
    7b96:	07 95       	ror	r16
    7b98:	15 95       	asr	r17
    7b9a:	07 95       	ror	r16
    7b9c:	c0 90 d7 02 	lds	r12, 0x02D7
    7ba0:	d0 90 d8 02 	lds	r13, 0x02D8
    7ba4:	d5 94       	asr	r13
    7ba6:	c7 94       	ror	r12
    7ba8:	a0 90 db 02 	lds	r10, 0x02DB
    7bac:	b0 90 dc 02 	lds	r11, 0x02DC
    7bb0:	b5 94       	asr	r11
    7bb2:	a7 94       	ror	r10
    7bb4:	40 90 dd 02 	lds	r4, 0x02DD
    7bb8:	50 90 de 02 	lds	r5, 0x02DE
    7bbc:	55 94       	asr	r5
    7bbe:	47 94       	ror	r4
    7bc0:	55 94       	asr	r5
    7bc2:	47 94       	ror	r4
    7bc4:	80 90 df 02 	lds	r8, 0x02DF
    7bc8:	90 90 e0 02 	lds	r9, 0x02E0
    7bcc:	95 94       	asr	r9
    7bce:	87 94       	ror	r8
    7bd0:	0e 94 f5 57 	call	0xafea	; 0xafea <rand>
    7bd4:	97 01       	movw	r18, r14
    7bd6:	20 0f       	add	r18, r16
    7bd8:	31 1f       	adc	r19, r17
    7bda:	2e 51       	subi	r18, 0x1E	; 30
    7bdc:	30 40       	sbci	r19, 0x00	; 0
    7bde:	2c 0d       	add	r18, r12
    7be0:	3d 1d       	adc	r19, r13
    7be2:	2a 19       	sub	r18, r10
    7be4:	3b 09       	sbc	r19, r11
    7be6:	28 19       	sub	r18, r8
    7be8:	39 09       	sbc	r19, r9
    7bea:	24 19       	sub	r18, r4
    7bec:	35 09       	sbc	r19, r5
    7bee:	b1 01       	movw	r22, r2
    7bf0:	0e 94 57 57 	call	0xaeae	; 0xaeae <__divmodhi4>
    7bf4:	28 0f       	add	r18, r24
    7bf6:	39 1f       	adc	r19, r25
	//sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + (rand()%30);

	// modify the velocity components based on sensor values
	if(desL >= 0) {
    7bf8:	4b 81       	ldd	r20, Y+3	; 0x03
    7bfa:	5c 81       	ldd	r21, Y+4	; 0x04
    7bfc:	57 fd       	sbrc	r21, 7
    7bfe:	e5 c0       	rjmp	.+458    	; 0x7dca <obstacleAvoidance+0x3b6>
		res = (signed long int)desL + (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
    7c00:	5a 01       	movw	r10, r20
    7c02:	cc 24       	eor	r12, r12
    7c04:	b7 fc       	sbrc	r11, 7
    7c06:	c0 94       	com	r12
    7c08:	dc 2c       	mov	r13, r12
    7c0a:	8f 81       	ldd	r24, Y+7	; 0x07
    7c0c:	98 85       	ldd	r25, Y+8	; 0x08
    7c0e:	1c 01       	movw	r2, r24
    7c10:	44 24       	eor	r4, r4
    7c12:	37 fc       	sbrc	r3, 7
    7c14:	40 94       	com	r4
    7c16:	54 2c       	mov	r5, r4
    7c18:	79 01       	movw	r14, r18
    7c1a:	00 27       	eor	r16, r16
    7c1c:	f7 fc       	sbrc	r15, 7
    7c1e:	00 95       	com	r16
    7c20:	10 2f       	mov	r17, r16
    7c22:	c2 01       	movw	r24, r4
    7c24:	b1 01       	movw	r22, r2
    7c26:	6e 19       	sub	r22, r14
    7c28:	7f 09       	sbc	r23, r15
    7c2a:	80 0b       	sbc	r24, r16
    7c2c:	91 0b       	sbc	r25, r17
    7c2e:	a6 01       	movw	r20, r12
    7c30:	95 01       	movw	r18, r10
    7c32:	0e 94 24 57 	call	0xae48	; 0xae48 <__mulsi3>
    7c36:	b6 e0       	ldi	r27, 0x06	; 6
    7c38:	95 95       	asr	r25
    7c3a:	87 95       	ror	r24
    7c3c:	77 95       	ror	r23
    7c3e:	67 95       	ror	r22
    7c40:	ba 95       	dec	r27
    7c42:	d1 f7       	brne	.-12     	; 0x7c38 <obstacleAvoidance+0x224>
    7c44:	6a 0d       	add	r22, r10
    7c46:	7b 1d       	adc	r23, r11
    7c48:	8c 1d       	adc	r24, r12
    7c4a:	9d 1d       	adc	r25, r13
		*pwmLeft = (signed int)res;
    7c4c:	f3 01       	movw	r30, r6
    7c4e:	71 83       	std	Z+1, r23	; 0x01
    7c50:	60 83       	st	Z, r22
	} else {
		res = (signed long int)desL - (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
		*pwmLeft = (signed int)res;
	}
	if(desR >=0) {
    7c52:	2d 81       	ldd	r18, Y+5	; 0x05
    7c54:	3e 81       	ldd	r19, Y+6	; 0x06
    7c56:	37 fd       	sbrc	r19, 7
    7c58:	97 c0       	rjmp	.+302    	; 0x7d88 <obstacleAvoidance+0x374>
		res = (signed long int)desR + (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
    7c5a:	59 01       	movw	r10, r18
    7c5c:	cc 24       	eor	r12, r12
    7c5e:	b7 fc       	sbrc	r11, 7
    7c60:	c0 94       	com	r12
    7c62:	dc 2c       	mov	r13, r12
    7c64:	c8 01       	movw	r24, r16
    7c66:	b7 01       	movw	r22, r14
    7c68:	62 0d       	add	r22, r2
    7c6a:	73 1d       	adc	r23, r3
    7c6c:	84 1d       	adc	r24, r4
    7c6e:	95 1d       	adc	r25, r5
    7c70:	a6 01       	movw	r20, r12
    7c72:	95 01       	movw	r18, r10
    7c74:	0e 94 24 57 	call	0xae48	; 0xae48 <__mulsi3>
    7c78:	f6 e0       	ldi	r31, 0x06	; 6
    7c7a:	95 95       	asr	r25
    7c7c:	87 95       	ror	r24
    7c7e:	77 95       	ror	r23
    7c80:	67 95       	ror	r22
    7c82:	fa 95       	dec	r31
    7c84:	d1 f7       	brne	.-12     	; 0x7c7a <obstacleAvoidance+0x266>
    7c86:	6a 0d       	add	r22, r10
    7c88:	7b 1d       	adc	r23, r11
    7c8a:	8c 1d       	adc	r24, r12
    7c8c:	9d 1d       	adc	r25, r13
		*pwmRight = (signed int)res;
    7c8e:	9b 01       	movw	r18, r22
    7c90:	e9 81       	ldd	r30, Y+1	; 0x01
    7c92:	fa 81       	ldd	r31, Y+2	; 0x02
    7c94:	71 83       	std	Z+1, r23	; 0x01
    7c96:	60 83       	st	Z, r22
	} else {
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	}

	if(currentSelector == 10) {	// force a little bit the upwards direction in vertical motion
    7c98:	80 91 5c 04 	lds	r24, 0x045C
    7c9c:	8a 30       	cpi	r24, 0x0A	; 10
    7c9e:	09 f4       	brne	.+2      	; 0x7ca2 <obstacleAvoidance+0x28e>
    7ca0:	4b c0       	rjmp	.+150    	; 0x7d38 <obstacleAvoidance+0x324>
			}
		}
	}

	// force the values to be in the pwm maximum range
	if (*pwmRight>(MAX_MOTORS_PWM/2)) *pwmRight=(MAX_MOTORS_PWM/2);
    7ca2:	f2 e0       	ldi	r31, 0x02	; 2
    7ca4:	21 30       	cpi	r18, 0x01	; 1
    7ca6:	3f 07       	cpc	r19, r31
    7ca8:	44 f0       	brlt	.+16     	; 0x7cba <obstacleAvoidance+0x2a6>
    7caa:	80 e0       	ldi	r24, 0x00	; 0
    7cac:	92 e0       	ldi	r25, 0x02	; 2
    7cae:	e9 81       	ldd	r30, Y+1	; 0x01
    7cb0:	fa 81       	ldd	r31, Y+2	; 0x02
    7cb2:	91 83       	std	Z+1, r25	; 0x01
    7cb4:	80 83       	st	Z, r24
    7cb6:	20 e0       	ldi	r18, 0x00	; 0
    7cb8:	32 e0       	ldi	r19, 0x02	; 2
	if (*pwmLeft>(MAX_MOTORS_PWM/2)) *pwmLeft=(MAX_MOTORS_PWM/2);
    7cba:	f3 01       	movw	r30, r6
    7cbc:	80 81       	ld	r24, Z
    7cbe:	91 81       	ldd	r25, Z+1	; 0x01
    7cc0:	f2 e0       	ldi	r31, 0x02	; 2
    7cc2:	81 30       	cpi	r24, 0x01	; 1
    7cc4:	9f 07       	cpc	r25, r31
    7cc6:	4c f0       	brlt	.+18     	; 0x7cda <obstacleAvoidance+0x2c6>
    7cc8:	80 e0       	ldi	r24, 0x00	; 0
    7cca:	92 e0       	ldi	r25, 0x02	; 2
    7ccc:	f3 01       	movw	r30, r6
    7cce:	91 83       	std	Z+1, r25	; 0x01
    7cd0:	80 83       	st	Z, r24
    7cd2:	e9 81       	ldd	r30, Y+1	; 0x01
    7cd4:	fa 81       	ldd	r31, Y+2	; 0x02
    7cd6:	20 81       	ld	r18, Z
    7cd8:	31 81       	ldd	r19, Z+1	; 0x01
	if (*pwmRight<-(MAX_MOTORS_PWM/2)) *pwmRight=-(MAX_MOTORS_PWM/2);
    7cda:	fe ef       	ldi	r31, 0xFE	; 254
    7cdc:	20 30       	cpi	r18, 0x00	; 0
    7cde:	3f 07       	cpc	r19, r31
    7ce0:	4c f4       	brge	.+18     	; 0x7cf4 <obstacleAvoidance+0x2e0>
    7ce2:	80 e0       	ldi	r24, 0x00	; 0
    7ce4:	9e ef       	ldi	r25, 0xFE	; 254
    7ce6:	e9 81       	ldd	r30, Y+1	; 0x01
    7ce8:	fa 81       	ldd	r31, Y+2	; 0x02
    7cea:	91 83       	std	Z+1, r25	; 0x01
    7cec:	80 83       	st	Z, r24
    7cee:	f3 01       	movw	r30, r6
    7cf0:	80 81       	ld	r24, Z
    7cf2:	91 81       	ldd	r25, Z+1	; 0x01
	if (*pwmLeft<-(MAX_MOTORS_PWM/2)) *pwmLeft=-(MAX_MOTORS_PWM/2);
    7cf4:	fe ef       	ldi	r31, 0xFE	; 254
    7cf6:	80 30       	cpi	r24, 0x00	; 0
    7cf8:	9f 07       	cpc	r25, r31
    7cfa:	2c f4       	brge	.+10     	; 0x7d06 <obstacleAvoidance+0x2f2>
    7cfc:	80 e0       	ldi	r24, 0x00	; 0
    7cfe:	9e ef       	ldi	r25, 0xFE	; 254
    7d00:	f3 01       	movw	r30, r6
    7d02:	91 83       	std	Z+1, r25	; 0x01
    7d04:	80 83       	st	Z, r24

}
    7d06:	28 96       	adiw	r28, 0x08	; 8
    7d08:	0f b6       	in	r0, 0x3f	; 63
    7d0a:	f8 94       	cli
    7d0c:	de bf       	out	0x3e, r29	; 62
    7d0e:	0f be       	out	0x3f, r0	; 63
    7d10:	cd bf       	out	0x3d, r28	; 61
    7d12:	cf 91       	pop	r28
    7d14:	df 91       	pop	r29
    7d16:	1f 91       	pop	r17
    7d18:	0f 91       	pop	r16
    7d1a:	ff 90       	pop	r15
    7d1c:	ef 90       	pop	r14
    7d1e:	df 90       	pop	r13
    7d20:	cf 90       	pop	r12
    7d22:	bf 90       	pop	r11
    7d24:	af 90       	pop	r10
    7d26:	9f 90       	pop	r9
    7d28:	8f 90       	pop	r8
    7d2a:	7f 90       	pop	r7
    7d2c:	6f 90       	pop	r6
    7d2e:	5f 90       	pop	r5
    7d30:	4f 90       	pop	r4
    7d32:	3f 90       	pop	r3
    7d34:	2f 90       	pop	r2
    7d36:	08 95       	ret
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	}

	if(currentSelector == 10) {	// force a little bit the upwards direction in vertical motion
		if(desL!=0 && desR!=0) {
    7d38:	2b 81       	ldd	r18, Y+3	; 0x03
    7d3a:	3c 81       	ldd	r19, Y+4	; 0x04
    7d3c:	21 15       	cp	r18, r1
    7d3e:	31 05       	cpc	r19, r1
    7d40:	f1 f0       	breq	.+60     	; 0x7d7e <obstacleAvoidance+0x36a>
    7d42:	2d 81       	ldd	r18, Y+5	; 0x05
    7d44:	3e 81       	ldd	r19, Y+6	; 0x06
    7d46:	21 15       	cp	r18, r1
    7d48:	31 05       	cpc	r19, r1
    7d4a:	c9 f0       	breq	.+50     	; 0x7d7e <obstacleAvoidance+0x36a>
			if(currentAngle<270 && currentAngle>90) {
    7d4c:	80 91 4e 04 	lds	r24, 0x044E
    7d50:	90 91 4f 04 	lds	r25, 0x044F
    7d54:	8b 55       	subi	r24, 0x5B	; 91
    7d56:	90 40       	sbci	r25, 0x00	; 0
    7d58:	83 3b       	cpi	r24, 0xB3	; 179
    7d5a:	91 05       	cpc	r25, r1
    7d5c:	08 f0       	brcs	.+2      	; 0x7d60 <obstacleAvoidance+0x34c>
    7d5e:	5f c0       	rjmp	.+190    	; 0x7e1e <obstacleAvoidance+0x40a>
				*pwmLeft += 10;
    7d60:	f3 01       	movw	r30, r6
    7d62:	80 81       	ld	r24, Z
    7d64:	91 81       	ldd	r25, Z+1	; 0x01
    7d66:	0a 96       	adiw	r24, 0x0a	; 10
    7d68:	91 83       	std	Z+1, r25	; 0x01
    7d6a:	80 83       	st	Z, r24
				*pwmRight -= 10;
    7d6c:	e9 81       	ldd	r30, Y+1	; 0x01
    7d6e:	fa 81       	ldd	r31, Y+2	; 0x02
    7d70:	20 81       	ld	r18, Z
    7d72:	31 81       	ldd	r19, Z+1	; 0x01
    7d74:	2a 50       	subi	r18, 0x0A	; 10
    7d76:	30 40       	sbci	r19, 0x00	; 0
    7d78:	31 83       	std	Z+1, r19	; 0x01
    7d7a:	20 83       	st	Z, r18
    7d7c:	92 cf       	rjmp	.-220    	; 0x7ca2 <obstacleAvoidance+0x28e>
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	}

	if(currentSelector == 10) {	// force a little bit the upwards direction in vertical motion
		if(desL!=0 && desR!=0) {
    7d7e:	e9 81       	ldd	r30, Y+1	; 0x01
    7d80:	fa 81       	ldd	r31, Y+2	; 0x02
    7d82:	20 81       	ld	r18, Z
    7d84:	31 81       	ldd	r19, Z+1	; 0x01
    7d86:	8d cf       	rjmp	.-230    	; 0x7ca2 <obstacleAvoidance+0x28e>
	}
	if(desR >=0) {
		res = (signed long int)desR + (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	} else {
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
    7d88:	59 01       	movw	r10, r18
    7d8a:	cc 24       	eor	r12, r12
    7d8c:	b7 fc       	sbrc	r11, 7
    7d8e:	c0 94       	com	r12
    7d90:	dc 2c       	mov	r13, r12
    7d92:	c2 01       	movw	r24, r4
    7d94:	b1 01       	movw	r22, r2
    7d96:	6e 19       	sub	r22, r14
    7d98:	7f 09       	sbc	r23, r15
    7d9a:	80 0b       	sbc	r24, r16
    7d9c:	91 0b       	sbc	r25, r17
    7d9e:	a6 01       	movw	r20, r12
    7da0:	95 01       	movw	r18, r10
    7da2:	0e 94 24 57 	call	0xae48	; 0xae48 <__mulsi3>
    7da6:	e6 e0       	ldi	r30, 0x06	; 6
    7da8:	95 95       	asr	r25
    7daa:	87 95       	ror	r24
    7dac:	77 95       	ror	r23
    7dae:	67 95       	ror	r22
    7db0:	ea 95       	dec	r30
    7db2:	d1 f7       	brne	.-12     	; 0x7da8 <obstacleAvoidance+0x394>
    7db4:	26 1b       	sub	r18, r22
    7db6:	37 0b       	sbc	r19, r23
    7db8:	48 0b       	sbc	r20, r24
    7dba:	59 0b       	sbc	r21, r25
    7dbc:	da 01       	movw	r26, r20
    7dbe:	c9 01       	movw	r24, r18
		*pwmRight = (signed int)res;
    7dc0:	e9 81       	ldd	r30, Y+1	; 0x01
    7dc2:	fa 81       	ldd	r31, Y+2	; 0x02
    7dc4:	91 83       	std	Z+1, r25	; 0x01
    7dc6:	80 83       	st	Z, r24
    7dc8:	67 cf       	rjmp	.-306    	; 0x7c98 <obstacleAvoidance+0x284>
	// modify the velocity components based on sensor values
	if(desL >= 0) {
		res = (signed long int)desL + (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmLeft = (signed int)res;
	} else {
		res = (signed long int)desL - (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
    7dca:	5a 01       	movw	r10, r20
    7dcc:	cc 24       	eor	r12, r12
    7dce:	b7 fc       	sbrc	r11, 7
    7dd0:	c0 94       	com	r12
    7dd2:	dc 2c       	mov	r13, r12
    7dd4:	8f 81       	ldd	r24, Y+7	; 0x07
    7dd6:	98 85       	ldd	r25, Y+8	; 0x08
    7dd8:	1c 01       	movw	r2, r24
    7dda:	44 24       	eor	r4, r4
    7ddc:	37 fc       	sbrc	r3, 7
    7dde:	40 94       	com	r4
    7de0:	54 2c       	mov	r5, r4
    7de2:	79 01       	movw	r14, r18
    7de4:	00 27       	eor	r16, r16
    7de6:	f7 fc       	sbrc	r15, 7
    7de8:	00 95       	com	r16
    7dea:	10 2f       	mov	r17, r16
    7dec:	c8 01       	movw	r24, r16
    7dee:	b7 01       	movw	r22, r14
    7df0:	62 0d       	add	r22, r2
    7df2:	73 1d       	adc	r23, r3
    7df4:	84 1d       	adc	r24, r4
    7df6:	95 1d       	adc	r25, r5
    7df8:	a6 01       	movw	r20, r12
    7dfa:	95 01       	movw	r18, r10
    7dfc:	0e 94 24 57 	call	0xae48	; 0xae48 <__mulsi3>
    7e00:	a6 e0       	ldi	r26, 0x06	; 6
    7e02:	95 95       	asr	r25
    7e04:	87 95       	ror	r24
    7e06:	77 95       	ror	r23
    7e08:	67 95       	ror	r22
    7e0a:	aa 95       	dec	r26
    7e0c:	d1 f7       	brne	.-12     	; 0x7e02 <obstacleAvoidance+0x3ee>
    7e0e:	26 1b       	sub	r18, r22
    7e10:	37 0b       	sbc	r19, r23
    7e12:	48 0b       	sbc	r20, r24
    7e14:	59 0b       	sbc	r21, r25
		*pwmLeft = (signed int)res;
    7e16:	f3 01       	movw	r30, r6
    7e18:	31 83       	std	Z+1, r19	; 0x01
    7e1a:	20 83       	st	Z, r18
    7e1c:	1a cf       	rjmp	.-460    	; 0x7c52 <obstacleAvoidance+0x23e>
		if(desL!=0 && desR!=0) {
			if(currentAngle<270 && currentAngle>90) {
				*pwmLeft += 10;
				*pwmRight -= 10;
			} else {
				*pwmLeft -= 10;
    7e1e:	f3 01       	movw	r30, r6
    7e20:	80 81       	ld	r24, Z
    7e22:	91 81       	ldd	r25, Z+1	; 0x01
    7e24:	0a 97       	sbiw	r24, 0x0a	; 10
    7e26:	91 83       	std	Z+1, r25	; 0x01
    7e28:	80 83       	st	Z, r24
				*pwmRight += 10;
    7e2a:	e9 81       	ldd	r30, Y+1	; 0x01
    7e2c:	fa 81       	ldd	r31, Y+2	; 0x02
    7e2e:	20 81       	ld	r18, Z
    7e30:	31 81       	ldd	r19, Z+1	; 0x01
    7e32:	26 5f       	subi	r18, 0xF6	; 246
    7e34:	3f 4f       	sbci	r19, 0xFF	; 255
    7e36:	31 83       	std	Z+1, r19	; 0x01
    7e38:	20 83       	st	Z, r18
    7e3a:	33 cf       	rjmp	.-410    	; 0x7ca2 <obstacleAvoidance+0x28e>

00007e3c <cliffDetected>:


char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    7e3c:	80 91 79 02 	lds	r24, 0x0279
    7e40:	90 91 7a 02 	lds	r25, 0x027A
    7e44:	21 e0       	ldi	r18, 0x01	; 1
    7e46:	84 3a       	cpi	r24, 0xA4	; 164
    7e48:	92 07       	cpc	r25, r18
    7e4a:	d4 f0       	brlt	.+52     	; 0x7e80 <cliffDetected+0x44>
    7e4c:	80 91 7b 02 	lds	r24, 0x027B
    7e50:	90 91 7c 02 	lds	r25, 0x027C
    7e54:	21 e0       	ldi	r18, 0x01	; 1
    7e56:	84 3a       	cpi	r24, 0xA4	; 164
    7e58:	92 07       	cpc	r25, r18
    7e5a:	94 f0       	brlt	.+36     	; 0x7e80 <cliffDetected+0x44>
    7e5c:	80 91 7d 02 	lds	r24, 0x027D
    7e60:	90 91 7e 02 	lds	r25, 0x027E
    7e64:	21 e0       	ldi	r18, 0x01	; 1
    7e66:	84 3a       	cpi	r24, 0xA4	; 164
    7e68:	92 07       	cpc	r25, r18
    7e6a:	74 f0       	brlt	.+28     	; 0x7e88 <cliffDetected+0x4c>
	//if(proximityResult[8]<(proximityOffset[8]>>1) || proximityResult[9]<(proximityOffset[9]>>1) || proximityResult[10]<(proximityOffset[10]>>1) || proximityResult[11]<(proximityOffset[11]>>1)) {
		return 1;
    7e6c:	81 e0       	ldi	r24, 0x01	; 1
    7e6e:	20 91 7f 02 	lds	r18, 0x027F
    7e72:	30 91 80 02 	lds	r19, 0x0280
    7e76:	91 e0       	ldi	r25, 0x01	; 1
    7e78:	24 3a       	cpi	r18, 0xA4	; 164
    7e7a:	39 07       	cpc	r19, r25
    7e7c:	1c f4       	brge	.+6      	; 0x7e84 <cliffDetected+0x48>
	} else {
		return 0;
	}


}
    7e7e:	08 95       	ret
char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
	//if(proximityResult[8]<(proximityOffset[8]>>1) || proximityResult[9]<(proximityOffset[9]>>1) || proximityResult[10]<(proximityOffset[10]>>1) || proximityResult[11]<(proximityOffset[11]>>1)) {
		return 1;
    7e80:	81 e0       	ldi	r24, 0x01	; 1
    7e82:	08 95       	ret
    7e84:	80 e0       	ldi	r24, 0x00	; 0
    7e86:	08 95       	ret
    7e88:	81 e0       	ldi	r24, 0x01	; 1
	} else {
		return 0;
	}


}
    7e8a:	08 95       	ret

00007e8c <enableObstacleAvoidance>:

void enableObstacleAvoidance() {
	obstacleAvoidanceEnabled=1;
    7e8c:	81 e0       	ldi	r24, 0x01	; 1
    7e8e:	80 93 7c 04 	sts	0x047C, r24
}
    7e92:	08 95       	ret

00007e94 <disableObstacleAvoidance>:

void disableObstacleAvoidance() {
	obstacleAvoidanceEnabled=0;
    7e94:	10 92 7c 04 	sts	0x047C, r1
}
    7e98:	08 95       	ret

00007e9a <enableCliffAvoidance>:

void enableCliffAvoidance() {
	cliffAvoidanceEnabled=1;
    7e9a:	81 e0       	ldi	r24, 0x01	; 1
    7e9c:	80 93 7d 04 	sts	0x047D, r24
}
    7ea0:	08 95       	ret

00007ea2 <disableCliffAvoidance>:

void disableCliffAvoidance() {
	cliffAvoidanceEnabled=0;
    7ea2:	10 92 7d 04 	sts	0x047D, r1
}
    7ea6:	08 95       	ret

00007ea8 <initRGBleds>:
	// Period freq = Fosc/TOP (max timer value) => TOP = Fosc/period freq
	// We need a frequency of about 30 KHz => 8000000/30000 = 266
	// The waveform generation mode let us chose the TOP value to be 256
	// thus we get period freq = 8000000/256 = 31250 Hz

	TCCR1A = 0;
    7ea8:	a0 e8       	ldi	r26, 0x80	; 128
    7eaa:	b0 e0       	ldi	r27, 0x00	; 0
    7eac:	1c 92       	st	X, r1
	TCCR1B = 0;
    7eae:	e1 e8       	ldi	r30, 0x81	; 129
    7eb0:	f0 e0       	ldi	r31, 0x00	; 0
    7eb2:	10 82       	st	Z, r1

	// enable OCA, OCB, OCC; clear on match, set at bottom
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << COM1C1) | (1 << WGM10); 	
    7eb4:	8c 91       	ld	r24, X
    7eb6:	89 6a       	ori	r24, 0xA9	; 169
    7eb8:	8c 93       	st	X, r24
	// mode 5 => fast-pwm 8 bit; no prescaler
	TCCR1B |= (1 << WGM12) | (1 << CS10);										
    7eba:	80 81       	ld	r24, Z
    7ebc:	89 60       	ori	r24, 0x09	; 9
    7ebe:	80 83       	st	Z, r24
	// the values for the leds pwm goes from 0 (max power on) to 255 (off)
	OCR1A = pwm_red;
    7ec0:	80 91 0c 02 	lds	r24, 0x020C
    7ec4:	90 e0       	ldi	r25, 0x00	; 0
    7ec6:	90 93 89 00 	sts	0x0089, r25
    7eca:	80 93 88 00 	sts	0x0088, r24
	OCR1B = pwm_green;
    7ece:	80 91 0d 02 	lds	r24, 0x020D
    7ed2:	90 e0       	ldi	r25, 0x00	; 0
    7ed4:	90 93 8b 00 	sts	0x008B, r25
    7ed8:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = pwm_blue;
    7edc:	80 91 0e 02 	lds	r24, 0x020E
    7ee0:	90 e0       	ldi	r25, 0x00	; 0
    7ee2:	90 93 8d 00 	sts	0x008D, r25
    7ee6:	80 93 8c 00 	sts	0x008C, r24

}
    7eea:	08 95       	ret

00007eec <toggleBlueLed>:

void toggleBlueLed() {

	blinkState = 1 - blinkState;
    7eec:	81 e0       	ldi	r24, 0x01	; 1
    7eee:	90 91 2b 03 	lds	r25, 0x032B
    7ef2:	89 1b       	sub	r24, r25
    7ef4:	80 93 2b 03 	sts	0x032B, r24

	if(blinkState) {
    7ef8:	88 23       	and	r24, r24
    7efa:	39 f4       	brne	.+14     	; 0x7f0a <toggleBlueLed+0x1e>
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
		OCR1C = 255;
	} else {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC to get the maximum output power; this is due to the fact 
    7efc:	80 91 80 00 	lds	r24, 0x0080
    7f00:	87 7f       	andi	r24, 0xF7	; 247
    7f02:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// that the minimum duty cycle when the output compare is enable is 1 
    7f06:	2f 98       	cbi	0x05, 7	; 5
    7f08:	08 95       	ret
void toggleBlueLed() {

	blinkState = 1 - blinkState;

	if(blinkState) {
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
    7f0a:	80 91 80 00 	lds	r24, 0x0080
    7f0e:	88 60       	ori	r24, 0x08	; 8
    7f10:	80 93 80 00 	sts	0x0080, r24
		OCR1C = 255;
    7f14:	8f ef       	ldi	r24, 0xFF	; 255
    7f16:	90 e0       	ldi	r25, 0x00	; 0
    7f18:	90 93 8d 00 	sts	0x008D, r25
    7f1c:	80 93 8c 00 	sts	0x008C, r24
    7f20:	08 95       	ret

00007f22 <updateRedLed>:

}

void updateRedLed(unsigned char value) {

	if(value == 0) {
    7f22:	88 23       	and	r24, r24
    7f24:	59 f0       	breq	.+22     	; 0x7f3c <updateRedLed+0x1a>
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1A1);	// always enable OCA in case it was disabled
    7f26:	90 91 80 00 	lds	r25, 0x0080
    7f2a:	90 68       	ori	r25, 0x80	; 128
    7f2c:	90 93 80 00 	sts	0x0080, r25
		OCR1A = value;
    7f30:	90 e0       	ldi	r25, 0x00	; 0
    7f32:	90 93 89 00 	sts	0x0089, r25
    7f36:	80 93 88 00 	sts	0x0088, r24
    7f3a:	08 95       	ret
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
    7f3c:	80 91 80 00 	lds	r24, 0x0080
    7f40:	8f 77       	andi	r24, 0x7F	; 127
    7f42:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
    7f46:	2d 98       	cbi	0x05, 5	; 5
    7f48:	08 95       	ret

00007f4a <updateGreenLed>:

}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
    7f4a:	88 23       	and	r24, r24
    7f4c:	59 f0       	breq	.+22     	; 0x7f64 <updateGreenLed+0x1a>
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
	} else {	
		TCCR1A |= (1 << COM1B1);	// always enable OCA in case it was disabled
    7f4e:	90 91 80 00 	lds	r25, 0x0080
    7f52:	90 62       	ori	r25, 0x20	; 32
    7f54:	90 93 80 00 	sts	0x0080, r25
		OCR1B = value;
    7f58:	90 e0       	ldi	r25, 0x00	; 0
    7f5a:	90 93 8b 00 	sts	0x008B, r25
    7f5e:	80 93 8a 00 	sts	0x008A, r24
    7f62:	08 95       	ret
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
    7f64:	80 91 80 00 	lds	r24, 0x0080
    7f68:	8f 7d       	andi	r24, 0xDF	; 223
    7f6a:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
    7f6e:	2e 98       	cbi	0x05, 6	; 5
    7f70:	08 95       	ret

00007f72 <updateBlueLed>:

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
    7f72:	88 23       	and	r24, r24
    7f74:	59 f0       	breq	.+22     	; 0x7f8c <updateBlueLed+0x1a>
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1C1);	// always enable OCA in case it was disabled
    7f76:	90 91 80 00 	lds	r25, 0x0080
    7f7a:	98 60       	ori	r25, 0x08	; 8
    7f7c:	90 93 80 00 	sts	0x0080, r25
		OCR1C = value;
    7f80:	90 e0       	ldi	r25, 0x00	; 0
    7f82:	90 93 8d 00 	sts	0x008D, r25
    7f86:	80 93 8c 00 	sts	0x008C, r24
    7f8a:	08 95       	ret
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
    7f8c:	80 91 80 00 	lds	r24, 0x0080
    7f90:	87 7f       	andi	r24, 0xF7	; 247
    7f92:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
    7f96:	2f 98       	cbi	0x05, 7	; 5
    7f98:	08 95       	ret

00007f9a <setGreenLed>:

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    7f9a:	83 30       	cpi	r24, 0x03	; 3
    7f9c:	09 f4       	brne	.+2      	; 0x7fa0 <setGreenLed+0x6>
    7f9e:	5a c0       	rjmp	.+180    	; 0x8054 <setGreenLed+0xba>
    7fa0:	84 30       	cpi	r24, 0x04	; 4
    7fa2:	80 f0       	brcs	.+32     	; 0x7fc4 <setGreenLed+0x2a>
    7fa4:	85 30       	cpi	r24, 0x05	; 5
    7fa6:	09 f4       	brne	.+2      	; 0x7faa <setGreenLed+0x10>
    7fa8:	41 c0       	rjmp	.+130    	; 0x802c <setGreenLed+0x92>
    7faa:	85 30       	cpi	r24, 0x05	; 5
    7fac:	d0 f4       	brcc	.+52     	; 0x7fe2 <setGreenLed+0x48>
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
    7fae:	66 23       	and	r22, r22
    7fb0:	09 f4       	brne	.+2      	; 0x7fb4 <setGreenLed+0x1a>
    7fb2:	68 c0       	rjmp	.+208    	; 0x8084 <setGreenLed+0xea>
    7fb4:	80 91 0b 01 	lds	r24, 0x010B
    7fb8:	8f 7e       	andi	r24, 0xEF	; 239
    7fba:	80 93 0b 01 	sts	0x010B, r24
    7fbe:	80 91 0b 01 	lds	r24, 0x010B
    7fc2:	08 95       	ret

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    7fc4:	81 30       	cpi	r24, 0x01	; 1
    7fc6:	e1 f1       	breq	.+120    	; 0x8040 <setGreenLed+0xa6>
    7fc8:	82 30       	cpi	r24, 0x02	; 2
    7fca:	80 f0       	brcs	.+32     	; 0x7fec <setGreenLed+0x52>
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
    7fcc:	66 23       	and	r22, r22
    7fce:	09 f4       	brne	.+2      	; 0x7fd2 <setGreenLed+0x38>
    7fd0:	46 c0       	rjmp	.+140    	; 0x805e <setGreenLed+0xc4>
    7fd2:	80 91 0b 01 	lds	r24, 0x010B
    7fd6:	8b 7f       	andi	r24, 0xFB	; 251
    7fd8:	80 93 0b 01 	sts	0x010B, r24
    7fdc:	80 91 0b 01 	lds	r24, 0x010B
    7fe0:	08 95       	ret

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    7fe2:	86 30       	cpi	r24, 0x06	; 6
    7fe4:	c9 f0       	breq	.+50     	; 0x8018 <setGreenLed+0x7e>
    7fe6:	87 30       	cpi	r24, 0x07	; 7
    7fe8:	61 f0       	breq	.+24     	; 0x8002 <setGreenLed+0x68>
    7fea:	08 95       	ret

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
    7fec:	66 23       	and	r22, r22
    7fee:	09 f4       	brne	.+2      	; 0x7ff2 <setGreenLed+0x58>
    7ff0:	51 c0       	rjmp	.+162    	; 0x8094 <setGreenLed+0xfa>
    7ff2:	80 91 0b 01 	lds	r24, 0x010B
    7ff6:	8e 7f       	andi	r24, 0xFE	; 254
    7ff8:	80 93 0b 01 	sts	0x010B, r24
    7ffc:	80 91 0b 01 	lds	r24, 0x010B
    8000:	08 95       	ret
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
				break;

		case 7:	isOn?GREEN_LED7_ON:GREEN_LED7_OFF;
    8002:	66 23       	and	r22, r22
    8004:	09 f0       	breq	.+2      	; 0x8008 <setGreenLed+0x6e>
    8006:	5e c0       	rjmp	.+188    	; 0x80c4 <setGreenLed+0x12a>
    8008:	80 91 0b 01 	lds	r24, 0x010B
    800c:	80 68       	ori	r24, 0x80	; 128
    800e:	80 93 0b 01 	sts	0x010B, r24
    8012:	80 91 0b 01 	lds	r24, 0x010B
    8016:	08 95       	ret
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
    8018:	66 23       	and	r22, r22
    801a:	49 f1       	breq	.+82     	; 0x806e <setGreenLed+0xd4>
    801c:	80 91 0b 01 	lds	r24, 0x010B
    8020:	8f 7b       	andi	r24, 0xBF	; 191
    8022:	80 93 0b 01 	sts	0x010B, r24
    8026:	80 91 0b 01 	lds	r24, 0x010B
    802a:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
    802c:	66 23       	and	r22, r22
    802e:	d1 f1       	breq	.+116    	; 0x80a4 <setGreenLed+0x10a>
    8030:	80 91 0b 01 	lds	r24, 0x010B
    8034:	8f 7d       	andi	r24, 0xDF	; 223
    8036:	80 93 0b 01 	sts	0x010B, r24
    803a:	80 91 0b 01 	lds	r24, 0x010B
    803e:	08 95       	ret
	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
    8040:	66 23       	and	r22, r22
    8042:	c1 f1       	breq	.+112    	; 0x80b4 <setGreenLed+0x11a>
    8044:	80 91 0b 01 	lds	r24, 0x010B
    8048:	8d 7f       	andi	r24, 0xFD	; 253
    804a:	80 93 0b 01 	sts	0x010B, r24
    804e:	80 91 0b 01 	lds	r24, 0x010B
    8052:	08 95       	ret
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
    8054:	66 23       	and	r22, r22
    8056:	99 f0       	breq	.+38     	; 0x807e <setGreenLed+0xe4>
    8058:	a3 98       	cbi	0x14, 3	; 20
    805a:	84 b3       	in	r24, 0x14	; 20
    805c:	08 95       	ret
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
    805e:	80 91 0b 01 	lds	r24, 0x010B
    8062:	84 60       	ori	r24, 0x04	; 4
    8064:	80 93 0b 01 	sts	0x010B, r24
    8068:	80 91 0b 01 	lds	r24, 0x010B
    806c:	08 95       	ret
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
    806e:	80 91 0b 01 	lds	r24, 0x010B
    8072:	80 64       	ori	r24, 0x40	; 64
    8074:	80 93 0b 01 	sts	0x010B, r24
    8078:	80 91 0b 01 	lds	r24, 0x010B
    807c:	08 95       	ret
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
    807e:	a3 9a       	sbi	0x14, 3	; 20
    8080:	84 b3       	in	r24, 0x14	; 20
    8082:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
    8084:	80 91 0b 01 	lds	r24, 0x010B
    8088:	80 61       	ori	r24, 0x10	; 16
    808a:	80 93 0b 01 	sts	0x010B, r24
    808e:	80 91 0b 01 	lds	r24, 0x010B
    8092:	08 95       	ret

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
    8094:	80 91 0b 01 	lds	r24, 0x010B
    8098:	81 60       	ori	r24, 0x01	; 1
    809a:	80 93 0b 01 	sts	0x010B, r24
    809e:	80 91 0b 01 	lds	r24, 0x010B
    80a2:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
    80a4:	80 91 0b 01 	lds	r24, 0x010B
    80a8:	80 62       	ori	r24, 0x20	; 32
    80aa:	80 93 0b 01 	sts	0x010B, r24
    80ae:	80 91 0b 01 	lds	r24, 0x010B
    80b2:	08 95       	ret
	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
    80b4:	80 91 0b 01 	lds	r24, 0x010B
    80b8:	82 60       	ori	r24, 0x02	; 2
    80ba:	80 93 0b 01 	sts	0x010B, r24
    80be:	80 91 0b 01 	lds	r24, 0x010B
    80c2:	08 95       	ret
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
				break;

		case 7:	isOn?GREEN_LED7_ON:GREEN_LED7_OFF;
    80c4:	80 91 0b 01 	lds	r24, 0x010B
    80c8:	8f 77       	andi	r24, 0x7F	; 127
    80ca:	80 93 0b 01 	sts	0x010B, r24
    80ce:	80 91 0b 01 	lds	r24, 0x010B
    80d2:	08 95       	ret

000080d4 <turnOffGreenLeds>:

}

void turnOffGreenLeds() {

	GREEN_LED0_OFF;
    80d4:	eb e0       	ldi	r30, 0x0B	; 11
    80d6:	f1 e0       	ldi	r31, 0x01	; 1
    80d8:	80 81       	ld	r24, Z
    80da:	81 60       	ori	r24, 0x01	; 1
    80dc:	80 83       	st	Z, r24
	GREEN_LED1_OFF;
    80de:	80 81       	ld	r24, Z
    80e0:	82 60       	ori	r24, 0x02	; 2
    80e2:	80 83       	st	Z, r24
	GREEN_LED2_OFF;
    80e4:	80 81       	ld	r24, Z
    80e6:	84 60       	ori	r24, 0x04	; 4
    80e8:	80 83       	st	Z, r24
	GREEN_LED3_OFF;
    80ea:	a3 9a       	sbi	0x14, 3	; 20
	GREEN_LED4_OFF;
    80ec:	80 81       	ld	r24, Z
    80ee:	80 61       	ori	r24, 0x10	; 16
    80f0:	80 83       	st	Z, r24
	GREEN_LED5_OFF;
    80f2:	80 81       	ld	r24, Z
    80f4:	80 62       	ori	r24, 0x20	; 32
    80f6:	80 83       	st	Z, r24
	GREEN_LED6_OFF;
    80f8:	80 81       	ld	r24, Z
    80fa:	80 64       	ori	r24, 0x40	; 64
    80fc:	80 83       	st	Z, r24
	GREEN_LED7_OFF;
    80fe:	80 81       	ld	r24, Z
    8100:	80 68       	ori	r24, 0x80	; 128
    8102:	80 83       	st	Z, r24

}
    8104:	08 95       	ret

00008106 <turnOnGreenLeds>:


void turnOnGreenLeds() {

	GREEN_LED0_ON;
    8106:	eb e0       	ldi	r30, 0x0B	; 11
    8108:	f1 e0       	ldi	r31, 0x01	; 1
    810a:	80 81       	ld	r24, Z
    810c:	8e 7f       	andi	r24, 0xFE	; 254
    810e:	80 83       	st	Z, r24
	GREEN_LED1_ON;
    8110:	80 81       	ld	r24, Z
    8112:	8d 7f       	andi	r24, 0xFD	; 253
    8114:	80 83       	st	Z, r24
	GREEN_LED2_ON;
    8116:	80 81       	ld	r24, Z
    8118:	8b 7f       	andi	r24, 0xFB	; 251
    811a:	80 83       	st	Z, r24
	GREEN_LED3_ON;
    811c:	a3 98       	cbi	0x14, 3	; 20
	GREEN_LED4_ON;
    811e:	80 81       	ld	r24, Z
    8120:	8f 7e       	andi	r24, 0xEF	; 239
    8122:	80 83       	st	Z, r24
	GREEN_LED5_ON;
    8124:	80 81       	ld	r24, Z
    8126:	8f 7d       	andi	r24, 0xDF	; 223
    8128:	80 83       	st	Z, r24
	GREEN_LED6_ON;
    812a:	80 81       	ld	r24, Z
    812c:	8f 7b       	andi	r24, 0xBF	; 191
    812e:	80 83       	st	Z, r24
	GREEN_LED7_ON;
    8130:	80 81       	ld	r24, Z
    8132:	8f 77       	andi	r24, 0x7F	; 127
    8134:	80 83       	st	Z, r24

}
    8136:	08 95       	ret

00008138 <initAccelerometer>:

void initAccelerometer() {

	unsigned char ret;

	i2c_init();		// init I2C bus
    8138:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <i2c_init>
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    813c:	80 91 14 02 	lds	r24, 0x0214
    8140:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    8144:	88 23       	and	r24, r24
    8146:	49 f4       	brne	.+18     	; 0x815a <initAccelerometer+0x22>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    8148:	86 e1       	ldi	r24, 0x16	; 22
    814a:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    814e:	85 e4       	ldi	r24, 0x45	; 69
    8150:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    8154:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <i2c_stop>
    8158:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    815a:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <i2c_stop>
	i2c_init();		// init I2C bus

	ret = initMMA7455L();

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
    815e:	86 ea       	ldi	r24, 0xA6	; 166
    8160:	90 e0       	ldi	r25, 0x00	; 0
    8162:	90 93 15 02 	sts	0x0215, r25
    8166:	80 93 14 02 	sts	0x0214, r24
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    816a:	86 ea       	ldi	r24, 0xA6	; 166
    816c:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    8170:	88 23       	and	r24, r24
    8172:	41 f5       	brne	.+80     	; 0x81c4 <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    8174:	8d e2       	ldi	r24, 0x2D	; 45
    8176:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <i2c_write>
        i2c_write(0x08);	// measurement mode
    817a:	88 e0       	ldi	r24, 0x08	; 8
    817c:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    8180:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    8184:	80 91 14 02 	lds	r24, 0x0214
    8188:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    818c:	88 23       	and	r24, r24
    818e:	d1 f4       	brne	.+52     	; 0x81c4 <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    8190:	81 e3       	ldi	r24, 0x31	; 49
    8192:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    8196:	80 e0       	ldi	r24, 0x00	; 0
    8198:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    819c:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    81a0:	80 91 14 02 	lds	r24, 0x0214
    81a4:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    81a8:	88 23       	and	r24, r24
    81aa:	61 f4       	brne	.+24     	; 0x81c4 <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    81ac:	8c e2       	ldi	r24, 0x2C	; 44
    81ae:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    81b2:	89 e0       	ldi	r24, 0x09	; 9
    81b4:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    81b8:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <i2c_stop>
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
		} else {
			useAccel = USE_ADXL345;
    81bc:	81 e0       	ldi	r24, 0x01	; 1
    81be:	80 93 3b 04 	sts	0x043B, r24
    81c2:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    81c4:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <i2c_stop>

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
    81c8:	82 e0       	ldi	r24, 0x02	; 2
    81ca:	80 93 3b 04 	sts	0x043B, r24
    81ce:	08 95       	ret

000081d0 <initMMA7455L>:
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    81d0:	80 91 14 02 	lds	r24, 0x0214
    81d4:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    81d8:	88 23       	and	r24, r24
    81da:	51 f4       	brne	.+20     	; 0x81f0 <initMMA7455L+0x20>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    81dc:	86 e1       	ldi	r24, 0x16	; 22
    81de:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    81e2:	85 e4       	ldi	r24, 0x45	; 69
    81e4:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    81e8:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <i2c_stop>
    }

	return 0;				// configuration ok
    81ec:	80 e0       	ldi	r24, 0x00	; 0

}
    81ee:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    81f0:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <i2c_stop>
		return 1;
    81f4:	81 e0       	ldi	r24, 0x01	; 1
    81f6:	08 95       	ret

000081f8 <initADXL345>:
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    81f8:	80 91 14 02 	lds	r24, 0x0214
    81fc:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    8200:	88 23       	and	r24, r24
    8202:	31 f5       	brne	.+76     	; 0x8250 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    8204:	8d e2       	ldi	r24, 0x2D	; 45
    8206:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <i2c_write>
        i2c_write(0x08);	// measurement mode
    820a:	88 e0       	ldi	r24, 0x08	; 8
    820c:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    8210:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    8214:	80 91 14 02 	lds	r24, 0x0214
    8218:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    821c:	88 23       	and	r24, r24
    821e:	c1 f4       	brne	.+48     	; 0x8250 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    8220:	81 e3       	ldi	r24, 0x31	; 49
    8222:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    8226:	80 e0       	ldi	r24, 0x00	; 0
    8228:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    822c:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    8230:	80 91 14 02 	lds	r24, 0x0214
    8234:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    8238:	88 23       	and	r24, r24
    823a:	51 f4       	brne	.+20     	; 0x8250 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    823c:	8c e2       	ldi	r24, 0x2C	; 44
    823e:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    8242:	89 e0       	ldi	r24, 0x09	; 9
    8244:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    8248:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <i2c_stop>
    }

	return 0;
    824c:	80 e0       	ldi	r24, 0x00	; 0

}
    824e:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    8250:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <i2c_stop>
		return 1;
    8254:	81 e0       	ldi	r24, 0x01	; 1
    8256:	08 95       	ret

00008258 <readAccelXY>:

	return 0;

}

void readAccelXY() {
    8258:	ff 92       	push	r15
    825a:	0f 93       	push	r16
    825c:	1f 93       	push	r17
    825e:	df 93       	push	r29
    8260:	cf 93       	push	r28
    8262:	0f 92       	push	r0
    8264:	cd b7       	in	r28, 0x3d	; 61
    8266:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[4];

	if(useAccel == USE_MMAX7455L) {
    8268:	80 91 3b 04 	lds	r24, 0x043B
    826c:	88 23       	and	r24, r24
    826e:	91 f0       	breq	.+36     	; 0x8294 <readAccelXY+0x3c>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else if(useAccel == USE_ADXL345) {
    8270:	81 30       	cpi	r24, 0x01	; 1
    8272:	09 f4       	brne	.+2      	; 0x8276 <readAccelXY+0x1e>
    8274:	88 c0       	rjmp	.+272    	; 0x8386 <readAccelXY+0x12e>
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else {

		accX = 0;
    8276:	10 92 3d 04 	sts	0x043D, r1
    827a:	10 92 3c 04 	sts	0x043C, r1
		accY = 0;
    827e:	10 92 3f 04 	sts	0x043F, r1
    8282:	10 92 3e 04 	sts	0x043E, r1

	}

}
    8286:	0f 90       	pop	r0
    8288:	cf 91       	pop	r28
    828a:	df 91       	pop	r29
    828c:	1f 91       	pop	r17
    828e:	0f 91       	pop	r16
    8290:	ff 90       	pop	r15
    8292:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    8294:	80 91 14 02 	lds	r24, 0x0214
    8298:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    829c:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
		i2c_write(0x32);											// sends address to read from (X LSB)
    829e:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    82a2:	80 91 14 02 	lds	r24, 0x0214
    82a6:	8f 5f       	subi	r24, 0xFF	; 255
    82a8:	0e 94 cf 1f 	call	0x3f9e	; 0x3f9e <i2c_rep_start>

		for(i=0; i<3; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    82ac:	0e 94 0f 20 	call	0x401e	; 0x401e <i2c_readAck>
    82b0:	08 2f       	mov	r16, r24
    82b2:	0e 94 0f 20 	call	0x401e	; 0x401e <i2c_readAck>
    82b6:	f8 2e       	mov	r15, r24
    82b8:	0e 94 0f 20 	call	0x401e	; 0x401e <i2c_readAck>
    82bc:	18 2f       	mov	r17, r24
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    82be:	0e 94 19 20 	call	0x4032	; 0x4032 <i2c_readNak>
		i2c_stop();													// set stop conditon = release bus
    82c2:	89 83       	std	Y+1, r24	; 0x01
    82c4:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    82c8:	90 91 82 0b 	lds	r25, 0x0B82
    82cc:	89 81       	ldd	r24, Y+1	; 0x01
    82ce:	99 23       	and	r25, r25
    82d0:	39 f1       	breq	.+78     	; 0x8320 <readAccelXY+0xc8>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    82d2:	4f 2d       	mov	r20, r15
    82d4:	55 27       	eor	r21, r21
    82d6:	47 fd       	sbrc	r20, 7
    82d8:	50 95       	com	r21
    82da:	54 2f       	mov	r21, r20
    82dc:	44 27       	eor	r20, r20
    82de:	60 2f       	mov	r22, r16
    82e0:	77 27       	eor	r23, r23
    82e2:	67 fd       	sbrc	r22, 7
    82e4:	70 95       	com	r23
    82e6:	46 2b       	or	r20, r22
    82e8:	57 2b       	or	r21, r23
    82ea:	50 93 3d 04 	sts	0x043D, r21
    82ee:	40 93 3c 04 	sts	0x043C, r20
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    82f2:	28 2f       	mov	r18, r24
    82f4:	33 27       	eor	r19, r19
    82f6:	27 fd       	sbrc	r18, 7
    82f8:	30 95       	com	r19
    82fa:	32 2f       	mov	r19, r18
    82fc:	22 27       	eor	r18, r18
    82fe:	81 2f       	mov	r24, r17
    8300:	99 27       	eor	r25, r25
    8302:	87 fd       	sbrc	r24, 7
    8304:	90 95       	com	r25
    8306:	28 2b       	or	r18, r24
    8308:	39 2b       	or	r19, r25
    830a:	30 93 3f 04 	sts	0x043F, r19
    830e:	20 93 3e 04 	sts	0x043E, r18
		accX = 0;
		accY = 0;

	}

}
    8312:	0f 90       	pop	r0
    8314:	cf 91       	pop	r28
    8316:	df 91       	pop	r29
    8318:	1f 91       	pop	r17
    831a:	0f 91       	pop	r16
    831c:	ff 90       	pop	r15
    831e:	08 95       	ret

		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    8320:	4f 2d       	mov	r20, r15
    8322:	55 27       	eor	r21, r21
    8324:	47 fd       	sbrc	r20, 7
    8326:	50 95       	com	r21
    8328:	54 2f       	mov	r21, r20
    832a:	44 27       	eor	r20, r20
    832c:	60 2f       	mov	r22, r16
    832e:	77 27       	eor	r23, r23
    8330:	67 fd       	sbrc	r22, 7
    8332:	70 95       	com	r23
    8334:	46 2b       	or	r20, r22
    8336:	57 2b       	or	r21, r23
    8338:	60 91 42 04 	lds	r22, 0x0442
    833c:	70 91 43 04 	lds	r23, 0x0443
    8340:	46 1b       	sub	r20, r22
    8342:	57 0b       	sbc	r21, r23
    8344:	50 93 3d 04 	sts	0x043D, r21
    8348:	40 93 3c 04 	sts	0x043C, r20
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    834c:	28 2f       	mov	r18, r24
    834e:	33 27       	eor	r19, r19
    8350:	27 fd       	sbrc	r18, 7
    8352:	30 95       	com	r19
    8354:	32 2f       	mov	r19, r18
    8356:	22 27       	eor	r18, r18
    8358:	81 2f       	mov	r24, r17
    835a:	99 27       	eor	r25, r25
    835c:	87 fd       	sbrc	r24, 7
    835e:	90 95       	com	r25
    8360:	28 2b       	or	r18, r24
    8362:	39 2b       	or	r19, r25
    8364:	80 91 44 04 	lds	r24, 0x0444
    8368:	90 91 45 04 	lds	r25, 0x0445
    836c:	28 1b       	sub	r18, r24
    836e:	39 0b       	sbc	r19, r25
    8370:	30 93 3f 04 	sts	0x043F, r19
    8374:	20 93 3e 04 	sts	0x043E, r18
		accX = 0;
		accY = 0;

	}

}
    8378:	0f 90       	pop	r0
    837a:	cf 91       	pop	r28
    837c:	df 91       	pop	r29
    837e:	1f 91       	pop	r17
    8380:	0f 91       	pop	r16
    8382:	ff 90       	pop	r15
    8384:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    8386:	80 91 14 02 	lds	r24, 0x0214
    838a:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    838e:	82 e3       	ldi	r24, 0x32	; 50
    8390:	86 cf       	rjmp	.-244    	; 0x829e <readAccelXY+0x46>

00008392 <readAccelXYZ>:

	}

}

void readAccelXYZ() {
    8392:	df 93       	push	r29
    8394:	cf 93       	push	r28
    8396:	00 d0       	rcall	.+0      	; 0x8398 <readAccelXYZ+0x6>
    8398:	00 d0       	rcall	.+0      	; 0x839a <readAccelXYZ+0x8>
    839a:	cd b7       	in	r28, 0x3d	; 61
    839c:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[6];

	if(useAccel == USE_MMAX7455L) {
    839e:	80 91 3b 04 	lds	r24, 0x043B
    83a2:	88 23       	and	r24, r24
    83a4:	c1 f0       	breq	.+48     	; 0x83d6 <readAccelXYZ+0x44>
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    83a6:	81 30       	cpi	r24, 0x01	; 1
    83a8:	09 f4       	brne	.+2      	; 0x83ac <readAccelXYZ+0x1a>
    83aa:	ad c0       	rjmp	.+346    	; 0x8506 <readAccelXYZ+0x174>
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else {

		accX = 0;
    83ac:	10 92 3d 04 	sts	0x043D, r1
    83b0:	10 92 3c 04 	sts	0x043C, r1
		accY = 0;
    83b4:	10 92 3f 04 	sts	0x043F, r1
    83b8:	10 92 3e 04 	sts	0x043E, r1
		accZ = 0;
    83bc:	10 92 41 04 	sts	0x0441, r1
    83c0:	10 92 40 04 	sts	0x0440, r1

	}

}
    83c4:	26 96       	adiw	r28, 0x06	; 6
    83c6:	0f b6       	in	r0, 0x3f	; 63
    83c8:	f8 94       	cli
    83ca:	de bf       	out	0x3e, r29	; 62
    83cc:	0f be       	out	0x3f, r0	; 63
    83ce:	cd bf       	out	0x3d, r28	; 61
    83d0:	cf 91       	pop	r28
    83d2:	df 91       	pop	r29
    83d4:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    83d6:	80 91 14 02 	lds	r24, 0x0214
    83da:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    83de:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
		i2c_write(0x32);											// sends address to read from (X LSB)
    83e0:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    83e4:	80 91 14 02 	lds	r24, 0x0214
    83e8:	8f 5f       	subi	r24, 0xFF	; 255
    83ea:	0e 94 cf 1f 	call	0x3f9e	; 0x3f9e <i2c_rep_start>

		for(i=0; i<5; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    83ee:	0e 94 0f 20 	call	0x401e	; 0x401e <i2c_readAck>
    83f2:	89 83       	std	Y+1, r24	; 0x01
    83f4:	0e 94 0f 20 	call	0x401e	; 0x401e <i2c_readAck>
    83f8:	8a 83       	std	Y+2, r24	; 0x02
    83fa:	0e 94 0f 20 	call	0x401e	; 0x401e <i2c_readAck>
    83fe:	8b 83       	std	Y+3, r24	; 0x03
    8400:	0e 94 0f 20 	call	0x401e	; 0x401e <i2c_readAck>
    8404:	8c 83       	std	Y+4, r24	; 0x04
    8406:	0e 94 0f 20 	call	0x401e	; 0x401e <i2c_readAck>
    840a:	8d 83       	std	Y+5, r24	; 0x05
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    840c:	0e 94 19 20 	call	0x4032	; 0x4032 <i2c_readNak>
    8410:	8e 83       	std	Y+6, r24	; 0x06
		i2c_stop();													// set stop conditon = release bus
    8412:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    8416:	80 91 82 0b 	lds	r24, 0x0B82
    841a:	88 23       	and	r24, r24
    841c:	89 f1       	breq	.+98     	; 0x8480 <readAccelXYZ+0xee>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    841e:	8a 81       	ldd	r24, Y+2	; 0x02
    8420:	99 27       	eor	r25, r25
    8422:	87 fd       	sbrc	r24, 7
    8424:	90 95       	com	r25
    8426:	98 2f       	mov	r25, r24
    8428:	88 27       	eor	r24, r24
    842a:	29 81       	ldd	r18, Y+1	; 0x01
    842c:	33 27       	eor	r19, r19
    842e:	27 fd       	sbrc	r18, 7
    8430:	30 95       	com	r19
    8432:	82 2b       	or	r24, r18
    8434:	93 2b       	or	r25, r19
    8436:	90 93 3d 04 	sts	0x043D, r25
    843a:	80 93 3c 04 	sts	0x043C, r24
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    843e:	8c 81       	ldd	r24, Y+4	; 0x04
    8440:	99 27       	eor	r25, r25
    8442:	87 fd       	sbrc	r24, 7
    8444:	90 95       	com	r25
    8446:	98 2f       	mov	r25, r24
    8448:	88 27       	eor	r24, r24
    844a:	2b 81       	ldd	r18, Y+3	; 0x03
    844c:	33 27       	eor	r19, r19
    844e:	27 fd       	sbrc	r18, 7
    8450:	30 95       	com	r19
    8452:	82 2b       	or	r24, r18
    8454:	93 2b       	or	r25, r19
    8456:	90 93 3f 04 	sts	0x043F, r25
    845a:	80 93 3e 04 	sts	0x043E, r24
			accZ = ((signed int)buff[5]<<8)|buff[4];    			// Z axis
    845e:	8e 81       	ldd	r24, Y+6	; 0x06
    8460:	99 27       	eor	r25, r25
    8462:	87 fd       	sbrc	r24, 7
    8464:	90 95       	com	r25
    8466:	98 2f       	mov	r25, r24
    8468:	88 27       	eor	r24, r24
    846a:	2d 81       	ldd	r18, Y+5	; 0x05
    846c:	33 27       	eor	r19, r19
    846e:	27 fd       	sbrc	r18, 7
    8470:	30 95       	com	r19
    8472:	82 2b       	or	r24, r18
    8474:	93 2b       	or	r25, r19
    8476:	90 93 41 04 	sts	0x0441, r25
    847a:	80 93 40 04 	sts	0x0440, r24
    847e:	a2 cf       	rjmp	.-188    	; 0x83c4 <readAccelXYZ+0x32>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    8480:	8a 81       	ldd	r24, Y+2	; 0x02
    8482:	99 27       	eor	r25, r25
    8484:	87 fd       	sbrc	r24, 7
    8486:	90 95       	com	r25
    8488:	98 2f       	mov	r25, r24
    848a:	88 27       	eor	r24, r24
    848c:	29 81       	ldd	r18, Y+1	; 0x01
    848e:	33 27       	eor	r19, r19
    8490:	27 fd       	sbrc	r18, 7
    8492:	30 95       	com	r19
    8494:	82 2b       	or	r24, r18
    8496:	93 2b       	or	r25, r19
    8498:	20 91 42 04 	lds	r18, 0x0442
    849c:	30 91 43 04 	lds	r19, 0x0443
    84a0:	82 1b       	sub	r24, r18
    84a2:	93 0b       	sbc	r25, r19
    84a4:	90 93 3d 04 	sts	0x043D, r25
    84a8:	80 93 3c 04 	sts	0x043C, r24
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    84ac:	8c 81       	ldd	r24, Y+4	; 0x04
    84ae:	99 27       	eor	r25, r25
    84b0:	87 fd       	sbrc	r24, 7
    84b2:	90 95       	com	r25
    84b4:	98 2f       	mov	r25, r24
    84b6:	88 27       	eor	r24, r24
    84b8:	2b 81       	ldd	r18, Y+3	; 0x03
    84ba:	33 27       	eor	r19, r19
    84bc:	27 fd       	sbrc	r18, 7
    84be:	30 95       	com	r19
    84c0:	82 2b       	or	r24, r18
    84c2:	93 2b       	or	r25, r19
    84c4:	20 91 44 04 	lds	r18, 0x0444
    84c8:	30 91 45 04 	lds	r19, 0x0445
    84cc:	82 1b       	sub	r24, r18
    84ce:	93 0b       	sbc	r25, r19
    84d0:	90 93 3f 04 	sts	0x043F, r25
    84d4:	80 93 3e 04 	sts	0x043E, r24
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
    84d8:	8e 81       	ldd	r24, Y+6	; 0x06
    84da:	99 27       	eor	r25, r25
    84dc:	87 fd       	sbrc	r24, 7
    84de:	90 95       	com	r25
    84e0:	98 2f       	mov	r25, r24
    84e2:	88 27       	eor	r24, r24
    84e4:	2d 81       	ldd	r18, Y+5	; 0x05
    84e6:	33 27       	eor	r19, r19
    84e8:	27 fd       	sbrc	r18, 7
    84ea:	30 95       	com	r19
    84ec:	82 2b       	or	r24, r18
    84ee:	93 2b       	or	r25, r19
    84f0:	20 91 46 04 	lds	r18, 0x0446
    84f4:	30 91 47 04 	lds	r19, 0x0447
    84f8:	82 1b       	sub	r24, r18
    84fa:	93 0b       	sbc	r25, r19
    84fc:	90 93 41 04 	sts	0x0441, r25
    8500:	80 93 40 04 	sts	0x0440, r24
    8504:	5f cf       	rjmp	.-322    	; 0x83c4 <readAccelXYZ+0x32>
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    8506:	80 91 14 02 	lds	r24, 0x0214
    850a:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    850e:	82 e3       	ldi	r24, 0x32	; 50
    8510:	67 cf       	rjmp	.-306    	; 0x83e0 <readAccelXYZ+0x4e>

00008512 <calibrateSensors>:

#include "sensors.h"


void calibrateSensors() {
    8512:	cf 93       	push	r28
    8514:	df 93       	push	r29

	unsigned int i=0;

	pwm_red = 0;
    8516:	10 92 0c 02 	sts	0x020C, r1
	pwm_green = 0;
    851a:	10 92 0d 02 	sts	0x020D, r1
	pwm_blue = 0;
    851e:	10 92 0e 02 	sts	0x020E, r1
	updateRedLed(pwm_red);
    8522:	80 e0       	ldi	r24, 0x00	; 0
    8524:	0e 94 91 3f 	call	0x7f22	; 0x7f22 <updateRedLed>
	updateGreenLed(pwm_green);
    8528:	80 91 0d 02 	lds	r24, 0x020D
    852c:	0e 94 a5 3f 	call	0x7f4a	; 0x7f4a <updateGreenLed>
	updateBlueLed(pwm_blue);
    8530:	80 91 0e 02 	lds	r24, 0x020E
    8534:	0e 94 b9 3f 	call	0x7f72	; 0x7f72 <updateBlueLed>

	calibrationCycle = 0;
    8538:	10 92 5e 04 	sts	0x045E, r1
    853c:	10 92 5d 04 	sts	0x045D, r1
	startCalibration = 1;
    8540:	81 e0       	ldi	r24, 0x01	; 1
    8542:	80 93 82 0b 	sts	0x0B82, r24
					}
					accOffsetXSum = 0;
					accOffsetYSum = 0;
					accOffsetZSum = 0;

					calibrationCycle++;
    8546:	c1 e0       	ldi	r28, 0x01	; 1
    8548:	d0 e0       	ldi	r29, 0x00	; 0
	calibrationCycle = 0;
	startCalibration = 1;

	while(startCalibration) {

		readAccelXYZ();
    854a:	0e 94 c9 41 	call	0x8392	; 0x8392 <readAccelXYZ>

		if(calibrationCycle<=CALIBRATION_CYCLES) {
    854e:	20 91 5d 04 	lds	r18, 0x045D
    8552:	30 91 5e 04 	lds	r19, 0x045E
    8556:	21 31       	cpi	r18, 0x11	; 17
    8558:	31 05       	cpc	r19, r1
    855a:	0c f4       	brge	.+2      	; 0x855e <calibrateSensors+0x4c>
    855c:	35 c1       	rjmp	.+618    	; 0x87c8 <calibrateSensors+0x2b6>
			continue;

		} else if(calibrationCycle > CALIBRATION_CYCLES) {

			for(i=0;i<12;i++) {
				proximityOffset[i] = proximitySum[i]>>4;
    855e:	80 91 99 02 	lds	r24, 0x0299
    8562:	90 91 9a 02 	lds	r25, 0x029A
    8566:	a0 91 9b 02 	lds	r26, 0x029B
    856a:	b0 91 9c 02 	lds	r27, 0x029C
    856e:	54 e0       	ldi	r21, 0x04	; 4
    8570:	b6 95       	lsr	r27
    8572:	a7 95       	ror	r26
    8574:	97 95       	ror	r25
    8576:	87 95       	ror	r24
    8578:	5a 95       	dec	r21
    857a:	d1 f7       	brne	.-12     	; 0x8570 <calibrateSensors+0x5e>
    857c:	90 93 82 02 	sts	0x0282, r25
    8580:	80 93 81 02 	sts	0x0281, r24
    8584:	80 91 9d 02 	lds	r24, 0x029D
    8588:	90 91 9e 02 	lds	r25, 0x029E
    858c:	a0 91 9f 02 	lds	r26, 0x029F
    8590:	b0 91 a0 02 	lds	r27, 0x02A0
    8594:	44 e0       	ldi	r20, 0x04	; 4
    8596:	b6 95       	lsr	r27
    8598:	a7 95       	ror	r26
    859a:	97 95       	ror	r25
    859c:	87 95       	ror	r24
    859e:	4a 95       	dec	r20
    85a0:	d1 f7       	brne	.-12     	; 0x8596 <calibrateSensors+0x84>
    85a2:	90 93 84 02 	sts	0x0284, r25
    85a6:	80 93 83 02 	sts	0x0283, r24
    85aa:	80 91 a1 02 	lds	r24, 0x02A1
    85ae:	90 91 a2 02 	lds	r25, 0x02A2
    85b2:	a0 91 a3 02 	lds	r26, 0x02A3
    85b6:	b0 91 a4 02 	lds	r27, 0x02A4
    85ba:	34 e0       	ldi	r19, 0x04	; 4
    85bc:	b6 95       	lsr	r27
    85be:	a7 95       	ror	r26
    85c0:	97 95       	ror	r25
    85c2:	87 95       	ror	r24
    85c4:	3a 95       	dec	r19
    85c6:	d1 f7       	brne	.-12     	; 0x85bc <calibrateSensors+0xaa>
    85c8:	90 93 86 02 	sts	0x0286, r25
    85cc:	80 93 85 02 	sts	0x0285, r24
    85d0:	80 91 a5 02 	lds	r24, 0x02A5
    85d4:	90 91 a6 02 	lds	r25, 0x02A6
    85d8:	a0 91 a7 02 	lds	r26, 0x02A7
    85dc:	b0 91 a8 02 	lds	r27, 0x02A8
    85e0:	24 e0       	ldi	r18, 0x04	; 4
    85e2:	b6 95       	lsr	r27
    85e4:	a7 95       	ror	r26
    85e6:	97 95       	ror	r25
    85e8:	87 95       	ror	r24
    85ea:	2a 95       	dec	r18
    85ec:	d1 f7       	brne	.-12     	; 0x85e2 <calibrateSensors+0xd0>
    85ee:	90 93 88 02 	sts	0x0288, r25
    85f2:	80 93 87 02 	sts	0x0287, r24
    85f6:	80 91 a9 02 	lds	r24, 0x02A9
    85fa:	90 91 aa 02 	lds	r25, 0x02AA
    85fe:	a0 91 ab 02 	lds	r26, 0x02AB
    8602:	b0 91 ac 02 	lds	r27, 0x02AC
    8606:	f4 e0       	ldi	r31, 0x04	; 4
    8608:	b6 95       	lsr	r27
    860a:	a7 95       	ror	r26
    860c:	97 95       	ror	r25
    860e:	87 95       	ror	r24
    8610:	fa 95       	dec	r31
    8612:	d1 f7       	brne	.-12     	; 0x8608 <calibrateSensors+0xf6>
    8614:	90 93 8a 02 	sts	0x028A, r25
    8618:	80 93 89 02 	sts	0x0289, r24
    861c:	80 91 ad 02 	lds	r24, 0x02AD
    8620:	90 91 ae 02 	lds	r25, 0x02AE
    8624:	a0 91 af 02 	lds	r26, 0x02AF
    8628:	b0 91 b0 02 	lds	r27, 0x02B0
    862c:	e4 e0       	ldi	r30, 0x04	; 4
    862e:	b6 95       	lsr	r27
    8630:	a7 95       	ror	r26
    8632:	97 95       	ror	r25
    8634:	87 95       	ror	r24
    8636:	ea 95       	dec	r30
    8638:	d1 f7       	brne	.-12     	; 0x862e <calibrateSensors+0x11c>
    863a:	90 93 8c 02 	sts	0x028C, r25
    863e:	80 93 8b 02 	sts	0x028B, r24
    8642:	80 91 b1 02 	lds	r24, 0x02B1
    8646:	90 91 b2 02 	lds	r25, 0x02B2
    864a:	a0 91 b3 02 	lds	r26, 0x02B3
    864e:	b0 91 b4 02 	lds	r27, 0x02B4
    8652:	74 e0       	ldi	r23, 0x04	; 4
    8654:	b6 95       	lsr	r27
    8656:	a7 95       	ror	r26
    8658:	97 95       	ror	r25
    865a:	87 95       	ror	r24
    865c:	7a 95       	dec	r23
    865e:	d1 f7       	brne	.-12     	; 0x8654 <calibrateSensors+0x142>
    8660:	90 93 8e 02 	sts	0x028E, r25
    8664:	80 93 8d 02 	sts	0x028D, r24
    8668:	80 91 b5 02 	lds	r24, 0x02B5
    866c:	90 91 b6 02 	lds	r25, 0x02B6
    8670:	a0 91 b7 02 	lds	r26, 0x02B7
    8674:	b0 91 b8 02 	lds	r27, 0x02B8
    8678:	64 e0       	ldi	r22, 0x04	; 4
    867a:	b6 95       	lsr	r27
    867c:	a7 95       	ror	r26
    867e:	97 95       	ror	r25
    8680:	87 95       	ror	r24
    8682:	6a 95       	dec	r22
    8684:	d1 f7       	brne	.-12     	; 0x867a <calibrateSensors+0x168>
    8686:	90 93 90 02 	sts	0x0290, r25
    868a:	80 93 8f 02 	sts	0x028F, r24
    868e:	80 91 bd 02 	lds	r24, 0x02BD
    8692:	90 91 be 02 	lds	r25, 0x02BE
    8696:	a0 91 bf 02 	lds	r26, 0x02BF
    869a:	b0 91 c0 02 	lds	r27, 0x02C0
    869e:	54 e0       	ldi	r21, 0x04	; 4
    86a0:	b6 95       	lsr	r27
    86a2:	a7 95       	ror	r26
    86a4:	97 95       	ror	r25
    86a6:	87 95       	ror	r24
    86a8:	5a 95       	dec	r21
    86aa:	d1 f7       	brne	.-12     	; 0x86a0 <calibrateSensors+0x18e>
    86ac:	9c 01       	movw	r18, r24
    86ae:	80 91 c1 02 	lds	r24, 0x02C1
    86b2:	90 91 c2 02 	lds	r25, 0x02C2
    86b6:	a0 91 c3 02 	lds	r26, 0x02C3
    86ba:	b0 91 c4 02 	lds	r27, 0x02C4
    86be:	44 e0       	ldi	r20, 0x04	; 4
    86c0:	b6 95       	lsr	r27
    86c2:	a7 95       	ror	r26
    86c4:	97 95       	ror	r25
    86c6:	87 95       	ror	r24
    86c8:	4a 95       	dec	r20
    86ca:	d1 f7       	brne	.-12     	; 0x86c0 <calibrateSensors+0x1ae>
    86cc:	bc 01       	movw	r22, r24
    86ce:	80 91 c5 02 	lds	r24, 0x02C5
    86d2:	90 91 c6 02 	lds	r25, 0x02C6
    86d6:	a0 91 c7 02 	lds	r26, 0x02C7
    86da:	b0 91 c8 02 	lds	r27, 0x02C8
    86de:	f4 e0       	ldi	r31, 0x04	; 4
    86e0:	b6 95       	lsr	r27
    86e2:	a7 95       	ror	r26
    86e4:	97 95       	ror	r25
    86e6:	87 95       	ror	r24
    86e8:	fa 95       	dec	r31
    86ea:	d1 f7       	brne	.-12     	; 0x86e0 <calibrateSensors+0x1ce>
    86ec:	ac 01       	movw	r20, r24
    86ee:	80 91 b9 02 	lds	r24, 0x02B9
    86f2:	90 91 ba 02 	lds	r25, 0x02BA
    86f6:	a0 91 bb 02 	lds	r26, 0x02BB
    86fa:	b0 91 bc 02 	lds	r27, 0x02BC
    86fe:	e4 e0       	ldi	r30, 0x04	; 4
    8700:	b6 95       	lsr	r27
    8702:	a7 95       	ror	r26
    8704:	97 95       	ror	r25
    8706:	87 95       	ror	r24
    8708:	ea 95       	dec	r30
    870a:	d1 f7       	brne	.-12     	; 0x8700 <calibrateSensors+0x1ee>
			}

			for(i=8; i<12; i++) {
				proximityOffset[i] -= 512;	// move the "0" to 512 (values around 512)
    870c:	80 50       	subi	r24, 0x00	; 0
    870e:	92 40       	sbci	r25, 0x02	; 2
    8710:	90 93 92 02 	sts	0x0292, r25
    8714:	80 93 91 02 	sts	0x0291, r24
    8718:	20 50       	subi	r18, 0x00	; 0
    871a:	32 40       	sbci	r19, 0x02	; 2
    871c:	30 93 94 02 	sts	0x0294, r19
    8720:	20 93 93 02 	sts	0x0293, r18
    8724:	60 50       	subi	r22, 0x00	; 0
    8726:	72 40       	sbci	r23, 0x02	; 2
    8728:	70 93 96 02 	sts	0x0296, r23
    872c:	60 93 95 02 	sts	0x0295, r22
    8730:	40 50       	subi	r20, 0x00	; 0
    8732:	52 40       	sbci	r21, 0x02	; 2
    8734:	50 93 98 02 	sts	0x0298, r21
    8738:	40 93 97 02 	sts	0x0297, r20
			}

			accOffsetX = accOffsetXSum>>4;
    873c:	80 91 48 04 	lds	r24, 0x0448
    8740:	90 91 49 04 	lds	r25, 0x0449
    8744:	95 95       	asr	r25
    8746:	87 95       	ror	r24
    8748:	95 95       	asr	r25
    874a:	87 95       	ror	r24
    874c:	95 95       	asr	r25
    874e:	87 95       	ror	r24
    8750:	95 95       	asr	r25
    8752:	87 95       	ror	r24
    8754:	90 93 43 04 	sts	0x0443, r25
    8758:	80 93 42 04 	sts	0x0442, r24
			accOffsetY = accOffsetYSum>>4;
    875c:	80 91 4a 04 	lds	r24, 0x044A
    8760:	90 91 4b 04 	lds	r25, 0x044B
    8764:	95 95       	asr	r25
    8766:	87 95       	ror	r24
    8768:	95 95       	asr	r25
    876a:	87 95       	ror	r24
    876c:	95 95       	asr	r25
    876e:	87 95       	ror	r24
    8770:	95 95       	asr	r25
    8772:	87 95       	ror	r24
    8774:	90 93 45 04 	sts	0x0445, r25
    8778:	80 93 44 04 	sts	0x0444, r24
			accOffsetZ = accOffsetZSum>>4;
    877c:	80 91 4c 04 	lds	r24, 0x044C
    8780:	90 91 4d 04 	lds	r25, 0x044D
    8784:	95 95       	asr	r25
    8786:	87 95       	ror	r24
    8788:	95 95       	asr	r25
    878a:	87 95       	ror	r24
    878c:	95 95       	asr	r25
    878e:	87 95       	ror	r24
    8790:	95 95       	asr	r25
    8792:	87 95       	ror	r24
    8794:	90 93 47 04 	sts	0x0447, r25
    8798:	80 93 46 04 	sts	0x0446, r24

			//proxUpdated = 0;
			//if(proxUpdated) {	
				startCalibration = 0;					
    879c:	10 92 82 0b 	sts	0x0B82, r1

		}

	}

	pwm_red = 255;
    87a0:	8f ef       	ldi	r24, 0xFF	; 255
    87a2:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    87a6:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    87aa:	80 93 0e 02 	sts	0x020E, r24
	updateRedLed(pwm_red);
    87ae:	0e 94 91 3f 	call	0x7f22	; 0x7f22 <updateRedLed>
	updateGreenLed(pwm_green);
    87b2:	80 91 0d 02 	lds	r24, 0x020D
    87b6:	0e 94 a5 3f 	call	0x7f4a	; 0x7f4a <updateGreenLed>
	updateBlueLed(pwm_blue);
    87ba:	80 91 0e 02 	lds	r24, 0x020E
    87be:	0e 94 b9 3f 	call	0x7f72	; 0x7f72 <updateBlueLed>

}
    87c2:	df 91       	pop	r29
    87c4:	cf 91       	pop	r28
    87c6:	08 95       	ret

		readAccelXYZ();

		if(calibrationCycle<=CALIBRATION_CYCLES) {

			if(proxUpdated) {
    87c8:	80 91 d0 02 	lds	r24, 0x02D0
    87cc:	88 23       	and	r24, r24
    87ce:	09 f4       	brne	.+2      	; 0x87d2 <calibrateSensors+0x2c0>
    87d0:	86 c1       	rjmp	.+780    	; 0x8ade <calibrateSensors+0x5cc>

				proxUpdated = 0;
    87d2:	10 92 d0 02 	sts	0x02D0, r1

				if(calibrationCycle==0) {		// reset all variables
    87d6:	21 15       	cp	r18, r1
    87d8:	31 05       	cpc	r19, r1
    87da:	09 f4       	brne	.+2      	; 0x87de <calibrateSensors+0x2cc>
    87dc:	86 c1       	rjmp	.+780    	; 0x8aea <calibrateSensors+0x5d8>
												// "proximityResult" hasn't the offset reset to 0. so we start the actual calibration
												// the next time
				}

				for (i=0;i<12;i++) {
					proximitySum[i] += proximityResult[i];
    87de:	80 91 69 02 	lds	r24, 0x0269
    87e2:	90 91 6a 02 	lds	r25, 0x026A
    87e6:	aa 27       	eor	r26, r26
    87e8:	97 fd       	sbrc	r25, 7
    87ea:	a0 95       	com	r26
    87ec:	ba 2f       	mov	r27, r26
    87ee:	40 91 99 02 	lds	r20, 0x0299
    87f2:	50 91 9a 02 	lds	r21, 0x029A
    87f6:	60 91 9b 02 	lds	r22, 0x029B
    87fa:	70 91 9c 02 	lds	r23, 0x029C
    87fe:	84 0f       	add	r24, r20
    8800:	95 1f       	adc	r25, r21
    8802:	a6 1f       	adc	r26, r22
    8804:	b7 1f       	adc	r27, r23
    8806:	80 93 99 02 	sts	0x0299, r24
    880a:	90 93 9a 02 	sts	0x029A, r25
    880e:	a0 93 9b 02 	sts	0x029B, r26
    8812:	b0 93 9c 02 	sts	0x029C, r27
    8816:	80 91 6b 02 	lds	r24, 0x026B
    881a:	90 91 6c 02 	lds	r25, 0x026C
    881e:	aa 27       	eor	r26, r26
    8820:	97 fd       	sbrc	r25, 7
    8822:	a0 95       	com	r26
    8824:	ba 2f       	mov	r27, r26
    8826:	40 91 9d 02 	lds	r20, 0x029D
    882a:	50 91 9e 02 	lds	r21, 0x029E
    882e:	60 91 9f 02 	lds	r22, 0x029F
    8832:	70 91 a0 02 	lds	r23, 0x02A0
    8836:	84 0f       	add	r24, r20
    8838:	95 1f       	adc	r25, r21
    883a:	a6 1f       	adc	r26, r22
    883c:	b7 1f       	adc	r27, r23
    883e:	80 93 9d 02 	sts	0x029D, r24
    8842:	90 93 9e 02 	sts	0x029E, r25
    8846:	a0 93 9f 02 	sts	0x029F, r26
    884a:	b0 93 a0 02 	sts	0x02A0, r27
    884e:	80 91 6d 02 	lds	r24, 0x026D
    8852:	90 91 6e 02 	lds	r25, 0x026E
    8856:	aa 27       	eor	r26, r26
    8858:	97 fd       	sbrc	r25, 7
    885a:	a0 95       	com	r26
    885c:	ba 2f       	mov	r27, r26
    885e:	40 91 a1 02 	lds	r20, 0x02A1
    8862:	50 91 a2 02 	lds	r21, 0x02A2
    8866:	60 91 a3 02 	lds	r22, 0x02A3
    886a:	70 91 a4 02 	lds	r23, 0x02A4
    886e:	84 0f       	add	r24, r20
    8870:	95 1f       	adc	r25, r21
    8872:	a6 1f       	adc	r26, r22
    8874:	b7 1f       	adc	r27, r23
    8876:	80 93 a1 02 	sts	0x02A1, r24
    887a:	90 93 a2 02 	sts	0x02A2, r25
    887e:	a0 93 a3 02 	sts	0x02A3, r26
    8882:	b0 93 a4 02 	sts	0x02A4, r27
    8886:	80 91 6f 02 	lds	r24, 0x026F
    888a:	90 91 70 02 	lds	r25, 0x0270
    888e:	aa 27       	eor	r26, r26
    8890:	97 fd       	sbrc	r25, 7
    8892:	a0 95       	com	r26
    8894:	ba 2f       	mov	r27, r26
    8896:	40 91 a5 02 	lds	r20, 0x02A5
    889a:	50 91 a6 02 	lds	r21, 0x02A6
    889e:	60 91 a7 02 	lds	r22, 0x02A7
    88a2:	70 91 a8 02 	lds	r23, 0x02A8
    88a6:	84 0f       	add	r24, r20
    88a8:	95 1f       	adc	r25, r21
    88aa:	a6 1f       	adc	r26, r22
    88ac:	b7 1f       	adc	r27, r23
    88ae:	80 93 a5 02 	sts	0x02A5, r24
    88b2:	90 93 a6 02 	sts	0x02A6, r25
    88b6:	a0 93 a7 02 	sts	0x02A7, r26
    88ba:	b0 93 a8 02 	sts	0x02A8, r27
    88be:	80 91 71 02 	lds	r24, 0x0271
    88c2:	90 91 72 02 	lds	r25, 0x0272
    88c6:	aa 27       	eor	r26, r26
    88c8:	97 fd       	sbrc	r25, 7
    88ca:	a0 95       	com	r26
    88cc:	ba 2f       	mov	r27, r26
    88ce:	40 91 a9 02 	lds	r20, 0x02A9
    88d2:	50 91 aa 02 	lds	r21, 0x02AA
    88d6:	60 91 ab 02 	lds	r22, 0x02AB
    88da:	70 91 ac 02 	lds	r23, 0x02AC
    88de:	84 0f       	add	r24, r20
    88e0:	95 1f       	adc	r25, r21
    88e2:	a6 1f       	adc	r26, r22
    88e4:	b7 1f       	adc	r27, r23
    88e6:	80 93 a9 02 	sts	0x02A9, r24
    88ea:	90 93 aa 02 	sts	0x02AA, r25
    88ee:	a0 93 ab 02 	sts	0x02AB, r26
    88f2:	b0 93 ac 02 	sts	0x02AC, r27
    88f6:	80 91 73 02 	lds	r24, 0x0273
    88fa:	90 91 74 02 	lds	r25, 0x0274
    88fe:	aa 27       	eor	r26, r26
    8900:	97 fd       	sbrc	r25, 7
    8902:	a0 95       	com	r26
    8904:	ba 2f       	mov	r27, r26
    8906:	40 91 ad 02 	lds	r20, 0x02AD
    890a:	50 91 ae 02 	lds	r21, 0x02AE
    890e:	60 91 af 02 	lds	r22, 0x02AF
    8912:	70 91 b0 02 	lds	r23, 0x02B0
    8916:	84 0f       	add	r24, r20
    8918:	95 1f       	adc	r25, r21
    891a:	a6 1f       	adc	r26, r22
    891c:	b7 1f       	adc	r27, r23
    891e:	80 93 ad 02 	sts	0x02AD, r24
    8922:	90 93 ae 02 	sts	0x02AE, r25
    8926:	a0 93 af 02 	sts	0x02AF, r26
    892a:	b0 93 b0 02 	sts	0x02B0, r27
    892e:	80 91 75 02 	lds	r24, 0x0275
    8932:	90 91 76 02 	lds	r25, 0x0276
    8936:	aa 27       	eor	r26, r26
    8938:	97 fd       	sbrc	r25, 7
    893a:	a0 95       	com	r26
    893c:	ba 2f       	mov	r27, r26
    893e:	40 91 b1 02 	lds	r20, 0x02B1
    8942:	50 91 b2 02 	lds	r21, 0x02B2
    8946:	60 91 b3 02 	lds	r22, 0x02B3
    894a:	70 91 b4 02 	lds	r23, 0x02B4
    894e:	84 0f       	add	r24, r20
    8950:	95 1f       	adc	r25, r21
    8952:	a6 1f       	adc	r26, r22
    8954:	b7 1f       	adc	r27, r23
    8956:	80 93 b1 02 	sts	0x02B1, r24
    895a:	90 93 b2 02 	sts	0x02B2, r25
    895e:	a0 93 b3 02 	sts	0x02B3, r26
    8962:	b0 93 b4 02 	sts	0x02B4, r27
    8966:	80 91 77 02 	lds	r24, 0x0277
    896a:	90 91 78 02 	lds	r25, 0x0278
    896e:	aa 27       	eor	r26, r26
    8970:	97 fd       	sbrc	r25, 7
    8972:	a0 95       	com	r26
    8974:	ba 2f       	mov	r27, r26
    8976:	40 91 b5 02 	lds	r20, 0x02B5
    897a:	50 91 b6 02 	lds	r21, 0x02B6
    897e:	60 91 b7 02 	lds	r22, 0x02B7
    8982:	70 91 b8 02 	lds	r23, 0x02B8
    8986:	84 0f       	add	r24, r20
    8988:	95 1f       	adc	r25, r21
    898a:	a6 1f       	adc	r26, r22
    898c:	b7 1f       	adc	r27, r23
    898e:	80 93 b5 02 	sts	0x02B5, r24
    8992:	90 93 b6 02 	sts	0x02B6, r25
    8996:	a0 93 b7 02 	sts	0x02B7, r26
    899a:	b0 93 b8 02 	sts	0x02B8, r27
    899e:	80 91 79 02 	lds	r24, 0x0279
    89a2:	90 91 7a 02 	lds	r25, 0x027A
    89a6:	aa 27       	eor	r26, r26
    89a8:	97 fd       	sbrc	r25, 7
    89aa:	a0 95       	com	r26
    89ac:	ba 2f       	mov	r27, r26
    89ae:	40 91 b9 02 	lds	r20, 0x02B9
    89b2:	50 91 ba 02 	lds	r21, 0x02BA
    89b6:	60 91 bb 02 	lds	r22, 0x02BB
    89ba:	70 91 bc 02 	lds	r23, 0x02BC
    89be:	84 0f       	add	r24, r20
    89c0:	95 1f       	adc	r25, r21
    89c2:	a6 1f       	adc	r26, r22
    89c4:	b7 1f       	adc	r27, r23
    89c6:	80 93 b9 02 	sts	0x02B9, r24
    89ca:	90 93 ba 02 	sts	0x02BA, r25
    89ce:	a0 93 bb 02 	sts	0x02BB, r26
    89d2:	b0 93 bc 02 	sts	0x02BC, r27
    89d6:	80 91 7b 02 	lds	r24, 0x027B
    89da:	90 91 7c 02 	lds	r25, 0x027C
    89de:	aa 27       	eor	r26, r26
    89e0:	97 fd       	sbrc	r25, 7
    89e2:	a0 95       	com	r26
    89e4:	ba 2f       	mov	r27, r26
    89e6:	40 91 bd 02 	lds	r20, 0x02BD
    89ea:	50 91 be 02 	lds	r21, 0x02BE
    89ee:	60 91 bf 02 	lds	r22, 0x02BF
    89f2:	70 91 c0 02 	lds	r23, 0x02C0
    89f6:	84 0f       	add	r24, r20
    89f8:	95 1f       	adc	r25, r21
    89fa:	a6 1f       	adc	r26, r22
    89fc:	b7 1f       	adc	r27, r23
    89fe:	80 93 bd 02 	sts	0x02BD, r24
    8a02:	90 93 be 02 	sts	0x02BE, r25
    8a06:	a0 93 bf 02 	sts	0x02BF, r26
    8a0a:	b0 93 c0 02 	sts	0x02C0, r27
    8a0e:	80 91 7d 02 	lds	r24, 0x027D
    8a12:	90 91 7e 02 	lds	r25, 0x027E
    8a16:	aa 27       	eor	r26, r26
    8a18:	97 fd       	sbrc	r25, 7
    8a1a:	a0 95       	com	r26
    8a1c:	ba 2f       	mov	r27, r26
    8a1e:	40 91 c1 02 	lds	r20, 0x02C1
    8a22:	50 91 c2 02 	lds	r21, 0x02C2
    8a26:	60 91 c3 02 	lds	r22, 0x02C3
    8a2a:	70 91 c4 02 	lds	r23, 0x02C4
    8a2e:	84 0f       	add	r24, r20
    8a30:	95 1f       	adc	r25, r21
    8a32:	a6 1f       	adc	r26, r22
    8a34:	b7 1f       	adc	r27, r23
    8a36:	80 93 c1 02 	sts	0x02C1, r24
    8a3a:	90 93 c2 02 	sts	0x02C2, r25
    8a3e:	a0 93 c3 02 	sts	0x02C3, r26
    8a42:	b0 93 c4 02 	sts	0x02C4, r27
    8a46:	80 91 7f 02 	lds	r24, 0x027F
    8a4a:	90 91 80 02 	lds	r25, 0x0280
    8a4e:	aa 27       	eor	r26, r26
    8a50:	97 fd       	sbrc	r25, 7
    8a52:	a0 95       	com	r26
    8a54:	ba 2f       	mov	r27, r26
    8a56:	40 91 c5 02 	lds	r20, 0x02C5
    8a5a:	50 91 c6 02 	lds	r21, 0x02C6
    8a5e:	60 91 c7 02 	lds	r22, 0x02C7
    8a62:	70 91 c8 02 	lds	r23, 0x02C8
    8a66:	84 0f       	add	r24, r20
    8a68:	95 1f       	adc	r25, r21
    8a6a:	a6 1f       	adc	r26, r22
    8a6c:	b7 1f       	adc	r27, r23
    8a6e:	80 93 c5 02 	sts	0x02C5, r24
    8a72:	90 93 c6 02 	sts	0x02C6, r25
    8a76:	a0 93 c7 02 	sts	0x02C7, r26
    8a7a:	b0 93 c8 02 	sts	0x02C8, r27
				}

				accOffsetXSum += accX;
    8a7e:	80 91 48 04 	lds	r24, 0x0448
    8a82:	90 91 49 04 	lds	r25, 0x0449
    8a86:	40 91 3c 04 	lds	r20, 0x043C
    8a8a:	50 91 3d 04 	lds	r21, 0x043D
    8a8e:	84 0f       	add	r24, r20
    8a90:	95 1f       	adc	r25, r21
    8a92:	90 93 49 04 	sts	0x0449, r25
    8a96:	80 93 48 04 	sts	0x0448, r24
				accOffsetYSum += accY;
    8a9a:	80 91 4a 04 	lds	r24, 0x044A
    8a9e:	90 91 4b 04 	lds	r25, 0x044B
    8aa2:	40 91 3e 04 	lds	r20, 0x043E
    8aa6:	50 91 3f 04 	lds	r21, 0x043F
    8aaa:	84 0f       	add	r24, r20
    8aac:	95 1f       	adc	r25, r21
    8aae:	90 93 4b 04 	sts	0x044B, r25
    8ab2:	80 93 4a 04 	sts	0x044A, r24
				accOffsetZSum += accZ;
    8ab6:	80 91 4c 04 	lds	r24, 0x044C
    8aba:	90 91 4d 04 	lds	r25, 0x044D
    8abe:	40 91 40 04 	lds	r20, 0x0440
    8ac2:	50 91 41 04 	lds	r21, 0x0441
    8ac6:	84 0f       	add	r24, r20
    8ac8:	95 1f       	adc	r25, r21
    8aca:	90 93 4d 04 	sts	0x044D, r25
    8ace:	80 93 4c 04 	sts	0x044C, r24

				calibrationCycle++;
    8ad2:	2f 5f       	subi	r18, 0xFF	; 255
    8ad4:	3f 4f       	sbci	r19, 0xFF	; 255
    8ad6:	30 93 5e 04 	sts	0x045E, r19
    8ada:	20 93 5d 04 	sts	0x045D, r18
    8ade:	80 91 82 0b 	lds	r24, 0x0B82
	updateBlueLed(pwm_blue);

	calibrationCycle = 0;
	startCalibration = 1;

	while(startCalibration) {
    8ae2:	88 23       	and	r24, r24
    8ae4:	09 f0       	breq	.+2      	; 0x8ae8 <calibrateSensors+0x5d6>
    8ae6:	31 cd       	rjmp	.-1438   	; 0x854a <calibrateSensors+0x38>
    8ae8:	5b ce       	rjmp	.-842    	; 0x87a0 <calibrateSensors+0x28e>

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8aea:	10 92 99 02 	sts	0x0299, r1
    8aee:	10 92 9a 02 	sts	0x029A, r1
    8af2:	10 92 9b 02 	sts	0x029B, r1
    8af6:	10 92 9c 02 	sts	0x029C, r1
						proximityOffset[i] = 0;
    8afa:	10 92 82 02 	sts	0x0282, r1
    8afe:	10 92 81 02 	sts	0x0281, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8b02:	10 92 9d 02 	sts	0x029D, r1
    8b06:	10 92 9e 02 	sts	0x029E, r1
    8b0a:	10 92 9f 02 	sts	0x029F, r1
    8b0e:	10 92 a0 02 	sts	0x02A0, r1
						proximityOffset[i] = 0;
    8b12:	10 92 84 02 	sts	0x0284, r1
    8b16:	10 92 83 02 	sts	0x0283, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8b1a:	10 92 a1 02 	sts	0x02A1, r1
    8b1e:	10 92 a2 02 	sts	0x02A2, r1
    8b22:	10 92 a3 02 	sts	0x02A3, r1
    8b26:	10 92 a4 02 	sts	0x02A4, r1
						proximityOffset[i] = 0;
    8b2a:	10 92 86 02 	sts	0x0286, r1
    8b2e:	10 92 85 02 	sts	0x0285, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8b32:	10 92 a5 02 	sts	0x02A5, r1
    8b36:	10 92 a6 02 	sts	0x02A6, r1
    8b3a:	10 92 a7 02 	sts	0x02A7, r1
    8b3e:	10 92 a8 02 	sts	0x02A8, r1
						proximityOffset[i] = 0;
    8b42:	10 92 88 02 	sts	0x0288, r1
    8b46:	10 92 87 02 	sts	0x0287, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8b4a:	10 92 a9 02 	sts	0x02A9, r1
    8b4e:	10 92 aa 02 	sts	0x02AA, r1
    8b52:	10 92 ab 02 	sts	0x02AB, r1
    8b56:	10 92 ac 02 	sts	0x02AC, r1
						proximityOffset[i] = 0;
    8b5a:	10 92 8a 02 	sts	0x028A, r1
    8b5e:	10 92 89 02 	sts	0x0289, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8b62:	10 92 ad 02 	sts	0x02AD, r1
    8b66:	10 92 ae 02 	sts	0x02AE, r1
    8b6a:	10 92 af 02 	sts	0x02AF, r1
    8b6e:	10 92 b0 02 	sts	0x02B0, r1
						proximityOffset[i] = 0;
    8b72:	10 92 8c 02 	sts	0x028C, r1
    8b76:	10 92 8b 02 	sts	0x028B, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8b7a:	10 92 b1 02 	sts	0x02B1, r1
    8b7e:	10 92 b2 02 	sts	0x02B2, r1
    8b82:	10 92 b3 02 	sts	0x02B3, r1
    8b86:	10 92 b4 02 	sts	0x02B4, r1
						proximityOffset[i] = 0;
    8b8a:	10 92 8e 02 	sts	0x028E, r1
    8b8e:	10 92 8d 02 	sts	0x028D, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8b92:	10 92 b5 02 	sts	0x02B5, r1
    8b96:	10 92 b6 02 	sts	0x02B6, r1
    8b9a:	10 92 b7 02 	sts	0x02B7, r1
    8b9e:	10 92 b8 02 	sts	0x02B8, r1
						proximityOffset[i] = 0;
    8ba2:	10 92 90 02 	sts	0x0290, r1
    8ba6:	10 92 8f 02 	sts	0x028F, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8baa:	10 92 b9 02 	sts	0x02B9, r1
    8bae:	10 92 ba 02 	sts	0x02BA, r1
    8bb2:	10 92 bb 02 	sts	0x02BB, r1
    8bb6:	10 92 bc 02 	sts	0x02BC, r1
						proximityOffset[i] = 0;
    8bba:	10 92 92 02 	sts	0x0292, r1
    8bbe:	10 92 91 02 	sts	0x0291, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8bc2:	10 92 bd 02 	sts	0x02BD, r1
    8bc6:	10 92 be 02 	sts	0x02BE, r1
    8bca:	10 92 bf 02 	sts	0x02BF, r1
    8bce:	10 92 c0 02 	sts	0x02C0, r1
						proximityOffset[i] = 0;
    8bd2:	10 92 94 02 	sts	0x0294, r1
    8bd6:	10 92 93 02 	sts	0x0293, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8bda:	10 92 c1 02 	sts	0x02C1, r1
    8bde:	10 92 c2 02 	sts	0x02C2, r1
    8be2:	10 92 c3 02 	sts	0x02C3, r1
    8be6:	10 92 c4 02 	sts	0x02C4, r1
						proximityOffset[i] = 0;
    8bea:	10 92 96 02 	sts	0x0296, r1
    8bee:	10 92 95 02 	sts	0x0295, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8bf2:	10 92 c5 02 	sts	0x02C5, r1
    8bf6:	10 92 c6 02 	sts	0x02C6, r1
    8bfa:	10 92 c7 02 	sts	0x02C7, r1
    8bfe:	10 92 c8 02 	sts	0x02C8, r1
						proximityOffset[i] = 0;
    8c02:	10 92 98 02 	sts	0x0298, r1
    8c06:	10 92 97 02 	sts	0x0297, r1
					}
					accOffsetXSum = 0;
    8c0a:	10 92 49 04 	sts	0x0449, r1
    8c0e:	10 92 48 04 	sts	0x0448, r1
					accOffsetYSum = 0;
    8c12:	10 92 4b 04 	sts	0x044B, r1
    8c16:	10 92 4a 04 	sts	0x044A, r1
					accOffsetZSum = 0;
    8c1a:	10 92 4d 04 	sts	0x044D, r1
    8c1e:	10 92 4c 04 	sts	0x044C, r1

					calibrationCycle++;
    8c22:	d0 93 5e 04 	sts	0x045E, r29
    8c26:	c0 93 5d 04 	sts	0x045D, r28
    8c2a:	80 91 82 0b 	lds	r24, 0x0B82

					continue;					// the first time "proxUpdated" is set, all the proximity values saved in the array 
    8c2e:	59 cf       	rjmp	.-334    	; 0x8ae2 <calibrateSensors+0x5d0>

00008c30 <readAccelXYZ_1>:

void readAccelXYZ_1() {

	int i = 0;

	if(useAccel == USE_MMAX7455L) {
    8c30:	80 91 3b 04 	lds	r24, 0x043B
    8c34:	88 23       	and	r24, r24
    8c36:	79 f0       	breq	.+30     	; 0x8c56 <readAccelXYZ_1+0x26>
		for(i=0; i<2; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
		}
		return;

	} else if(useAccel == USE_ADXL345) {							
    8c38:	81 30       	cpi	r24, 0x01	; 1
    8c3a:	11 f1       	breq	.+68     	; 0x8c80 <readAccelXYZ_1+0x50>
		}
		return;

	} else {

		accX = 0;
    8c3c:	10 92 3d 04 	sts	0x043D, r1
    8c40:	10 92 3c 04 	sts	0x043C, r1
		accY = 0;
    8c44:	10 92 3f 04 	sts	0x043F, r1
    8c48:	10 92 3e 04 	sts	0x043E, r1
		accZ = 0;
    8c4c:	10 92 41 04 	sts	0x0441, r1
    8c50:	10 92 40 04 	sts	0x0440, r1
    8c54:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    8c56:	80 91 14 02 	lds	r24, 0x0214
    8c5a:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    8c5e:	80 e0       	ldi	r24, 0x00	; 0
    8c60:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    8c64:	80 91 14 02 	lds	r24, 0x0214
    8c68:	8f 5f       	subi	r24, 0xFF	; 255
    8c6a:	0e 94 cf 1f 	call	0x3f9e	; 0x3f9e <i2c_rep_start>

		for(i=0; i<2; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    8c6e:	0e 94 0f 20 	call	0x401e	; 0x401e <i2c_readAck>
    8c72:	80 93 52 04 	sts	0x0452, r24
    8c76:	0e 94 0f 20 	call	0x401e	; 0x401e <i2c_readAck>
    8c7a:	80 93 53 04 	sts	0x0453, r24
    8c7e:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    8c80:	80 91 14 02 	lds	r24, 0x0214
    8c84:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    8c88:	82 e3       	ldi	r24, 0x32	; 50
    8c8a:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    8c8e:	80 91 14 02 	lds	r24, 0x0214
    8c92:	8f 5f       	subi	r24, 0xFF	; 255
    8c94:	0e 94 cf 1f 	call	0x3f9e	; 0x3f9e <i2c_rep_start>

		for(i=0; i<3; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    8c98:	0e 94 0f 20 	call	0x401e	; 0x401e <i2c_readAck>
    8c9c:	80 93 52 04 	sts	0x0452, r24
    8ca0:	0e 94 0f 20 	call	0x401e	; 0x401e <i2c_readAck>
    8ca4:	80 93 53 04 	sts	0x0453, r24
    8ca8:	0e 94 0f 20 	call	0x401e	; 0x401e <i2c_readAck>
    8cac:	80 93 54 04 	sts	0x0454, r24
    8cb0:	08 95       	ret

00008cb2 <readAccelXYZ_2>:

void readAccelXYZ_2() {

	int i = 2;

	if(useAccel == USE_MMAX7455L) {
    8cb2:	80 91 3b 04 	lds	r24, 0x043B
    8cb6:	88 23       	and	r24, r24
    8cb8:	09 f0       	breq	.+2      	; 0x8cbc <readAccelXYZ_2+0xa>
    8cba:	4e c0       	rjmp	.+156    	; 0x8d58 <readAccelXYZ_2+0xa6>

		for(i=2; i<5; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    8cbc:	0e 94 0f 20 	call	0x401e	; 0x401e <i2c_readAck>
    8cc0:	80 93 54 04 	sts	0x0454, r24
		}

	} else if(useAccel == USE_ADXL345) {							

		for(i=3; i<5; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    8cc4:	0e 94 0f 20 	call	0x401e	; 0x401e <i2c_readAck>
    8cc8:	80 93 55 04 	sts	0x0455, r24
    8ccc:	0e 94 0f 20 	call	0x401e	; 0x401e <i2c_readAck>
    8cd0:	80 93 56 04 	sts	0x0456, r24
		}
		accBuff[i] = i2c_readNak();									// read last byte sending NACK
    8cd4:	0e 94 19 20 	call	0x4032	; 0x4032 <i2c_readNak>
    8cd8:	80 93 57 04 	sts	0x0457, r24
		i2c_stop();													// set stop conditon = release bus
    8cdc:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    8ce0:	80 91 82 0b 	lds	r24, 0x0B82
    8ce4:	88 23       	and	r24, r24
    8ce6:	09 f4       	brne	.+2      	; 0x8cea <readAccelXYZ_2+0x38>
    8ce8:	47 c0       	rjmp	.+142    	; 0x8d78 <readAccelXYZ_2+0xc6>
			accX = ((signed int)accBuff[1]<<8)|accBuff[0];    			// X axis
    8cea:	80 91 53 04 	lds	r24, 0x0453
    8cee:	99 27       	eor	r25, r25
    8cf0:	87 fd       	sbrc	r24, 7
    8cf2:	90 95       	com	r25
    8cf4:	98 2f       	mov	r25, r24
    8cf6:	88 27       	eor	r24, r24
    8cf8:	20 91 52 04 	lds	r18, 0x0452
    8cfc:	33 27       	eor	r19, r19
    8cfe:	27 fd       	sbrc	r18, 7
    8d00:	30 95       	com	r19
    8d02:	82 2b       	or	r24, r18
    8d04:	93 2b       	or	r25, r19
    8d06:	90 93 3d 04 	sts	0x043D, r25
    8d0a:	80 93 3c 04 	sts	0x043C, r24
			accY = ((signed int)accBuff[3]<<8)|accBuff[2];    			// Y axis
    8d0e:	80 91 55 04 	lds	r24, 0x0455
    8d12:	99 27       	eor	r25, r25
    8d14:	87 fd       	sbrc	r24, 7
    8d16:	90 95       	com	r25
    8d18:	98 2f       	mov	r25, r24
    8d1a:	88 27       	eor	r24, r24
    8d1c:	20 91 54 04 	lds	r18, 0x0454
    8d20:	33 27       	eor	r19, r19
    8d22:	27 fd       	sbrc	r18, 7
    8d24:	30 95       	com	r19
    8d26:	82 2b       	or	r24, r18
    8d28:	93 2b       	or	r25, r19
    8d2a:	90 93 3f 04 	sts	0x043F, r25
    8d2e:	80 93 3e 04 	sts	0x043E, r24
			accZ = ((signed int)accBuff[5]<<8)|accBuff[4];    			// Z axis
    8d32:	80 91 57 04 	lds	r24, 0x0457
    8d36:	99 27       	eor	r25, r25
    8d38:	87 fd       	sbrc	r24, 7
    8d3a:	90 95       	com	r25
    8d3c:	98 2f       	mov	r25, r24
    8d3e:	88 27       	eor	r24, r24
    8d40:	20 91 56 04 	lds	r18, 0x0456
    8d44:	33 27       	eor	r19, r19
    8d46:	27 fd       	sbrc	r18, 7
    8d48:	30 95       	com	r19
    8d4a:	82 2b       	or	r24, r18
    8d4c:	93 2b       	or	r25, r19
    8d4e:	90 93 41 04 	sts	0x0441, r25
    8d52:	80 93 40 04 	sts	0x0440, r24
    8d56:	08 95       	ret
			accX = (((signed int)accBuff[1]<<8)|accBuff[0])-accOffsetX;	// X axis
			accY = (((signed int)accBuff[3]<<8)|accBuff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    8d58:	81 30       	cpi	r24, 0x01	; 1
    8d5a:	09 f4       	brne	.+2      	; 0x8d5e <readAccelXYZ_2+0xac>
    8d5c:	b3 cf       	rjmp	.-154    	; 0x8cc4 <readAccelXYZ_2+0x12>
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
		}

	} else {

		accX = 0;
    8d5e:	10 92 3d 04 	sts	0x043D, r1
    8d62:	10 92 3c 04 	sts	0x043C, r1
		accY = 0;
    8d66:	10 92 3f 04 	sts	0x043F, r1
    8d6a:	10 92 3e 04 	sts	0x043E, r1
		accZ = 0;
    8d6e:	10 92 41 04 	sts	0x0441, r1
    8d72:	10 92 40 04 	sts	0x0440, r1
    8d76:	08 95       	ret
		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)accBuff[1]<<8)|accBuff[0];    			// X axis
			accY = ((signed int)accBuff[3]<<8)|accBuff[2];    			// Y axis
			accZ = ((signed int)accBuff[5]<<8)|accBuff[4];    			// Z axis
		} else {													// else return the calibrated values
			accX = (((signed int)accBuff[1]<<8)|accBuff[0])-accOffsetX;	// X axis
    8d78:	80 91 53 04 	lds	r24, 0x0453
    8d7c:	99 27       	eor	r25, r25
    8d7e:	87 fd       	sbrc	r24, 7
    8d80:	90 95       	com	r25
    8d82:	98 2f       	mov	r25, r24
    8d84:	88 27       	eor	r24, r24
    8d86:	20 91 52 04 	lds	r18, 0x0452
    8d8a:	33 27       	eor	r19, r19
    8d8c:	27 fd       	sbrc	r18, 7
    8d8e:	30 95       	com	r19
    8d90:	82 2b       	or	r24, r18
    8d92:	93 2b       	or	r25, r19
    8d94:	20 91 42 04 	lds	r18, 0x0442
    8d98:	30 91 43 04 	lds	r19, 0x0443
    8d9c:	82 1b       	sub	r24, r18
    8d9e:	93 0b       	sbc	r25, r19
    8da0:	90 93 3d 04 	sts	0x043D, r25
    8da4:	80 93 3c 04 	sts	0x043C, r24
			accY = (((signed int)accBuff[3]<<8)|accBuff[2])-accOffsetY;	// Y axis
    8da8:	80 91 55 04 	lds	r24, 0x0455
    8dac:	99 27       	eor	r25, r25
    8dae:	87 fd       	sbrc	r24, 7
    8db0:	90 95       	com	r25
    8db2:	98 2f       	mov	r25, r24
    8db4:	88 27       	eor	r24, r24
    8db6:	20 91 54 04 	lds	r18, 0x0454
    8dba:	33 27       	eor	r19, r19
    8dbc:	27 fd       	sbrc	r18, 7
    8dbe:	30 95       	com	r19
    8dc0:	82 2b       	or	r24, r18
    8dc2:	93 2b       	or	r25, r19
    8dc4:	20 91 44 04 	lds	r18, 0x0444
    8dc8:	30 91 45 04 	lds	r19, 0x0445
    8dcc:	82 1b       	sub	r24, r18
    8dce:	93 0b       	sbc	r25, r19
    8dd0:	90 93 3f 04 	sts	0x043F, r25
    8dd4:	80 93 3e 04 	sts	0x043E, r24
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
    8dd8:	80 91 57 04 	lds	r24, 0x0457
    8ddc:	99 27       	eor	r25, r25
    8dde:	87 fd       	sbrc	r24, 7
    8de0:	90 95       	com	r25
    8de2:	98 2f       	mov	r25, r24
    8de4:	88 27       	eor	r24, r24
    8de6:	20 91 56 04 	lds	r18, 0x0456
    8dea:	33 27       	eor	r19, r19
    8dec:	27 fd       	sbrc	r18, 7
    8dee:	30 95       	com	r19
    8df0:	82 2b       	or	r24, r18
    8df2:	93 2b       	or	r25, r19
    8df4:	20 91 46 04 	lds	r18, 0x0446
    8df8:	30 91 47 04 	lds	r19, 0x0447
    8dfc:	82 1b       	sub	r24, r18
    8dfe:	93 0b       	sbc	r25, r19
    8e00:	90 93 41 04 	sts	0x0441, r25
    8e04:	80 93 40 04 	sts	0x0440, r24
    8e08:	08 95       	ret

00008e0a <computeAngle>:

	}

}

void computeAngle() {
    8e0a:	ef 92       	push	r14
    8e0c:	ff 92       	push	r15
    8e0e:	0f 93       	push	r16
    8e10:	1f 93       	push	r17

	unsigned int abs_acc_z=abs(accZ);
    8e12:	80 91 40 04 	lds	r24, 0x0440
    8e16:	90 91 41 04 	lds	r25, 0x0441
    8e1a:	97 fd       	sbrc	r25, 7
    8e1c:	6c c0       	rjmp	.+216    	; 0x8ef6 <computeAngle+0xec>

	// check the robot motion plane (horizontal or vertical) based on the Z axes;
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
    8e1e:	85 31       	cpi	r24, 0x15	; 21
    8e20:	91 05       	cpc	r25, r1
    8e22:	08 f0       	brcs	.+2      	; 0x8e26 <computeAngle+0x1c>
    8e24:	54 c0       	rjmp	.+168    	; 0x8ece <computeAngle+0xc4>
		currPosition = HORIZONTAL_POS;
    8e26:	81 e0       	ldi	r24, 0x01	; 1
    8e28:	80 93 15 02 	sts	0x0215, r24
    8e2c:	21 e0       	ldi	r18, 0x01	; 1
	} else {
		currPosition = VERTICAL_POS;	
	}
	if(currPosition != robotPosition) {			
    8e2e:	80 91 16 02 	lds	r24, 0x0216
    8e32:	82 17       	cp	r24, r18
    8e34:	09 f4       	brne	.+2      	; 0x8e38 <computeAngle+0x2e>
    8e36:	53 c0       	rjmp	.+166    	; 0x8ede <computeAngle+0xd4>
		timesInSamePos++;
    8e38:	80 91 50 04 	lds	r24, 0x0450
    8e3c:	90 91 51 04 	lds	r25, 0x0451
    8e40:	01 96       	adiw	r24, 0x01	; 1
    8e42:	90 93 51 04 	sts	0x0451, r25
    8e46:	80 93 50 04 	sts	0x0450, r24
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
    8e4a:	88 3c       	cpi	r24, 0xC8	; 200
    8e4c:	91 05       	cpc	r25, r1
    8e4e:	08 f0       	brcs	.+2      	; 0x8e52 <computeAngle+0x48>
    8e50:	4b c0       	rjmp	.+150    	; 0x8ee8 <computeAngle+0xde>
	} else {
		timesInSamePos = 0;
	}

	// compute the angle using the X and Y axis
	thetaAcc = atan2((float)accX, (float)accY);
    8e52:	60 91 3c 04 	lds	r22, 0x043C
    8e56:	70 91 3d 04 	lds	r23, 0x043D
    8e5a:	88 27       	eor	r24, r24
    8e5c:	77 fd       	sbrc	r23, 7
    8e5e:	80 95       	com	r24
    8e60:	98 2f       	mov	r25, r24
    8e62:	0e 94 80 55 	call	0xab00	; 0xab00 <__floatsisf>
    8e66:	7b 01       	movw	r14, r22
    8e68:	8c 01       	movw	r16, r24
    8e6a:	60 91 3e 04 	lds	r22, 0x043E
    8e6e:	70 91 3f 04 	lds	r23, 0x043F
    8e72:	88 27       	eor	r24, r24
    8e74:	77 fd       	sbrc	r23, 7
    8e76:	80 95       	com	r24
    8e78:	98 2f       	mov	r25, r24
    8e7a:	0e 94 80 55 	call	0xab00	; 0xab00 <__floatsisf>
    8e7e:	9b 01       	movw	r18, r22
    8e80:	ac 01       	movw	r20, r24
    8e82:	c8 01       	movw	r24, r16
    8e84:	b7 01       	movw	r22, r14
    8e86:	0e 94 8b 54 	call	0xa916	; 0xa916 <atan2>
    8e8a:	60 93 b4 04 	sts	0x04B4, r22
    8e8e:	70 93 b5 04 	sts	0x04B5, r23
    8e92:	80 93 b6 04 	sts	0x04B6, r24
    8e96:	90 93 b7 04 	sts	0x04B7, r25
	currentAngle = (signed int)(thetaAcc*RAD_2_DEG);
    8e9a:	21 ee       	ldi	r18, 0xE1	; 225
    8e9c:	3e e2       	ldi	r19, 0x2E	; 46
    8e9e:	45 e6       	ldi	r20, 0x65	; 101
    8ea0:	52 e4       	ldi	r21, 0x42	; 66
    8ea2:	0e 94 99 56 	call	0xad32	; 0xad32 <__mulsf3>
    8ea6:	0e 94 4d 55 	call	0xaa9a	; 0xaa9a <__fixsfsi>
    8eaa:	9b 01       	movw	r18, r22
    8eac:	70 93 4f 04 	sts	0x044F, r23
    8eb0:	60 93 4e 04 	sts	0x044E, r22

	if(currentAngle < 0) {
    8eb4:	77 ff       	sbrs	r23, 7
    8eb6:	06 c0       	rjmp	.+12     	; 0x8ec4 <computeAngle+0xba>
		currentAngle = currentAngle + (signed int)360;	// angles from 0 to 360
    8eb8:	28 59       	subi	r18, 0x98	; 152
    8eba:	3e 4f       	sbci	r19, 0xFE	; 254
    8ebc:	30 93 4f 04 	sts	0x044F, r19
    8ec0:	20 93 4e 04 	sts	0x044E, r18
	}

}
    8ec4:	1f 91       	pop	r17
    8ec6:	0f 91       	pop	r16
    8ec8:	ff 90       	pop	r15
    8eca:	ef 90       	pop	r14
    8ecc:	08 95       	ret
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
		currPosition = HORIZONTAL_POS;
	} else {
		currPosition = VERTICAL_POS;	
    8ece:	10 92 15 02 	sts	0x0215, r1
    8ed2:	20 e0       	ldi	r18, 0x00	; 0
	}
	if(currPosition != robotPosition) {			
    8ed4:	80 91 16 02 	lds	r24, 0x0216
    8ed8:	82 17       	cp	r24, r18
    8eda:	09 f0       	breq	.+2      	; 0x8ede <computeAngle+0xd4>
    8edc:	ad cf       	rjmp	.-166    	; 0x8e38 <computeAngle+0x2e>
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
			robotPosition = currPosition;
		}
	} else {
		timesInSamePos = 0;
    8ede:	10 92 51 04 	sts	0x0451, r1
    8ee2:	10 92 50 04 	sts	0x0450, r1
    8ee6:	b5 cf       	rjmp	.-150    	; 0x8e52 <computeAngle+0x48>
		currPosition = VERTICAL_POS;	
	}
	if(currPosition != robotPosition) {			
		timesInSamePos++;
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
    8ee8:	10 92 51 04 	sts	0x0451, r1
    8eec:	10 92 50 04 	sts	0x0450, r1
			robotPosition = currPosition;
    8ef0:	20 93 16 02 	sts	0x0216, r18
    8ef4:	ae cf       	rjmp	.-164    	; 0x8e52 <computeAngle+0x48>

}

void computeAngle() {

	unsigned int abs_acc_z=abs(accZ);
    8ef6:	90 95       	com	r25
    8ef8:	81 95       	neg	r24
    8efa:	9f 4f       	sbci	r25, 0xFF	; 255
    8efc:	90 cf       	rjmp	.-224    	; 0x8e1e <computeAngle+0x14>

00008efe <writeCalibrationToFlash>:


#include "eepromIO.h"

void writeCalibrationToFlash() {	
	eeprom_update_block(calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
    8efe:	8a ee       	ldi	r24, 0xEA	; 234
    8f00:	98 e0       	ldi	r25, 0x08	; 8
    8f02:	6c e6       	ldi	r22, 0x6C	; 108
    8f04:	7f e0       	ldi	r23, 0x0F	; 15
    8f06:	40 e9       	ldi	r20, 0x90	; 144
    8f08:	50 e0       	ldi	r21, 0x00	; 0
    8f0a:	0e 94 2a 58 	call	0xb054	; 0xb054 <__eeupd_block_m2560>
	eeprom_update_word ((uint16_t*) CALIB_CHECK_ADDRESS, 0xAA55);   // to let know the calibration data are valid
    8f0e:	8a e6       	ldi	r24, 0x6A	; 106
    8f10:	9f e0       	ldi	r25, 0x0F	; 15
    8f12:	65 e5       	ldi	r22, 0x55	; 85
    8f14:	7a ea       	ldi	r23, 0xAA	; 170
    8f16:	0e 94 4c 58 	call	0xb098	; 0xb098 <__eeupd_word_m2560>
}
    8f1a:	08 95       	ret

00008f1c <readCalibrationFromFlash>:

void readCalibrationFromFlash() {
	eeprom_read_block (calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
    8f1c:	8a ee       	ldi	r24, 0xEA	; 234
    8f1e:	98 e0       	ldi	r25, 0x08	; 8
    8f20:	6c e6       	ldi	r22, 0x6C	; 108
    8f22:	7f e0       	ldi	r23, 0x0F	; 15
    8f24:	40 e9       	ldi	r20, 0x90	; 144
    8f26:	50 e0       	ldi	r21, 0x00	; 0
    8f28:	0e 94 0c 58 	call	0xb018	; 0xb018 <__eerd_block_m2560>
}
    8f2c:	08 95       	ret

00008f2e <irCommInitTransmitter>:
#include "irCommunication.h"


void irCommInitTransmitter() {
	irCommEnabled = IRCOMM_MODE_TRANSMIT;
    8f2e:	82 e0       	ldi	r24, 0x02	; 2
    8f30:	80 93 da 04 	sts	0x04DA, r24
	irCommState = IRCOMM_TX_IDLE_STATE;
    8f34:	81 e0       	ldi	r24, 0x01	; 1
    8f36:	80 93 dd 04 	sts	0x04DD, r24
}
    8f3a:	08 95       	ret

00008f3c <irCommInitReceiver>:

void irCommInitReceiver() {
	irCommEnabled = IRCOMM_MODE_RECEIVE;
    8f3c:	81 e0       	ldi	r24, 0x01	; 1
    8f3e:	80 93 da 04 	sts	0x04DA, r24
	irCommState = IRCOMM_RX_IDLE_STATE;
    8f42:	80 93 dd 04 	sts	0x04DD, r24
	irCommEnabledNext = IRCOMM_MODE_RECEIVE;
    8f46:	80 93 db 04 	sts	0x04DB, r24
}
    8f4a:	08 95       	ret

00008f4c <irCommInitVars>:

void irCommInitVars() {
	memset(irCommMaxSensorValueAdc, 0x00, 16);
    8f4c:	e0 91 3f 0b 	lds	r30, 0x0B3F
    8f50:	f0 91 40 0b 	lds	r31, 0x0B40
    8f54:	80 e1       	ldi	r24, 0x10	; 16
    8f56:	df 01       	movw	r26, r30
    8f58:	1d 92       	st	X+, r1
    8f5a:	8a 95       	dec	r24
    8f5c:	e9 f7       	brne	.-6      	; 0x8f58 <irCommInitVars+0xc>
	memset(irCommMinSensorValueAdc, 0xFF, 16);
    8f5e:	80 91 cf 05 	lds	r24, 0x05CF
    8f62:	90 91 d0 05 	lds	r25, 0x05D0
    8f66:	6f ef       	ldi	r22, 0xFF	; 255
    8f68:	70 e0       	ldi	r23, 0x00	; 0
    8f6a:	40 e1       	ldi	r20, 0x10	; 16
    8f6c:	50 e0       	ldi	r21, 0x00	; 0
    8f6e:	0e 94 05 58 	call	0xb00a	; 0xb00a <memset>
	irCommMode = IRCOMM_MODE_SENSORS_SAMPLING;
    8f72:	10 92 dc 04 	sts	0x04DC, r1
}
    8f76:	08 95       	ret

00008f78 <irCommInit>:

void irCommInit() {
	irCommProxValuesAdc = irCommProxValuesBuff1;
    8f78:	83 ed       	ldi	r24, 0xD3	; 211
    8f7a:	95 e0       	ldi	r25, 0x05	; 5
    8f7c:	90 93 72 08 	sts	0x0872, r25
    8f80:	80 93 71 08 	sts	0x0871, r24
	irCommProxValuesCurr = irCommProxValuesBuff2;
    8f84:	85 e1       	ldi	r24, 0x15	; 21
    8f86:	97 e0       	ldi	r25, 0x07	; 7
    8f88:	90 93 56 08 	sts	0x0856, r25
    8f8c:	80 93 55 08 	sts	0x0855, r24
	irCommMaxSensorValueAdc = irCommMaxSensorValueBuff1;
    8f90:	e0 e8       	ldi	r30, 0x80	; 128
    8f92:	f9 e0       	ldi	r31, 0x09	; 9
    8f94:	f0 93 40 0b 	sts	0x0B40, r31
    8f98:	e0 93 3f 0b 	sts	0x0B3F, r30
	irCommMaxSensorValueCurr = irCommMaxSensorValueBuff2;
    8f9c:	8e e6       	ldi	r24, 0x6E	; 110
    8f9e:	9b e0       	ldi	r25, 0x0B	; 11
    8fa0:	90 93 53 05 	sts	0x0553, r25
    8fa4:	80 93 52 05 	sts	0x0552, r24
	irCommMinSensorValueAdc = irCommMinSensorValueBuff1;
    8fa8:	87 e5       	ldi	r24, 0x57	; 87
    8faa:	98 e0       	ldi	r25, 0x08	; 8
    8fac:	90 93 d0 05 	sts	0x05D0, r25
    8fb0:	80 93 cf 05 	sts	0x05CF, r24
	irCommMinSensorValueCurr = irCommMinSensorValueBuff2;
    8fb4:	2a ed       	ldi	r18, 0xDA	; 218
    8fb6:	38 e0       	ldi	r19, 0x08	; 8
    8fb8:	30 93 3f 05 	sts	0x053F, r19
    8fbc:	20 93 3e 05 	sts	0x053E, r18
	irCommState = IRCOMM_RX_IDLE_STATE;
	irCommEnabledNext = IRCOMM_MODE_RECEIVE;
}

void irCommInitVars() {
	memset(irCommMaxSensorValueAdc, 0x00, 16);
    8fc0:	20 e1       	ldi	r18, 0x10	; 16
    8fc2:	df 01       	movw	r26, r30
    8fc4:	1d 92       	st	X+, r1
    8fc6:	2a 95       	dec	r18
    8fc8:	e9 f7       	brne	.-6      	; 0x8fc4 <irCommInit+0x4c>
	memset(irCommMinSensorValueAdc, 0xFF, 16);
    8fca:	6f ef       	ldi	r22, 0xFF	; 255
    8fcc:	70 e0       	ldi	r23, 0x00	; 0
    8fce:	40 e1       	ldi	r20, 0x10	; 16
    8fd0:	50 e0       	ldi	r21, 0x00	; 0
    8fd2:	0e 94 05 58 	call	0xb00a	; 0xb00a <memset>
	irCommMode = IRCOMM_MODE_SENSORS_SAMPLING;
    8fd6:	10 92 dc 04 	sts	0x04DC, r1
	irCommEnabled = IRCOMM_MODE_TRANSMIT;
	irCommState = IRCOMM_TX_IDLE_STATE;
}

void irCommInitReceiver() {
	irCommEnabled = IRCOMM_MODE_RECEIVE;
    8fda:	81 e0       	ldi	r24, 0x01	; 1
    8fdc:	80 93 da 04 	sts	0x04DA, r24
	irCommState = IRCOMM_RX_IDLE_STATE;
    8fe0:	80 93 dd 04 	sts	0x04DD, r24
	irCommEnabledNext = IRCOMM_MODE_RECEIVE;
    8fe4:	80 93 db 04 	sts	0x04DB, r24
	irCommMaxSensorValueCurr = irCommMaxSensorValueBuff2;
	irCommMinSensorValueAdc = irCommMinSensorValueBuff1;
	irCommMinSensorValueCurr = irCommMinSensorValueBuff2;
	irCommInitVars();
	irCommInitReceiver();
}
    8fe8:	08 95       	ret

00008fea <irCommDeinit>:

void irCommDeinit() {
	irCommEnabled = IRCOMM_MODE_SENSORS_SAMPLING;
    8fea:	10 92 da 04 	sts	0x04DA, r1
	irCommMode = IRCOMM_MODE_SENSORS_SAMPLING;
    8fee:	10 92 dc 04 	sts	0x04DC, r1
}
    8ff2:	08 95       	ret

00008ff4 <resetDebugVariables>:

void resetDebugVariables() {
    8ff4:	ef 92       	push	r14
    8ff6:	ff 92       	push	r15
    8ff8:	0f 93       	push	r16
    8ffa:	1f 93       	push	r17
    8ffc:	cf 93       	push	r28
    8ffe:	df 93       	push	r29
	irCommRxMaxSensorIndexTemp=0;
    9000:	10 92 f7 04 	sts	0x04F7, r1
	irCommRxMaxDiffIndexTemp=0;
    9004:	10 92 f8 04 	sts	0x04F8, r1
	irCommMaxSensorValueCurrIndexTemp=0;
    9008:	10 92 fb 04 	sts	0x04FB, r1
	irCommMinSensorValueCurrIndexTemp=0;
    900c:	10 92 fc 04 	sts	0x04FC, r1
	memset(irCommRxMaxSensorTemp, 0xFF, 4);
    9010:	ee 24       	eor	r14, r14
    9012:	ea 94       	dec	r14
    9014:	fe 2c       	mov	r15, r14
    9016:	87 01       	movw	r16, r14
    9018:	e0 92 31 0b 	sts	0x0B31, r14
    901c:	f0 92 32 0b 	sts	0x0B32, r15
    9020:	00 93 33 0b 	sts	0x0B33, r16
    9024:	10 93 34 0b 	sts	0x0B34, r17
	memset(irCommRxMaxDiffTemp, 0xFF, 4);
    9028:	e0 92 6a 0b 	sts	0x0B6A, r14
    902c:	f0 92 6b 0b 	sts	0x0B6B, r15
    9030:	00 93 6c 0b 	sts	0x0B6C, r16
    9034:	10 93 6d 0b 	sts	0x0B6D, r17
	memset(irCommMaxSensorValueCurrTemp, 0xFF, 4);
    9038:	e0 92 40 05 	sts	0x0540, r14
    903c:	f0 92 41 05 	sts	0x0541, r15
    9040:	00 93 42 05 	sts	0x0542, r16
    9044:	10 93 43 05 	sts	0x0543, r17
	memset(irCommMinSensorValueCurrTemp, 0xFF, 4);
    9048:	e0 92 35 0b 	sts	0x0B35, r14
    904c:	f0 92 36 0b 	sts	0x0B36, r15
    9050:	00 93 37 0b 	sts	0x0B37, r16
    9054:	10 93 38 0b 	sts	0x0B38, r17

	irCommStateIndexTemp = 0;					
    9058:	10 92 04 05 	sts	0x0504, r1
	memset(irCommStateTemp, 0xFF, 14);
    905c:	84 e4       	ldi	r24, 0x44	; 68
    905e:	95 e0       	ldi	r25, 0x05	; 5
    9060:	6f ef       	ldi	r22, 0xFF	; 255
    9062:	70 e0       	ldi	r23, 0x00	; 0
    9064:	4e e0       	ldi	r20, 0x0E	; 14
    9066:	50 e0       	ldi	r21, 0x00	; 0
    9068:	0e 94 05 58 	call	0xb00a	; 0xb00a <memset>

	irCommShiftCountFinalIndexTemp = 0;
    906c:	10 92 fe 04 	sts	0x04FE, r1
	memset(irCommShiftCountFinalTemp, 0xFF, 2);
    9070:	cf ef       	ldi	r28, 0xFF	; 255
    9072:	df ef       	ldi	r29, 0xFF	; 255
    9074:	d0 93 3e 0b 	sts	0x0B3E, r29
    9078:	c0 93 3d 0b 	sts	0x0B3D, r28
	irCommRxStartBitDetectedIndexTemp = 0;
    907c:	10 92 03 05 	sts	0x0503, r1
	memset(irCommRxStartBitDetectedTemp, 0xFF, 2);
    9080:	d0 93 7e 05 	sts	0x057E, r29
    9084:	c0 93 7d 05 	sts	0x057D, r28
	irCommSwitchCountIndexTemp = 0;
    9088:	10 92 fa 04 	sts	0x04FA, r1
	memset(irCommSwitchCountTemp, 0xFF, 2);
    908c:	d0 93 5a 05 	sts	0x055A, r29
    9090:	c0 93 59 05 	sts	0x0559, r28
	irCommMaxSensorSignalFiltIndexTemp = 0;
    9094:	10 92 f6 04 	sts	0x04F6, r1
	memset(irCommMaxSensorSignalFiltTemp, 0xFF, 80);
    9098:	8f e7       	ldi	r24, 0x7F	; 127
    909a:	95 e0       	ldi	r25, 0x05	; 5
    909c:	6f ef       	ldi	r22, 0xFF	; 255
    909e:	70 e0       	ldi	r23, 0x00	; 0
    90a0:	40 e5       	ldi	r20, 0x50	; 80
    90a2:	50 e0       	ldi	r21, 0x00	; 0
    90a4:	0e 94 05 58 	call	0xb00a	; 0xb00a <memset>
	irCommMaxSensorSignalIndexTemp = 0;
    90a8:	10 92 f5 04 	sts	0x04F5, r1
	memset(irCommMaxSensorSignalTemp, 0xFF, 80);
    90ac:	83 e7       	ldi	r24, 0x73	; 115
    90ae:	98 e0       	ldi	r25, 0x08	; 8
    90b0:	6f ef       	ldi	r22, 0xFF	; 255
    90b2:	70 e0       	ldi	r23, 0x00	; 0
    90b4:	40 e5       	ldi	r20, 0x50	; 80
    90b6:	50 e0       	ldi	r21, 0x00	; 0
    90b8:	0e 94 05 58 	call	0xb00a	; 0xb00a <memset>
	irCommProxMeanIndexTemp = 0;
    90bc:	10 92 f9 04 	sts	0x04F9, r1
	memset(irCommProxMeanTemp, 0xFF, 4);
    90c0:	e0 92 77 05 	sts	0x0577, r14
    90c4:	f0 92 78 05 	sts	0x0578, r15
    90c8:	00 93 79 05 	sts	0x0579, r16
    90cc:	10 93 7a 05 	sts	0x057A, r17
	irCommComputeShiftIndexTemp = 0;
    90d0:	10 92 00 05 	sts	0x0500, r1
	memset(irCommComputeShiftTemp, 0xFF, 2);
    90d4:	d0 93 75 05 	sts	0x0575, r29
    90d8:	c0 93 74 05 	sts	0x0574, r28
	irCommShiftCountIndexTemp = 0;
    90dc:	10 92 fd 04 	sts	0x04FD, r1
	memset(irCommShiftCountTemp, 0xFF, 2);
    90e0:	d0 93 84 0b 	sts	0x0B84, r29
    90e4:	c0 93 83 0b 	sts	0x0B83, r28
	irCommRxPeakHighToLowIndexTemp = 0;
    90e8:	10 92 01 05 	sts	0x0501, r1
	memset(irCommRxPeakHighToLowTemp, 0xFF, 2);
    90ec:	d0 93 d2 05 	sts	0x05D2, r29
    90f0:	c0 93 d1 05 	sts	0x05D1, r28
	irCommRxStartPeakDurationIndexTemp = 0;
    90f4:	10 92 02 05 	sts	0x0502, r1
	memset(irCommRxStartPeakDurationTemp, 0xFF, 2);
    90f8:	d0 93 14 07 	sts	0x0714, r29
    90fc:	c0 93 13 07 	sts	0x0713, r28
	irCommStartDiffIndexTemp = 0;
    9100:	10 92 ff 04 	sts	0x04FF, r1
	memset(irCommSyncStateTemp, 0xFF, 2);
    9104:	d0 93 73 05 	sts	0x0573, r29
    9108:	c0 93 72 05 	sts	0x0572, r28
	irCommSyncStateIndexTemp = 0;
    910c:	10 92 05 05 	sts	0x0505, r1
	memset(irCommBitsSignalTemp, 0xFF, 400);
    9110:	8f e9       	ldi	r24, 0x9F	; 159
    9112:	99 e0       	ldi	r25, 0x09	; 9
    9114:	6f ef       	ldi	r22, 0xFF	; 255
    9116:	70 e0       	ldi	r23, 0x00	; 0
    9118:	40 e9       	ldi	r20, 0x90	; 144
    911a:	51 e0       	ldi	r21, 0x01	; 1
    911c:	0e 94 05 58 	call	0xb00a	; 0xb00a <memset>
	irCommBitsSignalIndexTemp = 0;
    9120:	10 92 06 05 	sts	0x0506, r1
	memset(irCommRxBitReceivedTemp, 0xFF, 10);
    9124:	87 e6       	ldi	r24, 0x67	; 103
    9126:	98 e0       	ldi	r25, 0x08	; 8
    9128:	6f ef       	ldi	r22, 0xFF	; 255
    912a:	70 e0       	ldi	r23, 0x00	; 0
    912c:	4a e0       	ldi	r20, 0x0A	; 10
    912e:	50 e0       	ldi	r21, 0x00	; 0
    9130:	0e 94 05 58 	call	0xb00a	; 0xb00a <memset>
	irCommRxBitReceivedIndexTemp = 0;
    9134:	10 92 07 05 	sts	0x0507, r1
	
	
}
    9138:	df 91       	pop	r29
    913a:	cf 91       	pop	r28
    913c:	1f 91       	pop	r17
    913e:	0f 91       	pop	r16
    9140:	ff 90       	pop	r15
    9142:	ef 90       	pop	r14
    9144:	08 95       	ret

00009146 <irCommTasks>:

void irCommTasks() {
    9146:	2f 92       	push	r2
    9148:	3f 92       	push	r3
    914a:	5f 92       	push	r5
    914c:	6f 92       	push	r6
    914e:	7f 92       	push	r7
    9150:	8f 92       	push	r8
    9152:	9f 92       	push	r9
    9154:	af 92       	push	r10
    9156:	bf 92       	push	r11
    9158:	cf 92       	push	r12
    915a:	df 92       	push	r13
    915c:	ef 92       	push	r14
    915e:	ff 92       	push	r15
    9160:	0f 93       	push	r16
    9162:	1f 93       	push	r17
    9164:	cf 93       	push	r28
    9166:	df 93       	push	r29
	int i = 0;

	if(irCommMode==IRCOMM_MODE_RECEIVE) {
    9168:	00 91 dc 04 	lds	r16, 0x04DC
    916c:	01 30       	cpi	r16, 0x01	; 1
    916e:	09 f4       	brne	.+2      	; 0x9172 <irCommTasks+0x2c>
    9170:	cd c0       	rjmp	.+410    	; 0x930c <irCommTasks+0x1c6>
			case IRCOMM_RX_STOP:
				break;
					
		}

	} else if(irCommMode==IRCOMM_MODE_TRANSMIT) {
    9172:	02 30       	cpi	r16, 0x02	; 2
    9174:	91 f0       	breq	.+36     	; 0x919a <irCommTasks+0x54>

		}

	}

}
    9176:	df 91       	pop	r29
    9178:	cf 91       	pop	r28
    917a:	1f 91       	pop	r17
    917c:	0f 91       	pop	r16
    917e:	ff 90       	pop	r15
    9180:	ef 90       	pop	r14
    9182:	df 90       	pop	r13
    9184:	cf 90       	pop	r12
    9186:	bf 90       	pop	r11
    9188:	af 90       	pop	r10
    918a:	9f 90       	pop	r9
    918c:	8f 90       	pop	r8
    918e:	7f 90       	pop	r7
    9190:	6f 90       	pop	r6
    9192:	5f 90       	pop	r5
    9194:	3f 90       	pop	r3
    9196:	2f 90       	pop	r2
    9198:	08 95       	ret
					
		}

	} else if(irCommMode==IRCOMM_MODE_TRANSMIT) {

		switch(irCommState) {
    919a:	80 91 dd 04 	lds	r24, 0x04DD
    919e:	82 30       	cpi	r24, 0x02	; 2
    91a0:	09 f4       	brne	.+2      	; 0x91a4 <irCommTasks+0x5e>
    91a2:	c8 c2       	rjmp	.+1424   	; 0x9734 <irCommTasks+0x5ee>
    91a4:	85 30       	cpi	r24, 0x05	; 5
    91a6:	39 f7       	brne	.-50     	; 0x9176 <irCommTasks+0x30>
				break;

			case IRCOMM_TX_PREPARE_TRANSMISSION:				
				//updateBlueLed(255);
				//updateBlueLed(0);
				irCommTickCounter = getTime100MicroSec()-irCommTickCounter2;
    91a8:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
    91ac:	20 91 e5 04 	lds	r18, 0x04E5
    91b0:	30 91 e6 04 	lds	r19, 0x04E6
    91b4:	40 91 e7 04 	lds	r20, 0x04E7
    91b8:	50 91 e8 04 	lds	r21, 0x04E8
    91bc:	62 1b       	sub	r22, r18
    91be:	73 0b       	sbc	r23, r19
    91c0:	84 0b       	sbc	r24, r20
    91c2:	95 0b       	sbc	r25, r21
    91c4:	60 93 e1 04 	sts	0x04E1, r22
    91c8:	70 93 e2 04 	sts	0x04E2, r23
    91cc:	80 93 e3 04 	sts	0x04E3, r24
    91d0:	90 93 e4 04 	sts	0x04E4, r25
				irCommTickCounter2 = getTime100MicroSec();
    91d4:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
    91d8:	60 93 e5 04 	sts	0x04E5, r22
    91dc:	70 93 e6 04 	sts	0x04E6, r23
    91e0:	80 93 e7 04 	sts	0x04E7, r24
    91e4:	90 93 e8 04 	sts	0x04E8, r25
				irCommTxBitToTransmit[0] = 2;	// start bit 1
    91e8:	00 93 5c 05 	sts	0x055C, r16
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
    91ec:	83 e0       	ldi	r24, 0x03	; 3
    91ee:	80 93 5d 05 	sts	0x055D, r24
    91f2:	80 91 2d 05 	lds	r24, 0x052D
    91f6:	90 e0       	ldi	r25, 0x00	; 0
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    91f8:	9c 01       	movw	r18, r24
    91fa:	21 70       	andi	r18, 0x01	; 1
    91fc:	30 70       	andi	r19, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    91fe:	20 93 65 05 	sts	0x0565, r18
	irCommRxBitReceivedIndexTemp = 0;
	
	
}

void irCommTasks() {
    9202:	41 e0       	ldi	r20, 0x01	; 1
    9204:	21 30       	cpi	r18, 0x01	; 1
    9206:	31 05       	cpc	r19, r1
    9208:	09 f0       	breq	.+2      	; 0x920c <irCommTasks+0xc6>
    920a:	40 e0       	ldi	r20, 0x00	; 0
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    920c:	9c 01       	movw	r18, r24
    920e:	35 95       	asr	r19
    9210:	27 95       	ror	r18
    9212:	21 70       	andi	r18, 0x01	; 1
    9214:	30 70       	andi	r19, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    9216:	20 93 64 05 	sts	0x0564, r18
					if(irCommTempValue==1) {
    921a:	21 30       	cpi	r18, 0x01	; 1
    921c:	31 05       	cpc	r19, r1
    921e:	09 f4       	brne	.+2      	; 0x9222 <irCommTasks+0xdc>
    9220:	a0 c7       	rjmp	.+3904   	; 0xa162 <irCommTasks+0x101c>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    9222:	9c 01       	movw	r18, r24
    9224:	35 95       	asr	r19
    9226:	27 95       	ror	r18
    9228:	35 95       	asr	r19
    922a:	27 95       	ror	r18
    922c:	21 70       	andi	r18, 0x01	; 1
    922e:	30 70       	andi	r19, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    9230:	20 93 63 05 	sts	0x0563, r18
					if(irCommTempValue==1) {
    9234:	21 30       	cpi	r18, 0x01	; 1
    9236:	31 05       	cpc	r19, r1
    9238:	09 f4       	brne	.+2      	; 0x923c <irCommTasks+0xf6>
    923a:	91 c7       	rjmp	.+3874   	; 0xa15e <irCommTasks+0x1018>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    923c:	9c 01       	movw	r18, r24
    923e:	35 95       	asr	r19
    9240:	27 95       	ror	r18
    9242:	35 95       	asr	r19
    9244:	27 95       	ror	r18
    9246:	35 95       	asr	r19
    9248:	27 95       	ror	r18
    924a:	21 70       	andi	r18, 0x01	; 1
    924c:	30 70       	andi	r19, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    924e:	20 93 62 05 	sts	0x0562, r18
					if(irCommTempValue==1) {
    9252:	21 30       	cpi	r18, 0x01	; 1
    9254:	31 05       	cpc	r19, r1
    9256:	09 f4       	brne	.+2      	; 0x925a <irCommTasks+0x114>
    9258:	80 c7       	rjmp	.+3840   	; 0xa15a <irCommTasks+0x1014>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    925a:	9c 01       	movw	r18, r24
    925c:	35 95       	asr	r19
    925e:	27 95       	ror	r18
    9260:	35 95       	asr	r19
    9262:	27 95       	ror	r18
    9264:	35 95       	asr	r19
    9266:	27 95       	ror	r18
    9268:	35 95       	asr	r19
    926a:	27 95       	ror	r18
    926c:	21 70       	andi	r18, 0x01	; 1
    926e:	30 70       	andi	r19, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    9270:	20 93 61 05 	sts	0x0561, r18
					if(irCommTempValue==1) {
    9274:	21 30       	cpi	r18, 0x01	; 1
    9276:	31 05       	cpc	r19, r1
    9278:	09 f4       	brne	.+2      	; 0x927c <irCommTasks+0x136>
    927a:	6d c7       	rjmp	.+3802   	; 0xa156 <irCommTasks+0x1010>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    927c:	9c 01       	movw	r18, r24
    927e:	35 95       	asr	r19
    9280:	27 95       	ror	r18
    9282:	35 95       	asr	r19
    9284:	27 95       	ror	r18
    9286:	35 95       	asr	r19
    9288:	27 95       	ror	r18
    928a:	35 95       	asr	r19
    928c:	27 95       	ror	r18
    928e:	35 95       	asr	r19
    9290:	27 95       	ror	r18
    9292:	21 70       	andi	r18, 0x01	; 1
    9294:	30 70       	andi	r19, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    9296:	20 93 60 05 	sts	0x0560, r18
					if(irCommTempValue==1) {
    929a:	21 30       	cpi	r18, 0x01	; 1
    929c:	31 05       	cpc	r19, r1
    929e:	09 f4       	brne	.+2      	; 0x92a2 <irCommTasks+0x15c>
    92a0:	6e c7       	rjmp	.+3804   	; 0xa17e <irCommTasks+0x1038>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    92a2:	9c 01       	movw	r18, r24
    92a4:	02 2e       	mov	r0, r18
    92a6:	23 2f       	mov	r18, r19
    92a8:	00 0c       	add	r0, r0
    92aa:	22 1f       	adc	r18, r18
    92ac:	33 0b       	sbc	r19, r19
    92ae:	00 0c       	add	r0, r0
    92b0:	22 1f       	adc	r18, r18
    92b2:	33 1f       	adc	r19, r19
    92b4:	21 70       	andi	r18, 0x01	; 1
    92b6:	30 70       	andi	r19, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    92b8:	20 93 5f 05 	sts	0x055F, r18
					if(irCommTempValue==1) {
    92bc:	21 30       	cpi	r18, 0x01	; 1
    92be:	31 05       	cpc	r19, r1
    92c0:	09 f4       	brne	.+2      	; 0x92c4 <irCommTasks+0x17e>
    92c2:	51 c7       	rjmp	.+3746   	; 0xa166 <irCommTasks+0x1020>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    92c4:	88 0f       	add	r24, r24
    92c6:	89 2f       	mov	r24, r25
    92c8:	88 1f       	adc	r24, r24
    92ca:	99 0b       	sbc	r25, r25
    92cc:	91 95       	neg	r25
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    92ce:	80 93 5e 05 	sts	0x055E, r24
					if(irCommTempValue==1) {
    92d2:	81 30       	cpi	r24, 0x01	; 1
    92d4:	91 05       	cpc	r25, r1
    92d6:	09 f4       	brne	.+2      	; 0x92da <irCommTasks+0x194>
    92d8:	54 c7       	rjmp	.+3752   	; 0xa182 <irCommTasks+0x103c>
						irCommTxCrc++;
    92da:	90 93 df 04 	sts	0x04DF, r25
    92de:	80 93 de 04 	sts	0x04DE, r24
					}
					//irCommTxBitToTransmit[9-i] = 2;
				}
				irCommTxCrc = irCommTxCrc % 4;
    92e2:	43 70       	andi	r20, 0x03	; 3
				irCommTxCrc = 4 - irCommTxCrc;
    92e4:	84 e0       	ldi	r24, 0x04	; 4
    92e6:	84 1b       	sub	r24, r20
    92e8:	80 93 33 05 	sts	0x0533, r24
				irCommTxBitToTransmit[10] = (irCommTxCrc>>1)&0x01;
    92ec:	98 2f       	mov	r25, r24
    92ee:	96 95       	lsr	r25
    92f0:	91 70       	andi	r25, 0x01	; 1
    92f2:	90 93 66 05 	sts	0x0566, r25
				irCommTxBitToTransmit[11] = irCommTxCrc&0x01;	
    92f6:	81 70       	andi	r24, 0x01	; 1
    92f8:	80 93 67 05 	sts	0x0567, r24
				irCommTxBitCount = 0;							
    92fc:	10 92 34 05 	sts	0x0534, r1
				irCommTxPulseState = 0;	
    9300:	10 92 35 05 	sts	0x0535, r1
				irCommState = IRCOMM_TX_COMPUTE_TIMINGS;				
    9304:	82 e0       	ldi	r24, 0x02	; 2
    9306:	80 93 dd 04 	sts	0x04DD, r24
				break;
    930a:	35 cf       	rjmp	.-406    	; 0x9176 <irCommTasks+0x30>
void irCommTasks() {
	int i = 0;

	if(irCommMode==IRCOMM_MODE_RECEIVE) {

		switch(irCommState) {
    930c:	10 91 dd 04 	lds	r17, 0x04DD
    9310:	13 30       	cpi	r17, 0x03	; 3
    9312:	09 f4       	brne	.+2      	; 0x9316 <irCommTasks+0x1d0>
    9314:	d9 c2       	rjmp	.+1458   	; 0x98c8 <irCommTasks+0x782>
    9316:	14 30       	cpi	r17, 0x04	; 4
    9318:	08 f0       	brcs	.+2      	; 0x931c <irCommTasks+0x1d6>
    931a:	3b c2       	rjmp	.+1142   	; 0x9792 <irCommTasks+0x64c>
    931c:	11 30       	cpi	r17, 0x01	; 1
    931e:	09 f4       	brne	.+2      	; 0x9322 <irCommTasks+0x1dc>
    9320:	74 c6       	rjmp	.+3304   	; 0xa00a <irCommTasks+0xec4>
    9322:	12 30       	cpi	r17, 0x02	; 2
    9324:	09 f0       	breq	.+2      	; 0x9328 <irCommTasks+0x1e2>
    9326:	27 cf       	rjmp	.-434    	; 0x9176 <irCommTasks+0x30>
#include "irCommunication.h"


void irCommInitTransmitter() {
	irCommEnabled = IRCOMM_MODE_TRANSMIT;
	irCommState = IRCOMM_TX_IDLE_STATE;
    9328:	a0 91 52 05 	lds	r26, 0x0552
    932c:	b0 91 53 05 	lds	r27, 0x0553
    9330:	e0 91 3e 05 	lds	r30, 0x053E
    9334:	f0 91 3f 05 	lds	r31, 0x053F
    9338:	40 91 2b 05 	lds	r20, 0x052B
				break;

			case IRCOMM_RX_MAX_SENSOR_STATE:
				// check from how many sensors the robot is receiving a possible message
				for(i=0; i<8; i++) {
					if((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    933c:	8d 91       	ld	r24, X+
    933e:	9c 91       	ld	r25, X
    9340:	11 97       	sbiw	r26, 0x01	; 1
    9342:	20 81       	ld	r18, Z
    9344:	31 81       	ldd	r19, Z+1	; 0x01
    9346:	82 1b       	sub	r24, r18
    9348:	93 0b       	sbc	r25, r19
    934a:	80 35       	cpi	r24, 0x50	; 80
    934c:	91 05       	cpc	r25, r1
    934e:	1c f0       	brlt	.+6      	; 0x9356 <irCommTasks+0x210>
						irCommRxNumReceivingSensors++;
    9350:	4f 5f       	subi	r20, 0xFF	; 255
    9352:	40 93 2b 05 	sts	0x052B, r20
				break;

			case IRCOMM_RX_MAX_SENSOR_STATE:
				// check from how many sensors the robot is receiving a possible message
				for(i=0; i<8; i++) {
					if((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    9356:	12 96       	adiw	r26, 0x02	; 2
    9358:	8d 91       	ld	r24, X+
    935a:	9c 91       	ld	r25, X
    935c:	13 97       	sbiw	r26, 0x03	; 3
    935e:	22 81       	ldd	r18, Z+2	; 0x02
    9360:	33 81       	ldd	r19, Z+3	; 0x03
    9362:	82 1b       	sub	r24, r18
    9364:	93 0b       	sbc	r25, r19
    9366:	80 35       	cpi	r24, 0x50	; 80
    9368:	91 05       	cpc	r25, r1
    936a:	0c f0       	brlt	.+2      	; 0x936e <irCommTasks+0x228>
    936c:	29 c7       	rjmp	.+3666   	; 0xa1c0 <irCommTasks+0x107a>
    936e:	40 91 2b 05 	lds	r20, 0x052B
    9372:	14 96       	adiw	r26, 0x04	; 4
    9374:	8d 91       	ld	r24, X+
    9376:	9c 91       	ld	r25, X
    9378:	15 97       	sbiw	r26, 0x05	; 5
    937a:	24 81       	ldd	r18, Z+4	; 0x04
    937c:	35 81       	ldd	r19, Z+5	; 0x05
    937e:	82 1b       	sub	r24, r18
    9380:	93 0b       	sbc	r25, r19
    9382:	80 35       	cpi	r24, 0x50	; 80
    9384:	91 05       	cpc	r25, r1
    9386:	0c f0       	brlt	.+2      	; 0x938a <irCommTasks+0x244>
    9388:	17 c7       	rjmp	.+3630   	; 0xa1b8 <irCommTasks+0x1072>
    938a:	40 91 2b 05 	lds	r20, 0x052B
    938e:	16 96       	adiw	r26, 0x06	; 6
    9390:	8d 91       	ld	r24, X+
    9392:	9c 91       	ld	r25, X
    9394:	17 97       	sbiw	r26, 0x07	; 7
    9396:	26 81       	ldd	r18, Z+6	; 0x06
    9398:	37 81       	ldd	r19, Z+7	; 0x07
    939a:	82 1b       	sub	r24, r18
    939c:	93 0b       	sbc	r25, r19
    939e:	80 35       	cpi	r24, 0x50	; 80
    93a0:	91 05       	cpc	r25, r1
    93a2:	0c f0       	brlt	.+2      	; 0x93a6 <irCommTasks+0x260>
    93a4:	05 c7       	rjmp	.+3594   	; 0xa1b0 <irCommTasks+0x106a>
    93a6:	40 91 2b 05 	lds	r20, 0x052B
    93aa:	18 96       	adiw	r26, 0x08	; 8
    93ac:	8d 91       	ld	r24, X+
    93ae:	9c 91       	ld	r25, X
    93b0:	19 97       	sbiw	r26, 0x09	; 9
    93b2:	20 85       	ldd	r18, Z+8	; 0x08
    93b4:	31 85       	ldd	r19, Z+9	; 0x09
    93b6:	82 1b       	sub	r24, r18
    93b8:	93 0b       	sbc	r25, r19
    93ba:	80 35       	cpi	r24, 0x50	; 80
    93bc:	91 05       	cpc	r25, r1
    93be:	0c f0       	brlt	.+2      	; 0x93c2 <irCommTasks+0x27c>
    93c0:	f3 c6       	rjmp	.+3558   	; 0xa1a8 <irCommTasks+0x1062>
    93c2:	40 91 2b 05 	lds	r20, 0x052B
    93c6:	1a 96       	adiw	r26, 0x0a	; 10
    93c8:	8d 91       	ld	r24, X+
    93ca:	9c 91       	ld	r25, X
    93cc:	1b 97       	sbiw	r26, 0x0b	; 11
    93ce:	22 85       	ldd	r18, Z+10	; 0x0a
    93d0:	33 85       	ldd	r19, Z+11	; 0x0b
    93d2:	82 1b       	sub	r24, r18
    93d4:	93 0b       	sbc	r25, r19
    93d6:	80 35       	cpi	r24, 0x50	; 80
    93d8:	91 05       	cpc	r25, r1
    93da:	0c f0       	brlt	.+2      	; 0x93de <irCommTasks+0x298>
    93dc:	f9 c6       	rjmp	.+3570   	; 0xa1d0 <irCommTasks+0x108a>
    93de:	40 91 2b 05 	lds	r20, 0x052B
    93e2:	1c 96       	adiw	r26, 0x0c	; 12
    93e4:	8d 91       	ld	r24, X+
    93e6:	9c 91       	ld	r25, X
    93e8:	1d 97       	sbiw	r26, 0x0d	; 13
    93ea:	24 85       	ldd	r18, Z+12	; 0x0c
    93ec:	35 85       	ldd	r19, Z+13	; 0x0d
    93ee:	82 1b       	sub	r24, r18
    93f0:	93 0b       	sbc	r25, r19
    93f2:	80 35       	cpi	r24, 0x50	; 80
    93f4:	91 05       	cpc	r25, r1
    93f6:	0c f0       	brlt	.+2      	; 0x93fa <irCommTasks+0x2b4>
    93f8:	e7 c6       	rjmp	.+3534   	; 0xa1c8 <irCommTasks+0x1082>
    93fa:	40 91 2b 05 	lds	r20, 0x052B
    93fe:	1e 96       	adiw	r26, 0x0e	; 14
    9400:	8d 91       	ld	r24, X+
    9402:	9c 91       	ld	r25, X
    9404:	1f 97       	sbiw	r26, 0x0f	; 15
    9406:	26 85       	ldd	r18, Z+14	; 0x0e
    9408:	37 85       	ldd	r19, Z+15	; 0x0f
    940a:	82 1b       	sub	r24, r18
    940c:	93 0b       	sbc	r25, r19
    940e:	80 35       	cpi	r24, 0x50	; 80
    9410:	91 05       	cpc	r25, r1
    9412:	0c f0       	brlt	.+2      	; 0x9416 <irCommTasks+0x2d0>
    9414:	c4 c6       	rjmp	.+3464   	; 0xa19e <irCommTasks+0x1058>
    9416:	80 91 2b 05 	lds	r24, 0x052B
						irCommRxNumReceivingSensors++;
					}					
				}
				if(irCommRxNumReceivingSensors==0) {
    941a:	88 23       	and	r24, r24
    941c:	09 f4       	brne	.+2      	; 0x9420 <irCommTasks+0x2da>
    941e:	1f c7       	rjmp	.+3646   	; 0xa25e <irCommTasks+0x1118>
						irCommRxMaxSensor++;
					} else {
						irCommRxMaxSensor = 0;
					}
				} else {
					if(irCommRxStartBitDetected==0) {
    9420:	80 91 24 05 	lds	r24, 0x0524
    9424:	88 23       	and	r24, r24
    9426:	09 f0       	breq	.+2      	; 0x942a <irCommTasks+0x2e4>
    9428:	d7 c6       	rjmp	.+3502   	; 0xa1d8 <irCommTasks+0x1092>
						// start listening from the next sensor
						if(irCommRxMaxSensor < 7) {
    942a:	20 91 29 05 	lds	r18, 0x0529
    942e:	30 91 2a 05 	lds	r19, 0x052A
    9432:	27 30       	cpi	r18, 0x07	; 7
    9434:	31 05       	cpc	r19, r1
    9436:	0c f0       	brlt	.+2      	; 0x943a <irCommTasks+0x2f4>
    9438:	db c7       	rjmp	.+4022   	; 0xa3f0 <irCommTasks+0x12aa>
							irCommRxMaxSensor++;
    943a:	2f 5f       	subi	r18, 0xFF	; 255
    943c:	3f 4f       	sbci	r19, 0xFF	; 255
    943e:	30 93 2a 05 	sts	0x052A, r19
    9442:	20 93 29 05 	sts	0x0529, r18
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    9446:	e9 01       	movw	r28, r18
    9448:	cc 0f       	add	r28, r28
    944a:	dd 1f       	adc	r29, r29
    944c:	ad 01       	movw	r20, r26
    944e:	4c 0f       	add	r20, r28
    9450:	5d 1f       	adc	r21, r29
    9452:	8e 01       	movw	r16, r28
    9454:	0e 0f       	add	r16, r30
    9456:	1f 1f       	adc	r17, r31
    9458:	ea 01       	movw	r28, r20
    945a:	88 81       	ld	r24, Y
    945c:	99 81       	ldd	r25, Y+1	; 0x01
    945e:	e8 01       	movw	r28, r16
    9460:	68 81       	ld	r22, Y
    9462:	79 81       	ldd	r23, Y+1	; 0x01
    9464:	86 1b       	sub	r24, r22
    9466:	97 0b       	sbc	r25, r23
    9468:	80 35       	cpi	r24, 0x50	; 80
    946a:	91 05       	cpc	r25, r1
    946c:	0c f0       	brlt	.+2      	; 0x9470 <irCommTasks+0x32a>
    946e:	ca c6       	rjmp	.+3476   	; 0xa204 <irCommTasks+0x10be>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    9470:	27 30       	cpi	r18, 0x07	; 7
    9472:	31 05       	cpc	r19, r1
    9474:	09 f0       	breq	.+2      	; 0x9478 <irCommTasks+0x332>
    9476:	c3 c7       	rjmp	.+3974   	; 0xa3fe <irCommTasks+0x12b8>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
    9478:	10 92 2a 05 	sts	0x052A, r1
    947c:	10 92 29 05 	sts	0x0529, r1
    9480:	20 91 29 05 	lds	r18, 0x0529
    9484:	30 91 2a 05 	lds	r19, 0x052A
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    9488:	e9 01       	movw	r28, r18
    948a:	cc 0f       	add	r28, r28
    948c:	dd 1f       	adc	r29, r29
    948e:	ad 01       	movw	r20, r26
    9490:	4c 0f       	add	r20, r28
    9492:	5d 1f       	adc	r21, r29
    9494:	8e 01       	movw	r16, r28
    9496:	0e 0f       	add	r16, r30
    9498:	1f 1f       	adc	r17, r31
    949a:	ea 01       	movw	r28, r20
    949c:	88 81       	ld	r24, Y
    949e:	99 81       	ldd	r25, Y+1	; 0x01
    94a0:	e8 01       	movw	r28, r16
    94a2:	68 81       	ld	r22, Y
    94a4:	79 81       	ldd	r23, Y+1	; 0x01
    94a6:	86 1b       	sub	r24, r22
    94a8:	97 0b       	sbc	r25, r23
    94aa:	80 35       	cpi	r24, 0x50	; 80
    94ac:	91 05       	cpc	r25, r1
    94ae:	0c f0       	brlt	.+2      	; 0x94b2 <irCommTasks+0x36c>
    94b0:	a9 c6       	rjmp	.+3410   	; 0xa204 <irCommTasks+0x10be>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    94b2:	27 30       	cpi	r18, 0x07	; 7
    94b4:	31 05       	cpc	r19, r1
    94b6:	0c f4       	brge	.+2      	; 0x94ba <irCommTasks+0x374>
    94b8:	b0 c7       	rjmp	.+3936   	; 0xa41a <irCommTasks+0x12d4>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
    94ba:	10 92 2a 05 	sts	0x052A, r1
    94be:	10 92 29 05 	sts	0x0529, r1
    94c2:	20 91 29 05 	lds	r18, 0x0529
    94c6:	30 91 2a 05 	lds	r19, 0x052A
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    94ca:	e9 01       	movw	r28, r18
    94cc:	cc 0f       	add	r28, r28
    94ce:	dd 1f       	adc	r29, r29
    94d0:	ad 01       	movw	r20, r26
    94d2:	4c 0f       	add	r20, r28
    94d4:	5d 1f       	adc	r21, r29
    94d6:	8e 01       	movw	r16, r28
    94d8:	0e 0f       	add	r16, r30
    94da:	1f 1f       	adc	r17, r31
    94dc:	ea 01       	movw	r28, r20
    94de:	88 81       	ld	r24, Y
    94e0:	99 81       	ldd	r25, Y+1	; 0x01
    94e2:	e8 01       	movw	r28, r16
    94e4:	68 81       	ld	r22, Y
    94e6:	79 81       	ldd	r23, Y+1	; 0x01
    94e8:	86 1b       	sub	r24, r22
    94ea:	97 0b       	sbc	r25, r23
    94ec:	80 35       	cpi	r24, 0x50	; 80
    94ee:	91 05       	cpc	r25, r1
    94f0:	0c f0       	brlt	.+2      	; 0x94f4 <irCommTasks+0x3ae>
    94f2:	88 c6       	rjmp	.+3344   	; 0xa204 <irCommTasks+0x10be>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    94f4:	27 30       	cpi	r18, 0x07	; 7
    94f6:	31 05       	cpc	r19, r1
    94f8:	0c f4       	brge	.+2      	; 0x94fc <irCommTasks+0x3b6>
    94fa:	88 c7       	rjmp	.+3856   	; 0xa40c <irCommTasks+0x12c6>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
    94fc:	10 92 2a 05 	sts	0x052A, r1
    9500:	10 92 29 05 	sts	0x0529, r1
    9504:	20 91 29 05 	lds	r18, 0x0529
    9508:	30 91 2a 05 	lds	r19, 0x052A
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    950c:	e9 01       	movw	r28, r18
    950e:	cc 0f       	add	r28, r28
    9510:	dd 1f       	adc	r29, r29
    9512:	ad 01       	movw	r20, r26
    9514:	4c 0f       	add	r20, r28
    9516:	5d 1f       	adc	r21, r29
    9518:	8e 01       	movw	r16, r28
    951a:	0e 0f       	add	r16, r30
    951c:	1f 1f       	adc	r17, r31
    951e:	ea 01       	movw	r28, r20
    9520:	88 81       	ld	r24, Y
    9522:	99 81       	ldd	r25, Y+1	; 0x01
    9524:	e8 01       	movw	r28, r16
    9526:	68 81       	ld	r22, Y
    9528:	79 81       	ldd	r23, Y+1	; 0x01
    952a:	86 1b       	sub	r24, r22
    952c:	97 0b       	sbc	r25, r23
    952e:	80 35       	cpi	r24, 0x50	; 80
    9530:	91 05       	cpc	r25, r1
    9532:	0c f0       	brlt	.+2      	; 0x9536 <irCommTasks+0x3f0>
    9534:	67 c6       	rjmp	.+3278   	; 0xa204 <irCommTasks+0x10be>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    9536:	27 30       	cpi	r18, 0x07	; 7
    9538:	31 05       	cpc	r19, r1
    953a:	0c f4       	brge	.+2      	; 0x953e <irCommTasks+0x3f8>
    953c:	db c7       	rjmp	.+4022   	; 0xa4f4 <irCommTasks+0x13ae>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
    953e:	10 92 2a 05 	sts	0x052A, r1
    9542:	10 92 29 05 	sts	0x0529, r1
    9546:	20 91 29 05 	lds	r18, 0x0529
    954a:	30 91 2a 05 	lds	r19, 0x052A
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    954e:	e9 01       	movw	r28, r18
    9550:	cc 0f       	add	r28, r28
    9552:	dd 1f       	adc	r29, r29
    9554:	ad 01       	movw	r20, r26
    9556:	4c 0f       	add	r20, r28
    9558:	5d 1f       	adc	r21, r29
    955a:	8e 01       	movw	r16, r28
    955c:	0e 0f       	add	r16, r30
    955e:	1f 1f       	adc	r17, r31
    9560:	ea 01       	movw	r28, r20
    9562:	88 81       	ld	r24, Y
    9564:	99 81       	ldd	r25, Y+1	; 0x01
    9566:	e8 01       	movw	r28, r16
    9568:	68 81       	ld	r22, Y
    956a:	79 81       	ldd	r23, Y+1	; 0x01
    956c:	86 1b       	sub	r24, r22
    956e:	97 0b       	sbc	r25, r23
    9570:	80 35       	cpi	r24, 0x50	; 80
    9572:	91 05       	cpc	r25, r1
    9574:	0c f0       	brlt	.+2      	; 0x9578 <irCommTasks+0x432>
    9576:	46 c6       	rjmp	.+3212   	; 0xa204 <irCommTasks+0x10be>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    9578:	27 30       	cpi	r18, 0x07	; 7
    957a:	31 05       	cpc	r19, r1
    957c:	0c f4       	brge	.+2      	; 0x9580 <irCommTasks+0x43a>
    957e:	c1 c7       	rjmp	.+3970   	; 0xa502 <irCommTasks+0x13bc>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
    9580:	10 92 2a 05 	sts	0x052A, r1
    9584:	10 92 29 05 	sts	0x0529, r1
    9588:	20 91 29 05 	lds	r18, 0x0529
    958c:	30 91 2a 05 	lds	r19, 0x052A
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    9590:	e9 01       	movw	r28, r18
    9592:	cc 0f       	add	r28, r28
    9594:	dd 1f       	adc	r29, r29
    9596:	ad 01       	movw	r20, r26
    9598:	4c 0f       	add	r20, r28
    959a:	5d 1f       	adc	r21, r29
    959c:	8e 01       	movw	r16, r28
    959e:	0e 0f       	add	r16, r30
    95a0:	1f 1f       	adc	r17, r31
    95a2:	ea 01       	movw	r28, r20
    95a4:	88 81       	ld	r24, Y
    95a6:	99 81       	ldd	r25, Y+1	; 0x01
    95a8:	e8 01       	movw	r28, r16
    95aa:	68 81       	ld	r22, Y
    95ac:	79 81       	ldd	r23, Y+1	; 0x01
    95ae:	86 1b       	sub	r24, r22
    95b0:	97 0b       	sbc	r25, r23
    95b2:	80 35       	cpi	r24, 0x50	; 80
    95b4:	91 05       	cpc	r25, r1
    95b6:	0c f0       	brlt	.+2      	; 0x95ba <irCommTasks+0x474>
    95b8:	25 c6       	rjmp	.+3146   	; 0xa204 <irCommTasks+0x10be>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    95ba:	27 30       	cpi	r18, 0x07	; 7
    95bc:	31 05       	cpc	r19, r1
    95be:	0c f4       	brge	.+2      	; 0x95c2 <irCommTasks+0x47c>
    95c0:	a7 c7       	rjmp	.+3918   	; 0xa510 <irCommTasks+0x13ca>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
    95c2:	10 92 2a 05 	sts	0x052A, r1
    95c6:	10 92 29 05 	sts	0x0529, r1
    95ca:	20 91 29 05 	lds	r18, 0x0529
    95ce:	30 91 2a 05 	lds	r19, 0x052A
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    95d2:	e9 01       	movw	r28, r18
    95d4:	cc 0f       	add	r28, r28
    95d6:	dd 1f       	adc	r29, r29
    95d8:	ad 01       	movw	r20, r26
    95da:	4c 0f       	add	r20, r28
    95dc:	5d 1f       	adc	r21, r29
    95de:	8e 01       	movw	r16, r28
    95e0:	0e 0f       	add	r16, r30
    95e2:	1f 1f       	adc	r17, r31
    95e4:	ea 01       	movw	r28, r20
    95e6:	88 81       	ld	r24, Y
    95e8:	99 81       	ldd	r25, Y+1	; 0x01
    95ea:	e8 01       	movw	r28, r16
    95ec:	68 81       	ld	r22, Y
    95ee:	79 81       	ldd	r23, Y+1	; 0x01
    95f0:	86 1b       	sub	r24, r22
    95f2:	97 0b       	sbc	r25, r23
    95f4:	80 35       	cpi	r24, 0x50	; 80
    95f6:	91 05       	cpc	r25, r1
    95f8:	0c f0       	brlt	.+2      	; 0x95fc <irCommTasks+0x4b6>
    95fa:	04 c6       	rjmp	.+3080   	; 0xa204 <irCommTasks+0x10be>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    95fc:	27 30       	cpi	r18, 0x07	; 7
    95fe:	31 05       	cpc	r19, r1
    9600:	0c f4       	brge	.+2      	; 0x9604 <irCommTasks+0x4be>
    9602:	8d c7       	rjmp	.+3866   	; 0xa51e <irCommTasks+0x13d8>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
    9604:	10 92 2a 05 	sts	0x052A, r1
    9608:	10 92 29 05 	sts	0x0529, r1
    960c:	20 91 29 05 	lds	r18, 0x0529
    9610:	30 91 2a 05 	lds	r19, 0x052A
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    9614:	e9 01       	movw	r28, r18
    9616:	cc 0f       	add	r28, r28
    9618:	dd 1f       	adc	r29, r29
    961a:	ad 01       	movw	r20, r26
    961c:	4c 0f       	add	r20, r28
    961e:	5d 1f       	adc	r21, r29
    9620:	8e 01       	movw	r16, r28
    9622:	0e 0f       	add	r16, r30
    9624:	1f 1f       	adc	r17, r31
    9626:	ea 01       	movw	r28, r20
    9628:	88 81       	ld	r24, Y
    962a:	99 81       	ldd	r25, Y+1	; 0x01
    962c:	e8 01       	movw	r28, r16
    962e:	68 81       	ld	r22, Y
    9630:	79 81       	ldd	r23, Y+1	; 0x01
    9632:	86 1b       	sub	r24, r22
    9634:	97 0b       	sbc	r25, r23
    9636:	80 35       	cpi	r24, 0x50	; 80
    9638:	91 05       	cpc	r25, r1
    963a:	0c f0       	brlt	.+2      	; 0x963e <irCommTasks+0x4f8>
    963c:	e3 c5       	rjmp	.+3014   	; 0xa204 <irCommTasks+0x10be>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    963e:	27 30       	cpi	r18, 0x07	; 7
    9640:	31 05       	cpc	r19, r1
    9642:	0c f0       	brlt	.+2      	; 0x9646 <irCommTasks+0x500>
    9644:	73 c7       	rjmp	.+3814   	; 0xa52c <irCommTasks+0x13e6>
								irCommRxMaxSensor++;
    9646:	2f 5f       	subi	r18, 0xFF	; 255
    9648:	3f 4f       	sbci	r19, 0xFF	; 255
    964a:	30 93 2a 05 	sts	0x052A, r19
    964e:	20 93 29 05 	sts	0x0529, r18
							} else {
								irCommRxMaxSensor = 0;
    9652:	80 91 27 05 	lds	r24, 0x0527
    9656:	90 91 28 05 	lds	r25, 0x0528
    965a:	e9 01       	movw	r28, r18
    965c:	cc 0f       	add	r28, r28
    965e:	dd 1f       	adc	r29, r29
    9660:	ad 01       	movw	r20, r26
    9662:	4c 0f       	add	r20, r28
    9664:	5d 1f       	adc	r21, r29
    9666:	8e 01       	movw	r16, r28
    9668:	0e 0f       	add	r16, r30
    966a:	1f 1f       	adc	r17, r31
					}
				}
				//turnOffGreenLeds();
				//setGreenLed(irCommRxMaxSensor, 1);			

				if(irCommRxMaxSensorIndexTemp>1) {
    966c:	60 91 f7 04 	lds	r22, 0x04F7
    9670:	62 30       	cpi	r22, 0x02	; 2
    9672:	08 f4       	brcc	.+2      	; 0x9676 <irCommTasks+0x530>
    9674:	5b c6       	rjmp	.+3254   	; 0xa32c <irCommTasks+0x11e6>
    9676:	62 e0       	ldi	r22, 0x02	; 2
    9678:	e1 e0       	ldi	r30, 0x01	; 1
    967a:	f0 e0       	ldi	r31, 0x00	; 0
					irCommRxMaxSensorIndexTemp = 1;
					//updateBlueLed(0);
				}
				irCommRxMaxSensorTemp[irCommRxMaxSensorIndexTemp] = irCommRxMaxSensor;
    967c:	ee 0f       	add	r30, r30
    967e:	ff 1f       	adc	r31, r31
    9680:	ef 5c       	subi	r30, 0xCF	; 207
    9682:	f4 4f       	sbci	r31, 0xF4	; 244
    9684:	31 83       	std	Z+1, r19	; 0x01
    9686:	20 83       	st	Z, r18
				irCommRxMaxSensorIndexTemp++;
    9688:	60 93 f7 04 	sts	0x04F7, r22
					
				if(irCommRxMaxDiffIndexTemp>1) {
    968c:	60 91 f8 04 	lds	r22, 0x04F8
    9690:	62 30       	cpi	r22, 0x02	; 2
    9692:	08 f4       	brcc	.+2      	; 0x9696 <irCommTasks+0x550>
    9694:	47 c6       	rjmp	.+3214   	; 0xa324 <irCommTasks+0x11de>
    9696:	62 e0       	ldi	r22, 0x02	; 2
    9698:	e1 e0       	ldi	r30, 0x01	; 1
    969a:	f0 e0       	ldi	r31, 0x00	; 0
					irCommRxMaxDiffIndexTemp = 1;
					//updateBlueLed(0);
				}
				irCommRxMaxDiffTemp[irCommRxMaxDiffIndexTemp] = irCommRxMaxDiff;
    969c:	ee 0f       	add	r30, r30
    969e:	ff 1f       	adc	r31, r31
    96a0:	e6 59       	subi	r30, 0x96	; 150
    96a2:	f4 4f       	sbci	r31, 0xF4	; 244
    96a4:	91 83       	std	Z+1, r25	; 0x01
    96a6:	80 83       	st	Z, r24
				irCommRxMaxDiffIndexTemp++;
    96a8:	60 93 f8 04 	sts	0x04F8, r22
				
				if(irCommMaxSensorValueCurrIndexTemp>1) {
    96ac:	60 91 fb 04 	lds	r22, 0x04FB
    96b0:	62 30       	cpi	r22, 0x02	; 2
    96b2:	08 f4       	brcc	.+2      	; 0x96b6 <irCommTasks+0x570>
    96b4:	33 c6       	rjmp	.+3174   	; 0xa31c <irCommTasks+0x11d6>
					irCommMaxSensorValueCurrIndexTemp = 1;
    96b6:	61 e0       	ldi	r22, 0x01	; 1
    96b8:	60 93 fb 04 	sts	0x04FB, r22
    96bc:	62 e0       	ldi	r22, 0x02	; 2
    96be:	e1 e0       	ldi	r30, 0x01	; 1
    96c0:	f0 e0       	ldi	r31, 0x00	; 0
					//updateBlueLed(0);
				}
				irCommMaxSensorValueCurrTemp[irCommMaxSensorValueCurrIndexTemp] = irCommMaxSensorValueCurr[irCommRxMaxSensor];
    96c2:	ee 0f       	add	r30, r30
    96c4:	ff 1f       	adc	r31, r31
    96c6:	e0 5c       	subi	r30, 0xC0	; 192
    96c8:	fa 4f       	sbci	r31, 0xFA	; 250
    96ca:	ea 01       	movw	r28, r20
    96cc:	48 81       	ld	r20, Y
    96ce:	59 81       	ldd	r21, Y+1	; 0x01
    96d0:	51 83       	std	Z+1, r21	; 0x01
    96d2:	40 83       	st	Z, r20
				irCommMaxSensorValueCurrIndexTemp++;
    96d4:	60 93 fb 04 	sts	0x04FB, r22
				
				if(irCommMinSensorValueCurrIndexTemp>1) {
    96d8:	40 91 fc 04 	lds	r20, 0x04FC
    96dc:	42 30       	cpi	r20, 0x02	; 2
    96de:	08 f4       	brcc	.+2      	; 0x96e2 <irCommTasks+0x59c>
    96e0:	29 c6       	rjmp	.+3154   	; 0xa334 <irCommTasks+0x11ee>
					irCommMinSensorValueCurrIndexTemp = 1;
    96e2:	41 e0       	ldi	r20, 0x01	; 1
    96e4:	40 93 fc 04 	sts	0x04FC, r20
    96e8:	62 e0       	ldi	r22, 0x02	; 2
    96ea:	e1 e0       	ldi	r30, 0x01	; 1
    96ec:	f0 e0       	ldi	r31, 0x00	; 0
					//updateBlueLed(0);
				}
				irCommMinSensorValueCurrTemp[irCommMinSensorValueCurrIndexTemp] = irCommMinSensorValueCurr[irCommRxMaxSensor];
    96ee:	ee 0f       	add	r30, r30
    96f0:	ff 1f       	adc	r31, r31
    96f2:	eb 5c       	subi	r30, 0xCB	; 203
    96f4:	f4 4f       	sbci	r31, 0xF4	; 244
    96f6:	d8 01       	movw	r26, r16
    96f8:	4d 91       	ld	r20, X+
    96fa:	5c 91       	ld	r21, X
    96fc:	11 97       	sbiw	r26, 0x01	; 1
    96fe:	51 83       	std	Z+1, r21	; 0x01
    9700:	40 83       	st	Z, r20
				irCommMinSensorValueCurrIndexTemp++;			
    9702:	60 93 fc 04 	sts	0x04FC, r22


				//if(irCommRxMaxSensor == -1) {
				//	updateRedLed(0);
				//}
				if(irCommRxMaxDiff >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    9706:	80 35       	cpi	r24, 0x50	; 80
    9708:	91 05       	cpc	r25, r1
    970a:	0c f4       	brge	.+2      	; 0x970e <irCommTasks+0x5c8>
    970c:	07 c5       	rjmp	.+2574   	; 0xa11c <irCommTasks+0xfd6>
					irCommState = IRCOMM_RX_DETECT_START_BIT_STATE;	
    970e:	83 e0       	ldi	r24, 0x03	; 3
    9710:	80 93 dd 04 	sts	0x04DD, r24
					
					if(irCommStateIndexTemp>13) {
    9714:	80 91 04 05 	lds	r24, 0x0504
    9718:	8e 30       	cpi	r24, 0x0E	; 14
    971a:	08 f4       	brcc	.+2      	; 0x971e <irCommTasks+0x5d8>
    971c:	fb c4       	rjmp	.+2550   	; 0xa114 <irCommTasks+0xfce>
					irCommStateIndexTemp++;

				} else {
					irCommState = IRCOMM_RX_WAITING_BIT;

					if(irCommStateIndexTemp>13) {
    971e:	8e e0       	ldi	r24, 0x0E	; 14
    9720:	ed e0       	ldi	r30, 0x0D	; 13
    9722:	f0 e0       	ldi	r31, 0x00	; 0
						irCommStateIndexTemp = 13;
						//updateRedLed(0);
					}
					irCommStateTemp[irCommStateIndexTemp] = irCommState;
    9724:	90 91 dd 04 	lds	r25, 0x04DD
    9728:	ec 5b       	subi	r30, 0xBC	; 188
    972a:	fa 4f       	sbci	r31, 0xFA	; 250
    972c:	90 83       	st	Z, r25
					irCommStateIndexTemp++;
    972e:	80 93 04 05 	sts	0x0504, r24
    9732:	21 cd       	rjmp	.-1470   	; 0x9176 <irCommTasks+0x30>
				irCommState = IRCOMM_TX_COMPUTE_TIMINGS;				
				break;

			case IRCOMM_TX_COMPUTE_TIMINGS:
				//updateBlueLed(255);
				if(irCommTxBitToTransmit[irCommTxBitCount] == 3) {
    9734:	30 91 34 05 	lds	r19, 0x0534
    9738:	e3 2f       	mov	r30, r19
    973a:	f0 e0       	ldi	r31, 0x00	; 0
    973c:	e4 5a       	subi	r30, 0xA4	; 164
    973e:	fa 4f       	sbci	r31, 0xFA	; 250
    9740:	20 81       	ld	r18, Z
    9742:	23 30       	cpi	r18, 0x03	; 3
    9744:	09 f4       	brne	.+2      	; 0x9748 <irCommTasks+0x602>
    9746:	11 c5       	rjmp	.+2594   	; 0xa16a <irCommTasks+0x1024>
					//updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START2_DURATION;					
					irCommTxSwitchCount = IRCOMM_BIT_START2_SWITCH_COUNT;
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 2) {
    9748:	22 30       	cpi	r18, 0x02	; 2
    974a:	09 f4       	brne	.+2      	; 0x974e <irCommTasks+0x608>
    974c:	28 c1       	rjmp	.+592    	; 0x999e <irCommTasks+0x858>
					//updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START1_DURATION;					
					irCommTxSwitchCount = IRCOMM_BIT_START1_SWITCH_COUNT;
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 1) {
    974e:	21 30       	cpi	r18, 0x01	; 1
    9750:	09 f4       	brne	.+2      	; 0x9754 <irCommTasks+0x60e>
    9752:	7b c5       	rjmp	.+2806   	; 0xa24a <irCommTasks+0x1104>
					irCommTxDuration = IRCOMM_BIT1_DURATOIN;					
					irCommTxSwitchCount = IRCOMM_BIT1_SWITCH_COUNT;
				} else {
					irCommTxDuration = IRCOMM_BIT0_DURATION;						
    9754:	8e e1       	ldi	r24, 0x1E	; 30
    9756:	90 e0       	ldi	r25, 0x00	; 0
    9758:	90 93 37 05 	sts	0x0537, r25
    975c:	80 93 36 05 	sts	0x0536, r24
					irCommTxSwitchCount = IRCOMM_BIT0_SWITCH_COUNT;
    9760:	88 e0       	ldi	r24, 0x08	; 8
    9762:	80 93 38 05 	sts	0x0538, r24
				}
				if(irCommTxBitCount == 0) {
    9766:	33 23       	and	r19, r19
    9768:	51 f4       	brne	.+20     	; 0x977e <irCommTasks+0x638>
					//PORTA = irCommTxSensorMask;
					if(irCommTxSensorGroup==0) {
    976a:	80 91 3c 05 	lds	r24, 0x053C
    976e:	88 23       	and	r24, r24
    9770:	09 f0       	breq	.+2      	; 0x9774 <irCommTasks+0x62e>
    9772:	09 c5       	rjmp	.+2578   	; 0xa186 <irCommTasks+0x1040>
						PORTA = 0xAA;
    9774:	8a ea       	ldi	r24, 0xAA	; 170
    9776:	82 b9       	out	0x02, r24	; 2
					} else {
						PORTA = 0x55;
					}					
					irCommTxPulseState = 1;
    9778:	81 e0       	ldi	r24, 0x01	; 1
    977a:	80 93 35 05 	sts	0x0535, r24
				}
				irCommTxDurationCycle = 0;
    977e:	10 92 3a 05 	sts	0x053A, r1
				irCommTxSwitchCounter = 0;						
    9782:	10 92 39 05 	sts	0x0539, r1
				irCommState = IRCOMM_TX_TRANSMIT_BIT;
    9786:	83 e0       	ldi	r24, 0x03	; 3
    9788:	80 93 dd 04 	sts	0x04DD, r24
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ1;
    978c:	80 93 2c 05 	sts	0x052C, r24
    9790:	f2 cc       	rjmp	.-1564   	; 0x9176 <irCommTasks+0x30>
void irCommTasks() {
	int i = 0;

	if(irCommMode==IRCOMM_MODE_RECEIVE) {

		switch(irCommState) {
    9792:	17 30       	cpi	r17, 0x07	; 7
    9794:	09 f4       	brne	.+2      	; 0x9798 <irCommTasks+0x652>
    9796:	0f c4       	rjmp	.+2078   	; 0x9fb6 <irCommTasks+0xe70>
    9798:	18 30       	cpi	r17, 0x08	; 8
    979a:	09 f4       	brne	.+2      	; 0x979e <irCommTasks+0x658>
    979c:	93 c1       	rjmp	.+806    	; 0x9ac4 <irCommTasks+0x97e>
    979e:	16 30       	cpi	r17, 0x06	; 6
    97a0:	09 f0       	breq	.+2      	; 0x97a4 <irCommTasks+0x65e>
    97a2:	e9 cc       	rjmp	.-1582   	; 0x9176 <irCommTasks+0x30>
			case IRCOMM_RX_WAITING_BIT:
				break;

			case IRCOMM_RX_READ_BIT:
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
    97a4:	10 92 0c 05 	sts	0x050C, r1
    97a8:	10 92 0d 05 	sts	0x050D, r1
    97ac:	10 92 0e 05 	sts	0x050E, r1
    97b0:	10 92 0f 05 	sts	0x050F, r1
				irCommTempMin = 1024;
    97b4:	80 e0       	ldi	r24, 0x00	; 0
    97b6:	94 e0       	ldi	r25, 0x04	; 4
    97b8:	90 93 13 05 	sts	0x0513, r25
    97bc:	80 93 12 05 	sts	0x0512, r24
				irCommTempMax = 0;
    97c0:	10 92 11 05 	sts	0x0511, r1
    97c4:	10 92 10 05 	sts	0x0510, r1
	irCommRxBitReceivedIndexTemp = 0;
	
	
}

void irCommTasks() {
    97c8:	80 91 29 05 	lds	r24, 0x0529
    97cc:	90 91 2a 05 	lds	r25, 0x052A
    97d0:	88 0f       	add	r24, r24
    97d2:	99 1f       	adc	r25, r25
    97d4:	e0 91 55 08 	lds	r30, 0x0855
    97d8:	f0 91 56 08 	lds	r31, 0x0856
    97dc:	e8 0f       	add	r30, r24
    97de:	f9 1f       	adc	r31, r25

			case IRCOMM_RX_READ_BIT:
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
				irCommTempMin = 1024;
				irCommTempMax = 0;
    97e0:	11 e4       	ldi	r17, 0x41	; 65
    97e2:	c1 2e       	mov	r12, r17
    97e4:	1b e0       	ldi	r17, 0x0B	; 11
    97e6:	d1 2e       	mov	r13, r17
	irCommRxBitReceivedIndexTemp = 0;
	
	
}

void irCommTasks() {
    97e8:	e6 01       	movw	r28, r12
    97ea:	60 e0       	ldi	r22, 0x00	; 0
    97ec:	70 e0       	ldi	r23, 0x00	; 0
    97ee:	40 e0       	ldi	r20, 0x00	; 0
    97f0:	54 e0       	ldi	r21, 0x04	; 4
    97f2:	ee 24       	eor	r14, r14
    97f4:	ff 24       	eor	r15, r15
    97f6:	87 01       	movw	r16, r14
    97f8:	08 c0       	rjmp	.+16     	; 0x980a <irCommTasks+0x6c4>
			case IRCOMM_RX_READ_BIT:
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
				irCommTempMin = 1024;
				irCommTempMax = 0;
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    97fa:	40 91 12 05 	lds	r20, 0x0512
    97fe:	50 91 13 05 	lds	r21, 0x0513
    9802:	60 91 10 05 	lds	r22, 0x0510
    9806:	70 91 11 05 	lds	r23, 0x0511
					irCommMaxSensorSignal[i] = irCommProxValuesCurr[irCommRxMaxSensor+i*8];
    980a:	20 81       	ld	r18, Z
    980c:	31 81       	ldd	r19, Z+1	; 0x01
    980e:	29 93       	st	Y+, r18
    9810:	39 93       	st	Y+, r19
					irCommProxSum += irCommMaxSensorSignal[i];
    9812:	c9 01       	movw	r24, r18
    9814:	aa 27       	eor	r26, r26
    9816:	97 fd       	sbrc	r25, 7
    9818:	a0 95       	com	r26
    981a:	ba 2f       	mov	r27, r26
    981c:	e8 0e       	add	r14, r24
    981e:	f9 1e       	adc	r15, r25
    9820:	0a 1f       	adc	r16, r26
    9822:	1b 1f       	adc	r17, r27
					if(irCommTempMin > irCommMaxSensorSignal[i]) {
    9824:	24 17       	cp	r18, r20
    9826:	35 07       	cpc	r19, r21
    9828:	2c f4       	brge	.+10     	; 0x9834 <irCommTasks+0x6ee>
						irCommTempMin = irCommMaxSensorSignal[i];
    982a:	30 93 13 05 	sts	0x0513, r19
    982e:	20 93 12 05 	sts	0x0512, r18
    9832:	a9 01       	movw	r20, r18
					}
					if(irCommTempMax < irCommMaxSensorSignal[i]) {
    9834:	62 17       	cp	r22, r18
    9836:	73 07       	cpc	r23, r19
    9838:	2c f4       	brge	.+10     	; 0x9844 <irCommTasks+0x6fe>
						irCommTempMax = irCommMaxSensorSignal[i];
    983a:	30 93 11 05 	sts	0x0511, r19
    983e:	20 93 10 05 	sts	0x0510, r18
    9842:	b9 01       	movw	r22, r18
    9844:	70 96       	adiw	r30, 0x10	; 16
			case IRCOMM_RX_READ_BIT:
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
				irCommTempMin = 1024;
				irCommTempMax = 0;
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    9846:	2b e0       	ldi	r18, 0x0B	; 11
    9848:	c9 36       	cpi	r28, 0x69	; 105
    984a:	d2 07       	cpc	r29, r18
    984c:	b1 f6       	brne	.-84     	; 0x97fa <irCommTasks+0x6b4>
    984e:	e0 92 0c 05 	sts	0x050C, r14
    9852:	f0 92 0d 05 	sts	0x050D, r15
    9856:	00 93 0e 05 	sts	0x050E, r16
    985a:	10 93 0f 05 	sts	0x050F, r17
					if(irCommTempMax < irCommMaxSensorSignal[i]) {
						irCommTempMax = irCommMaxSensorSignal[i];
					}
				}

				if((irCommTempMax-irCommTempMin) < IRCOMM_DETECTION_AMPLITUDE_THR) {	// error...no significant signal perceived					
    985e:	64 1b       	sub	r22, r20
    9860:	75 0b       	sbc	r23, r21
    9862:	60 35       	cpi	r22, 0x50	; 80
    9864:	71 05       	cpc	r23, r1
    9866:	0c f4       	brge	.+2      	; 0x986a <irCommTasks+0x724>
    9868:	60 c4       	rjmp	.+2240   	; 0xa12a <irCommTasks+0xfe4>

					resetDebugVariables();
					break;
				}

				irCommProxMean = (int)(irCommProxSum / IRCOMM_SAMPLING_WINDOW);
    986a:	c8 01       	movw	r24, r16
    986c:	b7 01       	movw	r22, r14
    986e:	24 e1       	ldi	r18, 0x14	; 20
    9870:	30 e0       	ldi	r19, 0x00	; 0
    9872:	40 e0       	ldi	r20, 0x00	; 0
    9874:	50 e0       	ldi	r21, 0x00	; 0
    9876:	0e 94 6a 57 	call	0xaed4	; 0xaed4 <__divmodsi4>
    987a:	b9 01       	movw	r22, r18
    987c:	30 93 17 05 	sts	0x0517, r19
    9880:	20 93 16 05 	sts	0x0516, r18
    9884:	20 91 06 05 	lds	r18, 0x0506
    9888:	0f c0       	rjmp	.+30     	; 0x98a8 <irCommTasks+0x762>

				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
					irCommMaxSensorSignal[i] -= irCommProxMean;

					if(irCommBitsSignalIndexTemp>199) {
    988a:	e2 2f       	mov	r30, r18
    988c:	f0 e0       	ldi	r31, 0x00	; 0
    988e:	2f 5f       	subi	r18, 0xFF	; 255
						irCommBitsSignalIndexTemp = 199;
						//updateRedLed(0);
					}
					irCommBitsSignalTemp[irCommBitsSignalIndexTemp] = irCommMaxSensorSignal[i];
    9890:	ee 0f       	add	r30, r30
    9892:	ff 1f       	adc	r31, r31
    9894:	e1 56       	subi	r30, 0x61	; 97
    9896:	f6 4f       	sbci	r31, 0xF6	; 246
    9898:	91 83       	std	Z+1, r25	; 0x01
    989a:	80 83       	st	Z, r24
				}

				irCommProxMean = (int)(irCommProxSum / IRCOMM_SAMPLING_WINDOW);

				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    989c:	e9 e6       	ldi	r30, 0x69	; 105
    989e:	ce 16       	cp	r12, r30
    98a0:	eb e0       	ldi	r30, 0x0B	; 11
    98a2:	de 06       	cpc	r13, r30
    98a4:	09 f4       	brne	.+2      	; 0x98a8 <irCommTasks+0x762>
    98a6:	da c3       	rjmp	.+1972   	; 0xa05c <irCommTasks+0xf16>
					irCommMaxSensorSignal[i] -= irCommProxMean;
    98a8:	d6 01       	movw	r26, r12
    98aa:	8d 91       	ld	r24, X+
    98ac:	9c 91       	ld	r25, X
    98ae:	11 97       	sbiw	r26, 0x01	; 1
    98b0:	86 1b       	sub	r24, r22
    98b2:	97 0b       	sbc	r25, r23
    98b4:	e6 01       	movw	r28, r12
    98b6:	89 93       	st	Y+, r24
    98b8:	99 93       	st	Y+, r25
    98ba:	6e 01       	movw	r12, r28

					if(irCommBitsSignalIndexTemp>199) {
    98bc:	28 3c       	cpi	r18, 0xC8	; 200
    98be:	28 f3       	brcs	.-54     	; 0x988a <irCommTasks+0x744>
    98c0:	28 ec       	ldi	r18, 0xC8	; 200
    98c2:	e7 ec       	ldi	r30, 0xC7	; 199
    98c4:	f0 e0       	ldi	r31, 0x00	; 0
    98c6:	e4 cf       	rjmp	.-56     	; 0x9890 <irCommTasks+0x74a>
												
				break;

			case IRCOMM_RX_DETECT_START_BIT_STATE:
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
    98c8:	10 92 0c 05 	sts	0x050C, r1
    98cc:	10 92 0d 05 	sts	0x050D, r1
    98d0:	10 92 0e 05 	sts	0x050E, r1
    98d4:	10 92 0f 05 	sts	0x050F, r1
				irCommTempMin = 1024;
    98d8:	80 e0       	ldi	r24, 0x00	; 0
    98da:	94 e0       	ldi	r25, 0x04	; 4
    98dc:	90 93 13 05 	sts	0x0513, r25
    98e0:	80 93 12 05 	sts	0x0512, r24
				irCommTempMax = 0;
    98e4:	10 92 11 05 	sts	0x0511, r1
    98e8:	10 92 10 05 	sts	0x0510, r1
				irCommShiftCount = 0;
    98ec:	10 92 14 05 	sts	0x0514, r1
				irCommComputeShift = 1;												
    98f0:	00 93 15 05 	sts	0x0515, r16
    98f4:	e0 90 f5 04 	lds	r14, 0x04F5
    98f8:	60 e0       	ldi	r22, 0x00	; 0
    98fa:	70 e0       	ldi	r23, 0x00	; 0
    98fc:	cb 01       	movw	r24, r22
	irCommRxBitReceivedIndexTemp = 0;
	
	
}

void irCommTasks() {
    98fe:	20 91 29 05 	lds	r18, 0x0529
    9902:	30 91 2a 05 	lds	r19, 0x052A
    9906:	22 0f       	add	r18, r18
    9908:	33 1f       	adc	r19, r19
    990a:	a0 91 55 08 	lds	r26, 0x0855
    990e:	b0 91 56 08 	lds	r27, 0x0856
    9912:	a2 0f       	add	r26, r18
    9914:	b3 1f       	adc	r27, r19
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
				irCommTempMin = 1024;
				irCommTempMax = 0;
				irCommShiftCount = 0;
				irCommComputeShift = 1;												
    9916:	01 e4       	ldi	r16, 0x41	; 65
    9918:	1b e0       	ldi	r17, 0x0B	; 11
	irCommRxBitReceivedIndexTemp = 0;
	
	
}

void irCommTasks() {
    991a:	f8 e2       	ldi	r31, 0x28	; 40
    991c:	8f 2e       	mov	r8, r31
    991e:	91 2c       	mov	r9, r1
    9920:	80 0e       	add	r8, r16
    9922:	91 1e       	adc	r9, r17
    9924:	18 01       	movw	r2, r16
    9926:	cc 24       	eor	r12, r12
    9928:	c3 94       	inc	r12
    992a:	ff 24       	eor	r15, r15
							} else {
								//updateGreenLed(0);
							}
							irCommTempMin = irCommMaxSensorSignal[i];	// otherwise I cannot detect spike of one sample (peakDuration=1), related to sensors sampling
							irCommTempMax = irCommMaxSensorSignal[i];
							irCommComputeShift = 2;
    992c:	e2 e0       	ldi	r30, 0x02	; 2
    992e:	6e 2e       	mov	r6, r30
							

							if(irCommMaxSensorSignal[i] == irCommTempMax) {
								irCommRxPeakHighToLow = 0;
							} else if(irCommMaxSensorSignal[i] == irCommTempMin) {
								irCommRxPeakHighToLow = 1;
    9930:	55 24       	eor	r5, r5
    9932:	53 94       	inc	r5
    9934:	25 c0       	rjmp	.+74     	; 0x9980 <irCommTasks+0x83a>
				irCommShiftCount = 0;
				irCommComputeShift = 1;												
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
					irCommMaxSensorSignal[i] = irCommProxValuesCurr[irCommRxMaxSensor+i*8];

					if(irCommMaxSensorSignalIndexTemp>39) {
    9936:	2e 2d       	mov	r18, r14
    9938:	30 e0       	ldi	r19, 0x00	; 0
    993a:	e3 94       	inc	r14
						irCommMaxSensorSignalIndexTemp = 39;
						//updateRedLed(0);
					}
					irCommMaxSensorSignalTemp[irCommMaxSensorSignalIndexTemp] = irCommMaxSensorSignal[i];
    993c:	22 0f       	add	r18, r18
    993e:	33 1f       	adc	r19, r19
    9940:	2d 58       	subi	r18, 0x8D	; 141
    9942:	37 4f       	sbci	r19, 0xF7	; 247
    9944:	e9 01       	movw	r28, r18
    9946:	f9 83       	std	Y+1, r31	; 0x01
    9948:	e8 83       	st	Y, r30
					irCommMaxSensorSignalIndexTemp++;					
    994a:	e0 92 f5 04 	sts	0x04F5, r14

					irCommProxSum += irCommMaxSensorSignal[i];
    994e:	9f 01       	movw	r18, r30
    9950:	44 27       	eor	r20, r20
    9952:	37 fd       	sbrc	r19, 7
    9954:	40 95       	com	r20
    9956:	54 2f       	mov	r21, r20
    9958:	62 0f       	add	r22, r18
    995a:	73 1f       	adc	r23, r19
    995c:	84 1f       	adc	r24, r20
    995e:	95 1f       	adc	r25, r21
					if(irCommComputeShift == 1) {	// compute the shift between the rx sampling and tx signal
    9960:	2c 2d       	mov	r18, r12
    9962:	21 30       	cpi	r18, 0x01	; 1
    9964:	29 f1       	breq	.+74     	; 0x99b0 <irCommTasks+0x86a>
							irCommTempMax = irCommMaxSensorSignal[i];
							irCommComputeShift = 2;
							irCommShiftCount--;	// the current sample is already part of the signal start thus do not skip it
							irCommRxStartPeakDuration = 0;
						}
					 } else if(irCommComputeShift == 2) {		
    9966:	2c 2d       	mov	r18, r12
    9968:	22 30       	cpi	r18, 0x02	; 2
    996a:	09 f4       	brne	.+2      	; 0x996e <irCommTasks+0x828>
    996c:	76 c0       	rjmp	.+236    	; 0x9a5a <irCommTasks+0x914>
						}	
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
							if((irCommMaxSensorSignal[i]==irCommTempMax) && (irCommRxPeakHighToLow==1)) {
								irCommComputeShift = 0;
							} else if((irCommMaxSensorSignal[i]==irCommTempMin) && (irCommRxPeakHighToLow==0)) {
								irCommComputeShift = 0;
    996e:	50 96       	adiw	r26, 0x10	; 16
				irCommProxSum = 0;
				irCommTempMin = 1024;
				irCommTempMax = 0;
				irCommShiftCount = 0;
				irCommComputeShift = 1;												
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    9970:	e9 e6       	ldi	r30, 0x69	; 105
    9972:	2e 16       	cp	r2, r30
    9974:	eb e0       	ldi	r30, 0x0B	; 11
    9976:	3e 06       	cpc	r3, r30
    9978:	09 f4       	brne	.+2      	; 0x997c <irCommTasks+0x836>
    997a:	3a c2       	rjmp	.+1140   	; 0x9df0 <irCommTasks+0xcaa>
    997c:	c0 90 15 05 	lds	r12, 0x0515
					irCommMaxSensorSignal[i] = irCommProxValuesCurr[irCommRxMaxSensor+i*8];
    9980:	ed 91       	ld	r30, X+
    9982:	fc 91       	ld	r31, X
    9984:	11 97       	sbiw	r26, 0x01	; 1
    9986:	e1 01       	movw	r28, r2
    9988:	e9 93       	st	Y+, r30
    998a:	f9 93       	st	Y+, r31
    998c:	1e 01       	movw	r2, r28

					if(irCommMaxSensorSignalIndexTemp>39) {
    998e:	2e 2d       	mov	r18, r14
    9990:	28 32       	cpi	r18, 0x28	; 40
    9992:	88 f2       	brcs	.-94     	; 0x9936 <irCommTasks+0x7f0>
    9994:	58 e2       	ldi	r21, 0x28	; 40
    9996:	e5 2e       	mov	r14, r21
    9998:	27 e2       	ldi	r18, 0x27	; 39
    999a:	30 e0       	ldi	r19, 0x00	; 0
    999c:	cf cf       	rjmp	.-98     	; 0x993c <irCommTasks+0x7f6>
					//updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START2_DURATION;					
					irCommTxSwitchCount = IRCOMM_BIT_START2_SWITCH_COUNT;
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 2) {
					//updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START1_DURATION;					
    999e:	88 e7       	ldi	r24, 0x78	; 120
    99a0:	90 e0       	ldi	r25, 0x00	; 0
    99a2:	90 93 37 05 	sts	0x0537, r25
    99a6:	80 93 36 05 	sts	0x0536, r24
					irCommTxSwitchCount = IRCOMM_BIT_START1_SWITCH_COUNT;
    99aa:	20 93 38 05 	sts	0x0538, r18
    99ae:	db ce       	rjmp	.-586    	; 0x9766 <irCommTasks+0x620>
					irCommMaxSensorSignalTemp[irCommMaxSensorSignalIndexTemp] = irCommMaxSensorSignal[i];
					irCommMaxSensorSignalIndexTemp++;					

					irCommProxSum += irCommMaxSensorSignal[i];
					if(irCommComputeShift == 1) {	// compute the shift between the rx sampling and tx signal
						irCommShiftCount++;								
    99b0:	f3 94       	inc	r15
    99b2:	f0 92 14 05 	sts	0x0514, r15
						if(irCommTempMin > irCommMaxSensorSignal[i]) {
    99b6:	a0 90 12 05 	lds	r10, 0x0512
    99ba:	b0 90 13 05 	lds	r11, 0x0513
    99be:	ea 15       	cp	r30, r10
    99c0:	fb 05       	cpc	r31, r11
    99c2:	2c f4       	brge	.+10     	; 0x99ce <irCommTasks+0x888>
							irCommTempMin = irCommMaxSensorSignal[i];
    99c4:	f0 93 13 05 	sts	0x0513, r31
    99c8:	e0 93 12 05 	sts	0x0512, r30
    99cc:	5f 01       	movw	r10, r30
						}
						if(irCommTempMax < irCommMaxSensorSignal[i]) {
    99ce:	40 91 10 05 	lds	r20, 0x0510
    99d2:	50 91 11 05 	lds	r21, 0x0511
    99d6:	4e 17       	cp	r20, r30
    99d8:	5f 07       	cpc	r21, r31
    99da:	2c f4       	brge	.+10     	; 0x99e6 <irCommTasks+0x8a0>
							irCommTempMax = irCommMaxSensorSignal[i];
    99dc:	f0 93 11 05 	sts	0x0511, r31
    99e0:	e0 93 10 05 	sts	0x0510, r30
    99e4:	af 01       	movw	r20, r30
						}
						irCommTempValue = (irCommTempMax - irCommTempMin);						
    99e6:	9a 01       	movw	r18, r20
    99e8:	2a 19       	sub	r18, r10
    99ea:	3b 09       	sbc	r19, r11
    99ec:	72 2e       	mov	r7, r18
    99ee:	d3 2e       	mov	r13, r19
    99f0:	20 93 de 04 	sts	0x04DE, r18
    99f4:	30 93 df 04 	sts	0x04DF, r19
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    99f8:	20 35       	cpi	r18, 0x50	; 80
    99fa:	31 05       	cpc	r19, r1
    99fc:	0c f4       	brge	.+2      	; 0x9a00 <irCommTasks+0x8ba>
    99fe:	b7 cf       	rjmp	.-146    	; 0x996e <irCommTasks+0x828>

							if(irCommStartDiffIndexTemp>1) {
    9a00:	c0 90 ff 04 	lds	r12, 0x04FF
    9a04:	2c 2d       	mov	r18, r12
    9a06:	22 30       	cpi	r18, 0x02	; 2
    9a08:	08 f4       	brcc	.+2      	; 0x9a0c <irCommTasks+0x8c6>
    9a0a:	a1 c3       	rjmp	.+1858   	; 0xa14e <irCommTasks+0x1008>
    9a0c:	22 e0       	ldi	r18, 0x02	; 2
    9a0e:	c2 2e       	mov	r12, r18
    9a10:	21 e0       	ldi	r18, 0x01	; 1
    9a12:	30 e0       	ldi	r19, 0x00	; 0
								irCommStartDiffIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommStartDiffTemp[irCommStartDiffIndexTemp] = irCommTempValue;
    9a14:	22 0f       	add	r18, r18
    9a16:	33 1f       	adc	r19, r19
    9a18:	2c 53       	subi	r18, 0x3C	; 60
    9a1a:	37 4f       	sbci	r19, 0xF7	; 247
    9a1c:	e9 01       	movw	r28, r18
    9a1e:	78 82       	st	Y, r7
    9a20:	d9 82       	std	Y+1, r13	; 0x01
							irCommStartDiffIndexTemp++;
    9a22:	c0 92 ff 04 	sts	0x04FF, r12
							

							if(irCommMaxSensorSignal[i] == irCommTempMax) {
    9a26:	e4 17       	cp	r30, r20
    9a28:	f5 07       	cpc	r31, r21
    9a2a:	09 f4       	brne	.+2      	; 0x9a2e <irCommTasks+0x8e8>
    9a2c:	8d c3       	rjmp	.+1818   	; 0xa148 <irCommTasks+0x1002>
								irCommRxPeakHighToLow = 0;
							} else if(irCommMaxSensorSignal[i] == irCommTempMin) {
    9a2e:	ea 15       	cp	r30, r10
    9a30:	fb 05       	cpc	r31, r11
    9a32:	09 f4       	brne	.+2      	; 0x9a36 <irCommTasks+0x8f0>
    9a34:	ab c3       	rjmp	.+1878   	; 0xa18c <irCommTasks+0x1046>
								irCommRxPeakHighToLow = 1;
							} else {
								//updateGreenLed(0);
							}
							irCommTempMin = irCommMaxSensorSignal[i];	// otherwise I cannot detect spike of one sample (peakDuration=1), related to sensors sampling
    9a36:	f0 93 13 05 	sts	0x0513, r31
    9a3a:	e0 93 12 05 	sts	0x0512, r30
							irCommTempMax = irCommMaxSensorSignal[i];
    9a3e:	f0 93 11 05 	sts	0x0511, r31
    9a42:	e0 93 10 05 	sts	0x0510, r30
							irCommComputeShift = 2;
    9a46:	60 92 15 05 	sts	0x0515, r6
							irCommShiftCount--;	// the current sample is already part of the signal start thus do not skip it
    9a4a:	fa 94       	dec	r15
    9a4c:	f0 92 14 05 	sts	0x0514, r15
							irCommRxStartPeakDuration = 0;
    9a50:	10 92 26 05 	sts	0x0526, r1
    9a54:	e2 e0       	ldi	r30, 0x02	; 2
    9a56:	ce 2e       	mov	r12, r30
    9a58:	8a cf       	rjmp	.-236    	; 0x996e <irCommTasks+0x828>
						}
					 } else if(irCommComputeShift == 2) {		
					 	irCommRxStartPeakDuration++;					
    9a5a:	20 91 26 05 	lds	r18, 0x0526
    9a5e:	2f 5f       	subi	r18, 0xFF	; 255
    9a60:	20 93 26 05 	sts	0x0526, r18
						if(irCommTempMin > irCommMaxSensorSignal[i]) {
    9a64:	a0 90 12 05 	lds	r10, 0x0512
    9a68:	b0 90 13 05 	lds	r11, 0x0513
    9a6c:	ea 15       	cp	r30, r10
    9a6e:	fb 05       	cpc	r31, r11
    9a70:	2c f4       	brge	.+10     	; 0x9a7c <irCommTasks+0x936>
							irCommTempMin = irCommMaxSensorSignal[i];
    9a72:	f0 93 13 05 	sts	0x0513, r31
    9a76:	e0 93 12 05 	sts	0x0512, r30
    9a7a:	5f 01       	movw	r10, r30
						}
						if(irCommTempMax < irCommMaxSensorSignal[i]) {
    9a7c:	40 91 10 05 	lds	r20, 0x0510
    9a80:	50 91 11 05 	lds	r21, 0x0511
    9a84:	4e 17       	cp	r20, r30
    9a86:	5f 07       	cpc	r21, r31
    9a88:	2c f4       	brge	.+10     	; 0x9a94 <irCommTasks+0x94e>
							irCommTempMax = irCommMaxSensorSignal[i];
    9a8a:	f0 93 11 05 	sts	0x0511, r31
    9a8e:	e0 93 10 05 	sts	0x0510, r30
    9a92:	af 01       	movw	r20, r30
						}	
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    9a94:	9a 01       	movw	r18, r20
    9a96:	2a 19       	sub	r18, r10
    9a98:	3b 09       	sbc	r19, r11
    9a9a:	20 35       	cpi	r18, 0x50	; 80
    9a9c:	31 05       	cpc	r19, r1
    9a9e:	0c f4       	brge	.+2      	; 0x9aa2 <irCommTasks+0x95c>
    9aa0:	66 cf       	rjmp	.-308    	; 0x996e <irCommTasks+0x828>
							if((irCommMaxSensorSignal[i]==irCommTempMax) && (irCommRxPeakHighToLow==1)) {
    9aa2:	e4 17       	cp	r30, r20
    9aa4:	f5 07       	cpc	r31, r21
    9aa6:	09 f4       	brne	.+2      	; 0x9aaa <irCommTasks+0x964>
    9aa8:	74 c3       	rjmp	.+1768   	; 0xa192 <irCommTasks+0x104c>
								irCommComputeShift = 0;
							} else if((irCommMaxSensorSignal[i]==irCommTempMin) && (irCommRxPeakHighToLow==0)) {
    9aaa:	ea 15       	cp	r30, r10
    9aac:	fb 05       	cpc	r31, r11
    9aae:	09 f0       	breq	.+2      	; 0x9ab2 <irCommTasks+0x96c>
    9ab0:	5e cf       	rjmp	.-324    	; 0x996e <irCommTasks+0x828>
    9ab2:	20 91 25 05 	lds	r18, 0x0525
    9ab6:	22 23       	and	r18, r18
    9ab8:	09 f0       	breq	.+2      	; 0x9abc <irCommTasks+0x976>
    9aba:	59 cf       	rjmp	.-334    	; 0x996e <irCommTasks+0x828>
								irCommComputeShift = 0;
    9abc:	10 92 15 05 	sts	0x0515, r1
    9ac0:	cc 24       	eor	r12, r12
    9ac2:	55 cf       	rjmp	.-342    	; 0x996e <irCommTasks+0x828>
				irCommState = IRCOMM_RX_IDLE_STATE;

				break;

			case IRCOMM_RX_DEBUG:								
				irCommSendValues = 0;						
    9ac4:	10 92 e0 04 	sts	0x04E0, r1
				while(irCommSendValues==0);	// wait for the start from the uart (computer)
    9ac8:	80 91 e0 04 	lds	r24, 0x04E0
    9acc:	88 23       	and	r24, r24
    9ace:	e1 f3       	breq	.-8      	; 0x9ac8 <irCommTasks+0x982>
				usart0Transmit(0xFF, 1);
    9ad0:	8f ef       	ldi	r24, 0xFF	; 255
    9ad2:	61 e0       	ldi	r22, 0x01	; 1
    9ad4:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
				usart0Transmit(irCommRxMaxSensorTemp[0],1);
    9ad8:	80 91 31 0b 	lds	r24, 0x0B31
    9adc:	61 e0       	ldi	r22, 0x01	; 1
    9ade:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
				usart0Transmit(irCommRxMaxSensorTemp[1],1);
    9ae2:	80 91 33 0b 	lds	r24, 0x0B33
    9ae6:	61 e0       	ldi	r22, 0x01	; 1
    9ae8:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
				usart0Transmit(irCommRxMaxDiffTemp[0]&0xFF,1);
    9aec:	80 91 6a 0b 	lds	r24, 0x0B6A
    9af0:	61 e0       	ldi	r22, 0x01	; 1
    9af2:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
				usart0Transmit(irCommRxMaxDiffTemp[0]>>8,1);
    9af6:	80 91 6b 0b 	lds	r24, 0x0B6B
    9afa:	61 e0       	ldi	r22, 0x01	; 1
    9afc:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
				usart0Transmit(irCommRxMaxDiffTemp[1]&0xFF,1);
    9b00:	80 91 6c 0b 	lds	r24, 0x0B6C
    9b04:	61 e0       	ldi	r22, 0x01	; 1
    9b06:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
				usart0Transmit(irCommRxMaxDiffTemp[1]>>8,1);
    9b0a:	80 91 6d 0b 	lds	r24, 0x0B6D
    9b0e:	61 e0       	ldi	r22, 0x01	; 1
    9b10:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
				usart0Transmit(irCommProxMeanTemp[0]&0xFF,1);
    9b14:	80 91 77 05 	lds	r24, 0x0577
    9b18:	61 e0       	ldi	r22, 0x01	; 1
    9b1a:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
				usart0Transmit(irCommProxMeanTemp[0]>>8,1);
    9b1e:	80 91 78 05 	lds	r24, 0x0578
    9b22:	61 e0       	ldi	r22, 0x01	; 1
    9b24:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
				usart0Transmit(irCommProxMeanTemp[1]&0xFF,1);
    9b28:	80 91 79 05 	lds	r24, 0x0579
    9b2c:	61 e0       	ldi	r22, 0x01	; 1
    9b2e:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
				usart0Transmit(irCommProxMeanTemp[1]>>8,1);
    9b32:	80 91 7a 05 	lds	r24, 0x057A
    9b36:	61 e0       	ldi	r22, 0x01	; 1
    9b38:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
				usart0Transmit(irCommSwitchCountTemp[0],1);
    9b3c:	80 91 59 05 	lds	r24, 0x0559
    9b40:	61 e0       	ldi	r22, 0x01	; 1
    9b42:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
				usart0Transmit(irCommSwitchCountTemp[1],1);
    9b46:	80 91 5a 05 	lds	r24, 0x055A
    9b4a:	61 e0       	ldi	r22, 0x01	; 1
    9b4c:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
    9b50:	c3 e7       	ldi	r28, 0x73	; 115
    9b52:	d8 e0       	ldi	r29, 0x08	; 8
    9b54:	0f e7       	ldi	r16, 0x7F	; 127
    9b56:	15 e0       	ldi	r17, 0x05	; 5
				for(i=0; i<IRCOMM_SAMPLING_WINDOW*2; i++) {
					irCommTempValue = irCommMaxSensorSignalTemp[i];
    9b58:	88 81       	ld	r24, Y
    9b5a:	99 81       	ldd	r25, Y+1	; 0x01
    9b5c:	22 96       	adiw	r28, 0x02	; 2
    9b5e:	80 93 de 04 	sts	0x04DE, r24
    9b62:	90 93 df 04 	sts	0x04DF, r25
					usart0Transmit(irCommTempValue&0xFF,1);
    9b66:	61 e0       	ldi	r22, 0x01	; 1
    9b68:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
					usart0Transmit(irCommTempValue>>8,1);
    9b6c:	80 91 df 04 	lds	r24, 0x04DF
    9b70:	61 e0       	ldi	r22, 0x01	; 1
    9b72:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
					irCommTempValue = irCommMaxSensorSignalFiltTemp[i];
    9b76:	d8 01       	movw	r26, r16
    9b78:	8c 91       	ld	r24, X
    9b7a:	11 96       	adiw	r26, 0x01	; 1
    9b7c:	9c 91       	ld	r25, X
    9b7e:	0e 5f       	subi	r16, 0xFE	; 254
    9b80:	1f 4f       	sbci	r17, 0xFF	; 255
    9b82:	80 93 de 04 	sts	0x04DE, r24
    9b86:	90 93 df 04 	sts	0x04DF, r25
					usart0Transmit(irCommTempValue&0xFF,1);
    9b8a:	61 e0       	ldi	r22, 0x01	; 1
    9b8c:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
					usart0Transmit(irCommTempValue>>8,1);
    9b90:	80 91 df 04 	lds	r24, 0x04DF
    9b94:	61 e0       	ldi	r22, 0x01	; 1
    9b96:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
				usart0Transmit(irCommProxMeanTemp[0]>>8,1);
				usart0Transmit(irCommProxMeanTemp[1]&0xFF,1);
				usart0Transmit(irCommProxMeanTemp[1]>>8,1);
				usart0Transmit(irCommSwitchCountTemp[0],1);
				usart0Transmit(irCommSwitchCountTemp[1],1);
				for(i=0; i<IRCOMM_SAMPLING_WINDOW*2; i++) {
    9b9a:	b8 e0       	ldi	r27, 0x08	; 8
    9b9c:	c3 3c       	cpi	r28, 0xC3	; 195
    9b9e:	db 07       	cpc	r29, r27
    9ba0:	d9 f6       	brne	.-74     	; 0x9b58 <irCommTasks+0xa12>
					usart0Transmit(irCommTempValue>>8,1);
					irCommTempValue = irCommMaxSensorSignalFiltTemp[i];
					usart0Transmit(irCommTempValue&0xFF,1);
					usart0Transmit(irCommTempValue>>8,1);
				}
				usart0Transmit(irCommMaxSensorValueCurrTemp[0]&0xFF,1);
    9ba2:	80 91 40 05 	lds	r24, 0x0540
    9ba6:	61 e0       	ldi	r22, 0x01	; 1
    9ba8:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
				usart0Transmit(irCommMaxSensorValueCurrTemp[0]>>8,1);
    9bac:	80 91 41 05 	lds	r24, 0x0541
    9bb0:	61 e0       	ldi	r22, 0x01	; 1
    9bb2:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
				usart0Transmit(irCommMaxSensorValueCurrTemp[1]&0xFF,1);
    9bb6:	80 91 42 05 	lds	r24, 0x0542
    9bba:	61 e0       	ldi	r22, 0x01	; 1
    9bbc:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
				usart0Transmit(irCommMaxSensorValueCurrTemp[1]>>8,1);
    9bc0:	80 91 43 05 	lds	r24, 0x0543
    9bc4:	61 e0       	ldi	r22, 0x01	; 1
    9bc6:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
				usart0Transmit(irCommMinSensorValueCurrTemp[0]&0xFF,1);
    9bca:	80 91 35 0b 	lds	r24, 0x0B35
    9bce:	61 e0       	ldi	r22, 0x01	; 1
    9bd0:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
				usart0Transmit(irCommMinSensorValueCurrTemp[0]>>8,1);
    9bd4:	80 91 36 0b 	lds	r24, 0x0B36
    9bd8:	61 e0       	ldi	r22, 0x01	; 1
    9bda:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
				usart0Transmit(irCommMinSensorValueCurrTemp[1]&0xFF,1);
    9bde:	80 91 37 0b 	lds	r24, 0x0B37
    9be2:	61 e0       	ldi	r22, 0x01	; 1
    9be4:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
				usart0Transmit(irCommMinSensorValueCurrTemp[1]>>8,1);
    9be8:	80 91 38 0b 	lds	r24, 0x0B38
    9bec:	61 e0       	ldi	r22, 0x01	; 1
    9bee:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
				usart0Transmit(irCommShiftCountTemp[0],1);
    9bf2:	80 91 83 0b 	lds	r24, 0x0B83
    9bf6:	61 e0       	ldi	r22, 0x01	; 1
    9bf8:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
				usart0Transmit(irCommShiftCountTemp[1],1);
    9bfc:	80 91 84 0b 	lds	r24, 0x0B84
    9c00:	61 e0       	ldi	r22, 0x01	; 1
    9c02:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
				usart0Transmit(irCommShiftCountFinalTemp[0],1);
    9c06:	80 91 3d 0b 	lds	r24, 0x0B3D
    9c0a:	61 e0       	ldi	r22, 0x01	; 1
    9c0c:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
				usart0Transmit(irCommShiftCountFinalTemp[1],1);
    9c10:	80 91 3e 0b 	lds	r24, 0x0B3E
    9c14:	61 e0       	ldi	r22, 0x01	; 1
    9c16:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
				usart0Transmit(irCommStartDiffTemp[0]&0xFF,1);
    9c1a:	80 91 c4 08 	lds	r24, 0x08C4
    9c1e:	61 e0       	ldi	r22, 0x01	; 1
    9c20:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
				usart0Transmit(irCommStartDiffTemp[0]>>8,1);
    9c24:	80 91 c5 08 	lds	r24, 0x08C5
    9c28:	61 e0       	ldi	r22, 0x01	; 1
    9c2a:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
				usart0Transmit(irCommStartDiffTemp[1]&0xFF,1);
    9c2e:	80 91 c6 08 	lds	r24, 0x08C6
    9c32:	61 e0       	ldi	r22, 0x01	; 1
    9c34:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
				usart0Transmit(irCommStartDiffTemp[1]>>8,1);
    9c38:	80 91 c7 08 	lds	r24, 0x08C7
    9c3c:	61 e0       	ldi	r22, 0x01	; 1
    9c3e:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
				usart0Transmit(irCommComputeShiftTemp[0],1);
    9c42:	80 91 74 05 	lds	r24, 0x0574
    9c46:	61 e0       	ldi	r22, 0x01	; 1
    9c48:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
				usart0Transmit(irCommComputeShiftTemp[1],1);
    9c4c:	80 91 75 05 	lds	r24, 0x0575
    9c50:	61 e0       	ldi	r22, 0x01	; 1
    9c52:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
				usart0Transmit(irCommRxPeakHighToLowTemp[0],1);
    9c56:	80 91 d1 05 	lds	r24, 0x05D1
    9c5a:	61 e0       	ldi	r22, 0x01	; 1
    9c5c:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
				usart0Transmit(irCommRxPeakHighToLowTemp[1],1);
    9c60:	80 91 d2 05 	lds	r24, 0x05D2
    9c64:	61 e0       	ldi	r22, 0x01	; 1
    9c66:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
				usart0Transmit(irCommRxStartPeakDurationTemp[0],1);
    9c6a:	80 91 13 07 	lds	r24, 0x0713
    9c6e:	61 e0       	ldi	r22, 0x01	; 1
    9c70:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
				usart0Transmit(irCommRxStartPeakDurationTemp[1],1);
    9c74:	80 91 14 07 	lds	r24, 0x0714
    9c78:	61 e0       	ldi	r22, 0x01	; 1
    9c7a:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
				usart0Transmit(irCommRxStartBitDetectedTemp[0],1);
    9c7e:	80 91 7d 05 	lds	r24, 0x057D
    9c82:	61 e0       	ldi	r22, 0x01	; 1
    9c84:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
				usart0Transmit(irCommRxStartBitDetectedTemp[1],1);
    9c88:	80 91 7e 05 	lds	r24, 0x057E
    9c8c:	61 e0       	ldi	r22, 0x01	; 1
    9c8e:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
				usart0Transmit(irCommSyncStateTemp[0],1);
    9c92:	80 91 72 05 	lds	r24, 0x0572
    9c96:	61 e0       	ldi	r22, 0x01	; 1
    9c98:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
				usart0Transmit(irCommSyncStateTemp[1],1);
    9c9c:	80 91 73 05 	lds	r24, 0x0573
    9ca0:	61 e0       	ldi	r22, 0x01	; 1
    9ca2:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
				for(i=0; i<14; i++) {
					usart0Transmit(irCommStateTemp[i],1);
    9ca6:	80 91 44 05 	lds	r24, 0x0544
    9caa:	61 e0       	ldi	r22, 0x01	; 1
    9cac:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
    9cb0:	80 91 45 05 	lds	r24, 0x0545
    9cb4:	61 e0       	ldi	r22, 0x01	; 1
    9cb6:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
    9cba:	80 91 46 05 	lds	r24, 0x0546
    9cbe:	61 e0       	ldi	r22, 0x01	; 1
    9cc0:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
    9cc4:	80 91 47 05 	lds	r24, 0x0547
    9cc8:	61 e0       	ldi	r22, 0x01	; 1
    9cca:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
    9cce:	80 91 48 05 	lds	r24, 0x0548
    9cd2:	61 e0       	ldi	r22, 0x01	; 1
    9cd4:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
    9cd8:	80 91 49 05 	lds	r24, 0x0549
    9cdc:	61 e0       	ldi	r22, 0x01	; 1
    9cde:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
    9ce2:	80 91 4a 05 	lds	r24, 0x054A
    9ce6:	61 e0       	ldi	r22, 0x01	; 1
    9ce8:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
    9cec:	80 91 4b 05 	lds	r24, 0x054B
    9cf0:	61 e0       	ldi	r22, 0x01	; 1
    9cf2:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
    9cf6:	80 91 4c 05 	lds	r24, 0x054C
    9cfa:	61 e0       	ldi	r22, 0x01	; 1
    9cfc:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
    9d00:	80 91 4d 05 	lds	r24, 0x054D
    9d04:	61 e0       	ldi	r22, 0x01	; 1
    9d06:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
    9d0a:	80 91 4e 05 	lds	r24, 0x054E
    9d0e:	61 e0       	ldi	r22, 0x01	; 1
    9d10:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
    9d14:	80 91 4f 05 	lds	r24, 0x054F
    9d18:	61 e0       	ldi	r22, 0x01	; 1
    9d1a:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
    9d1e:	80 91 50 05 	lds	r24, 0x0550
    9d22:	61 e0       	ldi	r22, 0x01	; 1
    9d24:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
    9d28:	80 91 51 05 	lds	r24, 0x0551
    9d2c:	61 e0       	ldi	r22, 0x01	; 1
    9d2e:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
    9d32:	cf e9       	ldi	r28, 0x9F	; 159
    9d34:	d9 e0       	ldi	r29, 0x09	; 9
				}
				for(i=0; i<200; i++) {
					irCommTempValue = irCommBitsSignalTemp[i];
    9d36:	88 81       	ld	r24, Y
    9d38:	99 81       	ldd	r25, Y+1	; 0x01
    9d3a:	22 96       	adiw	r28, 0x02	; 2
    9d3c:	80 93 de 04 	sts	0x04DE, r24
    9d40:	90 93 df 04 	sts	0x04DF, r25
					usart0Transmit(irCommTempValue&0xFF,1);
    9d44:	61 e0       	ldi	r22, 0x01	; 1
    9d46:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
					usart0Transmit(irCommTempValue>>8,1);
    9d4a:	80 91 df 04 	lds	r24, 0x04DF
    9d4e:	61 e0       	ldi	r22, 0x01	; 1
    9d50:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
				usart0Transmit(irCommSyncStateTemp[0],1);
				usart0Transmit(irCommSyncStateTemp[1],1);
				for(i=0; i<14; i++) {
					usart0Transmit(irCommStateTemp[i],1);
				}
				for(i=0; i<200; i++) {
    9d54:	eb e0       	ldi	r30, 0x0B	; 11
    9d56:	cf 32       	cpi	r28, 0x2F	; 47
    9d58:	de 07       	cpc	r29, r30
    9d5a:	69 f7       	brne	.-38     	; 0x9d36 <irCommTasks+0xbf0>
					irCommTempValue = irCommBitsSignalTemp[i];
					usart0Transmit(irCommTempValue&0xFF,1);
					usart0Transmit(irCommTempValue>>8,1);
				}
				for(i=0; i<10; i++) {
					usart0Transmit(irCommRxBitReceivedTemp[i],1);
    9d5c:	80 91 67 08 	lds	r24, 0x0867
    9d60:	61 e0       	ldi	r22, 0x01	; 1
    9d62:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
    9d66:	80 91 68 08 	lds	r24, 0x0868
    9d6a:	61 e0       	ldi	r22, 0x01	; 1
    9d6c:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
    9d70:	80 91 69 08 	lds	r24, 0x0869
    9d74:	61 e0       	ldi	r22, 0x01	; 1
    9d76:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
    9d7a:	80 91 6a 08 	lds	r24, 0x086A
    9d7e:	61 e0       	ldi	r22, 0x01	; 1
    9d80:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
    9d84:	80 91 6b 08 	lds	r24, 0x086B
    9d88:	61 e0       	ldi	r22, 0x01	; 1
    9d8a:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
    9d8e:	80 91 6c 08 	lds	r24, 0x086C
    9d92:	61 e0       	ldi	r22, 0x01	; 1
    9d94:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
    9d98:	80 91 6d 08 	lds	r24, 0x086D
    9d9c:	61 e0       	ldi	r22, 0x01	; 1
    9d9e:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
    9da2:	80 91 6e 08 	lds	r24, 0x086E
    9da6:	61 e0       	ldi	r22, 0x01	; 1
    9da8:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
    9dac:	80 91 6f 08 	lds	r24, 0x086F
    9db0:	61 e0       	ldi	r22, 0x01	; 1
    9db2:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
    9db6:	80 91 70 08 	lds	r24, 0x0870
    9dba:	61 e0       	ldi	r22, 0x01	; 1
    9dbc:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
				}
				usart0Transmit(irCommRxCrc,1);
    9dc0:	80 91 0b 05 	lds	r24, 0x050B
    9dc4:	61 e0       	ldi	r22, 0x01	; 1
    9dc6:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
				usart0Transmit(irCommRxCrcError,1);
    9dca:	80 91 1b 05 	lds	r24, 0x051B
    9dce:	61 e0       	ldi	r22, 0x01	; 1
    9dd0:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
				usart0Transmit(irCommRxByte,1);
    9dd4:	80 91 1c 05 	lds	r24, 0x051C
    9dd8:	61 e0       	ldi	r22, 0x01	; 1
    9dda:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
				usart0Transmit(irCommRxByteExpected,1);				
    9dde:	80 91 1f 05 	lds	r24, 0x051F
    9de2:	61 e0       	ldi	r22, 0x01	; 1
    9de4:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>

				irCommState = IRCOMM_RX_STOP;
    9de8:	89 e0       	ldi	r24, 0x09	; 9
    9dea:	80 93 dd 04 	sts	0x04DD, r24
				break;
    9dee:	c3 c9       	rjmp	.-3194   	; 0x9176 <irCommTasks+0x30>
				irCommProxSum = 0;
				irCommTempMin = 1024;
				irCommTempMax = 0;
				irCommShiftCount = 0;
				irCommComputeShift = 1;												
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    9df0:	60 93 0c 05 	sts	0x050C, r22
    9df4:	70 93 0d 05 	sts	0x050D, r23
    9df8:	80 93 0e 05 	sts	0x050E, r24
    9dfc:	90 93 0f 05 	sts	0x050F, r25
						}											
					 }

				}

				if(irCommComputeShiftIndexTemp>1) {
    9e00:	20 91 00 05 	lds	r18, 0x0500
    9e04:	22 30       	cpi	r18, 0x02	; 2
    9e06:	08 f4       	brcc	.+2      	; 0x9e0a <irCommTasks+0xcc4>
    9e08:	b0 c2       	rjmp	.+1376   	; 0xa36a <irCommTasks+0x1224>
    9e0a:	22 e0       	ldi	r18, 0x02	; 2
    9e0c:	e1 e0       	ldi	r30, 0x01	; 1
    9e0e:	f0 e0       	ldi	r31, 0x00	; 0
					irCommComputeShiftIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommComputeShiftTemp[irCommComputeShiftIndexTemp] = irCommComputeShift;
    9e10:	ec 58       	subi	r30, 0x8C	; 140
    9e12:	fa 4f       	sbci	r31, 0xFA	; 250
    9e14:	c0 82       	st	Z, r12
				irCommComputeShiftIndexTemp++;
    9e16:	20 93 00 05 	sts	0x0500, r18
				
				if(irCommShiftCountIndexTemp>1) {
    9e1a:	20 91 fd 04 	lds	r18, 0x04FD
    9e1e:	22 30       	cpi	r18, 0x02	; 2
    9e20:	08 f4       	brcc	.+2      	; 0x9e24 <irCommTasks+0xcde>
    9e22:	9f c2       	rjmp	.+1342   	; 0xa362 <irCommTasks+0x121c>
    9e24:	22 e0       	ldi	r18, 0x02	; 2
    9e26:	e1 e0       	ldi	r30, 0x01	; 1
    9e28:	f0 e0       	ldi	r31, 0x00	; 0
					irCommShiftCountIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommShiftCountTemp[irCommShiftCountIndexTemp] = irCommShiftCount;
    9e2a:	ed 57       	subi	r30, 0x7D	; 125
    9e2c:	f4 4f       	sbci	r31, 0xF4	; 244
    9e2e:	f0 82       	st	Z, r15
				irCommShiftCountIndexTemp++;
    9e30:	20 93 fd 04 	sts	0x04FD, r18
				
				if(irCommRxPeakHighToLowIndexTemp>1) {
    9e34:	20 91 01 05 	lds	r18, 0x0501
    9e38:	22 30       	cpi	r18, 0x02	; 2
    9e3a:	08 f4       	brcc	.+2      	; 0x9e3e <irCommTasks+0xcf8>
    9e3c:	8e c2       	rjmp	.+1308   	; 0xa35a <irCommTasks+0x1214>
    9e3e:	22 e0       	ldi	r18, 0x02	; 2
    9e40:	e1 e0       	ldi	r30, 0x01	; 1
    9e42:	f0 e0       	ldi	r31, 0x00	; 0
					irCommRxPeakHighToLowIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommRxPeakHighToLowTemp[irCommRxPeakHighToLowIndexTemp] = irCommRxPeakHighToLow;
    9e44:	e0 90 25 05 	lds	r14, 0x0525
    9e48:	ce 2c       	mov	r12, r14
    9e4a:	ef 52       	subi	r30, 0x2F	; 47
    9e4c:	fa 4f       	sbci	r31, 0xFA	; 250
    9e4e:	e0 82       	st	Z, r14
				irCommRxPeakHighToLowIndexTemp++;
    9e50:	20 93 01 05 	sts	0x0501, r18
				
				if(irCommRxStartPeakDurationIndexTemp>1) {
    9e54:	20 91 02 05 	lds	r18, 0x0502
    9e58:	22 30       	cpi	r18, 0x02	; 2
    9e5a:	08 f4       	brcc	.+2      	; 0x9e5e <irCommTasks+0xd18>
    9e5c:	7a c2       	rjmp	.+1268   	; 0xa352 <irCommTasks+0x120c>
    9e5e:	22 e0       	ldi	r18, 0x02	; 2
    9e60:	e1 e0       	ldi	r30, 0x01	; 1
    9e62:	f0 e0       	ldi	r31, 0x00	; 0
					irCommRxStartPeakDurationIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommRxStartPeakDurationTemp[irCommRxStartPeakDurationIndexTemp] = irCommRxStartPeakDuration;
    9e64:	ed 5e       	subi	r30, 0xED	; 237
    9e66:	f8 4f       	sbci	r31, 0xF8	; 248
    9e68:	d0 90 26 05 	lds	r13, 0x0526
    9e6c:	d0 82       	st	Z, r13
				irCommRxStartPeakDurationIndexTemp++;
    9e6e:	20 93 02 05 	sts	0x0502, r18
					
				
				//if(irCommComputeShift != 0) {	// it should not be never 1 because the difference between min and max in the current signal
					//updateRedLed(0);			// is at least IRCOMM_DETECTION_AMPLITUDE_THR (checked in the previous state)
				//}
				irCommProxMean = (int)(irCommProxSum / IRCOMM_SAMPLING_WINDOW);
    9e72:	24 e1       	ldi	r18, 0x14	; 20
    9e74:	30 e0       	ldi	r19, 0x00	; 0
    9e76:	40 e0       	ldi	r20, 0x00	; 0
    9e78:	50 e0       	ldi	r21, 0x00	; 0
    9e7a:	0e 94 6a 57 	call	0xaed4	; 0xaed4 <__divmodsi4>
    9e7e:	c9 01       	movw	r24, r18
    9e80:	30 93 17 05 	sts	0x0517, r19
    9e84:	20 93 16 05 	sts	0x0516, r18

				if(irCommProxMeanIndexTemp>1) {
    9e88:	20 91 f9 04 	lds	r18, 0x04F9
    9e8c:	22 30       	cpi	r18, 0x02	; 2
    9e8e:	08 f4       	brcc	.+2      	; 0x9e92 <irCommTasks+0xd4c>
    9e90:	5c c2       	rjmp	.+1208   	; 0xa34a <irCommTasks+0x1204>
    9e92:	22 e0       	ldi	r18, 0x02	; 2
    9e94:	e1 e0       	ldi	r30, 0x01	; 1
    9e96:	f0 e0       	ldi	r31, 0x00	; 0
					irCommProxMeanIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommProxMeanTemp[irCommProxMeanIndexTemp] = irCommProxMean;
    9e98:	ee 0f       	add	r30, r30
    9e9a:	ff 1f       	adc	r31, r31
    9e9c:	e9 58       	subi	r30, 0x89	; 137
    9e9e:	fa 4f       	sbci	r31, 0xFA	; 250
    9ea0:	91 83       	std	Z+1, r25	; 0x01
    9ea2:	80 83       	st	Z, r24
				irCommProxMeanIndexTemp++;
    9ea4:	20 93 f9 04 	sts	0x04F9, r18
    9ea8:	40 91 f6 04 	lds	r20, 0x04F6
    9eac:	0d c0       	rjmp	.+26     	; 0x9ec8 <irCommTasks+0xd82>

				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
					irCommMaxSensorSignal[i] -= irCommProxMean;

					if(irCommMaxSensorSignalFiltIndexTemp>39) {
    9eae:	e4 2f       	mov	r30, r20
    9eb0:	f0 e0       	ldi	r31, 0x00	; 0
    9eb2:	4f 5f       	subi	r20, 0xFF	; 255
						irCommMaxSensorSignalFiltIndexTemp = 39;
						//updateRedLed(0);
					}
					irCommMaxSensorSignalFiltTemp[irCommMaxSensorSignalFiltIndexTemp] = irCommMaxSensorSignal[i];
    9eb4:	ee 0f       	add	r30, r30
    9eb6:	ff 1f       	adc	r31, r31
    9eb8:	e1 58       	subi	r30, 0x81	; 129
    9eba:	fa 4f       	sbci	r31, 0xFA	; 250
    9ebc:	31 83       	std	Z+1, r19	; 0x01
    9ebe:	20 83       	st	Z, r18
				irCommProxMeanTemp[irCommProxMeanIndexTemp] = irCommProxMean;
				irCommProxMeanIndexTemp++;
				

				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    9ec0:	eb e0       	ldi	r30, 0x0B	; 11
    9ec2:	09 36       	cpi	r16, 0x69	; 105
    9ec4:	1e 07       	cpc	r17, r30
    9ec6:	81 f0       	breq	.+32     	; 0x9ee8 <irCommTasks+0xda2>
					irCommMaxSensorSignal[i] -= irCommProxMean;
    9ec8:	d8 01       	movw	r26, r16
    9eca:	2d 91       	ld	r18, X+
    9ecc:	3c 91       	ld	r19, X
    9ece:	11 97       	sbiw	r26, 0x01	; 1
    9ed0:	28 1b       	sub	r18, r24
    9ed2:	39 0b       	sbc	r19, r25
    9ed4:	e8 01       	movw	r28, r16
    9ed6:	29 93       	st	Y+, r18
    9ed8:	39 93       	st	Y+, r19
    9eda:	8e 01       	movw	r16, r28

					if(irCommMaxSensorSignalFiltIndexTemp>39) {
    9edc:	48 32       	cpi	r20, 0x28	; 40
    9ede:	38 f3       	brcs	.-50     	; 0x9eae <irCommTasks+0xd68>
    9ee0:	48 e2       	ldi	r20, 0x28	; 40
    9ee2:	e7 e2       	ldi	r30, 0x27	; 39
    9ee4:	f0 e0       	ldi	r31, 0x00	; 0
    9ee6:	e6 cf       	rjmp	.-52     	; 0x9eb4 <irCommTasks+0xd6e>
				irCommProxMeanTemp[irCommProxMeanIndexTemp] = irCommProxMean;
				irCommProxMeanIndexTemp++;
				

				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    9ee8:	40 93 f6 04 	sts	0x04F6, r20
					irCommMaxSensorSignalFiltIndexTemp++;
					
				}
						
				// start counting number of switch around mean signal
				if(irCommMaxSensorSignal[0] > 0) {
    9eec:	80 91 41 0b 	lds	r24, 0x0B41
    9ef0:	90 91 42 0b 	lds	r25, 0x0B42
    9ef4:	18 16       	cp	r1, r24
    9ef6:	19 06       	cpc	r1, r25
    9ef8:	0c f0       	brlt	.+2      	; 0x9efc <irCommTasks+0xdb6>
    9efa:	21 c2       	rjmp	.+1090   	; 0xa33e <irCommTasks+0x11f8>
					irCommSignalState = 1;
    9efc:	81 e0       	ldi	r24, 0x01	; 1
    9efe:	80 93 18 05 	sts	0x0518, r24
    9f02:	21 e0       	ldi	r18, 0x01	; 1
    9f04:	38 2f       	mov	r19, r24
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
    9f06:	e3 e4       	ldi	r30, 0x43	; 67
    9f08:	fb e0       	ldi	r31, 0x0B	; 11
    9f0a:	40 e0       	ldi	r20, 0x00	; 0
    9f0c:	07 c0       	rjmp	.+14     	; 0x9f1c <irCommTasks+0xdd6>
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
    9f0e:	27 fd       	sbrc	r18, 7
    9f10:	0f c0       	rjmp	.+30     	; 0x9f30 <irCommTasks+0xdea>
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
    9f12:	8e 16       	cp	r8, r30
    9f14:	9f 06       	cpc	r9, r31
    9f16:	79 f0       	breq	.+30     	; 0x9f36 <irCommTasks+0xdf0>
    9f18:	ce 2c       	mov	r12, r14
    9f1a:	23 2f       	mov	r18, r19
					if(irCommMaxSensorSignal[i] > 0) {
    9f1c:	81 91       	ld	r24, Z+
    9f1e:	91 91       	ld	r25, Z+
    9f20:	18 16       	cp	r1, r24
    9f22:	19 06       	cpc	r1, r25
    9f24:	a4 f3       	brlt	.-24     	; 0x9f0e <irCommTasks+0xdc8>
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
							irCommSwitchCount++;
						}
					} else {
						if(irCommSignalState > 0) {
    9f26:	12 16       	cp	r1, r18
    9f28:	a4 f7       	brge	.-24     	; 0x9f12 <irCommTasks+0xdcc>
							irCommSignalState = -1;
							irCommSwitchCount++;
    9f2a:	4f 5f       	subi	r20, 0xFF	; 255
							irCommSignalState = 1;
							irCommSwitchCount++;
						}
					} else {
						if(irCommSignalState > 0) {
							irCommSignalState = -1;
    9f2c:	3f ef       	ldi	r19, 0xFF	; 255
    9f2e:	f1 cf       	rjmp	.-30     	; 0x9f12 <irCommTasks+0xdcc>
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
							irCommSwitchCount++;
    9f30:	4f 5f       	subi	r20, 0xFF	; 255
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
    9f32:	31 e0       	ldi	r19, 0x01	; 1
    9f34:	ee cf       	rjmp	.-36     	; 0x9f12 <irCommTasks+0xdcc>
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
    9f36:	30 93 18 05 	sts	0x0518, r19
    9f3a:	40 93 19 05 	sts	0x0519, r20
							irCommSwitchCount++;
						}
					}
				}

				if(irCommSwitchCountIndexTemp>1) {
    9f3e:	80 91 fa 04 	lds	r24, 0x04FA
    9f42:	82 30       	cpi	r24, 0x02	; 2
    9f44:	08 f4       	brcc	.+2      	; 0x9f48 <irCommTasks+0xe02>
    9f46:	e5 c1       	rjmp	.+970    	; 0xa312 <irCommTasks+0x11cc>
    9f48:	92 e0       	ldi	r25, 0x02	; 2
    9f4a:	e1 e0       	ldi	r30, 0x01	; 1
    9f4c:	f0 e0       	ldi	r31, 0x00	; 0
					irCommSwitchCountIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommSwitchCountTemp[irCommSwitchCountIndexTemp] = irCommSwitchCount;
    9f4e:	80 91 19 05 	lds	r24, 0x0519
    9f52:	e7 5a       	subi	r30, 0xA7	; 167
    9f54:	fa 4f       	sbci	r31, 0xFA	; 250
    9f56:	80 83       	st	Z, r24
				irCommSwitchCountIndexTemp++;
    9f58:	90 93 fa 04 	sts	0x04FA, r25
				

				//turnOffGreenLeds();
				if(irCommRxPeakHighToLow==1) {
    9f5c:	fc 2d       	mov	r31, r12
    9f5e:	f1 30       	cpi	r31, 0x01	; 1
    9f60:	09 f4       	brne	.+2      	; 0x9f64 <irCommTasks+0xe1e>
    9f62:	af c1       	rjmp	.+862    	; 0xa2c2 <irCommTasks+0x117c>
							resetDebugVariables();				
							break;
						}
					}
				} else {
					if(irCommRxStartBitDetected==1) {
    9f64:	90 91 24 05 	lds	r25, 0x0524
    9f68:	91 30       	cpi	r25, 0x01	; 1
    9f6a:	09 f4       	brne	.+2      	; 0x9f6e <irCommTasks+0xe28>
    9f6c:	08 c2       	rjmp	.+1040   	; 0xa37e <irCommTasks+0x1238>

							resetDebugVariables();				
							break;
						}
					} else {
						if(irCommSwitchCount==2) {
    9f6e:	82 30       	cpi	r24, 0x02	; 2
    9f70:	09 f4       	brne	.+2      	; 0x9f74 <irCommTasks+0xe2e>
    9f72:	5a c2       	rjmp	.+1204   	; 0xa428 <irCommTasks+0x12e2>
							irCommShiftCounter = 0;
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else if(irCommSwitchCount==1) {
    9f74:	81 30       	cpi	r24, 0x01	; 1
    9f76:	09 f4       	brne	.+2      	; 0x9f7a <irCommTasks+0xe34>
    9f78:	e6 c2       	rjmp	.+1484   	; 0xa546 <irCommTasks+0x1400>
								irCommRxCrc = 0;	
								irCommRxByte = 0;
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
							}
						} else {
							currentProx = 0;
    9f7a:	10 92 34 02 	sts	0x0234, r1
							adcSaveDataTo = SKIP_SAMPLE;
    9f7e:	85 e0       	ldi	r24, 0x05	; 5
    9f80:	80 93 c9 02 	sts	0x02C9, r24
							adcSamplingState = 0;
    9f84:	10 92 ca 02 	sts	0x02CA, r1
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;							
    9f88:	10 92 dc 04 	sts	0x04DC, r1
							irCommState = IRCOMM_RX_IDLE_STATE;
    9f8c:	81 e0       	ldi	r24, 0x01	; 1
    9f8e:	80 93 dd 04 	sts	0x04DD, r24

							if(irCommSyncStateIndexTemp>1) {
    9f92:	20 91 05 05 	lds	r18, 0x0505
    9f96:	22 30       	cpi	r18, 0x02	; 2
    9f98:	08 f4       	brcc	.+2      	; 0x9f9c <irCommTasks+0xe56>
    9f9a:	79 c3       	rjmp	.+1778   	; 0xa68e <irCommTasks+0x1548>
    9f9c:	22 e0       	ldi	r18, 0x02	; 2
    9f9e:	81 e0       	ldi	r24, 0x01	; 1
    9fa0:	90 e0       	ldi	r25, 0x00	; 0
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 15;
    9fa2:	8e 58       	subi	r24, 0x8E	; 142
    9fa4:	9a 4f       	sbci	r25, 0xFA	; 250
    9fa6:	3f e0       	ldi	r19, 0x0F	; 15
    9fa8:	ec 01       	movw	r28, r24
    9faa:	38 83       	st	Y, r19
							irCommSyncStateIndexTemp++;
    9fac:	20 93 05 05 	sts	0x0505, r18
							//irCommState = IRCOMM_RX_DEBUG;
							//irCommAdcRxState = 12;
							//updateRedLed(0);
							//break;

							resetDebugVariables();				
    9fb0:	0e 94 fa 47 	call	0x8ff4	; 0x8ff4 <resetDebugVariables>
							break;				
    9fb4:	e0 c8       	rjmp	.-3648   	; 0x9176 <irCommTasks+0x30>

				}							
				break;

			case IRCOMM_RX_CHECK_CRC:
				irCommRxCrcError = (irCommRxCrc + (irCommRxBitReceived[8]<<1) + irCommRxBitReceived[9])&0x03;
    9fb6:	80 91 71 05 	lds	r24, 0x0571
    9fba:	90 91 0b 05 	lds	r25, 0x050B
    9fbe:	89 0f       	add	r24, r25
    9fc0:	90 91 70 05 	lds	r25, 0x0570
    9fc4:	99 0f       	add	r25, r25
    9fc6:	89 0f       	add	r24, r25
    9fc8:	83 70       	andi	r24, 0x03	; 3
    9fca:	80 93 1b 05 	sts	0x051B, r24
				if(irCommRxCrcError==0) {
    9fce:	88 23       	and	r24, r24
    9fd0:	69 f4       	brne	.+26     	; 0x9fec <irCommTasks+0xea6>
					irCommRxLastDataReceived = irCommRxByte;
    9fd2:	80 91 1c 05 	lds	r24, 0x051C
    9fd6:	80 93 21 05 	sts	0x0521, r24
					irCommRxReceivingSensor = irCommRxMaxSensor;
    9fda:	90 91 29 05 	lds	r25, 0x0529
    9fde:	90 93 19 02 	sts	0x0219, r25
					irCommRxDataAvailable = 1;
    9fe2:	00 93 22 05 	sts	0x0522, r16
					//updateBlueLed(0);
					usart0Transmit(irCommRxByte,1);		
    9fe6:	61 e0       	ldi	r22, 0x01	; 1
    9fe8:	0e 94 54 20 	call	0x40a8	; 0x40a8 <usart0Transmit>
					//updateBlueLed(255);			
				}
												
				currentProx = 0;
    9fec:	10 92 34 02 	sts	0x0234, r1
				adcSaveDataTo = SKIP_SAMPLE;
    9ff0:	85 e0       	ldi	r24, 0x05	; 5
    9ff2:	80 93 c9 02 	sts	0x02C9, r24
				adcSamplingState = 0;
    9ff6:	10 92 ca 02 	sts	0x02CA, r1
				irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;				
    9ffa:	10 92 dc 04 	sts	0x04DC, r1
				} else {
					irCommRxPrevDataReceived = irCommRxLastDataReceived;
				}
				*/

				resetDebugVariables();
    9ffe:	0e 94 fa 47 	call	0x8ff4	; 0x8ff4 <resetDebugVariables>

				irCommState = IRCOMM_RX_IDLE_STATE;
    a002:	81 e0       	ldi	r24, 0x01	; 1
    a004:	80 93 dd 04 	sts	0x04DD, r24

				break;
    a008:	b6 c8       	rjmp	.-3732   	; 0x9176 <irCommTasks+0x30>

	if(irCommMode==IRCOMM_MODE_RECEIVE) {

		switch(irCommState) {
			case IRCOMM_RX_IDLE_STATE:				
				if((irCommRxStartBitDetected==0) && (irCommEnabled!=irCommEnabledNext)) {
    a00a:	80 91 24 05 	lds	r24, 0x0524
    a00e:	88 23       	and	r24, r24
    a010:	09 f0       	breq	.+2      	; 0xa014 <irCommTasks+0xece>
    a012:	b1 c8       	rjmp	.-3742   	; 0x9176 <irCommTasks+0x30>
    a014:	90 91 da 04 	lds	r25, 0x04DA
    a018:	80 91 db 04 	lds	r24, 0x04DB
    a01c:	98 17       	cp	r25, r24
    a01e:	09 f4       	brne	.+2      	; 0xa022 <irCommTasks+0xedc>
    a020:	aa c8       	rjmp	.-3756   	; 0x9176 <irCommTasks+0x30>
					if((getTime100MicroSec() - irCommTxLastTransmissionTime) > PAUSE_200_MSEC) {
    a022:	0e 94 37 22 	call	0x446e	; 0x446e <getTime100MicroSec>
    a026:	20 91 2f 05 	lds	r18, 0x052F
    a02a:	30 91 30 05 	lds	r19, 0x0530
    a02e:	40 91 31 05 	lds	r20, 0x0531
    a032:	50 91 32 05 	lds	r21, 0x0532
    a036:	62 1b       	sub	r22, r18
    a038:	73 0b       	sbc	r23, r19
    a03a:	84 0b       	sbc	r24, r20
    a03c:	95 0b       	sbc	r25, r21
    a03e:	64 38       	cpi	r22, 0x84	; 132
    a040:	27 e0       	ldi	r18, 0x07	; 7
    a042:	72 07       	cpc	r23, r18
    a044:	20 e0       	ldi	r18, 0x00	; 0
    a046:	82 07       	cpc	r24, r18
    a048:	20 e0       	ldi	r18, 0x00	; 0
    a04a:	92 07       	cpc	r25, r18
    a04c:	08 f4       	brcc	.+2      	; 0xa050 <irCommTasks+0xf0a>
    a04e:	93 c8       	rjmp	.-3802   	; 0x9176 <irCommTasks+0x30>
#include "irCommunication.h"


void irCommInitTransmitter() {
	irCommEnabled = IRCOMM_MODE_TRANSMIT;
    a050:	82 e0       	ldi	r24, 0x02	; 2
    a052:	80 93 da 04 	sts	0x04DA, r24
	irCommState = IRCOMM_TX_IDLE_STATE;
    a056:	10 93 dd 04 	sts	0x04DD, r17
    a05a:	8d c8       	rjmp	.-3814   	; 0x9176 <irCommTasks+0x30>
				}

				irCommProxMean = (int)(irCommProxSum / IRCOMM_SAMPLING_WINDOW);

				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    a05c:	20 93 06 05 	sts	0x0506, r18
					irCommBitsSignalTemp[irCommBitsSignalIndexTemp] = irCommMaxSensorSignal[i];
					irCommBitsSignalIndexTemp++;
				}
						
				// start counting number of switch around mean signal
				if(irCommMaxSensorSignal[0] > 0) {
    a060:	80 91 41 0b 	lds	r24, 0x0B41
    a064:	90 91 42 0b 	lds	r25, 0x0B42
    a068:	18 16       	cp	r1, r24
    a06a:	19 06       	cpc	r1, r25
    a06c:	0c f0       	brlt	.+2      	; 0xa070 <irCommTasks+0xf2a>
    a06e:	81 c1       	rjmp	.+770    	; 0xa372 <irCommTasks+0x122c>
					irCommSignalState = 1;
    a070:	81 e0       	ldi	r24, 0x01	; 1
    a072:	80 93 18 05 	sts	0x0518, r24
    a076:	21 e0       	ldi	r18, 0x01	; 1
    a078:	38 2f       	mov	r19, r24
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
    a07a:	e3 e4       	ldi	r30, 0x43	; 67
    a07c:	fb e0       	ldi	r31, 0x0B	; 11
    a07e:	40 e0       	ldi	r20, 0x00	; 0
    a080:	07 c0       	rjmp	.+14     	; 0xa090 <irCommTasks+0xf4a>
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
    a082:	27 fd       	sbrc	r18, 7
    a084:	0f c0       	rjmp	.+30     	; 0xa0a4 <irCommTasks+0xf5e>
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
    a086:	2b e0       	ldi	r18, 0x0B	; 11
    a088:	e9 36       	cpi	r30, 0x69	; 105
    a08a:	f2 07       	cpc	r31, r18
    a08c:	71 f0       	breq	.+28     	; 0xa0aa <irCommTasks+0xf64>
    a08e:	23 2f       	mov	r18, r19
					if(irCommMaxSensorSignal[i] > 0) {
    a090:	81 91       	ld	r24, Z+
    a092:	91 91       	ld	r25, Z+
    a094:	18 16       	cp	r1, r24
    a096:	19 06       	cpc	r1, r25
    a098:	a4 f3       	brlt	.-24     	; 0xa082 <irCommTasks+0xf3c>
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
							irCommSwitchCount++;
						}
					} else {
						if(irCommSignalState > 0) {
    a09a:	12 16       	cp	r1, r18
    a09c:	a4 f7       	brge	.-24     	; 0xa086 <irCommTasks+0xf40>
							irCommSignalState = -1;
							irCommSwitchCount++;
    a09e:	4f 5f       	subi	r20, 0xFF	; 255
							irCommSignalState = 1;
							irCommSwitchCount++;
						}
					} else {
						if(irCommSignalState > 0) {
							irCommSignalState = -1;
    a0a0:	3f ef       	ldi	r19, 0xFF	; 255
    a0a2:	f1 cf       	rjmp	.-30     	; 0xa086 <irCommTasks+0xf40>
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
							irCommSwitchCount++;
    a0a4:	4f 5f       	subi	r20, 0xFF	; 255
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
    a0a6:	31 e0       	ldi	r19, 0x01	; 1
    a0a8:	ee cf       	rjmp	.-36     	; 0xa086 <irCommTasks+0xf40>
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
    a0aa:	30 93 18 05 	sts	0x0518, r19
    a0ae:	40 93 19 05 	sts	0x0519, r20
							irCommSwitchCount++;
						}
					}
				}
				// check whether we received either a "0" or a "1"
				if(irCommSwitchCount >= (IRCOMM_BIT0_SWITCH_COUNT-2)) {
    a0b2:	46 30       	cpi	r20, 0x06	; 6
    a0b4:	08 f4       	brcc	.+2      	; 0xa0b8 <irCommTasks+0xf72>
    a0b6:	ab c0       	rjmp	.+342    	; 0xa20e <irCommTasks+0x10c8>
					irCommRxBitReceived[irCommRxBitCount] = 0;
    a0b8:	80 91 1a 05 	lds	r24, 0x051A
    a0bc:	e8 2f       	mov	r30, r24
    a0be:	f0 e0       	ldi	r31, 0x00	; 0
    a0c0:	e8 59       	subi	r30, 0x98	; 152
    a0c2:	fa 4f       	sbci	r31, 0xFA	; 250
    a0c4:	10 82       	st	Z, r1
					if(irCommRxBitCount<8) {	// do not consider the crc for byte interpretation
    a0c6:	88 30       	cpi	r24, 0x08	; 8
    a0c8:	28 f4       	brcc	.+10     	; 0xa0d4 <irCommTasks+0xf8e>
						irCommRxByte = irCommRxByte<<1;	// bit0, only shift
    a0ca:	90 91 1c 05 	lds	r25, 0x051C
    a0ce:	99 0f       	add	r25, r25
    a0d0:	90 93 1c 05 	sts	0x051C, r25
					resetDebugVariables();
					break;

				}

				if(irCommRxBitReceivedIndexTemp>9) {
    a0d4:	90 91 07 05 	lds	r25, 0x0507
    a0d8:	9a 30       	cpi	r25, 0x0A	; 10
    a0da:	08 f0       	brcs	.+2      	; 0xa0de <irCommTasks+0xf98>
    a0dc:	b2 c0       	rjmp	.+356    	; 0xa242 <irCommTasks+0x10fc>
    a0de:	a9 2f       	mov	r26, r25
    a0e0:	b0 e0       	ldi	r27, 0x00	; 0
    a0e2:	9f 5f       	subi	r25, 0xFF	; 255
					irCommRxBitReceivedIndexTemp = 9;
					//updateRedLed(0);
				}
				irCommRxBitReceivedTemp[irCommRxBitReceivedIndexTemp] = irCommRxBitReceived[irCommRxBitCount];
    a0e4:	a9 59       	subi	r26, 0x99	; 153
    a0e6:	b7 4f       	sbci	r27, 0xF7	; 247
    a0e8:	e8 2f       	mov	r30, r24
    a0ea:	f0 e0       	ldi	r31, 0x00	; 0
    a0ec:	e8 59       	subi	r30, 0x98	; 152
    a0ee:	fa 4f       	sbci	r31, 0xFA	; 250
    a0f0:	20 81       	ld	r18, Z
    a0f2:	2c 93       	st	X, r18
				irCommRxBitReceivedIndexTemp++;
    a0f4:	90 93 07 05 	sts	0x0507, r25

				//setGreenLed(irCommRxBitCount, 1);

				irCommRxBitCount++;
    a0f8:	8f 5f       	subi	r24, 0xFF	; 255
    a0fa:	80 93 1a 05 	sts	0x051A, r24
				if(irCommRxBitCount == 10) {	// received 8 bit of data + 2 bit of crc
    a0fe:	8a 30       	cpi	r24, 0x0A	; 10
    a100:	09 f4       	brne	.+2      	; 0xa104 <irCommTasks+0xfbe>
    a102:	62 c1       	rjmp	.+708    	; 0xa3c8 <irCommTasks+0x1282>
					}
					irCommStateTemp[irCommStateIndexTemp] = irCommState;
					irCommStateIndexTemp++;

				} else {
					irCommState = IRCOMM_RX_WAITING_BIT;
    a104:	85 e0       	ldi	r24, 0x05	; 5
    a106:	80 93 dd 04 	sts	0x04DD, r24

					if(irCommStateIndexTemp>13) {
    a10a:	80 91 04 05 	lds	r24, 0x0504
    a10e:	8e 30       	cpi	r24, 0x0E	; 14
    a110:	08 f0       	brcs	.+2      	; 0xa114 <irCommTasks+0xfce>
    a112:	05 cb       	rjmp	.-2550   	; 0x971e <irCommTasks+0x5d8>
    a114:	e8 2f       	mov	r30, r24
    a116:	f0 e0       	ldi	r31, 0x00	; 0
    a118:	8f 5f       	subi	r24, 0xFF	; 255
    a11a:	04 cb       	rjmp	.-2552   	; 0x9724 <irCommTasks+0x5de>
						}
					}
				} else {
					// cannot get a reliable signal from the sensor from which the start bit was detected the previous time,
					// thus restart listening from the next sensor
					if(irCommRxStartBitDetected == 1) {
    a11c:	80 91 24 05 	lds	r24, 0x0524
    a120:	81 30       	cpi	r24, 0x01	; 1
    a122:	09 f4       	brne	.+2      	; 0xa126 <irCommTasks+0xfe0>
    a124:	5a c1       	rjmp	.+692    	; 0xa3da <irCommTasks+0x1294>
					//if(irCommRxStartBitDetected == 1) {	// signal becomes too low to be reliable...or something else happened				
					//	irCommState = IRCOMM_RX_DEBUG;
					//	irCommAdcRxState = 12;
					//	updateGreenLed(0);
					//} else {
						irCommRxStartBitDetected = 0;
    a126:	10 92 24 05 	sts	0x0524, r1
						irCommRxByte += 1;
					}
				} else {	// error...no significant signal perceived
					//irCommRxBitReceived[irCommRxBitCount] = 0xFF;
					//updateRedLed(0);
					currentProx = 0;
    a12a:	10 92 34 02 	sts	0x0234, r1
					adcSaveDataTo = SKIP_SAMPLE;
    a12e:	85 e0       	ldi	r24, 0x05	; 5
    a130:	80 93 c9 02 	sts	0x02C9, r24
					adcSamplingState = 0;
    a134:	10 92 ca 02 	sts	0x02CA, r1
					irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;					
    a138:	10 92 dc 04 	sts	0x04DC, r1
					irCommState = IRCOMM_RX_IDLE_STATE;
    a13c:	81 e0       	ldi	r24, 0x01	; 1
    a13e:	80 93 dd 04 	sts	0x04DD, r24

					//irCommState = IRCOMM_RX_DEBUG;
					//irCommAdcRxState = 12;
					//break;

					resetDebugVariables();
    a142:	0e 94 fa 47 	call	0x8ff4	; 0x8ff4 <resetDebugVariables>
					break;
    a146:	17 c8       	rjmp	.-4050   	; 0x9176 <irCommTasks+0x30>
							irCommStartDiffTemp[irCommStartDiffIndexTemp] = irCommTempValue;
							irCommStartDiffIndexTemp++;
							

							if(irCommMaxSensorSignal[i] == irCommTempMax) {
								irCommRxPeakHighToLow = 0;
    a148:	10 92 25 05 	sts	0x0525, r1
    a14c:	74 cc       	rjmp	.-1816   	; 0x9a36 <irCommTasks+0x8f0>
							irCommTempMax = irCommMaxSensorSignal[i];
						}
						irCommTempValue = (irCommTempMax - irCommTempMin);						
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {

							if(irCommStartDiffIndexTemp>1) {
    a14e:	2c 2d       	mov	r18, r12
    a150:	30 e0       	ldi	r19, 0x00	; 0
    a152:	c3 94       	inc	r12
    a154:	5f cc       	rjmp	.-1858   	; 0x9a14 <irCommTasks+0x8ce>
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
					irCommTxBitToTransmit[9-i] = irCommTempValue;
					if(irCommTempValue==1) {
						irCommTxCrc++;
    a156:	4f 5f       	subi	r20, 0xFF	; 255
    a158:	91 c8       	rjmp	.-3806   	; 0x927c <irCommTasks+0x136>
    a15a:	4f 5f       	subi	r20, 0xFF	; 255
    a15c:	7e c8       	rjmp	.-3844   	; 0x925a <irCommTasks+0x114>
    a15e:	4f 5f       	subi	r20, 0xFF	; 255
    a160:	6d c8       	rjmp	.-3878   	; 0x923c <irCommTasks+0xf6>
    a162:	4f 5f       	subi	r20, 0xFF	; 255
    a164:	5e c8       	rjmp	.-3908   	; 0x9222 <irCommTasks+0xdc>
    a166:	4f 5f       	subi	r20, 0xFF	; 255
    a168:	ad c8       	rjmp	.-3750   	; 0x92c4 <irCommTasks+0x17e>

			case IRCOMM_TX_COMPUTE_TIMINGS:
				//updateBlueLed(255);
				if(irCommTxBitToTransmit[irCommTxBitCount] == 3) {
					//updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START2_DURATION;					
    a16a:	80 ef       	ldi	r24, 0xF0	; 240
    a16c:	90 e0       	ldi	r25, 0x00	; 0
    a16e:	90 93 37 05 	sts	0x0537, r25
    a172:	80 93 36 05 	sts	0x0536, r24
					irCommTxSwitchCount = IRCOMM_BIT_START2_SWITCH_COUNT;
    a176:	81 e0       	ldi	r24, 0x01	; 1
    a178:	80 93 38 05 	sts	0x0538, r24
    a17c:	f4 ca       	rjmp	.-2584   	; 0x9766 <irCommTasks+0x620>
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
					irCommTxBitToTransmit[9-i] = irCommTempValue;
					if(irCommTempValue==1) {
						irCommTxCrc++;
    a17e:	4f 5f       	subi	r20, 0xFF	; 255
    a180:	90 c8       	rjmp	.-3808   	; 0x92a2 <irCommTasks+0x15c>
    a182:	4f 5f       	subi	r20, 0xFF	; 255
    a184:	aa c8       	rjmp	.-3756   	; 0x92da <irCommTasks+0x194>
				if(irCommTxBitCount == 0) {
					//PORTA = irCommTxSensorMask;
					if(irCommTxSensorGroup==0) {
						PORTA = 0xAA;
					} else {
						PORTA = 0x55;
    a186:	85 e5       	ldi	r24, 0x55	; 85
    a188:	82 b9       	out	0x02, r24	; 2
    a18a:	f6 ca       	rjmp	.-2580   	; 0x9778 <irCommTasks+0x632>
							

							if(irCommMaxSensorSignal[i] == irCommTempMax) {
								irCommRxPeakHighToLow = 0;
							} else if(irCommMaxSensorSignal[i] == irCommTempMin) {
								irCommRxPeakHighToLow = 1;
    a18c:	50 92 25 05 	sts	0x0525, r5
    a190:	52 cc       	rjmp	.-1884   	; 0x9a36 <irCommTasks+0x8f0>
						}
						if(irCommTempMax < irCommMaxSensorSignal[i]) {
							irCommTempMax = irCommMaxSensorSignal[i];
						}	
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
							if((irCommMaxSensorSignal[i]==irCommTempMax) && (irCommRxPeakHighToLow==1)) {
    a192:	20 91 25 05 	lds	r18, 0x0525
    a196:	21 30       	cpi	r18, 0x01	; 1
    a198:	09 f0       	breq	.+2      	; 0xa19c <irCommTasks+0x1056>
    a19a:	87 cc       	rjmp	.-1778   	; 0x9aaa <irCommTasks+0x964>
    a19c:	8f cc       	rjmp	.-1762   	; 0x9abc <irCommTasks+0x976>

			case IRCOMM_RX_MAX_SENSOR_STATE:
				// check from how many sensors the robot is receiving a possible message
				for(i=0; i<8; i++) {
					if((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
						irCommRxNumReceivingSensors++;
    a19e:	84 2f       	mov	r24, r20
    a1a0:	8f 5f       	subi	r24, 0xFF	; 255
    a1a2:	80 93 2b 05 	sts	0x052B, r24
    a1a6:	39 c9       	rjmp	.-3470   	; 0x941a <irCommTasks+0x2d4>
    a1a8:	4f 5f       	subi	r20, 0xFF	; 255
    a1aa:	40 93 2b 05 	sts	0x052B, r20
    a1ae:	0b c9       	rjmp	.-3562   	; 0x93c6 <irCommTasks+0x280>
    a1b0:	4f 5f       	subi	r20, 0xFF	; 255
    a1b2:	40 93 2b 05 	sts	0x052B, r20
    a1b6:	f9 c8       	rjmp	.-3598   	; 0x93aa <irCommTasks+0x264>
    a1b8:	4f 5f       	subi	r20, 0xFF	; 255
    a1ba:	40 93 2b 05 	sts	0x052B, r20
    a1be:	e7 c8       	rjmp	.-3634   	; 0x938e <irCommTasks+0x248>
    a1c0:	4f 5f       	subi	r20, 0xFF	; 255
    a1c2:	40 93 2b 05 	sts	0x052B, r20
    a1c6:	d5 c8       	rjmp	.-3670   	; 0x9372 <irCommTasks+0x22c>
    a1c8:	4f 5f       	subi	r20, 0xFF	; 255
    a1ca:	40 93 2b 05 	sts	0x052B, r20
    a1ce:	17 c9       	rjmp	.-3538   	; 0x93fe <irCommTasks+0x2b8>
    a1d0:	4f 5f       	subi	r20, 0xFF	; 255
    a1d2:	40 93 2b 05 	sts	0x052B, r20
    a1d6:	05 c9       	rjmp	.-3574   	; 0x93e2 <irCommTasks+0x29c>
								irCommRxMaxSensor = 0;
							}
							i++;
						}
					} else {	// listen from the same sensor when a start bit is detected
						irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
    a1d8:	20 91 29 05 	lds	r18, 0x0529
    a1dc:	30 91 2a 05 	lds	r19, 0x052A
    a1e0:	e9 01       	movw	r28, r18
    a1e2:	cc 0f       	add	r28, r28
    a1e4:	dd 1f       	adc	r29, r29
    a1e6:	ad 01       	movw	r20, r26
    a1e8:	4c 0f       	add	r20, r28
    a1ea:	5d 1f       	adc	r21, r29
    a1ec:	8e 01       	movw	r16, r28
    a1ee:	0e 0f       	add	r16, r30
    a1f0:	1f 1f       	adc	r17, r31
    a1f2:	fa 01       	movw	r30, r20
    a1f4:	80 81       	ld	r24, Z
    a1f6:	91 81       	ldd	r25, Z+1	; 0x01
    a1f8:	d8 01       	movw	r26, r16
    a1fa:	6d 91       	ld	r22, X+
    a1fc:	7c 91       	ld	r23, X
    a1fe:	11 97       	sbiw	r26, 0x01	; 1
    a200:	86 1b       	sub	r24, r22
    a202:	97 0b       	sbc	r25, r23
    a204:	90 93 28 05 	sts	0x0528, r25
    a208:	80 93 27 05 	sts	0x0527, r24
    a20c:	2f ca       	rjmp	.-2978   	; 0x966c <irCommTasks+0x526>
				if(irCommSwitchCount >= (IRCOMM_BIT0_SWITCH_COUNT-2)) {
					irCommRxBitReceived[irCommRxBitCount] = 0;
					if(irCommRxBitCount<8) {	// do not consider the crc for byte interpretation
						irCommRxByte = irCommRxByte<<1;	// bit0, only shift
					}
				} else if(irCommSwitchCount >= (IRCOMM_BIT1_SWITCH_COUNT-1)) {
    a20e:	43 30       	cpi	r20, 0x03	; 3
    a210:	08 f4       	brcc	.+2      	; 0xa214 <irCommTasks+0x10ce>
    a212:	8b cf       	rjmp	.-234    	; 0xa12a <irCommTasks+0xfe4>
					irCommRxBitReceived[irCommRxBitCount] = 1;
    a214:	80 91 1a 05 	lds	r24, 0x051A
    a218:	e8 2f       	mov	r30, r24
    a21a:	f0 e0       	ldi	r31, 0x00	; 0
    a21c:	e8 59       	subi	r30, 0x98	; 152
    a21e:	fa 4f       	sbci	r31, 0xFA	; 250
    a220:	91 e0       	ldi	r25, 0x01	; 1
    a222:	90 83       	st	Z, r25
					if(irCommRxBitCount<8) {	// do not consider the crc for byte interpretation
    a224:	88 30       	cpi	r24, 0x08	; 8
    a226:	08 f0       	brcs	.+2      	; 0xa22a <irCommTasks+0x10e4>
    a228:	55 cf       	rjmp	.-342    	; 0xa0d4 <irCommTasks+0xf8e>
						irCommRxCrc++;
    a22a:	90 91 0b 05 	lds	r25, 0x050B
    a22e:	9f 5f       	subi	r25, 0xFF	; 255
    a230:	90 93 0b 05 	sts	0x050B, r25
						irCommRxByte = irCommRxByte<<1;	// bit1, shift and add 1
    a234:	90 91 1c 05 	lds	r25, 0x051C
    a238:	99 0f       	add	r25, r25
						irCommRxByte += 1;
    a23a:	9f 5f       	subi	r25, 0xFF	; 255
    a23c:	90 93 1c 05 	sts	0x051C, r25
    a240:	49 cf       	rjmp	.-366    	; 0xa0d4 <irCommTasks+0xf8e>
					resetDebugVariables();
					break;

				}

				if(irCommRxBitReceivedIndexTemp>9) {
    a242:	9a e0       	ldi	r25, 0x0A	; 10
    a244:	a9 e0       	ldi	r26, 0x09	; 9
    a246:	b0 e0       	ldi	r27, 0x00	; 0
    a248:	4d cf       	rjmp	.-358    	; 0xa0e4 <irCommTasks+0xf9e>
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 2) {
					//updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START1_DURATION;					
					irCommTxSwitchCount = IRCOMM_BIT_START1_SWITCH_COUNT;
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 1) {
					irCommTxDuration = IRCOMM_BIT1_DURATOIN;					
    a24a:	8c e3       	ldi	r24, 0x3C	; 60
    a24c:	90 e0       	ldi	r25, 0x00	; 0
    a24e:	90 93 37 05 	sts	0x0537, r25
    a252:	80 93 36 05 	sts	0x0536, r24
					irCommTxSwitchCount = IRCOMM_BIT1_SWITCH_COUNT;
    a256:	84 e0       	ldi	r24, 0x04	; 4
    a258:	80 93 38 05 	sts	0x0538, r24
    a25c:	84 ca       	rjmp	.-2808   	; 0x9766 <irCommTasks+0x620>
					//if(irCommRxStartBitDetected == 1) {	// signal becomes too low to be reliable...or something else happened				
					//	irCommState = IRCOMM_RX_DEBUG;
					//	irCommAdcRxState = 12;
					//	updateGreenLed(0);
					//} else {
						irCommRxStartBitDetected = 0;
    a25e:	10 92 24 05 	sts	0x0524, r1
						currentProx = 0;
    a262:	10 92 34 02 	sts	0x0234, r1
						adcSaveDataTo = SKIP_SAMPLE;
    a266:	85 e0       	ldi	r24, 0x05	; 5
    a268:	80 93 c9 02 	sts	0x02C9, r24
						adcSamplingState = 0;
    a26c:	10 92 ca 02 	sts	0x02CA, r1
						irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    a270:	10 92 dc 04 	sts	0x04DC, r1
						irCommState = IRCOMM_RX_IDLE_STATE;
    a274:	81 e0       	ldi	r24, 0x01	; 1
    a276:	80 93 dd 04 	sts	0x04DD, r24
						resetDebugVariables();
    a27a:	0e 94 fa 47 	call	0x8ff4	; 0x8ff4 <resetDebugVariables>
					//}			
					// start listening from the next sensor the next time I check for a start bit in order to get the same chance 
					// to all sensors, instead of always listening from the sensor that has the best signal
					if(irCommRxMaxSensor < 7) {
    a27e:	20 91 29 05 	lds	r18, 0x0529
    a282:	30 91 2a 05 	lds	r19, 0x052A
    a286:	27 30       	cpi	r18, 0x07	; 7
    a288:	31 05       	cpc	r19, r1
    a28a:	0c f0       	brlt	.+2      	; 0xa28e <irCommTasks+0x1148>
    a28c:	20 c1       	rjmp	.+576    	; 0xa4ce <irCommTasks+0x1388>
						irCommRxMaxSensor++;
    a28e:	2f 5f       	subi	r18, 0xFF	; 255
    a290:	3f 4f       	sbci	r19, 0xFF	; 255
    a292:	30 93 2a 05 	sts	0x052A, r19
    a296:	20 93 29 05 	sts	0x0529, r18
    a29a:	80 91 27 05 	lds	r24, 0x0527
    a29e:	90 91 28 05 	lds	r25, 0x0528
    a2a2:	b9 01       	movw	r22, r18
    a2a4:	66 0f       	add	r22, r22
    a2a6:	77 1f       	adc	r23, r23
    a2a8:	40 91 52 05 	lds	r20, 0x0552
    a2ac:	50 91 53 05 	lds	r21, 0x0553
    a2b0:	46 0f       	add	r20, r22
    a2b2:	57 1f       	adc	r21, r23
    a2b4:	00 91 3e 05 	lds	r16, 0x053E
    a2b8:	10 91 3f 05 	lds	r17, 0x053F
    a2bc:	06 0f       	add	r16, r22
    a2be:	17 1f       	adc	r17, r23
    a2c0:	d5 c9       	rjmp	.-3158   	; 0x966c <irCommTasks+0x526>
				irCommSwitchCountIndexTemp++;
				

				//turnOffGreenLeds();
				if(irCommRxPeakHighToLow==1) {
					if(irCommRxStartBitDetected==1) {
    a2c2:	90 91 24 05 	lds	r25, 0x0524
    a2c6:	91 30       	cpi	r25, 0x01	; 1
    a2c8:	09 f4       	brne	.+2      	; 0xa2cc <irCommTasks+0x1186>
    a2ca:	67 c1       	rjmp	.+718    	; 0xa59a <irCommTasks+0x1454>

							resetDebugVariables();				
							break;
						}
					} else {
						if(irCommSwitchCount==2) {
    a2cc:	82 30       	cpi	r24, 0x02	; 2
    a2ce:	09 f4       	brne	.+2      	; 0xa2d2 <irCommTasks+0x118c>
    a2d0:	89 c1       	rjmp	.+786    	; 0xa5e4 <irCommTasks+0x149e>
								irCommRxBitCount = 0;	
								irCommRxCrc = 0;	
								irCommRxByte = 0;
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
							}
						} else if(irCommSwitchCount==1) {		
    a2d2:	81 30       	cpi	r24, 0x01	; 1
    a2d4:	09 f4       	brne	.+2      	; 0xa2d8 <irCommTasks+0x1192>
    a2d6:	e3 c1       	rjmp	.+966    	; 0xa69e <irCommTasks+0x1558>
								irCommState = IRCOMM_RX_IDLE_STATE;

								irCommSyncStateIndexTemp++;
							}							
						} else {							
							currentProx = 0;
    a2d8:	10 92 34 02 	sts	0x0234, r1
							adcSaveDataTo = SKIP_SAMPLE;
    a2dc:	85 e0       	ldi	r24, 0x05	; 5
    a2de:	80 93 c9 02 	sts	0x02C9, r24
							adcSamplingState = 0;
    a2e2:	10 92 ca 02 	sts	0x02CA, r1
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;							
    a2e6:	10 92 dc 04 	sts	0x04DC, r1
							irCommState = IRCOMM_RX_IDLE_STATE;	
    a2ea:	c0 92 dd 04 	sts	0x04DD, r12

							if(irCommSyncStateIndexTemp>1) {
    a2ee:	80 91 05 05 	lds	r24, 0x0505
    a2f2:	82 30       	cpi	r24, 0x02	; 2
    a2f4:	08 f0       	brcs	.+2      	; 0xa2f8 <irCommTasks+0x11b2>
    a2f6:	81 e0       	ldi	r24, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 11;
    a2f8:	e8 2f       	mov	r30, r24
    a2fa:	f0 e0       	ldi	r31, 0x00	; 0
    a2fc:	ee 58       	subi	r30, 0x8E	; 142
    a2fe:	fa 4f       	sbci	r31, 0xFA	; 250
    a300:	9b e0       	ldi	r25, 0x0B	; 11
    a302:	90 83       	st	Z, r25
							irCommSyncStateIndexTemp++;
    a304:	8f 5f       	subi	r24, 0xFF	; 255
    a306:	80 93 05 05 	sts	0x0505, r24
							//irCommState = IRCOMM_RX_DEBUG;
							//irCommAdcRxState = 12;
							//updateRedLed(0);
							//break;

							resetDebugVariables();				
    a30a:	0e 94 fa 47 	call	0x8ff4	; 0x8ff4 <resetDebugVariables>
							break;
    a30e:	0c 94 bb 48 	jmp	0x9176	; 0x9176 <irCommTasks+0x30>
							irCommSwitchCount++;
						}
					}
				}

				if(irCommSwitchCountIndexTemp>1) {
    a312:	e8 2f       	mov	r30, r24
    a314:	f0 e0       	ldi	r31, 0x00	; 0
    a316:	98 2f       	mov	r25, r24
    a318:	9f 5f       	subi	r25, 0xFF	; 255
    a31a:	19 ce       	rjmp	.-974    	; 0x9f4e <irCommTasks+0xe08>
					//updateBlueLed(0);
				}
				irCommRxMaxDiffTemp[irCommRxMaxDiffIndexTemp] = irCommRxMaxDiff;
				irCommRxMaxDiffIndexTemp++;
				
				if(irCommMaxSensorValueCurrIndexTemp>1) {
    a31c:	e6 2f       	mov	r30, r22
    a31e:	f0 e0       	ldi	r31, 0x00	; 0
    a320:	6f 5f       	subi	r22, 0xFF	; 255
    a322:	cf c9       	rjmp	.-3170   	; 0x96c2 <irCommTasks+0x57c>
					//updateBlueLed(0);
				}
				irCommRxMaxSensorTemp[irCommRxMaxSensorIndexTemp] = irCommRxMaxSensor;
				irCommRxMaxSensorIndexTemp++;
					
				if(irCommRxMaxDiffIndexTemp>1) {
    a324:	e6 2f       	mov	r30, r22
    a326:	f0 e0       	ldi	r31, 0x00	; 0
    a328:	6f 5f       	subi	r22, 0xFF	; 255
    a32a:	b8 c9       	rjmp	.-3216   	; 0x969c <irCommTasks+0x556>
					}
				}
				//turnOffGreenLeds();
				//setGreenLed(irCommRxMaxSensor, 1);			

				if(irCommRxMaxSensorIndexTemp>1) {
    a32c:	e6 2f       	mov	r30, r22
    a32e:	f0 e0       	ldi	r31, 0x00	; 0
    a330:	6f 5f       	subi	r22, 0xFF	; 255
    a332:	a4 c9       	rjmp	.-3256   	; 0x967c <irCommTasks+0x536>
					//updateBlueLed(0);
				}
				irCommMaxSensorValueCurrTemp[irCommMaxSensorValueCurrIndexTemp] = irCommMaxSensorValueCurr[irCommRxMaxSensor];
				irCommMaxSensorValueCurrIndexTemp++;
				
				if(irCommMinSensorValueCurrIndexTemp>1) {
    a334:	e4 2f       	mov	r30, r20
    a336:	f0 e0       	ldi	r31, 0x00	; 0
    a338:	64 2f       	mov	r22, r20
    a33a:	6f 5f       	subi	r22, 0xFF	; 255
    a33c:	d8 c9       	rjmp	.-3152   	; 0x96ee <irCommTasks+0x5a8>
						
				// start counting number of switch around mean signal
				if(irCommMaxSensorSignal[0] > 0) {
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
    a33e:	8f ef       	ldi	r24, 0xFF	; 255
    a340:	80 93 18 05 	sts	0x0518, r24
    a344:	2f ef       	ldi	r18, 0xFF	; 255
    a346:	38 2f       	mov	r19, r24
    a348:	de cd       	rjmp	.-1092   	; 0x9f06 <irCommTasks+0xdc0>
				//if(irCommComputeShift != 0) {	// it should not be never 1 because the difference between min and max in the current signal
					//updateRedLed(0);			// is at least IRCOMM_DETECTION_AMPLITUDE_THR (checked in the previous state)
				//}
				irCommProxMean = (int)(irCommProxSum / IRCOMM_SAMPLING_WINDOW);

				if(irCommProxMeanIndexTemp>1) {
    a34a:	e2 2f       	mov	r30, r18
    a34c:	f0 e0       	ldi	r31, 0x00	; 0
    a34e:	2f 5f       	subi	r18, 0xFF	; 255
    a350:	a3 cd       	rjmp	.-1210   	; 0x9e98 <irCommTasks+0xd52>
					//updateRedLed(0);
				}
				irCommRxPeakHighToLowTemp[irCommRxPeakHighToLowIndexTemp] = irCommRxPeakHighToLow;
				irCommRxPeakHighToLowIndexTemp++;
				
				if(irCommRxStartPeakDurationIndexTemp>1) {
    a352:	e2 2f       	mov	r30, r18
    a354:	f0 e0       	ldi	r31, 0x00	; 0
    a356:	2f 5f       	subi	r18, 0xFF	; 255
    a358:	85 cd       	rjmp	.-1270   	; 0x9e64 <irCommTasks+0xd1e>
					//updateRedLed(0);
				}
				irCommShiftCountTemp[irCommShiftCountIndexTemp] = irCommShiftCount;
				irCommShiftCountIndexTemp++;
				
				if(irCommRxPeakHighToLowIndexTemp>1) {
    a35a:	e2 2f       	mov	r30, r18
    a35c:	f0 e0       	ldi	r31, 0x00	; 0
    a35e:	2f 5f       	subi	r18, 0xFF	; 255
    a360:	71 cd       	rjmp	.-1310   	; 0x9e44 <irCommTasks+0xcfe>
					//updateRedLed(0);
				}
				irCommComputeShiftTemp[irCommComputeShiftIndexTemp] = irCommComputeShift;
				irCommComputeShiftIndexTemp++;
				
				if(irCommShiftCountIndexTemp>1) {
    a362:	e2 2f       	mov	r30, r18
    a364:	f0 e0       	ldi	r31, 0x00	; 0
    a366:	2f 5f       	subi	r18, 0xFF	; 255
    a368:	60 cd       	rjmp	.-1344   	; 0x9e2a <irCommTasks+0xce4>
						}											
					 }

				}

				if(irCommComputeShiftIndexTemp>1) {
    a36a:	e2 2f       	mov	r30, r18
    a36c:	f0 e0       	ldi	r31, 0x00	; 0
    a36e:	2f 5f       	subi	r18, 0xFF	; 255
    a370:	4f cd       	rjmp	.-1378   	; 0x9e10 <irCommTasks+0xcca>
						
				// start counting number of switch around mean signal
				if(irCommMaxSensorSignal[0] > 0) {
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
    a372:	8f ef       	ldi	r24, 0xFF	; 255
    a374:	80 93 18 05 	sts	0x0518, r24
    a378:	2f ef       	ldi	r18, 0xFF	; 255
    a37a:	38 2f       	mov	r19, r24
    a37c:	7e ce       	rjmp	.-772    	; 0xa07a <irCommTasks+0xf34>
							break;
						}
					}
				} else {
					if(irCommRxStartBitDetected==1) {
						if(irCommSwitchCount==2) {
    a37e:	82 30       	cpi	r24, 0x02	; 2
    a380:	09 f4       	brne	.+2      	; 0xa384 <irCommTasks+0x123e>
    a382:	51 c1       	rjmp	.+674    	; 0xa626 <irCommTasks+0x14e0>
							irCommShiftCounter = 0;
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else if(irCommSwitchCount==1) {
    a384:	81 30       	cpi	r24, 0x01	; 1
    a386:	09 f4       	brne	.+2      	; 0xa38a <irCommTasks+0x1244>
    a388:	b1 c1       	rjmp	.+866    	; 0xa6ec <irCommTasks+0x15a6>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_WAITING_BIT;
						} else {
							irCommRxStartBitDetected = 0;
    a38a:	10 92 24 05 	sts	0x0524, r1
							currentProx = 0;
    a38e:	10 92 34 02 	sts	0x0234, r1
							adcSaveDataTo = SKIP_SAMPLE;
    a392:	85 e0       	ldi	r24, 0x05	; 5
    a394:	80 93 c9 02 	sts	0x02C9, r24
							adcSamplingState = 0;
    a398:	10 92 ca 02 	sts	0x02CA, r1
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    a39c:	10 92 dc 04 	sts	0x04DC, r1
							irCommState = IRCOMM_RX_IDLE_STATE;	
    a3a0:	90 93 dd 04 	sts	0x04DD, r25

							if(irCommSyncStateIndexTemp>1) {
    a3a4:	80 91 05 05 	lds	r24, 0x0505
    a3a8:	82 30       	cpi	r24, 0x02	; 2
    a3aa:	08 f0       	brcs	.+2      	; 0xa3ae <irCommTasks+0x1268>
    a3ac:	81 e0       	ldi	r24, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 13;
    a3ae:	e8 2f       	mov	r30, r24
    a3b0:	f0 e0       	ldi	r31, 0x00	; 0
    a3b2:	ee 58       	subi	r30, 0x8E	; 142
    a3b4:	fa 4f       	sbci	r31, 0xFA	; 250
    a3b6:	9d e0       	ldi	r25, 0x0D	; 13
    a3b8:	90 83       	st	Z, r25
							irCommSyncStateIndexTemp++;
    a3ba:	8f 5f       	subi	r24, 0xFF	; 255
    a3bc:	80 93 05 05 	sts	0x0505, r24
							//irCommState = IRCOMM_RX_DEBUG;
							//irCommAdcRxState = 12;
							//updateRedLed(0);
							//break;

							resetDebugVariables();				
    a3c0:	0e 94 fa 47 	call	0x8ff4	; 0x8ff4 <resetDebugVariables>
							break;
    a3c4:	0c 94 bb 48 	jmp	0x9176	; 0x9176 <irCommTasks+0x30>

				//setGreenLed(irCommRxBitCount, 1);

				irCommRxBitCount++;
				if(irCommRxBitCount == 10) {	// received 8 bit of data + 2 bit of crc
					irCommState = IRCOMM_RX_CHECK_CRC;
    a3c8:	87 e0       	ldi	r24, 0x07	; 7
    a3ca:	80 93 dd 04 	sts	0x04DD, r24

					if(irCommStateIndexTemp>13) {
    a3ce:	80 91 04 05 	lds	r24, 0x0504
    a3d2:	8e 30       	cpi	r24, 0x0E	; 14
    a3d4:	08 f0       	brcs	.+2      	; 0xa3d8 <irCommTasks+0x1292>
    a3d6:	a3 c9       	rjmp	.-3258   	; 0x971e <irCommTasks+0x5d8>
    a3d8:	9d ce       	rjmp	.-710    	; 0xa114 <irCommTasks+0xfce>
					}
				} else {
					// cannot get a reliable signal from the sensor from which the start bit was detected the previous time,
					// thus restart listening from the next sensor
					if(irCommRxStartBitDetected == 1) {
						if(irCommRxMaxSensor < 7) {
    a3da:	27 30       	cpi	r18, 0x07	; 7
    a3dc:	31 05       	cpc	r19, r1
    a3de:	0c f0       	brlt	.+2      	; 0xa3e2 <irCommTasks+0x129c>
    a3e0:	d3 c0       	rjmp	.+422    	; 0xa588 <irCommTasks+0x1442>
							irCommRxMaxSensor++;
    a3e2:	2f 5f       	subi	r18, 0xFF	; 255
    a3e4:	3f 4f       	sbci	r19, 0xFF	; 255
    a3e6:	30 93 2a 05 	sts	0x052A, r19
    a3ea:	20 93 29 05 	sts	0x0529, r18
    a3ee:	9b ce       	rjmp	.-714    	; 0xa126 <irCommTasks+0xfe0>
					if(irCommRxStartBitDetected==0) {
						// start listening from the next sensor
						if(irCommRxMaxSensor < 7) {
							irCommRxMaxSensor++;
						} else {
							irCommRxMaxSensor = 0;
    a3f0:	10 92 2a 05 	sts	0x052A, r1
    a3f4:	10 92 29 05 	sts	0x0529, r1
    a3f8:	20 e0       	ldi	r18, 0x00	; 0
    a3fa:	30 e0       	ldi	r19, 0x00	; 0
    a3fc:	24 c8       	rjmp	.-4024   	; 0x9446 <irCommTasks+0x300>
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
								irCommRxMaxSensor++;
    a3fe:	2f 5f       	subi	r18, 0xFF	; 255
    a400:	3f 4f       	sbci	r19, 0xFF	; 255
    a402:	30 93 2a 05 	sts	0x052A, r19
    a406:	20 93 29 05 	sts	0x0529, r18
    a40a:	3e c8       	rjmp	.-3972   	; 0x9488 <irCommTasks+0x342>
    a40c:	2f 5f       	subi	r18, 0xFF	; 255
    a40e:	3f 4f       	sbci	r19, 0xFF	; 255
    a410:	30 93 2a 05 	sts	0x052A, r19
    a414:	20 93 29 05 	sts	0x0529, r18
    a418:	79 c8       	rjmp	.-3854   	; 0x950c <irCommTasks+0x3c6>
    a41a:	2f 5f       	subi	r18, 0xFF	; 255
    a41c:	3f 4f       	sbci	r19, 0xFF	; 255
    a41e:	30 93 2a 05 	sts	0x052A, r19
    a422:	20 93 29 05 	sts	0x0529, r18
    a426:	51 c8       	rjmp	.-3934   	; 0x94ca <irCommTasks+0x384>
							resetDebugVariables();				
							break;
						}
					} else {
						if(irCommSwitchCount==2) {
							if(irCommSyncStateIndexTemp>1) {
    a428:	20 91 05 05 	lds	r18, 0x0505
    a42c:	22 30       	cpi	r18, 0x02	; 2
    a42e:	08 f4       	brcc	.+2      	; 0xa432 <irCommTasks+0x12ec>
    a430:	32 c1       	rjmp	.+612    	; 0xa696 <irCommTasks+0x1550>
    a432:	22 e0       	ldi	r18, 0x02	; 2
    a434:	81 e0       	ldi	r24, 0x01	; 1
    a436:	90 e0       	ldi	r25, 0x00	; 0
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 1;
    a438:	8e 58       	subi	r24, 0x8E	; 142
    a43a:	9a 4f       	sbci	r25, 0xFA	; 250
    a43c:	31 e0       	ldi	r19, 0x01	; 1
    a43e:	dc 01       	movw	r26, r24
    a440:	3c 93       	st	X, r19
							irCommSyncStateIndexTemp++;
    a442:	20 93 05 05 	sts	0x0505, r18

							irCommShiftCount = IRCOMM_SAMPLING_WINDOW/2 + irCommShiftCount;
    a446:	8f 2d       	mov	r24, r15
    a448:	86 5f       	subi	r24, 0xF6	; 246
    a44a:	80 93 14 05 	sts	0x0514, r24
							irCommRxPeakHighToLow = 0;
    a44e:	10 92 25 05 	sts	0x0525, r1
							irCommRxStartBitDetected = 0;
    a452:	10 92 24 05 	sts	0x0524, r1
							irCommSecondBitSkipped = 0;
    a456:	10 92 1d 05 	sts	0x051D, r1
							irCommShiftCounter = 0;
    a45a:	10 92 1e 05 	sts	0x051E, r1
							irCommRxBitCount = 0;	
    a45e:	10 92 1a 05 	sts	0x051A, r1
							irCommRxCrc = 0;	
    a462:	10 92 0b 05 	sts	0x050B, r1
							irCommRxByte = 0;
    a466:	10 92 1c 05 	sts	0x051C, r1
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
    a46a:	94 e0       	ldi	r25, 0x04	; 4
    a46c:	90 93 dd 04 	sts	0x04DD, r25
    a470:	90 e0       	ldi	r25, 0x00	; 0
							break;				
						}
					}
				}
	
				if(irCommStateIndexTemp>13) {
    a472:	20 91 04 05 	lds	r18, 0x0504
    a476:	2e 30       	cpi	r18, 0x0E	; 14
    a478:	30 f5       	brcc	.+76     	; 0xa4c6 <irCommTasks+0x1380>
    a47a:	e2 2f       	mov	r30, r18
    a47c:	f0 e0       	ldi	r31, 0x00	; 0
    a47e:	2f 5f       	subi	r18, 0xFF	; 255
					irCommStateIndexTemp = 13;
					//updateRedLed(0);
				}
				irCommStateTemp[irCommStateIndexTemp] = irCommState;
    a480:	30 91 dd 04 	lds	r19, 0x04DD
    a484:	ec 5b       	subi	r30, 0xBC	; 188
    a486:	fa 4f       	sbci	r31, 0xFA	; 250
    a488:	30 83       	st	Z, r19
				irCommStateIndexTemp++;
    a48a:	20 93 04 05 	sts	0x0504, r18
				
				if(irCommShiftCountFinalIndexTemp>1) {
    a48e:	20 91 fe 04 	lds	r18, 0x04FE
    a492:	22 30       	cpi	r18, 0x02	; 2
    a494:	08 f4       	brcc	.+2      	; 0xa498 <irCommTasks+0x1352>
    a496:	53 c0       	rjmp	.+166    	; 0xa53e <irCommTasks+0x13f8>
    a498:	22 e0       	ldi	r18, 0x02	; 2
    a49a:	e1 e0       	ldi	r30, 0x01	; 1
    a49c:	f0 e0       	ldi	r31, 0x00	; 0
					irCommShiftCountFinalIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommShiftCountFinalTemp[irCommShiftCountFinalIndexTemp] = irCommShiftCount;
    a49e:	e3 5c       	subi	r30, 0xC3	; 195
    a4a0:	f4 4f       	sbci	r31, 0xF4	; 244
    a4a2:	80 83       	st	Z, r24
				irCommShiftCountFinalIndexTemp++;
    a4a4:	20 93 fe 04 	sts	0x04FE, r18
				
				if(irCommRxStartBitDetectedIndexTemp>1) {
    a4a8:	80 91 03 05 	lds	r24, 0x0503
    a4ac:	82 30       	cpi	r24, 0x02	; 2
    a4ae:	08 f4       	brcc	.+2      	; 0xa4b2 <irCommTasks+0x136c>
    a4b0:	70 c0       	rjmp	.+224    	; 0xa592 <irCommTasks+0x144c>
    a4b2:	82 e0       	ldi	r24, 0x02	; 2
    a4b4:	e1 e0       	ldi	r30, 0x01	; 1
    a4b6:	f0 e0       	ldi	r31, 0x00	; 0
					irCommRxStartBitDetectedIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommRxStartBitDetectedTemp[irCommRxStartBitDetectedIndexTemp] = irCommRxStartBitDetected;
    a4b8:	e3 58       	subi	r30, 0x83	; 131
    a4ba:	fa 4f       	sbci	r31, 0xFA	; 250
    a4bc:	90 83       	st	Z, r25
				irCommRxStartBitDetectedIndexTemp++;			
    a4be:	80 93 03 05 	sts	0x0503, r24
					usart0Transmit(irCommState,1);					
				}
				updateBlueLed(255);
				*/

				break;
    a4c2:	0c 94 bb 48 	jmp	0x9176	; 0x9176 <irCommTasks+0x30>
							break;				
						}
					}
				}
	
				if(irCommStateIndexTemp>13) {
    a4c6:	2e e0       	ldi	r18, 0x0E	; 14
    a4c8:	ed e0       	ldi	r30, 0x0D	; 13
    a4ca:	f0 e0       	ldi	r31, 0x00	; 0
    a4cc:	d9 cf       	rjmp	.-78     	; 0xa480 <irCommTasks+0x133a>
					// start listening from the next sensor the next time I check for a start bit in order to get the same chance 
					// to all sensors, instead of always listening from the sensor that has the best signal
					if(irCommRxMaxSensor < 7) {
						irCommRxMaxSensor++;
					} else {
						irCommRxMaxSensor = 0;
    a4ce:	10 92 2a 05 	sts	0x052A, r1
    a4d2:	10 92 29 05 	sts	0x0529, r1
    a4d6:	80 91 27 05 	lds	r24, 0x0527
    a4da:	90 91 28 05 	lds	r25, 0x0528
    a4de:	40 91 52 05 	lds	r20, 0x0552
    a4e2:	50 91 53 05 	lds	r21, 0x0553
    a4e6:	00 91 3e 05 	lds	r16, 0x053E
    a4ea:	10 91 3f 05 	lds	r17, 0x053F
    a4ee:	20 e0       	ldi	r18, 0x00	; 0
    a4f0:	30 e0       	ldi	r19, 0x00	; 0
    a4f2:	bc c8       	rjmp	.-3720   	; 0x966c <irCommTasks+0x526>
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
								irCommRxMaxSensor++;
    a4f4:	2f 5f       	subi	r18, 0xFF	; 255
    a4f6:	3f 4f       	sbci	r19, 0xFF	; 255
    a4f8:	30 93 2a 05 	sts	0x052A, r19
    a4fc:	20 93 29 05 	sts	0x0529, r18
    a500:	26 c8       	rjmp	.-4020   	; 0x954e <irCommTasks+0x408>
    a502:	2f 5f       	subi	r18, 0xFF	; 255
    a504:	3f 4f       	sbci	r19, 0xFF	; 255
    a506:	30 93 2a 05 	sts	0x052A, r19
    a50a:	20 93 29 05 	sts	0x0529, r18
    a50e:	40 c8       	rjmp	.-3968   	; 0x9590 <irCommTasks+0x44a>
    a510:	2f 5f       	subi	r18, 0xFF	; 255
    a512:	3f 4f       	sbci	r19, 0xFF	; 255
    a514:	30 93 2a 05 	sts	0x052A, r19
    a518:	20 93 29 05 	sts	0x0529, r18
    a51c:	5a c8       	rjmp	.-3916   	; 0x95d2 <irCommTasks+0x48c>
    a51e:	2f 5f       	subi	r18, 0xFF	; 255
    a520:	3f 4f       	sbci	r19, 0xFF	; 255
    a522:	30 93 2a 05 	sts	0x052A, r19
    a526:	20 93 29 05 	sts	0x0529, r18
    a52a:	74 c8       	rjmp	.-3864   	; 0x9614 <irCommTasks+0x4ce>
							} else {
								irCommRxMaxSensor = 0;
    a52c:	10 92 2a 05 	sts	0x052A, r1
    a530:	10 92 29 05 	sts	0x0529, r1
    a534:	20 91 29 05 	lds	r18, 0x0529
    a538:	30 91 2a 05 	lds	r19, 0x052A
    a53c:	8a c8       	rjmp	.-3820   	; 0x9652 <irCommTasks+0x50c>
					//updateRedLed(0);
				}
				irCommStateTemp[irCommStateIndexTemp] = irCommState;
				irCommStateIndexTemp++;
				
				if(irCommShiftCountFinalIndexTemp>1) {
    a53e:	e2 2f       	mov	r30, r18
    a540:	f0 e0       	ldi	r31, 0x00	; 0
    a542:	2f 5f       	subi	r18, 0xFF	; 255
    a544:	ac cf       	rjmp	.-168    	; 0xa49e <irCommTasks+0x1358>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else if(irCommSwitchCount==1) {
							if(irCommRxStartPeakDuration > IRCOMM_SAMPLING_WINDOW/2) {
    a546:	bd 2d       	mov	r27, r13
    a548:	bb 30       	cpi	r27, 0x0B	; 11
    a54a:	08 f4       	brcc	.+2      	; 0xa54e <irCommTasks+0x1408>
    a54c:	7b c0       	rjmp	.+246    	; 0xa644 <irCommTasks+0x14fe>
								currentProx = 0;
    a54e:	10 92 34 02 	sts	0x0234, r1
								adcSaveDataTo = SKIP_SAMPLE;
    a552:	95 e0       	ldi	r25, 0x05	; 5
    a554:	90 93 c9 02 	sts	0x02C9, r25
								adcSamplingState = 0;
    a558:	10 92 ca 02 	sts	0x02CA, r1
								irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;								
    a55c:	10 92 dc 04 	sts	0x04DC, r1
								irCommState = IRCOMM_RX_IDLE_STATE;
    a560:	80 93 dd 04 	sts	0x04DD, r24

								if(irCommSyncStateIndexTemp>1) {
    a564:	80 91 05 05 	lds	r24, 0x0505
    a568:	82 30       	cpi	r24, 0x02	; 2
    a56a:	08 f0       	brcs	.+2      	; 0xa56e <irCommTasks+0x1428>
    a56c:	81 e0       	ldi	r24, 0x01	; 1
									irCommSyncStateIndexTemp = 1;
									//updateRedLed(0);
								}
								irCommSyncStateTemp[irCommSyncStateIndexTemp] = 14;
    a56e:	e8 2f       	mov	r30, r24
    a570:	f0 e0       	ldi	r31, 0x00	; 0
    a572:	ee 58       	subi	r30, 0x8E	; 142
    a574:	fa 4f       	sbci	r31, 0xFA	; 250
    a576:	9e e0       	ldi	r25, 0x0E	; 14
    a578:	90 83       	st	Z, r25
								irCommSyncStateIndexTemp++;
    a57a:	8f 5f       	subi	r24, 0xFF	; 255
    a57c:	80 93 05 05 	sts	0x0505, r24
								//irCommState = IRCOMM_RX_DEBUG;
								//irCommAdcRxState = 12;
								//updateRedLed(0);
								//break;

								resetDebugVariables();				
    a580:	0e 94 fa 47 	call	0x8ff4	; 0x8ff4 <resetDebugVariables>
								break;
    a584:	0c 94 bb 48 	jmp	0x9176	; 0x9176 <irCommTasks+0x30>
					// thus restart listening from the next sensor
					if(irCommRxStartBitDetected == 1) {
						if(irCommRxMaxSensor < 7) {
							irCommRxMaxSensor++;
						} else {
							irCommRxMaxSensor = 0;
    a588:	10 92 2a 05 	sts	0x052A, r1
    a58c:	10 92 29 05 	sts	0x0529, r1
    a590:	ca cd       	rjmp	.-1132   	; 0xa126 <irCommTasks+0xfe0>
					//updateRedLed(0);
				}
				irCommShiftCountFinalTemp[irCommShiftCountFinalIndexTemp] = irCommShiftCount;
				irCommShiftCountFinalIndexTemp++;
				
				if(irCommRxStartBitDetectedIndexTemp>1) {
    a592:	e8 2f       	mov	r30, r24
    a594:	f0 e0       	ldi	r31, 0x00	; 0
    a596:	8f 5f       	subi	r24, 0xFF	; 255
    a598:	8f cf       	rjmp	.-226    	; 0xa4b8 <irCommTasks+0x1372>
				

				//turnOffGreenLeds();
				if(irCommRxPeakHighToLow==1) {
					if(irCommRxStartBitDetected==1) {
						if(irCommSwitchCount==2) {
    a59a:	82 30       	cpi	r24, 0x02	; 2
    a59c:	09 f4       	brne	.+2      	; 0xa5a0 <irCommTasks+0x145a>
    a59e:	10 c1       	rjmp	.+544    	; 0xa7c0 <irCommTasks+0x167a>
							irCommShiftCounter = 0;
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_WAITING_BIT;
						} else if(irCommSwitchCount==1) {
    a5a0:	81 30       	cpi	r24, 0x01	; 1
    a5a2:	09 f4       	brne	.+2      	; 0xa5a6 <irCommTasks+0x1460>
    a5a4:	eb c0       	rjmp	.+470    	; 0xa77c <irCommTasks+0x1636>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else {
							irCommRxStartBitDetected = 0;
    a5a6:	10 92 24 05 	sts	0x0524, r1
							currentProx = 0;
    a5aa:	10 92 34 02 	sts	0x0234, r1
							adcSaveDataTo = SKIP_SAMPLE;
    a5ae:	85 e0       	ldi	r24, 0x05	; 5
    a5b0:	80 93 c9 02 	sts	0x02C9, r24
							adcSamplingState = 0;
    a5b4:	10 92 ca 02 	sts	0x02CA, r1
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    a5b8:	10 92 dc 04 	sts	0x04DC, r1
							irCommState = IRCOMM_RX_IDLE_STATE;	
    a5bc:	c0 92 dd 04 	sts	0x04DD, r12

							if(irCommSyncStateIndexTemp>1) {
    a5c0:	80 91 05 05 	lds	r24, 0x0505
    a5c4:	82 30       	cpi	r24, 0x02	; 2
    a5c6:	08 f0       	brcs	.+2      	; 0xa5ca <irCommTasks+0x1484>
    a5c8:	81 e0       	ldi	r24, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 12;
    a5ca:	e8 2f       	mov	r30, r24
    a5cc:	f0 e0       	ldi	r31, 0x00	; 0
    a5ce:	ee 58       	subi	r30, 0x8E	; 142
    a5d0:	fa 4f       	sbci	r31, 0xFA	; 250
    a5d2:	9c e0       	ldi	r25, 0x0C	; 12
    a5d4:	90 83       	st	Z, r25
							irCommSyncStateIndexTemp++;
    a5d6:	8f 5f       	subi	r24, 0xFF	; 255
    a5d8:	80 93 05 05 	sts	0x0505, r24
							//irCommState = IRCOMM_RX_DEBUG;
							//irCommAdcRxState = 12;
							//updateRedLed(0);
							//break;

							resetDebugVariables();				
    a5dc:	0e 94 fa 47 	call	0x8ff4	; 0x8ff4 <resetDebugVariables>
							break;
    a5e0:	0c 94 bb 48 	jmp	0x9176	; 0x9176 <irCommTasks+0x30>
						}
					} else {
						if(irCommSwitchCount==2) {
							if(irCommRxStartPeakDuration<=3) {	// peak due to sensors sampling detected
    a5e4:	2d 2d       	mov	r18, r13
    a5e6:	24 30       	cpi	r18, 0x04	; 4
    a5e8:	08 f0       	brcs	.+2      	; 0xa5ec <irCommTasks+0x14a6>
    a5ea:	a4 c0       	rjmp	.+328    	; 0xa734 <irCommTasks+0x15ee>
								currentProx = 0;
    a5ec:	10 92 34 02 	sts	0x0234, r1
								adcSaveDataTo = SKIP_SAMPLE;
    a5f0:	85 e0       	ldi	r24, 0x05	; 5
    a5f2:	80 93 c9 02 	sts	0x02C9, r24
								adcSamplingState = 0;
    a5f6:	10 92 ca 02 	sts	0x02CA, r1
								irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;							
    a5fa:	10 92 dc 04 	sts	0x04DC, r1
								irCommState = IRCOMM_RX_IDLE_STATE;
    a5fe:	c0 92 dd 04 	sts	0x04DD, r12

								if(irCommSyncStateIndexTemp>1) {
    a602:	80 91 05 05 	lds	r24, 0x0505
    a606:	82 30       	cpi	r24, 0x02	; 2
    a608:	08 f0       	brcs	.+2      	; 0xa60c <irCommTasks+0x14c6>
    a60a:	81 e0       	ldi	r24, 0x01	; 1
									irCommSyncStateIndexTemp = 1;
									//updateRedLed(0);
								}
								irCommSyncStateTemp[irCommSyncStateIndexTemp] = 16;
    a60c:	e8 2f       	mov	r30, r24
    a60e:	f0 e0       	ldi	r31, 0x00	; 0
    a610:	ee 58       	subi	r30, 0x8E	; 142
    a612:	fa 4f       	sbci	r31, 0xFA	; 250
    a614:	90 e1       	ldi	r25, 0x10	; 16
    a616:	90 83       	st	Z, r25
								irCommSyncStateIndexTemp++;
    a618:	8f 5f       	subi	r24, 0xFF	; 255
    a61a:	80 93 05 05 	sts	0x0505, r24
								//irCommState = IRCOMM_RX_DEBUG;
								//irCommAdcRxState = 12;
								//updateGreenLed(0);
								//break;

								resetDebugVariables();
    a61e:	0e 94 fa 47 	call	0x8ff4	; 0x8ff4 <resetDebugVariables>
								break;
    a622:	0c 94 bb 48 	jmp	0x9176	; 0x9176 <irCommTasks+0x30>
						}
					}
				} else {
					if(irCommRxStartBitDetected==1) {
						if(irCommSwitchCount==2) {
							if(irCommSyncStateIndexTemp>1) {
    a626:	80 91 05 05 	lds	r24, 0x0505
    a62a:	82 30       	cpi	r24, 0x02	; 2
    a62c:	08 f0       	brcs	.+2      	; 0xa630 <irCommTasks+0x14ea>
    a62e:	81 e0       	ldi	r24, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 5;
    a630:	e8 2f       	mov	r30, r24
    a632:	f0 e0       	ldi	r31, 0x00	; 0
    a634:	ee 58       	subi	r30, 0x8E	; 142
    a636:	fa 4f       	sbci	r31, 0xFA	; 250
    a638:	95 e0       	ldi	r25, 0x05	; 5
    a63a:	90 83       	st	Z, r25
							irCommSyncStateIndexTemp++;
    a63c:	8f 5f       	subi	r24, 0xFF	; 255
    a63e:	80 93 05 05 	sts	0x0505, r24
    a642:	01 cf       	rjmp	.-510    	; 0xa446 <irCommTasks+0x1300>
								//break;

								resetDebugVariables();				
								break;
							} else {
								if(irCommSyncStateIndexTemp>1) {
    a644:	80 91 05 05 	lds	r24, 0x0505
    a648:	82 30       	cpi	r24, 0x02	; 2
    a64a:	08 f0       	brcs	.+2      	; 0xa64e <irCommTasks+0x1508>
    a64c:	81 e0       	ldi	r24, 0x01	; 1
									irCommSyncStateIndexTemp = 1;
									//updateRedLed(0);
								}
								irCommSyncStateTemp[irCommSyncStateIndexTemp] = 7;
    a64e:	e8 2f       	mov	r30, r24
    a650:	f0 e0       	ldi	r31, 0x00	; 0
    a652:	ee 58       	subi	r30, 0x8E	; 142
    a654:	fa 4f       	sbci	r31, 0xFA	; 250
    a656:	97 e0       	ldi	r25, 0x07	; 7
    a658:	90 83       	st	Z, r25
								irCommSyncStateIndexTemp++;
    a65a:	8f 5f       	subi	r24, 0xFF	; 255
    a65c:	80 93 05 05 	sts	0x0505, r24

								irCommShiftCount = IRCOMM_SAMPLING_WINDOW;
    a660:	84 e1       	ldi	r24, 0x14	; 20
    a662:	80 93 14 05 	sts	0x0514, r24
								irCommRxPeakHighToLow = 0;
    a666:	10 92 25 05 	sts	0x0525, r1
								irCommRxStartBitDetected = 0;
    a66a:	10 92 24 05 	sts	0x0524, r1
								irCommSecondBitSkipped = 0;
    a66e:	10 92 1d 05 	sts	0x051D, r1
								irCommShiftCounter = 0;
    a672:	10 92 1e 05 	sts	0x051E, r1
								irCommRxBitCount = 0;	
    a676:	10 92 1a 05 	sts	0x051A, r1
								irCommRxCrc = 0;	
    a67a:	10 92 0b 05 	sts	0x050B, r1
								irCommRxByte = 0;
    a67e:	10 92 1c 05 	sts	0x051C, r1
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
    a682:	84 e0       	ldi	r24, 0x04	; 4
    a684:	80 93 dd 04 	sts	0x04DD, r24
    a688:	90 e0       	ldi	r25, 0x00	; 0
    a68a:	84 e1       	ldi	r24, 0x14	; 20
    a68c:	f2 ce       	rjmp	.-540    	; 0xa472 <irCommTasks+0x132c>
							adcSaveDataTo = SKIP_SAMPLE;
							adcSamplingState = 0;
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;							
							irCommState = IRCOMM_RX_IDLE_STATE;

							if(irCommSyncStateIndexTemp>1) {
    a68e:	82 2f       	mov	r24, r18
    a690:	90 e0       	ldi	r25, 0x00	; 0
    a692:	2f 5f       	subi	r18, 0xFF	; 255
    a694:	86 cc       	rjmp	.-1780   	; 0x9fa2 <irCommTasks+0xe5c>
							resetDebugVariables();				
							break;
						}
					} else {
						if(irCommSwitchCount==2) {
							if(irCommSyncStateIndexTemp>1) {
    a696:	82 2f       	mov	r24, r18
    a698:	90 e0       	ldi	r25, 0x00	; 0
    a69a:	2f 5f       	subi	r18, 0xFF	; 255
    a69c:	cd ce       	rjmp	.-614    	; 0xa438 <irCommTasks+0x12f2>
								irCommRxCrc = 0;	
								irCommRxByte = 0;
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
							}
						} else if(irCommSwitchCount==1) {		
							irCommRxStartBitDetected = 1;					
    a69e:	c0 92 24 05 	sts	0x0524, r12
							if(irCommRxStartPeakDuration > IRCOMM_SAMPLING_WINDOW/2) {
    a6a2:	8d 2d       	mov	r24, r13
    a6a4:	8b 30       	cpi	r24, 0x0B	; 11
    a6a6:	08 f4       	brcc	.+2      	; 0xa6aa <irCommTasks+0x1564>
    a6a8:	56 c0       	rjmp	.+172    	; 0xa756 <irCommTasks+0x1610>
								if(irCommSyncStateIndexTemp>1) {
    a6aa:	80 91 05 05 	lds	r24, 0x0505
    a6ae:	82 30       	cpi	r24, 0x02	; 2
    a6b0:	08 f0       	brcs	.+2      	; 0xa6b4 <irCommTasks+0x156e>
    a6b2:	81 e0       	ldi	r24, 0x01	; 1
									irCommSyncStateIndexTemp = 1;
									//updateRedLed(0);
								}
								irCommSyncStateTemp[irCommSyncStateIndexTemp] = 4;
    a6b4:	e8 2f       	mov	r30, r24
    a6b6:	f0 e0       	ldi	r31, 0x00	; 0
    a6b8:	ee 58       	subi	r30, 0x8E	; 142
    a6ba:	fa 4f       	sbci	r31, 0xFA	; 250
    a6bc:	94 e0       	ldi	r25, 0x04	; 4
    a6be:	90 83       	st	Z, r25
								irCommSyncStateIndexTemp++;
    a6c0:	8f 5f       	subi	r24, 0xFF	; 255
    a6c2:	80 93 05 05 	sts	0x0505, r24

								//irCommShiftCount = irCommShiftCount;
								irCommRxPeakHighToLow = 0;
    a6c6:	10 92 25 05 	sts	0x0525, r1
								irCommRxStartBitDetected = 0;
    a6ca:	10 92 24 05 	sts	0x0524, r1
								irCommSecondBitSkipped = 0;
    a6ce:	10 92 1d 05 	sts	0x051D, r1
								irCommShiftCounter = 0;
    a6d2:	10 92 1e 05 	sts	0x051E, r1
								irCommRxBitCount = 0;	
    a6d6:	10 92 1a 05 	sts	0x051A, r1
								irCommRxCrc = 0;	
    a6da:	10 92 0b 05 	sts	0x050B, r1
								irCommRxByte = 0;
    a6de:	10 92 1c 05 	sts	0x051C, r1
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
    a6e2:	90 93 dd 04 	sts	0x04DD, r25
    a6e6:	8f 2d       	mov	r24, r15
    a6e8:	90 e0       	ldi	r25, 0x00	; 0
    a6ea:	c3 ce       	rjmp	.-634    	; 0xa472 <irCommTasks+0x132c>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else if(irCommSwitchCount==1) {
							if(irCommSyncStateIndexTemp>1) {
    a6ec:	80 91 05 05 	lds	r24, 0x0505
    a6f0:	82 30       	cpi	r24, 0x02	; 2
    a6f2:	08 f0       	brcs	.+2      	; 0xa6f6 <irCommTasks+0x15b0>
    a6f4:	81 e0       	ldi	r24, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 8;
    a6f6:	e8 2f       	mov	r30, r24
    a6f8:	f0 e0       	ldi	r31, 0x00	; 0
    a6fa:	ee 58       	subi	r30, 0x8E	; 142
    a6fc:	fa 4f       	sbci	r31, 0xFA	; 250
    a6fe:	98 e0       	ldi	r25, 0x08	; 8
    a700:	90 83       	st	Z, r25
							irCommSyncStateIndexTemp++;
    a702:	8f 5f       	subi	r24, 0xFF	; 255
    a704:	80 93 05 05 	sts	0x0505, r24

							irCommShiftCount = 0;
    a708:	10 92 14 05 	sts	0x0514, r1
							irCommRxPeakHighToLow = 0;
    a70c:	10 92 25 05 	sts	0x0525, r1
							irCommRxStartBitDetected = 0;
    a710:	10 92 24 05 	sts	0x0524, r1
							irCommSecondBitSkipped = 0;
    a714:	10 92 1d 05 	sts	0x051D, r1
							irCommShiftCounter = 0;
    a718:	10 92 1e 05 	sts	0x051E, r1
							irCommRxBitCount = 0;	
    a71c:	10 92 1a 05 	sts	0x051A, r1
							irCommRxCrc = 0;	
    a720:	10 92 0b 05 	sts	0x050B, r1
							irCommRxByte = 0;
    a724:	10 92 1c 05 	sts	0x051C, r1
							irCommState = IRCOMM_RX_WAITING_BIT;
    a728:	85 e0       	ldi	r24, 0x05	; 5
    a72a:	80 93 dd 04 	sts	0x04DD, r24
    a72e:	90 e0       	ldi	r25, 0x00	; 0
    a730:	80 e0       	ldi	r24, 0x00	; 0
    a732:	9f ce       	rjmp	.-706    	; 0xa472 <irCommTasks+0x132c>
								//break;

								resetDebugVariables();
								break;
							} else {
								if(irCommSyncStateIndexTemp>1) {
    a734:	80 91 05 05 	lds	r24, 0x0505
    a738:	82 30       	cpi	r24, 0x02	; 2
    a73a:	08 f0       	brcs	.+2      	; 0xa73e <irCommTasks+0x15f8>
    a73c:	81 e0       	ldi	r24, 0x01	; 1
									irCommSyncStateIndexTemp = 1;
									//updateRedLed(0);
								}
								irCommSyncStateTemp[irCommSyncStateIndexTemp] = 3;
    a73e:	e8 2f       	mov	r30, r24
    a740:	f0 e0       	ldi	r31, 0x00	; 0
    a742:	ee 58       	subi	r30, 0x8E	; 142
    a744:	fa 4f       	sbci	r31, 0xFA	; 250
    a746:	93 e0       	ldi	r25, 0x03	; 3
    a748:	90 83       	st	Z, r25
								irCommSyncStateIndexTemp++;
    a74a:	8f 5f       	subi	r24, 0xFF	; 255
    a74c:	80 93 05 05 	sts	0x0505, r24

								irCommShiftCount = IRCOMM_SAMPLING_WINDOW + irCommShiftCount;
    a750:	8f 2d       	mov	r24, r15
    a752:	8c 5e       	subi	r24, 0xEC	; 236
    a754:	7a ce       	rjmp	.-780    	; 0xa44a <irCommTasks+0x1304>
								irCommRxBitCount = 0;	
								irCommRxCrc = 0;	
								irCommRxByte = 0;
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
							} else {
								currentProx = 0;
    a756:	10 92 34 02 	sts	0x0234, r1
								adcSaveDataTo = SKIP_SAMPLE;
    a75a:	85 e0       	ldi	r24, 0x05	; 5
    a75c:	80 93 c9 02 	sts	0x02C9, r24
								adcSamplingState = 0;
    a760:	10 92 ca 02 	sts	0x02CA, r1
								irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;								
    a764:	10 92 dc 04 	sts	0x04DC, r1
								irCommState = IRCOMM_RX_IDLE_STATE;
    a768:	c0 92 dd 04 	sts	0x04DD, r12

								irCommSyncStateIndexTemp++;
    a76c:	80 91 05 05 	lds	r24, 0x0505
    a770:	8f 5f       	subi	r24, 0xFF	; 255
    a772:	80 93 05 05 	sts	0x0505, r24
    a776:	8f 2d       	mov	r24, r15
    a778:	91 e0       	ldi	r25, 0x01	; 1
    a77a:	7b ce       	rjmp	.-778    	; 0xa472 <irCommTasks+0x132c>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_WAITING_BIT;
						} else if(irCommSwitchCount==1) {
							if(irCommSyncStateIndexTemp>1) {
    a77c:	80 91 05 05 	lds	r24, 0x0505
    a780:	82 30       	cpi	r24, 0x02	; 2
    a782:	08 f0       	brcs	.+2      	; 0xa786 <irCommTasks+0x1640>
    a784:	81 e0       	ldi	r24, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 2;
    a786:	e8 2f       	mov	r30, r24
    a788:	f0 e0       	ldi	r31, 0x00	; 0
    a78a:	ee 58       	subi	r30, 0x8E	; 142
    a78c:	fa 4f       	sbci	r31, 0xFA	; 250
    a78e:	92 e0       	ldi	r25, 0x02	; 2
    a790:	90 83       	st	Z, r25
							irCommSyncStateIndexTemp++;
    a792:	8f 5f       	subi	r24, 0xFF	; 255
    a794:	80 93 05 05 	sts	0x0505, r24

							//irCommShiftCount = irCommShiftCount;
							irCommRxPeakHighToLow = 0;
    a798:	10 92 25 05 	sts	0x0525, r1
							irCommRxStartBitDetected = 0;
    a79c:	10 92 24 05 	sts	0x0524, r1
							irCommSecondBitSkipped = 0;
    a7a0:	10 92 1d 05 	sts	0x051D, r1
							irCommShiftCounter = 0;
    a7a4:	10 92 1e 05 	sts	0x051E, r1
							irCommRxBitCount = 0;	
    a7a8:	10 92 1a 05 	sts	0x051A, r1
							irCommRxCrc = 0;	
    a7ac:	10 92 0b 05 	sts	0x050B, r1
							irCommRxByte = 0;
    a7b0:	10 92 1c 05 	sts	0x051C, r1
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
    a7b4:	84 e0       	ldi	r24, 0x04	; 4
    a7b6:	80 93 dd 04 	sts	0x04DD, r24
    a7ba:	8f 2d       	mov	r24, r15
    a7bc:	90 e0       	ldi	r25, 0x00	; 0
    a7be:	59 ce       	rjmp	.-846    	; 0xa472 <irCommTasks+0x132c>

				//turnOffGreenLeds();
				if(irCommRxPeakHighToLow==1) {
					if(irCommRxStartBitDetected==1) {
						if(irCommSwitchCount==2) {
							if(irCommSyncStateIndexTemp>1) {
    a7c0:	80 91 05 05 	lds	r24, 0x0505
    a7c4:	82 30       	cpi	r24, 0x02	; 2
    a7c6:	08 f0       	brcs	.+2      	; 0xa7ca <irCommTasks+0x1684>
    a7c8:	81 e0       	ldi	r24, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 6;
    a7ca:	e8 2f       	mov	r30, r24
    a7cc:	f0 e0       	ldi	r31, 0x00	; 0
    a7ce:	ee 58       	subi	r30, 0x8E	; 142
    a7d0:	fa 4f       	sbci	r31, 0xFA	; 250
    a7d2:	96 e0       	ldi	r25, 0x06	; 6
    a7d4:	95 cf       	rjmp	.-214    	; 0xa700 <irCommTasks+0x15ba>

0000a7d6 <irCommSendData>:
//	irCommTxSensorMask = sensorMask;
//	irCommEnabledNext = IRCOMM_MODE_TRANSMIT;
//}

void irCommSendData(unsigned char value) {
	irCommTxByte = value;
    a7d6:	80 93 2d 05 	sts	0x052D, r24
	irCommTxByteEnqueued = 1;
    a7da:	81 e0       	ldi	r24, 0x01	; 1
    a7dc:	80 93 2e 05 	sts	0x052E, r24
	irCommEnabledNext = IRCOMM_MODE_TRANSMIT;
    a7e0:	82 e0       	ldi	r24, 0x02	; 2
    a7e2:	80 93 db 04 	sts	0x04DB, r24
}
    a7e6:	08 95       	ret

0000a7e8 <irCommDataSent>:

unsigned char irCommDataSent() {
	if(irCommTxByteEnqueued==1) {
		return 0;
    a7e8:	81 e0       	ldi	r24, 0x01	; 1
    a7ea:	90 91 2e 05 	lds	r25, 0x052E
    a7ee:	91 30       	cpi	r25, 0x01	; 1
    a7f0:	09 f0       	breq	.+2      	; 0xa7f4 <irCommDataSent+0xc>
	} else {
		return 1;
	}
}
    a7f2:	08 95       	ret
	irCommEnabledNext = IRCOMM_MODE_TRANSMIT;
}

unsigned char irCommDataSent() {
	if(irCommTxByteEnqueued==1) {
		return 0;
    a7f4:	80 e0       	ldi	r24, 0x00	; 0
	} else {
		return 1;
	}
}
    a7f6:	08 95       	ret

0000a7f8 <irCommDataAvailable>:

unsigned char irCommDataAvailable() {
	return irCommRxDataAvailable;
}
    a7f8:	80 91 22 05 	lds	r24, 0x0522
    a7fc:	08 95       	ret

0000a7fe <irCommReadData>:

unsigned char irCommReadData() {
	irCommRxDataAvailable = 0;
    a7fe:	10 92 22 05 	sts	0x0522, r1
	return irCommRxLastDataReceived;
}
    a802:	80 91 21 05 	lds	r24, 0x0521
    a806:	08 95       	ret

0000a808 <irCommReceivingSensor>:

signed char irCommReceivingSensor() {
	return irCommRxReceivingSensor;
}
    a808:	80 91 19 02 	lds	r24, 0x0219
    a80c:	08 95       	ret

0000a80e <getBearing>:

signed int getBearing(unsigned char sensor) {
    a80e:	88 30       	cpi	r24, 0x08	; 8
    a810:	50 f4       	brcc	.+20     	; 0xa826 <getBearing+0x18>
    a812:	e8 2f       	mov	r30, r24
    a814:	f0 e0       	ldi	r31, 0x00	; 0
    a816:	ee 0f       	add	r30, r30
    a818:	ff 1f       	adc	r31, r31
    a81a:	e6 5e       	subi	r30, 0xE6	; 230
    a81c:	fd 4f       	sbci	r31, 0xFD	; 253
    a81e:	20 81       	ld	r18, Z
    a820:	31 81       	ldd	r19, Z+1	; 0x01
		case 7:
			return 45;
		default:
			return -1;
	}
}
    a822:	c9 01       	movw	r24, r18
    a824:	08 95       	ret

signed char irCommReceivingSensor() {
	return irCommRxReceivingSensor;
}

signed int getBearing(unsigned char sensor) {
    a826:	2f ef       	ldi	r18, 0xFF	; 255
    a828:	3f ef       	ldi	r19, 0xFF	; 255
		case 7:
			return 45;
		default:
			return -1;
	}
}
    a82a:	c9 01       	movw	r24, r18
    a82c:	08 95       	ret

0000a82e <__subsf3>:
    a82e:	50 58       	subi	r21, 0x80	; 128

0000a830 <__addsf3>:
    a830:	bb 27       	eor	r27, r27
    a832:	aa 27       	eor	r26, r26
    a834:	0e d0       	rcall	.+28     	; 0xa852 <__addsf3x>
    a836:	27 c2       	rjmp	.+1102   	; 0xac86 <__fp_round>
    a838:	f0 d1       	rcall	.+992    	; 0xac1a <__fp_pscA>
    a83a:	30 f0       	brcs	.+12     	; 0xa848 <__addsf3+0x18>
    a83c:	f5 d1       	rcall	.+1002   	; 0xac28 <__fp_pscB>
    a83e:	20 f0       	brcs	.+8      	; 0xa848 <__addsf3+0x18>
    a840:	31 f4       	brne	.+12     	; 0xa84e <__addsf3+0x1e>
    a842:	9f 3f       	cpi	r25, 0xFF	; 255
    a844:	11 f4       	brne	.+4      	; 0xa84a <__addsf3+0x1a>
    a846:	1e f4       	brtc	.+6      	; 0xa84e <__addsf3+0x1e>
    a848:	c0 c1       	rjmp	.+896    	; 0xabca <__fp_nan>
    a84a:	0e f4       	brtc	.+2      	; 0xa84e <__addsf3+0x1e>
    a84c:	e0 95       	com	r30
    a84e:	e7 fb       	bst	r30, 7
    a850:	b6 c1       	rjmp	.+876    	; 0xabbe <__fp_inf>

0000a852 <__addsf3x>:
    a852:	e9 2f       	mov	r30, r25
    a854:	3a d2       	rcall	.+1140   	; 0xacca <__fp_split3>
    a856:	80 f3       	brcs	.-32     	; 0xa838 <__addsf3+0x8>
    a858:	ba 17       	cp	r27, r26
    a85a:	62 07       	cpc	r22, r18
    a85c:	73 07       	cpc	r23, r19
    a85e:	84 07       	cpc	r24, r20
    a860:	95 07       	cpc	r25, r21
    a862:	18 f0       	brcs	.+6      	; 0xa86a <__addsf3x+0x18>
    a864:	71 f4       	brne	.+28     	; 0xa882 <__addsf3x+0x30>
    a866:	9e f5       	brtc	.+102    	; 0xa8ce <__addsf3x+0x7c>
    a868:	52 c2       	rjmp	.+1188   	; 0xad0e <__fp_zero>
    a86a:	0e f4       	brtc	.+2      	; 0xa86e <__addsf3x+0x1c>
    a86c:	e0 95       	com	r30
    a86e:	0b 2e       	mov	r0, r27
    a870:	ba 2f       	mov	r27, r26
    a872:	a0 2d       	mov	r26, r0
    a874:	0b 01       	movw	r0, r22
    a876:	b9 01       	movw	r22, r18
    a878:	90 01       	movw	r18, r0
    a87a:	0c 01       	movw	r0, r24
    a87c:	ca 01       	movw	r24, r20
    a87e:	a0 01       	movw	r20, r0
    a880:	11 24       	eor	r1, r1
    a882:	ff 27       	eor	r31, r31
    a884:	59 1b       	sub	r21, r25
    a886:	99 f0       	breq	.+38     	; 0xa8ae <__addsf3x+0x5c>
    a888:	59 3f       	cpi	r21, 0xF9	; 249
    a88a:	50 f4       	brcc	.+20     	; 0xa8a0 <__addsf3x+0x4e>
    a88c:	50 3e       	cpi	r21, 0xE0	; 224
    a88e:	68 f1       	brcs	.+90     	; 0xa8ea <__addsf3x+0x98>
    a890:	1a 16       	cp	r1, r26
    a892:	f0 40       	sbci	r31, 0x00	; 0
    a894:	a2 2f       	mov	r26, r18
    a896:	23 2f       	mov	r18, r19
    a898:	34 2f       	mov	r19, r20
    a89a:	44 27       	eor	r20, r20
    a89c:	58 5f       	subi	r21, 0xF8	; 248
    a89e:	f3 cf       	rjmp	.-26     	; 0xa886 <__addsf3x+0x34>
    a8a0:	46 95       	lsr	r20
    a8a2:	37 95       	ror	r19
    a8a4:	27 95       	ror	r18
    a8a6:	a7 95       	ror	r26
    a8a8:	f0 40       	sbci	r31, 0x00	; 0
    a8aa:	53 95       	inc	r21
    a8ac:	c9 f7       	brne	.-14     	; 0xa8a0 <__addsf3x+0x4e>
    a8ae:	7e f4       	brtc	.+30     	; 0xa8ce <__addsf3x+0x7c>
    a8b0:	1f 16       	cp	r1, r31
    a8b2:	ba 0b       	sbc	r27, r26
    a8b4:	62 0b       	sbc	r22, r18
    a8b6:	73 0b       	sbc	r23, r19
    a8b8:	84 0b       	sbc	r24, r20
    a8ba:	ba f0       	brmi	.+46     	; 0xa8ea <__addsf3x+0x98>
    a8bc:	91 50       	subi	r25, 0x01	; 1
    a8be:	a1 f0       	breq	.+40     	; 0xa8e8 <__addsf3x+0x96>
    a8c0:	ff 0f       	add	r31, r31
    a8c2:	bb 1f       	adc	r27, r27
    a8c4:	66 1f       	adc	r22, r22
    a8c6:	77 1f       	adc	r23, r23
    a8c8:	88 1f       	adc	r24, r24
    a8ca:	c2 f7       	brpl	.-16     	; 0xa8bc <__addsf3x+0x6a>
    a8cc:	0e c0       	rjmp	.+28     	; 0xa8ea <__addsf3x+0x98>
    a8ce:	ba 0f       	add	r27, r26
    a8d0:	62 1f       	adc	r22, r18
    a8d2:	73 1f       	adc	r23, r19
    a8d4:	84 1f       	adc	r24, r20
    a8d6:	48 f4       	brcc	.+18     	; 0xa8ea <__addsf3x+0x98>
    a8d8:	87 95       	ror	r24
    a8da:	77 95       	ror	r23
    a8dc:	67 95       	ror	r22
    a8de:	b7 95       	ror	r27
    a8e0:	f7 95       	ror	r31
    a8e2:	9e 3f       	cpi	r25, 0xFE	; 254
    a8e4:	08 f0       	brcs	.+2      	; 0xa8e8 <__addsf3x+0x96>
    a8e6:	b3 cf       	rjmp	.-154    	; 0xa84e <__addsf3+0x1e>
    a8e8:	93 95       	inc	r25
    a8ea:	88 0f       	add	r24, r24
    a8ec:	08 f0       	brcs	.+2      	; 0xa8f0 <__addsf3x+0x9e>
    a8ee:	99 27       	eor	r25, r25
    a8f0:	ee 0f       	add	r30, r30
    a8f2:	97 95       	ror	r25
    a8f4:	87 95       	ror	r24
    a8f6:	08 95       	ret
    a8f8:	90 d1       	rcall	.+800    	; 0xac1a <__fp_pscA>
    a8fa:	58 f0       	brcs	.+22     	; 0xa912 <__addsf3x+0xc0>
    a8fc:	80 e8       	ldi	r24, 0x80	; 128
    a8fe:	91 e0       	ldi	r25, 0x01	; 1
    a900:	09 f4       	brne	.+2      	; 0xa904 <__addsf3x+0xb2>
    a902:	9e ef       	ldi	r25, 0xFE	; 254
    a904:	91 d1       	rcall	.+802    	; 0xac28 <__fp_pscB>
    a906:	28 f0       	brcs	.+10     	; 0xa912 <__addsf3x+0xc0>
    a908:	40 e8       	ldi	r20, 0x80	; 128
    a90a:	51 e0       	ldi	r21, 0x01	; 1
    a90c:	59 f4       	brne	.+22     	; 0xa924 <atan2+0xe>
    a90e:	5e ef       	ldi	r21, 0xFE	; 254
    a910:	09 c0       	rjmp	.+18     	; 0xa924 <atan2+0xe>
    a912:	5b c1       	rjmp	.+694    	; 0xabca <__fp_nan>
    a914:	fc c1       	rjmp	.+1016   	; 0xad0e <__fp_zero>

0000a916 <atan2>:
    a916:	e9 2f       	mov	r30, r25
    a918:	e0 78       	andi	r30, 0x80	; 128
    a91a:	d7 d1       	rcall	.+942    	; 0xacca <__fp_split3>
    a91c:	68 f3       	brcs	.-38     	; 0xa8f8 <__addsf3x+0xa6>
    a91e:	09 2e       	mov	r0, r25
    a920:	05 2a       	or	r0, r21
    a922:	c1 f3       	breq	.-16     	; 0xa914 <__addsf3x+0xc2>
    a924:	26 17       	cp	r18, r22
    a926:	37 07       	cpc	r19, r23
    a928:	48 07       	cpc	r20, r24
    a92a:	59 07       	cpc	r21, r25
    a92c:	38 f0       	brcs	.+14     	; 0xa93c <atan2+0x26>
    a92e:	0e 2e       	mov	r0, r30
    a930:	07 f8       	bld	r0, 7
    a932:	e0 25       	eor	r30, r0
    a934:	69 f0       	breq	.+26     	; 0xa950 <atan2+0x3a>
    a936:	e0 25       	eor	r30, r0
    a938:	e0 64       	ori	r30, 0x40	; 64
    a93a:	0a c0       	rjmp	.+20     	; 0xa950 <atan2+0x3a>
    a93c:	ef 63       	ori	r30, 0x3F	; 63
    a93e:	07 f8       	bld	r0, 7
    a940:	00 94       	com	r0
    a942:	07 fa       	bst	r0, 7
    a944:	db 01       	movw	r26, r22
    a946:	b9 01       	movw	r22, r18
    a948:	9d 01       	movw	r18, r26
    a94a:	dc 01       	movw	r26, r24
    a94c:	ca 01       	movw	r24, r20
    a94e:	ad 01       	movw	r20, r26
    a950:	ef 93       	push	r30
    a952:	4a d0       	rcall	.+148    	; 0xa9e8 <__divsf3_pse>
    a954:	98 d1       	rcall	.+816    	; 0xac86 <__fp_round>
    a956:	0a d0       	rcall	.+20     	; 0xa96c <atan>
    a958:	5f 91       	pop	r21
    a95a:	55 23       	and	r21, r21
    a95c:	31 f0       	breq	.+12     	; 0xa96a <atan2+0x54>
    a95e:	2b ed       	ldi	r18, 0xDB	; 219
    a960:	3f e0       	ldi	r19, 0x0F	; 15
    a962:	49 e4       	ldi	r20, 0x49	; 73
    a964:	50 fd       	sbrc	r21, 0
    a966:	49 ec       	ldi	r20, 0xC9	; 201
    a968:	63 cf       	rjmp	.-314    	; 0xa830 <__addsf3>
    a96a:	08 95       	ret

0000a96c <atan>:
    a96c:	df 93       	push	r29
    a96e:	dd 27       	eor	r29, r29
    a970:	b9 2f       	mov	r27, r25
    a972:	bf 77       	andi	r27, 0x7F	; 127
    a974:	40 e8       	ldi	r20, 0x80	; 128
    a976:	5f e3       	ldi	r21, 0x3F	; 63
    a978:	16 16       	cp	r1, r22
    a97a:	17 06       	cpc	r1, r23
    a97c:	48 07       	cpc	r20, r24
    a97e:	5b 07       	cpc	r21, r27
    a980:	10 f4       	brcc	.+4      	; 0xa986 <atan+0x1a>
    a982:	d9 2f       	mov	r29, r25
    a984:	cf d1       	rcall	.+926    	; 0xad24 <inverse>
    a986:	9f 93       	push	r25
    a988:	8f 93       	push	r24
    a98a:	7f 93       	push	r23
    a98c:	6f 93       	push	r22
    a98e:	3a d2       	rcall	.+1140   	; 0xae04 <square>
    a990:	ee e4       	ldi	r30, 0x4E	; 78
    a992:	f1 e0       	ldi	r31, 0x01	; 1
    a994:	1d d1       	rcall	.+570    	; 0xabd0 <__fp_powser>
    a996:	77 d1       	rcall	.+750    	; 0xac86 <__fp_round>
    a998:	2f 91       	pop	r18
    a99a:	3f 91       	pop	r19
    a99c:	4f 91       	pop	r20
    a99e:	5f 91       	pop	r21
    a9a0:	d4 d1       	rcall	.+936    	; 0xad4a <__mulsf3x>
    a9a2:	dd 23       	and	r29, r29
    a9a4:	49 f0       	breq	.+18     	; 0xa9b8 <atan+0x4c>
    a9a6:	90 58       	subi	r25, 0x80	; 128
    a9a8:	a2 ea       	ldi	r26, 0xA2	; 162
    a9aa:	2a ed       	ldi	r18, 0xDA	; 218
    a9ac:	3f e0       	ldi	r19, 0x0F	; 15
    a9ae:	49 ec       	ldi	r20, 0xC9	; 201
    a9b0:	5f e3       	ldi	r21, 0x3F	; 63
    a9b2:	d0 78       	andi	r29, 0x80	; 128
    a9b4:	5d 27       	eor	r21, r29
    a9b6:	4d df       	rcall	.-358    	; 0xa852 <__addsf3x>
    a9b8:	df 91       	pop	r29
    a9ba:	65 c1       	rjmp	.+714    	; 0xac86 <__fp_round>

0000a9bc <__cmpsf2>:
    a9bc:	dc d0       	rcall	.+440    	; 0xab76 <__fp_cmp>
    a9be:	08 f4       	brcc	.+2      	; 0xa9c2 <__cmpsf2+0x6>
    a9c0:	81 e0       	ldi	r24, 0x01	; 1
    a9c2:	08 95       	ret

0000a9c4 <cos>:
    a9c4:	39 d1       	rcall	.+626    	; 0xac38 <__fp_rempio2>
    a9c6:	e3 95       	inc	r30
    a9c8:	6f c1       	rjmp	.+734    	; 0xaca8 <__fp_sinus>

0000a9ca <__divsf3>:
    a9ca:	0c d0       	rcall	.+24     	; 0xa9e4 <__divsf3x>
    a9cc:	5c c1       	rjmp	.+696    	; 0xac86 <__fp_round>
    a9ce:	2c d1       	rcall	.+600    	; 0xac28 <__fp_pscB>
    a9d0:	40 f0       	brcs	.+16     	; 0xa9e2 <__divsf3+0x18>
    a9d2:	23 d1       	rcall	.+582    	; 0xac1a <__fp_pscA>
    a9d4:	30 f0       	brcs	.+12     	; 0xa9e2 <__divsf3+0x18>
    a9d6:	21 f4       	brne	.+8      	; 0xa9e0 <__divsf3+0x16>
    a9d8:	5f 3f       	cpi	r21, 0xFF	; 255
    a9da:	19 f0       	breq	.+6      	; 0xa9e2 <__divsf3+0x18>
    a9dc:	f0 c0       	rjmp	.+480    	; 0xabbe <__fp_inf>
    a9de:	51 11       	cpse	r21, r1
    a9e0:	97 c1       	rjmp	.+814    	; 0xad10 <__fp_szero>
    a9e2:	f3 c0       	rjmp	.+486    	; 0xabca <__fp_nan>

0000a9e4 <__divsf3x>:
    a9e4:	72 d1       	rcall	.+740    	; 0xacca <__fp_split3>
    a9e6:	98 f3       	brcs	.-26     	; 0xa9ce <__divsf3+0x4>

0000a9e8 <__divsf3_pse>:
    a9e8:	99 23       	and	r25, r25
    a9ea:	c9 f3       	breq	.-14     	; 0xa9de <__divsf3+0x14>
    a9ec:	55 23       	and	r21, r21
    a9ee:	b1 f3       	breq	.-20     	; 0xa9dc <__divsf3+0x12>
    a9f0:	95 1b       	sub	r25, r21
    a9f2:	55 0b       	sbc	r21, r21
    a9f4:	bb 27       	eor	r27, r27
    a9f6:	aa 27       	eor	r26, r26
    a9f8:	62 17       	cp	r22, r18
    a9fa:	73 07       	cpc	r23, r19
    a9fc:	84 07       	cpc	r24, r20
    a9fe:	38 f0       	brcs	.+14     	; 0xaa0e <__divsf3_pse+0x26>
    aa00:	9f 5f       	subi	r25, 0xFF	; 255
    aa02:	5f 4f       	sbci	r21, 0xFF	; 255
    aa04:	22 0f       	add	r18, r18
    aa06:	33 1f       	adc	r19, r19
    aa08:	44 1f       	adc	r20, r20
    aa0a:	aa 1f       	adc	r26, r26
    aa0c:	a9 f3       	breq	.-22     	; 0xa9f8 <__divsf3_pse+0x10>
    aa0e:	33 d0       	rcall	.+102    	; 0xaa76 <__divsf3_pse+0x8e>
    aa10:	0e 2e       	mov	r0, r30
    aa12:	3a f0       	brmi	.+14     	; 0xaa22 <__divsf3_pse+0x3a>
    aa14:	e0 e8       	ldi	r30, 0x80	; 128
    aa16:	30 d0       	rcall	.+96     	; 0xaa78 <__divsf3_pse+0x90>
    aa18:	91 50       	subi	r25, 0x01	; 1
    aa1a:	50 40       	sbci	r21, 0x00	; 0
    aa1c:	e6 95       	lsr	r30
    aa1e:	00 1c       	adc	r0, r0
    aa20:	ca f7       	brpl	.-14     	; 0xaa14 <__divsf3_pse+0x2c>
    aa22:	29 d0       	rcall	.+82     	; 0xaa76 <__divsf3_pse+0x8e>
    aa24:	fe 2f       	mov	r31, r30
    aa26:	27 d0       	rcall	.+78     	; 0xaa76 <__divsf3_pse+0x8e>
    aa28:	66 0f       	add	r22, r22
    aa2a:	77 1f       	adc	r23, r23
    aa2c:	88 1f       	adc	r24, r24
    aa2e:	bb 1f       	adc	r27, r27
    aa30:	26 17       	cp	r18, r22
    aa32:	37 07       	cpc	r19, r23
    aa34:	48 07       	cpc	r20, r24
    aa36:	ab 07       	cpc	r26, r27
    aa38:	b0 e8       	ldi	r27, 0x80	; 128
    aa3a:	09 f0       	breq	.+2      	; 0xaa3e <__divsf3_pse+0x56>
    aa3c:	bb 0b       	sbc	r27, r27
    aa3e:	80 2d       	mov	r24, r0
    aa40:	bf 01       	movw	r22, r30
    aa42:	ff 27       	eor	r31, r31
    aa44:	93 58       	subi	r25, 0x83	; 131
    aa46:	5f 4f       	sbci	r21, 0xFF	; 255
    aa48:	2a f0       	brmi	.+10     	; 0xaa54 <__divsf3_pse+0x6c>
    aa4a:	9e 3f       	cpi	r25, 0xFE	; 254
    aa4c:	51 05       	cpc	r21, r1
    aa4e:	68 f0       	brcs	.+26     	; 0xaa6a <__divsf3_pse+0x82>
    aa50:	b6 c0       	rjmp	.+364    	; 0xabbe <__fp_inf>
    aa52:	5e c1       	rjmp	.+700    	; 0xad10 <__fp_szero>
    aa54:	5f 3f       	cpi	r21, 0xFF	; 255
    aa56:	ec f3       	brlt	.-6      	; 0xaa52 <__divsf3_pse+0x6a>
    aa58:	98 3e       	cpi	r25, 0xE8	; 232
    aa5a:	dc f3       	brlt	.-10     	; 0xaa52 <__divsf3_pse+0x6a>
    aa5c:	86 95       	lsr	r24
    aa5e:	77 95       	ror	r23
    aa60:	67 95       	ror	r22
    aa62:	b7 95       	ror	r27
    aa64:	f7 95       	ror	r31
    aa66:	9f 5f       	subi	r25, 0xFF	; 255
    aa68:	c9 f7       	brne	.-14     	; 0xaa5c <__divsf3_pse+0x74>
    aa6a:	88 0f       	add	r24, r24
    aa6c:	91 1d       	adc	r25, r1
    aa6e:	96 95       	lsr	r25
    aa70:	87 95       	ror	r24
    aa72:	97 f9       	bld	r25, 7
    aa74:	08 95       	ret
    aa76:	e1 e0       	ldi	r30, 0x01	; 1
    aa78:	66 0f       	add	r22, r22
    aa7a:	77 1f       	adc	r23, r23
    aa7c:	88 1f       	adc	r24, r24
    aa7e:	bb 1f       	adc	r27, r27
    aa80:	62 17       	cp	r22, r18
    aa82:	73 07       	cpc	r23, r19
    aa84:	84 07       	cpc	r24, r20
    aa86:	ba 07       	cpc	r27, r26
    aa88:	20 f0       	brcs	.+8      	; 0xaa92 <__divsf3_pse+0xaa>
    aa8a:	62 1b       	sub	r22, r18
    aa8c:	73 0b       	sbc	r23, r19
    aa8e:	84 0b       	sbc	r24, r20
    aa90:	ba 0b       	sbc	r27, r26
    aa92:	ee 1f       	adc	r30, r30
    aa94:	88 f7       	brcc	.-30     	; 0xaa78 <__divsf3_pse+0x90>
    aa96:	e0 95       	com	r30
    aa98:	08 95       	ret

0000aa9a <__fixsfsi>:
    aa9a:	04 d0       	rcall	.+8      	; 0xaaa4 <__fixunssfsi>
    aa9c:	68 94       	set
    aa9e:	b1 11       	cpse	r27, r1
    aaa0:	37 c1       	rjmp	.+622    	; 0xad10 <__fp_szero>
    aaa2:	08 95       	ret

0000aaa4 <__fixunssfsi>:
    aaa4:	1a d1       	rcall	.+564    	; 0xacda <__fp_splitA>
    aaa6:	88 f0       	brcs	.+34     	; 0xaaca <__fixunssfsi+0x26>
    aaa8:	9f 57       	subi	r25, 0x7F	; 127
    aaaa:	90 f0       	brcs	.+36     	; 0xaad0 <__fixunssfsi+0x2c>
    aaac:	b9 2f       	mov	r27, r25
    aaae:	99 27       	eor	r25, r25
    aab0:	b7 51       	subi	r27, 0x17	; 23
    aab2:	a0 f0       	brcs	.+40     	; 0xaadc <__fixunssfsi+0x38>
    aab4:	d1 f0       	breq	.+52     	; 0xaaea <__fixunssfsi+0x46>
    aab6:	66 0f       	add	r22, r22
    aab8:	77 1f       	adc	r23, r23
    aaba:	88 1f       	adc	r24, r24
    aabc:	99 1f       	adc	r25, r25
    aabe:	1a f0       	brmi	.+6      	; 0xaac6 <__fixunssfsi+0x22>
    aac0:	ba 95       	dec	r27
    aac2:	c9 f7       	brne	.-14     	; 0xaab6 <__fixunssfsi+0x12>
    aac4:	12 c0       	rjmp	.+36     	; 0xaaea <__fixunssfsi+0x46>
    aac6:	b1 30       	cpi	r27, 0x01	; 1
    aac8:	81 f0       	breq	.+32     	; 0xaaea <__fixunssfsi+0x46>
    aaca:	21 d1       	rcall	.+578    	; 0xad0e <__fp_zero>
    aacc:	b1 e0       	ldi	r27, 0x01	; 1
    aace:	08 95       	ret
    aad0:	1e c1       	rjmp	.+572    	; 0xad0e <__fp_zero>
    aad2:	67 2f       	mov	r22, r23
    aad4:	78 2f       	mov	r23, r24
    aad6:	88 27       	eor	r24, r24
    aad8:	b8 5f       	subi	r27, 0xF8	; 248
    aada:	39 f0       	breq	.+14     	; 0xaaea <__fixunssfsi+0x46>
    aadc:	b9 3f       	cpi	r27, 0xF9	; 249
    aade:	cc f3       	brlt	.-14     	; 0xaad2 <__fixunssfsi+0x2e>
    aae0:	86 95       	lsr	r24
    aae2:	77 95       	ror	r23
    aae4:	67 95       	ror	r22
    aae6:	b3 95       	inc	r27
    aae8:	d9 f7       	brne	.-10     	; 0xaae0 <__fixunssfsi+0x3c>
    aaea:	3e f4       	brtc	.+14     	; 0xaafa <__fixunssfsi+0x56>
    aaec:	90 95       	com	r25
    aaee:	80 95       	com	r24
    aaf0:	70 95       	com	r23
    aaf2:	61 95       	neg	r22
    aaf4:	7f 4f       	sbci	r23, 0xFF	; 255
    aaf6:	8f 4f       	sbci	r24, 0xFF	; 255
    aaf8:	9f 4f       	sbci	r25, 0xFF	; 255
    aafa:	08 95       	ret

0000aafc <__floatunsisf>:
    aafc:	e8 94       	clt
    aafe:	09 c0       	rjmp	.+18     	; 0xab12 <__floatsisf+0x12>

0000ab00 <__floatsisf>:
    ab00:	97 fb       	bst	r25, 7
    ab02:	3e f4       	brtc	.+14     	; 0xab12 <__floatsisf+0x12>
    ab04:	90 95       	com	r25
    ab06:	80 95       	com	r24
    ab08:	70 95       	com	r23
    ab0a:	61 95       	neg	r22
    ab0c:	7f 4f       	sbci	r23, 0xFF	; 255
    ab0e:	8f 4f       	sbci	r24, 0xFF	; 255
    ab10:	9f 4f       	sbci	r25, 0xFF	; 255
    ab12:	99 23       	and	r25, r25
    ab14:	a9 f0       	breq	.+42     	; 0xab40 <__floatsisf+0x40>
    ab16:	f9 2f       	mov	r31, r25
    ab18:	96 e9       	ldi	r25, 0x96	; 150
    ab1a:	bb 27       	eor	r27, r27
    ab1c:	93 95       	inc	r25
    ab1e:	f6 95       	lsr	r31
    ab20:	87 95       	ror	r24
    ab22:	77 95       	ror	r23
    ab24:	67 95       	ror	r22
    ab26:	b7 95       	ror	r27
    ab28:	f1 11       	cpse	r31, r1
    ab2a:	f8 cf       	rjmp	.-16     	; 0xab1c <__floatsisf+0x1c>
    ab2c:	fa f4       	brpl	.+62     	; 0xab6c <__floatsisf+0x6c>
    ab2e:	bb 0f       	add	r27, r27
    ab30:	11 f4       	brne	.+4      	; 0xab36 <__floatsisf+0x36>
    ab32:	60 ff       	sbrs	r22, 0
    ab34:	1b c0       	rjmp	.+54     	; 0xab6c <__floatsisf+0x6c>
    ab36:	6f 5f       	subi	r22, 0xFF	; 255
    ab38:	7f 4f       	sbci	r23, 0xFF	; 255
    ab3a:	8f 4f       	sbci	r24, 0xFF	; 255
    ab3c:	9f 4f       	sbci	r25, 0xFF	; 255
    ab3e:	16 c0       	rjmp	.+44     	; 0xab6c <__floatsisf+0x6c>
    ab40:	88 23       	and	r24, r24
    ab42:	11 f0       	breq	.+4      	; 0xab48 <__floatsisf+0x48>
    ab44:	96 e9       	ldi	r25, 0x96	; 150
    ab46:	11 c0       	rjmp	.+34     	; 0xab6a <__floatsisf+0x6a>
    ab48:	77 23       	and	r23, r23
    ab4a:	21 f0       	breq	.+8      	; 0xab54 <__floatsisf+0x54>
    ab4c:	9e e8       	ldi	r25, 0x8E	; 142
    ab4e:	87 2f       	mov	r24, r23
    ab50:	76 2f       	mov	r23, r22
    ab52:	05 c0       	rjmp	.+10     	; 0xab5e <__floatsisf+0x5e>
    ab54:	66 23       	and	r22, r22
    ab56:	71 f0       	breq	.+28     	; 0xab74 <__floatsisf+0x74>
    ab58:	96 e8       	ldi	r25, 0x86	; 134
    ab5a:	86 2f       	mov	r24, r22
    ab5c:	70 e0       	ldi	r23, 0x00	; 0
    ab5e:	60 e0       	ldi	r22, 0x00	; 0
    ab60:	2a f0       	brmi	.+10     	; 0xab6c <__floatsisf+0x6c>
    ab62:	9a 95       	dec	r25
    ab64:	66 0f       	add	r22, r22
    ab66:	77 1f       	adc	r23, r23
    ab68:	88 1f       	adc	r24, r24
    ab6a:	da f7       	brpl	.-10     	; 0xab62 <__floatsisf+0x62>
    ab6c:	88 0f       	add	r24, r24
    ab6e:	96 95       	lsr	r25
    ab70:	87 95       	ror	r24
    ab72:	97 f9       	bld	r25, 7
    ab74:	08 95       	ret

0000ab76 <__fp_cmp>:
    ab76:	99 0f       	add	r25, r25
    ab78:	00 08       	sbc	r0, r0
    ab7a:	55 0f       	add	r21, r21
    ab7c:	aa 0b       	sbc	r26, r26
    ab7e:	e0 e8       	ldi	r30, 0x80	; 128
    ab80:	fe ef       	ldi	r31, 0xFE	; 254
    ab82:	16 16       	cp	r1, r22
    ab84:	17 06       	cpc	r1, r23
    ab86:	e8 07       	cpc	r30, r24
    ab88:	f9 07       	cpc	r31, r25
    ab8a:	c0 f0       	brcs	.+48     	; 0xabbc <__fp_cmp+0x46>
    ab8c:	12 16       	cp	r1, r18
    ab8e:	13 06       	cpc	r1, r19
    ab90:	e4 07       	cpc	r30, r20
    ab92:	f5 07       	cpc	r31, r21
    ab94:	98 f0       	brcs	.+38     	; 0xabbc <__fp_cmp+0x46>
    ab96:	62 1b       	sub	r22, r18
    ab98:	73 0b       	sbc	r23, r19
    ab9a:	84 0b       	sbc	r24, r20
    ab9c:	95 0b       	sbc	r25, r21
    ab9e:	39 f4       	brne	.+14     	; 0xabae <__fp_cmp+0x38>
    aba0:	0a 26       	eor	r0, r26
    aba2:	61 f0       	breq	.+24     	; 0xabbc <__fp_cmp+0x46>
    aba4:	23 2b       	or	r18, r19
    aba6:	24 2b       	or	r18, r20
    aba8:	25 2b       	or	r18, r21
    abaa:	21 f4       	brne	.+8      	; 0xabb4 <__fp_cmp+0x3e>
    abac:	08 95       	ret
    abae:	0a 26       	eor	r0, r26
    abb0:	09 f4       	brne	.+2      	; 0xabb4 <__fp_cmp+0x3e>
    abb2:	a1 40       	sbci	r26, 0x01	; 1
    abb4:	a6 95       	lsr	r26
    abb6:	8f ef       	ldi	r24, 0xFF	; 255
    abb8:	81 1d       	adc	r24, r1
    abba:	81 1d       	adc	r24, r1
    abbc:	08 95       	ret

0000abbe <__fp_inf>:
    abbe:	97 f9       	bld	r25, 7
    abc0:	9f 67       	ori	r25, 0x7F	; 127
    abc2:	80 e8       	ldi	r24, 0x80	; 128
    abc4:	70 e0       	ldi	r23, 0x00	; 0
    abc6:	60 e0       	ldi	r22, 0x00	; 0
    abc8:	08 95       	ret

0000abca <__fp_nan>:
    abca:	9f ef       	ldi	r25, 0xFF	; 255
    abcc:	80 ec       	ldi	r24, 0xC0	; 192
    abce:	08 95       	ret

0000abd0 <__fp_powser>:
    abd0:	df 93       	push	r29
    abd2:	cf 93       	push	r28
    abd4:	1f 93       	push	r17
    abd6:	0f 93       	push	r16
    abd8:	ff 92       	push	r15
    abda:	ef 92       	push	r14
    abdc:	df 92       	push	r13
    abde:	7b 01       	movw	r14, r22
    abe0:	8c 01       	movw	r16, r24
    abe2:	68 94       	set
    abe4:	05 c0       	rjmp	.+10     	; 0xabf0 <__fp_powser+0x20>
    abe6:	da 2e       	mov	r13, r26
    abe8:	ef 01       	movw	r28, r30
    abea:	af d0       	rcall	.+350    	; 0xad4a <__mulsf3x>
    abec:	fe 01       	movw	r30, r28
    abee:	e8 94       	clt
    abf0:	a5 91       	lpm	r26, Z+
    abf2:	25 91       	lpm	r18, Z+
    abf4:	35 91       	lpm	r19, Z+
    abf6:	45 91       	lpm	r20, Z+
    abf8:	55 91       	lpm	r21, Z+
    abfa:	ae f3       	brts	.-22     	; 0xabe6 <__fp_powser+0x16>
    abfc:	ef 01       	movw	r28, r30
    abfe:	29 de       	rcall	.-942    	; 0xa852 <__addsf3x>
    ac00:	fe 01       	movw	r30, r28
    ac02:	97 01       	movw	r18, r14
    ac04:	a8 01       	movw	r20, r16
    ac06:	da 94       	dec	r13
    ac08:	79 f7       	brne	.-34     	; 0xabe8 <__fp_powser+0x18>
    ac0a:	df 90       	pop	r13
    ac0c:	ef 90       	pop	r14
    ac0e:	ff 90       	pop	r15
    ac10:	0f 91       	pop	r16
    ac12:	1f 91       	pop	r17
    ac14:	cf 91       	pop	r28
    ac16:	df 91       	pop	r29
    ac18:	08 95       	ret

0000ac1a <__fp_pscA>:
    ac1a:	00 24       	eor	r0, r0
    ac1c:	0a 94       	dec	r0
    ac1e:	16 16       	cp	r1, r22
    ac20:	17 06       	cpc	r1, r23
    ac22:	18 06       	cpc	r1, r24
    ac24:	09 06       	cpc	r0, r25
    ac26:	08 95       	ret

0000ac28 <__fp_pscB>:
    ac28:	00 24       	eor	r0, r0
    ac2a:	0a 94       	dec	r0
    ac2c:	12 16       	cp	r1, r18
    ac2e:	13 06       	cpc	r1, r19
    ac30:	14 06       	cpc	r1, r20
    ac32:	05 06       	cpc	r0, r21
    ac34:	08 95       	ret
    ac36:	c9 cf       	rjmp	.-110    	; 0xabca <__fp_nan>

0000ac38 <__fp_rempio2>:
    ac38:	50 d0       	rcall	.+160    	; 0xacda <__fp_splitA>
    ac3a:	e8 f3       	brcs	.-6      	; 0xac36 <__fp_pscB+0xe>
    ac3c:	e8 94       	clt
    ac3e:	e0 e0       	ldi	r30, 0x00	; 0
    ac40:	bb 27       	eor	r27, r27
    ac42:	9f 57       	subi	r25, 0x7F	; 127
    ac44:	f0 f0       	brcs	.+60     	; 0xac82 <__fp_rempio2+0x4a>
    ac46:	2a ed       	ldi	r18, 0xDA	; 218
    ac48:	3f e0       	ldi	r19, 0x0F	; 15
    ac4a:	49 ec       	ldi	r20, 0xC9	; 201
    ac4c:	06 c0       	rjmp	.+12     	; 0xac5a <__fp_rempio2+0x22>
    ac4e:	ee 0f       	add	r30, r30
    ac50:	bb 0f       	add	r27, r27
    ac52:	66 1f       	adc	r22, r22
    ac54:	77 1f       	adc	r23, r23
    ac56:	88 1f       	adc	r24, r24
    ac58:	28 f0       	brcs	.+10     	; 0xac64 <__fp_rempio2+0x2c>
    ac5a:	b2 3a       	cpi	r27, 0xA2	; 162
    ac5c:	62 07       	cpc	r22, r18
    ac5e:	73 07       	cpc	r23, r19
    ac60:	84 07       	cpc	r24, r20
    ac62:	28 f0       	brcs	.+10     	; 0xac6e <__fp_rempio2+0x36>
    ac64:	b2 5a       	subi	r27, 0xA2	; 162
    ac66:	62 0b       	sbc	r22, r18
    ac68:	73 0b       	sbc	r23, r19
    ac6a:	84 0b       	sbc	r24, r20
    ac6c:	e3 95       	inc	r30
    ac6e:	9a 95       	dec	r25
    ac70:	72 f7       	brpl	.-36     	; 0xac4e <__fp_rempio2+0x16>
    ac72:	80 38       	cpi	r24, 0x80	; 128
    ac74:	30 f4       	brcc	.+12     	; 0xac82 <__fp_rempio2+0x4a>
    ac76:	9a 95       	dec	r25
    ac78:	bb 0f       	add	r27, r27
    ac7a:	66 1f       	adc	r22, r22
    ac7c:	77 1f       	adc	r23, r23
    ac7e:	88 1f       	adc	r24, r24
    ac80:	d2 f7       	brpl	.-12     	; 0xac76 <__fp_rempio2+0x3e>
    ac82:	90 48       	sbci	r25, 0x80	; 128
    ac84:	c4 c0       	rjmp	.+392    	; 0xae0e <__fp_mpack_finite>

0000ac86 <__fp_round>:
    ac86:	09 2e       	mov	r0, r25
    ac88:	03 94       	inc	r0
    ac8a:	00 0c       	add	r0, r0
    ac8c:	11 f4       	brne	.+4      	; 0xac92 <__fp_round+0xc>
    ac8e:	88 23       	and	r24, r24
    ac90:	52 f0       	brmi	.+20     	; 0xaca6 <__fp_round+0x20>
    ac92:	bb 0f       	add	r27, r27
    ac94:	40 f4       	brcc	.+16     	; 0xaca6 <__fp_round+0x20>
    ac96:	bf 2b       	or	r27, r31
    ac98:	11 f4       	brne	.+4      	; 0xac9e <__fp_round+0x18>
    ac9a:	60 ff       	sbrs	r22, 0
    ac9c:	04 c0       	rjmp	.+8      	; 0xaca6 <__fp_round+0x20>
    ac9e:	6f 5f       	subi	r22, 0xFF	; 255
    aca0:	7f 4f       	sbci	r23, 0xFF	; 255
    aca2:	8f 4f       	sbci	r24, 0xFF	; 255
    aca4:	9f 4f       	sbci	r25, 0xFF	; 255
    aca6:	08 95       	ret

0000aca8 <__fp_sinus>:
    aca8:	ef 93       	push	r30
    acaa:	e0 ff       	sbrs	r30, 0
    acac:	06 c0       	rjmp	.+12     	; 0xacba <__fp_sinus+0x12>
    acae:	a2 ea       	ldi	r26, 0xA2	; 162
    acb0:	2a ed       	ldi	r18, 0xDA	; 218
    acb2:	3f e0       	ldi	r19, 0x0F	; 15
    acb4:	49 ec       	ldi	r20, 0xC9	; 201
    acb6:	5f eb       	ldi	r21, 0xBF	; 191
    acb8:	cc dd       	rcall	.-1128   	; 0xa852 <__addsf3x>
    acba:	e5 df       	rcall	.-54     	; 0xac86 <__fp_round>
    acbc:	0f 90       	pop	r0
    acbe:	03 94       	inc	r0
    acc0:	01 fc       	sbrc	r0, 1
    acc2:	90 58       	subi	r25, 0x80	; 128
    acc4:	eb e7       	ldi	r30, 0x7B	; 123
    acc6:	f1 e0       	ldi	r31, 0x01	; 1
    acc8:	ae c0       	rjmp	.+348    	; 0xae26 <__fp_powsodd>

0000acca <__fp_split3>:
    acca:	57 fd       	sbrc	r21, 7
    accc:	90 58       	subi	r25, 0x80	; 128
    acce:	44 0f       	add	r20, r20
    acd0:	55 1f       	adc	r21, r21
    acd2:	59 f0       	breq	.+22     	; 0xacea <__fp_splitA+0x10>
    acd4:	5f 3f       	cpi	r21, 0xFF	; 255
    acd6:	71 f0       	breq	.+28     	; 0xacf4 <__fp_splitA+0x1a>
    acd8:	47 95       	ror	r20

0000acda <__fp_splitA>:
    acda:	88 0f       	add	r24, r24
    acdc:	97 fb       	bst	r25, 7
    acde:	99 1f       	adc	r25, r25
    ace0:	61 f0       	breq	.+24     	; 0xacfa <__fp_splitA+0x20>
    ace2:	9f 3f       	cpi	r25, 0xFF	; 255
    ace4:	79 f0       	breq	.+30     	; 0xad04 <__fp_splitA+0x2a>
    ace6:	87 95       	ror	r24
    ace8:	08 95       	ret
    acea:	12 16       	cp	r1, r18
    acec:	13 06       	cpc	r1, r19
    acee:	14 06       	cpc	r1, r20
    acf0:	55 1f       	adc	r21, r21
    acf2:	f2 cf       	rjmp	.-28     	; 0xacd8 <__fp_split3+0xe>
    acf4:	46 95       	lsr	r20
    acf6:	f1 df       	rcall	.-30     	; 0xacda <__fp_splitA>
    acf8:	08 c0       	rjmp	.+16     	; 0xad0a <__fp_splitA+0x30>
    acfa:	16 16       	cp	r1, r22
    acfc:	17 06       	cpc	r1, r23
    acfe:	18 06       	cpc	r1, r24
    ad00:	99 1f       	adc	r25, r25
    ad02:	f1 cf       	rjmp	.-30     	; 0xace6 <__fp_splitA+0xc>
    ad04:	86 95       	lsr	r24
    ad06:	71 05       	cpc	r23, r1
    ad08:	61 05       	cpc	r22, r1
    ad0a:	08 94       	sec
    ad0c:	08 95       	ret

0000ad0e <__fp_zero>:
    ad0e:	e8 94       	clt

0000ad10 <__fp_szero>:
    ad10:	bb 27       	eor	r27, r27
    ad12:	66 27       	eor	r22, r22
    ad14:	77 27       	eor	r23, r23
    ad16:	cb 01       	movw	r24, r22
    ad18:	97 f9       	bld	r25, 7
    ad1a:	08 95       	ret

0000ad1c <__gesf2>:
    ad1c:	2c df       	rcall	.-424    	; 0xab76 <__fp_cmp>
    ad1e:	08 f4       	brcc	.+2      	; 0xad22 <__gesf2+0x6>
    ad20:	8f ef       	ldi	r24, 0xFF	; 255
    ad22:	08 95       	ret

0000ad24 <inverse>:
    ad24:	9b 01       	movw	r18, r22
    ad26:	ac 01       	movw	r20, r24
    ad28:	60 e0       	ldi	r22, 0x00	; 0
    ad2a:	70 e0       	ldi	r23, 0x00	; 0
    ad2c:	80 e8       	ldi	r24, 0x80	; 128
    ad2e:	9f e3       	ldi	r25, 0x3F	; 63
    ad30:	4c ce       	rjmp	.-872    	; 0xa9ca <__divsf3>

0000ad32 <__mulsf3>:
    ad32:	0b d0       	rcall	.+22     	; 0xad4a <__mulsf3x>
    ad34:	a8 cf       	rjmp	.-176    	; 0xac86 <__fp_round>
    ad36:	71 df       	rcall	.-286    	; 0xac1a <__fp_pscA>
    ad38:	28 f0       	brcs	.+10     	; 0xad44 <__mulsf3+0x12>
    ad3a:	76 df       	rcall	.-276    	; 0xac28 <__fp_pscB>
    ad3c:	18 f0       	brcs	.+6      	; 0xad44 <__mulsf3+0x12>
    ad3e:	95 23       	and	r25, r21
    ad40:	09 f0       	breq	.+2      	; 0xad44 <__mulsf3+0x12>
    ad42:	3d cf       	rjmp	.-390    	; 0xabbe <__fp_inf>
    ad44:	42 cf       	rjmp	.-380    	; 0xabca <__fp_nan>
    ad46:	11 24       	eor	r1, r1
    ad48:	e3 cf       	rjmp	.-58     	; 0xad10 <__fp_szero>

0000ad4a <__mulsf3x>:
    ad4a:	bf df       	rcall	.-130    	; 0xacca <__fp_split3>
    ad4c:	a0 f3       	brcs	.-24     	; 0xad36 <__mulsf3+0x4>

0000ad4e <__mulsf3_pse>:
    ad4e:	95 9f       	mul	r25, r21
    ad50:	d1 f3       	breq	.-12     	; 0xad46 <__mulsf3+0x14>
    ad52:	95 0f       	add	r25, r21
    ad54:	50 e0       	ldi	r21, 0x00	; 0
    ad56:	55 1f       	adc	r21, r21
    ad58:	62 9f       	mul	r22, r18
    ad5a:	f0 01       	movw	r30, r0
    ad5c:	72 9f       	mul	r23, r18
    ad5e:	bb 27       	eor	r27, r27
    ad60:	f0 0d       	add	r31, r0
    ad62:	b1 1d       	adc	r27, r1
    ad64:	63 9f       	mul	r22, r19
    ad66:	aa 27       	eor	r26, r26
    ad68:	f0 0d       	add	r31, r0
    ad6a:	b1 1d       	adc	r27, r1
    ad6c:	aa 1f       	adc	r26, r26
    ad6e:	64 9f       	mul	r22, r20
    ad70:	66 27       	eor	r22, r22
    ad72:	b0 0d       	add	r27, r0
    ad74:	a1 1d       	adc	r26, r1
    ad76:	66 1f       	adc	r22, r22
    ad78:	82 9f       	mul	r24, r18
    ad7a:	22 27       	eor	r18, r18
    ad7c:	b0 0d       	add	r27, r0
    ad7e:	a1 1d       	adc	r26, r1
    ad80:	62 1f       	adc	r22, r18
    ad82:	73 9f       	mul	r23, r19
    ad84:	b0 0d       	add	r27, r0
    ad86:	a1 1d       	adc	r26, r1
    ad88:	62 1f       	adc	r22, r18
    ad8a:	83 9f       	mul	r24, r19
    ad8c:	a0 0d       	add	r26, r0
    ad8e:	61 1d       	adc	r22, r1
    ad90:	22 1f       	adc	r18, r18
    ad92:	74 9f       	mul	r23, r20
    ad94:	33 27       	eor	r19, r19
    ad96:	a0 0d       	add	r26, r0
    ad98:	61 1d       	adc	r22, r1
    ad9a:	23 1f       	adc	r18, r19
    ad9c:	84 9f       	mul	r24, r20
    ad9e:	60 0d       	add	r22, r0
    ada0:	21 1d       	adc	r18, r1
    ada2:	82 2f       	mov	r24, r18
    ada4:	76 2f       	mov	r23, r22
    ada6:	6a 2f       	mov	r22, r26
    ada8:	11 24       	eor	r1, r1
    adaa:	9f 57       	subi	r25, 0x7F	; 127
    adac:	50 40       	sbci	r21, 0x00	; 0
    adae:	8a f0       	brmi	.+34     	; 0xadd2 <__mulsf3_pse+0x84>
    adb0:	e1 f0       	breq	.+56     	; 0xadea <__mulsf3_pse+0x9c>
    adb2:	88 23       	and	r24, r24
    adb4:	4a f0       	brmi	.+18     	; 0xadc8 <__mulsf3_pse+0x7a>
    adb6:	ee 0f       	add	r30, r30
    adb8:	ff 1f       	adc	r31, r31
    adba:	bb 1f       	adc	r27, r27
    adbc:	66 1f       	adc	r22, r22
    adbe:	77 1f       	adc	r23, r23
    adc0:	88 1f       	adc	r24, r24
    adc2:	91 50       	subi	r25, 0x01	; 1
    adc4:	50 40       	sbci	r21, 0x00	; 0
    adc6:	a9 f7       	brne	.-22     	; 0xadb2 <__mulsf3_pse+0x64>
    adc8:	9e 3f       	cpi	r25, 0xFE	; 254
    adca:	51 05       	cpc	r21, r1
    adcc:	70 f0       	brcs	.+28     	; 0xadea <__mulsf3_pse+0x9c>
    adce:	f7 ce       	rjmp	.-530    	; 0xabbe <__fp_inf>
    add0:	9f cf       	rjmp	.-194    	; 0xad10 <__fp_szero>
    add2:	5f 3f       	cpi	r21, 0xFF	; 255
    add4:	ec f3       	brlt	.-6      	; 0xadd0 <__mulsf3_pse+0x82>
    add6:	98 3e       	cpi	r25, 0xE8	; 232
    add8:	dc f3       	brlt	.-10     	; 0xadd0 <__mulsf3_pse+0x82>
    adda:	86 95       	lsr	r24
    addc:	77 95       	ror	r23
    adde:	67 95       	ror	r22
    ade0:	b7 95       	ror	r27
    ade2:	f7 95       	ror	r31
    ade4:	e7 95       	ror	r30
    ade6:	9f 5f       	subi	r25, 0xFF	; 255
    ade8:	c1 f7       	brne	.-16     	; 0xadda <__mulsf3_pse+0x8c>
    adea:	fe 2b       	or	r31, r30
    adec:	88 0f       	add	r24, r24
    adee:	91 1d       	adc	r25, r1
    adf0:	96 95       	lsr	r25
    adf2:	87 95       	ror	r24
    adf4:	97 f9       	bld	r25, 7
    adf6:	08 95       	ret

0000adf8 <sin>:
    adf8:	9f 93       	push	r25
    adfa:	1e df       	rcall	.-452    	; 0xac38 <__fp_rempio2>
    adfc:	0f 90       	pop	r0
    adfe:	07 fc       	sbrc	r0, 7
    ae00:	ee 5f       	subi	r30, 0xFE	; 254
    ae02:	52 cf       	rjmp	.-348    	; 0xaca8 <__fp_sinus>

0000ae04 <square>:
    ae04:	9b 01       	movw	r18, r22
    ae06:	ac 01       	movw	r20, r24
    ae08:	94 cf       	rjmp	.-216    	; 0xad32 <__mulsf3>

0000ae0a <__fp_mpack>:
    ae0a:	9f 3f       	cpi	r25, 0xFF	; 255
    ae0c:	31 f0       	breq	.+12     	; 0xae1a <__fp_mpack_finite+0xc>

0000ae0e <__fp_mpack_finite>:
    ae0e:	91 50       	subi	r25, 0x01	; 1
    ae10:	20 f4       	brcc	.+8      	; 0xae1a <__fp_mpack_finite+0xc>
    ae12:	87 95       	ror	r24
    ae14:	77 95       	ror	r23
    ae16:	67 95       	ror	r22
    ae18:	b7 95       	ror	r27
    ae1a:	88 0f       	add	r24, r24
    ae1c:	91 1d       	adc	r25, r1
    ae1e:	96 95       	lsr	r25
    ae20:	87 95       	ror	r24
    ae22:	97 f9       	bld	r25, 7
    ae24:	08 95       	ret

0000ae26 <__fp_powsodd>:
    ae26:	9f 93       	push	r25
    ae28:	8f 93       	push	r24
    ae2a:	7f 93       	push	r23
    ae2c:	6f 93       	push	r22
    ae2e:	ff 93       	push	r31
    ae30:	ef 93       	push	r30
    ae32:	9b 01       	movw	r18, r22
    ae34:	ac 01       	movw	r20, r24
    ae36:	7d df       	rcall	.-262    	; 0xad32 <__mulsf3>
    ae38:	ef 91       	pop	r30
    ae3a:	ff 91       	pop	r31
    ae3c:	c9 de       	rcall	.-622    	; 0xabd0 <__fp_powser>
    ae3e:	2f 91       	pop	r18
    ae40:	3f 91       	pop	r19
    ae42:	4f 91       	pop	r20
    ae44:	5f 91       	pop	r21
    ae46:	75 cf       	rjmp	.-278    	; 0xad32 <__mulsf3>

0000ae48 <__mulsi3>:
    ae48:	62 9f       	mul	r22, r18
    ae4a:	d0 01       	movw	r26, r0
    ae4c:	73 9f       	mul	r23, r19
    ae4e:	f0 01       	movw	r30, r0
    ae50:	82 9f       	mul	r24, r18
    ae52:	e0 0d       	add	r30, r0
    ae54:	f1 1d       	adc	r31, r1
    ae56:	64 9f       	mul	r22, r20
    ae58:	e0 0d       	add	r30, r0
    ae5a:	f1 1d       	adc	r31, r1
    ae5c:	92 9f       	mul	r25, r18
    ae5e:	f0 0d       	add	r31, r0
    ae60:	83 9f       	mul	r24, r19
    ae62:	f0 0d       	add	r31, r0
    ae64:	74 9f       	mul	r23, r20
    ae66:	f0 0d       	add	r31, r0
    ae68:	65 9f       	mul	r22, r21
    ae6a:	f0 0d       	add	r31, r0
    ae6c:	99 27       	eor	r25, r25
    ae6e:	72 9f       	mul	r23, r18
    ae70:	b0 0d       	add	r27, r0
    ae72:	e1 1d       	adc	r30, r1
    ae74:	f9 1f       	adc	r31, r25
    ae76:	63 9f       	mul	r22, r19
    ae78:	b0 0d       	add	r27, r0
    ae7a:	e1 1d       	adc	r30, r1
    ae7c:	f9 1f       	adc	r31, r25
    ae7e:	bd 01       	movw	r22, r26
    ae80:	cf 01       	movw	r24, r30
    ae82:	11 24       	eor	r1, r1
    ae84:	08 95       	ret

0000ae86 <__udivmodhi4>:
    ae86:	aa 1b       	sub	r26, r26
    ae88:	bb 1b       	sub	r27, r27
    ae8a:	51 e1       	ldi	r21, 0x11	; 17
    ae8c:	07 c0       	rjmp	.+14     	; 0xae9c <__udivmodhi4_ep>

0000ae8e <__udivmodhi4_loop>:
    ae8e:	aa 1f       	adc	r26, r26
    ae90:	bb 1f       	adc	r27, r27
    ae92:	a6 17       	cp	r26, r22
    ae94:	b7 07       	cpc	r27, r23
    ae96:	10 f0       	brcs	.+4      	; 0xae9c <__udivmodhi4_ep>
    ae98:	a6 1b       	sub	r26, r22
    ae9a:	b7 0b       	sbc	r27, r23

0000ae9c <__udivmodhi4_ep>:
    ae9c:	88 1f       	adc	r24, r24
    ae9e:	99 1f       	adc	r25, r25
    aea0:	5a 95       	dec	r21
    aea2:	a9 f7       	brne	.-22     	; 0xae8e <__udivmodhi4_loop>
    aea4:	80 95       	com	r24
    aea6:	90 95       	com	r25
    aea8:	bc 01       	movw	r22, r24
    aeaa:	cd 01       	movw	r24, r26
    aeac:	08 95       	ret

0000aeae <__divmodhi4>:
    aeae:	97 fb       	bst	r25, 7
    aeb0:	09 2e       	mov	r0, r25
    aeb2:	07 26       	eor	r0, r23
    aeb4:	0a d0       	rcall	.+20     	; 0xaeca <__divmodhi4_neg1>
    aeb6:	77 fd       	sbrc	r23, 7
    aeb8:	04 d0       	rcall	.+8      	; 0xaec2 <__divmodhi4_neg2>
    aeba:	e5 df       	rcall	.-54     	; 0xae86 <__udivmodhi4>
    aebc:	06 d0       	rcall	.+12     	; 0xaeca <__divmodhi4_neg1>
    aebe:	00 20       	and	r0, r0
    aec0:	1a f4       	brpl	.+6      	; 0xaec8 <__divmodhi4_exit>

0000aec2 <__divmodhi4_neg2>:
    aec2:	70 95       	com	r23
    aec4:	61 95       	neg	r22
    aec6:	7f 4f       	sbci	r23, 0xFF	; 255

0000aec8 <__divmodhi4_exit>:
    aec8:	08 95       	ret

0000aeca <__divmodhi4_neg1>:
    aeca:	f6 f7       	brtc	.-4      	; 0xaec8 <__divmodhi4_exit>
    aecc:	90 95       	com	r25
    aece:	81 95       	neg	r24
    aed0:	9f 4f       	sbci	r25, 0xFF	; 255
    aed2:	08 95       	ret

0000aed4 <__divmodsi4>:
    aed4:	97 fb       	bst	r25, 7
    aed6:	09 2e       	mov	r0, r25
    aed8:	05 26       	eor	r0, r21
    aeda:	0e d0       	rcall	.+28     	; 0xaef8 <__divmodsi4_neg1>
    aedc:	57 fd       	sbrc	r21, 7
    aede:	04 d0       	rcall	.+8      	; 0xaee8 <__divmodsi4_neg2>
    aee0:	14 d0       	rcall	.+40     	; 0xaf0a <__udivmodsi4>
    aee2:	0a d0       	rcall	.+20     	; 0xaef8 <__divmodsi4_neg1>
    aee4:	00 1c       	adc	r0, r0
    aee6:	38 f4       	brcc	.+14     	; 0xaef6 <__divmodsi4_exit>

0000aee8 <__divmodsi4_neg2>:
    aee8:	50 95       	com	r21
    aeea:	40 95       	com	r20
    aeec:	30 95       	com	r19
    aeee:	21 95       	neg	r18
    aef0:	3f 4f       	sbci	r19, 0xFF	; 255
    aef2:	4f 4f       	sbci	r20, 0xFF	; 255
    aef4:	5f 4f       	sbci	r21, 0xFF	; 255

0000aef6 <__divmodsi4_exit>:
    aef6:	08 95       	ret

0000aef8 <__divmodsi4_neg1>:
    aef8:	f6 f7       	brtc	.-4      	; 0xaef6 <__divmodsi4_exit>
    aefa:	90 95       	com	r25
    aefc:	80 95       	com	r24
    aefe:	70 95       	com	r23
    af00:	61 95       	neg	r22
    af02:	7f 4f       	sbci	r23, 0xFF	; 255
    af04:	8f 4f       	sbci	r24, 0xFF	; 255
    af06:	9f 4f       	sbci	r25, 0xFF	; 255
    af08:	08 95       	ret

0000af0a <__udivmodsi4>:
    af0a:	a1 e2       	ldi	r26, 0x21	; 33
    af0c:	1a 2e       	mov	r1, r26
    af0e:	aa 1b       	sub	r26, r26
    af10:	bb 1b       	sub	r27, r27
    af12:	fd 01       	movw	r30, r26
    af14:	0d c0       	rjmp	.+26     	; 0xaf30 <__udivmodsi4_ep>

0000af16 <__udivmodsi4_loop>:
    af16:	aa 1f       	adc	r26, r26
    af18:	bb 1f       	adc	r27, r27
    af1a:	ee 1f       	adc	r30, r30
    af1c:	ff 1f       	adc	r31, r31
    af1e:	a2 17       	cp	r26, r18
    af20:	b3 07       	cpc	r27, r19
    af22:	e4 07       	cpc	r30, r20
    af24:	f5 07       	cpc	r31, r21
    af26:	20 f0       	brcs	.+8      	; 0xaf30 <__udivmodsi4_ep>
    af28:	a2 1b       	sub	r26, r18
    af2a:	b3 0b       	sbc	r27, r19
    af2c:	e4 0b       	sbc	r30, r20
    af2e:	f5 0b       	sbc	r31, r21

0000af30 <__udivmodsi4_ep>:
    af30:	66 1f       	adc	r22, r22
    af32:	77 1f       	adc	r23, r23
    af34:	88 1f       	adc	r24, r24
    af36:	99 1f       	adc	r25, r25
    af38:	1a 94       	dec	r1
    af3a:	69 f7       	brne	.-38     	; 0xaf16 <__udivmodsi4_loop>
    af3c:	60 95       	com	r22
    af3e:	70 95       	com	r23
    af40:	80 95       	com	r24
    af42:	90 95       	com	r25
    af44:	9b 01       	movw	r18, r22
    af46:	ac 01       	movw	r20, r24
    af48:	bd 01       	movw	r22, r26
    af4a:	cf 01       	movw	r24, r30
    af4c:	08 95       	ret

0000af4e <do_rand>:
    af4e:	af 92       	push	r10
    af50:	bf 92       	push	r11
    af52:	cf 92       	push	r12
    af54:	df 92       	push	r13
    af56:	ef 92       	push	r14
    af58:	ff 92       	push	r15
    af5a:	0f 93       	push	r16
    af5c:	1f 93       	push	r17
    af5e:	cf 93       	push	r28
    af60:	df 93       	push	r29
    af62:	ec 01       	movw	r28, r24
    af64:	68 81       	ld	r22, Y
    af66:	79 81       	ldd	r23, Y+1	; 0x01
    af68:	8a 81       	ldd	r24, Y+2	; 0x02
    af6a:	9b 81       	ldd	r25, Y+3	; 0x03
    af6c:	61 15       	cp	r22, r1
    af6e:	71 05       	cpc	r23, r1
    af70:	81 05       	cpc	r24, r1
    af72:	91 05       	cpc	r25, r1
    af74:	21 f4       	brne	.+8      	; 0xaf7e <do_rand+0x30>
    af76:	64 e2       	ldi	r22, 0x24	; 36
    af78:	79 ed       	ldi	r23, 0xD9	; 217
    af7a:	8b e5       	ldi	r24, 0x5B	; 91
    af7c:	97 e0       	ldi	r25, 0x07	; 7
    af7e:	2d e1       	ldi	r18, 0x1D	; 29
    af80:	33 ef       	ldi	r19, 0xF3	; 243
    af82:	41 e0       	ldi	r20, 0x01	; 1
    af84:	50 e0       	ldi	r21, 0x00	; 0
    af86:	0e 94 6a 57 	call	0xaed4	; 0xaed4 <__divmodsi4>
    af8a:	79 01       	movw	r14, r18
    af8c:	8a 01       	movw	r16, r20
    af8e:	27 ea       	ldi	r18, 0xA7	; 167
    af90:	31 e4       	ldi	r19, 0x41	; 65
    af92:	40 e0       	ldi	r20, 0x00	; 0
    af94:	50 e0       	ldi	r21, 0x00	; 0
    af96:	0e 94 24 57 	call	0xae48	; 0xae48 <__mulsi3>
    af9a:	5b 01       	movw	r10, r22
    af9c:	6c 01       	movw	r12, r24
    af9e:	c8 01       	movw	r24, r16
    afa0:	b7 01       	movw	r22, r14
    afa2:	2c ee       	ldi	r18, 0xEC	; 236
    afa4:	34 ef       	ldi	r19, 0xF4	; 244
    afa6:	4f ef       	ldi	r20, 0xFF	; 255
    afa8:	5f ef       	ldi	r21, 0xFF	; 255
    afaa:	0e 94 24 57 	call	0xae48	; 0xae48 <__mulsi3>
    afae:	6a 0d       	add	r22, r10
    afb0:	7b 1d       	adc	r23, r11
    afb2:	8c 1d       	adc	r24, r12
    afb4:	9d 1d       	adc	r25, r13
    afb6:	97 ff       	sbrs	r25, 7
    afb8:	04 c0       	rjmp	.+8      	; 0xafc2 <do_rand+0x74>
    afba:	61 50       	subi	r22, 0x01	; 1
    afbc:	70 40       	sbci	r23, 0x00	; 0
    afbe:	80 40       	sbci	r24, 0x00	; 0
    afc0:	90 48       	sbci	r25, 0x80	; 128
    afc2:	68 83       	st	Y, r22
    afc4:	79 83       	std	Y+1, r23	; 0x01
    afc6:	8a 83       	std	Y+2, r24	; 0x02
    afc8:	9b 83       	std	Y+3, r25	; 0x03
    afca:	7f 77       	andi	r23, 0x7F	; 127
    afcc:	cb 01       	movw	r24, r22
    afce:	df 91       	pop	r29
    afd0:	cf 91       	pop	r28
    afd2:	1f 91       	pop	r17
    afd4:	0f 91       	pop	r16
    afd6:	ff 90       	pop	r15
    afd8:	ef 90       	pop	r14
    afda:	df 90       	pop	r13
    afdc:	cf 90       	pop	r12
    afde:	bf 90       	pop	r11
    afe0:	af 90       	pop	r10
    afe2:	08 95       	ret

0000afe4 <rand_r>:
    afe4:	0e 94 a7 57 	call	0xaf4e	; 0xaf4e <do_rand>
    afe8:	08 95       	ret

0000afea <rand>:
    afea:	8a e2       	ldi	r24, 0x2A	; 42
    afec:	92 e0       	ldi	r25, 0x02	; 2
    afee:	0e 94 a7 57 	call	0xaf4e	; 0xaf4e <do_rand>
    aff2:	08 95       	ret

0000aff4 <srand>:
    aff4:	a0 e0       	ldi	r26, 0x00	; 0
    aff6:	b0 e0       	ldi	r27, 0x00	; 0
    aff8:	80 93 2a 02 	sts	0x022A, r24
    affc:	90 93 2b 02 	sts	0x022B, r25
    b000:	a0 93 2c 02 	sts	0x022C, r26
    b004:	b0 93 2d 02 	sts	0x022D, r27
    b008:	08 95       	ret

0000b00a <memset>:
    b00a:	dc 01       	movw	r26, r24
    b00c:	01 c0       	rjmp	.+2      	; 0xb010 <memset+0x6>
    b00e:	6d 93       	st	X+, r22
    b010:	41 50       	subi	r20, 0x01	; 1
    b012:	50 40       	sbci	r21, 0x00	; 0
    b014:	e0 f7       	brcc	.-8      	; 0xb00e <memset+0x4>
    b016:	08 95       	ret

0000b018 <__eerd_block_m2560>:
    b018:	dc 01       	movw	r26, r24
    b01a:	cb 01       	movw	r24, r22

0000b01c <__eerd_blraw_m2560>:
    b01c:	fc 01       	movw	r30, r24
    b01e:	f9 99       	sbic	0x1f, 1	; 31
    b020:	fe cf       	rjmp	.-4      	; 0xb01e <__eerd_blraw_m2560+0x2>
    b022:	06 c0       	rjmp	.+12     	; 0xb030 <__eerd_blraw_m2560+0x14>
    b024:	f2 bd       	out	0x22, r31	; 34
    b026:	e1 bd       	out	0x21, r30	; 33
    b028:	f8 9a       	sbi	0x1f, 0	; 31
    b02a:	31 96       	adiw	r30, 0x01	; 1
    b02c:	00 b4       	in	r0, 0x20	; 32
    b02e:	0d 92       	st	X+, r0
    b030:	41 50       	subi	r20, 0x01	; 1
    b032:	50 40       	sbci	r21, 0x00	; 0
    b034:	b8 f7       	brcc	.-18     	; 0xb024 <__eerd_blraw_m2560+0x8>
    b036:	08 95       	ret

0000b038 <__eerd_byte_m2560>:
    b038:	f9 99       	sbic	0x1f, 1	; 31
    b03a:	fe cf       	rjmp	.-4      	; 0xb038 <__eerd_byte_m2560>
    b03c:	92 bd       	out	0x22, r25	; 34
    b03e:	81 bd       	out	0x21, r24	; 33
    b040:	f8 9a       	sbi	0x1f, 0	; 31
    b042:	99 27       	eor	r25, r25
    b044:	80 b5       	in	r24, 0x20	; 32
    b046:	08 95       	ret

0000b048 <__eerd_word_m2560>:
    b048:	a8 e1       	ldi	r26, 0x18	; 24
    b04a:	b0 e0       	ldi	r27, 0x00	; 0
    b04c:	42 e0       	ldi	r20, 0x02	; 2
    b04e:	50 e0       	ldi	r21, 0x00	; 0
    b050:	0c 94 0e 58 	jmp	0xb01c	; 0xb01c <__eerd_blraw_m2560>

0000b054 <__eeupd_block_m2560>:
    b054:	dc 01       	movw	r26, r24
    b056:	a4 0f       	add	r26, r20
    b058:	b5 1f       	adc	r27, r21
    b05a:	41 50       	subi	r20, 0x01	; 1
    b05c:	50 40       	sbci	r21, 0x00	; 0
    b05e:	48 f0       	brcs	.+18     	; 0xb072 <__eeupd_block_m2560+0x1e>
    b060:	cb 01       	movw	r24, r22
    b062:	84 0f       	add	r24, r20
    b064:	95 1f       	adc	r25, r21
    b066:	2e 91       	ld	r18, -X
    b068:	0e 94 3b 58 	call	0xb076	; 0xb076 <__eeupd_r18_m2560>
    b06c:	41 50       	subi	r20, 0x01	; 1
    b06e:	50 40       	sbci	r21, 0x00	; 0
    b070:	d0 f7       	brcc	.-12     	; 0xb066 <__eeupd_block_m2560+0x12>
    b072:	08 95       	ret

0000b074 <__eeupd_byte_m2560>:
    b074:	26 2f       	mov	r18, r22

0000b076 <__eeupd_r18_m2560>:
    b076:	f9 99       	sbic	0x1f, 1	; 31
    b078:	fe cf       	rjmp	.-4      	; 0xb076 <__eeupd_r18_m2560>
    b07a:	92 bd       	out	0x22, r25	; 34
    b07c:	81 bd       	out	0x21, r24	; 33
    b07e:	f8 9a       	sbi	0x1f, 0	; 31
    b080:	01 97       	sbiw	r24, 0x01	; 1
    b082:	00 b4       	in	r0, 0x20	; 32
    b084:	02 16       	cp	r0, r18
    b086:	39 f0       	breq	.+14     	; 0xb096 <__eeupd_r18_m2560+0x20>
    b088:	1f ba       	out	0x1f, r1	; 31
    b08a:	20 bd       	out	0x20, r18	; 32
    b08c:	0f b6       	in	r0, 0x3f	; 63
    b08e:	f8 94       	cli
    b090:	fa 9a       	sbi	0x1f, 2	; 31
    b092:	f9 9a       	sbi	0x1f, 1	; 31
    b094:	0f be       	out	0x3f, r0	; 63
    b096:	08 95       	ret

0000b098 <__eeupd_word_m2560>:
    b098:	01 96       	adiw	r24, 0x01	; 1
    b09a:	27 2f       	mov	r18, r23
    b09c:	0e 94 3b 58 	call	0xb076	; 0xb076 <__eeupd_r18_m2560>
    b0a0:	0c 94 3a 58 	jmp	0xb074	; 0xb074 <__eeupd_byte_m2560>

0000b0a4 <__eewr_byte_m2560>:
    b0a4:	26 2f       	mov	r18, r22

0000b0a6 <__eewr_r18_m2560>:
    b0a6:	f9 99       	sbic	0x1f, 1	; 31
    b0a8:	fe cf       	rjmp	.-4      	; 0xb0a6 <__eewr_r18_m2560>
    b0aa:	1f ba       	out	0x1f, r1	; 31
    b0ac:	92 bd       	out	0x22, r25	; 34
    b0ae:	81 bd       	out	0x21, r24	; 33
    b0b0:	20 bd       	out	0x20, r18	; 32
    b0b2:	0f b6       	in	r0, 0x3f	; 63
    b0b4:	f8 94       	cli
    b0b6:	fa 9a       	sbi	0x1f, 2	; 31
    b0b8:	f9 9a       	sbi	0x1f, 1	; 31
    b0ba:	0f be       	out	0x3f, r0	; 63
    b0bc:	01 96       	adiw	r24, 0x01	; 1
    b0be:	08 95       	ret

0000b0c0 <__eewr_word_m2560>:
    b0c0:	0e 94 52 58 	call	0xb0a4	; 0xb0a4 <__eewr_byte_m2560>
    b0c4:	27 2f       	mov	r18, r23
    b0c6:	0c 94 53 58 	jmp	0xb0a6	; 0xb0a6 <__eewr_r18_m2560>

0000b0ca <_exit>:
    b0ca:	ff cf       	rjmp	.-2      	; 0xb0ca <_exit>
