
Elisa3-avr-studio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800200  0000942c  000094c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000942c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000067d  0080021c  0080021c  000094dc  2**0
                  ALLOC
  3 .stab         00003780  00000000  00000000  000094dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f1b  00000000  00000000  0000cc5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000218  00000000  00000000  0000db77  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00001e21  00000000  00000000  0000dd8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000055b3  00000000  00000000  0000fbb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001136  00000000  00000000  00015163  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00006d0f  00000000  00000000  00016299  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000800  00000000  00000000  0001cfa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001686  00000000  00000000  0001d7a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002481  00000000  00000000  0001ee2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000278  00000000  00000000  000212af  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000128  00000000  00000000  00021527  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__ctors_end>
       4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
       8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
       c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      10:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      14:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      18:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      1c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      20:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      24:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      28:	0c 94 75 15 	jmp	0x2aea	; 0x2aea <__vector_10>
      2c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      30:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      34:	0c 94 a9 15 	jmp	0x2b52	; 0x2b52 <__vector_13>
      38:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      3c:	0c 94 61 21 	jmp	0x42c2	; 0x42c2 <__vector_15>
      40:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      44:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      48:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      4c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      50:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      54:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      58:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      5c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      60:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      64:	0c 94 25 20 	jmp	0x404a	; 0x404a <__vector_25>
      68:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      6c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      70:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      74:	0c 94 33 22 	jmp	0x4466	; 0x4466 <__vector_29>
      78:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      7c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      80:	0c 94 0b 3b 	jmp	0x7616	; 0x7616 <__vector_32>
      84:	0c 94 21 3b 	jmp	0x7642	; 0x7642 <__vector_33>
      88:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      8c:	0c 94 7e 3a 	jmp	0x74fc	; 0x74fc <__vector_35>
      90:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      94:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      98:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      9c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      a0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      a4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      a8:	0c 94 52 3a 	jmp	0x74a4	; 0x74a4 <__vector_42>
      ac:	0c 94 68 3a 	jmp	0x74d0	; 0x74d0 <__vector_43>
      b0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      b4:	0c 94 bb 39 	jmp	0x7376	; 0x7376 <__vector_45>
      b8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      bc:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      c0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      c4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      c8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      cc:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      d0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      d4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      d8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      dc:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      e0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      e4:	86 18       	sub	r8, r6
      e6:	6a 18       	sub	r6, r10
      e8:	38 18       	sub	r3, r8
      ea:	23 18       	sub	r2, r3
      ec:	fa 17       	cp	r31, r26
      ee:	e8 17       	cp	r30, r24
      f0:	bf 17       	cp	r27, r31
      f2:	a3 17       	cp	r26, r19
      f4:	6a 17       	cp	r22, r26
      f6:	52 17       	cp	r21, r18
      f8:	eb 16       	cp	r14, r27
      fa:	eb 16       	cp	r14, r27
      fc:	eb 16       	cp	r14, r27
      fe:	eb 16       	cp	r14, r27
     100:	eb 16       	cp	r14, r27
     102:	eb 16       	cp	r14, r27
     104:	97 17       	cp	r25, r23
     106:	47 17       	cp	r20, r23
     108:	eb 16       	cp	r14, r27
     10a:	eb 16       	cp	r14, r27
     10c:	eb 16       	cp	r14, r27
     10e:	eb 16       	cp	r14, r27
     110:	eb 16       	cp	r14, r27
     112:	eb 16       	cp	r14, r27
     114:	eb 16       	cp	r14, r27
     116:	eb 16       	cp	r14, r27
     118:	eb 16       	cp	r14, r27
     11a:	eb 16       	cp	r14, r27
     11c:	eb 16       	cp	r14, r27
     11e:	eb 16       	cp	r14, r27
     120:	6a 17       	cp	r22, r26
     122:	38 18       	sub	r3, r8
     124:	1f 17       	cp	r17, r31
     126:	12 17       	cp	r17, r18
     128:	eb 16       	cp	r14, r27
     12a:	eb 16       	cp	r14, r27
     12c:	eb 16       	cp	r14, r27
     12e:	eb 16       	cp	r14, r27
     130:	eb 16       	cp	r14, r27
     132:	eb 16       	cp	r14, r27
     134:	eb 16       	cp	r14, r27
     136:	eb 16       	cp	r14, r27
     138:	eb 16       	cp	r14, r27
     13a:	eb 16       	cp	r14, r27
     13c:	eb 16       	cp	r14, r27
     13e:	eb 16       	cp	r14, r27
     140:	fa 17       	cp	r31, r26
     142:	bf 17       	cp	r27, r31
     144:	eb 16       	cp	r14, r27
     146:	eb 16       	cp	r14, r27
     148:	86 18       	sub	r8, r6
     14a:	e8 17       	cp	r30, r24
     14c:	2b 17       	cp	r18, r27
     14e:	08 4a       	sbci	r16, 0xA8	; 168
     150:	d7 3b       	cpi	r29, 0xB7	; 183
     152:	3b ce       	rjmp	.-906    	; 0xfffffdca <__eeprom_end+0xff7efdca>
     154:	01 6e       	ori	r16, 0xE1	; 225
     156:	84 bc       	out	0x24, r8	; 36
     158:	bf fd       	.word	0xfdbf	; ????
     15a:	c1 2f       	mov	r28, r17
     15c:	3d 6c       	ori	r19, 0xCD	; 205
     15e:	74 31       	cpi	r23, 0x14	; 20
     160:	9a bd       	out	0x2a, r25	; 42
     162:	56 83       	std	Z+6, r21	; 0x06
     164:	3d da       	rcall	.-2950   	; 0xfffff5e0 <__eeprom_end+0xff7ef5e0>
     166:	3d 00       	.word	0x003d	; ????
     168:	c7 7f       	andi	r28, 0xF7	; 247
     16a:	11 be       	out	0x31, r1	; 49
     16c:	d9 e4       	ldi	r29, 0x49	; 73
     16e:	bb 4c       	sbci	r27, 0xCB	; 203
     170:	3e 91       	ld	r19, -X
     172:	6b aa       	std	Y+51, r6	; 0x33
     174:	aa be       	out	0x3a, r10	; 58
     176:	00 00       	nop
     178:	00 80       	ld	r0, Z
     17a:	3f 05       	cpc	r19, r15
     17c:	a8 4c       	sbci	r26, 0xC8	; 200
     17e:	cd b2       	in	r12, 0x1d	; 29
     180:	d4 4e       	sbci	r29, 0xE4	; 228
     182:	b9 38       	cpi	r27, 0x89	; 137
     184:	36 a9       	ldd	r19, Z+54	; 0x36
     186:	02 0c       	add	r0, r2
     188:	50 b9       	out	0x00, r21	; 0
     18a:	91 86       	std	Z+9, r9	; 0x09
     18c:	88 08       	sbc	r8, r8
     18e:	3c a6       	std	Y+44, r3	; 0x2c
     190:	aa aa       	std	Y+50, r10	; 0x32
     192:	2a be       	out	0x3a, r2	; 58
     194:	00 00       	nop
     196:	00 80       	ld	r0, Z
     198:	3f 00       	.word	0x003f	; ????

0000019a <__ctors_end>:
     19a:	11 24       	eor	r1, r1
     19c:	1f be       	out	0x3f, r1	; 63
     19e:	cf ef       	ldi	r28, 0xFF	; 255
     1a0:	d1 e2       	ldi	r29, 0x21	; 33
     1a2:	de bf       	out	0x3e, r29	; 62
     1a4:	cd bf       	out	0x3d, r28	; 61
     1a6:	00 e0       	ldi	r16, 0x00	; 0
     1a8:	0c bf       	out	0x3c, r16	; 60

000001aa <__do_copy_data>:
     1aa:	12 e0       	ldi	r17, 0x02	; 2
     1ac:	a0 e0       	ldi	r26, 0x00	; 0
     1ae:	b2 e0       	ldi	r27, 0x02	; 2
     1b0:	ec e2       	ldi	r30, 0x2C	; 44
     1b2:	f4 e9       	ldi	r31, 0x94	; 148
     1b4:	02 c0       	rjmp	.+4      	; 0x1ba <.do_copy_data_start>

000001b6 <.do_copy_data_loop>:
     1b6:	05 90       	lpm	r0, Z+
     1b8:	0d 92       	st	X+, r0

000001ba <.do_copy_data_start>:
     1ba:	ac 31       	cpi	r26, 0x1C	; 28
     1bc:	b1 07       	cpc	r27, r17
     1be:	d9 f7       	brne	.-10     	; 0x1b6 <.do_copy_data_loop>

000001c0 <__do_clear_bss>:
     1c0:	18 e0       	ldi	r17, 0x08	; 8
     1c2:	ac e1       	ldi	r26, 0x1C	; 28
     1c4:	b2 e0       	ldi	r27, 0x02	; 2
     1c6:	01 c0       	rjmp	.+2      	; 0x1ca <.do_clear_bss_start>

000001c8 <.do_clear_bss_loop>:
     1c8:	1d 92       	st	X+, r1

000001ca <.do_clear_bss_start>:
     1ca:	a9 39       	cpi	r26, 0x99	; 153
     1cc:	b1 07       	cpc	r27, r17
     1ce:	e1 f7       	brne	.-8      	; 0x1c8 <.do_clear_bss_loop>
     1d0:	0e 94 ee 00 	call	0x1dc	; 0x1dc <main>
     1d4:	0c 94 15 4a 	jmp	0x942a	; 0x942a <_exit>

000001d8 <__bad_interrupt>:
     1d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001dc <main>:
#include "nRF24L01.h"
#include "behaviors.h"
#include "sensors.h"


int main(void) {
     1dc:	2f 92       	push	r2
     1de:	3f 92       	push	r3
     1e0:	4f 92       	push	r4
     1e2:	5f 92       	push	r5
     1e4:	6f 92       	push	r6
     1e6:	7f 92       	push	r7
     1e8:	8f 92       	push	r8
     1ea:	9f 92       	push	r9
     1ec:	af 92       	push	r10
     1ee:	bf 92       	push	r11
     1f0:	cf 92       	push	r12
     1f2:	df 92       	push	r13
     1f4:	ef 92       	push	r14
     1f6:	ff 92       	push	r15
     1f8:	0f 93       	push	r16
     1fa:	1f 93       	push	r17
     1fc:	df 93       	push	r29
     1fe:	cf 93       	push	r28
     200:	00 d0       	rcall	.+0      	; 0x202 <main+0x26>
     202:	0f 92       	push	r0
     204:	cd b7       	in	r28, 0x3d	; 61
     206:	de b7       	in	r29, 0x3e	; 62
	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
	unsigned char prevSelector=0;
	unsigned int i=0;
	unsigned int currRand=0, currRand2=0;

	initPeripherals();
     208:	0e 94 00 21 	call	0x4200	; 0x4200 <initPeripherals>

	calibrateSensors();
     20c:	0e 94 bd 40 	call	0x817a	; 0x817a <calibrateSensors>

	initBehaviors();
     210:	0e 94 37 3b 	call	0x766e	; 0x766e <initBehaviors>

	startTime = getTime100MicroSec();
     214:	0e 94 d7 21 	call	0x43ae	; 0x43ae <getTime100MicroSec>
     218:	6b 01       	movw	r12, r22
     21a:	7c 01       	movw	r14, r24

	speedStepCounter = getTime100MicroSec();
     21c:	0e 94 d7 21 	call	0x43ae	; 0x43ae <getTime100MicroSec>
     220:	9b 01       	movw	r18, r22
     222:	ac 01       	movw	r20, r24
     224:	60 93 2e 04 	sts	0x042E, r22
     228:	30 93 2f 04 	sts	0x042F, r19
     22c:	40 93 30 04 	sts	0x0430, r20
     230:	50 93 31 04 	sts	0x0431, r21
     234:	10 92 32 04 	sts	0x0432, r1
     238:	10 92 33 04 	sts	0x0433, r1
     23c:	10 92 34 04 	sts	0x0434, r1
     240:	10 92 35 04 	sts	0x0435, r1
int main(void) {

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
	unsigned char prevSelector=0;
	unsigned int i=0;
	unsigned int currRand=0, currRand2=0;
     244:	88 24       	eor	r8, r8
     246:	99 24       	eor	r9, r9


int main(void) {

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
	unsigned char prevSelector=0;
     248:	00 e0       	ldi	r16, 0x00	; 0
#include "sensors.h"


int main(void) {

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
     24a:	19 82       	std	Y+1, r1	; 0x01
     24c:	1a 82       	std	Y+2, r1	; 0x02
     24e:	1b 82       	std	Y+3, r1	; 0x03
     250:	1c 82       	std	Y+4, r1	; 0x04
		computeAngle();

		// turn off the rgb leds after one half second in the "charger demo"
		if(currentSelector==7) {
			if((getTime100MicroSec()-turnOffLedsTime) > PAUSE_500_MSEC) {
				pwm_red = 255;
     252:	1f ef       	ldi	r17, 0xFF	; 255
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption

				switch(rgbState) {
					case 0:
						pwm_red = 255 - currRand;	
						rgbState = 1;
     254:	22 24       	eor	r2, r2
     256:	23 94       	inc	r2
	eeprom_update_block(calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
*/

	while(1) {

		currentSelector = getSelector();	// update selector position
     258:	0e 94 db 20 	call	0x41b6	; 0x41b6 <getSelector>
     25c:	80 93 1a 04 	sts	0x041A, r24

		readAccelXYZ();						// update accelerometer values to compute the angle
     260:	0e 94 fd 3f 	call	0x7ffa	; 0x7ffa <readAccelXYZ>

		computeAngle();
     264:	0e 94 39 45 	call	0x8a72	; 0x8a72 <computeAngle>

		// turn off the rgb leds after one half second in the "charger demo"
		if(currentSelector==7) {
     268:	80 91 1a 04 	lds	r24, 0x041A
     26c:	87 30       	cpi	r24, 0x07	; 7
     26e:	09 f4       	brne	.+2      	; 0x272 <main+0x96>
     270:	d5 c1       	rjmp	.+938    	; 0x61c <main+0x440>
				pwm_green = 255;
				pwm_blue = 255;			
			}
		}

		endTime = getTime100MicroSec();
     272:	0e 94 d7 21 	call	0x43ae	; 0x43ae <getTime100MicroSec>
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
     276:	6c 19       	sub	r22, r12
     278:	7d 09       	sbc	r23, r13
     27a:	8e 09       	sbc	r24, r14
     27c:	9f 09       	sbc	r25, r15
     27e:	6e 31       	cpi	r22, 0x1E	; 30
     280:	4b e4       	ldi	r20, 0x4B	; 75
     282:	74 07       	cpc	r23, r20
     284:	40 e0       	ldi	r20, 0x00	; 0
     286:	84 07       	cpc	r24, r20
     288:	40 e0       	ldi	r20, 0x00	; 0
     28a:	94 07       	cpc	r25, r20
     28c:	08 f0       	brcs	.+2      	; 0x290 <main+0xb4>
     28e:	b2 c1       	rjmp	.+868    	; 0x5f4 <main+0x418>
			startTime = getTime100MicroSec();
		}

		
		//if(calibrateOdomFlag==0) {
			handleIRRemoteCommands();
     290:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <handleIRRemoteCommands>
		//}


		//if(calibrateOdomFlag==0) {
			handleRFCommands();
     294:	0e 94 c1 11 	call	0x2382	; 0x2382 <handleRFCommands>
		//}


		if(calibrateOdomFlag==0) {
     298:	80 91 e0 04 	lds	r24, 0x04E0
     29c:	88 23       	and	r24, r24
     29e:	09 f4       	brne	.+2      	; 0x2a2 <main+0xc6>
     2a0:	92 c0       	rjmp	.+292    	; 0x3c6 <main+0x1ea>

		//if(currentSelector!=6 && currentSelector!=15) {
		//	usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		//}

		switch(currentSelector) {
     2a2:	80 91 1a 04 	lds	r24, 0x041A
     2a6:	86 30       	cpi	r24, 0x06	; 6
     2a8:	09 f4       	brne	.+2      	; 0x2ac <main+0xd0>
     2aa:	7e c1       	rjmp	.+764    	; 0x5a8 <main+0x3cc>
     2ac:	87 30       	cpi	r24, 0x07	; 7
     2ae:	08 f0       	brcs	.+2      	; 0x2b2 <main+0xd6>
     2b0:	60 c0       	rjmp	.+192    	; 0x372 <main+0x196>
     2b2:	82 30       	cpi	r24, 0x02	; 2
     2b4:	09 f4       	brne	.+2      	; 0x2b8 <main+0xdc>
     2b6:	ce c1       	rjmp	.+924    	; 0x654 <main+0x478>
     2b8:	83 30       	cpi	r24, 0x03	; 3
     2ba:	08 f0       	brcs	.+2      	; 0x2be <main+0xe2>
     2bc:	d0 c1       	rjmp	.+928    	; 0x65e <main+0x482>
     2be:	88 23       	and	r24, r24
     2c0:	09 f4       	brne	.+2      	; 0x2c4 <main+0xe8>
     2c2:	cc c2       	rjmp	.+1432   	; 0x85c <main+0x680>
     2c4:	81 30       	cpi	r24, 0x01	; 1
     2c6:	21 f4       	brne	.+8      	; 0x2d0 <main+0xf4>
					handleMotorsWithNoController();
					break;
             
			case 1:	// obstacle avoidance enabled (the robot does not move untill commands are 
					// received from the radio or tv remote)
             		enableObstacleAvoidance();
     2c8:	0e 94 7a 3d 	call	0x7af4	; 0x7af4 <enableObstacleAvoidance>
     2cc:	80 91 1a 04 	lds	r24, 0x041A
					//usart0Transmit(currentOsccal,1);
					break;

		}

		if(currentSelector!=0) {
     2d0:	88 23       	and	r24, r24
     2d2:	09 f0       	breq	.+2      	; 0x2d6 <main+0xfa>
     2d4:	73 c0       	rjmp	.+230    	; 0x3bc <main+0x1e0>
     2d6:	80 e0       	ldi	r24, 0x00	; 0
			handleMotorsWithSpeedController();  
		}

		if(prevSelector != currentSelector) {	// in case the selector is changed, reset the robot state
     2d8:	08 17       	cp	r16, r24
     2da:	09 f4       	brne	.+2      	; 0x2de <main+0x102>
     2dc:	bd cf       	rjmp	.-134    	; 0x258 <main+0x7c>
			disableObstacleAvoidance();
     2de:	0e 94 7e 3d 	call	0x7afc	; 0x7afc <disableObstacleAvoidance>
			disableCliffAvoidance();
     2e2:	0e 94 85 3d 	call	0x7b0a	; 0x7b0a <disableCliffAvoidance>
			GREEN_LED0_OFF;
     2e6:	80 91 0b 01 	lds	r24, 0x010B
     2ea:	81 60       	ori	r24, 0x01	; 1
     2ec:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED1_OFF;
     2f0:	80 91 0b 01 	lds	r24, 0x010B
     2f4:	82 60       	ori	r24, 0x02	; 2
     2f6:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED2_OFF;
     2fa:	80 91 0b 01 	lds	r24, 0x010B
     2fe:	84 60       	ori	r24, 0x04	; 4
     300:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED3_OFF;
     304:	a3 9a       	sbi	0x14, 3	; 20
			GREEN_LED4_OFF;
     306:	80 91 0b 01 	lds	r24, 0x010B
     30a:	80 61       	ori	r24, 0x10	; 16
     30c:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED5_OFF;
     310:	80 91 0b 01 	lds	r24, 0x010B
     314:	80 62       	ori	r24, 0x20	; 32
     316:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED6_OFF;
     31a:	80 91 0b 01 	lds	r24, 0x010B
     31e:	80 64       	ori	r24, 0x40	; 64
     320:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED7_OFF;
     324:	80 91 0b 01 	lds	r24, 0x010B
     328:	80 68       	ori	r24, 0x80	; 128
     32a:	80 93 0b 01 	sts	0x010B, r24
			pwm_red = 255;
     32e:	10 93 0c 02 	sts	0x020C, r17
			pwm_green = 255;
     332:	10 93 0d 02 	sts	0x020D, r17
			pwm_blue = 255;
     336:	10 93 0e 02 	sts	0x020E, r17
			updateRedLed(pwm_red);
     33a:	8f ef       	ldi	r24, 0xFF	; 255
     33c:	0e 94 c5 3d 	call	0x7b8a	; 0x7b8a <updateRedLed>
			updateGreenLed(pwm_green);
     340:	80 91 0d 02 	lds	r24, 0x020D
     344:	0e 94 d9 3d 	call	0x7bb2	; 0x7bb2 <updateGreenLed>
			updateBlueLed(pwm_blue);
     348:	80 91 0e 02 	lds	r24, 0x020E
     34c:	0e 94 ed 3d 	call	0x7bda	; 0x7bda <updateBlueLed>
			setRightSpeed(0);
     350:	80 e0       	ldi	r24, 0x00	; 0
     352:	0e 94 ac 29 	call	0x5358	; 0x5358 <setRightSpeed>
			setLeftSpeed(0);
     356:	80 e0       	ldi	r24, 0x00	; 0
     358:	0e 94 8f 29 	call	0x531e	; 0x531e <setLeftSpeed>
			rgbState = 0;
     35c:	10 92 ea 02 	sts	0x02EA, r1
			calibrationWritten = 0;
     360:	10 92 37 04 	sts	0x0437, r1
			demoState = 0;
     364:	10 92 1e 04 	sts	0x041E, r1

			irCommState = 0;
     368:	10 92 94 04 	sts	0x0494, r1
     36c:	00 91 1a 04 	lds	r16, 0x041A
     370:	73 cf       	rjmp	.-282    	; 0x258 <main+0x7c>

		//if(currentSelector!=6 && currentSelector!=15) {
		//	usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		//}

		switch(currentSelector) {
     372:	8a 30       	cpi	r24, 0x0A	; 10
     374:	09 f4       	brne	.+2      	; 0x378 <main+0x19c>
     376:	77 c2       	rjmp	.+1262   	; 0x866 <main+0x68a>
     378:	8b 30       	cpi	r24, 0x0B	; 11
     37a:	08 f0       	brcs	.+2      	; 0x37e <main+0x1a2>
     37c:	8c c1       	rjmp	.+792    	; 0x696 <main+0x4ba>
     37e:	88 30       	cpi	r24, 0x08	; 8
     380:	09 f4       	brne	.+2      	; 0x384 <main+0x1a8>
     382:	2e c2       	rjmp	.+1116   	; 0x7e0 <main+0x604>
     384:	89 30       	cpi	r24, 0x09	; 9
     386:	08 f4       	brcc	.+2      	; 0x38a <main+0x1ae>
     388:	de c1       	rjmp	.+956    	; 0x746 <main+0x56a>
					break;

			case 9:	// write default calibration values; wait 2 seconds before start writing the calibration values
					// in eeprom in order to avoid rewriting the data involuntarily when moving the selector and passing 
					// through selector position 9
					switch(demoState) {
     38a:	80 91 1e 04 	lds	r24, 0x041E
     38e:	81 30       	cpi	r24, 0x01	; 1
     390:	09 f4       	brne	.+2      	; 0x394 <main+0x1b8>
     392:	6f c7       	rjmp	.+3806   	; 0x1272 <main+0x1096>
     394:	81 30       	cpi	r24, 0x01	; 1
     396:	08 f0       	brcs	.+2      	; 0x39a <main+0x1be>
     398:	c7 c3       	rjmp	.+1934   	; 0xb28 <main+0x94c>
						case 0:
							demoStartTime = getTime100MicroSec();
     39a:	0e 94 d7 21 	call	0x43ae	; 0x43ae <getTime100MicroSec>
     39e:	60 93 22 04 	sts	0x0422, r22
     3a2:	70 93 23 04 	sts	0x0423, r23
     3a6:	80 93 24 04 	sts	0x0424, r24
     3aa:	90 93 25 04 	sts	0x0425, r25
							demoState = 1;
     3ae:	20 92 1e 04 	sts	0x041E, r2
     3b2:	80 91 1a 04 	lds	r24, 0x041A
					//usart0Transmit(currentOsccal,1);
					break;

		}

		if(currentSelector!=0) {
     3b6:	88 23       	and	r24, r24
     3b8:	09 f4       	brne	.+2      	; 0x3bc <main+0x1e0>
     3ba:	8d cf       	rjmp	.-230    	; 0x2d6 <main+0xfa>
			handleMotorsWithSpeedController();  
     3bc:	0e 94 09 35 	call	0x6a12	; 0x6a12 <handleMotorsWithSpeedController>
     3c0:	80 91 1a 04 	lds	r24, 0x041A
     3c4:	89 cf       	rjmp	.-238    	; 0x2d8 <main+0xfc>
			handleRFCommands();
		//}


		if(calibrateOdomFlag==0) {
			if((getTime100MicroSec()-speedStepCounter) >= SPEED_STEP_DELAY) {
     3c6:	0e 94 d7 21 	call	0x43ae	; 0x43ae <getTime100MicroSec>
     3ca:	9b 01       	movw	r18, r22
     3cc:	ac 01       	movw	r20, r24
     3ce:	60 e0       	ldi	r22, 0x00	; 0
     3d0:	70 e0       	ldi	r23, 0x00	; 0
     3d2:	cb 01       	movw	r24, r22
     3d4:	f0 91 2e 04 	lds	r31, 0x042E
     3d8:	e0 91 2f 04 	lds	r30, 0x042F
     3dc:	a0 90 30 04 	lds	r10, 0x0430
     3e0:	40 90 31 04 	lds	r4, 0x0431
     3e4:	30 90 32 04 	lds	r3, 0x0432
     3e8:	50 90 33 04 	lds	r5, 0x0433
     3ec:	60 90 34 04 	lds	r6, 0x0434
     3f0:	70 90 35 04 	lds	r7, 0x0435
     3f4:	b2 2f       	mov	r27, r18
     3f6:	bf 1b       	sub	r27, r31
     3f8:	a1 e0       	ldi	r26, 0x01	; 1
     3fa:	2b 17       	cp	r18, r27
     3fc:	08 f0       	brcs	.+2      	; 0x400 <main+0x224>
     3fe:	a0 e0       	ldi	r26, 0x00	; 0
     400:	f3 2f       	mov	r31, r19
     402:	fe 1b       	sub	r31, r30
     404:	ef 2f       	mov	r30, r31
     406:	f1 e0       	ldi	r31, 0x01	; 1
     408:	3e 17       	cp	r19, r30
     40a:	08 f0       	brcs	.+2      	; 0x40e <main+0x232>
     40c:	f0 e0       	ldi	r31, 0x00	; 0
     40e:	be 2e       	mov	r11, r30
     410:	ba 1a       	sub	r11, r26
     412:	ab 2d       	mov	r26, r11
     414:	bb 24       	eor	r11, r11
     416:	b3 94       	inc	r11
     418:	ea 17       	cp	r30, r26
     41a:	08 f0       	brcs	.+2      	; 0x41e <main+0x242>
     41c:	bb 24       	eor	r11, r11
     41e:	fb 29       	or	r31, r11
     420:	e4 2f       	mov	r30, r20
     422:	ea 19       	sub	r30, r10
     424:	ae 2e       	mov	r10, r30
     426:	e1 e0       	ldi	r30, 0x01	; 1
     428:	4a 15       	cp	r20, r10
     42a:	08 f0       	brcs	.+2      	; 0x42e <main+0x252>
     42c:	e0 e0       	ldi	r30, 0x00	; 0
     42e:	ba 2c       	mov	r11, r10
     430:	bf 1a       	sub	r11, r31
     432:	f1 e0       	ldi	r31, 0x01	; 1
     434:	ab 14       	cp	r10, r11
     436:	08 f0       	brcs	.+2      	; 0x43a <main+0x25e>
     438:	f0 e0       	ldi	r31, 0x00	; 0
     43a:	ef 2b       	or	r30, r31
     43c:	f5 2f       	mov	r31, r21
     43e:	f4 19       	sub	r31, r4
     440:	4f 2e       	mov	r4, r31
     442:	f1 e0       	ldi	r31, 0x01	; 1
     444:	54 15       	cp	r21, r4
     446:	08 f0       	brcs	.+2      	; 0x44a <main+0x26e>
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	a4 2c       	mov	r10, r4
     44c:	ae 1a       	sub	r10, r30
     44e:	e1 e0       	ldi	r30, 0x01	; 1
     450:	4a 14       	cp	r4, r10
     452:	08 f0       	brcs	.+2      	; 0x456 <main+0x27a>
     454:	e0 e0       	ldi	r30, 0x00	; 0
     456:	fe 2b       	or	r31, r30
     458:	31 94       	neg	r3
     45a:	e1 e0       	ldi	r30, 0x01	; 1
     45c:	63 15       	cp	r22, r3
     45e:	08 f0       	brcs	.+2      	; 0x462 <main+0x286>
     460:	e0 e0       	ldi	r30, 0x00	; 0
     462:	43 2c       	mov	r4, r3
     464:	4f 1a       	sub	r4, r31
     466:	f1 e0       	ldi	r31, 0x01	; 1
     468:	34 14       	cp	r3, r4
     46a:	08 f0       	brcs	.+2      	; 0x46e <main+0x292>
     46c:	f0 e0       	ldi	r31, 0x00	; 0
     46e:	ef 2b       	or	r30, r31
     470:	51 94       	neg	r5
     472:	f1 e0       	ldi	r31, 0x01	; 1
     474:	75 15       	cp	r23, r5
     476:	08 f0       	brcs	.+2      	; 0x47a <main+0x29e>
     478:	f0 e0       	ldi	r31, 0x00	; 0
     47a:	35 2c       	mov	r3, r5
     47c:	3e 1a       	sub	r3, r30
     47e:	e1 e0       	ldi	r30, 0x01	; 1
     480:	53 14       	cp	r5, r3
     482:	08 f0       	brcs	.+2      	; 0x486 <main+0x2aa>
     484:	e0 e0       	ldi	r30, 0x00	; 0
     486:	fe 2b       	or	r31, r30
     488:	61 94       	neg	r6
     48a:	e1 e0       	ldi	r30, 0x01	; 1
     48c:	86 15       	cp	r24, r6
     48e:	08 f0       	brcs	.+2      	; 0x492 <main+0x2b6>
     490:	e0 e0       	ldi	r30, 0x00	; 0
     492:	96 2d       	mov	r25, r6
     494:	9f 1b       	sub	r25, r31
     496:	81 e0       	ldi	r24, 0x01	; 1
     498:	69 16       	cp	r6, r25
     49a:	08 f0       	brcs	.+2      	; 0x49e <main+0x2c2>
     49c:	80 e0       	ldi	r24, 0x00	; 0
     49e:	e8 2b       	or	r30, r24
     4a0:	71 94       	neg	r7
     4a2:	7e 16       	cp	r7, r30
     4a4:	91 f4       	brne	.+36     	; 0x4ca <main+0x2ee>
     4a6:	99 23       	and	r25, r25
     4a8:	81 f4       	brne	.+32     	; 0x4ca <main+0x2ee>
     4aa:	33 20       	and	r3, r3
     4ac:	71 f4       	brne	.+28     	; 0x4ca <main+0x2ee>
     4ae:	44 20       	and	r4, r4
     4b0:	61 f4       	brne	.+24     	; 0x4ca <main+0x2ee>
     4b2:	aa 20       	and	r10, r10
     4b4:	51 f4       	brne	.+20     	; 0x4ca <main+0x2ee>
     4b6:	bb 20       	and	r11, r11
     4b8:	41 f4       	brne	.+16     	; 0x4ca <main+0x2ee>
     4ba:	a2 30       	cpi	r26, 0x02	; 2
     4bc:	30 f4       	brcc	.+12     	; 0x4ca <main+0x2ee>
     4be:	a1 30       	cpi	r26, 0x01	; 1
     4c0:	09 f0       	breq	.+2      	; 0x4c4 <main+0x2e8>
     4c2:	ef ce       	rjmp	.-546    	; 0x2a2 <main+0xc6>
     4c4:	b0 39       	cpi	r27, 0x90	; 144
     4c6:	08 f4       	brcc	.+2      	; 0x4ca <main+0x2ee>
     4c8:	ec ce       	rjmp	.-552    	; 0x2a2 <main+0xc6>
				speedStepCounter = getTime100MicroSec();
     4ca:	0e 94 d7 21 	call	0x43ae	; 0x43ae <getTime100MicroSec>
     4ce:	9b 01       	movw	r18, r22
     4d0:	ac 01       	movw	r20, r24
     4d2:	60 93 2e 04 	sts	0x042E, r22
     4d6:	30 93 2f 04 	sts	0x042F, r19
     4da:	40 93 30 04 	sts	0x0430, r20
     4de:	50 93 31 04 	sts	0x0431, r21
     4e2:	10 92 32 04 	sts	0x0432, r1
     4e6:	10 92 33 04 	sts	0x0433, r1
     4ea:	10 92 34 04 	sts	0x0434, r1
     4ee:	10 92 35 04 	sts	0x0435, r1

				if(softAccEnabled) {
     4f2:	80 91 36 04 	lds	r24, 0x0436
     4f6:	88 23       	and	r24, r24
     4f8:	09 f4       	brne	.+2      	; 0x4fc <main+0x320>
     4fa:	73 c2       	rjmp	.+1254   	; 0x9e2 <main+0x806>
					if(pwm_right_desired == 0) {
     4fc:	80 91 c9 02 	lds	r24, 0x02C9
     500:	90 91 ca 02 	lds	r25, 0x02CA
     504:	00 97       	sbiw	r24, 0x00	; 0
     506:	09 f4       	brne	.+2      	; 0x50a <main+0x32e>
     508:	ff c2       	rjmp	.+1534   	; 0xb08 <main+0x92c>
						pwm_intermediate_right_desired = 0;
					} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
     50a:	20 91 cd 02 	lds	r18, 0x02CD
     50e:	30 91 ce 02 	lds	r19, 0x02CE
     512:	28 9f       	mul	r18, r24
     514:	a0 01       	movw	r20, r0
     516:	29 9f       	mul	r18, r25
     518:	50 0d       	add	r21, r0
     51a:	38 9f       	mul	r19, r24
     51c:	50 0d       	add	r21, r0
     51e:	11 24       	eor	r1, r1
     520:	57 fd       	sbrc	r21, 7
     522:	f2 c2       	rjmp	.+1508   	; 0xb08 <main+0x92c>
						pwm_intermediate_right_desired = 0;
					} else if(pwm_right_desired > pwm_intermediate_right_desired) {
     524:	28 17       	cp	r18, r24
     526:	39 07       	cpc	r19, r25
     528:	14 f0       	brlt	.+4      	; 0x52e <main+0x352>
     52a:	0c 94 e1 0b 	jmp	0x17c2	; 0x17c2 <main+0x15e6>
						pwm_intermediate_right_desired += speedStep;
     52e:	40 91 17 02 	lds	r20, 0x0217
     532:	24 0f       	add	r18, r20
     534:	31 1d       	adc	r19, r1
     536:	30 93 ce 02 	sts	0x02CE, r19
     53a:	20 93 cd 02 	sts	0x02CD, r18
						if(pwm_intermediate_right_desired > pwm_right_desired) {
     53e:	82 17       	cp	r24, r18
     540:	93 07       	cpc	r25, r19
     542:	24 f4       	brge	.+8      	; 0x54c <main+0x370>
							pwm_intermediate_right_desired = pwm_right_desired;
						}
					} else if(pwm_right_desired < pwm_intermediate_right_desired) {
						pwm_intermediate_right_desired -= speedStep;
						if(pwm_intermediate_right_desired < pwm_right_desired) {
							pwm_intermediate_right_desired = pwm_right_desired;
     544:	90 93 ce 02 	sts	0x02CE, r25
     548:	80 93 cd 02 	sts	0x02CD, r24
						}					
					}
	
					if(pwm_left_desired == 0) {
     54c:	80 91 cb 02 	lds	r24, 0x02CB
     550:	90 91 cc 02 	lds	r25, 0x02CC
     554:	00 97       	sbiw	r24, 0x00	; 0
     556:	09 f4       	brne	.+2      	; 0x55a <main+0x37e>
     558:	e2 c2       	rjmp	.+1476   	; 0xb1e <main+0x942>
						pwm_intermediate_left_desired = 0;
					} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
     55a:	20 91 cf 02 	lds	r18, 0x02CF
     55e:	30 91 d0 02 	lds	r19, 0x02D0
     562:	28 9f       	mul	r18, r24
     564:	a0 01       	movw	r20, r0
     566:	29 9f       	mul	r18, r25
     568:	50 0d       	add	r21, r0
     56a:	38 9f       	mul	r19, r24
     56c:	50 0d       	add	r21, r0
     56e:	11 24       	eor	r1, r1
     570:	57 fd       	sbrc	r21, 7
     572:	d5 c2       	rjmp	.+1450   	; 0xb1e <main+0x942>
						pwm_intermediate_left_desired = 0;
					} else if(pwm_left_desired > pwm_intermediate_left_desired) {
     574:	28 17       	cp	r18, r24
     576:	39 07       	cpc	r19, r25
     578:	14 f0       	brlt	.+4      	; 0x57e <main+0x3a2>
     57a:	0c 94 f5 0b 	jmp	0x17ea	; 0x17ea <main+0x160e>
						pwm_intermediate_left_desired += speedStep;
     57e:	40 91 17 02 	lds	r20, 0x0217
     582:	24 0f       	add	r18, r20
     584:	31 1d       	adc	r19, r1
     586:	30 93 d0 02 	sts	0x02D0, r19
     58a:	20 93 cf 02 	sts	0x02CF, r18
						if(pwm_intermediate_left_desired > pwm_left_desired) {
     58e:	82 17       	cp	r24, r18
     590:	93 07       	cpc	r25, r19
     592:	0c f0       	brlt	.+2      	; 0x596 <main+0x3ba>
     594:	86 ce       	rjmp	.-756    	; 0x2a2 <main+0xc6>
							pwm_intermediate_left_desired = pwm_left_desired;
						}					
					}
				} else {
					pwm_intermediate_right_desired = pwm_right_desired;
					pwm_intermediate_left_desired = pwm_left_desired;
     596:	90 93 d0 02 	sts	0x02D0, r25
     59a:	80 93 cf 02 	sts	0x02CF, r24

		//if(currentSelector!=6 && currentSelector!=15) {
		//	usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		//}

		switch(currentSelector) {
     59e:	80 91 1a 04 	lds	r24, 0x041A
     5a2:	86 30       	cpi	r24, 0x06	; 6
     5a4:	09 f0       	breq	.+2      	; 0x5a8 <main+0x3cc>
     5a6:	82 ce       	rjmp	.-764    	; 0x2ac <main+0xd0>
					setLeftSpeed(25);
					setRightSpeed(25);
					break;

			case 6:	// robot testing
					switch(menuChoice) {
     5a8:	80 91 f1 03 	lds	r24, 0x03F1
     5ac:	81 30       	cpi	r24, 0x01	; 1
     5ae:	09 f4       	brne	.+2      	; 0x5b2 <main+0x3d6>
     5b0:	06 c4       	rjmp	.+2060   	; 0xdbe <main+0xbe2>
     5b2:	81 30       	cpi	r24, 0x01	; 1
     5b4:	08 f0       	brcs	.+2      	; 0x5b8 <main+0x3dc>
     5b6:	00 c3       	rjmp	.+1536   	; 0xbb8 <main+0x9dc>
						case 0:
							setRightSpeed(0);
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	0e 94 ac 29 	call	0x5358	; 0x5358 <setRightSpeed>
							setLeftSpeed(0);
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	0e 94 8f 29 	call	0x531e	; 0x531e <setLeftSpeed>
							turnOffGreenLeds();
     5c4:	0e 94 9e 3e 	call	0x7d3c	; 0x7d3c <turnOffGreenLeds>
							pwm_red=255;
     5c8:	10 93 0c 02 	sts	0x020C, r17
							pwm_green=255;
     5cc:	10 93 0d 02 	sts	0x020D, r17
							pwm_blue=255;
     5d0:	10 93 0e 02 	sts	0x020E, r17
							updateRedLed(pwm_red);
     5d4:	8f ef       	ldi	r24, 0xFF	; 255
     5d6:	0e 94 c5 3d 	call	0x7b8a	; 0x7b8a <updateRedLed>
							updateGreenLed(pwm_green);
     5da:	80 91 0d 02 	lds	r24, 0x020D
     5de:	0e 94 d9 3d 	call	0x7bb2	; 0x7bb2 <updateGreenLed>
							updateBlueLed(pwm_blue);
     5e2:	80 91 0e 02 	lds	r24, 0x020E
     5e6:	0e 94 ed 3d 	call	0x7bda	; 0x7bda <updateBlueLed>
							LED_IR1_HIGH;
     5ea:	44 9a       	sbi	0x08, 4	; 8
							LED_IR2_HIGH;
     5ec:	45 9a       	sbi	0x08, 5	; 8
     5ee:	80 91 1a 04 	lds	r24, 0x041A
							break;
     5f2:	6e ce       	rjmp	.-804    	; 0x2d0 <main+0xf4>
			}
		}

		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
     5f4:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <readBatteryLevel>
             		
			if(currentSelector==4 || currentSelector==5) {
     5f8:	80 91 1a 04 	lds	r24, 0x041A
     5fc:	98 2f       	mov	r25, r24
     5fe:	94 50       	subi	r25, 0x04	; 4
     600:	92 30       	cpi	r25, 0x02	; 2
     602:	08 f4       	brcc	.+2      	; 0x606 <main+0x42a>
     604:	fb c1       	rjmp	.+1014   	; 0x9fc <main+0x820>
					}
				} else {	// do nothing => all 3 leds turned on

				}

			} else if(currentSelector==7) {
     606:	87 30       	cpi	r24, 0x07	; 7
     608:	09 f4       	brne	.+2      	; 0x60c <main+0x430>
     60a:	23 c2       	rjmp	.+1094   	; 0xa52 <main+0x876>

				}

				turnOffLedsTime = getTime100MicroSec();

			} else if(currentSelector==6) {
     60c:	86 30       	cpi	r24, 0x06	; 6
     60e:	09 f4       	brne	.+2      	; 0x612 <main+0x436>
     610:	cd c1       	rjmp	.+922    	; 0x9ac <main+0x7d0>
						rgbState = 0;
					}
				}
			}

			startTime = getTime100MicroSec();
     612:	0e 94 d7 21 	call	0x43ae	; 0x43ae <getTime100MicroSec>
     616:	6b 01       	movw	r12, r22
     618:	7c 01       	movw	r14, r24
     61a:	3a ce       	rjmp	.-908    	; 0x290 <main+0xb4>

		computeAngle();

		// turn off the rgb leds after one half second in the "charger demo"
		if(currentSelector==7) {
			if((getTime100MicroSec()-turnOffLedsTime) > PAUSE_500_MSEC) {
     61c:	0e 94 d7 21 	call	0x43ae	; 0x43ae <getTime100MicroSec>
     620:	29 81       	ldd	r18, Y+1	; 0x01
     622:	3a 81       	ldd	r19, Y+2	; 0x02
     624:	4b 81       	ldd	r20, Y+3	; 0x03
     626:	5c 81       	ldd	r21, Y+4	; 0x04
     628:	62 1b       	sub	r22, r18
     62a:	73 0b       	sbc	r23, r19
     62c:	84 0b       	sbc	r24, r20
     62e:	95 0b       	sbc	r25, r21
     630:	68 3c       	cpi	r22, 0xC8	; 200
     632:	32 e1       	ldi	r19, 0x12	; 18
     634:	73 07       	cpc	r23, r19
     636:	30 e0       	ldi	r19, 0x00	; 0
     638:	83 07       	cpc	r24, r19
     63a:	30 e0       	ldi	r19, 0x00	; 0
     63c:	93 07       	cpc	r25, r19
     63e:	08 f4       	brcc	.+2      	; 0x642 <main+0x466>
     640:	18 ce       	rjmp	.-976    	; 0x272 <main+0x96>
				pwm_red = 255;
     642:	10 93 0c 02 	sts	0x020C, r17
				pwm_green = 255;
     646:	10 93 0d 02 	sts	0x020D, r17
				pwm_blue = 255;			
     64a:	10 93 0e 02 	sts	0x020E, r17
     64e:	11 ce       	rjmp	.-990    	; 0x272 <main+0x96>
             		enableCliffAvoidance();
					break;
    
			case 3:	// both obstacle and cliff avoidance enabled (the robot does not move untill commands are
					// received from the radio or tv remote)
            		enableObstacleAvoidance();
     650:	0e 94 7a 3d 	call	0x7af4	; 0x7af4 <enableObstacleAvoidance>
					enableCliffAvoidance();
     654:	0e 94 81 3d 	call	0x7b02	; 0x7b02 <enableCliffAvoidance>
							break;						

						case 2:
							if(!calibrationWritten) {
								calibrationWritten = 1;
								writeDefaultCalibration();
     658:	80 91 1a 04 	lds	r24, 0x041A
     65c:	39 ce       	rjmp	.-910    	; 0x2d0 <main+0xf4>

		//if(currentSelector!=6 && currentSelector!=15) {
		//	usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		//}

		switch(currentSelector) {
     65e:	84 30       	cpi	r24, 0x04	; 4
     660:	09 f4       	brne	.+2      	; 0x664 <main+0x488>
     662:	7f c1       	rjmp	.+766    	; 0x962 <main+0x786>
     664:	85 30       	cpi	r24, 0x05	; 5
     666:	a0 f3       	brcs	.-24     	; 0x650 <main+0x474>
					updateBlueLed(pwm_blue);
					break;
             
			case 5:	// random colors on RGB leds; obstacle avoidance enabled; robot start moving automatically
					// (motors speed setting)
					updateRedLed(pwm_red);
     668:	80 91 0c 02 	lds	r24, 0x020C
     66c:	0e 94 c5 3d 	call	0x7b8a	; 0x7b8a <updateRedLed>
					updateGreenLed(pwm_green);
     670:	80 91 0d 02 	lds	r24, 0x020D
     674:	0e 94 d9 3d 	call	0x7bb2	; 0x7bb2 <updateGreenLed>
					updateBlueLed(pwm_blue);
     678:	80 91 0e 02 	lds	r24, 0x020E
     67c:	0e 94 ed 3d 	call	0x7bda	; 0x7bda <updateBlueLed>
					enableObstacleAvoidance();
     680:	0e 94 7a 3d 	call	0x7af4	; 0x7af4 <enableObstacleAvoidance>
					setLeftSpeed(25);
     684:	89 e1       	ldi	r24, 0x19	; 25
     686:	0e 94 8f 29 	call	0x531e	; 0x531e <setLeftSpeed>
					setRightSpeed(25);
     68a:	89 e1       	ldi	r24, 0x19	; 25
     68c:	0e 94 ac 29 	call	0x5358	; 0x5358 <setRightSpeed>
     690:	80 91 1a 04 	lds	r24, 0x041A
					break;
     694:	1d ce       	rjmp	.-966    	; 0x2d0 <main+0xf4>

		//if(currentSelector!=6 && currentSelector!=15) {
		//	usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		//}

		switch(currentSelector) {
     696:	8c 30       	cpi	r24, 0x0C	; 12
     698:	09 f4       	brne	.+2      	; 0x69c <main+0x4c0>
     69a:	c7 c0       	rjmp	.+398    	; 0x82a <main+0x64e>
     69c:	8c 30       	cpi	r24, 0x0C	; 12
     69e:	08 f4       	brcc	.+2      	; 0x6a2 <main+0x4c6>
     6a0:	ab c0       	rjmp	.+342    	; 0x7f8 <main+0x61c>
     6a2:	8e 30       	cpi	r24, 0x0E	; 14
     6a4:	09 f0       	breq	.+2      	; 0x6a8 <main+0x4cc>
     6a6:	14 ce       	rjmp	.-984    	; 0x2d0 <main+0xf4>
			case 13: // IR comm transmitter

				break;
			
			case 14: // IR comm receiver
				switch(irCommState) {
     6a8:	80 91 94 04 	lds	r24, 0x0494
     6ac:	84 30       	cpi	r24, 0x04	; 4
     6ae:	11 f4       	brne	.+4      	; 0x6b4 <main+0x4d8>
     6b0:	0c 94 33 0c 	jmp	0x1866	; 0x1866 <main+0x168a>
     6b4:	85 30       	cpi	r24, 0x05	; 5
     6b6:	08 f0       	brcs	.+2      	; 0x6ba <main+0x4de>
     6b8:	59 c3       	rjmp	.+1714   	; 0xd6c <main+0xb90>
     6ba:	81 30       	cpi	r24, 0x01	; 1
     6bc:	11 f4       	brne	.+4      	; 0x6c2 <main+0x4e6>
     6be:	0c 94 09 0c 	jmp	0x1812	; 0x1812 <main+0x1636>
     6c2:	81 30       	cpi	r24, 0x01	; 1
     6c4:	08 f0       	brcs	.+2      	; 0x6c8 <main+0x4ec>
     6c6:	77 c7       	rjmp	.+3822   	; 0x15b6 <main+0x13da>
					case IRCOMM_RX_INIT_STATE:
						turnOffGreenLeds();
     6c8:	0e 94 9e 3e 	call	0x7d3c	; 0x7d3c <turnOffGreenLeds>
						GREEN_LED0_ON;
     6cc:	80 91 0b 01 	lds	r24, 0x010B
     6d0:	8e 7f       	andi	r24, 0xFE	; 254
     6d2:	80 93 0b 01 	sts	0x010B, r24
						irCommProxValuesAdc = irCommProxValuesBuff1;
     6d6:	27 ee       	ldi	r18, 0xE7	; 231
     6d8:	34 e0       	ldi	r19, 0x04	; 4
     6da:	30 93 7a 07 	sts	0x077A, r19
     6de:	20 93 79 07 	sts	0x0779, r18
						irCommProxValuesCurr = irCommProxValuesBuff2;
     6e2:	47 e2       	ldi	r20, 0x27	; 39
     6e4:	56 e0       	ldi	r21, 0x06	; 6
     6e6:	50 93 68 07 	sts	0x0768, r21
     6ea:	40 93 67 07 	sts	0x0767, r20
						irCommMaxSensorValueAdc = irCommMaxSensorValueBuff1;
     6ee:	86 e3       	ldi	r24, 0x36	; 54
     6f0:	98 e0       	ldi	r25, 0x08	; 8
     6f2:	90 93 5a 08 	sts	0x085A, r25
     6f6:	80 93 59 08 	sts	0x0859, r24
						irCommMaxSensorValueCurr = irCommMaxSensorValueBuff2;
     6fa:	a4 e8       	ldi	r26, 0x84	; 132
     6fc:	b8 e0       	ldi	r27, 0x08	; 8
     6fe:	b0 93 c1 04 	sts	0x04C1, r27
     702:	a0 93 c0 04 	sts	0x04C0, r26
						irCommMinSensorValueAdc = irCommMinSensorValueBuff1;
     706:	e9 e6       	ldi	r30, 0x69	; 105
     708:	f7 e0       	ldi	r31, 0x07	; 7
     70a:	f0 93 e6 04 	sts	0x04E6, r31
     70e:	e0 93 e5 04 	sts	0x04E5, r30
						irCommMinSensorValueCurr = irCommMinSensorValueBuff2;
     712:	2e e8       	ldi	r18, 0x8E	; 142
     714:	37 e0       	ldi	r19, 0x07	; 7
     716:	30 93 bf 04 	sts	0x04BF, r19
     71a:	20 93 be 04 	sts	0x04BE, r18
						memset(irCommMaxSensorValueAdc, 0x00, 16);
     71e:	dc 01       	movw	r26, r24
     720:	e0 e1       	ldi	r30, 0x10	; 16
     722:	1d 92       	st	X+, r1
     724:	ea 95       	dec	r30
     726:	e9 f7       	brne	.-6      	; 0x722 <main+0x546>
						memset(irCommMinSensorValueAdc, 0xFF, 16);
     728:	89 e6       	ldi	r24, 0x69	; 105
     72a:	97 e0       	ldi	r25, 0x07	; 7
     72c:	6f ef       	ldi	r22, 0xFF	; 255
     72e:	70 e0       	ldi	r23, 0x00	; 0
     730:	40 e1       	ldi	r20, 0x10	; 16
     732:	50 e0       	ldi	r21, 0x00	; 0
     734:	0e 94 b5 49 	call	0x936a	; 0x936a <memset>
						irCommEnabled = IRCOMM_MODE_RECEIVE;
     738:	20 92 92 04 	sts	0x0492, r2
						irCommState = IRCOMM_RX_IDLE_STATE;
     73c:	20 92 94 04 	sts	0x0494, r2
     740:	80 91 1a 04 	lds	r24, 0x041A
						break;
     744:	c5 cd       	rjmp	.-1142   	; 0x2d0 <main+0xf4>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
     746:	80 91 1e 04 	lds	r24, 0x041E
     74a:	82 30       	cpi	r24, 0x02	; 2
     74c:	09 f4       	brne	.+2      	; 0x750 <main+0x574>
     74e:	3e c6       	rjmp	.+3196   	; 0x13cc <main+0x11f0>
     750:	83 30       	cpi	r24, 0x03	; 3
     752:	08 f0       	brcs	.+2      	; 0x756 <main+0x57a>
     754:	c8 c2       	rjmp	.+1424   	; 0xce6 <main+0xb0a>
     756:	88 23       	and	r24, r24
     758:	09 f0       	breq	.+2      	; 0x75c <main+0x580>
     75a:	b4 c5       	rjmp	.+2920   	; 0x12c4 <main+0x10e8>
						case 0:	// move around
							turnOffGreenLeds();
     75c:	0e 94 9e 3e 	call	0x7d3c	; 0x7d3c <turnOffGreenLeds>
							GREEN_LED0_ON;
     760:	80 91 0b 01 	lds	r24, 0x010B
     764:	8e 7f       	andi	r24, 0xFE	; 254
     766:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED1_ON;
							lineFound = 0;
     76a:	10 92 1f 04 	sts	0x041F, r1
							enableObstacleAvoidance();
     76e:	0e 94 7a 3d 	call	0x7af4	; 0x7af4 <enableObstacleAvoidance>
							setRightSpeed(20);
     772:	84 e1       	ldi	r24, 0x14	; 20
     774:	0e 94 ac 29 	call	0x5358	; 0x5358 <setRightSpeed>
							setLeftSpeed(20);
     778:	84 e1       	ldi	r24, 0x14	; 20
     77a:	0e 94 8f 29 	call	0x531e	; 0x531e <setLeftSpeed>
							demoEndTime = getTime100MicroSec();
     77e:	0e 94 d7 21 	call	0x43ae	; 0x43ae <getTime100MicroSec>
     782:	9b 01       	movw	r18, r22
     784:	ac 01       	movw	r20, r24
     786:	60 93 2a 04 	sts	0x042A, r22
     78a:	70 93 2b 04 	sts	0x042B, r23
     78e:	80 93 2c 04 	sts	0x042C, r24
     792:	90 93 2d 04 	sts	0x042D, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {
     796:	80 91 22 04 	lds	r24, 0x0422
     79a:	90 91 23 04 	lds	r25, 0x0423
     79e:	a0 91 24 04 	lds	r26, 0x0424
     7a2:	b0 91 25 04 	lds	r27, 0x0425
     7a6:	28 1b       	sub	r18, r24
     7a8:	39 0b       	sbc	r19, r25
     7aa:	4a 0b       	sbc	r20, r26
     7ac:	5b 0b       	sbc	r21, r27
     7ae:	23 33       	cpi	r18, 0x33	; 51
     7b0:	6f ee       	ldi	r22, 0xEF	; 239
     7b2:	36 07       	cpc	r19, r22
     7b4:	62 e0       	ldi	r22, 0x02	; 2
     7b6:	46 07       	cpc	r20, r22
     7b8:	60 e0       	ldi	r22, 0x00	; 0
     7ba:	56 07       	cpc	r21, r22
     7bc:	10 f0       	brcs	.+4      	; 0x7c2 <main+0x5e6>

								if(proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {
									outOfLine++;
									if(outOfLine > 250) {
										chargeContact = 0;
										demoState = 1;
     7be:	20 92 1e 04 	sts	0x041E, r2
							}
							if((getTime100MicroSec()-demoStartTime2) >= (PAUSE_2_SEC)) {
								rgbLedState = 1;
								demoStartTime2 = getTime100MicroSec();
							}
							updateRedLed(pwm_red);
     7c2:	80 91 0c 02 	lds	r24, 0x020C
     7c6:	0e 94 c5 3d 	call	0x7b8a	; 0x7b8a <updateRedLed>
							updateGreenLed(pwm_green);
     7ca:	80 91 0d 02 	lds	r24, 0x020D
     7ce:	0e 94 d9 3d 	call	0x7bb2	; 0x7bb2 <updateGreenLed>
							updateBlueLed(pwm_blue);
     7d2:	80 91 0e 02 	lds	r24, 0x020E
     7d6:	0e 94 ed 3d 	call	0x7bda	; 0x7bda <updateBlueLed>
     7da:	80 91 1a 04 	lds	r24, 0x041A
							break;
     7de:	78 cd       	rjmp	.-1296   	; 0x2d0 <main+0xf4>
					updateBlueLed(pwm_blue);

					break;
  
			case 8:	// motors calibration
					irEnabled = 1;
     7e0:	20 92 12 02 	sts	0x0212, r2
					if(calibrateOdomFlag==1) {
     7e4:	80 91 e0 04 	lds	r24, 0x04E0
     7e8:	81 30       	cpi	r24, 0x01	; 1
     7ea:	09 f0       	breq	.+2      	; 0x7ee <main+0x612>
     7ec:	e7 cd       	rjmp	.-1074   	; 0x3bc <main+0x1e0>
						handleCalibration();
     7ee:	0e 94 b0 2a 	call	0x5560	; 0x5560 <handleCalibration>
     7f2:	80 91 1a 04 	lds	r24, 0x041A
     7f6:	6c cd       	rjmp	.-1320   	; 0x2d0 <main+0xf4>
					}
					

					break;

			case 11:if(leftMotSteps <= 5000) {
     7f8:	60 91 a5 02 	lds	r22, 0x02A5
     7fc:	70 91 a6 02 	lds	r23, 0x02A6
     800:	80 91 a7 02 	lds	r24, 0x02A7
     804:	90 91 a8 02 	lds	r25, 0x02A8
     808:	20 e0       	ldi	r18, 0x00	; 0
     80a:	30 e4       	ldi	r19, 0x40	; 64
     80c:	4c e9       	ldi	r20, 0x9C	; 156
     80e:	55 e4       	ldi	r21, 0x45	; 69
     810:	0e 94 92 46 	call	0x8d24	; 0x8d24 <__cmpsf2>
     814:	18 16       	cp	r1, r24
     816:	cc f0       	brlt	.+50     	; 0x84a <main+0x66e>
						setRightSpeed(0);
					}
					break;

			case 12:if(leftMotSteps <= 6000) {
						setLeftSpeed(40);
     818:	88 e2       	ldi	r24, 0x28	; 40
     81a:	0e 94 8f 29 	call	0x531e	; 0x531e <setLeftSpeed>
						setRightSpeed(40);
     81e:	88 e2       	ldi	r24, 0x28	; 40
     820:	0e 94 ac 29 	call	0x5358	; 0x5358 <setRightSpeed>
     824:	80 91 1a 04 	lds	r24, 0x041A
     828:	53 cd       	rjmp	.-1370   	; 0x2d0 <main+0xf4>
						setLeftSpeed(0);
						setRightSpeed(0);
					}
					break;

			case 12:if(leftMotSteps <= 6000) {
     82a:	60 91 a5 02 	lds	r22, 0x02A5
     82e:	70 91 a6 02 	lds	r23, 0x02A6
     832:	80 91 a7 02 	lds	r24, 0x02A7
     836:	90 91 a8 02 	lds	r25, 0x02A8
     83a:	20 e0       	ldi	r18, 0x00	; 0
     83c:	30 e8       	ldi	r19, 0x80	; 128
     83e:	4b eb       	ldi	r20, 0xBB	; 187
     840:	55 e4       	ldi	r21, 0x45	; 69
     842:	0e 94 92 46 	call	0x8d24	; 0x8d24 <__cmpsf2>
     846:	18 16       	cp	r1, r24
     848:	3c f7       	brge	.-50     	; 0x818 <main+0x63c>
						setLeftSpeed(40);
						setRightSpeed(40);
					} else {
						setLeftSpeed(0);
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	0e 94 8f 29 	call	0x531e	; 0x531e <setLeftSpeed>
						setRightSpeed(0);
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	0e 94 ac 29 	call	0x5358	; 0x5358 <setRightSpeed>
     856:	80 91 1a 04 	lds	r24, 0x041A
     85a:	3a cd       	rjmp	.-1420   	; 0x2d0 <main+0xf4>
		//}

		switch(currentSelector) {
    
			case 0:	// motors in direct power control (no speed control)
					handleMotorsWithNoController();
     85c:	0e 94 5f 28 	call	0x50be	; 0x50be <handleMotorsWithNoController>
     860:	80 91 1a 04 	lds	r24, 0x041A
					break;
     864:	35 cd       	rjmp	.-1430   	; 0x2d0 <main+0xf4>
							break;
					}
					break;

			case 10:// obstacle avoidance with random colors; 4 seconds motion and 10 seconds pause					
					switch(demoState) {
     866:	80 91 1e 04 	lds	r24, 0x041E
     86a:	81 30       	cpi	r24, 0x01	; 1
     86c:	09 f4       	brne	.+2      	; 0x870 <main+0x694>
     86e:	d4 c4       	rjmp	.+2472   	; 0x1218 <main+0x103c>
     870:	81 30       	cpi	r24, 0x01	; 1
     872:	08 f0       	brcs	.+2      	; 0x876 <main+0x69a>
     874:	c0 c1       	rjmp	.+896    	; 0xbf6 <main+0xa1a>
						case 0: // get first clock tick and start moving the robot with obstacle avoidance enabled
							demoStartTime = getTime100MicroSec();
     876:	0e 94 d7 21 	call	0x43ae	; 0x43ae <getTime100MicroSec>
     87a:	60 93 22 04 	sts	0x0422, r22
     87e:	70 93 23 04 	sts	0x0423, r23
     882:	80 93 24 04 	sts	0x0424, r24
     886:	90 93 25 04 	sts	0x0425, r25
							demoEndTime = getTime100MicroSec();							
     88a:	0e 94 d7 21 	call	0x43ae	; 0x43ae <getTime100MicroSec>
     88e:	60 93 2a 04 	sts	0x042A, r22
     892:	70 93 2b 04 	sts	0x042B, r23
     896:	80 93 2c 04 	sts	0x042C, r24
     89a:	90 93 2d 04 	sts	0x042D, r25
							demoStartTime2 = getTime100MicroSec();
     89e:	0e 94 d7 21 	call	0x43ae	; 0x43ae <getTime100MicroSec>
     8a2:	60 93 26 04 	sts	0x0426, r22
     8a6:	70 93 27 04 	sts	0x0427, r23
     8aa:	80 93 28 04 	sts	0x0428, r24
     8ae:	90 93 29 04 	sts	0x0429, r25
							enableObstacleAvoidance();
     8b2:	0e 94 7a 3d 	call	0x7af4	; 0x7af4 <enableObstacleAvoidance>
							setLeftSpeed(20);
     8b6:	84 e1       	ldi	r24, 0x14	; 20
     8b8:	0e 94 8f 29 	call	0x531e	; 0x531e <setLeftSpeed>
							setRightSpeed(20);
     8bc:	84 e1       	ldi	r24, 0x14	; 20
     8be:	0e 94 ac 29 	call	0x5358	; 0x5358 <setRightSpeed>
							demoState = 1;
     8c2:	20 92 1e 04 	sts	0x041E, r2
								demoState = 1;							
							}
							break;
					}	
					
					switch(rgbLedState) {
     8c6:	80 91 39 04 	lds	r24, 0x0439
     8ca:	81 30       	cpi	r24, 0x01	; 1
     8cc:	09 f4       	brne	.+2      	; 0x8d0 <main+0x6f4>
     8ce:	c6 c1       	rjmp	.+908    	; 0xc5c <main+0xa80>
     8d0:	81 30       	cpi	r24, 0x01	; 1
     8d2:	08 f0       	brcs	.+2      	; 0x8d6 <main+0x6fa>
     8d4:	36 c1       	rjmp	.+620    	; 0xb42 <main+0x966>
						case 0:							
							pwm_red = 255;
     8d6:	10 93 0c 02 	sts	0x020C, r17
							pwm_green = 255;
     8da:	10 93 0d 02 	sts	0x020D, r17
							pwm_blue = 255;
     8de:	10 93 0e 02 	sts	0x020E, r17
							if((getTime100MicroSec()-demoEndTime) >= (PAUSE_100_MSEC)) {
     8e2:	0e 94 d7 21 	call	0x43ae	; 0x43ae <getTime100MicroSec>
     8e6:	9b 01       	movw	r18, r22
     8e8:	ac 01       	movw	r20, r24
     8ea:	80 91 2a 04 	lds	r24, 0x042A
     8ee:	90 91 2b 04 	lds	r25, 0x042B
     8f2:	a0 91 2c 04 	lds	r26, 0x042C
     8f6:	b0 91 2d 04 	lds	r27, 0x042D
     8fa:	28 1b       	sub	r18, r24
     8fc:	39 0b       	sbc	r19, r25
     8fe:	4a 0b       	sbc	r20, r26
     900:	5b 0b       	sbc	r21, r27
     902:	21 3c       	cpi	r18, 0xC1	; 193
     904:	f3 e0       	ldi	r31, 0x03	; 3
     906:	3f 07       	cpc	r19, r31
     908:	f0 e0       	ldi	r31, 0x00	; 0
     90a:	4f 07       	cpc	r20, r31
     90c:	f0 e0       	ldi	r31, 0x00	; 0
     90e:	5f 07       	cpc	r21, r31
     910:	10 f0       	brcs	.+4      	; 0x916 <main+0x73a>
     912:	0c 94 76 0e 	jmp	0x1cec	; 0x1cec <main+0x1b10>
									greenLedState = 0;
								}
								setGreenLed(greenLedState, 1);
								demoEndTime = getTime100MicroSec();											
							}
							if((getTime100MicroSec()-demoStartTime2) >= (PAUSE_2_SEC)) {
     916:	0e 94 d7 21 	call	0x43ae	; 0x43ae <getTime100MicroSec>
     91a:	9b 01       	movw	r18, r22
     91c:	ac 01       	movw	r20, r24
     91e:	80 91 26 04 	lds	r24, 0x0426
     922:	90 91 27 04 	lds	r25, 0x0427
     926:	a0 91 28 04 	lds	r26, 0x0428
     92a:	b0 91 29 04 	lds	r27, 0x0429
     92e:	28 1b       	sub	r18, r24
     930:	39 0b       	sbc	r19, r25
     932:	4a 0b       	sbc	r20, r26
     934:	5b 0b       	sbc	r21, r27
     936:	2e 31       	cpi	r18, 0x1E	; 30
     938:	6b e4       	ldi	r22, 0x4B	; 75
     93a:	36 07       	cpc	r19, r22
     93c:	60 e0       	ldi	r22, 0x00	; 0
     93e:	46 07       	cpc	r20, r22
     940:	60 e0       	ldi	r22, 0x00	; 0
     942:	56 07       	cpc	r21, r22
     944:	08 f4       	brcc	.+2      	; 0x948 <main+0x76c>
     946:	3d cf       	rjmp	.-390    	; 0x7c2 <main+0x5e6>
								rgbLedState = 1;
     948:	20 92 39 04 	sts	0x0439, r2
								demoStartTime2 = getTime100MicroSec();
     94c:	0e 94 d7 21 	call	0x43ae	; 0x43ae <getTime100MicroSec>
     950:	60 93 26 04 	sts	0x0426, r22
     954:	70 93 27 04 	sts	0x0427, r23
     958:	80 93 28 04 	sts	0x0428, r24
     95c:	90 93 29 04 	sts	0x0429, r25
     960:	30 cf       	rjmp	.-416    	; 0x7c2 <main+0x5e6>
            		enableObstacleAvoidance();
					enableCliffAvoidance();
					break;
            
			case 4:	// random colors on RGB leds; small green leds turned on
					GREEN_LED0_ON;
     962:	80 91 0b 01 	lds	r24, 0x010B
     966:	8e 7f       	andi	r24, 0xFE	; 254
     968:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED1_ON;
     96c:	80 91 0b 01 	lds	r24, 0x010B
     970:	8d 7f       	andi	r24, 0xFD	; 253
     972:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED2_ON;
     976:	80 91 0b 01 	lds	r24, 0x010B
     97a:	8b 7f       	andi	r24, 0xFB	; 251
     97c:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED3_ON;
     980:	a3 98       	cbi	0x14, 3	; 20
					GREEN_LED4_ON;
     982:	80 91 0b 01 	lds	r24, 0x010B
     986:	8f 7e       	andi	r24, 0xEF	; 239
     988:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED5_ON;
     98c:	80 91 0b 01 	lds	r24, 0x010B
     990:	8f 7d       	andi	r24, 0xDF	; 223
     992:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED6_ON;
     996:	80 91 0b 01 	lds	r24, 0x010B
     99a:	8f 7b       	andi	r24, 0xBF	; 191
     99c:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED7_ON;
     9a0:	80 91 0b 01 	lds	r24, 0x010B
     9a4:	8f 77       	andi	r24, 0x7F	; 127
     9a6:	80 93 0b 01 	sts	0x010B, r24
     9aa:	0b cf       	rjmp	.-490    	; 0x7c2 <main+0x5e6>
				}

				turnOffLedsTime = getTime100MicroSec();

			} else if(currentSelector==6) {
				if(menuChoice==1 && rfFlags<=1) {
     9ac:	80 91 f1 03 	lds	r24, 0x03F1
     9b0:	81 30       	cpi	r24, 0x01	; 1
     9b2:	09 f0       	breq	.+2      	; 0x9b6 <main+0x7da>
     9b4:	2e ce       	rjmp	.-932    	; 0x612 <main+0x436>
     9b6:	90 91 e7 02 	lds	r25, 0x02E7
     9ba:	92 30       	cpi	r25, 0x02	; 2
     9bc:	08 f0       	brcs	.+2      	; 0x9c0 <main+0x7e4>
     9be:	29 ce       	rjmp	.-942    	; 0x612 <main+0x436>
					if(rgbState == 0) {
     9c0:	90 91 ea 02 	lds	r25, 0x02EA
     9c4:	99 23       	and	r25, r25
     9c6:	11 f0       	breq	.+4      	; 0x9cc <main+0x7f0>
     9c8:	0c 94 12 0f 	jmp	0x1e24	; 0x1e24 <main+0x1c48>
						pwm_red = 254;
     9cc:	fe ef       	ldi	r31, 0xFE	; 254
     9ce:	bf 2e       	mov	r11, r31
     9d0:	b0 92 0c 02 	sts	0x020C, r11
						pwm_green = 255;
     9d4:	10 93 0d 02 	sts	0x020D, r17
						pwm_blue = 255;
     9d8:	10 93 0e 02 	sts	0x020E, r17
						rgbState = 1;
     9dc:	80 93 ea 02 	sts	0x02EA, r24
     9e0:	18 ce       	rjmp	.-976    	; 0x612 <main+0x436>
						if(pwm_intermediate_left_desired < pwm_left_desired) {
							pwm_intermediate_left_desired = pwm_left_desired;
						}					
					}
				} else {
					pwm_intermediate_right_desired = pwm_right_desired;
     9e2:	80 91 c9 02 	lds	r24, 0x02C9
     9e6:	90 91 ca 02 	lds	r25, 0x02CA
     9ea:	90 93 ce 02 	sts	0x02CE, r25
     9ee:	80 93 cd 02 	sts	0x02CD, r24
					pwm_intermediate_left_desired = pwm_left_desired;
     9f2:	80 91 cb 02 	lds	r24, 0x02CB
     9f6:	90 91 cc 02 	lds	r25, 0x02CC
     9fa:	cd cd       	rjmp	.-1126   	; 0x596 <main+0x3ba>
		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
             		
			if(currentSelector==4 || currentSelector==5) {
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption
     9fc:	0e 94 a5 49 	call	0x934a	; 0x934a <rand>
     a00:	6e e1       	ldi	r22, 0x1E	; 30
     a02:	70 e0       	ldi	r23, 0x00	; 0
     a04:	0e 94 07 49 	call	0x920e	; 0x920e <__divmodhi4>
     a08:	88 0e       	add	r8, r24
     a0a:	99 1e       	adc	r9, r25
     a0c:	5f e7       	ldi	r21, 0x7F	; 127
     a0e:	85 22       	and	r8, r21
     a10:	99 24       	eor	r9, r9

				switch(rgbState) {
     a12:	80 91 ea 02 	lds	r24, 0x02EA
     a16:	81 30       	cpi	r24, 0x01	; 1
     a18:	09 f4       	brne	.+2      	; 0xa1c <main+0x840>
     a1a:	8f c4       	rjmp	.+2334   	; 0x133a <main+0x115e>
     a1c:	81 30       	cpi	r24, 0x01	; 1
     a1e:	08 f0       	brcs	.+2      	; 0xa22 <main+0x846>
     a20:	47 c4       	rjmp	.+2190   	; 0x12b0 <main+0x10d4>
					case 0:
						pwm_red = 255 - currRand;	
     a22:	88 2d       	mov	r24, r8
     a24:	80 95       	com	r24
     a26:	80 93 0c 02 	sts	0x020C, r24
						rgbState = 1;
     a2a:	20 92 ea 02 	sts	0x02EA, r2
						pwm_blue = 255 - currRand;
						rgbState = 0;
						break;
				}
				
				if(currRand<32) {
     a2e:	80 e2       	ldi	r24, 0x20	; 32
     a30:	88 16       	cp	r8, r24
     a32:	91 04       	cpc	r9, r1
     a34:	08 f0       	brcs	.+2      	; 0xa38 <main+0x85c>
     a36:	aa c1       	rjmp	.+852    	; 0xd8c <main+0xbb0>
					if(pwm_green!=255 && pwm_blue!=255) {	// do not turn on all leds
     a38:	80 91 0d 02 	lds	r24, 0x020D
     a3c:	8f 3f       	cpi	r24, 0xFF	; 255
     a3e:	09 f4       	brne	.+2      	; 0xa42 <main+0x866>
     a40:	e8 cd       	rjmp	.-1072   	; 0x612 <main+0x436>
     a42:	80 91 0e 02 	lds	r24, 0x020E
     a46:	8f 3f       	cpi	r24, 0xFF	; 255
     a48:	09 f4       	brne	.+2      	; 0xa4c <main+0x870>
     a4a:	e3 cd       	rjmp	.-1082   	; 0x612 <main+0x436>
						pwm_red = 255;
     a4c:	10 93 0c 02 	sts	0x020C, r17
     a50:	e0 cd       	rjmp	.-1088   	; 0x612 <main+0x436>

				}

			} else if(currentSelector==7) {

				srand(TCNT3);
     a52:	80 91 94 00 	lds	r24, 0x0094
     a56:	90 91 95 00 	lds	r25, 0x0095
     a5a:	0e 94 aa 49 	call	0x9354	; 0x9354 <srand>
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption
     a5e:	0e 94 a5 49 	call	0x934a	; 0x934a <rand>
     a62:	6e e1       	ldi	r22, 0x1E	; 30
     a64:	70 e0       	ldi	r23, 0x00	; 0
     a66:	0e 94 07 49 	call	0x920e	; 0x920e <__divmodhi4>
     a6a:	5c 01       	movw	r10, r24
     a6c:	a8 0c       	add	r10, r8
     a6e:	b9 1c       	adc	r11, r9
     a70:	bf e7       	ldi	r27, 0x7F	; 127
     a72:	ab 22       	and	r10, r27
     a74:	bb 24       	eor	r11, r11

				pwm_red = 255 - currRand;
     a76:	8a 2d       	mov	r24, r10
     a78:	80 95       	com	r24
     a7a:	80 93 0c 02 	sts	0x020C, r24
				
				srand(TCNT3);
     a7e:	80 91 94 00 	lds	r24, 0x0094
     a82:	90 91 95 00 	lds	r25, 0x0095
     a86:	0e 94 aa 49 	call	0x9354	; 0x9354 <srand>
				currRand = (currRand + rand()%30) % 128;	
     a8a:	0e 94 a5 49 	call	0x934a	; 0x934a <rand>
     a8e:	6e e1       	ldi	r22, 0x1E	; 30
     a90:	70 e0       	ldi	r23, 0x00	; 0
     a92:	0e 94 07 49 	call	0x920e	; 0x920e <__divmodhi4>
     a96:	6c 01       	movw	r12, r24
     a98:	ca 0c       	add	r12, r10
     a9a:	db 1c       	adc	r13, r11
     a9c:	ef e7       	ldi	r30, 0x7F	; 127
     a9e:	ce 22       	and	r12, r30
     aa0:	dd 24       	eor	r13, r13
				pwm_green = 255 - currRand;
     aa2:	8c 2d       	mov	r24, r12
     aa4:	80 95       	com	r24
     aa6:	80 93 0d 02 	sts	0x020D, r24

				srand(TCNT3);
     aaa:	80 91 94 00 	lds	r24, 0x0094
     aae:	90 91 95 00 	lds	r25, 0x0095
     ab2:	0e 94 aa 49 	call	0x9354	; 0x9354 <srand>
				currRand = (currRand + rand()%30) % 128;
     ab6:	0e 94 a5 49 	call	0x934a	; 0x934a <rand>
     aba:	6e e1       	ldi	r22, 0x1E	; 30
     abc:	70 e0       	ldi	r23, 0x00	; 0
     abe:	0e 94 07 49 	call	0x920e	; 0x920e <__divmodhi4>
     ac2:	4c 01       	movw	r8, r24
     ac4:	8c 0c       	add	r8, r12
     ac6:	9d 1c       	adc	r9, r13
     ac8:	ff e7       	ldi	r31, 0x7F	; 127
     aca:	8f 22       	and	r8, r31
     acc:	99 24       	eor	r9, r9
				pwm_blue = 255 - currRand;
     ace:	88 2d       	mov	r24, r8
     ad0:	80 95       	com	r24
     ad2:	80 93 0e 02 	sts	0x020E, r24

			
				srand(TCNT3);
     ad6:	80 91 94 00 	lds	r24, 0x0094
     ada:	90 91 95 00 	lds	r25, 0x0095
     ade:	0e 94 aa 49 	call	0x9354	; 0x9354 <srand>
				currRand2 = rand()%128;
     ae2:	0e 94 a5 49 	call	0x934a	; 0x934a <rand>
     ae6:	60 e8       	ldi	r22, 0x80	; 128
     ae8:	70 e0       	ldi	r23, 0x00	; 0
     aea:	0e 94 07 49 	call	0x920e	; 0x920e <__divmodhi4>
				if(currRand2<32) {
     aee:	80 32       	cpi	r24, 0x20	; 32
     af0:	91 05       	cpc	r25, r1
     af2:	08 f0       	brcs	.+2      	; 0xaf6 <main+0x91a>
     af4:	5d c1       	rjmp	.+698    	; 0xdb0 <main+0xbd4>
					pwm_red = 255;
     af6:	10 93 0c 02 	sts	0x020C, r17
					pwm_blue = 255;
				} else {	// do nothing => all 3 leds turned on

				}

				turnOffLedsTime = getTime100MicroSec();
     afa:	0e 94 d7 21 	call	0x43ae	; 0x43ae <getTime100MicroSec>
     afe:	69 83       	std	Y+1, r22	; 0x01
     b00:	7a 83       	std	Y+2, r23	; 0x02
     b02:	8b 83       	std	Y+3, r24	; 0x03
     b04:	9c 83       	std	Y+4, r25	; 0x04
     b06:	85 cd       	rjmp	.-1270   	; 0x612 <main+0x436>

				if(softAccEnabled) {
					if(pwm_right_desired == 0) {
						pwm_intermediate_right_desired = 0;
					} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
						pwm_intermediate_right_desired = 0;
     b08:	10 92 ce 02 	sts	0x02CE, r1
     b0c:	10 92 cd 02 	sts	0x02CD, r1
						if(pwm_intermediate_right_desired < pwm_right_desired) {
							pwm_intermediate_right_desired = pwm_right_desired;
						}					
					}
	
					if(pwm_left_desired == 0) {
     b10:	80 91 cb 02 	lds	r24, 0x02CB
     b14:	90 91 cc 02 	lds	r25, 0x02CC
     b18:	00 97       	sbiw	r24, 0x00	; 0
     b1a:	09 f0       	breq	.+2      	; 0xb1e <main+0x942>
     b1c:	1e cd       	rjmp	.-1476   	; 0x55a <main+0x37e>
						pwm_intermediate_left_desired = 0;
					} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
						pwm_intermediate_left_desired = 0;
     b1e:	10 92 d0 02 	sts	0x02D0, r1
     b22:	10 92 cf 02 	sts	0x02CF, r1
     b26:	bd cb       	rjmp	.-2182   	; 0x2a2 <main+0xc6>
					break;

			case 9:	// write default calibration values; wait 2 seconds before start writing the calibration values
					// in eeprom in order to avoid rewriting the data involuntarily when moving the selector and passing 
					// through selector position 9
					switch(demoState) {
     b28:	82 30       	cpi	r24, 0x02	; 2
     b2a:	09 f0       	breq	.+2      	; 0xb2e <main+0x952>
     b2c:	47 cc       	rjmp	.-1906   	; 0x3bc <main+0x1e0>
								demoState = 2;
							}
							break;						

						case 2:
							if(!calibrationWritten) {
     b2e:	80 91 37 04 	lds	r24, 0x0437
     b32:	88 23       	and	r24, r24
     b34:	09 f0       	breq	.+2      	; 0xb38 <main+0x95c>
     b36:	42 cc       	rjmp	.-1916   	; 0x3bc <main+0x1e0>
								calibrationWritten = 1;
     b38:	20 92 37 04 	sts	0x0437, r2
								writeDefaultCalibration();
     b3c:	0e 94 ec 37 	call	0x6fd8	; 0x6fd8 <writeDefaultCalibration>
     b40:	8b cd       	rjmp	.-1258   	; 0x658 <main+0x47c>
								demoState = 1;							
							}
							break;
					}	
					
					switch(rgbLedState) {
     b42:	82 30       	cpi	r24, 0x02	; 2
     b44:	09 f0       	breq	.+2      	; 0xb48 <main+0x96c>
     b46:	88 cd       	rjmp	.-1264   	; 0x658 <main+0x47c>
							updateBlueLed(pwm_blue);
							rgbLedState = 2;
							break;

						case 2:
							if((getTime100MicroSec()-demoStartTime2) >= (PAUSE_500_MSEC)) {
     b48:	0e 94 d7 21 	call	0x43ae	; 0x43ae <getTime100MicroSec>
     b4c:	9b 01       	movw	r18, r22
     b4e:	ac 01       	movw	r20, r24
     b50:	80 91 26 04 	lds	r24, 0x0426
     b54:	90 91 27 04 	lds	r25, 0x0427
     b58:	a0 91 28 04 	lds	r26, 0x0428
     b5c:	b0 91 29 04 	lds	r27, 0x0429
     b60:	28 1b       	sub	r18, r24
     b62:	39 0b       	sbc	r19, r25
     b64:	4a 0b       	sbc	r20, r26
     b66:	5b 0b       	sbc	r21, r27
     b68:	27 3c       	cpi	r18, 0xC7	; 199
     b6a:	e2 e1       	ldi	r30, 0x12	; 18
     b6c:	3e 07       	cpc	r19, r30
     b6e:	e0 e0       	ldi	r30, 0x00	; 0
     b70:	4e 07       	cpc	r20, r30
     b72:	e0 e0       	ldi	r30, 0x00	; 0
     b74:	5e 07       	cpc	r21, r30
     b76:	08 f4       	brcc	.+2      	; 0xb7a <main+0x99e>
     b78:	6f cd       	rjmp	.-1314   	; 0x658 <main+0x47c>
								rgbLedState = 0;
     b7a:	10 92 39 04 	sts	0x0439, r1
								demoStartTime2 = getTime100MicroSec();
     b7e:	0e 94 d7 21 	call	0x43ae	; 0x43ae <getTime100MicroSec>
     b82:	60 93 26 04 	sts	0x0426, r22
     b86:	70 93 27 04 	sts	0x0427, r23
     b8a:	80 93 28 04 	sts	0x0428, r24
     b8e:	90 93 29 04 	sts	0x0429, r25
								demoEndTime = getTime100MicroSec();
     b92:	0e 94 d7 21 	call	0x43ae	; 0x43ae <getTime100MicroSec>
     b96:	60 93 2a 04 	sts	0x042A, r22
     b9a:	70 93 2b 04 	sts	0x042B, r23
     b9e:	80 93 2c 04 	sts	0x042C, r24
     ba2:	90 93 2d 04 	sts	0x042D, r25
								greenLedState = 0;
     ba6:	10 92 38 04 	sts	0x0438, r1
								setGreenLed(greenLedState, 1);
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	61 e0       	ldi	r22, 0x01	; 1
     bae:	0e 94 01 3e 	call	0x7c02	; 0x7c02 <setGreenLed>
     bb2:	80 91 1a 04 	lds	r24, 0x041A
     bb6:	8c cb       	rjmp	.-2280   	; 0x2d0 <main+0xf4>
					setLeftSpeed(25);
					setRightSpeed(25);
					break;

			case 6:	// robot testing
					switch(menuChoice) {
     bb8:	82 30       	cpi	r24, 0x02	; 2
     bba:	09 f0       	breq	.+2      	; 0xbbe <main+0x9e2>
     bbc:	ff cb       	rjmp	.-2050   	; 0x3bc <main+0x1e0>
							}

							break;

						case 2:	// address writing in eeprom
							if(addressReceived) {
     bbe:	80 91 f2 03 	lds	r24, 0x03F2
     bc2:	88 23       	and	r24, r24
     bc4:	09 f4       	brne	.+2      	; 0xbc8 <main+0x9ec>
     bc6:	fa cb       	rjmp	.-2060   	; 0x3bc <main+0x1e0>
								turnOnGreenLeds();
     bc8:	0e 94 b7 3e 	call	0x7d6e	; 0x7d6e <turnOnGreenLeds>
								eeprom_write_word((uint16_t*)4094, rfAddress);
     bcc:	60 91 e5 02 	lds	r22, 0x02E5
     bd0:	70 91 e6 02 	lds	r23, 0x02E6
     bd4:	8e ef       	ldi	r24, 0xFE	; 254
     bd6:	9f e0       	ldi	r25, 0x0F	; 15
     bd8:	0e 94 10 4a 	call	0x9420	; 0x9420 <__eewr_word_m2560>
								turnOffGreenLeds();
     bdc:	0e 94 9e 3e 	call	0x7d3c	; 0x7d3c <turnOffGreenLeds>
								usart0Transmit(0xAA, 1);	// successfully written
     be0:	8a ea       	ldi	r24, 0xAA	; 170
     be2:	61 e0       	ldi	r22, 0x01	; 1
     be4:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
								addressReceived = 0;
     be8:	10 92 f2 03 	sts	0x03F2, r1
								menuChoice = 0;
     bec:	10 92 f1 03 	sts	0x03F1, r1
     bf0:	80 91 1a 04 	lds	r24, 0x041A
     bf4:	6d cb       	rjmp	.-2342   	; 0x2d0 <main+0xf4>
							break;
					}
					break;

			case 10:// obstacle avoidance with random colors; 4 seconds motion and 10 seconds pause					
					switch(demoState) {
     bf6:	82 30       	cpi	r24, 0x02	; 2
     bf8:	09 f0       	breq	.+2      	; 0xbfc <main+0xa20>
     bfa:	65 ce       	rjmp	.-822    	; 0x8c6 <main+0x6ea>
								demoState = 2;							
							}
							break;

						case 2: // pause							
							if((getTime100MicroSec()-demoStartTime) >= (PAUSE_10_SEC)) {
     bfc:	0e 94 d7 21 	call	0x43ae	; 0x43ae <getTime100MicroSec>
     c00:	9b 01       	movw	r18, r22
     c02:	ac 01       	movw	r20, r24
     c04:	80 91 22 04 	lds	r24, 0x0422
     c08:	90 91 23 04 	lds	r25, 0x0423
     c0c:	a0 91 24 04 	lds	r26, 0x0424
     c10:	b0 91 25 04 	lds	r27, 0x0425
     c14:	28 1b       	sub	r18, r24
     c16:	39 0b       	sbc	r19, r25
     c18:	4a 0b       	sbc	r20, r26
     c1a:	5b 0b       	sbc	r21, r27
     c1c:	2a 39       	cpi	r18, 0x9A	; 154
     c1e:	e7 e7       	ldi	r30, 0x77	; 119
     c20:	3e 07       	cpc	r19, r30
     c22:	e1 e0       	ldi	r30, 0x01	; 1
     c24:	4e 07       	cpc	r20, r30
     c26:	e0 e0       	ldi	r30, 0x00	; 0
     c28:	5e 07       	cpc	r21, r30
     c2a:	08 f4       	brcc	.+2      	; 0xc2e <main+0xa52>
     c2c:	4c ce       	rjmp	.-872    	; 0x8c6 <main+0x6ea>
								setRightSpeed(20);
     c2e:	84 e1       	ldi	r24, 0x14	; 20
     c30:	0e 94 ac 29 	call	0x5358	; 0x5358 <setRightSpeed>
								setLeftSpeed(20);								
     c34:	84 e1       	ldi	r24, 0x14	; 20
     c36:	0e 94 8f 29 	call	0x531e	; 0x531e <setLeftSpeed>
								demoStartTime = getTime100MicroSec();								
     c3a:	0e 94 d7 21 	call	0x43ae	; 0x43ae <getTime100MicroSec>
     c3e:	60 93 22 04 	sts	0x0422, r22
     c42:	70 93 23 04 	sts	0x0423, r23
     c46:	80 93 24 04 	sts	0x0424, r24
     c4a:	90 93 25 04 	sts	0x0425, r25
								demoState = 1;							
     c4e:	20 92 1e 04 	sts	0x041E, r2
							}
							break;
					}	
					
					switch(rgbLedState) {
     c52:	80 91 39 04 	lds	r24, 0x0439
     c56:	81 30       	cpi	r24, 0x01	; 1
     c58:	09 f0       	breq	.+2      	; 0xc5c <main+0xa80>
     c5a:	3a ce       	rjmp	.-908    	; 0x8d0 <main+0x6f4>
							updateGreenLed(pwm_green);
							updateBlueLed(pwm_blue);
							break;

						case 1:		
							turnOffGreenLeds();					
     c5c:	0e 94 9e 3e 	call	0x7d3c	; 0x7d3c <turnOffGreenLeds>
							currRand = rand()% 128;	// 0 to 255 is the maximum, we use 0 to 127 to get brighter colors
     c60:	0e 94 a5 49 	call	0x934a	; 0x934a <rand>
     c64:	60 e8       	ldi	r22, 0x80	; 128
     c66:	70 e0       	ldi	r23, 0x00	; 0
     c68:	0e 94 07 49 	call	0x920e	; 0x920e <__divmodhi4>
							if(currRand > 95) {
     c6c:	80 36       	cpi	r24, 0x60	; 96
     c6e:	91 05       	cpc	r25, r1
     c70:	08 f4       	brcc	.+2      	; 0xc74 <main+0xa98>
     c72:	a4 c5       	rjmp	.+2888   	; 0x17bc <main+0x15e0>
								pwm_red = 255;
     c74:	10 93 0c 02 	sts	0x020C, r17
							} else {
								pwm_red = currRand;
							}

							currRand = rand()% 128;
     c78:	0e 94 a5 49 	call	0x934a	; 0x934a <rand>
     c7c:	60 e8       	ldi	r22, 0x80	; 128
     c7e:	70 e0       	ldi	r23, 0x00	; 0
     c80:	0e 94 07 49 	call	0x920e	; 0x920e <__divmodhi4>
							if(currRand > 95) {
     c84:	80 36       	cpi	r24, 0x60	; 96
     c86:	91 05       	cpc	r25, r1
     c88:	08 f4       	brcc	.+2      	; 0xc8c <main+0xab0>
     c8a:	95 c5       	rjmp	.+2858   	; 0x17b6 <main+0x15da>
								pwm_green = 255;
     c8c:	10 93 0d 02 	sts	0x020D, r17
							} else {
								pwm_green = currRand;
							}

							currRand = rand()% 128;
     c90:	0e 94 a5 49 	call	0x934a	; 0x934a <rand>
     c94:	60 e8       	ldi	r22, 0x80	; 128
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	0e 94 07 49 	call	0x920e	; 0x920e <__divmodhi4>
							if(currRand > 95) {
     c9c:	80 36       	cpi	r24, 0x60	; 96
     c9e:	91 05       	cpc	r25, r1
     ca0:	08 f4       	brcc	.+2      	; 0xca4 <main+0xac8>
     ca2:	86 c5       	rjmp	.+2828   	; 0x17b0 <main+0x15d4>
								pwm_blue = 255;
     ca4:	10 93 0e 02 	sts	0x020E, r17
							} else {
								pwm_blue = currRand;
							}

							currRand = rand()% 200;
     ca8:	0e 94 a5 49 	call	0x934a	; 0x934a <rand>
     cac:	68 ec       	ldi	r22, 0xC8	; 200
     cae:	70 e0       	ldi	r23, 0x00	; 0
     cb0:	0e 94 07 49 	call	0x920e	; 0x920e <__divmodhi4>
     cb4:	4c 01       	movw	r8, r24
							if(currRand<50) {
     cb6:	82 e3       	ldi	r24, 0x32	; 50
     cb8:	88 16       	cp	r8, r24
     cba:	91 04       	cpc	r9, r1
     cbc:	08 f0       	brcs	.+2      	; 0xcc0 <main+0xae4>
     cbe:	6e c5       	rjmp	.+2780   	; 0x179c <main+0x15c0>
								pwm_red = 255;
     cc0:	10 93 0c 02 	sts	0x020C, r17
     cc4:	8f ef       	ldi	r24, 0xFF	; 255
							} else if(currRand<100) {
								pwm_green = 255;
							} else if (currRand<150) {	
								pwm_blue = 255;
							}
							updateRedLed(pwm_red);
     cc6:	0e 94 c5 3d 	call	0x7b8a	; 0x7b8a <updateRedLed>
							updateGreenLed(pwm_green);
     cca:	80 91 0d 02 	lds	r24, 0x020D
     cce:	0e 94 d9 3d 	call	0x7bb2	; 0x7bb2 <updateGreenLed>
							updateBlueLed(pwm_blue);
     cd2:	80 91 0e 02 	lds	r24, 0x020E
     cd6:	0e 94 ed 3d 	call	0x7bda	; 0x7bda <updateBlueLed>
							rgbLedState = 2;
     cda:	b2 e0       	ldi	r27, 0x02	; 2
     cdc:	b0 93 39 04 	sts	0x0439, r27
     ce0:	80 91 1a 04 	lds	r24, 0x041A
							break;
     ce4:	f5 ca       	rjmp	.-2582   	; 0x2d0 <main+0xf4>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
     ce6:	84 30       	cpi	r24, 0x04	; 4
     ce8:	09 f4       	brne	.+2      	; 0xcec <main+0xb10>
     cea:	2f c3       	rjmp	.+1630   	; 0x134a <main+0x116e>
     cec:	84 30       	cpi	r24, 0x04	; 4
     cee:	08 f4       	brcc	.+2      	; 0xcf2 <main+0xb16>
     cf0:	e9 c3       	rjmp	.+2002   	; 0x14c4 <main+0x12e8>
     cf2:	85 30       	cpi	r24, 0x05	; 5
     cf4:	09 f0       	breq	.+2      	; 0xcf8 <main+0xb1c>
     cf6:	65 cd       	rjmp	.-1334   	; 0x7c2 <main+0x5e6>
							//pwm_green = 0;
							//pwm_blue = 255;													
							break;

						case 5:	// turn around
							turnOffGreenLeds();
     cf8:	0e 94 9e 3e 	call	0x7d3c	; 0x7d3c <turnOffGreenLeds>
							GREEN_LED6_ON;
     cfc:	80 91 0b 01 	lds	r24, 0x010B
     d00:	8f 7b       	andi	r24, 0xBF	; 191
     d02:	80 93 0b 01 	sts	0x010B, r24
							GREEN_LED7_ON;
     d06:	80 91 0b 01 	lds	r24, 0x010B
     d0a:	8f 77       	andi	r24, 0x7F	; 127
     d0c:	80 93 0b 01 	sts	0x010B, r24
							demoEndTime = getTime100MicroSec();
     d10:	0e 94 d7 21 	call	0x43ae	; 0x43ae <getTime100MicroSec>
     d14:	9b 01       	movw	r18, r22
     d16:	ac 01       	movw	r20, r24
     d18:	60 93 2a 04 	sts	0x042A, r22
     d1c:	70 93 2b 04 	sts	0x042B, r23
     d20:	80 93 2c 04 	sts	0x042C, r24
     d24:	90 93 2d 04 	sts	0x042D, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_750_MSEC)) {
     d28:	80 91 22 04 	lds	r24, 0x0422
     d2c:	90 91 23 04 	lds	r25, 0x0423
     d30:	a0 91 24 04 	lds	r26, 0x0424
     d34:	b0 91 25 04 	lds	r27, 0x0425
     d38:	28 1b       	sub	r18, r24
     d3a:	39 0b       	sbc	r19, r25
     d3c:	4a 0b       	sbc	r20, r26
     d3e:	5b 0b       	sbc	r21, r27
     d40:	2b 32       	cpi	r18, 0x2B	; 43
     d42:	6c e1       	ldi	r22, 0x1C	; 28
     d44:	36 07       	cpc	r19, r22
     d46:	60 e0       	ldi	r22, 0x00	; 0
     d48:	46 07       	cpc	r20, r22
     d4a:	60 e0       	ldi	r22, 0x00	; 0
     d4c:	56 07       	cpc	r21, r22
     d4e:	08 f4       	brcc	.+2      	; 0xd52 <main+0xb76>
     d50:	38 cd       	rjmp	.-1424   	; 0x7c2 <main+0x5e6>
								demoStartTime = getTime100MicroSec();
     d52:	0e 94 d7 21 	call	0x43ae	; 0x43ae <getTime100MicroSec>
     d56:	60 93 22 04 	sts	0x0422, r22
     d5a:	70 93 23 04 	sts	0x0423, r23
     d5e:	80 93 24 04 	sts	0x0424, r24
     d62:	90 93 25 04 	sts	0x0425, r25
								demoState = 0;							
     d66:	10 92 1e 04 	sts	0x041E, r1
     d6a:	2b cd       	rjmp	.-1450   	; 0x7c2 <main+0x5e6>
			case 13: // IR comm transmitter

				break;
			
			case 14: // IR comm receiver
				switch(irCommState) {
     d6c:	86 30       	cpi	r24, 0x06	; 6
     d6e:	09 f4       	brne	.+2      	; 0xd72 <main+0xb96>
     d70:	f6 c6       	rjmp	.+3564   	; 0x1b5e <main+0x1982>
     d72:	86 30       	cpi	r24, 0x06	; 6
     d74:	08 f0       	brcs	.+2      	; 0xd78 <main+0xb9c>
     d76:	00 c5       	rjmp	.+2560   	; 0x1778 <main+0x159c>
						break;

					case IRCOMM_RX_WAITING_BIT:
						//updateBlueLed(255);
						//turnOffGreenLeds();
						GREEN_LED5_ON;
     d78:	80 91 0b 01 	lds	r24, 0x010B
     d7c:	8f 7d       	andi	r24, 0xDF	; 223
     d7e:	80 93 0b 01 	sts	0x010B, r24
					break;

		}

		if(currentSelector!=0) {
			handleMotorsWithSpeedController();  
     d82:	0e 94 09 35 	call	0x6a12	; 0x6a12 <handleMotorsWithSpeedController>
     d86:	80 91 1a 04 	lds	r24, 0x041A
     d8a:	a6 ca       	rjmp	.-2740   	; 0x2d8 <main+0xfc>
				
				if(currRand<32) {
					if(pwm_green!=255 && pwm_blue!=255) {	// do not turn on all leds
						pwm_red = 255;
					}
				} else if(currRand<64) {
     d8c:	90 e4       	ldi	r25, 0x40	; 64
     d8e:	89 16       	cp	r8, r25
     d90:	91 04       	cpc	r9, r1
     d92:	08 f0       	brcs	.+2      	; 0xd96 <main+0xbba>
     d94:	dc c3       	rjmp	.+1976   	; 0x154e <main+0x1372>
					if(pwm_red!=255 && pwm_blue!=255) {
     d96:	80 91 0c 02 	lds	r24, 0x020C
     d9a:	8f 3f       	cpi	r24, 0xFF	; 255
     d9c:	09 f4       	brne	.+2      	; 0xda0 <main+0xbc4>
     d9e:	39 cc       	rjmp	.-1934   	; 0x612 <main+0x436>
     da0:	80 91 0e 02 	lds	r24, 0x020E
     da4:	8f 3f       	cpi	r24, 0xFF	; 255
     da6:	09 f4       	brne	.+2      	; 0xdaa <main+0xbce>
     da8:	34 cc       	rjmp	.-1944   	; 0x612 <main+0x436>
						pwm_green = 255;
     daa:	10 93 0d 02 	sts	0x020D, r17
     dae:	31 cc       	rjmp	.-1950   	; 0x612 <main+0x436>
			
				srand(TCNT3);
				currRand2 = rand()%128;
				if(currRand2<32) {
					pwm_red = 255;
				} else if(currRand2<64) {
     db0:	80 34       	cpi	r24, 0x40	; 64
     db2:	91 05       	cpc	r25, r1
     db4:	08 f0       	brcs	.+2      	; 0xdb8 <main+0xbdc>
     db6:	f8 c3       	rjmp	.+2032   	; 0x15a8 <main+0x13cc>
					pwm_green = 255;
     db8:	10 93 0d 02 	sts	0x020D, r17
     dbc:	9e ce       	rjmp	.-708    	; 0xafa <main+0x91e>
							break;

						case 1:	// send sensors data and activate actuators
							//setRightSpeed(20);
							//setLeftSpeed(20);
							turnOnGreenLeds();
     dbe:	0e 94 b7 3e 	call	0x7d6e	; 0x7d6e <turnOnGreenLeds>
							updateRedLed(pwm_red);
     dc2:	80 91 0c 02 	lds	r24, 0x020C
     dc6:	0e 94 c5 3d 	call	0x7b8a	; 0x7b8a <updateRedLed>
							updateGreenLed(pwm_green);
     dca:	80 91 0d 02 	lds	r24, 0x020D
     dce:	0e 94 d9 3d 	call	0x7bb2	; 0x7bb2 <updateGreenLed>
							updateBlueLed(pwm_blue);
     dd2:	80 91 0e 02 	lds	r24, 0x020E
     dd6:	0e 94 ed 3d 	call	0x7bda	; 0x7bda <updateBlueLed>
							LED_IR1_LOW;
     dda:	44 98       	cbi	0x08, 4	; 8
							LED_IR2_LOW;
     ddc:	45 98       	cbi	0x08, 5	; 8
							
							if(getDataNow) {
     dde:	80 91 f4 03 	lds	r24, 0x03F4
     de2:	88 23       	and	r24, r24
     de4:	09 f4       	brne	.+2      	; 0xde8 <main+0xc0c>
     de6:	38 cc       	rjmp	.-1936   	; 0x658 <main+0x47c>
								getDataNow = 0;	
     de8:	10 92 f4 03 	sts	0x03F4, r1
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     dec:	80 91 29 02 	lds	r24, 0x0229
     df0:	61 e0       	ldi	r22, 0x01	; 1
     df2:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     df6:	80 91 2a 02 	lds	r24, 0x022A
     dfa:	61 e0       	ldi	r22, 0x01	; 1
     dfc:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     e00:	80 91 27 02 	lds	r24, 0x0227
     e04:	61 e0       	ldi	r22, 0x01	; 1
     e06:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     e0a:	80 91 28 02 	lds	r24, 0x0228
     e0e:	61 e0       	ldi	r22, 0x01	; 1
     e10:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     e14:	80 91 2b 02 	lds	r24, 0x022B
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     e1e:	80 91 2c 02 	lds	r24, 0x022C
     e22:	61 e0       	ldi	r22, 0x01	; 1
     e24:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     e28:	80 91 2b 02 	lds	r24, 0x022B
     e2c:	61 e0       	ldi	r22, 0x01	; 1
     e2e:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     e32:	80 91 2c 02 	lds	r24, 0x022C
     e36:	61 e0       	ldi	r22, 0x01	; 1
     e38:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     e3c:	80 91 2d 02 	lds	r24, 0x022D
     e40:	61 e0       	ldi	r22, 0x01	; 1
     e42:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     e46:	80 91 2e 02 	lds	r24, 0x022E
     e4a:	61 e0       	ldi	r22, 0x01	; 1
     e4c:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     e50:	80 91 2f 02 	lds	r24, 0x022F
     e54:	61 e0       	ldi	r22, 0x01	; 1
     e56:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     e5a:	80 91 30 02 	lds	r24, 0x0230
     e5e:	61 e0       	ldi	r22, 0x01	; 1
     e60:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     e64:	80 91 2f 02 	lds	r24, 0x022F
     e68:	61 e0       	ldi	r22, 0x01	; 1
     e6a:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     e6e:	80 91 30 02 	lds	r24, 0x0230
     e72:	61 e0       	ldi	r22, 0x01	; 1
     e74:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     e78:	80 91 33 02 	lds	r24, 0x0233
     e7c:	61 e0       	ldi	r22, 0x01	; 1
     e7e:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     e82:	80 91 34 02 	lds	r24, 0x0234
     e86:	61 e0       	ldi	r22, 0x01	; 1
     e88:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     e8c:	80 91 31 02 	lds	r24, 0x0231
     e90:	61 e0       	ldi	r22, 0x01	; 1
     e92:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     e96:	80 91 32 02 	lds	r24, 0x0232
     e9a:	61 e0       	ldi	r22, 0x01	; 1
     e9c:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     ea0:	80 91 37 02 	lds	r24, 0x0237
     ea4:	61 e0       	ldi	r22, 0x01	; 1
     ea6:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     eaa:	80 91 38 02 	lds	r24, 0x0238
     eae:	61 e0       	ldi	r22, 0x01	; 1
     eb0:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     eb4:	80 91 33 02 	lds	r24, 0x0233
     eb8:	61 e0       	ldi	r22, 0x01	; 1
     eba:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     ebe:	80 91 34 02 	lds	r24, 0x0234
     ec2:	61 e0       	ldi	r22, 0x01	; 1
     ec4:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     ec8:	80 91 3b 02 	lds	r24, 0x023B
     ecc:	61 e0       	ldi	r22, 0x01	; 1
     ece:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     ed2:	80 91 3c 02 	lds	r24, 0x023C
     ed6:	61 e0       	ldi	r22, 0x01	; 1
     ed8:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     edc:	80 91 35 02 	lds	r24, 0x0235
     ee0:	61 e0       	ldi	r22, 0x01	; 1
     ee2:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     ee6:	80 91 36 02 	lds	r24, 0x0236
     eea:	61 e0       	ldi	r22, 0x01	; 1
     eec:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     ef0:	80 91 3f 02 	lds	r24, 0x023F
     ef4:	61 e0       	ldi	r22, 0x01	; 1
     ef6:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     efa:	80 91 40 02 	lds	r24, 0x0240
     efe:	61 e0       	ldi	r22, 0x01	; 1
     f00:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     f04:	80 91 37 02 	lds	r24, 0x0237
     f08:	61 e0       	ldi	r22, 0x01	; 1
     f0a:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     f0e:	80 91 38 02 	lds	r24, 0x0238
     f12:	61 e0       	ldi	r22, 0x01	; 1
     f14:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     f18:	80 91 43 02 	lds	r24, 0x0243
     f1c:	61 e0       	ldi	r22, 0x01	; 1
     f1e:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     f22:	80 91 44 02 	lds	r24, 0x0244
     f26:	61 e0       	ldi	r22, 0x01	; 1
     f28:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     f2c:	80 91 39 02 	lds	r24, 0x0239
     f30:	61 e0       	ldi	r22, 0x01	; 1
     f32:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     f36:	80 91 3a 02 	lds	r24, 0x023A
     f3a:	61 e0       	ldi	r22, 0x01	; 1
     f3c:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     f40:	80 91 47 02 	lds	r24, 0x0247
     f44:	61 e0       	ldi	r22, 0x01	; 1
     f46:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     f4a:	80 91 48 02 	lds	r24, 0x0248
     f4e:	61 e0       	ldi	r22, 0x01	; 1
     f50:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     f54:	80 91 3b 02 	lds	r24, 0x023B
     f58:	61 e0       	ldi	r22, 0x01	; 1
     f5a:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     f5e:	80 91 3c 02 	lds	r24, 0x023C
     f62:	61 e0       	ldi	r22, 0x01	; 1
     f64:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     f68:	80 91 4b 02 	lds	r24, 0x024B
     f6c:	61 e0       	ldi	r22, 0x01	; 1
     f6e:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     f72:	80 91 4c 02 	lds	r24, 0x024C
     f76:	61 e0       	ldi	r22, 0x01	; 1
     f78:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     f7c:	80 91 3d 02 	lds	r24, 0x023D
     f80:	61 e0       	ldi	r22, 0x01	; 1
     f82:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     f86:	80 91 3e 02 	lds	r24, 0x023E
     f8a:	61 e0       	ldi	r22, 0x01	; 1
     f8c:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     f90:	80 91 4f 02 	lds	r24, 0x024F
     f94:	61 e0       	ldi	r22, 0x01	; 1
     f96:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     f9a:	80 91 50 02 	lds	r24, 0x0250
     f9e:	61 e0       	ldi	r22, 0x01	; 1
     fa0:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     fa4:	80 91 3f 02 	lds	r24, 0x023F
     fa8:	61 e0       	ldi	r22, 0x01	; 1
     faa:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     fae:	80 91 40 02 	lds	r24, 0x0240
     fb2:	61 e0       	ldi	r22, 0x01	; 1
     fb4:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     fb8:	80 91 53 02 	lds	r24, 0x0253
     fbc:	61 e0       	ldi	r22, 0x01	; 1
     fbe:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     fc2:	80 91 54 02 	lds	r24, 0x0254
     fc6:	61 e0       	ldi	r22, 0x01	; 1
     fc8:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
								}
								usart0Transmit(accX&0xFF,1);
     fcc:	80 91 fa 03 	lds	r24, 0x03FA
     fd0:	61 e0       	ldi	r22, 0x01	; 1
     fd2:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
								usart0Transmit(accX>>8,1);
     fd6:	80 91 fb 03 	lds	r24, 0x03FB
     fda:	61 e0       	ldi	r22, 0x01	; 1
     fdc:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
								usart0Transmit(accY&0xFF,1);
     fe0:	80 91 fc 03 	lds	r24, 0x03FC
     fe4:	61 e0       	ldi	r22, 0x01	; 1
     fe6:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
								usart0Transmit(accY>>8,1);
     fea:	80 91 fd 03 	lds	r24, 0x03FD
     fee:	61 e0       	ldi	r22, 0x01	; 1
     ff0:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
								usart0Transmit(accZ&0xFF,1);
     ff4:	80 91 fe 03 	lds	r24, 0x03FE
     ff8:	61 e0       	ldi	r22, 0x01	; 1
     ffa:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
								usart0Transmit(accZ>>8,1);
     ffe:	80 91 ff 03 	lds	r24, 0x03FF
    1002:	61 e0       	ldi	r22, 0x01	; 1
    1004:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
								usart0Transmit(irCommand,1);
    1008:	80 91 f5 03 	lds	r24, 0x03F5
    100c:	61 e0       	ldi	r22, 0x01	; 1
    100e:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
								usart0Transmit(currentSelector,1);
    1012:	80 91 1a 04 	lds	r24, 0x041A
    1016:	61 e0       	ldi	r22, 0x01	; 1
    1018:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
								usart0Transmit(BUTTON0,1);
    101c:	80 91 03 01 	lds	r24, 0x0103
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	80 72       	andi	r24, 0x20	; 32
    1024:	90 70       	andi	r25, 0x00	; 0
    1026:	95 95       	asr	r25
    1028:	87 95       	ror	r24
    102a:	95 95       	asr	r25
    102c:	87 95       	ror	r24
    102e:	95 95       	asr	r25
    1030:	87 95       	ror	r24
    1032:	95 95       	asr	r25
    1034:	87 95       	ror	r24
    1036:	95 95       	asr	r25
    1038:	87 95       	ror	r24
    103a:	61 e0       	ldi	r22, 0x01	; 1
    103c:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
								usart0Transmit(rfFlags,1);
    1040:	80 91 e7 02 	lds	r24, 0x02E7
    1044:	61 e0       	ldi	r22, 0x01	; 1
    1046:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
								usart0Transmit(((unsigned int)(theta*573.0))&0xFF,1);	// radians to degrees => 573 = 1800/PI
    104a:	60 91 3d 04 	lds	r22, 0x043D
    104e:	70 91 3e 04 	lds	r23, 0x043E
    1052:	80 91 3f 04 	lds	r24, 0x043F
    1056:	90 91 40 04 	lds	r25, 0x0440
    105a:	20 e0       	ldi	r18, 0x00	; 0
    105c:	30 e4       	ldi	r19, 0x40	; 64
    105e:	4f e0       	ldi	r20, 0x0F	; 15
    1060:	54 e4       	ldi	r21, 0x44	; 68
    1062:	0e 94 49 48 	call	0x9092	; 0x9092 <__mulsf3>
    1066:	0e 94 06 47 	call	0x8e0c	; 0x8e0c <__fixunssfsi>
    106a:	86 2f       	mov	r24, r22
    106c:	61 e0       	ldi	r22, 0x01	; 1
    106e:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
								usart0Transmit(((unsigned int)(theta*573.0))>>8,1);
    1072:	60 91 3d 04 	lds	r22, 0x043D
    1076:	70 91 3e 04 	lds	r23, 0x043E
    107a:	80 91 3f 04 	lds	r24, 0x043F
    107e:	90 91 40 04 	lds	r25, 0x0440
    1082:	20 e0       	ldi	r18, 0x00	; 0
    1084:	30 e4       	ldi	r19, 0x40	; 64
    1086:	4f e0       	ldi	r20, 0x0F	; 15
    1088:	54 e4       	ldi	r21, 0x44	; 68
    108a:	0e 94 49 48 	call	0x9092	; 0x9092 <__mulsf3>
    108e:	0e 94 06 47 	call	0x8e0c	; 0x8e0c <__fixunssfsi>
    1092:	87 2f       	mov	r24, r23
    1094:	61 e0       	ldi	r22, 0x01	; 1
    1096:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
								usart0Transmit(((unsigned int)xPos)&0xFF,1);
    109a:	60 91 45 04 	lds	r22, 0x0445
    109e:	70 91 46 04 	lds	r23, 0x0446
    10a2:	80 91 47 04 	lds	r24, 0x0447
    10a6:	90 91 48 04 	lds	r25, 0x0448
    10aa:	0e 94 06 47 	call	0x8e0c	; 0x8e0c <__fixunssfsi>
    10ae:	86 2f       	mov	r24, r22
    10b0:	61 e0       	ldi	r22, 0x01	; 1
    10b2:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
								usart0Transmit(((unsigned int)xPos)>>8,1);
    10b6:	60 91 45 04 	lds	r22, 0x0445
    10ba:	70 91 46 04 	lds	r23, 0x0446
    10be:	80 91 47 04 	lds	r24, 0x0447
    10c2:	90 91 48 04 	lds	r25, 0x0448
    10c6:	0e 94 06 47 	call	0x8e0c	; 0x8e0c <__fixunssfsi>
    10ca:	87 2f       	mov	r24, r23
    10cc:	61 e0       	ldi	r22, 0x01	; 1
    10ce:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
								usart0Transmit(((unsigned int)yPos)&0xFF,1);
    10d2:	60 91 49 04 	lds	r22, 0x0449
    10d6:	70 91 4a 04 	lds	r23, 0x044A
    10da:	80 91 4b 04 	lds	r24, 0x044B
    10de:	90 91 4c 04 	lds	r25, 0x044C
    10e2:	0e 94 06 47 	call	0x8e0c	; 0x8e0c <__fixunssfsi>
    10e6:	86 2f       	mov	r24, r22
    10e8:	61 e0       	ldi	r22, 0x01	; 1
    10ea:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
								usart0Transmit(((unsigned int)yPos)>>8,1);
    10ee:	60 91 49 04 	lds	r22, 0x0449
    10f2:	70 91 4a 04 	lds	r23, 0x044A
    10f6:	80 91 4b 04 	lds	r24, 0x044B
    10fa:	90 91 4c 04 	lds	r25, 0x044C
    10fe:	0e 94 06 47 	call	0x8e0c	; 0x8e0c <__fixunssfsi>
    1102:	87 2f       	mov	r24, r23
    1104:	61 e0       	ldi	r22, 0x01	; 1
    1106:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)&0xFF,1);
    110a:	60 91 a5 02 	lds	r22, 0x02A5
    110e:	70 91 a6 02 	lds	r23, 0x02A6
    1112:	80 91 a7 02 	lds	r24, 0x02A7
    1116:	90 91 a8 02 	lds	r25, 0x02A8
    111a:	0e 94 01 47 	call	0x8e02	; 0x8e02 <__fixsfsi>
    111e:	86 2f       	mov	r24, r22
    1120:	61 e0       	ldi	r22, 0x01	; 1
    1122:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)>>8,1);
    1126:	60 91 a5 02 	lds	r22, 0x02A5
    112a:	70 91 a6 02 	lds	r23, 0x02A6
    112e:	80 91 a7 02 	lds	r24, 0x02A7
    1132:	90 91 a8 02 	lds	r25, 0x02A8
    1136:	0e 94 01 47 	call	0x8e02	; 0x8e02 <__fixsfsi>
    113a:	87 2f       	mov	r24, r23
    113c:	61 e0       	ldi	r22, 0x01	; 1
    113e:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)>>16,1);
    1142:	60 91 a5 02 	lds	r22, 0x02A5
    1146:	70 91 a6 02 	lds	r23, 0x02A6
    114a:	80 91 a7 02 	lds	r24, 0x02A7
    114e:	90 91 a8 02 	lds	r25, 0x02A8
    1152:	0e 94 01 47 	call	0x8e02	; 0x8e02 <__fixsfsi>
    1156:	61 e0       	ldi	r22, 0x01	; 1
    1158:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)>>24,1);
    115c:	60 91 a5 02 	lds	r22, 0x02A5
    1160:	70 91 a6 02 	lds	r23, 0x02A6
    1164:	80 91 a7 02 	lds	r24, 0x02A7
    1168:	90 91 a8 02 	lds	r25, 0x02A8
    116c:	0e 94 01 47 	call	0x8e02	; 0x8e02 <__fixsfsi>
    1170:	89 2f       	mov	r24, r25
    1172:	61 e0       	ldi	r22, 0x01	; 1
    1174:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)&0xFF,1);
    1178:	60 91 a1 02 	lds	r22, 0x02A1
    117c:	70 91 a2 02 	lds	r23, 0x02A2
    1180:	80 91 a3 02 	lds	r24, 0x02A3
    1184:	90 91 a4 02 	lds	r25, 0x02A4
    1188:	0e 94 01 47 	call	0x8e02	; 0x8e02 <__fixsfsi>
    118c:	86 2f       	mov	r24, r22
    118e:	61 e0       	ldi	r22, 0x01	; 1
    1190:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)>>8,1);
    1194:	60 91 a1 02 	lds	r22, 0x02A1
    1198:	70 91 a2 02 	lds	r23, 0x02A2
    119c:	80 91 a3 02 	lds	r24, 0x02A3
    11a0:	90 91 a4 02 	lds	r25, 0x02A4
    11a4:	0e 94 01 47 	call	0x8e02	; 0x8e02 <__fixsfsi>
    11a8:	87 2f       	mov	r24, r23
    11aa:	61 e0       	ldi	r22, 0x01	; 1
    11ac:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)>>16,1);
    11b0:	60 91 a1 02 	lds	r22, 0x02A1
    11b4:	70 91 a2 02 	lds	r23, 0x02A2
    11b8:	80 91 a3 02 	lds	r24, 0x02A3
    11bc:	90 91 a4 02 	lds	r25, 0x02A4
    11c0:	0e 94 01 47 	call	0x8e02	; 0x8e02 <__fixsfsi>
    11c4:	61 e0       	ldi	r22, 0x01	; 1
    11c6:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)>>24,1);
    11ca:	60 91 a1 02 	lds	r22, 0x02A1
    11ce:	70 91 a2 02 	lds	r23, 0x02A2
    11d2:	80 91 a3 02 	lds	r24, 0x02A3
    11d6:	90 91 a4 02 	lds	r25, 0x02A4
    11da:	0e 94 01 47 	call	0x8e02	; 0x8e02 <__fixsfsi>
    11de:	89 2f       	mov	r24, r25
    11e0:	61 e0       	ldi	r22, 0x01	; 1
    11e2:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
								usart0Transmit(pwm_left_desired>>2, 1);
    11e6:	80 91 cb 02 	lds	r24, 0x02CB
    11ea:	90 91 cc 02 	lds	r25, 0x02CC
    11ee:	95 95       	asr	r25
    11f0:	87 95       	ror	r24
    11f2:	95 95       	asr	r25
    11f4:	87 95       	ror	r24
    11f6:	61 e0       	ldi	r22, 0x01	; 1
    11f8:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
								usart0Transmit(pwm_right_desired>>2, 1);
    11fc:	80 91 c9 02 	lds	r24, 0x02C9
    1200:	90 91 ca 02 	lds	r25, 0x02CA
    1204:	95 95       	asr	r25
    1206:	87 95       	ror	r24
    1208:	95 95       	asr	r25
    120a:	87 95       	ror	r24
    120c:	61 e0       	ldi	r22, 0x01	; 1
    120e:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
    1212:	80 91 1a 04 	lds	r24, 0x041A
    1216:	5c c8       	rjmp	.-3912   	; 0x2d0 <main+0xf4>
							setLeftSpeed(20);
							setRightSpeed(20);
							demoState = 1;
							break;
						case 1: // motion					
							if((getTime100MicroSec()-demoStartTime) >= (PAUSE_4_SEC)) {
    1218:	0e 94 d7 21 	call	0x43ae	; 0x43ae <getTime100MicroSec>
    121c:	9b 01       	movw	r18, r22
    121e:	ac 01       	movw	r20, r24
    1220:	80 91 22 04 	lds	r24, 0x0422
    1224:	90 91 23 04 	lds	r25, 0x0423
    1228:	a0 91 24 04 	lds	r26, 0x0424
    122c:	b0 91 25 04 	lds	r27, 0x0425
    1230:	28 1b       	sub	r18, r24
    1232:	39 0b       	sbc	r19, r25
    1234:	4a 0b       	sbc	r20, r26
    1236:	5b 0b       	sbc	r21, r27
    1238:	2e 33       	cpi	r18, 0x3E	; 62
    123a:	a6 e9       	ldi	r26, 0x96	; 150
    123c:	3a 07       	cpc	r19, r26
    123e:	a0 e0       	ldi	r26, 0x00	; 0
    1240:	4a 07       	cpc	r20, r26
    1242:	a0 e0       	ldi	r26, 0x00	; 0
    1244:	5a 07       	cpc	r21, r26
    1246:	08 f4       	brcc	.+2      	; 0x124a <main+0x106e>
    1248:	3e cb       	rjmp	.-2436   	; 0x8c6 <main+0x6ea>
								setRightSpeed(0);
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	0e 94 ac 29 	call	0x5358	; 0x5358 <setRightSpeed>
								setLeftSpeed(0);								
    1250:	80 e0       	ldi	r24, 0x00	; 0
    1252:	0e 94 8f 29 	call	0x531e	; 0x531e <setLeftSpeed>
								demoStartTime = getTime100MicroSec();
    1256:	0e 94 d7 21 	call	0x43ae	; 0x43ae <getTime100MicroSec>
    125a:	60 93 22 04 	sts	0x0422, r22
    125e:	70 93 23 04 	sts	0x0423, r23
    1262:	80 93 24 04 	sts	0x0424, r24
    1266:	90 93 25 04 	sts	0x0425, r25
								demoState = 2;							
    126a:	b2 e0       	ldi	r27, 0x02	; 2
    126c:	b0 93 1e 04 	sts	0x041E, r27
    1270:	2a cb       	rjmp	.-2476   	; 0x8c6 <main+0x6ea>
							demoStartTime = getTime100MicroSec();
							demoState = 1;
							break;

						case 1:
							if((getTime100MicroSec()-demoStartTime) >= (PAUSE_2_SEC)) {
    1272:	0e 94 d7 21 	call	0x43ae	; 0x43ae <getTime100MicroSec>
    1276:	9b 01       	movw	r18, r22
    1278:	ac 01       	movw	r20, r24
    127a:	80 91 22 04 	lds	r24, 0x0422
    127e:	90 91 23 04 	lds	r25, 0x0423
    1282:	a0 91 24 04 	lds	r26, 0x0424
    1286:	b0 91 25 04 	lds	r27, 0x0425
    128a:	28 1b       	sub	r18, r24
    128c:	39 0b       	sbc	r19, r25
    128e:	4a 0b       	sbc	r20, r26
    1290:	5b 0b       	sbc	r21, r27
    1292:	2e 31       	cpi	r18, 0x1E	; 30
    1294:	8b e4       	ldi	r24, 0x4B	; 75
    1296:	38 07       	cpc	r19, r24
    1298:	80 e0       	ldi	r24, 0x00	; 0
    129a:	48 07       	cpc	r20, r24
    129c:	80 e0       	ldi	r24, 0x00	; 0
    129e:	58 07       	cpc	r21, r24
    12a0:	08 f4       	brcc	.+2      	; 0x12a4 <main+0x10c8>
    12a2:	da c9       	rjmp	.-3148   	; 0x658 <main+0x47c>
								demoState = 2;
    12a4:	92 e0       	ldi	r25, 0x02	; 2
    12a6:	90 93 1e 04 	sts	0x041E, r25
    12aa:	80 91 1a 04 	lds	r24, 0x041A
    12ae:	10 c8       	rjmp	.-4064   	; 0x2d0 <main+0xf4>
			readBatteryLevel();				// the battery level is updated every two seconds
             		
			if(currentSelector==4 || currentSelector==5) {
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption

				switch(rgbState) {
    12b0:	82 30       	cpi	r24, 0x02	; 2
    12b2:	09 f0       	breq	.+2      	; 0x12b6 <main+0x10da>
    12b4:	bc cb       	rjmp	.-2184   	; 0xa2e <main+0x852>
						pwm_green = 255 - currRand;
						rgbState = 2;
						break;

					case 2:
						pwm_blue = 255 - currRand;
    12b6:	88 2d       	mov	r24, r8
    12b8:	80 95       	com	r24
    12ba:	80 93 0e 02 	sts	0x020E, r24
						rgbState = 0;
    12be:	10 92 ea 02 	sts	0x02EA, r1
						break;
    12c2:	b5 cb       	rjmp	.-2198   	; 0xa2e <main+0x852>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
    12c4:	81 30       	cpi	r24, 0x01	; 1
    12c6:	09 f0       	breq	.+2      	; 0x12ca <main+0x10ee>
    12c8:	7c ca       	rjmp	.-2824   	; 0x7c2 <main+0x5e6>
							//pwm_green = 255;
							//pwm_blue = 255;
							break;

						case 1:	// search for a line
							turnOffGreenLeds();
    12ca:	0e 94 9e 3e 	call	0x7d3c	; 0x7d3c <turnOffGreenLeds>
							GREEN_LED2_ON;
    12ce:	80 91 0b 01 	lds	r24, 0x010B
    12d2:	8b 7f       	andi	r24, 0xFB	; 251
    12d4:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED3_ON;
							outOfLine = 0;
    12d8:	10 92 20 04 	sts	0x0420, r1
							enableObstacleAvoidance();
    12dc:	0e 94 7a 3d 	call	0x7af4	; 0x7af4 <enableObstacleAvoidance>
							setRightSpeed(15);
    12e0:	8f e0       	ldi	r24, 0x0F	; 15
    12e2:	0e 94 ac 29 	call	0x5358	; 0x5358 <setRightSpeed>
							setLeftSpeed(15);
    12e6:	8f e0       	ldi	r24, 0x0F	; 15
    12e8:	0e 94 8f 29 	call	0x531e	; 0x531e <setLeftSpeed>
							if(proximityResult[9]<LINE_IN_THR || proximityResult[10]<LINE_IN_THR || proximityResult[8]<LINE_IN_THR || proximityResult[11]<LINE_IN_THR) {
    12ec:	80 91 3b 02 	lds	r24, 0x023B
    12f0:	90 91 3c 02 	lds	r25, 0x023C
    12f4:	a1 e0       	ldi	r26, 0x01	; 1
    12f6:	80 39       	cpi	r24, 0x90	; 144
    12f8:	9a 07       	cpc	r25, r26
    12fa:	0c f4       	brge	.+2      	; 0x12fe <main+0x1122>
    12fc:	3a c1       	rjmp	.+628    	; 0x1572 <main+0x1396>
    12fe:	80 91 3d 02 	lds	r24, 0x023D
    1302:	90 91 3e 02 	lds	r25, 0x023E
    1306:	b1 e0       	ldi	r27, 0x01	; 1
    1308:	80 39       	cpi	r24, 0x90	; 144
    130a:	9b 07       	cpc	r25, r27
    130c:	0c f4       	brge	.+2      	; 0x1310 <main+0x1134>
    130e:	31 c1       	rjmp	.+610    	; 0x1572 <main+0x1396>
    1310:	80 91 39 02 	lds	r24, 0x0239
    1314:	90 91 3a 02 	lds	r25, 0x023A
    1318:	e1 e0       	ldi	r30, 0x01	; 1
    131a:	80 39       	cpi	r24, 0x90	; 144
    131c:	9e 07       	cpc	r25, r30
    131e:	0c f4       	brge	.+2      	; 0x1322 <main+0x1146>
    1320:	28 c1       	rjmp	.+592    	; 0x1572 <main+0x1396>
    1322:	80 91 3f 02 	lds	r24, 0x023F
    1326:	90 91 40 02 	lds	r25, 0x0240
    132a:	f1 e0       	ldi	r31, 0x01	; 1
    132c:	80 39       	cpi	r24, 0x90	; 144
    132e:	9f 07       	cpc	r25, r31
    1330:	0c f4       	brge	.+2      	; 0x1334 <main+0x1158>
    1332:	1f c1       	rjmp	.+574    	; 0x1572 <main+0x1396>
									demoStartTime = getTime100MicroSec();
									demoState = 2;
									break;
								}
							} else {
								lineFound = 0;
    1334:	10 92 1f 04 	sts	0x041F, r1
    1338:	44 ca       	rjmp	.-2936   	; 0x7c2 <main+0x5e6>
						pwm_red = 255 - currRand;	
						rgbState = 1;
						break;

					case 1:
						pwm_green = 255 - currRand;
    133a:	88 2d       	mov	r24, r8
    133c:	80 95       	com	r24
    133e:	80 93 0d 02 	sts	0x020D, r24
						rgbState = 2;
    1342:	62 e0       	ldi	r22, 0x02	; 2
    1344:	60 93 ea 02 	sts	0x02EA, r22
						break;
    1348:	72 cb       	rjmp	.-2332   	; 0xa2e <main+0x852>
							//pwm_green = 255;
							//pwm_blue = 0;
							break;
						
						case 4: // go back from charger
							turnOffGreenLeds();
    134a:	0e 94 9e 3e 	call	0x7d3c	; 0x7d3c <turnOffGreenLeds>
							GREEN_LED6_ON;
    134e:	80 91 0b 01 	lds	r24, 0x010B
    1352:	8f 7b       	andi	r24, 0xBF	; 191
    1354:	80 93 0b 01 	sts	0x010B, r24
							GREEN_LED7_ON;
    1358:	80 91 0b 01 	lds	r24, 0x010B
    135c:	8f 77       	andi	r24, 0x7F	; 127
    135e:	80 93 0b 01 	sts	0x010B, r24
							demoEndTime = getTime100MicroSec();
    1362:	0e 94 d7 21 	call	0x43ae	; 0x43ae <getTime100MicroSec>
    1366:	9b 01       	movw	r18, r22
    1368:	ac 01       	movw	r20, r24
    136a:	60 93 2a 04 	sts	0x042A, r22
    136e:	70 93 2b 04 	sts	0x042B, r23
    1372:	80 93 2c 04 	sts	0x042C, r24
    1376:	90 93 2d 04 	sts	0x042D, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_1_SEC)) {
    137a:	80 91 22 04 	lds	r24, 0x0422
    137e:	90 91 23 04 	lds	r25, 0x0423
    1382:	a0 91 24 04 	lds	r26, 0x0424
    1386:	b0 91 25 04 	lds	r27, 0x0425
    138a:	28 1b       	sub	r18, r24
    138c:	39 0b       	sbc	r19, r25
    138e:	4a 0b       	sbc	r20, r26
    1390:	5b 0b       	sbc	r21, r27
    1392:	2f 38       	cpi	r18, 0x8F	; 143
    1394:	e5 e2       	ldi	r30, 0x25	; 37
    1396:	3e 07       	cpc	r19, r30
    1398:	e0 e0       	ldi	r30, 0x00	; 0
    139a:	4e 07       	cpc	r20, r30
    139c:	e0 e0       	ldi	r30, 0x00	; 0
    139e:	5e 07       	cpc	r21, r30
    13a0:	08 f4       	brcc	.+2      	; 0x13a4 <main+0x11c8>
    13a2:	0f ca       	rjmp	.-3042   	; 0x7c2 <main+0x5e6>
								setRightSpeed(20);
    13a4:	84 e1       	ldi	r24, 0x14	; 20
    13a6:	0e 94 ac 29 	call	0x5358	; 0x5358 <setRightSpeed>
								setLeftSpeed(-20);								
    13aa:	8c ee       	ldi	r24, 0xEC	; 236
    13ac:	0e 94 8f 29 	call	0x531e	; 0x531e <setLeftSpeed>
								demoStartTime = getTime100MicroSec();
    13b0:	0e 94 d7 21 	call	0x43ae	; 0x43ae <getTime100MicroSec>
    13b4:	60 93 22 04 	sts	0x0422, r22
    13b8:	70 93 23 04 	sts	0x0423, r23
    13bc:	80 93 24 04 	sts	0x0424, r24
    13c0:	90 93 25 04 	sts	0x0425, r25
								demoState = 5;							
    13c4:	f5 e0       	ldi	r31, 0x05	; 5
    13c6:	f0 93 1e 04 	sts	0x041E, r31
    13ca:	fb c9       	rjmp	.-3082   	; 0x7c2 <main+0x5e6>
							//pwm_green = 0;
							//pwm_blue = 255;
							break;

						case 2:	// line found, follow it
							turnOffGreenLeds();
    13cc:	0e 94 9e 3e 	call	0x7d3c	; 0x7d3c <turnOffGreenLeds>
							GREEN_LED4_ON;
    13d0:	80 91 0b 01 	lds	r24, 0x010B
    13d4:	8f 7e       	andi	r24, 0xEF	; 239
    13d6:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED5_ON;
							disableObstacleAvoidance();
    13da:	0e 94 7e 3d 	call	0x7afc	; 0x7afc <disableObstacleAvoidance>

							demoEndTime = getTime100MicroSec();
    13de:	0e 94 d7 21 	call	0x43ae	; 0x43ae <getTime100MicroSec>
    13e2:	9b 01       	movw	r18, r22
    13e4:	ac 01       	movw	r20, r24
    13e6:	60 93 2a 04 	sts	0x042A, r22
    13ea:	70 93 2b 04 	sts	0x042B, r23
    13ee:	80 93 2c 04 	sts	0x042C, r24
    13f2:	90 93 2d 04 	sts	0x042D, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {	// the robot seems to be blocked somehow
    13f6:	80 91 22 04 	lds	r24, 0x0422
    13fa:	90 91 23 04 	lds	r25, 0x0423
    13fe:	a0 91 24 04 	lds	r26, 0x0424
    1402:	b0 91 25 04 	lds	r27, 0x0425
    1406:	28 1b       	sub	r18, r24
    1408:	39 0b       	sbc	r19, r25
    140a:	4a 0b       	sbc	r20, r26
    140c:	5b 0b       	sbc	r21, r27
    140e:	23 33       	cpi	r18, 0x33	; 51
    1410:	6f ee       	ldi	r22, 0xEF	; 239
    1412:	36 07       	cpc	r19, r22
    1414:	62 e0       	ldi	r22, 0x02	; 2
    1416:	46 07       	cpc	r20, r22
    1418:	60 e0       	ldi	r22, 0x00	; 0
    141a:	56 07       	cpc	r21, r22
    141c:	08 f0       	brcs	.+2      	; 0x1420 <main+0x1244>
    141e:	fa c4       	rjmp	.+2548   	; 0x1e14 <main+0x1c38>
								demoStartTime = getTime100MicroSec();
								demoState = 4;
								break;
							}

							if(CHARGE_ON) {
    1420:	80 91 03 01 	lds	r24, 0x0103
    1424:	84 ff       	sbrs	r24, 4
    1426:	bc c4       	rjmp	.+2424   	; 0x1da0 <main+0x1bc4>
								outOfLine = 0;
    1428:	10 92 20 04 	sts	0x0420, r1
								chargeContact++;
    142c:	80 91 21 04 	lds	r24, 0x0421
    1430:	8f 5f       	subi	r24, 0xFF	; 255
    1432:	80 93 21 04 	sts	0x0421, r24
								if(chargeContact > 20) {
    1436:	85 31       	cpi	r24, 0x15	; 21
    1438:	08 f0       	brcs	.+2      	; 0x143c <main+0x1260>
    143a:	40 c5       	rjmp	.+2688   	; 0x1ebc <main+0x1ce0>
    143c:	80 91 3b 02 	lds	r24, 0x023B
    1440:	90 91 3c 02 	lds	r25, 0x023C
								} else {
									outOfLine = 0;
								}
							}
							
							if(proximityResult[8]<LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR && proximityResult[11]>LINE_OUT_THR) {	// left ground is the only within the black line => turn left
    1444:	20 91 39 02 	lds	r18, 0x0239
    1448:	30 91 3a 02 	lds	r19, 0x023A
    144c:	e1 e0       	ldi	r30, 0x01	; 1
    144e:	22 3c       	cpi	r18, 0xC2	; 194
    1450:	3e 07       	cpc	r19, r30
    1452:	ac f4       	brge	.+42     	; 0x147e <main+0x12a2>
    1454:	f1 e0       	ldi	r31, 0x01	; 1
    1456:	83 3c       	cpi	r24, 0xC3	; 195
    1458:	9f 07       	cpc	r25, r31
    145a:	8c f0       	brlt	.+34     	; 0x147e <main+0x12a2>
    145c:	40 91 3d 02 	lds	r20, 0x023D
    1460:	50 91 3e 02 	lds	r21, 0x023E
    1464:	61 e0       	ldi	r22, 0x01	; 1
    1466:	43 3c       	cpi	r20, 0xC3	; 195
    1468:	56 07       	cpc	r21, r22
    146a:	4c f0       	brlt	.+18     	; 0x147e <main+0x12a2>
    146c:	40 91 3f 02 	lds	r20, 0x023F
    1470:	50 91 40 02 	lds	r21, 0x0240
    1474:	a1 e0       	ldi	r26, 0x01	; 1
    1476:	43 3c       	cpi	r20, 0xC3	; 195
    1478:	5a 07       	cpc	r21, r26
    147a:	0c f0       	brlt	.+2      	; 0x147e <main+0x12a2>
    147c:	48 c5       	rjmp	.+2704   	; 0x1f0e <main+0x1d32>
								setLeftSpeed(-10);
								setRightSpeed(15);
							} else if(proximityResult[11]<LINE_OUT_THR && proximityResult[8]>LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {	// right ground is the only within the black line => turn right
    147e:	40 91 3f 02 	lds	r20, 0x023F
    1482:	50 91 40 02 	lds	r21, 0x0240
    1486:	b1 e0       	ldi	r27, 0x01	; 1
    1488:	42 3c       	cpi	r20, 0xC2	; 194
    148a:	5b 07       	cpc	r21, r27
    148c:	0c f0       	brlt	.+2      	; 0x1490 <main+0x12b4>
    148e:	6f c4       	rjmp	.+2270   	; 0x1d6e <main+0x1b92>
    1490:	e1 e0       	ldi	r30, 0x01	; 1
    1492:	23 3c       	cpi	r18, 0xC3	; 195
    1494:	3e 07       	cpc	r19, r30
    1496:	0c f4       	brge	.+2      	; 0x149a <main+0x12be>
    1498:	6a c4       	rjmp	.+2260   	; 0x1d6e <main+0x1b92>
    149a:	f1 e0       	ldi	r31, 0x01	; 1
    149c:	83 3c       	cpi	r24, 0xC3	; 195
    149e:	9f 07       	cpc	r25, r31
    14a0:	0c f4       	brge	.+2      	; 0x14a4 <main+0x12c8>
    14a2:	6a c4       	rjmp	.+2260   	; 0x1d78 <main+0x1b9c>
    14a4:	80 91 3d 02 	lds	r24, 0x023D
    14a8:	90 91 3e 02 	lds	r25, 0x023E
    14ac:	21 e0       	ldi	r18, 0x01	; 1
    14ae:	83 3c       	cpi	r24, 0xC3	; 195
    14b0:	92 07       	cpc	r25, r18
    14b2:	0c f0       	brlt	.+2      	; 0x14b6 <main+0x12da>
    14b4:	34 c5       	rjmp	.+2664   	; 0x1f1e <main+0x1d42>
								setLeftSpeed(15);
								setRightSpeed(-10);
							} else if(proximityResult[9]>LINE_OUT_THR) {	// center left is leaving the line => turn right
								setLeftSpeed(15);
    14b6:	8f e0       	ldi	r24, 0x0F	; 15
    14b8:	0e 94 8f 29 	call	0x531e	; 0x531e <setLeftSpeed>
								setRightSpeed(-5);
    14bc:	8b ef       	ldi	r24, 0xFB	; 251
    14be:	0e 94 ac 29 	call	0x5358	; 0x5358 <setRightSpeed>
    14c2:	7f c9       	rjmp	.-3330   	; 0x7c2 <main+0x5e6>
							//pwm_green = 255;
							//pwm_blue = 0;
							break;

						case 3:	// charge for some time
							turnOffGreenLeds();
    14c4:	0e 94 9e 3e 	call	0x7d3c	; 0x7d3c <turnOffGreenLeds>
							GREEN_LED6_ON;
    14c8:	80 91 0b 01 	lds	r24, 0x010B
    14cc:	8f 7b       	andi	r24, 0xBF	; 191
    14ce:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED7_ON;
							demoEndTime = getTime100MicroSec();
    14d2:	0e 94 d7 21 	call	0x43ae	; 0x43ae <getTime100MicroSec>
    14d6:	9b 01       	movw	r18, r22
    14d8:	ac 01       	movw	r20, r24
    14da:	60 93 2a 04 	sts	0x042A, r22
    14de:	70 93 2b 04 	sts	0x042B, r23
    14e2:	80 93 2c 04 	sts	0x042C, r24
    14e6:	90 93 2d 04 	sts	0x042D, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_30_SEC)) {
    14ea:	80 91 22 04 	lds	r24, 0x0422
    14ee:	90 91 23 04 	lds	r25, 0x0423
    14f2:	a0 91 24 04 	lds	r26, 0x0424
    14f6:	b0 91 25 04 	lds	r27, 0x0425
    14fa:	28 1b       	sub	r18, r24
    14fc:	39 0b       	sbc	r19, r25
    14fe:	4a 0b       	sbc	r20, r26
    1500:	5b 0b       	sbc	r21, r27
    1502:	2d 3c       	cpi	r18, 0xCD	; 205
    1504:	66 e6       	ldi	r22, 0x66	; 102
    1506:	36 07       	cpc	r19, r22
    1508:	64 e0       	ldi	r22, 0x04	; 4
    150a:	46 07       	cpc	r20, r22
    150c:	60 e0       	ldi	r22, 0x00	; 0
    150e:	56 07       	cpc	r21, r22
    1510:	08 f4       	brcc	.+2      	; 0x1514 <main+0x1338>
    1512:	0a c4       	rjmp	.+2068   	; 0x1d28 <main+0x1b4c>
								if(batteryLevel<890) {//860) {	// stay in charge if too much discharged (consider the fact that the robot
    1514:	80 91 8d 02 	lds	r24, 0x028D
    1518:	90 91 8e 02 	lds	r25, 0x028E
    151c:	a3 e0       	ldi	r26, 0x03	; 3
    151e:	8a 37       	cpi	r24, 0x7A	; 122
    1520:	9a 07       	cpc	r25, r26
    1522:	08 f4       	brcc	.+2      	; 0x1526 <main+0x134a>
    1524:	0e c4       	rjmp	.+2076   	; 0x1d42 <main+0x1b66>
														// is still in charge thus the battery value measured is higher)
									demoStartTime = getTime100MicroSec();
									break;
								} else {
									setRightSpeed(-13);
    1526:	83 ef       	ldi	r24, 0xF3	; 243
    1528:	0e 94 ac 29 	call	0x5358	; 0x5358 <setRightSpeed>
									setLeftSpeed(-13);
    152c:	83 ef       	ldi	r24, 0xF3	; 243
    152e:	0e 94 8f 29 	call	0x531e	; 0x531e <setLeftSpeed>
									demoStartTime = getTime100MicroSec();
    1532:	0e 94 d7 21 	call	0x43ae	; 0x43ae <getTime100MicroSec>
    1536:	60 93 22 04 	sts	0x0422, r22
    153a:	70 93 23 04 	sts	0x0423, r23
    153e:	80 93 24 04 	sts	0x0424, r24
    1542:	90 93 25 04 	sts	0x0425, r25
									demoState = 4;
    1546:	84 e0       	ldi	r24, 0x04	; 4
    1548:	80 93 1e 04 	sts	0x041E, r24
									break;
    154c:	3a c9       	rjmp	.-3468   	; 0x7c2 <main+0x5e6>
					}
				} else if(currRand<64) {
					if(pwm_red!=255 && pwm_blue!=255) {
						pwm_green = 255;
					}
				} else if (currRand<96) {
    154e:	a0 e6       	ldi	r26, 0x60	; 96
    1550:	8a 16       	cp	r8, r26
    1552:	91 04       	cpc	r9, r1
    1554:	08 f0       	brcs	.+2      	; 0x1558 <main+0x137c>
    1556:	5d c8       	rjmp	.-3910   	; 0x612 <main+0x436>
					if(pwm_red!=255 && pwm_green!=255) {
    1558:	80 91 0c 02 	lds	r24, 0x020C
    155c:	8f 3f       	cpi	r24, 0xFF	; 255
    155e:	09 f4       	brne	.+2      	; 0x1562 <main+0x1386>
    1560:	58 c8       	rjmp	.-3920   	; 0x612 <main+0x436>
    1562:	80 91 0d 02 	lds	r24, 0x020D
    1566:	8f 3f       	cpi	r24, 0xFF	; 255
    1568:	09 f4       	brne	.+2      	; 0x156c <main+0x1390>
    156a:	53 c8       	rjmp	.-3930   	; 0x612 <main+0x436>
						pwm_blue = 255;
    156c:	10 93 0e 02 	sts	0x020E, r17
    1570:	50 c8       	rjmp	.-3936   	; 0x612 <main+0x436>
							outOfLine = 0;
							enableObstacleAvoidance();
							setRightSpeed(15);
							setLeftSpeed(15);
							if(proximityResult[9]<LINE_IN_THR || proximityResult[10]<LINE_IN_THR || proximityResult[8]<LINE_IN_THR || proximityResult[11]<LINE_IN_THR) {
								lineFound++;
    1572:	80 91 1f 04 	lds	r24, 0x041F
    1576:	8f 5f       	subi	r24, 0xFF	; 255
    1578:	80 93 1f 04 	sts	0x041F, r24
								if(lineFound > 10) {
    157c:	8b 30       	cpi	r24, 0x0B	; 11
    157e:	08 f4       	brcc	.+2      	; 0x1582 <main+0x13a6>
    1580:	20 c9       	rjmp	.-3520   	; 0x7c2 <main+0x5e6>
									outOfLine = 0;
    1582:	10 92 20 04 	sts	0x0420, r1
									chargeContact = 0;
    1586:	10 92 21 04 	sts	0x0421, r1
									demoStartTime = getTime100MicroSec();
    158a:	0e 94 d7 21 	call	0x43ae	; 0x43ae <getTime100MicroSec>
    158e:	60 93 22 04 	sts	0x0422, r22
    1592:	70 93 23 04 	sts	0x0423, r23
    1596:	80 93 24 04 	sts	0x0424, r24
    159a:	90 93 25 04 	sts	0x0425, r25
									demoState = 2;
    159e:	52 e0       	ldi	r21, 0x02	; 2
    15a0:	b5 2e       	mov	r11, r21
    15a2:	b0 92 1e 04 	sts	0x041E, r11
									break;
    15a6:	0d c9       	rjmp	.-3558   	; 0x7c2 <main+0x5e6>
				currRand2 = rand()%128;
				if(currRand2<32) {
					pwm_red = 255;
				} else if(currRand2<64) {
					pwm_green = 255;
				} else if (currRand2<96) {
    15a8:	80 36       	cpi	r24, 0x60	; 96
    15aa:	91 05       	cpc	r25, r1
    15ac:	08 f0       	brcs	.+2      	; 0x15b0 <main+0x13d4>
    15ae:	a5 ca       	rjmp	.-2742   	; 0xafa <main+0x91e>
					pwm_blue = 255;
    15b0:	10 93 0e 02 	sts	0x020E, r17
    15b4:	a2 ca       	rjmp	.-2748   	; 0xafa <main+0x91e>
			case 13: // IR comm transmitter

				break;
			
			case 14: // IR comm receiver
				switch(irCommState) {
    15b6:	82 30       	cpi	r24, 0x02	; 2
    15b8:	09 f4       	brne	.+2      	; 0x15bc <main+0x13e0>
    15ba:	60 c1       	rjmp	.+704    	; 0x187c <main+0x16a0>
    15bc:	83 30       	cpi	r24, 0x03	; 3
    15be:	11 f0       	breq	.+4      	; 0x15c4 <main+0x13e8>
    15c0:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <main+0x1e0>
						break;

					case IRCOMM_RX_DETECT_START_BIT_STATE:
						//updateBlueLed(0);
						//turnOffGreenLeds();
						GREEN_LED3_ON;
    15c4:	a3 98       	cbi	0x14, 3	; 20
						// extract signal from the sensor with higher amplitude and compute the signal mean
						irCommProxSum = 0;
    15c6:	10 92 96 04 	sts	0x0496, r1
    15ca:	10 92 97 04 	sts	0x0497, r1
    15ce:	10 92 98 04 	sts	0x0498, r1
    15d2:	10 92 99 04 	sts	0x0499, r1
						irCommTempMin = 1024;
    15d6:	e0 e0       	ldi	r30, 0x00	; 0
    15d8:	f4 e0       	ldi	r31, 0x04	; 4
    15da:	f0 93 a5 04 	sts	0x04A5, r31
    15de:	e0 93 a4 04 	sts	0x04A4, r30
						irCommTempMax = 0;
    15e2:	10 92 a3 04 	sts	0x04A3, r1
    15e6:	10 92 a2 04 	sts	0x04A2, r1
						irCommShiftCount = 0;
    15ea:	10 92 a6 04 	sts	0x04A6, r1
						irCommComputeShift = 1;
    15ee:	20 92 a8 04 	sts	0x04A8, r2
#include "nRF24L01.h"
#include "behaviors.h"
#include "sensors.h"


int main(void) {
    15f2:	80 91 c6 04 	lds	r24, 0x04C6
    15f6:	90 91 c7 04 	lds	r25, 0x04C7
    15fa:	88 0f       	add	r24, r24
    15fc:	99 1f       	adc	r25, r25
    15fe:	e0 91 67 07 	lds	r30, 0x0767
    1602:	f0 91 68 07 	lds	r31, 0x0768
    1606:	e8 0f       	add	r30, r24
    1608:	f9 1f       	adc	r31, r25
						// extract signal from the sensor with higher amplitude and compute the signal mean
						irCommProxSum = 0;
						irCommTempMin = 1024;
						irCommTempMax = 0;
						irCommShiftCount = 0;
						irCommComputeShift = 1;
    160a:	3b e5       	ldi	r19, 0x5B	; 91
    160c:	a3 2e       	mov	r10, r19
    160e:	38 e0       	ldi	r19, 0x08	; 8
    1610:	b3 2e       	mov	r11, r19
#include "nRF24L01.h"
#include "behaviors.h"
#include "sensors.h"


int main(void) {
    1612:	25 01       	movw	r4, r10
    1614:	77 24       	eor	r7, r7
    1616:	73 94       	inc	r7
    1618:	40 e0       	ldi	r20, 0x00	; 0
    161a:	50 e0       	ldi	r21, 0x00	; 0
    161c:	ba 01       	movw	r22, r20
    161e:	08 c0       	rjmp	.+16     	; 0x1630 <main+0x1454>
								}
								if(irCommTempMax < irCommMaxSensorSignal[i]) {
									irCommTempMax = irCommMaxSensorSignal[i];
								}
								if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
									irCommComputeShift = 0;	
    1620:	70 96       	adiw	r30, 0x10	; 16
						irCommProxSum = 0;
						irCommTempMin = 1024;
						irCommTempMax = 0;
						irCommShiftCount = 0;
						irCommComputeShift = 1;
						for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    1622:	23 e8       	ldi	r18, 0x83	; 131
    1624:	42 16       	cp	r4, r18
    1626:	28 e0       	ldi	r18, 0x08	; 8
    1628:	52 06       	cpc	r5, r18
    162a:	f1 f1       	breq	.+124    	; 0x16a8 <main+0x14cc>
    162c:	70 90 a8 04 	lds	r7, 0x04A8
							irCommMaxSensorSignal[i] = irCommProxValuesCurr[irCommMaxSensor+i*8];
    1630:	20 81       	ld	r18, Z
    1632:	31 81       	ldd	r19, Z+1	; 0x01
    1634:	d2 01       	movw	r26, r4
    1636:	2d 93       	st	X+, r18
    1638:	3d 93       	st	X+, r19
    163a:	2d 01       	movw	r4, r26
							irCommProxSum += irCommMaxSensorSignal[i];
    163c:	c9 01       	movw	r24, r18
    163e:	aa 27       	eor	r26, r26
    1640:	97 fd       	sbrc	r25, 7
    1642:	a0 95       	com	r26
    1644:	ba 2f       	mov	r27, r26
    1646:	48 0f       	add	r20, r24
    1648:	59 1f       	adc	r21, r25
    164a:	6a 1f       	adc	r22, r26
    164c:	7b 1f       	adc	r23, r27
							if(irCommComputeShift == 1) {
    164e:	b7 2d       	mov	r27, r7
    1650:	b1 30       	cpi	r27, 0x01	; 1
    1652:	31 f7       	brne	.-52     	; 0x1620 <main+0x1444>
								irCommShiftCount++;								
    1654:	80 91 a6 04 	lds	r24, 0x04A6
    1658:	8f 5f       	subi	r24, 0xFF	; 255
    165a:	80 93 a6 04 	sts	0x04A6, r24
								if(irCommTempMin > irCommMaxSensorSignal[i]) {
    165e:	a0 91 a4 04 	lds	r26, 0x04A4
    1662:	b0 91 a5 04 	lds	r27, 0x04A5
    1666:	2a 17       	cp	r18, r26
    1668:	3b 07       	cpc	r19, r27
    166a:	2c f4       	brge	.+10     	; 0x1676 <main+0x149a>
									irCommTempMin = irCommMaxSensorSignal[i];
    166c:	30 93 a5 04 	sts	0x04A5, r19
    1670:	20 93 a4 04 	sts	0x04A4, r18
    1674:	d9 01       	movw	r26, r18
								}
								if(irCommTempMax < irCommMaxSensorSignal[i]) {
    1676:	80 91 a2 04 	lds	r24, 0x04A2
    167a:	90 91 a3 04 	lds	r25, 0x04A3
    167e:	82 17       	cp	r24, r18
    1680:	93 07       	cpc	r25, r19
    1682:	2c f4       	brge	.+10     	; 0x168e <main+0x14b2>
									irCommTempMax = irCommMaxSensorSignal[i];
    1684:	30 93 a3 04 	sts	0x04A3, r19
    1688:	20 93 a2 04 	sts	0x04A2, r18
    168c:	c9 01       	movw	r24, r18
								}
								if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    168e:	8a 1b       	sub	r24, r26
    1690:	9b 0b       	sbc	r25, r27
    1692:	84 31       	cpi	r24, 0x14	; 20
    1694:	91 05       	cpc	r25, r1
    1696:	24 f2       	brlt	.-120    	; 0x1620 <main+0x1444>
									irCommComputeShift = 0;	
    1698:	10 92 a8 04 	sts	0x04A8, r1
    169c:	70 96       	adiw	r30, 0x10	; 16
						irCommProxSum = 0;
						irCommTempMin = 1024;
						irCommTempMax = 0;
						irCommShiftCount = 0;
						irCommComputeShift = 1;
						for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    169e:	23 e8       	ldi	r18, 0x83	; 131
    16a0:	42 16       	cp	r4, r18
    16a2:	28 e0       	ldi	r18, 0x08	; 8
    16a4:	52 06       	cpc	r5, r18
    16a6:	11 f6       	brne	.-124    	; 0x162c <main+0x1450>
    16a8:	40 93 96 04 	sts	0x0496, r20
    16ac:	50 93 97 04 	sts	0x0497, r21
    16b0:	60 93 98 04 	sts	0x0498, r22
    16b4:	70 93 99 04 	sts	0x0499, r23
									irCommComputeShift = 0;	
								}
							}

						}
						irCommProxMean = (int)(irCommProxSum / IRCOMM_SAMPLING_WINDOW);
    16b8:	cb 01       	movw	r24, r22
    16ba:	ba 01       	movw	r22, r20
    16bc:	24 e1       	ldi	r18, 0x14	; 20
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	40 e0       	ldi	r20, 0x00	; 0
    16c2:	50 e0       	ldi	r21, 0x00	; 0
    16c4:	0e 94 1a 49 	call	0x9234	; 0x9234 <__divmodsi4>
    16c8:	c9 01       	movw	r24, r18
    16ca:	30 93 9b 04 	sts	0x049B, r19
    16ce:	20 93 9a 04 	sts	0x049A, r18
    16d2:	f5 01       	movw	r30, r10

						// substract mean from signal
						for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
							irCommMaxSensorSignal[i] -= irCommProxMean;
    16d4:	20 81       	ld	r18, Z
    16d6:	31 81       	ldd	r19, Z+1	; 0x01
    16d8:	28 1b       	sub	r18, r24
    16da:	39 0b       	sbc	r19, r25
    16dc:	21 93       	st	Z+, r18
    16de:	31 93       	st	Z+, r19

						}
						irCommProxMean = (int)(irCommProxSum / IRCOMM_SAMPLING_WINDOW);

						// substract mean from signal
						for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    16e0:	38 e0       	ldi	r19, 0x08	; 8
    16e2:	e3 38       	cpi	r30, 0x83	; 131
    16e4:	f3 07       	cpc	r31, r19
    16e6:	b1 f7       	brne	.-20     	; 0x16d4 <main+0x14f8>
							irCommMaxSensorSignal[i] -= irCommProxMean;
						}
						
						// start counting number of switch around mean signal
						if(irCommMaxSensorSignal[0] > 0) {
    16e8:	80 91 5b 08 	lds	r24, 0x085B
    16ec:	90 91 5c 08 	lds	r25, 0x085C
    16f0:	18 16       	cp	r1, r24
    16f2:	19 06       	cpc	r1, r25
    16f4:	0c f0       	brlt	.+2      	; 0x16f8 <main+0x151c>
    16f6:	c8 c3       	rjmp	.+1936   	; 0x1e88 <main+0x1cac>
							irCommSignalState = 1;
    16f8:	20 92 9c 04 	sts	0x049C, r2
    16fc:	21 e0       	ldi	r18, 0x01	; 1
    16fe:	32 2d       	mov	r19, r2
						} else {
							irCommSignalState = -1;
						}
						irCommSwitchCount = 0;
    1700:	10 92 9e 04 	sts	0x049E, r1
    1704:	10 92 9d 04 	sts	0x049D, r1
    1708:	ed e5       	ldi	r30, 0x5D	; 93
    170a:	f8 e0       	ldi	r31, 0x08	; 8
    170c:	07 c0       	rjmp	.+14     	; 0x171c <main+0x1540>
						for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
							if(irCommMaxSensorSignal[i] > 0) {
								if(irCommSignalState < 0) {
    170e:	27 fd       	sbrc	r18, 7
    1710:	86 c1       	rjmp	.+780    	; 0x1a1e <main+0x1842>
							irCommSignalState = 1;
						} else {
							irCommSignalState = -1;
						}
						irCommSwitchCount = 0;
						for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
    1712:	48 e0       	ldi	r20, 0x08	; 8
    1714:	e3 38       	cpi	r30, 0x83	; 131
    1716:	f4 07       	cpc	r31, r20
    1718:	b1 f0       	breq	.+44     	; 0x1746 <main+0x156a>
    171a:	23 2f       	mov	r18, r19
							if(irCommMaxSensorSignal[i] > 0) {
    171c:	81 91       	ld	r24, Z+
    171e:	91 91       	ld	r25, Z+
    1720:	18 16       	cp	r1, r24
    1722:	19 06       	cpc	r1, r25
    1724:	a4 f3       	brlt	.-24     	; 0x170e <main+0x1532>
								if(irCommSignalState < 0) {
									irCommSignalState = 1;
									irCommSwitchCount++;
								}
							} else {
								if(irCommSignalState > 0) {
    1726:	12 16       	cp	r1, r18
    1728:	a4 f7       	brge	.-24     	; 0x1712 <main+0x1536>
									irCommSignalState = -1;
									irCommSwitchCount++;
    172a:	80 91 9d 04 	lds	r24, 0x049D
    172e:	90 91 9e 04 	lds	r25, 0x049E
    1732:	01 96       	adiw	r24, 0x01	; 1
    1734:	90 93 9e 04 	sts	0x049E, r25
    1738:	80 93 9d 04 	sts	0x049D, r24
									irCommSignalState = 1;
									irCommSwitchCount++;
								}
							} else {
								if(irCommSignalState > 0) {
									irCommSignalState = -1;
    173c:	3f ef       	ldi	r19, 0xFF	; 255
							irCommSignalState = 1;
						} else {
							irCommSignalState = -1;
						}
						irCommSwitchCount = 0;
						for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
    173e:	48 e0       	ldi	r20, 0x08	; 8
    1740:	e3 38       	cpi	r30, 0x83	; 131
    1742:	f4 07       	cpc	r31, r20
    1744:	51 f7       	brne	.-44     	; 0x171a <main+0x153e>
    1746:	30 93 9c 04 	sts	0x049C, r19
								usart0Transmit(irCommTempValue>>8,1);
							}
							adcSamplingState = 11;	// restart sampling
						}
											
						if(irCommSwitchCount >= IRCOMM_START_BIT_MIN_SWITCH_COUNT) {
    174a:	80 91 9d 04 	lds	r24, 0x049D
    174e:	90 91 9e 04 	lds	r25, 0x049E
    1752:	82 30       	cpi	r24, 0x02	; 2
    1754:	91 05       	cpc	r25, r1
    1756:	08 f4       	brcc	.+2      	; 0x175a <main+0x157e>
    1758:	c1 c2       	rjmp	.+1410   	; 0x1cdc <main+0x1b00>
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
    175a:	84 e0       	ldi	r24, 0x04	; 4
    175c:	80 93 94 04 	sts	0x0494, r24
							irCommRxBitCount = 0;	
    1760:	10 92 aa 04 	sts	0x04AA, r1
							irCommCrc = 0;	
    1764:	10 92 bc 04 	sts	0x04BC, r1
							irCommRxByte = 0;											
    1768:	10 92 ac 04 	sts	0x04AC, r1
					break;

		}

		if(currentSelector!=0) {
			handleMotorsWithSpeedController();  
    176c:	0e 94 09 35 	call	0x6a12	; 0x6a12 <handleMotorsWithSpeedController>
    1770:	80 91 1a 04 	lds	r24, 0x041A
    1774:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <main+0xfc>
			case 13: // IR comm transmitter

				break;
			
			case 14: // IR comm receiver
				switch(irCommState) {
    1778:	87 30       	cpi	r24, 0x07	; 7
    177a:	09 f4       	brne	.+2      	; 0x177e <main+0x15a2>
    177c:	5b c1       	rjmp	.+694    	; 0x1a34 <main+0x1858>
    177e:	88 30       	cpi	r24, 0x08	; 8
    1780:	11 f0       	breq	.+4      	; 0x1786 <main+0x15aa>
    1782:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <main+0x1e0>
							}
						}						
						break;
					
					case IRCOMM_RX_DO_NOTHING:
						GREEN_LED7_ON;
    1786:	80 91 0b 01 	lds	r24, 0x010B
    178a:	8f 77       	andi	r24, 0x7F	; 127
    178c:	80 93 0b 01 	sts	0x010B, r24
					break;

		}

		if(currentSelector!=0) {
			handleMotorsWithSpeedController();  
    1790:	0e 94 09 35 	call	0x6a12	; 0x6a12 <handleMotorsWithSpeedController>
    1794:	80 91 1a 04 	lds	r24, 0x041A
    1798:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <main+0xfc>
							}

							currRand = rand()% 200;
							if(currRand<50) {
								pwm_red = 255;
							} else if(currRand<100) {
    179c:	94 e6       	ldi	r25, 0x64	; 100
    179e:	89 16       	cp	r8, r25
    17a0:	91 04       	cpc	r9, r1
    17a2:	08 f0       	brcs	.+2      	; 0x17a6 <main+0x15ca>
    17a4:	da c2       	rjmp	.+1460   	; 0x1d5a <main+0x1b7e>
								pwm_green = 255;
    17a6:	10 93 0d 02 	sts	0x020D, r17
    17aa:	80 91 0c 02 	lds	r24, 0x020C
    17ae:	8b ca       	rjmp	.-2794   	; 0xcc6 <main+0xaea>

							currRand = rand()% 128;
							if(currRand > 95) {
								pwm_blue = 255;
							} else {
								pwm_blue = currRand;
    17b0:	80 93 0e 02 	sts	0x020E, r24
    17b4:	79 ca       	rjmp	.-2830   	; 0xca8 <main+0xacc>

							currRand = rand()% 128;
							if(currRand > 95) {
								pwm_green = 255;
							} else {
								pwm_green = currRand;
    17b6:	80 93 0d 02 	sts	0x020D, r24
    17ba:	6a ca       	rjmp	.-2860   	; 0xc90 <main+0xab4>
							turnOffGreenLeds();					
							currRand = rand()% 128;	// 0 to 255 is the maximum, we use 0 to 127 to get brighter colors
							if(currRand > 95) {
								pwm_red = 255;
							} else {
								pwm_red = currRand;
    17bc:	80 93 0c 02 	sts	0x020C, r24
    17c0:	5b ca       	rjmp	.-2890   	; 0xc78 <main+0xa9c>
					} else if(pwm_right_desired > pwm_intermediate_right_desired) {
						pwm_intermediate_right_desired += speedStep;
						if(pwm_intermediate_right_desired > pwm_right_desired) {
							pwm_intermediate_right_desired = pwm_right_desired;
						}
					} else if(pwm_right_desired < pwm_intermediate_right_desired) {
    17c2:	82 17       	cp	r24, r18
    17c4:	93 07       	cpc	r25, r19
    17c6:	14 f0       	brlt	.+4      	; 0x17cc <main+0x15f0>
    17c8:	0c 94 a6 02 	jmp	0x54c	; 0x54c <main+0x370>
						pwm_intermediate_right_desired -= speedStep;
    17cc:	40 91 17 02 	lds	r20, 0x0217
    17d0:	24 1b       	sub	r18, r20
    17d2:	31 09       	sbc	r19, r1
    17d4:	30 93 ce 02 	sts	0x02CE, r19
    17d8:	20 93 cd 02 	sts	0x02CD, r18
						if(pwm_intermediate_right_desired < pwm_right_desired) {
    17dc:	28 17       	cp	r18, r24
    17de:	39 07       	cpc	r19, r25
    17e0:	14 f0       	brlt	.+4      	; 0x17e6 <main+0x160a>
    17e2:	0c 94 a6 02 	jmp	0x54c	; 0x54c <main+0x370>
    17e6:	0c 94 a2 02 	jmp	0x544	; 0x544 <main+0x368>
					} else if(pwm_left_desired > pwm_intermediate_left_desired) {
						pwm_intermediate_left_desired += speedStep;
						if(pwm_intermediate_left_desired > pwm_left_desired) {
							pwm_intermediate_left_desired = pwm_left_desired;
						}
					} else if(pwm_left_desired < pwm_intermediate_left_desired) {
    17ea:	82 17       	cp	r24, r18
    17ec:	93 07       	cpc	r25, r19
    17ee:	14 f0       	brlt	.+4      	; 0x17f4 <main+0x1618>
    17f0:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <main+0xc6>
						pwm_intermediate_left_desired -= speedStep;
    17f4:	40 91 17 02 	lds	r20, 0x0217
    17f8:	24 1b       	sub	r18, r20
    17fa:	31 09       	sbc	r19, r1
    17fc:	30 93 d0 02 	sts	0x02D0, r19
    1800:	20 93 cf 02 	sts	0x02CF, r18
						if(pwm_intermediate_left_desired < pwm_left_desired) {
    1804:	28 17       	cp	r18, r24
    1806:	39 07       	cpc	r19, r25
    1808:	14 f0       	brlt	.+4      	; 0x180e <main+0x1632>
    180a:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <main+0xc6>
    180e:	0c 94 cb 02 	jmp	0x596	; 0x596 <main+0x3ba>
						irCommEnabled = IRCOMM_MODE_RECEIVE;
						irCommState = IRCOMM_RX_IDLE_STATE;
						break;

					case IRCOMM_RX_IDLE_STATE:
						GREEN_LED1_OFF;							
    1812:	80 91 0b 01 	lds	r24, 0x010B
    1816:	82 60       	ori	r24, 0x02	; 2
    1818:	80 93 0b 01 	sts	0x010B, r24
						GREEN_LED2_OFF;
    181c:	80 91 0b 01 	lds	r24, 0x010B
    1820:	84 60       	ori	r24, 0x04	; 4
    1822:	80 93 0b 01 	sts	0x010B, r24
						GREEN_LED3_OFF;
    1826:	a3 9a       	sbi	0x14, 3	; 20
						GREEN_LED4_OFF;
    1828:	80 91 0b 01 	lds	r24, 0x010B
    182c:	80 61       	ori	r24, 0x10	; 16
    182e:	80 93 0b 01 	sts	0x010B, r24
						GREEN_LED5_OFF;
    1832:	80 91 0b 01 	lds	r24, 0x010B
    1836:	80 62       	ori	r24, 0x20	; 32
    1838:	80 93 0b 01 	sts	0x010B, r24
						GREEN_LED5_OFF;
    183c:	80 91 0b 01 	lds	r24, 0x010B
    1840:	80 62       	ori	r24, 0x20	; 32
    1842:	80 93 0b 01 	sts	0x010B, r24
						GREEN_LED7_OFF;
    1846:	80 91 0b 01 	lds	r24, 0x010B
    184a:	80 68       	ori	r24, 0x80	; 128
    184c:	80 93 0b 01 	sts	0x010B, r24
						GREEN_LED1_ON;					
    1850:	80 91 0b 01 	lds	r24, 0x010B
    1854:	8d 7f       	andi	r24, 0xFD	; 253
    1856:	80 93 0b 01 	sts	0x010B, r24
					break;

		}

		if(currentSelector!=0) {
			handleMotorsWithSpeedController();  
    185a:	0e 94 09 35 	call	0x6a12	; 0x6a12 <handleMotorsWithSpeedController>
    185e:	80 91 1a 04 	lds	r24, 0x041A
    1862:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <main+0xfc>
						//updateBlueLed(255);
						break;
				
					case IRCOMM_RX_SYNC_SIGNAL:
						//turnOffGreenLeds();
						GREEN_LED4_ON;
    1866:	80 91 0b 01 	lds	r24, 0x010B
    186a:	8f 7e       	andi	r24, 0xEF	; 239
    186c:	80 93 0b 01 	sts	0x010B, r24
					break;

		}

		if(currentSelector!=0) {
			handleMotorsWithSpeedController();  
    1870:	0e 94 09 35 	call	0x6a12	; 0x6a12 <handleMotorsWithSpeedController>
    1874:	80 91 1a 04 	lds	r24, 0x041A
    1878:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <main+0xfc>
						break;

					case IRCOMM_RX_MAX_SENSOR_STATE:						
						//updateBlueLed(0);
						//turnOffGreenLeds();
						GREEN_LED2_ON;
    187c:	80 91 0b 01 	lds	r24, 0x010B
    1880:	8b 7f       	andi	r24, 0xFB	; 251
    1882:	80 93 0b 01 	sts	0x010B, r24
						irCommMaxDiff = 0;
    1886:	10 92 e2 04 	sts	0x04E2, r1
    188a:	10 92 e1 04 	sts	0x04E1, r1
    					irCommMaxSensor = -1;
    188e:	2f ef       	ldi	r18, 0xFF	; 255
    1890:	3f ef       	ldi	r19, 0xFF	; 255
    1892:	30 93 c7 04 	sts	0x04C7, r19
    1896:	20 93 c6 04 	sts	0x04C6, r18
						for(i=0; i<8; i++) {
							if ((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) > irCommMaxDiff) {
    189a:	e0 91 c0 04 	lds	r30, 0x04C0
    189e:	f0 91 c1 04 	lds	r31, 0x04C1
    18a2:	a0 91 be 04 	lds	r26, 0x04BE
    18a6:	b0 91 bf 04 	lds	r27, 0x04BF
    18aa:	80 81       	ld	r24, Z
    18ac:	91 81       	ldd	r25, Z+1	; 0x01
    18ae:	2d 91       	ld	r18, X+
    18b0:	3c 91       	ld	r19, X
    18b2:	11 97       	sbiw	r26, 0x01	; 1
    18b4:	82 1b       	sub	r24, r18
    18b6:	93 0b       	sbc	r25, r19
    18b8:	18 16       	cp	r1, r24
    18ba:	19 06       	cpc	r1, r25
    18bc:	0c f0       	brlt	.+2      	; 0x18c0 <main+0x16e4>
    18be:	6d c2       	rjmp	.+1242   	; 0x1d9a <main+0x1bbe>
		    					irCommMaxDiff = irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i];
    18c0:	90 93 e2 04 	sts	0x04E2, r25
    18c4:	80 93 e1 04 	sts	0x04E1, r24
		    					irCommMaxSensor = i;
    18c8:	10 92 c7 04 	sts	0x04C7, r1
    18cc:	10 92 c6 04 	sts	0x04C6, r1
						//turnOffGreenLeds();
						GREEN_LED2_ON;
						irCommMaxDiff = 0;
    					irCommMaxSensor = -1;
						for(i=0; i<8; i++) {
							if ((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) > irCommMaxDiff) {
    18d0:	42 81       	ldd	r20, Z+2	; 0x02
    18d2:	53 81       	ldd	r21, Z+3	; 0x03
    18d4:	12 96       	adiw	r26, 0x02	; 2
    18d6:	2d 91       	ld	r18, X+
    18d8:	3c 91       	ld	r19, X
    18da:	13 97       	sbiw	r26, 0x03	; 3
    18dc:	42 1b       	sub	r20, r18
    18de:	53 0b       	sbc	r21, r19
    18e0:	84 17       	cp	r24, r20
    18e2:	95 07       	cpc	r25, r21
    18e4:	5c f4       	brge	.+22     	; 0x18fc <main+0x1720>
		    					irCommMaxDiff = irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i];
    18e6:	50 93 e2 04 	sts	0x04E2, r21
    18ea:	40 93 e1 04 	sts	0x04E1, r20
		    					irCommMaxSensor = i;
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	90 93 c7 04 	sts	0x04C7, r25
    18f6:	80 93 c6 04 	sts	0x04C6, r24
    18fa:	ca 01       	movw	r24, r20
						//turnOffGreenLeds();
						GREEN_LED2_ON;
						irCommMaxDiff = 0;
    					irCommMaxSensor = -1;
						for(i=0; i<8; i++) {
							if ((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) > irCommMaxDiff) {
    18fc:	44 81       	ldd	r20, Z+4	; 0x04
    18fe:	55 81       	ldd	r21, Z+5	; 0x05
    1900:	14 96       	adiw	r26, 0x04	; 4
    1902:	2d 91       	ld	r18, X+
    1904:	3c 91       	ld	r19, X
    1906:	15 97       	sbiw	r26, 0x05	; 5
    1908:	42 1b       	sub	r20, r18
    190a:	53 0b       	sbc	r21, r19
    190c:	84 17       	cp	r24, r20
    190e:	95 07       	cpc	r25, r21
    1910:	5c f4       	brge	.+22     	; 0x1928 <main+0x174c>
		    					irCommMaxDiff = irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i];
    1912:	50 93 e2 04 	sts	0x04E2, r21
    1916:	40 93 e1 04 	sts	0x04E1, r20
		    					irCommMaxSensor = i;
    191a:	82 e0       	ldi	r24, 0x02	; 2
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	90 93 c7 04 	sts	0x04C7, r25
    1922:	80 93 c6 04 	sts	0x04C6, r24
    1926:	ca 01       	movw	r24, r20
						//turnOffGreenLeds();
						GREEN_LED2_ON;
						irCommMaxDiff = 0;
    					irCommMaxSensor = -1;
						for(i=0; i<8; i++) {
							if ((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) > irCommMaxDiff) {
    1928:	46 81       	ldd	r20, Z+6	; 0x06
    192a:	57 81       	ldd	r21, Z+7	; 0x07
    192c:	16 96       	adiw	r26, 0x06	; 6
    192e:	2d 91       	ld	r18, X+
    1930:	3c 91       	ld	r19, X
    1932:	17 97       	sbiw	r26, 0x07	; 7
    1934:	42 1b       	sub	r20, r18
    1936:	53 0b       	sbc	r21, r19
    1938:	84 17       	cp	r24, r20
    193a:	95 07       	cpc	r25, r21
    193c:	5c f4       	brge	.+22     	; 0x1954 <main+0x1778>
		    					irCommMaxDiff = irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i];
    193e:	50 93 e2 04 	sts	0x04E2, r21
    1942:	40 93 e1 04 	sts	0x04E1, r20
		    					irCommMaxSensor = i;
    1946:	23 e0       	ldi	r18, 0x03	; 3
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	30 93 c7 04 	sts	0x04C7, r19
    194e:	20 93 c6 04 	sts	0x04C6, r18
    1952:	ca 01       	movw	r24, r20
						//turnOffGreenLeds();
						GREEN_LED2_ON;
						irCommMaxDiff = 0;
    					irCommMaxSensor = -1;
						for(i=0; i<8; i++) {
							if ((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) > irCommMaxDiff) {
    1954:	40 85       	ldd	r20, Z+8	; 0x08
    1956:	51 85       	ldd	r21, Z+9	; 0x09
    1958:	18 96       	adiw	r26, 0x08	; 8
    195a:	2d 91       	ld	r18, X+
    195c:	3c 91       	ld	r19, X
    195e:	19 97       	sbiw	r26, 0x09	; 9
    1960:	42 1b       	sub	r20, r18
    1962:	53 0b       	sbc	r21, r19
    1964:	84 17       	cp	r24, r20
    1966:	95 07       	cpc	r25, r21
    1968:	5c f4       	brge	.+22     	; 0x1980 <main+0x17a4>
		    					irCommMaxDiff = irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i];
    196a:	50 93 e2 04 	sts	0x04E2, r21
    196e:	40 93 e1 04 	sts	0x04E1, r20
		    					irCommMaxSensor = i;
    1972:	84 e0       	ldi	r24, 0x04	; 4
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	90 93 c7 04 	sts	0x04C7, r25
    197a:	80 93 c6 04 	sts	0x04C6, r24
    197e:	ca 01       	movw	r24, r20
						//turnOffGreenLeds();
						GREEN_LED2_ON;
						irCommMaxDiff = 0;
    					irCommMaxSensor = -1;
						for(i=0; i<8; i++) {
							if ((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) > irCommMaxDiff) {
    1980:	42 85       	ldd	r20, Z+10	; 0x0a
    1982:	53 85       	ldd	r21, Z+11	; 0x0b
    1984:	1a 96       	adiw	r26, 0x0a	; 10
    1986:	2d 91       	ld	r18, X+
    1988:	3c 91       	ld	r19, X
    198a:	1b 97       	sbiw	r26, 0x0b	; 11
    198c:	42 1b       	sub	r20, r18
    198e:	53 0b       	sbc	r21, r19
    1990:	84 17       	cp	r24, r20
    1992:	95 07       	cpc	r25, r21
    1994:	5c f4       	brge	.+22     	; 0x19ac <main+0x17d0>
		    					irCommMaxDiff = irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i];
    1996:	50 93 e2 04 	sts	0x04E2, r21
    199a:	40 93 e1 04 	sts	0x04E1, r20
		    					irCommMaxSensor = i;
    199e:	25 e0       	ldi	r18, 0x05	; 5
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	30 93 c7 04 	sts	0x04C7, r19
    19a6:	20 93 c6 04 	sts	0x04C6, r18
    19aa:	ca 01       	movw	r24, r20
						//turnOffGreenLeds();
						GREEN_LED2_ON;
						irCommMaxDiff = 0;
    					irCommMaxSensor = -1;
						for(i=0; i<8; i++) {
							if ((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) > irCommMaxDiff) {
    19ac:	44 85       	ldd	r20, Z+12	; 0x0c
    19ae:	55 85       	ldd	r21, Z+13	; 0x0d
    19b0:	1c 96       	adiw	r26, 0x0c	; 12
    19b2:	2d 91       	ld	r18, X+
    19b4:	3c 91       	ld	r19, X
    19b6:	1d 97       	sbiw	r26, 0x0d	; 13
    19b8:	42 1b       	sub	r20, r18
    19ba:	53 0b       	sbc	r21, r19
    19bc:	84 17       	cp	r24, r20
    19be:	95 07       	cpc	r25, r21
    19c0:	5c f4       	brge	.+22     	; 0x19d8 <main+0x17fc>
		    					irCommMaxDiff = irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i];
    19c2:	50 93 e2 04 	sts	0x04E2, r21
    19c6:	40 93 e1 04 	sts	0x04E1, r20
		    					irCommMaxSensor = i;
    19ca:	86 e0       	ldi	r24, 0x06	; 6
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	90 93 c7 04 	sts	0x04C7, r25
    19d2:	80 93 c6 04 	sts	0x04C6, r24
    19d6:	ca 01       	movw	r24, r20
						//turnOffGreenLeds();
						GREEN_LED2_ON;
						irCommMaxDiff = 0;
    					irCommMaxSensor = -1;
						for(i=0; i<8; i++) {
							if ((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) > irCommMaxDiff) {
    19d8:	26 85       	ldd	r18, Z+14	; 0x0e
    19da:	37 85       	ldd	r19, Z+15	; 0x0f
    19dc:	1e 96       	adiw	r26, 0x0e	; 14
    19de:	4d 91       	ld	r20, X+
    19e0:	5c 91       	ld	r21, X
    19e2:	1f 97       	sbiw	r26, 0x0f	; 15
    19e4:	24 1b       	sub	r18, r20
    19e6:	35 0b       	sbc	r19, r21
    19e8:	82 17       	cp	r24, r18
    19ea:	93 07       	cpc	r25, r19
    19ec:	5c f4       	brge	.+22     	; 0x1a04 <main+0x1828>
		    					irCommMaxDiff = irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i];
    19ee:	30 93 e2 04 	sts	0x04E2, r19
    19f2:	20 93 e1 04 	sts	0x04E1, r18
		    					irCommMaxSensor = i;
    19f6:	a7 e0       	ldi	r26, 0x07	; 7
    19f8:	b0 e0       	ldi	r27, 0x00	; 0
    19fa:	b0 93 c7 04 	sts	0x04C7, r27
    19fe:	a0 93 c6 04 	sts	0x04C6, r26
    1a02:	c9 01       	movw	r24, r18
							}
						}
						if(irCommMaxDiff >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    1a04:	84 31       	cpi	r24, 0x14	; 20
    1a06:	91 05       	cpc	r25, r1
    1a08:	0c f4       	brge	.+2      	; 0x1a0c <main+0x1830>
    1a0a:	68 c1       	rjmp	.+720    	; 0x1cdc <main+0x1b00>
							irCommState = IRCOMM_RX_DETECT_START_BIT_STATE;
    1a0c:	b3 e0       	ldi	r27, 0x03	; 3
    1a0e:	b0 93 94 04 	sts	0x0494, r27
					break;

		}

		if(currentSelector!=0) {
			handleMotorsWithSpeedController();  
    1a12:	0e 94 09 35 	call	0x6a12	; 0x6a12 <handleMotorsWithSpeedController>
    1a16:	80 91 1a 04 	lds	r24, 0x041A
    1a1a:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <main+0xfc>
						irCommSwitchCount = 0;
						for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
							if(irCommMaxSensorSignal[i] > 0) {
								if(irCommSignalState < 0) {
									irCommSignalState = 1;
									irCommSwitchCount++;
    1a1e:	80 91 9d 04 	lds	r24, 0x049D
    1a22:	90 91 9e 04 	lds	r25, 0x049E
    1a26:	01 96       	adiw	r24, 0x01	; 1
    1a28:	90 93 9e 04 	sts	0x049E, r25
    1a2c:	80 93 9d 04 	sts	0x049D, r24
						}
						irCommSwitchCount = 0;
						for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
							if(irCommMaxSensorSignal[i] > 0) {
								if(irCommSignalState < 0) {
									irCommSignalState = 1;
    1a30:	31 e0       	ldi	r19, 0x01	; 1
    1a32:	6f ce       	rjmp	.-802    	; 0x1712 <main+0x1536>
						}
						//updateBlueLed(255);						
						break;

					case IRCOMM_RX_CHECK_CRC:
						irCommRxCrcError = (irCommCrc + (irCommRxBitReceived[8]<<1) + irCommRxBitReceived[9])&0x03;
    1a34:	80 91 df 04 	lds	r24, 0x04DF
    1a38:	90 91 bc 04 	lds	r25, 0x04BC
    1a3c:	89 0f       	add	r24, r25
    1a3e:	90 91 de 04 	lds	r25, 0x04DE
    1a42:	99 0f       	add	r25, r25
    1a44:	89 0f       	add	r24, r25
    1a46:	83 70       	andi	r24, 0x03	; 3
    1a48:	80 93 ab 04 	sts	0x04AB, r24
						if((irCommRxByte!=irCommRxByteExpected) || (irCommRxCrcError!=0)) {
    1a4c:	90 91 ac 04 	lds	r25, 0x04AC
    1a50:	20 91 ad 04 	lds	r18, 0x04AD
    1a54:	92 17       	cp	r25, r18
    1a56:	09 f4       	brne	.+2      	; 0x1a5a <main+0x187e>
    1a58:	f7 c1       	rjmp	.+1006   	; 0x1e48 <main+0x1c6c>
							if(irCommRxByte!=irCommRxByteExpected) {
								updateGreenLed(0);
    1a5a:	80 e0       	ldi	r24, 0x00	; 0
    1a5c:	0e 94 d9 3d 	call	0x7bb2	; 0x7bb2 <updateGreenLed>
							} else {
								updateRedLed(0);
							}
							irCommState = IRCOMM_RX_DO_NOTHING;
    1a60:	98 e0       	ldi	r25, 0x08	; 8
    1a62:	90 93 94 04 	sts	0x0494, r25
							adcSamplingState = 12;
    1a66:	ac e0       	ldi	r26, 0x0C	; 12
    1a68:	a0 93 8a 02 	sts	0x028A, r26
							if(DEBUG_BYTE_SEQUENCE) {
								irCommSendValues = 0;						
    1a6c:	10 92 9f 04 	sts	0x049F, r1
								while(irCommSendValues==0);	// wait for the start from the uart (computer)
    1a70:	80 91 9f 04 	lds	r24, 0x049F
    1a74:	88 23       	and	r24, r24
    1a76:	e1 f3       	breq	.-8      	; 0x1a70 <main+0x1894>
								usart0Transmit(0xFF, 1);
    1a78:	8f ef       	ldi	r24, 0xFF	; 255
    1a7a:	61 e0       	ldi	r22, 0x01	; 1
    1a7c:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
								usart0Transmit(irCommRxCrcError,1);
    1a80:	80 91 ab 04 	lds	r24, 0x04AB
    1a84:	61 e0       	ldi	r22, 0x01	; 1
    1a86:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
								usart0Transmit(irCommRxByte,1);
    1a8a:	80 91 ac 04 	lds	r24, 0x04AC
    1a8e:	61 e0       	ldi	r22, 0x01	; 1
    1a90:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
								usart0Transmit(irCommRxByteExpected,1);
    1a94:	80 91 ad 04 	lds	r24, 0x04AD
    1a98:	61 e0       	ldi	r22, 0x01	; 1
    1a9a:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
								usart0Transmit(irCommRxSequenceCount,1);
    1a9e:	80 91 ae 04 	lds	r24, 0x04AE
    1aa2:	61 e0       	ldi	r22, 0x01	; 1
    1aa4:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
								for(i=0; i<10; i++) {
									usart0Transmit(irCommRxBitReceived[i],1);
    1aa8:	80 91 d6 04 	lds	r24, 0x04D6
    1aac:	61 e0       	ldi	r22, 0x01	; 1
    1aae:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
    1ab2:	80 91 d7 04 	lds	r24, 0x04D7
    1ab6:	61 e0       	ldi	r22, 0x01	; 1
    1ab8:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
    1abc:	80 91 d8 04 	lds	r24, 0x04D8
    1ac0:	61 e0       	ldi	r22, 0x01	; 1
    1ac2:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
    1ac6:	80 91 d9 04 	lds	r24, 0x04D9
    1aca:	61 e0       	ldi	r22, 0x01	; 1
    1acc:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
    1ad0:	80 91 da 04 	lds	r24, 0x04DA
    1ad4:	61 e0       	ldi	r22, 0x01	; 1
    1ad6:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
    1ada:	80 91 db 04 	lds	r24, 0x04DB
    1ade:	61 e0       	ldi	r22, 0x01	; 1
    1ae0:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
    1ae4:	80 91 dc 04 	lds	r24, 0x04DC
    1ae8:	61 e0       	ldi	r22, 0x01	; 1
    1aea:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
    1aee:	80 91 dd 04 	lds	r24, 0x04DD
    1af2:	61 e0       	ldi	r22, 0x01	; 1
    1af4:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
    1af8:	80 91 de 04 	lds	r24, 0x04DE
    1afc:	61 e0       	ldi	r22, 0x01	; 1
    1afe:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
    1b02:	80 91 df 04 	lds	r24, 0x04DF
    1b06:	61 e0       	ldi	r22, 0x01	; 1
    1b08:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
								}
								usart0Transmit(irCommMaxSensor,1);
    1b0c:	80 91 c6 04 	lds	r24, 0x04C6
    1b10:	61 e0       	ldi	r22, 0x01	; 1
    1b12:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
								usart0Transmit(irCommSwitchCount,1);
    1b16:	80 91 9d 04 	lds	r24, 0x049D
    1b1a:	90 91 9e 04 	lds	r25, 0x049E
    1b1e:	61 e0       	ldi	r22, 0x01	; 1
    1b20:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
    1b24:	8b e5       	ldi	r24, 0x5B	; 91
    1b26:	98 e0       	ldi	r25, 0x08	; 8
    1b28:	5c 01       	movw	r10, r24
								for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
									irCommTempValue = irCommMaxSensorSignal[i];
    1b2a:	f5 01       	movw	r30, r10
    1b2c:	80 81       	ld	r24, Z
    1b2e:	91 81       	ldd	r25, Z+1	; 0x01
    1b30:	22 e0       	ldi	r18, 0x02	; 2
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	a2 0e       	add	r10, r18
    1b36:	b3 1e       	adc	r11, r19
    1b38:	80 93 a0 04 	sts	0x04A0, r24
    1b3c:	90 93 a1 04 	sts	0x04A1, r25
									usart0Transmit(irCommTempValue&0xFF,1);
    1b40:	61 e0       	ldi	r22, 0x01	; 1
    1b42:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
									usart0Transmit(irCommTempValue>>8,1);
    1b46:	80 91 a1 04 	lds	r24, 0x04A1
    1b4a:	61 e0       	ldi	r22, 0x01	; 1
    1b4c:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <usart0Transmit>
								for(i=0; i<10; i++) {
									usart0Transmit(irCommRxBitReceived[i],1);
								}
								usart0Transmit(irCommMaxSensor,1);
								usart0Transmit(irCommSwitchCount,1);
								for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    1b50:	33 e8       	ldi	r19, 0x83	; 131
    1b52:	a3 16       	cp	r10, r19
    1b54:	38 e0       	ldi	r19, 0x08	; 8
    1b56:	b3 06       	cpc	r11, r19
    1b58:	41 f7       	brne	.-48     	; 0x1b2a <main+0x194e>
    1b5a:	0c 94 2c 03 	jmp	0x658	; 0x658 <main+0x47c>
						break;

					case IRCOMM_RX_READ_BIT:
						//updateBlueLed(0);
						//turnOffGreenLeds();
						GREEN_LED6_ON;
    1b5e:	80 91 0b 01 	lds	r24, 0x010B
    1b62:	8f 7b       	andi	r24, 0xBF	; 191
    1b64:	80 93 0b 01 	sts	0x010B, r24
						// extract signal from the sensor with higher amplitude and compute the signal mean
						irCommProxSum = 0;
    1b68:	10 92 96 04 	sts	0x0496, r1
    1b6c:	10 92 97 04 	sts	0x0497, r1
    1b70:	10 92 98 04 	sts	0x0498, r1
    1b74:	10 92 99 04 	sts	0x0499, r1
						irCommTempMin = 1024;
    1b78:	80 e0       	ldi	r24, 0x00	; 0
    1b7a:	94 e0       	ldi	r25, 0x04	; 4
    1b7c:	90 93 a5 04 	sts	0x04A5, r25
    1b80:	80 93 a4 04 	sts	0x04A4, r24
						irCommTempMax = 0;
    1b84:	10 92 a3 04 	sts	0x04A3, r1
    1b88:	10 92 a2 04 	sts	0x04A2, r1
#include "nRF24L01.h"
#include "behaviors.h"
#include "sensors.h"


int main(void) {
    1b8c:	80 91 c6 04 	lds	r24, 0x04C6
    1b90:	90 91 c7 04 	lds	r25, 0x04C7
    1b94:	88 0f       	add	r24, r24
    1b96:	99 1f       	adc	r25, r25
    1b98:	e0 91 67 07 	lds	r30, 0x0767
    1b9c:	f0 91 68 07 	lds	r31, 0x0768
    1ba0:	e8 0f       	add	r30, r24
    1ba2:	f9 1f       	adc	r31, r25
						//turnOffGreenLeds();
						GREEN_LED6_ON;
						// extract signal from the sensor with higher amplitude and compute the signal mean
						irCommProxSum = 0;
						irCommTempMin = 1024;
						irCommTempMax = 0;
    1ba4:	8b e5       	ldi	r24, 0x5B	; 91
    1ba6:	a8 2e       	mov	r10, r24
    1ba8:	88 e0       	ldi	r24, 0x08	; 8
    1baa:	b8 2e       	mov	r11, r24
#include "nRF24L01.h"
#include "behaviors.h"
#include "sensors.h"


int main(void) {
    1bac:	b5 01       	movw	r22, r10
    1bae:	20 e0       	ldi	r18, 0x00	; 0
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	a9 01       	movw	r20, r18
						// extract signal from the sensor with higher amplitude and compute the signal mean
						irCommProxSum = 0;
						irCommTempMin = 1024;
						irCommTempMax = 0;
						for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
							irCommMaxSensorSignal[i] = irCommProxValuesCurr[irCommMaxSensor+i*8];
    1bb4:	80 81       	ld	r24, Z
    1bb6:	91 81       	ldd	r25, Z+1	; 0x01
    1bb8:	db 01       	movw	r26, r22
    1bba:	8d 93       	st	X+, r24
    1bbc:	9d 93       	st	X+, r25
    1bbe:	bd 01       	movw	r22, r26
							irCommProxSum += irCommMaxSensorSignal[i];
    1bc0:	aa 27       	eor	r26, r26
    1bc2:	97 fd       	sbrc	r25, 7
    1bc4:	a0 95       	com	r26
    1bc6:	ba 2f       	mov	r27, r26
    1bc8:	28 0f       	add	r18, r24
    1bca:	39 1f       	adc	r19, r25
    1bcc:	4a 1f       	adc	r20, r26
    1bce:	5b 1f       	adc	r21, r27
    1bd0:	70 96       	adiw	r30, 0x10	; 16
						GREEN_LED6_ON;
						// extract signal from the sensor with higher amplitude and compute the signal mean
						irCommProxSum = 0;
						irCommTempMin = 1024;
						irCommTempMax = 0;
						for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    1bd2:	b8 e0       	ldi	r27, 0x08	; 8
    1bd4:	63 38       	cpi	r22, 0x83	; 131
    1bd6:	7b 07       	cpc	r23, r27
    1bd8:	69 f7       	brne	.-38     	; 0x1bb4 <main+0x19d8>
    1bda:	20 93 96 04 	sts	0x0496, r18
    1bde:	30 93 97 04 	sts	0x0497, r19
    1be2:	40 93 98 04 	sts	0x0498, r20
    1be6:	50 93 99 04 	sts	0x0499, r21
							irCommMaxSensorSignal[i] = irCommProxValuesCurr[irCommMaxSensor+i*8];
							irCommProxSum += irCommMaxSensorSignal[i];

						}
						irCommProxMean = (int)(irCommProxSum / IRCOMM_SAMPLING_WINDOW);
    1bea:	ca 01       	movw	r24, r20
    1bec:	b9 01       	movw	r22, r18
    1bee:	24 e1       	ldi	r18, 0x14	; 20
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	40 e0       	ldi	r20, 0x00	; 0
    1bf4:	50 e0       	ldi	r21, 0x00	; 0
    1bf6:	0e 94 1a 49 	call	0x9234	; 0x9234 <__divmodsi4>
    1bfa:	c9 01       	movw	r24, r18
    1bfc:	30 93 9b 04 	sts	0x049B, r19
    1c00:	20 93 9a 04 	sts	0x049A, r18
    1c04:	f5 01       	movw	r30, r10

						// substract mean from signal
						for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
							irCommMaxSensorSignal[i] -= irCommProxMean;
    1c06:	20 81       	ld	r18, Z
    1c08:	31 81       	ldd	r19, Z+1	; 0x01
    1c0a:	28 1b       	sub	r18, r24
    1c0c:	39 0b       	sbc	r19, r25
    1c0e:	21 93       	st	Z+, r18
    1c10:	31 93       	st	Z+, r19

						}
						irCommProxMean = (int)(irCommProxSum / IRCOMM_SAMPLING_WINDOW);

						// substract mean from signal
						for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    1c12:	28 e0       	ldi	r18, 0x08	; 8
    1c14:	e3 38       	cpi	r30, 0x83	; 131
    1c16:	f2 07       	cpc	r31, r18
    1c18:	b1 f7       	brne	.-20     	; 0x1c06 <main+0x1a2a>
							irCommMaxSensorSignal[i] -= irCommProxMean;
						}
						
						// start counting number of switch around mean signal
						if(irCommMaxSensorSignal[0] > 0) {
    1c1a:	80 91 5b 08 	lds	r24, 0x085B
    1c1e:	90 91 5c 08 	lds	r25, 0x085C
    1c22:	18 16       	cp	r1, r24
    1c24:	19 06       	cpc	r1, r25
    1c26:	0c f0       	brlt	.+2      	; 0x1c2a <main+0x1a4e>
    1c28:	2a c1       	rjmp	.+596    	; 0x1e7e <main+0x1ca2>
							irCommSignalState = 1;
    1c2a:	20 92 9c 04 	sts	0x049C, r2
    1c2e:	21 e0       	ldi	r18, 0x01	; 1
    1c30:	32 2d       	mov	r19, r2
						} else {
							irCommSignalState = -1;
						}
						irCommSwitchCount = 0;
    1c32:	10 92 9e 04 	sts	0x049E, r1
    1c36:	10 92 9d 04 	sts	0x049D, r1
    1c3a:	ed e5       	ldi	r30, 0x5D	; 93
    1c3c:	f8 e0       	ldi	r31, 0x08	; 8
    1c3e:	07 c0       	rjmp	.+14     	; 0x1c4e <main+0x1a72>
						for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
							if(irCommMaxSensorSignal[i] > 0) {
								if(irCommSignalState < 0) {
    1c40:	27 fd       	sbrc	r18, 7
    1c42:	41 c0       	rjmp	.+130    	; 0x1cc6 <main+0x1aea>
							irCommSignalState = 1;
						} else {
							irCommSignalState = -1;
						}
						irCommSwitchCount = 0;
						for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
    1c44:	48 e0       	ldi	r20, 0x08	; 8
    1c46:	e3 38       	cpi	r30, 0x83	; 131
    1c48:	f4 07       	cpc	r31, r20
    1c4a:	b1 f0       	breq	.+44     	; 0x1c78 <main+0x1a9c>
    1c4c:	23 2f       	mov	r18, r19
							if(irCommMaxSensorSignal[i] > 0) {
    1c4e:	81 91       	ld	r24, Z+
    1c50:	91 91       	ld	r25, Z+
    1c52:	18 16       	cp	r1, r24
    1c54:	19 06       	cpc	r1, r25
    1c56:	a4 f3       	brlt	.-24     	; 0x1c40 <main+0x1a64>
								if(irCommSignalState < 0) {
									irCommSignalState = 1;
									irCommSwitchCount++;
								}
							} else {
								if(irCommSignalState > 0) {
    1c58:	12 16       	cp	r1, r18
    1c5a:	a4 f7       	brge	.-24     	; 0x1c44 <main+0x1a68>
									irCommSignalState = -1;
									irCommSwitchCount++;
    1c5c:	80 91 9d 04 	lds	r24, 0x049D
    1c60:	90 91 9e 04 	lds	r25, 0x049E
    1c64:	01 96       	adiw	r24, 0x01	; 1
    1c66:	90 93 9e 04 	sts	0x049E, r25
    1c6a:	80 93 9d 04 	sts	0x049D, r24
									irCommSignalState = 1;
									irCommSwitchCount++;
								}
							} else {
								if(irCommSignalState > 0) {
									irCommSignalState = -1;
    1c6e:	3f ef       	ldi	r19, 0xFF	; 255
							irCommSignalState = 1;
						} else {
							irCommSignalState = -1;
						}
						irCommSwitchCount = 0;
						for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
    1c70:	48 e0       	ldi	r20, 0x08	; 8
    1c72:	e3 38       	cpi	r30, 0x83	; 131
    1c74:	f4 07       	cpc	r31, r20
    1c76:	51 f7       	brne	.-44     	; 0x1c4c <main+0x1a70>
    1c78:	30 93 9c 04 	sts	0x049C, r19
								usart0Transmit(irCommTempValue&0xFF,1);
								usart0Transmit(irCommTempValue>>8,1);
							}
						}

						if(irCommSwitchCount >= (IRCOMM_BIT0_SWITCH_COUNT-2)) {
    1c7c:	80 91 9d 04 	lds	r24, 0x049D
    1c80:	90 91 9e 04 	lds	r25, 0x049E
    1c84:	86 30       	cpi	r24, 0x06	; 6
    1c86:	91 05       	cpc	r25, r1
    1c88:	08 f4       	brcc	.+2      	; 0x1c8c <main+0x1ab0>
    1c8a:	a6 c0       	rjmp	.+332    	; 0x1dd8 <main+0x1bfc>
							irCommRxBitReceived[irCommRxBitCount] = 0;
    1c8c:	80 91 aa 04 	lds	r24, 0x04AA
    1c90:	e8 2f       	mov	r30, r24
    1c92:	f0 e0       	ldi	r31, 0x00	; 0
    1c94:	ea 52       	subi	r30, 0x2A	; 42
    1c96:	fb 4f       	sbci	r31, 0xFB	; 251
    1c98:	10 82       	st	Z, r1
							if(irCommRxBitCount< 8) {	// do not consider the crc
    1c9a:	88 30       	cpi	r24, 0x08	; 8
    1c9c:	28 f4       	brcc	.+10     	; 0x1ca8 <main+0x1acc>
								irCommRxByte = irCommRxByte<<1;
    1c9e:	90 91 ac 04 	lds	r25, 0x04AC
    1ca2:	99 0f       	add	r25, r25
    1ca4:	90 93 ac 04 	sts	0x04AC, r25
								irCommRxByte += 1;
							}
						} else {	// error...no significant signal perceived
							irCommRxBitReceived[irCommRxBitCount] = 2;
						}
						irCommRxBitCount++;
    1ca8:	8f 5f       	subi	r24, 0xFF	; 255
    1caa:	80 93 aa 04 	sts	0x04AA, r24
						if(irCommRxBitCount == 10) {
    1cae:	8a 30       	cpi	r24, 0x0A	; 10
    1cb0:	09 f4       	brne	.+2      	; 0x1cb4 <main+0x1ad8>
    1cb2:	dc c0       	rjmp	.+440    	; 0x1e6c <main+0x1c90>
							irCommState = IRCOMM_RX_CHECK_CRC;
							//adcSamplingState = 12;
						} else {
							irCommState = IRCOMM_RX_WAITING_BIT;
    1cb4:	85 e0       	ldi	r24, 0x05	; 5
    1cb6:	80 93 94 04 	sts	0x0494, r24
					break;

		}

		if(currentSelector!=0) {
			handleMotorsWithSpeedController();  
    1cba:	0e 94 09 35 	call	0x6a12	; 0x6a12 <handleMotorsWithSpeedController>
    1cbe:	80 91 1a 04 	lds	r24, 0x041A
    1cc2:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <main+0xfc>
						irCommSwitchCount = 0;
						for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
							if(irCommMaxSensorSignal[i] > 0) {
								if(irCommSignalState < 0) {
									irCommSignalState = 1;
									irCommSwitchCount++;
    1cc6:	80 91 9d 04 	lds	r24, 0x049D
    1cca:	90 91 9e 04 	lds	r25, 0x049E
    1cce:	01 96       	adiw	r24, 0x01	; 1
    1cd0:	90 93 9e 04 	sts	0x049E, r25
    1cd4:	80 93 9d 04 	sts	0x049D, r24
						}
						irCommSwitchCount = 0;
						for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
							if(irCommMaxSensorSignal[i] > 0) {
								if(irCommSignalState < 0) {
									irCommSignalState = 1;
    1cd8:	31 e0       	ldi	r19, 0x01	; 1
    1cda:	b4 cf       	rjmp	.-152    	; 0x1c44 <main+0x1a68>
							irCommRxBitCount = 0;	
							irCommCrc = 0;	
							irCommRxByte = 0;											
							//updateBlueLed(0);
						} else {
							irCommState = IRCOMM_RX_IDLE_STATE;
    1cdc:	20 92 94 04 	sts	0x0494, r2
					break;

		}

		if(currentSelector!=0) {
			handleMotorsWithSpeedController();  
    1ce0:	0e 94 09 35 	call	0x6a12	; 0x6a12 <handleMotorsWithSpeedController>
    1ce4:	80 91 1a 04 	lds	r24, 0x041A
    1ce8:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <main+0xfc>
						case 0:							
							pwm_red = 255;
							pwm_green = 255;
							pwm_blue = 255;
							if((getTime100MicroSec()-demoEndTime) >= (PAUSE_100_MSEC)) {
								setGreenLed(greenLedState, 0);
    1cec:	80 91 38 04 	lds	r24, 0x0438
    1cf0:	60 e0       	ldi	r22, 0x00	; 0
    1cf2:	0e 94 01 3e 	call	0x7c02	; 0x7c02 <setGreenLed>
								greenLedState++;
    1cf6:	80 91 38 04 	lds	r24, 0x0438
    1cfa:	8f 5f       	subi	r24, 0xFF	; 255
    1cfc:	80 93 38 04 	sts	0x0438, r24
								if(greenLedState > 7) {
    1d00:	88 30       	cpi	r24, 0x08	; 8
    1d02:	18 f0       	brcs	.+6      	; 0x1d0a <main+0x1b2e>
									greenLedState = 0;
    1d04:	10 92 38 04 	sts	0x0438, r1
    1d08:	80 e0       	ldi	r24, 0x00	; 0
								}
								setGreenLed(greenLedState, 1);
    1d0a:	61 e0       	ldi	r22, 0x01	; 1
    1d0c:	0e 94 01 3e 	call	0x7c02	; 0x7c02 <setGreenLed>
								demoEndTime = getTime100MicroSec();											
    1d10:	0e 94 d7 21 	call	0x43ae	; 0x43ae <getTime100MicroSec>
    1d14:	60 93 2a 04 	sts	0x042A, r22
    1d18:	70 93 2b 04 	sts	0x042B, r23
    1d1c:	80 93 2c 04 	sts	0x042C, r24
    1d20:	90 93 2d 04 	sts	0x042D, r25
    1d24:	0c 94 8b 04 	jmp	0x916	; 0x916 <main+0x73a>
									demoStartTime = getTime100MicroSec();
									demoState = 4;
									break;
								}
							}
							if(!CHARGE_ON) {
    1d28:	80 91 03 01 	lds	r24, 0x0103
    1d2c:	84 ff       	sbrs	r24, 4
    1d2e:	02 c0       	rjmp	.+4      	; 0x1d34 <main+0x1b58>
    1d30:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <main+0x5e6>
								chargeContact = 0;
    1d34:	10 92 21 04 	sts	0x0421, r1
								outOfLine = 0;
    1d38:	10 92 20 04 	sts	0x0420, r1
								demoState = 2;
    1d3c:	b2 e0       	ldi	r27, 0x02	; 2
    1d3e:	b0 93 1e 04 	sts	0x041E, r27
								demoStartTime = getTime100MicroSec();
    1d42:	0e 94 d7 21 	call	0x43ae	; 0x43ae <getTime100MicroSec>
    1d46:	60 93 22 04 	sts	0x0422, r22
    1d4a:	70 93 23 04 	sts	0x0423, r23
    1d4e:	80 93 24 04 	sts	0x0424, r24
    1d52:	90 93 25 04 	sts	0x0425, r25
								break;						
    1d56:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <main+0x5e6>
							currRand = rand()% 200;
							if(currRand<50) {
								pwm_red = 255;
							} else if(currRand<100) {
								pwm_green = 255;
							} else if (currRand<150) {	
    1d5a:	a6 e9       	ldi	r26, 0x96	; 150
    1d5c:	8a 16       	cp	r8, r26
    1d5e:	91 04       	cpc	r9, r1
    1d60:	10 f4       	brcc	.+4      	; 0x1d66 <main+0x1b8a>
								pwm_blue = 255;
    1d62:	10 93 0e 02 	sts	0x020E, r17
    1d66:	80 91 0c 02 	lds	r24, 0x020C
    1d6a:	0c 94 63 06 	jmp	0xcc6	; 0xcc6 <main+0xaea>
								setLeftSpeed(-10);
								setRightSpeed(15);
							} else if(proximityResult[11]<LINE_OUT_THR && proximityResult[8]>LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {	// right ground is the only within the black line => turn right
								setLeftSpeed(15);
								setRightSpeed(-10);
							} else if(proximityResult[9]>LINE_OUT_THR) {	// center left is leaving the line => turn right
    1d6e:	31 e0       	ldi	r19, 0x01	; 1
    1d70:	83 3c       	cpi	r24, 0xC3	; 195
    1d72:	93 07       	cpc	r25, r19
    1d74:	0c f0       	brlt	.+2      	; 0x1d78 <main+0x1b9c>
    1d76:	9f cb       	rjmp	.-2242   	; 0x14b6 <main+0x12da>
								setRightSpeed(-5);
								//outOfLine++;
								//if(outOfLine > 250) {
								//	demoState = 1;
								//}
							} else if(proximityResult[10]>LINE_OUT_THR) {	// center right is leaving the lnie => turn left
    1d78:	80 91 3d 02 	lds	r24, 0x023D
    1d7c:	90 91 3e 02 	lds	r25, 0x023E
    1d80:	41 e0       	ldi	r20, 0x01	; 1
    1d82:	83 3c       	cpi	r24, 0xC3	; 195
    1d84:	94 07       	cpc	r25, r20
    1d86:	0c f4       	brge	.+2      	; 0x1d8a <main+0x1bae>
    1d88:	84 c0       	rjmp	.+264    	; 0x1e92 <main+0x1cb6>
								setLeftSpeed(-5);
    1d8a:	8b ef       	ldi	r24, 0xFB	; 251
    1d8c:	0e 94 8f 29 	call	0x531e	; 0x531e <setLeftSpeed>
								setRightSpeed(15);
    1d90:	8f e0       	ldi	r24, 0x0F	; 15
    1d92:	0e 94 ac 29 	call	0x5358	; 0x5358 <setRightSpeed>
    1d96:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <main+0x5e6>
						//turnOffGreenLeds();
						GREEN_LED2_ON;
						irCommMaxDiff = 0;
    					irCommMaxSensor = -1;
						for(i=0; i<8; i++) {
							if ((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) > irCommMaxDiff) {
    1d9a:	80 e0       	ldi	r24, 0x00	; 0
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	98 cd       	rjmp	.-1232   	; 0x18d0 <main+0x16f4>
									demoStartTime = getTime100MicroSec();
									demoState = 3;
									break;
								}
							} else {
								chargeContact = 0;
    1da0:	10 92 21 04 	sts	0x0421, r1

								if(proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {
    1da4:	80 91 3b 02 	lds	r24, 0x023B
    1da8:	90 91 3c 02 	lds	r25, 0x023C
    1dac:	a1 e0       	ldi	r26, 0x01	; 1
    1dae:	83 3c       	cpi	r24, 0xC3	; 195
    1db0:	9a 07       	cpc	r25, r26
    1db2:	ac f1       	brlt	.+106    	; 0x1e1e <main+0x1c42>
    1db4:	20 91 3d 02 	lds	r18, 0x023D
    1db8:	30 91 3e 02 	lds	r19, 0x023E
    1dbc:	b1 e0       	ldi	r27, 0x01	; 1
    1dbe:	23 3c       	cpi	r18, 0xC3	; 195
    1dc0:	3b 07       	cpc	r19, r27
    1dc2:	6c f1       	brlt	.+90     	; 0x1e1e <main+0x1c42>
									outOfLine++;
    1dc4:	20 91 20 04 	lds	r18, 0x0420
    1dc8:	2f 5f       	subi	r18, 0xFF	; 255
    1dca:	20 93 20 04 	sts	0x0420, r18
									if(outOfLine > 250) {
    1dce:	2b 3f       	cpi	r18, 0xFB	; 251
    1dd0:	08 f4       	brcc	.+2      	; 0x1dd4 <main+0x1bf8>
    1dd2:	38 cb       	rjmp	.-2448   	; 0x1444 <main+0x1268>
    1dd4:	0c 94 df 03 	jmp	0x7be	; 0x7be <main+0x5e2>
						if(irCommSwitchCount >= (IRCOMM_BIT0_SWITCH_COUNT-2)) {
							irCommRxBitReceived[irCommRxBitCount] = 0;
							if(irCommRxBitCount< 8) {	// do not consider the crc
								irCommRxByte = irCommRxByte<<1;
							}
						} else if(irCommSwitchCount >= (IRCOMM_BIT1_SWITCH_COUNT-1)) {
    1dd8:	80 91 9d 04 	lds	r24, 0x049D
    1ddc:	90 91 9e 04 	lds	r25, 0x049E
    1de0:	83 30       	cpi	r24, 0x03	; 3
    1de2:	91 05       	cpc	r25, r1
    1de4:	08 f4       	brcc	.+2      	; 0x1de8 <main+0x1c0c>
    1de6:	5d c0       	rjmp	.+186    	; 0x1ea2 <main+0x1cc6>
							irCommRxBitReceived[irCommRxBitCount] = 1;
    1de8:	80 91 aa 04 	lds	r24, 0x04AA
    1dec:	e8 2f       	mov	r30, r24
    1dee:	f0 e0       	ldi	r31, 0x00	; 0
    1df0:	ea 52       	subi	r30, 0x2A	; 42
    1df2:	fb 4f       	sbci	r31, 0xFB	; 251
    1df4:	20 82       	st	Z, r2
							if(irCommRxBitCount<8) {	// do not consider the crc
    1df6:	88 30       	cpi	r24, 0x08	; 8
    1df8:	08 f0       	brcs	.+2      	; 0x1dfc <main+0x1c20>
    1dfa:	56 cf       	rjmp	.-340    	; 0x1ca8 <main+0x1acc>
								irCommCrc++;
    1dfc:	90 91 bc 04 	lds	r25, 0x04BC
    1e00:	9f 5f       	subi	r25, 0xFF	; 255
    1e02:	90 93 bc 04 	sts	0x04BC, r25
								irCommRxByte = irCommRxByte<<1;
    1e06:	90 91 ac 04 	lds	r25, 0x04AC
    1e0a:	99 0f       	add	r25, r25
								irCommRxByte += 1;
    1e0c:	9f 5f       	subi	r25, 0xFF	; 255
    1e0e:	90 93 ac 04 	sts	0x04AC, r25
    1e12:	4a cf       	rjmp	.-364    	; 0x1ca8 <main+0x1acc>
							disableObstacleAvoidance();

							demoEndTime = getTime100MicroSec();
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {	// the robot seems to be blocked somehow
								// go back for a while
								setRightSpeed(-20);
    1e14:	8c ee       	ldi	r24, 0xEC	; 236
    1e16:	0e 94 ac 29 	call	0x5358	; 0x5358 <setRightSpeed>
								setLeftSpeed(-20);
    1e1a:	8c ee       	ldi	r24, 0xEC	; 236
    1e1c:	88 cb       	rjmp	.-2288   	; 0x152e <main+0x1352>
										chargeContact = 0;
										demoState = 1;
										break;
									}
								} else {
									outOfLine = 0;
    1e1e:	10 92 20 04 	sts	0x0420, r1
    1e22:	10 cb       	rjmp	.-2528   	; 0x1444 <main+0x1268>
					if(rgbState == 0) {
						pwm_red = 254;
						pwm_green = 255;
						pwm_blue = 255;
						rgbState = 1;
					} else if(rgbState == 1) {
    1e24:	91 30       	cpi	r25, 0x01	; 1
    1e26:	09 f4       	brne	.+2      	; 0x1e2a <main+0x1c4e>
    1e28:	5e c0       	rjmp	.+188    	; 0x1ee6 <main+0x1d0a>
						pwm_red = 255;
						pwm_green = 254;
						pwm_blue = 255;
						rgbState = 2;
					} else if(rgbState == 2) {
    1e2a:	92 30       	cpi	r25, 0x02	; 2
    1e2c:	11 f0       	breq	.+4      	; 0x1e32 <main+0x1c56>
    1e2e:	0c 94 09 03 	jmp	0x612	; 0x612 <main+0x436>
						pwm_red = 255;
    1e32:	10 93 0c 02 	sts	0x020C, r17
						pwm_green = 255;
    1e36:	10 93 0d 02 	sts	0x020D, r17
						pwm_blue = 254;
    1e3a:	4e ef       	ldi	r20, 0xFE	; 254
    1e3c:	40 93 0e 02 	sts	0x020E, r20
						rgbState = 0;
    1e40:	10 92 ea 02 	sts	0x02EA, r1
    1e44:	0c 94 09 03 	jmp	0x612	; 0x612 <main+0x436>
						//updateBlueLed(255);						
						break;

					case IRCOMM_RX_CHECK_CRC:
						irCommRxCrcError = (irCommCrc + (irCommRxBitReceived[8]<<1) + irCommRxBitReceived[9])&0x03;
						if((irCommRxByte!=irCommRxByteExpected) || (irCommRxCrcError!=0)) {
    1e48:	88 23       	and	r24, r24
    1e4a:	a1 f5       	brne	.+104    	; 0x1eb4 <main+0x1cd8>
									usart0Transmit(irCommTempValue>>8,1);
								}
							}
							break;
						}
						if(irCommRxByteExpected == 255) {
    1e4c:	9f 3f       	cpi	r25, 0xFF	; 255
    1e4e:	09 f4       	brne	.+2      	; 0x1e52 <main+0x1c76>
    1e50:	56 c0       	rjmp	.+172    	; 0x1efe <main+0x1d22>
							irCommRxByteExpected = 0;
							irCommRxSequenceCount++;
						} else {
							irCommRxByteExpected++;
    1e52:	9f 5f       	subi	r25, 0xFF	; 255
    1e54:	90 93 ad 04 	sts	0x04AD, r25
						}
						irCommState = IRCOMM_RX_IDLE_STATE;
    1e58:	20 92 94 04 	sts	0x0494, r2
						irCommRxBitCount = 0;	
    1e5c:	10 92 aa 04 	sts	0x04AA, r1
						irCommCrc = 0;	
    1e60:	10 92 bc 04 	sts	0x04BC, r1
						irCommRxByte = 0;
    1e64:	10 92 ac 04 	sts	0x04AC, r1
							usart0Transmit(irCommRxByte,1);
							for(i=0; i<10; i++) {
								usart0Transmit(irCommRxBitReceived[i],1);
							}
						}						
						break;
    1e68:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <main+0x1e0>
						} else {	// error...no significant signal perceived
							irCommRxBitReceived[irCommRxBitCount] = 2;
						}
						irCommRxBitCount++;
						if(irCommRxBitCount == 10) {
							irCommState = IRCOMM_RX_CHECK_CRC;
    1e6c:	67 e0       	ldi	r22, 0x07	; 7
    1e6e:	60 93 94 04 	sts	0x0494, r22
					break;

		}

		if(currentSelector!=0) {
			handleMotorsWithSpeedController();  
    1e72:	0e 94 09 35 	call	0x6a12	; 0x6a12 <handleMotorsWithSpeedController>
    1e76:	80 91 1a 04 	lds	r24, 0x041A
    1e7a:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <main+0xfc>
						
						// start counting number of switch around mean signal
						if(irCommMaxSensorSignal[0] > 0) {
							irCommSignalState = 1;
						} else {
							irCommSignalState = -1;
    1e7e:	10 93 9c 04 	sts	0x049C, r17
    1e82:	2f ef       	ldi	r18, 0xFF	; 255
    1e84:	31 2f       	mov	r19, r17
    1e86:	d5 ce       	rjmp	.-598    	; 0x1c32 <main+0x1a56>
						
						// start counting number of switch around mean signal
						if(irCommMaxSensorSignal[0] > 0) {
							irCommSignalState = 1;
						} else {
							irCommSignalState = -1;
    1e88:	10 93 9c 04 	sts	0x049C, r17
    1e8c:	2f ef       	ldi	r18, 0xFF	; 255
    1e8e:	31 2f       	mov	r19, r17
    1e90:	37 cc       	rjmp	.-1938   	; 0x1700 <main+0x1524>
								//outOfLine++;
								//if(outOfLine > 250) {
								//	demoState = 1;
								//}
							} else {
								setRightSpeed(15);
    1e92:	8f e0       	ldi	r24, 0x0F	; 15
    1e94:	0e 94 ac 29 	call	0x5358	; 0x5358 <setRightSpeed>
								setLeftSpeed(15);
    1e98:	8f e0       	ldi	r24, 0x0F	; 15
    1e9a:	0e 94 8f 29 	call	0x531e	; 0x531e <setLeftSpeed>
    1e9e:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <main+0x5e6>
								irCommCrc++;
								irCommRxByte = irCommRxByte<<1;
								irCommRxByte += 1;
							}
						} else {	// error...no significant signal perceived
							irCommRxBitReceived[irCommRxBitCount] = 2;
    1ea2:	80 91 aa 04 	lds	r24, 0x04AA
    1ea6:	e8 2f       	mov	r30, r24
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	ea 52       	subi	r30, 0x2A	; 42
    1eac:	fb 4f       	sbci	r31, 0xFB	; 251
    1eae:	52 e0       	ldi	r21, 0x02	; 2
    1eb0:	50 83       	st	Z, r21
    1eb2:	fa ce       	rjmp	.-524    	; 0x1ca8 <main+0x1acc>
						irCommRxCrcError = (irCommCrc + (irCommRxBitReceived[8]<<1) + irCommRxBitReceived[9])&0x03;
						if((irCommRxByte!=irCommRxByteExpected) || (irCommRxCrcError!=0)) {
							if(irCommRxByte!=irCommRxByteExpected) {
								updateGreenLed(0);
							} else {
								updateRedLed(0);
    1eb4:	80 e0       	ldi	r24, 0x00	; 0
    1eb6:	0e 94 c5 3d 	call	0x7b8a	; 0x7b8a <updateRedLed>
    1eba:	d2 cd       	rjmp	.-1116   	; 0x1a60 <main+0x1884>

							if(CHARGE_ON) {
								outOfLine = 0;
								chargeContact++;
								if(chargeContact > 20) {
									setLeftSpeed(0);
    1ebc:	80 e0       	ldi	r24, 0x00	; 0
    1ebe:	0e 94 8f 29 	call	0x531e	; 0x531e <setLeftSpeed>
									setRightSpeed(0);
    1ec2:	80 e0       	ldi	r24, 0x00	; 0
    1ec4:	0e 94 ac 29 	call	0x5358	; 0x5358 <setRightSpeed>
									demoStartTime = getTime100MicroSec();
    1ec8:	0e 94 d7 21 	call	0x43ae	; 0x43ae <getTime100MicroSec>
    1ecc:	60 93 22 04 	sts	0x0422, r22
    1ed0:	70 93 23 04 	sts	0x0423, r23
    1ed4:	80 93 24 04 	sts	0x0424, r24
    1ed8:	90 93 25 04 	sts	0x0425, r25
									demoState = 3;
    1edc:	83 e0       	ldi	r24, 0x03	; 3
    1ede:	80 93 1e 04 	sts	0x041E, r24
									break;
    1ee2:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <main+0x5e6>
						pwm_red = 254;
						pwm_green = 255;
						pwm_blue = 255;
						rgbState = 1;
					} else if(rgbState == 1) {
						pwm_red = 255;
    1ee6:	10 93 0c 02 	sts	0x020C, r17
						pwm_green = 254;
    1eea:	2e ef       	ldi	r18, 0xFE	; 254
    1eec:	20 93 0d 02 	sts	0x020D, r18
						pwm_blue = 255;
    1ef0:	10 93 0e 02 	sts	0x020E, r17
						rgbState = 2;
    1ef4:	32 e0       	ldi	r19, 0x02	; 2
    1ef6:	30 93 ea 02 	sts	0x02EA, r19
    1efa:	0c 94 09 03 	jmp	0x612	; 0x612 <main+0x436>
								}
							}
							break;
						}
						if(irCommRxByteExpected == 255) {
							irCommRxByteExpected = 0;
    1efe:	10 92 ad 04 	sts	0x04AD, r1
							irCommRxSequenceCount++;
    1f02:	80 91 ae 04 	lds	r24, 0x04AE
    1f06:	8f 5f       	subi	r24, 0xFF	; 255
    1f08:	80 93 ae 04 	sts	0x04AE, r24
    1f0c:	a5 cf       	rjmp	.-182    	; 0x1e58 <main+0x1c7c>
									outOfLine = 0;
								}
							}
							
							if(proximityResult[8]<LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR && proximityResult[11]>LINE_OUT_THR) {	// left ground is the only within the black line => turn left
								setLeftSpeed(-10);
    1f0e:	86 ef       	ldi	r24, 0xF6	; 246
    1f10:	0e 94 8f 29 	call	0x531e	; 0x531e <setLeftSpeed>
								setRightSpeed(15);
    1f14:	8f e0       	ldi	r24, 0x0F	; 15
    1f16:	0e 94 ac 29 	call	0x5358	; 0x5358 <setRightSpeed>
    1f1a:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <main+0x5e6>
							} else if(proximityResult[11]<LINE_OUT_THR && proximityResult[8]>LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {	// right ground is the only within the black line => turn right
								setLeftSpeed(15);
    1f1e:	8f e0       	ldi	r24, 0x0F	; 15
    1f20:	0e 94 8f 29 	call	0x531e	; 0x531e <setLeftSpeed>
								setRightSpeed(-10);
    1f24:	86 ef       	ldi	r24, 0xF6	; 246
    1f26:	0e 94 ac 29 	call	0x5358	; 0x5358 <setRightSpeed>
    1f2a:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <main+0x5e6>

00001f2e <SPI_WAIT>:
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	90 e0       	ldi	r25, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
    1f32:	21 e0       	ldi	r18, 0x01	; 1
		}
	
		if(SPSR & _BV(SPIF)) {
    1f34:	0d b4       	in	r0, 0x2d	; 45
    1f36:	07 fc       	sbrc	r0, 7
    1f38:	0a c0       	rjmp	.+20     	; 0x1f4e <SPI_WAIT+0x20>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1f3a:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
    1f3c:	37 e2       	ldi	r19, 0x27	; 39
    1f3e:	80 31       	cpi	r24, 0x10	; 16
    1f40:	93 07       	cpc	r25, r19
    1f42:	c0 f3       	brcs	.-16     	; 0x1f34 <SPI_WAIT+0x6>
			spiCommError = 1;
    1f44:	20 93 e8 02 	sts	0x02E8, r18
		}
	
		if(SPSR & _BV(SPIF)) {
    1f48:	0d b4       	in	r0, 0x2d	; 45
    1f4a:	07 fe       	sbrs	r0, 7
    1f4c:	f6 cf       	rjmp	.-20     	; 0x1f3a <SPI_WAIT+0xc>
			return;
		}
	}
}
    1f4e:	08 95       	ret

00001f50 <initSPI>:

void initSPI() {

    SPI_DDR &= ~((1<<SPI_MOSI)|(1<<SPI_MISO)|(1<<SPI_SS)|(1<<SPI_SCK));
    1f50:	84 b1       	in	r24, 0x04	; 4
    1f52:	80 7f       	andi	r24, 0xF0	; 240
    1f54:	84 b9       	out	0x04, r24	; 4
    // Define the following pins as output
    SPI_DDR |= ((1<<SPI_MOSI)|(1<<SPI_SS)|(1<<SPI_SCK));
    1f56:	84 b1       	in	r24, 0x04	; 4
    1f58:	87 60       	ori	r24, 0x07	; 7
    1f5a:	84 b9       	out	0x04, r24	; 4

    
    SPCR = ((1<<SPE)|               // SPI Enable
    1f5c:	80 e5       	ldi	r24, 0x50	; 80
    1f5e:	8c bd       	out	0x2c, r24	; 44
            (1<<MSTR)|              // 1:Master/ 0:Slave
            (0<<SPR1)|(0<<SPR0)|    // SPI Clock Rate => default 1/4 => 2 MHz
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR |= (1<<SPI2X);              // Double Clock Rate
    1f60:	8d b5       	in	r24, 0x2d	; 45
    1f62:	81 60       	ori	r24, 0x01	; 1
    1f64:	8d bd       	out	0x2d, r24	; 45

}
    1f66:	08 95       	ret

00001f68 <closeSPI>:

void closeSPI() {

	SPCR = 0x00;
    1f68:	1c bc       	out	0x2c, r1	; 44
	SPSR = 0x00;
    1f6a:	1d bc       	out	0x2d, r1	; 45
}
    1f6c:	08 95       	ret

00001f6e <SPI_ReadWrite_Block>:

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1f6e:	44 23       	and	r20, r20
    1f70:	09 f1       	breq	.+66     	; 0x1fb4 <SPI_ReadWrite_Block+0x46>
    1f72:	a6 2f       	mov	r26, r22
    1f74:	b7 2f       	mov	r27, r23
    1f76:	e8 2f       	mov	r30, r24
    1f78:	f9 2f       	mov	r31, r25
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
    1f7a:	91 e0       	ldi	r25, 0x01	; 1
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
    1f7c:	21 91       	ld	r18, Z+
    1f7e:	2e bd       	out	0x2e, r18	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1f80:	21 e0       	ldi	r18, 0x01	; 1
    1f82:	30 e0       	ldi	r19, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
    1f84:	0d b4       	in	r0, 0x2d	; 45
    1f86:	07 fc       	sbrc	r0, 7
    1f88:	0b c0       	rjmp	.+22     	; 0x1fa0 <SPI_ReadWrite_Block+0x32>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1f8a:	2f 5f       	subi	r18, 0xFF	; 255
    1f8c:	3f 4f       	sbci	r19, 0xFF	; 255
		if(timeout>=10000) {
    1f8e:	57 e2       	ldi	r21, 0x27	; 39
    1f90:	20 31       	cpi	r18, 0x10	; 16
    1f92:	35 07       	cpc	r19, r21
    1f94:	b8 f3       	brcs	.-18     	; 0x1f84 <SPI_ReadWrite_Block+0x16>
			spiCommError = 1;
    1f96:	90 93 e8 02 	sts	0x02E8, r25
		}
	
		if(SPSR & _BV(SPIF)) {
    1f9a:	0d b4       	in	r0, 0x2d	; 45
    1f9c:	07 fe       	sbrs	r0, 7
    1f9e:	f5 cf       	rjmp	.-22     	; 0x1f8a <SPI_ReadWrite_Block+0x1c>
void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
          SPI_WAIT();
		  if(spiCommError) {
    1fa0:	20 91 e8 02 	lds	r18, 0x02E8
    1fa4:	22 23       	and	r18, r18
    1fa6:	31 f4       	brne	.+12     	; 0x1fb4 <SPI_ReadWrite_Block+0x46>
			return;
		  }
          buffer[i] = SPDR;
    1fa8:	2e b5       	in	r18, 0x2e	; 46
    1faa:	2d 93       	st	X+, r18
	SPSR = 0x00;
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1fac:	2e 2f       	mov	r18, r30
    1fae:	28 1b       	sub	r18, r24
    1fb0:	24 17       	cp	r18, r20
    1fb2:	20 f3       	brcs	.-56     	; 0x1f7c <SPI_ReadWrite_Block+0xe>
    1fb4:	08 95       	ret

00001fb6 <SPI_Write_Block>:
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1fb6:	66 23       	and	r22, r22
    1fb8:	e9 f0       	breq	.+58     	; 0x1ff4 <SPI_Write_Block+0x3e>
    1fba:	e8 2f       	mov	r30, r24
    1fbc:	f9 2f       	mov	r31, r25
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
    1fbe:	91 e0       	ldi	r25, 0x01	; 1
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
    1fc0:	21 91       	ld	r18, Z+
    1fc2:	2e bd       	out	0x2e, r18	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1fc4:	21 e0       	ldi	r18, 0x01	; 1
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
    1fc8:	0d b4       	in	r0, 0x2d	; 45
    1fca:	07 fc       	sbrc	r0, 7
    1fcc:	0b c0       	rjmp	.+22     	; 0x1fe4 <SPI_Write_Block+0x2e>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1fce:	2f 5f       	subi	r18, 0xFF	; 255
    1fd0:	3f 4f       	sbci	r19, 0xFF	; 255
		if(timeout>=10000) {
    1fd2:	47 e2       	ldi	r20, 0x27	; 39
    1fd4:	20 31       	cpi	r18, 0x10	; 16
    1fd6:	34 07       	cpc	r19, r20
    1fd8:	b8 f3       	brcs	.-18     	; 0x1fc8 <SPI_Write_Block+0x12>
			spiCommError = 1;
    1fda:	90 93 e8 02 	sts	0x02E8, r25
		}
	
		if(SPSR & _BV(SPIF)) {
    1fde:	0d b4       	in	r0, 0x2d	; 45
    1fe0:	07 fe       	sbrs	r0, 7
    1fe2:	f5 cf       	rjmp	.-22     	; 0x1fce <SPI_Write_Block+0x18>
void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
          SPI_WAIT();
		  if(spiCommError) {
    1fe4:	20 91 e8 02 	lds	r18, 0x02E8
    1fe8:	22 23       	and	r18, r18
    1fea:	21 f4       	brne	.+8      	; 0x1ff4 <SPI_Write_Block+0x3e>
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1fec:	2e 2f       	mov	r18, r30
    1fee:	28 1b       	sub	r18, r24
    1ff0:	26 17       	cp	r18, r22
    1ff2:	30 f3       	brcs	.-52     	; 0x1fc0 <SPI_Write_Block+0xa>
    1ff4:	08 95       	ret

00001ff6 <SPI_Write_Byte>:
    }

}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    1ff6:	8e bd       	out	0x2e, r24	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1ff8:	81 e0       	ldi	r24, 0x01	; 1
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
    1ffc:	21 e0       	ldi	r18, 0x01	; 1
		}
	
		if(SPSR & _BV(SPIF)) {
    1ffe:	0d b4       	in	r0, 0x2d	; 45
    2000:	07 fc       	sbrc	r0, 7
    2002:	0a c0       	rjmp	.+20     	; 0x2018 <SPI_Write_Byte+0x22>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    2004:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
    2006:	37 e2       	ldi	r19, 0x27	; 39
    2008:	80 31       	cpi	r24, 0x10	; 16
    200a:	93 07       	cpc	r25, r19
    200c:	c0 f3       	brcs	.-16     	; 0x1ffe <SPI_Write_Byte+0x8>
			spiCommError = 1;
    200e:	20 93 e8 02 	sts	0x02E8, r18
		}
	
		if(SPSR & _BV(SPIF)) {
    2012:	0d b4       	in	r0, 0x2d	; 45
    2014:	07 fe       	sbrs	r0, 7
    2016:	f6 cf       	rjmp	.-20     	; 0x2004 <SPI_Write_Byte+0xe>
}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    SPI_WAIT();
    return SPDR;
    2018:	8e b5       	in	r24, 0x2e	; 46
}
    201a:	08 95       	ret

0000201c <mirf_config>:


void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
    201c:	0f 93       	push	r16
    201e:	1f 93       	push	r17
    2020:	df 93       	push	r29
    2022:	cf 93       	push	r28
    2024:	00 d0       	rcall	.+0      	; 0x2026 <mirf_config+0xa>
    2026:	cd b7       	in	r28, 0x3d	; 61
    2028:	de b7       	in	r29, 0x3e	; 62
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    202a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    202c:	80 e2       	ldi	r24, 0x20	; 32
    202e:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    2032:	8d e0       	ldi	r24, 0x0D	; 13
    2034:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    mirf_CSN_hi;
    2038:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    203a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    203c:	83 e2       	ldi	r24, 0x23	; 35
    203e:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    2042:	81 e0       	ldi	r24, 0x01	; 1
    2044:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    mirf_CSN_hi;
    2048:	28 9a       	sbi	0x05, 0	; 5

	// address width
	mirf_config_register(SETUP_AW, 0x01);

	// tx address
	temp[0] = (rfAddress>>8)&0xFF;
    204a:	80 91 e5 02 	lds	r24, 0x02E5
    204e:	90 91 e6 02 	lds	r25, 0x02E6
    2052:	99 83       	std	Y+1, r25	; 0x01
	temp[1] = rfAddress & 0xFF;
    2054:	8a 83       	std	Y+2, r24	; 0x02
	temp[2] = 0x00;
    2056:	1b 82       	std	Y+3, r1	; 0x03
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    2058:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    205a:	80 e3       	ldi	r24, 0x30	; 48
    205c:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    2060:	8e 01       	movw	r16, r28
    2062:	0f 5f       	subi	r16, 0xFF	; 255
    2064:	1f 4f       	sbci	r17, 0xFF	; 255
    2066:	c8 01       	movw	r24, r16
    2068:	63 e0       	ldi	r22, 0x03	; 3
    206a:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <SPI_Write_Block>
    mirf_CSN_hi;
    206e:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    2070:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2072:	8a e2       	ldi	r24, 0x2A	; 42
    2074:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    2078:	c8 01       	movw	r24, r16
    207a:	63 e0       	ldi	r22, 0x03	; 3
    207c:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <SPI_Write_Block>
    mirf_CSN_hi;
    2080:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    2082:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2084:	81 e2       	ldi	r24, 0x21	; 33
    2086:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    mirf_CSN_hi;
    2090:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    2092:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2094:	82 e2       	ldi	r24, 0x22	; 34
    2096:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    209a:	81 e0       	ldi	r24, 0x01	; 1
    209c:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    mirf_CSN_hi;
    20a0:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    20a2:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    20a4:	84 e2       	ldi	r24, 0x24	; 36
    20a6:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    20aa:	82 e1       	ldi	r24, 0x12	; 18
    20ac:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    mirf_CSN_hi;
    20b0:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    20b2:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    20b4:	85 e2       	ldi	r24, 0x25	; 37
    20b6:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    20ba:	88 e2       	ldi	r24, 0x28	; 40
    20bc:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    mirf_CSN_hi;
    20c0:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    20c2:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    20c4:	81 e3       	ldi	r24, 0x31	; 49
    20c6:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    20ca:	8d e0       	ldi	r24, 0x0D	; 13
    20cc:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    mirf_CSN_hi;
    20d0:	28 9a       	sbi	0x05, 0	; 5

	// RX payload size; it isn't needed because the dynamic payload length is activated for ACK+PAYLOAD feature
    mirf_config_register(RX_PW_P0, PAYLOAD_SIZE);

	// enable extra features
    mirf_CSN_lo;
    20d2:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_ACTIVATE);
    20d4:	80 e5       	ldi	r24, 0x50	; 80
    20d6:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    SPI_Write_Byte(0x73);
    20da:	83 e7       	ldi	r24, 0x73	; 115
    20dc:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    mirf_CSN_hi;
    20e0:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    20e2:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    20e4:	8c e3       	ldi	r24, 0x3C	; 60
    20e6:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    20ea:	81 e0       	ldi	r24, 0x01	; 1
    20ec:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    mirf_CSN_hi;
    20f0:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    20f2:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    20f4:	8d e3       	ldi	r24, 0x3D	; 61
    20f6:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    20fa:	86 e0       	ldi	r24, 0x06	; 6
    20fc:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    mirf_CSN_hi;
    2100:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    2102:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2104:	80 e2       	ldi	r24, 0x20	; 32
    2106:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    210a:	8f e0       	ldi	r24, 0x0F	; 15
    210c:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    mirf_CSN_hi;
    2110:	28 9a       	sbi	0x05, 0	; 5

    // Start receiver 
    //PTX = 0;        // Start in receiving mode
    //RX_POWERUP;     // Power up in receiving mode
    //mirf_CE_hi;     // Listening for pakets
}
    2112:	0f 90       	pop	r0
    2114:	0f 90       	pop	r0
    2116:	0f 90       	pop	r0
    2118:	cf 91       	pop	r28
    211a:	df 91       	pop	r29
    211c:	1f 91       	pop	r17
    211e:	0f 91       	pop	r16
    2120:	08 95       	ret

00002122 <mirf_init>:
// Initializes pins as interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    //DDRB |= ((1<<CSN)|(1<<CE));
    mirf_CE_hi;
    2122:	2c 9a       	sbi	0x05, 4	; 5
    mirf_CSN_hi;
    2124:	28 9a       	sbi	0x05, 0	; 5

	mirf_config();
    2126:	0e 94 0e 10 	call	0x201c	; 0x201c <mirf_config>
}
    212a:	08 95       	ret

0000212c <mirf_set_RADDR>:
    //mirf_CE_hi;     // Listening for pakets
}

void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    212c:	cf 93       	push	r28
    212e:	df 93       	push	r29
    2130:	ec 01       	movw	r28, r24
    mirf_CE_lo;
    2132:	2c 98       	cbi	0x05, 4	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    2134:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2136:	8a e2       	ldi	r24, 0x2A	; 42
    2138:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    213c:	ce 01       	movw	r24, r28
    213e:	65 e0       	ldi	r22, 0x05	; 5
    2140:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <SPI_Write_Block>
    mirf_CSN_hi;
    2144:	28 9a       	sbi	0x05, 0	; 5
void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    mirf_CE_lo;
    mirf_write_register(RX_ADDR_P0,adr,5);
    mirf_CE_hi;
    2146:	2c 9a       	sbi	0x05, 4	; 5
}
    2148:	df 91       	pop	r29
    214a:	cf 91       	pop	r28
    214c:	08 95       	ret

0000214e <mirf_set_TADDR>:

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
    214e:	cf 93       	push	r28
    2150:	df 93       	push	r29
    2152:	ec 01       	movw	r28, r24
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    2154:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2156:	80 e3       	ldi	r24, 0x30	; 48
    2158:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    215c:	ce 01       	movw	r24, r28
    215e:	65 e0       	ldi	r22, 0x05	; 5
    2160:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <SPI_Write_Block>
    mirf_CSN_hi;
    2164:	28 9a       	sbi	0x05, 0	; 5

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
	mirf_write_register(TX_ADDR, adr,5);
}
    2166:	df 91       	pop	r29
    2168:	cf 91       	pop	r28
    216a:	08 95       	ret

0000216c <mirf_data_ready>:
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
    216c:	80 91 bd 04 	lds	r24, 0x04BD
    2170:	88 23       	and	r24, r24
    2172:	11 f0       	breq	.+4      	; 0x2178 <mirf_data_ready+0xc>
    2174:	80 e0       	ldi	r24, 0x00	; 0
    mirf_CSN_lo;                                // Pull down chip select
    status = SPI_Write_Byte(NOP);               // Read status register
    mirf_CSN_hi;                                // Pull up chip select
    return status & (1<<RX_DR);

}
    2176:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    2178:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
    217a:	8f ef       	ldi	r24, 0xFF	; 255
    217c:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
    2180:	28 9a       	sbi	0x05, 0	; 5
    return status & (1<<RX_DR);
    2182:	80 74       	andi	r24, 0x40	; 64
    2184:	08 95       	ret

00002186 <rx_fifo_is_empty>:

}

uint8_t rx_fifo_is_empty() {
    2186:	df 93       	push	r29
    2188:	cf 93       	push	r28
    218a:	0f 92       	push	r0
    218c:	cd b7       	in	r28, 0x3d	; 61
    218e:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t fifo_status = 0;
    2190:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
    2192:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    2194:	87 e1       	ldi	r24, 0x17	; 23
    2196:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    219a:	be 01       	movw	r22, r28
    219c:	6f 5f       	subi	r22, 0xFF	; 255
    219e:	7f 4f       	sbci	r23, 0xFF	; 255
    21a0:	cb 01       	movw	r24, r22
    21a2:	41 e0       	ldi	r20, 0x01	; 1
    21a4:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    21a8:	28 9a       	sbi	0x05, 0	; 5
	
	uint8_t fifo_status = 0;

	mirf_read_register(FIFO_STATUS, &fifo_status, 1);
	
	return (uint8_t)(fifo_status&0x01);
    21aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    21ac:	81 70       	andi	r24, 0x01	; 1
    21ae:	0f 90       	pop	r0
    21b0:	cf 91       	pop	r28
    21b2:	df 91       	pop	r29
    21b4:	08 95       	ret

000021b6 <flush_rx_fifo>:

void flush_rx_fifo() {

    mirf_CSN_lo;
    21b6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
    21b8:	82 ee       	ldi	r24, 0xE2	; 226
    21ba:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    mirf_CSN_hi;
    21be:	28 9a       	sbi	0x05, 0	; 5

}
    21c0:	08 95       	ret

000021c2 <mirf_get_data>:

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    21c2:	cf 93       	push	r28
    21c4:	df 93       	push	r29
    21c6:	ec 01       	movw	r28, r24
    mirf_CSN_lo;                               		// Pull down chip select
    21c8:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    21ca:	81 e6       	ldi	r24, 0x61	; 97
    21cc:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    21d0:	ce 01       	movw	r24, r28
    21d2:	be 01       	movw	r22, r28
    21d4:	4d e0       	ldi	r20, 0x0D	; 13
    21d6:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
    21da:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    21dc:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    21de:	87 e2       	ldi	r24, 0x27	; 39
    21e0:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    21e4:	80 e4       	ldi	r24, 0x40	; 64
    21e6:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    mirf_CSN_hi;
    21ea:	28 9a       	sbi	0x05, 0	; 5
    mirf_CSN_lo;                               		// Pull down chip select
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    mirf_CSN_hi;                               		// Pull up chip select
    mirf_config_register(STATUS,(1<<RX_DR));   		// Reset status register
}
    21ec:	df 91       	pop	r29
    21ee:	cf 91       	pop	r28
    21f0:	08 95       	ret

000021f2 <mirf_config_register>:

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    21f2:	df 93       	push	r29
    21f4:	cf 93       	push	r28
    21f6:	0f 92       	push	r0
    21f8:	cd b7       	in	r28, 0x3d	; 61
    21fa:	de b7       	in	r29, 0x3e	; 62
    mirf_CSN_lo;
    21fc:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    21fe:	8f 71       	andi	r24, 0x1F	; 31
    2200:	80 62       	ori	r24, 0x20	; 32
    2202:	69 83       	std	Y+1, r22	; 0x01
    2204:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    2208:	69 81       	ldd	r22, Y+1	; 0x01
    220a:	86 2f       	mov	r24, r22
    220c:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    mirf_CSN_hi;
    2210:	28 9a       	sbi	0x05, 0	; 5
}
    2212:	0f 90       	pop	r0
    2214:	cf 91       	pop	r28
    2216:	df 91       	pop	r29
    2218:	08 95       	ret

0000221a <mirf_read_register>:

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    221a:	0f 93       	push	r16
    221c:	1f 93       	push	r17
    221e:	df 93       	push	r29
    2220:	cf 93       	push	r28
    2222:	0f 92       	push	r0
    2224:	cd b7       	in	r28, 0x3d	; 61
    2226:	de b7       	in	r29, 0x3e	; 62
    2228:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    222a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    222c:	8f 71       	andi	r24, 0x1F	; 31
    222e:	49 83       	std	Y+1, r20	; 0x01
    2230:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    2234:	c8 01       	movw	r24, r16
    2236:	b8 01       	movw	r22, r16
    2238:	49 81       	ldd	r20, Y+1	; 0x01
    223a:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    223e:	28 9a       	sbi	0x05, 0	; 5
}
    2240:	0f 90       	pop	r0
    2242:	cf 91       	pop	r28
    2244:	df 91       	pop	r29
    2246:	1f 91       	pop	r17
    2248:	0f 91       	pop	r16
    224a:	08 95       	ret

0000224c <mirf_write_register>:

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    224c:	0f 93       	push	r16
    224e:	1f 93       	push	r17
    2250:	df 93       	push	r29
    2252:	cf 93       	push	r28
    2254:	0f 92       	push	r0
    2256:	cd b7       	in	r28, 0x3d	; 61
    2258:	de b7       	in	r29, 0x3e	; 62
    225a:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    225c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    225e:	8f 71       	andi	r24, 0x1F	; 31
    2260:	80 62       	ori	r24, 0x20	; 32
    2262:	49 83       	std	Y+1, r20	; 0x01
    2264:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    2268:	c8 01       	movw	r24, r16
    226a:	49 81       	ldd	r20, Y+1	; 0x01
    226c:	64 2f       	mov	r22, r20
    226e:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <SPI_Write_Block>
    mirf_CSN_hi;
    2272:	28 9a       	sbi	0x05, 0	; 5
}
    2274:	0f 90       	pop	r0
    2276:	cf 91       	pop	r28
    2278:	df 91       	pop	r29
    227a:	1f 91       	pop	r17
    227c:	0f 91       	pop	r16
    227e:	08 95       	ret

00002280 <mirf_send>:


void mirf_send(uint8_t * value, uint8_t len) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
    2280:	0f 93       	push	r16
    2282:	1f 93       	push	r17
    2284:	df 93       	push	r29
    2286:	cf 93       	push	r28
    2288:	0f 92       	push	r0
    228a:	cd b7       	in	r28, 0x3d	; 61
    228c:	de b7       	in	r29, 0x3e	; 62
    228e:	8c 01       	movw	r16, r24
    while (PTX) {}                  // Wait until last paket is send
    2290:	80 91 bd 04 	lds	r24, 0x04BD
    2294:	88 23       	and	r24, r24
    2296:	e1 f7       	brne	.-8      	; 0x2290 <mirf_send+0x10>

    mirf_CE_lo;
    2298:	2c 98       	cbi	0x05, 4	; 5

    PTX = 1;                        // Set to transmitter mode
    229a:	81 e0       	ldi	r24, 0x01	; 1
    229c:	80 93 bd 04 	sts	0x04BD, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    22a0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    22a2:	80 e2       	ldi	r24, 0x20	; 32
    22a4:	69 83       	std	Y+1, r22	; 0x01
    22a6:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    22aa:	8a e4       	ldi	r24, 0x4A	; 74
    22ac:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    mirf_CSN_hi;
    22b0:	28 9a       	sbi	0x05, 0	; 5
    mirf_CE_lo;

    PTX = 1;                        // Set to transmitter mode
    TX_POWERUP;                     // Power up
    
    mirf_CSN_lo;                    // Pull down chip select
    22b2:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( FLUSH_TX );     // Write cmd to flush tx fifo
    22b4:	81 ee       	ldi	r24, 0xE1	; 225
    22b6:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    mirf_CSN_hi;                    // Pull up chip select
    22ba:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CSN_lo;                    // Pull down chip select
    22bc:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( W_TX_PAYLOAD ); // Write cmd to write payload
    22be:	80 ea       	ldi	r24, 0xA0	; 160
    22c0:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    SPI_Write_Block(value,len);   // Write payload
    22c4:	c8 01       	movw	r24, r16
    22c6:	69 81       	ldd	r22, Y+1	; 0x01
    22c8:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <SPI_Write_Block>
    mirf_CSN_hi;                    // Pull up chip select
    22cc:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CE_hi;                     // Start transmission
    22ce:	2c 9a       	sbi	0x05, 4	; 5
}
    22d0:	0f 90       	pop	r0
    22d2:	cf 91       	pop	r28
    22d4:	df 91       	pop	r29
    22d6:	1f 91       	pop	r17
    22d8:	0f 91       	pop	r16
    22da:	08 95       	ret

000022dc <writeAckPayload>:

void writeAckPayload(unsigned char *data, unsigned char size) {
    22dc:	ef 92       	push	r14
    22de:	ff 92       	push	r15
    22e0:	0f 93       	push	r16
    22e2:	1f 93       	push	r17
    22e4:	df 93       	push	r29
    22e6:	cf 93       	push	r28
    22e8:	0f 92       	push	r0
    22ea:	cd b7       	in	r28, 0x3d	; 61
    22ec:	de b7       	in	r29, 0x3e	; 62
    22ee:	18 2f       	mov	r17, r24
    22f0:	06 2f       	mov	r16, r22
	return pWidth;
}

void flushTxFifo() {

    mirf_CSN_lo;
    22f2:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    22f4:	81 ee       	ldi	r24, 0xE1	; 225
    22f6:	99 83       	std	Y+1, r25	; 0x01
    22f8:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    mirf_CSN_hi;
    22fc:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
    22fe:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
    2300:	88 ea       	ldi	r24, 0xA8	; 168
    2302:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>

	for(k=0; k<size; k++) {
    2306:	99 81       	ldd	r25, Y+1	; 0x01
    2308:	00 23       	and	r16, r16
    230a:	61 f0       	breq	.+24     	; 0x2324 <writeAckPayload+0x48>
    230c:	61 2f       	mov	r22, r17
    230e:	79 2f       	mov	r23, r25
    2310:	7b 01       	movw	r14, r22
		SPI_Write_Byte(data[k]);
    2312:	f7 01       	movw	r30, r14
    2314:	81 91       	ld	r24, Z+
    2316:	7f 01       	movw	r14, r30
    2318:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>

    mirf_CSN_lo;

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);

	for(k=0; k<size; k++) {
    231c:	8e 2d       	mov	r24, r14
    231e:	81 1b       	sub	r24, r17
    2320:	80 17       	cp	r24, r16
    2322:	b8 f3       	brcs	.-18     	; 0x2312 <writeAckPayload+0x36>
		SPI_Write_Byte(data[k]);
	}	

    mirf_CSN_hi;
    2324:	28 9a       	sbi	0x05, 0	; 5


}
    2326:	0f 90       	pop	r0
    2328:	cf 91       	pop	r28
    232a:	df 91       	pop	r29
    232c:	1f 91       	pop	r17
    232e:	0f 91       	pop	r16
    2330:	ff 90       	pop	r15
    2332:	ef 90       	pop	r14
    2334:	08 95       	ret

00002336 <readPayloadWidthFromTopFifo>:

uint8_t readPayloadWidthFromTopFifo() {
	uint8_t pWidth = 0;

    mirf_CSN_lo;
    2336:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_R_RX_PL_WID);
    2338:	80 e6       	ldi	r24, 0x60	; 96
    233a:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
	pWidth = SPI_Write_Byte(NOP); 	// not specified in the datasheet but the "NRF_R_RX_PL_WID" has a parameter,
    233e:	8f ef       	ldi	r24, 0xFF	; 255
    2340:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
									// we need to send a NOP to receive the actual payload size
    mirf_CSN_hi;
    2344:	28 9a       	sbi	0x05, 0	; 5
	
	return pWidth;
}
    2346:	08 95       	ret

00002348 <readPayloadWidthFromPipe0>:

uint8_t readPayloadWidthFromPipe0() {
    2348:	df 93       	push	r29
    234a:	cf 93       	push	r28
    234c:	0f 92       	push	r0
    234e:	cd b7       	in	r28, 0x3d	; 61
    2350:	de b7       	in	r29, 0x3e	; 62
	uint8_t pWidth = 0;
    2352:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
    2354:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    2356:	81 e1       	ldi	r24, 0x11	; 17
    2358:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    235c:	be 01       	movw	r22, r28
    235e:	6f 5f       	subi	r22, 0xFF	; 255
    2360:	7f 4f       	sbci	r23, 0xFF	; 255
    2362:	cb 01       	movw	r24, r22
    2364:	41 e0       	ldi	r20, 0x01	; 1
    2366:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    236a:	28 9a       	sbi	0x05, 0	; 5
	uint8_t pWidth = 0;

	mirf_read_register(RX_PW_P0, &pWidth, 1);
	
	return pWidth;
}
    236c:	89 81       	ldd	r24, Y+1	; 0x01
    236e:	0f 90       	pop	r0
    2370:	cf 91       	pop	r28
    2372:	df 91       	pop	r29
    2374:	08 95       	ret

00002376 <flushTxFifo>:

void flushTxFifo() {

    mirf_CSN_lo;
    2376:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    2378:	81 ee       	ldi	r24, 0xE1	; 225
    237a:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    mirf_CSN_hi;
    237e:	28 9a       	sbi	0x05, 0	; 5

}
    2380:	08 95       	ret

00002382 <handleRFCommands>:

void handleRFCommands() {
    2382:	ff 92       	push	r15
    2384:	0f 93       	push	r16
    2386:	1f 93       	push	r17
    2388:	df 93       	push	r29
    238a:	cf 93       	push	r28
    238c:	0f 92       	push	r0
    238e:	cd b7       	in	r28, 0x3d	; 61
    2390:	de b7       	in	r29, 0x3e	; 62
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
    2392:	80 91 bd 04 	lds	r24, 0x04BD
    2396:	88 23       	and	r24, r24
    2398:	39 f0       	breq	.+14     	; 0x23a8 <handleRFCommands+0x26>

		writeAckPayload(ackPayload, 16);

	}

}
    239a:	0f 90       	pop	r0
    239c:	cf 91       	pop	r28
    239e:	df 91       	pop	r29
    23a0:	1f 91       	pop	r17
    23a2:	0f 91       	pop	r16
    23a4:	ff 90       	pop	r15
    23a6:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    23a8:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
    23aa:	8f ef       	ldi	r24, 0xFF	; 255
    23ac:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
    23b0:	28 9a       	sbi	0x05, 0	; 5

	unsigned int i=0;
	//uint8_t pWidth = 0;
	//uint8_t pWidthP0 = 0;

	if(mirf_data_ready()) {
    23b2:	86 ff       	sbrs	r24, 6
    23b4:	f2 cf       	rjmp	.-28     	; 0x239a <handleRFCommands+0x18>
		//if(spiCommError) {
		//	usart0Transmit(0xFE,1);
		//	return;
		//}

		rfFlags |= 0x02;
    23b6:	80 91 e7 02 	lds	r24, 0x02E7
    23ba:	82 60       	ori	r24, 0x02	; 2
    23bc:	80 93 e7 02 	sts	0x02E7, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    23c0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    23c2:	87 e2       	ldi	r24, 0x27	; 39
    23c4:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    23c8:	80 e7       	ldi	r24, 0x70	; 112
    23ca:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    mirf_CSN_hi;
    23ce:	28 9a       	sbi	0x05, 0	; 5

}

uint8_t rx_fifo_is_empty() {
	
	uint8_t fifo_status = 0;
    23d0:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
    23d2:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    23d4:	87 e1       	ldi	r24, 0x17	; 23
    23d6:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    23da:	be 01       	movw	r22, r28
    23dc:	6f 5f       	subi	r22, 0xFF	; 255
    23de:	7f 4f       	sbci	r23, 0xFF	; 255
    23e0:	cb 01       	movw	r24, r22
    23e2:	41 e0       	ldi	r20, 0x01	; 1
    23e4:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    23e8:	28 9a       	sbi	0x05, 0	; 5
	
	uint8_t fifo_status = 0;

	mirf_read_register(FIFO_STATUS, &fifo_status, 1);
	
	return (uint8_t)(fifo_status&0x01);
    23ea:	89 81       	ldd	r24, Y+1	; 0x01
		// aren't present in the fifo with consequent wrong data read and wrong behavior of the robot.
		// To avoid this situtation we add this check before actually reading from the fifo to be 
		// sure there are correct data to be read.
		// We don't know why the IRQ for data reception is raised, maybe is not correctly reset sometimes
		// or it is raised when it shouldn't...
		if(rx_fifo_is_empty()) {
    23ec:	80 fd       	sbrc	r24, 0
    23ee:	d5 cf       	rjmp	.-86     	; 0x239a <handleRFCommands+0x18>
}

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    mirf_CSN_lo;                               		// Pull down chip select
    23f0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    23f2:	81 e6       	ldi	r24, 0x61	; 97
    23f4:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    23f8:	86 e4       	ldi	r24, 0x46	; 70
    23fa:	98 e0       	ldi	r25, 0x08	; 8
    23fc:	bc 01       	movw	r22, r24
    23fe:	4d e0       	ldi	r20, 0x0D	; 13
    2400:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
    2404:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    2406:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2408:	87 e2       	ldi	r24, 0x27	; 39
    240a:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    240e:	80 e4       	ldi	r24, 0x40	; 64
    2410:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    mirf_CSN_hi;
    2414:	28 9a       	sbi	0x05, 0	; 5
	return (uint8_t)(fifo_status&0x01);
}

void flush_rx_fifo() {

    mirf_CSN_lo;
    2416:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
    2418:	82 ee       	ldi	r24, 0xE2	; 226
    241a:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    mirf_CSN_hi;
    241e:	28 9a       	sbi	0x05, 0	; 5

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    2420:	40 91 46 08 	lds	r20, 0x0846
    2424:	24 2f       	mov	r18, r20
    2426:	44 23       	and	r20, r20
    2428:	09 f0       	breq	.+2      	; 0x242c <handleRFCommands+0xaa>
    242a:	29 c1       	rjmp	.+594    	; 0x267e <handleRFCommands+0x2fc>
    242c:	50 91 47 08 	lds	r21, 0x0847
    2430:	e5 2f       	mov	r30, r21
    2432:	55 23       	and	r21, r21
    2434:	09 f4       	brne	.+2      	; 0x2438 <handleRFCommands+0xb6>
    2436:	10 c2       	rjmp	.+1056   	; 0x2858 <handleRFCommands+0x4d6>

			sleep(60);
    2438:	00 91 48 08 	lds	r16, 0x0848

		}

		if(calibrateOdomFlag==0) { 
    243c:	80 91 e0 04 	lds	r24, 0x04E0
    2440:	88 23       	and	r24, r24
    2442:	41 f5       	brne	.+80     	; 0x2494 <handleRFCommands+0x112>
			speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    2444:	70 91 4a 08 	lds	r23, 0x084A
    2448:	27 2f       	mov	r18, r23
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	2f 77       	andi	r18, 0x7F	; 127
    244e:	30 70       	andi	r19, 0x00	; 0
    2450:	30 93 e4 02 	sts	0x02E4, r19
    2454:	20 93 e3 02 	sts	0x02E3, r18
			speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
    2458:	60 91 4b 08 	lds	r22, 0x084B
    245c:	86 2f       	mov	r24, r22
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	8f 77       	andi	r24, 0x7F	; 127
    2462:	90 70       	andi	r25, 0x00	; 0
    2464:	90 93 e2 02 	sts	0x02E2, r25
    2468:	80 93 e1 02 	sts	0x02E1, r24
										// in the same range of the measured speed that is 0..800.
										// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
										// this means that the range is more or less 0..400.


			if((rfData[4]&0x80)==0x80) {			// motor right forward
    246c:	77 fd       	sbrc	r23, 7
    246e:	03 c0       	rjmp	.+6      	; 0x2476 <handleRFCommands+0xf4>
				pwm_right_desired = speedr; 		// speed received (0..127) is expressed in 1/5 of mm/s (0..635 mm/s)
			} else {								// backward
				pwm_right_desired = -(speedr);
    2470:	30 95       	com	r19
    2472:	21 95       	neg	r18
    2474:	3f 4f       	sbci	r19, 0xFF	; 255
    2476:	30 93 ca 02 	sts	0x02CA, r19
    247a:	20 93 c9 02 	sts	0x02C9, r18
			}

			if((rfData[5]&0x80)==0x80) {			// motor left forward
    247e:	67 fd       	sbrc	r22, 7
    2480:	03 c0       	rjmp	.+6      	; 0x2488 <handleRFCommands+0x106>
				pwm_left_desired = speedl;
			} else {								// backward
				pwm_left_desired = -(speedl);
    2482:	90 95       	com	r25
    2484:	81 95       	neg	r24
    2486:	9f 4f       	sbci	r25, 0xFF	; 255
    2488:	90 93 cc 02 	sts	0x02CC, r25
    248c:	80 93 cb 02 	sts	0x02CB, r24
    2490:	24 2f       	mov	r18, r20
    2492:	e5 2f       	mov	r30, r21

		}


		for(i=0; i<3; i++) {
			dataLED[i]=rfData[i]&0xFF;
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	30 93 2f 08 	sts	0x082F, r19
    249a:	20 93 2e 08 	sts	0x082E, r18
    249e:	f0 e0       	ldi	r31, 0x00	; 0
    24a0:	f0 93 31 08 	sts	0x0831, r31
    24a4:	e0 93 30 08 	sts	0x0830, r30
    24a8:	10 e0       	ldi	r17, 0x00	; 0
    24aa:	10 93 33 08 	sts	0x0833, r17
    24ae:	00 93 32 08 	sts	0x0832, r16
		}
		pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
    24b2:	92 2f       	mov	r25, r18
    24b4:	88 27       	eor	r24, r24
    24b6:	82 1b       	sub	r24, r18
    24b8:	93 0b       	sbc	r25, r19
    24ba:	24 e6       	ldi	r18, 0x64	; 100
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	b9 01       	movw	r22, r18
    24c0:	0e 94 f3 48 	call	0x91e6	; 0x91e6 <__udivmodhi4>
    24c4:	f6 2e       	mov	r15, r22
    24c6:	f0 94       	com	r15
    24c8:	f0 92 0c 02 	sts	0x020C, r15
		pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
    24cc:	5e 2f       	mov	r21, r30
    24ce:	44 27       	eor	r20, r20
    24d0:	4e 1b       	sub	r20, r30
    24d2:	5f 0b       	sbc	r21, r31
    24d4:	ca 01       	movw	r24, r20
    24d6:	b9 01       	movw	r22, r18
    24d8:	0e 94 f3 48 	call	0x91e6	; 0x91e6 <__udivmodhi4>
    24dc:	60 95       	com	r22
    24de:	60 93 0e 02 	sts	0x020E, r22
		pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
    24e2:	50 2f       	mov	r21, r16
    24e4:	44 27       	eor	r20, r20
    24e6:	40 1b       	sub	r20, r16
    24e8:	51 0b       	sbc	r21, r17
    24ea:	ca 01       	movw	r24, r20
    24ec:	b9 01       	movw	r22, r18
    24ee:	0e 94 f3 48 	call	0x91e6	; 0x91e6 <__udivmodhi4>
    24f2:	60 95       	com	r22
    24f4:	60 93 0d 02 	sts	0x020D, r22
		updateRedLed(pwm_red);
    24f8:	8f 2d       	mov	r24, r15
    24fa:	0e 94 c5 3d 	call	0x7b8a	; 0x7b8a <updateRedLed>
		updateGreenLed(pwm_green);
    24fe:	80 91 0d 02 	lds	r24, 0x020D
    2502:	0e 94 d9 3d 	call	0x7bb2	; 0x7bb2 <updateGreenLed>
		updateBlueLed(pwm_blue);
    2506:	80 91 0e 02 	lds	r24, 0x020E
    250a:	0e 94 ed 3d 	call	0x7bda	; 0x7bda <updateBlueLed>


		if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
    250e:	80 91 49 08 	lds	r24, 0x0849
    2512:	80 ff       	sbrs	r24, 0
    2514:	e6 c0       	rjmp	.+460    	; 0x26e2 <handleRFCommands+0x360>
			LED_IR1_LOW;
    2516:	44 98       	cbi	0x08, 4	; 8
		} else {
			LED_IR1_HIGH;
		}

		if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
    2518:	81 ff       	sbrs	r24, 1
    251a:	e1 c0       	rjmp	.+450    	; 0x26de <handleRFCommands+0x35c>
			LED_IR2_LOW;
    251c:	45 98       	cbi	0x08, 5	; 8
		} else {
			LED_IR2_HIGH;
		}

		if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
    251e:	98 2f       	mov	r25, r24
    2520:	82 ff       	sbrs	r24, 2
    2522:	da c0       	rjmp	.+436    	; 0x26d8 <handleRFCommands+0x356>
			irEnabled = 1;
    2524:	21 e0       	ldi	r18, 0x01	; 1
    2526:	20 93 12 02 	sts	0x0212, r18
		} else {
			irEnabled = 0;
		}

		if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
    252a:	84 fd       	sbrc	r24, 4
    252c:	46 c2       	rjmp	.+1164   	; 0x29ba <handleRFCommands+0x638>
			calibrateSensors();
			resetOdometry();
		}

		if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
    252e:	86 ff       	sbrs	r24, 6
    2530:	d0 c0       	rjmp	.+416    	; 0x26d2 <handleRFCommands+0x350>
			obstacleAvoidanceEnabled = 1;
    2532:	81 e0       	ldi	r24, 0x01	; 1
    2534:	80 93 3a 04 	sts	0x043A, r24
		} else {
			obstacleAvoidanceEnabled = 0;
		}

		if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
    2538:	97 fd       	sbrc	r25, 7
    253a:	6a c2       	rjmp	.+1236   	; 0x2a10 <handleRFCommands+0x68e>
			cliffAvoidanceEnabled = 1;
		} else {
			cliffAvoidanceEnabled = 0;
    253c:	10 92 3b 04 	sts	0x043B, r1
		}

		// handle small green leds
		#ifdef HW_REV_3_1			

			if(bit_is_set(rfData[6], 0) ) {
    2540:	80 91 4c 08 	lds	r24, 0x084C
    2544:	80 ff       	sbrs	r24, 0
    2546:	bf c0       	rjmp	.+382    	; 0x26c6 <handleRFCommands+0x344>
				GREEN_LED0_ON;
    2548:	80 91 0b 01 	lds	r24, 0x010B
    254c:	8e 7f       	andi	r24, 0xFE	; 254
    254e:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED0_OFF;
			}
				
			if(bit_is_set(rfData[6], 1) ) {
    2552:	80 91 4c 08 	lds	r24, 0x084C
    2556:	81 ff       	sbrs	r24, 1
    2558:	b0 c0       	rjmp	.+352    	; 0x26ba <handleRFCommands+0x338>
				GREEN_LED1_ON;
    255a:	80 91 0b 01 	lds	r24, 0x010B
    255e:	8d 7f       	andi	r24, 0xFD	; 253
    2560:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED1_OFF;
			}
				
			if(bit_is_set(rfData[6], 2) ) {
    2564:	80 91 4c 08 	lds	r24, 0x084C
    2568:	82 ff       	sbrs	r24, 2
    256a:	a1 c0       	rjmp	.+322    	; 0x26ae <handleRFCommands+0x32c>
				GREEN_LED2_ON;
    256c:	80 91 0b 01 	lds	r24, 0x010B
    2570:	8b 7f       	andi	r24, 0xFB	; 251
    2572:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED2_OFF;
			}												

			if(bit_is_set(rfData[6], 3) ) {
    2576:	80 91 4c 08 	lds	r24, 0x084C
    257a:	83 ff       	sbrs	r24, 3
    257c:	96 c0       	rjmp	.+300    	; 0x26aa <handleRFCommands+0x328>
				GREEN_LED3_ON;
    257e:	a3 98       	cbi	0x14, 3	; 20
			} else {
				GREEN_LED3_OFF;
			}

			if(bit_is_set(rfData[6], 4) ) {
    2580:	80 91 4c 08 	lds	r24, 0x084C
    2584:	84 ff       	sbrs	r24, 4
    2586:	8b c0       	rjmp	.+278    	; 0x269e <handleRFCommands+0x31c>
				GREEN_LED4_ON;
    2588:	80 91 0b 01 	lds	r24, 0x010B
    258c:	8f 7e       	andi	r24, 0xEF	; 239
    258e:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED4_OFF;
			}

			if(bit_is_set(rfData[6], 5) ) {
    2592:	80 91 4c 08 	lds	r24, 0x084C
    2596:	85 ff       	sbrs	r24, 5
    2598:	7c c0       	rjmp	.+248    	; 0x2692 <handleRFCommands+0x310>
				GREEN_LED5_ON;
    259a:	80 91 0b 01 	lds	r24, 0x010B
    259e:	8f 7d       	andi	r24, 0xDF	; 223
    25a0:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED5_OFF;
			}

			if(bit_is_set(rfData[6], 6) ) {
    25a4:	80 91 4c 08 	lds	r24, 0x084C
    25a8:	86 ff       	sbrs	r24, 6
    25aa:	6d c0       	rjmp	.+218    	; 0x2686 <handleRFCommands+0x304>
				GREEN_LED6_ON;
    25ac:	80 91 0b 01 	lds	r24, 0x010B
    25b0:	8f 7b       	andi	r24, 0xBF	; 191
    25b2:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED6_OFF;
			}

			if(bit_is_set(rfData[6], 7) ) {
    25b6:	80 91 4c 08 	lds	r24, 0x084C
    25ba:	87 fd       	sbrc	r24, 7
    25bc:	23 c2       	rjmp	.+1094   	; 0x2a04 <handleRFCommands+0x682>
				GREEN_LED7_ON;
			} else {
				GREEN_LED7_OFF;
    25be:	80 91 0b 01 	lds	r24, 0x010B
    25c2:	80 68       	ori	r24, 0x80	; 128
    25c4:	80 93 0b 01 	sts	0x010B, r24
			}

		#endif
		
		if(currentSelector == 8) {
    25c8:	80 91 1a 04 	lds	r24, 0x041A
    25cc:	88 30       	cpi	r24, 0x08	; 8
    25ce:	09 f4       	brne	.+2      	; 0x25d2 <handleRFCommands+0x250>
    25d0:	fc c1       	rjmp	.+1016   	; 0x29ca <handleRFCommands+0x648>
		}

		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;
    25d2:	80 91 0b 02 	lds	r24, 0x020B
    25d6:	80 93 7e 07 	sts	0x077E, r24

		switch(packetId) {
    25da:	85 30       	cpi	r24, 0x05	; 5
    25dc:	09 f4       	brne	.+2      	; 0x25e0 <handleRFCommands+0x25e>
    25de:	1c c2       	rjmp	.+1080   	; 0x2a18 <handleRFCommands+0x696>
    25e0:	86 30       	cpi	r24, 0x06	; 6
    25e2:	08 f0       	brcs	.+2      	; 0x25e6 <handleRFCommands+0x264>
    25e4:	80 c0       	rjmp	.+256    	; 0x26e6 <handleRFCommands+0x364>
    25e6:	83 30       	cpi	r24, 0x03	; 3
    25e8:	09 f4       	brne	.+2      	; 0x25ec <handleRFCommands+0x26a>
    25ea:	81 c1       	rjmp	.+770    	; 0x28ee <handleRFCommands+0x56c>
    25ec:	84 30       	cpi	r24, 0x04	; 4
    25ee:	09 f0       	breq	.+2      	; 0x25f2 <handleRFCommands+0x270>
    25f0:	e2 c0       	rjmp	.+452    	; 0x27b6 <handleRFCommands+0x434>
				#endif
				packetId = 4;
				break;

			case 4:
				ackPayload[1] = proximityResult[4]&0xFF;
    25f2:	90 91 31 02 	lds	r25, 0x0231
    25f6:	80 91 32 02 	lds	r24, 0x0232
    25fa:	90 93 7f 07 	sts	0x077F, r25
				ackPayload[2] = proximityResult[4]>>8;
    25fe:	80 93 80 07 	sts	0x0780, r24
				ackPayload[3] = proximityResult[8]&0xFF;
    2602:	90 91 39 02 	lds	r25, 0x0239
    2606:	80 91 3a 02 	lds	r24, 0x023A
    260a:	90 93 81 07 	sts	0x0781, r25
				ackPayload[4] = proximityResult[8]>>8;
    260e:	80 93 82 07 	sts	0x0782, r24
				ackPayload[5] = proximityResult[9]&0xFF;
    2612:	90 91 3b 02 	lds	r25, 0x023B
    2616:	80 91 3c 02 	lds	r24, 0x023C
    261a:	90 93 83 07 	sts	0x0783, r25
				ackPayload[6] = proximityResult[9]>>8;
    261e:	80 93 84 07 	sts	0x0784, r24
				ackPayload[7] = proximityResult[10]&0xFF;
    2622:	90 91 3d 02 	lds	r25, 0x023D
    2626:	80 91 3e 02 	lds	r24, 0x023E
    262a:	90 93 85 07 	sts	0x0785, r25
				ackPayload[8] = proximityResult[10]>>8;
    262e:	80 93 86 07 	sts	0x0786, r24
				ackPayload[9] = proximityResult[11]&0xFF;
    2632:	90 91 3f 02 	lds	r25, 0x023F
    2636:	80 91 40 02 	lds	r24, 0x0240
    263a:	90 93 87 07 	sts	0x0787, r25
				ackPayload[10] = proximityResult[11]>>8;
    263e:	80 93 88 07 	sts	0x0788, r24
				ackPayload[11] = accX&0xFF;
    2642:	90 91 fa 03 	lds	r25, 0x03FA
    2646:	80 91 fb 03 	lds	r24, 0x03FB
    264a:	90 93 89 07 	sts	0x0789, r25
				ackPayload[12] = accX>>8;
    264e:	80 93 8a 07 	sts	0x078A, r24
				ackPayload[13] = accY&0xFF;
    2652:	90 91 fc 03 	lds	r25, 0x03FC
    2656:	80 91 fd 03 	lds	r24, 0x03FD
    265a:	90 93 8b 07 	sts	0x078B, r25
				ackPayload[14] = accY>>8;
    265e:	80 93 8c 07 	sts	0x078C, r24
				ackPayload[15] = irCommand;
    2662:	80 91 f5 03 	lds	r24, 0x03F5
    2666:	80 93 8d 07 	sts	0x078D, r24
				packetId = 5;
    266a:	85 e0       	ldi	r24, 0x05	; 5
    266c:	80 93 0b 02 	sts	0x020B, r24
				break;
    2670:	a2 c0       	rjmp	.+324    	; 0x27b6 <handleRFCommands+0x434>
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {

			sleep(60);
    2672:	8c e3       	ldi	r24, 0x3C	; 60
    2674:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <sleep>
    2678:	40 91 46 08 	lds	r20, 0x0846
    267c:	24 2f       	mov	r18, r20
    267e:	50 91 47 08 	lds	r21, 0x0847
    2682:	e5 2f       	mov	r30, r21
    2684:	d9 ce       	rjmp	.-590    	; 0x2438 <handleRFCommands+0xb6>
			}

			if(bit_is_set(rfData[6], 6) ) {
				GREEN_LED6_ON;
			} else {
				GREEN_LED6_OFF;
    2686:	80 91 0b 01 	lds	r24, 0x010B
    268a:	80 64       	ori	r24, 0x40	; 64
    268c:	80 93 0b 01 	sts	0x010B, r24
    2690:	92 cf       	rjmp	.-220    	; 0x25b6 <handleRFCommands+0x234>
			}

			if(bit_is_set(rfData[6], 5) ) {
				GREEN_LED5_ON;
			} else {
				GREEN_LED5_OFF;
    2692:	80 91 0b 01 	lds	r24, 0x010B
    2696:	80 62       	ori	r24, 0x20	; 32
    2698:	80 93 0b 01 	sts	0x010B, r24
    269c:	83 cf       	rjmp	.-250    	; 0x25a4 <handleRFCommands+0x222>
			}

			if(bit_is_set(rfData[6], 4) ) {
				GREEN_LED4_ON;
			} else {
				GREEN_LED4_OFF;
    269e:	80 91 0b 01 	lds	r24, 0x010B
    26a2:	80 61       	ori	r24, 0x10	; 16
    26a4:	80 93 0b 01 	sts	0x010B, r24
    26a8:	74 cf       	rjmp	.-280    	; 0x2592 <handleRFCommands+0x210>
			}												

			if(bit_is_set(rfData[6], 3) ) {
				GREEN_LED3_ON;
			} else {
				GREEN_LED3_OFF;
    26aa:	a3 9a       	sbi	0x14, 3	; 20
    26ac:	69 cf       	rjmp	.-302    	; 0x2580 <handleRFCommands+0x1fe>
			}
				
			if(bit_is_set(rfData[6], 2) ) {
				GREEN_LED2_ON;
			} else {
				GREEN_LED2_OFF;
    26ae:	80 91 0b 01 	lds	r24, 0x010B
    26b2:	84 60       	ori	r24, 0x04	; 4
    26b4:	80 93 0b 01 	sts	0x010B, r24
    26b8:	5e cf       	rjmp	.-324    	; 0x2576 <handleRFCommands+0x1f4>
			}
				
			if(bit_is_set(rfData[6], 1) ) {
				GREEN_LED1_ON;
			} else {
				GREEN_LED1_OFF;
    26ba:	80 91 0b 01 	lds	r24, 0x010B
    26be:	82 60       	ori	r24, 0x02	; 2
    26c0:	80 93 0b 01 	sts	0x010B, r24
    26c4:	4f cf       	rjmp	.-354    	; 0x2564 <handleRFCommands+0x1e2>
		#ifdef HW_REV_3_1			

			if(bit_is_set(rfData[6], 0) ) {
				GREEN_LED0_ON;
			} else {
				GREEN_LED0_OFF;
    26c6:	80 91 0b 01 	lds	r24, 0x010B
    26ca:	81 60       	ori	r24, 0x01	; 1
    26cc:	80 93 0b 01 	sts	0x010B, r24
    26d0:	40 cf       	rjmp	.-384    	; 0x2552 <handleRFCommands+0x1d0>
		}

		if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
			obstacleAvoidanceEnabled = 1;
		} else {
			obstacleAvoidanceEnabled = 0;
    26d2:	10 92 3a 04 	sts	0x043A, r1
    26d6:	30 cf       	rjmp	.-416    	; 0x2538 <handleRFCommands+0x1b6>
		}

		if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
			irEnabled = 1;
		} else {
			irEnabled = 0;
    26d8:	10 92 12 02 	sts	0x0212, r1
    26dc:	26 cf       	rjmp	.-436    	; 0x252a <handleRFCommands+0x1a8>
		}

		if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
			LED_IR2_LOW;
		} else {
			LED_IR2_HIGH;
    26de:	45 9a       	sbi	0x08, 5	; 8
    26e0:	1e cf       	rjmp	.-452    	; 0x251e <handleRFCommands+0x19c>


		if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
			LED_IR1_LOW;
		} else {
			LED_IR1_HIGH;
    26e2:	44 9a       	sbi	0x08, 4	; 8
    26e4:	19 cf       	rjmp	.-462    	; 0x2518 <handleRFCommands+0x196>
		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;

		switch(packetId) {
    26e6:	86 30       	cpi	r24, 0x06	; 6
    26e8:	09 f4       	brne	.+2      	; 0x26ec <handleRFCommands+0x36a>
    26ea:	c3 c0       	rjmp	.+390    	; 0x2872 <handleRFCommands+0x4f0>
    26ec:	87 30       	cpi	r24, 0x07	; 7
    26ee:	09 f0       	breq	.+2      	; 0x26f2 <handleRFCommands+0x370>
    26f0:	62 c0       	rjmp	.+196    	; 0x27b6 <handleRFCommands+0x434>
				packetId = 7;
				break;


			case 7:
				ackPayload[1] = ((signed long int)leftMotSteps)&0xFF;
    26f2:	60 91 a5 02 	lds	r22, 0x02A5
    26f6:	70 91 a6 02 	lds	r23, 0x02A6
    26fa:	80 91 a7 02 	lds	r24, 0x02A7
    26fe:	90 91 a8 02 	lds	r25, 0x02A8
    2702:	0e 94 01 47 	call	0x8e02	; 0x8e02 <__fixsfsi>
    2706:	60 93 7f 07 	sts	0x077F, r22
				ackPayload[2] = ((signed long int)leftMotSteps)>>8;
    270a:	70 93 80 07 	sts	0x0780, r23
				ackPayload[3] = ((signed long int)leftMotSteps)>>16;
    270e:	80 93 81 07 	sts	0x0781, r24
				ackPayload[4] = ((signed long int)leftMotSteps)>>24;
    2712:	90 93 82 07 	sts	0x0782, r25
				ackPayload[5] = ((signed long int)rightMotSteps)&0xFF;
    2716:	60 91 a1 02 	lds	r22, 0x02A1
    271a:	70 91 a2 02 	lds	r23, 0x02A2
    271e:	80 91 a3 02 	lds	r24, 0x02A3
    2722:	90 91 a4 02 	lds	r25, 0x02A4
    2726:	0e 94 01 47 	call	0x8e02	; 0x8e02 <__fixsfsi>
    272a:	60 93 83 07 	sts	0x0783, r22
				ackPayload[6] = ((signed long int)rightMotSteps)>>8;
    272e:	70 93 84 07 	sts	0x0784, r23
				ackPayload[7] = ((signed long int)rightMotSteps)>>16;
    2732:	80 93 85 07 	sts	0x0785, r24
				ackPayload[8] = ((signed long int)rightMotSteps)>>24;
    2736:	90 93 86 07 	sts	0x0786, r25
				lastTheta = theta;
    273a:	60 91 3d 04 	lds	r22, 0x043D
    273e:	70 91 3e 04 	lds	r23, 0x043E
    2742:	80 91 3f 04 	lds	r24, 0x043F
    2746:	90 91 40 04 	lds	r25, 0x0440
    274a:	60 93 41 04 	sts	0x0441, r22
    274e:	70 93 42 04 	sts	0x0442, r23
    2752:	80 93 43 04 	sts	0x0443, r24
    2756:	90 93 44 04 	sts	0x0444, r25
				ackPayload[9] = ((signed int)(lastTheta*573.0))&0xFF;	// radians to degrees => 573 = 1800/PI
    275a:	20 e0       	ldi	r18, 0x00	; 0
    275c:	30 e4       	ldi	r19, 0x40	; 64
    275e:	4f e0       	ldi	r20, 0x0F	; 15
    2760:	54 e4       	ldi	r21, 0x44	; 68
    2762:	0e 94 49 48 	call	0x9092	; 0x9092 <__mulsf3>
    2766:	0e 94 01 47 	call	0x8e02	; 0x8e02 <__fixsfsi>
    276a:	26 2f       	mov	r18, r22
    276c:	20 93 87 07 	sts	0x0787, r18
				ackPayload[10] = ((signed int)(lastTheta*573.0))>>8;				
    2770:	70 93 88 07 	sts	0x0788, r23
				ackPayload[11] = ((unsigned int)xPos)&0xFF;
    2774:	60 91 45 04 	lds	r22, 0x0445
    2778:	70 91 46 04 	lds	r23, 0x0446
    277c:	80 91 47 04 	lds	r24, 0x0447
    2780:	90 91 48 04 	lds	r25, 0x0448
    2784:	0e 94 06 47 	call	0x8e0c	; 0x8e0c <__fixunssfsi>
    2788:	60 93 89 07 	sts	0x0789, r22
				ackPayload[12] = ((unsigned int)xPos)>>8;
    278c:	70 93 8a 07 	sts	0x078A, r23
				ackPayload[13] = ((unsigned int)yPos)&0xFF;
    2790:	60 91 49 04 	lds	r22, 0x0449
    2794:	70 91 4a 04 	lds	r23, 0x044A
    2798:	80 91 4b 04 	lds	r24, 0x044B
    279c:	90 91 4c 04 	lds	r25, 0x044C
    27a0:	0e 94 06 47 	call	0x8e0c	; 0x8e0c <__fixunssfsi>
    27a4:	60 93 8b 07 	sts	0x078B, r22
				ackPayload[14] = ((unsigned int)yPos)>>8;
    27a8:	70 93 8c 07 	sts	0x078C, r23
				//ackPayload[10] = ((unsigned int)(thetaOld*573.0))>>8;
				//ackPayload[11] = ((unsigned int)xPosOld)&0xFF;
				//ackPayload[12] = ((unsigned int)xPosOld)>>8;
				//ackPayload[13] = ((unsigned int)yPosOld)&0xFF;
				//ackPayload[14] = ((unsigned int)yPosOld)>>8;
				ackPayload[15] = 0;
    27ac:	10 92 8d 07 	sts	0x078D, r1
				packetId = 3;
    27b0:	83 e0       	ldi	r24, 0x03	; 3
    27b2:	80 93 0b 02 	sts	0x020B, r24
	return pWidth;
}

void flushTxFifo() {

    mirf_CSN_lo;
    27b6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    27b8:	81 ee       	ldi	r24, 0xE1	; 225
    27ba:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    mirf_CSN_hi;
    27be:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
    27c0:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
    27c2:	88 ea       	ldi	r24, 0xA8	; 168
    27c4:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>

	for(k=0; k<size; k++) {
		SPI_Write_Byte(data[k]);
    27c8:	80 91 7e 07 	lds	r24, 0x077E
    27cc:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    27d0:	80 91 7f 07 	lds	r24, 0x077F
    27d4:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    27d8:	80 91 80 07 	lds	r24, 0x0780
    27dc:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    27e0:	80 91 81 07 	lds	r24, 0x0781
    27e4:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    27e8:	80 91 82 07 	lds	r24, 0x0782
    27ec:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    27f0:	80 91 83 07 	lds	r24, 0x0783
    27f4:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    27f8:	80 91 84 07 	lds	r24, 0x0784
    27fc:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    2800:	80 91 85 07 	lds	r24, 0x0785
    2804:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    2808:	80 91 86 07 	lds	r24, 0x0786
    280c:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    2810:	80 91 87 07 	lds	r24, 0x0787
    2814:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    2818:	80 91 88 07 	lds	r24, 0x0788
    281c:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    2820:	80 91 89 07 	lds	r24, 0x0789
    2824:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    2828:	80 91 8a 07 	lds	r24, 0x078A
    282c:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    2830:	80 91 8b 07 	lds	r24, 0x078B
    2834:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    2838:	80 91 8c 07 	lds	r24, 0x078C
    283c:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
    2840:	80 91 8d 07 	lds	r24, 0x078D
    2844:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <SPI_Write_Byte>
	}	

    mirf_CSN_hi;
    2848:	28 9a       	sbi	0x05, 0	; 5

		writeAckPayload(ackPayload, 16);

	}

}
    284a:	0f 90       	pop	r0
    284c:	cf 91       	pop	r28
    284e:	df 91       	pop	r29
    2850:	1f 91       	pop	r17
    2852:	0f 91       	pop	r16
    2854:	ff 90       	pop	r15
    2856:	08 95       	ret

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    2858:	00 91 48 08 	lds	r16, 0x0848
    285c:	00 23       	and	r16, r16
    285e:	09 f0       	breq	.+2      	; 0x2862 <handleRFCommands+0x4e0>
    2860:	1b c1       	rjmp	.+566    	; 0x2a98 <handleRFCommands+0x716>
    2862:	80 91 49 08 	lds	r24, 0x0849
    2866:	88 30       	cpi	r24, 0x08	; 8
    2868:	09 f4       	brne	.+2      	; 0x286c <handleRFCommands+0x4ea>
    286a:	18 c1       	rjmp	.+560    	; 0x2a9c <handleRFCommands+0x71a>
    286c:	e0 2f       	mov	r30, r16
    286e:	20 2f       	mov	r18, r16
    2870:	e5 cd       	rjmp	.-1078   	; 0x243c <handleRFCommands+0xba>
				ackPayload[15] = currentSelector;
				packetId = 6;
				break;

			case 6:
				ackPayload[1] = proximityValue[8]&0xFF;
    2872:	90 91 37 02 	lds	r25, 0x0237
    2876:	80 91 38 02 	lds	r24, 0x0238
    287a:	90 93 7f 07 	sts	0x077F, r25
				ackPayload[2] = proximityValue[8]>>8;
    287e:	80 93 80 07 	sts	0x0780, r24
				ackPayload[3] = proximityValue[16]&0xFF;
    2882:	90 91 47 02 	lds	r25, 0x0247
    2886:	80 91 48 02 	lds	r24, 0x0248
    288a:	90 93 81 07 	sts	0x0781, r25
				ackPayload[4] = proximityValue[16]>>8;
    288e:	80 93 82 07 	sts	0x0782, r24
				ackPayload[5] = proximityValue[18]&0xFF;
    2892:	90 91 4b 02 	lds	r25, 0x024B
    2896:	80 91 4c 02 	lds	r24, 0x024C
    289a:	90 93 83 07 	sts	0x0783, r25
				ackPayload[6] = proximityValue[18]>>8;
    289e:	80 93 84 07 	sts	0x0784, r24
				ackPayload[7] = proximityValue[20]&0xFF;
    28a2:	90 91 4f 02 	lds	r25, 0x024F
    28a6:	80 91 50 02 	lds	r24, 0x0250
    28aa:	90 93 85 07 	sts	0x0785, r25
				ackPayload[8] = proximityValue[20]>>8;
    28ae:	80 93 86 07 	sts	0x0786, r24
				ackPayload[9] = proximityValue[22]&0xFF;
    28b2:	90 91 53 02 	lds	r25, 0x0253
    28b6:	80 91 54 02 	lds	r24, 0x0254
    28ba:	90 93 87 07 	sts	0x0787, r25
				ackPayload[10] = proximityValue[22]>>8;
    28be:	80 93 88 07 	sts	0x0788, r24
				ackPayload[11] = accZ&0xFF;
    28c2:	90 91 fe 03 	lds	r25, 0x03FE
    28c6:	80 91 ff 03 	lds	r24, 0x03FF
    28ca:	90 93 89 07 	sts	0x0789, r25
				ackPayload[12] = accZ>>8;	
    28ce:	80 93 8a 07 	sts	0x078A, r24
				ackPayload[13] = batteryLevel&0xFF;
    28d2:	90 91 8d 02 	lds	r25, 0x028D
    28d6:	80 91 8e 02 	lds	r24, 0x028E
    28da:	90 93 8b 07 	sts	0x078B, r25
				ackPayload[14] = batteryLevel>>8;
    28de:	80 93 8c 07 	sts	0x078C, r24
				ackPayload[15] = 0;
    28e2:	10 92 8d 07 	sts	0x078D, r1
				packetId = 7;
    28e6:	87 e0       	ldi	r24, 0x07	; 7
    28e8:	80 93 0b 02 	sts	0x020B, r24
				break;
    28ec:	64 cf       	rjmp	.-312    	; 0x27b6 <handleRFCommands+0x434>
		// write back the ack payload
		ackPayload[0] = packetId&0xFF;

		switch(packetId) {
			case 3:
				ackPayload[1] = proximityResult[0]&0xFF;
    28ee:	90 91 29 02 	lds	r25, 0x0229
    28f2:	80 91 2a 02 	lds	r24, 0x022A
    28f6:	90 93 7f 07 	sts	0x077F, r25
				ackPayload[2] = proximityResult[0]>>8;
    28fa:	80 93 80 07 	sts	0x0780, r24
				ackPayload[3] = proximityResult[1]&0xFF;
    28fe:	90 91 2b 02 	lds	r25, 0x022B
    2902:	80 91 2c 02 	lds	r24, 0x022C
    2906:	90 93 81 07 	sts	0x0781, r25
				ackPayload[4] = proximityResult[1]>>8;
    290a:	80 93 82 07 	sts	0x0782, r24
				ackPayload[5] = proximityResult[2]&0xFF;
    290e:	90 91 2d 02 	lds	r25, 0x022D
    2912:	80 91 2e 02 	lds	r24, 0x022E
    2916:	90 93 83 07 	sts	0x0783, r25
				ackPayload[6] = proximityResult[2]>>8;
    291a:	80 93 84 07 	sts	0x0784, r24
				ackPayload[7] = proximityResult[3]&0xFF;
    291e:	90 91 2f 02 	lds	r25, 0x022F
    2922:	80 91 30 02 	lds	r24, 0x0230
    2926:	90 93 85 07 	sts	0x0785, r25
				ackPayload[8] = proximityResult[3]>>8;
    292a:	80 93 86 07 	sts	0x0786, r24
				ackPayload[9] = proximityResult[5]&0xFF;
    292e:	90 91 33 02 	lds	r25, 0x0233
    2932:	80 91 34 02 	lds	r24, 0x0234
    2936:	90 93 87 07 	sts	0x0787, r25
				ackPayload[10] = proximityResult[5]>>8;
    293a:	80 93 88 07 	sts	0x0788, r24
				ackPayload[11] = proximityResult[6]&0xFF;
    293e:	90 91 35 02 	lds	r25, 0x0235
    2942:	80 91 36 02 	lds	r24, 0x0236
    2946:	90 93 89 07 	sts	0x0789, r25
				ackPayload[12] = proximityResult[6]>>8;
    294a:	80 93 8a 07 	sts	0x078A, r24
				ackPayload[13] = proximityResult[7]&0xFF;
    294e:	90 91 37 02 	lds	r25, 0x0237
    2952:	80 91 38 02 	lds	r24, 0x0238
    2956:	90 93 8b 07 	sts	0x078B, r25
				ackPayload[14] = proximityResult[7]>>8;
    295a:	80 93 8c 07 	sts	0x078C, r24
				#ifdef HW_REV_3_1
					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1) | (CHARGE_STAT << 2);
    295e:	30 91 03 01 	lds	r19, 0x0103
    2962:	80 91 03 01 	lds	r24, 0x0103
    2966:	20 91 03 01 	lds	r18, 0x0103
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	80 72       	andi	r24, 0x20	; 32
    296e:	90 70       	andi	r25, 0x00	; 0
    2970:	95 95       	asr	r25
    2972:	87 95       	ror	r24
    2974:	95 95       	asr	r25
    2976:	87 95       	ror	r24
    2978:	95 95       	asr	r25
    297a:	87 95       	ror	r24
    297c:	95 95       	asr	r25
    297e:	87 95       	ror	r24
    2980:	95 95       	asr	r25
    2982:	87 95       	ror	r24
    2984:	88 0f       	add	r24, r24
    2986:	99 1f       	adc	r25, r25
    2988:	22 1f       	adc	r18, r18
    298a:	22 27       	eor	r18, r18
    298c:	22 1f       	adc	r18, r18
    298e:	22 0f       	add	r18, r18
    2990:	22 0f       	add	r18, r18
    2992:	28 2b       	or	r18, r24
    2994:	83 2f       	mov	r24, r19
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	80 71       	andi	r24, 0x10	; 16
    299a:	90 70       	andi	r25, 0x00	; 0
    299c:	95 95       	asr	r25
    299e:	87 95       	ror	r24
    29a0:	95 95       	asr	r25
    29a2:	87 95       	ror	r24
    29a4:	95 95       	asr	r25
    29a6:	87 95       	ror	r24
    29a8:	95 95       	asr	r25
    29aa:	87 95       	ror	r24
    29ac:	28 2b       	or	r18, r24
    29ae:	20 93 8d 07 	sts	0x078D, r18
				#else
					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1);
				#endif
				packetId = 4;
    29b2:	84 e0       	ldi	r24, 0x04	; 4
    29b4:	80 93 0b 02 	sts	0x020B, r24
				break;
    29b8:	fe ce       	rjmp	.-516    	; 0x27b6 <handleRFCommands+0x434>
		} else {
			irEnabled = 0;
		}

		if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
			calibrateSensors();
    29ba:	0e 94 bd 40 	call	0x817a	; 0x817a <calibrateSensors>
			resetOdometry();
    29be:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <resetOdometry>
    29c2:	90 91 49 08 	lds	r25, 0x0849
    29c6:	89 2f       	mov	r24, r25
    29c8:	b2 cd       	rjmp	.-1180   	; 0x252e <handleRFCommands+0x1ac>
			}

		#endif
		
		if(currentSelector == 8) {
			if(calibrateOdomFlag==0) {
    29ca:	80 91 e0 04 	lds	r24, 0x04E0
    29ce:	88 23       	and	r24, r24
    29d0:	09 f0       	breq	.+2      	; 0x29d4 <handleRFCommands+0x652>
    29d2:	ff cd       	rjmp	.-1026   	; 0x25d2 <handleRFCommands+0x250>
				if((rfData[7]&0b00000001)==0b00000001) {
    29d4:	80 91 4d 08 	lds	r24, 0x084D
    29d8:	80 ff       	sbrs	r24, 0
    29da:	fb cd       	rjmp	.-1034   	; 0x25d2 <handleRFCommands+0x250>
					calibrateSensors();
    29dc:	0e 94 bd 40 	call	0x817a	; 0x817a <calibrateSensors>
					proximityResult[8] = 1023;	// because the first time this value could be low after calibration
    29e0:	8f ef       	ldi	r24, 0xFF	; 255
    29e2:	93 e0       	ldi	r25, 0x03	; 3
    29e4:	90 93 3a 02 	sts	0x023A, r25
    29e8:	80 93 39 02 	sts	0x0239, r24
					proximityResult[11] = 1023;	// and in that case a false black line will be detected
    29ec:	90 93 40 02 	sts	0x0240, r25
    29f0:	80 93 3f 02 	sts	0x023F, r24
					calibState = 0;
    29f4:	10 92 83 08 	sts	0x0883, r1
					calibVelIndex = 1;
    29f8:	81 e0       	ldi	r24, 0x01	; 1
    29fa:	80 93 7b 07 	sts	0x077B, r24
					calibrateOdomFlag = 1;
    29fe:	80 93 e0 04 	sts	0x04E0, r24
    2a02:	e7 cd       	rjmp	.-1074   	; 0x25d2 <handleRFCommands+0x250>
			} else {
				GREEN_LED6_OFF;
			}

			if(bit_is_set(rfData[6], 7) ) {
				GREEN_LED7_ON;
    2a04:	80 91 0b 01 	lds	r24, 0x010B
    2a08:	8f 77       	andi	r24, 0x7F	; 127
    2a0a:	80 93 0b 01 	sts	0x010B, r24
    2a0e:	dc cd       	rjmp	.-1096   	; 0x25c8 <handleRFCommands+0x246>
		} else {
			obstacleAvoidanceEnabled = 0;
		}

		if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
			cliffAvoidanceEnabled = 1;
    2a10:	81 e0       	ldi	r24, 0x01	; 1
    2a12:	80 93 3b 04 	sts	0x043B, r24
    2a16:	94 cd       	rjmp	.-1240   	; 0x2540 <handleRFCommands+0x1be>
				ackPayload[15] = irCommand;
				packetId = 5;
				break;

			case 5:
				ackPayload[1] = proximityValue[0]&0xFF;
    2a18:	90 91 27 02 	lds	r25, 0x0227
    2a1c:	80 91 28 02 	lds	r24, 0x0228
    2a20:	90 93 7f 07 	sts	0x077F, r25
				ackPayload[2] = proximityValue[0]>>8;
    2a24:	80 93 80 07 	sts	0x0780, r24
				ackPayload[3] = proximityValue[2]&0xFF;
    2a28:	90 91 2b 02 	lds	r25, 0x022B
    2a2c:	80 91 2c 02 	lds	r24, 0x022C
    2a30:	90 93 81 07 	sts	0x0781, r25
				ackPayload[4] = proximityValue[2]>>8;
    2a34:	80 93 82 07 	sts	0x0782, r24
				ackPayload[5] = proximityValue[4]&0xFF;
    2a38:	90 91 2f 02 	lds	r25, 0x022F
    2a3c:	80 91 30 02 	lds	r24, 0x0230
    2a40:	90 93 83 07 	sts	0x0783, r25
				ackPayload[6] = proximityValue[4]>>8;
    2a44:	80 93 84 07 	sts	0x0784, r24
				ackPayload[7] = proximityValue[6]&0xFF;
    2a48:	90 91 33 02 	lds	r25, 0x0233
    2a4c:	80 91 34 02 	lds	r24, 0x0234
    2a50:	90 93 85 07 	sts	0x0785, r25
				ackPayload[8] = proximityValue[6]>>8;
    2a54:	80 93 86 07 	sts	0x0786, r24
				ackPayload[9] = proximityValue[10]&0xFF;
    2a58:	90 91 3b 02 	lds	r25, 0x023B
    2a5c:	80 91 3c 02 	lds	r24, 0x023C
    2a60:	90 93 87 07 	sts	0x0787, r25
				ackPayload[10] = proximityValue[10]>>8;
    2a64:	80 93 88 07 	sts	0x0788, r24
				ackPayload[11] = proximityValue[12]&0xFF;
    2a68:	90 91 3f 02 	lds	r25, 0x023F
    2a6c:	80 91 40 02 	lds	r24, 0x0240
    2a70:	90 93 89 07 	sts	0x0789, r25
				ackPayload[12] = proximityValue[12]>>8;
    2a74:	80 93 8a 07 	sts	0x078A, r24
				ackPayload[13] = proximityValue[14]&0xFF;
    2a78:	90 91 43 02 	lds	r25, 0x0243
    2a7c:	80 91 44 02 	lds	r24, 0x0244
    2a80:	90 93 8b 07 	sts	0x078B, r25
				ackPayload[14] = proximityValue[14]>>8;
    2a84:	80 93 8c 07 	sts	0x078C, r24
				ackPayload[15] = currentSelector;
    2a88:	80 91 1a 04 	lds	r24, 0x041A
    2a8c:	80 93 8d 07 	sts	0x078D, r24
				packetId = 6;
    2a90:	86 e0       	ldi	r24, 0x06	; 6
    2a92:	80 93 0b 02 	sts	0x020B, r24
				break;
    2a96:	8f ce       	rjmp	.-738    	; 0x27b6 <handleRFCommands+0x434>

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    2a98:	25 2f       	mov	r18, r21
    2a9a:	d0 cc       	rjmp	.-1632   	; 0x243c <handleRFCommands+0xba>
    2a9c:	80 91 4a 08 	lds	r24, 0x084A
    2aa0:	88 23       	and	r24, r24
    2aa2:	09 f0       	breq	.+2      	; 0x2aa6 <handleRFCommands+0x724>
    2aa4:	e3 ce       	rjmp	.-570    	; 0x286c <handleRFCommands+0x4ea>
    2aa6:	80 91 4b 08 	lds	r24, 0x084B
    2aaa:	88 23       	and	r24, r24
    2aac:	09 f4       	brne	.+2      	; 0x2ab0 <handleRFCommands+0x72e>
    2aae:	e1 cd       	rjmp	.-1086   	; 0x2672 <handleRFCommands+0x2f0>
    2ab0:	25 2f       	mov	r18, r21
    2ab2:	c4 cc       	rjmp	.-1656   	; 0x243c <handleRFCommands+0xba>

00002ab4 <init_ir_remote_control>:
static unsigned char check_temp = 0;
unsigned char address = 0;
unsigned char data_ir = 0;
unsigned char check = 2;

void init_ir_remote_control(void) { 	
    2ab4:	cf 93       	push	r28
    2ab6:	df 93       	push	r29

	PCICR = 0;
    2ab8:	c8 e6       	ldi	r28, 0x68	; 104
    2aba:	d0 e0       	ldi	r29, 0x00	; 0
    2abc:	18 82       	st	Y, r1
	PCMSK1 = 0;
    2abe:	ac e6       	ldi	r26, 0x6C	; 108
    2ac0:	b0 e0       	ldi	r27, 0x00	; 0
    2ac2:	1c 92       	st	X, r1
	TCCR2A = 0;
    2ac4:	e0 eb       	ldi	r30, 0xB0	; 176
    2ac6:	f0 e0       	ldi	r31, 0x00	; 0
    2ac8:	10 82       	st	Z, r1
	TCCR2B = 0;
    2aca:	10 92 b1 00 	sts	0x00B1, r1
	TIMSK2 = 0;
    2ace:	10 92 70 00 	sts	0x0070, r1

	PCICR |= (1 << PCIE1);			// enable interrupt on change of PCINT15:8 pins
    2ad2:	88 81       	ld	r24, Y
    2ad4:	82 60       	ori	r24, 0x02	; 2
    2ad6:	88 83       	st	Y, r24
	PCMSK1 |= (1 << PCINT15);		// enable PCINT15
    2ad8:	8c 91       	ld	r24, X
    2ada:	80 68       	ori	r24, 0x80	; 128
    2adc:	8c 93       	st	X, r24
	TCCR2A |= (1 << WGM21); 		// mode 2 => CTC mode
    2ade:	80 81       	ld	r24, Z
    2ae0:	82 60       	ori	r24, 0x02	; 2
    2ae2:	80 83       	st	Z, r24

}
    2ae4:	df 91       	pop	r29
    2ae6:	cf 91       	pop	r28
    2ae8:	08 95       	ret

00002aea <__vector_10>:

// external interrupt service routine
ISR(PCINT1_vect) {
    2aea:	1f 92       	push	r1
    2aec:	0f 92       	push	r0
    2aee:	0f b6       	in	r0, 0x3f	; 63
    2af0:	0f 92       	push	r0
    2af2:	11 24       	eor	r1, r1
    2af4:	8f 93       	push	r24

	if(irEnabled) {						// if the robot is configured to accept TV remote commands
    2af6:	80 91 12 02 	lds	r24, 0x0212
    2afa:	88 23       	and	r24, r24
    2afc:	21 f1       	breq	.+72     	; 0x2b46 <__vector_10+0x5c>

		if(bit_is_clear(PINJ, 6)) {		// the interrupt is generated at every pin state change; we only look
    2afe:	80 91 03 01 	lds	r24, 0x0103
    2b02:	86 fd       	sbrc	r24, 6
    2b04:	20 c0       	rjmp	.+64     	; 0x2b46 <__vector_10+0x5c>
										// for the falling edge
			PCICR &= ~(1 << PCIE1);		// disable external interrupt
    2b06:	80 91 68 00 	lds	r24, 0x0068
    2b0a:	8d 7f       	andi	r24, 0xFD	; 253
    2b0c:	80 93 68 00 	sts	0x0068, r24
			PCMSK1 &= ~(1 << PCINT15);
    2b10:	80 91 6c 00 	lds	r24, 0x006C
    2b14:	8f 77       	andi	r24, 0x7F	; 127
    2b16:	80 93 6c 00 	sts	0x006C, r24
		
			// check the pin change isn't due to a glitch; to check this verify that
			// the pin remain low for at least 400 us (the giltches last about 200 us)
			// 0.4 / 0.032 = 13 => 0.416 us
			checkGlitch = 1;							// we're checking if this is a glitch
    2b1a:	81 e0       	ldi	r24, 0x01	; 1
    2b1c:	80 93 13 02 	sts	0x0213, r24
			OCR2A = 13;									// output compare register
    2b20:	8d e0       	ldi	r24, 0x0D	; 13
    2b22:	80 93 b3 00 	sts	0x00B3, r24
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    2b26:	80 91 b1 00 	lds	r24, 0x00B1
    2b2a:	86 60       	ori	r24, 0x06	; 6
    2b2c:	80 93 b1 00 	sts	0x00B1, r24
			TIMSK2 |= (1 << OCIE2A);					// enable output compare interrupt
    2b30:	80 91 70 00 	lds	r24, 0x0070
    2b34:	82 60       	ori	r24, 0x02	; 2
    2b36:	80 93 70 00 	sts	0x0070, r24

			check_temp = address_temp = data_temp = 0;
    2b3a:	10 92 1e 02 	sts	0x021E, r1
    2b3e:	10 92 1f 02 	sts	0x021F, r1
    2b42:	10 92 20 02 	sts	0x0220, r1

		}

	}
	
}
    2b46:	8f 91       	pop	r24
    2b48:	0f 90       	pop	r0
    2b4a:	0f be       	out	0x3f, r0	; 63
    2b4c:	0f 90       	pop	r0
    2b4e:	1f 90       	pop	r1
    2b50:	18 95       	reti

00002b52 <__vector_13>:

ISR(TIMER2_COMPA_vect) {
    2b52:	1f 92       	push	r1
    2b54:	0f 92       	push	r0
    2b56:	0f b6       	in	r0, 0x3f	; 63
    2b58:	0f 92       	push	r0
    2b5a:	11 24       	eor	r1, r1
    2b5c:	2f 93       	push	r18
    2b5e:	3f 93       	push	r19
    2b60:	4f 93       	push	r20
    2b62:	5f 93       	push	r21
    2b64:	8f 93       	push	r24
    2b66:	9f 93       	push	r25

	static int i = -1;

	//PORTB ^= (1 << 5);	// toggle red led

	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);		// stop timer2
    2b68:	80 91 b1 00 	lds	r24, 0x00B1
    2b6c:	88 7f       	andi	r24, 0xF8	; 248
    2b6e:	80 93 b1 00 	sts	0x00B1, r24
	
		if(checkGlitch) {					// if checking this is a glitch
    2b72:	80 91 13 02 	lds	r24, 0x0213
    2b76:	88 23       	and	r24, r24
    2b78:	a9 f0       	breq	.+42     	; 0x2ba4 <__vector_13+0x52>

			if(REMOTE) {					// if high it is a glitch
    2b7a:	80 91 03 01 	lds	r24, 0x0103
    2b7e:	86 ff       	sbrs	r24, 6
    2b80:	65 c0       	rjmp	.+202    	; 0x2c4c <__vector_13+0xfa>

				PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    2b82:	80 91 68 00 	lds	r24, 0x0068
    2b86:	82 60       	ori	r24, 0x02	; 2
    2b88:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    2b8c:	80 91 6c 00 	lds	r24, 0x006C
    2b90:	80 68       	ori	r24, 0x80	; 128
    2b92:	80 93 6c 00 	sts	0x006C, r24
				i = -1;			
    2b96:	8f ef       	ldi	r24, 0xFF	; 255
    2b98:	9f ef       	ldi	r25, 0xFF	; 255
    2b9a:	90 93 02 02 	sts	0x0202, r25
    2b9e:	80 93 01 02 	sts	0x0201, r24
    2ba2:	49 c0       	rjmp	.+146    	; 0x2c36 <__vector_13+0xe4>
			}

		} else {


			if (i == -1) { 						// start bit confirmed
    2ba4:	80 91 01 02 	lds	r24, 0x0201
    2ba8:	90 91 02 02 	lds	r25, 0x0202
    2bac:	2f ef       	ldi	r18, 0xFF	; 255
    2bae:	8f 3f       	cpi	r24, 0xFF	; 255
    2bb0:	92 07       	cpc	r25, r18
    2bb2:	09 f4       	brne	.+2      	; 0x2bb6 <__vector_13+0x64>
    2bb4:	63 c0       	rjmp	.+198    	; 0x2c7c <__vector_13+0x12a>
					check_temp = address_temp = data_temp = 0;
					i=0;

				}

			} else if (i == 1)	{ 						// check bit read and change timer period
    2bb6:	81 30       	cpi	r24, 0x01	; 1
    2bb8:	91 05       	cpc	r25, r1
    2bba:	09 f4       	brne	.+2      	; 0x2bbe <__vector_13+0x6c>
    2bbc:	98 c0       	rjmp	.+304    	; 0x2cee <__vector_13+0x19c>
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
    2bbe:	9c 01       	movw	r18, r24
    2bc0:	22 50       	subi	r18, 0x02	; 2
    2bc2:	30 40       	sbci	r19, 0x00	; 0
    2bc4:	25 30       	cpi	r18, 0x05	; 5
    2bc6:	31 05       	cpc	r19, r1
    2bc8:	08 f4       	brcc	.+2      	; 0x2bcc <__vector_13+0x7a>
    2bca:	67 c0       	rjmp	.+206    	; 0x2c9a <__vector_13+0x148>

				unsigned char temp = REMOTE;
				temp <<= 6-i;
				address_temp += temp;

			} else if ((i > 6) && (i < 13 )) { 			// we read data
    2bcc:	9c 01       	movw	r18, r24
    2bce:	27 50       	subi	r18, 0x07	; 7
    2bd0:	30 40       	sbci	r19, 0x00	; 0
    2bd2:	26 30       	cpi	r18, 0x06	; 6
    2bd4:	31 05       	cpc	r19, r1
    2bd6:	08 f0       	brcs	.+2      	; 0x2bda <__vector_13+0x88>
    2bd8:	bd c0       	rjmp	.+378    	; 0x2d54 <__vector_13+0x202>

				OCR2A = 54;
    2bda:	26 e3       	ldi	r18, 0x36	; 54
    2bdc:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    2be0:	20 91 b1 00 	lds	r18, 0x00B1
    2be4:	26 60       	ori	r18, 0x06	; 6
    2be6:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    2bea:	20 91 70 00 	lds	r18, 0x0070
    2bee:	22 60       	ori	r18, 0x02	; 2
    2bf0:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    2bf4:	20 91 03 01 	lds	r18, 0x0103
    2bf8:	30 e0       	ldi	r19, 0x00	; 0
    2bfa:	20 74       	andi	r18, 0x40	; 64
    2bfc:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6+6-i;
    2bfe:	00 24       	eor	r0, r0
    2c00:	22 0f       	add	r18, r18
    2c02:	33 1f       	adc	r19, r19
    2c04:	00 1c       	adc	r0, r0
    2c06:	22 0f       	add	r18, r18
    2c08:	33 1f       	adc	r19, r19
    2c0a:	00 1c       	adc	r0, r0
    2c0c:	23 2f       	mov	r18, r19
    2c0e:	30 2d       	mov	r19, r0
    2c10:	4c e0       	ldi	r20, 0x0C	; 12
    2c12:	50 e0       	ldi	r21, 0x00	; 0
    2c14:	48 1b       	sub	r20, r24
    2c16:	59 0b       	sbc	r21, r25
    2c18:	02 c0       	rjmp	.+4      	; 0x2c1e <__vector_13+0xcc>
    2c1a:	22 0f       	add	r18, r18
    2c1c:	33 1f       	adc	r19, r19
    2c1e:	4a 95       	dec	r20
    2c20:	e2 f7       	brpl	.-8      	; 0x2c1a <__vector_13+0xc8>
				data_temp += temp;
    2c22:	40 91 1e 02 	lds	r20, 0x021E
    2c26:	42 0f       	add	r20, r18
    2c28:	40 93 1e 02 	sts	0x021E, r20

				i = -1;
				check = check_temp;
				address = address_temp;
				data_ir = data_temp;
				command_received=1;
    2c2c:	01 96       	adiw	r24, 0x01	; 1

		}
	
		if(i!=-1) {

			i++;
    2c2e:	90 93 02 02 	sts	0x0202, r25
    2c32:	80 93 01 02 	sts	0x0201, r24

		}

}
    2c36:	9f 91       	pop	r25
    2c38:	8f 91       	pop	r24
    2c3a:	5f 91       	pop	r21
    2c3c:	4f 91       	pop	r20
    2c3e:	3f 91       	pop	r19
    2c40:	2f 91       	pop	r18
    2c42:	0f 90       	pop	r0
    2c44:	0f be       	out	0x3f, r0	; 63
    2c46:	0f 90       	pop	r0
    2c48:	1f 90       	pop	r1
    2c4a:	18 95       	reti
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
				i = -1;			

			} else {						// not a glitch => real command received

				checkGlitch = 0;
    2c4c:	10 92 13 02 	sts	0x0213, r1

				// activate the IR Receiver with a 2.1 ms cycle value
				// we set the resolution of the timer to be 0.032 ms (prescaler 1/256) so:
				// 2.1 / 0.032 = 64 to be set in the output compare register (=> 2.048 ms)
				// but we already wait 0.416 us => 13, so 64-13=51
				OCR2A = 51;								// output compare register
    2c50:	83 e3       	ldi	r24, 0x33	; 51
    2c52:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    2c56:	80 91 b1 00 	lds	r24, 0x00B1
    2c5a:	86 60       	ori	r24, 0x06	; 6
    2c5c:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    2c60:	80 91 70 00 	lds	r24, 0x0070
    2c64:	82 60       	ori	r24, 0x02	; 2
    2c66:	80 93 70 00 	sts	0x0070, r24
    2c6a:	80 91 01 02 	lds	r24, 0x0201
    2c6e:	90 91 02 02 	lds	r25, 0x0202

			} 

		}
	
		if(i!=-1) {
    2c72:	2f ef       	ldi	r18, 0xFF	; 255
    2c74:	8f 3f       	cpi	r24, 0xFF	; 255
    2c76:	92 07       	cpc	r25, r18
    2c78:	c9 f6       	brne	.-78     	; 0x2c2c <__vector_13+0xda>
    2c7a:	dd cf       	rjmp	.-70     	; 0x2c36 <__vector_13+0xe4>
		} else {


			if (i == -1) { 						// start bit confirmed

				if(REMOTE) {					// double check => if high it is only a noise
    2c7c:	20 91 03 01 	lds	r18, 0x0103
    2c80:	26 ff       	sbrs	r18, 6
    2c82:	52 c0       	rjmp	.+164    	; 0x2d28 <__vector_13+0x1d6>

					PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    2c84:	20 91 68 00 	lds	r18, 0x0068
    2c88:	22 60       	ori	r18, 0x02	; 2
    2c8a:	20 93 68 00 	sts	0x0068, r18
					PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    2c8e:	20 91 6c 00 	lds	r18, 0x006C
    2c92:	20 68       	ori	r18, 0x80	; 128
    2c94:	20 93 6c 00 	sts	0x006C, r18
    2c98:	ce cf       	rjmp	.-100    	; 0x2c36 <__vector_13+0xe4>
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
		
				OCR2A = 54;
    2c9a:	26 e3       	ldi	r18, 0x36	; 54
    2c9c:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    2ca0:	20 91 b1 00 	lds	r18, 0x00B1
    2ca4:	26 60       	ori	r18, 0x06	; 6
    2ca6:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    2caa:	20 91 70 00 	lds	r18, 0x0070
    2cae:	22 60       	ori	r18, 0x02	; 2
    2cb0:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    2cb4:	20 91 03 01 	lds	r18, 0x0103
    2cb8:	30 e0       	ldi	r19, 0x00	; 0
    2cba:	20 74       	andi	r18, 0x40	; 64
    2cbc:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6-i;
    2cbe:	00 24       	eor	r0, r0
    2cc0:	22 0f       	add	r18, r18
    2cc2:	33 1f       	adc	r19, r19
    2cc4:	00 1c       	adc	r0, r0
    2cc6:	22 0f       	add	r18, r18
    2cc8:	33 1f       	adc	r19, r19
    2cca:	00 1c       	adc	r0, r0
    2ccc:	23 2f       	mov	r18, r19
    2cce:	30 2d       	mov	r19, r0
    2cd0:	46 e0       	ldi	r20, 0x06	; 6
    2cd2:	50 e0       	ldi	r21, 0x00	; 0
    2cd4:	48 1b       	sub	r20, r24
    2cd6:	59 0b       	sbc	r21, r25
    2cd8:	02 c0       	rjmp	.+4      	; 0x2cde <__vector_13+0x18c>
    2cda:	22 0f       	add	r18, r18
    2cdc:	33 1f       	adc	r19, r19
    2cde:	4a 95       	dec	r20
    2ce0:	e2 f7       	brpl	.-8      	; 0x2cda <__vector_13+0x188>
				address_temp += temp;
    2ce2:	40 91 1f 02 	lds	r20, 0x021F
    2ce6:	42 0f       	add	r20, r18
    2ce8:	40 93 1f 02 	sts	0x021F, r20
    2cec:	9f cf       	rjmp	.-194    	; 0x2c2c <__vector_13+0xda>

				}

			} else if (i == 1)	{ 						// check bit read and change timer period

				check_temp = REMOTE;	   				// read the check bit
    2cee:	20 91 03 01 	lds	r18, 0x0103
    2cf2:	30 e0       	ldi	r19, 0x00	; 0
    2cf4:	20 74       	andi	r18, 0x40	; 64
    2cf6:	30 70       	andi	r19, 0x00	; 0
    2cf8:	02 2e       	mov	r0, r18
    2cfa:	23 2f       	mov	r18, r19
    2cfc:	00 0c       	add	r0, r0
    2cfe:	22 1f       	adc	r18, r18
    2d00:	33 0b       	sbc	r19, r19
    2d02:	00 0c       	add	r0, r0
    2d04:	22 1f       	adc	r18, r18
    2d06:	33 1f       	adc	r19, r19
    2d08:	20 93 20 02 	sts	0x0220, r18
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
    2d0c:	26 e3       	ldi	r18, 0x36	; 54
    2d0e:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    2d12:	20 91 b1 00 	lds	r18, 0x00B1
    2d16:	26 60       	ori	r18, 0x06	; 6
    2d18:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    2d1c:	20 91 70 00 	lds	r18, 0x0070
    2d20:	22 60       	ori	r18, 0x02	; 2
    2d22:	20 93 70 00 	sts	0x0070, r18
    2d26:	82 cf       	rjmp	.-252    	; 0x2c2c <__vector_13+0xda>

				} else {	// read the check bit
			
					//cycle value is 0.9 ms to go to check bit so:
					// 0.9 / 0.032 = 28 => 0.896
					OCR2A = 28;								// output compare register
    2d28:	8c e1       	ldi	r24, 0x1C	; 28
    2d2a:	80 93 b3 00 	sts	0x00B3, r24
					TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    2d2e:	80 91 b1 00 	lds	r24, 0x00B1
    2d32:	86 60       	ori	r24, 0x06	; 6
    2d34:	80 93 b1 00 	sts	0x00B1, r24
					TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt					
    2d38:	80 91 70 00 	lds	r24, 0x0070
    2d3c:	82 60       	ori	r24, 0x02	; 2
    2d3e:	80 93 70 00 	sts	0x0070, r24

					check_temp = address_temp = data_temp = 0;
    2d42:	10 92 1e 02 	sts	0x021E, r1
    2d46:	10 92 1f 02 	sts	0x021F, r1
    2d4a:	10 92 20 02 	sts	0x0220, r1
    2d4e:	81 e0       	ldi	r24, 0x01	; 1
    2d50:	90 e0       	ldi	r25, 0x00	; 0
    2d52:	6d cf       	rjmp	.-294    	; 0x2c2e <__vector_13+0xdc>

				unsigned char temp = REMOTE;
				temp <<= 6+6-i;
				data_temp += temp;

			} else if (i == 13) { 						// last bit read
    2d54:	8d 30       	cpi	r24, 0x0D	; 13
    2d56:	91 05       	cpc	r25, r1
    2d58:	09 f0       	breq	.+2      	; 0x2d5c <__vector_13+0x20a>
    2d5a:	68 cf       	rjmp	.-304    	; 0x2c2c <__vector_13+0xda>
				
				TIMSK2 = 0;								// disable all interrupt for timer2
    2d5c:	10 92 70 00 	sts	0x0070, r1
				PCICR |= (1 << PCIE1);					// enable external interrupt to receive next command
    2d60:	80 91 68 00 	lds	r24, 0x0068
    2d64:	82 60       	ori	r24, 0x02	; 2
    2d66:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);				// clear interrupt flag
    2d6a:	80 91 6c 00 	lds	r24, 0x006C
    2d6e:	80 68       	ori	r24, 0x80	; 128
    2d70:	80 93 6c 00 	sts	0x006C, r24

				i = -1;
    2d74:	8f ef       	ldi	r24, 0xFF	; 255
    2d76:	9f ef       	ldi	r25, 0xFF	; 255
    2d78:	90 93 02 02 	sts	0x0202, r25
    2d7c:	80 93 01 02 	sts	0x0201, r24
				check = check_temp;
    2d80:	80 91 20 02 	lds	r24, 0x0220
    2d84:	80 93 00 02 	sts	0x0200, r24
				address = address_temp;
    2d88:	80 91 1f 02 	lds	r24, 0x021F
    2d8c:	80 93 1c 02 	sts	0x021C, r24
				data_ir = data_temp;
    2d90:	80 91 1e 02 	lds	r24, 0x021E
    2d94:	80 93 1d 02 	sts	0x021D, r24
				command_received=1;
    2d98:	81 e0       	ldi	r24, 0x01	; 1
    2d9a:	80 93 f6 03 	sts	0x03F6, r24
    2d9e:	4b cf       	rjmp	.-362    	; 0x2c36 <__vector_13+0xe4>

00002da0 <ir_remote_get_check>:

}

unsigned char ir_remote_get_check(void) {
	return check;
}
    2da0:	80 91 00 02 	lds	r24, 0x0200
    2da4:	08 95       	ret

00002da6 <ir_remote_get_address>:

unsigned char ir_remote_get_address(void) {
	return address;
}
    2da6:	80 91 1c 02 	lds	r24, 0x021C
    2daa:	08 95       	ret

00002dac <ir_remote_get_data>:

unsigned char ir_remote_get_data(void) {
	return data_ir;
}
    2dac:	80 91 1d 02 	lds	r24, 0x021D
    2db0:	08 95       	ret

00002db2 <handleIRRemoteCommands>:

void handleIRRemoteCommands() {

	if(irEnabled) {
    2db2:	80 91 12 02 	lds	r24, 0x0212
    2db6:	88 23       	and	r24, r24
    2db8:	51 f1       	breq	.+84     	; 0x2e0e <handleIRRemoteCommands+0x5c>

		if(command_received) {
    2dba:	80 91 f6 03 	lds	r24, 0x03F6
    2dbe:	88 23       	and	r24, r24
    2dc0:	31 f1       	breq	.+76     	; 0x2e0e <handleIRRemoteCommands+0x5c>
unsigned char ir_remote_get_address(void) {
	return address;
}

unsigned char ir_remote_get_data(void) {
	return data_ir;
    2dc2:	e0 91 1d 02 	lds	r30, 0x021D

	if(irEnabled) {

		if(command_received) {

            irCommand = ir_remote_get_data();
    2dc6:	e0 93 f5 03 	sts	0x03F5, r30

		    //usartTransmit(irCommand);

			command_received = 0;
    2dca:	10 92 f6 03 	sts	0x03F6, r1

			switch(irCommand) {
    2dce:	f0 e0       	ldi	r31, 0x00	; 0
    2dd0:	e5 33       	cpi	r30, 0x35	; 53
    2dd2:	f1 05       	cpc	r31, r1
    2dd4:	e8 f0       	brcs	.+58     	; 0x2e10 <handleIRRemoteCommands+0x5e>
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 1;
							break;
						case 3:
							obstacleAvoidanceEnabled = 1;
							cliffAvoidanceEnabled = 1;
    2dd6:	20 91 c9 02 	lds	r18, 0x02C9
    2dda:	30 91 ca 02 	lds	r19, 0x02CA
    2dde:	80 91 cb 02 	lds	r24, 0x02CB
    2de2:	90 91 cc 02 	lds	r25, 0x02CC
	               	break;

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
    2de6:	37 fd       	sbrc	r19, 7
    2de8:	b9 c1       	rjmp	.+882    	; 0x315c <handleIRRemoteCommands+0x3aa>
				speedr = pwm_right_desired;
			} else {
				speedr = (-pwm_right_desired);
    2dea:	30 93 e4 02 	sts	0x02E4, r19
    2dee:	20 93 e3 02 	sts	0x02E3, r18
			}
			if(pwm_left_desired >= 0) {
    2df2:	97 fd       	sbrc	r25, 7
    2df4:	05 c0       	rjmp	.+10     	; 0x2e00 <handleIRRemoteCommands+0x4e>
				speedl = pwm_left_desired;
    2df6:	90 93 e2 02 	sts	0x02E2, r25
    2dfa:	80 93 e1 02 	sts	0x02E1, r24
    2dfe:	08 95       	ret
			} else {
				speedl = (-pwm_left_desired);
    2e00:	90 95       	com	r25
    2e02:	81 95       	neg	r24
    2e04:	9f 4f       	sbci	r25, 0xFF	; 255
    2e06:	90 93 e2 02 	sts	0x02E2, r25
    2e0a:	80 93 e1 02 	sts	0x02E1, r24
    2e0e:	08 95       	ret

		    //usartTransmit(irCommand);

			command_received = 0;

			switch(irCommand) {
    2e10:	ee 58       	subi	r30, 0x8E	; 142
    2e12:	ff 4f       	sbci	r31, 0xFF	; 255
    2e14:	ee 0f       	add	r30, r30
    2e16:	ff 1f       	adc	r31, r31
    2e18:	05 90       	lpm	r0, Z+
    2e1a:	f4 91       	lpm	r31, Z+
    2e1c:	e0 2d       	mov	r30, r0
    2e1e:	19 94       	eijmp
						case 0:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 0;
							break;
						case 1:
							obstacleAvoidanceEnabled = 1;
    2e20:	80 93 3a 04 	sts	0x043A, r24
							cliffAvoidanceEnabled = 0;
    2e24:	10 92 3b 04 	sts	0x043B, r1
    2e28:	20 91 c9 02 	lds	r18, 0x02C9
    2e2c:	30 91 ca 02 	lds	r19, 0x02CA
    2e30:	80 91 cb 02 	lds	r24, 0x02CB
    2e34:	90 91 cc 02 	lds	r25, 0x02CC
							break;
    2e38:	d6 cf       	rjmp	.-84     	; 0x2de6 <handleIRRemoteCommands+0x34>
						case 2:
							obstacleAvoidanceEnabled = 0;
    2e3a:	10 92 3a 04 	sts	0x043A, r1
							cliffAvoidanceEnabled = 1;
    2e3e:	81 e0       	ldi	r24, 0x01	; 1
    2e40:	80 93 3b 04 	sts	0x043B, r24
    2e44:	20 91 c9 02 	lds	r18, 0x02C9
    2e48:	30 91 ca 02 	lds	r19, 0x02CA
    2e4c:	80 91 cb 02 	lds	r24, 0x02CB
    2e50:	90 91 cc 02 	lds	r25, 0x02CC
							break;
    2e54:	c8 cf       	rjmp	.-112    	; 0x2de6 <handleIRRemoteCommands+0x34>
				case 33:	// program -
					cliffAvoidanceEnabled = 0;
					break;

				case 52:	// av/tv button
					behaviorState = (behaviorState+1)%4;
    2e56:	80 91 f8 03 	lds	r24, 0x03F8
    2e5a:	90 e0       	ldi	r25, 0x00	; 0
    2e5c:	01 96       	adiw	r24, 0x01	; 1
    2e5e:	83 70       	andi	r24, 0x03	; 3
    2e60:	90 70       	andi	r25, 0x00	; 0
    2e62:	80 93 f8 03 	sts	0x03F8, r24
					switch(behaviorState) {
    2e66:	82 30       	cpi	r24, 0x02	; 2
    2e68:	41 f3       	breq	.-48     	; 0x2e3a <handleIRRemoteCommands+0x88>
    2e6a:	83 30       	cpi	r24, 0x03	; 3
    2e6c:	09 f4       	brne	.+2      	; 0x2e70 <handleIRRemoteCommands+0xbe>
    2e6e:	8a c1       	rjmp	.+788    	; 0x3184 <handleIRRemoteCommands+0x3d2>
    2e70:	81 30       	cpi	r24, 0x01	; 1
    2e72:	b1 f2       	breq	.-84     	; 0x2e20 <handleIRRemoteCommands+0x6e>
						case 0:
							obstacleAvoidanceEnabled = 0;
    2e74:	10 92 3a 04 	sts	0x043A, r1
							cliffAvoidanceEnabled = 0;
    2e78:	10 92 3b 04 	sts	0x043B, r1
    2e7c:	20 91 c9 02 	lds	r18, 0x02C9
    2e80:	30 91 ca 02 	lds	r19, 0x02CA
    2e84:	80 91 cb 02 	lds	r24, 0x02CB
    2e88:	90 91 cc 02 	lds	r25, 0x02CC
							break;
    2e8c:	ac cf       	rjmp	.-168    	; 0x2de6 <handleIRRemoteCommands+0x34>
				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
					break;

				case 17:	// volume -
					obstacleAvoidanceEnabled = 0;
    2e8e:	10 92 3a 04 	sts	0x043A, r1
    2e92:	20 91 c9 02 	lds	r18, 0x02C9
    2e96:	30 91 ca 02 	lds	r19, 0x02CA
    2e9a:	80 91 cb 02 	lds	r24, 0x02CB
    2e9e:	90 91 cc 02 	lds	r25, 0x02CC
					break;
    2ea2:	a1 cf       	rjmp	.-190    	; 0x2de6 <handleIRRemoteCommands+0x34>
					pwm_right_desired += STEP_MOTORS;
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
					break;

				case 9:	// left motor backward
					pwm_left_desired -= STEP_MOTORS;
    2ea4:	80 91 cb 02 	lds	r24, 0x02CB
    2ea8:	90 91 cc 02 	lds	r25, 0x02CC
    2eac:	02 97       	sbiw	r24, 0x02	; 2
    2eae:	90 93 cc 02 	sts	0x02CC, r25
    2eb2:	80 93 cb 02 	sts	0x02CB, r24
	           	    if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    2eb6:	2e ef       	ldi	r18, 0xFE	; 254
    2eb8:	80 30       	cpi	r24, 0x00	; 0
    2eba:	92 07       	cpc	r25, r18
    2ebc:	9c f5       	brge	.+102    	; 0x2f24 <handleIRRemoteCommands+0x172>
    2ebe:	80 e0       	ldi	r24, 0x00	; 0
    2ec0:	9e ef       	ldi	r25, 0xFE	; 254
    2ec2:	90 93 cc 02 	sts	0x02CC, r25
    2ec6:	80 93 cb 02 	sts	0x02CB, r24
    2eca:	20 91 c9 02 	lds	r18, 0x02C9
    2ece:	30 91 ca 02 	lds	r19, 0x02CA
    2ed2:	89 cf       	rjmp	.-238    	; 0x2de6 <handleIRRemoteCommands+0x34>
    	            if (pwm_left_desired > (MAX_MOTORS_PWM/2)) pwm_left_desired = (MAX_MOTORS_PWM/2);
               		break;

				case 8:	// both motors backward
				case 30:
					if(pwm_right_desired < pwm_left) {
    2ed4:	20 91 c9 02 	lds	r18, 0x02C9
    2ed8:	30 91 ca 02 	lds	r19, 0x02CA
    2edc:	80 91 c7 02 	lds	r24, 0x02C7
    2ee0:	90 91 c8 02 	lds	r25, 0x02C8
    2ee4:	28 17       	cp	r18, r24
    2ee6:	39 07       	cpc	r19, r25
    2ee8:	24 f0       	brlt	.+8      	; 0x2ef2 <handleIRRemoteCommands+0x140>
						pwm_left_desired  = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
    2eea:	20 91 cb 02 	lds	r18, 0x02CB
    2eee:	30 91 cc 02 	lds	r19, 0x02CC
					}
					pwm_right_desired -= STEP_MOTORS;
    2ef2:	22 50       	subi	r18, 0x02	; 2
    2ef4:	30 40       	sbci	r19, 0x00	; 0
    2ef6:	30 93 ca 02 	sts	0x02CA, r19
    2efa:	20 93 c9 02 	sts	0x02C9, r18
					pwm_left_desired -= STEP_MOTORS;
    2efe:	c9 01       	movw	r24, r18
    2f00:	30 93 cc 02 	sts	0x02CC, r19
    2f04:	20 93 cb 02 	sts	0x02CB, r18
	                if (pwm_right_desired < -(MAX_MOTORS_PWM/2)) pwm_right_desired = -(MAX_MOTORS_PWM/2);
    2f08:	4e ef       	ldi	r20, 0xFE	; 254
    2f0a:	20 30       	cpi	r18, 0x00	; 0
    2f0c:	34 07       	cpc	r19, r20
    2f0e:	34 f4       	brge	.+12     	; 0x2f1c <handleIRRemoteCommands+0x16a>
    2f10:	40 e0       	ldi	r20, 0x00	; 0
    2f12:	5e ef       	ldi	r21, 0xFE	; 254
    2f14:	50 93 ca 02 	sts	0x02CA, r21
    2f18:	40 93 c9 02 	sts	0x02C9, r20
    	            if (pwm_left_desired < -(MAX_MOTORS_PWM/2)) pwm_left_desired = -(MAX_MOTORS_PWM/2);
    2f1c:	4e ef       	ldi	r20, 0xFE	; 254
    2f1e:	20 30       	cpi	r18, 0x00	; 0
    2f20:	34 07       	cpc	r19, r20
    2f22:	6c f2       	brlt	.-102    	; 0x2ebe <handleIRRemoteCommands+0x10c>
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    2f24:	20 91 c9 02 	lds	r18, 0x02C9
    2f28:	30 91 ca 02 	lds	r19, 0x02CA
    2f2c:	5c cf       	rjmp	.-328    	; 0x2de6 <handleIRRemoteCommands+0x34>
					updateBlueLed(pwm_blue);

	               	break;

				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
    2f2e:	81 e0       	ldi	r24, 0x01	; 1
    2f30:	80 93 3a 04 	sts	0x043A, r24
    2f34:	20 91 c9 02 	lds	r18, 0x02C9
    2f38:	30 91 ca 02 	lds	r19, 0x02CA
    2f3c:	80 91 cb 02 	lds	r24, 0x02CB
    2f40:	90 91 cc 02 	lds	r25, 0x02CC
					break;
    2f44:	50 cf       	rjmp	.-352    	; 0x2de6 <handleIRRemoteCommands+0x34>
					pwm_left_desired -= STEP_MOTORS;
	           	    if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 7:	// right motor backward
					pwm_right_desired -= STEP_MOTORS;
    2f46:	20 91 c9 02 	lds	r18, 0x02C9
    2f4a:	30 91 ca 02 	lds	r19, 0x02CA
    2f4e:	22 50       	subi	r18, 0x02	; 2
    2f50:	30 40       	sbci	r19, 0x00	; 0
    2f52:	30 93 ca 02 	sts	0x02CA, r19
    2f56:	20 93 c9 02 	sts	0x02C9, r18
	               	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    2f5a:	4e ef       	ldi	r20, 0xFE	; 254
    2f5c:	20 30       	cpi	r18, 0x00	; 0
    2f5e:	34 07       	cpc	r19, r20
    2f60:	0c f0       	brlt	.+2      	; 0x2f64 <handleIRRemoteCommands+0x1b2>
    2f62:	3d cf       	rjmp	.-390    	; 0x2dde <handleIRRemoteCommands+0x2c>
    2f64:	80 e0       	ldi	r24, 0x00	; 0
    2f66:	9e ef       	ldi	r25, 0xFE	; 254
    2f68:	90 93 ca 02 	sts	0x02CA, r25
    2f6c:	80 93 c9 02 	sts	0x02C9, r24
    2f70:	80 91 cb 02 	lds	r24, 0x02CB
    2f74:	90 91 cc 02 	lds	r25, 0x02CC
    2f78:	20 e0       	ldi	r18, 0x00	; 0
    2f7a:	32 e0       	ldi	r19, 0x02	; 2
    2f7c:	36 cf       	rjmp	.-404    	; 0x2dea <handleIRRemoteCommands+0x38>
    	            if (pwm_left_desired < -(MAX_MOTORS_PWM/2)) pwm_left_desired = -(MAX_MOTORS_PWM/2);
                  	break;

				case 6:	// both motors right
				case 47:
					pwm_right_desired -= STEP_MOTORS;
    2f7e:	20 91 c9 02 	lds	r18, 0x02C9
    2f82:	30 91 ca 02 	lds	r19, 0x02CA
    2f86:	22 50       	subi	r18, 0x02	; 2
    2f88:	30 40       	sbci	r19, 0x00	; 0
    2f8a:	30 93 ca 02 	sts	0x02CA, r19
    2f8e:	20 93 c9 02 	sts	0x02C9, r18
					pwm_left_desired += STEP_MOTORS;
    2f92:	80 91 cb 02 	lds	r24, 0x02CB
    2f96:	90 91 cc 02 	lds	r25, 0x02CC
    2f9a:	02 96       	adiw	r24, 0x02	; 2
    2f9c:	90 93 cc 02 	sts	0x02CC, r25
    2fa0:	80 93 cb 02 	sts	0x02CB, r24
                	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    2fa4:	4e ef       	ldi	r20, 0xFE	; 254
    2fa6:	20 30       	cpi	r18, 0x00	; 0
    2fa8:	34 07       	cpc	r19, r20
    2faa:	34 f4       	brge	.+12     	; 0x2fb8 <handleIRRemoteCommands+0x206>
    2fac:	20 e0       	ldi	r18, 0x00	; 0
    2fae:	3e ef       	ldi	r19, 0xFE	; 254
    2fb0:	30 93 ca 02 	sts	0x02CA, r19
    2fb4:	20 93 c9 02 	sts	0x02C9, r18
                	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    2fb8:	42 e0       	ldi	r20, 0x02	; 2
    2fba:	81 30       	cpi	r24, 0x01	; 1
    2fbc:	94 07       	cpc	r25, r20
    2fbe:	0c f4       	brge	.+2      	; 0x2fc2 <handleIRRemoteCommands+0x210>
    2fc0:	12 cf       	rjmp	.-476    	; 0x2de6 <handleIRRemoteCommands+0x34>
    2fc2:	80 e0       	ldi	r24, 0x00	; 0
    2fc4:	92 e0       	ldi	r25, 0x02	; 2
    2fc6:	90 93 cc 02 	sts	0x02CC, r25
    2fca:	80 93 cb 02 	sts	0x02CB, r24
    2fce:	0b cf       	rjmp	.-490    	; 0x2de6 <handleIRRemoteCommands+0x34>
			switch(irCommand) {
				// sometimes there are two cases for the same command because two different
				// remote controls are used; one of this do not contain "numbers"
				case 5:	// stop motors
				case 51:
					pwm_right_desired = 0;
    2fd0:	10 92 ca 02 	sts	0x02CA, r1
    2fd4:	10 92 c9 02 	sts	0x02C9, r1
					pwm_left_desired = 0;
    2fd8:	10 92 cc 02 	sts	0x02CC, r1
    2fdc:	10 92 cb 02 	sts	0x02CB, r1
					if(currentSelector == 8) {
    2fe0:	80 91 1a 04 	lds	r24, 0x041A
    2fe4:	88 30       	cpi	r24, 0x08	; 8
    2fe6:	09 f4       	brne	.+2      	; 0x2fea <handleIRRemoteCommands+0x238>
    2fe8:	db c0       	rjmp	.+438    	; 0x31a0 <handleIRRemoteCommands+0x3ee>
    2fea:	80 e0       	ldi	r24, 0x00	; 0
    2fec:	90 e0       	ldi	r25, 0x00	; 0
    2fee:	20 e0       	ldi	r18, 0x00	; 0
    2ff0:	30 e0       	ldi	r19, 0x00	; 0
    2ff2:	fb ce       	rjmp	.-522    	; 0x2dea <handleIRRemoteCommands+0x38>
                	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
					break;

				case 4:	// both motors left
				case 46:
					pwm_right_desired += STEP_MOTORS;
    2ff4:	20 91 c9 02 	lds	r18, 0x02C9
    2ff8:	30 91 ca 02 	lds	r19, 0x02CA
    2ffc:	2e 5f       	subi	r18, 0xFE	; 254
    2ffe:	3f 4f       	sbci	r19, 0xFF	; 255
    3000:	30 93 ca 02 	sts	0x02CA, r19
    3004:	20 93 c9 02 	sts	0x02C9, r18
					pwm_left_desired -= STEP_MOTORS;
    3008:	80 91 cb 02 	lds	r24, 0x02CB
    300c:	90 91 cc 02 	lds	r25, 0x02CC
    3010:	02 97       	sbiw	r24, 0x02	; 2
    3012:	90 93 cc 02 	sts	0x02CC, r25
    3016:	80 93 cb 02 	sts	0x02CB, r24
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    301a:	42 e0       	ldi	r20, 0x02	; 2
    301c:	21 30       	cpi	r18, 0x01	; 1
    301e:	34 07       	cpc	r19, r20
    3020:	34 f0       	brlt	.+12     	; 0x302e <handleIRRemoteCommands+0x27c>
    3022:	20 e0       	ldi	r18, 0x00	; 0
    3024:	32 e0       	ldi	r19, 0x02	; 2
    3026:	30 93 ca 02 	sts	0x02CA, r19
    302a:	20 93 c9 02 	sts	0x02C9, r18
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    302e:	4e ef       	ldi	r20, 0xFE	; 254
    3030:	80 30       	cpi	r24, 0x00	; 0
    3032:	94 07       	cpc	r25, r20
    3034:	0c f0       	brlt	.+2      	; 0x3038 <handleIRRemoteCommands+0x286>
    3036:	d7 ce       	rjmp	.-594    	; 0x2de6 <handleIRRemoteCommands+0x34>
    3038:	80 e0       	ldi	r24, 0x00	; 0
    303a:	9e ef       	ldi	r25, 0xFE	; 254
    303c:	90 93 cc 02 	sts	0x02CC, r25
    3040:	80 93 cb 02 	sts	0x02CB, r24
    3044:	d0 ce       	rjmp	.-608    	; 0x2de6 <handleIRRemoteCommands+0x34>
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
    3046:	80 91 cb 02 	lds	r24, 0x02CB
    304a:	90 91 cc 02 	lds	r25, 0x02CC
    304e:	02 96       	adiw	r24, 0x02	; 2
    3050:	90 93 cc 02 	sts	0x02CC, r25
    3054:	80 93 cb 02 	sts	0x02CB, r24
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    3058:	22 e0       	ldi	r18, 0x02	; 2
    305a:	81 30       	cpi	r24, 0x01	; 1
    305c:	92 07       	cpc	r25, r18
    305e:	0c f4       	brge	.+2      	; 0x3062 <handleIRRemoteCommands+0x2b0>
    3060:	61 cf       	rjmp	.-318    	; 0x2f24 <handleIRRemoteCommands+0x172>
    3062:	80 e0       	ldi	r24, 0x00	; 0
    3064:	92 e0       	ldi	r25, 0x02	; 2
    3066:	90 93 cc 02 	sts	0x02CC, r25
    306a:	80 93 cb 02 	sts	0x02CB, r24
    306e:	5a cf       	rjmp	.-332    	; 0x2f24 <handleIRRemoteCommands+0x172>
					}
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    3070:	20 91 c9 02 	lds	r18, 0x02C9
    3074:	30 91 ca 02 	lds	r19, 0x02CA
    3078:	80 91 cb 02 	lds	r24, 0x02CB
    307c:	90 91 cc 02 	lds	r25, 0x02CC
    3080:	82 17       	cp	r24, r18
    3082:	93 07       	cpc	r25, r19
    3084:	0c f4       	brge	.+2      	; 0x3088 <handleIRRemoteCommands+0x2d6>
    3086:	6e c0       	rjmp	.+220    	; 0x3164 <handleIRRemoteCommands+0x3b2>
    3088:	9c 01       	movw	r18, r24
						pwm_left_desired = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
					}
					pwm_right_desired += STEP_MOTORS;
    308a:	2e 5f       	subi	r18, 0xFE	; 254
    308c:	3f 4f       	sbci	r19, 0xFF	; 255
    308e:	30 93 ca 02 	sts	0x02CA, r19
    3092:	20 93 c9 02 	sts	0x02C9, r18
					pwm_left_desired += STEP_MOTORS;
    3096:	02 96       	adiw	r24, 0x02	; 2
    3098:	90 93 cc 02 	sts	0x02CC, r25
    309c:	80 93 cb 02 	sts	0x02CB, r24
	                if (pwm_right_desired > (MAX_MOTORS_PWM/2)) pwm_right_desired = (MAX_MOTORS_PWM/2);
    30a0:	42 e0       	ldi	r20, 0x02	; 2
    30a2:	21 30       	cpi	r18, 0x01	; 1
    30a4:	34 07       	cpc	r19, r20
    30a6:	34 f0       	brlt	.+12     	; 0x30b4 <handleIRRemoteCommands+0x302>
    30a8:	20 e0       	ldi	r18, 0x00	; 0
    30aa:	32 e0       	ldi	r19, 0x02	; 2
    30ac:	30 93 ca 02 	sts	0x02CA, r19
    30b0:	20 93 c9 02 	sts	0x02C9, r18
    	            if (pwm_left_desired > (MAX_MOTORS_PWM/2)) pwm_left_desired = (MAX_MOTORS_PWM/2);
    30b4:	22 e0       	ldi	r18, 0x02	; 2
    30b6:	81 30       	cpi	r24, 0x01	; 1
    30b8:	92 07       	cpc	r25, r18
    30ba:	0c f4       	brge	.+2      	; 0x30be <handleIRRemoteCommands+0x30c>
    30bc:	33 cf       	rjmp	.-410    	; 0x2f24 <handleIRRemoteCommands+0x172>
    30be:	80 e0       	ldi	r24, 0x00	; 0
    30c0:	92 e0       	ldi	r25, 0x02	; 2
    30c2:	90 93 cc 02 	sts	0x02CC, r25
    30c6:	80 93 cb 02 	sts	0x02CB, r24
    30ca:	20 91 c9 02 	lds	r18, 0x02C9
    30ce:	30 91 ca 02 	lds	r19, 0x02CA
    30d2:	89 ce       	rjmp	.-750    	; 0x2de6 <handleIRRemoteCommands+0x34>
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
					break;

				case 1:	// right motor forward
					pwm_right_desired += STEP_MOTORS;
    30d4:	20 91 c9 02 	lds	r18, 0x02C9
    30d8:	30 91 ca 02 	lds	r19, 0x02CA
    30dc:	2e 5f       	subi	r18, 0xFE	; 254
    30de:	3f 4f       	sbci	r19, 0xFF	; 255
    30e0:	30 93 ca 02 	sts	0x02CA, r19
    30e4:	20 93 c9 02 	sts	0x02C9, r18
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    30e8:	42 e0       	ldi	r20, 0x02	; 2
    30ea:	21 30       	cpi	r18, 0x01	; 1
    30ec:	34 07       	cpc	r19, r20
    30ee:	0c f4       	brge	.+2      	; 0x30f2 <handleIRRemoteCommands+0x340>
    30f0:	76 ce       	rjmp	.-788    	; 0x2dde <handleIRRemoteCommands+0x2c>
    30f2:	80 e0       	ldi	r24, 0x00	; 0
    30f4:	92 e0       	ldi	r25, 0x02	; 2
    30f6:	90 93 ca 02 	sts	0x02CA, r25
    30fa:	80 93 c9 02 	sts	0x02C9, r24
    30fe:	80 91 cb 02 	lds	r24, 0x02CB
    3102:	90 91 cc 02 	lds	r25, 0x02CC
	               	break;

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
    3106:	20 e0       	ldi	r18, 0x00	; 0
    3108:	32 e0       	ldi	r19, 0x02	; 2
    310a:	6f ce       	rjmp	.-802    	; 0x2dea <handleIRRemoteCommands+0x38>
	               	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
					break;

	           	case 0:	// colors
				case 50:
					colorState = (colorState+1)%5;
    310c:	80 91 f7 03 	lds	r24, 0x03F7
    3110:	90 e0       	ldi	r25, 0x00	; 0
    3112:	01 96       	adiw	r24, 0x01	; 1
    3114:	65 e0       	ldi	r22, 0x05	; 5
    3116:	70 e0       	ldi	r23, 0x00	; 0
    3118:	0e 94 07 49 	call	0x920e	; 0x920e <__divmodhi4>
    311c:	80 93 f7 03 	sts	0x03F7, r24

					if(colorState==0) {			// turn on blue and off all IRs
    3120:	88 23       	and	r24, r24
    3122:	11 f5       	brne	.+68     	; 0x3168 <handleIRRemoteCommands+0x3b6>
						LED_IR1_HIGH;
    3124:	44 9a       	sbi	0x08, 4	; 8
						LED_IR2_HIGH;
    3126:	45 9a       	sbi	0x08, 5	; 8
						pwm_blue = 0;
    3128:	10 92 0e 02 	sts	0x020E, r1
						pwm_green = MAX_LEDS_PWM;
    312c:	8f ef       	ldi	r24, 0xFF	; 255
    312e:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = MAX_LEDS_PWM;
    3132:	80 93 0c 02 	sts	0x020C, r24
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					}

					updateRedLed(pwm_red);
    3136:	0e 94 c5 3d 	call	0x7b8a	; 0x7b8a <updateRedLed>
					updateGreenLed(pwm_green);
    313a:	80 91 0d 02 	lds	r24, 0x020D
    313e:	0e 94 d9 3d 	call	0x7bb2	; 0x7bb2 <updateGreenLed>
					updateBlueLed(pwm_blue);
    3142:	80 91 0e 02 	lds	r24, 0x020E
    3146:	0e 94 ed 3d 	call	0x7bda	; 0x7bda <updateBlueLed>
    314a:	20 91 c9 02 	lds	r18, 0x02C9
    314e:	30 91 ca 02 	lds	r19, 0x02CA
    3152:	80 91 cb 02 	lds	r24, 0x02CB
    3156:	90 91 cc 02 	lds	r25, 0x02CC

	               	break;
    315a:	45 ce       	rjmp	.-886    	; 0x2de6 <handleIRRemoteCommands+0x34>

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
				speedr = pwm_right_desired;
    315c:	30 95       	com	r19
    315e:	21 95       	neg	r18
    3160:	3f 4f       	sbci	r19, 0xFF	; 255
    3162:	43 ce       	rjmp	.-890    	; 0x2dea <handleIRRemoteCommands+0x38>
					}
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    3164:	c9 01       	movw	r24, r18
    3166:	91 cf       	rjmp	.-222    	; 0x308a <handleIRRemoteCommands+0x2d8>
						LED_IR1_HIGH;
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
    3168:	81 30       	cpi	r24, 0x01	; 1
    316a:	91 f0       	breq	.+36     	; 0x3190 <handleIRRemoteCommands+0x3de>
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = 0;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==2) {	// turn on red and on all IRs
    316c:	82 30       	cpi	r24, 0x02	; 2
    316e:	a1 f1       	breq	.+104    	; 0x31d8 <handleIRRemoteCommands+0x426>
						LED_IR1_LOW;
						LED_IR2_LOW;
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = 0;
					} else if(colorState==3) {	// turn on white
    3170:	83 30       	cpi	r24, 0x03	; 3
    3172:	e9 f1       	breq	.+122    	; 0x31ee <handleIRRemoteCommands+0x43c>
						pwm_blue = 0;
						pwm_green = 0;
						pwm_red = 0;
					} else if(colorState==4) {	// turn off all leds
						pwm_blue = MAX_LEDS_PWM;
    3174:	8f ef       	ldi	r24, 0xFF	; 255
    3176:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = MAX_LEDS_PWM;
    317a:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = MAX_LEDS_PWM;
    317e:	80 93 0c 02 	sts	0x020C, r24
    3182:	d9 cf       	rjmp	.-78     	; 0x3136 <handleIRRemoteCommands+0x384>
						case 2:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 1;
							break;
						case 3:
							obstacleAvoidanceEnabled = 1;
    3184:	81 e0       	ldi	r24, 0x01	; 1
    3186:	80 93 3a 04 	sts	0x043A, r24
							cliffAvoidanceEnabled = 1;
    318a:	80 93 3b 04 	sts	0x043B, r24
    318e:	23 ce       	rjmp	.-954    	; 0x2dd6 <handleIRRemoteCommands+0x24>
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
						pwm_blue = MAX_LEDS_PWM;
    3190:	8f ef       	ldi	r24, 0xFF	; 255
    3192:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = 0;
    3196:	10 92 0d 02 	sts	0x020D, r1
						pwm_red = MAX_LEDS_PWM;
    319a:	80 93 0c 02 	sts	0x020C, r24
    319e:	cb cf       	rjmp	.-106    	; 0x3136 <handleIRRemoteCommands+0x384>
				case 5:	// stop motors
				case 51:
					pwm_right_desired = 0;
					pwm_left_desired = 0;
					if(currentSelector == 8) {
						calibrateSensors();
    31a0:	0e 94 bd 40 	call	0x817a	; 0x817a <calibrateSensors>
						proximityResult[8] = 1023;	// because the first time this value could be low after calibration
    31a4:	8f ef       	ldi	r24, 0xFF	; 255
    31a6:	93 e0       	ldi	r25, 0x03	; 3
    31a8:	90 93 3a 02 	sts	0x023A, r25
    31ac:	80 93 39 02 	sts	0x0239, r24
						proximityResult[11] = 1023;	// and in that case a false black line will be detected
    31b0:	90 93 40 02 	sts	0x0240, r25
    31b4:	80 93 3f 02 	sts	0x023F, r24
						calibState = 0;
    31b8:	10 92 83 08 	sts	0x0883, r1
						calibVelIndex = 1;
    31bc:	81 e0       	ldi	r24, 0x01	; 1
    31be:	80 93 7b 07 	sts	0x077B, r24
						calibrateOdomFlag = 1;
    31c2:	80 93 e0 04 	sts	0x04E0, r24
    31c6:	20 91 c9 02 	lds	r18, 0x02C9
    31ca:	30 91 ca 02 	lds	r19, 0x02CA
    31ce:	80 91 cb 02 	lds	r24, 0x02CB
    31d2:	90 91 cc 02 	lds	r25, 0x02CC
    31d6:	07 ce       	rjmp	.-1010   	; 0x2de6 <handleIRRemoteCommands+0x34>
					} else if(colorState==1) {	// turn on green
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = 0;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==2) {	// turn on red and on all IRs
						LED_IR1_LOW;
    31d8:	44 98       	cbi	0x08, 4	; 8
						LED_IR2_LOW;
    31da:	45 98       	cbi	0x08, 5	; 8
						pwm_blue = MAX_LEDS_PWM;
    31dc:	8f ef       	ldi	r24, 0xFF	; 255
    31de:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = MAX_LEDS_PWM;
    31e2:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = 0;
    31e6:	10 92 0c 02 	sts	0x020C, r1
    31ea:	80 e0       	ldi	r24, 0x00	; 0
    31ec:	a4 cf       	rjmp	.-184    	; 0x3136 <handleIRRemoteCommands+0x384>
					} else if(colorState==3) {	// turn on white
						pwm_blue = 0;
    31ee:	10 92 0e 02 	sts	0x020E, r1
						pwm_green = 0;
    31f2:	10 92 0d 02 	sts	0x020D, r1
						pwm_red = 0;
    31f6:	10 92 0c 02 	sts	0x020C, r1
    31fa:	80 e0       	ldi	r24, 0x00	; 0
    31fc:	9c cf       	rjmp	.-200    	; 0x3136 <handleIRRemoteCommands+0x384>

000031fe <init_speed_control>:
	//d_speed_control = 5;
	//i_speed_control = 10;
	//i_limit_speed_control = 3200;
	//k_ff_speed_control_left = INIT_KFF;
	//k_ff_speed_control_right = INIT_KFF;
}
    31fe:	08 95       	ret

00003200 <start_vertical_speed_control_left>:

void start_vertical_speed_control_left(signed int *pwm_left) {
    3200:	cf 92       	push	r12
    3202:	df 92       	push	r13
    3204:	ef 92       	push	r14
    3206:	ff 92       	push	r15
    3208:	0f 93       	push	r16
    320a:	1f 93       	push	r17
    320c:	cf 93       	push	r28
    320e:	df 93       	push	r29
    3210:	fc 01       	movw	r30, r24
	
	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).
	
	if(*pwm_left==0) {
    3212:	80 81       	ld	r24, Z
    3214:	91 81       	ldd	r25, Z+1	; 0x01
    3216:	00 97       	sbiw	r24, 0x00	; 0
    3218:	09 f4       	brne	.+2      	; 0x321c <start_vertical_speed_control_left+0x1c>
    321a:	f7 c0       	rjmp	.+494    	; 0x340a <start_vertical_speed_control_left+0x20a>
		delta_left_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    321c:	20 91 0c 04 	lds	r18, 0x040C
    3220:	30 91 0d 04 	lds	r19, 0x040D
    3224:	41 e0       	ldi	r20, 0x01	; 1
    3226:	2e 30       	cpi	r18, 0x0E	; 14
    3228:	34 07       	cpc	r19, r20
    322a:	0c f4       	brge	.+2      	; 0x322e <start_vertical_speed_control_left+0x2e>
    322c:	c7 c0       	rjmp	.+398    	; 0x33bc <start_vertical_speed_control_left+0x1bc>
		if(*pwm_left > 0) {
    322e:	18 16       	cp	r1, r24
    3230:	19 06       	cpc	r1, r25
    3232:	0c f0       	brlt	.+2      	; 0x3236 <start_vertical_speed_control_left+0x36>
    3234:	68 c1       	rjmp	.+720    	; 0x3506 <start_vertical_speed_control_left+0x306>
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
    3236:	88 e6       	ldi	r24, 0x68	; 104
    3238:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    323a:	82 1b       	sub	r24, r18
    323c:	93 0b       	sbc	r25, r19
    323e:	95 95       	asr	r25
    3240:	87 95       	ror	r24
    3242:	95 95       	asr	r25
    3244:	87 95       	ror	r24
    3246:	29 e1       	ldi	r18, 0x19	; 25
    3248:	30 e0       	ldi	r19, 0x00	; 0
    324a:	28 1b       	sub	r18, r24
    324c:	39 0b       	sbc	r19, r25
    324e:	30 93 04 02 	sts	0x0204, r19
    3252:	20 93 03 02 	sts	0x0203, r18
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
		}
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    3256:	c0 91 e3 04 	lds	r28, 0x04E3
    325a:	d0 91 e4 04 	lds	r29, 0x04E4
    325e:	d0 93 35 08 	sts	0x0835, r29
    3262:	c0 93 34 08 	sts	0x0834, r28
	if(*pwm_left >= 0) {
    3266:	80 81       	ld	r24, Z
    3268:	91 81       	ldd	r25, Z+1	; 0x01
    326a:	97 fd       	sbrc	r25, 7
    326c:	2e c1       	rjmp	.+604    	; 0x34ca <start_vertical_speed_control_left+0x2ca>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    326e:	20 91 c1 02 	lds	r18, 0x02C1
    3272:	30 91 c2 02 	lds	r19, 0x02C2
    3276:	dc 01       	movw	r26, r24
    3278:	a2 1b       	sub	r26, r18
    327a:	b3 0b       	sbc	r27, r19
    327c:	b0 93 e4 04 	sts	0x04E4, r27
    3280:	a0 93 e3 04 	sts	0x04E3, r26
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;
    3284:	80 91 d9 02 	lds	r24, 0x02D9
    3288:	90 91 da 02 	lds	r25, 0x02DA
    328c:	8a 0f       	add	r24, r26
    328e:	9b 1f       	adc	r25, r27
    3290:	90 93 da 02 	sts	0x02DA, r25
    3294:	80 93 d9 02 	sts	0x02D9, r24

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
    3298:	66 e0       	ldi	r22, 0x06	; 6
    329a:	81 34       	cpi	r24, 0x41	; 65
    329c:	96 07       	cpc	r25, r22
    329e:	0c f4       	brge	.+2      	; 0x32a2 <start_vertical_speed_control_left+0xa2>
    32a0:	cb c0       	rjmp	.+406    	; 0x3438 <start_vertical_speed_control_left+0x238>
		delta_left_speed_sum = I_LIMIT_VERTICAL;
    32a2:	80 e4       	ldi	r24, 0x40	; 64
    32a4:	96 e0       	ldi	r25, 0x06	; 6
    32a6:	90 93 da 02 	sts	0x02DA, r25
    32aa:	80 93 d9 02 	sts	0x02D9, r24
    32ae:	10 ec       	ldi	r17, 0xC0	; 192
    32b0:	c1 2e       	mov	r12, r17
    32b2:	12 e1       	ldi	r17, 0x12	; 18
    32b4:	d1 2e       	mov	r13, r17
    32b6:	e1 2c       	mov	r14, r1
    32b8:	f1 2c       	mov	r15, r1
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_left_speed_controller = (signed long int)(k_ff_speed_control_left*(*pwm_left));
    32ba:	00 81       	ld	r16, Z
    32bc:	11 81       	ldd	r17, Z+1	; 0x01
	pwm_left_speed_controller += (signed long int)(P_VERTICAL * delta_left_speed_current);
    32be:	9d 01       	movw	r18, r26
    32c0:	22 0f       	add	r18, r18
    32c2:	33 1f       	adc	r19, r19
    32c4:	2a 0f       	add	r18, r26
    32c6:	3b 1f       	adc	r19, r27
    32c8:	22 0f       	add	r18, r18
    32ca:	33 1f       	adc	r19, r19
    32cc:	22 0f       	add	r18, r18
    32ce:	33 1f       	adc	r19, r19
    32d0:	22 0f       	add	r18, r18
    32d2:	33 1f       	adc	r19, r19
    32d4:	2a 0f       	add	r18, r26
    32d6:	3b 1f       	adc	r19, r27
    32d8:	44 27       	eor	r20, r20
    32da:	37 fd       	sbrc	r19, 7
    32dc:	40 95       	com	r20
    32de:	54 2f       	mov	r21, r20
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_left_speed_controller = (signed long int)(k_ff_speed_control_left*(*pwm_left));
    32e0:	80 91 03 02 	lds	r24, 0x0203
    32e4:	90 91 04 02 	lds	r25, 0x0204
    32e8:	08 9f       	mul	r16, r24
    32ea:	b0 01       	movw	r22, r0
    32ec:	09 9f       	mul	r16, r25
    32ee:	70 0d       	add	r23, r0
    32f0:	18 9f       	mul	r17, r24
    32f2:	70 0d       	add	r23, r0
    32f4:	11 24       	eor	r1, r1
    32f6:	88 27       	eor	r24, r24
    32f8:	77 fd       	sbrc	r23, 7
    32fa:	80 95       	com	r24
    32fc:	98 2f       	mov	r25, r24
	pwm_left_speed_controller += (signed long int)(P_VERTICAL * delta_left_speed_current);
    32fe:	26 0f       	add	r18, r22
    3300:	37 1f       	adc	r19, r23
    3302:	48 1f       	adc	r20, r24
    3304:	59 1f       	adc	r21, r25
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
    3306:	ac 1b       	sub	r26, r28
    3308:	bd 0b       	sbc	r27, r29
    330a:	aa 0f       	add	r26, r26
    330c:	bb 1f       	adc	r27, r27
    330e:	bd 01       	movw	r22, r26
    3310:	cb 01       	movw	r24, r22
    3312:	aa 27       	eor	r26, r26
    3314:	97 fd       	sbrc	r25, 7
    3316:	a0 95       	com	r26
    3318:	ba 2f       	mov	r27, r26
    331a:	28 0f       	add	r18, r24
    331c:	39 1f       	adc	r19, r25
    331e:	4a 1f       	adc	r20, r26
    3320:	5b 1f       	adc	r21, r27
	pwm_left_speed_controller += (signed long int)(I_VERTICAL*delta_left_speed_sum);
    3322:	2c 0d       	add	r18, r12
    3324:	3d 1d       	adc	r19, r13
    3326:	4e 1d       	adc	r20, r14
    3328:	5f 1d       	adc	r21, r15
    332a:	20 93 d5 02 	sts	0x02D5, r18
    332e:	30 93 d6 02 	sts	0x02D6, r19
    3332:	40 93 d7 02 	sts	0x02D7, r20
    3336:	50 93 d8 02 	sts	0x02D8, r21

	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    333a:	57 fd       	sbrc	r21, 7
    333c:	9d c0       	rjmp	.+314    	; 0x3478 <start_vertical_speed_control_left+0x278>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    333e:	12 16       	cp	r1, r18
    3340:	13 06       	cpc	r1, r19
    3342:	14 06       	cpc	r1, r20
    3344:	15 06       	cpc	r1, r21
    3346:	0c f0       	brlt	.+2      	; 0x334a <start_vertical_speed_control_left+0x14a>
    3348:	a4 c0       	rjmp	.+328    	; 0x3492 <start_vertical_speed_control_left+0x292>
    334a:	17 fd       	sbrc	r17, 7
    334c:	c9 c0       	rjmp	.+402    	; 0x34e0 <start_vertical_speed_control_left+0x2e0>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    334e:	21 3c       	cpi	r18, 0xC1	; 193
    3350:	7d e5       	ldi	r23, 0x5D	; 93
    3352:	37 07       	cpc	r19, r23
    3354:	70 e0       	ldi	r23, 0x00	; 0
    3356:	47 07       	cpc	r20, r23
    3358:	70 e0       	ldi	r23, 0x00	; 0
    335a:	57 07       	cpc	r21, r23
    335c:	0c f4       	brge	.+2      	; 0x3360 <start_vertical_speed_control_left+0x160>
    335e:	99 c0       	rjmp	.+306    	; 0x3492 <start_vertical_speed_control_left+0x292>
    3360:	80 ec       	ldi	r24, 0xC0	; 192
    3362:	9d e5       	ldi	r25, 0x5D	; 93
    3364:	a0 e0       	ldi	r26, 0x00	; 0
    3366:	b0 e0       	ldi	r27, 0x00	; 0
    3368:	80 93 d5 02 	sts	0x02D5, r24
    336c:	90 93 d6 02 	sts	0x02D6, r25
    3370:	a0 93 d7 02 	sts	0x02D7, r26
    3374:	b0 93 d8 02 	sts	0x02D8, r27
    3378:	2c ed       	ldi	r18, 0xDC	; 220
    337a:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = (signed int)(pwm_left_speed_controller>>4);
    337c:	31 83       	std	Z+1, r19	; 0x01
    337e:	20 83       	st	Z, r18

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
    3380:	80 91 bb 02 	lds	r24, 0x02BB
    3384:	90 91 bc 02 	lds	r25, 0x02BC
    3388:	18 16       	cp	r1, r24
    338a:	19 06       	cpc	r1, r25
    338c:	0c f0       	brlt	.+2      	; 0x3390 <start_vertical_speed_control_left+0x190>
    338e:	98 c0       	rjmp	.+304    	; 0x34c0 <start_vertical_speed_control_left+0x2c0>
		*pwm_left += 1;
    3390:	2f 5f       	subi	r18, 0xFF	; 255
    3392:	3f 4f       	sbci	r19, 0xFF	; 255
    3394:	31 83       	std	Z+1, r19	; 0x01
    3396:	20 83       	st	Z, r18
	} else {
		*pwm_left -= 1;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    3398:	42 e0       	ldi	r20, 0x02	; 2
    339a:	21 30       	cpi	r18, 0x01	; 1
    339c:	34 07       	cpc	r19, r20
    339e:	0c f4       	brge	.+2      	; 0x33a2 <start_vertical_speed_control_left+0x1a2>
    33a0:	41 c0       	rjmp	.+130    	; 0x3424 <start_vertical_speed_control_left+0x224>
    33a2:	80 e0       	ldi	r24, 0x00	; 0
    33a4:	92 e0       	ldi	r25, 0x02	; 2
    33a6:	91 83       	std	Z+1, r25	; 0x01
    33a8:	80 83       	st	Z, r24
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);


}
    33aa:	df 91       	pop	r29
    33ac:	cf 91       	pop	r28
    33ae:	1f 91       	pop	r17
    33b0:	0f 91       	pop	r16
    33b2:	ff 90       	pop	r15
    33b4:	ef 90       	pop	r14
    33b6:	df 90       	pop	r13
    33b8:	cf 90       	pop	r12
    33ba:	08 95       	ret
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    33bc:	24 3b       	cpi	r18, 0xB4	; 180
    33be:	31 05       	cpc	r19, r1
    33c0:	94 f4       	brge	.+36     	; 0x33e6 <start_vertical_speed_control_left+0x1e6>
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
    33c2:	2a 35       	cpi	r18, 0x5A	; 90
    33c4:	31 05       	cpc	r19, r1
    33c6:	7c f4       	brge	.+30     	; 0x33e6 <start_vertical_speed_control_left+0x1e6>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
    33c8:	18 16       	cp	r1, r24
    33ca:	19 06       	cpc	r1, r25
    33cc:	0c f0       	brlt	.+2      	; 0x33d0 <start_vertical_speed_control_left+0x1d0>
    33ce:	a9 c0       	rjmp	.+338    	; 0x3522 <start_vertical_speed_control_left+0x322>
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
    33d0:	35 95       	asr	r19
    33d2:	27 95       	ror	r18
    33d4:	35 95       	asr	r19
    33d6:	27 95       	ror	r18
    33d8:	27 5e       	subi	r18, 0xE7	; 231
    33da:	3f 4f       	sbci	r19, 0xFF	; 255
    33dc:	30 93 04 02 	sts	0x0204, r19
    33e0:	20 93 03 02 	sts	0x0203, r18
    33e4:	38 cf       	rjmp	.-400    	; 0x3256 <start_vertical_speed_control_left+0x56>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
    33e6:	18 16       	cp	r1, r24
    33e8:	19 06       	cpc	r1, r25
    33ea:	0c f0       	brlt	.+2      	; 0x33ee <start_vertical_speed_control_left+0x1ee>
    33ec:	42 c0       	rjmp	.+132    	; 0x3472 <start_vertical_speed_control_left+0x272>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
    33ee:	84 eb       	ldi	r24, 0xB4	; 180
    33f0:	90 e0       	ldi	r25, 0x00	; 0
    33f2:	82 1b       	sub	r24, r18
    33f4:	93 0b       	sbc	r25, r19
    33f6:	95 95       	asr	r25
    33f8:	87 95       	ror	r24
    33fa:	95 95       	asr	r25
    33fc:	87 95       	ror	r24
    33fe:	49 96       	adiw	r24, 0x19	; 25
    3400:	90 93 04 02 	sts	0x0204, r25
    3404:	80 93 03 02 	sts	0x0203, r24
    3408:	26 cf       	rjmp	.-436    	; 0x3256 <start_vertical_speed_control_left+0x56>
void start_vertical_speed_control_left(signed int *pwm_left) {
	
	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).
	
	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    340a:	10 92 da 02 	sts	0x02DA, r1
    340e:	10 92 d9 02 	sts	0x02D9, r1
		delta_left_speed_current = 0;
    3412:	10 92 e4 04 	sts	0x04E4, r1
    3416:	10 92 e3 04 	sts	0x04E3, r1
		delta_left_speed_prev = 0;
    341a:	10 92 35 08 	sts	0x0835, r1
    341e:	10 92 34 08 	sts	0x0834, r1
		return;
    3422:	c3 cf       	rjmp	.-122    	; 0x33aa <start_vertical_speed_control_left+0x1aa>
	} else {
		*pwm_left -= 1;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    3424:	6e ef       	ldi	r22, 0xFE	; 254
    3426:	20 30       	cpi	r18, 0x00	; 0
    3428:	36 07       	cpc	r19, r22
    342a:	0c f0       	brlt	.+2      	; 0x342e <start_vertical_speed_control_left+0x22e>
    342c:	be cf       	rjmp	.-132    	; 0x33aa <start_vertical_speed_control_left+0x1aa>
    342e:	80 e0       	ldi	r24, 0x00	; 0
    3430:	9e ef       	ldi	r25, 0xFE	; 254
    3432:	91 83       	std	Z+1, r25	; 0x01
    3434:	80 83       	st	Z, r24
    3436:	b9 cf       	rjmp	.-142    	; 0x33aa <start_vertical_speed_control_left+0x1aa>
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    3438:	79 ef       	ldi	r23, 0xF9	; 249
    343a:	80 3c       	cpi	r24, 0xC0	; 192
    343c:	97 07       	cpc	r25, r23
    343e:	7c f4       	brge	.+30     	; 0x345e <start_vertical_speed_control_left+0x25e>
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
    3440:	80 ec       	ldi	r24, 0xC0	; 192
    3442:	99 ef       	ldi	r25, 0xF9	; 249
    3444:	90 93 da 02 	sts	0x02DA, r25
    3448:	80 93 d9 02 	sts	0x02D9, r24
    344c:	60 e4       	ldi	r22, 0x40	; 64
    344e:	c6 2e       	mov	r12, r22
    3450:	6d ee       	ldi	r22, 0xED	; 237
    3452:	d6 2e       	mov	r13, r22
    3454:	6f ef       	ldi	r22, 0xFF	; 255
    3456:	e6 2e       	mov	r14, r22
    3458:	6f ef       	ldi	r22, 0xFF	; 255
    345a:	f6 2e       	mov	r15, r22
    345c:	2e cf       	rjmp	.-420    	; 0x32ba <start_vertical_speed_control_left+0xba>
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    345e:	6c 01       	movw	r12, r24
    3460:	cc 0c       	add	r12, r12
    3462:	dd 1c       	adc	r13, r13
    3464:	c8 0e       	add	r12, r24
    3466:	d9 1e       	adc	r13, r25
    3468:	ee 24       	eor	r14, r14
    346a:	d7 fc       	sbrc	r13, 7
    346c:	e0 94       	com	r14
    346e:	fe 2c       	mov	r15, r14
    3470:	24 cf       	rjmp	.-440    	; 0x32ba <start_vertical_speed_control_left+0xba>
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    3472:	84 eb       	ldi	r24, 0xB4	; 180
    3474:	90 e0       	ldi	r25, 0x00	; 0
    3476:	e1 ce       	rjmp	.-574    	; 0x323a <start_vertical_speed_control_left+0x3a>
	pwm_left_speed_controller += (signed long int)(P_VERTICAL * delta_left_speed_current);
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
	pwm_left_speed_controller += (signed long int)(I_VERTICAL*delta_left_speed_sum);

	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    3478:	17 fd       	sbrc	r17, 7
    347a:	0b c0       	rjmp	.+22     	; 0x3492 <start_vertical_speed_control_left+0x292>
		pwm_left_speed_controller = 0;
    347c:	10 92 d5 02 	sts	0x02D5, r1
    3480:	10 92 d6 02 	sts	0x02D6, r1
    3484:	10 92 d7 02 	sts	0x02D7, r1
    3488:	10 92 d8 02 	sts	0x02D8, r1
    348c:	20 e0       	ldi	r18, 0x00	; 0
    348e:	30 e0       	ldi	r19, 0x00	; 0
    3490:	a9 01       	movw	r20, r18
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    3492:	20 34       	cpi	r18, 0x40	; 64
    3494:	82 ea       	ldi	r24, 0xA2	; 162
    3496:	38 07       	cpc	r19, r24
    3498:	8f ef       	ldi	r24, 0xFF	; 255
    349a:	48 07       	cpc	r20, r24
    349c:	8f ef       	ldi	r24, 0xFF	; 255
    349e:	58 07       	cpc	r21, r24
    34a0:	54 f5       	brge	.+84     	; 0x34f6 <start_vertical_speed_control_left+0x2f6>
    34a2:	80 e4       	ldi	r24, 0x40	; 64
    34a4:	92 ea       	ldi	r25, 0xA2	; 162
    34a6:	af ef       	ldi	r26, 0xFF	; 255
    34a8:	bf ef       	ldi	r27, 0xFF	; 255
    34aa:	80 93 d5 02 	sts	0x02D5, r24
    34ae:	90 93 d6 02 	sts	0x02D6, r25
    34b2:	a0 93 d7 02 	sts	0x02D7, r26
    34b6:	b0 93 d8 02 	sts	0x02D8, r27
    34ba:	24 e2       	ldi	r18, 0x24	; 36
    34bc:	3a ef       	ldi	r19, 0xFA	; 250
    34be:	5e cf       	rjmp	.-324    	; 0x337c <start_vertical_speed_control_left+0x17c>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
		*pwm_left += 1;
	} else {
		*pwm_left -= 1;
    34c0:	21 50       	subi	r18, 0x01	; 1
    34c2:	30 40       	sbci	r19, 0x00	; 0
    34c4:	31 83       	std	Z+1, r19	; 0x01
    34c6:	20 83       	st	Z, r18
    34c8:	67 cf       	rjmp	.-306    	; 0x3398 <start_vertical_speed_control_left+0x198>
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    34ca:	a0 91 c1 02 	lds	r26, 0x02C1
    34ce:	b0 91 c2 02 	lds	r27, 0x02C2
    34d2:	a8 0f       	add	r26, r24
    34d4:	b9 1f       	adc	r27, r25
    34d6:	b0 93 e4 04 	sts	0x04E4, r27
    34da:	a0 93 e3 04 	sts	0x04E3, r26
    34de:	d2 ce       	rjmp	.-604    	; 0x3284 <start_vertical_speed_control_left+0x84>
	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    34e0:	10 92 d5 02 	sts	0x02D5, r1
    34e4:	10 92 d6 02 	sts	0x02D6, r1
    34e8:	10 92 d7 02 	sts	0x02D7, r1
    34ec:	10 92 d8 02 	sts	0x02D8, r1
    34f0:	20 e0       	ldi	r18, 0x00	; 0
    34f2:	30 e0       	ldi	r19, 0x00	; 0
    34f4:	a9 01       	movw	r20, r18
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    34f6:	84 e0       	ldi	r24, 0x04	; 4
    34f8:	55 95       	asr	r21
    34fa:	47 95       	ror	r20
    34fc:	37 95       	ror	r19
    34fe:	27 95       	ror	r18
    3500:	8a 95       	dec	r24
    3502:	d1 f7       	brne	.-12     	; 0x34f8 <start_vertical_speed_control_left+0x2f8>
    3504:	3b cf       	rjmp	.-394    	; 0x337c <start_vertical_speed_control_left+0x17c>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
    3506:	88 e6       	ldi	r24, 0x68	; 104
    3508:	91 e0       	ldi	r25, 0x01	; 1
    350a:	82 1b       	sub	r24, r18
    350c:	93 0b       	sbc	r25, r19
    350e:	95 95       	asr	r25
    3510:	87 95       	ror	r24
    3512:	95 95       	asr	r25
    3514:	87 95       	ror	r24
    3516:	49 96       	adiw	r24, 0x19	; 25
    3518:	90 93 04 02 	sts	0x0204, r25
    351c:	80 93 03 02 	sts	0x0203, r24
    3520:	9a ce       	rjmp	.-716    	; 0x3256 <start_vertical_speed_control_left+0x56>
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
    3522:	35 95       	asr	r19
    3524:	27 95       	ror	r18
    3526:	35 95       	asr	r19
    3528:	27 95       	ror	r18
    352a:	89 e1       	ldi	r24, 0x19	; 25
    352c:	90 e0       	ldi	r25, 0x00	; 0
    352e:	82 1b       	sub	r24, r18
    3530:	93 0b       	sbc	r25, r19
    3532:	90 93 04 02 	sts	0x0204, r25
    3536:	80 93 03 02 	sts	0x0203, r24
    353a:	8d ce       	rjmp	.-742    	; 0x3256 <start_vertical_speed_control_left+0x56>

0000353c <start_vertical_speed_control_right>:


}


void start_vertical_speed_control_right(signed int *pwm_right) {
    353c:	cf 92       	push	r12
    353e:	df 92       	push	r13
    3540:	ef 92       	push	r14
    3542:	ff 92       	push	r15
    3544:	0f 93       	push	r16
    3546:	1f 93       	push	r17
    3548:	cf 93       	push	r28
    354a:	df 93       	push	r29
    354c:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    354e:	80 81       	ld	r24, Z
    3550:	91 81       	ldd	r25, Z+1	; 0x01
    3552:	00 97       	sbiw	r24, 0x00	; 0
    3554:	09 f4       	brne	.+2      	; 0x3558 <start_vertical_speed_control_right+0x1c>
    3556:	f7 c0       	rjmp	.+494    	; 0x3746 <start_vertical_speed_control_right+0x20a>
		delta_right_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    3558:	20 91 0c 04 	lds	r18, 0x040C
    355c:	30 91 0d 04 	lds	r19, 0x040D
    3560:	41 e0       	ldi	r20, 0x01	; 1
    3562:	2e 30       	cpi	r18, 0x0E	; 14
    3564:	34 07       	cpc	r19, r20
    3566:	0c f4       	brge	.+2      	; 0x356a <start_vertical_speed_control_right+0x2e>
    3568:	c7 c0       	rjmp	.+398    	; 0x36f8 <start_vertical_speed_control_right+0x1bc>
		if(*pwm_right > 0) {
    356a:	18 16       	cp	r1, r24
    356c:	19 06       	cpc	r1, r25
    356e:	0c f0       	brlt	.+2      	; 0x3572 <start_vertical_speed_control_right+0x36>
    3570:	68 c1       	rjmp	.+720    	; 0x3842 <start_vertical_speed_control_right+0x306>
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
    3572:	88 e6       	ldi	r24, 0x68	; 104
    3574:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    3576:	82 1b       	sub	r24, r18
    3578:	93 0b       	sbc	r25, r19
    357a:	95 95       	asr	r25
    357c:	87 95       	ror	r24
    357e:	95 95       	asr	r25
    3580:	87 95       	ror	r24
    3582:	29 e1       	ldi	r18, 0x19	; 25
    3584:	30 e0       	ldi	r19, 0x00	; 0
    3586:	28 1b       	sub	r18, r24
    3588:	39 0b       	sbc	r19, r25
    358a:	30 93 06 02 	sts	0x0206, r19
    358e:	20 93 05 02 	sts	0x0205, r18
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
		}
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    3592:	c0 91 53 08 	lds	r28, 0x0853
    3596:	d0 91 54 08 	lds	r29, 0x0854
    359a:	d0 93 7d 07 	sts	0x077D, r29
    359e:	c0 93 7c 07 	sts	0x077C, r28
	if(*pwm_right >= 0) {
    35a2:	80 81       	ld	r24, Z
    35a4:	91 81       	ldd	r25, Z+1	; 0x01
    35a6:	97 fd       	sbrc	r25, 7
    35a8:	2e c1       	rjmp	.+604    	; 0x3806 <start_vertical_speed_control_right+0x2ca>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    35aa:	20 91 c3 02 	lds	r18, 0x02C3
    35ae:	30 91 c4 02 	lds	r19, 0x02C4
    35b2:	dc 01       	movw	r26, r24
    35b4:	a2 1b       	sub	r26, r18
    35b6:	b3 0b       	sbc	r27, r19
    35b8:	b0 93 54 08 	sts	0x0854, r27
    35bc:	a0 93 53 08 	sts	0x0853, r26
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    35c0:	80 91 db 02 	lds	r24, 0x02DB
    35c4:	90 91 dc 02 	lds	r25, 0x02DC
    35c8:	8a 0f       	add	r24, r26
    35ca:	9b 1f       	adc	r25, r27
    35cc:	90 93 dc 02 	sts	0x02DC, r25
    35d0:	80 93 db 02 	sts	0x02DB, r24

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
    35d4:	66 e0       	ldi	r22, 0x06	; 6
    35d6:	81 34       	cpi	r24, 0x41	; 65
    35d8:	96 07       	cpc	r25, r22
    35da:	0c f4       	brge	.+2      	; 0x35de <start_vertical_speed_control_right+0xa2>
    35dc:	cb c0       	rjmp	.+406    	; 0x3774 <start_vertical_speed_control_right+0x238>
		delta_right_speed_sum = I_LIMIT_VERTICAL;
    35de:	80 e4       	ldi	r24, 0x40	; 64
    35e0:	96 e0       	ldi	r25, 0x06	; 6
    35e2:	90 93 dc 02 	sts	0x02DC, r25
    35e6:	80 93 db 02 	sts	0x02DB, r24
    35ea:	40 ec       	ldi	r20, 0xC0	; 192
    35ec:	c4 2e       	mov	r12, r20
    35ee:	42 e1       	ldi	r20, 0x12	; 18
    35f0:	d4 2e       	mov	r13, r20
    35f2:	e1 2c       	mov	r14, r1
    35f4:	f1 2c       	mov	r15, r1
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_right_speed_controller = (signed long int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
    35f6:	00 81       	ld	r16, Z
    35f8:	11 81       	ldd	r17, Z+1	; 0x01
	pwm_right_speed_controller += (signed long int)(P_VERTICAL * delta_right_speed_current);
    35fa:	9d 01       	movw	r18, r26
    35fc:	22 0f       	add	r18, r18
    35fe:	33 1f       	adc	r19, r19
    3600:	2a 0f       	add	r18, r26
    3602:	3b 1f       	adc	r19, r27
    3604:	22 0f       	add	r18, r18
    3606:	33 1f       	adc	r19, r19
    3608:	22 0f       	add	r18, r18
    360a:	33 1f       	adc	r19, r19
    360c:	22 0f       	add	r18, r18
    360e:	33 1f       	adc	r19, r19
    3610:	2a 0f       	add	r18, r26
    3612:	3b 1f       	adc	r19, r27
    3614:	44 27       	eor	r20, r20
    3616:	37 fd       	sbrc	r19, 7
    3618:	40 95       	com	r20
    361a:	54 2f       	mov	r21, r20
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_right_speed_controller = (signed long int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
    361c:	80 91 05 02 	lds	r24, 0x0205
    3620:	90 91 06 02 	lds	r25, 0x0206
    3624:	08 9f       	mul	r16, r24
    3626:	b0 01       	movw	r22, r0
    3628:	09 9f       	mul	r16, r25
    362a:	70 0d       	add	r23, r0
    362c:	18 9f       	mul	r17, r24
    362e:	70 0d       	add	r23, r0
    3630:	11 24       	eor	r1, r1
    3632:	88 27       	eor	r24, r24
    3634:	77 fd       	sbrc	r23, 7
    3636:	80 95       	com	r24
    3638:	98 2f       	mov	r25, r24
	pwm_right_speed_controller += (signed long int)(P_VERTICAL * delta_right_speed_current);
    363a:	26 0f       	add	r18, r22
    363c:	37 1f       	adc	r19, r23
    363e:	48 1f       	adc	r20, r24
    3640:	59 1f       	adc	r21, r25
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
    3642:	ac 1b       	sub	r26, r28
    3644:	bd 0b       	sbc	r27, r29
    3646:	aa 0f       	add	r26, r26
    3648:	bb 1f       	adc	r27, r27
    364a:	bd 01       	movw	r22, r26
    364c:	cb 01       	movw	r24, r22
    364e:	aa 27       	eor	r26, r26
    3650:	97 fd       	sbrc	r25, 7
    3652:	a0 95       	com	r26
    3654:	ba 2f       	mov	r27, r26
    3656:	28 0f       	add	r18, r24
    3658:	39 1f       	adc	r19, r25
    365a:	4a 1f       	adc	r20, r26
    365c:	5b 1f       	adc	r21, r27
	pwm_right_speed_controller += (signed long int)(I_VERTICAL*delta_right_speed_sum);
    365e:	2c 0d       	add	r18, r12
    3660:	3d 1d       	adc	r19, r13
    3662:	4e 1d       	adc	r20, r14
    3664:	5f 1d       	adc	r21, r15
    3666:	20 93 d1 02 	sts	0x02D1, r18
    366a:	30 93 d2 02 	sts	0x02D2, r19
    366e:	40 93 d3 02 	sts	0x02D3, r20
    3672:	50 93 d4 02 	sts	0x02D4, r21

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    3676:	57 fd       	sbrc	r21, 7
    3678:	9d c0       	rjmp	.+314    	; 0x37b4 <start_vertical_speed_control_right+0x278>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    367a:	12 16       	cp	r1, r18
    367c:	13 06       	cpc	r1, r19
    367e:	14 06       	cpc	r1, r20
    3680:	15 06       	cpc	r1, r21
    3682:	0c f0       	brlt	.+2      	; 0x3686 <start_vertical_speed_control_right+0x14a>
    3684:	a4 c0       	rjmp	.+328    	; 0x37ce <start_vertical_speed_control_right+0x292>
    3686:	17 fd       	sbrc	r17, 7
    3688:	c9 c0       	rjmp	.+402    	; 0x381c <start_vertical_speed_control_right+0x2e0>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    368a:	21 3c       	cpi	r18, 0xC1	; 193
    368c:	7d e5       	ldi	r23, 0x5D	; 93
    368e:	37 07       	cpc	r19, r23
    3690:	70 e0       	ldi	r23, 0x00	; 0
    3692:	47 07       	cpc	r20, r23
    3694:	70 e0       	ldi	r23, 0x00	; 0
    3696:	57 07       	cpc	r21, r23
    3698:	0c f4       	brge	.+2      	; 0x369c <start_vertical_speed_control_right+0x160>
    369a:	99 c0       	rjmp	.+306    	; 0x37ce <start_vertical_speed_control_right+0x292>
    369c:	80 ec       	ldi	r24, 0xC0	; 192
    369e:	9d e5       	ldi	r25, 0x5D	; 93
    36a0:	a0 e0       	ldi	r26, 0x00	; 0
    36a2:	b0 e0       	ldi	r27, 0x00	; 0
    36a4:	80 93 d1 02 	sts	0x02D1, r24
    36a8:	90 93 d2 02 	sts	0x02D2, r25
    36ac:	a0 93 d3 02 	sts	0x02D3, r26
    36b0:	b0 93 d4 02 	sts	0x02D4, r27
    36b4:	2c ed       	ldi	r18, 0xDC	; 220
    36b6:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = (signed int)(pwm_right_speed_controller>>4);
    36b8:	31 83       	std	Z+1, r19	; 0x01
    36ba:	20 83       	st	Z, r18

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
    36bc:	80 91 b9 02 	lds	r24, 0x02B9
    36c0:	90 91 ba 02 	lds	r25, 0x02BA
    36c4:	18 16       	cp	r1, r24
    36c6:	19 06       	cpc	r1, r25
    36c8:	0c f0       	brlt	.+2      	; 0x36cc <start_vertical_speed_control_right+0x190>
    36ca:	98 c0       	rjmp	.+304    	; 0x37fc <start_vertical_speed_control_right+0x2c0>
		*pwm_right += 1;
    36cc:	2f 5f       	subi	r18, 0xFF	; 255
    36ce:	3f 4f       	sbci	r19, 0xFF	; 255
    36d0:	31 83       	std	Z+1, r19	; 0x01
    36d2:	20 83       	st	Z, r18
	} else {
		*pwm_right -= 1;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    36d4:	42 e0       	ldi	r20, 0x02	; 2
    36d6:	21 30       	cpi	r18, 0x01	; 1
    36d8:	34 07       	cpc	r19, r20
    36da:	0c f4       	brge	.+2      	; 0x36de <start_vertical_speed_control_right+0x1a2>
    36dc:	41 c0       	rjmp	.+130    	; 0x3760 <start_vertical_speed_control_right+0x224>
    36de:	80 e0       	ldi	r24, 0x00	; 0
    36e0:	92 e0       	ldi	r25, 0x02	; 2
    36e2:	91 83       	std	Z+1, r25	; 0x01
    36e4:	80 83       	st	Z, r24
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    36e6:	df 91       	pop	r29
    36e8:	cf 91       	pop	r28
    36ea:	1f 91       	pop	r17
    36ec:	0f 91       	pop	r16
    36ee:	ff 90       	pop	r15
    36f0:	ef 90       	pop	r14
    36f2:	df 90       	pop	r13
    36f4:	cf 90       	pop	r12
    36f6:	08 95       	ret
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    36f8:	24 3b       	cpi	r18, 0xB4	; 180
    36fa:	31 05       	cpc	r19, r1
    36fc:	94 f4       	brge	.+36     	; 0x3722 <start_vertical_speed_control_right+0x1e6>
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
    36fe:	2a 35       	cpi	r18, 0x5A	; 90
    3700:	31 05       	cpc	r19, r1
    3702:	7c f4       	brge	.+30     	; 0x3722 <start_vertical_speed_control_right+0x1e6>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
    3704:	18 16       	cp	r1, r24
    3706:	19 06       	cpc	r1, r25
    3708:	0c f0       	brlt	.+2      	; 0x370c <start_vertical_speed_control_right+0x1d0>
    370a:	a9 c0       	rjmp	.+338    	; 0x385e <start_vertical_speed_control_right+0x322>
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
    370c:	35 95       	asr	r19
    370e:	27 95       	ror	r18
    3710:	35 95       	asr	r19
    3712:	27 95       	ror	r18
    3714:	27 5e       	subi	r18, 0xE7	; 231
    3716:	3f 4f       	sbci	r19, 0xFF	; 255
    3718:	30 93 06 02 	sts	0x0206, r19
    371c:	20 93 05 02 	sts	0x0205, r18
    3720:	38 cf       	rjmp	.-400    	; 0x3592 <start_vertical_speed_control_right+0x56>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
    3722:	18 16       	cp	r1, r24
    3724:	19 06       	cpc	r1, r25
    3726:	0c f0       	brlt	.+2      	; 0x372a <start_vertical_speed_control_right+0x1ee>
    3728:	42 c0       	rjmp	.+132    	; 0x37ae <start_vertical_speed_control_right+0x272>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
    372a:	84 eb       	ldi	r24, 0xB4	; 180
    372c:	90 e0       	ldi	r25, 0x00	; 0
    372e:	82 1b       	sub	r24, r18
    3730:	93 0b       	sbc	r25, r19
    3732:	95 95       	asr	r25
    3734:	87 95       	ror	r24
    3736:	95 95       	asr	r25
    3738:	87 95       	ror	r24
    373a:	49 96       	adiw	r24, 0x19	; 25
    373c:	90 93 06 02 	sts	0x0206, r25
    3740:	80 93 05 02 	sts	0x0205, r24
    3744:	26 cf       	rjmp	.-436    	; 0x3592 <start_vertical_speed_control_right+0x56>
void start_vertical_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    3746:	10 92 dc 02 	sts	0x02DC, r1
    374a:	10 92 db 02 	sts	0x02DB, r1
		delta_right_speed_current = 0;
    374e:	10 92 54 08 	sts	0x0854, r1
    3752:	10 92 53 08 	sts	0x0853, r1
		delta_right_speed_prev = 0;
    3756:	10 92 7d 07 	sts	0x077D, r1
    375a:	10 92 7c 07 	sts	0x077C, r1
		return;
    375e:	c3 cf       	rjmp	.-122    	; 0x36e6 <start_vertical_speed_control_right+0x1aa>
	} else {
		*pwm_right -= 1;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    3760:	6e ef       	ldi	r22, 0xFE	; 254
    3762:	20 30       	cpi	r18, 0x00	; 0
    3764:	36 07       	cpc	r19, r22
    3766:	0c f0       	brlt	.+2      	; 0x376a <start_vertical_speed_control_right+0x22e>
    3768:	be cf       	rjmp	.-132    	; 0x36e6 <start_vertical_speed_control_right+0x1aa>
    376a:	80 e0       	ldi	r24, 0x00	; 0
    376c:	9e ef       	ldi	r25, 0xFE	; 254
    376e:	91 83       	std	Z+1, r25	; 0x01
    3770:	80 83       	st	Z, r24
    3772:	b9 cf       	rjmp	.-142    	; 0x36e6 <start_vertical_speed_control_right+0x1aa>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    3774:	79 ef       	ldi	r23, 0xF9	; 249
    3776:	80 3c       	cpi	r24, 0xC0	; 192
    3778:	97 07       	cpc	r25, r23
    377a:	7c f4       	brge	.+30     	; 0x379a <start_vertical_speed_control_right+0x25e>
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
    377c:	80 ec       	ldi	r24, 0xC0	; 192
    377e:	99 ef       	ldi	r25, 0xF9	; 249
    3780:	90 93 dc 02 	sts	0x02DC, r25
    3784:	80 93 db 02 	sts	0x02DB, r24
    3788:	20 e4       	ldi	r18, 0x40	; 64
    378a:	c2 2e       	mov	r12, r18
    378c:	2d ee       	ldi	r18, 0xED	; 237
    378e:	d2 2e       	mov	r13, r18
    3790:	2f ef       	ldi	r18, 0xFF	; 255
    3792:	e2 2e       	mov	r14, r18
    3794:	2f ef       	ldi	r18, 0xFF	; 255
    3796:	f2 2e       	mov	r15, r18
    3798:	2e cf       	rjmp	.-420    	; 0x35f6 <start_vertical_speed_control_right+0xba>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    379a:	6c 01       	movw	r12, r24
    379c:	cc 0c       	add	r12, r12
    379e:	dd 1c       	adc	r13, r13
    37a0:	c8 0e       	add	r12, r24
    37a2:	d9 1e       	adc	r13, r25
    37a4:	ee 24       	eor	r14, r14
    37a6:	d7 fc       	sbrc	r13, 7
    37a8:	e0 94       	com	r14
    37aa:	fe 2c       	mov	r15, r14
    37ac:	24 cf       	rjmp	.-440    	; 0x35f6 <start_vertical_speed_control_right+0xba>
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    37ae:	84 eb       	ldi	r24, 0xB4	; 180
    37b0:	90 e0       	ldi	r25, 0x00	; 0
    37b2:	e1 ce       	rjmp	.-574    	; 0x3576 <start_vertical_speed_control_right+0x3a>
	pwm_right_speed_controller += (signed long int)(P_VERTICAL * delta_right_speed_current);
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
	pwm_right_speed_controller += (signed long int)(I_VERTICAL*delta_right_speed_sum);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    37b4:	17 fd       	sbrc	r17, 7
    37b6:	0b c0       	rjmp	.+22     	; 0x37ce <start_vertical_speed_control_right+0x292>
		pwm_right_speed_controller = 0;
    37b8:	10 92 d1 02 	sts	0x02D1, r1
    37bc:	10 92 d2 02 	sts	0x02D2, r1
    37c0:	10 92 d3 02 	sts	0x02D3, r1
    37c4:	10 92 d4 02 	sts	0x02D4, r1
    37c8:	20 e0       	ldi	r18, 0x00	; 0
    37ca:	30 e0       	ldi	r19, 0x00	; 0
    37cc:	a9 01       	movw	r20, r18
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    37ce:	20 34       	cpi	r18, 0x40	; 64
    37d0:	82 ea       	ldi	r24, 0xA2	; 162
    37d2:	38 07       	cpc	r19, r24
    37d4:	8f ef       	ldi	r24, 0xFF	; 255
    37d6:	48 07       	cpc	r20, r24
    37d8:	8f ef       	ldi	r24, 0xFF	; 255
    37da:	58 07       	cpc	r21, r24
    37dc:	54 f5       	brge	.+84     	; 0x3832 <start_vertical_speed_control_right+0x2f6>
    37de:	80 e4       	ldi	r24, 0x40	; 64
    37e0:	92 ea       	ldi	r25, 0xA2	; 162
    37e2:	af ef       	ldi	r26, 0xFF	; 255
    37e4:	bf ef       	ldi	r27, 0xFF	; 255
    37e6:	80 93 d1 02 	sts	0x02D1, r24
    37ea:	90 93 d2 02 	sts	0x02D2, r25
    37ee:	a0 93 d3 02 	sts	0x02D3, r26
    37f2:	b0 93 d4 02 	sts	0x02D4, r27
    37f6:	24 e2       	ldi	r18, 0x24	; 36
    37f8:	3a ef       	ldi	r19, 0xFA	; 250
    37fa:	5e cf       	rjmp	.-324    	; 0x36b8 <start_vertical_speed_control_right+0x17c>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
		*pwm_right += 1;
	} else {
		*pwm_right -= 1;
    37fc:	21 50       	subi	r18, 0x01	; 1
    37fe:	30 40       	sbci	r19, 0x00	; 0
    3800:	31 83       	std	Z+1, r19	; 0x01
    3802:	20 83       	st	Z, r18
    3804:	67 cf       	rjmp	.-306    	; 0x36d4 <start_vertical_speed_control_right+0x198>
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    3806:	a0 91 c3 02 	lds	r26, 0x02C3
    380a:	b0 91 c4 02 	lds	r27, 0x02C4
    380e:	a8 0f       	add	r26, r24
    3810:	b9 1f       	adc	r27, r25
    3812:	b0 93 54 08 	sts	0x0854, r27
    3816:	a0 93 53 08 	sts	0x0853, r26
    381a:	d2 ce       	rjmp	.-604    	; 0x35c0 <start_vertical_speed_control_right+0x84>
	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    381c:	10 92 d1 02 	sts	0x02D1, r1
    3820:	10 92 d2 02 	sts	0x02D2, r1
    3824:	10 92 d3 02 	sts	0x02D3, r1
    3828:	10 92 d4 02 	sts	0x02D4, r1
    382c:	20 e0       	ldi	r18, 0x00	; 0
    382e:	30 e0       	ldi	r19, 0x00	; 0
    3830:	a9 01       	movw	r20, r18
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    3832:	64 e0       	ldi	r22, 0x04	; 4
    3834:	55 95       	asr	r21
    3836:	47 95       	ror	r20
    3838:	37 95       	ror	r19
    383a:	27 95       	ror	r18
    383c:	6a 95       	dec	r22
    383e:	d1 f7       	brne	.-12     	; 0x3834 <start_vertical_speed_control_right+0x2f8>
    3840:	3b cf       	rjmp	.-394    	; 0x36b8 <start_vertical_speed_control_right+0x17c>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
    3842:	88 e6       	ldi	r24, 0x68	; 104
    3844:	91 e0       	ldi	r25, 0x01	; 1
    3846:	82 1b       	sub	r24, r18
    3848:	93 0b       	sbc	r25, r19
    384a:	95 95       	asr	r25
    384c:	87 95       	ror	r24
    384e:	95 95       	asr	r25
    3850:	87 95       	ror	r24
    3852:	49 96       	adiw	r24, 0x19	; 25
    3854:	90 93 06 02 	sts	0x0206, r25
    3858:	80 93 05 02 	sts	0x0205, r24
    385c:	9a ce       	rjmp	.-716    	; 0x3592 <start_vertical_speed_control_right+0x56>
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
    385e:	35 95       	asr	r19
    3860:	27 95       	ror	r18
    3862:	35 95       	asr	r19
    3864:	27 95       	ror	r18
    3866:	89 e1       	ldi	r24, 0x19	; 25
    3868:	90 e0       	ldi	r25, 0x00	; 0
    386a:	82 1b       	sub	r24, r18
    386c:	93 0b       	sbc	r25, r19
    386e:	90 93 06 02 	sts	0x0206, r25
    3872:	80 93 05 02 	sts	0x0205, r24
    3876:	8d ce       	rjmp	.-742    	; 0x3592 <start_vertical_speed_control_right+0x56>

00003878 <start_horizontal_speed_control_right>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_right(signed int *pwm_right) {
    3878:	cf 92       	push	r12
    387a:	df 92       	push	r13
    387c:	ef 92       	push	r14
    387e:	ff 92       	push	r15
    3880:	0f 93       	push	r16
    3882:	1f 93       	push	r17
    3884:	cf 93       	push	r28
    3886:	df 93       	push	r29
    3888:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    388a:	80 81       	ld	r24, Z
    388c:	91 81       	ldd	r25, Z+1	; 0x01
    388e:	00 97       	sbiw	r24, 0x00	; 0
    3890:	09 f4       	brne	.+2      	; 0x3894 <start_horizontal_speed_control_right+0x1c>
    3892:	b8 c0       	rjmp	.+368    	; 0x3a04 <start_horizontal_speed_control_right+0x18c>
		delta_right_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    3894:	c0 91 53 08 	lds	r28, 0x0853
    3898:	d0 91 54 08 	lds	r29, 0x0854
    389c:	d0 93 7d 07 	sts	0x077D, r29
    38a0:	c0 93 7c 07 	sts	0x077C, r28
	if(*pwm_right >= 0) {
    38a4:	80 81       	ld	r24, Z
    38a6:	91 81       	ldd	r25, Z+1	; 0x01
    38a8:	97 fd       	sbrc	r25, 7
    38aa:	cd c0       	rjmp	.+410    	; 0x3a46 <start_horizontal_speed_control_right+0x1ce>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    38ac:	20 91 c3 02 	lds	r18, 0x02C3
    38b0:	30 91 c4 02 	lds	r19, 0x02C4
    38b4:	dc 01       	movw	r26, r24
    38b6:	a2 1b       	sub	r26, r18
    38b8:	b3 0b       	sbc	r27, r19
    38ba:	b0 93 54 08 	sts	0x0854, r27
    38be:	a0 93 53 08 	sts	0x0853, r26
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}

	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    38c2:	c0 90 db 02 	lds	r12, 0x02DB
    38c6:	d0 90 dc 02 	lds	r13, 0x02DC
    38ca:	ca 0e       	add	r12, r26
    38cc:	db 1e       	adc	r13, r27
    38ce:	d0 92 dc 02 	sts	0x02DC, r13
    38d2:	c0 92 db 02 	sts	0x02DB, r12

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
    38d6:	81 e4       	ldi	r24, 0x41	; 65
    38d8:	c8 16       	cp	r12, r24
    38da:	86 e0       	ldi	r24, 0x06	; 6
    38dc:	d8 06       	cpc	r13, r24
    38de:	0c f4       	brge	.+2      	; 0x38e2 <start_horizontal_speed_control_right+0x6a>
    38e0:	9e c0       	rjmp	.+316    	; 0x3a1e <start_horizontal_speed_control_right+0x1a6>
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
    38e2:	80 e4       	ldi	r24, 0x40	; 64
    38e4:	96 e0       	ldi	r25, 0x06	; 6
    38e6:	90 93 dc 02 	sts	0x02DC, r25
    38ea:	80 93 db 02 	sts	0x02DB, r24
    38ee:	10 e8       	ldi	r17, 0x80	; 128
    38f0:	c1 2e       	mov	r12, r17
    38f2:	1c e0       	ldi	r17, 0x0C	; 12
    38f4:	d1 2e       	mov	r13, r17
    38f6:	e1 2c       	mov	r14, r1
    38f8:	f1 2c       	mov	r15, r1
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
	}		

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed long int)((*pwm_right) << 3);
    38fa:	00 81       	ld	r16, Z
    38fc:	11 81       	ldd	r17, Z+1	; 0x01
	pwm_right_speed_controller += (signed long int)(delta_right_speed_current*P_HORIZONTAL);
    38fe:	cd 01       	movw	r24, r26
    3900:	88 0f       	add	r24, r24
    3902:	99 1f       	adc	r25, r25
    3904:	8a 0f       	add	r24, r26
    3906:	9b 1f       	adc	r25, r27
    3908:	9c 01       	movw	r18, r24
    390a:	22 0f       	add	r18, r18
    390c:	33 1f       	adc	r19, r19
    390e:	22 0f       	add	r18, r18
    3910:	33 1f       	adc	r19, r19
    3912:	28 0f       	add	r18, r24
    3914:	39 1f       	adc	r19, r25
    3916:	44 27       	eor	r20, r20
    3918:	37 fd       	sbrc	r19, 7
    391a:	40 95       	com	r20
    391c:	54 2f       	mov	r21, r20
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
	}		

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed long int)((*pwm_right) << 3);
    391e:	b8 01       	movw	r22, r16
    3920:	66 0f       	add	r22, r22
    3922:	77 1f       	adc	r23, r23
    3924:	66 0f       	add	r22, r22
    3926:	77 1f       	adc	r23, r23
    3928:	66 0f       	add	r22, r22
    392a:	77 1f       	adc	r23, r23
    392c:	88 27       	eor	r24, r24
    392e:	77 fd       	sbrc	r23, 7
    3930:	80 95       	com	r24
    3932:	98 2f       	mov	r25, r24
	pwm_right_speed_controller += (signed long int)(delta_right_speed_current*P_HORIZONTAL);
    3934:	26 0f       	add	r18, r22
    3936:	37 1f       	adc	r19, r23
    3938:	48 1f       	adc	r20, r24
    393a:	59 1f       	adc	r21, r25
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
    393c:	ac 1b       	sub	r26, r28
    393e:	bd 0b       	sbc	r27, r29
    3940:	cd 01       	movw	r24, r26
    3942:	88 0f       	add	r24, r24
    3944:	99 1f       	adc	r25, r25
    3946:	8a 0f       	add	r24, r26
    3948:	9b 1f       	adc	r25, r27
    394a:	aa 27       	eor	r26, r26
    394c:	97 fd       	sbrc	r25, 7
    394e:	a0 95       	com	r26
    3950:	ba 2f       	mov	r27, r26
    3952:	28 0f       	add	r18, r24
    3954:	39 1f       	adc	r19, r25
    3956:	4a 1f       	adc	r20, r26
    3958:	5b 1f       	adc	r21, r27
	pwm_right_speed_controller += (signed long int)(delta_right_speed_sum*I_HORIZONTAL);
    395a:	2c 0d       	add	r18, r12
    395c:	3d 1d       	adc	r19, r13
    395e:	4e 1d       	adc	r20, r14
    3960:	5f 1d       	adc	r21, r15
    3962:	20 93 d1 02 	sts	0x02D1, r18
    3966:	30 93 d2 02 	sts	0x02D2, r19
    396a:	40 93 d3 02 	sts	0x02D3, r20
    396e:	50 93 d4 02 	sts	0x02D4, r21

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    3972:	57 fd       	sbrc	r21, 7
    3974:	7a c0       	rjmp	.+244    	; 0x3a6a <start_horizontal_speed_control_right+0x1f2>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    3976:	12 16       	cp	r1, r18
    3978:	13 06       	cpc	r1, r19
    397a:	14 06       	cpc	r1, r20
    397c:	15 06       	cpc	r1, r21
    397e:	0c f0       	brlt	.+2      	; 0x3982 <start_horizontal_speed_control_right+0x10a>
    3980:	81 c0       	rjmp	.+258    	; 0x3a84 <start_horizontal_speed_control_right+0x20c>
    3982:	17 fd       	sbrc	r17, 7
    3984:	ad c0       	rjmp	.+346    	; 0x3ae0 <start_horizontal_speed_control_right+0x268>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    3986:	21 3c       	cpi	r18, 0xC1	; 193
    3988:	8d e5       	ldi	r24, 0x5D	; 93
    398a:	38 07       	cpc	r19, r24
    398c:	80 e0       	ldi	r24, 0x00	; 0
    398e:	48 07       	cpc	r20, r24
    3990:	80 e0       	ldi	r24, 0x00	; 0
    3992:	58 07       	cpc	r21, r24
    3994:	0c f4       	brge	.+2      	; 0x3998 <start_horizontal_speed_control_right+0x120>
    3996:	76 c0       	rjmp	.+236    	; 0x3a84 <start_horizontal_speed_control_right+0x20c>
    3998:	80 ec       	ldi	r24, 0xC0	; 192
    399a:	9d e5       	ldi	r25, 0x5D	; 93
    399c:	a0 e0       	ldi	r26, 0x00	; 0
    399e:	b0 e0       	ldi	r27, 0x00	; 0
    39a0:	80 93 d1 02 	sts	0x02D1, r24
    39a4:	90 93 d2 02 	sts	0x02D2, r25
    39a8:	a0 93 d3 02 	sts	0x02D3, r26
    39ac:	b0 93 d4 02 	sts	0x02D4, r27
    39b0:	2c ed       	ldi	r18, 0xDC	; 220
    39b2:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = (signed int)(pwm_right_speed_controller>>4);
    39b4:	31 83       	std	Z+1, r19	; 0x01
    39b6:	20 83       	st	Z, r18

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
    39b8:	80 91 b9 02 	lds	r24, 0x02B9
    39bc:	90 91 ba 02 	lds	r25, 0x02BA
    39c0:	18 16       	cp	r1, r24
    39c2:	19 06       	cpc	r1, r25
    39c4:	0c f0       	brlt	.+2      	; 0x39c8 <start_horizontal_speed_control_right+0x150>
    39c6:	87 c0       	rjmp	.+270    	; 0x3ad6 <start_horizontal_speed_control_right+0x25e>
		*pwm_right += 1;
    39c8:	2f 5f       	subi	r18, 0xFF	; 255
    39ca:	3f 4f       	sbci	r19, 0xFF	; 255
    39cc:	31 83       	std	Z+1, r19	; 0x01
    39ce:	20 83       	st	Z, r18
	} else {
		*pwm_right -= 1;
	}

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
    39d0:	12 16       	cp	r1, r18
    39d2:	13 06       	cpc	r1, r19
    39d4:	0c f0       	brlt	.+2      	; 0x39d8 <start_horizontal_speed_control_right+0x160>
    39d6:	6d c0       	rjmp	.+218    	; 0x3ab2 <start_horizontal_speed_control_right+0x23a>
		*pwm_right += 30;
    39d8:	22 5e       	subi	r18, 0xE2	; 226
    39da:	3f 4f       	sbci	r19, 0xFF	; 255
    39dc:	31 83       	std	Z+1, r19	; 0x01
    39de:	20 83       	st	Z, r18
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    39e0:	82 e0       	ldi	r24, 0x02	; 2
    39e2:	21 30       	cpi	r18, 0x01	; 1
    39e4:	38 07       	cpc	r19, r24
    39e6:	0c f4       	brge	.+2      	; 0x39ea <start_horizontal_speed_control_right+0x172>
    39e8:	6c c0       	rjmp	.+216    	; 0x3ac2 <start_horizontal_speed_control_right+0x24a>
    39ea:	80 e0       	ldi	r24, 0x00	; 0
    39ec:	92 e0       	ldi	r25, 0x02	; 2
    39ee:	91 83       	std	Z+1, r25	; 0x01
    39f0:	80 83       	st	Z, r24
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    39f2:	df 91       	pop	r29
    39f4:	cf 91       	pop	r28
    39f6:	1f 91       	pop	r17
    39f8:	0f 91       	pop	r16
    39fa:	ff 90       	pop	r15
    39fc:	ef 90       	pop	r14
    39fe:	df 90       	pop	r13
    3a00:	cf 90       	pop	r12
    3a02:	08 95       	ret
void start_horizontal_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    3a04:	10 92 dc 02 	sts	0x02DC, r1
    3a08:	10 92 db 02 	sts	0x02DB, r1
		delta_right_speed_current = 0;
    3a0c:	10 92 54 08 	sts	0x0854, r1
    3a10:	10 92 53 08 	sts	0x0853, r1
		delta_right_speed_prev = 0;
    3a14:	10 92 7d 07 	sts	0x077D, r1
    3a18:	10 92 7c 07 	sts	0x077C, r1
		return;
    3a1c:	ea cf       	rjmp	.-44     	; 0x39f2 <start_horizontal_speed_control_right+0x17a>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    3a1e:	80 ec       	ldi	r24, 0xC0	; 192
    3a20:	c8 16       	cp	r12, r24
    3a22:	89 ef       	ldi	r24, 0xF9	; 249
    3a24:	d8 06       	cpc	r13, r24
    3a26:	d4 f4       	brge	.+52     	; 0x3a5c <start_horizontal_speed_control_right+0x1e4>
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
    3a28:	80 ec       	ldi	r24, 0xC0	; 192
    3a2a:	99 ef       	ldi	r25, 0xF9	; 249
    3a2c:	90 93 dc 02 	sts	0x02DC, r25
    3a30:	80 93 db 02 	sts	0x02DB, r24
    3a34:	60 e8       	ldi	r22, 0x80	; 128
    3a36:	c6 2e       	mov	r12, r22
    3a38:	63 ef       	ldi	r22, 0xF3	; 243
    3a3a:	d6 2e       	mov	r13, r22
    3a3c:	6f ef       	ldi	r22, 0xFF	; 255
    3a3e:	e6 2e       	mov	r14, r22
    3a40:	6f ef       	ldi	r22, 0xFF	; 255
    3a42:	f6 2e       	mov	r15, r22
    3a44:	5a cf       	rjmp	.-332    	; 0x38fa <start_horizontal_speed_control_right+0x82>
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    3a46:	a0 91 c3 02 	lds	r26, 0x02C3
    3a4a:	b0 91 c4 02 	lds	r27, 0x02C4
    3a4e:	a8 0f       	add	r26, r24
    3a50:	b9 1f       	adc	r27, r25
    3a52:	b0 93 54 08 	sts	0x0854, r27
    3a56:	a0 93 53 08 	sts	0x0853, r26
    3a5a:	33 cf       	rjmp	.-410    	; 0x38c2 <start_horizontal_speed_control_right+0x4a>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    3a5c:	cc 0c       	add	r12, r12
    3a5e:	dd 1c       	adc	r13, r13
    3a60:	ee 24       	eor	r14, r14
    3a62:	d7 fc       	sbrc	r13, 7
    3a64:	e0 94       	com	r14
    3a66:	fe 2c       	mov	r15, r14
    3a68:	48 cf       	rjmp	.-368    	; 0x38fa <start_horizontal_speed_control_right+0x82>
	pwm_right_speed_controller += (signed long int)(delta_right_speed_current*P_HORIZONTAL);
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
	pwm_right_speed_controller += (signed long int)(delta_right_speed_sum*I_HORIZONTAL);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    3a6a:	17 fd       	sbrc	r17, 7
    3a6c:	0b c0       	rjmp	.+22     	; 0x3a84 <start_horizontal_speed_control_right+0x20c>
		pwm_right_speed_controller = 0;
    3a6e:	10 92 d1 02 	sts	0x02D1, r1
    3a72:	10 92 d2 02 	sts	0x02D2, r1
    3a76:	10 92 d3 02 	sts	0x02D3, r1
    3a7a:	10 92 d4 02 	sts	0x02D4, r1
    3a7e:	20 e0       	ldi	r18, 0x00	; 0
    3a80:	30 e0       	ldi	r19, 0x00	; 0
    3a82:	a9 01       	movw	r20, r18
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    3a84:	20 34       	cpi	r18, 0x40	; 64
    3a86:	82 ea       	ldi	r24, 0xA2	; 162
    3a88:	38 07       	cpc	r19, r24
    3a8a:	8f ef       	ldi	r24, 0xFF	; 255
    3a8c:	48 07       	cpc	r20, r24
    3a8e:	8f ef       	ldi	r24, 0xFF	; 255
    3a90:	58 07       	cpc	r21, r24
    3a92:	8c f5       	brge	.+98     	; 0x3af6 <start_horizontal_speed_control_right+0x27e>
    3a94:	80 e4       	ldi	r24, 0x40	; 64
    3a96:	92 ea       	ldi	r25, 0xA2	; 162
    3a98:	af ef       	ldi	r26, 0xFF	; 255
    3a9a:	bf ef       	ldi	r27, 0xFF	; 255
    3a9c:	80 93 d1 02 	sts	0x02D1, r24
    3aa0:	90 93 d2 02 	sts	0x02D2, r25
    3aa4:	a0 93 d3 02 	sts	0x02D3, r26
    3aa8:	b0 93 d4 02 	sts	0x02D4, r27
    3aac:	24 e2       	ldi	r18, 0x24	; 36
    3aae:	3a ef       	ldi	r19, 0xFA	; 250
    3ab0:	81 cf       	rjmp	.-254    	; 0x39b4 <start_horizontal_speed_control_right+0x13c>
	}

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
		*pwm_right += 30;
	} else if(*pwm_right < 0) {
    3ab2:	21 15       	cp	r18, r1
    3ab4:	31 05       	cpc	r19, r1
    3ab6:	09 f4       	brne	.+2      	; 0x3aba <start_horizontal_speed_control_right+0x242>
    3ab8:	9c cf       	rjmp	.-200    	; 0x39f2 <start_horizontal_speed_control_right+0x17a>
		*pwm_right -= 30;
    3aba:	2e 51       	subi	r18, 0x1E	; 30
    3abc:	30 40       	sbci	r19, 0x00	; 0
    3abe:	31 83       	std	Z+1, r19	; 0x01
    3ac0:	20 83       	st	Z, r18
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    3ac2:	8e ef       	ldi	r24, 0xFE	; 254
    3ac4:	20 30       	cpi	r18, 0x00	; 0
    3ac6:	38 07       	cpc	r19, r24
    3ac8:	0c f0       	brlt	.+2      	; 0x3acc <start_horizontal_speed_control_right+0x254>
    3aca:	93 cf       	rjmp	.-218    	; 0x39f2 <start_horizontal_speed_control_right+0x17a>
    3acc:	80 e0       	ldi	r24, 0x00	; 0
    3ace:	9e ef       	ldi	r25, 0xFE	; 254
    3ad0:	91 83       	std	Z+1, r25	; 0x01
    3ad2:	80 83       	st	Z, r24
    3ad4:	8e cf       	rjmp	.-228    	; 0x39f2 <start_horizontal_speed_control_right+0x17a>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
		*pwm_right += 1;
	} else {
		*pwm_right -= 1;
    3ad6:	21 50       	subi	r18, 0x01	; 1
    3ad8:	30 40       	sbci	r19, 0x00	; 0
    3ada:	31 83       	std	Z+1, r19	; 0x01
    3adc:	20 83       	st	Z, r18
    3ade:	78 cf       	rjmp	.-272    	; 0x39d0 <start_horizontal_speed_control_right+0x158>
	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    3ae0:	10 92 d1 02 	sts	0x02D1, r1
    3ae4:	10 92 d2 02 	sts	0x02D2, r1
    3ae8:	10 92 d3 02 	sts	0x02D3, r1
    3aec:	10 92 d4 02 	sts	0x02D4, r1
    3af0:	20 e0       	ldi	r18, 0x00	; 0
    3af2:	30 e0       	ldi	r19, 0x00	; 0
    3af4:	a9 01       	movw	r20, r18
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    3af6:	14 e0       	ldi	r17, 0x04	; 4
    3af8:	55 95       	asr	r21
    3afa:	47 95       	ror	r20
    3afc:	37 95       	ror	r19
    3afe:	27 95       	ror	r18
    3b00:	1a 95       	dec	r17
    3b02:	d1 f7       	brne	.-12     	; 0x3af8 <start_horizontal_speed_control_right+0x280>
    3b04:	57 cf       	rjmp	.-338    	; 0x39b4 <start_horizontal_speed_control_right+0x13c>

00003b06 <start_horizontal_speed_control_left>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_left(signed int *pwm_left) {
    3b06:	cf 92       	push	r12
    3b08:	df 92       	push	r13
    3b0a:	ef 92       	push	r14
    3b0c:	ff 92       	push	r15
    3b0e:	0f 93       	push	r16
    3b10:	1f 93       	push	r17
    3b12:	cf 93       	push	r28
    3b14:	df 93       	push	r29
    3b16:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
    3b18:	80 81       	ld	r24, Z
    3b1a:	91 81       	ldd	r25, Z+1	; 0x01
    3b1c:	00 97       	sbiw	r24, 0x00	; 0
    3b1e:	09 f4       	brne	.+2      	; 0x3b22 <start_horizontal_speed_control_left+0x1c>
    3b20:	b8 c0       	rjmp	.+368    	; 0x3c92 <start_horizontal_speed_control_left+0x18c>
		delta_left_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    3b22:	c0 91 e3 04 	lds	r28, 0x04E3
    3b26:	d0 91 e4 04 	lds	r29, 0x04E4
    3b2a:	d0 93 35 08 	sts	0x0835, r29
    3b2e:	c0 93 34 08 	sts	0x0834, r28
	if(*pwm_left >= 0) {
    3b32:	80 81       	ld	r24, Z
    3b34:	91 81       	ldd	r25, Z+1	; 0x01
    3b36:	97 fd       	sbrc	r25, 7
    3b38:	cd c0       	rjmp	.+410    	; 0x3cd4 <start_horizontal_speed_control_left+0x1ce>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    3b3a:	20 91 c1 02 	lds	r18, 0x02C1
    3b3e:	30 91 c2 02 	lds	r19, 0x02C2
    3b42:	dc 01       	movw	r26, r24
    3b44:	a2 1b       	sub	r26, r18
    3b46:	b3 0b       	sbc	r27, r19
    3b48:	b0 93 e4 04 	sts	0x04E4, r27
    3b4c:	a0 93 e3 04 	sts	0x04E3, r26
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;
    3b50:	c0 90 d9 02 	lds	r12, 0x02D9
    3b54:	d0 90 da 02 	lds	r13, 0x02DA
    3b58:	ca 0e       	add	r12, r26
    3b5a:	db 1e       	adc	r13, r27
    3b5c:	d0 92 da 02 	sts	0x02DA, r13
    3b60:	c0 92 d9 02 	sts	0x02D9, r12

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
    3b64:	81 e4       	ldi	r24, 0x41	; 65
    3b66:	c8 16       	cp	r12, r24
    3b68:	86 e0       	ldi	r24, 0x06	; 6
    3b6a:	d8 06       	cpc	r13, r24
    3b6c:	0c f4       	brge	.+2      	; 0x3b70 <start_horizontal_speed_control_left+0x6a>
    3b6e:	9e c0       	rjmp	.+316    	; 0x3cac <start_horizontal_speed_control_left+0x1a6>
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
    3b70:	80 e4       	ldi	r24, 0x40	; 64
    3b72:	96 e0       	ldi	r25, 0x06	; 6
    3b74:	90 93 da 02 	sts	0x02DA, r25
    3b78:	80 93 d9 02 	sts	0x02D9, r24
    3b7c:	10 e8       	ldi	r17, 0x80	; 128
    3b7e:	c1 2e       	mov	r12, r17
    3b80:	1c e0       	ldi	r17, 0x0C	; 12
    3b82:	d1 2e       	mov	r13, r17
    3b84:	e1 2c       	mov	r14, r1
    3b86:	f1 2c       	mov	r15, r1
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed long int)((*pwm_left) << 3);
    3b88:	00 81       	ld	r16, Z
    3b8a:	11 81       	ldd	r17, Z+1	; 0x01
	pwm_left_speed_controller += (signed long int)(delta_left_speed_current*P_HORIZONTAL);
    3b8c:	cd 01       	movw	r24, r26
    3b8e:	88 0f       	add	r24, r24
    3b90:	99 1f       	adc	r25, r25
    3b92:	8a 0f       	add	r24, r26
    3b94:	9b 1f       	adc	r25, r27
    3b96:	9c 01       	movw	r18, r24
    3b98:	22 0f       	add	r18, r18
    3b9a:	33 1f       	adc	r19, r19
    3b9c:	22 0f       	add	r18, r18
    3b9e:	33 1f       	adc	r19, r19
    3ba0:	28 0f       	add	r18, r24
    3ba2:	39 1f       	adc	r19, r25
    3ba4:	44 27       	eor	r20, r20
    3ba6:	37 fd       	sbrc	r19, 7
    3ba8:	40 95       	com	r20
    3baa:	54 2f       	mov	r21, r20
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed long int)((*pwm_left) << 3);
    3bac:	b8 01       	movw	r22, r16
    3bae:	66 0f       	add	r22, r22
    3bb0:	77 1f       	adc	r23, r23
    3bb2:	66 0f       	add	r22, r22
    3bb4:	77 1f       	adc	r23, r23
    3bb6:	66 0f       	add	r22, r22
    3bb8:	77 1f       	adc	r23, r23
    3bba:	88 27       	eor	r24, r24
    3bbc:	77 fd       	sbrc	r23, 7
    3bbe:	80 95       	com	r24
    3bc0:	98 2f       	mov	r25, r24
	pwm_left_speed_controller += (signed long int)(delta_left_speed_current*P_HORIZONTAL);
    3bc2:	26 0f       	add	r18, r22
    3bc4:	37 1f       	adc	r19, r23
    3bc6:	48 1f       	adc	r20, r24
    3bc8:	59 1f       	adc	r21, r25
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
    3bca:	ac 1b       	sub	r26, r28
    3bcc:	bd 0b       	sbc	r27, r29
    3bce:	cd 01       	movw	r24, r26
    3bd0:	88 0f       	add	r24, r24
    3bd2:	99 1f       	adc	r25, r25
    3bd4:	8a 0f       	add	r24, r26
    3bd6:	9b 1f       	adc	r25, r27
    3bd8:	aa 27       	eor	r26, r26
    3bda:	97 fd       	sbrc	r25, 7
    3bdc:	a0 95       	com	r26
    3bde:	ba 2f       	mov	r27, r26
    3be0:	28 0f       	add	r18, r24
    3be2:	39 1f       	adc	r19, r25
    3be4:	4a 1f       	adc	r20, r26
    3be6:	5b 1f       	adc	r21, r27
	pwm_left_speed_controller += (signed long int)(delta_left_speed_sum*I_HORIZONTAL);
    3be8:	2c 0d       	add	r18, r12
    3bea:	3d 1d       	adc	r19, r13
    3bec:	4e 1d       	adc	r20, r14
    3bee:	5f 1d       	adc	r21, r15
    3bf0:	20 93 d5 02 	sts	0x02D5, r18
    3bf4:	30 93 d6 02 	sts	0x02D6, r19
    3bf8:	40 93 d7 02 	sts	0x02D7, r20
    3bfc:	50 93 d8 02 	sts	0x02D8, r21

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    3c00:	57 fd       	sbrc	r21, 7
    3c02:	7a c0       	rjmp	.+244    	; 0x3cf8 <start_horizontal_speed_control_left+0x1f2>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    3c04:	12 16       	cp	r1, r18
    3c06:	13 06       	cpc	r1, r19
    3c08:	14 06       	cpc	r1, r20
    3c0a:	15 06       	cpc	r1, r21
    3c0c:	0c f0       	brlt	.+2      	; 0x3c10 <start_horizontal_speed_control_left+0x10a>
    3c0e:	81 c0       	rjmp	.+258    	; 0x3d12 <start_horizontal_speed_control_left+0x20c>
    3c10:	17 fd       	sbrc	r17, 7
    3c12:	ad c0       	rjmp	.+346    	; 0x3d6e <start_horizontal_speed_control_left+0x268>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    3c14:	21 3c       	cpi	r18, 0xC1	; 193
    3c16:	8d e5       	ldi	r24, 0x5D	; 93
    3c18:	38 07       	cpc	r19, r24
    3c1a:	80 e0       	ldi	r24, 0x00	; 0
    3c1c:	48 07       	cpc	r20, r24
    3c1e:	80 e0       	ldi	r24, 0x00	; 0
    3c20:	58 07       	cpc	r21, r24
    3c22:	0c f4       	brge	.+2      	; 0x3c26 <start_horizontal_speed_control_left+0x120>
    3c24:	76 c0       	rjmp	.+236    	; 0x3d12 <start_horizontal_speed_control_left+0x20c>
    3c26:	80 ec       	ldi	r24, 0xC0	; 192
    3c28:	9d e5       	ldi	r25, 0x5D	; 93
    3c2a:	a0 e0       	ldi	r26, 0x00	; 0
    3c2c:	b0 e0       	ldi	r27, 0x00	; 0
    3c2e:	80 93 d5 02 	sts	0x02D5, r24
    3c32:	90 93 d6 02 	sts	0x02D6, r25
    3c36:	a0 93 d7 02 	sts	0x02D7, r26
    3c3a:	b0 93 d8 02 	sts	0x02D8, r27
    3c3e:	2c ed       	ldi	r18, 0xDC	; 220
    3c40:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = (signed int)(pwm_left_speed_controller>>4);
    3c42:	31 83       	std	Z+1, r19	; 0x01
    3c44:	20 83       	st	Z, r18

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
    3c46:	80 91 bb 02 	lds	r24, 0x02BB
    3c4a:	90 91 bc 02 	lds	r25, 0x02BC
    3c4e:	18 16       	cp	r1, r24
    3c50:	19 06       	cpc	r1, r25
    3c52:	0c f0       	brlt	.+2      	; 0x3c56 <start_horizontal_speed_control_left+0x150>
    3c54:	87 c0       	rjmp	.+270    	; 0x3d64 <start_horizontal_speed_control_left+0x25e>
		*pwm_left += 1;
    3c56:	2f 5f       	subi	r18, 0xFF	; 255
    3c58:	3f 4f       	sbci	r19, 0xFF	; 255
    3c5a:	31 83       	std	Z+1, r19	; 0x01
    3c5c:	20 83       	st	Z, r18
	} else {
		*pwm_left -= 1;
	}

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
    3c5e:	12 16       	cp	r1, r18
    3c60:	13 06       	cpc	r1, r19
    3c62:	0c f0       	brlt	.+2      	; 0x3c66 <start_horizontal_speed_control_left+0x160>
    3c64:	6d c0       	rjmp	.+218    	; 0x3d40 <start_horizontal_speed_control_left+0x23a>
		*pwm_left += 30;
    3c66:	22 5e       	subi	r18, 0xE2	; 226
    3c68:	3f 4f       	sbci	r19, 0xFF	; 255
    3c6a:	31 83       	std	Z+1, r19	; 0x01
    3c6c:	20 83       	st	Z, r18
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    3c6e:	82 e0       	ldi	r24, 0x02	; 2
    3c70:	21 30       	cpi	r18, 0x01	; 1
    3c72:	38 07       	cpc	r19, r24
    3c74:	0c f4       	brge	.+2      	; 0x3c78 <start_horizontal_speed_control_left+0x172>
    3c76:	6c c0       	rjmp	.+216    	; 0x3d50 <start_horizontal_speed_control_left+0x24a>
    3c78:	80 e0       	ldi	r24, 0x00	; 0
    3c7a:	92 e0       	ldi	r25, 0x02	; 2
    3c7c:	91 83       	std	Z+1, r25	; 0x01
    3c7e:	80 83       	st	Z, r24
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);

}
    3c80:	df 91       	pop	r29
    3c82:	cf 91       	pop	r28
    3c84:	1f 91       	pop	r17
    3c86:	0f 91       	pop	r16
    3c88:	ff 90       	pop	r15
    3c8a:	ef 90       	pop	r14
    3c8c:	df 90       	pop	r13
    3c8e:	cf 90       	pop	r12
    3c90:	08 95       	ret
void start_horizontal_speed_control_left(signed int *pwm_left) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    3c92:	10 92 da 02 	sts	0x02DA, r1
    3c96:	10 92 d9 02 	sts	0x02D9, r1
		delta_left_speed_current = 0;
    3c9a:	10 92 e4 04 	sts	0x04E4, r1
    3c9e:	10 92 e3 04 	sts	0x04E3, r1
		delta_left_speed_prev = 0;
    3ca2:	10 92 35 08 	sts	0x0835, r1
    3ca6:	10 92 34 08 	sts	0x0834, r1
		return;
    3caa:	ea cf       	rjmp	.-44     	; 0x3c80 <start_horizontal_speed_control_left+0x17a>
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    3cac:	80 ec       	ldi	r24, 0xC0	; 192
    3cae:	c8 16       	cp	r12, r24
    3cb0:	89 ef       	ldi	r24, 0xF9	; 249
    3cb2:	d8 06       	cpc	r13, r24
    3cb4:	d4 f4       	brge	.+52     	; 0x3cea <start_horizontal_speed_control_left+0x1e4>
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
    3cb6:	80 ec       	ldi	r24, 0xC0	; 192
    3cb8:	99 ef       	ldi	r25, 0xF9	; 249
    3cba:	90 93 da 02 	sts	0x02DA, r25
    3cbe:	80 93 d9 02 	sts	0x02D9, r24
    3cc2:	60 e8       	ldi	r22, 0x80	; 128
    3cc4:	c6 2e       	mov	r12, r22
    3cc6:	63 ef       	ldi	r22, 0xF3	; 243
    3cc8:	d6 2e       	mov	r13, r22
    3cca:	6f ef       	ldi	r22, 0xFF	; 255
    3ccc:	e6 2e       	mov	r14, r22
    3cce:	6f ef       	ldi	r22, 0xFF	; 255
    3cd0:	f6 2e       	mov	r15, r22
    3cd2:	5a cf       	rjmp	.-332    	; 0x3b88 <start_horizontal_speed_control_left+0x82>
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    3cd4:	a0 91 c1 02 	lds	r26, 0x02C1
    3cd8:	b0 91 c2 02 	lds	r27, 0x02C2
    3cdc:	a8 0f       	add	r26, r24
    3cde:	b9 1f       	adc	r27, r25
    3ce0:	b0 93 e4 04 	sts	0x04E4, r27
    3ce4:	a0 93 e3 04 	sts	0x04E3, r26
    3ce8:	33 cf       	rjmp	.-410    	; 0x3b50 <start_horizontal_speed_control_left+0x4a>
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    3cea:	cc 0c       	add	r12, r12
    3cec:	dd 1c       	adc	r13, r13
    3cee:	ee 24       	eor	r14, r14
    3cf0:	d7 fc       	sbrc	r13, 7
    3cf2:	e0 94       	com	r14
    3cf4:	fe 2c       	mov	r15, r14
    3cf6:	48 cf       	rjmp	.-368    	; 0x3b88 <start_horizontal_speed_control_left+0x82>
	pwm_left_speed_controller += (signed long int)(delta_left_speed_current*P_HORIZONTAL);
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
	pwm_left_speed_controller += (signed long int)(delta_left_speed_sum*I_HORIZONTAL);

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    3cf8:	17 fd       	sbrc	r17, 7
    3cfa:	0b c0       	rjmp	.+22     	; 0x3d12 <start_horizontal_speed_control_left+0x20c>
		pwm_left_speed_controller = 0;
    3cfc:	10 92 d5 02 	sts	0x02D5, r1
    3d00:	10 92 d6 02 	sts	0x02D6, r1
    3d04:	10 92 d7 02 	sts	0x02D7, r1
    3d08:	10 92 d8 02 	sts	0x02D8, r1
    3d0c:	20 e0       	ldi	r18, 0x00	; 0
    3d0e:	30 e0       	ldi	r19, 0x00	; 0
    3d10:	a9 01       	movw	r20, r18
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    3d12:	20 34       	cpi	r18, 0x40	; 64
    3d14:	82 ea       	ldi	r24, 0xA2	; 162
    3d16:	38 07       	cpc	r19, r24
    3d18:	8f ef       	ldi	r24, 0xFF	; 255
    3d1a:	48 07       	cpc	r20, r24
    3d1c:	8f ef       	ldi	r24, 0xFF	; 255
    3d1e:	58 07       	cpc	r21, r24
    3d20:	8c f5       	brge	.+98     	; 0x3d84 <start_horizontal_speed_control_left+0x27e>
    3d22:	80 e4       	ldi	r24, 0x40	; 64
    3d24:	92 ea       	ldi	r25, 0xA2	; 162
    3d26:	af ef       	ldi	r26, 0xFF	; 255
    3d28:	bf ef       	ldi	r27, 0xFF	; 255
    3d2a:	80 93 d5 02 	sts	0x02D5, r24
    3d2e:	90 93 d6 02 	sts	0x02D6, r25
    3d32:	a0 93 d7 02 	sts	0x02D7, r26
    3d36:	b0 93 d8 02 	sts	0x02D8, r27
    3d3a:	24 e2       	ldi	r18, 0x24	; 36
    3d3c:	3a ef       	ldi	r19, 0xFA	; 250
    3d3e:	81 cf       	rjmp	.-254    	; 0x3c42 <start_horizontal_speed_control_left+0x13c>
	}

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
		*pwm_left += 30;
	} else if(*pwm_left < 0) {
    3d40:	21 15       	cp	r18, r1
    3d42:	31 05       	cpc	r19, r1
    3d44:	09 f4       	brne	.+2      	; 0x3d48 <start_horizontal_speed_control_left+0x242>
    3d46:	9c cf       	rjmp	.-200    	; 0x3c80 <start_horizontal_speed_control_left+0x17a>
		*pwm_left -= 30;
    3d48:	2e 51       	subi	r18, 0x1E	; 30
    3d4a:	30 40       	sbci	r19, 0x00	; 0
    3d4c:	31 83       	std	Z+1, r19	; 0x01
    3d4e:	20 83       	st	Z, r18
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    3d50:	8e ef       	ldi	r24, 0xFE	; 254
    3d52:	20 30       	cpi	r18, 0x00	; 0
    3d54:	38 07       	cpc	r19, r24
    3d56:	0c f0       	brlt	.+2      	; 0x3d5a <start_horizontal_speed_control_left+0x254>
    3d58:	93 cf       	rjmp	.-218    	; 0x3c80 <start_horizontal_speed_control_left+0x17a>
    3d5a:	80 e0       	ldi	r24, 0x00	; 0
    3d5c:	9e ef       	ldi	r25, 0xFE	; 254
    3d5e:	91 83       	std	Z+1, r25	; 0x01
    3d60:	80 83       	st	Z, r24
    3d62:	8e cf       	rjmp	.-228    	; 0x3c80 <start_horizontal_speed_control_left+0x17a>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
		*pwm_left += 1;
	} else {
		*pwm_left -= 1;
    3d64:	21 50       	subi	r18, 0x01	; 1
    3d66:	30 40       	sbci	r19, 0x00	; 0
    3d68:	31 83       	std	Z+1, r19	; 0x01
    3d6a:	20 83       	st	Z, r18
    3d6c:	78 cf       	rjmp	.-272    	; 0x3c5e <start_horizontal_speed_control_left+0x158>
	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    3d6e:	10 92 d5 02 	sts	0x02D5, r1
    3d72:	10 92 d6 02 	sts	0x02D6, r1
    3d76:	10 92 d7 02 	sts	0x02D7, r1
    3d7a:	10 92 d8 02 	sts	0x02D8, r1
    3d7e:	20 e0       	ldi	r18, 0x00	; 0
    3d80:	30 e0       	ldi	r19, 0x00	; 0
    3d82:	a9 01       	movw	r20, r18
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    3d84:	04 e0       	ldi	r16, 0x04	; 4
    3d86:	55 95       	asr	r21
    3d88:	47 95       	ror	r20
    3d8a:	37 95       	ror	r19
    3d8c:	27 95       	ror	r18
    3d8e:	0a 95       	dec	r16
    3d90:	d1 f7       	brne	.-12     	; 0x3d86 <start_horizontal_speed_control_left+0x280>
    3d92:	57 cf       	rjmp	.-338    	; 0x3c42 <start_horizontal_speed_control_left+0x13c>

00003d94 <initPortsIO>:
#include "ports_io.h"


void initPortsIO(void) {

	MCUCR |= (1 << PUD);	// pull-up disable for all ports
    3d94:	85 b7       	in	r24, 0x35	; 53
    3d96:	80 61       	ori	r24, 0x10	; 16
    3d98:	85 bf       	out	0x35, r24	; 53

	DDRA = 0xFF;			// proximity pulses as output
    3d9a:	8f ef       	ldi	r24, 0xFF	; 255
    3d9c:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;			// proximity pulses turned off
    3d9e:	12 b8       	out	0x02, r1	; 2
	
	DDRB = 0xF7;			// pwm for led r/g/b as output; CE, MOSI, SCK, SS as output (master) 
    3da0:	97 ef       	ldi	r25, 0xF7	; 247
    3da2:	94 b9       	out	0x04, r25	; 4
	PORTB = 0xE0;			// r,g,b leds turned off on high state
    3da4:	90 ee       	ldi	r25, 0xE0	; 224
    3da6:	95 b9       	out	0x05, r25	; 5

	DDRC = 0xF0;			// selector as input; IR leds as output; sens-enable, sleep as output
    3da8:	90 ef       	ldi	r25, 0xF0	; 240
    3daa:	97 b9       	out	0x07, r25	; 7
	PORTC = 0xB0;			// sleep = 1 (no sleep), sense_enable=0, IR leds = 1
    3dac:	90 eb       	ldi	r25, 0xB0	; 176
    3dae:	98 b9       	out	0x08, r25	; 8

	DDRD = 0xFC;			// all pins to output; when usart and i2c peripherals are activated they change the pins direction accordingly
    3db0:	9c ef       	ldi	r25, 0xFC	; 252
    3db2:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0x03;			// default for unused pins is 0
    3db4:	93 e0       	ldi	r25, 0x03	; 3
    3db6:	9b b9       	out	0x0b, r25	; 11

	DDRE = 0xFF;			// all pins to output (pwm and dir for motor right as output; when usart is activated it changes the pins direction accordingly)
    3db8:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    3dba:	1e b8       	out	0x0e, r1	; 14

	DDRF = 0x00;			// adc channel pins as input		
    3dbc:	10 ba       	out	0x10, r1	; 16

	DDRG = 0xFF;			// unused pins as output
    3dbe:	83 bb       	out	0x13, r24	; 19
	if(hardwareRevision == HW_REV_3_0) {
    3dc0:	80 91 1d 04 	lds	r24, 0x041D
    3dc4:	88 23       	and	r24, r24
    3dc6:	e1 f0       	breq	.+56     	; 0x3e00 <initPortsIO+0x6c>
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    3dc8:	81 30       	cpi	r24, 0x01	; 1
    3dca:	d1 f0       	breq	.+52     	; 0x3e00 <initPortsIO+0x6c>
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    3dcc:	82 30       	cpi	r24, 0x02	; 2
    3dce:	51 f1       	breq	.+84     	; 0x3e24 <initPortsIO+0x90>
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
	}	

	DDRH = 0xFF;			// all pins to output; when usart is activated it changes the pins direction accordingly
    3dd0:	9f ef       	ldi	r25, 0xFF	; 255
    3dd2:	90 93 01 01 	sts	0x0101, r25
	PORTH = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    3dd6:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
    3dda:	9f e0       	ldi	r25, 0x0F	; 15
    3ddc:	90 93 04 01 	sts	0x0104, r25
	if(hardwareRevision == HW_REV_3_0) {
    3de0:	88 23       	and	r24, r24
    3de2:	a9 f4       	brne	.+42     	; 0x3e0e <initPortsIO+0x7a>
		PORTJ &= 0x00;		// cliff pulse turned off
    3de4:	90 91 05 01 	lds	r25, 0x0105
    3de8:	10 92 05 01 	sts	0x0105, r1
	if(hardwareRevision == HW_REV_3_1) {
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.1)"
	}	

	DDRK = 0x00;			// adc channel pins as input
    3dec:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;			// all pins to output
    3df0:	9f ef       	ldi	r25, 0xFF	; 255
    3df2:	90 93 0a 01 	sts	0x010A, r25
	if(hardwareRevision == HW_REV_3_0) {
    3df6:	88 23       	and	r24, r24
    3df8:	29 f4       	brne	.+10     	; 0x3e04 <initPortsIO+0x70>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
    3dfa:	10 92 0b 01 	sts	0x010B, r1
    3dfe:	08 95       	ret
	DDRG = 0xFF;			// unused pins as output
	if(hardwareRevision == HW_REV_3_0) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
    3e00:	14 ba       	out	0x14, r1	; 20
    3e02:	e6 cf       	rjmp	.-52     	; 0x3dd0 <initPortsIO+0x3c>

	DDRL = 0xFF;			// all pins to output
	if(hardwareRevision == HW_REV_3_0) {
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
    3e04:	81 30       	cpi	r24, 0x01	; 1
    3e06:	c9 f3       	breq	.-14     	; 0x3dfa <initPortsIO+0x66>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    3e08:	82 30       	cpi	r24, 0x02	; 2
    3e0a:	41 f0       	breq	.+16     	; 0x3e1c <initPortsIO+0x88>
    3e0c:	08 95       	ret
	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
	if(hardwareRevision == HW_REV_3_0) {
		PORTJ &= 0x00;		// cliff pulse turned off
		//#warning "Normal logic for ground sensors (hw rev 3.0)"
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    3e0e:	81 30       	cpi	r24, 0x01	; 1
    3e10:	11 f0       	breq	.+4      	; 0x3e16 <initPortsIO+0x82>
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.0.1)"
	}
	if(hardwareRevision == HW_REV_3_1) {
    3e12:	82 30       	cpi	r24, 0x02	; 2
    3e14:	59 f7       	brne	.-42     	; 0x3dec <initPortsIO+0x58>
		PORTJ = 0x0F;
    3e16:	90 93 05 01 	sts	0x0105, r25
    3e1a:	e8 cf       	rjmp	.-48     	; 0x3dec <initPortsIO+0x58>
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTL = 0xF7;		// pwm (unused) to 0, leds turned off on high state
    3e1c:	87 ef       	ldi	r24, 0xF7	; 247
    3e1e:	80 93 0b 01 	sts	0x010B, r24
    3e22:	08 95       	ret
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
    3e24:	98 e0       	ldi	r25, 0x08	; 8
    3e26:	94 bb       	out	0x14, r25	; 20
    3e28:	d3 cf       	rjmp	.-90     	; 0x3dd0 <initPortsIO+0x3c>

00003e2a <i2c_close>:

/* I2C clock in Hz */
#define SCL_CLOCK  440000L

void i2c_close() {
	TWBR = 0x00;
    3e2a:	10 92 b8 00 	sts	0x00B8, r1
	TWCR = 0x00;
    3e2e:	10 92 bc 00 	sts	0x00BC, r1
}
    3e32:	08 95       	ret

00003e34 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
    sbi(PORTD, 0);
    3e34:	58 9a       	sbi	0x0b, 0	; 11
    sbi(PORTD, 1);
    3e36:	59 9a       	sbi	0x0b, 1	; 11

  TWSR = 0;                         /* no prescaler */
    3e38:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    3e3c:	81 e0       	ldi	r24, 0x01	; 1
    3e3e:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
    3e42:	08 95       	ret

00003e44 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    3e44:	94 ea       	ldi	r25, 0xA4	; 164
    3e46:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    3e4a:	90 91 bc 00 	lds	r25, 0x00BC
    3e4e:	97 ff       	sbrs	r25, 7
    3e50:	fc cf       	rjmp	.-8      	; 0x3e4a <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    3e52:	90 91 b9 00 	lds	r25, 0x00B9
    3e56:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    3e58:	98 30       	cpi	r25, 0x08	; 8
    3e5a:	21 f0       	breq	.+8      	; 0x3e64 <i2c_start+0x20>
    3e5c:	90 31       	cpi	r25, 0x10	; 16
    3e5e:	11 f0       	breq	.+4      	; 0x3e64 <i2c_start+0x20>
		//usartTransmit(twst);
		return 1;
    3e60:	81 e0       	ldi	r24, 0x01	; 1
    3e62:	08 95       	ret
	}

	// send device address
	TWDR = address;
    3e64:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    3e68:	84 e8       	ldi	r24, 0x84	; 132
    3e6a:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    3e6e:	80 91 bc 00 	lds	r24, 0x00BC
    3e72:	87 ff       	sbrs	r24, 7
    3e74:	fc cf       	rjmp	.-8      	; 0x3e6e <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    3e76:	90 91 b9 00 	lds	r25, 0x00B9
    3e7a:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    3e7c:	98 31       	cpi	r25, 0x18	; 24
    3e7e:	21 f0       	breq	.+8      	; 0x3e88 <i2c_start+0x44>

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    3e80:	81 e0       	ldi	r24, 0x01	; 1
    3e82:	90 34       	cpi	r25, 0x40	; 64
    3e84:	19 f0       	breq	.+6      	; 0x3e8c <i2c_start+0x48>
		return 1;
	}

	return 0;

}/* i2c_start */
    3e86:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    3e88:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    3e8a:	08 95       	ret

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    3e8c:	80 e0       	ldi	r24, 0x00	; 0
    3e8e:	08 95       	ret

00003e90 <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    3e90:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    3e92:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    3e94:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    3e96:	20 93 bc 00 	sts	0x00BC, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    3e9a:	90 91 bc 00 	lds	r25, 0x00BC
    3e9e:	97 ff       	sbrs	r25, 7
    3ea0:	fc cf       	rjmp	.-8      	; 0x3e9a <i2c_start_wait+0xa>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    3ea2:	90 91 b9 00 	lds	r25, 0x00B9
    3ea6:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    3ea8:	98 30       	cpi	r25, 0x08	; 8
    3eaa:	11 f0       	breq	.+4      	; 0x3eb0 <i2c_start_wait+0x20>
    3eac:	90 31       	cpi	r25, 0x10	; 16
    3eae:	99 f7       	brne	.-26     	; 0x3e96 <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    3eb0:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    3eb4:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    3eb8:	90 91 bc 00 	lds	r25, 0x00BC
    3ebc:	97 ff       	sbrs	r25, 7
    3ebe:	fc cf       	rjmp	.-8      	; 0x3eb8 <i2c_start_wait+0x28>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    3ec0:	90 91 b9 00 	lds	r25, 0x00B9
    3ec4:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    3ec6:	90 32       	cpi	r25, 0x20	; 32
    3ec8:	19 f0       	breq	.+6      	; 0x3ed0 <i2c_start_wait+0x40>
    3eca:	98 35       	cpi	r25, 0x58	; 88
    3ecc:	09 f0       	breq	.+2      	; 0x3ed0 <i2c_start_wait+0x40>
    3ece:	08 95       	ret
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    3ed0:	40 93 bc 00 	sts	0x00BC, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    3ed4:	90 91 bc 00 	lds	r25, 0x00BC
    3ed8:	94 fd       	sbrc	r25, 4
    3eda:	fc cf       	rjmp	.-8      	; 0x3ed4 <i2c_start_wait+0x44>
    3edc:	dc cf       	rjmp	.-72     	; 0x3e96 <i2c_start_wait+0x6>

00003ede <i2c_rep_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    3ede:	94 ea       	ldi	r25, 0xA4	; 164
    3ee0:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    3ee4:	90 91 bc 00 	lds	r25, 0x00BC
    3ee8:	97 ff       	sbrs	r25, 7
    3eea:	fc cf       	rjmp	.-8      	; 0x3ee4 <i2c_rep_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    3eec:	90 91 b9 00 	lds	r25, 0x00B9
    3ef0:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    3ef2:	98 30       	cpi	r25, 0x08	; 8
    3ef4:	21 f0       	breq	.+8      	; 0x3efe <i2c_rep_start+0x20>
    3ef6:	90 31       	cpi	r25, 0x10	; 16
    3ef8:	11 f0       	breq	.+4      	; 0x3efe <i2c_rep_start+0x20>
		//usartTransmit(twst);
		return 1;
    3efa:	81 e0       	ldi	r24, 0x01	; 1
    3efc:	08 95       	ret
	}

	// send device address
	TWDR = address;
    3efe:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    3f02:	84 e8       	ldi	r24, 0x84	; 132
    3f04:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    3f08:	80 91 bc 00 	lds	r24, 0x00BC
    3f0c:	87 ff       	sbrs	r24, 7
    3f0e:	fc cf       	rjmp	.-8      	; 0x3f08 <i2c_rep_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    3f10:	90 91 b9 00 	lds	r25, 0x00B9
    3f14:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    3f16:	98 31       	cpi	r25, 0x18	; 24
    3f18:	21 f0       	breq	.+8      	; 0x3f22 <i2c_rep_start+0x44>
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    3f1a:	81 e0       	ldi	r24, 0x01	; 1
    3f1c:	90 34       	cpi	r25, 0x40	; 64
    3f1e:	19 f0       	breq	.+6      	; 0x3f26 <i2c_rep_start+0x48>
{
    return i2c_start( address );

}/* i2c_rep_start */
    3f20:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    3f22:	80 e0       	ldi	r24, 0x00	; 0
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    3f24:	08 95       	ret
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    3f26:	80 e0       	ldi	r24, 0x00	; 0
    3f28:	08 95       	ret

00003f2a <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    3f2a:	84 e9       	ldi	r24, 0x94	; 148
    3f2c:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    3f30:	80 91 bc 00 	lds	r24, 0x00BC
    3f34:	84 fd       	sbrc	r24, 4
    3f36:	fc cf       	rjmp	.-8      	; 0x3f30 <i2c_stop+0x6>

}/* i2c_stop */
    3f38:	08 95       	ret

00003f3a <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    3f3a:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    3f3e:	84 e8       	ldi	r24, 0x84	; 132
    3f40:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    3f44:	80 91 bc 00 	lds	r24, 0x00BC
    3f48:	87 ff       	sbrs	r24, 7
    3f4a:	fc cf       	rjmp	.-8      	; 0x3f44 <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    3f4c:	90 91 b9 00 	lds	r25, 0x00B9
    3f50:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    3f52:	81 e0       	ldi	r24, 0x01	; 1
    3f54:	98 32       	cpi	r25, 0x28	; 40
    3f56:	09 f0       	breq	.+2      	; 0x3f5a <i2c_write+0x20>
	return 0;

}/* i2c_write */
    3f58:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
    3f5a:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
    3f5c:	08 95       	ret

00003f5e <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    3f5e:	84 ec       	ldi	r24, 0xC4	; 196
    3f60:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    3f64:	80 91 bc 00 	lds	r24, 0x00BC
    3f68:	87 ff       	sbrs	r24, 7
    3f6a:	fc cf       	rjmp	.-8      	; 0x3f64 <i2c_readAck+0x6>

    return TWDR;
    3f6c:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    3f70:	08 95       	ret

00003f72 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    3f72:	84 e8       	ldi	r24, 0x84	; 132
    3f74:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    3f78:	80 91 bc 00 	lds	r24, 0x00BC
    3f7c:	87 ff       	sbrs	r24, 7
    3f7e:	fc cf       	rjmp	.-8      	; 0x3f78 <i2c_readNak+0x6>
	
    return TWDR;
    3f80:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    3f84:	08 95       	ret

00003f86 <initUsart0>:
	// @38400 baud: 8000000/16/38400-1 = 12 => 8000000/16/13 = 38461 => 100-(38400/38461*100)=0.15% of error
	// Double speed mode:
	// @57600 baud: 8000000/8/57600-1 = 16 => 8000000/8/17 = 58823 => 100-(57600/58823*100)=2.08% of error	


	UBRR0H = 0;												// set baudrate
    3f86:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 16;
    3f8a:	80 e1       	ldi	r24, 0x10	; 16
    3f8c:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0A  |= (1 << U2X0);									// enable double speed
    3f90:	e0 ec       	ldi	r30, 0xC0	; 192
    3f92:	f0 e0       	ldi	r31, 0x00	; 0
    3f94:	80 81       	ld	r24, Z
    3f96:	82 60       	ori	r24, 0x02	; 2
    3f98:	80 83       	st	Z, r24
	//UCSR0A &= ~(1 << U2X0);
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);	// enable uart0 transmitter and receiver; enable rx interrupt for use with aseba
    3f9a:	e1 ec       	ldi	r30, 0xC1	; 193
    3f9c:	f0 e0       	ldi	r31, 0x00	; 0
    3f9e:	80 81       	ld	r24, Z
    3fa0:	88 69       	ori	r24, 0x98	; 152
    3fa2:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);					// set frame format: 8-bit data, no parity, 1 stop bit
    3fa4:	e2 ec       	ldi	r30, 0xC2	; 194
    3fa6:	f0 e0       	ldi	r31, 0x00	; 0
    3fa8:	80 81       	ld	r24, Z
    3faa:	86 60       	ori	r24, 0x06	; 6
    3fac:	80 83       	st	Z, r24



}
    3fae:	08 95       	ret

00003fb0 <initUsart1>:

void initUsart1() {

	UBRR1H = 0;												// set baudrate
    3fb0:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = 16;
    3fb4:	80 e1       	ldi	r24, 0x10	; 16
    3fb6:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1A  |= (1 << U2X1);									// enable double speed
    3fba:	e8 ec       	ldi	r30, 0xC8	; 200
    3fbc:	f0 e0       	ldi	r31, 0x00	; 0
    3fbe:	80 81       	ld	r24, Z
    3fc0:	82 60       	ori	r24, 0x02	; 2
    3fc2:	80 83       	st	Z, r24
	//UCSR0A &= ~(1 << U2X1);
	UCSR1B |= (1 << TXEN1) | (1 << RXEN1);					// enable uart0 transmitter and receiver
    3fc4:	e9 ec       	ldi	r30, 0xC9	; 201
    3fc6:	f0 e0       	ldi	r31, 0x00	; 0
    3fc8:	80 81       	ld	r24, Z
    3fca:	88 61       	ori	r24, 0x18	; 24
    3fcc:	80 83       	st	Z, r24
	UCSR1C |= (1<<UCSZ11) | (1<<UCSZ10);					// set frame format: 8-bit data, no parity, 1 stop bit
    3fce:	ea ec       	ldi	r30, 0xCA	; 202
    3fd0:	f0 e0       	ldi	r31, 0x00	; 0
    3fd2:	80 81       	ld	r24, Z
    3fd4:	86 60       	ori	r24, 0x06	; 6
    3fd6:	80 83       	st	Z, r24

}
    3fd8:	08 95       	ret

00003fda <closeUsart>:

void closeUsart() {

	UCSR0A = 0x00;	// clear all usart registers
    3fda:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0x00;
    3fde:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 0x00;
    3fe2:	10 92 c2 00 	sts	0x00C2, r1

}
    3fe6:	08 95       	ret

00003fe8 <usart0Transmit>:

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    3fe8:	90 91 c0 00 	lds	r25, 0x00C0
    3fec:	95 ff       	sbrs	r25, 5
    3fee:	fc cf       	rjmp	.-8      	; 0x3fe8 <usart0Transmit>
	UDR0 = data;						// put data into buffer, sends the data
    3ff0:	80 93 c6 00 	sts	0x00C6, r24
	if(isBlocking) {
    3ff4:	66 23       	and	r22, r22
    3ff6:	21 f0       	breq	.+8      	; 0x4000 <usart0Transmit+0x18>
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    3ff8:	80 91 c0 00 	lds	r24, 0x00C0
    3ffc:	86 ff       	sbrs	r24, 6
    3ffe:	fc cf       	rjmp	.-8      	; 0x3ff8 <usart0Transmit+0x10>
    4000:	08 95       	ret

00004002 <usart1Transmit>:
	}
}

void usart1Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR1A & (1<<UDRE1)));		// wait for empty transmit buffer
    4002:	90 91 c8 00 	lds	r25, 0x00C8
    4006:	95 ff       	sbrs	r25, 5
    4008:	fc cf       	rjmp	.-8      	; 0x4002 <usart1Transmit>
	UDR1 = data;						// put data into buffer, sends the data
    400a:	80 93 ce 00 	sts	0x00CE, r24
	if(isBlocking) {
    400e:	66 23       	and	r22, r22
    4010:	21 f0       	breq	.+8      	; 0x401a <usart1Transmit+0x18>
		while (!(UCSR1A & (1<<TXC1)));	// wait transmission complete
    4012:	80 91 c8 00 	lds	r24, 0x00C8
    4016:	86 ff       	sbrs	r24, 6
    4018:	fc cf       	rjmp	.-8      	; 0x4012 <usart1Transmit+0x10>
    401a:	08 95       	ret

0000401c <usart0InputBufferEmpty>:

}

char usart0InputBufferEmpty() {

	if(UCSR0A & (1<<RXC0)) {	// something received
    401c:	80 91 c0 00 	lds	r24, 0x00C0
		return 0;
    4020:	80 95       	com	r24
	} else {
		return 1;
	}

}
    4022:	88 1f       	adc	r24, r24
    4024:	88 27       	eor	r24, r24
    4026:	88 1f       	adc	r24, r24
    4028:	08 95       	ret

0000402a <usart0Receive>:

unsigned char usart0Receive() {

	unsigned int i=0;

	while(usart0InputBufferEmpty()) {
    402a:	87 e9       	ldi	r24, 0x97	; 151
    402c:	90 e0       	ldi	r25, 0x00	; 0

}

char usart0InputBufferEmpty() {

	if(UCSR0A & (1<<RXC0)) {	// something received
    402e:	20 91 c0 00 	lds	r18, 0x00C0
    4032:	27 fd       	sbrc	r18, 7
    4034:	07 c0       	rjmp	.+14     	; 0x4044 <usart0Receive+0x1a>
			commError = 1;
			return 0;				// timeout
		}
	}								// wait for data to be received

	return UDR0;					// get and return received data from buffer
    4036:	01 97       	sbiw	r24, 0x01	; 1

	unsigned int i=0;

	while(usart0InputBufferEmpty()) {
		i++;
		if(i>150) {
    4038:	d1 f7       	brne	.-12     	; 0x402e <usart0Receive+0x4>
			/*
			if(UCSR0A & (1<<3)) {	// overflow flag
			}
			*/
			commError = 1;
    403a:	81 e0       	ldi	r24, 0x01	; 1
    403c:	80 93 ec 02 	sts	0x02EC, r24
			return 0;				// timeout
    4040:	80 e0       	ldi	r24, 0x00	; 0
    4042:	08 95       	ret
		}
	}								// wait for data to be received

	return UDR0;					// get and return received data from buffer
    4044:	80 91 c6 00 	lds	r24, 0x00C6

}
    4048:	08 95       	ret

0000404a <__vector_25>:
		}
	}
}
*/

ISR(USART0_RX_vect) {
    404a:	1f 92       	push	r1
    404c:	0f 92       	push	r0
    404e:	0f b6       	in	r0, 0x3f	; 63
    4050:	0f 92       	push	r0
    4052:	0b b6       	in	r0, 0x3b	; 59
    4054:	0f 92       	push	r0
    4056:	11 24       	eor	r1, r1
    4058:	2f 93       	push	r18
    405a:	3f 93       	push	r19
    405c:	4f 93       	push	r20
    405e:	5f 93       	push	r21
    4060:	6f 93       	push	r22
    4062:	7f 93       	push	r23
    4064:	8f 93       	push	r24
    4066:	9f 93       	push	r25
    4068:	af 93       	push	r26
    406a:	bf 93       	push	r27
    406c:	ef 93       	push	r30
    406e:	ff 93       	push	r31

	char receivedByte = UDR0;
    4070:	90 91 c6 00 	lds	r25, 0x00C6


	if(currentSelector==14) {
    4074:	80 91 1a 04 	lds	r24, 0x041A
    4078:	8e 30       	cpi	r24, 0x0E	; 14
    407a:	09 f4       	brne	.+2      	; 0x407e <__vector_25+0x34>
    407c:	3f c0       	rjmp	.+126    	; 0x40fc <__vector_25+0xb2>
		if(receivedByte == 0xAA) {
			irCommSendValues = 1;
		}
	} else if(currentSelector==15) {
    407e:	8f 30       	cpi	r24, 0x0F	; 15
    4080:	09 f4       	brne	.+2      	; 0x4084 <__vector_25+0x3a>
    4082:	42 c0       	rjmp	.+132    	; 0x4108 <__vector_25+0xbe>
			eeprom_write_byte((uint8_t*) 4093, currentOsccal); 
		}

	} else {

		if(chooseMenu) {
    4084:	80 91 11 02 	lds	r24, 0x0211
    4088:	88 23       	and	r24, r24
    408a:	09 f5       	brne	.+66     	; 0x40ce <__vector_25+0x84>
			chooseMenu = 0;
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
    408c:	80 91 f1 03 	lds	r24, 0x03F1
    4090:	81 30       	cpi	r24, 0x01	; 1
    4092:	09 f4       	brne	.+2      	; 0x4096 <__vector_25+0x4c>
    4094:	65 c0       	rjmp	.+202    	; 0x4160 <__vector_25+0x116>
    4096:	82 30       	cpi	r24, 0x02	; 2
    4098:	f1 f4       	brne	.+60     	; 0x40d6 <__vector_25+0x8c>
						menuChoice = 0;
					}
					break;

				case 2:	// address writing in eeprom
					if(menuState == 0) { // receive rf address LSB:
    409a:	40 91 f3 03 	lds	r20, 0x03F3
    409e:	44 23       	and	r20, r20
    40a0:	09 f4       	brne	.+2      	; 0x40a4 <__vector_25+0x5a>
    40a2:	74 c0       	rjmp	.+232    	; 0x418c <__vector_25+0x142>
						rfAddress = (unsigned int)receivedByte&0x00FF;
						menuState = 1;
					} else if(menuState == 1) { // receive rf address MSB
    40a4:	41 30       	cpi	r20, 0x01	; 1
    40a6:	b9 f4       	brne	.+46     	; 0x40d6 <__vector_25+0x8c>
						rfAddress |= ((unsigned int)receivedByte<<8);
    40a8:	39 2f       	mov	r19, r25
    40aa:	20 e0       	ldi	r18, 0x00	; 0
    40ac:	80 91 e5 02 	lds	r24, 0x02E5
    40b0:	90 91 e6 02 	lds	r25, 0x02E6
    40b4:	82 2b       	or	r24, r18
    40b6:	93 2b       	or	r25, r19
    40b8:	90 93 e6 02 	sts	0x02E6, r25
    40bc:	80 93 e5 02 	sts	0x02E5, r24
						addressReceived = 1;
    40c0:	40 93 f2 03 	sts	0x03F2, r20
						menuState = 0;
    40c4:	10 92 f3 03 	sts	0x03F3, r1
						chooseMenu = 1;
    40c8:	40 93 11 02 	sts	0x0211, r20
    40cc:	04 c0       	rjmp	.+8      	; 0x40d6 <__vector_25+0x8c>
		}

	} else {

		if(chooseMenu) {
			chooseMenu = 0;
    40ce:	10 92 11 02 	sts	0x0211, r1
			menuChoice = receivedByte;
    40d2:	90 93 f1 03 	sts	0x03F1, r25
			}
		}

	}

}
    40d6:	ff 91       	pop	r31
    40d8:	ef 91       	pop	r30
    40da:	bf 91       	pop	r27
    40dc:	af 91       	pop	r26
    40de:	9f 91       	pop	r25
    40e0:	8f 91       	pop	r24
    40e2:	7f 91       	pop	r23
    40e4:	6f 91       	pop	r22
    40e6:	5f 91       	pop	r21
    40e8:	4f 91       	pop	r20
    40ea:	3f 91       	pop	r19
    40ec:	2f 91       	pop	r18
    40ee:	0f 90       	pop	r0
    40f0:	0b be       	out	0x3b, r0	; 59
    40f2:	0f 90       	pop	r0
    40f4:	0f be       	out	0x3f, r0	; 63
    40f6:	0f 90       	pop	r0
    40f8:	1f 90       	pop	r1
    40fa:	18 95       	reti

	char receivedByte = UDR0;


	if(currentSelector==14) {
		if(receivedByte == 0xAA) {
    40fc:	9a 3a       	cpi	r25, 0xAA	; 170
    40fe:	59 f7       	brne	.-42     	; 0x40d6 <__vector_25+0x8c>
			irCommSendValues = 1;
    4100:	81 e0       	ldi	r24, 0x01	; 1
    4102:	80 93 9f 04 	sts	0x049F, r24
    4106:	e7 cf       	rjmp	.-50     	; 0x40d6 <__vector_25+0x8c>
		}
	} else if(currentSelector==15) {

		if(receivedByte == '+') {
    4108:	9b 32       	cpi	r25, 0x2B	; 43
    410a:	01 f1       	breq	.+64     	; 0x414c <__vector_25+0x102>
				currentOsccal++;
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
    410c:	9d 32       	cpi	r25, 0x2D	; 45
    410e:	91 f1       	breq	.+100    	; 0x4174 <__vector_25+0x12a>
				currentOsccal--;	
			}
			OSCCAL = currentOsccal;;
		}

		if(receivedByte == 'g') {
    4110:	97 36       	cpi	r25, 0x67	; 103
    4112:	09 f0       	breq	.+2      	; 0x4116 <__vector_25+0xcc>
    4114:	43 c0       	rjmp	.+134    	; 0x419c <__vector_25+0x152>
			usart0Transmit(irCommand,1);
    4116:	90 91 f5 03 	lds	r25, 0x03F5

}

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    411a:	80 91 c0 00 	lds	r24, 0x00C0
    411e:	85 ff       	sbrs	r24, 5
    4120:	fc cf       	rjmp	.-8      	; 0x411a <__vector_25+0xd0>
	UDR0 = data;						// put data into buffer, sends the data
    4122:	90 93 c6 00 	sts	0x00C6, r25
	if(isBlocking) {
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    4126:	80 91 c0 00 	lds	r24, 0x00C0
    412a:	86 ff       	sbrs	r24, 6
    412c:	fc cf       	rjmp	.-8      	; 0x4126 <__vector_25+0xdc>
			OSCCAL = currentOsccal;;
		}

		if(receivedByte == 'g') {
			usart0Transmit(irCommand,1);
			currentOsccal = OSCCAL;
    412e:	90 91 66 00 	lds	r25, 0x0066
    4132:	90 93 c8 04 	sts	0x04C8, r25

}

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    4136:	80 91 c0 00 	lds	r24, 0x00C0
    413a:	85 ff       	sbrs	r24, 5
    413c:	fc cf       	rjmp	.-8      	; 0x4136 <__vector_25+0xec>
	UDR0 = data;						// put data into buffer, sends the data
    413e:	90 93 c6 00 	sts	0x00C6, r25
	if(isBlocking) {
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    4142:	80 91 c0 00 	lds	r24, 0x00C0
    4146:	86 ff       	sbrs	r24, 6
    4148:	fc cf       	rjmp	.-8      	; 0x4142 <__vector_25+0xf8>
    414a:	c5 cf       	rjmp	.-118    	; 0x40d6 <__vector_25+0x8c>
			irCommSendValues = 1;
		}
	} else if(currentSelector==15) {

		if(receivedByte == '+') {
			if(currentOsccal<255) {
    414c:	80 91 c8 04 	lds	r24, 0x04C8
    4150:	8f 3f       	cpi	r24, 0xFF	; 255
    4152:	d1 f0       	breq	.+52     	; 0x4188 <__vector_25+0x13e>
				currentOsccal++;
    4154:	8f 5f       	subi	r24, 0xFF	; 255
    4156:	80 93 c8 04 	sts	0x04C8, r24

		if(receivedByte == '-') {
			if(currentOsccal>0) {
				currentOsccal--;	
			}
			OSCCAL = currentOsccal;;
    415a:	80 93 66 00 	sts	0x0066, r24
    415e:	bb cf       	rjmp	.-138    	; 0x40d6 <__vector_25+0x8c>
			chooseMenu = 0;
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
				case 1: // send sensors data and activate actuators
					if(receivedByte == 0xAA) {
    4160:	9a 3a       	cpi	r25, 0xAA	; 170
    4162:	31 f1       	breq	.+76     	; 0x41b0 <__vector_25+0x166>
						getDataNow = 1;
					} else if(receivedByte == 0x55) {
    4164:	95 35       	cpi	r25, 0x55	; 85
    4166:	09 f0       	breq	.+2      	; 0x416a <__vector_25+0x120>
    4168:	b6 cf       	rjmp	.-148    	; 0x40d6 <__vector_25+0x8c>
						chooseMenu = 1;
    416a:	80 93 11 02 	sts	0x0211, r24
						menuChoice = 0;
    416e:	10 92 f1 03 	sts	0x03F1, r1
    4172:	b1 cf       	rjmp	.-158    	; 0x40d6 <__vector_25+0x8c>
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
			if(currentOsccal>0) {
    4174:	80 91 c8 04 	lds	r24, 0x04C8
    4178:	88 23       	and	r24, r24
    417a:	21 f0       	breq	.+8      	; 0x4184 <__vector_25+0x13a>
				currentOsccal--;	
    417c:	81 50       	subi	r24, 0x01	; 1
    417e:	80 93 c8 04 	sts	0x04C8, r24
    4182:	eb cf       	rjmp	.-42     	; 0x415a <__vector_25+0x110>
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
			if(currentOsccal>0) {
    4184:	80 e0       	ldi	r24, 0x00	; 0
    4186:	e9 cf       	rjmp	.-46     	; 0x415a <__vector_25+0x110>
			irCommSendValues = 1;
		}
	} else if(currentSelector==15) {

		if(receivedByte == '+') {
			if(currentOsccal<255) {
    4188:	8f ef       	ldi	r24, 0xFF	; 255
    418a:	e7 cf       	rjmp	.-50     	; 0x415a <__vector_25+0x110>
					}
					break;

				case 2:	// address writing in eeprom
					if(menuState == 0) { // receive rf address LSB:
						rfAddress = (unsigned int)receivedByte&0x00FF;
    418c:	90 93 e5 02 	sts	0x02E5, r25
    4190:	10 92 e6 02 	sts	0x02E6, r1
						menuState = 1;
    4194:	81 e0       	ldi	r24, 0x01	; 1
    4196:	80 93 f3 03 	sts	0x03F3, r24
    419a:	9d cf       	rjmp	.-198    	; 0x40d6 <__vector_25+0x8c>
			usart0Transmit(irCommand,1);
			currentOsccal = OSCCAL;
			usart0Transmit(currentOsccal,1);
		}

		if(receivedByte == 's') {
    419c:	93 37       	cpi	r25, 0x73	; 115
    419e:	09 f0       	breq	.+2      	; 0x41a2 <__vector_25+0x158>
    41a0:	9a cf       	rjmp	.-204    	; 0x40d6 <__vector_25+0x8c>
			eeprom_write_byte((uint8_t*) 4093, currentOsccal); 
    41a2:	8d ef       	ldi	r24, 0xFD	; 253
    41a4:	9f e0       	ldi	r25, 0x0F	; 15
    41a6:	60 91 c8 04 	lds	r22, 0x04C8
    41aa:	0e 94 02 4a 	call	0x9404	; 0x9404 <__eewr_byte_m2560>
    41ae:	93 cf       	rjmp	.-218    	; 0x40d6 <__vector_25+0x8c>
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
				case 1: // send sensors data and activate actuators
					if(receivedByte == 0xAA) {
						getDataNow = 1;
    41b0:	80 93 f4 03 	sts	0x03F4, r24
    41b4:	90 cf       	rjmp	.-224    	; 0x40d6 <__vector_25+0x8c>

000041b6 <getSelector>:

#include "utility.h"

unsigned char getSelector() {
   return (SEL0) + 2*(SEL1) + 4*(SEL2) + 8*(SEL3);
    41b6:	86 b1       	in	r24, 0x06	; 6
    41b8:	66 b1       	in	r22, 0x06	; 6
    41ba:	26 b1       	in	r18, 0x06	; 6
    41bc:	46 b1       	in	r20, 0x06	; 6
    41be:	30 e0       	ldi	r19, 0x00	; 0
    41c0:	28 70       	andi	r18, 0x08	; 8
    41c2:	30 70       	andi	r19, 0x00	; 0
    41c4:	35 95       	asr	r19
    41c6:	27 95       	ror	r18
    41c8:	35 95       	asr	r19
    41ca:	27 95       	ror	r18
    41cc:	35 95       	asr	r19
    41ce:	27 95       	ror	r18
    41d0:	22 0f       	add	r18, r18
    41d2:	33 1f       	adc	r19, r19
    41d4:	70 e0       	ldi	r23, 0x00	; 0
    41d6:	64 70       	andi	r22, 0x04	; 4
    41d8:	70 70       	andi	r23, 0x00	; 0
    41da:	75 95       	asr	r23
    41dc:	67 95       	ror	r22
    41de:	75 95       	asr	r23
    41e0:	67 95       	ror	r22
    41e2:	26 0f       	add	r18, r22
    41e4:	37 1f       	adc	r19, r23
    41e6:	22 0f       	add	r18, r18
    41e8:	33 1f       	adc	r19, r19
    41ea:	50 e0       	ldi	r21, 0x00	; 0
    41ec:	42 70       	andi	r20, 0x02	; 2
    41ee:	50 70       	andi	r21, 0x00	; 0
    41f0:	55 95       	asr	r21
    41f2:	47 95       	ror	r20
    41f4:	24 0f       	add	r18, r20
    41f6:	35 1f       	adc	r19, r21
    41f8:	22 0f       	add	r18, r18
    41fa:	81 70       	andi	r24, 0x01	; 1
}
    41fc:	82 0f       	add	r24, r18
    41fe:	08 95       	ret

00004200 <initPeripherals>:
    

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
    4200:	f8 94       	cli
	
	// reset all registers touched by arduino in the "init()" functions (wiring.c) not used by the robot
	TCCR0A = 0;
    4202:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
    4204:	15 bc       	out	0x25, r1	; 37
	TIMSK0 = 0;
    4206:	10 92 6e 00 	sts	0x006E, r1
	TCCR5A = 0;
    420a:	10 92 20 01 	sts	0x0120, r1
	TCCR5B = 0;
    420e:	10 92 21 01 	sts	0x0121, r1

	rfAddress = eeprom_read_word((uint16_t*)4094);
    4212:	8e ef       	ldi	r24, 0xFE	; 254
    4214:	9f e0       	ldi	r25, 0x0F	; 15
    4216:	0e 94 d4 49 	call	0x93a8	; 0x93a8 <__eerd_word_m2560>
    421a:	90 93 e6 02 	sts	0x02E6, r25
    421e:	80 93 e5 02 	sts	0x02E5, r24
	currentOsccal = eeprom_read_byte((uint8_t*)4093);
    4222:	8d ef       	ldi	r24, 0xFD	; 253
    4224:	9f e0       	ldi	r25, 0x0F	; 15
    4226:	0e 94 cc 49 	call	0x9398	; 0x9398 <__eerd_byte_m2560>
    422a:	80 93 c8 04 	sts	0x04C8, r24
	if(currentOsccal!=0 && currentOsccal!=255) { // clear memory
    422e:	98 2f       	mov	r25, r24
    4230:	91 50       	subi	r25, 0x01	; 1
    4232:	9e 3f       	cpi	r25, 0xFE	; 254
    4234:	e8 f5       	brcc	.+122    	; 0x42b0 <initPeripherals+0xb0>
		OSCCAL = currentOsccal;
    4236:	80 93 66 00 	sts	0x0066, r24
		currentOsccal = OSCCAL;
		eeprom_write_byte((uint8_t*) 4093, currentOsccal);
	}
	
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
    423a:	80 91 e5 02 	lds	r24, 0x02E5
    423e:	90 91 e6 02 	lds	r25, 0x02E6
    4242:	9c 01       	movw	r18, r24
    4244:	21 58       	subi	r18, 0x81	; 129
    4246:	3c 40       	sbci	r19, 0x0C	; 12
    4248:	23 30       	cpi	r18, 0x03	; 3
    424a:	31 05       	cpc	r19, r1
    424c:	08 f5       	brcc	.+66     	; 0x4290 <initPeripherals+0x90>
		hardwareRevision = HW_REV_3_0;
    424e:	10 92 1d 04 	sts	0x041D, r1

	if(rfAddress > 3203) {
		hardwareRevision = HW_REV_3_1;
	}

	initCalibration();
    4252:	0e 94 ad 39 	call	0x735a	; 0x735a <initCalibration>
	initPortsIO();
    4256:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <initPortsIO>
	initAdc();
    425a:	0e 94 10 22 	call	0x4420	; 0x4420 <initAdc>
	initMotors();
    425e:	0e 94 f1 27 	call	0x4fe2	; 0x4fe2 <initMotors>
	initRGBleds();
    4262:	0e 94 88 3d 	call	0x7b10	; 0x7b10 <initRGBleds>
	initSPI();
    4266:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <initSPI>
	mirf_init();
    426a:	0e 94 91 10 	call	0x2122	; 0x2122 <mirf_init>
	if(spiCommError==0) {
    426e:	80 91 e8 02 	lds	r24, 0x02E8
    4272:	88 23       	and	r24, r24
    4274:	29 f4       	brne	.+10     	; 0x4280 <initPeripherals+0x80>
		rfFlags |= 1;
    4276:	80 91 e7 02 	lds	r24, 0x02E7
    427a:	81 60       	ori	r24, 0x01	; 1
    427c:	80 93 e7 02 	sts	0x02E7, r24
	}
	initUsart0();
    4280:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <initUsart0>
	initAccelerometer();
    4284:	0e 94 d0 3e 	call	0x7da0	; 0x7da0 <initAccelerometer>
	init_ir_remote_control();
    4288:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <init_ir_remote_control>

	sei();			// enable global interrupts
    428c:	78 94       	sei

	
}
    428e:	08 95       	ret
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
		hardwareRevision = HW_REV_3_0;
	}

	if(rfAddress == 3200) {
    4290:	2c e0       	ldi	r18, 0x0C	; 12
    4292:	80 38       	cpi	r24, 0x80	; 128
    4294:	92 07       	cpc	r25, r18
    4296:	21 f4       	brne	.+8      	; 0x42a0 <initPeripherals+0xa0>
		hardwareRevision = HW_REV_3_0_1;
    4298:	81 e0       	ldi	r24, 0x01	; 1
    429a:	80 93 1d 04 	sts	0x041D, r24
    429e:	d9 cf       	rjmp	.-78     	; 0x4252 <initPeripherals+0x52>
	}

	if(rfAddress > 3203) {
    42a0:	2c e0       	ldi	r18, 0x0C	; 12
    42a2:	84 38       	cpi	r24, 0x84	; 132
    42a4:	92 07       	cpc	r25, r18
    42a6:	a8 f2       	brcs	.-86     	; 0x4252 <initPeripherals+0x52>
		hardwareRevision = HW_REV_3_1;
    42a8:	82 e0       	ldi	r24, 0x02	; 2
    42aa:	80 93 1d 04 	sts	0x041D, r24
    42ae:	d1 cf       	rjmp	.-94     	; 0x4252 <initPeripherals+0x52>
	rfAddress = eeprom_read_word((uint16_t*)4094);
	currentOsccal = eeprom_read_byte((uint8_t*)4093);
	if(currentOsccal!=0 && currentOsccal!=255) { // clear memory
		OSCCAL = currentOsccal;
	} else {
		currentOsccal = OSCCAL;
    42b0:	60 91 66 00 	lds	r22, 0x0066
    42b4:	60 93 c8 04 	sts	0x04C8, r22
		eeprom_write_byte((uint8_t*) 4093, currentOsccal);
    42b8:	8d ef       	ldi	r24, 0xFD	; 253
    42ba:	9f e0       	ldi	r25, 0x0F	; 15
    42bc:	0e 94 02 4a 	call	0x9404	; 0x9404 <__eewr_byte_m2560>
    42c0:	bc cf       	rjmp	.-136    	; 0x423a <initPeripherals+0x3a>

000042c2 <__vector_15>:

	
}

// used only for wake-up from sleep
ISR(TIMER2_OVF_vect) {
    42c2:	1f 92       	push	r1
    42c4:	0f 92       	push	r0
    42c6:	0f b6       	in	r0, 0x3f	; 63
    42c8:	0f 92       	push	r0
    42ca:	11 24       	eor	r1, r1

}
    42cc:	0f 90       	pop	r0
    42ce:	0f be       	out	0x3f, r0	; 63
    42d0:	0f 90       	pop	r0
    42d2:	1f 90       	pop	r1
    42d4:	18 95       	reti

000042d6 <sleep>:

void sleep(unsigned char seconds) {
    42d6:	cf 93       	push	r28
    42d8:	df 93       	push	r29

	unsigned int pause = seconds*30;	// the timer2 used to wake-up from sleep is configured to run at 30 Hz
    42da:	9e e1       	ldi	r25, 0x1E	; 30
    42dc:	89 9f       	mul	r24, r25
    42de:	e0 01       	movw	r28, r0
    42e0:	11 24       	eor	r1, r1

	// disable external interrupt because it uses the timer2 to interpret the tv
	// remote signal and the timer2 must be free in order to be used for wake-up from sleep
	PCICR &= ~(1 << PCIE1);			// disable interrupt from falling edge
    42e2:	80 91 68 00 	lds	r24, 0x0068
    42e6:	8d 7f       	andi	r24, 0xFD	; 253
    42e8:	80 93 68 00 	sts	0x0068, r24
	PCMSK1 &= ~(1 << PCINT15);		
    42ec:	80 91 6c 00 	lds	r24, 0x006C
    42f0:	8f 77       	andi	r24, 0x7F	; 127
    42f2:	80 93 6c 00 	sts	0x006C, r24
	PCIFR |= (1 << PCIF1);			// clear interrupt flag
    42f6:	d9 9a       	sbi	0x1b, 1	; 27

	// disable adc
	ADCSRA = 0x00;					// disable interrupt and turn off adc
    42f8:	10 92 7a 00 	sts	0x007A, r1
	ADCSRA |= (1 << ADIF);			// clear interrupt flag
    42fc:	80 91 7a 00 	lds	r24, 0x007A
    4300:	80 61       	ori	r24, 0x10	; 16
    4302:	80 93 7a 00 	sts	0x007A, r24

	// disable motors pwm
	TCCR3A = 0x00;	// turn off timer
    4306:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0x00;
    430a:	10 92 91 00 	sts	0x0091, r1
	TIMSK3 = 0x00;	// disable interrupt
    430e:	10 92 71 00 	sts	0x0071, r1
	TIFR3 |= (1 << OCF3A) | (1 << OCF3B) | (1 << TOV3);	// clear output compares and timer overflow interrupt flags
    4312:	88 b3       	in	r24, 0x18	; 24
    4314:	87 60       	ori	r24, 0x07	; 7
    4316:	88 bb       	out	0x18, r24	; 24
	TCCR4A = 0x00;
    4318:	10 92 a0 00 	sts	0x00A0, r1
	TCCR4B = 0x00;
    431c:	10 92 a1 00 	sts	0x00A1, r1
	TIMSK4 = 0x00;
    4320:	10 92 72 00 	sts	0x0072, r1
	TIFR4 |= (1 << OCF4A) | (1 << OCF4B) | (1 << TOV4);	// clear output compares and timer overflow interrupt flags
    4324:	89 b3       	in	r24, 0x19	; 25
    4326:	87 60       	ori	r24, 0x07	; 7
    4328:	89 bb       	out	0x19, r24	; 25

	// disable leds pwm
	TCCR1A = 0x00;	// turn off timer
    432a:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x00;
    432e:	10 92 81 00 	sts	0x0081, r1

	// close communication channels
	closeUsart();
    4332:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <closeUsart>
	closeSPI();
    4336:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <closeSPI>
	i2c_close();
    433a:	0e 94 15 1f 	call	0x3e2a	; 0x3e2a <i2c_close>

	// set port pins
	initPortsIO();
    433e:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <initPortsIO>
	//PORTB &= ~(1 << 4);	// radio CE pin
	//DDRD = 0xFF;
	//PORTD = 0x00;	// I2C and uart pins to 0

	// set extendend standby mode and enable it
	SMCR |= (1 << SM2) | (1 << SM1) | (1 << SM0) | (1 << SE);	// extended standby
    4342:	83 b7       	in	r24, 0x33	; 51
    4344:	8f 60       	ori	r24, 0x0F	; 15
    4346:	83 bf       	out	0x33, r24	; 51

	// set timer2 for wake-up: 
	// source clock = 8 MHz
	// prescaler = 1/1024 => 7812.5 Hz
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
    4348:	81 e0       	ldi	r24, 0x01	; 1
    434a:	80 93 70 00 	sts	0x0070, r24
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
    434e:	80 91 b0 00 	lds	r24, 0x00B0
    4352:	8d 7f       	andi	r24, 0xFD	; 253
    4354:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler
    4358:	80 91 b1 00 	lds	r24, 0x00B1
    435c:	87 60       	ori	r24, 0x07	; 7
    435e:	80 93 b1 00 	sts	0x00B1, r24

	while(pause > 0) {	
    4362:	20 97       	sbiw	r28, 0x00	; 0
    4364:	19 f0       	breq	.+6      	; 0x436c <sleep+0x96>
		// enter extended standby mode
		//sleep_cpu();
		__asm__("sleep");
    4366:	88 95       	sleep
		pause--;
    4368:	21 97       	sbiw	r28, 0x01	; 1
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler

	while(pause > 0) {	
    436a:	e9 f7       	brne	.-6      	; 0x4366 <sleep+0x90>
//		PORTB ^= (1 << 6);
	}

	// disable power mode
	//SMCR &= ~(1 << SE);
	SMCR = 0x00;
    436c:	13 be       	out	0x33, r1	; 51

	// disable timer2 and its timer overflow interrupt
	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);	// disable timer2
    436e:	80 91 b1 00 	lds	r24, 0x00B1
    4372:	88 7f       	andi	r24, 0xF8	; 248
    4374:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;					// disable all interrupt for timer2
    4378:	10 92 70 00 	sts	0x0070, r1
	TCCR2A |= (1 << WGM21); 	// mode 2 => CTC mode
    437c:	80 91 b0 00 	lds	r24, 0x00B0
    4380:	82 60       	ori	r24, 0x02	; 2
    4382:	80 93 b0 00 	sts	0x00B0, r24

	pwm_red = 255;
    4386:	8f ef       	ldi	r24, 0xFF	; 255
    4388:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    438c:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    4390:	80 93 0e 02 	sts	0x020E, r24
	pwm_right = 0;
    4394:	10 92 c6 02 	sts	0x02C6, r1
    4398:	10 92 c5 02 	sts	0x02C5, r1
	pwm_left = 0;
    439c:	10 92 c8 02 	sts	0x02C8, r1
    43a0:	10 92 c7 02 	sts	0x02C7, r1
	initPeripherals();
    43a4:	0e 94 00 21 	call	0x4200	; 0x4200 <initPeripherals>

}
    43a8:	df 91       	pop	r29
    43aa:	cf 91       	pop	r28
    43ac:	08 95       	ret

000043ae <getTime100MicroSec>:

unsigned long int getTime100MicroSec() {
    43ae:	60 91 16 04 	lds	r22, 0x0416
    43b2:	70 91 17 04 	lds	r23, 0x0417
	return clockTick;
}
    43b6:	80 91 18 04 	lds	r24, 0x0418
    43ba:	90 91 19 04 	lds	r25, 0x0419
    43be:	08 95       	ret

000043c0 <readBatteryLevel>:

void readBatteryLevel() {
	measBattery = 1;
    43c0:	81 e0       	ldi	r24, 0x01	; 1
    43c2:	80 93 8f 02 	sts	0x028F, r24
}
    43c6:	08 95       	ret

000043c8 <resetOdometry>:

void resetOdometry() {
	leftMotSteps = 0;
    43c8:	80 e0       	ldi	r24, 0x00	; 0
    43ca:	90 e0       	ldi	r25, 0x00	; 0
    43cc:	dc 01       	movw	r26, r24
    43ce:	80 93 a5 02 	sts	0x02A5, r24
    43d2:	90 93 a6 02 	sts	0x02A6, r25
    43d6:	a0 93 a7 02 	sts	0x02A7, r26
    43da:	b0 93 a8 02 	sts	0x02A8, r27
	rightMotSteps = 0;
    43de:	80 93 a1 02 	sts	0x02A1, r24
    43e2:	90 93 a2 02 	sts	0x02A2, r25
    43e6:	a0 93 a3 02 	sts	0x02A3, r26
    43ea:	b0 93 a4 02 	sts	0x02A4, r27
	theta = 0;
    43ee:	80 93 3d 04 	sts	0x043D, r24
    43f2:	90 93 3e 04 	sts	0x043E, r25
    43f6:	a0 93 3f 04 	sts	0x043F, r26
    43fa:	b0 93 40 04 	sts	0x0440, r27
	xPos = 0;
    43fe:	80 93 45 04 	sts	0x0445, r24
    4402:	90 93 46 04 	sts	0x0446, r25
    4406:	a0 93 47 04 	sts	0x0447, r26
    440a:	b0 93 48 04 	sts	0x0448, r27
	yPos = 0;
    440e:	80 93 49 04 	sts	0x0449, r24
    4412:	90 93 4a 04 	sts	0x044A, r25
    4416:	a0 93 4b 04 	sts	0x044B, r26
    441a:	b0 93 4c 04 	sts	0x044C, r27
}
    441e:	08 95       	ret

00004420 <initAdc>:

#include "adc.h"


void initAdc(void) {
    4420:	cf 93       	push	r28
    4422:	df 93       	push	r29
	// ADMUX  -----> REFS1	REFS0	 ADLAR	MUX4	MUX3 	 MUX2	MUX1	MUX0
	// default		 0		0		 0		0		0		 0		0		0
	// ADCSRB -----> -		ACME	 - 		- 		MUX5 	 ADTS2 	ADTS1 	ADTS0
	// default		 0		0		 0		0		0		 0		0		0

	ADCSRA = 0;
    4424:	ea e7       	ldi	r30, 0x7A	; 122
    4426:	f0 e0       	ldi	r31, 0x00	; 0
    4428:	10 82       	st	Z, r1
	ADCSRB = 0;
    442a:	ab e7       	ldi	r26, 0x7B	; 123
    442c:	b0 e0       	ldi	r27, 0x00	; 0
    442e:	1c 92       	st	X, r1
	ADMUX = 0;
    4430:	cc e7       	ldi	r28, 0x7C	; 124
    4432:	d0 e0       	ldi	r29, 0x00	; 0
    4434:	18 82       	st	Y, r1

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// 1/64 prescaler => 8 MHz/64=125 KHz => Tad (adc clock)
    4436:	80 81       	ld	r24, Z
    4438:	86 60       	ori	r24, 0x06	; 6
    443a:	80 83       	st	Z, r24
											// one sample need 13 Tad in free running mode, so interrupt 
											// frequency is 125/13=9.6 KHz (104 us between adc interrupts)
	ADMUX |= (1 << REFS0); 	// voltage reference to AVCC (external)
    443c:	88 81       	ld	r24, Y
    443e:	80 64       	ori	r24, 0x40	; 64
    4440:	88 83       	st	Y, r24
	ADCSRA |= (1 << ADATE); // auto-trigger mode: the new sampling is started just after the last one is completed
    4442:	80 81       	ld	r24, Z
    4444:	80 62       	ori	r24, 0x20	; 32
    4446:	80 83       	st	Z, r24
	ADCSRB &= 0xF8;			// for safety...ADTS2:0 in ADCSRB should be already set to free running by default (0b000)
    4448:	8c 91       	ld	r24, X
    444a:	88 7f       	andi	r24, 0xF8	; 248
    444c:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADIE);	// enable interrupt on conversion completion
    444e:	80 81       	ld	r24, Z
    4450:	88 60       	ori	r24, 0x08	; 8
    4452:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	// enable ADC
    4454:	80 81       	ld	r24, Z
    4456:	80 68       	ori	r24, 0x80	; 128
    4458:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);	// start first conversion (start from channel 0)
    445a:	80 81       	ld	r24, Z
    445c:	80 64       	ori	r24, 0x40	; 64
    445e:	80 83       	st	Z, r24

}
    4460:	df 91       	pop	r29
    4462:	cf 91       	pop	r28
    4464:	08 95       	ret

00004466 <__vector_29>:

ISR(ADC_vect) {
    4466:	1f 92       	push	r1
    4468:	0f 92       	push	r0
    446a:	0f b6       	in	r0, 0x3f	; 63
    446c:	0f 92       	push	r0
    446e:	0b b6       	in	r0, 0x3b	; 59
    4470:	0f 92       	push	r0
    4472:	11 24       	eor	r1, r1
    4474:	2f 93       	push	r18
    4476:	3f 93       	push	r19
    4478:	4f 93       	push	r20
    447a:	5f 93       	push	r21
    447c:	6f 93       	push	r22
    447e:	7f 93       	push	r23
    4480:	8f 93       	push	r24
    4482:	9f 93       	push	r25
    4484:	af 93       	push	r26
    4486:	bf 93       	push	r27
    4488:	ef 93       	push	r30
    448a:	ff 93       	push	r31
	// channel 15:    active phase when going forward: motor left current; passive phase when going backward: motor left velocity


	//LED_BLUE_ON;

	clockTick++;				// this variable is used as base time for timed processes/functions (e,g, delay); 
    448c:	80 91 16 04 	lds	r24, 0x0416
    4490:	90 91 17 04 	lds	r25, 0x0417
    4494:	a0 91 18 04 	lds	r26, 0x0418
    4498:	b0 91 19 04 	lds	r27, 0x0419
    449c:	01 96       	adiw	r24, 0x01	; 1
    449e:	a1 1d       	adc	r26, r1
    44a0:	b1 1d       	adc	r27, r1
    44a2:	80 93 16 04 	sts	0x0416, r24
    44a6:	90 93 17 04 	sts	0x0417, r25
    44aa:	a0 93 18 04 	sts	0x0418, r26
    44ae:	b0 93 19 04 	sts	0x0419, r27
								// resolution of 104 us based on adc interrupts

	unsigned int value = ADCL;			// get the sample; low byte must be read first!!
    44b2:	80 91 78 00 	lds	r24, 0x0078
    44b6:	90 e0       	ldi	r25, 0x00	; 0
	value = (ADCH<<8) | value;
    44b8:	40 91 79 00 	lds	r20, 0x0079
    44bc:	34 2f       	mov	r19, r20
    44be:	20 e0       	ldi	r18, 0x00	; 0
    44c0:	82 2b       	or	r24, r18
    44c2:	93 2b       	or	r25, r19
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    44c4:	20 91 89 02 	lds	r18, 0x0289
    44c8:	22 30       	cpi	r18, 0x02	; 2
    44ca:	09 f4       	brne	.+2      	; 0x44ce <__vector_29+0x68>
    44cc:	d9 c1       	rjmp	.+946    	; 0x4880 <__vector_29+0x41a>
    44ce:	23 30       	cpi	r18, 0x03	; 3
    44d0:	08 f4       	brcc	.+2      	; 0x44d4 <__vector_29+0x6e>
    44d2:	47 c0       	rjmp	.+142    	; 0x4562 <__vector_29+0xfc>
    44d4:	24 30       	cpi	r18, 0x04	; 4
    44d6:	09 f4       	brne	.+2      	; 0x44da <__vector_29+0x74>
    44d8:	fd c1       	rjmp	.+1018   	; 0x48d4 <__vector_29+0x46e>
    44da:	24 30       	cpi	r18, 0x04	; 4
    44dc:	08 f0       	brcs	.+2      	; 0x44e0 <__vector_29+0x7a>
    44de:	0d c1       	rjmp	.+538    	; 0x46fa <__vector_29+0x294>
				}
			}
			break;

		case SAVE_TO_LEFT_MOTOR_CURRENT:
			left_current_avg += value;
    44e0:	20 91 b1 02 	lds	r18, 0x02B1
    44e4:	30 91 b2 02 	lds	r19, 0x02B2
    44e8:	28 0f       	add	r18, r24
    44ea:	39 1f       	adc	r19, r25
			left_current_avg = left_current_avg >> 1;
    44ec:	36 95       	lsr	r19
    44ee:	27 95       	ror	r18
    44f0:	30 93 b2 02 	sts	0x02B2, r19
    44f4:	20 93 b1 02 	sts	0x02B1, r18
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
    44f8:	90 91 93 04 	lds	r25, 0x0493
    44fc:	92 30       	cpi	r25, 0x02	; 2
    44fe:	09 f0       	breq	.+2      	; 0x4502 <__vector_29+0x9c>
    4500:	45 c0       	rjmp	.+138    	; 0x458c <__vector_29+0x126>
		switch(irCommAdcTxState) {
    4502:	40 91 af 04 	lds	r20, 0x04AF
    4506:	41 30       	cpi	r20, 0x01	; 1
    4508:	09 f4       	brne	.+2      	; 0x450c <__vector_29+0xa6>
    450a:	89 c2       	rjmp	.+1298   	; 0x4a1e <__vector_29+0x5b8>
    450c:	41 30       	cpi	r20, 0x01	; 1
    450e:	08 f0       	brcs	.+2      	; 0x4512 <__vector_29+0xac>
    4510:	0f c2       	rjmp	.+1054   	; 0x4930 <__vector_29+0x4ca>
			case 0:
				// turn off all proximity
				if(hardwareRevision == HW_REV_3_0) {
    4512:	20 91 1d 04 	lds	r18, 0x041D
    4516:	22 23       	and	r18, r18
    4518:	09 f4       	brne	.+2      	; 0x451c <__vector_29+0xb6>
    451a:	c3 c2       	rjmp	.+1414   	; 0x4aa2 <__vector_29+0x63c>
					PORTJ &= 0xF0;	// ground
					PORTA = 0x00;	// proximity
				}

				if(hardwareRevision == HW_REV_3_0_1) {
    451c:	21 30       	cpi	r18, 0x01	; 1
    451e:	09 f4       	brne	.+2      	; 0x4522 <__vector_29+0xbc>
    4520:	3a c3       	rjmp	.+1652   	; 0x4b96 <__vector_29+0x730>
					PORTJ = 0xFF;	// ground
					PORTA = 0x00;	// proximity
				}

				if(hardwareRevision == HW_REV_3_1) {
    4522:	22 30       	cpi	r18, 0x02	; 2
    4524:	09 f4       	brne	.+2      	; 0x4528 <__vector_29+0xc2>
    4526:	37 c3       	rjmp	.+1646   	; 0x4b96 <__vector_29+0x730>
					PORTJ = 0xFF;	// ground
					PORTA = 0x00;	// proximtiy
				}
				currentAdChannel = currentMotLeftChannel;
    4528:	80 91 23 02 	lds	r24, 0x0223
    452c:	80 93 21 02 	sts	0x0221, r24
				leftChannelPhase = leftMotorPhase;
    4530:	80 91 26 02 	lds	r24, 0x0226
    4534:	80 93 8c 02 	sts	0x028C, r24
				adcSaveDataTo = SKIP_SAMPLE;				
    4538:	85 e0       	ldi	r24, 0x05	; 5
    453a:	80 93 89 02 	sts	0x0289, r24
				irCommState = IRCOMM_TX_PREPARE_TRANSMISSION;
    453e:	80 93 94 04 	sts	0x0494, r24
				irCommTxWaitStartTime = getTime100MicroSec();
    4542:	0e 94 d7 21 	call	0x43ae	; 0x43ae <getTime100MicroSec>
    4546:	60 93 b6 04 	sts	0x04B6, r22
    454a:	70 93 b7 04 	sts	0x04B7, r23
    454e:	80 93 b8 04 	sts	0x04B8, r24
    4552:	90 93 b9 04 	sts	0x04B9, r25
				irCommAdcTxState = 3;
    4556:	83 e0       	ldi	r24, 0x03	; 3
    4558:	80 93 af 04 	sts	0x04AF, r24
    455c:	80 91 8a 02 	lds	r24, 0x028A
				break;
    4560:	28 c1       	rjmp	.+592    	; 0x47b2 <__vector_29+0x34c>
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    4562:	22 23       	and	r18, r18
    4564:	a9 f1       	breq	.+106    	; 0x45d0 <__vector_29+0x16a>
    4566:	21 30       	cpi	r18, 0x01	; 1
    4568:	61 f4       	brne	.+24     	; 0x4582 <__vector_29+0x11c>
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
			}											// is sampled; thus 12 sensors x 2 phases = 24 samples
			break;

		case SAVE_TO_RIGHT_MOTOR_CURRENT:
			right_current_avg += value;
    456a:	20 91 b3 02 	lds	r18, 0x02B3
    456e:	30 91 b4 02 	lds	r19, 0x02B4
    4572:	28 0f       	add	r18, r24
    4574:	39 1f       	adc	r19, r25
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
    4576:	36 95       	lsr	r19
    4578:	27 95       	ror	r18
    457a:	30 93 b4 02 	sts	0x02B4, r19
    457e:	20 93 b3 02 	sts	0x02B3, r18
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
    4582:	90 91 93 04 	lds	r25, 0x0493
    4586:	92 30       	cpi	r25, 0x02	; 2
    4588:	09 f4       	brne	.+2      	; 0x458c <__vector_29+0x126>
    458a:	bb cf       	rjmp	.-138    	; 0x4502 <__vector_29+0x9c>

			case 3:
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
    458c:	91 30       	cpi	r25, 0x01	; 1
    458e:	09 f4       	brne	.+2      	; 0x4592 <__vector_29+0x12c>
    4590:	57 c1       	rjmp	.+686    	; 0x4840 <__vector_29+0x3da>

			case 12:
				break;

		}
	} else if(irCommMode==IRCOMM_MODE_SENSORS_SAMPLING) {
    4592:	99 23       	and	r25, r25
    4594:	09 f0       	breq	.+2      	; 0x4598 <__vector_29+0x132>
    4596:	0b c1       	rjmp	.+534    	; 0x47ae <__vector_29+0x348>
		switch(adcSamplingState) {
    4598:	80 91 8a 02 	lds	r24, 0x028A
    459c:	82 30       	cpi	r24, 0x02	; 2
    459e:	09 f4       	brne	.+2      	; 0x45a2 <__vector_29+0x13c>
    45a0:	d8 c2       	rjmp	.+1456   	; 0x4b52 <__vector_29+0x6ec>
    45a2:	83 30       	cpi	r24, 0x03	; 3
    45a4:	08 f0       	brcs	.+2      	; 0x45a8 <__vector_29+0x142>
    45a6:	ee c1       	rjmp	.+988    	; 0x4984 <__vector_29+0x51e>
    45a8:	88 23       	and	r24, r24
    45aa:	09 f0       	breq	.+2      	; 0x45ae <__vector_29+0x148>
    45ac:	5e c2       	rjmp	.+1212   	; 0x4a6a <__vector_29+0x604>

			case 0:	// proximity
				currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
    45ae:	80 91 22 02 	lds	r24, 0x0222
    45b2:	86 95       	lsr	r24
    45b4:	80 93 21 02 	sts	0x0221, r24
																// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
				if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
    45b8:	80 91 8b 02 	lds	r24, 0x028B
    45bc:	88 23       	and	r24, r24
    45be:	09 f0       	breq	.+2      	; 0x45c2 <__vector_29+0x15c>
    45c0:	ef c2       	rjmp	.+1502   	; 0x4ba0 <__vector_29+0x73a>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    45c2:	81 e0       	ldi	r24, 0x01	; 1
    45c4:	80 93 89 02 	sts	0x0289, r24
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 1;
    45c8:	81 e0       	ldi	r24, 0x01	; 1
    45ca:	80 93 8a 02 	sts	0x028A, r24
				break;
    45ce:	f1 c0       	rjmp	.+482    	; 0x47b2 <__vector_29+0x34c>
			}
			currentProx++;
			break;

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    45d0:	60 91 22 02 	lds	r22, 0x0222
    45d4:	6e 30       	cpi	r22, 0x0E	; 14
    45d6:	09 f4       	brne	.+2      	; 0x45da <__vector_29+0x174>
    45d8:	cf c2       	rjmp	.+1438   	; 0x4b78 <__vector_29+0x712>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
				measBattery = 0;
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
			} else {
				proximityValue[currentProx] = value;	// even indexes contain ambient values; odd indexes contains "reflected" values
    45da:	26 2f       	mov	r18, r22
    45dc:	30 e0       	ldi	r19, 0x00	; 0
    45de:	f9 01       	movw	r30, r18
    45e0:	ee 0f       	add	r30, r30
    45e2:	ff 1f       	adc	r31, r31
    45e4:	e9 5d       	subi	r30, 0xD9	; 217
    45e6:	fd 4f       	sbci	r31, 0xFD	; 253
    45e8:	91 83       	std	Z+1, r25	; 0x01
    45ea:	80 83       	st	Z, r24
			}

			if(currentProx & 0x01) {
    45ec:	20 ff       	sbrs	r18, 0
    45ee:	79 c0       	rjmp	.+242    	; 0x46e2 <__vector_29+0x27c>
				//if(currentProx < 16) {	// prox
					proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
    45f0:	46 2f       	mov	r20, r22
    45f2:	46 95       	lsr	r20
    45f4:	50 e0       	ldi	r21, 0x00	; 0
    45f6:	d9 01       	movw	r26, r18
    45f8:	aa 0f       	add	r26, r26
    45fa:	bb 1f       	adc	r27, r27
    45fc:	ab 5d       	subi	r26, 0xDB	; 219
    45fe:	bd 4f       	sbci	r27, 0xFD	; 253
    4600:	f9 01       	movw	r30, r18
    4602:	ee 0f       	add	r30, r30
    4604:	ff 1f       	adc	r31, r31
    4606:	e9 5d       	subi	r30, 0xD9	; 217
    4608:	fd 4f       	sbci	r31, 0xFD	; 253
    460a:	8d 91       	ld	r24, X+
    460c:	9c 91       	ld	r25, X
    460e:	11 97       	sbiw	r26, 0x01	; 1
    4610:	20 81       	ld	r18, Z
    4612:	31 81       	ldd	r19, Z+1	; 0x01
    4614:	82 1b       	sub	r24, r18
    4616:	93 0b       	sbc	r25, r19
    4618:	44 0f       	add	r20, r20
    461a:	55 1f       	adc	r21, r21
    461c:	fa 01       	movw	r30, r20
    461e:	ef 5b       	subi	r30, 0xBF	; 191
    4620:	fd 4f       	sbci	r31, 0xFD	; 253
    4622:	20 81       	ld	r18, Z
    4624:	31 81       	ldd	r19, Z+1	; 0x01
    4626:	82 1b       	sub	r24, r18
    4628:	93 0b       	sbc	r25, r19
    462a:	fa 01       	movw	r30, r20
    462c:	e7 5d       	subi	r30, 0xD7	; 215
    462e:	fd 4f       	sbci	r31, 0xFD	; 253
    4630:	91 83       	std	Z+1, r25	; 0x01
    4632:	80 83       	st	Z, r24
				//} else {	// ground
				//	proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx];
				//}
				if(proximityResult[currentProx>>1] < 0) {
    4634:	97 fd       	sbrc	r25, 7
    4636:	0e c3       	rjmp	.+1564   	; 0x4c54 <__vector_29+0x7ee>
					proximityResult[currentProx>>1] = 0;
				}
				if(proximityResult[currentProx>>1] > 1024) {
    4638:	24 e0       	ldi	r18, 0x04	; 4
    463a:	81 30       	cpi	r24, 0x01	; 1
    463c:	92 07       	cpc	r25, r18
    463e:	24 f0       	brlt	.+8      	; 0x4648 <__vector_29+0x1e2>
					proximityResult[currentProx>>1] = 1024;
    4640:	80 e0       	ldi	r24, 0x00	; 0
    4642:	94 e0       	ldi	r25, 0x04	; 4
    4644:	91 83       	std	Z+1, r25	; 0x01
    4646:	80 83       	st	Z, r24
				// 1) from 0 to PHASE1: y = x (where x = proximity value9
				// 2) from PHASE1 to PHASE2: y = x/2 + 30
				// 3) from PHASE2 to PHASE3: y = x/4 + 75
				// 4) from PHASE3 upwards: y = x/8 + 127.5
				// The linearized values are used for the obstacles avoidance.
				if(currentProx < 16) {	// only for proximity (not ground sensors)
    4648:	60 31       	cpi	r22, 0x10	; 16
    464a:	50 f4       	brcc	.+20     	; 0x4660 <__vector_29+0x1fa>
					
					if(proximityResult[currentProx>>1] < PHASE1) {
    464c:	8c 33       	cpi	r24, 0x3C	; 60
    464e:	91 05       	cpc	r25, r1
    4650:	0c f0       	brlt	.+2      	; 0x4654 <__vector_29+0x1ee>
    4652:	05 c3       	rjmp	.+1546   	; 0x4c5e <__vector_29+0x7f8>

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];
    4654:	4f 56       	subi	r20, 0x6F	; 111
    4656:	5d 4f       	sbci	r21, 0xFD	; 253
    4658:	da 01       	movw	r26, r20
    465a:	11 96       	adiw	r26, 0x01	; 1
    465c:	9c 93       	st	X, r25
    465e:	8e 93       	st	-X, r24
				}

				// the cliff avoidance behavior is inserted within this interrupt service routine in order to react
				// as fast as possible; the maximum speed usable with cliff avoidance is 30 in all kind of surface 
				// (apart from black ones) after calibration.
				if(cliffAvoidanceEnabled) {
    4660:	80 91 3b 04 	lds	r24, 0x043B
    4664:	88 23       	and	r24, r24
    4666:	09 f4       	brne	.+2      	; 0x466a <__vector_29+0x204>
    4668:	19 c2       	rjmp	.+1074   	; 0x4a9c <__vector_29+0x636>
					if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    466a:	80 91 39 02 	lds	r24, 0x0239
    466e:	90 91 3a 02 	lds	r25, 0x023A
    4672:	f1 e0       	ldi	r31, 0x01	; 1
    4674:	84 3a       	cpi	r24, 0xA4	; 164
    4676:	9f 07       	cpc	r25, r31
    4678:	cc f0       	brlt	.+50     	; 0x46ac <__vector_29+0x246>
    467a:	80 91 3b 02 	lds	r24, 0x023B
    467e:	90 91 3c 02 	lds	r25, 0x023C
    4682:	21 e0       	ldi	r18, 0x01	; 1
    4684:	84 3a       	cpi	r24, 0xA4	; 164
    4686:	92 07       	cpc	r25, r18
    4688:	8c f0       	brlt	.+34     	; 0x46ac <__vector_29+0x246>
    468a:	80 91 3d 02 	lds	r24, 0x023D
    468e:	90 91 3e 02 	lds	r25, 0x023E
    4692:	a1 e0       	ldi	r26, 0x01	; 1
    4694:	84 3a       	cpi	r24, 0xA4	; 164
    4696:	9a 07       	cpc	r25, r26
    4698:	4c f0       	brlt	.+18     	; 0x46ac <__vector_29+0x246>
    469a:	80 91 3f 02 	lds	r24, 0x023F
    469e:	90 91 40 02 	lds	r25, 0x0240
    46a2:	b1 e0       	ldi	r27, 0x01	; 1
    46a4:	84 3a       	cpi	r24, 0xA4	; 164
    46a6:	9b 07       	cpc	r25, r27
    46a8:	0c f0       	brlt	.+2      	; 0x46ac <__vector_29+0x246>
    46aa:	f8 c1       	rjmp	.+1008   	; 0x4a9c <__vector_29+0x636>
					//if(proximityResult[8]<(proximityOffset[8]>>1) || proximityResult[9]<(proximityOffset[9]>>1) || proximityResult[10]<(proximityOffset[10]>>1) || proximityResult[11]<(proximityOffset[11]>>1)) {
						cliffDetectedFlag = 1;
    46ac:	81 e0       	ldi	r24, 0x01	; 1
    46ae:	80 93 3c 04 	sts	0x043C, r24
						//LED_RED_ON;			
						// set resulting velocity to 0 and change the pwm registers directly to be able
						// to stop as fast as possible (the next pwm cycle)
						// left motor
						pwm_left = 0;
    46b2:	10 92 c8 02 	sts	0x02C8, r1
    46b6:	10 92 c7 02 	sts	0x02C7, r1
						OCR4A = 0;
    46ba:	10 92 a9 00 	sts	0x00A9, r1
    46be:	10 92 a8 00 	sts	0x00A8, r1
						OCR4B = 0;
    46c2:	10 92 ab 00 	sts	0x00AB, r1
    46c6:	10 92 aa 00 	sts	0x00AA, r1
						// right motor
						pwm_right = 0;
    46ca:	10 92 c6 02 	sts	0x02C6, r1
    46ce:	10 92 c5 02 	sts	0x02C5, r1
						OCR3A = 0;
    46d2:	10 92 99 00 	sts	0x0099, r1
    46d6:	10 92 98 00 	sts	0x0098, r1
						OCR3B = 0;
    46da:	10 92 9b 00 	sts	0x009B, r1
    46de:	10 92 9a 00 	sts	0x009A, r1
				} else {
					cliffDetectedFlag = 0;
				}

			}			
			currentProx++;
    46e2:	6f 5f       	subi	r22, 0xFF	; 255
    46e4:	60 93 22 02 	sts	0x0222, r22
			if(currentProx > 23) {						// in total there are 8 proximity sensors and 4 ground sensors => 12 sensors
    46e8:	68 31       	cpi	r22, 0x18	; 24
    46ea:	08 f4       	brcc	.+2      	; 0x46ee <__vector_29+0x288>
    46ec:	4a cf       	rjmp	.-364    	; 0x4582 <__vector_29+0x11c>
				currentProx = 0;						// for each one there is a passive phase in which the ambient light is sampled,
    46ee:	10 92 22 02 	sts	0x0222, r1
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
    46f2:	81 e0       	ldi	r24, 0x01	; 1
    46f4:	80 93 90 02 	sts	0x0290, r24
    46f8:	44 cf       	rjmp	.-376    	; 0x4582 <__vector_29+0x11c>
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    46fa:	26 30       	cpi	r18, 0x06	; 6
    46fc:	09 f0       	breq	.+2      	; 0x4700 <__vector_29+0x29a>
    46fe:	41 cf       	rjmp	.-382    	; 0x4582 <__vector_29+0x11c>
		case SAVE_TO_PROX_IRCOMM:
			irCommProxValuesAdc[currentProx+irCommRxWindowSamples*8] = value;
    4700:	20 91 95 04 	lds	r18, 0x0495
    4704:	30 e0       	ldi	r19, 0x00	; 0
    4706:	40 91 22 02 	lds	r20, 0x0222
    470a:	22 0f       	add	r18, r18
    470c:	33 1f       	adc	r19, r19
    470e:	22 0f       	add	r18, r18
    4710:	33 1f       	adc	r19, r19
    4712:	22 0f       	add	r18, r18
    4714:	33 1f       	adc	r19, r19
    4716:	24 0f       	add	r18, r20
    4718:	31 1d       	adc	r19, r1
    471a:	22 0f       	add	r18, r18
    471c:	33 1f       	adc	r19, r19
    471e:	e0 91 79 07 	lds	r30, 0x0779
    4722:	f0 91 7a 07 	lds	r31, 0x077A
    4726:	e2 0f       	add	r30, r18
    4728:	f3 1f       	adc	r31, r19
    472a:	91 83       	std	Z+1, r25	; 0x01
    472c:	80 83       	st	Z, r24
			// get the min and max values in the sampling window for all the sensors
			if(irCommMaxSensorValueAdc[currentProx] < value) {
    472e:	60 91 22 02 	lds	r22, 0x0222
    4732:	26 2f       	mov	r18, r22
    4734:	30 e0       	ldi	r19, 0x00	; 0
    4736:	22 0f       	add	r18, r18
    4738:	33 1f       	adc	r19, r19
    473a:	e0 91 59 08 	lds	r30, 0x0859
    473e:	f0 91 5a 08 	lds	r31, 0x085A
    4742:	e2 0f       	add	r30, r18
    4744:	f3 1f       	adc	r31, r19
    4746:	40 81       	ld	r20, Z
    4748:	51 81       	ldd	r21, Z+1	; 0x01
    474a:	48 17       	cp	r20, r24
    474c:	59 07       	cpc	r21, r25
    474e:	40 f4       	brcc	.+16     	; 0x4760 <__vector_29+0x2fa>
				irCommMaxSensorValueAdc[currentProx] = value;
    4750:	91 83       	std	Z+1, r25	; 0x01
    4752:	80 83       	st	Z, r24
    4754:	60 91 22 02 	lds	r22, 0x0222
    4758:	26 2f       	mov	r18, r22
    475a:	30 e0       	ldi	r19, 0x00	; 0
    475c:	22 0f       	add	r18, r18
    475e:	33 1f       	adc	r19, r19
			}
			if(irCommMinSensorValueAdc[currentProx] > value) {
    4760:	e0 91 e5 04 	lds	r30, 0x04E5
    4764:	f0 91 e6 04 	lds	r31, 0x04E6
    4768:	e2 0f       	add	r30, r18
    476a:	f3 1f       	adc	r31, r19
    476c:	20 81       	ld	r18, Z
    476e:	31 81       	ldd	r19, Z+1	; 0x01
    4770:	82 17       	cp	r24, r18
    4772:	93 07       	cpc	r25, r19
    4774:	20 f4       	brcc	.+8      	; 0x477e <__vector_29+0x318>
				irCommMinSensorValueAdc[currentProx] = value;
    4776:	91 83       	std	Z+1, r25	; 0x01
    4778:	80 83       	st	Z, r24
    477a:	60 91 22 02 	lds	r22, 0x0222
			}
			currentProx++;
    477e:	6f 5f       	subi	r22, 0xFF	; 255
    4780:	60 93 22 02 	sts	0x0222, r22
			break;
    4784:	fe ce       	rjmp	.-516    	; 0x4582 <__vector_29+0x11c>
					} else {
						if(hardwareRevision == HW_REV_3_0) {
							PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
						}

						if(hardwareRevision == HW_REV_3_0_1) {
    4786:	21 30       	cpi	r18, 0x01	; 1
    4788:	11 f0       	breq	.+4      	; 0x478e <__vector_29+0x328>
							PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
						}

						if(hardwareRevision == HW_REV_3_1) {
    478a:	22 30       	cpi	r18, 0x02	; 2
    478c:	81 f4       	brne	.+32     	; 0x47ae <__vector_29+0x348>
							PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
    478e:	40 91 05 01 	lds	r20, 0x0105
    4792:	40 97       	sbiw	r24, 0x10	; 16
    4794:	95 95       	asr	r25
    4796:	87 95       	ror	r24
    4798:	21 e0       	ldi	r18, 0x01	; 1
    479a:	30 e0       	ldi	r19, 0x00	; 0
    479c:	02 c0       	rjmp	.+4      	; 0x47a2 <__vector_29+0x33c>
    479e:	22 0f       	add	r18, r18
    47a0:	33 1f       	adc	r19, r19
    47a2:	8a 95       	dec	r24
    47a4:	e2 f7       	brpl	.-8      	; 0x479e <__vector_29+0x338>
    47a6:	20 95       	com	r18
    47a8:	24 23       	and	r18, r20
    47aa:	20 93 05 01 	sts	0x0105, r18
    47ae:	80 91 8a 02 	lds	r24, 0x028A
	
	}

	// channel selection in the adc register; continuously manually change the channel 
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
    47b2:	90 91 21 02 	lds	r25, 0x0221
    47b6:	98 30       	cpi	r25, 0x08	; 8
    47b8:	f8 f4       	brcc	.+62     	; 0x47f8 <__vector_29+0x392>
		ADCSRB &= ~(1 << MUX5);
    47ba:	90 91 7b 00 	lds	r25, 0x007B
    47be:	97 7f       	andi	r25, 0xF7	; 247
    47c0:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + currentAdChannel;
    47c4:	90 91 21 02 	lds	r25, 0x0221
    47c8:	90 5c       	subi	r25, 0xC0	; 192
    47ca:	90 93 7c 00 	sts	0x007C, r25
		ADCSRB |= (1 << MUX5);
		ADMUX = 0x40 + (currentAdChannel-8);
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if((adcSamplingState==2) && (irCommMode==IRCOMM_MODE_SENSORS_SAMPLING)) {
    47ce:	82 30       	cpi	r24, 0x02	; 2
    47d0:	f9 f0       	breq	.+62     	; 0x4810 <__vector_29+0x3aa>

	}

	//LED_BLUE_OFF;

}
    47d2:	ff 91       	pop	r31
    47d4:	ef 91       	pop	r30
    47d6:	bf 91       	pop	r27
    47d8:	af 91       	pop	r26
    47da:	9f 91       	pop	r25
    47dc:	8f 91       	pop	r24
    47de:	7f 91       	pop	r23
    47e0:	6f 91       	pop	r22
    47e2:	5f 91       	pop	r21
    47e4:	4f 91       	pop	r20
    47e6:	3f 91       	pop	r19
    47e8:	2f 91       	pop	r18
    47ea:	0f 90       	pop	r0
    47ec:	0b be       	out	0x3b, r0	; 59
    47ee:	0f 90       	pop	r0
    47f0:	0f be       	out	0x3f, r0	; 63
    47f2:	0f 90       	pop	r0
    47f4:	1f 90       	pop	r1
    47f6:	18 95       	reti
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
		ADCSRB &= ~(1 << MUX5);
		ADMUX = 0x40 + currentAdChannel;
	} else {						// MUX5=1 + ADMUX=0..7 => adc channel=8..15
		ADCSRB |= (1 << MUX5);
    47f8:	90 91 7b 00 	lds	r25, 0x007B
    47fc:	98 60       	ori	r25, 0x08	; 8
    47fe:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + (currentAdChannel-8);
    4802:	90 91 21 02 	lds	r25, 0x0221
    4806:	98 5c       	subi	r25, 0xC8	; 200
    4808:	90 93 7c 00 	sts	0x007C, r25
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if((adcSamplingState==2) && (irCommMode==IRCOMM_MODE_SENSORS_SAMPLING)) {
    480c:	82 30       	cpi	r24, 0x02	; 2
    480e:	09 f7       	brne	.-62     	; 0x47d2 <__vector_29+0x36c>
    4810:	80 91 93 04 	lds	r24, 0x0493
    4814:	88 23       	and	r24, r24
    4816:	e9 f6       	brne	.-70     	; 0x47d2 <__vector_29+0x36c>

		if(hardwareRevision == HW_REV_3_0) {
    4818:	20 91 1d 04 	lds	r18, 0x041D
    481c:	22 23       	and	r18, r18
    481e:	39 f4       	brne	.+14     	; 0x482e <__vector_29+0x3c8>
			PORTJ &= 0xF0;
    4820:	80 91 05 01 	lds	r24, 0x0105
    4824:	80 7f       	andi	r24, 0xF0	; 240
    4826:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    482a:	12 b8       	out	0x02, r1	; 2
    482c:	d2 cf       	rjmp	.-92     	; 0x47d2 <__vector_29+0x36c>
			//#warning "turn off pulse with 0 (hw rev 3.0)"
		}

		if(hardwareRevision == HW_REV_3_0_1) {
    482e:	21 30       	cpi	r18, 0x01	; 1
    4830:	11 f0       	breq	.+4      	; 0x4836 <__vector_29+0x3d0>
			PORTJ = 0xFF;
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0.1)"
		}

		if(hardwareRevision == HW_REV_3_1) {
    4832:	22 30       	cpi	r18, 0x02	; 2
    4834:	71 f6       	brne	.-100    	; 0x47d2 <__vector_29+0x36c>
			PORTJ = 0xFF;
    4836:	8f ef       	ldi	r24, 0xFF	; 255
    4838:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    483c:	12 b8       	out	0x02, r1	; 2
    483e:	c9 cf       	rjmp	.-110    	; 0x47d2 <__vector_29+0x36c>
			case 3:
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(adcSamplingState) {
    4840:	80 91 8a 02 	lds	r24, 0x028A
    4844:	85 30       	cpi	r24, 0x05	; 5
    4846:	09 f4       	brne	.+2      	; 0x484a <__vector_29+0x3e4>
    4848:	f1 c2       	rjmp	.+1506   	; 0x4e2c <__vector_29+0x9c6>
    484a:	86 30       	cpi	r24, 0x06	; 6
    484c:	08 f0       	brcs	.+2      	; 0x4850 <__vector_29+0x3ea>
    484e:	ca c0       	rjmp	.+404    	; 0x49e4 <__vector_29+0x57e>
    4850:	82 30       	cpi	r24, 0x02	; 2
    4852:	09 f4       	brne	.+2      	; 0x4856 <__vector_29+0x3f0>
    4854:	4d c2       	rjmp	.+1178   	; 0x4cf0 <__vector_29+0x88a>
    4856:	83 30       	cpi	r24, 0x03	; 3
    4858:	08 f4       	brcc	.+2      	; 0x485c <__vector_29+0x3f6>
    485a:	47 c1       	rjmp	.+654    	; 0x4aea <__vector_29+0x684>
    485c:	83 30       	cpi	r24, 0x03	; 3
    485e:	09 f4       	brne	.+2      	; 0x4862 <__vector_29+0x3fc>
    4860:	30 c2       	rjmp	.+1120   	; 0x4cc2 <__vector_29+0x85c>
    4862:	84 30       	cpi	r24, 0x04	; 4
    4864:	09 f0       	breq	.+2      	; 0x4868 <__vector_29+0x402>
    4866:	a5 cf       	rjmp	.-182    	; 0x47b2 <__vector_29+0x34c>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				adcSamplingState = 4;
				break;

			case 4:
				currentAdChannel = currentProx+1;
    4868:	80 91 22 02 	lds	r24, 0x0222
    486c:	8f 5f       	subi	r24, 0xFF	; 255
    486e:	80 93 21 02 	sts	0x0221, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    4872:	86 e0       	ldi	r24, 0x06	; 6
    4874:	80 93 89 02 	sts	0x0289, r24
				adcSamplingState = 5;
    4878:	85 e0       	ldi	r24, 0x05	; 5
    487a:	80 93 8a 02 	sts	0x028A, r24
				break;
    487e:	99 cf       	rjmp	.-206    	; 0x47b2 <__vector_29+0x34c>
			right_current_avg += value;
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
			break;

		case SAVE_TO_RIGHT_MOTOR_VEL:
			if(firstSampleRight > 0) {
    4880:	20 91 09 02 	lds	r18, 0x0209
    4884:	22 23       	and	r18, r18
    4886:	09 f4       	brne	.+2      	; 0x488a <__vector_29+0x424>
    4888:	7c ce       	rjmp	.-776    	; 0x4582 <__vector_29+0x11c>
			    // sometimes it was noticed that the velocity is sampled even if the pwm
			    // is in its active phase; as a workaround simply skip the samples in these
			    // cases
				if(((PINE & _BV(PE3))>>3) || ((PINE & _BV(PE4))>>4)) {  // if active phase for either forward or backward direction
    488a:	63 99       	sbic	0x0c, 3	; 12
    488c:	7a ce       	rjmp	.-780    	; 0x4582 <__vector_29+0x11c>
    488e:	64 99       	sbic	0x0c, 4	; 12
    4890:	78 ce       	rjmp	.-784    	; 0x4582 <__vector_29+0x11c>
					//LED_RED_ON;
					break;
				}
				firstSampleRight++;
    4892:	42 2f       	mov	r20, r18
    4894:	4f 5f       	subi	r20, 0xFF	; 255
    4896:	40 93 09 02 	sts	0x0209, r20
				if(firstSampleRight > 4) {				// to skip undesired samples (3 samples skipped) in which there could be glitches
    489a:	45 30       	cpi	r20, 0x05	; 5
    489c:	08 f4       	brcc	.+2      	; 0x48a0 <__vector_29+0x43a>
    489e:	71 ce       	rjmp	.-798    	; 0x4582 <__vector_29+0x11c>
					if(pwm_right != 0) {
    48a0:	20 91 c5 02 	lds	r18, 0x02C5
    48a4:	30 91 c6 02 	lds	r19, 0x02C6
    48a8:	21 15       	cp	r18, r1
    48aa:	31 05       	cpc	r19, r1
    48ac:	51 f0       	breq	.+20     	; 0x48c2 <__vector_29+0x45c>
						right_vel_sum += value;
    48ae:	20 91 bf 02 	lds	r18, 0x02BF
    48b2:	30 91 c0 02 	lds	r19, 0x02C0
    48b6:	28 0f       	add	r18, r24
    48b8:	39 1f       	adc	r19, r25
    48ba:	30 93 c0 02 	sts	0x02C0, r19
    48be:	20 93 bf 02 	sts	0x02BF, r18
					}
					if(firstSampleRight==8) {			// number of samples to take for the speed computation (average of 4 samples)
    48c2:	48 30       	cpi	r20, 0x08	; 8
    48c4:	09 f0       	breq	.+2      	; 0x48c8 <__vector_29+0x462>
    48c6:	5d ce       	rjmp	.-838    	; 0x4582 <__vector_29+0x11c>
						firstSampleRight = 0;
    48c8:	10 92 09 02 	sts	0x0209, r1
						compute_right_vel = 1;
    48cc:	81 e0       	ldi	r24, 0x01	; 1
    48ce:	80 93 08 02 	sts	0x0208, r24
    48d2:	57 ce       	rjmp	.-850    	; 0x4582 <__vector_29+0x11c>
			left_current_avg += value;
			left_current_avg = left_current_avg >> 1;
			break;

		case SAVE_TO_LEFT_MOTOR_VEL:
			if(firstSampleLeft > 0) {
    48d4:	20 91 0a 02 	lds	r18, 0x020A
    48d8:	22 23       	and	r18, r18
    48da:	09 f4       	brne	.+2      	; 0x48de <__vector_29+0x478>
    48dc:	52 ce       	rjmp	.-860    	; 0x4582 <__vector_29+0x11c>
				if(((PINH & _BV(PH3))>>3) || ((PINH & _BV(PH4))>>4)) {
    48de:	30 91 00 01 	lds	r19, 0x0100
    48e2:	33 fd       	sbrc	r19, 3
    48e4:	4e ce       	rjmp	.-868    	; 0x4582 <__vector_29+0x11c>
    48e6:	30 91 00 01 	lds	r19, 0x0100
    48ea:	34 fd       	sbrc	r19, 4
    48ec:	4a ce       	rjmp	.-876    	; 0x4582 <__vector_29+0x11c>
					//LED_RED_ON;
					break;
				}
				firstSampleLeft++;
    48ee:	42 2f       	mov	r20, r18
    48f0:	4f 5f       	subi	r20, 0xFF	; 255
    48f2:	40 93 0a 02 	sts	0x020A, r20
				if(firstSampleLeft > 4) {
    48f6:	45 30       	cpi	r20, 0x05	; 5
    48f8:	08 f4       	brcc	.+2      	; 0x48fc <__vector_29+0x496>
    48fa:	43 ce       	rjmp	.-890    	; 0x4582 <__vector_29+0x11c>
					if(pwm_left != 0) {
    48fc:	20 91 c7 02 	lds	r18, 0x02C7
    4900:	30 91 c8 02 	lds	r19, 0x02C8
    4904:	21 15       	cp	r18, r1
    4906:	31 05       	cpc	r19, r1
    4908:	51 f0       	breq	.+20     	; 0x491e <__vector_29+0x4b8>
						left_vel_sum += value;
    490a:	20 91 bd 02 	lds	r18, 0x02BD
    490e:	30 91 be 02 	lds	r19, 0x02BE
    4912:	28 0f       	add	r18, r24
    4914:	39 1f       	adc	r19, r25
    4916:	30 93 be 02 	sts	0x02BE, r19
    491a:	20 93 bd 02 	sts	0x02BD, r18
					}
					if(firstSampleLeft==8) {
    491e:	48 30       	cpi	r20, 0x08	; 8
    4920:	09 f0       	breq	.+2      	; 0x4924 <__vector_29+0x4be>
    4922:	2f ce       	rjmp	.-930    	; 0x4582 <__vector_29+0x11c>
						firstSampleLeft = 0;
    4924:	10 92 0a 02 	sts	0x020A, r1
						compute_left_vel = 1;
    4928:	81 e0       	ldi	r24, 0x01	; 1
    492a:	80 93 07 02 	sts	0x0207, r24
    492e:	29 ce       	rjmp	.-942    	; 0x4582 <__vector_29+0x11c>
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
		switch(irCommAdcTxState) {
    4930:	42 30       	cpi	r20, 0x02	; 2
    4932:	09 f0       	breq	.+2      	; 0x4936 <__vector_29+0x4d0>
    4934:	3c cf       	rjmp	.-392    	; 0x47ae <__vector_29+0x348>
				}
				irCommAdcTxState = 2;
				break;

			case 2:
				irCommTxDurationCycle++;
    4936:	20 91 b5 04 	lds	r18, 0x04B5
    493a:	2f 5f       	subi	r18, 0xFF	; 255
    493c:	20 93 b5 04 	sts	0x04B5, r18
				if(irCommTxDurationCycle == irCommTxDuration) {
    4940:	30 e0       	ldi	r19, 0x00	; 0
    4942:	80 91 b0 04 	lds	r24, 0x04B0
    4946:	90 91 b1 04 	lds	r25, 0x04B1
    494a:	28 17       	cp	r18, r24
    494c:	39 07       	cpc	r19, r25
    494e:	09 f4       	brne	.+2      	; 0x4952 <__vector_29+0x4ec>
    4950:	42 c1       	rjmp	.+644    	; 0x4bd6 <__vector_29+0x770>
						PORTA = 0x00;
						adcSaveDataTo = SKIP_SAMPLE;
						break;
					}
				}
				currentAdChannel = currentMotLeftChannel;
    4952:	80 91 23 02 	lds	r24, 0x0223
    4956:	80 93 21 02 	sts	0x0221, r24
				leftChannelPhase = leftMotorPhase;
    495a:	80 91 26 02 	lds	r24, 0x0226
    495e:	80 93 8c 02 	sts	0x028C, r24
				if(rightChannelPhase == ACTIVE_PHASE) {
    4962:	80 91 8b 02 	lds	r24, 0x028B
    4966:	88 23       	and	r24, r24
    4968:	09 f4       	brne	.+2      	; 0x496c <__vector_29+0x506>
    496a:	a6 c0       	rjmp	.+332    	; 0x4ab8 <__vector_29+0x652>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    496c:	81 30       	cpi	r24, 0x01	; 1
    496e:	09 f4       	brne	.+2      	; 0x4972 <__vector_29+0x50c>
    4970:	a0 c2       	rjmp	.+1344   	; 0x4eb2 <__vector_29+0xa4c>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4972:	85 e0       	ldi	r24, 0x05	; 5
    4974:	80 93 89 02 	sts	0x0289, r24
				}
				irCommAdcTxState = 1;
    4978:	81 e0       	ldi	r24, 0x01	; 1
    497a:	80 93 af 04 	sts	0x04AF, r24
    497e:	80 91 8a 02 	lds	r24, 0x028A
				break;
    4982:	17 cf       	rjmp	.-466    	; 0x47b2 <__vector_29+0x34c>
			case 12:
				break;

		}
	} else if(irCommMode==IRCOMM_MODE_SENSORS_SAMPLING) {
		switch(adcSamplingState) {
    4984:	83 30       	cpi	r24, 0x03	; 3
    4986:	09 f4       	brne	.+2      	; 0x498a <__vector_29+0x524>
    4988:	d0 c0       	rjmp	.+416    	; 0x4b2a <__vector_29+0x6c4>
    498a:	84 30       	cpi	r24, 0x04	; 4
    498c:	09 f0       	breq	.+2      	; 0x4990 <__vector_29+0x52a>
    498e:	11 cf       	rjmp	.-478    	; 0x47b2 <__vector_29+0x34c>
				}
				adcSamplingState = 4;
				break;

			case 4:	// right motor
				currentAdChannel = currentMotRightChannel;
    4990:	90 91 24 02 	lds	r25, 0x0224
    4994:	90 93 21 02 	sts	0x0221, r25
				rightChannelPhase = rightMotorPhase;
    4998:	90 91 25 02 	lds	r25, 0x0225
    499c:	90 93 8b 02 	sts	0x028B, r25
				if(leftChannelPhase == ACTIVE_PHASE) {
    49a0:	90 91 8c 02 	lds	r25, 0x028C
    49a4:	99 23       	and	r25, r25
    49a6:	09 f0       	breq	.+2      	; 0x49aa <__vector_29+0x544>
    49a8:	02 c1       	rjmp	.+516    	; 0x4bae <__vector_29+0x748>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    49aa:	83 e0       	ldi	r24, 0x03	; 3
    49ac:	80 93 89 02 	sts	0x0289, r24
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 0;
    49b0:	10 92 8a 02 	sts	0x028A, r1

				if(currentProx==14 && measBattery==1) {
    49b4:	60 91 22 02 	lds	r22, 0x0222
    49b8:	6e 30       	cpi	r22, 0x0E	; 14
    49ba:	09 f4       	brne	.+2      	; 0x49be <__vector_29+0x558>
    49bc:	53 c2       	rjmp	.+1190   	; 0x4e64 <__vector_29+0x9fe>
					measBattery=2;
					SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
				}

				// turn on the IR pulses for the proximities only in their active phases
				if(currentProx & 0x01) {
    49be:	86 2f       	mov	r24, r22
    49c0:	90 e0       	ldi	r25, 0x00	; 0
    49c2:	60 ff       	sbrs	r22, 0
    49c4:	f4 ce       	rjmp	.-536    	; 0x47ae <__vector_29+0x348>
					if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
    49c6:	60 31       	cpi	r22, 0x10	; 16
    49c8:	08 f0       	brcs	.+2      	; 0x49cc <__vector_29+0x566>
    49ca:	53 c2       	rjmp	.+1190   	; 0x4e72 <__vector_29+0xa0c>
											// PORTA for proximity sensors, PORTJ for ground sensors
						PORTA = (1 << (currentProx>>1));	// pulse on
    49cc:	66 95       	lsr	r22
    49ce:	81 e0       	ldi	r24, 0x01	; 1
    49d0:	90 e0       	ldi	r25, 0x00	; 0
    49d2:	02 c0       	rjmp	.+4      	; 0x49d8 <__vector_29+0x572>
    49d4:	88 0f       	add	r24, r24
    49d6:	99 1f       	adc	r25, r25
    49d8:	6a 95       	dec	r22
    49da:	e2 f7       	brpl	.-8      	; 0x49d4 <__vector_29+0x56e>
    49dc:	82 b9       	out	0x02, r24	; 2
    49de:	80 91 8a 02 	lds	r24, 0x028A
    49e2:	e7 ce       	rjmp	.-562    	; 0x47b2 <__vector_29+0x34c>
			case 3:
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(adcSamplingState) {
    49e4:	88 30       	cpi	r24, 0x08	; 8
    49e6:	09 f4       	brne	.+2      	; 0x49ea <__vector_29+0x584>
    49e8:	4d c1       	rjmp	.+666    	; 0x4c84 <__vector_29+0x81e>
    49ea:	89 30       	cpi	r24, 0x09	; 9
    49ec:	08 f4       	brcc	.+2      	; 0x49f0 <__vector_29+0x58a>
    49ee:	68 c0       	rjmp	.+208    	; 0x4ac0 <__vector_29+0x65a>
    49f0:	8a 30       	cpi	r24, 0x0A	; 10
    49f2:	09 f4       	brne	.+2      	; 0x49f6 <__vector_29+0x590>
    49f4:	9c c1       	rjmp	.+824    	; 0x4d2e <__vector_29+0x8c8>
    49f6:	8a 30       	cpi	r24, 0x0A	; 10
    49f8:	08 f4       	brcc	.+2      	; 0x49fc <__vector_29+0x596>
    49fa:	86 c1       	rjmp	.+780    	; 0x4d08 <__vector_29+0x8a2>
    49fc:	8b 30       	cpi	r24, 0x0B	; 11
    49fe:	09 f0       	breq	.+2      	; 0x4a02 <__vector_29+0x59c>
    4a00:	d8 ce       	rjmp	.-592    	; 0x47b2 <__vector_29+0x34c>
					}
				}
				break;

			case 11:
				currentAdChannel = 0;	// prox0
    4a02:	10 92 21 02 	sts	0x0221, r1
				if(rightChannelPhase == ACTIVE_PHASE) {
    4a06:	80 91 8b 02 	lds	r24, 0x028B
    4a0a:	88 23       	and	r24, r24
    4a0c:	09 f0       	breq	.+2      	; 0x4a10 <__vector_29+0x5aa>
    4a0e:	7c c2       	rjmp	.+1272   	; 0x4f08 <__vector_29+0xaa2>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    4a10:	81 e0       	ldi	r24, 0x01	; 1
    4a12:	80 93 89 02 	sts	0x0289, r24
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 0;
    4a16:	10 92 8a 02 	sts	0x028A, r1
    4a1a:	80 e0       	ldi	r24, 0x00	; 0
				break;
    4a1c:	ca ce       	rjmp	.-620    	; 0x47b2 <__vector_29+0x34c>
				irCommTxWaitStartTime = getTime100MicroSec();
				irCommAdcTxState = 3;
				break;

			case 1:
				irCommTxDurationCycle++;
    4a1e:	20 91 b5 04 	lds	r18, 0x04B5
    4a22:	2f 5f       	subi	r18, 0xFF	; 255
    4a24:	20 93 b5 04 	sts	0x04B5, r18
				if(irCommTxDurationCycle == irCommTxDuration) {
    4a28:	30 e0       	ldi	r19, 0x00	; 0
    4a2a:	80 91 b0 04 	lds	r24, 0x04B0
    4a2e:	90 91 b1 04 	lds	r25, 0x04B1
    4a32:	28 17       	cp	r18, r24
    4a34:	39 07       	cpc	r19, r25
    4a36:	09 f4       	brne	.+2      	; 0x4a3a <__vector_29+0x5d4>
    4a38:	f8 c0       	rjmp	.+496    	; 0x4c2a <__vector_29+0x7c4>
						PORTA = 0x00;
						adcSaveDataTo = SKIP_SAMPLE;
						break;
					}
				}	
				currentAdChannel = currentMotRightChannel;
    4a3a:	80 91 24 02 	lds	r24, 0x0224
    4a3e:	80 93 21 02 	sts	0x0221, r24
				rightChannelPhase = rightMotorPhase;
    4a42:	80 91 25 02 	lds	r24, 0x0225
    4a46:	80 93 8b 02 	sts	0x028B, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    4a4a:	80 91 8c 02 	lds	r24, 0x028C
    4a4e:	88 23       	and	r24, r24
    4a50:	79 f1       	breq	.+94     	; 0x4ab0 <__vector_29+0x64a>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    4a52:	81 30       	cpi	r24, 0x01	; 1
    4a54:	09 f4       	brne	.+2      	; 0x4a58 <__vector_29+0x5f2>
    4a56:	29 c2       	rjmp	.+1106   	; 0x4eaa <__vector_29+0xa44>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4a58:	85 e0       	ldi	r24, 0x05	; 5
    4a5a:	80 93 89 02 	sts	0x0289, r24
				}
				irCommAdcTxState = 2;
    4a5e:	82 e0       	ldi	r24, 0x02	; 2
    4a60:	80 93 af 04 	sts	0x04AF, r24
    4a64:	80 91 8a 02 	lds	r24, 0x028A
				break;
    4a68:	a4 ce       	rjmp	.-696    	; 0x47b2 <__vector_29+0x34c>
			case 12:
				break;

		}
	} else if(irCommMode==IRCOMM_MODE_SENSORS_SAMPLING) {
		switch(adcSamplingState) {
    4a6a:	81 30       	cpi	r24, 0x01	; 1
    4a6c:	09 f0       	breq	.+2      	; 0x4a70 <__vector_29+0x60a>
    4a6e:	a1 ce       	rjmp	.-702    	; 0x47b2 <__vector_29+0x34c>
				}
				adcSamplingState = 1;
				break;

			case 1:	// left motor
				currentAdChannel = currentMotLeftChannel;
    4a70:	90 91 23 02 	lds	r25, 0x0223
    4a74:	90 93 21 02 	sts	0x0221, r25
				leftChannelPhase = leftMotorPhase;
    4a78:	90 91 26 02 	lds	r25, 0x0226
    4a7c:	90 93 8c 02 	sts	0x028C, r25
				adcSaveDataTo = SAVE_TO_PROX;
    4a80:	10 92 89 02 	sts	0x0289, r1
				adcSamplingState = 2;
    4a84:	92 e0       	ldi	r25, 0x02	; 2
    4a86:	90 93 8a 02 	sts	0x028A, r25
				if(irCommEnabled==IRCOMM_MODE_RECEIVE && currentProx==23) {
    4a8a:	90 91 92 04 	lds	r25, 0x0492
    4a8e:	91 30       	cpi	r25, 0x01	; 1
    4a90:	09 f4       	brne	.+2      	; 0x4a94 <__vector_29+0x62e>
    4a92:	d7 c1       	rjmp	.+942    	; 0x4e42 <__vector_29+0x9dc>
					currentAdChannel = 0;	// prox0
					adcSamplingState = 0;
					measBattery = 0;
					irCommRxWindowSamples = 0;					
				}
				if(irCommEnabled==IRCOMM_MODE_TRANSMIT && currentProx==23) {
    4a94:	92 30       	cpi	r25, 0x02	; 2
    4a96:	d9 f1       	breq	.+118    	; 0x4b0e <__vector_29+0x6a8>
    4a98:	82 e0       	ldi	r24, 0x02	; 2
    4a9a:	8b ce       	rjmp	.-746    	; 0x47b2 <__vector_29+0x34c>
					} else {
						cliffDetectedFlag = 0;
						//LED_RED_OFF;
					}
				} else {
					cliffDetectedFlag = 0;
    4a9c:	10 92 3c 04 	sts	0x043C, r1
    4aa0:	20 ce       	rjmp	.-960    	; 0x46e2 <__vector_29+0x27c>
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
		switch(irCommAdcTxState) {
			case 0:
				// turn off all proximity
				if(hardwareRevision == HW_REV_3_0) {
					PORTJ &= 0xF0;	// ground
    4aa2:	80 91 05 01 	lds	r24, 0x0105
    4aa6:	80 7f       	andi	r24, 0xF0	; 240
    4aa8:	80 93 05 01 	sts	0x0105, r24
					PORTA = 0x00;	// proximity
    4aac:	12 b8       	out	0x02, r1	; 2
    4aae:	3c cd       	rjmp	.-1416   	; 0x4528 <__vector_29+0xc2>
					}
				}	
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    4ab0:	83 e0       	ldi	r24, 0x03	; 3
    4ab2:	80 93 89 02 	sts	0x0289, r24
    4ab6:	d3 cf       	rjmp	.-90     	; 0x4a5e <__vector_29+0x5f8>
					}
				}
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    4ab8:	81 e0       	ldi	r24, 0x01	; 1
    4aba:	80 93 89 02 	sts	0x0289, r24
    4abe:	5c cf       	rjmp	.-328    	; 0x4978 <__vector_29+0x512>
			case 3:
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(adcSamplingState) {
    4ac0:	86 30       	cpi	r24, 0x06	; 6
    4ac2:	09 f4       	brne	.+2      	; 0x4ac6 <__vector_29+0x660>
    4ac4:	f3 c0       	rjmp	.+486    	; 0x4cac <__vector_29+0x846>
    4ac6:	87 30       	cpi	r24, 0x07	; 7
    4ac8:	09 f0       	breq	.+2      	; 0x4acc <__vector_29+0x666>
    4aca:	73 ce       	rjmp	.-794    	; 0x47b2 <__vector_29+0x34c>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				adcSamplingState = 7;
				break;

			case 7:
				currentAdChannel = currentMotLeftChannel;
    4acc:	80 91 23 02 	lds	r24, 0x0223
    4ad0:	80 93 21 02 	sts	0x0221, r24
				leftChannelPhase = leftMotorPhase;
    4ad4:	80 91 26 02 	lds	r24, 0x0226
    4ad8:	80 93 8c 02 	sts	0x028C, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    4adc:	86 e0       	ldi	r24, 0x06	; 6
    4ade:	80 93 89 02 	sts	0x0289, r24
				adcSamplingState = 8;
    4ae2:	88 e0       	ldi	r24, 0x08	; 8
    4ae4:	80 93 8a 02 	sts	0x028A, r24
				break;
    4ae8:	64 ce       	rjmp	.-824    	; 0x47b2 <__vector_29+0x34c>
			case 3:
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(adcSamplingState) {
    4aea:	88 23       	and	r24, r24
    4aec:	09 f4       	brne	.+2      	; 0x4af0 <__vector_29+0x68a>
    4aee:	f5 c0       	rjmp	.+490    	; 0x4cda <__vector_29+0x874>
    4af0:	81 30       	cpi	r24, 0x01	; 1
    4af2:	09 f0       	breq	.+2      	; 0x4af6 <__vector_29+0x690>
    4af4:	5e ce       	rjmp	.-836    	; 0x47b2 <__vector_29+0x34c>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				adcSamplingState = 1;
				break;

			case 1:
				currentAdChannel = currentProx+1;
    4af6:	80 91 22 02 	lds	r24, 0x0222
    4afa:	8f 5f       	subi	r24, 0xFF	; 255
    4afc:	80 93 21 02 	sts	0x0221, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    4b00:	86 e0       	ldi	r24, 0x06	; 6
    4b02:	80 93 89 02 	sts	0x0289, r24
				adcSamplingState = 2;
    4b06:	82 e0       	ldi	r24, 0x02	; 2
    4b08:	80 93 8a 02 	sts	0x028A, r24
				break;
    4b0c:	52 ce       	rjmp	.-860    	; 0x47b2 <__vector_29+0x34c>
					currentAdChannel = 0;	// prox0
					adcSamplingState = 0;
					measBattery = 0;
					irCommRxWindowSamples = 0;					
				}
				if(irCommEnabled==IRCOMM_MODE_TRANSMIT && currentProx==23) {
    4b0e:	80 91 22 02 	lds	r24, 0x0222
    4b12:	87 31       	cpi	r24, 0x17	; 23
    4b14:	09 f0       	breq	.+2      	; 0x4b18 <__vector_29+0x6b2>
    4b16:	4b ce       	rjmp	.-874    	; 0x47ae <__vector_29+0x348>
					irCommMode = IRCOMM_MODE_TRANSMIT;
    4b18:	82 e0       	ldi	r24, 0x02	; 2
    4b1a:	80 93 93 04 	sts	0x0493, r24
					irCommAdcTxState = 3;					
    4b1e:	83 e0       	ldi	r24, 0x03	; 3
    4b20:	80 93 af 04 	sts	0x04AF, r24
    4b24:	80 91 8a 02 	lds	r24, 0x028A
    4b28:	44 ce       	rjmp	.-888    	; 0x47b2 <__vector_29+0x34c>
				}
				adcSamplingState = 3;
				break;

			case 3:	// left motor
				currentAdChannel = currentMotLeftChannel;
    4b2a:	80 91 23 02 	lds	r24, 0x0223
    4b2e:	80 93 21 02 	sts	0x0221, r24
				leftChannelPhase = leftMotorPhase;
    4b32:	80 91 26 02 	lds	r24, 0x0226
    4b36:	80 93 8c 02 	sts	0x028C, r24
				if(rightChannelPhase == ACTIVE_PHASE) {
    4b3a:	80 91 8b 02 	lds	r24, 0x028B
    4b3e:	88 23       	and	r24, r24
    4b40:	09 f0       	breq	.+2      	; 0x4b44 <__vector_29+0x6de>
    4b42:	42 c0       	rjmp	.+132    	; 0x4bc8 <__vector_29+0x762>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    4b44:	81 e0       	ldi	r24, 0x01	; 1
    4b46:	80 93 89 02 	sts	0x0289, r24
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 4;
    4b4a:	84 e0       	ldi	r24, 0x04	; 4
    4b4c:	80 93 8a 02 	sts	0x028A, r24
				break;
    4b50:	30 ce       	rjmp	.-928    	; 0x47b2 <__vector_29+0x34c>
					irCommAdcTxState = 3;					
				}
				break;

			case 2:	// right motor
				currentAdChannel = currentMotRightChannel;
    4b52:	80 91 24 02 	lds	r24, 0x0224
    4b56:	80 93 21 02 	sts	0x0221, r24
				rightChannelPhase = rightMotorPhase;
    4b5a:	80 91 25 02 	lds	r24, 0x0225
    4b5e:	80 93 8b 02 	sts	0x028B, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    4b62:	80 91 8c 02 	lds	r24, 0x028C
    4b66:	88 23       	and	r24, r24
    4b68:	41 f5       	brne	.+80     	; 0x4bba <__vector_29+0x754>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    4b6a:	83 e0       	ldi	r24, 0x03	; 3
    4b6c:	80 93 89 02 	sts	0x0289, r24
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 3;
    4b70:	83 e0       	ldi	r24, 0x03	; 3
    4b72:	80 93 8a 02 	sts	0x028A, r24
				break;
    4b76:	1d ce       	rjmp	.-966    	; 0x47b2 <__vector_29+0x34c>
			}
			currentProx++;
			break;

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    4b78:	20 91 8f 02 	lds	r18, 0x028F
    4b7c:	22 30       	cpi	r18, 0x02	; 2
    4b7e:	09 f0       	breq	.+2      	; 0x4b82 <__vector_29+0x71c>
    4b80:	2c cd       	rjmp	.-1448   	; 0x45da <__vector_29+0x174>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
    4b82:	90 93 8e 02 	sts	0x028E, r25
    4b86:	80 93 8d 02 	sts	0x028D, r24
				measBattery = 0;
    4b8a:	10 92 8f 02 	sts	0x028F, r1
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
    4b8e:	46 98       	cbi	0x08, 6	; 8
    4b90:	2e e0       	ldi	r18, 0x0E	; 14
    4b92:	30 e0       	ldi	r19, 0x00	; 0
    4b94:	2b cd       	rjmp	.-1450   	; 0x45ec <__vector_29+0x186>
					PORTJ = 0xFF;	// ground
					PORTA = 0x00;	// proximity
				}

				if(hardwareRevision == HW_REV_3_1) {
					PORTJ = 0xFF;	// ground
    4b96:	8f ef       	ldi	r24, 0xFF	; 255
    4b98:	80 93 05 01 	sts	0x0105, r24
					PORTA = 0x00;	// proximtiy
    4b9c:	12 b8       	out	0x02, r1	; 2
    4b9e:	c4 cc       	rjmp	.-1656   	; 0x4528 <__vector_29+0xc2>
			case 0:	// proximity
				currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
																// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
				if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    4ba0:	81 30       	cpi	r24, 0x01	; 1
    4ba2:	09 f4       	brne	.+2      	; 0x4ba6 <__vector_29+0x740>
    4ba4:	c2 c1       	rjmp	.+900    	; 0x4f2a <__vector_29+0xac4>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4ba6:	85 e0       	ldi	r24, 0x05	; 5
    4ba8:	80 93 89 02 	sts	0x0289, r24
    4bac:	0d cd       	rjmp	.-1510   	; 0x45c8 <__vector_29+0x162>
			case 4:	// right motor
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    4bae:	91 30       	cpi	r25, 0x01	; 1
    4bb0:	09 f0       	breq	.+2      	; 0x4bb4 <__vector_29+0x74e>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4bb2:	85 e0       	ldi	r24, 0x05	; 5
    4bb4:	80 93 89 02 	sts	0x0289, r24
    4bb8:	fb ce       	rjmp	.-522    	; 0x49b0 <__vector_29+0x54a>
			case 2:	// right motor
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    4bba:	81 30       	cpi	r24, 0x01	; 1
    4bbc:	09 f4       	brne	.+2      	; 0x4bc0 <__vector_29+0x75a>
    4bbe:	b9 c1       	rjmp	.+882    	; 0x4f32 <__vector_29+0xacc>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4bc0:	85 e0       	ldi	r24, 0x05	; 5
    4bc2:	80 93 89 02 	sts	0x0289, r24
    4bc6:	d4 cf       	rjmp	.-88     	; 0x4b70 <__vector_29+0x70a>
			case 3:	// left motor
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    4bc8:	81 30       	cpi	r24, 0x01	; 1
    4bca:	09 f4       	brne	.+2      	; 0x4bce <__vector_29+0x768>
    4bcc:	aa c1       	rjmp	.+852    	; 0x4f22 <__vector_29+0xabc>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4bce:	85 e0       	ldi	r24, 0x05	; 5
    4bd0:	80 93 89 02 	sts	0x0289, r24
    4bd4:	ba cf       	rjmp	.-140    	; 0x4b4a <__vector_29+0x6e4>
				break;

			case 2:
				irCommTxDurationCycle++;
				if(irCommTxDurationCycle == irCommTxDuration) {
					irCommTxDurationCycle = 0;
    4bd6:	10 92 b5 04 	sts	0x04B5, r1
					if(irCommTxPulseState == 0) {
    4bda:	80 91 b2 04 	lds	r24, 0x04B2
    4bde:	88 23       	and	r24, r24
    4be0:	09 f0       	breq	.+2      	; 0x4be4 <__vector_29+0x77e>
    4be2:	5f c1       	rjmp	.+702    	; 0x4ea2 <__vector_29+0xa3c>
						irCommTxPulseState = 1;
    4be4:	81 e0       	ldi	r24, 0x01	; 1
    4be6:	80 93 b2 04 	sts	0x04B2, r24
						//PORTA = 0xFF;
						PORTA = 0x01;
    4bea:	82 b9       	out	0x02, r24	; 2
					} else {
						irCommTxPulseState = 0;
						PORTA = 0x00;
					}
					irCommTxSwitchCounter++;
    4bec:	80 91 b4 04 	lds	r24, 0x04B4
    4bf0:	8f 5f       	subi	r24, 0xFF	; 255
    4bf2:	80 93 b4 04 	sts	0x04B4, r24
					if(irCommTxSwitchCounter == irCommTxSwitchCount) {
    4bf6:	90 91 b3 04 	lds	r25, 0x04B3
    4bfa:	89 17       	cp	r24, r25
    4bfc:	09 f0       	breq	.+2      	; 0x4c00 <__vector_29+0x79a>
    4bfe:	a9 ce       	rjmp	.-686    	; 0x4952 <__vector_29+0x4ec>
						irCommTxBitCount++;
    4c00:	80 91 ba 04 	lds	r24, 0x04BA
    4c04:	8f 5f       	subi	r24, 0xFF	; 255
    4c06:	80 93 ba 04 	sts	0x04BA, r24
						if(irCommTxBitCount==12) {
    4c0a:	8c 30       	cpi	r24, 0x0C	; 12
    4c0c:	09 f4       	brne	.+2      	; 0x4c10 <__vector_29+0x7aa>
    4c0e:	d3 c1       	rjmp	.+934    	; 0x4fb6 <__vector_29+0xb50>
							irCommState = IRCOMM_TX_PREPARE_TRANSMISSION;
							irCommTxWaitStartTime = getTime100MicroSec();
							//irCommState = IRCOMM_TX_DO_NOTHING;
						} else {
							irCommState = IRCOMM_TX_COMPUTE_TIMINGS;
    4c10:	82 e0       	ldi	r24, 0x02	; 2
    4c12:	80 93 94 04 	sts	0x0494, r24
						}
						irCommAdcTxState = 3;
    4c16:	83 e0       	ldi	r24, 0x03	; 3
    4c18:	80 93 af 04 	sts	0x04AF, r24
						PORTA = 0x00;
    4c1c:	12 b8       	out	0x02, r1	; 2
						adcSaveDataTo = SKIP_SAMPLE;
    4c1e:	85 e0       	ldi	r24, 0x05	; 5
    4c20:	80 93 89 02 	sts	0x0289, r24
    4c24:	80 91 8a 02 	lds	r24, 0x028A
						break;
    4c28:	c4 cd       	rjmp	.-1144   	; 0x47b2 <__vector_29+0x34c>
				break;

			case 1:
				irCommTxDurationCycle++;
				if(irCommTxDurationCycle == irCommTxDuration) {
					irCommTxDurationCycle = 0;
    4c2a:	10 92 b5 04 	sts	0x04B5, r1
					if(irCommTxPulseState == 0) {
    4c2e:	80 91 b2 04 	lds	r24, 0x04B2
    4c32:	88 23       	and	r24, r24
    4c34:	09 f0       	breq	.+2      	; 0x4c38 <__vector_29+0x7d2>
    4c36:	31 c1       	rjmp	.+610    	; 0x4e9a <__vector_29+0xa34>
						irCommTxPulseState = 1;
    4c38:	40 93 b2 04 	sts	0x04B2, r20
						//PORTA = 0xFF;
						PORTA = 0x01;
    4c3c:	42 b9       	out	0x02, r20	; 2
					} else {
						irCommTxPulseState = 0;
						PORTA = 0x00;
					}
					irCommTxSwitchCounter++;
    4c3e:	80 91 b4 04 	lds	r24, 0x04B4
    4c42:	8f 5f       	subi	r24, 0xFF	; 255
    4c44:	80 93 b4 04 	sts	0x04B4, r24
					if(irCommTxSwitchCounter == irCommTxSwitchCount) {
    4c48:	90 91 b3 04 	lds	r25, 0x04B3
    4c4c:	89 17       	cp	r24, r25
    4c4e:	09 f0       	breq	.+2      	; 0x4c52 <__vector_29+0x7ec>
    4c50:	f4 ce       	rjmp	.-536    	; 0x4a3a <__vector_29+0x5d4>
    4c52:	d6 cf       	rjmp	.-84     	; 0x4c00 <__vector_29+0x79a>
					proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
				//} else {	// ground
				//	proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx];
				//}
				if(proximityResult[currentProx>>1] < 0) {
					proximityResult[currentProx>>1] = 0;
    4c54:	11 82       	std	Z+1, r1	; 0x01
    4c56:	10 82       	st	Z, r1
    4c58:	80 e0       	ldi	r24, 0x00	; 0
    4c5a:	90 e0       	ldi	r25, 0x00	; 0
    4c5c:	f5 cc       	rjmp	.-1558   	; 0x4648 <__vector_29+0x1e2>
					
					if(proximityResult[currentProx>>1] < PHASE1) {

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
    4c5e:	9c 01       	movw	r18, r24
    4c60:	24 5c       	subi	r18, 0xC4	; 196
    4c62:	3f 4f       	sbci	r19, 0xFF	; 255
    4c64:	35 95       	asr	r19
    4c66:	27 95       	ror	r18
    4c68:	28 37       	cpi	r18, 0x78	; 120
    4c6a:	31 05       	cpc	r19, r1
    4c6c:	0c f0       	brlt	.+2      	; 0x4c70 <__vector_29+0x80a>
    4c6e:	25 c1       	rjmp	.+586    	; 0x4eba <__vector_29+0xa54>
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;
    4c70:	4f 56       	subi	r20, 0x6F	; 111
    4c72:	5d 4f       	sbci	r21, 0xFD	; 253
    4c74:	cc 97       	sbiw	r24, 0x3c	; 60
    4c76:	95 95       	asr	r25
    4c78:	87 95       	ror	r24
    4c7a:	cc 96       	adiw	r24, 0x3c	; 60
    4c7c:	fa 01       	movw	r30, r20
    4c7e:	91 83       	std	Z+1, r25	; 0x01
    4c80:	80 83       	st	Z, r24
    4c82:	ee cc       	rjmp	.-1572   	; 0x4660 <__vector_29+0x1fa>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				adcSamplingState = 8;
				break;

			case 8:
				currentAdChannel = currentMotRightChannel;
    4c84:	80 91 24 02 	lds	r24, 0x0224
    4c88:	80 93 21 02 	sts	0x0221, r24
				rightChannelPhase = rightMotorPhase;
    4c8c:	80 91 25 02 	lds	r24, 0x0225
    4c90:	80 93 8b 02 	sts	0x028B, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    4c94:	80 91 8c 02 	lds	r24, 0x028C
    4c98:	88 23       	and	r24, r24
    4c9a:	09 f0       	breq	.+2      	; 0x4c9e <__vector_29+0x838>
    4c9c:	2e c1       	rjmp	.+604    	; 0x4efa <__vector_29+0xa94>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    4c9e:	83 e0       	ldi	r24, 0x03	; 3
    4ca0:	80 93 89 02 	sts	0x0289, r24
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 9;
    4ca4:	89 e0       	ldi	r24, 0x09	; 9
    4ca6:	80 93 8a 02 	sts	0x028A, r24
				break;
    4caa:	83 cd       	rjmp	.-1274   	; 0x47b2 <__vector_29+0x34c>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				adcSamplingState = 6;
				break;

			case 6:
				currentAdChannel = currentProx+1;
    4cac:	90 91 22 02 	lds	r25, 0x0222
    4cb0:	9f 5f       	subi	r25, 0xFF	; 255
    4cb2:	90 93 21 02 	sts	0x0221, r25
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    4cb6:	80 93 89 02 	sts	0x0289, r24
				adcSamplingState = 7;
    4cba:	87 e0       	ldi	r24, 0x07	; 7
    4cbc:	80 93 8a 02 	sts	0x028A, r24
				break;
    4cc0:	78 cd       	rjmp	.-1296   	; 0x47b2 <__vector_29+0x34c>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				adcSamplingState = 3;
				break;

			case 3:
				currentAdChannel = currentProx+1;
    4cc2:	80 91 22 02 	lds	r24, 0x0222
    4cc6:	8f 5f       	subi	r24, 0xFF	; 255
    4cc8:	80 93 21 02 	sts	0x0221, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    4ccc:	86 e0       	ldi	r24, 0x06	; 6
    4cce:	80 93 89 02 	sts	0x0289, r24
				adcSamplingState = 4;
    4cd2:	84 e0       	ldi	r24, 0x04	; 4
    4cd4:	80 93 8a 02 	sts	0x028A, r24
				break;
    4cd8:	6c cd       	rjmp	.-1320   	; 0x47b2 <__vector_29+0x34c>

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(adcSamplingState) {
			case 0:				
				currentProx = 0;
    4cda:	10 92 22 02 	sts	0x0222, r1
				currentAdChannel = currentProx+1;				
    4cde:	90 93 21 02 	sts	0x0221, r25
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    4ce2:	86 e0       	ldi	r24, 0x06	; 6
    4ce4:	80 93 89 02 	sts	0x0289, r24
				adcSamplingState = 1;
    4ce8:	90 93 8a 02 	sts	0x028A, r25
    4cec:	81 e0       	ldi	r24, 0x01	; 1
				break;
    4cee:	61 cd       	rjmp	.-1342   	; 0x47b2 <__vector_29+0x34c>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				adcSamplingState = 2;
				break;

			case 2:
				currentAdChannel = currentProx+1;
    4cf0:	80 91 22 02 	lds	r24, 0x0222
    4cf4:	8f 5f       	subi	r24, 0xFF	; 255
    4cf6:	80 93 21 02 	sts	0x0221, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    4cfa:	86 e0       	ldi	r24, 0x06	; 6
    4cfc:	80 93 89 02 	sts	0x0289, r24
				adcSamplingState = 3;
    4d00:	83 e0       	ldi	r24, 0x03	; 3
    4d02:	80 93 8a 02 	sts	0x028A, r24
				break;
    4d06:	55 cd       	rjmp	.-1366   	; 0x47b2 <__vector_29+0x34c>
				}
				adcSamplingState = 9;
				break;

			case 9:
				currentAdChannel = currentMotLeftChannel;
    4d08:	80 91 23 02 	lds	r24, 0x0223
    4d0c:	80 93 21 02 	sts	0x0221, r24
				leftChannelPhase = leftMotorPhase;
    4d10:	80 91 26 02 	lds	r24, 0x0226
    4d14:	80 93 8c 02 	sts	0x028C, r24
				if(rightChannelPhase == ACTIVE_PHASE) {
    4d18:	80 91 8b 02 	lds	r24, 0x028B
    4d1c:	88 23       	and	r24, r24
    4d1e:	09 f0       	breq	.+2      	; 0x4d22 <__vector_29+0x8bc>
    4d20:	fa c0       	rjmp	.+500    	; 0x4f16 <__vector_29+0xab0>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    4d22:	90 93 89 02 	sts	0x0289, r25
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 10;
    4d26:	8a e0       	ldi	r24, 0x0A	; 10
    4d28:	80 93 8a 02 	sts	0x028A, r24
				break;
    4d2c:	42 cd       	rjmp	.-1404   	; 0x47b2 <__vector_29+0x34c>

			case 10:
				currentAdChannel = currentMotRightChannel;
    4d2e:	80 91 24 02 	lds	r24, 0x0224
    4d32:	80 93 21 02 	sts	0x0221, r24
				rightChannelPhase = rightMotorPhase;
    4d36:	80 91 25 02 	lds	r24, 0x0225
    4d3a:	80 93 8b 02 	sts	0x028B, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    4d3e:	80 91 8c 02 	lds	r24, 0x028C
    4d42:	88 23       	and	r24, r24
    4d44:	09 f0       	breq	.+2      	; 0x4d48 <__vector_29+0x8e2>
    4d46:	d2 c0       	rjmp	.+420    	; 0x4eec <__vector_29+0xa86>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    4d48:	83 e0       	ldi	r24, 0x03	; 3
    4d4a:	80 93 89 02 	sts	0x0289, r24
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 11;
    4d4e:	8b e0       	ldi	r24, 0x0B	; 11
    4d50:	80 93 8a 02 	sts	0x028A, r24
				if((irCommState==IRCOMM_RX_SYNC_SIGNAL) && (irCommSecondBitSkipped==1)) {
    4d54:	80 91 94 04 	lds	r24, 0x0494
    4d58:	84 30       	cpi	r24, 0x04	; 4
    4d5a:	09 f4       	brne	.+2      	; 0x4d5e <__vector_29+0x8f8>
    4d5c:	fe c0       	rjmp	.+508    	; 0x4f5a <__vector_29+0xaf4>
						irCommShiftCounter = 0;
						irCommSecondBitSkipped = 0;
						irCommState = IRCOMM_RX_WAITING_BIT;
					}
				} else {
					irCommRxWindowSamples++;
    4d5e:	80 91 95 04 	lds	r24, 0x0495
    4d62:	8f 5f       	subi	r24, 0xFF	; 255
    4d64:	80 93 95 04 	sts	0x0495, r24
				}
				if(irCommRxWindowSamples == IRCOMM_SAMPLING_WINDOW) {					
    4d68:	84 31       	cpi	r24, 0x14	; 20
    4d6a:	09 f0       	breq	.+2      	; 0x4d6e <__vector_29+0x908>
    4d6c:	20 cd       	rjmp	.-1472   	; 0x47ae <__vector_29+0x348>
					irCommRxWindowSamples = 0;
    4d6e:	10 92 95 04 	sts	0x0495, r1
					irCommTempPointer = irCommProxValuesCurr;
    4d72:	80 91 67 07 	lds	r24, 0x0767
    4d76:	90 91 68 07 	lds	r25, 0x0768
					irCommProxValuesCurr = irCommProxValuesAdc;
    4d7a:	20 91 79 07 	lds	r18, 0x0779
    4d7e:	30 91 7a 07 	lds	r19, 0x077A
    4d82:	30 93 68 07 	sts	0x0768, r19
    4d86:	20 93 67 07 	sts	0x0767, r18
					irCommProxValuesAdc = irCommTempPointer;
    4d8a:	90 93 7a 07 	sts	0x077A, r25
    4d8e:	80 93 79 07 	sts	0x0779, r24
					irCommTempPointer = irCommMaxSensorValueCurr;
    4d92:	50 91 c0 04 	lds	r21, 0x04C0
    4d96:	40 91 c1 04 	lds	r20, 0x04C1
					irCommMaxSensorValueCurr = irCommMaxSensorValueAdc;
    4d9a:	80 91 59 08 	lds	r24, 0x0859
    4d9e:	90 91 5a 08 	lds	r25, 0x085A
    4da2:	90 93 c1 04 	sts	0x04C1, r25
    4da6:	80 93 c0 04 	sts	0x04C0, r24
					irCommMaxSensorValueAdc = irCommTempPointer;
    4daa:	50 93 59 08 	sts	0x0859, r21
    4dae:	40 93 5a 08 	sts	0x085A, r20
					irCommTempPointer = irCommMinSensorValueCurr;
    4db2:	80 91 be 04 	lds	r24, 0x04BE
    4db6:	90 91 bf 04 	lds	r25, 0x04BF
    4dba:	90 93 97 08 	sts	0x0897, r25
    4dbe:	80 93 96 08 	sts	0x0896, r24
					irCommMinSensorValueCurr = irCommMinSensorValueAdc;
    4dc2:	20 91 e5 04 	lds	r18, 0x04E5
    4dc6:	30 91 e6 04 	lds	r19, 0x04E6
    4dca:	30 93 bf 04 	sts	0x04BF, r19
    4dce:	20 93 be 04 	sts	0x04BE, r18
					irCommMinSensorValueAdc = irCommTempPointer;
    4dd2:	90 93 e6 04 	sts	0x04E6, r25
    4dd6:	80 93 e5 04 	sts	0x04E5, r24
					memset(irCommMaxSensorValueAdc, 0x00, 16);
    4dda:	e5 2f       	mov	r30, r21
    4ddc:	f4 2f       	mov	r31, r20
    4dde:	80 e1       	ldi	r24, 0x10	; 16
    4de0:	df 01       	movw	r26, r30
    4de2:	1d 92       	st	X+, r1
    4de4:	8a 95       	dec	r24
    4de6:	e9 f7       	brne	.-6      	; 0x4de2 <__vector_29+0x97c>
					memset(irCommMinSensorValueAdc, 0xFF, 16);
    4de8:	80 91 e5 04 	lds	r24, 0x04E5
    4dec:	90 91 e6 04 	lds	r25, 0x04E6
    4df0:	6f ef       	ldi	r22, 0xFF	; 255
    4df2:	70 e0       	ldi	r23, 0x00	; 0
    4df4:	40 e1       	ldi	r20, 0x10	; 16
    4df6:	50 e0       	ldi	r21, 0x00	; 0
    4df8:	0e 94 b5 49 	call	0x936a	; 0x936a <memset>
					} else if(DEBUG_MAX_SENSOR) {
						adcSamplingState = 11;	// we can continue sampling since the transmission lasts less than the window sampling
					} else if(DEBUG_START_BIT_STATE) {
						adcSamplingState = 12;	// stop sampling
					} else {
						adcSamplingState = 11;	// continue sampling by default
    4dfc:	8b e0       	ldi	r24, 0x0B	; 11
    4dfe:	80 93 8a 02 	sts	0x028A, r24
					}
					//irCommMode = IRCOMM_MODE_SENSORS_SAMPLING;
					if(irCommState == IRCOMM_RX_IDLE_STATE) {
    4e02:	80 91 94 04 	lds	r24, 0x0494
    4e06:	81 30       	cpi	r24, 0x01	; 1
    4e08:	09 f4       	brne	.+2      	; 0x4e0c <__vector_29+0x9a6>
    4e0a:	e7 c0       	rjmp	.+462    	; 0x4fda <__vector_29+0xb74>
						irCommState = IRCOMM_RX_MAX_SENSOR_STATE;
					}
					if(irCommState == IRCOMM_RX_SYNC_SIGNAL) {
    4e0c:	80 91 94 04 	lds	r24, 0x0494
    4e10:	84 30       	cpi	r24, 0x04	; 4
    4e12:	09 f4       	brne	.+2      	; 0x4e16 <__vector_29+0x9b0>
    4e14:	de c0       	rjmp	.+444    	; 0x4fd2 <__vector_29+0xb6c>
						irCommSecondBitSkipped = 1;
					}
					if(irCommState == IRCOMM_RX_WAITING_BIT) {
    4e16:	80 91 94 04 	lds	r24, 0x0494
    4e1a:	85 30       	cpi	r24, 0x05	; 5
    4e1c:	09 f0       	breq	.+2      	; 0x4e20 <__vector_29+0x9ba>
    4e1e:	c7 cc       	rjmp	.-1650   	; 0x47ae <__vector_29+0x348>
						irCommState = IRCOMM_RX_READ_BIT;
    4e20:	86 e0       	ldi	r24, 0x06	; 6
    4e22:	80 93 94 04 	sts	0x0494, r24
    4e26:	80 91 8a 02 	lds	r24, 0x028A
    4e2a:	c3 cc       	rjmp	.-1658   	; 0x47b2 <__vector_29+0x34c>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				adcSamplingState = 5;
				break;

			case 5:
				currentAdChannel = currentProx+1;
    4e2c:	80 91 22 02 	lds	r24, 0x0222
    4e30:	8f 5f       	subi	r24, 0xFF	; 255
    4e32:	80 93 21 02 	sts	0x0221, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    4e36:	86 e0       	ldi	r24, 0x06	; 6
    4e38:	80 93 89 02 	sts	0x0289, r24
				adcSamplingState = 6;
    4e3c:	80 93 8a 02 	sts	0x028A, r24
				break;
    4e40:	b8 cc       	rjmp	.-1680   	; 0x47b2 <__vector_29+0x34c>
			case 1:	// left motor
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				adcSaveDataTo = SAVE_TO_PROX;
				adcSamplingState = 2;
				if(irCommEnabled==IRCOMM_MODE_RECEIVE && currentProx==23) {
    4e42:	90 91 22 02 	lds	r25, 0x0222
    4e46:	97 31       	cpi	r25, 0x17	; 23
    4e48:	09 f0       	breq	.+2      	; 0x4e4c <__vector_29+0x9e6>
    4e4a:	26 ce       	rjmp	.-948    	; 0x4a98 <__vector_29+0x632>
					irCommMode = IRCOMM_MODE_RECEIVE;
    4e4c:	80 93 93 04 	sts	0x0493, r24
					currentAdChannel = 0;	// prox0
    4e50:	10 92 21 02 	sts	0x0221, r1
					adcSamplingState = 0;
    4e54:	10 92 8a 02 	sts	0x028A, r1
					measBattery = 0;
    4e58:	10 92 8f 02 	sts	0x028F, r1
					irCommRxWindowSamples = 0;					
    4e5c:	10 92 95 04 	sts	0x0495, r1
    4e60:	80 e0       	ldi	r24, 0x00	; 0
    4e62:	a7 cc       	rjmp	.-1714   	; 0x47b2 <__vector_29+0x34c>
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 0;

				if(currentProx==14 && measBattery==1) {
    4e64:	80 91 8f 02 	lds	r24, 0x028F
    4e68:	81 30       	cpi	r24, 0x01	; 1
    4e6a:	09 f4       	brne	.+2      	; 0x4e6e <__vector_29+0xa08>
    4e6c:	8f c0       	rjmp	.+286    	; 0x4f8c <__vector_29+0xb26>
    4e6e:	80 e0       	ldi	r24, 0x00	; 0
    4e70:	a0 cc       	rjmp	.-1728   	; 0x47b2 <__vector_29+0x34c>
				if(currentProx & 0x01) {
					if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
											// PORTA for proximity sensors, PORTJ for ground sensors
						PORTA = (1 << (currentProx>>1));	// pulse on
					} else {
						if(hardwareRevision == HW_REV_3_0) {
    4e72:	20 91 1d 04 	lds	r18, 0x041D
    4e76:	22 23       	and	r18, r18
    4e78:	09 f0       	breq	.+2      	; 0x4e7c <__vector_29+0xa16>
    4e7a:	85 cc       	rjmp	.-1782   	; 0x4786 <__vector_29+0x320>
							PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
    4e7c:	40 97       	sbiw	r24, 0x10	; 16
    4e7e:	95 95       	asr	r25
    4e80:	87 95       	ror	r24
    4e82:	21 e0       	ldi	r18, 0x01	; 1
    4e84:	30 e0       	ldi	r19, 0x00	; 0
    4e86:	02 c0       	rjmp	.+4      	; 0x4e8c <__vector_29+0xa26>
    4e88:	22 0f       	add	r18, r18
    4e8a:	33 1f       	adc	r19, r19
    4e8c:	8a 95       	dec	r24
    4e8e:	e2 f7       	brpl	.-8      	; 0x4e88 <__vector_29+0xa22>
    4e90:	20 93 05 01 	sts	0x0105, r18
    4e94:	80 91 8a 02 	lds	r24, 0x028A
    4e98:	8c cc       	rjmp	.-1768   	; 0x47b2 <__vector_29+0x34c>
					if(irCommTxPulseState == 0) {
						irCommTxPulseState = 1;
						//PORTA = 0xFF;
						PORTA = 0x01;
					} else {
						irCommTxPulseState = 0;
    4e9a:	10 92 b2 04 	sts	0x04B2, r1
						PORTA = 0x00;
    4e9e:	12 b8       	out	0x02, r1	; 2
    4ea0:	ce ce       	rjmp	.-612    	; 0x4c3e <__vector_29+0x7d8>
					if(irCommTxPulseState == 0) {
						irCommTxPulseState = 1;
						//PORTA = 0xFF;
						PORTA = 0x01;
					} else {
						irCommTxPulseState = 0;
    4ea2:	10 92 b2 04 	sts	0x04B2, r1
						PORTA = 0x00;
    4ea6:	12 b8       	out	0x02, r1	; 2
    4ea8:	a1 ce       	rjmp	.-702    	; 0x4bec <__vector_29+0x786>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    4eaa:	84 e0       	ldi	r24, 0x04	; 4
    4eac:	80 93 89 02 	sts	0x0289, r24
    4eb0:	d6 cd       	rjmp	.-1108   	; 0x4a5e <__vector_29+0x5f8>
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    4eb2:	82 e0       	ldi	r24, 0x02	; 2
    4eb4:	80 93 89 02 	sts	0x0289, r24
    4eb8:	5f cd       	rjmp	.-1346   	; 0x4978 <__vector_29+0x512>

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;

					} else if(((proximityResult[currentProx>>1]+300)>>2) < PHASE3) {
    4eba:	9c 01       	movw	r18, r24
    4ebc:	24 5d       	subi	r18, 0xD4	; 212
    4ebe:	3e 4f       	sbci	r19, 0xFE	; 254
    4ec0:	35 95       	asr	r19
    4ec2:	27 95       	ror	r18
    4ec4:	35 95       	asr	r19
    4ec6:	27 95       	ror	r18
    4ec8:	24 3b       	cpi	r18, 0xB4	; 180
    4eca:	31 05       	cpc	r19, r1
    4ecc:	b4 f5       	brge	.+108    	; 0x4f3a <__vector_29+0xad4>

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-180)>>2) + PHASE2;
    4ece:	4f 56       	subi	r20, 0x6F	; 111
    4ed0:	5d 4f       	sbci	r21, 0xFD	; 253
    4ed2:	84 5b       	subi	r24, 0xB4	; 180
    4ed4:	90 40       	sbci	r25, 0x00	; 0
    4ed6:	95 95       	asr	r25
    4ed8:	87 95       	ror	r24
    4eda:	95 95       	asr	r25
    4edc:	87 95       	ror	r24
    4ede:	88 58       	subi	r24, 0x88	; 136
    4ee0:	9f 4f       	sbci	r25, 0xFF	; 255
    4ee2:	da 01       	movw	r26, r20
    4ee4:	11 96       	adiw	r26, 0x01	; 1
    4ee6:	9c 93       	st	X, r25
    4ee8:	8e 93       	st	-X, r24
    4eea:	ba cb       	rjmp	.-2188   	; 0x4660 <__vector_29+0x1fa>
			case 10:
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    4eec:	81 30       	cpi	r24, 0x01	; 1
    4eee:	09 f4       	brne	.+2      	; 0x4ef2 <__vector_29+0xa8c>
    4ef0:	56 c0       	rjmp	.+172    	; 0x4f9e <__vector_29+0xb38>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4ef2:	85 e0       	ldi	r24, 0x05	; 5
    4ef4:	80 93 89 02 	sts	0x0289, r24
    4ef8:	2a cf       	rjmp	.-428    	; 0x4d4e <__vector_29+0x8e8>
			case 8:
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    4efa:	81 30       	cpi	r24, 0x01	; 1
    4efc:	09 f4       	brne	.+2      	; 0x4f00 <__vector_29+0xa9a>
    4efe:	53 c0       	rjmp	.+166    	; 0x4fa6 <__vector_29+0xb40>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4f00:	85 e0       	ldi	r24, 0x05	; 5
    4f02:	80 93 89 02 	sts	0x0289, r24
    4f06:	ce ce       	rjmp	.-612    	; 0x4ca4 <__vector_29+0x83e>

			case 11:
				currentAdChannel = 0;	// prox0
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    4f08:	81 30       	cpi	r24, 0x01	; 1
    4f0a:	09 f4       	brne	.+2      	; 0x4f0e <__vector_29+0xaa8>
    4f0c:	50 c0       	rjmp	.+160    	; 0x4fae <__vector_29+0xb48>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4f0e:	85 e0       	ldi	r24, 0x05	; 5
    4f10:	80 93 89 02 	sts	0x0289, r24
    4f14:	80 cd       	rjmp	.-1280   	; 0x4a16 <__vector_29+0x5b0>
			case 9:
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    4f16:	81 30       	cpi	r24, 0x01	; 1
    4f18:	f1 f1       	breq	.+124    	; 0x4f96 <__vector_29+0xb30>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4f1a:	85 e0       	ldi	r24, 0x05	; 5
    4f1c:	80 93 89 02 	sts	0x0289, r24
    4f20:	02 cf       	rjmp	.-508    	; 0x4d26 <__vector_29+0x8c0>
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    4f22:	82 e0       	ldi	r24, 0x02	; 2
    4f24:	80 93 89 02 	sts	0x0289, r24
    4f28:	10 ce       	rjmp	.-992    	; 0x4b4a <__vector_29+0x6e4>
				currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
																// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
				if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    4f2a:	82 e0       	ldi	r24, 0x02	; 2
    4f2c:	80 93 89 02 	sts	0x0289, r24
    4f30:	4b cb       	rjmp	.-2410   	; 0x45c8 <__vector_29+0x162>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    4f32:	84 e0       	ldi	r24, 0x04	; 4
    4f34:	80 93 89 02 	sts	0x0289, r24
    4f38:	1b ce       	rjmp	.-970    	; 0x4b70 <__vector_29+0x70a>

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-180)>>2) + PHASE2;

					} else {

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-420)>>3) + PHASE3;
    4f3a:	4f 56       	subi	r20, 0x6F	; 111
    4f3c:	5d 4f       	sbci	r21, 0xFD	; 253
    4f3e:	84 5a       	subi	r24, 0xA4	; 164
    4f40:	91 40       	sbci	r25, 0x01	; 1
    4f42:	95 95       	asr	r25
    4f44:	87 95       	ror	r24
    4f46:	95 95       	asr	r25
    4f48:	87 95       	ror	r24
    4f4a:	95 95       	asr	r25
    4f4c:	87 95       	ror	r24
    4f4e:	8c 54       	subi	r24, 0x4C	; 76
    4f50:	9f 4f       	sbci	r25, 0xFF	; 255
    4f52:	fa 01       	movw	r30, r20
    4f54:	91 83       	std	Z+1, r25	; 0x01
    4f56:	80 83       	st	Z, r24
    4f58:	83 cb       	rjmp	.-2298   	; 0x4660 <__vector_29+0x1fa>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 11;
				if((irCommState==IRCOMM_RX_SYNC_SIGNAL) && (irCommSecondBitSkipped==1)) {
    4f5a:	80 91 a9 04 	lds	r24, 0x04A9
    4f5e:	81 30       	cpi	r24, 0x01	; 1
    4f60:	09 f0       	breq	.+2      	; 0x4f64 <__vector_29+0xafe>
    4f62:	fd ce       	rjmp	.-518    	; 0x4d5e <__vector_29+0x8f8>
					irCommRxWindowSamples = 0;
    4f64:	10 92 95 04 	sts	0x0495, r1
					irCommShiftCounter++;
    4f68:	80 91 a7 04 	lds	r24, 0x04A7
    4f6c:	8f 5f       	subi	r24, 0xFF	; 255
    4f6e:	80 93 a7 04 	sts	0x04A7, r24
					if(irCommShiftCounter >= irCommShiftCount) {
    4f72:	90 91 a6 04 	lds	r25, 0x04A6
    4f76:	89 17       	cp	r24, r25
    4f78:	38 f0       	brcs	.+14     	; 0x4f88 <__vector_29+0xb22>
						irCommShiftCounter = 0;
    4f7a:	10 92 a7 04 	sts	0x04A7, r1
						irCommSecondBitSkipped = 0;
    4f7e:	10 92 a9 04 	sts	0x04A9, r1
						irCommState = IRCOMM_RX_WAITING_BIT;
    4f82:	85 e0       	ldi	r24, 0x05	; 5
    4f84:	80 93 94 04 	sts	0x0494, r24
    4f88:	8b e0       	ldi	r24, 0x0B	; 11
    4f8a:	13 cc       	rjmp	.-2010   	; 0x47b2 <__vector_29+0x34c>
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 0;

				if(currentProx==14 && measBattery==1) {
					measBattery=2;
    4f8c:	82 e0       	ldi	r24, 0x02	; 2
    4f8e:	80 93 8f 02 	sts	0x028F, r24
					SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
    4f92:	46 9a       	sbi	0x08, 6	; 8
    4f94:	14 cd       	rjmp	.-1496   	; 0x49be <__vector_29+0x558>
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    4f96:	82 e0       	ldi	r24, 0x02	; 2
    4f98:	80 93 89 02 	sts	0x0289, r24
    4f9c:	c4 ce       	rjmp	.-632    	; 0x4d26 <__vector_29+0x8c0>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    4f9e:	84 e0       	ldi	r24, 0x04	; 4
    4fa0:	80 93 89 02 	sts	0x0289, r24
    4fa4:	d4 ce       	rjmp	.-600    	; 0x4d4e <__vector_29+0x8e8>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    4fa6:	84 e0       	ldi	r24, 0x04	; 4
    4fa8:	80 93 89 02 	sts	0x0289, r24
    4fac:	7b ce       	rjmp	.-778    	; 0x4ca4 <__vector_29+0x83e>
			case 11:
				currentAdChannel = 0;	// prox0
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    4fae:	82 e0       	ldi	r24, 0x02	; 2
    4fb0:	80 93 89 02 	sts	0x0289, r24
    4fb4:	30 cd       	rjmp	.-1440   	; 0x4a16 <__vector_29+0x5b0>
					}
					irCommTxSwitchCounter++;
					if(irCommTxSwitchCounter == irCommTxSwitchCount) {
						irCommTxBitCount++;
						if(irCommTxBitCount==12) {
							irCommState = IRCOMM_TX_PREPARE_TRANSMISSION;
    4fb6:	85 e0       	ldi	r24, 0x05	; 5
    4fb8:	80 93 94 04 	sts	0x0494, r24
							irCommTxWaitStartTime = getTime100MicroSec();
    4fbc:	0e 94 d7 21 	call	0x43ae	; 0x43ae <getTime100MicroSec>
    4fc0:	60 93 b6 04 	sts	0x04B6, r22
    4fc4:	70 93 b7 04 	sts	0x04B7, r23
    4fc8:	80 93 b8 04 	sts	0x04B8, r24
    4fcc:	90 93 b9 04 	sts	0x04B9, r25
    4fd0:	22 ce       	rjmp	.-956    	; 0x4c16 <__vector_29+0x7b0>
					//irCommMode = IRCOMM_MODE_SENSORS_SAMPLING;
					if(irCommState == IRCOMM_RX_IDLE_STATE) {
						irCommState = IRCOMM_RX_MAX_SENSOR_STATE;
					}
					if(irCommState == IRCOMM_RX_SYNC_SIGNAL) {
						irCommSecondBitSkipped = 1;
    4fd2:	81 e0       	ldi	r24, 0x01	; 1
    4fd4:	80 93 a9 04 	sts	0x04A9, r24
    4fd8:	1e cf       	rjmp	.-452    	; 0x4e16 <__vector_29+0x9b0>
					} else {
						adcSamplingState = 11;	// continue sampling by default
					}
					//irCommMode = IRCOMM_MODE_SENSORS_SAMPLING;
					if(irCommState == IRCOMM_RX_IDLE_STATE) {
						irCommState = IRCOMM_RX_MAX_SENSOR_STATE;
    4fda:	82 e0       	ldi	r24, 0x02	; 2
    4fdc:	80 93 94 04 	sts	0x0494, r24
    4fe0:	15 cf       	rjmp	.-470    	; 0x4e0c <__vector_29+0x9a6>

00004fe2 <initMotors>:

#include "motors.h"

void initMotors() {
    4fe2:	0f 93       	push	r16
    4fe4:	1f 93       	push	r17
    4fe6:	cf 93       	push	r28
    4fe8:	df 93       	push	r29
	// Using 10-bit resolution (waveform generation mode 7) we have a period of: 8000000/1024 = 7812.5 Hz
	// We need to apply a prescaler to the timer in such a way to get the desired period:
	// 7812.5/100 = 78.125 => ideal prescaler, the nearest one is 1/64 and we get a period of:
	// 8000000/64/1024 = 122 Hz

	TCCR3A = 0;
    4fea:	e0 e9       	ldi	r30, 0x90	; 144
    4fec:	f0 e0       	ldi	r31, 0x00	; 0
    4fee:	10 82       	st	Z, r1
	TCCR3B = 0;
    4ff0:	41 e9       	ldi	r20, 0x91	; 145
    4ff2:	50 e0       	ldi	r21, 0x00	; 0
    4ff4:	da 01       	movw	r26, r20
    4ff6:	1c 92       	st	X, r1
	TIMSK3 = 0;
    4ff8:	21 e7       	ldi	r18, 0x71	; 113
    4ffa:	30 e0       	ldi	r19, 0x00	; 0
    4ffc:	e9 01       	movw	r28, r18
    4ffe:	18 82       	st	Y, r1
	TCCR4A = 0;
    5000:	a0 ea       	ldi	r26, 0xA0	; 160
    5002:	b0 e0       	ldi	r27, 0x00	; 0
    5004:	1c 92       	st	X, r1
	TCCR4B = 0;
    5006:	81 ea       	ldi	r24, 0xA1	; 161
    5008:	90 e0       	ldi	r25, 0x00	; 0
    500a:	ec 01       	movw	r28, r24
    500c:	18 82       	st	Y, r1
	TIMSK4 = 0;
    500e:	02 e7       	ldi	r16, 0x72	; 114
    5010:	10 e0       	ldi	r17, 0x00	; 0
    5012:	e8 01       	movw	r28, r16
    5014:	18 82       	st	Y, r1

	TCCR3A |= (1 << COM3A1) | (1 << WGM31) | (1 << WGM30); 	// enable OCA; clear on match, set at bottom
    5016:	60 81       	ld	r22, Z
    5018:	63 68       	ori	r22, 0x83	; 131
    501a:	60 83       	st	Z, r22
	TCCR3A |= (1 << WGM31) | (1 << WGM30);
    501c:	60 81       	ld	r22, Z
    501e:	63 60       	ori	r22, 0x03	; 3
    5020:	60 83       	st	Z, r22
	TCCR3B |= (1 << WGM32) | (1 << CS31) | (1 << CS30);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    5022:	ea 01       	movw	r28, r20
    5024:	68 81       	ld	r22, Y
    5026:	6b 60       	ori	r22, 0x0B	; 11
    5028:	68 83       	st	Y, r22
	// the values for motors goes from 0 (stopped) to 1023 (max power)
	OCR3A = pwm_right;
    502a:	40 91 c5 02 	lds	r20, 0x02C5
    502e:	50 91 c6 02 	lds	r21, 0x02C6
    5032:	50 93 99 00 	sts	0x0099, r21
    5036:	40 93 98 00 	sts	0x0098, r20
	OCR3B = 0;
    503a:	10 92 9b 00 	sts	0x009B, r1
    503e:	10 92 9a 00 	sts	0x009A, r1
	TIMSK3 |= (1 << TOIE3);		// Enable timer overflow interrupt
    5042:	e9 01       	movw	r28, r18
    5044:	48 81       	ld	r20, Y
    5046:	41 60       	ori	r20, 0x01	; 1
    5048:	48 83       	st	Y, r20

	// stop right motor
	TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    504a:	20 81       	ld	r18, Z
    504c:	2f 75       	andi	r18, 0x5F	; 95
    504e:	20 83       	st	Z, r18
	PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    5050:	2e b1       	in	r18, 0x0e	; 14
    5052:	27 7e       	andi	r18, 0xE7	; 231
    5054:	2e b9       	out	0x0e, r18	; 14

	// Motor left timer4/pwm
	// same configuration as timer3
	TCCR4A |= (1 << COM4A1) | (1 << WGM41) | (1 << WGM40); 	// enable OCA; clear on match, set at bottom
    5056:	2c 91       	ld	r18, X
    5058:	23 68       	ori	r18, 0x83	; 131
    505a:	2c 93       	st	X, r18
	TCCR4B |= (1 << WGM42) | (1 << CS41) | (1 << CS40);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    505c:	fc 01       	movw	r30, r24
    505e:	20 81       	ld	r18, Z
    5060:	2b 60       	ori	r18, 0x0B	; 11
    5062:	20 83       	st	Z, r18
	// the values for motors goes from 0 (stopped) to 1024 (max power)
	OCR4A = pwm_left;
    5064:	80 91 c7 02 	lds	r24, 0x02C7
    5068:	90 91 c8 02 	lds	r25, 0x02C8
    506c:	90 93 a9 00 	sts	0x00A9, r25
    5070:	80 93 a8 00 	sts	0x00A8, r24
	OCR4B = 0;
    5074:	10 92 ab 00 	sts	0x00AB, r1
    5078:	10 92 aa 00 	sts	0x00AA, r1
	TIMSK4 |= (1 << TOIE4);		// Enable timer overflow interrupt
    507c:	e8 01       	movw	r28, r16
    507e:	88 81       	ld	r24, Y
    5080:	81 60       	ori	r24, 0x01	; 1
    5082:	88 83       	st	Y, r24
	// stop left motor
	TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    5084:	8c 91       	ld	r24, X
    5086:	8f 75       	andi	r24, 0x5F	; 95
    5088:	8c 93       	st	X, r24
	PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    508a:	e2 e0       	ldi	r30, 0x02	; 2
    508c:	f1 e0       	ldi	r31, 0x01	; 1
    508e:	80 81       	ld	r24, Z
    5090:	87 7e       	andi	r24, 0xE7	; 231
    5092:	80 83       	st	Z, r24


}
    5094:	df 91       	pop	r29
    5096:	cf 91       	pop	r28
    5098:	1f 91       	pop	r17
    509a:	0f 91       	pop	r16
    509c:	08 95       	ret

0000509e <cast_speed>:

signed int cast_speed(signed int vel) {
    509e:	28 2f       	mov	r18, r24
    50a0:	39 2f       	mov	r19, r25
    50a2:	8e ef       	ldi	r24, 0xFE	; 254
    50a4:	20 30       	cpi	r18, 0x00	; 0
    50a6:	38 07       	cpc	r19, r24
    50a8:	14 f4       	brge	.+4      	; 0x50ae <cast_speed+0x10>
    50aa:	20 e0       	ldi	r18, 0x00	; 0
    50ac:	3e ef       	ldi	r19, 0xFE	; 254
    50ae:	82 e0       	ldi	r24, 0x02	; 2
    50b0:	21 30       	cpi	r18, 0x01	; 1
    50b2:	38 07       	cpc	r19, r24
    50b4:	14 f0       	brlt	.+4      	; 0x50ba <cast_speed+0x1c>
    50b6:	20 e0       	ldi	r18, 0x00	; 0
    50b8:	32 e0       	ldi	r19, 0x02	; 2
        vel = MAX_MOTORS_PWM/2;
    } else if(vel < -(MAX_MOTORS_PWM/2)) {
        vel = -(MAX_MOTORS_PWM/2);
    }
    return vel;
}
    50ba:	c9 01       	movw	r24, r18
    50bc:	08 95       	ret

000050be <handleMotorsWithNoController>:

void handleMotorsWithNoController() {

	// compute velocities even if they aren't used
	if(compute_left_vel) {
    50be:	80 91 07 02 	lds	r24, 0x0207
    50c2:	88 23       	and	r24, r24
    50c4:	c1 f1       	breq	.+112    	; 0x5136 <handleMotorsWithNoController+0x78>
		last_left_vel = left_vel_sum>>2;
    50c6:	60 91 bd 02 	lds	r22, 0x02BD
    50ca:	70 91 be 02 	lds	r23, 0x02BE
    50ce:	76 95       	lsr	r23
    50d0:	67 95       	ror	r22
    50d2:	76 95       	lsr	r23
    50d4:	67 95       	ror	r22
    50d6:	70 93 c2 02 	sts	0x02C2, r23
    50da:	60 93 c1 02 	sts	0x02C1, r22
		compute_left_vel = 0;
    50de:	10 92 07 02 	sts	0x0207, r1
		left_vel_sum = 0;
    50e2:	10 92 be 02 	sts	0x02BE, r1
    50e6:	10 92 bd 02 	sts	0x02BD, r1

		if(pwm_left_desired >= 0) {
    50ea:	80 91 cb 02 	lds	r24, 0x02CB
    50ee:	90 91 cc 02 	lds	r25, 0x02CC
    50f2:	97 fd       	sbrc	r25, 7
    50f4:	e3 c0       	rjmp	.+454    	; 0x52bc <handleMotorsWithNoController+0x1fe>
			leftMotSteps += (last_left_vel>>3);
    50f6:	75 95       	asr	r23
    50f8:	67 95       	ror	r22
    50fa:	75 95       	asr	r23
    50fc:	67 95       	ror	r22
    50fe:	75 95       	asr	r23
    5100:	67 95       	ror	r22
    5102:	88 27       	eor	r24, r24
    5104:	77 fd       	sbrc	r23, 7
    5106:	80 95       	com	r24
    5108:	98 2f       	mov	r25, r24
    510a:	0e 94 34 47 	call	0x8e68	; 0x8e68 <__floatsisf>
    510e:	9b 01       	movw	r18, r22
    5110:	ac 01       	movw	r20, r24
    5112:	60 91 a5 02 	lds	r22, 0x02A5
    5116:	70 91 a6 02 	lds	r23, 0x02A6
    511a:	80 91 a7 02 	lds	r24, 0x02A7
    511e:	90 91 a8 02 	lds	r25, 0x02A8
    5122:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <__addsf3>
    5126:	60 93 a5 02 	sts	0x02A5, r22
    512a:	70 93 a6 02 	sts	0x02A6, r23
    512e:	80 93 a7 02 	sts	0x02A7, r24
    5132:	90 93 a8 02 	sts	0x02A8, r25
		} else {
			leftMotSteps -= (last_left_vel>>3);
		}
	}

	if(compute_right_vel) {
    5136:	80 91 08 02 	lds	r24, 0x0208
    513a:	88 23       	and	r24, r24
    513c:	c1 f1       	breq	.+112    	; 0x51ae <handleMotorsWithNoController+0xf0>
		last_right_vel = right_vel_sum>>2;
    513e:	60 91 bf 02 	lds	r22, 0x02BF
    5142:	70 91 c0 02 	lds	r23, 0x02C0
    5146:	76 95       	lsr	r23
    5148:	67 95       	ror	r22
    514a:	76 95       	lsr	r23
    514c:	67 95       	ror	r22
    514e:	70 93 c4 02 	sts	0x02C4, r23
    5152:	60 93 c3 02 	sts	0x02C3, r22
		compute_right_vel = 0;
    5156:	10 92 08 02 	sts	0x0208, r1
		right_vel_sum = 0;
    515a:	10 92 c0 02 	sts	0x02C0, r1
    515e:	10 92 bf 02 	sts	0x02BF, r1

		if(pwm_right_desired >= 0) {
    5162:	80 91 c9 02 	lds	r24, 0x02C9
    5166:	90 91 ca 02 	lds	r25, 0x02CA
    516a:	97 fd       	sbrc	r25, 7
    516c:	86 c0       	rjmp	.+268    	; 0x527a <handleMotorsWithNoController+0x1bc>
			rightMotSteps += (last_right_vel>>3);
    516e:	75 95       	asr	r23
    5170:	67 95       	ror	r22
    5172:	75 95       	asr	r23
    5174:	67 95       	ror	r22
    5176:	75 95       	asr	r23
    5178:	67 95       	ror	r22
    517a:	88 27       	eor	r24, r24
    517c:	77 fd       	sbrc	r23, 7
    517e:	80 95       	com	r24
    5180:	98 2f       	mov	r25, r24
    5182:	0e 94 34 47 	call	0x8e68	; 0x8e68 <__floatsisf>
    5186:	9b 01       	movw	r18, r22
    5188:	ac 01       	movw	r20, r24
    518a:	60 91 a1 02 	lds	r22, 0x02A1
    518e:	70 91 a2 02 	lds	r23, 0x02A2
    5192:	80 91 a3 02 	lds	r24, 0x02A3
    5196:	90 91 a4 02 	lds	r25, 0x02A4
    519a:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <__addsf3>
    519e:	60 93 a1 02 	sts	0x02A1, r22
    51a2:	70 93 a2 02 	sts	0x02A2, r23
    51a6:	80 93 a3 02 	sts	0x02A3, r24
    51aa:	90 93 a4 02 	sts	0x02A4, r25
		} else {
			rightMotSteps -= (last_right_vel>>3);
		}
	}

	pwm_right_working = pwm_intermediate_right_desired*BYTE_TO_MM_S;	// pwm in the range -635..635 (127*BYTE_TO_MM_S)
    51ae:	20 91 cd 02 	lds	r18, 0x02CD
    51b2:	30 91 ce 02 	lds	r19, 0x02CE
    51b6:	c9 01       	movw	r24, r18
    51b8:	88 0f       	add	r24, r24
    51ba:	99 1f       	adc	r25, r25
    51bc:	88 0f       	add	r24, r24
    51be:	99 1f       	adc	r25, r25
    51c0:	82 0f       	add	r24, r18
    51c2:	93 1f       	adc	r25, r19
    51c4:	90 93 de 02 	sts	0x02DE, r25
    51c8:	80 93 dd 02 	sts	0x02DD, r24
	pwm_left_working = pwm_intermediate_left_desired*BYTE_TO_MM_S;	
    51cc:	40 91 cf 02 	lds	r20, 0x02CF
    51d0:	50 91 d0 02 	lds	r21, 0x02D0
    51d4:	9a 01       	movw	r18, r20
    51d6:	22 0f       	add	r18, r18
    51d8:	33 1f       	adc	r19, r19
    51da:	22 0f       	add	r18, r18
    51dc:	33 1f       	adc	r19, r19
    51de:	24 0f       	add	r18, r20
    51e0:	35 1f       	adc	r19, r21
    51e2:	52 2f       	mov	r21, r18
    51e4:	43 2f       	mov	r20, r19
    51e6:	20 93 df 02 	sts	0x02DF, r18
    51ea:	30 93 e0 02 	sts	0x02E0, r19
	if(obstacleAvoidanceEnabled) {
    51ee:	20 91 3a 04 	lds	r18, 0x043A
    51f2:	22 23       	and	r18, r18
    51f4:	39 f5       	brne	.+78     	; 0x5244 <handleMotorsWithNoController+0x186>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);		// out is in the range -MAX_MOTORS_PWM/2..MAX_MOTORS_PWM/2
	}
	//pwm_left_desired_to_control = cast_speed(pwm_left_working);		// pwm in the range -MAX_MOTORS_PWM/2..MAX_MOTORS_PWM/2
	//pwm_right_desired_to_control = cast_speed(pwm_right_working);

	pwm_left = pwm_left_working;
    51f6:	50 93 c7 02 	sts	0x02C7, r21
    51fa:	40 93 c8 02 	sts	0x02C8, r20
	pwm_right = pwm_right_working;
    51fe:	90 93 c6 02 	sts	0x02C6, r25
    5202:	80 93 c5 02 	sts	0x02C5, r24

	if(pwm_right > 0) {
    5206:	18 16       	cp	r1, r24
    5208:	19 06       	cpc	r1, r25
    520a:	5c f5       	brge	.+86     	; 0x5262 <handleMotorsWithNoController+0x1a4>
		OCR3A = (unsigned int)pwm_right;
    520c:	90 93 99 00 	sts	0x0099, r25
    5210:	80 93 98 00 	sts	0x0098, r24
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
		OCR3B = 0;
	}
	if(pwm_left > 0) {
    5214:	80 91 c7 02 	lds	r24, 0x02C7
    5218:	90 91 c8 02 	lds	r25, 0x02C8
    521c:	18 16       	cp	r1, r24
    521e:	19 06       	cpc	r1, r25
    5220:	2c f4       	brge	.+10     	; 0x522c <handleMotorsWithNoController+0x16e>
		OCR4A = (unsigned int)pwm_left;
    5222:	90 93 a9 00 	sts	0x00A9, r25
    5226:	80 93 a8 00 	sts	0x00A8, r24
    522a:	08 95       	ret
	} else if(pwm_left < 0) {
    522c:	00 97       	sbiw	r24, 0x00	; 0
    522e:	09 f0       	breq	.+2      	; 0x5232 <handleMotorsWithNoController+0x174>
    5230:	6e c0       	rjmp	.+220    	; 0x530e <handleMotorsWithNoController+0x250>
		OCR4B =(unsigned int)( -pwm_left);
	} else {
		OCR4A = 0;
    5232:	10 92 a9 00 	sts	0x00A9, r1
    5236:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    523a:	10 92 ab 00 	sts	0x00AB, r1
    523e:	10 92 aa 00 	sts	0x00AA, r1
    5242:	08 95       	ret
	}

	pwm_right_working = pwm_intermediate_right_desired*BYTE_TO_MM_S;	// pwm in the range -635..635 (127*BYTE_TO_MM_S)
	pwm_left_working = pwm_intermediate_left_desired*BYTE_TO_MM_S;	
	if(obstacleAvoidanceEnabled) {
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);		// out is in the range -MAX_MOTORS_PWM/2..MAX_MOTORS_PWM/2
    5244:	8f ed       	ldi	r24, 0xDF	; 223
    5246:	92 e0       	ldi	r25, 0x02	; 2
    5248:	6d ed       	ldi	r22, 0xDD	; 221
    524a:	72 e0       	ldi	r23, 0x02	; 2
    524c:	0e 94 3e 3b 	call	0x767c	; 0x767c <obstacleAvoidance>
    5250:	50 91 df 02 	lds	r21, 0x02DF
    5254:	40 91 e0 02 	lds	r20, 0x02E0
    5258:	80 91 dd 02 	lds	r24, 0x02DD
    525c:	90 91 de 02 	lds	r25, 0x02DE
    5260:	ca cf       	rjmp	.-108    	; 0x51f6 <handleMotorsWithNoController+0x138>
	pwm_left = pwm_left_working;
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
    5262:	00 97       	sbiw	r24, 0x00	; 0
    5264:	09 f0       	breq	.+2      	; 0x5268 <handleMotorsWithNoController+0x1aa>
    5266:	4b c0       	rjmp	.+150    	; 0x52fe <handleMotorsWithNoController+0x240>
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
    5268:	10 92 99 00 	sts	0x0099, r1
    526c:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    5270:	10 92 9b 00 	sts	0x009B, r1
    5274:	10 92 9a 00 	sts	0x009A, r1
    5278:	cd cf       	rjmp	.-102    	; 0x5214 <handleMotorsWithNoController+0x156>
		right_vel_sum = 0;

		if(pwm_right_desired >= 0) {
			rightMotSteps += (last_right_vel>>3);
		} else {
			rightMotSteps -= (last_right_vel>>3);
    527a:	75 95       	asr	r23
    527c:	67 95       	ror	r22
    527e:	75 95       	asr	r23
    5280:	67 95       	ror	r22
    5282:	75 95       	asr	r23
    5284:	67 95       	ror	r22
    5286:	88 27       	eor	r24, r24
    5288:	77 fd       	sbrc	r23, 7
    528a:	80 95       	com	r24
    528c:	98 2f       	mov	r25, r24
    528e:	0e 94 34 47 	call	0x8e68	; 0x8e68 <__floatsisf>
    5292:	9b 01       	movw	r18, r22
    5294:	ac 01       	movw	r20, r24
    5296:	60 91 a1 02 	lds	r22, 0x02A1
    529a:	70 91 a2 02 	lds	r23, 0x02A2
    529e:	80 91 a3 02 	lds	r24, 0x02A3
    52a2:	90 91 a4 02 	lds	r25, 0x02A4
    52a6:	0e 94 cb 45 	call	0x8b96	; 0x8b96 <__subsf3>
    52aa:	60 93 a1 02 	sts	0x02A1, r22
    52ae:	70 93 a2 02 	sts	0x02A2, r23
    52b2:	80 93 a3 02 	sts	0x02A3, r24
    52b6:	90 93 a4 02 	sts	0x02A4, r25
    52ba:	79 cf       	rjmp	.-270    	; 0x51ae <handleMotorsWithNoController+0xf0>
		left_vel_sum = 0;

		if(pwm_left_desired >= 0) {
			leftMotSteps += (last_left_vel>>3);
		} else {
			leftMotSteps -= (last_left_vel>>3);
    52bc:	75 95       	asr	r23
    52be:	67 95       	ror	r22
    52c0:	75 95       	asr	r23
    52c2:	67 95       	ror	r22
    52c4:	75 95       	asr	r23
    52c6:	67 95       	ror	r22
    52c8:	88 27       	eor	r24, r24
    52ca:	77 fd       	sbrc	r23, 7
    52cc:	80 95       	com	r24
    52ce:	98 2f       	mov	r25, r24
    52d0:	0e 94 34 47 	call	0x8e68	; 0x8e68 <__floatsisf>
    52d4:	9b 01       	movw	r18, r22
    52d6:	ac 01       	movw	r20, r24
    52d8:	60 91 a5 02 	lds	r22, 0x02A5
    52dc:	70 91 a6 02 	lds	r23, 0x02A6
    52e0:	80 91 a7 02 	lds	r24, 0x02A7
    52e4:	90 91 a8 02 	lds	r25, 0x02A8
    52e8:	0e 94 cb 45 	call	0x8b96	; 0x8b96 <__subsf3>
    52ec:	60 93 a5 02 	sts	0x02A5, r22
    52f0:	70 93 a6 02 	sts	0x02A6, r23
    52f4:	80 93 a7 02 	sts	0x02A7, r24
    52f8:	90 93 a8 02 	sts	0x02A8, r25
    52fc:	1c cf       	rjmp	.-456    	; 0x5136 <handleMotorsWithNoController+0x78>
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
		OCR3B = (unsigned int)(-pwm_right);
    52fe:	90 95       	com	r25
    5300:	81 95       	neg	r24
    5302:	9f 4f       	sbci	r25, 0xFF	; 255
    5304:	90 93 9b 00 	sts	0x009B, r25
    5308:	80 93 9a 00 	sts	0x009A, r24
    530c:	83 cf       	rjmp	.-250    	; 0x5214 <handleMotorsWithNoController+0x156>
		OCR3B = 0;
	}
	if(pwm_left > 0) {
		OCR4A = (unsigned int)pwm_left;
	} else if(pwm_left < 0) {
		OCR4B =(unsigned int)( -pwm_left);
    530e:	90 95       	com	r25
    5310:	81 95       	neg	r24
    5312:	9f 4f       	sbci	r25, 0xFF	; 255
    5314:	90 93 ab 00 	sts	0x00AB, r25
    5318:	80 93 aa 00 	sts	0x00AA, r24
    531c:	08 95       	ret

0000531e <setLeftSpeed>:
}

// vel expressed in 1/5 of mm/s
void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    531e:	28 2f       	mov	r18, r24
    5320:	33 27       	eor	r19, r19
    5322:	27 fd       	sbrc	r18, 7
    5324:	30 95       	com	r19
    5326:	37 fd       	sbrc	r19, 7
    5328:	13 c0       	rjmp	.+38     	; 0x5350 <setLeftSpeed+0x32>
    532a:	30 93 e2 02 	sts	0x02E2, r19
    532e:	20 93 e1 02 	sts	0x02E1, r18

    if(vel >= 0) {
    5332:	87 fd       	sbrc	r24, 7
    5334:	05 c0       	rjmp	.+10     	; 0x5340 <setLeftSpeed+0x22>
        pwm_left_desired = speedl;
    } else {
        pwm_left_desired = -(speedl);
    5336:	30 93 cc 02 	sts	0x02CC, r19
    533a:	20 93 cb 02 	sts	0x02CB, r18
    533e:	08 95       	ret
    5340:	30 95       	com	r19
    5342:	21 95       	neg	r18
    5344:	3f 4f       	sbci	r19, 0xFF	; 255
    5346:	30 93 cc 02 	sts	0x02CC, r19
    534a:	20 93 cb 02 	sts	0x02CB, r18
    534e:	08 95       	ret
}

// vel expressed in 1/5 of mm/s
void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    5350:	30 95       	com	r19
    5352:	21 95       	neg	r18
    5354:	3f 4f       	sbci	r19, 0xFF	; 255
    5356:	e9 cf       	rjmp	.-46     	; 0x532a <setLeftSpeed+0xc>

00005358 <setRightSpeed>:

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    5358:	28 2f       	mov	r18, r24
    535a:	33 27       	eor	r19, r19
    535c:	27 fd       	sbrc	r18, 7
    535e:	30 95       	com	r19
    5360:	37 fd       	sbrc	r19, 7
    5362:	13 c0       	rjmp	.+38     	; 0x538a <setRightSpeed+0x32>
    5364:	30 93 e4 02 	sts	0x02E4, r19
    5368:	20 93 e3 02 	sts	0x02E3, r18

    if(vel >= 0) {
    536c:	87 fd       	sbrc	r24, 7
    536e:	05 c0       	rjmp	.+10     	; 0x537a <setRightSpeed+0x22>
        pwm_right_desired = speedr;
    } else {
        pwm_right_desired = -(speedr);
    5370:	30 93 ca 02 	sts	0x02CA, r19
    5374:	20 93 c9 02 	sts	0x02C9, r18
    5378:	08 95       	ret
    537a:	30 95       	com	r19
    537c:	21 95       	neg	r18
    537e:	3f 4f       	sbci	r19, 0xFF	; 255
    5380:	30 93 ca 02 	sts	0x02CA, r19
    5384:	20 93 c9 02 	sts	0x02C9, r18
    5388:	08 95       	ret

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    538a:	30 95       	com	r19
    538c:	21 95       	neg	r18
    538e:	3f 4f       	sbci	r19, 0xFF	; 255
    5390:	e9 cf       	rjmp	.-46     	; 0x5364 <setRightSpeed+0xc>

00005392 <updateOdomData>:
}


void updateOdomData() {

    if(calibWheel == LEFT_WHEEL_FW_SC) {
    5392:	80 91 c9 04 	lds	r24, 0x04C9
    5396:	88 23       	and	r24, r24
    5398:	89 f5       	brne	.+98     	; 0x53fc <updateOdomData+0x6a>
        if(calibVelIndex>1) {
    539a:	e0 91 7b 07 	lds	r30, 0x077B
    539e:	e2 30       	cpi	r30, 0x02	; 2
    53a0:	08 f4       	brcc	.+2      	; 0x53a4 <updateOdomData+0x12>
    53a2:	96 c0       	rjmp	.+300    	; 0x54d0 <updateOdomData+0x13e>
            if(calibration[calibVelIndex-2][1] >= tempVel) {  // check that we have always increasing values of speed, otherwise there
    53a4:	f0 e0       	ldi	r31, 0x00	; 0
    53a6:	df 01       	movw	r26, r30
    53a8:	a2 95       	swap	r26
    53aa:	b2 95       	swap	r27
    53ac:	b0 7f       	andi	r27, 0xF0	; 240
    53ae:	ba 27       	eor	r27, r26
    53b0:	a0 7f       	andi	r26, 0xF0	; 240
    53b2:	ba 27       	eor	r27, r26
    53b4:	a2 58       	subi	r26, 0x82	; 130
    53b6:	b8 4f       	sbci	r27, 0xF8	; 248
    53b8:	12 96       	adiw	r26, 0x02	; 2
    53ba:	2d 91       	ld	r18, X+
    53bc:	3c 91       	ld	r19, X
    53be:	13 97       	sbiw	r26, 0x03	; 3
    53c0:	80 91 94 08 	lds	r24, 0x0894
    53c4:	90 91 95 08 	lds	r25, 0x0895
    53c8:	28 17       	cp	r18, r24
    53ca:	39 07       	cpc	r19, r25
    53cc:	34 f0       	brlt	.+12     	; 0x53da <updateOdomData+0x48>
                tempVel = calibration[calibVelIndex-2][1]+1; // will be problems when getting data from the lookup table
    53ce:	c9 01       	movw	r24, r18
    53d0:	01 96       	adiw	r24, 0x01	; 1
    53d2:	90 93 95 08 	sts	0x0895, r25
    53d6:	80 93 94 08 	sts	0x0894, r24
            }
        }
        calibration[calibVelIndex-1][0] = avgLeftSpeed;
    53da:	e2 95       	swap	r30
    53dc:	f2 95       	swap	r31
    53de:	f0 7f       	andi	r31, 0xF0	; 240
    53e0:	fe 27       	eor	r31, r30
    53e2:	e0 7f       	andi	r30, 0xF0	; 240
    53e4:	fe 27       	eor	r31, r30
    53e6:	e2 57       	subi	r30, 0x72	; 114
    53e8:	f8 4f       	sbci	r31, 0xF8	; 248
    53ea:	20 91 82 04 	lds	r18, 0x0482
    53ee:	30 91 83 04 	lds	r19, 0x0483
    53f2:	31 83       	std	Z+1, r19	; 0x01
    53f4:	20 83       	st	Z, r18
        calibration[calibVelIndex-1][1] = tempVel;
    53f6:	93 83       	std	Z+3, r25	; 0x03
    53f8:	82 83       	std	Z+2, r24	; 0x02
    53fa:	08 95       	ret
    } else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    53fc:	81 30       	cpi	r24, 0x01	; 1
    53fe:	31 f0       	breq	.+12     	; 0x540c <updateOdomData+0x7a>
                tempVel = calibration[calibVelIndex-2][3]+1;
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
        calibration[calibVelIndex-1][3] = tempVel;
    } else if(calibWheel == LEFT_WHEEL_BW_SC) {
    5400:	82 30       	cpi	r24, 0x02	; 2
    5402:	09 f4       	brne	.+2      	; 0x5406 <updateOdomData+0x74>
    5404:	6b c0       	rjmp	.+214    	; 0x54dc <updateOdomData+0x14a>
                tempVel = calibration[calibVelIndex-2][5]+1;
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
        calibration[calibVelIndex-1][5] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    5406:	83 30       	cpi	r24, 0x03	; 3
    5408:	91 f1       	breq	.+100    	; 0x546e <updateOdomData+0xdc>
    540a:	08 95       	ret
            }
        }
        calibration[calibVelIndex-1][0] = avgLeftSpeed;
        calibration[calibVelIndex-1][1] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_FW_SC) {
        if(calibVelIndex>1) {
    540c:	e0 91 7b 07 	lds	r30, 0x077B
    5410:	e2 30       	cpi	r30, 0x02	; 2
    5412:	08 f4       	brcc	.+2      	; 0x5416 <updateOdomData+0x84>
    5414:	93 c0       	rjmp	.+294    	; 0x553c <updateOdomData+0x1aa>
            if(calibration[calibVelIndex-2][3] >= tempVel) {
    5416:	f0 e0       	ldi	r31, 0x00	; 0
    5418:	df 01       	movw	r26, r30
    541a:	a2 95       	swap	r26
    541c:	b2 95       	swap	r27
    541e:	b0 7f       	andi	r27, 0xF0	; 240
    5420:	ba 27       	eor	r27, r26
    5422:	a0 7f       	andi	r26, 0xF0	; 240
    5424:	ba 27       	eor	r27, r26
    5426:	a2 58       	subi	r26, 0x82	; 130
    5428:	b8 4f       	sbci	r27, 0xF8	; 248
    542a:	16 96       	adiw	r26, 0x06	; 6
    542c:	2d 91       	ld	r18, X+
    542e:	3c 91       	ld	r19, X
    5430:	17 97       	sbiw	r26, 0x07	; 7
    5432:	80 91 94 08 	lds	r24, 0x0894
    5436:	90 91 95 08 	lds	r25, 0x0895
    543a:	28 17       	cp	r18, r24
    543c:	39 07       	cpc	r19, r25
    543e:	34 f0       	brlt	.+12     	; 0x544c <updateOdomData+0xba>
                tempVel = calibration[calibVelIndex-2][3]+1;
    5440:	c9 01       	movw	r24, r18
    5442:	01 96       	adiw	r24, 0x01	; 1
    5444:	90 93 95 08 	sts	0x0895, r25
    5448:	80 93 94 08 	sts	0x0894, r24
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
    544c:	e2 95       	swap	r30
    544e:	f2 95       	swap	r31
    5450:	f0 7f       	andi	r31, 0xF0	; 240
    5452:	fe 27       	eor	r31, r30
    5454:	e0 7f       	andi	r30, 0xF0	; 240
    5456:	fe 27       	eor	r31, r30
    5458:	e2 57       	subi	r30, 0x72	; 114
    545a:	f8 4f       	sbci	r31, 0xF8	; 248
    545c:	20 91 84 04 	lds	r18, 0x0484
    5460:	30 91 85 04 	lds	r19, 0x0485
    5464:	35 83       	std	Z+5, r19	; 0x05
    5466:	24 83       	std	Z+4, r18	; 0x04
        calibration[calibVelIndex-1][3] = tempVel;
    5468:	97 83       	std	Z+7, r25	; 0x07
    546a:	86 83       	std	Z+6, r24	; 0x06
    546c:	08 95       	ret
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
        calibration[calibVelIndex-1][5] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    546e:	e0 91 7b 07 	lds	r30, 0x077B
    5472:	e2 30       	cpi	r30, 0x02	; 2
    5474:	08 f4       	brcc	.+2      	; 0x5478 <updateOdomData+0xe6>
    5476:	68 c0       	rjmp	.+208    	; 0x5548 <updateOdomData+0x1b6>
            if(calibration[calibVelIndex-2][7] >= tempVel) {
    5478:	f0 e0       	ldi	r31, 0x00	; 0
    547a:	df 01       	movw	r26, r30
    547c:	a2 95       	swap	r26
    547e:	b2 95       	swap	r27
    5480:	b0 7f       	andi	r27, 0xF0	; 240
    5482:	ba 27       	eor	r27, r26
    5484:	a0 7f       	andi	r26, 0xF0	; 240
    5486:	ba 27       	eor	r27, r26
    5488:	a2 58       	subi	r26, 0x82	; 130
    548a:	b8 4f       	sbci	r27, 0xF8	; 248
    548c:	1e 96       	adiw	r26, 0x0e	; 14
    548e:	2d 91       	ld	r18, X+
    5490:	3c 91       	ld	r19, X
    5492:	1f 97       	sbiw	r26, 0x0f	; 15
    5494:	80 91 94 08 	lds	r24, 0x0894
    5498:	90 91 95 08 	lds	r25, 0x0895
    549c:	28 17       	cp	r18, r24
    549e:	39 07       	cpc	r19, r25
    54a0:	34 f0       	brlt	.+12     	; 0x54ae <updateOdomData+0x11c>
                tempVel = calibration[calibVelIndex-2][7]+1;
    54a2:	c9 01       	movw	r24, r18
    54a4:	01 96       	adiw	r24, 0x01	; 1
    54a6:	90 93 95 08 	sts	0x0895, r25
    54aa:	80 93 94 08 	sts	0x0894, r24
            }
        }
		calibration[calibVelIndex-1][6] = avgRightSpeed;
    54ae:	e2 95       	swap	r30
    54b0:	f2 95       	swap	r31
    54b2:	f0 7f       	andi	r31, 0xF0	; 240
    54b4:	fe 27       	eor	r31, r30
    54b6:	e0 7f       	andi	r30, 0xF0	; 240
    54b8:	fe 27       	eor	r31, r30
    54ba:	e2 57       	subi	r30, 0x72	; 114
    54bc:	f8 4f       	sbci	r31, 0xF8	; 248
    54be:	20 91 84 04 	lds	r18, 0x0484
    54c2:	30 91 85 04 	lds	r19, 0x0485
    54c6:	35 87       	std	Z+13, r19	; 0x0d
    54c8:	24 87       	std	Z+12, r18	; 0x0c
        calibration[calibVelIndex-1][7] = tempVel;
    54ca:	97 87       	std	Z+15, r25	; 0x0f
    54cc:	86 87       	std	Z+14, r24	; 0x0e
    54ce:	08 95       	ret


void updateOdomData() {

    if(calibWheel == LEFT_WHEEL_FW_SC) {
        if(calibVelIndex>1) {
    54d0:	f0 e0       	ldi	r31, 0x00	; 0
    54d2:	80 91 94 08 	lds	r24, 0x0894
    54d6:	90 91 95 08 	lds	r25, 0x0895
    54da:	7f cf       	rjmp	.-258    	; 0x53da <updateOdomData+0x48>
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
        calibration[calibVelIndex-1][3] = tempVel;
    } else if(calibWheel == LEFT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    54dc:	e0 91 7b 07 	lds	r30, 0x077B
    54e0:	e2 30       	cpi	r30, 0x02	; 2
    54e2:	c0 f1       	brcs	.+112    	; 0x5554 <updateOdomData+0x1c2>
            if(calibration[calibVelIndex-2][5] >= tempVel) {
    54e4:	f0 e0       	ldi	r31, 0x00	; 0
    54e6:	df 01       	movw	r26, r30
    54e8:	a2 95       	swap	r26
    54ea:	b2 95       	swap	r27
    54ec:	b0 7f       	andi	r27, 0xF0	; 240
    54ee:	ba 27       	eor	r27, r26
    54f0:	a0 7f       	andi	r26, 0xF0	; 240
    54f2:	ba 27       	eor	r27, r26
    54f4:	a2 58       	subi	r26, 0x82	; 130
    54f6:	b8 4f       	sbci	r27, 0xF8	; 248
    54f8:	1a 96       	adiw	r26, 0x0a	; 10
    54fa:	2d 91       	ld	r18, X+
    54fc:	3c 91       	ld	r19, X
    54fe:	1b 97       	sbiw	r26, 0x0b	; 11
    5500:	80 91 94 08 	lds	r24, 0x0894
    5504:	90 91 95 08 	lds	r25, 0x0895
    5508:	28 17       	cp	r18, r24
    550a:	39 07       	cpc	r19, r25
    550c:	34 f0       	brlt	.+12     	; 0x551a <updateOdomData+0x188>
                tempVel = calibration[calibVelIndex-2][5]+1;
    550e:	c9 01       	movw	r24, r18
    5510:	01 96       	adiw	r24, 0x01	; 1
    5512:	90 93 95 08 	sts	0x0895, r25
    5516:	80 93 94 08 	sts	0x0894, r24
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
    551a:	e2 95       	swap	r30
    551c:	f2 95       	swap	r31
    551e:	f0 7f       	andi	r31, 0xF0	; 240
    5520:	fe 27       	eor	r31, r30
    5522:	e0 7f       	andi	r30, 0xF0	; 240
    5524:	fe 27       	eor	r31, r30
    5526:	e2 57       	subi	r30, 0x72	; 114
    5528:	f8 4f       	sbci	r31, 0xF8	; 248
    552a:	20 91 82 04 	lds	r18, 0x0482
    552e:	30 91 83 04 	lds	r19, 0x0483
    5532:	31 87       	std	Z+9, r19	; 0x09
    5534:	20 87       	std	Z+8, r18	; 0x08
        calibration[calibVelIndex-1][5] = tempVel;
    5536:	93 87       	std	Z+11, r25	; 0x0b
    5538:	82 87       	std	Z+10, r24	; 0x0a
    553a:	08 95       	ret
            }
        }
        calibration[calibVelIndex-1][0] = avgLeftSpeed;
        calibration[calibVelIndex-1][1] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_FW_SC) {
        if(calibVelIndex>1) {
    553c:	f0 e0       	ldi	r31, 0x00	; 0
    553e:	80 91 94 08 	lds	r24, 0x0894
    5542:	90 91 95 08 	lds	r25, 0x0895
    5546:	82 cf       	rjmp	.-252    	; 0x544c <updateOdomData+0xba>
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
        calibration[calibVelIndex-1][5] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    5548:	f0 e0       	ldi	r31, 0x00	; 0
    554a:	80 91 94 08 	lds	r24, 0x0894
    554e:	90 91 95 08 	lds	r25, 0x0895
    5552:	ad cf       	rjmp	.-166    	; 0x54ae <updateOdomData+0x11c>
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
        calibration[calibVelIndex-1][3] = tempVel;
    } else if(calibWheel == LEFT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    5554:	f0 e0       	ldi	r31, 0x00	; 0
    5556:	80 91 94 08 	lds	r24, 0x0894
    555a:	90 91 95 08 	lds	r25, 0x0895
    555e:	dd cf       	rjmp	.-70     	; 0x551a <updateOdomData+0x188>

00005560 <handleCalibration>:

}

void handleCalibration() {

	switch(calibState) {
    5560:	80 91 83 08 	lds	r24, 0x0883
    5564:	82 30       	cpi	r24, 0x02	; 2
    5566:	09 f4       	brne	.+2      	; 0x556a <handleCalibration+0xa>
    5568:	d0 c0       	rjmp	.+416    	; 0x570a <handleCalibration+0x1aa>
    556a:	83 30       	cpi	r24, 0x03	; 3
    556c:	08 f4       	brcc	.+2      	; 0x5570 <handleCalibration+0x10>
    556e:	3f c0       	rjmp	.+126    	; 0x55ee <handleCalibration+0x8e>
    5570:	84 30       	cpi	r24, 0x04	; 4
    5572:	09 f4       	brne	.+2      	; 0x5576 <handleCalibration+0x16>
    5574:	91 c0       	rjmp	.+290    	; 0x5698 <handleCalibration+0x138>
    5576:	84 30       	cpi	r24, 0x04	; 4
    5578:	08 f0       	brcs	.+2      	; 0x557c <handleCalibration+0x1c>
    557a:	63 c0       	rjmp	.+198    	; 0x5642 <handleCalibration+0xe2>
                calibState = 5;
			}
            break;

		case 3: // look for black line again, stop time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    557c:	80 91 c9 04 	lds	r24, 0x04C9
    5580:	88 23       	and	r24, r24
    5582:	09 f4       	brne	.+2      	; 0x5586 <handleCalibration+0x26>
    5584:	e1 c0       	rjmp	.+450    	; 0x5748 <handleCalibration+0x1e8>
    5586:	82 30       	cpi	r24, 0x02	; 2
    5588:	09 f4       	brne	.+2      	; 0x558c <handleCalibration+0x2c>
    558a:	de c0       	rjmp	.+444    	; 0x5748 <handleCalibration+0x1e8>
                    updateOdomData();
                    calibState = 4;
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
            	if(proximityResult[11]<(512-2*HYSTERESIS_THR)) {
    558c:	80 91 3f 02 	lds	r24, 0x023F
    5590:	90 91 40 02 	lds	r25, 0x0240
    5594:	21 e0       	ldi	r18, 0x01	; 1
    5596:	8a 36       	cpi	r24, 0x6A	; 106
    5598:	92 07       	cpc	r25, r18
    559a:	0c f4       	brge	.+2      	; 0x559e <handleCalibration+0x3e>
    559c:	8a c1       	rjmp	.+788    	; 0x58b2 <handleCalibration+0x352>
					updateOdomData();
                    calibState = 4;
                    timeoutOdometry = getTime100MicroSec();;
				}
			}
			if((getTime100MicroSec() - timeoutOdometry)>PAUSE_60_SEC) {    // the robot seems to be still, go to next velcoity
    559e:	0e 94 d7 21 	call	0x43ae	; 0x43ae <getTime100MicroSec>
    55a2:	20 91 55 08 	lds	r18, 0x0855
    55a6:	30 91 56 08 	lds	r19, 0x0856
    55aa:	40 91 57 08 	lds	r20, 0x0857
    55ae:	50 91 58 08 	lds	r21, 0x0858
    55b2:	62 1b       	sub	r22, r18
    55b4:	73 0b       	sbc	r23, r19
    55b6:	84 0b       	sbc	r24, r20
    55b8:	95 0b       	sbc	r25, r21
    55ba:	6c 39       	cpi	r22, 0x9C	; 156
    55bc:	2d ec       	ldi	r18, 0xCD	; 205
    55be:	72 07       	cpc	r23, r18
    55c0:	28 e0       	ldi	r18, 0x08	; 8
    55c2:	82 07       	cpc	r24, r18
    55c4:	20 e0       	ldi	r18, 0x00	; 0
    55c6:	92 07       	cpc	r25, r18
    55c8:	d8 f1       	brcs	.+118    	; 0x5640 <handleCalibration+0xe0>
            	tempVel = 0;
    55ca:	10 92 95 08 	sts	0x0895, r1
    55ce:	10 92 94 08 	sts	0x0894, r1
				avgLeftSpeed = 0;
    55d2:	10 92 83 04 	sts	0x0483, r1
    55d6:	10 92 82 04 	sts	0x0482, r1
				avgRightSpeed = 0;
    55da:	10 92 85 04 	sts	0x0485, r1
    55de:	10 92 84 04 	sts	0x0484, r1
                updateOdomData();
    55e2:	0e 94 c9 29 	call	0x5392	; 0x5392 <updateOdomData>
                calibState = 5;
    55e6:	85 e0       	ldi	r24, 0x05	; 5
    55e8:	80 93 83 08 	sts	0x0883, r24
    55ec:	08 95       	ret

}

void handleCalibration() {

	switch(calibState) {
    55ee:	88 23       	and	r24, r24
    55f0:	29 f5       	brne	.+74     	; 0x563c <handleCalibration+0xdc>

    	case 0: // set speed
        	if(calibWheel == LEFT_WHEEL_FW_SC) {
    55f2:	80 91 c9 04 	lds	r24, 0x04C9
    55f6:	88 23       	and	r24, r24
    55f8:	09 f0       	breq	.+2      	; 0x55fc <handleCalibration+0x9c>
    55fa:	3c c1       	rjmp	.+632    	; 0x5874 <handleCalibration+0x314>
				pwm_intermediate_right_desired = 0;
    55fc:	10 92 ce 02 	sts	0x02CE, r1
    5600:	10 92 cd 02 	sts	0x02CD, r1
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
    5604:	90 91 7b 07 	lds	r25, 0x077B
    5608:	85 e0       	ldi	r24, 0x05	; 5
    560a:	98 9f       	mul	r25, r24
    560c:	c0 01       	movw	r24, r0
    560e:	11 24       	eor	r1, r1
    5610:	88 0f       	add	r24, r24
    5612:	99 1f       	adc	r25, r25
    5614:	88 0f       	add	r24, r24
    5616:	99 1f       	adc	r25, r25
    5618:	90 93 d0 02 	sts	0x02D0, r25
    561c:	80 93 cf 02 	sts	0x02CF, r24
				pwm_intermediate_left_desired = -((INDEX_STEP*calibVelIndex)<<2);
        	} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
				pwm_intermediate_right_desired = -((INDEX_STEP*calibVelIndex)<<2);
				pwm_intermediate_left_desired = 0;
			}               
            calibState = 1;
    5620:	81 e0       	ldi	r24, 0x01	; 1
    5622:	80 93 83 08 	sts	0x0883, r24
            timeoutOdometry = getTime100MicroSec();
    5626:	0e 94 d7 21 	call	0x43ae	; 0x43ae <getTime100MicroSec>
    562a:	60 93 55 08 	sts	0x0855, r22
    562e:	70 93 56 08 	sts	0x0856, r23
    5632:	80 93 57 08 	sts	0x0857, r24
    5636:	90 93 58 08 	sts	0x0858, r25
            break;
    563a:	08 95       	ret

}

void handleCalibration() {

	switch(calibState) {
    563c:	81 30       	cpi	r24, 0x01	; 1
    563e:	71 f0       	breq	.+28     	; 0x565c <handleCalibration+0xfc>
    5640:	08 95       	ret
    5642:	85 30       	cpi	r24, 0x05	; 5
    5644:	e9 f7       	brne	.-6      	; 0x5640 <handleCalibration+0xe0>
                calibState = 5;
			}
            break;

		case 5:
        	calibVelIndex++;
    5646:	80 91 7b 07 	lds	r24, 0x077B
    564a:	8f 5f       	subi	r24, 0xFF	; 255
    564c:	80 93 7b 07 	sts	0x077B, r24
            if(calibVelIndex == 10) {
    5650:	8a 30       	cpi	r24, 0x0A	; 10
    5652:	09 f4       	brne	.+2      	; 0x5656 <handleCalibration+0xf6>
    5654:	8b c1       	rjmp	.+790    	; 0x596c <handleCalibration+0x40c>
					// red off
					writeCalibrationToFlash();
					calibrateOdomFlag = 0;
				}
			}
			calibState = 0;
    5656:	10 92 83 08 	sts	0x0883, r1
    565a:	08 95       	ret
            calibState = 1;
            timeoutOdometry = getTime100MicroSec();
            break;

		case 1: // look for black line, start time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    565c:	80 91 c9 04 	lds	r24, 0x04C9
    5660:	88 23       	and	r24, r24
    5662:	09 f4       	brne	.+2      	; 0x5666 <handleCalibration+0x106>
    5664:	d0 c0       	rjmp	.+416    	; 0x5806 <handleCalibration+0x2a6>
    5666:	82 30       	cpi	r24, 0x02	; 2
    5668:	09 f4       	brne	.+2      	; 0x566c <handleCalibration+0x10c>
    566a:	cd c0       	rjmp	.+410    	; 0x5806 <handleCalibration+0x2a6>
                    timeOdometry = getTime100MicroSec();;
                    calibState = 2;
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
            	if(proximityResult[11]<(512-2*HYSTERESIS_THR)) {
    566c:	80 91 3f 02 	lds	r24, 0x023F
    5670:	90 91 40 02 	lds	r25, 0x0240
    5674:	21 e0       	ldi	r18, 0x01	; 1
    5676:	8a 36       	cpi	r24, 0x6A	; 106
    5678:	92 07       	cpc	r25, r18
    567a:	0c f0       	brlt	.+2      	; 0x567e <handleCalibration+0x11e>
    567c:	90 cf       	rjmp	.-224    	; 0x559e <handleCalibration+0x3e>
				//if((proximityResult[11])<(proximityOffset[11]>>1)) {	
					rightSumCount = 0;
    567e:	10 92 81 04 	sts	0x0481, r1
    5682:	10 92 80 04 	sts	0x0480, r1
					rightSpeedSumOdom = 0;
    5686:	10 92 7a 04 	sts	0x047A, r1
    568a:	10 92 7b 04 	sts	0x047B, r1
    568e:	10 92 7c 04 	sts	0x047C, r1
    5692:	10 92 7d 04 	sts	0x047D, r1
    5696:	cc c0       	rjmp	.+408    	; 0x5830 <handleCalibration+0x2d0>
                calibState = 5;
			}
            break;

		case 4: // exit from black line again
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    5698:	80 91 c9 04 	lds	r24, 0x04C9
    569c:	88 23       	and	r24, r24
    569e:	49 f1       	breq	.+82     	; 0x56f2 <handleCalibration+0x192>
    56a0:	82 30       	cpi	r24, 0x02	; 2
    56a2:	39 f1       	breq	.+78     	; 0x56f2 <handleCalibration+0x192>
            	if(proximityResult[8]>(512-HYSTERESIS_THR)) {
				//if((proximityResult[8])>(proximityOffset[8]>>1)) {	
                	calibState = 5;
				}
			} else {
            	if(proximityResult[11]>(512-HYSTERESIS_THR)) {
    56a4:	80 91 3f 02 	lds	r24, 0x023F
    56a8:	90 91 40 02 	lds	r25, 0x0240
    56ac:	21 e0       	ldi	r18, 0x01	; 1
    56ae:	86 3b       	cpi	r24, 0xB6	; 182
    56b0:	92 07       	cpc	r25, r18
    56b2:	3c f5       	brge	.+78     	; 0x5702 <handleCalibration+0x1a2>
				//if((proximityResult[11])>(proximityOffset[11]>>1)) {	
					calibState = 5;
				}
			}
            if((getTime100MicroSec() - timeoutOdometry)>PAUSE_60_SEC) {    // the robot seems to be still, go to next velocity
    56b4:	0e 94 d7 21 	call	0x43ae	; 0x43ae <getTime100MicroSec>
    56b8:	20 91 55 08 	lds	r18, 0x0855
    56bc:	30 91 56 08 	lds	r19, 0x0856
    56c0:	40 91 57 08 	lds	r20, 0x0857
    56c4:	50 91 58 08 	lds	r21, 0x0858
    56c8:	62 1b       	sub	r22, r18
    56ca:	73 0b       	sbc	r23, r19
    56cc:	84 0b       	sbc	r24, r20
    56ce:	95 0b       	sbc	r25, r21
    56d0:	6c 39       	cpi	r22, 0x9C	; 156
    56d2:	2d ec       	ldi	r18, 0xCD	; 205
    56d4:	72 07       	cpc	r23, r18
    56d6:	28 e0       	ldi	r18, 0x08	; 8
    56d8:	82 07       	cpc	r24, r18
    56da:	20 e0       	ldi	r18, 0x00	; 0
    56dc:	92 07       	cpc	r25, r18
    56de:	08 f4       	brcc	.+2      	; 0x56e2 <handleCalibration+0x182>
    56e0:	af cf       	rjmp	.-162    	; 0x5640 <handleCalibration+0xe0>
            	tempVel = 0;
    56e2:	10 92 95 08 	sts	0x0895, r1
    56e6:	10 92 94 08 	sts	0x0894, r1
                //updateOdomData();
                calibState = 5;
    56ea:	85 e0       	ldi	r24, 0x05	; 5
    56ec:	80 93 83 08 	sts	0x0883, r24
    56f0:	08 95       	ret
			}
            break;

		case 4: // exit from black line again
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
            	if(proximityResult[8]>(512-HYSTERESIS_THR)) {
    56f2:	80 91 39 02 	lds	r24, 0x0239
    56f6:	90 91 3a 02 	lds	r25, 0x023A
    56fa:	21 e0       	ldi	r18, 0x01	; 1
    56fc:	86 3b       	cpi	r24, 0xB6	; 182
    56fe:	92 07       	cpc	r25, r18
    5700:	cc f2       	brlt	.-78     	; 0x56b4 <handleCalibration+0x154>
                	calibState = 5;
				}
			} else {
            	if(proximityResult[11]>(512-HYSTERESIS_THR)) {
				//if((proximityResult[11])>(proximityOffset[11]>>1)) {	
					calibState = 5;
    5702:	85 e0       	ldi	r24, 0x05	; 5
    5704:	80 93 83 08 	sts	0x0883, r24
    5708:	d5 cf       	rjmp	.-86     	; 0x56b4 <handleCalibration+0x154>
                calibState = 5;
			}
			break;

		case 2: // exit from black line
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    570a:	80 91 c9 04 	lds	r24, 0x04C9
    570e:	88 23       	and	r24, r24
    5710:	09 f4       	brne	.+2      	; 0x5714 <handleCalibration+0x1b4>
    5712:	a6 c0       	rjmp	.+332    	; 0x5860 <handleCalibration+0x300>
    5714:	82 30       	cpi	r24, 0x02	; 2
    5716:	09 f4       	brne	.+2      	; 0x571a <handleCalibration+0x1ba>
    5718:	a3 c0       	rjmp	.+326    	; 0x5860 <handleCalibration+0x300>
				//if((proximityResult[8])>(proximityOffset[8]>>1)) {	
                	calibState = 3;
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
            	if(proximityResult[11]>(512-HYSTERESIS_THR)) {
    571a:	80 91 3f 02 	lds	r24, 0x023F
    571e:	90 91 40 02 	lds	r25, 0x0240
    5722:	21 e0       	ldi	r18, 0x01	; 1
    5724:	86 3b       	cpi	r24, 0xB6	; 182
    5726:	92 07       	cpc	r25, r18
    5728:	0c f4       	brge	.+2      	; 0x572c <handleCalibration+0x1cc>
    572a:	39 cf       	rjmp	.-398    	; 0x559e <handleCalibration+0x3e>
				//if((proximityResult[11])>(proximityOffset[11]>>1)) {	
                	calibState = 3;
    572c:	83 e0       	ldi	r24, 0x03	; 3
    572e:	80 93 83 08 	sts	0x0883, r24
                    timeoutOdometry = getTime100MicroSec();;
    5732:	0e 94 d7 21 	call	0x43ae	; 0x43ae <getTime100MicroSec>
    5736:	60 93 55 08 	sts	0x0855, r22
    573a:	70 93 56 08 	sts	0x0856, r23
    573e:	80 93 57 08 	sts	0x0857, r24
    5742:	90 93 58 08 	sts	0x0858, r25
    5746:	2b cf       	rjmp	.-426    	; 0x559e <handleCalibration+0x3e>
			}
            break;

		case 3: // look for black line again, stop time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
            	if(proximityResult[8]<(512-2*HYSTERESIS_THR)) {
    5748:	80 91 39 02 	lds	r24, 0x0239
    574c:	90 91 3a 02 	lds	r25, 0x023A
    5750:	21 e0       	ldi	r18, 0x01	; 1
    5752:	8a 36       	cpi	r24, 0x6A	; 106
    5754:	92 07       	cpc	r25, r18
    5756:	0c f0       	brlt	.+2      	; 0x575a <handleCalibration+0x1fa>
    5758:	22 cf       	rjmp	.-444    	; 0x559e <handleCalibration+0x3e>
				//if((proximityResult[8])<(proximityOffset[8]>>1)) {	
                	timeOdometry = getTime100MicroSec() - timeOdometry;
    575a:	0e 94 d7 21 	call	0x43ae	; 0x43ae <getTime100MicroSec>
    575e:	20 91 c2 04 	lds	r18, 0x04C2
    5762:	30 91 c3 04 	lds	r19, 0x04C3
    5766:	40 91 c4 04 	lds	r20, 0x04C4
    576a:	50 91 c5 04 	lds	r21, 0x04C5
    576e:	62 1b       	sub	r22, r18
    5770:	73 0b       	sbc	r23, r19
    5772:	84 0b       	sbc	r24, r20
    5774:	95 0b       	sbc	r25, r21
    5776:	60 93 c2 04 	sts	0x04C2, r22
    577a:	70 93 c3 04 	sts	0x04C3, r23
    577e:	80 93 c4 04 	sts	0x04C4, r24
    5782:	90 93 c5 04 	sts	0x04C5, r25
                    tempVel = (unsigned int)(DISTANCE_MM/((float)timeOdometry*104.0/1000000.0));
    5786:	0e 94 32 47 	call	0x8e64	; 0x8e64 <__floatunsisf>
    578a:	20 e0       	ldi	r18, 0x00	; 0
    578c:	30 e0       	ldi	r19, 0x00	; 0
    578e:	40 ed       	ldi	r20, 0xD0	; 208
    5790:	52 e4       	ldi	r21, 0x42	; 66
    5792:	0e 94 49 48 	call	0x9092	; 0x9092 <__mulsf3>
    5796:	20 e0       	ldi	r18, 0x00	; 0
    5798:	34 e2       	ldi	r19, 0x24	; 36
    579a:	44 e7       	ldi	r20, 0x74	; 116
    579c:	59 e4       	ldi	r21, 0x49	; 73
    579e:	0e 94 99 46 	call	0x8d32	; 0x8d32 <__divsf3>
    57a2:	9b 01       	movw	r18, r22
    57a4:	ac 01       	movw	r20, r24
    57a6:	64 e1       	ldi	r22, 0x14	; 20
    57a8:	7e e2       	ldi	r23, 0x2E	; 46
    57aa:	88 e7       	ldi	r24, 0x78	; 120
    57ac:	93 e4       	ldi	r25, 0x43	; 67
    57ae:	0e 94 99 46 	call	0x8d32	; 0x8d32 <__divsf3>
    57b2:	0e 94 06 47 	call	0x8e0c	; 0x8e0c <__fixunssfsi>
    57b6:	70 93 95 08 	sts	0x0895, r23
    57ba:	60 93 94 08 	sts	0x0894, r22
					avgLeftSpeed = leftSpeedSumOdom/leftSumCount;
    57be:	20 91 7e 04 	lds	r18, 0x047E
    57c2:	30 91 7f 04 	lds	r19, 0x047F
    57c6:	40 e0       	ldi	r20, 0x00	; 0
    57c8:	50 e0       	ldi	r21, 0x00	; 0
    57ca:	60 91 76 04 	lds	r22, 0x0476
    57ce:	70 91 77 04 	lds	r23, 0x0477
    57d2:	80 91 78 04 	lds	r24, 0x0478
    57d6:	90 91 79 04 	lds	r25, 0x0479
    57da:	0e 94 1a 49 	call	0x9234	; 0x9234 <__divmodsi4>
    57de:	30 93 83 04 	sts	0x0483, r19
    57e2:	20 93 82 04 	sts	0x0482, r18
            	if(proximityResult[11]<(512-2*HYSTERESIS_THR)) {
				//if((proximityResult[11])<(proximityOffset[11]>>1)) {	
                	timeOdometry = getTime100MicroSec() - timeOdometry;
                    tempVel = (unsigned int)(DISTANCE_MM/((float)timeOdometry*104.0/1000000.0));
                    avgRightSpeed = rightSpeedSumOdom/rightSumCount;
					updateOdomData();
    57e6:	0e 94 c9 29 	call	0x5392	; 0x5392 <updateOdomData>
                    calibState = 4;
    57ea:	84 e0       	ldi	r24, 0x04	; 4
    57ec:	80 93 83 08 	sts	0x0883, r24
                    timeoutOdometry = getTime100MicroSec();;
    57f0:	0e 94 d7 21 	call	0x43ae	; 0x43ae <getTime100MicroSec>
    57f4:	60 93 55 08 	sts	0x0855, r22
    57f8:	70 93 56 08 	sts	0x0856, r23
    57fc:	80 93 57 08 	sts	0x0857, r24
    5800:	90 93 58 08 	sts	0x0858, r25
    5804:	cc ce       	rjmp	.-616    	; 0x559e <handleCalibration+0x3e>
            timeoutOdometry = getTime100MicroSec();
            break;

		case 1: // look for black line, start time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
            	if(proximityResult[8]<(512-2*HYSTERESIS_THR)) {
    5806:	80 91 39 02 	lds	r24, 0x0239
    580a:	90 91 3a 02 	lds	r25, 0x023A
    580e:	21 e0       	ldi	r18, 0x01	; 1
    5810:	8a 36       	cpi	r24, 0x6A	; 106
    5812:	92 07       	cpc	r25, r18
    5814:	0c f0       	brlt	.+2      	; 0x5818 <handleCalibration+0x2b8>
    5816:	c3 ce       	rjmp	.-634    	; 0x559e <handleCalibration+0x3e>
				//if((proximityResult[8])<(proximityOffset[8]>>1)) {				
                	leftSumCount = 0;
    5818:	10 92 7f 04 	sts	0x047F, r1
    581c:	10 92 7e 04 	sts	0x047E, r1
                    leftSpeedSumOdom = 0;
    5820:	10 92 76 04 	sts	0x0476, r1
    5824:	10 92 77 04 	sts	0x0477, r1
    5828:	10 92 78 04 	sts	0x0478, r1
    582c:	10 92 79 04 	sts	0x0479, r1
			} else {
            	if(proximityResult[11]<(512-2*HYSTERESIS_THR)) {
				//if((proximityResult[11])<(proximityOffset[11]>>1)) {	
					rightSumCount = 0;
					rightSpeedSumOdom = 0;
                    timeOdometry = getTime100MicroSec();;
    5830:	0e 94 d7 21 	call	0x43ae	; 0x43ae <getTime100MicroSec>
    5834:	60 93 c2 04 	sts	0x04C2, r22
    5838:	70 93 c3 04 	sts	0x04C3, r23
    583c:	80 93 c4 04 	sts	0x04C4, r24
    5840:	90 93 c5 04 	sts	0x04C5, r25
                    calibState = 2;
    5844:	82 e0       	ldi	r24, 0x02	; 2
    5846:	80 93 83 08 	sts	0x0883, r24
                    timeoutOdometry = getTime100MicroSec();;
    584a:	0e 94 d7 21 	call	0x43ae	; 0x43ae <getTime100MicroSec>
    584e:	60 93 55 08 	sts	0x0855, r22
    5852:	70 93 56 08 	sts	0x0856, r23
    5856:	80 93 57 08 	sts	0x0857, r24
    585a:	90 93 58 08 	sts	0x0858, r25
    585e:	9f ce       	rjmp	.-706    	; 0x559e <handleCalibration+0x3e>
			}
			break;

		case 2: // exit from black line
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
            	if(proximityResult[8]>(512-HYSTERESIS_THR)) {
    5860:	80 91 39 02 	lds	r24, 0x0239
    5864:	90 91 3a 02 	lds	r25, 0x023A
    5868:	21 e0       	ldi	r18, 0x01	; 1
    586a:	86 3b       	cpi	r24, 0xB6	; 182
    586c:	92 07       	cpc	r25, r18
    586e:	0c f4       	brge	.+2      	; 0x5872 <handleCalibration+0x312>
    5870:	96 ce       	rjmp	.-724    	; 0x559e <handleCalibration+0x3e>
    5872:	5c cf       	rjmp	.-328    	; 0x572c <handleCalibration+0x1cc>

    	case 0: // set speed
        	if(calibWheel == LEFT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = 0;
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    5874:	81 30       	cpi	r24, 0x01	; 1
    5876:	09 f4       	brne	.+2      	; 0x587a <handleCalibration+0x31a>
    5878:	84 c0       	rjmp	.+264    	; 0x5982 <handleCalibration+0x422>
				pwm_intermediate_right_desired = (INDEX_STEP*calibVelIndex)<<2;
				pwm_intermediate_left_desired = 0;
			} else if(calibWheel == LEFT_WHEEL_BW_SC) {
    587a:	82 30       	cpi	r24, 0x02	; 2
    587c:	09 f4       	brne	.+2      	; 0x5880 <handleCalibration+0x320>
    587e:	60 c0       	rjmp	.+192    	; 0x5940 <handleCalibration+0x3e0>
				pwm_intermediate_right_desired = 0;
				pwm_intermediate_left_desired = -((INDEX_STEP*calibVelIndex)<<2);
        	} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    5880:	83 30       	cpi	r24, 0x03	; 3
    5882:	09 f0       	breq	.+2      	; 0x5886 <handleCalibration+0x326>
    5884:	cd ce       	rjmp	.-614    	; 0x5620 <handleCalibration+0xc0>
				pwm_intermediate_right_desired = -((INDEX_STEP*calibVelIndex)<<2);
    5886:	90 91 7b 07 	lds	r25, 0x077B
    588a:	85 e0       	ldi	r24, 0x05	; 5
    588c:	98 9f       	mul	r25, r24
    588e:	c0 01       	movw	r24, r0
    5890:	11 24       	eor	r1, r1
    5892:	88 0f       	add	r24, r24
    5894:	99 1f       	adc	r25, r25
    5896:	88 0f       	add	r24, r24
    5898:	99 1f       	adc	r25, r25
    589a:	90 95       	com	r25
    589c:	81 95       	neg	r24
    589e:	9f 4f       	sbci	r25, 0xFF	; 255
    58a0:	90 93 ce 02 	sts	0x02CE, r25
    58a4:	80 93 cd 02 	sts	0x02CD, r24
				pwm_intermediate_left_desired = 0;
    58a8:	10 92 d0 02 	sts	0x02D0, r1
    58ac:	10 92 cf 02 	sts	0x02CF, r1
    58b0:	b7 ce       	rjmp	.-658    	; 0x5620 <handleCalibration+0xc0>
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
            	if(proximityResult[11]<(512-2*HYSTERESIS_THR)) {
				//if((proximityResult[11])<(proximityOffset[11]>>1)) {	
                	timeOdometry = getTime100MicroSec() - timeOdometry;
    58b2:	0e 94 d7 21 	call	0x43ae	; 0x43ae <getTime100MicroSec>
    58b6:	20 91 c2 04 	lds	r18, 0x04C2
    58ba:	30 91 c3 04 	lds	r19, 0x04C3
    58be:	40 91 c4 04 	lds	r20, 0x04C4
    58c2:	50 91 c5 04 	lds	r21, 0x04C5
    58c6:	62 1b       	sub	r22, r18
    58c8:	73 0b       	sbc	r23, r19
    58ca:	84 0b       	sbc	r24, r20
    58cc:	95 0b       	sbc	r25, r21
    58ce:	60 93 c2 04 	sts	0x04C2, r22
    58d2:	70 93 c3 04 	sts	0x04C3, r23
    58d6:	80 93 c4 04 	sts	0x04C4, r24
    58da:	90 93 c5 04 	sts	0x04C5, r25
                    tempVel = (unsigned int)(DISTANCE_MM/((float)timeOdometry*104.0/1000000.0));
    58de:	0e 94 32 47 	call	0x8e64	; 0x8e64 <__floatunsisf>
    58e2:	20 e0       	ldi	r18, 0x00	; 0
    58e4:	30 e0       	ldi	r19, 0x00	; 0
    58e6:	40 ed       	ldi	r20, 0xD0	; 208
    58e8:	52 e4       	ldi	r21, 0x42	; 66
    58ea:	0e 94 49 48 	call	0x9092	; 0x9092 <__mulsf3>
    58ee:	20 e0       	ldi	r18, 0x00	; 0
    58f0:	34 e2       	ldi	r19, 0x24	; 36
    58f2:	44 e7       	ldi	r20, 0x74	; 116
    58f4:	59 e4       	ldi	r21, 0x49	; 73
    58f6:	0e 94 99 46 	call	0x8d32	; 0x8d32 <__divsf3>
    58fa:	9b 01       	movw	r18, r22
    58fc:	ac 01       	movw	r20, r24
    58fe:	64 e1       	ldi	r22, 0x14	; 20
    5900:	7e e2       	ldi	r23, 0x2E	; 46
    5902:	88 e7       	ldi	r24, 0x78	; 120
    5904:	93 e4       	ldi	r25, 0x43	; 67
    5906:	0e 94 99 46 	call	0x8d32	; 0x8d32 <__divsf3>
    590a:	0e 94 06 47 	call	0x8e0c	; 0x8e0c <__fixunssfsi>
    590e:	70 93 95 08 	sts	0x0895, r23
    5912:	60 93 94 08 	sts	0x0894, r22
                    avgRightSpeed = rightSpeedSumOdom/rightSumCount;
    5916:	20 91 80 04 	lds	r18, 0x0480
    591a:	30 91 81 04 	lds	r19, 0x0481
    591e:	40 e0       	ldi	r20, 0x00	; 0
    5920:	50 e0       	ldi	r21, 0x00	; 0
    5922:	60 91 7a 04 	lds	r22, 0x047A
    5926:	70 91 7b 04 	lds	r23, 0x047B
    592a:	80 91 7c 04 	lds	r24, 0x047C
    592e:	90 91 7d 04 	lds	r25, 0x047D
    5932:	0e 94 1a 49 	call	0x9234	; 0x9234 <__divmodsi4>
    5936:	30 93 85 04 	sts	0x0485, r19
    593a:	20 93 84 04 	sts	0x0484, r18
    593e:	53 cf       	rjmp	.-346    	; 0x57e6 <handleCalibration+0x286>
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = (INDEX_STEP*calibVelIndex)<<2;
				pwm_intermediate_left_desired = 0;
			} else if(calibWheel == LEFT_WHEEL_BW_SC) {
				pwm_intermediate_right_desired = 0;
    5940:	10 92 ce 02 	sts	0x02CE, r1
    5944:	10 92 cd 02 	sts	0x02CD, r1
				pwm_intermediate_left_desired = -((INDEX_STEP*calibVelIndex)<<2);
    5948:	90 91 7b 07 	lds	r25, 0x077B
    594c:	85 e0       	ldi	r24, 0x05	; 5
    594e:	98 9f       	mul	r25, r24
    5950:	c0 01       	movw	r24, r0
    5952:	11 24       	eor	r1, r1
    5954:	88 0f       	add	r24, r24
    5956:	99 1f       	adc	r25, r25
    5958:	88 0f       	add	r24, r24
    595a:	99 1f       	adc	r25, r25
    595c:	90 95       	com	r25
    595e:	81 95       	neg	r24
    5960:	9f 4f       	sbci	r25, 0xFF	; 255
    5962:	90 93 d0 02 	sts	0x02D0, r25
    5966:	80 93 cf 02 	sts	0x02CF, r24
    596a:	5a ce       	rjmp	.-844    	; 0x5620 <handleCalibration+0xc0>
            break;

		case 5:
        	calibVelIndex++;
            if(calibVelIndex == 10) {
            	calibVelIndex = 1;
    596c:	91 e0       	ldi	r25, 0x01	; 1
    596e:	90 93 7b 07 	sts	0x077B, r25
                if(calibWheel == LEFT_WHEEL_FW_SC) {
    5972:	80 91 c9 04 	lds	r24, 0x04C9
    5976:	88 23       	and	r24, r24
    5978:	b9 f4       	brne	.+46     	; 0x59a8 <handleCalibration+0x448>
                	calibWheel = LEFT_WHEEL_BW_SC;
    597a:	82 e0       	ldi	r24, 0x02	; 2
    597c:	80 93 c9 04 	sts	0x04C9, r24
    5980:	6a ce       	rjmp	.-812    	; 0x5656 <handleCalibration+0xf6>
    	case 0: // set speed
        	if(calibWheel == LEFT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = 0;
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = (INDEX_STEP*calibVelIndex)<<2;
    5982:	90 91 7b 07 	lds	r25, 0x077B
    5986:	85 e0       	ldi	r24, 0x05	; 5
    5988:	98 9f       	mul	r25, r24
    598a:	c0 01       	movw	r24, r0
    598c:	11 24       	eor	r1, r1
    598e:	88 0f       	add	r24, r24
    5990:	99 1f       	adc	r25, r25
    5992:	88 0f       	add	r24, r24
    5994:	99 1f       	adc	r25, r25
    5996:	90 93 ce 02 	sts	0x02CE, r25
    599a:	80 93 cd 02 	sts	0x02CD, r24
				pwm_intermediate_left_desired = 0;
    599e:	10 92 d0 02 	sts	0x02D0, r1
    59a2:	10 92 cf 02 	sts	0x02CF, r1
    59a6:	3c ce       	rjmp	.-904    	; 0x5620 <handleCalibration+0xc0>
        	calibVelIndex++;
            if(calibVelIndex == 10) {
            	calibVelIndex = 1;
                if(calibWheel == LEFT_WHEEL_FW_SC) {
                	calibWheel = LEFT_WHEEL_BW_SC;
				} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    59a8:	81 30       	cpi	r24, 0x01	; 1
    59aa:	61 f0       	breq	.+24     	; 0x59c4 <handleCalibration+0x464>
                	calibWheel = RIGHT_WHEEL_BW_SC;
				} else if(calibWheel == LEFT_WHEEL_BW_SC) {
    59ac:	82 30       	cpi	r24, 0x02	; 2
    59ae:	71 f0       	breq	.+28     	; 0x59cc <handleCalibration+0x46c>
                	calibWheel = RIGHT_WHEEL_FW_SC;
					calibrateOdomFlag = 0;
					// red on
				} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    59b0:	83 30       	cpi	r24, 0x03	; 3
    59b2:	09 f0       	breq	.+2      	; 0x59b6 <handleCalibration+0x456>
    59b4:	50 ce       	rjmp	.-864    	; 0x5656 <handleCalibration+0xf6>
                	calibWheel = LEFT_WHEEL_FW_SC;					
    59b6:	10 92 c9 04 	sts	0x04C9, r1
					// red off
					writeCalibrationToFlash();
    59ba:	0e 94 b3 45 	call	0x8b66	; 0x8b66 <writeCalibrationToFlash>
					calibrateOdomFlag = 0;
    59be:	10 92 e0 04 	sts	0x04E0, r1
    59c2:	49 ce       	rjmp	.-878    	; 0x5656 <handleCalibration+0xf6>
            if(calibVelIndex == 10) {
            	calibVelIndex = 1;
                if(calibWheel == LEFT_WHEEL_FW_SC) {
                	calibWheel = LEFT_WHEEL_BW_SC;
				} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
                	calibWheel = RIGHT_WHEEL_BW_SC;
    59c4:	83 e0       	ldi	r24, 0x03	; 3
    59c6:	80 93 c9 04 	sts	0x04C9, r24
    59ca:	45 ce       	rjmp	.-886    	; 0x5656 <handleCalibration+0xf6>
				} else if(calibWheel == LEFT_WHEEL_BW_SC) {
                	calibWheel = RIGHT_WHEEL_FW_SC;
    59cc:	90 93 c9 04 	sts	0x04C9, r25
					calibrateOdomFlag = 0;
    59d0:	10 92 e0 04 	sts	0x04E0, r1
    59d4:	40 ce       	rjmp	.-896    	; 0x5656 <handleCalibration+0xf6>

000059d6 <getInputFromSpeed>:

}

// extract data to pass to speed controller given a desired speed in mm/s
// mode => return a measured speed 0..1023
signed int getInputFromSpeed(signed int s, unsigned char mode) {
    59d6:	af 92       	push	r10
    59d8:	bf 92       	push	r11
    59da:	cf 92       	push	r12
    59dc:	df 92       	push	r13
    59de:	ef 92       	push	r14
    59e0:	ff 92       	push	r15
    59e2:	0f 93       	push	r16
    59e4:	1f 93       	push	r17
    59e6:	cf 93       	push	r28
    59e8:	df 93       	push	r29
    
    int i = 0;
    signed int currVel = s*BYTE_TO_MM_S;
    59ea:	9c 01       	movw	r18, r24
    59ec:	22 0f       	add	r18, r18
    59ee:	33 1f       	adc	r19, r19
    59f0:	22 0f       	add	r18, r18
    59f2:	33 1f       	adc	r19, r19
    59f4:	28 0f       	add	r18, r24
    59f6:	39 1f       	adc	r19, r25
    signed int temp = 0;

    if(currVel == 0) {
    59f8:	21 15       	cp	r18, r1
    59fa:	31 05       	cpc	r19, r1
    59fc:	09 f4       	brne	.+2      	; 0x5a00 <getInputFromSpeed+0x2a>
    59fe:	7b c0       	rjmp	.+246    	; 0x5af6 <getInputFromSpeed+0x120>
        return 0;
    }

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
    5a00:	86 2f       	mov	r24, r22
    5a02:	82 50       	subi	r24, 0x02	; 2
    5a04:	82 30       	cpi	r24, 0x02	; 2
    5a06:	08 f4       	brcc	.+2      	; 0x5a0a <getInputFromSpeed+0x34>
    5a08:	84 c0       	rjmp	.+264    	; 0x5b12 <getInputFromSpeed+0x13c>
        currVel = -currVel; // consider only positive values
    5a0a:	66 23       	and	r22, r22
    5a0c:	09 f0       	breq	.+2      	; 0x5a10 <getInputFromSpeed+0x3a>
    5a0e:	84 c0       	rjmp	.+264    	; 0x5b18 <getInputFromSpeed+0x142>
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
    5a10:	80 91 a0 07 	lds	r24, 0x07A0
    5a14:	90 91 a1 07 	lds	r25, 0x07A1
    5a18:	82 17       	cp	r24, r18
    5a1a:	93 07       	cpc	r25, r19
    5a1c:	0c f0       	brlt	.+2      	; 0x5a20 <getInputFromSpeed+0x4a>
    5a1e:	1b c2       	rjmp	.+1078   	; 0x5e56 <getInputFromSpeed+0x480>
    5a20:	80 91 b0 07 	lds	r24, 0x07B0
    5a24:	90 91 b1 07 	lds	r25, 0x07B1
    5a28:	82 17       	cp	r24, r18
    5a2a:	93 07       	cpc	r25, r19
    5a2c:	0c f0       	brlt	.+2      	; 0x5a30 <getInputFromSpeed+0x5a>
    5a2e:	1c c2       	rjmp	.+1080   	; 0x5e68 <getInputFromSpeed+0x492>
    5a30:	80 91 c0 07 	lds	r24, 0x07C0
    5a34:	90 91 c1 07 	lds	r25, 0x07C1
    5a38:	82 17       	cp	r24, r18
    5a3a:	93 07       	cpc	r25, r19
    5a3c:	0c f0       	brlt	.+2      	; 0x5a40 <getInputFromSpeed+0x6a>
    5a3e:	17 c2       	rjmp	.+1070   	; 0x5e6e <getInputFromSpeed+0x498>
    5a40:	80 91 d0 07 	lds	r24, 0x07D0
    5a44:	90 91 d1 07 	lds	r25, 0x07D1
    5a48:	82 17       	cp	r24, r18
    5a4a:	93 07       	cpc	r25, r19
    5a4c:	0c f0       	brlt	.+2      	; 0x5a50 <getInputFromSpeed+0x7a>
    5a4e:	12 c2       	rjmp	.+1060   	; 0x5e74 <getInputFromSpeed+0x49e>
    5a50:	80 91 e0 07 	lds	r24, 0x07E0
    5a54:	90 91 e1 07 	lds	r25, 0x07E1
    5a58:	82 17       	cp	r24, r18
    5a5a:	93 07       	cpc	r25, r19
    5a5c:	0c f0       	brlt	.+2      	; 0x5a60 <getInputFromSpeed+0x8a>
    5a5e:	fe c1       	rjmp	.+1020   	; 0x5e5c <getInputFromSpeed+0x486>
    5a60:	80 91 f0 07 	lds	r24, 0x07F0
    5a64:	90 91 f1 07 	lds	r25, 0x07F1
    5a68:	82 17       	cp	r24, r18
    5a6a:	93 07       	cpc	r25, r19
    5a6c:	0c f0       	brlt	.+2      	; 0x5a70 <getInputFromSpeed+0x9a>
    5a6e:	f9 c1       	rjmp	.+1010   	; 0x5e62 <getInputFromSpeed+0x48c>
    5a70:	80 91 00 08 	lds	r24, 0x0800
    5a74:	90 91 01 08 	lds	r25, 0x0801
    5a78:	82 17       	cp	r24, r18
    5a7a:	93 07       	cpc	r25, r19
    5a7c:	0c f0       	brlt	.+2      	; 0x5a80 <getInputFromSpeed+0xaa>
    5a7e:	02 c2       	rjmp	.+1028   	; 0x5e84 <getInputFromSpeed+0x4ae>
    5a80:	80 91 10 08 	lds	r24, 0x0810
    5a84:	90 91 11 08 	lds	r25, 0x0811
    5a88:	82 17       	cp	r24, r18
    5a8a:	93 07       	cpc	r25, r19
    5a8c:	0c f0       	brlt	.+2      	; 0x5a90 <getInputFromSpeed+0xba>
    5a8e:	fd c1       	rjmp	.+1018   	; 0x5e8a <getInputFromSpeed+0x4b4>
    5a90:	c0 91 20 08 	lds	r28, 0x0820
    5a94:	d0 91 21 08 	lds	r29, 0x0821
    5a98:	c2 17       	cp	r28, r18
    5a9a:	d3 07       	cpc	r29, r19
    5a9c:	0c f0       	brlt	.+2      	; 0x5aa0 <getInputFromSpeed+0xca>
    5a9e:	7a c1       	rjmp	.+756    	; 0x5d94 <getInputFromSpeed+0x3be>
            temp = currVel*calibration[0][6]/calibration[0][7];
            temp = -temp;
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
    5aa0:	b9 01       	movw	r22, r18
    5aa2:	88 27       	eor	r24, r24
    5aa4:	77 fd       	sbrc	r23, 7
    5aa6:	80 95       	com	r24
    5aa8:	98 2f       	mov	r25, r24
    5aaa:	0e 94 34 47 	call	0x8e68	; 0x8e68 <__floatsisf>
    5aae:	7b 01       	movw	r14, r22
    5ab0:	8c 01       	movw	r16, r24
    5ab2:	60 91 1e 08 	lds	r22, 0x081E
    5ab6:	70 91 1f 08 	lds	r23, 0x081F
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
    5aba:	88 27       	eor	r24, r24
    5abc:	77 fd       	sbrc	r23, 7
    5abe:	80 95       	com	r24
    5ac0:	98 2f       	mov	r25, r24
    5ac2:	0e 94 34 47 	call	0x8e68	; 0x8e68 <__floatsisf>
    5ac6:	9b 01       	movw	r18, r22
    5ac8:	ac 01       	movw	r20, r24
    5aca:	c8 01       	movw	r24, r16
    5acc:	b7 01       	movw	r22, r14
    5ace:	0e 94 49 48 	call	0x9092	; 0x9092 <__mulsf3>
    5ad2:	7b 01       	movw	r14, r22
    5ad4:	8c 01       	movw	r16, r24
    5ad6:	be 01       	movw	r22, r28
    5ad8:	88 27       	eor	r24, r24
    5ada:	77 fd       	sbrc	r23, 7
    5adc:	80 95       	com	r24
    5ade:	98 2f       	mov	r25, r24
    5ae0:	0e 94 34 47 	call	0x8e68	; 0x8e68 <__floatsisf>
    5ae4:	9b 01       	movw	r18, r22
    5ae6:	ac 01       	movw	r20, r24
    5ae8:	c8 01       	movw	r24, r16
    5aea:	b7 01       	movw	r22, r14
    5aec:	0e 94 99 46 	call	0x8d32	; 0x8d32 <__divsf3>
    5af0:	0e 94 01 47 	call	0x8e02	; 0x8e02 <__fixsfsi>
    5af4:	02 c0       	rjmp	.+4      	; 0x5afa <getInputFromSpeed+0x124>
// mode => return a measured speed 0..1023
signed int getInputFromSpeed(signed int s, unsigned char mode) {
    
    int i = 0;
    signed int currVel = s*BYTE_TO_MM_S;
    signed int temp = 0;
    5af6:	60 e0       	ldi	r22, 0x00	; 0
    5af8:	70 e0       	ldi	r23, 0x00	; 0
            temp = -temp;
        }        
    }
    
    return temp;
}
    5afa:	cb 01       	movw	r24, r22
    5afc:	df 91       	pop	r29
    5afe:	cf 91       	pop	r28
    5b00:	1f 91       	pop	r17
    5b02:	0f 91       	pop	r16
    5b04:	ff 90       	pop	r15
    5b06:	ef 90       	pop	r14
    5b08:	df 90       	pop	r13
    5b0a:	cf 90       	pop	r12
    5b0c:	bf 90       	pop	r11
    5b0e:	af 90       	pop	r10
    5b10:	08 95       	ret
    if(currVel == 0) {
        return 0;
    }

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
        currVel = -currVel; // consider only positive values
    5b12:	30 95       	com	r19
    5b14:	21 95       	neg	r18
    5b16:	3f 4f       	sbci	r19, 0xFF	; 255
    5b18:	63 30       	cpi	r22, 0x03	; 3
    5b1a:	09 f4       	brne	.+2      	; 0x5b1e <getInputFromSpeed+0x148>
    5b1c:	f3 c0       	rjmp	.+486    	; 0x5d04 <getInputFromSpeed+0x32e>
    5b1e:	62 30       	cpi	r22, 0x02	; 2
    5b20:	01 f1       	breq	.+64     	; 0x5b62 <getInputFromSpeed+0x18c>
    5b22:	61 30       	cpi	r22, 0x01	; 1
    5b24:	09 f4       	brne	.+2      	; 0x5b28 <getInputFromSpeed+0x152>
    5b26:	98 c0       	rjmp	.+304    	; 0x5c58 <getInputFromSpeed+0x282>
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][6]/calibration[0][7];
            temp = -temp;
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
    5b28:	66 23       	and	r22, r22
    5b2a:	09 f4       	brne	.+2      	; 0x5b2e <getInputFromSpeed+0x158>
    5b2c:	90 c0       	rjmp	.+288    	; 0x5c4e <getInputFromSpeed+0x278>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
    5b2e:	61 30       	cpi	r22, 0x01	; 1
    5b30:	09 f4       	brne	.+2      	; 0x5b34 <getInputFromSpeed+0x15e>
    5b32:	8c c1       	rjmp	.+792    	; 0x5e4c <getInputFromSpeed+0x476>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
        } else if(mode==LEFT_WHEEL_BW_SC) {
    5b34:	62 30       	cpi	r22, 0x02	; 2
    5b36:	09 f4       	brne	.+2      	; 0x5b3a <getInputFromSpeed+0x164>
    5b38:	a0 c1       	rjmp	.+832    	; 0x5e7a <getInputFromSpeed+0x4a4>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][4]/(float)calibration[CALIBRATION_SAMPLES-1][5]);
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
    5b3a:	63 30       	cpi	r22, 0x03	; 3
    5b3c:	e1 f6       	brne	.-72     	; 0x5af6 <getInputFromSpeed+0x120>
    5b3e:	c0 91 2c 08 	lds	r28, 0x082C
    5b42:	d0 91 2d 08 	lds	r29, 0x082D
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][6]/(float)calibration[CALIBRATION_SAMPLES-1][7]);
    5b46:	b9 01       	movw	r22, r18
    5b48:	88 27       	eor	r24, r24
    5b4a:	77 fd       	sbrc	r23, 7
    5b4c:	80 95       	com	r24
    5b4e:	98 2f       	mov	r25, r24
    5b50:	0e 94 34 47 	call	0x8e68	; 0x8e68 <__floatsisf>
    5b54:	7b 01       	movw	r14, r22
    5b56:	8c 01       	movw	r16, r24
    5b58:	60 91 2a 08 	lds	r22, 0x082A
    5b5c:	70 91 2b 08 	lds	r23, 0x082B
    5b60:	55 c0       	rjmp	.+170    	; 0x5c0c <getInputFromSpeed+0x236>
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            if(calibration[i][3] >= currVel) {
                break;
            }
        } else if(mode==LEFT_WHEEL_BW_SC) {
            if(calibration[i][5] >= currVel) {
    5b62:	80 91 a8 07 	lds	r24, 0x07A8
    5b66:	90 91 a9 07 	lds	r25, 0x07A9
    5b6a:	82 17       	cp	r24, r18
    5b6c:	93 07       	cpc	r25, r19
    5b6e:	0c f0       	brlt	.+2      	; 0x5b72 <getInputFromSpeed+0x19c>
    5b70:	72 c1       	rjmp	.+740    	; 0x5e56 <getInputFromSpeed+0x480>
    5b72:	80 91 b8 07 	lds	r24, 0x07B8
    5b76:	90 91 b9 07 	lds	r25, 0x07B9
    5b7a:	82 17       	cp	r24, r18
    5b7c:	93 07       	cpc	r25, r19
    5b7e:	0c f0       	brlt	.+2      	; 0x5b82 <getInputFromSpeed+0x1ac>
    5b80:	73 c1       	rjmp	.+742    	; 0x5e68 <getInputFromSpeed+0x492>
    5b82:	80 91 c8 07 	lds	r24, 0x07C8
    5b86:	90 91 c9 07 	lds	r25, 0x07C9
    5b8a:	82 17       	cp	r24, r18
    5b8c:	93 07       	cpc	r25, r19
    5b8e:	0c f0       	brlt	.+2      	; 0x5b92 <getInputFromSpeed+0x1bc>
    5b90:	6e c1       	rjmp	.+732    	; 0x5e6e <getInputFromSpeed+0x498>
    5b92:	80 91 d8 07 	lds	r24, 0x07D8
    5b96:	90 91 d9 07 	lds	r25, 0x07D9
    5b9a:	82 17       	cp	r24, r18
    5b9c:	93 07       	cpc	r25, r19
    5b9e:	0c f0       	brlt	.+2      	; 0x5ba2 <getInputFromSpeed+0x1cc>
    5ba0:	69 c1       	rjmp	.+722    	; 0x5e74 <getInputFromSpeed+0x49e>
    5ba2:	80 91 e8 07 	lds	r24, 0x07E8
    5ba6:	90 91 e9 07 	lds	r25, 0x07E9
    5baa:	82 17       	cp	r24, r18
    5bac:	93 07       	cpc	r25, r19
    5bae:	0c f0       	brlt	.+2      	; 0x5bb2 <getInputFromSpeed+0x1dc>
    5bb0:	55 c1       	rjmp	.+682    	; 0x5e5c <getInputFromSpeed+0x486>
    5bb2:	80 91 f8 07 	lds	r24, 0x07F8
    5bb6:	90 91 f9 07 	lds	r25, 0x07F9
    5bba:	82 17       	cp	r24, r18
    5bbc:	93 07       	cpc	r25, r19
    5bbe:	0c f0       	brlt	.+2      	; 0x5bc2 <getInputFromSpeed+0x1ec>
    5bc0:	50 c1       	rjmp	.+672    	; 0x5e62 <getInputFromSpeed+0x48c>
    5bc2:	80 91 08 08 	lds	r24, 0x0808
    5bc6:	90 91 09 08 	lds	r25, 0x0809
    5bca:	82 17       	cp	r24, r18
    5bcc:	93 07       	cpc	r25, r19
    5bce:	0c f0       	brlt	.+2      	; 0x5bd2 <getInputFromSpeed+0x1fc>
    5bd0:	59 c1       	rjmp	.+690    	; 0x5e84 <getInputFromSpeed+0x4ae>
    5bd2:	80 91 18 08 	lds	r24, 0x0818
    5bd6:	90 91 19 08 	lds	r25, 0x0819
    5bda:	82 17       	cp	r24, r18
    5bdc:	93 07       	cpc	r25, r19
    5bde:	0c f0       	brlt	.+2      	; 0x5be2 <getInputFromSpeed+0x20c>
    5be0:	54 c1       	rjmp	.+680    	; 0x5e8a <getInputFromSpeed+0x4b4>
    5be2:	c0 91 28 08 	lds	r28, 0x0828
    5be6:	d0 91 29 08 	lds	r29, 0x0829
    5bea:	c2 17       	cp	r28, r18
    5bec:	d3 07       	cpc	r29, r19
    5bee:	0c f0       	brlt	.+2      	; 0x5bf2 <getInputFromSpeed+0x21c>
    5bf0:	d1 c0       	rjmp	.+418    	; 0x5d94 <getInputFromSpeed+0x3be>
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][4]/(float)calibration[CALIBRATION_SAMPLES-1][5]);
    5bf2:	b9 01       	movw	r22, r18
    5bf4:	88 27       	eor	r24, r24
    5bf6:	77 fd       	sbrc	r23, 7
    5bf8:	80 95       	com	r24
    5bfa:	98 2f       	mov	r25, r24
    5bfc:	0e 94 34 47 	call	0x8e68	; 0x8e68 <__floatsisf>
    5c00:	7b 01       	movw	r14, r22
    5c02:	8c 01       	movw	r16, r24
    5c04:	60 91 26 08 	lds	r22, 0x0826
    5c08:	70 91 27 08 	lds	r23, 0x0827
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][6]/(float)calibration[CALIBRATION_SAMPLES-1][7]);
    5c0c:	88 27       	eor	r24, r24
    5c0e:	77 fd       	sbrc	r23, 7
    5c10:	80 95       	com	r24
    5c12:	98 2f       	mov	r25, r24
    5c14:	0e 94 34 47 	call	0x8e68	; 0x8e68 <__floatsisf>
    5c18:	9b 01       	movw	r18, r22
    5c1a:	ac 01       	movw	r20, r24
    5c1c:	c8 01       	movw	r24, r16
    5c1e:	b7 01       	movw	r22, r14
    5c20:	0e 94 49 48 	call	0x9092	; 0x9092 <__mulsf3>
    5c24:	7b 01       	movw	r14, r22
    5c26:	8c 01       	movw	r16, r24
    5c28:	be 01       	movw	r22, r28
    5c2a:	88 27       	eor	r24, r24
    5c2c:	77 fd       	sbrc	r23, 7
    5c2e:	80 95       	com	r24
    5c30:	98 2f       	mov	r25, r24
    5c32:	0e 94 34 47 	call	0x8e68	; 0x8e68 <__floatsisf>
    5c36:	9b 01       	movw	r18, r22
    5c38:	ac 01       	movw	r20, r24
    5c3a:	c8 01       	movw	r24, r16
    5c3c:	b7 01       	movw	r22, r14
    5c3e:	0e 94 99 46 	call	0x8d32	; 0x8d32 <__divsf3>
    5c42:	0e 94 01 47 	call	0x8e02	; 0x8e02 <__fixsfsi>
            temp = -temp;
    5c46:	70 95       	com	r23
    5c48:	61 95       	neg	r22
    5c4a:	7f 4f       	sbci	r23, 0xFF	; 255
    5c4c:	56 cf       	rjmp	.-340    	; 0x5afa <getInputFromSpeed+0x124>
    5c4e:	c0 91 20 08 	lds	r28, 0x0820
    5c52:	d0 91 21 08 	lds	r29, 0x0821
    5c56:	24 cf       	rjmp	.-440    	; 0x5aa0 <getInputFromSpeed+0xca>
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
                break;
            }
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            if(calibration[i][3] >= currVel) {
    5c58:	80 91 a4 07 	lds	r24, 0x07A4
    5c5c:	90 91 a5 07 	lds	r25, 0x07A5
    5c60:	82 17       	cp	r24, r18
    5c62:	93 07       	cpc	r25, r19
    5c64:	0c f0       	brlt	.+2      	; 0x5c68 <getInputFromSpeed+0x292>
    5c66:	f7 c0       	rjmp	.+494    	; 0x5e56 <getInputFromSpeed+0x480>
    5c68:	80 91 b4 07 	lds	r24, 0x07B4
    5c6c:	90 91 b5 07 	lds	r25, 0x07B5
    5c70:	82 17       	cp	r24, r18
    5c72:	93 07       	cpc	r25, r19
    5c74:	0c f0       	brlt	.+2      	; 0x5c78 <getInputFromSpeed+0x2a2>
    5c76:	f8 c0       	rjmp	.+496    	; 0x5e68 <getInputFromSpeed+0x492>
    5c78:	80 91 c4 07 	lds	r24, 0x07C4
    5c7c:	90 91 c5 07 	lds	r25, 0x07C5
    5c80:	82 17       	cp	r24, r18
    5c82:	93 07       	cpc	r25, r19
    5c84:	0c f0       	brlt	.+2      	; 0x5c88 <getInputFromSpeed+0x2b2>
    5c86:	f3 c0       	rjmp	.+486    	; 0x5e6e <getInputFromSpeed+0x498>
    5c88:	80 91 d4 07 	lds	r24, 0x07D4
    5c8c:	90 91 d5 07 	lds	r25, 0x07D5
    5c90:	82 17       	cp	r24, r18
    5c92:	93 07       	cpc	r25, r19
    5c94:	0c f0       	brlt	.+2      	; 0x5c98 <getInputFromSpeed+0x2c2>
    5c96:	ee c0       	rjmp	.+476    	; 0x5e74 <getInputFromSpeed+0x49e>
    5c98:	80 91 e4 07 	lds	r24, 0x07E4
    5c9c:	90 91 e5 07 	lds	r25, 0x07E5
    5ca0:	82 17       	cp	r24, r18
    5ca2:	93 07       	cpc	r25, r19
    5ca4:	0c f0       	brlt	.+2      	; 0x5ca8 <getInputFromSpeed+0x2d2>
    5ca6:	da c0       	rjmp	.+436    	; 0x5e5c <getInputFromSpeed+0x486>
    5ca8:	80 91 f4 07 	lds	r24, 0x07F4
    5cac:	90 91 f5 07 	lds	r25, 0x07F5
    5cb0:	82 17       	cp	r24, r18
    5cb2:	93 07       	cpc	r25, r19
    5cb4:	0c f0       	brlt	.+2      	; 0x5cb8 <getInputFromSpeed+0x2e2>
    5cb6:	d5 c0       	rjmp	.+426    	; 0x5e62 <getInputFromSpeed+0x48c>
    5cb8:	80 91 04 08 	lds	r24, 0x0804
    5cbc:	90 91 05 08 	lds	r25, 0x0805
    5cc0:	82 17       	cp	r24, r18
    5cc2:	93 07       	cpc	r25, r19
    5cc4:	0c f0       	brlt	.+2      	; 0x5cc8 <getInputFromSpeed+0x2f2>
    5cc6:	de c0       	rjmp	.+444    	; 0x5e84 <getInputFromSpeed+0x4ae>
    5cc8:	80 91 14 08 	lds	r24, 0x0814
    5ccc:	90 91 15 08 	lds	r25, 0x0815
    5cd0:	82 17       	cp	r24, r18
    5cd2:	93 07       	cpc	r25, r19
    5cd4:	0c f0       	brlt	.+2      	; 0x5cd8 <getInputFromSpeed+0x302>
    5cd6:	d9 c0       	rjmp	.+434    	; 0x5e8a <getInputFromSpeed+0x4b4>
    5cd8:	c0 91 24 08 	lds	r28, 0x0824
    5cdc:	d0 91 25 08 	lds	r29, 0x0825
    5ce0:	c2 17       	cp	r28, r18
    5ce2:	d3 07       	cpc	r29, r19
    5ce4:	0c f0       	brlt	.+2      	; 0x5ce8 <getInputFromSpeed+0x312>
    5ce6:	56 c0       	rjmp	.+172    	; 0x5d94 <getInputFromSpeed+0x3be>
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
    5ce8:	b9 01       	movw	r22, r18
    5cea:	88 27       	eor	r24, r24
    5cec:	77 fd       	sbrc	r23, 7
    5cee:	80 95       	com	r24
    5cf0:	98 2f       	mov	r25, r24
    5cf2:	0e 94 34 47 	call	0x8e68	; 0x8e68 <__floatsisf>
    5cf6:	7b 01       	movw	r14, r22
    5cf8:	8c 01       	movw	r16, r24
    5cfa:	60 91 22 08 	lds	r22, 0x0822
    5cfe:	70 91 23 08 	lds	r23, 0x0823
    5d02:	db ce       	rjmp	.-586    	; 0x5aba <getInputFromSpeed+0xe4>
        } else if(mode==LEFT_WHEEL_BW_SC) {
            if(calibration[i][5] >= currVel) {
                break;
            }
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            if(calibration[i][7] >= currVel) {
    5d04:	80 91 ac 07 	lds	r24, 0x07AC
    5d08:	90 91 ad 07 	lds	r25, 0x07AD
    5d0c:	82 17       	cp	r24, r18
    5d0e:	93 07       	cpc	r25, r19
    5d10:	0c f0       	brlt	.+2      	; 0x5d14 <getInputFromSpeed+0x33e>
    5d12:	a1 c0       	rjmp	.+322    	; 0x5e56 <getInputFromSpeed+0x480>
    5d14:	80 91 bc 07 	lds	r24, 0x07BC
    5d18:	90 91 bd 07 	lds	r25, 0x07BD
    5d1c:	82 17       	cp	r24, r18
    5d1e:	93 07       	cpc	r25, r19
    5d20:	0c f0       	brlt	.+2      	; 0x5d24 <getInputFromSpeed+0x34e>
    5d22:	a2 c0       	rjmp	.+324    	; 0x5e68 <getInputFromSpeed+0x492>
    5d24:	80 91 cc 07 	lds	r24, 0x07CC
    5d28:	90 91 cd 07 	lds	r25, 0x07CD
    5d2c:	82 17       	cp	r24, r18
    5d2e:	93 07       	cpc	r25, r19
    5d30:	0c f0       	brlt	.+2      	; 0x5d34 <getInputFromSpeed+0x35e>
    5d32:	9d c0       	rjmp	.+314    	; 0x5e6e <getInputFromSpeed+0x498>
    5d34:	80 91 dc 07 	lds	r24, 0x07DC
    5d38:	90 91 dd 07 	lds	r25, 0x07DD
    5d3c:	82 17       	cp	r24, r18
    5d3e:	93 07       	cpc	r25, r19
    5d40:	0c f0       	brlt	.+2      	; 0x5d44 <getInputFromSpeed+0x36e>
    5d42:	98 c0       	rjmp	.+304    	; 0x5e74 <getInputFromSpeed+0x49e>
    5d44:	80 91 ec 07 	lds	r24, 0x07EC
    5d48:	90 91 ed 07 	lds	r25, 0x07ED
    5d4c:	82 17       	cp	r24, r18
    5d4e:	93 07       	cpc	r25, r19
    5d50:	0c f0       	brlt	.+2      	; 0x5d54 <getInputFromSpeed+0x37e>
    5d52:	84 c0       	rjmp	.+264    	; 0x5e5c <getInputFromSpeed+0x486>
    5d54:	80 91 fc 07 	lds	r24, 0x07FC
    5d58:	90 91 fd 07 	lds	r25, 0x07FD
    5d5c:	82 17       	cp	r24, r18
    5d5e:	93 07       	cpc	r25, r19
    5d60:	0c f0       	brlt	.+2      	; 0x5d64 <getInputFromSpeed+0x38e>
    5d62:	7f c0       	rjmp	.+254    	; 0x5e62 <getInputFromSpeed+0x48c>
    5d64:	80 91 0c 08 	lds	r24, 0x080C
    5d68:	90 91 0d 08 	lds	r25, 0x080D
    5d6c:	82 17       	cp	r24, r18
    5d6e:	93 07       	cpc	r25, r19
    5d70:	0c f0       	brlt	.+2      	; 0x5d74 <getInputFromSpeed+0x39e>
    5d72:	88 c0       	rjmp	.+272    	; 0x5e84 <getInputFromSpeed+0x4ae>
    5d74:	80 91 1c 08 	lds	r24, 0x081C
    5d78:	90 91 1d 08 	lds	r25, 0x081D
    5d7c:	82 17       	cp	r24, r18
    5d7e:	93 07       	cpc	r25, r19
    5d80:	0c f0       	brlt	.+2      	; 0x5d84 <getInputFromSpeed+0x3ae>
    5d82:	83 c0       	rjmp	.+262    	; 0x5e8a <getInputFromSpeed+0x4b4>
    5d84:	c0 91 2c 08 	lds	r28, 0x082C
    5d88:	d0 91 2d 08 	lds	r29, 0x082D
    5d8c:	c2 17       	cp	r28, r18
    5d8e:	d3 07       	cpc	r29, r19
    5d90:	0c f4       	brge	.+2      	; 0x5d94 <getInputFromSpeed+0x3be>
    5d92:	d9 ce       	rjmp	.-590    	; 0x5b46 <getInputFromSpeed+0x170>
        currVel = -currVel; // consider only positive values
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
    5d94:	c8 e0       	ldi	r28, 0x08	; 8
    5d96:	d0 e0       	ldi	r29, 0x00	; 0
                break;
            }
        } 
    }

    if(i==0) {  // the velocity is lower than first saved in the matrix
    5d98:	20 97       	sbiw	r28, 0x00	; 0
    5d9a:	09 f0       	breq	.+2      	; 0x5d9e <getInputFromSpeed+0x3c8>
    5d9c:	79 c0       	rjmp	.+242    	; 0x5e90 <getInputFromSpeed+0x4ba>
        if(mode==LEFT_WHEEL_FW_SC) {
    5d9e:	66 23       	and	r22, r22
    5da0:	91 f4       	brne	.+36     	; 0x5dc6 <getInputFromSpeed+0x3f0>
            temp = (currVel*calibration[0][0])/calibration[0][1];
    5da2:	40 91 9e 07 	lds	r20, 0x079E
    5da6:	50 91 9f 07 	lds	r21, 0x079F
    5daa:	24 9f       	mul	r18, r20
    5dac:	c0 01       	movw	r24, r0
    5dae:	25 9f       	mul	r18, r21
    5db0:	90 0d       	add	r25, r0
    5db2:	34 9f       	mul	r19, r20
    5db4:	90 0d       	add	r25, r0
    5db6:	11 24       	eor	r1, r1
    5db8:	60 91 a0 07 	lds	r22, 0x07A0
    5dbc:	70 91 a1 07 	lds	r23, 0x07A1
    5dc0:	0e 94 07 49 	call	0x920e	; 0x920e <__divmodhi4>
    5dc4:	9a ce       	rjmp	.-716    	; 0x5afa <getInputFromSpeed+0x124>
        } else if(mode==RIGHT_WHEEL_FW_SC) {
    5dc6:	61 30       	cpi	r22, 0x01	; 1
    5dc8:	d1 f0       	breq	.+52     	; 0x5dfe <getInputFromSpeed+0x428>
            temp = (currVel*calibration[0][2])/calibration[0][3];
        } else if(mode==LEFT_WHEEL_BW_SC) {
    5dca:	62 30       	cpi	r22, 0x02	; 2
    5dcc:	51 f1       	breq	.+84     	; 0x5e22 <getInputFromSpeed+0x44c>
            temp = currVel*calibration[0][4]/calibration[0][5];
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
    5dce:	63 30       	cpi	r22, 0x03	; 3
    5dd0:	09 f0       	breq	.+2      	; 0x5dd4 <getInputFromSpeed+0x3fe>
    5dd2:	91 ce       	rjmp	.-734    	; 0x5af6 <getInputFromSpeed+0x120>
            temp = currVel*calibration[0][6]/calibration[0][7];
    5dd4:	40 91 aa 07 	lds	r20, 0x07AA
    5dd8:	50 91 ab 07 	lds	r21, 0x07AB
    5ddc:	24 9f       	mul	r18, r20
    5dde:	c0 01       	movw	r24, r0
    5de0:	25 9f       	mul	r18, r21
    5de2:	90 0d       	add	r25, r0
    5de4:	34 9f       	mul	r19, r20
    5de6:	90 0d       	add	r25, r0
    5de8:	11 24       	eor	r1, r1
    5dea:	60 91 ac 07 	lds	r22, 0x07AC
    5dee:	70 91 ad 07 	lds	r23, 0x07AD
    5df2:	0e 94 07 49 	call	0x920e	; 0x920e <__divmodhi4>
            temp = -temp;
    5df6:	70 95       	com	r23
    5df8:	61 95       	neg	r22
    5dfa:	7f 4f       	sbci	r23, 0xFF	; 255
    5dfc:	7e ce       	rjmp	.-772    	; 0x5afa <getInputFromSpeed+0x124>

    if(i==0) {  // the velocity is lower than first saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][0])/calibration[0][1];
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][2])/calibration[0][3];
    5dfe:	40 91 a2 07 	lds	r20, 0x07A2
    5e02:	50 91 a3 07 	lds	r21, 0x07A3
    5e06:	24 9f       	mul	r18, r20
    5e08:	c0 01       	movw	r24, r0
    5e0a:	25 9f       	mul	r18, r21
    5e0c:	90 0d       	add	r25, r0
    5e0e:	34 9f       	mul	r19, r20
    5e10:	90 0d       	add	r25, r0
    5e12:	11 24       	eor	r1, r1
    5e14:	60 91 a4 07 	lds	r22, 0x07A4
    5e18:	70 91 a5 07 	lds	r23, 0x07A5
    5e1c:	0e 94 07 49 	call	0x920e	; 0x920e <__divmodhi4>
    5e20:	6c ce       	rjmp	.-808    	; 0x5afa <getInputFromSpeed+0x124>
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][4]/calibration[0][5];
    5e22:	40 91 a6 07 	lds	r20, 0x07A6
    5e26:	50 91 a7 07 	lds	r21, 0x07A7
    5e2a:	24 9f       	mul	r18, r20
    5e2c:	c0 01       	movw	r24, r0
    5e2e:	25 9f       	mul	r18, r21
    5e30:	90 0d       	add	r25, r0
    5e32:	34 9f       	mul	r19, r20
    5e34:	90 0d       	add	r25, r0
    5e36:	11 24       	eor	r1, r1
    5e38:	60 91 a8 07 	lds	r22, 0x07A8
    5e3c:	70 91 a9 07 	lds	r23, 0x07A9
    5e40:	0e 94 07 49 	call	0x920e	; 0x920e <__divmodhi4>
            temp = -temp;
    5e44:	70 95       	com	r23
    5e46:	61 95       	neg	r22
    5e48:	7f 4f       	sbci	r23, 0xFF	; 255
    5e4a:	57 ce       	rjmp	.-850    	; 0x5afa <getInputFromSpeed+0x124>
    5e4c:	c0 91 24 08 	lds	r28, 0x0824
    5e50:	d0 91 25 08 	lds	r29, 0x0825
    5e54:	49 cf       	rjmp	.-366    	; 0x5ce8 <getInputFromSpeed+0x312>

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
        currVel = -currVel; // consider only positive values
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    5e56:	c0 e0       	ldi	r28, 0x00	; 0
    5e58:	d0 e0       	ldi	r29, 0x00	; 0
    5e5a:	9e cf       	rjmp	.-196    	; 0x5d98 <getInputFromSpeed+0x3c2>
    5e5c:	c4 e0       	ldi	r28, 0x04	; 4
    5e5e:	d0 e0       	ldi	r29, 0x00	; 0
    5e60:	9b cf       	rjmp	.-202    	; 0x5d98 <getInputFromSpeed+0x3c2>
    5e62:	c5 e0       	ldi	r28, 0x05	; 5
    5e64:	d0 e0       	ldi	r29, 0x00	; 0
    5e66:	98 cf       	rjmp	.-208    	; 0x5d98 <getInputFromSpeed+0x3c2>
    5e68:	c1 e0       	ldi	r28, 0x01	; 1
    5e6a:	d0 e0       	ldi	r29, 0x00	; 0
    5e6c:	95 cf       	rjmp	.-214    	; 0x5d98 <getInputFromSpeed+0x3c2>
    5e6e:	c2 e0       	ldi	r28, 0x02	; 2
    5e70:	d0 e0       	ldi	r29, 0x00	; 0
    5e72:	92 cf       	rjmp	.-220    	; 0x5d98 <getInputFromSpeed+0x3c2>
    5e74:	c3 e0       	ldi	r28, 0x03	; 3
    5e76:	d0 e0       	ldi	r29, 0x00	; 0
    5e78:	8f cf       	rjmp	.-226    	; 0x5d98 <getInputFromSpeed+0x3c2>
    5e7a:	c0 91 28 08 	lds	r28, 0x0828
    5e7e:	d0 91 29 08 	lds	r29, 0x0829
    5e82:	b7 ce       	rjmp	.-658    	; 0x5bf2 <getInputFromSpeed+0x21c>
    5e84:	c6 e0       	ldi	r28, 0x06	; 6
    5e86:	d0 e0       	ldi	r29, 0x00	; 0
    5e88:	87 cf       	rjmp	.-242    	; 0x5d98 <getInputFromSpeed+0x3c2>
    5e8a:	c7 e0       	ldi	r28, 0x07	; 7
    5e8c:	d0 e0       	ldi	r29, 0x00	; 0
    5e8e:	84 cf       	rjmp	.-248    	; 0x5d98 <getInputFromSpeed+0x3c2>
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][6]/calibration[0][7];
            temp = -temp;
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    5e90:	c9 30       	cpi	r28, 0x09	; 9
    5e92:	d1 05       	cpc	r29, r1
    5e94:	09 f4       	brne	.+2      	; 0x5e98 <getInputFromSpeed+0x4c2>
    5e96:	48 ce       	rjmp	.-880    	; 0x5b28 <getInputFromSpeed+0x152>
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][6]/(float)calibration[CALIBRATION_SAMPLES-1][7]);
            temp = -temp;
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
    5e98:	66 23       	and	r22, r22
    5e9a:	09 f0       	breq	.+2      	; 0x5e9e <getInputFromSpeed+0x4c8>
    5e9c:	47 c0       	rjmp	.+142    	; 0x5f2c <getInputFromSpeed+0x556>
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
    5e9e:	fe 01       	movw	r30, r28
    5ea0:	e2 95       	swap	r30
    5ea2:	f2 95       	swap	r31
    5ea4:	f0 7f       	andi	r31, 0xF0	; 240
    5ea6:	fe 27       	eor	r31, r30
    5ea8:	e0 7f       	andi	r30, 0xF0	; 240
    5eaa:	fe 27       	eor	r31, r30
    5eac:	e2 57       	subi	r30, 0x72	; 114
    5eae:	f8 4f       	sbci	r31, 0xF8	; 248
    5eb0:	c2 80       	ldd	r12, Z+2	; 0x02
    5eb2:	d3 80       	ldd	r13, Z+3	; 0x03
    5eb4:	a0 80       	ld	r10, Z
    5eb6:	b1 80       	ldd	r11, Z+1	; 0x01
    5eb8:	2c 19       	sub	r18, r12
    5eba:	3d 09       	sbc	r19, r13
    5ebc:	b9 01       	movw	r22, r18
    5ebe:	88 27       	eor	r24, r24
    5ec0:	77 fd       	sbrc	r23, 7
    5ec2:	80 95       	com	r24
    5ec4:	98 2f       	mov	r25, r24
    5ec6:	0e 94 34 47 	call	0x8e68	; 0x8e68 <__floatsisf>
    5eca:	7b 01       	movw	r14, r22
    5ecc:	8c 01       	movw	r16, r24
    5ece:	c2 95       	swap	r28
    5ed0:	d2 95       	swap	r29
    5ed2:	d0 7f       	andi	r29, 0xF0	; 240
    5ed4:	dc 27       	eor	r29, r28
    5ed6:	c0 7f       	andi	r28, 0xF0	; 240
    5ed8:	dc 27       	eor	r29, r28
    5eda:	c2 56       	subi	r28, 0x62	; 98
    5edc:	d8 4f       	sbci	r29, 0xF8	; 248
    5ede:	68 81       	ld	r22, Y
    5ee0:	79 81       	ldd	r23, Y+1	; 0x01
    5ee2:	6a 19       	sub	r22, r10
    5ee4:	7b 09       	sbc	r23, r11
    5ee6:	88 27       	eor	r24, r24
    5ee8:	77 fd       	sbrc	r23, 7
    5eea:	80 95       	com	r24
    5eec:	98 2f       	mov	r25, r24
    5eee:	0e 94 34 47 	call	0x8e68	; 0x8e68 <__floatsisf>
    5ef2:	9b 01       	movw	r18, r22
    5ef4:	ac 01       	movw	r20, r24
    5ef6:	c8 01       	movw	r24, r16
    5ef8:	b7 01       	movw	r22, r14
    5efa:	0e 94 49 48 	call	0x9092	; 0x9092 <__mulsf3>
    5efe:	7b 01       	movw	r14, r22
    5f00:	8c 01       	movw	r16, r24
    5f02:	6a 81       	ldd	r22, Y+2	; 0x02
    5f04:	7b 81       	ldd	r23, Y+3	; 0x03
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
    5f06:	6c 19       	sub	r22, r12
    5f08:	7d 09       	sbc	r23, r13
    5f0a:	88 27       	eor	r24, r24
    5f0c:	77 fd       	sbrc	r23, 7
    5f0e:	80 95       	com	r24
    5f10:	98 2f       	mov	r25, r24
    5f12:	0e 94 34 47 	call	0x8e68	; 0x8e68 <__floatsisf>
    5f16:	9b 01       	movw	r18, r22
    5f18:	ac 01       	movw	r20, r24
    5f1a:	c8 01       	movw	r24, r16
    5f1c:	b7 01       	movw	r22, r14
    5f1e:	0e 94 99 46 	call	0x8d32	; 0x8d32 <__divsf3>
    5f22:	0e 94 01 47 	call	0x8e02	; 0x8e02 <__fixsfsi>
    5f26:	6a 0d       	add	r22, r10
    5f28:	7b 1d       	adc	r23, r11
    5f2a:	e7 cd       	rjmp	.-1074   	; 0x5afa <getInputFromSpeed+0x124>
            temp = -temp;
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
        } else if(mode==RIGHT_WHEEL_FW_SC) {
    5f2c:	61 30       	cpi	r22, 0x01	; 1
    5f2e:	09 f4       	brne	.+2      	; 0x5f32 <getInputFromSpeed+0x55c>
    5f30:	50 c0       	rjmp	.+160    	; 0x5fd2 <getInputFromSpeed+0x5fc>
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
        } else if(mode==LEFT_WHEEL_BW_SC) {
    5f32:	62 30       	cpi	r22, 0x02	; 2
    5f34:	09 f4       	brne	.+2      	; 0x5f38 <getInputFromSpeed+0x562>
    5f36:	82 c0       	rjmp	.+260    	; 0x603c <getInputFromSpeed+0x666>
            temp = calibration[i-1][4] + (signed int)(((float)(currVel-calibration[i-1][5])*(float)(calibration[i][4]-calibration[i-1][4]))/(float)(calibration[i][5]-calibration[i-1][5]));
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
    5f38:	63 30       	cpi	r22, 0x03	; 3
    5f3a:	09 f0       	breq	.+2      	; 0x5f3e <getInputFromSpeed+0x568>
    5f3c:	dc cd       	rjmp	.-1096   	; 0x5af6 <getInputFromSpeed+0x120>
            temp = calibration[i-1][6] + (signed int)(((float)(currVel-calibration[i-1][7])*(float)(calibration[i][6]-calibration[i-1][6]))/(float)(calibration[i][7]-calibration[i-1][7]));
    5f3e:	fe 01       	movw	r30, r28
    5f40:	e2 95       	swap	r30
    5f42:	f2 95       	swap	r31
    5f44:	f0 7f       	andi	r31, 0xF0	; 240
    5f46:	fe 27       	eor	r31, r30
    5f48:	e0 7f       	andi	r30, 0xF0	; 240
    5f4a:	fe 27       	eor	r31, r30
    5f4c:	e2 57       	subi	r30, 0x72	; 114
    5f4e:	f8 4f       	sbci	r31, 0xF8	; 248
    5f50:	c6 84       	ldd	r12, Z+14	; 0x0e
    5f52:	d7 84       	ldd	r13, Z+15	; 0x0f
    5f54:	a4 84       	ldd	r10, Z+12	; 0x0c
    5f56:	b5 84       	ldd	r11, Z+13	; 0x0d
    5f58:	2c 19       	sub	r18, r12
    5f5a:	3d 09       	sbc	r19, r13
    5f5c:	b9 01       	movw	r22, r18
    5f5e:	88 27       	eor	r24, r24
    5f60:	77 fd       	sbrc	r23, 7
    5f62:	80 95       	com	r24
    5f64:	98 2f       	mov	r25, r24
    5f66:	0e 94 34 47 	call	0x8e68	; 0x8e68 <__floatsisf>
    5f6a:	7b 01       	movw	r14, r22
    5f6c:	8c 01       	movw	r16, r24
    5f6e:	c2 95       	swap	r28
    5f70:	d2 95       	swap	r29
    5f72:	d0 7f       	andi	r29, 0xF0	; 240
    5f74:	dc 27       	eor	r29, r28
    5f76:	c0 7f       	andi	r28, 0xF0	; 240
    5f78:	dc 27       	eor	r29, r28
    5f7a:	c2 56       	subi	r28, 0x62	; 98
    5f7c:	d8 4f       	sbci	r29, 0xF8	; 248
    5f7e:	6c 85       	ldd	r22, Y+12	; 0x0c
    5f80:	7d 85       	ldd	r23, Y+13	; 0x0d
    5f82:	6a 19       	sub	r22, r10
    5f84:	7b 09       	sbc	r23, r11
    5f86:	88 27       	eor	r24, r24
    5f88:	77 fd       	sbrc	r23, 7
    5f8a:	80 95       	com	r24
    5f8c:	98 2f       	mov	r25, r24
    5f8e:	0e 94 34 47 	call	0x8e68	; 0x8e68 <__floatsisf>
    5f92:	9b 01       	movw	r18, r22
    5f94:	ac 01       	movw	r20, r24
    5f96:	c8 01       	movw	r24, r16
    5f98:	b7 01       	movw	r22, r14
    5f9a:	0e 94 49 48 	call	0x9092	; 0x9092 <__mulsf3>
    5f9e:	7b 01       	movw	r14, r22
    5fa0:	8c 01       	movw	r16, r24
    5fa2:	6e 85       	ldd	r22, Y+14	; 0x0e
    5fa4:	7f 85       	ldd	r23, Y+15	; 0x0f
    5fa6:	6c 19       	sub	r22, r12
    5fa8:	7d 09       	sbc	r23, r13
    5faa:	88 27       	eor	r24, r24
    5fac:	77 fd       	sbrc	r23, 7
    5fae:	80 95       	com	r24
    5fb0:	98 2f       	mov	r25, r24
    5fb2:	0e 94 34 47 	call	0x8e68	; 0x8e68 <__floatsisf>
    5fb6:	9b 01       	movw	r18, r22
    5fb8:	ac 01       	movw	r20, r24
    5fba:	c8 01       	movw	r24, r16
    5fbc:	b7 01       	movw	r22, r14
    5fbe:	0e 94 99 46 	call	0x8d32	; 0x8d32 <__divsf3>
    5fc2:	0e 94 01 47 	call	0x8e02	; 0x8e02 <__fixsfsi>
    5fc6:	6a 0d       	add	r22, r10
    5fc8:	7b 1d       	adc	r23, r11
            temp = -temp;
    5fca:	70 95       	com	r23
    5fcc:	61 95       	neg	r22
    5fce:	7f 4f       	sbci	r23, 0xFF	; 255
    5fd0:	94 cd       	rjmp	.-1240   	; 0x5afa <getInputFromSpeed+0x124>
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
    5fd2:	fe 01       	movw	r30, r28
    5fd4:	e2 95       	swap	r30
    5fd6:	f2 95       	swap	r31
    5fd8:	f0 7f       	andi	r31, 0xF0	; 240
    5fda:	fe 27       	eor	r31, r30
    5fdc:	e0 7f       	andi	r30, 0xF0	; 240
    5fde:	fe 27       	eor	r31, r30
    5fe0:	e2 57       	subi	r30, 0x72	; 114
    5fe2:	f8 4f       	sbci	r31, 0xF8	; 248
    5fe4:	c6 80       	ldd	r12, Z+6	; 0x06
    5fe6:	d7 80       	ldd	r13, Z+7	; 0x07
    5fe8:	a4 80       	ldd	r10, Z+4	; 0x04
    5fea:	b5 80       	ldd	r11, Z+5	; 0x05
    5fec:	2c 19       	sub	r18, r12
    5fee:	3d 09       	sbc	r19, r13
    5ff0:	b9 01       	movw	r22, r18
    5ff2:	88 27       	eor	r24, r24
    5ff4:	77 fd       	sbrc	r23, 7
    5ff6:	80 95       	com	r24
    5ff8:	98 2f       	mov	r25, r24
    5ffa:	0e 94 34 47 	call	0x8e68	; 0x8e68 <__floatsisf>
    5ffe:	7b 01       	movw	r14, r22
    6000:	8c 01       	movw	r16, r24
    6002:	c2 95       	swap	r28
    6004:	d2 95       	swap	r29
    6006:	d0 7f       	andi	r29, 0xF0	; 240
    6008:	dc 27       	eor	r29, r28
    600a:	c0 7f       	andi	r28, 0xF0	; 240
    600c:	dc 27       	eor	r29, r28
    600e:	c2 56       	subi	r28, 0x62	; 98
    6010:	d8 4f       	sbci	r29, 0xF8	; 248
    6012:	6c 81       	ldd	r22, Y+4	; 0x04
    6014:	7d 81       	ldd	r23, Y+5	; 0x05
    6016:	6a 19       	sub	r22, r10
    6018:	7b 09       	sbc	r23, r11
    601a:	88 27       	eor	r24, r24
    601c:	77 fd       	sbrc	r23, 7
    601e:	80 95       	com	r24
    6020:	98 2f       	mov	r25, r24
    6022:	0e 94 34 47 	call	0x8e68	; 0x8e68 <__floatsisf>
    6026:	9b 01       	movw	r18, r22
    6028:	ac 01       	movw	r20, r24
    602a:	c8 01       	movw	r24, r16
    602c:	b7 01       	movw	r22, r14
    602e:	0e 94 49 48 	call	0x9092	; 0x9092 <__mulsf3>
    6032:	7b 01       	movw	r14, r22
    6034:	8c 01       	movw	r16, r24
    6036:	6e 81       	ldd	r22, Y+6	; 0x06
    6038:	7f 81       	ldd	r23, Y+7	; 0x07
    603a:	65 cf       	rjmp	.-310    	; 0x5f06 <getInputFromSpeed+0x530>
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = calibration[i-1][4] + (signed int)(((float)(currVel-calibration[i-1][5])*(float)(calibration[i][4]-calibration[i-1][4]))/(float)(calibration[i][5]-calibration[i-1][5]));
    603c:	fe 01       	movw	r30, r28
    603e:	e2 95       	swap	r30
    6040:	f2 95       	swap	r31
    6042:	f0 7f       	andi	r31, 0xF0	; 240
    6044:	fe 27       	eor	r31, r30
    6046:	e0 7f       	andi	r30, 0xF0	; 240
    6048:	fe 27       	eor	r31, r30
    604a:	e2 57       	subi	r30, 0x72	; 114
    604c:	f8 4f       	sbci	r31, 0xF8	; 248
    604e:	c2 84       	ldd	r12, Z+10	; 0x0a
    6050:	d3 84       	ldd	r13, Z+11	; 0x0b
    6052:	a0 84       	ldd	r10, Z+8	; 0x08
    6054:	b1 84       	ldd	r11, Z+9	; 0x09
    6056:	2c 19       	sub	r18, r12
    6058:	3d 09       	sbc	r19, r13
    605a:	b9 01       	movw	r22, r18
    605c:	88 27       	eor	r24, r24
    605e:	77 fd       	sbrc	r23, 7
    6060:	80 95       	com	r24
    6062:	98 2f       	mov	r25, r24
    6064:	0e 94 34 47 	call	0x8e68	; 0x8e68 <__floatsisf>
    6068:	7b 01       	movw	r14, r22
    606a:	8c 01       	movw	r16, r24
    606c:	c2 95       	swap	r28
    606e:	d2 95       	swap	r29
    6070:	d0 7f       	andi	r29, 0xF0	; 240
    6072:	dc 27       	eor	r29, r28
    6074:	c0 7f       	andi	r28, 0xF0	; 240
    6076:	dc 27       	eor	r29, r28
    6078:	c2 56       	subi	r28, 0x62	; 98
    607a:	d8 4f       	sbci	r29, 0xF8	; 248
    607c:	68 85       	ldd	r22, Y+8	; 0x08
    607e:	79 85       	ldd	r23, Y+9	; 0x09
    6080:	6a 19       	sub	r22, r10
    6082:	7b 09       	sbc	r23, r11
    6084:	88 27       	eor	r24, r24
    6086:	77 fd       	sbrc	r23, 7
    6088:	80 95       	com	r24
    608a:	98 2f       	mov	r25, r24
    608c:	0e 94 34 47 	call	0x8e68	; 0x8e68 <__floatsisf>
    6090:	9b 01       	movw	r18, r22
    6092:	ac 01       	movw	r20, r24
    6094:	c8 01       	movw	r24, r16
    6096:	b7 01       	movw	r22, r14
    6098:	0e 94 49 48 	call	0x9092	; 0x9092 <__mulsf3>
    609c:	7b 01       	movw	r14, r22
    609e:	8c 01       	movw	r16, r24
    60a0:	6a 85       	ldd	r22, Y+10	; 0x0a
    60a2:	7b 85       	ldd	r23, Y+11	; 0x0b
    60a4:	80 cf       	rjmp	.-256    	; 0x5fa6 <getInputFromSpeed+0x5d0>

000060a6 <getRightSpeedFromInput>:
    
    return temp;
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {
    60a6:	8f 92       	push	r8
    60a8:	9f 92       	push	r9
    60aa:	af 92       	push	r10
    60ac:	bf 92       	push	r11
    60ae:	cf 92       	push	r12
    60b0:	df 92       	push	r13
    60b2:	ef 92       	push	r14
    60b4:	ff 92       	push	r15
    60b6:	0f 93       	push	r16
    60b8:	1f 93       	push	r17
    60ba:	cf 93       	push	r28
    60bc:	df 93       	push	r29

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    60be:	c0 91 c3 02 	lds	r28, 0x02C3
    60c2:	d0 91 c4 02 	lds	r29, 0x02C4
    60c6:	80 91 c5 02 	lds	r24, 0x02C5
    60ca:	90 91 c6 02 	lds	r25, 0x02C6
    60ce:	97 fd       	sbrc	r25, 7
    60d0:	d9 c0       	rjmp	.+434    	; 0x6284 <getRightSpeedFromInput+0x1de>
    60d2:	60 91 a2 07 	lds	r22, 0x07A2
    60d6:	70 91 a3 07 	lds	r23, 0x07A3
    60da:	6c 17       	cp	r22, r28
    60dc:	7d 07       	cpc	r23, r29
    60de:	0c f0       	brlt	.+2      	; 0x60e2 <getRightSpeedFromInput+0x3c>
    60e0:	bd c0       	rjmp	.+378    	; 0x625c <getRightSpeedFromInput+0x1b6>
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    60e2:	0f ef       	ldi	r16, 0xFF	; 255
    60e4:	1f ef       	ldi	r17, 0xFF	; 255
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    60e6:	80 91 b2 07 	lds	r24, 0x07B2
    60ea:	90 91 b3 07 	lds	r25, 0x07B3
    60ee:	8c 17       	cp	r24, r28
    60f0:	9d 07       	cpc	r25, r29
    60f2:	44 f0       	brlt	.+16     	; 0x6104 <getRightSpeedFromInput+0x5e>
    
    return temp;
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {
    60f4:	81 e0       	ldi	r24, 0x01	; 1
    60f6:	9f ef       	ldi	r25, 0xFF	; 255
    60f8:	0f 3f       	cpi	r16, 0xFF	; 255
    60fa:	19 07       	cpc	r17, r25
    60fc:	09 f0       	breq	.+2      	; 0x6100 <getRightSpeedFromInput+0x5a>
    60fe:	80 e0       	ldi	r24, 0x00	; 0
    6100:	08 2f       	mov	r16, r24
    6102:	10 e0       	ldi	r17, 0x00	; 0

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    6104:	80 91 c2 07 	lds	r24, 0x07C2
    6108:	90 91 c3 07 	lds	r25, 0x07C3
    610c:	8c 17       	cp	r24, r28
    610e:	9d 07       	cpc	r25, r29
    6110:	2c f0       	brlt	.+10     	; 0x611c <getRightSpeedFromInput+0x76>
    6112:	8f ef       	ldi	r24, 0xFF	; 255
    6114:	0f 3f       	cpi	r16, 0xFF	; 255
    6116:	18 07       	cpc	r17, r24
    6118:	09 f4       	brne	.+2      	; 0x611c <getRightSpeedFromInput+0x76>
    611a:	6c c1       	rjmp	.+728    	; 0x63f4 <getRightSpeedFromInput+0x34e>
    611c:	80 91 d2 07 	lds	r24, 0x07D2
    6120:	90 91 d3 07 	lds	r25, 0x07D3
    6124:	8c 17       	cp	r24, r28
    6126:	9d 07       	cpc	r25, r29
    6128:	2c f0       	brlt	.+10     	; 0x6134 <getRightSpeedFromInput+0x8e>
    612a:	9f ef       	ldi	r25, 0xFF	; 255
    612c:	0f 3f       	cpi	r16, 0xFF	; 255
    612e:	19 07       	cpc	r17, r25
    6130:	09 f4       	brne	.+2      	; 0x6134 <getRightSpeedFromInput+0x8e>
    6132:	72 c1       	rjmp	.+740    	; 0x6418 <getRightSpeedFromInput+0x372>
    6134:	80 91 e2 07 	lds	r24, 0x07E2
    6138:	90 91 e3 07 	lds	r25, 0x07E3
    613c:	8c 17       	cp	r24, r28
    613e:	9d 07       	cpc	r25, r29
    6140:	2c f0       	brlt	.+10     	; 0x614c <getRightSpeedFromInput+0xa6>
    6142:	8f ef       	ldi	r24, 0xFF	; 255
    6144:	0f 3f       	cpi	r16, 0xFF	; 255
    6146:	18 07       	cpc	r17, r24
    6148:	09 f4       	brne	.+2      	; 0x614c <getRightSpeedFromInput+0xa6>
    614a:	63 c1       	rjmp	.+710    	; 0x6412 <getRightSpeedFromInput+0x36c>
    614c:	80 91 f2 07 	lds	r24, 0x07F2
    6150:	90 91 f3 07 	lds	r25, 0x07F3
    6154:	8c 17       	cp	r24, r28
    6156:	9d 07       	cpc	r25, r29
    6158:	2c f0       	brlt	.+10     	; 0x6164 <getRightSpeedFromInput+0xbe>
    615a:	9f ef       	ldi	r25, 0xFF	; 255
    615c:	0f 3f       	cpi	r16, 0xFF	; 255
    615e:	19 07       	cpc	r17, r25
    6160:	09 f4       	brne	.+2      	; 0x6164 <getRightSpeedFromInput+0xbe>
    6162:	54 c1       	rjmp	.+680    	; 0x640c <getRightSpeedFromInput+0x366>
    6164:	80 91 02 08 	lds	r24, 0x0802
    6168:	90 91 03 08 	lds	r25, 0x0803
    616c:	8c 17       	cp	r24, r28
    616e:	9d 07       	cpc	r25, r29
    6170:	2c f0       	brlt	.+10     	; 0x617c <getRightSpeedFromInput+0xd6>
    6172:	8f ef       	ldi	r24, 0xFF	; 255
    6174:	0f 3f       	cpi	r16, 0xFF	; 255
    6176:	18 07       	cpc	r17, r24
    6178:	09 f4       	brne	.+2      	; 0x617c <getRightSpeedFromInput+0xd6>
    617a:	45 c1       	rjmp	.+650    	; 0x6406 <getRightSpeedFromInput+0x360>
    617c:	80 91 12 08 	lds	r24, 0x0812
    6180:	90 91 13 08 	lds	r25, 0x0813
    6184:	8c 17       	cp	r24, r28
    6186:	9d 07       	cpc	r25, r29
    6188:	2c f0       	brlt	.+10     	; 0x6194 <getRightSpeedFromInput+0xee>
    618a:	9f ef       	ldi	r25, 0xFF	; 255
    618c:	0f 3f       	cpi	r16, 0xFF	; 255
    618e:	19 07       	cpc	r17, r25
    6190:	09 f4       	brne	.+2      	; 0x6194 <getRightSpeedFromInput+0xee>
    6192:	36 c1       	rjmp	.+620    	; 0x6400 <getRightSpeedFromInput+0x35a>
    6194:	e0 90 22 08 	lds	r14, 0x0822
    6198:	f0 90 23 08 	lds	r15, 0x0823
    619c:	ec 16       	cp	r14, r28
    619e:	fd 06       	cpc	r15, r29
    61a0:	2c f0       	brlt	.+10     	; 0x61ac <getRightSpeedFromInput+0x106>
    61a2:	8f ef       	ldi	r24, 0xFF	; 255
    61a4:	0f 3f       	cpi	r16, 0xFF	; 255
    61a6:	18 07       	cpc	r17, r24
    61a8:	09 f4       	brne	.+2      	; 0x61ac <getRightSpeedFromInput+0x106>
    61aa:	27 c1       	rjmp	.+590    	; 0x63fa <getRightSpeedFromInput+0x354>
			}
		}        
    }

    if(pwm_right >= 0) {
        if(last_right_vel == 0) {
    61ac:	20 97       	sbiw	r28, 0x00	; 0
    61ae:	09 f4       	brne	.+2      	; 0x61b2 <getRightSpeedFromInput+0x10c>
    61b0:	58 c0       	rjmp	.+176    	; 0x6262 <getRightSpeedFromInput+0x1bc>
            speedRightFromEnc = 0;
        } else {
            if(indFwR==0) {  // the velocity is lower than first saved in the matrix
    61b2:	01 15       	cp	r16, r1
    61b4:	11 05       	cpc	r17, r1
    61b6:	09 f4       	brne	.+2      	; 0x61ba <getRightSpeedFromInput+0x114>
    61b8:	32 c1       	rjmp	.+612    	; 0x641e <getRightSpeedFromInput+0x378>
                speedRightFromEnc = (last_right_vel*calibration[0][3])/calibration[0][2];
            } else if(indFwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    61ba:	9f ef       	ldi	r25, 0xFF	; 255
    61bc:	0f 3f       	cpi	r16, 0xFF	; 255
    61be:	19 07       	cpc	r17, r25
    61c0:	09 f4       	brne	.+2      	; 0x61c4 <getRightSpeedFromInput+0x11e>
    61c2:	e9 c0       	rjmp	.+466    	; 0x6396 <getRightSpeedFromInput+0x2f0>
                speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][3]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][2]);  // take the max
            } else {
                speedRightFromEnc = calibration[indFwR-1][3] + (signed int)(((float)(last_right_vel-calibration[indFwR-1][2])*(float)(calibration[indFwR][3]-calibration[indFwR-1][3]))/(float)(calibration[indFwR][2]-calibration[indFwR-1][2]));
    61c4:	f8 01       	movw	r30, r16
    61c6:	e2 95       	swap	r30
    61c8:	f2 95       	swap	r31
    61ca:	f0 7f       	andi	r31, 0xF0	; 240
    61cc:	fe 27       	eor	r31, r30
    61ce:	e0 7f       	andi	r30, 0xF0	; 240
    61d0:	fe 27       	eor	r31, r30
    61d2:	e2 57       	subi	r30, 0x72	; 114
    61d4:	f8 4f       	sbci	r31, 0xF8	; 248
    61d6:	a4 80       	ldd	r10, Z+4	; 0x04
    61d8:	b5 80       	ldd	r11, Z+5	; 0x05
    61da:	86 80       	ldd	r8, Z+6	; 0x06
    61dc:	97 80       	ldd	r9, Z+7	; 0x07
    61de:	ca 19       	sub	r28, r10
    61e0:	db 09       	sbc	r29, r11
    61e2:	be 01       	movw	r22, r28
    61e4:	88 27       	eor	r24, r24
    61e6:	77 fd       	sbrc	r23, 7
    61e8:	80 95       	com	r24
    61ea:	98 2f       	mov	r25, r24
    61ec:	0e 94 34 47 	call	0x8e68	; 0x8e68 <__floatsisf>
    61f0:	6b 01       	movw	r12, r22
    61f2:	7c 01       	movw	r14, r24
    61f4:	e8 01       	movw	r28, r16
    61f6:	c2 95       	swap	r28
    61f8:	d2 95       	swap	r29
    61fa:	d0 7f       	andi	r29, 0xF0	; 240
    61fc:	dc 27       	eor	r29, r28
    61fe:	c0 7f       	andi	r28, 0xF0	; 240
    6200:	dc 27       	eor	r29, r28
    6202:	c2 56       	subi	r28, 0x62	; 98
    6204:	d8 4f       	sbci	r29, 0xF8	; 248
    6206:	6e 81       	ldd	r22, Y+6	; 0x06
    6208:	7f 81       	ldd	r23, Y+7	; 0x07
    620a:	68 19       	sub	r22, r8
    620c:	79 09       	sbc	r23, r9
    620e:	88 27       	eor	r24, r24
    6210:	77 fd       	sbrc	r23, 7
    6212:	80 95       	com	r24
    6214:	98 2f       	mov	r25, r24
    6216:	0e 94 34 47 	call	0x8e68	; 0x8e68 <__floatsisf>
    621a:	9b 01       	movw	r18, r22
    621c:	ac 01       	movw	r20, r24
    621e:	c7 01       	movw	r24, r14
    6220:	b6 01       	movw	r22, r12
    6222:	0e 94 49 48 	call	0x9092	; 0x9092 <__mulsf3>
    6226:	7b 01       	movw	r14, r22
    6228:	8c 01       	movw	r16, r24
    622a:	6c 81       	ldd	r22, Y+4	; 0x04
    622c:	7d 81       	ldd	r23, Y+5	; 0x05
    622e:	6a 19       	sub	r22, r10
    6230:	7b 09       	sbc	r23, r11
    6232:	88 27       	eor	r24, r24
    6234:	77 fd       	sbrc	r23, 7
    6236:	80 95       	com	r24
    6238:	98 2f       	mov	r25, r24
    623a:	0e 94 34 47 	call	0x8e68	; 0x8e68 <__floatsisf>
    623e:	9b 01       	movw	r18, r22
    6240:	ac 01       	movw	r20, r24
    6242:	c8 01       	movw	r24, r16
    6244:	b7 01       	movw	r22, r14
    6246:	0e 94 99 46 	call	0x8d32	; 0x8d32 <__divsf3>
    624a:	0e 94 01 47 	call	0x8e02	; 0x8e02 <__fixsfsi>
    624e:	68 0d       	add	r22, r8
    6250:	79 1d       	adc	r23, r9
    6252:	70 93 89 04 	sts	0x0489, r23
    6256:	60 93 88 04 	sts	0x0488, r22
    625a:	07 c0       	rjmp	.+14     	; 0x626a <getRightSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    625c:	00 e0       	ldi	r16, 0x00	; 0
    625e:	10 e0       	ldi	r17, 0x00	; 0
    6260:	42 cf       	rjmp	.-380    	; 0x60e6 <getRightSpeedFromInput+0x40>
		}        
    }

    if(pwm_right >= 0) {
        if(last_right_vel == 0) {
            speedRightFromEnc = 0;
    6262:	10 92 89 04 	sts	0x0489, r1
    6266:	10 92 88 04 	sts	0x0488, r1
        	speedRightFromEnc = calibration[indBwR-1][7] + (signed int)(((float)(last_right_vel-calibration[indBwR-1][6])*(float)(calibration[indBwR][7]-calibration[indBwR-1][7]))/(float)(calibration[indBwR][6]-calibration[indBwR-1][6]));
		}
		speedRightFromEnc = -speedRightFromEnc;
    }
    
}
    626a:	df 91       	pop	r29
    626c:	cf 91       	pop	r28
    626e:	1f 91       	pop	r17
    6270:	0f 91       	pop	r16
    6272:	ff 90       	pop	r15
    6274:	ef 90       	pop	r14
    6276:	df 90       	pop	r13
    6278:	cf 90       	pop	r12
    627a:	bf 90       	pop	r11
    627c:	af 90       	pop	r10
    627e:	9f 90       	pop	r9
    6280:	8f 90       	pop	r8
    6282:	08 95       	ret
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    6284:	60 91 aa 07 	lds	r22, 0x07AA
    6288:	70 91 ab 07 	lds	r23, 0x07AB
    628c:	6c 17       	cp	r22, r28
    628e:	7d 07       	cpc	r23, r29
    6290:	0c f0       	brlt	.+2      	; 0x6294 <getRightSpeedFromInput+0x1ee>
    6292:	7e c0       	rjmp	.+252    	; 0x6390 <getRightSpeedFromInput+0x2ea>
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    6294:	0f ef       	ldi	r16, 0xFF	; 255
    6296:	1f ef       	ldi	r17, 0xFF	; 255
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    6298:	80 91 ba 07 	lds	r24, 0x07BA
    629c:	90 91 bb 07 	lds	r25, 0x07BB
    62a0:	8c 17       	cp	r24, r28
    62a2:	9d 07       	cpc	r25, r29
    62a4:	44 f0       	brlt	.+16     	; 0x62b6 <getRightSpeedFromInput+0x210>
    
    return temp;
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {
    62a6:	81 e0       	ldi	r24, 0x01	; 1
    62a8:	9f ef       	ldi	r25, 0xFF	; 255
    62aa:	0f 3f       	cpi	r16, 0xFF	; 255
    62ac:	19 07       	cpc	r17, r25
    62ae:	09 f0       	breq	.+2      	; 0x62b2 <getRightSpeedFromInput+0x20c>
    62b0:	80 e0       	ldi	r24, 0x00	; 0
    62b2:	08 2f       	mov	r16, r24
    62b4:	10 e0       	ldi	r17, 0x00	; 0
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    62b6:	80 91 ca 07 	lds	r24, 0x07CA
    62ba:	90 91 cb 07 	lds	r25, 0x07CB
    62be:	8c 17       	cp	r24, r28
    62c0:	9d 07       	cpc	r25, r29
    62c2:	2c f0       	brlt	.+10     	; 0x62ce <getRightSpeedFromInput+0x228>
    62c4:	8f ef       	ldi	r24, 0xFF	; 255
    62c6:	0f 3f       	cpi	r16, 0xFF	; 255
    62c8:	18 07       	cpc	r17, r24
    62ca:	09 f4       	brne	.+2      	; 0x62ce <getRightSpeedFromInput+0x228>
    62cc:	19 c1       	rjmp	.+562    	; 0x6500 <getRightSpeedFromInput+0x45a>
    62ce:	80 91 da 07 	lds	r24, 0x07DA
    62d2:	90 91 db 07 	lds	r25, 0x07DB
    62d6:	8c 17       	cp	r24, r28
    62d8:	9d 07       	cpc	r25, r29
    62da:	2c f0       	brlt	.+10     	; 0x62e6 <getRightSpeedFromInput+0x240>
    62dc:	9f ef       	ldi	r25, 0xFF	; 255
    62de:	0f 3f       	cpi	r16, 0xFF	; 255
    62e0:	19 07       	cpc	r17, r25
    62e2:	09 f4       	brne	.+2      	; 0x62e6 <getRightSpeedFromInput+0x240>
    62e4:	0a c1       	rjmp	.+532    	; 0x64fa <getRightSpeedFromInput+0x454>
    62e6:	80 91 ea 07 	lds	r24, 0x07EA
    62ea:	90 91 eb 07 	lds	r25, 0x07EB
    62ee:	8c 17       	cp	r24, r28
    62f0:	9d 07       	cpc	r25, r29
    62f2:	2c f0       	brlt	.+10     	; 0x62fe <getRightSpeedFromInput+0x258>
    62f4:	8f ef       	ldi	r24, 0xFF	; 255
    62f6:	0f 3f       	cpi	r16, 0xFF	; 255
    62f8:	18 07       	cpc	r17, r24
    62fa:	09 f4       	brne	.+2      	; 0x62fe <getRightSpeedFromInput+0x258>
    62fc:	fb c0       	rjmp	.+502    	; 0x64f4 <getRightSpeedFromInput+0x44e>
    62fe:	80 91 fa 07 	lds	r24, 0x07FA
    6302:	90 91 fb 07 	lds	r25, 0x07FB
    6306:	8c 17       	cp	r24, r28
    6308:	9d 07       	cpc	r25, r29
    630a:	2c f0       	brlt	.+10     	; 0x6316 <getRightSpeedFromInput+0x270>
    630c:	9f ef       	ldi	r25, 0xFF	; 255
    630e:	0f 3f       	cpi	r16, 0xFF	; 255
    6310:	19 07       	cpc	r17, r25
    6312:	09 f4       	brne	.+2      	; 0x6316 <getRightSpeedFromInput+0x270>
    6314:	ec c0       	rjmp	.+472    	; 0x64ee <getRightSpeedFromInput+0x448>
    6316:	80 91 0a 08 	lds	r24, 0x080A
    631a:	90 91 0b 08 	lds	r25, 0x080B
    631e:	8c 17       	cp	r24, r28
    6320:	9d 07       	cpc	r25, r29
    6322:	2c f0       	brlt	.+10     	; 0x632e <getRightSpeedFromInput+0x288>
    6324:	8f ef       	ldi	r24, 0xFF	; 255
    6326:	0f 3f       	cpi	r16, 0xFF	; 255
    6328:	18 07       	cpc	r17, r24
    632a:	09 f4       	brne	.+2      	; 0x632e <getRightSpeedFromInput+0x288>
    632c:	dd c0       	rjmp	.+442    	; 0x64e8 <getRightSpeedFromInput+0x442>
    632e:	80 91 1a 08 	lds	r24, 0x081A
    6332:	90 91 1b 08 	lds	r25, 0x081B
    6336:	8c 17       	cp	r24, r28
    6338:	9d 07       	cpc	r25, r29
    633a:	2c f0       	brlt	.+10     	; 0x6346 <getRightSpeedFromInput+0x2a0>
    633c:	9f ef       	ldi	r25, 0xFF	; 255
    633e:	0f 3f       	cpi	r16, 0xFF	; 255
    6340:	19 07       	cpc	r17, r25
    6342:	09 f4       	brne	.+2      	; 0x6346 <getRightSpeedFromInput+0x2a0>
    6344:	ce c0       	rjmp	.+412    	; 0x64e2 <getRightSpeedFromInput+0x43c>
    6346:	e0 90 2a 08 	lds	r14, 0x082A
    634a:	f0 90 2b 08 	lds	r15, 0x082B
    634e:	ec 16       	cp	r14, r28
    6350:	fd 06       	cpc	r15, r29
    6352:	2c f0       	brlt	.+10     	; 0x635e <getRightSpeedFromInput+0x2b8>
    6354:	8f ef       	ldi	r24, 0xFF	; 255
    6356:	0f 3f       	cpi	r16, 0xFF	; 255
    6358:	18 07       	cpc	r17, r24
    635a:	09 f4       	brne	.+2      	; 0x635e <getRightSpeedFromInput+0x2b8>
    635c:	bf c0       	rjmp	.+382    	; 0x64dc <getRightSpeedFromInput+0x436>
            } else {
                speedRightFromEnc = calibration[indFwR-1][3] + (signed int)(((float)(last_right_vel-calibration[indFwR-1][2])*(float)(calibration[indFwR][3]-calibration[indFwR-1][3]))/(float)(calibration[indFwR][2]-calibration[indFwR-1][2]));
            }
        }
    } else {
		if(indBwR==0) {  // the velocity is lower than first saved in the matrix
    635e:	01 15       	cp	r16, r1
    6360:	11 05       	cpc	r17, r1
    6362:	09 f0       	breq	.+2      	; 0x6366 <getRightSpeedFromInput+0x2c0>
    6364:	6e c0       	rjmp	.+220    	; 0x6442 <getRightSpeedFromInput+0x39c>
        	speedRightFromEnc = (last_right_vel*calibration[0][7])/calibration[0][6];
    6366:	20 91 ac 07 	lds	r18, 0x07AC
    636a:	30 91 ad 07 	lds	r19, 0x07AD
    636e:	c2 9f       	mul	r28, r18
    6370:	c0 01       	movw	r24, r0
    6372:	c3 9f       	mul	r28, r19
    6374:	90 0d       	add	r25, r0
    6376:	d2 9f       	mul	r29, r18
    6378:	90 0d       	add	r25, r0
    637a:	11 24       	eor	r1, r1
    637c:	0e 94 07 49 	call	0x920e	; 0x920e <__divmodhi4>
		} else if(indBwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][7]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][6]);  // take the max
		} else {
        	speedRightFromEnc = calibration[indBwR-1][7] + (signed int)(((float)(last_right_vel-calibration[indBwR-1][6])*(float)(calibration[indBwR][7]-calibration[indBwR-1][7]))/(float)(calibration[indBwR][6]-calibration[indBwR-1][6]));
		}
		speedRightFromEnc = -speedRightFromEnc;
    6380:	70 95       	com	r23
    6382:	61 95       	neg	r22
    6384:	7f 4f       	sbci	r23, 0xFF	; 255
    6386:	70 93 89 04 	sts	0x0489, r23
    638a:	60 93 88 04 	sts	0x0488, r22
    638e:	6d cf       	rjmp	.-294    	; 0x626a <getRightSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    6390:	00 e0       	ldi	r16, 0x00	; 0
    6392:	10 e0       	ldi	r17, 0x00	; 0
    6394:	81 cf       	rjmp	.-254    	; 0x6298 <getRightSpeedFromInput+0x1f2>
            speedRightFromEnc = 0;
        } else {
            if(indFwR==0) {  // the velocity is lower than first saved in the matrix
                speedRightFromEnc = (last_right_vel*calibration[0][3])/calibration[0][2];
            } else if(indFwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
                speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][3]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][2]);  // take the max
    6396:	60 91 24 08 	lds	r22, 0x0824
    639a:	70 91 25 08 	lds	r23, 0x0825
    639e:	88 27       	eor	r24, r24
    63a0:	77 fd       	sbrc	r23, 7
    63a2:	80 95       	com	r24
    63a4:	98 2f       	mov	r25, r24
    63a6:	0e 94 34 47 	call	0x8e68	; 0x8e68 <__floatsisf>
    63aa:	5b 01       	movw	r10, r22
    63ac:	6c 01       	movw	r12, r24
    63ae:	be 01       	movw	r22, r28
    63b0:	88 27       	eor	r24, r24
    63b2:	77 fd       	sbrc	r23, 7
    63b4:	80 95       	com	r24
    63b6:	98 2f       	mov	r25, r24
    63b8:	0e 94 34 47 	call	0x8e68	; 0x8e68 <__floatsisf>
    63bc:	9b 01       	movw	r18, r22
    63be:	ac 01       	movw	r20, r24
    63c0:	c6 01       	movw	r24, r12
    63c2:	b5 01       	movw	r22, r10
    63c4:	0e 94 49 48 	call	0x9092	; 0x9092 <__mulsf3>
    63c8:	5b 01       	movw	r10, r22
    63ca:	6c 01       	movw	r12, r24
    63cc:	b7 01       	movw	r22, r14
    63ce:	88 27       	eor	r24, r24
    63d0:	77 fd       	sbrc	r23, 7
    63d2:	80 95       	com	r24
    63d4:	98 2f       	mov	r25, r24
    63d6:	0e 94 34 47 	call	0x8e68	; 0x8e68 <__floatsisf>
    63da:	9b 01       	movw	r18, r22
    63dc:	ac 01       	movw	r20, r24
    63de:	c6 01       	movw	r24, r12
    63e0:	b5 01       	movw	r22, r10
    63e2:	0e 94 99 46 	call	0x8d32	; 0x8d32 <__divsf3>
    63e6:	0e 94 01 47 	call	0x8e02	; 0x8e02 <__fixsfsi>
    63ea:	70 93 89 04 	sts	0x0489, r23
    63ee:	60 93 88 04 	sts	0x0488, r22
    63f2:	3b cf       	rjmp	.-394    	; 0x626a <getRightSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    63f4:	02 e0       	ldi	r16, 0x02	; 2
    63f6:	10 e0       	ldi	r17, 0x00	; 0
    63f8:	91 ce       	rjmp	.-734    	; 0x611c <getRightSpeedFromInput+0x76>
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    63fa:	08 e0       	ldi	r16, 0x08	; 8
    63fc:	10 e0       	ldi	r17, 0x00	; 0
    63fe:	d6 ce       	rjmp	.-596    	; 0x61ac <getRightSpeedFromInput+0x106>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    6400:	07 e0       	ldi	r16, 0x07	; 7
    6402:	10 e0       	ldi	r17, 0x00	; 0
    6404:	c7 ce       	rjmp	.-626    	; 0x6194 <getRightSpeedFromInput+0xee>
    6406:	06 e0       	ldi	r16, 0x06	; 6
    6408:	10 e0       	ldi	r17, 0x00	; 0
    640a:	b8 ce       	rjmp	.-656    	; 0x617c <getRightSpeedFromInput+0xd6>
    640c:	05 e0       	ldi	r16, 0x05	; 5
    640e:	10 e0       	ldi	r17, 0x00	; 0
    6410:	a9 ce       	rjmp	.-686    	; 0x6164 <getRightSpeedFromInput+0xbe>
    6412:	04 e0       	ldi	r16, 0x04	; 4
    6414:	10 e0       	ldi	r17, 0x00	; 0
    6416:	9a ce       	rjmp	.-716    	; 0x614c <getRightSpeedFromInput+0xa6>
    6418:	03 e0       	ldi	r16, 0x03	; 3
    641a:	10 e0       	ldi	r17, 0x00	; 0
    641c:	8b ce       	rjmp	.-746    	; 0x6134 <getRightSpeedFromInput+0x8e>
    if(pwm_right >= 0) {
        if(last_right_vel == 0) {
            speedRightFromEnc = 0;
        } else {
            if(indFwR==0) {  // the velocity is lower than first saved in the matrix
                speedRightFromEnc = (last_right_vel*calibration[0][3])/calibration[0][2];
    641e:	20 91 a4 07 	lds	r18, 0x07A4
    6422:	30 91 a5 07 	lds	r19, 0x07A5
    6426:	c2 9f       	mul	r28, r18
    6428:	c0 01       	movw	r24, r0
    642a:	c3 9f       	mul	r28, r19
    642c:	90 0d       	add	r25, r0
    642e:	d2 9f       	mul	r29, r18
    6430:	90 0d       	add	r25, r0
    6432:	11 24       	eor	r1, r1
    6434:	0e 94 07 49 	call	0x920e	; 0x920e <__divmodhi4>
    6438:	70 93 89 04 	sts	0x0489, r23
    643c:	60 93 88 04 	sts	0x0488, r22
    6440:	14 cf       	rjmp	.-472    	; 0x626a <getRightSpeedFromInput+0x1c4>
            }
        }
    } else {
		if(indBwR==0) {  // the velocity is lower than first saved in the matrix
        	speedRightFromEnc = (last_right_vel*calibration[0][7])/calibration[0][6];
		} else if(indBwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    6442:	8f ef       	ldi	r24, 0xFF	; 255
    6444:	0f 3f       	cpi	r16, 0xFF	; 255
    6446:	18 07       	cpc	r17, r24
    6448:	09 f4       	brne	.+2      	; 0x644c <getRightSpeedFromInput+0x3a6>
    644a:	5d c0       	rjmp	.+186    	; 0x6506 <getRightSpeedFromInput+0x460>
        	speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][7]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][6]);  // take the max
		} else {
        	speedRightFromEnc = calibration[indBwR-1][7] + (signed int)(((float)(last_right_vel-calibration[indBwR-1][6])*(float)(calibration[indBwR][7]-calibration[indBwR-1][7]))/(float)(calibration[indBwR][6]-calibration[indBwR-1][6]));
    644c:	f8 01       	movw	r30, r16
    644e:	e2 95       	swap	r30
    6450:	f2 95       	swap	r31
    6452:	f0 7f       	andi	r31, 0xF0	; 240
    6454:	fe 27       	eor	r31, r30
    6456:	e0 7f       	andi	r30, 0xF0	; 240
    6458:	fe 27       	eor	r31, r30
    645a:	e2 57       	subi	r30, 0x72	; 114
    645c:	f8 4f       	sbci	r31, 0xF8	; 248
    645e:	a4 84       	ldd	r10, Z+12	; 0x0c
    6460:	b5 84       	ldd	r11, Z+13	; 0x0d
    6462:	86 84       	ldd	r8, Z+14	; 0x0e
    6464:	97 84       	ldd	r9, Z+15	; 0x0f
    6466:	ca 19       	sub	r28, r10
    6468:	db 09       	sbc	r29, r11
    646a:	be 01       	movw	r22, r28
    646c:	88 27       	eor	r24, r24
    646e:	77 fd       	sbrc	r23, 7
    6470:	80 95       	com	r24
    6472:	98 2f       	mov	r25, r24
    6474:	0e 94 34 47 	call	0x8e68	; 0x8e68 <__floatsisf>
    6478:	6b 01       	movw	r12, r22
    647a:	7c 01       	movw	r14, r24
    647c:	e8 01       	movw	r28, r16
    647e:	c2 95       	swap	r28
    6480:	d2 95       	swap	r29
    6482:	d0 7f       	andi	r29, 0xF0	; 240
    6484:	dc 27       	eor	r29, r28
    6486:	c0 7f       	andi	r28, 0xF0	; 240
    6488:	dc 27       	eor	r29, r28
    648a:	c2 56       	subi	r28, 0x62	; 98
    648c:	d8 4f       	sbci	r29, 0xF8	; 248
    648e:	6e 85       	ldd	r22, Y+14	; 0x0e
    6490:	7f 85       	ldd	r23, Y+15	; 0x0f
    6492:	68 19       	sub	r22, r8
    6494:	79 09       	sbc	r23, r9
    6496:	88 27       	eor	r24, r24
    6498:	77 fd       	sbrc	r23, 7
    649a:	80 95       	com	r24
    649c:	98 2f       	mov	r25, r24
    649e:	0e 94 34 47 	call	0x8e68	; 0x8e68 <__floatsisf>
    64a2:	9b 01       	movw	r18, r22
    64a4:	ac 01       	movw	r20, r24
    64a6:	c7 01       	movw	r24, r14
    64a8:	b6 01       	movw	r22, r12
    64aa:	0e 94 49 48 	call	0x9092	; 0x9092 <__mulsf3>
    64ae:	7b 01       	movw	r14, r22
    64b0:	8c 01       	movw	r16, r24
    64b2:	6c 85       	ldd	r22, Y+12	; 0x0c
    64b4:	7d 85       	ldd	r23, Y+13	; 0x0d
    64b6:	6a 19       	sub	r22, r10
    64b8:	7b 09       	sbc	r23, r11
    64ba:	88 27       	eor	r24, r24
    64bc:	77 fd       	sbrc	r23, 7
    64be:	80 95       	com	r24
    64c0:	98 2f       	mov	r25, r24
    64c2:	0e 94 34 47 	call	0x8e68	; 0x8e68 <__floatsisf>
    64c6:	9b 01       	movw	r18, r22
    64c8:	ac 01       	movw	r20, r24
    64ca:	c8 01       	movw	r24, r16
    64cc:	b7 01       	movw	r22, r14
    64ce:	0e 94 99 46 	call	0x8d32	; 0x8d32 <__divsf3>
    64d2:	0e 94 01 47 	call	0x8e02	; 0x8e02 <__fixsfsi>
    64d6:	68 0d       	add	r22, r8
    64d8:	79 1d       	adc	r23, r9
    64da:	52 cf       	rjmp	.-348    	; 0x6380 <getRightSpeedFromInput+0x2da>
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    64dc:	08 e0       	ldi	r16, 0x08	; 8
    64de:	10 e0       	ldi	r17, 0x00	; 0
    64e0:	3e cf       	rjmp	.-388    	; 0x635e <getRightSpeedFromInput+0x2b8>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    64e2:	07 e0       	ldi	r16, 0x07	; 7
    64e4:	10 e0       	ldi	r17, 0x00	; 0
    64e6:	2f cf       	rjmp	.-418    	; 0x6346 <getRightSpeedFromInput+0x2a0>
    64e8:	06 e0       	ldi	r16, 0x06	; 6
    64ea:	10 e0       	ldi	r17, 0x00	; 0
    64ec:	20 cf       	rjmp	.-448    	; 0x632e <getRightSpeedFromInput+0x288>
    64ee:	05 e0       	ldi	r16, 0x05	; 5
    64f0:	10 e0       	ldi	r17, 0x00	; 0
    64f2:	11 cf       	rjmp	.-478    	; 0x6316 <getRightSpeedFromInput+0x270>
    64f4:	04 e0       	ldi	r16, 0x04	; 4
    64f6:	10 e0       	ldi	r17, 0x00	; 0
    64f8:	02 cf       	rjmp	.-508    	; 0x62fe <getRightSpeedFromInput+0x258>
    64fa:	03 e0       	ldi	r16, 0x03	; 3
    64fc:	10 e0       	ldi	r17, 0x00	; 0
    64fe:	f3 ce       	rjmp	.-538    	; 0x62e6 <getRightSpeedFromInput+0x240>
    6500:	02 e0       	ldi	r16, 0x02	; 2
    6502:	10 e0       	ldi	r17, 0x00	; 0
    6504:	e4 ce       	rjmp	.-568    	; 0x62ce <getRightSpeedFromInput+0x228>
        }
    } else {
		if(indBwR==0) {  // the velocity is lower than first saved in the matrix
        	speedRightFromEnc = (last_right_vel*calibration[0][7])/calibration[0][6];
		} else if(indBwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][7]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][6]);  // take the max
    6506:	60 91 2c 08 	lds	r22, 0x082C
    650a:	70 91 2d 08 	lds	r23, 0x082D
    650e:	88 27       	eor	r24, r24
    6510:	77 fd       	sbrc	r23, 7
    6512:	80 95       	com	r24
    6514:	98 2f       	mov	r25, r24
    6516:	0e 94 34 47 	call	0x8e68	; 0x8e68 <__floatsisf>
    651a:	5b 01       	movw	r10, r22
    651c:	6c 01       	movw	r12, r24
    651e:	be 01       	movw	r22, r28
    6520:	88 27       	eor	r24, r24
    6522:	77 fd       	sbrc	r23, 7
    6524:	80 95       	com	r24
    6526:	98 2f       	mov	r25, r24
    6528:	0e 94 34 47 	call	0x8e68	; 0x8e68 <__floatsisf>
    652c:	9b 01       	movw	r18, r22
    652e:	ac 01       	movw	r20, r24
    6530:	c6 01       	movw	r24, r12
    6532:	b5 01       	movw	r22, r10
    6534:	0e 94 49 48 	call	0x9092	; 0x9092 <__mulsf3>
    6538:	5b 01       	movw	r10, r22
    653a:	6c 01       	movw	r12, r24
    653c:	b7 01       	movw	r22, r14
    653e:	88 27       	eor	r24, r24
    6540:	77 fd       	sbrc	r23, 7
    6542:	80 95       	com	r24
    6544:	98 2f       	mov	r25, r24
    6546:	0e 94 34 47 	call	0x8e68	; 0x8e68 <__floatsisf>
    654a:	9b 01       	movw	r18, r22
    654c:	ac 01       	movw	r20, r24
    654e:	c6 01       	movw	r24, r12
    6550:	b5 01       	movw	r22, r10
    6552:	0e 94 99 46 	call	0x8d32	; 0x8d32 <__divsf3>
    6556:	0e 94 01 47 	call	0x8e02	; 0x8e02 <__fixsfsi>
    655a:	12 cf       	rjmp	.-476    	; 0x6380 <getRightSpeedFromInput+0x2da>

0000655c <getLeftSpeedFromInput>:
    }
    
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {
    655c:	8f 92       	push	r8
    655e:	9f 92       	push	r9
    6560:	af 92       	push	r10
    6562:	bf 92       	push	r11
    6564:	cf 92       	push	r12
    6566:	df 92       	push	r13
    6568:	ef 92       	push	r14
    656a:	ff 92       	push	r15
    656c:	0f 93       	push	r16
    656e:	1f 93       	push	r17
    6570:	cf 93       	push	r28
    6572:	df 93       	push	r29

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    6574:	c0 91 c1 02 	lds	r28, 0x02C1
    6578:	d0 91 c2 02 	lds	r29, 0x02C2
    657c:	80 91 c7 02 	lds	r24, 0x02C7
    6580:	90 91 c8 02 	lds	r25, 0x02C8
    6584:	97 fd       	sbrc	r25, 7
    6586:	d9 c0       	rjmp	.+434    	; 0x673a <getLeftSpeedFromInput+0x1de>
    6588:	60 91 9e 07 	lds	r22, 0x079E
    658c:	70 91 9f 07 	lds	r23, 0x079F
    6590:	6c 17       	cp	r22, r28
    6592:	7d 07       	cpc	r23, r29
    6594:	0c f0       	brlt	.+2      	; 0x6598 <getLeftSpeedFromInput+0x3c>
    6596:	bd c0       	rjmp	.+378    	; 0x6712 <getLeftSpeedFromInput+0x1b6>
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    6598:	0f ef       	ldi	r16, 0xFF	; 255
    659a:	1f ef       	ldi	r17, 0xFF	; 255
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    659c:	80 91 ae 07 	lds	r24, 0x07AE
    65a0:	90 91 af 07 	lds	r25, 0x07AF
    65a4:	8c 17       	cp	r24, r28
    65a6:	9d 07       	cpc	r25, r29
    65a8:	44 f0       	brlt	.+16     	; 0x65ba <getLeftSpeedFromInput+0x5e>
    }
    
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {
    65aa:	81 e0       	ldi	r24, 0x01	; 1
    65ac:	9f ef       	ldi	r25, 0xFF	; 255
    65ae:	0f 3f       	cpi	r16, 0xFF	; 255
    65b0:	19 07       	cpc	r17, r25
    65b2:	09 f0       	breq	.+2      	; 0x65b6 <getLeftSpeedFromInput+0x5a>
    65b4:	80 e0       	ldi	r24, 0x00	; 0
    65b6:	08 2f       	mov	r16, r24
    65b8:	10 e0       	ldi	r17, 0x00	; 0

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    65ba:	80 91 be 07 	lds	r24, 0x07BE
    65be:	90 91 bf 07 	lds	r25, 0x07BF
    65c2:	8c 17       	cp	r24, r28
    65c4:	9d 07       	cpc	r25, r29
    65c6:	2c f0       	brlt	.+10     	; 0x65d2 <getLeftSpeedFromInput+0x76>
    65c8:	8f ef       	ldi	r24, 0xFF	; 255
    65ca:	0f 3f       	cpi	r16, 0xFF	; 255
    65cc:	18 07       	cpc	r17, r24
    65ce:	09 f4       	brne	.+2      	; 0x65d2 <getLeftSpeedFromInput+0x76>
    65d0:	6c c1       	rjmp	.+728    	; 0x68aa <getLeftSpeedFromInput+0x34e>
    65d2:	80 91 ce 07 	lds	r24, 0x07CE
    65d6:	90 91 cf 07 	lds	r25, 0x07CF
    65da:	8c 17       	cp	r24, r28
    65dc:	9d 07       	cpc	r25, r29
    65de:	2c f0       	brlt	.+10     	; 0x65ea <getLeftSpeedFromInput+0x8e>
    65e0:	9f ef       	ldi	r25, 0xFF	; 255
    65e2:	0f 3f       	cpi	r16, 0xFF	; 255
    65e4:	19 07       	cpc	r17, r25
    65e6:	09 f4       	brne	.+2      	; 0x65ea <getLeftSpeedFromInput+0x8e>
    65e8:	72 c1       	rjmp	.+740    	; 0x68ce <getLeftSpeedFromInput+0x372>
    65ea:	80 91 de 07 	lds	r24, 0x07DE
    65ee:	90 91 df 07 	lds	r25, 0x07DF
    65f2:	8c 17       	cp	r24, r28
    65f4:	9d 07       	cpc	r25, r29
    65f6:	2c f0       	brlt	.+10     	; 0x6602 <getLeftSpeedFromInput+0xa6>
    65f8:	8f ef       	ldi	r24, 0xFF	; 255
    65fa:	0f 3f       	cpi	r16, 0xFF	; 255
    65fc:	18 07       	cpc	r17, r24
    65fe:	09 f4       	brne	.+2      	; 0x6602 <getLeftSpeedFromInput+0xa6>
    6600:	63 c1       	rjmp	.+710    	; 0x68c8 <getLeftSpeedFromInput+0x36c>
    6602:	80 91 ee 07 	lds	r24, 0x07EE
    6606:	90 91 ef 07 	lds	r25, 0x07EF
    660a:	8c 17       	cp	r24, r28
    660c:	9d 07       	cpc	r25, r29
    660e:	2c f0       	brlt	.+10     	; 0x661a <getLeftSpeedFromInput+0xbe>
    6610:	9f ef       	ldi	r25, 0xFF	; 255
    6612:	0f 3f       	cpi	r16, 0xFF	; 255
    6614:	19 07       	cpc	r17, r25
    6616:	09 f4       	brne	.+2      	; 0x661a <getLeftSpeedFromInput+0xbe>
    6618:	54 c1       	rjmp	.+680    	; 0x68c2 <getLeftSpeedFromInput+0x366>
    661a:	80 91 fe 07 	lds	r24, 0x07FE
    661e:	90 91 ff 07 	lds	r25, 0x07FF
    6622:	8c 17       	cp	r24, r28
    6624:	9d 07       	cpc	r25, r29
    6626:	2c f0       	brlt	.+10     	; 0x6632 <getLeftSpeedFromInput+0xd6>
    6628:	8f ef       	ldi	r24, 0xFF	; 255
    662a:	0f 3f       	cpi	r16, 0xFF	; 255
    662c:	18 07       	cpc	r17, r24
    662e:	09 f4       	brne	.+2      	; 0x6632 <getLeftSpeedFromInput+0xd6>
    6630:	45 c1       	rjmp	.+650    	; 0x68bc <getLeftSpeedFromInput+0x360>
    6632:	80 91 0e 08 	lds	r24, 0x080E
    6636:	90 91 0f 08 	lds	r25, 0x080F
    663a:	8c 17       	cp	r24, r28
    663c:	9d 07       	cpc	r25, r29
    663e:	2c f0       	brlt	.+10     	; 0x664a <getLeftSpeedFromInput+0xee>
    6640:	9f ef       	ldi	r25, 0xFF	; 255
    6642:	0f 3f       	cpi	r16, 0xFF	; 255
    6644:	19 07       	cpc	r17, r25
    6646:	09 f4       	brne	.+2      	; 0x664a <getLeftSpeedFromInput+0xee>
    6648:	36 c1       	rjmp	.+620    	; 0x68b6 <getLeftSpeedFromInput+0x35a>
    664a:	e0 90 1e 08 	lds	r14, 0x081E
    664e:	f0 90 1f 08 	lds	r15, 0x081F
    6652:	ec 16       	cp	r14, r28
    6654:	fd 06       	cpc	r15, r29
    6656:	2c f0       	brlt	.+10     	; 0x6662 <getLeftSpeedFromInput+0x106>
    6658:	8f ef       	ldi	r24, 0xFF	; 255
    665a:	0f 3f       	cpi	r16, 0xFF	; 255
    665c:	18 07       	cpc	r17, r24
    665e:	09 f4       	brne	.+2      	; 0x6662 <getLeftSpeedFromInput+0x106>
    6660:	27 c1       	rjmp	.+590    	; 0x68b0 <getLeftSpeedFromInput+0x354>
			}
		}     
    }

    if(pwm_left >= 0) {
        if(last_left_vel == 0) {
    6662:	20 97       	sbiw	r28, 0x00	; 0
    6664:	09 f4       	brne	.+2      	; 0x6668 <getLeftSpeedFromInput+0x10c>
    6666:	58 c0       	rjmp	.+176    	; 0x6718 <getLeftSpeedFromInput+0x1bc>
            speedLeftFromEnc = 0;
        } else {
            if(indFwL==0) {  // the velocity is lower than first saved in the matrix
    6668:	01 15       	cp	r16, r1
    666a:	11 05       	cpc	r17, r1
    666c:	09 f4       	brne	.+2      	; 0x6670 <getLeftSpeedFromInput+0x114>
    666e:	32 c1       	rjmp	.+612    	; 0x68d4 <getLeftSpeedFromInput+0x378>
                speedLeftFromEnc = (last_left_vel*calibration[0][1])/calibration[0][0];
            } else if(indFwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    6670:	9f ef       	ldi	r25, 0xFF	; 255
    6672:	0f 3f       	cpi	r16, 0xFF	; 255
    6674:	19 07       	cpc	r17, r25
    6676:	09 f4       	brne	.+2      	; 0x667a <getLeftSpeedFromInput+0x11e>
    6678:	e9 c0       	rjmp	.+466    	; 0x684c <getLeftSpeedFromInput+0x2f0>
                speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][1]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][0]);  // take the max
            } else {
                speedLeftFromEnc = calibration[indFwL-1][1] + (signed int)(((float)(last_left_vel-calibration[indFwL-1][0])*(float)(calibration[indFwL][1]-calibration[indFwL-1][1]))/(float)(calibration[indFwL][0]-calibration[indFwL-1][0]));
    667a:	f8 01       	movw	r30, r16
    667c:	e2 95       	swap	r30
    667e:	f2 95       	swap	r31
    6680:	f0 7f       	andi	r31, 0xF0	; 240
    6682:	fe 27       	eor	r31, r30
    6684:	e0 7f       	andi	r30, 0xF0	; 240
    6686:	fe 27       	eor	r31, r30
    6688:	e2 57       	subi	r30, 0x72	; 114
    668a:	f8 4f       	sbci	r31, 0xF8	; 248
    668c:	a0 80       	ld	r10, Z
    668e:	b1 80       	ldd	r11, Z+1	; 0x01
    6690:	82 80       	ldd	r8, Z+2	; 0x02
    6692:	93 80       	ldd	r9, Z+3	; 0x03
    6694:	ca 19       	sub	r28, r10
    6696:	db 09       	sbc	r29, r11
    6698:	be 01       	movw	r22, r28
    669a:	88 27       	eor	r24, r24
    669c:	77 fd       	sbrc	r23, 7
    669e:	80 95       	com	r24
    66a0:	98 2f       	mov	r25, r24
    66a2:	0e 94 34 47 	call	0x8e68	; 0x8e68 <__floatsisf>
    66a6:	6b 01       	movw	r12, r22
    66a8:	7c 01       	movw	r14, r24
    66aa:	e8 01       	movw	r28, r16
    66ac:	c2 95       	swap	r28
    66ae:	d2 95       	swap	r29
    66b0:	d0 7f       	andi	r29, 0xF0	; 240
    66b2:	dc 27       	eor	r29, r28
    66b4:	c0 7f       	andi	r28, 0xF0	; 240
    66b6:	dc 27       	eor	r29, r28
    66b8:	c2 56       	subi	r28, 0x62	; 98
    66ba:	d8 4f       	sbci	r29, 0xF8	; 248
    66bc:	6a 81       	ldd	r22, Y+2	; 0x02
    66be:	7b 81       	ldd	r23, Y+3	; 0x03
    66c0:	68 19       	sub	r22, r8
    66c2:	79 09       	sbc	r23, r9
    66c4:	88 27       	eor	r24, r24
    66c6:	77 fd       	sbrc	r23, 7
    66c8:	80 95       	com	r24
    66ca:	98 2f       	mov	r25, r24
    66cc:	0e 94 34 47 	call	0x8e68	; 0x8e68 <__floatsisf>
    66d0:	9b 01       	movw	r18, r22
    66d2:	ac 01       	movw	r20, r24
    66d4:	c7 01       	movw	r24, r14
    66d6:	b6 01       	movw	r22, r12
    66d8:	0e 94 49 48 	call	0x9092	; 0x9092 <__mulsf3>
    66dc:	7b 01       	movw	r14, r22
    66de:	8c 01       	movw	r16, r24
    66e0:	68 81       	ld	r22, Y
    66e2:	79 81       	ldd	r23, Y+1	; 0x01
    66e4:	6a 19       	sub	r22, r10
    66e6:	7b 09       	sbc	r23, r11
    66e8:	88 27       	eor	r24, r24
    66ea:	77 fd       	sbrc	r23, 7
    66ec:	80 95       	com	r24
    66ee:	98 2f       	mov	r25, r24
    66f0:	0e 94 34 47 	call	0x8e68	; 0x8e68 <__floatsisf>
    66f4:	9b 01       	movw	r18, r22
    66f6:	ac 01       	movw	r20, r24
    66f8:	c8 01       	movw	r24, r16
    66fa:	b7 01       	movw	r22, r14
    66fc:	0e 94 99 46 	call	0x8d32	; 0x8d32 <__divsf3>
    6700:	0e 94 01 47 	call	0x8e02	; 0x8e02 <__fixsfsi>
    6704:	68 0d       	add	r22, r8
    6706:	79 1d       	adc	r23, r9
    6708:	70 93 87 04 	sts	0x0487, r23
    670c:	60 93 86 04 	sts	0x0486, r22
    6710:	07 c0       	rjmp	.+14     	; 0x6720 <getLeftSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    6712:	00 e0       	ldi	r16, 0x00	; 0
    6714:	10 e0       	ldi	r17, 0x00	; 0
    6716:	42 cf       	rjmp	.-380    	; 0x659c <getLeftSpeedFromInput+0x40>
		}     
    }

    if(pwm_left >= 0) {
        if(last_left_vel == 0) {
            speedLeftFromEnc = 0;
    6718:	10 92 87 04 	sts	0x0487, r1
    671c:	10 92 86 04 	sts	0x0486, r1
        	speedLeftFromEnc = calibration[indBwL-1][5] + (signed int)(((float)(last_left_vel-calibration[indBwL-1][4])*(float)(calibration[indBwL][5]-calibration[indBwL-1][5]))/(float)(calibration[indBwL][4]-calibration[indBwL-1][4]));
		}
		speedLeftFromEnc = -speedLeftFromEnc;
    }
    
}
    6720:	df 91       	pop	r29
    6722:	cf 91       	pop	r28
    6724:	1f 91       	pop	r17
    6726:	0f 91       	pop	r16
    6728:	ff 90       	pop	r15
    672a:	ef 90       	pop	r14
    672c:	df 90       	pop	r13
    672e:	cf 90       	pop	r12
    6730:	bf 90       	pop	r11
    6732:	af 90       	pop	r10
    6734:	9f 90       	pop	r9
    6736:	8f 90       	pop	r8
    6738:	08 95       	ret
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    673a:	60 91 a6 07 	lds	r22, 0x07A6
    673e:	70 91 a7 07 	lds	r23, 0x07A7
    6742:	6c 17       	cp	r22, r28
    6744:	7d 07       	cpc	r23, r29
    6746:	0c f0       	brlt	.+2      	; 0x674a <getLeftSpeedFromInput+0x1ee>
    6748:	7e c0       	rjmp	.+252    	; 0x6846 <getLeftSpeedFromInput+0x2ea>
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    674a:	0f ef       	ldi	r16, 0xFF	; 255
    674c:	1f ef       	ldi	r17, 0xFF	; 255
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    674e:	80 91 b6 07 	lds	r24, 0x07B6
    6752:	90 91 b7 07 	lds	r25, 0x07B7
    6756:	8c 17       	cp	r24, r28
    6758:	9d 07       	cpc	r25, r29
    675a:	44 f0       	brlt	.+16     	; 0x676c <getLeftSpeedFromInput+0x210>
    }
    
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {
    675c:	81 e0       	ldi	r24, 0x01	; 1
    675e:	9f ef       	ldi	r25, 0xFF	; 255
    6760:	0f 3f       	cpi	r16, 0xFF	; 255
    6762:	19 07       	cpc	r17, r25
    6764:	09 f0       	breq	.+2      	; 0x6768 <getLeftSpeedFromInput+0x20c>
    6766:	80 e0       	ldi	r24, 0x00	; 0
    6768:	08 2f       	mov	r16, r24
    676a:	10 e0       	ldi	r17, 0x00	; 0
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    676c:	80 91 c6 07 	lds	r24, 0x07C6
    6770:	90 91 c7 07 	lds	r25, 0x07C7
    6774:	8c 17       	cp	r24, r28
    6776:	9d 07       	cpc	r25, r29
    6778:	2c f0       	brlt	.+10     	; 0x6784 <getLeftSpeedFromInput+0x228>
    677a:	8f ef       	ldi	r24, 0xFF	; 255
    677c:	0f 3f       	cpi	r16, 0xFF	; 255
    677e:	18 07       	cpc	r17, r24
    6780:	09 f4       	brne	.+2      	; 0x6784 <getLeftSpeedFromInput+0x228>
    6782:	19 c1       	rjmp	.+562    	; 0x69b6 <getLeftSpeedFromInput+0x45a>
    6784:	80 91 d6 07 	lds	r24, 0x07D6
    6788:	90 91 d7 07 	lds	r25, 0x07D7
    678c:	8c 17       	cp	r24, r28
    678e:	9d 07       	cpc	r25, r29
    6790:	2c f0       	brlt	.+10     	; 0x679c <getLeftSpeedFromInput+0x240>
    6792:	9f ef       	ldi	r25, 0xFF	; 255
    6794:	0f 3f       	cpi	r16, 0xFF	; 255
    6796:	19 07       	cpc	r17, r25
    6798:	09 f4       	brne	.+2      	; 0x679c <getLeftSpeedFromInput+0x240>
    679a:	0a c1       	rjmp	.+532    	; 0x69b0 <getLeftSpeedFromInput+0x454>
    679c:	80 91 e6 07 	lds	r24, 0x07E6
    67a0:	90 91 e7 07 	lds	r25, 0x07E7
    67a4:	8c 17       	cp	r24, r28
    67a6:	9d 07       	cpc	r25, r29
    67a8:	2c f0       	brlt	.+10     	; 0x67b4 <getLeftSpeedFromInput+0x258>
    67aa:	8f ef       	ldi	r24, 0xFF	; 255
    67ac:	0f 3f       	cpi	r16, 0xFF	; 255
    67ae:	18 07       	cpc	r17, r24
    67b0:	09 f4       	brne	.+2      	; 0x67b4 <getLeftSpeedFromInput+0x258>
    67b2:	fb c0       	rjmp	.+502    	; 0x69aa <getLeftSpeedFromInput+0x44e>
    67b4:	80 91 f6 07 	lds	r24, 0x07F6
    67b8:	90 91 f7 07 	lds	r25, 0x07F7
    67bc:	8c 17       	cp	r24, r28
    67be:	9d 07       	cpc	r25, r29
    67c0:	2c f0       	brlt	.+10     	; 0x67cc <getLeftSpeedFromInput+0x270>
    67c2:	9f ef       	ldi	r25, 0xFF	; 255
    67c4:	0f 3f       	cpi	r16, 0xFF	; 255
    67c6:	19 07       	cpc	r17, r25
    67c8:	09 f4       	brne	.+2      	; 0x67cc <getLeftSpeedFromInput+0x270>
    67ca:	ec c0       	rjmp	.+472    	; 0x69a4 <getLeftSpeedFromInput+0x448>
    67cc:	80 91 06 08 	lds	r24, 0x0806
    67d0:	90 91 07 08 	lds	r25, 0x0807
    67d4:	8c 17       	cp	r24, r28
    67d6:	9d 07       	cpc	r25, r29
    67d8:	2c f0       	brlt	.+10     	; 0x67e4 <getLeftSpeedFromInput+0x288>
    67da:	8f ef       	ldi	r24, 0xFF	; 255
    67dc:	0f 3f       	cpi	r16, 0xFF	; 255
    67de:	18 07       	cpc	r17, r24
    67e0:	09 f4       	brne	.+2      	; 0x67e4 <getLeftSpeedFromInput+0x288>
    67e2:	dd c0       	rjmp	.+442    	; 0x699e <getLeftSpeedFromInput+0x442>
    67e4:	80 91 16 08 	lds	r24, 0x0816
    67e8:	90 91 17 08 	lds	r25, 0x0817
    67ec:	8c 17       	cp	r24, r28
    67ee:	9d 07       	cpc	r25, r29
    67f0:	2c f0       	brlt	.+10     	; 0x67fc <getLeftSpeedFromInput+0x2a0>
    67f2:	9f ef       	ldi	r25, 0xFF	; 255
    67f4:	0f 3f       	cpi	r16, 0xFF	; 255
    67f6:	19 07       	cpc	r17, r25
    67f8:	09 f4       	brne	.+2      	; 0x67fc <getLeftSpeedFromInput+0x2a0>
    67fa:	ce c0       	rjmp	.+412    	; 0x6998 <getLeftSpeedFromInput+0x43c>
    67fc:	e0 90 26 08 	lds	r14, 0x0826
    6800:	f0 90 27 08 	lds	r15, 0x0827
    6804:	ec 16       	cp	r14, r28
    6806:	fd 06       	cpc	r15, r29
    6808:	2c f0       	brlt	.+10     	; 0x6814 <getLeftSpeedFromInput+0x2b8>
    680a:	8f ef       	ldi	r24, 0xFF	; 255
    680c:	0f 3f       	cpi	r16, 0xFF	; 255
    680e:	18 07       	cpc	r17, r24
    6810:	09 f4       	brne	.+2      	; 0x6814 <getLeftSpeedFromInput+0x2b8>
    6812:	bf c0       	rjmp	.+382    	; 0x6992 <getLeftSpeedFromInput+0x436>
            } else {
                speedLeftFromEnc = calibration[indFwL-1][1] + (signed int)(((float)(last_left_vel-calibration[indFwL-1][0])*(float)(calibration[indFwL][1]-calibration[indFwL-1][1]))/(float)(calibration[indFwL][0]-calibration[indFwL-1][0]));
            }
        }
    } else {
		if(indBwL==0) {  // the velocity is lower than first saved in the matrix
    6814:	01 15       	cp	r16, r1
    6816:	11 05       	cpc	r17, r1
    6818:	09 f0       	breq	.+2      	; 0x681c <getLeftSpeedFromInput+0x2c0>
    681a:	6e c0       	rjmp	.+220    	; 0x68f8 <getLeftSpeedFromInput+0x39c>
        	speedLeftFromEnc = (last_left_vel*calibration[0][5])/calibration[0][4];
    681c:	20 91 a8 07 	lds	r18, 0x07A8
    6820:	30 91 a9 07 	lds	r19, 0x07A9
    6824:	c2 9f       	mul	r28, r18
    6826:	c0 01       	movw	r24, r0
    6828:	c3 9f       	mul	r28, r19
    682a:	90 0d       	add	r25, r0
    682c:	d2 9f       	mul	r29, r18
    682e:	90 0d       	add	r25, r0
    6830:	11 24       	eor	r1, r1
    6832:	0e 94 07 49 	call	0x920e	; 0x920e <__divmodhi4>
		} else if(indBwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][5]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][4]);  // take the max
		} else {
        	speedLeftFromEnc = calibration[indBwL-1][5] + (signed int)(((float)(last_left_vel-calibration[indBwL-1][4])*(float)(calibration[indBwL][5]-calibration[indBwL-1][5]))/(float)(calibration[indBwL][4]-calibration[indBwL-1][4]));
		}
		speedLeftFromEnc = -speedLeftFromEnc;
    6836:	70 95       	com	r23
    6838:	61 95       	neg	r22
    683a:	7f 4f       	sbci	r23, 0xFF	; 255
    683c:	70 93 87 04 	sts	0x0487, r23
    6840:	60 93 86 04 	sts	0x0486, r22
    6844:	6d cf       	rjmp	.-294    	; 0x6720 <getLeftSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    6846:	00 e0       	ldi	r16, 0x00	; 0
    6848:	10 e0       	ldi	r17, 0x00	; 0
    684a:	81 cf       	rjmp	.-254    	; 0x674e <getLeftSpeedFromInput+0x1f2>
            speedLeftFromEnc = 0;
        } else {
            if(indFwL==0) {  // the velocity is lower than first saved in the matrix
                speedLeftFromEnc = (last_left_vel*calibration[0][1])/calibration[0][0];
            } else if(indFwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
                speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][1]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][0]);  // take the max
    684c:	60 91 20 08 	lds	r22, 0x0820
    6850:	70 91 21 08 	lds	r23, 0x0821
    6854:	88 27       	eor	r24, r24
    6856:	77 fd       	sbrc	r23, 7
    6858:	80 95       	com	r24
    685a:	98 2f       	mov	r25, r24
    685c:	0e 94 34 47 	call	0x8e68	; 0x8e68 <__floatsisf>
    6860:	5b 01       	movw	r10, r22
    6862:	6c 01       	movw	r12, r24
    6864:	be 01       	movw	r22, r28
    6866:	88 27       	eor	r24, r24
    6868:	77 fd       	sbrc	r23, 7
    686a:	80 95       	com	r24
    686c:	98 2f       	mov	r25, r24
    686e:	0e 94 34 47 	call	0x8e68	; 0x8e68 <__floatsisf>
    6872:	9b 01       	movw	r18, r22
    6874:	ac 01       	movw	r20, r24
    6876:	c6 01       	movw	r24, r12
    6878:	b5 01       	movw	r22, r10
    687a:	0e 94 49 48 	call	0x9092	; 0x9092 <__mulsf3>
    687e:	5b 01       	movw	r10, r22
    6880:	6c 01       	movw	r12, r24
    6882:	b7 01       	movw	r22, r14
    6884:	88 27       	eor	r24, r24
    6886:	77 fd       	sbrc	r23, 7
    6888:	80 95       	com	r24
    688a:	98 2f       	mov	r25, r24
    688c:	0e 94 34 47 	call	0x8e68	; 0x8e68 <__floatsisf>
    6890:	9b 01       	movw	r18, r22
    6892:	ac 01       	movw	r20, r24
    6894:	c6 01       	movw	r24, r12
    6896:	b5 01       	movw	r22, r10
    6898:	0e 94 99 46 	call	0x8d32	; 0x8d32 <__divsf3>
    689c:	0e 94 01 47 	call	0x8e02	; 0x8e02 <__fixsfsi>
    68a0:	70 93 87 04 	sts	0x0487, r23
    68a4:	60 93 86 04 	sts	0x0486, r22
    68a8:	3b cf       	rjmp	.-394    	; 0x6720 <getLeftSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    68aa:	02 e0       	ldi	r16, 0x02	; 2
    68ac:	10 e0       	ldi	r17, 0x00	; 0
    68ae:	91 ce       	rjmp	.-734    	; 0x65d2 <getLeftSpeedFromInput+0x76>
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    68b0:	08 e0       	ldi	r16, 0x08	; 8
    68b2:	10 e0       	ldi	r17, 0x00	; 0
    68b4:	d6 ce       	rjmp	.-596    	; 0x6662 <getLeftSpeedFromInput+0x106>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    68b6:	07 e0       	ldi	r16, 0x07	; 7
    68b8:	10 e0       	ldi	r17, 0x00	; 0
    68ba:	c7 ce       	rjmp	.-626    	; 0x664a <getLeftSpeedFromInput+0xee>
    68bc:	06 e0       	ldi	r16, 0x06	; 6
    68be:	10 e0       	ldi	r17, 0x00	; 0
    68c0:	b8 ce       	rjmp	.-656    	; 0x6632 <getLeftSpeedFromInput+0xd6>
    68c2:	05 e0       	ldi	r16, 0x05	; 5
    68c4:	10 e0       	ldi	r17, 0x00	; 0
    68c6:	a9 ce       	rjmp	.-686    	; 0x661a <getLeftSpeedFromInput+0xbe>
    68c8:	04 e0       	ldi	r16, 0x04	; 4
    68ca:	10 e0       	ldi	r17, 0x00	; 0
    68cc:	9a ce       	rjmp	.-716    	; 0x6602 <getLeftSpeedFromInput+0xa6>
    68ce:	03 e0       	ldi	r16, 0x03	; 3
    68d0:	10 e0       	ldi	r17, 0x00	; 0
    68d2:	8b ce       	rjmp	.-746    	; 0x65ea <getLeftSpeedFromInput+0x8e>
    if(pwm_left >= 0) {
        if(last_left_vel == 0) {
            speedLeftFromEnc = 0;
        } else {
            if(indFwL==0) {  // the velocity is lower than first saved in the matrix
                speedLeftFromEnc = (last_left_vel*calibration[0][1])/calibration[0][0];
    68d4:	20 91 a0 07 	lds	r18, 0x07A0
    68d8:	30 91 a1 07 	lds	r19, 0x07A1
    68dc:	c2 9f       	mul	r28, r18
    68de:	c0 01       	movw	r24, r0
    68e0:	c3 9f       	mul	r28, r19
    68e2:	90 0d       	add	r25, r0
    68e4:	d2 9f       	mul	r29, r18
    68e6:	90 0d       	add	r25, r0
    68e8:	11 24       	eor	r1, r1
    68ea:	0e 94 07 49 	call	0x920e	; 0x920e <__divmodhi4>
    68ee:	70 93 87 04 	sts	0x0487, r23
    68f2:	60 93 86 04 	sts	0x0486, r22
    68f6:	14 cf       	rjmp	.-472    	; 0x6720 <getLeftSpeedFromInput+0x1c4>
            }
        }
    } else {
		if(indBwL==0) {  // the velocity is lower than first saved in the matrix
        	speedLeftFromEnc = (last_left_vel*calibration[0][5])/calibration[0][4];
		} else if(indBwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    68f8:	8f ef       	ldi	r24, 0xFF	; 255
    68fa:	0f 3f       	cpi	r16, 0xFF	; 255
    68fc:	18 07       	cpc	r17, r24
    68fe:	09 f4       	brne	.+2      	; 0x6902 <getLeftSpeedFromInput+0x3a6>
    6900:	5d c0       	rjmp	.+186    	; 0x69bc <getLeftSpeedFromInput+0x460>
        	speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][5]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][4]);  // take the max
		} else {
        	speedLeftFromEnc = calibration[indBwL-1][5] + (signed int)(((float)(last_left_vel-calibration[indBwL-1][4])*(float)(calibration[indBwL][5]-calibration[indBwL-1][5]))/(float)(calibration[indBwL][4]-calibration[indBwL-1][4]));
    6902:	f8 01       	movw	r30, r16
    6904:	e2 95       	swap	r30
    6906:	f2 95       	swap	r31
    6908:	f0 7f       	andi	r31, 0xF0	; 240
    690a:	fe 27       	eor	r31, r30
    690c:	e0 7f       	andi	r30, 0xF0	; 240
    690e:	fe 27       	eor	r31, r30
    6910:	e2 57       	subi	r30, 0x72	; 114
    6912:	f8 4f       	sbci	r31, 0xF8	; 248
    6914:	a0 84       	ldd	r10, Z+8	; 0x08
    6916:	b1 84       	ldd	r11, Z+9	; 0x09
    6918:	82 84       	ldd	r8, Z+10	; 0x0a
    691a:	93 84       	ldd	r9, Z+11	; 0x0b
    691c:	ca 19       	sub	r28, r10
    691e:	db 09       	sbc	r29, r11
    6920:	be 01       	movw	r22, r28
    6922:	88 27       	eor	r24, r24
    6924:	77 fd       	sbrc	r23, 7
    6926:	80 95       	com	r24
    6928:	98 2f       	mov	r25, r24
    692a:	0e 94 34 47 	call	0x8e68	; 0x8e68 <__floatsisf>
    692e:	6b 01       	movw	r12, r22
    6930:	7c 01       	movw	r14, r24
    6932:	e8 01       	movw	r28, r16
    6934:	c2 95       	swap	r28
    6936:	d2 95       	swap	r29
    6938:	d0 7f       	andi	r29, 0xF0	; 240
    693a:	dc 27       	eor	r29, r28
    693c:	c0 7f       	andi	r28, 0xF0	; 240
    693e:	dc 27       	eor	r29, r28
    6940:	c2 56       	subi	r28, 0x62	; 98
    6942:	d8 4f       	sbci	r29, 0xF8	; 248
    6944:	6a 85       	ldd	r22, Y+10	; 0x0a
    6946:	7b 85       	ldd	r23, Y+11	; 0x0b
    6948:	68 19       	sub	r22, r8
    694a:	79 09       	sbc	r23, r9
    694c:	88 27       	eor	r24, r24
    694e:	77 fd       	sbrc	r23, 7
    6950:	80 95       	com	r24
    6952:	98 2f       	mov	r25, r24
    6954:	0e 94 34 47 	call	0x8e68	; 0x8e68 <__floatsisf>
    6958:	9b 01       	movw	r18, r22
    695a:	ac 01       	movw	r20, r24
    695c:	c7 01       	movw	r24, r14
    695e:	b6 01       	movw	r22, r12
    6960:	0e 94 49 48 	call	0x9092	; 0x9092 <__mulsf3>
    6964:	7b 01       	movw	r14, r22
    6966:	8c 01       	movw	r16, r24
    6968:	68 85       	ldd	r22, Y+8	; 0x08
    696a:	79 85       	ldd	r23, Y+9	; 0x09
    696c:	6a 19       	sub	r22, r10
    696e:	7b 09       	sbc	r23, r11
    6970:	88 27       	eor	r24, r24
    6972:	77 fd       	sbrc	r23, 7
    6974:	80 95       	com	r24
    6976:	98 2f       	mov	r25, r24
    6978:	0e 94 34 47 	call	0x8e68	; 0x8e68 <__floatsisf>
    697c:	9b 01       	movw	r18, r22
    697e:	ac 01       	movw	r20, r24
    6980:	c8 01       	movw	r24, r16
    6982:	b7 01       	movw	r22, r14
    6984:	0e 94 99 46 	call	0x8d32	; 0x8d32 <__divsf3>
    6988:	0e 94 01 47 	call	0x8e02	; 0x8e02 <__fixsfsi>
    698c:	68 0d       	add	r22, r8
    698e:	79 1d       	adc	r23, r9
    6990:	52 cf       	rjmp	.-348    	; 0x6836 <getLeftSpeedFromInput+0x2da>
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    6992:	08 e0       	ldi	r16, 0x08	; 8
    6994:	10 e0       	ldi	r17, 0x00	; 0
    6996:	3e cf       	rjmp	.-388    	; 0x6814 <getLeftSpeedFromInput+0x2b8>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    6998:	07 e0       	ldi	r16, 0x07	; 7
    699a:	10 e0       	ldi	r17, 0x00	; 0
    699c:	2f cf       	rjmp	.-418    	; 0x67fc <getLeftSpeedFromInput+0x2a0>
    699e:	06 e0       	ldi	r16, 0x06	; 6
    69a0:	10 e0       	ldi	r17, 0x00	; 0
    69a2:	20 cf       	rjmp	.-448    	; 0x67e4 <getLeftSpeedFromInput+0x288>
    69a4:	05 e0       	ldi	r16, 0x05	; 5
    69a6:	10 e0       	ldi	r17, 0x00	; 0
    69a8:	11 cf       	rjmp	.-478    	; 0x67cc <getLeftSpeedFromInput+0x270>
    69aa:	04 e0       	ldi	r16, 0x04	; 4
    69ac:	10 e0       	ldi	r17, 0x00	; 0
    69ae:	02 cf       	rjmp	.-508    	; 0x67b4 <getLeftSpeedFromInput+0x258>
    69b0:	03 e0       	ldi	r16, 0x03	; 3
    69b2:	10 e0       	ldi	r17, 0x00	; 0
    69b4:	f3 ce       	rjmp	.-538    	; 0x679c <getLeftSpeedFromInput+0x240>
    69b6:	02 e0       	ldi	r16, 0x02	; 2
    69b8:	10 e0       	ldi	r17, 0x00	; 0
    69ba:	e4 ce       	rjmp	.-568    	; 0x6784 <getLeftSpeedFromInput+0x228>
        }
    } else {
		if(indBwL==0) {  // the velocity is lower than first saved in the matrix
        	speedLeftFromEnc = (last_left_vel*calibration[0][5])/calibration[0][4];
		} else if(indBwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][5]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][4]);  // take the max
    69bc:	60 91 28 08 	lds	r22, 0x0828
    69c0:	70 91 29 08 	lds	r23, 0x0829
    69c4:	88 27       	eor	r24, r24
    69c6:	77 fd       	sbrc	r23, 7
    69c8:	80 95       	com	r24
    69ca:	98 2f       	mov	r25, r24
    69cc:	0e 94 34 47 	call	0x8e68	; 0x8e68 <__floatsisf>
    69d0:	5b 01       	movw	r10, r22
    69d2:	6c 01       	movw	r12, r24
    69d4:	be 01       	movw	r22, r28
    69d6:	88 27       	eor	r24, r24
    69d8:	77 fd       	sbrc	r23, 7
    69da:	80 95       	com	r24
    69dc:	98 2f       	mov	r25, r24
    69de:	0e 94 34 47 	call	0x8e68	; 0x8e68 <__floatsisf>
    69e2:	9b 01       	movw	r18, r22
    69e4:	ac 01       	movw	r20, r24
    69e6:	c6 01       	movw	r24, r12
    69e8:	b5 01       	movw	r22, r10
    69ea:	0e 94 49 48 	call	0x9092	; 0x9092 <__mulsf3>
    69ee:	5b 01       	movw	r10, r22
    69f0:	6c 01       	movw	r12, r24
    69f2:	b7 01       	movw	r22, r14
    69f4:	88 27       	eor	r24, r24
    69f6:	77 fd       	sbrc	r23, 7
    69f8:	80 95       	com	r24
    69fa:	98 2f       	mov	r25, r24
    69fc:	0e 94 34 47 	call	0x8e68	; 0x8e68 <__floatsisf>
    6a00:	9b 01       	movw	r18, r22
    6a02:	ac 01       	movw	r20, r24
    6a04:	c6 01       	movw	r24, r12
    6a06:	b5 01       	movw	r22, r10
    6a08:	0e 94 99 46 	call	0x8d32	; 0x8d32 <__divsf3>
    6a0c:	0e 94 01 47 	call	0x8e02	; 0x8e02 <__fixsfsi>
    6a10:	12 cf       	rjmp	.-476    	; 0x6836 <getLeftSpeedFromInput+0x2da>

00006a12 <handleMotorsWithSpeedController>:
		OCR4B = 0;
	}

}

void handleMotorsWithSpeedController() {
    6a12:	2f 92       	push	r2
    6a14:	3f 92       	push	r3
    6a16:	4f 92       	push	r4
    6a18:	5f 92       	push	r5
    6a1a:	6f 92       	push	r6
    6a1c:	7f 92       	push	r7
    6a1e:	8f 92       	push	r8
    6a20:	9f 92       	push	r9
    6a22:	af 92       	push	r10
    6a24:	bf 92       	push	r11
    6a26:	cf 92       	push	r12
    6a28:	df 92       	push	r13
    6a2a:	ef 92       	push	r14
    6a2c:	ff 92       	push	r15
    6a2e:	0f 93       	push	r16
    6a30:	1f 93       	push	r17

	if(calibrateOdomFlag==1) {
    6a32:	80 91 e0 04 	lds	r24, 0x04E0
    6a36:	81 30       	cpi	r24, 0x01	; 1
    6a38:	09 f4       	brne	.+2      	; 0x6a3c <handleMotorsWithSpeedController+0x2a>
    6a3a:	28 c2       	rjmp	.+1104   	; 0x6e8c <handleMotorsWithSpeedController+0x47a>
		pwm_right_working = pwm_intermediate_right_desired;
		pwm_left_working = pwm_intermediate_left_desired;
	} else {
		if(pwm_intermediate_right_desired >= 0) {		// pwm in the range -127..127
    6a3c:	80 91 cd 02 	lds	r24, 0x02CD
    6a40:	90 91 ce 02 	lds	r25, 0x02CE
    6a44:	97 fd       	sbrc	r25, 7
    6a46:	9a c2       	rjmp	.+1332   	; 0x6f7c <handleMotorsWithSpeedController+0x56a>
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_FW_SC);
    6a48:	61 e0       	ldi	r22, 0x01	; 1
    6a4a:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <getInputFromSpeed>
    6a4e:	90 93 de 02 	sts	0x02DE, r25
    6a52:	80 93 dd 02 	sts	0x02DD, r24
		} else {
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_BW_SC);
		}
		if(pwm_intermediate_left_desired >= 0) {		// pwm in the range -127..127
    6a56:	80 91 cf 02 	lds	r24, 0x02CF
    6a5a:	90 91 d0 02 	lds	r25, 0x02D0
    6a5e:	97 fd       	sbrc	r25, 7
    6a60:	85 c2       	rjmp	.+1290   	; 0x6f6c <handleMotorsWithSpeedController+0x55a>
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_FW_SC);
    6a62:	60 e0       	ldi	r22, 0x00	; 0
    6a64:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <getInputFromSpeed>
    6a68:	90 93 e0 02 	sts	0x02E0, r25
    6a6c:	80 93 df 02 	sts	0x02DF, r24
		} else {
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_BW_SC);
		}
	}

	if(obstacleAvoidanceEnabled) {
    6a70:	20 91 3a 04 	lds	r18, 0x043A
    6a74:	22 23       	and	r18, r18
    6a76:	09 f0       	breq	.+2      	; 0x6a7a <handleMotorsWithSpeedController+0x68>
    6a78:	fe c1       	rjmp	.+1020   	; 0x6e76 <handleMotorsWithSpeedController+0x464>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
	}
	pwm_left_desired_to_control = pwm_left_working;
    6a7a:	90 93 bc 02 	sts	0x02BC, r25
    6a7e:	80 93 bb 02 	sts	0x02BB, r24
	pwm_right_desired_to_control = pwm_right_working;
    6a82:	80 91 dd 02 	lds	r24, 0x02DD
    6a86:	90 91 de 02 	lds	r25, 0x02DE
    6a8a:	90 93 ba 02 	sts	0x02BA, r25
    6a8e:	80 93 b9 02 	sts	0x02B9, r24

	if(compute_left_vel) {
    6a92:	80 91 07 02 	lds	r24, 0x0207
    6a96:	88 23       	and	r24, r24
    6a98:	09 f4       	brne	.+2      	; 0x6a9c <handleMotorsWithSpeedController+0x8a>
    6a9a:	93 c0       	rjmp	.+294    	; 0x6bc2 <handleMotorsWithSpeedController+0x1b0>

		last_left_vel = left_vel_sum>>2;
    6a9c:	20 91 bd 02 	lds	r18, 0x02BD
    6aa0:	30 91 be 02 	lds	r19, 0x02BE
    6aa4:	36 95       	lsr	r19
    6aa6:	27 95       	ror	r18
    6aa8:	36 95       	lsr	r19
    6aaa:	27 95       	ror	r18
    6aac:	30 93 c2 02 	sts	0x02C2, r19
    6ab0:	20 93 c1 02 	sts	0x02C1, r18
		compute_left_vel = 0;
    6ab4:	10 92 07 02 	sts	0x0207, r1
		left_vel_sum = 0;
    6ab8:	10 92 be 02 	sts	0x02BE, r1
    6abc:	10 92 bd 02 	sts	0x02BD, r1
		
		if(calibrateOdomFlag==1) {
    6ac0:	80 91 e0 04 	lds	r24, 0x04E0
    6ac4:	81 30       	cpi	r24, 0x01	; 1
    6ac6:	09 f4       	brne	.+2      	; 0x6aca <handleMotorsWithSpeedController+0xb8>
    6ac8:	08 c2       	rjmp	.+1040   	; 0x6eda <handleMotorsWithSpeedController+0x4c8>
			leftSpeedSumOdom += last_left_vel;
			leftSumCount++;
		}

		getLeftSpeedFromInput();	// get speed in mm/s
    6aca:	0e 94 ae 32 	call	0x655c	; 0x655c <getLeftSpeedFromInput>
		leftDistPrev = leftDist;
    6ace:	80 91 61 04 	lds	r24, 0x0461
    6ad2:	90 91 62 04 	lds	r25, 0x0462
    6ad6:	a0 91 63 04 	lds	r26, 0x0463
    6ada:	b0 91 64 04 	lds	r27, 0x0464
    6ade:	80 93 69 04 	sts	0x0469, r24
    6ae2:	90 93 6a 04 	sts	0x046A, r25
    6ae6:	a0 93 6b 04 	sts	0x046B, r26
    6aea:	b0 93 6c 04 	sts	0x046C, r27
		//timeOdometry = getTime100MicroSec()-timeLeftOdom;
		leftDist += ((float)speedLeftFromEnc*((float)(getTime100MicroSec()-timeLeftOdom)*104.0))/1000000.0;	// distance in mm				
    6aee:	60 91 86 04 	lds	r22, 0x0486
    6af2:	70 91 87 04 	lds	r23, 0x0487
    6af6:	88 27       	eor	r24, r24
    6af8:	77 fd       	sbrc	r23, 7
    6afa:	80 95       	com	r24
    6afc:	98 2f       	mov	r25, r24
    6afe:	0e 94 34 47 	call	0x8e68	; 0x8e68 <__floatsisf>
    6b02:	7b 01       	movw	r14, r22
    6b04:	8c 01       	movw	r16, r24
    6b06:	0e 94 d7 21 	call	0x43ae	; 0x43ae <getTime100MicroSec>
    6b0a:	20 91 8a 04 	lds	r18, 0x048A
    6b0e:	30 91 8b 04 	lds	r19, 0x048B
    6b12:	40 91 8c 04 	lds	r20, 0x048C
    6b16:	50 91 8d 04 	lds	r21, 0x048D
    6b1a:	62 1b       	sub	r22, r18
    6b1c:	73 0b       	sbc	r23, r19
    6b1e:	84 0b       	sbc	r24, r20
    6b20:	95 0b       	sbc	r25, r21
    6b22:	0e 94 32 47 	call	0x8e64	; 0x8e64 <__floatunsisf>
    6b26:	20 e0       	ldi	r18, 0x00	; 0
    6b28:	30 e0       	ldi	r19, 0x00	; 0
    6b2a:	40 ed       	ldi	r20, 0xD0	; 208
    6b2c:	52 e4       	ldi	r21, 0x42	; 66
    6b2e:	0e 94 49 48 	call	0x9092	; 0x9092 <__mulsf3>
    6b32:	9b 01       	movw	r18, r22
    6b34:	ac 01       	movw	r20, r24
    6b36:	c8 01       	movw	r24, r16
    6b38:	b7 01       	movw	r22, r14
    6b3a:	0e 94 49 48 	call	0x9092	; 0x9092 <__mulsf3>
    6b3e:	20 e0       	ldi	r18, 0x00	; 0
    6b40:	34 e2       	ldi	r19, 0x24	; 36
    6b42:	44 e7       	ldi	r20, 0x74	; 116
    6b44:	59 e4       	ldi	r21, 0x49	; 73
    6b46:	0e 94 99 46 	call	0x8d32	; 0x8d32 <__divsf3>
    6b4a:	9b 01       	movw	r18, r22
    6b4c:	ac 01       	movw	r20, r24
    6b4e:	60 91 61 04 	lds	r22, 0x0461
    6b52:	70 91 62 04 	lds	r23, 0x0462
    6b56:	80 91 63 04 	lds	r24, 0x0463
    6b5a:	90 91 64 04 	lds	r25, 0x0464
    6b5e:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <__addsf3>
    6b62:	60 93 61 04 	sts	0x0461, r22
    6b66:	70 93 62 04 	sts	0x0462, r23
    6b6a:	80 93 63 04 	sts	0x0463, r24
    6b6e:	90 93 64 04 	sts	0x0464, r25
		timeLeftOdom = getTime100MicroSec();
    6b72:	0e 94 d7 21 	call	0x43ae	; 0x43ae <getTime100MicroSec>
    6b76:	60 93 8a 04 	sts	0x048A, r22
    6b7a:	70 93 8b 04 	sts	0x048B, r23
    6b7e:	80 93 8c 04 	sts	0x048C, r24
    6b82:	90 93 8d 04 	sts	0x048D, r25
		} else {
			leftMotSteps -= ((float)(last_left_vel>>3))*(LEFT_ENC_OFFSET-ENC_SLOPE*((float)(last_left_vel>>2)))/1000.0;
		}

*/
		if(robotPosition == HORIZONTAL_POS) {
    6b86:	80 91 16 02 	lds	r24, 0x0216
    6b8a:	81 30       	cpi	r24, 0x01	; 1
    6b8c:	09 f4       	brne	.+2      	; 0x6b90 <handleMotorsWithSpeedController+0x17e>
    6b8e:	c7 c1       	rjmp	.+910    	; 0x6f1e <handleMotorsWithSpeedController+0x50c>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_left(&pwm_left_working);
			//PORTB |= (1 << 5);
		} else {
			//PORTB &= ~(1 << 6);
			start_vertical_speed_control_left(&pwm_left_working);
    6b90:	8f ed       	ldi	r24, 0xDF	; 223
    6b92:	92 e0       	ldi	r25, 0x02	; 2
    6b94:	0e 94 00 19 	call	0x3200	; 0x3200 <start_vertical_speed_control_left>
			//PORTB |= (1 << 6);
		}

		pwm_left = pwm_left_working;
    6b98:	80 91 df 02 	lds	r24, 0x02DF
    6b9c:	90 91 e0 02 	lds	r25, 0x02E0
    6ba0:	90 93 c8 02 	sts	0x02C8, r25
    6ba4:	80 93 c7 02 	sts	0x02C7, r24

		if(pwm_left > 0) {
    6ba8:	18 16       	cp	r1, r24
    6baa:	19 06       	cpc	r1, r25
    6bac:	0c f0       	brlt	.+2      	; 0x6bb0 <handleMotorsWithSpeedController+0x19e>
    6bae:	f9 c1       	rjmp	.+1010   	; 0x6fa2 <handleMotorsWithSpeedController+0x590>
			OCR4A = (unsigned int)pwm_left;
    6bb0:	90 93 a9 00 	sts	0x00A9, r25
    6bb4:	80 93 a8 00 	sts	0x00A8, r24
		} else {
			OCR4A = 0;
			OCR4B = 0;
		}

		computeOdometry++;
    6bb8:	80 91 71 04 	lds	r24, 0x0471
    6bbc:	8f 5f       	subi	r24, 0xFF	; 255
    6bbe:	80 93 71 04 	sts	0x0471, r24

	}

	if(compute_right_vel) {
    6bc2:	80 91 08 02 	lds	r24, 0x0208
    6bc6:	88 23       	and	r24, r24
    6bc8:	09 f0       	breq	.+2      	; 0x6bcc <handleMotorsWithSpeedController+0x1ba>
    6bca:	c1 c0       	rjmp	.+386    	; 0x6d4e <handleMotorsWithSpeedController+0x33c>
    6bcc:	80 91 71 04 	lds	r24, 0x0471

		computeOdometry++;

	}

	if(computeOdometry>=2) {	// compute odometry when we get the last encoders values for both wheels
    6bd0:	82 30       	cpi	r24, 0x02	; 2
    6bd2:	08 f4       	brcc	.+2      	; 0x6bd6 <handleMotorsWithSpeedController+0x1c4>
    6bd4:	ab c0       	rjmp	.+342    	; 0x6d2c <handleMotorsWithSpeedController+0x31a>

		// the odometry computation takes about 1 ms

		computeOdometry = 0;
    6bd6:	10 92 71 04 	sts	0x0471, r1

		deltaDist = ((rightDist-rightDistPrev)+(leftDist-leftDistPrev))/2.0;
    6bda:	60 90 65 04 	lds	r6, 0x0465
    6bde:	70 90 66 04 	lds	r7, 0x0466
    6be2:	80 90 67 04 	lds	r8, 0x0467
    6be6:	90 90 68 04 	lds	r9, 0x0468
    6bea:	20 90 61 04 	lds	r2, 0x0461
    6bee:	30 90 62 04 	lds	r3, 0x0462
    6bf2:	40 90 63 04 	lds	r4, 0x0463
    6bf6:	50 90 64 04 	lds	r5, 0x0464
    6bfa:	c4 01       	movw	r24, r8
    6bfc:	b3 01       	movw	r22, r6
    6bfe:	20 91 6d 04 	lds	r18, 0x046D
    6c02:	30 91 6e 04 	lds	r19, 0x046E
    6c06:	40 91 6f 04 	lds	r20, 0x046F
    6c0a:	50 91 70 04 	lds	r21, 0x0470
    6c0e:	0e 94 cb 45 	call	0x8b96	; 0x8b96 <__subsf3>
    6c12:	7b 01       	movw	r14, r22
    6c14:	8c 01       	movw	r16, r24
    6c16:	c2 01       	movw	r24, r4
    6c18:	b1 01       	movw	r22, r2
    6c1a:	20 91 69 04 	lds	r18, 0x0469
    6c1e:	30 91 6a 04 	lds	r19, 0x046A
    6c22:	40 91 6b 04 	lds	r20, 0x046B
    6c26:	50 91 6c 04 	lds	r21, 0x046C
    6c2a:	0e 94 cb 45 	call	0x8b96	; 0x8b96 <__subsf3>
    6c2e:	9b 01       	movw	r18, r22
    6c30:	ac 01       	movw	r20, r24
    6c32:	c8 01       	movw	r24, r16
    6c34:	b7 01       	movw	r22, r14
    6c36:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <__addsf3>
    6c3a:	20 e0       	ldi	r18, 0x00	; 0
    6c3c:	30 e0       	ldi	r19, 0x00	; 0
    6c3e:	40 e0       	ldi	r20, 0x00	; 0
    6c40:	5f e3       	ldi	r21, 0x3F	; 63
    6c42:	0e 94 49 48 	call	0x9092	; 0x9092 <__mulsf3>
    6c46:	d6 2e       	mov	r13, r22
    6c48:	c7 2e       	mov	r12, r23
    6c4a:	b8 2e       	mov	r11, r24
    6c4c:	a9 2e       	mov	r10, r25
    6c4e:	a6 01       	movw	r20, r12
    6c50:	95 01       	movw	r18, r10
    6c52:	85 2f       	mov	r24, r21
    6c54:	94 2f       	mov	r25, r20
    6c56:	a3 2f       	mov	r26, r19
    6c58:	b2 2f       	mov	r27, r18
    6c5a:	80 93 4d 04 	sts	0x044D, r24
    6c5e:	90 93 4e 04 	sts	0x044E, r25
    6c62:	a0 93 4f 04 	sts	0x044F, r26
    6c66:	b0 93 50 04 	sts	0x0450, r27

		if(robotPosition == HORIZONTAL_POS) {
    6c6a:	80 91 16 02 	lds	r24, 0x0216
    6c6e:	81 30       	cpi	r24, 0x01	; 1
    6c70:	09 f4       	brne	.+2      	; 0x6c74 <handleMotorsWithSpeedController+0x262>
    6c72:	1d c1       	rjmp	.+570    	; 0x6eae <handleMotorsWithSpeedController+0x49c>
			//thetaOld = (rightMotSteps - leftMotSteps)/WHEEL_DIST;	// radians
			theta = (rightDist-leftDist)/WHEEL_DIST;
		} else {
			//thetaOld = thetaAcc;
			theta = thetaAcc;
    6c74:	f0 90 72 04 	lds	r15, 0x0472
    6c78:	00 91 73 04 	lds	r16, 0x0473
    6c7c:	10 91 74 04 	lds	r17, 0x0474
    6c80:	e0 90 75 04 	lds	r14, 0x0475
    6c84:	8f 2d       	mov	r24, r15
    6c86:	90 2f       	mov	r25, r16
    6c88:	a1 2f       	mov	r26, r17
    6c8a:	be 2d       	mov	r27, r14
    6c8c:	80 93 3d 04 	sts	0x043D, r24
    6c90:	90 93 3e 04 	sts	0x043E, r25
    6c94:	a0 93 3f 04 	sts	0x043F, r26
    6c98:	b0 93 40 04 	sts	0x0440, r27
		}

		//deltaDistOld = ((rightMotSteps-rightMotStepsOld)+(leftMotSteps-leftMotStepsOld))/2.0;

		xPos = xPos + cos(theta)*deltaDist;				
    6c9c:	6f 2d       	mov	r22, r15
    6c9e:	70 2f       	mov	r23, r16
    6ca0:	81 2f       	mov	r24, r17
    6ca2:	9e 2d       	mov	r25, r14
    6ca4:	0e 94 96 46 	call	0x8d2c	; 0x8d2c <cos>
    6ca8:	9b 01       	movw	r18, r22
    6caa:	ac 01       	movw	r20, r24
    6cac:	d6 01       	movw	r26, r12
    6cae:	f5 01       	movw	r30, r10
    6cb0:	6b 2f       	mov	r22, r27
    6cb2:	7c 2d       	mov	r23, r12
    6cb4:	8f 2f       	mov	r24, r31
    6cb6:	9a 2d       	mov	r25, r10
    6cb8:	0e 94 49 48 	call	0x9092	; 0x9092 <__mulsf3>
    6cbc:	9b 01       	movw	r18, r22
    6cbe:	ac 01       	movw	r20, r24
    6cc0:	60 91 45 04 	lds	r22, 0x0445
    6cc4:	70 91 46 04 	lds	r23, 0x0446
    6cc8:	80 91 47 04 	lds	r24, 0x0447
    6ccc:	90 91 48 04 	lds	r25, 0x0448
    6cd0:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <__addsf3>
    6cd4:	60 93 45 04 	sts	0x0445, r22
    6cd8:	70 93 46 04 	sts	0x0446, r23
    6cdc:	80 93 47 04 	sts	0x0447, r24
    6ce0:	90 93 48 04 	sts	0x0448, r25
		yPos = yPos + sin(theta)*deltaDist;
    6ce4:	6f 2d       	mov	r22, r15
    6ce6:	70 2f       	mov	r23, r16
    6ce8:	81 2f       	mov	r24, r17
    6cea:	9e 2d       	mov	r25, r14
    6cec:	0e 94 ac 48 	call	0x9158	; 0x9158 <sin>
    6cf0:	9b 01       	movw	r18, r22
    6cf2:	ac 01       	movw	r20, r24
    6cf4:	d6 01       	movw	r26, r12
    6cf6:	f5 01       	movw	r30, r10
    6cf8:	6b 2f       	mov	r22, r27
    6cfa:	7c 2d       	mov	r23, r12
    6cfc:	8f 2f       	mov	r24, r31
    6cfe:	9a 2d       	mov	r25, r10
    6d00:	0e 94 49 48 	call	0x9092	; 0x9092 <__mulsf3>
    6d04:	9b 01       	movw	r18, r22
    6d06:	ac 01       	movw	r20, r24
    6d08:	60 91 49 04 	lds	r22, 0x0449
    6d0c:	70 91 4a 04 	lds	r23, 0x044A
    6d10:	80 91 4b 04 	lds	r24, 0x044B
    6d14:	90 91 4c 04 	lds	r25, 0x044C
    6d18:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <__addsf3>
    6d1c:	60 93 49 04 	sts	0x0449, r22
    6d20:	70 93 4a 04 	sts	0x044A, r23
    6d24:	80 93 4b 04 	sts	0x044B, r24
    6d28:	90 93 4c 04 	sts	0x044C, r25
		//xPosOld = xPosOld + cos(thetaOld)*deltaDistOld;				
		//yPosOld = yPosOld + sin(thetaOld)*deltaDistOld;

	}

}
    6d2c:	1f 91       	pop	r17
    6d2e:	0f 91       	pop	r16
    6d30:	ff 90       	pop	r15
    6d32:	ef 90       	pop	r14
    6d34:	df 90       	pop	r13
    6d36:	cf 90       	pop	r12
    6d38:	bf 90       	pop	r11
    6d3a:	af 90       	pop	r10
    6d3c:	9f 90       	pop	r9
    6d3e:	8f 90       	pop	r8
    6d40:	7f 90       	pop	r7
    6d42:	6f 90       	pop	r6
    6d44:	5f 90       	pop	r5
    6d46:	4f 90       	pop	r4
    6d48:	3f 90       	pop	r3
    6d4a:	2f 90       	pop	r2
    6d4c:	08 95       	ret

	}

	if(compute_right_vel) {

		last_right_vel = right_vel_sum>>2;
    6d4e:	20 91 bf 02 	lds	r18, 0x02BF
    6d52:	30 91 c0 02 	lds	r19, 0x02C0
    6d56:	36 95       	lsr	r19
    6d58:	27 95       	ror	r18
    6d5a:	36 95       	lsr	r19
    6d5c:	27 95       	ror	r18
    6d5e:	30 93 c4 02 	sts	0x02C4, r19
    6d62:	20 93 c3 02 	sts	0x02C3, r18
		compute_right_vel = 0;
    6d66:	10 92 08 02 	sts	0x0208, r1
		right_vel_sum = 0;
    6d6a:	10 92 c0 02 	sts	0x02C0, r1
    6d6e:	10 92 bf 02 	sts	0x02BF, r1

		if(calibrateOdomFlag==1) {
    6d72:	80 91 e0 04 	lds	r24, 0x04E0
    6d76:	81 30       	cpi	r24, 0x01	; 1
    6d78:	09 f4       	brne	.+2      	; 0x6d7c <handleMotorsWithSpeedController+0x36a>
    6d7a:	d6 c0       	rjmp	.+428    	; 0x6f28 <handleMotorsWithSpeedController+0x516>
			rightSpeedSumOdom += last_right_vel;
			rightSumCount++;
		}

		getRightSpeedFromInput();
    6d7c:	0e 94 53 30 	call	0x60a6	; 0x60a6 <getRightSpeedFromInput>
		rightDistPrev = rightDist;
    6d80:	80 91 65 04 	lds	r24, 0x0465
    6d84:	90 91 66 04 	lds	r25, 0x0466
    6d88:	a0 91 67 04 	lds	r26, 0x0467
    6d8c:	b0 91 68 04 	lds	r27, 0x0468
    6d90:	80 93 6d 04 	sts	0x046D, r24
    6d94:	90 93 6e 04 	sts	0x046E, r25
    6d98:	a0 93 6f 04 	sts	0x046F, r26
    6d9c:	b0 93 70 04 	sts	0x0470, r27
		rightDist += ((float)speedRightFromEnc*((float)(getTime100MicroSec()-timeRightOdom)*104.0))/1000000.0;	// distance in mm				
    6da0:	60 91 88 04 	lds	r22, 0x0488
    6da4:	70 91 89 04 	lds	r23, 0x0489
    6da8:	88 27       	eor	r24, r24
    6daa:	77 fd       	sbrc	r23, 7
    6dac:	80 95       	com	r24
    6dae:	98 2f       	mov	r25, r24
    6db0:	0e 94 34 47 	call	0x8e68	; 0x8e68 <__floatsisf>
    6db4:	7b 01       	movw	r14, r22
    6db6:	8c 01       	movw	r16, r24
    6db8:	0e 94 d7 21 	call	0x43ae	; 0x43ae <getTime100MicroSec>
    6dbc:	20 91 8e 04 	lds	r18, 0x048E
    6dc0:	30 91 8f 04 	lds	r19, 0x048F
    6dc4:	40 91 90 04 	lds	r20, 0x0490
    6dc8:	50 91 91 04 	lds	r21, 0x0491
    6dcc:	62 1b       	sub	r22, r18
    6dce:	73 0b       	sbc	r23, r19
    6dd0:	84 0b       	sbc	r24, r20
    6dd2:	95 0b       	sbc	r25, r21
    6dd4:	0e 94 32 47 	call	0x8e64	; 0x8e64 <__floatunsisf>
    6dd8:	20 e0       	ldi	r18, 0x00	; 0
    6dda:	30 e0       	ldi	r19, 0x00	; 0
    6ddc:	40 ed       	ldi	r20, 0xD0	; 208
    6dde:	52 e4       	ldi	r21, 0x42	; 66
    6de0:	0e 94 49 48 	call	0x9092	; 0x9092 <__mulsf3>
    6de4:	9b 01       	movw	r18, r22
    6de6:	ac 01       	movw	r20, r24
    6de8:	c8 01       	movw	r24, r16
    6dea:	b7 01       	movw	r22, r14
    6dec:	0e 94 49 48 	call	0x9092	; 0x9092 <__mulsf3>
    6df0:	20 e0       	ldi	r18, 0x00	; 0
    6df2:	34 e2       	ldi	r19, 0x24	; 36
    6df4:	44 e7       	ldi	r20, 0x74	; 116
    6df6:	59 e4       	ldi	r21, 0x49	; 73
    6df8:	0e 94 99 46 	call	0x8d32	; 0x8d32 <__divsf3>
    6dfc:	9b 01       	movw	r18, r22
    6dfe:	ac 01       	movw	r20, r24
    6e00:	60 91 65 04 	lds	r22, 0x0465
    6e04:	70 91 66 04 	lds	r23, 0x0466
    6e08:	80 91 67 04 	lds	r24, 0x0467
    6e0c:	90 91 68 04 	lds	r25, 0x0468
    6e10:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <__addsf3>
    6e14:	60 93 65 04 	sts	0x0465, r22
    6e18:	70 93 66 04 	sts	0x0466, r23
    6e1c:	80 93 67 04 	sts	0x0467, r24
    6e20:	90 93 68 04 	sts	0x0468, r25
		timeRightOdom = getTime100MicroSec();
    6e24:	0e 94 d7 21 	call	0x43ae	; 0x43ae <getTime100MicroSec>
    6e28:	60 93 8e 04 	sts	0x048E, r22
    6e2c:	70 93 8f 04 	sts	0x048F, r23
    6e30:	80 93 90 04 	sts	0x0490, r24
    6e34:	90 93 91 04 	sts	0x0491, r25
		} else {
			rightMotSteps -= ((float)(last_right_vel>>3))*(RIGHT_ENC_OFFSET-ENC_SLOPE*((float)(last_right_vel>>2)))/1000.0;
		}
*/

		if(robotPosition == HORIZONTAL_POS) {
    6e38:	80 91 16 02 	lds	r24, 0x0216
    6e3c:	81 30       	cpi	r24, 0x01	; 1
    6e3e:	09 f4       	brne	.+2      	; 0x6e42 <handleMotorsWithSpeedController+0x430>
    6e40:	47 c0       	rjmp	.+142    	; 0x6ed0 <handleMotorsWithSpeedController+0x4be>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_right(&pwm_right_working);
			//PORTB |= (1 << 5);
		} else {
			//PORTB &= ~(1 << 6);
			start_vertical_speed_control_right(&pwm_right_working);
    6e42:	8d ed       	ldi	r24, 0xDD	; 221
    6e44:	92 e0       	ldi	r25, 0x02	; 2
    6e46:	0e 94 9e 1a 	call	0x353c	; 0x353c <start_vertical_speed_control_right>
			//PORTB |= (1 << 6);
		}

		pwm_right = pwm_right_working;
    6e4a:	80 91 dd 02 	lds	r24, 0x02DD
    6e4e:	90 91 de 02 	lds	r25, 0x02DE
    6e52:	90 93 c6 02 	sts	0x02C6, r25
    6e56:	80 93 c5 02 	sts	0x02C5, r24

		if(pwm_right > 0) {
    6e5a:	18 16       	cp	r1, r24
    6e5c:	19 06       	cpc	r1, r25
    6e5e:	0c f0       	brlt	.+2      	; 0x6e62 <handleMotorsWithSpeedController+0x450>
    6e60:	95 c0       	rjmp	.+298    	; 0x6f8c <handleMotorsWithSpeedController+0x57a>
			OCR3A = (unsigned int)pwm_right;
    6e62:	90 93 99 00 	sts	0x0099, r25
    6e66:	80 93 98 00 	sts	0x0098, r24
		} else {
			OCR3A = 0;
			OCR3B = 0;
		}

		computeOdometry++;
    6e6a:	80 91 71 04 	lds	r24, 0x0471
    6e6e:	8f 5f       	subi	r24, 0xFF	; 255
    6e70:	80 93 71 04 	sts	0x0471, r24
    6e74:	ad ce       	rjmp	.-678    	; 0x6bd0 <handleMotorsWithSpeedController+0x1be>
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_BW_SC);
		}
	}

	if(obstacleAvoidanceEnabled) {
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
    6e76:	8f ed       	ldi	r24, 0xDF	; 223
    6e78:	92 e0       	ldi	r25, 0x02	; 2
    6e7a:	6d ed       	ldi	r22, 0xDD	; 221
    6e7c:	72 e0       	ldi	r23, 0x02	; 2
    6e7e:	0e 94 3e 3b 	call	0x767c	; 0x767c <obstacleAvoidance>
    6e82:	80 91 df 02 	lds	r24, 0x02DF
    6e86:	90 91 e0 02 	lds	r25, 0x02E0
    6e8a:	f7 cd       	rjmp	.-1042   	; 0x6a7a <handleMotorsWithSpeedController+0x68>
}

void handleMotorsWithSpeedController() {

	if(calibrateOdomFlag==1) {
		pwm_right_working = pwm_intermediate_right_desired;
    6e8c:	80 91 cd 02 	lds	r24, 0x02CD
    6e90:	90 91 ce 02 	lds	r25, 0x02CE
    6e94:	90 93 de 02 	sts	0x02DE, r25
    6e98:	80 93 dd 02 	sts	0x02DD, r24
		pwm_left_working = pwm_intermediate_left_desired;
    6e9c:	80 91 cf 02 	lds	r24, 0x02CF
    6ea0:	90 91 d0 02 	lds	r25, 0x02D0
    6ea4:	90 93 e0 02 	sts	0x02E0, r25
    6ea8:	80 93 df 02 	sts	0x02DF, r24
    6eac:	e1 cd       	rjmp	.-1086   	; 0x6a70 <handleMotorsWithSpeedController+0x5e>

		deltaDist = ((rightDist-rightDistPrev)+(leftDist-leftDistPrev))/2.0;

		if(robotPosition == HORIZONTAL_POS) {
			//thetaOld = (rightMotSteps - leftMotSteps)/WHEEL_DIST;	// radians
			theta = (rightDist-leftDist)/WHEEL_DIST;
    6eae:	c4 01       	movw	r24, r8
    6eb0:	b3 01       	movw	r22, r6
    6eb2:	a2 01       	movw	r20, r4
    6eb4:	91 01       	movw	r18, r2
    6eb6:	0e 94 cb 45 	call	0x8b96	; 0x8b96 <__subsf3>
    6eba:	20 e0       	ldi	r18, 0x00	; 0
    6ebc:	30 e0       	ldi	r19, 0x00	; 0
    6ebe:	4e e1       	ldi	r20, 0x1E	; 30
    6ec0:	52 e4       	ldi	r21, 0x42	; 66
    6ec2:	0e 94 99 46 	call	0x8d32	; 0x8d32 <__divsf3>
    6ec6:	f6 2e       	mov	r15, r22
    6ec8:	07 2f       	mov	r16, r23
    6eca:	18 2f       	mov	r17, r24
    6ecc:	e9 2e       	mov	r14, r25
    6ece:	da ce       	rjmp	.-588    	; 0x6c84 <handleMotorsWithSpeedController+0x272>
		}
*/

		if(robotPosition == HORIZONTAL_POS) {
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_right(&pwm_right_working);
    6ed0:	8d ed       	ldi	r24, 0xDD	; 221
    6ed2:	92 e0       	ldi	r25, 0x02	; 2
    6ed4:	0e 94 3c 1c 	call	0x3878	; 0x3878 <start_horizontal_speed_control_right>
    6ed8:	b8 cf       	rjmp	.-144    	; 0x6e4a <handleMotorsWithSpeedController+0x438>
		last_left_vel = left_vel_sum>>2;
		compute_left_vel = 0;
		left_vel_sum = 0;
		
		if(calibrateOdomFlag==1) {
			leftSpeedSumOdom += last_left_vel;
    6eda:	44 27       	eor	r20, r20
    6edc:	37 fd       	sbrc	r19, 7
    6ede:	40 95       	com	r20
    6ee0:	54 2f       	mov	r21, r20
    6ee2:	80 91 76 04 	lds	r24, 0x0476
    6ee6:	90 91 77 04 	lds	r25, 0x0477
    6eea:	a0 91 78 04 	lds	r26, 0x0478
    6eee:	b0 91 79 04 	lds	r27, 0x0479
    6ef2:	82 0f       	add	r24, r18
    6ef4:	93 1f       	adc	r25, r19
    6ef6:	a4 1f       	adc	r26, r20
    6ef8:	b5 1f       	adc	r27, r21
    6efa:	80 93 76 04 	sts	0x0476, r24
    6efe:	90 93 77 04 	sts	0x0477, r25
    6f02:	a0 93 78 04 	sts	0x0478, r26
    6f06:	b0 93 79 04 	sts	0x0479, r27
			leftSumCount++;
    6f0a:	80 91 7e 04 	lds	r24, 0x047E
    6f0e:	90 91 7f 04 	lds	r25, 0x047F
    6f12:	01 96       	adiw	r24, 0x01	; 1
    6f14:	90 93 7f 04 	sts	0x047F, r25
    6f18:	80 93 7e 04 	sts	0x047E, r24
    6f1c:	d6 cd       	rjmp	.-1108   	; 0x6aca <handleMotorsWithSpeedController+0xb8>
		}

*/
		if(robotPosition == HORIZONTAL_POS) {
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_left(&pwm_left_working);
    6f1e:	8f ed       	ldi	r24, 0xDF	; 223
    6f20:	92 e0       	ldi	r25, 0x02	; 2
    6f22:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <start_horizontal_speed_control_left>
    6f26:	38 ce       	rjmp	.-912    	; 0x6b98 <handleMotorsWithSpeedController+0x186>
		last_right_vel = right_vel_sum>>2;
		compute_right_vel = 0;
		right_vel_sum = 0;

		if(calibrateOdomFlag==1) {
			rightSpeedSumOdom += last_right_vel;
    6f28:	44 27       	eor	r20, r20
    6f2a:	37 fd       	sbrc	r19, 7
    6f2c:	40 95       	com	r20
    6f2e:	54 2f       	mov	r21, r20
    6f30:	80 91 7a 04 	lds	r24, 0x047A
    6f34:	90 91 7b 04 	lds	r25, 0x047B
    6f38:	a0 91 7c 04 	lds	r26, 0x047C
    6f3c:	b0 91 7d 04 	lds	r27, 0x047D
    6f40:	82 0f       	add	r24, r18
    6f42:	93 1f       	adc	r25, r19
    6f44:	a4 1f       	adc	r26, r20
    6f46:	b5 1f       	adc	r27, r21
    6f48:	80 93 7a 04 	sts	0x047A, r24
    6f4c:	90 93 7b 04 	sts	0x047B, r25
    6f50:	a0 93 7c 04 	sts	0x047C, r26
    6f54:	b0 93 7d 04 	sts	0x047D, r27
			rightSumCount++;
    6f58:	80 91 80 04 	lds	r24, 0x0480
    6f5c:	90 91 81 04 	lds	r25, 0x0481
    6f60:	01 96       	adiw	r24, 0x01	; 1
    6f62:	90 93 81 04 	sts	0x0481, r25
    6f66:	80 93 80 04 	sts	0x0480, r24
    6f6a:	08 cf       	rjmp	.-496    	; 0x6d7c <handleMotorsWithSpeedController+0x36a>
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_BW_SC);
		}
		if(pwm_intermediate_left_desired >= 0) {		// pwm in the range -127..127
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_FW_SC);
		} else {
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_BW_SC);
    6f6c:	62 e0       	ldi	r22, 0x02	; 2
    6f6e:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <getInputFromSpeed>
    6f72:	90 93 e0 02 	sts	0x02E0, r25
    6f76:	80 93 df 02 	sts	0x02DF, r24
    6f7a:	7a cd       	rjmp	.-1292   	; 0x6a70 <handleMotorsWithSpeedController+0x5e>
		pwm_left_working = pwm_intermediate_left_desired;
	} else {
		if(pwm_intermediate_right_desired >= 0) {		// pwm in the range -127..127
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_FW_SC);
		} else {
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_BW_SC);
    6f7c:	63 e0       	ldi	r22, 0x03	; 3
    6f7e:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <getInputFromSpeed>
    6f82:	90 93 de 02 	sts	0x02DE, r25
    6f86:	80 93 dd 02 	sts	0x02DD, r24
    6f8a:	65 cd       	rjmp	.-1334   	; 0x6a56 <handleMotorsWithSpeedController+0x44>

		pwm_right = pwm_right_working;

		if(pwm_right > 0) {
			OCR3A = (unsigned int)pwm_right;
		} else if(pwm_right < 0) {
    6f8c:	00 97       	sbiw	r24, 0x00	; 0
    6f8e:	a1 f4       	brne	.+40     	; 0x6fb8 <handleMotorsWithSpeedController+0x5a6>
			OCR3B = (unsigned int)(-pwm_right);
		} else {
			OCR3A = 0;
    6f90:	10 92 99 00 	sts	0x0099, r1
    6f94:	10 92 98 00 	sts	0x0098, r1
			OCR3B = 0;
    6f98:	10 92 9b 00 	sts	0x009B, r1
    6f9c:	10 92 9a 00 	sts	0x009A, r1
    6fa0:	64 cf       	rjmp	.-312    	; 0x6e6a <handleMotorsWithSpeedController+0x458>

		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
    6fa2:	00 97       	sbiw	r24, 0x00	; 0
    6fa4:	89 f4       	brne	.+34     	; 0x6fc8 <handleMotorsWithSpeedController+0x5b6>
			OCR4B =(unsigned int)( -pwm_left);
		} else {
			OCR4A = 0;
    6fa6:	10 92 a9 00 	sts	0x00A9, r1
    6faa:	10 92 a8 00 	sts	0x00A8, r1
			OCR4B = 0;
    6fae:	10 92 ab 00 	sts	0x00AB, r1
    6fb2:	10 92 aa 00 	sts	0x00AA, r1
    6fb6:	00 ce       	rjmp	.-1024   	; 0x6bb8 <handleMotorsWithSpeedController+0x1a6>
		pwm_right = pwm_right_working;

		if(pwm_right > 0) {
			OCR3A = (unsigned int)pwm_right;
		} else if(pwm_right < 0) {
			OCR3B = (unsigned int)(-pwm_right);
    6fb8:	90 95       	com	r25
    6fba:	81 95       	neg	r24
    6fbc:	9f 4f       	sbci	r25, 0xFF	; 255
    6fbe:	90 93 9b 00 	sts	0x009B, r25
    6fc2:	80 93 9a 00 	sts	0x009A, r24
    6fc6:	51 cf       	rjmp	.-350    	; 0x6e6a <handleMotorsWithSpeedController+0x458>
		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
			OCR4B =(unsigned int)( -pwm_left);
    6fc8:	90 95       	com	r25
    6fca:	81 95       	neg	r24
    6fcc:	9f 4f       	sbci	r25, 0xFF	; 255
    6fce:	90 93 ab 00 	sts	0x00AB, r25
    6fd2:	80 93 aa 00 	sts	0x00AA, r24
    6fd6:	f0 cd       	rjmp	.-1056   	; 0x6bb8 <handleMotorsWithSpeedController+0x1a6>

00006fd8 <writeDefaultCalibration>:
		speedLeftFromEnc = -speedLeftFromEnc;
    }
    
}

void writeDefaultCalibration() {
    6fd8:	2f 92       	push	r2
    6fda:	3f 92       	push	r3
    6fdc:	4f 92       	push	r4
    6fde:	5f 92       	push	r5
    6fe0:	6f 92       	push	r6
    6fe2:	7f 92       	push	r7
    6fe4:	8f 92       	push	r8
    6fe6:	9f 92       	push	r9
    6fe8:	af 92       	push	r10
    6fea:	bf 92       	push	r11
    6fec:	cf 92       	push	r12
    6fee:	df 92       	push	r13
    6ff0:	ef 92       	push	r14
    6ff2:	ff 92       	push	r15
    6ff4:	0f 93       	push	r16
    6ff6:	1f 93       	push	r17
    6ff8:	cf 93       	push	r28
    6ffa:	df 93       	push	r29
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    	calibration[i][0] = i+1;
	}
    // the following values are taken from a field test
    // forward left, speed control enabled
    calibration[0][0] = 20;		// measured speed with back EMF (adc 0..1023)
    6ffc:	a4 e1       	ldi	r26, 0x14	; 20
    6ffe:	b0 e0       	ldi	r27, 0x00	; 0
    7000:	b0 93 9f 07 	sts	0x079F, r27
    7004:	a0 93 9e 07 	sts	0x079E, r26
    calibration[1][0] = 40;
    7008:	88 e2       	ldi	r24, 0x28	; 40
    700a:	90 e0       	ldi	r25, 0x00	; 0
    700c:	90 93 af 07 	sts	0x07AF, r25
    7010:	80 93 ae 07 	sts	0x07AE, r24
    calibration[2][0] = 59;
    7014:	6b e3       	ldi	r22, 0x3B	; 59
    7016:	70 e0       	ldi	r23, 0x00	; 0
    7018:	70 93 bf 07 	sts	0x07BF, r23
    701c:	60 93 be 07 	sts	0x07BE, r22
    calibration[3][0] = 79;
    7020:	0f e4       	ldi	r16, 0x4F	; 79
    7022:	10 e0       	ldi	r17, 0x00	; 0
    7024:	10 93 cf 07 	sts	0x07CF, r17
    7028:	00 93 ce 07 	sts	0x07CE, r16
    calibration[4][0] = 100;
    702c:	84 e6       	ldi	r24, 0x64	; 100
    702e:	90 e0       	ldi	r25, 0x00	; 0
    7030:	90 93 df 07 	sts	0x07DF, r25
    7034:	80 93 de 07 	sts	0x07DE, r24
    calibration[5][0] = 120;
    7038:	f8 e7       	ldi	r31, 0x78	; 120
    703a:	af 2e       	mov	r10, r31
    703c:	b1 2c       	mov	r11, r1
    703e:	b0 92 ef 07 	sts	0x07EF, r11
    7042:	a0 92 ee 07 	sts	0x07EE, r10
    calibration[6][0] = 139;
    7046:	8b e8       	ldi	r24, 0x8B	; 139
    7048:	90 e0       	ldi	r25, 0x00	; 0
    704a:	90 93 ff 07 	sts	0x07FF, r25
    704e:	80 93 fe 07 	sts	0x07FE, r24
    calibration[7][0] = 159;
    7052:	2f e9       	ldi	r18, 0x9F	; 159
    7054:	30 e0       	ldi	r19, 0x00	; 0
    7056:	30 93 0f 08 	sts	0x080F, r19
    705a:	20 93 0e 08 	sts	0x080E, r18
	calibration[8][0] = 180;
    705e:	44 eb       	ldi	r20, 0xB4	; 180
    7060:	50 e0       	ldi	r21, 0x00	; 0
    7062:	50 93 1f 08 	sts	0x081F, r21
    7066:	40 93 1e 08 	sts	0x081E, r20
    calibration[0][1] = 19;    	// real speed measured in mm/s
    706a:	63 e1       	ldi	r22, 0x13	; 19
    706c:	70 e0       	ldi	r23, 0x00	; 0
    706e:	70 93 a1 07 	sts	0x07A1, r23
    7072:	60 93 a0 07 	sts	0x07A0, r22
    calibration[1][1] = 47;
    7076:	2f e2       	ldi	r18, 0x2F	; 47
    7078:	30 e0       	ldi	r19, 0x00	; 0
    707a:	30 93 b1 07 	sts	0x07B1, r19
    707e:	20 93 b0 07 	sts	0x07B0, r18
    calibration[2][1] = 72;
    7082:	28 e4       	ldi	r18, 0x48	; 72
    7084:	30 e0       	ldi	r19, 0x00	; 0
    7086:	30 93 c1 07 	sts	0x07C1, r19
    708a:	20 93 c0 07 	sts	0x07C0, r18
    calibration[3][1] = 91;
    708e:	2b e5       	ldi	r18, 0x5B	; 91
    7090:	30 e0       	ldi	r19, 0x00	; 0
    7092:	30 93 d1 07 	sts	0x07D1, r19
    7096:	20 93 d0 07 	sts	0x07D0, r18
    calibration[4][1] = 109;
    709a:	2d e6       	ldi	r18, 0x6D	; 109
    709c:	30 e0       	ldi	r19, 0x00	; 0
    709e:	30 93 e1 07 	sts	0x07E1, r19
    70a2:	20 93 e0 07 	sts	0x07E0, r18
    calibration[5][1] = 125;
    70a6:	ed e7       	ldi	r30, 0x7D	; 125
    70a8:	6e 2e       	mov	r6, r30
    70aa:	71 2c       	mov	r7, r1
    70ac:	70 92 f1 07 	sts	0x07F1, r7
    70b0:	60 92 f0 07 	sts	0x07F0, r6
    calibration[6][1] = 143;
    70b4:	2f e8       	ldi	r18, 0x8F	; 143
    70b6:	30 e0       	ldi	r19, 0x00	; 0
    70b8:	30 93 01 08 	sts	0x0801, r19
    70bc:	20 93 00 08 	sts	0x0800, r18
    calibration[7][1] = 160;
    70c0:	20 ea       	ldi	r18, 0xA0	; 160
    70c2:	30 e0       	ldi	r19, 0x00	; 0
    70c4:	30 93 11 08 	sts	0x0811, r19
    70c8:	20 93 10 08 	sts	0x0810, r18
	calibration[8][1] = 174;
    70cc:	ee ea       	ldi	r30, 0xAE	; 174
    70ce:	f0 e0       	ldi	r31, 0x00	; 0
    70d0:	f0 93 21 08 	sts	0x0821, r31
    70d4:	e0 93 20 08 	sts	0x0820, r30
    // forward right, speed control enabled
    calibration[0][2] = 19;		// measured speed with back EMF (adc 0..1023)
    70d8:	70 93 a3 07 	sts	0x07A3, r23
    70dc:	60 93 a2 07 	sts	0x07A2, r22
    calibration[1][2] = 39;
    70e0:	e7 e2       	ldi	r30, 0x27	; 39
    70e2:	f0 e0       	ldi	r31, 0x00	; 0
    70e4:	f0 93 b3 07 	sts	0x07B3, r31
    70e8:	e0 93 b2 07 	sts	0x07B2, r30
    calibration[2][2] = 60;
    70ec:	cc e3       	ldi	r28, 0x3C	; 60
    70ee:	d0 e0       	ldi	r29, 0x00	; 0
    70f0:	d0 93 c3 07 	sts	0x07C3, r29
    70f4:	c0 93 c2 07 	sts	0x07C2, r28
    calibration[3][2] = 80;
    70f8:	60 e5       	ldi	r22, 0x50	; 80
    70fa:	70 e0       	ldi	r23, 0x00	; 0
    70fc:	70 93 d3 07 	sts	0x07D3, r23
    7100:	60 93 d2 07 	sts	0x07D2, r22
    calibration[4][2] = 99;
    7104:	63 e6       	ldi	r22, 0x63	; 99
    7106:	e6 2e       	mov	r14, r22
    7108:	f1 2c       	mov	r15, r1
    710a:	f0 92 e3 07 	sts	0x07E3, r15
    710e:	e0 92 e2 07 	sts	0x07E2, r14
    calibration[5][2] = 119;
    7112:	67 e7       	ldi	r22, 0x77	; 119
    7114:	70 e0       	ldi	r23, 0x00	; 0
    7116:	70 93 f3 07 	sts	0x07F3, r23
    711a:	60 93 f2 07 	sts	0x07F2, r22
    calibration[6][2] = 140;
    711e:	0f 2e       	mov	r0, r31
    7120:	fc e8       	ldi	r31, 0x8C	; 140
    7122:	cf 2e       	mov	r12, r31
    7124:	dd 24       	eor	r13, r13
    7126:	f0 2d       	mov	r31, r0
    7128:	d0 92 03 08 	sts	0x0803, r13
    712c:	c0 92 02 08 	sts	0x0802, r12
    calibration[7][2] = 160;
    7130:	30 93 13 08 	sts	0x0813, r19
    7134:	20 93 12 08 	sts	0x0812, r18
	calibration[8][2] = 180;
    7138:	50 93 23 08 	sts	0x0823, r21
    713c:	40 93 22 08 	sts	0x0822, r20
    calibration[0][3] = 23;    	// real speed measured in mm/s
    7140:	0f 2e       	mov	r0, r31
    7142:	f7 e1       	ldi	r31, 0x17	; 23
    7144:	8f 2e       	mov	r8, r31
    7146:	99 24       	eor	r9, r9
    7148:	f0 2d       	mov	r31, r0
    714a:	90 92 a5 07 	sts	0x07A5, r9
    714e:	80 92 a4 07 	sts	0x07A4, r8
    calibration[1][3] = 46;
    7152:	0f 2e       	mov	r0, r31
    7154:	fe e2       	ldi	r31, 0x2E	; 46
    7156:	4f 2e       	mov	r4, r31
    7158:	55 24       	eor	r5, r5
    715a:	f0 2d       	mov	r31, r0
    715c:	50 92 b5 07 	sts	0x07B5, r5
    7160:	40 92 b4 07 	sts	0x07B4, r4
    calibration[2][3] = 64;
    7164:	88 24       	eor	r8, r8
    7166:	99 24       	eor	r9, r9
    7168:	68 94       	set
    716a:	86 f8       	bld	r8, 6
    716c:	90 92 c5 07 	sts	0x07C5, r9
    7170:	80 92 c4 07 	sts	0x07C4, r8
    calibration[3][3] = 81;
    7174:	0f 2e       	mov	r0, r31
    7176:	f1 e5       	ldi	r31, 0x51	; 81
    7178:	2f 2e       	mov	r2, r31
    717a:	33 24       	eor	r3, r3
    717c:	f0 2d       	mov	r31, r0
    717e:	30 92 d5 07 	sts	0x07D5, r3
    7182:	20 92 d4 07 	sts	0x07D4, r2
    calibration[4][3] = 97;
    7186:	0f 2e       	mov	r0, r31
    7188:	f1 e6       	ldi	r31, 0x61	; 97
    718a:	8f 2e       	mov	r8, r31
    718c:	99 24       	eor	r9, r9
    718e:	f0 2d       	mov	r31, r0
    7190:	90 92 e5 07 	sts	0x07E5, r9
    7194:	80 92 e4 07 	sts	0x07E4, r8
    calibration[5][3] = 112;
    7198:	0f 2e       	mov	r0, r31
    719a:	f0 e7       	ldi	r31, 0x70	; 112
    719c:	8f 2e       	mov	r8, r31
    719e:	99 24       	eor	r9, r9
    71a0:	f0 2d       	mov	r31, r0
    71a2:	90 92 f5 07 	sts	0x07F5, r9
    71a6:	80 92 f4 07 	sts	0x07F4, r8
    calibration[6][3] = 125;
    71aa:	70 92 05 08 	sts	0x0805, r7
    71ae:	60 92 04 08 	sts	0x0804, r6
    calibration[7][3] = 139;
    71b2:	90 93 15 08 	sts	0x0815, r25
    71b6:	80 93 14 08 	sts	0x0814, r24
	calibration[8][3] = 152;
    71ba:	0f 2e       	mov	r0, r31
    71bc:	f8 e9       	ldi	r31, 0x98	; 152
    71be:	8f 2e       	mov	r8, r31
    71c0:	99 24       	eor	r9, r9
    71c2:	f0 2d       	mov	r31, r0
    71c4:	90 92 25 08 	sts	0x0825, r9
    71c8:	80 92 24 08 	sts	0x0824, r8
    // backward left, speed control enabled
    calibration[0][4] = 20;		// measured speed with back EMF (adc 0..1023)
    71cc:	b0 93 a7 07 	sts	0x07A7, r27
    71d0:	a0 93 a6 07 	sts	0x07A6, r26
    calibration[1][4] = 39;
    71d4:	f0 93 b7 07 	sts	0x07B7, r31
    71d8:	e0 93 b6 07 	sts	0x07B6, r30
    calibration[2][4] = 60;
    71dc:	d0 93 c7 07 	sts	0x07C7, r29
    71e0:	c0 93 c6 07 	sts	0x07C6, r28
    calibration[3][4] = 79;
    71e4:	10 93 d7 07 	sts	0x07D7, r17
    71e8:	00 93 d6 07 	sts	0x07D6, r16
    calibration[4][4] = 99;
    71ec:	f0 92 e7 07 	sts	0x07E7, r15
    71f0:	e0 92 e6 07 	sts	0x07E6, r14
    calibration[5][4] = 120;
    71f4:	b0 92 f7 07 	sts	0x07F7, r11
    71f8:	a0 92 f6 07 	sts	0x07F6, r10
    calibration[6][4] = 140;
    71fc:	d0 92 07 08 	sts	0x0807, r13
    7200:	c0 92 06 08 	sts	0x0806, r12
    calibration[7][4] = 160;
    7204:	30 93 17 08 	sts	0x0817, r19
    7208:	20 93 16 08 	sts	0x0816, r18
	calibration[8][4] = 179;
    720c:	c3 eb       	ldi	r28, 0xB3	; 179
    720e:	d0 e0       	ldi	r29, 0x00	; 0
    7210:	d0 93 27 08 	sts	0x0827, r29
    7214:	c0 93 26 08 	sts	0x0826, r28
    calibration[0][5] = 18;    	// real speed measured in mm/s
    7218:	c2 e1       	ldi	r28, 0x12	; 18
    721a:	d0 e0       	ldi	r29, 0x00	; 0
    721c:	d0 93 a9 07 	sts	0x07A9, r29
    7220:	c0 93 a8 07 	sts	0x07A8, r28
    calibration[1][5] = 45;
    7224:	cd e2       	ldi	r28, 0x2D	; 45
    7226:	d0 e0       	ldi	r29, 0x00	; 0
    7228:	d0 93 b9 07 	sts	0x07B9, r29
    722c:	c0 93 b8 07 	sts	0x07B8, r28
    calibration[2][5] = 68;
    7230:	c4 e4       	ldi	r28, 0x44	; 68
    7232:	d0 e0       	ldi	r29, 0x00	; 0
    7234:	d0 93 c9 07 	sts	0x07C9, r29
    7238:	c0 93 c8 07 	sts	0x07C8, r28
    calibration[3][5] = 87;
    723c:	c7 e5       	ldi	r28, 0x57	; 87
    723e:	d0 e0       	ldi	r29, 0x00	; 0
    7240:	d0 93 d9 07 	sts	0x07D9, r29
    7244:	c0 93 d8 07 	sts	0x07D8, r28
    calibration[4][5] = 105;
    7248:	c9 e6       	ldi	r28, 0x69	; 105
    724a:	d0 e0       	ldi	r29, 0x00	; 0
    724c:	d0 93 e9 07 	sts	0x07E9, r29
    7250:	c0 93 e8 07 	sts	0x07E8, r28
    calibration[5][5] = 119;
    7254:	70 93 f9 07 	sts	0x07F9, r23
    7258:	60 93 f8 07 	sts	0x07F8, r22
    calibration[6][5] = 137;
    725c:	c9 e8       	ldi	r28, 0x89	; 137
    725e:	d0 e0       	ldi	r29, 0x00	; 0
    7260:	d0 93 09 08 	sts	0x0809, r29
    7264:	c0 93 08 08 	sts	0x0808, r28
    calibration[7][5] = 151;
    7268:	c7 e9       	ldi	r28, 0x97	; 151
    726a:	d0 e0       	ldi	r29, 0x00	; 0
    726c:	d0 93 19 08 	sts	0x0819, r29
    7270:	c0 93 18 08 	sts	0x0818, r28
	calibration[8][5] = 168;
    7274:	c8 ea       	ldi	r28, 0xA8	; 168
    7276:	d0 e0       	ldi	r29, 0x00	; 0
    7278:	d0 93 29 08 	sts	0x0829, r29
    727c:	c0 93 28 08 	sts	0x0828, r28
    // backward right, speed control enabled
    calibration[0][6] = 20;		// measured speed with back EMF (adc 0..1023)
    7280:	b0 93 ab 07 	sts	0x07AB, r27
    7284:	a0 93 aa 07 	sts	0x07AA, r26
    calibration[1][6] = 39;
    7288:	f0 93 bb 07 	sts	0x07BB, r31
    728c:	e0 93 ba 07 	sts	0x07BA, r30
    calibration[2][6] = 59;
    7290:	eb e3       	ldi	r30, 0x3B	; 59
    7292:	f0 e0       	ldi	r31, 0x00	; 0
    7294:	f0 93 cb 07 	sts	0x07CB, r31
    7298:	e0 93 ca 07 	sts	0x07CA, r30
    calibration[3][6] = 80;
    729c:	e0 e5       	ldi	r30, 0x50	; 80
    729e:	f0 e0       	ldi	r31, 0x00	; 0
    72a0:	f0 93 db 07 	sts	0x07DB, r31
    72a4:	e0 93 da 07 	sts	0x07DA, r30
    calibration[4][6] = 100;
    72a8:	e4 e6       	ldi	r30, 0x64	; 100
    72aa:	f0 e0       	ldi	r31, 0x00	; 0
    72ac:	f0 93 eb 07 	sts	0x07EB, r31
    72b0:	e0 93 ea 07 	sts	0x07EA, r30
    calibration[5][6] = 119;
    72b4:	70 93 fb 07 	sts	0x07FB, r23
    72b8:	60 93 fa 07 	sts	0x07FA, r22
    calibration[6][6] = 139;
    72bc:	90 93 0b 08 	sts	0x080B, r25
    72c0:	80 93 0a 08 	sts	0x080A, r24
    calibration[7][6] = 160;
    72c4:	30 93 1b 08 	sts	0x081B, r19
    72c8:	20 93 1a 08 	sts	0x081A, r18
	calibration[8][6] = 180;
    72cc:	50 93 2b 08 	sts	0x082B, r21
    72d0:	40 93 2a 08 	sts	0x082A, r20
    calibration[0][7] = 22;    	// real speed measured in mm/s
    72d4:	26 e1       	ldi	r18, 0x16	; 22
    72d6:	30 e0       	ldi	r19, 0x00	; 0
    72d8:	30 93 ad 07 	sts	0x07AD, r19
    72dc:	20 93 ac 07 	sts	0x07AC, r18
    calibration[1][7] = 46;
    72e0:	50 92 bd 07 	sts	0x07BD, r5
    72e4:	40 92 bc 07 	sts	0x07BC, r4
    calibration[2][7] = 65;
    72e8:	21 e4       	ldi	r18, 0x41	; 65
    72ea:	30 e0       	ldi	r19, 0x00	; 0
    72ec:	30 93 cd 07 	sts	0x07CD, r19
    72f0:	20 93 cc 07 	sts	0x07CC, r18
    calibration[3][7] = 81;
    72f4:	30 92 dd 07 	sts	0x07DD, r3
    72f8:	20 92 dc 07 	sts	0x07DC, r2
    calibration[4][7] = 96;
    72fc:	20 e6       	ldi	r18, 0x60	; 96
    72fe:	30 e0       	ldi	r19, 0x00	; 0
    7300:	30 93 ed 07 	sts	0x07ED, r19
    7304:	20 93 ec 07 	sts	0x07EC, r18
    calibration[5][7] = 111;
    7308:	2f e6       	ldi	r18, 0x6F	; 111
    730a:	30 e0       	ldi	r19, 0x00	; 0
    730c:	30 93 fd 07 	sts	0x07FD, r19
    7310:	20 93 fc 07 	sts	0x07FC, r18
    calibration[6][7] = 125;
    7314:	70 92 0d 08 	sts	0x080D, r7
    7318:	60 92 0c 08 	sts	0x080C, r6
    calibration[7][7] = 139;
    731c:	90 93 1d 08 	sts	0x081D, r25
    7320:	80 93 1c 08 	sts	0x081C, r24
	calibration[8][7] = 153;
    7324:	89 e9       	ldi	r24, 0x99	; 153
    7326:	90 e0       	ldi	r25, 0x00	; 0
    7328:	90 93 2d 08 	sts	0x082D, r25
    732c:	80 93 2c 08 	sts	0x082C, r24

    writeCalibrationToFlash();
    7330:	0e 94 b3 45 	call	0x8b66	; 0x8b66 <writeCalibrationToFlash>
}
    7334:	df 91       	pop	r29
    7336:	cf 91       	pop	r28
    7338:	1f 91       	pop	r17
    733a:	0f 91       	pop	r16
    733c:	ff 90       	pop	r15
    733e:	ef 90       	pop	r14
    7340:	df 90       	pop	r13
    7342:	cf 90       	pop	r12
    7344:	bf 90       	pop	r11
    7346:	af 90       	pop	r10
    7348:	9f 90       	pop	r9
    734a:	8f 90       	pop	r8
    734c:	7f 90       	pop	r7
    734e:	6f 90       	pop	r6
    7350:	5f 90       	pop	r5
    7352:	4f 90       	pop	r4
    7354:	3f 90       	pop	r3
    7356:	2f 90       	pop	r2
    7358:	08 95       	ret

0000735a <initCalibration>:

void initCalibration() {

    unsigned int temp=0;
 
 	temp = eeprom_read_word((uint16_t*)CALIB_CHECK_ADDRESS);
    735a:	8a e6       	ldi	r24, 0x6A	; 106
    735c:	9f e0       	ldi	r25, 0x0F	; 15
    735e:	0e 94 d4 49 	call	0x93a8	; 0x93a8 <__eerd_word_m2560>

    if(temp==0xAA55) {   // valid odometry data saved in flash, read them
    7362:	2a ea       	ldi	r18, 0xAA	; 170
    7364:	85 35       	cpi	r24, 0x55	; 85
    7366:	92 07       	cpc	r25, r18
    7368:	19 f0       	breq	.+6      	; 0x7370 <initCalibration+0x16>
        readCalibrationFromFlash();
    } else {
		writeDefaultCalibration();		
    736a:	0e 94 ec 37 	call	0x6fd8	; 0x6fd8 <writeDefaultCalibration>
    736e:	08 95       	ret
    unsigned int temp=0;
 
 	temp = eeprom_read_word((uint16_t*)CALIB_CHECK_ADDRESS);

    if(temp==0xAA55) {   // valid odometry data saved in flash, read them
        readCalibrationFromFlash();
    7370:	0e 94 c2 45 	call	0x8b84	; 0x8b84 <readCalibrationFromFlash>
    7374:	08 95       	ret

00007376 <__vector_45>:
    }

}

// Motor left
ISR(TIMER4_OVF_vect) {
    7376:	1f 92       	push	r1
    7378:	0f 92       	push	r0
    737a:	0f b6       	in	r0, 0x3f	; 63
    737c:	0f 92       	push	r0
    737e:	11 24       	eor	r1, r1
    7380:	8f 93       	push	r24
    7382:	9f 93       	push	r25

//	LED_GREEN_ON;

	if(cliffDetectedFlag) {
    7384:	80 91 3c 04 	lds	r24, 0x043C
    7388:	88 23       	and	r24, r24
    738a:	61 f0       	breq	.+24     	; 0x73a4 <__vector_45+0x2e>
		pwm_left = 0;
    738c:	10 92 c8 02 	sts	0x02C8, r1
    7390:	10 92 c7 02 	sts	0x02C7, r1
		OCR4A = 0;
    7394:	10 92 a9 00 	sts	0x00A9, r1
    7398:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    739c:	10 92 ab 00 	sts	0x00AB, r1
    73a0:	10 92 aa 00 	sts	0x00AA, r1
	}

	left_current_avg = 0;
    73a4:	10 92 b2 02 	sts	0x02B2, r1
    73a8:	10 92 b1 02 	sts	0x02B1, r1

	// set pins mode based on controller output
	if(pwm_left == 0) {
    73ac:	80 91 c7 02 	lds	r24, 0x02C7
    73b0:	90 91 c8 02 	lds	r25, 0x02C8
    73b4:	00 97       	sbiw	r24, 0x00	; 0
    73b6:	41 f5       	brne	.+80     	; 0x7408 <__vector_45+0x92>


		//leftMotorPhase = NO_PHASE;
		//compute_left_vel = 1;

		if(pwm_left_desired_to_control >= 0) {
    73b8:	80 91 bb 02 	lds	r24, 0x02BB
    73bc:	90 91 bc 02 	lds	r25, 0x02BC
    73c0:	97 fd       	sbrc	r25, 7
    73c2:	69 c0       	rjmp	.+210    	; 0x7496 <__vector_45+0x120>
			leftMotorPhase = PASSIVE_PHASE;
    73c4:	81 e0       	ldi	r24, 0x01	; 1
    73c6:	80 93 26 02 	sts	0x0226, r24
			currentMotLeftChannel = 14;
    73ca:	8e e0       	ldi	r24, 0x0E	; 14
    73cc:	80 93 23 02 	sts	0x0223, r24
		} else {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 15;
		}
		firstSampleLeft = 1;
    73d0:	81 e0       	ldi	r24, 0x01	; 1
    73d2:	80 93 0a 02 	sts	0x020A, r24

		// select channel 15 to sample left current
		//currentMotLeftChannel = 15;
		TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    73d6:	80 91 a0 00 	lds	r24, 0x00A0
    73da:	8f 75       	andi	r24, 0x5F	; 95
    73dc:	80 93 a0 00 	sts	0x00A0, r24
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    73e0:	80 91 02 01 	lds	r24, 0x0102
    73e4:	87 7e       	andi	r24, 0xE7	; 231
    73e6:	80 93 02 01 	sts	0x0102, r24
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
    73ea:	80 91 72 00 	lds	r24, 0x0072
    73ee:	89 7f       	andi	r24, 0xF9	; 249
    73f0:	80 93 72 00 	sts	0x0072, r24
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
    73f4:	89 b3       	in	r24, 0x19	; 25
    73f6:	86 60       	ori	r24, 0x06	; 6
    73f8:	89 bb       	out	0x19, r24	; 25
	}
*/

//	LED_GREEN_OFF;

}
    73fa:	9f 91       	pop	r25
    73fc:	8f 91       	pop	r24
    73fe:	0f 90       	pop	r0
    7400:	0f be       	out	0x3f, r0	; 63
    7402:	0f 90       	pop	r0
    7404:	1f 90       	pop	r1
    7406:	18 95       	reti
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
	} else if(pwm_left > 0) {   		// move forward
    7408:	18 16       	cp	r1, r24
    740a:	19 06       	cpc	r1, r25
    740c:	2c f5       	brge	.+74     	; 0x7458 <__vector_45+0xe2>
		leftMotorPhase = ACTIVE_PHASE;
    740e:	10 92 26 02 	sts	0x0226, r1
		// select channel 15 to sample left current
		currentMotLeftChannel = 15;
    7412:	8f e0       	ldi	r24, 0x0F	; 15
    7414:	80 93 23 02 	sts	0x0223, r24
		TCCR4A  &= ~(1 << COM4B1);		// disable OCB
    7418:	80 91 a0 00 	lds	r24, 0x00A0
    741c:	8f 7d       	andi	r24, 0xDF	; 223
    741e:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
    7422:	80 91 72 00 	lds	r24, 0x0072
    7426:	8b 7f       	andi	r24, 0xFB	; 251
    7428:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 4);				// output to 0
    742c:	80 91 02 01 	lds	r24, 0x0102
    7430:	8f 7e       	andi	r24, 0xEF	; 239
    7432:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4A1);		// enable OCA
    7436:	80 91 a0 00 	lds	r24, 0x00A0
    743a:	80 68       	ori	r24, 0x80	; 128
    743c:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
    7440:	80 91 72 00 	lds	r24, 0x0072
    7444:	82 60       	ori	r24, 0x02	; 2
    7446:	80 93 72 00 	sts	0x0072, r24
	}
*/

//	LED_GREEN_OFF;

}
    744a:	9f 91       	pop	r25
    744c:	8f 91       	pop	r24
    744e:	0f 90       	pop	r0
    7450:	0f be       	out	0x3f, r0	; 63
    7452:	0f 90       	pop	r0
    7454:	1f 90       	pop	r1
    7456:	18 95       	reti
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
		PORTH &= ~(1 << 4);				// output to 0
		TCCR4A |= (1 << COM4A1);		// enable OCA
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
	} else if(pwm_left < 0) {      		// move backward
		leftMotorPhase = ACTIVE_PHASE;
    7458:	10 92 26 02 	sts	0x0226, r1
		// select channel 14 to sample left current
		currentMotLeftChannel = 14;
    745c:	8e e0       	ldi	r24, 0x0E	; 14
    745e:	80 93 23 02 	sts	0x0223, r24
		TCCR4A  &= ~(1 << COM4A1);		// disable OCA
    7462:	80 91 a0 00 	lds	r24, 0x00A0
    7466:	8f 77       	andi	r24, 0x7F	; 127
    7468:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4A);		// disable OCA interrupt
    746c:	80 91 72 00 	lds	r24, 0x0072
    7470:	8d 7f       	andi	r24, 0xFD	; 253
    7472:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 3);				// output to 0
    7476:	80 91 02 01 	lds	r24, 0x0102
    747a:	87 7f       	andi	r24, 0xF7	; 247
    747c:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4B1);		// enable OCB
    7480:	80 91 a0 00 	lds	r24, 0x00A0
    7484:	80 62       	ori	r24, 0x20	; 32
    7486:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
    748a:	80 91 72 00 	lds	r24, 0x0072
    748e:	84 60       	ori	r24, 0x04	; 4
    7490:	80 93 72 00 	sts	0x0072, r24
    7494:	b2 cf       	rjmp	.-156    	; 0x73fa <__vector_45+0x84>

		if(pwm_left_desired_to_control >= 0) {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 14;
		} else {
			leftMotorPhase = PASSIVE_PHASE;
    7496:	81 e0       	ldi	r24, 0x01	; 1
    7498:	80 93 26 02 	sts	0x0226, r24
			currentMotLeftChannel = 15;
    749c:	8f e0       	ldi	r24, 0x0F	; 15
    749e:	80 93 23 02 	sts	0x0223, r24
    74a2:	96 cf       	rjmp	.-212    	; 0x73d0 <__vector_45+0x5a>

000074a4 <__vector_42>:
//	LED_GREEN_OFF;

}

// motor left forward
ISR(TIMER4_COMPA_vect) {
    74a4:	1f 92       	push	r1
    74a6:	0f 92       	push	r0
    74a8:	0f b6       	in	r0, 0x3f	; 63
    74aa:	0f 92       	push	r0
    74ac:	11 24       	eor	r1, r1
    74ae:	8f 93       	push	r24
    74b0:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    74b2:	81 e0       	ldi	r24, 0x01	; 1
    74b4:	80 93 26 02 	sts	0x0226, r24
	// select channel 14 to sample the left velocity
	currentMotLeftChannel = 14;
    74b8:	9e e0       	ldi	r25, 0x0E	; 14
    74ba:	90 93 23 02 	sts	0x0223, r25

	firstSampleLeft = 1;
    74be:	80 93 0a 02 	sts	0x020A, r24

//	LED_GREEN_OFF;

}
    74c2:	9f 91       	pop	r25
    74c4:	8f 91       	pop	r24
    74c6:	0f 90       	pop	r0
    74c8:	0f be       	out	0x3f, r0	; 63
    74ca:	0f 90       	pop	r0
    74cc:	1f 90       	pop	r1
    74ce:	18 95       	reti

000074d0 <__vector_43>:

// motor left backward
ISR(TIMER4_COMPB_vect) {
    74d0:	1f 92       	push	r1
    74d2:	0f 92       	push	r0
    74d4:	0f b6       	in	r0, 0x3f	; 63
    74d6:	0f 92       	push	r0
    74d8:	11 24       	eor	r1, r1
    74da:	8f 93       	push	r24
    74dc:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    74de:	81 e0       	ldi	r24, 0x01	; 1
    74e0:	80 93 26 02 	sts	0x0226, r24
	// select channel 15 to sample the left velocity
	currentMotLeftChannel = 15;
    74e4:	9f e0       	ldi	r25, 0x0F	; 15
    74e6:	90 93 23 02 	sts	0x0223, r25

	firstSampleLeft = 1;
    74ea:	80 93 0a 02 	sts	0x020A, r24

//	LED_GREEN_OFF;

}
    74ee:	9f 91       	pop	r25
    74f0:	8f 91       	pop	r24
    74f2:	0f 90       	pop	r0
    74f4:	0f be       	out	0x3f, r0	; 63
    74f6:	0f 90       	pop	r0
    74f8:	1f 90       	pop	r1
    74fa:	18 95       	reti

000074fc <__vector_35>:

// Motor right
ISR(TIMER3_OVF_vect) {
    74fc:	1f 92       	push	r1
    74fe:	0f 92       	push	r0
    7500:	0f b6       	in	r0, 0x3f	; 63
    7502:	0f 92       	push	r0
    7504:	11 24       	eor	r1, r1
    7506:	8f 93       	push	r24
    7508:	9f 93       	push	r25

//	LED_GREEN_ON;

  	// PORTB ^= (1 << 7); // Toggle the LED

	if(cliffDetectedFlag) {
    750a:	80 91 3c 04 	lds	r24, 0x043C
    750e:	88 23       	and	r24, r24
    7510:	61 f0       	breq	.+24     	; 0x752a <__vector_35+0x2e>
		pwm_right = 0;
    7512:	10 92 c6 02 	sts	0x02C6, r1
    7516:	10 92 c5 02 	sts	0x02C5, r1
		OCR3A = 0;
    751a:	10 92 99 00 	sts	0x0099, r1
    751e:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    7522:	10 92 9b 00 	sts	0x009B, r1
    7526:	10 92 9a 00 	sts	0x009A, r1
	}

	right_current_avg = 0;
    752a:	10 92 b4 02 	sts	0x02B4, r1
    752e:	10 92 b3 02 	sts	0x02B3, r1


	if(pwm_right == 0) {
    7532:	80 91 c5 02 	lds	r24, 0x02C5
    7536:	90 91 c6 02 	lds	r25, 0x02C6
    753a:	00 97       	sbiw	r24, 0x00	; 0
    753c:	31 f5       	brne	.+76     	; 0x758a <__vector_35+0x8e>
		//firstSampleRight = 0;

		//rightMotorPhase = NO_PHASE;
		//compute_right_vel = 1;

		if(pwm_right_desired_to_control >= 0) {
    753e:	80 91 b9 02 	lds	r24, 0x02B9
    7542:	90 91 ba 02 	lds	r25, 0x02BA
    7546:	97 fd       	sbrc	r25, 7
    7548:	5f c0       	rjmp	.+190    	; 0x7608 <__vector_35+0x10c>
			rightMotorPhase = PASSIVE_PHASE;
    754a:	81 e0       	ldi	r24, 0x01	; 1
    754c:	80 93 25 02 	sts	0x0225, r24
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
    7550:	8c e0       	ldi	r24, 0x0C	; 12
    7552:	80 93 24 02 	sts	0x0224, r24
		} else {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
		}
		firstSampleRight = 1;
    7556:	81 e0       	ldi	r24, 0x01	; 1
    7558:	80 93 09 02 	sts	0x0209, r24

		// select channel 13 to sample left current
		//currentMotRightChannel = 13;
		TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    755c:	80 91 90 00 	lds	r24, 0x0090
    7560:	8f 75       	andi	r24, 0x5F	; 95
    7562:	80 93 90 00 	sts	0x0090, r24
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    7566:	8e b1       	in	r24, 0x0e	; 14
    7568:	87 7e       	andi	r24, 0xE7	; 231
    756a:	8e b9       	out	0x0e, r24	; 14
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
    756c:	80 91 71 00 	lds	r24, 0x0071
    7570:	89 7f       	andi	r24, 0xF9	; 249
    7572:	80 93 71 00 	sts	0x0071, r24
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
    7576:	88 b3       	in	r24, 0x18	; 24
    7578:	86 60       	ori	r24, 0x06	; 6
    757a:	88 bb       	out	0x18, r24	; 24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    757c:	9f 91       	pop	r25
    757e:	8f 91       	pop	r24
    7580:	0f 90       	pop	r0
    7582:	0f be       	out	0x3f, r0	; 63
    7584:	0f 90       	pop	r0
    7586:	1f 90       	pop	r1
    7588:	18 95       	reti
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
	}else if(pwm_right > 0) {   		// move forward
    758a:	18 16       	cp	r1, r24
    758c:	19 06       	cpc	r1, r25
    758e:	0c f5       	brge	.+66     	; 0x75d2 <__vector_35+0xd6>
		rightMotorPhase = ACTIVE_PHASE;
    7590:	10 92 25 02 	sts	0x0225, r1
		// select channel 13 to sample left current
		currentMotRightChannel = 13;
    7594:	8d e0       	ldi	r24, 0x0D	; 13
    7596:	80 93 24 02 	sts	0x0224, r24
		TCCR3A  &= ~(1 << COM3B1);		// disable OCB
    759a:	80 91 90 00 	lds	r24, 0x0090
    759e:	8f 7d       	andi	r24, 0xDF	; 223
    75a0:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
    75a4:	80 91 71 00 	lds	r24, 0x0071
    75a8:	8b 7f       	andi	r24, 0xFB	; 251
    75aa:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 4);				// output to 0
    75ae:	74 98       	cbi	0x0e, 4	; 14
		TCCR3A |= (1 << COM3A1);		// enable OCA
    75b0:	80 91 90 00 	lds	r24, 0x0090
    75b4:	80 68       	ori	r24, 0x80	; 128
    75b6:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
    75ba:	80 91 71 00 	lds	r24, 0x0071
    75be:	82 60       	ori	r24, 0x02	; 2
    75c0:	80 93 71 00 	sts	0x0071, r24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    75c4:	9f 91       	pop	r25
    75c6:	8f 91       	pop	r24
    75c8:	0f 90       	pop	r0
    75ca:	0f be       	out	0x3f, r0	; 63
    75cc:	0f 90       	pop	r0
    75ce:	1f 90       	pop	r1
    75d0:	18 95       	reti
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
		PORTE &= ~(1 << 4);				// output to 0
		TCCR3A |= (1 << COM3A1);		// enable OCA
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
	} else if(pwm_right < 0) {      	// move backward
		rightMotorPhase = ACTIVE_PHASE;
    75d2:	10 92 25 02 	sts	0x0225, r1
		// select channel 12 to sample left current
		currentMotRightChannel = 12;
    75d6:	8c e0       	ldi	r24, 0x0C	; 12
    75d8:	80 93 24 02 	sts	0x0224, r24
		TCCR3A  &= ~(1 << COM3A1);		// disable OCA
    75dc:	80 91 90 00 	lds	r24, 0x0090
    75e0:	8f 77       	andi	r24, 0x7F	; 127
    75e2:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3A);		// disable OCA interrupt
    75e6:	80 91 71 00 	lds	r24, 0x0071
    75ea:	8d 7f       	andi	r24, 0xFD	; 253
    75ec:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 3);				// output to 0
    75f0:	73 98       	cbi	0x0e, 3	; 14
		TCCR3A |= (1 << COM3B1);		// enable OCB
    75f2:	80 91 90 00 	lds	r24, 0x0090
    75f6:	80 62       	ori	r24, 0x20	; 32
    75f8:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3B);		// enable OCB interrupt
    75fc:	80 91 71 00 	lds	r24, 0x0071
    7600:	84 60       	ori	r24, 0x04	; 4
    7602:	80 93 71 00 	sts	0x0071, r24
    7606:	ba cf       	rjmp	.-140    	; 0x757c <__vector_35+0x80>
		if(pwm_right_desired_to_control >= 0) {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
		} else {
			rightMotorPhase = PASSIVE_PHASE;
    7608:	81 e0       	ldi	r24, 0x01	; 1
    760a:	80 93 25 02 	sts	0x0225, r24
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
    760e:	8d e0       	ldi	r24, 0x0D	; 13
    7610:	80 93 24 02 	sts	0x0224, r24
    7614:	a0 cf       	rjmp	.-192    	; 0x7556 <__vector_35+0x5a>

00007616 <__vector_32>:
//	LED_GREEN_OFF;

}

// motor right forward
ISR(TIMER3_COMPA_vect) {
    7616:	1f 92       	push	r1
    7618:	0f 92       	push	r0
    761a:	0f b6       	in	r0, 0x3f	; 63
    761c:	0f 92       	push	r0
    761e:	11 24       	eor	r1, r1
    7620:	8f 93       	push	r24
    7622:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    7624:	81 e0       	ldi	r24, 0x01	; 1
    7626:	80 93 25 02 	sts	0x0225, r24
	// select channel 12 to sample the right velocity
	currentMotRightChannel = 12;
    762a:	9c e0       	ldi	r25, 0x0C	; 12
    762c:	90 93 24 02 	sts	0x0224, r25

	firstSampleRight = 1;
    7630:	80 93 09 02 	sts	0x0209, r24

//	LED_RED_OFF;

}
    7634:	9f 91       	pop	r25
    7636:	8f 91       	pop	r24
    7638:	0f 90       	pop	r0
    763a:	0f be       	out	0x3f, r0	; 63
    763c:	0f 90       	pop	r0
    763e:	1f 90       	pop	r1
    7640:	18 95       	reti

00007642 <__vector_33>:

// motor right backward
ISR(TIMER3_COMPB_vect) {
    7642:	1f 92       	push	r1
    7644:	0f 92       	push	r0
    7646:	0f b6       	in	r0, 0x3f	; 63
    7648:	0f 92       	push	r0
    764a:	11 24       	eor	r1, r1
    764c:	8f 93       	push	r24
    764e:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    7650:	81 e0       	ldi	r24, 0x01	; 1
    7652:	80 93 25 02 	sts	0x0225, r24
	// select channel 13 to sample the right velocity
	currentMotRightChannel = 13;
    7656:	9d e0       	ldi	r25, 0x0D	; 13
    7658:	90 93 24 02 	sts	0x0224, r25

	firstSampleRight = 1;
    765c:	80 93 09 02 	sts	0x0209, r24

//	LED_RED_OFF;
}
    7660:	9f 91       	pop	r25
    7662:	8f 91       	pop	r24
    7664:	0f 90       	pop	r0
    7666:	0f be       	out	0x3f, r0	; 63
    7668:	0f 90       	pop	r0
    766a:	1f 90       	pop	r1
    766c:	18 95       	reti

0000766e <initBehaviors>:

#include "behaviors.h"

void initBehaviors() {

	srand(TCNT3);	// initialize random seed (used in obstacle avoidance)
    766e:	80 91 94 00 	lds	r24, 0x0094
    7672:	90 91 95 00 	lds	r25, 0x0095
    7676:	0e 94 aa 49 	call	0x9354	; 0x9354 <srand>

}
    767a:	08 95       	ret

0000767c <obstacleAvoidance>:

void obstacleAvoidance(signed int *pwmLeft, signed int *pwmRight) {
    767c:	2f 92       	push	r2
    767e:	3f 92       	push	r3
    7680:	4f 92       	push	r4
    7682:	5f 92       	push	r5
    7684:	6f 92       	push	r6
    7686:	7f 92       	push	r7
    7688:	8f 92       	push	r8
    768a:	9f 92       	push	r9
    768c:	af 92       	push	r10
    768e:	bf 92       	push	r11
    7690:	cf 92       	push	r12
    7692:	df 92       	push	r13
    7694:	ef 92       	push	r14
    7696:	ff 92       	push	r15
    7698:	0f 93       	push	r16
    769a:	1f 93       	push	r17
    769c:	df 93       	push	r29
    769e:	cf 93       	push	r28
    76a0:	cd b7       	in	r28, 0x3d	; 61
    76a2:	de b7       	in	r29, 0x3e	; 62
    76a4:	28 97       	sbiw	r28, 0x08	; 8
    76a6:	0f b6       	in	r0, 0x3f	; 63
    76a8:	f8 94       	cli
    76aa:	de bf       	out	0x3e, r29	; 62
    76ac:	0f be       	out	0x3f, r0	; 63
    76ae:	cd bf       	out	0x3d, r28	; 61
    76b0:	3c 01       	movw	r6, r24
    76b2:	7a 83       	std	Y+2, r23	; 0x02
    76b4:	69 83       	std	Y+1, r22	; 0x01
	//	y	0		0.5		1		0.5		0		-0.5	-1		-0.5

	unsigned int i=0;
	signed int long res=0;
	signed int sumSensorsX=0, sumSensorsY=0;
	signed int desL=*pwmLeft, desR=*pwmRight;
    76b6:	fc 01       	movw	r30, r24
    76b8:	01 90       	ld	r0, Z+
    76ba:	f0 81       	ld	r31, Z
    76bc:	e0 2d       	mov	r30, r0
    76be:	fc 83       	std	Y+4, r31	; 0x04
    76c0:	eb 83       	std	Y+3, r30	; 0x03
    76c2:	fb 01       	movw	r30, r22
    76c4:	01 90       	ld	r0, Z+
    76c6:	f0 81       	ld	r31, Z
    76c8:	e0 2d       	mov	r30, r0
    76ca:	fe 83       	std	Y+6, r31	; 0x06
    76cc:	ed 83       	std	Y+5, r30	; 0x05

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    76ce:	00 91 91 02 	lds	r16, 0x0291
    76d2:	10 91 92 02 	lds	r17, 0x0292
    76d6:	05 30       	cpi	r16, 0x05	; 5
    76d8:	11 05       	cpc	r17, r1
    76da:	34 f4       	brge	.+12     	; 0x76e8 <obstacleAvoidance+0x6c>
			proximityResultLinear[i] = 0;
    76dc:	10 92 92 02 	sts	0x0292, r1
    76e0:	10 92 91 02 	sts	0x0291, r1
    76e4:	00 e0       	ldi	r16, 0x00	; 0
    76e6:	10 e0       	ldi	r17, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    76e8:	60 91 93 02 	lds	r22, 0x0293
    76ec:	70 91 94 02 	lds	r23, 0x0294
    76f0:	65 30       	cpi	r22, 0x05	; 5
    76f2:	71 05       	cpc	r23, r1
    76f4:	34 f4       	brge	.+12     	; 0x7702 <obstacleAvoidance+0x86>
			proximityResultLinear[i] = 0;
    76f6:	10 92 94 02 	sts	0x0294, r1
    76fa:	10 92 93 02 	sts	0x0293, r1
    76fe:	60 e0       	ldi	r22, 0x00	; 0
    7700:	70 e0       	ldi	r23, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    7702:	80 91 95 02 	lds	r24, 0x0295
    7706:	90 91 96 02 	lds	r25, 0x0296
    770a:	85 30       	cpi	r24, 0x05	; 5
    770c:	91 05       	cpc	r25, r1
    770e:	24 f4       	brge	.+8      	; 0x7718 <obstacleAvoidance+0x9c>
			proximityResultLinear[i] = 0;
    7710:	10 92 96 02 	sts	0x0296, r1
    7714:	10 92 95 02 	sts	0x0295, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    7718:	40 91 97 02 	lds	r20, 0x0297
    771c:	50 91 98 02 	lds	r21, 0x0298
    7720:	45 30       	cpi	r20, 0x05	; 5
    7722:	51 05       	cpc	r21, r1
    7724:	34 f4       	brge	.+12     	; 0x7732 <obstacleAvoidance+0xb6>
			proximityResultLinear[i] = 0;
    7726:	10 92 98 02 	sts	0x0298, r1
    772a:	10 92 97 02 	sts	0x0297, r1
    772e:	40 e0       	ldi	r20, 0x00	; 0
    7730:	50 e0       	ldi	r21, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    7732:	40 90 99 02 	lds	r4, 0x0299
    7736:	50 90 9a 02 	lds	r5, 0x029A
    773a:	f5 e0       	ldi	r31, 0x05	; 5
    773c:	4f 16       	cp	r4, r31
    773e:	51 04       	cpc	r5, r1
    7740:	34 f4       	brge	.+12     	; 0x774e <obstacleAvoidance+0xd2>
			proximityResultLinear[i] = 0;
    7742:	10 92 9a 02 	sts	0x029A, r1
    7746:	10 92 99 02 	sts	0x0299, r1
    774a:	44 24       	eor	r4, r4
    774c:	55 24       	eor	r5, r5
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    774e:	20 91 9b 02 	lds	r18, 0x029B
    7752:	30 91 9c 02 	lds	r19, 0x029C
    7756:	25 30       	cpi	r18, 0x05	; 5
    7758:	31 05       	cpc	r19, r1
    775a:	34 f4       	brge	.+12     	; 0x7768 <obstacleAvoidance+0xec>
			proximityResultLinear[i] = 0;
    775c:	10 92 9c 02 	sts	0x029C, r1
    7760:	10 92 9b 02 	sts	0x029B, r1
    7764:	20 e0       	ldi	r18, 0x00	; 0
    7766:	30 e0       	ldi	r19, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    7768:	80 91 9d 02 	lds	r24, 0x029D
    776c:	90 91 9e 02 	lds	r25, 0x029E
    7770:	85 30       	cpi	r24, 0x05	; 5
    7772:	91 05       	cpc	r25, r1
    7774:	24 f4       	brge	.+8      	; 0x777e <obstacleAvoidance+0x102>
			proximityResultLinear[i] = 0;
    7776:	10 92 9e 02 	sts	0x029E, r1
    777a:	10 92 9d 02 	sts	0x029D, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    777e:	80 91 9f 02 	lds	r24, 0x029F
    7782:	90 91 a0 02 	lds	r25, 0x02A0
    7786:	85 30       	cpi	r24, 0x05	; 5
    7788:	91 05       	cpc	r25, r1
    778a:	34 f4       	brge	.+12     	; 0x7798 <obstacleAvoidance+0x11c>
			proximityResultLinear[i] = 0;
    778c:	10 92 a0 02 	sts	0x02A0, r1
    7790:	10 92 9f 02 	sts	0x029F, r1
    7794:	80 e0       	ldi	r24, 0x00	; 0
    7796:	90 e0       	ldi	r25, 0x00	; 0
	}

	// sum the contribution of each sensor (based on the previous weights table);
	// give more weight to prox2 and prox6 (side proximities) in order to get more stability in narrow aisles;
	// add some noise to the sum in order to escape from dead-lock positions
	sumSensorsX = -proximityResultLinear[0] - (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) + proximityResultLinear[4] + (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + ((rand()%60)-30);
    7798:	10 95       	com	r17
    779a:	01 95       	neg	r16
    779c:	1f 4f       	sbci	r17, 0xFF	; 255
    779e:	5b 01       	movw	r10, r22
    77a0:	b5 94       	asr	r11
    77a2:	a7 94       	ror	r10
    77a4:	7a 01       	movw	r14, r20
    77a6:	f5 94       	asr	r15
    77a8:	e7 94       	ror	r14
    77aa:	69 01       	movw	r12, r18
    77ac:	d5 94       	asr	r13
    77ae:	c7 94       	ror	r12
    77b0:	4c 01       	movw	r8, r24
    77b2:	95 94       	asr	r9
    77b4:	87 94       	ror	r8
    77b6:	0e 94 a5 49 	call	0x934a	; 0x934a <rand>
    77ba:	92 01       	movw	r18, r4
    77bc:	2e 51       	subi	r18, 0x1E	; 30
    77be:	30 40       	sbci	r19, 0x00	; 0
    77c0:	20 0f       	add	r18, r16
    77c2:	31 1f       	adc	r19, r17
    77c4:	2e 0d       	add	r18, r14
    77c6:	3f 1d       	adc	r19, r15
    77c8:	2c 0d       	add	r18, r12
    77ca:	3d 1d       	adc	r19, r13
    77cc:	2a 19       	sub	r18, r10
    77ce:	3b 09       	sbc	r19, r11
    77d0:	28 19       	sub	r18, r8
    77d2:	39 09       	sbc	r19, r9
    77d4:	6c e3       	ldi	r22, 0x3C	; 60
    77d6:	26 2e       	mov	r2, r22
    77d8:	31 2c       	mov	r3, r1
    77da:	b1 01       	movw	r22, r2
    77dc:	0e 94 07 49 	call	0x920e	; 0x920e <__divmodhi4>
    77e0:	28 0f       	add	r18, r24
    77e2:	39 1f       	adc	r19, r25
    77e4:	38 87       	std	Y+8, r19	; 0x08
    77e6:	2f 83       	std	Y+7, r18	; 0x07
	//sumSensorsX = -proximityResultLinear[0]  + proximityResultLinear[4];	
	sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[2]>>2) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[6]>>2) - (proximityResultLinear[7]>>1)+ ((rand()%60)-30);
    77e8:	e0 90 93 02 	lds	r14, 0x0293
    77ec:	f0 90 94 02 	lds	r15, 0x0294
    77f0:	f5 94       	asr	r15
    77f2:	e7 94       	ror	r14
    77f4:	00 91 95 02 	lds	r16, 0x0295
    77f8:	10 91 96 02 	lds	r17, 0x0296
    77fc:	15 95       	asr	r17
    77fe:	07 95       	ror	r16
    7800:	15 95       	asr	r17
    7802:	07 95       	ror	r16
    7804:	c0 90 97 02 	lds	r12, 0x0297
    7808:	d0 90 98 02 	lds	r13, 0x0298
    780c:	d5 94       	asr	r13
    780e:	c7 94       	ror	r12
    7810:	a0 90 9b 02 	lds	r10, 0x029B
    7814:	b0 90 9c 02 	lds	r11, 0x029C
    7818:	b5 94       	asr	r11
    781a:	a7 94       	ror	r10
    781c:	40 90 9d 02 	lds	r4, 0x029D
    7820:	50 90 9e 02 	lds	r5, 0x029E
    7824:	55 94       	asr	r5
    7826:	47 94       	ror	r4
    7828:	55 94       	asr	r5
    782a:	47 94       	ror	r4
    782c:	80 90 9f 02 	lds	r8, 0x029F
    7830:	90 90 a0 02 	lds	r9, 0x02A0
    7834:	95 94       	asr	r9
    7836:	87 94       	ror	r8
    7838:	0e 94 a5 49 	call	0x934a	; 0x934a <rand>
    783c:	97 01       	movw	r18, r14
    783e:	20 0f       	add	r18, r16
    7840:	31 1f       	adc	r19, r17
    7842:	2e 51       	subi	r18, 0x1E	; 30
    7844:	30 40       	sbci	r19, 0x00	; 0
    7846:	2c 0d       	add	r18, r12
    7848:	3d 1d       	adc	r19, r13
    784a:	2a 19       	sub	r18, r10
    784c:	3b 09       	sbc	r19, r11
    784e:	28 19       	sub	r18, r8
    7850:	39 09       	sbc	r19, r9
    7852:	24 19       	sub	r18, r4
    7854:	35 09       	sbc	r19, r5
    7856:	b1 01       	movw	r22, r2
    7858:	0e 94 07 49 	call	0x920e	; 0x920e <__divmodhi4>
    785c:	28 0f       	add	r18, r24
    785e:	39 1f       	adc	r19, r25
	//sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + (rand()%30);

	// modify the velocity components based on sensor values
	if(desL >= 0) {
    7860:	4b 81       	ldd	r20, Y+3	; 0x03
    7862:	5c 81       	ldd	r21, Y+4	; 0x04
    7864:	57 fd       	sbrc	r21, 7
    7866:	e5 c0       	rjmp	.+458    	; 0x7a32 <obstacleAvoidance+0x3b6>
		res = (signed long int)desL + (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
    7868:	5a 01       	movw	r10, r20
    786a:	cc 24       	eor	r12, r12
    786c:	b7 fc       	sbrc	r11, 7
    786e:	c0 94       	com	r12
    7870:	dc 2c       	mov	r13, r12
    7872:	8f 81       	ldd	r24, Y+7	; 0x07
    7874:	98 85       	ldd	r25, Y+8	; 0x08
    7876:	1c 01       	movw	r2, r24
    7878:	44 24       	eor	r4, r4
    787a:	37 fc       	sbrc	r3, 7
    787c:	40 94       	com	r4
    787e:	54 2c       	mov	r5, r4
    7880:	79 01       	movw	r14, r18
    7882:	00 27       	eor	r16, r16
    7884:	f7 fc       	sbrc	r15, 7
    7886:	00 95       	com	r16
    7888:	10 2f       	mov	r17, r16
    788a:	c2 01       	movw	r24, r4
    788c:	b1 01       	movw	r22, r2
    788e:	6e 19       	sub	r22, r14
    7890:	7f 09       	sbc	r23, r15
    7892:	80 0b       	sbc	r24, r16
    7894:	91 0b       	sbc	r25, r17
    7896:	a6 01       	movw	r20, r12
    7898:	95 01       	movw	r18, r10
    789a:	0e 94 d4 48 	call	0x91a8	; 0x91a8 <__mulsi3>
    789e:	b6 e0       	ldi	r27, 0x06	; 6
    78a0:	95 95       	asr	r25
    78a2:	87 95       	ror	r24
    78a4:	77 95       	ror	r23
    78a6:	67 95       	ror	r22
    78a8:	ba 95       	dec	r27
    78aa:	d1 f7       	brne	.-12     	; 0x78a0 <obstacleAvoidance+0x224>
    78ac:	6a 0d       	add	r22, r10
    78ae:	7b 1d       	adc	r23, r11
    78b0:	8c 1d       	adc	r24, r12
    78b2:	9d 1d       	adc	r25, r13
		*pwmLeft = (signed int)res;
    78b4:	f3 01       	movw	r30, r6
    78b6:	71 83       	std	Z+1, r23	; 0x01
    78b8:	60 83       	st	Z, r22
	} else {
		res = (signed long int)desL - (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
		*pwmLeft = (signed int)res;
	}
	if(desR >=0) {
    78ba:	2d 81       	ldd	r18, Y+5	; 0x05
    78bc:	3e 81       	ldd	r19, Y+6	; 0x06
    78be:	37 fd       	sbrc	r19, 7
    78c0:	97 c0       	rjmp	.+302    	; 0x79f0 <obstacleAvoidance+0x374>
		res = (signed long int)desR + (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
    78c2:	59 01       	movw	r10, r18
    78c4:	cc 24       	eor	r12, r12
    78c6:	b7 fc       	sbrc	r11, 7
    78c8:	c0 94       	com	r12
    78ca:	dc 2c       	mov	r13, r12
    78cc:	c8 01       	movw	r24, r16
    78ce:	b7 01       	movw	r22, r14
    78d0:	62 0d       	add	r22, r2
    78d2:	73 1d       	adc	r23, r3
    78d4:	84 1d       	adc	r24, r4
    78d6:	95 1d       	adc	r25, r5
    78d8:	a6 01       	movw	r20, r12
    78da:	95 01       	movw	r18, r10
    78dc:	0e 94 d4 48 	call	0x91a8	; 0x91a8 <__mulsi3>
    78e0:	f6 e0       	ldi	r31, 0x06	; 6
    78e2:	95 95       	asr	r25
    78e4:	87 95       	ror	r24
    78e6:	77 95       	ror	r23
    78e8:	67 95       	ror	r22
    78ea:	fa 95       	dec	r31
    78ec:	d1 f7       	brne	.-12     	; 0x78e2 <obstacleAvoidance+0x266>
    78ee:	6a 0d       	add	r22, r10
    78f0:	7b 1d       	adc	r23, r11
    78f2:	8c 1d       	adc	r24, r12
    78f4:	9d 1d       	adc	r25, r13
		*pwmRight = (signed int)res;
    78f6:	9b 01       	movw	r18, r22
    78f8:	e9 81       	ldd	r30, Y+1	; 0x01
    78fa:	fa 81       	ldd	r31, Y+2	; 0x02
    78fc:	71 83       	std	Z+1, r23	; 0x01
    78fe:	60 83       	st	Z, r22
	} else {
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	}

	if(currentSelector == 10) {	// force a little bit the upwards direction in vertical motion
    7900:	80 91 1a 04 	lds	r24, 0x041A
    7904:	8a 30       	cpi	r24, 0x0A	; 10
    7906:	09 f4       	brne	.+2      	; 0x790a <obstacleAvoidance+0x28e>
    7908:	4b c0       	rjmp	.+150    	; 0x79a0 <obstacleAvoidance+0x324>
			}
		}
	}

	// force the values to be in the pwm maximum range
	if (*pwmRight>(MAX_MOTORS_PWM/2)) *pwmRight=(MAX_MOTORS_PWM/2);
    790a:	f2 e0       	ldi	r31, 0x02	; 2
    790c:	21 30       	cpi	r18, 0x01	; 1
    790e:	3f 07       	cpc	r19, r31
    7910:	44 f0       	brlt	.+16     	; 0x7922 <obstacleAvoidance+0x2a6>
    7912:	80 e0       	ldi	r24, 0x00	; 0
    7914:	92 e0       	ldi	r25, 0x02	; 2
    7916:	e9 81       	ldd	r30, Y+1	; 0x01
    7918:	fa 81       	ldd	r31, Y+2	; 0x02
    791a:	91 83       	std	Z+1, r25	; 0x01
    791c:	80 83       	st	Z, r24
    791e:	20 e0       	ldi	r18, 0x00	; 0
    7920:	32 e0       	ldi	r19, 0x02	; 2
	if (*pwmLeft>(MAX_MOTORS_PWM/2)) *pwmLeft=(MAX_MOTORS_PWM/2);
    7922:	f3 01       	movw	r30, r6
    7924:	80 81       	ld	r24, Z
    7926:	91 81       	ldd	r25, Z+1	; 0x01
    7928:	f2 e0       	ldi	r31, 0x02	; 2
    792a:	81 30       	cpi	r24, 0x01	; 1
    792c:	9f 07       	cpc	r25, r31
    792e:	4c f0       	brlt	.+18     	; 0x7942 <obstacleAvoidance+0x2c6>
    7930:	80 e0       	ldi	r24, 0x00	; 0
    7932:	92 e0       	ldi	r25, 0x02	; 2
    7934:	f3 01       	movw	r30, r6
    7936:	91 83       	std	Z+1, r25	; 0x01
    7938:	80 83       	st	Z, r24
    793a:	e9 81       	ldd	r30, Y+1	; 0x01
    793c:	fa 81       	ldd	r31, Y+2	; 0x02
    793e:	20 81       	ld	r18, Z
    7940:	31 81       	ldd	r19, Z+1	; 0x01
	if (*pwmRight<-(MAX_MOTORS_PWM/2)) *pwmRight=-(MAX_MOTORS_PWM/2);
    7942:	fe ef       	ldi	r31, 0xFE	; 254
    7944:	20 30       	cpi	r18, 0x00	; 0
    7946:	3f 07       	cpc	r19, r31
    7948:	4c f4       	brge	.+18     	; 0x795c <obstacleAvoidance+0x2e0>
    794a:	80 e0       	ldi	r24, 0x00	; 0
    794c:	9e ef       	ldi	r25, 0xFE	; 254
    794e:	e9 81       	ldd	r30, Y+1	; 0x01
    7950:	fa 81       	ldd	r31, Y+2	; 0x02
    7952:	91 83       	std	Z+1, r25	; 0x01
    7954:	80 83       	st	Z, r24
    7956:	f3 01       	movw	r30, r6
    7958:	80 81       	ld	r24, Z
    795a:	91 81       	ldd	r25, Z+1	; 0x01
	if (*pwmLeft<-(MAX_MOTORS_PWM/2)) *pwmLeft=-(MAX_MOTORS_PWM/2);
    795c:	fe ef       	ldi	r31, 0xFE	; 254
    795e:	80 30       	cpi	r24, 0x00	; 0
    7960:	9f 07       	cpc	r25, r31
    7962:	2c f4       	brge	.+10     	; 0x796e <obstacleAvoidance+0x2f2>
    7964:	80 e0       	ldi	r24, 0x00	; 0
    7966:	9e ef       	ldi	r25, 0xFE	; 254
    7968:	f3 01       	movw	r30, r6
    796a:	91 83       	std	Z+1, r25	; 0x01
    796c:	80 83       	st	Z, r24

}
    796e:	28 96       	adiw	r28, 0x08	; 8
    7970:	0f b6       	in	r0, 0x3f	; 63
    7972:	f8 94       	cli
    7974:	de bf       	out	0x3e, r29	; 62
    7976:	0f be       	out	0x3f, r0	; 63
    7978:	cd bf       	out	0x3d, r28	; 61
    797a:	cf 91       	pop	r28
    797c:	df 91       	pop	r29
    797e:	1f 91       	pop	r17
    7980:	0f 91       	pop	r16
    7982:	ff 90       	pop	r15
    7984:	ef 90       	pop	r14
    7986:	df 90       	pop	r13
    7988:	cf 90       	pop	r12
    798a:	bf 90       	pop	r11
    798c:	af 90       	pop	r10
    798e:	9f 90       	pop	r9
    7990:	8f 90       	pop	r8
    7992:	7f 90       	pop	r7
    7994:	6f 90       	pop	r6
    7996:	5f 90       	pop	r5
    7998:	4f 90       	pop	r4
    799a:	3f 90       	pop	r3
    799c:	2f 90       	pop	r2
    799e:	08 95       	ret
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	}

	if(currentSelector == 10) {	// force a little bit the upwards direction in vertical motion
		if(desL!=0 && desR!=0) {
    79a0:	2b 81       	ldd	r18, Y+3	; 0x03
    79a2:	3c 81       	ldd	r19, Y+4	; 0x04
    79a4:	21 15       	cp	r18, r1
    79a6:	31 05       	cpc	r19, r1
    79a8:	f1 f0       	breq	.+60     	; 0x79e6 <obstacleAvoidance+0x36a>
    79aa:	2d 81       	ldd	r18, Y+5	; 0x05
    79ac:	3e 81       	ldd	r19, Y+6	; 0x06
    79ae:	21 15       	cp	r18, r1
    79b0:	31 05       	cpc	r19, r1
    79b2:	c9 f0       	breq	.+50     	; 0x79e6 <obstacleAvoidance+0x36a>
			if(currentAngle<270 && currentAngle>90) {
    79b4:	80 91 0c 04 	lds	r24, 0x040C
    79b8:	90 91 0d 04 	lds	r25, 0x040D
    79bc:	8b 55       	subi	r24, 0x5B	; 91
    79be:	90 40       	sbci	r25, 0x00	; 0
    79c0:	83 3b       	cpi	r24, 0xB3	; 179
    79c2:	91 05       	cpc	r25, r1
    79c4:	08 f0       	brcs	.+2      	; 0x79c8 <obstacleAvoidance+0x34c>
    79c6:	5f c0       	rjmp	.+190    	; 0x7a86 <obstacleAvoidance+0x40a>
				*pwmLeft += 10;
    79c8:	f3 01       	movw	r30, r6
    79ca:	80 81       	ld	r24, Z
    79cc:	91 81       	ldd	r25, Z+1	; 0x01
    79ce:	0a 96       	adiw	r24, 0x0a	; 10
    79d0:	91 83       	std	Z+1, r25	; 0x01
    79d2:	80 83       	st	Z, r24
				*pwmRight -= 10;
    79d4:	e9 81       	ldd	r30, Y+1	; 0x01
    79d6:	fa 81       	ldd	r31, Y+2	; 0x02
    79d8:	20 81       	ld	r18, Z
    79da:	31 81       	ldd	r19, Z+1	; 0x01
    79dc:	2a 50       	subi	r18, 0x0A	; 10
    79de:	30 40       	sbci	r19, 0x00	; 0
    79e0:	31 83       	std	Z+1, r19	; 0x01
    79e2:	20 83       	st	Z, r18
    79e4:	92 cf       	rjmp	.-220    	; 0x790a <obstacleAvoidance+0x28e>
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	}

	if(currentSelector == 10) {	// force a little bit the upwards direction in vertical motion
		if(desL!=0 && desR!=0) {
    79e6:	e9 81       	ldd	r30, Y+1	; 0x01
    79e8:	fa 81       	ldd	r31, Y+2	; 0x02
    79ea:	20 81       	ld	r18, Z
    79ec:	31 81       	ldd	r19, Z+1	; 0x01
    79ee:	8d cf       	rjmp	.-230    	; 0x790a <obstacleAvoidance+0x28e>
	}
	if(desR >=0) {
		res = (signed long int)desR + (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	} else {
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
    79f0:	59 01       	movw	r10, r18
    79f2:	cc 24       	eor	r12, r12
    79f4:	b7 fc       	sbrc	r11, 7
    79f6:	c0 94       	com	r12
    79f8:	dc 2c       	mov	r13, r12
    79fa:	c2 01       	movw	r24, r4
    79fc:	b1 01       	movw	r22, r2
    79fe:	6e 19       	sub	r22, r14
    7a00:	7f 09       	sbc	r23, r15
    7a02:	80 0b       	sbc	r24, r16
    7a04:	91 0b       	sbc	r25, r17
    7a06:	a6 01       	movw	r20, r12
    7a08:	95 01       	movw	r18, r10
    7a0a:	0e 94 d4 48 	call	0x91a8	; 0x91a8 <__mulsi3>
    7a0e:	e6 e0       	ldi	r30, 0x06	; 6
    7a10:	95 95       	asr	r25
    7a12:	87 95       	ror	r24
    7a14:	77 95       	ror	r23
    7a16:	67 95       	ror	r22
    7a18:	ea 95       	dec	r30
    7a1a:	d1 f7       	brne	.-12     	; 0x7a10 <obstacleAvoidance+0x394>
    7a1c:	26 1b       	sub	r18, r22
    7a1e:	37 0b       	sbc	r19, r23
    7a20:	48 0b       	sbc	r20, r24
    7a22:	59 0b       	sbc	r21, r25
    7a24:	da 01       	movw	r26, r20
    7a26:	c9 01       	movw	r24, r18
		*pwmRight = (signed int)res;
    7a28:	e9 81       	ldd	r30, Y+1	; 0x01
    7a2a:	fa 81       	ldd	r31, Y+2	; 0x02
    7a2c:	91 83       	std	Z+1, r25	; 0x01
    7a2e:	80 83       	st	Z, r24
    7a30:	67 cf       	rjmp	.-306    	; 0x7900 <obstacleAvoidance+0x284>
	// modify the velocity components based on sensor values
	if(desL >= 0) {
		res = (signed long int)desL + (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmLeft = (signed int)res;
	} else {
		res = (signed long int)desL - (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
    7a32:	5a 01       	movw	r10, r20
    7a34:	cc 24       	eor	r12, r12
    7a36:	b7 fc       	sbrc	r11, 7
    7a38:	c0 94       	com	r12
    7a3a:	dc 2c       	mov	r13, r12
    7a3c:	8f 81       	ldd	r24, Y+7	; 0x07
    7a3e:	98 85       	ldd	r25, Y+8	; 0x08
    7a40:	1c 01       	movw	r2, r24
    7a42:	44 24       	eor	r4, r4
    7a44:	37 fc       	sbrc	r3, 7
    7a46:	40 94       	com	r4
    7a48:	54 2c       	mov	r5, r4
    7a4a:	79 01       	movw	r14, r18
    7a4c:	00 27       	eor	r16, r16
    7a4e:	f7 fc       	sbrc	r15, 7
    7a50:	00 95       	com	r16
    7a52:	10 2f       	mov	r17, r16
    7a54:	c8 01       	movw	r24, r16
    7a56:	b7 01       	movw	r22, r14
    7a58:	62 0d       	add	r22, r2
    7a5a:	73 1d       	adc	r23, r3
    7a5c:	84 1d       	adc	r24, r4
    7a5e:	95 1d       	adc	r25, r5
    7a60:	a6 01       	movw	r20, r12
    7a62:	95 01       	movw	r18, r10
    7a64:	0e 94 d4 48 	call	0x91a8	; 0x91a8 <__mulsi3>
    7a68:	a6 e0       	ldi	r26, 0x06	; 6
    7a6a:	95 95       	asr	r25
    7a6c:	87 95       	ror	r24
    7a6e:	77 95       	ror	r23
    7a70:	67 95       	ror	r22
    7a72:	aa 95       	dec	r26
    7a74:	d1 f7       	brne	.-12     	; 0x7a6a <obstacleAvoidance+0x3ee>
    7a76:	26 1b       	sub	r18, r22
    7a78:	37 0b       	sbc	r19, r23
    7a7a:	48 0b       	sbc	r20, r24
    7a7c:	59 0b       	sbc	r21, r25
		*pwmLeft = (signed int)res;
    7a7e:	f3 01       	movw	r30, r6
    7a80:	31 83       	std	Z+1, r19	; 0x01
    7a82:	20 83       	st	Z, r18
    7a84:	1a cf       	rjmp	.-460    	; 0x78ba <obstacleAvoidance+0x23e>
		if(desL!=0 && desR!=0) {
			if(currentAngle<270 && currentAngle>90) {
				*pwmLeft += 10;
				*pwmRight -= 10;
			} else {
				*pwmLeft -= 10;
    7a86:	f3 01       	movw	r30, r6
    7a88:	80 81       	ld	r24, Z
    7a8a:	91 81       	ldd	r25, Z+1	; 0x01
    7a8c:	0a 97       	sbiw	r24, 0x0a	; 10
    7a8e:	91 83       	std	Z+1, r25	; 0x01
    7a90:	80 83       	st	Z, r24
				*pwmRight += 10;
    7a92:	e9 81       	ldd	r30, Y+1	; 0x01
    7a94:	fa 81       	ldd	r31, Y+2	; 0x02
    7a96:	20 81       	ld	r18, Z
    7a98:	31 81       	ldd	r19, Z+1	; 0x01
    7a9a:	26 5f       	subi	r18, 0xF6	; 246
    7a9c:	3f 4f       	sbci	r19, 0xFF	; 255
    7a9e:	31 83       	std	Z+1, r19	; 0x01
    7aa0:	20 83       	st	Z, r18
    7aa2:	33 cf       	rjmp	.-410    	; 0x790a <obstacleAvoidance+0x28e>

00007aa4 <cliffDetected>:


char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    7aa4:	80 91 39 02 	lds	r24, 0x0239
    7aa8:	90 91 3a 02 	lds	r25, 0x023A
    7aac:	21 e0       	ldi	r18, 0x01	; 1
    7aae:	84 3a       	cpi	r24, 0xA4	; 164
    7ab0:	92 07       	cpc	r25, r18
    7ab2:	d4 f0       	brlt	.+52     	; 0x7ae8 <cliffDetected+0x44>
    7ab4:	80 91 3b 02 	lds	r24, 0x023B
    7ab8:	90 91 3c 02 	lds	r25, 0x023C
    7abc:	21 e0       	ldi	r18, 0x01	; 1
    7abe:	84 3a       	cpi	r24, 0xA4	; 164
    7ac0:	92 07       	cpc	r25, r18
    7ac2:	94 f0       	brlt	.+36     	; 0x7ae8 <cliffDetected+0x44>
    7ac4:	80 91 3d 02 	lds	r24, 0x023D
    7ac8:	90 91 3e 02 	lds	r25, 0x023E
    7acc:	21 e0       	ldi	r18, 0x01	; 1
    7ace:	84 3a       	cpi	r24, 0xA4	; 164
    7ad0:	92 07       	cpc	r25, r18
    7ad2:	74 f0       	brlt	.+28     	; 0x7af0 <cliffDetected+0x4c>
	//if(proximityResult[8]<(proximityOffset[8]>>1) || proximityResult[9]<(proximityOffset[9]>>1) || proximityResult[10]<(proximityOffset[10]>>1) || proximityResult[11]<(proximityOffset[11]>>1)) {
		return 1;
    7ad4:	81 e0       	ldi	r24, 0x01	; 1
    7ad6:	20 91 3f 02 	lds	r18, 0x023F
    7ada:	30 91 40 02 	lds	r19, 0x0240
    7ade:	91 e0       	ldi	r25, 0x01	; 1
    7ae0:	24 3a       	cpi	r18, 0xA4	; 164
    7ae2:	39 07       	cpc	r19, r25
    7ae4:	1c f4       	brge	.+6      	; 0x7aec <cliffDetected+0x48>
	} else {
		return 0;
	}


}
    7ae6:	08 95       	ret
char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
	//if(proximityResult[8]<(proximityOffset[8]>>1) || proximityResult[9]<(proximityOffset[9]>>1) || proximityResult[10]<(proximityOffset[10]>>1) || proximityResult[11]<(proximityOffset[11]>>1)) {
		return 1;
    7ae8:	81 e0       	ldi	r24, 0x01	; 1
    7aea:	08 95       	ret
    7aec:	80 e0       	ldi	r24, 0x00	; 0
    7aee:	08 95       	ret
    7af0:	81 e0       	ldi	r24, 0x01	; 1
	} else {
		return 0;
	}


}
    7af2:	08 95       	ret

00007af4 <enableObstacleAvoidance>:

void enableObstacleAvoidance() {
	obstacleAvoidanceEnabled=1;
    7af4:	81 e0       	ldi	r24, 0x01	; 1
    7af6:	80 93 3a 04 	sts	0x043A, r24
}
    7afa:	08 95       	ret

00007afc <disableObstacleAvoidance>:

void disableObstacleAvoidance() {
	obstacleAvoidanceEnabled=0;
    7afc:	10 92 3a 04 	sts	0x043A, r1
}
    7b00:	08 95       	ret

00007b02 <enableCliffAvoidance>:

void enableCliffAvoidance() {
	cliffAvoidanceEnabled=1;
    7b02:	81 e0       	ldi	r24, 0x01	; 1
    7b04:	80 93 3b 04 	sts	0x043B, r24
}
    7b08:	08 95       	ret

00007b0a <disableCliffAvoidance>:

void disableCliffAvoidance() {
	cliffAvoidanceEnabled=0;
    7b0a:	10 92 3b 04 	sts	0x043B, r1
}
    7b0e:	08 95       	ret

00007b10 <initRGBleds>:
	// Period freq = Fosc/TOP (max timer value) => TOP = Fosc/period freq
	// We need a frequency of about 30 KHz => 8000000/30000 = 266
	// The waveform generation mode let us chose the TOP value to be 256
	// thus we get period freq = 8000000/256 = 31250 Hz

	TCCR1A = 0;
    7b10:	a0 e8       	ldi	r26, 0x80	; 128
    7b12:	b0 e0       	ldi	r27, 0x00	; 0
    7b14:	1c 92       	st	X, r1
	TCCR1B = 0;
    7b16:	e1 e8       	ldi	r30, 0x81	; 129
    7b18:	f0 e0       	ldi	r31, 0x00	; 0
    7b1a:	10 82       	st	Z, r1

	// enable OCA, OCB, OCC; clear on match, set at bottom
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << COM1C1) | (1 << WGM10); 	
    7b1c:	8c 91       	ld	r24, X
    7b1e:	89 6a       	ori	r24, 0xA9	; 169
    7b20:	8c 93       	st	X, r24
	// mode 5 => fast-pwm 8 bit; no prescaler
	TCCR1B |= (1 << WGM12) | (1 << CS10);										
    7b22:	80 81       	ld	r24, Z
    7b24:	89 60       	ori	r24, 0x09	; 9
    7b26:	80 83       	st	Z, r24
	// the values for the leds pwm goes from 0 (max power on) to 255 (off)
	OCR1A = pwm_red;
    7b28:	80 91 0c 02 	lds	r24, 0x020C
    7b2c:	90 e0       	ldi	r25, 0x00	; 0
    7b2e:	90 93 89 00 	sts	0x0089, r25
    7b32:	80 93 88 00 	sts	0x0088, r24
	OCR1B = pwm_green;
    7b36:	80 91 0d 02 	lds	r24, 0x020D
    7b3a:	90 e0       	ldi	r25, 0x00	; 0
    7b3c:	90 93 8b 00 	sts	0x008B, r25
    7b40:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = pwm_blue;
    7b44:	80 91 0e 02 	lds	r24, 0x020E
    7b48:	90 e0       	ldi	r25, 0x00	; 0
    7b4a:	90 93 8d 00 	sts	0x008D, r25
    7b4e:	80 93 8c 00 	sts	0x008C, r24

}
    7b52:	08 95       	ret

00007b54 <toggleBlueLed>:

void toggleBlueLed() {

	blinkState = 1 - blinkState;
    7b54:	81 e0       	ldi	r24, 0x01	; 1
    7b56:	90 91 e9 02 	lds	r25, 0x02E9
    7b5a:	89 1b       	sub	r24, r25
    7b5c:	80 93 e9 02 	sts	0x02E9, r24

	if(blinkState) {
    7b60:	88 23       	and	r24, r24
    7b62:	39 f4       	brne	.+14     	; 0x7b72 <toggleBlueLed+0x1e>
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
		OCR1C = 255;
	} else {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC to get the maximum output power; this is due to the fact 
    7b64:	80 91 80 00 	lds	r24, 0x0080
    7b68:	87 7f       	andi	r24, 0xF7	; 247
    7b6a:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// that the minimum duty cycle when the output compare is enable is 1 
    7b6e:	2f 98       	cbi	0x05, 7	; 5
    7b70:	08 95       	ret
void toggleBlueLed() {

	blinkState = 1 - blinkState;

	if(blinkState) {
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
    7b72:	80 91 80 00 	lds	r24, 0x0080
    7b76:	88 60       	ori	r24, 0x08	; 8
    7b78:	80 93 80 00 	sts	0x0080, r24
		OCR1C = 255;
    7b7c:	8f ef       	ldi	r24, 0xFF	; 255
    7b7e:	90 e0       	ldi	r25, 0x00	; 0
    7b80:	90 93 8d 00 	sts	0x008D, r25
    7b84:	80 93 8c 00 	sts	0x008C, r24
    7b88:	08 95       	ret

00007b8a <updateRedLed>:

}

void updateRedLed(unsigned char value) {

	if(value == 0) {
    7b8a:	88 23       	and	r24, r24
    7b8c:	59 f0       	breq	.+22     	; 0x7ba4 <updateRedLed+0x1a>
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1A1);	// always enable OCA in case it was disabled
    7b8e:	90 91 80 00 	lds	r25, 0x0080
    7b92:	90 68       	ori	r25, 0x80	; 128
    7b94:	90 93 80 00 	sts	0x0080, r25
		OCR1A = value;
    7b98:	90 e0       	ldi	r25, 0x00	; 0
    7b9a:	90 93 89 00 	sts	0x0089, r25
    7b9e:	80 93 88 00 	sts	0x0088, r24
    7ba2:	08 95       	ret
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
    7ba4:	80 91 80 00 	lds	r24, 0x0080
    7ba8:	8f 77       	andi	r24, 0x7F	; 127
    7baa:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
    7bae:	2d 98       	cbi	0x05, 5	; 5
    7bb0:	08 95       	ret

00007bb2 <updateGreenLed>:

}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
    7bb2:	88 23       	and	r24, r24
    7bb4:	59 f0       	breq	.+22     	; 0x7bcc <updateGreenLed+0x1a>
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
	} else {	
		TCCR1A |= (1 << COM1B1);	// always enable OCA in case it was disabled
    7bb6:	90 91 80 00 	lds	r25, 0x0080
    7bba:	90 62       	ori	r25, 0x20	; 32
    7bbc:	90 93 80 00 	sts	0x0080, r25
		OCR1B = value;
    7bc0:	90 e0       	ldi	r25, 0x00	; 0
    7bc2:	90 93 8b 00 	sts	0x008B, r25
    7bc6:	80 93 8a 00 	sts	0x008A, r24
    7bca:	08 95       	ret
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
    7bcc:	80 91 80 00 	lds	r24, 0x0080
    7bd0:	8f 7d       	andi	r24, 0xDF	; 223
    7bd2:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
    7bd6:	2e 98       	cbi	0x05, 6	; 5
    7bd8:	08 95       	ret

00007bda <updateBlueLed>:

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
    7bda:	88 23       	and	r24, r24
    7bdc:	59 f0       	breq	.+22     	; 0x7bf4 <updateBlueLed+0x1a>
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1C1);	// always enable OCA in case it was disabled
    7bde:	90 91 80 00 	lds	r25, 0x0080
    7be2:	98 60       	ori	r25, 0x08	; 8
    7be4:	90 93 80 00 	sts	0x0080, r25
		OCR1C = value;
    7be8:	90 e0       	ldi	r25, 0x00	; 0
    7bea:	90 93 8d 00 	sts	0x008D, r25
    7bee:	80 93 8c 00 	sts	0x008C, r24
    7bf2:	08 95       	ret
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
    7bf4:	80 91 80 00 	lds	r24, 0x0080
    7bf8:	87 7f       	andi	r24, 0xF7	; 247
    7bfa:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
    7bfe:	2f 98       	cbi	0x05, 7	; 5
    7c00:	08 95       	ret

00007c02 <setGreenLed>:

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    7c02:	83 30       	cpi	r24, 0x03	; 3
    7c04:	09 f4       	brne	.+2      	; 0x7c08 <setGreenLed+0x6>
    7c06:	5a c0       	rjmp	.+180    	; 0x7cbc <setGreenLed+0xba>
    7c08:	84 30       	cpi	r24, 0x04	; 4
    7c0a:	80 f0       	brcs	.+32     	; 0x7c2c <setGreenLed+0x2a>
    7c0c:	85 30       	cpi	r24, 0x05	; 5
    7c0e:	09 f4       	brne	.+2      	; 0x7c12 <setGreenLed+0x10>
    7c10:	41 c0       	rjmp	.+130    	; 0x7c94 <setGreenLed+0x92>
    7c12:	85 30       	cpi	r24, 0x05	; 5
    7c14:	d0 f4       	brcc	.+52     	; 0x7c4a <setGreenLed+0x48>
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
    7c16:	66 23       	and	r22, r22
    7c18:	09 f4       	brne	.+2      	; 0x7c1c <setGreenLed+0x1a>
    7c1a:	68 c0       	rjmp	.+208    	; 0x7cec <setGreenLed+0xea>
    7c1c:	80 91 0b 01 	lds	r24, 0x010B
    7c20:	8f 7e       	andi	r24, 0xEF	; 239
    7c22:	80 93 0b 01 	sts	0x010B, r24
    7c26:	80 91 0b 01 	lds	r24, 0x010B
    7c2a:	08 95       	ret

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    7c2c:	81 30       	cpi	r24, 0x01	; 1
    7c2e:	e1 f1       	breq	.+120    	; 0x7ca8 <setGreenLed+0xa6>
    7c30:	82 30       	cpi	r24, 0x02	; 2
    7c32:	80 f0       	brcs	.+32     	; 0x7c54 <setGreenLed+0x52>
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
    7c34:	66 23       	and	r22, r22
    7c36:	09 f4       	brne	.+2      	; 0x7c3a <setGreenLed+0x38>
    7c38:	46 c0       	rjmp	.+140    	; 0x7cc6 <setGreenLed+0xc4>
    7c3a:	80 91 0b 01 	lds	r24, 0x010B
    7c3e:	8b 7f       	andi	r24, 0xFB	; 251
    7c40:	80 93 0b 01 	sts	0x010B, r24
    7c44:	80 91 0b 01 	lds	r24, 0x010B
    7c48:	08 95       	ret

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    7c4a:	86 30       	cpi	r24, 0x06	; 6
    7c4c:	c9 f0       	breq	.+50     	; 0x7c80 <setGreenLed+0x7e>
    7c4e:	87 30       	cpi	r24, 0x07	; 7
    7c50:	61 f0       	breq	.+24     	; 0x7c6a <setGreenLed+0x68>
    7c52:	08 95       	ret

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
    7c54:	66 23       	and	r22, r22
    7c56:	09 f4       	brne	.+2      	; 0x7c5a <setGreenLed+0x58>
    7c58:	51 c0       	rjmp	.+162    	; 0x7cfc <setGreenLed+0xfa>
    7c5a:	80 91 0b 01 	lds	r24, 0x010B
    7c5e:	8e 7f       	andi	r24, 0xFE	; 254
    7c60:	80 93 0b 01 	sts	0x010B, r24
    7c64:	80 91 0b 01 	lds	r24, 0x010B
    7c68:	08 95       	ret
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
				break;

		case 7:	isOn?GREEN_LED7_ON:GREEN_LED7_OFF;
    7c6a:	66 23       	and	r22, r22
    7c6c:	09 f0       	breq	.+2      	; 0x7c70 <setGreenLed+0x6e>
    7c6e:	5e c0       	rjmp	.+188    	; 0x7d2c <setGreenLed+0x12a>
    7c70:	80 91 0b 01 	lds	r24, 0x010B
    7c74:	80 68       	ori	r24, 0x80	; 128
    7c76:	80 93 0b 01 	sts	0x010B, r24
    7c7a:	80 91 0b 01 	lds	r24, 0x010B
    7c7e:	08 95       	ret
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
    7c80:	66 23       	and	r22, r22
    7c82:	49 f1       	breq	.+82     	; 0x7cd6 <setGreenLed+0xd4>
    7c84:	80 91 0b 01 	lds	r24, 0x010B
    7c88:	8f 7b       	andi	r24, 0xBF	; 191
    7c8a:	80 93 0b 01 	sts	0x010B, r24
    7c8e:	80 91 0b 01 	lds	r24, 0x010B
    7c92:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
    7c94:	66 23       	and	r22, r22
    7c96:	d1 f1       	breq	.+116    	; 0x7d0c <setGreenLed+0x10a>
    7c98:	80 91 0b 01 	lds	r24, 0x010B
    7c9c:	8f 7d       	andi	r24, 0xDF	; 223
    7c9e:	80 93 0b 01 	sts	0x010B, r24
    7ca2:	80 91 0b 01 	lds	r24, 0x010B
    7ca6:	08 95       	ret
	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
    7ca8:	66 23       	and	r22, r22
    7caa:	c1 f1       	breq	.+112    	; 0x7d1c <setGreenLed+0x11a>
    7cac:	80 91 0b 01 	lds	r24, 0x010B
    7cb0:	8d 7f       	andi	r24, 0xFD	; 253
    7cb2:	80 93 0b 01 	sts	0x010B, r24
    7cb6:	80 91 0b 01 	lds	r24, 0x010B
    7cba:	08 95       	ret
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
    7cbc:	66 23       	and	r22, r22
    7cbe:	99 f0       	breq	.+38     	; 0x7ce6 <setGreenLed+0xe4>
    7cc0:	a3 98       	cbi	0x14, 3	; 20
    7cc2:	84 b3       	in	r24, 0x14	; 20
    7cc4:	08 95       	ret
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
    7cc6:	80 91 0b 01 	lds	r24, 0x010B
    7cca:	84 60       	ori	r24, 0x04	; 4
    7ccc:	80 93 0b 01 	sts	0x010B, r24
    7cd0:	80 91 0b 01 	lds	r24, 0x010B
    7cd4:	08 95       	ret
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
    7cd6:	80 91 0b 01 	lds	r24, 0x010B
    7cda:	80 64       	ori	r24, 0x40	; 64
    7cdc:	80 93 0b 01 	sts	0x010B, r24
    7ce0:	80 91 0b 01 	lds	r24, 0x010B
    7ce4:	08 95       	ret
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
    7ce6:	a3 9a       	sbi	0x14, 3	; 20
    7ce8:	84 b3       	in	r24, 0x14	; 20
    7cea:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
    7cec:	80 91 0b 01 	lds	r24, 0x010B
    7cf0:	80 61       	ori	r24, 0x10	; 16
    7cf2:	80 93 0b 01 	sts	0x010B, r24
    7cf6:	80 91 0b 01 	lds	r24, 0x010B
    7cfa:	08 95       	ret

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
    7cfc:	80 91 0b 01 	lds	r24, 0x010B
    7d00:	81 60       	ori	r24, 0x01	; 1
    7d02:	80 93 0b 01 	sts	0x010B, r24
    7d06:	80 91 0b 01 	lds	r24, 0x010B
    7d0a:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
    7d0c:	80 91 0b 01 	lds	r24, 0x010B
    7d10:	80 62       	ori	r24, 0x20	; 32
    7d12:	80 93 0b 01 	sts	0x010B, r24
    7d16:	80 91 0b 01 	lds	r24, 0x010B
    7d1a:	08 95       	ret
	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
    7d1c:	80 91 0b 01 	lds	r24, 0x010B
    7d20:	82 60       	ori	r24, 0x02	; 2
    7d22:	80 93 0b 01 	sts	0x010B, r24
    7d26:	80 91 0b 01 	lds	r24, 0x010B
    7d2a:	08 95       	ret
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
				break;

		case 7:	isOn?GREEN_LED7_ON:GREEN_LED7_OFF;
    7d2c:	80 91 0b 01 	lds	r24, 0x010B
    7d30:	8f 77       	andi	r24, 0x7F	; 127
    7d32:	80 93 0b 01 	sts	0x010B, r24
    7d36:	80 91 0b 01 	lds	r24, 0x010B
    7d3a:	08 95       	ret

00007d3c <turnOffGreenLeds>:

}

void turnOffGreenLeds() {

	GREEN_LED0_OFF;
    7d3c:	eb e0       	ldi	r30, 0x0B	; 11
    7d3e:	f1 e0       	ldi	r31, 0x01	; 1
    7d40:	80 81       	ld	r24, Z
    7d42:	81 60       	ori	r24, 0x01	; 1
    7d44:	80 83       	st	Z, r24
	GREEN_LED1_OFF;
    7d46:	80 81       	ld	r24, Z
    7d48:	82 60       	ori	r24, 0x02	; 2
    7d4a:	80 83       	st	Z, r24
	GREEN_LED2_OFF;
    7d4c:	80 81       	ld	r24, Z
    7d4e:	84 60       	ori	r24, 0x04	; 4
    7d50:	80 83       	st	Z, r24
	GREEN_LED3_OFF;
    7d52:	a3 9a       	sbi	0x14, 3	; 20
	GREEN_LED4_OFF;
    7d54:	80 81       	ld	r24, Z
    7d56:	80 61       	ori	r24, 0x10	; 16
    7d58:	80 83       	st	Z, r24
	GREEN_LED5_OFF;
    7d5a:	80 81       	ld	r24, Z
    7d5c:	80 62       	ori	r24, 0x20	; 32
    7d5e:	80 83       	st	Z, r24
	GREEN_LED6_OFF;
    7d60:	80 81       	ld	r24, Z
    7d62:	80 64       	ori	r24, 0x40	; 64
    7d64:	80 83       	st	Z, r24
	GREEN_LED7_OFF;
    7d66:	80 81       	ld	r24, Z
    7d68:	80 68       	ori	r24, 0x80	; 128
    7d6a:	80 83       	st	Z, r24

}
    7d6c:	08 95       	ret

00007d6e <turnOnGreenLeds>:


void turnOnGreenLeds() {

	GREEN_LED0_ON;
    7d6e:	eb e0       	ldi	r30, 0x0B	; 11
    7d70:	f1 e0       	ldi	r31, 0x01	; 1
    7d72:	80 81       	ld	r24, Z
    7d74:	8e 7f       	andi	r24, 0xFE	; 254
    7d76:	80 83       	st	Z, r24
	GREEN_LED1_ON;
    7d78:	80 81       	ld	r24, Z
    7d7a:	8d 7f       	andi	r24, 0xFD	; 253
    7d7c:	80 83       	st	Z, r24
	GREEN_LED2_ON;
    7d7e:	80 81       	ld	r24, Z
    7d80:	8b 7f       	andi	r24, 0xFB	; 251
    7d82:	80 83       	st	Z, r24
	GREEN_LED3_ON;
    7d84:	a3 98       	cbi	0x14, 3	; 20
	GREEN_LED4_ON;
    7d86:	80 81       	ld	r24, Z
    7d88:	8f 7e       	andi	r24, 0xEF	; 239
    7d8a:	80 83       	st	Z, r24
	GREEN_LED5_ON;
    7d8c:	80 81       	ld	r24, Z
    7d8e:	8f 7d       	andi	r24, 0xDF	; 223
    7d90:	80 83       	st	Z, r24
	GREEN_LED6_ON;
    7d92:	80 81       	ld	r24, Z
    7d94:	8f 7b       	andi	r24, 0xBF	; 191
    7d96:	80 83       	st	Z, r24
	GREEN_LED7_ON;
    7d98:	80 81       	ld	r24, Z
    7d9a:	8f 77       	andi	r24, 0x7F	; 127
    7d9c:	80 83       	st	Z, r24

}
    7d9e:	08 95       	ret

00007da0 <initAccelerometer>:

void initAccelerometer() {

	unsigned char ret;

	i2c_init();		// init I2C bus
    7da0:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <i2c_init>
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7da4:	80 91 14 02 	lds	r24, 0x0214
    7da8:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    7dac:	88 23       	and	r24, r24
    7dae:	49 f4       	brne	.+18     	; 0x7dc2 <initAccelerometer+0x22>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    7db0:	86 e1       	ldi	r24, 0x16	; 22
    7db2:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    7db6:	85 e4       	ldi	r24, 0x45	; 69
    7db8:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    7dbc:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <i2c_stop>
    7dc0:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    7dc2:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <i2c_stop>
	i2c_init();		// init I2C bus

	ret = initMMA7455L();

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
    7dc6:	86 ea       	ldi	r24, 0xA6	; 166
    7dc8:	90 e0       	ldi	r25, 0x00	; 0
    7dca:	90 93 15 02 	sts	0x0215, r25
    7dce:	80 93 14 02 	sts	0x0214, r24
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7dd2:	86 ea       	ldi	r24, 0xA6	; 166
    7dd4:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    7dd8:	88 23       	and	r24, r24
    7dda:	41 f5       	brne	.+80     	; 0x7e2c <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    7ddc:	8d e2       	ldi	r24, 0x2D	; 45
    7dde:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <i2c_write>
        i2c_write(0x08);	// measurement mode
    7de2:	88 e0       	ldi	r24, 0x08	; 8
    7de4:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    7de8:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7dec:	80 91 14 02 	lds	r24, 0x0214
    7df0:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    7df4:	88 23       	and	r24, r24
    7df6:	d1 f4       	brne	.+52     	; 0x7e2c <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    7df8:	81 e3       	ldi	r24, 0x31	; 49
    7dfa:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    7dfe:	80 e0       	ldi	r24, 0x00	; 0
    7e00:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    7e04:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7e08:	80 91 14 02 	lds	r24, 0x0214
    7e0c:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    7e10:	88 23       	and	r24, r24
    7e12:	61 f4       	brne	.+24     	; 0x7e2c <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    7e14:	8c e2       	ldi	r24, 0x2C	; 44
    7e16:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    7e1a:	89 e0       	ldi	r24, 0x09	; 9
    7e1c:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    7e20:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <i2c_stop>
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
		} else {
			useAccel = USE_ADXL345;
    7e24:	81 e0       	ldi	r24, 0x01	; 1
    7e26:	80 93 f9 03 	sts	0x03F9, r24
    7e2a:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    7e2c:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <i2c_stop>

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
    7e30:	82 e0       	ldi	r24, 0x02	; 2
    7e32:	80 93 f9 03 	sts	0x03F9, r24
    7e36:	08 95       	ret

00007e38 <initMMA7455L>:
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7e38:	80 91 14 02 	lds	r24, 0x0214
    7e3c:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    7e40:	88 23       	and	r24, r24
    7e42:	51 f4       	brne	.+20     	; 0x7e58 <initMMA7455L+0x20>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    7e44:	86 e1       	ldi	r24, 0x16	; 22
    7e46:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    7e4a:	85 e4       	ldi	r24, 0x45	; 69
    7e4c:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    7e50:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <i2c_stop>
    }

	return 0;				// configuration ok
    7e54:	80 e0       	ldi	r24, 0x00	; 0

}
    7e56:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    7e58:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <i2c_stop>
		return 1;
    7e5c:	81 e0       	ldi	r24, 0x01	; 1
    7e5e:	08 95       	ret

00007e60 <initADXL345>:
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7e60:	80 91 14 02 	lds	r24, 0x0214
    7e64:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    7e68:	88 23       	and	r24, r24
    7e6a:	31 f5       	brne	.+76     	; 0x7eb8 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    7e6c:	8d e2       	ldi	r24, 0x2D	; 45
    7e6e:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <i2c_write>
        i2c_write(0x08);	// measurement mode
    7e72:	88 e0       	ldi	r24, 0x08	; 8
    7e74:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    7e78:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7e7c:	80 91 14 02 	lds	r24, 0x0214
    7e80:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    7e84:	88 23       	and	r24, r24
    7e86:	c1 f4       	brne	.+48     	; 0x7eb8 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    7e88:	81 e3       	ldi	r24, 0x31	; 49
    7e8a:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    7e8e:	80 e0       	ldi	r24, 0x00	; 0
    7e90:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    7e94:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7e98:	80 91 14 02 	lds	r24, 0x0214
    7e9c:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    7ea0:	88 23       	and	r24, r24
    7ea2:	51 f4       	brne	.+20     	; 0x7eb8 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    7ea4:	8c e2       	ldi	r24, 0x2C	; 44
    7ea6:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    7eaa:	89 e0       	ldi	r24, 0x09	; 9
    7eac:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    7eb0:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <i2c_stop>
    }

	return 0;
    7eb4:	80 e0       	ldi	r24, 0x00	; 0

}
    7eb6:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    7eb8:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <i2c_stop>
		return 1;
    7ebc:	81 e0       	ldi	r24, 0x01	; 1
    7ebe:	08 95       	ret

00007ec0 <readAccelXY>:

	return 0;

}

void readAccelXY() {
    7ec0:	ff 92       	push	r15
    7ec2:	0f 93       	push	r16
    7ec4:	1f 93       	push	r17
    7ec6:	df 93       	push	r29
    7ec8:	cf 93       	push	r28
    7eca:	0f 92       	push	r0
    7ecc:	cd b7       	in	r28, 0x3d	; 61
    7ece:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[4];

	if(useAccel == USE_MMAX7455L) {
    7ed0:	80 91 f9 03 	lds	r24, 0x03F9
    7ed4:	88 23       	and	r24, r24
    7ed6:	91 f0       	breq	.+36     	; 0x7efc <readAccelXY+0x3c>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else if(useAccel == USE_ADXL345) {
    7ed8:	81 30       	cpi	r24, 0x01	; 1
    7eda:	09 f4       	brne	.+2      	; 0x7ede <readAccelXY+0x1e>
    7edc:	88 c0       	rjmp	.+272    	; 0x7fee <readAccelXY+0x12e>
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else {

		accX = 0;
    7ede:	10 92 fb 03 	sts	0x03FB, r1
    7ee2:	10 92 fa 03 	sts	0x03FA, r1
		accY = 0;
    7ee6:	10 92 fd 03 	sts	0x03FD, r1
    7eea:	10 92 fc 03 	sts	0x03FC, r1

	}

}
    7eee:	0f 90       	pop	r0
    7ef0:	cf 91       	pop	r28
    7ef2:	df 91       	pop	r29
    7ef4:	1f 91       	pop	r17
    7ef6:	0f 91       	pop	r16
    7ef8:	ff 90       	pop	r15
    7efa:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    7efc:	80 91 14 02 	lds	r24, 0x0214
    7f00:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    7f04:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
		i2c_write(0x32);											// sends address to read from (X LSB)
    7f06:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    7f0a:	80 91 14 02 	lds	r24, 0x0214
    7f0e:	8f 5f       	subi	r24, 0xFF	; 255
    7f10:	0e 94 6f 1f 	call	0x3ede	; 0x3ede <i2c_rep_start>

		for(i=0; i<3; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    7f14:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <i2c_readAck>
    7f18:	08 2f       	mov	r16, r24
    7f1a:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <i2c_readAck>
    7f1e:	f8 2e       	mov	r15, r24
    7f20:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <i2c_readAck>
    7f24:	18 2f       	mov	r17, r24
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    7f26:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <i2c_readNak>
		i2c_stop();													// set stop conditon = release bus
    7f2a:	89 83       	std	Y+1, r24	; 0x01
    7f2c:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    7f30:	90 91 98 08 	lds	r25, 0x0898
    7f34:	89 81       	ldd	r24, Y+1	; 0x01
    7f36:	99 23       	and	r25, r25
    7f38:	39 f1       	breq	.+78     	; 0x7f88 <readAccelXY+0xc8>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    7f3a:	4f 2d       	mov	r20, r15
    7f3c:	55 27       	eor	r21, r21
    7f3e:	47 fd       	sbrc	r20, 7
    7f40:	50 95       	com	r21
    7f42:	54 2f       	mov	r21, r20
    7f44:	44 27       	eor	r20, r20
    7f46:	60 2f       	mov	r22, r16
    7f48:	77 27       	eor	r23, r23
    7f4a:	67 fd       	sbrc	r22, 7
    7f4c:	70 95       	com	r23
    7f4e:	46 2b       	or	r20, r22
    7f50:	57 2b       	or	r21, r23
    7f52:	50 93 fb 03 	sts	0x03FB, r21
    7f56:	40 93 fa 03 	sts	0x03FA, r20
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    7f5a:	28 2f       	mov	r18, r24
    7f5c:	33 27       	eor	r19, r19
    7f5e:	27 fd       	sbrc	r18, 7
    7f60:	30 95       	com	r19
    7f62:	32 2f       	mov	r19, r18
    7f64:	22 27       	eor	r18, r18
    7f66:	81 2f       	mov	r24, r17
    7f68:	99 27       	eor	r25, r25
    7f6a:	87 fd       	sbrc	r24, 7
    7f6c:	90 95       	com	r25
    7f6e:	28 2b       	or	r18, r24
    7f70:	39 2b       	or	r19, r25
    7f72:	30 93 fd 03 	sts	0x03FD, r19
    7f76:	20 93 fc 03 	sts	0x03FC, r18
		accX = 0;
		accY = 0;

	}

}
    7f7a:	0f 90       	pop	r0
    7f7c:	cf 91       	pop	r28
    7f7e:	df 91       	pop	r29
    7f80:	1f 91       	pop	r17
    7f82:	0f 91       	pop	r16
    7f84:	ff 90       	pop	r15
    7f86:	08 95       	ret

		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    7f88:	4f 2d       	mov	r20, r15
    7f8a:	55 27       	eor	r21, r21
    7f8c:	47 fd       	sbrc	r20, 7
    7f8e:	50 95       	com	r21
    7f90:	54 2f       	mov	r21, r20
    7f92:	44 27       	eor	r20, r20
    7f94:	60 2f       	mov	r22, r16
    7f96:	77 27       	eor	r23, r23
    7f98:	67 fd       	sbrc	r22, 7
    7f9a:	70 95       	com	r23
    7f9c:	46 2b       	or	r20, r22
    7f9e:	57 2b       	or	r21, r23
    7fa0:	60 91 00 04 	lds	r22, 0x0400
    7fa4:	70 91 01 04 	lds	r23, 0x0401
    7fa8:	46 1b       	sub	r20, r22
    7faa:	57 0b       	sbc	r21, r23
    7fac:	50 93 fb 03 	sts	0x03FB, r21
    7fb0:	40 93 fa 03 	sts	0x03FA, r20
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    7fb4:	28 2f       	mov	r18, r24
    7fb6:	33 27       	eor	r19, r19
    7fb8:	27 fd       	sbrc	r18, 7
    7fba:	30 95       	com	r19
    7fbc:	32 2f       	mov	r19, r18
    7fbe:	22 27       	eor	r18, r18
    7fc0:	81 2f       	mov	r24, r17
    7fc2:	99 27       	eor	r25, r25
    7fc4:	87 fd       	sbrc	r24, 7
    7fc6:	90 95       	com	r25
    7fc8:	28 2b       	or	r18, r24
    7fca:	39 2b       	or	r19, r25
    7fcc:	80 91 02 04 	lds	r24, 0x0402
    7fd0:	90 91 03 04 	lds	r25, 0x0403
    7fd4:	28 1b       	sub	r18, r24
    7fd6:	39 0b       	sbc	r19, r25
    7fd8:	30 93 fd 03 	sts	0x03FD, r19
    7fdc:	20 93 fc 03 	sts	0x03FC, r18
		accX = 0;
		accY = 0;

	}

}
    7fe0:	0f 90       	pop	r0
    7fe2:	cf 91       	pop	r28
    7fe4:	df 91       	pop	r29
    7fe6:	1f 91       	pop	r17
    7fe8:	0f 91       	pop	r16
    7fea:	ff 90       	pop	r15
    7fec:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    7fee:	80 91 14 02 	lds	r24, 0x0214
    7ff2:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    7ff6:	82 e3       	ldi	r24, 0x32	; 50
    7ff8:	86 cf       	rjmp	.-244    	; 0x7f06 <readAccelXY+0x46>

00007ffa <readAccelXYZ>:

	}

}

void readAccelXYZ() {
    7ffa:	df 93       	push	r29
    7ffc:	cf 93       	push	r28
    7ffe:	00 d0       	rcall	.+0      	; 0x8000 <readAccelXYZ+0x6>
    8000:	00 d0       	rcall	.+0      	; 0x8002 <readAccelXYZ+0x8>
    8002:	cd b7       	in	r28, 0x3d	; 61
    8004:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[6];

	if(useAccel == USE_MMAX7455L) {
    8006:	80 91 f9 03 	lds	r24, 0x03F9
    800a:	88 23       	and	r24, r24
    800c:	c1 f0       	breq	.+48     	; 0x803e <readAccelXYZ+0x44>
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    800e:	81 30       	cpi	r24, 0x01	; 1
    8010:	09 f4       	brne	.+2      	; 0x8014 <readAccelXYZ+0x1a>
    8012:	ad c0       	rjmp	.+346    	; 0x816e <readAccelXYZ+0x174>
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else {

		accX = 0;
    8014:	10 92 fb 03 	sts	0x03FB, r1
    8018:	10 92 fa 03 	sts	0x03FA, r1
		accY = 0;
    801c:	10 92 fd 03 	sts	0x03FD, r1
    8020:	10 92 fc 03 	sts	0x03FC, r1
		accZ = 0;
    8024:	10 92 ff 03 	sts	0x03FF, r1
    8028:	10 92 fe 03 	sts	0x03FE, r1

	}

}
    802c:	26 96       	adiw	r28, 0x06	; 6
    802e:	0f b6       	in	r0, 0x3f	; 63
    8030:	f8 94       	cli
    8032:	de bf       	out	0x3e, r29	; 62
    8034:	0f be       	out	0x3f, r0	; 63
    8036:	cd bf       	out	0x3d, r28	; 61
    8038:	cf 91       	pop	r28
    803a:	df 91       	pop	r29
    803c:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    803e:	80 91 14 02 	lds	r24, 0x0214
    8042:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    8046:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
		i2c_write(0x32);											// sends address to read from (X LSB)
    8048:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    804c:	80 91 14 02 	lds	r24, 0x0214
    8050:	8f 5f       	subi	r24, 0xFF	; 255
    8052:	0e 94 6f 1f 	call	0x3ede	; 0x3ede <i2c_rep_start>

		for(i=0; i<5; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    8056:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <i2c_readAck>
    805a:	89 83       	std	Y+1, r24	; 0x01
    805c:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <i2c_readAck>
    8060:	8a 83       	std	Y+2, r24	; 0x02
    8062:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <i2c_readAck>
    8066:	8b 83       	std	Y+3, r24	; 0x03
    8068:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <i2c_readAck>
    806c:	8c 83       	std	Y+4, r24	; 0x04
    806e:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <i2c_readAck>
    8072:	8d 83       	std	Y+5, r24	; 0x05
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    8074:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <i2c_readNak>
    8078:	8e 83       	std	Y+6, r24	; 0x06
		i2c_stop();													// set stop conditon = release bus
    807a:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    807e:	80 91 98 08 	lds	r24, 0x0898
    8082:	88 23       	and	r24, r24
    8084:	89 f1       	breq	.+98     	; 0x80e8 <readAccelXYZ+0xee>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    8086:	8a 81       	ldd	r24, Y+2	; 0x02
    8088:	99 27       	eor	r25, r25
    808a:	87 fd       	sbrc	r24, 7
    808c:	90 95       	com	r25
    808e:	98 2f       	mov	r25, r24
    8090:	88 27       	eor	r24, r24
    8092:	29 81       	ldd	r18, Y+1	; 0x01
    8094:	33 27       	eor	r19, r19
    8096:	27 fd       	sbrc	r18, 7
    8098:	30 95       	com	r19
    809a:	82 2b       	or	r24, r18
    809c:	93 2b       	or	r25, r19
    809e:	90 93 fb 03 	sts	0x03FB, r25
    80a2:	80 93 fa 03 	sts	0x03FA, r24
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    80a6:	8c 81       	ldd	r24, Y+4	; 0x04
    80a8:	99 27       	eor	r25, r25
    80aa:	87 fd       	sbrc	r24, 7
    80ac:	90 95       	com	r25
    80ae:	98 2f       	mov	r25, r24
    80b0:	88 27       	eor	r24, r24
    80b2:	2b 81       	ldd	r18, Y+3	; 0x03
    80b4:	33 27       	eor	r19, r19
    80b6:	27 fd       	sbrc	r18, 7
    80b8:	30 95       	com	r19
    80ba:	82 2b       	or	r24, r18
    80bc:	93 2b       	or	r25, r19
    80be:	90 93 fd 03 	sts	0x03FD, r25
    80c2:	80 93 fc 03 	sts	0x03FC, r24
			accZ = ((signed int)buff[5]<<8)|buff[4];    			// Z axis
    80c6:	8e 81       	ldd	r24, Y+6	; 0x06
    80c8:	99 27       	eor	r25, r25
    80ca:	87 fd       	sbrc	r24, 7
    80cc:	90 95       	com	r25
    80ce:	98 2f       	mov	r25, r24
    80d0:	88 27       	eor	r24, r24
    80d2:	2d 81       	ldd	r18, Y+5	; 0x05
    80d4:	33 27       	eor	r19, r19
    80d6:	27 fd       	sbrc	r18, 7
    80d8:	30 95       	com	r19
    80da:	82 2b       	or	r24, r18
    80dc:	93 2b       	or	r25, r19
    80de:	90 93 ff 03 	sts	0x03FF, r25
    80e2:	80 93 fe 03 	sts	0x03FE, r24
    80e6:	a2 cf       	rjmp	.-188    	; 0x802c <readAccelXYZ+0x32>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    80e8:	8a 81       	ldd	r24, Y+2	; 0x02
    80ea:	99 27       	eor	r25, r25
    80ec:	87 fd       	sbrc	r24, 7
    80ee:	90 95       	com	r25
    80f0:	98 2f       	mov	r25, r24
    80f2:	88 27       	eor	r24, r24
    80f4:	29 81       	ldd	r18, Y+1	; 0x01
    80f6:	33 27       	eor	r19, r19
    80f8:	27 fd       	sbrc	r18, 7
    80fa:	30 95       	com	r19
    80fc:	82 2b       	or	r24, r18
    80fe:	93 2b       	or	r25, r19
    8100:	20 91 00 04 	lds	r18, 0x0400
    8104:	30 91 01 04 	lds	r19, 0x0401
    8108:	82 1b       	sub	r24, r18
    810a:	93 0b       	sbc	r25, r19
    810c:	90 93 fb 03 	sts	0x03FB, r25
    8110:	80 93 fa 03 	sts	0x03FA, r24
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    8114:	8c 81       	ldd	r24, Y+4	; 0x04
    8116:	99 27       	eor	r25, r25
    8118:	87 fd       	sbrc	r24, 7
    811a:	90 95       	com	r25
    811c:	98 2f       	mov	r25, r24
    811e:	88 27       	eor	r24, r24
    8120:	2b 81       	ldd	r18, Y+3	; 0x03
    8122:	33 27       	eor	r19, r19
    8124:	27 fd       	sbrc	r18, 7
    8126:	30 95       	com	r19
    8128:	82 2b       	or	r24, r18
    812a:	93 2b       	or	r25, r19
    812c:	20 91 02 04 	lds	r18, 0x0402
    8130:	30 91 03 04 	lds	r19, 0x0403
    8134:	82 1b       	sub	r24, r18
    8136:	93 0b       	sbc	r25, r19
    8138:	90 93 fd 03 	sts	0x03FD, r25
    813c:	80 93 fc 03 	sts	0x03FC, r24
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
    8140:	8e 81       	ldd	r24, Y+6	; 0x06
    8142:	99 27       	eor	r25, r25
    8144:	87 fd       	sbrc	r24, 7
    8146:	90 95       	com	r25
    8148:	98 2f       	mov	r25, r24
    814a:	88 27       	eor	r24, r24
    814c:	2d 81       	ldd	r18, Y+5	; 0x05
    814e:	33 27       	eor	r19, r19
    8150:	27 fd       	sbrc	r18, 7
    8152:	30 95       	com	r19
    8154:	82 2b       	or	r24, r18
    8156:	93 2b       	or	r25, r19
    8158:	20 91 04 04 	lds	r18, 0x0404
    815c:	30 91 05 04 	lds	r19, 0x0405
    8160:	82 1b       	sub	r24, r18
    8162:	93 0b       	sbc	r25, r19
    8164:	90 93 ff 03 	sts	0x03FF, r25
    8168:	80 93 fe 03 	sts	0x03FE, r24
    816c:	5f cf       	rjmp	.-322    	; 0x802c <readAccelXYZ+0x32>
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    816e:	80 91 14 02 	lds	r24, 0x0214
    8172:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    8176:	82 e3       	ldi	r24, 0x32	; 50
    8178:	67 cf       	rjmp	.-306    	; 0x8048 <readAccelXYZ+0x4e>

0000817a <calibrateSensors>:

#include "sensors.h"


void calibrateSensors() {
    817a:	cf 93       	push	r28
    817c:	df 93       	push	r29

	unsigned int i=0;

	pwm_red = 0;
    817e:	10 92 0c 02 	sts	0x020C, r1
	pwm_green = 0;
    8182:	10 92 0d 02 	sts	0x020D, r1
	pwm_blue = 0;
    8186:	10 92 0e 02 	sts	0x020E, r1
	updateRedLed(pwm_red);
    818a:	80 e0       	ldi	r24, 0x00	; 0
    818c:	0e 94 c5 3d 	call	0x7b8a	; 0x7b8a <updateRedLed>
	updateGreenLed(pwm_green);
    8190:	80 91 0d 02 	lds	r24, 0x020D
    8194:	0e 94 d9 3d 	call	0x7bb2	; 0x7bb2 <updateGreenLed>
	updateBlueLed(pwm_blue);
    8198:	80 91 0e 02 	lds	r24, 0x020E
    819c:	0e 94 ed 3d 	call	0x7bda	; 0x7bda <updateBlueLed>

	calibrationCycle = 0;
    81a0:	10 92 1c 04 	sts	0x041C, r1
    81a4:	10 92 1b 04 	sts	0x041B, r1
	startCalibration = 1;
    81a8:	81 e0       	ldi	r24, 0x01	; 1
    81aa:	80 93 98 08 	sts	0x0898, r24
					}
					accOffsetXSum = 0;
					accOffsetYSum = 0;
					accOffsetZSum = 0;

					calibrationCycle++;
    81ae:	c1 e0       	ldi	r28, 0x01	; 1
    81b0:	d0 e0       	ldi	r29, 0x00	; 0
	calibrationCycle = 0;
	startCalibration = 1;

	while(startCalibration) {

		readAccelXYZ();
    81b2:	0e 94 fd 3f 	call	0x7ffa	; 0x7ffa <readAccelXYZ>

		if(calibrationCycle<=CALIBRATION_CYCLES) {
    81b6:	20 91 1b 04 	lds	r18, 0x041B
    81ba:	30 91 1c 04 	lds	r19, 0x041C
    81be:	21 31       	cpi	r18, 0x11	; 17
    81c0:	31 05       	cpc	r19, r1
    81c2:	0c f4       	brge	.+2      	; 0x81c6 <calibrateSensors+0x4c>
    81c4:	35 c1       	rjmp	.+618    	; 0x8430 <calibrateSensors+0x2b6>
			continue;

		} else if(calibrationCycle > CALIBRATION_CYCLES) {

			for(i=0;i<12;i++) {
				proximityOffset[i] = proximitySum[i]>>4;
    81c6:	80 91 59 02 	lds	r24, 0x0259
    81ca:	90 91 5a 02 	lds	r25, 0x025A
    81ce:	a0 91 5b 02 	lds	r26, 0x025B
    81d2:	b0 91 5c 02 	lds	r27, 0x025C
    81d6:	54 e0       	ldi	r21, 0x04	; 4
    81d8:	b6 95       	lsr	r27
    81da:	a7 95       	ror	r26
    81dc:	97 95       	ror	r25
    81de:	87 95       	ror	r24
    81e0:	5a 95       	dec	r21
    81e2:	d1 f7       	brne	.-12     	; 0x81d8 <calibrateSensors+0x5e>
    81e4:	90 93 42 02 	sts	0x0242, r25
    81e8:	80 93 41 02 	sts	0x0241, r24
    81ec:	80 91 5d 02 	lds	r24, 0x025D
    81f0:	90 91 5e 02 	lds	r25, 0x025E
    81f4:	a0 91 5f 02 	lds	r26, 0x025F
    81f8:	b0 91 60 02 	lds	r27, 0x0260
    81fc:	44 e0       	ldi	r20, 0x04	; 4
    81fe:	b6 95       	lsr	r27
    8200:	a7 95       	ror	r26
    8202:	97 95       	ror	r25
    8204:	87 95       	ror	r24
    8206:	4a 95       	dec	r20
    8208:	d1 f7       	brne	.-12     	; 0x81fe <calibrateSensors+0x84>
    820a:	90 93 44 02 	sts	0x0244, r25
    820e:	80 93 43 02 	sts	0x0243, r24
    8212:	80 91 61 02 	lds	r24, 0x0261
    8216:	90 91 62 02 	lds	r25, 0x0262
    821a:	a0 91 63 02 	lds	r26, 0x0263
    821e:	b0 91 64 02 	lds	r27, 0x0264
    8222:	34 e0       	ldi	r19, 0x04	; 4
    8224:	b6 95       	lsr	r27
    8226:	a7 95       	ror	r26
    8228:	97 95       	ror	r25
    822a:	87 95       	ror	r24
    822c:	3a 95       	dec	r19
    822e:	d1 f7       	brne	.-12     	; 0x8224 <calibrateSensors+0xaa>
    8230:	90 93 46 02 	sts	0x0246, r25
    8234:	80 93 45 02 	sts	0x0245, r24
    8238:	80 91 65 02 	lds	r24, 0x0265
    823c:	90 91 66 02 	lds	r25, 0x0266
    8240:	a0 91 67 02 	lds	r26, 0x0267
    8244:	b0 91 68 02 	lds	r27, 0x0268
    8248:	24 e0       	ldi	r18, 0x04	; 4
    824a:	b6 95       	lsr	r27
    824c:	a7 95       	ror	r26
    824e:	97 95       	ror	r25
    8250:	87 95       	ror	r24
    8252:	2a 95       	dec	r18
    8254:	d1 f7       	brne	.-12     	; 0x824a <calibrateSensors+0xd0>
    8256:	90 93 48 02 	sts	0x0248, r25
    825a:	80 93 47 02 	sts	0x0247, r24
    825e:	80 91 69 02 	lds	r24, 0x0269
    8262:	90 91 6a 02 	lds	r25, 0x026A
    8266:	a0 91 6b 02 	lds	r26, 0x026B
    826a:	b0 91 6c 02 	lds	r27, 0x026C
    826e:	f4 e0       	ldi	r31, 0x04	; 4
    8270:	b6 95       	lsr	r27
    8272:	a7 95       	ror	r26
    8274:	97 95       	ror	r25
    8276:	87 95       	ror	r24
    8278:	fa 95       	dec	r31
    827a:	d1 f7       	brne	.-12     	; 0x8270 <calibrateSensors+0xf6>
    827c:	90 93 4a 02 	sts	0x024A, r25
    8280:	80 93 49 02 	sts	0x0249, r24
    8284:	80 91 6d 02 	lds	r24, 0x026D
    8288:	90 91 6e 02 	lds	r25, 0x026E
    828c:	a0 91 6f 02 	lds	r26, 0x026F
    8290:	b0 91 70 02 	lds	r27, 0x0270
    8294:	e4 e0       	ldi	r30, 0x04	; 4
    8296:	b6 95       	lsr	r27
    8298:	a7 95       	ror	r26
    829a:	97 95       	ror	r25
    829c:	87 95       	ror	r24
    829e:	ea 95       	dec	r30
    82a0:	d1 f7       	brne	.-12     	; 0x8296 <calibrateSensors+0x11c>
    82a2:	90 93 4c 02 	sts	0x024C, r25
    82a6:	80 93 4b 02 	sts	0x024B, r24
    82aa:	80 91 71 02 	lds	r24, 0x0271
    82ae:	90 91 72 02 	lds	r25, 0x0272
    82b2:	a0 91 73 02 	lds	r26, 0x0273
    82b6:	b0 91 74 02 	lds	r27, 0x0274
    82ba:	74 e0       	ldi	r23, 0x04	; 4
    82bc:	b6 95       	lsr	r27
    82be:	a7 95       	ror	r26
    82c0:	97 95       	ror	r25
    82c2:	87 95       	ror	r24
    82c4:	7a 95       	dec	r23
    82c6:	d1 f7       	brne	.-12     	; 0x82bc <calibrateSensors+0x142>
    82c8:	90 93 4e 02 	sts	0x024E, r25
    82cc:	80 93 4d 02 	sts	0x024D, r24
    82d0:	80 91 75 02 	lds	r24, 0x0275
    82d4:	90 91 76 02 	lds	r25, 0x0276
    82d8:	a0 91 77 02 	lds	r26, 0x0277
    82dc:	b0 91 78 02 	lds	r27, 0x0278
    82e0:	64 e0       	ldi	r22, 0x04	; 4
    82e2:	b6 95       	lsr	r27
    82e4:	a7 95       	ror	r26
    82e6:	97 95       	ror	r25
    82e8:	87 95       	ror	r24
    82ea:	6a 95       	dec	r22
    82ec:	d1 f7       	brne	.-12     	; 0x82e2 <calibrateSensors+0x168>
    82ee:	90 93 50 02 	sts	0x0250, r25
    82f2:	80 93 4f 02 	sts	0x024F, r24
    82f6:	80 91 7d 02 	lds	r24, 0x027D
    82fa:	90 91 7e 02 	lds	r25, 0x027E
    82fe:	a0 91 7f 02 	lds	r26, 0x027F
    8302:	b0 91 80 02 	lds	r27, 0x0280
    8306:	54 e0       	ldi	r21, 0x04	; 4
    8308:	b6 95       	lsr	r27
    830a:	a7 95       	ror	r26
    830c:	97 95       	ror	r25
    830e:	87 95       	ror	r24
    8310:	5a 95       	dec	r21
    8312:	d1 f7       	brne	.-12     	; 0x8308 <calibrateSensors+0x18e>
    8314:	9c 01       	movw	r18, r24
    8316:	80 91 81 02 	lds	r24, 0x0281
    831a:	90 91 82 02 	lds	r25, 0x0282
    831e:	a0 91 83 02 	lds	r26, 0x0283
    8322:	b0 91 84 02 	lds	r27, 0x0284
    8326:	44 e0       	ldi	r20, 0x04	; 4
    8328:	b6 95       	lsr	r27
    832a:	a7 95       	ror	r26
    832c:	97 95       	ror	r25
    832e:	87 95       	ror	r24
    8330:	4a 95       	dec	r20
    8332:	d1 f7       	brne	.-12     	; 0x8328 <calibrateSensors+0x1ae>
    8334:	bc 01       	movw	r22, r24
    8336:	80 91 85 02 	lds	r24, 0x0285
    833a:	90 91 86 02 	lds	r25, 0x0286
    833e:	a0 91 87 02 	lds	r26, 0x0287
    8342:	b0 91 88 02 	lds	r27, 0x0288
    8346:	f4 e0       	ldi	r31, 0x04	; 4
    8348:	b6 95       	lsr	r27
    834a:	a7 95       	ror	r26
    834c:	97 95       	ror	r25
    834e:	87 95       	ror	r24
    8350:	fa 95       	dec	r31
    8352:	d1 f7       	brne	.-12     	; 0x8348 <calibrateSensors+0x1ce>
    8354:	ac 01       	movw	r20, r24
    8356:	80 91 79 02 	lds	r24, 0x0279
    835a:	90 91 7a 02 	lds	r25, 0x027A
    835e:	a0 91 7b 02 	lds	r26, 0x027B
    8362:	b0 91 7c 02 	lds	r27, 0x027C
    8366:	e4 e0       	ldi	r30, 0x04	; 4
    8368:	b6 95       	lsr	r27
    836a:	a7 95       	ror	r26
    836c:	97 95       	ror	r25
    836e:	87 95       	ror	r24
    8370:	ea 95       	dec	r30
    8372:	d1 f7       	brne	.-12     	; 0x8368 <calibrateSensors+0x1ee>
			}

			for(i=8; i<12; i++) {
				proximityOffset[i] -= 512;	// move the "0" to 512 (values around 512)
    8374:	80 50       	subi	r24, 0x00	; 0
    8376:	92 40       	sbci	r25, 0x02	; 2
    8378:	90 93 52 02 	sts	0x0252, r25
    837c:	80 93 51 02 	sts	0x0251, r24
    8380:	20 50       	subi	r18, 0x00	; 0
    8382:	32 40       	sbci	r19, 0x02	; 2
    8384:	30 93 54 02 	sts	0x0254, r19
    8388:	20 93 53 02 	sts	0x0253, r18
    838c:	60 50       	subi	r22, 0x00	; 0
    838e:	72 40       	sbci	r23, 0x02	; 2
    8390:	70 93 56 02 	sts	0x0256, r23
    8394:	60 93 55 02 	sts	0x0255, r22
    8398:	40 50       	subi	r20, 0x00	; 0
    839a:	52 40       	sbci	r21, 0x02	; 2
    839c:	50 93 58 02 	sts	0x0258, r21
    83a0:	40 93 57 02 	sts	0x0257, r20
			}

			accOffsetX = accOffsetXSum>>4;
    83a4:	80 91 06 04 	lds	r24, 0x0406
    83a8:	90 91 07 04 	lds	r25, 0x0407
    83ac:	95 95       	asr	r25
    83ae:	87 95       	ror	r24
    83b0:	95 95       	asr	r25
    83b2:	87 95       	ror	r24
    83b4:	95 95       	asr	r25
    83b6:	87 95       	ror	r24
    83b8:	95 95       	asr	r25
    83ba:	87 95       	ror	r24
    83bc:	90 93 01 04 	sts	0x0401, r25
    83c0:	80 93 00 04 	sts	0x0400, r24
			accOffsetY = accOffsetYSum>>4;
    83c4:	80 91 08 04 	lds	r24, 0x0408
    83c8:	90 91 09 04 	lds	r25, 0x0409
    83cc:	95 95       	asr	r25
    83ce:	87 95       	ror	r24
    83d0:	95 95       	asr	r25
    83d2:	87 95       	ror	r24
    83d4:	95 95       	asr	r25
    83d6:	87 95       	ror	r24
    83d8:	95 95       	asr	r25
    83da:	87 95       	ror	r24
    83dc:	90 93 03 04 	sts	0x0403, r25
    83e0:	80 93 02 04 	sts	0x0402, r24
			accOffsetZ = accOffsetZSum>>4;
    83e4:	80 91 0a 04 	lds	r24, 0x040A
    83e8:	90 91 0b 04 	lds	r25, 0x040B
    83ec:	95 95       	asr	r25
    83ee:	87 95       	ror	r24
    83f0:	95 95       	asr	r25
    83f2:	87 95       	ror	r24
    83f4:	95 95       	asr	r25
    83f6:	87 95       	ror	r24
    83f8:	95 95       	asr	r25
    83fa:	87 95       	ror	r24
    83fc:	90 93 05 04 	sts	0x0405, r25
    8400:	80 93 04 04 	sts	0x0404, r24

			//proxUpdated = 0;
			//if(proxUpdated) {	
				startCalibration = 0;					
    8404:	10 92 98 08 	sts	0x0898, r1

		}

	}

	pwm_red = 255;
    8408:	8f ef       	ldi	r24, 0xFF	; 255
    840a:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    840e:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    8412:	80 93 0e 02 	sts	0x020E, r24
	updateRedLed(pwm_red);
    8416:	0e 94 c5 3d 	call	0x7b8a	; 0x7b8a <updateRedLed>
	updateGreenLed(pwm_green);
    841a:	80 91 0d 02 	lds	r24, 0x020D
    841e:	0e 94 d9 3d 	call	0x7bb2	; 0x7bb2 <updateGreenLed>
	updateBlueLed(pwm_blue);
    8422:	80 91 0e 02 	lds	r24, 0x020E
    8426:	0e 94 ed 3d 	call	0x7bda	; 0x7bda <updateBlueLed>

}
    842a:	df 91       	pop	r29
    842c:	cf 91       	pop	r28
    842e:	08 95       	ret

		readAccelXYZ();

		if(calibrationCycle<=CALIBRATION_CYCLES) {

			if(proxUpdated) {
    8430:	80 91 90 02 	lds	r24, 0x0290
    8434:	88 23       	and	r24, r24
    8436:	09 f4       	brne	.+2      	; 0x843a <calibrateSensors+0x2c0>
    8438:	86 c1       	rjmp	.+780    	; 0x8746 <calibrateSensors+0x5cc>

				proxUpdated = 0;
    843a:	10 92 90 02 	sts	0x0290, r1

				if(calibrationCycle==0) {		// reset all variables
    843e:	21 15       	cp	r18, r1
    8440:	31 05       	cpc	r19, r1
    8442:	09 f4       	brne	.+2      	; 0x8446 <calibrateSensors+0x2cc>
    8444:	86 c1       	rjmp	.+780    	; 0x8752 <calibrateSensors+0x5d8>
												// "proximityResult" hasn't the offset reset to 0. so we start the actual calibration
												// the next time
				}

				for (i=0;i<12;i++) {
					proximitySum[i] += proximityResult[i];
    8446:	80 91 29 02 	lds	r24, 0x0229
    844a:	90 91 2a 02 	lds	r25, 0x022A
    844e:	aa 27       	eor	r26, r26
    8450:	97 fd       	sbrc	r25, 7
    8452:	a0 95       	com	r26
    8454:	ba 2f       	mov	r27, r26
    8456:	40 91 59 02 	lds	r20, 0x0259
    845a:	50 91 5a 02 	lds	r21, 0x025A
    845e:	60 91 5b 02 	lds	r22, 0x025B
    8462:	70 91 5c 02 	lds	r23, 0x025C
    8466:	84 0f       	add	r24, r20
    8468:	95 1f       	adc	r25, r21
    846a:	a6 1f       	adc	r26, r22
    846c:	b7 1f       	adc	r27, r23
    846e:	80 93 59 02 	sts	0x0259, r24
    8472:	90 93 5a 02 	sts	0x025A, r25
    8476:	a0 93 5b 02 	sts	0x025B, r26
    847a:	b0 93 5c 02 	sts	0x025C, r27
    847e:	80 91 2b 02 	lds	r24, 0x022B
    8482:	90 91 2c 02 	lds	r25, 0x022C
    8486:	aa 27       	eor	r26, r26
    8488:	97 fd       	sbrc	r25, 7
    848a:	a0 95       	com	r26
    848c:	ba 2f       	mov	r27, r26
    848e:	40 91 5d 02 	lds	r20, 0x025D
    8492:	50 91 5e 02 	lds	r21, 0x025E
    8496:	60 91 5f 02 	lds	r22, 0x025F
    849a:	70 91 60 02 	lds	r23, 0x0260
    849e:	84 0f       	add	r24, r20
    84a0:	95 1f       	adc	r25, r21
    84a2:	a6 1f       	adc	r26, r22
    84a4:	b7 1f       	adc	r27, r23
    84a6:	80 93 5d 02 	sts	0x025D, r24
    84aa:	90 93 5e 02 	sts	0x025E, r25
    84ae:	a0 93 5f 02 	sts	0x025F, r26
    84b2:	b0 93 60 02 	sts	0x0260, r27
    84b6:	80 91 2d 02 	lds	r24, 0x022D
    84ba:	90 91 2e 02 	lds	r25, 0x022E
    84be:	aa 27       	eor	r26, r26
    84c0:	97 fd       	sbrc	r25, 7
    84c2:	a0 95       	com	r26
    84c4:	ba 2f       	mov	r27, r26
    84c6:	40 91 61 02 	lds	r20, 0x0261
    84ca:	50 91 62 02 	lds	r21, 0x0262
    84ce:	60 91 63 02 	lds	r22, 0x0263
    84d2:	70 91 64 02 	lds	r23, 0x0264
    84d6:	84 0f       	add	r24, r20
    84d8:	95 1f       	adc	r25, r21
    84da:	a6 1f       	adc	r26, r22
    84dc:	b7 1f       	adc	r27, r23
    84de:	80 93 61 02 	sts	0x0261, r24
    84e2:	90 93 62 02 	sts	0x0262, r25
    84e6:	a0 93 63 02 	sts	0x0263, r26
    84ea:	b0 93 64 02 	sts	0x0264, r27
    84ee:	80 91 2f 02 	lds	r24, 0x022F
    84f2:	90 91 30 02 	lds	r25, 0x0230
    84f6:	aa 27       	eor	r26, r26
    84f8:	97 fd       	sbrc	r25, 7
    84fa:	a0 95       	com	r26
    84fc:	ba 2f       	mov	r27, r26
    84fe:	40 91 65 02 	lds	r20, 0x0265
    8502:	50 91 66 02 	lds	r21, 0x0266
    8506:	60 91 67 02 	lds	r22, 0x0267
    850a:	70 91 68 02 	lds	r23, 0x0268
    850e:	84 0f       	add	r24, r20
    8510:	95 1f       	adc	r25, r21
    8512:	a6 1f       	adc	r26, r22
    8514:	b7 1f       	adc	r27, r23
    8516:	80 93 65 02 	sts	0x0265, r24
    851a:	90 93 66 02 	sts	0x0266, r25
    851e:	a0 93 67 02 	sts	0x0267, r26
    8522:	b0 93 68 02 	sts	0x0268, r27
    8526:	80 91 31 02 	lds	r24, 0x0231
    852a:	90 91 32 02 	lds	r25, 0x0232
    852e:	aa 27       	eor	r26, r26
    8530:	97 fd       	sbrc	r25, 7
    8532:	a0 95       	com	r26
    8534:	ba 2f       	mov	r27, r26
    8536:	40 91 69 02 	lds	r20, 0x0269
    853a:	50 91 6a 02 	lds	r21, 0x026A
    853e:	60 91 6b 02 	lds	r22, 0x026B
    8542:	70 91 6c 02 	lds	r23, 0x026C
    8546:	84 0f       	add	r24, r20
    8548:	95 1f       	adc	r25, r21
    854a:	a6 1f       	adc	r26, r22
    854c:	b7 1f       	adc	r27, r23
    854e:	80 93 69 02 	sts	0x0269, r24
    8552:	90 93 6a 02 	sts	0x026A, r25
    8556:	a0 93 6b 02 	sts	0x026B, r26
    855a:	b0 93 6c 02 	sts	0x026C, r27
    855e:	80 91 33 02 	lds	r24, 0x0233
    8562:	90 91 34 02 	lds	r25, 0x0234
    8566:	aa 27       	eor	r26, r26
    8568:	97 fd       	sbrc	r25, 7
    856a:	a0 95       	com	r26
    856c:	ba 2f       	mov	r27, r26
    856e:	40 91 6d 02 	lds	r20, 0x026D
    8572:	50 91 6e 02 	lds	r21, 0x026E
    8576:	60 91 6f 02 	lds	r22, 0x026F
    857a:	70 91 70 02 	lds	r23, 0x0270
    857e:	84 0f       	add	r24, r20
    8580:	95 1f       	adc	r25, r21
    8582:	a6 1f       	adc	r26, r22
    8584:	b7 1f       	adc	r27, r23
    8586:	80 93 6d 02 	sts	0x026D, r24
    858a:	90 93 6e 02 	sts	0x026E, r25
    858e:	a0 93 6f 02 	sts	0x026F, r26
    8592:	b0 93 70 02 	sts	0x0270, r27
    8596:	80 91 35 02 	lds	r24, 0x0235
    859a:	90 91 36 02 	lds	r25, 0x0236
    859e:	aa 27       	eor	r26, r26
    85a0:	97 fd       	sbrc	r25, 7
    85a2:	a0 95       	com	r26
    85a4:	ba 2f       	mov	r27, r26
    85a6:	40 91 71 02 	lds	r20, 0x0271
    85aa:	50 91 72 02 	lds	r21, 0x0272
    85ae:	60 91 73 02 	lds	r22, 0x0273
    85b2:	70 91 74 02 	lds	r23, 0x0274
    85b6:	84 0f       	add	r24, r20
    85b8:	95 1f       	adc	r25, r21
    85ba:	a6 1f       	adc	r26, r22
    85bc:	b7 1f       	adc	r27, r23
    85be:	80 93 71 02 	sts	0x0271, r24
    85c2:	90 93 72 02 	sts	0x0272, r25
    85c6:	a0 93 73 02 	sts	0x0273, r26
    85ca:	b0 93 74 02 	sts	0x0274, r27
    85ce:	80 91 37 02 	lds	r24, 0x0237
    85d2:	90 91 38 02 	lds	r25, 0x0238
    85d6:	aa 27       	eor	r26, r26
    85d8:	97 fd       	sbrc	r25, 7
    85da:	a0 95       	com	r26
    85dc:	ba 2f       	mov	r27, r26
    85de:	40 91 75 02 	lds	r20, 0x0275
    85e2:	50 91 76 02 	lds	r21, 0x0276
    85e6:	60 91 77 02 	lds	r22, 0x0277
    85ea:	70 91 78 02 	lds	r23, 0x0278
    85ee:	84 0f       	add	r24, r20
    85f0:	95 1f       	adc	r25, r21
    85f2:	a6 1f       	adc	r26, r22
    85f4:	b7 1f       	adc	r27, r23
    85f6:	80 93 75 02 	sts	0x0275, r24
    85fa:	90 93 76 02 	sts	0x0276, r25
    85fe:	a0 93 77 02 	sts	0x0277, r26
    8602:	b0 93 78 02 	sts	0x0278, r27
    8606:	80 91 39 02 	lds	r24, 0x0239
    860a:	90 91 3a 02 	lds	r25, 0x023A
    860e:	aa 27       	eor	r26, r26
    8610:	97 fd       	sbrc	r25, 7
    8612:	a0 95       	com	r26
    8614:	ba 2f       	mov	r27, r26
    8616:	40 91 79 02 	lds	r20, 0x0279
    861a:	50 91 7a 02 	lds	r21, 0x027A
    861e:	60 91 7b 02 	lds	r22, 0x027B
    8622:	70 91 7c 02 	lds	r23, 0x027C
    8626:	84 0f       	add	r24, r20
    8628:	95 1f       	adc	r25, r21
    862a:	a6 1f       	adc	r26, r22
    862c:	b7 1f       	adc	r27, r23
    862e:	80 93 79 02 	sts	0x0279, r24
    8632:	90 93 7a 02 	sts	0x027A, r25
    8636:	a0 93 7b 02 	sts	0x027B, r26
    863a:	b0 93 7c 02 	sts	0x027C, r27
    863e:	80 91 3b 02 	lds	r24, 0x023B
    8642:	90 91 3c 02 	lds	r25, 0x023C
    8646:	aa 27       	eor	r26, r26
    8648:	97 fd       	sbrc	r25, 7
    864a:	a0 95       	com	r26
    864c:	ba 2f       	mov	r27, r26
    864e:	40 91 7d 02 	lds	r20, 0x027D
    8652:	50 91 7e 02 	lds	r21, 0x027E
    8656:	60 91 7f 02 	lds	r22, 0x027F
    865a:	70 91 80 02 	lds	r23, 0x0280
    865e:	84 0f       	add	r24, r20
    8660:	95 1f       	adc	r25, r21
    8662:	a6 1f       	adc	r26, r22
    8664:	b7 1f       	adc	r27, r23
    8666:	80 93 7d 02 	sts	0x027D, r24
    866a:	90 93 7e 02 	sts	0x027E, r25
    866e:	a0 93 7f 02 	sts	0x027F, r26
    8672:	b0 93 80 02 	sts	0x0280, r27
    8676:	80 91 3d 02 	lds	r24, 0x023D
    867a:	90 91 3e 02 	lds	r25, 0x023E
    867e:	aa 27       	eor	r26, r26
    8680:	97 fd       	sbrc	r25, 7
    8682:	a0 95       	com	r26
    8684:	ba 2f       	mov	r27, r26
    8686:	40 91 81 02 	lds	r20, 0x0281
    868a:	50 91 82 02 	lds	r21, 0x0282
    868e:	60 91 83 02 	lds	r22, 0x0283
    8692:	70 91 84 02 	lds	r23, 0x0284
    8696:	84 0f       	add	r24, r20
    8698:	95 1f       	adc	r25, r21
    869a:	a6 1f       	adc	r26, r22
    869c:	b7 1f       	adc	r27, r23
    869e:	80 93 81 02 	sts	0x0281, r24
    86a2:	90 93 82 02 	sts	0x0282, r25
    86a6:	a0 93 83 02 	sts	0x0283, r26
    86aa:	b0 93 84 02 	sts	0x0284, r27
    86ae:	80 91 3f 02 	lds	r24, 0x023F
    86b2:	90 91 40 02 	lds	r25, 0x0240
    86b6:	aa 27       	eor	r26, r26
    86b8:	97 fd       	sbrc	r25, 7
    86ba:	a0 95       	com	r26
    86bc:	ba 2f       	mov	r27, r26
    86be:	40 91 85 02 	lds	r20, 0x0285
    86c2:	50 91 86 02 	lds	r21, 0x0286
    86c6:	60 91 87 02 	lds	r22, 0x0287
    86ca:	70 91 88 02 	lds	r23, 0x0288
    86ce:	84 0f       	add	r24, r20
    86d0:	95 1f       	adc	r25, r21
    86d2:	a6 1f       	adc	r26, r22
    86d4:	b7 1f       	adc	r27, r23
    86d6:	80 93 85 02 	sts	0x0285, r24
    86da:	90 93 86 02 	sts	0x0286, r25
    86de:	a0 93 87 02 	sts	0x0287, r26
    86e2:	b0 93 88 02 	sts	0x0288, r27
				}

				accOffsetXSum += accX;
    86e6:	80 91 06 04 	lds	r24, 0x0406
    86ea:	90 91 07 04 	lds	r25, 0x0407
    86ee:	40 91 fa 03 	lds	r20, 0x03FA
    86f2:	50 91 fb 03 	lds	r21, 0x03FB
    86f6:	84 0f       	add	r24, r20
    86f8:	95 1f       	adc	r25, r21
    86fa:	90 93 07 04 	sts	0x0407, r25
    86fe:	80 93 06 04 	sts	0x0406, r24
				accOffsetYSum += accY;
    8702:	80 91 08 04 	lds	r24, 0x0408
    8706:	90 91 09 04 	lds	r25, 0x0409
    870a:	40 91 fc 03 	lds	r20, 0x03FC
    870e:	50 91 fd 03 	lds	r21, 0x03FD
    8712:	84 0f       	add	r24, r20
    8714:	95 1f       	adc	r25, r21
    8716:	90 93 09 04 	sts	0x0409, r25
    871a:	80 93 08 04 	sts	0x0408, r24
				accOffsetZSum += accZ;
    871e:	80 91 0a 04 	lds	r24, 0x040A
    8722:	90 91 0b 04 	lds	r25, 0x040B
    8726:	40 91 fe 03 	lds	r20, 0x03FE
    872a:	50 91 ff 03 	lds	r21, 0x03FF
    872e:	84 0f       	add	r24, r20
    8730:	95 1f       	adc	r25, r21
    8732:	90 93 0b 04 	sts	0x040B, r25
    8736:	80 93 0a 04 	sts	0x040A, r24

				calibrationCycle++;
    873a:	2f 5f       	subi	r18, 0xFF	; 255
    873c:	3f 4f       	sbci	r19, 0xFF	; 255
    873e:	30 93 1c 04 	sts	0x041C, r19
    8742:	20 93 1b 04 	sts	0x041B, r18
    8746:	80 91 98 08 	lds	r24, 0x0898
	updateBlueLed(pwm_blue);

	calibrationCycle = 0;
	startCalibration = 1;

	while(startCalibration) {
    874a:	88 23       	and	r24, r24
    874c:	09 f0       	breq	.+2      	; 0x8750 <calibrateSensors+0x5d6>
    874e:	31 cd       	rjmp	.-1438   	; 0x81b2 <calibrateSensors+0x38>
    8750:	5b ce       	rjmp	.-842    	; 0x8408 <calibrateSensors+0x28e>

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8752:	10 92 59 02 	sts	0x0259, r1
    8756:	10 92 5a 02 	sts	0x025A, r1
    875a:	10 92 5b 02 	sts	0x025B, r1
    875e:	10 92 5c 02 	sts	0x025C, r1
						proximityOffset[i] = 0;
    8762:	10 92 42 02 	sts	0x0242, r1
    8766:	10 92 41 02 	sts	0x0241, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    876a:	10 92 5d 02 	sts	0x025D, r1
    876e:	10 92 5e 02 	sts	0x025E, r1
    8772:	10 92 5f 02 	sts	0x025F, r1
    8776:	10 92 60 02 	sts	0x0260, r1
						proximityOffset[i] = 0;
    877a:	10 92 44 02 	sts	0x0244, r1
    877e:	10 92 43 02 	sts	0x0243, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8782:	10 92 61 02 	sts	0x0261, r1
    8786:	10 92 62 02 	sts	0x0262, r1
    878a:	10 92 63 02 	sts	0x0263, r1
    878e:	10 92 64 02 	sts	0x0264, r1
						proximityOffset[i] = 0;
    8792:	10 92 46 02 	sts	0x0246, r1
    8796:	10 92 45 02 	sts	0x0245, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    879a:	10 92 65 02 	sts	0x0265, r1
    879e:	10 92 66 02 	sts	0x0266, r1
    87a2:	10 92 67 02 	sts	0x0267, r1
    87a6:	10 92 68 02 	sts	0x0268, r1
						proximityOffset[i] = 0;
    87aa:	10 92 48 02 	sts	0x0248, r1
    87ae:	10 92 47 02 	sts	0x0247, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    87b2:	10 92 69 02 	sts	0x0269, r1
    87b6:	10 92 6a 02 	sts	0x026A, r1
    87ba:	10 92 6b 02 	sts	0x026B, r1
    87be:	10 92 6c 02 	sts	0x026C, r1
						proximityOffset[i] = 0;
    87c2:	10 92 4a 02 	sts	0x024A, r1
    87c6:	10 92 49 02 	sts	0x0249, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    87ca:	10 92 6d 02 	sts	0x026D, r1
    87ce:	10 92 6e 02 	sts	0x026E, r1
    87d2:	10 92 6f 02 	sts	0x026F, r1
    87d6:	10 92 70 02 	sts	0x0270, r1
						proximityOffset[i] = 0;
    87da:	10 92 4c 02 	sts	0x024C, r1
    87de:	10 92 4b 02 	sts	0x024B, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    87e2:	10 92 71 02 	sts	0x0271, r1
    87e6:	10 92 72 02 	sts	0x0272, r1
    87ea:	10 92 73 02 	sts	0x0273, r1
    87ee:	10 92 74 02 	sts	0x0274, r1
						proximityOffset[i] = 0;
    87f2:	10 92 4e 02 	sts	0x024E, r1
    87f6:	10 92 4d 02 	sts	0x024D, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    87fa:	10 92 75 02 	sts	0x0275, r1
    87fe:	10 92 76 02 	sts	0x0276, r1
    8802:	10 92 77 02 	sts	0x0277, r1
    8806:	10 92 78 02 	sts	0x0278, r1
						proximityOffset[i] = 0;
    880a:	10 92 50 02 	sts	0x0250, r1
    880e:	10 92 4f 02 	sts	0x024F, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8812:	10 92 79 02 	sts	0x0279, r1
    8816:	10 92 7a 02 	sts	0x027A, r1
    881a:	10 92 7b 02 	sts	0x027B, r1
    881e:	10 92 7c 02 	sts	0x027C, r1
						proximityOffset[i] = 0;
    8822:	10 92 52 02 	sts	0x0252, r1
    8826:	10 92 51 02 	sts	0x0251, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    882a:	10 92 7d 02 	sts	0x027D, r1
    882e:	10 92 7e 02 	sts	0x027E, r1
    8832:	10 92 7f 02 	sts	0x027F, r1
    8836:	10 92 80 02 	sts	0x0280, r1
						proximityOffset[i] = 0;
    883a:	10 92 54 02 	sts	0x0254, r1
    883e:	10 92 53 02 	sts	0x0253, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8842:	10 92 81 02 	sts	0x0281, r1
    8846:	10 92 82 02 	sts	0x0282, r1
    884a:	10 92 83 02 	sts	0x0283, r1
    884e:	10 92 84 02 	sts	0x0284, r1
						proximityOffset[i] = 0;
    8852:	10 92 56 02 	sts	0x0256, r1
    8856:	10 92 55 02 	sts	0x0255, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    885a:	10 92 85 02 	sts	0x0285, r1
    885e:	10 92 86 02 	sts	0x0286, r1
    8862:	10 92 87 02 	sts	0x0287, r1
    8866:	10 92 88 02 	sts	0x0288, r1
						proximityOffset[i] = 0;
    886a:	10 92 58 02 	sts	0x0258, r1
    886e:	10 92 57 02 	sts	0x0257, r1
					}
					accOffsetXSum = 0;
    8872:	10 92 07 04 	sts	0x0407, r1
    8876:	10 92 06 04 	sts	0x0406, r1
					accOffsetYSum = 0;
    887a:	10 92 09 04 	sts	0x0409, r1
    887e:	10 92 08 04 	sts	0x0408, r1
					accOffsetZSum = 0;
    8882:	10 92 0b 04 	sts	0x040B, r1
    8886:	10 92 0a 04 	sts	0x040A, r1

					calibrationCycle++;
    888a:	d0 93 1c 04 	sts	0x041C, r29
    888e:	c0 93 1b 04 	sts	0x041B, r28
    8892:	80 91 98 08 	lds	r24, 0x0898

					continue;					// the first time "proxUpdated" is set, all the proximity values saved in the array 
    8896:	59 cf       	rjmp	.-334    	; 0x874a <calibrateSensors+0x5d0>

00008898 <readAccelXYZ_1>:

void readAccelXYZ_1() {

	int i = 0;

	if(useAccel == USE_MMAX7455L) {
    8898:	80 91 f9 03 	lds	r24, 0x03F9
    889c:	88 23       	and	r24, r24
    889e:	79 f0       	breq	.+30     	; 0x88be <readAccelXYZ_1+0x26>
		for(i=0; i<2; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
		}
		return;

	} else if(useAccel == USE_ADXL345) {							
    88a0:	81 30       	cpi	r24, 0x01	; 1
    88a2:	11 f1       	breq	.+68     	; 0x88e8 <readAccelXYZ_1+0x50>
		}
		return;

	} else {

		accX = 0;
    88a4:	10 92 fb 03 	sts	0x03FB, r1
    88a8:	10 92 fa 03 	sts	0x03FA, r1
		accY = 0;
    88ac:	10 92 fd 03 	sts	0x03FD, r1
    88b0:	10 92 fc 03 	sts	0x03FC, r1
		accZ = 0;
    88b4:	10 92 ff 03 	sts	0x03FF, r1
    88b8:	10 92 fe 03 	sts	0x03FE, r1
    88bc:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    88be:	80 91 14 02 	lds	r24, 0x0214
    88c2:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    88c6:	80 e0       	ldi	r24, 0x00	; 0
    88c8:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    88cc:	80 91 14 02 	lds	r24, 0x0214
    88d0:	8f 5f       	subi	r24, 0xFF	; 255
    88d2:	0e 94 6f 1f 	call	0x3ede	; 0x3ede <i2c_rep_start>

		for(i=0; i<2; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    88d6:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <i2c_readAck>
    88da:	80 93 10 04 	sts	0x0410, r24
    88de:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <i2c_readAck>
    88e2:	80 93 11 04 	sts	0x0411, r24
    88e6:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    88e8:	80 91 14 02 	lds	r24, 0x0214
    88ec:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    88f0:	82 e3       	ldi	r24, 0x32	; 50
    88f2:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    88f6:	80 91 14 02 	lds	r24, 0x0214
    88fa:	8f 5f       	subi	r24, 0xFF	; 255
    88fc:	0e 94 6f 1f 	call	0x3ede	; 0x3ede <i2c_rep_start>

		for(i=0; i<3; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    8900:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <i2c_readAck>
    8904:	80 93 10 04 	sts	0x0410, r24
    8908:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <i2c_readAck>
    890c:	80 93 11 04 	sts	0x0411, r24
    8910:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <i2c_readAck>
    8914:	80 93 12 04 	sts	0x0412, r24
    8918:	08 95       	ret

0000891a <readAccelXYZ_2>:

void readAccelXYZ_2() {

	int i = 2;

	if(useAccel == USE_MMAX7455L) {
    891a:	80 91 f9 03 	lds	r24, 0x03F9
    891e:	88 23       	and	r24, r24
    8920:	09 f0       	breq	.+2      	; 0x8924 <readAccelXYZ_2+0xa>
    8922:	4e c0       	rjmp	.+156    	; 0x89c0 <readAccelXYZ_2+0xa6>

		for(i=2; i<5; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    8924:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <i2c_readAck>
    8928:	80 93 12 04 	sts	0x0412, r24
		}

	} else if(useAccel == USE_ADXL345) {							

		for(i=3; i<5; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    892c:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <i2c_readAck>
    8930:	80 93 13 04 	sts	0x0413, r24
    8934:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <i2c_readAck>
    8938:	80 93 14 04 	sts	0x0414, r24
		}
		accBuff[i] = i2c_readNak();									// read last byte sending NACK
    893c:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <i2c_readNak>
    8940:	80 93 15 04 	sts	0x0415, r24
		i2c_stop();													// set stop conditon = release bus
    8944:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    8948:	80 91 98 08 	lds	r24, 0x0898
    894c:	88 23       	and	r24, r24
    894e:	09 f4       	brne	.+2      	; 0x8952 <readAccelXYZ_2+0x38>
    8950:	47 c0       	rjmp	.+142    	; 0x89e0 <readAccelXYZ_2+0xc6>
			accX = ((signed int)accBuff[1]<<8)|accBuff[0];    			// X axis
    8952:	80 91 11 04 	lds	r24, 0x0411
    8956:	99 27       	eor	r25, r25
    8958:	87 fd       	sbrc	r24, 7
    895a:	90 95       	com	r25
    895c:	98 2f       	mov	r25, r24
    895e:	88 27       	eor	r24, r24
    8960:	20 91 10 04 	lds	r18, 0x0410
    8964:	33 27       	eor	r19, r19
    8966:	27 fd       	sbrc	r18, 7
    8968:	30 95       	com	r19
    896a:	82 2b       	or	r24, r18
    896c:	93 2b       	or	r25, r19
    896e:	90 93 fb 03 	sts	0x03FB, r25
    8972:	80 93 fa 03 	sts	0x03FA, r24
			accY = ((signed int)accBuff[3]<<8)|accBuff[2];    			// Y axis
    8976:	80 91 13 04 	lds	r24, 0x0413
    897a:	99 27       	eor	r25, r25
    897c:	87 fd       	sbrc	r24, 7
    897e:	90 95       	com	r25
    8980:	98 2f       	mov	r25, r24
    8982:	88 27       	eor	r24, r24
    8984:	20 91 12 04 	lds	r18, 0x0412
    8988:	33 27       	eor	r19, r19
    898a:	27 fd       	sbrc	r18, 7
    898c:	30 95       	com	r19
    898e:	82 2b       	or	r24, r18
    8990:	93 2b       	or	r25, r19
    8992:	90 93 fd 03 	sts	0x03FD, r25
    8996:	80 93 fc 03 	sts	0x03FC, r24
			accZ = ((signed int)accBuff[5]<<8)|accBuff[4];    			// Z axis
    899a:	80 91 15 04 	lds	r24, 0x0415
    899e:	99 27       	eor	r25, r25
    89a0:	87 fd       	sbrc	r24, 7
    89a2:	90 95       	com	r25
    89a4:	98 2f       	mov	r25, r24
    89a6:	88 27       	eor	r24, r24
    89a8:	20 91 14 04 	lds	r18, 0x0414
    89ac:	33 27       	eor	r19, r19
    89ae:	27 fd       	sbrc	r18, 7
    89b0:	30 95       	com	r19
    89b2:	82 2b       	or	r24, r18
    89b4:	93 2b       	or	r25, r19
    89b6:	90 93 ff 03 	sts	0x03FF, r25
    89ba:	80 93 fe 03 	sts	0x03FE, r24
    89be:	08 95       	ret
			accX = (((signed int)accBuff[1]<<8)|accBuff[0])-accOffsetX;	// X axis
			accY = (((signed int)accBuff[3]<<8)|accBuff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    89c0:	81 30       	cpi	r24, 0x01	; 1
    89c2:	09 f4       	brne	.+2      	; 0x89c6 <readAccelXYZ_2+0xac>
    89c4:	b3 cf       	rjmp	.-154    	; 0x892c <readAccelXYZ_2+0x12>
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
		}

	} else {

		accX = 0;
    89c6:	10 92 fb 03 	sts	0x03FB, r1
    89ca:	10 92 fa 03 	sts	0x03FA, r1
		accY = 0;
    89ce:	10 92 fd 03 	sts	0x03FD, r1
    89d2:	10 92 fc 03 	sts	0x03FC, r1
		accZ = 0;
    89d6:	10 92 ff 03 	sts	0x03FF, r1
    89da:	10 92 fe 03 	sts	0x03FE, r1
    89de:	08 95       	ret
		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)accBuff[1]<<8)|accBuff[0];    			// X axis
			accY = ((signed int)accBuff[3]<<8)|accBuff[2];    			// Y axis
			accZ = ((signed int)accBuff[5]<<8)|accBuff[4];    			// Z axis
		} else {													// else return the calibrated values
			accX = (((signed int)accBuff[1]<<8)|accBuff[0])-accOffsetX;	// X axis
    89e0:	80 91 11 04 	lds	r24, 0x0411
    89e4:	99 27       	eor	r25, r25
    89e6:	87 fd       	sbrc	r24, 7
    89e8:	90 95       	com	r25
    89ea:	98 2f       	mov	r25, r24
    89ec:	88 27       	eor	r24, r24
    89ee:	20 91 10 04 	lds	r18, 0x0410
    89f2:	33 27       	eor	r19, r19
    89f4:	27 fd       	sbrc	r18, 7
    89f6:	30 95       	com	r19
    89f8:	82 2b       	or	r24, r18
    89fa:	93 2b       	or	r25, r19
    89fc:	20 91 00 04 	lds	r18, 0x0400
    8a00:	30 91 01 04 	lds	r19, 0x0401
    8a04:	82 1b       	sub	r24, r18
    8a06:	93 0b       	sbc	r25, r19
    8a08:	90 93 fb 03 	sts	0x03FB, r25
    8a0c:	80 93 fa 03 	sts	0x03FA, r24
			accY = (((signed int)accBuff[3]<<8)|accBuff[2])-accOffsetY;	// Y axis
    8a10:	80 91 13 04 	lds	r24, 0x0413
    8a14:	99 27       	eor	r25, r25
    8a16:	87 fd       	sbrc	r24, 7
    8a18:	90 95       	com	r25
    8a1a:	98 2f       	mov	r25, r24
    8a1c:	88 27       	eor	r24, r24
    8a1e:	20 91 12 04 	lds	r18, 0x0412
    8a22:	33 27       	eor	r19, r19
    8a24:	27 fd       	sbrc	r18, 7
    8a26:	30 95       	com	r19
    8a28:	82 2b       	or	r24, r18
    8a2a:	93 2b       	or	r25, r19
    8a2c:	20 91 02 04 	lds	r18, 0x0402
    8a30:	30 91 03 04 	lds	r19, 0x0403
    8a34:	82 1b       	sub	r24, r18
    8a36:	93 0b       	sbc	r25, r19
    8a38:	90 93 fd 03 	sts	0x03FD, r25
    8a3c:	80 93 fc 03 	sts	0x03FC, r24
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
    8a40:	80 91 15 04 	lds	r24, 0x0415
    8a44:	99 27       	eor	r25, r25
    8a46:	87 fd       	sbrc	r24, 7
    8a48:	90 95       	com	r25
    8a4a:	98 2f       	mov	r25, r24
    8a4c:	88 27       	eor	r24, r24
    8a4e:	20 91 14 04 	lds	r18, 0x0414
    8a52:	33 27       	eor	r19, r19
    8a54:	27 fd       	sbrc	r18, 7
    8a56:	30 95       	com	r19
    8a58:	82 2b       	or	r24, r18
    8a5a:	93 2b       	or	r25, r19
    8a5c:	20 91 04 04 	lds	r18, 0x0404
    8a60:	30 91 05 04 	lds	r19, 0x0405
    8a64:	82 1b       	sub	r24, r18
    8a66:	93 0b       	sbc	r25, r19
    8a68:	90 93 ff 03 	sts	0x03FF, r25
    8a6c:	80 93 fe 03 	sts	0x03FE, r24
    8a70:	08 95       	ret

00008a72 <computeAngle>:

	}

}

void computeAngle() {
    8a72:	ef 92       	push	r14
    8a74:	ff 92       	push	r15
    8a76:	0f 93       	push	r16
    8a78:	1f 93       	push	r17

	unsigned int abs_acc_z=abs(accZ);
    8a7a:	80 91 fe 03 	lds	r24, 0x03FE
    8a7e:	90 91 ff 03 	lds	r25, 0x03FF
    8a82:	97 fd       	sbrc	r25, 7
    8a84:	6c c0       	rjmp	.+216    	; 0x8b5e <computeAngle+0xec>

	// check the robot motion plane (horizontal or vertical) based on the Z axes;
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
    8a86:	85 31       	cpi	r24, 0x15	; 21
    8a88:	91 05       	cpc	r25, r1
    8a8a:	08 f0       	brcs	.+2      	; 0x8a8e <computeAngle+0x1c>
    8a8c:	54 c0       	rjmp	.+168    	; 0x8b36 <computeAngle+0xc4>
		currPosition = HORIZONTAL_POS;
    8a8e:	81 e0       	ldi	r24, 0x01	; 1
    8a90:	80 93 15 02 	sts	0x0215, r24
    8a94:	21 e0       	ldi	r18, 0x01	; 1
	} else {
		currPosition = VERTICAL_POS;	
	}
	if(currPosition != robotPosition) {			
    8a96:	80 91 16 02 	lds	r24, 0x0216
    8a9a:	82 17       	cp	r24, r18
    8a9c:	09 f4       	brne	.+2      	; 0x8aa0 <computeAngle+0x2e>
    8a9e:	53 c0       	rjmp	.+166    	; 0x8b46 <computeAngle+0xd4>
		timesInSamePos++;
    8aa0:	80 91 0e 04 	lds	r24, 0x040E
    8aa4:	90 91 0f 04 	lds	r25, 0x040F
    8aa8:	01 96       	adiw	r24, 0x01	; 1
    8aaa:	90 93 0f 04 	sts	0x040F, r25
    8aae:	80 93 0e 04 	sts	0x040E, r24
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
    8ab2:	88 3c       	cpi	r24, 0xC8	; 200
    8ab4:	91 05       	cpc	r25, r1
    8ab6:	08 f0       	brcs	.+2      	; 0x8aba <computeAngle+0x48>
    8ab8:	4b c0       	rjmp	.+150    	; 0x8b50 <computeAngle+0xde>
	} else {
		timesInSamePos = 0;
	}

	// compute the angle using the X and Y axis
	thetaAcc = atan2((float)accX, (float)accY);
    8aba:	60 91 fa 03 	lds	r22, 0x03FA
    8abe:	70 91 fb 03 	lds	r23, 0x03FB
    8ac2:	88 27       	eor	r24, r24
    8ac4:	77 fd       	sbrc	r23, 7
    8ac6:	80 95       	com	r24
    8ac8:	98 2f       	mov	r25, r24
    8aca:	0e 94 34 47 	call	0x8e68	; 0x8e68 <__floatsisf>
    8ace:	7b 01       	movw	r14, r22
    8ad0:	8c 01       	movw	r16, r24
    8ad2:	60 91 fc 03 	lds	r22, 0x03FC
    8ad6:	70 91 fd 03 	lds	r23, 0x03FD
    8ada:	88 27       	eor	r24, r24
    8adc:	77 fd       	sbrc	r23, 7
    8ade:	80 95       	com	r24
    8ae0:	98 2f       	mov	r25, r24
    8ae2:	0e 94 34 47 	call	0x8e68	; 0x8e68 <__floatsisf>
    8ae6:	9b 01       	movw	r18, r22
    8ae8:	ac 01       	movw	r20, r24
    8aea:	c8 01       	movw	r24, r16
    8aec:	b7 01       	movw	r22, r14
    8aee:	0e 94 3f 46 	call	0x8c7e	; 0x8c7e <atan2>
    8af2:	60 93 72 04 	sts	0x0472, r22
    8af6:	70 93 73 04 	sts	0x0473, r23
    8afa:	80 93 74 04 	sts	0x0474, r24
    8afe:	90 93 75 04 	sts	0x0475, r25
	currentAngle = (signed int)(thetaAcc*RAD_2_DEG);
    8b02:	21 ee       	ldi	r18, 0xE1	; 225
    8b04:	3e e2       	ldi	r19, 0x2E	; 46
    8b06:	45 e6       	ldi	r20, 0x65	; 101
    8b08:	52 e4       	ldi	r21, 0x42	; 66
    8b0a:	0e 94 49 48 	call	0x9092	; 0x9092 <__mulsf3>
    8b0e:	0e 94 01 47 	call	0x8e02	; 0x8e02 <__fixsfsi>
    8b12:	9b 01       	movw	r18, r22
    8b14:	70 93 0d 04 	sts	0x040D, r23
    8b18:	60 93 0c 04 	sts	0x040C, r22

	if(currentAngle < 0) {
    8b1c:	77 ff       	sbrs	r23, 7
    8b1e:	06 c0       	rjmp	.+12     	; 0x8b2c <computeAngle+0xba>
		currentAngle = currentAngle + (signed int)360;	// angles from 0 to 360
    8b20:	28 59       	subi	r18, 0x98	; 152
    8b22:	3e 4f       	sbci	r19, 0xFE	; 254
    8b24:	30 93 0d 04 	sts	0x040D, r19
    8b28:	20 93 0c 04 	sts	0x040C, r18
	}

}
    8b2c:	1f 91       	pop	r17
    8b2e:	0f 91       	pop	r16
    8b30:	ff 90       	pop	r15
    8b32:	ef 90       	pop	r14
    8b34:	08 95       	ret
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
		currPosition = HORIZONTAL_POS;
	} else {
		currPosition = VERTICAL_POS;	
    8b36:	10 92 15 02 	sts	0x0215, r1
    8b3a:	20 e0       	ldi	r18, 0x00	; 0
	}
	if(currPosition != robotPosition) {			
    8b3c:	80 91 16 02 	lds	r24, 0x0216
    8b40:	82 17       	cp	r24, r18
    8b42:	09 f0       	breq	.+2      	; 0x8b46 <computeAngle+0xd4>
    8b44:	ad cf       	rjmp	.-166    	; 0x8aa0 <computeAngle+0x2e>
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
			robotPosition = currPosition;
		}
	} else {
		timesInSamePos = 0;
    8b46:	10 92 0f 04 	sts	0x040F, r1
    8b4a:	10 92 0e 04 	sts	0x040E, r1
    8b4e:	b5 cf       	rjmp	.-150    	; 0x8aba <computeAngle+0x48>
		currPosition = VERTICAL_POS;	
	}
	if(currPosition != robotPosition) {			
		timesInSamePos++;
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
    8b50:	10 92 0f 04 	sts	0x040F, r1
    8b54:	10 92 0e 04 	sts	0x040E, r1
			robotPosition = currPosition;
    8b58:	20 93 16 02 	sts	0x0216, r18
    8b5c:	ae cf       	rjmp	.-164    	; 0x8aba <computeAngle+0x48>

}

void computeAngle() {

	unsigned int abs_acc_z=abs(accZ);
    8b5e:	90 95       	com	r25
    8b60:	81 95       	neg	r24
    8b62:	9f 4f       	sbci	r25, 0xFF	; 255
    8b64:	90 cf       	rjmp	.-224    	; 0x8a86 <computeAngle+0x14>

00008b66 <writeCalibrationToFlash>:


#include "eepromIO.h"

void writeCalibrationToFlash() {	
	eeprom_update_block(calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
    8b66:	8e e9       	ldi	r24, 0x9E	; 158
    8b68:	97 e0       	ldi	r25, 0x07	; 7
    8b6a:	6c e6       	ldi	r22, 0x6C	; 108
    8b6c:	7f e0       	ldi	r23, 0x0F	; 15
    8b6e:	40 e9       	ldi	r20, 0x90	; 144
    8b70:	50 e0       	ldi	r21, 0x00	; 0
    8b72:	0e 94 da 49 	call	0x93b4	; 0x93b4 <__eeupd_block_m2560>
	eeprom_update_word ((uint16_t*) CALIB_CHECK_ADDRESS, 0xAA55);   // to let know the calibration data are valid
    8b76:	8a e6       	ldi	r24, 0x6A	; 106
    8b78:	9f e0       	ldi	r25, 0x0F	; 15
    8b7a:	65 e5       	ldi	r22, 0x55	; 85
    8b7c:	7a ea       	ldi	r23, 0xAA	; 170
    8b7e:	0e 94 fc 49 	call	0x93f8	; 0x93f8 <__eeupd_word_m2560>
}
    8b82:	08 95       	ret

00008b84 <readCalibrationFromFlash>:

void readCalibrationFromFlash() {
	eeprom_read_block (calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
    8b84:	8e e9       	ldi	r24, 0x9E	; 158
    8b86:	97 e0       	ldi	r25, 0x07	; 7
    8b88:	6c e6       	ldi	r22, 0x6C	; 108
    8b8a:	7f e0       	ldi	r23, 0x0F	; 15
    8b8c:	40 e9       	ldi	r20, 0x90	; 144
    8b8e:	50 e0       	ldi	r21, 0x00	; 0
    8b90:	0e 94 bc 49 	call	0x9378	; 0x9378 <__eerd_block_m2560>
}
    8b94:	08 95       	ret

00008b96 <__subsf3>:
    8b96:	50 58       	subi	r21, 0x80	; 128

00008b98 <__addsf3>:
    8b98:	bb 27       	eor	r27, r27
    8b9a:	aa 27       	eor	r26, r26
    8b9c:	0e d0       	rcall	.+28     	; 0x8bba <__addsf3x>
    8b9e:	27 c2       	rjmp	.+1102   	; 0x8fee <__fp_round>
    8ba0:	f0 d1       	rcall	.+992    	; 0x8f82 <__fp_pscA>
    8ba2:	30 f0       	brcs	.+12     	; 0x8bb0 <__addsf3+0x18>
    8ba4:	f5 d1       	rcall	.+1002   	; 0x8f90 <__fp_pscB>
    8ba6:	20 f0       	brcs	.+8      	; 0x8bb0 <__addsf3+0x18>
    8ba8:	31 f4       	brne	.+12     	; 0x8bb6 <__addsf3+0x1e>
    8baa:	9f 3f       	cpi	r25, 0xFF	; 255
    8bac:	11 f4       	brne	.+4      	; 0x8bb2 <__addsf3+0x1a>
    8bae:	1e f4       	brtc	.+6      	; 0x8bb6 <__addsf3+0x1e>
    8bb0:	c0 c1       	rjmp	.+896    	; 0x8f32 <__fp_nan>
    8bb2:	0e f4       	brtc	.+2      	; 0x8bb6 <__addsf3+0x1e>
    8bb4:	e0 95       	com	r30
    8bb6:	e7 fb       	bst	r30, 7
    8bb8:	b6 c1       	rjmp	.+876    	; 0x8f26 <__fp_inf>

00008bba <__addsf3x>:
    8bba:	e9 2f       	mov	r30, r25
    8bbc:	3a d2       	rcall	.+1140   	; 0x9032 <__fp_split3>
    8bbe:	80 f3       	brcs	.-32     	; 0x8ba0 <__addsf3+0x8>
    8bc0:	ba 17       	cp	r27, r26
    8bc2:	62 07       	cpc	r22, r18
    8bc4:	73 07       	cpc	r23, r19
    8bc6:	84 07       	cpc	r24, r20
    8bc8:	95 07       	cpc	r25, r21
    8bca:	18 f0       	brcs	.+6      	; 0x8bd2 <__addsf3x+0x18>
    8bcc:	71 f4       	brne	.+28     	; 0x8bea <__addsf3x+0x30>
    8bce:	9e f5       	brtc	.+102    	; 0x8c36 <__addsf3x+0x7c>
    8bd0:	52 c2       	rjmp	.+1188   	; 0x9076 <__fp_zero>
    8bd2:	0e f4       	brtc	.+2      	; 0x8bd6 <__addsf3x+0x1c>
    8bd4:	e0 95       	com	r30
    8bd6:	0b 2e       	mov	r0, r27
    8bd8:	ba 2f       	mov	r27, r26
    8bda:	a0 2d       	mov	r26, r0
    8bdc:	0b 01       	movw	r0, r22
    8bde:	b9 01       	movw	r22, r18
    8be0:	90 01       	movw	r18, r0
    8be2:	0c 01       	movw	r0, r24
    8be4:	ca 01       	movw	r24, r20
    8be6:	a0 01       	movw	r20, r0
    8be8:	11 24       	eor	r1, r1
    8bea:	ff 27       	eor	r31, r31
    8bec:	59 1b       	sub	r21, r25
    8bee:	99 f0       	breq	.+38     	; 0x8c16 <__addsf3x+0x5c>
    8bf0:	59 3f       	cpi	r21, 0xF9	; 249
    8bf2:	50 f4       	brcc	.+20     	; 0x8c08 <__addsf3x+0x4e>
    8bf4:	50 3e       	cpi	r21, 0xE0	; 224
    8bf6:	68 f1       	brcs	.+90     	; 0x8c52 <__addsf3x+0x98>
    8bf8:	1a 16       	cp	r1, r26
    8bfa:	f0 40       	sbci	r31, 0x00	; 0
    8bfc:	a2 2f       	mov	r26, r18
    8bfe:	23 2f       	mov	r18, r19
    8c00:	34 2f       	mov	r19, r20
    8c02:	44 27       	eor	r20, r20
    8c04:	58 5f       	subi	r21, 0xF8	; 248
    8c06:	f3 cf       	rjmp	.-26     	; 0x8bee <__addsf3x+0x34>
    8c08:	46 95       	lsr	r20
    8c0a:	37 95       	ror	r19
    8c0c:	27 95       	ror	r18
    8c0e:	a7 95       	ror	r26
    8c10:	f0 40       	sbci	r31, 0x00	; 0
    8c12:	53 95       	inc	r21
    8c14:	c9 f7       	brne	.-14     	; 0x8c08 <__addsf3x+0x4e>
    8c16:	7e f4       	brtc	.+30     	; 0x8c36 <__addsf3x+0x7c>
    8c18:	1f 16       	cp	r1, r31
    8c1a:	ba 0b       	sbc	r27, r26
    8c1c:	62 0b       	sbc	r22, r18
    8c1e:	73 0b       	sbc	r23, r19
    8c20:	84 0b       	sbc	r24, r20
    8c22:	ba f0       	brmi	.+46     	; 0x8c52 <__addsf3x+0x98>
    8c24:	91 50       	subi	r25, 0x01	; 1
    8c26:	a1 f0       	breq	.+40     	; 0x8c50 <__addsf3x+0x96>
    8c28:	ff 0f       	add	r31, r31
    8c2a:	bb 1f       	adc	r27, r27
    8c2c:	66 1f       	adc	r22, r22
    8c2e:	77 1f       	adc	r23, r23
    8c30:	88 1f       	adc	r24, r24
    8c32:	c2 f7       	brpl	.-16     	; 0x8c24 <__addsf3x+0x6a>
    8c34:	0e c0       	rjmp	.+28     	; 0x8c52 <__addsf3x+0x98>
    8c36:	ba 0f       	add	r27, r26
    8c38:	62 1f       	adc	r22, r18
    8c3a:	73 1f       	adc	r23, r19
    8c3c:	84 1f       	adc	r24, r20
    8c3e:	48 f4       	brcc	.+18     	; 0x8c52 <__addsf3x+0x98>
    8c40:	87 95       	ror	r24
    8c42:	77 95       	ror	r23
    8c44:	67 95       	ror	r22
    8c46:	b7 95       	ror	r27
    8c48:	f7 95       	ror	r31
    8c4a:	9e 3f       	cpi	r25, 0xFE	; 254
    8c4c:	08 f0       	brcs	.+2      	; 0x8c50 <__addsf3x+0x96>
    8c4e:	b3 cf       	rjmp	.-154    	; 0x8bb6 <__addsf3+0x1e>
    8c50:	93 95       	inc	r25
    8c52:	88 0f       	add	r24, r24
    8c54:	08 f0       	brcs	.+2      	; 0x8c58 <__addsf3x+0x9e>
    8c56:	99 27       	eor	r25, r25
    8c58:	ee 0f       	add	r30, r30
    8c5a:	97 95       	ror	r25
    8c5c:	87 95       	ror	r24
    8c5e:	08 95       	ret
    8c60:	90 d1       	rcall	.+800    	; 0x8f82 <__fp_pscA>
    8c62:	58 f0       	brcs	.+22     	; 0x8c7a <__addsf3x+0xc0>
    8c64:	80 e8       	ldi	r24, 0x80	; 128
    8c66:	91 e0       	ldi	r25, 0x01	; 1
    8c68:	09 f4       	brne	.+2      	; 0x8c6c <__addsf3x+0xb2>
    8c6a:	9e ef       	ldi	r25, 0xFE	; 254
    8c6c:	91 d1       	rcall	.+802    	; 0x8f90 <__fp_pscB>
    8c6e:	28 f0       	brcs	.+10     	; 0x8c7a <__addsf3x+0xc0>
    8c70:	40 e8       	ldi	r20, 0x80	; 128
    8c72:	51 e0       	ldi	r21, 0x01	; 1
    8c74:	59 f4       	brne	.+22     	; 0x8c8c <atan2+0xe>
    8c76:	5e ef       	ldi	r21, 0xFE	; 254
    8c78:	09 c0       	rjmp	.+18     	; 0x8c8c <atan2+0xe>
    8c7a:	5b c1       	rjmp	.+694    	; 0x8f32 <__fp_nan>
    8c7c:	fc c1       	rjmp	.+1016   	; 0x9076 <__fp_zero>

00008c7e <atan2>:
    8c7e:	e9 2f       	mov	r30, r25
    8c80:	e0 78       	andi	r30, 0x80	; 128
    8c82:	d7 d1       	rcall	.+942    	; 0x9032 <__fp_split3>
    8c84:	68 f3       	brcs	.-38     	; 0x8c60 <__addsf3x+0xa6>
    8c86:	09 2e       	mov	r0, r25
    8c88:	05 2a       	or	r0, r21
    8c8a:	c1 f3       	breq	.-16     	; 0x8c7c <__addsf3x+0xc2>
    8c8c:	26 17       	cp	r18, r22
    8c8e:	37 07       	cpc	r19, r23
    8c90:	48 07       	cpc	r20, r24
    8c92:	59 07       	cpc	r21, r25
    8c94:	38 f0       	brcs	.+14     	; 0x8ca4 <atan2+0x26>
    8c96:	0e 2e       	mov	r0, r30
    8c98:	07 f8       	bld	r0, 7
    8c9a:	e0 25       	eor	r30, r0
    8c9c:	69 f0       	breq	.+26     	; 0x8cb8 <atan2+0x3a>
    8c9e:	e0 25       	eor	r30, r0
    8ca0:	e0 64       	ori	r30, 0x40	; 64
    8ca2:	0a c0       	rjmp	.+20     	; 0x8cb8 <atan2+0x3a>
    8ca4:	ef 63       	ori	r30, 0x3F	; 63
    8ca6:	07 f8       	bld	r0, 7
    8ca8:	00 94       	com	r0
    8caa:	07 fa       	bst	r0, 7
    8cac:	db 01       	movw	r26, r22
    8cae:	b9 01       	movw	r22, r18
    8cb0:	9d 01       	movw	r18, r26
    8cb2:	dc 01       	movw	r26, r24
    8cb4:	ca 01       	movw	r24, r20
    8cb6:	ad 01       	movw	r20, r26
    8cb8:	ef 93       	push	r30
    8cba:	4a d0       	rcall	.+148    	; 0x8d50 <__divsf3_pse>
    8cbc:	98 d1       	rcall	.+816    	; 0x8fee <__fp_round>
    8cbe:	0a d0       	rcall	.+20     	; 0x8cd4 <atan>
    8cc0:	5f 91       	pop	r21
    8cc2:	55 23       	and	r21, r21
    8cc4:	31 f0       	breq	.+12     	; 0x8cd2 <atan2+0x54>
    8cc6:	2b ed       	ldi	r18, 0xDB	; 219
    8cc8:	3f e0       	ldi	r19, 0x0F	; 15
    8cca:	49 e4       	ldi	r20, 0x49	; 73
    8ccc:	50 fd       	sbrc	r21, 0
    8cce:	49 ec       	ldi	r20, 0xC9	; 201
    8cd0:	63 cf       	rjmp	.-314    	; 0x8b98 <__addsf3>
    8cd2:	08 95       	ret

00008cd4 <atan>:
    8cd4:	df 93       	push	r29
    8cd6:	dd 27       	eor	r29, r29
    8cd8:	b9 2f       	mov	r27, r25
    8cda:	bf 77       	andi	r27, 0x7F	; 127
    8cdc:	40 e8       	ldi	r20, 0x80	; 128
    8cde:	5f e3       	ldi	r21, 0x3F	; 63
    8ce0:	16 16       	cp	r1, r22
    8ce2:	17 06       	cpc	r1, r23
    8ce4:	48 07       	cpc	r20, r24
    8ce6:	5b 07       	cpc	r21, r27
    8ce8:	10 f4       	brcc	.+4      	; 0x8cee <atan+0x1a>
    8cea:	d9 2f       	mov	r29, r25
    8cec:	cb d1       	rcall	.+918    	; 0x9084 <inverse>
    8cee:	9f 93       	push	r25
    8cf0:	8f 93       	push	r24
    8cf2:	7f 93       	push	r23
    8cf4:	6f 93       	push	r22
    8cf6:	36 d2       	rcall	.+1132   	; 0x9164 <square>
    8cf8:	ee e4       	ldi	r30, 0x4E	; 78
    8cfa:	f1 e0       	ldi	r31, 0x01	; 1
    8cfc:	1d d1       	rcall	.+570    	; 0x8f38 <__fp_powser>
    8cfe:	77 d1       	rcall	.+750    	; 0x8fee <__fp_round>
    8d00:	2f 91       	pop	r18
    8d02:	3f 91       	pop	r19
    8d04:	4f 91       	pop	r20
    8d06:	5f 91       	pop	r21
    8d08:	d0 d1       	rcall	.+928    	; 0x90aa <__mulsf3x>
    8d0a:	dd 23       	and	r29, r29
    8d0c:	49 f0       	breq	.+18     	; 0x8d20 <atan+0x4c>
    8d0e:	90 58       	subi	r25, 0x80	; 128
    8d10:	a2 ea       	ldi	r26, 0xA2	; 162
    8d12:	2a ed       	ldi	r18, 0xDA	; 218
    8d14:	3f e0       	ldi	r19, 0x0F	; 15
    8d16:	49 ec       	ldi	r20, 0xC9	; 201
    8d18:	5f e3       	ldi	r21, 0x3F	; 63
    8d1a:	d0 78       	andi	r29, 0x80	; 128
    8d1c:	5d 27       	eor	r21, r29
    8d1e:	4d df       	rcall	.-358    	; 0x8bba <__addsf3x>
    8d20:	df 91       	pop	r29
    8d22:	65 c1       	rjmp	.+714    	; 0x8fee <__fp_round>

00008d24 <__cmpsf2>:
    8d24:	dc d0       	rcall	.+440    	; 0x8ede <__fp_cmp>
    8d26:	08 f4       	brcc	.+2      	; 0x8d2a <__cmpsf2+0x6>
    8d28:	81 e0       	ldi	r24, 0x01	; 1
    8d2a:	08 95       	ret

00008d2c <cos>:
    8d2c:	39 d1       	rcall	.+626    	; 0x8fa0 <__fp_rempio2>
    8d2e:	e3 95       	inc	r30
    8d30:	6f c1       	rjmp	.+734    	; 0x9010 <__fp_sinus>

00008d32 <__divsf3>:
    8d32:	0c d0       	rcall	.+24     	; 0x8d4c <__divsf3x>
    8d34:	5c c1       	rjmp	.+696    	; 0x8fee <__fp_round>
    8d36:	2c d1       	rcall	.+600    	; 0x8f90 <__fp_pscB>
    8d38:	40 f0       	brcs	.+16     	; 0x8d4a <__divsf3+0x18>
    8d3a:	23 d1       	rcall	.+582    	; 0x8f82 <__fp_pscA>
    8d3c:	30 f0       	brcs	.+12     	; 0x8d4a <__divsf3+0x18>
    8d3e:	21 f4       	brne	.+8      	; 0x8d48 <__divsf3+0x16>
    8d40:	5f 3f       	cpi	r21, 0xFF	; 255
    8d42:	19 f0       	breq	.+6      	; 0x8d4a <__divsf3+0x18>
    8d44:	f0 c0       	rjmp	.+480    	; 0x8f26 <__fp_inf>
    8d46:	51 11       	cpse	r21, r1
    8d48:	97 c1       	rjmp	.+814    	; 0x9078 <__fp_szero>
    8d4a:	f3 c0       	rjmp	.+486    	; 0x8f32 <__fp_nan>

00008d4c <__divsf3x>:
    8d4c:	72 d1       	rcall	.+740    	; 0x9032 <__fp_split3>
    8d4e:	98 f3       	brcs	.-26     	; 0x8d36 <__divsf3+0x4>

00008d50 <__divsf3_pse>:
    8d50:	99 23       	and	r25, r25
    8d52:	c9 f3       	breq	.-14     	; 0x8d46 <__divsf3+0x14>
    8d54:	55 23       	and	r21, r21
    8d56:	b1 f3       	breq	.-20     	; 0x8d44 <__divsf3+0x12>
    8d58:	95 1b       	sub	r25, r21
    8d5a:	55 0b       	sbc	r21, r21
    8d5c:	bb 27       	eor	r27, r27
    8d5e:	aa 27       	eor	r26, r26
    8d60:	62 17       	cp	r22, r18
    8d62:	73 07       	cpc	r23, r19
    8d64:	84 07       	cpc	r24, r20
    8d66:	38 f0       	brcs	.+14     	; 0x8d76 <__divsf3_pse+0x26>
    8d68:	9f 5f       	subi	r25, 0xFF	; 255
    8d6a:	5f 4f       	sbci	r21, 0xFF	; 255
    8d6c:	22 0f       	add	r18, r18
    8d6e:	33 1f       	adc	r19, r19
    8d70:	44 1f       	adc	r20, r20
    8d72:	aa 1f       	adc	r26, r26
    8d74:	a9 f3       	breq	.-22     	; 0x8d60 <__divsf3_pse+0x10>
    8d76:	33 d0       	rcall	.+102    	; 0x8dde <__divsf3_pse+0x8e>
    8d78:	0e 2e       	mov	r0, r30
    8d7a:	3a f0       	brmi	.+14     	; 0x8d8a <__divsf3_pse+0x3a>
    8d7c:	e0 e8       	ldi	r30, 0x80	; 128
    8d7e:	30 d0       	rcall	.+96     	; 0x8de0 <__divsf3_pse+0x90>
    8d80:	91 50       	subi	r25, 0x01	; 1
    8d82:	50 40       	sbci	r21, 0x00	; 0
    8d84:	e6 95       	lsr	r30
    8d86:	00 1c       	adc	r0, r0
    8d88:	ca f7       	brpl	.-14     	; 0x8d7c <__divsf3_pse+0x2c>
    8d8a:	29 d0       	rcall	.+82     	; 0x8dde <__divsf3_pse+0x8e>
    8d8c:	fe 2f       	mov	r31, r30
    8d8e:	27 d0       	rcall	.+78     	; 0x8dde <__divsf3_pse+0x8e>
    8d90:	66 0f       	add	r22, r22
    8d92:	77 1f       	adc	r23, r23
    8d94:	88 1f       	adc	r24, r24
    8d96:	bb 1f       	adc	r27, r27
    8d98:	26 17       	cp	r18, r22
    8d9a:	37 07       	cpc	r19, r23
    8d9c:	48 07       	cpc	r20, r24
    8d9e:	ab 07       	cpc	r26, r27
    8da0:	b0 e8       	ldi	r27, 0x80	; 128
    8da2:	09 f0       	breq	.+2      	; 0x8da6 <__divsf3_pse+0x56>
    8da4:	bb 0b       	sbc	r27, r27
    8da6:	80 2d       	mov	r24, r0
    8da8:	bf 01       	movw	r22, r30
    8daa:	ff 27       	eor	r31, r31
    8dac:	93 58       	subi	r25, 0x83	; 131
    8dae:	5f 4f       	sbci	r21, 0xFF	; 255
    8db0:	2a f0       	brmi	.+10     	; 0x8dbc <__divsf3_pse+0x6c>
    8db2:	9e 3f       	cpi	r25, 0xFE	; 254
    8db4:	51 05       	cpc	r21, r1
    8db6:	68 f0       	brcs	.+26     	; 0x8dd2 <__divsf3_pse+0x82>
    8db8:	b6 c0       	rjmp	.+364    	; 0x8f26 <__fp_inf>
    8dba:	5e c1       	rjmp	.+700    	; 0x9078 <__fp_szero>
    8dbc:	5f 3f       	cpi	r21, 0xFF	; 255
    8dbe:	ec f3       	brlt	.-6      	; 0x8dba <__divsf3_pse+0x6a>
    8dc0:	98 3e       	cpi	r25, 0xE8	; 232
    8dc2:	dc f3       	brlt	.-10     	; 0x8dba <__divsf3_pse+0x6a>
    8dc4:	86 95       	lsr	r24
    8dc6:	77 95       	ror	r23
    8dc8:	67 95       	ror	r22
    8dca:	b7 95       	ror	r27
    8dcc:	f7 95       	ror	r31
    8dce:	9f 5f       	subi	r25, 0xFF	; 255
    8dd0:	c9 f7       	brne	.-14     	; 0x8dc4 <__divsf3_pse+0x74>
    8dd2:	88 0f       	add	r24, r24
    8dd4:	91 1d       	adc	r25, r1
    8dd6:	96 95       	lsr	r25
    8dd8:	87 95       	ror	r24
    8dda:	97 f9       	bld	r25, 7
    8ddc:	08 95       	ret
    8dde:	e1 e0       	ldi	r30, 0x01	; 1
    8de0:	66 0f       	add	r22, r22
    8de2:	77 1f       	adc	r23, r23
    8de4:	88 1f       	adc	r24, r24
    8de6:	bb 1f       	adc	r27, r27
    8de8:	62 17       	cp	r22, r18
    8dea:	73 07       	cpc	r23, r19
    8dec:	84 07       	cpc	r24, r20
    8dee:	ba 07       	cpc	r27, r26
    8df0:	20 f0       	brcs	.+8      	; 0x8dfa <__divsf3_pse+0xaa>
    8df2:	62 1b       	sub	r22, r18
    8df4:	73 0b       	sbc	r23, r19
    8df6:	84 0b       	sbc	r24, r20
    8df8:	ba 0b       	sbc	r27, r26
    8dfa:	ee 1f       	adc	r30, r30
    8dfc:	88 f7       	brcc	.-30     	; 0x8de0 <__divsf3_pse+0x90>
    8dfe:	e0 95       	com	r30
    8e00:	08 95       	ret

00008e02 <__fixsfsi>:
    8e02:	04 d0       	rcall	.+8      	; 0x8e0c <__fixunssfsi>
    8e04:	68 94       	set
    8e06:	b1 11       	cpse	r27, r1
    8e08:	37 c1       	rjmp	.+622    	; 0x9078 <__fp_szero>
    8e0a:	08 95       	ret

00008e0c <__fixunssfsi>:
    8e0c:	1a d1       	rcall	.+564    	; 0x9042 <__fp_splitA>
    8e0e:	88 f0       	brcs	.+34     	; 0x8e32 <__fixunssfsi+0x26>
    8e10:	9f 57       	subi	r25, 0x7F	; 127
    8e12:	90 f0       	brcs	.+36     	; 0x8e38 <__fixunssfsi+0x2c>
    8e14:	b9 2f       	mov	r27, r25
    8e16:	99 27       	eor	r25, r25
    8e18:	b7 51       	subi	r27, 0x17	; 23
    8e1a:	a0 f0       	brcs	.+40     	; 0x8e44 <__fixunssfsi+0x38>
    8e1c:	d1 f0       	breq	.+52     	; 0x8e52 <__fixunssfsi+0x46>
    8e1e:	66 0f       	add	r22, r22
    8e20:	77 1f       	adc	r23, r23
    8e22:	88 1f       	adc	r24, r24
    8e24:	99 1f       	adc	r25, r25
    8e26:	1a f0       	brmi	.+6      	; 0x8e2e <__fixunssfsi+0x22>
    8e28:	ba 95       	dec	r27
    8e2a:	c9 f7       	brne	.-14     	; 0x8e1e <__fixunssfsi+0x12>
    8e2c:	12 c0       	rjmp	.+36     	; 0x8e52 <__fixunssfsi+0x46>
    8e2e:	b1 30       	cpi	r27, 0x01	; 1
    8e30:	81 f0       	breq	.+32     	; 0x8e52 <__fixunssfsi+0x46>
    8e32:	21 d1       	rcall	.+578    	; 0x9076 <__fp_zero>
    8e34:	b1 e0       	ldi	r27, 0x01	; 1
    8e36:	08 95       	ret
    8e38:	1e c1       	rjmp	.+572    	; 0x9076 <__fp_zero>
    8e3a:	67 2f       	mov	r22, r23
    8e3c:	78 2f       	mov	r23, r24
    8e3e:	88 27       	eor	r24, r24
    8e40:	b8 5f       	subi	r27, 0xF8	; 248
    8e42:	39 f0       	breq	.+14     	; 0x8e52 <__fixunssfsi+0x46>
    8e44:	b9 3f       	cpi	r27, 0xF9	; 249
    8e46:	cc f3       	brlt	.-14     	; 0x8e3a <__fixunssfsi+0x2e>
    8e48:	86 95       	lsr	r24
    8e4a:	77 95       	ror	r23
    8e4c:	67 95       	ror	r22
    8e4e:	b3 95       	inc	r27
    8e50:	d9 f7       	brne	.-10     	; 0x8e48 <__fixunssfsi+0x3c>
    8e52:	3e f4       	brtc	.+14     	; 0x8e62 <__fixunssfsi+0x56>
    8e54:	90 95       	com	r25
    8e56:	80 95       	com	r24
    8e58:	70 95       	com	r23
    8e5a:	61 95       	neg	r22
    8e5c:	7f 4f       	sbci	r23, 0xFF	; 255
    8e5e:	8f 4f       	sbci	r24, 0xFF	; 255
    8e60:	9f 4f       	sbci	r25, 0xFF	; 255
    8e62:	08 95       	ret

00008e64 <__floatunsisf>:
    8e64:	e8 94       	clt
    8e66:	09 c0       	rjmp	.+18     	; 0x8e7a <__floatsisf+0x12>

00008e68 <__floatsisf>:
    8e68:	97 fb       	bst	r25, 7
    8e6a:	3e f4       	brtc	.+14     	; 0x8e7a <__floatsisf+0x12>
    8e6c:	90 95       	com	r25
    8e6e:	80 95       	com	r24
    8e70:	70 95       	com	r23
    8e72:	61 95       	neg	r22
    8e74:	7f 4f       	sbci	r23, 0xFF	; 255
    8e76:	8f 4f       	sbci	r24, 0xFF	; 255
    8e78:	9f 4f       	sbci	r25, 0xFF	; 255
    8e7a:	99 23       	and	r25, r25
    8e7c:	a9 f0       	breq	.+42     	; 0x8ea8 <__floatsisf+0x40>
    8e7e:	f9 2f       	mov	r31, r25
    8e80:	96 e9       	ldi	r25, 0x96	; 150
    8e82:	bb 27       	eor	r27, r27
    8e84:	93 95       	inc	r25
    8e86:	f6 95       	lsr	r31
    8e88:	87 95       	ror	r24
    8e8a:	77 95       	ror	r23
    8e8c:	67 95       	ror	r22
    8e8e:	b7 95       	ror	r27
    8e90:	f1 11       	cpse	r31, r1
    8e92:	f8 cf       	rjmp	.-16     	; 0x8e84 <__floatsisf+0x1c>
    8e94:	fa f4       	brpl	.+62     	; 0x8ed4 <__floatsisf+0x6c>
    8e96:	bb 0f       	add	r27, r27
    8e98:	11 f4       	brne	.+4      	; 0x8e9e <__floatsisf+0x36>
    8e9a:	60 ff       	sbrs	r22, 0
    8e9c:	1b c0       	rjmp	.+54     	; 0x8ed4 <__floatsisf+0x6c>
    8e9e:	6f 5f       	subi	r22, 0xFF	; 255
    8ea0:	7f 4f       	sbci	r23, 0xFF	; 255
    8ea2:	8f 4f       	sbci	r24, 0xFF	; 255
    8ea4:	9f 4f       	sbci	r25, 0xFF	; 255
    8ea6:	16 c0       	rjmp	.+44     	; 0x8ed4 <__floatsisf+0x6c>
    8ea8:	88 23       	and	r24, r24
    8eaa:	11 f0       	breq	.+4      	; 0x8eb0 <__floatsisf+0x48>
    8eac:	96 e9       	ldi	r25, 0x96	; 150
    8eae:	11 c0       	rjmp	.+34     	; 0x8ed2 <__floatsisf+0x6a>
    8eb0:	77 23       	and	r23, r23
    8eb2:	21 f0       	breq	.+8      	; 0x8ebc <__floatsisf+0x54>
    8eb4:	9e e8       	ldi	r25, 0x8E	; 142
    8eb6:	87 2f       	mov	r24, r23
    8eb8:	76 2f       	mov	r23, r22
    8eba:	05 c0       	rjmp	.+10     	; 0x8ec6 <__floatsisf+0x5e>
    8ebc:	66 23       	and	r22, r22
    8ebe:	71 f0       	breq	.+28     	; 0x8edc <__floatsisf+0x74>
    8ec0:	96 e8       	ldi	r25, 0x86	; 134
    8ec2:	86 2f       	mov	r24, r22
    8ec4:	70 e0       	ldi	r23, 0x00	; 0
    8ec6:	60 e0       	ldi	r22, 0x00	; 0
    8ec8:	2a f0       	brmi	.+10     	; 0x8ed4 <__floatsisf+0x6c>
    8eca:	9a 95       	dec	r25
    8ecc:	66 0f       	add	r22, r22
    8ece:	77 1f       	adc	r23, r23
    8ed0:	88 1f       	adc	r24, r24
    8ed2:	da f7       	brpl	.-10     	; 0x8eca <__floatsisf+0x62>
    8ed4:	88 0f       	add	r24, r24
    8ed6:	96 95       	lsr	r25
    8ed8:	87 95       	ror	r24
    8eda:	97 f9       	bld	r25, 7
    8edc:	08 95       	ret

00008ede <__fp_cmp>:
    8ede:	99 0f       	add	r25, r25
    8ee0:	00 08       	sbc	r0, r0
    8ee2:	55 0f       	add	r21, r21
    8ee4:	aa 0b       	sbc	r26, r26
    8ee6:	e0 e8       	ldi	r30, 0x80	; 128
    8ee8:	fe ef       	ldi	r31, 0xFE	; 254
    8eea:	16 16       	cp	r1, r22
    8eec:	17 06       	cpc	r1, r23
    8eee:	e8 07       	cpc	r30, r24
    8ef0:	f9 07       	cpc	r31, r25
    8ef2:	c0 f0       	brcs	.+48     	; 0x8f24 <__fp_cmp+0x46>
    8ef4:	12 16       	cp	r1, r18
    8ef6:	13 06       	cpc	r1, r19
    8ef8:	e4 07       	cpc	r30, r20
    8efa:	f5 07       	cpc	r31, r21
    8efc:	98 f0       	brcs	.+38     	; 0x8f24 <__fp_cmp+0x46>
    8efe:	62 1b       	sub	r22, r18
    8f00:	73 0b       	sbc	r23, r19
    8f02:	84 0b       	sbc	r24, r20
    8f04:	95 0b       	sbc	r25, r21
    8f06:	39 f4       	brne	.+14     	; 0x8f16 <__fp_cmp+0x38>
    8f08:	0a 26       	eor	r0, r26
    8f0a:	61 f0       	breq	.+24     	; 0x8f24 <__fp_cmp+0x46>
    8f0c:	23 2b       	or	r18, r19
    8f0e:	24 2b       	or	r18, r20
    8f10:	25 2b       	or	r18, r21
    8f12:	21 f4       	brne	.+8      	; 0x8f1c <__fp_cmp+0x3e>
    8f14:	08 95       	ret
    8f16:	0a 26       	eor	r0, r26
    8f18:	09 f4       	brne	.+2      	; 0x8f1c <__fp_cmp+0x3e>
    8f1a:	a1 40       	sbci	r26, 0x01	; 1
    8f1c:	a6 95       	lsr	r26
    8f1e:	8f ef       	ldi	r24, 0xFF	; 255
    8f20:	81 1d       	adc	r24, r1
    8f22:	81 1d       	adc	r24, r1
    8f24:	08 95       	ret

00008f26 <__fp_inf>:
    8f26:	97 f9       	bld	r25, 7
    8f28:	9f 67       	ori	r25, 0x7F	; 127
    8f2a:	80 e8       	ldi	r24, 0x80	; 128
    8f2c:	70 e0       	ldi	r23, 0x00	; 0
    8f2e:	60 e0       	ldi	r22, 0x00	; 0
    8f30:	08 95       	ret

00008f32 <__fp_nan>:
    8f32:	9f ef       	ldi	r25, 0xFF	; 255
    8f34:	80 ec       	ldi	r24, 0xC0	; 192
    8f36:	08 95       	ret

00008f38 <__fp_powser>:
    8f38:	df 93       	push	r29
    8f3a:	cf 93       	push	r28
    8f3c:	1f 93       	push	r17
    8f3e:	0f 93       	push	r16
    8f40:	ff 92       	push	r15
    8f42:	ef 92       	push	r14
    8f44:	df 92       	push	r13
    8f46:	7b 01       	movw	r14, r22
    8f48:	8c 01       	movw	r16, r24
    8f4a:	68 94       	set
    8f4c:	05 c0       	rjmp	.+10     	; 0x8f58 <__fp_powser+0x20>
    8f4e:	da 2e       	mov	r13, r26
    8f50:	ef 01       	movw	r28, r30
    8f52:	ab d0       	rcall	.+342    	; 0x90aa <__mulsf3x>
    8f54:	fe 01       	movw	r30, r28
    8f56:	e8 94       	clt
    8f58:	a5 91       	lpm	r26, Z+
    8f5a:	25 91       	lpm	r18, Z+
    8f5c:	35 91       	lpm	r19, Z+
    8f5e:	45 91       	lpm	r20, Z+
    8f60:	55 91       	lpm	r21, Z+
    8f62:	ae f3       	brts	.-22     	; 0x8f4e <__fp_powser+0x16>
    8f64:	ef 01       	movw	r28, r30
    8f66:	29 de       	rcall	.-942    	; 0x8bba <__addsf3x>
    8f68:	fe 01       	movw	r30, r28
    8f6a:	97 01       	movw	r18, r14
    8f6c:	a8 01       	movw	r20, r16
    8f6e:	da 94       	dec	r13
    8f70:	79 f7       	brne	.-34     	; 0x8f50 <__fp_powser+0x18>
    8f72:	df 90       	pop	r13
    8f74:	ef 90       	pop	r14
    8f76:	ff 90       	pop	r15
    8f78:	0f 91       	pop	r16
    8f7a:	1f 91       	pop	r17
    8f7c:	cf 91       	pop	r28
    8f7e:	df 91       	pop	r29
    8f80:	08 95       	ret

00008f82 <__fp_pscA>:
    8f82:	00 24       	eor	r0, r0
    8f84:	0a 94       	dec	r0
    8f86:	16 16       	cp	r1, r22
    8f88:	17 06       	cpc	r1, r23
    8f8a:	18 06       	cpc	r1, r24
    8f8c:	09 06       	cpc	r0, r25
    8f8e:	08 95       	ret

00008f90 <__fp_pscB>:
    8f90:	00 24       	eor	r0, r0
    8f92:	0a 94       	dec	r0
    8f94:	12 16       	cp	r1, r18
    8f96:	13 06       	cpc	r1, r19
    8f98:	14 06       	cpc	r1, r20
    8f9a:	05 06       	cpc	r0, r21
    8f9c:	08 95       	ret
    8f9e:	c9 cf       	rjmp	.-110    	; 0x8f32 <__fp_nan>

00008fa0 <__fp_rempio2>:
    8fa0:	50 d0       	rcall	.+160    	; 0x9042 <__fp_splitA>
    8fa2:	e8 f3       	brcs	.-6      	; 0x8f9e <__fp_pscB+0xe>
    8fa4:	e8 94       	clt
    8fa6:	e0 e0       	ldi	r30, 0x00	; 0
    8fa8:	bb 27       	eor	r27, r27
    8faa:	9f 57       	subi	r25, 0x7F	; 127
    8fac:	f0 f0       	brcs	.+60     	; 0x8fea <__fp_rempio2+0x4a>
    8fae:	2a ed       	ldi	r18, 0xDA	; 218
    8fb0:	3f e0       	ldi	r19, 0x0F	; 15
    8fb2:	49 ec       	ldi	r20, 0xC9	; 201
    8fb4:	06 c0       	rjmp	.+12     	; 0x8fc2 <__fp_rempio2+0x22>
    8fb6:	ee 0f       	add	r30, r30
    8fb8:	bb 0f       	add	r27, r27
    8fba:	66 1f       	adc	r22, r22
    8fbc:	77 1f       	adc	r23, r23
    8fbe:	88 1f       	adc	r24, r24
    8fc0:	28 f0       	brcs	.+10     	; 0x8fcc <__fp_rempio2+0x2c>
    8fc2:	b2 3a       	cpi	r27, 0xA2	; 162
    8fc4:	62 07       	cpc	r22, r18
    8fc6:	73 07       	cpc	r23, r19
    8fc8:	84 07       	cpc	r24, r20
    8fca:	28 f0       	brcs	.+10     	; 0x8fd6 <__fp_rempio2+0x36>
    8fcc:	b2 5a       	subi	r27, 0xA2	; 162
    8fce:	62 0b       	sbc	r22, r18
    8fd0:	73 0b       	sbc	r23, r19
    8fd2:	84 0b       	sbc	r24, r20
    8fd4:	e3 95       	inc	r30
    8fd6:	9a 95       	dec	r25
    8fd8:	72 f7       	brpl	.-36     	; 0x8fb6 <__fp_rempio2+0x16>
    8fda:	80 38       	cpi	r24, 0x80	; 128
    8fdc:	30 f4       	brcc	.+12     	; 0x8fea <__fp_rempio2+0x4a>
    8fde:	9a 95       	dec	r25
    8fe0:	bb 0f       	add	r27, r27
    8fe2:	66 1f       	adc	r22, r22
    8fe4:	77 1f       	adc	r23, r23
    8fe6:	88 1f       	adc	r24, r24
    8fe8:	d2 f7       	brpl	.-12     	; 0x8fde <__fp_rempio2+0x3e>
    8fea:	90 48       	sbci	r25, 0x80	; 128
    8fec:	c0 c0       	rjmp	.+384    	; 0x916e <__fp_mpack_finite>

00008fee <__fp_round>:
    8fee:	09 2e       	mov	r0, r25
    8ff0:	03 94       	inc	r0
    8ff2:	00 0c       	add	r0, r0
    8ff4:	11 f4       	brne	.+4      	; 0x8ffa <__fp_round+0xc>
    8ff6:	88 23       	and	r24, r24
    8ff8:	52 f0       	brmi	.+20     	; 0x900e <__fp_round+0x20>
    8ffa:	bb 0f       	add	r27, r27
    8ffc:	40 f4       	brcc	.+16     	; 0x900e <__fp_round+0x20>
    8ffe:	bf 2b       	or	r27, r31
    9000:	11 f4       	brne	.+4      	; 0x9006 <__fp_round+0x18>
    9002:	60 ff       	sbrs	r22, 0
    9004:	04 c0       	rjmp	.+8      	; 0x900e <__fp_round+0x20>
    9006:	6f 5f       	subi	r22, 0xFF	; 255
    9008:	7f 4f       	sbci	r23, 0xFF	; 255
    900a:	8f 4f       	sbci	r24, 0xFF	; 255
    900c:	9f 4f       	sbci	r25, 0xFF	; 255
    900e:	08 95       	ret

00009010 <__fp_sinus>:
    9010:	ef 93       	push	r30
    9012:	e0 ff       	sbrs	r30, 0
    9014:	06 c0       	rjmp	.+12     	; 0x9022 <__fp_sinus+0x12>
    9016:	a2 ea       	ldi	r26, 0xA2	; 162
    9018:	2a ed       	ldi	r18, 0xDA	; 218
    901a:	3f e0       	ldi	r19, 0x0F	; 15
    901c:	49 ec       	ldi	r20, 0xC9	; 201
    901e:	5f eb       	ldi	r21, 0xBF	; 191
    9020:	cc dd       	rcall	.-1128   	; 0x8bba <__addsf3x>
    9022:	e5 df       	rcall	.-54     	; 0x8fee <__fp_round>
    9024:	0f 90       	pop	r0
    9026:	03 94       	inc	r0
    9028:	01 fc       	sbrc	r0, 1
    902a:	90 58       	subi	r25, 0x80	; 128
    902c:	eb e7       	ldi	r30, 0x7B	; 123
    902e:	f1 e0       	ldi	r31, 0x01	; 1
    9030:	aa c0       	rjmp	.+340    	; 0x9186 <__fp_powsodd>

00009032 <__fp_split3>:
    9032:	57 fd       	sbrc	r21, 7
    9034:	90 58       	subi	r25, 0x80	; 128
    9036:	44 0f       	add	r20, r20
    9038:	55 1f       	adc	r21, r21
    903a:	59 f0       	breq	.+22     	; 0x9052 <__fp_splitA+0x10>
    903c:	5f 3f       	cpi	r21, 0xFF	; 255
    903e:	71 f0       	breq	.+28     	; 0x905c <__fp_splitA+0x1a>
    9040:	47 95       	ror	r20

00009042 <__fp_splitA>:
    9042:	88 0f       	add	r24, r24
    9044:	97 fb       	bst	r25, 7
    9046:	99 1f       	adc	r25, r25
    9048:	61 f0       	breq	.+24     	; 0x9062 <__fp_splitA+0x20>
    904a:	9f 3f       	cpi	r25, 0xFF	; 255
    904c:	79 f0       	breq	.+30     	; 0x906c <__fp_splitA+0x2a>
    904e:	87 95       	ror	r24
    9050:	08 95       	ret
    9052:	12 16       	cp	r1, r18
    9054:	13 06       	cpc	r1, r19
    9056:	14 06       	cpc	r1, r20
    9058:	55 1f       	adc	r21, r21
    905a:	f2 cf       	rjmp	.-28     	; 0x9040 <__fp_split3+0xe>
    905c:	46 95       	lsr	r20
    905e:	f1 df       	rcall	.-30     	; 0x9042 <__fp_splitA>
    9060:	08 c0       	rjmp	.+16     	; 0x9072 <__fp_splitA+0x30>
    9062:	16 16       	cp	r1, r22
    9064:	17 06       	cpc	r1, r23
    9066:	18 06       	cpc	r1, r24
    9068:	99 1f       	adc	r25, r25
    906a:	f1 cf       	rjmp	.-30     	; 0x904e <__fp_splitA+0xc>
    906c:	86 95       	lsr	r24
    906e:	71 05       	cpc	r23, r1
    9070:	61 05       	cpc	r22, r1
    9072:	08 94       	sec
    9074:	08 95       	ret

00009076 <__fp_zero>:
    9076:	e8 94       	clt

00009078 <__fp_szero>:
    9078:	bb 27       	eor	r27, r27
    907a:	66 27       	eor	r22, r22
    907c:	77 27       	eor	r23, r23
    907e:	cb 01       	movw	r24, r22
    9080:	97 f9       	bld	r25, 7
    9082:	08 95       	ret

00009084 <inverse>:
    9084:	9b 01       	movw	r18, r22
    9086:	ac 01       	movw	r20, r24
    9088:	60 e0       	ldi	r22, 0x00	; 0
    908a:	70 e0       	ldi	r23, 0x00	; 0
    908c:	80 e8       	ldi	r24, 0x80	; 128
    908e:	9f e3       	ldi	r25, 0x3F	; 63
    9090:	50 ce       	rjmp	.-864    	; 0x8d32 <__divsf3>

00009092 <__mulsf3>:
    9092:	0b d0       	rcall	.+22     	; 0x90aa <__mulsf3x>
    9094:	ac cf       	rjmp	.-168    	; 0x8fee <__fp_round>
    9096:	75 df       	rcall	.-278    	; 0x8f82 <__fp_pscA>
    9098:	28 f0       	brcs	.+10     	; 0x90a4 <__mulsf3+0x12>
    909a:	7a df       	rcall	.-268    	; 0x8f90 <__fp_pscB>
    909c:	18 f0       	brcs	.+6      	; 0x90a4 <__mulsf3+0x12>
    909e:	95 23       	and	r25, r21
    90a0:	09 f0       	breq	.+2      	; 0x90a4 <__mulsf3+0x12>
    90a2:	41 cf       	rjmp	.-382    	; 0x8f26 <__fp_inf>
    90a4:	46 cf       	rjmp	.-372    	; 0x8f32 <__fp_nan>
    90a6:	11 24       	eor	r1, r1
    90a8:	e7 cf       	rjmp	.-50     	; 0x9078 <__fp_szero>

000090aa <__mulsf3x>:
    90aa:	c3 df       	rcall	.-122    	; 0x9032 <__fp_split3>
    90ac:	a0 f3       	brcs	.-24     	; 0x9096 <__mulsf3+0x4>

000090ae <__mulsf3_pse>:
    90ae:	95 9f       	mul	r25, r21
    90b0:	d1 f3       	breq	.-12     	; 0x90a6 <__mulsf3+0x14>
    90b2:	95 0f       	add	r25, r21
    90b4:	50 e0       	ldi	r21, 0x00	; 0
    90b6:	55 1f       	adc	r21, r21
    90b8:	62 9f       	mul	r22, r18
    90ba:	f0 01       	movw	r30, r0
    90bc:	72 9f       	mul	r23, r18
    90be:	bb 27       	eor	r27, r27
    90c0:	f0 0d       	add	r31, r0
    90c2:	b1 1d       	adc	r27, r1
    90c4:	63 9f       	mul	r22, r19
    90c6:	aa 27       	eor	r26, r26
    90c8:	f0 0d       	add	r31, r0
    90ca:	b1 1d       	adc	r27, r1
    90cc:	aa 1f       	adc	r26, r26
    90ce:	64 9f       	mul	r22, r20
    90d0:	66 27       	eor	r22, r22
    90d2:	b0 0d       	add	r27, r0
    90d4:	a1 1d       	adc	r26, r1
    90d6:	66 1f       	adc	r22, r22
    90d8:	82 9f       	mul	r24, r18
    90da:	22 27       	eor	r18, r18
    90dc:	b0 0d       	add	r27, r0
    90de:	a1 1d       	adc	r26, r1
    90e0:	62 1f       	adc	r22, r18
    90e2:	73 9f       	mul	r23, r19
    90e4:	b0 0d       	add	r27, r0
    90e6:	a1 1d       	adc	r26, r1
    90e8:	62 1f       	adc	r22, r18
    90ea:	83 9f       	mul	r24, r19
    90ec:	a0 0d       	add	r26, r0
    90ee:	61 1d       	adc	r22, r1
    90f0:	22 1f       	adc	r18, r18
    90f2:	74 9f       	mul	r23, r20
    90f4:	33 27       	eor	r19, r19
    90f6:	a0 0d       	add	r26, r0
    90f8:	61 1d       	adc	r22, r1
    90fa:	23 1f       	adc	r18, r19
    90fc:	84 9f       	mul	r24, r20
    90fe:	60 0d       	add	r22, r0
    9100:	21 1d       	adc	r18, r1
    9102:	82 2f       	mov	r24, r18
    9104:	76 2f       	mov	r23, r22
    9106:	6a 2f       	mov	r22, r26
    9108:	11 24       	eor	r1, r1
    910a:	9f 57       	subi	r25, 0x7F	; 127
    910c:	50 40       	sbci	r21, 0x00	; 0
    910e:	8a f0       	brmi	.+34     	; 0x9132 <__mulsf3_pse+0x84>
    9110:	e1 f0       	breq	.+56     	; 0x914a <__mulsf3_pse+0x9c>
    9112:	88 23       	and	r24, r24
    9114:	4a f0       	brmi	.+18     	; 0x9128 <__mulsf3_pse+0x7a>
    9116:	ee 0f       	add	r30, r30
    9118:	ff 1f       	adc	r31, r31
    911a:	bb 1f       	adc	r27, r27
    911c:	66 1f       	adc	r22, r22
    911e:	77 1f       	adc	r23, r23
    9120:	88 1f       	adc	r24, r24
    9122:	91 50       	subi	r25, 0x01	; 1
    9124:	50 40       	sbci	r21, 0x00	; 0
    9126:	a9 f7       	brne	.-22     	; 0x9112 <__mulsf3_pse+0x64>
    9128:	9e 3f       	cpi	r25, 0xFE	; 254
    912a:	51 05       	cpc	r21, r1
    912c:	70 f0       	brcs	.+28     	; 0x914a <__mulsf3_pse+0x9c>
    912e:	fb ce       	rjmp	.-522    	; 0x8f26 <__fp_inf>
    9130:	a3 cf       	rjmp	.-186    	; 0x9078 <__fp_szero>
    9132:	5f 3f       	cpi	r21, 0xFF	; 255
    9134:	ec f3       	brlt	.-6      	; 0x9130 <__mulsf3_pse+0x82>
    9136:	98 3e       	cpi	r25, 0xE8	; 232
    9138:	dc f3       	brlt	.-10     	; 0x9130 <__mulsf3_pse+0x82>
    913a:	86 95       	lsr	r24
    913c:	77 95       	ror	r23
    913e:	67 95       	ror	r22
    9140:	b7 95       	ror	r27
    9142:	f7 95       	ror	r31
    9144:	e7 95       	ror	r30
    9146:	9f 5f       	subi	r25, 0xFF	; 255
    9148:	c1 f7       	brne	.-16     	; 0x913a <__mulsf3_pse+0x8c>
    914a:	fe 2b       	or	r31, r30
    914c:	88 0f       	add	r24, r24
    914e:	91 1d       	adc	r25, r1
    9150:	96 95       	lsr	r25
    9152:	87 95       	ror	r24
    9154:	97 f9       	bld	r25, 7
    9156:	08 95       	ret

00009158 <sin>:
    9158:	9f 93       	push	r25
    915a:	22 df       	rcall	.-444    	; 0x8fa0 <__fp_rempio2>
    915c:	0f 90       	pop	r0
    915e:	07 fc       	sbrc	r0, 7
    9160:	ee 5f       	subi	r30, 0xFE	; 254
    9162:	56 cf       	rjmp	.-340    	; 0x9010 <__fp_sinus>

00009164 <square>:
    9164:	9b 01       	movw	r18, r22
    9166:	ac 01       	movw	r20, r24
    9168:	94 cf       	rjmp	.-216    	; 0x9092 <__mulsf3>

0000916a <__fp_mpack>:
    916a:	9f 3f       	cpi	r25, 0xFF	; 255
    916c:	31 f0       	breq	.+12     	; 0x917a <__fp_mpack_finite+0xc>

0000916e <__fp_mpack_finite>:
    916e:	91 50       	subi	r25, 0x01	; 1
    9170:	20 f4       	brcc	.+8      	; 0x917a <__fp_mpack_finite+0xc>
    9172:	87 95       	ror	r24
    9174:	77 95       	ror	r23
    9176:	67 95       	ror	r22
    9178:	b7 95       	ror	r27
    917a:	88 0f       	add	r24, r24
    917c:	91 1d       	adc	r25, r1
    917e:	96 95       	lsr	r25
    9180:	87 95       	ror	r24
    9182:	97 f9       	bld	r25, 7
    9184:	08 95       	ret

00009186 <__fp_powsodd>:
    9186:	9f 93       	push	r25
    9188:	8f 93       	push	r24
    918a:	7f 93       	push	r23
    918c:	6f 93       	push	r22
    918e:	ff 93       	push	r31
    9190:	ef 93       	push	r30
    9192:	9b 01       	movw	r18, r22
    9194:	ac 01       	movw	r20, r24
    9196:	7d df       	rcall	.-262    	; 0x9092 <__mulsf3>
    9198:	ef 91       	pop	r30
    919a:	ff 91       	pop	r31
    919c:	cd de       	rcall	.-614    	; 0x8f38 <__fp_powser>
    919e:	2f 91       	pop	r18
    91a0:	3f 91       	pop	r19
    91a2:	4f 91       	pop	r20
    91a4:	5f 91       	pop	r21
    91a6:	75 cf       	rjmp	.-278    	; 0x9092 <__mulsf3>

000091a8 <__mulsi3>:
    91a8:	62 9f       	mul	r22, r18
    91aa:	d0 01       	movw	r26, r0
    91ac:	73 9f       	mul	r23, r19
    91ae:	f0 01       	movw	r30, r0
    91b0:	82 9f       	mul	r24, r18
    91b2:	e0 0d       	add	r30, r0
    91b4:	f1 1d       	adc	r31, r1
    91b6:	64 9f       	mul	r22, r20
    91b8:	e0 0d       	add	r30, r0
    91ba:	f1 1d       	adc	r31, r1
    91bc:	92 9f       	mul	r25, r18
    91be:	f0 0d       	add	r31, r0
    91c0:	83 9f       	mul	r24, r19
    91c2:	f0 0d       	add	r31, r0
    91c4:	74 9f       	mul	r23, r20
    91c6:	f0 0d       	add	r31, r0
    91c8:	65 9f       	mul	r22, r21
    91ca:	f0 0d       	add	r31, r0
    91cc:	99 27       	eor	r25, r25
    91ce:	72 9f       	mul	r23, r18
    91d0:	b0 0d       	add	r27, r0
    91d2:	e1 1d       	adc	r30, r1
    91d4:	f9 1f       	adc	r31, r25
    91d6:	63 9f       	mul	r22, r19
    91d8:	b0 0d       	add	r27, r0
    91da:	e1 1d       	adc	r30, r1
    91dc:	f9 1f       	adc	r31, r25
    91de:	bd 01       	movw	r22, r26
    91e0:	cf 01       	movw	r24, r30
    91e2:	11 24       	eor	r1, r1
    91e4:	08 95       	ret

000091e6 <__udivmodhi4>:
    91e6:	aa 1b       	sub	r26, r26
    91e8:	bb 1b       	sub	r27, r27
    91ea:	51 e1       	ldi	r21, 0x11	; 17
    91ec:	07 c0       	rjmp	.+14     	; 0x91fc <__udivmodhi4_ep>

000091ee <__udivmodhi4_loop>:
    91ee:	aa 1f       	adc	r26, r26
    91f0:	bb 1f       	adc	r27, r27
    91f2:	a6 17       	cp	r26, r22
    91f4:	b7 07       	cpc	r27, r23
    91f6:	10 f0       	brcs	.+4      	; 0x91fc <__udivmodhi4_ep>
    91f8:	a6 1b       	sub	r26, r22
    91fa:	b7 0b       	sbc	r27, r23

000091fc <__udivmodhi4_ep>:
    91fc:	88 1f       	adc	r24, r24
    91fe:	99 1f       	adc	r25, r25
    9200:	5a 95       	dec	r21
    9202:	a9 f7       	brne	.-22     	; 0x91ee <__udivmodhi4_loop>
    9204:	80 95       	com	r24
    9206:	90 95       	com	r25
    9208:	bc 01       	movw	r22, r24
    920a:	cd 01       	movw	r24, r26
    920c:	08 95       	ret

0000920e <__divmodhi4>:
    920e:	97 fb       	bst	r25, 7
    9210:	09 2e       	mov	r0, r25
    9212:	07 26       	eor	r0, r23
    9214:	0a d0       	rcall	.+20     	; 0x922a <__divmodhi4_neg1>
    9216:	77 fd       	sbrc	r23, 7
    9218:	04 d0       	rcall	.+8      	; 0x9222 <__divmodhi4_neg2>
    921a:	e5 df       	rcall	.-54     	; 0x91e6 <__udivmodhi4>
    921c:	06 d0       	rcall	.+12     	; 0x922a <__divmodhi4_neg1>
    921e:	00 20       	and	r0, r0
    9220:	1a f4       	brpl	.+6      	; 0x9228 <__divmodhi4_exit>

00009222 <__divmodhi4_neg2>:
    9222:	70 95       	com	r23
    9224:	61 95       	neg	r22
    9226:	7f 4f       	sbci	r23, 0xFF	; 255

00009228 <__divmodhi4_exit>:
    9228:	08 95       	ret

0000922a <__divmodhi4_neg1>:
    922a:	f6 f7       	brtc	.-4      	; 0x9228 <__divmodhi4_exit>
    922c:	90 95       	com	r25
    922e:	81 95       	neg	r24
    9230:	9f 4f       	sbci	r25, 0xFF	; 255
    9232:	08 95       	ret

00009234 <__divmodsi4>:
    9234:	97 fb       	bst	r25, 7
    9236:	09 2e       	mov	r0, r25
    9238:	05 26       	eor	r0, r21
    923a:	0e d0       	rcall	.+28     	; 0x9258 <__divmodsi4_neg1>
    923c:	57 fd       	sbrc	r21, 7
    923e:	04 d0       	rcall	.+8      	; 0x9248 <__divmodsi4_neg2>
    9240:	14 d0       	rcall	.+40     	; 0x926a <__udivmodsi4>
    9242:	0a d0       	rcall	.+20     	; 0x9258 <__divmodsi4_neg1>
    9244:	00 1c       	adc	r0, r0
    9246:	38 f4       	brcc	.+14     	; 0x9256 <__divmodsi4_exit>

00009248 <__divmodsi4_neg2>:
    9248:	50 95       	com	r21
    924a:	40 95       	com	r20
    924c:	30 95       	com	r19
    924e:	21 95       	neg	r18
    9250:	3f 4f       	sbci	r19, 0xFF	; 255
    9252:	4f 4f       	sbci	r20, 0xFF	; 255
    9254:	5f 4f       	sbci	r21, 0xFF	; 255

00009256 <__divmodsi4_exit>:
    9256:	08 95       	ret

00009258 <__divmodsi4_neg1>:
    9258:	f6 f7       	brtc	.-4      	; 0x9256 <__divmodsi4_exit>
    925a:	90 95       	com	r25
    925c:	80 95       	com	r24
    925e:	70 95       	com	r23
    9260:	61 95       	neg	r22
    9262:	7f 4f       	sbci	r23, 0xFF	; 255
    9264:	8f 4f       	sbci	r24, 0xFF	; 255
    9266:	9f 4f       	sbci	r25, 0xFF	; 255
    9268:	08 95       	ret

0000926a <__udivmodsi4>:
    926a:	a1 e2       	ldi	r26, 0x21	; 33
    926c:	1a 2e       	mov	r1, r26
    926e:	aa 1b       	sub	r26, r26
    9270:	bb 1b       	sub	r27, r27
    9272:	fd 01       	movw	r30, r26
    9274:	0d c0       	rjmp	.+26     	; 0x9290 <__udivmodsi4_ep>

00009276 <__udivmodsi4_loop>:
    9276:	aa 1f       	adc	r26, r26
    9278:	bb 1f       	adc	r27, r27
    927a:	ee 1f       	adc	r30, r30
    927c:	ff 1f       	adc	r31, r31
    927e:	a2 17       	cp	r26, r18
    9280:	b3 07       	cpc	r27, r19
    9282:	e4 07       	cpc	r30, r20
    9284:	f5 07       	cpc	r31, r21
    9286:	20 f0       	brcs	.+8      	; 0x9290 <__udivmodsi4_ep>
    9288:	a2 1b       	sub	r26, r18
    928a:	b3 0b       	sbc	r27, r19
    928c:	e4 0b       	sbc	r30, r20
    928e:	f5 0b       	sbc	r31, r21

00009290 <__udivmodsi4_ep>:
    9290:	66 1f       	adc	r22, r22
    9292:	77 1f       	adc	r23, r23
    9294:	88 1f       	adc	r24, r24
    9296:	99 1f       	adc	r25, r25
    9298:	1a 94       	dec	r1
    929a:	69 f7       	brne	.-38     	; 0x9276 <__udivmodsi4_loop>
    929c:	60 95       	com	r22
    929e:	70 95       	com	r23
    92a0:	80 95       	com	r24
    92a2:	90 95       	com	r25
    92a4:	9b 01       	movw	r18, r22
    92a6:	ac 01       	movw	r20, r24
    92a8:	bd 01       	movw	r22, r26
    92aa:	cf 01       	movw	r24, r30
    92ac:	08 95       	ret

000092ae <do_rand>:
    92ae:	af 92       	push	r10
    92b0:	bf 92       	push	r11
    92b2:	cf 92       	push	r12
    92b4:	df 92       	push	r13
    92b6:	ef 92       	push	r14
    92b8:	ff 92       	push	r15
    92ba:	0f 93       	push	r16
    92bc:	1f 93       	push	r17
    92be:	cf 93       	push	r28
    92c0:	df 93       	push	r29
    92c2:	ec 01       	movw	r28, r24
    92c4:	68 81       	ld	r22, Y
    92c6:	79 81       	ldd	r23, Y+1	; 0x01
    92c8:	8a 81       	ldd	r24, Y+2	; 0x02
    92ca:	9b 81       	ldd	r25, Y+3	; 0x03
    92cc:	61 15       	cp	r22, r1
    92ce:	71 05       	cpc	r23, r1
    92d0:	81 05       	cpc	r24, r1
    92d2:	91 05       	cpc	r25, r1
    92d4:	21 f4       	brne	.+8      	; 0x92de <do_rand+0x30>
    92d6:	64 e2       	ldi	r22, 0x24	; 36
    92d8:	79 ed       	ldi	r23, 0xD9	; 217
    92da:	8b e5       	ldi	r24, 0x5B	; 91
    92dc:	97 e0       	ldi	r25, 0x07	; 7
    92de:	2d e1       	ldi	r18, 0x1D	; 29
    92e0:	33 ef       	ldi	r19, 0xF3	; 243
    92e2:	41 e0       	ldi	r20, 0x01	; 1
    92e4:	50 e0       	ldi	r21, 0x00	; 0
    92e6:	0e 94 1a 49 	call	0x9234	; 0x9234 <__divmodsi4>
    92ea:	79 01       	movw	r14, r18
    92ec:	8a 01       	movw	r16, r20
    92ee:	27 ea       	ldi	r18, 0xA7	; 167
    92f0:	31 e4       	ldi	r19, 0x41	; 65
    92f2:	40 e0       	ldi	r20, 0x00	; 0
    92f4:	50 e0       	ldi	r21, 0x00	; 0
    92f6:	0e 94 d4 48 	call	0x91a8	; 0x91a8 <__mulsi3>
    92fa:	5b 01       	movw	r10, r22
    92fc:	6c 01       	movw	r12, r24
    92fe:	c8 01       	movw	r24, r16
    9300:	b7 01       	movw	r22, r14
    9302:	2c ee       	ldi	r18, 0xEC	; 236
    9304:	34 ef       	ldi	r19, 0xF4	; 244
    9306:	4f ef       	ldi	r20, 0xFF	; 255
    9308:	5f ef       	ldi	r21, 0xFF	; 255
    930a:	0e 94 d4 48 	call	0x91a8	; 0x91a8 <__mulsi3>
    930e:	6a 0d       	add	r22, r10
    9310:	7b 1d       	adc	r23, r11
    9312:	8c 1d       	adc	r24, r12
    9314:	9d 1d       	adc	r25, r13
    9316:	97 ff       	sbrs	r25, 7
    9318:	04 c0       	rjmp	.+8      	; 0x9322 <do_rand+0x74>
    931a:	61 50       	subi	r22, 0x01	; 1
    931c:	70 40       	sbci	r23, 0x00	; 0
    931e:	80 40       	sbci	r24, 0x00	; 0
    9320:	90 48       	sbci	r25, 0x80	; 128
    9322:	68 83       	st	Y, r22
    9324:	79 83       	std	Y+1, r23	; 0x01
    9326:	8a 83       	std	Y+2, r24	; 0x02
    9328:	9b 83       	std	Y+3, r25	; 0x03
    932a:	7f 77       	andi	r23, 0x7F	; 127
    932c:	cb 01       	movw	r24, r22
    932e:	df 91       	pop	r29
    9330:	cf 91       	pop	r28
    9332:	1f 91       	pop	r17
    9334:	0f 91       	pop	r16
    9336:	ff 90       	pop	r15
    9338:	ef 90       	pop	r14
    933a:	df 90       	pop	r13
    933c:	cf 90       	pop	r12
    933e:	bf 90       	pop	r11
    9340:	af 90       	pop	r10
    9342:	08 95       	ret

00009344 <rand_r>:
    9344:	0e 94 57 49 	call	0x92ae	; 0x92ae <do_rand>
    9348:	08 95       	ret

0000934a <rand>:
    934a:	88 e1       	ldi	r24, 0x18	; 24
    934c:	92 e0       	ldi	r25, 0x02	; 2
    934e:	0e 94 57 49 	call	0x92ae	; 0x92ae <do_rand>
    9352:	08 95       	ret

00009354 <srand>:
    9354:	a0 e0       	ldi	r26, 0x00	; 0
    9356:	b0 e0       	ldi	r27, 0x00	; 0
    9358:	80 93 18 02 	sts	0x0218, r24
    935c:	90 93 19 02 	sts	0x0219, r25
    9360:	a0 93 1a 02 	sts	0x021A, r26
    9364:	b0 93 1b 02 	sts	0x021B, r27
    9368:	08 95       	ret

0000936a <memset>:
    936a:	dc 01       	movw	r26, r24
    936c:	01 c0       	rjmp	.+2      	; 0x9370 <memset+0x6>
    936e:	6d 93       	st	X+, r22
    9370:	41 50       	subi	r20, 0x01	; 1
    9372:	50 40       	sbci	r21, 0x00	; 0
    9374:	e0 f7       	brcc	.-8      	; 0x936e <memset+0x4>
    9376:	08 95       	ret

00009378 <__eerd_block_m2560>:
    9378:	dc 01       	movw	r26, r24
    937a:	cb 01       	movw	r24, r22

0000937c <__eerd_blraw_m2560>:
    937c:	fc 01       	movw	r30, r24
    937e:	f9 99       	sbic	0x1f, 1	; 31
    9380:	fe cf       	rjmp	.-4      	; 0x937e <__eerd_blraw_m2560+0x2>
    9382:	06 c0       	rjmp	.+12     	; 0x9390 <__eerd_blraw_m2560+0x14>
    9384:	f2 bd       	out	0x22, r31	; 34
    9386:	e1 bd       	out	0x21, r30	; 33
    9388:	f8 9a       	sbi	0x1f, 0	; 31
    938a:	31 96       	adiw	r30, 0x01	; 1
    938c:	00 b4       	in	r0, 0x20	; 32
    938e:	0d 92       	st	X+, r0
    9390:	41 50       	subi	r20, 0x01	; 1
    9392:	50 40       	sbci	r21, 0x00	; 0
    9394:	b8 f7       	brcc	.-18     	; 0x9384 <__eerd_blraw_m2560+0x8>
    9396:	08 95       	ret

00009398 <__eerd_byte_m2560>:
    9398:	f9 99       	sbic	0x1f, 1	; 31
    939a:	fe cf       	rjmp	.-4      	; 0x9398 <__eerd_byte_m2560>
    939c:	92 bd       	out	0x22, r25	; 34
    939e:	81 bd       	out	0x21, r24	; 33
    93a0:	f8 9a       	sbi	0x1f, 0	; 31
    93a2:	99 27       	eor	r25, r25
    93a4:	80 b5       	in	r24, 0x20	; 32
    93a6:	08 95       	ret

000093a8 <__eerd_word_m2560>:
    93a8:	a8 e1       	ldi	r26, 0x18	; 24
    93aa:	b0 e0       	ldi	r27, 0x00	; 0
    93ac:	42 e0       	ldi	r20, 0x02	; 2
    93ae:	50 e0       	ldi	r21, 0x00	; 0
    93b0:	0c 94 be 49 	jmp	0x937c	; 0x937c <__eerd_blraw_m2560>

000093b4 <__eeupd_block_m2560>:
    93b4:	dc 01       	movw	r26, r24
    93b6:	a4 0f       	add	r26, r20
    93b8:	b5 1f       	adc	r27, r21
    93ba:	41 50       	subi	r20, 0x01	; 1
    93bc:	50 40       	sbci	r21, 0x00	; 0
    93be:	48 f0       	brcs	.+18     	; 0x93d2 <__eeupd_block_m2560+0x1e>
    93c0:	cb 01       	movw	r24, r22
    93c2:	84 0f       	add	r24, r20
    93c4:	95 1f       	adc	r25, r21
    93c6:	2e 91       	ld	r18, -X
    93c8:	0e 94 eb 49 	call	0x93d6	; 0x93d6 <__eeupd_r18_m2560>
    93cc:	41 50       	subi	r20, 0x01	; 1
    93ce:	50 40       	sbci	r21, 0x00	; 0
    93d0:	d0 f7       	brcc	.-12     	; 0x93c6 <__eeupd_block_m2560+0x12>
    93d2:	08 95       	ret

000093d4 <__eeupd_byte_m2560>:
    93d4:	26 2f       	mov	r18, r22

000093d6 <__eeupd_r18_m2560>:
    93d6:	f9 99       	sbic	0x1f, 1	; 31
    93d8:	fe cf       	rjmp	.-4      	; 0x93d6 <__eeupd_r18_m2560>
    93da:	92 bd       	out	0x22, r25	; 34
    93dc:	81 bd       	out	0x21, r24	; 33
    93de:	f8 9a       	sbi	0x1f, 0	; 31
    93e0:	01 97       	sbiw	r24, 0x01	; 1
    93e2:	00 b4       	in	r0, 0x20	; 32
    93e4:	02 16       	cp	r0, r18
    93e6:	39 f0       	breq	.+14     	; 0x93f6 <__eeupd_r18_m2560+0x20>
    93e8:	1f ba       	out	0x1f, r1	; 31
    93ea:	20 bd       	out	0x20, r18	; 32
    93ec:	0f b6       	in	r0, 0x3f	; 63
    93ee:	f8 94       	cli
    93f0:	fa 9a       	sbi	0x1f, 2	; 31
    93f2:	f9 9a       	sbi	0x1f, 1	; 31
    93f4:	0f be       	out	0x3f, r0	; 63
    93f6:	08 95       	ret

000093f8 <__eeupd_word_m2560>:
    93f8:	01 96       	adiw	r24, 0x01	; 1
    93fa:	27 2f       	mov	r18, r23
    93fc:	0e 94 eb 49 	call	0x93d6	; 0x93d6 <__eeupd_r18_m2560>
    9400:	0c 94 ea 49 	jmp	0x93d4	; 0x93d4 <__eeupd_byte_m2560>

00009404 <__eewr_byte_m2560>:
    9404:	26 2f       	mov	r18, r22

00009406 <__eewr_r18_m2560>:
    9406:	f9 99       	sbic	0x1f, 1	; 31
    9408:	fe cf       	rjmp	.-4      	; 0x9406 <__eewr_r18_m2560>
    940a:	1f ba       	out	0x1f, r1	; 31
    940c:	92 bd       	out	0x22, r25	; 34
    940e:	81 bd       	out	0x21, r24	; 33
    9410:	20 bd       	out	0x20, r18	; 32
    9412:	0f b6       	in	r0, 0x3f	; 63
    9414:	f8 94       	cli
    9416:	fa 9a       	sbi	0x1f, 2	; 31
    9418:	f9 9a       	sbi	0x1f, 1	; 31
    941a:	0f be       	out	0x3f, r0	; 63
    941c:	01 96       	adiw	r24, 0x01	; 1
    941e:	08 95       	ret

00009420 <__eewr_word_m2560>:
    9420:	0e 94 02 4a 	call	0x9404	; 0x9404 <__eewr_byte_m2560>
    9424:	27 2f       	mov	r18, r23
    9426:	0c 94 03 4a 	jmp	0x9406	; 0x9406 <__eewr_r18_m2560>

0000942a <_exit>:
    942a:	ff cf       	rjmp	.-2      	; 0x942a <_exit>
