
Elisa3-avr-studio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800200  0000aeee  0000af82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000aeee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000951  0080022e  0080022e  0000afb0  2**0
                  ALLOC
  3 .stab         000037ec  00000000  00000000  0000afb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f7b  00000000  00000000  0000e79c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000238  00000000  00000000  0000f717  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000026f9  00000000  00000000  0000f94f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006756  00000000  00000000  00012048  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001291  00000000  00000000  0001879e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000084bd  00000000  00000000  00019a2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000920  00000000  00000000  00021eec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001dd8  00000000  00000000  0002280c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002956  00000000  00000000  000245e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000296  00000000  00000000  00026f3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000140  00000000  00000000  000271d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__ctors_end>
       4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
       8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
       c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      10:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      14:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      18:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      1c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      20:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      24:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      28:	0c 94 d3 15 	jmp	0x2ba6	; 0x2ba6 <__vector_10>
      2c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      30:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      34:	0c 94 07 16 	jmp	0x2c0e	; 0x2c0e <__vector_13>
      38:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      3c:	0c 94 bf 21 	jmp	0x437e	; 0x437e <__vector_15>
      40:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      44:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      48:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      4c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      50:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      54:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      58:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      5c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      60:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      64:	0c 94 83 20 	jmp	0x4106	; 0x4106 <__vector_25>
      68:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      6c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      70:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      74:	0c 94 a1 22 	jmp	0x4542	; 0x4542 <__vector_29>
      78:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      7c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      80:	0c 94 e8 3b 	jmp	0x77d0	; 0x77d0 <__vector_32>
      84:	0c 94 fe 3b 	jmp	0x77fc	; 0x77fc <__vector_33>
      88:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      8c:	0c 94 5b 3b 	jmp	0x76b6	; 0x76b6 <__vector_35>
      90:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      94:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      98:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      9c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      a0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      a4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      a8:	0c 94 2f 3b 	jmp	0x765e	; 0x765e <__vector_42>
      ac:	0c 94 45 3b 	jmp	0x768a	; 0x768a <__vector_43>
      b0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      b4:	0c 94 98 3a 	jmp	0x7530	; 0x7530 <__vector_45>
      b8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      bc:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      c0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      c4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      c8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      cc:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      d0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      d4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      d8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      dc:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      e0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      e4:	e4 18       	sub	r14, r4
      e6:	c8 18       	sub	r12, r8
      e8:	96 18       	sub	r9, r6
      ea:	81 18       	sub	r8, r1
      ec:	58 18       	sub	r5, r8
      ee:	46 18       	sub	r4, r6
      f0:	1d 18       	sub	r1, r13
      f2:	01 18       	sub	r0, r1
      f4:	c8 17       	cp	r28, r24
      f6:	b0 17       	cp	r27, r16
      f8:	49 17       	cp	r20, r25
      fa:	49 17       	cp	r20, r25
      fc:	49 17       	cp	r20, r25
      fe:	49 17       	cp	r20, r25
     100:	49 17       	cp	r20, r25
     102:	49 17       	cp	r20, r25
     104:	f5 17       	cp	r31, r21
     106:	a5 17       	cp	r26, r21
     108:	49 17       	cp	r20, r25
     10a:	49 17       	cp	r20, r25
     10c:	49 17       	cp	r20, r25
     10e:	49 17       	cp	r20, r25
     110:	49 17       	cp	r20, r25
     112:	49 17       	cp	r20, r25
     114:	49 17       	cp	r20, r25
     116:	49 17       	cp	r20, r25
     118:	49 17       	cp	r20, r25
     11a:	49 17       	cp	r20, r25
     11c:	49 17       	cp	r20, r25
     11e:	49 17       	cp	r20, r25
     120:	c8 17       	cp	r28, r24
     122:	96 18       	sub	r9, r6
     124:	7d 17       	cp	r23, r29
     126:	70 17       	cp	r23, r16
     128:	49 17       	cp	r20, r25
     12a:	49 17       	cp	r20, r25
     12c:	49 17       	cp	r20, r25
     12e:	49 17       	cp	r20, r25
     130:	49 17       	cp	r20, r25
     132:	49 17       	cp	r20, r25
     134:	49 17       	cp	r20, r25
     136:	49 17       	cp	r20, r25
     138:	49 17       	cp	r20, r25
     13a:	49 17       	cp	r20, r25
     13c:	49 17       	cp	r20, r25
     13e:	49 17       	cp	r20, r25
     140:	58 18       	sub	r5, r8
     142:	1d 18       	sub	r1, r13
     144:	49 17       	cp	r20, r25
     146:	49 17       	cp	r20, r25
     148:	e4 18       	sub	r14, r4
     14a:	46 18       	sub	r4, r6
     14c:	89 17       	cp	r24, r25
     14e:	08 4a       	sbci	r16, 0xA8	; 168
     150:	d7 3b       	cpi	r29, 0xB7	; 183
     152:	3b ce       	rjmp	.-906    	; 0xfffffdca <__eeprom_end+0xff7efdca>
     154:	01 6e       	ori	r16, 0xE1	; 225
     156:	84 bc       	out	0x24, r8	; 36
     158:	bf fd       	.word	0xfdbf	; ????
     15a:	c1 2f       	mov	r28, r17
     15c:	3d 6c       	ori	r19, 0xCD	; 205
     15e:	74 31       	cpi	r23, 0x14	; 20
     160:	9a bd       	out	0x2a, r25	; 42
     162:	56 83       	std	Z+6, r21	; 0x06
     164:	3d da       	rcall	.-2950   	; 0xfffff5e0 <__eeprom_end+0xff7ef5e0>
     166:	3d 00       	.word	0x003d	; ????
     168:	c7 7f       	andi	r28, 0xF7	; 247
     16a:	11 be       	out	0x31, r1	; 49
     16c:	d9 e4       	ldi	r29, 0x49	; 73
     16e:	bb 4c       	sbci	r27, 0xCB	; 203
     170:	3e 91       	ld	r19, -X
     172:	6b aa       	std	Y+51, r6	; 0x33
     174:	aa be       	out	0x3a, r10	; 58
     176:	00 00       	nop
     178:	00 80       	ld	r0, Z
     17a:	3f 05       	cpc	r19, r15
     17c:	a8 4c       	sbci	r26, 0xC8	; 200
     17e:	cd b2       	in	r12, 0x1d	; 29
     180:	d4 4e       	sbci	r29, 0xE4	; 228
     182:	b9 38       	cpi	r27, 0x89	; 137
     184:	36 a9       	ldd	r19, Z+54	; 0x36
     186:	02 0c       	add	r0, r2
     188:	50 b9       	out	0x00, r21	; 0
     18a:	91 86       	std	Z+9, r9	; 0x09
     18c:	88 08       	sbc	r8, r8
     18e:	3c a6       	std	Y+44, r3	; 0x2c
     190:	aa aa       	std	Y+50, r10	; 0x32
     192:	2a be       	out	0x3a, r2	; 58
     194:	00 00       	nop
     196:	00 80       	ld	r0, Z
     198:	3f 00       	.word	0x003f	; ????

0000019a <__ctors_end>:
     19a:	11 24       	eor	r1, r1
     19c:	1f be       	out	0x3f, r1	; 63
     19e:	cf ef       	ldi	r28, 0xFF	; 255
     1a0:	d1 e2       	ldi	r29, 0x21	; 33
     1a2:	de bf       	out	0x3e, r29	; 62
     1a4:	cd bf       	out	0x3d, r28	; 61
     1a6:	00 e0       	ldi	r16, 0x00	; 0
     1a8:	0c bf       	out	0x3c, r16	; 60

000001aa <__do_copy_data>:
     1aa:	12 e0       	ldi	r17, 0x02	; 2
     1ac:	a0 e0       	ldi	r26, 0x00	; 0
     1ae:	b2 e0       	ldi	r27, 0x02	; 2
     1b0:	ee ee       	ldi	r30, 0xEE	; 238
     1b2:	fe ea       	ldi	r31, 0xAE	; 174
     1b4:	02 c0       	rjmp	.+4      	; 0x1ba <.do_copy_data_start>

000001b6 <.do_copy_data_loop>:
     1b6:	05 90       	lpm	r0, Z+
     1b8:	0d 92       	st	X+, r0

000001ba <.do_copy_data_start>:
     1ba:	ae 32       	cpi	r26, 0x2E	; 46
     1bc:	b1 07       	cpc	r27, r17
     1be:	d9 f7       	brne	.-10     	; 0x1b6 <.do_copy_data_loop>

000001c0 <__do_clear_bss>:
     1c0:	1b e0       	ldi	r17, 0x0B	; 11
     1c2:	ae e2       	ldi	r26, 0x2E	; 46
     1c4:	b2 e0       	ldi	r27, 0x02	; 2
     1c6:	01 c0       	rjmp	.+2      	; 0x1ca <.do_clear_bss_start>

000001c8 <.do_clear_bss_loop>:
     1c8:	1d 92       	st	X+, r1

000001ca <.do_clear_bss_start>:
     1ca:	af 37       	cpi	r26, 0x7F	; 127
     1cc:	b1 07       	cpc	r27, r17
     1ce:	e1 f7       	brne	.-8      	; 0x1c8 <.do_clear_bss_loop>
     1d0:	0e 94 ee 00 	call	0x1dc	; 0x1dc <main>
     1d4:	0c 94 76 57 	jmp	0xaeec	; 0xaeec <_exit>

000001d8 <__bad_interrupt>:
     1d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001dc <main>:
#include "nRF24L01.h"
#include "behaviors.h"
#include "sensors.h"
#include "irCommunication.h"

int main(void) {
     1dc:	2f 92       	push	r2
     1de:	3f 92       	push	r3
     1e0:	4f 92       	push	r4
     1e2:	5f 92       	push	r5
     1e4:	6f 92       	push	r6
     1e6:	7f 92       	push	r7
     1e8:	8f 92       	push	r8
     1ea:	9f 92       	push	r9
     1ec:	af 92       	push	r10
     1ee:	bf 92       	push	r11
     1f0:	cf 92       	push	r12
     1f2:	df 92       	push	r13
     1f4:	ef 92       	push	r14
     1f6:	ff 92       	push	r15
     1f8:	0f 93       	push	r16
     1fa:	1f 93       	push	r17
     1fc:	df 93       	push	r29
     1fe:	cf 93       	push	r28
     200:	cd b7       	in	r28, 0x3d	; 61
     202:	de b7       	in	r29, 0x3e	; 62
     204:	2a 97       	sbiw	r28, 0x0a	; 10
     206:	0f b6       	in	r0, 0x3f	; 63
     208:	f8 94       	cli
     20a:	de bf       	out	0x3e, r29	; 62
     20c:	0f be       	out	0x3f, r0	; 63
     20e:	cd bf       	out	0x3d, r28	; 61
	unsigned char prevSelector=0;
	unsigned int i=0;
	unsigned int currRand=0, currRand2=0;
	float targetAngle=0;

	initPeripherals();
     210:	0e 94 5e 21 	call	0x42bc	; 0x42bc <initPeripherals>

	calibrateSensors();
     214:	0e 94 9a 41 	call	0x8334	; 0x8334 <calibrateSensors>

	initBehaviors();
     218:	0e 94 14 3c 	call	0x7828	; 0x7828 <initBehaviors>

	startTime = getTime100MicroSec();
     21c:	0e 94 35 22 	call	0x446a	; 0x446a <getTime100MicroSec>
     220:	6b 01       	movw	r12, r22
     222:	7c 01       	movw	r14, r24

	speedStepCounter = getTime100MicroSec();
     224:	0e 94 35 22 	call	0x446a	; 0x446a <getTime100MicroSec>
     228:	9b 01       	movw	r18, r22
     22a:	ac 01       	movw	r20, r24
     22c:	60 93 70 04 	sts	0x0470, r22
     230:	30 93 71 04 	sts	0x0471, r19
     234:	40 93 72 04 	sts	0x0472, r20
     238:	50 93 73 04 	sts	0x0473, r21
     23c:	10 92 74 04 	sts	0x0474, r1
     240:	10 92 75 04 	sts	0x0475, r1
     244:	10 92 76 04 	sts	0x0476, r1
     248:	10 92 77 04 	sts	0x0477, r1

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
	unsigned char prevSelector=0;
	unsigned int i=0;
	unsigned int currRand=0, currRand2=0;
	float targetAngle=0;
     24c:	20 e0       	ldi	r18, 0x00	; 0
     24e:	30 e0       	ldi	r19, 0x00	; 0
     250:	a9 01       	movw	r20, r18
     252:	2f 83       	std	Y+7, r18	; 0x07
     254:	38 87       	std	Y+8, r19	; 0x08
     256:	49 87       	std	Y+9, r20	; 0x09
     258:	5a 87       	std	Y+10, r21	; 0x0a
int main(void) {

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
	unsigned char prevSelector=0;
	unsigned int i=0;
	unsigned int currRand=0, currRand2=0;
     25a:	aa 24       	eor	r10, r10
     25c:	bb 24       	eor	r11, r11

int main(void) {

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
	unsigned char prevSelector=0;
	unsigned int i=0;
     25e:	1e 82       	std	Y+6, r1	; 0x06
     260:	1d 82       	std	Y+5, r1	; 0x05
#include "irCommunication.h"

int main(void) {

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
	unsigned char prevSelector=0;
     262:	00 e0       	ldi	r16, 0x00	; 0
#include "sensors.h"
#include "irCommunication.h"

int main(void) {

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
     264:	19 82       	std	Y+1, r1	; 0x01
     266:	1a 82       	std	Y+2, r1	; 0x02
     268:	1b 82       	std	Y+3, r1	; 0x03
     26a:	1c 82       	std	Y+4, r1	; 0x04
		computeAngle();

		// turn off the rgb leds after one half second in the "charger demo"
		if(currentSelector==7) {
			if((getTime100MicroSec()-turnOffLedsTime) > PAUSE_500_MSEC) {
				pwm_red = 255;
     26c:	1f ef       	ldi	r17, 0xFF	; 255
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption

				switch(rgbState) {
					case 0:
						pwm_red = 255 - currRand;	
						rgbState = 1;
     26e:	22 24       	eor	r2, r2
     270:	23 94       	inc	r2
	eeprom_update_block(calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
*/

	while(1) {

		currentSelector = getSelector();	// update selector position
     272:	0e 94 39 21 	call	0x4272	; 0x4272 <getSelector>
     276:	80 93 5c 04 	sts	0x045C, r24

		readAccelXYZ();						// update accelerometer values to compute the angle
     27a:	0e 94 da 40 	call	0x81b4	; 0x81b4 <readAccelXYZ>

		computeAngle();
     27e:	0e 94 16 46 	call	0x8c2c	; 0x8c2c <computeAngle>

		// turn off the rgb leds after one half second in the "charger demo"
		if(currentSelector==7) {
     282:	80 91 5c 04 	lds	r24, 0x045C
     286:	87 30       	cpi	r24, 0x07	; 7
     288:	09 f4       	brne	.+2      	; 0x28c <main+0xb0>
     28a:	5c c2       	rjmp	.+1208   	; 0x744 <main+0x568>
				pwm_green = 255;
				pwm_blue = 255;			
			}
		}

		endTime = getTime100MicroSec();
     28c:	0e 94 35 22 	call	0x446a	; 0x446a <getTime100MicroSec>
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
     290:	6c 19       	sub	r22, r12
     292:	7d 09       	sbc	r23, r13
     294:	8e 09       	sbc	r24, r14
     296:	9f 09       	sbc	r25, r15
     298:	6e 31       	cpi	r22, 0x1E	; 30
     29a:	4b e4       	ldi	r20, 0x4B	; 75
     29c:	74 07       	cpc	r23, r20
     29e:	40 e0       	ldi	r20, 0x00	; 0
     2a0:	84 07       	cpc	r24, r20
     2a2:	40 e0       	ldi	r20, 0x00	; 0
     2a4:	94 07       	cpc	r25, r20
     2a6:	08 f0       	brcs	.+2      	; 0x2aa <main+0xce>
     2a8:	39 c2       	rjmp	.+1138   	; 0x71c <main+0x540>
			startTime = getTime100MicroSec();
		}

		
		//if(calibrateOdomFlag==0) {
			handleIRRemoteCommands();
     2aa:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <handleIRRemoteCommands>
		//}


		//if(calibrateOdomFlag==0) {
			handleRFCommands();
     2ae:	0e 94 bf 11 	call	0x237e	; 0x237e <handleRFCommands>
		//}


		if(calibrateOdomFlag==0) {
     2b2:	80 91 70 05 	lds	r24, 0x0570
     2b6:	88 23       	and	r24, r24
     2b8:	09 f4       	brne	.+2      	; 0x2bc <main+0xe0>
     2ba:	fe c0       	rjmp	.+508    	; 0x4b8 <main+0x2dc>

		//if(currentSelector!=6 && currentSelector!=15) {
		//	usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		//}

		switch(currentSelector) {
     2bc:	80 91 5c 04 	lds	r24, 0x045C
     2c0:	87 30       	cpi	r24, 0x07	; 7
     2c2:	09 f4       	brne	.+2      	; 0x2c6 <main+0xea>
     2c4:	ea c1       	rjmp	.+980    	; 0x69a <main+0x4be>
     2c6:	88 30       	cpi	r24, 0x08	; 8
     2c8:	08 f0       	brcs	.+2      	; 0x2cc <main+0xf0>
     2ca:	61 c0       	rjmp	.+194    	; 0x38e <main+0x1b2>
     2cc:	83 30       	cpi	r24, 0x03	; 3
     2ce:	09 f4       	brne	.+2      	; 0x2d2 <main+0xf6>
     2d0:	98 c2       	rjmp	.+1328   	; 0x802 <main+0x626>
     2d2:	84 30       	cpi	r24, 0x04	; 4
     2d4:	08 f0       	brcs	.+2      	; 0x2d8 <main+0xfc>
     2d6:	50 c2       	rjmp	.+1184   	; 0x778 <main+0x59c>
     2d8:	81 30       	cpi	r24, 0x01	; 1
     2da:	09 f4       	brne	.+2      	; 0x2de <main+0x102>
     2dc:	4d c3       	rjmp	.+1690   	; 0x978 <main+0x79c>
     2de:	82 30       	cpi	r24, 0x02	; 2
     2e0:	08 f0       	brcs	.+2      	; 0x2e4 <main+0x108>
     2e2:	91 c2       	rjmp	.+1314   	; 0x806 <main+0x62a>
    
			case 0:	// motors in direct power control (no speed control)
					handleMotorsWithNoController();
     2e4:	0e 94 14 29 	call	0x5228	; 0x5228 <handleMotorsWithNoController>
     2e8:	80 91 5c 04 	lds	r24, 0x045C
					//usart0Transmit(currentOsccal,1);
					break;

		}

		if(currentSelector!=0) {
     2ec:	88 23       	and	r24, r24
     2ee:	09 f0       	breq	.+2      	; 0x2f2 <main+0x116>
     2f0:	de c0       	rjmp	.+444    	; 0x4ae <main+0x2d2>
     2f2:	80 e0       	ldi	r24, 0x00	; 0
			handleMotorsWithSpeedController();  
		}

		if(prevSelector != currentSelector) {	// in case the selector is changed, reset the robot state
     2f4:	08 17       	cp	r16, r24
     2f6:	09 f4       	brne	.+2      	; 0x2fa <main+0x11e>
     2f8:	bc cf       	rjmp	.-136    	; 0x272 <main+0x96>
			disableObstacleAvoidance();
     2fa:	0e 94 5b 3e 	call	0x7cb6	; 0x7cb6 <disableObstacleAvoidance>
			disableCliffAvoidance();
     2fe:	0e 94 62 3e 	call	0x7cc4	; 0x7cc4 <disableCliffAvoidance>
			GREEN_LED0_OFF;
     302:	80 91 0b 01 	lds	r24, 0x010B
     306:	81 60       	ori	r24, 0x01	; 1
     308:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED1_OFF;
     30c:	80 91 0b 01 	lds	r24, 0x010B
     310:	82 60       	ori	r24, 0x02	; 2
     312:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED2_OFF;
     316:	80 91 0b 01 	lds	r24, 0x010B
     31a:	84 60       	ori	r24, 0x04	; 4
     31c:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED3_OFF;
     320:	a3 9a       	sbi	0x14, 3	; 20
			GREEN_LED4_OFF;
     322:	80 91 0b 01 	lds	r24, 0x010B
     326:	80 61       	ori	r24, 0x10	; 16
     328:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED5_OFF;
     32c:	80 91 0b 01 	lds	r24, 0x010B
     330:	80 62       	ori	r24, 0x20	; 32
     332:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED6_OFF;
     336:	80 91 0b 01 	lds	r24, 0x010B
     33a:	80 64       	ori	r24, 0x40	; 64
     33c:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED7_OFF;
     340:	80 91 0b 01 	lds	r24, 0x010B
     344:	80 68       	ori	r24, 0x80	; 128
     346:	80 93 0b 01 	sts	0x010B, r24
			pwm_red = 255;
     34a:	10 93 0c 02 	sts	0x020C, r17
			pwm_green = 255;
     34e:	10 93 0d 02 	sts	0x020D, r17
			pwm_blue = 255;
     352:	10 93 0e 02 	sts	0x020E, r17
			updateRedLed(pwm_red);
     356:	8f ef       	ldi	r24, 0xFF	; 255
     358:	0e 94 a2 3e 	call	0x7d44	; 0x7d44 <updateRedLed>
			updateGreenLed(pwm_green);
     35c:	80 91 0d 02 	lds	r24, 0x020D
     360:	0e 94 b6 3e 	call	0x7d6c	; 0x7d6c <updateGreenLed>
			updateBlueLed(pwm_blue);
     364:	80 91 0e 02 	lds	r24, 0x020E
     368:	0e 94 ca 3e 	call	0x7d94	; 0x7d94 <updateBlueLed>
			setRightSpeed(0);
     36c:	80 e0       	ldi	r24, 0x00	; 0
     36e:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <setRightSpeed>
			setLeftSpeed(0);
     372:	80 e0       	ldi	r24, 0x00	; 0
     374:	0e 94 44 2a 	call	0x5488	; 0x5488 <setLeftSpeed>
			rgbState = 0;
     378:	10 92 2c 03 	sts	0x032C, r1
			calibrationWritten = 0;
     37c:	10 92 79 04 	sts	0x0479, r1
			demoState = 0;
     380:	10 92 60 04 	sts	0x0460, r1

			irCommState = 0;
     384:	10 92 d7 04 	sts	0x04D7, r1
     388:	00 91 5c 04 	lds	r16, 0x045C
     38c:	72 cf       	rjmp	.-284    	; 0x272 <main+0x96>

		//if(currentSelector!=6 && currentSelector!=15) {
		//	usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		//}

		switch(currentSelector) {
     38e:	8b 30       	cpi	r24, 0x0B	; 11
     390:	09 f4       	brne	.+2      	; 0x394 <main+0x1b8>
     392:	cc c2       	rjmp	.+1432   	; 0x92c <main+0x750>
     394:	8c 30       	cpi	r24, 0x0C	; 12
     396:	08 f0       	brcs	.+2      	; 0x39a <main+0x1be>
     398:	1b c2       	rjmp	.+1078   	; 0x7d0 <main+0x5f4>
     39a:	89 30       	cpi	r24, 0x09	; 9
     39c:	09 f4       	brne	.+2      	; 0x3a0 <main+0x1c4>
     39e:	44 c2       	rjmp	.+1160   	; 0x828 <main+0x64c>
     3a0:	8a 30       	cpi	r24, 0x0A	; 10
     3a2:	08 f4       	brcc	.+2      	; 0x3a6 <main+0x1ca>
     3a4:	35 c2       	rjmp	.+1130   	; 0x810 <main+0x634>
							break;
					}
					break;

			case 10:// obstacle avoidance with random colors; 4 seconds motion and 10 seconds pause					
					switch(demoState) {
     3a6:	80 91 60 04 	lds	r24, 0x0460
     3aa:	81 30       	cpi	r24, 0x01	; 1
     3ac:	11 f4       	brne	.+4      	; 0x3b2 <main+0x1d6>
     3ae:	0c 94 f0 09 	jmp	0x13e0	; 0x13e0 <main+0x1204>
     3b2:	81 30       	cpi	r24, 0x01	; 1
     3b4:	08 f0       	brcs	.+2      	; 0x3b8 <main+0x1dc>
     3b6:	18 c4       	rjmp	.+2096   	; 0xbe8 <main+0xa0c>
						case 0: // get first clock tick and start moving the robot with obstacle avoidance enabled
							demoStartTime = getTime100MicroSec();
     3b8:	0e 94 35 22 	call	0x446a	; 0x446a <getTime100MicroSec>
     3bc:	60 93 64 04 	sts	0x0464, r22
     3c0:	70 93 65 04 	sts	0x0465, r23
     3c4:	80 93 66 04 	sts	0x0466, r24
     3c8:	90 93 67 04 	sts	0x0467, r25
							demoEndTime = getTime100MicroSec();							
     3cc:	0e 94 35 22 	call	0x446a	; 0x446a <getTime100MicroSec>
     3d0:	60 93 6c 04 	sts	0x046C, r22
     3d4:	70 93 6d 04 	sts	0x046D, r23
     3d8:	80 93 6e 04 	sts	0x046E, r24
     3dc:	90 93 6f 04 	sts	0x046F, r25
							demoStartTime2 = getTime100MicroSec();
     3e0:	0e 94 35 22 	call	0x446a	; 0x446a <getTime100MicroSec>
     3e4:	60 93 68 04 	sts	0x0468, r22
     3e8:	70 93 69 04 	sts	0x0469, r23
     3ec:	80 93 6a 04 	sts	0x046A, r24
     3f0:	90 93 6b 04 	sts	0x046B, r25
							enableObstacleAvoidance();
     3f4:	0e 94 57 3e 	call	0x7cae	; 0x7cae <enableObstacleAvoidance>
							setLeftSpeed(20);
     3f8:	84 e1       	ldi	r24, 0x14	; 20
     3fa:	0e 94 44 2a 	call	0x5488	; 0x5488 <setLeftSpeed>
							setRightSpeed(20);
     3fe:	84 e1       	ldi	r24, 0x14	; 20
     400:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <setRightSpeed>
							demoState = 1;
     404:	20 92 60 04 	sts	0x0460, r2
								demoState = 1;							
							}
							break;
					}	
					
					switch(rgbLedState) {
     408:	80 91 7b 04 	lds	r24, 0x047B
     40c:	81 30       	cpi	r24, 0x01	; 1
     40e:	09 f4       	brne	.+2      	; 0x412 <main+0x236>
     410:	1e c4       	rjmp	.+2108   	; 0xc4e <main+0xa72>
     412:	81 30       	cpi	r24, 0x01	; 1
     414:	08 f0       	brcs	.+2      	; 0x418 <main+0x23c>
     416:	ae c3       	rjmp	.+1884   	; 0xb74 <main+0x998>
						case 0:							
							pwm_red = 255;
     418:	10 93 0c 02 	sts	0x020C, r17
							pwm_green = 255;
     41c:	10 93 0d 02 	sts	0x020D, r17
							pwm_blue = 255;
     420:	10 93 0e 02 	sts	0x020E, r17
							if((getTime100MicroSec()-demoEndTime) >= (PAUSE_100_MSEC)) {
     424:	0e 94 35 22 	call	0x446a	; 0x446a <getTime100MicroSec>
     428:	9b 01       	movw	r18, r22
     42a:	ac 01       	movw	r20, r24
     42c:	80 91 6c 04 	lds	r24, 0x046C
     430:	90 91 6d 04 	lds	r25, 0x046D
     434:	a0 91 6e 04 	lds	r26, 0x046E
     438:	b0 91 6f 04 	lds	r27, 0x046F
     43c:	28 1b       	sub	r18, r24
     43e:	39 0b       	sbc	r19, r25
     440:	4a 0b       	sbc	r20, r26
     442:	5b 0b       	sbc	r21, r27
     444:	21 3c       	cpi	r18, 0xC1	; 193
     446:	f3 e0       	ldi	r31, 0x03	; 3
     448:	3f 07       	cpc	r19, r31
     44a:	f0 e0       	ldi	r31, 0x00	; 0
     44c:	4f 07       	cpc	r20, r31
     44e:	f0 e0       	ldi	r31, 0x00	; 0
     450:	5f 07       	cpc	r21, r31
     452:	10 f0       	brcs	.+4      	; 0x458 <main+0x27c>
     454:	0c 94 bd 0c 	jmp	0x197a	; 0x197a <main+0x179e>
									greenLedState = 0;
								}
								setGreenLed(greenLedState, 1);
								demoEndTime = getTime100MicroSec();											
							}
							if((getTime100MicroSec()-demoStartTime2) >= (PAUSE_2_SEC)) {
     458:	0e 94 35 22 	call	0x446a	; 0x446a <getTime100MicroSec>
     45c:	9b 01       	movw	r18, r22
     45e:	ac 01       	movw	r20, r24
     460:	80 91 68 04 	lds	r24, 0x0468
     464:	90 91 69 04 	lds	r25, 0x0469
     468:	a0 91 6a 04 	lds	r26, 0x046A
     46c:	b0 91 6b 04 	lds	r27, 0x046B
     470:	28 1b       	sub	r18, r24
     472:	39 0b       	sbc	r19, r25
     474:	4a 0b       	sbc	r20, r26
     476:	5b 0b       	sbc	r21, r27
     478:	2e 31       	cpi	r18, 0x1E	; 30
     47a:	6b e4       	ldi	r22, 0x4B	; 75
     47c:	36 07       	cpc	r19, r22
     47e:	60 e0       	ldi	r22, 0x00	; 0
     480:	46 07       	cpc	r20, r22
     482:	60 e0       	ldi	r22, 0x00	; 0
     484:	56 07       	cpc	r21, r22
     486:	10 f0       	brcs	.+4      	; 0x48c <main+0x2b0>
     488:	0c 94 af 0c 	jmp	0x195e	; 0x195e <main+0x1782>
								rgbLedState = 1;
								demoStartTime2 = getTime100MicroSec();
							}
							updateRedLed(pwm_red);
     48c:	80 91 0c 02 	lds	r24, 0x020C
     490:	0e 94 a2 3e 	call	0x7d44	; 0x7d44 <updateRedLed>
							updateGreenLed(pwm_green);
     494:	80 91 0d 02 	lds	r24, 0x020D
     498:	0e 94 b6 3e 	call	0x7d6c	; 0x7d6c <updateGreenLed>
							updateBlueLed(pwm_blue);
     49c:	80 91 0e 02 	lds	r24, 0x020E
     4a0:	0e 94 ca 3e 	call	0x7d94	; 0x7d94 <updateBlueLed>
     4a4:	80 91 5c 04 	lds	r24, 0x045C
					//usart0Transmit(currentOsccal,1);
					break;

		}

		if(currentSelector!=0) {
     4a8:	88 23       	and	r24, r24
     4aa:	09 f4       	brne	.+2      	; 0x4ae <main+0x2d2>
     4ac:	22 cf       	rjmp	.-444    	; 0x2f2 <main+0x116>
			handleMotorsWithSpeedController();  
     4ae:	0e 94 be 35 	call	0x6b7c	; 0x6b7c <handleMotorsWithSpeedController>
     4b2:	80 91 5c 04 	lds	r24, 0x045C
     4b6:	1e cf       	rjmp	.-452    	; 0x2f4 <main+0x118>
			handleRFCommands();
		//}


		if(calibrateOdomFlag==0) {
			if((getTime100MicroSec()-speedStepCounter) >= SPEED_STEP_DELAY) {
     4b8:	0e 94 35 22 	call	0x446a	; 0x446a <getTime100MicroSec>
     4bc:	9b 01       	movw	r18, r22
     4be:	ac 01       	movw	r20, r24
     4c0:	60 e0       	ldi	r22, 0x00	; 0
     4c2:	70 e0       	ldi	r23, 0x00	; 0
     4c4:	cb 01       	movw	r24, r22
     4c6:	f0 91 70 04 	lds	r31, 0x0470
     4ca:	e0 91 71 04 	lds	r30, 0x0471
     4ce:	80 90 72 04 	lds	r8, 0x0472
     4d2:	40 90 73 04 	lds	r4, 0x0473
     4d6:	30 90 74 04 	lds	r3, 0x0474
     4da:	50 90 75 04 	lds	r5, 0x0475
     4de:	60 90 76 04 	lds	r6, 0x0476
     4e2:	70 90 77 04 	lds	r7, 0x0477
     4e6:	b2 2f       	mov	r27, r18
     4e8:	bf 1b       	sub	r27, r31
     4ea:	a1 e0       	ldi	r26, 0x01	; 1
     4ec:	2b 17       	cp	r18, r27
     4ee:	08 f0       	brcs	.+2      	; 0x4f2 <main+0x316>
     4f0:	a0 e0       	ldi	r26, 0x00	; 0
     4f2:	f3 2f       	mov	r31, r19
     4f4:	fe 1b       	sub	r31, r30
     4f6:	ef 2f       	mov	r30, r31
     4f8:	f1 e0       	ldi	r31, 0x01	; 1
     4fa:	3e 17       	cp	r19, r30
     4fc:	08 f0       	brcs	.+2      	; 0x500 <main+0x324>
     4fe:	f0 e0       	ldi	r31, 0x00	; 0
     500:	9e 2e       	mov	r9, r30
     502:	9a 1a       	sub	r9, r26
     504:	a9 2d       	mov	r26, r9
     506:	99 24       	eor	r9, r9
     508:	93 94       	inc	r9
     50a:	ea 17       	cp	r30, r26
     50c:	08 f0       	brcs	.+2      	; 0x510 <main+0x334>
     50e:	99 24       	eor	r9, r9
     510:	f9 29       	or	r31, r9
     512:	e4 2f       	mov	r30, r20
     514:	e8 19       	sub	r30, r8
     516:	8e 2e       	mov	r8, r30
     518:	e1 e0       	ldi	r30, 0x01	; 1
     51a:	48 15       	cp	r20, r8
     51c:	08 f0       	brcs	.+2      	; 0x520 <main+0x344>
     51e:	e0 e0       	ldi	r30, 0x00	; 0
     520:	98 2c       	mov	r9, r8
     522:	9f 1a       	sub	r9, r31
     524:	f1 e0       	ldi	r31, 0x01	; 1
     526:	89 14       	cp	r8, r9
     528:	08 f0       	brcs	.+2      	; 0x52c <main+0x350>
     52a:	f0 e0       	ldi	r31, 0x00	; 0
     52c:	ef 2b       	or	r30, r31
     52e:	f5 2f       	mov	r31, r21
     530:	f4 19       	sub	r31, r4
     532:	4f 2e       	mov	r4, r31
     534:	f1 e0       	ldi	r31, 0x01	; 1
     536:	54 15       	cp	r21, r4
     538:	08 f0       	brcs	.+2      	; 0x53c <main+0x360>
     53a:	f0 e0       	ldi	r31, 0x00	; 0
     53c:	84 2c       	mov	r8, r4
     53e:	8e 1a       	sub	r8, r30
     540:	e1 e0       	ldi	r30, 0x01	; 1
     542:	48 14       	cp	r4, r8
     544:	08 f0       	brcs	.+2      	; 0x548 <main+0x36c>
     546:	e0 e0       	ldi	r30, 0x00	; 0
     548:	fe 2b       	or	r31, r30
     54a:	31 94       	neg	r3
     54c:	e1 e0       	ldi	r30, 0x01	; 1
     54e:	63 15       	cp	r22, r3
     550:	08 f0       	brcs	.+2      	; 0x554 <main+0x378>
     552:	e0 e0       	ldi	r30, 0x00	; 0
     554:	43 2c       	mov	r4, r3
     556:	4f 1a       	sub	r4, r31
     558:	f1 e0       	ldi	r31, 0x01	; 1
     55a:	34 14       	cp	r3, r4
     55c:	08 f0       	brcs	.+2      	; 0x560 <main+0x384>
     55e:	f0 e0       	ldi	r31, 0x00	; 0
     560:	ef 2b       	or	r30, r31
     562:	51 94       	neg	r5
     564:	f1 e0       	ldi	r31, 0x01	; 1
     566:	75 15       	cp	r23, r5
     568:	08 f0       	brcs	.+2      	; 0x56c <main+0x390>
     56a:	f0 e0       	ldi	r31, 0x00	; 0
     56c:	35 2c       	mov	r3, r5
     56e:	3e 1a       	sub	r3, r30
     570:	e1 e0       	ldi	r30, 0x01	; 1
     572:	53 14       	cp	r5, r3
     574:	08 f0       	brcs	.+2      	; 0x578 <main+0x39c>
     576:	e0 e0       	ldi	r30, 0x00	; 0
     578:	fe 2b       	or	r31, r30
     57a:	61 94       	neg	r6
     57c:	e1 e0       	ldi	r30, 0x01	; 1
     57e:	86 15       	cp	r24, r6
     580:	08 f0       	brcs	.+2      	; 0x584 <main+0x3a8>
     582:	e0 e0       	ldi	r30, 0x00	; 0
     584:	96 2d       	mov	r25, r6
     586:	9f 1b       	sub	r25, r31
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	69 16       	cp	r6, r25
     58c:	08 f0       	brcs	.+2      	; 0x590 <main+0x3b4>
     58e:	80 e0       	ldi	r24, 0x00	; 0
     590:	e8 2b       	or	r30, r24
     592:	71 94       	neg	r7
     594:	7e 16       	cp	r7, r30
     596:	91 f4       	brne	.+36     	; 0x5bc <main+0x3e0>
     598:	99 23       	and	r25, r25
     59a:	81 f4       	brne	.+32     	; 0x5bc <main+0x3e0>
     59c:	33 20       	and	r3, r3
     59e:	71 f4       	brne	.+28     	; 0x5bc <main+0x3e0>
     5a0:	44 20       	and	r4, r4
     5a2:	61 f4       	brne	.+24     	; 0x5bc <main+0x3e0>
     5a4:	88 20       	and	r8, r8
     5a6:	51 f4       	brne	.+20     	; 0x5bc <main+0x3e0>
     5a8:	99 20       	and	r9, r9
     5aa:	41 f4       	brne	.+16     	; 0x5bc <main+0x3e0>
     5ac:	a2 30       	cpi	r26, 0x02	; 2
     5ae:	30 f4       	brcc	.+12     	; 0x5bc <main+0x3e0>
     5b0:	a1 30       	cpi	r26, 0x01	; 1
     5b2:	09 f0       	breq	.+2      	; 0x5b6 <main+0x3da>
     5b4:	83 ce       	rjmp	.-762    	; 0x2bc <main+0xe0>
     5b6:	b0 39       	cpi	r27, 0x90	; 144
     5b8:	08 f4       	brcc	.+2      	; 0x5bc <main+0x3e0>
     5ba:	80 ce       	rjmp	.-768    	; 0x2bc <main+0xe0>
				speedStepCounter = getTime100MicroSec();
     5bc:	0e 94 35 22 	call	0x446a	; 0x446a <getTime100MicroSec>
     5c0:	9b 01       	movw	r18, r22
     5c2:	ac 01       	movw	r20, r24
     5c4:	60 93 70 04 	sts	0x0470, r22
     5c8:	30 93 71 04 	sts	0x0471, r19
     5cc:	40 93 72 04 	sts	0x0472, r20
     5d0:	50 93 73 04 	sts	0x0473, r21
     5d4:	10 92 74 04 	sts	0x0474, r1
     5d8:	10 92 75 04 	sts	0x0475, r1
     5dc:	10 92 76 04 	sts	0x0476, r1
     5e0:	10 92 77 04 	sts	0x0477, r1

				if(softAccEnabled) {
     5e4:	80 91 78 04 	lds	r24, 0x0478
     5e8:	88 23       	and	r24, r24
     5ea:	09 f4       	brne	.+2      	; 0x5ee <main+0x412>
     5ec:	e5 c1       	rjmp	.+970    	; 0x9b8 <main+0x7dc>
					if(pwm_right_desired == 0) {
     5ee:	80 91 09 03 	lds	r24, 0x0309
     5f2:	90 91 0a 03 	lds	r25, 0x030A
     5f6:	00 97       	sbiw	r24, 0x00	; 0
     5f8:	09 f4       	brne	.+2      	; 0x5fc <main+0x420>
     5fa:	89 c2       	rjmp	.+1298   	; 0xb0e <main+0x932>
						pwm_intermediate_right_desired = 0;
					} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
     5fc:	20 91 0d 03 	lds	r18, 0x030D
     600:	30 91 0e 03 	lds	r19, 0x030E
     604:	28 9f       	mul	r18, r24
     606:	a0 01       	movw	r20, r0
     608:	29 9f       	mul	r18, r25
     60a:	50 0d       	add	r21, r0
     60c:	38 9f       	mul	r19, r24
     60e:	50 0d       	add	r21, r0
     610:	11 24       	eor	r1, r1
     612:	57 fd       	sbrc	r21, 7
     614:	7c c2       	rjmp	.+1272   	; 0xb0e <main+0x932>
						pwm_intermediate_right_desired = 0;
					} else if(pwm_right_desired > pwm_intermediate_right_desired) {
     616:	28 17       	cp	r18, r24
     618:	39 07       	cpc	r19, r25
     61a:	14 f0       	brlt	.+4      	; 0x620 <main+0x444>
     61c:	0c 94 9b 0c 	jmp	0x1936	; 0x1936 <main+0x175a>
						pwm_intermediate_right_desired += speedStep;
     620:	40 91 17 02 	lds	r20, 0x0217
     624:	24 0f       	add	r18, r20
     626:	31 1d       	adc	r19, r1
     628:	30 93 0e 03 	sts	0x030E, r19
     62c:	20 93 0d 03 	sts	0x030D, r18
						if(pwm_intermediate_right_desired > pwm_right_desired) {
     630:	82 17       	cp	r24, r18
     632:	93 07       	cpc	r25, r19
     634:	24 f4       	brge	.+8      	; 0x63e <main+0x462>
							pwm_intermediate_right_desired = pwm_right_desired;
						}
					} else if(pwm_right_desired < pwm_intermediate_right_desired) {
						pwm_intermediate_right_desired -= speedStep;
						if(pwm_intermediate_right_desired < pwm_right_desired) {
							pwm_intermediate_right_desired = pwm_right_desired;
     636:	90 93 0e 03 	sts	0x030E, r25
     63a:	80 93 0d 03 	sts	0x030D, r24
						}					
					}
	
					if(pwm_left_desired == 0) {
     63e:	80 91 0b 03 	lds	r24, 0x030B
     642:	90 91 0c 03 	lds	r25, 0x030C
     646:	00 97       	sbiw	r24, 0x00	; 0
     648:	09 f4       	brne	.+2      	; 0x64c <main+0x470>
     64a:	5c c2       	rjmp	.+1208   	; 0xb04 <main+0x928>
						pwm_intermediate_left_desired = 0;
					} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
     64c:	20 91 0f 03 	lds	r18, 0x030F
     650:	30 91 10 03 	lds	r19, 0x0310
     654:	28 9f       	mul	r18, r24
     656:	a0 01       	movw	r20, r0
     658:	29 9f       	mul	r18, r25
     65a:	50 0d       	add	r21, r0
     65c:	38 9f       	mul	r19, r24
     65e:	50 0d       	add	r21, r0
     660:	11 24       	eor	r1, r1
     662:	57 fd       	sbrc	r21, 7
     664:	4f c2       	rjmp	.+1182   	; 0xb04 <main+0x928>
						pwm_intermediate_left_desired = 0;
					} else if(pwm_left_desired > pwm_intermediate_left_desired) {
     666:	28 17       	cp	r18, r24
     668:	39 07       	cpc	r19, r25
     66a:	14 f0       	brlt	.+4      	; 0x670 <main+0x494>
     66c:	0c 94 87 0c 	jmp	0x190e	; 0x190e <main+0x1732>
						pwm_intermediate_left_desired += speedStep;
     670:	40 91 17 02 	lds	r20, 0x0217
     674:	24 0f       	add	r18, r20
     676:	31 1d       	adc	r19, r1
     678:	30 93 10 03 	sts	0x0310, r19
     67c:	20 93 0f 03 	sts	0x030F, r18
						if(pwm_intermediate_left_desired > pwm_left_desired) {
     680:	82 17       	cp	r24, r18
     682:	93 07       	cpc	r25, r19
     684:	0c f0       	brlt	.+2      	; 0x688 <main+0x4ac>
     686:	1a ce       	rjmp	.-972    	; 0x2bc <main+0xe0>
							pwm_intermediate_left_desired = pwm_left_desired;
						}					
					}
				} else {
					pwm_intermediate_right_desired = pwm_right_desired;
					pwm_intermediate_left_desired = pwm_left_desired;
     688:	90 93 10 03 	sts	0x0310, r25
     68c:	80 93 0f 03 	sts	0x030F, r24

		//if(currentSelector!=6 && currentSelector!=15) {
		//	usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		//}

		switch(currentSelector) {
     690:	80 91 5c 04 	lds	r24, 0x045C
     694:	87 30       	cpi	r24, 0x07	; 7
     696:	09 f0       	breq	.+2      	; 0x69a <main+0x4be>
     698:	16 ce       	rjmp	.-980    	; 0x2c6 <main+0xea>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
     69a:	80 91 60 04 	lds	r24, 0x0460
     69e:	82 30       	cpi	r24, 0x02	; 2
     6a0:	11 f4       	brne	.+4      	; 0x6a6 <main+0x4ca>
     6a2:	0c 94 8d 0b 	jmp	0x171a	; 0x171a <main+0x153e>
     6a6:	83 30       	cpi	r24, 0x03	; 3
     6a8:	08 f0       	brcs	.+2      	; 0x6ac <main+0x4d0>
     6aa:	44 c3       	rjmp	.+1672   	; 0xd34 <main+0xb58>
     6ac:	88 23       	and	r24, r24
     6ae:	09 f0       	breq	.+2      	; 0x6b2 <main+0x4d6>
     6b0:	3c c7       	rjmp	.+3704   	; 0x152a <main+0x134e>
						case 0:	// move around
							turnOffGreenLeds();
     6b2:	0e 94 7b 3f 	call	0x7ef6	; 0x7ef6 <turnOffGreenLeds>
							GREEN_LED0_ON;
     6b6:	80 91 0b 01 	lds	r24, 0x010B
     6ba:	8e 7f       	andi	r24, 0xFE	; 254
     6bc:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED1_ON;
							lineFound = 0;
     6c0:	10 92 61 04 	sts	0x0461, r1
							enableObstacleAvoidance();
     6c4:	0e 94 57 3e 	call	0x7cae	; 0x7cae <enableObstacleAvoidance>
							setRightSpeed(20);
     6c8:	84 e1       	ldi	r24, 0x14	; 20
     6ca:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <setRightSpeed>
							setLeftSpeed(20);
     6ce:	84 e1       	ldi	r24, 0x14	; 20
     6d0:	0e 94 44 2a 	call	0x5488	; 0x5488 <setLeftSpeed>
							demoEndTime = getTime100MicroSec();
     6d4:	0e 94 35 22 	call	0x446a	; 0x446a <getTime100MicroSec>
     6d8:	9b 01       	movw	r18, r22
     6da:	ac 01       	movw	r20, r24
     6dc:	60 93 6c 04 	sts	0x046C, r22
     6e0:	70 93 6d 04 	sts	0x046D, r23
     6e4:	80 93 6e 04 	sts	0x046E, r24
     6e8:	90 93 6f 04 	sts	0x046F, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {
     6ec:	80 91 64 04 	lds	r24, 0x0464
     6f0:	90 91 65 04 	lds	r25, 0x0465
     6f4:	a0 91 66 04 	lds	r26, 0x0466
     6f8:	b0 91 67 04 	lds	r27, 0x0467
     6fc:	28 1b       	sub	r18, r24
     6fe:	39 0b       	sbc	r19, r25
     700:	4a 0b       	sbc	r20, r26
     702:	5b 0b       	sbc	r21, r27
     704:	23 33       	cpi	r18, 0x33	; 51
     706:	6f ee       	ldi	r22, 0xEF	; 239
     708:	36 07       	cpc	r19, r22
     70a:	62 e0       	ldi	r22, 0x02	; 2
     70c:	46 07       	cpc	r20, r22
     70e:	60 e0       	ldi	r22, 0x00	; 0
     710:	56 07       	cpc	r21, r22
     712:	08 f4       	brcc	.+2      	; 0x716 <main+0x53a>
     714:	bb ce       	rjmp	.-650    	; 0x48c <main+0x2b0>

								if(proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {
									outOfLine++;
									if(outOfLine > 250) {
										chargeContact = 0;
										demoState = 1;
     716:	20 92 60 04 	sts	0x0460, r2
										break;
     71a:	b8 ce       	rjmp	.-656    	; 0x48c <main+0x2b0>
			}
		}

		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
     71c:	0e 94 3e 22 	call	0x447c	; 0x447c <readBatteryLevel>
             		
			if(currentSelector==4 || currentSelector==5) {
     720:	80 91 5c 04 	lds	r24, 0x045C
     724:	98 2f       	mov	r25, r24
     726:	94 50       	subi	r25, 0x04	; 4
     728:	92 30       	cpi	r25, 0x02	; 2
     72a:	08 f4       	brcc	.+2      	; 0x72e <main+0x552>
     72c:	52 c1       	rjmp	.+676    	; 0x9d2 <main+0x7f6>
					}
				} else {	// do nothing => all 3 leds turned on

				}

			} else if(currentSelector==7) {
     72e:	87 30       	cpi	r24, 0x07	; 7
     730:	09 f4       	brne	.+2      	; 0x734 <main+0x558>
     732:	7a c1       	rjmp	.+756    	; 0xa28 <main+0x84c>

				}

				turnOffLedsTime = getTime100MicroSec();

			} else if(currentSelector==6) {
     734:	86 30       	cpi	r24, 0x06	; 6
     736:	09 f4       	brne	.+2      	; 0x73a <main+0x55e>
     738:	24 c1       	rjmp	.+584    	; 0x982 <main+0x7a6>
						rgbState = 0;
					}
				}
			}

			startTime = getTime100MicroSec();
     73a:	0e 94 35 22 	call	0x446a	; 0x446a <getTime100MicroSec>
     73e:	6b 01       	movw	r12, r22
     740:	7c 01       	movw	r14, r24
     742:	b3 cd       	rjmp	.-1178   	; 0x2aa <main+0xce>

		computeAngle();

		// turn off the rgb leds after one half second in the "charger demo"
		if(currentSelector==7) {
			if((getTime100MicroSec()-turnOffLedsTime) > PAUSE_500_MSEC) {
     744:	0e 94 35 22 	call	0x446a	; 0x446a <getTime100MicroSec>
     748:	29 81       	ldd	r18, Y+1	; 0x01
     74a:	3a 81       	ldd	r19, Y+2	; 0x02
     74c:	4b 81       	ldd	r20, Y+3	; 0x03
     74e:	5c 81       	ldd	r21, Y+4	; 0x04
     750:	62 1b       	sub	r22, r18
     752:	73 0b       	sbc	r23, r19
     754:	84 0b       	sbc	r24, r20
     756:	95 0b       	sbc	r25, r21
     758:	68 3c       	cpi	r22, 0xC8	; 200
     75a:	32 e1       	ldi	r19, 0x12	; 18
     75c:	73 07       	cpc	r23, r19
     75e:	30 e0       	ldi	r19, 0x00	; 0
     760:	83 07       	cpc	r24, r19
     762:	30 e0       	ldi	r19, 0x00	; 0
     764:	93 07       	cpc	r25, r19
     766:	08 f4       	brcc	.+2      	; 0x76a <main+0x58e>
     768:	91 cd       	rjmp	.-1246   	; 0x28c <main+0xb0>
				pwm_red = 255;
     76a:	10 93 0c 02 	sts	0x020C, r17
				pwm_green = 255;
     76e:	10 93 0d 02 	sts	0x020D, r17
				pwm_blue = 255;			
     772:	10 93 0e 02 	sts	0x020E, r17
     776:	8a cd       	rjmp	.-1260   	; 0x28c <main+0xb0>

		//if(currentSelector!=6 && currentSelector!=15) {
		//	usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		//}

		switch(currentSelector) {
     778:	85 30       	cpi	r24, 0x05	; 5
     77a:	09 f4       	brne	.+2      	; 0x77e <main+0x5a2>
     77c:	91 c0       	rjmp	.+290    	; 0x8a0 <main+0x6c4>
     77e:	86 30       	cpi	r24, 0x06	; 6
     780:	08 f4       	brcc	.+2      	; 0x784 <main+0x5a8>
     782:	69 c0       	rjmp	.+210    	; 0x856 <main+0x67a>
					setLeftSpeed(25);
					setRightSpeed(25);
					break;

			case 6:	// robot testing
					switch(menuChoice) {
     784:	80 91 33 04 	lds	r24, 0x0433
     788:	81 30       	cpi	r24, 0x01	; 1
     78a:	09 f4       	brne	.+2      	; 0x78e <main+0x5b2>
     78c:	9b c3       	rjmp	.+1846   	; 0xec4 <main+0xce8>
     78e:	81 30       	cpi	r24, 0x01	; 1
     790:	08 f0       	brcs	.+2      	; 0x794 <main+0x5b8>
     792:	a2 c2       	rjmp	.+1348   	; 0xcd8 <main+0xafc>
						case 0:
							setRightSpeed(0);
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <setRightSpeed>
							setLeftSpeed(0);
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	0e 94 44 2a 	call	0x5488	; 0x5488 <setLeftSpeed>
							turnOffGreenLeds();
     7a0:	0e 94 7b 3f 	call	0x7ef6	; 0x7ef6 <turnOffGreenLeds>
							pwm_red=255;
     7a4:	10 93 0c 02 	sts	0x020C, r17
							pwm_green=255;
     7a8:	10 93 0d 02 	sts	0x020D, r17
							pwm_blue=255;
     7ac:	10 93 0e 02 	sts	0x020E, r17
							updateRedLed(pwm_red);
     7b0:	8f ef       	ldi	r24, 0xFF	; 255
     7b2:	0e 94 a2 3e 	call	0x7d44	; 0x7d44 <updateRedLed>
							updateGreenLed(pwm_green);
     7b6:	80 91 0d 02 	lds	r24, 0x020D
     7ba:	0e 94 b6 3e 	call	0x7d6c	; 0x7d6c <updateGreenLed>
							updateBlueLed(pwm_blue);
     7be:	80 91 0e 02 	lds	r24, 0x020E
     7c2:	0e 94 ca 3e 	call	0x7d94	; 0x7d94 <updateBlueLed>
							LED_IR1_HIGH;
     7c6:	44 9a       	sbi	0x08, 4	; 8
							LED_IR2_HIGH;
     7c8:	45 9a       	sbi	0x08, 5	; 8
     7ca:	80 91 5c 04 	lds	r24, 0x045C
							break;
     7ce:	8e cd       	rjmp	.-1252   	; 0x2ec <main+0x110>

		//if(currentSelector!=6 && currentSelector!=15) {
		//	usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		//}

		switch(currentSelector) {
     7d0:	8d 30       	cpi	r24, 0x0D	; 13
     7d2:	09 f4       	brne	.+2      	; 0x7d6 <main+0x5fa>
     7d4:	92 c0       	rjmp	.+292    	; 0x8fa <main+0x71e>
     7d6:	8d 30       	cpi	r24, 0x0D	; 13
     7d8:	08 f4       	brcc	.+2      	; 0x7dc <main+0x600>
     7da:	79 c0       	rjmp	.+242    	; 0x8ce <main+0x6f2>
     7dc:	8e 30       	cpi	r24, 0x0E	; 14
     7de:	09 f0       	breq	.+2      	; 0x7e2 <main+0x606>
     7e0:	85 cd       	rjmp	.-1270   	; 0x2ec <main+0x110>
						break;
				}
				break;
			
			case 14: // Multirobots communication: continuously change current color and make it change also for other robots
				switch(demoState) {
     7e2:	80 91 60 04 	lds	r24, 0x0460
     7e6:	88 23       	and	r24, r24
     7e8:	09 f0       	breq	.+2      	; 0x7ec <main+0x610>
     7ea:	79 c1       	rjmp	.+754    	; 0xade <main+0x902>
					case 0:
						irCommInit();
     7ec:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <irCommInit>
						demoState = 1;
     7f0:	20 92 60 04 	sts	0x0460, r2
						irCommRxByteExpected = 1;
     7f4:	20 92 19 05 	sts	0x0519, r2
						irCommMsgCount = 0;
     7f8:	10 92 ee 04 	sts	0x04EE, r1
     7fc:	80 91 5c 04 	lds	r24, 0x045C
						break;
     800:	75 cd       	rjmp	.-1302   	; 0x2ec <main+0x110>
             		enableCliffAvoidance();
					break;
    
			case 3:	// both obstacle and cliff avoidance enabled (the robot does not move untill commands are
					// received from the radio or tv remote)
            		enableObstacleAvoidance();
     802:	0e 94 57 3e 	call	0x7cae	; 0x7cae <enableObstacleAvoidance>
					enableCliffAvoidance();
     806:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <enableCliffAvoidance>
     80a:	80 91 5c 04 	lds	r24, 0x045C
					break;
     80e:	6e cd       	rjmp	.-1316   	; 0x2ec <main+0x110>
					updateBlueLed(pwm_blue);

					break;
  
			case 8:	// motors calibration
					irEnabled = 1;
     810:	20 92 12 02 	sts	0x0212, r2
					if(calibrateOdomFlag==1) {
     814:	80 91 70 05 	lds	r24, 0x0570
     818:	81 30       	cpi	r24, 0x01	; 1
     81a:	09 f0       	breq	.+2      	; 0x81e <main+0x642>
     81c:	48 ce       	rjmp	.-880    	; 0x4ae <main+0x2d2>
						handleCalibration();
     81e:	0e 94 65 2b 	call	0x56ca	; 0x56ca <handleCalibration>
     822:	80 91 5c 04 	lds	r24, 0x045C
     826:	62 cd       	rjmp	.-1340   	; 0x2ec <main+0x110>
					break;

			case 9:	// write default calibration values; wait 2 seconds before start writing the calibration values
					// in eeprom in order to avoid rewriting the data involuntarily when moving the selector and passing 
					// through selector position 9
					switch(demoState) {
     828:	80 91 60 04 	lds	r24, 0x0460
     82c:	81 30       	cpi	r24, 0x01	; 1
     82e:	09 f4       	brne	.+2      	; 0x832 <main+0x656>
     830:	b7 c5       	rjmp	.+2926   	; 0x13a0 <main+0x11c4>
     832:	81 30       	cpi	r24, 0x01	; 1
     834:	08 f0       	brcs	.+2      	; 0x838 <main+0x65c>
     836:	6f c2       	rjmp	.+1246   	; 0xd16 <main+0xb3a>
						case 0:
							demoStartTime = getTime100MicroSec();
     838:	0e 94 35 22 	call	0x446a	; 0x446a <getTime100MicroSec>
     83c:	60 93 64 04 	sts	0x0464, r22
     840:	70 93 65 04 	sts	0x0465, r23
     844:	80 93 66 04 	sts	0x0466, r24
     848:	90 93 67 04 	sts	0x0467, r25
							demoState = 1;
     84c:	20 92 60 04 	sts	0x0460, r2
     850:	80 91 5c 04 	lds	r24, 0x045C
							break;
     854:	4b cd       	rjmp	.-1386   	; 0x2ec <main+0x110>
            		enableObstacleAvoidance();
					enableCliffAvoidance();
					break;
            
			case 4:	// random colors on RGB leds; small green leds turned on
					GREEN_LED0_ON;
     856:	80 91 0b 01 	lds	r24, 0x010B
     85a:	8e 7f       	andi	r24, 0xFE	; 254
     85c:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED1_ON;
     860:	80 91 0b 01 	lds	r24, 0x010B
     864:	8d 7f       	andi	r24, 0xFD	; 253
     866:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED2_ON;
     86a:	80 91 0b 01 	lds	r24, 0x010B
     86e:	8b 7f       	andi	r24, 0xFB	; 251
     870:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED3_ON;
     874:	a3 98       	cbi	0x14, 3	; 20
					GREEN_LED4_ON;
     876:	80 91 0b 01 	lds	r24, 0x010B
     87a:	8f 7e       	andi	r24, 0xEF	; 239
     87c:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED5_ON;
     880:	80 91 0b 01 	lds	r24, 0x010B
     884:	8f 7d       	andi	r24, 0xDF	; 223
     886:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED6_ON;
     88a:	80 91 0b 01 	lds	r24, 0x010B
     88e:	8f 7b       	andi	r24, 0xBF	; 191
     890:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED7_ON;
     894:	80 91 0b 01 	lds	r24, 0x010B
     898:	8f 77       	andi	r24, 0x7F	; 127
     89a:	80 93 0b 01 	sts	0x010B, r24
     89e:	f6 cd       	rjmp	.-1044   	; 0x48c <main+0x2b0>
					updateBlueLed(pwm_blue);
					break;
             
			case 5:	// random colors on RGB leds; obstacle avoidance enabled; robot start moving automatically
					// (motors speed setting)
					updateRedLed(pwm_red);
     8a0:	80 91 0c 02 	lds	r24, 0x020C
     8a4:	0e 94 a2 3e 	call	0x7d44	; 0x7d44 <updateRedLed>
					updateGreenLed(pwm_green);
     8a8:	80 91 0d 02 	lds	r24, 0x020D
     8ac:	0e 94 b6 3e 	call	0x7d6c	; 0x7d6c <updateGreenLed>
					updateBlueLed(pwm_blue);
     8b0:	80 91 0e 02 	lds	r24, 0x020E
     8b4:	0e 94 ca 3e 	call	0x7d94	; 0x7d94 <updateBlueLed>
					enableObstacleAvoidance();
     8b8:	0e 94 57 3e 	call	0x7cae	; 0x7cae <enableObstacleAvoidance>
					setLeftSpeed(25);
     8bc:	89 e1       	ldi	r24, 0x19	; 25
     8be:	0e 94 44 2a 	call	0x5488	; 0x5488 <setLeftSpeed>
					setRightSpeed(25);
     8c2:	89 e1       	ldi	r24, 0x19	; 25
     8c4:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <setRightSpeed>
     8c8:	80 91 5c 04 	lds	r24, 0x045C
					break;
     8cc:	0f cd       	rjmp	.-1506   	; 0x2ec <main+0x110>
						break;
				}
				break;

			case 12:	// IR local communication: 2 or more robots pass information between them in sequence
				switch(demoState) {
     8ce:	80 91 60 04 	lds	r24, 0x0460
     8d2:	81 30       	cpi	r24, 0x01	; 1
     8d4:	09 f4       	brne	.+2      	; 0x8d8 <main+0x6fc>
     8d6:	f3 c5       	rjmp	.+3046   	; 0x14be <main+0x12e2>
     8d8:	81 30       	cpi	r24, 0x01	; 1
     8da:	08 f0       	brcs	.+2      	; 0x8de <main+0x702>
     8dc:	93 c2       	rjmp	.+1318   	; 0xe04 <main+0xc28>
					case 0:
						irCommInit();
     8de:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <irCommInit>
						irCommRobotsNum = 4;	// total number of robots that exchange data
     8e2:	a4 e0       	ldi	r26, 0x04	; 4
     8e4:	a0 93 ec 04 	sts	0x04EC, r26
						irCommRobotId = 3;		// choose the id of the robot (a different id for each robot), from 0 to 254 (255 is reserved)
     8e8:	b3 e0       	ldi	r27, 0x03	; 3
     8ea:	b0 93 eb 04 	sts	0x04EB, r27
							updateBlueLed(255);
							updateRedLed(255);
							updateGreenLed(128);
							demoState = 1;
						} else {
							demoState = 2;
     8ee:	e2 e0       	ldi	r30, 0x02	; 2
     8f0:	e0 93 60 04 	sts	0x0460, r30
     8f4:	80 91 5c 04 	lds	r24, 0x045C
     8f8:	f9 cc       	rjmp	.-1550   	; 0x2ec <main+0x110>

				}
				break;

			case 13: // IR local communication: listen and transmit continuously
				switch(demoState) {
     8fa:	80 91 60 04 	lds	r24, 0x0460
     8fe:	81 30       	cpi	r24, 0x01	; 1
     900:	09 f4       	brne	.+2      	; 0x904 <main+0x728>
     902:	d6 c2       	rjmp	.+1452   	; 0xeb0 <main+0xcd4>
     904:	81 30       	cpi	r24, 0x01	; 1
     906:	08 f0       	brcs	.+2      	; 0x90a <main+0x72e>
     908:	58 c2       	rjmp	.+1200   	; 0xdba <main+0xbde>
					case 0:
						irCommInit();
     90a:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <irCommInit>
						enableObstacleAvoidance();
     90e:	0e 94 57 3e 	call	0x7cae	; 0x7cae <enableObstacleAvoidance>
						setLeftSpeed(10);
     912:	8a e0       	ldi	r24, 0x0A	; 10
     914:	0e 94 44 2a 	call	0x5488	; 0x5488 <setLeftSpeed>
						setRightSpeed(10);
     918:	8a e0       	ldi	r24, 0x0A	; 10
     91a:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <setRightSpeed>
						demoState = 1;
     91e:	20 92 60 04 	sts	0x0460, r2
     922:	80 91 5c 04 	lds	r24, 0x045C
						i = 0;
     926:	1e 82       	std	Y+6, r1	; 0x06
     928:	1d 82       	std	Y+5, r1	; 0x05
						break;
     92a:	e0 cc       	rjmp	.-1600   	; 0x2ec <main+0x110>

					break;

			case 11: 	// sync-react demo using the IR local communication (2 robots only): the robots move around with obstacle avoidance
						// enabled and when they detect each other they try to align towards the same direction rotating in place
				switch(demoState) {
     92c:	80 91 60 04 	lds	r24, 0x0460
     930:	82 30       	cpi	r24, 0x02	; 2
     932:	09 f4       	brne	.+2      	; 0x936 <main+0x75a>
     934:	69 c6       	rjmp	.+3282   	; 0x1608 <main+0x142c>
     936:	83 30       	cpi	r24, 0x03	; 3
     938:	08 f0       	brcs	.+2      	; 0x93c <main+0x760>
     93a:	ee c0       	rjmp	.+476    	; 0xb18 <main+0x93c>
     93c:	88 23       	and	r24, r24
     93e:	09 f4       	brne	.+2      	; 0x942 <main+0x766>
     940:	31 c6       	rjmp	.+3170   	; 0x15a4 <main+0x13c8>
     942:	81 30       	cpi	r24, 0x01	; 1
     944:	09 f0       	breq	.+2      	; 0x948 <main+0x76c>
     946:	b3 cd       	rjmp	.-1178   	; 0x4ae <main+0x2d2>
						irCommInit();
						demoState = 1;
						break;

					case 1:						
						enableObstacleAvoidance();
     948:	0e 94 57 3e 	call	0x7cae	; 0x7cae <enableObstacleAvoidance>
						setLeftSpeed(10);
     94c:	8a e0       	ldi	r24, 0x0A	; 10
     94e:	0e 94 44 2a 	call	0x5488	; 0x5488 <setLeftSpeed>
						setRightSpeed(10);
     952:	8a e0       	ldi	r24, 0x0A	; 10
     954:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <setRightSpeed>
						demoState = 2;
     958:	f2 e0       	ldi	r31, 0x02	; 2
     95a:	f0 93 60 04 	sts	0x0460, r31
						demoStartTime = getTime100MicroSec();
     95e:	0e 94 35 22 	call	0x446a	; 0x446a <getTime100MicroSec>
     962:	60 93 64 04 	sts	0x0464, r22
     966:	70 93 65 04 	sts	0x0465, r23
     96a:	80 93 66 04 	sts	0x0466, r24
     96e:	90 93 67 04 	sts	0x0467, r25
     972:	80 91 5c 04 	lds	r24, 0x045C
						break;
     976:	ba cc       	rjmp	.-1676   	; 0x2ec <main+0x110>
					handleMotorsWithNoController();
					break;
             
			case 1:	// obstacle avoidance enabled (the robot does not move untill commands are 
					// received from the radio or tv remote)
             		enableObstacleAvoidance();
     978:	0e 94 57 3e 	call	0x7cae	; 0x7cae <enableObstacleAvoidance>
     97c:	80 91 5c 04 	lds	r24, 0x045C
					break;
     980:	b5 cc       	rjmp	.-1686   	; 0x2ec <main+0x110>
				}

				turnOffLedsTime = getTime100MicroSec();

			} else if(currentSelector==6) {
				if(menuChoice==1 && rfFlags<=1) {
     982:	80 91 33 04 	lds	r24, 0x0433
     986:	81 30       	cpi	r24, 0x01	; 1
     988:	09 f0       	breq	.+2      	; 0x98c <main+0x7b0>
     98a:	d7 ce       	rjmp	.-594    	; 0x73a <main+0x55e>
     98c:	90 91 27 03 	lds	r25, 0x0327
     990:	92 30       	cpi	r25, 0x02	; 2
     992:	08 f0       	brcs	.+2      	; 0x996 <main+0x7ba>
     994:	d2 ce       	rjmp	.-604    	; 0x73a <main+0x55e>
					if(rgbState == 0) {
     996:	90 91 2c 03 	lds	r25, 0x032C
     99a:	99 23       	and	r25, r25
     99c:	11 f0       	breq	.+4      	; 0x9a2 <main+0x7c6>
     99e:	0c 94 9d 0d 	jmp	0x1b3a	; 0x1b3a <main+0x195e>
						pwm_red = 254;
     9a2:	5e ef       	ldi	r21, 0xFE	; 254
     9a4:	95 2e       	mov	r9, r21
     9a6:	90 92 0c 02 	sts	0x020C, r9
						pwm_green = 255;
     9aa:	10 93 0d 02 	sts	0x020D, r17
						pwm_blue = 255;
     9ae:	10 93 0e 02 	sts	0x020E, r17
						rgbState = 1;
     9b2:	80 93 2c 03 	sts	0x032C, r24
     9b6:	c1 ce       	rjmp	.-638    	; 0x73a <main+0x55e>
						if(pwm_intermediate_left_desired < pwm_left_desired) {
							pwm_intermediate_left_desired = pwm_left_desired;
						}					
					}
				} else {
					pwm_intermediate_right_desired = pwm_right_desired;
     9b8:	80 91 09 03 	lds	r24, 0x0309
     9bc:	90 91 0a 03 	lds	r25, 0x030A
     9c0:	90 93 0e 03 	sts	0x030E, r25
     9c4:	80 93 0d 03 	sts	0x030D, r24
					pwm_intermediate_left_desired = pwm_left_desired;
     9c8:	80 91 0b 03 	lds	r24, 0x030B
     9cc:	90 91 0c 03 	lds	r25, 0x030C
     9d0:	5b ce       	rjmp	.-842    	; 0x688 <main+0x4ac>
		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
             		
			if(currentSelector==4 || currentSelector==5) {
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption
     9d2:	0e 94 06 57 	call	0xae0c	; 0xae0c <rand>
     9d6:	6e e1       	ldi	r22, 0x1E	; 30
     9d8:	70 e0       	ldi	r23, 0x00	; 0
     9da:	0e 94 68 56 	call	0xacd0	; 0xacd0 <__divmodhi4>
     9de:	a8 0e       	add	r10, r24
     9e0:	b9 1e       	adc	r11, r25
     9e2:	5f e7       	ldi	r21, 0x7F	; 127
     9e4:	a5 22       	and	r10, r21
     9e6:	bb 24       	eor	r11, r11

				switch(rgbState) {
     9e8:	80 91 2c 03 	lds	r24, 0x032C
     9ec:	81 30       	cpi	r24, 0x01	; 1
     9ee:	09 f4       	brne	.+2      	; 0x9f2 <main+0x816>
     9f0:	36 c6       	rjmp	.+3180   	; 0x165e <main+0x1482>
     9f2:	81 30       	cpi	r24, 0x01	; 1
     9f4:	08 f0       	brcs	.+2      	; 0x9f8 <main+0x81c>
     9f6:	23 c5       	rjmp	.+2630   	; 0x143e <main+0x1262>
					case 0:
						pwm_red = 255 - currRand;	
     9f8:	8a 2d       	mov	r24, r10
     9fa:	80 95       	com	r24
     9fc:	80 93 0c 02 	sts	0x020C, r24
						rgbState = 1;
     a00:	20 92 2c 03 	sts	0x032C, r2
						pwm_blue = 255 - currRand;
						rgbState = 0;
						break;
				}
				
				if(currRand<32) {
     a04:	80 e2       	ldi	r24, 0x20	; 32
     a06:	a8 16       	cp	r10, r24
     a08:	b1 04       	cpc	r11, r1
     a0a:	08 f0       	brcs	.+2      	; 0xa0e <main+0x832>
     a0c:	38 c2       	rjmp	.+1136   	; 0xe7e <main+0xca2>
					if(pwm_green!=255 && pwm_blue!=255) {	// do not turn on all leds
     a0e:	80 91 0d 02 	lds	r24, 0x020D
     a12:	8f 3f       	cpi	r24, 0xFF	; 255
     a14:	09 f4       	brne	.+2      	; 0xa18 <main+0x83c>
     a16:	91 ce       	rjmp	.-734    	; 0x73a <main+0x55e>
     a18:	80 91 0e 02 	lds	r24, 0x020E
     a1c:	8f 3f       	cpi	r24, 0xFF	; 255
     a1e:	09 f4       	brne	.+2      	; 0xa22 <main+0x846>
     a20:	8c ce       	rjmp	.-744    	; 0x73a <main+0x55e>
						pwm_red = 255;
     a22:	10 93 0c 02 	sts	0x020C, r17
     a26:	89 ce       	rjmp	.-750    	; 0x73a <main+0x55e>

				}

			} else if(currentSelector==7) {

				srand(TCNT3);
     a28:	80 91 94 00 	lds	r24, 0x0094
     a2c:	90 91 95 00 	lds	r25, 0x0095
     a30:	0e 94 0b 57 	call	0xae16	; 0xae16 <srand>
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption
     a34:	0e 94 06 57 	call	0xae0c	; 0xae0c <rand>
     a38:	6e e1       	ldi	r22, 0x1E	; 30
     a3a:	70 e0       	ldi	r23, 0x00	; 0
     a3c:	0e 94 68 56 	call	0xacd0	; 0xacd0 <__divmodhi4>
     a40:	4c 01       	movw	r8, r24
     a42:	8a 0c       	add	r8, r10
     a44:	9b 1c       	adc	r9, r11
     a46:	bf e7       	ldi	r27, 0x7F	; 127
     a48:	8b 22       	and	r8, r27
     a4a:	99 24       	eor	r9, r9

				pwm_red = 255 - currRand;
     a4c:	88 2d       	mov	r24, r8
     a4e:	80 95       	com	r24
     a50:	80 93 0c 02 	sts	0x020C, r24
				
				srand(TCNT3);
     a54:	80 91 94 00 	lds	r24, 0x0094
     a58:	90 91 95 00 	lds	r25, 0x0095
     a5c:	0e 94 0b 57 	call	0xae16	; 0xae16 <srand>
				currRand = (currRand + rand()%30) % 128;	
     a60:	0e 94 06 57 	call	0xae0c	; 0xae0c <rand>
     a64:	6e e1       	ldi	r22, 0x1E	; 30
     a66:	70 e0       	ldi	r23, 0x00	; 0
     a68:	0e 94 68 56 	call	0xacd0	; 0xacd0 <__divmodhi4>
     a6c:	6c 01       	movw	r12, r24
     a6e:	c8 0c       	add	r12, r8
     a70:	d9 1c       	adc	r13, r9
     a72:	ef e7       	ldi	r30, 0x7F	; 127
     a74:	ce 22       	and	r12, r30
     a76:	dd 24       	eor	r13, r13
				pwm_green = 255 - currRand;
     a78:	8c 2d       	mov	r24, r12
     a7a:	80 95       	com	r24
     a7c:	80 93 0d 02 	sts	0x020D, r24

				srand(TCNT3);
     a80:	80 91 94 00 	lds	r24, 0x0094
     a84:	90 91 95 00 	lds	r25, 0x0095
     a88:	0e 94 0b 57 	call	0xae16	; 0xae16 <srand>
				currRand = (currRand + rand()%30) % 128;
     a8c:	0e 94 06 57 	call	0xae0c	; 0xae0c <rand>
     a90:	6e e1       	ldi	r22, 0x1E	; 30
     a92:	70 e0       	ldi	r23, 0x00	; 0
     a94:	0e 94 68 56 	call	0xacd0	; 0xacd0 <__divmodhi4>
     a98:	5c 01       	movw	r10, r24
     a9a:	ac 0c       	add	r10, r12
     a9c:	bd 1c       	adc	r11, r13
     a9e:	ff e7       	ldi	r31, 0x7F	; 127
     aa0:	af 22       	and	r10, r31
     aa2:	bb 24       	eor	r11, r11
				pwm_blue = 255 - currRand;
     aa4:	8a 2d       	mov	r24, r10
     aa6:	80 95       	com	r24
     aa8:	80 93 0e 02 	sts	0x020E, r24

			
				srand(TCNT3);
     aac:	80 91 94 00 	lds	r24, 0x0094
     ab0:	90 91 95 00 	lds	r25, 0x0095
     ab4:	0e 94 0b 57 	call	0xae16	; 0xae16 <srand>
				currRand2 = rand()%128;
     ab8:	0e 94 06 57 	call	0xae0c	; 0xae0c <rand>
     abc:	60 e8       	ldi	r22, 0x80	; 128
     abe:	70 e0       	ldi	r23, 0x00	; 0
     ac0:	0e 94 68 56 	call	0xacd0	; 0xacd0 <__divmodhi4>
				if(currRand2<32) {
     ac4:	80 32       	cpi	r24, 0x20	; 32
     ac6:	91 05       	cpc	r25, r1
     ac8:	08 f0       	brcs	.+2      	; 0xacc <main+0x8f0>
     aca:	eb c1       	rjmp	.+982    	; 0xea2 <main+0xcc6>
					pwm_red = 255;
     acc:	10 93 0c 02 	sts	0x020C, r17
					pwm_blue = 255;
				} else {	// do nothing => all 3 leds turned on

				}

				turnOffLedsTime = getTime100MicroSec();
     ad0:	0e 94 35 22 	call	0x446a	; 0x446a <getTime100MicroSec>
     ad4:	69 83       	std	Y+1, r22	; 0x01
     ad6:	7a 83       	std	Y+2, r23	; 0x02
     ad8:	8b 83       	std	Y+3, r24	; 0x03
     ada:	9c 83       	std	Y+4, r25	; 0x04
     adc:	2e ce       	rjmp	.-932    	; 0x73a <main+0x55e>
						break;
				}
				break;
			
			case 14: // Multirobots communication: continuously change current color and make it change also for other robots
				switch(demoState) {
     ade:	81 30       	cpi	r24, 0x01	; 1
     ae0:	09 f0       	breq	.+2      	; 0xae4 <main+0x908>
     ae2:	e5 cc       	rjmp	.-1590   	; 0x4ae <main+0x2d2>
						irCommRxByteExpected = 1;
						irCommMsgCount = 0;
						break;

					case 1:	
						irCommTasks();
     ae4:	0e 94 b4 47 	call	0x8f68	; 0x8f68 <irCommTasks>
						if(irCommDataSent()==1) {	
     ae8:	0e 94 05 53 	call	0xa60a	; 0xa60a <irCommDataSent>
     aec:	81 30       	cpi	r24, 0x01	; 1
     aee:	11 f4       	brne	.+4      	; 0xaf4 <main+0x918>
     af0:	0c 94 7f 0d 	jmp	0x1afe	; 0x1afe <main+0x1922>
							irCommSendData(irCommRxByteExpected);					
						}
						if(irCommDataAvailable()==1) {							
     af4:	0e 94 0d 53 	call	0xa61a	; 0xa61a <irCommDataAvailable>
     af8:	81 30       	cpi	r24, 0x01	; 1
     afa:	09 f4       	brne	.+2      	; 0xafe <main+0x922>
     afc:	ce c7       	rjmp	.+3996   	; 0x1a9a <main+0x18be>
									updateBlueLed(235);
									break;
								case 7: 
									updateRedLed(235);
									updateGreenLed(235);
									updateBlueLed(235);
     afe:	80 91 5c 04 	lds	r24, 0x045C
									break;
     b02:	f4 cb       	rjmp	.-2072   	; 0x2ec <main+0x110>
					}
	
					if(pwm_left_desired == 0) {
						pwm_intermediate_left_desired = 0;
					} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
						pwm_intermediate_left_desired = 0;
     b04:	10 92 10 03 	sts	0x0310, r1
     b08:	10 92 0f 03 	sts	0x030F, r1
     b0c:	d7 cb       	rjmp	.-2130   	; 0x2bc <main+0xe0>

				if(softAccEnabled) {
					if(pwm_right_desired == 0) {
						pwm_intermediate_right_desired = 0;
					} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
						pwm_intermediate_right_desired = 0;
     b0e:	10 92 0e 03 	sts	0x030E, r1
     b12:	10 92 0d 03 	sts	0x030D, r1
     b16:	93 cd       	rjmp	.-1242   	; 0x63e <main+0x462>

					break;

			case 11: 	// sync-react demo using the IR local communication (2 robots only): the robots move around with obstacle avoidance
						// enabled and when they detect each other they try to align towards the same direction rotating in place
				switch(demoState) {
     b18:	83 30       	cpi	r24, 0x03	; 3
     b1a:	09 f4       	brne	.+2      	; 0xb1e <main+0x942>
     b1c:	4b c5       	rjmp	.+2710   	; 0x15b4 <main+0x13d8>
     b1e:	84 30       	cpi	r24, 0x04	; 4
     b20:	09 f0       	breq	.+2      	; 0xb24 <main+0x948>
     b22:	c5 cc       	rjmp	.-1654   	; 0x4ae <main+0x2d2>
							demoStartTime = getTime100MicroSec();
						}
						break;

					case 4:	// rotate left
						irCommTasks();
     b24:	0e 94 b4 47 	call	0x8f68	; 0x8f68 <irCommTasks>
						if(theta >= targetAngle) {
     b28:	60 91 7f 04 	lds	r22, 0x047F
     b2c:	70 91 80 04 	lds	r23, 0x0480
     b30:	80 91 81 04 	lds	r24, 0x0481
     b34:	90 91 82 04 	lds	r25, 0x0482
     b38:	2f 81       	ldd	r18, Y+7	; 0x07
     b3a:	38 85       	ldd	r19, Y+8	; 0x08
     b3c:	49 85       	ldd	r20, Y+9	; 0x09
     b3e:	5a 85       	ldd	r21, Y+10	; 0x0a
     b40:	0e 94 9f 55 	call	0xab3e	; 0xab3e <__gesf2>
     b44:	87 fd       	sbrc	r24, 7
     b46:	db cf       	rjmp	.-74     	; 0xafe <main+0x922>
							setLeftSpeed(0);
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	0e 94 44 2a 	call	0x5488	; 0x5488 <setLeftSpeed>
							setRightSpeed(0);
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <setRightSpeed>
							demoState = 2;
     b54:	92 e0       	ldi	r25, 0x02	; 2
     b56:	90 93 60 04 	sts	0x0460, r25
							demoStartTime = getTime100MicroSec();
     b5a:	0e 94 35 22 	call	0x446a	; 0x446a <getTime100MicroSec>
     b5e:	60 93 64 04 	sts	0x0464, r22
     b62:	70 93 65 04 	sts	0x0465, r23
     b66:	80 93 66 04 	sts	0x0466, r24
     b6a:	90 93 67 04 	sts	0x0467, r25
     b6e:	80 91 5c 04 	lds	r24, 0x045C
     b72:	bc cb       	rjmp	.-2184   	; 0x2ec <main+0x110>
								demoState = 1;							
							}
							break;
					}	
					
					switch(rgbLedState) {
     b74:	82 30       	cpi	r24, 0x02	; 2
     b76:	19 f6       	brne	.-122    	; 0xafe <main+0x922>
							updateBlueLed(pwm_blue);
							rgbLedState = 2;
							break;

						case 2:
							if((getTime100MicroSec()-demoStartTime2) >= (PAUSE_500_MSEC)) {
     b78:	0e 94 35 22 	call	0x446a	; 0x446a <getTime100MicroSec>
     b7c:	9b 01       	movw	r18, r22
     b7e:	ac 01       	movw	r20, r24
     b80:	80 91 68 04 	lds	r24, 0x0468
     b84:	90 91 69 04 	lds	r25, 0x0469
     b88:	a0 91 6a 04 	lds	r26, 0x046A
     b8c:	b0 91 6b 04 	lds	r27, 0x046B
     b90:	28 1b       	sub	r18, r24
     b92:	39 0b       	sbc	r19, r25
     b94:	4a 0b       	sbc	r20, r26
     b96:	5b 0b       	sbc	r21, r27
     b98:	27 3c       	cpi	r18, 0xC7	; 199
     b9a:	e2 e1       	ldi	r30, 0x12	; 18
     b9c:	3e 07       	cpc	r19, r30
     b9e:	e0 e0       	ldi	r30, 0x00	; 0
     ba0:	4e 07       	cpc	r20, r30
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	5e 07       	cpc	r21, r30
     ba6:	08 f4       	brcc	.+2      	; 0xbaa <main+0x9ce>
     ba8:	aa cf       	rjmp	.-172    	; 0xafe <main+0x922>
								rgbLedState = 0;
     baa:	10 92 7b 04 	sts	0x047B, r1
								demoStartTime2 = getTime100MicroSec();
     bae:	0e 94 35 22 	call	0x446a	; 0x446a <getTime100MicroSec>
     bb2:	60 93 68 04 	sts	0x0468, r22
     bb6:	70 93 69 04 	sts	0x0469, r23
     bba:	80 93 6a 04 	sts	0x046A, r24
     bbe:	90 93 6b 04 	sts	0x046B, r25
								demoEndTime = getTime100MicroSec();
     bc2:	0e 94 35 22 	call	0x446a	; 0x446a <getTime100MicroSec>
     bc6:	60 93 6c 04 	sts	0x046C, r22
     bca:	70 93 6d 04 	sts	0x046D, r23
     bce:	80 93 6e 04 	sts	0x046E, r24
     bd2:	90 93 6f 04 	sts	0x046F, r25
								greenLedState = 0;
     bd6:	10 92 7a 04 	sts	0x047A, r1
								setGreenLed(greenLedState, 1);
     bda:	80 e0       	ldi	r24, 0x00	; 0
     bdc:	61 e0       	ldi	r22, 0x01	; 1
     bde:	0e 94 de 3e 	call	0x7dbc	; 0x7dbc <setGreenLed>
     be2:	80 91 5c 04 	lds	r24, 0x045C
     be6:	82 cb       	rjmp	.-2300   	; 0x2ec <main+0x110>
							break;
					}
					break;

			case 10:// obstacle avoidance with random colors; 4 seconds motion and 10 seconds pause					
					switch(demoState) {
     be8:	82 30       	cpi	r24, 0x02	; 2
     bea:	09 f0       	breq	.+2      	; 0xbee <main+0xa12>
     bec:	0d cc       	rjmp	.-2022   	; 0x408 <main+0x22c>
								demoState = 2;							
							}
							break;

						case 2: // pause							
							if((getTime100MicroSec()-demoStartTime) >= (PAUSE_10_SEC)) {
     bee:	0e 94 35 22 	call	0x446a	; 0x446a <getTime100MicroSec>
     bf2:	9b 01       	movw	r18, r22
     bf4:	ac 01       	movw	r20, r24
     bf6:	80 91 64 04 	lds	r24, 0x0464
     bfa:	90 91 65 04 	lds	r25, 0x0465
     bfe:	a0 91 66 04 	lds	r26, 0x0466
     c02:	b0 91 67 04 	lds	r27, 0x0467
     c06:	28 1b       	sub	r18, r24
     c08:	39 0b       	sbc	r19, r25
     c0a:	4a 0b       	sbc	r20, r26
     c0c:	5b 0b       	sbc	r21, r27
     c0e:	2a 39       	cpi	r18, 0x9A	; 154
     c10:	e7 e7       	ldi	r30, 0x77	; 119
     c12:	3e 07       	cpc	r19, r30
     c14:	e1 e0       	ldi	r30, 0x01	; 1
     c16:	4e 07       	cpc	r20, r30
     c18:	e0 e0       	ldi	r30, 0x00	; 0
     c1a:	5e 07       	cpc	r21, r30
     c1c:	08 f4       	brcc	.+2      	; 0xc20 <main+0xa44>
     c1e:	f4 cb       	rjmp	.-2072   	; 0x408 <main+0x22c>
								setRightSpeed(20);
     c20:	84 e1       	ldi	r24, 0x14	; 20
     c22:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <setRightSpeed>
								setLeftSpeed(20);								
     c26:	84 e1       	ldi	r24, 0x14	; 20
     c28:	0e 94 44 2a 	call	0x5488	; 0x5488 <setLeftSpeed>
								demoStartTime = getTime100MicroSec();								
     c2c:	0e 94 35 22 	call	0x446a	; 0x446a <getTime100MicroSec>
     c30:	60 93 64 04 	sts	0x0464, r22
     c34:	70 93 65 04 	sts	0x0465, r23
     c38:	80 93 66 04 	sts	0x0466, r24
     c3c:	90 93 67 04 	sts	0x0467, r25
								demoState = 1;							
     c40:	20 92 60 04 	sts	0x0460, r2
							}
							break;
					}	
					
					switch(rgbLedState) {
     c44:	80 91 7b 04 	lds	r24, 0x047B
     c48:	81 30       	cpi	r24, 0x01	; 1
     c4a:	09 f0       	breq	.+2      	; 0xc4e <main+0xa72>
     c4c:	e2 cb       	rjmp	.-2108   	; 0x412 <main+0x236>
							updateGreenLed(pwm_green);
							updateBlueLed(pwm_blue);
							break;

						case 1:		
							turnOffGreenLeds();					
     c4e:	0e 94 7b 3f 	call	0x7ef6	; 0x7ef6 <turnOffGreenLeds>
							currRand = rand()% 128;	// 0 to 255 is the maximum, we use 0 to 127 to get brighter colors
     c52:	0e 94 06 57 	call	0xae0c	; 0xae0c <rand>
     c56:	60 e8       	ldi	r22, 0x80	; 128
     c58:	70 e0       	ldi	r23, 0x00	; 0
     c5a:	0e 94 68 56 	call	0xacd0	; 0xacd0 <__divmodhi4>
							if(currRand > 95) {
     c5e:	80 36       	cpi	r24, 0x60	; 96
     c60:	91 05       	cpc	r25, r1
     c62:	08 f4       	brcc	.+2      	; 0xc66 <main+0xa8a>
     c64:	51 c6       	rjmp	.+3234   	; 0x1908 <main+0x172c>
								pwm_red = 255;
     c66:	10 93 0c 02 	sts	0x020C, r17
							} else {
								pwm_red = currRand;
							}

							currRand = rand()% 128;
     c6a:	0e 94 06 57 	call	0xae0c	; 0xae0c <rand>
     c6e:	60 e8       	ldi	r22, 0x80	; 128
     c70:	70 e0       	ldi	r23, 0x00	; 0
     c72:	0e 94 68 56 	call	0xacd0	; 0xacd0 <__divmodhi4>
							if(currRand > 95) {
     c76:	80 36       	cpi	r24, 0x60	; 96
     c78:	91 05       	cpc	r25, r1
     c7a:	08 f4       	brcc	.+2      	; 0xc7e <main+0xaa2>
     c7c:	42 c6       	rjmp	.+3204   	; 0x1902 <main+0x1726>
								pwm_green = 255;
     c7e:	10 93 0d 02 	sts	0x020D, r17
							} else {
								pwm_green = currRand;
							}

							currRand = rand()% 128;
     c82:	0e 94 06 57 	call	0xae0c	; 0xae0c <rand>
     c86:	60 e8       	ldi	r22, 0x80	; 128
     c88:	70 e0       	ldi	r23, 0x00	; 0
     c8a:	0e 94 68 56 	call	0xacd0	; 0xacd0 <__divmodhi4>
							if(currRand > 95) {
     c8e:	80 36       	cpi	r24, 0x60	; 96
     c90:	91 05       	cpc	r25, r1
     c92:	08 f4       	brcc	.+2      	; 0xc96 <main+0xaba>
     c94:	33 c6       	rjmp	.+3174   	; 0x18fc <main+0x1720>
								pwm_blue = 255;
     c96:	10 93 0e 02 	sts	0x020E, r17
							} else {
								pwm_blue = currRand;
							}

							currRand = rand()% 200;
     c9a:	0e 94 06 57 	call	0xae0c	; 0xae0c <rand>
     c9e:	68 ec       	ldi	r22, 0xC8	; 200
     ca0:	70 e0       	ldi	r23, 0x00	; 0
     ca2:	0e 94 68 56 	call	0xacd0	; 0xacd0 <__divmodhi4>
     ca6:	5c 01       	movw	r10, r24
							if(currRand<50) {
     ca8:	82 e3       	ldi	r24, 0x32	; 50
     caa:	a8 16       	cp	r10, r24
     cac:	b1 04       	cpc	r11, r1
     cae:	08 f0       	brcs	.+2      	; 0xcb2 <main+0xad6>
     cb0:	1b c6       	rjmp	.+3126   	; 0x18e8 <main+0x170c>
								pwm_red = 255;
     cb2:	10 93 0c 02 	sts	0x020C, r17
     cb6:	8f ef       	ldi	r24, 0xFF	; 255
							} else if(currRand<100) {
								pwm_green = 255;
							} else if (currRand<150) {	
								pwm_blue = 255;
							}
							updateRedLed(pwm_red);
     cb8:	0e 94 a2 3e 	call	0x7d44	; 0x7d44 <updateRedLed>
							updateGreenLed(pwm_green);
     cbc:	80 91 0d 02 	lds	r24, 0x020D
     cc0:	0e 94 b6 3e 	call	0x7d6c	; 0x7d6c <updateGreenLed>
							updateBlueLed(pwm_blue);
     cc4:	80 91 0e 02 	lds	r24, 0x020E
     cc8:	0e 94 ca 3e 	call	0x7d94	; 0x7d94 <updateBlueLed>
							rgbLedState = 2;
     ccc:	b2 e0       	ldi	r27, 0x02	; 2
     cce:	b0 93 7b 04 	sts	0x047B, r27
     cd2:	80 91 5c 04 	lds	r24, 0x045C
							break;
     cd6:	0a cb       	rjmp	.-2540   	; 0x2ec <main+0x110>
					setLeftSpeed(25);
					setRightSpeed(25);
					break;

			case 6:	// robot testing
					switch(menuChoice) {
     cd8:	82 30       	cpi	r24, 0x02	; 2
     cda:	09 f0       	breq	.+2      	; 0xcde <main+0xb02>
     cdc:	e8 cb       	rjmp	.-2096   	; 0x4ae <main+0x2d2>
							}

							break;

						case 2:	// address writing in eeprom
							if(addressReceived) {
     cde:	80 91 34 04 	lds	r24, 0x0434
     ce2:	88 23       	and	r24, r24
     ce4:	09 f4       	brne	.+2      	; 0xce8 <main+0xb0c>
     ce6:	e3 cb       	rjmp	.-2106   	; 0x4ae <main+0x2d2>
								turnOnGreenLeds();
     ce8:	0e 94 94 3f 	call	0x7f28	; 0x7f28 <turnOnGreenLeds>
								eeprom_write_word((uint16_t*)4094, rfAddress);
     cec:	60 91 25 03 	lds	r22, 0x0325
     cf0:	70 91 26 03 	lds	r23, 0x0326
     cf4:	8e ef       	ldi	r24, 0xFE	; 254
     cf6:	9f e0       	ldi	r25, 0x0F	; 15
     cf8:	0e 94 71 57 	call	0xaee2	; 0xaee2 <__eewr_word_m2560>
								turnOffGreenLeds();
     cfc:	0e 94 7b 3f 	call	0x7ef6	; 0x7ef6 <turnOffGreenLeds>
								usart0Transmit(0xAA, 1);	// successfully written
     d00:	8a ea       	ldi	r24, 0xAA	; 170
     d02:	61 e0       	ldi	r22, 0x01	; 1
     d04:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
								addressReceived = 0;
     d08:	10 92 34 04 	sts	0x0434, r1
								menuChoice = 0;
     d0c:	10 92 33 04 	sts	0x0433, r1
     d10:	80 91 5c 04 	lds	r24, 0x045C
     d14:	eb ca       	rjmp	.-2602   	; 0x2ec <main+0x110>
					break;

			case 9:	// write default calibration values; wait 2 seconds before start writing the calibration values
					// in eeprom in order to avoid rewriting the data involuntarily when moving the selector and passing 
					// through selector position 9
					switch(demoState) {
     d16:	82 30       	cpi	r24, 0x02	; 2
     d18:	09 f0       	breq	.+2      	; 0xd1c <main+0xb40>
     d1a:	c9 cb       	rjmp	.-2158   	; 0x4ae <main+0x2d2>
								demoState = 2;
							}
							break;						

						case 2:
							if(!calibrationWritten) {
     d1c:	80 91 79 04 	lds	r24, 0x0479
     d20:	88 23       	and	r24, r24
     d22:	09 f0       	breq	.+2      	; 0xd26 <main+0xb4a>
     d24:	c4 cb       	rjmp	.-2168   	; 0x4ae <main+0x2d2>
								calibrationWritten = 1;
     d26:	20 92 79 04 	sts	0x0479, r2
								writeDefaultCalibration();
     d2a:	0e 94 c9 38 	call	0x7192	; 0x7192 <writeDefaultCalibration>
     d2e:	80 91 5c 04 	lds	r24, 0x045C
     d32:	dc ca       	rjmp	.-2632   	; 0x2ec <main+0x110>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
     d34:	84 30       	cpi	r24, 0x04	; 4
     d36:	09 f4       	brne	.+2      	; 0xd3a <main+0xb5e>
     d38:	ac c4       	rjmp	.+2392   	; 0x1692 <main+0x14b6>
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	08 f4       	brcc	.+2      	; 0xd40 <main+0xb64>
     d3e:	6a c5       	rjmp	.+2772   	; 0x1814 <main+0x1638>
     d40:	85 30       	cpi	r24, 0x05	; 5
     d42:	09 f0       	breq	.+2      	; 0xd46 <main+0xb6a>
     d44:	a3 cb       	rjmp	.-2234   	; 0x48c <main+0x2b0>
							//pwm_green = 0;
							//pwm_blue = 255;													
							break;

						case 5:	// turn around
							turnOffGreenLeds();
     d46:	0e 94 7b 3f 	call	0x7ef6	; 0x7ef6 <turnOffGreenLeds>
							GREEN_LED6_ON;
     d4a:	80 91 0b 01 	lds	r24, 0x010B
     d4e:	8f 7b       	andi	r24, 0xBF	; 191
     d50:	80 93 0b 01 	sts	0x010B, r24
							GREEN_LED7_ON;
     d54:	80 91 0b 01 	lds	r24, 0x010B
     d58:	8f 77       	andi	r24, 0x7F	; 127
     d5a:	80 93 0b 01 	sts	0x010B, r24
							demoEndTime = getTime100MicroSec();
     d5e:	0e 94 35 22 	call	0x446a	; 0x446a <getTime100MicroSec>
     d62:	9b 01       	movw	r18, r22
     d64:	ac 01       	movw	r20, r24
     d66:	60 93 6c 04 	sts	0x046C, r22
     d6a:	70 93 6d 04 	sts	0x046D, r23
     d6e:	80 93 6e 04 	sts	0x046E, r24
     d72:	90 93 6f 04 	sts	0x046F, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_750_MSEC)) {
     d76:	80 91 64 04 	lds	r24, 0x0464
     d7a:	90 91 65 04 	lds	r25, 0x0465
     d7e:	a0 91 66 04 	lds	r26, 0x0466
     d82:	b0 91 67 04 	lds	r27, 0x0467
     d86:	28 1b       	sub	r18, r24
     d88:	39 0b       	sbc	r19, r25
     d8a:	4a 0b       	sbc	r20, r26
     d8c:	5b 0b       	sbc	r21, r27
     d8e:	2b 32       	cpi	r18, 0x2B	; 43
     d90:	6c e1       	ldi	r22, 0x1C	; 28
     d92:	36 07       	cpc	r19, r22
     d94:	60 e0       	ldi	r22, 0x00	; 0
     d96:	46 07       	cpc	r20, r22
     d98:	60 e0       	ldi	r22, 0x00	; 0
     d9a:	56 07       	cpc	r21, r22
     d9c:	08 f4       	brcc	.+2      	; 0xda0 <main+0xbc4>
     d9e:	76 cb       	rjmp	.-2324   	; 0x48c <main+0x2b0>
								demoStartTime = getTime100MicroSec();
     da0:	0e 94 35 22 	call	0x446a	; 0x446a <getTime100MicroSec>
     da4:	60 93 64 04 	sts	0x0464, r22
     da8:	70 93 65 04 	sts	0x0465, r23
     dac:	80 93 66 04 	sts	0x0466, r24
     db0:	90 93 67 04 	sts	0x0467, r25
								demoState = 0;							
     db4:	10 92 60 04 	sts	0x0460, r1
     db8:	69 cb       	rjmp	.-2350   	; 0x48c <main+0x2b0>

				}
				break;

			case 13: // IR local communication: listen and transmit continuously
				switch(demoState) {
     dba:	82 30       	cpi	r24, 0x02	; 2
     dbc:	09 f0       	breq	.+2      	; 0xdc0 <main+0xbe4>
     dbe:	77 cb       	rjmp	.-2322   	; 0x4ae <main+0x2d2>
						irCommSendData(irCommRxByteExpected);													
						demoState = 2;
						break;

					case 2:
						irCommTasks();
     dc0:	0e 94 b4 47 	call	0x8f68	; 0x8f68 <irCommTasks>
						if(irCommDataSent()==1) {							
     dc4:	0e 94 05 53 	call	0xa60a	; 0xa60a <irCommDataSent>
     dc8:	81 30       	cpi	r24, 0x01	; 1
     dca:	09 f4       	brne	.+2      	; 0xdce <main+0xbf2>
     dcc:	0d c6       	rjmp	.+3098   	; 0x19e8 <main+0x180c>
								irCommRxByteExpected++;
							} else {
								irCommRxByteExpected = 0;
							}
						}
						if(irCommDataAvailable()==1) {
     dce:	0e 94 0d 53 	call	0xa61a	; 0xa61a <irCommDataAvailable>
     dd2:	81 30       	cpi	r24, 0x01	; 1
     dd4:	09 f0       	breq	.+2      	; 0xdd8 <main+0xbfc>
     dd6:	93 ce       	rjmp	.-730    	; 0xafe <main+0x922>
							irCommReadData();
     dd8:	0e 94 10 53 	call	0xa620	; 0xa620 <irCommReadData>
							if(i<7) {
     ddc:	2d 81       	ldd	r18, Y+5	; 0x05
     dde:	3e 81       	ldd	r19, Y+6	; 0x06
     de0:	27 30       	cpi	r18, 0x07	; 7
     de2:	31 05       	cpc	r19, r1
     de4:	08 f4       	brcc	.+2      	; 0xde8 <main+0xc0c>
     de6:	5c c7       	rjmp	.+3768   	; 0x1ca0 <main+0x1ac4>
							} else {
								i = 0;
							}
							switch(i) {
								case 0: 
									updateRedLed(255);
     de8:	8f ef       	ldi	r24, 0xFF	; 255
     dea:	0e 94 a2 3e 	call	0x7d44	; 0x7d44 <updateRedLed>
									updateGreenLed(255);
     dee:	8f ef       	ldi	r24, 0xFF	; 255
     df0:	0e 94 b6 3e 	call	0x7d6c	; 0x7d6c <updateGreenLed>
									updateBlueLed(255);
     df4:	8f ef       	ldi	r24, 0xFF	; 255
     df6:	0e 94 ca 3e 	call	0x7d94	; 0x7d94 <updateBlueLed>
     dfa:	80 91 5c 04 	lds	r24, 0x045C
									break;
     dfe:	1e 82       	std	Y+6, r1	; 0x06
     e00:	1d 82       	std	Y+5, r1	; 0x05
     e02:	74 ca       	rjmp	.-2840   	; 0x2ec <main+0x110>
						break;
				}
				break;

			case 12:	// IR local communication: 2 or more robots pass information between them in sequence
				switch(demoState) {
     e04:	82 30       	cpi	r24, 0x02	; 2
     e06:	09 f4       	brne	.+2      	; 0xe0a <main+0xc2e>
     e08:	24 c3       	rjmp	.+1608   	; 0x1452 <main+0x1276>
     e0a:	83 30       	cpi	r24, 0x03	; 3
     e0c:	09 f0       	breq	.+2      	; 0xe10 <main+0xc34>
     e0e:	4f cb       	rjmp	.-2402   	; 0x4ae <main+0x2d2>
						break;

					case 3:	// led is on
							// transmission: send 0xFF untill the previous robot is turned off
							// reception: I know that it is turned off when I receive the previous robot id 
						irCommTasks();
     e10:	0e 94 b4 47 	call	0x8f68	; 0x8f68 <irCommTasks>
						if(irCommDataSent()==1) {
     e14:	0e 94 05 53 	call	0xa60a	; 0xa60a <irCommDataSent>
     e18:	81 30       	cpi	r24, 0x01	; 1
     e1a:	09 f0       	breq	.+2      	; 0xe1e <main+0xc42>
     e1c:	70 ce       	rjmp	.-800    	; 0xafe <main+0x922>
							if(irCommDataAvailable()==1) {
     e1e:	0e 94 0d 53 	call	0xa61a	; 0xa61a <irCommDataAvailable>
     e22:	81 30       	cpi	r24, 0x01	; 1
     e24:	09 f0       	breq	.+2      	; 0xe28 <main+0xc4c>
     e26:	6b ce       	rjmp	.-810    	; 0xafe <main+0x922>
								if(irCommLedToggle==0) {
     e28:	90 91 ed 04 	lds	r25, 0x04ED
     e2c:	99 23       	and	r25, r25
     e2e:	11 f0       	breq	.+4      	; 0xe34 <main+0xc58>
     e30:	0c 94 55 0f 	jmp	0x1eaa	; 0x1eaa <main+0x1cce>
									irCommLedToggle = 1;
     e34:	80 93 ed 04 	sts	0x04ED, r24
									updateBlueLed(255);
     e38:	8f ef       	ldi	r24, 0xFF	; 255
     e3a:	0e 94 ca 3e 	call	0x7d94	; 0x7d94 <updateBlueLed>
									updateRedLed(255);
     e3e:	8f ef       	ldi	r24, 0xFF	; 255
     e40:	0e 94 a2 3e 	call	0x7d44	; 0x7d44 <updateRedLed>
									updateGreenLed(128);
     e44:	80 e8       	ldi	r24, 0x80	; 128
     e46:	0e 94 b6 3e 	call	0x7d6c	; 0x7d6c <updateGreenLed>
									irCommLedToggle = 0;
									updateBlueLed(255);
									updateRedLed(255);
									updateGreenLed(235);
								}
								i = irCommReadData();
     e4a:	0e 94 10 53 	call	0xa620	; 0xa620 <irCommReadData>
     e4e:	a8 2f       	mov	r26, r24
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	be 83       	std	Y+6, r27	; 0x06
     e54:	ad 83       	std	Y+5, r26	; 0x05
								if(irCommRobotId == 0) {
     e56:	80 91 eb 04 	lds	r24, 0x04EB
     e5a:	88 23       	and	r24, r24
     e5c:	11 f0       	breq	.+4      	; 0xe62 <main+0xc86>
     e5e:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <main+0x1cba>
									if(i == (unsigned int)(irCommRobotsNum-1)) {
     e62:	80 91 ec 04 	lds	r24, 0x04EC
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	01 97       	sbiw	r24, 0x01	; 1
     e6a:	8a 17       	cp	r24, r26
     e6c:	9b 07       	cpc	r25, r27
     e6e:	09 f4       	brne	.+2      	; 0xe72 <main+0xc96>
     e70:	f0 c3       	rjmp	.+2016   	; 0x1652 <main+0x1476>
									}
								} else {
									if(i == (unsigned int)(irCommRobotId-1)) {
										demoState = 1;
									} else {
										irCommSendData(0xFF);
     e72:	8f ef       	ldi	r24, 0xFF	; 255
     e74:	0e 94 fc 52 	call	0xa5f8	; 0xa5f8 <irCommSendData>
     e78:	80 91 5c 04 	lds	r24, 0x045C
     e7c:	37 ca       	rjmp	.-2962   	; 0x2ec <main+0x110>
				
				if(currRand<32) {
					if(pwm_green!=255 && pwm_blue!=255) {	// do not turn on all leds
						pwm_red = 255;
					}
				} else if(currRand<64) {
     e7e:	90 e4       	ldi	r25, 0x40	; 64
     e80:	a9 16       	cp	r10, r25
     e82:	b1 04       	cpc	r11, r1
     e84:	08 f0       	brcs	.+2      	; 0xe88 <main+0xcac>
     e86:	f3 c3       	rjmp	.+2022   	; 0x166e <main+0x1492>
					if(pwm_red!=255 && pwm_blue!=255) {
     e88:	80 91 0c 02 	lds	r24, 0x020C
     e8c:	8f 3f       	cpi	r24, 0xFF	; 255
     e8e:	09 f4       	brne	.+2      	; 0xe92 <main+0xcb6>
     e90:	54 cc       	rjmp	.-1880   	; 0x73a <main+0x55e>
     e92:	80 91 0e 02 	lds	r24, 0x020E
     e96:	8f 3f       	cpi	r24, 0xFF	; 255
     e98:	09 f4       	brne	.+2      	; 0xe9c <main+0xcc0>
     e9a:	4f cc       	rjmp	.-1890   	; 0x73a <main+0x55e>
						pwm_green = 255;
     e9c:	10 93 0d 02 	sts	0x020D, r17
     ea0:	4c cc       	rjmp	.-1896   	; 0x73a <main+0x55e>
			
				srand(TCNT3);
				currRand2 = rand()%128;
				if(currRand2<32) {
					pwm_red = 255;
				} else if(currRand2<64) {
     ea2:	80 34       	cpi	r24, 0x40	; 64
     ea4:	91 05       	cpc	r25, r1
     ea6:	08 f0       	brcs	.+2      	; 0xeaa <main+0xcce>
     ea8:	fb c4       	rjmp	.+2550   	; 0x18a0 <main+0x16c4>
					pwm_green = 255;
     eaa:	10 93 0d 02 	sts	0x020D, r17
     eae:	10 ce       	rjmp	.-992    	; 0xad0 <main+0x8f4>
						demoState = 1;
						i = 0;
						break;

					case 1:						
						irCommSendData(irCommRxByteExpected);													
     eb0:	80 91 19 05 	lds	r24, 0x0519
     eb4:	0e 94 fc 52 	call	0xa5f8	; 0xa5f8 <irCommSendData>
						demoState = 2;
     eb8:	f2 e0       	ldi	r31, 0x02	; 2
     eba:	f0 93 60 04 	sts	0x0460, r31
     ebe:	80 91 5c 04 	lds	r24, 0x045C
						break;
     ec2:	14 ca       	rjmp	.-3032   	; 0x2ec <main+0x110>
							break;

						case 1:	// send sensors data and activate actuators
							//setRightSpeed(20);
							//setLeftSpeed(20);
							turnOnGreenLeds();
     ec4:	0e 94 94 3f 	call	0x7f28	; 0x7f28 <turnOnGreenLeds>
							updateRedLed(pwm_red);
     ec8:	80 91 0c 02 	lds	r24, 0x020C
     ecc:	0e 94 a2 3e 	call	0x7d44	; 0x7d44 <updateRedLed>
							updateGreenLed(pwm_green);
     ed0:	80 91 0d 02 	lds	r24, 0x020D
     ed4:	0e 94 b6 3e 	call	0x7d6c	; 0x7d6c <updateGreenLed>
							updateBlueLed(pwm_blue);
     ed8:	80 91 0e 02 	lds	r24, 0x020E
     edc:	0e 94 ca 3e 	call	0x7d94	; 0x7d94 <updateBlueLed>
							LED_IR1_LOW;
     ee0:	44 98       	cbi	0x08, 4	; 8
							LED_IR2_LOW;
     ee2:	45 98       	cbi	0x08, 5	; 8
							
							if(getDataNow) {
     ee4:	80 91 36 04 	lds	r24, 0x0436
     ee8:	88 23       	and	r24, r24
     eea:	09 f4       	brne	.+2      	; 0xeee <main+0xd12>
     eec:	08 ce       	rjmp	.-1008   	; 0xafe <main+0x922>
								getDataNow = 0;	
     eee:	10 92 36 04 	sts	0x0436, r1
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     ef2:	80 91 69 02 	lds	r24, 0x0269
     ef6:	61 e0       	ldi	r22, 0x01	; 1
     ef8:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     efc:	80 91 6a 02 	lds	r24, 0x026A
     f00:	61 e0       	ldi	r22, 0x01	; 1
     f02:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     f06:	80 91 39 02 	lds	r24, 0x0239
     f0a:	90 91 3a 02 	lds	r25, 0x023A
     f0e:	61 e0       	ldi	r22, 0x01	; 1
     f10:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     f14:	80 91 39 02 	lds	r24, 0x0239
     f18:	90 91 3a 02 	lds	r25, 0x023A
     f1c:	89 2f       	mov	r24, r25
     f1e:	61 e0       	ldi	r22, 0x01	; 1
     f20:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     f24:	80 91 6b 02 	lds	r24, 0x026B
     f28:	61 e0       	ldi	r22, 0x01	; 1
     f2a:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     f2e:	80 91 6c 02 	lds	r24, 0x026C
     f32:	61 e0       	ldi	r22, 0x01	; 1
     f34:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     f38:	80 91 3d 02 	lds	r24, 0x023D
     f3c:	90 91 3e 02 	lds	r25, 0x023E
     f40:	61 e0       	ldi	r22, 0x01	; 1
     f42:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     f46:	80 91 3d 02 	lds	r24, 0x023D
     f4a:	90 91 3e 02 	lds	r25, 0x023E
     f4e:	89 2f       	mov	r24, r25
     f50:	61 e0       	ldi	r22, 0x01	; 1
     f52:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     f56:	80 91 6d 02 	lds	r24, 0x026D
     f5a:	61 e0       	ldi	r22, 0x01	; 1
     f5c:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     f60:	80 91 6e 02 	lds	r24, 0x026E
     f64:	61 e0       	ldi	r22, 0x01	; 1
     f66:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     f6a:	80 91 41 02 	lds	r24, 0x0241
     f6e:	90 91 42 02 	lds	r25, 0x0242
     f72:	61 e0       	ldi	r22, 0x01	; 1
     f74:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     f78:	80 91 41 02 	lds	r24, 0x0241
     f7c:	90 91 42 02 	lds	r25, 0x0242
     f80:	89 2f       	mov	r24, r25
     f82:	61 e0       	ldi	r22, 0x01	; 1
     f84:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     f88:	80 91 6f 02 	lds	r24, 0x026F
     f8c:	61 e0       	ldi	r22, 0x01	; 1
     f8e:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     f92:	80 91 70 02 	lds	r24, 0x0270
     f96:	61 e0       	ldi	r22, 0x01	; 1
     f98:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     f9c:	80 91 45 02 	lds	r24, 0x0245
     fa0:	90 91 46 02 	lds	r25, 0x0246
     fa4:	61 e0       	ldi	r22, 0x01	; 1
     fa6:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     faa:	80 91 45 02 	lds	r24, 0x0245
     fae:	90 91 46 02 	lds	r25, 0x0246
     fb2:	89 2f       	mov	r24, r25
     fb4:	61 e0       	ldi	r22, 0x01	; 1
     fb6:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     fba:	80 91 71 02 	lds	r24, 0x0271
     fbe:	61 e0       	ldi	r22, 0x01	; 1
     fc0:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     fc4:	80 91 72 02 	lds	r24, 0x0272
     fc8:	61 e0       	ldi	r22, 0x01	; 1
     fca:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     fce:	80 91 49 02 	lds	r24, 0x0249
     fd2:	90 91 4a 02 	lds	r25, 0x024A
     fd6:	61 e0       	ldi	r22, 0x01	; 1
     fd8:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     fdc:	80 91 49 02 	lds	r24, 0x0249
     fe0:	90 91 4a 02 	lds	r25, 0x024A
     fe4:	89 2f       	mov	r24, r25
     fe6:	61 e0       	ldi	r22, 0x01	; 1
     fe8:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     fec:	80 91 73 02 	lds	r24, 0x0273
     ff0:	61 e0       	ldi	r22, 0x01	; 1
     ff2:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     ff6:	80 91 74 02 	lds	r24, 0x0274
     ffa:	61 e0       	ldi	r22, 0x01	; 1
     ffc:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
    1000:	80 91 4d 02 	lds	r24, 0x024D
    1004:	90 91 4e 02 	lds	r25, 0x024E
    1008:	61 e0       	ldi	r22, 0x01	; 1
    100a:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
    100e:	80 91 4d 02 	lds	r24, 0x024D
    1012:	90 91 4e 02 	lds	r25, 0x024E
    1016:	89 2f       	mov	r24, r25
    1018:	61 e0       	ldi	r22, 0x01	; 1
    101a:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
    101e:	80 91 75 02 	lds	r24, 0x0275
    1022:	61 e0       	ldi	r22, 0x01	; 1
    1024:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
    1028:	80 91 76 02 	lds	r24, 0x0276
    102c:	61 e0       	ldi	r22, 0x01	; 1
    102e:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
    1032:	80 91 51 02 	lds	r24, 0x0251
    1036:	90 91 52 02 	lds	r25, 0x0252
    103a:	61 e0       	ldi	r22, 0x01	; 1
    103c:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
    1040:	80 91 51 02 	lds	r24, 0x0251
    1044:	90 91 52 02 	lds	r25, 0x0252
    1048:	89 2f       	mov	r24, r25
    104a:	61 e0       	ldi	r22, 0x01	; 1
    104c:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
    1050:	80 91 77 02 	lds	r24, 0x0277
    1054:	61 e0       	ldi	r22, 0x01	; 1
    1056:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
    105a:	80 91 78 02 	lds	r24, 0x0278
    105e:	61 e0       	ldi	r22, 0x01	; 1
    1060:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
    1064:	80 91 55 02 	lds	r24, 0x0255
    1068:	90 91 56 02 	lds	r25, 0x0256
    106c:	61 e0       	ldi	r22, 0x01	; 1
    106e:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
    1072:	80 91 55 02 	lds	r24, 0x0255
    1076:	90 91 56 02 	lds	r25, 0x0256
    107a:	89 2f       	mov	r24, r25
    107c:	61 e0       	ldi	r22, 0x01	; 1
    107e:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
    1082:	80 91 79 02 	lds	r24, 0x0279
    1086:	61 e0       	ldi	r22, 0x01	; 1
    1088:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
    108c:	80 91 7a 02 	lds	r24, 0x027A
    1090:	61 e0       	ldi	r22, 0x01	; 1
    1092:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
    1096:	80 91 59 02 	lds	r24, 0x0259
    109a:	90 91 5a 02 	lds	r25, 0x025A
    109e:	61 e0       	ldi	r22, 0x01	; 1
    10a0:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
    10a4:	80 91 59 02 	lds	r24, 0x0259
    10a8:	90 91 5a 02 	lds	r25, 0x025A
    10ac:	89 2f       	mov	r24, r25
    10ae:	61 e0       	ldi	r22, 0x01	; 1
    10b0:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
    10b4:	80 91 7b 02 	lds	r24, 0x027B
    10b8:	61 e0       	ldi	r22, 0x01	; 1
    10ba:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
    10be:	80 91 7c 02 	lds	r24, 0x027C
    10c2:	61 e0       	ldi	r22, 0x01	; 1
    10c4:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
    10c8:	80 91 5d 02 	lds	r24, 0x025D
    10cc:	90 91 5e 02 	lds	r25, 0x025E
    10d0:	61 e0       	ldi	r22, 0x01	; 1
    10d2:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
    10d6:	80 91 5d 02 	lds	r24, 0x025D
    10da:	90 91 5e 02 	lds	r25, 0x025E
    10de:	89 2f       	mov	r24, r25
    10e0:	61 e0       	ldi	r22, 0x01	; 1
    10e2:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
    10e6:	80 91 7d 02 	lds	r24, 0x027D
    10ea:	61 e0       	ldi	r22, 0x01	; 1
    10ec:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
    10f0:	80 91 7e 02 	lds	r24, 0x027E
    10f4:	61 e0       	ldi	r22, 0x01	; 1
    10f6:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
    10fa:	80 91 61 02 	lds	r24, 0x0261
    10fe:	90 91 62 02 	lds	r25, 0x0262
    1102:	61 e0       	ldi	r22, 0x01	; 1
    1104:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
    1108:	80 91 61 02 	lds	r24, 0x0261
    110c:	90 91 62 02 	lds	r25, 0x0262
    1110:	89 2f       	mov	r24, r25
    1112:	61 e0       	ldi	r22, 0x01	; 1
    1114:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
    1118:	80 91 7f 02 	lds	r24, 0x027F
    111c:	61 e0       	ldi	r22, 0x01	; 1
    111e:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
    1122:	80 91 80 02 	lds	r24, 0x0280
    1126:	61 e0       	ldi	r22, 0x01	; 1
    1128:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
    112c:	80 91 65 02 	lds	r24, 0x0265
    1130:	90 91 66 02 	lds	r25, 0x0266
    1134:	61 e0       	ldi	r22, 0x01	; 1
    1136:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
    113a:	80 91 65 02 	lds	r24, 0x0265
    113e:	90 91 66 02 	lds	r25, 0x0266
    1142:	89 2f       	mov	r24, r25
    1144:	61 e0       	ldi	r22, 0x01	; 1
    1146:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
								}
								usart0Transmit(accX&0xFF,1);
    114a:	80 91 3c 04 	lds	r24, 0x043C
    114e:	61 e0       	ldi	r22, 0x01	; 1
    1150:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
								usart0Transmit(accX>>8,1);
    1154:	80 91 3d 04 	lds	r24, 0x043D
    1158:	61 e0       	ldi	r22, 0x01	; 1
    115a:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
								usart0Transmit(accY&0xFF,1);
    115e:	80 91 3e 04 	lds	r24, 0x043E
    1162:	61 e0       	ldi	r22, 0x01	; 1
    1164:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
								usart0Transmit(accY>>8,1);
    1168:	80 91 3f 04 	lds	r24, 0x043F
    116c:	61 e0       	ldi	r22, 0x01	; 1
    116e:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
								usart0Transmit(accZ&0xFF,1);
    1172:	80 91 40 04 	lds	r24, 0x0440
    1176:	61 e0       	ldi	r22, 0x01	; 1
    1178:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
								usart0Transmit(accZ>>8,1);
    117c:	80 91 41 04 	lds	r24, 0x0441
    1180:	61 e0       	ldi	r22, 0x01	; 1
    1182:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
								usart0Transmit(irCommand,1);
    1186:	80 91 37 04 	lds	r24, 0x0437
    118a:	61 e0       	ldi	r22, 0x01	; 1
    118c:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
								usart0Transmit(currentSelector,1);
    1190:	80 91 5c 04 	lds	r24, 0x045C
    1194:	61 e0       	ldi	r22, 0x01	; 1
    1196:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
								usart0Transmit(BUTTON0,1);
    119a:	80 91 03 01 	lds	r24, 0x0103
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	80 72       	andi	r24, 0x20	; 32
    11a2:	90 70       	andi	r25, 0x00	; 0
    11a4:	95 95       	asr	r25
    11a6:	87 95       	ror	r24
    11a8:	95 95       	asr	r25
    11aa:	87 95       	ror	r24
    11ac:	95 95       	asr	r25
    11ae:	87 95       	ror	r24
    11b0:	95 95       	asr	r25
    11b2:	87 95       	ror	r24
    11b4:	95 95       	asr	r25
    11b6:	87 95       	ror	r24
    11b8:	61 e0       	ldi	r22, 0x01	; 1
    11ba:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
								usart0Transmit(rfFlags,1);
    11be:	80 91 27 03 	lds	r24, 0x0327
    11c2:	61 e0       	ldi	r22, 0x01	; 1
    11c4:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
								usart0Transmit(((unsigned int)(theta*573.0))&0xFF,1);	// radians to degrees => 573 = 1800/PI
    11c8:	60 91 7f 04 	lds	r22, 0x047F
    11cc:	70 91 80 04 	lds	r23, 0x0480
    11d0:	80 91 81 04 	lds	r24, 0x0481
    11d4:	90 91 82 04 	lds	r25, 0x0482
    11d8:	20 e0       	ldi	r18, 0x00	; 0
    11da:	30 e4       	ldi	r19, 0x40	; 64
    11dc:	4f e0       	ldi	r20, 0x0F	; 15
    11de:	54 e4       	ldi	r21, 0x44	; 68
    11e0:	0e 94 aa 55 	call	0xab54	; 0xab54 <__mulsf3>
    11e4:	0e 94 63 54 	call	0xa8c6	; 0xa8c6 <__fixunssfsi>
    11e8:	86 2f       	mov	r24, r22
    11ea:	61 e0       	ldi	r22, 0x01	; 1
    11ec:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
								usart0Transmit(((unsigned int)(theta*573.0))>>8,1);
    11f0:	60 91 7f 04 	lds	r22, 0x047F
    11f4:	70 91 80 04 	lds	r23, 0x0480
    11f8:	80 91 81 04 	lds	r24, 0x0481
    11fc:	90 91 82 04 	lds	r25, 0x0482
    1200:	20 e0       	ldi	r18, 0x00	; 0
    1202:	30 e4       	ldi	r19, 0x40	; 64
    1204:	4f e0       	ldi	r20, 0x0F	; 15
    1206:	54 e4       	ldi	r21, 0x44	; 68
    1208:	0e 94 aa 55 	call	0xab54	; 0xab54 <__mulsf3>
    120c:	0e 94 63 54 	call	0xa8c6	; 0xa8c6 <__fixunssfsi>
    1210:	87 2f       	mov	r24, r23
    1212:	61 e0       	ldi	r22, 0x01	; 1
    1214:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
								usart0Transmit(((unsigned int)xPos)&0xFF,1);
    1218:	60 91 87 04 	lds	r22, 0x0487
    121c:	70 91 88 04 	lds	r23, 0x0488
    1220:	80 91 89 04 	lds	r24, 0x0489
    1224:	90 91 8a 04 	lds	r25, 0x048A
    1228:	0e 94 63 54 	call	0xa8c6	; 0xa8c6 <__fixunssfsi>
    122c:	86 2f       	mov	r24, r22
    122e:	61 e0       	ldi	r22, 0x01	; 1
    1230:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
								usart0Transmit(((unsigned int)xPos)>>8,1);
    1234:	60 91 87 04 	lds	r22, 0x0487
    1238:	70 91 88 04 	lds	r23, 0x0488
    123c:	80 91 89 04 	lds	r24, 0x0489
    1240:	90 91 8a 04 	lds	r25, 0x048A
    1244:	0e 94 63 54 	call	0xa8c6	; 0xa8c6 <__fixunssfsi>
    1248:	87 2f       	mov	r24, r23
    124a:	61 e0       	ldi	r22, 0x01	; 1
    124c:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
								usart0Transmit(((unsigned int)yPos)&0xFF,1);
    1250:	60 91 8b 04 	lds	r22, 0x048B
    1254:	70 91 8c 04 	lds	r23, 0x048C
    1258:	80 91 8d 04 	lds	r24, 0x048D
    125c:	90 91 8e 04 	lds	r25, 0x048E
    1260:	0e 94 63 54 	call	0xa8c6	; 0xa8c6 <__fixunssfsi>
    1264:	86 2f       	mov	r24, r22
    1266:	61 e0       	ldi	r22, 0x01	; 1
    1268:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
								usart0Transmit(((unsigned int)yPos)>>8,1);
    126c:	60 91 8b 04 	lds	r22, 0x048B
    1270:	70 91 8c 04 	lds	r23, 0x048C
    1274:	80 91 8d 04 	lds	r24, 0x048D
    1278:	90 91 8e 04 	lds	r25, 0x048E
    127c:	0e 94 63 54 	call	0xa8c6	; 0xa8c6 <__fixunssfsi>
    1280:	87 2f       	mov	r24, r23
    1282:	61 e0       	ldi	r22, 0x01	; 1
    1284:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)&0xFF,1);
    1288:	60 91 e5 02 	lds	r22, 0x02E5
    128c:	70 91 e6 02 	lds	r23, 0x02E6
    1290:	80 91 e7 02 	lds	r24, 0x02E7
    1294:	90 91 e8 02 	lds	r25, 0x02E8
    1298:	0e 94 5e 54 	call	0xa8bc	; 0xa8bc <__fixsfsi>
    129c:	86 2f       	mov	r24, r22
    129e:	61 e0       	ldi	r22, 0x01	; 1
    12a0:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)>>8,1);
    12a4:	60 91 e5 02 	lds	r22, 0x02E5
    12a8:	70 91 e6 02 	lds	r23, 0x02E6
    12ac:	80 91 e7 02 	lds	r24, 0x02E7
    12b0:	90 91 e8 02 	lds	r25, 0x02E8
    12b4:	0e 94 5e 54 	call	0xa8bc	; 0xa8bc <__fixsfsi>
    12b8:	87 2f       	mov	r24, r23
    12ba:	61 e0       	ldi	r22, 0x01	; 1
    12bc:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)>>16,1);
    12c0:	60 91 e5 02 	lds	r22, 0x02E5
    12c4:	70 91 e6 02 	lds	r23, 0x02E6
    12c8:	80 91 e7 02 	lds	r24, 0x02E7
    12cc:	90 91 e8 02 	lds	r25, 0x02E8
    12d0:	0e 94 5e 54 	call	0xa8bc	; 0xa8bc <__fixsfsi>
    12d4:	61 e0       	ldi	r22, 0x01	; 1
    12d6:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)>>24,1);
    12da:	60 91 e5 02 	lds	r22, 0x02E5
    12de:	70 91 e6 02 	lds	r23, 0x02E6
    12e2:	80 91 e7 02 	lds	r24, 0x02E7
    12e6:	90 91 e8 02 	lds	r25, 0x02E8
    12ea:	0e 94 5e 54 	call	0xa8bc	; 0xa8bc <__fixsfsi>
    12ee:	89 2f       	mov	r24, r25
    12f0:	61 e0       	ldi	r22, 0x01	; 1
    12f2:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)&0xFF,1);
    12f6:	60 91 e1 02 	lds	r22, 0x02E1
    12fa:	70 91 e2 02 	lds	r23, 0x02E2
    12fe:	80 91 e3 02 	lds	r24, 0x02E3
    1302:	90 91 e4 02 	lds	r25, 0x02E4
    1306:	0e 94 5e 54 	call	0xa8bc	; 0xa8bc <__fixsfsi>
    130a:	86 2f       	mov	r24, r22
    130c:	61 e0       	ldi	r22, 0x01	; 1
    130e:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)>>8,1);
    1312:	60 91 e1 02 	lds	r22, 0x02E1
    1316:	70 91 e2 02 	lds	r23, 0x02E2
    131a:	80 91 e3 02 	lds	r24, 0x02E3
    131e:	90 91 e4 02 	lds	r25, 0x02E4
    1322:	0e 94 5e 54 	call	0xa8bc	; 0xa8bc <__fixsfsi>
    1326:	87 2f       	mov	r24, r23
    1328:	61 e0       	ldi	r22, 0x01	; 1
    132a:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)>>16,1);
    132e:	60 91 e1 02 	lds	r22, 0x02E1
    1332:	70 91 e2 02 	lds	r23, 0x02E2
    1336:	80 91 e3 02 	lds	r24, 0x02E3
    133a:	90 91 e4 02 	lds	r25, 0x02E4
    133e:	0e 94 5e 54 	call	0xa8bc	; 0xa8bc <__fixsfsi>
    1342:	61 e0       	ldi	r22, 0x01	; 1
    1344:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)>>24,1);
    1348:	60 91 e1 02 	lds	r22, 0x02E1
    134c:	70 91 e2 02 	lds	r23, 0x02E2
    1350:	80 91 e3 02 	lds	r24, 0x02E3
    1354:	90 91 e4 02 	lds	r25, 0x02E4
    1358:	0e 94 5e 54 	call	0xa8bc	; 0xa8bc <__fixsfsi>
    135c:	89 2f       	mov	r24, r25
    135e:	61 e0       	ldi	r22, 0x01	; 1
    1360:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
								usart0Transmit(pwm_left_desired>>2, 1);
    1364:	80 91 0b 03 	lds	r24, 0x030B
    1368:	90 91 0c 03 	lds	r25, 0x030C
    136c:	95 95       	asr	r25
    136e:	87 95       	ror	r24
    1370:	95 95       	asr	r25
    1372:	87 95       	ror	r24
    1374:	61 e0       	ldi	r22, 0x01	; 1
    1376:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
								usart0Transmit(pwm_right_desired>>2, 1);
    137a:	80 91 09 03 	lds	r24, 0x0309
    137e:	90 91 0a 03 	lds	r25, 0x030A
    1382:	95 95       	asr	r25
    1384:	87 95       	ror	r24
    1386:	95 95       	asr	r25
    1388:	87 95       	ror	r24
    138a:	61 e0       	ldi	r22, 0x01	; 1
    138c:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
    1390:	80 91 5c 04 	lds	r24, 0x045C
    1394:	2c e0       	ldi	r18, 0x0C	; 12
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	3e 83       	std	Y+6, r19	; 0x06
    139a:	2d 83       	std	Y+5, r18	; 0x05
    139c:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <main+0x110>
							demoStartTime = getTime100MicroSec();
							demoState = 1;
							break;

						case 1:
							if((getTime100MicroSec()-demoStartTime) >= (PAUSE_2_SEC)) {
    13a0:	0e 94 35 22 	call	0x446a	; 0x446a <getTime100MicroSec>
    13a4:	9b 01       	movw	r18, r22
    13a6:	ac 01       	movw	r20, r24
    13a8:	80 91 64 04 	lds	r24, 0x0464
    13ac:	90 91 65 04 	lds	r25, 0x0465
    13b0:	a0 91 66 04 	lds	r26, 0x0466
    13b4:	b0 91 67 04 	lds	r27, 0x0467
    13b8:	28 1b       	sub	r18, r24
    13ba:	39 0b       	sbc	r19, r25
    13bc:	4a 0b       	sbc	r20, r26
    13be:	5b 0b       	sbc	r21, r27
    13c0:	2e 31       	cpi	r18, 0x1E	; 30
    13c2:	8b e4       	ldi	r24, 0x4B	; 75
    13c4:	38 07       	cpc	r19, r24
    13c6:	80 e0       	ldi	r24, 0x00	; 0
    13c8:	48 07       	cpc	r20, r24
    13ca:	80 e0       	ldi	r24, 0x00	; 0
    13cc:	58 07       	cpc	r21, r24
    13ce:	08 f4       	brcc	.+2      	; 0x13d2 <main+0x11f6>
    13d0:	96 cb       	rjmp	.-2260   	; 0xafe <main+0x922>
								demoState = 2;
    13d2:	92 e0       	ldi	r25, 0x02	; 2
    13d4:	90 93 60 04 	sts	0x0460, r25
    13d8:	80 91 5c 04 	lds	r24, 0x045C
    13dc:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <main+0x110>
							setLeftSpeed(20);
							setRightSpeed(20);
							demoState = 1;
							break;
						case 1: // motion					
							if((getTime100MicroSec()-demoStartTime) >= (PAUSE_4_SEC)) {
    13e0:	0e 94 35 22 	call	0x446a	; 0x446a <getTime100MicroSec>
    13e4:	9b 01       	movw	r18, r22
    13e6:	ac 01       	movw	r20, r24
    13e8:	80 91 64 04 	lds	r24, 0x0464
    13ec:	90 91 65 04 	lds	r25, 0x0465
    13f0:	a0 91 66 04 	lds	r26, 0x0466
    13f4:	b0 91 67 04 	lds	r27, 0x0467
    13f8:	28 1b       	sub	r18, r24
    13fa:	39 0b       	sbc	r19, r25
    13fc:	4a 0b       	sbc	r20, r26
    13fe:	5b 0b       	sbc	r21, r27
    1400:	2e 33       	cpi	r18, 0x3E	; 62
    1402:	a6 e9       	ldi	r26, 0x96	; 150
    1404:	3a 07       	cpc	r19, r26
    1406:	a0 e0       	ldi	r26, 0x00	; 0
    1408:	4a 07       	cpc	r20, r26
    140a:	a0 e0       	ldi	r26, 0x00	; 0
    140c:	5a 07       	cpc	r21, r26
    140e:	10 f4       	brcc	.+4      	; 0x1414 <main+0x1238>
    1410:	0c 94 04 02 	jmp	0x408	; 0x408 <main+0x22c>
								setRightSpeed(0);
    1414:	80 e0       	ldi	r24, 0x00	; 0
    1416:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <setRightSpeed>
								setLeftSpeed(0);								
    141a:	80 e0       	ldi	r24, 0x00	; 0
    141c:	0e 94 44 2a 	call	0x5488	; 0x5488 <setLeftSpeed>
								demoStartTime = getTime100MicroSec();
    1420:	0e 94 35 22 	call	0x446a	; 0x446a <getTime100MicroSec>
    1424:	60 93 64 04 	sts	0x0464, r22
    1428:	70 93 65 04 	sts	0x0465, r23
    142c:	80 93 66 04 	sts	0x0466, r24
    1430:	90 93 67 04 	sts	0x0467, r25
								demoState = 2;							
    1434:	b2 e0       	ldi	r27, 0x02	; 2
    1436:	b0 93 60 04 	sts	0x0460, r27
    143a:	0c 94 04 02 	jmp	0x408	; 0x408 <main+0x22c>
			readBatteryLevel();				// the battery level is updated every two seconds
             		
			if(currentSelector==4 || currentSelector==5) {
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption

				switch(rgbState) {
    143e:	82 30       	cpi	r24, 0x02	; 2
    1440:	09 f0       	breq	.+2      	; 0x1444 <main+0x1268>
    1442:	e0 ca       	rjmp	.-2624   	; 0xa04 <main+0x828>
						pwm_green = 255 - currRand;
						rgbState = 2;
						break;

					case 2:
						pwm_blue = 255 - currRand;
    1444:	8a 2d       	mov	r24, r10
    1446:	80 95       	com	r24
    1448:	80 93 0e 02 	sts	0x020E, r24
						rgbState = 0;
    144c:	10 92 2c 03 	sts	0x032C, r1
						break;
    1450:	d9 ca       	rjmp	.-2638   	; 0xa04 <main+0x828>
						break;

					case 2: // led is off
							// transmission: continuously send my robot id to tell the next robot I turned off the led
							// reception: listen for my robot id and then turn on the led				
						irCommTasks();
    1452:	0e 94 b4 47 	call	0x8f68	; 0x8f68 <irCommTasks>
						if(irCommDataSent()==1) {
    1456:	0e 94 05 53 	call	0xa60a	; 0xa60a <irCommDataSent>
    145a:	81 30       	cpi	r24, 0x01	; 1
    145c:	09 f4       	brne	.+2      	; 0x1460 <main+0x1284>
    145e:	85 c3       	rjmp	.+1802   	; 0x1b6a <main+0x198e>
							irCommSendData(irCommRobotId);							
						}
						if(irCommDataAvailable()==1) {
    1460:	0e 94 0d 53 	call	0xa61a	; 0xa61a <irCommDataAvailable>
    1464:	81 30       	cpi	r24, 0x01	; 1
    1466:	09 f0       	breq	.+2      	; 0x146a <main+0x128e>
    1468:	4a cb       	rjmp	.-2412   	; 0xafe <main+0x922>
							if(irCommLedToggle==0) {
    146a:	90 91 ed 04 	lds	r25, 0x04ED
    146e:	99 23       	and	r25, r25
    1470:	09 f0       	breq	.+2      	; 0x1474 <main+0x1298>
    1472:	75 c3       	rjmp	.+1770   	; 0x1b5e <main+0x1982>
								irCommLedToggle = 1;
    1474:	80 93 ed 04 	sts	0x04ED, r24
								updateRedLed(255);
    1478:	8f ef       	ldi	r24, 0xFF	; 255
    147a:	0e 94 a2 3e 	call	0x7d44	; 0x7d44 <updateRedLed>
							} else {
								irCommLedToggle = 0;
								updateRedLed(235);
							}
							i = irCommReadData();
    147e:	0e 94 10 53 	call	0xa620	; 0xa620 <irCommReadData>
    1482:	48 2f       	mov	r20, r24
    1484:	50 e0       	ldi	r21, 0x00	; 0
    1486:	5e 83       	std	Y+6, r21	; 0x06
    1488:	4d 83       	std	Y+5, r20	; 0x05
							if(i == irCommRobotId) {
    148a:	80 91 eb 04 	lds	r24, 0x04EB
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	84 17       	cp	r24, r20
    1492:	95 07       	cpc	r25, r21
    1494:	09 f0       	breq	.+2      	; 0x1498 <main+0x12bc>
    1496:	33 cb       	rjmp	.-2458   	; 0xafe <main+0x922>
								updateBlueLed(255);
    1498:	8f ef       	ldi	r24, 0xFF	; 255
    149a:	0e 94 ca 3e 	call	0x7d94	; 0x7d94 <updateBlueLed>
								updateRedLed(255);
    149e:	8f ef       	ldi	r24, 0xFF	; 255
    14a0:	0e 94 a2 3e 	call	0x7d44	; 0x7d44 <updateRedLed>
								updateGreenLed(128);
    14a4:	80 e8       	ldi	r24, 0x80	; 128
    14a6:	0e 94 b6 3e 	call	0x7d6c	; 0x7d6c <updateGreenLed>
								irCommSendData(0xFF);
    14aa:	8f ef       	ldi	r24, 0xFF	; 255
    14ac:	0e 94 fc 52 	call	0xa5f8	; 0xa5f8 <irCommSendData>
								demoState = 3;					
    14b0:	53 e0       	ldi	r21, 0x03	; 3
    14b2:	50 93 60 04 	sts	0x0460, r21
    14b6:	80 91 5c 04 	lds	r24, 0x045C
    14ba:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <main+0x110>

					case 1: // led is on
							// transmission: continuously send the next robot id to tell him to turn on the led
							// reception: listen for 0xFF and then turn off the led; when I receive 0xFF it means the next robot has
							// received its id, thus it has turned on its led
						irCommTasks();
    14be:	0e 94 b4 47 	call	0x8f68	; 0x8f68 <irCommTasks>
						if(irCommDataSent()==1) {
    14c2:	0e 94 05 53 	call	0xa60a	; 0xa60a <irCommDataSent>
    14c6:	81 30       	cpi	r24, 0x01	; 1
    14c8:	09 f4       	brne	.+2      	; 0x14cc <main+0x12f0>
    14ca:	b8 c2       	rjmp	.+1392   	; 0x1a3c <main+0x1860>
								irCommSendData(irCommRobotId+1);
							} else {
								irCommSendData(0x00);
							}							
						}
						if(irCommDataAvailable()==1) {
    14cc:	0e 94 0d 53 	call	0xa61a	; 0xa61a <irCommDataAvailable>
    14d0:	81 30       	cpi	r24, 0x01	; 1
    14d2:	09 f0       	breq	.+2      	; 0x14d6 <main+0x12fa>
    14d4:	14 cb       	rjmp	.-2520   	; 0xafe <main+0x922>
							if(irCommLedToggle==0) {
    14d6:	90 91 ed 04 	lds	r25, 0x04ED
    14da:	99 23       	and	r25, r25
    14dc:	09 f0       	breq	.+2      	; 0x14e0 <main+0x1304>
    14de:	4a c3       	rjmp	.+1684   	; 0x1b74 <main+0x1998>
								irCommLedToggle = 1;
    14e0:	80 93 ed 04 	sts	0x04ED, r24
								updateBlueLed(255);
    14e4:	8f ef       	ldi	r24, 0xFF	; 255
    14e6:	0e 94 ca 3e 	call	0x7d94	; 0x7d94 <updateBlueLed>
								updateRedLed(255);
    14ea:	8f ef       	ldi	r24, 0xFF	; 255
    14ec:	0e 94 a2 3e 	call	0x7d44	; 0x7d44 <updateRedLed>
								updateGreenLed(128);
    14f0:	80 e8       	ldi	r24, 0x80	; 128
    14f2:	0e 94 b6 3e 	call	0x7d6c	; 0x7d6c <updateGreenLed>
								irCommLedToggle = 0;
								updateBlueLed(255);
								updateRedLed(255);
								updateGreenLed(235);
							}
							i = irCommReadData();
    14f6:	0e 94 10 53 	call	0xa620	; 0xa620 <irCommReadData>
    14fa:	28 2f       	mov	r18, r24
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	3e 83       	std	Y+6, r19	; 0x06
    1500:	2d 83       	std	Y+5, r18	; 0x05
							if(i == 0xFF) {
    1502:	2f 3f       	cpi	r18, 0xFF	; 255
    1504:	31 05       	cpc	r19, r1
    1506:	09 f0       	breq	.+2      	; 0x150a <main+0x132e>
    1508:	fa ca       	rjmp	.-2572   	; 0xafe <main+0x922>
								demoState = 2;
    150a:	32 e0       	ldi	r19, 0x02	; 2
    150c:	30 93 60 04 	sts	0x0460, r19
								updateBlueLed(255);		
    1510:	8f ef       	ldi	r24, 0xFF	; 255
    1512:	0e 94 ca 3e 	call	0x7d94	; 0x7d94 <updateBlueLed>
								updateRedLed(255);
    1516:	8f ef       	ldi	r24, 0xFF	; 255
    1518:	0e 94 a2 3e 	call	0x7d44	; 0x7d44 <updateRedLed>
								updateGreenLed(255);		
    151c:	8f ef       	ldi	r24, 0xFF	; 255
    151e:	0e 94 b6 3e 	call	0x7d6c	; 0x7d6c <updateGreenLed>
    1522:	80 91 5c 04 	lds	r24, 0x045C
    1526:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <main+0x110>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
    152a:	81 30       	cpi	r24, 0x01	; 1
    152c:	11 f0       	breq	.+4      	; 0x1532 <main+0x1356>
    152e:	0c 94 46 02 	jmp	0x48c	; 0x48c <main+0x2b0>
							//pwm_green = 255;
							//pwm_blue = 255;
							break;

						case 1:	// search for a line
							turnOffGreenLeds();
    1532:	0e 94 7b 3f 	call	0x7ef6	; 0x7ef6 <turnOffGreenLeds>
							GREEN_LED2_ON;
    1536:	80 91 0b 01 	lds	r24, 0x010B
    153a:	8b 7f       	andi	r24, 0xFB	; 251
    153c:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED3_ON;
							outOfLine = 0;
    1540:	10 92 62 04 	sts	0x0462, r1
							enableObstacleAvoidance();
    1544:	0e 94 57 3e 	call	0x7cae	; 0x7cae <enableObstacleAvoidance>
							setRightSpeed(15);
    1548:	8f e0       	ldi	r24, 0x0F	; 15
    154a:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <setRightSpeed>
							setLeftSpeed(15);
    154e:	8f e0       	ldi	r24, 0x0F	; 15
    1550:	0e 94 44 2a 	call	0x5488	; 0x5488 <setLeftSpeed>
							if(proximityResult[9]<LINE_IN_THR || proximityResult[10]<LINE_IN_THR || proximityResult[8]<LINE_IN_THR || proximityResult[11]<LINE_IN_THR) {
    1554:	80 91 7b 02 	lds	r24, 0x027B
    1558:	90 91 7c 02 	lds	r25, 0x027C
    155c:	a1 e0       	ldi	r26, 0x01	; 1
    155e:	80 39       	cpi	r24, 0x90	; 144
    1560:	9a 07       	cpc	r25, r26
    1562:	0c f4       	brge	.+2      	; 0x1566 <main+0x138a>
    1564:	a4 c1       	rjmp	.+840    	; 0x18ae <main+0x16d2>
    1566:	80 91 7d 02 	lds	r24, 0x027D
    156a:	90 91 7e 02 	lds	r25, 0x027E
    156e:	b1 e0       	ldi	r27, 0x01	; 1
    1570:	80 39       	cpi	r24, 0x90	; 144
    1572:	9b 07       	cpc	r25, r27
    1574:	0c f4       	brge	.+2      	; 0x1578 <main+0x139c>
    1576:	9b c1       	rjmp	.+822    	; 0x18ae <main+0x16d2>
    1578:	80 91 79 02 	lds	r24, 0x0279
    157c:	90 91 7a 02 	lds	r25, 0x027A
    1580:	e1 e0       	ldi	r30, 0x01	; 1
    1582:	80 39       	cpi	r24, 0x90	; 144
    1584:	9e 07       	cpc	r25, r30
    1586:	0c f4       	brge	.+2      	; 0x158a <main+0x13ae>
    1588:	92 c1       	rjmp	.+804    	; 0x18ae <main+0x16d2>
    158a:	80 91 7f 02 	lds	r24, 0x027F
    158e:	90 91 80 02 	lds	r25, 0x0280
    1592:	f1 e0       	ldi	r31, 0x01	; 1
    1594:	80 39       	cpi	r24, 0x90	; 144
    1596:	9f 07       	cpc	r25, r31
    1598:	0c f4       	brge	.+2      	; 0x159c <main+0x13c0>
    159a:	89 c1       	rjmp	.+786    	; 0x18ae <main+0x16d2>
									demoStartTime = getTime100MicroSec();
									demoState = 2;
									break;
								}
							} else {
								lineFound = 0;
    159c:	10 92 61 04 	sts	0x0461, r1
    15a0:	0c 94 46 02 	jmp	0x48c	; 0x48c <main+0x2b0>

			case 11: 	// sync-react demo using the IR local communication (2 robots only): the robots move around with obstacle avoidance
						// enabled and when they detect each other they try to align towards the same direction rotating in place
				switch(demoState) {
					case 0:
						irCommInit();
    15a4:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <irCommInit>
						demoState = 1;
    15a8:	20 92 60 04 	sts	0x0460, r2
    15ac:	80 91 5c 04 	lds	r24, 0x045C
						break;
    15b0:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <main+0x110>
							demoState = 1;
						}
						break;

					case 3:	// rotate right
						irCommTasks();
    15b4:	0e 94 b4 47 	call	0x8f68	; 0x8f68 <irCommTasks>
						if(theta <= targetAngle) {
    15b8:	60 91 7f 04 	lds	r22, 0x047F
    15bc:	70 91 80 04 	lds	r23, 0x0480
    15c0:	80 91 81 04 	lds	r24, 0x0481
    15c4:	90 91 82 04 	lds	r25, 0x0482
    15c8:	2f 81       	ldd	r18, Y+7	; 0x07
    15ca:	38 85       	ldd	r19, Y+8	; 0x08
    15cc:	49 85       	ldd	r20, Y+9	; 0x09
    15ce:	5a 85       	ldd	r21, Y+10	; 0x0a
    15d0:	0e 94 ef 53 	call	0xa7de	; 0xa7de <__cmpsf2>
    15d4:	18 16       	cp	r1, r24
    15d6:	0c f4       	brge	.+2      	; 0x15da <main+0x13fe>
    15d8:	92 ca       	rjmp	.-2780   	; 0xafe <main+0x922>
							setLeftSpeed(0);
    15da:	80 e0       	ldi	r24, 0x00	; 0
    15dc:	0e 94 44 2a 	call	0x5488	; 0x5488 <setLeftSpeed>
							setRightSpeed(0);
    15e0:	80 e0       	ldi	r24, 0x00	; 0
    15e2:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <setRightSpeed>
							demoState = 2;
    15e6:	82 e0       	ldi	r24, 0x02	; 2
    15e8:	80 93 60 04 	sts	0x0460, r24
							demoStartTime = getTime100MicroSec();
    15ec:	0e 94 35 22 	call	0x446a	; 0x446a <getTime100MicroSec>
    15f0:	60 93 64 04 	sts	0x0464, r22
    15f4:	70 93 65 04 	sts	0x0465, r23
    15f8:	80 93 66 04 	sts	0x0466, r24
    15fc:	90 93 67 04 	sts	0x0467, r25
    1600:	80 91 5c 04 	lds	r24, 0x045C
    1604:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <main+0x110>
						demoState = 2;
						demoStartTime = getTime100MicroSec();
						break;

					case 2:
						irCommTasks();
    1608:	0e 94 b4 47 	call	0x8f68	; 0x8f68 <irCommTasks>
						if(irCommDataSent()==1) {
    160c:	0e 94 05 53 	call	0xa60a	; 0xa60a <irCommDataSent>
    1610:	81 30       	cpi	r24, 0x01	; 1
    1612:	09 f4       	brne	.+2      	; 0x1616 <main+0x143a>
    1614:	2a c3       	rjmp	.+1620   	; 0x1c6a <main+0x1a8e>
							angleDegEncode = (unsigned char)((float)angleDeg*0.7084);
							irCommSendData(angleDegEncode);
						}
						if(irCommDataAvailable()==1) {
    1616:	0e 94 0d 53 	call	0xa61a	; 0xa61a <irCommDataAvailable>
    161a:	81 30       	cpi	r24, 0x01	; 1
    161c:	09 f4       	brne	.+2      	; 0x1620 <main+0x1444>
    161e:	c2 c2       	rjmp	.+1412   	; 0x1ba4 <main+0x19c8>
									demoState = 3;
								}								
							}

						}
						if((getTime100MicroSec()-demoStartTime) >= (PAUSE_5_SEC)) {
    1620:	0e 94 35 22 	call	0x446a	; 0x446a <getTime100MicroSec>
    1624:	9b 01       	movw	r18, r22
    1626:	ac 01       	movw	r20, r24
    1628:	80 91 64 04 	lds	r24, 0x0464
    162c:	90 91 65 04 	lds	r25, 0x0465
    1630:	a0 91 66 04 	lds	r26, 0x0466
    1634:	b0 91 67 04 	lds	r27, 0x0467
    1638:	28 1b       	sub	r18, r24
    163a:	39 0b       	sbc	r19, r25
    163c:	4a 0b       	sbc	r20, r26
    163e:	5b 0b       	sbc	r21, r27
    1640:	2d 3c       	cpi	r18, 0xCD	; 205
    1642:	6b eb       	ldi	r22, 0xBB	; 187
    1644:	36 07       	cpc	r19, r22
    1646:	60 e0       	ldi	r22, 0x00	; 0
    1648:	46 07       	cpc	r20, r22
    164a:	60 e0       	ldi	r22, 0x00	; 0
    164c:	56 07       	cpc	r21, r22
    164e:	08 f4       	brcc	.+2      	; 0x1652 <main+0x1476>
    1650:	56 ca       	rjmp	.-2900   	; 0xafe <main+0x922>
									} else {
										irCommSendData(0xFF);
									}
								} else {
									if(i == (unsigned int)(irCommRobotId-1)) {
										demoState = 1;
    1652:	20 92 60 04 	sts	0x0460, r2
    1656:	80 91 5c 04 	lds	r24, 0x045C
    165a:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <main+0x110>
						pwm_red = 255 - currRand;	
						rgbState = 1;
						break;

					case 1:
						pwm_green = 255 - currRand;
    165e:	8a 2d       	mov	r24, r10
    1660:	80 95       	com	r24
    1662:	80 93 0d 02 	sts	0x020D, r24
						rgbState = 2;
    1666:	62 e0       	ldi	r22, 0x02	; 2
    1668:	60 93 2c 03 	sts	0x032C, r22
						break;
    166c:	cb c9       	rjmp	.-3178   	; 0xa04 <main+0x828>
					}
				} else if(currRand<64) {
					if(pwm_red!=255 && pwm_blue!=255) {
						pwm_green = 255;
					}
				} else if (currRand<96) {
    166e:	a0 e6       	ldi	r26, 0x60	; 96
    1670:	aa 16       	cp	r10, r26
    1672:	b1 04       	cpc	r11, r1
    1674:	08 f0       	brcs	.+2      	; 0x1678 <main+0x149c>
    1676:	61 c8       	rjmp	.-3902   	; 0x73a <main+0x55e>
					if(pwm_red!=255 && pwm_green!=255) {
    1678:	80 91 0c 02 	lds	r24, 0x020C
    167c:	8f 3f       	cpi	r24, 0xFF	; 255
    167e:	09 f4       	brne	.+2      	; 0x1682 <main+0x14a6>
    1680:	5c c8       	rjmp	.-3912   	; 0x73a <main+0x55e>
    1682:	80 91 0d 02 	lds	r24, 0x020D
    1686:	8f 3f       	cpi	r24, 0xFF	; 255
    1688:	09 f4       	brne	.+2      	; 0x168c <main+0x14b0>
    168a:	57 c8       	rjmp	.-3922   	; 0x73a <main+0x55e>
						pwm_blue = 255;
    168c:	10 93 0e 02 	sts	0x020E, r17
    1690:	54 c8       	rjmp	.-3928   	; 0x73a <main+0x55e>
							//pwm_green = 255;
							//pwm_blue = 0;
							break;
						
						case 4: // go back from charger
							turnOffGreenLeds();
    1692:	0e 94 7b 3f 	call	0x7ef6	; 0x7ef6 <turnOffGreenLeds>
							GREEN_LED6_ON;
    1696:	80 91 0b 01 	lds	r24, 0x010B
    169a:	8f 7b       	andi	r24, 0xBF	; 191
    169c:	80 93 0b 01 	sts	0x010B, r24
							GREEN_LED7_ON;
    16a0:	80 91 0b 01 	lds	r24, 0x010B
    16a4:	8f 77       	andi	r24, 0x7F	; 127
    16a6:	80 93 0b 01 	sts	0x010B, r24
							demoEndTime = getTime100MicroSec();
    16aa:	0e 94 35 22 	call	0x446a	; 0x446a <getTime100MicroSec>
    16ae:	9b 01       	movw	r18, r22
    16b0:	ac 01       	movw	r20, r24
    16b2:	60 93 6c 04 	sts	0x046C, r22
    16b6:	70 93 6d 04 	sts	0x046D, r23
    16ba:	80 93 6e 04 	sts	0x046E, r24
    16be:	90 93 6f 04 	sts	0x046F, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_1_SEC)) {
    16c2:	80 91 64 04 	lds	r24, 0x0464
    16c6:	90 91 65 04 	lds	r25, 0x0465
    16ca:	a0 91 66 04 	lds	r26, 0x0466
    16ce:	b0 91 67 04 	lds	r27, 0x0467
    16d2:	28 1b       	sub	r18, r24
    16d4:	39 0b       	sbc	r19, r25
    16d6:	4a 0b       	sbc	r20, r26
    16d8:	5b 0b       	sbc	r21, r27
    16da:	2f 38       	cpi	r18, 0x8F	; 143
    16dc:	f5 e2       	ldi	r31, 0x25	; 37
    16de:	3f 07       	cpc	r19, r31
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	4f 07       	cpc	r20, r31
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	5f 07       	cpc	r21, r31
    16e8:	10 f4       	brcc	.+4      	; 0x16ee <main+0x1512>
    16ea:	0c 94 46 02 	jmp	0x48c	; 0x48c <main+0x2b0>
								setRightSpeed(20);
    16ee:	84 e1       	ldi	r24, 0x14	; 20
    16f0:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <setRightSpeed>
								setLeftSpeed(-20);								
    16f4:	8c ee       	ldi	r24, 0xEC	; 236
    16f6:	0e 94 44 2a 	call	0x5488	; 0x5488 <setLeftSpeed>
								demoStartTime = getTime100MicroSec();
    16fa:	0e 94 35 22 	call	0x446a	; 0x446a <getTime100MicroSec>
    16fe:	60 93 64 04 	sts	0x0464, r22
    1702:	70 93 65 04 	sts	0x0465, r23
    1706:	80 93 66 04 	sts	0x0466, r24
    170a:	90 93 67 04 	sts	0x0467, r25
								demoState = 5;							
    170e:	85 e0       	ldi	r24, 0x05	; 5
    1710:	98 2e       	mov	r9, r24
    1712:	90 92 60 04 	sts	0x0460, r9
    1716:	0c 94 46 02 	jmp	0x48c	; 0x48c <main+0x2b0>
							//pwm_green = 0;
							//pwm_blue = 255;
							break;

						case 2:	// line found, follow it
							turnOffGreenLeds();
    171a:	0e 94 7b 3f 	call	0x7ef6	; 0x7ef6 <turnOffGreenLeds>
							GREEN_LED4_ON;
    171e:	80 91 0b 01 	lds	r24, 0x010B
    1722:	8f 7e       	andi	r24, 0xEF	; 239
    1724:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED5_ON;
							disableObstacleAvoidance();
    1728:	0e 94 5b 3e 	call	0x7cb6	; 0x7cb6 <disableObstacleAvoidance>

							demoEndTime = getTime100MicroSec();
    172c:	0e 94 35 22 	call	0x446a	; 0x446a <getTime100MicroSec>
    1730:	9b 01       	movw	r18, r22
    1732:	ac 01       	movw	r20, r24
    1734:	60 93 6c 04 	sts	0x046C, r22
    1738:	70 93 6d 04 	sts	0x046D, r23
    173c:	80 93 6e 04 	sts	0x046E, r24
    1740:	90 93 6f 04 	sts	0x046F, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {	// the robot seems to be blocked somehow
    1744:	80 91 64 04 	lds	r24, 0x0464
    1748:	90 91 65 04 	lds	r25, 0x0465
    174c:	a0 91 66 04 	lds	r26, 0x0466
    1750:	b0 91 67 04 	lds	r27, 0x0467
    1754:	28 1b       	sub	r18, r24
    1756:	39 0b       	sbc	r19, r25
    1758:	4a 0b       	sbc	r20, r26
    175a:	5b 0b       	sbc	r21, r27
    175c:	23 33       	cpi	r18, 0x33	; 51
    175e:	6f ee       	ldi	r22, 0xEF	; 239
    1760:	36 07       	cpc	r19, r22
    1762:	62 e0       	ldi	r22, 0x02	; 2
    1764:	46 07       	cpc	r20, r22
    1766:	60 e0       	ldi	r22, 0x00	; 0
    1768:	56 07       	cpc	r21, r22
    176a:	08 f0       	brcs	.+2      	; 0x176e <main+0x1592>
    176c:	ce c1       	rjmp	.+924    	; 0x1b0a <main+0x192e>
								demoStartTime = getTime100MicroSec();
								demoState = 4;
								break;
							}

							if(CHARGE_ON) {
    176e:	80 91 03 01 	lds	r24, 0x0103
    1772:	84 ff       	sbrs	r24, 4
    1774:	74 c1       	rjmp	.+744    	; 0x1a5e <main+0x1882>
								outOfLine = 0;
    1776:	10 92 62 04 	sts	0x0462, r1
								chargeContact++;
    177a:	80 91 63 04 	lds	r24, 0x0463
    177e:	8f 5f       	subi	r24, 0xFF	; 255
    1780:	80 93 63 04 	sts	0x0463, r24
								if(chargeContact > 20) {
    1784:	85 31       	cpi	r24, 0x15	; 21
    1786:	08 f0       	brcs	.+2      	; 0x178a <main+0x15ae>
    1788:	b0 c2       	rjmp	.+1376   	; 0x1cea <main+0x1b0e>
    178a:	80 91 7b 02 	lds	r24, 0x027B
    178e:	90 91 7c 02 	lds	r25, 0x027C
								} else {
									outOfLine = 0;
								}
							}
							
							if(proximityResult[8]<LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR && proximityResult[11]>LINE_OUT_THR) {	// left ground is the only within the black line => turn left
    1792:	20 91 79 02 	lds	r18, 0x0279
    1796:	30 91 7a 02 	lds	r19, 0x027A
    179a:	e1 e0       	ldi	r30, 0x01	; 1
    179c:	22 3c       	cpi	r18, 0xC2	; 194
    179e:	3e 07       	cpc	r19, r30
    17a0:	ac f4       	brge	.+42     	; 0x17cc <main+0x15f0>
    17a2:	f1 e0       	ldi	r31, 0x01	; 1
    17a4:	83 3c       	cpi	r24, 0xC3	; 195
    17a6:	9f 07       	cpc	r25, r31
    17a8:	8c f0       	brlt	.+34     	; 0x17cc <main+0x15f0>
    17aa:	40 91 7d 02 	lds	r20, 0x027D
    17ae:	50 91 7e 02 	lds	r21, 0x027E
    17b2:	61 e0       	ldi	r22, 0x01	; 1
    17b4:	43 3c       	cpi	r20, 0xC3	; 195
    17b6:	56 07       	cpc	r21, r22
    17b8:	4c f0       	brlt	.+18     	; 0x17cc <main+0x15f0>
    17ba:	40 91 7f 02 	lds	r20, 0x027F
    17be:	50 91 80 02 	lds	r21, 0x0280
    17c2:	a1 e0       	ldi	r26, 0x01	; 1
    17c4:	43 3c       	cpi	r20, 0xC3	; 195
    17c6:	5a 07       	cpc	r21, r26
    17c8:	0c f0       	brlt	.+2      	; 0x17cc <main+0x15f0>
    17ca:	7c c3       	rjmp	.+1784   	; 0x1ec4 <main+0x1ce8>
								setLeftSpeed(-10);
								setRightSpeed(15);
							} else if(proximityResult[11]<LINE_OUT_THR && proximityResult[8]>LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {	// right ground is the only within the black line => turn right
    17cc:	40 91 7f 02 	lds	r20, 0x027F
    17d0:	50 91 80 02 	lds	r21, 0x0280
    17d4:	b1 e0       	ldi	r27, 0x01	; 1
    17d6:	42 3c       	cpi	r20, 0xC2	; 194
    17d8:	5b 07       	cpc	r21, r27
    17da:	0c f0       	brlt	.+2      	; 0x17de <main+0x1602>
    17dc:	19 c1       	rjmp	.+562    	; 0x1a10 <main+0x1834>
    17de:	e1 e0       	ldi	r30, 0x01	; 1
    17e0:	23 3c       	cpi	r18, 0xC3	; 195
    17e2:	3e 07       	cpc	r19, r30
    17e4:	0c f4       	brge	.+2      	; 0x17e8 <main+0x160c>
    17e6:	14 c1       	rjmp	.+552    	; 0x1a10 <main+0x1834>
    17e8:	f1 e0       	ldi	r31, 0x01	; 1
    17ea:	83 3c       	cpi	r24, 0xC3	; 195
    17ec:	9f 07       	cpc	r25, r31
    17ee:	0c f4       	brge	.+2      	; 0x17f2 <main+0x1616>
    17f0:	14 c1       	rjmp	.+552    	; 0x1a1a <main+0x183e>
    17f2:	80 91 7d 02 	lds	r24, 0x027D
    17f6:	90 91 7e 02 	lds	r25, 0x027E
    17fa:	21 e0       	ldi	r18, 0x01	; 1
    17fc:	83 3c       	cpi	r24, 0xC3	; 195
    17fe:	92 07       	cpc	r25, r18
    1800:	0c f0       	brlt	.+2      	; 0x1804 <main+0x1628>
    1802:	7a c3       	rjmp	.+1780   	; 0x1ef8 <main+0x1d1c>
								setLeftSpeed(15);
								setRightSpeed(-10);
							} else if(proximityResult[9]>LINE_OUT_THR) {	// center left is leaving the line => turn right
								setLeftSpeed(15);
    1804:	8f e0       	ldi	r24, 0x0F	; 15
    1806:	0e 94 44 2a 	call	0x5488	; 0x5488 <setLeftSpeed>
								setRightSpeed(-5);
    180a:	8b ef       	ldi	r24, 0xFB	; 251
    180c:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <setRightSpeed>
    1810:	0c 94 46 02 	jmp	0x48c	; 0x48c <main+0x2b0>
							//pwm_green = 255;
							//pwm_blue = 0;
							break;

						case 3:	// charge for some time
							turnOffGreenLeds();
    1814:	0e 94 7b 3f 	call	0x7ef6	; 0x7ef6 <turnOffGreenLeds>
							GREEN_LED6_ON;
    1818:	80 91 0b 01 	lds	r24, 0x010B
    181c:	8f 7b       	andi	r24, 0xBF	; 191
    181e:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED7_ON;
							demoEndTime = getTime100MicroSec();
    1822:	0e 94 35 22 	call	0x446a	; 0x446a <getTime100MicroSec>
    1826:	9b 01       	movw	r18, r22
    1828:	ac 01       	movw	r20, r24
    182a:	60 93 6c 04 	sts	0x046C, r22
    182e:	70 93 6d 04 	sts	0x046D, r23
    1832:	80 93 6e 04 	sts	0x046E, r24
    1836:	90 93 6f 04 	sts	0x046F, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_30_SEC)) {
    183a:	80 91 64 04 	lds	r24, 0x0464
    183e:	90 91 65 04 	lds	r25, 0x0465
    1842:	a0 91 66 04 	lds	r26, 0x0466
    1846:	b0 91 67 04 	lds	r27, 0x0467
    184a:	28 1b       	sub	r18, r24
    184c:	39 0b       	sbc	r19, r25
    184e:	4a 0b       	sbc	r20, r26
    1850:	5b 0b       	sbc	r21, r27
    1852:	2d 3c       	cpi	r18, 0xCD	; 205
    1854:	66 e6       	ldi	r22, 0x66	; 102
    1856:	36 07       	cpc	r19, r22
    1858:	64 e0       	ldi	r22, 0x04	; 4
    185a:	46 07       	cpc	r20, r22
    185c:	60 e0       	ldi	r22, 0x00	; 0
    185e:	56 07       	cpc	r21, r22
    1860:	08 f4       	brcc	.+2      	; 0x1864 <main+0x1688>
    1862:	a9 c0       	rjmp	.+338    	; 0x19b6 <main+0x17da>
								if(batteryLevel<890) {//860) {	// stay in charge if too much discharged (consider the fact that the robot
    1864:	80 91 cd 02 	lds	r24, 0x02CD
    1868:	90 91 ce 02 	lds	r25, 0x02CE
    186c:	a3 e0       	ldi	r26, 0x03	; 3
    186e:	8a 37       	cpi	r24, 0x7A	; 122
    1870:	9a 07       	cpc	r25, r26
    1872:	08 f4       	brcc	.+2      	; 0x1876 <main+0x169a>
    1874:	ad c0       	rjmp	.+346    	; 0x19d0 <main+0x17f4>
														// is still in charge thus the battery value measured is higher)
									demoStartTime = getTime100MicroSec();
									break;
								} else {
									setRightSpeed(-13);
    1876:	83 ef       	ldi	r24, 0xF3	; 243
    1878:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <setRightSpeed>
									setLeftSpeed(-13);
    187c:	83 ef       	ldi	r24, 0xF3	; 243
    187e:	0e 94 44 2a 	call	0x5488	; 0x5488 <setLeftSpeed>
									demoStartTime = getTime100MicroSec();
    1882:	0e 94 35 22 	call	0x446a	; 0x446a <getTime100MicroSec>
    1886:	60 93 64 04 	sts	0x0464, r22
    188a:	70 93 65 04 	sts	0x0465, r23
    188e:	80 93 66 04 	sts	0x0466, r24
    1892:	90 93 67 04 	sts	0x0467, r25
									demoState = 4;
    1896:	b4 e0       	ldi	r27, 0x04	; 4
    1898:	b0 93 60 04 	sts	0x0460, r27
									break;
    189c:	0c 94 46 02 	jmp	0x48c	; 0x48c <main+0x2b0>
				currRand2 = rand()%128;
				if(currRand2<32) {
					pwm_red = 255;
				} else if(currRand2<64) {
					pwm_green = 255;
				} else if (currRand2<96) {
    18a0:	80 36       	cpi	r24, 0x60	; 96
    18a2:	91 05       	cpc	r25, r1
    18a4:	08 f0       	brcs	.+2      	; 0x18a8 <main+0x16cc>
    18a6:	14 c9       	rjmp	.-3544   	; 0xad0 <main+0x8f4>
					pwm_blue = 255;
    18a8:	10 93 0e 02 	sts	0x020E, r17
    18ac:	11 c9       	rjmp	.-3550   	; 0xad0 <main+0x8f4>
							outOfLine = 0;
							enableObstacleAvoidance();
							setRightSpeed(15);
							setLeftSpeed(15);
							if(proximityResult[9]<LINE_IN_THR || proximityResult[10]<LINE_IN_THR || proximityResult[8]<LINE_IN_THR || proximityResult[11]<LINE_IN_THR) {
								lineFound++;
    18ae:	80 91 61 04 	lds	r24, 0x0461
    18b2:	8f 5f       	subi	r24, 0xFF	; 255
    18b4:	80 93 61 04 	sts	0x0461, r24
								if(lineFound > 10) {
    18b8:	8b 30       	cpi	r24, 0x0B	; 11
    18ba:	10 f4       	brcc	.+4      	; 0x18c0 <main+0x16e4>
    18bc:	0c 94 46 02 	jmp	0x48c	; 0x48c <main+0x2b0>
									outOfLine = 0;
    18c0:	10 92 62 04 	sts	0x0462, r1
									chargeContact = 0;
    18c4:	10 92 63 04 	sts	0x0463, r1
									demoStartTime = getTime100MicroSec();
    18c8:	0e 94 35 22 	call	0x446a	; 0x446a <getTime100MicroSec>
    18cc:	60 93 64 04 	sts	0x0464, r22
    18d0:	70 93 65 04 	sts	0x0465, r23
    18d4:	80 93 66 04 	sts	0x0466, r24
    18d8:	90 93 67 04 	sts	0x0467, r25
									demoState = 2;
    18dc:	92 e0       	ldi	r25, 0x02	; 2
    18de:	99 2e       	mov	r9, r25
    18e0:	90 92 60 04 	sts	0x0460, r9
									break;
    18e4:	0c 94 46 02 	jmp	0x48c	; 0x48c <main+0x2b0>
							}

							currRand = rand()% 200;
							if(currRand<50) {
								pwm_red = 255;
							} else if(currRand<100) {
    18e8:	94 e6       	ldi	r25, 0x64	; 100
    18ea:	a9 16       	cp	r10, r25
    18ec:	b1 04       	cpc	r11, r1
    18ee:	08 f0       	brcs	.+2      	; 0x18f2 <main+0x1716>
    18f0:	86 c0       	rjmp	.+268    	; 0x19fe <main+0x1822>
								pwm_green = 255;
    18f2:	10 93 0d 02 	sts	0x020D, r17
    18f6:	80 91 0c 02 	lds	r24, 0x020C
    18fa:	de c9       	rjmp	.-3140   	; 0xcb8 <main+0xadc>

							currRand = rand()% 128;
							if(currRand > 95) {
								pwm_blue = 255;
							} else {
								pwm_blue = currRand;
    18fc:	80 93 0e 02 	sts	0x020E, r24
    1900:	cc c9       	rjmp	.-3176   	; 0xc9a <main+0xabe>

							currRand = rand()% 128;
							if(currRand > 95) {
								pwm_green = 255;
							} else {
								pwm_green = currRand;
    1902:	80 93 0d 02 	sts	0x020D, r24
    1906:	bd c9       	rjmp	.-3206   	; 0xc82 <main+0xaa6>
							turnOffGreenLeds();					
							currRand = rand()% 128;	// 0 to 255 is the maximum, we use 0 to 127 to get brighter colors
							if(currRand > 95) {
								pwm_red = 255;
							} else {
								pwm_red = currRand;
    1908:	80 93 0c 02 	sts	0x020C, r24
    190c:	ae c9       	rjmp	.-3236   	; 0xc6a <main+0xa8e>
					} else if(pwm_left_desired > pwm_intermediate_left_desired) {
						pwm_intermediate_left_desired += speedStep;
						if(pwm_intermediate_left_desired > pwm_left_desired) {
							pwm_intermediate_left_desired = pwm_left_desired;
						}
					} else if(pwm_left_desired < pwm_intermediate_left_desired) {
    190e:	82 17       	cp	r24, r18
    1910:	93 07       	cpc	r25, r19
    1912:	14 f0       	brlt	.+4      	; 0x1918 <main+0x173c>
    1914:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <main+0xe0>
						pwm_intermediate_left_desired -= speedStep;
    1918:	40 91 17 02 	lds	r20, 0x0217
    191c:	24 1b       	sub	r18, r20
    191e:	31 09       	sbc	r19, r1
    1920:	30 93 10 03 	sts	0x0310, r19
    1924:	20 93 0f 03 	sts	0x030F, r18
						if(pwm_intermediate_left_desired < pwm_left_desired) {
    1928:	28 17       	cp	r18, r24
    192a:	39 07       	cpc	r19, r25
    192c:	14 f0       	brlt	.+4      	; 0x1932 <main+0x1756>
    192e:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <main+0xe0>
    1932:	0c 94 44 03 	jmp	0x688	; 0x688 <main+0x4ac>
					} else if(pwm_right_desired > pwm_intermediate_right_desired) {
						pwm_intermediate_right_desired += speedStep;
						if(pwm_intermediate_right_desired > pwm_right_desired) {
							pwm_intermediate_right_desired = pwm_right_desired;
						}
					} else if(pwm_right_desired < pwm_intermediate_right_desired) {
    1936:	82 17       	cp	r24, r18
    1938:	93 07       	cpc	r25, r19
    193a:	14 f0       	brlt	.+4      	; 0x1940 <main+0x1764>
    193c:	0c 94 1f 03 	jmp	0x63e	; 0x63e <main+0x462>
						pwm_intermediate_right_desired -= speedStep;
    1940:	40 91 17 02 	lds	r20, 0x0217
    1944:	24 1b       	sub	r18, r20
    1946:	31 09       	sbc	r19, r1
    1948:	30 93 0e 03 	sts	0x030E, r19
    194c:	20 93 0d 03 	sts	0x030D, r18
						if(pwm_intermediate_right_desired < pwm_right_desired) {
    1950:	28 17       	cp	r18, r24
    1952:	39 07       	cpc	r19, r25
    1954:	14 f0       	brlt	.+4      	; 0x195a <main+0x177e>
    1956:	0c 94 1f 03 	jmp	0x63e	; 0x63e <main+0x462>
    195a:	0c 94 1b 03 	jmp	0x636	; 0x636 <main+0x45a>
								}
								setGreenLed(greenLedState, 1);
								demoEndTime = getTime100MicroSec();											
							}
							if((getTime100MicroSec()-demoStartTime2) >= (PAUSE_2_SEC)) {
								rgbLedState = 1;
    195e:	20 92 7b 04 	sts	0x047B, r2
								demoStartTime2 = getTime100MicroSec();
    1962:	0e 94 35 22 	call	0x446a	; 0x446a <getTime100MicroSec>
    1966:	60 93 68 04 	sts	0x0468, r22
    196a:	70 93 69 04 	sts	0x0469, r23
    196e:	80 93 6a 04 	sts	0x046A, r24
    1972:	90 93 6b 04 	sts	0x046B, r25
    1976:	0c 94 46 02 	jmp	0x48c	; 0x48c <main+0x2b0>
						case 0:							
							pwm_red = 255;
							pwm_green = 255;
							pwm_blue = 255;
							if((getTime100MicroSec()-demoEndTime) >= (PAUSE_100_MSEC)) {
								setGreenLed(greenLedState, 0);
    197a:	80 91 7a 04 	lds	r24, 0x047A
    197e:	60 e0       	ldi	r22, 0x00	; 0
    1980:	0e 94 de 3e 	call	0x7dbc	; 0x7dbc <setGreenLed>
								greenLedState++;
    1984:	80 91 7a 04 	lds	r24, 0x047A
    1988:	8f 5f       	subi	r24, 0xFF	; 255
    198a:	80 93 7a 04 	sts	0x047A, r24
								if(greenLedState > 7) {
    198e:	88 30       	cpi	r24, 0x08	; 8
    1990:	18 f0       	brcs	.+6      	; 0x1998 <main+0x17bc>
									greenLedState = 0;
    1992:	10 92 7a 04 	sts	0x047A, r1
    1996:	80 e0       	ldi	r24, 0x00	; 0
								}
								setGreenLed(greenLedState, 1);
    1998:	61 e0       	ldi	r22, 0x01	; 1
    199a:	0e 94 de 3e 	call	0x7dbc	; 0x7dbc <setGreenLed>
								demoEndTime = getTime100MicroSec();											
    199e:	0e 94 35 22 	call	0x446a	; 0x446a <getTime100MicroSec>
    19a2:	60 93 6c 04 	sts	0x046C, r22
    19a6:	70 93 6d 04 	sts	0x046D, r23
    19aa:	80 93 6e 04 	sts	0x046E, r24
    19ae:	90 93 6f 04 	sts	0x046F, r25
    19b2:	0c 94 2c 02 	jmp	0x458	; 0x458 <main+0x27c>
									demoStartTime = getTime100MicroSec();
									demoState = 4;
									break;
								}
							}
							if(!CHARGE_ON) {
    19b6:	80 91 03 01 	lds	r24, 0x0103
    19ba:	84 ff       	sbrs	r24, 4
    19bc:	02 c0       	rjmp	.+4      	; 0x19c2 <main+0x17e6>
    19be:	0c 94 46 02 	jmp	0x48c	; 0x48c <main+0x2b0>
								chargeContact = 0;
    19c2:	10 92 63 04 	sts	0x0463, r1
								outOfLine = 0;
    19c6:	10 92 62 04 	sts	0x0462, r1
								demoState = 2;
    19ca:	e2 e0       	ldi	r30, 0x02	; 2
    19cc:	e0 93 60 04 	sts	0x0460, r30
								demoStartTime = getTime100MicroSec();
    19d0:	0e 94 35 22 	call	0x446a	; 0x446a <getTime100MicroSec>
    19d4:	60 93 64 04 	sts	0x0464, r22
    19d8:	70 93 65 04 	sts	0x0465, r23
    19dc:	80 93 66 04 	sts	0x0466, r24
    19e0:	90 93 67 04 	sts	0x0467, r25
								break;						
    19e4:	0c 94 46 02 	jmp	0x48c	; 0x48c <main+0x2b0>
						break;

					case 2:
						irCommTasks();
						if(irCommDataSent()==1) {							
							demoState = 1;
    19e8:	80 93 60 04 	sts	0x0460, r24
							if(irCommRxByteExpected<255) {
    19ec:	80 91 19 05 	lds	r24, 0x0519
    19f0:	8f 3f       	cpi	r24, 0xFF	; 255
    19f2:	09 f4       	brne	.+2      	; 0x19f6 <main+0x181a>
    19f4:	52 c1       	rjmp	.+676    	; 0x1c9a <main+0x1abe>
								irCommRxByteExpected++;
    19f6:	8f 5f       	subi	r24, 0xFF	; 255
    19f8:	80 93 19 05 	sts	0x0519, r24
    19fc:	e8 c9       	rjmp	.-3120   	; 0xdce <main+0xbf2>
							currRand = rand()% 200;
							if(currRand<50) {
								pwm_red = 255;
							} else if(currRand<100) {
								pwm_green = 255;
							} else if (currRand<150) {	
    19fe:	a6 e9       	ldi	r26, 0x96	; 150
    1a00:	aa 16       	cp	r10, r26
    1a02:	b1 04       	cpc	r11, r1
    1a04:	10 f4       	brcc	.+4      	; 0x1a0a <main+0x182e>
								pwm_blue = 255;
    1a06:	10 93 0e 02 	sts	0x020E, r17
    1a0a:	80 91 0c 02 	lds	r24, 0x020C
    1a0e:	54 c9       	rjmp	.-3416   	; 0xcb8 <main+0xadc>
								setLeftSpeed(-10);
								setRightSpeed(15);
							} else if(proximityResult[11]<LINE_OUT_THR && proximityResult[8]>LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {	// right ground is the only within the black line => turn right
								setLeftSpeed(15);
								setRightSpeed(-10);
							} else if(proximityResult[9]>LINE_OUT_THR) {	// center left is leaving the line => turn right
    1a10:	31 e0       	ldi	r19, 0x01	; 1
    1a12:	83 3c       	cpi	r24, 0xC3	; 195
    1a14:	93 07       	cpc	r25, r19
    1a16:	0c f0       	brlt	.+2      	; 0x1a1a <main+0x183e>
    1a18:	f5 ce       	rjmp	.-534    	; 0x1804 <main+0x1628>
								setRightSpeed(-5);
								//outOfLine++;
								//if(outOfLine > 250) {
								//	demoState = 1;
								//}
							} else if(proximityResult[10]>LINE_OUT_THR) {	// center right is leaving the lnie => turn left
    1a1a:	80 91 7d 02 	lds	r24, 0x027D
    1a1e:	90 91 7e 02 	lds	r25, 0x027E
    1a22:	41 e0       	ldi	r20, 0x01	; 1
    1a24:	83 3c       	cpi	r24, 0xC3	; 195
    1a26:	94 07       	cpc	r25, r20
    1a28:	0c f4       	brge	.+2      	; 0x1a2c <main+0x1850>
    1a2a:	b4 c0       	rjmp	.+360    	; 0x1b94 <main+0x19b8>
								setLeftSpeed(-5);
    1a2c:	8b ef       	ldi	r24, 0xFB	; 251
    1a2e:	0e 94 44 2a 	call	0x5488	; 0x5488 <setLeftSpeed>
								setRightSpeed(15);
    1a32:	8f e0       	ldi	r24, 0x0F	; 15
    1a34:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <setRightSpeed>
    1a38:	0c 94 46 02 	jmp	0x48c	; 0x48c <main+0x2b0>
							// transmission: continuously send the next robot id to tell him to turn on the led
							// reception: listen for 0xFF and then turn off the led; when I receive 0xFF it means the next robot has
							// received its id, thus it has turned on its led
						irCommTasks();
						if(irCommDataSent()==1) {
							if(irCommRobotId < (irCommRobotsNum-1)) {
    1a3c:	80 91 eb 04 	lds	r24, 0x04EB
    1a40:	48 2f       	mov	r20, r24
    1a42:	50 e0       	ldi	r21, 0x00	; 0
    1a44:	20 91 ec 04 	lds	r18, 0x04EC
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	21 50       	subi	r18, 0x01	; 1
    1a4c:	30 40       	sbci	r19, 0x00	; 0
    1a4e:	42 17       	cp	r20, r18
    1a50:	53 07       	cpc	r21, r19
    1a52:	0c f0       	brlt	.+2      	; 0x1a56 <main+0x187a>
    1a54:	9b c0       	rjmp	.+310    	; 0x1b8c <main+0x19b0>
								irCommSendData(irCommRobotId+1);
    1a56:	8f 5f       	subi	r24, 0xFF	; 255
    1a58:	0e 94 fc 52 	call	0xa5f8	; 0xa5f8 <irCommSendData>
    1a5c:	37 cd       	rjmp	.-1426   	; 0x14cc <main+0x12f0>
									demoStartTime = getTime100MicroSec();
									demoState = 3;
									break;
								}
							} else {
								chargeContact = 0;
    1a5e:	10 92 63 04 	sts	0x0463, r1

								if(proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {
    1a62:	80 91 7b 02 	lds	r24, 0x027B
    1a66:	90 91 7c 02 	lds	r25, 0x027C
    1a6a:	a1 e0       	ldi	r26, 0x01	; 1
    1a6c:	83 3c       	cpi	r24, 0xC3	; 195
    1a6e:	9a 07       	cpc	r25, r26
    1a70:	0c f4       	brge	.+2      	; 0x1a74 <main+0x1898>
    1a72:	60 c0       	rjmp	.+192    	; 0x1b34 <main+0x1958>
    1a74:	20 91 7d 02 	lds	r18, 0x027D
    1a78:	30 91 7e 02 	lds	r19, 0x027E
    1a7c:	b1 e0       	ldi	r27, 0x01	; 1
    1a7e:	23 3c       	cpi	r18, 0xC3	; 195
    1a80:	3b 07       	cpc	r19, r27
    1a82:	0c f4       	brge	.+2      	; 0x1a86 <main+0x18aa>
    1a84:	57 c0       	rjmp	.+174    	; 0x1b34 <main+0x1958>
									outOfLine++;
    1a86:	20 91 62 04 	lds	r18, 0x0462
    1a8a:	2f 5f       	subi	r18, 0xFF	; 255
    1a8c:	20 93 62 04 	sts	0x0462, r18
									if(outOfLine > 250) {
    1a90:	2b 3f       	cpi	r18, 0xFB	; 251
    1a92:	08 f4       	brcc	.+2      	; 0x1a96 <main+0x18ba>
    1a94:	7e ce       	rjmp	.-772    	; 0x1792 <main+0x15b6>
    1a96:	0c 94 8b 03 	jmp	0x716	; 0x716 <main+0x53a>
						irCommTasks();
						if(irCommDataSent()==1) {	
							irCommSendData(irCommRxByteExpected);					
						}
						if(irCommDataAvailable()==1) {							
							i = irCommReadData();
    1a9a:	0e 94 10 53 	call	0xa620	; 0xa620 <irCommReadData>
    1a9e:	e8 2f       	mov	r30, r24
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	fe 83       	std	Y+6, r31	; 0x06
    1aa4:	ed 83       	std	Y+5, r30	; 0x05
							if(i == irCommRxByteExpected) {
    1aa6:	90 91 19 05 	lds	r25, 0x0519
    1aaa:	29 2f       	mov	r18, r25
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	2e 17       	cp	r18, r30
    1ab0:	3f 07       	cpc	r19, r31
    1ab2:	09 f4       	brne	.+2      	; 0x1ab6 <main+0x18da>
    1ab4:	47 c1       	rjmp	.+654    	; 0x1d44 <main+0x1b68>
									} else {
										irCommRxByteExpected = 0;
									}
								}
							} else {
								if(irCommRxByteExpected==7) {
    1ab6:	97 30       	cpi	r25, 0x07	; 7
    1ab8:	09 f4       	brne	.+2      	; 0x1abc <main+0x18e0>
    1aba:	7d c1       	rjmp	.+762    	; 0x1db6 <main+0x1bda>
									if(i==0) {
										irCommRxByteExpected = 0;
										irCommMsgCount = 0;
									}
								} else {
									if(irCommRxByteExpected==(i-1)) {
    1abc:	4d 81       	ldd	r20, Y+5	; 0x05
    1abe:	5e 81       	ldd	r21, Y+6	; 0x06
    1ac0:	41 50       	subi	r20, 0x01	; 1
    1ac2:	50 40       	sbci	r21, 0x00	; 0
    1ac4:	24 17       	cp	r18, r20
    1ac6:	35 07       	cpc	r19, r21
    1ac8:	09 f4       	brne	.+2      	; 0x1acc <main+0x18f0>
    1aca:	8c c1       	rjmp	.+792    	; 0x1de4 <main+0x1c08>
										irCommRxByteExpected = i;
										irCommMsgCount = 0;
									}
								}
							}
							switch(irCommRxByteExpected) {
    1acc:	93 30       	cpi	r25, 0x03	; 3
    1ace:	09 f4       	brne	.+2      	; 0x1ad2 <main+0x18f6>
    1ad0:	bf c1       	rjmp	.+894    	; 0x1e50 <main+0x1c74>
    1ad2:	94 30       	cpi	r25, 0x04	; 4
    1ad4:	08 f0       	brcs	.+2      	; 0x1ad8 <main+0x18fc>
    1ad6:	1e c1       	rjmp	.+572    	; 0x1d14 <main+0x1b38>
    1ad8:	91 30       	cpi	r25, 0x01	; 1
    1ada:	09 f4       	brne	.+2      	; 0x1ade <main+0x1902>
    1adc:	b7 c1       	rjmp	.+878    	; 0x1e4c <main+0x1c70>
    1ade:	92 30       	cpi	r25, 0x02	; 2
    1ae0:	08 f4       	brcc	.+2      	; 0x1ae4 <main+0x1908>
    1ae2:	73 c1       	rjmp	.+742    	; 0x1dca <main+0x1bee>
									updateRedLed(235);
									updateGreenLed(255);
									updateBlueLed(255);
									break;	
								case 2: 
									updateRedLed(255);
    1ae4:	8f ef       	ldi	r24, 0xFF	; 255
									updateRedLed(255);
									updateGreenLed(255);
									updateBlueLed(235);
									break;
								case 4: 
									updateRedLed(235);
    1ae6:	0e 94 a2 3e 	call	0x7d44	; 0x7d44 <updateRedLed>
									updateGreenLed(235);
    1aea:	8b ee       	ldi	r24, 0xEB	; 235
    1aec:	0e 94 b6 3e 	call	0x7d6c	; 0x7d6c <updateGreenLed>
									updateBlueLed(255);
    1af0:	8f ef       	ldi	r24, 0xFF	; 255
    1af2:	0e 94 ca 3e 	call	0x7d94	; 0x7d94 <updateBlueLed>
    1af6:	80 91 5c 04 	lds	r24, 0x045C
									break;
    1afa:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <main+0x110>
						break;

					case 1:	
						irCommTasks();
						if(irCommDataSent()==1) {	
							irCommSendData(irCommRxByteExpected);					
    1afe:	80 91 19 05 	lds	r24, 0x0519
    1b02:	0e 94 fc 52 	call	0xa5f8	; 0xa5f8 <irCommSendData>
    1b06:	0c 94 7a 05 	jmp	0xaf4	; 0xaf4 <main+0x918>
							disableObstacleAvoidance();

							demoEndTime = getTime100MicroSec();
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {	// the robot seems to be blocked somehow
								// go back for a while
								setRightSpeed(-20);
    1b0a:	8c ee       	ldi	r24, 0xEC	; 236
    1b0c:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <setRightSpeed>
								setLeftSpeed(-20);
    1b10:	8c ee       	ldi	r24, 0xEC	; 236
    1b12:	0e 94 44 2a 	call	0x5488	; 0x5488 <setLeftSpeed>
								demoStartTime = getTime100MicroSec();
    1b16:	0e 94 35 22 	call	0x446a	; 0x446a <getTime100MicroSec>
    1b1a:	60 93 64 04 	sts	0x0464, r22
    1b1e:	70 93 65 04 	sts	0x0465, r23
    1b22:	80 93 66 04 	sts	0x0466, r24
    1b26:	90 93 67 04 	sts	0x0467, r25
								demoState = 4;
    1b2a:	84 e0       	ldi	r24, 0x04	; 4
    1b2c:	80 93 60 04 	sts	0x0460, r24
								break;
    1b30:	0c 94 46 02 	jmp	0x48c	; 0x48c <main+0x2b0>
										chargeContact = 0;
										demoState = 1;
										break;
									}
								} else {
									outOfLine = 0;
    1b34:	10 92 62 04 	sts	0x0462, r1
    1b38:	2c ce       	rjmp	.-936    	; 0x1792 <main+0x15b6>
					if(rgbState == 0) {
						pwm_red = 254;
						pwm_green = 255;
						pwm_blue = 255;
						rgbState = 1;
					} else if(rgbState == 1) {
    1b3a:	91 30       	cpi	r25, 0x01	; 1
    1b3c:	09 f4       	brne	.+2      	; 0x1b40 <main+0x1964>
    1b3e:	2f c1       	rjmp	.+606    	; 0x1d9e <main+0x1bc2>
						pwm_red = 255;
						pwm_green = 254;
						pwm_blue = 255;
						rgbState = 2;
					} else if(rgbState == 2) {
    1b40:	92 30       	cpi	r25, 0x02	; 2
    1b42:	11 f0       	breq	.+4      	; 0x1b48 <main+0x196c>
    1b44:	0c 94 9d 03 	jmp	0x73a	; 0x73a <main+0x55e>
						pwm_red = 255;
    1b48:	10 93 0c 02 	sts	0x020C, r17
						pwm_green = 255;
    1b4c:	10 93 0d 02 	sts	0x020D, r17
						pwm_blue = 254;
    1b50:	4e ef       	ldi	r20, 0xFE	; 254
    1b52:	40 93 0e 02 	sts	0x020E, r20
						rgbState = 0;
    1b56:	10 92 2c 03 	sts	0x032C, r1
    1b5a:	0c 94 9d 03 	jmp	0x73a	; 0x73a <main+0x55e>
						if(irCommDataAvailable()==1) {
							if(irCommLedToggle==0) {
								irCommLedToggle = 1;
								updateRedLed(255);
							} else {
								irCommLedToggle = 0;
    1b5e:	10 92 ed 04 	sts	0x04ED, r1
								updateRedLed(235);
    1b62:	8b ee       	ldi	r24, 0xEB	; 235
    1b64:	0e 94 a2 3e 	call	0x7d44	; 0x7d44 <updateRedLed>
    1b68:	8a cc       	rjmp	.-1772   	; 0x147e <main+0x12a2>
					case 2: // led is off
							// transmission: continuously send my robot id to tell the next robot I turned off the led
							// reception: listen for my robot id and then turn on the led				
						irCommTasks();
						if(irCommDataSent()==1) {
							irCommSendData(irCommRobotId);							
    1b6a:	80 91 eb 04 	lds	r24, 0x04EB
    1b6e:	0e 94 fc 52 	call	0xa5f8	; 0xa5f8 <irCommSendData>
    1b72:	76 cc       	rjmp	.-1812   	; 0x1460 <main+0x1284>
								irCommLedToggle = 1;
								updateBlueLed(255);
								updateRedLed(255);
								updateGreenLed(128);
							} else {
								irCommLedToggle = 0;
    1b74:	10 92 ed 04 	sts	0x04ED, r1
								updateBlueLed(255);
    1b78:	8f ef       	ldi	r24, 0xFF	; 255
    1b7a:	0e 94 ca 3e 	call	0x7d94	; 0x7d94 <updateBlueLed>
								updateRedLed(255);
    1b7e:	8f ef       	ldi	r24, 0xFF	; 255
    1b80:	0e 94 a2 3e 	call	0x7d44	; 0x7d44 <updateRedLed>
								updateGreenLed(235);
    1b84:	8b ee       	ldi	r24, 0xEB	; 235
    1b86:	0e 94 b6 3e 	call	0x7d6c	; 0x7d6c <updateGreenLed>
    1b8a:	b5 cc       	rjmp	.-1686   	; 0x14f6 <main+0x131a>
						irCommTasks();
						if(irCommDataSent()==1) {
							if(irCommRobotId < (irCommRobotsNum-1)) {
								irCommSendData(irCommRobotId+1);
							} else {
								irCommSendData(0x00);
    1b8c:	80 e0       	ldi	r24, 0x00	; 0
    1b8e:	0e 94 fc 52 	call	0xa5f8	; 0xa5f8 <irCommSendData>
    1b92:	9c cc       	rjmp	.-1736   	; 0x14cc <main+0x12f0>
								//outOfLine++;
								//if(outOfLine > 250) {
								//	demoState = 1;
								//}
							} else {
								setRightSpeed(15);
    1b94:	8f e0       	ldi	r24, 0x0F	; 15
    1b96:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <setRightSpeed>
								setLeftSpeed(15);
    1b9a:	8f e0       	ldi	r24, 0x0F	; 15
    1b9c:	0e 94 44 2a 	call	0x5488	; 0x5488 <setLeftSpeed>
    1ba0:	0c 94 46 02 	jmp	0x48c	; 0x48c <main+0x2b0>
						if(irCommDataSent()==1) {
							angleDegEncode = (unsigned char)((float)angleDeg*0.7084);
							irCommSendData(angleDegEncode);
						}
						if(irCommDataAvailable()==1) {
							demoStartTime = getTime100MicroSec();
    1ba4:	0e 94 35 22 	call	0x446a	; 0x446a <getTime100MicroSec>
    1ba8:	60 93 64 04 	sts	0x0464, r22
    1bac:	70 93 65 04 	sts	0x0465, r23
    1bb0:	80 93 66 04 	sts	0x0466, r24
    1bb4:	90 93 67 04 	sts	0x0467, r25
							irCommLastData = irCommReadData();
    1bb8:	0e 94 10 53 	call	0xa620	; 0xa620 <irCommReadData>
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
							irCommLastData = (int)((float)irCommLastData*1.411);
    1bbe:	9c 01       	movw	r18, r24
    1bc0:	b9 01       	movw	r22, r18
    1bc2:	88 27       	eor	r24, r24
    1bc4:	77 fd       	sbrc	r23, 7
    1bc6:	80 95       	com	r24
    1bc8:	98 2f       	mov	r25, r24
    1bca:	0e 94 91 54 	call	0xa922	; 0xa922 <__floatsisf>
    1bce:	26 ea       	ldi	r18, 0xA6	; 166
    1bd0:	3b e9       	ldi	r19, 0x9B	; 155
    1bd2:	44 eb       	ldi	r20, 0xB4	; 180
    1bd4:	5f e3       	ldi	r21, 0x3F	; 63
    1bd6:	0e 94 aa 55 	call	0xab54	; 0xab54 <__mulsf3>
    1bda:	0e 94 5e 54 	call	0xa8bc	; 0xa8bc <__fixsfsi>
    1bde:	70 93 e5 04 	sts	0x04E5, r23
    1be2:	60 93 e4 04 	sts	0x04E4, r22
							irCommLastSensor = irCommReceivingSensor();	
    1be6:	0e 94 15 53 	call	0xa62a	; 0xa62a <irCommReceivingSensor>
    1bea:	80 93 18 02 	sts	0x0218, r24
							disableObstacleAvoidance();										
    1bee:	0e 94 5b 3e 	call	0x7cb6	; 0x7cb6 <disableObstacleAvoidance>
							angleDeg = getBearing(irCommLastSensor);
    1bf2:	80 91 18 02 	lds	r24, 0x0218
    1bf6:	0e 94 18 53 	call	0xa630	; 0xa630 <getBearing>
    1bfa:	90 93 e7 04 	sts	0x04E7, r25
    1bfe:	80 93 e6 04 	sts	0x04E6, r24
							if(angleDeg < 0) {
    1c02:	97 fd       	sbrc	r25, 7
    1c04:	0f c1       	rjmp	.+542    	; 0x1e24 <main+0x1c48>
								angleDeg += 360;
							}
							angleError = angleDeg - irCommLastData;
    1c06:	20 91 e4 04 	lds	r18, 0x04E4
    1c0a:	30 91 e5 04 	lds	r19, 0x04E5
    1c0e:	44 eb       	ldi	r20, 0xB4	; 180
    1c10:	50 e0       	ldi	r21, 0x00	; 0
    1c12:	42 1b       	sub	r20, r18
    1c14:	53 0b       	sbc	r21, r19
    1c16:	9a 01       	movw	r18, r20
							angleError += 180;
    1c18:	28 0f       	add	r18, r24
    1c1a:	39 1f       	adc	r19, r25
    1c1c:	30 93 e9 04 	sts	0x04E9, r19
    1c20:	20 93 e8 04 	sts	0x04E8, r18
							if(angleError > 180) {
    1c24:	25 3b       	cpi	r18, 0xB5	; 181
    1c26:	31 05       	cpc	r19, r1
    1c28:	34 f0       	brlt	.+12     	; 0x1c36 <main+0x1a5a>
								angleError -= 360;
    1c2a:	28 56       	subi	r18, 0x68	; 104
    1c2c:	31 40       	sbci	r19, 0x01	; 1
    1c2e:	30 93 e9 04 	sts	0x04E9, r19
    1c32:	20 93 e8 04 	sts	0x04E8, r18
							}
							if(angleError < -180) {
    1c36:	80 91 e8 04 	lds	r24, 0x04E8
    1c3a:	90 91 e9 04 	lds	r25, 0x04E9
    1c3e:	5f ef       	ldi	r21, 0xFF	; 255
    1c40:	8c 34       	cpi	r24, 0x4C	; 76
    1c42:	95 07       	cpc	r25, r21
    1c44:	34 f4       	brge	.+12     	; 0x1c52 <main+0x1a76>
								angleError += 360;
    1c46:	88 59       	subi	r24, 0x98	; 152
    1c48:	9e 4f       	sbci	r25, 0xFE	; 254
    1c4a:	90 93 e9 04 	sts	0x04E9, r25
    1c4e:	80 93 e8 04 	sts	0x04E8, r24
							}
							if(abs(angleError) < 10) {
    1c52:	09 96       	adiw	r24, 0x09	; 9
    1c54:	83 31       	cpi	r24, 0x13	; 19
    1c56:	91 05       	cpc	r25, r1
    1c58:	08 f0       	brcs	.+2      	; 0x1c5c <main+0x1a80>
    1c5a:	85 c0       	rjmp	.+266    	; 0x1d66 <main+0x1b8a>
								setLeftSpeed(0);
    1c5c:	80 e0       	ldi	r24, 0x00	; 0
    1c5e:	0e 94 44 2a 	call	0x5488	; 0x5488 <setLeftSpeed>
								setRightSpeed(0);
    1c62:	80 e0       	ldi	r24, 0x00	; 0
    1c64:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <setRightSpeed>
    1c68:	db cc       	rjmp	.-1610   	; 0x1620 <main+0x1444>
						break;

					case 2:
						irCommTasks();
						if(irCommDataSent()==1) {
							angleDegEncode = (unsigned char)((float)angleDeg*0.7084);
    1c6a:	60 91 e6 04 	lds	r22, 0x04E6
    1c6e:	70 91 e7 04 	lds	r23, 0x04E7
    1c72:	88 27       	eor	r24, r24
    1c74:	77 fd       	sbrc	r23, 7
    1c76:	80 95       	com	r24
    1c78:	98 2f       	mov	r25, r24
    1c7a:	0e 94 91 54 	call	0xa922	; 0xa922 <__floatsisf>
    1c7e:	24 eb       	ldi	r18, 0xB4	; 180
    1c80:	39 e5       	ldi	r19, 0x59	; 89
    1c82:	45 e3       	ldi	r20, 0x35	; 53
    1c84:	5f e3       	ldi	r21, 0x3F	; 63
    1c86:	0e 94 aa 55 	call	0xab54	; 0xab54 <__mulsf3>
    1c8a:	0e 94 63 54 	call	0xa8c6	; 0xa8c6 <__fixunssfsi>
    1c8e:	86 2f       	mov	r24, r22
    1c90:	60 93 ea 04 	sts	0x04EA, r22
							irCommSendData(angleDegEncode);
    1c94:	0e 94 fc 52 	call	0xa5f8	; 0xa5f8 <irCommSendData>
    1c98:	be cc       	rjmp	.-1668   	; 0x1616 <main+0x143a>
						if(irCommDataSent()==1) {							
							demoState = 1;
							if(irCommRxByteExpected<255) {
								irCommRxByteExpected++;
							} else {
								irCommRxByteExpected = 0;
    1c9a:	10 92 19 05 	sts	0x0519, r1
    1c9e:	97 c8       	rjmp	.-3794   	; 0xdce <main+0xbf2>
							}
						}
						if(irCommDataAvailable()==1) {
							irCommReadData();
							if(i<7) {
								i++;
    1ca0:	2f 5f       	subi	r18, 0xFF	; 255
    1ca2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ca4:	3e 83       	std	Y+6, r19	; 0x06
    1ca6:	2d 83       	std	Y+5, r18	; 0x05
							} else {
								i = 0;
							}
							switch(i) {
    1ca8:	24 30       	cpi	r18, 0x04	; 4
    1caa:	31 05       	cpc	r19, r1
    1cac:	09 f4       	brne	.+2      	; 0x1cb0 <main+0x1ad4>
    1cae:	2c c1       	rjmp	.+600    	; 0x1f08 <main+0x1d2c>
    1cb0:	25 30       	cpi	r18, 0x05	; 5
    1cb2:	31 05       	cpc	r19, r1
    1cb4:	08 f0       	brcs	.+2      	; 0x1cb8 <main+0x1adc>
    1cb6:	9c c0       	rjmp	.+312    	; 0x1df0 <main+0x1c14>
    1cb8:	22 30       	cpi	r18, 0x02	; 2
    1cba:	31 05       	cpc	r19, r1
    1cbc:	09 f4       	brne	.+2      	; 0x1cc0 <main+0x1ae4>
    1cbe:	33 c1       	rjmp	.+614    	; 0x1f26 <main+0x1d4a>
    1cc0:	23 30       	cpi	r18, 0x03	; 3
    1cc2:	31 05       	cpc	r19, r1
    1cc4:	09 f4       	brne	.+2      	; 0x1cc8 <main+0x1aec>
    1cc6:	2d c1       	rjmp	.+602    	; 0x1f22 <main+0x1d46>
									updateRedLed(255);
									updateGreenLed(255);
									updateBlueLed(255);
									break;
								case 1: 
									updateRedLed(0);
    1cc8:	80 e0       	ldi	r24, 0x00	; 0
    1cca:	0e 94 a2 3e 	call	0x7d44	; 0x7d44 <updateRedLed>
									updateGreenLed(255);
    1cce:	8f ef       	ldi	r24, 0xFF	; 255
    1cd0:	0e 94 b6 3e 	call	0x7d6c	; 0x7d6c <updateGreenLed>
									updateBlueLed(255);
    1cd4:	8f ef       	ldi	r24, 0xFF	; 255
    1cd6:	0e 94 ca 3e 	call	0x7d94	; 0x7d94 <updateBlueLed>
    1cda:	80 91 5c 04 	lds	r24, 0x045C
									break;	
    1cde:	a1 e0       	ldi	r26, 0x01	; 1
    1ce0:	b0 e0       	ldi	r27, 0x00	; 0
    1ce2:	be 83       	std	Y+6, r27	; 0x06
    1ce4:	ad 83       	std	Y+5, r26	; 0x05
    1ce6:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <main+0x110>

							if(CHARGE_ON) {
								outOfLine = 0;
								chargeContact++;
								if(chargeContact > 20) {
									setLeftSpeed(0);
    1cea:	80 e0       	ldi	r24, 0x00	; 0
    1cec:	0e 94 44 2a 	call	0x5488	; 0x5488 <setLeftSpeed>
									setRightSpeed(0);
    1cf0:	80 e0       	ldi	r24, 0x00	; 0
    1cf2:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <setRightSpeed>
									demoStartTime = getTime100MicroSec();
    1cf6:	0e 94 35 22 	call	0x446a	; 0x446a <getTime100MicroSec>
    1cfa:	60 93 64 04 	sts	0x0464, r22
    1cfe:	70 93 65 04 	sts	0x0465, r23
    1d02:	80 93 66 04 	sts	0x0466, r24
    1d06:	90 93 67 04 	sts	0x0467, r25
									demoState = 3;
    1d0a:	93 e0       	ldi	r25, 0x03	; 3
    1d0c:	90 93 60 04 	sts	0x0460, r25
									break;
    1d10:	0c 94 46 02 	jmp	0x48c	; 0x48c <main+0x2b0>
										irCommRxByteExpected = i;
										irCommMsgCount = 0;
									}
								}
							}
							switch(irCommRxByteExpected) {
    1d14:	95 30       	cpi	r25, 0x05	; 5
    1d16:	09 f4       	brne	.+2      	; 0x1d1a <main+0x1b3e>
    1d18:	aa c0       	rjmp	.+340    	; 0x1e6e <main+0x1c92>
    1d1a:	95 30       	cpi	r25, 0x05	; 5
    1d1c:	08 f4       	brcc	.+2      	; 0x1d20 <main+0x1b44>
    1d1e:	a5 c0       	rjmp	.+330    	; 0x1e6a <main+0x1c8e>
    1d20:	96 30       	cpi	r25, 0x06	; 6
    1d22:	09 f4       	brne	.+2      	; 0x1d26 <main+0x1b4a>
    1d24:	86 c0       	rjmp	.+268    	; 0x1e32 <main+0x1c56>
    1d26:	97 30       	cpi	r25, 0x07	; 7
    1d28:	11 f0       	breq	.+4      	; 0x1d2e <main+0x1b52>
    1d2a:	0c 94 7f 05 	jmp	0xafe	; 0xafe <main+0x922>
									updateRedLed(255);
									updateGreenLed(235);
									updateBlueLed(235);
									break;
								case 7: 
									updateRedLed(235);
    1d2e:	8b ee       	ldi	r24, 0xEB	; 235
    1d30:	0e 94 a2 3e 	call	0x7d44	; 0x7d44 <updateRedLed>
									updateGreenLed(235);
    1d34:	8b ee       	ldi	r24, 0xEB	; 235
    1d36:	0e 94 b6 3e 	call	0x7d6c	; 0x7d6c <updateGreenLed>
									updateBlueLed(235);
    1d3a:	8b ee       	ldi	r24, 0xEB	; 235
    1d3c:	0e 94 ca 3e 	call	0x7d94	; 0x7d94 <updateBlueLed>
    1d40:	0c 94 7f 05 	jmp	0xafe	; 0xafe <main+0x922>
							irCommSendData(irCommRxByteExpected);					
						}
						if(irCommDataAvailable()==1) {							
							i = irCommReadData();
							if(i == irCommRxByteExpected) {
								irCommMsgCount++;
    1d44:	80 91 ee 04 	lds	r24, 0x04EE
    1d48:	8f 5f       	subi	r24, 0xFF	; 255
    1d4a:	80 93 ee 04 	sts	0x04EE, r24
								if(irCommMsgCount >= 4) {
    1d4e:	84 30       	cpi	r24, 0x04	; 4
    1d50:	08 f4       	brcc	.+2      	; 0x1d54 <main+0x1b78>
    1d52:	bc ce       	rjmp	.-648    	; 0x1acc <main+0x18f0>
									irCommMsgCount = 0;
    1d54:	10 92 ee 04 	sts	0x04EE, r1
									if(irCommRxByteExpected < 7) {
    1d58:	97 30       	cpi	r25, 0x07	; 7
    1d5a:	08 f0       	brcs	.+2      	; 0x1d5e <main+0x1b82>
    1d5c:	8a c0       	rjmp	.+276    	; 0x1e72 <main+0x1c96>
										irCommRxByteExpected++;
    1d5e:	9f 5f       	subi	r25, 0xFF	; 255
    1d60:	90 93 19 05 	sts	0x0519, r25
    1d64:	b3 ce       	rjmp	.-666    	; 0x1acc <main+0x18f0>
							}
							if(abs(angleError) < 10) {
								setLeftSpeed(0);
								setRightSpeed(0);
							} else {
								resetOdometry();
    1d66:	0e 94 42 22 	call	0x4484	; 0x4484 <resetOdometry>
								if(angleError > 0) {	// turn left
    1d6a:	80 91 e8 04 	lds	r24, 0x04E8
    1d6e:	90 91 e9 04 	lds	r25, 0x04E9
    1d72:	18 16       	cp	r1, r24
    1d74:	19 06       	cpc	r1, r25
    1d76:	0c f0       	brlt	.+2      	; 0x1d7a <main+0x1b9e>
    1d78:	ad c0       	rjmp	.+346    	; 0x1ed4 <main+0x1cf8>
									setLeftSpeed(-7);
    1d7a:	89 ef       	ldi	r24, 0xF9	; 249
    1d7c:	0e 94 44 2a 	call	0x5488	; 0x5488 <setLeftSpeed>
									setRightSpeed(7);
    1d80:	87 e0       	ldi	r24, 0x07	; 7
    1d82:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <setRightSpeed>
									targetAngle = 0.09;	// about -10 degrees
									demoState = 4;
    1d86:	64 e0       	ldi	r22, 0x04	; 4
    1d88:	60 93 60 04 	sts	0x0460, r22
							} else {
								resetOdometry();
								if(angleError > 0) {	// turn left
									setLeftSpeed(-7);
									setRightSpeed(7);
									targetAngle = 0.09;	// about -10 degrees
    1d8c:	8c ee       	ldi	r24, 0xEC	; 236
    1d8e:	91 e5       	ldi	r25, 0x51	; 81
    1d90:	a8 eb       	ldi	r26, 0xB8	; 184
    1d92:	bd e3       	ldi	r27, 0x3D	; 61
    1d94:	8f 83       	std	Y+7, r24	; 0x07
    1d96:	98 87       	std	Y+8, r25	; 0x08
    1d98:	a9 87       	std	Y+9, r26	; 0x09
    1d9a:	ba 87       	std	Y+10, r27	; 0x0a
    1d9c:	41 cc       	rjmp	.-1918   	; 0x1620 <main+0x1444>
						pwm_red = 254;
						pwm_green = 255;
						pwm_blue = 255;
						rgbState = 1;
					} else if(rgbState == 1) {
						pwm_red = 255;
    1d9e:	10 93 0c 02 	sts	0x020C, r17
						pwm_green = 254;
    1da2:	2e ef       	ldi	r18, 0xFE	; 254
    1da4:	20 93 0d 02 	sts	0x020D, r18
						pwm_blue = 255;
    1da8:	10 93 0e 02 	sts	0x020E, r17
						rgbState = 2;
    1dac:	32 e0       	ldi	r19, 0x02	; 2
    1dae:	30 93 2c 03 	sts	0x032C, r19
    1db2:	0c 94 9d 03 	jmp	0x73a	; 0x73a <main+0x55e>
										irCommRxByteExpected = 0;
									}
								}
							} else {
								if(irCommRxByteExpected==7) {
									if(i==0) {
    1db6:	2d 81       	ldd	r18, Y+5	; 0x05
    1db8:	3e 81       	ldd	r19, Y+6	; 0x06
    1dba:	21 15       	cp	r18, r1
    1dbc:	31 05       	cpc	r19, r1
    1dbe:	09 f0       	breq	.+2      	; 0x1dc2 <main+0x1be6>
    1dc0:	b6 cf       	rjmp	.-148    	; 0x1d2e <main+0x1b52>
										irCommRxByteExpected = 0;
    1dc2:	10 92 19 05 	sts	0x0519, r1
										irCommMsgCount = 0;
    1dc6:	10 92 ee 04 	sts	0x04EE, r1
									}
								}
							}
							switch(irCommRxByteExpected) {
								case 0: 
									updateRedLed(255);
    1dca:	8f ef       	ldi	r24, 0xFF	; 255
									updateGreenLed(255);
									updateBlueLed(255);
									break;
								case 1: 
									updateRedLed(235);
    1dcc:	0e 94 a2 3e 	call	0x7d44	; 0x7d44 <updateRedLed>
									updateGreenLed(255);
    1dd0:	8f ef       	ldi	r24, 0xFF	; 255
    1dd2:	0e 94 b6 3e 	call	0x7d6c	; 0x7d6c <updateGreenLed>
									updateBlueLed(255);
    1dd6:	8f ef       	ldi	r24, 0xFF	; 255
    1dd8:	0e 94 ca 3e 	call	0x7d94	; 0x7d94 <updateBlueLed>
    1ddc:	80 91 5c 04 	lds	r24, 0x045C
									break;	
    1de0:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <main+0x110>
										irCommRxByteExpected = 0;
										irCommMsgCount = 0;
									}
								} else {
									if(irCommRxByteExpected==(i-1)) {
										irCommRxByteExpected = i;
    1de4:	80 93 19 05 	sts	0x0519, r24
										irCommMsgCount = 0;
    1de8:	10 92 ee 04 	sts	0x04EE, r1
    1dec:	98 2f       	mov	r25, r24
    1dee:	6e ce       	rjmp	.-804    	; 0x1acc <main+0x18f0>
							if(i<7) {
								i++;
							} else {
								i = 0;
							}
							switch(i) {
    1df0:	4d 81       	ldd	r20, Y+5	; 0x05
    1df2:	5e 81       	ldd	r21, Y+6	; 0x06
    1df4:	46 30       	cpi	r20, 0x06	; 6
    1df6:	51 05       	cpc	r21, r1
    1df8:	09 f4       	brne	.+2      	; 0x1dfc <main+0x1c20>
    1dfa:	4b c0       	rjmp	.+150    	; 0x1e92 <main+0x1cb6>
    1dfc:	46 30       	cpi	r20, 0x06	; 6
    1dfe:	51 05       	cpc	r21, r1
    1e00:	d8 f1       	brcs	.+118    	; 0x1e78 <main+0x1c9c>
    1e02:	47 30       	cpi	r20, 0x07	; 7
    1e04:	51 05       	cpc	r21, r1
    1e06:	09 f0       	breq	.+2      	; 0x1e0a <main+0x1c2e>
    1e08:	5f cf       	rjmp	.-322    	; 0x1cc8 <main+0x1aec>
									updateRedLed(255);
									updateGreenLed(0);
									updateBlueLed(0);
									break;
								case 7: 
									updateRedLed(0);
    1e0a:	80 e0       	ldi	r24, 0x00	; 0
    1e0c:	0e 94 a2 3e 	call	0x7d44	; 0x7d44 <updateRedLed>
									updateGreenLed(0);
    1e10:	80 e0       	ldi	r24, 0x00	; 0
    1e12:	0e 94 b6 3e 	call	0x7d6c	; 0x7d6c <updateGreenLed>
									updateBlueLed(0);
    1e16:	80 e0       	ldi	r24, 0x00	; 0
    1e18:	0e 94 ca 3e 	call	0x7d94	; 0x7d94 <updateBlueLed>
    1e1c:	80 91 5c 04 	lds	r24, 0x045C
									break;
    1e20:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <main+0x110>
							irCommLastData = (int)((float)irCommLastData*1.411);
							irCommLastSensor = irCommReceivingSensor();	
							disableObstacleAvoidance();										
							angleDeg = getBearing(irCommLastSensor);
							if(angleDeg < 0) {
								angleDeg += 360;
    1e24:	88 59       	subi	r24, 0x98	; 152
    1e26:	9e 4f       	sbci	r25, 0xFE	; 254
    1e28:	90 93 e7 04 	sts	0x04E7, r25
    1e2c:	80 93 e6 04 	sts	0x04E6, r24
    1e30:	ea ce       	rjmp	.-556    	; 0x1c06 <main+0x1a2a>
									updateRedLed(235);
									updateGreenLed(255);
									updateBlueLed(235);
									break;
								case 6: 
									updateRedLed(255);
    1e32:	8f ef       	ldi	r24, 0xFF	; 255
    1e34:	0e 94 a2 3e 	call	0x7d44	; 0x7d44 <updateRedLed>
									updateGreenLed(235);
    1e38:	8b ee       	ldi	r24, 0xEB	; 235
    1e3a:	0e 94 b6 3e 	call	0x7d6c	; 0x7d6c <updateGreenLed>
									updateBlueLed(235);
    1e3e:	8b ee       	ldi	r24, 0xEB	; 235
    1e40:	0e 94 ca 3e 	call	0x7d94	; 0x7d94 <updateBlueLed>
    1e44:	80 91 5c 04 	lds	r24, 0x045C
									break;
    1e48:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <main+0x110>
									updateRedLed(255);
									updateGreenLed(255);
									updateBlueLed(255);
									break;
								case 1: 
									updateRedLed(235);
    1e4c:	8b ee       	ldi	r24, 0xEB	; 235
    1e4e:	be cf       	rjmp	.-132    	; 0x1dcc <main+0x1bf0>
									updateRedLed(255);
									updateGreenLed(235);
									updateBlueLed(255);
									break;
								case 3: 
									updateRedLed(255);
    1e50:	8f ef       	ldi	r24, 0xFF	; 255
									updateRedLed(235);
									updateGreenLed(235);
									updateBlueLed(255);
									break;
								case 5: 
									updateRedLed(235);
    1e52:	0e 94 a2 3e 	call	0x7d44	; 0x7d44 <updateRedLed>
									updateGreenLed(255);
    1e56:	8f ef       	ldi	r24, 0xFF	; 255
    1e58:	0e 94 b6 3e 	call	0x7d6c	; 0x7d6c <updateGreenLed>
									updateBlueLed(235);
    1e5c:	8b ee       	ldi	r24, 0xEB	; 235
    1e5e:	0e 94 ca 3e 	call	0x7d94	; 0x7d94 <updateBlueLed>
    1e62:	80 91 5c 04 	lds	r24, 0x045C
									break;
    1e66:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <main+0x110>
									updateRedLed(255);
									updateGreenLed(255);
									updateBlueLed(235);
									break;
								case 4: 
									updateRedLed(235);
    1e6a:	8b ee       	ldi	r24, 0xEB	; 235
    1e6c:	3c ce       	rjmp	.-904    	; 0x1ae6 <main+0x190a>
									updateGreenLed(235);
									updateBlueLed(255);
									break;
								case 5: 
									updateRedLed(235);
    1e6e:	8b ee       	ldi	r24, 0xEB	; 235
    1e70:	f0 cf       	rjmp	.-32     	; 0x1e52 <main+0x1c76>
								if(irCommMsgCount >= 4) {
									irCommMsgCount = 0;
									if(irCommRxByteExpected < 7) {
										irCommRxByteExpected++;
									} else {
										irCommRxByteExpected = 0;
    1e72:	10 92 19 05 	sts	0x0519, r1
    1e76:	a9 cf       	rjmp	.-174    	; 0x1dca <main+0x1bee>
									updateRedLed(0);
									updateGreenLed(0);
									updateBlueLed(255);
									break;
								case 5: 
									updateRedLed(0);
    1e78:	80 e0       	ldi	r24, 0x00	; 0
    1e7a:	0e 94 a2 3e 	call	0x7d44	; 0x7d44 <updateRedLed>
									updateGreenLed(255);
    1e7e:	8f ef       	ldi	r24, 0xFF	; 255
    1e80:	0e 94 b6 3e 	call	0x7d6c	; 0x7d6c <updateGreenLed>
									updateBlueLed(0);
    1e84:	80 e0       	ldi	r24, 0x00	; 0
    1e86:	0e 94 ca 3e 	call	0x7d94	; 0x7d94 <updateBlueLed>
    1e8a:	80 91 5c 04 	lds	r24, 0x045C
									break;
    1e8e:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <main+0x110>
								case 6: 
									updateRedLed(255);
    1e92:	8f ef       	ldi	r24, 0xFF	; 255
    1e94:	bb cf       	rjmp	.-138    	; 0x1e0c <main+0x1c30>
										demoState = 1;
									} else {
										irCommSendData(0xFF);
									}
								} else {
									if(i == (unsigned int)(irCommRobotId-1)) {
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	01 97       	sbiw	r24, 0x01	; 1
    1e9a:	ed 81       	ldd	r30, Y+5	; 0x05
    1e9c:	fe 81       	ldd	r31, Y+6	; 0x06
    1e9e:	8e 17       	cp	r24, r30
    1ea0:	9f 07       	cpc	r25, r31
    1ea2:	11 f0       	breq	.+4      	; 0x1ea8 <main+0x1ccc>
    1ea4:	0c 94 39 07 	jmp	0xe72	; 0xe72 <main+0xc96>
    1ea8:	d4 cb       	rjmp	.-2136   	; 0x1652 <main+0x1476>
									irCommLedToggle = 1;
									updateBlueLed(255);
									updateRedLed(255);
									updateGreenLed(128);
								} else {
									irCommLedToggle = 0;
    1eaa:	10 92 ed 04 	sts	0x04ED, r1
									updateBlueLed(255);
    1eae:	8f ef       	ldi	r24, 0xFF	; 255
    1eb0:	0e 94 ca 3e 	call	0x7d94	; 0x7d94 <updateBlueLed>
									updateRedLed(255);
    1eb4:	8f ef       	ldi	r24, 0xFF	; 255
    1eb6:	0e 94 a2 3e 	call	0x7d44	; 0x7d44 <updateRedLed>
									updateGreenLed(235);
    1eba:	8b ee       	ldi	r24, 0xEB	; 235
    1ebc:	0e 94 b6 3e 	call	0x7d6c	; 0x7d6c <updateGreenLed>
    1ec0:	0c 94 25 07 	jmp	0xe4a	; 0xe4a <main+0xc6e>
									outOfLine = 0;
								}
							}
							
							if(proximityResult[8]<LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR && proximityResult[11]>LINE_OUT_THR) {	// left ground is the only within the black line => turn left
								setLeftSpeed(-10);
    1ec4:	86 ef       	ldi	r24, 0xF6	; 246
    1ec6:	0e 94 44 2a 	call	0x5488	; 0x5488 <setLeftSpeed>
								setRightSpeed(15);
    1eca:	8f e0       	ldi	r24, 0x0F	; 15
    1ecc:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <setRightSpeed>
    1ed0:	0c 94 46 02 	jmp	0x48c	; 0x48c <main+0x2b0>
									setLeftSpeed(-7);
									setRightSpeed(7);
									targetAngle = 0.09;	// about -10 degrees
									demoState = 4;
								} else {	// turn right
									setLeftSpeed(7);
    1ed4:	87 e0       	ldi	r24, 0x07	; 7
    1ed6:	0e 94 44 2a 	call	0x5488	; 0x5488 <setLeftSpeed>
									setRightSpeed(-7);
    1eda:	89 ef       	ldi	r24, 0xF9	; 249
    1edc:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <setRightSpeed>
									targetAngle = -0.09;	// about 10 degrees
									demoState = 3;
    1ee0:	93 e0       	ldi	r25, 0x03	; 3
    1ee2:	90 93 60 04 	sts	0x0460, r25
									targetAngle = 0.09;	// about -10 degrees
									demoState = 4;
								} else {	// turn right
									setLeftSpeed(7);
									setRightSpeed(-7);
									targetAngle = -0.09;	// about 10 degrees
    1ee6:	2c ee       	ldi	r18, 0xEC	; 236
    1ee8:	31 e5       	ldi	r19, 0x51	; 81
    1eea:	48 eb       	ldi	r20, 0xB8	; 184
    1eec:	5d eb       	ldi	r21, 0xBD	; 189
    1eee:	2f 83       	std	Y+7, r18	; 0x07
    1ef0:	38 87       	std	Y+8, r19	; 0x08
    1ef2:	49 87       	std	Y+9, r20	; 0x09
    1ef4:	5a 87       	std	Y+10, r21	; 0x0a
    1ef6:	94 cb       	rjmp	.-2264   	; 0x1620 <main+0x1444>
							
							if(proximityResult[8]<LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR && proximityResult[11]>LINE_OUT_THR) {	// left ground is the only within the black line => turn left
								setLeftSpeed(-10);
								setRightSpeed(15);
							} else if(proximityResult[11]<LINE_OUT_THR && proximityResult[8]>LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {	// right ground is the only within the black line => turn right
								setLeftSpeed(15);
    1ef8:	8f e0       	ldi	r24, 0x0F	; 15
    1efa:	0e 94 44 2a 	call	0x5488	; 0x5488 <setLeftSpeed>
								setRightSpeed(-10);
    1efe:	86 ef       	ldi	r24, 0xF6	; 246
    1f00:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <setRightSpeed>
    1f04:	0c 94 46 02 	jmp	0x48c	; 0x48c <main+0x2b0>
									updateRedLed(255);
									updateGreenLed(255);
									updateBlueLed(0);
									break;
								case 4: 
									updateRedLed(0);
    1f08:	80 e0       	ldi	r24, 0x00	; 0
    1f0a:	0e 94 a2 3e 	call	0x7d44	; 0x7d44 <updateRedLed>
									updateGreenLed(0);
    1f0e:	80 e0       	ldi	r24, 0x00	; 0
    1f10:	0e 94 b6 3e 	call	0x7d6c	; 0x7d6c <updateGreenLed>
									updateBlueLed(255);
    1f14:	8f ef       	ldi	r24, 0xFF	; 255
    1f16:	0e 94 ca 3e 	call	0x7d94	; 0x7d94 <updateBlueLed>
    1f1a:	80 91 5c 04 	lds	r24, 0x045C
									break;
    1f1e:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <main+0x110>
									updateRedLed(255);
									updateGreenLed(0);
									updateBlueLed(255);
									break;
								case 3: 
									updateRedLed(255);
    1f22:	8f ef       	ldi	r24, 0xFF	; 255
    1f24:	aa cf       	rjmp	.-172    	; 0x1e7a <main+0x1c9e>
									updateRedLed(0);
									updateGreenLed(255);
									updateBlueLed(255);
									break;	
								case 2: 
									updateRedLed(255);
    1f26:	8f ef       	ldi	r24, 0xFF	; 255
    1f28:	f0 cf       	rjmp	.-32     	; 0x1f0a <main+0x1d2e>

00001f2a <SPI_WAIT>:
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1f2a:	81 e0       	ldi	r24, 0x01	; 1
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
    1f2e:	21 e0       	ldi	r18, 0x01	; 1
		}
	
		if(SPSR & _BV(SPIF)) {
    1f30:	0d b4       	in	r0, 0x2d	; 45
    1f32:	07 fc       	sbrc	r0, 7
    1f34:	0a c0       	rjmp	.+20     	; 0x1f4a <SPI_WAIT+0x20>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1f36:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
    1f38:	37 e2       	ldi	r19, 0x27	; 39
    1f3a:	80 31       	cpi	r24, 0x10	; 16
    1f3c:	93 07       	cpc	r25, r19
    1f3e:	c0 f3       	brcs	.-16     	; 0x1f30 <SPI_WAIT+0x6>
			spiCommError = 1;
    1f40:	20 93 28 03 	sts	0x0328, r18
		}
	
		if(SPSR & _BV(SPIF)) {
    1f44:	0d b4       	in	r0, 0x2d	; 45
    1f46:	07 fe       	sbrs	r0, 7
    1f48:	f6 cf       	rjmp	.-20     	; 0x1f36 <SPI_WAIT+0xc>
			return;
		}
	}
}
    1f4a:	08 95       	ret

00001f4c <initSPI>:

void initSPI() {

    SPI_DDR &= ~((1<<SPI_MOSI)|(1<<SPI_MISO)|(1<<SPI_SS)|(1<<SPI_SCK));
    1f4c:	84 b1       	in	r24, 0x04	; 4
    1f4e:	80 7f       	andi	r24, 0xF0	; 240
    1f50:	84 b9       	out	0x04, r24	; 4
    // Define the following pins as output
    SPI_DDR |= ((1<<SPI_MOSI)|(1<<SPI_SS)|(1<<SPI_SCK));
    1f52:	84 b1       	in	r24, 0x04	; 4
    1f54:	87 60       	ori	r24, 0x07	; 7
    1f56:	84 b9       	out	0x04, r24	; 4

    
    SPCR = ((1<<SPE)|               // SPI Enable
    1f58:	80 e5       	ldi	r24, 0x50	; 80
    1f5a:	8c bd       	out	0x2c, r24	; 44
            (1<<MSTR)|              // 1:Master/ 0:Slave
            (0<<SPR1)|(0<<SPR0)|    // SPI Clock Rate => default 1/4 => 2 MHz
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR |= (1<<SPI2X);              // Double Clock Rate
    1f5c:	8d b5       	in	r24, 0x2d	; 45
    1f5e:	81 60       	ori	r24, 0x01	; 1
    1f60:	8d bd       	out	0x2d, r24	; 45

}
    1f62:	08 95       	ret

00001f64 <closeSPI>:

void closeSPI() {

	SPCR = 0x00;
    1f64:	1c bc       	out	0x2c, r1	; 44
	SPSR = 0x00;
    1f66:	1d bc       	out	0x2d, r1	; 45
}
    1f68:	08 95       	ret

00001f6a <SPI_ReadWrite_Block>:

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1f6a:	44 23       	and	r20, r20
    1f6c:	09 f1       	breq	.+66     	; 0x1fb0 <SPI_ReadWrite_Block+0x46>
    1f6e:	a6 2f       	mov	r26, r22
    1f70:	b7 2f       	mov	r27, r23
    1f72:	e8 2f       	mov	r30, r24
    1f74:	f9 2f       	mov	r31, r25
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
    1f76:	91 e0       	ldi	r25, 0x01	; 1
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
    1f78:	21 91       	ld	r18, Z+
    1f7a:	2e bd       	out	0x2e, r18	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1f7c:	21 e0       	ldi	r18, 0x01	; 1
    1f7e:	30 e0       	ldi	r19, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
    1f80:	0d b4       	in	r0, 0x2d	; 45
    1f82:	07 fc       	sbrc	r0, 7
    1f84:	0b c0       	rjmp	.+22     	; 0x1f9c <SPI_ReadWrite_Block+0x32>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1f86:	2f 5f       	subi	r18, 0xFF	; 255
    1f88:	3f 4f       	sbci	r19, 0xFF	; 255
		if(timeout>=10000) {
    1f8a:	57 e2       	ldi	r21, 0x27	; 39
    1f8c:	20 31       	cpi	r18, 0x10	; 16
    1f8e:	35 07       	cpc	r19, r21
    1f90:	b8 f3       	brcs	.-18     	; 0x1f80 <SPI_ReadWrite_Block+0x16>
			spiCommError = 1;
    1f92:	90 93 28 03 	sts	0x0328, r25
		}
	
		if(SPSR & _BV(SPIF)) {
    1f96:	0d b4       	in	r0, 0x2d	; 45
    1f98:	07 fe       	sbrs	r0, 7
    1f9a:	f5 cf       	rjmp	.-22     	; 0x1f86 <SPI_ReadWrite_Block+0x1c>
void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
          SPI_WAIT();
		  if(spiCommError) {
    1f9c:	20 91 28 03 	lds	r18, 0x0328
    1fa0:	22 23       	and	r18, r18
    1fa2:	31 f4       	brne	.+12     	; 0x1fb0 <SPI_ReadWrite_Block+0x46>
			return;
		  }
          buffer[i] = SPDR;
    1fa4:	2e b5       	in	r18, 0x2e	; 46
    1fa6:	2d 93       	st	X+, r18
	SPSR = 0x00;
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1fa8:	2e 2f       	mov	r18, r30
    1faa:	28 1b       	sub	r18, r24
    1fac:	24 17       	cp	r18, r20
    1fae:	20 f3       	brcs	.-56     	; 0x1f78 <SPI_ReadWrite_Block+0xe>
    1fb0:	08 95       	ret

00001fb2 <SPI_Write_Block>:
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1fb2:	66 23       	and	r22, r22
    1fb4:	e9 f0       	breq	.+58     	; 0x1ff0 <SPI_Write_Block+0x3e>
    1fb6:	e8 2f       	mov	r30, r24
    1fb8:	f9 2f       	mov	r31, r25
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
    1fba:	91 e0       	ldi	r25, 0x01	; 1
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
    1fbc:	21 91       	ld	r18, Z+
    1fbe:	2e bd       	out	0x2e, r18	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1fc0:	21 e0       	ldi	r18, 0x01	; 1
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
    1fc4:	0d b4       	in	r0, 0x2d	; 45
    1fc6:	07 fc       	sbrc	r0, 7
    1fc8:	0b c0       	rjmp	.+22     	; 0x1fe0 <SPI_Write_Block+0x2e>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1fca:	2f 5f       	subi	r18, 0xFF	; 255
    1fcc:	3f 4f       	sbci	r19, 0xFF	; 255
		if(timeout>=10000) {
    1fce:	47 e2       	ldi	r20, 0x27	; 39
    1fd0:	20 31       	cpi	r18, 0x10	; 16
    1fd2:	34 07       	cpc	r19, r20
    1fd4:	b8 f3       	brcs	.-18     	; 0x1fc4 <SPI_Write_Block+0x12>
			spiCommError = 1;
    1fd6:	90 93 28 03 	sts	0x0328, r25
		}
	
		if(SPSR & _BV(SPIF)) {
    1fda:	0d b4       	in	r0, 0x2d	; 45
    1fdc:	07 fe       	sbrs	r0, 7
    1fde:	f5 cf       	rjmp	.-22     	; 0x1fca <SPI_Write_Block+0x18>
void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
          SPI_WAIT();
		  if(spiCommError) {
    1fe0:	20 91 28 03 	lds	r18, 0x0328
    1fe4:	22 23       	and	r18, r18
    1fe6:	21 f4       	brne	.+8      	; 0x1ff0 <SPI_Write_Block+0x3e>
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1fe8:	2e 2f       	mov	r18, r30
    1fea:	28 1b       	sub	r18, r24
    1fec:	26 17       	cp	r18, r22
    1fee:	30 f3       	brcs	.-52     	; 0x1fbc <SPI_Write_Block+0xa>
    1ff0:	08 95       	ret

00001ff2 <SPI_Write_Byte>:
    }

}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    1ff2:	8e bd       	out	0x2e, r24	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
    1ff8:	21 e0       	ldi	r18, 0x01	; 1
		}
	
		if(SPSR & _BV(SPIF)) {
    1ffa:	0d b4       	in	r0, 0x2d	; 45
    1ffc:	07 fc       	sbrc	r0, 7
    1ffe:	0a c0       	rjmp	.+20     	; 0x2014 <SPI_Write_Byte+0x22>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    2000:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
    2002:	37 e2       	ldi	r19, 0x27	; 39
    2004:	80 31       	cpi	r24, 0x10	; 16
    2006:	93 07       	cpc	r25, r19
    2008:	c0 f3       	brcs	.-16     	; 0x1ffa <SPI_Write_Byte+0x8>
			spiCommError = 1;
    200a:	20 93 28 03 	sts	0x0328, r18
		}
	
		if(SPSR & _BV(SPIF)) {
    200e:	0d b4       	in	r0, 0x2d	; 45
    2010:	07 fe       	sbrs	r0, 7
    2012:	f6 cf       	rjmp	.-20     	; 0x2000 <SPI_Write_Byte+0xe>
}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    SPI_WAIT();
    return SPDR;
    2014:	8e b5       	in	r24, 0x2e	; 46
}
    2016:	08 95       	ret

00002018 <mirf_config>:


void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
    2018:	0f 93       	push	r16
    201a:	1f 93       	push	r17
    201c:	df 93       	push	r29
    201e:	cf 93       	push	r28
    2020:	00 d0       	rcall	.+0      	; 0x2022 <mirf_config+0xa>
    2022:	cd b7       	in	r28, 0x3d	; 61
    2024:	de b7       	in	r29, 0x3e	; 62
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    2026:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2028:	80 e2       	ldi	r24, 0x20	; 32
    202a:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    202e:	8d e0       	ldi	r24, 0x0D	; 13
    2030:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    mirf_CSN_hi;
    2034:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    2036:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2038:	83 e2       	ldi	r24, 0x23	; 35
    203a:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    203e:	81 e0       	ldi	r24, 0x01	; 1
    2040:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    mirf_CSN_hi;
    2044:	28 9a       	sbi	0x05, 0	; 5

	// address width
	mirf_config_register(SETUP_AW, 0x01);

	// tx address
	temp[0] = (rfAddress>>8)&0xFF;
    2046:	80 91 25 03 	lds	r24, 0x0325
    204a:	90 91 26 03 	lds	r25, 0x0326
    204e:	99 83       	std	Y+1, r25	; 0x01
	temp[1] = rfAddress & 0xFF;
    2050:	8a 83       	std	Y+2, r24	; 0x02
	temp[2] = 0x00;
    2052:	1b 82       	std	Y+3, r1	; 0x03
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    2054:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2056:	80 e3       	ldi	r24, 0x30	; 48
    2058:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    205c:	8e 01       	movw	r16, r28
    205e:	0f 5f       	subi	r16, 0xFF	; 255
    2060:	1f 4f       	sbci	r17, 0xFF	; 255
    2062:	c8 01       	movw	r24, r16
    2064:	63 e0       	ldi	r22, 0x03	; 3
    2066:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <SPI_Write_Block>
    mirf_CSN_hi;
    206a:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    206c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    206e:	8a e2       	ldi	r24, 0x2A	; 42
    2070:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    2074:	c8 01       	movw	r24, r16
    2076:	63 e0       	ldi	r22, 0x03	; 3
    2078:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <SPI_Write_Block>
    mirf_CSN_hi;
    207c:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    207e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2080:	81 e2       	ldi	r24, 0x21	; 33
    2082:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    2086:	81 e0       	ldi	r24, 0x01	; 1
    2088:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    mirf_CSN_hi;
    208c:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    208e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2090:	82 e2       	ldi	r24, 0x22	; 34
    2092:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    2096:	81 e0       	ldi	r24, 0x01	; 1
    2098:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    mirf_CSN_hi;
    209c:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    209e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    20a0:	84 e2       	ldi	r24, 0x24	; 36
    20a2:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    20a6:	82 e1       	ldi	r24, 0x12	; 18
    20a8:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    mirf_CSN_hi;
    20ac:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    20ae:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    20b0:	85 e2       	ldi	r24, 0x25	; 37
    20b2:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    20b6:	88 e2       	ldi	r24, 0x28	; 40
    20b8:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    mirf_CSN_hi;
    20bc:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    20be:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    20c0:	81 e3       	ldi	r24, 0x31	; 49
    20c2:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    20c6:	8d e0       	ldi	r24, 0x0D	; 13
    20c8:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    mirf_CSN_hi;
    20cc:	28 9a       	sbi	0x05, 0	; 5

	// RX payload size; it isn't needed because the dynamic payload length is activated for ACK+PAYLOAD feature
    mirf_config_register(RX_PW_P0, PAYLOAD_SIZE);

	// enable extra features
    mirf_CSN_lo;
    20ce:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_ACTIVATE);
    20d0:	80 e5       	ldi	r24, 0x50	; 80
    20d2:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    SPI_Write_Byte(0x73);
    20d6:	83 e7       	ldi	r24, 0x73	; 115
    20d8:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    mirf_CSN_hi;
    20dc:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    20de:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    20e0:	8c e3       	ldi	r24, 0x3C	; 60
    20e2:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    20e6:	81 e0       	ldi	r24, 0x01	; 1
    20e8:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    mirf_CSN_hi;
    20ec:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    20ee:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    20f0:	8d e3       	ldi	r24, 0x3D	; 61
    20f2:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    20f6:	86 e0       	ldi	r24, 0x06	; 6
    20f8:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    mirf_CSN_hi;
    20fc:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    20fe:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2100:	80 e2       	ldi	r24, 0x20	; 32
    2102:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    2106:	8f e0       	ldi	r24, 0x0F	; 15
    2108:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    mirf_CSN_hi;
    210c:	28 9a       	sbi	0x05, 0	; 5

    // Start receiver 
    //PTX = 0;        // Start in receiving mode
    //RX_POWERUP;     // Power up in receiving mode
    //mirf_CE_hi;     // Listening for pakets
}
    210e:	0f 90       	pop	r0
    2110:	0f 90       	pop	r0
    2112:	0f 90       	pop	r0
    2114:	cf 91       	pop	r28
    2116:	df 91       	pop	r29
    2118:	1f 91       	pop	r17
    211a:	0f 91       	pop	r16
    211c:	08 95       	ret

0000211e <mirf_init>:
// Initializes pins as interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    //DDRB |= ((1<<CSN)|(1<<CE));
    mirf_CE_hi;
    211e:	2c 9a       	sbi	0x05, 4	; 5
    mirf_CSN_hi;
    2120:	28 9a       	sbi	0x05, 0	; 5

	mirf_config();
    2122:	0e 94 0c 10 	call	0x2018	; 0x2018 <mirf_config>
}
    2126:	08 95       	ret

00002128 <mirf_set_RADDR>:
    //mirf_CE_hi;     // Listening for pakets
}

void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    2128:	cf 93       	push	r28
    212a:	df 93       	push	r29
    212c:	ec 01       	movw	r28, r24
    mirf_CE_lo;
    212e:	2c 98       	cbi	0x05, 4	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    2130:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2132:	8a e2       	ldi	r24, 0x2A	; 42
    2134:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    2138:	ce 01       	movw	r24, r28
    213a:	65 e0       	ldi	r22, 0x05	; 5
    213c:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <SPI_Write_Block>
    mirf_CSN_hi;
    2140:	28 9a       	sbi	0x05, 0	; 5
void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    mirf_CE_lo;
    mirf_write_register(RX_ADDR_P0,adr,5);
    mirf_CE_hi;
    2142:	2c 9a       	sbi	0x05, 4	; 5
}
    2144:	df 91       	pop	r29
    2146:	cf 91       	pop	r28
    2148:	08 95       	ret

0000214a <mirf_set_TADDR>:

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
    214a:	cf 93       	push	r28
    214c:	df 93       	push	r29
    214e:	ec 01       	movw	r28, r24
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    2150:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2152:	80 e3       	ldi	r24, 0x30	; 48
    2154:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    2158:	ce 01       	movw	r24, r28
    215a:	65 e0       	ldi	r22, 0x05	; 5
    215c:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <SPI_Write_Block>
    mirf_CSN_hi;
    2160:	28 9a       	sbi	0x05, 0	; 5

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
	mirf_write_register(TX_ADDR, adr,5);
}
    2162:	df 91       	pop	r29
    2164:	cf 91       	pop	r28
    2166:	08 95       	ret

00002168 <mirf_data_ready>:
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
    2168:	80 91 37 05 	lds	r24, 0x0537
    216c:	88 23       	and	r24, r24
    216e:	11 f0       	breq	.+4      	; 0x2174 <mirf_data_ready+0xc>
    2170:	80 e0       	ldi	r24, 0x00	; 0
    mirf_CSN_lo;                                // Pull down chip select
    status = SPI_Write_Byte(NOP);               // Read status register
    mirf_CSN_hi;                                // Pull up chip select
    return status & (1<<RX_DR);

}
    2172:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    2174:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
    2176:	8f ef       	ldi	r24, 0xFF	; 255
    2178:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
    217c:	28 9a       	sbi	0x05, 0	; 5
    return status & (1<<RX_DR);
    217e:	80 74       	andi	r24, 0x40	; 64
    2180:	08 95       	ret

00002182 <rx_fifo_is_empty>:

}

uint8_t rx_fifo_is_empty() {
    2182:	df 93       	push	r29
    2184:	cf 93       	push	r28
    2186:	0f 92       	push	r0
    2188:	cd b7       	in	r28, 0x3d	; 61
    218a:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t fifo_status = 0;
    218c:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
    218e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    2190:	87 e1       	ldi	r24, 0x17	; 23
    2192:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    2196:	be 01       	movw	r22, r28
    2198:	6f 5f       	subi	r22, 0xFF	; 255
    219a:	7f 4f       	sbci	r23, 0xFF	; 255
    219c:	cb 01       	movw	r24, r22
    219e:	41 e0       	ldi	r20, 0x01	; 1
    21a0:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    21a4:	28 9a       	sbi	0x05, 0	; 5
	
	uint8_t fifo_status = 0;

	mirf_read_register(FIFO_STATUS, &fifo_status, 1);
	
	return (uint8_t)(fifo_status&0x01);
    21a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    21a8:	81 70       	andi	r24, 0x01	; 1
    21aa:	0f 90       	pop	r0
    21ac:	cf 91       	pop	r28
    21ae:	df 91       	pop	r29
    21b0:	08 95       	ret

000021b2 <flush_rx_fifo>:

void flush_rx_fifo() {

    mirf_CSN_lo;
    21b2:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
    21b4:	82 ee       	ldi	r24, 0xE2	; 226
    21b6:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    mirf_CSN_hi;
    21ba:	28 9a       	sbi	0x05, 0	; 5

}
    21bc:	08 95       	ret

000021be <mirf_get_data>:

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    21be:	cf 93       	push	r28
    21c0:	df 93       	push	r29
    21c2:	ec 01       	movw	r28, r24
    mirf_CSN_lo;                               		// Pull down chip select
    21c4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    21c6:	81 e6       	ldi	r24, 0x61	; 97
    21c8:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    21cc:	ce 01       	movw	r24, r28
    21ce:	be 01       	movw	r22, r28
    21d0:	4d e0       	ldi	r20, 0x0D	; 13
    21d2:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
    21d6:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    21d8:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    21da:	87 e2       	ldi	r24, 0x27	; 39
    21dc:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    21e0:	80 e4       	ldi	r24, 0x40	; 64
    21e2:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    mirf_CSN_hi;
    21e6:	28 9a       	sbi	0x05, 0	; 5
    mirf_CSN_lo;                               		// Pull down chip select
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    mirf_CSN_hi;                               		// Pull up chip select
    mirf_config_register(STATUS,(1<<RX_DR));   		// Reset status register
}
    21e8:	df 91       	pop	r29
    21ea:	cf 91       	pop	r28
    21ec:	08 95       	ret

000021ee <mirf_config_register>:

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    21ee:	df 93       	push	r29
    21f0:	cf 93       	push	r28
    21f2:	0f 92       	push	r0
    21f4:	cd b7       	in	r28, 0x3d	; 61
    21f6:	de b7       	in	r29, 0x3e	; 62
    mirf_CSN_lo;
    21f8:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    21fa:	8f 71       	andi	r24, 0x1F	; 31
    21fc:	80 62       	ori	r24, 0x20	; 32
    21fe:	69 83       	std	Y+1, r22	; 0x01
    2200:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    2204:	69 81       	ldd	r22, Y+1	; 0x01
    2206:	86 2f       	mov	r24, r22
    2208:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    mirf_CSN_hi;
    220c:	28 9a       	sbi	0x05, 0	; 5
}
    220e:	0f 90       	pop	r0
    2210:	cf 91       	pop	r28
    2212:	df 91       	pop	r29
    2214:	08 95       	ret

00002216 <mirf_read_register>:

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    2216:	0f 93       	push	r16
    2218:	1f 93       	push	r17
    221a:	df 93       	push	r29
    221c:	cf 93       	push	r28
    221e:	0f 92       	push	r0
    2220:	cd b7       	in	r28, 0x3d	; 61
    2222:	de b7       	in	r29, 0x3e	; 62
    2224:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    2226:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    2228:	8f 71       	andi	r24, 0x1F	; 31
    222a:	49 83       	std	Y+1, r20	; 0x01
    222c:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    2230:	c8 01       	movw	r24, r16
    2232:	b8 01       	movw	r22, r16
    2234:	49 81       	ldd	r20, Y+1	; 0x01
    2236:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    223a:	28 9a       	sbi	0x05, 0	; 5
}
    223c:	0f 90       	pop	r0
    223e:	cf 91       	pop	r28
    2240:	df 91       	pop	r29
    2242:	1f 91       	pop	r17
    2244:	0f 91       	pop	r16
    2246:	08 95       	ret

00002248 <mirf_write_register>:

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    2248:	0f 93       	push	r16
    224a:	1f 93       	push	r17
    224c:	df 93       	push	r29
    224e:	cf 93       	push	r28
    2250:	0f 92       	push	r0
    2252:	cd b7       	in	r28, 0x3d	; 61
    2254:	de b7       	in	r29, 0x3e	; 62
    2256:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    2258:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    225a:	8f 71       	andi	r24, 0x1F	; 31
    225c:	80 62       	ori	r24, 0x20	; 32
    225e:	49 83       	std	Y+1, r20	; 0x01
    2260:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    2264:	c8 01       	movw	r24, r16
    2266:	49 81       	ldd	r20, Y+1	; 0x01
    2268:	64 2f       	mov	r22, r20
    226a:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <SPI_Write_Block>
    mirf_CSN_hi;
    226e:	28 9a       	sbi	0x05, 0	; 5
}
    2270:	0f 90       	pop	r0
    2272:	cf 91       	pop	r28
    2274:	df 91       	pop	r29
    2276:	1f 91       	pop	r17
    2278:	0f 91       	pop	r16
    227a:	08 95       	ret

0000227c <mirf_send>:


void mirf_send(uint8_t * value, uint8_t len) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
    227c:	0f 93       	push	r16
    227e:	1f 93       	push	r17
    2280:	df 93       	push	r29
    2282:	cf 93       	push	r28
    2284:	0f 92       	push	r0
    2286:	cd b7       	in	r28, 0x3d	; 61
    2288:	de b7       	in	r29, 0x3e	; 62
    228a:	8c 01       	movw	r16, r24
    while (PTX) {}                  // Wait until last paket is send
    228c:	80 91 37 05 	lds	r24, 0x0537
    2290:	88 23       	and	r24, r24
    2292:	e1 f7       	brne	.-8      	; 0x228c <mirf_send+0x10>

    mirf_CE_lo;
    2294:	2c 98       	cbi	0x05, 4	; 5

    PTX = 1;                        // Set to transmitter mode
    2296:	81 e0       	ldi	r24, 0x01	; 1
    2298:	80 93 37 05 	sts	0x0537, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    229c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    229e:	80 e2       	ldi	r24, 0x20	; 32
    22a0:	69 83       	std	Y+1, r22	; 0x01
    22a2:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    22a6:	8a e4       	ldi	r24, 0x4A	; 74
    22a8:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    mirf_CSN_hi;
    22ac:	28 9a       	sbi	0x05, 0	; 5
    mirf_CE_lo;

    PTX = 1;                        // Set to transmitter mode
    TX_POWERUP;                     // Power up
    
    mirf_CSN_lo;                    // Pull down chip select
    22ae:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( FLUSH_TX );     // Write cmd to flush tx fifo
    22b0:	81 ee       	ldi	r24, 0xE1	; 225
    22b2:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    mirf_CSN_hi;                    // Pull up chip select
    22b6:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CSN_lo;                    // Pull down chip select
    22b8:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( W_TX_PAYLOAD ); // Write cmd to write payload
    22ba:	80 ea       	ldi	r24, 0xA0	; 160
    22bc:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    SPI_Write_Block(value,len);   // Write payload
    22c0:	c8 01       	movw	r24, r16
    22c2:	69 81       	ldd	r22, Y+1	; 0x01
    22c4:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <SPI_Write_Block>
    mirf_CSN_hi;                    // Pull up chip select
    22c8:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CE_hi;                     // Start transmission
    22ca:	2c 9a       	sbi	0x05, 4	; 5
}
    22cc:	0f 90       	pop	r0
    22ce:	cf 91       	pop	r28
    22d0:	df 91       	pop	r29
    22d2:	1f 91       	pop	r17
    22d4:	0f 91       	pop	r16
    22d6:	08 95       	ret

000022d8 <writeAckPayload>:

void writeAckPayload(unsigned char *data, unsigned char size) {
    22d8:	ef 92       	push	r14
    22da:	ff 92       	push	r15
    22dc:	0f 93       	push	r16
    22de:	1f 93       	push	r17
    22e0:	df 93       	push	r29
    22e2:	cf 93       	push	r28
    22e4:	0f 92       	push	r0
    22e6:	cd b7       	in	r28, 0x3d	; 61
    22e8:	de b7       	in	r29, 0x3e	; 62
    22ea:	18 2f       	mov	r17, r24
    22ec:	06 2f       	mov	r16, r22
	return pWidth;
}

void flushTxFifo() {

    mirf_CSN_lo;
    22ee:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    22f0:	81 ee       	ldi	r24, 0xE1	; 225
    22f2:	99 83       	std	Y+1, r25	; 0x01
    22f4:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    mirf_CSN_hi;
    22f8:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
    22fa:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
    22fc:	88 ea       	ldi	r24, 0xA8	; 168
    22fe:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>

	for(k=0; k<size; k++) {
    2302:	99 81       	ldd	r25, Y+1	; 0x01
    2304:	00 23       	and	r16, r16
    2306:	61 f0       	breq	.+24     	; 0x2320 <writeAckPayload+0x48>
    2308:	61 2f       	mov	r22, r17
    230a:	79 2f       	mov	r23, r25
    230c:	7b 01       	movw	r14, r22
		SPI_Write_Byte(data[k]);
    230e:	f7 01       	movw	r30, r14
    2310:	81 91       	ld	r24, Z+
    2312:	7f 01       	movw	r14, r30
    2314:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>

    mirf_CSN_lo;

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);

	for(k=0; k<size; k++) {
    2318:	8e 2d       	mov	r24, r14
    231a:	81 1b       	sub	r24, r17
    231c:	80 17       	cp	r24, r16
    231e:	b8 f3       	brcs	.-18     	; 0x230e <writeAckPayload+0x36>
		SPI_Write_Byte(data[k]);
	}	

    mirf_CSN_hi;
    2320:	28 9a       	sbi	0x05, 0	; 5


}
    2322:	0f 90       	pop	r0
    2324:	cf 91       	pop	r28
    2326:	df 91       	pop	r29
    2328:	1f 91       	pop	r17
    232a:	0f 91       	pop	r16
    232c:	ff 90       	pop	r15
    232e:	ef 90       	pop	r14
    2330:	08 95       	ret

00002332 <readPayloadWidthFromTopFifo>:

uint8_t readPayloadWidthFromTopFifo() {
	uint8_t pWidth = 0;

    mirf_CSN_lo;
    2332:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_R_RX_PL_WID);
    2334:	80 e6       	ldi	r24, 0x60	; 96
    2336:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
	pWidth = SPI_Write_Byte(NOP); 	// not specified in the datasheet but the "NRF_R_RX_PL_WID" has a parameter,
    233a:	8f ef       	ldi	r24, 0xFF	; 255
    233c:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
									// we need to send a NOP to receive the actual payload size
    mirf_CSN_hi;
    2340:	28 9a       	sbi	0x05, 0	; 5
	
	return pWidth;
}
    2342:	08 95       	ret

00002344 <readPayloadWidthFromPipe0>:

uint8_t readPayloadWidthFromPipe0() {
    2344:	df 93       	push	r29
    2346:	cf 93       	push	r28
    2348:	0f 92       	push	r0
    234a:	cd b7       	in	r28, 0x3d	; 61
    234c:	de b7       	in	r29, 0x3e	; 62
	uint8_t pWidth = 0;
    234e:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
    2350:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    2352:	81 e1       	ldi	r24, 0x11	; 17
    2354:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    2358:	be 01       	movw	r22, r28
    235a:	6f 5f       	subi	r22, 0xFF	; 255
    235c:	7f 4f       	sbci	r23, 0xFF	; 255
    235e:	cb 01       	movw	r24, r22
    2360:	41 e0       	ldi	r20, 0x01	; 1
    2362:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    2366:	28 9a       	sbi	0x05, 0	; 5
	uint8_t pWidth = 0;

	mirf_read_register(RX_PW_P0, &pWidth, 1);
	
	return pWidth;
}
    2368:	89 81       	ldd	r24, Y+1	; 0x01
    236a:	0f 90       	pop	r0
    236c:	cf 91       	pop	r28
    236e:	df 91       	pop	r29
    2370:	08 95       	ret

00002372 <flushTxFifo>:

void flushTxFifo() {

    mirf_CSN_lo;
    2372:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    2374:	81 ee       	ldi	r24, 0xE1	; 225
    2376:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    mirf_CSN_hi;
    237a:	28 9a       	sbi	0x05, 0	; 5

}
    237c:	08 95       	ret

0000237e <handleRFCommands>:

void handleRFCommands() {
    237e:	ff 92       	push	r15
    2380:	0f 93       	push	r16
    2382:	1f 93       	push	r17
    2384:	df 93       	push	r29
    2386:	cf 93       	push	r28
    2388:	0f 92       	push	r0
    238a:	cd b7       	in	r28, 0x3d	; 61
    238c:	de b7       	in	r29, 0x3e	; 62
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
    238e:	80 91 37 05 	lds	r24, 0x0537
    2392:	88 23       	and	r24, r24
    2394:	39 f0       	breq	.+14     	; 0x23a4 <handleRFCommands+0x26>

		

	}

}
    2396:	0f 90       	pop	r0
    2398:	cf 91       	pop	r28
    239a:	df 91       	pop	r29
    239c:	1f 91       	pop	r17
    239e:	0f 91       	pop	r16
    23a0:	ff 90       	pop	r15
    23a2:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    23a4:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
    23a6:	8f ef       	ldi	r24, 0xFF	; 255
    23a8:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
    23ac:	28 9a       	sbi	0x05, 0	; 5

	unsigned int i=0;
	//uint8_t pWidth = 0;
	//uint8_t pWidthP0 = 0;

	if(mirf_data_ready()) {
    23ae:	86 ff       	sbrs	r24, 6
    23b0:	f2 cf       	rjmp	.-28     	; 0x2396 <handleRFCommands+0x18>
		//if(spiCommError) {
		//	usart0Transmit(0xFE,1);
		//	return;
		//}

		rfFlags |= 0x02;
    23b2:	80 91 27 03 	lds	r24, 0x0327
    23b6:	82 60       	ori	r24, 0x02	; 2
    23b8:	80 93 27 03 	sts	0x0327, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    23bc:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    23be:	87 e2       	ldi	r24, 0x27	; 39
    23c0:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    23c4:	80 e7       	ldi	r24, 0x70	; 112
    23c6:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    mirf_CSN_hi;
    23ca:	28 9a       	sbi	0x05, 0	; 5

}

uint8_t rx_fifo_is_empty() {
	
	uint8_t fifo_status = 0;
    23cc:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
    23ce:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    23d0:	87 e1       	ldi	r24, 0x17	; 23
    23d2:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    23d6:	be 01       	movw	r22, r28
    23d8:	6f 5f       	subi	r22, 0xFF	; 255
    23da:	7f 4f       	sbci	r23, 0xFF	; 255
    23dc:	cb 01       	movw	r24, r22
    23de:	41 e0       	ldi	r20, 0x01	; 1
    23e0:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    23e4:	28 9a       	sbi	0x05, 0	; 5
	
	uint8_t fifo_status = 0;

	mirf_read_register(FIFO_STATUS, &fifo_status, 1);
	
	return (uint8_t)(fifo_status&0x01);
    23e6:	89 81       	ldd	r24, Y+1	; 0x01
		// aren't present in the fifo with consequent wrong data read and wrong behavior of the robot.
		// To avoid this situtation we add this check before actually reading from the fifo to be 
		// sure there are correct data to be read.
		// We don't know why the IRQ for data reception is raised, maybe is not correctly reset sometimes
		// or it is raised when it shouldn't...
		if(rx_fifo_is_empty()) {
    23e8:	80 fd       	sbrc	r24, 0
    23ea:	d5 cf       	rjmp	.-86     	; 0x2396 <handleRFCommands+0x18>
}

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    mirf_CSN_lo;                               		// Pull down chip select
    23ec:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    23ee:	81 e6       	ldi	r24, 0x61	; 97
    23f0:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    23f4:	8c e8       	ldi	r24, 0x8C	; 140
    23f6:	99 e0       	ldi	r25, 0x09	; 9
    23f8:	bc 01       	movw	r22, r24
    23fa:	4d e0       	ldi	r20, 0x0D	; 13
    23fc:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
    2400:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    2402:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2404:	87 e2       	ldi	r24, 0x27	; 39
    2406:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    240a:	80 e4       	ldi	r24, 0x40	; 64
    240c:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    mirf_CSN_hi;
    2410:	28 9a       	sbi	0x05, 0	; 5
	return (uint8_t)(fifo_status&0x01);
}

void flush_rx_fifo() {

    mirf_CSN_lo;
    2412:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
    2414:	82 ee       	ldi	r24, 0xE2	; 226
    2416:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    mirf_CSN_hi;
    241a:	28 9a       	sbi	0x05, 0	; 5
		mirf_get_data(rfData);
		flush_rx_fifo();

		//usartTransmit(rfData[0]);

		if(rfDebugMode==1) {
    241c:	80 91 29 03 	lds	r24, 0x0329
    2420:	81 30       	cpi	r24, 0x01	; 1
    2422:	09 f4       	brne	.+2      	; 0x2426 <handleRFCommands+0xa8>
    2424:	4b c1       	rjmp	.+662    	; 0x26bc <handleRFCommands+0x33e>

			//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
			// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
			// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    2426:	40 91 8c 09 	lds	r20, 0x098C
    242a:	24 2f       	mov	r18, r20
    242c:	44 23       	and	r20, r20
    242e:	09 f0       	breq	.+2      	; 0x2432 <handleRFCommands+0xb4>
    2430:	9c c1       	rjmp	.+824    	; 0x276a <handleRFCommands+0x3ec>
    2432:	50 91 8d 09 	lds	r21, 0x098D
    2436:	e5 2f       	mov	r30, r21
    2438:	55 23       	and	r21, r21
    243a:	09 f4       	brne	.+2      	; 0x243e <handleRFCommands+0xc0>
    243c:	10 c2       	rjmp	.+1056   	; 0x285e <handleRFCommands+0x4e0>

				sleep(60);
    243e:	00 91 8e 09 	lds	r16, 0x098E

			}

			if(calibrateOdomFlag==0) { 
    2442:	80 91 70 05 	lds	r24, 0x0570
    2446:	88 23       	and	r24, r24
    2448:	41 f5       	brne	.+80     	; 0x249a <handleRFCommands+0x11c>
				speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    244a:	70 91 90 09 	lds	r23, 0x0990
    244e:	27 2f       	mov	r18, r23
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	2f 77       	andi	r18, 0x7F	; 127
    2454:	30 70       	andi	r19, 0x00	; 0
    2456:	30 93 24 03 	sts	0x0324, r19
    245a:	20 93 23 03 	sts	0x0323, r18
				speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
    245e:	60 91 91 09 	lds	r22, 0x0991
    2462:	86 2f       	mov	r24, r22
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	8f 77       	andi	r24, 0x7F	; 127
    2468:	90 70       	andi	r25, 0x00	; 0
    246a:	90 93 22 03 	sts	0x0322, r25
    246e:	80 93 21 03 	sts	0x0321, r24
											// in the same range of the measured speed that is 0..800.
											// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
											// this means that the range is more or less 0..400.


				if((rfData[4]&0x80)==0x80) {			// motor right forward
    2472:	77 fd       	sbrc	r23, 7
    2474:	03 c0       	rjmp	.+6      	; 0x247c <handleRFCommands+0xfe>
					pwm_right_desired = speedr; 		// speed received (0..127) is expressed in 1/5 of mm/s (0..635 mm/s)
				} else {								// backward
					pwm_right_desired = -(speedr);
    2476:	30 95       	com	r19
    2478:	21 95       	neg	r18
    247a:	3f 4f       	sbci	r19, 0xFF	; 255
    247c:	30 93 0a 03 	sts	0x030A, r19
    2480:	20 93 09 03 	sts	0x0309, r18
				}

				if((rfData[5]&0x80)==0x80) {			// motor left forward
    2484:	67 fd       	sbrc	r22, 7
    2486:	03 c0       	rjmp	.+6      	; 0x248e <handleRFCommands+0x110>
					pwm_left_desired = speedl;
				} else {								// backward
					pwm_left_desired = -(speedl);
    2488:	90 95       	com	r25
    248a:	81 95       	neg	r24
    248c:	9f 4f       	sbci	r25, 0xFF	; 255
    248e:	90 93 0c 03 	sts	0x030C, r25
    2492:	80 93 0b 03 	sts	0x030B, r24
    2496:	24 2f       	mov	r18, r20
    2498:	e5 2f       	mov	r30, r21

			}


			for(i=0; i<3; i++) {
				dataLED[i]=rfData[i]&0xFF;
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	30 93 75 09 	sts	0x0975, r19
    24a0:	20 93 74 09 	sts	0x0974, r18
    24a4:	f0 e0       	ldi	r31, 0x00	; 0
    24a6:	f0 93 77 09 	sts	0x0977, r31
    24aa:	e0 93 76 09 	sts	0x0976, r30
    24ae:	10 e0       	ldi	r17, 0x00	; 0
    24b0:	10 93 79 09 	sts	0x0979, r17
    24b4:	00 93 78 09 	sts	0x0978, r16
			}
			pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
    24b8:	92 2f       	mov	r25, r18
    24ba:	88 27       	eor	r24, r24
    24bc:	82 1b       	sub	r24, r18
    24be:	93 0b       	sbc	r25, r19
    24c0:	24 e6       	ldi	r18, 0x64	; 100
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	b9 01       	movw	r22, r18
    24c6:	0e 94 54 56 	call	0xaca8	; 0xaca8 <__udivmodhi4>
    24ca:	f6 2e       	mov	r15, r22
    24cc:	f0 94       	com	r15
    24ce:	f0 92 0c 02 	sts	0x020C, r15
			pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
    24d2:	5e 2f       	mov	r21, r30
    24d4:	44 27       	eor	r20, r20
    24d6:	4e 1b       	sub	r20, r30
    24d8:	5f 0b       	sbc	r21, r31
    24da:	ca 01       	movw	r24, r20
    24dc:	b9 01       	movw	r22, r18
    24de:	0e 94 54 56 	call	0xaca8	; 0xaca8 <__udivmodhi4>
    24e2:	60 95       	com	r22
    24e4:	60 93 0e 02 	sts	0x020E, r22
			pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
    24e8:	50 2f       	mov	r21, r16
    24ea:	44 27       	eor	r20, r20
    24ec:	40 1b       	sub	r20, r16
    24ee:	51 0b       	sbc	r21, r17
    24f0:	ca 01       	movw	r24, r20
    24f2:	b9 01       	movw	r22, r18
    24f4:	0e 94 54 56 	call	0xaca8	; 0xaca8 <__udivmodhi4>
    24f8:	60 95       	com	r22
    24fa:	60 93 0d 02 	sts	0x020D, r22
			updateRedLed(pwm_red);
    24fe:	8f 2d       	mov	r24, r15
    2500:	0e 94 a2 3e 	call	0x7d44	; 0x7d44 <updateRedLed>
			updateGreenLed(pwm_green);
    2504:	80 91 0d 02 	lds	r24, 0x020D
    2508:	0e 94 b6 3e 	call	0x7d6c	; 0x7d6c <updateGreenLed>
			updateBlueLed(pwm_blue);
    250c:	80 91 0e 02 	lds	r24, 0x020E
    2510:	0e 94 ca 3e 	call	0x7d94	; 0x7d94 <updateBlueLed>


			if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
    2514:	80 91 8f 09 	lds	r24, 0x098F
    2518:	80 ff       	sbrs	r24, 0
    251a:	59 c1       	rjmp	.+690    	; 0x27ce <handleRFCommands+0x450>
				LED_IR1_LOW;
    251c:	44 98       	cbi	0x08, 4	; 8
			} else {
				LED_IR1_HIGH;
			}

			if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
    251e:	81 ff       	sbrs	r24, 1
    2520:	54 c1       	rjmp	.+680    	; 0x27ca <handleRFCommands+0x44c>
				LED_IR2_LOW;
    2522:	45 98       	cbi	0x08, 5	; 8
			} else {
				LED_IR2_HIGH;
			}

			if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
    2524:	98 2f       	mov	r25, r24
    2526:	82 ff       	sbrs	r24, 2
    2528:	4d c1       	rjmp	.+666    	; 0x27c4 <handleRFCommands+0x446>
				irEnabled = 1;
    252a:	21 e0       	ldi	r18, 0x01	; 1
    252c:	20 93 12 02 	sts	0x0212, r18
			} else {
				irEnabled = 0;
			}

			if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
    2530:	84 fd       	sbrc	r24, 4
    2532:	a2 c1       	rjmp	.+836    	; 0x2878 <handleRFCommands+0x4fa>
				calibrateSensors();
				resetOdometry();
			}

			if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
    2534:	86 ff       	sbrs	r24, 6
    2536:	43 c1       	rjmp	.+646    	; 0x27be <handleRFCommands+0x440>
				obstacleAvoidanceEnabled = 1;
    2538:	81 e0       	ldi	r24, 0x01	; 1
    253a:	80 93 7c 04 	sts	0x047C, r24
			} else {
				obstacleAvoidanceEnabled = 0;
			}

			if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
    253e:	97 fd       	sbrc	r25, 7
    2540:	c6 c1       	rjmp	.+908    	; 0x28ce <handleRFCommands+0x550>
				cliffAvoidanceEnabled = 1;
			} else {
				cliffAvoidanceEnabled = 0;
    2542:	10 92 7d 04 	sts	0x047D, r1
			}

			// handle small green leds
			#ifdef HW_REV_3_1			

				if(bit_is_set(rfData[6], 0) ) {
    2546:	80 91 92 09 	lds	r24, 0x0992
    254a:	80 ff       	sbrs	r24, 0
    254c:	32 c1       	rjmp	.+612    	; 0x27b2 <handleRFCommands+0x434>
					GREEN_LED0_ON;
    254e:	80 91 0b 01 	lds	r24, 0x010B
    2552:	8e 7f       	andi	r24, 0xFE	; 254
    2554:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED0_OFF;
				}
				
				if(bit_is_set(rfData[6], 1) ) {
    2558:	80 91 92 09 	lds	r24, 0x0992
    255c:	81 ff       	sbrs	r24, 1
    255e:	23 c1       	rjmp	.+582    	; 0x27a6 <handleRFCommands+0x428>
					GREEN_LED1_ON;
    2560:	80 91 0b 01 	lds	r24, 0x010B
    2564:	8d 7f       	andi	r24, 0xFD	; 253
    2566:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED1_OFF;
				}
				
				if(bit_is_set(rfData[6], 2) ) {
    256a:	80 91 92 09 	lds	r24, 0x0992
    256e:	82 ff       	sbrs	r24, 2
    2570:	14 c1       	rjmp	.+552    	; 0x279a <handleRFCommands+0x41c>
					GREEN_LED2_ON;
    2572:	80 91 0b 01 	lds	r24, 0x010B
    2576:	8b 7f       	andi	r24, 0xFB	; 251
    2578:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED2_OFF;
				}												

				if(bit_is_set(rfData[6], 3) ) {
    257c:	80 91 92 09 	lds	r24, 0x0992
    2580:	83 ff       	sbrs	r24, 3
    2582:	09 c1       	rjmp	.+530    	; 0x2796 <handleRFCommands+0x418>
					GREEN_LED3_ON;
    2584:	a3 98       	cbi	0x14, 3	; 20
				} else {
					GREEN_LED3_OFF;
				}

				if(bit_is_set(rfData[6], 4) ) {
    2586:	80 91 92 09 	lds	r24, 0x0992
    258a:	84 ff       	sbrs	r24, 4
    258c:	fe c0       	rjmp	.+508    	; 0x278a <handleRFCommands+0x40c>
					GREEN_LED4_ON;
    258e:	80 91 0b 01 	lds	r24, 0x010B
    2592:	8f 7e       	andi	r24, 0xEF	; 239
    2594:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED4_OFF;
				}

				if(bit_is_set(rfData[6], 5) ) {
    2598:	80 91 92 09 	lds	r24, 0x0992
    259c:	85 ff       	sbrs	r24, 5
    259e:	ef c0       	rjmp	.+478    	; 0x277e <handleRFCommands+0x400>
					GREEN_LED5_ON;
    25a0:	80 91 0b 01 	lds	r24, 0x010B
    25a4:	8f 7d       	andi	r24, 0xDF	; 223
    25a6:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED5_OFF;
				}

				if(bit_is_set(rfData[6], 6) ) {
    25aa:	80 91 92 09 	lds	r24, 0x0992
    25ae:	86 ff       	sbrs	r24, 6
    25b0:	e0 c0       	rjmp	.+448    	; 0x2772 <handleRFCommands+0x3f4>
					GREEN_LED6_ON;
    25b2:	80 91 0b 01 	lds	r24, 0x010B
    25b6:	8f 7b       	andi	r24, 0xBF	; 191
    25b8:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED6_OFF;
				}

				if(bit_is_set(rfData[6], 7) ) {
    25bc:	80 91 92 09 	lds	r24, 0x0992
    25c0:	87 fd       	sbrc	r24, 7
    25c2:	7f c1       	rjmp	.+766    	; 0x28c2 <handleRFCommands+0x544>
					GREEN_LED7_ON;
				} else {
					GREEN_LED7_OFF;
    25c4:	80 91 0b 01 	lds	r24, 0x010B
    25c8:	80 68       	ori	r24, 0x80	; 128
    25ca:	80 93 0b 01 	sts	0x010B, r24
				}

			#endif
		
			if(currentSelector == 8) {
    25ce:	80 91 5c 04 	lds	r24, 0x045C
    25d2:	88 30       	cpi	r24, 0x08	; 8
    25d4:	09 f4       	brne	.+2      	; 0x25d8 <handleRFCommands+0x25a>
    25d6:	58 c1       	rjmp	.+688    	; 0x2888 <handleRFCommands+0x50a>

			// read and handle the remaining bytes of the payload (at the moment not used)


			// write back the ack payload
			ackPayload[0] = packetId&0xFF;
    25d8:	80 91 0b 02 	lds	r24, 0x020B
    25dc:	80 93 c4 08 	sts	0x08C4, r24

			switch(packetId) {
    25e0:	85 30       	cpi	r24, 0x05	; 5
    25e2:	09 f4       	brne	.+2      	; 0x25e6 <handleRFCommands+0x268>
    25e4:	78 c1       	rjmp	.+752    	; 0x28d6 <handleRFCommands+0x558>
    25e6:	86 30       	cpi	r24, 0x06	; 6
    25e8:	08 f4       	brcc	.+2      	; 0x25ec <handleRFCommands+0x26e>
    25ea:	f3 c0       	rjmp	.+486    	; 0x27d2 <handleRFCommands+0x454>
    25ec:	86 30       	cpi	r24, 0x06	; 6
    25ee:	09 f4       	brne	.+2      	; 0x25f2 <handleRFCommands+0x274>
    25f0:	34 c2       	rjmp	.+1128   	; 0x2a5a <handleRFCommands+0x6dc>
    25f2:	87 30       	cpi	r24, 0x07	; 7
    25f4:	09 f0       	breq	.+2      	; 0x25f8 <handleRFCommands+0x27a>
    25f6:	62 c0       	rjmp	.+196    	; 0x26bc <handleRFCommands+0x33e>
					packetId = 7;
					break;


				case 7:
					ackPayload[1] = ((signed long int)leftMotSteps)&0xFF;
    25f8:	60 91 e5 02 	lds	r22, 0x02E5
    25fc:	70 91 e6 02 	lds	r23, 0x02E6
    2600:	80 91 e7 02 	lds	r24, 0x02E7
    2604:	90 91 e8 02 	lds	r25, 0x02E8
    2608:	0e 94 5e 54 	call	0xa8bc	; 0xa8bc <__fixsfsi>
    260c:	60 93 c5 08 	sts	0x08C5, r22
					ackPayload[2] = ((signed long int)leftMotSteps)>>8;
    2610:	70 93 c6 08 	sts	0x08C6, r23
					ackPayload[3] = ((signed long int)leftMotSteps)>>16;
    2614:	80 93 c7 08 	sts	0x08C7, r24
					ackPayload[4] = ((signed long int)leftMotSteps)>>24;
    2618:	90 93 c8 08 	sts	0x08C8, r25
					ackPayload[5] = ((signed long int)rightMotSteps)&0xFF;
    261c:	60 91 e1 02 	lds	r22, 0x02E1
    2620:	70 91 e2 02 	lds	r23, 0x02E2
    2624:	80 91 e3 02 	lds	r24, 0x02E3
    2628:	90 91 e4 02 	lds	r25, 0x02E4
    262c:	0e 94 5e 54 	call	0xa8bc	; 0xa8bc <__fixsfsi>
    2630:	60 93 c9 08 	sts	0x08C9, r22
					ackPayload[6] = ((signed long int)rightMotSteps)>>8;
    2634:	70 93 ca 08 	sts	0x08CA, r23
					ackPayload[7] = ((signed long int)rightMotSteps)>>16;
    2638:	80 93 cb 08 	sts	0x08CB, r24
					ackPayload[8] = ((signed long int)rightMotSteps)>>24;
    263c:	90 93 cc 08 	sts	0x08CC, r25
					lastTheta = theta;
    2640:	60 91 7f 04 	lds	r22, 0x047F
    2644:	70 91 80 04 	lds	r23, 0x0480
    2648:	80 91 81 04 	lds	r24, 0x0481
    264c:	90 91 82 04 	lds	r25, 0x0482
    2650:	60 93 83 04 	sts	0x0483, r22
    2654:	70 93 84 04 	sts	0x0484, r23
    2658:	80 93 85 04 	sts	0x0485, r24
    265c:	90 93 86 04 	sts	0x0486, r25
					ackPayload[9] = ((signed int)(lastTheta*573.0))&0xFF;	// radians to degrees => 573 = 1800/PI
    2660:	20 e0       	ldi	r18, 0x00	; 0
    2662:	30 e4       	ldi	r19, 0x40	; 64
    2664:	4f e0       	ldi	r20, 0x0F	; 15
    2666:	54 e4       	ldi	r21, 0x44	; 68
    2668:	0e 94 aa 55 	call	0xab54	; 0xab54 <__mulsf3>
    266c:	0e 94 5e 54 	call	0xa8bc	; 0xa8bc <__fixsfsi>
    2670:	26 2f       	mov	r18, r22
    2672:	20 93 cd 08 	sts	0x08CD, r18
					ackPayload[10] = ((signed int)(lastTheta*573.0))>>8;				
    2676:	70 93 ce 08 	sts	0x08CE, r23
					ackPayload[11] = ((unsigned int)xPos)&0xFF;
    267a:	60 91 87 04 	lds	r22, 0x0487
    267e:	70 91 88 04 	lds	r23, 0x0488
    2682:	80 91 89 04 	lds	r24, 0x0489
    2686:	90 91 8a 04 	lds	r25, 0x048A
    268a:	0e 94 63 54 	call	0xa8c6	; 0xa8c6 <__fixunssfsi>
    268e:	60 93 cf 08 	sts	0x08CF, r22
					ackPayload[12] = ((unsigned int)xPos)>>8;
    2692:	70 93 d0 08 	sts	0x08D0, r23
					ackPayload[13] = ((unsigned int)yPos)&0xFF;
    2696:	60 91 8b 04 	lds	r22, 0x048B
    269a:	70 91 8c 04 	lds	r23, 0x048C
    269e:	80 91 8d 04 	lds	r24, 0x048D
    26a2:	90 91 8e 04 	lds	r25, 0x048E
    26a6:	0e 94 63 54 	call	0xa8c6	; 0xa8c6 <__fixunssfsi>
    26aa:	60 93 d1 08 	sts	0x08D1, r22
					ackPayload[14] = ((unsigned int)yPos)>>8;
    26ae:	70 93 d2 08 	sts	0x08D2, r23
					//ackPayload[10] = ((unsigned int)(thetaOld*573.0))>>8;
					//ackPayload[11] = ((unsigned int)xPosOld)&0xFF;
					//ackPayload[12] = ((unsigned int)xPosOld)>>8;
					//ackPayload[13] = ((unsigned int)yPosOld)&0xFF;
					//ackPayload[14] = ((unsigned int)yPosOld)>>8;
					ackPayload[15] = 0;
    26b2:	10 92 d3 08 	sts	0x08D3, r1
					packetId = 3;
    26b6:	83 e0       	ldi	r24, 0x03	; 3
    26b8:	80 93 0b 02 	sts	0x020B, r24
	return pWidth;
}

void flushTxFifo() {

    mirf_CSN_lo;
    26bc:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    26be:	81 ee       	ldi	r24, 0xE1	; 225
    26c0:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    mirf_CSN_hi;
    26c4:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
    26c6:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
    26c8:	88 ea       	ldi	r24, 0xA8	; 168
    26ca:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>

	for(k=0; k<size; k++) {
		SPI_Write_Byte(data[k]);
    26ce:	80 91 c4 08 	lds	r24, 0x08C4
    26d2:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    26d6:	80 91 c5 08 	lds	r24, 0x08C5
    26da:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    26de:	80 91 c6 08 	lds	r24, 0x08C6
    26e2:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    26e6:	80 91 c7 08 	lds	r24, 0x08C7
    26ea:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    26ee:	80 91 c8 08 	lds	r24, 0x08C8
    26f2:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    26f6:	80 91 c9 08 	lds	r24, 0x08C9
    26fa:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    26fe:	80 91 ca 08 	lds	r24, 0x08CA
    2702:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    2706:	80 91 cb 08 	lds	r24, 0x08CB
    270a:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    270e:	80 91 cc 08 	lds	r24, 0x08CC
    2712:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    2716:	80 91 cd 08 	lds	r24, 0x08CD
    271a:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    271e:	80 91 ce 08 	lds	r24, 0x08CE
    2722:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    2726:	80 91 cf 08 	lds	r24, 0x08CF
    272a:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    272e:	80 91 d0 08 	lds	r24, 0x08D0
    2732:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    2736:	80 91 d1 08 	lds	r24, 0x08D1
    273a:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    273e:	80 91 d2 08 	lds	r24, 0x08D2
    2742:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
    2746:	80 91 d3 08 	lds	r24, 0x08D3
    274a:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <SPI_Write_Byte>
	}	

    mirf_CSN_hi;
    274e:	28 9a       	sbi	0x05, 0	; 5

		

	}

}
    2750:	0f 90       	pop	r0
    2752:	cf 91       	pop	r28
    2754:	df 91       	pop	r29
    2756:	1f 91       	pop	r17
    2758:	0f 91       	pop	r16
    275a:	ff 90       	pop	r15
    275c:	08 95       	ret
			// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
			// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {

				sleep(60);
    275e:	8c e3       	ldi	r24, 0x3C	; 60
    2760:	0e 94 c9 21 	call	0x4392	; 0x4392 <sleep>
    2764:	40 91 8c 09 	lds	r20, 0x098C
    2768:	24 2f       	mov	r18, r20
    276a:	50 91 8d 09 	lds	r21, 0x098D
    276e:	e5 2f       	mov	r30, r21
    2770:	66 ce       	rjmp	.-820    	; 0x243e <handleRFCommands+0xc0>
				}

				if(bit_is_set(rfData[6], 6) ) {
					GREEN_LED6_ON;
				} else {
					GREEN_LED6_OFF;
    2772:	80 91 0b 01 	lds	r24, 0x010B
    2776:	80 64       	ori	r24, 0x40	; 64
    2778:	80 93 0b 01 	sts	0x010B, r24
    277c:	1f cf       	rjmp	.-450    	; 0x25bc <handleRFCommands+0x23e>
				}

				if(bit_is_set(rfData[6], 5) ) {
					GREEN_LED5_ON;
				} else {
					GREEN_LED5_OFF;
    277e:	80 91 0b 01 	lds	r24, 0x010B
    2782:	80 62       	ori	r24, 0x20	; 32
    2784:	80 93 0b 01 	sts	0x010B, r24
    2788:	10 cf       	rjmp	.-480    	; 0x25aa <handleRFCommands+0x22c>
				}

				if(bit_is_set(rfData[6], 4) ) {
					GREEN_LED4_ON;
				} else {
					GREEN_LED4_OFF;
    278a:	80 91 0b 01 	lds	r24, 0x010B
    278e:	80 61       	ori	r24, 0x10	; 16
    2790:	80 93 0b 01 	sts	0x010B, r24
    2794:	01 cf       	rjmp	.-510    	; 0x2598 <handleRFCommands+0x21a>
				}												

				if(bit_is_set(rfData[6], 3) ) {
					GREEN_LED3_ON;
				} else {
					GREEN_LED3_OFF;
    2796:	a3 9a       	sbi	0x14, 3	; 20
    2798:	f6 ce       	rjmp	.-532    	; 0x2586 <handleRFCommands+0x208>
				}
				
				if(bit_is_set(rfData[6], 2) ) {
					GREEN_LED2_ON;
				} else {
					GREEN_LED2_OFF;
    279a:	80 91 0b 01 	lds	r24, 0x010B
    279e:	84 60       	ori	r24, 0x04	; 4
    27a0:	80 93 0b 01 	sts	0x010B, r24
    27a4:	eb ce       	rjmp	.-554    	; 0x257c <handleRFCommands+0x1fe>
				}
				
				if(bit_is_set(rfData[6], 1) ) {
					GREEN_LED1_ON;
				} else {
					GREEN_LED1_OFF;
    27a6:	80 91 0b 01 	lds	r24, 0x010B
    27aa:	82 60       	ori	r24, 0x02	; 2
    27ac:	80 93 0b 01 	sts	0x010B, r24
    27b0:	dc ce       	rjmp	.-584    	; 0x256a <handleRFCommands+0x1ec>
			#ifdef HW_REV_3_1			

				if(bit_is_set(rfData[6], 0) ) {
					GREEN_LED0_ON;
				} else {
					GREEN_LED0_OFF;
    27b2:	80 91 0b 01 	lds	r24, 0x010B
    27b6:	81 60       	ori	r24, 0x01	; 1
    27b8:	80 93 0b 01 	sts	0x010B, r24
    27bc:	cd ce       	rjmp	.-614    	; 0x2558 <handleRFCommands+0x1da>
			}

			if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
				obstacleAvoidanceEnabled = 1;
			} else {
				obstacleAvoidanceEnabled = 0;
    27be:	10 92 7c 04 	sts	0x047C, r1
    27c2:	bd ce       	rjmp	.-646    	; 0x253e <handleRFCommands+0x1c0>
			}

			if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
				irEnabled = 1;
			} else {
				irEnabled = 0;
    27c4:	10 92 12 02 	sts	0x0212, r1
    27c8:	b3 ce       	rjmp	.-666    	; 0x2530 <handleRFCommands+0x1b2>
			}

			if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
				LED_IR2_LOW;
			} else {
				LED_IR2_HIGH;
    27ca:	45 9a       	sbi	0x08, 5	; 8
    27cc:	ab ce       	rjmp	.-682    	; 0x2524 <handleRFCommands+0x1a6>


			if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
				LED_IR1_LOW;
			} else {
				LED_IR1_HIGH;
    27ce:	44 9a       	sbi	0x08, 4	; 8
    27d0:	a6 ce       	rjmp	.-692    	; 0x251e <handleRFCommands+0x1a0>


			// write back the ack payload
			ackPayload[0] = packetId&0xFF;

			switch(packetId) {
    27d2:	83 30       	cpi	r24, 0x03	; 3
    27d4:	09 f4       	brne	.+2      	; 0x27d8 <handleRFCommands+0x45a>
    27d6:	db c0       	rjmp	.+438    	; 0x298e <handleRFCommands+0x610>
    27d8:	84 30       	cpi	r24, 0x04	; 4
    27da:	09 f0       	breq	.+2      	; 0x27de <handleRFCommands+0x460>
    27dc:	6f cf       	rjmp	.-290    	; 0x26bc <handleRFCommands+0x33e>
					#endif
					packetId = 4;
					break;

				case 4:
					ackPayload[1] = proximityResult[4]&0xFF;
    27de:	90 91 71 02 	lds	r25, 0x0271
    27e2:	80 91 72 02 	lds	r24, 0x0272
    27e6:	90 93 c5 08 	sts	0x08C5, r25
					ackPayload[2] = proximityResult[4]>>8;
    27ea:	80 93 c6 08 	sts	0x08C6, r24
					ackPayload[3] = proximityResult[8]&0xFF;
    27ee:	90 91 79 02 	lds	r25, 0x0279
    27f2:	80 91 7a 02 	lds	r24, 0x027A
    27f6:	90 93 c7 08 	sts	0x08C7, r25
					ackPayload[4] = proximityResult[8]>>8;
    27fa:	80 93 c8 08 	sts	0x08C8, r24
					ackPayload[5] = proximityResult[9]&0xFF;
    27fe:	90 91 7b 02 	lds	r25, 0x027B
    2802:	80 91 7c 02 	lds	r24, 0x027C
    2806:	90 93 c9 08 	sts	0x08C9, r25
					ackPayload[6] = proximityResult[9]>>8;
    280a:	80 93 ca 08 	sts	0x08CA, r24
					ackPayload[7] = proximityResult[10]&0xFF;
    280e:	90 91 7d 02 	lds	r25, 0x027D
    2812:	80 91 7e 02 	lds	r24, 0x027E
    2816:	90 93 cb 08 	sts	0x08CB, r25
					ackPayload[8] = proximityResult[10]>>8;
    281a:	80 93 cc 08 	sts	0x08CC, r24
					ackPayload[9] = proximityResult[11]&0xFF;
    281e:	90 91 7f 02 	lds	r25, 0x027F
    2822:	80 91 80 02 	lds	r24, 0x0280
    2826:	90 93 cd 08 	sts	0x08CD, r25
					ackPayload[10] = proximityResult[11]>>8;
    282a:	80 93 ce 08 	sts	0x08CE, r24
					ackPayload[11] = accX&0xFF;
    282e:	90 91 3c 04 	lds	r25, 0x043C
    2832:	80 91 3d 04 	lds	r24, 0x043D
    2836:	90 93 cf 08 	sts	0x08CF, r25
					ackPayload[12] = accX>>8;
    283a:	80 93 d0 08 	sts	0x08D0, r24
					ackPayload[13] = accY&0xFF;
    283e:	90 91 3e 04 	lds	r25, 0x043E
    2842:	80 91 3f 04 	lds	r24, 0x043F
    2846:	90 93 d1 08 	sts	0x08D1, r25
					ackPayload[14] = accY>>8;
    284a:	80 93 d2 08 	sts	0x08D2, r24
					ackPayload[15] = irCommand;
    284e:	80 91 37 04 	lds	r24, 0x0437
    2852:	80 93 d3 08 	sts	0x08D3, r24
					packetId = 5;
    2856:	85 e0       	ldi	r24, 0x05	; 5
    2858:	80 93 0b 02 	sts	0x020B, r24
					break;
    285c:	2f cf       	rjmp	.-418    	; 0x26bc <handleRFCommands+0x33e>

			//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
			// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
			// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    285e:	00 91 8e 09 	lds	r16, 0x098E
    2862:	00 23       	and	r16, r16
    2864:	09 f0       	breq	.+2      	; 0x2868 <handleRFCommands+0x4ea>
    2866:	4b c1       	rjmp	.+662    	; 0x2afe <handleRFCommands+0x780>
    2868:	80 91 8f 09 	lds	r24, 0x098F
    286c:	88 30       	cpi	r24, 0x08	; 8
    286e:	09 f4       	brne	.+2      	; 0x2872 <handleRFCommands+0x4f4>
    2870:	48 c1       	rjmp	.+656    	; 0x2b02 <handleRFCommands+0x784>
    2872:	e0 2f       	mov	r30, r16
    2874:	20 2f       	mov	r18, r16
    2876:	e5 cd       	rjmp	.-1078   	; 0x2442 <handleRFCommands+0xc4>
			} else {
				irEnabled = 0;
			}

			if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
				calibrateSensors();
    2878:	0e 94 9a 41 	call	0x8334	; 0x8334 <calibrateSensors>
				resetOdometry();
    287c:	0e 94 42 22 	call	0x4484	; 0x4484 <resetOdometry>
    2880:	90 91 8f 09 	lds	r25, 0x098F
    2884:	89 2f       	mov	r24, r25
    2886:	56 ce       	rjmp	.-852    	; 0x2534 <handleRFCommands+0x1b6>
				}

			#endif
		
			if(currentSelector == 8) {
				if(calibrateOdomFlag==0) {
    2888:	80 91 70 05 	lds	r24, 0x0570
    288c:	88 23       	and	r24, r24
    288e:	09 f0       	breq	.+2      	; 0x2892 <handleRFCommands+0x514>
    2890:	a3 ce       	rjmp	.-698    	; 0x25d8 <handleRFCommands+0x25a>
					if((rfData[7]&0b00000001)==0b00000001) {
    2892:	80 91 93 09 	lds	r24, 0x0993
    2896:	80 ff       	sbrs	r24, 0
    2898:	9f ce       	rjmp	.-706    	; 0x25d8 <handleRFCommands+0x25a>
						calibrateSensors();
    289a:	0e 94 9a 41 	call	0x8334	; 0x8334 <calibrateSensors>
						proximityResult[8] = 1023;	// because the first time this value could be low after calibration
    289e:	8f ef       	ldi	r24, 0xFF	; 255
    28a0:	93 e0       	ldi	r25, 0x03	; 3
    28a2:	90 93 7a 02 	sts	0x027A, r25
    28a6:	80 93 79 02 	sts	0x0279, r24
						proximityResult[11] = 1023;	// and in that case a false black line will be detected
    28aa:	90 93 80 02 	sts	0x0280, r25
    28ae:	80 93 7f 02 	sts	0x027F, r24
						calibState = 0;
    28b2:	10 92 63 0b 	sts	0x0B63, r1
						calibVelIndex = 1;
    28b6:	81 e0       	ldi	r24, 0x01	; 1
    28b8:	80 93 bd 08 	sts	0x08BD, r24
						calibrateOdomFlag = 1;
    28bc:	80 93 70 05 	sts	0x0570, r24
    28c0:	8b ce       	rjmp	.-746    	; 0x25d8 <handleRFCommands+0x25a>
				} else {
					GREEN_LED6_OFF;
				}

				if(bit_is_set(rfData[6], 7) ) {
					GREEN_LED7_ON;
    28c2:	80 91 0b 01 	lds	r24, 0x010B
    28c6:	8f 77       	andi	r24, 0x7F	; 127
    28c8:	80 93 0b 01 	sts	0x010B, r24
    28cc:	80 ce       	rjmp	.-768    	; 0x25ce <handleRFCommands+0x250>
			} else {
				obstacleAvoidanceEnabled = 0;
			}

			if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
				cliffAvoidanceEnabled = 1;
    28ce:	81 e0       	ldi	r24, 0x01	; 1
    28d0:	80 93 7d 04 	sts	0x047D, r24
    28d4:	38 ce       	rjmp	.-912    	; 0x2546 <handleRFCommands+0x1c8>
					ackPayload[15] = irCommand;
					packetId = 5;
					break;

				case 5:
					ackPayload[1] = proximityValue[0]&0xFF;
    28d6:	80 91 39 02 	lds	r24, 0x0239
    28da:	90 91 3a 02 	lds	r25, 0x023A
    28de:	80 93 c5 08 	sts	0x08C5, r24
					ackPayload[2] = proximityValue[0]>>8;
    28e2:	80 91 39 02 	lds	r24, 0x0239
    28e6:	90 91 3a 02 	lds	r25, 0x023A
    28ea:	90 93 c6 08 	sts	0x08C6, r25
					ackPayload[3] = proximityValue[2]&0xFF;
    28ee:	80 91 3d 02 	lds	r24, 0x023D
    28f2:	90 91 3e 02 	lds	r25, 0x023E
    28f6:	80 93 c7 08 	sts	0x08C7, r24
					ackPayload[4] = proximityValue[2]>>8;
    28fa:	80 91 3d 02 	lds	r24, 0x023D
    28fe:	90 91 3e 02 	lds	r25, 0x023E
    2902:	90 93 c8 08 	sts	0x08C8, r25
					ackPayload[5] = proximityValue[4]&0xFF;
    2906:	80 91 41 02 	lds	r24, 0x0241
    290a:	90 91 42 02 	lds	r25, 0x0242
    290e:	80 93 c9 08 	sts	0x08C9, r24
					ackPayload[6] = proximityValue[4]>>8;
    2912:	80 91 41 02 	lds	r24, 0x0241
    2916:	90 91 42 02 	lds	r25, 0x0242
    291a:	90 93 ca 08 	sts	0x08CA, r25
					ackPayload[7] = proximityValue[6]&0xFF;
    291e:	80 91 45 02 	lds	r24, 0x0245
    2922:	90 91 46 02 	lds	r25, 0x0246
    2926:	80 93 cb 08 	sts	0x08CB, r24
					ackPayload[8] = proximityValue[6]>>8;
    292a:	80 91 45 02 	lds	r24, 0x0245
    292e:	90 91 46 02 	lds	r25, 0x0246
    2932:	90 93 cc 08 	sts	0x08CC, r25
					ackPayload[9] = proximityValue[10]&0xFF;
    2936:	80 91 4d 02 	lds	r24, 0x024D
    293a:	90 91 4e 02 	lds	r25, 0x024E
    293e:	80 93 cd 08 	sts	0x08CD, r24
					ackPayload[10] = proximityValue[10]>>8;
    2942:	80 91 4d 02 	lds	r24, 0x024D
    2946:	90 91 4e 02 	lds	r25, 0x024E
    294a:	90 93 ce 08 	sts	0x08CE, r25
					ackPayload[11] = proximityValue[12]&0xFF;
    294e:	80 91 51 02 	lds	r24, 0x0251
    2952:	90 91 52 02 	lds	r25, 0x0252
    2956:	80 93 cf 08 	sts	0x08CF, r24
					ackPayload[12] = proximityValue[12]>>8;
    295a:	80 91 51 02 	lds	r24, 0x0251
    295e:	90 91 52 02 	lds	r25, 0x0252
    2962:	90 93 d0 08 	sts	0x08D0, r25
					ackPayload[13] = proximityValue[14]&0xFF;
    2966:	80 91 55 02 	lds	r24, 0x0255
    296a:	90 91 56 02 	lds	r25, 0x0256
    296e:	80 93 d1 08 	sts	0x08D1, r24
					ackPayload[14] = proximityValue[14]>>8;
    2972:	80 91 55 02 	lds	r24, 0x0255
    2976:	90 91 56 02 	lds	r25, 0x0256
    297a:	90 93 d2 08 	sts	0x08D2, r25
					ackPayload[15] = currentSelector;
    297e:	80 91 5c 04 	lds	r24, 0x045C
    2982:	80 93 d3 08 	sts	0x08D3, r24
					packetId = 6;
    2986:	86 e0       	ldi	r24, 0x06	; 6
    2988:	80 93 0b 02 	sts	0x020B, r24
					break;
    298c:	97 ce       	rjmp	.-722    	; 0x26bc <handleRFCommands+0x33e>
			// write back the ack payload
			ackPayload[0] = packetId&0xFF;

			switch(packetId) {
				case 3:
					ackPayload[1] = proximityResult[0]&0xFF;
    298e:	90 91 69 02 	lds	r25, 0x0269
    2992:	80 91 6a 02 	lds	r24, 0x026A
    2996:	90 93 c5 08 	sts	0x08C5, r25
					ackPayload[2] = proximityResult[0]>>8;
    299a:	80 93 c6 08 	sts	0x08C6, r24
					ackPayload[3] = proximityResult[1]&0xFF;
    299e:	90 91 6b 02 	lds	r25, 0x026B
    29a2:	80 91 6c 02 	lds	r24, 0x026C
    29a6:	90 93 c7 08 	sts	0x08C7, r25
					ackPayload[4] = proximityResult[1]>>8;
    29aa:	80 93 c8 08 	sts	0x08C8, r24
					ackPayload[5] = proximityResult[2]&0xFF;
    29ae:	90 91 6d 02 	lds	r25, 0x026D
    29b2:	80 91 6e 02 	lds	r24, 0x026E
    29b6:	90 93 c9 08 	sts	0x08C9, r25
					ackPayload[6] = proximityResult[2]>>8;
    29ba:	80 93 ca 08 	sts	0x08CA, r24
					ackPayload[7] = proximityResult[3]&0xFF;
    29be:	90 91 6f 02 	lds	r25, 0x026F
    29c2:	80 91 70 02 	lds	r24, 0x0270
    29c6:	90 93 cb 08 	sts	0x08CB, r25
					ackPayload[8] = proximityResult[3]>>8;
    29ca:	80 93 cc 08 	sts	0x08CC, r24
					ackPayload[9] = proximityResult[5]&0xFF;
    29ce:	90 91 73 02 	lds	r25, 0x0273
    29d2:	80 91 74 02 	lds	r24, 0x0274
    29d6:	90 93 cd 08 	sts	0x08CD, r25
					ackPayload[10] = proximityResult[5]>>8;
    29da:	80 93 ce 08 	sts	0x08CE, r24
					ackPayload[11] = proximityResult[6]&0xFF;
    29de:	90 91 75 02 	lds	r25, 0x0275
    29e2:	80 91 76 02 	lds	r24, 0x0276
    29e6:	90 93 cf 08 	sts	0x08CF, r25
					ackPayload[12] = proximityResult[6]>>8;
    29ea:	80 93 d0 08 	sts	0x08D0, r24
					ackPayload[13] = proximityResult[7]&0xFF;
    29ee:	90 91 77 02 	lds	r25, 0x0277
    29f2:	80 91 78 02 	lds	r24, 0x0278
    29f6:	90 93 d1 08 	sts	0x08D1, r25
					ackPayload[14] = proximityResult[7]>>8;
    29fa:	80 93 d2 08 	sts	0x08D2, r24
					#ifdef HW_REV_3_1
						ackPayload[15] = CHARGE_ON | (BUTTON0 << 1) | (CHARGE_STAT << 2);
    29fe:	30 91 03 01 	lds	r19, 0x0103
    2a02:	80 91 03 01 	lds	r24, 0x0103
    2a06:	20 91 03 01 	lds	r18, 0x0103
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	80 72       	andi	r24, 0x20	; 32
    2a0e:	90 70       	andi	r25, 0x00	; 0
    2a10:	95 95       	asr	r25
    2a12:	87 95       	ror	r24
    2a14:	95 95       	asr	r25
    2a16:	87 95       	ror	r24
    2a18:	95 95       	asr	r25
    2a1a:	87 95       	ror	r24
    2a1c:	95 95       	asr	r25
    2a1e:	87 95       	ror	r24
    2a20:	95 95       	asr	r25
    2a22:	87 95       	ror	r24
    2a24:	88 0f       	add	r24, r24
    2a26:	99 1f       	adc	r25, r25
    2a28:	22 1f       	adc	r18, r18
    2a2a:	22 27       	eor	r18, r18
    2a2c:	22 1f       	adc	r18, r18
    2a2e:	22 0f       	add	r18, r18
    2a30:	22 0f       	add	r18, r18
    2a32:	28 2b       	or	r18, r24
    2a34:	83 2f       	mov	r24, r19
    2a36:	90 e0       	ldi	r25, 0x00	; 0
    2a38:	80 71       	andi	r24, 0x10	; 16
    2a3a:	90 70       	andi	r25, 0x00	; 0
    2a3c:	95 95       	asr	r25
    2a3e:	87 95       	ror	r24
    2a40:	95 95       	asr	r25
    2a42:	87 95       	ror	r24
    2a44:	95 95       	asr	r25
    2a46:	87 95       	ror	r24
    2a48:	95 95       	asr	r25
    2a4a:	87 95       	ror	r24
    2a4c:	28 2b       	or	r18, r24
    2a4e:	20 93 d3 08 	sts	0x08D3, r18
					#else
						ackPayload[15] = CHARGE_ON | (BUTTON0 << 1);
					#endif
					packetId = 4;
    2a52:	84 e0       	ldi	r24, 0x04	; 4
    2a54:	80 93 0b 02 	sts	0x020B, r24
					break;
    2a58:	31 ce       	rjmp	.-926    	; 0x26bc <handleRFCommands+0x33e>
					ackPayload[15] = currentSelector;
					packetId = 6;
					break;

				case 6:
					ackPayload[1] = proximityValue[8]&0xFF;
    2a5a:	80 91 49 02 	lds	r24, 0x0249
    2a5e:	90 91 4a 02 	lds	r25, 0x024A
    2a62:	80 93 c5 08 	sts	0x08C5, r24
					ackPayload[2] = proximityValue[8]>>8;
    2a66:	80 91 49 02 	lds	r24, 0x0249
    2a6a:	90 91 4a 02 	lds	r25, 0x024A
    2a6e:	90 93 c6 08 	sts	0x08C6, r25
					ackPayload[3] = proximityValue[16]&0xFF;
    2a72:	80 91 59 02 	lds	r24, 0x0259
    2a76:	90 91 5a 02 	lds	r25, 0x025A
    2a7a:	80 93 c7 08 	sts	0x08C7, r24
					ackPayload[4] = proximityValue[16]>>8;
    2a7e:	80 91 59 02 	lds	r24, 0x0259
    2a82:	90 91 5a 02 	lds	r25, 0x025A
    2a86:	90 93 c8 08 	sts	0x08C8, r25
					ackPayload[5] = proximityValue[18]&0xFF;
    2a8a:	80 91 5d 02 	lds	r24, 0x025D
    2a8e:	90 91 5e 02 	lds	r25, 0x025E
    2a92:	80 93 c9 08 	sts	0x08C9, r24
					ackPayload[6] = proximityValue[18]>>8;
    2a96:	80 91 5d 02 	lds	r24, 0x025D
    2a9a:	90 91 5e 02 	lds	r25, 0x025E
    2a9e:	90 93 ca 08 	sts	0x08CA, r25
					ackPayload[7] = proximityValue[20]&0xFF;
    2aa2:	80 91 61 02 	lds	r24, 0x0261
    2aa6:	90 91 62 02 	lds	r25, 0x0262
    2aaa:	80 93 cb 08 	sts	0x08CB, r24
					ackPayload[8] = proximityValue[20]>>8;
    2aae:	80 91 61 02 	lds	r24, 0x0261
    2ab2:	90 91 62 02 	lds	r25, 0x0262
    2ab6:	90 93 cc 08 	sts	0x08CC, r25
					ackPayload[9] = proximityValue[22]&0xFF;
    2aba:	80 91 65 02 	lds	r24, 0x0265
    2abe:	90 91 66 02 	lds	r25, 0x0266
    2ac2:	80 93 cd 08 	sts	0x08CD, r24
					ackPayload[10] = proximityValue[22]>>8;
    2ac6:	80 91 65 02 	lds	r24, 0x0265
    2aca:	90 91 66 02 	lds	r25, 0x0266
    2ace:	90 93 ce 08 	sts	0x08CE, r25
					ackPayload[11] = accZ&0xFF;
    2ad2:	90 91 40 04 	lds	r25, 0x0440
    2ad6:	80 91 41 04 	lds	r24, 0x0441
    2ada:	90 93 cf 08 	sts	0x08CF, r25
					ackPayload[12] = accZ>>8;	
    2ade:	80 93 d0 08 	sts	0x08D0, r24
					ackPayload[13] = batteryLevel&0xFF;
    2ae2:	90 91 cd 02 	lds	r25, 0x02CD
    2ae6:	80 91 ce 02 	lds	r24, 0x02CE
    2aea:	90 93 d1 08 	sts	0x08D1, r25
					ackPayload[14] = batteryLevel>>8;
    2aee:	80 93 d2 08 	sts	0x08D2, r24
					ackPayload[15] = 0;
    2af2:	10 92 d3 08 	sts	0x08D3, r1
					packetId = 7;
    2af6:	87 e0       	ldi	r24, 0x07	; 7
    2af8:	80 93 0b 02 	sts	0x020B, r24
					break;
    2afc:	df cd       	rjmp	.-1090   	; 0x26bc <handleRFCommands+0x33e>

			//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
			// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
			// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    2afe:	25 2f       	mov	r18, r21
    2b00:	a0 cc       	rjmp	.-1728   	; 0x2442 <handleRFCommands+0xc4>
    2b02:	80 91 90 09 	lds	r24, 0x0990
    2b06:	88 23       	and	r24, r24
    2b08:	09 f0       	breq	.+2      	; 0x2b0c <handleRFCommands+0x78e>
    2b0a:	b3 ce       	rjmp	.-666    	; 0x2872 <handleRFCommands+0x4f4>
    2b0c:	80 91 91 09 	lds	r24, 0x0991
    2b10:	88 23       	and	r24, r24
    2b12:	09 f4       	brne	.+2      	; 0x2b16 <handleRFCommands+0x798>
    2b14:	24 ce       	rjmp	.-952    	; 0x275e <handleRFCommands+0x3e0>
    2b16:	e0 e0       	ldi	r30, 0x00	; 0
    2b18:	20 e0       	ldi	r18, 0x00	; 0
    2b1a:	93 cc       	rjmp	.-1754   	; 0x2442 <handleRFCommands+0xc4>

00002b1c <rfEnableDebugMode>:
	}

}

void rfEnableDebugMode() {
	rfDebugMode = 1;
    2b1c:	81 e0       	ldi	r24, 0x01	; 1
    2b1e:	80 93 29 03 	sts	0x0329, r24
	rfDebugCounter = 3;
    2b22:	83 e0       	ldi	r24, 0x03	; 3
    2b24:	80 93 2a 03 	sts	0x032A, r24
}
    2b28:	08 95       	ret

00002b2a <rfDisableDebugMode>:

void rfDisableDebugMode() {
	rfDebugMode = 0;
    2b2a:	10 92 29 03 	sts	0x0329, r1
}
    2b2e:	08 95       	ret

00002b30 <rfDebugSendData>:

void rfDebugSendData() {
	ackPayload[0] = rfDebugCounter;
    2b30:	80 91 2a 03 	lds	r24, 0x032A
    2b34:	80 93 c4 08 	sts	0x08C4, r24
	while(rfData[0] != rfDebugCounter) {
    2b38:	90 91 8c 09 	lds	r25, 0x098C
    2b3c:	89 17       	cp	r24, r25
    2b3e:	41 f0       	breq	.+16     	; 0x2b50 <rfDebugSendData+0x20>
		handleRFCommands();
    2b40:	0e 94 bf 11 	call	0x237e	; 0x237e <handleRFCommands>
	rfDebugMode = 0;
}

void rfDebugSendData() {
	ackPayload[0] = rfDebugCounter;
	while(rfData[0] != rfDebugCounter) {
    2b44:	80 91 2a 03 	lds	r24, 0x032A
    2b48:	90 91 8c 09 	lds	r25, 0x098C
    2b4c:	98 17       	cp	r25, r24
    2b4e:	c1 f7       	brne	.-16     	; 0x2b40 <rfDebugSendData+0x10>
		handleRFCommands();
	}
	ackPayload[0] = 0x00;
    2b50:	10 92 c4 08 	sts	0x08C4, r1
	if(rfDebugCounter < 255) {
    2b54:	8f 3f       	cpi	r24, 0xFF	; 255
    2b56:	21 f0       	breq	.+8      	; 0x2b60 <rfDebugSendData+0x30>
		rfDebugCounter++;
    2b58:	8f 5f       	subi	r24, 0xFF	; 255
    2b5a:	80 93 2a 03 	sts	0x032A, r24
    2b5e:	08 95       	ret
	} else {
		rfDebugCounter = 3;
    2b60:	83 e0       	ldi	r24, 0x03	; 3
    2b62:	80 93 2a 03 	sts	0x032A, r24
    2b66:	08 95       	ret

00002b68 <rfDebugNextPacket>:
	}
}

void rfDebugNextPacket() {
	rfDebugCounter = 3;
    2b68:	83 e0       	ldi	r24, 0x03	; 3
    2b6a:	80 93 2a 03 	sts	0x032A, r24
}
    2b6e:	08 95       	ret

00002b70 <init_ir_remote_control>:
static unsigned char check_temp = 0;
unsigned char address = 0;
unsigned char data_ir = 0;
unsigned char check = 2;

void init_ir_remote_control(void) { 	
    2b70:	cf 93       	push	r28
    2b72:	df 93       	push	r29

	PCICR = 0;
    2b74:	c8 e6       	ldi	r28, 0x68	; 104
    2b76:	d0 e0       	ldi	r29, 0x00	; 0
    2b78:	18 82       	st	Y, r1
	PCMSK1 = 0;
    2b7a:	ac e6       	ldi	r26, 0x6C	; 108
    2b7c:	b0 e0       	ldi	r27, 0x00	; 0
    2b7e:	1c 92       	st	X, r1
	TCCR2A = 0;
    2b80:	e0 eb       	ldi	r30, 0xB0	; 176
    2b82:	f0 e0       	ldi	r31, 0x00	; 0
    2b84:	10 82       	st	Z, r1
	TCCR2B = 0;
    2b86:	10 92 b1 00 	sts	0x00B1, r1
	TIMSK2 = 0;
    2b8a:	10 92 70 00 	sts	0x0070, r1

	PCICR |= (1 << PCIE1);			// enable interrupt on change of PCINT15:8 pins
    2b8e:	88 81       	ld	r24, Y
    2b90:	82 60       	ori	r24, 0x02	; 2
    2b92:	88 83       	st	Y, r24
	PCMSK1 |= (1 << PCINT15);		// enable PCINT15
    2b94:	8c 91       	ld	r24, X
    2b96:	80 68       	ori	r24, 0x80	; 128
    2b98:	8c 93       	st	X, r24
	TCCR2A |= (1 << WGM21); 		// mode 2 => CTC mode
    2b9a:	80 81       	ld	r24, Z
    2b9c:	82 60       	ori	r24, 0x02	; 2
    2b9e:	80 83       	st	Z, r24

}
    2ba0:	df 91       	pop	r29
    2ba2:	cf 91       	pop	r28
    2ba4:	08 95       	ret

00002ba6 <__vector_10>:

// external interrupt service routine
ISR(PCINT1_vect) {
    2ba6:	1f 92       	push	r1
    2ba8:	0f 92       	push	r0
    2baa:	0f b6       	in	r0, 0x3f	; 63
    2bac:	0f 92       	push	r0
    2bae:	11 24       	eor	r1, r1
    2bb0:	8f 93       	push	r24

	if(irEnabled) {						// if the robot is configured to accept TV remote commands
    2bb2:	80 91 12 02 	lds	r24, 0x0212
    2bb6:	88 23       	and	r24, r24
    2bb8:	21 f1       	breq	.+72     	; 0x2c02 <__vector_10+0x5c>

		if(bit_is_clear(PINJ, 6)) {		// the interrupt is generated at every pin state change; we only look
    2bba:	80 91 03 01 	lds	r24, 0x0103
    2bbe:	86 fd       	sbrc	r24, 6
    2bc0:	20 c0       	rjmp	.+64     	; 0x2c02 <__vector_10+0x5c>
										// for the falling edge
			PCICR &= ~(1 << PCIE1);		// disable external interrupt
    2bc2:	80 91 68 00 	lds	r24, 0x0068
    2bc6:	8d 7f       	andi	r24, 0xFD	; 253
    2bc8:	80 93 68 00 	sts	0x0068, r24
			PCMSK1 &= ~(1 << PCINT15);
    2bcc:	80 91 6c 00 	lds	r24, 0x006C
    2bd0:	8f 77       	andi	r24, 0x7F	; 127
    2bd2:	80 93 6c 00 	sts	0x006C, r24
		
			// check the pin change isn't due to a glitch; to check this verify that
			// the pin remain low for at least 400 us (the giltches last about 200 us)
			// 0.4 / 0.032 = 13 => 0.416 us
			checkGlitch = 1;							// we're checking if this is a glitch
    2bd6:	81 e0       	ldi	r24, 0x01	; 1
    2bd8:	80 93 13 02 	sts	0x0213, r24
			OCR2A = 13;									// output compare register
    2bdc:	8d e0       	ldi	r24, 0x0D	; 13
    2bde:	80 93 b3 00 	sts	0x00B3, r24
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    2be2:	80 91 b1 00 	lds	r24, 0x00B1
    2be6:	86 60       	ori	r24, 0x06	; 6
    2be8:	80 93 b1 00 	sts	0x00B1, r24
			TIMSK2 |= (1 << OCIE2A);					// enable output compare interrupt
    2bec:	80 91 70 00 	lds	r24, 0x0070
    2bf0:	82 60       	ori	r24, 0x02	; 2
    2bf2:	80 93 70 00 	sts	0x0070, r24

			check_temp = address_temp = data_temp = 0;
    2bf6:	10 92 30 02 	sts	0x0230, r1
    2bfa:	10 92 31 02 	sts	0x0231, r1
    2bfe:	10 92 32 02 	sts	0x0232, r1

		}

	}
	
}
    2c02:	8f 91       	pop	r24
    2c04:	0f 90       	pop	r0
    2c06:	0f be       	out	0x3f, r0	; 63
    2c08:	0f 90       	pop	r0
    2c0a:	1f 90       	pop	r1
    2c0c:	18 95       	reti

00002c0e <__vector_13>:

ISR(TIMER2_COMPA_vect) {
    2c0e:	1f 92       	push	r1
    2c10:	0f 92       	push	r0
    2c12:	0f b6       	in	r0, 0x3f	; 63
    2c14:	0f 92       	push	r0
    2c16:	11 24       	eor	r1, r1
    2c18:	2f 93       	push	r18
    2c1a:	3f 93       	push	r19
    2c1c:	4f 93       	push	r20
    2c1e:	5f 93       	push	r21
    2c20:	8f 93       	push	r24
    2c22:	9f 93       	push	r25

	static int i = -1;

	//PORTB ^= (1 << 5);	// toggle red led

	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);		// stop timer2
    2c24:	80 91 b1 00 	lds	r24, 0x00B1
    2c28:	88 7f       	andi	r24, 0xF8	; 248
    2c2a:	80 93 b1 00 	sts	0x00B1, r24
	
		if(checkGlitch) {					// if checking this is a glitch
    2c2e:	80 91 13 02 	lds	r24, 0x0213
    2c32:	88 23       	and	r24, r24
    2c34:	a9 f0       	breq	.+42     	; 0x2c60 <__vector_13+0x52>

			if(REMOTE) {					// if high it is a glitch
    2c36:	80 91 03 01 	lds	r24, 0x0103
    2c3a:	86 ff       	sbrs	r24, 6
    2c3c:	65 c0       	rjmp	.+202    	; 0x2d08 <__vector_13+0xfa>

				PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    2c3e:	80 91 68 00 	lds	r24, 0x0068
    2c42:	82 60       	ori	r24, 0x02	; 2
    2c44:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    2c48:	80 91 6c 00 	lds	r24, 0x006C
    2c4c:	80 68       	ori	r24, 0x80	; 128
    2c4e:	80 93 6c 00 	sts	0x006C, r24
				i = -1;			
    2c52:	8f ef       	ldi	r24, 0xFF	; 255
    2c54:	9f ef       	ldi	r25, 0xFF	; 255
    2c56:	90 93 02 02 	sts	0x0202, r25
    2c5a:	80 93 01 02 	sts	0x0201, r24
    2c5e:	49 c0       	rjmp	.+146    	; 0x2cf2 <__vector_13+0xe4>
			}

		} else {


			if (i == -1) { 						// start bit confirmed
    2c60:	80 91 01 02 	lds	r24, 0x0201
    2c64:	90 91 02 02 	lds	r25, 0x0202
    2c68:	2f ef       	ldi	r18, 0xFF	; 255
    2c6a:	8f 3f       	cpi	r24, 0xFF	; 255
    2c6c:	92 07       	cpc	r25, r18
    2c6e:	09 f4       	brne	.+2      	; 0x2c72 <__vector_13+0x64>
    2c70:	63 c0       	rjmp	.+198    	; 0x2d38 <__vector_13+0x12a>
					check_temp = address_temp = data_temp = 0;
					i=0;

				}

			} else if (i == 1)	{ 						// check bit read and change timer period
    2c72:	81 30       	cpi	r24, 0x01	; 1
    2c74:	91 05       	cpc	r25, r1
    2c76:	09 f4       	brne	.+2      	; 0x2c7a <__vector_13+0x6c>
    2c78:	98 c0       	rjmp	.+304    	; 0x2daa <__vector_13+0x19c>
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
    2c7a:	9c 01       	movw	r18, r24
    2c7c:	22 50       	subi	r18, 0x02	; 2
    2c7e:	30 40       	sbci	r19, 0x00	; 0
    2c80:	25 30       	cpi	r18, 0x05	; 5
    2c82:	31 05       	cpc	r19, r1
    2c84:	08 f4       	brcc	.+2      	; 0x2c88 <__vector_13+0x7a>
    2c86:	67 c0       	rjmp	.+206    	; 0x2d56 <__vector_13+0x148>

				unsigned char temp = REMOTE;
				temp <<= 6-i;
				address_temp += temp;

			} else if ((i > 6) && (i < 13 )) { 			// we read data
    2c88:	9c 01       	movw	r18, r24
    2c8a:	27 50       	subi	r18, 0x07	; 7
    2c8c:	30 40       	sbci	r19, 0x00	; 0
    2c8e:	26 30       	cpi	r18, 0x06	; 6
    2c90:	31 05       	cpc	r19, r1
    2c92:	08 f0       	brcs	.+2      	; 0x2c96 <__vector_13+0x88>
    2c94:	bd c0       	rjmp	.+378    	; 0x2e10 <__vector_13+0x202>

				OCR2A = 54;
    2c96:	26 e3       	ldi	r18, 0x36	; 54
    2c98:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    2c9c:	20 91 b1 00 	lds	r18, 0x00B1
    2ca0:	26 60       	ori	r18, 0x06	; 6
    2ca2:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    2ca6:	20 91 70 00 	lds	r18, 0x0070
    2caa:	22 60       	ori	r18, 0x02	; 2
    2cac:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    2cb0:	20 91 03 01 	lds	r18, 0x0103
    2cb4:	30 e0       	ldi	r19, 0x00	; 0
    2cb6:	20 74       	andi	r18, 0x40	; 64
    2cb8:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6+6-i;
    2cba:	00 24       	eor	r0, r0
    2cbc:	22 0f       	add	r18, r18
    2cbe:	33 1f       	adc	r19, r19
    2cc0:	00 1c       	adc	r0, r0
    2cc2:	22 0f       	add	r18, r18
    2cc4:	33 1f       	adc	r19, r19
    2cc6:	00 1c       	adc	r0, r0
    2cc8:	23 2f       	mov	r18, r19
    2cca:	30 2d       	mov	r19, r0
    2ccc:	4c e0       	ldi	r20, 0x0C	; 12
    2cce:	50 e0       	ldi	r21, 0x00	; 0
    2cd0:	48 1b       	sub	r20, r24
    2cd2:	59 0b       	sbc	r21, r25
    2cd4:	02 c0       	rjmp	.+4      	; 0x2cda <__vector_13+0xcc>
    2cd6:	22 0f       	add	r18, r18
    2cd8:	33 1f       	adc	r19, r19
    2cda:	4a 95       	dec	r20
    2cdc:	e2 f7       	brpl	.-8      	; 0x2cd6 <__vector_13+0xc8>
				data_temp += temp;
    2cde:	40 91 30 02 	lds	r20, 0x0230
    2ce2:	42 0f       	add	r20, r18
    2ce4:	40 93 30 02 	sts	0x0230, r20

				i = -1;
				check = check_temp;
				address = address_temp;
				data_ir = data_temp;
				command_received=1;
    2ce8:	01 96       	adiw	r24, 0x01	; 1

		}
	
		if(i!=-1) {

			i++;
    2cea:	90 93 02 02 	sts	0x0202, r25
    2cee:	80 93 01 02 	sts	0x0201, r24

		}

}
    2cf2:	9f 91       	pop	r25
    2cf4:	8f 91       	pop	r24
    2cf6:	5f 91       	pop	r21
    2cf8:	4f 91       	pop	r20
    2cfa:	3f 91       	pop	r19
    2cfc:	2f 91       	pop	r18
    2cfe:	0f 90       	pop	r0
    2d00:	0f be       	out	0x3f, r0	; 63
    2d02:	0f 90       	pop	r0
    2d04:	1f 90       	pop	r1
    2d06:	18 95       	reti
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
				i = -1;			

			} else {						// not a glitch => real command received

				checkGlitch = 0;
    2d08:	10 92 13 02 	sts	0x0213, r1

				// activate the IR Receiver with a 2.1 ms cycle value
				// we set the resolution of the timer to be 0.032 ms (prescaler 1/256) so:
				// 2.1 / 0.032 = 64 to be set in the output compare register (=> 2.048 ms)
				// but we already wait 0.416 us => 13, so 64-13=51
				OCR2A = 51;								// output compare register
    2d0c:	83 e3       	ldi	r24, 0x33	; 51
    2d0e:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    2d12:	80 91 b1 00 	lds	r24, 0x00B1
    2d16:	86 60       	ori	r24, 0x06	; 6
    2d18:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    2d1c:	80 91 70 00 	lds	r24, 0x0070
    2d20:	82 60       	ori	r24, 0x02	; 2
    2d22:	80 93 70 00 	sts	0x0070, r24
    2d26:	80 91 01 02 	lds	r24, 0x0201
    2d2a:	90 91 02 02 	lds	r25, 0x0202

			} 

		}
	
		if(i!=-1) {
    2d2e:	2f ef       	ldi	r18, 0xFF	; 255
    2d30:	8f 3f       	cpi	r24, 0xFF	; 255
    2d32:	92 07       	cpc	r25, r18
    2d34:	c9 f6       	brne	.-78     	; 0x2ce8 <__vector_13+0xda>
    2d36:	dd cf       	rjmp	.-70     	; 0x2cf2 <__vector_13+0xe4>
		} else {


			if (i == -1) { 						// start bit confirmed

				if(REMOTE) {					// double check => if high it is only a noise
    2d38:	20 91 03 01 	lds	r18, 0x0103
    2d3c:	26 ff       	sbrs	r18, 6
    2d3e:	52 c0       	rjmp	.+164    	; 0x2de4 <__vector_13+0x1d6>

					PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    2d40:	20 91 68 00 	lds	r18, 0x0068
    2d44:	22 60       	ori	r18, 0x02	; 2
    2d46:	20 93 68 00 	sts	0x0068, r18
					PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    2d4a:	20 91 6c 00 	lds	r18, 0x006C
    2d4e:	20 68       	ori	r18, 0x80	; 128
    2d50:	20 93 6c 00 	sts	0x006C, r18
    2d54:	ce cf       	rjmp	.-100    	; 0x2cf2 <__vector_13+0xe4>
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
		
				OCR2A = 54;
    2d56:	26 e3       	ldi	r18, 0x36	; 54
    2d58:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    2d5c:	20 91 b1 00 	lds	r18, 0x00B1
    2d60:	26 60       	ori	r18, 0x06	; 6
    2d62:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    2d66:	20 91 70 00 	lds	r18, 0x0070
    2d6a:	22 60       	ori	r18, 0x02	; 2
    2d6c:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    2d70:	20 91 03 01 	lds	r18, 0x0103
    2d74:	30 e0       	ldi	r19, 0x00	; 0
    2d76:	20 74       	andi	r18, 0x40	; 64
    2d78:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6-i;
    2d7a:	00 24       	eor	r0, r0
    2d7c:	22 0f       	add	r18, r18
    2d7e:	33 1f       	adc	r19, r19
    2d80:	00 1c       	adc	r0, r0
    2d82:	22 0f       	add	r18, r18
    2d84:	33 1f       	adc	r19, r19
    2d86:	00 1c       	adc	r0, r0
    2d88:	23 2f       	mov	r18, r19
    2d8a:	30 2d       	mov	r19, r0
    2d8c:	46 e0       	ldi	r20, 0x06	; 6
    2d8e:	50 e0       	ldi	r21, 0x00	; 0
    2d90:	48 1b       	sub	r20, r24
    2d92:	59 0b       	sbc	r21, r25
    2d94:	02 c0       	rjmp	.+4      	; 0x2d9a <__vector_13+0x18c>
    2d96:	22 0f       	add	r18, r18
    2d98:	33 1f       	adc	r19, r19
    2d9a:	4a 95       	dec	r20
    2d9c:	e2 f7       	brpl	.-8      	; 0x2d96 <__vector_13+0x188>
				address_temp += temp;
    2d9e:	40 91 31 02 	lds	r20, 0x0231
    2da2:	42 0f       	add	r20, r18
    2da4:	40 93 31 02 	sts	0x0231, r20
    2da8:	9f cf       	rjmp	.-194    	; 0x2ce8 <__vector_13+0xda>

				}

			} else if (i == 1)	{ 						// check bit read and change timer period

				check_temp = REMOTE;	   				// read the check bit
    2daa:	20 91 03 01 	lds	r18, 0x0103
    2dae:	30 e0       	ldi	r19, 0x00	; 0
    2db0:	20 74       	andi	r18, 0x40	; 64
    2db2:	30 70       	andi	r19, 0x00	; 0
    2db4:	02 2e       	mov	r0, r18
    2db6:	23 2f       	mov	r18, r19
    2db8:	00 0c       	add	r0, r0
    2dba:	22 1f       	adc	r18, r18
    2dbc:	33 0b       	sbc	r19, r19
    2dbe:	00 0c       	add	r0, r0
    2dc0:	22 1f       	adc	r18, r18
    2dc2:	33 1f       	adc	r19, r19
    2dc4:	20 93 32 02 	sts	0x0232, r18
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
    2dc8:	26 e3       	ldi	r18, 0x36	; 54
    2dca:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    2dce:	20 91 b1 00 	lds	r18, 0x00B1
    2dd2:	26 60       	ori	r18, 0x06	; 6
    2dd4:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    2dd8:	20 91 70 00 	lds	r18, 0x0070
    2ddc:	22 60       	ori	r18, 0x02	; 2
    2dde:	20 93 70 00 	sts	0x0070, r18
    2de2:	82 cf       	rjmp	.-252    	; 0x2ce8 <__vector_13+0xda>

				} else {	// read the check bit
			
					//cycle value is 0.9 ms to go to check bit so:
					// 0.9 / 0.032 = 28 => 0.896
					OCR2A = 28;								// output compare register
    2de4:	8c e1       	ldi	r24, 0x1C	; 28
    2de6:	80 93 b3 00 	sts	0x00B3, r24
					TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    2dea:	80 91 b1 00 	lds	r24, 0x00B1
    2dee:	86 60       	ori	r24, 0x06	; 6
    2df0:	80 93 b1 00 	sts	0x00B1, r24
					TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt					
    2df4:	80 91 70 00 	lds	r24, 0x0070
    2df8:	82 60       	ori	r24, 0x02	; 2
    2dfa:	80 93 70 00 	sts	0x0070, r24

					check_temp = address_temp = data_temp = 0;
    2dfe:	10 92 30 02 	sts	0x0230, r1
    2e02:	10 92 31 02 	sts	0x0231, r1
    2e06:	10 92 32 02 	sts	0x0232, r1
    2e0a:	81 e0       	ldi	r24, 0x01	; 1
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	6d cf       	rjmp	.-294    	; 0x2cea <__vector_13+0xdc>

				unsigned char temp = REMOTE;
				temp <<= 6+6-i;
				data_temp += temp;

			} else if (i == 13) { 						// last bit read
    2e10:	8d 30       	cpi	r24, 0x0D	; 13
    2e12:	91 05       	cpc	r25, r1
    2e14:	09 f0       	breq	.+2      	; 0x2e18 <__vector_13+0x20a>
    2e16:	68 cf       	rjmp	.-304    	; 0x2ce8 <__vector_13+0xda>
				
				TIMSK2 = 0;								// disable all interrupt for timer2
    2e18:	10 92 70 00 	sts	0x0070, r1
				PCICR |= (1 << PCIE1);					// enable external interrupt to receive next command
    2e1c:	80 91 68 00 	lds	r24, 0x0068
    2e20:	82 60       	ori	r24, 0x02	; 2
    2e22:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);				// clear interrupt flag
    2e26:	80 91 6c 00 	lds	r24, 0x006C
    2e2a:	80 68       	ori	r24, 0x80	; 128
    2e2c:	80 93 6c 00 	sts	0x006C, r24

				i = -1;
    2e30:	8f ef       	ldi	r24, 0xFF	; 255
    2e32:	9f ef       	ldi	r25, 0xFF	; 255
    2e34:	90 93 02 02 	sts	0x0202, r25
    2e38:	80 93 01 02 	sts	0x0201, r24
				check = check_temp;
    2e3c:	80 91 32 02 	lds	r24, 0x0232
    2e40:	80 93 00 02 	sts	0x0200, r24
				address = address_temp;
    2e44:	80 91 31 02 	lds	r24, 0x0231
    2e48:	80 93 2e 02 	sts	0x022E, r24
				data_ir = data_temp;
    2e4c:	80 91 30 02 	lds	r24, 0x0230
    2e50:	80 93 2f 02 	sts	0x022F, r24
				command_received=1;
    2e54:	81 e0       	ldi	r24, 0x01	; 1
    2e56:	80 93 38 04 	sts	0x0438, r24
    2e5a:	4b cf       	rjmp	.-362    	; 0x2cf2 <__vector_13+0xe4>

00002e5c <ir_remote_get_check>:

}

unsigned char ir_remote_get_check(void) {
	return check;
}
    2e5c:	80 91 00 02 	lds	r24, 0x0200
    2e60:	08 95       	ret

00002e62 <ir_remote_get_address>:

unsigned char ir_remote_get_address(void) {
	return address;
}
    2e62:	80 91 2e 02 	lds	r24, 0x022E
    2e66:	08 95       	ret

00002e68 <ir_remote_get_data>:

unsigned char ir_remote_get_data(void) {
	return data_ir;
}
    2e68:	80 91 2f 02 	lds	r24, 0x022F
    2e6c:	08 95       	ret

00002e6e <handleIRRemoteCommands>:

void handleIRRemoteCommands() {

	if(irEnabled) {
    2e6e:	80 91 12 02 	lds	r24, 0x0212
    2e72:	88 23       	and	r24, r24
    2e74:	51 f1       	breq	.+84     	; 0x2eca <handleIRRemoteCommands+0x5c>

		if(command_received) {
    2e76:	80 91 38 04 	lds	r24, 0x0438
    2e7a:	88 23       	and	r24, r24
    2e7c:	31 f1       	breq	.+76     	; 0x2eca <handleIRRemoteCommands+0x5c>
unsigned char ir_remote_get_address(void) {
	return address;
}

unsigned char ir_remote_get_data(void) {
	return data_ir;
    2e7e:	e0 91 2f 02 	lds	r30, 0x022F

	if(irEnabled) {

		if(command_received) {

            irCommand = ir_remote_get_data();
    2e82:	e0 93 37 04 	sts	0x0437, r30

		    //usartTransmit(irCommand);

			command_received = 0;
    2e86:	10 92 38 04 	sts	0x0438, r1

			switch(irCommand) {
    2e8a:	f0 e0       	ldi	r31, 0x00	; 0
    2e8c:	e5 33       	cpi	r30, 0x35	; 53
    2e8e:	f1 05       	cpc	r31, r1
    2e90:	e8 f0       	brcs	.+58     	; 0x2ecc <handleIRRemoteCommands+0x5e>
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 1;
							break;
						case 3:
							obstacleAvoidanceEnabled = 1;
							cliffAvoidanceEnabled = 1;
    2e92:	20 91 09 03 	lds	r18, 0x0309
    2e96:	30 91 0a 03 	lds	r19, 0x030A
    2e9a:	80 91 0b 03 	lds	r24, 0x030B
    2e9e:	90 91 0c 03 	lds	r25, 0x030C
	               	break;

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
    2ea2:	37 fd       	sbrc	r19, 7
    2ea4:	b9 c1       	rjmp	.+882    	; 0x3218 <handleIRRemoteCommands+0x3aa>
				speedr = pwm_right_desired;
			} else {
				speedr = (-pwm_right_desired);
    2ea6:	30 93 24 03 	sts	0x0324, r19
    2eaa:	20 93 23 03 	sts	0x0323, r18
			}
			if(pwm_left_desired >= 0) {
    2eae:	97 fd       	sbrc	r25, 7
    2eb0:	05 c0       	rjmp	.+10     	; 0x2ebc <handleIRRemoteCommands+0x4e>
				speedl = pwm_left_desired;
    2eb2:	90 93 22 03 	sts	0x0322, r25
    2eb6:	80 93 21 03 	sts	0x0321, r24
    2eba:	08 95       	ret
			} else {
				speedl = (-pwm_left_desired);
    2ebc:	90 95       	com	r25
    2ebe:	81 95       	neg	r24
    2ec0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ec2:	90 93 22 03 	sts	0x0322, r25
    2ec6:	80 93 21 03 	sts	0x0321, r24
    2eca:	08 95       	ret

		    //usartTransmit(irCommand);

			command_received = 0;

			switch(irCommand) {
    2ecc:	ee 58       	subi	r30, 0x8E	; 142
    2ece:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed0:	ee 0f       	add	r30, r30
    2ed2:	ff 1f       	adc	r31, r31
    2ed4:	05 90       	lpm	r0, Z+
    2ed6:	f4 91       	lpm	r31, Z+
    2ed8:	e0 2d       	mov	r30, r0
    2eda:	19 94       	eijmp
						case 0:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 0;
							break;
						case 1:
							obstacleAvoidanceEnabled = 1;
    2edc:	80 93 7c 04 	sts	0x047C, r24
							cliffAvoidanceEnabled = 0;
    2ee0:	10 92 7d 04 	sts	0x047D, r1
    2ee4:	20 91 09 03 	lds	r18, 0x0309
    2ee8:	30 91 0a 03 	lds	r19, 0x030A
    2eec:	80 91 0b 03 	lds	r24, 0x030B
    2ef0:	90 91 0c 03 	lds	r25, 0x030C
							break;
    2ef4:	d6 cf       	rjmp	.-84     	; 0x2ea2 <handleIRRemoteCommands+0x34>
						case 2:
							obstacleAvoidanceEnabled = 0;
    2ef6:	10 92 7c 04 	sts	0x047C, r1
							cliffAvoidanceEnabled = 1;
    2efa:	81 e0       	ldi	r24, 0x01	; 1
    2efc:	80 93 7d 04 	sts	0x047D, r24
    2f00:	20 91 09 03 	lds	r18, 0x0309
    2f04:	30 91 0a 03 	lds	r19, 0x030A
    2f08:	80 91 0b 03 	lds	r24, 0x030B
    2f0c:	90 91 0c 03 	lds	r25, 0x030C
							break;
    2f10:	c8 cf       	rjmp	.-112    	; 0x2ea2 <handleIRRemoteCommands+0x34>
				case 33:	// program -
					cliffAvoidanceEnabled = 0;
					break;

				case 52:	// av/tv button
					behaviorState = (behaviorState+1)%4;
    2f12:	80 91 3a 04 	lds	r24, 0x043A
    2f16:	90 e0       	ldi	r25, 0x00	; 0
    2f18:	01 96       	adiw	r24, 0x01	; 1
    2f1a:	83 70       	andi	r24, 0x03	; 3
    2f1c:	90 70       	andi	r25, 0x00	; 0
    2f1e:	80 93 3a 04 	sts	0x043A, r24
					switch(behaviorState) {
    2f22:	82 30       	cpi	r24, 0x02	; 2
    2f24:	41 f3       	breq	.-48     	; 0x2ef6 <handleIRRemoteCommands+0x88>
    2f26:	83 30       	cpi	r24, 0x03	; 3
    2f28:	09 f4       	brne	.+2      	; 0x2f2c <handleIRRemoteCommands+0xbe>
    2f2a:	8a c1       	rjmp	.+788    	; 0x3240 <handleIRRemoteCommands+0x3d2>
    2f2c:	81 30       	cpi	r24, 0x01	; 1
    2f2e:	b1 f2       	breq	.-84     	; 0x2edc <handleIRRemoteCommands+0x6e>
						case 0:
							obstacleAvoidanceEnabled = 0;
    2f30:	10 92 7c 04 	sts	0x047C, r1
							cliffAvoidanceEnabled = 0;
    2f34:	10 92 7d 04 	sts	0x047D, r1
    2f38:	20 91 09 03 	lds	r18, 0x0309
    2f3c:	30 91 0a 03 	lds	r19, 0x030A
    2f40:	80 91 0b 03 	lds	r24, 0x030B
    2f44:	90 91 0c 03 	lds	r25, 0x030C
							break;
    2f48:	ac cf       	rjmp	.-168    	; 0x2ea2 <handleIRRemoteCommands+0x34>
				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
					break;

				case 17:	// volume -
					obstacleAvoidanceEnabled = 0;
    2f4a:	10 92 7c 04 	sts	0x047C, r1
    2f4e:	20 91 09 03 	lds	r18, 0x0309
    2f52:	30 91 0a 03 	lds	r19, 0x030A
    2f56:	80 91 0b 03 	lds	r24, 0x030B
    2f5a:	90 91 0c 03 	lds	r25, 0x030C
					break;
    2f5e:	a1 cf       	rjmp	.-190    	; 0x2ea2 <handleIRRemoteCommands+0x34>
					pwm_right_desired += STEP_MOTORS;
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
					break;

				case 9:	// left motor backward
					pwm_left_desired -= STEP_MOTORS;
    2f60:	80 91 0b 03 	lds	r24, 0x030B
    2f64:	90 91 0c 03 	lds	r25, 0x030C
    2f68:	02 97       	sbiw	r24, 0x02	; 2
    2f6a:	90 93 0c 03 	sts	0x030C, r25
    2f6e:	80 93 0b 03 	sts	0x030B, r24
	           	    if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    2f72:	2e ef       	ldi	r18, 0xFE	; 254
    2f74:	80 30       	cpi	r24, 0x00	; 0
    2f76:	92 07       	cpc	r25, r18
    2f78:	9c f5       	brge	.+102    	; 0x2fe0 <handleIRRemoteCommands+0x172>
    2f7a:	80 e0       	ldi	r24, 0x00	; 0
    2f7c:	9e ef       	ldi	r25, 0xFE	; 254
    2f7e:	90 93 0c 03 	sts	0x030C, r25
    2f82:	80 93 0b 03 	sts	0x030B, r24
    2f86:	20 91 09 03 	lds	r18, 0x0309
    2f8a:	30 91 0a 03 	lds	r19, 0x030A
    2f8e:	89 cf       	rjmp	.-238    	; 0x2ea2 <handleIRRemoteCommands+0x34>
    	            if (pwm_left_desired > (MAX_MOTORS_PWM/2)) pwm_left_desired = (MAX_MOTORS_PWM/2);
               		break;

				case 8:	// both motors backward
				case 30:
					if(pwm_right_desired < pwm_left) {
    2f90:	20 91 09 03 	lds	r18, 0x0309
    2f94:	30 91 0a 03 	lds	r19, 0x030A
    2f98:	80 91 07 03 	lds	r24, 0x0307
    2f9c:	90 91 08 03 	lds	r25, 0x0308
    2fa0:	28 17       	cp	r18, r24
    2fa2:	39 07       	cpc	r19, r25
    2fa4:	24 f0       	brlt	.+8      	; 0x2fae <handleIRRemoteCommands+0x140>
						pwm_left_desired  = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
    2fa6:	20 91 0b 03 	lds	r18, 0x030B
    2faa:	30 91 0c 03 	lds	r19, 0x030C
					}
					pwm_right_desired -= STEP_MOTORS;
    2fae:	22 50       	subi	r18, 0x02	; 2
    2fb0:	30 40       	sbci	r19, 0x00	; 0
    2fb2:	30 93 0a 03 	sts	0x030A, r19
    2fb6:	20 93 09 03 	sts	0x0309, r18
					pwm_left_desired -= STEP_MOTORS;
    2fba:	c9 01       	movw	r24, r18
    2fbc:	30 93 0c 03 	sts	0x030C, r19
    2fc0:	20 93 0b 03 	sts	0x030B, r18
	                if (pwm_right_desired < -(MAX_MOTORS_PWM/2)) pwm_right_desired = -(MAX_MOTORS_PWM/2);
    2fc4:	4e ef       	ldi	r20, 0xFE	; 254
    2fc6:	20 30       	cpi	r18, 0x00	; 0
    2fc8:	34 07       	cpc	r19, r20
    2fca:	34 f4       	brge	.+12     	; 0x2fd8 <handleIRRemoteCommands+0x16a>
    2fcc:	40 e0       	ldi	r20, 0x00	; 0
    2fce:	5e ef       	ldi	r21, 0xFE	; 254
    2fd0:	50 93 0a 03 	sts	0x030A, r21
    2fd4:	40 93 09 03 	sts	0x0309, r20
    	            if (pwm_left_desired < -(MAX_MOTORS_PWM/2)) pwm_left_desired = -(MAX_MOTORS_PWM/2);
    2fd8:	4e ef       	ldi	r20, 0xFE	; 254
    2fda:	20 30       	cpi	r18, 0x00	; 0
    2fdc:	34 07       	cpc	r19, r20
    2fde:	6c f2       	brlt	.-102    	; 0x2f7a <handleIRRemoteCommands+0x10c>
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    2fe0:	20 91 09 03 	lds	r18, 0x0309
    2fe4:	30 91 0a 03 	lds	r19, 0x030A
    2fe8:	5c cf       	rjmp	.-328    	; 0x2ea2 <handleIRRemoteCommands+0x34>
					updateBlueLed(pwm_blue);

	               	break;

				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
    2fea:	81 e0       	ldi	r24, 0x01	; 1
    2fec:	80 93 7c 04 	sts	0x047C, r24
    2ff0:	20 91 09 03 	lds	r18, 0x0309
    2ff4:	30 91 0a 03 	lds	r19, 0x030A
    2ff8:	80 91 0b 03 	lds	r24, 0x030B
    2ffc:	90 91 0c 03 	lds	r25, 0x030C
					break;
    3000:	50 cf       	rjmp	.-352    	; 0x2ea2 <handleIRRemoteCommands+0x34>
					pwm_left_desired -= STEP_MOTORS;
	           	    if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 7:	// right motor backward
					pwm_right_desired -= STEP_MOTORS;
    3002:	20 91 09 03 	lds	r18, 0x0309
    3006:	30 91 0a 03 	lds	r19, 0x030A
    300a:	22 50       	subi	r18, 0x02	; 2
    300c:	30 40       	sbci	r19, 0x00	; 0
    300e:	30 93 0a 03 	sts	0x030A, r19
    3012:	20 93 09 03 	sts	0x0309, r18
	               	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    3016:	4e ef       	ldi	r20, 0xFE	; 254
    3018:	20 30       	cpi	r18, 0x00	; 0
    301a:	34 07       	cpc	r19, r20
    301c:	0c f0       	brlt	.+2      	; 0x3020 <handleIRRemoteCommands+0x1b2>
    301e:	3d cf       	rjmp	.-390    	; 0x2e9a <handleIRRemoteCommands+0x2c>
    3020:	80 e0       	ldi	r24, 0x00	; 0
    3022:	9e ef       	ldi	r25, 0xFE	; 254
    3024:	90 93 0a 03 	sts	0x030A, r25
    3028:	80 93 09 03 	sts	0x0309, r24
    302c:	80 91 0b 03 	lds	r24, 0x030B
    3030:	90 91 0c 03 	lds	r25, 0x030C
    3034:	20 e0       	ldi	r18, 0x00	; 0
    3036:	32 e0       	ldi	r19, 0x02	; 2
    3038:	36 cf       	rjmp	.-404    	; 0x2ea6 <handleIRRemoteCommands+0x38>
    	            if (pwm_left_desired < -(MAX_MOTORS_PWM/2)) pwm_left_desired = -(MAX_MOTORS_PWM/2);
                  	break;

				case 6:	// both motors right
				case 47:
					pwm_right_desired -= STEP_MOTORS;
    303a:	20 91 09 03 	lds	r18, 0x0309
    303e:	30 91 0a 03 	lds	r19, 0x030A
    3042:	22 50       	subi	r18, 0x02	; 2
    3044:	30 40       	sbci	r19, 0x00	; 0
    3046:	30 93 0a 03 	sts	0x030A, r19
    304a:	20 93 09 03 	sts	0x0309, r18
					pwm_left_desired += STEP_MOTORS;
    304e:	80 91 0b 03 	lds	r24, 0x030B
    3052:	90 91 0c 03 	lds	r25, 0x030C
    3056:	02 96       	adiw	r24, 0x02	; 2
    3058:	90 93 0c 03 	sts	0x030C, r25
    305c:	80 93 0b 03 	sts	0x030B, r24
                	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    3060:	4e ef       	ldi	r20, 0xFE	; 254
    3062:	20 30       	cpi	r18, 0x00	; 0
    3064:	34 07       	cpc	r19, r20
    3066:	34 f4       	brge	.+12     	; 0x3074 <handleIRRemoteCommands+0x206>
    3068:	20 e0       	ldi	r18, 0x00	; 0
    306a:	3e ef       	ldi	r19, 0xFE	; 254
    306c:	30 93 0a 03 	sts	0x030A, r19
    3070:	20 93 09 03 	sts	0x0309, r18
                	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    3074:	42 e0       	ldi	r20, 0x02	; 2
    3076:	81 30       	cpi	r24, 0x01	; 1
    3078:	94 07       	cpc	r25, r20
    307a:	0c f4       	brge	.+2      	; 0x307e <handleIRRemoteCommands+0x210>
    307c:	12 cf       	rjmp	.-476    	; 0x2ea2 <handleIRRemoteCommands+0x34>
    307e:	80 e0       	ldi	r24, 0x00	; 0
    3080:	92 e0       	ldi	r25, 0x02	; 2
    3082:	90 93 0c 03 	sts	0x030C, r25
    3086:	80 93 0b 03 	sts	0x030B, r24
    308a:	0b cf       	rjmp	.-490    	; 0x2ea2 <handleIRRemoteCommands+0x34>
			switch(irCommand) {
				// sometimes there are two cases for the same command because two different
				// remote controls are used; one of this do not contain "numbers"
				case 5:	// stop motors
				case 51:
					pwm_right_desired = 0;
    308c:	10 92 0a 03 	sts	0x030A, r1
    3090:	10 92 09 03 	sts	0x0309, r1
					pwm_left_desired = 0;
    3094:	10 92 0c 03 	sts	0x030C, r1
    3098:	10 92 0b 03 	sts	0x030B, r1
					if(currentSelector == 8) {
    309c:	80 91 5c 04 	lds	r24, 0x045C
    30a0:	88 30       	cpi	r24, 0x08	; 8
    30a2:	09 f4       	brne	.+2      	; 0x30a6 <handleIRRemoteCommands+0x238>
    30a4:	db c0       	rjmp	.+438    	; 0x325c <handleIRRemoteCommands+0x3ee>
    30a6:	80 e0       	ldi	r24, 0x00	; 0
    30a8:	90 e0       	ldi	r25, 0x00	; 0
    30aa:	20 e0       	ldi	r18, 0x00	; 0
    30ac:	30 e0       	ldi	r19, 0x00	; 0
    30ae:	fb ce       	rjmp	.-522    	; 0x2ea6 <handleIRRemoteCommands+0x38>
                	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
					break;

				case 4:	// both motors left
				case 46:
					pwm_right_desired += STEP_MOTORS;
    30b0:	20 91 09 03 	lds	r18, 0x0309
    30b4:	30 91 0a 03 	lds	r19, 0x030A
    30b8:	2e 5f       	subi	r18, 0xFE	; 254
    30ba:	3f 4f       	sbci	r19, 0xFF	; 255
    30bc:	30 93 0a 03 	sts	0x030A, r19
    30c0:	20 93 09 03 	sts	0x0309, r18
					pwm_left_desired -= STEP_MOTORS;
    30c4:	80 91 0b 03 	lds	r24, 0x030B
    30c8:	90 91 0c 03 	lds	r25, 0x030C
    30cc:	02 97       	sbiw	r24, 0x02	; 2
    30ce:	90 93 0c 03 	sts	0x030C, r25
    30d2:	80 93 0b 03 	sts	0x030B, r24
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    30d6:	42 e0       	ldi	r20, 0x02	; 2
    30d8:	21 30       	cpi	r18, 0x01	; 1
    30da:	34 07       	cpc	r19, r20
    30dc:	34 f0       	brlt	.+12     	; 0x30ea <handleIRRemoteCommands+0x27c>
    30de:	20 e0       	ldi	r18, 0x00	; 0
    30e0:	32 e0       	ldi	r19, 0x02	; 2
    30e2:	30 93 0a 03 	sts	0x030A, r19
    30e6:	20 93 09 03 	sts	0x0309, r18
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    30ea:	4e ef       	ldi	r20, 0xFE	; 254
    30ec:	80 30       	cpi	r24, 0x00	; 0
    30ee:	94 07       	cpc	r25, r20
    30f0:	0c f0       	brlt	.+2      	; 0x30f4 <handleIRRemoteCommands+0x286>
    30f2:	d7 ce       	rjmp	.-594    	; 0x2ea2 <handleIRRemoteCommands+0x34>
    30f4:	80 e0       	ldi	r24, 0x00	; 0
    30f6:	9e ef       	ldi	r25, 0xFE	; 254
    30f8:	90 93 0c 03 	sts	0x030C, r25
    30fc:	80 93 0b 03 	sts	0x030B, r24
    3100:	d0 ce       	rjmp	.-608    	; 0x2ea2 <handleIRRemoteCommands+0x34>
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
    3102:	80 91 0b 03 	lds	r24, 0x030B
    3106:	90 91 0c 03 	lds	r25, 0x030C
    310a:	02 96       	adiw	r24, 0x02	; 2
    310c:	90 93 0c 03 	sts	0x030C, r25
    3110:	80 93 0b 03 	sts	0x030B, r24
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    3114:	22 e0       	ldi	r18, 0x02	; 2
    3116:	81 30       	cpi	r24, 0x01	; 1
    3118:	92 07       	cpc	r25, r18
    311a:	0c f4       	brge	.+2      	; 0x311e <handleIRRemoteCommands+0x2b0>
    311c:	61 cf       	rjmp	.-318    	; 0x2fe0 <handleIRRemoteCommands+0x172>
    311e:	80 e0       	ldi	r24, 0x00	; 0
    3120:	92 e0       	ldi	r25, 0x02	; 2
    3122:	90 93 0c 03 	sts	0x030C, r25
    3126:	80 93 0b 03 	sts	0x030B, r24
    312a:	5a cf       	rjmp	.-332    	; 0x2fe0 <handleIRRemoteCommands+0x172>
					}
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    312c:	20 91 09 03 	lds	r18, 0x0309
    3130:	30 91 0a 03 	lds	r19, 0x030A
    3134:	80 91 0b 03 	lds	r24, 0x030B
    3138:	90 91 0c 03 	lds	r25, 0x030C
    313c:	82 17       	cp	r24, r18
    313e:	93 07       	cpc	r25, r19
    3140:	0c f4       	brge	.+2      	; 0x3144 <handleIRRemoteCommands+0x2d6>
    3142:	6e c0       	rjmp	.+220    	; 0x3220 <handleIRRemoteCommands+0x3b2>
    3144:	9c 01       	movw	r18, r24
						pwm_left_desired = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
					}
					pwm_right_desired += STEP_MOTORS;
    3146:	2e 5f       	subi	r18, 0xFE	; 254
    3148:	3f 4f       	sbci	r19, 0xFF	; 255
    314a:	30 93 0a 03 	sts	0x030A, r19
    314e:	20 93 09 03 	sts	0x0309, r18
					pwm_left_desired += STEP_MOTORS;
    3152:	02 96       	adiw	r24, 0x02	; 2
    3154:	90 93 0c 03 	sts	0x030C, r25
    3158:	80 93 0b 03 	sts	0x030B, r24
	                if (pwm_right_desired > (MAX_MOTORS_PWM/2)) pwm_right_desired = (MAX_MOTORS_PWM/2);
    315c:	42 e0       	ldi	r20, 0x02	; 2
    315e:	21 30       	cpi	r18, 0x01	; 1
    3160:	34 07       	cpc	r19, r20
    3162:	34 f0       	brlt	.+12     	; 0x3170 <handleIRRemoteCommands+0x302>
    3164:	20 e0       	ldi	r18, 0x00	; 0
    3166:	32 e0       	ldi	r19, 0x02	; 2
    3168:	30 93 0a 03 	sts	0x030A, r19
    316c:	20 93 09 03 	sts	0x0309, r18
    	            if (pwm_left_desired > (MAX_MOTORS_PWM/2)) pwm_left_desired = (MAX_MOTORS_PWM/2);
    3170:	22 e0       	ldi	r18, 0x02	; 2
    3172:	81 30       	cpi	r24, 0x01	; 1
    3174:	92 07       	cpc	r25, r18
    3176:	0c f4       	brge	.+2      	; 0x317a <handleIRRemoteCommands+0x30c>
    3178:	33 cf       	rjmp	.-410    	; 0x2fe0 <handleIRRemoteCommands+0x172>
    317a:	80 e0       	ldi	r24, 0x00	; 0
    317c:	92 e0       	ldi	r25, 0x02	; 2
    317e:	90 93 0c 03 	sts	0x030C, r25
    3182:	80 93 0b 03 	sts	0x030B, r24
    3186:	20 91 09 03 	lds	r18, 0x0309
    318a:	30 91 0a 03 	lds	r19, 0x030A
    318e:	89 ce       	rjmp	.-750    	; 0x2ea2 <handleIRRemoteCommands+0x34>
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
					break;

				case 1:	// right motor forward
					pwm_right_desired += STEP_MOTORS;
    3190:	20 91 09 03 	lds	r18, 0x0309
    3194:	30 91 0a 03 	lds	r19, 0x030A
    3198:	2e 5f       	subi	r18, 0xFE	; 254
    319a:	3f 4f       	sbci	r19, 0xFF	; 255
    319c:	30 93 0a 03 	sts	0x030A, r19
    31a0:	20 93 09 03 	sts	0x0309, r18
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    31a4:	42 e0       	ldi	r20, 0x02	; 2
    31a6:	21 30       	cpi	r18, 0x01	; 1
    31a8:	34 07       	cpc	r19, r20
    31aa:	0c f4       	brge	.+2      	; 0x31ae <handleIRRemoteCommands+0x340>
    31ac:	76 ce       	rjmp	.-788    	; 0x2e9a <handleIRRemoteCommands+0x2c>
    31ae:	80 e0       	ldi	r24, 0x00	; 0
    31b0:	92 e0       	ldi	r25, 0x02	; 2
    31b2:	90 93 0a 03 	sts	0x030A, r25
    31b6:	80 93 09 03 	sts	0x0309, r24
    31ba:	80 91 0b 03 	lds	r24, 0x030B
    31be:	90 91 0c 03 	lds	r25, 0x030C
	               	break;

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
    31c2:	20 e0       	ldi	r18, 0x00	; 0
    31c4:	32 e0       	ldi	r19, 0x02	; 2
    31c6:	6f ce       	rjmp	.-802    	; 0x2ea6 <handleIRRemoteCommands+0x38>
	               	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
					break;

	           	case 0:	// colors
				case 50:
					colorState = (colorState+1)%5;
    31c8:	80 91 39 04 	lds	r24, 0x0439
    31cc:	90 e0       	ldi	r25, 0x00	; 0
    31ce:	01 96       	adiw	r24, 0x01	; 1
    31d0:	65 e0       	ldi	r22, 0x05	; 5
    31d2:	70 e0       	ldi	r23, 0x00	; 0
    31d4:	0e 94 68 56 	call	0xacd0	; 0xacd0 <__divmodhi4>
    31d8:	80 93 39 04 	sts	0x0439, r24

					if(colorState==0) {			// turn on blue and off all IRs
    31dc:	88 23       	and	r24, r24
    31de:	11 f5       	brne	.+68     	; 0x3224 <handleIRRemoteCommands+0x3b6>
						LED_IR1_HIGH;
    31e0:	44 9a       	sbi	0x08, 4	; 8
						LED_IR2_HIGH;
    31e2:	45 9a       	sbi	0x08, 5	; 8
						pwm_blue = 0;
    31e4:	10 92 0e 02 	sts	0x020E, r1
						pwm_green = MAX_LEDS_PWM;
    31e8:	8f ef       	ldi	r24, 0xFF	; 255
    31ea:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = MAX_LEDS_PWM;
    31ee:	80 93 0c 02 	sts	0x020C, r24
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					}

					updateRedLed(pwm_red);
    31f2:	0e 94 a2 3e 	call	0x7d44	; 0x7d44 <updateRedLed>
					updateGreenLed(pwm_green);
    31f6:	80 91 0d 02 	lds	r24, 0x020D
    31fa:	0e 94 b6 3e 	call	0x7d6c	; 0x7d6c <updateGreenLed>
					updateBlueLed(pwm_blue);
    31fe:	80 91 0e 02 	lds	r24, 0x020E
    3202:	0e 94 ca 3e 	call	0x7d94	; 0x7d94 <updateBlueLed>
    3206:	20 91 09 03 	lds	r18, 0x0309
    320a:	30 91 0a 03 	lds	r19, 0x030A
    320e:	80 91 0b 03 	lds	r24, 0x030B
    3212:	90 91 0c 03 	lds	r25, 0x030C

	               	break;
    3216:	45 ce       	rjmp	.-886    	; 0x2ea2 <handleIRRemoteCommands+0x34>

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
				speedr = pwm_right_desired;
    3218:	30 95       	com	r19
    321a:	21 95       	neg	r18
    321c:	3f 4f       	sbci	r19, 0xFF	; 255
    321e:	43 ce       	rjmp	.-890    	; 0x2ea6 <handleIRRemoteCommands+0x38>
					}
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    3220:	c9 01       	movw	r24, r18
    3222:	91 cf       	rjmp	.-222    	; 0x3146 <handleIRRemoteCommands+0x2d8>
						LED_IR1_HIGH;
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
    3224:	81 30       	cpi	r24, 0x01	; 1
    3226:	91 f0       	breq	.+36     	; 0x324c <handleIRRemoteCommands+0x3de>
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = 0;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==2) {	// turn on red and on all IRs
    3228:	82 30       	cpi	r24, 0x02	; 2
    322a:	a1 f1       	breq	.+104    	; 0x3294 <handleIRRemoteCommands+0x426>
						LED_IR1_LOW;
						LED_IR2_LOW;
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = 0;
					} else if(colorState==3) {	// turn on white
    322c:	83 30       	cpi	r24, 0x03	; 3
    322e:	e9 f1       	breq	.+122    	; 0x32aa <handleIRRemoteCommands+0x43c>
						pwm_blue = 0;
						pwm_green = 0;
						pwm_red = 0;
					} else if(colorState==4) {	// turn off all leds
						pwm_blue = MAX_LEDS_PWM;
    3230:	8f ef       	ldi	r24, 0xFF	; 255
    3232:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = MAX_LEDS_PWM;
    3236:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = MAX_LEDS_PWM;
    323a:	80 93 0c 02 	sts	0x020C, r24
    323e:	d9 cf       	rjmp	.-78     	; 0x31f2 <handleIRRemoteCommands+0x384>
						case 2:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 1;
							break;
						case 3:
							obstacleAvoidanceEnabled = 1;
    3240:	81 e0       	ldi	r24, 0x01	; 1
    3242:	80 93 7c 04 	sts	0x047C, r24
							cliffAvoidanceEnabled = 1;
    3246:	80 93 7d 04 	sts	0x047D, r24
    324a:	23 ce       	rjmp	.-954    	; 0x2e92 <handleIRRemoteCommands+0x24>
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
						pwm_blue = MAX_LEDS_PWM;
    324c:	8f ef       	ldi	r24, 0xFF	; 255
    324e:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = 0;
    3252:	10 92 0d 02 	sts	0x020D, r1
						pwm_red = MAX_LEDS_PWM;
    3256:	80 93 0c 02 	sts	0x020C, r24
    325a:	cb cf       	rjmp	.-106    	; 0x31f2 <handleIRRemoteCommands+0x384>
				case 5:	// stop motors
				case 51:
					pwm_right_desired = 0;
					pwm_left_desired = 0;
					if(currentSelector == 8) {
						calibrateSensors();
    325c:	0e 94 9a 41 	call	0x8334	; 0x8334 <calibrateSensors>
						proximityResult[8] = 1023;	// because the first time this value could be low after calibration
    3260:	8f ef       	ldi	r24, 0xFF	; 255
    3262:	93 e0       	ldi	r25, 0x03	; 3
    3264:	90 93 7a 02 	sts	0x027A, r25
    3268:	80 93 79 02 	sts	0x0279, r24
						proximityResult[11] = 1023;	// and in that case a false black line will be detected
    326c:	90 93 80 02 	sts	0x0280, r25
    3270:	80 93 7f 02 	sts	0x027F, r24
						calibState = 0;
    3274:	10 92 63 0b 	sts	0x0B63, r1
						calibVelIndex = 1;
    3278:	81 e0       	ldi	r24, 0x01	; 1
    327a:	80 93 bd 08 	sts	0x08BD, r24
						calibrateOdomFlag = 1;
    327e:	80 93 70 05 	sts	0x0570, r24
    3282:	20 91 09 03 	lds	r18, 0x0309
    3286:	30 91 0a 03 	lds	r19, 0x030A
    328a:	80 91 0b 03 	lds	r24, 0x030B
    328e:	90 91 0c 03 	lds	r25, 0x030C
    3292:	07 ce       	rjmp	.-1010   	; 0x2ea2 <handleIRRemoteCommands+0x34>
					} else if(colorState==1) {	// turn on green
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = 0;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==2) {	// turn on red and on all IRs
						LED_IR1_LOW;
    3294:	44 98       	cbi	0x08, 4	; 8
						LED_IR2_LOW;
    3296:	45 98       	cbi	0x08, 5	; 8
						pwm_blue = MAX_LEDS_PWM;
    3298:	8f ef       	ldi	r24, 0xFF	; 255
    329a:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = MAX_LEDS_PWM;
    329e:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = 0;
    32a2:	10 92 0c 02 	sts	0x020C, r1
    32a6:	80 e0       	ldi	r24, 0x00	; 0
    32a8:	a4 cf       	rjmp	.-184    	; 0x31f2 <handleIRRemoteCommands+0x384>
					} else if(colorState==3) {	// turn on white
						pwm_blue = 0;
    32aa:	10 92 0e 02 	sts	0x020E, r1
						pwm_green = 0;
    32ae:	10 92 0d 02 	sts	0x020D, r1
						pwm_red = 0;
    32b2:	10 92 0c 02 	sts	0x020C, r1
    32b6:	80 e0       	ldi	r24, 0x00	; 0
    32b8:	9c cf       	rjmp	.-200    	; 0x31f2 <handleIRRemoteCommands+0x384>

000032ba <init_speed_control>:
	//d_speed_control = 5;
	//i_speed_control = 10;
	//i_limit_speed_control = 3200;
	//k_ff_speed_control_left = INIT_KFF;
	//k_ff_speed_control_right = INIT_KFF;
}
    32ba:	08 95       	ret

000032bc <start_vertical_speed_control_left>:

void start_vertical_speed_control_left(signed int *pwm_left) {
    32bc:	cf 92       	push	r12
    32be:	df 92       	push	r13
    32c0:	ef 92       	push	r14
    32c2:	ff 92       	push	r15
    32c4:	0f 93       	push	r16
    32c6:	1f 93       	push	r17
    32c8:	cf 93       	push	r28
    32ca:	df 93       	push	r29
    32cc:	fc 01       	movw	r30, r24
	
	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).
	
	if(*pwm_left==0) {
    32ce:	80 81       	ld	r24, Z
    32d0:	91 81       	ldd	r25, Z+1	; 0x01
    32d2:	00 97       	sbiw	r24, 0x00	; 0
    32d4:	09 f4       	brne	.+2      	; 0x32d8 <start_vertical_speed_control_left+0x1c>
    32d6:	f7 c0       	rjmp	.+494    	; 0x34c6 <start_vertical_speed_control_left+0x20a>
		delta_left_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    32d8:	20 91 4e 04 	lds	r18, 0x044E
    32dc:	30 91 4f 04 	lds	r19, 0x044F
    32e0:	41 e0       	ldi	r20, 0x01	; 1
    32e2:	2e 30       	cpi	r18, 0x0E	; 14
    32e4:	34 07       	cpc	r19, r20
    32e6:	0c f4       	brge	.+2      	; 0x32ea <start_vertical_speed_control_left+0x2e>
    32e8:	c7 c0       	rjmp	.+398    	; 0x3478 <start_vertical_speed_control_left+0x1bc>
		if(*pwm_left > 0) {
    32ea:	18 16       	cp	r1, r24
    32ec:	19 06       	cpc	r1, r25
    32ee:	0c f0       	brlt	.+2      	; 0x32f2 <start_vertical_speed_control_left+0x36>
    32f0:	68 c1       	rjmp	.+720    	; 0x35c2 <start_vertical_speed_control_left+0x306>
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
    32f2:	88 e6       	ldi	r24, 0x68	; 104
    32f4:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    32f6:	82 1b       	sub	r24, r18
    32f8:	93 0b       	sbc	r25, r19
    32fa:	95 95       	asr	r25
    32fc:	87 95       	ror	r24
    32fe:	95 95       	asr	r25
    3300:	87 95       	ror	r24
    3302:	29 e1       	ldi	r18, 0x19	; 25
    3304:	30 e0       	ldi	r19, 0x00	; 0
    3306:	28 1b       	sub	r18, r24
    3308:	39 0b       	sbc	r19, r25
    330a:	30 93 04 02 	sts	0x0204, r19
    330e:	20 93 03 02 	sts	0x0203, r18
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
		}
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    3312:	c0 91 75 05 	lds	r28, 0x0575
    3316:	d0 91 76 05 	lds	r29, 0x0576
    331a:	d0 93 8b 09 	sts	0x098B, r29
    331e:	c0 93 8a 09 	sts	0x098A, r28
	if(*pwm_left >= 0) {
    3322:	80 81       	ld	r24, Z
    3324:	91 81       	ldd	r25, Z+1	; 0x01
    3326:	97 fd       	sbrc	r25, 7
    3328:	2e c1       	rjmp	.+604    	; 0x3586 <start_vertical_speed_control_left+0x2ca>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    332a:	20 91 01 03 	lds	r18, 0x0301
    332e:	30 91 02 03 	lds	r19, 0x0302
    3332:	dc 01       	movw	r26, r24
    3334:	a2 1b       	sub	r26, r18
    3336:	b3 0b       	sbc	r27, r19
    3338:	b0 93 76 05 	sts	0x0576, r27
    333c:	a0 93 75 05 	sts	0x0575, r26
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;
    3340:	80 91 19 03 	lds	r24, 0x0319
    3344:	90 91 1a 03 	lds	r25, 0x031A
    3348:	8a 0f       	add	r24, r26
    334a:	9b 1f       	adc	r25, r27
    334c:	90 93 1a 03 	sts	0x031A, r25
    3350:	80 93 19 03 	sts	0x0319, r24

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
    3354:	66 e0       	ldi	r22, 0x06	; 6
    3356:	81 34       	cpi	r24, 0x41	; 65
    3358:	96 07       	cpc	r25, r22
    335a:	0c f4       	brge	.+2      	; 0x335e <start_vertical_speed_control_left+0xa2>
    335c:	cb c0       	rjmp	.+406    	; 0x34f4 <start_vertical_speed_control_left+0x238>
		delta_left_speed_sum = I_LIMIT_VERTICAL;
    335e:	80 e4       	ldi	r24, 0x40	; 64
    3360:	96 e0       	ldi	r25, 0x06	; 6
    3362:	90 93 1a 03 	sts	0x031A, r25
    3366:	80 93 19 03 	sts	0x0319, r24
    336a:	10 ec       	ldi	r17, 0xC0	; 192
    336c:	c1 2e       	mov	r12, r17
    336e:	12 e1       	ldi	r17, 0x12	; 18
    3370:	d1 2e       	mov	r13, r17
    3372:	e1 2c       	mov	r14, r1
    3374:	f1 2c       	mov	r15, r1
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_left_speed_controller = (signed long int)(k_ff_speed_control_left*(*pwm_left));
    3376:	00 81       	ld	r16, Z
    3378:	11 81       	ldd	r17, Z+1	; 0x01
	pwm_left_speed_controller += (signed long int)(P_VERTICAL * delta_left_speed_current);
    337a:	9d 01       	movw	r18, r26
    337c:	22 0f       	add	r18, r18
    337e:	33 1f       	adc	r19, r19
    3380:	2a 0f       	add	r18, r26
    3382:	3b 1f       	adc	r19, r27
    3384:	22 0f       	add	r18, r18
    3386:	33 1f       	adc	r19, r19
    3388:	22 0f       	add	r18, r18
    338a:	33 1f       	adc	r19, r19
    338c:	22 0f       	add	r18, r18
    338e:	33 1f       	adc	r19, r19
    3390:	2a 0f       	add	r18, r26
    3392:	3b 1f       	adc	r19, r27
    3394:	44 27       	eor	r20, r20
    3396:	37 fd       	sbrc	r19, 7
    3398:	40 95       	com	r20
    339a:	54 2f       	mov	r21, r20
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_left_speed_controller = (signed long int)(k_ff_speed_control_left*(*pwm_left));
    339c:	80 91 03 02 	lds	r24, 0x0203
    33a0:	90 91 04 02 	lds	r25, 0x0204
    33a4:	08 9f       	mul	r16, r24
    33a6:	b0 01       	movw	r22, r0
    33a8:	09 9f       	mul	r16, r25
    33aa:	70 0d       	add	r23, r0
    33ac:	18 9f       	mul	r17, r24
    33ae:	70 0d       	add	r23, r0
    33b0:	11 24       	eor	r1, r1
    33b2:	88 27       	eor	r24, r24
    33b4:	77 fd       	sbrc	r23, 7
    33b6:	80 95       	com	r24
    33b8:	98 2f       	mov	r25, r24
	pwm_left_speed_controller += (signed long int)(P_VERTICAL * delta_left_speed_current);
    33ba:	26 0f       	add	r18, r22
    33bc:	37 1f       	adc	r19, r23
    33be:	48 1f       	adc	r20, r24
    33c0:	59 1f       	adc	r21, r25
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
    33c2:	ac 1b       	sub	r26, r28
    33c4:	bd 0b       	sbc	r27, r29
    33c6:	aa 0f       	add	r26, r26
    33c8:	bb 1f       	adc	r27, r27
    33ca:	bd 01       	movw	r22, r26
    33cc:	cb 01       	movw	r24, r22
    33ce:	aa 27       	eor	r26, r26
    33d0:	97 fd       	sbrc	r25, 7
    33d2:	a0 95       	com	r26
    33d4:	ba 2f       	mov	r27, r26
    33d6:	28 0f       	add	r18, r24
    33d8:	39 1f       	adc	r19, r25
    33da:	4a 1f       	adc	r20, r26
    33dc:	5b 1f       	adc	r21, r27
	pwm_left_speed_controller += (signed long int)(I_VERTICAL*delta_left_speed_sum);
    33de:	2c 0d       	add	r18, r12
    33e0:	3d 1d       	adc	r19, r13
    33e2:	4e 1d       	adc	r20, r14
    33e4:	5f 1d       	adc	r21, r15
    33e6:	20 93 15 03 	sts	0x0315, r18
    33ea:	30 93 16 03 	sts	0x0316, r19
    33ee:	40 93 17 03 	sts	0x0317, r20
    33f2:	50 93 18 03 	sts	0x0318, r21

	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    33f6:	57 fd       	sbrc	r21, 7
    33f8:	9d c0       	rjmp	.+314    	; 0x3534 <start_vertical_speed_control_left+0x278>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    33fa:	12 16       	cp	r1, r18
    33fc:	13 06       	cpc	r1, r19
    33fe:	14 06       	cpc	r1, r20
    3400:	15 06       	cpc	r1, r21
    3402:	0c f0       	brlt	.+2      	; 0x3406 <start_vertical_speed_control_left+0x14a>
    3404:	a4 c0       	rjmp	.+328    	; 0x354e <start_vertical_speed_control_left+0x292>
    3406:	17 fd       	sbrc	r17, 7
    3408:	c9 c0       	rjmp	.+402    	; 0x359c <start_vertical_speed_control_left+0x2e0>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    340a:	21 3c       	cpi	r18, 0xC1	; 193
    340c:	7d e5       	ldi	r23, 0x5D	; 93
    340e:	37 07       	cpc	r19, r23
    3410:	70 e0       	ldi	r23, 0x00	; 0
    3412:	47 07       	cpc	r20, r23
    3414:	70 e0       	ldi	r23, 0x00	; 0
    3416:	57 07       	cpc	r21, r23
    3418:	0c f4       	brge	.+2      	; 0x341c <start_vertical_speed_control_left+0x160>
    341a:	99 c0       	rjmp	.+306    	; 0x354e <start_vertical_speed_control_left+0x292>
    341c:	80 ec       	ldi	r24, 0xC0	; 192
    341e:	9d e5       	ldi	r25, 0x5D	; 93
    3420:	a0 e0       	ldi	r26, 0x00	; 0
    3422:	b0 e0       	ldi	r27, 0x00	; 0
    3424:	80 93 15 03 	sts	0x0315, r24
    3428:	90 93 16 03 	sts	0x0316, r25
    342c:	a0 93 17 03 	sts	0x0317, r26
    3430:	b0 93 18 03 	sts	0x0318, r27
    3434:	2c ed       	ldi	r18, 0xDC	; 220
    3436:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = (signed int)(pwm_left_speed_controller>>4);
    3438:	31 83       	std	Z+1, r19	; 0x01
    343a:	20 83       	st	Z, r18

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
    343c:	80 91 fb 02 	lds	r24, 0x02FB
    3440:	90 91 fc 02 	lds	r25, 0x02FC
    3444:	18 16       	cp	r1, r24
    3446:	19 06       	cpc	r1, r25
    3448:	0c f0       	brlt	.+2      	; 0x344c <start_vertical_speed_control_left+0x190>
    344a:	98 c0       	rjmp	.+304    	; 0x357c <start_vertical_speed_control_left+0x2c0>
		*pwm_left += 1;
    344c:	2f 5f       	subi	r18, 0xFF	; 255
    344e:	3f 4f       	sbci	r19, 0xFF	; 255
    3450:	31 83       	std	Z+1, r19	; 0x01
    3452:	20 83       	st	Z, r18
	} else {
		*pwm_left -= 1;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    3454:	42 e0       	ldi	r20, 0x02	; 2
    3456:	21 30       	cpi	r18, 0x01	; 1
    3458:	34 07       	cpc	r19, r20
    345a:	0c f4       	brge	.+2      	; 0x345e <start_vertical_speed_control_left+0x1a2>
    345c:	41 c0       	rjmp	.+130    	; 0x34e0 <start_vertical_speed_control_left+0x224>
    345e:	80 e0       	ldi	r24, 0x00	; 0
    3460:	92 e0       	ldi	r25, 0x02	; 2
    3462:	91 83       	std	Z+1, r25	; 0x01
    3464:	80 83       	st	Z, r24
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);


}
    3466:	df 91       	pop	r29
    3468:	cf 91       	pop	r28
    346a:	1f 91       	pop	r17
    346c:	0f 91       	pop	r16
    346e:	ff 90       	pop	r15
    3470:	ef 90       	pop	r14
    3472:	df 90       	pop	r13
    3474:	cf 90       	pop	r12
    3476:	08 95       	ret
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    3478:	24 3b       	cpi	r18, 0xB4	; 180
    347a:	31 05       	cpc	r19, r1
    347c:	94 f4       	brge	.+36     	; 0x34a2 <start_vertical_speed_control_left+0x1e6>
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
    347e:	2a 35       	cpi	r18, 0x5A	; 90
    3480:	31 05       	cpc	r19, r1
    3482:	7c f4       	brge	.+30     	; 0x34a2 <start_vertical_speed_control_left+0x1e6>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
    3484:	18 16       	cp	r1, r24
    3486:	19 06       	cpc	r1, r25
    3488:	0c f0       	brlt	.+2      	; 0x348c <start_vertical_speed_control_left+0x1d0>
    348a:	a9 c0       	rjmp	.+338    	; 0x35de <start_vertical_speed_control_left+0x322>
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
    348c:	35 95       	asr	r19
    348e:	27 95       	ror	r18
    3490:	35 95       	asr	r19
    3492:	27 95       	ror	r18
    3494:	27 5e       	subi	r18, 0xE7	; 231
    3496:	3f 4f       	sbci	r19, 0xFF	; 255
    3498:	30 93 04 02 	sts	0x0204, r19
    349c:	20 93 03 02 	sts	0x0203, r18
    34a0:	38 cf       	rjmp	.-400    	; 0x3312 <start_vertical_speed_control_left+0x56>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
    34a2:	18 16       	cp	r1, r24
    34a4:	19 06       	cpc	r1, r25
    34a6:	0c f0       	brlt	.+2      	; 0x34aa <start_vertical_speed_control_left+0x1ee>
    34a8:	42 c0       	rjmp	.+132    	; 0x352e <start_vertical_speed_control_left+0x272>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
    34aa:	84 eb       	ldi	r24, 0xB4	; 180
    34ac:	90 e0       	ldi	r25, 0x00	; 0
    34ae:	82 1b       	sub	r24, r18
    34b0:	93 0b       	sbc	r25, r19
    34b2:	95 95       	asr	r25
    34b4:	87 95       	ror	r24
    34b6:	95 95       	asr	r25
    34b8:	87 95       	ror	r24
    34ba:	49 96       	adiw	r24, 0x19	; 25
    34bc:	90 93 04 02 	sts	0x0204, r25
    34c0:	80 93 03 02 	sts	0x0203, r24
    34c4:	26 cf       	rjmp	.-436    	; 0x3312 <start_vertical_speed_control_left+0x56>
void start_vertical_speed_control_left(signed int *pwm_left) {
	
	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).
	
	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    34c6:	10 92 1a 03 	sts	0x031A, r1
    34ca:	10 92 19 03 	sts	0x0319, r1
		delta_left_speed_current = 0;
    34ce:	10 92 76 05 	sts	0x0576, r1
    34d2:	10 92 75 05 	sts	0x0575, r1
		delta_left_speed_prev = 0;
    34d6:	10 92 8b 09 	sts	0x098B, r1
    34da:	10 92 8a 09 	sts	0x098A, r1
		return;
    34de:	c3 cf       	rjmp	.-122    	; 0x3466 <start_vertical_speed_control_left+0x1aa>
	} else {
		*pwm_left -= 1;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    34e0:	6e ef       	ldi	r22, 0xFE	; 254
    34e2:	20 30       	cpi	r18, 0x00	; 0
    34e4:	36 07       	cpc	r19, r22
    34e6:	0c f0       	brlt	.+2      	; 0x34ea <start_vertical_speed_control_left+0x22e>
    34e8:	be cf       	rjmp	.-132    	; 0x3466 <start_vertical_speed_control_left+0x1aa>
    34ea:	80 e0       	ldi	r24, 0x00	; 0
    34ec:	9e ef       	ldi	r25, 0xFE	; 254
    34ee:	91 83       	std	Z+1, r25	; 0x01
    34f0:	80 83       	st	Z, r24
    34f2:	b9 cf       	rjmp	.-142    	; 0x3466 <start_vertical_speed_control_left+0x1aa>
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    34f4:	79 ef       	ldi	r23, 0xF9	; 249
    34f6:	80 3c       	cpi	r24, 0xC0	; 192
    34f8:	97 07       	cpc	r25, r23
    34fa:	7c f4       	brge	.+30     	; 0x351a <start_vertical_speed_control_left+0x25e>
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
    34fc:	80 ec       	ldi	r24, 0xC0	; 192
    34fe:	99 ef       	ldi	r25, 0xF9	; 249
    3500:	90 93 1a 03 	sts	0x031A, r25
    3504:	80 93 19 03 	sts	0x0319, r24
    3508:	60 e4       	ldi	r22, 0x40	; 64
    350a:	c6 2e       	mov	r12, r22
    350c:	6d ee       	ldi	r22, 0xED	; 237
    350e:	d6 2e       	mov	r13, r22
    3510:	6f ef       	ldi	r22, 0xFF	; 255
    3512:	e6 2e       	mov	r14, r22
    3514:	6f ef       	ldi	r22, 0xFF	; 255
    3516:	f6 2e       	mov	r15, r22
    3518:	2e cf       	rjmp	.-420    	; 0x3376 <start_vertical_speed_control_left+0xba>
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    351a:	6c 01       	movw	r12, r24
    351c:	cc 0c       	add	r12, r12
    351e:	dd 1c       	adc	r13, r13
    3520:	c8 0e       	add	r12, r24
    3522:	d9 1e       	adc	r13, r25
    3524:	ee 24       	eor	r14, r14
    3526:	d7 fc       	sbrc	r13, 7
    3528:	e0 94       	com	r14
    352a:	fe 2c       	mov	r15, r14
    352c:	24 cf       	rjmp	.-440    	; 0x3376 <start_vertical_speed_control_left+0xba>
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    352e:	84 eb       	ldi	r24, 0xB4	; 180
    3530:	90 e0       	ldi	r25, 0x00	; 0
    3532:	e1 ce       	rjmp	.-574    	; 0x32f6 <start_vertical_speed_control_left+0x3a>
	pwm_left_speed_controller += (signed long int)(P_VERTICAL * delta_left_speed_current);
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
	pwm_left_speed_controller += (signed long int)(I_VERTICAL*delta_left_speed_sum);

	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    3534:	17 fd       	sbrc	r17, 7
    3536:	0b c0       	rjmp	.+22     	; 0x354e <start_vertical_speed_control_left+0x292>
		pwm_left_speed_controller = 0;
    3538:	10 92 15 03 	sts	0x0315, r1
    353c:	10 92 16 03 	sts	0x0316, r1
    3540:	10 92 17 03 	sts	0x0317, r1
    3544:	10 92 18 03 	sts	0x0318, r1
    3548:	20 e0       	ldi	r18, 0x00	; 0
    354a:	30 e0       	ldi	r19, 0x00	; 0
    354c:	a9 01       	movw	r20, r18
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    354e:	20 34       	cpi	r18, 0x40	; 64
    3550:	82 ea       	ldi	r24, 0xA2	; 162
    3552:	38 07       	cpc	r19, r24
    3554:	8f ef       	ldi	r24, 0xFF	; 255
    3556:	48 07       	cpc	r20, r24
    3558:	8f ef       	ldi	r24, 0xFF	; 255
    355a:	58 07       	cpc	r21, r24
    355c:	54 f5       	brge	.+84     	; 0x35b2 <start_vertical_speed_control_left+0x2f6>
    355e:	80 e4       	ldi	r24, 0x40	; 64
    3560:	92 ea       	ldi	r25, 0xA2	; 162
    3562:	af ef       	ldi	r26, 0xFF	; 255
    3564:	bf ef       	ldi	r27, 0xFF	; 255
    3566:	80 93 15 03 	sts	0x0315, r24
    356a:	90 93 16 03 	sts	0x0316, r25
    356e:	a0 93 17 03 	sts	0x0317, r26
    3572:	b0 93 18 03 	sts	0x0318, r27
    3576:	24 e2       	ldi	r18, 0x24	; 36
    3578:	3a ef       	ldi	r19, 0xFA	; 250
    357a:	5e cf       	rjmp	.-324    	; 0x3438 <start_vertical_speed_control_left+0x17c>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
		*pwm_left += 1;
	} else {
		*pwm_left -= 1;
    357c:	21 50       	subi	r18, 0x01	; 1
    357e:	30 40       	sbci	r19, 0x00	; 0
    3580:	31 83       	std	Z+1, r19	; 0x01
    3582:	20 83       	st	Z, r18
    3584:	67 cf       	rjmp	.-306    	; 0x3454 <start_vertical_speed_control_left+0x198>
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    3586:	a0 91 01 03 	lds	r26, 0x0301
    358a:	b0 91 02 03 	lds	r27, 0x0302
    358e:	a8 0f       	add	r26, r24
    3590:	b9 1f       	adc	r27, r25
    3592:	b0 93 76 05 	sts	0x0576, r27
    3596:	a0 93 75 05 	sts	0x0575, r26
    359a:	d2 ce       	rjmp	.-604    	; 0x3340 <start_vertical_speed_control_left+0x84>
	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    359c:	10 92 15 03 	sts	0x0315, r1
    35a0:	10 92 16 03 	sts	0x0316, r1
    35a4:	10 92 17 03 	sts	0x0317, r1
    35a8:	10 92 18 03 	sts	0x0318, r1
    35ac:	20 e0       	ldi	r18, 0x00	; 0
    35ae:	30 e0       	ldi	r19, 0x00	; 0
    35b0:	a9 01       	movw	r20, r18
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    35b2:	84 e0       	ldi	r24, 0x04	; 4
    35b4:	55 95       	asr	r21
    35b6:	47 95       	ror	r20
    35b8:	37 95       	ror	r19
    35ba:	27 95       	ror	r18
    35bc:	8a 95       	dec	r24
    35be:	d1 f7       	brne	.-12     	; 0x35b4 <start_vertical_speed_control_left+0x2f8>
    35c0:	3b cf       	rjmp	.-394    	; 0x3438 <start_vertical_speed_control_left+0x17c>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
    35c2:	88 e6       	ldi	r24, 0x68	; 104
    35c4:	91 e0       	ldi	r25, 0x01	; 1
    35c6:	82 1b       	sub	r24, r18
    35c8:	93 0b       	sbc	r25, r19
    35ca:	95 95       	asr	r25
    35cc:	87 95       	ror	r24
    35ce:	95 95       	asr	r25
    35d0:	87 95       	ror	r24
    35d2:	49 96       	adiw	r24, 0x19	; 25
    35d4:	90 93 04 02 	sts	0x0204, r25
    35d8:	80 93 03 02 	sts	0x0203, r24
    35dc:	9a ce       	rjmp	.-716    	; 0x3312 <start_vertical_speed_control_left+0x56>
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
    35de:	35 95       	asr	r19
    35e0:	27 95       	ror	r18
    35e2:	35 95       	asr	r19
    35e4:	27 95       	ror	r18
    35e6:	89 e1       	ldi	r24, 0x19	; 25
    35e8:	90 e0       	ldi	r25, 0x00	; 0
    35ea:	82 1b       	sub	r24, r18
    35ec:	93 0b       	sbc	r25, r19
    35ee:	90 93 04 02 	sts	0x0204, r25
    35f2:	80 93 03 02 	sts	0x0203, r24
    35f6:	8d ce       	rjmp	.-742    	; 0x3312 <start_vertical_speed_control_left+0x56>

000035f8 <start_vertical_speed_control_right>:


}


void start_vertical_speed_control_right(signed int *pwm_right) {
    35f8:	cf 92       	push	r12
    35fa:	df 92       	push	r13
    35fc:	ef 92       	push	r14
    35fe:	ff 92       	push	r15
    3600:	0f 93       	push	r16
    3602:	1f 93       	push	r17
    3604:	cf 93       	push	r28
    3606:	df 93       	push	r29
    3608:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    360a:	80 81       	ld	r24, Z
    360c:	91 81       	ldd	r25, Z+1	; 0x01
    360e:	00 97       	sbiw	r24, 0x00	; 0
    3610:	09 f4       	brne	.+2      	; 0x3614 <start_vertical_speed_control_right+0x1c>
    3612:	f7 c0       	rjmp	.+494    	; 0x3802 <start_vertical_speed_control_right+0x20a>
		delta_right_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    3614:	20 91 4e 04 	lds	r18, 0x044E
    3618:	30 91 4f 04 	lds	r19, 0x044F
    361c:	41 e0       	ldi	r20, 0x01	; 1
    361e:	2e 30       	cpi	r18, 0x0E	; 14
    3620:	34 07       	cpc	r19, r20
    3622:	0c f4       	brge	.+2      	; 0x3626 <start_vertical_speed_control_right+0x2e>
    3624:	c7 c0       	rjmp	.+398    	; 0x37b4 <start_vertical_speed_control_right+0x1bc>
		if(*pwm_right > 0) {
    3626:	18 16       	cp	r1, r24
    3628:	19 06       	cpc	r1, r25
    362a:	0c f0       	brlt	.+2      	; 0x362e <start_vertical_speed_control_right+0x36>
    362c:	68 c1       	rjmp	.+720    	; 0x38fe <start_vertical_speed_control_right+0x306>
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
    362e:	88 e6       	ldi	r24, 0x68	; 104
    3630:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    3632:	82 1b       	sub	r24, r18
    3634:	93 0b       	sbc	r25, r19
    3636:	95 95       	asr	r25
    3638:	87 95       	ror	r24
    363a:	95 95       	asr	r25
    363c:	87 95       	ror	r24
    363e:	29 e1       	ldi	r18, 0x19	; 25
    3640:	30 e0       	ldi	r19, 0x00	; 0
    3642:	28 1b       	sub	r18, r24
    3644:	39 0b       	sbc	r19, r25
    3646:	30 93 06 02 	sts	0x0206, r19
    364a:	20 93 05 02 	sts	0x0205, r18
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
		}
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    364e:	c0 91 29 0b 	lds	r28, 0x0B29
    3652:	d0 91 2a 0b 	lds	r29, 0x0B2A
    3656:	d0 93 c3 08 	sts	0x08C3, r29
    365a:	c0 93 c2 08 	sts	0x08C2, r28
	if(*pwm_right >= 0) {
    365e:	80 81       	ld	r24, Z
    3660:	91 81       	ldd	r25, Z+1	; 0x01
    3662:	97 fd       	sbrc	r25, 7
    3664:	2e c1       	rjmp	.+604    	; 0x38c2 <start_vertical_speed_control_right+0x2ca>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    3666:	20 91 03 03 	lds	r18, 0x0303
    366a:	30 91 04 03 	lds	r19, 0x0304
    366e:	dc 01       	movw	r26, r24
    3670:	a2 1b       	sub	r26, r18
    3672:	b3 0b       	sbc	r27, r19
    3674:	b0 93 2a 0b 	sts	0x0B2A, r27
    3678:	a0 93 29 0b 	sts	0x0B29, r26
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    367c:	80 91 1b 03 	lds	r24, 0x031B
    3680:	90 91 1c 03 	lds	r25, 0x031C
    3684:	8a 0f       	add	r24, r26
    3686:	9b 1f       	adc	r25, r27
    3688:	90 93 1c 03 	sts	0x031C, r25
    368c:	80 93 1b 03 	sts	0x031B, r24

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
    3690:	66 e0       	ldi	r22, 0x06	; 6
    3692:	81 34       	cpi	r24, 0x41	; 65
    3694:	96 07       	cpc	r25, r22
    3696:	0c f4       	brge	.+2      	; 0x369a <start_vertical_speed_control_right+0xa2>
    3698:	cb c0       	rjmp	.+406    	; 0x3830 <start_vertical_speed_control_right+0x238>
		delta_right_speed_sum = I_LIMIT_VERTICAL;
    369a:	80 e4       	ldi	r24, 0x40	; 64
    369c:	96 e0       	ldi	r25, 0x06	; 6
    369e:	90 93 1c 03 	sts	0x031C, r25
    36a2:	80 93 1b 03 	sts	0x031B, r24
    36a6:	40 ec       	ldi	r20, 0xC0	; 192
    36a8:	c4 2e       	mov	r12, r20
    36aa:	42 e1       	ldi	r20, 0x12	; 18
    36ac:	d4 2e       	mov	r13, r20
    36ae:	e1 2c       	mov	r14, r1
    36b0:	f1 2c       	mov	r15, r1
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_right_speed_controller = (signed long int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
    36b2:	00 81       	ld	r16, Z
    36b4:	11 81       	ldd	r17, Z+1	; 0x01
	pwm_right_speed_controller += (signed long int)(P_VERTICAL * delta_right_speed_current);
    36b6:	9d 01       	movw	r18, r26
    36b8:	22 0f       	add	r18, r18
    36ba:	33 1f       	adc	r19, r19
    36bc:	2a 0f       	add	r18, r26
    36be:	3b 1f       	adc	r19, r27
    36c0:	22 0f       	add	r18, r18
    36c2:	33 1f       	adc	r19, r19
    36c4:	22 0f       	add	r18, r18
    36c6:	33 1f       	adc	r19, r19
    36c8:	22 0f       	add	r18, r18
    36ca:	33 1f       	adc	r19, r19
    36cc:	2a 0f       	add	r18, r26
    36ce:	3b 1f       	adc	r19, r27
    36d0:	44 27       	eor	r20, r20
    36d2:	37 fd       	sbrc	r19, 7
    36d4:	40 95       	com	r20
    36d6:	54 2f       	mov	r21, r20
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_right_speed_controller = (signed long int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
    36d8:	80 91 05 02 	lds	r24, 0x0205
    36dc:	90 91 06 02 	lds	r25, 0x0206
    36e0:	08 9f       	mul	r16, r24
    36e2:	b0 01       	movw	r22, r0
    36e4:	09 9f       	mul	r16, r25
    36e6:	70 0d       	add	r23, r0
    36e8:	18 9f       	mul	r17, r24
    36ea:	70 0d       	add	r23, r0
    36ec:	11 24       	eor	r1, r1
    36ee:	88 27       	eor	r24, r24
    36f0:	77 fd       	sbrc	r23, 7
    36f2:	80 95       	com	r24
    36f4:	98 2f       	mov	r25, r24
	pwm_right_speed_controller += (signed long int)(P_VERTICAL * delta_right_speed_current);
    36f6:	26 0f       	add	r18, r22
    36f8:	37 1f       	adc	r19, r23
    36fa:	48 1f       	adc	r20, r24
    36fc:	59 1f       	adc	r21, r25
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
    36fe:	ac 1b       	sub	r26, r28
    3700:	bd 0b       	sbc	r27, r29
    3702:	aa 0f       	add	r26, r26
    3704:	bb 1f       	adc	r27, r27
    3706:	bd 01       	movw	r22, r26
    3708:	cb 01       	movw	r24, r22
    370a:	aa 27       	eor	r26, r26
    370c:	97 fd       	sbrc	r25, 7
    370e:	a0 95       	com	r26
    3710:	ba 2f       	mov	r27, r26
    3712:	28 0f       	add	r18, r24
    3714:	39 1f       	adc	r19, r25
    3716:	4a 1f       	adc	r20, r26
    3718:	5b 1f       	adc	r21, r27
	pwm_right_speed_controller += (signed long int)(I_VERTICAL*delta_right_speed_sum);
    371a:	2c 0d       	add	r18, r12
    371c:	3d 1d       	adc	r19, r13
    371e:	4e 1d       	adc	r20, r14
    3720:	5f 1d       	adc	r21, r15
    3722:	20 93 11 03 	sts	0x0311, r18
    3726:	30 93 12 03 	sts	0x0312, r19
    372a:	40 93 13 03 	sts	0x0313, r20
    372e:	50 93 14 03 	sts	0x0314, r21

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    3732:	57 fd       	sbrc	r21, 7
    3734:	9d c0       	rjmp	.+314    	; 0x3870 <start_vertical_speed_control_right+0x278>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    3736:	12 16       	cp	r1, r18
    3738:	13 06       	cpc	r1, r19
    373a:	14 06       	cpc	r1, r20
    373c:	15 06       	cpc	r1, r21
    373e:	0c f0       	brlt	.+2      	; 0x3742 <start_vertical_speed_control_right+0x14a>
    3740:	a4 c0       	rjmp	.+328    	; 0x388a <start_vertical_speed_control_right+0x292>
    3742:	17 fd       	sbrc	r17, 7
    3744:	c9 c0       	rjmp	.+402    	; 0x38d8 <start_vertical_speed_control_right+0x2e0>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    3746:	21 3c       	cpi	r18, 0xC1	; 193
    3748:	7d e5       	ldi	r23, 0x5D	; 93
    374a:	37 07       	cpc	r19, r23
    374c:	70 e0       	ldi	r23, 0x00	; 0
    374e:	47 07       	cpc	r20, r23
    3750:	70 e0       	ldi	r23, 0x00	; 0
    3752:	57 07       	cpc	r21, r23
    3754:	0c f4       	brge	.+2      	; 0x3758 <start_vertical_speed_control_right+0x160>
    3756:	99 c0       	rjmp	.+306    	; 0x388a <start_vertical_speed_control_right+0x292>
    3758:	80 ec       	ldi	r24, 0xC0	; 192
    375a:	9d e5       	ldi	r25, 0x5D	; 93
    375c:	a0 e0       	ldi	r26, 0x00	; 0
    375e:	b0 e0       	ldi	r27, 0x00	; 0
    3760:	80 93 11 03 	sts	0x0311, r24
    3764:	90 93 12 03 	sts	0x0312, r25
    3768:	a0 93 13 03 	sts	0x0313, r26
    376c:	b0 93 14 03 	sts	0x0314, r27
    3770:	2c ed       	ldi	r18, 0xDC	; 220
    3772:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = (signed int)(pwm_right_speed_controller>>4);
    3774:	31 83       	std	Z+1, r19	; 0x01
    3776:	20 83       	st	Z, r18

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
    3778:	80 91 f9 02 	lds	r24, 0x02F9
    377c:	90 91 fa 02 	lds	r25, 0x02FA
    3780:	18 16       	cp	r1, r24
    3782:	19 06       	cpc	r1, r25
    3784:	0c f0       	brlt	.+2      	; 0x3788 <start_vertical_speed_control_right+0x190>
    3786:	98 c0       	rjmp	.+304    	; 0x38b8 <start_vertical_speed_control_right+0x2c0>
		*pwm_right += 1;
    3788:	2f 5f       	subi	r18, 0xFF	; 255
    378a:	3f 4f       	sbci	r19, 0xFF	; 255
    378c:	31 83       	std	Z+1, r19	; 0x01
    378e:	20 83       	st	Z, r18
	} else {
		*pwm_right -= 1;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    3790:	42 e0       	ldi	r20, 0x02	; 2
    3792:	21 30       	cpi	r18, 0x01	; 1
    3794:	34 07       	cpc	r19, r20
    3796:	0c f4       	brge	.+2      	; 0x379a <start_vertical_speed_control_right+0x1a2>
    3798:	41 c0       	rjmp	.+130    	; 0x381c <start_vertical_speed_control_right+0x224>
    379a:	80 e0       	ldi	r24, 0x00	; 0
    379c:	92 e0       	ldi	r25, 0x02	; 2
    379e:	91 83       	std	Z+1, r25	; 0x01
    37a0:	80 83       	st	Z, r24
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    37a2:	df 91       	pop	r29
    37a4:	cf 91       	pop	r28
    37a6:	1f 91       	pop	r17
    37a8:	0f 91       	pop	r16
    37aa:	ff 90       	pop	r15
    37ac:	ef 90       	pop	r14
    37ae:	df 90       	pop	r13
    37b0:	cf 90       	pop	r12
    37b2:	08 95       	ret
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    37b4:	24 3b       	cpi	r18, 0xB4	; 180
    37b6:	31 05       	cpc	r19, r1
    37b8:	94 f4       	brge	.+36     	; 0x37de <start_vertical_speed_control_right+0x1e6>
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
    37ba:	2a 35       	cpi	r18, 0x5A	; 90
    37bc:	31 05       	cpc	r19, r1
    37be:	7c f4       	brge	.+30     	; 0x37de <start_vertical_speed_control_right+0x1e6>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
    37c0:	18 16       	cp	r1, r24
    37c2:	19 06       	cpc	r1, r25
    37c4:	0c f0       	brlt	.+2      	; 0x37c8 <start_vertical_speed_control_right+0x1d0>
    37c6:	a9 c0       	rjmp	.+338    	; 0x391a <start_vertical_speed_control_right+0x322>
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
    37c8:	35 95       	asr	r19
    37ca:	27 95       	ror	r18
    37cc:	35 95       	asr	r19
    37ce:	27 95       	ror	r18
    37d0:	27 5e       	subi	r18, 0xE7	; 231
    37d2:	3f 4f       	sbci	r19, 0xFF	; 255
    37d4:	30 93 06 02 	sts	0x0206, r19
    37d8:	20 93 05 02 	sts	0x0205, r18
    37dc:	38 cf       	rjmp	.-400    	; 0x364e <start_vertical_speed_control_right+0x56>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
    37de:	18 16       	cp	r1, r24
    37e0:	19 06       	cpc	r1, r25
    37e2:	0c f0       	brlt	.+2      	; 0x37e6 <start_vertical_speed_control_right+0x1ee>
    37e4:	42 c0       	rjmp	.+132    	; 0x386a <start_vertical_speed_control_right+0x272>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
    37e6:	84 eb       	ldi	r24, 0xB4	; 180
    37e8:	90 e0       	ldi	r25, 0x00	; 0
    37ea:	82 1b       	sub	r24, r18
    37ec:	93 0b       	sbc	r25, r19
    37ee:	95 95       	asr	r25
    37f0:	87 95       	ror	r24
    37f2:	95 95       	asr	r25
    37f4:	87 95       	ror	r24
    37f6:	49 96       	adiw	r24, 0x19	; 25
    37f8:	90 93 06 02 	sts	0x0206, r25
    37fc:	80 93 05 02 	sts	0x0205, r24
    3800:	26 cf       	rjmp	.-436    	; 0x364e <start_vertical_speed_control_right+0x56>
void start_vertical_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    3802:	10 92 1c 03 	sts	0x031C, r1
    3806:	10 92 1b 03 	sts	0x031B, r1
		delta_right_speed_current = 0;
    380a:	10 92 2a 0b 	sts	0x0B2A, r1
    380e:	10 92 29 0b 	sts	0x0B29, r1
		delta_right_speed_prev = 0;
    3812:	10 92 c3 08 	sts	0x08C3, r1
    3816:	10 92 c2 08 	sts	0x08C2, r1
		return;
    381a:	c3 cf       	rjmp	.-122    	; 0x37a2 <start_vertical_speed_control_right+0x1aa>
	} else {
		*pwm_right -= 1;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    381c:	6e ef       	ldi	r22, 0xFE	; 254
    381e:	20 30       	cpi	r18, 0x00	; 0
    3820:	36 07       	cpc	r19, r22
    3822:	0c f0       	brlt	.+2      	; 0x3826 <start_vertical_speed_control_right+0x22e>
    3824:	be cf       	rjmp	.-132    	; 0x37a2 <start_vertical_speed_control_right+0x1aa>
    3826:	80 e0       	ldi	r24, 0x00	; 0
    3828:	9e ef       	ldi	r25, 0xFE	; 254
    382a:	91 83       	std	Z+1, r25	; 0x01
    382c:	80 83       	st	Z, r24
    382e:	b9 cf       	rjmp	.-142    	; 0x37a2 <start_vertical_speed_control_right+0x1aa>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    3830:	79 ef       	ldi	r23, 0xF9	; 249
    3832:	80 3c       	cpi	r24, 0xC0	; 192
    3834:	97 07       	cpc	r25, r23
    3836:	7c f4       	brge	.+30     	; 0x3856 <start_vertical_speed_control_right+0x25e>
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
    3838:	80 ec       	ldi	r24, 0xC0	; 192
    383a:	99 ef       	ldi	r25, 0xF9	; 249
    383c:	90 93 1c 03 	sts	0x031C, r25
    3840:	80 93 1b 03 	sts	0x031B, r24
    3844:	20 e4       	ldi	r18, 0x40	; 64
    3846:	c2 2e       	mov	r12, r18
    3848:	2d ee       	ldi	r18, 0xED	; 237
    384a:	d2 2e       	mov	r13, r18
    384c:	2f ef       	ldi	r18, 0xFF	; 255
    384e:	e2 2e       	mov	r14, r18
    3850:	2f ef       	ldi	r18, 0xFF	; 255
    3852:	f2 2e       	mov	r15, r18
    3854:	2e cf       	rjmp	.-420    	; 0x36b2 <start_vertical_speed_control_right+0xba>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    3856:	6c 01       	movw	r12, r24
    3858:	cc 0c       	add	r12, r12
    385a:	dd 1c       	adc	r13, r13
    385c:	c8 0e       	add	r12, r24
    385e:	d9 1e       	adc	r13, r25
    3860:	ee 24       	eor	r14, r14
    3862:	d7 fc       	sbrc	r13, 7
    3864:	e0 94       	com	r14
    3866:	fe 2c       	mov	r15, r14
    3868:	24 cf       	rjmp	.-440    	; 0x36b2 <start_vertical_speed_control_right+0xba>
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    386a:	84 eb       	ldi	r24, 0xB4	; 180
    386c:	90 e0       	ldi	r25, 0x00	; 0
    386e:	e1 ce       	rjmp	.-574    	; 0x3632 <start_vertical_speed_control_right+0x3a>
	pwm_right_speed_controller += (signed long int)(P_VERTICAL * delta_right_speed_current);
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
	pwm_right_speed_controller += (signed long int)(I_VERTICAL*delta_right_speed_sum);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    3870:	17 fd       	sbrc	r17, 7
    3872:	0b c0       	rjmp	.+22     	; 0x388a <start_vertical_speed_control_right+0x292>
		pwm_right_speed_controller = 0;
    3874:	10 92 11 03 	sts	0x0311, r1
    3878:	10 92 12 03 	sts	0x0312, r1
    387c:	10 92 13 03 	sts	0x0313, r1
    3880:	10 92 14 03 	sts	0x0314, r1
    3884:	20 e0       	ldi	r18, 0x00	; 0
    3886:	30 e0       	ldi	r19, 0x00	; 0
    3888:	a9 01       	movw	r20, r18
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    388a:	20 34       	cpi	r18, 0x40	; 64
    388c:	82 ea       	ldi	r24, 0xA2	; 162
    388e:	38 07       	cpc	r19, r24
    3890:	8f ef       	ldi	r24, 0xFF	; 255
    3892:	48 07       	cpc	r20, r24
    3894:	8f ef       	ldi	r24, 0xFF	; 255
    3896:	58 07       	cpc	r21, r24
    3898:	54 f5       	brge	.+84     	; 0x38ee <start_vertical_speed_control_right+0x2f6>
    389a:	80 e4       	ldi	r24, 0x40	; 64
    389c:	92 ea       	ldi	r25, 0xA2	; 162
    389e:	af ef       	ldi	r26, 0xFF	; 255
    38a0:	bf ef       	ldi	r27, 0xFF	; 255
    38a2:	80 93 11 03 	sts	0x0311, r24
    38a6:	90 93 12 03 	sts	0x0312, r25
    38aa:	a0 93 13 03 	sts	0x0313, r26
    38ae:	b0 93 14 03 	sts	0x0314, r27
    38b2:	24 e2       	ldi	r18, 0x24	; 36
    38b4:	3a ef       	ldi	r19, 0xFA	; 250
    38b6:	5e cf       	rjmp	.-324    	; 0x3774 <start_vertical_speed_control_right+0x17c>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
		*pwm_right += 1;
	} else {
		*pwm_right -= 1;
    38b8:	21 50       	subi	r18, 0x01	; 1
    38ba:	30 40       	sbci	r19, 0x00	; 0
    38bc:	31 83       	std	Z+1, r19	; 0x01
    38be:	20 83       	st	Z, r18
    38c0:	67 cf       	rjmp	.-306    	; 0x3790 <start_vertical_speed_control_right+0x198>
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    38c2:	a0 91 03 03 	lds	r26, 0x0303
    38c6:	b0 91 04 03 	lds	r27, 0x0304
    38ca:	a8 0f       	add	r26, r24
    38cc:	b9 1f       	adc	r27, r25
    38ce:	b0 93 2a 0b 	sts	0x0B2A, r27
    38d2:	a0 93 29 0b 	sts	0x0B29, r26
    38d6:	d2 ce       	rjmp	.-604    	; 0x367c <start_vertical_speed_control_right+0x84>
	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    38d8:	10 92 11 03 	sts	0x0311, r1
    38dc:	10 92 12 03 	sts	0x0312, r1
    38e0:	10 92 13 03 	sts	0x0313, r1
    38e4:	10 92 14 03 	sts	0x0314, r1
    38e8:	20 e0       	ldi	r18, 0x00	; 0
    38ea:	30 e0       	ldi	r19, 0x00	; 0
    38ec:	a9 01       	movw	r20, r18
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    38ee:	64 e0       	ldi	r22, 0x04	; 4
    38f0:	55 95       	asr	r21
    38f2:	47 95       	ror	r20
    38f4:	37 95       	ror	r19
    38f6:	27 95       	ror	r18
    38f8:	6a 95       	dec	r22
    38fa:	d1 f7       	brne	.-12     	; 0x38f0 <start_vertical_speed_control_right+0x2f8>
    38fc:	3b cf       	rjmp	.-394    	; 0x3774 <start_vertical_speed_control_right+0x17c>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
    38fe:	88 e6       	ldi	r24, 0x68	; 104
    3900:	91 e0       	ldi	r25, 0x01	; 1
    3902:	82 1b       	sub	r24, r18
    3904:	93 0b       	sbc	r25, r19
    3906:	95 95       	asr	r25
    3908:	87 95       	ror	r24
    390a:	95 95       	asr	r25
    390c:	87 95       	ror	r24
    390e:	49 96       	adiw	r24, 0x19	; 25
    3910:	90 93 06 02 	sts	0x0206, r25
    3914:	80 93 05 02 	sts	0x0205, r24
    3918:	9a ce       	rjmp	.-716    	; 0x364e <start_vertical_speed_control_right+0x56>
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
    391a:	35 95       	asr	r19
    391c:	27 95       	ror	r18
    391e:	35 95       	asr	r19
    3920:	27 95       	ror	r18
    3922:	89 e1       	ldi	r24, 0x19	; 25
    3924:	90 e0       	ldi	r25, 0x00	; 0
    3926:	82 1b       	sub	r24, r18
    3928:	93 0b       	sbc	r25, r19
    392a:	90 93 06 02 	sts	0x0206, r25
    392e:	80 93 05 02 	sts	0x0205, r24
    3932:	8d ce       	rjmp	.-742    	; 0x364e <start_vertical_speed_control_right+0x56>

00003934 <start_horizontal_speed_control_right>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_right(signed int *pwm_right) {
    3934:	cf 92       	push	r12
    3936:	df 92       	push	r13
    3938:	ef 92       	push	r14
    393a:	ff 92       	push	r15
    393c:	0f 93       	push	r16
    393e:	1f 93       	push	r17
    3940:	cf 93       	push	r28
    3942:	df 93       	push	r29
    3944:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    3946:	80 81       	ld	r24, Z
    3948:	91 81       	ldd	r25, Z+1	; 0x01
    394a:	00 97       	sbiw	r24, 0x00	; 0
    394c:	09 f4       	brne	.+2      	; 0x3950 <start_horizontal_speed_control_right+0x1c>
    394e:	b8 c0       	rjmp	.+368    	; 0x3ac0 <start_horizontal_speed_control_right+0x18c>
		delta_right_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    3950:	c0 91 29 0b 	lds	r28, 0x0B29
    3954:	d0 91 2a 0b 	lds	r29, 0x0B2A
    3958:	d0 93 c3 08 	sts	0x08C3, r29
    395c:	c0 93 c2 08 	sts	0x08C2, r28
	if(*pwm_right >= 0) {
    3960:	80 81       	ld	r24, Z
    3962:	91 81       	ldd	r25, Z+1	; 0x01
    3964:	97 fd       	sbrc	r25, 7
    3966:	cd c0       	rjmp	.+410    	; 0x3b02 <start_horizontal_speed_control_right+0x1ce>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    3968:	20 91 03 03 	lds	r18, 0x0303
    396c:	30 91 04 03 	lds	r19, 0x0304
    3970:	dc 01       	movw	r26, r24
    3972:	a2 1b       	sub	r26, r18
    3974:	b3 0b       	sbc	r27, r19
    3976:	b0 93 2a 0b 	sts	0x0B2A, r27
    397a:	a0 93 29 0b 	sts	0x0B29, r26
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}

	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    397e:	c0 90 1b 03 	lds	r12, 0x031B
    3982:	d0 90 1c 03 	lds	r13, 0x031C
    3986:	ca 0e       	add	r12, r26
    3988:	db 1e       	adc	r13, r27
    398a:	d0 92 1c 03 	sts	0x031C, r13
    398e:	c0 92 1b 03 	sts	0x031B, r12

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
    3992:	81 e4       	ldi	r24, 0x41	; 65
    3994:	c8 16       	cp	r12, r24
    3996:	86 e0       	ldi	r24, 0x06	; 6
    3998:	d8 06       	cpc	r13, r24
    399a:	0c f4       	brge	.+2      	; 0x399e <start_horizontal_speed_control_right+0x6a>
    399c:	9e c0       	rjmp	.+316    	; 0x3ada <start_horizontal_speed_control_right+0x1a6>
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
    399e:	80 e4       	ldi	r24, 0x40	; 64
    39a0:	96 e0       	ldi	r25, 0x06	; 6
    39a2:	90 93 1c 03 	sts	0x031C, r25
    39a6:	80 93 1b 03 	sts	0x031B, r24
    39aa:	10 e8       	ldi	r17, 0x80	; 128
    39ac:	c1 2e       	mov	r12, r17
    39ae:	1c e0       	ldi	r17, 0x0C	; 12
    39b0:	d1 2e       	mov	r13, r17
    39b2:	e1 2c       	mov	r14, r1
    39b4:	f1 2c       	mov	r15, r1
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
	}		

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed long int)((*pwm_right) << 3);
    39b6:	00 81       	ld	r16, Z
    39b8:	11 81       	ldd	r17, Z+1	; 0x01
	pwm_right_speed_controller += (signed long int)(delta_right_speed_current*P_HORIZONTAL);
    39ba:	cd 01       	movw	r24, r26
    39bc:	88 0f       	add	r24, r24
    39be:	99 1f       	adc	r25, r25
    39c0:	8a 0f       	add	r24, r26
    39c2:	9b 1f       	adc	r25, r27
    39c4:	9c 01       	movw	r18, r24
    39c6:	22 0f       	add	r18, r18
    39c8:	33 1f       	adc	r19, r19
    39ca:	22 0f       	add	r18, r18
    39cc:	33 1f       	adc	r19, r19
    39ce:	28 0f       	add	r18, r24
    39d0:	39 1f       	adc	r19, r25
    39d2:	44 27       	eor	r20, r20
    39d4:	37 fd       	sbrc	r19, 7
    39d6:	40 95       	com	r20
    39d8:	54 2f       	mov	r21, r20
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
	}		

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed long int)((*pwm_right) << 3);
    39da:	b8 01       	movw	r22, r16
    39dc:	66 0f       	add	r22, r22
    39de:	77 1f       	adc	r23, r23
    39e0:	66 0f       	add	r22, r22
    39e2:	77 1f       	adc	r23, r23
    39e4:	66 0f       	add	r22, r22
    39e6:	77 1f       	adc	r23, r23
    39e8:	88 27       	eor	r24, r24
    39ea:	77 fd       	sbrc	r23, 7
    39ec:	80 95       	com	r24
    39ee:	98 2f       	mov	r25, r24
	pwm_right_speed_controller += (signed long int)(delta_right_speed_current*P_HORIZONTAL);
    39f0:	26 0f       	add	r18, r22
    39f2:	37 1f       	adc	r19, r23
    39f4:	48 1f       	adc	r20, r24
    39f6:	59 1f       	adc	r21, r25
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
    39f8:	ac 1b       	sub	r26, r28
    39fa:	bd 0b       	sbc	r27, r29
    39fc:	cd 01       	movw	r24, r26
    39fe:	88 0f       	add	r24, r24
    3a00:	99 1f       	adc	r25, r25
    3a02:	8a 0f       	add	r24, r26
    3a04:	9b 1f       	adc	r25, r27
    3a06:	aa 27       	eor	r26, r26
    3a08:	97 fd       	sbrc	r25, 7
    3a0a:	a0 95       	com	r26
    3a0c:	ba 2f       	mov	r27, r26
    3a0e:	28 0f       	add	r18, r24
    3a10:	39 1f       	adc	r19, r25
    3a12:	4a 1f       	adc	r20, r26
    3a14:	5b 1f       	adc	r21, r27
	pwm_right_speed_controller += (signed long int)(delta_right_speed_sum*I_HORIZONTAL);
    3a16:	2c 0d       	add	r18, r12
    3a18:	3d 1d       	adc	r19, r13
    3a1a:	4e 1d       	adc	r20, r14
    3a1c:	5f 1d       	adc	r21, r15
    3a1e:	20 93 11 03 	sts	0x0311, r18
    3a22:	30 93 12 03 	sts	0x0312, r19
    3a26:	40 93 13 03 	sts	0x0313, r20
    3a2a:	50 93 14 03 	sts	0x0314, r21

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    3a2e:	57 fd       	sbrc	r21, 7
    3a30:	7a c0       	rjmp	.+244    	; 0x3b26 <start_horizontal_speed_control_right+0x1f2>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    3a32:	12 16       	cp	r1, r18
    3a34:	13 06       	cpc	r1, r19
    3a36:	14 06       	cpc	r1, r20
    3a38:	15 06       	cpc	r1, r21
    3a3a:	0c f0       	brlt	.+2      	; 0x3a3e <start_horizontal_speed_control_right+0x10a>
    3a3c:	81 c0       	rjmp	.+258    	; 0x3b40 <start_horizontal_speed_control_right+0x20c>
    3a3e:	17 fd       	sbrc	r17, 7
    3a40:	ad c0       	rjmp	.+346    	; 0x3b9c <start_horizontal_speed_control_right+0x268>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    3a42:	21 3c       	cpi	r18, 0xC1	; 193
    3a44:	8d e5       	ldi	r24, 0x5D	; 93
    3a46:	38 07       	cpc	r19, r24
    3a48:	80 e0       	ldi	r24, 0x00	; 0
    3a4a:	48 07       	cpc	r20, r24
    3a4c:	80 e0       	ldi	r24, 0x00	; 0
    3a4e:	58 07       	cpc	r21, r24
    3a50:	0c f4       	brge	.+2      	; 0x3a54 <start_horizontal_speed_control_right+0x120>
    3a52:	76 c0       	rjmp	.+236    	; 0x3b40 <start_horizontal_speed_control_right+0x20c>
    3a54:	80 ec       	ldi	r24, 0xC0	; 192
    3a56:	9d e5       	ldi	r25, 0x5D	; 93
    3a58:	a0 e0       	ldi	r26, 0x00	; 0
    3a5a:	b0 e0       	ldi	r27, 0x00	; 0
    3a5c:	80 93 11 03 	sts	0x0311, r24
    3a60:	90 93 12 03 	sts	0x0312, r25
    3a64:	a0 93 13 03 	sts	0x0313, r26
    3a68:	b0 93 14 03 	sts	0x0314, r27
    3a6c:	2c ed       	ldi	r18, 0xDC	; 220
    3a6e:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = (signed int)(pwm_right_speed_controller>>4);
    3a70:	31 83       	std	Z+1, r19	; 0x01
    3a72:	20 83       	st	Z, r18

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
    3a74:	80 91 f9 02 	lds	r24, 0x02F9
    3a78:	90 91 fa 02 	lds	r25, 0x02FA
    3a7c:	18 16       	cp	r1, r24
    3a7e:	19 06       	cpc	r1, r25
    3a80:	0c f0       	brlt	.+2      	; 0x3a84 <start_horizontal_speed_control_right+0x150>
    3a82:	87 c0       	rjmp	.+270    	; 0x3b92 <start_horizontal_speed_control_right+0x25e>
		*pwm_right += 1;
    3a84:	2f 5f       	subi	r18, 0xFF	; 255
    3a86:	3f 4f       	sbci	r19, 0xFF	; 255
    3a88:	31 83       	std	Z+1, r19	; 0x01
    3a8a:	20 83       	st	Z, r18
	} else {
		*pwm_right -= 1;
	}

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
    3a8c:	12 16       	cp	r1, r18
    3a8e:	13 06       	cpc	r1, r19
    3a90:	0c f0       	brlt	.+2      	; 0x3a94 <start_horizontal_speed_control_right+0x160>
    3a92:	6d c0       	rjmp	.+218    	; 0x3b6e <start_horizontal_speed_control_right+0x23a>
		*pwm_right += 30;
    3a94:	22 5e       	subi	r18, 0xE2	; 226
    3a96:	3f 4f       	sbci	r19, 0xFF	; 255
    3a98:	31 83       	std	Z+1, r19	; 0x01
    3a9a:	20 83       	st	Z, r18
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    3a9c:	82 e0       	ldi	r24, 0x02	; 2
    3a9e:	21 30       	cpi	r18, 0x01	; 1
    3aa0:	38 07       	cpc	r19, r24
    3aa2:	0c f4       	brge	.+2      	; 0x3aa6 <start_horizontal_speed_control_right+0x172>
    3aa4:	6c c0       	rjmp	.+216    	; 0x3b7e <start_horizontal_speed_control_right+0x24a>
    3aa6:	80 e0       	ldi	r24, 0x00	; 0
    3aa8:	92 e0       	ldi	r25, 0x02	; 2
    3aaa:	91 83       	std	Z+1, r25	; 0x01
    3aac:	80 83       	st	Z, r24
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    3aae:	df 91       	pop	r29
    3ab0:	cf 91       	pop	r28
    3ab2:	1f 91       	pop	r17
    3ab4:	0f 91       	pop	r16
    3ab6:	ff 90       	pop	r15
    3ab8:	ef 90       	pop	r14
    3aba:	df 90       	pop	r13
    3abc:	cf 90       	pop	r12
    3abe:	08 95       	ret
void start_horizontal_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    3ac0:	10 92 1c 03 	sts	0x031C, r1
    3ac4:	10 92 1b 03 	sts	0x031B, r1
		delta_right_speed_current = 0;
    3ac8:	10 92 2a 0b 	sts	0x0B2A, r1
    3acc:	10 92 29 0b 	sts	0x0B29, r1
		delta_right_speed_prev = 0;
    3ad0:	10 92 c3 08 	sts	0x08C3, r1
    3ad4:	10 92 c2 08 	sts	0x08C2, r1
		return;
    3ad8:	ea cf       	rjmp	.-44     	; 0x3aae <start_horizontal_speed_control_right+0x17a>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    3ada:	80 ec       	ldi	r24, 0xC0	; 192
    3adc:	c8 16       	cp	r12, r24
    3ade:	89 ef       	ldi	r24, 0xF9	; 249
    3ae0:	d8 06       	cpc	r13, r24
    3ae2:	d4 f4       	brge	.+52     	; 0x3b18 <start_horizontal_speed_control_right+0x1e4>
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
    3ae4:	80 ec       	ldi	r24, 0xC0	; 192
    3ae6:	99 ef       	ldi	r25, 0xF9	; 249
    3ae8:	90 93 1c 03 	sts	0x031C, r25
    3aec:	80 93 1b 03 	sts	0x031B, r24
    3af0:	60 e8       	ldi	r22, 0x80	; 128
    3af2:	c6 2e       	mov	r12, r22
    3af4:	63 ef       	ldi	r22, 0xF3	; 243
    3af6:	d6 2e       	mov	r13, r22
    3af8:	6f ef       	ldi	r22, 0xFF	; 255
    3afa:	e6 2e       	mov	r14, r22
    3afc:	6f ef       	ldi	r22, 0xFF	; 255
    3afe:	f6 2e       	mov	r15, r22
    3b00:	5a cf       	rjmp	.-332    	; 0x39b6 <start_horizontal_speed_control_right+0x82>
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    3b02:	a0 91 03 03 	lds	r26, 0x0303
    3b06:	b0 91 04 03 	lds	r27, 0x0304
    3b0a:	a8 0f       	add	r26, r24
    3b0c:	b9 1f       	adc	r27, r25
    3b0e:	b0 93 2a 0b 	sts	0x0B2A, r27
    3b12:	a0 93 29 0b 	sts	0x0B29, r26
    3b16:	33 cf       	rjmp	.-410    	; 0x397e <start_horizontal_speed_control_right+0x4a>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    3b18:	cc 0c       	add	r12, r12
    3b1a:	dd 1c       	adc	r13, r13
    3b1c:	ee 24       	eor	r14, r14
    3b1e:	d7 fc       	sbrc	r13, 7
    3b20:	e0 94       	com	r14
    3b22:	fe 2c       	mov	r15, r14
    3b24:	48 cf       	rjmp	.-368    	; 0x39b6 <start_horizontal_speed_control_right+0x82>
	pwm_right_speed_controller += (signed long int)(delta_right_speed_current*P_HORIZONTAL);
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
	pwm_right_speed_controller += (signed long int)(delta_right_speed_sum*I_HORIZONTAL);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    3b26:	17 fd       	sbrc	r17, 7
    3b28:	0b c0       	rjmp	.+22     	; 0x3b40 <start_horizontal_speed_control_right+0x20c>
		pwm_right_speed_controller = 0;
    3b2a:	10 92 11 03 	sts	0x0311, r1
    3b2e:	10 92 12 03 	sts	0x0312, r1
    3b32:	10 92 13 03 	sts	0x0313, r1
    3b36:	10 92 14 03 	sts	0x0314, r1
    3b3a:	20 e0       	ldi	r18, 0x00	; 0
    3b3c:	30 e0       	ldi	r19, 0x00	; 0
    3b3e:	a9 01       	movw	r20, r18
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    3b40:	20 34       	cpi	r18, 0x40	; 64
    3b42:	82 ea       	ldi	r24, 0xA2	; 162
    3b44:	38 07       	cpc	r19, r24
    3b46:	8f ef       	ldi	r24, 0xFF	; 255
    3b48:	48 07       	cpc	r20, r24
    3b4a:	8f ef       	ldi	r24, 0xFF	; 255
    3b4c:	58 07       	cpc	r21, r24
    3b4e:	8c f5       	brge	.+98     	; 0x3bb2 <start_horizontal_speed_control_right+0x27e>
    3b50:	80 e4       	ldi	r24, 0x40	; 64
    3b52:	92 ea       	ldi	r25, 0xA2	; 162
    3b54:	af ef       	ldi	r26, 0xFF	; 255
    3b56:	bf ef       	ldi	r27, 0xFF	; 255
    3b58:	80 93 11 03 	sts	0x0311, r24
    3b5c:	90 93 12 03 	sts	0x0312, r25
    3b60:	a0 93 13 03 	sts	0x0313, r26
    3b64:	b0 93 14 03 	sts	0x0314, r27
    3b68:	24 e2       	ldi	r18, 0x24	; 36
    3b6a:	3a ef       	ldi	r19, 0xFA	; 250
    3b6c:	81 cf       	rjmp	.-254    	; 0x3a70 <start_horizontal_speed_control_right+0x13c>
	}

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
		*pwm_right += 30;
	} else if(*pwm_right < 0) {
    3b6e:	21 15       	cp	r18, r1
    3b70:	31 05       	cpc	r19, r1
    3b72:	09 f4       	brne	.+2      	; 0x3b76 <start_horizontal_speed_control_right+0x242>
    3b74:	9c cf       	rjmp	.-200    	; 0x3aae <start_horizontal_speed_control_right+0x17a>
		*pwm_right -= 30;
    3b76:	2e 51       	subi	r18, 0x1E	; 30
    3b78:	30 40       	sbci	r19, 0x00	; 0
    3b7a:	31 83       	std	Z+1, r19	; 0x01
    3b7c:	20 83       	st	Z, r18
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    3b7e:	8e ef       	ldi	r24, 0xFE	; 254
    3b80:	20 30       	cpi	r18, 0x00	; 0
    3b82:	38 07       	cpc	r19, r24
    3b84:	0c f0       	brlt	.+2      	; 0x3b88 <start_horizontal_speed_control_right+0x254>
    3b86:	93 cf       	rjmp	.-218    	; 0x3aae <start_horizontal_speed_control_right+0x17a>
    3b88:	80 e0       	ldi	r24, 0x00	; 0
    3b8a:	9e ef       	ldi	r25, 0xFE	; 254
    3b8c:	91 83       	std	Z+1, r25	; 0x01
    3b8e:	80 83       	st	Z, r24
    3b90:	8e cf       	rjmp	.-228    	; 0x3aae <start_horizontal_speed_control_right+0x17a>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
		*pwm_right += 1;
	} else {
		*pwm_right -= 1;
    3b92:	21 50       	subi	r18, 0x01	; 1
    3b94:	30 40       	sbci	r19, 0x00	; 0
    3b96:	31 83       	std	Z+1, r19	; 0x01
    3b98:	20 83       	st	Z, r18
    3b9a:	78 cf       	rjmp	.-272    	; 0x3a8c <start_horizontal_speed_control_right+0x158>
	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    3b9c:	10 92 11 03 	sts	0x0311, r1
    3ba0:	10 92 12 03 	sts	0x0312, r1
    3ba4:	10 92 13 03 	sts	0x0313, r1
    3ba8:	10 92 14 03 	sts	0x0314, r1
    3bac:	20 e0       	ldi	r18, 0x00	; 0
    3bae:	30 e0       	ldi	r19, 0x00	; 0
    3bb0:	a9 01       	movw	r20, r18
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    3bb2:	14 e0       	ldi	r17, 0x04	; 4
    3bb4:	55 95       	asr	r21
    3bb6:	47 95       	ror	r20
    3bb8:	37 95       	ror	r19
    3bba:	27 95       	ror	r18
    3bbc:	1a 95       	dec	r17
    3bbe:	d1 f7       	brne	.-12     	; 0x3bb4 <start_horizontal_speed_control_right+0x280>
    3bc0:	57 cf       	rjmp	.-338    	; 0x3a70 <start_horizontal_speed_control_right+0x13c>

00003bc2 <start_horizontal_speed_control_left>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_left(signed int *pwm_left) {
    3bc2:	cf 92       	push	r12
    3bc4:	df 92       	push	r13
    3bc6:	ef 92       	push	r14
    3bc8:	ff 92       	push	r15
    3bca:	0f 93       	push	r16
    3bcc:	1f 93       	push	r17
    3bce:	cf 93       	push	r28
    3bd0:	df 93       	push	r29
    3bd2:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
    3bd4:	80 81       	ld	r24, Z
    3bd6:	91 81       	ldd	r25, Z+1	; 0x01
    3bd8:	00 97       	sbiw	r24, 0x00	; 0
    3bda:	09 f4       	brne	.+2      	; 0x3bde <start_horizontal_speed_control_left+0x1c>
    3bdc:	b8 c0       	rjmp	.+368    	; 0x3d4e <start_horizontal_speed_control_left+0x18c>
		delta_left_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    3bde:	c0 91 75 05 	lds	r28, 0x0575
    3be2:	d0 91 76 05 	lds	r29, 0x0576
    3be6:	d0 93 8b 09 	sts	0x098B, r29
    3bea:	c0 93 8a 09 	sts	0x098A, r28
	if(*pwm_left >= 0) {
    3bee:	80 81       	ld	r24, Z
    3bf0:	91 81       	ldd	r25, Z+1	; 0x01
    3bf2:	97 fd       	sbrc	r25, 7
    3bf4:	cd c0       	rjmp	.+410    	; 0x3d90 <start_horizontal_speed_control_left+0x1ce>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    3bf6:	20 91 01 03 	lds	r18, 0x0301
    3bfa:	30 91 02 03 	lds	r19, 0x0302
    3bfe:	dc 01       	movw	r26, r24
    3c00:	a2 1b       	sub	r26, r18
    3c02:	b3 0b       	sbc	r27, r19
    3c04:	b0 93 76 05 	sts	0x0576, r27
    3c08:	a0 93 75 05 	sts	0x0575, r26
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;
    3c0c:	c0 90 19 03 	lds	r12, 0x0319
    3c10:	d0 90 1a 03 	lds	r13, 0x031A
    3c14:	ca 0e       	add	r12, r26
    3c16:	db 1e       	adc	r13, r27
    3c18:	d0 92 1a 03 	sts	0x031A, r13
    3c1c:	c0 92 19 03 	sts	0x0319, r12

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
    3c20:	81 e4       	ldi	r24, 0x41	; 65
    3c22:	c8 16       	cp	r12, r24
    3c24:	86 e0       	ldi	r24, 0x06	; 6
    3c26:	d8 06       	cpc	r13, r24
    3c28:	0c f4       	brge	.+2      	; 0x3c2c <start_horizontal_speed_control_left+0x6a>
    3c2a:	9e c0       	rjmp	.+316    	; 0x3d68 <start_horizontal_speed_control_left+0x1a6>
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
    3c2c:	80 e4       	ldi	r24, 0x40	; 64
    3c2e:	96 e0       	ldi	r25, 0x06	; 6
    3c30:	90 93 1a 03 	sts	0x031A, r25
    3c34:	80 93 19 03 	sts	0x0319, r24
    3c38:	10 e8       	ldi	r17, 0x80	; 128
    3c3a:	c1 2e       	mov	r12, r17
    3c3c:	1c e0       	ldi	r17, 0x0C	; 12
    3c3e:	d1 2e       	mov	r13, r17
    3c40:	e1 2c       	mov	r14, r1
    3c42:	f1 2c       	mov	r15, r1
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed long int)((*pwm_left) << 3);
    3c44:	00 81       	ld	r16, Z
    3c46:	11 81       	ldd	r17, Z+1	; 0x01
	pwm_left_speed_controller += (signed long int)(delta_left_speed_current*P_HORIZONTAL);
    3c48:	cd 01       	movw	r24, r26
    3c4a:	88 0f       	add	r24, r24
    3c4c:	99 1f       	adc	r25, r25
    3c4e:	8a 0f       	add	r24, r26
    3c50:	9b 1f       	adc	r25, r27
    3c52:	9c 01       	movw	r18, r24
    3c54:	22 0f       	add	r18, r18
    3c56:	33 1f       	adc	r19, r19
    3c58:	22 0f       	add	r18, r18
    3c5a:	33 1f       	adc	r19, r19
    3c5c:	28 0f       	add	r18, r24
    3c5e:	39 1f       	adc	r19, r25
    3c60:	44 27       	eor	r20, r20
    3c62:	37 fd       	sbrc	r19, 7
    3c64:	40 95       	com	r20
    3c66:	54 2f       	mov	r21, r20
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed long int)((*pwm_left) << 3);
    3c68:	b8 01       	movw	r22, r16
    3c6a:	66 0f       	add	r22, r22
    3c6c:	77 1f       	adc	r23, r23
    3c6e:	66 0f       	add	r22, r22
    3c70:	77 1f       	adc	r23, r23
    3c72:	66 0f       	add	r22, r22
    3c74:	77 1f       	adc	r23, r23
    3c76:	88 27       	eor	r24, r24
    3c78:	77 fd       	sbrc	r23, 7
    3c7a:	80 95       	com	r24
    3c7c:	98 2f       	mov	r25, r24
	pwm_left_speed_controller += (signed long int)(delta_left_speed_current*P_HORIZONTAL);
    3c7e:	26 0f       	add	r18, r22
    3c80:	37 1f       	adc	r19, r23
    3c82:	48 1f       	adc	r20, r24
    3c84:	59 1f       	adc	r21, r25
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
    3c86:	ac 1b       	sub	r26, r28
    3c88:	bd 0b       	sbc	r27, r29
    3c8a:	cd 01       	movw	r24, r26
    3c8c:	88 0f       	add	r24, r24
    3c8e:	99 1f       	adc	r25, r25
    3c90:	8a 0f       	add	r24, r26
    3c92:	9b 1f       	adc	r25, r27
    3c94:	aa 27       	eor	r26, r26
    3c96:	97 fd       	sbrc	r25, 7
    3c98:	a0 95       	com	r26
    3c9a:	ba 2f       	mov	r27, r26
    3c9c:	28 0f       	add	r18, r24
    3c9e:	39 1f       	adc	r19, r25
    3ca0:	4a 1f       	adc	r20, r26
    3ca2:	5b 1f       	adc	r21, r27
	pwm_left_speed_controller += (signed long int)(delta_left_speed_sum*I_HORIZONTAL);
    3ca4:	2c 0d       	add	r18, r12
    3ca6:	3d 1d       	adc	r19, r13
    3ca8:	4e 1d       	adc	r20, r14
    3caa:	5f 1d       	adc	r21, r15
    3cac:	20 93 15 03 	sts	0x0315, r18
    3cb0:	30 93 16 03 	sts	0x0316, r19
    3cb4:	40 93 17 03 	sts	0x0317, r20
    3cb8:	50 93 18 03 	sts	0x0318, r21

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    3cbc:	57 fd       	sbrc	r21, 7
    3cbe:	7a c0       	rjmp	.+244    	; 0x3db4 <start_horizontal_speed_control_left+0x1f2>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    3cc0:	12 16       	cp	r1, r18
    3cc2:	13 06       	cpc	r1, r19
    3cc4:	14 06       	cpc	r1, r20
    3cc6:	15 06       	cpc	r1, r21
    3cc8:	0c f0       	brlt	.+2      	; 0x3ccc <start_horizontal_speed_control_left+0x10a>
    3cca:	81 c0       	rjmp	.+258    	; 0x3dce <start_horizontal_speed_control_left+0x20c>
    3ccc:	17 fd       	sbrc	r17, 7
    3cce:	ad c0       	rjmp	.+346    	; 0x3e2a <start_horizontal_speed_control_left+0x268>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    3cd0:	21 3c       	cpi	r18, 0xC1	; 193
    3cd2:	8d e5       	ldi	r24, 0x5D	; 93
    3cd4:	38 07       	cpc	r19, r24
    3cd6:	80 e0       	ldi	r24, 0x00	; 0
    3cd8:	48 07       	cpc	r20, r24
    3cda:	80 e0       	ldi	r24, 0x00	; 0
    3cdc:	58 07       	cpc	r21, r24
    3cde:	0c f4       	brge	.+2      	; 0x3ce2 <start_horizontal_speed_control_left+0x120>
    3ce0:	76 c0       	rjmp	.+236    	; 0x3dce <start_horizontal_speed_control_left+0x20c>
    3ce2:	80 ec       	ldi	r24, 0xC0	; 192
    3ce4:	9d e5       	ldi	r25, 0x5D	; 93
    3ce6:	a0 e0       	ldi	r26, 0x00	; 0
    3ce8:	b0 e0       	ldi	r27, 0x00	; 0
    3cea:	80 93 15 03 	sts	0x0315, r24
    3cee:	90 93 16 03 	sts	0x0316, r25
    3cf2:	a0 93 17 03 	sts	0x0317, r26
    3cf6:	b0 93 18 03 	sts	0x0318, r27
    3cfa:	2c ed       	ldi	r18, 0xDC	; 220
    3cfc:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = (signed int)(pwm_left_speed_controller>>4);
    3cfe:	31 83       	std	Z+1, r19	; 0x01
    3d00:	20 83       	st	Z, r18

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
    3d02:	80 91 fb 02 	lds	r24, 0x02FB
    3d06:	90 91 fc 02 	lds	r25, 0x02FC
    3d0a:	18 16       	cp	r1, r24
    3d0c:	19 06       	cpc	r1, r25
    3d0e:	0c f0       	brlt	.+2      	; 0x3d12 <start_horizontal_speed_control_left+0x150>
    3d10:	87 c0       	rjmp	.+270    	; 0x3e20 <start_horizontal_speed_control_left+0x25e>
		*pwm_left += 1;
    3d12:	2f 5f       	subi	r18, 0xFF	; 255
    3d14:	3f 4f       	sbci	r19, 0xFF	; 255
    3d16:	31 83       	std	Z+1, r19	; 0x01
    3d18:	20 83       	st	Z, r18
	} else {
		*pwm_left -= 1;
	}

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
    3d1a:	12 16       	cp	r1, r18
    3d1c:	13 06       	cpc	r1, r19
    3d1e:	0c f0       	brlt	.+2      	; 0x3d22 <start_horizontal_speed_control_left+0x160>
    3d20:	6d c0       	rjmp	.+218    	; 0x3dfc <start_horizontal_speed_control_left+0x23a>
		*pwm_left += 30;
    3d22:	22 5e       	subi	r18, 0xE2	; 226
    3d24:	3f 4f       	sbci	r19, 0xFF	; 255
    3d26:	31 83       	std	Z+1, r19	; 0x01
    3d28:	20 83       	st	Z, r18
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    3d2a:	82 e0       	ldi	r24, 0x02	; 2
    3d2c:	21 30       	cpi	r18, 0x01	; 1
    3d2e:	38 07       	cpc	r19, r24
    3d30:	0c f4       	brge	.+2      	; 0x3d34 <start_horizontal_speed_control_left+0x172>
    3d32:	6c c0       	rjmp	.+216    	; 0x3e0c <start_horizontal_speed_control_left+0x24a>
    3d34:	80 e0       	ldi	r24, 0x00	; 0
    3d36:	92 e0       	ldi	r25, 0x02	; 2
    3d38:	91 83       	std	Z+1, r25	; 0x01
    3d3a:	80 83       	st	Z, r24
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);

}
    3d3c:	df 91       	pop	r29
    3d3e:	cf 91       	pop	r28
    3d40:	1f 91       	pop	r17
    3d42:	0f 91       	pop	r16
    3d44:	ff 90       	pop	r15
    3d46:	ef 90       	pop	r14
    3d48:	df 90       	pop	r13
    3d4a:	cf 90       	pop	r12
    3d4c:	08 95       	ret
void start_horizontal_speed_control_left(signed int *pwm_left) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    3d4e:	10 92 1a 03 	sts	0x031A, r1
    3d52:	10 92 19 03 	sts	0x0319, r1
		delta_left_speed_current = 0;
    3d56:	10 92 76 05 	sts	0x0576, r1
    3d5a:	10 92 75 05 	sts	0x0575, r1
		delta_left_speed_prev = 0;
    3d5e:	10 92 8b 09 	sts	0x098B, r1
    3d62:	10 92 8a 09 	sts	0x098A, r1
		return;
    3d66:	ea cf       	rjmp	.-44     	; 0x3d3c <start_horizontal_speed_control_left+0x17a>
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    3d68:	80 ec       	ldi	r24, 0xC0	; 192
    3d6a:	c8 16       	cp	r12, r24
    3d6c:	89 ef       	ldi	r24, 0xF9	; 249
    3d6e:	d8 06       	cpc	r13, r24
    3d70:	d4 f4       	brge	.+52     	; 0x3da6 <start_horizontal_speed_control_left+0x1e4>
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
    3d72:	80 ec       	ldi	r24, 0xC0	; 192
    3d74:	99 ef       	ldi	r25, 0xF9	; 249
    3d76:	90 93 1a 03 	sts	0x031A, r25
    3d7a:	80 93 19 03 	sts	0x0319, r24
    3d7e:	60 e8       	ldi	r22, 0x80	; 128
    3d80:	c6 2e       	mov	r12, r22
    3d82:	63 ef       	ldi	r22, 0xF3	; 243
    3d84:	d6 2e       	mov	r13, r22
    3d86:	6f ef       	ldi	r22, 0xFF	; 255
    3d88:	e6 2e       	mov	r14, r22
    3d8a:	6f ef       	ldi	r22, 0xFF	; 255
    3d8c:	f6 2e       	mov	r15, r22
    3d8e:	5a cf       	rjmp	.-332    	; 0x3c44 <start_horizontal_speed_control_left+0x82>
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    3d90:	a0 91 01 03 	lds	r26, 0x0301
    3d94:	b0 91 02 03 	lds	r27, 0x0302
    3d98:	a8 0f       	add	r26, r24
    3d9a:	b9 1f       	adc	r27, r25
    3d9c:	b0 93 76 05 	sts	0x0576, r27
    3da0:	a0 93 75 05 	sts	0x0575, r26
    3da4:	33 cf       	rjmp	.-410    	; 0x3c0c <start_horizontal_speed_control_left+0x4a>
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    3da6:	cc 0c       	add	r12, r12
    3da8:	dd 1c       	adc	r13, r13
    3daa:	ee 24       	eor	r14, r14
    3dac:	d7 fc       	sbrc	r13, 7
    3dae:	e0 94       	com	r14
    3db0:	fe 2c       	mov	r15, r14
    3db2:	48 cf       	rjmp	.-368    	; 0x3c44 <start_horizontal_speed_control_left+0x82>
	pwm_left_speed_controller += (signed long int)(delta_left_speed_current*P_HORIZONTAL);
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
	pwm_left_speed_controller += (signed long int)(delta_left_speed_sum*I_HORIZONTAL);

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    3db4:	17 fd       	sbrc	r17, 7
    3db6:	0b c0       	rjmp	.+22     	; 0x3dce <start_horizontal_speed_control_left+0x20c>
		pwm_left_speed_controller = 0;
    3db8:	10 92 15 03 	sts	0x0315, r1
    3dbc:	10 92 16 03 	sts	0x0316, r1
    3dc0:	10 92 17 03 	sts	0x0317, r1
    3dc4:	10 92 18 03 	sts	0x0318, r1
    3dc8:	20 e0       	ldi	r18, 0x00	; 0
    3dca:	30 e0       	ldi	r19, 0x00	; 0
    3dcc:	a9 01       	movw	r20, r18
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    3dce:	20 34       	cpi	r18, 0x40	; 64
    3dd0:	82 ea       	ldi	r24, 0xA2	; 162
    3dd2:	38 07       	cpc	r19, r24
    3dd4:	8f ef       	ldi	r24, 0xFF	; 255
    3dd6:	48 07       	cpc	r20, r24
    3dd8:	8f ef       	ldi	r24, 0xFF	; 255
    3dda:	58 07       	cpc	r21, r24
    3ddc:	8c f5       	brge	.+98     	; 0x3e40 <start_horizontal_speed_control_left+0x27e>
    3dde:	80 e4       	ldi	r24, 0x40	; 64
    3de0:	92 ea       	ldi	r25, 0xA2	; 162
    3de2:	af ef       	ldi	r26, 0xFF	; 255
    3de4:	bf ef       	ldi	r27, 0xFF	; 255
    3de6:	80 93 15 03 	sts	0x0315, r24
    3dea:	90 93 16 03 	sts	0x0316, r25
    3dee:	a0 93 17 03 	sts	0x0317, r26
    3df2:	b0 93 18 03 	sts	0x0318, r27
    3df6:	24 e2       	ldi	r18, 0x24	; 36
    3df8:	3a ef       	ldi	r19, 0xFA	; 250
    3dfa:	81 cf       	rjmp	.-254    	; 0x3cfe <start_horizontal_speed_control_left+0x13c>
	}

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
		*pwm_left += 30;
	} else if(*pwm_left < 0) {
    3dfc:	21 15       	cp	r18, r1
    3dfe:	31 05       	cpc	r19, r1
    3e00:	09 f4       	brne	.+2      	; 0x3e04 <start_horizontal_speed_control_left+0x242>
    3e02:	9c cf       	rjmp	.-200    	; 0x3d3c <start_horizontal_speed_control_left+0x17a>
		*pwm_left -= 30;
    3e04:	2e 51       	subi	r18, 0x1E	; 30
    3e06:	30 40       	sbci	r19, 0x00	; 0
    3e08:	31 83       	std	Z+1, r19	; 0x01
    3e0a:	20 83       	st	Z, r18
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    3e0c:	8e ef       	ldi	r24, 0xFE	; 254
    3e0e:	20 30       	cpi	r18, 0x00	; 0
    3e10:	38 07       	cpc	r19, r24
    3e12:	0c f0       	brlt	.+2      	; 0x3e16 <start_horizontal_speed_control_left+0x254>
    3e14:	93 cf       	rjmp	.-218    	; 0x3d3c <start_horizontal_speed_control_left+0x17a>
    3e16:	80 e0       	ldi	r24, 0x00	; 0
    3e18:	9e ef       	ldi	r25, 0xFE	; 254
    3e1a:	91 83       	std	Z+1, r25	; 0x01
    3e1c:	80 83       	st	Z, r24
    3e1e:	8e cf       	rjmp	.-228    	; 0x3d3c <start_horizontal_speed_control_left+0x17a>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
		*pwm_left += 1;
	} else {
		*pwm_left -= 1;
    3e20:	21 50       	subi	r18, 0x01	; 1
    3e22:	30 40       	sbci	r19, 0x00	; 0
    3e24:	31 83       	std	Z+1, r19	; 0x01
    3e26:	20 83       	st	Z, r18
    3e28:	78 cf       	rjmp	.-272    	; 0x3d1a <start_horizontal_speed_control_left+0x158>
	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    3e2a:	10 92 15 03 	sts	0x0315, r1
    3e2e:	10 92 16 03 	sts	0x0316, r1
    3e32:	10 92 17 03 	sts	0x0317, r1
    3e36:	10 92 18 03 	sts	0x0318, r1
    3e3a:	20 e0       	ldi	r18, 0x00	; 0
    3e3c:	30 e0       	ldi	r19, 0x00	; 0
    3e3e:	a9 01       	movw	r20, r18
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    3e40:	04 e0       	ldi	r16, 0x04	; 4
    3e42:	55 95       	asr	r21
    3e44:	47 95       	ror	r20
    3e46:	37 95       	ror	r19
    3e48:	27 95       	ror	r18
    3e4a:	0a 95       	dec	r16
    3e4c:	d1 f7       	brne	.-12     	; 0x3e42 <start_horizontal_speed_control_left+0x280>
    3e4e:	57 cf       	rjmp	.-338    	; 0x3cfe <start_horizontal_speed_control_left+0x13c>

00003e50 <initPortsIO>:
#include "ports_io.h"


void initPortsIO(void) {

	MCUCR |= (1 << PUD);	// pull-up disable for all ports
    3e50:	85 b7       	in	r24, 0x35	; 53
    3e52:	80 61       	ori	r24, 0x10	; 16
    3e54:	85 bf       	out	0x35, r24	; 53

	DDRA = 0xFF;			// proximity pulses as output
    3e56:	8f ef       	ldi	r24, 0xFF	; 255
    3e58:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;			// proximity pulses turned off
    3e5a:	12 b8       	out	0x02, r1	; 2
	
	DDRB = 0xF7;			// pwm for led r/g/b as output; CE, MOSI, SCK, SS as output (master) 
    3e5c:	97 ef       	ldi	r25, 0xF7	; 247
    3e5e:	94 b9       	out	0x04, r25	; 4
	PORTB = 0xE0;			// r,g,b leds turned off on high state
    3e60:	90 ee       	ldi	r25, 0xE0	; 224
    3e62:	95 b9       	out	0x05, r25	; 5

	DDRC = 0xF0;			// selector as input; IR leds as output; sens-enable, sleep as output
    3e64:	90 ef       	ldi	r25, 0xF0	; 240
    3e66:	97 b9       	out	0x07, r25	; 7
	PORTC = 0xB0;			// sleep = 1 (no sleep), sense_enable=0, IR leds = 1
    3e68:	90 eb       	ldi	r25, 0xB0	; 176
    3e6a:	98 b9       	out	0x08, r25	; 8

	DDRD = 0xFC;			// all pins to output; when usart and i2c peripherals are activated they change the pins direction accordingly
    3e6c:	9c ef       	ldi	r25, 0xFC	; 252
    3e6e:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0x03;			// default for unused pins is 0
    3e70:	93 e0       	ldi	r25, 0x03	; 3
    3e72:	9b b9       	out	0x0b, r25	; 11

	DDRE = 0xFF;			// all pins to output (pwm and dir for motor right as output; when usart is activated it changes the pins direction accordingly)
    3e74:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    3e76:	1e b8       	out	0x0e, r1	; 14

	DDRF = 0x00;			// adc channel pins as input		
    3e78:	10 ba       	out	0x10, r1	; 16

	DDRG = 0xFF;			// unused pins as output
    3e7a:	83 bb       	out	0x13, r24	; 19
	if(hardwareRevision == HW_REV_3_0) {
    3e7c:	80 91 5f 04 	lds	r24, 0x045F
    3e80:	88 23       	and	r24, r24
    3e82:	e1 f0       	breq	.+56     	; 0x3ebc <initPortsIO+0x6c>
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    3e84:	81 30       	cpi	r24, 0x01	; 1
    3e86:	d1 f0       	breq	.+52     	; 0x3ebc <initPortsIO+0x6c>
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    3e88:	82 30       	cpi	r24, 0x02	; 2
    3e8a:	51 f1       	breq	.+84     	; 0x3ee0 <initPortsIO+0x90>
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
	}	

	DDRH = 0xFF;			// all pins to output; when usart is activated it changes the pins direction accordingly
    3e8c:	9f ef       	ldi	r25, 0xFF	; 255
    3e8e:	90 93 01 01 	sts	0x0101, r25
	PORTH = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    3e92:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
    3e96:	9f e0       	ldi	r25, 0x0F	; 15
    3e98:	90 93 04 01 	sts	0x0104, r25
	if(hardwareRevision == HW_REV_3_0) {
    3e9c:	88 23       	and	r24, r24
    3e9e:	a9 f4       	brne	.+42     	; 0x3eca <initPortsIO+0x7a>
		PORTJ &= 0x00;		// cliff pulse turned off
    3ea0:	90 91 05 01 	lds	r25, 0x0105
    3ea4:	10 92 05 01 	sts	0x0105, r1
	if(hardwareRevision == HW_REV_3_1) {
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.1)"
	}	

	DDRK = 0x00;			// adc channel pins as input
    3ea8:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;			// all pins to output
    3eac:	9f ef       	ldi	r25, 0xFF	; 255
    3eae:	90 93 0a 01 	sts	0x010A, r25
	if(hardwareRevision == HW_REV_3_0) {
    3eb2:	88 23       	and	r24, r24
    3eb4:	29 f4       	brne	.+10     	; 0x3ec0 <initPortsIO+0x70>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
    3eb6:	10 92 0b 01 	sts	0x010B, r1
    3eba:	08 95       	ret
	DDRG = 0xFF;			// unused pins as output
	if(hardwareRevision == HW_REV_3_0) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
    3ebc:	14 ba       	out	0x14, r1	; 20
    3ebe:	e6 cf       	rjmp	.-52     	; 0x3e8c <initPortsIO+0x3c>

	DDRL = 0xFF;			// all pins to output
	if(hardwareRevision == HW_REV_3_0) {
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
    3ec0:	81 30       	cpi	r24, 0x01	; 1
    3ec2:	c9 f3       	breq	.-14     	; 0x3eb6 <initPortsIO+0x66>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    3ec4:	82 30       	cpi	r24, 0x02	; 2
    3ec6:	41 f0       	breq	.+16     	; 0x3ed8 <initPortsIO+0x88>
    3ec8:	08 95       	ret
	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
	if(hardwareRevision == HW_REV_3_0) {
		PORTJ &= 0x00;		// cliff pulse turned off
		//#warning "Normal logic for ground sensors (hw rev 3.0)"
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    3eca:	81 30       	cpi	r24, 0x01	; 1
    3ecc:	11 f0       	breq	.+4      	; 0x3ed2 <initPortsIO+0x82>
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.0.1)"
	}
	if(hardwareRevision == HW_REV_3_1) {
    3ece:	82 30       	cpi	r24, 0x02	; 2
    3ed0:	59 f7       	brne	.-42     	; 0x3ea8 <initPortsIO+0x58>
		PORTJ = 0x0F;
    3ed2:	90 93 05 01 	sts	0x0105, r25
    3ed6:	e8 cf       	rjmp	.-48     	; 0x3ea8 <initPortsIO+0x58>
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTL = 0xF7;		// pwm (unused) to 0, leds turned off on high state
    3ed8:	87 ef       	ldi	r24, 0xF7	; 247
    3eda:	80 93 0b 01 	sts	0x010B, r24
    3ede:	08 95       	ret
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
    3ee0:	98 e0       	ldi	r25, 0x08	; 8
    3ee2:	94 bb       	out	0x14, r25	; 20
    3ee4:	d3 cf       	rjmp	.-90     	; 0x3e8c <initPortsIO+0x3c>

00003ee6 <i2c_close>:

/* I2C clock in Hz */
#define SCL_CLOCK  440000L

void i2c_close() {
	TWBR = 0x00;
    3ee6:	10 92 b8 00 	sts	0x00B8, r1
	TWCR = 0x00;
    3eea:	10 92 bc 00 	sts	0x00BC, r1
}
    3eee:	08 95       	ret

00003ef0 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
    sbi(PORTD, 0);
    3ef0:	58 9a       	sbi	0x0b, 0	; 11
    sbi(PORTD, 1);
    3ef2:	59 9a       	sbi	0x0b, 1	; 11

  TWSR = 0;                         /* no prescaler */
    3ef4:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    3ef8:	81 e0       	ldi	r24, 0x01	; 1
    3efa:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
    3efe:	08 95       	ret

00003f00 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    3f00:	94 ea       	ldi	r25, 0xA4	; 164
    3f02:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    3f06:	90 91 bc 00 	lds	r25, 0x00BC
    3f0a:	97 ff       	sbrs	r25, 7
    3f0c:	fc cf       	rjmp	.-8      	; 0x3f06 <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    3f0e:	90 91 b9 00 	lds	r25, 0x00B9
    3f12:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    3f14:	98 30       	cpi	r25, 0x08	; 8
    3f16:	21 f0       	breq	.+8      	; 0x3f20 <i2c_start+0x20>
    3f18:	90 31       	cpi	r25, 0x10	; 16
    3f1a:	11 f0       	breq	.+4      	; 0x3f20 <i2c_start+0x20>
		//usartTransmit(twst);
		return 1;
    3f1c:	81 e0       	ldi	r24, 0x01	; 1
    3f1e:	08 95       	ret
	}

	// send device address
	TWDR = address;
    3f20:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    3f24:	84 e8       	ldi	r24, 0x84	; 132
    3f26:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    3f2a:	80 91 bc 00 	lds	r24, 0x00BC
    3f2e:	87 ff       	sbrs	r24, 7
    3f30:	fc cf       	rjmp	.-8      	; 0x3f2a <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    3f32:	90 91 b9 00 	lds	r25, 0x00B9
    3f36:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    3f38:	98 31       	cpi	r25, 0x18	; 24
    3f3a:	21 f0       	breq	.+8      	; 0x3f44 <i2c_start+0x44>

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    3f3c:	81 e0       	ldi	r24, 0x01	; 1
    3f3e:	90 34       	cpi	r25, 0x40	; 64
    3f40:	19 f0       	breq	.+6      	; 0x3f48 <i2c_start+0x48>
		return 1;
	}

	return 0;

}/* i2c_start */
    3f42:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    3f44:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    3f46:	08 95       	ret

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    3f48:	80 e0       	ldi	r24, 0x00	; 0
    3f4a:	08 95       	ret

00003f4c <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    3f4c:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    3f4e:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    3f50:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    3f52:	20 93 bc 00 	sts	0x00BC, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    3f56:	90 91 bc 00 	lds	r25, 0x00BC
    3f5a:	97 ff       	sbrs	r25, 7
    3f5c:	fc cf       	rjmp	.-8      	; 0x3f56 <i2c_start_wait+0xa>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    3f5e:	90 91 b9 00 	lds	r25, 0x00B9
    3f62:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    3f64:	98 30       	cpi	r25, 0x08	; 8
    3f66:	11 f0       	breq	.+4      	; 0x3f6c <i2c_start_wait+0x20>
    3f68:	90 31       	cpi	r25, 0x10	; 16
    3f6a:	99 f7       	brne	.-26     	; 0x3f52 <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    3f6c:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    3f70:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    3f74:	90 91 bc 00 	lds	r25, 0x00BC
    3f78:	97 ff       	sbrs	r25, 7
    3f7a:	fc cf       	rjmp	.-8      	; 0x3f74 <i2c_start_wait+0x28>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    3f7c:	90 91 b9 00 	lds	r25, 0x00B9
    3f80:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    3f82:	90 32       	cpi	r25, 0x20	; 32
    3f84:	19 f0       	breq	.+6      	; 0x3f8c <i2c_start_wait+0x40>
    3f86:	98 35       	cpi	r25, 0x58	; 88
    3f88:	09 f0       	breq	.+2      	; 0x3f8c <i2c_start_wait+0x40>
    3f8a:	08 95       	ret
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    3f8c:	40 93 bc 00 	sts	0x00BC, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    3f90:	90 91 bc 00 	lds	r25, 0x00BC
    3f94:	94 fd       	sbrc	r25, 4
    3f96:	fc cf       	rjmp	.-8      	; 0x3f90 <i2c_start_wait+0x44>
    3f98:	dc cf       	rjmp	.-72     	; 0x3f52 <i2c_start_wait+0x6>

00003f9a <i2c_rep_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    3f9a:	94 ea       	ldi	r25, 0xA4	; 164
    3f9c:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    3fa0:	90 91 bc 00 	lds	r25, 0x00BC
    3fa4:	97 ff       	sbrs	r25, 7
    3fa6:	fc cf       	rjmp	.-8      	; 0x3fa0 <i2c_rep_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    3fa8:	90 91 b9 00 	lds	r25, 0x00B9
    3fac:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    3fae:	98 30       	cpi	r25, 0x08	; 8
    3fb0:	21 f0       	breq	.+8      	; 0x3fba <i2c_rep_start+0x20>
    3fb2:	90 31       	cpi	r25, 0x10	; 16
    3fb4:	11 f0       	breq	.+4      	; 0x3fba <i2c_rep_start+0x20>
		//usartTransmit(twst);
		return 1;
    3fb6:	81 e0       	ldi	r24, 0x01	; 1
    3fb8:	08 95       	ret
	}

	// send device address
	TWDR = address;
    3fba:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    3fbe:	84 e8       	ldi	r24, 0x84	; 132
    3fc0:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    3fc4:	80 91 bc 00 	lds	r24, 0x00BC
    3fc8:	87 ff       	sbrs	r24, 7
    3fca:	fc cf       	rjmp	.-8      	; 0x3fc4 <i2c_rep_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    3fcc:	90 91 b9 00 	lds	r25, 0x00B9
    3fd0:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    3fd2:	98 31       	cpi	r25, 0x18	; 24
    3fd4:	21 f0       	breq	.+8      	; 0x3fde <i2c_rep_start+0x44>
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    3fd6:	81 e0       	ldi	r24, 0x01	; 1
    3fd8:	90 34       	cpi	r25, 0x40	; 64
    3fda:	19 f0       	breq	.+6      	; 0x3fe2 <i2c_rep_start+0x48>
{
    return i2c_start( address );

}/* i2c_rep_start */
    3fdc:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    3fde:	80 e0       	ldi	r24, 0x00	; 0
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    3fe0:	08 95       	ret
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    3fe2:	80 e0       	ldi	r24, 0x00	; 0
    3fe4:	08 95       	ret

00003fe6 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    3fe6:	84 e9       	ldi	r24, 0x94	; 148
    3fe8:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    3fec:	80 91 bc 00 	lds	r24, 0x00BC
    3ff0:	84 fd       	sbrc	r24, 4
    3ff2:	fc cf       	rjmp	.-8      	; 0x3fec <i2c_stop+0x6>

}/* i2c_stop */
    3ff4:	08 95       	ret

00003ff6 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    3ff6:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    3ffa:	84 e8       	ldi	r24, 0x84	; 132
    3ffc:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    4000:	80 91 bc 00 	lds	r24, 0x00BC
    4004:	87 ff       	sbrs	r24, 7
    4006:	fc cf       	rjmp	.-8      	; 0x4000 <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    4008:	90 91 b9 00 	lds	r25, 0x00B9
    400c:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    400e:	81 e0       	ldi	r24, 0x01	; 1
    4010:	98 32       	cpi	r25, 0x28	; 40
    4012:	09 f0       	breq	.+2      	; 0x4016 <i2c_write+0x20>
	return 0;

}/* i2c_write */
    4014:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
    4016:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
    4018:	08 95       	ret

0000401a <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    401a:	84 ec       	ldi	r24, 0xC4	; 196
    401c:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    4020:	80 91 bc 00 	lds	r24, 0x00BC
    4024:	87 ff       	sbrs	r24, 7
    4026:	fc cf       	rjmp	.-8      	; 0x4020 <i2c_readAck+0x6>

    return TWDR;
    4028:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    402c:	08 95       	ret

0000402e <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    402e:	84 e8       	ldi	r24, 0x84	; 132
    4030:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    4034:	80 91 bc 00 	lds	r24, 0x00BC
    4038:	87 ff       	sbrs	r24, 7
    403a:	fc cf       	rjmp	.-8      	; 0x4034 <i2c_readNak+0x6>
	
    return TWDR;
    403c:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    4040:	08 95       	ret

00004042 <initUsart0>:
	// @38400 baud: 8000000/16/38400-1 = 12 => 8000000/16/13 = 38461 => 100-(38400/38461*100)=0.15% of error
	// Double speed mode:
	// @57600 baud: 8000000/8/57600-1 = 16 => 8000000/8/17 = 58823 => 100-(57600/58823*100)=2.08% of error	


	UBRR0H = 0;												// set baudrate
    4042:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 16;
    4046:	80 e1       	ldi	r24, 0x10	; 16
    4048:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0A  |= (1 << U2X0);									// enable double speed
    404c:	e0 ec       	ldi	r30, 0xC0	; 192
    404e:	f0 e0       	ldi	r31, 0x00	; 0
    4050:	80 81       	ld	r24, Z
    4052:	82 60       	ori	r24, 0x02	; 2
    4054:	80 83       	st	Z, r24
	//UCSR0A &= ~(1 << U2X0);
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);	// enable uart0 transmitter and receiver; enable rx interrupt for use with aseba
    4056:	e1 ec       	ldi	r30, 0xC1	; 193
    4058:	f0 e0       	ldi	r31, 0x00	; 0
    405a:	80 81       	ld	r24, Z
    405c:	88 69       	ori	r24, 0x98	; 152
    405e:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);					// set frame format: 8-bit data, no parity, 1 stop bit
    4060:	e2 ec       	ldi	r30, 0xC2	; 194
    4062:	f0 e0       	ldi	r31, 0x00	; 0
    4064:	80 81       	ld	r24, Z
    4066:	86 60       	ori	r24, 0x06	; 6
    4068:	80 83       	st	Z, r24



}
    406a:	08 95       	ret

0000406c <initUsart1>:

void initUsart1() {

	UBRR1H = 0;												// set baudrate
    406c:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = 16;
    4070:	80 e1       	ldi	r24, 0x10	; 16
    4072:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1A  |= (1 << U2X1);									// enable double speed
    4076:	e8 ec       	ldi	r30, 0xC8	; 200
    4078:	f0 e0       	ldi	r31, 0x00	; 0
    407a:	80 81       	ld	r24, Z
    407c:	82 60       	ori	r24, 0x02	; 2
    407e:	80 83       	st	Z, r24
	//UCSR0A &= ~(1 << U2X1);
	UCSR1B |= (1 << TXEN1) | (1 << RXEN1);					// enable uart0 transmitter and receiver
    4080:	e9 ec       	ldi	r30, 0xC9	; 201
    4082:	f0 e0       	ldi	r31, 0x00	; 0
    4084:	80 81       	ld	r24, Z
    4086:	88 61       	ori	r24, 0x18	; 24
    4088:	80 83       	st	Z, r24
	UCSR1C |= (1<<UCSZ11) | (1<<UCSZ10);					// set frame format: 8-bit data, no parity, 1 stop bit
    408a:	ea ec       	ldi	r30, 0xCA	; 202
    408c:	f0 e0       	ldi	r31, 0x00	; 0
    408e:	80 81       	ld	r24, Z
    4090:	86 60       	ori	r24, 0x06	; 6
    4092:	80 83       	st	Z, r24

}
    4094:	08 95       	ret

00004096 <closeUsart>:

void closeUsart() {

	UCSR0A = 0x00;	// clear all usart registers
    4096:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0x00;
    409a:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 0x00;
    409e:	10 92 c2 00 	sts	0x00C2, r1

}
    40a2:	08 95       	ret

000040a4 <usart0Transmit>:

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    40a4:	90 91 c0 00 	lds	r25, 0x00C0
    40a8:	95 ff       	sbrs	r25, 5
    40aa:	fc cf       	rjmp	.-8      	; 0x40a4 <usart0Transmit>
	UDR0 = data;						// put data into buffer, sends the data
    40ac:	80 93 c6 00 	sts	0x00C6, r24
	if(isBlocking) {
    40b0:	66 23       	and	r22, r22
    40b2:	21 f0       	breq	.+8      	; 0x40bc <usart0Transmit+0x18>
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    40b4:	80 91 c0 00 	lds	r24, 0x00C0
    40b8:	86 ff       	sbrs	r24, 6
    40ba:	fc cf       	rjmp	.-8      	; 0x40b4 <usart0Transmit+0x10>
    40bc:	08 95       	ret

000040be <usart1Transmit>:
	}
}

void usart1Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR1A & (1<<UDRE1)));		// wait for empty transmit buffer
    40be:	90 91 c8 00 	lds	r25, 0x00C8
    40c2:	95 ff       	sbrs	r25, 5
    40c4:	fc cf       	rjmp	.-8      	; 0x40be <usart1Transmit>
	UDR1 = data;						// put data into buffer, sends the data
    40c6:	80 93 ce 00 	sts	0x00CE, r24
	if(isBlocking) {
    40ca:	66 23       	and	r22, r22
    40cc:	21 f0       	breq	.+8      	; 0x40d6 <usart1Transmit+0x18>
		while (!(UCSR1A & (1<<TXC1)));	// wait transmission complete
    40ce:	80 91 c8 00 	lds	r24, 0x00C8
    40d2:	86 ff       	sbrs	r24, 6
    40d4:	fc cf       	rjmp	.-8      	; 0x40ce <usart1Transmit+0x10>
    40d6:	08 95       	ret

000040d8 <usart0InputBufferEmpty>:

}

char usart0InputBufferEmpty() {

	if(UCSR0A & (1<<RXC0)) {	// something received
    40d8:	80 91 c0 00 	lds	r24, 0x00C0
		return 0;
    40dc:	80 95       	com	r24
	} else {
		return 1;
	}

}
    40de:	88 1f       	adc	r24, r24
    40e0:	88 27       	eor	r24, r24
    40e2:	88 1f       	adc	r24, r24
    40e4:	08 95       	ret

000040e6 <usart0Receive>:

unsigned char usart0Receive() {

	unsigned int i=0;

	while(usart0InputBufferEmpty()) {
    40e6:	87 e9       	ldi	r24, 0x97	; 151
    40e8:	90 e0       	ldi	r25, 0x00	; 0

}

char usart0InputBufferEmpty() {

	if(UCSR0A & (1<<RXC0)) {	// something received
    40ea:	20 91 c0 00 	lds	r18, 0x00C0
    40ee:	27 fd       	sbrc	r18, 7
    40f0:	07 c0       	rjmp	.+14     	; 0x4100 <usart0Receive+0x1a>
			commError = 1;
			return 0;				// timeout
		}
	}								// wait for data to be received

	return UDR0;					// get and return received data from buffer
    40f2:	01 97       	sbiw	r24, 0x01	; 1

	unsigned int i=0;

	while(usart0InputBufferEmpty()) {
		i++;
		if(i>150) {
    40f4:	d1 f7       	brne	.-12     	; 0x40ea <usart0Receive+0x4>
			/*
			if(UCSR0A & (1<<3)) {	// overflow flag
			}
			*/
			commError = 1;
    40f6:	81 e0       	ldi	r24, 0x01	; 1
    40f8:	80 93 2e 03 	sts	0x032E, r24
			return 0;				// timeout
    40fc:	80 e0       	ldi	r24, 0x00	; 0
    40fe:	08 95       	ret
		}
	}								// wait for data to be received

	return UDR0;					// get and return received data from buffer
    4100:	80 91 c6 00 	lds	r24, 0x00C6

}
    4104:	08 95       	ret

00004106 <__vector_25>:
		}
	}
}
*/

ISR(USART0_RX_vect) {
    4106:	1f 92       	push	r1
    4108:	0f 92       	push	r0
    410a:	0f b6       	in	r0, 0x3f	; 63
    410c:	0f 92       	push	r0
    410e:	0b b6       	in	r0, 0x3b	; 59
    4110:	0f 92       	push	r0
    4112:	11 24       	eor	r1, r1
    4114:	2f 93       	push	r18
    4116:	3f 93       	push	r19
    4118:	4f 93       	push	r20
    411a:	5f 93       	push	r21
    411c:	6f 93       	push	r22
    411e:	7f 93       	push	r23
    4120:	8f 93       	push	r24
    4122:	9f 93       	push	r25
    4124:	af 93       	push	r26
    4126:	bf 93       	push	r27
    4128:	ef 93       	push	r30
    412a:	ff 93       	push	r31

	char receivedByte = UDR0;
    412c:	90 91 c6 00 	lds	r25, 0x00C6


	if(currentSelector==14) {
    4130:	80 91 5c 04 	lds	r24, 0x045C
    4134:	8e 30       	cpi	r24, 0x0E	; 14
    4136:	09 f4       	brne	.+2      	; 0x413a <__vector_25+0x34>
    4138:	3f c0       	rjmp	.+126    	; 0x41b8 <__vector_25+0xb2>
		if(receivedByte == 0xAA) {
			irCommSendValues = 1;
		}
	} else if(currentSelector==15) {
    413a:	8f 30       	cpi	r24, 0x0F	; 15
    413c:	09 f4       	brne	.+2      	; 0x4140 <__vector_25+0x3a>
    413e:	42 c0       	rjmp	.+132    	; 0x41c4 <__vector_25+0xbe>
			eeprom_write_byte((uint8_t*) 4093, currentOsccal); 
		}

	} else {

		if(chooseMenu) {
    4140:	80 91 11 02 	lds	r24, 0x0211
    4144:	88 23       	and	r24, r24
    4146:	09 f5       	brne	.+66     	; 0x418a <__vector_25+0x84>
			chooseMenu = 0;
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
    4148:	80 91 33 04 	lds	r24, 0x0433
    414c:	81 30       	cpi	r24, 0x01	; 1
    414e:	09 f4       	brne	.+2      	; 0x4152 <__vector_25+0x4c>
    4150:	65 c0       	rjmp	.+202    	; 0x421c <__vector_25+0x116>
    4152:	82 30       	cpi	r24, 0x02	; 2
    4154:	f1 f4       	brne	.+60     	; 0x4192 <__vector_25+0x8c>
						menuChoice = 0;
					}
					break;

				case 2:	// address writing in eeprom
					if(menuState == 0) { // receive rf address LSB:
    4156:	40 91 35 04 	lds	r20, 0x0435
    415a:	44 23       	and	r20, r20
    415c:	09 f4       	brne	.+2      	; 0x4160 <__vector_25+0x5a>
    415e:	74 c0       	rjmp	.+232    	; 0x4248 <__vector_25+0x142>
						rfAddress = (unsigned int)receivedByte&0x00FF;
						menuState = 1;
					} else if(menuState == 1) { // receive rf address MSB
    4160:	41 30       	cpi	r20, 0x01	; 1
    4162:	b9 f4       	brne	.+46     	; 0x4192 <__vector_25+0x8c>
						rfAddress |= ((unsigned int)receivedByte<<8);
    4164:	39 2f       	mov	r19, r25
    4166:	20 e0       	ldi	r18, 0x00	; 0
    4168:	80 91 25 03 	lds	r24, 0x0325
    416c:	90 91 26 03 	lds	r25, 0x0326
    4170:	82 2b       	or	r24, r18
    4172:	93 2b       	or	r25, r19
    4174:	90 93 26 03 	sts	0x0326, r25
    4178:	80 93 25 03 	sts	0x0325, r24
						addressReceived = 1;
    417c:	40 93 34 04 	sts	0x0434, r20
						menuState = 0;
    4180:	10 92 35 04 	sts	0x0435, r1
						chooseMenu = 1;
    4184:	40 93 11 02 	sts	0x0211, r20
    4188:	04 c0       	rjmp	.+8      	; 0x4192 <__vector_25+0x8c>
		}

	} else {

		if(chooseMenu) {
			chooseMenu = 0;
    418a:	10 92 11 02 	sts	0x0211, r1
			menuChoice = receivedByte;
    418e:	90 93 33 04 	sts	0x0433, r25
			}
		}

	}

}
    4192:	ff 91       	pop	r31
    4194:	ef 91       	pop	r30
    4196:	bf 91       	pop	r27
    4198:	af 91       	pop	r26
    419a:	9f 91       	pop	r25
    419c:	8f 91       	pop	r24
    419e:	7f 91       	pop	r23
    41a0:	6f 91       	pop	r22
    41a2:	5f 91       	pop	r21
    41a4:	4f 91       	pop	r20
    41a6:	3f 91       	pop	r19
    41a8:	2f 91       	pop	r18
    41aa:	0f 90       	pop	r0
    41ac:	0b be       	out	0x3b, r0	; 59
    41ae:	0f 90       	pop	r0
    41b0:	0f be       	out	0x3f, r0	; 63
    41b2:	0f 90       	pop	r0
    41b4:	1f 90       	pop	r1
    41b6:	18 95       	reti

	char receivedByte = UDR0;


	if(currentSelector==14) {
		if(receivedByte == 0xAA) {
    41b8:	9a 3a       	cpi	r25, 0xAA	; 170
    41ba:	59 f7       	brne	.-42     	; 0x4192 <__vector_25+0x8c>
			irCommSendValues = 1;
    41bc:	81 e0       	ldi	r24, 0x01	; 1
    41be:	80 93 da 04 	sts	0x04DA, r24
    41c2:	e7 cf       	rjmp	.-50     	; 0x4192 <__vector_25+0x8c>
		}
	} else if(currentSelector==15) {

		if(receivedByte == '+') {
    41c4:	9b 32       	cpi	r25, 0x2B	; 43
    41c6:	01 f1       	breq	.+64     	; 0x4208 <__vector_25+0x102>
				currentOsccal++;
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
    41c8:	9d 32       	cpi	r25, 0x2D	; 45
    41ca:	91 f1       	breq	.+100    	; 0x4230 <__vector_25+0x12a>
				currentOsccal--;	
			}
			OSCCAL = currentOsccal;;
		}

		if(receivedByte == 'g') {
    41cc:	97 36       	cpi	r25, 0x67	; 103
    41ce:	09 f0       	breq	.+2      	; 0x41d2 <__vector_25+0xcc>
    41d0:	43 c0       	rjmp	.+134    	; 0x4258 <__vector_25+0x152>
			usart0Transmit(irCommand,1);
    41d2:	90 91 37 04 	lds	r25, 0x0437

}

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    41d6:	80 91 c0 00 	lds	r24, 0x00C0
    41da:	85 ff       	sbrs	r24, 5
    41dc:	fc cf       	rjmp	.-8      	; 0x41d6 <__vector_25+0xd0>
	UDR0 = data;						// put data into buffer, sends the data
    41de:	90 93 c6 00 	sts	0x00C6, r25
	if(isBlocking) {
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    41e2:	80 91 c0 00 	lds	r24, 0x00C0
    41e6:	86 ff       	sbrs	r24, 6
    41e8:	fc cf       	rjmp	.-8      	; 0x41e2 <__vector_25+0xdc>
			OSCCAL = currentOsccal;;
		}

		if(receivedByte == 'g') {
			usart0Transmit(irCommand,1);
			currentOsccal = OSCCAL;
    41ea:	90 91 66 00 	lds	r25, 0x0066
    41ee:	90 93 52 05 	sts	0x0552, r25

}

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    41f2:	80 91 c0 00 	lds	r24, 0x00C0
    41f6:	85 ff       	sbrs	r24, 5
    41f8:	fc cf       	rjmp	.-8      	; 0x41f2 <__vector_25+0xec>
	UDR0 = data;						// put data into buffer, sends the data
    41fa:	90 93 c6 00 	sts	0x00C6, r25
	if(isBlocking) {
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    41fe:	80 91 c0 00 	lds	r24, 0x00C0
    4202:	86 ff       	sbrs	r24, 6
    4204:	fc cf       	rjmp	.-8      	; 0x41fe <__vector_25+0xf8>
    4206:	c5 cf       	rjmp	.-118    	; 0x4192 <__vector_25+0x8c>
			irCommSendValues = 1;
		}
	} else if(currentSelector==15) {

		if(receivedByte == '+') {
			if(currentOsccal<255) {
    4208:	80 91 52 05 	lds	r24, 0x0552
    420c:	8f 3f       	cpi	r24, 0xFF	; 255
    420e:	d1 f0       	breq	.+52     	; 0x4244 <__vector_25+0x13e>
				currentOsccal++;
    4210:	8f 5f       	subi	r24, 0xFF	; 255
    4212:	80 93 52 05 	sts	0x0552, r24

		if(receivedByte == '-') {
			if(currentOsccal>0) {
				currentOsccal--;	
			}
			OSCCAL = currentOsccal;;
    4216:	80 93 66 00 	sts	0x0066, r24
    421a:	bb cf       	rjmp	.-138    	; 0x4192 <__vector_25+0x8c>
			chooseMenu = 0;
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
				case 1: // send sensors data and activate actuators
					if(receivedByte == 0xAA) {
    421c:	9a 3a       	cpi	r25, 0xAA	; 170
    421e:	31 f1       	breq	.+76     	; 0x426c <__vector_25+0x166>
						getDataNow = 1;
					} else if(receivedByte == 0x55) {
    4220:	95 35       	cpi	r25, 0x55	; 85
    4222:	09 f0       	breq	.+2      	; 0x4226 <__vector_25+0x120>
    4224:	b6 cf       	rjmp	.-148    	; 0x4192 <__vector_25+0x8c>
						chooseMenu = 1;
    4226:	80 93 11 02 	sts	0x0211, r24
						menuChoice = 0;
    422a:	10 92 33 04 	sts	0x0433, r1
    422e:	b1 cf       	rjmp	.-158    	; 0x4192 <__vector_25+0x8c>
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
			if(currentOsccal>0) {
    4230:	80 91 52 05 	lds	r24, 0x0552
    4234:	88 23       	and	r24, r24
    4236:	21 f0       	breq	.+8      	; 0x4240 <__vector_25+0x13a>
				currentOsccal--;	
    4238:	81 50       	subi	r24, 0x01	; 1
    423a:	80 93 52 05 	sts	0x0552, r24
    423e:	eb cf       	rjmp	.-42     	; 0x4216 <__vector_25+0x110>
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
			if(currentOsccal>0) {
    4240:	80 e0       	ldi	r24, 0x00	; 0
    4242:	e9 cf       	rjmp	.-46     	; 0x4216 <__vector_25+0x110>
			irCommSendValues = 1;
		}
	} else if(currentSelector==15) {

		if(receivedByte == '+') {
			if(currentOsccal<255) {
    4244:	8f ef       	ldi	r24, 0xFF	; 255
    4246:	e7 cf       	rjmp	.-50     	; 0x4216 <__vector_25+0x110>
					}
					break;

				case 2:	// address writing in eeprom
					if(menuState == 0) { // receive rf address LSB:
						rfAddress = (unsigned int)receivedByte&0x00FF;
    4248:	90 93 25 03 	sts	0x0325, r25
    424c:	10 92 26 03 	sts	0x0326, r1
						menuState = 1;
    4250:	81 e0       	ldi	r24, 0x01	; 1
    4252:	80 93 35 04 	sts	0x0435, r24
    4256:	9d cf       	rjmp	.-198    	; 0x4192 <__vector_25+0x8c>
			usart0Transmit(irCommand,1);
			currentOsccal = OSCCAL;
			usart0Transmit(currentOsccal,1);
		}

		if(receivedByte == 's') {
    4258:	93 37       	cpi	r25, 0x73	; 115
    425a:	09 f0       	breq	.+2      	; 0x425e <__vector_25+0x158>
    425c:	9a cf       	rjmp	.-204    	; 0x4192 <__vector_25+0x8c>
			eeprom_write_byte((uint8_t*) 4093, currentOsccal); 
    425e:	8d ef       	ldi	r24, 0xFD	; 253
    4260:	9f e0       	ldi	r25, 0x0F	; 15
    4262:	60 91 52 05 	lds	r22, 0x0552
    4266:	0e 94 63 57 	call	0xaec6	; 0xaec6 <__eewr_byte_m2560>
    426a:	93 cf       	rjmp	.-218    	; 0x4192 <__vector_25+0x8c>
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
				case 1: // send sensors data and activate actuators
					if(receivedByte == 0xAA) {
						getDataNow = 1;
    426c:	80 93 36 04 	sts	0x0436, r24
    4270:	90 cf       	rjmp	.-224    	; 0x4192 <__vector_25+0x8c>

00004272 <getSelector>:

#include "utility.h"

unsigned char getSelector() {
   return (SEL0) + 2*(SEL1) + 4*(SEL2) + 8*(SEL3);
    4272:	86 b1       	in	r24, 0x06	; 6
    4274:	66 b1       	in	r22, 0x06	; 6
    4276:	26 b1       	in	r18, 0x06	; 6
    4278:	46 b1       	in	r20, 0x06	; 6
    427a:	30 e0       	ldi	r19, 0x00	; 0
    427c:	28 70       	andi	r18, 0x08	; 8
    427e:	30 70       	andi	r19, 0x00	; 0
    4280:	35 95       	asr	r19
    4282:	27 95       	ror	r18
    4284:	35 95       	asr	r19
    4286:	27 95       	ror	r18
    4288:	35 95       	asr	r19
    428a:	27 95       	ror	r18
    428c:	22 0f       	add	r18, r18
    428e:	33 1f       	adc	r19, r19
    4290:	70 e0       	ldi	r23, 0x00	; 0
    4292:	64 70       	andi	r22, 0x04	; 4
    4294:	70 70       	andi	r23, 0x00	; 0
    4296:	75 95       	asr	r23
    4298:	67 95       	ror	r22
    429a:	75 95       	asr	r23
    429c:	67 95       	ror	r22
    429e:	26 0f       	add	r18, r22
    42a0:	37 1f       	adc	r19, r23
    42a2:	22 0f       	add	r18, r18
    42a4:	33 1f       	adc	r19, r19
    42a6:	50 e0       	ldi	r21, 0x00	; 0
    42a8:	42 70       	andi	r20, 0x02	; 2
    42aa:	50 70       	andi	r21, 0x00	; 0
    42ac:	55 95       	asr	r21
    42ae:	47 95       	ror	r20
    42b0:	24 0f       	add	r18, r20
    42b2:	35 1f       	adc	r19, r21
    42b4:	22 0f       	add	r18, r18
    42b6:	81 70       	andi	r24, 0x01	; 1
}
    42b8:	82 0f       	add	r24, r18
    42ba:	08 95       	ret

000042bc <initPeripherals>:
    

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
    42bc:	f8 94       	cli
	
	// reset all registers touched by arduino in the "init()" functions (wiring.c) not used by the robot
	TCCR0A = 0;
    42be:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
    42c0:	15 bc       	out	0x25, r1	; 37
	TIMSK0 = 0;
    42c2:	10 92 6e 00 	sts	0x006E, r1
	TCCR5A = 0;
    42c6:	10 92 20 01 	sts	0x0120, r1
	TCCR5B = 0;
    42ca:	10 92 21 01 	sts	0x0121, r1

	rfAddress = eeprom_read_word((uint16_t*)4094);
    42ce:	8e ef       	ldi	r24, 0xFE	; 254
    42d0:	9f e0       	ldi	r25, 0x0F	; 15
    42d2:	0e 94 35 57 	call	0xae6a	; 0xae6a <__eerd_word_m2560>
    42d6:	90 93 26 03 	sts	0x0326, r25
    42da:	80 93 25 03 	sts	0x0325, r24
	currentOsccal = eeprom_read_byte((uint8_t*)4093);
    42de:	8d ef       	ldi	r24, 0xFD	; 253
    42e0:	9f e0       	ldi	r25, 0x0F	; 15
    42e2:	0e 94 2d 57 	call	0xae5a	; 0xae5a <__eerd_byte_m2560>
    42e6:	80 93 52 05 	sts	0x0552, r24
	if(currentOsccal!=0 && currentOsccal!=255) { // clear memory
    42ea:	98 2f       	mov	r25, r24
    42ec:	91 50       	subi	r25, 0x01	; 1
    42ee:	9e 3f       	cpi	r25, 0xFE	; 254
    42f0:	e8 f5       	brcc	.+122    	; 0x436c <initPeripherals+0xb0>
		OSCCAL = currentOsccal;
    42f2:	80 93 66 00 	sts	0x0066, r24
		currentOsccal = OSCCAL;
		eeprom_write_byte((uint8_t*) 4093, currentOsccal);
	}
	
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
    42f6:	80 91 25 03 	lds	r24, 0x0325
    42fa:	90 91 26 03 	lds	r25, 0x0326
    42fe:	9c 01       	movw	r18, r24
    4300:	21 58       	subi	r18, 0x81	; 129
    4302:	3c 40       	sbci	r19, 0x0C	; 12
    4304:	23 30       	cpi	r18, 0x03	; 3
    4306:	31 05       	cpc	r19, r1
    4308:	08 f5       	brcc	.+66     	; 0x434c <initPeripherals+0x90>
		hardwareRevision = HW_REV_3_0;
    430a:	10 92 5f 04 	sts	0x045F, r1

	if(rfAddress > 3203) {
		hardwareRevision = HW_REV_3_1;
	}

	initCalibration();
    430e:	0e 94 8a 3a 	call	0x7514	; 0x7514 <initCalibration>
	initPortsIO();
    4312:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <initPortsIO>
	initAdc();
    4316:	0e 94 7e 22 	call	0x44fc	; 0x44fc <initAdc>
	initMotors();
    431a:	0e 94 a6 28 	call	0x514c	; 0x514c <initMotors>
	initRGBleds();
    431e:	0e 94 65 3e 	call	0x7cca	; 0x7cca <initRGBleds>
	initSPI();
    4322:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <initSPI>
	mirf_init();
    4326:	0e 94 8f 10 	call	0x211e	; 0x211e <mirf_init>
	if(spiCommError==0) {
    432a:	80 91 28 03 	lds	r24, 0x0328
    432e:	88 23       	and	r24, r24
    4330:	29 f4       	brne	.+10     	; 0x433c <initPeripherals+0x80>
		rfFlags |= 1;
    4332:	80 91 27 03 	lds	r24, 0x0327
    4336:	81 60       	ori	r24, 0x01	; 1
    4338:	80 93 27 03 	sts	0x0327, r24
	}
	initUsart0();
    433c:	0e 94 21 20 	call	0x4042	; 0x4042 <initUsart0>
	initAccelerometer();
    4340:	0e 94 ad 3f 	call	0x7f5a	; 0x7f5a <initAccelerometer>
	init_ir_remote_control();
    4344:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <init_ir_remote_control>

	sei();			// enable global interrupts
    4348:	78 94       	sei

	
}
    434a:	08 95       	ret
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
		hardwareRevision = HW_REV_3_0;
	}

	if(rfAddress == 3200) {
    434c:	2c e0       	ldi	r18, 0x0C	; 12
    434e:	80 38       	cpi	r24, 0x80	; 128
    4350:	92 07       	cpc	r25, r18
    4352:	21 f4       	brne	.+8      	; 0x435c <initPeripherals+0xa0>
		hardwareRevision = HW_REV_3_0_1;
    4354:	81 e0       	ldi	r24, 0x01	; 1
    4356:	80 93 5f 04 	sts	0x045F, r24
    435a:	d9 cf       	rjmp	.-78     	; 0x430e <initPeripherals+0x52>
	}

	if(rfAddress > 3203) {
    435c:	2c e0       	ldi	r18, 0x0C	; 12
    435e:	84 38       	cpi	r24, 0x84	; 132
    4360:	92 07       	cpc	r25, r18
    4362:	a8 f2       	brcs	.-86     	; 0x430e <initPeripherals+0x52>
		hardwareRevision = HW_REV_3_1;
    4364:	82 e0       	ldi	r24, 0x02	; 2
    4366:	80 93 5f 04 	sts	0x045F, r24
    436a:	d1 cf       	rjmp	.-94     	; 0x430e <initPeripherals+0x52>
	rfAddress = eeprom_read_word((uint16_t*)4094);
	currentOsccal = eeprom_read_byte((uint8_t*)4093);
	if(currentOsccal!=0 && currentOsccal!=255) { // clear memory
		OSCCAL = currentOsccal;
	} else {
		currentOsccal = OSCCAL;
    436c:	60 91 66 00 	lds	r22, 0x0066
    4370:	60 93 52 05 	sts	0x0552, r22
		eeprom_write_byte((uint8_t*) 4093, currentOsccal);
    4374:	8d ef       	ldi	r24, 0xFD	; 253
    4376:	9f e0       	ldi	r25, 0x0F	; 15
    4378:	0e 94 63 57 	call	0xaec6	; 0xaec6 <__eewr_byte_m2560>
    437c:	bc cf       	rjmp	.-136    	; 0x42f6 <initPeripherals+0x3a>

0000437e <__vector_15>:

	
}

// used only for wake-up from sleep
ISR(TIMER2_OVF_vect) {
    437e:	1f 92       	push	r1
    4380:	0f 92       	push	r0
    4382:	0f b6       	in	r0, 0x3f	; 63
    4384:	0f 92       	push	r0
    4386:	11 24       	eor	r1, r1

}
    4388:	0f 90       	pop	r0
    438a:	0f be       	out	0x3f, r0	; 63
    438c:	0f 90       	pop	r0
    438e:	1f 90       	pop	r1
    4390:	18 95       	reti

00004392 <sleep>:

void sleep(unsigned char seconds) {
    4392:	cf 93       	push	r28
    4394:	df 93       	push	r29

	unsigned int pause = seconds*30;	// the timer2 used to wake-up from sleep is configured to run at 30 Hz
    4396:	9e e1       	ldi	r25, 0x1E	; 30
    4398:	89 9f       	mul	r24, r25
    439a:	e0 01       	movw	r28, r0
    439c:	11 24       	eor	r1, r1

	// disable external interrupt because it uses the timer2 to interpret the tv
	// remote signal and the timer2 must be free in order to be used for wake-up from sleep
	PCICR &= ~(1 << PCIE1);			// disable interrupt from falling edge
    439e:	80 91 68 00 	lds	r24, 0x0068
    43a2:	8d 7f       	andi	r24, 0xFD	; 253
    43a4:	80 93 68 00 	sts	0x0068, r24
	PCMSK1 &= ~(1 << PCINT15);		
    43a8:	80 91 6c 00 	lds	r24, 0x006C
    43ac:	8f 77       	andi	r24, 0x7F	; 127
    43ae:	80 93 6c 00 	sts	0x006C, r24
	PCIFR |= (1 << PCIF1);			// clear interrupt flag
    43b2:	d9 9a       	sbi	0x1b, 1	; 27

	// disable adc
	ADCSRA = 0x00;					// disable interrupt and turn off adc
    43b4:	10 92 7a 00 	sts	0x007A, r1
	ADCSRA |= (1 << ADIF);			// clear interrupt flag
    43b8:	80 91 7a 00 	lds	r24, 0x007A
    43bc:	80 61       	ori	r24, 0x10	; 16
    43be:	80 93 7a 00 	sts	0x007A, r24

	// disable motors pwm
	TCCR3A = 0x00;	// turn off timer
    43c2:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0x00;
    43c6:	10 92 91 00 	sts	0x0091, r1
	TIMSK3 = 0x00;	// disable interrupt
    43ca:	10 92 71 00 	sts	0x0071, r1
	TIFR3 |= (1 << OCF3A) | (1 << OCF3B) | (1 << TOV3);	// clear output compares and timer overflow interrupt flags
    43ce:	88 b3       	in	r24, 0x18	; 24
    43d0:	87 60       	ori	r24, 0x07	; 7
    43d2:	88 bb       	out	0x18, r24	; 24
	TCCR4A = 0x00;
    43d4:	10 92 a0 00 	sts	0x00A0, r1
	TCCR4B = 0x00;
    43d8:	10 92 a1 00 	sts	0x00A1, r1
	TIMSK4 = 0x00;
    43dc:	10 92 72 00 	sts	0x0072, r1
	TIFR4 |= (1 << OCF4A) | (1 << OCF4B) | (1 << TOV4);	// clear output compares and timer overflow interrupt flags
    43e0:	89 b3       	in	r24, 0x19	; 25
    43e2:	87 60       	ori	r24, 0x07	; 7
    43e4:	89 bb       	out	0x19, r24	; 25

	// disable leds pwm
	TCCR1A = 0x00;	// turn off timer
    43e6:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x00;
    43ea:	10 92 81 00 	sts	0x0081, r1

	// close communication channels
	closeUsart();
    43ee:	0e 94 4b 20 	call	0x4096	; 0x4096 <closeUsart>
	closeSPI();
    43f2:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <closeSPI>
	i2c_close();
    43f6:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <i2c_close>

	// set port pins
	initPortsIO();
    43fa:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <initPortsIO>
	//PORTB &= ~(1 << 4);	// radio CE pin
	//DDRD = 0xFF;
	//PORTD = 0x00;	// I2C and uart pins to 0

	// set extendend standby mode and enable it
	SMCR |= (1 << SM2) | (1 << SM1) | (1 << SM0) | (1 << SE);	// extended standby
    43fe:	83 b7       	in	r24, 0x33	; 51
    4400:	8f 60       	ori	r24, 0x0F	; 15
    4402:	83 bf       	out	0x33, r24	; 51

	// set timer2 for wake-up: 
	// source clock = 8 MHz
	// prescaler = 1/1024 => 7812.5 Hz
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
    4404:	81 e0       	ldi	r24, 0x01	; 1
    4406:	80 93 70 00 	sts	0x0070, r24
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
    440a:	80 91 b0 00 	lds	r24, 0x00B0
    440e:	8d 7f       	andi	r24, 0xFD	; 253
    4410:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler
    4414:	80 91 b1 00 	lds	r24, 0x00B1
    4418:	87 60       	ori	r24, 0x07	; 7
    441a:	80 93 b1 00 	sts	0x00B1, r24

	while(pause > 0) {	
    441e:	20 97       	sbiw	r28, 0x00	; 0
    4420:	19 f0       	breq	.+6      	; 0x4428 <sleep+0x96>
		// enter extended standby mode
		//sleep_cpu();
		__asm__("sleep");
    4422:	88 95       	sleep
		pause--;
    4424:	21 97       	sbiw	r28, 0x01	; 1
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler

	while(pause > 0) {	
    4426:	e9 f7       	brne	.-6      	; 0x4422 <sleep+0x90>
//		PORTB ^= (1 << 6);
	}

	// disable power mode
	//SMCR &= ~(1 << SE);
	SMCR = 0x00;
    4428:	13 be       	out	0x33, r1	; 51

	// disable timer2 and its timer overflow interrupt
	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);	// disable timer2
    442a:	80 91 b1 00 	lds	r24, 0x00B1
    442e:	88 7f       	andi	r24, 0xF8	; 248
    4430:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;					// disable all interrupt for timer2
    4434:	10 92 70 00 	sts	0x0070, r1
	TCCR2A |= (1 << WGM21); 	// mode 2 => CTC mode
    4438:	80 91 b0 00 	lds	r24, 0x00B0
    443c:	82 60       	ori	r24, 0x02	; 2
    443e:	80 93 b0 00 	sts	0x00B0, r24

	pwm_red = 255;
    4442:	8f ef       	ldi	r24, 0xFF	; 255
    4444:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    4448:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    444c:	80 93 0e 02 	sts	0x020E, r24
	pwm_right = 0;
    4450:	10 92 06 03 	sts	0x0306, r1
    4454:	10 92 05 03 	sts	0x0305, r1
	pwm_left = 0;
    4458:	10 92 08 03 	sts	0x0308, r1
    445c:	10 92 07 03 	sts	0x0307, r1
	initPeripherals();
    4460:	0e 94 5e 21 	call	0x42bc	; 0x42bc <initPeripherals>

}
    4464:	df 91       	pop	r29
    4466:	cf 91       	pop	r28
    4468:	08 95       	ret

0000446a <getTime100MicroSec>:

unsigned long int getTime100MicroSec() {
    446a:	60 91 58 04 	lds	r22, 0x0458
    446e:	70 91 59 04 	lds	r23, 0x0459
	return clockTick;
}
    4472:	80 91 5a 04 	lds	r24, 0x045A
    4476:	90 91 5b 04 	lds	r25, 0x045B
    447a:	08 95       	ret

0000447c <readBatteryLevel>:

void readBatteryLevel() {
	measBattery = 1;
    447c:	81 e0       	ldi	r24, 0x01	; 1
    447e:	80 93 cf 02 	sts	0x02CF, r24
}
    4482:	08 95       	ret

00004484 <resetOdometry>:

void resetOdometry() {
	leftMotSteps = 0;
    4484:	80 e0       	ldi	r24, 0x00	; 0
    4486:	90 e0       	ldi	r25, 0x00	; 0
    4488:	dc 01       	movw	r26, r24
    448a:	80 93 e5 02 	sts	0x02E5, r24
    448e:	90 93 e6 02 	sts	0x02E6, r25
    4492:	a0 93 e7 02 	sts	0x02E7, r26
    4496:	b0 93 e8 02 	sts	0x02E8, r27
	rightMotSteps = 0;
    449a:	80 93 e1 02 	sts	0x02E1, r24
    449e:	90 93 e2 02 	sts	0x02E2, r25
    44a2:	a0 93 e3 02 	sts	0x02E3, r26
    44a6:	b0 93 e4 02 	sts	0x02E4, r27
	theta = 0;
    44aa:	80 93 7f 04 	sts	0x047F, r24
    44ae:	90 93 80 04 	sts	0x0480, r25
    44b2:	a0 93 81 04 	sts	0x0481, r26
    44b6:	b0 93 82 04 	sts	0x0482, r27
	xPos = 0;
    44ba:	80 93 87 04 	sts	0x0487, r24
    44be:	90 93 88 04 	sts	0x0488, r25
    44c2:	a0 93 89 04 	sts	0x0489, r26
    44c6:	b0 93 8a 04 	sts	0x048A, r27
	yPos = 0;
    44ca:	80 93 8b 04 	sts	0x048B, r24
    44ce:	90 93 8c 04 	sts	0x048C, r25
    44d2:	a0 93 8d 04 	sts	0x048D, r26
    44d6:	b0 93 8e 04 	sts	0x048E, r27
	rightDist = 0;
    44da:	80 93 a7 04 	sts	0x04A7, r24
    44de:	90 93 a8 04 	sts	0x04A8, r25
    44e2:	a0 93 a9 04 	sts	0x04A9, r26
    44e6:	b0 93 aa 04 	sts	0x04AA, r27
	leftDist = 0;
    44ea:	80 93 a3 04 	sts	0x04A3, r24
    44ee:	90 93 a4 04 	sts	0x04A4, r25
    44f2:	a0 93 a5 04 	sts	0x04A5, r26
    44f6:	b0 93 a6 04 	sts	0x04A6, r27
}
    44fa:	08 95       	ret

000044fc <initAdc>:

#include "adc.h"


void initAdc(void) {
    44fc:	cf 93       	push	r28
    44fe:	df 93       	push	r29
	// ADMUX  -----> REFS1	REFS0	 ADLAR	MUX4	MUX3 	 MUX2	MUX1	MUX0
	// default		 0		0		 0		0		0		 0		0		0
	// ADCSRB -----> -		ACME	 - 		- 		MUX5 	 ADTS2 	ADTS1 	ADTS0
	// default		 0		0		 0		0		0		 0		0		0

	ADCSRA = 0;
    4500:	ea e7       	ldi	r30, 0x7A	; 122
    4502:	f0 e0       	ldi	r31, 0x00	; 0
    4504:	10 82       	st	Z, r1
	ADCSRB = 0;
    4506:	ab e7       	ldi	r26, 0x7B	; 123
    4508:	b0 e0       	ldi	r27, 0x00	; 0
    450a:	1c 92       	st	X, r1
	ADMUX = 0;
    450c:	cc e7       	ldi	r28, 0x7C	; 124
    450e:	d0 e0       	ldi	r29, 0x00	; 0
    4510:	18 82       	st	Y, r1

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// 1/64 prescaler => 8 MHz/64=125 KHz => Tad (adc clock)
    4512:	80 81       	ld	r24, Z
    4514:	86 60       	ori	r24, 0x06	; 6
    4516:	80 83       	st	Z, r24
											// one sample need 13 Tad in free running mode, so interrupt 
											// frequency is 125/13=9.6 KHz (104 us between adc interrupts)
	ADMUX |= (1 << REFS0); 	// voltage reference to AVCC (external)
    4518:	88 81       	ld	r24, Y
    451a:	80 64       	ori	r24, 0x40	; 64
    451c:	88 83       	st	Y, r24
	ADCSRA |= (1 << ADATE); // auto-trigger mode: the new sampling is started just after the last one is completed
    451e:	80 81       	ld	r24, Z
    4520:	80 62       	ori	r24, 0x20	; 32
    4522:	80 83       	st	Z, r24
	ADCSRB &= 0xF8;			// for safety...ADTS2:0 in ADCSRB should be already set to free running by default (0b000)
    4524:	8c 91       	ld	r24, X
    4526:	88 7f       	andi	r24, 0xF8	; 248
    4528:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADIE);	// enable interrupt on conversion completion
    452a:	80 81       	ld	r24, Z
    452c:	88 60       	ori	r24, 0x08	; 8
    452e:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	// enable ADC
    4530:	80 81       	ld	r24, Z
    4532:	80 68       	ori	r24, 0x80	; 128
    4534:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);	// start first conversion (start from channel 0)
    4536:	80 81       	ld	r24, Z
    4538:	80 64       	ori	r24, 0x40	; 64
    453a:	80 83       	st	Z, r24

}
    453c:	df 91       	pop	r29
    453e:	cf 91       	pop	r28
    4540:	08 95       	ret

00004542 <__vector_29>:

ISR(ADC_vect) {
    4542:	1f 92       	push	r1
    4544:	0f 92       	push	r0
    4546:	0f b6       	in	r0, 0x3f	; 63
    4548:	0f 92       	push	r0
    454a:	0b b6       	in	r0, 0x3b	; 59
    454c:	0f 92       	push	r0
    454e:	11 24       	eor	r1, r1
    4550:	1f 93       	push	r17
    4552:	2f 93       	push	r18
    4554:	3f 93       	push	r19
    4556:	4f 93       	push	r20
    4558:	5f 93       	push	r21
    455a:	6f 93       	push	r22
    455c:	7f 93       	push	r23
    455e:	8f 93       	push	r24
    4560:	9f 93       	push	r25
    4562:	af 93       	push	r26
    4564:	bf 93       	push	r27
    4566:	ef 93       	push	r30
    4568:	ff 93       	push	r31
	// channel 15:    active phase when going forward: motor left current; passive phase when going backward: motor left velocity


	//LED_BLUE_ON;

	clockTick++;				// this variable is used as base time for timed processes/functions (e,g, delay); 
    456a:	80 91 58 04 	lds	r24, 0x0458
    456e:	90 91 59 04 	lds	r25, 0x0459
    4572:	a0 91 5a 04 	lds	r26, 0x045A
    4576:	b0 91 5b 04 	lds	r27, 0x045B
    457a:	01 96       	adiw	r24, 0x01	; 1
    457c:	a1 1d       	adc	r26, r1
    457e:	b1 1d       	adc	r27, r1
    4580:	80 93 58 04 	sts	0x0458, r24
    4584:	90 93 59 04 	sts	0x0459, r25
    4588:	a0 93 5a 04 	sts	0x045A, r26
    458c:	b0 93 5b 04 	sts	0x045B, r27
								// resolution of 104 us based on adc interrupts

	unsigned int value = ADCL;			// get the sample; low byte must be read first!!
    4590:	80 91 78 00 	lds	r24, 0x0078
    4594:	90 e0       	ldi	r25, 0x00	; 0
	value = (ADCH<<8) | value;
    4596:	40 91 79 00 	lds	r20, 0x0079
    459a:	34 2f       	mov	r19, r20
    459c:	20 e0       	ldi	r18, 0x00	; 0
    459e:	82 2b       	or	r24, r18
    45a0:	93 2b       	or	r25, r19
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    45a2:	20 91 c9 02 	lds	r18, 0x02C9
    45a6:	22 30       	cpi	r18, 0x02	; 2
    45a8:	09 f4       	brne	.+2      	; 0x45ac <__vector_29+0x6a>
    45aa:	c1 c1       	rjmp	.+898    	; 0x492e <__vector_29+0x3ec>
    45ac:	23 30       	cpi	r18, 0x03	; 3
    45ae:	08 f4       	brcc	.+2      	; 0x45b2 <__vector_29+0x70>
    45b0:	4c c0       	rjmp	.+152    	; 0x464a <__vector_29+0x108>
    45b2:	24 30       	cpi	r18, 0x04	; 4
    45b4:	09 f4       	brne	.+2      	; 0x45b8 <__vector_29+0x76>
    45b6:	e5 c1       	rjmp	.+970    	; 0x4982 <__vector_29+0x440>
    45b8:	24 30       	cpi	r18, 0x04	; 4
    45ba:	08 f0       	brcs	.+2      	; 0x45be <__vector_29+0x7c>
    45bc:	2a c1       	rjmp	.+596    	; 0x4812 <__vector_29+0x2d0>
				}
			}
			break;

		case SAVE_TO_LEFT_MOTOR_CURRENT:
			left_current_avg += value;
    45be:	20 91 f1 02 	lds	r18, 0x02F1
    45c2:	30 91 f2 02 	lds	r19, 0x02F2
    45c6:	28 0f       	add	r18, r24
    45c8:	39 1f       	adc	r19, r25
			left_current_avg = left_current_avg >> 1;
    45ca:	36 95       	lsr	r19
    45cc:	27 95       	ror	r18
    45ce:	30 93 f2 02 	sts	0x02F2, r19
    45d2:	20 93 f1 02 	sts	0x02F1, r18
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
    45d6:	80 91 d6 04 	lds	r24, 0x04D6
    45da:	82 30       	cpi	r24, 0x02	; 2
    45dc:	09 f0       	breq	.+2      	; 0x45e0 <__vector_29+0x9e>
    45de:	4b c0       	rjmp	.+150    	; 0x4676 <__vector_29+0x134>
		switch(irCommAdcTxState) {
    45e0:	80 91 26 05 	lds	r24, 0x0526
    45e4:	81 30       	cpi	r24, 0x01	; 1
    45e6:	09 f4       	brne	.+2      	; 0x45ea <__vector_29+0xa8>
    45e8:	a0 c2       	rjmp	.+1344   	; 0x4b2a <__vector_29+0x5e8>
    45ea:	81 30       	cpi	r24, 0x01	; 1
    45ec:	08 f0       	brcs	.+2      	; 0x45f0 <__vector_29+0xae>
    45ee:	f7 c1       	rjmp	.+1006   	; 0x49de <__vector_29+0x49c>
				}
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ1;
				break;

			case IRCOMM_TX_ADC_IDLE:
				if(irCommTxByteEnqueued==1) {					
    45f0:	80 91 28 05 	lds	r24, 0x0528
    45f4:	81 30       	cpi	r24, 0x01	; 1
    45f6:	09 f4       	brne	.+2      	; 0x45fa <__vector_29+0xb8>
    45f8:	09 c3       	rjmp	.+1554   	; 0x4c0c <__vector_29+0x6ca>
    45fa:	80 91 ca 02 	lds	r24, 0x02CA
	
	}

	// channel selection in the adc register; continuously manually change the channel 
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
    45fe:	90 91 33 02 	lds	r25, 0x0233
    4602:	98 30       	cpi	r25, 0x08	; 8
    4604:	08 f0       	brcs	.+2      	; 0x4608 <__vector_29+0xc6>
    4606:	4b c1       	rjmp	.+662    	; 0x489e <__vector_29+0x35c>
		ADCSRB &= ~(1 << MUX5);
    4608:	90 91 7b 00 	lds	r25, 0x007B
    460c:	97 7f       	andi	r25, 0xF7	; 247
    460e:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + currentAdChannel;
    4612:	90 91 33 02 	lds	r25, 0x0233
    4616:	90 5c       	subi	r25, 0xC0	; 192
    4618:	90 93 7c 00 	sts	0x007C, r25
		ADCSRB |= (1 << MUX5);
		ADMUX = 0x40 + (currentAdChannel-8);
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if((adcSamplingState==2) && (irCommMode==IRCOMM_MODE_SENSORS_SAMPLING)) {
    461c:	82 30       	cpi	r24, 0x02	; 2
    461e:	09 f4       	brne	.+2      	; 0x4622 <__vector_29+0xe0>
    4620:	4b c1       	rjmp	.+662    	; 0x48b8 <__vector_29+0x376>

	}

	//LED_BLUE_OFF;

}
    4622:	ff 91       	pop	r31
    4624:	ef 91       	pop	r30
    4626:	bf 91       	pop	r27
    4628:	af 91       	pop	r26
    462a:	9f 91       	pop	r25
    462c:	8f 91       	pop	r24
    462e:	7f 91       	pop	r23
    4630:	6f 91       	pop	r22
    4632:	5f 91       	pop	r21
    4634:	4f 91       	pop	r20
    4636:	3f 91       	pop	r19
    4638:	2f 91       	pop	r18
    463a:	1f 91       	pop	r17
    463c:	0f 90       	pop	r0
    463e:	0b be       	out	0x3b, r0	; 59
    4640:	0f 90       	pop	r0
    4642:	0f be       	out	0x3f, r0	; 63
    4644:	0f 90       	pop	r0
    4646:	1f 90       	pop	r1
    4648:	18 95       	reti
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    464a:	22 23       	and	r18, r18
    464c:	09 f4       	brne	.+2      	; 0x4650 <__vector_29+0x10e>
    464e:	4d c0       	rjmp	.+154    	; 0x46ea <__vector_29+0x1a8>
    4650:	21 30       	cpi	r18, 0x01	; 1
    4652:	61 f4       	brne	.+24     	; 0x466c <__vector_29+0x12a>
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
			}											// is sampled; thus 12 sensors x 2 phases = 24 samples
			break;

		case SAVE_TO_RIGHT_MOTOR_CURRENT:
			right_current_avg += value;
    4654:	20 91 f3 02 	lds	r18, 0x02F3
    4658:	30 91 f4 02 	lds	r19, 0x02F4
    465c:	28 0f       	add	r18, r24
    465e:	39 1f       	adc	r19, r25
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
    4660:	36 95       	lsr	r19
    4662:	27 95       	ror	r18
    4664:	30 93 f4 02 	sts	0x02F4, r19
    4668:	20 93 f3 02 	sts	0x02F3, r18
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
    466c:	80 91 d6 04 	lds	r24, 0x04D6
    4670:	82 30       	cpi	r24, 0x02	; 2
    4672:	09 f4       	brne	.+2      	; 0x4676 <__vector_29+0x134>
    4674:	b5 cf       	rjmp	.-150    	; 0x45e0 <__vector_29+0x9e>
					irCommAdcTxState = IRCOMM_TX_ADC_TURN_OFF_SENSORS;
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
    4676:	81 30       	cpi	r24, 0x01	; 1
    4678:	09 f4       	brne	.+2      	; 0x467c <__vector_29+0x13a>
    467a:	38 c1       	rjmp	.+624    	; 0x48ec <__vector_29+0x3aa>
			case 12:
				adcSaveDataTo = SKIP_SAMPLE;
				break;

		}
	} else if(irCommMode==IRCOMM_MODE_SENSORS_SAMPLING) {
    467c:	88 23       	and	r24, r24
    467e:	09 f0       	breq	.+2      	; 0x4682 <__vector_29+0x140>
    4680:	bc cf       	rjmp	.-136    	; 0x45fa <__vector_29+0xb8>
		switch(adcSamplingState) {
    4682:	80 91 ca 02 	lds	r24, 0x02CA
    4686:	82 30       	cpi	r24, 0x02	; 2
    4688:	09 f4       	brne	.+2      	; 0x468c <__vector_29+0x14a>
    468a:	23 c3       	rjmp	.+1606   	; 0x4cd2 <__vector_29+0x790>
    468c:	83 30       	cpi	r24, 0x03	; 3
    468e:	08 f0       	brcs	.+2      	; 0x4692 <__vector_29+0x150>
    4690:	d3 c1       	rjmp	.+934    	; 0x4a38 <__vector_29+0x4f6>
    4692:	88 23       	and	r24, r24
    4694:	09 f4       	brne	.+2      	; 0x4698 <__vector_29+0x156>
    4696:	76 c2       	rjmp	.+1260   	; 0x4b84 <__vector_29+0x642>
    4698:	81 30       	cpi	r24, 0x01	; 1
    469a:	09 f0       	breq	.+2      	; 0x469e <__vector_29+0x15c>
    469c:	b0 cf       	rjmp	.-160    	; 0x45fe <__vector_29+0xbc>
				}
				adcSamplingState = 1;
				break;

			case 1:	// left motor
				currentAdChannel = currentMotLeftChannel;
    469e:	80 91 35 02 	lds	r24, 0x0235
    46a2:	80 93 33 02 	sts	0x0233, r24
				leftChannelPhase = leftMotorPhase;
    46a6:	80 91 38 02 	lds	r24, 0x0238
    46aa:	80 93 cc 02 	sts	0x02CC, r24
				adcSaveDataTo = SAVE_TO_PROX;
    46ae:	10 92 c9 02 	sts	0x02C9, r1
				adcSamplingState = 2;
    46b2:	82 e0       	ldi	r24, 0x02	; 2
    46b4:	80 93 ca 02 	sts	0x02CA, r24
				if(irCommEnabled==IRCOMM_MODE_RECEIVE && currentProx==23) {					
    46b8:	10 91 d4 04 	lds	r17, 0x04D4
    46bc:	11 30       	cpi	r17, 0x01	; 1
    46be:	09 f4       	brne	.+2      	; 0x46c2 <__vector_29+0x180>
    46c0:	0b c4       	rjmp	.+2070   	; 0x4ed8 <__vector_29+0x996>
					irCommRxWindowSamples = 0;
					memset(irCommMaxSensorValueAdc, 0x00, 16);
					memset(irCommMinSensorValueAdc, 0xFF, 16);
					irCommMode = IRCOMM_MODE_RECEIVE;					
				}
				if(irCommEnabled==IRCOMM_MODE_TRANSMIT && currentProx==23) {
    46c2:	12 30       	cpi	r17, 0x02	; 2
    46c4:	09 f0       	breq	.+2      	; 0x46c8 <__vector_29+0x186>
    46c6:	99 cf       	rjmp	.-206    	; 0x45fa <__vector_29+0xb8>
    46c8:	80 91 34 02 	lds	r24, 0x0234
    46cc:	87 31       	cpi	r24, 0x17	; 23
    46ce:	09 f0       	breq	.+2      	; 0x46d2 <__vector_29+0x190>
    46d0:	94 cf       	rjmp	.-216    	; 0x45fa <__vector_29+0xb8>
					irCommMode = IRCOMM_MODE_TRANSMIT;
    46d2:	10 93 d6 04 	sts	0x04D6, r17
					if(irCommTxByteEnqueued==1) {
    46d6:	80 91 28 05 	lds	r24, 0x0528
    46da:	81 30       	cpi	r24, 0x01	; 1
    46dc:	09 f4       	brne	.+2      	; 0x46e0 <__vector_29+0x19e>
    46de:	96 c2       	rjmp	.+1324   	; 0x4c0c <__vector_29+0x6ca>
						irCommAdcTxState = IRCOMM_TX_ADC_TURN_OFF_SENSORS;
					} else {
						irCommMode=IRCOMM_MODE_SENSORS_SAMPLING; // no data to be transmitted, restart sensors sampling
    46e0:	10 92 d6 04 	sts	0x04D6, r1
    46e4:	80 91 ca 02 	lds	r24, 0x02CA
    46e8:	8a cf       	rjmp	.-236    	; 0x45fe <__vector_29+0xbc>
			}
			currentProx++;
			break;

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    46ea:	60 91 34 02 	lds	r22, 0x0234
    46ee:	6e 30       	cpi	r22, 0x0E	; 14
    46f0:	09 f4       	brne	.+2      	; 0x46f4 <__vector_29+0x1b2>
    46f2:	02 c3       	rjmp	.+1540   	; 0x4cf8 <__vector_29+0x7b6>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
				measBattery = 0;
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
			} else {
				proximityValue[currentProx] = value;	// even indexes contain ambient values; odd indexes contains "reflected" values
    46f4:	26 2f       	mov	r18, r22
    46f6:	30 e0       	ldi	r19, 0x00	; 0
    46f8:	f9 01       	movw	r30, r18
    46fa:	ee 0f       	add	r30, r30
    46fc:	ff 1f       	adc	r31, r31
    46fe:	e7 5c       	subi	r30, 0xC7	; 199
    4700:	fd 4f       	sbci	r31, 0xFD	; 253
    4702:	91 83       	std	Z+1, r25	; 0x01
    4704:	80 83       	st	Z, r24
			}

			if(currentProx & 0x01) {
    4706:	20 ff       	sbrs	r18, 0
    4708:	78 c0       	rjmp	.+240    	; 0x47fa <__vector_29+0x2b8>
				//if(currentProx < 16) {	// prox
					proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
    470a:	f9 01       	movw	r30, r18
    470c:	ee 0f       	add	r30, r30
    470e:	ff 1f       	adc	r31, r31
    4710:	e9 5c       	subi	r30, 0xC9	; 201
    4712:	fd 4f       	sbci	r31, 0xFD	; 253
    4714:	80 81       	ld	r24, Z
    4716:	91 81       	ldd	r25, Z+1	; 0x01
    4718:	f9 01       	movw	r30, r18
    471a:	ee 0f       	add	r30, r30
    471c:	ff 1f       	adc	r31, r31
    471e:	e7 5c       	subi	r30, 0xC7	; 199
    4720:	fd 4f       	sbci	r31, 0xFD	; 253
    4722:	40 81       	ld	r20, Z
    4724:	51 81       	ldd	r21, Z+1	; 0x01
    4726:	26 2f       	mov	r18, r22
    4728:	26 95       	lsr	r18
    472a:	30 e0       	ldi	r19, 0x00	; 0
    472c:	84 1b       	sub	r24, r20
    472e:	95 0b       	sbc	r25, r21
    4730:	22 0f       	add	r18, r18
    4732:	33 1f       	adc	r19, r19
    4734:	f9 01       	movw	r30, r18
    4736:	ef 57       	subi	r30, 0x7F	; 127
    4738:	fd 4f       	sbci	r31, 0xFD	; 253
    473a:	40 81       	ld	r20, Z
    473c:	51 81       	ldd	r21, Z+1	; 0x01
    473e:	84 1b       	sub	r24, r20
    4740:	95 0b       	sbc	r25, r21
    4742:	f9 01       	movw	r30, r18
    4744:	e7 59       	subi	r30, 0x97	; 151
    4746:	fd 4f       	sbci	r31, 0xFD	; 253
    4748:	91 83       	std	Z+1, r25	; 0x01
    474a:	80 83       	st	Z, r24
				//} else {	// ground
				//	proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx];
				//}
				if(proximityResult[currentProx>>1] < 0) {
    474c:	97 fd       	sbrc	r25, 7
    474e:	fe c2       	rjmp	.+1532   	; 0x4d4c <__vector_29+0x80a>
					proximityResult[currentProx>>1] = 0;
				}
				if(proximityResult[currentProx>>1] > 1024) {
    4750:	44 e0       	ldi	r20, 0x04	; 4
    4752:	81 30       	cpi	r24, 0x01	; 1
    4754:	94 07       	cpc	r25, r20
    4756:	24 f0       	brlt	.+8      	; 0x4760 <__vector_29+0x21e>
					proximityResult[currentProx>>1] = 1024;
    4758:	80 e0       	ldi	r24, 0x00	; 0
    475a:	94 e0       	ldi	r25, 0x04	; 4
    475c:	91 83       	std	Z+1, r25	; 0x01
    475e:	80 83       	st	Z, r24
				// 1) from 0 to PHASE1: y = x (where x = proximity value9
				// 2) from PHASE1 to PHASE2: y = x/2 + 30
				// 3) from PHASE2 to PHASE3: y = x/4 + 75
				// 4) from PHASE3 upwards: y = x/8 + 127.5
				// The linearized values are used for the obstacles avoidance.
				if(currentProx < 16) {	// only for proximity (not ground sensors)
    4760:	60 31       	cpi	r22, 0x10	; 16
    4762:	50 f4       	brcc	.+20     	; 0x4778 <__vector_29+0x236>
					
					if(proximityResult[currentProx>>1] < PHASE1) {
    4764:	8c 33       	cpi	r24, 0x3C	; 60
    4766:	91 05       	cpc	r25, r1
    4768:	0c f0       	brlt	.+2      	; 0x476c <__vector_29+0x22a>
    476a:	f5 c2       	rjmp	.+1514   	; 0x4d56 <__vector_29+0x814>

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];
    476c:	2f 52       	subi	r18, 0x2F	; 47
    476e:	3d 4f       	sbci	r19, 0xFD	; 253
    4770:	d9 01       	movw	r26, r18
    4772:	11 96       	adiw	r26, 0x01	; 1
    4774:	9c 93       	st	X, r25
    4776:	8e 93       	st	-X, r24
				}

				// the cliff avoidance behavior is inserted within this interrupt service routine in order to react
				// as fast as possible; the maximum speed usable with cliff avoidance is 30 in all kind of surface 
				// (apart from black ones) after calibration.
				if(cliffAvoidanceEnabled) {
    4778:	80 91 7d 04 	lds	r24, 0x047D
    477c:	88 23       	and	r24, r24
    477e:	09 f4       	brne	.+2      	; 0x4782 <__vector_29+0x240>
    4780:	12 c2       	rjmp	.+1060   	; 0x4ba6 <__vector_29+0x664>
					if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    4782:	80 91 79 02 	lds	r24, 0x0279
    4786:	90 91 7a 02 	lds	r25, 0x027A
    478a:	f1 e0       	ldi	r31, 0x01	; 1
    478c:	84 3a       	cpi	r24, 0xA4	; 164
    478e:	9f 07       	cpc	r25, r31
    4790:	cc f0       	brlt	.+50     	; 0x47c4 <__vector_29+0x282>
    4792:	80 91 7b 02 	lds	r24, 0x027B
    4796:	90 91 7c 02 	lds	r25, 0x027C
    479a:	21 e0       	ldi	r18, 0x01	; 1
    479c:	84 3a       	cpi	r24, 0xA4	; 164
    479e:	92 07       	cpc	r25, r18
    47a0:	8c f0       	brlt	.+34     	; 0x47c4 <__vector_29+0x282>
    47a2:	80 91 7d 02 	lds	r24, 0x027D
    47a6:	90 91 7e 02 	lds	r25, 0x027E
    47aa:	41 e0       	ldi	r20, 0x01	; 1
    47ac:	84 3a       	cpi	r24, 0xA4	; 164
    47ae:	94 07       	cpc	r25, r20
    47b0:	4c f0       	brlt	.+18     	; 0x47c4 <__vector_29+0x282>
    47b2:	80 91 7f 02 	lds	r24, 0x027F
    47b6:	90 91 80 02 	lds	r25, 0x0280
    47ba:	a1 e0       	ldi	r26, 0x01	; 1
    47bc:	84 3a       	cpi	r24, 0xA4	; 164
    47be:	9a 07       	cpc	r25, r26
    47c0:	0c f0       	brlt	.+2      	; 0x47c4 <__vector_29+0x282>
    47c2:	f1 c1       	rjmp	.+994    	; 0x4ba6 <__vector_29+0x664>
					//if(proximityResult[8]<(proximityOffset[8]>>1) || proximityResult[9]<(proximityOffset[9]>>1) || proximityResult[10]<(proximityOffset[10]>>1) || proximityResult[11]<(proximityOffset[11]>>1)) {
						cliffDetectedFlag = 1;
    47c4:	81 e0       	ldi	r24, 0x01	; 1
    47c6:	80 93 7e 04 	sts	0x047E, r24
						//LED_RED_ON;			
						// set resulting velocity to 0 and change the pwm registers directly to be able
						// to stop as fast as possible (the next pwm cycle)
						// left motor
						pwm_left = 0;
    47ca:	10 92 08 03 	sts	0x0308, r1
    47ce:	10 92 07 03 	sts	0x0307, r1
						OCR4A = 0;
    47d2:	10 92 a9 00 	sts	0x00A9, r1
    47d6:	10 92 a8 00 	sts	0x00A8, r1
						OCR4B = 0;
    47da:	10 92 ab 00 	sts	0x00AB, r1
    47de:	10 92 aa 00 	sts	0x00AA, r1
						// right motor
						pwm_right = 0;
    47e2:	10 92 06 03 	sts	0x0306, r1
    47e6:	10 92 05 03 	sts	0x0305, r1
						OCR3A = 0;
    47ea:	10 92 99 00 	sts	0x0099, r1
    47ee:	10 92 98 00 	sts	0x0098, r1
						OCR3B = 0;
    47f2:	10 92 9b 00 	sts	0x009B, r1
    47f6:	10 92 9a 00 	sts	0x009A, r1
				} else {
					cliffDetectedFlag = 0;
				}

			}			
			currentProx++;
    47fa:	6f 5f       	subi	r22, 0xFF	; 255
    47fc:	60 93 34 02 	sts	0x0234, r22
			if(currentProx > 23) {						// in total there are 8 proximity sensors and 4 ground sensors => 12 sensors
    4800:	68 31       	cpi	r22, 0x18	; 24
    4802:	08 f4       	brcc	.+2      	; 0x4806 <__vector_29+0x2c4>
    4804:	33 cf       	rjmp	.-410    	; 0x466c <__vector_29+0x12a>
				currentProx = 0;						// for each one there is a passive phase in which the ambient light is sampled,
    4806:	10 92 34 02 	sts	0x0234, r1
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
    480a:	81 e0       	ldi	r24, 0x01	; 1
    480c:	80 93 d0 02 	sts	0x02D0, r24
    4810:	2d cf       	rjmp	.-422    	; 0x466c <__vector_29+0x12a>
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    4812:	26 30       	cpi	r18, 0x06	; 6
    4814:	09 f0       	breq	.+2      	; 0x4818 <__vector_29+0x2d6>
    4816:	2a cf       	rjmp	.-428    	; 0x466c <__vector_29+0x12a>
		case SAVE_TO_PROX_IRCOMM:
			irCommProxValuesAdc[currentProx+irCommRxWindowSamples*8] = value;
    4818:	20 91 04 05 	lds	r18, 0x0504
    481c:	30 e0       	ldi	r19, 0x00	; 0
    481e:	40 91 34 02 	lds	r20, 0x0234
    4822:	22 0f       	add	r18, r18
    4824:	33 1f       	adc	r19, r19
    4826:	22 0f       	add	r18, r18
    4828:	33 1f       	adc	r19, r19
    482a:	22 0f       	add	r18, r18
    482c:	33 1f       	adc	r19, r19
    482e:	24 0f       	add	r18, r20
    4830:	31 1d       	adc	r19, r1
    4832:	22 0f       	add	r18, r18
    4834:	33 1f       	adc	r19, r19
    4836:	e0 91 6b 08 	lds	r30, 0x086B
    483a:	f0 91 6c 08 	lds	r31, 0x086C
    483e:	e2 0f       	add	r30, r18
    4840:	f3 1f       	adc	r31, r19
    4842:	91 83       	std	Z+1, r25	; 0x01
    4844:	80 83       	st	Z, r24
			// get the min and max values in the sampling window for all the sensors
			if(irCommMaxSensorValueAdc[currentProx] < value) {
    4846:	60 91 34 02 	lds	r22, 0x0234
    484a:	26 2f       	mov	r18, r22
    484c:	30 e0       	ldi	r19, 0x00	; 0
    484e:	22 0f       	add	r18, r18
    4850:	33 1f       	adc	r19, r19
    4852:	e0 91 39 0b 	lds	r30, 0x0B39
    4856:	f0 91 3a 0b 	lds	r31, 0x0B3A
    485a:	e2 0f       	add	r30, r18
    485c:	f3 1f       	adc	r31, r19
    485e:	40 81       	ld	r20, Z
    4860:	51 81       	ldd	r21, Z+1	; 0x01
    4862:	48 17       	cp	r20, r24
    4864:	59 07       	cpc	r21, r25
    4866:	40 f4       	brcc	.+16     	; 0x4878 <__vector_29+0x336>
				irCommMaxSensorValueAdc[currentProx] = value;
    4868:	91 83       	std	Z+1, r25	; 0x01
    486a:	80 83       	st	Z, r24
    486c:	60 91 34 02 	lds	r22, 0x0234
    4870:	26 2f       	mov	r18, r22
    4872:	30 e0       	ldi	r19, 0x00	; 0
    4874:	22 0f       	add	r18, r18
    4876:	33 1f       	adc	r19, r19
			}
			if(irCommMinSensorValueAdc[currentProx] > value) {
    4878:	e0 91 c9 05 	lds	r30, 0x05C9
    487c:	f0 91 ca 05 	lds	r31, 0x05CA
    4880:	e2 0f       	add	r30, r18
    4882:	f3 1f       	adc	r31, r19
    4884:	20 81       	ld	r18, Z
    4886:	31 81       	ldd	r19, Z+1	; 0x01
    4888:	82 17       	cp	r24, r18
    488a:	93 07       	cpc	r25, r19
    488c:	20 f4       	brcc	.+8      	; 0x4896 <__vector_29+0x354>
				irCommMinSensorValueAdc[currentProx] = value;
    488e:	91 83       	std	Z+1, r25	; 0x01
    4890:	80 83       	st	Z, r24
    4892:	60 91 34 02 	lds	r22, 0x0234
			}
			currentProx++;
    4896:	6f 5f       	subi	r22, 0xFF	; 255
    4898:	60 93 34 02 	sts	0x0234, r22
			break;
    489c:	e7 ce       	rjmp	.-562    	; 0x466c <__vector_29+0x12a>
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
		ADCSRB &= ~(1 << MUX5);
		ADMUX = 0x40 + currentAdChannel;
	} else {						// MUX5=1 + ADMUX=0..7 => adc channel=8..15
		ADCSRB |= (1 << MUX5);
    489e:	90 91 7b 00 	lds	r25, 0x007B
    48a2:	98 60       	ori	r25, 0x08	; 8
    48a4:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + (currentAdChannel-8);
    48a8:	90 91 33 02 	lds	r25, 0x0233
    48ac:	98 5c       	subi	r25, 0xC8	; 200
    48ae:	90 93 7c 00 	sts	0x007C, r25
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if((adcSamplingState==2) && (irCommMode==IRCOMM_MODE_SENSORS_SAMPLING)) {
    48b2:	82 30       	cpi	r24, 0x02	; 2
    48b4:	09 f0       	breq	.+2      	; 0x48b8 <__vector_29+0x376>
    48b6:	b5 ce       	rjmp	.-662    	; 0x4622 <__vector_29+0xe0>
    48b8:	80 91 d6 04 	lds	r24, 0x04D6
    48bc:	88 23       	and	r24, r24
    48be:	09 f0       	breq	.+2      	; 0x48c2 <__vector_29+0x380>
    48c0:	b0 ce       	rjmp	.-672    	; 0x4622 <__vector_29+0xe0>

		if(hardwareRevision == HW_REV_3_0) {
    48c2:	20 91 5f 04 	lds	r18, 0x045F
    48c6:	22 23       	and	r18, r18
    48c8:	39 f4       	brne	.+14     	; 0x48d8 <__vector_29+0x396>
			PORTJ &= 0xF0;
    48ca:	80 91 05 01 	lds	r24, 0x0105
    48ce:	80 7f       	andi	r24, 0xF0	; 240
    48d0:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    48d4:	12 b8       	out	0x02, r1	; 2
    48d6:	a5 ce       	rjmp	.-694    	; 0x4622 <__vector_29+0xe0>
			//#warning "turn off pulse with 0 (hw rev 3.0)"
		}

		if(hardwareRevision == HW_REV_3_0_1) {
    48d8:	21 30       	cpi	r18, 0x01	; 1
    48da:	19 f0       	breq	.+6      	; 0x48e2 <__vector_29+0x3a0>
			PORTJ = 0xFF;
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0.1)"
		}

		if(hardwareRevision == HW_REV_3_1) {
    48dc:	22 30       	cpi	r18, 0x02	; 2
    48de:	09 f0       	breq	.+2      	; 0x48e2 <__vector_29+0x3a0>
    48e0:	a0 ce       	rjmp	.-704    	; 0x4622 <__vector_29+0xe0>
			PORTJ = 0xFF;
    48e2:	8f ef       	ldi	r24, 0xFF	; 255
    48e4:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    48e8:	12 b8       	out	0x02, r1	; 2
    48ea:	9b ce       	rjmp	.-714    	; 0x4622 <__vector_29+0xe0>
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
    48ec:	90 91 03 05 	lds	r25, 0x0503
    48f0:	96 30       	cpi	r25, 0x06	; 6
    48f2:	09 f4       	brne	.+2      	; 0x48f6 <__vector_29+0x3b4>
    48f4:	43 c2       	rjmp	.+1158   	; 0x4d7c <__vector_29+0x83a>
    48f6:	97 30       	cpi	r25, 0x07	; 7
    48f8:	08 f0       	brcs	.+2      	; 0x48fc <__vector_29+0x3ba>
    48fa:	ce c0       	rjmp	.+412    	; 0x4a98 <__vector_29+0x556>
    48fc:	92 30       	cpi	r25, 0x02	; 2
    48fe:	09 f4       	brne	.+2      	; 0x4902 <__vector_29+0x3c0>
    4900:	a9 c2       	rjmp	.+1362   	; 0x4e54 <__vector_29+0x912>
    4902:	93 30       	cpi	r25, 0x03	; 3
    4904:	08 f4       	brcc	.+2      	; 0x4908 <__vector_29+0x3c6>
    4906:	6e c1       	rjmp	.+732    	; 0x4be4 <__vector_29+0x6a2>
    4908:	94 30       	cpi	r25, 0x04	; 4
    490a:	09 f4       	brne	.+2      	; 0x490e <__vector_29+0x3cc>
    490c:	d0 c2       	rjmp	.+1440   	; 0x4eae <__vector_29+0x96c>
    490e:	95 30       	cpi	r25, 0x05	; 5
    4910:	08 f4       	brcc	.+2      	; 0x4914 <__vector_29+0x3d2>
    4912:	bf c2       	rjmp	.+1406   	; 0x4e92 <__vector_29+0x950>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 5;
				break;

			case 5:
				currentAdChannel = currentProx+1;
    4914:	80 91 34 02 	lds	r24, 0x0234
    4918:	8f 5f       	subi	r24, 0xFF	; 255
    491a:	80 93 33 02 	sts	0x0233, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    491e:	86 e0       	ldi	r24, 0x06	; 6
    4920:	80 93 c9 02 	sts	0x02C9, r24
				irCommAdcRxState = 6;
    4924:	80 93 03 05 	sts	0x0503, r24
    4928:	80 91 ca 02 	lds	r24, 0x02CA
				break;
    492c:	68 ce       	rjmp	.-816    	; 0x45fe <__vector_29+0xbc>
			right_current_avg += value;
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
			break;

		case SAVE_TO_RIGHT_MOTOR_VEL:
			if(firstSampleRight > 0) {
    492e:	20 91 09 02 	lds	r18, 0x0209
    4932:	22 23       	and	r18, r18
    4934:	09 f4       	brne	.+2      	; 0x4938 <__vector_29+0x3f6>
    4936:	9a ce       	rjmp	.-716    	; 0x466c <__vector_29+0x12a>
			    // sometimes it was noticed that the velocity is sampled even if the pwm
			    // is in its active phase; as a workaround simply skip the samples in these
			    // cases
				if(((PINE & _BV(PE3))>>3) || ((PINE & _BV(PE4))>>4)) {  // if active phase for either forward or backward direction
    4938:	63 99       	sbic	0x0c, 3	; 12
    493a:	98 ce       	rjmp	.-720    	; 0x466c <__vector_29+0x12a>
    493c:	64 99       	sbic	0x0c, 4	; 12
    493e:	96 ce       	rjmp	.-724    	; 0x466c <__vector_29+0x12a>
					//LED_RED_ON;
					break;
				}
				firstSampleRight++;
    4940:	42 2f       	mov	r20, r18
    4942:	4f 5f       	subi	r20, 0xFF	; 255
    4944:	40 93 09 02 	sts	0x0209, r20
				if(firstSampleRight > 4) {				// to skip undesired samples (3 samples skipped) in which there could be glitches
    4948:	45 30       	cpi	r20, 0x05	; 5
    494a:	08 f4       	brcc	.+2      	; 0x494e <__vector_29+0x40c>
    494c:	8f ce       	rjmp	.-738    	; 0x466c <__vector_29+0x12a>
					if(pwm_right != 0) {
    494e:	20 91 05 03 	lds	r18, 0x0305
    4952:	30 91 06 03 	lds	r19, 0x0306
    4956:	21 15       	cp	r18, r1
    4958:	31 05       	cpc	r19, r1
    495a:	51 f0       	breq	.+20     	; 0x4970 <__vector_29+0x42e>
						right_vel_sum += value;
    495c:	20 91 ff 02 	lds	r18, 0x02FF
    4960:	30 91 00 03 	lds	r19, 0x0300
    4964:	28 0f       	add	r18, r24
    4966:	39 1f       	adc	r19, r25
    4968:	30 93 00 03 	sts	0x0300, r19
    496c:	20 93 ff 02 	sts	0x02FF, r18
					}
					if(firstSampleRight==8) {			// number of samples to take for the speed computation (average of 4 samples)
    4970:	48 30       	cpi	r20, 0x08	; 8
    4972:	09 f0       	breq	.+2      	; 0x4976 <__vector_29+0x434>
    4974:	7b ce       	rjmp	.-778    	; 0x466c <__vector_29+0x12a>
						firstSampleRight = 0;
    4976:	10 92 09 02 	sts	0x0209, r1
						compute_right_vel = 1;
    497a:	81 e0       	ldi	r24, 0x01	; 1
    497c:	80 93 08 02 	sts	0x0208, r24
    4980:	75 ce       	rjmp	.-790    	; 0x466c <__vector_29+0x12a>
			left_current_avg += value;
			left_current_avg = left_current_avg >> 1;
			break;

		case SAVE_TO_LEFT_MOTOR_VEL:
			if(firstSampleLeft > 0) {
    4982:	20 91 0a 02 	lds	r18, 0x020A
    4986:	22 23       	and	r18, r18
    4988:	09 f4       	brne	.+2      	; 0x498c <__vector_29+0x44a>
    498a:	70 ce       	rjmp	.-800    	; 0x466c <__vector_29+0x12a>
				if(((PINH & _BV(PH3))>>3) || ((PINH & _BV(PH4))>>4)) {
    498c:	30 91 00 01 	lds	r19, 0x0100
    4990:	33 fd       	sbrc	r19, 3
    4992:	6c ce       	rjmp	.-808    	; 0x466c <__vector_29+0x12a>
    4994:	30 91 00 01 	lds	r19, 0x0100
    4998:	34 fd       	sbrc	r19, 4
    499a:	68 ce       	rjmp	.-816    	; 0x466c <__vector_29+0x12a>
					//LED_RED_ON;
					break;
				}
				firstSampleLeft++;
    499c:	42 2f       	mov	r20, r18
    499e:	4f 5f       	subi	r20, 0xFF	; 255
    49a0:	40 93 0a 02 	sts	0x020A, r20
				if(firstSampleLeft > 4) {
    49a4:	45 30       	cpi	r20, 0x05	; 5
    49a6:	08 f4       	brcc	.+2      	; 0x49aa <__vector_29+0x468>
    49a8:	61 ce       	rjmp	.-830    	; 0x466c <__vector_29+0x12a>
					if(pwm_left != 0) {
    49aa:	20 91 07 03 	lds	r18, 0x0307
    49ae:	30 91 08 03 	lds	r19, 0x0308
    49b2:	21 15       	cp	r18, r1
    49b4:	31 05       	cpc	r19, r1
    49b6:	51 f0       	breq	.+20     	; 0x49cc <__vector_29+0x48a>
						left_vel_sum += value;
    49b8:	20 91 fd 02 	lds	r18, 0x02FD
    49bc:	30 91 fe 02 	lds	r19, 0x02FE
    49c0:	28 0f       	add	r18, r24
    49c2:	39 1f       	adc	r19, r25
    49c4:	30 93 fe 02 	sts	0x02FE, r19
    49c8:	20 93 fd 02 	sts	0x02FD, r18
					}
					if(firstSampleLeft==8) {
    49cc:	48 30       	cpi	r20, 0x08	; 8
    49ce:	09 f0       	breq	.+2      	; 0x49d2 <__vector_29+0x490>
    49d0:	4d ce       	rjmp	.-870    	; 0x466c <__vector_29+0x12a>
						firstSampleLeft = 0;
    49d2:	10 92 0a 02 	sts	0x020A, r1
						compute_left_vel = 1;
    49d6:	81 e0       	ldi	r24, 0x01	; 1
    49d8:	80 93 07 02 	sts	0x0207, r24
    49dc:	47 ce       	rjmp	.-882    	; 0x466c <__vector_29+0x12a>
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
		switch(irCommAdcTxState) {
    49de:	83 30       	cpi	r24, 0x03	; 3
    49e0:	09 f4       	brne	.+2      	; 0x49e4 <__vector_29+0x4a2>
    49e2:	7c c0       	rjmp	.+248    	; 0x4adc <__vector_29+0x59a>
    49e4:	84 30       	cpi	r24, 0x04	; 4
    49e6:	09 f0       	breq	.+2      	; 0x49ea <__vector_29+0x4a8>
    49e8:	08 ce       	rjmp	.-1008   	; 0x45fa <__vector_29+0xb8>
				}
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ2;
				break;

			case IRCOMM_TX_ADC_TRANSMISSION_SEQ2:
				irCommTxDurationCycle++;
    49ea:	20 91 34 05 	lds	r18, 0x0534
    49ee:	2f 5f       	subi	r18, 0xFF	; 255
    49f0:	20 93 34 05 	sts	0x0534, r18
				if(irCommTxDurationCycle == irCommTxDuration) {
    49f4:	30 e0       	ldi	r19, 0x00	; 0
    49f6:	80 91 30 05 	lds	r24, 0x0530
    49fa:	90 91 31 05 	lds	r25, 0x0531
    49fe:	28 17       	cp	r18, r24
    4a00:	39 07       	cpc	r19, r25
    4a02:	09 f4       	brne	.+2      	; 0x4a06 <__vector_29+0x4c4>
    4a04:	08 c1       	rjmp	.+528    	; 0x4c16 <__vector_29+0x6d4>
						irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;
						adcSaveDataTo = SKIP_SAMPLE;
						break;
					}
				}
				currentAdChannel = currentMotLeftChannel;
    4a06:	80 91 35 02 	lds	r24, 0x0235
    4a0a:	80 93 33 02 	sts	0x0233, r24
				leftChannelPhase = leftMotorPhase;
    4a0e:	80 91 38 02 	lds	r24, 0x0238
    4a12:	80 93 cc 02 	sts	0x02CC, r24
				if(rightChannelPhase == ACTIVE_PHASE) {
    4a16:	80 91 cb 02 	lds	r24, 0x02CB
    4a1a:	88 23       	and	r24, r24
    4a1c:	09 f4       	brne	.+2      	; 0x4a20 <__vector_29+0x4de>
    4a1e:	cf c0       	rjmp	.+414    	; 0x4bbe <__vector_29+0x67c>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    4a20:	81 30       	cpi	r24, 0x01	; 1
    4a22:	09 f4       	brne	.+2      	; 0x4a26 <__vector_29+0x4e4>
    4a24:	b5 c2       	rjmp	.+1386   	; 0x4f90 <__vector_29+0xa4e>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4a26:	85 e0       	ldi	r24, 0x05	; 5
    4a28:	80 93 c9 02 	sts	0x02C9, r24
				}
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ1;
    4a2c:	83 e0       	ldi	r24, 0x03	; 3
    4a2e:	80 93 26 05 	sts	0x0526, r24
    4a32:	80 91 ca 02 	lds	r24, 0x02CA
				break;
    4a36:	e3 cd       	rjmp	.-1082   	; 0x45fe <__vector_29+0xbc>
				adcSaveDataTo = SKIP_SAMPLE;
				break;

		}
	} else if(irCommMode==IRCOMM_MODE_SENSORS_SAMPLING) {
		switch(adcSamplingState) {
    4a38:	83 30       	cpi	r24, 0x03	; 3
    4a3a:	09 f4       	brne	.+2      	; 0x4a3e <__vector_29+0x4fc>
    4a3c:	37 c1       	rjmp	.+622    	; 0x4cac <__vector_29+0x76a>
    4a3e:	84 30       	cpi	r24, 0x04	; 4
    4a40:	09 f0       	breq	.+2      	; 0x4a44 <__vector_29+0x502>
    4a42:	dd cd       	rjmp	.-1094   	; 0x45fe <__vector_29+0xbc>
				}
				adcSamplingState = 4;
				break;

			case 4:	// right motor
				currentAdChannel = currentMotRightChannel;
    4a44:	90 91 36 02 	lds	r25, 0x0236
    4a48:	90 93 33 02 	sts	0x0233, r25
				rightChannelPhase = rightMotorPhase;
    4a4c:	90 91 37 02 	lds	r25, 0x0237
    4a50:	90 93 cb 02 	sts	0x02CB, r25
				if(leftChannelPhase == ACTIVE_PHASE) {
    4a54:	90 91 cc 02 	lds	r25, 0x02CC
    4a58:	99 23       	and	r25, r25
    4a5a:	09 f0       	breq	.+2      	; 0x4a5e <__vector_29+0x51c>
    4a5c:	6a c1       	rjmp	.+724    	; 0x4d32 <__vector_29+0x7f0>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    4a5e:	83 e0       	ldi	r24, 0x03	; 3
    4a60:	80 93 c9 02 	sts	0x02C9, r24
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 0;
    4a64:	10 92 ca 02 	sts	0x02CA, r1

				if(currentProx==14 && measBattery==1) {
    4a68:	60 91 34 02 	lds	r22, 0x0234
    4a6c:	6e 30       	cpi	r22, 0x0E	; 14
    4a6e:	09 f4       	brne	.+2      	; 0x4a72 <__vector_29+0x530>
    4a70:	2c c2       	rjmp	.+1112   	; 0x4eca <__vector_29+0x988>
					measBattery=2;
					SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
				}

				// turn on the IR pulses for the proximities only in their active phases
				if(currentProx & 0x01) {
    4a72:	86 2f       	mov	r24, r22
    4a74:	90 e0       	ldi	r25, 0x00	; 0
    4a76:	60 ff       	sbrs	r22, 0
    4a78:	c0 cd       	rjmp	.-1152   	; 0x45fa <__vector_29+0xb8>
					if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
    4a7a:	60 31       	cpi	r22, 0x10	; 16
    4a7c:	08 f0       	brcs	.+2      	; 0x4a80 <__vector_29+0x53e>
    4a7e:	33 c2       	rjmp	.+1126   	; 0x4ee6 <__vector_29+0x9a4>
											// PORTA for proximity sensors, PORTJ for ground sensors
						PORTA = (1 << (currentProx>>1));	// pulse on
    4a80:	66 95       	lsr	r22
    4a82:	81 e0       	ldi	r24, 0x01	; 1
    4a84:	90 e0       	ldi	r25, 0x00	; 0
    4a86:	02 c0       	rjmp	.+4      	; 0x4a8c <__vector_29+0x54a>
    4a88:	88 0f       	add	r24, r24
    4a8a:	99 1f       	adc	r25, r25
    4a8c:	6a 95       	dec	r22
    4a8e:	e2 f7       	brpl	.-8      	; 0x4a88 <__vector_29+0x546>
    4a90:	82 b9       	out	0x02, r24	; 2
    4a92:	80 91 ca 02 	lds	r24, 0x02CA
    4a96:	b3 cd       	rjmp	.-1178   	; 0x45fe <__vector_29+0xbc>
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
    4a98:	99 30       	cpi	r25, 0x09	; 9
    4a9a:	09 f4       	brne	.+2      	; 0x4a9e <__vector_29+0x55c>
    4a9c:	c3 c1       	rjmp	.+902    	; 0x4e24 <__vector_29+0x8e2>
    4a9e:	9a 30       	cpi	r25, 0x0A	; 10
    4aa0:	08 f0       	brcs	.+2      	; 0x4aa4 <__vector_29+0x562>
    4aa2:	91 c0       	rjmp	.+290    	; 0x4bc6 <__vector_29+0x684>
    4aa4:	97 30       	cpi	r25, 0x07	; 7
    4aa6:	09 f4       	brne	.+2      	; 0x4aaa <__vector_29+0x568>
    4aa8:	e3 c1       	rjmp	.+966    	; 0x4e70 <__vector_29+0x92e>
    4aaa:	98 30       	cpi	r25, 0x08	; 8
    4aac:	09 f0       	breq	.+2      	; 0x4ab0 <__vector_29+0x56e>
    4aae:	a5 cd       	rjmp	.-1206   	; 0x45fa <__vector_29+0xb8>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 8;
				break;

			case 8:
				currentAdChannel = currentMotRightChannel;
    4ab0:	80 91 36 02 	lds	r24, 0x0236
    4ab4:	80 93 33 02 	sts	0x0233, r24
				rightChannelPhase = rightMotorPhase;
    4ab8:	80 91 37 02 	lds	r24, 0x0237
    4abc:	80 93 cb 02 	sts	0x02CB, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    4ac0:	80 91 cc 02 	lds	r24, 0x02CC
    4ac4:	88 23       	and	r24, r24
    4ac6:	09 f0       	breq	.+2      	; 0x4aca <__vector_29+0x588>
    4ac8:	67 c2       	rjmp	.+1230   	; 0x4f98 <__vector_29+0xa56>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    4aca:	83 e0       	ldi	r24, 0x03	; 3
    4acc:	80 93 c9 02 	sts	0x02C9, r24
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				irCommAdcRxState = 9;
    4ad0:	89 e0       	ldi	r24, 0x09	; 9
    4ad2:	80 93 03 05 	sts	0x0503, r24
    4ad6:	80 91 ca 02 	lds	r24, 0x02CA
				break;
    4ada:	91 cd       	rjmp	.-1246   	; 0x45fe <__vector_29+0xbc>

			case IRCOMM_TX_ADC_WAIT_PREPARATION:
				break;

			case IRCOMM_TX_ADC_TRANSMISSION_SEQ1:
				irCommTxDurationCycle++;
    4adc:	20 91 34 05 	lds	r18, 0x0534
    4ae0:	2f 5f       	subi	r18, 0xFF	; 255
    4ae2:	20 93 34 05 	sts	0x0534, r18
				if(irCommTxDurationCycle == irCommTxDuration) {
    4ae6:	30 e0       	ldi	r19, 0x00	; 0
    4ae8:	80 91 30 05 	lds	r24, 0x0530
    4aec:	90 91 31 05 	lds	r25, 0x0531
    4af0:	28 17       	cp	r18, r24
    4af2:	39 07       	cpc	r19, r25
    4af4:	09 f4       	brne	.+2      	; 0x4af8 <__vector_29+0x5b6>
    4af6:	be c0       	rjmp	.+380    	; 0x4c74 <__vector_29+0x732>
						irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;						
						adcSaveDataTo = SKIP_SAMPLE;
						break;
					}
				}	
				currentAdChannel = currentMotRightChannel;
    4af8:	80 91 36 02 	lds	r24, 0x0236
    4afc:	80 93 33 02 	sts	0x0233, r24
				rightChannelPhase = rightMotorPhase;
    4b00:	80 91 37 02 	lds	r24, 0x0237
    4b04:	80 93 cb 02 	sts	0x02CB, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    4b08:	80 91 cc 02 	lds	r24, 0x02CC
    4b0c:	88 23       	and	r24, r24
    4b0e:	09 f4       	brne	.+2      	; 0x4b12 <__vector_29+0x5d0>
    4b10:	52 c0       	rjmp	.+164    	; 0x4bb6 <__vector_29+0x674>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    4b12:	81 30       	cpi	r24, 0x01	; 1
    4b14:	09 f4       	brne	.+2      	; 0x4b18 <__vector_29+0x5d6>
    4b16:	38 c2       	rjmp	.+1136   	; 0x4f88 <__vector_29+0xa46>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4b18:	85 e0       	ldi	r24, 0x05	; 5
    4b1a:	80 93 c9 02 	sts	0x02C9, r24
				}
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ2;
    4b1e:	84 e0       	ldi	r24, 0x04	; 4
    4b20:	80 93 26 05 	sts	0x0526, r24
    4b24:	80 91 ca 02 	lds	r24, 0x02CA
				break;
    4b28:	6a cd       	rjmp	.-1324   	; 0x45fe <__vector_29+0xbc>
	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
		switch(irCommAdcTxState) {
			case IRCOMM_TX_ADC_TURN_OFF_SENSORS:
				// turn off all proximity
				if(hardwareRevision == HW_REV_3_0) {
    4b2a:	20 91 5f 04 	lds	r18, 0x045F
    4b2e:	22 23       	and	r18, r18
    4b30:	01 f5       	brne	.+64     	; 0x4b72 <__vector_29+0x630>
					PORTJ &= 0xF0;	// ground
    4b32:	80 91 05 01 	lds	r24, 0x0105
    4b36:	80 7f       	andi	r24, 0xF0	; 240
    4b38:	80 93 05 01 	sts	0x0105, r24
					PORTA = 0x00;	// proximity
    4b3c:	12 b8       	out	0x02, r1	; 2

				if(hardwareRevision == HW_REV_3_1) {
					PORTJ = 0xFF;	// ground
					PORTA = 0x00;	// proximtiy
				}
				currentAdChannel = currentMotLeftChannel;
    4b3e:	80 91 35 02 	lds	r24, 0x0235
    4b42:	80 93 33 02 	sts	0x0233, r24
				leftChannelPhase = leftMotorPhase;
    4b46:	80 91 38 02 	lds	r24, 0x0238
    4b4a:	80 93 cc 02 	sts	0x02CC, r24
				adcSaveDataTo = SKIP_SAMPLE;				
    4b4e:	85 e0       	ldi	r24, 0x05	; 5
    4b50:	80 93 c9 02 	sts	0x02C9, r24
				irCommState = IRCOMM_TX_PREPARE_TRANSMISSION;
    4b54:	80 93 d7 04 	sts	0x04D7, r24
				irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;
    4b58:	82 e0       	ldi	r24, 0x02	; 2
    4b5a:	80 93 26 05 	sts	0x0526, r24
				if(irCommTxSensorGroup==0) {
    4b5e:	80 91 36 05 	lds	r24, 0x0536
    4b62:	88 23       	and	r24, r24
    4b64:	19 f5       	brne	.+70     	; 0x4bac <__vector_29+0x66a>
					irCommTxSensorGroup = 1;
    4b66:	81 e0       	ldi	r24, 0x01	; 1
    4b68:	80 93 36 05 	sts	0x0536, r24
    4b6c:	80 91 ca 02 	lds	r24, 0x02CA
    4b70:	46 cd       	rjmp	.-1396   	; 0x45fe <__vector_29+0xbc>
				if(hardwareRevision == HW_REV_3_0) {
					PORTJ &= 0xF0;	// ground
					PORTA = 0x00;	// proximity
				}

				if(hardwareRevision == HW_REV_3_0_1) {
    4b72:	21 30       	cpi	r18, 0x01	; 1
    4b74:	11 f0       	breq	.+4      	; 0x4b7a <__vector_29+0x638>
					PORTJ = 0xFF;	// ground
					PORTA = 0x00;	// proximity
				}

				if(hardwareRevision == HW_REV_3_1) {
    4b76:	22 30       	cpi	r18, 0x02	; 2
    4b78:	11 f7       	brne	.-60     	; 0x4b3e <__vector_29+0x5fc>
					PORTJ = 0xFF;	// ground
    4b7a:	8f ef       	ldi	r24, 0xFF	; 255
    4b7c:	80 93 05 01 	sts	0x0105, r24
					PORTA = 0x00;	// proximtiy
    4b80:	12 b8       	out	0x02, r1	; 2
    4b82:	dd cf       	rjmp	.-70     	; 0x4b3e <__vector_29+0x5fc>
		}
	} else if(irCommMode==IRCOMM_MODE_SENSORS_SAMPLING) {
		switch(adcSamplingState) {

			case 0:	// proximity
				currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
    4b84:	80 91 34 02 	lds	r24, 0x0234
    4b88:	86 95       	lsr	r24
    4b8a:	80 93 33 02 	sts	0x0233, r24
																// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
				if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
    4b8e:	80 91 cb 02 	lds	r24, 0x02CB
    4b92:	88 23       	and	r24, r24
    4b94:	09 f0       	breq	.+2      	; 0x4b98 <__vector_29+0x656>
    4b96:	bf c0       	rjmp	.+382    	; 0x4d16 <__vector_29+0x7d4>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    4b98:	81 e0       	ldi	r24, 0x01	; 1
    4b9a:	80 93 c9 02 	sts	0x02C9, r24
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 1;
    4b9e:	81 e0       	ldi	r24, 0x01	; 1
    4ba0:	80 93 ca 02 	sts	0x02CA, r24
				break;
    4ba4:	2c cd       	rjmp	.-1448   	; 0x45fe <__vector_29+0xbc>
					} else {
						cliffDetectedFlag = 0;
						//LED_RED_OFF;
					}
				} else {
					cliffDetectedFlag = 0;
    4ba6:	10 92 7e 04 	sts	0x047E, r1
    4baa:	27 ce       	rjmp	.-946    	; 0x47fa <__vector_29+0x2b8>
				irCommState = IRCOMM_TX_PREPARE_TRANSMISSION;
				irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;
				if(irCommTxSensorGroup==0) {
					irCommTxSensorGroup = 1;
				} else {
					irCommTxSensorGroup = 0;
    4bac:	10 92 36 05 	sts	0x0536, r1
    4bb0:	80 91 ca 02 	lds	r24, 0x02CA
    4bb4:	24 cd       	rjmp	.-1464   	; 0x45fe <__vector_29+0xbc>
					}
				}	
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    4bb6:	83 e0       	ldi	r24, 0x03	; 3
    4bb8:	80 93 c9 02 	sts	0x02C9, r24
    4bbc:	b0 cf       	rjmp	.-160    	; 0x4b1e <__vector_29+0x5dc>
					}
				}
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    4bbe:	81 e0       	ldi	r24, 0x01	; 1
    4bc0:	80 93 c9 02 	sts	0x02C9, r24
    4bc4:	33 cf       	rjmp	.-410    	; 0x4a2c <__vector_29+0x4ea>
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
    4bc6:	9b 30       	cpi	r25, 0x0B	; 11
    4bc8:	09 f4       	brne	.+2      	; 0x4bcc <__vector_29+0x68a>
    4bca:	0f c1       	rjmp	.+542    	; 0x4dea <__vector_29+0x8a8>
    4bcc:	9b 30       	cpi	r25, 0x0B	; 11
    4bce:	08 f4       	brcc	.+2      	; 0x4bd2 <__vector_29+0x690>
    4bd0:	e2 c0       	rjmp	.+452    	; 0x4d96 <__vector_29+0x854>
    4bd2:	9c 30       	cpi	r25, 0x0C	; 12
    4bd4:	09 f0       	breq	.+2      	; 0x4bd8 <__vector_29+0x696>
    4bd6:	11 cd       	rjmp	.-1502   	; 0x45fa <__vector_29+0xb8>
				}
				irCommAdcRxState = 0;
				break;

			case 12:
				adcSaveDataTo = SKIP_SAMPLE;
    4bd8:	85 e0       	ldi	r24, 0x05	; 5
    4bda:	80 93 c9 02 	sts	0x02C9, r24
    4bde:	80 91 ca 02 	lds	r24, 0x02CA
				break;
    4be2:	0d cd       	rjmp	.-1510   	; 0x45fe <__vector_29+0xbc>
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
    4be4:	99 23       	and	r25, r25
    4be6:	09 f4       	brne	.+2      	; 0x4bea <__vector_29+0x6a8>
    4be8:	11 c1       	rjmp	.+546    	; 0x4e0c <__vector_29+0x8ca>
    4bea:	91 30       	cpi	r25, 0x01	; 1
    4bec:	09 f0       	breq	.+2      	; 0x4bf0 <__vector_29+0x6ae>
    4bee:	05 cd       	rjmp	.-1526   	; 0x45fa <__vector_29+0xb8>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 1;
				break;

			case 1:
				currentAdChannel = currentProx+1;
    4bf0:	80 91 34 02 	lds	r24, 0x0234
    4bf4:	8f 5f       	subi	r24, 0xFF	; 255
    4bf6:	80 93 33 02 	sts	0x0233, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    4bfa:	86 e0       	ldi	r24, 0x06	; 6
    4bfc:	80 93 c9 02 	sts	0x02C9, r24
				irCommAdcRxState = 2;
    4c00:	82 e0       	ldi	r24, 0x02	; 2
    4c02:	80 93 03 05 	sts	0x0503, r24
    4c06:	80 91 ca 02 	lds	r24, 0x02CA
				break;
    4c0a:	f9 cc       	rjmp	.-1550   	; 0x45fe <__vector_29+0xbc>
					irCommMode = IRCOMM_MODE_RECEIVE;					
				}
				if(irCommEnabled==IRCOMM_MODE_TRANSMIT && currentProx==23) {
					irCommMode = IRCOMM_MODE_TRANSMIT;
					if(irCommTxByteEnqueued==1) {
						irCommAdcTxState = IRCOMM_TX_ADC_TURN_OFF_SENSORS;
    4c0c:	80 93 26 05 	sts	0x0526, r24
    4c10:	80 91 ca 02 	lds	r24, 0x02CA
    4c14:	f4 cc       	rjmp	.-1560   	; 0x45fe <__vector_29+0xbc>
				break;

			case IRCOMM_TX_ADC_TRANSMISSION_SEQ2:
				irCommTxDurationCycle++;
				if(irCommTxDurationCycle == irCommTxDuration) {
					irCommTxDurationCycle = 0;
    4c16:	10 92 34 05 	sts	0x0534, r1
					if(irCommTxPulseState == 0) {
    4c1a:	80 91 2f 05 	lds	r24, 0x052F
    4c1e:	88 23       	and	r24, r24
    4c20:	09 f0       	breq	.+2      	; 0x4c24 <__vector_29+0x6e2>
    4c22:	a7 c1       	rjmp	.+846    	; 0x4f72 <__vector_29+0xa30>
						irCommTxPulseState = 1;
    4c24:	81 e0       	ldi	r24, 0x01	; 1
    4c26:	80 93 2f 05 	sts	0x052F, r24
						//PORTA = 0xFF;
						//PORTA = 0x01;
						//PORTA = irCommTxSensorMask;
						if(irCommTxSensorGroup==0) {
    4c2a:	80 91 36 05 	lds	r24, 0x0536
    4c2e:	88 23       	and	r24, r24
    4c30:	09 f0       	breq	.+2      	; 0x4c34 <__vector_29+0x6f2>
    4c32:	e2 c1       	rjmp	.+964    	; 0x4ff8 <__vector_29+0xab6>
							PORTA = 0xAA;
    4c34:	8a ea       	ldi	r24, 0xAA	; 170
    4c36:	82 b9       	out	0x02, r24	; 2
						}
					} else {
						irCommTxPulseState = 0;
						PORTA = 0x00;
					}
					irCommTxSwitchCounter++;
    4c38:	80 91 33 05 	lds	r24, 0x0533
    4c3c:	8f 5f       	subi	r24, 0xFF	; 255
    4c3e:	80 93 33 05 	sts	0x0533, r24
					if(irCommTxSwitchCounter == irCommTxSwitchCount) {
    4c42:	90 91 32 05 	lds	r25, 0x0532
    4c46:	89 17       	cp	r24, r25
    4c48:	09 f0       	breq	.+2      	; 0x4c4c <__vector_29+0x70a>
    4c4a:	dd ce       	rjmp	.-582    	; 0x4a06 <__vector_29+0x4c4>
						irCommTxBitCount++;
    4c4c:	80 91 2e 05 	lds	r24, 0x052E
    4c50:	8f 5f       	subi	r24, 0xFF	; 255
    4c52:	80 93 2e 05 	sts	0x052E, r24
						if(irCommTxBitCount==12) {
    4c56:	8c 30       	cpi	r24, 0x0C	; 12
    4c58:	09 f4       	brne	.+2      	; 0x4c5c <__vector_29+0x71a>
    4c5a:	5b c2       	rjmp	.+1206   	; 0x5112 <__vector_29+0xbd0>
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
							irCommInitReceiver();
							PORTA = 0x00;
							irCommTxLastTransmissionTime = getTime100MicroSec();
						} else {
							irCommState = IRCOMM_TX_COMPUTE_TIMINGS;
    4c5c:	82 e0       	ldi	r24, 0x02	; 2
    4c5e:	80 93 d7 04 	sts	0x04D7, r24
						}
						irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;
    4c62:	82 e0       	ldi	r24, 0x02	; 2
    4c64:	80 93 26 05 	sts	0x0526, r24
						adcSaveDataTo = SKIP_SAMPLE;
    4c68:	85 e0       	ldi	r24, 0x05	; 5
    4c6a:	80 93 c9 02 	sts	0x02C9, r24
    4c6e:	80 91 ca 02 	lds	r24, 0x02CA
						break;
    4c72:	c5 cc       	rjmp	.-1654   	; 0x45fe <__vector_29+0xbc>
				break;

			case IRCOMM_TX_ADC_TRANSMISSION_SEQ1:
				irCommTxDurationCycle++;
				if(irCommTxDurationCycle == irCommTxDuration) {
					irCommTxDurationCycle = 0;
    4c74:	10 92 34 05 	sts	0x0534, r1
					if(irCommTxPulseState == 0) {
    4c78:	80 91 2f 05 	lds	r24, 0x052F
    4c7c:	88 23       	and	r24, r24
    4c7e:	09 f0       	breq	.+2      	; 0x4c82 <__vector_29+0x740>
    4c80:	74 c1       	rjmp	.+744    	; 0x4f6a <__vector_29+0xa28>
						irCommTxPulseState = 1;
    4c82:	81 e0       	ldi	r24, 0x01	; 1
    4c84:	80 93 2f 05 	sts	0x052F, r24
						//PORTA = 0xFF;
						//PORTA = 0x01;
						//PORTA = irCommTxSensorMask;
						if(irCommTxSensorGroup==0) {
    4c88:	80 91 36 05 	lds	r24, 0x0536
    4c8c:	88 23       	and	r24, r24
    4c8e:	09 f0       	breq	.+2      	; 0x4c92 <__vector_29+0x750>
    4c90:	b0 c1       	rjmp	.+864    	; 0x4ff2 <__vector_29+0xab0>
							PORTA = 0xAA;
    4c92:	8a ea       	ldi	r24, 0xAA	; 170
    4c94:	82 b9       	out	0x02, r24	; 2
						}
					} else {
						irCommTxPulseState = 0;
						PORTA = 0x00;
					}
					irCommTxSwitchCounter++;
    4c96:	80 91 33 05 	lds	r24, 0x0533
    4c9a:	8f 5f       	subi	r24, 0xFF	; 255
    4c9c:	80 93 33 05 	sts	0x0533, r24
					if(irCommTxSwitchCounter == irCommTxSwitchCount) {
    4ca0:	90 91 32 05 	lds	r25, 0x0532
    4ca4:	89 17       	cp	r24, r25
    4ca6:	09 f0       	breq	.+2      	; 0x4caa <__vector_29+0x768>
    4ca8:	27 cf       	rjmp	.-434    	; 0x4af8 <__vector_29+0x5b6>
    4caa:	d0 cf       	rjmp	.-96     	; 0x4c4c <__vector_29+0x70a>
				}
				adcSamplingState = 3;
				break;

			case 3:	// left motor
				currentAdChannel = currentMotLeftChannel;
    4cac:	80 91 35 02 	lds	r24, 0x0235
    4cb0:	80 93 33 02 	sts	0x0233, r24
				leftChannelPhase = leftMotorPhase;
    4cb4:	80 91 38 02 	lds	r24, 0x0238
    4cb8:	80 93 cc 02 	sts	0x02CC, r24
				if(rightChannelPhase == ACTIVE_PHASE) {
    4cbc:	80 91 cb 02 	lds	r24, 0x02CB
    4cc0:	88 23       	and	r24, r24
    4cc2:	e9 f5       	brne	.+122    	; 0x4d3e <__vector_29+0x7fc>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    4cc4:	81 e0       	ldi	r24, 0x01	; 1
    4cc6:	80 93 c9 02 	sts	0x02C9, r24
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 4;
    4cca:	84 e0       	ldi	r24, 0x04	; 4
    4ccc:	80 93 ca 02 	sts	0x02CA, r24
				break;
    4cd0:	96 cc       	rjmp	.-1748   	; 0x45fe <__vector_29+0xbc>
					}
				}
				break;

			case 2:	// right motor
				currentAdChannel = currentMotRightChannel;
    4cd2:	80 91 36 02 	lds	r24, 0x0236
    4cd6:	80 93 33 02 	sts	0x0233, r24
				rightChannelPhase = rightMotorPhase;
    4cda:	80 91 37 02 	lds	r24, 0x0237
    4cde:	80 93 cb 02 	sts	0x02CB, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    4ce2:	80 91 cc 02 	lds	r24, 0x02CC
    4ce6:	88 23       	and	r24, r24
    4ce8:	e9 f4       	brne	.+58     	; 0x4d24 <__vector_29+0x7e2>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    4cea:	83 e0       	ldi	r24, 0x03	; 3
    4cec:	80 93 c9 02 	sts	0x02C9, r24
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 3;
    4cf0:	83 e0       	ldi	r24, 0x03	; 3
    4cf2:	80 93 ca 02 	sts	0x02CA, r24
				break;
    4cf6:	83 cc       	rjmp	.-1786   	; 0x45fe <__vector_29+0xbc>
			}
			currentProx++;
			break;

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    4cf8:	20 91 cf 02 	lds	r18, 0x02CF
    4cfc:	22 30       	cpi	r18, 0x02	; 2
    4cfe:	09 f0       	breq	.+2      	; 0x4d02 <__vector_29+0x7c0>
    4d00:	f9 cc       	rjmp	.-1550   	; 0x46f4 <__vector_29+0x1b2>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
    4d02:	90 93 ce 02 	sts	0x02CE, r25
    4d06:	80 93 cd 02 	sts	0x02CD, r24
				measBattery = 0;
    4d0a:	10 92 cf 02 	sts	0x02CF, r1
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
    4d0e:	46 98       	cbi	0x08, 6	; 8
    4d10:	2e e0       	ldi	r18, 0x0E	; 14
    4d12:	30 e0       	ldi	r19, 0x00	; 0
    4d14:	f8 cc       	rjmp	.-1552   	; 0x4706 <__vector_29+0x1c4>
			case 0:	// proximity
				currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
																// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
				if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    4d16:	81 30       	cpi	r24, 0x01	; 1
    4d18:	09 f4       	brne	.+2      	; 0x4d1c <__vector_29+0x7da>
    4d1a:	48 c1       	rjmp	.+656    	; 0x4fac <__vector_29+0xa6a>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4d1c:	85 e0       	ldi	r24, 0x05	; 5
    4d1e:	80 93 c9 02 	sts	0x02C9, r24
    4d22:	3d cf       	rjmp	.-390    	; 0x4b9e <__vector_29+0x65c>
			case 2:	// right motor
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    4d24:	81 30       	cpi	r24, 0x01	; 1
    4d26:	09 f4       	brne	.+2      	; 0x4d2a <__vector_29+0x7e8>
    4d28:	3d c1       	rjmp	.+634    	; 0x4fa4 <__vector_29+0xa62>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4d2a:	85 e0       	ldi	r24, 0x05	; 5
    4d2c:	80 93 c9 02 	sts	0x02C9, r24
    4d30:	df cf       	rjmp	.-66     	; 0x4cf0 <__vector_29+0x7ae>
			case 4:	// right motor
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    4d32:	91 30       	cpi	r25, 0x01	; 1
    4d34:	09 f0       	breq	.+2      	; 0x4d38 <__vector_29+0x7f6>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4d36:	85 e0       	ldi	r24, 0x05	; 5
    4d38:	80 93 c9 02 	sts	0x02C9, r24
    4d3c:	93 ce       	rjmp	.-730    	; 0x4a64 <__vector_29+0x522>
			case 3:	// left motor
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    4d3e:	81 30       	cpi	r24, 0x01	; 1
    4d40:	09 f4       	brne	.+2      	; 0x4d44 <__vector_29+0x802>
    4d42:	38 c1       	rjmp	.+624    	; 0x4fb4 <__vector_29+0xa72>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4d44:	85 e0       	ldi	r24, 0x05	; 5
    4d46:	80 93 c9 02 	sts	0x02C9, r24
    4d4a:	bf cf       	rjmp	.-130    	; 0x4cca <__vector_29+0x788>
					proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
				//} else {	// ground
				//	proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx];
				//}
				if(proximityResult[currentProx>>1] < 0) {
					proximityResult[currentProx>>1] = 0;
    4d4c:	11 82       	std	Z+1, r1	; 0x01
    4d4e:	10 82       	st	Z, r1
    4d50:	80 e0       	ldi	r24, 0x00	; 0
    4d52:	90 e0       	ldi	r25, 0x00	; 0
    4d54:	05 cd       	rjmp	.-1526   	; 0x4760 <__vector_29+0x21e>
					
					if(proximityResult[currentProx>>1] < PHASE1) {

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
    4d56:	ac 01       	movw	r20, r24
    4d58:	44 5c       	subi	r20, 0xC4	; 196
    4d5a:	5f 4f       	sbci	r21, 0xFF	; 255
    4d5c:	55 95       	asr	r21
    4d5e:	47 95       	ror	r20
    4d60:	48 37       	cpi	r20, 0x78	; 120
    4d62:	51 05       	cpc	r21, r1
    4d64:	0c f0       	brlt	.+2      	; 0x4d68 <__vector_29+0x826>
    4d66:	e8 c0       	rjmp	.+464    	; 0x4f38 <__vector_29+0x9f6>
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;
    4d68:	2f 52       	subi	r18, 0x2F	; 47
    4d6a:	3d 4f       	sbci	r19, 0xFD	; 253
    4d6c:	cc 97       	sbiw	r24, 0x3c	; 60
    4d6e:	95 95       	asr	r25
    4d70:	87 95       	ror	r24
    4d72:	cc 96       	adiw	r24, 0x3c	; 60
    4d74:	f9 01       	movw	r30, r18
    4d76:	91 83       	std	Z+1, r25	; 0x01
    4d78:	80 83       	st	Z, r24
    4d7a:	fe cc       	rjmp	.-1540   	; 0x4778 <__vector_29+0x236>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 6;
				break;

			case 6:
				currentAdChannel = currentProx+1;
    4d7c:	80 91 34 02 	lds	r24, 0x0234
    4d80:	8f 5f       	subi	r24, 0xFF	; 255
    4d82:	80 93 33 02 	sts	0x0233, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    4d86:	90 93 c9 02 	sts	0x02C9, r25
				irCommAdcRxState = 7;
    4d8a:	87 e0       	ldi	r24, 0x07	; 7
    4d8c:	80 93 03 05 	sts	0x0503, r24
    4d90:	80 91 ca 02 	lds	r24, 0x02CA
				break;
    4d94:	34 cc       	rjmp	.-1944   	; 0x45fe <__vector_29+0xbc>
				}
				irCommAdcRxState = 10;
				break;

			case 10:
				currentAdChannel = currentMotRightChannel;
    4d96:	80 91 36 02 	lds	r24, 0x0236
    4d9a:	80 93 33 02 	sts	0x0233, r24
				rightChannelPhase = rightMotorPhase;
    4d9e:	80 91 37 02 	lds	r24, 0x0237
    4da2:	80 93 cb 02 	sts	0x02CB, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    4da6:	80 91 cc 02 	lds	r24, 0x02CC
    4daa:	88 23       	and	r24, r24
    4dac:	09 f0       	breq	.+2      	; 0x4db0 <__vector_29+0x86e>
    4dae:	e5 c0       	rjmp	.+458    	; 0x4f7a <__vector_29+0xa38>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    4db0:	83 e0       	ldi	r24, 0x03	; 3
    4db2:	80 93 c9 02 	sts	0x02C9, r24
					}
				} else {
					irCommRxWindowSamples++;
				}
				*/
				if(irCommRxBitSkipped < 254) {	// safety check
    4db6:	90 91 1d 05 	lds	r25, 0x051D
    4dba:	9e 3f       	cpi	r25, 0xFE	; 254
    4dbc:	18 f4       	brcc	.+6      	; 0x4dc4 <__vector_29+0x882>
					irCommRxBitSkipped++;
    4dbe:	9f 5f       	subi	r25, 0xFF	; 255
    4dc0:	90 93 1d 05 	sts	0x051D, r25
				}
				irCommRxWindowSamples++;
    4dc4:	80 91 04 05 	lds	r24, 0x0504
    4dc8:	8f 5f       	subi	r24, 0xFF	; 255
    4dca:	80 93 04 05 	sts	0x0504, r24
				if(irCommState==IRCOMM_RX_SYNC_SIGNAL) {
    4dce:	20 91 d7 04 	lds	r18, 0x04D7
    4dd2:	24 30       	cpi	r18, 0x04	; 4
    4dd4:	09 f4       	brne	.+2      	; 0x4dd8 <__vector_29+0x896>
    4dd6:	02 c1       	rjmp	.+516    	; 0x4fdc <__vector_29+0xa9a>
					if(irCommRxBitSkipped >= irCommShiftCount) {
						irCommState = IRCOMM_RX_WAITING_BIT;
					}
				}

				if(irCommRxWindowSamples == IRCOMM_SAMPLING_WINDOW) {					
    4dd8:	84 31       	cpi	r24, 0x14	; 20
    4dda:	09 f4       	brne	.+2      	; 0x4dde <__vector_29+0x89c>
    4ddc:	21 c1       	rjmp	.+578    	; 0x5020 <__vector_29+0xade>
				} else {
					irCommTickCounter = 0;
					updateBlueLed(0);
				}
				*/
				irCommAdcRxState = 11;
    4dde:	8b e0       	ldi	r24, 0x0B	; 11
    4de0:	80 93 03 05 	sts	0x0503, r24
    4de4:	80 91 ca 02 	lds	r24, 0x02CA
				break;
    4de8:	0a cc       	rjmp	.-2028   	; 0x45fe <__vector_29+0xbc>

			case 11:
				currentAdChannel = 0;	// prox0
    4dea:	10 92 33 02 	sts	0x0233, r1
				if(rightChannelPhase == ACTIVE_PHASE) {
    4dee:	90 91 cb 02 	lds	r25, 0x02CB
    4df2:	99 23       	and	r25, r25
    4df4:	21 f0       	breq	.+8      	; 0x4dfe <__vector_29+0x8bc>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    4df6:	91 30       	cpi	r25, 0x01	; 1
    4df8:	09 f4       	brne	.+2      	; 0x4dfc <__vector_29+0x8ba>
    4dfa:	0a c1       	rjmp	.+532    	; 0x5010 <__vector_29+0xace>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4dfc:	85 e0       	ldi	r24, 0x05	; 5
    4dfe:	80 93 c9 02 	sts	0x02C9, r24
				}
				irCommAdcRxState = 0;
    4e02:	10 92 03 05 	sts	0x0503, r1
    4e06:	80 91 ca 02 	lds	r24, 0x02CA
				break;
    4e0a:	f9 cb       	rjmp	.-2062   	; 0x45fe <__vector_29+0xbc>

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
			case 0:				
				currentProx = 0;
    4e0c:	10 92 34 02 	sts	0x0234, r1
				currentAdChannel = currentProx+1;				
    4e10:	80 93 33 02 	sts	0x0233, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    4e14:	96 e0       	ldi	r25, 0x06	; 6
    4e16:	90 93 c9 02 	sts	0x02C9, r25
				irCommAdcRxState = 1;
    4e1a:	80 93 03 05 	sts	0x0503, r24
    4e1e:	80 91 ca 02 	lds	r24, 0x02CA
				break;
    4e22:	ed cb       	rjmp	.-2086   	; 0x45fe <__vector_29+0xbc>
				}
				irCommAdcRxState = 9;
				break;

			case 9:
				currentAdChannel = currentMotLeftChannel;
    4e24:	90 91 35 02 	lds	r25, 0x0235
    4e28:	90 93 33 02 	sts	0x0233, r25
				leftChannelPhase = leftMotorPhase;
    4e2c:	90 91 38 02 	lds	r25, 0x0238
    4e30:	90 93 cc 02 	sts	0x02CC, r25
				if(rightChannelPhase == ACTIVE_PHASE) {
    4e34:	90 91 cb 02 	lds	r25, 0x02CB
    4e38:	99 23       	and	r25, r25
    4e3a:	21 f0       	breq	.+8      	; 0x4e44 <__vector_29+0x902>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    4e3c:	91 30       	cpi	r25, 0x01	; 1
    4e3e:	09 f4       	brne	.+2      	; 0x4e42 <__vector_29+0x900>
    4e40:	eb c0       	rjmp	.+470    	; 0x5018 <__vector_29+0xad6>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4e42:	85 e0       	ldi	r24, 0x05	; 5
    4e44:	80 93 c9 02 	sts	0x02C9, r24
				}
				irCommAdcRxState = 10;
    4e48:	8a e0       	ldi	r24, 0x0A	; 10
    4e4a:	80 93 03 05 	sts	0x0503, r24
    4e4e:	80 91 ca 02 	lds	r24, 0x02CA
				break;
    4e52:	d5 cb       	rjmp	.-2134   	; 0x45fe <__vector_29+0xbc>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 2;
				break;

			case 2:
				currentAdChannel = currentProx+1;
    4e54:	80 91 34 02 	lds	r24, 0x0234
    4e58:	8f 5f       	subi	r24, 0xFF	; 255
    4e5a:	80 93 33 02 	sts	0x0233, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    4e5e:	86 e0       	ldi	r24, 0x06	; 6
    4e60:	80 93 c9 02 	sts	0x02C9, r24
				irCommAdcRxState = 3;
    4e64:	83 e0       	ldi	r24, 0x03	; 3
    4e66:	80 93 03 05 	sts	0x0503, r24
    4e6a:	80 91 ca 02 	lds	r24, 0x02CA
				break;
    4e6e:	c7 cb       	rjmp	.-2162   	; 0x45fe <__vector_29+0xbc>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 7;
				break;

			case 7:
				currentAdChannel = currentMotLeftChannel;
    4e70:	80 91 35 02 	lds	r24, 0x0235
    4e74:	80 93 33 02 	sts	0x0233, r24
				leftChannelPhase = leftMotorPhase;
    4e78:	80 91 38 02 	lds	r24, 0x0238
    4e7c:	80 93 cc 02 	sts	0x02CC, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    4e80:	86 e0       	ldi	r24, 0x06	; 6
    4e82:	80 93 c9 02 	sts	0x02C9, r24
				irCommAdcRxState = 8;
    4e86:	88 e0       	ldi	r24, 0x08	; 8
    4e88:	80 93 03 05 	sts	0x0503, r24
    4e8c:	80 91 ca 02 	lds	r24, 0x02CA
				break;
    4e90:	b6 cb       	rjmp	.-2196   	; 0x45fe <__vector_29+0xbc>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 3;
				break;

			case 3:
				currentAdChannel = currentProx+1;
    4e92:	80 91 34 02 	lds	r24, 0x0234
    4e96:	8f 5f       	subi	r24, 0xFF	; 255
    4e98:	80 93 33 02 	sts	0x0233, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    4e9c:	86 e0       	ldi	r24, 0x06	; 6
    4e9e:	80 93 c9 02 	sts	0x02C9, r24
				irCommAdcRxState = 4;
    4ea2:	84 e0       	ldi	r24, 0x04	; 4
    4ea4:	80 93 03 05 	sts	0x0503, r24
    4ea8:	80 91 ca 02 	lds	r24, 0x02CA
				break;
    4eac:	a8 cb       	rjmp	.-2224   	; 0x45fe <__vector_29+0xbc>

			case 4:
				currentAdChannel = currentProx+1;
    4eae:	80 91 34 02 	lds	r24, 0x0234
    4eb2:	8f 5f       	subi	r24, 0xFF	; 255
    4eb4:	80 93 33 02 	sts	0x0233, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    4eb8:	86 e0       	ldi	r24, 0x06	; 6
    4eba:	80 93 c9 02 	sts	0x02C9, r24
				irCommAdcRxState = 5;
    4ebe:	85 e0       	ldi	r24, 0x05	; 5
    4ec0:	80 93 03 05 	sts	0x0503, r24
    4ec4:	80 91 ca 02 	lds	r24, 0x02CA
				break;
    4ec8:	9a cb       	rjmp	.-2252   	; 0x45fe <__vector_29+0xbc>
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 0;

				if(currentProx==14 && measBattery==1) {
    4eca:	80 91 cf 02 	lds	r24, 0x02CF
    4ece:	81 30       	cpi	r24, 0x01	; 1
    4ed0:	09 f4       	brne	.+2      	; 0x4ed4 <__vector_29+0x992>
    4ed2:	95 c0       	rjmp	.+298    	; 0x4ffe <__vector_29+0xabc>
    4ed4:	80 e0       	ldi	r24, 0x00	; 0
    4ed6:	93 cb       	rjmp	.-2266   	; 0x45fe <__vector_29+0xbc>
			case 1:	// left motor
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				adcSaveDataTo = SAVE_TO_PROX;
				adcSamplingState = 2;
				if(irCommEnabled==IRCOMM_MODE_RECEIVE && currentProx==23) {					
    4ed8:	80 91 34 02 	lds	r24, 0x0234
    4edc:	87 31       	cpi	r24, 0x17	; 23
    4ede:	09 f4       	brne	.+2      	; 0x4ee2 <__vector_29+0x9a0>
    4ee0:	f8 c0       	rjmp	.+496    	; 0x50d2 <__vector_29+0xb90>
    4ee2:	82 e0       	ldi	r24, 0x02	; 2
    4ee4:	8c cb       	rjmp	.-2280   	; 0x45fe <__vector_29+0xbc>
				if(currentProx & 0x01) {
					if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
											// PORTA for proximity sensors, PORTJ for ground sensors
						PORTA = (1 << (currentProx>>1));	// pulse on
					} else {
						if(hardwareRevision == HW_REV_3_0) {
    4ee6:	20 91 5f 04 	lds	r18, 0x045F
    4eea:	22 23       	and	r18, r18
    4eec:	79 f4       	brne	.+30     	; 0x4f0c <__vector_29+0x9ca>
							PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
    4eee:	40 97       	sbiw	r24, 0x10	; 16
    4ef0:	95 95       	asr	r25
    4ef2:	87 95       	ror	r24
    4ef4:	21 e0       	ldi	r18, 0x01	; 1
    4ef6:	30 e0       	ldi	r19, 0x00	; 0
    4ef8:	02 c0       	rjmp	.+4      	; 0x4efe <__vector_29+0x9bc>
    4efa:	22 0f       	add	r18, r18
    4efc:	33 1f       	adc	r19, r19
    4efe:	8a 95       	dec	r24
    4f00:	e2 f7       	brpl	.-8      	; 0x4efa <__vector_29+0x9b8>
    4f02:	20 93 05 01 	sts	0x0105, r18
    4f06:	80 91 ca 02 	lds	r24, 0x02CA
    4f0a:	79 cb       	rjmp	.-2318   	; 0x45fe <__vector_29+0xbc>
						}

						if(hardwareRevision == HW_REV_3_0_1) {
    4f0c:	21 30       	cpi	r18, 0x01	; 1
    4f0e:	19 f0       	breq	.+6      	; 0x4f16 <__vector_29+0x9d4>
							PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
						}

						if(hardwareRevision == HW_REV_3_1) {
    4f10:	22 30       	cpi	r18, 0x02	; 2
    4f12:	09 f0       	breq	.+2      	; 0x4f16 <__vector_29+0x9d4>
    4f14:	72 cb       	rjmp	.-2332   	; 0x45fa <__vector_29+0xb8>
							PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
    4f16:	40 91 05 01 	lds	r20, 0x0105
    4f1a:	40 97       	sbiw	r24, 0x10	; 16
    4f1c:	95 95       	asr	r25
    4f1e:	87 95       	ror	r24
    4f20:	21 e0       	ldi	r18, 0x01	; 1
    4f22:	30 e0       	ldi	r19, 0x00	; 0
    4f24:	02 c0       	rjmp	.+4      	; 0x4f2a <__vector_29+0x9e8>
    4f26:	22 0f       	add	r18, r18
    4f28:	33 1f       	adc	r19, r19
    4f2a:	8a 95       	dec	r24
    4f2c:	e2 f7       	brpl	.-8      	; 0x4f26 <__vector_29+0x9e4>
    4f2e:	20 95       	com	r18
    4f30:	24 23       	and	r18, r20
    4f32:	20 93 05 01 	sts	0x0105, r18
    4f36:	61 cb       	rjmp	.-2366   	; 0x45fa <__vector_29+0xb8>

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;

					} else if(((proximityResult[currentProx>>1]+300)>>2) < PHASE3) {
    4f38:	ac 01       	movw	r20, r24
    4f3a:	44 5d       	subi	r20, 0xD4	; 212
    4f3c:	5e 4f       	sbci	r21, 0xFE	; 254
    4f3e:	55 95       	asr	r21
    4f40:	47 95       	ror	r20
    4f42:	55 95       	asr	r21
    4f44:	47 95       	ror	r20
    4f46:	44 3b       	cpi	r20, 0xB4	; 180
    4f48:	51 05       	cpc	r21, r1
    4f4a:	c4 f5       	brge	.+112    	; 0x4fbc <__vector_29+0xa7a>

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-180)>>2) + PHASE2;
    4f4c:	2f 52       	subi	r18, 0x2F	; 47
    4f4e:	3d 4f       	sbci	r19, 0xFD	; 253
    4f50:	84 5b       	subi	r24, 0xB4	; 180
    4f52:	90 40       	sbci	r25, 0x00	; 0
    4f54:	95 95       	asr	r25
    4f56:	87 95       	ror	r24
    4f58:	95 95       	asr	r25
    4f5a:	87 95       	ror	r24
    4f5c:	88 58       	subi	r24, 0x88	; 136
    4f5e:	9f 4f       	sbci	r25, 0xFF	; 255
    4f60:	d9 01       	movw	r26, r18
    4f62:	11 96       	adiw	r26, 0x01	; 1
    4f64:	9c 93       	st	X, r25
    4f66:	8e 93       	st	-X, r24
    4f68:	07 cc       	rjmp	.-2034   	; 0x4778 <__vector_29+0x236>
							PORTA = 0xAA;
						} else {
							PORTA = 0x55;
						}
					} else {
						irCommTxPulseState = 0;
    4f6a:	10 92 2f 05 	sts	0x052F, r1
						PORTA = 0x00;
    4f6e:	12 b8       	out	0x02, r1	; 2
    4f70:	92 ce       	rjmp	.-732    	; 0x4c96 <__vector_29+0x754>
							PORTA = 0xAA;
						} else {
							PORTA = 0x55;
						}
					} else {
						irCommTxPulseState = 0;
    4f72:	10 92 2f 05 	sts	0x052F, r1
						PORTA = 0x00;
    4f76:	12 b8       	out	0x02, r1	; 2
    4f78:	5f ce       	rjmp	.-834    	; 0x4c38 <__vector_29+0x6f6>
			case 10:
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    4f7a:	81 30       	cpi	r24, 0x01	; 1
    4f7c:	09 f4       	brne	.+2      	; 0x4f80 <__vector_29+0xa3e>
    4f7e:	a5 c0       	rjmp	.+330    	; 0x50ca <__vector_29+0xb88>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4f80:	85 e0       	ldi	r24, 0x05	; 5
    4f82:	80 93 c9 02 	sts	0x02C9, r24
    4f86:	17 cf       	rjmp	.-466    	; 0x4db6 <__vector_29+0x874>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    4f88:	84 e0       	ldi	r24, 0x04	; 4
    4f8a:	80 93 c9 02 	sts	0x02C9, r24
    4f8e:	c7 cd       	rjmp	.-1138   	; 0x4b1e <__vector_29+0x5dc>
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    4f90:	82 e0       	ldi	r24, 0x02	; 2
    4f92:	80 93 c9 02 	sts	0x02C9, r24
    4f96:	4a cd       	rjmp	.-1388   	; 0x4a2c <__vector_29+0x4ea>
			case 8:
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    4f98:	81 30       	cpi	r24, 0x01	; 1
    4f9a:	b1 f1       	breq	.+108    	; 0x5008 <__vector_29+0xac6>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4f9c:	85 e0       	ldi	r24, 0x05	; 5
    4f9e:	80 93 c9 02 	sts	0x02C9, r24
    4fa2:	96 cd       	rjmp	.-1236   	; 0x4ad0 <__vector_29+0x58e>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    4fa4:	84 e0       	ldi	r24, 0x04	; 4
    4fa6:	80 93 c9 02 	sts	0x02C9, r24
    4faa:	a2 ce       	rjmp	.-700    	; 0x4cf0 <__vector_29+0x7ae>
				currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
																// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
				if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    4fac:	82 e0       	ldi	r24, 0x02	; 2
    4fae:	80 93 c9 02 	sts	0x02C9, r24
    4fb2:	f5 cd       	rjmp	.-1046   	; 0x4b9e <__vector_29+0x65c>
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    4fb4:	82 e0       	ldi	r24, 0x02	; 2
    4fb6:	80 93 c9 02 	sts	0x02C9, r24
    4fba:	87 ce       	rjmp	.-754    	; 0x4cca <__vector_29+0x788>

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-180)>>2) + PHASE2;

					} else {

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-420)>>3) + PHASE3;
    4fbc:	2f 52       	subi	r18, 0x2F	; 47
    4fbe:	3d 4f       	sbci	r19, 0xFD	; 253
    4fc0:	84 5a       	subi	r24, 0xA4	; 164
    4fc2:	91 40       	sbci	r25, 0x01	; 1
    4fc4:	95 95       	asr	r25
    4fc6:	87 95       	ror	r24
    4fc8:	95 95       	asr	r25
    4fca:	87 95       	ror	r24
    4fcc:	95 95       	asr	r25
    4fce:	87 95       	ror	r24
    4fd0:	8c 54       	subi	r24, 0x4C	; 76
    4fd2:	9f 4f       	sbci	r25, 0xFF	; 255
    4fd4:	f9 01       	movw	r30, r18
    4fd6:	91 83       	std	Z+1, r25	; 0x01
    4fd8:	80 83       	st	Z, r24
    4fda:	ce cb       	rjmp	.-2148   	; 0x4778 <__vector_29+0x236>
				if(irCommRxBitSkipped < 254) {	// safety check
					irCommRxBitSkipped++;
				}
				irCommRxWindowSamples++;
				if(irCommState==IRCOMM_RX_SYNC_SIGNAL) {
					irCommRxWindowSamples = 0;
    4fdc:	10 92 04 05 	sts	0x0504, r1
					if(irCommRxBitSkipped >= irCommShiftCount) {
    4fe0:	80 91 0e 05 	lds	r24, 0x050E
    4fe4:	98 17       	cp	r25, r24
    4fe6:	08 f4       	brcc	.+2      	; 0x4fea <__vector_29+0xaa8>
    4fe8:	fa ce       	rjmp	.-524    	; 0x4dde <__vector_29+0x89c>
						irCommState = IRCOMM_RX_WAITING_BIT;
    4fea:	85 e0       	ldi	r24, 0x05	; 5
    4fec:	80 93 d7 04 	sts	0x04D7, r24
    4ff0:	f6 ce       	rjmp	.-532    	; 0x4dde <__vector_29+0x89c>
						//PORTA = 0x01;
						//PORTA = irCommTxSensorMask;
						if(irCommTxSensorGroup==0) {
							PORTA = 0xAA;
						} else {
							PORTA = 0x55;
    4ff2:	85 e5       	ldi	r24, 0x55	; 85
    4ff4:	82 b9       	out	0x02, r24	; 2
    4ff6:	4f ce       	rjmp	.-866    	; 0x4c96 <__vector_29+0x754>
						//PORTA = 0x01;
						//PORTA = irCommTxSensorMask;
						if(irCommTxSensorGroup==0) {
							PORTA = 0xAA;
						} else {
							PORTA = 0x55;
    4ff8:	85 e5       	ldi	r24, 0x55	; 85
    4ffa:	82 b9       	out	0x02, r24	; 2
    4ffc:	1d ce       	rjmp	.-966    	; 0x4c38 <__vector_29+0x6f6>
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 0;

				if(currentProx==14 && measBattery==1) {
					measBattery=2;
    4ffe:	82 e0       	ldi	r24, 0x02	; 2
    5000:	80 93 cf 02 	sts	0x02CF, r24
					SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
    5004:	46 9a       	sbi	0x08, 6	; 8
    5006:	35 cd       	rjmp	.-1430   	; 0x4a72 <__vector_29+0x530>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    5008:	84 e0       	ldi	r24, 0x04	; 4
    500a:	80 93 c9 02 	sts	0x02C9, r24
    500e:	60 cd       	rjmp	.-1344   	; 0x4ad0 <__vector_29+0x58e>
			case 11:
				currentAdChannel = 0;	// prox0
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    5010:	82 e0       	ldi	r24, 0x02	; 2
    5012:	80 93 c9 02 	sts	0x02C9, r24
    5016:	f5 ce       	rjmp	.-534    	; 0x4e02 <__vector_29+0x8c0>
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    5018:	82 e0       	ldi	r24, 0x02	; 2
    501a:	80 93 c9 02 	sts	0x02C9, r24
    501e:	14 cf       	rjmp	.-472    	; 0x4e48 <__vector_29+0x906>
						irCommState = IRCOMM_RX_WAITING_BIT;
					}
				}

				if(irCommRxWindowSamples == IRCOMM_SAMPLING_WINDOW) {					
					irCommRxWindowSamples = 0;
    5020:	10 92 04 05 	sts	0x0504, r1
					irCommTempPointer = irCommProxValuesCurr;
    5024:	80 91 4f 08 	lds	r24, 0x084F
    5028:	90 91 50 08 	lds	r25, 0x0850
					irCommProxValuesCurr = irCommProxValuesAdc;
    502c:	20 91 6b 08 	lds	r18, 0x086B
    5030:	30 91 6c 08 	lds	r19, 0x086C
    5034:	30 93 50 08 	sts	0x0850, r19
    5038:	20 93 4f 08 	sts	0x084F, r18
					irCommProxValuesAdc = irCommTempPointer;
    503c:	90 93 6c 08 	sts	0x086C, r25
    5040:	80 93 6b 08 	sts	0x086B, r24
					irCommTempPointer = irCommMaxSensorValueCurr;
    5044:	50 91 4c 05 	lds	r21, 0x054C
    5048:	40 91 4d 05 	lds	r20, 0x054D
					irCommMaxSensorValueCurr = irCommMaxSensorValueAdc;
    504c:	80 91 39 0b 	lds	r24, 0x0B39
    5050:	90 91 3a 0b 	lds	r25, 0x0B3A
    5054:	90 93 4d 05 	sts	0x054D, r25
    5058:	80 93 4c 05 	sts	0x054C, r24
					irCommMaxSensorValueAdc = irCommTempPointer;
    505c:	50 93 39 0b 	sts	0x0B39, r21
    5060:	40 93 3a 0b 	sts	0x0B3A, r20
					irCommTempPointer = irCommMinSensorValueCurr;
    5064:	80 91 38 05 	lds	r24, 0x0538
    5068:	90 91 39 05 	lds	r25, 0x0539
    506c:	90 93 7b 0b 	sts	0x0B7B, r25
    5070:	80 93 7a 0b 	sts	0x0B7A, r24
					irCommMinSensorValueCurr = irCommMinSensorValueAdc;
    5074:	20 91 c9 05 	lds	r18, 0x05C9
    5078:	30 91 ca 05 	lds	r19, 0x05CA
    507c:	30 93 39 05 	sts	0x0539, r19
    5080:	20 93 38 05 	sts	0x0538, r18
					irCommMinSensorValueAdc = irCommTempPointer;
    5084:	90 93 ca 05 	sts	0x05CA, r25
    5088:	80 93 c9 05 	sts	0x05C9, r24
					memset(irCommMaxSensorValueAdc, 0x00, 16);
    508c:	e5 2f       	mov	r30, r21
    508e:	f4 2f       	mov	r31, r20
    5090:	80 e1       	ldi	r24, 0x10	; 16
    5092:	df 01       	movw	r26, r30
    5094:	1d 92       	st	X+, r1
    5096:	8a 95       	dec	r24
    5098:	e9 f7       	brne	.-6      	; 0x5094 <__vector_29+0xb52>
					memset(irCommMinSensorValueAdc, 0xFF, 16);
    509a:	80 91 c9 05 	lds	r24, 0x05C9
    509e:	90 91 ca 05 	lds	r25, 0x05CA
    50a2:	6f ef       	ldi	r22, 0xFF	; 255
    50a4:	70 e0       	ldi	r23, 0x00	; 0
    50a6:	40 e1       	ldi	r20, 0x10	; 16
    50a8:	50 e0       	ldi	r21, 0x00	; 0
    50aa:	0e 94 16 57 	call	0xae2c	; 0xae2c <memset>
					if(irCommState == IRCOMM_RX_IDLE_STATE) {
    50ae:	80 91 d7 04 	lds	r24, 0x04D7
    50b2:	81 30       	cpi	r24, 0x01	; 1
    50b4:	09 f4       	brne	.+2      	; 0x50b8 <__vector_29+0xb76>
    50b6:	44 c0       	rjmp	.+136    	; 0x5140 <__vector_29+0xbfe>
						irCommRxBitSkipped = 0;
					}
					//if(irCommState == IRCOMM_RX_SYNC_SIGNAL) {
					//	irCommSecondBitSkipped = 1;	// the second start bit is just sampled, skip it and sync with the received signal						
					//}
					if(irCommState == IRCOMM_RX_WAITING_BIT) {
    50b8:	80 91 d7 04 	lds	r24, 0x04D7
    50bc:	85 30       	cpi	r24, 0x05	; 5
    50be:	09 f0       	breq	.+2      	; 0x50c2 <__vector_29+0xb80>
    50c0:	8e ce       	rjmp	.-740    	; 0x4dde <__vector_29+0x89c>
						irCommState = IRCOMM_RX_READ_BIT;
    50c2:	86 e0       	ldi	r24, 0x06	; 6
    50c4:	80 93 d7 04 	sts	0x04D7, r24
    50c8:	8a ce       	rjmp	.-748    	; 0x4dde <__vector_29+0x89c>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    50ca:	84 e0       	ldi	r24, 0x04	; 4
    50cc:	80 93 c9 02 	sts	0x02C9, r24
    50d0:	72 ce       	rjmp	.-796    	; 0x4db6 <__vector_29+0x874>
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				adcSaveDataTo = SAVE_TO_PROX;
				adcSamplingState = 2;
				if(irCommEnabled==IRCOMM_MODE_RECEIVE && currentProx==23) {					
					currentAdChannel = 0;	// prox0					
    50d2:	10 92 33 02 	sts	0x0233, r1
					measBattery = 0;
    50d6:	10 92 cf 02 	sts	0x02CF, r1
					irCommAdcRxState = 0;					
    50da:	10 92 03 05 	sts	0x0503, r1
					irCommRxWindowSamples = 0;
    50de:	10 92 04 05 	sts	0x0504, r1
					memset(irCommMaxSensorValueAdc, 0x00, 16);
    50e2:	e0 91 39 0b 	lds	r30, 0x0B39
    50e6:	f0 91 3a 0b 	lds	r31, 0x0B3A
    50ea:	80 e1       	ldi	r24, 0x10	; 16
    50ec:	df 01       	movw	r26, r30
    50ee:	1d 92       	st	X+, r1
    50f0:	8a 95       	dec	r24
    50f2:	e9 f7       	brne	.-6      	; 0x50ee <__vector_29+0xbac>
					memset(irCommMinSensorValueAdc, 0xFF, 16);
    50f4:	80 91 c9 05 	lds	r24, 0x05C9
    50f8:	90 91 ca 05 	lds	r25, 0x05CA
    50fc:	6f ef       	ldi	r22, 0xFF	; 255
    50fe:	70 e0       	ldi	r23, 0x00	; 0
    5100:	40 e1       	ldi	r20, 0x10	; 16
    5102:	50 e0       	ldi	r21, 0x00	; 0
    5104:	0e 94 16 57 	call	0xae2c	; 0xae2c <memset>
					irCommMode = IRCOMM_MODE_RECEIVE;					
    5108:	10 93 d6 04 	sts	0x04D6, r17
    510c:	10 91 d4 04 	lds	r17, 0x04D4
    5110:	d8 ca       	rjmp	.-2640   	; 0x46c2 <__vector_29+0x180>
					}
					irCommTxSwitchCounter++;
					if(irCommTxSwitchCounter == irCommTxSwitchCount) {
						irCommTxBitCount++;
						if(irCommTxBitCount==12) {
							irCommState = IRCOMM_TX_IDLE_STATE;
    5112:	81 e0       	ldi	r24, 0x01	; 1
    5114:	80 93 d7 04 	sts	0x04D7, r24
							irCommTxByteEnqueued = 0;
    5118:	10 92 28 05 	sts	0x0528, r1
							adcSamplingState = 0;
    511c:	10 92 ca 02 	sts	0x02CA, r1
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    5120:	10 92 d6 04 	sts	0x04D6, r1
							irCommInitReceiver();
    5124:	0e 94 af 46 	call	0x8d5e	; 0x8d5e <irCommInitReceiver>
							PORTA = 0x00;
    5128:	12 b8       	out	0x02, r1	; 2
							irCommTxLastTransmissionTime = getTime100MicroSec();
    512a:	0e 94 35 22 	call	0x446a	; 0x446a <getTime100MicroSec>
    512e:	60 93 29 05 	sts	0x0529, r22
    5132:	70 93 2a 05 	sts	0x052A, r23
    5136:	80 93 2b 05 	sts	0x052B, r24
    513a:	90 93 2c 05 	sts	0x052C, r25
    513e:	91 cd       	rjmp	.-1246   	; 0x4c62 <__vector_29+0x720>
					irCommMinSensorValueCurr = irCommMinSensorValueAdc;
					irCommMinSensorValueAdc = irCommTempPointer;
					memset(irCommMaxSensorValueAdc, 0x00, 16);
					memset(irCommMinSensorValueAdc, 0xFF, 16);
					if(irCommState == IRCOMM_RX_IDLE_STATE) {
						irCommState = IRCOMM_RX_MAX_SENSOR_STATE;
    5140:	82 e0       	ldi	r24, 0x02	; 2
    5142:	80 93 d7 04 	sts	0x04D7, r24
						irCommRxBitSkipped = 0;
    5146:	10 92 1d 05 	sts	0x051D, r1
    514a:	b6 cf       	rjmp	.-148    	; 0x50b8 <__vector_29+0xb76>

0000514c <initMotors>:

#include "motors.h"

void initMotors() {
    514c:	0f 93       	push	r16
    514e:	1f 93       	push	r17
    5150:	cf 93       	push	r28
    5152:	df 93       	push	r29
	// Using 10-bit resolution (waveform generation mode 7) we have a period of: 8000000/1024 = 7812.5 Hz
	// We need to apply a prescaler to the timer in such a way to get the desired period:
	// 7812.5/100 = 78.125 => ideal prescaler, the nearest one is 1/64 and we get a period of:
	// 8000000/64/1024 = 122 Hz

	TCCR3A = 0;
    5154:	e0 e9       	ldi	r30, 0x90	; 144
    5156:	f0 e0       	ldi	r31, 0x00	; 0
    5158:	10 82       	st	Z, r1
	TCCR3B = 0;
    515a:	41 e9       	ldi	r20, 0x91	; 145
    515c:	50 e0       	ldi	r21, 0x00	; 0
    515e:	da 01       	movw	r26, r20
    5160:	1c 92       	st	X, r1
	TIMSK3 = 0;
    5162:	21 e7       	ldi	r18, 0x71	; 113
    5164:	30 e0       	ldi	r19, 0x00	; 0
    5166:	e9 01       	movw	r28, r18
    5168:	18 82       	st	Y, r1
	TCCR4A = 0;
    516a:	a0 ea       	ldi	r26, 0xA0	; 160
    516c:	b0 e0       	ldi	r27, 0x00	; 0
    516e:	1c 92       	st	X, r1
	TCCR4B = 0;
    5170:	81 ea       	ldi	r24, 0xA1	; 161
    5172:	90 e0       	ldi	r25, 0x00	; 0
    5174:	ec 01       	movw	r28, r24
    5176:	18 82       	st	Y, r1
	TIMSK4 = 0;
    5178:	02 e7       	ldi	r16, 0x72	; 114
    517a:	10 e0       	ldi	r17, 0x00	; 0
    517c:	e8 01       	movw	r28, r16
    517e:	18 82       	st	Y, r1

	TCCR3A |= (1 << COM3A1) | (1 << WGM31) | (1 << WGM30); 	// enable OCA; clear on match, set at bottom
    5180:	60 81       	ld	r22, Z
    5182:	63 68       	ori	r22, 0x83	; 131
    5184:	60 83       	st	Z, r22
	TCCR3A |= (1 << WGM31) | (1 << WGM30);
    5186:	60 81       	ld	r22, Z
    5188:	63 60       	ori	r22, 0x03	; 3
    518a:	60 83       	st	Z, r22
	TCCR3B |= (1 << WGM32) | (1 << CS31) | (1 << CS30);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    518c:	ea 01       	movw	r28, r20
    518e:	68 81       	ld	r22, Y
    5190:	6b 60       	ori	r22, 0x0B	; 11
    5192:	68 83       	st	Y, r22
	// the values for motors goes from 0 (stopped) to 1023 (max power)
	OCR3A = pwm_right;
    5194:	40 91 05 03 	lds	r20, 0x0305
    5198:	50 91 06 03 	lds	r21, 0x0306
    519c:	50 93 99 00 	sts	0x0099, r21
    51a0:	40 93 98 00 	sts	0x0098, r20
	OCR3B = 0;
    51a4:	10 92 9b 00 	sts	0x009B, r1
    51a8:	10 92 9a 00 	sts	0x009A, r1
	TIMSK3 |= (1 << TOIE3);		// Enable timer overflow interrupt
    51ac:	e9 01       	movw	r28, r18
    51ae:	48 81       	ld	r20, Y
    51b0:	41 60       	ori	r20, 0x01	; 1
    51b2:	48 83       	st	Y, r20

	// stop right motor
	TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    51b4:	20 81       	ld	r18, Z
    51b6:	2f 75       	andi	r18, 0x5F	; 95
    51b8:	20 83       	st	Z, r18
	PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    51ba:	2e b1       	in	r18, 0x0e	; 14
    51bc:	27 7e       	andi	r18, 0xE7	; 231
    51be:	2e b9       	out	0x0e, r18	; 14

	// Motor left timer4/pwm
	// same configuration as timer3
	TCCR4A |= (1 << COM4A1) | (1 << WGM41) | (1 << WGM40); 	// enable OCA; clear on match, set at bottom
    51c0:	2c 91       	ld	r18, X
    51c2:	23 68       	ori	r18, 0x83	; 131
    51c4:	2c 93       	st	X, r18
	TCCR4B |= (1 << WGM42) | (1 << CS41) | (1 << CS40);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    51c6:	fc 01       	movw	r30, r24
    51c8:	20 81       	ld	r18, Z
    51ca:	2b 60       	ori	r18, 0x0B	; 11
    51cc:	20 83       	st	Z, r18
	// the values for motors goes from 0 (stopped) to 1024 (max power)
	OCR4A = pwm_left;
    51ce:	80 91 07 03 	lds	r24, 0x0307
    51d2:	90 91 08 03 	lds	r25, 0x0308
    51d6:	90 93 a9 00 	sts	0x00A9, r25
    51da:	80 93 a8 00 	sts	0x00A8, r24
	OCR4B = 0;
    51de:	10 92 ab 00 	sts	0x00AB, r1
    51e2:	10 92 aa 00 	sts	0x00AA, r1
	TIMSK4 |= (1 << TOIE4);		// Enable timer overflow interrupt
    51e6:	e8 01       	movw	r28, r16
    51e8:	88 81       	ld	r24, Y
    51ea:	81 60       	ori	r24, 0x01	; 1
    51ec:	88 83       	st	Y, r24
	// stop left motor
	TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    51ee:	8c 91       	ld	r24, X
    51f0:	8f 75       	andi	r24, 0x5F	; 95
    51f2:	8c 93       	st	X, r24
	PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    51f4:	e2 e0       	ldi	r30, 0x02	; 2
    51f6:	f1 e0       	ldi	r31, 0x01	; 1
    51f8:	80 81       	ld	r24, Z
    51fa:	87 7e       	andi	r24, 0xE7	; 231
    51fc:	80 83       	st	Z, r24


}
    51fe:	df 91       	pop	r29
    5200:	cf 91       	pop	r28
    5202:	1f 91       	pop	r17
    5204:	0f 91       	pop	r16
    5206:	08 95       	ret

00005208 <cast_speed>:

signed int cast_speed(signed int vel) {
    5208:	28 2f       	mov	r18, r24
    520a:	39 2f       	mov	r19, r25
    520c:	8e ef       	ldi	r24, 0xFE	; 254
    520e:	20 30       	cpi	r18, 0x00	; 0
    5210:	38 07       	cpc	r19, r24
    5212:	14 f4       	brge	.+4      	; 0x5218 <cast_speed+0x10>
    5214:	20 e0       	ldi	r18, 0x00	; 0
    5216:	3e ef       	ldi	r19, 0xFE	; 254
    5218:	82 e0       	ldi	r24, 0x02	; 2
    521a:	21 30       	cpi	r18, 0x01	; 1
    521c:	38 07       	cpc	r19, r24
    521e:	14 f0       	brlt	.+4      	; 0x5224 <cast_speed+0x1c>
    5220:	20 e0       	ldi	r18, 0x00	; 0
    5222:	32 e0       	ldi	r19, 0x02	; 2
        vel = MAX_MOTORS_PWM/2;
    } else if(vel < -(MAX_MOTORS_PWM/2)) {
        vel = -(MAX_MOTORS_PWM/2);
    }
    return vel;
}
    5224:	c9 01       	movw	r24, r18
    5226:	08 95       	ret

00005228 <handleMotorsWithNoController>:

void handleMotorsWithNoController() {

	// compute velocities even if they aren't used
	if(compute_left_vel) {
    5228:	80 91 07 02 	lds	r24, 0x0207
    522c:	88 23       	and	r24, r24
    522e:	c1 f1       	breq	.+112    	; 0x52a0 <handleMotorsWithNoController+0x78>
		last_left_vel = left_vel_sum>>2;
    5230:	60 91 fd 02 	lds	r22, 0x02FD
    5234:	70 91 fe 02 	lds	r23, 0x02FE
    5238:	76 95       	lsr	r23
    523a:	67 95       	ror	r22
    523c:	76 95       	lsr	r23
    523e:	67 95       	ror	r22
    5240:	70 93 02 03 	sts	0x0302, r23
    5244:	60 93 01 03 	sts	0x0301, r22
		compute_left_vel = 0;
    5248:	10 92 07 02 	sts	0x0207, r1
		left_vel_sum = 0;
    524c:	10 92 fe 02 	sts	0x02FE, r1
    5250:	10 92 fd 02 	sts	0x02FD, r1

		if(pwm_left_desired >= 0) {
    5254:	80 91 0b 03 	lds	r24, 0x030B
    5258:	90 91 0c 03 	lds	r25, 0x030C
    525c:	97 fd       	sbrc	r25, 7
    525e:	e3 c0       	rjmp	.+454    	; 0x5426 <handleMotorsWithNoController+0x1fe>
			leftMotSteps += (last_left_vel>>3);
    5260:	75 95       	asr	r23
    5262:	67 95       	ror	r22
    5264:	75 95       	asr	r23
    5266:	67 95       	ror	r22
    5268:	75 95       	asr	r23
    526a:	67 95       	ror	r22
    526c:	88 27       	eor	r24, r24
    526e:	77 fd       	sbrc	r23, 7
    5270:	80 95       	com	r24
    5272:	98 2f       	mov	r25, r24
    5274:	0e 94 91 54 	call	0xa922	; 0xa922 <__floatsisf>
    5278:	9b 01       	movw	r18, r22
    527a:	ac 01       	movw	r20, r24
    527c:	60 91 e5 02 	lds	r22, 0x02E5
    5280:	70 91 e6 02 	lds	r23, 0x02E6
    5284:	80 91 e7 02 	lds	r24, 0x02E7
    5288:	90 91 e8 02 	lds	r25, 0x02E8
    528c:	0e 94 29 53 	call	0xa652	; 0xa652 <__addsf3>
    5290:	60 93 e5 02 	sts	0x02E5, r22
    5294:	70 93 e6 02 	sts	0x02E6, r23
    5298:	80 93 e7 02 	sts	0x02E7, r24
    529c:	90 93 e8 02 	sts	0x02E8, r25
		} else {
			leftMotSteps -= (last_left_vel>>3);
		}
	}

	if(compute_right_vel) {
    52a0:	80 91 08 02 	lds	r24, 0x0208
    52a4:	88 23       	and	r24, r24
    52a6:	c1 f1       	breq	.+112    	; 0x5318 <handleMotorsWithNoController+0xf0>
		last_right_vel = right_vel_sum>>2;
    52a8:	60 91 ff 02 	lds	r22, 0x02FF
    52ac:	70 91 00 03 	lds	r23, 0x0300
    52b0:	76 95       	lsr	r23
    52b2:	67 95       	ror	r22
    52b4:	76 95       	lsr	r23
    52b6:	67 95       	ror	r22
    52b8:	70 93 04 03 	sts	0x0304, r23
    52bc:	60 93 03 03 	sts	0x0303, r22
		compute_right_vel = 0;
    52c0:	10 92 08 02 	sts	0x0208, r1
		right_vel_sum = 0;
    52c4:	10 92 00 03 	sts	0x0300, r1
    52c8:	10 92 ff 02 	sts	0x02FF, r1

		if(pwm_right_desired >= 0) {
    52cc:	80 91 09 03 	lds	r24, 0x0309
    52d0:	90 91 0a 03 	lds	r25, 0x030A
    52d4:	97 fd       	sbrc	r25, 7
    52d6:	86 c0       	rjmp	.+268    	; 0x53e4 <handleMotorsWithNoController+0x1bc>
			rightMotSteps += (last_right_vel>>3);
    52d8:	75 95       	asr	r23
    52da:	67 95       	ror	r22
    52dc:	75 95       	asr	r23
    52de:	67 95       	ror	r22
    52e0:	75 95       	asr	r23
    52e2:	67 95       	ror	r22
    52e4:	88 27       	eor	r24, r24
    52e6:	77 fd       	sbrc	r23, 7
    52e8:	80 95       	com	r24
    52ea:	98 2f       	mov	r25, r24
    52ec:	0e 94 91 54 	call	0xa922	; 0xa922 <__floatsisf>
    52f0:	9b 01       	movw	r18, r22
    52f2:	ac 01       	movw	r20, r24
    52f4:	60 91 e1 02 	lds	r22, 0x02E1
    52f8:	70 91 e2 02 	lds	r23, 0x02E2
    52fc:	80 91 e3 02 	lds	r24, 0x02E3
    5300:	90 91 e4 02 	lds	r25, 0x02E4
    5304:	0e 94 29 53 	call	0xa652	; 0xa652 <__addsf3>
    5308:	60 93 e1 02 	sts	0x02E1, r22
    530c:	70 93 e2 02 	sts	0x02E2, r23
    5310:	80 93 e3 02 	sts	0x02E3, r24
    5314:	90 93 e4 02 	sts	0x02E4, r25
		} else {
			rightMotSteps -= (last_right_vel>>3);
		}
	}

	pwm_right_working = pwm_intermediate_right_desired*BYTE_TO_MM_S;	// pwm in the range -635..635 (127*BYTE_TO_MM_S)
    5318:	20 91 0d 03 	lds	r18, 0x030D
    531c:	30 91 0e 03 	lds	r19, 0x030E
    5320:	c9 01       	movw	r24, r18
    5322:	88 0f       	add	r24, r24
    5324:	99 1f       	adc	r25, r25
    5326:	88 0f       	add	r24, r24
    5328:	99 1f       	adc	r25, r25
    532a:	82 0f       	add	r24, r18
    532c:	93 1f       	adc	r25, r19
    532e:	90 93 1e 03 	sts	0x031E, r25
    5332:	80 93 1d 03 	sts	0x031D, r24
	pwm_left_working = pwm_intermediate_left_desired*BYTE_TO_MM_S;	
    5336:	40 91 0f 03 	lds	r20, 0x030F
    533a:	50 91 10 03 	lds	r21, 0x0310
    533e:	9a 01       	movw	r18, r20
    5340:	22 0f       	add	r18, r18
    5342:	33 1f       	adc	r19, r19
    5344:	22 0f       	add	r18, r18
    5346:	33 1f       	adc	r19, r19
    5348:	24 0f       	add	r18, r20
    534a:	35 1f       	adc	r19, r21
    534c:	52 2f       	mov	r21, r18
    534e:	43 2f       	mov	r20, r19
    5350:	20 93 1f 03 	sts	0x031F, r18
    5354:	30 93 20 03 	sts	0x0320, r19
	if(obstacleAvoidanceEnabled) {
    5358:	20 91 7c 04 	lds	r18, 0x047C
    535c:	22 23       	and	r18, r18
    535e:	39 f5       	brne	.+78     	; 0x53ae <handleMotorsWithNoController+0x186>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);		// out is in the range -MAX_MOTORS_PWM/2..MAX_MOTORS_PWM/2
	}
	//pwm_left_desired_to_control = cast_speed(pwm_left_working);		// pwm in the range -MAX_MOTORS_PWM/2..MAX_MOTORS_PWM/2
	//pwm_right_desired_to_control = cast_speed(pwm_right_working);

	pwm_left = pwm_left_working;
    5360:	50 93 07 03 	sts	0x0307, r21
    5364:	40 93 08 03 	sts	0x0308, r20
	pwm_right = pwm_right_working;
    5368:	90 93 06 03 	sts	0x0306, r25
    536c:	80 93 05 03 	sts	0x0305, r24

	if(pwm_right > 0) {
    5370:	18 16       	cp	r1, r24
    5372:	19 06       	cpc	r1, r25
    5374:	5c f5       	brge	.+86     	; 0x53cc <handleMotorsWithNoController+0x1a4>
		OCR3A = (unsigned int)pwm_right;
    5376:	90 93 99 00 	sts	0x0099, r25
    537a:	80 93 98 00 	sts	0x0098, r24
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
		OCR3B = 0;
	}
	if(pwm_left > 0) {
    537e:	80 91 07 03 	lds	r24, 0x0307
    5382:	90 91 08 03 	lds	r25, 0x0308
    5386:	18 16       	cp	r1, r24
    5388:	19 06       	cpc	r1, r25
    538a:	2c f4       	brge	.+10     	; 0x5396 <handleMotorsWithNoController+0x16e>
		OCR4A = (unsigned int)pwm_left;
    538c:	90 93 a9 00 	sts	0x00A9, r25
    5390:	80 93 a8 00 	sts	0x00A8, r24
    5394:	08 95       	ret
	} else if(pwm_left < 0) {
    5396:	00 97       	sbiw	r24, 0x00	; 0
    5398:	09 f0       	breq	.+2      	; 0x539c <handleMotorsWithNoController+0x174>
    539a:	6e c0       	rjmp	.+220    	; 0x5478 <handleMotorsWithNoController+0x250>
		OCR4B =(unsigned int)( -pwm_left);
	} else {
		OCR4A = 0;
    539c:	10 92 a9 00 	sts	0x00A9, r1
    53a0:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    53a4:	10 92 ab 00 	sts	0x00AB, r1
    53a8:	10 92 aa 00 	sts	0x00AA, r1
    53ac:	08 95       	ret
	}

	pwm_right_working = pwm_intermediate_right_desired*BYTE_TO_MM_S;	// pwm in the range -635..635 (127*BYTE_TO_MM_S)
	pwm_left_working = pwm_intermediate_left_desired*BYTE_TO_MM_S;	
	if(obstacleAvoidanceEnabled) {
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);		// out is in the range -MAX_MOTORS_PWM/2..MAX_MOTORS_PWM/2
    53ae:	8f e1       	ldi	r24, 0x1F	; 31
    53b0:	93 e0       	ldi	r25, 0x03	; 3
    53b2:	6d e1       	ldi	r22, 0x1D	; 29
    53b4:	73 e0       	ldi	r23, 0x03	; 3
    53b6:	0e 94 1b 3c 	call	0x7836	; 0x7836 <obstacleAvoidance>
    53ba:	50 91 1f 03 	lds	r21, 0x031F
    53be:	40 91 20 03 	lds	r20, 0x0320
    53c2:	80 91 1d 03 	lds	r24, 0x031D
    53c6:	90 91 1e 03 	lds	r25, 0x031E
    53ca:	ca cf       	rjmp	.-108    	; 0x5360 <handleMotorsWithNoController+0x138>
	pwm_left = pwm_left_working;
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
    53cc:	00 97       	sbiw	r24, 0x00	; 0
    53ce:	09 f0       	breq	.+2      	; 0x53d2 <handleMotorsWithNoController+0x1aa>
    53d0:	4b c0       	rjmp	.+150    	; 0x5468 <handleMotorsWithNoController+0x240>
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
    53d2:	10 92 99 00 	sts	0x0099, r1
    53d6:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    53da:	10 92 9b 00 	sts	0x009B, r1
    53de:	10 92 9a 00 	sts	0x009A, r1
    53e2:	cd cf       	rjmp	.-102    	; 0x537e <handleMotorsWithNoController+0x156>
		right_vel_sum = 0;

		if(pwm_right_desired >= 0) {
			rightMotSteps += (last_right_vel>>3);
		} else {
			rightMotSteps -= (last_right_vel>>3);
    53e4:	75 95       	asr	r23
    53e6:	67 95       	ror	r22
    53e8:	75 95       	asr	r23
    53ea:	67 95       	ror	r22
    53ec:	75 95       	asr	r23
    53ee:	67 95       	ror	r22
    53f0:	88 27       	eor	r24, r24
    53f2:	77 fd       	sbrc	r23, 7
    53f4:	80 95       	com	r24
    53f6:	98 2f       	mov	r25, r24
    53f8:	0e 94 91 54 	call	0xa922	; 0xa922 <__floatsisf>
    53fc:	9b 01       	movw	r18, r22
    53fe:	ac 01       	movw	r20, r24
    5400:	60 91 e1 02 	lds	r22, 0x02E1
    5404:	70 91 e2 02 	lds	r23, 0x02E2
    5408:	80 91 e3 02 	lds	r24, 0x02E3
    540c:	90 91 e4 02 	lds	r25, 0x02E4
    5410:	0e 94 28 53 	call	0xa650	; 0xa650 <__subsf3>
    5414:	60 93 e1 02 	sts	0x02E1, r22
    5418:	70 93 e2 02 	sts	0x02E2, r23
    541c:	80 93 e3 02 	sts	0x02E3, r24
    5420:	90 93 e4 02 	sts	0x02E4, r25
    5424:	79 cf       	rjmp	.-270    	; 0x5318 <handleMotorsWithNoController+0xf0>
		left_vel_sum = 0;

		if(pwm_left_desired >= 0) {
			leftMotSteps += (last_left_vel>>3);
		} else {
			leftMotSteps -= (last_left_vel>>3);
    5426:	75 95       	asr	r23
    5428:	67 95       	ror	r22
    542a:	75 95       	asr	r23
    542c:	67 95       	ror	r22
    542e:	75 95       	asr	r23
    5430:	67 95       	ror	r22
    5432:	88 27       	eor	r24, r24
    5434:	77 fd       	sbrc	r23, 7
    5436:	80 95       	com	r24
    5438:	98 2f       	mov	r25, r24
    543a:	0e 94 91 54 	call	0xa922	; 0xa922 <__floatsisf>
    543e:	9b 01       	movw	r18, r22
    5440:	ac 01       	movw	r20, r24
    5442:	60 91 e5 02 	lds	r22, 0x02E5
    5446:	70 91 e6 02 	lds	r23, 0x02E6
    544a:	80 91 e7 02 	lds	r24, 0x02E7
    544e:	90 91 e8 02 	lds	r25, 0x02E8
    5452:	0e 94 28 53 	call	0xa650	; 0xa650 <__subsf3>
    5456:	60 93 e5 02 	sts	0x02E5, r22
    545a:	70 93 e6 02 	sts	0x02E6, r23
    545e:	80 93 e7 02 	sts	0x02E7, r24
    5462:	90 93 e8 02 	sts	0x02E8, r25
    5466:	1c cf       	rjmp	.-456    	; 0x52a0 <handleMotorsWithNoController+0x78>
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
		OCR3B = (unsigned int)(-pwm_right);
    5468:	90 95       	com	r25
    546a:	81 95       	neg	r24
    546c:	9f 4f       	sbci	r25, 0xFF	; 255
    546e:	90 93 9b 00 	sts	0x009B, r25
    5472:	80 93 9a 00 	sts	0x009A, r24
    5476:	83 cf       	rjmp	.-250    	; 0x537e <handleMotorsWithNoController+0x156>
		OCR3B = 0;
	}
	if(pwm_left > 0) {
		OCR4A = (unsigned int)pwm_left;
	} else if(pwm_left < 0) {
		OCR4B =(unsigned int)( -pwm_left);
    5478:	90 95       	com	r25
    547a:	81 95       	neg	r24
    547c:	9f 4f       	sbci	r25, 0xFF	; 255
    547e:	90 93 ab 00 	sts	0x00AB, r25
    5482:	80 93 aa 00 	sts	0x00AA, r24
    5486:	08 95       	ret

00005488 <setLeftSpeed>:
}

// vel expressed in 1/5 of mm/s
void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    5488:	28 2f       	mov	r18, r24
    548a:	33 27       	eor	r19, r19
    548c:	27 fd       	sbrc	r18, 7
    548e:	30 95       	com	r19
    5490:	37 fd       	sbrc	r19, 7
    5492:	13 c0       	rjmp	.+38     	; 0x54ba <setLeftSpeed+0x32>
    5494:	30 93 22 03 	sts	0x0322, r19
    5498:	20 93 21 03 	sts	0x0321, r18

    if(vel >= 0) {
    549c:	87 fd       	sbrc	r24, 7
    549e:	05 c0       	rjmp	.+10     	; 0x54aa <setLeftSpeed+0x22>
        pwm_left_desired = speedl;
    } else {
        pwm_left_desired = -(speedl);
    54a0:	30 93 0c 03 	sts	0x030C, r19
    54a4:	20 93 0b 03 	sts	0x030B, r18
    54a8:	08 95       	ret
    54aa:	30 95       	com	r19
    54ac:	21 95       	neg	r18
    54ae:	3f 4f       	sbci	r19, 0xFF	; 255
    54b0:	30 93 0c 03 	sts	0x030C, r19
    54b4:	20 93 0b 03 	sts	0x030B, r18
    54b8:	08 95       	ret
}

// vel expressed in 1/5 of mm/s
void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    54ba:	30 95       	com	r19
    54bc:	21 95       	neg	r18
    54be:	3f 4f       	sbci	r19, 0xFF	; 255
    54c0:	e9 cf       	rjmp	.-46     	; 0x5494 <setLeftSpeed+0xc>

000054c2 <setRightSpeed>:

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    54c2:	28 2f       	mov	r18, r24
    54c4:	33 27       	eor	r19, r19
    54c6:	27 fd       	sbrc	r18, 7
    54c8:	30 95       	com	r19
    54ca:	37 fd       	sbrc	r19, 7
    54cc:	13 c0       	rjmp	.+38     	; 0x54f4 <setRightSpeed+0x32>
    54ce:	30 93 24 03 	sts	0x0324, r19
    54d2:	20 93 23 03 	sts	0x0323, r18

    if(vel >= 0) {
    54d6:	87 fd       	sbrc	r24, 7
    54d8:	05 c0       	rjmp	.+10     	; 0x54e4 <setRightSpeed+0x22>
        pwm_right_desired = speedr;
    } else {
        pwm_right_desired = -(speedr);
    54da:	30 93 0a 03 	sts	0x030A, r19
    54de:	20 93 09 03 	sts	0x0309, r18
    54e2:	08 95       	ret
    54e4:	30 95       	com	r19
    54e6:	21 95       	neg	r18
    54e8:	3f 4f       	sbci	r19, 0xFF	; 255
    54ea:	30 93 0a 03 	sts	0x030A, r19
    54ee:	20 93 09 03 	sts	0x0309, r18
    54f2:	08 95       	ret

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    54f4:	30 95       	com	r19
    54f6:	21 95       	neg	r18
    54f8:	3f 4f       	sbci	r19, 0xFF	; 255
    54fa:	e9 cf       	rjmp	.-46     	; 0x54ce <setRightSpeed+0xc>

000054fc <updateOdomData>:
}


void updateOdomData() {

    if(calibWheel == LEFT_WHEEL_FW_SC) {
    54fc:	80 91 55 05 	lds	r24, 0x0555
    5500:	88 23       	and	r24, r24
    5502:	89 f5       	brne	.+98     	; 0x5566 <updateOdomData+0x6a>
        if(calibVelIndex>1) {
    5504:	e0 91 bd 08 	lds	r30, 0x08BD
    5508:	e2 30       	cpi	r30, 0x02	; 2
    550a:	08 f4       	brcc	.+2      	; 0x550e <updateOdomData+0x12>
    550c:	96 c0       	rjmp	.+300    	; 0x563a <updateOdomData+0x13e>
            if(calibration[calibVelIndex-2][1] >= tempVel) {  // check that we have always increasing values of speed, otherwise there
    550e:	f0 e0       	ldi	r31, 0x00	; 0
    5510:	df 01       	movw	r26, r30
    5512:	a2 95       	swap	r26
    5514:	b2 95       	swap	r27
    5516:	b0 7f       	andi	r27, 0xF0	; 240
    5518:	ba 27       	eor	r27, r26
    551a:	a0 7f       	andi	r26, 0xF0	; 240
    551c:	ba 27       	eor	r27, r26
    551e:	ac 53       	subi	r26, 0x3C	; 60
    5520:	b7 4f       	sbci	r27, 0xF7	; 247
    5522:	12 96       	adiw	r26, 0x02	; 2
    5524:	2d 91       	ld	r18, X+
    5526:	3c 91       	ld	r19, X
    5528:	13 97       	sbiw	r26, 0x03	; 3
    552a:	80 91 78 0b 	lds	r24, 0x0B78
    552e:	90 91 79 0b 	lds	r25, 0x0B79
    5532:	28 17       	cp	r18, r24
    5534:	39 07       	cpc	r19, r25
    5536:	34 f0       	brlt	.+12     	; 0x5544 <updateOdomData+0x48>
                tempVel = calibration[calibVelIndex-2][1]+1; // will be problems when getting data from the lookup table
    5538:	c9 01       	movw	r24, r18
    553a:	01 96       	adiw	r24, 0x01	; 1
    553c:	90 93 79 0b 	sts	0x0B79, r25
    5540:	80 93 78 0b 	sts	0x0B78, r24
            }
        }
        calibration[calibVelIndex-1][0] = avgLeftSpeed;
    5544:	e2 95       	swap	r30
    5546:	f2 95       	swap	r31
    5548:	f0 7f       	andi	r31, 0xF0	; 240
    554a:	fe 27       	eor	r31, r30
    554c:	e0 7f       	andi	r30, 0xF0	; 240
    554e:	fe 27       	eor	r31, r30
    5550:	ec 52       	subi	r30, 0x2C	; 44
    5552:	f7 4f       	sbci	r31, 0xF7	; 247
    5554:	20 91 c4 04 	lds	r18, 0x04C4
    5558:	30 91 c5 04 	lds	r19, 0x04C5
    555c:	31 83       	std	Z+1, r19	; 0x01
    555e:	20 83       	st	Z, r18
        calibration[calibVelIndex-1][1] = tempVel;
    5560:	93 83       	std	Z+3, r25	; 0x03
    5562:	82 83       	std	Z+2, r24	; 0x02
    5564:	08 95       	ret
    } else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    5566:	81 30       	cpi	r24, 0x01	; 1
    5568:	31 f0       	breq	.+12     	; 0x5576 <updateOdomData+0x7a>
                tempVel = calibration[calibVelIndex-2][3]+1;
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
        calibration[calibVelIndex-1][3] = tempVel;
    } else if(calibWheel == LEFT_WHEEL_BW_SC) {
    556a:	82 30       	cpi	r24, 0x02	; 2
    556c:	09 f4       	brne	.+2      	; 0x5570 <updateOdomData+0x74>
    556e:	6b c0       	rjmp	.+214    	; 0x5646 <updateOdomData+0x14a>
                tempVel = calibration[calibVelIndex-2][5]+1;
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
        calibration[calibVelIndex-1][5] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    5570:	83 30       	cpi	r24, 0x03	; 3
    5572:	91 f1       	breq	.+100    	; 0x55d8 <updateOdomData+0xdc>
    5574:	08 95       	ret
            }
        }
        calibration[calibVelIndex-1][0] = avgLeftSpeed;
        calibration[calibVelIndex-1][1] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_FW_SC) {
        if(calibVelIndex>1) {
    5576:	e0 91 bd 08 	lds	r30, 0x08BD
    557a:	e2 30       	cpi	r30, 0x02	; 2
    557c:	08 f4       	brcc	.+2      	; 0x5580 <updateOdomData+0x84>
    557e:	93 c0       	rjmp	.+294    	; 0x56a6 <updateOdomData+0x1aa>
            if(calibration[calibVelIndex-2][3] >= tempVel) {
    5580:	f0 e0       	ldi	r31, 0x00	; 0
    5582:	df 01       	movw	r26, r30
    5584:	a2 95       	swap	r26
    5586:	b2 95       	swap	r27
    5588:	b0 7f       	andi	r27, 0xF0	; 240
    558a:	ba 27       	eor	r27, r26
    558c:	a0 7f       	andi	r26, 0xF0	; 240
    558e:	ba 27       	eor	r27, r26
    5590:	ac 53       	subi	r26, 0x3C	; 60
    5592:	b7 4f       	sbci	r27, 0xF7	; 247
    5594:	16 96       	adiw	r26, 0x06	; 6
    5596:	2d 91       	ld	r18, X+
    5598:	3c 91       	ld	r19, X
    559a:	17 97       	sbiw	r26, 0x07	; 7
    559c:	80 91 78 0b 	lds	r24, 0x0B78
    55a0:	90 91 79 0b 	lds	r25, 0x0B79
    55a4:	28 17       	cp	r18, r24
    55a6:	39 07       	cpc	r19, r25
    55a8:	34 f0       	brlt	.+12     	; 0x55b6 <updateOdomData+0xba>
                tempVel = calibration[calibVelIndex-2][3]+1;
    55aa:	c9 01       	movw	r24, r18
    55ac:	01 96       	adiw	r24, 0x01	; 1
    55ae:	90 93 79 0b 	sts	0x0B79, r25
    55b2:	80 93 78 0b 	sts	0x0B78, r24
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
    55b6:	e2 95       	swap	r30
    55b8:	f2 95       	swap	r31
    55ba:	f0 7f       	andi	r31, 0xF0	; 240
    55bc:	fe 27       	eor	r31, r30
    55be:	e0 7f       	andi	r30, 0xF0	; 240
    55c0:	fe 27       	eor	r31, r30
    55c2:	ec 52       	subi	r30, 0x2C	; 44
    55c4:	f7 4f       	sbci	r31, 0xF7	; 247
    55c6:	20 91 c6 04 	lds	r18, 0x04C6
    55ca:	30 91 c7 04 	lds	r19, 0x04C7
    55ce:	35 83       	std	Z+5, r19	; 0x05
    55d0:	24 83       	std	Z+4, r18	; 0x04
        calibration[calibVelIndex-1][3] = tempVel;
    55d2:	97 83       	std	Z+7, r25	; 0x07
    55d4:	86 83       	std	Z+6, r24	; 0x06
    55d6:	08 95       	ret
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
        calibration[calibVelIndex-1][5] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    55d8:	e0 91 bd 08 	lds	r30, 0x08BD
    55dc:	e2 30       	cpi	r30, 0x02	; 2
    55de:	08 f4       	brcc	.+2      	; 0x55e2 <updateOdomData+0xe6>
    55e0:	68 c0       	rjmp	.+208    	; 0x56b2 <updateOdomData+0x1b6>
            if(calibration[calibVelIndex-2][7] >= tempVel) {
    55e2:	f0 e0       	ldi	r31, 0x00	; 0
    55e4:	df 01       	movw	r26, r30
    55e6:	a2 95       	swap	r26
    55e8:	b2 95       	swap	r27
    55ea:	b0 7f       	andi	r27, 0xF0	; 240
    55ec:	ba 27       	eor	r27, r26
    55ee:	a0 7f       	andi	r26, 0xF0	; 240
    55f0:	ba 27       	eor	r27, r26
    55f2:	ac 53       	subi	r26, 0x3C	; 60
    55f4:	b7 4f       	sbci	r27, 0xF7	; 247
    55f6:	1e 96       	adiw	r26, 0x0e	; 14
    55f8:	2d 91       	ld	r18, X+
    55fa:	3c 91       	ld	r19, X
    55fc:	1f 97       	sbiw	r26, 0x0f	; 15
    55fe:	80 91 78 0b 	lds	r24, 0x0B78
    5602:	90 91 79 0b 	lds	r25, 0x0B79
    5606:	28 17       	cp	r18, r24
    5608:	39 07       	cpc	r19, r25
    560a:	34 f0       	brlt	.+12     	; 0x5618 <updateOdomData+0x11c>
                tempVel = calibration[calibVelIndex-2][7]+1;
    560c:	c9 01       	movw	r24, r18
    560e:	01 96       	adiw	r24, 0x01	; 1
    5610:	90 93 79 0b 	sts	0x0B79, r25
    5614:	80 93 78 0b 	sts	0x0B78, r24
            }
        }
		calibration[calibVelIndex-1][6] = avgRightSpeed;
    5618:	e2 95       	swap	r30
    561a:	f2 95       	swap	r31
    561c:	f0 7f       	andi	r31, 0xF0	; 240
    561e:	fe 27       	eor	r31, r30
    5620:	e0 7f       	andi	r30, 0xF0	; 240
    5622:	fe 27       	eor	r31, r30
    5624:	ec 52       	subi	r30, 0x2C	; 44
    5626:	f7 4f       	sbci	r31, 0xF7	; 247
    5628:	20 91 c6 04 	lds	r18, 0x04C6
    562c:	30 91 c7 04 	lds	r19, 0x04C7
    5630:	35 87       	std	Z+13, r19	; 0x0d
    5632:	24 87       	std	Z+12, r18	; 0x0c
        calibration[calibVelIndex-1][7] = tempVel;
    5634:	97 87       	std	Z+15, r25	; 0x0f
    5636:	86 87       	std	Z+14, r24	; 0x0e
    5638:	08 95       	ret


void updateOdomData() {

    if(calibWheel == LEFT_WHEEL_FW_SC) {
        if(calibVelIndex>1) {
    563a:	f0 e0       	ldi	r31, 0x00	; 0
    563c:	80 91 78 0b 	lds	r24, 0x0B78
    5640:	90 91 79 0b 	lds	r25, 0x0B79
    5644:	7f cf       	rjmp	.-258    	; 0x5544 <updateOdomData+0x48>
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
        calibration[calibVelIndex-1][3] = tempVel;
    } else if(calibWheel == LEFT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    5646:	e0 91 bd 08 	lds	r30, 0x08BD
    564a:	e2 30       	cpi	r30, 0x02	; 2
    564c:	c0 f1       	brcs	.+112    	; 0x56be <updateOdomData+0x1c2>
            if(calibration[calibVelIndex-2][5] >= tempVel) {
    564e:	f0 e0       	ldi	r31, 0x00	; 0
    5650:	df 01       	movw	r26, r30
    5652:	a2 95       	swap	r26
    5654:	b2 95       	swap	r27
    5656:	b0 7f       	andi	r27, 0xF0	; 240
    5658:	ba 27       	eor	r27, r26
    565a:	a0 7f       	andi	r26, 0xF0	; 240
    565c:	ba 27       	eor	r27, r26
    565e:	ac 53       	subi	r26, 0x3C	; 60
    5660:	b7 4f       	sbci	r27, 0xF7	; 247
    5662:	1a 96       	adiw	r26, 0x0a	; 10
    5664:	2d 91       	ld	r18, X+
    5666:	3c 91       	ld	r19, X
    5668:	1b 97       	sbiw	r26, 0x0b	; 11
    566a:	80 91 78 0b 	lds	r24, 0x0B78
    566e:	90 91 79 0b 	lds	r25, 0x0B79
    5672:	28 17       	cp	r18, r24
    5674:	39 07       	cpc	r19, r25
    5676:	34 f0       	brlt	.+12     	; 0x5684 <updateOdomData+0x188>
                tempVel = calibration[calibVelIndex-2][5]+1;
    5678:	c9 01       	movw	r24, r18
    567a:	01 96       	adiw	r24, 0x01	; 1
    567c:	90 93 79 0b 	sts	0x0B79, r25
    5680:	80 93 78 0b 	sts	0x0B78, r24
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
    5684:	e2 95       	swap	r30
    5686:	f2 95       	swap	r31
    5688:	f0 7f       	andi	r31, 0xF0	; 240
    568a:	fe 27       	eor	r31, r30
    568c:	e0 7f       	andi	r30, 0xF0	; 240
    568e:	fe 27       	eor	r31, r30
    5690:	ec 52       	subi	r30, 0x2C	; 44
    5692:	f7 4f       	sbci	r31, 0xF7	; 247
    5694:	20 91 c4 04 	lds	r18, 0x04C4
    5698:	30 91 c5 04 	lds	r19, 0x04C5
    569c:	31 87       	std	Z+9, r19	; 0x09
    569e:	20 87       	std	Z+8, r18	; 0x08
        calibration[calibVelIndex-1][5] = tempVel;
    56a0:	93 87       	std	Z+11, r25	; 0x0b
    56a2:	82 87       	std	Z+10, r24	; 0x0a
    56a4:	08 95       	ret
            }
        }
        calibration[calibVelIndex-1][0] = avgLeftSpeed;
        calibration[calibVelIndex-1][1] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_FW_SC) {
        if(calibVelIndex>1) {
    56a6:	f0 e0       	ldi	r31, 0x00	; 0
    56a8:	80 91 78 0b 	lds	r24, 0x0B78
    56ac:	90 91 79 0b 	lds	r25, 0x0B79
    56b0:	82 cf       	rjmp	.-252    	; 0x55b6 <updateOdomData+0xba>
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
        calibration[calibVelIndex-1][5] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    56b2:	f0 e0       	ldi	r31, 0x00	; 0
    56b4:	80 91 78 0b 	lds	r24, 0x0B78
    56b8:	90 91 79 0b 	lds	r25, 0x0B79
    56bc:	ad cf       	rjmp	.-166    	; 0x5618 <updateOdomData+0x11c>
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
        calibration[calibVelIndex-1][3] = tempVel;
    } else if(calibWheel == LEFT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    56be:	f0 e0       	ldi	r31, 0x00	; 0
    56c0:	80 91 78 0b 	lds	r24, 0x0B78
    56c4:	90 91 79 0b 	lds	r25, 0x0B79
    56c8:	dd cf       	rjmp	.-70     	; 0x5684 <updateOdomData+0x188>

000056ca <handleCalibration>:

}

void handleCalibration() {

	switch(calibState) {
    56ca:	80 91 63 0b 	lds	r24, 0x0B63
    56ce:	82 30       	cpi	r24, 0x02	; 2
    56d0:	09 f4       	brne	.+2      	; 0x56d4 <handleCalibration+0xa>
    56d2:	d0 c0       	rjmp	.+416    	; 0x5874 <handleCalibration+0x1aa>
    56d4:	83 30       	cpi	r24, 0x03	; 3
    56d6:	08 f4       	brcc	.+2      	; 0x56da <handleCalibration+0x10>
    56d8:	3f c0       	rjmp	.+126    	; 0x5758 <handleCalibration+0x8e>
    56da:	84 30       	cpi	r24, 0x04	; 4
    56dc:	09 f4       	brne	.+2      	; 0x56e0 <handleCalibration+0x16>
    56de:	91 c0       	rjmp	.+290    	; 0x5802 <handleCalibration+0x138>
    56e0:	84 30       	cpi	r24, 0x04	; 4
    56e2:	08 f0       	brcs	.+2      	; 0x56e6 <handleCalibration+0x1c>
    56e4:	63 c0       	rjmp	.+198    	; 0x57ac <handleCalibration+0xe2>
                calibState = 5;
			}
            break;

		case 3: // look for black line again, stop time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    56e6:	80 91 55 05 	lds	r24, 0x0555
    56ea:	88 23       	and	r24, r24
    56ec:	09 f4       	brne	.+2      	; 0x56f0 <handleCalibration+0x26>
    56ee:	e1 c0       	rjmp	.+450    	; 0x58b2 <handleCalibration+0x1e8>
    56f0:	82 30       	cpi	r24, 0x02	; 2
    56f2:	09 f4       	brne	.+2      	; 0x56f6 <handleCalibration+0x2c>
    56f4:	de c0       	rjmp	.+444    	; 0x58b2 <handleCalibration+0x1e8>
                    updateOdomData();
                    calibState = 4;
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
            	if(proximityResult[11] < CALIBRATION_LOW_THR) {
    56f6:	80 91 7f 02 	lds	r24, 0x027F
    56fa:	90 91 80 02 	lds	r25, 0x0280
    56fe:	21 e0       	ldi	r18, 0x01	; 1
    5700:	86 38       	cpi	r24, 0x86	; 134
    5702:	92 07       	cpc	r25, r18
    5704:	0c f4       	brge	.+2      	; 0x5708 <handleCalibration+0x3e>
    5706:	8a c1       	rjmp	.+788    	; 0x5a1c <handleCalibration+0x352>
					updateOdomData();
                    calibState = 4;
                    timeoutOdometry = getTime100MicroSec();;
				}
			}
			if((getTime100MicroSec() - timeoutOdometry)>PAUSE_60_SEC) {    // the robot seems to be still, go to next velcoity
    5708:	0e 94 35 22 	call	0x446a	; 0x446a <getTime100MicroSec>
    570c:	20 91 33 0b 	lds	r18, 0x0B33
    5710:	30 91 34 0b 	lds	r19, 0x0B34
    5714:	40 91 35 0b 	lds	r20, 0x0B35
    5718:	50 91 36 0b 	lds	r21, 0x0B36
    571c:	62 1b       	sub	r22, r18
    571e:	73 0b       	sbc	r23, r19
    5720:	84 0b       	sbc	r24, r20
    5722:	95 0b       	sbc	r25, r21
    5724:	6c 39       	cpi	r22, 0x9C	; 156
    5726:	2d ec       	ldi	r18, 0xCD	; 205
    5728:	72 07       	cpc	r23, r18
    572a:	28 e0       	ldi	r18, 0x08	; 8
    572c:	82 07       	cpc	r24, r18
    572e:	20 e0       	ldi	r18, 0x00	; 0
    5730:	92 07       	cpc	r25, r18
    5732:	d8 f1       	brcs	.+118    	; 0x57aa <handleCalibration+0xe0>
            	tempVel = 0;
    5734:	10 92 79 0b 	sts	0x0B79, r1
    5738:	10 92 78 0b 	sts	0x0B78, r1
				avgLeftSpeed = 0;
    573c:	10 92 c5 04 	sts	0x04C5, r1
    5740:	10 92 c4 04 	sts	0x04C4, r1
				avgRightSpeed = 0;
    5744:	10 92 c7 04 	sts	0x04C7, r1
    5748:	10 92 c6 04 	sts	0x04C6, r1
                updateOdomData();
    574c:	0e 94 7e 2a 	call	0x54fc	; 0x54fc <updateOdomData>
                calibState = 5;
    5750:	85 e0       	ldi	r24, 0x05	; 5
    5752:	80 93 63 0b 	sts	0x0B63, r24
    5756:	08 95       	ret

}

void handleCalibration() {

	switch(calibState) {
    5758:	88 23       	and	r24, r24
    575a:	29 f5       	brne	.+74     	; 0x57a6 <handleCalibration+0xdc>

    	case 0: // set speed
        	if(calibWheel == LEFT_WHEEL_FW_SC) {
    575c:	80 91 55 05 	lds	r24, 0x0555
    5760:	88 23       	and	r24, r24
    5762:	09 f0       	breq	.+2      	; 0x5766 <handleCalibration+0x9c>
    5764:	3c c1       	rjmp	.+632    	; 0x59de <handleCalibration+0x314>
				pwm_intermediate_right_desired = 0;
    5766:	10 92 0e 03 	sts	0x030E, r1
    576a:	10 92 0d 03 	sts	0x030D, r1
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
    576e:	90 91 bd 08 	lds	r25, 0x08BD
    5772:	85 e0       	ldi	r24, 0x05	; 5
    5774:	98 9f       	mul	r25, r24
    5776:	c0 01       	movw	r24, r0
    5778:	11 24       	eor	r1, r1
    577a:	88 0f       	add	r24, r24
    577c:	99 1f       	adc	r25, r25
    577e:	88 0f       	add	r24, r24
    5780:	99 1f       	adc	r25, r25
    5782:	90 93 10 03 	sts	0x0310, r25
    5786:	80 93 0f 03 	sts	0x030F, r24
				pwm_intermediate_left_desired = -((INDEX_STEP*calibVelIndex)<<2);
        	} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
				pwm_intermediate_right_desired = -((INDEX_STEP*calibVelIndex)<<2);
				pwm_intermediate_left_desired = 0;
			}               
            calibState = 1;
    578a:	81 e0       	ldi	r24, 0x01	; 1
    578c:	80 93 63 0b 	sts	0x0B63, r24
            timeoutOdometry = getTime100MicroSec();
    5790:	0e 94 35 22 	call	0x446a	; 0x446a <getTime100MicroSec>
    5794:	60 93 33 0b 	sts	0x0B33, r22
    5798:	70 93 34 0b 	sts	0x0B34, r23
    579c:	80 93 35 0b 	sts	0x0B35, r24
    57a0:	90 93 36 0b 	sts	0x0B36, r25
            break;
    57a4:	08 95       	ret

}

void handleCalibration() {

	switch(calibState) {
    57a6:	81 30       	cpi	r24, 0x01	; 1
    57a8:	71 f0       	breq	.+28     	; 0x57c6 <handleCalibration+0xfc>
    57aa:	08 95       	ret
    57ac:	85 30       	cpi	r24, 0x05	; 5
    57ae:	e9 f7       	brne	.-6      	; 0x57aa <handleCalibration+0xe0>
                calibState = 5;
			}
            break;

		case 5:
        	calibVelIndex++;
    57b0:	80 91 bd 08 	lds	r24, 0x08BD
    57b4:	8f 5f       	subi	r24, 0xFF	; 255
    57b6:	80 93 bd 08 	sts	0x08BD, r24
            if(calibVelIndex == 10) {
    57ba:	8a 30       	cpi	r24, 0x0A	; 10
    57bc:	09 f4       	brne	.+2      	; 0x57c0 <handleCalibration+0xf6>
    57be:	8b c1       	rjmp	.+790    	; 0x5ad6 <handleCalibration+0x40c>
					// red off
					writeCalibrationToFlash();
					calibrateOdomFlag = 0;
				}
			}
			calibState = 0;
    57c0:	10 92 63 0b 	sts	0x0B63, r1
    57c4:	08 95       	ret
            calibState = 1;
            timeoutOdometry = getTime100MicroSec();
            break;

		case 1: // look for black line, start time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    57c6:	80 91 55 05 	lds	r24, 0x0555
    57ca:	88 23       	and	r24, r24
    57cc:	09 f4       	brne	.+2      	; 0x57d0 <handleCalibration+0x106>
    57ce:	d0 c0       	rjmp	.+416    	; 0x5970 <handleCalibration+0x2a6>
    57d0:	82 30       	cpi	r24, 0x02	; 2
    57d2:	09 f4       	brne	.+2      	; 0x57d6 <handleCalibration+0x10c>
    57d4:	cd c0       	rjmp	.+410    	; 0x5970 <handleCalibration+0x2a6>
                    timeOdometry = getTime100MicroSec();;
                    calibState = 2;
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
            	if(proximityResult[11] < CALIBRATION_LOW_THR) {
    57d6:	80 91 7f 02 	lds	r24, 0x027F
    57da:	90 91 80 02 	lds	r25, 0x0280
    57de:	21 e0       	ldi	r18, 0x01	; 1
    57e0:	86 38       	cpi	r24, 0x86	; 134
    57e2:	92 07       	cpc	r25, r18
    57e4:	0c f0       	brlt	.+2      	; 0x57e8 <handleCalibration+0x11e>
    57e6:	90 cf       	rjmp	.-224    	; 0x5708 <handleCalibration+0x3e>
				//if((proximityResult[11])<(proximityOffset[11]>>1)) {	
					rightSumCount = 0;
    57e8:	10 92 c3 04 	sts	0x04C3, r1
    57ec:	10 92 c2 04 	sts	0x04C2, r1
					rightSpeedSumOdom = 0;
    57f0:	10 92 bc 04 	sts	0x04BC, r1
    57f4:	10 92 bd 04 	sts	0x04BD, r1
    57f8:	10 92 be 04 	sts	0x04BE, r1
    57fc:	10 92 bf 04 	sts	0x04BF, r1
    5800:	cc c0       	rjmp	.+408    	; 0x599a <handleCalibration+0x2d0>
                calibState = 5;
			}
            break;

		case 4: // exit from black line again
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    5802:	80 91 55 05 	lds	r24, 0x0555
    5806:	88 23       	and	r24, r24
    5808:	49 f1       	breq	.+82     	; 0x585c <handleCalibration+0x192>
    580a:	82 30       	cpi	r24, 0x02	; 2
    580c:	39 f1       	breq	.+78     	; 0x585c <handleCalibration+0x192>
            	if(proximityResult[8] > CALIBRATION_HIGH_THR) {
				//if((proximityResult[8])>(proximityOffset[8]>>1)) {	
                	calibState = 5;
				}
			} else {
            	if(proximityResult[11] > CALIBRATION_HIGH_THR) {
    580e:	80 91 7f 02 	lds	r24, 0x027F
    5812:	90 91 80 02 	lds	r25, 0x0280
    5816:	21 e0       	ldi	r18, 0x01	; 1
    5818:	8f 3a       	cpi	r24, 0xAF	; 175
    581a:	92 07       	cpc	r25, r18
    581c:	3c f5       	brge	.+78     	; 0x586c <handleCalibration+0x1a2>
				//if((proximityResult[11])>(proximityOffset[11]>>1)) {	
					calibState = 5;
				}
			}
            if((getTime100MicroSec() - timeoutOdometry)>PAUSE_60_SEC) {    // the robot seems to be still, go to next velocity
    581e:	0e 94 35 22 	call	0x446a	; 0x446a <getTime100MicroSec>
    5822:	20 91 33 0b 	lds	r18, 0x0B33
    5826:	30 91 34 0b 	lds	r19, 0x0B34
    582a:	40 91 35 0b 	lds	r20, 0x0B35
    582e:	50 91 36 0b 	lds	r21, 0x0B36
    5832:	62 1b       	sub	r22, r18
    5834:	73 0b       	sbc	r23, r19
    5836:	84 0b       	sbc	r24, r20
    5838:	95 0b       	sbc	r25, r21
    583a:	6c 39       	cpi	r22, 0x9C	; 156
    583c:	2d ec       	ldi	r18, 0xCD	; 205
    583e:	72 07       	cpc	r23, r18
    5840:	28 e0       	ldi	r18, 0x08	; 8
    5842:	82 07       	cpc	r24, r18
    5844:	20 e0       	ldi	r18, 0x00	; 0
    5846:	92 07       	cpc	r25, r18
    5848:	08 f4       	brcc	.+2      	; 0x584c <handleCalibration+0x182>
    584a:	af cf       	rjmp	.-162    	; 0x57aa <handleCalibration+0xe0>
            	tempVel = 0;
    584c:	10 92 79 0b 	sts	0x0B79, r1
    5850:	10 92 78 0b 	sts	0x0B78, r1
                //updateOdomData();
                calibState = 5;
    5854:	85 e0       	ldi	r24, 0x05	; 5
    5856:	80 93 63 0b 	sts	0x0B63, r24
    585a:	08 95       	ret
			}
            break;

		case 4: // exit from black line again
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
            	if(proximityResult[8] > CALIBRATION_HIGH_THR) {
    585c:	80 91 79 02 	lds	r24, 0x0279
    5860:	90 91 7a 02 	lds	r25, 0x027A
    5864:	21 e0       	ldi	r18, 0x01	; 1
    5866:	8f 3a       	cpi	r24, 0xAF	; 175
    5868:	92 07       	cpc	r25, r18
    586a:	cc f2       	brlt	.-78     	; 0x581e <handleCalibration+0x154>
                	calibState = 5;
				}
			} else {
            	if(proximityResult[11] > CALIBRATION_HIGH_THR) {
				//if((proximityResult[11])>(proximityOffset[11]>>1)) {	
					calibState = 5;
    586c:	85 e0       	ldi	r24, 0x05	; 5
    586e:	80 93 63 0b 	sts	0x0B63, r24
    5872:	d5 cf       	rjmp	.-86     	; 0x581e <handleCalibration+0x154>
                calibState = 5;
			}
			break;

		case 2: // exit from black line
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    5874:	80 91 55 05 	lds	r24, 0x0555
    5878:	88 23       	and	r24, r24
    587a:	09 f4       	brne	.+2      	; 0x587e <handleCalibration+0x1b4>
    587c:	a6 c0       	rjmp	.+332    	; 0x59ca <handleCalibration+0x300>
    587e:	82 30       	cpi	r24, 0x02	; 2
    5880:	09 f4       	brne	.+2      	; 0x5884 <handleCalibration+0x1ba>
    5882:	a3 c0       	rjmp	.+326    	; 0x59ca <handleCalibration+0x300>
				//if((proximityResult[8])>(proximityOffset[8]>>1)) {	
                	calibState = 3;
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
            	if(proximityResult[11] > CALIBRATION_HIGH_THR) {
    5884:	80 91 7f 02 	lds	r24, 0x027F
    5888:	90 91 80 02 	lds	r25, 0x0280
    588c:	21 e0       	ldi	r18, 0x01	; 1
    588e:	8f 3a       	cpi	r24, 0xAF	; 175
    5890:	92 07       	cpc	r25, r18
    5892:	0c f4       	brge	.+2      	; 0x5896 <handleCalibration+0x1cc>
    5894:	39 cf       	rjmp	.-398    	; 0x5708 <handleCalibration+0x3e>
				//if((proximityResult[11])>(proximityOffset[11]>>1)) {	
                	calibState = 3;
    5896:	83 e0       	ldi	r24, 0x03	; 3
    5898:	80 93 63 0b 	sts	0x0B63, r24
                    timeoutOdometry = getTime100MicroSec();;
    589c:	0e 94 35 22 	call	0x446a	; 0x446a <getTime100MicroSec>
    58a0:	60 93 33 0b 	sts	0x0B33, r22
    58a4:	70 93 34 0b 	sts	0x0B34, r23
    58a8:	80 93 35 0b 	sts	0x0B35, r24
    58ac:	90 93 36 0b 	sts	0x0B36, r25
    58b0:	2b cf       	rjmp	.-426    	; 0x5708 <handleCalibration+0x3e>
			}
            break;

		case 3: // look for black line again, stop time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
            	if(proximityResult[8] < CALIBRATION_LOW_THR) {
    58b2:	80 91 79 02 	lds	r24, 0x0279
    58b6:	90 91 7a 02 	lds	r25, 0x027A
    58ba:	21 e0       	ldi	r18, 0x01	; 1
    58bc:	86 38       	cpi	r24, 0x86	; 134
    58be:	92 07       	cpc	r25, r18
    58c0:	0c f0       	brlt	.+2      	; 0x58c4 <handleCalibration+0x1fa>
    58c2:	22 cf       	rjmp	.-444    	; 0x5708 <handleCalibration+0x3e>
				//if((proximityResult[8])<(proximityOffset[8]>>1)) {	
                	timeOdometry = getTime100MicroSec() - timeOdometry;
    58c4:	0e 94 35 22 	call	0x446a	; 0x446a <getTime100MicroSec>
    58c8:	20 91 4e 05 	lds	r18, 0x054E
    58cc:	30 91 4f 05 	lds	r19, 0x054F
    58d0:	40 91 50 05 	lds	r20, 0x0550
    58d4:	50 91 51 05 	lds	r21, 0x0551
    58d8:	62 1b       	sub	r22, r18
    58da:	73 0b       	sbc	r23, r19
    58dc:	84 0b       	sbc	r24, r20
    58de:	95 0b       	sbc	r25, r21
    58e0:	60 93 4e 05 	sts	0x054E, r22
    58e4:	70 93 4f 05 	sts	0x054F, r23
    58e8:	80 93 50 05 	sts	0x0550, r24
    58ec:	90 93 51 05 	sts	0x0551, r25
                    tempVel = (unsigned int)(DISTANCE_MM/((float)timeOdometry*104.0/1000000.0));
    58f0:	0e 94 8f 54 	call	0xa91e	; 0xa91e <__floatunsisf>
    58f4:	20 e0       	ldi	r18, 0x00	; 0
    58f6:	30 e0       	ldi	r19, 0x00	; 0
    58f8:	40 ed       	ldi	r20, 0xD0	; 208
    58fa:	52 e4       	ldi	r21, 0x42	; 66
    58fc:	0e 94 aa 55 	call	0xab54	; 0xab54 <__mulsf3>
    5900:	20 e0       	ldi	r18, 0x00	; 0
    5902:	34 e2       	ldi	r19, 0x24	; 36
    5904:	44 e7       	ldi	r20, 0x74	; 116
    5906:	59 e4       	ldi	r21, 0x49	; 73
    5908:	0e 94 f6 53 	call	0xa7ec	; 0xa7ec <__divsf3>
    590c:	9b 01       	movw	r18, r22
    590e:	ac 01       	movw	r20, r24
    5910:	64 e1       	ldi	r22, 0x14	; 20
    5912:	7e e2       	ldi	r23, 0x2E	; 46
    5914:	88 e7       	ldi	r24, 0x78	; 120
    5916:	93 e4       	ldi	r25, 0x43	; 67
    5918:	0e 94 f6 53 	call	0xa7ec	; 0xa7ec <__divsf3>
    591c:	0e 94 63 54 	call	0xa8c6	; 0xa8c6 <__fixunssfsi>
    5920:	70 93 79 0b 	sts	0x0B79, r23
    5924:	60 93 78 0b 	sts	0x0B78, r22
					avgLeftSpeed = leftSpeedSumOdom/leftSumCount;
    5928:	20 91 c0 04 	lds	r18, 0x04C0
    592c:	30 91 c1 04 	lds	r19, 0x04C1
    5930:	40 e0       	ldi	r20, 0x00	; 0
    5932:	50 e0       	ldi	r21, 0x00	; 0
    5934:	60 91 b8 04 	lds	r22, 0x04B8
    5938:	70 91 b9 04 	lds	r23, 0x04B9
    593c:	80 91 ba 04 	lds	r24, 0x04BA
    5940:	90 91 bb 04 	lds	r25, 0x04BB
    5944:	0e 94 7b 56 	call	0xacf6	; 0xacf6 <__divmodsi4>
    5948:	30 93 c5 04 	sts	0x04C5, r19
    594c:	20 93 c4 04 	sts	0x04C4, r18
            	if(proximityResult[11] < CALIBRATION_LOW_THR) {
				//if((proximityResult[11])<(proximityOffset[11]>>1)) {	
                	timeOdometry = getTime100MicroSec() - timeOdometry;
                    tempVel = (unsigned int)(DISTANCE_MM/((float)timeOdometry*104.0/1000000.0));
                    avgRightSpeed = rightSpeedSumOdom/rightSumCount;
					updateOdomData();
    5950:	0e 94 7e 2a 	call	0x54fc	; 0x54fc <updateOdomData>
                    calibState = 4;
    5954:	84 e0       	ldi	r24, 0x04	; 4
    5956:	80 93 63 0b 	sts	0x0B63, r24
                    timeoutOdometry = getTime100MicroSec();;
    595a:	0e 94 35 22 	call	0x446a	; 0x446a <getTime100MicroSec>
    595e:	60 93 33 0b 	sts	0x0B33, r22
    5962:	70 93 34 0b 	sts	0x0B34, r23
    5966:	80 93 35 0b 	sts	0x0B35, r24
    596a:	90 93 36 0b 	sts	0x0B36, r25
    596e:	cc ce       	rjmp	.-616    	; 0x5708 <handleCalibration+0x3e>
            timeoutOdometry = getTime100MicroSec();
            break;

		case 1: // look for black line, start time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
            	if(proximityResult[8] < CALIBRATION_LOW_THR) {
    5970:	80 91 79 02 	lds	r24, 0x0279
    5974:	90 91 7a 02 	lds	r25, 0x027A
    5978:	21 e0       	ldi	r18, 0x01	; 1
    597a:	86 38       	cpi	r24, 0x86	; 134
    597c:	92 07       	cpc	r25, r18
    597e:	0c f0       	brlt	.+2      	; 0x5982 <handleCalibration+0x2b8>
    5980:	c3 ce       	rjmp	.-634    	; 0x5708 <handleCalibration+0x3e>
				//if((proximityResult[8])<(proximityOffset[8]>>1)) {				
                	leftSumCount = 0;
    5982:	10 92 c1 04 	sts	0x04C1, r1
    5986:	10 92 c0 04 	sts	0x04C0, r1
                    leftSpeedSumOdom = 0;
    598a:	10 92 b8 04 	sts	0x04B8, r1
    598e:	10 92 b9 04 	sts	0x04B9, r1
    5992:	10 92 ba 04 	sts	0x04BA, r1
    5996:	10 92 bb 04 	sts	0x04BB, r1
			} else {
            	if(proximityResult[11] < CALIBRATION_LOW_THR) {
				//if((proximityResult[11])<(proximityOffset[11]>>1)) {	
					rightSumCount = 0;
					rightSpeedSumOdom = 0;
                    timeOdometry = getTime100MicroSec();;
    599a:	0e 94 35 22 	call	0x446a	; 0x446a <getTime100MicroSec>
    599e:	60 93 4e 05 	sts	0x054E, r22
    59a2:	70 93 4f 05 	sts	0x054F, r23
    59a6:	80 93 50 05 	sts	0x0550, r24
    59aa:	90 93 51 05 	sts	0x0551, r25
                    calibState = 2;
    59ae:	82 e0       	ldi	r24, 0x02	; 2
    59b0:	80 93 63 0b 	sts	0x0B63, r24
                    timeoutOdometry = getTime100MicroSec();;
    59b4:	0e 94 35 22 	call	0x446a	; 0x446a <getTime100MicroSec>
    59b8:	60 93 33 0b 	sts	0x0B33, r22
    59bc:	70 93 34 0b 	sts	0x0B34, r23
    59c0:	80 93 35 0b 	sts	0x0B35, r24
    59c4:	90 93 36 0b 	sts	0x0B36, r25
    59c8:	9f ce       	rjmp	.-706    	; 0x5708 <handleCalibration+0x3e>
			}
			break;

		case 2: // exit from black line
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
            	if(proximityResult[8] > CALIBRATION_HIGH_THR) {
    59ca:	80 91 79 02 	lds	r24, 0x0279
    59ce:	90 91 7a 02 	lds	r25, 0x027A
    59d2:	21 e0       	ldi	r18, 0x01	; 1
    59d4:	8f 3a       	cpi	r24, 0xAF	; 175
    59d6:	92 07       	cpc	r25, r18
    59d8:	0c f4       	brge	.+2      	; 0x59dc <handleCalibration+0x312>
    59da:	96 ce       	rjmp	.-724    	; 0x5708 <handleCalibration+0x3e>
    59dc:	5c cf       	rjmp	.-328    	; 0x5896 <handleCalibration+0x1cc>

    	case 0: // set speed
        	if(calibWheel == LEFT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = 0;
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    59de:	81 30       	cpi	r24, 0x01	; 1
    59e0:	09 f4       	brne	.+2      	; 0x59e4 <handleCalibration+0x31a>
    59e2:	84 c0       	rjmp	.+264    	; 0x5aec <handleCalibration+0x422>
				pwm_intermediate_right_desired = (INDEX_STEP*calibVelIndex)<<2;
				pwm_intermediate_left_desired = 0;
			} else if(calibWheel == LEFT_WHEEL_BW_SC) {
    59e4:	82 30       	cpi	r24, 0x02	; 2
    59e6:	09 f4       	brne	.+2      	; 0x59ea <handleCalibration+0x320>
    59e8:	60 c0       	rjmp	.+192    	; 0x5aaa <handleCalibration+0x3e0>
				pwm_intermediate_right_desired = 0;
				pwm_intermediate_left_desired = -((INDEX_STEP*calibVelIndex)<<2);
        	} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    59ea:	83 30       	cpi	r24, 0x03	; 3
    59ec:	09 f0       	breq	.+2      	; 0x59f0 <handleCalibration+0x326>
    59ee:	cd ce       	rjmp	.-614    	; 0x578a <handleCalibration+0xc0>
				pwm_intermediate_right_desired = -((INDEX_STEP*calibVelIndex)<<2);
    59f0:	90 91 bd 08 	lds	r25, 0x08BD
    59f4:	85 e0       	ldi	r24, 0x05	; 5
    59f6:	98 9f       	mul	r25, r24
    59f8:	c0 01       	movw	r24, r0
    59fa:	11 24       	eor	r1, r1
    59fc:	88 0f       	add	r24, r24
    59fe:	99 1f       	adc	r25, r25
    5a00:	88 0f       	add	r24, r24
    5a02:	99 1f       	adc	r25, r25
    5a04:	90 95       	com	r25
    5a06:	81 95       	neg	r24
    5a08:	9f 4f       	sbci	r25, 0xFF	; 255
    5a0a:	90 93 0e 03 	sts	0x030E, r25
    5a0e:	80 93 0d 03 	sts	0x030D, r24
				pwm_intermediate_left_desired = 0;
    5a12:	10 92 10 03 	sts	0x0310, r1
    5a16:	10 92 0f 03 	sts	0x030F, r1
    5a1a:	b7 ce       	rjmp	.-658    	; 0x578a <handleCalibration+0xc0>
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
            	if(proximityResult[11] < CALIBRATION_LOW_THR) {
				//if((proximityResult[11])<(proximityOffset[11]>>1)) {	
                	timeOdometry = getTime100MicroSec() - timeOdometry;
    5a1c:	0e 94 35 22 	call	0x446a	; 0x446a <getTime100MicroSec>
    5a20:	20 91 4e 05 	lds	r18, 0x054E
    5a24:	30 91 4f 05 	lds	r19, 0x054F
    5a28:	40 91 50 05 	lds	r20, 0x0550
    5a2c:	50 91 51 05 	lds	r21, 0x0551
    5a30:	62 1b       	sub	r22, r18
    5a32:	73 0b       	sbc	r23, r19
    5a34:	84 0b       	sbc	r24, r20
    5a36:	95 0b       	sbc	r25, r21
    5a38:	60 93 4e 05 	sts	0x054E, r22
    5a3c:	70 93 4f 05 	sts	0x054F, r23
    5a40:	80 93 50 05 	sts	0x0550, r24
    5a44:	90 93 51 05 	sts	0x0551, r25
                    tempVel = (unsigned int)(DISTANCE_MM/((float)timeOdometry*104.0/1000000.0));
    5a48:	0e 94 8f 54 	call	0xa91e	; 0xa91e <__floatunsisf>
    5a4c:	20 e0       	ldi	r18, 0x00	; 0
    5a4e:	30 e0       	ldi	r19, 0x00	; 0
    5a50:	40 ed       	ldi	r20, 0xD0	; 208
    5a52:	52 e4       	ldi	r21, 0x42	; 66
    5a54:	0e 94 aa 55 	call	0xab54	; 0xab54 <__mulsf3>
    5a58:	20 e0       	ldi	r18, 0x00	; 0
    5a5a:	34 e2       	ldi	r19, 0x24	; 36
    5a5c:	44 e7       	ldi	r20, 0x74	; 116
    5a5e:	59 e4       	ldi	r21, 0x49	; 73
    5a60:	0e 94 f6 53 	call	0xa7ec	; 0xa7ec <__divsf3>
    5a64:	9b 01       	movw	r18, r22
    5a66:	ac 01       	movw	r20, r24
    5a68:	64 e1       	ldi	r22, 0x14	; 20
    5a6a:	7e e2       	ldi	r23, 0x2E	; 46
    5a6c:	88 e7       	ldi	r24, 0x78	; 120
    5a6e:	93 e4       	ldi	r25, 0x43	; 67
    5a70:	0e 94 f6 53 	call	0xa7ec	; 0xa7ec <__divsf3>
    5a74:	0e 94 63 54 	call	0xa8c6	; 0xa8c6 <__fixunssfsi>
    5a78:	70 93 79 0b 	sts	0x0B79, r23
    5a7c:	60 93 78 0b 	sts	0x0B78, r22
                    avgRightSpeed = rightSpeedSumOdom/rightSumCount;
    5a80:	20 91 c2 04 	lds	r18, 0x04C2
    5a84:	30 91 c3 04 	lds	r19, 0x04C3
    5a88:	40 e0       	ldi	r20, 0x00	; 0
    5a8a:	50 e0       	ldi	r21, 0x00	; 0
    5a8c:	60 91 bc 04 	lds	r22, 0x04BC
    5a90:	70 91 bd 04 	lds	r23, 0x04BD
    5a94:	80 91 be 04 	lds	r24, 0x04BE
    5a98:	90 91 bf 04 	lds	r25, 0x04BF
    5a9c:	0e 94 7b 56 	call	0xacf6	; 0xacf6 <__divmodsi4>
    5aa0:	30 93 c7 04 	sts	0x04C7, r19
    5aa4:	20 93 c6 04 	sts	0x04C6, r18
    5aa8:	53 cf       	rjmp	.-346    	; 0x5950 <handleCalibration+0x286>
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = (INDEX_STEP*calibVelIndex)<<2;
				pwm_intermediate_left_desired = 0;
			} else if(calibWheel == LEFT_WHEEL_BW_SC) {
				pwm_intermediate_right_desired = 0;
    5aaa:	10 92 0e 03 	sts	0x030E, r1
    5aae:	10 92 0d 03 	sts	0x030D, r1
				pwm_intermediate_left_desired = -((INDEX_STEP*calibVelIndex)<<2);
    5ab2:	90 91 bd 08 	lds	r25, 0x08BD
    5ab6:	85 e0       	ldi	r24, 0x05	; 5
    5ab8:	98 9f       	mul	r25, r24
    5aba:	c0 01       	movw	r24, r0
    5abc:	11 24       	eor	r1, r1
    5abe:	88 0f       	add	r24, r24
    5ac0:	99 1f       	adc	r25, r25
    5ac2:	88 0f       	add	r24, r24
    5ac4:	99 1f       	adc	r25, r25
    5ac6:	90 95       	com	r25
    5ac8:	81 95       	neg	r24
    5aca:	9f 4f       	sbci	r25, 0xFF	; 255
    5acc:	90 93 10 03 	sts	0x0310, r25
    5ad0:	80 93 0f 03 	sts	0x030F, r24
    5ad4:	5a ce       	rjmp	.-844    	; 0x578a <handleCalibration+0xc0>
            break;

		case 5:
        	calibVelIndex++;
            if(calibVelIndex == 10) {
            	calibVelIndex = 1;
    5ad6:	91 e0       	ldi	r25, 0x01	; 1
    5ad8:	90 93 bd 08 	sts	0x08BD, r25
                if(calibWheel == LEFT_WHEEL_FW_SC) {
    5adc:	80 91 55 05 	lds	r24, 0x0555
    5ae0:	88 23       	and	r24, r24
    5ae2:	b9 f4       	brne	.+46     	; 0x5b12 <handleCalibration+0x448>
                	calibWheel = LEFT_WHEEL_BW_SC;
    5ae4:	82 e0       	ldi	r24, 0x02	; 2
    5ae6:	80 93 55 05 	sts	0x0555, r24
    5aea:	6a ce       	rjmp	.-812    	; 0x57c0 <handleCalibration+0xf6>
    	case 0: // set speed
        	if(calibWheel == LEFT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = 0;
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = (INDEX_STEP*calibVelIndex)<<2;
    5aec:	90 91 bd 08 	lds	r25, 0x08BD
    5af0:	85 e0       	ldi	r24, 0x05	; 5
    5af2:	98 9f       	mul	r25, r24
    5af4:	c0 01       	movw	r24, r0
    5af6:	11 24       	eor	r1, r1
    5af8:	88 0f       	add	r24, r24
    5afa:	99 1f       	adc	r25, r25
    5afc:	88 0f       	add	r24, r24
    5afe:	99 1f       	adc	r25, r25
    5b00:	90 93 0e 03 	sts	0x030E, r25
    5b04:	80 93 0d 03 	sts	0x030D, r24
				pwm_intermediate_left_desired = 0;
    5b08:	10 92 10 03 	sts	0x0310, r1
    5b0c:	10 92 0f 03 	sts	0x030F, r1
    5b10:	3c ce       	rjmp	.-904    	; 0x578a <handleCalibration+0xc0>
        	calibVelIndex++;
            if(calibVelIndex == 10) {
            	calibVelIndex = 1;
                if(calibWheel == LEFT_WHEEL_FW_SC) {
                	calibWheel = LEFT_WHEEL_BW_SC;
				} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    5b12:	81 30       	cpi	r24, 0x01	; 1
    5b14:	61 f0       	breq	.+24     	; 0x5b2e <handleCalibration+0x464>
                	calibWheel = RIGHT_WHEEL_BW_SC;
				} else if(calibWheel == LEFT_WHEEL_BW_SC) {
    5b16:	82 30       	cpi	r24, 0x02	; 2
    5b18:	71 f0       	breq	.+28     	; 0x5b36 <handleCalibration+0x46c>
                	calibWheel = RIGHT_WHEEL_FW_SC;
					calibrateOdomFlag = 0;
					// red on
				} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    5b1a:	83 30       	cpi	r24, 0x03	; 3
    5b1c:	09 f0       	breq	.+2      	; 0x5b20 <handleCalibration+0x456>
    5b1e:	50 ce       	rjmp	.-864    	; 0x57c0 <handleCalibration+0xf6>
                	calibWheel = LEFT_WHEEL_FW_SC;					
    5b20:	10 92 55 05 	sts	0x0555, r1
					// red off
					writeCalibrationToFlash();
    5b24:	0e 94 90 46 	call	0x8d20	; 0x8d20 <writeCalibrationToFlash>
					calibrateOdomFlag = 0;
    5b28:	10 92 70 05 	sts	0x0570, r1
    5b2c:	49 ce       	rjmp	.-878    	; 0x57c0 <handleCalibration+0xf6>
            if(calibVelIndex == 10) {
            	calibVelIndex = 1;
                if(calibWheel == LEFT_WHEEL_FW_SC) {
                	calibWheel = LEFT_WHEEL_BW_SC;
				} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
                	calibWheel = RIGHT_WHEEL_BW_SC;
    5b2e:	83 e0       	ldi	r24, 0x03	; 3
    5b30:	80 93 55 05 	sts	0x0555, r24
    5b34:	45 ce       	rjmp	.-886    	; 0x57c0 <handleCalibration+0xf6>
				} else if(calibWheel == LEFT_WHEEL_BW_SC) {
                	calibWheel = RIGHT_WHEEL_FW_SC;
    5b36:	90 93 55 05 	sts	0x0555, r25
					calibrateOdomFlag = 0;
    5b3a:	10 92 70 05 	sts	0x0570, r1
    5b3e:	40 ce       	rjmp	.-896    	; 0x57c0 <handleCalibration+0xf6>

00005b40 <getInputFromSpeed>:

}

// extract data to pass to speed controller given a desired speed in mm/s
// mode => return a measured speed 0..1023
signed int getInputFromSpeed(signed int s, unsigned char mode) {
    5b40:	af 92       	push	r10
    5b42:	bf 92       	push	r11
    5b44:	cf 92       	push	r12
    5b46:	df 92       	push	r13
    5b48:	ef 92       	push	r14
    5b4a:	ff 92       	push	r15
    5b4c:	0f 93       	push	r16
    5b4e:	1f 93       	push	r17
    5b50:	cf 93       	push	r28
    5b52:	df 93       	push	r29
    
    int i = 0;
    signed int currVel = s*BYTE_TO_MM_S;
    5b54:	9c 01       	movw	r18, r24
    5b56:	22 0f       	add	r18, r18
    5b58:	33 1f       	adc	r19, r19
    5b5a:	22 0f       	add	r18, r18
    5b5c:	33 1f       	adc	r19, r19
    5b5e:	28 0f       	add	r18, r24
    5b60:	39 1f       	adc	r19, r25
    signed int temp = 0;

    if(currVel == 0) {
    5b62:	21 15       	cp	r18, r1
    5b64:	31 05       	cpc	r19, r1
    5b66:	09 f4       	brne	.+2      	; 0x5b6a <getInputFromSpeed+0x2a>
    5b68:	7b c0       	rjmp	.+246    	; 0x5c60 <getInputFromSpeed+0x120>
        return 0;
    }

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
    5b6a:	86 2f       	mov	r24, r22
    5b6c:	82 50       	subi	r24, 0x02	; 2
    5b6e:	82 30       	cpi	r24, 0x02	; 2
    5b70:	08 f4       	brcc	.+2      	; 0x5b74 <getInputFromSpeed+0x34>
    5b72:	84 c0       	rjmp	.+264    	; 0x5c7c <getInputFromSpeed+0x13c>
        currVel = -currVel; // consider only positive values
    5b74:	66 23       	and	r22, r22
    5b76:	09 f0       	breq	.+2      	; 0x5b7a <getInputFromSpeed+0x3a>
    5b78:	84 c0       	rjmp	.+264    	; 0x5c82 <getInputFromSpeed+0x142>
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
    5b7a:	80 91 e6 08 	lds	r24, 0x08E6
    5b7e:	90 91 e7 08 	lds	r25, 0x08E7
    5b82:	82 17       	cp	r24, r18
    5b84:	93 07       	cpc	r25, r19
    5b86:	0c f0       	brlt	.+2      	; 0x5b8a <getInputFromSpeed+0x4a>
    5b88:	1b c2       	rjmp	.+1078   	; 0x5fc0 <getInputFromSpeed+0x480>
    5b8a:	80 91 f6 08 	lds	r24, 0x08F6
    5b8e:	90 91 f7 08 	lds	r25, 0x08F7
    5b92:	82 17       	cp	r24, r18
    5b94:	93 07       	cpc	r25, r19
    5b96:	0c f0       	brlt	.+2      	; 0x5b9a <getInputFromSpeed+0x5a>
    5b98:	1c c2       	rjmp	.+1080   	; 0x5fd2 <getInputFromSpeed+0x492>
    5b9a:	80 91 06 09 	lds	r24, 0x0906
    5b9e:	90 91 07 09 	lds	r25, 0x0907
    5ba2:	82 17       	cp	r24, r18
    5ba4:	93 07       	cpc	r25, r19
    5ba6:	0c f0       	brlt	.+2      	; 0x5baa <getInputFromSpeed+0x6a>
    5ba8:	17 c2       	rjmp	.+1070   	; 0x5fd8 <getInputFromSpeed+0x498>
    5baa:	80 91 16 09 	lds	r24, 0x0916
    5bae:	90 91 17 09 	lds	r25, 0x0917
    5bb2:	82 17       	cp	r24, r18
    5bb4:	93 07       	cpc	r25, r19
    5bb6:	0c f0       	brlt	.+2      	; 0x5bba <getInputFromSpeed+0x7a>
    5bb8:	12 c2       	rjmp	.+1060   	; 0x5fde <getInputFromSpeed+0x49e>
    5bba:	80 91 26 09 	lds	r24, 0x0926
    5bbe:	90 91 27 09 	lds	r25, 0x0927
    5bc2:	82 17       	cp	r24, r18
    5bc4:	93 07       	cpc	r25, r19
    5bc6:	0c f0       	brlt	.+2      	; 0x5bca <getInputFromSpeed+0x8a>
    5bc8:	fe c1       	rjmp	.+1020   	; 0x5fc6 <getInputFromSpeed+0x486>
    5bca:	80 91 36 09 	lds	r24, 0x0936
    5bce:	90 91 37 09 	lds	r25, 0x0937
    5bd2:	82 17       	cp	r24, r18
    5bd4:	93 07       	cpc	r25, r19
    5bd6:	0c f0       	brlt	.+2      	; 0x5bda <getInputFromSpeed+0x9a>
    5bd8:	f9 c1       	rjmp	.+1010   	; 0x5fcc <getInputFromSpeed+0x48c>
    5bda:	80 91 46 09 	lds	r24, 0x0946
    5bde:	90 91 47 09 	lds	r25, 0x0947
    5be2:	82 17       	cp	r24, r18
    5be4:	93 07       	cpc	r25, r19
    5be6:	0c f0       	brlt	.+2      	; 0x5bea <getInputFromSpeed+0xaa>
    5be8:	02 c2       	rjmp	.+1028   	; 0x5fee <getInputFromSpeed+0x4ae>
    5bea:	80 91 56 09 	lds	r24, 0x0956
    5bee:	90 91 57 09 	lds	r25, 0x0957
    5bf2:	82 17       	cp	r24, r18
    5bf4:	93 07       	cpc	r25, r19
    5bf6:	0c f0       	brlt	.+2      	; 0x5bfa <getInputFromSpeed+0xba>
    5bf8:	fd c1       	rjmp	.+1018   	; 0x5ff4 <getInputFromSpeed+0x4b4>
    5bfa:	c0 91 66 09 	lds	r28, 0x0966
    5bfe:	d0 91 67 09 	lds	r29, 0x0967
    5c02:	c2 17       	cp	r28, r18
    5c04:	d3 07       	cpc	r29, r19
    5c06:	0c f0       	brlt	.+2      	; 0x5c0a <getInputFromSpeed+0xca>
    5c08:	7a c1       	rjmp	.+756    	; 0x5efe <getInputFromSpeed+0x3be>
            temp = currVel*calibration[0][6]/calibration[0][7];
            temp = -temp;
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
    5c0a:	b9 01       	movw	r22, r18
    5c0c:	88 27       	eor	r24, r24
    5c0e:	77 fd       	sbrc	r23, 7
    5c10:	80 95       	com	r24
    5c12:	98 2f       	mov	r25, r24
    5c14:	0e 94 91 54 	call	0xa922	; 0xa922 <__floatsisf>
    5c18:	7b 01       	movw	r14, r22
    5c1a:	8c 01       	movw	r16, r24
    5c1c:	60 91 64 09 	lds	r22, 0x0964
    5c20:	70 91 65 09 	lds	r23, 0x0965
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
    5c24:	88 27       	eor	r24, r24
    5c26:	77 fd       	sbrc	r23, 7
    5c28:	80 95       	com	r24
    5c2a:	98 2f       	mov	r25, r24
    5c2c:	0e 94 91 54 	call	0xa922	; 0xa922 <__floatsisf>
    5c30:	9b 01       	movw	r18, r22
    5c32:	ac 01       	movw	r20, r24
    5c34:	c8 01       	movw	r24, r16
    5c36:	b7 01       	movw	r22, r14
    5c38:	0e 94 aa 55 	call	0xab54	; 0xab54 <__mulsf3>
    5c3c:	7b 01       	movw	r14, r22
    5c3e:	8c 01       	movw	r16, r24
    5c40:	be 01       	movw	r22, r28
    5c42:	88 27       	eor	r24, r24
    5c44:	77 fd       	sbrc	r23, 7
    5c46:	80 95       	com	r24
    5c48:	98 2f       	mov	r25, r24
    5c4a:	0e 94 91 54 	call	0xa922	; 0xa922 <__floatsisf>
    5c4e:	9b 01       	movw	r18, r22
    5c50:	ac 01       	movw	r20, r24
    5c52:	c8 01       	movw	r24, r16
    5c54:	b7 01       	movw	r22, r14
    5c56:	0e 94 f6 53 	call	0xa7ec	; 0xa7ec <__divsf3>
    5c5a:	0e 94 5e 54 	call	0xa8bc	; 0xa8bc <__fixsfsi>
    5c5e:	02 c0       	rjmp	.+4      	; 0x5c64 <getInputFromSpeed+0x124>
// mode => return a measured speed 0..1023
signed int getInputFromSpeed(signed int s, unsigned char mode) {
    
    int i = 0;
    signed int currVel = s*BYTE_TO_MM_S;
    signed int temp = 0;
    5c60:	60 e0       	ldi	r22, 0x00	; 0
    5c62:	70 e0       	ldi	r23, 0x00	; 0
            temp = -temp;
        }        
    }
    
    return temp;
}
    5c64:	cb 01       	movw	r24, r22
    5c66:	df 91       	pop	r29
    5c68:	cf 91       	pop	r28
    5c6a:	1f 91       	pop	r17
    5c6c:	0f 91       	pop	r16
    5c6e:	ff 90       	pop	r15
    5c70:	ef 90       	pop	r14
    5c72:	df 90       	pop	r13
    5c74:	cf 90       	pop	r12
    5c76:	bf 90       	pop	r11
    5c78:	af 90       	pop	r10
    5c7a:	08 95       	ret
    if(currVel == 0) {
        return 0;
    }

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
        currVel = -currVel; // consider only positive values
    5c7c:	30 95       	com	r19
    5c7e:	21 95       	neg	r18
    5c80:	3f 4f       	sbci	r19, 0xFF	; 255
    5c82:	63 30       	cpi	r22, 0x03	; 3
    5c84:	09 f4       	brne	.+2      	; 0x5c88 <getInputFromSpeed+0x148>
    5c86:	f3 c0       	rjmp	.+486    	; 0x5e6e <getInputFromSpeed+0x32e>
    5c88:	62 30       	cpi	r22, 0x02	; 2
    5c8a:	01 f1       	breq	.+64     	; 0x5ccc <getInputFromSpeed+0x18c>
    5c8c:	61 30       	cpi	r22, 0x01	; 1
    5c8e:	09 f4       	brne	.+2      	; 0x5c92 <getInputFromSpeed+0x152>
    5c90:	98 c0       	rjmp	.+304    	; 0x5dc2 <getInputFromSpeed+0x282>
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][6]/calibration[0][7];
            temp = -temp;
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
    5c92:	66 23       	and	r22, r22
    5c94:	09 f4       	brne	.+2      	; 0x5c98 <getInputFromSpeed+0x158>
    5c96:	90 c0       	rjmp	.+288    	; 0x5db8 <getInputFromSpeed+0x278>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
    5c98:	61 30       	cpi	r22, 0x01	; 1
    5c9a:	09 f4       	brne	.+2      	; 0x5c9e <getInputFromSpeed+0x15e>
    5c9c:	8c c1       	rjmp	.+792    	; 0x5fb6 <getInputFromSpeed+0x476>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
        } else if(mode==LEFT_WHEEL_BW_SC) {
    5c9e:	62 30       	cpi	r22, 0x02	; 2
    5ca0:	09 f4       	brne	.+2      	; 0x5ca4 <getInputFromSpeed+0x164>
    5ca2:	a0 c1       	rjmp	.+832    	; 0x5fe4 <getInputFromSpeed+0x4a4>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][4]/(float)calibration[CALIBRATION_SAMPLES-1][5]);
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
    5ca4:	63 30       	cpi	r22, 0x03	; 3
    5ca6:	e1 f6       	brne	.-72     	; 0x5c60 <getInputFromSpeed+0x120>
    5ca8:	c0 91 72 09 	lds	r28, 0x0972
    5cac:	d0 91 73 09 	lds	r29, 0x0973
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][6]/(float)calibration[CALIBRATION_SAMPLES-1][7]);
    5cb0:	b9 01       	movw	r22, r18
    5cb2:	88 27       	eor	r24, r24
    5cb4:	77 fd       	sbrc	r23, 7
    5cb6:	80 95       	com	r24
    5cb8:	98 2f       	mov	r25, r24
    5cba:	0e 94 91 54 	call	0xa922	; 0xa922 <__floatsisf>
    5cbe:	7b 01       	movw	r14, r22
    5cc0:	8c 01       	movw	r16, r24
    5cc2:	60 91 70 09 	lds	r22, 0x0970
    5cc6:	70 91 71 09 	lds	r23, 0x0971
    5cca:	55 c0       	rjmp	.+170    	; 0x5d76 <getInputFromSpeed+0x236>
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            if(calibration[i][3] >= currVel) {
                break;
            }
        } else if(mode==LEFT_WHEEL_BW_SC) {
            if(calibration[i][5] >= currVel) {
    5ccc:	80 91 ee 08 	lds	r24, 0x08EE
    5cd0:	90 91 ef 08 	lds	r25, 0x08EF
    5cd4:	82 17       	cp	r24, r18
    5cd6:	93 07       	cpc	r25, r19
    5cd8:	0c f0       	brlt	.+2      	; 0x5cdc <getInputFromSpeed+0x19c>
    5cda:	72 c1       	rjmp	.+740    	; 0x5fc0 <getInputFromSpeed+0x480>
    5cdc:	80 91 fe 08 	lds	r24, 0x08FE
    5ce0:	90 91 ff 08 	lds	r25, 0x08FF
    5ce4:	82 17       	cp	r24, r18
    5ce6:	93 07       	cpc	r25, r19
    5ce8:	0c f0       	brlt	.+2      	; 0x5cec <getInputFromSpeed+0x1ac>
    5cea:	73 c1       	rjmp	.+742    	; 0x5fd2 <getInputFromSpeed+0x492>
    5cec:	80 91 0e 09 	lds	r24, 0x090E
    5cf0:	90 91 0f 09 	lds	r25, 0x090F
    5cf4:	82 17       	cp	r24, r18
    5cf6:	93 07       	cpc	r25, r19
    5cf8:	0c f0       	brlt	.+2      	; 0x5cfc <getInputFromSpeed+0x1bc>
    5cfa:	6e c1       	rjmp	.+732    	; 0x5fd8 <getInputFromSpeed+0x498>
    5cfc:	80 91 1e 09 	lds	r24, 0x091E
    5d00:	90 91 1f 09 	lds	r25, 0x091F
    5d04:	82 17       	cp	r24, r18
    5d06:	93 07       	cpc	r25, r19
    5d08:	0c f0       	brlt	.+2      	; 0x5d0c <getInputFromSpeed+0x1cc>
    5d0a:	69 c1       	rjmp	.+722    	; 0x5fde <getInputFromSpeed+0x49e>
    5d0c:	80 91 2e 09 	lds	r24, 0x092E
    5d10:	90 91 2f 09 	lds	r25, 0x092F
    5d14:	82 17       	cp	r24, r18
    5d16:	93 07       	cpc	r25, r19
    5d18:	0c f0       	brlt	.+2      	; 0x5d1c <getInputFromSpeed+0x1dc>
    5d1a:	55 c1       	rjmp	.+682    	; 0x5fc6 <getInputFromSpeed+0x486>
    5d1c:	80 91 3e 09 	lds	r24, 0x093E
    5d20:	90 91 3f 09 	lds	r25, 0x093F
    5d24:	82 17       	cp	r24, r18
    5d26:	93 07       	cpc	r25, r19
    5d28:	0c f0       	brlt	.+2      	; 0x5d2c <getInputFromSpeed+0x1ec>
    5d2a:	50 c1       	rjmp	.+672    	; 0x5fcc <getInputFromSpeed+0x48c>
    5d2c:	80 91 4e 09 	lds	r24, 0x094E
    5d30:	90 91 4f 09 	lds	r25, 0x094F
    5d34:	82 17       	cp	r24, r18
    5d36:	93 07       	cpc	r25, r19
    5d38:	0c f0       	brlt	.+2      	; 0x5d3c <getInputFromSpeed+0x1fc>
    5d3a:	59 c1       	rjmp	.+690    	; 0x5fee <getInputFromSpeed+0x4ae>
    5d3c:	80 91 5e 09 	lds	r24, 0x095E
    5d40:	90 91 5f 09 	lds	r25, 0x095F
    5d44:	82 17       	cp	r24, r18
    5d46:	93 07       	cpc	r25, r19
    5d48:	0c f0       	brlt	.+2      	; 0x5d4c <getInputFromSpeed+0x20c>
    5d4a:	54 c1       	rjmp	.+680    	; 0x5ff4 <getInputFromSpeed+0x4b4>
    5d4c:	c0 91 6e 09 	lds	r28, 0x096E
    5d50:	d0 91 6f 09 	lds	r29, 0x096F
    5d54:	c2 17       	cp	r28, r18
    5d56:	d3 07       	cpc	r29, r19
    5d58:	0c f0       	brlt	.+2      	; 0x5d5c <getInputFromSpeed+0x21c>
    5d5a:	d1 c0       	rjmp	.+418    	; 0x5efe <getInputFromSpeed+0x3be>
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][4]/(float)calibration[CALIBRATION_SAMPLES-1][5]);
    5d5c:	b9 01       	movw	r22, r18
    5d5e:	88 27       	eor	r24, r24
    5d60:	77 fd       	sbrc	r23, 7
    5d62:	80 95       	com	r24
    5d64:	98 2f       	mov	r25, r24
    5d66:	0e 94 91 54 	call	0xa922	; 0xa922 <__floatsisf>
    5d6a:	7b 01       	movw	r14, r22
    5d6c:	8c 01       	movw	r16, r24
    5d6e:	60 91 6c 09 	lds	r22, 0x096C
    5d72:	70 91 6d 09 	lds	r23, 0x096D
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][6]/(float)calibration[CALIBRATION_SAMPLES-1][7]);
    5d76:	88 27       	eor	r24, r24
    5d78:	77 fd       	sbrc	r23, 7
    5d7a:	80 95       	com	r24
    5d7c:	98 2f       	mov	r25, r24
    5d7e:	0e 94 91 54 	call	0xa922	; 0xa922 <__floatsisf>
    5d82:	9b 01       	movw	r18, r22
    5d84:	ac 01       	movw	r20, r24
    5d86:	c8 01       	movw	r24, r16
    5d88:	b7 01       	movw	r22, r14
    5d8a:	0e 94 aa 55 	call	0xab54	; 0xab54 <__mulsf3>
    5d8e:	7b 01       	movw	r14, r22
    5d90:	8c 01       	movw	r16, r24
    5d92:	be 01       	movw	r22, r28
    5d94:	88 27       	eor	r24, r24
    5d96:	77 fd       	sbrc	r23, 7
    5d98:	80 95       	com	r24
    5d9a:	98 2f       	mov	r25, r24
    5d9c:	0e 94 91 54 	call	0xa922	; 0xa922 <__floatsisf>
    5da0:	9b 01       	movw	r18, r22
    5da2:	ac 01       	movw	r20, r24
    5da4:	c8 01       	movw	r24, r16
    5da6:	b7 01       	movw	r22, r14
    5da8:	0e 94 f6 53 	call	0xa7ec	; 0xa7ec <__divsf3>
    5dac:	0e 94 5e 54 	call	0xa8bc	; 0xa8bc <__fixsfsi>
            temp = -temp;
    5db0:	70 95       	com	r23
    5db2:	61 95       	neg	r22
    5db4:	7f 4f       	sbci	r23, 0xFF	; 255
    5db6:	56 cf       	rjmp	.-340    	; 0x5c64 <getInputFromSpeed+0x124>
    5db8:	c0 91 66 09 	lds	r28, 0x0966
    5dbc:	d0 91 67 09 	lds	r29, 0x0967
    5dc0:	24 cf       	rjmp	.-440    	; 0x5c0a <getInputFromSpeed+0xca>
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
                break;
            }
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            if(calibration[i][3] >= currVel) {
    5dc2:	80 91 ea 08 	lds	r24, 0x08EA
    5dc6:	90 91 eb 08 	lds	r25, 0x08EB
    5dca:	82 17       	cp	r24, r18
    5dcc:	93 07       	cpc	r25, r19
    5dce:	0c f0       	brlt	.+2      	; 0x5dd2 <getInputFromSpeed+0x292>
    5dd0:	f7 c0       	rjmp	.+494    	; 0x5fc0 <getInputFromSpeed+0x480>
    5dd2:	80 91 fa 08 	lds	r24, 0x08FA
    5dd6:	90 91 fb 08 	lds	r25, 0x08FB
    5dda:	82 17       	cp	r24, r18
    5ddc:	93 07       	cpc	r25, r19
    5dde:	0c f0       	brlt	.+2      	; 0x5de2 <getInputFromSpeed+0x2a2>
    5de0:	f8 c0       	rjmp	.+496    	; 0x5fd2 <getInputFromSpeed+0x492>
    5de2:	80 91 0a 09 	lds	r24, 0x090A
    5de6:	90 91 0b 09 	lds	r25, 0x090B
    5dea:	82 17       	cp	r24, r18
    5dec:	93 07       	cpc	r25, r19
    5dee:	0c f0       	brlt	.+2      	; 0x5df2 <getInputFromSpeed+0x2b2>
    5df0:	f3 c0       	rjmp	.+486    	; 0x5fd8 <getInputFromSpeed+0x498>
    5df2:	80 91 1a 09 	lds	r24, 0x091A
    5df6:	90 91 1b 09 	lds	r25, 0x091B
    5dfa:	82 17       	cp	r24, r18
    5dfc:	93 07       	cpc	r25, r19
    5dfe:	0c f0       	brlt	.+2      	; 0x5e02 <getInputFromSpeed+0x2c2>
    5e00:	ee c0       	rjmp	.+476    	; 0x5fde <getInputFromSpeed+0x49e>
    5e02:	80 91 2a 09 	lds	r24, 0x092A
    5e06:	90 91 2b 09 	lds	r25, 0x092B
    5e0a:	82 17       	cp	r24, r18
    5e0c:	93 07       	cpc	r25, r19
    5e0e:	0c f0       	brlt	.+2      	; 0x5e12 <getInputFromSpeed+0x2d2>
    5e10:	da c0       	rjmp	.+436    	; 0x5fc6 <getInputFromSpeed+0x486>
    5e12:	80 91 3a 09 	lds	r24, 0x093A
    5e16:	90 91 3b 09 	lds	r25, 0x093B
    5e1a:	82 17       	cp	r24, r18
    5e1c:	93 07       	cpc	r25, r19
    5e1e:	0c f0       	brlt	.+2      	; 0x5e22 <getInputFromSpeed+0x2e2>
    5e20:	d5 c0       	rjmp	.+426    	; 0x5fcc <getInputFromSpeed+0x48c>
    5e22:	80 91 4a 09 	lds	r24, 0x094A
    5e26:	90 91 4b 09 	lds	r25, 0x094B
    5e2a:	82 17       	cp	r24, r18
    5e2c:	93 07       	cpc	r25, r19
    5e2e:	0c f0       	brlt	.+2      	; 0x5e32 <getInputFromSpeed+0x2f2>
    5e30:	de c0       	rjmp	.+444    	; 0x5fee <getInputFromSpeed+0x4ae>
    5e32:	80 91 5a 09 	lds	r24, 0x095A
    5e36:	90 91 5b 09 	lds	r25, 0x095B
    5e3a:	82 17       	cp	r24, r18
    5e3c:	93 07       	cpc	r25, r19
    5e3e:	0c f0       	brlt	.+2      	; 0x5e42 <getInputFromSpeed+0x302>
    5e40:	d9 c0       	rjmp	.+434    	; 0x5ff4 <getInputFromSpeed+0x4b4>
    5e42:	c0 91 6a 09 	lds	r28, 0x096A
    5e46:	d0 91 6b 09 	lds	r29, 0x096B
    5e4a:	c2 17       	cp	r28, r18
    5e4c:	d3 07       	cpc	r29, r19
    5e4e:	0c f0       	brlt	.+2      	; 0x5e52 <getInputFromSpeed+0x312>
    5e50:	56 c0       	rjmp	.+172    	; 0x5efe <getInputFromSpeed+0x3be>
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
    5e52:	b9 01       	movw	r22, r18
    5e54:	88 27       	eor	r24, r24
    5e56:	77 fd       	sbrc	r23, 7
    5e58:	80 95       	com	r24
    5e5a:	98 2f       	mov	r25, r24
    5e5c:	0e 94 91 54 	call	0xa922	; 0xa922 <__floatsisf>
    5e60:	7b 01       	movw	r14, r22
    5e62:	8c 01       	movw	r16, r24
    5e64:	60 91 68 09 	lds	r22, 0x0968
    5e68:	70 91 69 09 	lds	r23, 0x0969
    5e6c:	db ce       	rjmp	.-586    	; 0x5c24 <getInputFromSpeed+0xe4>
        } else if(mode==LEFT_WHEEL_BW_SC) {
            if(calibration[i][5] >= currVel) {
                break;
            }
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            if(calibration[i][7] >= currVel) {
    5e6e:	80 91 f2 08 	lds	r24, 0x08F2
    5e72:	90 91 f3 08 	lds	r25, 0x08F3
    5e76:	82 17       	cp	r24, r18
    5e78:	93 07       	cpc	r25, r19
    5e7a:	0c f0       	brlt	.+2      	; 0x5e7e <getInputFromSpeed+0x33e>
    5e7c:	a1 c0       	rjmp	.+322    	; 0x5fc0 <getInputFromSpeed+0x480>
    5e7e:	80 91 02 09 	lds	r24, 0x0902
    5e82:	90 91 03 09 	lds	r25, 0x0903
    5e86:	82 17       	cp	r24, r18
    5e88:	93 07       	cpc	r25, r19
    5e8a:	0c f0       	brlt	.+2      	; 0x5e8e <getInputFromSpeed+0x34e>
    5e8c:	a2 c0       	rjmp	.+324    	; 0x5fd2 <getInputFromSpeed+0x492>
    5e8e:	80 91 12 09 	lds	r24, 0x0912
    5e92:	90 91 13 09 	lds	r25, 0x0913
    5e96:	82 17       	cp	r24, r18
    5e98:	93 07       	cpc	r25, r19
    5e9a:	0c f0       	brlt	.+2      	; 0x5e9e <getInputFromSpeed+0x35e>
    5e9c:	9d c0       	rjmp	.+314    	; 0x5fd8 <getInputFromSpeed+0x498>
    5e9e:	80 91 22 09 	lds	r24, 0x0922
    5ea2:	90 91 23 09 	lds	r25, 0x0923
    5ea6:	82 17       	cp	r24, r18
    5ea8:	93 07       	cpc	r25, r19
    5eaa:	0c f0       	brlt	.+2      	; 0x5eae <getInputFromSpeed+0x36e>
    5eac:	98 c0       	rjmp	.+304    	; 0x5fde <getInputFromSpeed+0x49e>
    5eae:	80 91 32 09 	lds	r24, 0x0932
    5eb2:	90 91 33 09 	lds	r25, 0x0933
    5eb6:	82 17       	cp	r24, r18
    5eb8:	93 07       	cpc	r25, r19
    5eba:	0c f0       	brlt	.+2      	; 0x5ebe <getInputFromSpeed+0x37e>
    5ebc:	84 c0       	rjmp	.+264    	; 0x5fc6 <getInputFromSpeed+0x486>
    5ebe:	80 91 42 09 	lds	r24, 0x0942
    5ec2:	90 91 43 09 	lds	r25, 0x0943
    5ec6:	82 17       	cp	r24, r18
    5ec8:	93 07       	cpc	r25, r19
    5eca:	0c f0       	brlt	.+2      	; 0x5ece <getInputFromSpeed+0x38e>
    5ecc:	7f c0       	rjmp	.+254    	; 0x5fcc <getInputFromSpeed+0x48c>
    5ece:	80 91 52 09 	lds	r24, 0x0952
    5ed2:	90 91 53 09 	lds	r25, 0x0953
    5ed6:	82 17       	cp	r24, r18
    5ed8:	93 07       	cpc	r25, r19
    5eda:	0c f0       	brlt	.+2      	; 0x5ede <getInputFromSpeed+0x39e>
    5edc:	88 c0       	rjmp	.+272    	; 0x5fee <getInputFromSpeed+0x4ae>
    5ede:	80 91 62 09 	lds	r24, 0x0962
    5ee2:	90 91 63 09 	lds	r25, 0x0963
    5ee6:	82 17       	cp	r24, r18
    5ee8:	93 07       	cpc	r25, r19
    5eea:	0c f0       	brlt	.+2      	; 0x5eee <getInputFromSpeed+0x3ae>
    5eec:	83 c0       	rjmp	.+262    	; 0x5ff4 <getInputFromSpeed+0x4b4>
    5eee:	c0 91 72 09 	lds	r28, 0x0972
    5ef2:	d0 91 73 09 	lds	r29, 0x0973
    5ef6:	c2 17       	cp	r28, r18
    5ef8:	d3 07       	cpc	r29, r19
    5efa:	0c f4       	brge	.+2      	; 0x5efe <getInputFromSpeed+0x3be>
    5efc:	d9 ce       	rjmp	.-590    	; 0x5cb0 <getInputFromSpeed+0x170>
        currVel = -currVel; // consider only positive values
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
    5efe:	c8 e0       	ldi	r28, 0x08	; 8
    5f00:	d0 e0       	ldi	r29, 0x00	; 0
                break;
            }
        } 
    }

    if(i==0) {  // the velocity is lower than first saved in the matrix
    5f02:	20 97       	sbiw	r28, 0x00	; 0
    5f04:	09 f0       	breq	.+2      	; 0x5f08 <getInputFromSpeed+0x3c8>
    5f06:	79 c0       	rjmp	.+242    	; 0x5ffa <getInputFromSpeed+0x4ba>
        if(mode==LEFT_WHEEL_FW_SC) {
    5f08:	66 23       	and	r22, r22
    5f0a:	91 f4       	brne	.+36     	; 0x5f30 <getInputFromSpeed+0x3f0>
            temp = (currVel*calibration[0][0])/calibration[0][1];
    5f0c:	40 91 e4 08 	lds	r20, 0x08E4
    5f10:	50 91 e5 08 	lds	r21, 0x08E5
    5f14:	24 9f       	mul	r18, r20
    5f16:	c0 01       	movw	r24, r0
    5f18:	25 9f       	mul	r18, r21
    5f1a:	90 0d       	add	r25, r0
    5f1c:	34 9f       	mul	r19, r20
    5f1e:	90 0d       	add	r25, r0
    5f20:	11 24       	eor	r1, r1
    5f22:	60 91 e6 08 	lds	r22, 0x08E6
    5f26:	70 91 e7 08 	lds	r23, 0x08E7
    5f2a:	0e 94 68 56 	call	0xacd0	; 0xacd0 <__divmodhi4>
    5f2e:	9a ce       	rjmp	.-716    	; 0x5c64 <getInputFromSpeed+0x124>
        } else if(mode==RIGHT_WHEEL_FW_SC) {
    5f30:	61 30       	cpi	r22, 0x01	; 1
    5f32:	d1 f0       	breq	.+52     	; 0x5f68 <getInputFromSpeed+0x428>
            temp = (currVel*calibration[0][2])/calibration[0][3];
        } else if(mode==LEFT_WHEEL_BW_SC) {
    5f34:	62 30       	cpi	r22, 0x02	; 2
    5f36:	51 f1       	breq	.+84     	; 0x5f8c <getInputFromSpeed+0x44c>
            temp = currVel*calibration[0][4]/calibration[0][5];
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
    5f38:	63 30       	cpi	r22, 0x03	; 3
    5f3a:	09 f0       	breq	.+2      	; 0x5f3e <getInputFromSpeed+0x3fe>
    5f3c:	91 ce       	rjmp	.-734    	; 0x5c60 <getInputFromSpeed+0x120>
            temp = currVel*calibration[0][6]/calibration[0][7];
    5f3e:	40 91 f0 08 	lds	r20, 0x08F0
    5f42:	50 91 f1 08 	lds	r21, 0x08F1
    5f46:	24 9f       	mul	r18, r20
    5f48:	c0 01       	movw	r24, r0
    5f4a:	25 9f       	mul	r18, r21
    5f4c:	90 0d       	add	r25, r0
    5f4e:	34 9f       	mul	r19, r20
    5f50:	90 0d       	add	r25, r0
    5f52:	11 24       	eor	r1, r1
    5f54:	60 91 f2 08 	lds	r22, 0x08F2
    5f58:	70 91 f3 08 	lds	r23, 0x08F3
    5f5c:	0e 94 68 56 	call	0xacd0	; 0xacd0 <__divmodhi4>
            temp = -temp;
    5f60:	70 95       	com	r23
    5f62:	61 95       	neg	r22
    5f64:	7f 4f       	sbci	r23, 0xFF	; 255
    5f66:	7e ce       	rjmp	.-772    	; 0x5c64 <getInputFromSpeed+0x124>

    if(i==0) {  // the velocity is lower than first saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][0])/calibration[0][1];
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][2])/calibration[0][3];
    5f68:	40 91 e8 08 	lds	r20, 0x08E8
    5f6c:	50 91 e9 08 	lds	r21, 0x08E9
    5f70:	24 9f       	mul	r18, r20
    5f72:	c0 01       	movw	r24, r0
    5f74:	25 9f       	mul	r18, r21
    5f76:	90 0d       	add	r25, r0
    5f78:	34 9f       	mul	r19, r20
    5f7a:	90 0d       	add	r25, r0
    5f7c:	11 24       	eor	r1, r1
    5f7e:	60 91 ea 08 	lds	r22, 0x08EA
    5f82:	70 91 eb 08 	lds	r23, 0x08EB
    5f86:	0e 94 68 56 	call	0xacd0	; 0xacd0 <__divmodhi4>
    5f8a:	6c ce       	rjmp	.-808    	; 0x5c64 <getInputFromSpeed+0x124>
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][4]/calibration[0][5];
    5f8c:	40 91 ec 08 	lds	r20, 0x08EC
    5f90:	50 91 ed 08 	lds	r21, 0x08ED
    5f94:	24 9f       	mul	r18, r20
    5f96:	c0 01       	movw	r24, r0
    5f98:	25 9f       	mul	r18, r21
    5f9a:	90 0d       	add	r25, r0
    5f9c:	34 9f       	mul	r19, r20
    5f9e:	90 0d       	add	r25, r0
    5fa0:	11 24       	eor	r1, r1
    5fa2:	60 91 ee 08 	lds	r22, 0x08EE
    5fa6:	70 91 ef 08 	lds	r23, 0x08EF
    5faa:	0e 94 68 56 	call	0xacd0	; 0xacd0 <__divmodhi4>
            temp = -temp;
    5fae:	70 95       	com	r23
    5fb0:	61 95       	neg	r22
    5fb2:	7f 4f       	sbci	r23, 0xFF	; 255
    5fb4:	57 ce       	rjmp	.-850    	; 0x5c64 <getInputFromSpeed+0x124>
    5fb6:	c0 91 6a 09 	lds	r28, 0x096A
    5fba:	d0 91 6b 09 	lds	r29, 0x096B
    5fbe:	49 cf       	rjmp	.-366    	; 0x5e52 <getInputFromSpeed+0x312>

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
        currVel = -currVel; // consider only positive values
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    5fc0:	c0 e0       	ldi	r28, 0x00	; 0
    5fc2:	d0 e0       	ldi	r29, 0x00	; 0
    5fc4:	9e cf       	rjmp	.-196    	; 0x5f02 <getInputFromSpeed+0x3c2>
    5fc6:	c4 e0       	ldi	r28, 0x04	; 4
    5fc8:	d0 e0       	ldi	r29, 0x00	; 0
    5fca:	9b cf       	rjmp	.-202    	; 0x5f02 <getInputFromSpeed+0x3c2>
    5fcc:	c5 e0       	ldi	r28, 0x05	; 5
    5fce:	d0 e0       	ldi	r29, 0x00	; 0
    5fd0:	98 cf       	rjmp	.-208    	; 0x5f02 <getInputFromSpeed+0x3c2>
    5fd2:	c1 e0       	ldi	r28, 0x01	; 1
    5fd4:	d0 e0       	ldi	r29, 0x00	; 0
    5fd6:	95 cf       	rjmp	.-214    	; 0x5f02 <getInputFromSpeed+0x3c2>
    5fd8:	c2 e0       	ldi	r28, 0x02	; 2
    5fda:	d0 e0       	ldi	r29, 0x00	; 0
    5fdc:	92 cf       	rjmp	.-220    	; 0x5f02 <getInputFromSpeed+0x3c2>
    5fde:	c3 e0       	ldi	r28, 0x03	; 3
    5fe0:	d0 e0       	ldi	r29, 0x00	; 0
    5fe2:	8f cf       	rjmp	.-226    	; 0x5f02 <getInputFromSpeed+0x3c2>
    5fe4:	c0 91 6e 09 	lds	r28, 0x096E
    5fe8:	d0 91 6f 09 	lds	r29, 0x096F
    5fec:	b7 ce       	rjmp	.-658    	; 0x5d5c <getInputFromSpeed+0x21c>
    5fee:	c6 e0       	ldi	r28, 0x06	; 6
    5ff0:	d0 e0       	ldi	r29, 0x00	; 0
    5ff2:	87 cf       	rjmp	.-242    	; 0x5f02 <getInputFromSpeed+0x3c2>
    5ff4:	c7 e0       	ldi	r28, 0x07	; 7
    5ff6:	d0 e0       	ldi	r29, 0x00	; 0
    5ff8:	84 cf       	rjmp	.-248    	; 0x5f02 <getInputFromSpeed+0x3c2>
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][6]/calibration[0][7];
            temp = -temp;
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    5ffa:	c9 30       	cpi	r28, 0x09	; 9
    5ffc:	d1 05       	cpc	r29, r1
    5ffe:	09 f4       	brne	.+2      	; 0x6002 <getInputFromSpeed+0x4c2>
    6000:	48 ce       	rjmp	.-880    	; 0x5c92 <getInputFromSpeed+0x152>
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][6]/(float)calibration[CALIBRATION_SAMPLES-1][7]);
            temp = -temp;
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
    6002:	66 23       	and	r22, r22
    6004:	09 f0       	breq	.+2      	; 0x6008 <getInputFromSpeed+0x4c8>
    6006:	47 c0       	rjmp	.+142    	; 0x6096 <getInputFromSpeed+0x556>
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
    6008:	fe 01       	movw	r30, r28
    600a:	e2 95       	swap	r30
    600c:	f2 95       	swap	r31
    600e:	f0 7f       	andi	r31, 0xF0	; 240
    6010:	fe 27       	eor	r31, r30
    6012:	e0 7f       	andi	r30, 0xF0	; 240
    6014:	fe 27       	eor	r31, r30
    6016:	ec 52       	subi	r30, 0x2C	; 44
    6018:	f7 4f       	sbci	r31, 0xF7	; 247
    601a:	c2 80       	ldd	r12, Z+2	; 0x02
    601c:	d3 80       	ldd	r13, Z+3	; 0x03
    601e:	a0 80       	ld	r10, Z
    6020:	b1 80       	ldd	r11, Z+1	; 0x01
    6022:	2c 19       	sub	r18, r12
    6024:	3d 09       	sbc	r19, r13
    6026:	b9 01       	movw	r22, r18
    6028:	88 27       	eor	r24, r24
    602a:	77 fd       	sbrc	r23, 7
    602c:	80 95       	com	r24
    602e:	98 2f       	mov	r25, r24
    6030:	0e 94 91 54 	call	0xa922	; 0xa922 <__floatsisf>
    6034:	7b 01       	movw	r14, r22
    6036:	8c 01       	movw	r16, r24
    6038:	c2 95       	swap	r28
    603a:	d2 95       	swap	r29
    603c:	d0 7f       	andi	r29, 0xF0	; 240
    603e:	dc 27       	eor	r29, r28
    6040:	c0 7f       	andi	r28, 0xF0	; 240
    6042:	dc 27       	eor	r29, r28
    6044:	cc 51       	subi	r28, 0x1C	; 28
    6046:	d7 4f       	sbci	r29, 0xF7	; 247
    6048:	68 81       	ld	r22, Y
    604a:	79 81       	ldd	r23, Y+1	; 0x01
    604c:	6a 19       	sub	r22, r10
    604e:	7b 09       	sbc	r23, r11
    6050:	88 27       	eor	r24, r24
    6052:	77 fd       	sbrc	r23, 7
    6054:	80 95       	com	r24
    6056:	98 2f       	mov	r25, r24
    6058:	0e 94 91 54 	call	0xa922	; 0xa922 <__floatsisf>
    605c:	9b 01       	movw	r18, r22
    605e:	ac 01       	movw	r20, r24
    6060:	c8 01       	movw	r24, r16
    6062:	b7 01       	movw	r22, r14
    6064:	0e 94 aa 55 	call	0xab54	; 0xab54 <__mulsf3>
    6068:	7b 01       	movw	r14, r22
    606a:	8c 01       	movw	r16, r24
    606c:	6a 81       	ldd	r22, Y+2	; 0x02
    606e:	7b 81       	ldd	r23, Y+3	; 0x03
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
    6070:	6c 19       	sub	r22, r12
    6072:	7d 09       	sbc	r23, r13
    6074:	88 27       	eor	r24, r24
    6076:	77 fd       	sbrc	r23, 7
    6078:	80 95       	com	r24
    607a:	98 2f       	mov	r25, r24
    607c:	0e 94 91 54 	call	0xa922	; 0xa922 <__floatsisf>
    6080:	9b 01       	movw	r18, r22
    6082:	ac 01       	movw	r20, r24
    6084:	c8 01       	movw	r24, r16
    6086:	b7 01       	movw	r22, r14
    6088:	0e 94 f6 53 	call	0xa7ec	; 0xa7ec <__divsf3>
    608c:	0e 94 5e 54 	call	0xa8bc	; 0xa8bc <__fixsfsi>
    6090:	6a 0d       	add	r22, r10
    6092:	7b 1d       	adc	r23, r11
    6094:	e7 cd       	rjmp	.-1074   	; 0x5c64 <getInputFromSpeed+0x124>
            temp = -temp;
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
        } else if(mode==RIGHT_WHEEL_FW_SC) {
    6096:	61 30       	cpi	r22, 0x01	; 1
    6098:	09 f4       	brne	.+2      	; 0x609c <getInputFromSpeed+0x55c>
    609a:	50 c0       	rjmp	.+160    	; 0x613c <getInputFromSpeed+0x5fc>
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
        } else if(mode==LEFT_WHEEL_BW_SC) {
    609c:	62 30       	cpi	r22, 0x02	; 2
    609e:	09 f4       	brne	.+2      	; 0x60a2 <getInputFromSpeed+0x562>
    60a0:	82 c0       	rjmp	.+260    	; 0x61a6 <getInputFromSpeed+0x666>
            temp = calibration[i-1][4] + (signed int)(((float)(currVel-calibration[i-1][5])*(float)(calibration[i][4]-calibration[i-1][4]))/(float)(calibration[i][5]-calibration[i-1][5]));
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
    60a2:	63 30       	cpi	r22, 0x03	; 3
    60a4:	09 f0       	breq	.+2      	; 0x60a8 <getInputFromSpeed+0x568>
    60a6:	dc cd       	rjmp	.-1096   	; 0x5c60 <getInputFromSpeed+0x120>
            temp = calibration[i-1][6] + (signed int)(((float)(currVel-calibration[i-1][7])*(float)(calibration[i][6]-calibration[i-1][6]))/(float)(calibration[i][7]-calibration[i-1][7]));
    60a8:	fe 01       	movw	r30, r28
    60aa:	e2 95       	swap	r30
    60ac:	f2 95       	swap	r31
    60ae:	f0 7f       	andi	r31, 0xF0	; 240
    60b0:	fe 27       	eor	r31, r30
    60b2:	e0 7f       	andi	r30, 0xF0	; 240
    60b4:	fe 27       	eor	r31, r30
    60b6:	ec 52       	subi	r30, 0x2C	; 44
    60b8:	f7 4f       	sbci	r31, 0xF7	; 247
    60ba:	c6 84       	ldd	r12, Z+14	; 0x0e
    60bc:	d7 84       	ldd	r13, Z+15	; 0x0f
    60be:	a4 84       	ldd	r10, Z+12	; 0x0c
    60c0:	b5 84       	ldd	r11, Z+13	; 0x0d
    60c2:	2c 19       	sub	r18, r12
    60c4:	3d 09       	sbc	r19, r13
    60c6:	b9 01       	movw	r22, r18
    60c8:	88 27       	eor	r24, r24
    60ca:	77 fd       	sbrc	r23, 7
    60cc:	80 95       	com	r24
    60ce:	98 2f       	mov	r25, r24
    60d0:	0e 94 91 54 	call	0xa922	; 0xa922 <__floatsisf>
    60d4:	7b 01       	movw	r14, r22
    60d6:	8c 01       	movw	r16, r24
    60d8:	c2 95       	swap	r28
    60da:	d2 95       	swap	r29
    60dc:	d0 7f       	andi	r29, 0xF0	; 240
    60de:	dc 27       	eor	r29, r28
    60e0:	c0 7f       	andi	r28, 0xF0	; 240
    60e2:	dc 27       	eor	r29, r28
    60e4:	cc 51       	subi	r28, 0x1C	; 28
    60e6:	d7 4f       	sbci	r29, 0xF7	; 247
    60e8:	6c 85       	ldd	r22, Y+12	; 0x0c
    60ea:	7d 85       	ldd	r23, Y+13	; 0x0d
    60ec:	6a 19       	sub	r22, r10
    60ee:	7b 09       	sbc	r23, r11
    60f0:	88 27       	eor	r24, r24
    60f2:	77 fd       	sbrc	r23, 7
    60f4:	80 95       	com	r24
    60f6:	98 2f       	mov	r25, r24
    60f8:	0e 94 91 54 	call	0xa922	; 0xa922 <__floatsisf>
    60fc:	9b 01       	movw	r18, r22
    60fe:	ac 01       	movw	r20, r24
    6100:	c8 01       	movw	r24, r16
    6102:	b7 01       	movw	r22, r14
    6104:	0e 94 aa 55 	call	0xab54	; 0xab54 <__mulsf3>
    6108:	7b 01       	movw	r14, r22
    610a:	8c 01       	movw	r16, r24
    610c:	6e 85       	ldd	r22, Y+14	; 0x0e
    610e:	7f 85       	ldd	r23, Y+15	; 0x0f
    6110:	6c 19       	sub	r22, r12
    6112:	7d 09       	sbc	r23, r13
    6114:	88 27       	eor	r24, r24
    6116:	77 fd       	sbrc	r23, 7
    6118:	80 95       	com	r24
    611a:	98 2f       	mov	r25, r24
    611c:	0e 94 91 54 	call	0xa922	; 0xa922 <__floatsisf>
    6120:	9b 01       	movw	r18, r22
    6122:	ac 01       	movw	r20, r24
    6124:	c8 01       	movw	r24, r16
    6126:	b7 01       	movw	r22, r14
    6128:	0e 94 f6 53 	call	0xa7ec	; 0xa7ec <__divsf3>
    612c:	0e 94 5e 54 	call	0xa8bc	; 0xa8bc <__fixsfsi>
    6130:	6a 0d       	add	r22, r10
    6132:	7b 1d       	adc	r23, r11
            temp = -temp;
    6134:	70 95       	com	r23
    6136:	61 95       	neg	r22
    6138:	7f 4f       	sbci	r23, 0xFF	; 255
    613a:	94 cd       	rjmp	.-1240   	; 0x5c64 <getInputFromSpeed+0x124>
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
    613c:	fe 01       	movw	r30, r28
    613e:	e2 95       	swap	r30
    6140:	f2 95       	swap	r31
    6142:	f0 7f       	andi	r31, 0xF0	; 240
    6144:	fe 27       	eor	r31, r30
    6146:	e0 7f       	andi	r30, 0xF0	; 240
    6148:	fe 27       	eor	r31, r30
    614a:	ec 52       	subi	r30, 0x2C	; 44
    614c:	f7 4f       	sbci	r31, 0xF7	; 247
    614e:	c6 80       	ldd	r12, Z+6	; 0x06
    6150:	d7 80       	ldd	r13, Z+7	; 0x07
    6152:	a4 80       	ldd	r10, Z+4	; 0x04
    6154:	b5 80       	ldd	r11, Z+5	; 0x05
    6156:	2c 19       	sub	r18, r12
    6158:	3d 09       	sbc	r19, r13
    615a:	b9 01       	movw	r22, r18
    615c:	88 27       	eor	r24, r24
    615e:	77 fd       	sbrc	r23, 7
    6160:	80 95       	com	r24
    6162:	98 2f       	mov	r25, r24
    6164:	0e 94 91 54 	call	0xa922	; 0xa922 <__floatsisf>
    6168:	7b 01       	movw	r14, r22
    616a:	8c 01       	movw	r16, r24
    616c:	c2 95       	swap	r28
    616e:	d2 95       	swap	r29
    6170:	d0 7f       	andi	r29, 0xF0	; 240
    6172:	dc 27       	eor	r29, r28
    6174:	c0 7f       	andi	r28, 0xF0	; 240
    6176:	dc 27       	eor	r29, r28
    6178:	cc 51       	subi	r28, 0x1C	; 28
    617a:	d7 4f       	sbci	r29, 0xF7	; 247
    617c:	6c 81       	ldd	r22, Y+4	; 0x04
    617e:	7d 81       	ldd	r23, Y+5	; 0x05
    6180:	6a 19       	sub	r22, r10
    6182:	7b 09       	sbc	r23, r11
    6184:	88 27       	eor	r24, r24
    6186:	77 fd       	sbrc	r23, 7
    6188:	80 95       	com	r24
    618a:	98 2f       	mov	r25, r24
    618c:	0e 94 91 54 	call	0xa922	; 0xa922 <__floatsisf>
    6190:	9b 01       	movw	r18, r22
    6192:	ac 01       	movw	r20, r24
    6194:	c8 01       	movw	r24, r16
    6196:	b7 01       	movw	r22, r14
    6198:	0e 94 aa 55 	call	0xab54	; 0xab54 <__mulsf3>
    619c:	7b 01       	movw	r14, r22
    619e:	8c 01       	movw	r16, r24
    61a0:	6e 81       	ldd	r22, Y+6	; 0x06
    61a2:	7f 81       	ldd	r23, Y+7	; 0x07
    61a4:	65 cf       	rjmp	.-310    	; 0x6070 <getInputFromSpeed+0x530>
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = calibration[i-1][4] + (signed int)(((float)(currVel-calibration[i-1][5])*(float)(calibration[i][4]-calibration[i-1][4]))/(float)(calibration[i][5]-calibration[i-1][5]));
    61a6:	fe 01       	movw	r30, r28
    61a8:	e2 95       	swap	r30
    61aa:	f2 95       	swap	r31
    61ac:	f0 7f       	andi	r31, 0xF0	; 240
    61ae:	fe 27       	eor	r31, r30
    61b0:	e0 7f       	andi	r30, 0xF0	; 240
    61b2:	fe 27       	eor	r31, r30
    61b4:	ec 52       	subi	r30, 0x2C	; 44
    61b6:	f7 4f       	sbci	r31, 0xF7	; 247
    61b8:	c2 84       	ldd	r12, Z+10	; 0x0a
    61ba:	d3 84       	ldd	r13, Z+11	; 0x0b
    61bc:	a0 84       	ldd	r10, Z+8	; 0x08
    61be:	b1 84       	ldd	r11, Z+9	; 0x09
    61c0:	2c 19       	sub	r18, r12
    61c2:	3d 09       	sbc	r19, r13
    61c4:	b9 01       	movw	r22, r18
    61c6:	88 27       	eor	r24, r24
    61c8:	77 fd       	sbrc	r23, 7
    61ca:	80 95       	com	r24
    61cc:	98 2f       	mov	r25, r24
    61ce:	0e 94 91 54 	call	0xa922	; 0xa922 <__floatsisf>
    61d2:	7b 01       	movw	r14, r22
    61d4:	8c 01       	movw	r16, r24
    61d6:	c2 95       	swap	r28
    61d8:	d2 95       	swap	r29
    61da:	d0 7f       	andi	r29, 0xF0	; 240
    61dc:	dc 27       	eor	r29, r28
    61de:	c0 7f       	andi	r28, 0xF0	; 240
    61e0:	dc 27       	eor	r29, r28
    61e2:	cc 51       	subi	r28, 0x1C	; 28
    61e4:	d7 4f       	sbci	r29, 0xF7	; 247
    61e6:	68 85       	ldd	r22, Y+8	; 0x08
    61e8:	79 85       	ldd	r23, Y+9	; 0x09
    61ea:	6a 19       	sub	r22, r10
    61ec:	7b 09       	sbc	r23, r11
    61ee:	88 27       	eor	r24, r24
    61f0:	77 fd       	sbrc	r23, 7
    61f2:	80 95       	com	r24
    61f4:	98 2f       	mov	r25, r24
    61f6:	0e 94 91 54 	call	0xa922	; 0xa922 <__floatsisf>
    61fa:	9b 01       	movw	r18, r22
    61fc:	ac 01       	movw	r20, r24
    61fe:	c8 01       	movw	r24, r16
    6200:	b7 01       	movw	r22, r14
    6202:	0e 94 aa 55 	call	0xab54	; 0xab54 <__mulsf3>
    6206:	7b 01       	movw	r14, r22
    6208:	8c 01       	movw	r16, r24
    620a:	6a 85       	ldd	r22, Y+10	; 0x0a
    620c:	7b 85       	ldd	r23, Y+11	; 0x0b
    620e:	80 cf       	rjmp	.-256    	; 0x6110 <getInputFromSpeed+0x5d0>

00006210 <getRightSpeedFromInput>:
    
    return temp;
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {
    6210:	8f 92       	push	r8
    6212:	9f 92       	push	r9
    6214:	af 92       	push	r10
    6216:	bf 92       	push	r11
    6218:	cf 92       	push	r12
    621a:	df 92       	push	r13
    621c:	ef 92       	push	r14
    621e:	ff 92       	push	r15
    6220:	0f 93       	push	r16
    6222:	1f 93       	push	r17
    6224:	cf 93       	push	r28
    6226:	df 93       	push	r29

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    6228:	c0 91 03 03 	lds	r28, 0x0303
    622c:	d0 91 04 03 	lds	r29, 0x0304
    6230:	80 91 05 03 	lds	r24, 0x0305
    6234:	90 91 06 03 	lds	r25, 0x0306
    6238:	97 fd       	sbrc	r25, 7
    623a:	d9 c0       	rjmp	.+434    	; 0x63ee <getRightSpeedFromInput+0x1de>
    623c:	60 91 e8 08 	lds	r22, 0x08E8
    6240:	70 91 e9 08 	lds	r23, 0x08E9
    6244:	6c 17       	cp	r22, r28
    6246:	7d 07       	cpc	r23, r29
    6248:	0c f0       	brlt	.+2      	; 0x624c <getRightSpeedFromInput+0x3c>
    624a:	bd c0       	rjmp	.+378    	; 0x63c6 <getRightSpeedFromInput+0x1b6>
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    624c:	0f ef       	ldi	r16, 0xFF	; 255
    624e:	1f ef       	ldi	r17, 0xFF	; 255
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    6250:	80 91 f8 08 	lds	r24, 0x08F8
    6254:	90 91 f9 08 	lds	r25, 0x08F9
    6258:	8c 17       	cp	r24, r28
    625a:	9d 07       	cpc	r25, r29
    625c:	44 f0       	brlt	.+16     	; 0x626e <getRightSpeedFromInput+0x5e>
    
    return temp;
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {
    625e:	81 e0       	ldi	r24, 0x01	; 1
    6260:	9f ef       	ldi	r25, 0xFF	; 255
    6262:	0f 3f       	cpi	r16, 0xFF	; 255
    6264:	19 07       	cpc	r17, r25
    6266:	09 f0       	breq	.+2      	; 0x626a <getRightSpeedFromInput+0x5a>
    6268:	80 e0       	ldi	r24, 0x00	; 0
    626a:	08 2f       	mov	r16, r24
    626c:	10 e0       	ldi	r17, 0x00	; 0

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    626e:	80 91 08 09 	lds	r24, 0x0908
    6272:	90 91 09 09 	lds	r25, 0x0909
    6276:	8c 17       	cp	r24, r28
    6278:	9d 07       	cpc	r25, r29
    627a:	2c f0       	brlt	.+10     	; 0x6286 <getRightSpeedFromInput+0x76>
    627c:	8f ef       	ldi	r24, 0xFF	; 255
    627e:	0f 3f       	cpi	r16, 0xFF	; 255
    6280:	18 07       	cpc	r17, r24
    6282:	09 f4       	brne	.+2      	; 0x6286 <getRightSpeedFromInput+0x76>
    6284:	6c c1       	rjmp	.+728    	; 0x655e <getRightSpeedFromInput+0x34e>
    6286:	80 91 18 09 	lds	r24, 0x0918
    628a:	90 91 19 09 	lds	r25, 0x0919
    628e:	8c 17       	cp	r24, r28
    6290:	9d 07       	cpc	r25, r29
    6292:	2c f0       	brlt	.+10     	; 0x629e <getRightSpeedFromInput+0x8e>
    6294:	9f ef       	ldi	r25, 0xFF	; 255
    6296:	0f 3f       	cpi	r16, 0xFF	; 255
    6298:	19 07       	cpc	r17, r25
    629a:	09 f4       	brne	.+2      	; 0x629e <getRightSpeedFromInput+0x8e>
    629c:	72 c1       	rjmp	.+740    	; 0x6582 <getRightSpeedFromInput+0x372>
    629e:	80 91 28 09 	lds	r24, 0x0928
    62a2:	90 91 29 09 	lds	r25, 0x0929
    62a6:	8c 17       	cp	r24, r28
    62a8:	9d 07       	cpc	r25, r29
    62aa:	2c f0       	brlt	.+10     	; 0x62b6 <getRightSpeedFromInput+0xa6>
    62ac:	8f ef       	ldi	r24, 0xFF	; 255
    62ae:	0f 3f       	cpi	r16, 0xFF	; 255
    62b0:	18 07       	cpc	r17, r24
    62b2:	09 f4       	brne	.+2      	; 0x62b6 <getRightSpeedFromInput+0xa6>
    62b4:	63 c1       	rjmp	.+710    	; 0x657c <getRightSpeedFromInput+0x36c>
    62b6:	80 91 38 09 	lds	r24, 0x0938
    62ba:	90 91 39 09 	lds	r25, 0x0939
    62be:	8c 17       	cp	r24, r28
    62c0:	9d 07       	cpc	r25, r29
    62c2:	2c f0       	brlt	.+10     	; 0x62ce <getRightSpeedFromInput+0xbe>
    62c4:	9f ef       	ldi	r25, 0xFF	; 255
    62c6:	0f 3f       	cpi	r16, 0xFF	; 255
    62c8:	19 07       	cpc	r17, r25
    62ca:	09 f4       	brne	.+2      	; 0x62ce <getRightSpeedFromInput+0xbe>
    62cc:	54 c1       	rjmp	.+680    	; 0x6576 <getRightSpeedFromInput+0x366>
    62ce:	80 91 48 09 	lds	r24, 0x0948
    62d2:	90 91 49 09 	lds	r25, 0x0949
    62d6:	8c 17       	cp	r24, r28
    62d8:	9d 07       	cpc	r25, r29
    62da:	2c f0       	brlt	.+10     	; 0x62e6 <getRightSpeedFromInput+0xd6>
    62dc:	8f ef       	ldi	r24, 0xFF	; 255
    62de:	0f 3f       	cpi	r16, 0xFF	; 255
    62e0:	18 07       	cpc	r17, r24
    62e2:	09 f4       	brne	.+2      	; 0x62e6 <getRightSpeedFromInput+0xd6>
    62e4:	45 c1       	rjmp	.+650    	; 0x6570 <getRightSpeedFromInput+0x360>
    62e6:	80 91 58 09 	lds	r24, 0x0958
    62ea:	90 91 59 09 	lds	r25, 0x0959
    62ee:	8c 17       	cp	r24, r28
    62f0:	9d 07       	cpc	r25, r29
    62f2:	2c f0       	brlt	.+10     	; 0x62fe <getRightSpeedFromInput+0xee>
    62f4:	9f ef       	ldi	r25, 0xFF	; 255
    62f6:	0f 3f       	cpi	r16, 0xFF	; 255
    62f8:	19 07       	cpc	r17, r25
    62fa:	09 f4       	brne	.+2      	; 0x62fe <getRightSpeedFromInput+0xee>
    62fc:	36 c1       	rjmp	.+620    	; 0x656a <getRightSpeedFromInput+0x35a>
    62fe:	e0 90 68 09 	lds	r14, 0x0968
    6302:	f0 90 69 09 	lds	r15, 0x0969
    6306:	ec 16       	cp	r14, r28
    6308:	fd 06       	cpc	r15, r29
    630a:	2c f0       	brlt	.+10     	; 0x6316 <getRightSpeedFromInput+0x106>
    630c:	8f ef       	ldi	r24, 0xFF	; 255
    630e:	0f 3f       	cpi	r16, 0xFF	; 255
    6310:	18 07       	cpc	r17, r24
    6312:	09 f4       	brne	.+2      	; 0x6316 <getRightSpeedFromInput+0x106>
    6314:	27 c1       	rjmp	.+590    	; 0x6564 <getRightSpeedFromInput+0x354>
			}
		}        
    }

    if(pwm_right >= 0) {
        if(last_right_vel == 0) {
    6316:	20 97       	sbiw	r28, 0x00	; 0
    6318:	09 f4       	brne	.+2      	; 0x631c <getRightSpeedFromInput+0x10c>
    631a:	58 c0       	rjmp	.+176    	; 0x63cc <getRightSpeedFromInput+0x1bc>
            speedRightFromEnc = 0;
        } else {
            if(indFwR==0) {  // the velocity is lower than first saved in the matrix
    631c:	01 15       	cp	r16, r1
    631e:	11 05       	cpc	r17, r1
    6320:	09 f4       	brne	.+2      	; 0x6324 <getRightSpeedFromInput+0x114>
    6322:	32 c1       	rjmp	.+612    	; 0x6588 <getRightSpeedFromInput+0x378>
                speedRightFromEnc = (last_right_vel*calibration[0][3])/calibration[0][2];
            } else if(indFwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    6324:	9f ef       	ldi	r25, 0xFF	; 255
    6326:	0f 3f       	cpi	r16, 0xFF	; 255
    6328:	19 07       	cpc	r17, r25
    632a:	09 f4       	brne	.+2      	; 0x632e <getRightSpeedFromInput+0x11e>
    632c:	e9 c0       	rjmp	.+466    	; 0x6500 <getRightSpeedFromInput+0x2f0>
                speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][3]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][2]);  // take the max
            } else {
                speedRightFromEnc = calibration[indFwR-1][3] + (signed int)(((float)(last_right_vel-calibration[indFwR-1][2])*(float)(calibration[indFwR][3]-calibration[indFwR-1][3]))/(float)(calibration[indFwR][2]-calibration[indFwR-1][2]));
    632e:	f8 01       	movw	r30, r16
    6330:	e2 95       	swap	r30
    6332:	f2 95       	swap	r31
    6334:	f0 7f       	andi	r31, 0xF0	; 240
    6336:	fe 27       	eor	r31, r30
    6338:	e0 7f       	andi	r30, 0xF0	; 240
    633a:	fe 27       	eor	r31, r30
    633c:	ec 52       	subi	r30, 0x2C	; 44
    633e:	f7 4f       	sbci	r31, 0xF7	; 247
    6340:	a4 80       	ldd	r10, Z+4	; 0x04
    6342:	b5 80       	ldd	r11, Z+5	; 0x05
    6344:	86 80       	ldd	r8, Z+6	; 0x06
    6346:	97 80       	ldd	r9, Z+7	; 0x07
    6348:	ca 19       	sub	r28, r10
    634a:	db 09       	sbc	r29, r11
    634c:	be 01       	movw	r22, r28
    634e:	88 27       	eor	r24, r24
    6350:	77 fd       	sbrc	r23, 7
    6352:	80 95       	com	r24
    6354:	98 2f       	mov	r25, r24
    6356:	0e 94 91 54 	call	0xa922	; 0xa922 <__floatsisf>
    635a:	6b 01       	movw	r12, r22
    635c:	7c 01       	movw	r14, r24
    635e:	e8 01       	movw	r28, r16
    6360:	c2 95       	swap	r28
    6362:	d2 95       	swap	r29
    6364:	d0 7f       	andi	r29, 0xF0	; 240
    6366:	dc 27       	eor	r29, r28
    6368:	c0 7f       	andi	r28, 0xF0	; 240
    636a:	dc 27       	eor	r29, r28
    636c:	cc 51       	subi	r28, 0x1C	; 28
    636e:	d7 4f       	sbci	r29, 0xF7	; 247
    6370:	6e 81       	ldd	r22, Y+6	; 0x06
    6372:	7f 81       	ldd	r23, Y+7	; 0x07
    6374:	68 19       	sub	r22, r8
    6376:	79 09       	sbc	r23, r9
    6378:	88 27       	eor	r24, r24
    637a:	77 fd       	sbrc	r23, 7
    637c:	80 95       	com	r24
    637e:	98 2f       	mov	r25, r24
    6380:	0e 94 91 54 	call	0xa922	; 0xa922 <__floatsisf>
    6384:	9b 01       	movw	r18, r22
    6386:	ac 01       	movw	r20, r24
    6388:	c7 01       	movw	r24, r14
    638a:	b6 01       	movw	r22, r12
    638c:	0e 94 aa 55 	call	0xab54	; 0xab54 <__mulsf3>
    6390:	7b 01       	movw	r14, r22
    6392:	8c 01       	movw	r16, r24
    6394:	6c 81       	ldd	r22, Y+4	; 0x04
    6396:	7d 81       	ldd	r23, Y+5	; 0x05
    6398:	6a 19       	sub	r22, r10
    639a:	7b 09       	sbc	r23, r11
    639c:	88 27       	eor	r24, r24
    639e:	77 fd       	sbrc	r23, 7
    63a0:	80 95       	com	r24
    63a2:	98 2f       	mov	r25, r24
    63a4:	0e 94 91 54 	call	0xa922	; 0xa922 <__floatsisf>
    63a8:	9b 01       	movw	r18, r22
    63aa:	ac 01       	movw	r20, r24
    63ac:	c8 01       	movw	r24, r16
    63ae:	b7 01       	movw	r22, r14
    63b0:	0e 94 f6 53 	call	0xa7ec	; 0xa7ec <__divsf3>
    63b4:	0e 94 5e 54 	call	0xa8bc	; 0xa8bc <__fixsfsi>
    63b8:	68 0d       	add	r22, r8
    63ba:	79 1d       	adc	r23, r9
    63bc:	70 93 cb 04 	sts	0x04CB, r23
    63c0:	60 93 ca 04 	sts	0x04CA, r22
    63c4:	07 c0       	rjmp	.+14     	; 0x63d4 <getRightSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    63c6:	00 e0       	ldi	r16, 0x00	; 0
    63c8:	10 e0       	ldi	r17, 0x00	; 0
    63ca:	42 cf       	rjmp	.-380    	; 0x6250 <getRightSpeedFromInput+0x40>
		}        
    }

    if(pwm_right >= 0) {
        if(last_right_vel == 0) {
            speedRightFromEnc = 0;
    63cc:	10 92 cb 04 	sts	0x04CB, r1
    63d0:	10 92 ca 04 	sts	0x04CA, r1
        	speedRightFromEnc = calibration[indBwR-1][7] + (signed int)(((float)(last_right_vel-calibration[indBwR-1][6])*(float)(calibration[indBwR][7]-calibration[indBwR-1][7]))/(float)(calibration[indBwR][6]-calibration[indBwR-1][6]));
		}
		speedRightFromEnc = -speedRightFromEnc;
    }
    
}
    63d4:	df 91       	pop	r29
    63d6:	cf 91       	pop	r28
    63d8:	1f 91       	pop	r17
    63da:	0f 91       	pop	r16
    63dc:	ff 90       	pop	r15
    63de:	ef 90       	pop	r14
    63e0:	df 90       	pop	r13
    63e2:	cf 90       	pop	r12
    63e4:	bf 90       	pop	r11
    63e6:	af 90       	pop	r10
    63e8:	9f 90       	pop	r9
    63ea:	8f 90       	pop	r8
    63ec:	08 95       	ret
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    63ee:	60 91 f0 08 	lds	r22, 0x08F0
    63f2:	70 91 f1 08 	lds	r23, 0x08F1
    63f6:	6c 17       	cp	r22, r28
    63f8:	7d 07       	cpc	r23, r29
    63fa:	0c f0       	brlt	.+2      	; 0x63fe <getRightSpeedFromInput+0x1ee>
    63fc:	7e c0       	rjmp	.+252    	; 0x64fa <getRightSpeedFromInput+0x2ea>
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    63fe:	0f ef       	ldi	r16, 0xFF	; 255
    6400:	1f ef       	ldi	r17, 0xFF	; 255
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    6402:	80 91 00 09 	lds	r24, 0x0900
    6406:	90 91 01 09 	lds	r25, 0x0901
    640a:	8c 17       	cp	r24, r28
    640c:	9d 07       	cpc	r25, r29
    640e:	44 f0       	brlt	.+16     	; 0x6420 <getRightSpeedFromInput+0x210>
    
    return temp;
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {
    6410:	81 e0       	ldi	r24, 0x01	; 1
    6412:	9f ef       	ldi	r25, 0xFF	; 255
    6414:	0f 3f       	cpi	r16, 0xFF	; 255
    6416:	19 07       	cpc	r17, r25
    6418:	09 f0       	breq	.+2      	; 0x641c <getRightSpeedFromInput+0x20c>
    641a:	80 e0       	ldi	r24, 0x00	; 0
    641c:	08 2f       	mov	r16, r24
    641e:	10 e0       	ldi	r17, 0x00	; 0
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    6420:	80 91 10 09 	lds	r24, 0x0910
    6424:	90 91 11 09 	lds	r25, 0x0911
    6428:	8c 17       	cp	r24, r28
    642a:	9d 07       	cpc	r25, r29
    642c:	2c f0       	brlt	.+10     	; 0x6438 <getRightSpeedFromInput+0x228>
    642e:	8f ef       	ldi	r24, 0xFF	; 255
    6430:	0f 3f       	cpi	r16, 0xFF	; 255
    6432:	18 07       	cpc	r17, r24
    6434:	09 f4       	brne	.+2      	; 0x6438 <getRightSpeedFromInput+0x228>
    6436:	19 c1       	rjmp	.+562    	; 0x666a <getRightSpeedFromInput+0x45a>
    6438:	80 91 20 09 	lds	r24, 0x0920
    643c:	90 91 21 09 	lds	r25, 0x0921
    6440:	8c 17       	cp	r24, r28
    6442:	9d 07       	cpc	r25, r29
    6444:	2c f0       	brlt	.+10     	; 0x6450 <getRightSpeedFromInput+0x240>
    6446:	9f ef       	ldi	r25, 0xFF	; 255
    6448:	0f 3f       	cpi	r16, 0xFF	; 255
    644a:	19 07       	cpc	r17, r25
    644c:	09 f4       	brne	.+2      	; 0x6450 <getRightSpeedFromInput+0x240>
    644e:	0a c1       	rjmp	.+532    	; 0x6664 <getRightSpeedFromInput+0x454>
    6450:	80 91 30 09 	lds	r24, 0x0930
    6454:	90 91 31 09 	lds	r25, 0x0931
    6458:	8c 17       	cp	r24, r28
    645a:	9d 07       	cpc	r25, r29
    645c:	2c f0       	brlt	.+10     	; 0x6468 <getRightSpeedFromInput+0x258>
    645e:	8f ef       	ldi	r24, 0xFF	; 255
    6460:	0f 3f       	cpi	r16, 0xFF	; 255
    6462:	18 07       	cpc	r17, r24
    6464:	09 f4       	brne	.+2      	; 0x6468 <getRightSpeedFromInput+0x258>
    6466:	fb c0       	rjmp	.+502    	; 0x665e <getRightSpeedFromInput+0x44e>
    6468:	80 91 40 09 	lds	r24, 0x0940
    646c:	90 91 41 09 	lds	r25, 0x0941
    6470:	8c 17       	cp	r24, r28
    6472:	9d 07       	cpc	r25, r29
    6474:	2c f0       	brlt	.+10     	; 0x6480 <getRightSpeedFromInput+0x270>
    6476:	9f ef       	ldi	r25, 0xFF	; 255
    6478:	0f 3f       	cpi	r16, 0xFF	; 255
    647a:	19 07       	cpc	r17, r25
    647c:	09 f4       	brne	.+2      	; 0x6480 <getRightSpeedFromInput+0x270>
    647e:	ec c0       	rjmp	.+472    	; 0x6658 <getRightSpeedFromInput+0x448>
    6480:	80 91 50 09 	lds	r24, 0x0950
    6484:	90 91 51 09 	lds	r25, 0x0951
    6488:	8c 17       	cp	r24, r28
    648a:	9d 07       	cpc	r25, r29
    648c:	2c f0       	brlt	.+10     	; 0x6498 <getRightSpeedFromInput+0x288>
    648e:	8f ef       	ldi	r24, 0xFF	; 255
    6490:	0f 3f       	cpi	r16, 0xFF	; 255
    6492:	18 07       	cpc	r17, r24
    6494:	09 f4       	brne	.+2      	; 0x6498 <getRightSpeedFromInput+0x288>
    6496:	dd c0       	rjmp	.+442    	; 0x6652 <getRightSpeedFromInput+0x442>
    6498:	80 91 60 09 	lds	r24, 0x0960
    649c:	90 91 61 09 	lds	r25, 0x0961
    64a0:	8c 17       	cp	r24, r28
    64a2:	9d 07       	cpc	r25, r29
    64a4:	2c f0       	brlt	.+10     	; 0x64b0 <getRightSpeedFromInput+0x2a0>
    64a6:	9f ef       	ldi	r25, 0xFF	; 255
    64a8:	0f 3f       	cpi	r16, 0xFF	; 255
    64aa:	19 07       	cpc	r17, r25
    64ac:	09 f4       	brne	.+2      	; 0x64b0 <getRightSpeedFromInput+0x2a0>
    64ae:	ce c0       	rjmp	.+412    	; 0x664c <getRightSpeedFromInput+0x43c>
    64b0:	e0 90 70 09 	lds	r14, 0x0970
    64b4:	f0 90 71 09 	lds	r15, 0x0971
    64b8:	ec 16       	cp	r14, r28
    64ba:	fd 06       	cpc	r15, r29
    64bc:	2c f0       	brlt	.+10     	; 0x64c8 <getRightSpeedFromInput+0x2b8>
    64be:	8f ef       	ldi	r24, 0xFF	; 255
    64c0:	0f 3f       	cpi	r16, 0xFF	; 255
    64c2:	18 07       	cpc	r17, r24
    64c4:	09 f4       	brne	.+2      	; 0x64c8 <getRightSpeedFromInput+0x2b8>
    64c6:	bf c0       	rjmp	.+382    	; 0x6646 <getRightSpeedFromInput+0x436>
            } else {
                speedRightFromEnc = calibration[indFwR-1][3] + (signed int)(((float)(last_right_vel-calibration[indFwR-1][2])*(float)(calibration[indFwR][3]-calibration[indFwR-1][3]))/(float)(calibration[indFwR][2]-calibration[indFwR-1][2]));
            }
        }
    } else {
		if(indBwR==0) {  // the velocity is lower than first saved in the matrix
    64c8:	01 15       	cp	r16, r1
    64ca:	11 05       	cpc	r17, r1
    64cc:	09 f0       	breq	.+2      	; 0x64d0 <getRightSpeedFromInput+0x2c0>
    64ce:	6e c0       	rjmp	.+220    	; 0x65ac <getRightSpeedFromInput+0x39c>
        	speedRightFromEnc = (last_right_vel*calibration[0][7])/calibration[0][6];
    64d0:	20 91 f2 08 	lds	r18, 0x08F2
    64d4:	30 91 f3 08 	lds	r19, 0x08F3
    64d8:	c2 9f       	mul	r28, r18
    64da:	c0 01       	movw	r24, r0
    64dc:	c3 9f       	mul	r28, r19
    64de:	90 0d       	add	r25, r0
    64e0:	d2 9f       	mul	r29, r18
    64e2:	90 0d       	add	r25, r0
    64e4:	11 24       	eor	r1, r1
    64e6:	0e 94 68 56 	call	0xacd0	; 0xacd0 <__divmodhi4>
		} else if(indBwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][7]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][6]);  // take the max
		} else {
        	speedRightFromEnc = calibration[indBwR-1][7] + (signed int)(((float)(last_right_vel-calibration[indBwR-1][6])*(float)(calibration[indBwR][7]-calibration[indBwR-1][7]))/(float)(calibration[indBwR][6]-calibration[indBwR-1][6]));
		}
		speedRightFromEnc = -speedRightFromEnc;
    64ea:	70 95       	com	r23
    64ec:	61 95       	neg	r22
    64ee:	7f 4f       	sbci	r23, 0xFF	; 255
    64f0:	70 93 cb 04 	sts	0x04CB, r23
    64f4:	60 93 ca 04 	sts	0x04CA, r22
    64f8:	6d cf       	rjmp	.-294    	; 0x63d4 <getRightSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    64fa:	00 e0       	ldi	r16, 0x00	; 0
    64fc:	10 e0       	ldi	r17, 0x00	; 0
    64fe:	81 cf       	rjmp	.-254    	; 0x6402 <getRightSpeedFromInput+0x1f2>
            speedRightFromEnc = 0;
        } else {
            if(indFwR==0) {  // the velocity is lower than first saved in the matrix
                speedRightFromEnc = (last_right_vel*calibration[0][3])/calibration[0][2];
            } else if(indFwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
                speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][3]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][2]);  // take the max
    6500:	60 91 6a 09 	lds	r22, 0x096A
    6504:	70 91 6b 09 	lds	r23, 0x096B
    6508:	88 27       	eor	r24, r24
    650a:	77 fd       	sbrc	r23, 7
    650c:	80 95       	com	r24
    650e:	98 2f       	mov	r25, r24
    6510:	0e 94 91 54 	call	0xa922	; 0xa922 <__floatsisf>
    6514:	5b 01       	movw	r10, r22
    6516:	6c 01       	movw	r12, r24
    6518:	be 01       	movw	r22, r28
    651a:	88 27       	eor	r24, r24
    651c:	77 fd       	sbrc	r23, 7
    651e:	80 95       	com	r24
    6520:	98 2f       	mov	r25, r24
    6522:	0e 94 91 54 	call	0xa922	; 0xa922 <__floatsisf>
    6526:	9b 01       	movw	r18, r22
    6528:	ac 01       	movw	r20, r24
    652a:	c6 01       	movw	r24, r12
    652c:	b5 01       	movw	r22, r10
    652e:	0e 94 aa 55 	call	0xab54	; 0xab54 <__mulsf3>
    6532:	5b 01       	movw	r10, r22
    6534:	6c 01       	movw	r12, r24
    6536:	b7 01       	movw	r22, r14
    6538:	88 27       	eor	r24, r24
    653a:	77 fd       	sbrc	r23, 7
    653c:	80 95       	com	r24
    653e:	98 2f       	mov	r25, r24
    6540:	0e 94 91 54 	call	0xa922	; 0xa922 <__floatsisf>
    6544:	9b 01       	movw	r18, r22
    6546:	ac 01       	movw	r20, r24
    6548:	c6 01       	movw	r24, r12
    654a:	b5 01       	movw	r22, r10
    654c:	0e 94 f6 53 	call	0xa7ec	; 0xa7ec <__divsf3>
    6550:	0e 94 5e 54 	call	0xa8bc	; 0xa8bc <__fixsfsi>
    6554:	70 93 cb 04 	sts	0x04CB, r23
    6558:	60 93 ca 04 	sts	0x04CA, r22
    655c:	3b cf       	rjmp	.-394    	; 0x63d4 <getRightSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    655e:	02 e0       	ldi	r16, 0x02	; 2
    6560:	10 e0       	ldi	r17, 0x00	; 0
    6562:	91 ce       	rjmp	.-734    	; 0x6286 <getRightSpeedFromInput+0x76>
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    6564:	08 e0       	ldi	r16, 0x08	; 8
    6566:	10 e0       	ldi	r17, 0x00	; 0
    6568:	d6 ce       	rjmp	.-596    	; 0x6316 <getRightSpeedFromInput+0x106>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    656a:	07 e0       	ldi	r16, 0x07	; 7
    656c:	10 e0       	ldi	r17, 0x00	; 0
    656e:	c7 ce       	rjmp	.-626    	; 0x62fe <getRightSpeedFromInput+0xee>
    6570:	06 e0       	ldi	r16, 0x06	; 6
    6572:	10 e0       	ldi	r17, 0x00	; 0
    6574:	b8 ce       	rjmp	.-656    	; 0x62e6 <getRightSpeedFromInput+0xd6>
    6576:	05 e0       	ldi	r16, 0x05	; 5
    6578:	10 e0       	ldi	r17, 0x00	; 0
    657a:	a9 ce       	rjmp	.-686    	; 0x62ce <getRightSpeedFromInput+0xbe>
    657c:	04 e0       	ldi	r16, 0x04	; 4
    657e:	10 e0       	ldi	r17, 0x00	; 0
    6580:	9a ce       	rjmp	.-716    	; 0x62b6 <getRightSpeedFromInput+0xa6>
    6582:	03 e0       	ldi	r16, 0x03	; 3
    6584:	10 e0       	ldi	r17, 0x00	; 0
    6586:	8b ce       	rjmp	.-746    	; 0x629e <getRightSpeedFromInput+0x8e>
    if(pwm_right >= 0) {
        if(last_right_vel == 0) {
            speedRightFromEnc = 0;
        } else {
            if(indFwR==0) {  // the velocity is lower than first saved in the matrix
                speedRightFromEnc = (last_right_vel*calibration[0][3])/calibration[0][2];
    6588:	20 91 ea 08 	lds	r18, 0x08EA
    658c:	30 91 eb 08 	lds	r19, 0x08EB
    6590:	c2 9f       	mul	r28, r18
    6592:	c0 01       	movw	r24, r0
    6594:	c3 9f       	mul	r28, r19
    6596:	90 0d       	add	r25, r0
    6598:	d2 9f       	mul	r29, r18
    659a:	90 0d       	add	r25, r0
    659c:	11 24       	eor	r1, r1
    659e:	0e 94 68 56 	call	0xacd0	; 0xacd0 <__divmodhi4>
    65a2:	70 93 cb 04 	sts	0x04CB, r23
    65a6:	60 93 ca 04 	sts	0x04CA, r22
    65aa:	14 cf       	rjmp	.-472    	; 0x63d4 <getRightSpeedFromInput+0x1c4>
            }
        }
    } else {
		if(indBwR==0) {  // the velocity is lower than first saved in the matrix
        	speedRightFromEnc = (last_right_vel*calibration[0][7])/calibration[0][6];
		} else if(indBwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    65ac:	8f ef       	ldi	r24, 0xFF	; 255
    65ae:	0f 3f       	cpi	r16, 0xFF	; 255
    65b0:	18 07       	cpc	r17, r24
    65b2:	09 f4       	brne	.+2      	; 0x65b6 <getRightSpeedFromInput+0x3a6>
    65b4:	5d c0       	rjmp	.+186    	; 0x6670 <getRightSpeedFromInput+0x460>
        	speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][7]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][6]);  // take the max
		} else {
        	speedRightFromEnc = calibration[indBwR-1][7] + (signed int)(((float)(last_right_vel-calibration[indBwR-1][6])*(float)(calibration[indBwR][7]-calibration[indBwR-1][7]))/(float)(calibration[indBwR][6]-calibration[indBwR-1][6]));
    65b6:	f8 01       	movw	r30, r16
    65b8:	e2 95       	swap	r30
    65ba:	f2 95       	swap	r31
    65bc:	f0 7f       	andi	r31, 0xF0	; 240
    65be:	fe 27       	eor	r31, r30
    65c0:	e0 7f       	andi	r30, 0xF0	; 240
    65c2:	fe 27       	eor	r31, r30
    65c4:	ec 52       	subi	r30, 0x2C	; 44
    65c6:	f7 4f       	sbci	r31, 0xF7	; 247
    65c8:	a4 84       	ldd	r10, Z+12	; 0x0c
    65ca:	b5 84       	ldd	r11, Z+13	; 0x0d
    65cc:	86 84       	ldd	r8, Z+14	; 0x0e
    65ce:	97 84       	ldd	r9, Z+15	; 0x0f
    65d0:	ca 19       	sub	r28, r10
    65d2:	db 09       	sbc	r29, r11
    65d4:	be 01       	movw	r22, r28
    65d6:	88 27       	eor	r24, r24
    65d8:	77 fd       	sbrc	r23, 7
    65da:	80 95       	com	r24
    65dc:	98 2f       	mov	r25, r24
    65de:	0e 94 91 54 	call	0xa922	; 0xa922 <__floatsisf>
    65e2:	6b 01       	movw	r12, r22
    65e4:	7c 01       	movw	r14, r24
    65e6:	e8 01       	movw	r28, r16
    65e8:	c2 95       	swap	r28
    65ea:	d2 95       	swap	r29
    65ec:	d0 7f       	andi	r29, 0xF0	; 240
    65ee:	dc 27       	eor	r29, r28
    65f0:	c0 7f       	andi	r28, 0xF0	; 240
    65f2:	dc 27       	eor	r29, r28
    65f4:	cc 51       	subi	r28, 0x1C	; 28
    65f6:	d7 4f       	sbci	r29, 0xF7	; 247
    65f8:	6e 85       	ldd	r22, Y+14	; 0x0e
    65fa:	7f 85       	ldd	r23, Y+15	; 0x0f
    65fc:	68 19       	sub	r22, r8
    65fe:	79 09       	sbc	r23, r9
    6600:	88 27       	eor	r24, r24
    6602:	77 fd       	sbrc	r23, 7
    6604:	80 95       	com	r24
    6606:	98 2f       	mov	r25, r24
    6608:	0e 94 91 54 	call	0xa922	; 0xa922 <__floatsisf>
    660c:	9b 01       	movw	r18, r22
    660e:	ac 01       	movw	r20, r24
    6610:	c7 01       	movw	r24, r14
    6612:	b6 01       	movw	r22, r12
    6614:	0e 94 aa 55 	call	0xab54	; 0xab54 <__mulsf3>
    6618:	7b 01       	movw	r14, r22
    661a:	8c 01       	movw	r16, r24
    661c:	6c 85       	ldd	r22, Y+12	; 0x0c
    661e:	7d 85       	ldd	r23, Y+13	; 0x0d
    6620:	6a 19       	sub	r22, r10
    6622:	7b 09       	sbc	r23, r11
    6624:	88 27       	eor	r24, r24
    6626:	77 fd       	sbrc	r23, 7
    6628:	80 95       	com	r24
    662a:	98 2f       	mov	r25, r24
    662c:	0e 94 91 54 	call	0xa922	; 0xa922 <__floatsisf>
    6630:	9b 01       	movw	r18, r22
    6632:	ac 01       	movw	r20, r24
    6634:	c8 01       	movw	r24, r16
    6636:	b7 01       	movw	r22, r14
    6638:	0e 94 f6 53 	call	0xa7ec	; 0xa7ec <__divsf3>
    663c:	0e 94 5e 54 	call	0xa8bc	; 0xa8bc <__fixsfsi>
    6640:	68 0d       	add	r22, r8
    6642:	79 1d       	adc	r23, r9
    6644:	52 cf       	rjmp	.-348    	; 0x64ea <getRightSpeedFromInput+0x2da>
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    6646:	08 e0       	ldi	r16, 0x08	; 8
    6648:	10 e0       	ldi	r17, 0x00	; 0
    664a:	3e cf       	rjmp	.-388    	; 0x64c8 <getRightSpeedFromInput+0x2b8>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    664c:	07 e0       	ldi	r16, 0x07	; 7
    664e:	10 e0       	ldi	r17, 0x00	; 0
    6650:	2f cf       	rjmp	.-418    	; 0x64b0 <getRightSpeedFromInput+0x2a0>
    6652:	06 e0       	ldi	r16, 0x06	; 6
    6654:	10 e0       	ldi	r17, 0x00	; 0
    6656:	20 cf       	rjmp	.-448    	; 0x6498 <getRightSpeedFromInput+0x288>
    6658:	05 e0       	ldi	r16, 0x05	; 5
    665a:	10 e0       	ldi	r17, 0x00	; 0
    665c:	11 cf       	rjmp	.-478    	; 0x6480 <getRightSpeedFromInput+0x270>
    665e:	04 e0       	ldi	r16, 0x04	; 4
    6660:	10 e0       	ldi	r17, 0x00	; 0
    6662:	02 cf       	rjmp	.-508    	; 0x6468 <getRightSpeedFromInput+0x258>
    6664:	03 e0       	ldi	r16, 0x03	; 3
    6666:	10 e0       	ldi	r17, 0x00	; 0
    6668:	f3 ce       	rjmp	.-538    	; 0x6450 <getRightSpeedFromInput+0x240>
    666a:	02 e0       	ldi	r16, 0x02	; 2
    666c:	10 e0       	ldi	r17, 0x00	; 0
    666e:	e4 ce       	rjmp	.-568    	; 0x6438 <getRightSpeedFromInput+0x228>
        }
    } else {
		if(indBwR==0) {  // the velocity is lower than first saved in the matrix
        	speedRightFromEnc = (last_right_vel*calibration[0][7])/calibration[0][6];
		} else if(indBwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][7]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][6]);  // take the max
    6670:	60 91 72 09 	lds	r22, 0x0972
    6674:	70 91 73 09 	lds	r23, 0x0973
    6678:	88 27       	eor	r24, r24
    667a:	77 fd       	sbrc	r23, 7
    667c:	80 95       	com	r24
    667e:	98 2f       	mov	r25, r24
    6680:	0e 94 91 54 	call	0xa922	; 0xa922 <__floatsisf>
    6684:	5b 01       	movw	r10, r22
    6686:	6c 01       	movw	r12, r24
    6688:	be 01       	movw	r22, r28
    668a:	88 27       	eor	r24, r24
    668c:	77 fd       	sbrc	r23, 7
    668e:	80 95       	com	r24
    6690:	98 2f       	mov	r25, r24
    6692:	0e 94 91 54 	call	0xa922	; 0xa922 <__floatsisf>
    6696:	9b 01       	movw	r18, r22
    6698:	ac 01       	movw	r20, r24
    669a:	c6 01       	movw	r24, r12
    669c:	b5 01       	movw	r22, r10
    669e:	0e 94 aa 55 	call	0xab54	; 0xab54 <__mulsf3>
    66a2:	5b 01       	movw	r10, r22
    66a4:	6c 01       	movw	r12, r24
    66a6:	b7 01       	movw	r22, r14
    66a8:	88 27       	eor	r24, r24
    66aa:	77 fd       	sbrc	r23, 7
    66ac:	80 95       	com	r24
    66ae:	98 2f       	mov	r25, r24
    66b0:	0e 94 91 54 	call	0xa922	; 0xa922 <__floatsisf>
    66b4:	9b 01       	movw	r18, r22
    66b6:	ac 01       	movw	r20, r24
    66b8:	c6 01       	movw	r24, r12
    66ba:	b5 01       	movw	r22, r10
    66bc:	0e 94 f6 53 	call	0xa7ec	; 0xa7ec <__divsf3>
    66c0:	0e 94 5e 54 	call	0xa8bc	; 0xa8bc <__fixsfsi>
    66c4:	12 cf       	rjmp	.-476    	; 0x64ea <getRightSpeedFromInput+0x2da>

000066c6 <getLeftSpeedFromInput>:
    }
    
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {
    66c6:	8f 92       	push	r8
    66c8:	9f 92       	push	r9
    66ca:	af 92       	push	r10
    66cc:	bf 92       	push	r11
    66ce:	cf 92       	push	r12
    66d0:	df 92       	push	r13
    66d2:	ef 92       	push	r14
    66d4:	ff 92       	push	r15
    66d6:	0f 93       	push	r16
    66d8:	1f 93       	push	r17
    66da:	cf 93       	push	r28
    66dc:	df 93       	push	r29

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    66de:	c0 91 01 03 	lds	r28, 0x0301
    66e2:	d0 91 02 03 	lds	r29, 0x0302
    66e6:	80 91 07 03 	lds	r24, 0x0307
    66ea:	90 91 08 03 	lds	r25, 0x0308
    66ee:	97 fd       	sbrc	r25, 7
    66f0:	d9 c0       	rjmp	.+434    	; 0x68a4 <getLeftSpeedFromInput+0x1de>
    66f2:	60 91 e4 08 	lds	r22, 0x08E4
    66f6:	70 91 e5 08 	lds	r23, 0x08E5
    66fa:	6c 17       	cp	r22, r28
    66fc:	7d 07       	cpc	r23, r29
    66fe:	0c f0       	brlt	.+2      	; 0x6702 <getLeftSpeedFromInput+0x3c>
    6700:	bd c0       	rjmp	.+378    	; 0x687c <getLeftSpeedFromInput+0x1b6>
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    6702:	0f ef       	ldi	r16, 0xFF	; 255
    6704:	1f ef       	ldi	r17, 0xFF	; 255
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    6706:	80 91 f4 08 	lds	r24, 0x08F4
    670a:	90 91 f5 08 	lds	r25, 0x08F5
    670e:	8c 17       	cp	r24, r28
    6710:	9d 07       	cpc	r25, r29
    6712:	44 f0       	brlt	.+16     	; 0x6724 <getLeftSpeedFromInput+0x5e>
    }
    
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {
    6714:	81 e0       	ldi	r24, 0x01	; 1
    6716:	9f ef       	ldi	r25, 0xFF	; 255
    6718:	0f 3f       	cpi	r16, 0xFF	; 255
    671a:	19 07       	cpc	r17, r25
    671c:	09 f0       	breq	.+2      	; 0x6720 <getLeftSpeedFromInput+0x5a>
    671e:	80 e0       	ldi	r24, 0x00	; 0
    6720:	08 2f       	mov	r16, r24
    6722:	10 e0       	ldi	r17, 0x00	; 0

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    6724:	80 91 04 09 	lds	r24, 0x0904
    6728:	90 91 05 09 	lds	r25, 0x0905
    672c:	8c 17       	cp	r24, r28
    672e:	9d 07       	cpc	r25, r29
    6730:	2c f0       	brlt	.+10     	; 0x673c <getLeftSpeedFromInput+0x76>
    6732:	8f ef       	ldi	r24, 0xFF	; 255
    6734:	0f 3f       	cpi	r16, 0xFF	; 255
    6736:	18 07       	cpc	r17, r24
    6738:	09 f4       	brne	.+2      	; 0x673c <getLeftSpeedFromInput+0x76>
    673a:	6c c1       	rjmp	.+728    	; 0x6a14 <getLeftSpeedFromInput+0x34e>
    673c:	80 91 14 09 	lds	r24, 0x0914
    6740:	90 91 15 09 	lds	r25, 0x0915
    6744:	8c 17       	cp	r24, r28
    6746:	9d 07       	cpc	r25, r29
    6748:	2c f0       	brlt	.+10     	; 0x6754 <getLeftSpeedFromInput+0x8e>
    674a:	9f ef       	ldi	r25, 0xFF	; 255
    674c:	0f 3f       	cpi	r16, 0xFF	; 255
    674e:	19 07       	cpc	r17, r25
    6750:	09 f4       	brne	.+2      	; 0x6754 <getLeftSpeedFromInput+0x8e>
    6752:	72 c1       	rjmp	.+740    	; 0x6a38 <getLeftSpeedFromInput+0x372>
    6754:	80 91 24 09 	lds	r24, 0x0924
    6758:	90 91 25 09 	lds	r25, 0x0925
    675c:	8c 17       	cp	r24, r28
    675e:	9d 07       	cpc	r25, r29
    6760:	2c f0       	brlt	.+10     	; 0x676c <getLeftSpeedFromInput+0xa6>
    6762:	8f ef       	ldi	r24, 0xFF	; 255
    6764:	0f 3f       	cpi	r16, 0xFF	; 255
    6766:	18 07       	cpc	r17, r24
    6768:	09 f4       	brne	.+2      	; 0x676c <getLeftSpeedFromInput+0xa6>
    676a:	63 c1       	rjmp	.+710    	; 0x6a32 <getLeftSpeedFromInput+0x36c>
    676c:	80 91 34 09 	lds	r24, 0x0934
    6770:	90 91 35 09 	lds	r25, 0x0935
    6774:	8c 17       	cp	r24, r28
    6776:	9d 07       	cpc	r25, r29
    6778:	2c f0       	brlt	.+10     	; 0x6784 <getLeftSpeedFromInput+0xbe>
    677a:	9f ef       	ldi	r25, 0xFF	; 255
    677c:	0f 3f       	cpi	r16, 0xFF	; 255
    677e:	19 07       	cpc	r17, r25
    6780:	09 f4       	brne	.+2      	; 0x6784 <getLeftSpeedFromInput+0xbe>
    6782:	54 c1       	rjmp	.+680    	; 0x6a2c <getLeftSpeedFromInput+0x366>
    6784:	80 91 44 09 	lds	r24, 0x0944
    6788:	90 91 45 09 	lds	r25, 0x0945
    678c:	8c 17       	cp	r24, r28
    678e:	9d 07       	cpc	r25, r29
    6790:	2c f0       	brlt	.+10     	; 0x679c <getLeftSpeedFromInput+0xd6>
    6792:	8f ef       	ldi	r24, 0xFF	; 255
    6794:	0f 3f       	cpi	r16, 0xFF	; 255
    6796:	18 07       	cpc	r17, r24
    6798:	09 f4       	brne	.+2      	; 0x679c <getLeftSpeedFromInput+0xd6>
    679a:	45 c1       	rjmp	.+650    	; 0x6a26 <getLeftSpeedFromInput+0x360>
    679c:	80 91 54 09 	lds	r24, 0x0954
    67a0:	90 91 55 09 	lds	r25, 0x0955
    67a4:	8c 17       	cp	r24, r28
    67a6:	9d 07       	cpc	r25, r29
    67a8:	2c f0       	brlt	.+10     	; 0x67b4 <getLeftSpeedFromInput+0xee>
    67aa:	9f ef       	ldi	r25, 0xFF	; 255
    67ac:	0f 3f       	cpi	r16, 0xFF	; 255
    67ae:	19 07       	cpc	r17, r25
    67b0:	09 f4       	brne	.+2      	; 0x67b4 <getLeftSpeedFromInput+0xee>
    67b2:	36 c1       	rjmp	.+620    	; 0x6a20 <getLeftSpeedFromInput+0x35a>
    67b4:	e0 90 64 09 	lds	r14, 0x0964
    67b8:	f0 90 65 09 	lds	r15, 0x0965
    67bc:	ec 16       	cp	r14, r28
    67be:	fd 06       	cpc	r15, r29
    67c0:	2c f0       	brlt	.+10     	; 0x67cc <getLeftSpeedFromInput+0x106>
    67c2:	8f ef       	ldi	r24, 0xFF	; 255
    67c4:	0f 3f       	cpi	r16, 0xFF	; 255
    67c6:	18 07       	cpc	r17, r24
    67c8:	09 f4       	brne	.+2      	; 0x67cc <getLeftSpeedFromInput+0x106>
    67ca:	27 c1       	rjmp	.+590    	; 0x6a1a <getLeftSpeedFromInput+0x354>
			}
		}     
    }

    if(pwm_left >= 0) {
        if(last_left_vel == 0) {
    67cc:	20 97       	sbiw	r28, 0x00	; 0
    67ce:	09 f4       	brne	.+2      	; 0x67d2 <getLeftSpeedFromInput+0x10c>
    67d0:	58 c0       	rjmp	.+176    	; 0x6882 <getLeftSpeedFromInput+0x1bc>
            speedLeftFromEnc = 0;
        } else {
            if(indFwL==0) {  // the velocity is lower than first saved in the matrix
    67d2:	01 15       	cp	r16, r1
    67d4:	11 05       	cpc	r17, r1
    67d6:	09 f4       	brne	.+2      	; 0x67da <getLeftSpeedFromInput+0x114>
    67d8:	32 c1       	rjmp	.+612    	; 0x6a3e <getLeftSpeedFromInput+0x378>
                speedLeftFromEnc = (last_left_vel*calibration[0][1])/calibration[0][0];
            } else if(indFwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    67da:	9f ef       	ldi	r25, 0xFF	; 255
    67dc:	0f 3f       	cpi	r16, 0xFF	; 255
    67de:	19 07       	cpc	r17, r25
    67e0:	09 f4       	brne	.+2      	; 0x67e4 <getLeftSpeedFromInput+0x11e>
    67e2:	e9 c0       	rjmp	.+466    	; 0x69b6 <getLeftSpeedFromInput+0x2f0>
                speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][1]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][0]);  // take the max
            } else {
                speedLeftFromEnc = calibration[indFwL-1][1] + (signed int)(((float)(last_left_vel-calibration[indFwL-1][0])*(float)(calibration[indFwL][1]-calibration[indFwL-1][1]))/(float)(calibration[indFwL][0]-calibration[indFwL-1][0]));
    67e4:	f8 01       	movw	r30, r16
    67e6:	e2 95       	swap	r30
    67e8:	f2 95       	swap	r31
    67ea:	f0 7f       	andi	r31, 0xF0	; 240
    67ec:	fe 27       	eor	r31, r30
    67ee:	e0 7f       	andi	r30, 0xF0	; 240
    67f0:	fe 27       	eor	r31, r30
    67f2:	ec 52       	subi	r30, 0x2C	; 44
    67f4:	f7 4f       	sbci	r31, 0xF7	; 247
    67f6:	a0 80       	ld	r10, Z
    67f8:	b1 80       	ldd	r11, Z+1	; 0x01
    67fa:	82 80       	ldd	r8, Z+2	; 0x02
    67fc:	93 80       	ldd	r9, Z+3	; 0x03
    67fe:	ca 19       	sub	r28, r10
    6800:	db 09       	sbc	r29, r11
    6802:	be 01       	movw	r22, r28
    6804:	88 27       	eor	r24, r24
    6806:	77 fd       	sbrc	r23, 7
    6808:	80 95       	com	r24
    680a:	98 2f       	mov	r25, r24
    680c:	0e 94 91 54 	call	0xa922	; 0xa922 <__floatsisf>
    6810:	6b 01       	movw	r12, r22
    6812:	7c 01       	movw	r14, r24
    6814:	e8 01       	movw	r28, r16
    6816:	c2 95       	swap	r28
    6818:	d2 95       	swap	r29
    681a:	d0 7f       	andi	r29, 0xF0	; 240
    681c:	dc 27       	eor	r29, r28
    681e:	c0 7f       	andi	r28, 0xF0	; 240
    6820:	dc 27       	eor	r29, r28
    6822:	cc 51       	subi	r28, 0x1C	; 28
    6824:	d7 4f       	sbci	r29, 0xF7	; 247
    6826:	6a 81       	ldd	r22, Y+2	; 0x02
    6828:	7b 81       	ldd	r23, Y+3	; 0x03
    682a:	68 19       	sub	r22, r8
    682c:	79 09       	sbc	r23, r9
    682e:	88 27       	eor	r24, r24
    6830:	77 fd       	sbrc	r23, 7
    6832:	80 95       	com	r24
    6834:	98 2f       	mov	r25, r24
    6836:	0e 94 91 54 	call	0xa922	; 0xa922 <__floatsisf>
    683a:	9b 01       	movw	r18, r22
    683c:	ac 01       	movw	r20, r24
    683e:	c7 01       	movw	r24, r14
    6840:	b6 01       	movw	r22, r12
    6842:	0e 94 aa 55 	call	0xab54	; 0xab54 <__mulsf3>
    6846:	7b 01       	movw	r14, r22
    6848:	8c 01       	movw	r16, r24
    684a:	68 81       	ld	r22, Y
    684c:	79 81       	ldd	r23, Y+1	; 0x01
    684e:	6a 19       	sub	r22, r10
    6850:	7b 09       	sbc	r23, r11
    6852:	88 27       	eor	r24, r24
    6854:	77 fd       	sbrc	r23, 7
    6856:	80 95       	com	r24
    6858:	98 2f       	mov	r25, r24
    685a:	0e 94 91 54 	call	0xa922	; 0xa922 <__floatsisf>
    685e:	9b 01       	movw	r18, r22
    6860:	ac 01       	movw	r20, r24
    6862:	c8 01       	movw	r24, r16
    6864:	b7 01       	movw	r22, r14
    6866:	0e 94 f6 53 	call	0xa7ec	; 0xa7ec <__divsf3>
    686a:	0e 94 5e 54 	call	0xa8bc	; 0xa8bc <__fixsfsi>
    686e:	68 0d       	add	r22, r8
    6870:	79 1d       	adc	r23, r9
    6872:	70 93 c9 04 	sts	0x04C9, r23
    6876:	60 93 c8 04 	sts	0x04C8, r22
    687a:	07 c0       	rjmp	.+14     	; 0x688a <getLeftSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    687c:	00 e0       	ldi	r16, 0x00	; 0
    687e:	10 e0       	ldi	r17, 0x00	; 0
    6880:	42 cf       	rjmp	.-380    	; 0x6706 <getLeftSpeedFromInput+0x40>
		}     
    }

    if(pwm_left >= 0) {
        if(last_left_vel == 0) {
            speedLeftFromEnc = 0;
    6882:	10 92 c9 04 	sts	0x04C9, r1
    6886:	10 92 c8 04 	sts	0x04C8, r1
        	speedLeftFromEnc = calibration[indBwL-1][5] + (signed int)(((float)(last_left_vel-calibration[indBwL-1][4])*(float)(calibration[indBwL][5]-calibration[indBwL-1][5]))/(float)(calibration[indBwL][4]-calibration[indBwL-1][4]));
		}
		speedLeftFromEnc = -speedLeftFromEnc;
    }
    
}
    688a:	df 91       	pop	r29
    688c:	cf 91       	pop	r28
    688e:	1f 91       	pop	r17
    6890:	0f 91       	pop	r16
    6892:	ff 90       	pop	r15
    6894:	ef 90       	pop	r14
    6896:	df 90       	pop	r13
    6898:	cf 90       	pop	r12
    689a:	bf 90       	pop	r11
    689c:	af 90       	pop	r10
    689e:	9f 90       	pop	r9
    68a0:	8f 90       	pop	r8
    68a2:	08 95       	ret
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    68a4:	60 91 ec 08 	lds	r22, 0x08EC
    68a8:	70 91 ed 08 	lds	r23, 0x08ED
    68ac:	6c 17       	cp	r22, r28
    68ae:	7d 07       	cpc	r23, r29
    68b0:	0c f0       	brlt	.+2      	; 0x68b4 <getLeftSpeedFromInput+0x1ee>
    68b2:	7e c0       	rjmp	.+252    	; 0x69b0 <getLeftSpeedFromInput+0x2ea>
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    68b4:	0f ef       	ldi	r16, 0xFF	; 255
    68b6:	1f ef       	ldi	r17, 0xFF	; 255
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    68b8:	80 91 fc 08 	lds	r24, 0x08FC
    68bc:	90 91 fd 08 	lds	r25, 0x08FD
    68c0:	8c 17       	cp	r24, r28
    68c2:	9d 07       	cpc	r25, r29
    68c4:	44 f0       	brlt	.+16     	; 0x68d6 <getLeftSpeedFromInput+0x210>
    }
    
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {
    68c6:	81 e0       	ldi	r24, 0x01	; 1
    68c8:	9f ef       	ldi	r25, 0xFF	; 255
    68ca:	0f 3f       	cpi	r16, 0xFF	; 255
    68cc:	19 07       	cpc	r17, r25
    68ce:	09 f0       	breq	.+2      	; 0x68d2 <getLeftSpeedFromInput+0x20c>
    68d0:	80 e0       	ldi	r24, 0x00	; 0
    68d2:	08 2f       	mov	r16, r24
    68d4:	10 e0       	ldi	r17, 0x00	; 0
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    68d6:	80 91 0c 09 	lds	r24, 0x090C
    68da:	90 91 0d 09 	lds	r25, 0x090D
    68de:	8c 17       	cp	r24, r28
    68e0:	9d 07       	cpc	r25, r29
    68e2:	2c f0       	brlt	.+10     	; 0x68ee <getLeftSpeedFromInput+0x228>
    68e4:	8f ef       	ldi	r24, 0xFF	; 255
    68e6:	0f 3f       	cpi	r16, 0xFF	; 255
    68e8:	18 07       	cpc	r17, r24
    68ea:	09 f4       	brne	.+2      	; 0x68ee <getLeftSpeedFromInput+0x228>
    68ec:	19 c1       	rjmp	.+562    	; 0x6b20 <getLeftSpeedFromInput+0x45a>
    68ee:	80 91 1c 09 	lds	r24, 0x091C
    68f2:	90 91 1d 09 	lds	r25, 0x091D
    68f6:	8c 17       	cp	r24, r28
    68f8:	9d 07       	cpc	r25, r29
    68fa:	2c f0       	brlt	.+10     	; 0x6906 <getLeftSpeedFromInput+0x240>
    68fc:	9f ef       	ldi	r25, 0xFF	; 255
    68fe:	0f 3f       	cpi	r16, 0xFF	; 255
    6900:	19 07       	cpc	r17, r25
    6902:	09 f4       	brne	.+2      	; 0x6906 <getLeftSpeedFromInput+0x240>
    6904:	0a c1       	rjmp	.+532    	; 0x6b1a <getLeftSpeedFromInput+0x454>
    6906:	80 91 2c 09 	lds	r24, 0x092C
    690a:	90 91 2d 09 	lds	r25, 0x092D
    690e:	8c 17       	cp	r24, r28
    6910:	9d 07       	cpc	r25, r29
    6912:	2c f0       	brlt	.+10     	; 0x691e <getLeftSpeedFromInput+0x258>
    6914:	8f ef       	ldi	r24, 0xFF	; 255
    6916:	0f 3f       	cpi	r16, 0xFF	; 255
    6918:	18 07       	cpc	r17, r24
    691a:	09 f4       	brne	.+2      	; 0x691e <getLeftSpeedFromInput+0x258>
    691c:	fb c0       	rjmp	.+502    	; 0x6b14 <getLeftSpeedFromInput+0x44e>
    691e:	80 91 3c 09 	lds	r24, 0x093C
    6922:	90 91 3d 09 	lds	r25, 0x093D
    6926:	8c 17       	cp	r24, r28
    6928:	9d 07       	cpc	r25, r29
    692a:	2c f0       	brlt	.+10     	; 0x6936 <getLeftSpeedFromInput+0x270>
    692c:	9f ef       	ldi	r25, 0xFF	; 255
    692e:	0f 3f       	cpi	r16, 0xFF	; 255
    6930:	19 07       	cpc	r17, r25
    6932:	09 f4       	brne	.+2      	; 0x6936 <getLeftSpeedFromInput+0x270>
    6934:	ec c0       	rjmp	.+472    	; 0x6b0e <getLeftSpeedFromInput+0x448>
    6936:	80 91 4c 09 	lds	r24, 0x094C
    693a:	90 91 4d 09 	lds	r25, 0x094D
    693e:	8c 17       	cp	r24, r28
    6940:	9d 07       	cpc	r25, r29
    6942:	2c f0       	brlt	.+10     	; 0x694e <getLeftSpeedFromInput+0x288>
    6944:	8f ef       	ldi	r24, 0xFF	; 255
    6946:	0f 3f       	cpi	r16, 0xFF	; 255
    6948:	18 07       	cpc	r17, r24
    694a:	09 f4       	brne	.+2      	; 0x694e <getLeftSpeedFromInput+0x288>
    694c:	dd c0       	rjmp	.+442    	; 0x6b08 <getLeftSpeedFromInput+0x442>
    694e:	80 91 5c 09 	lds	r24, 0x095C
    6952:	90 91 5d 09 	lds	r25, 0x095D
    6956:	8c 17       	cp	r24, r28
    6958:	9d 07       	cpc	r25, r29
    695a:	2c f0       	brlt	.+10     	; 0x6966 <getLeftSpeedFromInput+0x2a0>
    695c:	9f ef       	ldi	r25, 0xFF	; 255
    695e:	0f 3f       	cpi	r16, 0xFF	; 255
    6960:	19 07       	cpc	r17, r25
    6962:	09 f4       	brne	.+2      	; 0x6966 <getLeftSpeedFromInput+0x2a0>
    6964:	ce c0       	rjmp	.+412    	; 0x6b02 <getLeftSpeedFromInput+0x43c>
    6966:	e0 90 6c 09 	lds	r14, 0x096C
    696a:	f0 90 6d 09 	lds	r15, 0x096D
    696e:	ec 16       	cp	r14, r28
    6970:	fd 06       	cpc	r15, r29
    6972:	2c f0       	brlt	.+10     	; 0x697e <getLeftSpeedFromInput+0x2b8>
    6974:	8f ef       	ldi	r24, 0xFF	; 255
    6976:	0f 3f       	cpi	r16, 0xFF	; 255
    6978:	18 07       	cpc	r17, r24
    697a:	09 f4       	brne	.+2      	; 0x697e <getLeftSpeedFromInput+0x2b8>
    697c:	bf c0       	rjmp	.+382    	; 0x6afc <getLeftSpeedFromInput+0x436>
            } else {
                speedLeftFromEnc = calibration[indFwL-1][1] + (signed int)(((float)(last_left_vel-calibration[indFwL-1][0])*(float)(calibration[indFwL][1]-calibration[indFwL-1][1]))/(float)(calibration[indFwL][0]-calibration[indFwL-1][0]));
            }
        }
    } else {
		if(indBwL==0) {  // the velocity is lower than first saved in the matrix
    697e:	01 15       	cp	r16, r1
    6980:	11 05       	cpc	r17, r1
    6982:	09 f0       	breq	.+2      	; 0x6986 <getLeftSpeedFromInput+0x2c0>
    6984:	6e c0       	rjmp	.+220    	; 0x6a62 <getLeftSpeedFromInput+0x39c>
        	speedLeftFromEnc = (last_left_vel*calibration[0][5])/calibration[0][4];
    6986:	20 91 ee 08 	lds	r18, 0x08EE
    698a:	30 91 ef 08 	lds	r19, 0x08EF
    698e:	c2 9f       	mul	r28, r18
    6990:	c0 01       	movw	r24, r0
    6992:	c3 9f       	mul	r28, r19
    6994:	90 0d       	add	r25, r0
    6996:	d2 9f       	mul	r29, r18
    6998:	90 0d       	add	r25, r0
    699a:	11 24       	eor	r1, r1
    699c:	0e 94 68 56 	call	0xacd0	; 0xacd0 <__divmodhi4>
		} else if(indBwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][5]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][4]);  // take the max
		} else {
        	speedLeftFromEnc = calibration[indBwL-1][5] + (signed int)(((float)(last_left_vel-calibration[indBwL-1][4])*(float)(calibration[indBwL][5]-calibration[indBwL-1][5]))/(float)(calibration[indBwL][4]-calibration[indBwL-1][4]));
		}
		speedLeftFromEnc = -speedLeftFromEnc;
    69a0:	70 95       	com	r23
    69a2:	61 95       	neg	r22
    69a4:	7f 4f       	sbci	r23, 0xFF	; 255
    69a6:	70 93 c9 04 	sts	0x04C9, r23
    69aa:	60 93 c8 04 	sts	0x04C8, r22
    69ae:	6d cf       	rjmp	.-294    	; 0x688a <getLeftSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    69b0:	00 e0       	ldi	r16, 0x00	; 0
    69b2:	10 e0       	ldi	r17, 0x00	; 0
    69b4:	81 cf       	rjmp	.-254    	; 0x68b8 <getLeftSpeedFromInput+0x1f2>
            speedLeftFromEnc = 0;
        } else {
            if(indFwL==0) {  // the velocity is lower than first saved in the matrix
                speedLeftFromEnc = (last_left_vel*calibration[0][1])/calibration[0][0];
            } else if(indFwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
                speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][1]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][0]);  // take the max
    69b6:	60 91 66 09 	lds	r22, 0x0966
    69ba:	70 91 67 09 	lds	r23, 0x0967
    69be:	88 27       	eor	r24, r24
    69c0:	77 fd       	sbrc	r23, 7
    69c2:	80 95       	com	r24
    69c4:	98 2f       	mov	r25, r24
    69c6:	0e 94 91 54 	call	0xa922	; 0xa922 <__floatsisf>
    69ca:	5b 01       	movw	r10, r22
    69cc:	6c 01       	movw	r12, r24
    69ce:	be 01       	movw	r22, r28
    69d0:	88 27       	eor	r24, r24
    69d2:	77 fd       	sbrc	r23, 7
    69d4:	80 95       	com	r24
    69d6:	98 2f       	mov	r25, r24
    69d8:	0e 94 91 54 	call	0xa922	; 0xa922 <__floatsisf>
    69dc:	9b 01       	movw	r18, r22
    69de:	ac 01       	movw	r20, r24
    69e0:	c6 01       	movw	r24, r12
    69e2:	b5 01       	movw	r22, r10
    69e4:	0e 94 aa 55 	call	0xab54	; 0xab54 <__mulsf3>
    69e8:	5b 01       	movw	r10, r22
    69ea:	6c 01       	movw	r12, r24
    69ec:	b7 01       	movw	r22, r14
    69ee:	88 27       	eor	r24, r24
    69f0:	77 fd       	sbrc	r23, 7
    69f2:	80 95       	com	r24
    69f4:	98 2f       	mov	r25, r24
    69f6:	0e 94 91 54 	call	0xa922	; 0xa922 <__floatsisf>
    69fa:	9b 01       	movw	r18, r22
    69fc:	ac 01       	movw	r20, r24
    69fe:	c6 01       	movw	r24, r12
    6a00:	b5 01       	movw	r22, r10
    6a02:	0e 94 f6 53 	call	0xa7ec	; 0xa7ec <__divsf3>
    6a06:	0e 94 5e 54 	call	0xa8bc	; 0xa8bc <__fixsfsi>
    6a0a:	70 93 c9 04 	sts	0x04C9, r23
    6a0e:	60 93 c8 04 	sts	0x04C8, r22
    6a12:	3b cf       	rjmp	.-394    	; 0x688a <getLeftSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    6a14:	02 e0       	ldi	r16, 0x02	; 2
    6a16:	10 e0       	ldi	r17, 0x00	; 0
    6a18:	91 ce       	rjmp	.-734    	; 0x673c <getLeftSpeedFromInput+0x76>
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    6a1a:	08 e0       	ldi	r16, 0x08	; 8
    6a1c:	10 e0       	ldi	r17, 0x00	; 0
    6a1e:	d6 ce       	rjmp	.-596    	; 0x67cc <getLeftSpeedFromInput+0x106>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    6a20:	07 e0       	ldi	r16, 0x07	; 7
    6a22:	10 e0       	ldi	r17, 0x00	; 0
    6a24:	c7 ce       	rjmp	.-626    	; 0x67b4 <getLeftSpeedFromInput+0xee>
    6a26:	06 e0       	ldi	r16, 0x06	; 6
    6a28:	10 e0       	ldi	r17, 0x00	; 0
    6a2a:	b8 ce       	rjmp	.-656    	; 0x679c <getLeftSpeedFromInput+0xd6>
    6a2c:	05 e0       	ldi	r16, 0x05	; 5
    6a2e:	10 e0       	ldi	r17, 0x00	; 0
    6a30:	a9 ce       	rjmp	.-686    	; 0x6784 <getLeftSpeedFromInput+0xbe>
    6a32:	04 e0       	ldi	r16, 0x04	; 4
    6a34:	10 e0       	ldi	r17, 0x00	; 0
    6a36:	9a ce       	rjmp	.-716    	; 0x676c <getLeftSpeedFromInput+0xa6>
    6a38:	03 e0       	ldi	r16, 0x03	; 3
    6a3a:	10 e0       	ldi	r17, 0x00	; 0
    6a3c:	8b ce       	rjmp	.-746    	; 0x6754 <getLeftSpeedFromInput+0x8e>
    if(pwm_left >= 0) {
        if(last_left_vel == 0) {
            speedLeftFromEnc = 0;
        } else {
            if(indFwL==0) {  // the velocity is lower than first saved in the matrix
                speedLeftFromEnc = (last_left_vel*calibration[0][1])/calibration[0][0];
    6a3e:	20 91 e6 08 	lds	r18, 0x08E6
    6a42:	30 91 e7 08 	lds	r19, 0x08E7
    6a46:	c2 9f       	mul	r28, r18
    6a48:	c0 01       	movw	r24, r0
    6a4a:	c3 9f       	mul	r28, r19
    6a4c:	90 0d       	add	r25, r0
    6a4e:	d2 9f       	mul	r29, r18
    6a50:	90 0d       	add	r25, r0
    6a52:	11 24       	eor	r1, r1
    6a54:	0e 94 68 56 	call	0xacd0	; 0xacd0 <__divmodhi4>
    6a58:	70 93 c9 04 	sts	0x04C9, r23
    6a5c:	60 93 c8 04 	sts	0x04C8, r22
    6a60:	14 cf       	rjmp	.-472    	; 0x688a <getLeftSpeedFromInput+0x1c4>
            }
        }
    } else {
		if(indBwL==0) {  // the velocity is lower than first saved in the matrix
        	speedLeftFromEnc = (last_left_vel*calibration[0][5])/calibration[0][4];
		} else if(indBwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    6a62:	8f ef       	ldi	r24, 0xFF	; 255
    6a64:	0f 3f       	cpi	r16, 0xFF	; 255
    6a66:	18 07       	cpc	r17, r24
    6a68:	09 f4       	brne	.+2      	; 0x6a6c <getLeftSpeedFromInput+0x3a6>
    6a6a:	5d c0       	rjmp	.+186    	; 0x6b26 <getLeftSpeedFromInput+0x460>
        	speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][5]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][4]);  // take the max
		} else {
        	speedLeftFromEnc = calibration[indBwL-1][5] + (signed int)(((float)(last_left_vel-calibration[indBwL-1][4])*(float)(calibration[indBwL][5]-calibration[indBwL-1][5]))/(float)(calibration[indBwL][4]-calibration[indBwL-1][4]));
    6a6c:	f8 01       	movw	r30, r16
    6a6e:	e2 95       	swap	r30
    6a70:	f2 95       	swap	r31
    6a72:	f0 7f       	andi	r31, 0xF0	; 240
    6a74:	fe 27       	eor	r31, r30
    6a76:	e0 7f       	andi	r30, 0xF0	; 240
    6a78:	fe 27       	eor	r31, r30
    6a7a:	ec 52       	subi	r30, 0x2C	; 44
    6a7c:	f7 4f       	sbci	r31, 0xF7	; 247
    6a7e:	a0 84       	ldd	r10, Z+8	; 0x08
    6a80:	b1 84       	ldd	r11, Z+9	; 0x09
    6a82:	82 84       	ldd	r8, Z+10	; 0x0a
    6a84:	93 84       	ldd	r9, Z+11	; 0x0b
    6a86:	ca 19       	sub	r28, r10
    6a88:	db 09       	sbc	r29, r11
    6a8a:	be 01       	movw	r22, r28
    6a8c:	88 27       	eor	r24, r24
    6a8e:	77 fd       	sbrc	r23, 7
    6a90:	80 95       	com	r24
    6a92:	98 2f       	mov	r25, r24
    6a94:	0e 94 91 54 	call	0xa922	; 0xa922 <__floatsisf>
    6a98:	6b 01       	movw	r12, r22
    6a9a:	7c 01       	movw	r14, r24
    6a9c:	e8 01       	movw	r28, r16
    6a9e:	c2 95       	swap	r28
    6aa0:	d2 95       	swap	r29
    6aa2:	d0 7f       	andi	r29, 0xF0	; 240
    6aa4:	dc 27       	eor	r29, r28
    6aa6:	c0 7f       	andi	r28, 0xF0	; 240
    6aa8:	dc 27       	eor	r29, r28
    6aaa:	cc 51       	subi	r28, 0x1C	; 28
    6aac:	d7 4f       	sbci	r29, 0xF7	; 247
    6aae:	6a 85       	ldd	r22, Y+10	; 0x0a
    6ab0:	7b 85       	ldd	r23, Y+11	; 0x0b
    6ab2:	68 19       	sub	r22, r8
    6ab4:	79 09       	sbc	r23, r9
    6ab6:	88 27       	eor	r24, r24
    6ab8:	77 fd       	sbrc	r23, 7
    6aba:	80 95       	com	r24
    6abc:	98 2f       	mov	r25, r24
    6abe:	0e 94 91 54 	call	0xa922	; 0xa922 <__floatsisf>
    6ac2:	9b 01       	movw	r18, r22
    6ac4:	ac 01       	movw	r20, r24
    6ac6:	c7 01       	movw	r24, r14
    6ac8:	b6 01       	movw	r22, r12
    6aca:	0e 94 aa 55 	call	0xab54	; 0xab54 <__mulsf3>
    6ace:	7b 01       	movw	r14, r22
    6ad0:	8c 01       	movw	r16, r24
    6ad2:	68 85       	ldd	r22, Y+8	; 0x08
    6ad4:	79 85       	ldd	r23, Y+9	; 0x09
    6ad6:	6a 19       	sub	r22, r10
    6ad8:	7b 09       	sbc	r23, r11
    6ada:	88 27       	eor	r24, r24
    6adc:	77 fd       	sbrc	r23, 7
    6ade:	80 95       	com	r24
    6ae0:	98 2f       	mov	r25, r24
    6ae2:	0e 94 91 54 	call	0xa922	; 0xa922 <__floatsisf>
    6ae6:	9b 01       	movw	r18, r22
    6ae8:	ac 01       	movw	r20, r24
    6aea:	c8 01       	movw	r24, r16
    6aec:	b7 01       	movw	r22, r14
    6aee:	0e 94 f6 53 	call	0xa7ec	; 0xa7ec <__divsf3>
    6af2:	0e 94 5e 54 	call	0xa8bc	; 0xa8bc <__fixsfsi>
    6af6:	68 0d       	add	r22, r8
    6af8:	79 1d       	adc	r23, r9
    6afa:	52 cf       	rjmp	.-348    	; 0x69a0 <getLeftSpeedFromInput+0x2da>
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    6afc:	08 e0       	ldi	r16, 0x08	; 8
    6afe:	10 e0       	ldi	r17, 0x00	; 0
    6b00:	3e cf       	rjmp	.-388    	; 0x697e <getLeftSpeedFromInput+0x2b8>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    6b02:	07 e0       	ldi	r16, 0x07	; 7
    6b04:	10 e0       	ldi	r17, 0x00	; 0
    6b06:	2f cf       	rjmp	.-418    	; 0x6966 <getLeftSpeedFromInput+0x2a0>
    6b08:	06 e0       	ldi	r16, 0x06	; 6
    6b0a:	10 e0       	ldi	r17, 0x00	; 0
    6b0c:	20 cf       	rjmp	.-448    	; 0x694e <getLeftSpeedFromInput+0x288>
    6b0e:	05 e0       	ldi	r16, 0x05	; 5
    6b10:	10 e0       	ldi	r17, 0x00	; 0
    6b12:	11 cf       	rjmp	.-478    	; 0x6936 <getLeftSpeedFromInput+0x270>
    6b14:	04 e0       	ldi	r16, 0x04	; 4
    6b16:	10 e0       	ldi	r17, 0x00	; 0
    6b18:	02 cf       	rjmp	.-508    	; 0x691e <getLeftSpeedFromInput+0x258>
    6b1a:	03 e0       	ldi	r16, 0x03	; 3
    6b1c:	10 e0       	ldi	r17, 0x00	; 0
    6b1e:	f3 ce       	rjmp	.-538    	; 0x6906 <getLeftSpeedFromInput+0x240>
    6b20:	02 e0       	ldi	r16, 0x02	; 2
    6b22:	10 e0       	ldi	r17, 0x00	; 0
    6b24:	e4 ce       	rjmp	.-568    	; 0x68ee <getLeftSpeedFromInput+0x228>
        }
    } else {
		if(indBwL==0) {  // the velocity is lower than first saved in the matrix
        	speedLeftFromEnc = (last_left_vel*calibration[0][5])/calibration[0][4];
		} else if(indBwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][5]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][4]);  // take the max
    6b26:	60 91 6e 09 	lds	r22, 0x096E
    6b2a:	70 91 6f 09 	lds	r23, 0x096F
    6b2e:	88 27       	eor	r24, r24
    6b30:	77 fd       	sbrc	r23, 7
    6b32:	80 95       	com	r24
    6b34:	98 2f       	mov	r25, r24
    6b36:	0e 94 91 54 	call	0xa922	; 0xa922 <__floatsisf>
    6b3a:	5b 01       	movw	r10, r22
    6b3c:	6c 01       	movw	r12, r24
    6b3e:	be 01       	movw	r22, r28
    6b40:	88 27       	eor	r24, r24
    6b42:	77 fd       	sbrc	r23, 7
    6b44:	80 95       	com	r24
    6b46:	98 2f       	mov	r25, r24
    6b48:	0e 94 91 54 	call	0xa922	; 0xa922 <__floatsisf>
    6b4c:	9b 01       	movw	r18, r22
    6b4e:	ac 01       	movw	r20, r24
    6b50:	c6 01       	movw	r24, r12
    6b52:	b5 01       	movw	r22, r10
    6b54:	0e 94 aa 55 	call	0xab54	; 0xab54 <__mulsf3>
    6b58:	5b 01       	movw	r10, r22
    6b5a:	6c 01       	movw	r12, r24
    6b5c:	b7 01       	movw	r22, r14
    6b5e:	88 27       	eor	r24, r24
    6b60:	77 fd       	sbrc	r23, 7
    6b62:	80 95       	com	r24
    6b64:	98 2f       	mov	r25, r24
    6b66:	0e 94 91 54 	call	0xa922	; 0xa922 <__floatsisf>
    6b6a:	9b 01       	movw	r18, r22
    6b6c:	ac 01       	movw	r20, r24
    6b6e:	c6 01       	movw	r24, r12
    6b70:	b5 01       	movw	r22, r10
    6b72:	0e 94 f6 53 	call	0xa7ec	; 0xa7ec <__divsf3>
    6b76:	0e 94 5e 54 	call	0xa8bc	; 0xa8bc <__fixsfsi>
    6b7a:	12 cf       	rjmp	.-476    	; 0x69a0 <getLeftSpeedFromInput+0x2da>

00006b7c <handleMotorsWithSpeedController>:
		OCR4B = 0;
	}

}

void handleMotorsWithSpeedController() {
    6b7c:	2f 92       	push	r2
    6b7e:	3f 92       	push	r3
    6b80:	4f 92       	push	r4
    6b82:	5f 92       	push	r5
    6b84:	6f 92       	push	r6
    6b86:	7f 92       	push	r7
    6b88:	8f 92       	push	r8
    6b8a:	9f 92       	push	r9
    6b8c:	af 92       	push	r10
    6b8e:	bf 92       	push	r11
    6b90:	cf 92       	push	r12
    6b92:	df 92       	push	r13
    6b94:	ef 92       	push	r14
    6b96:	ff 92       	push	r15
    6b98:	0f 93       	push	r16
    6b9a:	1f 93       	push	r17

	if(calibrateOdomFlag==1) {
    6b9c:	80 91 70 05 	lds	r24, 0x0570
    6ba0:	81 30       	cpi	r24, 0x01	; 1
    6ba2:	09 f4       	brne	.+2      	; 0x6ba6 <handleMotorsWithSpeedController+0x2a>
    6ba4:	50 c2       	rjmp	.+1184   	; 0x7046 <handleMotorsWithSpeedController+0x4ca>
		pwm_right_working = pwm_intermediate_right_desired;
		pwm_left_working = pwm_intermediate_left_desired;
	} else {
		if(pwm_intermediate_right_desired >= 0) {		// pwm in the range -127..127
    6ba6:	80 91 0d 03 	lds	r24, 0x030D
    6baa:	90 91 0e 03 	lds	r25, 0x030E
    6bae:	97 fd       	sbrc	r25, 7
    6bb0:	c2 c2       	rjmp	.+1412   	; 0x7136 <handleMotorsWithSpeedController+0x5ba>
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_FW_SC);
    6bb2:	61 e0       	ldi	r22, 0x01	; 1
    6bb4:	0e 94 a0 2d 	call	0x5b40	; 0x5b40 <getInputFromSpeed>
    6bb8:	90 93 1e 03 	sts	0x031E, r25
    6bbc:	80 93 1d 03 	sts	0x031D, r24
		} else {
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_BW_SC);
		}
		if(pwm_intermediate_left_desired >= 0) {		// pwm in the range -127..127
    6bc0:	80 91 0f 03 	lds	r24, 0x030F
    6bc4:	90 91 10 03 	lds	r25, 0x0310
    6bc8:	97 fd       	sbrc	r25, 7
    6bca:	ad c2       	rjmp	.+1370   	; 0x7126 <handleMotorsWithSpeedController+0x5aa>
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_FW_SC);
    6bcc:	60 e0       	ldi	r22, 0x00	; 0
    6bce:	0e 94 a0 2d 	call	0x5b40	; 0x5b40 <getInputFromSpeed>
    6bd2:	90 93 20 03 	sts	0x0320, r25
    6bd6:	80 93 1f 03 	sts	0x031F, r24
		} else {
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_BW_SC);
		}
	}

	if(obstacleAvoidanceEnabled) {
    6bda:	20 91 7c 04 	lds	r18, 0x047C
    6bde:	22 23       	and	r18, r18
    6be0:	09 f0       	breq	.+2      	; 0x6be4 <handleMotorsWithSpeedController+0x68>
    6be2:	26 c2       	rjmp	.+1100   	; 0x7030 <handleMotorsWithSpeedController+0x4b4>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
	}
	pwm_left_desired_to_control = pwm_left_working;
    6be4:	90 93 fc 02 	sts	0x02FC, r25
    6be8:	80 93 fb 02 	sts	0x02FB, r24
	pwm_right_desired_to_control = pwm_right_working;
    6bec:	80 91 1d 03 	lds	r24, 0x031D
    6bf0:	90 91 1e 03 	lds	r25, 0x031E
    6bf4:	90 93 fa 02 	sts	0x02FA, r25
    6bf8:	80 93 f9 02 	sts	0x02F9, r24

	if(compute_left_vel) {
    6bfc:	80 91 07 02 	lds	r24, 0x0207
    6c00:	88 23       	and	r24, r24
    6c02:	09 f4       	brne	.+2      	; 0x6c06 <handleMotorsWithSpeedController+0x8a>
    6c04:	a7 c0       	rjmp	.+334    	; 0x6d54 <handleMotorsWithSpeedController+0x1d8>

		last_left_vel = left_vel_sum>>2;
    6c06:	20 91 fd 02 	lds	r18, 0x02FD
    6c0a:	30 91 fe 02 	lds	r19, 0x02FE
    6c0e:	36 95       	lsr	r19
    6c10:	27 95       	ror	r18
    6c12:	36 95       	lsr	r19
    6c14:	27 95       	ror	r18
    6c16:	30 93 02 03 	sts	0x0302, r19
    6c1a:	20 93 01 03 	sts	0x0301, r18
		compute_left_vel = 0;
    6c1e:	10 92 07 02 	sts	0x0207, r1
		left_vel_sum = 0;
    6c22:	10 92 fe 02 	sts	0x02FE, r1
    6c26:	10 92 fd 02 	sts	0x02FD, r1
		
		if(calibrateOdomFlag==1) {
    6c2a:	80 91 70 05 	lds	r24, 0x0570
    6c2e:	81 30       	cpi	r24, 0x01	; 1
    6c30:	09 f4       	brne	.+2      	; 0x6c34 <handleMotorsWithSpeedController+0xb8>
    6c32:	30 c2       	rjmp	.+1120   	; 0x7094 <handleMotorsWithSpeedController+0x518>
			leftSpeedSumOdom += last_left_vel;
			leftSumCount++;
		}

		getLeftSpeedFromInput();	// get speed in mm/s
    6c34:	0e 94 63 33 	call	0x66c6	; 0x66c6 <getLeftSpeedFromInput>
		leftDistPrev = leftDist;
    6c38:	80 91 a3 04 	lds	r24, 0x04A3
    6c3c:	90 91 a4 04 	lds	r25, 0x04A4
    6c40:	a0 91 a5 04 	lds	r26, 0x04A5
    6c44:	b0 91 a6 04 	lds	r27, 0x04A6
    6c48:	80 93 ab 04 	sts	0x04AB, r24
    6c4c:	90 93 ac 04 	sts	0x04AC, r25
    6c50:	a0 93 ad 04 	sts	0x04AD, r26
    6c54:	b0 93 ae 04 	sts	0x04AE, r27
		//timeOdometry = getTime100MicroSec()-timeLeftOdom;
		leftDist += ((float)speedLeftFromEnc*((float)(getTime100MicroSec()-timeLeftOdom)*104.0))/1000000.0;	// distance in mm				
    6c58:	60 91 c8 04 	lds	r22, 0x04C8
    6c5c:	70 91 c9 04 	lds	r23, 0x04C9
    6c60:	88 27       	eor	r24, r24
    6c62:	77 fd       	sbrc	r23, 7
    6c64:	80 95       	com	r24
    6c66:	98 2f       	mov	r25, r24
    6c68:	0e 94 91 54 	call	0xa922	; 0xa922 <__floatsisf>
    6c6c:	7b 01       	movw	r14, r22
    6c6e:	8c 01       	movw	r16, r24
    6c70:	0e 94 35 22 	call	0x446a	; 0x446a <getTime100MicroSec>
    6c74:	20 91 cc 04 	lds	r18, 0x04CC
    6c78:	30 91 cd 04 	lds	r19, 0x04CD
    6c7c:	40 91 ce 04 	lds	r20, 0x04CE
    6c80:	50 91 cf 04 	lds	r21, 0x04CF
    6c84:	62 1b       	sub	r22, r18
    6c86:	73 0b       	sbc	r23, r19
    6c88:	84 0b       	sbc	r24, r20
    6c8a:	95 0b       	sbc	r25, r21
    6c8c:	0e 94 8f 54 	call	0xa91e	; 0xa91e <__floatunsisf>
    6c90:	20 e0       	ldi	r18, 0x00	; 0
    6c92:	30 e0       	ldi	r19, 0x00	; 0
    6c94:	40 ed       	ldi	r20, 0xD0	; 208
    6c96:	52 e4       	ldi	r21, 0x42	; 66
    6c98:	0e 94 aa 55 	call	0xab54	; 0xab54 <__mulsf3>
    6c9c:	9b 01       	movw	r18, r22
    6c9e:	ac 01       	movw	r20, r24
    6ca0:	c8 01       	movw	r24, r16
    6ca2:	b7 01       	movw	r22, r14
    6ca4:	0e 94 aa 55 	call	0xab54	; 0xab54 <__mulsf3>
    6ca8:	20 e0       	ldi	r18, 0x00	; 0
    6caa:	34 e2       	ldi	r19, 0x24	; 36
    6cac:	44 e7       	ldi	r20, 0x74	; 116
    6cae:	59 e4       	ldi	r21, 0x49	; 73
    6cb0:	0e 94 f6 53 	call	0xa7ec	; 0xa7ec <__divsf3>
    6cb4:	9b 01       	movw	r18, r22
    6cb6:	ac 01       	movw	r20, r24
    6cb8:	60 91 a3 04 	lds	r22, 0x04A3
    6cbc:	70 91 a4 04 	lds	r23, 0x04A4
    6cc0:	80 91 a5 04 	lds	r24, 0x04A5
    6cc4:	90 91 a6 04 	lds	r25, 0x04A6
    6cc8:	0e 94 29 53 	call	0xa652	; 0xa652 <__addsf3>
    6ccc:	60 93 a3 04 	sts	0x04A3, r22
    6cd0:	70 93 a4 04 	sts	0x04A4, r23
    6cd4:	80 93 a5 04 	sts	0x04A5, r24
    6cd8:	90 93 a6 04 	sts	0x04A6, r25
		timeLeftOdom = getTime100MicroSec();
    6cdc:	0e 94 35 22 	call	0x446a	; 0x446a <getTime100MicroSec>
    6ce0:	60 93 cc 04 	sts	0x04CC, r22
    6ce4:	70 93 cd 04 	sts	0x04CD, r23
    6ce8:	80 93 ce 04 	sts	0x04CE, r24
    6cec:	90 93 cf 04 	sts	0x04CF, r25
		leftMotSteps = (signed long int)leftDist;
    6cf0:	60 91 a3 04 	lds	r22, 0x04A3
    6cf4:	70 91 a4 04 	lds	r23, 0x04A4
    6cf8:	80 91 a5 04 	lds	r24, 0x04A5
    6cfc:	90 91 a6 04 	lds	r25, 0x04A6
    6d00:	0e 94 5e 54 	call	0xa8bc	; 0xa8bc <__fixsfsi>
    6d04:	0e 94 91 54 	call	0xa922	; 0xa922 <__floatsisf>
    6d08:	60 93 e5 02 	sts	0x02E5, r22
    6d0c:	70 93 e6 02 	sts	0x02E6, r23
    6d10:	80 93 e7 02 	sts	0x02E7, r24
    6d14:	90 93 e8 02 	sts	0x02E8, r25
		} else {
			leftMotSteps -= ((float)(last_left_vel>>3))*(LEFT_ENC_OFFSET-ENC_SLOPE*((float)(last_left_vel>>2)))/1000.0;
		}

*/
		if(robotPosition == HORIZONTAL_POS) {
    6d18:	80 91 16 02 	lds	r24, 0x0216
    6d1c:	81 30       	cpi	r24, 0x01	; 1
    6d1e:	09 f4       	brne	.+2      	; 0x6d22 <handleMotorsWithSpeedController+0x1a6>
    6d20:	db c1       	rjmp	.+950    	; 0x70d8 <handleMotorsWithSpeedController+0x55c>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_left(&pwm_left_working);
			//PORTB |= (1 << 5);
		} else {
			//PORTB &= ~(1 << 6);
			start_vertical_speed_control_left(&pwm_left_working);
    6d22:	8f e1       	ldi	r24, 0x1F	; 31
    6d24:	93 e0       	ldi	r25, 0x03	; 3
    6d26:	0e 94 5e 19 	call	0x32bc	; 0x32bc <start_vertical_speed_control_left>
			//PORTB |= (1 << 6);
		}

		pwm_left = pwm_left_working;
    6d2a:	80 91 1f 03 	lds	r24, 0x031F
    6d2e:	90 91 20 03 	lds	r25, 0x0320
    6d32:	90 93 08 03 	sts	0x0308, r25
    6d36:	80 93 07 03 	sts	0x0307, r24

		if(pwm_left > 0) {
    6d3a:	18 16       	cp	r1, r24
    6d3c:	19 06       	cpc	r1, r25
    6d3e:	0c f0       	brlt	.+2      	; 0x6d42 <handleMotorsWithSpeedController+0x1c6>
    6d40:	0d c2       	rjmp	.+1050   	; 0x715c <handleMotorsWithSpeedController+0x5e0>
			OCR4A = (unsigned int)pwm_left;
    6d42:	90 93 a9 00 	sts	0x00A9, r25
    6d46:	80 93 a8 00 	sts	0x00A8, r24
		} else {
			OCR4A = 0;
			OCR4B = 0;
		}

		computeOdometry++;
    6d4a:	80 91 b3 04 	lds	r24, 0x04B3
    6d4e:	8f 5f       	subi	r24, 0xFF	; 255
    6d50:	80 93 b3 04 	sts	0x04B3, r24

	}

	if(compute_right_vel) {
    6d54:	80 91 08 02 	lds	r24, 0x0208
    6d58:	88 23       	and	r24, r24
    6d5a:	09 f0       	breq	.+2      	; 0x6d5e <handleMotorsWithSpeedController+0x1e2>
    6d5c:	c1 c0       	rjmp	.+386    	; 0x6ee0 <handleMotorsWithSpeedController+0x364>
    6d5e:	80 91 b3 04 	lds	r24, 0x04B3

		computeOdometry++;

	}

	if(computeOdometry>=2) {	// compute odometry when we get the last encoders values for both wheels
    6d62:	82 30       	cpi	r24, 0x02	; 2
    6d64:	08 f4       	brcc	.+2      	; 0x6d68 <handleMotorsWithSpeedController+0x1ec>
    6d66:	ab c0       	rjmp	.+342    	; 0x6ebe <handleMotorsWithSpeedController+0x342>

		// the odometry computation takes about 1 ms

		computeOdometry = 0;
    6d68:	10 92 b3 04 	sts	0x04B3, r1

		deltaDist = ((rightDist-rightDistPrev)+(leftDist-leftDistPrev))/2.0;
    6d6c:	60 90 a7 04 	lds	r6, 0x04A7
    6d70:	70 90 a8 04 	lds	r7, 0x04A8
    6d74:	80 90 a9 04 	lds	r8, 0x04A9
    6d78:	90 90 aa 04 	lds	r9, 0x04AA
    6d7c:	20 90 a3 04 	lds	r2, 0x04A3
    6d80:	30 90 a4 04 	lds	r3, 0x04A4
    6d84:	40 90 a5 04 	lds	r4, 0x04A5
    6d88:	50 90 a6 04 	lds	r5, 0x04A6
    6d8c:	c4 01       	movw	r24, r8
    6d8e:	b3 01       	movw	r22, r6
    6d90:	20 91 af 04 	lds	r18, 0x04AF
    6d94:	30 91 b0 04 	lds	r19, 0x04B0
    6d98:	40 91 b1 04 	lds	r20, 0x04B1
    6d9c:	50 91 b2 04 	lds	r21, 0x04B2
    6da0:	0e 94 28 53 	call	0xa650	; 0xa650 <__subsf3>
    6da4:	7b 01       	movw	r14, r22
    6da6:	8c 01       	movw	r16, r24
    6da8:	c2 01       	movw	r24, r4
    6daa:	b1 01       	movw	r22, r2
    6dac:	20 91 ab 04 	lds	r18, 0x04AB
    6db0:	30 91 ac 04 	lds	r19, 0x04AC
    6db4:	40 91 ad 04 	lds	r20, 0x04AD
    6db8:	50 91 ae 04 	lds	r21, 0x04AE
    6dbc:	0e 94 28 53 	call	0xa650	; 0xa650 <__subsf3>
    6dc0:	9b 01       	movw	r18, r22
    6dc2:	ac 01       	movw	r20, r24
    6dc4:	c8 01       	movw	r24, r16
    6dc6:	b7 01       	movw	r22, r14
    6dc8:	0e 94 29 53 	call	0xa652	; 0xa652 <__addsf3>
    6dcc:	20 e0       	ldi	r18, 0x00	; 0
    6dce:	30 e0       	ldi	r19, 0x00	; 0
    6dd0:	40 e0       	ldi	r20, 0x00	; 0
    6dd2:	5f e3       	ldi	r21, 0x3F	; 63
    6dd4:	0e 94 aa 55 	call	0xab54	; 0xab54 <__mulsf3>
    6dd8:	d6 2e       	mov	r13, r22
    6dda:	c7 2e       	mov	r12, r23
    6ddc:	b8 2e       	mov	r11, r24
    6dde:	a9 2e       	mov	r10, r25
    6de0:	a6 01       	movw	r20, r12
    6de2:	95 01       	movw	r18, r10
    6de4:	85 2f       	mov	r24, r21
    6de6:	94 2f       	mov	r25, r20
    6de8:	a3 2f       	mov	r26, r19
    6dea:	b2 2f       	mov	r27, r18
    6dec:	80 93 8f 04 	sts	0x048F, r24
    6df0:	90 93 90 04 	sts	0x0490, r25
    6df4:	a0 93 91 04 	sts	0x0491, r26
    6df8:	b0 93 92 04 	sts	0x0492, r27

		if(robotPosition == HORIZONTAL_POS) {
    6dfc:	80 91 16 02 	lds	r24, 0x0216
    6e00:	81 30       	cpi	r24, 0x01	; 1
    6e02:	09 f4       	brne	.+2      	; 0x6e06 <handleMotorsWithSpeedController+0x28a>
    6e04:	31 c1       	rjmp	.+610    	; 0x7068 <handleMotorsWithSpeedController+0x4ec>
			//thetaOld = (rightMotSteps - leftMotSteps)/WHEEL_DIST;	// radians
			theta = (rightDist-leftDist)/WHEEL_DIST;
		} else {
			//thetaOld = thetaAcc;
			theta = thetaAcc;
    6e06:	f0 90 b4 04 	lds	r15, 0x04B4
    6e0a:	00 91 b5 04 	lds	r16, 0x04B5
    6e0e:	10 91 b6 04 	lds	r17, 0x04B6
    6e12:	e0 90 b7 04 	lds	r14, 0x04B7
    6e16:	8f 2d       	mov	r24, r15
    6e18:	90 2f       	mov	r25, r16
    6e1a:	a1 2f       	mov	r26, r17
    6e1c:	be 2d       	mov	r27, r14
    6e1e:	80 93 7f 04 	sts	0x047F, r24
    6e22:	90 93 80 04 	sts	0x0480, r25
    6e26:	a0 93 81 04 	sts	0x0481, r26
    6e2a:	b0 93 82 04 	sts	0x0482, r27
		}

		//deltaDistOld = ((rightMotSteps-rightMotStepsOld)+(leftMotSteps-leftMotStepsOld))/2.0;

		xPos = xPos + cos(theta)*deltaDist;				
    6e2e:	6f 2d       	mov	r22, r15
    6e30:	70 2f       	mov	r23, r16
    6e32:	81 2f       	mov	r24, r17
    6e34:	9e 2d       	mov	r25, r14
    6e36:	0e 94 f3 53 	call	0xa7e6	; 0xa7e6 <cos>
    6e3a:	9b 01       	movw	r18, r22
    6e3c:	ac 01       	movw	r20, r24
    6e3e:	d6 01       	movw	r26, r12
    6e40:	f5 01       	movw	r30, r10
    6e42:	6b 2f       	mov	r22, r27
    6e44:	7c 2d       	mov	r23, r12
    6e46:	8f 2f       	mov	r24, r31
    6e48:	9a 2d       	mov	r25, r10
    6e4a:	0e 94 aa 55 	call	0xab54	; 0xab54 <__mulsf3>
    6e4e:	9b 01       	movw	r18, r22
    6e50:	ac 01       	movw	r20, r24
    6e52:	60 91 87 04 	lds	r22, 0x0487
    6e56:	70 91 88 04 	lds	r23, 0x0488
    6e5a:	80 91 89 04 	lds	r24, 0x0489
    6e5e:	90 91 8a 04 	lds	r25, 0x048A
    6e62:	0e 94 29 53 	call	0xa652	; 0xa652 <__addsf3>
    6e66:	60 93 87 04 	sts	0x0487, r22
    6e6a:	70 93 88 04 	sts	0x0488, r23
    6e6e:	80 93 89 04 	sts	0x0489, r24
    6e72:	90 93 8a 04 	sts	0x048A, r25
		yPos = yPos + sin(theta)*deltaDist;
    6e76:	6f 2d       	mov	r22, r15
    6e78:	70 2f       	mov	r23, r16
    6e7a:	81 2f       	mov	r24, r17
    6e7c:	9e 2d       	mov	r25, r14
    6e7e:	0e 94 0d 56 	call	0xac1a	; 0xac1a <sin>
    6e82:	9b 01       	movw	r18, r22
    6e84:	ac 01       	movw	r20, r24
    6e86:	d6 01       	movw	r26, r12
    6e88:	f5 01       	movw	r30, r10
    6e8a:	6b 2f       	mov	r22, r27
    6e8c:	7c 2d       	mov	r23, r12
    6e8e:	8f 2f       	mov	r24, r31
    6e90:	9a 2d       	mov	r25, r10
    6e92:	0e 94 aa 55 	call	0xab54	; 0xab54 <__mulsf3>
    6e96:	9b 01       	movw	r18, r22
    6e98:	ac 01       	movw	r20, r24
    6e9a:	60 91 8b 04 	lds	r22, 0x048B
    6e9e:	70 91 8c 04 	lds	r23, 0x048C
    6ea2:	80 91 8d 04 	lds	r24, 0x048D
    6ea6:	90 91 8e 04 	lds	r25, 0x048E
    6eaa:	0e 94 29 53 	call	0xa652	; 0xa652 <__addsf3>
    6eae:	60 93 8b 04 	sts	0x048B, r22
    6eb2:	70 93 8c 04 	sts	0x048C, r23
    6eb6:	80 93 8d 04 	sts	0x048D, r24
    6eba:	90 93 8e 04 	sts	0x048E, r25
		//xPosOld = xPosOld + cos(thetaOld)*deltaDistOld;				
		//yPosOld = yPosOld + sin(thetaOld)*deltaDistOld;

	}

}
    6ebe:	1f 91       	pop	r17
    6ec0:	0f 91       	pop	r16
    6ec2:	ff 90       	pop	r15
    6ec4:	ef 90       	pop	r14
    6ec6:	df 90       	pop	r13
    6ec8:	cf 90       	pop	r12
    6eca:	bf 90       	pop	r11
    6ecc:	af 90       	pop	r10
    6ece:	9f 90       	pop	r9
    6ed0:	8f 90       	pop	r8
    6ed2:	7f 90       	pop	r7
    6ed4:	6f 90       	pop	r6
    6ed6:	5f 90       	pop	r5
    6ed8:	4f 90       	pop	r4
    6eda:	3f 90       	pop	r3
    6edc:	2f 90       	pop	r2
    6ede:	08 95       	ret

	}

	if(compute_right_vel) {

		last_right_vel = right_vel_sum>>2;
    6ee0:	20 91 ff 02 	lds	r18, 0x02FF
    6ee4:	30 91 00 03 	lds	r19, 0x0300
    6ee8:	36 95       	lsr	r19
    6eea:	27 95       	ror	r18
    6eec:	36 95       	lsr	r19
    6eee:	27 95       	ror	r18
    6ef0:	30 93 04 03 	sts	0x0304, r19
    6ef4:	20 93 03 03 	sts	0x0303, r18
		compute_right_vel = 0;
    6ef8:	10 92 08 02 	sts	0x0208, r1
		right_vel_sum = 0;
    6efc:	10 92 00 03 	sts	0x0300, r1
    6f00:	10 92 ff 02 	sts	0x02FF, r1

		if(calibrateOdomFlag==1) {
    6f04:	80 91 70 05 	lds	r24, 0x0570
    6f08:	81 30       	cpi	r24, 0x01	; 1
    6f0a:	09 f4       	brne	.+2      	; 0x6f0e <handleMotorsWithSpeedController+0x392>
    6f0c:	ea c0       	rjmp	.+468    	; 0x70e2 <handleMotorsWithSpeedController+0x566>
			rightSpeedSumOdom += last_right_vel;
			rightSumCount++;
		}

		getRightSpeedFromInput();
    6f0e:	0e 94 08 31 	call	0x6210	; 0x6210 <getRightSpeedFromInput>
		rightDistPrev = rightDist;
    6f12:	80 91 a7 04 	lds	r24, 0x04A7
    6f16:	90 91 a8 04 	lds	r25, 0x04A8
    6f1a:	a0 91 a9 04 	lds	r26, 0x04A9
    6f1e:	b0 91 aa 04 	lds	r27, 0x04AA
    6f22:	80 93 af 04 	sts	0x04AF, r24
    6f26:	90 93 b0 04 	sts	0x04B0, r25
    6f2a:	a0 93 b1 04 	sts	0x04B1, r26
    6f2e:	b0 93 b2 04 	sts	0x04B2, r27
		rightDist += ((float)speedRightFromEnc*((float)(getTime100MicroSec()-timeRightOdom)*104.0))/1000000.0;	// distance in mm				
    6f32:	60 91 ca 04 	lds	r22, 0x04CA
    6f36:	70 91 cb 04 	lds	r23, 0x04CB
    6f3a:	88 27       	eor	r24, r24
    6f3c:	77 fd       	sbrc	r23, 7
    6f3e:	80 95       	com	r24
    6f40:	98 2f       	mov	r25, r24
    6f42:	0e 94 91 54 	call	0xa922	; 0xa922 <__floatsisf>
    6f46:	7b 01       	movw	r14, r22
    6f48:	8c 01       	movw	r16, r24
    6f4a:	0e 94 35 22 	call	0x446a	; 0x446a <getTime100MicroSec>
    6f4e:	20 91 d0 04 	lds	r18, 0x04D0
    6f52:	30 91 d1 04 	lds	r19, 0x04D1
    6f56:	40 91 d2 04 	lds	r20, 0x04D2
    6f5a:	50 91 d3 04 	lds	r21, 0x04D3
    6f5e:	62 1b       	sub	r22, r18
    6f60:	73 0b       	sbc	r23, r19
    6f62:	84 0b       	sbc	r24, r20
    6f64:	95 0b       	sbc	r25, r21
    6f66:	0e 94 8f 54 	call	0xa91e	; 0xa91e <__floatunsisf>
    6f6a:	20 e0       	ldi	r18, 0x00	; 0
    6f6c:	30 e0       	ldi	r19, 0x00	; 0
    6f6e:	40 ed       	ldi	r20, 0xD0	; 208
    6f70:	52 e4       	ldi	r21, 0x42	; 66
    6f72:	0e 94 aa 55 	call	0xab54	; 0xab54 <__mulsf3>
    6f76:	9b 01       	movw	r18, r22
    6f78:	ac 01       	movw	r20, r24
    6f7a:	c8 01       	movw	r24, r16
    6f7c:	b7 01       	movw	r22, r14
    6f7e:	0e 94 aa 55 	call	0xab54	; 0xab54 <__mulsf3>
    6f82:	20 e0       	ldi	r18, 0x00	; 0
    6f84:	34 e2       	ldi	r19, 0x24	; 36
    6f86:	44 e7       	ldi	r20, 0x74	; 116
    6f88:	59 e4       	ldi	r21, 0x49	; 73
    6f8a:	0e 94 f6 53 	call	0xa7ec	; 0xa7ec <__divsf3>
    6f8e:	9b 01       	movw	r18, r22
    6f90:	ac 01       	movw	r20, r24
    6f92:	60 91 a7 04 	lds	r22, 0x04A7
    6f96:	70 91 a8 04 	lds	r23, 0x04A8
    6f9a:	80 91 a9 04 	lds	r24, 0x04A9
    6f9e:	90 91 aa 04 	lds	r25, 0x04AA
    6fa2:	0e 94 29 53 	call	0xa652	; 0xa652 <__addsf3>
    6fa6:	60 93 a7 04 	sts	0x04A7, r22
    6faa:	70 93 a8 04 	sts	0x04A8, r23
    6fae:	80 93 a9 04 	sts	0x04A9, r24
    6fb2:	90 93 aa 04 	sts	0x04AA, r25
		timeRightOdom = getTime100MicroSec();
    6fb6:	0e 94 35 22 	call	0x446a	; 0x446a <getTime100MicroSec>
    6fba:	60 93 d0 04 	sts	0x04D0, r22
    6fbe:	70 93 d1 04 	sts	0x04D1, r23
    6fc2:	80 93 d2 04 	sts	0x04D2, r24
    6fc6:	90 93 d3 04 	sts	0x04D3, r25
		rightMotSteps = (signed long int)rightDist;
    6fca:	60 91 a7 04 	lds	r22, 0x04A7
    6fce:	70 91 a8 04 	lds	r23, 0x04A8
    6fd2:	80 91 a9 04 	lds	r24, 0x04A9
    6fd6:	90 91 aa 04 	lds	r25, 0x04AA
    6fda:	0e 94 5e 54 	call	0xa8bc	; 0xa8bc <__fixsfsi>
    6fde:	0e 94 91 54 	call	0xa922	; 0xa922 <__floatsisf>
    6fe2:	60 93 e1 02 	sts	0x02E1, r22
    6fe6:	70 93 e2 02 	sts	0x02E2, r23
    6fea:	80 93 e3 02 	sts	0x02E3, r24
    6fee:	90 93 e4 02 	sts	0x02E4, r25
		} else {
			rightMotSteps -= ((float)(last_right_vel>>3))*(RIGHT_ENC_OFFSET-ENC_SLOPE*((float)(last_right_vel>>2)))/1000.0;
		}
*/

		if(robotPosition == HORIZONTAL_POS) {
    6ff2:	80 91 16 02 	lds	r24, 0x0216
    6ff6:	81 30       	cpi	r24, 0x01	; 1
    6ff8:	09 f4       	brne	.+2      	; 0x6ffc <handleMotorsWithSpeedController+0x480>
    6ffa:	47 c0       	rjmp	.+142    	; 0x708a <handleMotorsWithSpeedController+0x50e>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_right(&pwm_right_working);
			//PORTB |= (1 << 5);
		} else {
			//PORTB &= ~(1 << 6);
			start_vertical_speed_control_right(&pwm_right_working);
    6ffc:	8d e1       	ldi	r24, 0x1D	; 29
    6ffe:	93 e0       	ldi	r25, 0x03	; 3
    7000:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <start_vertical_speed_control_right>
			//PORTB |= (1 << 6);
		}

		pwm_right = pwm_right_working;
    7004:	80 91 1d 03 	lds	r24, 0x031D
    7008:	90 91 1e 03 	lds	r25, 0x031E
    700c:	90 93 06 03 	sts	0x0306, r25
    7010:	80 93 05 03 	sts	0x0305, r24

		if(pwm_right > 0) {
    7014:	18 16       	cp	r1, r24
    7016:	19 06       	cpc	r1, r25
    7018:	0c f0       	brlt	.+2      	; 0x701c <handleMotorsWithSpeedController+0x4a0>
    701a:	95 c0       	rjmp	.+298    	; 0x7146 <handleMotorsWithSpeedController+0x5ca>
			OCR3A = (unsigned int)pwm_right;
    701c:	90 93 99 00 	sts	0x0099, r25
    7020:	80 93 98 00 	sts	0x0098, r24
		} else {
			OCR3A = 0;
			OCR3B = 0;
		}

		computeOdometry++;
    7024:	80 91 b3 04 	lds	r24, 0x04B3
    7028:	8f 5f       	subi	r24, 0xFF	; 255
    702a:	80 93 b3 04 	sts	0x04B3, r24
    702e:	99 ce       	rjmp	.-718    	; 0x6d62 <handleMotorsWithSpeedController+0x1e6>
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_BW_SC);
		}
	}

	if(obstacleAvoidanceEnabled) {
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
    7030:	8f e1       	ldi	r24, 0x1F	; 31
    7032:	93 e0       	ldi	r25, 0x03	; 3
    7034:	6d e1       	ldi	r22, 0x1D	; 29
    7036:	73 e0       	ldi	r23, 0x03	; 3
    7038:	0e 94 1b 3c 	call	0x7836	; 0x7836 <obstacleAvoidance>
    703c:	80 91 1f 03 	lds	r24, 0x031F
    7040:	90 91 20 03 	lds	r25, 0x0320
    7044:	cf cd       	rjmp	.-1122   	; 0x6be4 <handleMotorsWithSpeedController+0x68>
}

void handleMotorsWithSpeedController() {

	if(calibrateOdomFlag==1) {
		pwm_right_working = pwm_intermediate_right_desired;
    7046:	80 91 0d 03 	lds	r24, 0x030D
    704a:	90 91 0e 03 	lds	r25, 0x030E
    704e:	90 93 1e 03 	sts	0x031E, r25
    7052:	80 93 1d 03 	sts	0x031D, r24
		pwm_left_working = pwm_intermediate_left_desired;
    7056:	80 91 0f 03 	lds	r24, 0x030F
    705a:	90 91 10 03 	lds	r25, 0x0310
    705e:	90 93 20 03 	sts	0x0320, r25
    7062:	80 93 1f 03 	sts	0x031F, r24
    7066:	b9 cd       	rjmp	.-1166   	; 0x6bda <handleMotorsWithSpeedController+0x5e>

		deltaDist = ((rightDist-rightDistPrev)+(leftDist-leftDistPrev))/2.0;

		if(robotPosition == HORIZONTAL_POS) {
			//thetaOld = (rightMotSteps - leftMotSteps)/WHEEL_DIST;	// radians
			theta = (rightDist-leftDist)/WHEEL_DIST;
    7068:	c4 01       	movw	r24, r8
    706a:	b3 01       	movw	r22, r6
    706c:	a2 01       	movw	r20, r4
    706e:	91 01       	movw	r18, r2
    7070:	0e 94 28 53 	call	0xa650	; 0xa650 <__subsf3>
    7074:	20 e0       	ldi	r18, 0x00	; 0
    7076:	30 e0       	ldi	r19, 0x00	; 0
    7078:	4e e1       	ldi	r20, 0x1E	; 30
    707a:	52 e4       	ldi	r21, 0x42	; 66
    707c:	0e 94 f6 53 	call	0xa7ec	; 0xa7ec <__divsf3>
    7080:	f6 2e       	mov	r15, r22
    7082:	07 2f       	mov	r16, r23
    7084:	18 2f       	mov	r17, r24
    7086:	e9 2e       	mov	r14, r25
    7088:	c6 ce       	rjmp	.-628    	; 0x6e16 <handleMotorsWithSpeedController+0x29a>
		}
*/

		if(robotPosition == HORIZONTAL_POS) {
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_right(&pwm_right_working);
    708a:	8d e1       	ldi	r24, 0x1D	; 29
    708c:	93 e0       	ldi	r25, 0x03	; 3
    708e:	0e 94 9a 1c 	call	0x3934	; 0x3934 <start_horizontal_speed_control_right>
    7092:	b8 cf       	rjmp	.-144    	; 0x7004 <handleMotorsWithSpeedController+0x488>
		last_left_vel = left_vel_sum>>2;
		compute_left_vel = 0;
		left_vel_sum = 0;
		
		if(calibrateOdomFlag==1) {
			leftSpeedSumOdom += last_left_vel;
    7094:	44 27       	eor	r20, r20
    7096:	37 fd       	sbrc	r19, 7
    7098:	40 95       	com	r20
    709a:	54 2f       	mov	r21, r20
    709c:	80 91 b8 04 	lds	r24, 0x04B8
    70a0:	90 91 b9 04 	lds	r25, 0x04B9
    70a4:	a0 91 ba 04 	lds	r26, 0x04BA
    70a8:	b0 91 bb 04 	lds	r27, 0x04BB
    70ac:	82 0f       	add	r24, r18
    70ae:	93 1f       	adc	r25, r19
    70b0:	a4 1f       	adc	r26, r20
    70b2:	b5 1f       	adc	r27, r21
    70b4:	80 93 b8 04 	sts	0x04B8, r24
    70b8:	90 93 b9 04 	sts	0x04B9, r25
    70bc:	a0 93 ba 04 	sts	0x04BA, r26
    70c0:	b0 93 bb 04 	sts	0x04BB, r27
			leftSumCount++;
    70c4:	80 91 c0 04 	lds	r24, 0x04C0
    70c8:	90 91 c1 04 	lds	r25, 0x04C1
    70cc:	01 96       	adiw	r24, 0x01	; 1
    70ce:	90 93 c1 04 	sts	0x04C1, r25
    70d2:	80 93 c0 04 	sts	0x04C0, r24
    70d6:	ae cd       	rjmp	.-1188   	; 0x6c34 <handleMotorsWithSpeedController+0xb8>
		}

*/
		if(robotPosition == HORIZONTAL_POS) {
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_left(&pwm_left_working);
    70d8:	8f e1       	ldi	r24, 0x1F	; 31
    70da:	93 e0       	ldi	r25, 0x03	; 3
    70dc:	0e 94 e1 1d 	call	0x3bc2	; 0x3bc2 <start_horizontal_speed_control_left>
    70e0:	24 ce       	rjmp	.-952    	; 0x6d2a <handleMotorsWithSpeedController+0x1ae>
		last_right_vel = right_vel_sum>>2;
		compute_right_vel = 0;
		right_vel_sum = 0;

		if(calibrateOdomFlag==1) {
			rightSpeedSumOdom += last_right_vel;
    70e2:	44 27       	eor	r20, r20
    70e4:	37 fd       	sbrc	r19, 7
    70e6:	40 95       	com	r20
    70e8:	54 2f       	mov	r21, r20
    70ea:	80 91 bc 04 	lds	r24, 0x04BC
    70ee:	90 91 bd 04 	lds	r25, 0x04BD
    70f2:	a0 91 be 04 	lds	r26, 0x04BE
    70f6:	b0 91 bf 04 	lds	r27, 0x04BF
    70fa:	82 0f       	add	r24, r18
    70fc:	93 1f       	adc	r25, r19
    70fe:	a4 1f       	adc	r26, r20
    7100:	b5 1f       	adc	r27, r21
    7102:	80 93 bc 04 	sts	0x04BC, r24
    7106:	90 93 bd 04 	sts	0x04BD, r25
    710a:	a0 93 be 04 	sts	0x04BE, r26
    710e:	b0 93 bf 04 	sts	0x04BF, r27
			rightSumCount++;
    7112:	80 91 c2 04 	lds	r24, 0x04C2
    7116:	90 91 c3 04 	lds	r25, 0x04C3
    711a:	01 96       	adiw	r24, 0x01	; 1
    711c:	90 93 c3 04 	sts	0x04C3, r25
    7120:	80 93 c2 04 	sts	0x04C2, r24
    7124:	f4 ce       	rjmp	.-536    	; 0x6f0e <handleMotorsWithSpeedController+0x392>
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_BW_SC);
		}
		if(pwm_intermediate_left_desired >= 0) {		// pwm in the range -127..127
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_FW_SC);
		} else {
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_BW_SC);
    7126:	62 e0       	ldi	r22, 0x02	; 2
    7128:	0e 94 a0 2d 	call	0x5b40	; 0x5b40 <getInputFromSpeed>
    712c:	90 93 20 03 	sts	0x0320, r25
    7130:	80 93 1f 03 	sts	0x031F, r24
    7134:	52 cd       	rjmp	.-1372   	; 0x6bda <handleMotorsWithSpeedController+0x5e>
		pwm_left_working = pwm_intermediate_left_desired;
	} else {
		if(pwm_intermediate_right_desired >= 0) {		// pwm in the range -127..127
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_FW_SC);
		} else {
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_BW_SC);
    7136:	63 e0       	ldi	r22, 0x03	; 3
    7138:	0e 94 a0 2d 	call	0x5b40	; 0x5b40 <getInputFromSpeed>
    713c:	90 93 1e 03 	sts	0x031E, r25
    7140:	80 93 1d 03 	sts	0x031D, r24
    7144:	3d cd       	rjmp	.-1414   	; 0x6bc0 <handleMotorsWithSpeedController+0x44>

		pwm_right = pwm_right_working;

		if(pwm_right > 0) {
			OCR3A = (unsigned int)pwm_right;
		} else if(pwm_right < 0) {
    7146:	00 97       	sbiw	r24, 0x00	; 0
    7148:	a1 f4       	brne	.+40     	; 0x7172 <handleMotorsWithSpeedController+0x5f6>
			OCR3B = (unsigned int)(-pwm_right);
		} else {
			OCR3A = 0;
    714a:	10 92 99 00 	sts	0x0099, r1
    714e:	10 92 98 00 	sts	0x0098, r1
			OCR3B = 0;
    7152:	10 92 9b 00 	sts	0x009B, r1
    7156:	10 92 9a 00 	sts	0x009A, r1
    715a:	64 cf       	rjmp	.-312    	; 0x7024 <handleMotorsWithSpeedController+0x4a8>

		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
    715c:	00 97       	sbiw	r24, 0x00	; 0
    715e:	89 f4       	brne	.+34     	; 0x7182 <handleMotorsWithSpeedController+0x606>
			OCR4B =(unsigned int)( -pwm_left);
		} else {
			OCR4A = 0;
    7160:	10 92 a9 00 	sts	0x00A9, r1
    7164:	10 92 a8 00 	sts	0x00A8, r1
			OCR4B = 0;
    7168:	10 92 ab 00 	sts	0x00AB, r1
    716c:	10 92 aa 00 	sts	0x00AA, r1
    7170:	ec cd       	rjmp	.-1064   	; 0x6d4a <handleMotorsWithSpeedController+0x1ce>
		pwm_right = pwm_right_working;

		if(pwm_right > 0) {
			OCR3A = (unsigned int)pwm_right;
		} else if(pwm_right < 0) {
			OCR3B = (unsigned int)(-pwm_right);
    7172:	90 95       	com	r25
    7174:	81 95       	neg	r24
    7176:	9f 4f       	sbci	r25, 0xFF	; 255
    7178:	90 93 9b 00 	sts	0x009B, r25
    717c:	80 93 9a 00 	sts	0x009A, r24
    7180:	51 cf       	rjmp	.-350    	; 0x7024 <handleMotorsWithSpeedController+0x4a8>
		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
			OCR4B =(unsigned int)( -pwm_left);
    7182:	90 95       	com	r25
    7184:	81 95       	neg	r24
    7186:	9f 4f       	sbci	r25, 0xFF	; 255
    7188:	90 93 ab 00 	sts	0x00AB, r25
    718c:	80 93 aa 00 	sts	0x00AA, r24
    7190:	dc cd       	rjmp	.-1096   	; 0x6d4a <handleMotorsWithSpeedController+0x1ce>

00007192 <writeDefaultCalibration>:
		speedLeftFromEnc = -speedLeftFromEnc;
    }
    
}

void writeDefaultCalibration() {
    7192:	2f 92       	push	r2
    7194:	3f 92       	push	r3
    7196:	4f 92       	push	r4
    7198:	5f 92       	push	r5
    719a:	6f 92       	push	r6
    719c:	7f 92       	push	r7
    719e:	8f 92       	push	r8
    71a0:	9f 92       	push	r9
    71a2:	af 92       	push	r10
    71a4:	bf 92       	push	r11
    71a6:	cf 92       	push	r12
    71a8:	df 92       	push	r13
    71aa:	ef 92       	push	r14
    71ac:	ff 92       	push	r15
    71ae:	0f 93       	push	r16
    71b0:	1f 93       	push	r17
    71b2:	cf 93       	push	r28
    71b4:	df 93       	push	r29
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    	calibration[i][0] = i+1;
	}
    // the following values are taken from a field test
    // forward left, speed control enabled
    calibration[0][0] = 20;		// measured speed with back EMF (adc 0..1023)
    71b6:	a4 e1       	ldi	r26, 0x14	; 20
    71b8:	b0 e0       	ldi	r27, 0x00	; 0
    71ba:	b0 93 e5 08 	sts	0x08E5, r27
    71be:	a0 93 e4 08 	sts	0x08E4, r26
    calibration[1][0] = 40;
    71c2:	88 e2       	ldi	r24, 0x28	; 40
    71c4:	90 e0       	ldi	r25, 0x00	; 0
    71c6:	90 93 f5 08 	sts	0x08F5, r25
    71ca:	80 93 f4 08 	sts	0x08F4, r24
    calibration[2][0] = 59;
    71ce:	6b e3       	ldi	r22, 0x3B	; 59
    71d0:	70 e0       	ldi	r23, 0x00	; 0
    71d2:	70 93 05 09 	sts	0x0905, r23
    71d6:	60 93 04 09 	sts	0x0904, r22
    calibration[3][0] = 79;
    71da:	0f e4       	ldi	r16, 0x4F	; 79
    71dc:	10 e0       	ldi	r17, 0x00	; 0
    71de:	10 93 15 09 	sts	0x0915, r17
    71e2:	00 93 14 09 	sts	0x0914, r16
    calibration[4][0] = 100;
    71e6:	84 e6       	ldi	r24, 0x64	; 100
    71e8:	90 e0       	ldi	r25, 0x00	; 0
    71ea:	90 93 25 09 	sts	0x0925, r25
    71ee:	80 93 24 09 	sts	0x0924, r24
    calibration[5][0] = 120;
    71f2:	f8 e7       	ldi	r31, 0x78	; 120
    71f4:	af 2e       	mov	r10, r31
    71f6:	b1 2c       	mov	r11, r1
    71f8:	b0 92 35 09 	sts	0x0935, r11
    71fc:	a0 92 34 09 	sts	0x0934, r10
    calibration[6][0] = 139;
    7200:	8b e8       	ldi	r24, 0x8B	; 139
    7202:	90 e0       	ldi	r25, 0x00	; 0
    7204:	90 93 45 09 	sts	0x0945, r25
    7208:	80 93 44 09 	sts	0x0944, r24
    calibration[7][0] = 159;
    720c:	2f e9       	ldi	r18, 0x9F	; 159
    720e:	30 e0       	ldi	r19, 0x00	; 0
    7210:	30 93 55 09 	sts	0x0955, r19
    7214:	20 93 54 09 	sts	0x0954, r18
	calibration[8][0] = 180;
    7218:	44 eb       	ldi	r20, 0xB4	; 180
    721a:	50 e0       	ldi	r21, 0x00	; 0
    721c:	50 93 65 09 	sts	0x0965, r21
    7220:	40 93 64 09 	sts	0x0964, r20
    calibration[0][1] = 19;    	// real speed measured in mm/s
    7224:	63 e1       	ldi	r22, 0x13	; 19
    7226:	70 e0       	ldi	r23, 0x00	; 0
    7228:	70 93 e7 08 	sts	0x08E7, r23
    722c:	60 93 e6 08 	sts	0x08E6, r22
    calibration[1][1] = 47;
    7230:	2f e2       	ldi	r18, 0x2F	; 47
    7232:	30 e0       	ldi	r19, 0x00	; 0
    7234:	30 93 f7 08 	sts	0x08F7, r19
    7238:	20 93 f6 08 	sts	0x08F6, r18
    calibration[2][1] = 72;
    723c:	28 e4       	ldi	r18, 0x48	; 72
    723e:	30 e0       	ldi	r19, 0x00	; 0
    7240:	30 93 07 09 	sts	0x0907, r19
    7244:	20 93 06 09 	sts	0x0906, r18
    calibration[3][1] = 91;
    7248:	2b e5       	ldi	r18, 0x5B	; 91
    724a:	30 e0       	ldi	r19, 0x00	; 0
    724c:	30 93 17 09 	sts	0x0917, r19
    7250:	20 93 16 09 	sts	0x0916, r18
    calibration[4][1] = 109;
    7254:	2d e6       	ldi	r18, 0x6D	; 109
    7256:	30 e0       	ldi	r19, 0x00	; 0
    7258:	30 93 27 09 	sts	0x0927, r19
    725c:	20 93 26 09 	sts	0x0926, r18
    calibration[5][1] = 125;
    7260:	ed e7       	ldi	r30, 0x7D	; 125
    7262:	6e 2e       	mov	r6, r30
    7264:	71 2c       	mov	r7, r1
    7266:	70 92 37 09 	sts	0x0937, r7
    726a:	60 92 36 09 	sts	0x0936, r6
    calibration[6][1] = 143;
    726e:	2f e8       	ldi	r18, 0x8F	; 143
    7270:	30 e0       	ldi	r19, 0x00	; 0
    7272:	30 93 47 09 	sts	0x0947, r19
    7276:	20 93 46 09 	sts	0x0946, r18
    calibration[7][1] = 160;
    727a:	20 ea       	ldi	r18, 0xA0	; 160
    727c:	30 e0       	ldi	r19, 0x00	; 0
    727e:	30 93 57 09 	sts	0x0957, r19
    7282:	20 93 56 09 	sts	0x0956, r18
	calibration[8][1] = 174;
    7286:	ee ea       	ldi	r30, 0xAE	; 174
    7288:	f0 e0       	ldi	r31, 0x00	; 0
    728a:	f0 93 67 09 	sts	0x0967, r31
    728e:	e0 93 66 09 	sts	0x0966, r30
    // forward right, speed control enabled
    calibration[0][2] = 19;		// measured speed with back EMF (adc 0..1023)
    7292:	70 93 e9 08 	sts	0x08E9, r23
    7296:	60 93 e8 08 	sts	0x08E8, r22
    calibration[1][2] = 39;
    729a:	e7 e2       	ldi	r30, 0x27	; 39
    729c:	f0 e0       	ldi	r31, 0x00	; 0
    729e:	f0 93 f9 08 	sts	0x08F9, r31
    72a2:	e0 93 f8 08 	sts	0x08F8, r30
    calibration[2][2] = 60;
    72a6:	cc e3       	ldi	r28, 0x3C	; 60
    72a8:	d0 e0       	ldi	r29, 0x00	; 0
    72aa:	d0 93 09 09 	sts	0x0909, r29
    72ae:	c0 93 08 09 	sts	0x0908, r28
    calibration[3][2] = 80;
    72b2:	60 e5       	ldi	r22, 0x50	; 80
    72b4:	70 e0       	ldi	r23, 0x00	; 0
    72b6:	70 93 19 09 	sts	0x0919, r23
    72ba:	60 93 18 09 	sts	0x0918, r22
    calibration[4][2] = 99;
    72be:	63 e6       	ldi	r22, 0x63	; 99
    72c0:	e6 2e       	mov	r14, r22
    72c2:	f1 2c       	mov	r15, r1
    72c4:	f0 92 29 09 	sts	0x0929, r15
    72c8:	e0 92 28 09 	sts	0x0928, r14
    calibration[5][2] = 119;
    72cc:	67 e7       	ldi	r22, 0x77	; 119
    72ce:	70 e0       	ldi	r23, 0x00	; 0
    72d0:	70 93 39 09 	sts	0x0939, r23
    72d4:	60 93 38 09 	sts	0x0938, r22
    calibration[6][2] = 140;
    72d8:	0f 2e       	mov	r0, r31
    72da:	fc e8       	ldi	r31, 0x8C	; 140
    72dc:	cf 2e       	mov	r12, r31
    72de:	dd 24       	eor	r13, r13
    72e0:	f0 2d       	mov	r31, r0
    72e2:	d0 92 49 09 	sts	0x0949, r13
    72e6:	c0 92 48 09 	sts	0x0948, r12
    calibration[7][2] = 160;
    72ea:	30 93 59 09 	sts	0x0959, r19
    72ee:	20 93 58 09 	sts	0x0958, r18
	calibration[8][2] = 180;
    72f2:	50 93 69 09 	sts	0x0969, r21
    72f6:	40 93 68 09 	sts	0x0968, r20
    calibration[0][3] = 23;    	// real speed measured in mm/s
    72fa:	0f 2e       	mov	r0, r31
    72fc:	f7 e1       	ldi	r31, 0x17	; 23
    72fe:	8f 2e       	mov	r8, r31
    7300:	99 24       	eor	r9, r9
    7302:	f0 2d       	mov	r31, r0
    7304:	90 92 eb 08 	sts	0x08EB, r9
    7308:	80 92 ea 08 	sts	0x08EA, r8
    calibration[1][3] = 46;
    730c:	0f 2e       	mov	r0, r31
    730e:	fe e2       	ldi	r31, 0x2E	; 46
    7310:	4f 2e       	mov	r4, r31
    7312:	55 24       	eor	r5, r5
    7314:	f0 2d       	mov	r31, r0
    7316:	50 92 fb 08 	sts	0x08FB, r5
    731a:	40 92 fa 08 	sts	0x08FA, r4
    calibration[2][3] = 64;
    731e:	88 24       	eor	r8, r8
    7320:	99 24       	eor	r9, r9
    7322:	68 94       	set
    7324:	86 f8       	bld	r8, 6
    7326:	90 92 0b 09 	sts	0x090B, r9
    732a:	80 92 0a 09 	sts	0x090A, r8
    calibration[3][3] = 81;
    732e:	0f 2e       	mov	r0, r31
    7330:	f1 e5       	ldi	r31, 0x51	; 81
    7332:	2f 2e       	mov	r2, r31
    7334:	33 24       	eor	r3, r3
    7336:	f0 2d       	mov	r31, r0
    7338:	30 92 1b 09 	sts	0x091B, r3
    733c:	20 92 1a 09 	sts	0x091A, r2
    calibration[4][3] = 97;
    7340:	0f 2e       	mov	r0, r31
    7342:	f1 e6       	ldi	r31, 0x61	; 97
    7344:	8f 2e       	mov	r8, r31
    7346:	99 24       	eor	r9, r9
    7348:	f0 2d       	mov	r31, r0
    734a:	90 92 2b 09 	sts	0x092B, r9
    734e:	80 92 2a 09 	sts	0x092A, r8
    calibration[5][3] = 112;
    7352:	0f 2e       	mov	r0, r31
    7354:	f0 e7       	ldi	r31, 0x70	; 112
    7356:	8f 2e       	mov	r8, r31
    7358:	99 24       	eor	r9, r9
    735a:	f0 2d       	mov	r31, r0
    735c:	90 92 3b 09 	sts	0x093B, r9
    7360:	80 92 3a 09 	sts	0x093A, r8
    calibration[6][3] = 125;
    7364:	70 92 4b 09 	sts	0x094B, r7
    7368:	60 92 4a 09 	sts	0x094A, r6
    calibration[7][3] = 139;
    736c:	90 93 5b 09 	sts	0x095B, r25
    7370:	80 93 5a 09 	sts	0x095A, r24
	calibration[8][3] = 152;
    7374:	0f 2e       	mov	r0, r31
    7376:	f8 e9       	ldi	r31, 0x98	; 152
    7378:	8f 2e       	mov	r8, r31
    737a:	99 24       	eor	r9, r9
    737c:	f0 2d       	mov	r31, r0
    737e:	90 92 6b 09 	sts	0x096B, r9
    7382:	80 92 6a 09 	sts	0x096A, r8
    // backward left, speed control enabled
    calibration[0][4] = 20;		// measured speed with back EMF (adc 0..1023)
    7386:	b0 93 ed 08 	sts	0x08ED, r27
    738a:	a0 93 ec 08 	sts	0x08EC, r26
    calibration[1][4] = 39;
    738e:	f0 93 fd 08 	sts	0x08FD, r31
    7392:	e0 93 fc 08 	sts	0x08FC, r30
    calibration[2][4] = 60;
    7396:	d0 93 0d 09 	sts	0x090D, r29
    739a:	c0 93 0c 09 	sts	0x090C, r28
    calibration[3][4] = 79;
    739e:	10 93 1d 09 	sts	0x091D, r17
    73a2:	00 93 1c 09 	sts	0x091C, r16
    calibration[4][4] = 99;
    73a6:	f0 92 2d 09 	sts	0x092D, r15
    73aa:	e0 92 2c 09 	sts	0x092C, r14
    calibration[5][4] = 120;
    73ae:	b0 92 3d 09 	sts	0x093D, r11
    73b2:	a0 92 3c 09 	sts	0x093C, r10
    calibration[6][4] = 140;
    73b6:	d0 92 4d 09 	sts	0x094D, r13
    73ba:	c0 92 4c 09 	sts	0x094C, r12
    calibration[7][4] = 160;
    73be:	30 93 5d 09 	sts	0x095D, r19
    73c2:	20 93 5c 09 	sts	0x095C, r18
	calibration[8][4] = 179;
    73c6:	c3 eb       	ldi	r28, 0xB3	; 179
    73c8:	d0 e0       	ldi	r29, 0x00	; 0
    73ca:	d0 93 6d 09 	sts	0x096D, r29
    73ce:	c0 93 6c 09 	sts	0x096C, r28
    calibration[0][5] = 18;    	// real speed measured in mm/s
    73d2:	c2 e1       	ldi	r28, 0x12	; 18
    73d4:	d0 e0       	ldi	r29, 0x00	; 0
    73d6:	d0 93 ef 08 	sts	0x08EF, r29
    73da:	c0 93 ee 08 	sts	0x08EE, r28
    calibration[1][5] = 45;
    73de:	cd e2       	ldi	r28, 0x2D	; 45
    73e0:	d0 e0       	ldi	r29, 0x00	; 0
    73e2:	d0 93 ff 08 	sts	0x08FF, r29
    73e6:	c0 93 fe 08 	sts	0x08FE, r28
    calibration[2][5] = 68;
    73ea:	c4 e4       	ldi	r28, 0x44	; 68
    73ec:	d0 e0       	ldi	r29, 0x00	; 0
    73ee:	d0 93 0f 09 	sts	0x090F, r29
    73f2:	c0 93 0e 09 	sts	0x090E, r28
    calibration[3][5] = 87;
    73f6:	c7 e5       	ldi	r28, 0x57	; 87
    73f8:	d0 e0       	ldi	r29, 0x00	; 0
    73fa:	d0 93 1f 09 	sts	0x091F, r29
    73fe:	c0 93 1e 09 	sts	0x091E, r28
    calibration[4][5] = 105;
    7402:	c9 e6       	ldi	r28, 0x69	; 105
    7404:	d0 e0       	ldi	r29, 0x00	; 0
    7406:	d0 93 2f 09 	sts	0x092F, r29
    740a:	c0 93 2e 09 	sts	0x092E, r28
    calibration[5][5] = 119;
    740e:	70 93 3f 09 	sts	0x093F, r23
    7412:	60 93 3e 09 	sts	0x093E, r22
    calibration[6][5] = 137;
    7416:	c9 e8       	ldi	r28, 0x89	; 137
    7418:	d0 e0       	ldi	r29, 0x00	; 0
    741a:	d0 93 4f 09 	sts	0x094F, r29
    741e:	c0 93 4e 09 	sts	0x094E, r28
    calibration[7][5] = 151;
    7422:	c7 e9       	ldi	r28, 0x97	; 151
    7424:	d0 e0       	ldi	r29, 0x00	; 0
    7426:	d0 93 5f 09 	sts	0x095F, r29
    742a:	c0 93 5e 09 	sts	0x095E, r28
	calibration[8][5] = 168;
    742e:	c8 ea       	ldi	r28, 0xA8	; 168
    7430:	d0 e0       	ldi	r29, 0x00	; 0
    7432:	d0 93 6f 09 	sts	0x096F, r29
    7436:	c0 93 6e 09 	sts	0x096E, r28
    // backward right, speed control enabled
    calibration[0][6] = 20;		// measured speed with back EMF (adc 0..1023)
    743a:	b0 93 f1 08 	sts	0x08F1, r27
    743e:	a0 93 f0 08 	sts	0x08F0, r26
    calibration[1][6] = 39;
    7442:	f0 93 01 09 	sts	0x0901, r31
    7446:	e0 93 00 09 	sts	0x0900, r30
    calibration[2][6] = 59;
    744a:	eb e3       	ldi	r30, 0x3B	; 59
    744c:	f0 e0       	ldi	r31, 0x00	; 0
    744e:	f0 93 11 09 	sts	0x0911, r31
    7452:	e0 93 10 09 	sts	0x0910, r30
    calibration[3][6] = 80;
    7456:	e0 e5       	ldi	r30, 0x50	; 80
    7458:	f0 e0       	ldi	r31, 0x00	; 0
    745a:	f0 93 21 09 	sts	0x0921, r31
    745e:	e0 93 20 09 	sts	0x0920, r30
    calibration[4][6] = 100;
    7462:	e4 e6       	ldi	r30, 0x64	; 100
    7464:	f0 e0       	ldi	r31, 0x00	; 0
    7466:	f0 93 31 09 	sts	0x0931, r31
    746a:	e0 93 30 09 	sts	0x0930, r30
    calibration[5][6] = 119;
    746e:	70 93 41 09 	sts	0x0941, r23
    7472:	60 93 40 09 	sts	0x0940, r22
    calibration[6][6] = 139;
    7476:	90 93 51 09 	sts	0x0951, r25
    747a:	80 93 50 09 	sts	0x0950, r24
    calibration[7][6] = 160;
    747e:	30 93 61 09 	sts	0x0961, r19
    7482:	20 93 60 09 	sts	0x0960, r18
	calibration[8][6] = 180;
    7486:	50 93 71 09 	sts	0x0971, r21
    748a:	40 93 70 09 	sts	0x0970, r20
    calibration[0][7] = 22;    	// real speed measured in mm/s
    748e:	26 e1       	ldi	r18, 0x16	; 22
    7490:	30 e0       	ldi	r19, 0x00	; 0
    7492:	30 93 f3 08 	sts	0x08F3, r19
    7496:	20 93 f2 08 	sts	0x08F2, r18
    calibration[1][7] = 46;
    749a:	50 92 03 09 	sts	0x0903, r5
    749e:	40 92 02 09 	sts	0x0902, r4
    calibration[2][7] = 65;
    74a2:	21 e4       	ldi	r18, 0x41	; 65
    74a4:	30 e0       	ldi	r19, 0x00	; 0
    74a6:	30 93 13 09 	sts	0x0913, r19
    74aa:	20 93 12 09 	sts	0x0912, r18
    calibration[3][7] = 81;
    74ae:	30 92 23 09 	sts	0x0923, r3
    74b2:	20 92 22 09 	sts	0x0922, r2
    calibration[4][7] = 96;
    74b6:	20 e6       	ldi	r18, 0x60	; 96
    74b8:	30 e0       	ldi	r19, 0x00	; 0
    74ba:	30 93 33 09 	sts	0x0933, r19
    74be:	20 93 32 09 	sts	0x0932, r18
    calibration[5][7] = 111;
    74c2:	2f e6       	ldi	r18, 0x6F	; 111
    74c4:	30 e0       	ldi	r19, 0x00	; 0
    74c6:	30 93 43 09 	sts	0x0943, r19
    74ca:	20 93 42 09 	sts	0x0942, r18
    calibration[6][7] = 125;
    74ce:	70 92 53 09 	sts	0x0953, r7
    74d2:	60 92 52 09 	sts	0x0952, r6
    calibration[7][7] = 139;
    74d6:	90 93 63 09 	sts	0x0963, r25
    74da:	80 93 62 09 	sts	0x0962, r24
	calibration[8][7] = 153;
    74de:	89 e9       	ldi	r24, 0x99	; 153
    74e0:	90 e0       	ldi	r25, 0x00	; 0
    74e2:	90 93 73 09 	sts	0x0973, r25
    74e6:	80 93 72 09 	sts	0x0972, r24

    writeCalibrationToFlash();
    74ea:	0e 94 90 46 	call	0x8d20	; 0x8d20 <writeCalibrationToFlash>
}
    74ee:	df 91       	pop	r29
    74f0:	cf 91       	pop	r28
    74f2:	1f 91       	pop	r17
    74f4:	0f 91       	pop	r16
    74f6:	ff 90       	pop	r15
    74f8:	ef 90       	pop	r14
    74fa:	df 90       	pop	r13
    74fc:	cf 90       	pop	r12
    74fe:	bf 90       	pop	r11
    7500:	af 90       	pop	r10
    7502:	9f 90       	pop	r9
    7504:	8f 90       	pop	r8
    7506:	7f 90       	pop	r7
    7508:	6f 90       	pop	r6
    750a:	5f 90       	pop	r5
    750c:	4f 90       	pop	r4
    750e:	3f 90       	pop	r3
    7510:	2f 90       	pop	r2
    7512:	08 95       	ret

00007514 <initCalibration>:

void initCalibration() {

    unsigned int temp=0;
 
 	temp = eeprom_read_word((uint16_t*)CALIB_CHECK_ADDRESS);
    7514:	8a e6       	ldi	r24, 0x6A	; 106
    7516:	9f e0       	ldi	r25, 0x0F	; 15
    7518:	0e 94 35 57 	call	0xae6a	; 0xae6a <__eerd_word_m2560>

    if(temp==0xAA55) {   // valid odometry data saved in flash, read them
    751c:	2a ea       	ldi	r18, 0xAA	; 170
    751e:	85 35       	cpi	r24, 0x55	; 85
    7520:	92 07       	cpc	r25, r18
    7522:	19 f0       	breq	.+6      	; 0x752a <initCalibration+0x16>
        readCalibrationFromFlash();
    } else {
		writeDefaultCalibration();		
    7524:	0e 94 c9 38 	call	0x7192	; 0x7192 <writeDefaultCalibration>
    7528:	08 95       	ret
    unsigned int temp=0;
 
 	temp = eeprom_read_word((uint16_t*)CALIB_CHECK_ADDRESS);

    if(temp==0xAA55) {   // valid odometry data saved in flash, read them
        readCalibrationFromFlash();
    752a:	0e 94 9f 46 	call	0x8d3e	; 0x8d3e <readCalibrationFromFlash>
    752e:	08 95       	ret

00007530 <__vector_45>:
    }

}

// Motor left
ISR(TIMER4_OVF_vect) {
    7530:	1f 92       	push	r1
    7532:	0f 92       	push	r0
    7534:	0f b6       	in	r0, 0x3f	; 63
    7536:	0f 92       	push	r0
    7538:	11 24       	eor	r1, r1
    753a:	8f 93       	push	r24
    753c:	9f 93       	push	r25

//	LED_GREEN_ON;

	if(cliffDetectedFlag) {
    753e:	80 91 7e 04 	lds	r24, 0x047E
    7542:	88 23       	and	r24, r24
    7544:	61 f0       	breq	.+24     	; 0x755e <__vector_45+0x2e>
		pwm_left = 0;
    7546:	10 92 08 03 	sts	0x0308, r1
    754a:	10 92 07 03 	sts	0x0307, r1
		OCR4A = 0;
    754e:	10 92 a9 00 	sts	0x00A9, r1
    7552:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    7556:	10 92 ab 00 	sts	0x00AB, r1
    755a:	10 92 aa 00 	sts	0x00AA, r1
	}

	left_current_avg = 0;
    755e:	10 92 f2 02 	sts	0x02F2, r1
    7562:	10 92 f1 02 	sts	0x02F1, r1

	// set pins mode based on controller output
	if(pwm_left == 0) {
    7566:	80 91 07 03 	lds	r24, 0x0307
    756a:	90 91 08 03 	lds	r25, 0x0308
    756e:	00 97       	sbiw	r24, 0x00	; 0
    7570:	41 f5       	brne	.+80     	; 0x75c2 <__vector_45+0x92>


		//leftMotorPhase = NO_PHASE;
		//compute_left_vel = 1;

		if(pwm_left_desired_to_control >= 0) {
    7572:	80 91 fb 02 	lds	r24, 0x02FB
    7576:	90 91 fc 02 	lds	r25, 0x02FC
    757a:	97 fd       	sbrc	r25, 7
    757c:	69 c0       	rjmp	.+210    	; 0x7650 <__vector_45+0x120>
			leftMotorPhase = PASSIVE_PHASE;
    757e:	81 e0       	ldi	r24, 0x01	; 1
    7580:	80 93 38 02 	sts	0x0238, r24
			currentMotLeftChannel = 14;
    7584:	8e e0       	ldi	r24, 0x0E	; 14
    7586:	80 93 35 02 	sts	0x0235, r24
		} else {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 15;
		}
		firstSampleLeft = 1;
    758a:	81 e0       	ldi	r24, 0x01	; 1
    758c:	80 93 0a 02 	sts	0x020A, r24

		// select channel 15 to sample left current
		//currentMotLeftChannel = 15;
		TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    7590:	80 91 a0 00 	lds	r24, 0x00A0
    7594:	8f 75       	andi	r24, 0x5F	; 95
    7596:	80 93 a0 00 	sts	0x00A0, r24
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    759a:	80 91 02 01 	lds	r24, 0x0102
    759e:	87 7e       	andi	r24, 0xE7	; 231
    75a0:	80 93 02 01 	sts	0x0102, r24
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
    75a4:	80 91 72 00 	lds	r24, 0x0072
    75a8:	89 7f       	andi	r24, 0xF9	; 249
    75aa:	80 93 72 00 	sts	0x0072, r24
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
    75ae:	89 b3       	in	r24, 0x19	; 25
    75b0:	86 60       	ori	r24, 0x06	; 6
    75b2:	89 bb       	out	0x19, r24	; 25
	}
*/

//	LED_GREEN_OFF;

}
    75b4:	9f 91       	pop	r25
    75b6:	8f 91       	pop	r24
    75b8:	0f 90       	pop	r0
    75ba:	0f be       	out	0x3f, r0	; 63
    75bc:	0f 90       	pop	r0
    75be:	1f 90       	pop	r1
    75c0:	18 95       	reti
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
	} else if(pwm_left > 0) {   		// move forward
    75c2:	18 16       	cp	r1, r24
    75c4:	19 06       	cpc	r1, r25
    75c6:	2c f5       	brge	.+74     	; 0x7612 <__vector_45+0xe2>
		leftMotorPhase = ACTIVE_PHASE;
    75c8:	10 92 38 02 	sts	0x0238, r1
		// select channel 15 to sample left current
		currentMotLeftChannel = 15;
    75cc:	8f e0       	ldi	r24, 0x0F	; 15
    75ce:	80 93 35 02 	sts	0x0235, r24
		TCCR4A  &= ~(1 << COM4B1);		// disable OCB
    75d2:	80 91 a0 00 	lds	r24, 0x00A0
    75d6:	8f 7d       	andi	r24, 0xDF	; 223
    75d8:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
    75dc:	80 91 72 00 	lds	r24, 0x0072
    75e0:	8b 7f       	andi	r24, 0xFB	; 251
    75e2:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 4);				// output to 0
    75e6:	80 91 02 01 	lds	r24, 0x0102
    75ea:	8f 7e       	andi	r24, 0xEF	; 239
    75ec:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4A1);		// enable OCA
    75f0:	80 91 a0 00 	lds	r24, 0x00A0
    75f4:	80 68       	ori	r24, 0x80	; 128
    75f6:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
    75fa:	80 91 72 00 	lds	r24, 0x0072
    75fe:	82 60       	ori	r24, 0x02	; 2
    7600:	80 93 72 00 	sts	0x0072, r24
	}
*/

//	LED_GREEN_OFF;

}
    7604:	9f 91       	pop	r25
    7606:	8f 91       	pop	r24
    7608:	0f 90       	pop	r0
    760a:	0f be       	out	0x3f, r0	; 63
    760c:	0f 90       	pop	r0
    760e:	1f 90       	pop	r1
    7610:	18 95       	reti
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
		PORTH &= ~(1 << 4);				// output to 0
		TCCR4A |= (1 << COM4A1);		// enable OCA
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
	} else if(pwm_left < 0) {      		// move backward
		leftMotorPhase = ACTIVE_PHASE;
    7612:	10 92 38 02 	sts	0x0238, r1
		// select channel 14 to sample left current
		currentMotLeftChannel = 14;
    7616:	8e e0       	ldi	r24, 0x0E	; 14
    7618:	80 93 35 02 	sts	0x0235, r24
		TCCR4A  &= ~(1 << COM4A1);		// disable OCA
    761c:	80 91 a0 00 	lds	r24, 0x00A0
    7620:	8f 77       	andi	r24, 0x7F	; 127
    7622:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4A);		// disable OCA interrupt
    7626:	80 91 72 00 	lds	r24, 0x0072
    762a:	8d 7f       	andi	r24, 0xFD	; 253
    762c:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 3);				// output to 0
    7630:	80 91 02 01 	lds	r24, 0x0102
    7634:	87 7f       	andi	r24, 0xF7	; 247
    7636:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4B1);		// enable OCB
    763a:	80 91 a0 00 	lds	r24, 0x00A0
    763e:	80 62       	ori	r24, 0x20	; 32
    7640:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
    7644:	80 91 72 00 	lds	r24, 0x0072
    7648:	84 60       	ori	r24, 0x04	; 4
    764a:	80 93 72 00 	sts	0x0072, r24
    764e:	b2 cf       	rjmp	.-156    	; 0x75b4 <__vector_45+0x84>

		if(pwm_left_desired_to_control >= 0) {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 14;
		} else {
			leftMotorPhase = PASSIVE_PHASE;
    7650:	81 e0       	ldi	r24, 0x01	; 1
    7652:	80 93 38 02 	sts	0x0238, r24
			currentMotLeftChannel = 15;
    7656:	8f e0       	ldi	r24, 0x0F	; 15
    7658:	80 93 35 02 	sts	0x0235, r24
    765c:	96 cf       	rjmp	.-212    	; 0x758a <__vector_45+0x5a>

0000765e <__vector_42>:
//	LED_GREEN_OFF;

}

// motor left forward
ISR(TIMER4_COMPA_vect) {
    765e:	1f 92       	push	r1
    7660:	0f 92       	push	r0
    7662:	0f b6       	in	r0, 0x3f	; 63
    7664:	0f 92       	push	r0
    7666:	11 24       	eor	r1, r1
    7668:	8f 93       	push	r24
    766a:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    766c:	81 e0       	ldi	r24, 0x01	; 1
    766e:	80 93 38 02 	sts	0x0238, r24
	// select channel 14 to sample the left velocity
	currentMotLeftChannel = 14;
    7672:	9e e0       	ldi	r25, 0x0E	; 14
    7674:	90 93 35 02 	sts	0x0235, r25

	firstSampleLeft = 1;
    7678:	80 93 0a 02 	sts	0x020A, r24

//	LED_GREEN_OFF;

}
    767c:	9f 91       	pop	r25
    767e:	8f 91       	pop	r24
    7680:	0f 90       	pop	r0
    7682:	0f be       	out	0x3f, r0	; 63
    7684:	0f 90       	pop	r0
    7686:	1f 90       	pop	r1
    7688:	18 95       	reti

0000768a <__vector_43>:

// motor left backward
ISR(TIMER4_COMPB_vect) {
    768a:	1f 92       	push	r1
    768c:	0f 92       	push	r0
    768e:	0f b6       	in	r0, 0x3f	; 63
    7690:	0f 92       	push	r0
    7692:	11 24       	eor	r1, r1
    7694:	8f 93       	push	r24
    7696:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    7698:	81 e0       	ldi	r24, 0x01	; 1
    769a:	80 93 38 02 	sts	0x0238, r24
	// select channel 15 to sample the left velocity
	currentMotLeftChannel = 15;
    769e:	9f e0       	ldi	r25, 0x0F	; 15
    76a0:	90 93 35 02 	sts	0x0235, r25

	firstSampleLeft = 1;
    76a4:	80 93 0a 02 	sts	0x020A, r24

//	LED_GREEN_OFF;

}
    76a8:	9f 91       	pop	r25
    76aa:	8f 91       	pop	r24
    76ac:	0f 90       	pop	r0
    76ae:	0f be       	out	0x3f, r0	; 63
    76b0:	0f 90       	pop	r0
    76b2:	1f 90       	pop	r1
    76b4:	18 95       	reti

000076b6 <__vector_35>:

// Motor right
ISR(TIMER3_OVF_vect) {
    76b6:	1f 92       	push	r1
    76b8:	0f 92       	push	r0
    76ba:	0f b6       	in	r0, 0x3f	; 63
    76bc:	0f 92       	push	r0
    76be:	11 24       	eor	r1, r1
    76c0:	8f 93       	push	r24
    76c2:	9f 93       	push	r25

//	LED_GREEN_ON;

  	// PORTB ^= (1 << 7); // Toggle the LED

	if(cliffDetectedFlag) {
    76c4:	80 91 7e 04 	lds	r24, 0x047E
    76c8:	88 23       	and	r24, r24
    76ca:	61 f0       	breq	.+24     	; 0x76e4 <__vector_35+0x2e>
		pwm_right = 0;
    76cc:	10 92 06 03 	sts	0x0306, r1
    76d0:	10 92 05 03 	sts	0x0305, r1
		OCR3A = 0;
    76d4:	10 92 99 00 	sts	0x0099, r1
    76d8:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    76dc:	10 92 9b 00 	sts	0x009B, r1
    76e0:	10 92 9a 00 	sts	0x009A, r1
	}

	right_current_avg = 0;
    76e4:	10 92 f4 02 	sts	0x02F4, r1
    76e8:	10 92 f3 02 	sts	0x02F3, r1


	if(pwm_right == 0) {
    76ec:	80 91 05 03 	lds	r24, 0x0305
    76f0:	90 91 06 03 	lds	r25, 0x0306
    76f4:	00 97       	sbiw	r24, 0x00	; 0
    76f6:	31 f5       	brne	.+76     	; 0x7744 <__vector_35+0x8e>
		//firstSampleRight = 0;

		//rightMotorPhase = NO_PHASE;
		//compute_right_vel = 1;

		if(pwm_right_desired_to_control >= 0) {
    76f8:	80 91 f9 02 	lds	r24, 0x02F9
    76fc:	90 91 fa 02 	lds	r25, 0x02FA
    7700:	97 fd       	sbrc	r25, 7
    7702:	5f c0       	rjmp	.+190    	; 0x77c2 <__vector_35+0x10c>
			rightMotorPhase = PASSIVE_PHASE;
    7704:	81 e0       	ldi	r24, 0x01	; 1
    7706:	80 93 37 02 	sts	0x0237, r24
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
    770a:	8c e0       	ldi	r24, 0x0C	; 12
    770c:	80 93 36 02 	sts	0x0236, r24
		} else {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
		}
		firstSampleRight = 1;
    7710:	81 e0       	ldi	r24, 0x01	; 1
    7712:	80 93 09 02 	sts	0x0209, r24

		// select channel 13 to sample left current
		//currentMotRightChannel = 13;
		TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    7716:	80 91 90 00 	lds	r24, 0x0090
    771a:	8f 75       	andi	r24, 0x5F	; 95
    771c:	80 93 90 00 	sts	0x0090, r24
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    7720:	8e b1       	in	r24, 0x0e	; 14
    7722:	87 7e       	andi	r24, 0xE7	; 231
    7724:	8e b9       	out	0x0e, r24	; 14
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
    7726:	80 91 71 00 	lds	r24, 0x0071
    772a:	89 7f       	andi	r24, 0xF9	; 249
    772c:	80 93 71 00 	sts	0x0071, r24
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
    7730:	88 b3       	in	r24, 0x18	; 24
    7732:	86 60       	ori	r24, 0x06	; 6
    7734:	88 bb       	out	0x18, r24	; 24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    7736:	9f 91       	pop	r25
    7738:	8f 91       	pop	r24
    773a:	0f 90       	pop	r0
    773c:	0f be       	out	0x3f, r0	; 63
    773e:	0f 90       	pop	r0
    7740:	1f 90       	pop	r1
    7742:	18 95       	reti
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
	}else if(pwm_right > 0) {   		// move forward
    7744:	18 16       	cp	r1, r24
    7746:	19 06       	cpc	r1, r25
    7748:	0c f5       	brge	.+66     	; 0x778c <__vector_35+0xd6>
		rightMotorPhase = ACTIVE_PHASE;
    774a:	10 92 37 02 	sts	0x0237, r1
		// select channel 13 to sample left current
		currentMotRightChannel = 13;
    774e:	8d e0       	ldi	r24, 0x0D	; 13
    7750:	80 93 36 02 	sts	0x0236, r24
		TCCR3A  &= ~(1 << COM3B1);		// disable OCB
    7754:	80 91 90 00 	lds	r24, 0x0090
    7758:	8f 7d       	andi	r24, 0xDF	; 223
    775a:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
    775e:	80 91 71 00 	lds	r24, 0x0071
    7762:	8b 7f       	andi	r24, 0xFB	; 251
    7764:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 4);				// output to 0
    7768:	74 98       	cbi	0x0e, 4	; 14
		TCCR3A |= (1 << COM3A1);		// enable OCA
    776a:	80 91 90 00 	lds	r24, 0x0090
    776e:	80 68       	ori	r24, 0x80	; 128
    7770:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
    7774:	80 91 71 00 	lds	r24, 0x0071
    7778:	82 60       	ori	r24, 0x02	; 2
    777a:	80 93 71 00 	sts	0x0071, r24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    777e:	9f 91       	pop	r25
    7780:	8f 91       	pop	r24
    7782:	0f 90       	pop	r0
    7784:	0f be       	out	0x3f, r0	; 63
    7786:	0f 90       	pop	r0
    7788:	1f 90       	pop	r1
    778a:	18 95       	reti
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
		PORTE &= ~(1 << 4);				// output to 0
		TCCR3A |= (1 << COM3A1);		// enable OCA
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
	} else if(pwm_right < 0) {      	// move backward
		rightMotorPhase = ACTIVE_PHASE;
    778c:	10 92 37 02 	sts	0x0237, r1
		// select channel 12 to sample left current
		currentMotRightChannel = 12;
    7790:	8c e0       	ldi	r24, 0x0C	; 12
    7792:	80 93 36 02 	sts	0x0236, r24
		TCCR3A  &= ~(1 << COM3A1);		// disable OCA
    7796:	80 91 90 00 	lds	r24, 0x0090
    779a:	8f 77       	andi	r24, 0x7F	; 127
    779c:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3A);		// disable OCA interrupt
    77a0:	80 91 71 00 	lds	r24, 0x0071
    77a4:	8d 7f       	andi	r24, 0xFD	; 253
    77a6:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 3);				// output to 0
    77aa:	73 98       	cbi	0x0e, 3	; 14
		TCCR3A |= (1 << COM3B1);		// enable OCB
    77ac:	80 91 90 00 	lds	r24, 0x0090
    77b0:	80 62       	ori	r24, 0x20	; 32
    77b2:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3B);		// enable OCB interrupt
    77b6:	80 91 71 00 	lds	r24, 0x0071
    77ba:	84 60       	ori	r24, 0x04	; 4
    77bc:	80 93 71 00 	sts	0x0071, r24
    77c0:	ba cf       	rjmp	.-140    	; 0x7736 <__vector_35+0x80>
		if(pwm_right_desired_to_control >= 0) {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
		} else {
			rightMotorPhase = PASSIVE_PHASE;
    77c2:	81 e0       	ldi	r24, 0x01	; 1
    77c4:	80 93 37 02 	sts	0x0237, r24
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
    77c8:	8d e0       	ldi	r24, 0x0D	; 13
    77ca:	80 93 36 02 	sts	0x0236, r24
    77ce:	a0 cf       	rjmp	.-192    	; 0x7710 <__vector_35+0x5a>

000077d0 <__vector_32>:
//	LED_GREEN_OFF;

}

// motor right forward
ISR(TIMER3_COMPA_vect) {
    77d0:	1f 92       	push	r1
    77d2:	0f 92       	push	r0
    77d4:	0f b6       	in	r0, 0x3f	; 63
    77d6:	0f 92       	push	r0
    77d8:	11 24       	eor	r1, r1
    77da:	8f 93       	push	r24
    77dc:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    77de:	81 e0       	ldi	r24, 0x01	; 1
    77e0:	80 93 37 02 	sts	0x0237, r24
	// select channel 12 to sample the right velocity
	currentMotRightChannel = 12;
    77e4:	9c e0       	ldi	r25, 0x0C	; 12
    77e6:	90 93 36 02 	sts	0x0236, r25

	firstSampleRight = 1;
    77ea:	80 93 09 02 	sts	0x0209, r24

//	LED_RED_OFF;

}
    77ee:	9f 91       	pop	r25
    77f0:	8f 91       	pop	r24
    77f2:	0f 90       	pop	r0
    77f4:	0f be       	out	0x3f, r0	; 63
    77f6:	0f 90       	pop	r0
    77f8:	1f 90       	pop	r1
    77fa:	18 95       	reti

000077fc <__vector_33>:

// motor right backward
ISR(TIMER3_COMPB_vect) {
    77fc:	1f 92       	push	r1
    77fe:	0f 92       	push	r0
    7800:	0f b6       	in	r0, 0x3f	; 63
    7802:	0f 92       	push	r0
    7804:	11 24       	eor	r1, r1
    7806:	8f 93       	push	r24
    7808:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    780a:	81 e0       	ldi	r24, 0x01	; 1
    780c:	80 93 37 02 	sts	0x0237, r24
	// select channel 13 to sample the right velocity
	currentMotRightChannel = 13;
    7810:	9d e0       	ldi	r25, 0x0D	; 13
    7812:	90 93 36 02 	sts	0x0236, r25

	firstSampleRight = 1;
    7816:	80 93 09 02 	sts	0x0209, r24

//	LED_RED_OFF;
}
    781a:	9f 91       	pop	r25
    781c:	8f 91       	pop	r24
    781e:	0f 90       	pop	r0
    7820:	0f be       	out	0x3f, r0	; 63
    7822:	0f 90       	pop	r0
    7824:	1f 90       	pop	r1
    7826:	18 95       	reti

00007828 <initBehaviors>:

#include "behaviors.h"

void initBehaviors() {

	srand(TCNT3);	// initialize random seed (used in obstacle avoidance)
    7828:	80 91 94 00 	lds	r24, 0x0094
    782c:	90 91 95 00 	lds	r25, 0x0095
    7830:	0e 94 0b 57 	call	0xae16	; 0xae16 <srand>

}
    7834:	08 95       	ret

00007836 <obstacleAvoidance>:

void obstacleAvoidance(signed int *pwmLeft, signed int *pwmRight) {
    7836:	2f 92       	push	r2
    7838:	3f 92       	push	r3
    783a:	4f 92       	push	r4
    783c:	5f 92       	push	r5
    783e:	6f 92       	push	r6
    7840:	7f 92       	push	r7
    7842:	8f 92       	push	r8
    7844:	9f 92       	push	r9
    7846:	af 92       	push	r10
    7848:	bf 92       	push	r11
    784a:	cf 92       	push	r12
    784c:	df 92       	push	r13
    784e:	ef 92       	push	r14
    7850:	ff 92       	push	r15
    7852:	0f 93       	push	r16
    7854:	1f 93       	push	r17
    7856:	df 93       	push	r29
    7858:	cf 93       	push	r28
    785a:	cd b7       	in	r28, 0x3d	; 61
    785c:	de b7       	in	r29, 0x3e	; 62
    785e:	28 97       	sbiw	r28, 0x08	; 8
    7860:	0f b6       	in	r0, 0x3f	; 63
    7862:	f8 94       	cli
    7864:	de bf       	out	0x3e, r29	; 62
    7866:	0f be       	out	0x3f, r0	; 63
    7868:	cd bf       	out	0x3d, r28	; 61
    786a:	3c 01       	movw	r6, r24
    786c:	7a 83       	std	Y+2, r23	; 0x02
    786e:	69 83       	std	Y+1, r22	; 0x01
	//	y	0		0.5		1		0.5		0		-0.5	-1		-0.5

	unsigned int i=0;
	signed int long res=0;
	signed int sumSensorsX=0, sumSensorsY=0;
	signed int desL=*pwmLeft, desR=*pwmRight;
    7870:	fc 01       	movw	r30, r24
    7872:	01 90       	ld	r0, Z+
    7874:	f0 81       	ld	r31, Z
    7876:	e0 2d       	mov	r30, r0
    7878:	fc 83       	std	Y+4, r31	; 0x04
    787a:	eb 83       	std	Y+3, r30	; 0x03
    787c:	fb 01       	movw	r30, r22
    787e:	01 90       	ld	r0, Z+
    7880:	f0 81       	ld	r31, Z
    7882:	e0 2d       	mov	r30, r0
    7884:	fe 83       	std	Y+6, r31	; 0x06
    7886:	ed 83       	std	Y+5, r30	; 0x05

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    7888:	00 91 d1 02 	lds	r16, 0x02D1
    788c:	10 91 d2 02 	lds	r17, 0x02D2
    7890:	05 30       	cpi	r16, 0x05	; 5
    7892:	11 05       	cpc	r17, r1
    7894:	34 f4       	brge	.+12     	; 0x78a2 <obstacleAvoidance+0x6c>
			proximityResultLinear[i] = 0;
    7896:	10 92 d2 02 	sts	0x02D2, r1
    789a:	10 92 d1 02 	sts	0x02D1, r1
    789e:	00 e0       	ldi	r16, 0x00	; 0
    78a0:	10 e0       	ldi	r17, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    78a2:	60 91 d3 02 	lds	r22, 0x02D3
    78a6:	70 91 d4 02 	lds	r23, 0x02D4
    78aa:	65 30       	cpi	r22, 0x05	; 5
    78ac:	71 05       	cpc	r23, r1
    78ae:	34 f4       	brge	.+12     	; 0x78bc <obstacleAvoidance+0x86>
			proximityResultLinear[i] = 0;
    78b0:	10 92 d4 02 	sts	0x02D4, r1
    78b4:	10 92 d3 02 	sts	0x02D3, r1
    78b8:	60 e0       	ldi	r22, 0x00	; 0
    78ba:	70 e0       	ldi	r23, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    78bc:	80 91 d5 02 	lds	r24, 0x02D5
    78c0:	90 91 d6 02 	lds	r25, 0x02D6
    78c4:	85 30       	cpi	r24, 0x05	; 5
    78c6:	91 05       	cpc	r25, r1
    78c8:	24 f4       	brge	.+8      	; 0x78d2 <obstacleAvoidance+0x9c>
			proximityResultLinear[i] = 0;
    78ca:	10 92 d6 02 	sts	0x02D6, r1
    78ce:	10 92 d5 02 	sts	0x02D5, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    78d2:	40 91 d7 02 	lds	r20, 0x02D7
    78d6:	50 91 d8 02 	lds	r21, 0x02D8
    78da:	45 30       	cpi	r20, 0x05	; 5
    78dc:	51 05       	cpc	r21, r1
    78de:	34 f4       	brge	.+12     	; 0x78ec <obstacleAvoidance+0xb6>
			proximityResultLinear[i] = 0;
    78e0:	10 92 d8 02 	sts	0x02D8, r1
    78e4:	10 92 d7 02 	sts	0x02D7, r1
    78e8:	40 e0       	ldi	r20, 0x00	; 0
    78ea:	50 e0       	ldi	r21, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    78ec:	40 90 d9 02 	lds	r4, 0x02D9
    78f0:	50 90 da 02 	lds	r5, 0x02DA
    78f4:	f5 e0       	ldi	r31, 0x05	; 5
    78f6:	4f 16       	cp	r4, r31
    78f8:	51 04       	cpc	r5, r1
    78fa:	34 f4       	brge	.+12     	; 0x7908 <obstacleAvoidance+0xd2>
			proximityResultLinear[i] = 0;
    78fc:	10 92 da 02 	sts	0x02DA, r1
    7900:	10 92 d9 02 	sts	0x02D9, r1
    7904:	44 24       	eor	r4, r4
    7906:	55 24       	eor	r5, r5
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    7908:	20 91 db 02 	lds	r18, 0x02DB
    790c:	30 91 dc 02 	lds	r19, 0x02DC
    7910:	25 30       	cpi	r18, 0x05	; 5
    7912:	31 05       	cpc	r19, r1
    7914:	34 f4       	brge	.+12     	; 0x7922 <obstacleAvoidance+0xec>
			proximityResultLinear[i] = 0;
    7916:	10 92 dc 02 	sts	0x02DC, r1
    791a:	10 92 db 02 	sts	0x02DB, r1
    791e:	20 e0       	ldi	r18, 0x00	; 0
    7920:	30 e0       	ldi	r19, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    7922:	80 91 dd 02 	lds	r24, 0x02DD
    7926:	90 91 de 02 	lds	r25, 0x02DE
    792a:	85 30       	cpi	r24, 0x05	; 5
    792c:	91 05       	cpc	r25, r1
    792e:	24 f4       	brge	.+8      	; 0x7938 <obstacleAvoidance+0x102>
			proximityResultLinear[i] = 0;
    7930:	10 92 de 02 	sts	0x02DE, r1
    7934:	10 92 dd 02 	sts	0x02DD, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    7938:	80 91 df 02 	lds	r24, 0x02DF
    793c:	90 91 e0 02 	lds	r25, 0x02E0
    7940:	85 30       	cpi	r24, 0x05	; 5
    7942:	91 05       	cpc	r25, r1
    7944:	34 f4       	brge	.+12     	; 0x7952 <obstacleAvoidance+0x11c>
			proximityResultLinear[i] = 0;
    7946:	10 92 e0 02 	sts	0x02E0, r1
    794a:	10 92 df 02 	sts	0x02DF, r1
    794e:	80 e0       	ldi	r24, 0x00	; 0
    7950:	90 e0       	ldi	r25, 0x00	; 0
	}

	// sum the contribution of each sensor (based on the previous weights table);
	// give more weight to prox2 and prox6 (side proximities) in order to get more stability in narrow aisles;
	// add some noise to the sum in order to escape from dead-lock positions
	sumSensorsX = -proximityResultLinear[0] - (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) + proximityResultLinear[4] + (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + ((rand()%60)-30);
    7952:	10 95       	com	r17
    7954:	01 95       	neg	r16
    7956:	1f 4f       	sbci	r17, 0xFF	; 255
    7958:	5b 01       	movw	r10, r22
    795a:	b5 94       	asr	r11
    795c:	a7 94       	ror	r10
    795e:	7a 01       	movw	r14, r20
    7960:	f5 94       	asr	r15
    7962:	e7 94       	ror	r14
    7964:	69 01       	movw	r12, r18
    7966:	d5 94       	asr	r13
    7968:	c7 94       	ror	r12
    796a:	4c 01       	movw	r8, r24
    796c:	95 94       	asr	r9
    796e:	87 94       	ror	r8
    7970:	0e 94 06 57 	call	0xae0c	; 0xae0c <rand>
    7974:	92 01       	movw	r18, r4
    7976:	2e 51       	subi	r18, 0x1E	; 30
    7978:	30 40       	sbci	r19, 0x00	; 0
    797a:	20 0f       	add	r18, r16
    797c:	31 1f       	adc	r19, r17
    797e:	2e 0d       	add	r18, r14
    7980:	3f 1d       	adc	r19, r15
    7982:	2c 0d       	add	r18, r12
    7984:	3d 1d       	adc	r19, r13
    7986:	2a 19       	sub	r18, r10
    7988:	3b 09       	sbc	r19, r11
    798a:	28 19       	sub	r18, r8
    798c:	39 09       	sbc	r19, r9
    798e:	6c e3       	ldi	r22, 0x3C	; 60
    7990:	26 2e       	mov	r2, r22
    7992:	31 2c       	mov	r3, r1
    7994:	b1 01       	movw	r22, r2
    7996:	0e 94 68 56 	call	0xacd0	; 0xacd0 <__divmodhi4>
    799a:	28 0f       	add	r18, r24
    799c:	39 1f       	adc	r19, r25
    799e:	38 87       	std	Y+8, r19	; 0x08
    79a0:	2f 83       	std	Y+7, r18	; 0x07
	//sumSensorsX = -proximityResultLinear[0]  + proximityResultLinear[4];	
	sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[2]>>2) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[6]>>2) - (proximityResultLinear[7]>>1)+ ((rand()%60)-30);
    79a2:	e0 90 d3 02 	lds	r14, 0x02D3
    79a6:	f0 90 d4 02 	lds	r15, 0x02D4
    79aa:	f5 94       	asr	r15
    79ac:	e7 94       	ror	r14
    79ae:	00 91 d5 02 	lds	r16, 0x02D5
    79b2:	10 91 d6 02 	lds	r17, 0x02D6
    79b6:	15 95       	asr	r17
    79b8:	07 95       	ror	r16
    79ba:	15 95       	asr	r17
    79bc:	07 95       	ror	r16
    79be:	c0 90 d7 02 	lds	r12, 0x02D7
    79c2:	d0 90 d8 02 	lds	r13, 0x02D8
    79c6:	d5 94       	asr	r13
    79c8:	c7 94       	ror	r12
    79ca:	a0 90 db 02 	lds	r10, 0x02DB
    79ce:	b0 90 dc 02 	lds	r11, 0x02DC
    79d2:	b5 94       	asr	r11
    79d4:	a7 94       	ror	r10
    79d6:	40 90 dd 02 	lds	r4, 0x02DD
    79da:	50 90 de 02 	lds	r5, 0x02DE
    79de:	55 94       	asr	r5
    79e0:	47 94       	ror	r4
    79e2:	55 94       	asr	r5
    79e4:	47 94       	ror	r4
    79e6:	80 90 df 02 	lds	r8, 0x02DF
    79ea:	90 90 e0 02 	lds	r9, 0x02E0
    79ee:	95 94       	asr	r9
    79f0:	87 94       	ror	r8
    79f2:	0e 94 06 57 	call	0xae0c	; 0xae0c <rand>
    79f6:	97 01       	movw	r18, r14
    79f8:	20 0f       	add	r18, r16
    79fa:	31 1f       	adc	r19, r17
    79fc:	2e 51       	subi	r18, 0x1E	; 30
    79fe:	30 40       	sbci	r19, 0x00	; 0
    7a00:	2c 0d       	add	r18, r12
    7a02:	3d 1d       	adc	r19, r13
    7a04:	2a 19       	sub	r18, r10
    7a06:	3b 09       	sbc	r19, r11
    7a08:	28 19       	sub	r18, r8
    7a0a:	39 09       	sbc	r19, r9
    7a0c:	24 19       	sub	r18, r4
    7a0e:	35 09       	sbc	r19, r5
    7a10:	b1 01       	movw	r22, r2
    7a12:	0e 94 68 56 	call	0xacd0	; 0xacd0 <__divmodhi4>
    7a16:	28 0f       	add	r18, r24
    7a18:	39 1f       	adc	r19, r25
	//sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + (rand()%30);

	// modify the velocity components based on sensor values
	if(desL >= 0) {
    7a1a:	4b 81       	ldd	r20, Y+3	; 0x03
    7a1c:	5c 81       	ldd	r21, Y+4	; 0x04
    7a1e:	57 fd       	sbrc	r21, 7
    7a20:	e5 c0       	rjmp	.+458    	; 0x7bec <obstacleAvoidance+0x3b6>
		res = (signed long int)desL + (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
    7a22:	5a 01       	movw	r10, r20
    7a24:	cc 24       	eor	r12, r12
    7a26:	b7 fc       	sbrc	r11, 7
    7a28:	c0 94       	com	r12
    7a2a:	dc 2c       	mov	r13, r12
    7a2c:	8f 81       	ldd	r24, Y+7	; 0x07
    7a2e:	98 85       	ldd	r25, Y+8	; 0x08
    7a30:	1c 01       	movw	r2, r24
    7a32:	44 24       	eor	r4, r4
    7a34:	37 fc       	sbrc	r3, 7
    7a36:	40 94       	com	r4
    7a38:	54 2c       	mov	r5, r4
    7a3a:	79 01       	movw	r14, r18
    7a3c:	00 27       	eor	r16, r16
    7a3e:	f7 fc       	sbrc	r15, 7
    7a40:	00 95       	com	r16
    7a42:	10 2f       	mov	r17, r16
    7a44:	c2 01       	movw	r24, r4
    7a46:	b1 01       	movw	r22, r2
    7a48:	6e 19       	sub	r22, r14
    7a4a:	7f 09       	sbc	r23, r15
    7a4c:	80 0b       	sbc	r24, r16
    7a4e:	91 0b       	sbc	r25, r17
    7a50:	a6 01       	movw	r20, r12
    7a52:	95 01       	movw	r18, r10
    7a54:	0e 94 35 56 	call	0xac6a	; 0xac6a <__mulsi3>
    7a58:	b6 e0       	ldi	r27, 0x06	; 6
    7a5a:	95 95       	asr	r25
    7a5c:	87 95       	ror	r24
    7a5e:	77 95       	ror	r23
    7a60:	67 95       	ror	r22
    7a62:	ba 95       	dec	r27
    7a64:	d1 f7       	brne	.-12     	; 0x7a5a <obstacleAvoidance+0x224>
    7a66:	6a 0d       	add	r22, r10
    7a68:	7b 1d       	adc	r23, r11
    7a6a:	8c 1d       	adc	r24, r12
    7a6c:	9d 1d       	adc	r25, r13
		*pwmLeft = (signed int)res;
    7a6e:	f3 01       	movw	r30, r6
    7a70:	71 83       	std	Z+1, r23	; 0x01
    7a72:	60 83       	st	Z, r22
	} else {
		res = (signed long int)desL - (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
		*pwmLeft = (signed int)res;
	}
	if(desR >=0) {
    7a74:	2d 81       	ldd	r18, Y+5	; 0x05
    7a76:	3e 81       	ldd	r19, Y+6	; 0x06
    7a78:	37 fd       	sbrc	r19, 7
    7a7a:	97 c0       	rjmp	.+302    	; 0x7baa <obstacleAvoidance+0x374>
		res = (signed long int)desR + (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
    7a7c:	59 01       	movw	r10, r18
    7a7e:	cc 24       	eor	r12, r12
    7a80:	b7 fc       	sbrc	r11, 7
    7a82:	c0 94       	com	r12
    7a84:	dc 2c       	mov	r13, r12
    7a86:	c8 01       	movw	r24, r16
    7a88:	b7 01       	movw	r22, r14
    7a8a:	62 0d       	add	r22, r2
    7a8c:	73 1d       	adc	r23, r3
    7a8e:	84 1d       	adc	r24, r4
    7a90:	95 1d       	adc	r25, r5
    7a92:	a6 01       	movw	r20, r12
    7a94:	95 01       	movw	r18, r10
    7a96:	0e 94 35 56 	call	0xac6a	; 0xac6a <__mulsi3>
    7a9a:	f6 e0       	ldi	r31, 0x06	; 6
    7a9c:	95 95       	asr	r25
    7a9e:	87 95       	ror	r24
    7aa0:	77 95       	ror	r23
    7aa2:	67 95       	ror	r22
    7aa4:	fa 95       	dec	r31
    7aa6:	d1 f7       	brne	.-12     	; 0x7a9c <obstacleAvoidance+0x266>
    7aa8:	6a 0d       	add	r22, r10
    7aaa:	7b 1d       	adc	r23, r11
    7aac:	8c 1d       	adc	r24, r12
    7aae:	9d 1d       	adc	r25, r13
		*pwmRight = (signed int)res;
    7ab0:	9b 01       	movw	r18, r22
    7ab2:	e9 81       	ldd	r30, Y+1	; 0x01
    7ab4:	fa 81       	ldd	r31, Y+2	; 0x02
    7ab6:	71 83       	std	Z+1, r23	; 0x01
    7ab8:	60 83       	st	Z, r22
	} else {
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	}

	if(currentSelector == 10) {	// force a little bit the upwards direction in vertical motion
    7aba:	80 91 5c 04 	lds	r24, 0x045C
    7abe:	8a 30       	cpi	r24, 0x0A	; 10
    7ac0:	09 f4       	brne	.+2      	; 0x7ac4 <obstacleAvoidance+0x28e>
    7ac2:	4b c0       	rjmp	.+150    	; 0x7b5a <obstacleAvoidance+0x324>
			}
		}
	}

	// force the values to be in the pwm maximum range
	if (*pwmRight>(MAX_MOTORS_PWM/2)) *pwmRight=(MAX_MOTORS_PWM/2);
    7ac4:	f2 e0       	ldi	r31, 0x02	; 2
    7ac6:	21 30       	cpi	r18, 0x01	; 1
    7ac8:	3f 07       	cpc	r19, r31
    7aca:	44 f0       	brlt	.+16     	; 0x7adc <obstacleAvoidance+0x2a6>
    7acc:	80 e0       	ldi	r24, 0x00	; 0
    7ace:	92 e0       	ldi	r25, 0x02	; 2
    7ad0:	e9 81       	ldd	r30, Y+1	; 0x01
    7ad2:	fa 81       	ldd	r31, Y+2	; 0x02
    7ad4:	91 83       	std	Z+1, r25	; 0x01
    7ad6:	80 83       	st	Z, r24
    7ad8:	20 e0       	ldi	r18, 0x00	; 0
    7ada:	32 e0       	ldi	r19, 0x02	; 2
	if (*pwmLeft>(MAX_MOTORS_PWM/2)) *pwmLeft=(MAX_MOTORS_PWM/2);
    7adc:	f3 01       	movw	r30, r6
    7ade:	80 81       	ld	r24, Z
    7ae0:	91 81       	ldd	r25, Z+1	; 0x01
    7ae2:	f2 e0       	ldi	r31, 0x02	; 2
    7ae4:	81 30       	cpi	r24, 0x01	; 1
    7ae6:	9f 07       	cpc	r25, r31
    7ae8:	4c f0       	brlt	.+18     	; 0x7afc <obstacleAvoidance+0x2c6>
    7aea:	80 e0       	ldi	r24, 0x00	; 0
    7aec:	92 e0       	ldi	r25, 0x02	; 2
    7aee:	f3 01       	movw	r30, r6
    7af0:	91 83       	std	Z+1, r25	; 0x01
    7af2:	80 83       	st	Z, r24
    7af4:	e9 81       	ldd	r30, Y+1	; 0x01
    7af6:	fa 81       	ldd	r31, Y+2	; 0x02
    7af8:	20 81       	ld	r18, Z
    7afa:	31 81       	ldd	r19, Z+1	; 0x01
	if (*pwmRight<-(MAX_MOTORS_PWM/2)) *pwmRight=-(MAX_MOTORS_PWM/2);
    7afc:	fe ef       	ldi	r31, 0xFE	; 254
    7afe:	20 30       	cpi	r18, 0x00	; 0
    7b00:	3f 07       	cpc	r19, r31
    7b02:	4c f4       	brge	.+18     	; 0x7b16 <obstacleAvoidance+0x2e0>
    7b04:	80 e0       	ldi	r24, 0x00	; 0
    7b06:	9e ef       	ldi	r25, 0xFE	; 254
    7b08:	e9 81       	ldd	r30, Y+1	; 0x01
    7b0a:	fa 81       	ldd	r31, Y+2	; 0x02
    7b0c:	91 83       	std	Z+1, r25	; 0x01
    7b0e:	80 83       	st	Z, r24
    7b10:	f3 01       	movw	r30, r6
    7b12:	80 81       	ld	r24, Z
    7b14:	91 81       	ldd	r25, Z+1	; 0x01
	if (*pwmLeft<-(MAX_MOTORS_PWM/2)) *pwmLeft=-(MAX_MOTORS_PWM/2);
    7b16:	fe ef       	ldi	r31, 0xFE	; 254
    7b18:	80 30       	cpi	r24, 0x00	; 0
    7b1a:	9f 07       	cpc	r25, r31
    7b1c:	2c f4       	brge	.+10     	; 0x7b28 <obstacleAvoidance+0x2f2>
    7b1e:	80 e0       	ldi	r24, 0x00	; 0
    7b20:	9e ef       	ldi	r25, 0xFE	; 254
    7b22:	f3 01       	movw	r30, r6
    7b24:	91 83       	std	Z+1, r25	; 0x01
    7b26:	80 83       	st	Z, r24

}
    7b28:	28 96       	adiw	r28, 0x08	; 8
    7b2a:	0f b6       	in	r0, 0x3f	; 63
    7b2c:	f8 94       	cli
    7b2e:	de bf       	out	0x3e, r29	; 62
    7b30:	0f be       	out	0x3f, r0	; 63
    7b32:	cd bf       	out	0x3d, r28	; 61
    7b34:	cf 91       	pop	r28
    7b36:	df 91       	pop	r29
    7b38:	1f 91       	pop	r17
    7b3a:	0f 91       	pop	r16
    7b3c:	ff 90       	pop	r15
    7b3e:	ef 90       	pop	r14
    7b40:	df 90       	pop	r13
    7b42:	cf 90       	pop	r12
    7b44:	bf 90       	pop	r11
    7b46:	af 90       	pop	r10
    7b48:	9f 90       	pop	r9
    7b4a:	8f 90       	pop	r8
    7b4c:	7f 90       	pop	r7
    7b4e:	6f 90       	pop	r6
    7b50:	5f 90       	pop	r5
    7b52:	4f 90       	pop	r4
    7b54:	3f 90       	pop	r3
    7b56:	2f 90       	pop	r2
    7b58:	08 95       	ret
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	}

	if(currentSelector == 10) {	// force a little bit the upwards direction in vertical motion
		if(desL!=0 && desR!=0) {
    7b5a:	2b 81       	ldd	r18, Y+3	; 0x03
    7b5c:	3c 81       	ldd	r19, Y+4	; 0x04
    7b5e:	21 15       	cp	r18, r1
    7b60:	31 05       	cpc	r19, r1
    7b62:	f1 f0       	breq	.+60     	; 0x7ba0 <obstacleAvoidance+0x36a>
    7b64:	2d 81       	ldd	r18, Y+5	; 0x05
    7b66:	3e 81       	ldd	r19, Y+6	; 0x06
    7b68:	21 15       	cp	r18, r1
    7b6a:	31 05       	cpc	r19, r1
    7b6c:	c9 f0       	breq	.+50     	; 0x7ba0 <obstacleAvoidance+0x36a>
			if(currentAngle<270 && currentAngle>90) {
    7b6e:	80 91 4e 04 	lds	r24, 0x044E
    7b72:	90 91 4f 04 	lds	r25, 0x044F
    7b76:	8b 55       	subi	r24, 0x5B	; 91
    7b78:	90 40       	sbci	r25, 0x00	; 0
    7b7a:	83 3b       	cpi	r24, 0xB3	; 179
    7b7c:	91 05       	cpc	r25, r1
    7b7e:	08 f0       	brcs	.+2      	; 0x7b82 <obstacleAvoidance+0x34c>
    7b80:	5f c0       	rjmp	.+190    	; 0x7c40 <obstacleAvoidance+0x40a>
				*pwmLeft += 10;
    7b82:	f3 01       	movw	r30, r6
    7b84:	80 81       	ld	r24, Z
    7b86:	91 81       	ldd	r25, Z+1	; 0x01
    7b88:	0a 96       	adiw	r24, 0x0a	; 10
    7b8a:	91 83       	std	Z+1, r25	; 0x01
    7b8c:	80 83       	st	Z, r24
				*pwmRight -= 10;
    7b8e:	e9 81       	ldd	r30, Y+1	; 0x01
    7b90:	fa 81       	ldd	r31, Y+2	; 0x02
    7b92:	20 81       	ld	r18, Z
    7b94:	31 81       	ldd	r19, Z+1	; 0x01
    7b96:	2a 50       	subi	r18, 0x0A	; 10
    7b98:	30 40       	sbci	r19, 0x00	; 0
    7b9a:	31 83       	std	Z+1, r19	; 0x01
    7b9c:	20 83       	st	Z, r18
    7b9e:	92 cf       	rjmp	.-220    	; 0x7ac4 <obstacleAvoidance+0x28e>
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	}

	if(currentSelector == 10) {	// force a little bit the upwards direction in vertical motion
		if(desL!=0 && desR!=0) {
    7ba0:	e9 81       	ldd	r30, Y+1	; 0x01
    7ba2:	fa 81       	ldd	r31, Y+2	; 0x02
    7ba4:	20 81       	ld	r18, Z
    7ba6:	31 81       	ldd	r19, Z+1	; 0x01
    7ba8:	8d cf       	rjmp	.-230    	; 0x7ac4 <obstacleAvoidance+0x28e>
	}
	if(desR >=0) {
		res = (signed long int)desR + (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	} else {
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
    7baa:	59 01       	movw	r10, r18
    7bac:	cc 24       	eor	r12, r12
    7bae:	b7 fc       	sbrc	r11, 7
    7bb0:	c0 94       	com	r12
    7bb2:	dc 2c       	mov	r13, r12
    7bb4:	c2 01       	movw	r24, r4
    7bb6:	b1 01       	movw	r22, r2
    7bb8:	6e 19       	sub	r22, r14
    7bba:	7f 09       	sbc	r23, r15
    7bbc:	80 0b       	sbc	r24, r16
    7bbe:	91 0b       	sbc	r25, r17
    7bc0:	a6 01       	movw	r20, r12
    7bc2:	95 01       	movw	r18, r10
    7bc4:	0e 94 35 56 	call	0xac6a	; 0xac6a <__mulsi3>
    7bc8:	e6 e0       	ldi	r30, 0x06	; 6
    7bca:	95 95       	asr	r25
    7bcc:	87 95       	ror	r24
    7bce:	77 95       	ror	r23
    7bd0:	67 95       	ror	r22
    7bd2:	ea 95       	dec	r30
    7bd4:	d1 f7       	brne	.-12     	; 0x7bca <obstacleAvoidance+0x394>
    7bd6:	26 1b       	sub	r18, r22
    7bd8:	37 0b       	sbc	r19, r23
    7bda:	48 0b       	sbc	r20, r24
    7bdc:	59 0b       	sbc	r21, r25
    7bde:	da 01       	movw	r26, r20
    7be0:	c9 01       	movw	r24, r18
		*pwmRight = (signed int)res;
    7be2:	e9 81       	ldd	r30, Y+1	; 0x01
    7be4:	fa 81       	ldd	r31, Y+2	; 0x02
    7be6:	91 83       	std	Z+1, r25	; 0x01
    7be8:	80 83       	st	Z, r24
    7bea:	67 cf       	rjmp	.-306    	; 0x7aba <obstacleAvoidance+0x284>
	// modify the velocity components based on sensor values
	if(desL >= 0) {
		res = (signed long int)desL + (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmLeft = (signed int)res;
	} else {
		res = (signed long int)desL - (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
    7bec:	5a 01       	movw	r10, r20
    7bee:	cc 24       	eor	r12, r12
    7bf0:	b7 fc       	sbrc	r11, 7
    7bf2:	c0 94       	com	r12
    7bf4:	dc 2c       	mov	r13, r12
    7bf6:	8f 81       	ldd	r24, Y+7	; 0x07
    7bf8:	98 85       	ldd	r25, Y+8	; 0x08
    7bfa:	1c 01       	movw	r2, r24
    7bfc:	44 24       	eor	r4, r4
    7bfe:	37 fc       	sbrc	r3, 7
    7c00:	40 94       	com	r4
    7c02:	54 2c       	mov	r5, r4
    7c04:	79 01       	movw	r14, r18
    7c06:	00 27       	eor	r16, r16
    7c08:	f7 fc       	sbrc	r15, 7
    7c0a:	00 95       	com	r16
    7c0c:	10 2f       	mov	r17, r16
    7c0e:	c8 01       	movw	r24, r16
    7c10:	b7 01       	movw	r22, r14
    7c12:	62 0d       	add	r22, r2
    7c14:	73 1d       	adc	r23, r3
    7c16:	84 1d       	adc	r24, r4
    7c18:	95 1d       	adc	r25, r5
    7c1a:	a6 01       	movw	r20, r12
    7c1c:	95 01       	movw	r18, r10
    7c1e:	0e 94 35 56 	call	0xac6a	; 0xac6a <__mulsi3>
    7c22:	a6 e0       	ldi	r26, 0x06	; 6
    7c24:	95 95       	asr	r25
    7c26:	87 95       	ror	r24
    7c28:	77 95       	ror	r23
    7c2a:	67 95       	ror	r22
    7c2c:	aa 95       	dec	r26
    7c2e:	d1 f7       	brne	.-12     	; 0x7c24 <obstacleAvoidance+0x3ee>
    7c30:	26 1b       	sub	r18, r22
    7c32:	37 0b       	sbc	r19, r23
    7c34:	48 0b       	sbc	r20, r24
    7c36:	59 0b       	sbc	r21, r25
		*pwmLeft = (signed int)res;
    7c38:	f3 01       	movw	r30, r6
    7c3a:	31 83       	std	Z+1, r19	; 0x01
    7c3c:	20 83       	st	Z, r18
    7c3e:	1a cf       	rjmp	.-460    	; 0x7a74 <obstacleAvoidance+0x23e>
		if(desL!=0 && desR!=0) {
			if(currentAngle<270 && currentAngle>90) {
				*pwmLeft += 10;
				*pwmRight -= 10;
			} else {
				*pwmLeft -= 10;
    7c40:	f3 01       	movw	r30, r6
    7c42:	80 81       	ld	r24, Z
    7c44:	91 81       	ldd	r25, Z+1	; 0x01
    7c46:	0a 97       	sbiw	r24, 0x0a	; 10
    7c48:	91 83       	std	Z+1, r25	; 0x01
    7c4a:	80 83       	st	Z, r24
				*pwmRight += 10;
    7c4c:	e9 81       	ldd	r30, Y+1	; 0x01
    7c4e:	fa 81       	ldd	r31, Y+2	; 0x02
    7c50:	20 81       	ld	r18, Z
    7c52:	31 81       	ldd	r19, Z+1	; 0x01
    7c54:	26 5f       	subi	r18, 0xF6	; 246
    7c56:	3f 4f       	sbci	r19, 0xFF	; 255
    7c58:	31 83       	std	Z+1, r19	; 0x01
    7c5a:	20 83       	st	Z, r18
    7c5c:	33 cf       	rjmp	.-410    	; 0x7ac4 <obstacleAvoidance+0x28e>

00007c5e <cliffDetected>:


char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    7c5e:	80 91 79 02 	lds	r24, 0x0279
    7c62:	90 91 7a 02 	lds	r25, 0x027A
    7c66:	21 e0       	ldi	r18, 0x01	; 1
    7c68:	84 3a       	cpi	r24, 0xA4	; 164
    7c6a:	92 07       	cpc	r25, r18
    7c6c:	d4 f0       	brlt	.+52     	; 0x7ca2 <cliffDetected+0x44>
    7c6e:	80 91 7b 02 	lds	r24, 0x027B
    7c72:	90 91 7c 02 	lds	r25, 0x027C
    7c76:	21 e0       	ldi	r18, 0x01	; 1
    7c78:	84 3a       	cpi	r24, 0xA4	; 164
    7c7a:	92 07       	cpc	r25, r18
    7c7c:	94 f0       	brlt	.+36     	; 0x7ca2 <cliffDetected+0x44>
    7c7e:	80 91 7d 02 	lds	r24, 0x027D
    7c82:	90 91 7e 02 	lds	r25, 0x027E
    7c86:	21 e0       	ldi	r18, 0x01	; 1
    7c88:	84 3a       	cpi	r24, 0xA4	; 164
    7c8a:	92 07       	cpc	r25, r18
    7c8c:	74 f0       	brlt	.+28     	; 0x7caa <cliffDetected+0x4c>
	//if(proximityResult[8]<(proximityOffset[8]>>1) || proximityResult[9]<(proximityOffset[9]>>1) || proximityResult[10]<(proximityOffset[10]>>1) || proximityResult[11]<(proximityOffset[11]>>1)) {
		return 1;
    7c8e:	81 e0       	ldi	r24, 0x01	; 1
    7c90:	20 91 7f 02 	lds	r18, 0x027F
    7c94:	30 91 80 02 	lds	r19, 0x0280
    7c98:	91 e0       	ldi	r25, 0x01	; 1
    7c9a:	24 3a       	cpi	r18, 0xA4	; 164
    7c9c:	39 07       	cpc	r19, r25
    7c9e:	1c f4       	brge	.+6      	; 0x7ca6 <cliffDetected+0x48>
	} else {
		return 0;
	}


}
    7ca0:	08 95       	ret
char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
	//if(proximityResult[8]<(proximityOffset[8]>>1) || proximityResult[9]<(proximityOffset[9]>>1) || proximityResult[10]<(proximityOffset[10]>>1) || proximityResult[11]<(proximityOffset[11]>>1)) {
		return 1;
    7ca2:	81 e0       	ldi	r24, 0x01	; 1
    7ca4:	08 95       	ret
    7ca6:	80 e0       	ldi	r24, 0x00	; 0
    7ca8:	08 95       	ret
    7caa:	81 e0       	ldi	r24, 0x01	; 1
	} else {
		return 0;
	}


}
    7cac:	08 95       	ret

00007cae <enableObstacleAvoidance>:

void enableObstacleAvoidance() {
	obstacleAvoidanceEnabled=1;
    7cae:	81 e0       	ldi	r24, 0x01	; 1
    7cb0:	80 93 7c 04 	sts	0x047C, r24
}
    7cb4:	08 95       	ret

00007cb6 <disableObstacleAvoidance>:

void disableObstacleAvoidance() {
	obstacleAvoidanceEnabled=0;
    7cb6:	10 92 7c 04 	sts	0x047C, r1
}
    7cba:	08 95       	ret

00007cbc <enableCliffAvoidance>:

void enableCliffAvoidance() {
	cliffAvoidanceEnabled=1;
    7cbc:	81 e0       	ldi	r24, 0x01	; 1
    7cbe:	80 93 7d 04 	sts	0x047D, r24
}
    7cc2:	08 95       	ret

00007cc4 <disableCliffAvoidance>:

void disableCliffAvoidance() {
	cliffAvoidanceEnabled=0;
    7cc4:	10 92 7d 04 	sts	0x047D, r1
}
    7cc8:	08 95       	ret

00007cca <initRGBleds>:
	// Period freq = Fosc/TOP (max timer value) => TOP = Fosc/period freq
	// We need a frequency of about 30 KHz => 8000000/30000 = 266
	// The waveform generation mode let us chose the TOP value to be 256
	// thus we get period freq = 8000000/256 = 31250 Hz

	TCCR1A = 0;
    7cca:	a0 e8       	ldi	r26, 0x80	; 128
    7ccc:	b0 e0       	ldi	r27, 0x00	; 0
    7cce:	1c 92       	st	X, r1
	TCCR1B = 0;
    7cd0:	e1 e8       	ldi	r30, 0x81	; 129
    7cd2:	f0 e0       	ldi	r31, 0x00	; 0
    7cd4:	10 82       	st	Z, r1

	// enable OCA, OCB, OCC; clear on match, set at bottom
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << COM1C1) | (1 << WGM10); 	
    7cd6:	8c 91       	ld	r24, X
    7cd8:	89 6a       	ori	r24, 0xA9	; 169
    7cda:	8c 93       	st	X, r24
	// mode 5 => fast-pwm 8 bit; no prescaler
	TCCR1B |= (1 << WGM12) | (1 << CS10);										
    7cdc:	80 81       	ld	r24, Z
    7cde:	89 60       	ori	r24, 0x09	; 9
    7ce0:	80 83       	st	Z, r24
	// the values for the leds pwm goes from 0 (max power on) to 255 (off)
	OCR1A = pwm_red;
    7ce2:	80 91 0c 02 	lds	r24, 0x020C
    7ce6:	90 e0       	ldi	r25, 0x00	; 0
    7ce8:	90 93 89 00 	sts	0x0089, r25
    7cec:	80 93 88 00 	sts	0x0088, r24
	OCR1B = pwm_green;
    7cf0:	80 91 0d 02 	lds	r24, 0x020D
    7cf4:	90 e0       	ldi	r25, 0x00	; 0
    7cf6:	90 93 8b 00 	sts	0x008B, r25
    7cfa:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = pwm_blue;
    7cfe:	80 91 0e 02 	lds	r24, 0x020E
    7d02:	90 e0       	ldi	r25, 0x00	; 0
    7d04:	90 93 8d 00 	sts	0x008D, r25
    7d08:	80 93 8c 00 	sts	0x008C, r24

}
    7d0c:	08 95       	ret

00007d0e <toggleBlueLed>:

void toggleBlueLed() {

	blinkState = 1 - blinkState;
    7d0e:	81 e0       	ldi	r24, 0x01	; 1
    7d10:	90 91 2b 03 	lds	r25, 0x032B
    7d14:	89 1b       	sub	r24, r25
    7d16:	80 93 2b 03 	sts	0x032B, r24

	if(blinkState) {
    7d1a:	88 23       	and	r24, r24
    7d1c:	39 f4       	brne	.+14     	; 0x7d2c <toggleBlueLed+0x1e>
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
		OCR1C = 255;
	} else {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC to get the maximum output power; this is due to the fact 
    7d1e:	80 91 80 00 	lds	r24, 0x0080
    7d22:	87 7f       	andi	r24, 0xF7	; 247
    7d24:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// that the minimum duty cycle when the output compare is enable is 1 
    7d28:	2f 98       	cbi	0x05, 7	; 5
    7d2a:	08 95       	ret
void toggleBlueLed() {

	blinkState = 1 - blinkState;

	if(blinkState) {
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
    7d2c:	80 91 80 00 	lds	r24, 0x0080
    7d30:	88 60       	ori	r24, 0x08	; 8
    7d32:	80 93 80 00 	sts	0x0080, r24
		OCR1C = 255;
    7d36:	8f ef       	ldi	r24, 0xFF	; 255
    7d38:	90 e0       	ldi	r25, 0x00	; 0
    7d3a:	90 93 8d 00 	sts	0x008D, r25
    7d3e:	80 93 8c 00 	sts	0x008C, r24
    7d42:	08 95       	ret

00007d44 <updateRedLed>:

}

void updateRedLed(unsigned char value) {

	if(value == 0) {
    7d44:	88 23       	and	r24, r24
    7d46:	59 f0       	breq	.+22     	; 0x7d5e <updateRedLed+0x1a>
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1A1);	// always enable OCA in case it was disabled
    7d48:	90 91 80 00 	lds	r25, 0x0080
    7d4c:	90 68       	ori	r25, 0x80	; 128
    7d4e:	90 93 80 00 	sts	0x0080, r25
		OCR1A = value;
    7d52:	90 e0       	ldi	r25, 0x00	; 0
    7d54:	90 93 89 00 	sts	0x0089, r25
    7d58:	80 93 88 00 	sts	0x0088, r24
    7d5c:	08 95       	ret
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
    7d5e:	80 91 80 00 	lds	r24, 0x0080
    7d62:	8f 77       	andi	r24, 0x7F	; 127
    7d64:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
    7d68:	2d 98       	cbi	0x05, 5	; 5
    7d6a:	08 95       	ret

00007d6c <updateGreenLed>:

}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
    7d6c:	88 23       	and	r24, r24
    7d6e:	59 f0       	breq	.+22     	; 0x7d86 <updateGreenLed+0x1a>
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
	} else {	
		TCCR1A |= (1 << COM1B1);	// always enable OCA in case it was disabled
    7d70:	90 91 80 00 	lds	r25, 0x0080
    7d74:	90 62       	ori	r25, 0x20	; 32
    7d76:	90 93 80 00 	sts	0x0080, r25
		OCR1B = value;
    7d7a:	90 e0       	ldi	r25, 0x00	; 0
    7d7c:	90 93 8b 00 	sts	0x008B, r25
    7d80:	80 93 8a 00 	sts	0x008A, r24
    7d84:	08 95       	ret
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
    7d86:	80 91 80 00 	lds	r24, 0x0080
    7d8a:	8f 7d       	andi	r24, 0xDF	; 223
    7d8c:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
    7d90:	2e 98       	cbi	0x05, 6	; 5
    7d92:	08 95       	ret

00007d94 <updateBlueLed>:

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
    7d94:	88 23       	and	r24, r24
    7d96:	59 f0       	breq	.+22     	; 0x7dae <updateBlueLed+0x1a>
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1C1);	// always enable OCA in case it was disabled
    7d98:	90 91 80 00 	lds	r25, 0x0080
    7d9c:	98 60       	ori	r25, 0x08	; 8
    7d9e:	90 93 80 00 	sts	0x0080, r25
		OCR1C = value;
    7da2:	90 e0       	ldi	r25, 0x00	; 0
    7da4:	90 93 8d 00 	sts	0x008D, r25
    7da8:	80 93 8c 00 	sts	0x008C, r24
    7dac:	08 95       	ret
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
    7dae:	80 91 80 00 	lds	r24, 0x0080
    7db2:	87 7f       	andi	r24, 0xF7	; 247
    7db4:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
    7db8:	2f 98       	cbi	0x05, 7	; 5
    7dba:	08 95       	ret

00007dbc <setGreenLed>:

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    7dbc:	83 30       	cpi	r24, 0x03	; 3
    7dbe:	09 f4       	brne	.+2      	; 0x7dc2 <setGreenLed+0x6>
    7dc0:	5a c0       	rjmp	.+180    	; 0x7e76 <setGreenLed+0xba>
    7dc2:	84 30       	cpi	r24, 0x04	; 4
    7dc4:	80 f0       	brcs	.+32     	; 0x7de6 <setGreenLed+0x2a>
    7dc6:	85 30       	cpi	r24, 0x05	; 5
    7dc8:	09 f4       	brne	.+2      	; 0x7dcc <setGreenLed+0x10>
    7dca:	41 c0       	rjmp	.+130    	; 0x7e4e <setGreenLed+0x92>
    7dcc:	85 30       	cpi	r24, 0x05	; 5
    7dce:	d0 f4       	brcc	.+52     	; 0x7e04 <setGreenLed+0x48>
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
    7dd0:	66 23       	and	r22, r22
    7dd2:	09 f4       	brne	.+2      	; 0x7dd6 <setGreenLed+0x1a>
    7dd4:	68 c0       	rjmp	.+208    	; 0x7ea6 <setGreenLed+0xea>
    7dd6:	80 91 0b 01 	lds	r24, 0x010B
    7dda:	8f 7e       	andi	r24, 0xEF	; 239
    7ddc:	80 93 0b 01 	sts	0x010B, r24
    7de0:	80 91 0b 01 	lds	r24, 0x010B
    7de4:	08 95       	ret

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    7de6:	81 30       	cpi	r24, 0x01	; 1
    7de8:	e1 f1       	breq	.+120    	; 0x7e62 <setGreenLed+0xa6>
    7dea:	82 30       	cpi	r24, 0x02	; 2
    7dec:	80 f0       	brcs	.+32     	; 0x7e0e <setGreenLed+0x52>
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
    7dee:	66 23       	and	r22, r22
    7df0:	09 f4       	brne	.+2      	; 0x7df4 <setGreenLed+0x38>
    7df2:	46 c0       	rjmp	.+140    	; 0x7e80 <setGreenLed+0xc4>
    7df4:	80 91 0b 01 	lds	r24, 0x010B
    7df8:	8b 7f       	andi	r24, 0xFB	; 251
    7dfa:	80 93 0b 01 	sts	0x010B, r24
    7dfe:	80 91 0b 01 	lds	r24, 0x010B
    7e02:	08 95       	ret

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    7e04:	86 30       	cpi	r24, 0x06	; 6
    7e06:	c9 f0       	breq	.+50     	; 0x7e3a <setGreenLed+0x7e>
    7e08:	87 30       	cpi	r24, 0x07	; 7
    7e0a:	61 f0       	breq	.+24     	; 0x7e24 <setGreenLed+0x68>
    7e0c:	08 95       	ret

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
    7e0e:	66 23       	and	r22, r22
    7e10:	09 f4       	brne	.+2      	; 0x7e14 <setGreenLed+0x58>
    7e12:	51 c0       	rjmp	.+162    	; 0x7eb6 <setGreenLed+0xfa>
    7e14:	80 91 0b 01 	lds	r24, 0x010B
    7e18:	8e 7f       	andi	r24, 0xFE	; 254
    7e1a:	80 93 0b 01 	sts	0x010B, r24
    7e1e:	80 91 0b 01 	lds	r24, 0x010B
    7e22:	08 95       	ret
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
				break;

		case 7:	isOn?GREEN_LED7_ON:GREEN_LED7_OFF;
    7e24:	66 23       	and	r22, r22
    7e26:	09 f0       	breq	.+2      	; 0x7e2a <setGreenLed+0x6e>
    7e28:	5e c0       	rjmp	.+188    	; 0x7ee6 <setGreenLed+0x12a>
    7e2a:	80 91 0b 01 	lds	r24, 0x010B
    7e2e:	80 68       	ori	r24, 0x80	; 128
    7e30:	80 93 0b 01 	sts	0x010B, r24
    7e34:	80 91 0b 01 	lds	r24, 0x010B
    7e38:	08 95       	ret
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
    7e3a:	66 23       	and	r22, r22
    7e3c:	49 f1       	breq	.+82     	; 0x7e90 <setGreenLed+0xd4>
    7e3e:	80 91 0b 01 	lds	r24, 0x010B
    7e42:	8f 7b       	andi	r24, 0xBF	; 191
    7e44:	80 93 0b 01 	sts	0x010B, r24
    7e48:	80 91 0b 01 	lds	r24, 0x010B
    7e4c:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
    7e4e:	66 23       	and	r22, r22
    7e50:	d1 f1       	breq	.+116    	; 0x7ec6 <setGreenLed+0x10a>
    7e52:	80 91 0b 01 	lds	r24, 0x010B
    7e56:	8f 7d       	andi	r24, 0xDF	; 223
    7e58:	80 93 0b 01 	sts	0x010B, r24
    7e5c:	80 91 0b 01 	lds	r24, 0x010B
    7e60:	08 95       	ret
	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
    7e62:	66 23       	and	r22, r22
    7e64:	c1 f1       	breq	.+112    	; 0x7ed6 <setGreenLed+0x11a>
    7e66:	80 91 0b 01 	lds	r24, 0x010B
    7e6a:	8d 7f       	andi	r24, 0xFD	; 253
    7e6c:	80 93 0b 01 	sts	0x010B, r24
    7e70:	80 91 0b 01 	lds	r24, 0x010B
    7e74:	08 95       	ret
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
    7e76:	66 23       	and	r22, r22
    7e78:	99 f0       	breq	.+38     	; 0x7ea0 <setGreenLed+0xe4>
    7e7a:	a3 98       	cbi	0x14, 3	; 20
    7e7c:	84 b3       	in	r24, 0x14	; 20
    7e7e:	08 95       	ret
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
    7e80:	80 91 0b 01 	lds	r24, 0x010B
    7e84:	84 60       	ori	r24, 0x04	; 4
    7e86:	80 93 0b 01 	sts	0x010B, r24
    7e8a:	80 91 0b 01 	lds	r24, 0x010B
    7e8e:	08 95       	ret
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
    7e90:	80 91 0b 01 	lds	r24, 0x010B
    7e94:	80 64       	ori	r24, 0x40	; 64
    7e96:	80 93 0b 01 	sts	0x010B, r24
    7e9a:	80 91 0b 01 	lds	r24, 0x010B
    7e9e:	08 95       	ret
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
    7ea0:	a3 9a       	sbi	0x14, 3	; 20
    7ea2:	84 b3       	in	r24, 0x14	; 20
    7ea4:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
    7ea6:	80 91 0b 01 	lds	r24, 0x010B
    7eaa:	80 61       	ori	r24, 0x10	; 16
    7eac:	80 93 0b 01 	sts	0x010B, r24
    7eb0:	80 91 0b 01 	lds	r24, 0x010B
    7eb4:	08 95       	ret

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
    7eb6:	80 91 0b 01 	lds	r24, 0x010B
    7eba:	81 60       	ori	r24, 0x01	; 1
    7ebc:	80 93 0b 01 	sts	0x010B, r24
    7ec0:	80 91 0b 01 	lds	r24, 0x010B
    7ec4:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
    7ec6:	80 91 0b 01 	lds	r24, 0x010B
    7eca:	80 62       	ori	r24, 0x20	; 32
    7ecc:	80 93 0b 01 	sts	0x010B, r24
    7ed0:	80 91 0b 01 	lds	r24, 0x010B
    7ed4:	08 95       	ret
	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
    7ed6:	80 91 0b 01 	lds	r24, 0x010B
    7eda:	82 60       	ori	r24, 0x02	; 2
    7edc:	80 93 0b 01 	sts	0x010B, r24
    7ee0:	80 91 0b 01 	lds	r24, 0x010B
    7ee4:	08 95       	ret
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
				break;

		case 7:	isOn?GREEN_LED7_ON:GREEN_LED7_OFF;
    7ee6:	80 91 0b 01 	lds	r24, 0x010B
    7eea:	8f 77       	andi	r24, 0x7F	; 127
    7eec:	80 93 0b 01 	sts	0x010B, r24
    7ef0:	80 91 0b 01 	lds	r24, 0x010B
    7ef4:	08 95       	ret

00007ef6 <turnOffGreenLeds>:

}

void turnOffGreenLeds() {

	GREEN_LED0_OFF;
    7ef6:	eb e0       	ldi	r30, 0x0B	; 11
    7ef8:	f1 e0       	ldi	r31, 0x01	; 1
    7efa:	80 81       	ld	r24, Z
    7efc:	81 60       	ori	r24, 0x01	; 1
    7efe:	80 83       	st	Z, r24
	GREEN_LED1_OFF;
    7f00:	80 81       	ld	r24, Z
    7f02:	82 60       	ori	r24, 0x02	; 2
    7f04:	80 83       	st	Z, r24
	GREEN_LED2_OFF;
    7f06:	80 81       	ld	r24, Z
    7f08:	84 60       	ori	r24, 0x04	; 4
    7f0a:	80 83       	st	Z, r24
	GREEN_LED3_OFF;
    7f0c:	a3 9a       	sbi	0x14, 3	; 20
	GREEN_LED4_OFF;
    7f0e:	80 81       	ld	r24, Z
    7f10:	80 61       	ori	r24, 0x10	; 16
    7f12:	80 83       	st	Z, r24
	GREEN_LED5_OFF;
    7f14:	80 81       	ld	r24, Z
    7f16:	80 62       	ori	r24, 0x20	; 32
    7f18:	80 83       	st	Z, r24
	GREEN_LED6_OFF;
    7f1a:	80 81       	ld	r24, Z
    7f1c:	80 64       	ori	r24, 0x40	; 64
    7f1e:	80 83       	st	Z, r24
	GREEN_LED7_OFF;
    7f20:	80 81       	ld	r24, Z
    7f22:	80 68       	ori	r24, 0x80	; 128
    7f24:	80 83       	st	Z, r24

}
    7f26:	08 95       	ret

00007f28 <turnOnGreenLeds>:


void turnOnGreenLeds() {

	GREEN_LED0_ON;
    7f28:	eb e0       	ldi	r30, 0x0B	; 11
    7f2a:	f1 e0       	ldi	r31, 0x01	; 1
    7f2c:	80 81       	ld	r24, Z
    7f2e:	8e 7f       	andi	r24, 0xFE	; 254
    7f30:	80 83       	st	Z, r24
	GREEN_LED1_ON;
    7f32:	80 81       	ld	r24, Z
    7f34:	8d 7f       	andi	r24, 0xFD	; 253
    7f36:	80 83       	st	Z, r24
	GREEN_LED2_ON;
    7f38:	80 81       	ld	r24, Z
    7f3a:	8b 7f       	andi	r24, 0xFB	; 251
    7f3c:	80 83       	st	Z, r24
	GREEN_LED3_ON;
    7f3e:	a3 98       	cbi	0x14, 3	; 20
	GREEN_LED4_ON;
    7f40:	80 81       	ld	r24, Z
    7f42:	8f 7e       	andi	r24, 0xEF	; 239
    7f44:	80 83       	st	Z, r24
	GREEN_LED5_ON;
    7f46:	80 81       	ld	r24, Z
    7f48:	8f 7d       	andi	r24, 0xDF	; 223
    7f4a:	80 83       	st	Z, r24
	GREEN_LED6_ON;
    7f4c:	80 81       	ld	r24, Z
    7f4e:	8f 7b       	andi	r24, 0xBF	; 191
    7f50:	80 83       	st	Z, r24
	GREEN_LED7_ON;
    7f52:	80 81       	ld	r24, Z
    7f54:	8f 77       	andi	r24, 0x7F	; 127
    7f56:	80 83       	st	Z, r24

}
    7f58:	08 95       	ret

00007f5a <initAccelerometer>:

void initAccelerometer() {

	unsigned char ret;

	i2c_init();		// init I2C bus
    7f5a:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <i2c_init>
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7f5e:	80 91 14 02 	lds	r24, 0x0214
    7f62:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    7f66:	88 23       	and	r24, r24
    7f68:	49 f4       	brne	.+18     	; 0x7f7c <initAccelerometer+0x22>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    7f6a:	86 e1       	ldi	r24, 0x16	; 22
    7f6c:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    7f70:	85 e4       	ldi	r24, 0x45	; 69
    7f72:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    7f76:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <i2c_stop>
    7f7a:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    7f7c:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <i2c_stop>
	i2c_init();		// init I2C bus

	ret = initMMA7455L();

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
    7f80:	86 ea       	ldi	r24, 0xA6	; 166
    7f82:	90 e0       	ldi	r25, 0x00	; 0
    7f84:	90 93 15 02 	sts	0x0215, r25
    7f88:	80 93 14 02 	sts	0x0214, r24
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7f8c:	86 ea       	ldi	r24, 0xA6	; 166
    7f8e:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    7f92:	88 23       	and	r24, r24
    7f94:	41 f5       	brne	.+80     	; 0x7fe6 <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    7f96:	8d e2       	ldi	r24, 0x2D	; 45
    7f98:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <i2c_write>
        i2c_write(0x08);	// measurement mode
    7f9c:	88 e0       	ldi	r24, 0x08	; 8
    7f9e:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    7fa2:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7fa6:	80 91 14 02 	lds	r24, 0x0214
    7faa:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    7fae:	88 23       	and	r24, r24
    7fb0:	d1 f4       	brne	.+52     	; 0x7fe6 <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    7fb2:	81 e3       	ldi	r24, 0x31	; 49
    7fb4:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    7fb8:	80 e0       	ldi	r24, 0x00	; 0
    7fba:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    7fbe:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7fc2:	80 91 14 02 	lds	r24, 0x0214
    7fc6:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    7fca:	88 23       	and	r24, r24
    7fcc:	61 f4       	brne	.+24     	; 0x7fe6 <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    7fce:	8c e2       	ldi	r24, 0x2C	; 44
    7fd0:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    7fd4:	89 e0       	ldi	r24, 0x09	; 9
    7fd6:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    7fda:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <i2c_stop>
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
		} else {
			useAccel = USE_ADXL345;
    7fde:	81 e0       	ldi	r24, 0x01	; 1
    7fe0:	80 93 3b 04 	sts	0x043B, r24
    7fe4:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    7fe6:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <i2c_stop>

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
    7fea:	82 e0       	ldi	r24, 0x02	; 2
    7fec:	80 93 3b 04 	sts	0x043B, r24
    7ff0:	08 95       	ret

00007ff2 <initMMA7455L>:
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7ff2:	80 91 14 02 	lds	r24, 0x0214
    7ff6:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    7ffa:	88 23       	and	r24, r24
    7ffc:	51 f4       	brne	.+20     	; 0x8012 <initMMA7455L+0x20>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    7ffe:	86 e1       	ldi	r24, 0x16	; 22
    8000:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    8004:	85 e4       	ldi	r24, 0x45	; 69
    8006:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    800a:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <i2c_stop>
    }

	return 0;				// configuration ok
    800e:	80 e0       	ldi	r24, 0x00	; 0

}
    8010:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    8012:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <i2c_stop>
		return 1;
    8016:	81 e0       	ldi	r24, 0x01	; 1
    8018:	08 95       	ret

0000801a <initADXL345>:
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    801a:	80 91 14 02 	lds	r24, 0x0214
    801e:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    8022:	88 23       	and	r24, r24
    8024:	31 f5       	brne	.+76     	; 0x8072 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    8026:	8d e2       	ldi	r24, 0x2D	; 45
    8028:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <i2c_write>
        i2c_write(0x08);	// measurement mode
    802c:	88 e0       	ldi	r24, 0x08	; 8
    802e:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    8032:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    8036:	80 91 14 02 	lds	r24, 0x0214
    803a:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    803e:	88 23       	and	r24, r24
    8040:	c1 f4       	brne	.+48     	; 0x8072 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    8042:	81 e3       	ldi	r24, 0x31	; 49
    8044:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    8048:	80 e0       	ldi	r24, 0x00	; 0
    804a:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    804e:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    8052:	80 91 14 02 	lds	r24, 0x0214
    8056:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    805a:	88 23       	and	r24, r24
    805c:	51 f4       	brne	.+20     	; 0x8072 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    805e:	8c e2       	ldi	r24, 0x2C	; 44
    8060:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    8064:	89 e0       	ldi	r24, 0x09	; 9
    8066:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    806a:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <i2c_stop>
    }

	return 0;
    806e:	80 e0       	ldi	r24, 0x00	; 0

}
    8070:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    8072:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <i2c_stop>
		return 1;
    8076:	81 e0       	ldi	r24, 0x01	; 1
    8078:	08 95       	ret

0000807a <readAccelXY>:

	return 0;

}

void readAccelXY() {
    807a:	ff 92       	push	r15
    807c:	0f 93       	push	r16
    807e:	1f 93       	push	r17
    8080:	df 93       	push	r29
    8082:	cf 93       	push	r28
    8084:	0f 92       	push	r0
    8086:	cd b7       	in	r28, 0x3d	; 61
    8088:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[4];

	if(useAccel == USE_MMAX7455L) {
    808a:	80 91 3b 04 	lds	r24, 0x043B
    808e:	88 23       	and	r24, r24
    8090:	91 f0       	breq	.+36     	; 0x80b6 <readAccelXY+0x3c>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else if(useAccel == USE_ADXL345) {
    8092:	81 30       	cpi	r24, 0x01	; 1
    8094:	09 f4       	brne	.+2      	; 0x8098 <readAccelXY+0x1e>
    8096:	88 c0       	rjmp	.+272    	; 0x81a8 <readAccelXY+0x12e>
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else {

		accX = 0;
    8098:	10 92 3d 04 	sts	0x043D, r1
    809c:	10 92 3c 04 	sts	0x043C, r1
		accY = 0;
    80a0:	10 92 3f 04 	sts	0x043F, r1
    80a4:	10 92 3e 04 	sts	0x043E, r1

	}

}
    80a8:	0f 90       	pop	r0
    80aa:	cf 91       	pop	r28
    80ac:	df 91       	pop	r29
    80ae:	1f 91       	pop	r17
    80b0:	0f 91       	pop	r16
    80b2:	ff 90       	pop	r15
    80b4:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    80b6:	80 91 14 02 	lds	r24, 0x0214
    80ba:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    80be:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
		i2c_write(0x32);											// sends address to read from (X LSB)
    80c0:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    80c4:	80 91 14 02 	lds	r24, 0x0214
    80c8:	8f 5f       	subi	r24, 0xFF	; 255
    80ca:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <i2c_rep_start>

		for(i=0; i<3; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    80ce:	0e 94 0d 20 	call	0x401a	; 0x401a <i2c_readAck>
    80d2:	08 2f       	mov	r16, r24
    80d4:	0e 94 0d 20 	call	0x401a	; 0x401a <i2c_readAck>
    80d8:	f8 2e       	mov	r15, r24
    80da:	0e 94 0d 20 	call	0x401a	; 0x401a <i2c_readAck>
    80de:	18 2f       	mov	r17, r24
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    80e0:	0e 94 17 20 	call	0x402e	; 0x402e <i2c_readNak>
		i2c_stop();													// set stop conditon = release bus
    80e4:	89 83       	std	Y+1, r24	; 0x01
    80e6:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    80ea:	90 91 7c 0b 	lds	r25, 0x0B7C
    80ee:	89 81       	ldd	r24, Y+1	; 0x01
    80f0:	99 23       	and	r25, r25
    80f2:	39 f1       	breq	.+78     	; 0x8142 <readAccelXY+0xc8>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    80f4:	4f 2d       	mov	r20, r15
    80f6:	55 27       	eor	r21, r21
    80f8:	47 fd       	sbrc	r20, 7
    80fa:	50 95       	com	r21
    80fc:	54 2f       	mov	r21, r20
    80fe:	44 27       	eor	r20, r20
    8100:	60 2f       	mov	r22, r16
    8102:	77 27       	eor	r23, r23
    8104:	67 fd       	sbrc	r22, 7
    8106:	70 95       	com	r23
    8108:	46 2b       	or	r20, r22
    810a:	57 2b       	or	r21, r23
    810c:	50 93 3d 04 	sts	0x043D, r21
    8110:	40 93 3c 04 	sts	0x043C, r20
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    8114:	28 2f       	mov	r18, r24
    8116:	33 27       	eor	r19, r19
    8118:	27 fd       	sbrc	r18, 7
    811a:	30 95       	com	r19
    811c:	32 2f       	mov	r19, r18
    811e:	22 27       	eor	r18, r18
    8120:	81 2f       	mov	r24, r17
    8122:	99 27       	eor	r25, r25
    8124:	87 fd       	sbrc	r24, 7
    8126:	90 95       	com	r25
    8128:	28 2b       	or	r18, r24
    812a:	39 2b       	or	r19, r25
    812c:	30 93 3f 04 	sts	0x043F, r19
    8130:	20 93 3e 04 	sts	0x043E, r18
		accX = 0;
		accY = 0;

	}

}
    8134:	0f 90       	pop	r0
    8136:	cf 91       	pop	r28
    8138:	df 91       	pop	r29
    813a:	1f 91       	pop	r17
    813c:	0f 91       	pop	r16
    813e:	ff 90       	pop	r15
    8140:	08 95       	ret

		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    8142:	4f 2d       	mov	r20, r15
    8144:	55 27       	eor	r21, r21
    8146:	47 fd       	sbrc	r20, 7
    8148:	50 95       	com	r21
    814a:	54 2f       	mov	r21, r20
    814c:	44 27       	eor	r20, r20
    814e:	60 2f       	mov	r22, r16
    8150:	77 27       	eor	r23, r23
    8152:	67 fd       	sbrc	r22, 7
    8154:	70 95       	com	r23
    8156:	46 2b       	or	r20, r22
    8158:	57 2b       	or	r21, r23
    815a:	60 91 42 04 	lds	r22, 0x0442
    815e:	70 91 43 04 	lds	r23, 0x0443
    8162:	46 1b       	sub	r20, r22
    8164:	57 0b       	sbc	r21, r23
    8166:	50 93 3d 04 	sts	0x043D, r21
    816a:	40 93 3c 04 	sts	0x043C, r20
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    816e:	28 2f       	mov	r18, r24
    8170:	33 27       	eor	r19, r19
    8172:	27 fd       	sbrc	r18, 7
    8174:	30 95       	com	r19
    8176:	32 2f       	mov	r19, r18
    8178:	22 27       	eor	r18, r18
    817a:	81 2f       	mov	r24, r17
    817c:	99 27       	eor	r25, r25
    817e:	87 fd       	sbrc	r24, 7
    8180:	90 95       	com	r25
    8182:	28 2b       	or	r18, r24
    8184:	39 2b       	or	r19, r25
    8186:	80 91 44 04 	lds	r24, 0x0444
    818a:	90 91 45 04 	lds	r25, 0x0445
    818e:	28 1b       	sub	r18, r24
    8190:	39 0b       	sbc	r19, r25
    8192:	30 93 3f 04 	sts	0x043F, r19
    8196:	20 93 3e 04 	sts	0x043E, r18
		accX = 0;
		accY = 0;

	}

}
    819a:	0f 90       	pop	r0
    819c:	cf 91       	pop	r28
    819e:	df 91       	pop	r29
    81a0:	1f 91       	pop	r17
    81a2:	0f 91       	pop	r16
    81a4:	ff 90       	pop	r15
    81a6:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    81a8:	80 91 14 02 	lds	r24, 0x0214
    81ac:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    81b0:	82 e3       	ldi	r24, 0x32	; 50
    81b2:	86 cf       	rjmp	.-244    	; 0x80c0 <readAccelXY+0x46>

000081b4 <readAccelXYZ>:

	}

}

void readAccelXYZ() {
    81b4:	df 93       	push	r29
    81b6:	cf 93       	push	r28
    81b8:	00 d0       	rcall	.+0      	; 0x81ba <readAccelXYZ+0x6>
    81ba:	00 d0       	rcall	.+0      	; 0x81bc <readAccelXYZ+0x8>
    81bc:	cd b7       	in	r28, 0x3d	; 61
    81be:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[6];

	if(useAccel == USE_MMAX7455L) {
    81c0:	80 91 3b 04 	lds	r24, 0x043B
    81c4:	88 23       	and	r24, r24
    81c6:	c1 f0       	breq	.+48     	; 0x81f8 <readAccelXYZ+0x44>
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    81c8:	81 30       	cpi	r24, 0x01	; 1
    81ca:	09 f4       	brne	.+2      	; 0x81ce <readAccelXYZ+0x1a>
    81cc:	ad c0       	rjmp	.+346    	; 0x8328 <readAccelXYZ+0x174>
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else {

		accX = 0;
    81ce:	10 92 3d 04 	sts	0x043D, r1
    81d2:	10 92 3c 04 	sts	0x043C, r1
		accY = 0;
    81d6:	10 92 3f 04 	sts	0x043F, r1
    81da:	10 92 3e 04 	sts	0x043E, r1
		accZ = 0;
    81de:	10 92 41 04 	sts	0x0441, r1
    81e2:	10 92 40 04 	sts	0x0440, r1

	}

}
    81e6:	26 96       	adiw	r28, 0x06	; 6
    81e8:	0f b6       	in	r0, 0x3f	; 63
    81ea:	f8 94       	cli
    81ec:	de bf       	out	0x3e, r29	; 62
    81ee:	0f be       	out	0x3f, r0	; 63
    81f0:	cd bf       	out	0x3d, r28	; 61
    81f2:	cf 91       	pop	r28
    81f4:	df 91       	pop	r29
    81f6:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    81f8:	80 91 14 02 	lds	r24, 0x0214
    81fc:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    8200:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
		i2c_write(0x32);											// sends address to read from (X LSB)
    8202:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    8206:	80 91 14 02 	lds	r24, 0x0214
    820a:	8f 5f       	subi	r24, 0xFF	; 255
    820c:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <i2c_rep_start>

		for(i=0; i<5; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    8210:	0e 94 0d 20 	call	0x401a	; 0x401a <i2c_readAck>
    8214:	89 83       	std	Y+1, r24	; 0x01
    8216:	0e 94 0d 20 	call	0x401a	; 0x401a <i2c_readAck>
    821a:	8a 83       	std	Y+2, r24	; 0x02
    821c:	0e 94 0d 20 	call	0x401a	; 0x401a <i2c_readAck>
    8220:	8b 83       	std	Y+3, r24	; 0x03
    8222:	0e 94 0d 20 	call	0x401a	; 0x401a <i2c_readAck>
    8226:	8c 83       	std	Y+4, r24	; 0x04
    8228:	0e 94 0d 20 	call	0x401a	; 0x401a <i2c_readAck>
    822c:	8d 83       	std	Y+5, r24	; 0x05
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    822e:	0e 94 17 20 	call	0x402e	; 0x402e <i2c_readNak>
    8232:	8e 83       	std	Y+6, r24	; 0x06
		i2c_stop();													// set stop conditon = release bus
    8234:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    8238:	80 91 7c 0b 	lds	r24, 0x0B7C
    823c:	88 23       	and	r24, r24
    823e:	89 f1       	breq	.+98     	; 0x82a2 <readAccelXYZ+0xee>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    8240:	8a 81       	ldd	r24, Y+2	; 0x02
    8242:	99 27       	eor	r25, r25
    8244:	87 fd       	sbrc	r24, 7
    8246:	90 95       	com	r25
    8248:	98 2f       	mov	r25, r24
    824a:	88 27       	eor	r24, r24
    824c:	29 81       	ldd	r18, Y+1	; 0x01
    824e:	33 27       	eor	r19, r19
    8250:	27 fd       	sbrc	r18, 7
    8252:	30 95       	com	r19
    8254:	82 2b       	or	r24, r18
    8256:	93 2b       	or	r25, r19
    8258:	90 93 3d 04 	sts	0x043D, r25
    825c:	80 93 3c 04 	sts	0x043C, r24
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    8260:	8c 81       	ldd	r24, Y+4	; 0x04
    8262:	99 27       	eor	r25, r25
    8264:	87 fd       	sbrc	r24, 7
    8266:	90 95       	com	r25
    8268:	98 2f       	mov	r25, r24
    826a:	88 27       	eor	r24, r24
    826c:	2b 81       	ldd	r18, Y+3	; 0x03
    826e:	33 27       	eor	r19, r19
    8270:	27 fd       	sbrc	r18, 7
    8272:	30 95       	com	r19
    8274:	82 2b       	or	r24, r18
    8276:	93 2b       	or	r25, r19
    8278:	90 93 3f 04 	sts	0x043F, r25
    827c:	80 93 3e 04 	sts	0x043E, r24
			accZ = ((signed int)buff[5]<<8)|buff[4];    			// Z axis
    8280:	8e 81       	ldd	r24, Y+6	; 0x06
    8282:	99 27       	eor	r25, r25
    8284:	87 fd       	sbrc	r24, 7
    8286:	90 95       	com	r25
    8288:	98 2f       	mov	r25, r24
    828a:	88 27       	eor	r24, r24
    828c:	2d 81       	ldd	r18, Y+5	; 0x05
    828e:	33 27       	eor	r19, r19
    8290:	27 fd       	sbrc	r18, 7
    8292:	30 95       	com	r19
    8294:	82 2b       	or	r24, r18
    8296:	93 2b       	or	r25, r19
    8298:	90 93 41 04 	sts	0x0441, r25
    829c:	80 93 40 04 	sts	0x0440, r24
    82a0:	a2 cf       	rjmp	.-188    	; 0x81e6 <readAccelXYZ+0x32>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    82a2:	8a 81       	ldd	r24, Y+2	; 0x02
    82a4:	99 27       	eor	r25, r25
    82a6:	87 fd       	sbrc	r24, 7
    82a8:	90 95       	com	r25
    82aa:	98 2f       	mov	r25, r24
    82ac:	88 27       	eor	r24, r24
    82ae:	29 81       	ldd	r18, Y+1	; 0x01
    82b0:	33 27       	eor	r19, r19
    82b2:	27 fd       	sbrc	r18, 7
    82b4:	30 95       	com	r19
    82b6:	82 2b       	or	r24, r18
    82b8:	93 2b       	or	r25, r19
    82ba:	20 91 42 04 	lds	r18, 0x0442
    82be:	30 91 43 04 	lds	r19, 0x0443
    82c2:	82 1b       	sub	r24, r18
    82c4:	93 0b       	sbc	r25, r19
    82c6:	90 93 3d 04 	sts	0x043D, r25
    82ca:	80 93 3c 04 	sts	0x043C, r24
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    82ce:	8c 81       	ldd	r24, Y+4	; 0x04
    82d0:	99 27       	eor	r25, r25
    82d2:	87 fd       	sbrc	r24, 7
    82d4:	90 95       	com	r25
    82d6:	98 2f       	mov	r25, r24
    82d8:	88 27       	eor	r24, r24
    82da:	2b 81       	ldd	r18, Y+3	; 0x03
    82dc:	33 27       	eor	r19, r19
    82de:	27 fd       	sbrc	r18, 7
    82e0:	30 95       	com	r19
    82e2:	82 2b       	or	r24, r18
    82e4:	93 2b       	or	r25, r19
    82e6:	20 91 44 04 	lds	r18, 0x0444
    82ea:	30 91 45 04 	lds	r19, 0x0445
    82ee:	82 1b       	sub	r24, r18
    82f0:	93 0b       	sbc	r25, r19
    82f2:	90 93 3f 04 	sts	0x043F, r25
    82f6:	80 93 3e 04 	sts	0x043E, r24
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
    82fa:	8e 81       	ldd	r24, Y+6	; 0x06
    82fc:	99 27       	eor	r25, r25
    82fe:	87 fd       	sbrc	r24, 7
    8300:	90 95       	com	r25
    8302:	98 2f       	mov	r25, r24
    8304:	88 27       	eor	r24, r24
    8306:	2d 81       	ldd	r18, Y+5	; 0x05
    8308:	33 27       	eor	r19, r19
    830a:	27 fd       	sbrc	r18, 7
    830c:	30 95       	com	r19
    830e:	82 2b       	or	r24, r18
    8310:	93 2b       	or	r25, r19
    8312:	20 91 46 04 	lds	r18, 0x0446
    8316:	30 91 47 04 	lds	r19, 0x0447
    831a:	82 1b       	sub	r24, r18
    831c:	93 0b       	sbc	r25, r19
    831e:	90 93 41 04 	sts	0x0441, r25
    8322:	80 93 40 04 	sts	0x0440, r24
    8326:	5f cf       	rjmp	.-322    	; 0x81e6 <readAccelXYZ+0x32>
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    8328:	80 91 14 02 	lds	r24, 0x0214
    832c:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    8330:	82 e3       	ldi	r24, 0x32	; 50
    8332:	67 cf       	rjmp	.-306    	; 0x8202 <readAccelXYZ+0x4e>

00008334 <calibrateSensors>:

#include "sensors.h"


void calibrateSensors() {
    8334:	cf 93       	push	r28
    8336:	df 93       	push	r29

	unsigned int i=0;

	pwm_red = 0;
    8338:	10 92 0c 02 	sts	0x020C, r1
	pwm_green = 0;
    833c:	10 92 0d 02 	sts	0x020D, r1
	pwm_blue = 0;
    8340:	10 92 0e 02 	sts	0x020E, r1
	updateRedLed(pwm_red);
    8344:	80 e0       	ldi	r24, 0x00	; 0
    8346:	0e 94 a2 3e 	call	0x7d44	; 0x7d44 <updateRedLed>
	updateGreenLed(pwm_green);
    834a:	80 91 0d 02 	lds	r24, 0x020D
    834e:	0e 94 b6 3e 	call	0x7d6c	; 0x7d6c <updateGreenLed>
	updateBlueLed(pwm_blue);
    8352:	80 91 0e 02 	lds	r24, 0x020E
    8356:	0e 94 ca 3e 	call	0x7d94	; 0x7d94 <updateBlueLed>

	calibrationCycle = 0;
    835a:	10 92 5e 04 	sts	0x045E, r1
    835e:	10 92 5d 04 	sts	0x045D, r1
	startCalibration = 1;
    8362:	81 e0       	ldi	r24, 0x01	; 1
    8364:	80 93 7c 0b 	sts	0x0B7C, r24
					}
					accOffsetXSum = 0;
					accOffsetYSum = 0;
					accOffsetZSum = 0;

					calibrationCycle++;
    8368:	c1 e0       	ldi	r28, 0x01	; 1
    836a:	d0 e0       	ldi	r29, 0x00	; 0
	calibrationCycle = 0;
	startCalibration = 1;

	while(startCalibration) {

		readAccelXYZ();
    836c:	0e 94 da 40 	call	0x81b4	; 0x81b4 <readAccelXYZ>

		if(calibrationCycle<=CALIBRATION_CYCLES) {
    8370:	20 91 5d 04 	lds	r18, 0x045D
    8374:	30 91 5e 04 	lds	r19, 0x045E
    8378:	21 31       	cpi	r18, 0x11	; 17
    837a:	31 05       	cpc	r19, r1
    837c:	0c f4       	brge	.+2      	; 0x8380 <calibrateSensors+0x4c>
    837e:	35 c1       	rjmp	.+618    	; 0x85ea <calibrateSensors+0x2b6>
			continue;

		} else if(calibrationCycle > CALIBRATION_CYCLES) {

			for(i=0;i<12;i++) {
				proximityOffset[i] = proximitySum[i]>>4;
    8380:	80 91 99 02 	lds	r24, 0x0299
    8384:	90 91 9a 02 	lds	r25, 0x029A
    8388:	a0 91 9b 02 	lds	r26, 0x029B
    838c:	b0 91 9c 02 	lds	r27, 0x029C
    8390:	54 e0       	ldi	r21, 0x04	; 4
    8392:	b6 95       	lsr	r27
    8394:	a7 95       	ror	r26
    8396:	97 95       	ror	r25
    8398:	87 95       	ror	r24
    839a:	5a 95       	dec	r21
    839c:	d1 f7       	brne	.-12     	; 0x8392 <calibrateSensors+0x5e>
    839e:	90 93 82 02 	sts	0x0282, r25
    83a2:	80 93 81 02 	sts	0x0281, r24
    83a6:	80 91 9d 02 	lds	r24, 0x029D
    83aa:	90 91 9e 02 	lds	r25, 0x029E
    83ae:	a0 91 9f 02 	lds	r26, 0x029F
    83b2:	b0 91 a0 02 	lds	r27, 0x02A0
    83b6:	44 e0       	ldi	r20, 0x04	; 4
    83b8:	b6 95       	lsr	r27
    83ba:	a7 95       	ror	r26
    83bc:	97 95       	ror	r25
    83be:	87 95       	ror	r24
    83c0:	4a 95       	dec	r20
    83c2:	d1 f7       	brne	.-12     	; 0x83b8 <calibrateSensors+0x84>
    83c4:	90 93 84 02 	sts	0x0284, r25
    83c8:	80 93 83 02 	sts	0x0283, r24
    83cc:	80 91 a1 02 	lds	r24, 0x02A1
    83d0:	90 91 a2 02 	lds	r25, 0x02A2
    83d4:	a0 91 a3 02 	lds	r26, 0x02A3
    83d8:	b0 91 a4 02 	lds	r27, 0x02A4
    83dc:	34 e0       	ldi	r19, 0x04	; 4
    83de:	b6 95       	lsr	r27
    83e0:	a7 95       	ror	r26
    83e2:	97 95       	ror	r25
    83e4:	87 95       	ror	r24
    83e6:	3a 95       	dec	r19
    83e8:	d1 f7       	brne	.-12     	; 0x83de <calibrateSensors+0xaa>
    83ea:	90 93 86 02 	sts	0x0286, r25
    83ee:	80 93 85 02 	sts	0x0285, r24
    83f2:	80 91 a5 02 	lds	r24, 0x02A5
    83f6:	90 91 a6 02 	lds	r25, 0x02A6
    83fa:	a0 91 a7 02 	lds	r26, 0x02A7
    83fe:	b0 91 a8 02 	lds	r27, 0x02A8
    8402:	24 e0       	ldi	r18, 0x04	; 4
    8404:	b6 95       	lsr	r27
    8406:	a7 95       	ror	r26
    8408:	97 95       	ror	r25
    840a:	87 95       	ror	r24
    840c:	2a 95       	dec	r18
    840e:	d1 f7       	brne	.-12     	; 0x8404 <calibrateSensors+0xd0>
    8410:	90 93 88 02 	sts	0x0288, r25
    8414:	80 93 87 02 	sts	0x0287, r24
    8418:	80 91 a9 02 	lds	r24, 0x02A9
    841c:	90 91 aa 02 	lds	r25, 0x02AA
    8420:	a0 91 ab 02 	lds	r26, 0x02AB
    8424:	b0 91 ac 02 	lds	r27, 0x02AC
    8428:	f4 e0       	ldi	r31, 0x04	; 4
    842a:	b6 95       	lsr	r27
    842c:	a7 95       	ror	r26
    842e:	97 95       	ror	r25
    8430:	87 95       	ror	r24
    8432:	fa 95       	dec	r31
    8434:	d1 f7       	brne	.-12     	; 0x842a <calibrateSensors+0xf6>
    8436:	90 93 8a 02 	sts	0x028A, r25
    843a:	80 93 89 02 	sts	0x0289, r24
    843e:	80 91 ad 02 	lds	r24, 0x02AD
    8442:	90 91 ae 02 	lds	r25, 0x02AE
    8446:	a0 91 af 02 	lds	r26, 0x02AF
    844a:	b0 91 b0 02 	lds	r27, 0x02B0
    844e:	e4 e0       	ldi	r30, 0x04	; 4
    8450:	b6 95       	lsr	r27
    8452:	a7 95       	ror	r26
    8454:	97 95       	ror	r25
    8456:	87 95       	ror	r24
    8458:	ea 95       	dec	r30
    845a:	d1 f7       	brne	.-12     	; 0x8450 <calibrateSensors+0x11c>
    845c:	90 93 8c 02 	sts	0x028C, r25
    8460:	80 93 8b 02 	sts	0x028B, r24
    8464:	80 91 b1 02 	lds	r24, 0x02B1
    8468:	90 91 b2 02 	lds	r25, 0x02B2
    846c:	a0 91 b3 02 	lds	r26, 0x02B3
    8470:	b0 91 b4 02 	lds	r27, 0x02B4
    8474:	74 e0       	ldi	r23, 0x04	; 4
    8476:	b6 95       	lsr	r27
    8478:	a7 95       	ror	r26
    847a:	97 95       	ror	r25
    847c:	87 95       	ror	r24
    847e:	7a 95       	dec	r23
    8480:	d1 f7       	brne	.-12     	; 0x8476 <calibrateSensors+0x142>
    8482:	90 93 8e 02 	sts	0x028E, r25
    8486:	80 93 8d 02 	sts	0x028D, r24
    848a:	80 91 b5 02 	lds	r24, 0x02B5
    848e:	90 91 b6 02 	lds	r25, 0x02B6
    8492:	a0 91 b7 02 	lds	r26, 0x02B7
    8496:	b0 91 b8 02 	lds	r27, 0x02B8
    849a:	64 e0       	ldi	r22, 0x04	; 4
    849c:	b6 95       	lsr	r27
    849e:	a7 95       	ror	r26
    84a0:	97 95       	ror	r25
    84a2:	87 95       	ror	r24
    84a4:	6a 95       	dec	r22
    84a6:	d1 f7       	brne	.-12     	; 0x849c <calibrateSensors+0x168>
    84a8:	90 93 90 02 	sts	0x0290, r25
    84ac:	80 93 8f 02 	sts	0x028F, r24
    84b0:	80 91 bd 02 	lds	r24, 0x02BD
    84b4:	90 91 be 02 	lds	r25, 0x02BE
    84b8:	a0 91 bf 02 	lds	r26, 0x02BF
    84bc:	b0 91 c0 02 	lds	r27, 0x02C0
    84c0:	54 e0       	ldi	r21, 0x04	; 4
    84c2:	b6 95       	lsr	r27
    84c4:	a7 95       	ror	r26
    84c6:	97 95       	ror	r25
    84c8:	87 95       	ror	r24
    84ca:	5a 95       	dec	r21
    84cc:	d1 f7       	brne	.-12     	; 0x84c2 <calibrateSensors+0x18e>
    84ce:	9c 01       	movw	r18, r24
    84d0:	80 91 c1 02 	lds	r24, 0x02C1
    84d4:	90 91 c2 02 	lds	r25, 0x02C2
    84d8:	a0 91 c3 02 	lds	r26, 0x02C3
    84dc:	b0 91 c4 02 	lds	r27, 0x02C4
    84e0:	44 e0       	ldi	r20, 0x04	; 4
    84e2:	b6 95       	lsr	r27
    84e4:	a7 95       	ror	r26
    84e6:	97 95       	ror	r25
    84e8:	87 95       	ror	r24
    84ea:	4a 95       	dec	r20
    84ec:	d1 f7       	brne	.-12     	; 0x84e2 <calibrateSensors+0x1ae>
    84ee:	bc 01       	movw	r22, r24
    84f0:	80 91 c5 02 	lds	r24, 0x02C5
    84f4:	90 91 c6 02 	lds	r25, 0x02C6
    84f8:	a0 91 c7 02 	lds	r26, 0x02C7
    84fc:	b0 91 c8 02 	lds	r27, 0x02C8
    8500:	f4 e0       	ldi	r31, 0x04	; 4
    8502:	b6 95       	lsr	r27
    8504:	a7 95       	ror	r26
    8506:	97 95       	ror	r25
    8508:	87 95       	ror	r24
    850a:	fa 95       	dec	r31
    850c:	d1 f7       	brne	.-12     	; 0x8502 <calibrateSensors+0x1ce>
    850e:	ac 01       	movw	r20, r24
    8510:	80 91 b9 02 	lds	r24, 0x02B9
    8514:	90 91 ba 02 	lds	r25, 0x02BA
    8518:	a0 91 bb 02 	lds	r26, 0x02BB
    851c:	b0 91 bc 02 	lds	r27, 0x02BC
    8520:	e4 e0       	ldi	r30, 0x04	; 4
    8522:	b6 95       	lsr	r27
    8524:	a7 95       	ror	r26
    8526:	97 95       	ror	r25
    8528:	87 95       	ror	r24
    852a:	ea 95       	dec	r30
    852c:	d1 f7       	brne	.-12     	; 0x8522 <calibrateSensors+0x1ee>
			}

			for(i=8; i<12; i++) {
				proximityOffset[i] -= 512;	// move the "0" to 512 (values around 512)
    852e:	80 50       	subi	r24, 0x00	; 0
    8530:	92 40       	sbci	r25, 0x02	; 2
    8532:	90 93 92 02 	sts	0x0292, r25
    8536:	80 93 91 02 	sts	0x0291, r24
    853a:	20 50       	subi	r18, 0x00	; 0
    853c:	32 40       	sbci	r19, 0x02	; 2
    853e:	30 93 94 02 	sts	0x0294, r19
    8542:	20 93 93 02 	sts	0x0293, r18
    8546:	60 50       	subi	r22, 0x00	; 0
    8548:	72 40       	sbci	r23, 0x02	; 2
    854a:	70 93 96 02 	sts	0x0296, r23
    854e:	60 93 95 02 	sts	0x0295, r22
    8552:	40 50       	subi	r20, 0x00	; 0
    8554:	52 40       	sbci	r21, 0x02	; 2
    8556:	50 93 98 02 	sts	0x0298, r21
    855a:	40 93 97 02 	sts	0x0297, r20
			}

			accOffsetX = accOffsetXSum>>4;
    855e:	80 91 48 04 	lds	r24, 0x0448
    8562:	90 91 49 04 	lds	r25, 0x0449
    8566:	95 95       	asr	r25
    8568:	87 95       	ror	r24
    856a:	95 95       	asr	r25
    856c:	87 95       	ror	r24
    856e:	95 95       	asr	r25
    8570:	87 95       	ror	r24
    8572:	95 95       	asr	r25
    8574:	87 95       	ror	r24
    8576:	90 93 43 04 	sts	0x0443, r25
    857a:	80 93 42 04 	sts	0x0442, r24
			accOffsetY = accOffsetYSum>>4;
    857e:	80 91 4a 04 	lds	r24, 0x044A
    8582:	90 91 4b 04 	lds	r25, 0x044B
    8586:	95 95       	asr	r25
    8588:	87 95       	ror	r24
    858a:	95 95       	asr	r25
    858c:	87 95       	ror	r24
    858e:	95 95       	asr	r25
    8590:	87 95       	ror	r24
    8592:	95 95       	asr	r25
    8594:	87 95       	ror	r24
    8596:	90 93 45 04 	sts	0x0445, r25
    859a:	80 93 44 04 	sts	0x0444, r24
			accOffsetZ = accOffsetZSum>>4;
    859e:	80 91 4c 04 	lds	r24, 0x044C
    85a2:	90 91 4d 04 	lds	r25, 0x044D
    85a6:	95 95       	asr	r25
    85a8:	87 95       	ror	r24
    85aa:	95 95       	asr	r25
    85ac:	87 95       	ror	r24
    85ae:	95 95       	asr	r25
    85b0:	87 95       	ror	r24
    85b2:	95 95       	asr	r25
    85b4:	87 95       	ror	r24
    85b6:	90 93 47 04 	sts	0x0447, r25
    85ba:	80 93 46 04 	sts	0x0446, r24

			//proxUpdated = 0;
			//if(proxUpdated) {	
				startCalibration = 0;					
    85be:	10 92 7c 0b 	sts	0x0B7C, r1

		}

	}

	pwm_red = 255;
    85c2:	8f ef       	ldi	r24, 0xFF	; 255
    85c4:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    85c8:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    85cc:	80 93 0e 02 	sts	0x020E, r24
	updateRedLed(pwm_red);
    85d0:	0e 94 a2 3e 	call	0x7d44	; 0x7d44 <updateRedLed>
	updateGreenLed(pwm_green);
    85d4:	80 91 0d 02 	lds	r24, 0x020D
    85d8:	0e 94 b6 3e 	call	0x7d6c	; 0x7d6c <updateGreenLed>
	updateBlueLed(pwm_blue);
    85dc:	80 91 0e 02 	lds	r24, 0x020E
    85e0:	0e 94 ca 3e 	call	0x7d94	; 0x7d94 <updateBlueLed>

}
    85e4:	df 91       	pop	r29
    85e6:	cf 91       	pop	r28
    85e8:	08 95       	ret

		readAccelXYZ();

		if(calibrationCycle<=CALIBRATION_CYCLES) {

			if(proxUpdated) {
    85ea:	80 91 d0 02 	lds	r24, 0x02D0
    85ee:	88 23       	and	r24, r24
    85f0:	09 f4       	brne	.+2      	; 0x85f4 <calibrateSensors+0x2c0>
    85f2:	86 c1       	rjmp	.+780    	; 0x8900 <calibrateSensors+0x5cc>

				proxUpdated = 0;
    85f4:	10 92 d0 02 	sts	0x02D0, r1

				if(calibrationCycle==0) {		// reset all variables
    85f8:	21 15       	cp	r18, r1
    85fa:	31 05       	cpc	r19, r1
    85fc:	09 f4       	brne	.+2      	; 0x8600 <calibrateSensors+0x2cc>
    85fe:	86 c1       	rjmp	.+780    	; 0x890c <calibrateSensors+0x5d8>
												// "proximityResult" hasn't the offset reset to 0. so we start the actual calibration
												// the next time
				}

				for (i=0;i<12;i++) {
					proximitySum[i] += proximityResult[i];
    8600:	80 91 69 02 	lds	r24, 0x0269
    8604:	90 91 6a 02 	lds	r25, 0x026A
    8608:	aa 27       	eor	r26, r26
    860a:	97 fd       	sbrc	r25, 7
    860c:	a0 95       	com	r26
    860e:	ba 2f       	mov	r27, r26
    8610:	40 91 99 02 	lds	r20, 0x0299
    8614:	50 91 9a 02 	lds	r21, 0x029A
    8618:	60 91 9b 02 	lds	r22, 0x029B
    861c:	70 91 9c 02 	lds	r23, 0x029C
    8620:	84 0f       	add	r24, r20
    8622:	95 1f       	adc	r25, r21
    8624:	a6 1f       	adc	r26, r22
    8626:	b7 1f       	adc	r27, r23
    8628:	80 93 99 02 	sts	0x0299, r24
    862c:	90 93 9a 02 	sts	0x029A, r25
    8630:	a0 93 9b 02 	sts	0x029B, r26
    8634:	b0 93 9c 02 	sts	0x029C, r27
    8638:	80 91 6b 02 	lds	r24, 0x026B
    863c:	90 91 6c 02 	lds	r25, 0x026C
    8640:	aa 27       	eor	r26, r26
    8642:	97 fd       	sbrc	r25, 7
    8644:	a0 95       	com	r26
    8646:	ba 2f       	mov	r27, r26
    8648:	40 91 9d 02 	lds	r20, 0x029D
    864c:	50 91 9e 02 	lds	r21, 0x029E
    8650:	60 91 9f 02 	lds	r22, 0x029F
    8654:	70 91 a0 02 	lds	r23, 0x02A0
    8658:	84 0f       	add	r24, r20
    865a:	95 1f       	adc	r25, r21
    865c:	a6 1f       	adc	r26, r22
    865e:	b7 1f       	adc	r27, r23
    8660:	80 93 9d 02 	sts	0x029D, r24
    8664:	90 93 9e 02 	sts	0x029E, r25
    8668:	a0 93 9f 02 	sts	0x029F, r26
    866c:	b0 93 a0 02 	sts	0x02A0, r27
    8670:	80 91 6d 02 	lds	r24, 0x026D
    8674:	90 91 6e 02 	lds	r25, 0x026E
    8678:	aa 27       	eor	r26, r26
    867a:	97 fd       	sbrc	r25, 7
    867c:	a0 95       	com	r26
    867e:	ba 2f       	mov	r27, r26
    8680:	40 91 a1 02 	lds	r20, 0x02A1
    8684:	50 91 a2 02 	lds	r21, 0x02A2
    8688:	60 91 a3 02 	lds	r22, 0x02A3
    868c:	70 91 a4 02 	lds	r23, 0x02A4
    8690:	84 0f       	add	r24, r20
    8692:	95 1f       	adc	r25, r21
    8694:	a6 1f       	adc	r26, r22
    8696:	b7 1f       	adc	r27, r23
    8698:	80 93 a1 02 	sts	0x02A1, r24
    869c:	90 93 a2 02 	sts	0x02A2, r25
    86a0:	a0 93 a3 02 	sts	0x02A3, r26
    86a4:	b0 93 a4 02 	sts	0x02A4, r27
    86a8:	80 91 6f 02 	lds	r24, 0x026F
    86ac:	90 91 70 02 	lds	r25, 0x0270
    86b0:	aa 27       	eor	r26, r26
    86b2:	97 fd       	sbrc	r25, 7
    86b4:	a0 95       	com	r26
    86b6:	ba 2f       	mov	r27, r26
    86b8:	40 91 a5 02 	lds	r20, 0x02A5
    86bc:	50 91 a6 02 	lds	r21, 0x02A6
    86c0:	60 91 a7 02 	lds	r22, 0x02A7
    86c4:	70 91 a8 02 	lds	r23, 0x02A8
    86c8:	84 0f       	add	r24, r20
    86ca:	95 1f       	adc	r25, r21
    86cc:	a6 1f       	adc	r26, r22
    86ce:	b7 1f       	adc	r27, r23
    86d0:	80 93 a5 02 	sts	0x02A5, r24
    86d4:	90 93 a6 02 	sts	0x02A6, r25
    86d8:	a0 93 a7 02 	sts	0x02A7, r26
    86dc:	b0 93 a8 02 	sts	0x02A8, r27
    86e0:	80 91 71 02 	lds	r24, 0x0271
    86e4:	90 91 72 02 	lds	r25, 0x0272
    86e8:	aa 27       	eor	r26, r26
    86ea:	97 fd       	sbrc	r25, 7
    86ec:	a0 95       	com	r26
    86ee:	ba 2f       	mov	r27, r26
    86f0:	40 91 a9 02 	lds	r20, 0x02A9
    86f4:	50 91 aa 02 	lds	r21, 0x02AA
    86f8:	60 91 ab 02 	lds	r22, 0x02AB
    86fc:	70 91 ac 02 	lds	r23, 0x02AC
    8700:	84 0f       	add	r24, r20
    8702:	95 1f       	adc	r25, r21
    8704:	a6 1f       	adc	r26, r22
    8706:	b7 1f       	adc	r27, r23
    8708:	80 93 a9 02 	sts	0x02A9, r24
    870c:	90 93 aa 02 	sts	0x02AA, r25
    8710:	a0 93 ab 02 	sts	0x02AB, r26
    8714:	b0 93 ac 02 	sts	0x02AC, r27
    8718:	80 91 73 02 	lds	r24, 0x0273
    871c:	90 91 74 02 	lds	r25, 0x0274
    8720:	aa 27       	eor	r26, r26
    8722:	97 fd       	sbrc	r25, 7
    8724:	a0 95       	com	r26
    8726:	ba 2f       	mov	r27, r26
    8728:	40 91 ad 02 	lds	r20, 0x02AD
    872c:	50 91 ae 02 	lds	r21, 0x02AE
    8730:	60 91 af 02 	lds	r22, 0x02AF
    8734:	70 91 b0 02 	lds	r23, 0x02B0
    8738:	84 0f       	add	r24, r20
    873a:	95 1f       	adc	r25, r21
    873c:	a6 1f       	adc	r26, r22
    873e:	b7 1f       	adc	r27, r23
    8740:	80 93 ad 02 	sts	0x02AD, r24
    8744:	90 93 ae 02 	sts	0x02AE, r25
    8748:	a0 93 af 02 	sts	0x02AF, r26
    874c:	b0 93 b0 02 	sts	0x02B0, r27
    8750:	80 91 75 02 	lds	r24, 0x0275
    8754:	90 91 76 02 	lds	r25, 0x0276
    8758:	aa 27       	eor	r26, r26
    875a:	97 fd       	sbrc	r25, 7
    875c:	a0 95       	com	r26
    875e:	ba 2f       	mov	r27, r26
    8760:	40 91 b1 02 	lds	r20, 0x02B1
    8764:	50 91 b2 02 	lds	r21, 0x02B2
    8768:	60 91 b3 02 	lds	r22, 0x02B3
    876c:	70 91 b4 02 	lds	r23, 0x02B4
    8770:	84 0f       	add	r24, r20
    8772:	95 1f       	adc	r25, r21
    8774:	a6 1f       	adc	r26, r22
    8776:	b7 1f       	adc	r27, r23
    8778:	80 93 b1 02 	sts	0x02B1, r24
    877c:	90 93 b2 02 	sts	0x02B2, r25
    8780:	a0 93 b3 02 	sts	0x02B3, r26
    8784:	b0 93 b4 02 	sts	0x02B4, r27
    8788:	80 91 77 02 	lds	r24, 0x0277
    878c:	90 91 78 02 	lds	r25, 0x0278
    8790:	aa 27       	eor	r26, r26
    8792:	97 fd       	sbrc	r25, 7
    8794:	a0 95       	com	r26
    8796:	ba 2f       	mov	r27, r26
    8798:	40 91 b5 02 	lds	r20, 0x02B5
    879c:	50 91 b6 02 	lds	r21, 0x02B6
    87a0:	60 91 b7 02 	lds	r22, 0x02B7
    87a4:	70 91 b8 02 	lds	r23, 0x02B8
    87a8:	84 0f       	add	r24, r20
    87aa:	95 1f       	adc	r25, r21
    87ac:	a6 1f       	adc	r26, r22
    87ae:	b7 1f       	adc	r27, r23
    87b0:	80 93 b5 02 	sts	0x02B5, r24
    87b4:	90 93 b6 02 	sts	0x02B6, r25
    87b8:	a0 93 b7 02 	sts	0x02B7, r26
    87bc:	b0 93 b8 02 	sts	0x02B8, r27
    87c0:	80 91 79 02 	lds	r24, 0x0279
    87c4:	90 91 7a 02 	lds	r25, 0x027A
    87c8:	aa 27       	eor	r26, r26
    87ca:	97 fd       	sbrc	r25, 7
    87cc:	a0 95       	com	r26
    87ce:	ba 2f       	mov	r27, r26
    87d0:	40 91 b9 02 	lds	r20, 0x02B9
    87d4:	50 91 ba 02 	lds	r21, 0x02BA
    87d8:	60 91 bb 02 	lds	r22, 0x02BB
    87dc:	70 91 bc 02 	lds	r23, 0x02BC
    87e0:	84 0f       	add	r24, r20
    87e2:	95 1f       	adc	r25, r21
    87e4:	a6 1f       	adc	r26, r22
    87e6:	b7 1f       	adc	r27, r23
    87e8:	80 93 b9 02 	sts	0x02B9, r24
    87ec:	90 93 ba 02 	sts	0x02BA, r25
    87f0:	a0 93 bb 02 	sts	0x02BB, r26
    87f4:	b0 93 bc 02 	sts	0x02BC, r27
    87f8:	80 91 7b 02 	lds	r24, 0x027B
    87fc:	90 91 7c 02 	lds	r25, 0x027C
    8800:	aa 27       	eor	r26, r26
    8802:	97 fd       	sbrc	r25, 7
    8804:	a0 95       	com	r26
    8806:	ba 2f       	mov	r27, r26
    8808:	40 91 bd 02 	lds	r20, 0x02BD
    880c:	50 91 be 02 	lds	r21, 0x02BE
    8810:	60 91 bf 02 	lds	r22, 0x02BF
    8814:	70 91 c0 02 	lds	r23, 0x02C0
    8818:	84 0f       	add	r24, r20
    881a:	95 1f       	adc	r25, r21
    881c:	a6 1f       	adc	r26, r22
    881e:	b7 1f       	adc	r27, r23
    8820:	80 93 bd 02 	sts	0x02BD, r24
    8824:	90 93 be 02 	sts	0x02BE, r25
    8828:	a0 93 bf 02 	sts	0x02BF, r26
    882c:	b0 93 c0 02 	sts	0x02C0, r27
    8830:	80 91 7d 02 	lds	r24, 0x027D
    8834:	90 91 7e 02 	lds	r25, 0x027E
    8838:	aa 27       	eor	r26, r26
    883a:	97 fd       	sbrc	r25, 7
    883c:	a0 95       	com	r26
    883e:	ba 2f       	mov	r27, r26
    8840:	40 91 c1 02 	lds	r20, 0x02C1
    8844:	50 91 c2 02 	lds	r21, 0x02C2
    8848:	60 91 c3 02 	lds	r22, 0x02C3
    884c:	70 91 c4 02 	lds	r23, 0x02C4
    8850:	84 0f       	add	r24, r20
    8852:	95 1f       	adc	r25, r21
    8854:	a6 1f       	adc	r26, r22
    8856:	b7 1f       	adc	r27, r23
    8858:	80 93 c1 02 	sts	0x02C1, r24
    885c:	90 93 c2 02 	sts	0x02C2, r25
    8860:	a0 93 c3 02 	sts	0x02C3, r26
    8864:	b0 93 c4 02 	sts	0x02C4, r27
    8868:	80 91 7f 02 	lds	r24, 0x027F
    886c:	90 91 80 02 	lds	r25, 0x0280
    8870:	aa 27       	eor	r26, r26
    8872:	97 fd       	sbrc	r25, 7
    8874:	a0 95       	com	r26
    8876:	ba 2f       	mov	r27, r26
    8878:	40 91 c5 02 	lds	r20, 0x02C5
    887c:	50 91 c6 02 	lds	r21, 0x02C6
    8880:	60 91 c7 02 	lds	r22, 0x02C7
    8884:	70 91 c8 02 	lds	r23, 0x02C8
    8888:	84 0f       	add	r24, r20
    888a:	95 1f       	adc	r25, r21
    888c:	a6 1f       	adc	r26, r22
    888e:	b7 1f       	adc	r27, r23
    8890:	80 93 c5 02 	sts	0x02C5, r24
    8894:	90 93 c6 02 	sts	0x02C6, r25
    8898:	a0 93 c7 02 	sts	0x02C7, r26
    889c:	b0 93 c8 02 	sts	0x02C8, r27
				}

				accOffsetXSum += accX;
    88a0:	80 91 48 04 	lds	r24, 0x0448
    88a4:	90 91 49 04 	lds	r25, 0x0449
    88a8:	40 91 3c 04 	lds	r20, 0x043C
    88ac:	50 91 3d 04 	lds	r21, 0x043D
    88b0:	84 0f       	add	r24, r20
    88b2:	95 1f       	adc	r25, r21
    88b4:	90 93 49 04 	sts	0x0449, r25
    88b8:	80 93 48 04 	sts	0x0448, r24
				accOffsetYSum += accY;
    88bc:	80 91 4a 04 	lds	r24, 0x044A
    88c0:	90 91 4b 04 	lds	r25, 0x044B
    88c4:	40 91 3e 04 	lds	r20, 0x043E
    88c8:	50 91 3f 04 	lds	r21, 0x043F
    88cc:	84 0f       	add	r24, r20
    88ce:	95 1f       	adc	r25, r21
    88d0:	90 93 4b 04 	sts	0x044B, r25
    88d4:	80 93 4a 04 	sts	0x044A, r24
				accOffsetZSum += accZ;
    88d8:	80 91 4c 04 	lds	r24, 0x044C
    88dc:	90 91 4d 04 	lds	r25, 0x044D
    88e0:	40 91 40 04 	lds	r20, 0x0440
    88e4:	50 91 41 04 	lds	r21, 0x0441
    88e8:	84 0f       	add	r24, r20
    88ea:	95 1f       	adc	r25, r21
    88ec:	90 93 4d 04 	sts	0x044D, r25
    88f0:	80 93 4c 04 	sts	0x044C, r24

				calibrationCycle++;
    88f4:	2f 5f       	subi	r18, 0xFF	; 255
    88f6:	3f 4f       	sbci	r19, 0xFF	; 255
    88f8:	30 93 5e 04 	sts	0x045E, r19
    88fc:	20 93 5d 04 	sts	0x045D, r18
    8900:	80 91 7c 0b 	lds	r24, 0x0B7C
	updateBlueLed(pwm_blue);

	calibrationCycle = 0;
	startCalibration = 1;

	while(startCalibration) {
    8904:	88 23       	and	r24, r24
    8906:	09 f0       	breq	.+2      	; 0x890a <calibrateSensors+0x5d6>
    8908:	31 cd       	rjmp	.-1438   	; 0x836c <calibrateSensors+0x38>
    890a:	5b ce       	rjmp	.-842    	; 0x85c2 <calibrateSensors+0x28e>

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    890c:	10 92 99 02 	sts	0x0299, r1
    8910:	10 92 9a 02 	sts	0x029A, r1
    8914:	10 92 9b 02 	sts	0x029B, r1
    8918:	10 92 9c 02 	sts	0x029C, r1
						proximityOffset[i] = 0;
    891c:	10 92 82 02 	sts	0x0282, r1
    8920:	10 92 81 02 	sts	0x0281, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8924:	10 92 9d 02 	sts	0x029D, r1
    8928:	10 92 9e 02 	sts	0x029E, r1
    892c:	10 92 9f 02 	sts	0x029F, r1
    8930:	10 92 a0 02 	sts	0x02A0, r1
						proximityOffset[i] = 0;
    8934:	10 92 84 02 	sts	0x0284, r1
    8938:	10 92 83 02 	sts	0x0283, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    893c:	10 92 a1 02 	sts	0x02A1, r1
    8940:	10 92 a2 02 	sts	0x02A2, r1
    8944:	10 92 a3 02 	sts	0x02A3, r1
    8948:	10 92 a4 02 	sts	0x02A4, r1
						proximityOffset[i] = 0;
    894c:	10 92 86 02 	sts	0x0286, r1
    8950:	10 92 85 02 	sts	0x0285, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8954:	10 92 a5 02 	sts	0x02A5, r1
    8958:	10 92 a6 02 	sts	0x02A6, r1
    895c:	10 92 a7 02 	sts	0x02A7, r1
    8960:	10 92 a8 02 	sts	0x02A8, r1
						proximityOffset[i] = 0;
    8964:	10 92 88 02 	sts	0x0288, r1
    8968:	10 92 87 02 	sts	0x0287, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    896c:	10 92 a9 02 	sts	0x02A9, r1
    8970:	10 92 aa 02 	sts	0x02AA, r1
    8974:	10 92 ab 02 	sts	0x02AB, r1
    8978:	10 92 ac 02 	sts	0x02AC, r1
						proximityOffset[i] = 0;
    897c:	10 92 8a 02 	sts	0x028A, r1
    8980:	10 92 89 02 	sts	0x0289, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8984:	10 92 ad 02 	sts	0x02AD, r1
    8988:	10 92 ae 02 	sts	0x02AE, r1
    898c:	10 92 af 02 	sts	0x02AF, r1
    8990:	10 92 b0 02 	sts	0x02B0, r1
						proximityOffset[i] = 0;
    8994:	10 92 8c 02 	sts	0x028C, r1
    8998:	10 92 8b 02 	sts	0x028B, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    899c:	10 92 b1 02 	sts	0x02B1, r1
    89a0:	10 92 b2 02 	sts	0x02B2, r1
    89a4:	10 92 b3 02 	sts	0x02B3, r1
    89a8:	10 92 b4 02 	sts	0x02B4, r1
						proximityOffset[i] = 0;
    89ac:	10 92 8e 02 	sts	0x028E, r1
    89b0:	10 92 8d 02 	sts	0x028D, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    89b4:	10 92 b5 02 	sts	0x02B5, r1
    89b8:	10 92 b6 02 	sts	0x02B6, r1
    89bc:	10 92 b7 02 	sts	0x02B7, r1
    89c0:	10 92 b8 02 	sts	0x02B8, r1
						proximityOffset[i] = 0;
    89c4:	10 92 90 02 	sts	0x0290, r1
    89c8:	10 92 8f 02 	sts	0x028F, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    89cc:	10 92 b9 02 	sts	0x02B9, r1
    89d0:	10 92 ba 02 	sts	0x02BA, r1
    89d4:	10 92 bb 02 	sts	0x02BB, r1
    89d8:	10 92 bc 02 	sts	0x02BC, r1
						proximityOffset[i] = 0;
    89dc:	10 92 92 02 	sts	0x0292, r1
    89e0:	10 92 91 02 	sts	0x0291, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    89e4:	10 92 bd 02 	sts	0x02BD, r1
    89e8:	10 92 be 02 	sts	0x02BE, r1
    89ec:	10 92 bf 02 	sts	0x02BF, r1
    89f0:	10 92 c0 02 	sts	0x02C0, r1
						proximityOffset[i] = 0;
    89f4:	10 92 94 02 	sts	0x0294, r1
    89f8:	10 92 93 02 	sts	0x0293, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    89fc:	10 92 c1 02 	sts	0x02C1, r1
    8a00:	10 92 c2 02 	sts	0x02C2, r1
    8a04:	10 92 c3 02 	sts	0x02C3, r1
    8a08:	10 92 c4 02 	sts	0x02C4, r1
						proximityOffset[i] = 0;
    8a0c:	10 92 96 02 	sts	0x0296, r1
    8a10:	10 92 95 02 	sts	0x0295, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8a14:	10 92 c5 02 	sts	0x02C5, r1
    8a18:	10 92 c6 02 	sts	0x02C6, r1
    8a1c:	10 92 c7 02 	sts	0x02C7, r1
    8a20:	10 92 c8 02 	sts	0x02C8, r1
						proximityOffset[i] = 0;
    8a24:	10 92 98 02 	sts	0x0298, r1
    8a28:	10 92 97 02 	sts	0x0297, r1
					}
					accOffsetXSum = 0;
    8a2c:	10 92 49 04 	sts	0x0449, r1
    8a30:	10 92 48 04 	sts	0x0448, r1
					accOffsetYSum = 0;
    8a34:	10 92 4b 04 	sts	0x044B, r1
    8a38:	10 92 4a 04 	sts	0x044A, r1
					accOffsetZSum = 0;
    8a3c:	10 92 4d 04 	sts	0x044D, r1
    8a40:	10 92 4c 04 	sts	0x044C, r1

					calibrationCycle++;
    8a44:	d0 93 5e 04 	sts	0x045E, r29
    8a48:	c0 93 5d 04 	sts	0x045D, r28
    8a4c:	80 91 7c 0b 	lds	r24, 0x0B7C

					continue;					// the first time "proxUpdated" is set, all the proximity values saved in the array 
    8a50:	59 cf       	rjmp	.-334    	; 0x8904 <calibrateSensors+0x5d0>

00008a52 <readAccelXYZ_1>:

void readAccelXYZ_1() {

	int i = 0;

	if(useAccel == USE_MMAX7455L) {
    8a52:	80 91 3b 04 	lds	r24, 0x043B
    8a56:	88 23       	and	r24, r24
    8a58:	79 f0       	breq	.+30     	; 0x8a78 <readAccelXYZ_1+0x26>
		for(i=0; i<2; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
		}
		return;

	} else if(useAccel == USE_ADXL345) {							
    8a5a:	81 30       	cpi	r24, 0x01	; 1
    8a5c:	11 f1       	breq	.+68     	; 0x8aa2 <readAccelXYZ_1+0x50>
		}
		return;

	} else {

		accX = 0;
    8a5e:	10 92 3d 04 	sts	0x043D, r1
    8a62:	10 92 3c 04 	sts	0x043C, r1
		accY = 0;
    8a66:	10 92 3f 04 	sts	0x043F, r1
    8a6a:	10 92 3e 04 	sts	0x043E, r1
		accZ = 0;
    8a6e:	10 92 41 04 	sts	0x0441, r1
    8a72:	10 92 40 04 	sts	0x0440, r1
    8a76:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    8a78:	80 91 14 02 	lds	r24, 0x0214
    8a7c:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    8a80:	80 e0       	ldi	r24, 0x00	; 0
    8a82:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    8a86:	80 91 14 02 	lds	r24, 0x0214
    8a8a:	8f 5f       	subi	r24, 0xFF	; 255
    8a8c:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <i2c_rep_start>

		for(i=0; i<2; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    8a90:	0e 94 0d 20 	call	0x401a	; 0x401a <i2c_readAck>
    8a94:	80 93 52 04 	sts	0x0452, r24
    8a98:	0e 94 0d 20 	call	0x401a	; 0x401a <i2c_readAck>
    8a9c:	80 93 53 04 	sts	0x0453, r24
    8aa0:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    8aa2:	80 91 14 02 	lds	r24, 0x0214
    8aa6:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    8aaa:	82 e3       	ldi	r24, 0x32	; 50
    8aac:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    8ab0:	80 91 14 02 	lds	r24, 0x0214
    8ab4:	8f 5f       	subi	r24, 0xFF	; 255
    8ab6:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <i2c_rep_start>

		for(i=0; i<3; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    8aba:	0e 94 0d 20 	call	0x401a	; 0x401a <i2c_readAck>
    8abe:	80 93 52 04 	sts	0x0452, r24
    8ac2:	0e 94 0d 20 	call	0x401a	; 0x401a <i2c_readAck>
    8ac6:	80 93 53 04 	sts	0x0453, r24
    8aca:	0e 94 0d 20 	call	0x401a	; 0x401a <i2c_readAck>
    8ace:	80 93 54 04 	sts	0x0454, r24
    8ad2:	08 95       	ret

00008ad4 <readAccelXYZ_2>:

void readAccelXYZ_2() {

	int i = 2;

	if(useAccel == USE_MMAX7455L) {
    8ad4:	80 91 3b 04 	lds	r24, 0x043B
    8ad8:	88 23       	and	r24, r24
    8ada:	09 f0       	breq	.+2      	; 0x8ade <readAccelXYZ_2+0xa>
    8adc:	4e c0       	rjmp	.+156    	; 0x8b7a <readAccelXYZ_2+0xa6>

		for(i=2; i<5; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    8ade:	0e 94 0d 20 	call	0x401a	; 0x401a <i2c_readAck>
    8ae2:	80 93 54 04 	sts	0x0454, r24
		}

	} else if(useAccel == USE_ADXL345) {							

		for(i=3; i<5; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    8ae6:	0e 94 0d 20 	call	0x401a	; 0x401a <i2c_readAck>
    8aea:	80 93 55 04 	sts	0x0455, r24
    8aee:	0e 94 0d 20 	call	0x401a	; 0x401a <i2c_readAck>
    8af2:	80 93 56 04 	sts	0x0456, r24
		}
		accBuff[i] = i2c_readNak();									// read last byte sending NACK
    8af6:	0e 94 17 20 	call	0x402e	; 0x402e <i2c_readNak>
    8afa:	80 93 57 04 	sts	0x0457, r24
		i2c_stop();													// set stop conditon = release bus
    8afe:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    8b02:	80 91 7c 0b 	lds	r24, 0x0B7C
    8b06:	88 23       	and	r24, r24
    8b08:	09 f4       	brne	.+2      	; 0x8b0c <readAccelXYZ_2+0x38>
    8b0a:	47 c0       	rjmp	.+142    	; 0x8b9a <readAccelXYZ_2+0xc6>
			accX = ((signed int)accBuff[1]<<8)|accBuff[0];    			// X axis
    8b0c:	80 91 53 04 	lds	r24, 0x0453
    8b10:	99 27       	eor	r25, r25
    8b12:	87 fd       	sbrc	r24, 7
    8b14:	90 95       	com	r25
    8b16:	98 2f       	mov	r25, r24
    8b18:	88 27       	eor	r24, r24
    8b1a:	20 91 52 04 	lds	r18, 0x0452
    8b1e:	33 27       	eor	r19, r19
    8b20:	27 fd       	sbrc	r18, 7
    8b22:	30 95       	com	r19
    8b24:	82 2b       	or	r24, r18
    8b26:	93 2b       	or	r25, r19
    8b28:	90 93 3d 04 	sts	0x043D, r25
    8b2c:	80 93 3c 04 	sts	0x043C, r24
			accY = ((signed int)accBuff[3]<<8)|accBuff[2];    			// Y axis
    8b30:	80 91 55 04 	lds	r24, 0x0455
    8b34:	99 27       	eor	r25, r25
    8b36:	87 fd       	sbrc	r24, 7
    8b38:	90 95       	com	r25
    8b3a:	98 2f       	mov	r25, r24
    8b3c:	88 27       	eor	r24, r24
    8b3e:	20 91 54 04 	lds	r18, 0x0454
    8b42:	33 27       	eor	r19, r19
    8b44:	27 fd       	sbrc	r18, 7
    8b46:	30 95       	com	r19
    8b48:	82 2b       	or	r24, r18
    8b4a:	93 2b       	or	r25, r19
    8b4c:	90 93 3f 04 	sts	0x043F, r25
    8b50:	80 93 3e 04 	sts	0x043E, r24
			accZ = ((signed int)accBuff[5]<<8)|accBuff[4];    			// Z axis
    8b54:	80 91 57 04 	lds	r24, 0x0457
    8b58:	99 27       	eor	r25, r25
    8b5a:	87 fd       	sbrc	r24, 7
    8b5c:	90 95       	com	r25
    8b5e:	98 2f       	mov	r25, r24
    8b60:	88 27       	eor	r24, r24
    8b62:	20 91 56 04 	lds	r18, 0x0456
    8b66:	33 27       	eor	r19, r19
    8b68:	27 fd       	sbrc	r18, 7
    8b6a:	30 95       	com	r19
    8b6c:	82 2b       	or	r24, r18
    8b6e:	93 2b       	or	r25, r19
    8b70:	90 93 41 04 	sts	0x0441, r25
    8b74:	80 93 40 04 	sts	0x0440, r24
    8b78:	08 95       	ret
			accX = (((signed int)accBuff[1]<<8)|accBuff[0])-accOffsetX;	// X axis
			accY = (((signed int)accBuff[3]<<8)|accBuff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    8b7a:	81 30       	cpi	r24, 0x01	; 1
    8b7c:	09 f4       	brne	.+2      	; 0x8b80 <readAccelXYZ_2+0xac>
    8b7e:	b3 cf       	rjmp	.-154    	; 0x8ae6 <readAccelXYZ_2+0x12>
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
		}

	} else {

		accX = 0;
    8b80:	10 92 3d 04 	sts	0x043D, r1
    8b84:	10 92 3c 04 	sts	0x043C, r1
		accY = 0;
    8b88:	10 92 3f 04 	sts	0x043F, r1
    8b8c:	10 92 3e 04 	sts	0x043E, r1
		accZ = 0;
    8b90:	10 92 41 04 	sts	0x0441, r1
    8b94:	10 92 40 04 	sts	0x0440, r1
    8b98:	08 95       	ret
		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)accBuff[1]<<8)|accBuff[0];    			// X axis
			accY = ((signed int)accBuff[3]<<8)|accBuff[2];    			// Y axis
			accZ = ((signed int)accBuff[5]<<8)|accBuff[4];    			// Z axis
		} else {													// else return the calibrated values
			accX = (((signed int)accBuff[1]<<8)|accBuff[0])-accOffsetX;	// X axis
    8b9a:	80 91 53 04 	lds	r24, 0x0453
    8b9e:	99 27       	eor	r25, r25
    8ba0:	87 fd       	sbrc	r24, 7
    8ba2:	90 95       	com	r25
    8ba4:	98 2f       	mov	r25, r24
    8ba6:	88 27       	eor	r24, r24
    8ba8:	20 91 52 04 	lds	r18, 0x0452
    8bac:	33 27       	eor	r19, r19
    8bae:	27 fd       	sbrc	r18, 7
    8bb0:	30 95       	com	r19
    8bb2:	82 2b       	or	r24, r18
    8bb4:	93 2b       	or	r25, r19
    8bb6:	20 91 42 04 	lds	r18, 0x0442
    8bba:	30 91 43 04 	lds	r19, 0x0443
    8bbe:	82 1b       	sub	r24, r18
    8bc0:	93 0b       	sbc	r25, r19
    8bc2:	90 93 3d 04 	sts	0x043D, r25
    8bc6:	80 93 3c 04 	sts	0x043C, r24
			accY = (((signed int)accBuff[3]<<8)|accBuff[2])-accOffsetY;	// Y axis
    8bca:	80 91 55 04 	lds	r24, 0x0455
    8bce:	99 27       	eor	r25, r25
    8bd0:	87 fd       	sbrc	r24, 7
    8bd2:	90 95       	com	r25
    8bd4:	98 2f       	mov	r25, r24
    8bd6:	88 27       	eor	r24, r24
    8bd8:	20 91 54 04 	lds	r18, 0x0454
    8bdc:	33 27       	eor	r19, r19
    8bde:	27 fd       	sbrc	r18, 7
    8be0:	30 95       	com	r19
    8be2:	82 2b       	or	r24, r18
    8be4:	93 2b       	or	r25, r19
    8be6:	20 91 44 04 	lds	r18, 0x0444
    8bea:	30 91 45 04 	lds	r19, 0x0445
    8bee:	82 1b       	sub	r24, r18
    8bf0:	93 0b       	sbc	r25, r19
    8bf2:	90 93 3f 04 	sts	0x043F, r25
    8bf6:	80 93 3e 04 	sts	0x043E, r24
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
    8bfa:	80 91 57 04 	lds	r24, 0x0457
    8bfe:	99 27       	eor	r25, r25
    8c00:	87 fd       	sbrc	r24, 7
    8c02:	90 95       	com	r25
    8c04:	98 2f       	mov	r25, r24
    8c06:	88 27       	eor	r24, r24
    8c08:	20 91 56 04 	lds	r18, 0x0456
    8c0c:	33 27       	eor	r19, r19
    8c0e:	27 fd       	sbrc	r18, 7
    8c10:	30 95       	com	r19
    8c12:	82 2b       	or	r24, r18
    8c14:	93 2b       	or	r25, r19
    8c16:	20 91 46 04 	lds	r18, 0x0446
    8c1a:	30 91 47 04 	lds	r19, 0x0447
    8c1e:	82 1b       	sub	r24, r18
    8c20:	93 0b       	sbc	r25, r19
    8c22:	90 93 41 04 	sts	0x0441, r25
    8c26:	80 93 40 04 	sts	0x0440, r24
    8c2a:	08 95       	ret

00008c2c <computeAngle>:

	}

}

void computeAngle() {
    8c2c:	ef 92       	push	r14
    8c2e:	ff 92       	push	r15
    8c30:	0f 93       	push	r16
    8c32:	1f 93       	push	r17

	unsigned int abs_acc_z=abs(accZ);
    8c34:	80 91 40 04 	lds	r24, 0x0440
    8c38:	90 91 41 04 	lds	r25, 0x0441
    8c3c:	97 fd       	sbrc	r25, 7
    8c3e:	6c c0       	rjmp	.+216    	; 0x8d18 <computeAngle+0xec>

	// check the robot motion plane (horizontal or vertical) based on the Z axes;
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
    8c40:	85 31       	cpi	r24, 0x15	; 21
    8c42:	91 05       	cpc	r25, r1
    8c44:	08 f0       	brcs	.+2      	; 0x8c48 <computeAngle+0x1c>
    8c46:	54 c0       	rjmp	.+168    	; 0x8cf0 <computeAngle+0xc4>
		currPosition = HORIZONTAL_POS;
    8c48:	81 e0       	ldi	r24, 0x01	; 1
    8c4a:	80 93 15 02 	sts	0x0215, r24
    8c4e:	21 e0       	ldi	r18, 0x01	; 1
	} else {
		currPosition = VERTICAL_POS;	
	}
	if(currPosition != robotPosition) {			
    8c50:	80 91 16 02 	lds	r24, 0x0216
    8c54:	82 17       	cp	r24, r18
    8c56:	09 f4       	brne	.+2      	; 0x8c5a <computeAngle+0x2e>
    8c58:	53 c0       	rjmp	.+166    	; 0x8d00 <computeAngle+0xd4>
		timesInSamePos++;
    8c5a:	80 91 50 04 	lds	r24, 0x0450
    8c5e:	90 91 51 04 	lds	r25, 0x0451
    8c62:	01 96       	adiw	r24, 0x01	; 1
    8c64:	90 93 51 04 	sts	0x0451, r25
    8c68:	80 93 50 04 	sts	0x0450, r24
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
    8c6c:	88 3c       	cpi	r24, 0xC8	; 200
    8c6e:	91 05       	cpc	r25, r1
    8c70:	08 f0       	brcs	.+2      	; 0x8c74 <computeAngle+0x48>
    8c72:	4b c0       	rjmp	.+150    	; 0x8d0a <computeAngle+0xde>
	} else {
		timesInSamePos = 0;
	}

	// compute the angle using the X and Y axis
	thetaAcc = atan2((float)accX, (float)accY);
    8c74:	60 91 3c 04 	lds	r22, 0x043C
    8c78:	70 91 3d 04 	lds	r23, 0x043D
    8c7c:	88 27       	eor	r24, r24
    8c7e:	77 fd       	sbrc	r23, 7
    8c80:	80 95       	com	r24
    8c82:	98 2f       	mov	r25, r24
    8c84:	0e 94 91 54 	call	0xa922	; 0xa922 <__floatsisf>
    8c88:	7b 01       	movw	r14, r22
    8c8a:	8c 01       	movw	r16, r24
    8c8c:	60 91 3e 04 	lds	r22, 0x043E
    8c90:	70 91 3f 04 	lds	r23, 0x043F
    8c94:	88 27       	eor	r24, r24
    8c96:	77 fd       	sbrc	r23, 7
    8c98:	80 95       	com	r24
    8c9a:	98 2f       	mov	r25, r24
    8c9c:	0e 94 91 54 	call	0xa922	; 0xa922 <__floatsisf>
    8ca0:	9b 01       	movw	r18, r22
    8ca2:	ac 01       	movw	r20, r24
    8ca4:	c8 01       	movw	r24, r16
    8ca6:	b7 01       	movw	r22, r14
    8ca8:	0e 94 9c 53 	call	0xa738	; 0xa738 <atan2>
    8cac:	60 93 b4 04 	sts	0x04B4, r22
    8cb0:	70 93 b5 04 	sts	0x04B5, r23
    8cb4:	80 93 b6 04 	sts	0x04B6, r24
    8cb8:	90 93 b7 04 	sts	0x04B7, r25
	currentAngle = (signed int)(thetaAcc*RAD_2_DEG);
    8cbc:	21 ee       	ldi	r18, 0xE1	; 225
    8cbe:	3e e2       	ldi	r19, 0x2E	; 46
    8cc0:	45 e6       	ldi	r20, 0x65	; 101
    8cc2:	52 e4       	ldi	r21, 0x42	; 66
    8cc4:	0e 94 aa 55 	call	0xab54	; 0xab54 <__mulsf3>
    8cc8:	0e 94 5e 54 	call	0xa8bc	; 0xa8bc <__fixsfsi>
    8ccc:	9b 01       	movw	r18, r22
    8cce:	70 93 4f 04 	sts	0x044F, r23
    8cd2:	60 93 4e 04 	sts	0x044E, r22

	if(currentAngle < 0) {
    8cd6:	77 ff       	sbrs	r23, 7
    8cd8:	06 c0       	rjmp	.+12     	; 0x8ce6 <computeAngle+0xba>
		currentAngle = currentAngle + (signed int)360;	// angles from 0 to 360
    8cda:	28 59       	subi	r18, 0x98	; 152
    8cdc:	3e 4f       	sbci	r19, 0xFE	; 254
    8cde:	30 93 4f 04 	sts	0x044F, r19
    8ce2:	20 93 4e 04 	sts	0x044E, r18
	}

}
    8ce6:	1f 91       	pop	r17
    8ce8:	0f 91       	pop	r16
    8cea:	ff 90       	pop	r15
    8cec:	ef 90       	pop	r14
    8cee:	08 95       	ret
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
		currPosition = HORIZONTAL_POS;
	} else {
		currPosition = VERTICAL_POS;	
    8cf0:	10 92 15 02 	sts	0x0215, r1
    8cf4:	20 e0       	ldi	r18, 0x00	; 0
	}
	if(currPosition != robotPosition) {			
    8cf6:	80 91 16 02 	lds	r24, 0x0216
    8cfa:	82 17       	cp	r24, r18
    8cfc:	09 f0       	breq	.+2      	; 0x8d00 <computeAngle+0xd4>
    8cfe:	ad cf       	rjmp	.-166    	; 0x8c5a <computeAngle+0x2e>
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
			robotPosition = currPosition;
		}
	} else {
		timesInSamePos = 0;
    8d00:	10 92 51 04 	sts	0x0451, r1
    8d04:	10 92 50 04 	sts	0x0450, r1
    8d08:	b5 cf       	rjmp	.-150    	; 0x8c74 <computeAngle+0x48>
		currPosition = VERTICAL_POS;	
	}
	if(currPosition != robotPosition) {			
		timesInSamePos++;
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
    8d0a:	10 92 51 04 	sts	0x0451, r1
    8d0e:	10 92 50 04 	sts	0x0450, r1
			robotPosition = currPosition;
    8d12:	20 93 16 02 	sts	0x0216, r18
    8d16:	ae cf       	rjmp	.-164    	; 0x8c74 <computeAngle+0x48>

}

void computeAngle() {

	unsigned int abs_acc_z=abs(accZ);
    8d18:	90 95       	com	r25
    8d1a:	81 95       	neg	r24
    8d1c:	9f 4f       	sbci	r25, 0xFF	; 255
    8d1e:	90 cf       	rjmp	.-224    	; 0x8c40 <computeAngle+0x14>

00008d20 <writeCalibrationToFlash>:


#include "eepromIO.h"

void writeCalibrationToFlash() {	
	eeprom_update_block(calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
    8d20:	84 ee       	ldi	r24, 0xE4	; 228
    8d22:	98 e0       	ldi	r25, 0x08	; 8
    8d24:	6c e6       	ldi	r22, 0x6C	; 108
    8d26:	7f e0       	ldi	r23, 0x0F	; 15
    8d28:	40 e9       	ldi	r20, 0x90	; 144
    8d2a:	50 e0       	ldi	r21, 0x00	; 0
    8d2c:	0e 94 3b 57 	call	0xae76	; 0xae76 <__eeupd_block_m2560>
	eeprom_update_word ((uint16_t*) CALIB_CHECK_ADDRESS, 0xAA55);   // to let know the calibration data are valid
    8d30:	8a e6       	ldi	r24, 0x6A	; 106
    8d32:	9f e0       	ldi	r25, 0x0F	; 15
    8d34:	65 e5       	ldi	r22, 0x55	; 85
    8d36:	7a ea       	ldi	r23, 0xAA	; 170
    8d38:	0e 94 5d 57 	call	0xaeba	; 0xaeba <__eeupd_word_m2560>
}
    8d3c:	08 95       	ret

00008d3e <readCalibrationFromFlash>:

void readCalibrationFromFlash() {
	eeprom_read_block (calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
    8d3e:	84 ee       	ldi	r24, 0xE4	; 228
    8d40:	98 e0       	ldi	r25, 0x08	; 8
    8d42:	6c e6       	ldi	r22, 0x6C	; 108
    8d44:	7f e0       	ldi	r23, 0x0F	; 15
    8d46:	40 e9       	ldi	r20, 0x90	; 144
    8d48:	50 e0       	ldi	r21, 0x00	; 0
    8d4a:	0e 94 1d 57 	call	0xae3a	; 0xae3a <__eerd_block_m2560>
}
    8d4e:	08 95       	ret

00008d50 <irCommInitTransmitter>:
#include "irCommunication.h"


void irCommInitTransmitter() {
	irCommEnabled = IRCOMM_MODE_TRANSMIT;
    8d50:	82 e0       	ldi	r24, 0x02	; 2
    8d52:	80 93 d4 04 	sts	0x04D4, r24
	irCommState = IRCOMM_TX_IDLE_STATE;
    8d56:	81 e0       	ldi	r24, 0x01	; 1
    8d58:	80 93 d7 04 	sts	0x04D7, r24
}
    8d5c:	08 95       	ret

00008d5e <irCommInitReceiver>:

void irCommInitReceiver() {
	irCommEnabled = IRCOMM_MODE_RECEIVE;
    8d5e:	81 e0       	ldi	r24, 0x01	; 1
    8d60:	80 93 d4 04 	sts	0x04D4, r24
	irCommState = IRCOMM_RX_IDLE_STATE;
    8d64:	80 93 d7 04 	sts	0x04D7, r24
	irCommEnabledNext = IRCOMM_MODE_RECEIVE;
    8d68:	80 93 d5 04 	sts	0x04D5, r24
}
    8d6c:	08 95       	ret

00008d6e <irCommInitVars>:

void irCommInitVars() {
	memset(irCommMaxSensorValueAdc, 0x00, 16);
    8d6e:	e0 91 39 0b 	lds	r30, 0x0B39
    8d72:	f0 91 3a 0b 	lds	r31, 0x0B3A
    8d76:	80 e1       	ldi	r24, 0x10	; 16
    8d78:	df 01       	movw	r26, r30
    8d7a:	1d 92       	st	X+, r1
    8d7c:	8a 95       	dec	r24
    8d7e:	e9 f7       	brne	.-6      	; 0x8d7a <irCommInitVars+0xc>
	memset(irCommMinSensorValueAdc, 0xFF, 16);
    8d80:	80 91 c9 05 	lds	r24, 0x05C9
    8d84:	90 91 ca 05 	lds	r25, 0x05CA
    8d88:	6f ef       	ldi	r22, 0xFF	; 255
    8d8a:	70 e0       	ldi	r23, 0x00	; 0
    8d8c:	40 e1       	ldi	r20, 0x10	; 16
    8d8e:	50 e0       	ldi	r21, 0x00	; 0
    8d90:	0e 94 16 57 	call	0xae2c	; 0xae2c <memset>
	irCommMode = IRCOMM_MODE_SENSORS_SAMPLING;
    8d94:	10 92 d6 04 	sts	0x04D6, r1
}
    8d98:	08 95       	ret

00008d9a <irCommInit>:

void irCommInit() {
	irCommProxValuesAdc = irCommProxValuesBuff1;
    8d9a:	8d ec       	ldi	r24, 0xCD	; 205
    8d9c:	95 e0       	ldi	r25, 0x05	; 5
    8d9e:	90 93 6c 08 	sts	0x086C, r25
    8da2:	80 93 6b 08 	sts	0x086B, r24
	irCommProxValuesCurr = irCommProxValuesBuff2;
    8da6:	8f e0       	ldi	r24, 0x0F	; 15
    8da8:	97 e0       	ldi	r25, 0x07	; 7
    8daa:	90 93 50 08 	sts	0x0850, r25
    8dae:	80 93 4f 08 	sts	0x084F, r24
	irCommMaxSensorValueAdc = irCommMaxSensorValueBuff1;
    8db2:	ea e7       	ldi	r30, 0x7A	; 122
    8db4:	f9 e0       	ldi	r31, 0x09	; 9
    8db6:	f0 93 3a 0b 	sts	0x0B3A, r31
    8dba:	e0 93 39 0b 	sts	0x0B39, r30
	irCommMaxSensorValueCurr = irCommMaxSensorValueBuff2;
    8dbe:	88 e6       	ldi	r24, 0x68	; 104
    8dc0:	9b e0       	ldi	r25, 0x0B	; 11
    8dc2:	90 93 4d 05 	sts	0x054D, r25
    8dc6:	80 93 4c 05 	sts	0x054C, r24
	irCommMinSensorValueAdc = irCommMinSensorValueBuff1;
    8dca:	81 e5       	ldi	r24, 0x51	; 81
    8dcc:	98 e0       	ldi	r25, 0x08	; 8
    8dce:	90 93 ca 05 	sts	0x05CA, r25
    8dd2:	80 93 c9 05 	sts	0x05C9, r24
	irCommMinSensorValueCurr = irCommMinSensorValueBuff2;
    8dd6:	24 ed       	ldi	r18, 0xD4	; 212
    8dd8:	38 e0       	ldi	r19, 0x08	; 8
    8dda:	30 93 39 05 	sts	0x0539, r19
    8dde:	20 93 38 05 	sts	0x0538, r18
	irCommState = IRCOMM_RX_IDLE_STATE;
	irCommEnabledNext = IRCOMM_MODE_RECEIVE;
}

void irCommInitVars() {
	memset(irCommMaxSensorValueAdc, 0x00, 16);
    8de2:	20 e1       	ldi	r18, 0x10	; 16
    8de4:	df 01       	movw	r26, r30
    8de6:	1d 92       	st	X+, r1
    8de8:	2a 95       	dec	r18
    8dea:	e9 f7       	brne	.-6      	; 0x8de6 <irCommInit+0x4c>
	memset(irCommMinSensorValueAdc, 0xFF, 16);
    8dec:	6f ef       	ldi	r22, 0xFF	; 255
    8dee:	70 e0       	ldi	r23, 0x00	; 0
    8df0:	40 e1       	ldi	r20, 0x10	; 16
    8df2:	50 e0       	ldi	r21, 0x00	; 0
    8df4:	0e 94 16 57 	call	0xae2c	; 0xae2c <memset>
	irCommMode = IRCOMM_MODE_SENSORS_SAMPLING;
    8df8:	10 92 d6 04 	sts	0x04D6, r1
	irCommEnabled = IRCOMM_MODE_TRANSMIT;
	irCommState = IRCOMM_TX_IDLE_STATE;
}

void irCommInitReceiver() {
	irCommEnabled = IRCOMM_MODE_RECEIVE;
    8dfc:	81 e0       	ldi	r24, 0x01	; 1
    8dfe:	80 93 d4 04 	sts	0x04D4, r24
	irCommState = IRCOMM_RX_IDLE_STATE;
    8e02:	80 93 d7 04 	sts	0x04D7, r24
	irCommEnabledNext = IRCOMM_MODE_RECEIVE;
    8e06:	80 93 d5 04 	sts	0x04D5, r24
	irCommMaxSensorValueCurr = irCommMaxSensorValueBuff2;
	irCommMinSensorValueAdc = irCommMinSensorValueBuff1;
	irCommMinSensorValueCurr = irCommMinSensorValueBuff2;
	irCommInitVars();
	irCommInitReceiver();
}
    8e0a:	08 95       	ret

00008e0c <irCommDeinit>:

void irCommDeinit() {
	irCommEnabled = IRCOMM_MODE_SENSORS_SAMPLING;
    8e0c:	10 92 d4 04 	sts	0x04D4, r1
	irCommMode = IRCOMM_MODE_SENSORS_SAMPLING;
    8e10:	10 92 d6 04 	sts	0x04D6, r1
}
    8e14:	08 95       	ret

00008e16 <resetDebugVariables>:

void resetDebugVariables() {
    8e16:	ef 92       	push	r14
    8e18:	ff 92       	push	r15
    8e1a:	0f 93       	push	r16
    8e1c:	1f 93       	push	r17
    8e1e:	cf 93       	push	r28
    8e20:	df 93       	push	r29
	irCommRxMaxSensorIndexTemp=0;
    8e22:	10 92 f1 04 	sts	0x04F1, r1
	irCommRxMaxDiffIndexTemp=0;
    8e26:	10 92 f2 04 	sts	0x04F2, r1
	irCommMaxSensorValueCurrIndexTemp=0;
    8e2a:	10 92 f5 04 	sts	0x04F5, r1
	irCommMinSensorValueCurrIndexTemp=0;
    8e2e:	10 92 f6 04 	sts	0x04F6, r1
	memset(irCommRxMaxSensorTemp, 0xFF, 4);
    8e32:	ee 24       	eor	r14, r14
    8e34:	ea 94       	dec	r14
    8e36:	fe 2c       	mov	r15, r14
    8e38:	87 01       	movw	r16, r14
    8e3a:	e0 92 2b 0b 	sts	0x0B2B, r14
    8e3e:	f0 92 2c 0b 	sts	0x0B2C, r15
    8e42:	00 93 2d 0b 	sts	0x0B2D, r16
    8e46:	10 93 2e 0b 	sts	0x0B2E, r17
	memset(irCommRxMaxDiffTemp, 0xFF, 4);
    8e4a:	e0 92 64 0b 	sts	0x0B64, r14
    8e4e:	f0 92 65 0b 	sts	0x0B65, r15
    8e52:	00 93 66 0b 	sts	0x0B66, r16
    8e56:	10 93 67 0b 	sts	0x0B67, r17
	memset(irCommMaxSensorValueCurrTemp, 0xFF, 4);
    8e5a:	e0 92 3a 05 	sts	0x053A, r14
    8e5e:	f0 92 3b 05 	sts	0x053B, r15
    8e62:	00 93 3c 05 	sts	0x053C, r16
    8e66:	10 93 3d 05 	sts	0x053D, r17
	memset(irCommMinSensorValueCurrTemp, 0xFF, 4);
    8e6a:	e0 92 2f 0b 	sts	0x0B2F, r14
    8e6e:	f0 92 30 0b 	sts	0x0B30, r15
    8e72:	00 93 31 0b 	sts	0x0B31, r16
    8e76:	10 93 32 0b 	sts	0x0B32, r17

	irCommStateIndexTemp = 0;					
    8e7a:	10 92 fe 04 	sts	0x04FE, r1
	memset(irCommStateTemp, 0xFF, 14);
    8e7e:	8e e3       	ldi	r24, 0x3E	; 62
    8e80:	95 e0       	ldi	r25, 0x05	; 5
    8e82:	6f ef       	ldi	r22, 0xFF	; 255
    8e84:	70 e0       	ldi	r23, 0x00	; 0
    8e86:	4e e0       	ldi	r20, 0x0E	; 14
    8e88:	50 e0       	ldi	r21, 0x00	; 0
    8e8a:	0e 94 16 57 	call	0xae2c	; 0xae2c <memset>

	irCommShiftCountFinalIndexTemp = 0;
    8e8e:	10 92 f8 04 	sts	0x04F8, r1
	memset(irCommShiftCountFinalTemp, 0xFF, 2);
    8e92:	cf ef       	ldi	r28, 0xFF	; 255
    8e94:	df ef       	ldi	r29, 0xFF	; 255
    8e96:	d0 93 38 0b 	sts	0x0B38, r29
    8e9a:	c0 93 37 0b 	sts	0x0B37, r28
	irCommRxStartBitDetectedIndexTemp = 0;
    8e9e:	10 92 fd 04 	sts	0x04FD, r1
	memset(irCommRxStartBitDetectedTemp, 0xFF, 2);
    8ea2:	d0 93 78 05 	sts	0x0578, r29
    8ea6:	c0 93 77 05 	sts	0x0577, r28
	irCommSwitchCountIndexTemp = 0;
    8eaa:	10 92 f4 04 	sts	0x04F4, r1
	memset(irCommSwitchCountTemp, 0xFF, 2);
    8eae:	d0 93 54 05 	sts	0x0554, r29
    8eb2:	c0 93 53 05 	sts	0x0553, r28
	irCommMaxSensorSignalFiltIndexTemp = 0;
    8eb6:	10 92 f0 04 	sts	0x04F0, r1
	memset(irCommMaxSensorSignalFiltTemp, 0xFF, 80);
    8eba:	89 e7       	ldi	r24, 0x79	; 121
    8ebc:	95 e0       	ldi	r25, 0x05	; 5
    8ebe:	6f ef       	ldi	r22, 0xFF	; 255
    8ec0:	70 e0       	ldi	r23, 0x00	; 0
    8ec2:	40 e5       	ldi	r20, 0x50	; 80
    8ec4:	50 e0       	ldi	r21, 0x00	; 0
    8ec6:	0e 94 16 57 	call	0xae2c	; 0xae2c <memset>
	irCommMaxSensorSignalIndexTemp = 0;
    8eca:	10 92 ef 04 	sts	0x04EF, r1
	memset(irCommMaxSensorSignalTemp, 0xFF, 80);
    8ece:	8d e6       	ldi	r24, 0x6D	; 109
    8ed0:	98 e0       	ldi	r25, 0x08	; 8
    8ed2:	6f ef       	ldi	r22, 0xFF	; 255
    8ed4:	70 e0       	ldi	r23, 0x00	; 0
    8ed6:	40 e5       	ldi	r20, 0x50	; 80
    8ed8:	50 e0       	ldi	r21, 0x00	; 0
    8eda:	0e 94 16 57 	call	0xae2c	; 0xae2c <memset>
	irCommProxMeanIndexTemp = 0;
    8ede:	10 92 f3 04 	sts	0x04F3, r1
	memset(irCommProxMeanTemp, 0xFF, 4);
    8ee2:	e0 92 71 05 	sts	0x0571, r14
    8ee6:	f0 92 72 05 	sts	0x0572, r15
    8eea:	00 93 73 05 	sts	0x0573, r16
    8eee:	10 93 74 05 	sts	0x0574, r17
	irCommComputeShiftIndexTemp = 0;
    8ef2:	10 92 fa 04 	sts	0x04FA, r1
	memset(irCommComputeShiftTemp, 0xFF, 2);
    8ef6:	d0 93 6f 05 	sts	0x056F, r29
    8efa:	c0 93 6e 05 	sts	0x056E, r28
	irCommShiftCountIndexTemp = 0;
    8efe:	10 92 f7 04 	sts	0x04F7, r1
	memset(irCommShiftCountTemp, 0xFF, 2);
    8f02:	d0 93 7e 0b 	sts	0x0B7E, r29
    8f06:	c0 93 7d 0b 	sts	0x0B7D, r28
	irCommRxPeakHighToLowIndexTemp = 0;
    8f0a:	10 92 fb 04 	sts	0x04FB, r1
	memset(irCommRxPeakHighToLowTemp, 0xFF, 2);
    8f0e:	d0 93 cc 05 	sts	0x05CC, r29
    8f12:	c0 93 cb 05 	sts	0x05CB, r28
	irCommRxStartPeakDurationIndexTemp = 0;
    8f16:	10 92 fc 04 	sts	0x04FC, r1
	memset(irCommRxStartPeakDurationTemp, 0xFF, 2);
    8f1a:	d0 93 0e 07 	sts	0x070E, r29
    8f1e:	c0 93 0d 07 	sts	0x070D, r28
	irCommStartDiffIndexTemp = 0;
    8f22:	10 92 f9 04 	sts	0x04F9, r1
	memset(irCommSyncStateTemp, 0xFF, 2);
    8f26:	d0 93 6d 05 	sts	0x056D, r29
    8f2a:	c0 93 6c 05 	sts	0x056C, r28
	irCommSyncStateIndexTemp = 0;
    8f2e:	10 92 ff 04 	sts	0x04FF, r1
	memset(irCommBitsSignalTemp, 0xFF, 400);
    8f32:	89 e9       	ldi	r24, 0x99	; 153
    8f34:	99 e0       	ldi	r25, 0x09	; 9
    8f36:	6f ef       	ldi	r22, 0xFF	; 255
    8f38:	70 e0       	ldi	r23, 0x00	; 0
    8f3a:	40 e9       	ldi	r20, 0x90	; 144
    8f3c:	51 e0       	ldi	r21, 0x01	; 1
    8f3e:	0e 94 16 57 	call	0xae2c	; 0xae2c <memset>
	irCommBitsSignalIndexTemp = 0;
    8f42:	10 92 00 05 	sts	0x0500, r1
	memset(irCommRxBitReceivedTemp, 0xFF, 10);
    8f46:	81 e6       	ldi	r24, 0x61	; 97
    8f48:	98 e0       	ldi	r25, 0x08	; 8
    8f4a:	6f ef       	ldi	r22, 0xFF	; 255
    8f4c:	70 e0       	ldi	r23, 0x00	; 0
    8f4e:	4a e0       	ldi	r20, 0x0A	; 10
    8f50:	50 e0       	ldi	r21, 0x00	; 0
    8f52:	0e 94 16 57 	call	0xae2c	; 0xae2c <memset>
	irCommRxBitReceivedIndexTemp = 0;
    8f56:	10 92 01 05 	sts	0x0501, r1
	
	
}
    8f5a:	df 91       	pop	r29
    8f5c:	cf 91       	pop	r28
    8f5e:	1f 91       	pop	r17
    8f60:	0f 91       	pop	r16
    8f62:	ff 90       	pop	r15
    8f64:	ef 90       	pop	r14
    8f66:	08 95       	ret

00008f68 <irCommTasks>:

void irCommTasks() {
    8f68:	2f 92       	push	r2
    8f6a:	3f 92       	push	r3
    8f6c:	5f 92       	push	r5
    8f6e:	6f 92       	push	r6
    8f70:	7f 92       	push	r7
    8f72:	8f 92       	push	r8
    8f74:	9f 92       	push	r9
    8f76:	af 92       	push	r10
    8f78:	bf 92       	push	r11
    8f7a:	cf 92       	push	r12
    8f7c:	df 92       	push	r13
    8f7e:	ef 92       	push	r14
    8f80:	ff 92       	push	r15
    8f82:	0f 93       	push	r16
    8f84:	1f 93       	push	r17
    8f86:	cf 93       	push	r28
    8f88:	df 93       	push	r29
	int i = 0;

	if(irCommMode==IRCOMM_MODE_RECEIVE) {
    8f8a:	00 91 d6 04 	lds	r16, 0x04D6
    8f8e:	01 30       	cpi	r16, 0x01	; 1
    8f90:	09 f4       	brne	.+2      	; 0x8f94 <irCommTasks+0x2c>
    8f92:	cd c0       	rjmp	.+410    	; 0x912e <irCommTasks+0x1c6>
			case IRCOMM_RX_STOP:
				break;
					
		}

	} else if(irCommMode==IRCOMM_MODE_TRANSMIT) {
    8f94:	02 30       	cpi	r16, 0x02	; 2
    8f96:	91 f0       	breq	.+36     	; 0x8fbc <irCommTasks+0x54>

		}

	}

}
    8f98:	df 91       	pop	r29
    8f9a:	cf 91       	pop	r28
    8f9c:	1f 91       	pop	r17
    8f9e:	0f 91       	pop	r16
    8fa0:	ff 90       	pop	r15
    8fa2:	ef 90       	pop	r14
    8fa4:	df 90       	pop	r13
    8fa6:	cf 90       	pop	r12
    8fa8:	bf 90       	pop	r11
    8faa:	af 90       	pop	r10
    8fac:	9f 90       	pop	r9
    8fae:	8f 90       	pop	r8
    8fb0:	7f 90       	pop	r7
    8fb2:	6f 90       	pop	r6
    8fb4:	5f 90       	pop	r5
    8fb6:	3f 90       	pop	r3
    8fb8:	2f 90       	pop	r2
    8fba:	08 95       	ret
					
		}

	} else if(irCommMode==IRCOMM_MODE_TRANSMIT) {

		switch(irCommState) {
    8fbc:	80 91 d7 04 	lds	r24, 0x04D7
    8fc0:	82 30       	cpi	r24, 0x02	; 2
    8fc2:	09 f4       	brne	.+2      	; 0x8fc6 <irCommTasks+0x5e>
    8fc4:	c8 c2       	rjmp	.+1424   	; 0x9556 <irCommTasks+0x5ee>
    8fc6:	85 30       	cpi	r24, 0x05	; 5
    8fc8:	39 f7       	brne	.-50     	; 0x8f98 <irCommTasks+0x30>
				break;

			case IRCOMM_TX_PREPARE_TRANSMISSION:				
				//updateBlueLed(255);
				//updateBlueLed(0);
				irCommTickCounter = getTime100MicroSec()-irCommTickCounter2;
    8fca:	0e 94 35 22 	call	0x446a	; 0x446a <getTime100MicroSec>
    8fce:	20 91 df 04 	lds	r18, 0x04DF
    8fd2:	30 91 e0 04 	lds	r19, 0x04E0
    8fd6:	40 91 e1 04 	lds	r20, 0x04E1
    8fda:	50 91 e2 04 	lds	r21, 0x04E2
    8fde:	62 1b       	sub	r22, r18
    8fe0:	73 0b       	sbc	r23, r19
    8fe2:	84 0b       	sbc	r24, r20
    8fe4:	95 0b       	sbc	r25, r21
    8fe6:	60 93 db 04 	sts	0x04DB, r22
    8fea:	70 93 dc 04 	sts	0x04DC, r23
    8fee:	80 93 dd 04 	sts	0x04DD, r24
    8ff2:	90 93 de 04 	sts	0x04DE, r25
				irCommTickCounter2 = getTime100MicroSec();
    8ff6:	0e 94 35 22 	call	0x446a	; 0x446a <getTime100MicroSec>
    8ffa:	60 93 df 04 	sts	0x04DF, r22
    8ffe:	70 93 e0 04 	sts	0x04E0, r23
    9002:	80 93 e1 04 	sts	0x04E1, r24
    9006:	90 93 e2 04 	sts	0x04E2, r25
				irCommTxBitToTransmit[0] = 2;	// start bit 1
    900a:	00 93 56 05 	sts	0x0556, r16
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
    900e:	83 e0       	ldi	r24, 0x03	; 3
    9010:	80 93 57 05 	sts	0x0557, r24
    9014:	80 91 27 05 	lds	r24, 0x0527
    9018:	90 e0       	ldi	r25, 0x00	; 0
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    901a:	9c 01       	movw	r18, r24
    901c:	21 70       	andi	r18, 0x01	; 1
    901e:	30 70       	andi	r19, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    9020:	20 93 5f 05 	sts	0x055F, r18
	irCommRxBitReceivedIndexTemp = 0;
	
	
}

void irCommTasks() {
    9024:	41 e0       	ldi	r20, 0x01	; 1
    9026:	21 30       	cpi	r18, 0x01	; 1
    9028:	31 05       	cpc	r19, r1
    902a:	09 f0       	breq	.+2      	; 0x902e <irCommTasks+0xc6>
    902c:	40 e0       	ldi	r20, 0x00	; 0
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    902e:	9c 01       	movw	r18, r24
    9030:	35 95       	asr	r19
    9032:	27 95       	ror	r18
    9034:	21 70       	andi	r18, 0x01	; 1
    9036:	30 70       	andi	r19, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    9038:	20 93 5e 05 	sts	0x055E, r18
					if(irCommTempValue==1) {
    903c:	21 30       	cpi	r18, 0x01	; 1
    903e:	31 05       	cpc	r19, r1
    9040:	09 f4       	brne	.+2      	; 0x9044 <irCommTasks+0xdc>
    9042:	a0 c7       	rjmp	.+3904   	; 0x9f84 <irCommTasks+0x101c>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    9044:	9c 01       	movw	r18, r24
    9046:	35 95       	asr	r19
    9048:	27 95       	ror	r18
    904a:	35 95       	asr	r19
    904c:	27 95       	ror	r18
    904e:	21 70       	andi	r18, 0x01	; 1
    9050:	30 70       	andi	r19, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    9052:	20 93 5d 05 	sts	0x055D, r18
					if(irCommTempValue==1) {
    9056:	21 30       	cpi	r18, 0x01	; 1
    9058:	31 05       	cpc	r19, r1
    905a:	09 f4       	brne	.+2      	; 0x905e <irCommTasks+0xf6>
    905c:	91 c7       	rjmp	.+3874   	; 0x9f80 <irCommTasks+0x1018>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    905e:	9c 01       	movw	r18, r24
    9060:	35 95       	asr	r19
    9062:	27 95       	ror	r18
    9064:	35 95       	asr	r19
    9066:	27 95       	ror	r18
    9068:	35 95       	asr	r19
    906a:	27 95       	ror	r18
    906c:	21 70       	andi	r18, 0x01	; 1
    906e:	30 70       	andi	r19, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    9070:	20 93 5c 05 	sts	0x055C, r18
					if(irCommTempValue==1) {
    9074:	21 30       	cpi	r18, 0x01	; 1
    9076:	31 05       	cpc	r19, r1
    9078:	09 f4       	brne	.+2      	; 0x907c <irCommTasks+0x114>
    907a:	80 c7       	rjmp	.+3840   	; 0x9f7c <irCommTasks+0x1014>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    907c:	9c 01       	movw	r18, r24
    907e:	35 95       	asr	r19
    9080:	27 95       	ror	r18
    9082:	35 95       	asr	r19
    9084:	27 95       	ror	r18
    9086:	35 95       	asr	r19
    9088:	27 95       	ror	r18
    908a:	35 95       	asr	r19
    908c:	27 95       	ror	r18
    908e:	21 70       	andi	r18, 0x01	; 1
    9090:	30 70       	andi	r19, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    9092:	20 93 5b 05 	sts	0x055B, r18
					if(irCommTempValue==1) {
    9096:	21 30       	cpi	r18, 0x01	; 1
    9098:	31 05       	cpc	r19, r1
    909a:	09 f4       	brne	.+2      	; 0x909e <irCommTasks+0x136>
    909c:	6d c7       	rjmp	.+3802   	; 0x9f78 <irCommTasks+0x1010>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    909e:	9c 01       	movw	r18, r24
    90a0:	35 95       	asr	r19
    90a2:	27 95       	ror	r18
    90a4:	35 95       	asr	r19
    90a6:	27 95       	ror	r18
    90a8:	35 95       	asr	r19
    90aa:	27 95       	ror	r18
    90ac:	35 95       	asr	r19
    90ae:	27 95       	ror	r18
    90b0:	35 95       	asr	r19
    90b2:	27 95       	ror	r18
    90b4:	21 70       	andi	r18, 0x01	; 1
    90b6:	30 70       	andi	r19, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    90b8:	20 93 5a 05 	sts	0x055A, r18
					if(irCommTempValue==1) {
    90bc:	21 30       	cpi	r18, 0x01	; 1
    90be:	31 05       	cpc	r19, r1
    90c0:	09 f4       	brne	.+2      	; 0x90c4 <irCommTasks+0x15c>
    90c2:	6e c7       	rjmp	.+3804   	; 0x9fa0 <irCommTasks+0x1038>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    90c4:	9c 01       	movw	r18, r24
    90c6:	02 2e       	mov	r0, r18
    90c8:	23 2f       	mov	r18, r19
    90ca:	00 0c       	add	r0, r0
    90cc:	22 1f       	adc	r18, r18
    90ce:	33 0b       	sbc	r19, r19
    90d0:	00 0c       	add	r0, r0
    90d2:	22 1f       	adc	r18, r18
    90d4:	33 1f       	adc	r19, r19
    90d6:	21 70       	andi	r18, 0x01	; 1
    90d8:	30 70       	andi	r19, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    90da:	20 93 59 05 	sts	0x0559, r18
					if(irCommTempValue==1) {
    90de:	21 30       	cpi	r18, 0x01	; 1
    90e0:	31 05       	cpc	r19, r1
    90e2:	09 f4       	brne	.+2      	; 0x90e6 <irCommTasks+0x17e>
    90e4:	51 c7       	rjmp	.+3746   	; 0x9f88 <irCommTasks+0x1020>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    90e6:	88 0f       	add	r24, r24
    90e8:	89 2f       	mov	r24, r25
    90ea:	88 1f       	adc	r24, r24
    90ec:	99 0b       	sbc	r25, r25
    90ee:	91 95       	neg	r25
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    90f0:	80 93 58 05 	sts	0x0558, r24
					if(irCommTempValue==1) {
    90f4:	81 30       	cpi	r24, 0x01	; 1
    90f6:	91 05       	cpc	r25, r1
    90f8:	09 f4       	brne	.+2      	; 0x90fc <irCommTasks+0x194>
    90fa:	54 c7       	rjmp	.+3752   	; 0x9fa4 <irCommTasks+0x103c>
						irCommTxCrc++;
    90fc:	90 93 d9 04 	sts	0x04D9, r25
    9100:	80 93 d8 04 	sts	0x04D8, r24
					}
					//irCommTxBitToTransmit[9-i] = 2;
				}
				irCommTxCrc = irCommTxCrc % 4;
    9104:	43 70       	andi	r20, 0x03	; 3
				irCommTxCrc = 4 - irCommTxCrc;
    9106:	84 e0       	ldi	r24, 0x04	; 4
    9108:	84 1b       	sub	r24, r20
    910a:	80 93 2d 05 	sts	0x052D, r24
				irCommTxBitToTransmit[10] = (irCommTxCrc>>1)&0x01;
    910e:	98 2f       	mov	r25, r24
    9110:	96 95       	lsr	r25
    9112:	91 70       	andi	r25, 0x01	; 1
    9114:	90 93 60 05 	sts	0x0560, r25
				irCommTxBitToTransmit[11] = irCommTxCrc&0x01;	
    9118:	81 70       	andi	r24, 0x01	; 1
    911a:	80 93 61 05 	sts	0x0561, r24
				irCommTxBitCount = 0;							
    911e:	10 92 2e 05 	sts	0x052E, r1
				irCommTxPulseState = 0;	
    9122:	10 92 2f 05 	sts	0x052F, r1
				irCommState = IRCOMM_TX_COMPUTE_TIMINGS;				
    9126:	82 e0       	ldi	r24, 0x02	; 2
    9128:	80 93 d7 04 	sts	0x04D7, r24
				break;
    912c:	35 cf       	rjmp	.-406    	; 0x8f98 <irCommTasks+0x30>
void irCommTasks() {
	int i = 0;

	if(irCommMode==IRCOMM_MODE_RECEIVE) {

		switch(irCommState) {
    912e:	10 91 d7 04 	lds	r17, 0x04D7
    9132:	13 30       	cpi	r17, 0x03	; 3
    9134:	09 f4       	brne	.+2      	; 0x9138 <irCommTasks+0x1d0>
    9136:	d9 c2       	rjmp	.+1458   	; 0x96ea <irCommTasks+0x782>
    9138:	14 30       	cpi	r17, 0x04	; 4
    913a:	08 f0       	brcs	.+2      	; 0x913e <irCommTasks+0x1d6>
    913c:	3b c2       	rjmp	.+1142   	; 0x95b4 <irCommTasks+0x64c>
    913e:	11 30       	cpi	r17, 0x01	; 1
    9140:	09 f4       	brne	.+2      	; 0x9144 <irCommTasks+0x1dc>
    9142:	74 c6       	rjmp	.+3304   	; 0x9e2c <irCommTasks+0xec4>
    9144:	12 30       	cpi	r17, 0x02	; 2
    9146:	09 f0       	breq	.+2      	; 0x914a <irCommTasks+0x1e2>
    9148:	27 cf       	rjmp	.-434    	; 0x8f98 <irCommTasks+0x30>
#include "irCommunication.h"


void irCommInitTransmitter() {
	irCommEnabled = IRCOMM_MODE_TRANSMIT;
	irCommState = IRCOMM_TX_IDLE_STATE;
    914a:	a0 91 4c 05 	lds	r26, 0x054C
    914e:	b0 91 4d 05 	lds	r27, 0x054D
    9152:	e0 91 38 05 	lds	r30, 0x0538
    9156:	f0 91 39 05 	lds	r31, 0x0539
    915a:	40 91 25 05 	lds	r20, 0x0525
				break;

			case IRCOMM_RX_MAX_SENSOR_STATE:
				// check from how many sensors the robot is receiving a possible message
				for(i=0; i<8; i++) {
					if((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    915e:	8d 91       	ld	r24, X+
    9160:	9c 91       	ld	r25, X
    9162:	11 97       	sbiw	r26, 0x01	; 1
    9164:	20 81       	ld	r18, Z
    9166:	31 81       	ldd	r19, Z+1	; 0x01
    9168:	82 1b       	sub	r24, r18
    916a:	93 0b       	sbc	r25, r19
    916c:	80 35       	cpi	r24, 0x50	; 80
    916e:	91 05       	cpc	r25, r1
    9170:	1c f0       	brlt	.+6      	; 0x9178 <irCommTasks+0x210>
						irCommRxNumReceivingSensors++;
    9172:	4f 5f       	subi	r20, 0xFF	; 255
    9174:	40 93 25 05 	sts	0x0525, r20
				break;

			case IRCOMM_RX_MAX_SENSOR_STATE:
				// check from how many sensors the robot is receiving a possible message
				for(i=0; i<8; i++) {
					if((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    9178:	12 96       	adiw	r26, 0x02	; 2
    917a:	8d 91       	ld	r24, X+
    917c:	9c 91       	ld	r25, X
    917e:	13 97       	sbiw	r26, 0x03	; 3
    9180:	22 81       	ldd	r18, Z+2	; 0x02
    9182:	33 81       	ldd	r19, Z+3	; 0x03
    9184:	82 1b       	sub	r24, r18
    9186:	93 0b       	sbc	r25, r19
    9188:	80 35       	cpi	r24, 0x50	; 80
    918a:	91 05       	cpc	r25, r1
    918c:	0c f0       	brlt	.+2      	; 0x9190 <irCommTasks+0x228>
    918e:	29 c7       	rjmp	.+3666   	; 0x9fe2 <irCommTasks+0x107a>
    9190:	40 91 25 05 	lds	r20, 0x0525
    9194:	14 96       	adiw	r26, 0x04	; 4
    9196:	8d 91       	ld	r24, X+
    9198:	9c 91       	ld	r25, X
    919a:	15 97       	sbiw	r26, 0x05	; 5
    919c:	24 81       	ldd	r18, Z+4	; 0x04
    919e:	35 81       	ldd	r19, Z+5	; 0x05
    91a0:	82 1b       	sub	r24, r18
    91a2:	93 0b       	sbc	r25, r19
    91a4:	80 35       	cpi	r24, 0x50	; 80
    91a6:	91 05       	cpc	r25, r1
    91a8:	0c f0       	brlt	.+2      	; 0x91ac <irCommTasks+0x244>
    91aa:	17 c7       	rjmp	.+3630   	; 0x9fda <irCommTasks+0x1072>
    91ac:	40 91 25 05 	lds	r20, 0x0525
    91b0:	16 96       	adiw	r26, 0x06	; 6
    91b2:	8d 91       	ld	r24, X+
    91b4:	9c 91       	ld	r25, X
    91b6:	17 97       	sbiw	r26, 0x07	; 7
    91b8:	26 81       	ldd	r18, Z+6	; 0x06
    91ba:	37 81       	ldd	r19, Z+7	; 0x07
    91bc:	82 1b       	sub	r24, r18
    91be:	93 0b       	sbc	r25, r19
    91c0:	80 35       	cpi	r24, 0x50	; 80
    91c2:	91 05       	cpc	r25, r1
    91c4:	0c f0       	brlt	.+2      	; 0x91c8 <irCommTasks+0x260>
    91c6:	05 c7       	rjmp	.+3594   	; 0x9fd2 <irCommTasks+0x106a>
    91c8:	40 91 25 05 	lds	r20, 0x0525
    91cc:	18 96       	adiw	r26, 0x08	; 8
    91ce:	8d 91       	ld	r24, X+
    91d0:	9c 91       	ld	r25, X
    91d2:	19 97       	sbiw	r26, 0x09	; 9
    91d4:	20 85       	ldd	r18, Z+8	; 0x08
    91d6:	31 85       	ldd	r19, Z+9	; 0x09
    91d8:	82 1b       	sub	r24, r18
    91da:	93 0b       	sbc	r25, r19
    91dc:	80 35       	cpi	r24, 0x50	; 80
    91de:	91 05       	cpc	r25, r1
    91e0:	0c f0       	brlt	.+2      	; 0x91e4 <irCommTasks+0x27c>
    91e2:	f3 c6       	rjmp	.+3558   	; 0x9fca <irCommTasks+0x1062>
    91e4:	40 91 25 05 	lds	r20, 0x0525
    91e8:	1a 96       	adiw	r26, 0x0a	; 10
    91ea:	8d 91       	ld	r24, X+
    91ec:	9c 91       	ld	r25, X
    91ee:	1b 97       	sbiw	r26, 0x0b	; 11
    91f0:	22 85       	ldd	r18, Z+10	; 0x0a
    91f2:	33 85       	ldd	r19, Z+11	; 0x0b
    91f4:	82 1b       	sub	r24, r18
    91f6:	93 0b       	sbc	r25, r19
    91f8:	80 35       	cpi	r24, 0x50	; 80
    91fa:	91 05       	cpc	r25, r1
    91fc:	0c f0       	brlt	.+2      	; 0x9200 <irCommTasks+0x298>
    91fe:	f9 c6       	rjmp	.+3570   	; 0x9ff2 <irCommTasks+0x108a>
    9200:	40 91 25 05 	lds	r20, 0x0525
    9204:	1c 96       	adiw	r26, 0x0c	; 12
    9206:	8d 91       	ld	r24, X+
    9208:	9c 91       	ld	r25, X
    920a:	1d 97       	sbiw	r26, 0x0d	; 13
    920c:	24 85       	ldd	r18, Z+12	; 0x0c
    920e:	35 85       	ldd	r19, Z+13	; 0x0d
    9210:	82 1b       	sub	r24, r18
    9212:	93 0b       	sbc	r25, r19
    9214:	80 35       	cpi	r24, 0x50	; 80
    9216:	91 05       	cpc	r25, r1
    9218:	0c f0       	brlt	.+2      	; 0x921c <irCommTasks+0x2b4>
    921a:	e7 c6       	rjmp	.+3534   	; 0x9fea <irCommTasks+0x1082>
    921c:	40 91 25 05 	lds	r20, 0x0525
    9220:	1e 96       	adiw	r26, 0x0e	; 14
    9222:	8d 91       	ld	r24, X+
    9224:	9c 91       	ld	r25, X
    9226:	1f 97       	sbiw	r26, 0x0f	; 15
    9228:	26 85       	ldd	r18, Z+14	; 0x0e
    922a:	37 85       	ldd	r19, Z+15	; 0x0f
    922c:	82 1b       	sub	r24, r18
    922e:	93 0b       	sbc	r25, r19
    9230:	80 35       	cpi	r24, 0x50	; 80
    9232:	91 05       	cpc	r25, r1
    9234:	0c f0       	brlt	.+2      	; 0x9238 <irCommTasks+0x2d0>
    9236:	c4 c6       	rjmp	.+3464   	; 0x9fc0 <irCommTasks+0x1058>
    9238:	80 91 25 05 	lds	r24, 0x0525
						irCommRxNumReceivingSensors++;
					}					
				}
				if(irCommRxNumReceivingSensors==0) {
    923c:	88 23       	and	r24, r24
    923e:	09 f4       	brne	.+2      	; 0x9242 <irCommTasks+0x2da>
    9240:	1f c7       	rjmp	.+3646   	; 0xa080 <irCommTasks+0x1118>
						irCommRxMaxSensor++;
					} else {
						irCommRxMaxSensor = 0;
					}
				} else {
					if(irCommRxStartBitDetected==0) {
    9242:	80 91 1e 05 	lds	r24, 0x051E
    9246:	88 23       	and	r24, r24
    9248:	09 f0       	breq	.+2      	; 0x924c <irCommTasks+0x2e4>
    924a:	d7 c6       	rjmp	.+3502   	; 0x9ffa <irCommTasks+0x1092>
						// start listening from the next sensor
						if(irCommRxMaxSensor < 7) {
    924c:	20 91 23 05 	lds	r18, 0x0523
    9250:	30 91 24 05 	lds	r19, 0x0524
    9254:	27 30       	cpi	r18, 0x07	; 7
    9256:	31 05       	cpc	r19, r1
    9258:	0c f0       	brlt	.+2      	; 0x925c <irCommTasks+0x2f4>
    925a:	db c7       	rjmp	.+4022   	; 0xa212 <irCommTasks+0x12aa>
							irCommRxMaxSensor++;
    925c:	2f 5f       	subi	r18, 0xFF	; 255
    925e:	3f 4f       	sbci	r19, 0xFF	; 255
    9260:	30 93 24 05 	sts	0x0524, r19
    9264:	20 93 23 05 	sts	0x0523, r18
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    9268:	e9 01       	movw	r28, r18
    926a:	cc 0f       	add	r28, r28
    926c:	dd 1f       	adc	r29, r29
    926e:	ad 01       	movw	r20, r26
    9270:	4c 0f       	add	r20, r28
    9272:	5d 1f       	adc	r21, r29
    9274:	8e 01       	movw	r16, r28
    9276:	0e 0f       	add	r16, r30
    9278:	1f 1f       	adc	r17, r31
    927a:	ea 01       	movw	r28, r20
    927c:	88 81       	ld	r24, Y
    927e:	99 81       	ldd	r25, Y+1	; 0x01
    9280:	e8 01       	movw	r28, r16
    9282:	68 81       	ld	r22, Y
    9284:	79 81       	ldd	r23, Y+1	; 0x01
    9286:	86 1b       	sub	r24, r22
    9288:	97 0b       	sbc	r25, r23
    928a:	80 35       	cpi	r24, 0x50	; 80
    928c:	91 05       	cpc	r25, r1
    928e:	0c f0       	brlt	.+2      	; 0x9292 <irCommTasks+0x32a>
    9290:	ca c6       	rjmp	.+3476   	; 0xa026 <irCommTasks+0x10be>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    9292:	27 30       	cpi	r18, 0x07	; 7
    9294:	31 05       	cpc	r19, r1
    9296:	09 f0       	breq	.+2      	; 0x929a <irCommTasks+0x332>
    9298:	c3 c7       	rjmp	.+3974   	; 0xa220 <irCommTasks+0x12b8>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
    929a:	10 92 24 05 	sts	0x0524, r1
    929e:	10 92 23 05 	sts	0x0523, r1
    92a2:	20 91 23 05 	lds	r18, 0x0523
    92a6:	30 91 24 05 	lds	r19, 0x0524
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    92aa:	e9 01       	movw	r28, r18
    92ac:	cc 0f       	add	r28, r28
    92ae:	dd 1f       	adc	r29, r29
    92b0:	ad 01       	movw	r20, r26
    92b2:	4c 0f       	add	r20, r28
    92b4:	5d 1f       	adc	r21, r29
    92b6:	8e 01       	movw	r16, r28
    92b8:	0e 0f       	add	r16, r30
    92ba:	1f 1f       	adc	r17, r31
    92bc:	ea 01       	movw	r28, r20
    92be:	88 81       	ld	r24, Y
    92c0:	99 81       	ldd	r25, Y+1	; 0x01
    92c2:	e8 01       	movw	r28, r16
    92c4:	68 81       	ld	r22, Y
    92c6:	79 81       	ldd	r23, Y+1	; 0x01
    92c8:	86 1b       	sub	r24, r22
    92ca:	97 0b       	sbc	r25, r23
    92cc:	80 35       	cpi	r24, 0x50	; 80
    92ce:	91 05       	cpc	r25, r1
    92d0:	0c f0       	brlt	.+2      	; 0x92d4 <irCommTasks+0x36c>
    92d2:	a9 c6       	rjmp	.+3410   	; 0xa026 <irCommTasks+0x10be>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    92d4:	27 30       	cpi	r18, 0x07	; 7
    92d6:	31 05       	cpc	r19, r1
    92d8:	0c f4       	brge	.+2      	; 0x92dc <irCommTasks+0x374>
    92da:	b0 c7       	rjmp	.+3936   	; 0xa23c <irCommTasks+0x12d4>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
    92dc:	10 92 24 05 	sts	0x0524, r1
    92e0:	10 92 23 05 	sts	0x0523, r1
    92e4:	20 91 23 05 	lds	r18, 0x0523
    92e8:	30 91 24 05 	lds	r19, 0x0524
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    92ec:	e9 01       	movw	r28, r18
    92ee:	cc 0f       	add	r28, r28
    92f0:	dd 1f       	adc	r29, r29
    92f2:	ad 01       	movw	r20, r26
    92f4:	4c 0f       	add	r20, r28
    92f6:	5d 1f       	adc	r21, r29
    92f8:	8e 01       	movw	r16, r28
    92fa:	0e 0f       	add	r16, r30
    92fc:	1f 1f       	adc	r17, r31
    92fe:	ea 01       	movw	r28, r20
    9300:	88 81       	ld	r24, Y
    9302:	99 81       	ldd	r25, Y+1	; 0x01
    9304:	e8 01       	movw	r28, r16
    9306:	68 81       	ld	r22, Y
    9308:	79 81       	ldd	r23, Y+1	; 0x01
    930a:	86 1b       	sub	r24, r22
    930c:	97 0b       	sbc	r25, r23
    930e:	80 35       	cpi	r24, 0x50	; 80
    9310:	91 05       	cpc	r25, r1
    9312:	0c f0       	brlt	.+2      	; 0x9316 <irCommTasks+0x3ae>
    9314:	88 c6       	rjmp	.+3344   	; 0xa026 <irCommTasks+0x10be>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    9316:	27 30       	cpi	r18, 0x07	; 7
    9318:	31 05       	cpc	r19, r1
    931a:	0c f4       	brge	.+2      	; 0x931e <irCommTasks+0x3b6>
    931c:	88 c7       	rjmp	.+3856   	; 0xa22e <irCommTasks+0x12c6>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
    931e:	10 92 24 05 	sts	0x0524, r1
    9322:	10 92 23 05 	sts	0x0523, r1
    9326:	20 91 23 05 	lds	r18, 0x0523
    932a:	30 91 24 05 	lds	r19, 0x0524
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    932e:	e9 01       	movw	r28, r18
    9330:	cc 0f       	add	r28, r28
    9332:	dd 1f       	adc	r29, r29
    9334:	ad 01       	movw	r20, r26
    9336:	4c 0f       	add	r20, r28
    9338:	5d 1f       	adc	r21, r29
    933a:	8e 01       	movw	r16, r28
    933c:	0e 0f       	add	r16, r30
    933e:	1f 1f       	adc	r17, r31
    9340:	ea 01       	movw	r28, r20
    9342:	88 81       	ld	r24, Y
    9344:	99 81       	ldd	r25, Y+1	; 0x01
    9346:	e8 01       	movw	r28, r16
    9348:	68 81       	ld	r22, Y
    934a:	79 81       	ldd	r23, Y+1	; 0x01
    934c:	86 1b       	sub	r24, r22
    934e:	97 0b       	sbc	r25, r23
    9350:	80 35       	cpi	r24, 0x50	; 80
    9352:	91 05       	cpc	r25, r1
    9354:	0c f0       	brlt	.+2      	; 0x9358 <irCommTasks+0x3f0>
    9356:	67 c6       	rjmp	.+3278   	; 0xa026 <irCommTasks+0x10be>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    9358:	27 30       	cpi	r18, 0x07	; 7
    935a:	31 05       	cpc	r19, r1
    935c:	0c f4       	brge	.+2      	; 0x9360 <irCommTasks+0x3f8>
    935e:	db c7       	rjmp	.+4022   	; 0xa316 <irCommTasks+0x13ae>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
    9360:	10 92 24 05 	sts	0x0524, r1
    9364:	10 92 23 05 	sts	0x0523, r1
    9368:	20 91 23 05 	lds	r18, 0x0523
    936c:	30 91 24 05 	lds	r19, 0x0524
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    9370:	e9 01       	movw	r28, r18
    9372:	cc 0f       	add	r28, r28
    9374:	dd 1f       	adc	r29, r29
    9376:	ad 01       	movw	r20, r26
    9378:	4c 0f       	add	r20, r28
    937a:	5d 1f       	adc	r21, r29
    937c:	8e 01       	movw	r16, r28
    937e:	0e 0f       	add	r16, r30
    9380:	1f 1f       	adc	r17, r31
    9382:	ea 01       	movw	r28, r20
    9384:	88 81       	ld	r24, Y
    9386:	99 81       	ldd	r25, Y+1	; 0x01
    9388:	e8 01       	movw	r28, r16
    938a:	68 81       	ld	r22, Y
    938c:	79 81       	ldd	r23, Y+1	; 0x01
    938e:	86 1b       	sub	r24, r22
    9390:	97 0b       	sbc	r25, r23
    9392:	80 35       	cpi	r24, 0x50	; 80
    9394:	91 05       	cpc	r25, r1
    9396:	0c f0       	brlt	.+2      	; 0x939a <irCommTasks+0x432>
    9398:	46 c6       	rjmp	.+3212   	; 0xa026 <irCommTasks+0x10be>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    939a:	27 30       	cpi	r18, 0x07	; 7
    939c:	31 05       	cpc	r19, r1
    939e:	0c f4       	brge	.+2      	; 0x93a2 <irCommTasks+0x43a>
    93a0:	c1 c7       	rjmp	.+3970   	; 0xa324 <irCommTasks+0x13bc>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
    93a2:	10 92 24 05 	sts	0x0524, r1
    93a6:	10 92 23 05 	sts	0x0523, r1
    93aa:	20 91 23 05 	lds	r18, 0x0523
    93ae:	30 91 24 05 	lds	r19, 0x0524
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    93b2:	e9 01       	movw	r28, r18
    93b4:	cc 0f       	add	r28, r28
    93b6:	dd 1f       	adc	r29, r29
    93b8:	ad 01       	movw	r20, r26
    93ba:	4c 0f       	add	r20, r28
    93bc:	5d 1f       	adc	r21, r29
    93be:	8e 01       	movw	r16, r28
    93c0:	0e 0f       	add	r16, r30
    93c2:	1f 1f       	adc	r17, r31
    93c4:	ea 01       	movw	r28, r20
    93c6:	88 81       	ld	r24, Y
    93c8:	99 81       	ldd	r25, Y+1	; 0x01
    93ca:	e8 01       	movw	r28, r16
    93cc:	68 81       	ld	r22, Y
    93ce:	79 81       	ldd	r23, Y+1	; 0x01
    93d0:	86 1b       	sub	r24, r22
    93d2:	97 0b       	sbc	r25, r23
    93d4:	80 35       	cpi	r24, 0x50	; 80
    93d6:	91 05       	cpc	r25, r1
    93d8:	0c f0       	brlt	.+2      	; 0x93dc <irCommTasks+0x474>
    93da:	25 c6       	rjmp	.+3146   	; 0xa026 <irCommTasks+0x10be>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    93dc:	27 30       	cpi	r18, 0x07	; 7
    93de:	31 05       	cpc	r19, r1
    93e0:	0c f4       	brge	.+2      	; 0x93e4 <irCommTasks+0x47c>
    93e2:	a7 c7       	rjmp	.+3918   	; 0xa332 <irCommTasks+0x13ca>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
    93e4:	10 92 24 05 	sts	0x0524, r1
    93e8:	10 92 23 05 	sts	0x0523, r1
    93ec:	20 91 23 05 	lds	r18, 0x0523
    93f0:	30 91 24 05 	lds	r19, 0x0524
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    93f4:	e9 01       	movw	r28, r18
    93f6:	cc 0f       	add	r28, r28
    93f8:	dd 1f       	adc	r29, r29
    93fa:	ad 01       	movw	r20, r26
    93fc:	4c 0f       	add	r20, r28
    93fe:	5d 1f       	adc	r21, r29
    9400:	8e 01       	movw	r16, r28
    9402:	0e 0f       	add	r16, r30
    9404:	1f 1f       	adc	r17, r31
    9406:	ea 01       	movw	r28, r20
    9408:	88 81       	ld	r24, Y
    940a:	99 81       	ldd	r25, Y+1	; 0x01
    940c:	e8 01       	movw	r28, r16
    940e:	68 81       	ld	r22, Y
    9410:	79 81       	ldd	r23, Y+1	; 0x01
    9412:	86 1b       	sub	r24, r22
    9414:	97 0b       	sbc	r25, r23
    9416:	80 35       	cpi	r24, 0x50	; 80
    9418:	91 05       	cpc	r25, r1
    941a:	0c f0       	brlt	.+2      	; 0x941e <irCommTasks+0x4b6>
    941c:	04 c6       	rjmp	.+3080   	; 0xa026 <irCommTasks+0x10be>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    941e:	27 30       	cpi	r18, 0x07	; 7
    9420:	31 05       	cpc	r19, r1
    9422:	0c f4       	brge	.+2      	; 0x9426 <irCommTasks+0x4be>
    9424:	8d c7       	rjmp	.+3866   	; 0xa340 <irCommTasks+0x13d8>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
    9426:	10 92 24 05 	sts	0x0524, r1
    942a:	10 92 23 05 	sts	0x0523, r1
    942e:	20 91 23 05 	lds	r18, 0x0523
    9432:	30 91 24 05 	lds	r19, 0x0524
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    9436:	e9 01       	movw	r28, r18
    9438:	cc 0f       	add	r28, r28
    943a:	dd 1f       	adc	r29, r29
    943c:	ad 01       	movw	r20, r26
    943e:	4c 0f       	add	r20, r28
    9440:	5d 1f       	adc	r21, r29
    9442:	8e 01       	movw	r16, r28
    9444:	0e 0f       	add	r16, r30
    9446:	1f 1f       	adc	r17, r31
    9448:	ea 01       	movw	r28, r20
    944a:	88 81       	ld	r24, Y
    944c:	99 81       	ldd	r25, Y+1	; 0x01
    944e:	e8 01       	movw	r28, r16
    9450:	68 81       	ld	r22, Y
    9452:	79 81       	ldd	r23, Y+1	; 0x01
    9454:	86 1b       	sub	r24, r22
    9456:	97 0b       	sbc	r25, r23
    9458:	80 35       	cpi	r24, 0x50	; 80
    945a:	91 05       	cpc	r25, r1
    945c:	0c f0       	brlt	.+2      	; 0x9460 <irCommTasks+0x4f8>
    945e:	e3 c5       	rjmp	.+3014   	; 0xa026 <irCommTasks+0x10be>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    9460:	27 30       	cpi	r18, 0x07	; 7
    9462:	31 05       	cpc	r19, r1
    9464:	0c f0       	brlt	.+2      	; 0x9468 <irCommTasks+0x500>
    9466:	73 c7       	rjmp	.+3814   	; 0xa34e <irCommTasks+0x13e6>
								irCommRxMaxSensor++;
    9468:	2f 5f       	subi	r18, 0xFF	; 255
    946a:	3f 4f       	sbci	r19, 0xFF	; 255
    946c:	30 93 24 05 	sts	0x0524, r19
    9470:	20 93 23 05 	sts	0x0523, r18
							} else {
								irCommRxMaxSensor = 0;
    9474:	80 91 21 05 	lds	r24, 0x0521
    9478:	90 91 22 05 	lds	r25, 0x0522
    947c:	e9 01       	movw	r28, r18
    947e:	cc 0f       	add	r28, r28
    9480:	dd 1f       	adc	r29, r29
    9482:	ad 01       	movw	r20, r26
    9484:	4c 0f       	add	r20, r28
    9486:	5d 1f       	adc	r21, r29
    9488:	8e 01       	movw	r16, r28
    948a:	0e 0f       	add	r16, r30
    948c:	1f 1f       	adc	r17, r31
					}
				}
				//turnOffGreenLeds();
				//setGreenLed(irCommRxMaxSensor, 1);			

				if(irCommRxMaxSensorIndexTemp>1) {
    948e:	60 91 f1 04 	lds	r22, 0x04F1
    9492:	62 30       	cpi	r22, 0x02	; 2
    9494:	08 f4       	brcc	.+2      	; 0x9498 <irCommTasks+0x530>
    9496:	5b c6       	rjmp	.+3254   	; 0xa14e <irCommTasks+0x11e6>
    9498:	62 e0       	ldi	r22, 0x02	; 2
    949a:	e1 e0       	ldi	r30, 0x01	; 1
    949c:	f0 e0       	ldi	r31, 0x00	; 0
					irCommRxMaxSensorIndexTemp = 1;
					//updateBlueLed(0);
				}
				irCommRxMaxSensorTemp[irCommRxMaxSensorIndexTemp] = irCommRxMaxSensor;
    949e:	ee 0f       	add	r30, r30
    94a0:	ff 1f       	adc	r31, r31
    94a2:	e5 5d       	subi	r30, 0xD5	; 213
    94a4:	f4 4f       	sbci	r31, 0xF4	; 244
    94a6:	31 83       	std	Z+1, r19	; 0x01
    94a8:	20 83       	st	Z, r18
				irCommRxMaxSensorIndexTemp++;
    94aa:	60 93 f1 04 	sts	0x04F1, r22
					
				if(irCommRxMaxDiffIndexTemp>1) {
    94ae:	60 91 f2 04 	lds	r22, 0x04F2
    94b2:	62 30       	cpi	r22, 0x02	; 2
    94b4:	08 f4       	brcc	.+2      	; 0x94b8 <irCommTasks+0x550>
    94b6:	47 c6       	rjmp	.+3214   	; 0xa146 <irCommTasks+0x11de>
    94b8:	62 e0       	ldi	r22, 0x02	; 2
    94ba:	e1 e0       	ldi	r30, 0x01	; 1
    94bc:	f0 e0       	ldi	r31, 0x00	; 0
					irCommRxMaxDiffIndexTemp = 1;
					//updateBlueLed(0);
				}
				irCommRxMaxDiffTemp[irCommRxMaxDiffIndexTemp] = irCommRxMaxDiff;
    94be:	ee 0f       	add	r30, r30
    94c0:	ff 1f       	adc	r31, r31
    94c2:	ec 59       	subi	r30, 0x9C	; 156
    94c4:	f4 4f       	sbci	r31, 0xF4	; 244
    94c6:	91 83       	std	Z+1, r25	; 0x01
    94c8:	80 83       	st	Z, r24
				irCommRxMaxDiffIndexTemp++;
    94ca:	60 93 f2 04 	sts	0x04F2, r22
				
				if(irCommMaxSensorValueCurrIndexTemp>1) {
    94ce:	60 91 f5 04 	lds	r22, 0x04F5
    94d2:	62 30       	cpi	r22, 0x02	; 2
    94d4:	08 f4       	brcc	.+2      	; 0x94d8 <irCommTasks+0x570>
    94d6:	33 c6       	rjmp	.+3174   	; 0xa13e <irCommTasks+0x11d6>
					irCommMaxSensorValueCurrIndexTemp = 1;
    94d8:	61 e0       	ldi	r22, 0x01	; 1
    94da:	60 93 f5 04 	sts	0x04F5, r22
    94de:	62 e0       	ldi	r22, 0x02	; 2
    94e0:	e1 e0       	ldi	r30, 0x01	; 1
    94e2:	f0 e0       	ldi	r31, 0x00	; 0
					//updateBlueLed(0);
				}
				irCommMaxSensorValueCurrTemp[irCommMaxSensorValueCurrIndexTemp] = irCommMaxSensorValueCurr[irCommRxMaxSensor];
    94e4:	ee 0f       	add	r30, r30
    94e6:	ff 1f       	adc	r31, r31
    94e8:	e6 5c       	subi	r30, 0xC6	; 198
    94ea:	fa 4f       	sbci	r31, 0xFA	; 250
    94ec:	ea 01       	movw	r28, r20
    94ee:	48 81       	ld	r20, Y
    94f0:	59 81       	ldd	r21, Y+1	; 0x01
    94f2:	51 83       	std	Z+1, r21	; 0x01
    94f4:	40 83       	st	Z, r20
				irCommMaxSensorValueCurrIndexTemp++;
    94f6:	60 93 f5 04 	sts	0x04F5, r22
				
				if(irCommMinSensorValueCurrIndexTemp>1) {
    94fa:	40 91 f6 04 	lds	r20, 0x04F6
    94fe:	42 30       	cpi	r20, 0x02	; 2
    9500:	08 f4       	brcc	.+2      	; 0x9504 <irCommTasks+0x59c>
    9502:	29 c6       	rjmp	.+3154   	; 0xa156 <irCommTasks+0x11ee>
					irCommMinSensorValueCurrIndexTemp = 1;
    9504:	41 e0       	ldi	r20, 0x01	; 1
    9506:	40 93 f6 04 	sts	0x04F6, r20
    950a:	62 e0       	ldi	r22, 0x02	; 2
    950c:	e1 e0       	ldi	r30, 0x01	; 1
    950e:	f0 e0       	ldi	r31, 0x00	; 0
					//updateBlueLed(0);
				}
				irCommMinSensorValueCurrTemp[irCommMinSensorValueCurrIndexTemp] = irCommMinSensorValueCurr[irCommRxMaxSensor];
    9510:	ee 0f       	add	r30, r30
    9512:	ff 1f       	adc	r31, r31
    9514:	e1 5d       	subi	r30, 0xD1	; 209
    9516:	f4 4f       	sbci	r31, 0xF4	; 244
    9518:	d8 01       	movw	r26, r16
    951a:	4d 91       	ld	r20, X+
    951c:	5c 91       	ld	r21, X
    951e:	11 97       	sbiw	r26, 0x01	; 1
    9520:	51 83       	std	Z+1, r21	; 0x01
    9522:	40 83       	st	Z, r20
				irCommMinSensorValueCurrIndexTemp++;			
    9524:	60 93 f6 04 	sts	0x04F6, r22


				//if(irCommRxMaxSensor == -1) {
				//	updateRedLed(0);
				//}
				if(irCommRxMaxDiff >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    9528:	80 35       	cpi	r24, 0x50	; 80
    952a:	91 05       	cpc	r25, r1
    952c:	0c f4       	brge	.+2      	; 0x9530 <irCommTasks+0x5c8>
    952e:	07 c5       	rjmp	.+2574   	; 0x9f3e <irCommTasks+0xfd6>
					irCommState = IRCOMM_RX_DETECT_START_BIT_STATE;	
    9530:	83 e0       	ldi	r24, 0x03	; 3
    9532:	80 93 d7 04 	sts	0x04D7, r24
					
					if(irCommStateIndexTemp>13) {
    9536:	80 91 fe 04 	lds	r24, 0x04FE
    953a:	8e 30       	cpi	r24, 0x0E	; 14
    953c:	08 f4       	brcc	.+2      	; 0x9540 <irCommTasks+0x5d8>
    953e:	fb c4       	rjmp	.+2550   	; 0x9f36 <irCommTasks+0xfce>
					irCommStateIndexTemp++;

				} else {
					irCommState = IRCOMM_RX_WAITING_BIT;

					if(irCommStateIndexTemp>13) {
    9540:	8e e0       	ldi	r24, 0x0E	; 14
    9542:	ed e0       	ldi	r30, 0x0D	; 13
    9544:	f0 e0       	ldi	r31, 0x00	; 0
						irCommStateIndexTemp = 13;
						//updateRedLed(0);
					}
					irCommStateTemp[irCommStateIndexTemp] = irCommState;
    9546:	90 91 d7 04 	lds	r25, 0x04D7
    954a:	e2 5c       	subi	r30, 0xC2	; 194
    954c:	fa 4f       	sbci	r31, 0xFA	; 250
    954e:	90 83       	st	Z, r25
					irCommStateIndexTemp++;
    9550:	80 93 fe 04 	sts	0x04FE, r24
    9554:	21 cd       	rjmp	.-1470   	; 0x8f98 <irCommTasks+0x30>
				irCommState = IRCOMM_TX_COMPUTE_TIMINGS;				
				break;

			case IRCOMM_TX_COMPUTE_TIMINGS:
				//updateBlueLed(255);
				if(irCommTxBitToTransmit[irCommTxBitCount] == 3) {
    9556:	30 91 2e 05 	lds	r19, 0x052E
    955a:	e3 2f       	mov	r30, r19
    955c:	f0 e0       	ldi	r31, 0x00	; 0
    955e:	ea 5a       	subi	r30, 0xAA	; 170
    9560:	fa 4f       	sbci	r31, 0xFA	; 250
    9562:	20 81       	ld	r18, Z
    9564:	23 30       	cpi	r18, 0x03	; 3
    9566:	09 f4       	brne	.+2      	; 0x956a <irCommTasks+0x602>
    9568:	11 c5       	rjmp	.+2594   	; 0x9f8c <irCommTasks+0x1024>
					//updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START2_DURATION;					
					irCommTxSwitchCount = IRCOMM_BIT_START2_SWITCH_COUNT;
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 2) {
    956a:	22 30       	cpi	r18, 0x02	; 2
    956c:	09 f4       	brne	.+2      	; 0x9570 <irCommTasks+0x608>
    956e:	28 c1       	rjmp	.+592    	; 0x97c0 <irCommTasks+0x858>
					//updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START1_DURATION;					
					irCommTxSwitchCount = IRCOMM_BIT_START1_SWITCH_COUNT;
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 1) {
    9570:	21 30       	cpi	r18, 0x01	; 1
    9572:	09 f4       	brne	.+2      	; 0x9576 <irCommTasks+0x60e>
    9574:	7b c5       	rjmp	.+2806   	; 0xa06c <irCommTasks+0x1104>
					irCommTxDuration = IRCOMM_BIT1_DURATOIN;					
					irCommTxSwitchCount = IRCOMM_BIT1_SWITCH_COUNT;
				} else {
					irCommTxDuration = IRCOMM_BIT0_DURATION;						
    9576:	8e e1       	ldi	r24, 0x1E	; 30
    9578:	90 e0       	ldi	r25, 0x00	; 0
    957a:	90 93 31 05 	sts	0x0531, r25
    957e:	80 93 30 05 	sts	0x0530, r24
					irCommTxSwitchCount = IRCOMM_BIT0_SWITCH_COUNT;
    9582:	88 e0       	ldi	r24, 0x08	; 8
    9584:	80 93 32 05 	sts	0x0532, r24
				}
				if(irCommTxBitCount == 0) {
    9588:	33 23       	and	r19, r19
    958a:	51 f4       	brne	.+20     	; 0x95a0 <irCommTasks+0x638>
					//PORTA = irCommTxSensorMask;
					if(irCommTxSensorGroup==0) {
    958c:	80 91 36 05 	lds	r24, 0x0536
    9590:	88 23       	and	r24, r24
    9592:	09 f0       	breq	.+2      	; 0x9596 <irCommTasks+0x62e>
    9594:	09 c5       	rjmp	.+2578   	; 0x9fa8 <irCommTasks+0x1040>
						PORTA = 0xAA;
    9596:	8a ea       	ldi	r24, 0xAA	; 170
    9598:	82 b9       	out	0x02, r24	; 2
					} else {
						PORTA = 0x55;
					}					
					irCommTxPulseState = 1;
    959a:	81 e0       	ldi	r24, 0x01	; 1
    959c:	80 93 2f 05 	sts	0x052F, r24
				}
				irCommTxDurationCycle = 0;
    95a0:	10 92 34 05 	sts	0x0534, r1
				irCommTxSwitchCounter = 0;						
    95a4:	10 92 33 05 	sts	0x0533, r1
				irCommState = IRCOMM_TX_TRANSMIT_BIT;
    95a8:	83 e0       	ldi	r24, 0x03	; 3
    95aa:	80 93 d7 04 	sts	0x04D7, r24
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ1;
    95ae:	80 93 26 05 	sts	0x0526, r24
    95b2:	f2 cc       	rjmp	.-1564   	; 0x8f98 <irCommTasks+0x30>
void irCommTasks() {
	int i = 0;

	if(irCommMode==IRCOMM_MODE_RECEIVE) {

		switch(irCommState) {
    95b4:	17 30       	cpi	r17, 0x07	; 7
    95b6:	09 f4       	brne	.+2      	; 0x95ba <irCommTasks+0x652>
    95b8:	0f c4       	rjmp	.+2078   	; 0x9dd8 <irCommTasks+0xe70>
    95ba:	18 30       	cpi	r17, 0x08	; 8
    95bc:	09 f4       	brne	.+2      	; 0x95c0 <irCommTasks+0x658>
    95be:	93 c1       	rjmp	.+806    	; 0x98e6 <irCommTasks+0x97e>
    95c0:	16 30       	cpi	r17, 0x06	; 6
    95c2:	09 f0       	breq	.+2      	; 0x95c6 <irCommTasks+0x65e>
    95c4:	e9 cc       	rjmp	.-1582   	; 0x8f98 <irCommTasks+0x30>
			case IRCOMM_RX_WAITING_BIT:
				break;

			case IRCOMM_RX_READ_BIT:
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
    95c6:	10 92 06 05 	sts	0x0506, r1
    95ca:	10 92 07 05 	sts	0x0507, r1
    95ce:	10 92 08 05 	sts	0x0508, r1
    95d2:	10 92 09 05 	sts	0x0509, r1
				irCommTempMin = 1024;
    95d6:	80 e0       	ldi	r24, 0x00	; 0
    95d8:	94 e0       	ldi	r25, 0x04	; 4
    95da:	90 93 0d 05 	sts	0x050D, r25
    95de:	80 93 0c 05 	sts	0x050C, r24
				irCommTempMax = 0;
    95e2:	10 92 0b 05 	sts	0x050B, r1
    95e6:	10 92 0a 05 	sts	0x050A, r1
	irCommRxBitReceivedIndexTemp = 0;
	
	
}

void irCommTasks() {
    95ea:	80 91 23 05 	lds	r24, 0x0523
    95ee:	90 91 24 05 	lds	r25, 0x0524
    95f2:	88 0f       	add	r24, r24
    95f4:	99 1f       	adc	r25, r25
    95f6:	e0 91 4f 08 	lds	r30, 0x084F
    95fa:	f0 91 50 08 	lds	r31, 0x0850
    95fe:	e8 0f       	add	r30, r24
    9600:	f9 1f       	adc	r31, r25

			case IRCOMM_RX_READ_BIT:
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
				irCommTempMin = 1024;
				irCommTempMax = 0;
    9602:	1b e3       	ldi	r17, 0x3B	; 59
    9604:	c1 2e       	mov	r12, r17
    9606:	1b e0       	ldi	r17, 0x0B	; 11
    9608:	d1 2e       	mov	r13, r17
	irCommRxBitReceivedIndexTemp = 0;
	
	
}

void irCommTasks() {
    960a:	e6 01       	movw	r28, r12
    960c:	60 e0       	ldi	r22, 0x00	; 0
    960e:	70 e0       	ldi	r23, 0x00	; 0
    9610:	40 e0       	ldi	r20, 0x00	; 0
    9612:	54 e0       	ldi	r21, 0x04	; 4
    9614:	ee 24       	eor	r14, r14
    9616:	ff 24       	eor	r15, r15
    9618:	87 01       	movw	r16, r14
    961a:	08 c0       	rjmp	.+16     	; 0x962c <irCommTasks+0x6c4>
			case IRCOMM_RX_READ_BIT:
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
				irCommTempMin = 1024;
				irCommTempMax = 0;
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    961c:	40 91 0c 05 	lds	r20, 0x050C
    9620:	50 91 0d 05 	lds	r21, 0x050D
    9624:	60 91 0a 05 	lds	r22, 0x050A
    9628:	70 91 0b 05 	lds	r23, 0x050B
					irCommMaxSensorSignal[i] = irCommProxValuesCurr[irCommRxMaxSensor+i*8];
    962c:	20 81       	ld	r18, Z
    962e:	31 81       	ldd	r19, Z+1	; 0x01
    9630:	29 93       	st	Y+, r18
    9632:	39 93       	st	Y+, r19
					irCommProxSum += irCommMaxSensorSignal[i];
    9634:	c9 01       	movw	r24, r18
    9636:	aa 27       	eor	r26, r26
    9638:	97 fd       	sbrc	r25, 7
    963a:	a0 95       	com	r26
    963c:	ba 2f       	mov	r27, r26
    963e:	e8 0e       	add	r14, r24
    9640:	f9 1e       	adc	r15, r25
    9642:	0a 1f       	adc	r16, r26
    9644:	1b 1f       	adc	r17, r27
					if(irCommTempMin > irCommMaxSensorSignal[i]) {
    9646:	24 17       	cp	r18, r20
    9648:	35 07       	cpc	r19, r21
    964a:	2c f4       	brge	.+10     	; 0x9656 <irCommTasks+0x6ee>
						irCommTempMin = irCommMaxSensorSignal[i];
    964c:	30 93 0d 05 	sts	0x050D, r19
    9650:	20 93 0c 05 	sts	0x050C, r18
    9654:	a9 01       	movw	r20, r18
					}
					if(irCommTempMax < irCommMaxSensorSignal[i]) {
    9656:	62 17       	cp	r22, r18
    9658:	73 07       	cpc	r23, r19
    965a:	2c f4       	brge	.+10     	; 0x9666 <irCommTasks+0x6fe>
						irCommTempMax = irCommMaxSensorSignal[i];
    965c:	30 93 0b 05 	sts	0x050B, r19
    9660:	20 93 0a 05 	sts	0x050A, r18
    9664:	b9 01       	movw	r22, r18
    9666:	70 96       	adiw	r30, 0x10	; 16
			case IRCOMM_RX_READ_BIT:
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
				irCommTempMin = 1024;
				irCommTempMax = 0;
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    9668:	2b e0       	ldi	r18, 0x0B	; 11
    966a:	c3 36       	cpi	r28, 0x63	; 99
    966c:	d2 07       	cpc	r29, r18
    966e:	b1 f6       	brne	.-84     	; 0x961c <irCommTasks+0x6b4>
    9670:	e0 92 06 05 	sts	0x0506, r14
    9674:	f0 92 07 05 	sts	0x0507, r15
    9678:	00 93 08 05 	sts	0x0508, r16
    967c:	10 93 09 05 	sts	0x0509, r17
					if(irCommTempMax < irCommMaxSensorSignal[i]) {
						irCommTempMax = irCommMaxSensorSignal[i];
					}
				}

				if((irCommTempMax-irCommTempMin) < IRCOMM_DETECTION_AMPLITUDE_THR) {	// error...no significant signal perceived					
    9680:	64 1b       	sub	r22, r20
    9682:	75 0b       	sbc	r23, r21
    9684:	60 35       	cpi	r22, 0x50	; 80
    9686:	71 05       	cpc	r23, r1
    9688:	0c f4       	brge	.+2      	; 0x968c <irCommTasks+0x724>
    968a:	60 c4       	rjmp	.+2240   	; 0x9f4c <irCommTasks+0xfe4>

					resetDebugVariables();
					break;
				}

				irCommProxMean = (int)(irCommProxSum / IRCOMM_SAMPLING_WINDOW);
    968c:	c8 01       	movw	r24, r16
    968e:	b7 01       	movw	r22, r14
    9690:	24 e1       	ldi	r18, 0x14	; 20
    9692:	30 e0       	ldi	r19, 0x00	; 0
    9694:	40 e0       	ldi	r20, 0x00	; 0
    9696:	50 e0       	ldi	r21, 0x00	; 0
    9698:	0e 94 7b 56 	call	0xacf6	; 0xacf6 <__divmodsi4>
    969c:	b9 01       	movw	r22, r18
    969e:	30 93 11 05 	sts	0x0511, r19
    96a2:	20 93 10 05 	sts	0x0510, r18
    96a6:	20 91 00 05 	lds	r18, 0x0500
    96aa:	0f c0       	rjmp	.+30     	; 0x96ca <irCommTasks+0x762>

				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
					irCommMaxSensorSignal[i] -= irCommProxMean;

					if(irCommBitsSignalIndexTemp>199) {
    96ac:	e2 2f       	mov	r30, r18
    96ae:	f0 e0       	ldi	r31, 0x00	; 0
    96b0:	2f 5f       	subi	r18, 0xFF	; 255
						irCommBitsSignalIndexTemp = 199;
						//updateRedLed(0);
					}
					irCommBitsSignalTemp[irCommBitsSignalIndexTemp] = irCommMaxSensorSignal[i];
    96b2:	ee 0f       	add	r30, r30
    96b4:	ff 1f       	adc	r31, r31
    96b6:	e7 56       	subi	r30, 0x67	; 103
    96b8:	f6 4f       	sbci	r31, 0xF6	; 246
    96ba:	91 83       	std	Z+1, r25	; 0x01
    96bc:	80 83       	st	Z, r24
				}

				irCommProxMean = (int)(irCommProxSum / IRCOMM_SAMPLING_WINDOW);

				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    96be:	e3 e6       	ldi	r30, 0x63	; 99
    96c0:	ce 16       	cp	r12, r30
    96c2:	eb e0       	ldi	r30, 0x0B	; 11
    96c4:	de 06       	cpc	r13, r30
    96c6:	09 f4       	brne	.+2      	; 0x96ca <irCommTasks+0x762>
    96c8:	da c3       	rjmp	.+1972   	; 0x9e7e <irCommTasks+0xf16>
					irCommMaxSensorSignal[i] -= irCommProxMean;
    96ca:	d6 01       	movw	r26, r12
    96cc:	8d 91       	ld	r24, X+
    96ce:	9c 91       	ld	r25, X
    96d0:	11 97       	sbiw	r26, 0x01	; 1
    96d2:	86 1b       	sub	r24, r22
    96d4:	97 0b       	sbc	r25, r23
    96d6:	e6 01       	movw	r28, r12
    96d8:	89 93       	st	Y+, r24
    96da:	99 93       	st	Y+, r25
    96dc:	6e 01       	movw	r12, r28

					if(irCommBitsSignalIndexTemp>199) {
    96de:	28 3c       	cpi	r18, 0xC8	; 200
    96e0:	28 f3       	brcs	.-54     	; 0x96ac <irCommTasks+0x744>
    96e2:	28 ec       	ldi	r18, 0xC8	; 200
    96e4:	e7 ec       	ldi	r30, 0xC7	; 199
    96e6:	f0 e0       	ldi	r31, 0x00	; 0
    96e8:	e4 cf       	rjmp	.-56     	; 0x96b2 <irCommTasks+0x74a>
												
				break;

			case IRCOMM_RX_DETECT_START_BIT_STATE:
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
    96ea:	10 92 06 05 	sts	0x0506, r1
    96ee:	10 92 07 05 	sts	0x0507, r1
    96f2:	10 92 08 05 	sts	0x0508, r1
    96f6:	10 92 09 05 	sts	0x0509, r1
				irCommTempMin = 1024;
    96fa:	80 e0       	ldi	r24, 0x00	; 0
    96fc:	94 e0       	ldi	r25, 0x04	; 4
    96fe:	90 93 0d 05 	sts	0x050D, r25
    9702:	80 93 0c 05 	sts	0x050C, r24
				irCommTempMax = 0;
    9706:	10 92 0b 05 	sts	0x050B, r1
    970a:	10 92 0a 05 	sts	0x050A, r1
				irCommShiftCount = 0;
    970e:	10 92 0e 05 	sts	0x050E, r1
				irCommComputeShift = 1;												
    9712:	00 93 0f 05 	sts	0x050F, r16
    9716:	e0 90 ef 04 	lds	r14, 0x04EF
    971a:	60 e0       	ldi	r22, 0x00	; 0
    971c:	70 e0       	ldi	r23, 0x00	; 0
    971e:	cb 01       	movw	r24, r22
	irCommRxBitReceivedIndexTemp = 0;
	
	
}

void irCommTasks() {
    9720:	20 91 23 05 	lds	r18, 0x0523
    9724:	30 91 24 05 	lds	r19, 0x0524
    9728:	22 0f       	add	r18, r18
    972a:	33 1f       	adc	r19, r19
    972c:	a0 91 4f 08 	lds	r26, 0x084F
    9730:	b0 91 50 08 	lds	r27, 0x0850
    9734:	a2 0f       	add	r26, r18
    9736:	b3 1f       	adc	r27, r19
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
				irCommTempMin = 1024;
				irCommTempMax = 0;
				irCommShiftCount = 0;
				irCommComputeShift = 1;												
    9738:	0b e3       	ldi	r16, 0x3B	; 59
    973a:	1b e0       	ldi	r17, 0x0B	; 11
	irCommRxBitReceivedIndexTemp = 0;
	
	
}

void irCommTasks() {
    973c:	f8 e2       	ldi	r31, 0x28	; 40
    973e:	8f 2e       	mov	r8, r31
    9740:	91 2c       	mov	r9, r1
    9742:	80 0e       	add	r8, r16
    9744:	91 1e       	adc	r9, r17
    9746:	18 01       	movw	r2, r16
    9748:	cc 24       	eor	r12, r12
    974a:	c3 94       	inc	r12
    974c:	ff 24       	eor	r15, r15
							} else {
								//updateGreenLed(0);
							}
							irCommTempMin = irCommMaxSensorSignal[i];	// otherwise I cannot detect spike of one sample (peakDuration=1), related to sensors sampling
							irCommTempMax = irCommMaxSensorSignal[i];
							irCommComputeShift = 2;
    974e:	e2 e0       	ldi	r30, 0x02	; 2
    9750:	6e 2e       	mov	r6, r30
							

							if(irCommMaxSensorSignal[i] == irCommTempMax) {
								irCommRxPeakHighToLow = 0;
							} else if(irCommMaxSensorSignal[i] == irCommTempMin) {
								irCommRxPeakHighToLow = 1;
    9752:	55 24       	eor	r5, r5
    9754:	53 94       	inc	r5
    9756:	25 c0       	rjmp	.+74     	; 0x97a2 <irCommTasks+0x83a>
				irCommShiftCount = 0;
				irCommComputeShift = 1;												
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
					irCommMaxSensorSignal[i] = irCommProxValuesCurr[irCommRxMaxSensor+i*8];

					if(irCommMaxSensorSignalIndexTemp>39) {
    9758:	2e 2d       	mov	r18, r14
    975a:	30 e0       	ldi	r19, 0x00	; 0
    975c:	e3 94       	inc	r14
						irCommMaxSensorSignalIndexTemp = 39;
						//updateRedLed(0);
					}
					irCommMaxSensorSignalTemp[irCommMaxSensorSignalIndexTemp] = irCommMaxSensorSignal[i];
    975e:	22 0f       	add	r18, r18
    9760:	33 1f       	adc	r19, r19
    9762:	23 59       	subi	r18, 0x93	; 147
    9764:	37 4f       	sbci	r19, 0xF7	; 247
    9766:	e9 01       	movw	r28, r18
    9768:	f9 83       	std	Y+1, r31	; 0x01
    976a:	e8 83       	st	Y, r30
					irCommMaxSensorSignalIndexTemp++;					
    976c:	e0 92 ef 04 	sts	0x04EF, r14

					irCommProxSum += irCommMaxSensorSignal[i];
    9770:	9f 01       	movw	r18, r30
    9772:	44 27       	eor	r20, r20
    9774:	37 fd       	sbrc	r19, 7
    9776:	40 95       	com	r20
    9778:	54 2f       	mov	r21, r20
    977a:	62 0f       	add	r22, r18
    977c:	73 1f       	adc	r23, r19
    977e:	84 1f       	adc	r24, r20
    9780:	95 1f       	adc	r25, r21
					if(irCommComputeShift == 1) {	// compute the shift between the rx sampling and tx signal
    9782:	2c 2d       	mov	r18, r12
    9784:	21 30       	cpi	r18, 0x01	; 1
    9786:	29 f1       	breq	.+74     	; 0x97d2 <irCommTasks+0x86a>
							irCommTempMax = irCommMaxSensorSignal[i];
							irCommComputeShift = 2;
							irCommShiftCount--;	// the current sample is already part of the signal start thus do not skip it
							irCommRxStartPeakDuration = 0;
						}
					 } else if(irCommComputeShift == 2) {		
    9788:	2c 2d       	mov	r18, r12
    978a:	22 30       	cpi	r18, 0x02	; 2
    978c:	09 f4       	brne	.+2      	; 0x9790 <irCommTasks+0x828>
    978e:	76 c0       	rjmp	.+236    	; 0x987c <irCommTasks+0x914>
						}	
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
							if((irCommMaxSensorSignal[i]==irCommTempMax) && (irCommRxPeakHighToLow==1)) {
								irCommComputeShift = 0;
							} else if((irCommMaxSensorSignal[i]==irCommTempMin) && (irCommRxPeakHighToLow==0)) {
								irCommComputeShift = 0;
    9790:	50 96       	adiw	r26, 0x10	; 16
				irCommProxSum = 0;
				irCommTempMin = 1024;
				irCommTempMax = 0;
				irCommShiftCount = 0;
				irCommComputeShift = 1;												
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    9792:	e3 e6       	ldi	r30, 0x63	; 99
    9794:	2e 16       	cp	r2, r30
    9796:	eb e0       	ldi	r30, 0x0B	; 11
    9798:	3e 06       	cpc	r3, r30
    979a:	09 f4       	brne	.+2      	; 0x979e <irCommTasks+0x836>
    979c:	3a c2       	rjmp	.+1140   	; 0x9c12 <irCommTasks+0xcaa>
    979e:	c0 90 0f 05 	lds	r12, 0x050F
					irCommMaxSensorSignal[i] = irCommProxValuesCurr[irCommRxMaxSensor+i*8];
    97a2:	ed 91       	ld	r30, X+
    97a4:	fc 91       	ld	r31, X
    97a6:	11 97       	sbiw	r26, 0x01	; 1
    97a8:	e1 01       	movw	r28, r2
    97aa:	e9 93       	st	Y+, r30
    97ac:	f9 93       	st	Y+, r31
    97ae:	1e 01       	movw	r2, r28

					if(irCommMaxSensorSignalIndexTemp>39) {
    97b0:	2e 2d       	mov	r18, r14
    97b2:	28 32       	cpi	r18, 0x28	; 40
    97b4:	88 f2       	brcs	.-94     	; 0x9758 <irCommTasks+0x7f0>
    97b6:	58 e2       	ldi	r21, 0x28	; 40
    97b8:	e5 2e       	mov	r14, r21
    97ba:	27 e2       	ldi	r18, 0x27	; 39
    97bc:	30 e0       	ldi	r19, 0x00	; 0
    97be:	cf cf       	rjmp	.-98     	; 0x975e <irCommTasks+0x7f6>
					//updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START2_DURATION;					
					irCommTxSwitchCount = IRCOMM_BIT_START2_SWITCH_COUNT;
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 2) {
					//updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START1_DURATION;					
    97c0:	88 e7       	ldi	r24, 0x78	; 120
    97c2:	90 e0       	ldi	r25, 0x00	; 0
    97c4:	90 93 31 05 	sts	0x0531, r25
    97c8:	80 93 30 05 	sts	0x0530, r24
					irCommTxSwitchCount = IRCOMM_BIT_START1_SWITCH_COUNT;
    97cc:	20 93 32 05 	sts	0x0532, r18
    97d0:	db ce       	rjmp	.-586    	; 0x9588 <irCommTasks+0x620>
					irCommMaxSensorSignalTemp[irCommMaxSensorSignalIndexTemp] = irCommMaxSensorSignal[i];
					irCommMaxSensorSignalIndexTemp++;					

					irCommProxSum += irCommMaxSensorSignal[i];
					if(irCommComputeShift == 1) {	// compute the shift between the rx sampling and tx signal
						irCommShiftCount++;								
    97d2:	f3 94       	inc	r15
    97d4:	f0 92 0e 05 	sts	0x050E, r15
						if(irCommTempMin > irCommMaxSensorSignal[i]) {
    97d8:	a0 90 0c 05 	lds	r10, 0x050C
    97dc:	b0 90 0d 05 	lds	r11, 0x050D
    97e0:	ea 15       	cp	r30, r10
    97e2:	fb 05       	cpc	r31, r11
    97e4:	2c f4       	brge	.+10     	; 0x97f0 <irCommTasks+0x888>
							irCommTempMin = irCommMaxSensorSignal[i];
    97e6:	f0 93 0d 05 	sts	0x050D, r31
    97ea:	e0 93 0c 05 	sts	0x050C, r30
    97ee:	5f 01       	movw	r10, r30
						}
						if(irCommTempMax < irCommMaxSensorSignal[i]) {
    97f0:	40 91 0a 05 	lds	r20, 0x050A
    97f4:	50 91 0b 05 	lds	r21, 0x050B
    97f8:	4e 17       	cp	r20, r30
    97fa:	5f 07       	cpc	r21, r31
    97fc:	2c f4       	brge	.+10     	; 0x9808 <irCommTasks+0x8a0>
							irCommTempMax = irCommMaxSensorSignal[i];
    97fe:	f0 93 0b 05 	sts	0x050B, r31
    9802:	e0 93 0a 05 	sts	0x050A, r30
    9806:	af 01       	movw	r20, r30
						}
						irCommTempValue = (irCommTempMax - irCommTempMin);						
    9808:	9a 01       	movw	r18, r20
    980a:	2a 19       	sub	r18, r10
    980c:	3b 09       	sbc	r19, r11
    980e:	72 2e       	mov	r7, r18
    9810:	d3 2e       	mov	r13, r19
    9812:	20 93 d8 04 	sts	0x04D8, r18
    9816:	30 93 d9 04 	sts	0x04D9, r19
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    981a:	20 35       	cpi	r18, 0x50	; 80
    981c:	31 05       	cpc	r19, r1
    981e:	0c f4       	brge	.+2      	; 0x9822 <irCommTasks+0x8ba>
    9820:	b7 cf       	rjmp	.-146    	; 0x9790 <irCommTasks+0x828>

							if(irCommStartDiffIndexTemp>1) {
    9822:	c0 90 f9 04 	lds	r12, 0x04F9
    9826:	2c 2d       	mov	r18, r12
    9828:	22 30       	cpi	r18, 0x02	; 2
    982a:	08 f4       	brcc	.+2      	; 0x982e <irCommTasks+0x8c6>
    982c:	a1 c3       	rjmp	.+1858   	; 0x9f70 <irCommTasks+0x1008>
    982e:	22 e0       	ldi	r18, 0x02	; 2
    9830:	c2 2e       	mov	r12, r18
    9832:	21 e0       	ldi	r18, 0x01	; 1
    9834:	30 e0       	ldi	r19, 0x00	; 0
								irCommStartDiffIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommStartDiffTemp[irCommStartDiffIndexTemp] = irCommTempValue;
    9836:	22 0f       	add	r18, r18
    9838:	33 1f       	adc	r19, r19
    983a:	22 54       	subi	r18, 0x42	; 66
    983c:	37 4f       	sbci	r19, 0xF7	; 247
    983e:	e9 01       	movw	r28, r18
    9840:	78 82       	st	Y, r7
    9842:	d9 82       	std	Y+1, r13	; 0x01
							irCommStartDiffIndexTemp++;
    9844:	c0 92 f9 04 	sts	0x04F9, r12
							

							if(irCommMaxSensorSignal[i] == irCommTempMax) {
    9848:	e4 17       	cp	r30, r20
    984a:	f5 07       	cpc	r31, r21
    984c:	09 f4       	brne	.+2      	; 0x9850 <irCommTasks+0x8e8>
    984e:	8d c3       	rjmp	.+1818   	; 0x9f6a <irCommTasks+0x1002>
								irCommRxPeakHighToLow = 0;
							} else if(irCommMaxSensorSignal[i] == irCommTempMin) {
    9850:	ea 15       	cp	r30, r10
    9852:	fb 05       	cpc	r31, r11
    9854:	09 f4       	brne	.+2      	; 0x9858 <irCommTasks+0x8f0>
    9856:	ab c3       	rjmp	.+1878   	; 0x9fae <irCommTasks+0x1046>
								irCommRxPeakHighToLow = 1;
							} else {
								//updateGreenLed(0);
							}
							irCommTempMin = irCommMaxSensorSignal[i];	// otherwise I cannot detect spike of one sample (peakDuration=1), related to sensors sampling
    9858:	f0 93 0d 05 	sts	0x050D, r31
    985c:	e0 93 0c 05 	sts	0x050C, r30
							irCommTempMax = irCommMaxSensorSignal[i];
    9860:	f0 93 0b 05 	sts	0x050B, r31
    9864:	e0 93 0a 05 	sts	0x050A, r30
							irCommComputeShift = 2;
    9868:	60 92 0f 05 	sts	0x050F, r6
							irCommShiftCount--;	// the current sample is already part of the signal start thus do not skip it
    986c:	fa 94       	dec	r15
    986e:	f0 92 0e 05 	sts	0x050E, r15
							irCommRxStartPeakDuration = 0;
    9872:	10 92 20 05 	sts	0x0520, r1
    9876:	e2 e0       	ldi	r30, 0x02	; 2
    9878:	ce 2e       	mov	r12, r30
    987a:	8a cf       	rjmp	.-236    	; 0x9790 <irCommTasks+0x828>
						}
					 } else if(irCommComputeShift == 2) {		
					 	irCommRxStartPeakDuration++;					
    987c:	20 91 20 05 	lds	r18, 0x0520
    9880:	2f 5f       	subi	r18, 0xFF	; 255
    9882:	20 93 20 05 	sts	0x0520, r18
						if(irCommTempMin > irCommMaxSensorSignal[i]) {
    9886:	a0 90 0c 05 	lds	r10, 0x050C
    988a:	b0 90 0d 05 	lds	r11, 0x050D
    988e:	ea 15       	cp	r30, r10
    9890:	fb 05       	cpc	r31, r11
    9892:	2c f4       	brge	.+10     	; 0x989e <irCommTasks+0x936>
							irCommTempMin = irCommMaxSensorSignal[i];
    9894:	f0 93 0d 05 	sts	0x050D, r31
    9898:	e0 93 0c 05 	sts	0x050C, r30
    989c:	5f 01       	movw	r10, r30
						}
						if(irCommTempMax < irCommMaxSensorSignal[i]) {
    989e:	40 91 0a 05 	lds	r20, 0x050A
    98a2:	50 91 0b 05 	lds	r21, 0x050B
    98a6:	4e 17       	cp	r20, r30
    98a8:	5f 07       	cpc	r21, r31
    98aa:	2c f4       	brge	.+10     	; 0x98b6 <irCommTasks+0x94e>
							irCommTempMax = irCommMaxSensorSignal[i];
    98ac:	f0 93 0b 05 	sts	0x050B, r31
    98b0:	e0 93 0a 05 	sts	0x050A, r30
    98b4:	af 01       	movw	r20, r30
						}	
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    98b6:	9a 01       	movw	r18, r20
    98b8:	2a 19       	sub	r18, r10
    98ba:	3b 09       	sbc	r19, r11
    98bc:	20 35       	cpi	r18, 0x50	; 80
    98be:	31 05       	cpc	r19, r1
    98c0:	0c f4       	brge	.+2      	; 0x98c4 <irCommTasks+0x95c>
    98c2:	66 cf       	rjmp	.-308    	; 0x9790 <irCommTasks+0x828>
							if((irCommMaxSensorSignal[i]==irCommTempMax) && (irCommRxPeakHighToLow==1)) {
    98c4:	e4 17       	cp	r30, r20
    98c6:	f5 07       	cpc	r31, r21
    98c8:	09 f4       	brne	.+2      	; 0x98cc <irCommTasks+0x964>
    98ca:	74 c3       	rjmp	.+1768   	; 0x9fb4 <irCommTasks+0x104c>
								irCommComputeShift = 0;
							} else if((irCommMaxSensorSignal[i]==irCommTempMin) && (irCommRxPeakHighToLow==0)) {
    98cc:	ea 15       	cp	r30, r10
    98ce:	fb 05       	cpc	r31, r11
    98d0:	09 f0       	breq	.+2      	; 0x98d4 <irCommTasks+0x96c>
    98d2:	5e cf       	rjmp	.-324    	; 0x9790 <irCommTasks+0x828>
    98d4:	20 91 1f 05 	lds	r18, 0x051F
    98d8:	22 23       	and	r18, r18
    98da:	09 f0       	breq	.+2      	; 0x98de <irCommTasks+0x976>
    98dc:	59 cf       	rjmp	.-334    	; 0x9790 <irCommTasks+0x828>
								irCommComputeShift = 0;
    98de:	10 92 0f 05 	sts	0x050F, r1
    98e2:	cc 24       	eor	r12, r12
    98e4:	55 cf       	rjmp	.-342    	; 0x9790 <irCommTasks+0x828>
				irCommState = IRCOMM_RX_IDLE_STATE;

				break;

			case IRCOMM_RX_DEBUG:								
				irCommSendValues = 0;						
    98e6:	10 92 da 04 	sts	0x04DA, r1
				while(irCommSendValues==0);	// wait for the start from the uart (computer)
    98ea:	80 91 da 04 	lds	r24, 0x04DA
    98ee:	88 23       	and	r24, r24
    98f0:	e1 f3       	breq	.-8      	; 0x98ea <irCommTasks+0x982>
				usart0Transmit(0xFF, 1);
    98f2:	8f ef       	ldi	r24, 0xFF	; 255
    98f4:	61 e0       	ldi	r22, 0x01	; 1
    98f6:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
				usart0Transmit(irCommRxMaxSensorTemp[0],1);
    98fa:	80 91 2b 0b 	lds	r24, 0x0B2B
    98fe:	61 e0       	ldi	r22, 0x01	; 1
    9900:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
				usart0Transmit(irCommRxMaxSensorTemp[1],1);
    9904:	80 91 2d 0b 	lds	r24, 0x0B2D
    9908:	61 e0       	ldi	r22, 0x01	; 1
    990a:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
				usart0Transmit(irCommRxMaxDiffTemp[0]&0xFF,1);
    990e:	80 91 64 0b 	lds	r24, 0x0B64
    9912:	61 e0       	ldi	r22, 0x01	; 1
    9914:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
				usart0Transmit(irCommRxMaxDiffTemp[0]>>8,1);
    9918:	80 91 65 0b 	lds	r24, 0x0B65
    991c:	61 e0       	ldi	r22, 0x01	; 1
    991e:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
				usart0Transmit(irCommRxMaxDiffTemp[1]&0xFF,1);
    9922:	80 91 66 0b 	lds	r24, 0x0B66
    9926:	61 e0       	ldi	r22, 0x01	; 1
    9928:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
				usart0Transmit(irCommRxMaxDiffTemp[1]>>8,1);
    992c:	80 91 67 0b 	lds	r24, 0x0B67
    9930:	61 e0       	ldi	r22, 0x01	; 1
    9932:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
				usart0Transmit(irCommProxMeanTemp[0]&0xFF,1);
    9936:	80 91 71 05 	lds	r24, 0x0571
    993a:	61 e0       	ldi	r22, 0x01	; 1
    993c:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
				usart0Transmit(irCommProxMeanTemp[0]>>8,1);
    9940:	80 91 72 05 	lds	r24, 0x0572
    9944:	61 e0       	ldi	r22, 0x01	; 1
    9946:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
				usart0Transmit(irCommProxMeanTemp[1]&0xFF,1);
    994a:	80 91 73 05 	lds	r24, 0x0573
    994e:	61 e0       	ldi	r22, 0x01	; 1
    9950:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
				usart0Transmit(irCommProxMeanTemp[1]>>8,1);
    9954:	80 91 74 05 	lds	r24, 0x0574
    9958:	61 e0       	ldi	r22, 0x01	; 1
    995a:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
				usart0Transmit(irCommSwitchCountTemp[0],1);
    995e:	80 91 53 05 	lds	r24, 0x0553
    9962:	61 e0       	ldi	r22, 0x01	; 1
    9964:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
				usart0Transmit(irCommSwitchCountTemp[1],1);
    9968:	80 91 54 05 	lds	r24, 0x0554
    996c:	61 e0       	ldi	r22, 0x01	; 1
    996e:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
    9972:	cd e6       	ldi	r28, 0x6D	; 109
    9974:	d8 e0       	ldi	r29, 0x08	; 8
    9976:	09 e7       	ldi	r16, 0x79	; 121
    9978:	15 e0       	ldi	r17, 0x05	; 5
				for(i=0; i<IRCOMM_SAMPLING_WINDOW*2; i++) {
					irCommTempValue = irCommMaxSensorSignalTemp[i];
    997a:	88 81       	ld	r24, Y
    997c:	99 81       	ldd	r25, Y+1	; 0x01
    997e:	22 96       	adiw	r28, 0x02	; 2
    9980:	80 93 d8 04 	sts	0x04D8, r24
    9984:	90 93 d9 04 	sts	0x04D9, r25
					usart0Transmit(irCommTempValue&0xFF,1);
    9988:	61 e0       	ldi	r22, 0x01	; 1
    998a:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
					usart0Transmit(irCommTempValue>>8,1);
    998e:	80 91 d9 04 	lds	r24, 0x04D9
    9992:	61 e0       	ldi	r22, 0x01	; 1
    9994:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
					irCommTempValue = irCommMaxSensorSignalFiltTemp[i];
    9998:	d8 01       	movw	r26, r16
    999a:	8c 91       	ld	r24, X
    999c:	11 96       	adiw	r26, 0x01	; 1
    999e:	9c 91       	ld	r25, X
    99a0:	0e 5f       	subi	r16, 0xFE	; 254
    99a2:	1f 4f       	sbci	r17, 0xFF	; 255
    99a4:	80 93 d8 04 	sts	0x04D8, r24
    99a8:	90 93 d9 04 	sts	0x04D9, r25
					usart0Transmit(irCommTempValue&0xFF,1);
    99ac:	61 e0       	ldi	r22, 0x01	; 1
    99ae:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
					usart0Transmit(irCommTempValue>>8,1);
    99b2:	80 91 d9 04 	lds	r24, 0x04D9
    99b6:	61 e0       	ldi	r22, 0x01	; 1
    99b8:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
				usart0Transmit(irCommProxMeanTemp[0]>>8,1);
				usart0Transmit(irCommProxMeanTemp[1]&0xFF,1);
				usart0Transmit(irCommProxMeanTemp[1]>>8,1);
				usart0Transmit(irCommSwitchCountTemp[0],1);
				usart0Transmit(irCommSwitchCountTemp[1],1);
				for(i=0; i<IRCOMM_SAMPLING_WINDOW*2; i++) {
    99bc:	b8 e0       	ldi	r27, 0x08	; 8
    99be:	cd 3b       	cpi	r28, 0xBD	; 189
    99c0:	db 07       	cpc	r29, r27
    99c2:	d9 f6       	brne	.-74     	; 0x997a <irCommTasks+0xa12>
					usart0Transmit(irCommTempValue>>8,1);
					irCommTempValue = irCommMaxSensorSignalFiltTemp[i];
					usart0Transmit(irCommTempValue&0xFF,1);
					usart0Transmit(irCommTempValue>>8,1);
				}
				usart0Transmit(irCommMaxSensorValueCurrTemp[0]&0xFF,1);
    99c4:	80 91 3a 05 	lds	r24, 0x053A
    99c8:	61 e0       	ldi	r22, 0x01	; 1
    99ca:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
				usart0Transmit(irCommMaxSensorValueCurrTemp[0]>>8,1);
    99ce:	80 91 3b 05 	lds	r24, 0x053B
    99d2:	61 e0       	ldi	r22, 0x01	; 1
    99d4:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
				usart0Transmit(irCommMaxSensorValueCurrTemp[1]&0xFF,1);
    99d8:	80 91 3c 05 	lds	r24, 0x053C
    99dc:	61 e0       	ldi	r22, 0x01	; 1
    99de:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
				usart0Transmit(irCommMaxSensorValueCurrTemp[1]>>8,1);
    99e2:	80 91 3d 05 	lds	r24, 0x053D
    99e6:	61 e0       	ldi	r22, 0x01	; 1
    99e8:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
				usart0Transmit(irCommMinSensorValueCurrTemp[0]&0xFF,1);
    99ec:	80 91 2f 0b 	lds	r24, 0x0B2F
    99f0:	61 e0       	ldi	r22, 0x01	; 1
    99f2:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
				usart0Transmit(irCommMinSensorValueCurrTemp[0]>>8,1);
    99f6:	80 91 30 0b 	lds	r24, 0x0B30
    99fa:	61 e0       	ldi	r22, 0x01	; 1
    99fc:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
				usart0Transmit(irCommMinSensorValueCurrTemp[1]&0xFF,1);
    9a00:	80 91 31 0b 	lds	r24, 0x0B31
    9a04:	61 e0       	ldi	r22, 0x01	; 1
    9a06:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
				usart0Transmit(irCommMinSensorValueCurrTemp[1]>>8,1);
    9a0a:	80 91 32 0b 	lds	r24, 0x0B32
    9a0e:	61 e0       	ldi	r22, 0x01	; 1
    9a10:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
				usart0Transmit(irCommShiftCountTemp[0],1);
    9a14:	80 91 7d 0b 	lds	r24, 0x0B7D
    9a18:	61 e0       	ldi	r22, 0x01	; 1
    9a1a:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
				usart0Transmit(irCommShiftCountTemp[1],1);
    9a1e:	80 91 7e 0b 	lds	r24, 0x0B7E
    9a22:	61 e0       	ldi	r22, 0x01	; 1
    9a24:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
				usart0Transmit(irCommShiftCountFinalTemp[0],1);
    9a28:	80 91 37 0b 	lds	r24, 0x0B37
    9a2c:	61 e0       	ldi	r22, 0x01	; 1
    9a2e:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
				usart0Transmit(irCommShiftCountFinalTemp[1],1);
    9a32:	80 91 38 0b 	lds	r24, 0x0B38
    9a36:	61 e0       	ldi	r22, 0x01	; 1
    9a38:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
				usart0Transmit(irCommStartDiffTemp[0]&0xFF,1);
    9a3c:	80 91 be 08 	lds	r24, 0x08BE
    9a40:	61 e0       	ldi	r22, 0x01	; 1
    9a42:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
				usart0Transmit(irCommStartDiffTemp[0]>>8,1);
    9a46:	80 91 bf 08 	lds	r24, 0x08BF
    9a4a:	61 e0       	ldi	r22, 0x01	; 1
    9a4c:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
				usart0Transmit(irCommStartDiffTemp[1]&0xFF,1);
    9a50:	80 91 c0 08 	lds	r24, 0x08C0
    9a54:	61 e0       	ldi	r22, 0x01	; 1
    9a56:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
				usart0Transmit(irCommStartDiffTemp[1]>>8,1);
    9a5a:	80 91 c1 08 	lds	r24, 0x08C1
    9a5e:	61 e0       	ldi	r22, 0x01	; 1
    9a60:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
				usart0Transmit(irCommComputeShiftTemp[0],1);
    9a64:	80 91 6e 05 	lds	r24, 0x056E
    9a68:	61 e0       	ldi	r22, 0x01	; 1
    9a6a:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
				usart0Transmit(irCommComputeShiftTemp[1],1);
    9a6e:	80 91 6f 05 	lds	r24, 0x056F
    9a72:	61 e0       	ldi	r22, 0x01	; 1
    9a74:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
				usart0Transmit(irCommRxPeakHighToLowTemp[0],1);
    9a78:	80 91 cb 05 	lds	r24, 0x05CB
    9a7c:	61 e0       	ldi	r22, 0x01	; 1
    9a7e:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
				usart0Transmit(irCommRxPeakHighToLowTemp[1],1);
    9a82:	80 91 cc 05 	lds	r24, 0x05CC
    9a86:	61 e0       	ldi	r22, 0x01	; 1
    9a88:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
				usart0Transmit(irCommRxStartPeakDurationTemp[0],1);
    9a8c:	80 91 0d 07 	lds	r24, 0x070D
    9a90:	61 e0       	ldi	r22, 0x01	; 1
    9a92:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
				usart0Transmit(irCommRxStartPeakDurationTemp[1],1);
    9a96:	80 91 0e 07 	lds	r24, 0x070E
    9a9a:	61 e0       	ldi	r22, 0x01	; 1
    9a9c:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
				usart0Transmit(irCommRxStartBitDetectedTemp[0],1);
    9aa0:	80 91 77 05 	lds	r24, 0x0577
    9aa4:	61 e0       	ldi	r22, 0x01	; 1
    9aa6:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
				usart0Transmit(irCommRxStartBitDetectedTemp[1],1);
    9aaa:	80 91 78 05 	lds	r24, 0x0578
    9aae:	61 e0       	ldi	r22, 0x01	; 1
    9ab0:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
				usart0Transmit(irCommSyncStateTemp[0],1);
    9ab4:	80 91 6c 05 	lds	r24, 0x056C
    9ab8:	61 e0       	ldi	r22, 0x01	; 1
    9aba:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
				usart0Transmit(irCommSyncStateTemp[1],1);
    9abe:	80 91 6d 05 	lds	r24, 0x056D
    9ac2:	61 e0       	ldi	r22, 0x01	; 1
    9ac4:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
				for(i=0; i<14; i++) {
					usart0Transmit(irCommStateTemp[i],1);
    9ac8:	80 91 3e 05 	lds	r24, 0x053E
    9acc:	61 e0       	ldi	r22, 0x01	; 1
    9ace:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
    9ad2:	80 91 3f 05 	lds	r24, 0x053F
    9ad6:	61 e0       	ldi	r22, 0x01	; 1
    9ad8:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
    9adc:	80 91 40 05 	lds	r24, 0x0540
    9ae0:	61 e0       	ldi	r22, 0x01	; 1
    9ae2:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
    9ae6:	80 91 41 05 	lds	r24, 0x0541
    9aea:	61 e0       	ldi	r22, 0x01	; 1
    9aec:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
    9af0:	80 91 42 05 	lds	r24, 0x0542
    9af4:	61 e0       	ldi	r22, 0x01	; 1
    9af6:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
    9afa:	80 91 43 05 	lds	r24, 0x0543
    9afe:	61 e0       	ldi	r22, 0x01	; 1
    9b00:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
    9b04:	80 91 44 05 	lds	r24, 0x0544
    9b08:	61 e0       	ldi	r22, 0x01	; 1
    9b0a:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
    9b0e:	80 91 45 05 	lds	r24, 0x0545
    9b12:	61 e0       	ldi	r22, 0x01	; 1
    9b14:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
    9b18:	80 91 46 05 	lds	r24, 0x0546
    9b1c:	61 e0       	ldi	r22, 0x01	; 1
    9b1e:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
    9b22:	80 91 47 05 	lds	r24, 0x0547
    9b26:	61 e0       	ldi	r22, 0x01	; 1
    9b28:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
    9b2c:	80 91 48 05 	lds	r24, 0x0548
    9b30:	61 e0       	ldi	r22, 0x01	; 1
    9b32:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
    9b36:	80 91 49 05 	lds	r24, 0x0549
    9b3a:	61 e0       	ldi	r22, 0x01	; 1
    9b3c:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
    9b40:	80 91 4a 05 	lds	r24, 0x054A
    9b44:	61 e0       	ldi	r22, 0x01	; 1
    9b46:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
    9b4a:	80 91 4b 05 	lds	r24, 0x054B
    9b4e:	61 e0       	ldi	r22, 0x01	; 1
    9b50:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
    9b54:	c9 e9       	ldi	r28, 0x99	; 153
    9b56:	d9 e0       	ldi	r29, 0x09	; 9
				}
				for(i=0; i<200; i++) {
					irCommTempValue = irCommBitsSignalTemp[i];
    9b58:	88 81       	ld	r24, Y
    9b5a:	99 81       	ldd	r25, Y+1	; 0x01
    9b5c:	22 96       	adiw	r28, 0x02	; 2
    9b5e:	80 93 d8 04 	sts	0x04D8, r24
    9b62:	90 93 d9 04 	sts	0x04D9, r25
					usart0Transmit(irCommTempValue&0xFF,1);
    9b66:	61 e0       	ldi	r22, 0x01	; 1
    9b68:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
					usart0Transmit(irCommTempValue>>8,1);
    9b6c:	80 91 d9 04 	lds	r24, 0x04D9
    9b70:	61 e0       	ldi	r22, 0x01	; 1
    9b72:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
				usart0Transmit(irCommSyncStateTemp[0],1);
				usart0Transmit(irCommSyncStateTemp[1],1);
				for(i=0; i<14; i++) {
					usart0Transmit(irCommStateTemp[i],1);
				}
				for(i=0; i<200; i++) {
    9b76:	eb e0       	ldi	r30, 0x0B	; 11
    9b78:	c9 32       	cpi	r28, 0x29	; 41
    9b7a:	de 07       	cpc	r29, r30
    9b7c:	69 f7       	brne	.-38     	; 0x9b58 <irCommTasks+0xbf0>
					irCommTempValue = irCommBitsSignalTemp[i];
					usart0Transmit(irCommTempValue&0xFF,1);
					usart0Transmit(irCommTempValue>>8,1);
				}
				for(i=0; i<10; i++) {
					usart0Transmit(irCommRxBitReceivedTemp[i],1);
    9b7e:	80 91 61 08 	lds	r24, 0x0861
    9b82:	61 e0       	ldi	r22, 0x01	; 1
    9b84:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
    9b88:	80 91 62 08 	lds	r24, 0x0862
    9b8c:	61 e0       	ldi	r22, 0x01	; 1
    9b8e:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
    9b92:	80 91 63 08 	lds	r24, 0x0863
    9b96:	61 e0       	ldi	r22, 0x01	; 1
    9b98:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
    9b9c:	80 91 64 08 	lds	r24, 0x0864
    9ba0:	61 e0       	ldi	r22, 0x01	; 1
    9ba2:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
    9ba6:	80 91 65 08 	lds	r24, 0x0865
    9baa:	61 e0       	ldi	r22, 0x01	; 1
    9bac:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
    9bb0:	80 91 66 08 	lds	r24, 0x0866
    9bb4:	61 e0       	ldi	r22, 0x01	; 1
    9bb6:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
    9bba:	80 91 67 08 	lds	r24, 0x0867
    9bbe:	61 e0       	ldi	r22, 0x01	; 1
    9bc0:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
    9bc4:	80 91 68 08 	lds	r24, 0x0868
    9bc8:	61 e0       	ldi	r22, 0x01	; 1
    9bca:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
    9bce:	80 91 69 08 	lds	r24, 0x0869
    9bd2:	61 e0       	ldi	r22, 0x01	; 1
    9bd4:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
    9bd8:	80 91 6a 08 	lds	r24, 0x086A
    9bdc:	61 e0       	ldi	r22, 0x01	; 1
    9bde:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
				}
				usart0Transmit(irCommRxCrc,1);
    9be2:	80 91 05 05 	lds	r24, 0x0505
    9be6:	61 e0       	ldi	r22, 0x01	; 1
    9be8:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
				usart0Transmit(irCommRxCrcError,1);
    9bec:	80 91 15 05 	lds	r24, 0x0515
    9bf0:	61 e0       	ldi	r22, 0x01	; 1
    9bf2:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
				usart0Transmit(irCommRxByte,1);
    9bf6:	80 91 16 05 	lds	r24, 0x0516
    9bfa:	61 e0       	ldi	r22, 0x01	; 1
    9bfc:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
				usart0Transmit(irCommRxByteExpected,1);				
    9c00:	80 91 19 05 	lds	r24, 0x0519
    9c04:	61 e0       	ldi	r22, 0x01	; 1
    9c06:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>

				irCommState = IRCOMM_RX_STOP;
    9c0a:	89 e0       	ldi	r24, 0x09	; 9
    9c0c:	80 93 d7 04 	sts	0x04D7, r24
				break;
    9c10:	c3 c9       	rjmp	.-3194   	; 0x8f98 <irCommTasks+0x30>
				irCommProxSum = 0;
				irCommTempMin = 1024;
				irCommTempMax = 0;
				irCommShiftCount = 0;
				irCommComputeShift = 1;												
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    9c12:	60 93 06 05 	sts	0x0506, r22
    9c16:	70 93 07 05 	sts	0x0507, r23
    9c1a:	80 93 08 05 	sts	0x0508, r24
    9c1e:	90 93 09 05 	sts	0x0509, r25
						}											
					 }

				}

				if(irCommComputeShiftIndexTemp>1) {
    9c22:	20 91 fa 04 	lds	r18, 0x04FA
    9c26:	22 30       	cpi	r18, 0x02	; 2
    9c28:	08 f4       	brcc	.+2      	; 0x9c2c <irCommTasks+0xcc4>
    9c2a:	b0 c2       	rjmp	.+1376   	; 0xa18c <irCommTasks+0x1224>
    9c2c:	22 e0       	ldi	r18, 0x02	; 2
    9c2e:	e1 e0       	ldi	r30, 0x01	; 1
    9c30:	f0 e0       	ldi	r31, 0x00	; 0
					irCommComputeShiftIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommComputeShiftTemp[irCommComputeShiftIndexTemp] = irCommComputeShift;
    9c32:	e2 59       	subi	r30, 0x92	; 146
    9c34:	fa 4f       	sbci	r31, 0xFA	; 250
    9c36:	c0 82       	st	Z, r12
				irCommComputeShiftIndexTemp++;
    9c38:	20 93 fa 04 	sts	0x04FA, r18
				
				if(irCommShiftCountIndexTemp>1) {
    9c3c:	20 91 f7 04 	lds	r18, 0x04F7
    9c40:	22 30       	cpi	r18, 0x02	; 2
    9c42:	08 f4       	brcc	.+2      	; 0x9c46 <irCommTasks+0xcde>
    9c44:	9f c2       	rjmp	.+1342   	; 0xa184 <irCommTasks+0x121c>
    9c46:	22 e0       	ldi	r18, 0x02	; 2
    9c48:	e1 e0       	ldi	r30, 0x01	; 1
    9c4a:	f0 e0       	ldi	r31, 0x00	; 0
					irCommShiftCountIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommShiftCountTemp[irCommShiftCountIndexTemp] = irCommShiftCount;
    9c4c:	e3 58       	subi	r30, 0x83	; 131
    9c4e:	f4 4f       	sbci	r31, 0xF4	; 244
    9c50:	f0 82       	st	Z, r15
				irCommShiftCountIndexTemp++;
    9c52:	20 93 f7 04 	sts	0x04F7, r18
				
				if(irCommRxPeakHighToLowIndexTemp>1) {
    9c56:	20 91 fb 04 	lds	r18, 0x04FB
    9c5a:	22 30       	cpi	r18, 0x02	; 2
    9c5c:	08 f4       	brcc	.+2      	; 0x9c60 <irCommTasks+0xcf8>
    9c5e:	8e c2       	rjmp	.+1308   	; 0xa17c <irCommTasks+0x1214>
    9c60:	22 e0       	ldi	r18, 0x02	; 2
    9c62:	e1 e0       	ldi	r30, 0x01	; 1
    9c64:	f0 e0       	ldi	r31, 0x00	; 0
					irCommRxPeakHighToLowIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommRxPeakHighToLowTemp[irCommRxPeakHighToLowIndexTemp] = irCommRxPeakHighToLow;
    9c66:	e0 90 1f 05 	lds	r14, 0x051F
    9c6a:	ce 2c       	mov	r12, r14
    9c6c:	e5 53       	subi	r30, 0x35	; 53
    9c6e:	fa 4f       	sbci	r31, 0xFA	; 250
    9c70:	e0 82       	st	Z, r14
				irCommRxPeakHighToLowIndexTemp++;
    9c72:	20 93 fb 04 	sts	0x04FB, r18
				
				if(irCommRxStartPeakDurationIndexTemp>1) {
    9c76:	20 91 fc 04 	lds	r18, 0x04FC
    9c7a:	22 30       	cpi	r18, 0x02	; 2
    9c7c:	08 f4       	brcc	.+2      	; 0x9c80 <irCommTasks+0xd18>
    9c7e:	7a c2       	rjmp	.+1268   	; 0xa174 <irCommTasks+0x120c>
    9c80:	22 e0       	ldi	r18, 0x02	; 2
    9c82:	e1 e0       	ldi	r30, 0x01	; 1
    9c84:	f0 e0       	ldi	r31, 0x00	; 0
					irCommRxStartPeakDurationIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommRxStartPeakDurationTemp[irCommRxStartPeakDurationIndexTemp] = irCommRxStartPeakDuration;
    9c86:	e3 5f       	subi	r30, 0xF3	; 243
    9c88:	f8 4f       	sbci	r31, 0xF8	; 248
    9c8a:	d0 90 20 05 	lds	r13, 0x0520
    9c8e:	d0 82       	st	Z, r13
				irCommRxStartPeakDurationIndexTemp++;
    9c90:	20 93 fc 04 	sts	0x04FC, r18
					
				
				//if(irCommComputeShift != 0) {	// it should not be never 1 because the difference between min and max in the current signal
					//updateRedLed(0);			// is at least IRCOMM_DETECTION_AMPLITUDE_THR (checked in the previous state)
				//}
				irCommProxMean = (int)(irCommProxSum / IRCOMM_SAMPLING_WINDOW);
    9c94:	24 e1       	ldi	r18, 0x14	; 20
    9c96:	30 e0       	ldi	r19, 0x00	; 0
    9c98:	40 e0       	ldi	r20, 0x00	; 0
    9c9a:	50 e0       	ldi	r21, 0x00	; 0
    9c9c:	0e 94 7b 56 	call	0xacf6	; 0xacf6 <__divmodsi4>
    9ca0:	c9 01       	movw	r24, r18
    9ca2:	30 93 11 05 	sts	0x0511, r19
    9ca6:	20 93 10 05 	sts	0x0510, r18

				if(irCommProxMeanIndexTemp>1) {
    9caa:	20 91 f3 04 	lds	r18, 0x04F3
    9cae:	22 30       	cpi	r18, 0x02	; 2
    9cb0:	08 f4       	brcc	.+2      	; 0x9cb4 <irCommTasks+0xd4c>
    9cb2:	5c c2       	rjmp	.+1208   	; 0xa16c <irCommTasks+0x1204>
    9cb4:	22 e0       	ldi	r18, 0x02	; 2
    9cb6:	e1 e0       	ldi	r30, 0x01	; 1
    9cb8:	f0 e0       	ldi	r31, 0x00	; 0
					irCommProxMeanIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommProxMeanTemp[irCommProxMeanIndexTemp] = irCommProxMean;
    9cba:	ee 0f       	add	r30, r30
    9cbc:	ff 1f       	adc	r31, r31
    9cbe:	ef 58       	subi	r30, 0x8F	; 143
    9cc0:	fa 4f       	sbci	r31, 0xFA	; 250
    9cc2:	91 83       	std	Z+1, r25	; 0x01
    9cc4:	80 83       	st	Z, r24
				irCommProxMeanIndexTemp++;
    9cc6:	20 93 f3 04 	sts	0x04F3, r18
    9cca:	40 91 f0 04 	lds	r20, 0x04F0
    9cce:	0d c0       	rjmp	.+26     	; 0x9cea <irCommTasks+0xd82>

				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
					irCommMaxSensorSignal[i] -= irCommProxMean;

					if(irCommMaxSensorSignalFiltIndexTemp>39) {
    9cd0:	e4 2f       	mov	r30, r20
    9cd2:	f0 e0       	ldi	r31, 0x00	; 0
    9cd4:	4f 5f       	subi	r20, 0xFF	; 255
						irCommMaxSensorSignalFiltIndexTemp = 39;
						//updateRedLed(0);
					}
					irCommMaxSensorSignalFiltTemp[irCommMaxSensorSignalFiltIndexTemp] = irCommMaxSensorSignal[i];
    9cd6:	ee 0f       	add	r30, r30
    9cd8:	ff 1f       	adc	r31, r31
    9cda:	e7 58       	subi	r30, 0x87	; 135
    9cdc:	fa 4f       	sbci	r31, 0xFA	; 250
    9cde:	31 83       	std	Z+1, r19	; 0x01
    9ce0:	20 83       	st	Z, r18
				irCommProxMeanTemp[irCommProxMeanIndexTemp] = irCommProxMean;
				irCommProxMeanIndexTemp++;
				

				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    9ce2:	eb e0       	ldi	r30, 0x0B	; 11
    9ce4:	03 36       	cpi	r16, 0x63	; 99
    9ce6:	1e 07       	cpc	r17, r30
    9ce8:	81 f0       	breq	.+32     	; 0x9d0a <irCommTasks+0xda2>
					irCommMaxSensorSignal[i] -= irCommProxMean;
    9cea:	d8 01       	movw	r26, r16
    9cec:	2d 91       	ld	r18, X+
    9cee:	3c 91       	ld	r19, X
    9cf0:	11 97       	sbiw	r26, 0x01	; 1
    9cf2:	28 1b       	sub	r18, r24
    9cf4:	39 0b       	sbc	r19, r25
    9cf6:	e8 01       	movw	r28, r16
    9cf8:	29 93       	st	Y+, r18
    9cfa:	39 93       	st	Y+, r19
    9cfc:	8e 01       	movw	r16, r28

					if(irCommMaxSensorSignalFiltIndexTemp>39) {
    9cfe:	48 32       	cpi	r20, 0x28	; 40
    9d00:	38 f3       	brcs	.-50     	; 0x9cd0 <irCommTasks+0xd68>
    9d02:	48 e2       	ldi	r20, 0x28	; 40
    9d04:	e7 e2       	ldi	r30, 0x27	; 39
    9d06:	f0 e0       	ldi	r31, 0x00	; 0
    9d08:	e6 cf       	rjmp	.-52     	; 0x9cd6 <irCommTasks+0xd6e>
				irCommProxMeanTemp[irCommProxMeanIndexTemp] = irCommProxMean;
				irCommProxMeanIndexTemp++;
				

				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    9d0a:	40 93 f0 04 	sts	0x04F0, r20
					irCommMaxSensorSignalFiltIndexTemp++;
					
				}
						
				// start counting number of switch around mean signal
				if(irCommMaxSensorSignal[0] > 0) {
    9d0e:	80 91 3b 0b 	lds	r24, 0x0B3B
    9d12:	90 91 3c 0b 	lds	r25, 0x0B3C
    9d16:	18 16       	cp	r1, r24
    9d18:	19 06       	cpc	r1, r25
    9d1a:	0c f0       	brlt	.+2      	; 0x9d1e <irCommTasks+0xdb6>
    9d1c:	21 c2       	rjmp	.+1090   	; 0xa160 <irCommTasks+0x11f8>
					irCommSignalState = 1;
    9d1e:	81 e0       	ldi	r24, 0x01	; 1
    9d20:	80 93 12 05 	sts	0x0512, r24
    9d24:	21 e0       	ldi	r18, 0x01	; 1
    9d26:	38 2f       	mov	r19, r24
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
    9d28:	ed e3       	ldi	r30, 0x3D	; 61
    9d2a:	fb e0       	ldi	r31, 0x0B	; 11
    9d2c:	40 e0       	ldi	r20, 0x00	; 0
    9d2e:	07 c0       	rjmp	.+14     	; 0x9d3e <irCommTasks+0xdd6>
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
    9d30:	27 fd       	sbrc	r18, 7
    9d32:	0f c0       	rjmp	.+30     	; 0x9d52 <irCommTasks+0xdea>
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
    9d34:	8e 16       	cp	r8, r30
    9d36:	9f 06       	cpc	r9, r31
    9d38:	79 f0       	breq	.+30     	; 0x9d58 <irCommTasks+0xdf0>
    9d3a:	ce 2c       	mov	r12, r14
    9d3c:	23 2f       	mov	r18, r19
					if(irCommMaxSensorSignal[i] > 0) {
    9d3e:	81 91       	ld	r24, Z+
    9d40:	91 91       	ld	r25, Z+
    9d42:	18 16       	cp	r1, r24
    9d44:	19 06       	cpc	r1, r25
    9d46:	a4 f3       	brlt	.-24     	; 0x9d30 <irCommTasks+0xdc8>
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
							irCommSwitchCount++;
						}
					} else {
						if(irCommSignalState > 0) {
    9d48:	12 16       	cp	r1, r18
    9d4a:	a4 f7       	brge	.-24     	; 0x9d34 <irCommTasks+0xdcc>
							irCommSignalState = -1;
							irCommSwitchCount++;
    9d4c:	4f 5f       	subi	r20, 0xFF	; 255
							irCommSignalState = 1;
							irCommSwitchCount++;
						}
					} else {
						if(irCommSignalState > 0) {
							irCommSignalState = -1;
    9d4e:	3f ef       	ldi	r19, 0xFF	; 255
    9d50:	f1 cf       	rjmp	.-30     	; 0x9d34 <irCommTasks+0xdcc>
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
							irCommSwitchCount++;
    9d52:	4f 5f       	subi	r20, 0xFF	; 255
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
    9d54:	31 e0       	ldi	r19, 0x01	; 1
    9d56:	ee cf       	rjmp	.-36     	; 0x9d34 <irCommTasks+0xdcc>
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
    9d58:	30 93 12 05 	sts	0x0512, r19
    9d5c:	40 93 13 05 	sts	0x0513, r20
							irCommSwitchCount++;
						}
					}
				}

				if(irCommSwitchCountIndexTemp>1) {
    9d60:	80 91 f4 04 	lds	r24, 0x04F4
    9d64:	82 30       	cpi	r24, 0x02	; 2
    9d66:	08 f4       	brcc	.+2      	; 0x9d6a <irCommTasks+0xe02>
    9d68:	e5 c1       	rjmp	.+970    	; 0xa134 <irCommTasks+0x11cc>
    9d6a:	92 e0       	ldi	r25, 0x02	; 2
    9d6c:	e1 e0       	ldi	r30, 0x01	; 1
    9d6e:	f0 e0       	ldi	r31, 0x00	; 0
					irCommSwitchCountIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommSwitchCountTemp[irCommSwitchCountIndexTemp] = irCommSwitchCount;
    9d70:	80 91 13 05 	lds	r24, 0x0513
    9d74:	ed 5a       	subi	r30, 0xAD	; 173
    9d76:	fa 4f       	sbci	r31, 0xFA	; 250
    9d78:	80 83       	st	Z, r24
				irCommSwitchCountIndexTemp++;
    9d7a:	90 93 f4 04 	sts	0x04F4, r25
				

				//turnOffGreenLeds();
				if(irCommRxPeakHighToLow==1) {
    9d7e:	fc 2d       	mov	r31, r12
    9d80:	f1 30       	cpi	r31, 0x01	; 1
    9d82:	09 f4       	brne	.+2      	; 0x9d86 <irCommTasks+0xe1e>
    9d84:	af c1       	rjmp	.+862    	; 0xa0e4 <irCommTasks+0x117c>
							resetDebugVariables();				
							break;
						}
					}
				} else {
					if(irCommRxStartBitDetected==1) {
    9d86:	90 91 1e 05 	lds	r25, 0x051E
    9d8a:	91 30       	cpi	r25, 0x01	; 1
    9d8c:	09 f4       	brne	.+2      	; 0x9d90 <irCommTasks+0xe28>
    9d8e:	08 c2       	rjmp	.+1040   	; 0xa1a0 <irCommTasks+0x1238>

							resetDebugVariables();				
							break;
						}
					} else {
						if(irCommSwitchCount==2) {
    9d90:	82 30       	cpi	r24, 0x02	; 2
    9d92:	09 f4       	brne	.+2      	; 0x9d96 <irCommTasks+0xe2e>
    9d94:	5a c2       	rjmp	.+1204   	; 0xa24a <irCommTasks+0x12e2>
							irCommShiftCounter = 0;
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else if(irCommSwitchCount==1) {
    9d96:	81 30       	cpi	r24, 0x01	; 1
    9d98:	09 f4       	brne	.+2      	; 0x9d9c <irCommTasks+0xe34>
    9d9a:	e6 c2       	rjmp	.+1484   	; 0xa368 <irCommTasks+0x1400>
								irCommRxCrc = 0;	
								irCommRxByte = 0;
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
							}
						} else {
							currentProx = 0;
    9d9c:	10 92 34 02 	sts	0x0234, r1
							adcSaveDataTo = SKIP_SAMPLE;
    9da0:	85 e0       	ldi	r24, 0x05	; 5
    9da2:	80 93 c9 02 	sts	0x02C9, r24
							adcSamplingState = 0;
    9da6:	10 92 ca 02 	sts	0x02CA, r1
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;							
    9daa:	10 92 d6 04 	sts	0x04D6, r1
							irCommState = IRCOMM_RX_IDLE_STATE;
    9dae:	81 e0       	ldi	r24, 0x01	; 1
    9db0:	80 93 d7 04 	sts	0x04D7, r24

							if(irCommSyncStateIndexTemp>1) {
    9db4:	20 91 ff 04 	lds	r18, 0x04FF
    9db8:	22 30       	cpi	r18, 0x02	; 2
    9dba:	08 f4       	brcc	.+2      	; 0x9dbe <irCommTasks+0xe56>
    9dbc:	79 c3       	rjmp	.+1778   	; 0xa4b0 <irCommTasks+0x1548>
    9dbe:	22 e0       	ldi	r18, 0x02	; 2
    9dc0:	81 e0       	ldi	r24, 0x01	; 1
    9dc2:	90 e0       	ldi	r25, 0x00	; 0
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 15;
    9dc4:	84 59       	subi	r24, 0x94	; 148
    9dc6:	9a 4f       	sbci	r25, 0xFA	; 250
    9dc8:	3f e0       	ldi	r19, 0x0F	; 15
    9dca:	ec 01       	movw	r28, r24
    9dcc:	38 83       	st	Y, r19
							irCommSyncStateIndexTemp++;
    9dce:	20 93 ff 04 	sts	0x04FF, r18
							//irCommState = IRCOMM_RX_DEBUG;
							//irCommAdcRxState = 12;
							//updateRedLed(0);
							//break;

							resetDebugVariables();				
    9dd2:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <resetDebugVariables>
							break;				
    9dd6:	e0 c8       	rjmp	.-3648   	; 0x8f98 <irCommTasks+0x30>

				}							
				break;

			case IRCOMM_RX_CHECK_CRC:
				irCommRxCrcError = (irCommRxCrc + (irCommRxBitReceived[8]<<1) + irCommRxBitReceived[9])&0x03;
    9dd8:	80 91 6b 05 	lds	r24, 0x056B
    9ddc:	90 91 05 05 	lds	r25, 0x0505
    9de0:	89 0f       	add	r24, r25
    9de2:	90 91 6a 05 	lds	r25, 0x056A
    9de6:	99 0f       	add	r25, r25
    9de8:	89 0f       	add	r24, r25
    9dea:	83 70       	andi	r24, 0x03	; 3
    9dec:	80 93 15 05 	sts	0x0515, r24
				if(irCommRxCrcError==0) {
    9df0:	88 23       	and	r24, r24
    9df2:	69 f4       	brne	.+26     	; 0x9e0e <irCommTasks+0xea6>
					irCommRxLastDataReceived = irCommRxByte;
    9df4:	80 91 16 05 	lds	r24, 0x0516
    9df8:	80 93 1b 05 	sts	0x051B, r24
					irCommRxReceivingSensor = irCommRxMaxSensor;
    9dfc:	90 91 23 05 	lds	r25, 0x0523
    9e00:	90 93 19 02 	sts	0x0219, r25
					irCommRxDataAvailable = 1;
    9e04:	00 93 1c 05 	sts	0x051C, r16
					//updateBlueLed(0);
					usart0Transmit(irCommRxByte,1);		
    9e08:	61 e0       	ldi	r22, 0x01	; 1
    9e0a:	0e 94 52 20 	call	0x40a4	; 0x40a4 <usart0Transmit>
					//updateBlueLed(255);			
				}
												
				currentProx = 0;
    9e0e:	10 92 34 02 	sts	0x0234, r1
				adcSaveDataTo = SKIP_SAMPLE;
    9e12:	85 e0       	ldi	r24, 0x05	; 5
    9e14:	80 93 c9 02 	sts	0x02C9, r24
				adcSamplingState = 0;
    9e18:	10 92 ca 02 	sts	0x02CA, r1
				irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;				
    9e1c:	10 92 d6 04 	sts	0x04D6, r1
				} else {
					irCommRxPrevDataReceived = irCommRxLastDataReceived;
				}
				*/

				resetDebugVariables();
    9e20:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <resetDebugVariables>

				irCommState = IRCOMM_RX_IDLE_STATE;
    9e24:	81 e0       	ldi	r24, 0x01	; 1
    9e26:	80 93 d7 04 	sts	0x04D7, r24

				break;
    9e2a:	b6 c8       	rjmp	.-3732   	; 0x8f98 <irCommTasks+0x30>

	if(irCommMode==IRCOMM_MODE_RECEIVE) {

		switch(irCommState) {
			case IRCOMM_RX_IDLE_STATE:				
				if((irCommRxStartBitDetected==0) && (irCommEnabled!=irCommEnabledNext)) {
    9e2c:	80 91 1e 05 	lds	r24, 0x051E
    9e30:	88 23       	and	r24, r24
    9e32:	09 f0       	breq	.+2      	; 0x9e36 <irCommTasks+0xece>
    9e34:	b1 c8       	rjmp	.-3742   	; 0x8f98 <irCommTasks+0x30>
    9e36:	90 91 d4 04 	lds	r25, 0x04D4
    9e3a:	80 91 d5 04 	lds	r24, 0x04D5
    9e3e:	98 17       	cp	r25, r24
    9e40:	09 f4       	brne	.+2      	; 0x9e44 <irCommTasks+0xedc>
    9e42:	aa c8       	rjmp	.-3756   	; 0x8f98 <irCommTasks+0x30>
					if((getTime100MicroSec() - irCommTxLastTransmissionTime) > PAUSE_200_MSEC) {
    9e44:	0e 94 35 22 	call	0x446a	; 0x446a <getTime100MicroSec>
    9e48:	20 91 29 05 	lds	r18, 0x0529
    9e4c:	30 91 2a 05 	lds	r19, 0x052A
    9e50:	40 91 2b 05 	lds	r20, 0x052B
    9e54:	50 91 2c 05 	lds	r21, 0x052C
    9e58:	62 1b       	sub	r22, r18
    9e5a:	73 0b       	sbc	r23, r19
    9e5c:	84 0b       	sbc	r24, r20
    9e5e:	95 0b       	sbc	r25, r21
    9e60:	64 38       	cpi	r22, 0x84	; 132
    9e62:	27 e0       	ldi	r18, 0x07	; 7
    9e64:	72 07       	cpc	r23, r18
    9e66:	20 e0       	ldi	r18, 0x00	; 0
    9e68:	82 07       	cpc	r24, r18
    9e6a:	20 e0       	ldi	r18, 0x00	; 0
    9e6c:	92 07       	cpc	r25, r18
    9e6e:	08 f4       	brcc	.+2      	; 0x9e72 <irCommTasks+0xf0a>
    9e70:	93 c8       	rjmp	.-3802   	; 0x8f98 <irCommTasks+0x30>
#include "irCommunication.h"


void irCommInitTransmitter() {
	irCommEnabled = IRCOMM_MODE_TRANSMIT;
    9e72:	82 e0       	ldi	r24, 0x02	; 2
    9e74:	80 93 d4 04 	sts	0x04D4, r24
	irCommState = IRCOMM_TX_IDLE_STATE;
    9e78:	10 93 d7 04 	sts	0x04D7, r17
    9e7c:	8d c8       	rjmp	.-3814   	; 0x8f98 <irCommTasks+0x30>
				}

				irCommProxMean = (int)(irCommProxSum / IRCOMM_SAMPLING_WINDOW);

				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    9e7e:	20 93 00 05 	sts	0x0500, r18
					irCommBitsSignalTemp[irCommBitsSignalIndexTemp] = irCommMaxSensorSignal[i];
					irCommBitsSignalIndexTemp++;
				}
						
				// start counting number of switch around mean signal
				if(irCommMaxSensorSignal[0] > 0) {
    9e82:	80 91 3b 0b 	lds	r24, 0x0B3B
    9e86:	90 91 3c 0b 	lds	r25, 0x0B3C
    9e8a:	18 16       	cp	r1, r24
    9e8c:	19 06       	cpc	r1, r25
    9e8e:	0c f0       	brlt	.+2      	; 0x9e92 <irCommTasks+0xf2a>
    9e90:	81 c1       	rjmp	.+770    	; 0xa194 <irCommTasks+0x122c>
					irCommSignalState = 1;
    9e92:	81 e0       	ldi	r24, 0x01	; 1
    9e94:	80 93 12 05 	sts	0x0512, r24
    9e98:	21 e0       	ldi	r18, 0x01	; 1
    9e9a:	38 2f       	mov	r19, r24
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
    9e9c:	ed e3       	ldi	r30, 0x3D	; 61
    9e9e:	fb e0       	ldi	r31, 0x0B	; 11
    9ea0:	40 e0       	ldi	r20, 0x00	; 0
    9ea2:	07 c0       	rjmp	.+14     	; 0x9eb2 <irCommTasks+0xf4a>
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
    9ea4:	27 fd       	sbrc	r18, 7
    9ea6:	0f c0       	rjmp	.+30     	; 0x9ec6 <irCommTasks+0xf5e>
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
    9ea8:	2b e0       	ldi	r18, 0x0B	; 11
    9eaa:	e3 36       	cpi	r30, 0x63	; 99
    9eac:	f2 07       	cpc	r31, r18
    9eae:	71 f0       	breq	.+28     	; 0x9ecc <irCommTasks+0xf64>
    9eb0:	23 2f       	mov	r18, r19
					if(irCommMaxSensorSignal[i] > 0) {
    9eb2:	81 91       	ld	r24, Z+
    9eb4:	91 91       	ld	r25, Z+
    9eb6:	18 16       	cp	r1, r24
    9eb8:	19 06       	cpc	r1, r25
    9eba:	a4 f3       	brlt	.-24     	; 0x9ea4 <irCommTasks+0xf3c>
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
							irCommSwitchCount++;
						}
					} else {
						if(irCommSignalState > 0) {
    9ebc:	12 16       	cp	r1, r18
    9ebe:	a4 f7       	brge	.-24     	; 0x9ea8 <irCommTasks+0xf40>
							irCommSignalState = -1;
							irCommSwitchCount++;
    9ec0:	4f 5f       	subi	r20, 0xFF	; 255
							irCommSignalState = 1;
							irCommSwitchCount++;
						}
					} else {
						if(irCommSignalState > 0) {
							irCommSignalState = -1;
    9ec2:	3f ef       	ldi	r19, 0xFF	; 255
    9ec4:	f1 cf       	rjmp	.-30     	; 0x9ea8 <irCommTasks+0xf40>
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
							irCommSwitchCount++;
    9ec6:	4f 5f       	subi	r20, 0xFF	; 255
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
    9ec8:	31 e0       	ldi	r19, 0x01	; 1
    9eca:	ee cf       	rjmp	.-36     	; 0x9ea8 <irCommTasks+0xf40>
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
    9ecc:	30 93 12 05 	sts	0x0512, r19
    9ed0:	40 93 13 05 	sts	0x0513, r20
							irCommSwitchCount++;
						}
					}
				}
				// check whether we received either a "0" or a "1"
				if(irCommSwitchCount >= (IRCOMM_BIT0_SWITCH_COUNT-2)) {
    9ed4:	46 30       	cpi	r20, 0x06	; 6
    9ed6:	08 f4       	brcc	.+2      	; 0x9eda <irCommTasks+0xf72>
    9ed8:	ab c0       	rjmp	.+342    	; 0xa030 <irCommTasks+0x10c8>
					irCommRxBitReceived[irCommRxBitCount] = 0;
    9eda:	80 91 14 05 	lds	r24, 0x0514
    9ede:	e8 2f       	mov	r30, r24
    9ee0:	f0 e0       	ldi	r31, 0x00	; 0
    9ee2:	ee 59       	subi	r30, 0x9E	; 158
    9ee4:	fa 4f       	sbci	r31, 0xFA	; 250
    9ee6:	10 82       	st	Z, r1
					if(irCommRxBitCount<8) {	// do not consider the crc for byte interpretation
    9ee8:	88 30       	cpi	r24, 0x08	; 8
    9eea:	28 f4       	brcc	.+10     	; 0x9ef6 <irCommTasks+0xf8e>
						irCommRxByte = irCommRxByte<<1;	// bit0, only shift
    9eec:	90 91 16 05 	lds	r25, 0x0516
    9ef0:	99 0f       	add	r25, r25
    9ef2:	90 93 16 05 	sts	0x0516, r25
					resetDebugVariables();
					break;

				}

				if(irCommRxBitReceivedIndexTemp>9) {
    9ef6:	90 91 01 05 	lds	r25, 0x0501
    9efa:	9a 30       	cpi	r25, 0x0A	; 10
    9efc:	08 f0       	brcs	.+2      	; 0x9f00 <irCommTasks+0xf98>
    9efe:	b2 c0       	rjmp	.+356    	; 0xa064 <irCommTasks+0x10fc>
    9f00:	a9 2f       	mov	r26, r25
    9f02:	b0 e0       	ldi	r27, 0x00	; 0
    9f04:	9f 5f       	subi	r25, 0xFF	; 255
					irCommRxBitReceivedIndexTemp = 9;
					//updateRedLed(0);
				}
				irCommRxBitReceivedTemp[irCommRxBitReceivedIndexTemp] = irCommRxBitReceived[irCommRxBitCount];
    9f06:	af 59       	subi	r26, 0x9F	; 159
    9f08:	b7 4f       	sbci	r27, 0xF7	; 247
    9f0a:	e8 2f       	mov	r30, r24
    9f0c:	f0 e0       	ldi	r31, 0x00	; 0
    9f0e:	ee 59       	subi	r30, 0x9E	; 158
    9f10:	fa 4f       	sbci	r31, 0xFA	; 250
    9f12:	20 81       	ld	r18, Z
    9f14:	2c 93       	st	X, r18
				irCommRxBitReceivedIndexTemp++;
    9f16:	90 93 01 05 	sts	0x0501, r25

				//setGreenLed(irCommRxBitCount, 1);

				irCommRxBitCount++;
    9f1a:	8f 5f       	subi	r24, 0xFF	; 255
    9f1c:	80 93 14 05 	sts	0x0514, r24
				if(irCommRxBitCount == 10) {	// received 8 bit of data + 2 bit of crc
    9f20:	8a 30       	cpi	r24, 0x0A	; 10
    9f22:	09 f4       	brne	.+2      	; 0x9f26 <irCommTasks+0xfbe>
    9f24:	62 c1       	rjmp	.+708    	; 0xa1ea <irCommTasks+0x1282>
					}
					irCommStateTemp[irCommStateIndexTemp] = irCommState;
					irCommStateIndexTemp++;

				} else {
					irCommState = IRCOMM_RX_WAITING_BIT;
    9f26:	85 e0       	ldi	r24, 0x05	; 5
    9f28:	80 93 d7 04 	sts	0x04D7, r24

					if(irCommStateIndexTemp>13) {
    9f2c:	80 91 fe 04 	lds	r24, 0x04FE
    9f30:	8e 30       	cpi	r24, 0x0E	; 14
    9f32:	08 f0       	brcs	.+2      	; 0x9f36 <irCommTasks+0xfce>
    9f34:	05 cb       	rjmp	.-2550   	; 0x9540 <irCommTasks+0x5d8>
    9f36:	e8 2f       	mov	r30, r24
    9f38:	f0 e0       	ldi	r31, 0x00	; 0
    9f3a:	8f 5f       	subi	r24, 0xFF	; 255
    9f3c:	04 cb       	rjmp	.-2552   	; 0x9546 <irCommTasks+0x5de>
						}
					}
				} else {
					// cannot get a reliable signal from the sensor from which the start bit was detected the previous time,
					// thus restart listening from the next sensor
					if(irCommRxStartBitDetected == 1) {
    9f3e:	80 91 1e 05 	lds	r24, 0x051E
    9f42:	81 30       	cpi	r24, 0x01	; 1
    9f44:	09 f4       	brne	.+2      	; 0x9f48 <irCommTasks+0xfe0>
    9f46:	5a c1       	rjmp	.+692    	; 0xa1fc <irCommTasks+0x1294>
					//if(irCommRxStartBitDetected == 1) {	// signal becomes too low to be reliable...or something else happened				
					//	irCommState = IRCOMM_RX_DEBUG;
					//	irCommAdcRxState = 12;
					//	updateGreenLed(0);
					//} else {
						irCommRxStartBitDetected = 0;
    9f48:	10 92 1e 05 	sts	0x051E, r1
						irCommRxByte += 1;
					}
				} else {	// error...no significant signal perceived
					//irCommRxBitReceived[irCommRxBitCount] = 0xFF;
					//updateRedLed(0);
					currentProx = 0;
    9f4c:	10 92 34 02 	sts	0x0234, r1
					adcSaveDataTo = SKIP_SAMPLE;
    9f50:	85 e0       	ldi	r24, 0x05	; 5
    9f52:	80 93 c9 02 	sts	0x02C9, r24
					adcSamplingState = 0;
    9f56:	10 92 ca 02 	sts	0x02CA, r1
					irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;					
    9f5a:	10 92 d6 04 	sts	0x04D6, r1
					irCommState = IRCOMM_RX_IDLE_STATE;
    9f5e:	81 e0       	ldi	r24, 0x01	; 1
    9f60:	80 93 d7 04 	sts	0x04D7, r24

					//irCommState = IRCOMM_RX_DEBUG;
					//irCommAdcRxState = 12;
					//break;

					resetDebugVariables();
    9f64:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <resetDebugVariables>
					break;
    9f68:	17 c8       	rjmp	.-4050   	; 0x8f98 <irCommTasks+0x30>
							irCommStartDiffTemp[irCommStartDiffIndexTemp] = irCommTempValue;
							irCommStartDiffIndexTemp++;
							

							if(irCommMaxSensorSignal[i] == irCommTempMax) {
								irCommRxPeakHighToLow = 0;
    9f6a:	10 92 1f 05 	sts	0x051F, r1
    9f6e:	74 cc       	rjmp	.-1816   	; 0x9858 <irCommTasks+0x8f0>
							irCommTempMax = irCommMaxSensorSignal[i];
						}
						irCommTempValue = (irCommTempMax - irCommTempMin);						
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {

							if(irCommStartDiffIndexTemp>1) {
    9f70:	2c 2d       	mov	r18, r12
    9f72:	30 e0       	ldi	r19, 0x00	; 0
    9f74:	c3 94       	inc	r12
    9f76:	5f cc       	rjmp	.-1858   	; 0x9836 <irCommTasks+0x8ce>
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
					irCommTxBitToTransmit[9-i] = irCommTempValue;
					if(irCommTempValue==1) {
						irCommTxCrc++;
    9f78:	4f 5f       	subi	r20, 0xFF	; 255
    9f7a:	91 c8       	rjmp	.-3806   	; 0x909e <irCommTasks+0x136>
    9f7c:	4f 5f       	subi	r20, 0xFF	; 255
    9f7e:	7e c8       	rjmp	.-3844   	; 0x907c <irCommTasks+0x114>
    9f80:	4f 5f       	subi	r20, 0xFF	; 255
    9f82:	6d c8       	rjmp	.-3878   	; 0x905e <irCommTasks+0xf6>
    9f84:	4f 5f       	subi	r20, 0xFF	; 255
    9f86:	5e c8       	rjmp	.-3908   	; 0x9044 <irCommTasks+0xdc>
    9f88:	4f 5f       	subi	r20, 0xFF	; 255
    9f8a:	ad c8       	rjmp	.-3750   	; 0x90e6 <irCommTasks+0x17e>

			case IRCOMM_TX_COMPUTE_TIMINGS:
				//updateBlueLed(255);
				if(irCommTxBitToTransmit[irCommTxBitCount] == 3) {
					//updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START2_DURATION;					
    9f8c:	80 ef       	ldi	r24, 0xF0	; 240
    9f8e:	90 e0       	ldi	r25, 0x00	; 0
    9f90:	90 93 31 05 	sts	0x0531, r25
    9f94:	80 93 30 05 	sts	0x0530, r24
					irCommTxSwitchCount = IRCOMM_BIT_START2_SWITCH_COUNT;
    9f98:	81 e0       	ldi	r24, 0x01	; 1
    9f9a:	80 93 32 05 	sts	0x0532, r24
    9f9e:	f4 ca       	rjmp	.-2584   	; 0x9588 <irCommTasks+0x620>
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
					irCommTxBitToTransmit[9-i] = irCommTempValue;
					if(irCommTempValue==1) {
						irCommTxCrc++;
    9fa0:	4f 5f       	subi	r20, 0xFF	; 255
    9fa2:	90 c8       	rjmp	.-3808   	; 0x90c4 <irCommTasks+0x15c>
    9fa4:	4f 5f       	subi	r20, 0xFF	; 255
    9fa6:	aa c8       	rjmp	.-3756   	; 0x90fc <irCommTasks+0x194>
				if(irCommTxBitCount == 0) {
					//PORTA = irCommTxSensorMask;
					if(irCommTxSensorGroup==0) {
						PORTA = 0xAA;
					} else {
						PORTA = 0x55;
    9fa8:	85 e5       	ldi	r24, 0x55	; 85
    9faa:	82 b9       	out	0x02, r24	; 2
    9fac:	f6 ca       	rjmp	.-2580   	; 0x959a <irCommTasks+0x632>
							

							if(irCommMaxSensorSignal[i] == irCommTempMax) {
								irCommRxPeakHighToLow = 0;
							} else if(irCommMaxSensorSignal[i] == irCommTempMin) {
								irCommRxPeakHighToLow = 1;
    9fae:	50 92 1f 05 	sts	0x051F, r5
    9fb2:	52 cc       	rjmp	.-1884   	; 0x9858 <irCommTasks+0x8f0>
						}
						if(irCommTempMax < irCommMaxSensorSignal[i]) {
							irCommTempMax = irCommMaxSensorSignal[i];
						}	
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
							if((irCommMaxSensorSignal[i]==irCommTempMax) && (irCommRxPeakHighToLow==1)) {
    9fb4:	20 91 1f 05 	lds	r18, 0x051F
    9fb8:	21 30       	cpi	r18, 0x01	; 1
    9fba:	09 f0       	breq	.+2      	; 0x9fbe <irCommTasks+0x1056>
    9fbc:	87 cc       	rjmp	.-1778   	; 0x98cc <irCommTasks+0x964>
    9fbe:	8f cc       	rjmp	.-1762   	; 0x98de <irCommTasks+0x976>

			case IRCOMM_RX_MAX_SENSOR_STATE:
				// check from how many sensors the robot is receiving a possible message
				for(i=0; i<8; i++) {
					if((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
						irCommRxNumReceivingSensors++;
    9fc0:	84 2f       	mov	r24, r20
    9fc2:	8f 5f       	subi	r24, 0xFF	; 255
    9fc4:	80 93 25 05 	sts	0x0525, r24
    9fc8:	39 c9       	rjmp	.-3470   	; 0x923c <irCommTasks+0x2d4>
    9fca:	4f 5f       	subi	r20, 0xFF	; 255
    9fcc:	40 93 25 05 	sts	0x0525, r20
    9fd0:	0b c9       	rjmp	.-3562   	; 0x91e8 <irCommTasks+0x280>
    9fd2:	4f 5f       	subi	r20, 0xFF	; 255
    9fd4:	40 93 25 05 	sts	0x0525, r20
    9fd8:	f9 c8       	rjmp	.-3598   	; 0x91cc <irCommTasks+0x264>
    9fda:	4f 5f       	subi	r20, 0xFF	; 255
    9fdc:	40 93 25 05 	sts	0x0525, r20
    9fe0:	e7 c8       	rjmp	.-3634   	; 0x91b0 <irCommTasks+0x248>
    9fe2:	4f 5f       	subi	r20, 0xFF	; 255
    9fe4:	40 93 25 05 	sts	0x0525, r20
    9fe8:	d5 c8       	rjmp	.-3670   	; 0x9194 <irCommTasks+0x22c>
    9fea:	4f 5f       	subi	r20, 0xFF	; 255
    9fec:	40 93 25 05 	sts	0x0525, r20
    9ff0:	17 c9       	rjmp	.-3538   	; 0x9220 <irCommTasks+0x2b8>
    9ff2:	4f 5f       	subi	r20, 0xFF	; 255
    9ff4:	40 93 25 05 	sts	0x0525, r20
    9ff8:	05 c9       	rjmp	.-3574   	; 0x9204 <irCommTasks+0x29c>
								irCommRxMaxSensor = 0;
							}
							i++;
						}
					} else {	// listen from the same sensor when a start bit is detected
						irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
    9ffa:	20 91 23 05 	lds	r18, 0x0523
    9ffe:	30 91 24 05 	lds	r19, 0x0524
    a002:	e9 01       	movw	r28, r18
    a004:	cc 0f       	add	r28, r28
    a006:	dd 1f       	adc	r29, r29
    a008:	ad 01       	movw	r20, r26
    a00a:	4c 0f       	add	r20, r28
    a00c:	5d 1f       	adc	r21, r29
    a00e:	8e 01       	movw	r16, r28
    a010:	0e 0f       	add	r16, r30
    a012:	1f 1f       	adc	r17, r31
    a014:	fa 01       	movw	r30, r20
    a016:	80 81       	ld	r24, Z
    a018:	91 81       	ldd	r25, Z+1	; 0x01
    a01a:	d8 01       	movw	r26, r16
    a01c:	6d 91       	ld	r22, X+
    a01e:	7c 91       	ld	r23, X
    a020:	11 97       	sbiw	r26, 0x01	; 1
    a022:	86 1b       	sub	r24, r22
    a024:	97 0b       	sbc	r25, r23
    a026:	90 93 22 05 	sts	0x0522, r25
    a02a:	80 93 21 05 	sts	0x0521, r24
    a02e:	2f ca       	rjmp	.-2978   	; 0x948e <irCommTasks+0x526>
				if(irCommSwitchCount >= (IRCOMM_BIT0_SWITCH_COUNT-2)) {
					irCommRxBitReceived[irCommRxBitCount] = 0;
					if(irCommRxBitCount<8) {	// do not consider the crc for byte interpretation
						irCommRxByte = irCommRxByte<<1;	// bit0, only shift
					}
				} else if(irCommSwitchCount >= (IRCOMM_BIT1_SWITCH_COUNT-1)) {
    a030:	43 30       	cpi	r20, 0x03	; 3
    a032:	08 f4       	brcc	.+2      	; 0xa036 <irCommTasks+0x10ce>
    a034:	8b cf       	rjmp	.-234    	; 0x9f4c <irCommTasks+0xfe4>
					irCommRxBitReceived[irCommRxBitCount] = 1;
    a036:	80 91 14 05 	lds	r24, 0x0514
    a03a:	e8 2f       	mov	r30, r24
    a03c:	f0 e0       	ldi	r31, 0x00	; 0
    a03e:	ee 59       	subi	r30, 0x9E	; 158
    a040:	fa 4f       	sbci	r31, 0xFA	; 250
    a042:	91 e0       	ldi	r25, 0x01	; 1
    a044:	90 83       	st	Z, r25
					if(irCommRxBitCount<8) {	// do not consider the crc for byte interpretation
    a046:	88 30       	cpi	r24, 0x08	; 8
    a048:	08 f0       	brcs	.+2      	; 0xa04c <irCommTasks+0x10e4>
    a04a:	55 cf       	rjmp	.-342    	; 0x9ef6 <irCommTasks+0xf8e>
						irCommRxCrc++;
    a04c:	90 91 05 05 	lds	r25, 0x0505
    a050:	9f 5f       	subi	r25, 0xFF	; 255
    a052:	90 93 05 05 	sts	0x0505, r25
						irCommRxByte = irCommRxByte<<1;	// bit1, shift and add 1
    a056:	90 91 16 05 	lds	r25, 0x0516
    a05a:	99 0f       	add	r25, r25
						irCommRxByte += 1;
    a05c:	9f 5f       	subi	r25, 0xFF	; 255
    a05e:	90 93 16 05 	sts	0x0516, r25
    a062:	49 cf       	rjmp	.-366    	; 0x9ef6 <irCommTasks+0xf8e>
					resetDebugVariables();
					break;

				}

				if(irCommRxBitReceivedIndexTemp>9) {
    a064:	9a e0       	ldi	r25, 0x0A	; 10
    a066:	a9 e0       	ldi	r26, 0x09	; 9
    a068:	b0 e0       	ldi	r27, 0x00	; 0
    a06a:	4d cf       	rjmp	.-358    	; 0x9f06 <irCommTasks+0xf9e>
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 2) {
					//updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START1_DURATION;					
					irCommTxSwitchCount = IRCOMM_BIT_START1_SWITCH_COUNT;
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 1) {
					irCommTxDuration = IRCOMM_BIT1_DURATOIN;					
    a06c:	8c e3       	ldi	r24, 0x3C	; 60
    a06e:	90 e0       	ldi	r25, 0x00	; 0
    a070:	90 93 31 05 	sts	0x0531, r25
    a074:	80 93 30 05 	sts	0x0530, r24
					irCommTxSwitchCount = IRCOMM_BIT1_SWITCH_COUNT;
    a078:	84 e0       	ldi	r24, 0x04	; 4
    a07a:	80 93 32 05 	sts	0x0532, r24
    a07e:	84 ca       	rjmp	.-2808   	; 0x9588 <irCommTasks+0x620>
					//if(irCommRxStartBitDetected == 1) {	// signal becomes too low to be reliable...or something else happened				
					//	irCommState = IRCOMM_RX_DEBUG;
					//	irCommAdcRxState = 12;
					//	updateGreenLed(0);
					//} else {
						irCommRxStartBitDetected = 0;
    a080:	10 92 1e 05 	sts	0x051E, r1
						currentProx = 0;
    a084:	10 92 34 02 	sts	0x0234, r1
						adcSaveDataTo = SKIP_SAMPLE;
    a088:	85 e0       	ldi	r24, 0x05	; 5
    a08a:	80 93 c9 02 	sts	0x02C9, r24
						adcSamplingState = 0;
    a08e:	10 92 ca 02 	sts	0x02CA, r1
						irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    a092:	10 92 d6 04 	sts	0x04D6, r1
						irCommState = IRCOMM_RX_IDLE_STATE;
    a096:	81 e0       	ldi	r24, 0x01	; 1
    a098:	80 93 d7 04 	sts	0x04D7, r24
						resetDebugVariables();
    a09c:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <resetDebugVariables>
					//}			
					// start listening from the next sensor the next time I check for a start bit in order to get the same chance 
					// to all sensors, instead of always listening from the sensor that has the best signal
					if(irCommRxMaxSensor < 7) {
    a0a0:	20 91 23 05 	lds	r18, 0x0523
    a0a4:	30 91 24 05 	lds	r19, 0x0524
    a0a8:	27 30       	cpi	r18, 0x07	; 7
    a0aa:	31 05       	cpc	r19, r1
    a0ac:	0c f0       	brlt	.+2      	; 0xa0b0 <irCommTasks+0x1148>
    a0ae:	20 c1       	rjmp	.+576    	; 0xa2f0 <irCommTasks+0x1388>
						irCommRxMaxSensor++;
    a0b0:	2f 5f       	subi	r18, 0xFF	; 255
    a0b2:	3f 4f       	sbci	r19, 0xFF	; 255
    a0b4:	30 93 24 05 	sts	0x0524, r19
    a0b8:	20 93 23 05 	sts	0x0523, r18
    a0bc:	80 91 21 05 	lds	r24, 0x0521
    a0c0:	90 91 22 05 	lds	r25, 0x0522
    a0c4:	b9 01       	movw	r22, r18
    a0c6:	66 0f       	add	r22, r22
    a0c8:	77 1f       	adc	r23, r23
    a0ca:	40 91 4c 05 	lds	r20, 0x054C
    a0ce:	50 91 4d 05 	lds	r21, 0x054D
    a0d2:	46 0f       	add	r20, r22
    a0d4:	57 1f       	adc	r21, r23
    a0d6:	00 91 38 05 	lds	r16, 0x0538
    a0da:	10 91 39 05 	lds	r17, 0x0539
    a0de:	06 0f       	add	r16, r22
    a0e0:	17 1f       	adc	r17, r23
    a0e2:	d5 c9       	rjmp	.-3158   	; 0x948e <irCommTasks+0x526>
				irCommSwitchCountIndexTemp++;
				

				//turnOffGreenLeds();
				if(irCommRxPeakHighToLow==1) {
					if(irCommRxStartBitDetected==1) {
    a0e4:	90 91 1e 05 	lds	r25, 0x051E
    a0e8:	91 30       	cpi	r25, 0x01	; 1
    a0ea:	09 f4       	brne	.+2      	; 0xa0ee <irCommTasks+0x1186>
    a0ec:	67 c1       	rjmp	.+718    	; 0xa3bc <irCommTasks+0x1454>

							resetDebugVariables();				
							break;
						}
					} else {
						if(irCommSwitchCount==2) {
    a0ee:	82 30       	cpi	r24, 0x02	; 2
    a0f0:	09 f4       	brne	.+2      	; 0xa0f4 <irCommTasks+0x118c>
    a0f2:	89 c1       	rjmp	.+786    	; 0xa406 <irCommTasks+0x149e>
								irCommRxBitCount = 0;	
								irCommRxCrc = 0;	
								irCommRxByte = 0;
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
							}
						} else if(irCommSwitchCount==1) {		
    a0f4:	81 30       	cpi	r24, 0x01	; 1
    a0f6:	09 f4       	brne	.+2      	; 0xa0fa <irCommTasks+0x1192>
    a0f8:	e3 c1       	rjmp	.+966    	; 0xa4c0 <irCommTasks+0x1558>
								irCommState = IRCOMM_RX_IDLE_STATE;

								irCommSyncStateIndexTemp++;
							}							
						} else {							
							currentProx = 0;
    a0fa:	10 92 34 02 	sts	0x0234, r1
							adcSaveDataTo = SKIP_SAMPLE;
    a0fe:	85 e0       	ldi	r24, 0x05	; 5
    a100:	80 93 c9 02 	sts	0x02C9, r24
							adcSamplingState = 0;
    a104:	10 92 ca 02 	sts	0x02CA, r1
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;							
    a108:	10 92 d6 04 	sts	0x04D6, r1
							irCommState = IRCOMM_RX_IDLE_STATE;	
    a10c:	c0 92 d7 04 	sts	0x04D7, r12

							if(irCommSyncStateIndexTemp>1) {
    a110:	80 91 ff 04 	lds	r24, 0x04FF
    a114:	82 30       	cpi	r24, 0x02	; 2
    a116:	08 f0       	brcs	.+2      	; 0xa11a <irCommTasks+0x11b2>
    a118:	81 e0       	ldi	r24, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 11;
    a11a:	e8 2f       	mov	r30, r24
    a11c:	f0 e0       	ldi	r31, 0x00	; 0
    a11e:	e4 59       	subi	r30, 0x94	; 148
    a120:	fa 4f       	sbci	r31, 0xFA	; 250
    a122:	9b e0       	ldi	r25, 0x0B	; 11
    a124:	90 83       	st	Z, r25
							irCommSyncStateIndexTemp++;
    a126:	8f 5f       	subi	r24, 0xFF	; 255
    a128:	80 93 ff 04 	sts	0x04FF, r24
							//irCommState = IRCOMM_RX_DEBUG;
							//irCommAdcRxState = 12;
							//updateRedLed(0);
							//break;

							resetDebugVariables();				
    a12c:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <resetDebugVariables>
							break;
    a130:	0c 94 cc 47 	jmp	0x8f98	; 0x8f98 <irCommTasks+0x30>
							irCommSwitchCount++;
						}
					}
				}

				if(irCommSwitchCountIndexTemp>1) {
    a134:	e8 2f       	mov	r30, r24
    a136:	f0 e0       	ldi	r31, 0x00	; 0
    a138:	98 2f       	mov	r25, r24
    a13a:	9f 5f       	subi	r25, 0xFF	; 255
    a13c:	19 ce       	rjmp	.-974    	; 0x9d70 <irCommTasks+0xe08>
					//updateBlueLed(0);
				}
				irCommRxMaxDiffTemp[irCommRxMaxDiffIndexTemp] = irCommRxMaxDiff;
				irCommRxMaxDiffIndexTemp++;
				
				if(irCommMaxSensorValueCurrIndexTemp>1) {
    a13e:	e6 2f       	mov	r30, r22
    a140:	f0 e0       	ldi	r31, 0x00	; 0
    a142:	6f 5f       	subi	r22, 0xFF	; 255
    a144:	cf c9       	rjmp	.-3170   	; 0x94e4 <irCommTasks+0x57c>
					//updateBlueLed(0);
				}
				irCommRxMaxSensorTemp[irCommRxMaxSensorIndexTemp] = irCommRxMaxSensor;
				irCommRxMaxSensorIndexTemp++;
					
				if(irCommRxMaxDiffIndexTemp>1) {
    a146:	e6 2f       	mov	r30, r22
    a148:	f0 e0       	ldi	r31, 0x00	; 0
    a14a:	6f 5f       	subi	r22, 0xFF	; 255
    a14c:	b8 c9       	rjmp	.-3216   	; 0x94be <irCommTasks+0x556>
					}
				}
				//turnOffGreenLeds();
				//setGreenLed(irCommRxMaxSensor, 1);			

				if(irCommRxMaxSensorIndexTemp>1) {
    a14e:	e6 2f       	mov	r30, r22
    a150:	f0 e0       	ldi	r31, 0x00	; 0
    a152:	6f 5f       	subi	r22, 0xFF	; 255
    a154:	a4 c9       	rjmp	.-3256   	; 0x949e <irCommTasks+0x536>
					//updateBlueLed(0);
				}
				irCommMaxSensorValueCurrTemp[irCommMaxSensorValueCurrIndexTemp] = irCommMaxSensorValueCurr[irCommRxMaxSensor];
				irCommMaxSensorValueCurrIndexTemp++;
				
				if(irCommMinSensorValueCurrIndexTemp>1) {
    a156:	e4 2f       	mov	r30, r20
    a158:	f0 e0       	ldi	r31, 0x00	; 0
    a15a:	64 2f       	mov	r22, r20
    a15c:	6f 5f       	subi	r22, 0xFF	; 255
    a15e:	d8 c9       	rjmp	.-3152   	; 0x9510 <irCommTasks+0x5a8>
						
				// start counting number of switch around mean signal
				if(irCommMaxSensorSignal[0] > 0) {
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
    a160:	8f ef       	ldi	r24, 0xFF	; 255
    a162:	80 93 12 05 	sts	0x0512, r24
    a166:	2f ef       	ldi	r18, 0xFF	; 255
    a168:	38 2f       	mov	r19, r24
    a16a:	de cd       	rjmp	.-1092   	; 0x9d28 <irCommTasks+0xdc0>
				//if(irCommComputeShift != 0) {	// it should not be never 1 because the difference between min and max in the current signal
					//updateRedLed(0);			// is at least IRCOMM_DETECTION_AMPLITUDE_THR (checked in the previous state)
				//}
				irCommProxMean = (int)(irCommProxSum / IRCOMM_SAMPLING_WINDOW);

				if(irCommProxMeanIndexTemp>1) {
    a16c:	e2 2f       	mov	r30, r18
    a16e:	f0 e0       	ldi	r31, 0x00	; 0
    a170:	2f 5f       	subi	r18, 0xFF	; 255
    a172:	a3 cd       	rjmp	.-1210   	; 0x9cba <irCommTasks+0xd52>
					//updateRedLed(0);
				}
				irCommRxPeakHighToLowTemp[irCommRxPeakHighToLowIndexTemp] = irCommRxPeakHighToLow;
				irCommRxPeakHighToLowIndexTemp++;
				
				if(irCommRxStartPeakDurationIndexTemp>1) {
    a174:	e2 2f       	mov	r30, r18
    a176:	f0 e0       	ldi	r31, 0x00	; 0
    a178:	2f 5f       	subi	r18, 0xFF	; 255
    a17a:	85 cd       	rjmp	.-1270   	; 0x9c86 <irCommTasks+0xd1e>
					//updateRedLed(0);
				}
				irCommShiftCountTemp[irCommShiftCountIndexTemp] = irCommShiftCount;
				irCommShiftCountIndexTemp++;
				
				if(irCommRxPeakHighToLowIndexTemp>1) {
    a17c:	e2 2f       	mov	r30, r18
    a17e:	f0 e0       	ldi	r31, 0x00	; 0
    a180:	2f 5f       	subi	r18, 0xFF	; 255
    a182:	71 cd       	rjmp	.-1310   	; 0x9c66 <irCommTasks+0xcfe>
					//updateRedLed(0);
				}
				irCommComputeShiftTemp[irCommComputeShiftIndexTemp] = irCommComputeShift;
				irCommComputeShiftIndexTemp++;
				
				if(irCommShiftCountIndexTemp>1) {
    a184:	e2 2f       	mov	r30, r18
    a186:	f0 e0       	ldi	r31, 0x00	; 0
    a188:	2f 5f       	subi	r18, 0xFF	; 255
    a18a:	60 cd       	rjmp	.-1344   	; 0x9c4c <irCommTasks+0xce4>
						}											
					 }

				}

				if(irCommComputeShiftIndexTemp>1) {
    a18c:	e2 2f       	mov	r30, r18
    a18e:	f0 e0       	ldi	r31, 0x00	; 0
    a190:	2f 5f       	subi	r18, 0xFF	; 255
    a192:	4f cd       	rjmp	.-1378   	; 0x9c32 <irCommTasks+0xcca>
						
				// start counting number of switch around mean signal
				if(irCommMaxSensorSignal[0] > 0) {
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
    a194:	8f ef       	ldi	r24, 0xFF	; 255
    a196:	80 93 12 05 	sts	0x0512, r24
    a19a:	2f ef       	ldi	r18, 0xFF	; 255
    a19c:	38 2f       	mov	r19, r24
    a19e:	7e ce       	rjmp	.-772    	; 0x9e9c <irCommTasks+0xf34>
							break;
						}
					}
				} else {
					if(irCommRxStartBitDetected==1) {
						if(irCommSwitchCount==2) {
    a1a0:	82 30       	cpi	r24, 0x02	; 2
    a1a2:	09 f4       	brne	.+2      	; 0xa1a6 <irCommTasks+0x123e>
    a1a4:	51 c1       	rjmp	.+674    	; 0xa448 <irCommTasks+0x14e0>
							irCommShiftCounter = 0;
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else if(irCommSwitchCount==1) {
    a1a6:	81 30       	cpi	r24, 0x01	; 1
    a1a8:	09 f4       	brne	.+2      	; 0xa1ac <irCommTasks+0x1244>
    a1aa:	b1 c1       	rjmp	.+866    	; 0xa50e <irCommTasks+0x15a6>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_WAITING_BIT;
						} else {
							irCommRxStartBitDetected = 0;
    a1ac:	10 92 1e 05 	sts	0x051E, r1
							currentProx = 0;
    a1b0:	10 92 34 02 	sts	0x0234, r1
							adcSaveDataTo = SKIP_SAMPLE;
    a1b4:	85 e0       	ldi	r24, 0x05	; 5
    a1b6:	80 93 c9 02 	sts	0x02C9, r24
							adcSamplingState = 0;
    a1ba:	10 92 ca 02 	sts	0x02CA, r1
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    a1be:	10 92 d6 04 	sts	0x04D6, r1
							irCommState = IRCOMM_RX_IDLE_STATE;	
    a1c2:	90 93 d7 04 	sts	0x04D7, r25

							if(irCommSyncStateIndexTemp>1) {
    a1c6:	80 91 ff 04 	lds	r24, 0x04FF
    a1ca:	82 30       	cpi	r24, 0x02	; 2
    a1cc:	08 f0       	brcs	.+2      	; 0xa1d0 <irCommTasks+0x1268>
    a1ce:	81 e0       	ldi	r24, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 13;
    a1d0:	e8 2f       	mov	r30, r24
    a1d2:	f0 e0       	ldi	r31, 0x00	; 0
    a1d4:	e4 59       	subi	r30, 0x94	; 148
    a1d6:	fa 4f       	sbci	r31, 0xFA	; 250
    a1d8:	9d e0       	ldi	r25, 0x0D	; 13
    a1da:	90 83       	st	Z, r25
							irCommSyncStateIndexTemp++;
    a1dc:	8f 5f       	subi	r24, 0xFF	; 255
    a1de:	80 93 ff 04 	sts	0x04FF, r24
							//irCommState = IRCOMM_RX_DEBUG;
							//irCommAdcRxState = 12;
							//updateRedLed(0);
							//break;

							resetDebugVariables();				
    a1e2:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <resetDebugVariables>
							break;
    a1e6:	0c 94 cc 47 	jmp	0x8f98	; 0x8f98 <irCommTasks+0x30>

				//setGreenLed(irCommRxBitCount, 1);

				irCommRxBitCount++;
				if(irCommRxBitCount == 10) {	// received 8 bit of data + 2 bit of crc
					irCommState = IRCOMM_RX_CHECK_CRC;
    a1ea:	87 e0       	ldi	r24, 0x07	; 7
    a1ec:	80 93 d7 04 	sts	0x04D7, r24

					if(irCommStateIndexTemp>13) {
    a1f0:	80 91 fe 04 	lds	r24, 0x04FE
    a1f4:	8e 30       	cpi	r24, 0x0E	; 14
    a1f6:	08 f0       	brcs	.+2      	; 0xa1fa <irCommTasks+0x1292>
    a1f8:	a3 c9       	rjmp	.-3258   	; 0x9540 <irCommTasks+0x5d8>
    a1fa:	9d ce       	rjmp	.-710    	; 0x9f36 <irCommTasks+0xfce>
					}
				} else {
					// cannot get a reliable signal from the sensor from which the start bit was detected the previous time,
					// thus restart listening from the next sensor
					if(irCommRxStartBitDetected == 1) {
						if(irCommRxMaxSensor < 7) {
    a1fc:	27 30       	cpi	r18, 0x07	; 7
    a1fe:	31 05       	cpc	r19, r1
    a200:	0c f0       	brlt	.+2      	; 0xa204 <irCommTasks+0x129c>
    a202:	d3 c0       	rjmp	.+422    	; 0xa3aa <irCommTasks+0x1442>
							irCommRxMaxSensor++;
    a204:	2f 5f       	subi	r18, 0xFF	; 255
    a206:	3f 4f       	sbci	r19, 0xFF	; 255
    a208:	30 93 24 05 	sts	0x0524, r19
    a20c:	20 93 23 05 	sts	0x0523, r18
    a210:	9b ce       	rjmp	.-714    	; 0x9f48 <irCommTasks+0xfe0>
					if(irCommRxStartBitDetected==0) {
						// start listening from the next sensor
						if(irCommRxMaxSensor < 7) {
							irCommRxMaxSensor++;
						} else {
							irCommRxMaxSensor = 0;
    a212:	10 92 24 05 	sts	0x0524, r1
    a216:	10 92 23 05 	sts	0x0523, r1
    a21a:	20 e0       	ldi	r18, 0x00	; 0
    a21c:	30 e0       	ldi	r19, 0x00	; 0
    a21e:	24 c8       	rjmp	.-4024   	; 0x9268 <irCommTasks+0x300>
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
								irCommRxMaxSensor++;
    a220:	2f 5f       	subi	r18, 0xFF	; 255
    a222:	3f 4f       	sbci	r19, 0xFF	; 255
    a224:	30 93 24 05 	sts	0x0524, r19
    a228:	20 93 23 05 	sts	0x0523, r18
    a22c:	3e c8       	rjmp	.-3972   	; 0x92aa <irCommTasks+0x342>
    a22e:	2f 5f       	subi	r18, 0xFF	; 255
    a230:	3f 4f       	sbci	r19, 0xFF	; 255
    a232:	30 93 24 05 	sts	0x0524, r19
    a236:	20 93 23 05 	sts	0x0523, r18
    a23a:	79 c8       	rjmp	.-3854   	; 0x932e <irCommTasks+0x3c6>
    a23c:	2f 5f       	subi	r18, 0xFF	; 255
    a23e:	3f 4f       	sbci	r19, 0xFF	; 255
    a240:	30 93 24 05 	sts	0x0524, r19
    a244:	20 93 23 05 	sts	0x0523, r18
    a248:	51 c8       	rjmp	.-3934   	; 0x92ec <irCommTasks+0x384>
							resetDebugVariables();				
							break;
						}
					} else {
						if(irCommSwitchCount==2) {
							if(irCommSyncStateIndexTemp>1) {
    a24a:	20 91 ff 04 	lds	r18, 0x04FF
    a24e:	22 30       	cpi	r18, 0x02	; 2
    a250:	08 f4       	brcc	.+2      	; 0xa254 <irCommTasks+0x12ec>
    a252:	32 c1       	rjmp	.+612    	; 0xa4b8 <irCommTasks+0x1550>
    a254:	22 e0       	ldi	r18, 0x02	; 2
    a256:	81 e0       	ldi	r24, 0x01	; 1
    a258:	90 e0       	ldi	r25, 0x00	; 0
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 1;
    a25a:	84 59       	subi	r24, 0x94	; 148
    a25c:	9a 4f       	sbci	r25, 0xFA	; 250
    a25e:	31 e0       	ldi	r19, 0x01	; 1
    a260:	dc 01       	movw	r26, r24
    a262:	3c 93       	st	X, r19
							irCommSyncStateIndexTemp++;
    a264:	20 93 ff 04 	sts	0x04FF, r18

							irCommShiftCount = IRCOMM_SAMPLING_WINDOW/2 + irCommShiftCount;
    a268:	8f 2d       	mov	r24, r15
    a26a:	86 5f       	subi	r24, 0xF6	; 246
    a26c:	80 93 0e 05 	sts	0x050E, r24
							irCommRxPeakHighToLow = 0;
    a270:	10 92 1f 05 	sts	0x051F, r1
							irCommRxStartBitDetected = 0;
    a274:	10 92 1e 05 	sts	0x051E, r1
							irCommSecondBitSkipped = 0;
    a278:	10 92 17 05 	sts	0x0517, r1
							irCommShiftCounter = 0;
    a27c:	10 92 18 05 	sts	0x0518, r1
							irCommRxBitCount = 0;	
    a280:	10 92 14 05 	sts	0x0514, r1
							irCommRxCrc = 0;	
    a284:	10 92 05 05 	sts	0x0505, r1
							irCommRxByte = 0;
    a288:	10 92 16 05 	sts	0x0516, r1
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
    a28c:	94 e0       	ldi	r25, 0x04	; 4
    a28e:	90 93 d7 04 	sts	0x04D7, r25
    a292:	90 e0       	ldi	r25, 0x00	; 0
							break;				
						}
					}
				}
	
				if(irCommStateIndexTemp>13) {
    a294:	20 91 fe 04 	lds	r18, 0x04FE
    a298:	2e 30       	cpi	r18, 0x0E	; 14
    a29a:	30 f5       	brcc	.+76     	; 0xa2e8 <irCommTasks+0x1380>
    a29c:	e2 2f       	mov	r30, r18
    a29e:	f0 e0       	ldi	r31, 0x00	; 0
    a2a0:	2f 5f       	subi	r18, 0xFF	; 255
					irCommStateIndexTemp = 13;
					//updateRedLed(0);
				}
				irCommStateTemp[irCommStateIndexTemp] = irCommState;
    a2a2:	30 91 d7 04 	lds	r19, 0x04D7
    a2a6:	e2 5c       	subi	r30, 0xC2	; 194
    a2a8:	fa 4f       	sbci	r31, 0xFA	; 250
    a2aa:	30 83       	st	Z, r19
				irCommStateIndexTemp++;
    a2ac:	20 93 fe 04 	sts	0x04FE, r18
				
				if(irCommShiftCountFinalIndexTemp>1) {
    a2b0:	20 91 f8 04 	lds	r18, 0x04F8
    a2b4:	22 30       	cpi	r18, 0x02	; 2
    a2b6:	08 f4       	brcc	.+2      	; 0xa2ba <irCommTasks+0x1352>
    a2b8:	53 c0       	rjmp	.+166    	; 0xa360 <irCommTasks+0x13f8>
    a2ba:	22 e0       	ldi	r18, 0x02	; 2
    a2bc:	e1 e0       	ldi	r30, 0x01	; 1
    a2be:	f0 e0       	ldi	r31, 0x00	; 0
					irCommShiftCountFinalIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommShiftCountFinalTemp[irCommShiftCountFinalIndexTemp] = irCommShiftCount;
    a2c0:	e9 5c       	subi	r30, 0xC9	; 201
    a2c2:	f4 4f       	sbci	r31, 0xF4	; 244
    a2c4:	80 83       	st	Z, r24
				irCommShiftCountFinalIndexTemp++;
    a2c6:	20 93 f8 04 	sts	0x04F8, r18
				
				if(irCommRxStartBitDetectedIndexTemp>1) {
    a2ca:	80 91 fd 04 	lds	r24, 0x04FD
    a2ce:	82 30       	cpi	r24, 0x02	; 2
    a2d0:	08 f4       	brcc	.+2      	; 0xa2d4 <irCommTasks+0x136c>
    a2d2:	70 c0       	rjmp	.+224    	; 0xa3b4 <irCommTasks+0x144c>
    a2d4:	82 e0       	ldi	r24, 0x02	; 2
    a2d6:	e1 e0       	ldi	r30, 0x01	; 1
    a2d8:	f0 e0       	ldi	r31, 0x00	; 0
					irCommRxStartBitDetectedIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommRxStartBitDetectedTemp[irCommRxStartBitDetectedIndexTemp] = irCommRxStartBitDetected;
    a2da:	e9 58       	subi	r30, 0x89	; 137
    a2dc:	fa 4f       	sbci	r31, 0xFA	; 250
    a2de:	90 83       	st	Z, r25
				irCommRxStartBitDetectedIndexTemp++;			
    a2e0:	80 93 fd 04 	sts	0x04FD, r24
					usart0Transmit(irCommState,1);					
				}
				updateBlueLed(255);
				*/

				break;
    a2e4:	0c 94 cc 47 	jmp	0x8f98	; 0x8f98 <irCommTasks+0x30>
							break;				
						}
					}
				}
	
				if(irCommStateIndexTemp>13) {
    a2e8:	2e e0       	ldi	r18, 0x0E	; 14
    a2ea:	ed e0       	ldi	r30, 0x0D	; 13
    a2ec:	f0 e0       	ldi	r31, 0x00	; 0
    a2ee:	d9 cf       	rjmp	.-78     	; 0xa2a2 <irCommTasks+0x133a>
					// start listening from the next sensor the next time I check for a start bit in order to get the same chance 
					// to all sensors, instead of always listening from the sensor that has the best signal
					if(irCommRxMaxSensor < 7) {
						irCommRxMaxSensor++;
					} else {
						irCommRxMaxSensor = 0;
    a2f0:	10 92 24 05 	sts	0x0524, r1
    a2f4:	10 92 23 05 	sts	0x0523, r1
    a2f8:	80 91 21 05 	lds	r24, 0x0521
    a2fc:	90 91 22 05 	lds	r25, 0x0522
    a300:	40 91 4c 05 	lds	r20, 0x054C
    a304:	50 91 4d 05 	lds	r21, 0x054D
    a308:	00 91 38 05 	lds	r16, 0x0538
    a30c:	10 91 39 05 	lds	r17, 0x0539
    a310:	20 e0       	ldi	r18, 0x00	; 0
    a312:	30 e0       	ldi	r19, 0x00	; 0
    a314:	bc c8       	rjmp	.-3720   	; 0x948e <irCommTasks+0x526>
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
								irCommRxMaxSensor++;
    a316:	2f 5f       	subi	r18, 0xFF	; 255
    a318:	3f 4f       	sbci	r19, 0xFF	; 255
    a31a:	30 93 24 05 	sts	0x0524, r19
    a31e:	20 93 23 05 	sts	0x0523, r18
    a322:	26 c8       	rjmp	.-4020   	; 0x9370 <irCommTasks+0x408>
    a324:	2f 5f       	subi	r18, 0xFF	; 255
    a326:	3f 4f       	sbci	r19, 0xFF	; 255
    a328:	30 93 24 05 	sts	0x0524, r19
    a32c:	20 93 23 05 	sts	0x0523, r18
    a330:	40 c8       	rjmp	.-3968   	; 0x93b2 <irCommTasks+0x44a>
    a332:	2f 5f       	subi	r18, 0xFF	; 255
    a334:	3f 4f       	sbci	r19, 0xFF	; 255
    a336:	30 93 24 05 	sts	0x0524, r19
    a33a:	20 93 23 05 	sts	0x0523, r18
    a33e:	5a c8       	rjmp	.-3916   	; 0x93f4 <irCommTasks+0x48c>
    a340:	2f 5f       	subi	r18, 0xFF	; 255
    a342:	3f 4f       	sbci	r19, 0xFF	; 255
    a344:	30 93 24 05 	sts	0x0524, r19
    a348:	20 93 23 05 	sts	0x0523, r18
    a34c:	74 c8       	rjmp	.-3864   	; 0x9436 <irCommTasks+0x4ce>
							} else {
								irCommRxMaxSensor = 0;
    a34e:	10 92 24 05 	sts	0x0524, r1
    a352:	10 92 23 05 	sts	0x0523, r1
    a356:	20 91 23 05 	lds	r18, 0x0523
    a35a:	30 91 24 05 	lds	r19, 0x0524
    a35e:	8a c8       	rjmp	.-3820   	; 0x9474 <irCommTasks+0x50c>
					//updateRedLed(0);
				}
				irCommStateTemp[irCommStateIndexTemp] = irCommState;
				irCommStateIndexTemp++;
				
				if(irCommShiftCountFinalIndexTemp>1) {
    a360:	e2 2f       	mov	r30, r18
    a362:	f0 e0       	ldi	r31, 0x00	; 0
    a364:	2f 5f       	subi	r18, 0xFF	; 255
    a366:	ac cf       	rjmp	.-168    	; 0xa2c0 <irCommTasks+0x1358>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else if(irCommSwitchCount==1) {
							if(irCommRxStartPeakDuration > IRCOMM_SAMPLING_WINDOW/2) {
    a368:	bd 2d       	mov	r27, r13
    a36a:	bb 30       	cpi	r27, 0x0B	; 11
    a36c:	08 f4       	brcc	.+2      	; 0xa370 <irCommTasks+0x1408>
    a36e:	7b c0       	rjmp	.+246    	; 0xa466 <irCommTasks+0x14fe>
								currentProx = 0;
    a370:	10 92 34 02 	sts	0x0234, r1
								adcSaveDataTo = SKIP_SAMPLE;
    a374:	95 e0       	ldi	r25, 0x05	; 5
    a376:	90 93 c9 02 	sts	0x02C9, r25
								adcSamplingState = 0;
    a37a:	10 92 ca 02 	sts	0x02CA, r1
								irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;								
    a37e:	10 92 d6 04 	sts	0x04D6, r1
								irCommState = IRCOMM_RX_IDLE_STATE;
    a382:	80 93 d7 04 	sts	0x04D7, r24

								if(irCommSyncStateIndexTemp>1) {
    a386:	80 91 ff 04 	lds	r24, 0x04FF
    a38a:	82 30       	cpi	r24, 0x02	; 2
    a38c:	08 f0       	brcs	.+2      	; 0xa390 <irCommTasks+0x1428>
    a38e:	81 e0       	ldi	r24, 0x01	; 1
									irCommSyncStateIndexTemp = 1;
									//updateRedLed(0);
								}
								irCommSyncStateTemp[irCommSyncStateIndexTemp] = 14;
    a390:	e8 2f       	mov	r30, r24
    a392:	f0 e0       	ldi	r31, 0x00	; 0
    a394:	e4 59       	subi	r30, 0x94	; 148
    a396:	fa 4f       	sbci	r31, 0xFA	; 250
    a398:	9e e0       	ldi	r25, 0x0E	; 14
    a39a:	90 83       	st	Z, r25
								irCommSyncStateIndexTemp++;
    a39c:	8f 5f       	subi	r24, 0xFF	; 255
    a39e:	80 93 ff 04 	sts	0x04FF, r24
								//irCommState = IRCOMM_RX_DEBUG;
								//irCommAdcRxState = 12;
								//updateRedLed(0);
								//break;

								resetDebugVariables();				
    a3a2:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <resetDebugVariables>
								break;
    a3a6:	0c 94 cc 47 	jmp	0x8f98	; 0x8f98 <irCommTasks+0x30>
					// thus restart listening from the next sensor
					if(irCommRxStartBitDetected == 1) {
						if(irCommRxMaxSensor < 7) {
							irCommRxMaxSensor++;
						} else {
							irCommRxMaxSensor = 0;
    a3aa:	10 92 24 05 	sts	0x0524, r1
    a3ae:	10 92 23 05 	sts	0x0523, r1
    a3b2:	ca cd       	rjmp	.-1132   	; 0x9f48 <irCommTasks+0xfe0>
					//updateRedLed(0);
				}
				irCommShiftCountFinalTemp[irCommShiftCountFinalIndexTemp] = irCommShiftCount;
				irCommShiftCountFinalIndexTemp++;
				
				if(irCommRxStartBitDetectedIndexTemp>1) {
    a3b4:	e8 2f       	mov	r30, r24
    a3b6:	f0 e0       	ldi	r31, 0x00	; 0
    a3b8:	8f 5f       	subi	r24, 0xFF	; 255
    a3ba:	8f cf       	rjmp	.-226    	; 0xa2da <irCommTasks+0x1372>
				

				//turnOffGreenLeds();
				if(irCommRxPeakHighToLow==1) {
					if(irCommRxStartBitDetected==1) {
						if(irCommSwitchCount==2) {
    a3bc:	82 30       	cpi	r24, 0x02	; 2
    a3be:	09 f4       	brne	.+2      	; 0xa3c2 <irCommTasks+0x145a>
    a3c0:	10 c1       	rjmp	.+544    	; 0xa5e2 <irCommTasks+0x167a>
							irCommShiftCounter = 0;
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_WAITING_BIT;
						} else if(irCommSwitchCount==1) {
    a3c2:	81 30       	cpi	r24, 0x01	; 1
    a3c4:	09 f4       	brne	.+2      	; 0xa3c8 <irCommTasks+0x1460>
    a3c6:	eb c0       	rjmp	.+470    	; 0xa59e <irCommTasks+0x1636>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else {
							irCommRxStartBitDetected = 0;
    a3c8:	10 92 1e 05 	sts	0x051E, r1
							currentProx = 0;
    a3cc:	10 92 34 02 	sts	0x0234, r1
							adcSaveDataTo = SKIP_SAMPLE;
    a3d0:	85 e0       	ldi	r24, 0x05	; 5
    a3d2:	80 93 c9 02 	sts	0x02C9, r24
							adcSamplingState = 0;
    a3d6:	10 92 ca 02 	sts	0x02CA, r1
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    a3da:	10 92 d6 04 	sts	0x04D6, r1
							irCommState = IRCOMM_RX_IDLE_STATE;	
    a3de:	c0 92 d7 04 	sts	0x04D7, r12

							if(irCommSyncStateIndexTemp>1) {
    a3e2:	80 91 ff 04 	lds	r24, 0x04FF
    a3e6:	82 30       	cpi	r24, 0x02	; 2
    a3e8:	08 f0       	brcs	.+2      	; 0xa3ec <irCommTasks+0x1484>
    a3ea:	81 e0       	ldi	r24, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 12;
    a3ec:	e8 2f       	mov	r30, r24
    a3ee:	f0 e0       	ldi	r31, 0x00	; 0
    a3f0:	e4 59       	subi	r30, 0x94	; 148
    a3f2:	fa 4f       	sbci	r31, 0xFA	; 250
    a3f4:	9c e0       	ldi	r25, 0x0C	; 12
    a3f6:	90 83       	st	Z, r25
							irCommSyncStateIndexTemp++;
    a3f8:	8f 5f       	subi	r24, 0xFF	; 255
    a3fa:	80 93 ff 04 	sts	0x04FF, r24
							//irCommState = IRCOMM_RX_DEBUG;
							//irCommAdcRxState = 12;
							//updateRedLed(0);
							//break;

							resetDebugVariables();				
    a3fe:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <resetDebugVariables>
							break;
    a402:	0c 94 cc 47 	jmp	0x8f98	; 0x8f98 <irCommTasks+0x30>
						}
					} else {
						if(irCommSwitchCount==2) {
							if(irCommRxStartPeakDuration<=3) {	// peak due to sensors sampling detected
    a406:	2d 2d       	mov	r18, r13
    a408:	24 30       	cpi	r18, 0x04	; 4
    a40a:	08 f0       	brcs	.+2      	; 0xa40e <irCommTasks+0x14a6>
    a40c:	a4 c0       	rjmp	.+328    	; 0xa556 <irCommTasks+0x15ee>
								currentProx = 0;
    a40e:	10 92 34 02 	sts	0x0234, r1
								adcSaveDataTo = SKIP_SAMPLE;
    a412:	85 e0       	ldi	r24, 0x05	; 5
    a414:	80 93 c9 02 	sts	0x02C9, r24
								adcSamplingState = 0;
    a418:	10 92 ca 02 	sts	0x02CA, r1
								irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;							
    a41c:	10 92 d6 04 	sts	0x04D6, r1
								irCommState = IRCOMM_RX_IDLE_STATE;
    a420:	c0 92 d7 04 	sts	0x04D7, r12

								if(irCommSyncStateIndexTemp>1) {
    a424:	80 91 ff 04 	lds	r24, 0x04FF
    a428:	82 30       	cpi	r24, 0x02	; 2
    a42a:	08 f0       	brcs	.+2      	; 0xa42e <irCommTasks+0x14c6>
    a42c:	81 e0       	ldi	r24, 0x01	; 1
									irCommSyncStateIndexTemp = 1;
									//updateRedLed(0);
								}
								irCommSyncStateTemp[irCommSyncStateIndexTemp] = 16;
    a42e:	e8 2f       	mov	r30, r24
    a430:	f0 e0       	ldi	r31, 0x00	; 0
    a432:	e4 59       	subi	r30, 0x94	; 148
    a434:	fa 4f       	sbci	r31, 0xFA	; 250
    a436:	90 e1       	ldi	r25, 0x10	; 16
    a438:	90 83       	st	Z, r25
								irCommSyncStateIndexTemp++;
    a43a:	8f 5f       	subi	r24, 0xFF	; 255
    a43c:	80 93 ff 04 	sts	0x04FF, r24
								//irCommState = IRCOMM_RX_DEBUG;
								//irCommAdcRxState = 12;
								//updateGreenLed(0);
								//break;

								resetDebugVariables();
    a440:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <resetDebugVariables>
								break;
    a444:	0c 94 cc 47 	jmp	0x8f98	; 0x8f98 <irCommTasks+0x30>
						}
					}
				} else {
					if(irCommRxStartBitDetected==1) {
						if(irCommSwitchCount==2) {
							if(irCommSyncStateIndexTemp>1) {
    a448:	80 91 ff 04 	lds	r24, 0x04FF
    a44c:	82 30       	cpi	r24, 0x02	; 2
    a44e:	08 f0       	brcs	.+2      	; 0xa452 <irCommTasks+0x14ea>
    a450:	81 e0       	ldi	r24, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 5;
    a452:	e8 2f       	mov	r30, r24
    a454:	f0 e0       	ldi	r31, 0x00	; 0
    a456:	e4 59       	subi	r30, 0x94	; 148
    a458:	fa 4f       	sbci	r31, 0xFA	; 250
    a45a:	95 e0       	ldi	r25, 0x05	; 5
    a45c:	90 83       	st	Z, r25
							irCommSyncStateIndexTemp++;
    a45e:	8f 5f       	subi	r24, 0xFF	; 255
    a460:	80 93 ff 04 	sts	0x04FF, r24
    a464:	01 cf       	rjmp	.-510    	; 0xa268 <irCommTasks+0x1300>
								//break;

								resetDebugVariables();				
								break;
							} else {
								if(irCommSyncStateIndexTemp>1) {
    a466:	80 91 ff 04 	lds	r24, 0x04FF
    a46a:	82 30       	cpi	r24, 0x02	; 2
    a46c:	08 f0       	brcs	.+2      	; 0xa470 <irCommTasks+0x1508>
    a46e:	81 e0       	ldi	r24, 0x01	; 1
									irCommSyncStateIndexTemp = 1;
									//updateRedLed(0);
								}
								irCommSyncStateTemp[irCommSyncStateIndexTemp] = 7;
    a470:	e8 2f       	mov	r30, r24
    a472:	f0 e0       	ldi	r31, 0x00	; 0
    a474:	e4 59       	subi	r30, 0x94	; 148
    a476:	fa 4f       	sbci	r31, 0xFA	; 250
    a478:	97 e0       	ldi	r25, 0x07	; 7
    a47a:	90 83       	st	Z, r25
								irCommSyncStateIndexTemp++;
    a47c:	8f 5f       	subi	r24, 0xFF	; 255
    a47e:	80 93 ff 04 	sts	0x04FF, r24

								irCommShiftCount = IRCOMM_SAMPLING_WINDOW;
    a482:	84 e1       	ldi	r24, 0x14	; 20
    a484:	80 93 0e 05 	sts	0x050E, r24
								irCommRxPeakHighToLow = 0;
    a488:	10 92 1f 05 	sts	0x051F, r1
								irCommRxStartBitDetected = 0;
    a48c:	10 92 1e 05 	sts	0x051E, r1
								irCommSecondBitSkipped = 0;
    a490:	10 92 17 05 	sts	0x0517, r1
								irCommShiftCounter = 0;
    a494:	10 92 18 05 	sts	0x0518, r1
								irCommRxBitCount = 0;	
    a498:	10 92 14 05 	sts	0x0514, r1
								irCommRxCrc = 0;	
    a49c:	10 92 05 05 	sts	0x0505, r1
								irCommRxByte = 0;
    a4a0:	10 92 16 05 	sts	0x0516, r1
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
    a4a4:	84 e0       	ldi	r24, 0x04	; 4
    a4a6:	80 93 d7 04 	sts	0x04D7, r24
    a4aa:	90 e0       	ldi	r25, 0x00	; 0
    a4ac:	84 e1       	ldi	r24, 0x14	; 20
    a4ae:	f2 ce       	rjmp	.-540    	; 0xa294 <irCommTasks+0x132c>
							adcSaveDataTo = SKIP_SAMPLE;
							adcSamplingState = 0;
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;							
							irCommState = IRCOMM_RX_IDLE_STATE;

							if(irCommSyncStateIndexTemp>1) {
    a4b0:	82 2f       	mov	r24, r18
    a4b2:	90 e0       	ldi	r25, 0x00	; 0
    a4b4:	2f 5f       	subi	r18, 0xFF	; 255
    a4b6:	86 cc       	rjmp	.-1780   	; 0x9dc4 <irCommTasks+0xe5c>
							resetDebugVariables();				
							break;
						}
					} else {
						if(irCommSwitchCount==2) {
							if(irCommSyncStateIndexTemp>1) {
    a4b8:	82 2f       	mov	r24, r18
    a4ba:	90 e0       	ldi	r25, 0x00	; 0
    a4bc:	2f 5f       	subi	r18, 0xFF	; 255
    a4be:	cd ce       	rjmp	.-614    	; 0xa25a <irCommTasks+0x12f2>
								irCommRxCrc = 0;	
								irCommRxByte = 0;
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
							}
						} else if(irCommSwitchCount==1) {		
							irCommRxStartBitDetected = 1;					
    a4c0:	c0 92 1e 05 	sts	0x051E, r12
							if(irCommRxStartPeakDuration > IRCOMM_SAMPLING_WINDOW/2) {
    a4c4:	8d 2d       	mov	r24, r13
    a4c6:	8b 30       	cpi	r24, 0x0B	; 11
    a4c8:	08 f4       	brcc	.+2      	; 0xa4cc <irCommTasks+0x1564>
    a4ca:	56 c0       	rjmp	.+172    	; 0xa578 <irCommTasks+0x1610>
								if(irCommSyncStateIndexTemp>1) {
    a4cc:	80 91 ff 04 	lds	r24, 0x04FF
    a4d0:	82 30       	cpi	r24, 0x02	; 2
    a4d2:	08 f0       	brcs	.+2      	; 0xa4d6 <irCommTasks+0x156e>
    a4d4:	81 e0       	ldi	r24, 0x01	; 1
									irCommSyncStateIndexTemp = 1;
									//updateRedLed(0);
								}
								irCommSyncStateTemp[irCommSyncStateIndexTemp] = 4;
    a4d6:	e8 2f       	mov	r30, r24
    a4d8:	f0 e0       	ldi	r31, 0x00	; 0
    a4da:	e4 59       	subi	r30, 0x94	; 148
    a4dc:	fa 4f       	sbci	r31, 0xFA	; 250
    a4de:	94 e0       	ldi	r25, 0x04	; 4
    a4e0:	90 83       	st	Z, r25
								irCommSyncStateIndexTemp++;
    a4e2:	8f 5f       	subi	r24, 0xFF	; 255
    a4e4:	80 93 ff 04 	sts	0x04FF, r24

								//irCommShiftCount = irCommShiftCount;
								irCommRxPeakHighToLow = 0;
    a4e8:	10 92 1f 05 	sts	0x051F, r1
								irCommRxStartBitDetected = 0;
    a4ec:	10 92 1e 05 	sts	0x051E, r1
								irCommSecondBitSkipped = 0;
    a4f0:	10 92 17 05 	sts	0x0517, r1
								irCommShiftCounter = 0;
    a4f4:	10 92 18 05 	sts	0x0518, r1
								irCommRxBitCount = 0;	
    a4f8:	10 92 14 05 	sts	0x0514, r1
								irCommRxCrc = 0;	
    a4fc:	10 92 05 05 	sts	0x0505, r1
								irCommRxByte = 0;
    a500:	10 92 16 05 	sts	0x0516, r1
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
    a504:	90 93 d7 04 	sts	0x04D7, r25
    a508:	8f 2d       	mov	r24, r15
    a50a:	90 e0       	ldi	r25, 0x00	; 0
    a50c:	c3 ce       	rjmp	.-634    	; 0xa294 <irCommTasks+0x132c>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else if(irCommSwitchCount==1) {
							if(irCommSyncStateIndexTemp>1) {
    a50e:	80 91 ff 04 	lds	r24, 0x04FF
    a512:	82 30       	cpi	r24, 0x02	; 2
    a514:	08 f0       	brcs	.+2      	; 0xa518 <irCommTasks+0x15b0>
    a516:	81 e0       	ldi	r24, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 8;
    a518:	e8 2f       	mov	r30, r24
    a51a:	f0 e0       	ldi	r31, 0x00	; 0
    a51c:	e4 59       	subi	r30, 0x94	; 148
    a51e:	fa 4f       	sbci	r31, 0xFA	; 250
    a520:	98 e0       	ldi	r25, 0x08	; 8
    a522:	90 83       	st	Z, r25
							irCommSyncStateIndexTemp++;
    a524:	8f 5f       	subi	r24, 0xFF	; 255
    a526:	80 93 ff 04 	sts	0x04FF, r24

							irCommShiftCount = 0;
    a52a:	10 92 0e 05 	sts	0x050E, r1
							irCommRxPeakHighToLow = 0;
    a52e:	10 92 1f 05 	sts	0x051F, r1
							irCommRxStartBitDetected = 0;
    a532:	10 92 1e 05 	sts	0x051E, r1
							irCommSecondBitSkipped = 0;
    a536:	10 92 17 05 	sts	0x0517, r1
							irCommShiftCounter = 0;
    a53a:	10 92 18 05 	sts	0x0518, r1
							irCommRxBitCount = 0;	
    a53e:	10 92 14 05 	sts	0x0514, r1
							irCommRxCrc = 0;	
    a542:	10 92 05 05 	sts	0x0505, r1
							irCommRxByte = 0;
    a546:	10 92 16 05 	sts	0x0516, r1
							irCommState = IRCOMM_RX_WAITING_BIT;
    a54a:	85 e0       	ldi	r24, 0x05	; 5
    a54c:	80 93 d7 04 	sts	0x04D7, r24
    a550:	90 e0       	ldi	r25, 0x00	; 0
    a552:	80 e0       	ldi	r24, 0x00	; 0
    a554:	9f ce       	rjmp	.-706    	; 0xa294 <irCommTasks+0x132c>
								//break;

								resetDebugVariables();
								break;
							} else {
								if(irCommSyncStateIndexTemp>1) {
    a556:	80 91 ff 04 	lds	r24, 0x04FF
    a55a:	82 30       	cpi	r24, 0x02	; 2
    a55c:	08 f0       	brcs	.+2      	; 0xa560 <irCommTasks+0x15f8>
    a55e:	81 e0       	ldi	r24, 0x01	; 1
									irCommSyncStateIndexTemp = 1;
									//updateRedLed(0);
								}
								irCommSyncStateTemp[irCommSyncStateIndexTemp] = 3;
    a560:	e8 2f       	mov	r30, r24
    a562:	f0 e0       	ldi	r31, 0x00	; 0
    a564:	e4 59       	subi	r30, 0x94	; 148
    a566:	fa 4f       	sbci	r31, 0xFA	; 250
    a568:	93 e0       	ldi	r25, 0x03	; 3
    a56a:	90 83       	st	Z, r25
								irCommSyncStateIndexTemp++;
    a56c:	8f 5f       	subi	r24, 0xFF	; 255
    a56e:	80 93 ff 04 	sts	0x04FF, r24

								irCommShiftCount = IRCOMM_SAMPLING_WINDOW + irCommShiftCount;
    a572:	8f 2d       	mov	r24, r15
    a574:	8c 5e       	subi	r24, 0xEC	; 236
    a576:	7a ce       	rjmp	.-780    	; 0xa26c <irCommTasks+0x1304>
								irCommRxBitCount = 0;	
								irCommRxCrc = 0;	
								irCommRxByte = 0;
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
							} else {
								currentProx = 0;
    a578:	10 92 34 02 	sts	0x0234, r1
								adcSaveDataTo = SKIP_SAMPLE;
    a57c:	85 e0       	ldi	r24, 0x05	; 5
    a57e:	80 93 c9 02 	sts	0x02C9, r24
								adcSamplingState = 0;
    a582:	10 92 ca 02 	sts	0x02CA, r1
								irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;								
    a586:	10 92 d6 04 	sts	0x04D6, r1
								irCommState = IRCOMM_RX_IDLE_STATE;
    a58a:	c0 92 d7 04 	sts	0x04D7, r12

								irCommSyncStateIndexTemp++;
    a58e:	80 91 ff 04 	lds	r24, 0x04FF
    a592:	8f 5f       	subi	r24, 0xFF	; 255
    a594:	80 93 ff 04 	sts	0x04FF, r24
    a598:	8f 2d       	mov	r24, r15
    a59a:	91 e0       	ldi	r25, 0x01	; 1
    a59c:	7b ce       	rjmp	.-778    	; 0xa294 <irCommTasks+0x132c>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_WAITING_BIT;
						} else if(irCommSwitchCount==1) {
							if(irCommSyncStateIndexTemp>1) {
    a59e:	80 91 ff 04 	lds	r24, 0x04FF
    a5a2:	82 30       	cpi	r24, 0x02	; 2
    a5a4:	08 f0       	brcs	.+2      	; 0xa5a8 <irCommTasks+0x1640>
    a5a6:	81 e0       	ldi	r24, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 2;
    a5a8:	e8 2f       	mov	r30, r24
    a5aa:	f0 e0       	ldi	r31, 0x00	; 0
    a5ac:	e4 59       	subi	r30, 0x94	; 148
    a5ae:	fa 4f       	sbci	r31, 0xFA	; 250
    a5b0:	92 e0       	ldi	r25, 0x02	; 2
    a5b2:	90 83       	st	Z, r25
							irCommSyncStateIndexTemp++;
    a5b4:	8f 5f       	subi	r24, 0xFF	; 255
    a5b6:	80 93 ff 04 	sts	0x04FF, r24

							//irCommShiftCount = irCommShiftCount;
							irCommRxPeakHighToLow = 0;
    a5ba:	10 92 1f 05 	sts	0x051F, r1
							irCommRxStartBitDetected = 0;
    a5be:	10 92 1e 05 	sts	0x051E, r1
							irCommSecondBitSkipped = 0;
    a5c2:	10 92 17 05 	sts	0x0517, r1
							irCommShiftCounter = 0;
    a5c6:	10 92 18 05 	sts	0x0518, r1
							irCommRxBitCount = 0;	
    a5ca:	10 92 14 05 	sts	0x0514, r1
							irCommRxCrc = 0;	
    a5ce:	10 92 05 05 	sts	0x0505, r1
							irCommRxByte = 0;
    a5d2:	10 92 16 05 	sts	0x0516, r1
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
    a5d6:	84 e0       	ldi	r24, 0x04	; 4
    a5d8:	80 93 d7 04 	sts	0x04D7, r24
    a5dc:	8f 2d       	mov	r24, r15
    a5de:	90 e0       	ldi	r25, 0x00	; 0
    a5e0:	59 ce       	rjmp	.-846    	; 0xa294 <irCommTasks+0x132c>

				//turnOffGreenLeds();
				if(irCommRxPeakHighToLow==1) {
					if(irCommRxStartBitDetected==1) {
						if(irCommSwitchCount==2) {
							if(irCommSyncStateIndexTemp>1) {
    a5e2:	80 91 ff 04 	lds	r24, 0x04FF
    a5e6:	82 30       	cpi	r24, 0x02	; 2
    a5e8:	08 f0       	brcs	.+2      	; 0xa5ec <irCommTasks+0x1684>
    a5ea:	81 e0       	ldi	r24, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 6;
    a5ec:	e8 2f       	mov	r30, r24
    a5ee:	f0 e0       	ldi	r31, 0x00	; 0
    a5f0:	e4 59       	subi	r30, 0x94	; 148
    a5f2:	fa 4f       	sbci	r31, 0xFA	; 250
    a5f4:	96 e0       	ldi	r25, 0x06	; 6
    a5f6:	95 cf       	rjmp	.-214    	; 0xa522 <irCommTasks+0x15ba>

0000a5f8 <irCommSendData>:
//	irCommTxSensorMask = sensorMask;
//	irCommEnabledNext = IRCOMM_MODE_TRANSMIT;
//}

void irCommSendData(unsigned char value) {
	irCommTxByte = value;
    a5f8:	80 93 27 05 	sts	0x0527, r24
	irCommTxByteEnqueued = 1;
    a5fc:	81 e0       	ldi	r24, 0x01	; 1
    a5fe:	80 93 28 05 	sts	0x0528, r24
	irCommEnabledNext = IRCOMM_MODE_TRANSMIT;
    a602:	82 e0       	ldi	r24, 0x02	; 2
    a604:	80 93 d5 04 	sts	0x04D5, r24
}
    a608:	08 95       	ret

0000a60a <irCommDataSent>:

unsigned char irCommDataSent() {
	if(irCommTxByteEnqueued==1) {
		return 0;
    a60a:	81 e0       	ldi	r24, 0x01	; 1
    a60c:	90 91 28 05 	lds	r25, 0x0528
    a610:	91 30       	cpi	r25, 0x01	; 1
    a612:	09 f0       	breq	.+2      	; 0xa616 <irCommDataSent+0xc>
	} else {
		return 1;
	}
}
    a614:	08 95       	ret
	irCommEnabledNext = IRCOMM_MODE_TRANSMIT;
}

unsigned char irCommDataSent() {
	if(irCommTxByteEnqueued==1) {
		return 0;
    a616:	80 e0       	ldi	r24, 0x00	; 0
	} else {
		return 1;
	}
}
    a618:	08 95       	ret

0000a61a <irCommDataAvailable>:

unsigned char irCommDataAvailable() {
	return irCommRxDataAvailable;
}
    a61a:	80 91 1c 05 	lds	r24, 0x051C
    a61e:	08 95       	ret

0000a620 <irCommReadData>:

unsigned char irCommReadData() {
	irCommRxDataAvailable = 0;
    a620:	10 92 1c 05 	sts	0x051C, r1
	return irCommRxLastDataReceived;
}
    a624:	80 91 1b 05 	lds	r24, 0x051B
    a628:	08 95       	ret

0000a62a <irCommReceivingSensor>:

signed char irCommReceivingSensor() {
	return irCommRxReceivingSensor;
}
    a62a:	80 91 19 02 	lds	r24, 0x0219
    a62e:	08 95       	ret

0000a630 <getBearing>:

signed int getBearing(unsigned char sensor) {
    a630:	88 30       	cpi	r24, 0x08	; 8
    a632:	50 f4       	brcc	.+20     	; 0xa648 <getBearing+0x18>
    a634:	e8 2f       	mov	r30, r24
    a636:	f0 e0       	ldi	r31, 0x00	; 0
    a638:	ee 0f       	add	r30, r30
    a63a:	ff 1f       	adc	r31, r31
    a63c:	e6 5e       	subi	r30, 0xE6	; 230
    a63e:	fd 4f       	sbci	r31, 0xFD	; 253
    a640:	20 81       	ld	r18, Z
    a642:	31 81       	ldd	r19, Z+1	; 0x01
		case 7:
			return 45;
		default:
			return -1;
	}
}
    a644:	c9 01       	movw	r24, r18
    a646:	08 95       	ret

signed char irCommReceivingSensor() {
	return irCommRxReceivingSensor;
}

signed int getBearing(unsigned char sensor) {
    a648:	2f ef       	ldi	r18, 0xFF	; 255
    a64a:	3f ef       	ldi	r19, 0xFF	; 255
		case 7:
			return 45;
		default:
			return -1;
	}
}
    a64c:	c9 01       	movw	r24, r18
    a64e:	08 95       	ret

0000a650 <__subsf3>:
    a650:	50 58       	subi	r21, 0x80	; 128

0000a652 <__addsf3>:
    a652:	bb 27       	eor	r27, r27
    a654:	aa 27       	eor	r26, r26
    a656:	0e d0       	rcall	.+28     	; 0xa674 <__addsf3x>
    a658:	27 c2       	rjmp	.+1102   	; 0xaaa8 <__fp_round>
    a65a:	f0 d1       	rcall	.+992    	; 0xaa3c <__fp_pscA>
    a65c:	30 f0       	brcs	.+12     	; 0xa66a <__addsf3+0x18>
    a65e:	f5 d1       	rcall	.+1002   	; 0xaa4a <__fp_pscB>
    a660:	20 f0       	brcs	.+8      	; 0xa66a <__addsf3+0x18>
    a662:	31 f4       	brne	.+12     	; 0xa670 <__addsf3+0x1e>
    a664:	9f 3f       	cpi	r25, 0xFF	; 255
    a666:	11 f4       	brne	.+4      	; 0xa66c <__addsf3+0x1a>
    a668:	1e f4       	brtc	.+6      	; 0xa670 <__addsf3+0x1e>
    a66a:	c0 c1       	rjmp	.+896    	; 0xa9ec <__fp_nan>
    a66c:	0e f4       	brtc	.+2      	; 0xa670 <__addsf3+0x1e>
    a66e:	e0 95       	com	r30
    a670:	e7 fb       	bst	r30, 7
    a672:	b6 c1       	rjmp	.+876    	; 0xa9e0 <__fp_inf>

0000a674 <__addsf3x>:
    a674:	e9 2f       	mov	r30, r25
    a676:	3a d2       	rcall	.+1140   	; 0xaaec <__fp_split3>
    a678:	80 f3       	brcs	.-32     	; 0xa65a <__addsf3+0x8>
    a67a:	ba 17       	cp	r27, r26
    a67c:	62 07       	cpc	r22, r18
    a67e:	73 07       	cpc	r23, r19
    a680:	84 07       	cpc	r24, r20
    a682:	95 07       	cpc	r25, r21
    a684:	18 f0       	brcs	.+6      	; 0xa68c <__addsf3x+0x18>
    a686:	71 f4       	brne	.+28     	; 0xa6a4 <__addsf3x+0x30>
    a688:	9e f5       	brtc	.+102    	; 0xa6f0 <__addsf3x+0x7c>
    a68a:	52 c2       	rjmp	.+1188   	; 0xab30 <__fp_zero>
    a68c:	0e f4       	brtc	.+2      	; 0xa690 <__addsf3x+0x1c>
    a68e:	e0 95       	com	r30
    a690:	0b 2e       	mov	r0, r27
    a692:	ba 2f       	mov	r27, r26
    a694:	a0 2d       	mov	r26, r0
    a696:	0b 01       	movw	r0, r22
    a698:	b9 01       	movw	r22, r18
    a69a:	90 01       	movw	r18, r0
    a69c:	0c 01       	movw	r0, r24
    a69e:	ca 01       	movw	r24, r20
    a6a0:	a0 01       	movw	r20, r0
    a6a2:	11 24       	eor	r1, r1
    a6a4:	ff 27       	eor	r31, r31
    a6a6:	59 1b       	sub	r21, r25
    a6a8:	99 f0       	breq	.+38     	; 0xa6d0 <__addsf3x+0x5c>
    a6aa:	59 3f       	cpi	r21, 0xF9	; 249
    a6ac:	50 f4       	brcc	.+20     	; 0xa6c2 <__addsf3x+0x4e>
    a6ae:	50 3e       	cpi	r21, 0xE0	; 224
    a6b0:	68 f1       	brcs	.+90     	; 0xa70c <__addsf3x+0x98>
    a6b2:	1a 16       	cp	r1, r26
    a6b4:	f0 40       	sbci	r31, 0x00	; 0
    a6b6:	a2 2f       	mov	r26, r18
    a6b8:	23 2f       	mov	r18, r19
    a6ba:	34 2f       	mov	r19, r20
    a6bc:	44 27       	eor	r20, r20
    a6be:	58 5f       	subi	r21, 0xF8	; 248
    a6c0:	f3 cf       	rjmp	.-26     	; 0xa6a8 <__addsf3x+0x34>
    a6c2:	46 95       	lsr	r20
    a6c4:	37 95       	ror	r19
    a6c6:	27 95       	ror	r18
    a6c8:	a7 95       	ror	r26
    a6ca:	f0 40       	sbci	r31, 0x00	; 0
    a6cc:	53 95       	inc	r21
    a6ce:	c9 f7       	brne	.-14     	; 0xa6c2 <__addsf3x+0x4e>
    a6d0:	7e f4       	brtc	.+30     	; 0xa6f0 <__addsf3x+0x7c>
    a6d2:	1f 16       	cp	r1, r31
    a6d4:	ba 0b       	sbc	r27, r26
    a6d6:	62 0b       	sbc	r22, r18
    a6d8:	73 0b       	sbc	r23, r19
    a6da:	84 0b       	sbc	r24, r20
    a6dc:	ba f0       	brmi	.+46     	; 0xa70c <__addsf3x+0x98>
    a6de:	91 50       	subi	r25, 0x01	; 1
    a6e0:	a1 f0       	breq	.+40     	; 0xa70a <__addsf3x+0x96>
    a6e2:	ff 0f       	add	r31, r31
    a6e4:	bb 1f       	adc	r27, r27
    a6e6:	66 1f       	adc	r22, r22
    a6e8:	77 1f       	adc	r23, r23
    a6ea:	88 1f       	adc	r24, r24
    a6ec:	c2 f7       	brpl	.-16     	; 0xa6de <__addsf3x+0x6a>
    a6ee:	0e c0       	rjmp	.+28     	; 0xa70c <__addsf3x+0x98>
    a6f0:	ba 0f       	add	r27, r26
    a6f2:	62 1f       	adc	r22, r18
    a6f4:	73 1f       	adc	r23, r19
    a6f6:	84 1f       	adc	r24, r20
    a6f8:	48 f4       	brcc	.+18     	; 0xa70c <__addsf3x+0x98>
    a6fa:	87 95       	ror	r24
    a6fc:	77 95       	ror	r23
    a6fe:	67 95       	ror	r22
    a700:	b7 95       	ror	r27
    a702:	f7 95       	ror	r31
    a704:	9e 3f       	cpi	r25, 0xFE	; 254
    a706:	08 f0       	brcs	.+2      	; 0xa70a <__addsf3x+0x96>
    a708:	b3 cf       	rjmp	.-154    	; 0xa670 <__addsf3+0x1e>
    a70a:	93 95       	inc	r25
    a70c:	88 0f       	add	r24, r24
    a70e:	08 f0       	brcs	.+2      	; 0xa712 <__addsf3x+0x9e>
    a710:	99 27       	eor	r25, r25
    a712:	ee 0f       	add	r30, r30
    a714:	97 95       	ror	r25
    a716:	87 95       	ror	r24
    a718:	08 95       	ret
    a71a:	90 d1       	rcall	.+800    	; 0xaa3c <__fp_pscA>
    a71c:	58 f0       	brcs	.+22     	; 0xa734 <__addsf3x+0xc0>
    a71e:	80 e8       	ldi	r24, 0x80	; 128
    a720:	91 e0       	ldi	r25, 0x01	; 1
    a722:	09 f4       	brne	.+2      	; 0xa726 <__addsf3x+0xb2>
    a724:	9e ef       	ldi	r25, 0xFE	; 254
    a726:	91 d1       	rcall	.+802    	; 0xaa4a <__fp_pscB>
    a728:	28 f0       	brcs	.+10     	; 0xa734 <__addsf3x+0xc0>
    a72a:	40 e8       	ldi	r20, 0x80	; 128
    a72c:	51 e0       	ldi	r21, 0x01	; 1
    a72e:	59 f4       	brne	.+22     	; 0xa746 <atan2+0xe>
    a730:	5e ef       	ldi	r21, 0xFE	; 254
    a732:	09 c0       	rjmp	.+18     	; 0xa746 <atan2+0xe>
    a734:	5b c1       	rjmp	.+694    	; 0xa9ec <__fp_nan>
    a736:	fc c1       	rjmp	.+1016   	; 0xab30 <__fp_zero>

0000a738 <atan2>:
    a738:	e9 2f       	mov	r30, r25
    a73a:	e0 78       	andi	r30, 0x80	; 128
    a73c:	d7 d1       	rcall	.+942    	; 0xaaec <__fp_split3>
    a73e:	68 f3       	brcs	.-38     	; 0xa71a <__addsf3x+0xa6>
    a740:	09 2e       	mov	r0, r25
    a742:	05 2a       	or	r0, r21
    a744:	c1 f3       	breq	.-16     	; 0xa736 <__addsf3x+0xc2>
    a746:	26 17       	cp	r18, r22
    a748:	37 07       	cpc	r19, r23
    a74a:	48 07       	cpc	r20, r24
    a74c:	59 07       	cpc	r21, r25
    a74e:	38 f0       	brcs	.+14     	; 0xa75e <atan2+0x26>
    a750:	0e 2e       	mov	r0, r30
    a752:	07 f8       	bld	r0, 7
    a754:	e0 25       	eor	r30, r0
    a756:	69 f0       	breq	.+26     	; 0xa772 <atan2+0x3a>
    a758:	e0 25       	eor	r30, r0
    a75a:	e0 64       	ori	r30, 0x40	; 64
    a75c:	0a c0       	rjmp	.+20     	; 0xa772 <atan2+0x3a>
    a75e:	ef 63       	ori	r30, 0x3F	; 63
    a760:	07 f8       	bld	r0, 7
    a762:	00 94       	com	r0
    a764:	07 fa       	bst	r0, 7
    a766:	db 01       	movw	r26, r22
    a768:	b9 01       	movw	r22, r18
    a76a:	9d 01       	movw	r18, r26
    a76c:	dc 01       	movw	r26, r24
    a76e:	ca 01       	movw	r24, r20
    a770:	ad 01       	movw	r20, r26
    a772:	ef 93       	push	r30
    a774:	4a d0       	rcall	.+148    	; 0xa80a <__divsf3_pse>
    a776:	98 d1       	rcall	.+816    	; 0xaaa8 <__fp_round>
    a778:	0a d0       	rcall	.+20     	; 0xa78e <atan>
    a77a:	5f 91       	pop	r21
    a77c:	55 23       	and	r21, r21
    a77e:	31 f0       	breq	.+12     	; 0xa78c <atan2+0x54>
    a780:	2b ed       	ldi	r18, 0xDB	; 219
    a782:	3f e0       	ldi	r19, 0x0F	; 15
    a784:	49 e4       	ldi	r20, 0x49	; 73
    a786:	50 fd       	sbrc	r21, 0
    a788:	49 ec       	ldi	r20, 0xC9	; 201
    a78a:	63 cf       	rjmp	.-314    	; 0xa652 <__addsf3>
    a78c:	08 95       	ret

0000a78e <atan>:
    a78e:	df 93       	push	r29
    a790:	dd 27       	eor	r29, r29
    a792:	b9 2f       	mov	r27, r25
    a794:	bf 77       	andi	r27, 0x7F	; 127
    a796:	40 e8       	ldi	r20, 0x80	; 128
    a798:	5f e3       	ldi	r21, 0x3F	; 63
    a79a:	16 16       	cp	r1, r22
    a79c:	17 06       	cpc	r1, r23
    a79e:	48 07       	cpc	r20, r24
    a7a0:	5b 07       	cpc	r21, r27
    a7a2:	10 f4       	brcc	.+4      	; 0xa7a8 <atan+0x1a>
    a7a4:	d9 2f       	mov	r29, r25
    a7a6:	cf d1       	rcall	.+926    	; 0xab46 <inverse>
    a7a8:	9f 93       	push	r25
    a7aa:	8f 93       	push	r24
    a7ac:	7f 93       	push	r23
    a7ae:	6f 93       	push	r22
    a7b0:	3a d2       	rcall	.+1140   	; 0xac26 <square>
    a7b2:	ee e4       	ldi	r30, 0x4E	; 78
    a7b4:	f1 e0       	ldi	r31, 0x01	; 1
    a7b6:	1d d1       	rcall	.+570    	; 0xa9f2 <__fp_powser>
    a7b8:	77 d1       	rcall	.+750    	; 0xaaa8 <__fp_round>
    a7ba:	2f 91       	pop	r18
    a7bc:	3f 91       	pop	r19
    a7be:	4f 91       	pop	r20
    a7c0:	5f 91       	pop	r21
    a7c2:	d4 d1       	rcall	.+936    	; 0xab6c <__mulsf3x>
    a7c4:	dd 23       	and	r29, r29
    a7c6:	49 f0       	breq	.+18     	; 0xa7da <atan+0x4c>
    a7c8:	90 58       	subi	r25, 0x80	; 128
    a7ca:	a2 ea       	ldi	r26, 0xA2	; 162
    a7cc:	2a ed       	ldi	r18, 0xDA	; 218
    a7ce:	3f e0       	ldi	r19, 0x0F	; 15
    a7d0:	49 ec       	ldi	r20, 0xC9	; 201
    a7d2:	5f e3       	ldi	r21, 0x3F	; 63
    a7d4:	d0 78       	andi	r29, 0x80	; 128
    a7d6:	5d 27       	eor	r21, r29
    a7d8:	4d df       	rcall	.-358    	; 0xa674 <__addsf3x>
    a7da:	df 91       	pop	r29
    a7dc:	65 c1       	rjmp	.+714    	; 0xaaa8 <__fp_round>

0000a7de <__cmpsf2>:
    a7de:	dc d0       	rcall	.+440    	; 0xa998 <__fp_cmp>
    a7e0:	08 f4       	brcc	.+2      	; 0xa7e4 <__cmpsf2+0x6>
    a7e2:	81 e0       	ldi	r24, 0x01	; 1
    a7e4:	08 95       	ret

0000a7e6 <cos>:
    a7e6:	39 d1       	rcall	.+626    	; 0xaa5a <__fp_rempio2>
    a7e8:	e3 95       	inc	r30
    a7ea:	6f c1       	rjmp	.+734    	; 0xaaca <__fp_sinus>

0000a7ec <__divsf3>:
    a7ec:	0c d0       	rcall	.+24     	; 0xa806 <__divsf3x>
    a7ee:	5c c1       	rjmp	.+696    	; 0xaaa8 <__fp_round>
    a7f0:	2c d1       	rcall	.+600    	; 0xaa4a <__fp_pscB>
    a7f2:	40 f0       	brcs	.+16     	; 0xa804 <__divsf3+0x18>
    a7f4:	23 d1       	rcall	.+582    	; 0xaa3c <__fp_pscA>
    a7f6:	30 f0       	brcs	.+12     	; 0xa804 <__divsf3+0x18>
    a7f8:	21 f4       	brne	.+8      	; 0xa802 <__divsf3+0x16>
    a7fa:	5f 3f       	cpi	r21, 0xFF	; 255
    a7fc:	19 f0       	breq	.+6      	; 0xa804 <__divsf3+0x18>
    a7fe:	f0 c0       	rjmp	.+480    	; 0xa9e0 <__fp_inf>
    a800:	51 11       	cpse	r21, r1
    a802:	97 c1       	rjmp	.+814    	; 0xab32 <__fp_szero>
    a804:	f3 c0       	rjmp	.+486    	; 0xa9ec <__fp_nan>

0000a806 <__divsf3x>:
    a806:	72 d1       	rcall	.+740    	; 0xaaec <__fp_split3>
    a808:	98 f3       	brcs	.-26     	; 0xa7f0 <__divsf3+0x4>

0000a80a <__divsf3_pse>:
    a80a:	99 23       	and	r25, r25
    a80c:	c9 f3       	breq	.-14     	; 0xa800 <__divsf3+0x14>
    a80e:	55 23       	and	r21, r21
    a810:	b1 f3       	breq	.-20     	; 0xa7fe <__divsf3+0x12>
    a812:	95 1b       	sub	r25, r21
    a814:	55 0b       	sbc	r21, r21
    a816:	bb 27       	eor	r27, r27
    a818:	aa 27       	eor	r26, r26
    a81a:	62 17       	cp	r22, r18
    a81c:	73 07       	cpc	r23, r19
    a81e:	84 07       	cpc	r24, r20
    a820:	38 f0       	brcs	.+14     	; 0xa830 <__divsf3_pse+0x26>
    a822:	9f 5f       	subi	r25, 0xFF	; 255
    a824:	5f 4f       	sbci	r21, 0xFF	; 255
    a826:	22 0f       	add	r18, r18
    a828:	33 1f       	adc	r19, r19
    a82a:	44 1f       	adc	r20, r20
    a82c:	aa 1f       	adc	r26, r26
    a82e:	a9 f3       	breq	.-22     	; 0xa81a <__divsf3_pse+0x10>
    a830:	33 d0       	rcall	.+102    	; 0xa898 <__divsf3_pse+0x8e>
    a832:	0e 2e       	mov	r0, r30
    a834:	3a f0       	brmi	.+14     	; 0xa844 <__divsf3_pse+0x3a>
    a836:	e0 e8       	ldi	r30, 0x80	; 128
    a838:	30 d0       	rcall	.+96     	; 0xa89a <__divsf3_pse+0x90>
    a83a:	91 50       	subi	r25, 0x01	; 1
    a83c:	50 40       	sbci	r21, 0x00	; 0
    a83e:	e6 95       	lsr	r30
    a840:	00 1c       	adc	r0, r0
    a842:	ca f7       	brpl	.-14     	; 0xa836 <__divsf3_pse+0x2c>
    a844:	29 d0       	rcall	.+82     	; 0xa898 <__divsf3_pse+0x8e>
    a846:	fe 2f       	mov	r31, r30
    a848:	27 d0       	rcall	.+78     	; 0xa898 <__divsf3_pse+0x8e>
    a84a:	66 0f       	add	r22, r22
    a84c:	77 1f       	adc	r23, r23
    a84e:	88 1f       	adc	r24, r24
    a850:	bb 1f       	adc	r27, r27
    a852:	26 17       	cp	r18, r22
    a854:	37 07       	cpc	r19, r23
    a856:	48 07       	cpc	r20, r24
    a858:	ab 07       	cpc	r26, r27
    a85a:	b0 e8       	ldi	r27, 0x80	; 128
    a85c:	09 f0       	breq	.+2      	; 0xa860 <__divsf3_pse+0x56>
    a85e:	bb 0b       	sbc	r27, r27
    a860:	80 2d       	mov	r24, r0
    a862:	bf 01       	movw	r22, r30
    a864:	ff 27       	eor	r31, r31
    a866:	93 58       	subi	r25, 0x83	; 131
    a868:	5f 4f       	sbci	r21, 0xFF	; 255
    a86a:	2a f0       	brmi	.+10     	; 0xa876 <__divsf3_pse+0x6c>
    a86c:	9e 3f       	cpi	r25, 0xFE	; 254
    a86e:	51 05       	cpc	r21, r1
    a870:	68 f0       	brcs	.+26     	; 0xa88c <__divsf3_pse+0x82>
    a872:	b6 c0       	rjmp	.+364    	; 0xa9e0 <__fp_inf>
    a874:	5e c1       	rjmp	.+700    	; 0xab32 <__fp_szero>
    a876:	5f 3f       	cpi	r21, 0xFF	; 255
    a878:	ec f3       	brlt	.-6      	; 0xa874 <__divsf3_pse+0x6a>
    a87a:	98 3e       	cpi	r25, 0xE8	; 232
    a87c:	dc f3       	brlt	.-10     	; 0xa874 <__divsf3_pse+0x6a>
    a87e:	86 95       	lsr	r24
    a880:	77 95       	ror	r23
    a882:	67 95       	ror	r22
    a884:	b7 95       	ror	r27
    a886:	f7 95       	ror	r31
    a888:	9f 5f       	subi	r25, 0xFF	; 255
    a88a:	c9 f7       	brne	.-14     	; 0xa87e <__divsf3_pse+0x74>
    a88c:	88 0f       	add	r24, r24
    a88e:	91 1d       	adc	r25, r1
    a890:	96 95       	lsr	r25
    a892:	87 95       	ror	r24
    a894:	97 f9       	bld	r25, 7
    a896:	08 95       	ret
    a898:	e1 e0       	ldi	r30, 0x01	; 1
    a89a:	66 0f       	add	r22, r22
    a89c:	77 1f       	adc	r23, r23
    a89e:	88 1f       	adc	r24, r24
    a8a0:	bb 1f       	adc	r27, r27
    a8a2:	62 17       	cp	r22, r18
    a8a4:	73 07       	cpc	r23, r19
    a8a6:	84 07       	cpc	r24, r20
    a8a8:	ba 07       	cpc	r27, r26
    a8aa:	20 f0       	brcs	.+8      	; 0xa8b4 <__divsf3_pse+0xaa>
    a8ac:	62 1b       	sub	r22, r18
    a8ae:	73 0b       	sbc	r23, r19
    a8b0:	84 0b       	sbc	r24, r20
    a8b2:	ba 0b       	sbc	r27, r26
    a8b4:	ee 1f       	adc	r30, r30
    a8b6:	88 f7       	brcc	.-30     	; 0xa89a <__divsf3_pse+0x90>
    a8b8:	e0 95       	com	r30
    a8ba:	08 95       	ret

0000a8bc <__fixsfsi>:
    a8bc:	04 d0       	rcall	.+8      	; 0xa8c6 <__fixunssfsi>
    a8be:	68 94       	set
    a8c0:	b1 11       	cpse	r27, r1
    a8c2:	37 c1       	rjmp	.+622    	; 0xab32 <__fp_szero>
    a8c4:	08 95       	ret

0000a8c6 <__fixunssfsi>:
    a8c6:	1a d1       	rcall	.+564    	; 0xaafc <__fp_splitA>
    a8c8:	88 f0       	brcs	.+34     	; 0xa8ec <__fixunssfsi+0x26>
    a8ca:	9f 57       	subi	r25, 0x7F	; 127
    a8cc:	90 f0       	brcs	.+36     	; 0xa8f2 <__fixunssfsi+0x2c>
    a8ce:	b9 2f       	mov	r27, r25
    a8d0:	99 27       	eor	r25, r25
    a8d2:	b7 51       	subi	r27, 0x17	; 23
    a8d4:	a0 f0       	brcs	.+40     	; 0xa8fe <__fixunssfsi+0x38>
    a8d6:	d1 f0       	breq	.+52     	; 0xa90c <__fixunssfsi+0x46>
    a8d8:	66 0f       	add	r22, r22
    a8da:	77 1f       	adc	r23, r23
    a8dc:	88 1f       	adc	r24, r24
    a8de:	99 1f       	adc	r25, r25
    a8e0:	1a f0       	brmi	.+6      	; 0xa8e8 <__fixunssfsi+0x22>
    a8e2:	ba 95       	dec	r27
    a8e4:	c9 f7       	brne	.-14     	; 0xa8d8 <__fixunssfsi+0x12>
    a8e6:	12 c0       	rjmp	.+36     	; 0xa90c <__fixunssfsi+0x46>
    a8e8:	b1 30       	cpi	r27, 0x01	; 1
    a8ea:	81 f0       	breq	.+32     	; 0xa90c <__fixunssfsi+0x46>
    a8ec:	21 d1       	rcall	.+578    	; 0xab30 <__fp_zero>
    a8ee:	b1 e0       	ldi	r27, 0x01	; 1
    a8f0:	08 95       	ret
    a8f2:	1e c1       	rjmp	.+572    	; 0xab30 <__fp_zero>
    a8f4:	67 2f       	mov	r22, r23
    a8f6:	78 2f       	mov	r23, r24
    a8f8:	88 27       	eor	r24, r24
    a8fa:	b8 5f       	subi	r27, 0xF8	; 248
    a8fc:	39 f0       	breq	.+14     	; 0xa90c <__fixunssfsi+0x46>
    a8fe:	b9 3f       	cpi	r27, 0xF9	; 249
    a900:	cc f3       	brlt	.-14     	; 0xa8f4 <__fixunssfsi+0x2e>
    a902:	86 95       	lsr	r24
    a904:	77 95       	ror	r23
    a906:	67 95       	ror	r22
    a908:	b3 95       	inc	r27
    a90a:	d9 f7       	brne	.-10     	; 0xa902 <__fixunssfsi+0x3c>
    a90c:	3e f4       	brtc	.+14     	; 0xa91c <__fixunssfsi+0x56>
    a90e:	90 95       	com	r25
    a910:	80 95       	com	r24
    a912:	70 95       	com	r23
    a914:	61 95       	neg	r22
    a916:	7f 4f       	sbci	r23, 0xFF	; 255
    a918:	8f 4f       	sbci	r24, 0xFF	; 255
    a91a:	9f 4f       	sbci	r25, 0xFF	; 255
    a91c:	08 95       	ret

0000a91e <__floatunsisf>:
    a91e:	e8 94       	clt
    a920:	09 c0       	rjmp	.+18     	; 0xa934 <__floatsisf+0x12>

0000a922 <__floatsisf>:
    a922:	97 fb       	bst	r25, 7
    a924:	3e f4       	brtc	.+14     	; 0xa934 <__floatsisf+0x12>
    a926:	90 95       	com	r25
    a928:	80 95       	com	r24
    a92a:	70 95       	com	r23
    a92c:	61 95       	neg	r22
    a92e:	7f 4f       	sbci	r23, 0xFF	; 255
    a930:	8f 4f       	sbci	r24, 0xFF	; 255
    a932:	9f 4f       	sbci	r25, 0xFF	; 255
    a934:	99 23       	and	r25, r25
    a936:	a9 f0       	breq	.+42     	; 0xa962 <__floatsisf+0x40>
    a938:	f9 2f       	mov	r31, r25
    a93a:	96 e9       	ldi	r25, 0x96	; 150
    a93c:	bb 27       	eor	r27, r27
    a93e:	93 95       	inc	r25
    a940:	f6 95       	lsr	r31
    a942:	87 95       	ror	r24
    a944:	77 95       	ror	r23
    a946:	67 95       	ror	r22
    a948:	b7 95       	ror	r27
    a94a:	f1 11       	cpse	r31, r1
    a94c:	f8 cf       	rjmp	.-16     	; 0xa93e <__floatsisf+0x1c>
    a94e:	fa f4       	brpl	.+62     	; 0xa98e <__floatsisf+0x6c>
    a950:	bb 0f       	add	r27, r27
    a952:	11 f4       	brne	.+4      	; 0xa958 <__floatsisf+0x36>
    a954:	60 ff       	sbrs	r22, 0
    a956:	1b c0       	rjmp	.+54     	; 0xa98e <__floatsisf+0x6c>
    a958:	6f 5f       	subi	r22, 0xFF	; 255
    a95a:	7f 4f       	sbci	r23, 0xFF	; 255
    a95c:	8f 4f       	sbci	r24, 0xFF	; 255
    a95e:	9f 4f       	sbci	r25, 0xFF	; 255
    a960:	16 c0       	rjmp	.+44     	; 0xa98e <__floatsisf+0x6c>
    a962:	88 23       	and	r24, r24
    a964:	11 f0       	breq	.+4      	; 0xa96a <__floatsisf+0x48>
    a966:	96 e9       	ldi	r25, 0x96	; 150
    a968:	11 c0       	rjmp	.+34     	; 0xa98c <__floatsisf+0x6a>
    a96a:	77 23       	and	r23, r23
    a96c:	21 f0       	breq	.+8      	; 0xa976 <__floatsisf+0x54>
    a96e:	9e e8       	ldi	r25, 0x8E	; 142
    a970:	87 2f       	mov	r24, r23
    a972:	76 2f       	mov	r23, r22
    a974:	05 c0       	rjmp	.+10     	; 0xa980 <__floatsisf+0x5e>
    a976:	66 23       	and	r22, r22
    a978:	71 f0       	breq	.+28     	; 0xa996 <__floatsisf+0x74>
    a97a:	96 e8       	ldi	r25, 0x86	; 134
    a97c:	86 2f       	mov	r24, r22
    a97e:	70 e0       	ldi	r23, 0x00	; 0
    a980:	60 e0       	ldi	r22, 0x00	; 0
    a982:	2a f0       	brmi	.+10     	; 0xa98e <__floatsisf+0x6c>
    a984:	9a 95       	dec	r25
    a986:	66 0f       	add	r22, r22
    a988:	77 1f       	adc	r23, r23
    a98a:	88 1f       	adc	r24, r24
    a98c:	da f7       	brpl	.-10     	; 0xa984 <__floatsisf+0x62>
    a98e:	88 0f       	add	r24, r24
    a990:	96 95       	lsr	r25
    a992:	87 95       	ror	r24
    a994:	97 f9       	bld	r25, 7
    a996:	08 95       	ret

0000a998 <__fp_cmp>:
    a998:	99 0f       	add	r25, r25
    a99a:	00 08       	sbc	r0, r0
    a99c:	55 0f       	add	r21, r21
    a99e:	aa 0b       	sbc	r26, r26
    a9a0:	e0 e8       	ldi	r30, 0x80	; 128
    a9a2:	fe ef       	ldi	r31, 0xFE	; 254
    a9a4:	16 16       	cp	r1, r22
    a9a6:	17 06       	cpc	r1, r23
    a9a8:	e8 07       	cpc	r30, r24
    a9aa:	f9 07       	cpc	r31, r25
    a9ac:	c0 f0       	brcs	.+48     	; 0xa9de <__fp_cmp+0x46>
    a9ae:	12 16       	cp	r1, r18
    a9b0:	13 06       	cpc	r1, r19
    a9b2:	e4 07       	cpc	r30, r20
    a9b4:	f5 07       	cpc	r31, r21
    a9b6:	98 f0       	brcs	.+38     	; 0xa9de <__fp_cmp+0x46>
    a9b8:	62 1b       	sub	r22, r18
    a9ba:	73 0b       	sbc	r23, r19
    a9bc:	84 0b       	sbc	r24, r20
    a9be:	95 0b       	sbc	r25, r21
    a9c0:	39 f4       	brne	.+14     	; 0xa9d0 <__fp_cmp+0x38>
    a9c2:	0a 26       	eor	r0, r26
    a9c4:	61 f0       	breq	.+24     	; 0xa9de <__fp_cmp+0x46>
    a9c6:	23 2b       	or	r18, r19
    a9c8:	24 2b       	or	r18, r20
    a9ca:	25 2b       	or	r18, r21
    a9cc:	21 f4       	brne	.+8      	; 0xa9d6 <__fp_cmp+0x3e>
    a9ce:	08 95       	ret
    a9d0:	0a 26       	eor	r0, r26
    a9d2:	09 f4       	brne	.+2      	; 0xa9d6 <__fp_cmp+0x3e>
    a9d4:	a1 40       	sbci	r26, 0x01	; 1
    a9d6:	a6 95       	lsr	r26
    a9d8:	8f ef       	ldi	r24, 0xFF	; 255
    a9da:	81 1d       	adc	r24, r1
    a9dc:	81 1d       	adc	r24, r1
    a9de:	08 95       	ret

0000a9e0 <__fp_inf>:
    a9e0:	97 f9       	bld	r25, 7
    a9e2:	9f 67       	ori	r25, 0x7F	; 127
    a9e4:	80 e8       	ldi	r24, 0x80	; 128
    a9e6:	70 e0       	ldi	r23, 0x00	; 0
    a9e8:	60 e0       	ldi	r22, 0x00	; 0
    a9ea:	08 95       	ret

0000a9ec <__fp_nan>:
    a9ec:	9f ef       	ldi	r25, 0xFF	; 255
    a9ee:	80 ec       	ldi	r24, 0xC0	; 192
    a9f0:	08 95       	ret

0000a9f2 <__fp_powser>:
    a9f2:	df 93       	push	r29
    a9f4:	cf 93       	push	r28
    a9f6:	1f 93       	push	r17
    a9f8:	0f 93       	push	r16
    a9fa:	ff 92       	push	r15
    a9fc:	ef 92       	push	r14
    a9fe:	df 92       	push	r13
    aa00:	7b 01       	movw	r14, r22
    aa02:	8c 01       	movw	r16, r24
    aa04:	68 94       	set
    aa06:	05 c0       	rjmp	.+10     	; 0xaa12 <__fp_powser+0x20>
    aa08:	da 2e       	mov	r13, r26
    aa0a:	ef 01       	movw	r28, r30
    aa0c:	af d0       	rcall	.+350    	; 0xab6c <__mulsf3x>
    aa0e:	fe 01       	movw	r30, r28
    aa10:	e8 94       	clt
    aa12:	a5 91       	lpm	r26, Z+
    aa14:	25 91       	lpm	r18, Z+
    aa16:	35 91       	lpm	r19, Z+
    aa18:	45 91       	lpm	r20, Z+
    aa1a:	55 91       	lpm	r21, Z+
    aa1c:	ae f3       	brts	.-22     	; 0xaa08 <__fp_powser+0x16>
    aa1e:	ef 01       	movw	r28, r30
    aa20:	29 de       	rcall	.-942    	; 0xa674 <__addsf3x>
    aa22:	fe 01       	movw	r30, r28
    aa24:	97 01       	movw	r18, r14
    aa26:	a8 01       	movw	r20, r16
    aa28:	da 94       	dec	r13
    aa2a:	79 f7       	brne	.-34     	; 0xaa0a <__fp_powser+0x18>
    aa2c:	df 90       	pop	r13
    aa2e:	ef 90       	pop	r14
    aa30:	ff 90       	pop	r15
    aa32:	0f 91       	pop	r16
    aa34:	1f 91       	pop	r17
    aa36:	cf 91       	pop	r28
    aa38:	df 91       	pop	r29
    aa3a:	08 95       	ret

0000aa3c <__fp_pscA>:
    aa3c:	00 24       	eor	r0, r0
    aa3e:	0a 94       	dec	r0
    aa40:	16 16       	cp	r1, r22
    aa42:	17 06       	cpc	r1, r23
    aa44:	18 06       	cpc	r1, r24
    aa46:	09 06       	cpc	r0, r25
    aa48:	08 95       	ret

0000aa4a <__fp_pscB>:
    aa4a:	00 24       	eor	r0, r0
    aa4c:	0a 94       	dec	r0
    aa4e:	12 16       	cp	r1, r18
    aa50:	13 06       	cpc	r1, r19
    aa52:	14 06       	cpc	r1, r20
    aa54:	05 06       	cpc	r0, r21
    aa56:	08 95       	ret
    aa58:	c9 cf       	rjmp	.-110    	; 0xa9ec <__fp_nan>

0000aa5a <__fp_rempio2>:
    aa5a:	50 d0       	rcall	.+160    	; 0xaafc <__fp_splitA>
    aa5c:	e8 f3       	brcs	.-6      	; 0xaa58 <__fp_pscB+0xe>
    aa5e:	e8 94       	clt
    aa60:	e0 e0       	ldi	r30, 0x00	; 0
    aa62:	bb 27       	eor	r27, r27
    aa64:	9f 57       	subi	r25, 0x7F	; 127
    aa66:	f0 f0       	brcs	.+60     	; 0xaaa4 <__fp_rempio2+0x4a>
    aa68:	2a ed       	ldi	r18, 0xDA	; 218
    aa6a:	3f e0       	ldi	r19, 0x0F	; 15
    aa6c:	49 ec       	ldi	r20, 0xC9	; 201
    aa6e:	06 c0       	rjmp	.+12     	; 0xaa7c <__fp_rempio2+0x22>
    aa70:	ee 0f       	add	r30, r30
    aa72:	bb 0f       	add	r27, r27
    aa74:	66 1f       	adc	r22, r22
    aa76:	77 1f       	adc	r23, r23
    aa78:	88 1f       	adc	r24, r24
    aa7a:	28 f0       	brcs	.+10     	; 0xaa86 <__fp_rempio2+0x2c>
    aa7c:	b2 3a       	cpi	r27, 0xA2	; 162
    aa7e:	62 07       	cpc	r22, r18
    aa80:	73 07       	cpc	r23, r19
    aa82:	84 07       	cpc	r24, r20
    aa84:	28 f0       	brcs	.+10     	; 0xaa90 <__fp_rempio2+0x36>
    aa86:	b2 5a       	subi	r27, 0xA2	; 162
    aa88:	62 0b       	sbc	r22, r18
    aa8a:	73 0b       	sbc	r23, r19
    aa8c:	84 0b       	sbc	r24, r20
    aa8e:	e3 95       	inc	r30
    aa90:	9a 95       	dec	r25
    aa92:	72 f7       	brpl	.-36     	; 0xaa70 <__fp_rempio2+0x16>
    aa94:	80 38       	cpi	r24, 0x80	; 128
    aa96:	30 f4       	brcc	.+12     	; 0xaaa4 <__fp_rempio2+0x4a>
    aa98:	9a 95       	dec	r25
    aa9a:	bb 0f       	add	r27, r27
    aa9c:	66 1f       	adc	r22, r22
    aa9e:	77 1f       	adc	r23, r23
    aaa0:	88 1f       	adc	r24, r24
    aaa2:	d2 f7       	brpl	.-12     	; 0xaa98 <__fp_rempio2+0x3e>
    aaa4:	90 48       	sbci	r25, 0x80	; 128
    aaa6:	c4 c0       	rjmp	.+392    	; 0xac30 <__fp_mpack_finite>

0000aaa8 <__fp_round>:
    aaa8:	09 2e       	mov	r0, r25
    aaaa:	03 94       	inc	r0
    aaac:	00 0c       	add	r0, r0
    aaae:	11 f4       	brne	.+4      	; 0xaab4 <__fp_round+0xc>
    aab0:	88 23       	and	r24, r24
    aab2:	52 f0       	brmi	.+20     	; 0xaac8 <__fp_round+0x20>
    aab4:	bb 0f       	add	r27, r27
    aab6:	40 f4       	brcc	.+16     	; 0xaac8 <__fp_round+0x20>
    aab8:	bf 2b       	or	r27, r31
    aaba:	11 f4       	brne	.+4      	; 0xaac0 <__fp_round+0x18>
    aabc:	60 ff       	sbrs	r22, 0
    aabe:	04 c0       	rjmp	.+8      	; 0xaac8 <__fp_round+0x20>
    aac0:	6f 5f       	subi	r22, 0xFF	; 255
    aac2:	7f 4f       	sbci	r23, 0xFF	; 255
    aac4:	8f 4f       	sbci	r24, 0xFF	; 255
    aac6:	9f 4f       	sbci	r25, 0xFF	; 255
    aac8:	08 95       	ret

0000aaca <__fp_sinus>:
    aaca:	ef 93       	push	r30
    aacc:	e0 ff       	sbrs	r30, 0
    aace:	06 c0       	rjmp	.+12     	; 0xaadc <__fp_sinus+0x12>
    aad0:	a2 ea       	ldi	r26, 0xA2	; 162
    aad2:	2a ed       	ldi	r18, 0xDA	; 218
    aad4:	3f e0       	ldi	r19, 0x0F	; 15
    aad6:	49 ec       	ldi	r20, 0xC9	; 201
    aad8:	5f eb       	ldi	r21, 0xBF	; 191
    aada:	cc dd       	rcall	.-1128   	; 0xa674 <__addsf3x>
    aadc:	e5 df       	rcall	.-54     	; 0xaaa8 <__fp_round>
    aade:	0f 90       	pop	r0
    aae0:	03 94       	inc	r0
    aae2:	01 fc       	sbrc	r0, 1
    aae4:	90 58       	subi	r25, 0x80	; 128
    aae6:	eb e7       	ldi	r30, 0x7B	; 123
    aae8:	f1 e0       	ldi	r31, 0x01	; 1
    aaea:	ae c0       	rjmp	.+348    	; 0xac48 <__fp_powsodd>

0000aaec <__fp_split3>:
    aaec:	57 fd       	sbrc	r21, 7
    aaee:	90 58       	subi	r25, 0x80	; 128
    aaf0:	44 0f       	add	r20, r20
    aaf2:	55 1f       	adc	r21, r21
    aaf4:	59 f0       	breq	.+22     	; 0xab0c <__fp_splitA+0x10>
    aaf6:	5f 3f       	cpi	r21, 0xFF	; 255
    aaf8:	71 f0       	breq	.+28     	; 0xab16 <__fp_splitA+0x1a>
    aafa:	47 95       	ror	r20

0000aafc <__fp_splitA>:
    aafc:	88 0f       	add	r24, r24
    aafe:	97 fb       	bst	r25, 7
    ab00:	99 1f       	adc	r25, r25
    ab02:	61 f0       	breq	.+24     	; 0xab1c <__fp_splitA+0x20>
    ab04:	9f 3f       	cpi	r25, 0xFF	; 255
    ab06:	79 f0       	breq	.+30     	; 0xab26 <__fp_splitA+0x2a>
    ab08:	87 95       	ror	r24
    ab0a:	08 95       	ret
    ab0c:	12 16       	cp	r1, r18
    ab0e:	13 06       	cpc	r1, r19
    ab10:	14 06       	cpc	r1, r20
    ab12:	55 1f       	adc	r21, r21
    ab14:	f2 cf       	rjmp	.-28     	; 0xaafa <__fp_split3+0xe>
    ab16:	46 95       	lsr	r20
    ab18:	f1 df       	rcall	.-30     	; 0xaafc <__fp_splitA>
    ab1a:	08 c0       	rjmp	.+16     	; 0xab2c <__fp_splitA+0x30>
    ab1c:	16 16       	cp	r1, r22
    ab1e:	17 06       	cpc	r1, r23
    ab20:	18 06       	cpc	r1, r24
    ab22:	99 1f       	adc	r25, r25
    ab24:	f1 cf       	rjmp	.-30     	; 0xab08 <__fp_splitA+0xc>
    ab26:	86 95       	lsr	r24
    ab28:	71 05       	cpc	r23, r1
    ab2a:	61 05       	cpc	r22, r1
    ab2c:	08 94       	sec
    ab2e:	08 95       	ret

0000ab30 <__fp_zero>:
    ab30:	e8 94       	clt

0000ab32 <__fp_szero>:
    ab32:	bb 27       	eor	r27, r27
    ab34:	66 27       	eor	r22, r22
    ab36:	77 27       	eor	r23, r23
    ab38:	cb 01       	movw	r24, r22
    ab3a:	97 f9       	bld	r25, 7
    ab3c:	08 95       	ret

0000ab3e <__gesf2>:
    ab3e:	2c df       	rcall	.-424    	; 0xa998 <__fp_cmp>
    ab40:	08 f4       	brcc	.+2      	; 0xab44 <__gesf2+0x6>
    ab42:	8f ef       	ldi	r24, 0xFF	; 255
    ab44:	08 95       	ret

0000ab46 <inverse>:
    ab46:	9b 01       	movw	r18, r22
    ab48:	ac 01       	movw	r20, r24
    ab4a:	60 e0       	ldi	r22, 0x00	; 0
    ab4c:	70 e0       	ldi	r23, 0x00	; 0
    ab4e:	80 e8       	ldi	r24, 0x80	; 128
    ab50:	9f e3       	ldi	r25, 0x3F	; 63
    ab52:	4c ce       	rjmp	.-872    	; 0xa7ec <__divsf3>

0000ab54 <__mulsf3>:
    ab54:	0b d0       	rcall	.+22     	; 0xab6c <__mulsf3x>
    ab56:	a8 cf       	rjmp	.-176    	; 0xaaa8 <__fp_round>
    ab58:	71 df       	rcall	.-286    	; 0xaa3c <__fp_pscA>
    ab5a:	28 f0       	brcs	.+10     	; 0xab66 <__mulsf3+0x12>
    ab5c:	76 df       	rcall	.-276    	; 0xaa4a <__fp_pscB>
    ab5e:	18 f0       	brcs	.+6      	; 0xab66 <__mulsf3+0x12>
    ab60:	95 23       	and	r25, r21
    ab62:	09 f0       	breq	.+2      	; 0xab66 <__mulsf3+0x12>
    ab64:	3d cf       	rjmp	.-390    	; 0xa9e0 <__fp_inf>
    ab66:	42 cf       	rjmp	.-380    	; 0xa9ec <__fp_nan>
    ab68:	11 24       	eor	r1, r1
    ab6a:	e3 cf       	rjmp	.-58     	; 0xab32 <__fp_szero>

0000ab6c <__mulsf3x>:
    ab6c:	bf df       	rcall	.-130    	; 0xaaec <__fp_split3>
    ab6e:	a0 f3       	brcs	.-24     	; 0xab58 <__mulsf3+0x4>

0000ab70 <__mulsf3_pse>:
    ab70:	95 9f       	mul	r25, r21
    ab72:	d1 f3       	breq	.-12     	; 0xab68 <__mulsf3+0x14>
    ab74:	95 0f       	add	r25, r21
    ab76:	50 e0       	ldi	r21, 0x00	; 0
    ab78:	55 1f       	adc	r21, r21
    ab7a:	62 9f       	mul	r22, r18
    ab7c:	f0 01       	movw	r30, r0
    ab7e:	72 9f       	mul	r23, r18
    ab80:	bb 27       	eor	r27, r27
    ab82:	f0 0d       	add	r31, r0
    ab84:	b1 1d       	adc	r27, r1
    ab86:	63 9f       	mul	r22, r19
    ab88:	aa 27       	eor	r26, r26
    ab8a:	f0 0d       	add	r31, r0
    ab8c:	b1 1d       	adc	r27, r1
    ab8e:	aa 1f       	adc	r26, r26
    ab90:	64 9f       	mul	r22, r20
    ab92:	66 27       	eor	r22, r22
    ab94:	b0 0d       	add	r27, r0
    ab96:	a1 1d       	adc	r26, r1
    ab98:	66 1f       	adc	r22, r22
    ab9a:	82 9f       	mul	r24, r18
    ab9c:	22 27       	eor	r18, r18
    ab9e:	b0 0d       	add	r27, r0
    aba0:	a1 1d       	adc	r26, r1
    aba2:	62 1f       	adc	r22, r18
    aba4:	73 9f       	mul	r23, r19
    aba6:	b0 0d       	add	r27, r0
    aba8:	a1 1d       	adc	r26, r1
    abaa:	62 1f       	adc	r22, r18
    abac:	83 9f       	mul	r24, r19
    abae:	a0 0d       	add	r26, r0
    abb0:	61 1d       	adc	r22, r1
    abb2:	22 1f       	adc	r18, r18
    abb4:	74 9f       	mul	r23, r20
    abb6:	33 27       	eor	r19, r19
    abb8:	a0 0d       	add	r26, r0
    abba:	61 1d       	adc	r22, r1
    abbc:	23 1f       	adc	r18, r19
    abbe:	84 9f       	mul	r24, r20
    abc0:	60 0d       	add	r22, r0
    abc2:	21 1d       	adc	r18, r1
    abc4:	82 2f       	mov	r24, r18
    abc6:	76 2f       	mov	r23, r22
    abc8:	6a 2f       	mov	r22, r26
    abca:	11 24       	eor	r1, r1
    abcc:	9f 57       	subi	r25, 0x7F	; 127
    abce:	50 40       	sbci	r21, 0x00	; 0
    abd0:	8a f0       	brmi	.+34     	; 0xabf4 <__mulsf3_pse+0x84>
    abd2:	e1 f0       	breq	.+56     	; 0xac0c <__mulsf3_pse+0x9c>
    abd4:	88 23       	and	r24, r24
    abd6:	4a f0       	brmi	.+18     	; 0xabea <__mulsf3_pse+0x7a>
    abd8:	ee 0f       	add	r30, r30
    abda:	ff 1f       	adc	r31, r31
    abdc:	bb 1f       	adc	r27, r27
    abde:	66 1f       	adc	r22, r22
    abe0:	77 1f       	adc	r23, r23
    abe2:	88 1f       	adc	r24, r24
    abe4:	91 50       	subi	r25, 0x01	; 1
    abe6:	50 40       	sbci	r21, 0x00	; 0
    abe8:	a9 f7       	brne	.-22     	; 0xabd4 <__mulsf3_pse+0x64>
    abea:	9e 3f       	cpi	r25, 0xFE	; 254
    abec:	51 05       	cpc	r21, r1
    abee:	70 f0       	brcs	.+28     	; 0xac0c <__mulsf3_pse+0x9c>
    abf0:	f7 ce       	rjmp	.-530    	; 0xa9e0 <__fp_inf>
    abf2:	9f cf       	rjmp	.-194    	; 0xab32 <__fp_szero>
    abf4:	5f 3f       	cpi	r21, 0xFF	; 255
    abf6:	ec f3       	brlt	.-6      	; 0xabf2 <__mulsf3_pse+0x82>
    abf8:	98 3e       	cpi	r25, 0xE8	; 232
    abfa:	dc f3       	brlt	.-10     	; 0xabf2 <__mulsf3_pse+0x82>
    abfc:	86 95       	lsr	r24
    abfe:	77 95       	ror	r23
    ac00:	67 95       	ror	r22
    ac02:	b7 95       	ror	r27
    ac04:	f7 95       	ror	r31
    ac06:	e7 95       	ror	r30
    ac08:	9f 5f       	subi	r25, 0xFF	; 255
    ac0a:	c1 f7       	brne	.-16     	; 0xabfc <__mulsf3_pse+0x8c>
    ac0c:	fe 2b       	or	r31, r30
    ac0e:	88 0f       	add	r24, r24
    ac10:	91 1d       	adc	r25, r1
    ac12:	96 95       	lsr	r25
    ac14:	87 95       	ror	r24
    ac16:	97 f9       	bld	r25, 7
    ac18:	08 95       	ret

0000ac1a <sin>:
    ac1a:	9f 93       	push	r25
    ac1c:	1e df       	rcall	.-452    	; 0xaa5a <__fp_rempio2>
    ac1e:	0f 90       	pop	r0
    ac20:	07 fc       	sbrc	r0, 7
    ac22:	ee 5f       	subi	r30, 0xFE	; 254
    ac24:	52 cf       	rjmp	.-348    	; 0xaaca <__fp_sinus>

0000ac26 <square>:
    ac26:	9b 01       	movw	r18, r22
    ac28:	ac 01       	movw	r20, r24
    ac2a:	94 cf       	rjmp	.-216    	; 0xab54 <__mulsf3>

0000ac2c <__fp_mpack>:
    ac2c:	9f 3f       	cpi	r25, 0xFF	; 255
    ac2e:	31 f0       	breq	.+12     	; 0xac3c <__fp_mpack_finite+0xc>

0000ac30 <__fp_mpack_finite>:
    ac30:	91 50       	subi	r25, 0x01	; 1
    ac32:	20 f4       	brcc	.+8      	; 0xac3c <__fp_mpack_finite+0xc>
    ac34:	87 95       	ror	r24
    ac36:	77 95       	ror	r23
    ac38:	67 95       	ror	r22
    ac3a:	b7 95       	ror	r27
    ac3c:	88 0f       	add	r24, r24
    ac3e:	91 1d       	adc	r25, r1
    ac40:	96 95       	lsr	r25
    ac42:	87 95       	ror	r24
    ac44:	97 f9       	bld	r25, 7
    ac46:	08 95       	ret

0000ac48 <__fp_powsodd>:
    ac48:	9f 93       	push	r25
    ac4a:	8f 93       	push	r24
    ac4c:	7f 93       	push	r23
    ac4e:	6f 93       	push	r22
    ac50:	ff 93       	push	r31
    ac52:	ef 93       	push	r30
    ac54:	9b 01       	movw	r18, r22
    ac56:	ac 01       	movw	r20, r24
    ac58:	7d df       	rcall	.-262    	; 0xab54 <__mulsf3>
    ac5a:	ef 91       	pop	r30
    ac5c:	ff 91       	pop	r31
    ac5e:	c9 de       	rcall	.-622    	; 0xa9f2 <__fp_powser>
    ac60:	2f 91       	pop	r18
    ac62:	3f 91       	pop	r19
    ac64:	4f 91       	pop	r20
    ac66:	5f 91       	pop	r21
    ac68:	75 cf       	rjmp	.-278    	; 0xab54 <__mulsf3>

0000ac6a <__mulsi3>:
    ac6a:	62 9f       	mul	r22, r18
    ac6c:	d0 01       	movw	r26, r0
    ac6e:	73 9f       	mul	r23, r19
    ac70:	f0 01       	movw	r30, r0
    ac72:	82 9f       	mul	r24, r18
    ac74:	e0 0d       	add	r30, r0
    ac76:	f1 1d       	adc	r31, r1
    ac78:	64 9f       	mul	r22, r20
    ac7a:	e0 0d       	add	r30, r0
    ac7c:	f1 1d       	adc	r31, r1
    ac7e:	92 9f       	mul	r25, r18
    ac80:	f0 0d       	add	r31, r0
    ac82:	83 9f       	mul	r24, r19
    ac84:	f0 0d       	add	r31, r0
    ac86:	74 9f       	mul	r23, r20
    ac88:	f0 0d       	add	r31, r0
    ac8a:	65 9f       	mul	r22, r21
    ac8c:	f0 0d       	add	r31, r0
    ac8e:	99 27       	eor	r25, r25
    ac90:	72 9f       	mul	r23, r18
    ac92:	b0 0d       	add	r27, r0
    ac94:	e1 1d       	adc	r30, r1
    ac96:	f9 1f       	adc	r31, r25
    ac98:	63 9f       	mul	r22, r19
    ac9a:	b0 0d       	add	r27, r0
    ac9c:	e1 1d       	adc	r30, r1
    ac9e:	f9 1f       	adc	r31, r25
    aca0:	bd 01       	movw	r22, r26
    aca2:	cf 01       	movw	r24, r30
    aca4:	11 24       	eor	r1, r1
    aca6:	08 95       	ret

0000aca8 <__udivmodhi4>:
    aca8:	aa 1b       	sub	r26, r26
    acaa:	bb 1b       	sub	r27, r27
    acac:	51 e1       	ldi	r21, 0x11	; 17
    acae:	07 c0       	rjmp	.+14     	; 0xacbe <__udivmodhi4_ep>

0000acb0 <__udivmodhi4_loop>:
    acb0:	aa 1f       	adc	r26, r26
    acb2:	bb 1f       	adc	r27, r27
    acb4:	a6 17       	cp	r26, r22
    acb6:	b7 07       	cpc	r27, r23
    acb8:	10 f0       	brcs	.+4      	; 0xacbe <__udivmodhi4_ep>
    acba:	a6 1b       	sub	r26, r22
    acbc:	b7 0b       	sbc	r27, r23

0000acbe <__udivmodhi4_ep>:
    acbe:	88 1f       	adc	r24, r24
    acc0:	99 1f       	adc	r25, r25
    acc2:	5a 95       	dec	r21
    acc4:	a9 f7       	brne	.-22     	; 0xacb0 <__udivmodhi4_loop>
    acc6:	80 95       	com	r24
    acc8:	90 95       	com	r25
    acca:	bc 01       	movw	r22, r24
    accc:	cd 01       	movw	r24, r26
    acce:	08 95       	ret

0000acd0 <__divmodhi4>:
    acd0:	97 fb       	bst	r25, 7
    acd2:	09 2e       	mov	r0, r25
    acd4:	07 26       	eor	r0, r23
    acd6:	0a d0       	rcall	.+20     	; 0xacec <__divmodhi4_neg1>
    acd8:	77 fd       	sbrc	r23, 7
    acda:	04 d0       	rcall	.+8      	; 0xace4 <__divmodhi4_neg2>
    acdc:	e5 df       	rcall	.-54     	; 0xaca8 <__udivmodhi4>
    acde:	06 d0       	rcall	.+12     	; 0xacec <__divmodhi4_neg1>
    ace0:	00 20       	and	r0, r0
    ace2:	1a f4       	brpl	.+6      	; 0xacea <__divmodhi4_exit>

0000ace4 <__divmodhi4_neg2>:
    ace4:	70 95       	com	r23
    ace6:	61 95       	neg	r22
    ace8:	7f 4f       	sbci	r23, 0xFF	; 255

0000acea <__divmodhi4_exit>:
    acea:	08 95       	ret

0000acec <__divmodhi4_neg1>:
    acec:	f6 f7       	brtc	.-4      	; 0xacea <__divmodhi4_exit>
    acee:	90 95       	com	r25
    acf0:	81 95       	neg	r24
    acf2:	9f 4f       	sbci	r25, 0xFF	; 255
    acf4:	08 95       	ret

0000acf6 <__divmodsi4>:
    acf6:	97 fb       	bst	r25, 7
    acf8:	09 2e       	mov	r0, r25
    acfa:	05 26       	eor	r0, r21
    acfc:	0e d0       	rcall	.+28     	; 0xad1a <__divmodsi4_neg1>
    acfe:	57 fd       	sbrc	r21, 7
    ad00:	04 d0       	rcall	.+8      	; 0xad0a <__divmodsi4_neg2>
    ad02:	14 d0       	rcall	.+40     	; 0xad2c <__udivmodsi4>
    ad04:	0a d0       	rcall	.+20     	; 0xad1a <__divmodsi4_neg1>
    ad06:	00 1c       	adc	r0, r0
    ad08:	38 f4       	brcc	.+14     	; 0xad18 <__divmodsi4_exit>

0000ad0a <__divmodsi4_neg2>:
    ad0a:	50 95       	com	r21
    ad0c:	40 95       	com	r20
    ad0e:	30 95       	com	r19
    ad10:	21 95       	neg	r18
    ad12:	3f 4f       	sbci	r19, 0xFF	; 255
    ad14:	4f 4f       	sbci	r20, 0xFF	; 255
    ad16:	5f 4f       	sbci	r21, 0xFF	; 255

0000ad18 <__divmodsi4_exit>:
    ad18:	08 95       	ret

0000ad1a <__divmodsi4_neg1>:
    ad1a:	f6 f7       	brtc	.-4      	; 0xad18 <__divmodsi4_exit>
    ad1c:	90 95       	com	r25
    ad1e:	80 95       	com	r24
    ad20:	70 95       	com	r23
    ad22:	61 95       	neg	r22
    ad24:	7f 4f       	sbci	r23, 0xFF	; 255
    ad26:	8f 4f       	sbci	r24, 0xFF	; 255
    ad28:	9f 4f       	sbci	r25, 0xFF	; 255
    ad2a:	08 95       	ret

0000ad2c <__udivmodsi4>:
    ad2c:	a1 e2       	ldi	r26, 0x21	; 33
    ad2e:	1a 2e       	mov	r1, r26
    ad30:	aa 1b       	sub	r26, r26
    ad32:	bb 1b       	sub	r27, r27
    ad34:	fd 01       	movw	r30, r26
    ad36:	0d c0       	rjmp	.+26     	; 0xad52 <__udivmodsi4_ep>

0000ad38 <__udivmodsi4_loop>:
    ad38:	aa 1f       	adc	r26, r26
    ad3a:	bb 1f       	adc	r27, r27
    ad3c:	ee 1f       	adc	r30, r30
    ad3e:	ff 1f       	adc	r31, r31
    ad40:	a2 17       	cp	r26, r18
    ad42:	b3 07       	cpc	r27, r19
    ad44:	e4 07       	cpc	r30, r20
    ad46:	f5 07       	cpc	r31, r21
    ad48:	20 f0       	brcs	.+8      	; 0xad52 <__udivmodsi4_ep>
    ad4a:	a2 1b       	sub	r26, r18
    ad4c:	b3 0b       	sbc	r27, r19
    ad4e:	e4 0b       	sbc	r30, r20
    ad50:	f5 0b       	sbc	r31, r21

0000ad52 <__udivmodsi4_ep>:
    ad52:	66 1f       	adc	r22, r22
    ad54:	77 1f       	adc	r23, r23
    ad56:	88 1f       	adc	r24, r24
    ad58:	99 1f       	adc	r25, r25
    ad5a:	1a 94       	dec	r1
    ad5c:	69 f7       	brne	.-38     	; 0xad38 <__udivmodsi4_loop>
    ad5e:	60 95       	com	r22
    ad60:	70 95       	com	r23
    ad62:	80 95       	com	r24
    ad64:	90 95       	com	r25
    ad66:	9b 01       	movw	r18, r22
    ad68:	ac 01       	movw	r20, r24
    ad6a:	bd 01       	movw	r22, r26
    ad6c:	cf 01       	movw	r24, r30
    ad6e:	08 95       	ret

0000ad70 <do_rand>:
    ad70:	af 92       	push	r10
    ad72:	bf 92       	push	r11
    ad74:	cf 92       	push	r12
    ad76:	df 92       	push	r13
    ad78:	ef 92       	push	r14
    ad7a:	ff 92       	push	r15
    ad7c:	0f 93       	push	r16
    ad7e:	1f 93       	push	r17
    ad80:	cf 93       	push	r28
    ad82:	df 93       	push	r29
    ad84:	ec 01       	movw	r28, r24
    ad86:	68 81       	ld	r22, Y
    ad88:	79 81       	ldd	r23, Y+1	; 0x01
    ad8a:	8a 81       	ldd	r24, Y+2	; 0x02
    ad8c:	9b 81       	ldd	r25, Y+3	; 0x03
    ad8e:	61 15       	cp	r22, r1
    ad90:	71 05       	cpc	r23, r1
    ad92:	81 05       	cpc	r24, r1
    ad94:	91 05       	cpc	r25, r1
    ad96:	21 f4       	brne	.+8      	; 0xada0 <do_rand+0x30>
    ad98:	64 e2       	ldi	r22, 0x24	; 36
    ad9a:	79 ed       	ldi	r23, 0xD9	; 217
    ad9c:	8b e5       	ldi	r24, 0x5B	; 91
    ad9e:	97 e0       	ldi	r25, 0x07	; 7
    ada0:	2d e1       	ldi	r18, 0x1D	; 29
    ada2:	33 ef       	ldi	r19, 0xF3	; 243
    ada4:	41 e0       	ldi	r20, 0x01	; 1
    ada6:	50 e0       	ldi	r21, 0x00	; 0
    ada8:	0e 94 7b 56 	call	0xacf6	; 0xacf6 <__divmodsi4>
    adac:	79 01       	movw	r14, r18
    adae:	8a 01       	movw	r16, r20
    adb0:	27 ea       	ldi	r18, 0xA7	; 167
    adb2:	31 e4       	ldi	r19, 0x41	; 65
    adb4:	40 e0       	ldi	r20, 0x00	; 0
    adb6:	50 e0       	ldi	r21, 0x00	; 0
    adb8:	0e 94 35 56 	call	0xac6a	; 0xac6a <__mulsi3>
    adbc:	5b 01       	movw	r10, r22
    adbe:	6c 01       	movw	r12, r24
    adc0:	c8 01       	movw	r24, r16
    adc2:	b7 01       	movw	r22, r14
    adc4:	2c ee       	ldi	r18, 0xEC	; 236
    adc6:	34 ef       	ldi	r19, 0xF4	; 244
    adc8:	4f ef       	ldi	r20, 0xFF	; 255
    adca:	5f ef       	ldi	r21, 0xFF	; 255
    adcc:	0e 94 35 56 	call	0xac6a	; 0xac6a <__mulsi3>
    add0:	6a 0d       	add	r22, r10
    add2:	7b 1d       	adc	r23, r11
    add4:	8c 1d       	adc	r24, r12
    add6:	9d 1d       	adc	r25, r13
    add8:	97 ff       	sbrs	r25, 7
    adda:	04 c0       	rjmp	.+8      	; 0xade4 <do_rand+0x74>
    addc:	61 50       	subi	r22, 0x01	; 1
    adde:	70 40       	sbci	r23, 0x00	; 0
    ade0:	80 40       	sbci	r24, 0x00	; 0
    ade2:	90 48       	sbci	r25, 0x80	; 128
    ade4:	68 83       	st	Y, r22
    ade6:	79 83       	std	Y+1, r23	; 0x01
    ade8:	8a 83       	std	Y+2, r24	; 0x02
    adea:	9b 83       	std	Y+3, r25	; 0x03
    adec:	7f 77       	andi	r23, 0x7F	; 127
    adee:	cb 01       	movw	r24, r22
    adf0:	df 91       	pop	r29
    adf2:	cf 91       	pop	r28
    adf4:	1f 91       	pop	r17
    adf6:	0f 91       	pop	r16
    adf8:	ff 90       	pop	r15
    adfa:	ef 90       	pop	r14
    adfc:	df 90       	pop	r13
    adfe:	cf 90       	pop	r12
    ae00:	bf 90       	pop	r11
    ae02:	af 90       	pop	r10
    ae04:	08 95       	ret

0000ae06 <rand_r>:
    ae06:	0e 94 b8 56 	call	0xad70	; 0xad70 <do_rand>
    ae0a:	08 95       	ret

0000ae0c <rand>:
    ae0c:	8a e2       	ldi	r24, 0x2A	; 42
    ae0e:	92 e0       	ldi	r25, 0x02	; 2
    ae10:	0e 94 b8 56 	call	0xad70	; 0xad70 <do_rand>
    ae14:	08 95       	ret

0000ae16 <srand>:
    ae16:	a0 e0       	ldi	r26, 0x00	; 0
    ae18:	b0 e0       	ldi	r27, 0x00	; 0
    ae1a:	80 93 2a 02 	sts	0x022A, r24
    ae1e:	90 93 2b 02 	sts	0x022B, r25
    ae22:	a0 93 2c 02 	sts	0x022C, r26
    ae26:	b0 93 2d 02 	sts	0x022D, r27
    ae2a:	08 95       	ret

0000ae2c <memset>:
    ae2c:	dc 01       	movw	r26, r24
    ae2e:	01 c0       	rjmp	.+2      	; 0xae32 <memset+0x6>
    ae30:	6d 93       	st	X+, r22
    ae32:	41 50       	subi	r20, 0x01	; 1
    ae34:	50 40       	sbci	r21, 0x00	; 0
    ae36:	e0 f7       	brcc	.-8      	; 0xae30 <memset+0x4>
    ae38:	08 95       	ret

0000ae3a <__eerd_block_m2560>:
    ae3a:	dc 01       	movw	r26, r24
    ae3c:	cb 01       	movw	r24, r22

0000ae3e <__eerd_blraw_m2560>:
    ae3e:	fc 01       	movw	r30, r24
    ae40:	f9 99       	sbic	0x1f, 1	; 31
    ae42:	fe cf       	rjmp	.-4      	; 0xae40 <__eerd_blraw_m2560+0x2>
    ae44:	06 c0       	rjmp	.+12     	; 0xae52 <__eerd_blraw_m2560+0x14>
    ae46:	f2 bd       	out	0x22, r31	; 34
    ae48:	e1 bd       	out	0x21, r30	; 33
    ae4a:	f8 9a       	sbi	0x1f, 0	; 31
    ae4c:	31 96       	adiw	r30, 0x01	; 1
    ae4e:	00 b4       	in	r0, 0x20	; 32
    ae50:	0d 92       	st	X+, r0
    ae52:	41 50       	subi	r20, 0x01	; 1
    ae54:	50 40       	sbci	r21, 0x00	; 0
    ae56:	b8 f7       	brcc	.-18     	; 0xae46 <__eerd_blraw_m2560+0x8>
    ae58:	08 95       	ret

0000ae5a <__eerd_byte_m2560>:
    ae5a:	f9 99       	sbic	0x1f, 1	; 31
    ae5c:	fe cf       	rjmp	.-4      	; 0xae5a <__eerd_byte_m2560>
    ae5e:	92 bd       	out	0x22, r25	; 34
    ae60:	81 bd       	out	0x21, r24	; 33
    ae62:	f8 9a       	sbi	0x1f, 0	; 31
    ae64:	99 27       	eor	r25, r25
    ae66:	80 b5       	in	r24, 0x20	; 32
    ae68:	08 95       	ret

0000ae6a <__eerd_word_m2560>:
    ae6a:	a8 e1       	ldi	r26, 0x18	; 24
    ae6c:	b0 e0       	ldi	r27, 0x00	; 0
    ae6e:	42 e0       	ldi	r20, 0x02	; 2
    ae70:	50 e0       	ldi	r21, 0x00	; 0
    ae72:	0c 94 1f 57 	jmp	0xae3e	; 0xae3e <__eerd_blraw_m2560>

0000ae76 <__eeupd_block_m2560>:
    ae76:	dc 01       	movw	r26, r24
    ae78:	a4 0f       	add	r26, r20
    ae7a:	b5 1f       	adc	r27, r21
    ae7c:	41 50       	subi	r20, 0x01	; 1
    ae7e:	50 40       	sbci	r21, 0x00	; 0
    ae80:	48 f0       	brcs	.+18     	; 0xae94 <__eeupd_block_m2560+0x1e>
    ae82:	cb 01       	movw	r24, r22
    ae84:	84 0f       	add	r24, r20
    ae86:	95 1f       	adc	r25, r21
    ae88:	2e 91       	ld	r18, -X
    ae8a:	0e 94 4c 57 	call	0xae98	; 0xae98 <__eeupd_r18_m2560>
    ae8e:	41 50       	subi	r20, 0x01	; 1
    ae90:	50 40       	sbci	r21, 0x00	; 0
    ae92:	d0 f7       	brcc	.-12     	; 0xae88 <__eeupd_block_m2560+0x12>
    ae94:	08 95       	ret

0000ae96 <__eeupd_byte_m2560>:
    ae96:	26 2f       	mov	r18, r22

0000ae98 <__eeupd_r18_m2560>:
    ae98:	f9 99       	sbic	0x1f, 1	; 31
    ae9a:	fe cf       	rjmp	.-4      	; 0xae98 <__eeupd_r18_m2560>
    ae9c:	92 bd       	out	0x22, r25	; 34
    ae9e:	81 bd       	out	0x21, r24	; 33
    aea0:	f8 9a       	sbi	0x1f, 0	; 31
    aea2:	01 97       	sbiw	r24, 0x01	; 1
    aea4:	00 b4       	in	r0, 0x20	; 32
    aea6:	02 16       	cp	r0, r18
    aea8:	39 f0       	breq	.+14     	; 0xaeb8 <__eeupd_r18_m2560+0x20>
    aeaa:	1f ba       	out	0x1f, r1	; 31
    aeac:	20 bd       	out	0x20, r18	; 32
    aeae:	0f b6       	in	r0, 0x3f	; 63
    aeb0:	f8 94       	cli
    aeb2:	fa 9a       	sbi	0x1f, 2	; 31
    aeb4:	f9 9a       	sbi	0x1f, 1	; 31
    aeb6:	0f be       	out	0x3f, r0	; 63
    aeb8:	08 95       	ret

0000aeba <__eeupd_word_m2560>:
    aeba:	01 96       	adiw	r24, 0x01	; 1
    aebc:	27 2f       	mov	r18, r23
    aebe:	0e 94 4c 57 	call	0xae98	; 0xae98 <__eeupd_r18_m2560>
    aec2:	0c 94 4b 57 	jmp	0xae96	; 0xae96 <__eeupd_byte_m2560>

0000aec6 <__eewr_byte_m2560>:
    aec6:	26 2f       	mov	r18, r22

0000aec8 <__eewr_r18_m2560>:
    aec8:	f9 99       	sbic	0x1f, 1	; 31
    aeca:	fe cf       	rjmp	.-4      	; 0xaec8 <__eewr_r18_m2560>
    aecc:	1f ba       	out	0x1f, r1	; 31
    aece:	92 bd       	out	0x22, r25	; 34
    aed0:	81 bd       	out	0x21, r24	; 33
    aed2:	20 bd       	out	0x20, r18	; 32
    aed4:	0f b6       	in	r0, 0x3f	; 63
    aed6:	f8 94       	cli
    aed8:	fa 9a       	sbi	0x1f, 2	; 31
    aeda:	f9 9a       	sbi	0x1f, 1	; 31
    aedc:	0f be       	out	0x3f, r0	; 63
    aede:	01 96       	adiw	r24, 0x01	; 1
    aee0:	08 95       	ret

0000aee2 <__eewr_word_m2560>:
    aee2:	0e 94 63 57 	call	0xaec6	; 0xaec6 <__eewr_byte_m2560>
    aee6:	27 2f       	mov	r18, r23
    aee8:	0c 94 64 57 	jmp	0xaec8	; 0xaec8 <__eewr_r18_m2560>

0000aeec <_exit>:
    aeec:	ff cf       	rjmp	.-2      	; 0xaeec <_exit>
