
Elisa3-avr-studio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800200  0000a56a  0000a5fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000a56a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000944  0080021e  0080021e  0000a61c  2**0
                  ALLOC
  3 .stab         00003780  00000000  00000000  0000a61c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f1b  00000000  00000000  0000dd9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000238  00000000  00000000  0000ecb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000025f6  00000000  00000000  0000eeef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000064f7  00000000  00000000  000114e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001278  00000000  00000000  000179dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00007d9c  00000000  00000000  00018c54  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000900  00000000  00000000  000209f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001d01  00000000  00000000  000212f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002668  00000000  00000000  00022ff1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000296  00000000  00000000  00025659  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000128  00000000  00000000  000258ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__ctors_end>
       4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
       8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
       c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      10:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      14:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      18:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      1c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      20:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      24:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      28:	0c 94 4e 12 	jmp	0x249c	; 0x249c <__vector_10>
      2c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      30:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      34:	0c 94 82 12 	jmp	0x2504	; 0x2504 <__vector_13>
      38:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      3c:	0c 94 3a 1e 	jmp	0x3c74	; 0x3c74 <__vector_15>
      40:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      44:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      48:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      4c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      50:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      54:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      58:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      5c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      60:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      64:	0c 94 fe 1c 	jmp	0x39fc	; 0x39fc <__vector_25>
      68:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      6c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      70:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      74:	0c 94 0c 1f 	jmp	0x3e18	; 0x3e18 <__vector_29>
      78:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      7c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      80:	0c 94 2b 38 	jmp	0x7056	; 0x7056 <__vector_32>
      84:	0c 94 41 38 	jmp	0x7082	; 0x7082 <__vector_33>
      88:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      8c:	0c 94 9e 37 	jmp	0x6f3c	; 0x6f3c <__vector_35>
      90:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      94:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      98:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      9c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      a0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      a4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      a8:	0c 94 72 37 	jmp	0x6ee4	; 0x6ee4 <__vector_42>
      ac:	0c 94 88 37 	jmp	0x6f10	; 0x6f10 <__vector_43>
      b0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      b4:	0c 94 db 36 	jmp	0x6db6	; 0x6db6 <__vector_45>
      b8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      bc:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      c0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      c4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      c8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      cc:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      d0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      d4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      d8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      dc:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      e0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      e4:	5f 15       	cp	r21, r15
      e6:	43 15       	cp	r20, r3
      e8:	11 15       	cp	r17, r1
      ea:	fc 14       	cp	r15, r12
      ec:	d3 14       	cp	r13, r3
      ee:	c1 14       	cp	r12, r1
      f0:	98 14       	cp	r9, r8
      f2:	7c 14       	cp	r7, r12
      f4:	43 14       	cp	r4, r3
      f6:	2b 14       	cp	r2, r11
      f8:	c4 13       	cpse	r28, r20
      fa:	c4 13       	cpse	r28, r20
      fc:	c4 13       	cpse	r28, r20
      fe:	c4 13       	cpse	r28, r20
     100:	c4 13       	cpse	r28, r20
     102:	c4 13       	cpse	r28, r20
     104:	70 14       	cp	r7, r0
     106:	20 14       	cp	r2, r0
     108:	c4 13       	cpse	r28, r20
     10a:	c4 13       	cpse	r28, r20
     10c:	c4 13       	cpse	r28, r20
     10e:	c4 13       	cpse	r28, r20
     110:	c4 13       	cpse	r28, r20
     112:	c4 13       	cpse	r28, r20
     114:	c4 13       	cpse	r28, r20
     116:	c4 13       	cpse	r28, r20
     118:	c4 13       	cpse	r28, r20
     11a:	c4 13       	cpse	r28, r20
     11c:	c4 13       	cpse	r28, r20
     11e:	c4 13       	cpse	r28, r20
     120:	43 14       	cp	r4, r3
     122:	11 15       	cp	r17, r1
     124:	f8 13       	cpse	r31, r24
     126:	eb 13       	cpse	r30, r27
     128:	c4 13       	cpse	r28, r20
     12a:	c4 13       	cpse	r28, r20
     12c:	c4 13       	cpse	r28, r20
     12e:	c4 13       	cpse	r28, r20
     130:	c4 13       	cpse	r28, r20
     132:	c4 13       	cpse	r28, r20
     134:	c4 13       	cpse	r28, r20
     136:	c4 13       	cpse	r28, r20
     138:	c4 13       	cpse	r28, r20
     13a:	c4 13       	cpse	r28, r20
     13c:	c4 13       	cpse	r28, r20
     13e:	c4 13       	cpse	r28, r20
     140:	d3 14       	cp	r13, r3
     142:	98 14       	cp	r9, r8
     144:	c4 13       	cpse	r28, r20
     146:	c4 13       	cpse	r28, r20
     148:	5f 15       	cp	r21, r15
     14a:	c1 14       	cp	r12, r1
     14c:	04 14       	cp	r0, r4
     14e:	08 4a       	sbci	r16, 0xA8	; 168
     150:	d7 3b       	cpi	r29, 0xB7	; 183
     152:	3b ce       	rjmp	.-906    	; 0xfffffdca <__eeprom_end+0xff7efdca>
     154:	01 6e       	ori	r16, 0xE1	; 225
     156:	84 bc       	out	0x24, r8	; 36
     158:	bf fd       	.word	0xfdbf	; ????
     15a:	c1 2f       	mov	r28, r17
     15c:	3d 6c       	ori	r19, 0xCD	; 205
     15e:	74 31       	cpi	r23, 0x14	; 20
     160:	9a bd       	out	0x2a, r25	; 42
     162:	56 83       	std	Z+6, r21	; 0x06
     164:	3d da       	rcall	.-2950   	; 0xfffff5e0 <__eeprom_end+0xff7ef5e0>
     166:	3d 00       	.word	0x003d	; ????
     168:	c7 7f       	andi	r28, 0xF7	; 247
     16a:	11 be       	out	0x31, r1	; 49
     16c:	d9 e4       	ldi	r29, 0x49	; 73
     16e:	bb 4c       	sbci	r27, 0xCB	; 203
     170:	3e 91       	ld	r19, -X
     172:	6b aa       	std	Y+51, r6	; 0x33
     174:	aa be       	out	0x3a, r10	; 58
     176:	00 00       	nop
     178:	00 80       	ld	r0, Z
     17a:	3f 05       	cpc	r19, r15
     17c:	a8 4c       	sbci	r26, 0xC8	; 200
     17e:	cd b2       	in	r12, 0x1d	; 29
     180:	d4 4e       	sbci	r29, 0xE4	; 228
     182:	b9 38       	cpi	r27, 0x89	; 137
     184:	36 a9       	ldd	r19, Z+54	; 0x36
     186:	02 0c       	add	r0, r2
     188:	50 b9       	out	0x00, r21	; 0
     18a:	91 86       	std	Z+9, r9	; 0x09
     18c:	88 08       	sbc	r8, r8
     18e:	3c a6       	std	Y+44, r3	; 0x2c
     190:	aa aa       	std	Y+50, r10	; 0x32
     192:	2a be       	out	0x3a, r2	; 58
     194:	00 00       	nop
     196:	00 80       	ld	r0, Z
     198:	3f 00       	.word	0x003f	; ????

0000019a <__ctors_end>:
     19a:	11 24       	eor	r1, r1
     19c:	1f be       	out	0x3f, r1	; 63
     19e:	cf ef       	ldi	r28, 0xFF	; 255
     1a0:	d1 e2       	ldi	r29, 0x21	; 33
     1a2:	de bf       	out	0x3e, r29	; 62
     1a4:	cd bf       	out	0x3d, r28	; 61
     1a6:	00 e0       	ldi	r16, 0x00	; 0
     1a8:	0c bf       	out	0x3c, r16	; 60

000001aa <__do_copy_data>:
     1aa:	12 e0       	ldi	r17, 0x02	; 2
     1ac:	a0 e0       	ldi	r26, 0x00	; 0
     1ae:	b2 e0       	ldi	r27, 0x02	; 2
     1b0:	ea e6       	ldi	r30, 0x6A	; 106
     1b2:	f5 ea       	ldi	r31, 0xA5	; 165
     1b4:	02 c0       	rjmp	.+4      	; 0x1ba <.do_copy_data_start>

000001b6 <.do_copy_data_loop>:
     1b6:	05 90       	lpm	r0, Z+
     1b8:	0d 92       	st	X+, r0

000001ba <.do_copy_data_start>:
     1ba:	ae 31       	cpi	r26, 0x1E	; 30
     1bc:	b1 07       	cpc	r27, r17
     1be:	d9 f7       	brne	.-10     	; 0x1b6 <.do_copy_data_loop>

000001c0 <__do_clear_bss>:
     1c0:	1b e0       	ldi	r17, 0x0B	; 11
     1c2:	ae e1       	ldi	r26, 0x1E	; 30
     1c4:	b2 e0       	ldi	r27, 0x02	; 2
     1c6:	01 c0       	rjmp	.+2      	; 0x1ca <.do_clear_bss_start>

000001c8 <.do_clear_bss_loop>:
     1c8:	1d 92       	st	X+, r1

000001ca <.do_clear_bss_start>:
     1ca:	a2 36       	cpi	r26, 0x62	; 98
     1cc:	b1 07       	cpc	r27, r17
     1ce:	e1 f7       	brne	.-8      	; 0x1c8 <.do_clear_bss_loop>
     1d0:	0e 94 ee 00 	call	0x1dc	; 0x1dc <main>
     1d4:	0c 94 b4 52 	jmp	0xa568	; 0xa568 <_exit>

000001d8 <__bad_interrupt>:
     1d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001dc <main>:
#include "nRF24L01.h"
#include "behaviors.h"
#include "sensors.h"
#include "irCommunication.h"

int main(void) {
     1dc:	2f 92       	push	r2
     1de:	3f 92       	push	r3
     1e0:	4f 92       	push	r4
     1e2:	5f 92       	push	r5
     1e4:	6f 92       	push	r6
     1e6:	7f 92       	push	r7
     1e8:	8f 92       	push	r8
     1ea:	9f 92       	push	r9
     1ec:	af 92       	push	r10
     1ee:	bf 92       	push	r11
     1f0:	cf 92       	push	r12
     1f2:	df 92       	push	r13
     1f4:	ef 92       	push	r14
     1f6:	ff 92       	push	r15
     1f8:	0f 93       	push	r16
     1fa:	1f 93       	push	r17
     1fc:	df 93       	push	r29
     1fe:	cf 93       	push	r28
     200:	00 d0       	rcall	.+0      	; 0x202 <main+0x26>
     202:	0f 92       	push	r0
     204:	cd b7       	in	r28, 0x3d	; 61
     206:	de b7       	in	r29, 0x3e	; 62
	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
	unsigned char prevSelector=0;
	unsigned int i=0;
	unsigned int currRand=0, currRand2=0;

	initPeripherals();
     208:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <initPeripherals>

	calibrateSensors();
     20c:	0e 94 dd 3d 	call	0x7bba	; 0x7bba <calibrateSensors>

	initBehaviors();
     210:	0e 94 57 38 	call	0x70ae	; 0x70ae <initBehaviors>

	startTime = getTime100MicroSec();
     214:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <getTime100MicroSec>
     218:	6b 01       	movw	r12, r22
     21a:	7c 01       	movw	r14, r24

	speedStepCounter = getTime100MicroSec();
     21c:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <getTime100MicroSec>
     220:	9b 01       	movw	r18, r22
     222:	ac 01       	movw	r20, r24
     224:	60 93 60 04 	sts	0x0460, r22
     228:	30 93 61 04 	sts	0x0461, r19
     22c:	40 93 62 04 	sts	0x0462, r20
     230:	50 93 63 04 	sts	0x0463, r21
     234:	10 92 64 04 	sts	0x0464, r1
     238:	10 92 65 04 	sts	0x0465, r1
     23c:	10 92 66 04 	sts	0x0466, r1
     240:	10 92 67 04 	sts	0x0467, r1
int main(void) {

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
	unsigned char prevSelector=0;
	unsigned int i=0;
	unsigned int currRand=0, currRand2=0;
     244:	aa 24       	eor	r10, r10
     246:	bb 24       	eor	r11, r11
#include "irCommunication.h"

int main(void) {

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
	unsigned char prevSelector=0;
     248:	00 e0       	ldi	r16, 0x00	; 0
#include "sensors.h"
#include "irCommunication.h"

int main(void) {

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
     24a:	19 82       	std	Y+1, r1	; 0x01
     24c:	1a 82       	std	Y+2, r1	; 0x02
     24e:	1b 82       	std	Y+3, r1	; 0x03
     250:	1c 82       	std	Y+4, r1	; 0x04
		computeAngle();

		// turn off the rgb leds after one half second in the "charger demo"
		if(currentSelector==7) {
			if((getTime100MicroSec()-turnOffLedsTime) > PAUSE_500_MSEC) {
				pwm_red = 255;
     252:	1f ef       	ldi	r17, 0xFF	; 255
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption

				switch(rgbState) {
					case 0:
						pwm_red = 255 - currRand;	
						rgbState = 1;
     254:	22 24       	eor	r2, r2
     256:	23 94       	inc	r2
	eeprom_update_block(calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
*/

	while(1) {

		currentSelector = getSelector();	// update selector position
     258:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <getSelector>
     25c:	80 93 4c 04 	sts	0x044C, r24

		readAccelXYZ();						// update accelerometer values to compute the angle
     260:	0e 94 1d 3d 	call	0x7a3a	; 0x7a3a <readAccelXYZ>

		computeAngle();
     264:	0e 94 59 42 	call	0x84b2	; 0x84b2 <computeAngle>

		// turn off the rgb leds after one half second in the "charger demo"
		if(currentSelector==7) {
     268:	80 91 4c 04 	lds	r24, 0x044C
     26c:	87 30       	cpi	r24, 0x07	; 7
     26e:	09 f4       	brne	.+2      	; 0x272 <main+0x96>
     270:	59 c2       	rjmp	.+1202   	; 0x724 <main+0x548>
				pwm_green = 255;
				pwm_blue = 255;			
			}
		}

		endTime = getTime100MicroSec();
     272:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <getTime100MicroSec>
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
     276:	6c 19       	sub	r22, r12
     278:	7d 09       	sbc	r23, r13
     27a:	8e 09       	sbc	r24, r14
     27c:	9f 09       	sbc	r25, r15
     27e:	6e 31       	cpi	r22, 0x1E	; 30
     280:	4b e4       	ldi	r20, 0x4B	; 75
     282:	74 07       	cpc	r23, r20
     284:	40 e0       	ldi	r20, 0x00	; 0
     286:	84 07       	cpc	r24, r20
     288:	40 e0       	ldi	r20, 0x00	; 0
     28a:	94 07       	cpc	r25, r20
     28c:	08 f0       	brcs	.+2      	; 0x290 <main+0xb4>
     28e:	36 c2       	rjmp	.+1132   	; 0x6fc <main+0x520>
			startTime = getTime100MicroSec();
		}

		
		//if(calibrateOdomFlag==0) {
			handleIRRemoteCommands();
     290:	0e 94 b2 13 	call	0x2764	; 0x2764 <handleIRRemoteCommands>
		//}


		//if(calibrateOdomFlag==0) {
			handleRFCommands();
     294:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <handleRFCommands>
		//}


		if(calibrateOdomFlag==0) {
     298:	80 91 4f 05 	lds	r24, 0x054F
     29c:	88 23       	and	r24, r24
     29e:	09 f4       	brne	.+2      	; 0x2a2 <main+0xc6>
     2a0:	fd c0       	rjmp	.+506    	; 0x49c <main+0x2c0>

		//if(currentSelector!=6 && currentSelector!=15) {
		//	usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		//}

		switch(currentSelector) {
     2a2:	80 91 4c 04 	lds	r24, 0x044C
     2a6:	87 30       	cpi	r24, 0x07	; 7
     2a8:	09 f4       	brne	.+2      	; 0x2ac <main+0xd0>
     2aa:	e8 c1       	rjmp	.+976    	; 0x67c <main+0x4a0>
     2ac:	88 30       	cpi	r24, 0x08	; 8
     2ae:	08 f0       	brcs	.+2      	; 0x2b2 <main+0xd6>
     2b0:	61 c0       	rjmp	.+194    	; 0x374 <main+0x198>
     2b2:	83 30       	cpi	r24, 0x03	; 3
     2b4:	09 f4       	brne	.+2      	; 0x2b8 <main+0xdc>
     2b6:	96 c2       	rjmp	.+1324   	; 0x7e4 <main+0x608>
     2b8:	84 30       	cpi	r24, 0x04	; 4
     2ba:	08 f0       	brcs	.+2      	; 0x2be <main+0xe2>
     2bc:	4d c2       	rjmp	.+1178   	; 0x758 <main+0x57c>
     2be:	81 30       	cpi	r24, 0x01	; 1
     2c0:	09 f4       	brne	.+2      	; 0x2c4 <main+0xe8>
     2c2:	ec c2       	rjmp	.+1496   	; 0x89c <main+0x6c0>
     2c4:	82 30       	cpi	r24, 0x02	; 2
     2c6:	08 f0       	brcs	.+2      	; 0x2ca <main+0xee>
     2c8:	8f c2       	rjmp	.+1310   	; 0x7e8 <main+0x60c>
    
			case 0:	// motors in direct power control (no speed control)
					handleMotorsWithNoController();
     2ca:	0e 94 7f 25 	call	0x4afe	; 0x4afe <handleMotorsWithNoController>
     2ce:	80 91 4c 04 	lds	r24, 0x044C
					//usart0Transmit(currentOsccal,1);
					break;

		}

		if(currentSelector!=0) {
     2d2:	88 23       	and	r24, r24
     2d4:	09 f0       	breq	.+2      	; 0x2d8 <main+0xfc>
     2d6:	dd c0       	rjmp	.+442    	; 0x492 <main+0x2b6>
     2d8:	80 e0       	ldi	r24, 0x00	; 0
			handleMotorsWithSpeedController();  
		}

		if(prevSelector != currentSelector) {	// in case the selector is changed, reset the robot state
     2da:	08 17       	cp	r16, r24
     2dc:	09 f4       	brne	.+2      	; 0x2e0 <main+0x104>
     2de:	bc cf       	rjmp	.-136    	; 0x258 <main+0x7c>
			disableObstacleAvoidance();
     2e0:	0e 94 9e 3a 	call	0x753c	; 0x753c <disableObstacleAvoidance>
			disableCliffAvoidance();
     2e4:	0e 94 a5 3a 	call	0x754a	; 0x754a <disableCliffAvoidance>
			GREEN_LED0_OFF;
     2e8:	80 91 0b 01 	lds	r24, 0x010B
     2ec:	81 60       	ori	r24, 0x01	; 1
     2ee:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED1_OFF;
     2f2:	80 91 0b 01 	lds	r24, 0x010B
     2f6:	82 60       	ori	r24, 0x02	; 2
     2f8:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED2_OFF;
     2fc:	80 91 0b 01 	lds	r24, 0x010B
     300:	84 60       	ori	r24, 0x04	; 4
     302:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED3_OFF;
     306:	a3 9a       	sbi	0x14, 3	; 20
			GREEN_LED4_OFF;
     308:	80 91 0b 01 	lds	r24, 0x010B
     30c:	80 61       	ori	r24, 0x10	; 16
     30e:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED5_OFF;
     312:	80 91 0b 01 	lds	r24, 0x010B
     316:	80 62       	ori	r24, 0x20	; 32
     318:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED6_OFF;
     31c:	80 91 0b 01 	lds	r24, 0x010B
     320:	80 64       	ori	r24, 0x40	; 64
     322:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED7_OFF;
     326:	80 91 0b 01 	lds	r24, 0x010B
     32a:	80 68       	ori	r24, 0x80	; 128
     32c:	80 93 0b 01 	sts	0x010B, r24
			pwm_red = 255;
     330:	10 93 0c 02 	sts	0x020C, r17
			pwm_green = 255;
     334:	10 93 0d 02 	sts	0x020D, r17
			pwm_blue = 255;
     338:	10 93 0e 02 	sts	0x020E, r17
			updateRedLed(pwm_red);
     33c:	8f ef       	ldi	r24, 0xFF	; 255
     33e:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <updateRedLed>
			updateGreenLed(pwm_green);
     342:	80 91 0d 02 	lds	r24, 0x020D
     346:	0e 94 f9 3a 	call	0x75f2	; 0x75f2 <updateGreenLed>
			updateBlueLed(pwm_blue);
     34a:	80 91 0e 02 	lds	r24, 0x020E
     34e:	0e 94 0d 3b 	call	0x761a	; 0x761a <updateBlueLed>
			setRightSpeed(0);
     352:	80 e0       	ldi	r24, 0x00	; 0
     354:	0e 94 cc 26 	call	0x4d98	; 0x4d98 <setRightSpeed>
			setLeftSpeed(0);
     358:	80 e0       	ldi	r24, 0x00	; 0
     35a:	0e 94 af 26 	call	0x4d5e	; 0x4d5e <setLeftSpeed>
			rgbState = 0;
     35e:	10 92 1c 03 	sts	0x031C, r1
			calibrationWritten = 0;
     362:	10 92 69 04 	sts	0x0469, r1
			demoState = 0;
     366:	10 92 50 04 	sts	0x0450, r1

			irCommState = 0;
     36a:	10 92 c7 04 	sts	0x04C7, r1
     36e:	00 91 4c 04 	lds	r16, 0x044C
     372:	72 cf       	rjmp	.-284    	; 0x258 <main+0x7c>

		//if(currentSelector!=6 && currentSelector!=15) {
		//	usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		//}

		switch(currentSelector) {
     374:	8b 30       	cpi	r24, 0x0B	; 11
     376:	09 f4       	brne	.+2      	; 0x37a <main+0x19e>
     378:	3c c2       	rjmp	.+1144   	; 0x7f2 <main+0x616>
     37a:	8c 30       	cpi	r24, 0x0C	; 12
     37c:	08 f0       	brcs	.+2      	; 0x380 <main+0x1a4>
     37e:	18 c2       	rjmp	.+1072   	; 0x7b0 <main+0x5d4>
     380:	89 30       	cpi	r24, 0x09	; 9
     382:	09 f4       	brne	.+2      	; 0x386 <main+0x1aa>
     384:	74 c2       	rjmp	.+1256   	; 0x86e <main+0x692>
     386:	8a 30       	cpi	r24, 0x0A	; 10
     388:	08 f4       	brcc	.+2      	; 0x38c <main+0x1b0>
     38a:	65 c2       	rjmp	.+1226   	; 0x856 <main+0x67a>
							break;
					}
					break;

			case 10:// obstacle avoidance with random colors; 4 seconds motion and 10 seconds pause					
					switch(demoState) {
     38c:	80 91 50 04 	lds	r24, 0x0450
     390:	81 30       	cpi	r24, 0x01	; 1
     392:	09 f4       	brne	.+2      	; 0x396 <main+0x1ba>
     394:	dc c4       	rjmp	.+2488   	; 0xd4e <main+0xb72>
     396:	81 30       	cpi	r24, 0x01	; 1
     398:	08 f0       	brcs	.+2      	; 0x39c <main+0x1c0>
     39a:	49 c4       	rjmp	.+2194   	; 0xc2e <main+0xa52>
						case 0: // get first clock tick and start moving the robot with obstacle avoidance enabled
							demoStartTime = getTime100MicroSec();
     39c:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <getTime100MicroSec>
     3a0:	60 93 54 04 	sts	0x0454, r22
     3a4:	70 93 55 04 	sts	0x0455, r23
     3a8:	80 93 56 04 	sts	0x0456, r24
     3ac:	90 93 57 04 	sts	0x0457, r25
							demoEndTime = getTime100MicroSec();							
     3b0:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <getTime100MicroSec>
     3b4:	60 93 5c 04 	sts	0x045C, r22
     3b8:	70 93 5d 04 	sts	0x045D, r23
     3bc:	80 93 5e 04 	sts	0x045E, r24
     3c0:	90 93 5f 04 	sts	0x045F, r25
							demoStartTime2 = getTime100MicroSec();
     3c4:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <getTime100MicroSec>
     3c8:	60 93 58 04 	sts	0x0458, r22
     3cc:	70 93 59 04 	sts	0x0459, r23
     3d0:	80 93 5a 04 	sts	0x045A, r24
     3d4:	90 93 5b 04 	sts	0x045B, r25
							enableObstacleAvoidance();
     3d8:	0e 94 9a 3a 	call	0x7534	; 0x7534 <enableObstacleAvoidance>
							setLeftSpeed(20);
     3dc:	84 e1       	ldi	r24, 0x14	; 20
     3de:	0e 94 af 26 	call	0x4d5e	; 0x4d5e <setLeftSpeed>
							setRightSpeed(20);
     3e2:	84 e1       	ldi	r24, 0x14	; 20
     3e4:	0e 94 cc 26 	call	0x4d98	; 0x4d98 <setRightSpeed>
							demoState = 1;
     3e8:	20 92 50 04 	sts	0x0450, r2
								demoState = 1;							
							}
							break;
					}	
					
					switch(rgbLedState) {
     3ec:	80 91 6b 04 	lds	r24, 0x046B
     3f0:	81 30       	cpi	r24, 0x01	; 1
     3f2:	09 f4       	brne	.+2      	; 0x3f6 <main+0x21a>
     3f4:	4f c4       	rjmp	.+2206   	; 0xc94 <main+0xab8>
     3f6:	81 30       	cpi	r24, 0x01	; 1
     3f8:	08 f0       	brcs	.+2      	; 0x3fc <main+0x220>
     3fa:	de c3       	rjmp	.+1980   	; 0xbb8 <main+0x9dc>
						case 0:							
							pwm_red = 255;
     3fc:	10 93 0c 02 	sts	0x020C, r17
							pwm_green = 255;
     400:	10 93 0d 02 	sts	0x020D, r17
							pwm_blue = 255;
     404:	10 93 0e 02 	sts	0x020E, r17
							if((getTime100MicroSec()-demoEndTime) >= (PAUSE_100_MSEC)) {
     408:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <getTime100MicroSec>
     40c:	9b 01       	movw	r18, r22
     40e:	ac 01       	movw	r20, r24
     410:	80 91 5c 04 	lds	r24, 0x045C
     414:	90 91 5d 04 	lds	r25, 0x045D
     418:	a0 91 5e 04 	lds	r26, 0x045E
     41c:	b0 91 5f 04 	lds	r27, 0x045F
     420:	28 1b       	sub	r18, r24
     422:	39 0b       	sbc	r19, r25
     424:	4a 0b       	sbc	r20, r26
     426:	5b 0b       	sbc	r21, r27
     428:	21 3c       	cpi	r18, 0xC1	; 193
     42a:	e3 e0       	ldi	r30, 0x03	; 3
     42c:	3e 07       	cpc	r19, r30
     42e:	e0 e0       	ldi	r30, 0x00	; 0
     430:	4e 07       	cpc	r20, r30
     432:	e0 e0       	ldi	r30, 0x00	; 0
     434:	5e 07       	cpc	r21, r30
     436:	10 f0       	brcs	.+4      	; 0x43c <main+0x260>
     438:	0c 94 33 0b 	jmp	0x1666	; 0x1666 <main+0x148a>
									greenLedState = 0;
								}
								setGreenLed(greenLedState, 1);
								demoEndTime = getTime100MicroSec();											
							}
							if((getTime100MicroSec()-demoStartTime2) >= (PAUSE_2_SEC)) {
     43c:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <getTime100MicroSec>
     440:	9b 01       	movw	r18, r22
     442:	ac 01       	movw	r20, r24
     444:	80 91 58 04 	lds	r24, 0x0458
     448:	90 91 59 04 	lds	r25, 0x0459
     44c:	a0 91 5a 04 	lds	r26, 0x045A
     450:	b0 91 5b 04 	lds	r27, 0x045B
     454:	28 1b       	sub	r18, r24
     456:	39 0b       	sbc	r19, r25
     458:	4a 0b       	sbc	r20, r26
     45a:	5b 0b       	sbc	r21, r27
     45c:	2e 31       	cpi	r18, 0x1E	; 30
     45e:	fb e4       	ldi	r31, 0x4B	; 75
     460:	3f 07       	cpc	r19, r31
     462:	f0 e0       	ldi	r31, 0x00	; 0
     464:	4f 07       	cpc	r20, r31
     466:	f0 e0       	ldi	r31, 0x00	; 0
     468:	5f 07       	cpc	r21, r31
     46a:	10 f0       	brcs	.+4      	; 0x470 <main+0x294>
     46c:	0c 94 25 0b 	jmp	0x164a	; 0x164a <main+0x146e>
								rgbLedState = 1;
								demoStartTime2 = getTime100MicroSec();
							}
							updateRedLed(pwm_red);
     470:	80 91 0c 02 	lds	r24, 0x020C
     474:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <updateRedLed>
							updateGreenLed(pwm_green);
     478:	80 91 0d 02 	lds	r24, 0x020D
     47c:	0e 94 f9 3a 	call	0x75f2	; 0x75f2 <updateGreenLed>
							updateBlueLed(pwm_blue);
     480:	80 91 0e 02 	lds	r24, 0x020E
     484:	0e 94 0d 3b 	call	0x761a	; 0x761a <updateBlueLed>
     488:	80 91 4c 04 	lds	r24, 0x044C
					//usart0Transmit(currentOsccal,1);
					break;

		}

		if(currentSelector!=0) {
     48c:	88 23       	and	r24, r24
     48e:	09 f4       	brne	.+2      	; 0x492 <main+0x2b6>
     490:	23 cf       	rjmp	.-442    	; 0x2d8 <main+0xfc>
			handleMotorsWithSpeedController();  
     492:	0e 94 29 32 	call	0x6452	; 0x6452 <handleMotorsWithSpeedController>
     496:	80 91 4c 04 	lds	r24, 0x044C
     49a:	1f cf       	rjmp	.-450    	; 0x2da <main+0xfe>
			handleRFCommands();
		//}


		if(calibrateOdomFlag==0) {
			if((getTime100MicroSec()-speedStepCounter) >= SPEED_STEP_DELAY) {
     49c:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <getTime100MicroSec>
     4a0:	9b 01       	movw	r18, r22
     4a2:	ac 01       	movw	r20, r24
     4a4:	60 e0       	ldi	r22, 0x00	; 0
     4a6:	70 e0       	ldi	r23, 0x00	; 0
     4a8:	cb 01       	movw	r24, r22
     4aa:	f0 91 60 04 	lds	r31, 0x0460
     4ae:	e0 91 61 04 	lds	r30, 0x0461
     4b2:	80 90 62 04 	lds	r8, 0x0462
     4b6:	40 90 63 04 	lds	r4, 0x0463
     4ba:	30 90 64 04 	lds	r3, 0x0464
     4be:	50 90 65 04 	lds	r5, 0x0465
     4c2:	60 90 66 04 	lds	r6, 0x0466
     4c6:	70 90 67 04 	lds	r7, 0x0467
     4ca:	b2 2f       	mov	r27, r18
     4cc:	bf 1b       	sub	r27, r31
     4ce:	a1 e0       	ldi	r26, 0x01	; 1
     4d0:	2b 17       	cp	r18, r27
     4d2:	08 f0       	brcs	.+2      	; 0x4d6 <main+0x2fa>
     4d4:	a0 e0       	ldi	r26, 0x00	; 0
     4d6:	f3 2f       	mov	r31, r19
     4d8:	fe 1b       	sub	r31, r30
     4da:	ef 2f       	mov	r30, r31
     4dc:	f1 e0       	ldi	r31, 0x01	; 1
     4de:	3e 17       	cp	r19, r30
     4e0:	08 f0       	brcs	.+2      	; 0x4e4 <main+0x308>
     4e2:	f0 e0       	ldi	r31, 0x00	; 0
     4e4:	9e 2e       	mov	r9, r30
     4e6:	9a 1a       	sub	r9, r26
     4e8:	a9 2d       	mov	r26, r9
     4ea:	99 24       	eor	r9, r9
     4ec:	93 94       	inc	r9
     4ee:	ea 17       	cp	r30, r26
     4f0:	08 f0       	brcs	.+2      	; 0x4f4 <main+0x318>
     4f2:	99 24       	eor	r9, r9
     4f4:	f9 29       	or	r31, r9
     4f6:	e4 2f       	mov	r30, r20
     4f8:	e8 19       	sub	r30, r8
     4fa:	8e 2e       	mov	r8, r30
     4fc:	e1 e0       	ldi	r30, 0x01	; 1
     4fe:	48 15       	cp	r20, r8
     500:	08 f0       	brcs	.+2      	; 0x504 <main+0x328>
     502:	e0 e0       	ldi	r30, 0x00	; 0
     504:	98 2c       	mov	r9, r8
     506:	9f 1a       	sub	r9, r31
     508:	f1 e0       	ldi	r31, 0x01	; 1
     50a:	89 14       	cp	r8, r9
     50c:	08 f0       	brcs	.+2      	; 0x510 <main+0x334>
     50e:	f0 e0       	ldi	r31, 0x00	; 0
     510:	ef 2b       	or	r30, r31
     512:	f5 2f       	mov	r31, r21
     514:	f4 19       	sub	r31, r4
     516:	4f 2e       	mov	r4, r31
     518:	f1 e0       	ldi	r31, 0x01	; 1
     51a:	54 15       	cp	r21, r4
     51c:	08 f0       	brcs	.+2      	; 0x520 <main+0x344>
     51e:	f0 e0       	ldi	r31, 0x00	; 0
     520:	84 2c       	mov	r8, r4
     522:	8e 1a       	sub	r8, r30
     524:	e1 e0       	ldi	r30, 0x01	; 1
     526:	48 14       	cp	r4, r8
     528:	08 f0       	brcs	.+2      	; 0x52c <main+0x350>
     52a:	e0 e0       	ldi	r30, 0x00	; 0
     52c:	fe 2b       	or	r31, r30
     52e:	31 94       	neg	r3
     530:	e1 e0       	ldi	r30, 0x01	; 1
     532:	63 15       	cp	r22, r3
     534:	08 f0       	brcs	.+2      	; 0x538 <main+0x35c>
     536:	e0 e0       	ldi	r30, 0x00	; 0
     538:	43 2c       	mov	r4, r3
     53a:	4f 1a       	sub	r4, r31
     53c:	f1 e0       	ldi	r31, 0x01	; 1
     53e:	34 14       	cp	r3, r4
     540:	08 f0       	brcs	.+2      	; 0x544 <main+0x368>
     542:	f0 e0       	ldi	r31, 0x00	; 0
     544:	ef 2b       	or	r30, r31
     546:	51 94       	neg	r5
     548:	f1 e0       	ldi	r31, 0x01	; 1
     54a:	75 15       	cp	r23, r5
     54c:	08 f0       	brcs	.+2      	; 0x550 <main+0x374>
     54e:	f0 e0       	ldi	r31, 0x00	; 0
     550:	35 2c       	mov	r3, r5
     552:	3e 1a       	sub	r3, r30
     554:	e1 e0       	ldi	r30, 0x01	; 1
     556:	53 14       	cp	r5, r3
     558:	08 f0       	brcs	.+2      	; 0x55c <main+0x380>
     55a:	e0 e0       	ldi	r30, 0x00	; 0
     55c:	fe 2b       	or	r31, r30
     55e:	61 94       	neg	r6
     560:	e1 e0       	ldi	r30, 0x01	; 1
     562:	86 15       	cp	r24, r6
     564:	08 f0       	brcs	.+2      	; 0x568 <main+0x38c>
     566:	e0 e0       	ldi	r30, 0x00	; 0
     568:	96 2d       	mov	r25, r6
     56a:	9f 1b       	sub	r25, r31
     56c:	81 e0       	ldi	r24, 0x01	; 1
     56e:	69 16       	cp	r6, r25
     570:	08 f0       	brcs	.+2      	; 0x574 <main+0x398>
     572:	80 e0       	ldi	r24, 0x00	; 0
     574:	e8 2b       	or	r30, r24
     576:	71 94       	neg	r7
     578:	7e 16       	cp	r7, r30
     57a:	91 f4       	brne	.+36     	; 0x5a0 <main+0x3c4>
     57c:	99 23       	and	r25, r25
     57e:	81 f4       	brne	.+32     	; 0x5a0 <main+0x3c4>
     580:	33 20       	and	r3, r3
     582:	71 f4       	brne	.+28     	; 0x5a0 <main+0x3c4>
     584:	44 20       	and	r4, r4
     586:	61 f4       	brne	.+24     	; 0x5a0 <main+0x3c4>
     588:	88 20       	and	r8, r8
     58a:	51 f4       	brne	.+20     	; 0x5a0 <main+0x3c4>
     58c:	99 20       	and	r9, r9
     58e:	41 f4       	brne	.+16     	; 0x5a0 <main+0x3c4>
     590:	a2 30       	cpi	r26, 0x02	; 2
     592:	30 f4       	brcc	.+12     	; 0x5a0 <main+0x3c4>
     594:	a1 30       	cpi	r26, 0x01	; 1
     596:	09 f0       	breq	.+2      	; 0x59a <main+0x3be>
     598:	84 ce       	rjmp	.-760    	; 0x2a2 <main+0xc6>
     59a:	b0 39       	cpi	r27, 0x90	; 144
     59c:	08 f4       	brcc	.+2      	; 0x5a0 <main+0x3c4>
     59e:	81 ce       	rjmp	.-766    	; 0x2a2 <main+0xc6>
				speedStepCounter = getTime100MicroSec();
     5a0:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <getTime100MicroSec>
     5a4:	9b 01       	movw	r18, r22
     5a6:	ac 01       	movw	r20, r24
     5a8:	60 93 60 04 	sts	0x0460, r22
     5ac:	30 93 61 04 	sts	0x0461, r19
     5b0:	40 93 62 04 	sts	0x0462, r20
     5b4:	50 93 63 04 	sts	0x0463, r21
     5b8:	10 92 64 04 	sts	0x0464, r1
     5bc:	10 92 65 04 	sts	0x0465, r1
     5c0:	10 92 66 04 	sts	0x0466, r1
     5c4:	10 92 67 04 	sts	0x0467, r1

				if(softAccEnabled) {
     5c8:	80 91 68 04 	lds	r24, 0x0468
     5cc:	88 23       	and	r24, r24
     5ce:	09 f4       	brne	.+2      	; 0x5d2 <main+0x3f6>
     5d0:	de c1       	rjmp	.+956    	; 0x98e <main+0x7b2>
					if(pwm_right_desired == 0) {
     5d2:	80 91 f9 02 	lds	r24, 0x02F9
     5d6:	90 91 fa 02 	lds	r25, 0x02FA
     5da:	00 97       	sbiw	r24, 0x00	; 0
     5dc:	09 f4       	brne	.+2      	; 0x5e0 <main+0x404>
     5de:	76 c2       	rjmp	.+1260   	; 0xacc <main+0x8f0>
						pwm_intermediate_right_desired = 0;
					} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
     5e0:	20 91 fd 02 	lds	r18, 0x02FD
     5e4:	30 91 fe 02 	lds	r19, 0x02FE
     5e8:	28 9f       	mul	r18, r24
     5ea:	a0 01       	movw	r20, r0
     5ec:	29 9f       	mul	r18, r25
     5ee:	50 0d       	add	r21, r0
     5f0:	38 9f       	mul	r19, r24
     5f2:	50 0d       	add	r21, r0
     5f4:	11 24       	eor	r1, r1
     5f6:	57 fd       	sbrc	r21, 7
     5f8:	69 c2       	rjmp	.+1234   	; 0xacc <main+0x8f0>
						pwm_intermediate_right_desired = 0;
					} else if(pwm_right_desired > pwm_intermediate_right_desired) {
     5fa:	28 17       	cp	r18, r24
     5fc:	39 07       	cpc	r19, r25
     5fe:	14 f0       	brlt	.+4      	; 0x604 <main+0x428>
     600:	0c 94 ff 0a 	jmp	0x15fe	; 0x15fe <main+0x1422>
						pwm_intermediate_right_desired += speedStep;
     604:	40 91 17 02 	lds	r20, 0x0217
     608:	24 0f       	add	r18, r20
     60a:	31 1d       	adc	r19, r1
     60c:	30 93 fe 02 	sts	0x02FE, r19
     610:	20 93 fd 02 	sts	0x02FD, r18
						if(pwm_intermediate_right_desired > pwm_right_desired) {
     614:	82 17       	cp	r24, r18
     616:	93 07       	cpc	r25, r19
     618:	24 f4       	brge	.+8      	; 0x622 <main+0x446>
							pwm_intermediate_right_desired = pwm_right_desired;
						}
					} else if(pwm_right_desired < pwm_intermediate_right_desired) {
						pwm_intermediate_right_desired -= speedStep;
						if(pwm_intermediate_right_desired < pwm_right_desired) {
							pwm_intermediate_right_desired = pwm_right_desired;
     61a:	90 93 fe 02 	sts	0x02FE, r25
     61e:	80 93 fd 02 	sts	0x02FD, r24
						}					
					}
	
					if(pwm_left_desired == 0) {
     622:	80 91 fb 02 	lds	r24, 0x02FB
     626:	90 91 fc 02 	lds	r25, 0x02FC
     62a:	00 97       	sbiw	r24, 0x00	; 0
     62c:	09 f4       	brne	.+2      	; 0x630 <main+0x454>
     62e:	49 c2       	rjmp	.+1170   	; 0xac2 <main+0x8e6>
						pwm_intermediate_left_desired = 0;
					} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
     630:	20 91 ff 02 	lds	r18, 0x02FF
     634:	30 91 00 03 	lds	r19, 0x0300
     638:	28 9f       	mul	r18, r24
     63a:	a0 01       	movw	r20, r0
     63c:	29 9f       	mul	r18, r25
     63e:	50 0d       	add	r21, r0
     640:	38 9f       	mul	r19, r24
     642:	50 0d       	add	r21, r0
     644:	11 24       	eor	r1, r1
     646:	57 fd       	sbrc	r21, 7
     648:	3c c2       	rjmp	.+1144   	; 0xac2 <main+0x8e6>
						pwm_intermediate_left_desired = 0;
					} else if(pwm_left_desired > pwm_intermediate_left_desired) {
     64a:	28 17       	cp	r18, r24
     64c:	39 07       	cpc	r19, r25
     64e:	0c f0       	brlt	.+2      	; 0x652 <main+0x476>
     650:	e9 c7       	rjmp	.+4050   	; 0x1624 <main+0x1448>
						pwm_intermediate_left_desired += speedStep;
     652:	40 91 17 02 	lds	r20, 0x0217
     656:	24 0f       	add	r18, r20
     658:	31 1d       	adc	r19, r1
     65a:	30 93 00 03 	sts	0x0300, r19
     65e:	20 93 ff 02 	sts	0x02FF, r18
						if(pwm_intermediate_left_desired > pwm_left_desired) {
     662:	82 17       	cp	r24, r18
     664:	93 07       	cpc	r25, r19
     666:	0c f0       	brlt	.+2      	; 0x66a <main+0x48e>
     668:	1c ce       	rjmp	.-968    	; 0x2a2 <main+0xc6>
							pwm_intermediate_left_desired = pwm_left_desired;
						}					
					}
				} else {
					pwm_intermediate_right_desired = pwm_right_desired;
					pwm_intermediate_left_desired = pwm_left_desired;
     66a:	90 93 00 03 	sts	0x0300, r25
     66e:	80 93 ff 02 	sts	0x02FF, r24

		//if(currentSelector!=6 && currentSelector!=15) {
		//	usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		//}

		switch(currentSelector) {
     672:	80 91 4c 04 	lds	r24, 0x044C
     676:	87 30       	cpi	r24, 0x07	; 7
     678:	09 f0       	breq	.+2      	; 0x67c <main+0x4a0>
     67a:	18 ce       	rjmp	.-976    	; 0x2ac <main+0xd0>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
     67c:	80 91 50 04 	lds	r24, 0x0450
     680:	82 30       	cpi	r24, 0x02	; 2
     682:	09 f4       	brne	.+2      	; 0x686 <main+0x4aa>
     684:	c4 c6       	rjmp	.+3464   	; 0x140e <main+0x1232>
     686:	83 30       	cpi	r24, 0x03	; 3
     688:	08 f0       	brcs	.+2      	; 0x68c <main+0x4b0>
     68a:	53 c2       	rjmp	.+1190   	; 0xb32 <main+0x956>
     68c:	88 23       	and	r24, r24
     68e:	09 f0       	breq	.+2      	; 0x692 <main+0x4b6>
     690:	28 c6       	rjmp	.+3152   	; 0x12e2 <main+0x1106>
						case 0:	// move around
							turnOffGreenLeds();
     692:	0e 94 be 3b 	call	0x777c	; 0x777c <turnOffGreenLeds>
							GREEN_LED0_ON;
     696:	80 91 0b 01 	lds	r24, 0x010B
     69a:	8e 7f       	andi	r24, 0xFE	; 254
     69c:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED1_ON;
							lineFound = 0;
     6a0:	10 92 51 04 	sts	0x0451, r1
							enableObstacleAvoidance();
     6a4:	0e 94 9a 3a 	call	0x7534	; 0x7534 <enableObstacleAvoidance>
							setRightSpeed(20);
     6a8:	84 e1       	ldi	r24, 0x14	; 20
     6aa:	0e 94 cc 26 	call	0x4d98	; 0x4d98 <setRightSpeed>
							setLeftSpeed(20);
     6ae:	84 e1       	ldi	r24, 0x14	; 20
     6b0:	0e 94 af 26 	call	0x4d5e	; 0x4d5e <setLeftSpeed>
							demoEndTime = getTime100MicroSec();
     6b4:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <getTime100MicroSec>
     6b8:	9b 01       	movw	r18, r22
     6ba:	ac 01       	movw	r20, r24
     6bc:	60 93 5c 04 	sts	0x045C, r22
     6c0:	70 93 5d 04 	sts	0x045D, r23
     6c4:	80 93 5e 04 	sts	0x045E, r24
     6c8:	90 93 5f 04 	sts	0x045F, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {
     6cc:	80 91 54 04 	lds	r24, 0x0454
     6d0:	90 91 55 04 	lds	r25, 0x0455
     6d4:	a0 91 56 04 	lds	r26, 0x0456
     6d8:	b0 91 57 04 	lds	r27, 0x0457
     6dc:	28 1b       	sub	r18, r24
     6de:	39 0b       	sbc	r19, r25
     6e0:	4a 0b       	sbc	r20, r26
     6e2:	5b 0b       	sbc	r21, r27
     6e4:	23 33       	cpi	r18, 0x33	; 51
     6e6:	6f ee       	ldi	r22, 0xEF	; 239
     6e8:	36 07       	cpc	r19, r22
     6ea:	62 e0       	ldi	r22, 0x02	; 2
     6ec:	46 07       	cpc	r20, r22
     6ee:	60 e0       	ldi	r22, 0x00	; 0
     6f0:	56 07       	cpc	r21, r22
     6f2:	08 f4       	brcc	.+2      	; 0x6f6 <main+0x51a>
     6f4:	bd ce       	rjmp	.-646    	; 0x470 <main+0x294>

								if(proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {
									outOfLine++;
									if(outOfLine > 250) {
										chargeContact = 0;
										demoState = 1;
     6f6:	20 92 50 04 	sts	0x0450, r2
										break;
     6fa:	ba ce       	rjmp	.-652    	; 0x470 <main+0x294>
			}
		}

		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
     6fc:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <readBatteryLevel>
             		
			if(currentSelector==4 || currentSelector==5) {
     700:	80 91 4c 04 	lds	r24, 0x044C
     704:	98 2f       	mov	r25, r24
     706:	94 50       	subi	r25, 0x04	; 4
     708:	92 30       	cpi	r25, 0x02	; 2
     70a:	08 f4       	brcc	.+2      	; 0x70e <main+0x532>
     70c:	4d c1       	rjmp	.+666    	; 0x9a8 <main+0x7cc>
					}
				} else {	// do nothing => all 3 leds turned on

				}

			} else if(currentSelector==7) {
     70e:	87 30       	cpi	r24, 0x07	; 7
     710:	09 f4       	brne	.+2      	; 0x714 <main+0x538>
     712:	7c c1       	rjmp	.+760    	; 0xa0c <main+0x830>

				}

				turnOffLedsTime = getTime100MicroSec();

			} else if(currentSelector==6) {
     714:	86 30       	cpi	r24, 0x06	; 6
     716:	09 f4       	brne	.+2      	; 0x71a <main+0x53e>
     718:	21 c1       	rjmp	.+578    	; 0x95c <main+0x780>
						rgbState = 0;
					}
				}
			}

			startTime = getTime100MicroSec();
     71a:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <getTime100MicroSec>
     71e:	6b 01       	movw	r12, r22
     720:	7c 01       	movw	r14, r24
     722:	b6 cd       	rjmp	.-1172   	; 0x290 <main+0xb4>

		computeAngle();

		// turn off the rgb leds after one half second in the "charger demo"
		if(currentSelector==7) {
			if((getTime100MicroSec()-turnOffLedsTime) > PAUSE_500_MSEC) {
     724:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <getTime100MicroSec>
     728:	29 81       	ldd	r18, Y+1	; 0x01
     72a:	3a 81       	ldd	r19, Y+2	; 0x02
     72c:	4b 81       	ldd	r20, Y+3	; 0x03
     72e:	5c 81       	ldd	r21, Y+4	; 0x04
     730:	62 1b       	sub	r22, r18
     732:	73 0b       	sbc	r23, r19
     734:	84 0b       	sbc	r24, r20
     736:	95 0b       	sbc	r25, r21
     738:	68 3c       	cpi	r22, 0xC8	; 200
     73a:	32 e1       	ldi	r19, 0x12	; 18
     73c:	73 07       	cpc	r23, r19
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	83 07       	cpc	r24, r19
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	93 07       	cpc	r25, r19
     746:	08 f4       	brcc	.+2      	; 0x74a <main+0x56e>
     748:	94 cd       	rjmp	.-1240   	; 0x272 <main+0x96>
				pwm_red = 255;
     74a:	10 93 0c 02 	sts	0x020C, r17
				pwm_green = 255;
     74e:	10 93 0d 02 	sts	0x020D, r17
				pwm_blue = 255;			
     752:	10 93 0e 02 	sts	0x020E, r17
     756:	8d cd       	rjmp	.-1254   	; 0x272 <main+0x96>

		//if(currentSelector!=6 && currentSelector!=15) {
		//	usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		//}

		switch(currentSelector) {
     758:	85 30       	cpi	r24, 0x05	; 5
     75a:	09 f4       	brne	.+2      	; 0x75e <main+0x582>
     75c:	e8 c0       	rjmp	.+464    	; 0x92e <main+0x752>
     75e:	86 30       	cpi	r24, 0x06	; 6
     760:	08 f4       	brcc	.+2      	; 0x764 <main+0x588>
     762:	c0 c0       	rjmp	.+384    	; 0x8e4 <main+0x708>
					setLeftSpeed(25);
					setRightSpeed(25);
					break;

			case 6:	// robot testing
					switch(menuChoice) {
     764:	80 91 23 04 	lds	r24, 0x0423
     768:	81 30       	cpi	r24, 0x01	; 1
     76a:	09 f4       	brne	.+2      	; 0x76e <main+0x592>
     76c:	47 c3       	rjmp	.+1678   	; 0xdfc <main+0xc20>
     76e:	81 30       	cpi	r24, 0x01	; 1
     770:	08 f0       	brcs	.+2      	; 0x774 <main+0x598>
     772:	c0 c1       	rjmp	.+896    	; 0xaf4 <main+0x918>
						case 0:
							setRightSpeed(0);
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	0e 94 cc 26 	call	0x4d98	; 0x4d98 <setRightSpeed>
							setLeftSpeed(0);
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	0e 94 af 26 	call	0x4d5e	; 0x4d5e <setLeftSpeed>
							turnOffGreenLeds();
     780:	0e 94 be 3b 	call	0x777c	; 0x777c <turnOffGreenLeds>
							pwm_red=255;
     784:	10 93 0c 02 	sts	0x020C, r17
							pwm_green=255;
     788:	10 93 0d 02 	sts	0x020D, r17
							pwm_blue=255;
     78c:	10 93 0e 02 	sts	0x020E, r17
							updateRedLed(pwm_red);
     790:	8f ef       	ldi	r24, 0xFF	; 255
     792:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <updateRedLed>
							updateGreenLed(pwm_green);
     796:	80 91 0d 02 	lds	r24, 0x020D
     79a:	0e 94 f9 3a 	call	0x75f2	; 0x75f2 <updateGreenLed>
							updateBlueLed(pwm_blue);
     79e:	80 91 0e 02 	lds	r24, 0x020E
     7a2:	0e 94 0d 3b 	call	0x761a	; 0x761a <updateBlueLed>
							LED_IR1_HIGH;
     7a6:	44 9a       	sbi	0x08, 4	; 8
							LED_IR2_HIGH;
     7a8:	45 9a       	sbi	0x08, 5	; 8
     7aa:	80 91 4c 04 	lds	r24, 0x044C
							break;
     7ae:	91 cd       	rjmp	.-1246   	; 0x2d2 <main+0xf6>

		//if(currentSelector!=6 && currentSelector!=15) {
		//	usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		//}

		switch(currentSelector) {
     7b0:	8d 30       	cpi	r24, 0x0D	; 13
     7b2:	09 f4       	brne	.+2      	; 0x7b6 <main+0x5da>
     7b4:	78 c0       	rjmp	.+240    	; 0x8a6 <main+0x6ca>
     7b6:	8d 30       	cpi	r24, 0x0D	; 13
     7b8:	a8 f1       	brcs	.+106    	; 0x824 <main+0x648>
     7ba:	8e 30       	cpi	r24, 0x0E	; 14
     7bc:	09 f0       	breq	.+2      	; 0x7c0 <main+0x5e4>
     7be:	89 cd       	rjmp	.-1262   	; 0x2d2 <main+0xf6>
						break;
				}
				break;
			
			case 14: // IR comm receiver
				switch(demoState) {
     7c0:	80 91 50 04 	lds	r24, 0x0450
     7c4:	88 23       	and	r24, r24
     7c6:	09 f4       	brne	.+2      	; 0x7ca <main+0x5ee>
     7c8:	1a c1       	rjmp	.+564    	; 0x9fe <main+0x822>
     7ca:	81 30       	cpi	r24, 0x01	; 1
     7cc:	09 f0       	breq	.+2      	; 0x7d0 <main+0x5f4>
     7ce:	61 ce       	rjmp	.-830    	; 0x492 <main+0x2b6>
						//setRightSpeed(25);
						demoState = 1;
						break;

					case 1:
						irCommTasks();
     7d0:	0e 94 e1 43 	call	0x87c2	; 0x87c2 <irCommTasks>
						if(irCommDataAvailable()==1) {
     7d4:	0e 94 5f 4e 	call	0x9cbe	; 0x9cbe <irCommDataAvailable>
     7d8:	81 30       	cpi	r24, 0x01	; 1
     7da:	09 f4       	brne	.+2      	; 0x7de <main+0x602>
     7dc:	b6 c7       	rjmp	.+3948   	; 0x174a <main+0x156e>
							i = irCommReadData();
     7de:	80 91 4c 04 	lds	r24, 0x044C
     7e2:	77 cd       	rjmp	.-1298   	; 0x2d2 <main+0xf6>
             		enableCliffAvoidance();
					break;
    
			case 3:	// both obstacle and cliff avoidance enabled (the robot does not move untill commands are
					// received from the radio or tv remote)
            		enableObstacleAvoidance();
     7e4:	0e 94 9a 3a 	call	0x7534	; 0x7534 <enableObstacleAvoidance>
					enableCliffAvoidance();
     7e8:	0e 94 a1 3a 	call	0x7542	; 0x7542 <enableCliffAvoidance>
     7ec:	80 91 4c 04 	lds	r24, 0x044C
					break;
     7f0:	70 cd       	rjmp	.-1312   	; 0x2d2 <main+0xf6>
					}
					

					break;

			case 11:if(leftMotSteps <= 5000) {
     7f2:	60 91 d5 02 	lds	r22, 0x02D5
     7f6:	70 91 d6 02 	lds	r23, 0x02D6
     7fa:	80 91 d7 02 	lds	r24, 0x02D7
     7fe:	90 91 d8 02 	lds	r25, 0x02D8
     802:	20 e0       	ldi	r18, 0x00	; 0
     804:	30 e4       	ldi	r19, 0x40	; 64
     806:	4c e9       	ldi	r20, 0x9C	; 156
     808:	55 e4       	ldi	r21, 0x45	; 69
     80a:	0e 94 31 4f 	call	0x9e62	; 0x9e62 <__cmpsf2>
     80e:	18 16       	cp	r1, r24
     810:	cc f0       	brlt	.+50     	; 0x844 <main+0x668>
						setRightSpeed(0);
					}
					break;

			case 12:if(leftMotSteps <= 6000) {
						setLeftSpeed(40);
     812:	88 e2       	ldi	r24, 0x28	; 40
     814:	0e 94 af 26 	call	0x4d5e	; 0x4d5e <setLeftSpeed>
						setRightSpeed(40);
     818:	88 e2       	ldi	r24, 0x28	; 40
     81a:	0e 94 cc 26 	call	0x4d98	; 0x4d98 <setRightSpeed>
     81e:	80 91 4c 04 	lds	r24, 0x044C
     822:	57 cd       	rjmp	.-1362   	; 0x2d2 <main+0xf6>
						setLeftSpeed(0);
						setRightSpeed(0);
					}
					break;

			case 12:if(leftMotSteps <= 6000) {
     824:	60 91 d5 02 	lds	r22, 0x02D5
     828:	70 91 d6 02 	lds	r23, 0x02D6
     82c:	80 91 d7 02 	lds	r24, 0x02D7
     830:	90 91 d8 02 	lds	r25, 0x02D8
     834:	20 e0       	ldi	r18, 0x00	; 0
     836:	30 e8       	ldi	r19, 0x80	; 128
     838:	4b eb       	ldi	r20, 0xBB	; 187
     83a:	55 e4       	ldi	r21, 0x45	; 69
     83c:	0e 94 31 4f 	call	0x9e62	; 0x9e62 <__cmpsf2>
     840:	18 16       	cp	r1, r24
     842:	3c f7       	brge	.-50     	; 0x812 <main+0x636>
						setLeftSpeed(40);
						setRightSpeed(40);
					} else {
						setLeftSpeed(0);
     844:	80 e0       	ldi	r24, 0x00	; 0
     846:	0e 94 af 26 	call	0x4d5e	; 0x4d5e <setLeftSpeed>
						setRightSpeed(0);
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	0e 94 cc 26 	call	0x4d98	; 0x4d98 <setRightSpeed>
     850:	80 91 4c 04 	lds	r24, 0x044C
     854:	3e cd       	rjmp	.-1412   	; 0x2d2 <main+0xf6>
					updateBlueLed(pwm_blue);

					break;
  
			case 8:	// motors calibration
					irEnabled = 1;
     856:	20 92 12 02 	sts	0x0212, r2
					if(calibrateOdomFlag==1) {
     85a:	80 91 4f 05 	lds	r24, 0x054F
     85e:	81 30       	cpi	r24, 0x01	; 1
     860:	09 f0       	breq	.+2      	; 0x864 <main+0x688>
     862:	17 ce       	rjmp	.-978    	; 0x492 <main+0x2b6>
						handleCalibration();
     864:	0e 94 d0 27 	call	0x4fa0	; 0x4fa0 <handleCalibration>
     868:	80 91 4c 04 	lds	r24, 0x044C
     86c:	32 cd       	rjmp	.-1436   	; 0x2d2 <main+0xf6>
					break;

			case 9:	// write default calibration values; wait 2 seconds before start writing the calibration values
					// in eeprom in order to avoid rewriting the data involuntarily when moving the selector and passing 
					// through selector position 9
					switch(demoState) {
     86e:	80 91 50 04 	lds	r24, 0x0450
     872:	81 30       	cpi	r24, 0x01	; 1
     874:	09 f4       	brne	.+2      	; 0x878 <main+0x69c>
     876:	a3 c2       	rjmp	.+1350   	; 0xdbe <main+0xbe2>
     878:	81 30       	cpi	r24, 0x01	; 1
     87a:	08 f0       	brcs	.+2      	; 0x87e <main+0x6a2>
     87c:	2c c1       	rjmp	.+600    	; 0xad6 <main+0x8fa>
						case 0:
							demoStartTime = getTime100MicroSec();
     87e:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <getTime100MicroSec>
     882:	60 93 54 04 	sts	0x0454, r22
     886:	70 93 55 04 	sts	0x0455, r23
     88a:	80 93 56 04 	sts	0x0456, r24
     88e:	90 93 57 04 	sts	0x0457, r25
							demoState = 1;
     892:	20 92 50 04 	sts	0x0450, r2
     896:	80 91 4c 04 	lds	r24, 0x044C
							break;
     89a:	1b cd       	rjmp	.-1482   	; 0x2d2 <main+0xf6>
					handleMotorsWithNoController();
					break;
             
			case 1:	// obstacle avoidance enabled (the robot does not move untill commands are 
					// received from the radio or tv remote)
             		enableObstacleAvoidance();
     89c:	0e 94 9a 3a 	call	0x7534	; 0x7534 <enableObstacleAvoidance>
     8a0:	80 91 4c 04 	lds	r24, 0x044C
					break;
     8a4:	16 cd       	rjmp	.-1492   	; 0x2d2 <main+0xf6>
						setRightSpeed(0);
					}
					break;

			case 13: // IR comm transmitter
				switch(demoState) {
     8a6:	80 91 50 04 	lds	r24, 0x0450
     8aa:	81 30       	cpi	r24, 0x01	; 1
     8ac:	09 f4       	brne	.+2      	; 0x8b0 <main+0x6d4>
     8ae:	7c c2       	rjmp	.+1272   	; 0xda8 <main+0xbcc>
     8b0:	81 30       	cpi	r24, 0x01	; 1
     8b2:	08 f4       	brcc	.+2      	; 0x8b6 <main+0x6da>
     8b4:	a4 c0       	rjmp	.+328    	; 0x9fe <main+0x822>
     8b6:	82 30       	cpi	r24, 0x02	; 2
     8b8:	09 f0       	breq	.+2      	; 0x8bc <main+0x6e0>
     8ba:	eb cd       	rjmp	.-1066   	; 0x492 <main+0x2b6>
						//irCommSendData(irCommRxByteExpected, 0xFF);												
						demoState = 2;
						break;

					case 2:
						irCommTasks();
     8bc:	0e 94 e1 43 	call	0x87c2	; 0x87c2 <irCommTasks>
						if(irCommDataSent()==1) {
     8c0:	0e 94 57 4e 	call	0x9cae	; 0x9cae <irCommDataSent>
     8c4:	81 30       	cpi	r24, 0x01	; 1
     8c6:	09 f0       	breq	.+2      	; 0x8ca <main+0x6ee>
     8c8:	8a cf       	rjmp	.-236    	; 0x7de <main+0x602>
							demoState = 1;
     8ca:	80 93 50 04 	sts	0x0450, r24
							//setGreenLed(irCommRxByteExpected, 1);						
							//irCommRxByteExpected++;
							//if(irCommRxByteExpected==8) {
							//	irCommRxByteExpected=0;
							//}
							if(irCommRxByteExpected<255) {
     8ce:	80 91 fd 04 	lds	r24, 0x04FD
     8d2:	8f 3f       	cpi	r24, 0xFF	; 255
     8d4:	09 f4       	brne	.+2      	; 0x8d8 <main+0x6fc>
     8d6:	6d c7       	rjmp	.+3802   	; 0x17b2 <main+0x15d6>
								irCommRxByteExpected++;
     8d8:	8f 5f       	subi	r24, 0xFF	; 255
     8da:	80 93 fd 04 	sts	0x04FD, r24
     8de:	80 91 4c 04 	lds	r24, 0x044C
     8e2:	f7 cc       	rjmp	.-1554   	; 0x2d2 <main+0xf6>
            		enableObstacleAvoidance();
					enableCliffAvoidance();
					break;
            
			case 4:	// random colors on RGB leds; small green leds turned on
					GREEN_LED0_ON;
     8e4:	80 91 0b 01 	lds	r24, 0x010B
     8e8:	8e 7f       	andi	r24, 0xFE	; 254
     8ea:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED1_ON;
     8ee:	80 91 0b 01 	lds	r24, 0x010B
     8f2:	8d 7f       	andi	r24, 0xFD	; 253
     8f4:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED2_ON;
     8f8:	80 91 0b 01 	lds	r24, 0x010B
     8fc:	8b 7f       	andi	r24, 0xFB	; 251
     8fe:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED3_ON;
     902:	a3 98       	cbi	0x14, 3	; 20
					GREEN_LED4_ON;
     904:	80 91 0b 01 	lds	r24, 0x010B
     908:	8f 7e       	andi	r24, 0xEF	; 239
     90a:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED5_ON;
     90e:	80 91 0b 01 	lds	r24, 0x010B
     912:	8f 7d       	andi	r24, 0xDF	; 223
     914:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED6_ON;
     918:	80 91 0b 01 	lds	r24, 0x010B
     91c:	8f 7b       	andi	r24, 0xBF	; 191
     91e:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED7_ON;
     922:	80 91 0b 01 	lds	r24, 0x010B
     926:	8f 77       	andi	r24, 0x7F	; 127
     928:	80 93 0b 01 	sts	0x010B, r24
     92c:	a1 cd       	rjmp	.-1214   	; 0x470 <main+0x294>
					updateBlueLed(pwm_blue);
					break;
             
			case 5:	// random colors on RGB leds; obstacle avoidance enabled; robot start moving automatically
					// (motors speed setting)
					updateRedLed(pwm_red);
     92e:	80 91 0c 02 	lds	r24, 0x020C
     932:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <updateRedLed>
					updateGreenLed(pwm_green);
     936:	80 91 0d 02 	lds	r24, 0x020D
     93a:	0e 94 f9 3a 	call	0x75f2	; 0x75f2 <updateGreenLed>
					updateBlueLed(pwm_blue);
     93e:	80 91 0e 02 	lds	r24, 0x020E
     942:	0e 94 0d 3b 	call	0x761a	; 0x761a <updateBlueLed>
					enableObstacleAvoidance();
     946:	0e 94 9a 3a 	call	0x7534	; 0x7534 <enableObstacleAvoidance>
					setLeftSpeed(25);
     94a:	89 e1       	ldi	r24, 0x19	; 25
     94c:	0e 94 af 26 	call	0x4d5e	; 0x4d5e <setLeftSpeed>
					setRightSpeed(25);
     950:	89 e1       	ldi	r24, 0x19	; 25
     952:	0e 94 cc 26 	call	0x4d98	; 0x4d98 <setRightSpeed>
     956:	80 91 4c 04 	lds	r24, 0x044C
					break;
     95a:	bb cc       	rjmp	.-1674   	; 0x2d2 <main+0xf6>
				}

				turnOffLedsTime = getTime100MicroSec();

			} else if(currentSelector==6) {
				if(menuChoice==1 && rfFlags<=1) {
     95c:	80 91 23 04 	lds	r24, 0x0423
     960:	81 30       	cpi	r24, 0x01	; 1
     962:	09 f0       	breq	.+2      	; 0x966 <main+0x78a>
     964:	da ce       	rjmp	.-588    	; 0x71a <main+0x53e>
     966:	90 91 17 03 	lds	r25, 0x0317
     96a:	92 30       	cpi	r25, 0x02	; 2
     96c:	08 f0       	brcs	.+2      	; 0x970 <main+0x794>
     96e:	d5 ce       	rjmp	.-598    	; 0x71a <main+0x53e>
					if(rgbState == 0) {
     970:	90 91 1c 03 	lds	r25, 0x031C
     974:	99 23       	and	r25, r25
     976:	09 f0       	breq	.+2      	; 0x97a <main+0x79e>
     978:	03 c7       	rjmp	.+3590   	; 0x1780 <main+0x15a4>
						pwm_red = 254;
     97a:	4e ef       	ldi	r20, 0xFE	; 254
     97c:	40 93 0c 02 	sts	0x020C, r20
						pwm_green = 255;
     980:	10 93 0d 02 	sts	0x020D, r17
						pwm_blue = 255;
     984:	10 93 0e 02 	sts	0x020E, r17
						rgbState = 1;
     988:	80 93 1c 03 	sts	0x031C, r24
     98c:	c6 ce       	rjmp	.-628    	; 0x71a <main+0x53e>
						if(pwm_intermediate_left_desired < pwm_left_desired) {
							pwm_intermediate_left_desired = pwm_left_desired;
						}					
					}
				} else {
					pwm_intermediate_right_desired = pwm_right_desired;
     98e:	80 91 f9 02 	lds	r24, 0x02F9
     992:	90 91 fa 02 	lds	r25, 0x02FA
     996:	90 93 fe 02 	sts	0x02FE, r25
     99a:	80 93 fd 02 	sts	0x02FD, r24
					pwm_intermediate_left_desired = pwm_left_desired;
     99e:	80 91 fb 02 	lds	r24, 0x02FB
     9a2:	90 91 fc 02 	lds	r25, 0x02FC
     9a6:	61 ce       	rjmp	.-830    	; 0x66a <main+0x48e>
		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
             		
			if(currentSelector==4 || currentSelector==5) {
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption
     9a8:	0e 94 44 52 	call	0xa488	; 0xa488 <rand>
     9ac:	6e e1       	ldi	r22, 0x1E	; 30
     9ae:	70 e0       	ldi	r23, 0x00	; 0
     9b0:	0e 94 a6 51 	call	0xa34c	; 0xa34c <__divmodhi4>
     9b4:	a8 0e       	add	r10, r24
     9b6:	b9 1e       	adc	r11, r25
     9b8:	5f e7       	ldi	r21, 0x7F	; 127
     9ba:	a5 22       	and	r10, r21
     9bc:	bb 24       	eor	r11, r11

				switch(rgbState) {
     9be:	80 91 1c 03 	lds	r24, 0x031C
     9c2:	81 30       	cpi	r24, 0x01	; 1
     9c4:	09 f4       	brne	.+2      	; 0x9c8 <main+0x7ec>
     9c6:	c8 c4       	rjmp	.+2448   	; 0x1358 <main+0x117c>
     9c8:	81 30       	cpi	r24, 0x01	; 1
     9ca:	08 f0       	brcs	.+2      	; 0x9ce <main+0x7f2>
     9cc:	80 c4       	rjmp	.+2304   	; 0x12ce <main+0x10f2>
					case 0:
						pwm_red = 255 - currRand;	
     9ce:	8a 2d       	mov	r24, r10
     9d0:	80 95       	com	r24
     9d2:	80 93 0c 02 	sts	0x020C, r24
						rgbState = 1;
     9d6:	20 92 1c 03 	sts	0x031C, r2
						pwm_blue = 255 - currRand;
						rgbState = 0;
						break;
				}
				
				if(currRand<32) {
     9da:	80 e2       	ldi	r24, 0x20	; 32
     9dc:	a8 16       	cp	r10, r24
     9de:	b1 04       	cpc	r11, r1
     9e0:	08 f0       	brcs	.+2      	; 0x9e4 <main+0x808>
     9e2:	9c c1       	rjmp	.+824    	; 0xd1c <main+0xb40>
					if(pwm_green!=255 && pwm_blue!=255) {	// do not turn on all leds
     9e4:	80 91 0d 02 	lds	r24, 0x020D
     9e8:	8f 3f       	cpi	r24, 0xFF	; 255
     9ea:	09 f4       	brne	.+2      	; 0x9ee <main+0x812>
     9ec:	96 ce       	rjmp	.-724    	; 0x71a <main+0x53e>
     9ee:	80 91 0e 02 	lds	r24, 0x020E
     9f2:	8f 3f       	cpi	r24, 0xFF	; 255
     9f4:	09 f4       	brne	.+2      	; 0x9f8 <main+0x81c>
     9f6:	91 ce       	rjmp	.-734    	; 0x71a <main+0x53e>
						pwm_red = 255;
     9f8:	10 93 0c 02 	sts	0x020C, r17
     9fc:	8e ce       	rjmp	.-740    	; 0x71a <main+0x53e>
				break;
			
			case 14: // IR comm receiver
				switch(demoState) {
					case 0:
						irCommInit();
     9fe:	0e 94 fa 42 	call	0x85f4	; 0x85f4 <irCommInit>
						//enableObstacleAvoidance();
						//setLeftSpeed(25);
						//setRightSpeed(25);
						demoState = 1;
     a02:	20 92 50 04 	sts	0x0450, r2
     a06:	80 91 4c 04 	lds	r24, 0x044C
						break;
     a0a:	63 cc       	rjmp	.-1850   	; 0x2d2 <main+0xf6>

				}

			} else if(currentSelector==7) {

				srand(TCNT3);
     a0c:	80 91 94 00 	lds	r24, 0x0094
     a10:	90 91 95 00 	lds	r25, 0x0095
     a14:	0e 94 49 52 	call	0xa492	; 0xa492 <srand>
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption
     a18:	0e 94 44 52 	call	0xa488	; 0xa488 <rand>
     a1c:	6e e1       	ldi	r22, 0x1E	; 30
     a1e:	70 e0       	ldi	r23, 0x00	; 0
     a20:	0e 94 a6 51 	call	0xa34c	; 0xa34c <__divmodhi4>
     a24:	4c 01       	movw	r8, r24
     a26:	8a 0c       	add	r8, r10
     a28:	9b 1c       	adc	r9, r11
     a2a:	ff e7       	ldi	r31, 0x7F	; 127
     a2c:	8f 22       	and	r8, r31
     a2e:	99 24       	eor	r9, r9

				pwm_red = 255 - currRand;
     a30:	88 2d       	mov	r24, r8
     a32:	80 95       	com	r24
     a34:	80 93 0c 02 	sts	0x020C, r24
				
				srand(TCNT3);
     a38:	80 91 94 00 	lds	r24, 0x0094
     a3c:	90 91 95 00 	lds	r25, 0x0095
     a40:	0e 94 49 52 	call	0xa492	; 0xa492 <srand>
				currRand = (currRand + rand()%30) % 128;	
     a44:	0e 94 44 52 	call	0xa488	; 0xa488 <rand>
     a48:	6e e1       	ldi	r22, 0x1E	; 30
     a4a:	70 e0       	ldi	r23, 0x00	; 0
     a4c:	0e 94 a6 51 	call	0xa34c	; 0xa34c <__divmodhi4>
     a50:	6c 01       	movw	r12, r24
     a52:	c8 0c       	add	r12, r8
     a54:	d9 1c       	adc	r13, r9
     a56:	2f e7       	ldi	r18, 0x7F	; 127
     a58:	c2 22       	and	r12, r18
     a5a:	dd 24       	eor	r13, r13
				pwm_green = 255 - currRand;
     a5c:	8c 2d       	mov	r24, r12
     a5e:	80 95       	com	r24
     a60:	80 93 0d 02 	sts	0x020D, r24

				srand(TCNT3);
     a64:	80 91 94 00 	lds	r24, 0x0094
     a68:	90 91 95 00 	lds	r25, 0x0095
     a6c:	0e 94 49 52 	call	0xa492	; 0xa492 <srand>
				currRand = (currRand + rand()%30) % 128;
     a70:	0e 94 44 52 	call	0xa488	; 0xa488 <rand>
     a74:	6e e1       	ldi	r22, 0x1E	; 30
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	0e 94 a6 51 	call	0xa34c	; 0xa34c <__divmodhi4>
     a7c:	5c 01       	movw	r10, r24
     a7e:	ac 0c       	add	r10, r12
     a80:	bd 1c       	adc	r11, r13
     a82:	3f e7       	ldi	r19, 0x7F	; 127
     a84:	a3 22       	and	r10, r19
     a86:	bb 24       	eor	r11, r11
				pwm_blue = 255 - currRand;
     a88:	8a 2d       	mov	r24, r10
     a8a:	80 95       	com	r24
     a8c:	80 93 0e 02 	sts	0x020E, r24

			
				srand(TCNT3);
     a90:	80 91 94 00 	lds	r24, 0x0094
     a94:	90 91 95 00 	lds	r25, 0x0095
     a98:	0e 94 49 52 	call	0xa492	; 0xa492 <srand>
				currRand2 = rand()%128;
     a9c:	0e 94 44 52 	call	0xa488	; 0xa488 <rand>
     aa0:	60 e8       	ldi	r22, 0x80	; 128
     aa2:	70 e0       	ldi	r23, 0x00	; 0
     aa4:	0e 94 a6 51 	call	0xa34c	; 0xa34c <__divmodhi4>
				if(currRand2<32) {
     aa8:	80 32       	cpi	r24, 0x20	; 32
     aaa:	91 05       	cpc	r25, r1
     aac:	08 f0       	brcs	.+2      	; 0xab0 <main+0x8d4>
     aae:	48 c1       	rjmp	.+656    	; 0xd40 <main+0xb64>
					pwm_red = 255;
     ab0:	10 93 0c 02 	sts	0x020C, r17
					pwm_blue = 255;
				} else {	// do nothing => all 3 leds turned on

				}

				turnOffLedsTime = getTime100MicroSec();
     ab4:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <getTime100MicroSec>
     ab8:	69 83       	std	Y+1, r22	; 0x01
     aba:	7a 83       	std	Y+2, r23	; 0x02
     abc:	8b 83       	std	Y+3, r24	; 0x03
     abe:	9c 83       	std	Y+4, r25	; 0x04
     ac0:	2c ce       	rjmp	.-936    	; 0x71a <main+0x53e>
					}
	
					if(pwm_left_desired == 0) {
						pwm_intermediate_left_desired = 0;
					} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
						pwm_intermediate_left_desired = 0;
     ac2:	10 92 00 03 	sts	0x0300, r1
     ac6:	10 92 ff 02 	sts	0x02FF, r1
     aca:	eb cb       	rjmp	.-2090   	; 0x2a2 <main+0xc6>

				if(softAccEnabled) {
					if(pwm_right_desired == 0) {
						pwm_intermediate_right_desired = 0;
					} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
						pwm_intermediate_right_desired = 0;
     acc:	10 92 fe 02 	sts	0x02FE, r1
     ad0:	10 92 fd 02 	sts	0x02FD, r1
     ad4:	a6 cd       	rjmp	.-1204   	; 0x622 <main+0x446>
					break;

			case 9:	// write default calibration values; wait 2 seconds before start writing the calibration values
					// in eeprom in order to avoid rewriting the data involuntarily when moving the selector and passing 
					// through selector position 9
					switch(demoState) {
     ad6:	82 30       	cpi	r24, 0x02	; 2
     ad8:	09 f0       	breq	.+2      	; 0xadc <main+0x900>
     ada:	db cc       	rjmp	.-1610   	; 0x492 <main+0x2b6>
								demoState = 2;
							}
							break;						

						case 2:
							if(!calibrationWritten) {
     adc:	80 91 69 04 	lds	r24, 0x0469
     ae0:	88 23       	and	r24, r24
     ae2:	09 f0       	breq	.+2      	; 0xae6 <main+0x90a>
     ae4:	d6 cc       	rjmp	.-1620   	; 0x492 <main+0x2b6>
								calibrationWritten = 1;
     ae6:	20 92 69 04 	sts	0x0469, r2
								writeDefaultCalibration();
     aea:	0e 94 0c 35 	call	0x6a18	; 0x6a18 <writeDefaultCalibration>
     aee:	80 91 4c 04 	lds	r24, 0x044C
     af2:	ef cb       	rjmp	.-2082   	; 0x2d2 <main+0xf6>
					setLeftSpeed(25);
					setRightSpeed(25);
					break;

			case 6:	// robot testing
					switch(menuChoice) {
     af4:	82 30       	cpi	r24, 0x02	; 2
     af6:	09 f0       	breq	.+2      	; 0xafa <main+0x91e>
     af8:	cc cc       	rjmp	.-1640   	; 0x492 <main+0x2b6>
							}

							break;

						case 2:	// address writing in eeprom
							if(addressReceived) {
     afa:	80 91 24 04 	lds	r24, 0x0424
     afe:	88 23       	and	r24, r24
     b00:	09 f4       	brne	.+2      	; 0xb04 <main+0x928>
     b02:	c7 cc       	rjmp	.-1650   	; 0x492 <main+0x2b6>
								turnOnGreenLeds();
     b04:	0e 94 d7 3b 	call	0x77ae	; 0x77ae <turnOnGreenLeds>
								eeprom_write_word((uint16_t*)4094, rfAddress);
     b08:	60 91 15 03 	lds	r22, 0x0315
     b0c:	70 91 16 03 	lds	r23, 0x0316
     b10:	8e ef       	ldi	r24, 0xFE	; 254
     b12:	9f e0       	ldi	r25, 0x0F	; 15
     b14:	0e 94 af 52 	call	0xa55e	; 0xa55e <__eewr_word_m2560>
								turnOffGreenLeds();
     b18:	0e 94 be 3b 	call	0x777c	; 0x777c <turnOffGreenLeds>
								usart0Transmit(0xAA, 1);	// successfully written
     b1c:	8a ea       	ldi	r24, 0xAA	; 170
     b1e:	61 e0       	ldi	r22, 0x01	; 1
     b20:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
								addressReceived = 0;
     b24:	10 92 24 04 	sts	0x0424, r1
								menuChoice = 0;
     b28:	10 92 23 04 	sts	0x0423, r1
     b2c:	80 91 4c 04 	lds	r24, 0x044C
     b30:	d0 cb       	rjmp	.-2144   	; 0x2d2 <main+0xf6>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
     b32:	84 30       	cpi	r24, 0x04	; 4
     b34:	09 f4       	brne	.+2      	; 0xb38 <main+0x95c>
     b36:	2a c4       	rjmp	.+2132   	; 0x138c <main+0x11b0>
     b38:	84 30       	cpi	r24, 0x04	; 4
     b3a:	08 f4       	brcc	.+2      	; 0xb3e <main+0x962>
     b3c:	e5 c4       	rjmp	.+2506   	; 0x1508 <main+0x132c>
     b3e:	85 30       	cpi	r24, 0x05	; 5
     b40:	09 f0       	breq	.+2      	; 0xb44 <main+0x968>
     b42:	96 cc       	rjmp	.-1748   	; 0x470 <main+0x294>
							//pwm_green = 0;
							//pwm_blue = 255;													
							break;

						case 5:	// turn around
							turnOffGreenLeds();
     b44:	0e 94 be 3b 	call	0x777c	; 0x777c <turnOffGreenLeds>
							GREEN_LED6_ON;
     b48:	80 91 0b 01 	lds	r24, 0x010B
     b4c:	8f 7b       	andi	r24, 0xBF	; 191
     b4e:	80 93 0b 01 	sts	0x010B, r24
							GREEN_LED7_ON;
     b52:	80 91 0b 01 	lds	r24, 0x010B
     b56:	8f 77       	andi	r24, 0x7F	; 127
     b58:	80 93 0b 01 	sts	0x010B, r24
							demoEndTime = getTime100MicroSec();
     b5c:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <getTime100MicroSec>
     b60:	9b 01       	movw	r18, r22
     b62:	ac 01       	movw	r20, r24
     b64:	60 93 5c 04 	sts	0x045C, r22
     b68:	70 93 5d 04 	sts	0x045D, r23
     b6c:	80 93 5e 04 	sts	0x045E, r24
     b70:	90 93 5f 04 	sts	0x045F, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_750_MSEC)) {
     b74:	80 91 54 04 	lds	r24, 0x0454
     b78:	90 91 55 04 	lds	r25, 0x0455
     b7c:	a0 91 56 04 	lds	r26, 0x0456
     b80:	b0 91 57 04 	lds	r27, 0x0457
     b84:	28 1b       	sub	r18, r24
     b86:	39 0b       	sbc	r19, r25
     b88:	4a 0b       	sbc	r20, r26
     b8a:	5b 0b       	sbc	r21, r27
     b8c:	2b 32       	cpi	r18, 0x2B	; 43
     b8e:	9c e1       	ldi	r25, 0x1C	; 28
     b90:	39 07       	cpc	r19, r25
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	49 07       	cpc	r20, r25
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	59 07       	cpc	r21, r25
     b9a:	08 f4       	brcc	.+2      	; 0xb9e <main+0x9c2>
     b9c:	69 cc       	rjmp	.-1838   	; 0x470 <main+0x294>
								demoStartTime = getTime100MicroSec();
     b9e:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <getTime100MicroSec>
     ba2:	60 93 54 04 	sts	0x0454, r22
     ba6:	70 93 55 04 	sts	0x0455, r23
     baa:	80 93 56 04 	sts	0x0456, r24
     bae:	90 93 57 04 	sts	0x0457, r25
								demoState = 0;							
     bb2:	10 92 50 04 	sts	0x0450, r1
     bb6:	5c cc       	rjmp	.-1864   	; 0x470 <main+0x294>
								demoState = 1;							
							}
							break;
					}	
					
					switch(rgbLedState) {
     bb8:	82 30       	cpi	r24, 0x02	; 2
     bba:	09 f0       	breq	.+2      	; 0xbbe <main+0x9e2>
     bbc:	10 ce       	rjmp	.-992    	; 0x7de <main+0x602>
							updateBlueLed(pwm_blue);
							rgbLedState = 2;
							break;

						case 2:
							if((getTime100MicroSec()-demoStartTime2) >= (PAUSE_500_MSEC)) {
     bbe:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <getTime100MicroSec>
     bc2:	9b 01       	movw	r18, r22
     bc4:	ac 01       	movw	r20, r24
     bc6:	80 91 58 04 	lds	r24, 0x0458
     bca:	90 91 59 04 	lds	r25, 0x0459
     bce:	a0 91 5a 04 	lds	r26, 0x045A
     bd2:	b0 91 5b 04 	lds	r27, 0x045B
     bd6:	28 1b       	sub	r18, r24
     bd8:	39 0b       	sbc	r19, r25
     bda:	4a 0b       	sbc	r20, r26
     bdc:	5b 0b       	sbc	r21, r27
     bde:	27 3c       	cpi	r18, 0xC7	; 199
     be0:	62 e1       	ldi	r22, 0x12	; 18
     be2:	36 07       	cpc	r19, r22
     be4:	60 e0       	ldi	r22, 0x00	; 0
     be6:	46 07       	cpc	r20, r22
     be8:	60 e0       	ldi	r22, 0x00	; 0
     bea:	56 07       	cpc	r21, r22
     bec:	08 f4       	brcc	.+2      	; 0xbf0 <main+0xa14>
     bee:	f7 cd       	rjmp	.-1042   	; 0x7de <main+0x602>
								rgbLedState = 0;
     bf0:	10 92 6b 04 	sts	0x046B, r1
								demoStartTime2 = getTime100MicroSec();
     bf4:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <getTime100MicroSec>
     bf8:	60 93 58 04 	sts	0x0458, r22
     bfc:	70 93 59 04 	sts	0x0459, r23
     c00:	80 93 5a 04 	sts	0x045A, r24
     c04:	90 93 5b 04 	sts	0x045B, r25
								demoEndTime = getTime100MicroSec();
     c08:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <getTime100MicroSec>
     c0c:	60 93 5c 04 	sts	0x045C, r22
     c10:	70 93 5d 04 	sts	0x045D, r23
     c14:	80 93 5e 04 	sts	0x045E, r24
     c18:	90 93 5f 04 	sts	0x045F, r25
								greenLedState = 0;
     c1c:	10 92 6a 04 	sts	0x046A, r1
								setGreenLed(greenLedState, 1);
     c20:	80 e0       	ldi	r24, 0x00	; 0
     c22:	61 e0       	ldi	r22, 0x01	; 1
     c24:	0e 94 21 3b 	call	0x7642	; 0x7642 <setGreenLed>
     c28:	80 91 4c 04 	lds	r24, 0x044C
     c2c:	52 cb       	rjmp	.-2396   	; 0x2d2 <main+0xf6>
							break;
					}
					break;

			case 10:// obstacle avoidance with random colors; 4 seconds motion and 10 seconds pause					
					switch(demoState) {
     c2e:	82 30       	cpi	r24, 0x02	; 2
     c30:	09 f0       	breq	.+2      	; 0xc34 <main+0xa58>
     c32:	dc cb       	rjmp	.-2120   	; 0x3ec <main+0x210>
								demoState = 2;							
							}
							break;

						case 2: // pause							
							if((getTime100MicroSec()-demoStartTime) >= (PAUSE_10_SEC)) {
     c34:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <getTime100MicroSec>
     c38:	9b 01       	movw	r18, r22
     c3a:	ac 01       	movw	r20, r24
     c3c:	80 91 54 04 	lds	r24, 0x0454
     c40:	90 91 55 04 	lds	r25, 0x0455
     c44:	a0 91 56 04 	lds	r26, 0x0456
     c48:	b0 91 57 04 	lds	r27, 0x0457
     c4c:	28 1b       	sub	r18, r24
     c4e:	39 0b       	sbc	r19, r25
     c50:	4a 0b       	sbc	r20, r26
     c52:	5b 0b       	sbc	r21, r27
     c54:	2a 39       	cpi	r18, 0x9A	; 154
     c56:	97 e7       	ldi	r25, 0x77	; 119
     c58:	39 07       	cpc	r19, r25
     c5a:	91 e0       	ldi	r25, 0x01	; 1
     c5c:	49 07       	cpc	r20, r25
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	59 07       	cpc	r21, r25
     c62:	08 f4       	brcc	.+2      	; 0xc66 <main+0xa8a>
     c64:	c3 cb       	rjmp	.-2170   	; 0x3ec <main+0x210>
								setRightSpeed(20);
     c66:	84 e1       	ldi	r24, 0x14	; 20
     c68:	0e 94 cc 26 	call	0x4d98	; 0x4d98 <setRightSpeed>
								setLeftSpeed(20);								
     c6c:	84 e1       	ldi	r24, 0x14	; 20
     c6e:	0e 94 af 26 	call	0x4d5e	; 0x4d5e <setLeftSpeed>
								demoStartTime = getTime100MicroSec();								
     c72:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <getTime100MicroSec>
     c76:	60 93 54 04 	sts	0x0454, r22
     c7a:	70 93 55 04 	sts	0x0455, r23
     c7e:	80 93 56 04 	sts	0x0456, r24
     c82:	90 93 57 04 	sts	0x0457, r25
								demoState = 1;							
     c86:	20 92 50 04 	sts	0x0450, r2
							}
							break;
					}	
					
					switch(rgbLedState) {
     c8a:	80 91 6b 04 	lds	r24, 0x046B
     c8e:	81 30       	cpi	r24, 0x01	; 1
     c90:	09 f0       	breq	.+2      	; 0xc94 <main+0xab8>
     c92:	b1 cb       	rjmp	.-2206   	; 0x3f6 <main+0x21a>
							updateGreenLed(pwm_green);
							updateBlueLed(pwm_blue);
							break;

						case 1:		
							turnOffGreenLeds();					
     c94:	0e 94 be 3b 	call	0x777c	; 0x777c <turnOffGreenLeds>
							currRand = rand()% 128;	// 0 to 255 is the maximum, we use 0 to 127 to get brighter colors
     c98:	0e 94 44 52 	call	0xa488	; 0xa488 <rand>
     c9c:	60 e8       	ldi	r22, 0x80	; 128
     c9e:	70 e0       	ldi	r23, 0x00	; 0
     ca0:	0e 94 a6 51 	call	0xa34c	; 0xa34c <__divmodhi4>
							if(currRand > 95) {
     ca4:	80 36       	cpi	r24, 0x60	; 96
     ca6:	91 05       	cpc	r25, r1
     ca8:	08 f4       	brcc	.+2      	; 0xcac <main+0xad0>
     caa:	a6 c4       	rjmp	.+2380   	; 0x15f8 <main+0x141c>
								pwm_red = 255;
     cac:	10 93 0c 02 	sts	0x020C, r17
							} else {
								pwm_red = currRand;
							}

							currRand = rand()% 128;
     cb0:	0e 94 44 52 	call	0xa488	; 0xa488 <rand>
     cb4:	60 e8       	ldi	r22, 0x80	; 128
     cb6:	70 e0       	ldi	r23, 0x00	; 0
     cb8:	0e 94 a6 51 	call	0xa34c	; 0xa34c <__divmodhi4>
							if(currRand > 95) {
     cbc:	80 36       	cpi	r24, 0x60	; 96
     cbe:	91 05       	cpc	r25, r1
     cc0:	08 f4       	brcc	.+2      	; 0xcc4 <main+0xae8>
     cc2:	97 c4       	rjmp	.+2350   	; 0x15f2 <main+0x1416>
								pwm_green = 255;
     cc4:	10 93 0d 02 	sts	0x020D, r17
							} else {
								pwm_green = currRand;
							}

							currRand = rand()% 128;
     cc8:	0e 94 44 52 	call	0xa488	; 0xa488 <rand>
     ccc:	60 e8       	ldi	r22, 0x80	; 128
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	0e 94 a6 51 	call	0xa34c	; 0xa34c <__divmodhi4>
							if(currRand > 95) {
     cd4:	80 36       	cpi	r24, 0x60	; 96
     cd6:	91 05       	cpc	r25, r1
     cd8:	08 f4       	brcc	.+2      	; 0xcdc <main+0xb00>
     cda:	88 c4       	rjmp	.+2320   	; 0x15ec <main+0x1410>
								pwm_blue = 255;
     cdc:	10 93 0e 02 	sts	0x020E, r17
							} else {
								pwm_blue = currRand;
							}

							currRand = rand()% 200;
     ce0:	0e 94 44 52 	call	0xa488	; 0xa488 <rand>
     ce4:	68 ec       	ldi	r22, 0xC8	; 200
     ce6:	70 e0       	ldi	r23, 0x00	; 0
     ce8:	0e 94 a6 51 	call	0xa34c	; 0xa34c <__divmodhi4>
     cec:	5c 01       	movw	r10, r24
							if(currRand<50) {
     cee:	82 33       	cpi	r24, 0x32	; 50
     cf0:	91 05       	cpc	r25, r1
     cf2:	08 f0       	brcs	.+2      	; 0xcf6 <main+0xb1a>
     cf4:	72 c4       	rjmp	.+2276   	; 0x15da <main+0x13fe>
								pwm_red = 255;
     cf6:	10 93 0c 02 	sts	0x020C, r17
     cfa:	8f ef       	ldi	r24, 0xFF	; 255
							} else if(currRand<100) {
								pwm_green = 255;
							} else if (currRand<150) {	
								pwm_blue = 255;
							}
							updateRedLed(pwm_red);
     cfc:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <updateRedLed>
							updateGreenLed(pwm_green);
     d00:	80 91 0d 02 	lds	r24, 0x020D
     d04:	0e 94 f9 3a 	call	0x75f2	; 0x75f2 <updateGreenLed>
							updateBlueLed(pwm_blue);
     d08:	80 91 0e 02 	lds	r24, 0x020E
     d0c:	0e 94 0d 3b 	call	0x761a	; 0x761a <updateBlueLed>
							rgbLedState = 2;
     d10:	52 e0       	ldi	r21, 0x02	; 2
     d12:	50 93 6b 04 	sts	0x046B, r21
     d16:	80 91 4c 04 	lds	r24, 0x044C
							break;
     d1a:	db ca       	rjmp	.-2634   	; 0x2d2 <main+0xf6>
				
				if(currRand<32) {
					if(pwm_green!=255 && pwm_blue!=255) {	// do not turn on all leds
						pwm_red = 255;
					}
				} else if(currRand<64) {
     d1c:	90 e4       	ldi	r25, 0x40	; 64
     d1e:	a9 16       	cp	r10, r25
     d20:	b1 04       	cpc	r11, r1
     d22:	08 f0       	brcs	.+2      	; 0xd26 <main+0xb4a>
     d24:	21 c3       	rjmp	.+1602   	; 0x1368 <main+0x118c>
					if(pwm_red!=255 && pwm_blue!=255) {
     d26:	80 91 0c 02 	lds	r24, 0x020C
     d2a:	8f 3f       	cpi	r24, 0xFF	; 255
     d2c:	09 f4       	brne	.+2      	; 0xd30 <main+0xb54>
     d2e:	f5 cc       	rjmp	.-1558   	; 0x71a <main+0x53e>
     d30:	80 91 0e 02 	lds	r24, 0x020E
     d34:	8f 3f       	cpi	r24, 0xFF	; 255
     d36:	09 f4       	brne	.+2      	; 0xd3a <main+0xb5e>
     d38:	f0 cc       	rjmp	.-1568   	; 0x71a <main+0x53e>
						pwm_green = 255;
     d3a:	10 93 0d 02 	sts	0x020D, r17
     d3e:	ed cc       	rjmp	.-1574   	; 0x71a <main+0x53e>
			
				srand(TCNT3);
				currRand2 = rand()%128;
				if(currRand2<32) {
					pwm_red = 255;
				} else if(currRand2<64) {
     d40:	80 34       	cpi	r24, 0x40	; 64
     d42:	91 05       	cpc	r25, r1
     d44:	08 f0       	brcs	.+2      	; 0xd48 <main+0xb6c>
     d46:	26 c4       	rjmp	.+2124   	; 0x1594 <main+0x13b8>
					pwm_green = 255;
     d48:	10 93 0d 02 	sts	0x020D, r17
     d4c:	b3 ce       	rjmp	.-666    	; 0xab4 <main+0x8d8>
							setLeftSpeed(20);
							setRightSpeed(20);
							demoState = 1;
							break;
						case 1: // motion					
							if((getTime100MicroSec()-demoStartTime) >= (PAUSE_4_SEC)) {
     d4e:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <getTime100MicroSec>
     d52:	9b 01       	movw	r18, r22
     d54:	ac 01       	movw	r20, r24
     d56:	80 91 54 04 	lds	r24, 0x0454
     d5a:	90 91 55 04 	lds	r25, 0x0455
     d5e:	a0 91 56 04 	lds	r26, 0x0456
     d62:	b0 91 57 04 	lds	r27, 0x0457
     d66:	28 1b       	sub	r18, r24
     d68:	39 0b       	sbc	r19, r25
     d6a:	4a 0b       	sbc	r20, r26
     d6c:	5b 0b       	sbc	r21, r27
     d6e:	2e 33       	cpi	r18, 0x3E	; 62
     d70:	66 e9       	ldi	r22, 0x96	; 150
     d72:	36 07       	cpc	r19, r22
     d74:	60 e0       	ldi	r22, 0x00	; 0
     d76:	46 07       	cpc	r20, r22
     d78:	60 e0       	ldi	r22, 0x00	; 0
     d7a:	56 07       	cpc	r21, r22
     d7c:	08 f4       	brcc	.+2      	; 0xd80 <main+0xba4>
     d7e:	36 cb       	rjmp	.-2452   	; 0x3ec <main+0x210>
								setRightSpeed(0);
     d80:	80 e0       	ldi	r24, 0x00	; 0
     d82:	0e 94 cc 26 	call	0x4d98	; 0x4d98 <setRightSpeed>
								setLeftSpeed(0);								
     d86:	80 e0       	ldi	r24, 0x00	; 0
     d88:	0e 94 af 26 	call	0x4d5e	; 0x4d5e <setLeftSpeed>
								demoStartTime = getTime100MicroSec();
     d8c:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <getTime100MicroSec>
     d90:	60 93 54 04 	sts	0x0454, r22
     d94:	70 93 55 04 	sts	0x0455, r23
     d98:	80 93 56 04 	sts	0x0456, r24
     d9c:	90 93 57 04 	sts	0x0457, r25
								demoState = 2;							
     da0:	82 e0       	ldi	r24, 0x02	; 2
     da2:	80 93 50 04 	sts	0x0450, r24
     da6:	22 cb       	rjmp	.-2492   	; 0x3ec <main+0x210>
						//setRightSpeed(-15);
						demoState = 1;
						break;

					case 1:						
						irCommSendData(irCommRxByteExpected, 0x01);	
     da8:	80 91 fd 04 	lds	r24, 0x04FD
     dac:	61 e0       	ldi	r22, 0x01	; 1
     dae:	0e 94 4c 4e 	call	0x9c98	; 0x9c98 <irCommSendData>
						//irCommSendData(irCommRxByteExpected, 0xFF);												
						demoState = 2;
     db2:	82 e0       	ldi	r24, 0x02	; 2
     db4:	80 93 50 04 	sts	0x0450, r24
     db8:	80 91 4c 04 	lds	r24, 0x044C
						break;
     dbc:	8a ca       	rjmp	.-2796   	; 0x2d2 <main+0xf6>
							demoStartTime = getTime100MicroSec();
							demoState = 1;
							break;

						case 1:
							if((getTime100MicroSec()-demoStartTime) >= (PAUSE_2_SEC)) {
     dbe:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <getTime100MicroSec>
     dc2:	9b 01       	movw	r18, r22
     dc4:	ac 01       	movw	r20, r24
     dc6:	80 91 54 04 	lds	r24, 0x0454
     dca:	90 91 55 04 	lds	r25, 0x0455
     dce:	a0 91 56 04 	lds	r26, 0x0456
     dd2:	b0 91 57 04 	lds	r27, 0x0457
     dd6:	28 1b       	sub	r18, r24
     dd8:	39 0b       	sbc	r19, r25
     dda:	4a 0b       	sbc	r20, r26
     ddc:	5b 0b       	sbc	r21, r27
     dde:	2e 31       	cpi	r18, 0x1E	; 30
     de0:	eb e4       	ldi	r30, 0x4B	; 75
     de2:	3e 07       	cpc	r19, r30
     de4:	e0 e0       	ldi	r30, 0x00	; 0
     de6:	4e 07       	cpc	r20, r30
     de8:	e0 e0       	ldi	r30, 0x00	; 0
     dea:	5e 07       	cpc	r21, r30
     dec:	08 f4       	brcc	.+2      	; 0xdf0 <main+0xc14>
     dee:	f7 cc       	rjmp	.-1554   	; 0x7de <main+0x602>
								demoState = 2;
     df0:	f2 e0       	ldi	r31, 0x02	; 2
     df2:	f0 93 50 04 	sts	0x0450, r31
     df6:	80 91 4c 04 	lds	r24, 0x044C
     dfa:	6b ca       	rjmp	.-2858   	; 0x2d2 <main+0xf6>
							break;

						case 1:	// send sensors data and activate actuators
							//setRightSpeed(20);
							//setLeftSpeed(20);
							turnOnGreenLeds();
     dfc:	0e 94 d7 3b 	call	0x77ae	; 0x77ae <turnOnGreenLeds>
							updateRedLed(pwm_red);
     e00:	80 91 0c 02 	lds	r24, 0x020C
     e04:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <updateRedLed>
							updateGreenLed(pwm_green);
     e08:	80 91 0d 02 	lds	r24, 0x020D
     e0c:	0e 94 f9 3a 	call	0x75f2	; 0x75f2 <updateGreenLed>
							updateBlueLed(pwm_blue);
     e10:	80 91 0e 02 	lds	r24, 0x020E
     e14:	0e 94 0d 3b 	call	0x761a	; 0x761a <updateBlueLed>
							LED_IR1_LOW;
     e18:	44 98       	cbi	0x08, 4	; 8
							LED_IR2_LOW;
     e1a:	45 98       	cbi	0x08, 5	; 8
							
							if(getDataNow) {
     e1c:	80 91 26 04 	lds	r24, 0x0426
     e20:	88 23       	and	r24, r24
     e22:	09 f4       	brne	.+2      	; 0xe26 <main+0xc4a>
     e24:	dc cc       	rjmp	.-1608   	; 0x7de <main+0x602>
								getDataNow = 0;	
     e26:	10 92 26 04 	sts	0x0426, r1
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     e2a:	80 91 59 02 	lds	r24, 0x0259
     e2e:	61 e0       	ldi	r22, 0x01	; 1
     e30:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     e34:	80 91 5a 02 	lds	r24, 0x025A
     e38:	61 e0       	ldi	r22, 0x01	; 1
     e3a:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     e3e:	80 91 29 02 	lds	r24, 0x0229
     e42:	90 91 2a 02 	lds	r25, 0x022A
     e46:	61 e0       	ldi	r22, 0x01	; 1
     e48:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     e4c:	80 91 29 02 	lds	r24, 0x0229
     e50:	90 91 2a 02 	lds	r25, 0x022A
     e54:	89 2f       	mov	r24, r25
     e56:	61 e0       	ldi	r22, 0x01	; 1
     e58:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     e5c:	80 91 5b 02 	lds	r24, 0x025B
     e60:	61 e0       	ldi	r22, 0x01	; 1
     e62:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     e66:	80 91 5c 02 	lds	r24, 0x025C
     e6a:	61 e0       	ldi	r22, 0x01	; 1
     e6c:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     e70:	80 91 2d 02 	lds	r24, 0x022D
     e74:	90 91 2e 02 	lds	r25, 0x022E
     e78:	61 e0       	ldi	r22, 0x01	; 1
     e7a:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     e7e:	80 91 2d 02 	lds	r24, 0x022D
     e82:	90 91 2e 02 	lds	r25, 0x022E
     e86:	89 2f       	mov	r24, r25
     e88:	61 e0       	ldi	r22, 0x01	; 1
     e8a:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     e8e:	80 91 5d 02 	lds	r24, 0x025D
     e92:	61 e0       	ldi	r22, 0x01	; 1
     e94:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     e98:	80 91 5e 02 	lds	r24, 0x025E
     e9c:	61 e0       	ldi	r22, 0x01	; 1
     e9e:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     ea2:	80 91 31 02 	lds	r24, 0x0231
     ea6:	90 91 32 02 	lds	r25, 0x0232
     eaa:	61 e0       	ldi	r22, 0x01	; 1
     eac:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     eb0:	80 91 31 02 	lds	r24, 0x0231
     eb4:	90 91 32 02 	lds	r25, 0x0232
     eb8:	89 2f       	mov	r24, r25
     eba:	61 e0       	ldi	r22, 0x01	; 1
     ebc:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     ec0:	80 91 5f 02 	lds	r24, 0x025F
     ec4:	61 e0       	ldi	r22, 0x01	; 1
     ec6:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     eca:	80 91 60 02 	lds	r24, 0x0260
     ece:	61 e0       	ldi	r22, 0x01	; 1
     ed0:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     ed4:	80 91 35 02 	lds	r24, 0x0235
     ed8:	90 91 36 02 	lds	r25, 0x0236
     edc:	61 e0       	ldi	r22, 0x01	; 1
     ede:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     ee2:	80 91 35 02 	lds	r24, 0x0235
     ee6:	90 91 36 02 	lds	r25, 0x0236
     eea:	89 2f       	mov	r24, r25
     eec:	61 e0       	ldi	r22, 0x01	; 1
     eee:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     ef2:	80 91 61 02 	lds	r24, 0x0261
     ef6:	61 e0       	ldi	r22, 0x01	; 1
     ef8:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     efc:	80 91 62 02 	lds	r24, 0x0262
     f00:	61 e0       	ldi	r22, 0x01	; 1
     f02:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     f06:	80 91 39 02 	lds	r24, 0x0239
     f0a:	90 91 3a 02 	lds	r25, 0x023A
     f0e:	61 e0       	ldi	r22, 0x01	; 1
     f10:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     f14:	80 91 39 02 	lds	r24, 0x0239
     f18:	90 91 3a 02 	lds	r25, 0x023A
     f1c:	89 2f       	mov	r24, r25
     f1e:	61 e0       	ldi	r22, 0x01	; 1
     f20:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     f24:	80 91 63 02 	lds	r24, 0x0263
     f28:	61 e0       	ldi	r22, 0x01	; 1
     f2a:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     f2e:	80 91 64 02 	lds	r24, 0x0264
     f32:	61 e0       	ldi	r22, 0x01	; 1
     f34:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     f38:	80 91 3d 02 	lds	r24, 0x023D
     f3c:	90 91 3e 02 	lds	r25, 0x023E
     f40:	61 e0       	ldi	r22, 0x01	; 1
     f42:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     f46:	80 91 3d 02 	lds	r24, 0x023D
     f4a:	90 91 3e 02 	lds	r25, 0x023E
     f4e:	89 2f       	mov	r24, r25
     f50:	61 e0       	ldi	r22, 0x01	; 1
     f52:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     f56:	80 91 65 02 	lds	r24, 0x0265
     f5a:	61 e0       	ldi	r22, 0x01	; 1
     f5c:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     f60:	80 91 66 02 	lds	r24, 0x0266
     f64:	61 e0       	ldi	r22, 0x01	; 1
     f66:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     f6a:	80 91 41 02 	lds	r24, 0x0241
     f6e:	90 91 42 02 	lds	r25, 0x0242
     f72:	61 e0       	ldi	r22, 0x01	; 1
     f74:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     f78:	80 91 41 02 	lds	r24, 0x0241
     f7c:	90 91 42 02 	lds	r25, 0x0242
     f80:	89 2f       	mov	r24, r25
     f82:	61 e0       	ldi	r22, 0x01	; 1
     f84:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     f88:	80 91 67 02 	lds	r24, 0x0267
     f8c:	61 e0       	ldi	r22, 0x01	; 1
     f8e:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     f92:	80 91 68 02 	lds	r24, 0x0268
     f96:	61 e0       	ldi	r22, 0x01	; 1
     f98:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     f9c:	80 91 45 02 	lds	r24, 0x0245
     fa0:	90 91 46 02 	lds	r25, 0x0246
     fa4:	61 e0       	ldi	r22, 0x01	; 1
     fa6:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     faa:	80 91 45 02 	lds	r24, 0x0245
     fae:	90 91 46 02 	lds	r25, 0x0246
     fb2:	89 2f       	mov	r24, r25
     fb4:	61 e0       	ldi	r22, 0x01	; 1
     fb6:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     fba:	80 91 69 02 	lds	r24, 0x0269
     fbe:	61 e0       	ldi	r22, 0x01	; 1
     fc0:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     fc4:	80 91 6a 02 	lds	r24, 0x026A
     fc8:	61 e0       	ldi	r22, 0x01	; 1
     fca:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     fce:	80 91 49 02 	lds	r24, 0x0249
     fd2:	90 91 4a 02 	lds	r25, 0x024A
     fd6:	61 e0       	ldi	r22, 0x01	; 1
     fd8:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     fdc:	80 91 49 02 	lds	r24, 0x0249
     fe0:	90 91 4a 02 	lds	r25, 0x024A
     fe4:	89 2f       	mov	r24, r25
     fe6:	61 e0       	ldi	r22, 0x01	; 1
     fe8:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     fec:	80 91 6b 02 	lds	r24, 0x026B
     ff0:	61 e0       	ldi	r22, 0x01	; 1
     ff2:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     ff6:	80 91 6c 02 	lds	r24, 0x026C
     ffa:	61 e0       	ldi	r22, 0x01	; 1
     ffc:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
    1000:	80 91 4d 02 	lds	r24, 0x024D
    1004:	90 91 4e 02 	lds	r25, 0x024E
    1008:	61 e0       	ldi	r22, 0x01	; 1
    100a:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
    100e:	80 91 4d 02 	lds	r24, 0x024D
    1012:	90 91 4e 02 	lds	r25, 0x024E
    1016:	89 2f       	mov	r24, r25
    1018:	61 e0       	ldi	r22, 0x01	; 1
    101a:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
    101e:	80 91 6d 02 	lds	r24, 0x026D
    1022:	61 e0       	ldi	r22, 0x01	; 1
    1024:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
    1028:	80 91 6e 02 	lds	r24, 0x026E
    102c:	61 e0       	ldi	r22, 0x01	; 1
    102e:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
    1032:	80 91 51 02 	lds	r24, 0x0251
    1036:	90 91 52 02 	lds	r25, 0x0252
    103a:	61 e0       	ldi	r22, 0x01	; 1
    103c:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
    1040:	80 91 51 02 	lds	r24, 0x0251
    1044:	90 91 52 02 	lds	r25, 0x0252
    1048:	89 2f       	mov	r24, r25
    104a:	61 e0       	ldi	r22, 0x01	; 1
    104c:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
    1050:	80 91 6f 02 	lds	r24, 0x026F
    1054:	61 e0       	ldi	r22, 0x01	; 1
    1056:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
    105a:	80 91 70 02 	lds	r24, 0x0270
    105e:	61 e0       	ldi	r22, 0x01	; 1
    1060:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
    1064:	80 91 55 02 	lds	r24, 0x0255
    1068:	90 91 56 02 	lds	r25, 0x0256
    106c:	61 e0       	ldi	r22, 0x01	; 1
    106e:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
    1072:	80 91 55 02 	lds	r24, 0x0255
    1076:	90 91 56 02 	lds	r25, 0x0256
    107a:	89 2f       	mov	r24, r25
    107c:	61 e0       	ldi	r22, 0x01	; 1
    107e:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
								}
								usart0Transmit(accX&0xFF,1);
    1082:	80 91 2c 04 	lds	r24, 0x042C
    1086:	61 e0       	ldi	r22, 0x01	; 1
    1088:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
								usart0Transmit(accX>>8,1);
    108c:	80 91 2d 04 	lds	r24, 0x042D
    1090:	61 e0       	ldi	r22, 0x01	; 1
    1092:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
								usart0Transmit(accY&0xFF,1);
    1096:	80 91 2e 04 	lds	r24, 0x042E
    109a:	61 e0       	ldi	r22, 0x01	; 1
    109c:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
								usart0Transmit(accY>>8,1);
    10a0:	80 91 2f 04 	lds	r24, 0x042F
    10a4:	61 e0       	ldi	r22, 0x01	; 1
    10a6:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
								usart0Transmit(accZ&0xFF,1);
    10aa:	80 91 30 04 	lds	r24, 0x0430
    10ae:	61 e0       	ldi	r22, 0x01	; 1
    10b0:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
								usart0Transmit(accZ>>8,1);
    10b4:	80 91 31 04 	lds	r24, 0x0431
    10b8:	61 e0       	ldi	r22, 0x01	; 1
    10ba:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
								usart0Transmit(irCommand,1);
    10be:	80 91 27 04 	lds	r24, 0x0427
    10c2:	61 e0       	ldi	r22, 0x01	; 1
    10c4:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
								usart0Transmit(currentSelector,1);
    10c8:	80 91 4c 04 	lds	r24, 0x044C
    10cc:	61 e0       	ldi	r22, 0x01	; 1
    10ce:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
								usart0Transmit(BUTTON0,1);
    10d2:	80 91 03 01 	lds	r24, 0x0103
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	80 72       	andi	r24, 0x20	; 32
    10da:	90 70       	andi	r25, 0x00	; 0
    10dc:	95 95       	asr	r25
    10de:	87 95       	ror	r24
    10e0:	95 95       	asr	r25
    10e2:	87 95       	ror	r24
    10e4:	95 95       	asr	r25
    10e6:	87 95       	ror	r24
    10e8:	95 95       	asr	r25
    10ea:	87 95       	ror	r24
    10ec:	95 95       	asr	r25
    10ee:	87 95       	ror	r24
    10f0:	61 e0       	ldi	r22, 0x01	; 1
    10f2:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
								usart0Transmit(rfFlags,1);
    10f6:	80 91 17 03 	lds	r24, 0x0317
    10fa:	61 e0       	ldi	r22, 0x01	; 1
    10fc:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
								usart0Transmit(((unsigned int)(theta*573.0))&0xFF,1);	// radians to degrees => 573 = 1800/PI
    1100:	60 91 6f 04 	lds	r22, 0x046F
    1104:	70 91 70 04 	lds	r23, 0x0470
    1108:	80 91 71 04 	lds	r24, 0x0471
    110c:	90 91 72 04 	lds	r25, 0x0472
    1110:	20 e0       	ldi	r18, 0x00	; 0
    1112:	30 e4       	ldi	r19, 0x40	; 64
    1114:	4f e0       	ldi	r20, 0x0F	; 15
    1116:	54 e4       	ldi	r21, 0x44	; 68
    1118:	0e 94 e8 50 	call	0xa1d0	; 0xa1d0 <__mulsf3>
    111c:	0e 94 a5 4f 	call	0x9f4a	; 0x9f4a <__fixunssfsi>
    1120:	86 2f       	mov	r24, r22
    1122:	61 e0       	ldi	r22, 0x01	; 1
    1124:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
								usart0Transmit(((unsigned int)(theta*573.0))>>8,1);
    1128:	60 91 6f 04 	lds	r22, 0x046F
    112c:	70 91 70 04 	lds	r23, 0x0470
    1130:	80 91 71 04 	lds	r24, 0x0471
    1134:	90 91 72 04 	lds	r25, 0x0472
    1138:	20 e0       	ldi	r18, 0x00	; 0
    113a:	30 e4       	ldi	r19, 0x40	; 64
    113c:	4f e0       	ldi	r20, 0x0F	; 15
    113e:	54 e4       	ldi	r21, 0x44	; 68
    1140:	0e 94 e8 50 	call	0xa1d0	; 0xa1d0 <__mulsf3>
    1144:	0e 94 a5 4f 	call	0x9f4a	; 0x9f4a <__fixunssfsi>
    1148:	87 2f       	mov	r24, r23
    114a:	61 e0       	ldi	r22, 0x01	; 1
    114c:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
								usart0Transmit(((unsigned int)xPos)&0xFF,1);
    1150:	60 91 77 04 	lds	r22, 0x0477
    1154:	70 91 78 04 	lds	r23, 0x0478
    1158:	80 91 79 04 	lds	r24, 0x0479
    115c:	90 91 7a 04 	lds	r25, 0x047A
    1160:	0e 94 a5 4f 	call	0x9f4a	; 0x9f4a <__fixunssfsi>
    1164:	86 2f       	mov	r24, r22
    1166:	61 e0       	ldi	r22, 0x01	; 1
    1168:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
								usart0Transmit(((unsigned int)xPos)>>8,1);
    116c:	60 91 77 04 	lds	r22, 0x0477
    1170:	70 91 78 04 	lds	r23, 0x0478
    1174:	80 91 79 04 	lds	r24, 0x0479
    1178:	90 91 7a 04 	lds	r25, 0x047A
    117c:	0e 94 a5 4f 	call	0x9f4a	; 0x9f4a <__fixunssfsi>
    1180:	87 2f       	mov	r24, r23
    1182:	61 e0       	ldi	r22, 0x01	; 1
    1184:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
								usart0Transmit(((unsigned int)yPos)&0xFF,1);
    1188:	60 91 7b 04 	lds	r22, 0x047B
    118c:	70 91 7c 04 	lds	r23, 0x047C
    1190:	80 91 7d 04 	lds	r24, 0x047D
    1194:	90 91 7e 04 	lds	r25, 0x047E
    1198:	0e 94 a5 4f 	call	0x9f4a	; 0x9f4a <__fixunssfsi>
    119c:	86 2f       	mov	r24, r22
    119e:	61 e0       	ldi	r22, 0x01	; 1
    11a0:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
								usart0Transmit(((unsigned int)yPos)>>8,1);
    11a4:	60 91 7b 04 	lds	r22, 0x047B
    11a8:	70 91 7c 04 	lds	r23, 0x047C
    11ac:	80 91 7d 04 	lds	r24, 0x047D
    11b0:	90 91 7e 04 	lds	r25, 0x047E
    11b4:	0e 94 a5 4f 	call	0x9f4a	; 0x9f4a <__fixunssfsi>
    11b8:	87 2f       	mov	r24, r23
    11ba:	61 e0       	ldi	r22, 0x01	; 1
    11bc:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)&0xFF,1);
    11c0:	60 91 d5 02 	lds	r22, 0x02D5
    11c4:	70 91 d6 02 	lds	r23, 0x02D6
    11c8:	80 91 d7 02 	lds	r24, 0x02D7
    11cc:	90 91 d8 02 	lds	r25, 0x02D8
    11d0:	0e 94 a0 4f 	call	0x9f40	; 0x9f40 <__fixsfsi>
    11d4:	86 2f       	mov	r24, r22
    11d6:	61 e0       	ldi	r22, 0x01	; 1
    11d8:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)>>8,1);
    11dc:	60 91 d5 02 	lds	r22, 0x02D5
    11e0:	70 91 d6 02 	lds	r23, 0x02D6
    11e4:	80 91 d7 02 	lds	r24, 0x02D7
    11e8:	90 91 d8 02 	lds	r25, 0x02D8
    11ec:	0e 94 a0 4f 	call	0x9f40	; 0x9f40 <__fixsfsi>
    11f0:	87 2f       	mov	r24, r23
    11f2:	61 e0       	ldi	r22, 0x01	; 1
    11f4:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)>>16,1);
    11f8:	60 91 d5 02 	lds	r22, 0x02D5
    11fc:	70 91 d6 02 	lds	r23, 0x02D6
    1200:	80 91 d7 02 	lds	r24, 0x02D7
    1204:	90 91 d8 02 	lds	r25, 0x02D8
    1208:	0e 94 a0 4f 	call	0x9f40	; 0x9f40 <__fixsfsi>
    120c:	61 e0       	ldi	r22, 0x01	; 1
    120e:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)>>24,1);
    1212:	60 91 d5 02 	lds	r22, 0x02D5
    1216:	70 91 d6 02 	lds	r23, 0x02D6
    121a:	80 91 d7 02 	lds	r24, 0x02D7
    121e:	90 91 d8 02 	lds	r25, 0x02D8
    1222:	0e 94 a0 4f 	call	0x9f40	; 0x9f40 <__fixsfsi>
    1226:	89 2f       	mov	r24, r25
    1228:	61 e0       	ldi	r22, 0x01	; 1
    122a:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)&0xFF,1);
    122e:	60 91 d1 02 	lds	r22, 0x02D1
    1232:	70 91 d2 02 	lds	r23, 0x02D2
    1236:	80 91 d3 02 	lds	r24, 0x02D3
    123a:	90 91 d4 02 	lds	r25, 0x02D4
    123e:	0e 94 a0 4f 	call	0x9f40	; 0x9f40 <__fixsfsi>
    1242:	86 2f       	mov	r24, r22
    1244:	61 e0       	ldi	r22, 0x01	; 1
    1246:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)>>8,1);
    124a:	60 91 d1 02 	lds	r22, 0x02D1
    124e:	70 91 d2 02 	lds	r23, 0x02D2
    1252:	80 91 d3 02 	lds	r24, 0x02D3
    1256:	90 91 d4 02 	lds	r25, 0x02D4
    125a:	0e 94 a0 4f 	call	0x9f40	; 0x9f40 <__fixsfsi>
    125e:	87 2f       	mov	r24, r23
    1260:	61 e0       	ldi	r22, 0x01	; 1
    1262:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)>>16,1);
    1266:	60 91 d1 02 	lds	r22, 0x02D1
    126a:	70 91 d2 02 	lds	r23, 0x02D2
    126e:	80 91 d3 02 	lds	r24, 0x02D3
    1272:	90 91 d4 02 	lds	r25, 0x02D4
    1276:	0e 94 a0 4f 	call	0x9f40	; 0x9f40 <__fixsfsi>
    127a:	61 e0       	ldi	r22, 0x01	; 1
    127c:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)>>24,1);
    1280:	60 91 d1 02 	lds	r22, 0x02D1
    1284:	70 91 d2 02 	lds	r23, 0x02D2
    1288:	80 91 d3 02 	lds	r24, 0x02D3
    128c:	90 91 d4 02 	lds	r25, 0x02D4
    1290:	0e 94 a0 4f 	call	0x9f40	; 0x9f40 <__fixsfsi>
    1294:	89 2f       	mov	r24, r25
    1296:	61 e0       	ldi	r22, 0x01	; 1
    1298:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
								usart0Transmit(pwm_left_desired>>2, 1);
    129c:	80 91 fb 02 	lds	r24, 0x02FB
    12a0:	90 91 fc 02 	lds	r25, 0x02FC
    12a4:	95 95       	asr	r25
    12a6:	87 95       	ror	r24
    12a8:	95 95       	asr	r25
    12aa:	87 95       	ror	r24
    12ac:	61 e0       	ldi	r22, 0x01	; 1
    12ae:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
								usart0Transmit(pwm_right_desired>>2, 1);
    12b2:	80 91 f9 02 	lds	r24, 0x02F9
    12b6:	90 91 fa 02 	lds	r25, 0x02FA
    12ba:	95 95       	asr	r25
    12bc:	87 95       	ror	r24
    12be:	95 95       	asr	r25
    12c0:	87 95       	ror	r24
    12c2:	61 e0       	ldi	r22, 0x01	; 1
    12c4:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
    12c8:	80 91 4c 04 	lds	r24, 0x044C
    12cc:	02 c8       	rjmp	.-4092   	; 0x2d2 <main+0xf6>
			readBatteryLevel();				// the battery level is updated every two seconds
             		
			if(currentSelector==4 || currentSelector==5) {
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption

				switch(rgbState) {
    12ce:	82 30       	cpi	r24, 0x02	; 2
    12d0:	09 f0       	breq	.+2      	; 0x12d4 <main+0x10f8>
    12d2:	83 cb       	rjmp	.-2298   	; 0x9da <main+0x7fe>
						pwm_green = 255 - currRand;
						rgbState = 2;
						break;

					case 2:
						pwm_blue = 255 - currRand;
    12d4:	8a 2d       	mov	r24, r10
    12d6:	80 95       	com	r24
    12d8:	80 93 0e 02 	sts	0x020E, r24
						rgbState = 0;
    12dc:	10 92 1c 03 	sts	0x031C, r1
						break;
    12e0:	7c cb       	rjmp	.-2312   	; 0x9da <main+0x7fe>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
    12e2:	81 30       	cpi	r24, 0x01	; 1
    12e4:	09 f0       	breq	.+2      	; 0x12e8 <main+0x110c>
    12e6:	c4 c8       	rjmp	.-3704   	; 0x470 <main+0x294>
							//pwm_green = 255;
							//pwm_blue = 255;
							break;

						case 1:	// search for a line
							turnOffGreenLeds();
    12e8:	0e 94 be 3b 	call	0x777c	; 0x777c <turnOffGreenLeds>
							GREEN_LED2_ON;
    12ec:	80 91 0b 01 	lds	r24, 0x010B
    12f0:	8b 7f       	andi	r24, 0xFB	; 251
    12f2:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED3_ON;
							outOfLine = 0;
    12f6:	10 92 52 04 	sts	0x0452, r1
							enableObstacleAvoidance();
    12fa:	0e 94 9a 3a 	call	0x7534	; 0x7534 <enableObstacleAvoidance>
							setRightSpeed(15);
    12fe:	8f e0       	ldi	r24, 0x0F	; 15
    1300:	0e 94 cc 26 	call	0x4d98	; 0x4d98 <setRightSpeed>
							setLeftSpeed(15);
    1304:	8f e0       	ldi	r24, 0x0F	; 15
    1306:	0e 94 af 26 	call	0x4d5e	; 0x4d5e <setLeftSpeed>
							if(proximityResult[9]<LINE_IN_THR || proximityResult[10]<LINE_IN_THR || proximityResult[8]<LINE_IN_THR || proximityResult[11]<LINE_IN_THR) {
    130a:	80 91 6b 02 	lds	r24, 0x026B
    130e:	90 91 6c 02 	lds	r25, 0x026C
    1312:	e1 e0       	ldi	r30, 0x01	; 1
    1314:	80 39       	cpi	r24, 0x90	; 144
    1316:	9e 07       	cpc	r25, r30
    1318:	0c f4       	brge	.+2      	; 0x131c <main+0x1140>
    131a:	43 c1       	rjmp	.+646    	; 0x15a2 <main+0x13c6>
    131c:	80 91 6d 02 	lds	r24, 0x026D
    1320:	90 91 6e 02 	lds	r25, 0x026E
    1324:	f1 e0       	ldi	r31, 0x01	; 1
    1326:	80 39       	cpi	r24, 0x90	; 144
    1328:	9f 07       	cpc	r25, r31
    132a:	0c f4       	brge	.+2      	; 0x132e <main+0x1152>
    132c:	3a c1       	rjmp	.+628    	; 0x15a2 <main+0x13c6>
    132e:	80 91 69 02 	lds	r24, 0x0269
    1332:	90 91 6a 02 	lds	r25, 0x026A
    1336:	21 e0       	ldi	r18, 0x01	; 1
    1338:	80 39       	cpi	r24, 0x90	; 144
    133a:	92 07       	cpc	r25, r18
    133c:	0c f4       	brge	.+2      	; 0x1340 <main+0x1164>
    133e:	31 c1       	rjmp	.+610    	; 0x15a2 <main+0x13c6>
    1340:	80 91 6f 02 	lds	r24, 0x026F
    1344:	90 91 70 02 	lds	r25, 0x0270
    1348:	31 e0       	ldi	r19, 0x01	; 1
    134a:	80 39       	cpi	r24, 0x90	; 144
    134c:	93 07       	cpc	r25, r19
    134e:	0c f4       	brge	.+2      	; 0x1352 <main+0x1176>
    1350:	28 c1       	rjmp	.+592    	; 0x15a2 <main+0x13c6>
									demoStartTime = getTime100MicroSec();
									demoState = 2;
									break;
								}
							} else {
								lineFound = 0;
    1352:	10 92 51 04 	sts	0x0451, r1
    1356:	8c c8       	rjmp	.-3816   	; 0x470 <main+0x294>
						pwm_red = 255 - currRand;	
						rgbState = 1;
						break;

					case 1:
						pwm_green = 255 - currRand;
    1358:	8a 2d       	mov	r24, r10
    135a:	80 95       	com	r24
    135c:	80 93 0d 02 	sts	0x020D, r24
						rgbState = 2;
    1360:	62 e0       	ldi	r22, 0x02	; 2
    1362:	60 93 1c 03 	sts	0x031C, r22
						break;
    1366:	39 cb       	rjmp	.-2446   	; 0x9da <main+0x7fe>
					}
				} else if(currRand<64) {
					if(pwm_red!=255 && pwm_blue!=255) {
						pwm_green = 255;
					}
				} else if (currRand<96) {
    1368:	e0 e6       	ldi	r30, 0x60	; 96
    136a:	ae 16       	cp	r10, r30
    136c:	b1 04       	cpc	r11, r1
    136e:	08 f0       	brcs	.+2      	; 0x1372 <main+0x1196>
    1370:	d4 c9       	rjmp	.-3160   	; 0x71a <main+0x53e>
					if(pwm_red!=255 && pwm_green!=255) {
    1372:	80 91 0c 02 	lds	r24, 0x020C
    1376:	8f 3f       	cpi	r24, 0xFF	; 255
    1378:	09 f4       	brne	.+2      	; 0x137c <main+0x11a0>
    137a:	cf c9       	rjmp	.-3170   	; 0x71a <main+0x53e>
    137c:	80 91 0d 02 	lds	r24, 0x020D
    1380:	8f 3f       	cpi	r24, 0xFF	; 255
    1382:	09 f4       	brne	.+2      	; 0x1386 <main+0x11aa>
    1384:	ca c9       	rjmp	.-3180   	; 0x71a <main+0x53e>
						pwm_blue = 255;
    1386:	10 93 0e 02 	sts	0x020E, r17
    138a:	c7 c9       	rjmp	.-3186   	; 0x71a <main+0x53e>
							//pwm_green = 255;
							//pwm_blue = 0;
							break;
						
						case 4: // go back from charger
							turnOffGreenLeds();
    138c:	0e 94 be 3b 	call	0x777c	; 0x777c <turnOffGreenLeds>
							GREEN_LED6_ON;
    1390:	80 91 0b 01 	lds	r24, 0x010B
    1394:	8f 7b       	andi	r24, 0xBF	; 191
    1396:	80 93 0b 01 	sts	0x010B, r24
							GREEN_LED7_ON;
    139a:	80 91 0b 01 	lds	r24, 0x010B
    139e:	8f 77       	andi	r24, 0x7F	; 127
    13a0:	80 93 0b 01 	sts	0x010B, r24
							demoEndTime = getTime100MicroSec();
    13a4:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <getTime100MicroSec>
    13a8:	9b 01       	movw	r18, r22
    13aa:	ac 01       	movw	r20, r24
    13ac:	60 93 5c 04 	sts	0x045C, r22
    13b0:	70 93 5d 04 	sts	0x045D, r23
    13b4:	80 93 5e 04 	sts	0x045E, r24
    13b8:	90 93 5f 04 	sts	0x045F, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_1_SEC)) {
    13bc:	80 91 54 04 	lds	r24, 0x0454
    13c0:	90 91 55 04 	lds	r25, 0x0455
    13c4:	a0 91 56 04 	lds	r26, 0x0456
    13c8:	b0 91 57 04 	lds	r27, 0x0457
    13cc:	28 1b       	sub	r18, r24
    13ce:	39 0b       	sbc	r19, r25
    13d0:	4a 0b       	sbc	r20, r26
    13d2:	5b 0b       	sbc	r21, r27
    13d4:	2f 38       	cpi	r18, 0x8F	; 143
    13d6:	65 e2       	ldi	r22, 0x25	; 37
    13d8:	36 07       	cpc	r19, r22
    13da:	60 e0       	ldi	r22, 0x00	; 0
    13dc:	46 07       	cpc	r20, r22
    13de:	60 e0       	ldi	r22, 0x00	; 0
    13e0:	56 07       	cpc	r21, r22
    13e2:	08 f4       	brcc	.+2      	; 0x13e6 <main+0x120a>
    13e4:	45 c8       	rjmp	.-3958   	; 0x470 <main+0x294>
								setRightSpeed(20);
    13e6:	84 e1       	ldi	r24, 0x14	; 20
    13e8:	0e 94 cc 26 	call	0x4d98	; 0x4d98 <setRightSpeed>
								setLeftSpeed(-20);								
    13ec:	8c ee       	ldi	r24, 0xEC	; 236
    13ee:	0e 94 af 26 	call	0x4d5e	; 0x4d5e <setLeftSpeed>
								demoStartTime = getTime100MicroSec();
    13f2:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <getTime100MicroSec>
    13f6:	60 93 54 04 	sts	0x0454, r22
    13fa:	70 93 55 04 	sts	0x0455, r23
    13fe:	80 93 56 04 	sts	0x0456, r24
    1402:	90 93 57 04 	sts	0x0457, r25
								demoState = 5;							
    1406:	85 e0       	ldi	r24, 0x05	; 5
    1408:	80 93 50 04 	sts	0x0450, r24
    140c:	31 c8       	rjmp	.-3998   	; 0x470 <main+0x294>
							//pwm_green = 0;
							//pwm_blue = 255;
							break;

						case 2:	// line found, follow it
							turnOffGreenLeds();
    140e:	0e 94 be 3b 	call	0x777c	; 0x777c <turnOffGreenLeds>
							GREEN_LED4_ON;
    1412:	80 91 0b 01 	lds	r24, 0x010B
    1416:	8f 7e       	andi	r24, 0xEF	; 239
    1418:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED5_ON;
							disableObstacleAvoidance();
    141c:	0e 94 9e 3a 	call	0x753c	; 0x753c <disableObstacleAvoidance>

							demoEndTime = getTime100MicroSec();
    1420:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <getTime100MicroSec>
    1424:	9b 01       	movw	r18, r22
    1426:	ac 01       	movw	r20, r24
    1428:	60 93 5c 04 	sts	0x045C, r22
    142c:	70 93 5d 04 	sts	0x045D, r23
    1430:	80 93 5e 04 	sts	0x045E, r24
    1434:	90 93 5f 04 	sts	0x045F, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {	// the robot seems to be blocked somehow
    1438:	80 91 54 04 	lds	r24, 0x0454
    143c:	90 91 55 04 	lds	r25, 0x0455
    1440:	a0 91 56 04 	lds	r26, 0x0456
    1444:	b0 91 57 04 	lds	r27, 0x0457
    1448:	28 1b       	sub	r18, r24
    144a:	39 0b       	sbc	r19, r25
    144c:	4a 0b       	sbc	r20, r26
    144e:	5b 0b       	sbc	r21, r27
    1450:	23 33       	cpi	r18, 0x33	; 51
    1452:	6f ee       	ldi	r22, 0xEF	; 239
    1454:	36 07       	cpc	r19, r22
    1456:	62 e0       	ldi	r22, 0x02	; 2
    1458:	46 07       	cpc	r20, r22
    145a:	60 e0       	ldi	r22, 0x00	; 0
    145c:	56 07       	cpc	r21, r22
    145e:	08 f0       	brcs	.+2      	; 0x1462 <main+0x1286>
    1460:	77 c1       	rjmp	.+750    	; 0x1750 <main+0x1574>
								demoStartTime = getTime100MicroSec();
								demoState = 4;
								break;
							}

							if(CHARGE_ON) {
    1462:	80 91 03 01 	lds	r24, 0x0103
    1466:	84 ff       	sbrs	r24, 4
    1468:	54 c1       	rjmp	.+680    	; 0x1712 <main+0x1536>
								outOfLine = 0;
    146a:	10 92 52 04 	sts	0x0452, r1
								chargeContact++;
    146e:	80 91 53 04 	lds	r24, 0x0453
    1472:	8f 5f       	subi	r24, 0xFF	; 255
    1474:	80 93 53 04 	sts	0x0453, r24
								if(chargeContact > 20) {
    1478:	85 31       	cpi	r24, 0x15	; 21
    147a:	08 f0       	brcs	.+2      	; 0x147e <main+0x12a2>
    147c:	a0 c1       	rjmp	.+832    	; 0x17be <main+0x15e2>
    147e:	80 91 6b 02 	lds	r24, 0x026B
    1482:	90 91 6c 02 	lds	r25, 0x026C
								} else {
									outOfLine = 0;
								}
							}
							
							if(proximityResult[8]<LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR && proximityResult[11]>LINE_OUT_THR) {	// left ground is the only within the black line => turn left
    1486:	20 91 69 02 	lds	r18, 0x0269
    148a:	30 91 6a 02 	lds	r19, 0x026A
    148e:	41 e0       	ldi	r20, 0x01	; 1
    1490:	22 3c       	cpi	r18, 0xC2	; 194
    1492:	34 07       	cpc	r19, r20
    1494:	ac f4       	brge	.+42     	; 0x14c0 <main+0x12e4>
    1496:	51 e0       	ldi	r21, 0x01	; 1
    1498:	83 3c       	cpi	r24, 0xC3	; 195
    149a:	95 07       	cpc	r25, r21
    149c:	8c f0       	brlt	.+34     	; 0x14c0 <main+0x12e4>
    149e:	40 91 6d 02 	lds	r20, 0x026D
    14a2:	50 91 6e 02 	lds	r21, 0x026E
    14a6:	61 e0       	ldi	r22, 0x01	; 1
    14a8:	43 3c       	cpi	r20, 0xC3	; 195
    14aa:	56 07       	cpc	r21, r22
    14ac:	4c f0       	brlt	.+18     	; 0x14c0 <main+0x12e4>
    14ae:	40 91 6f 02 	lds	r20, 0x026F
    14b2:	50 91 70 02 	lds	r21, 0x0270
    14b6:	e1 e0       	ldi	r30, 0x01	; 1
    14b8:	43 3c       	cpi	r20, 0xC3	; 195
    14ba:	5e 07       	cpc	r21, r30
    14bc:	0c f0       	brlt	.+2      	; 0x14c0 <main+0x12e4>
    14be:	a8 c1       	rjmp	.+848    	; 0x1810 <main+0x1634>
								setLeftSpeed(-10);
								setRightSpeed(15);
							} else if(proximityResult[11]<LINE_OUT_THR && proximityResult[8]>LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {	// right ground is the only within the black line => turn right
    14c0:	40 91 6f 02 	lds	r20, 0x026F
    14c4:	50 91 70 02 	lds	r21, 0x0270
    14c8:	f1 e0       	ldi	r31, 0x01	; 1
    14ca:	42 3c       	cpi	r20, 0xC2	; 194
    14cc:	5f 07       	cpc	r21, r31
    14ce:	0c f0       	brlt	.+2      	; 0x14d2 <main+0x12f6>
    14d0:	0a c1       	rjmp	.+532    	; 0x16e6 <main+0x150a>
    14d2:	41 e0       	ldi	r20, 0x01	; 1
    14d4:	23 3c       	cpi	r18, 0xC3	; 195
    14d6:	34 07       	cpc	r19, r20
    14d8:	0c f4       	brge	.+2      	; 0x14dc <main+0x1300>
    14da:	05 c1       	rjmp	.+522    	; 0x16e6 <main+0x150a>
    14dc:	51 e0       	ldi	r21, 0x01	; 1
    14de:	83 3c       	cpi	r24, 0xC3	; 195
    14e0:	95 07       	cpc	r25, r21
    14e2:	0c f4       	brge	.+2      	; 0x14e6 <main+0x130a>
    14e4:	05 c1       	rjmp	.+522    	; 0x16f0 <main+0x1514>
    14e6:	80 91 6d 02 	lds	r24, 0x026D
    14ea:	90 91 6e 02 	lds	r25, 0x026E
    14ee:	61 e0       	ldi	r22, 0x01	; 1
    14f0:	83 3c       	cpi	r24, 0xC3	; 195
    14f2:	96 07       	cpc	r25, r22
    14f4:	0c f0       	brlt	.+2      	; 0x14f8 <main+0x131c>
    14f6:	84 c1       	rjmp	.+776    	; 0x1800 <main+0x1624>
								setLeftSpeed(15);
								setRightSpeed(-10);
							} else if(proximityResult[9]>LINE_OUT_THR) {	// center left is leaving the line => turn right
								setLeftSpeed(15);
    14f8:	8f e0       	ldi	r24, 0x0F	; 15
    14fa:	0e 94 af 26 	call	0x4d5e	; 0x4d5e <setLeftSpeed>
								setRightSpeed(-5);
    14fe:	8b ef       	ldi	r24, 0xFB	; 251
    1500:	0e 94 cc 26 	call	0x4d98	; 0x4d98 <setRightSpeed>
    1504:	0c 94 38 02 	jmp	0x470	; 0x470 <main+0x294>
							//pwm_green = 255;
							//pwm_blue = 0;
							break;

						case 3:	// charge for some time
							turnOffGreenLeds();
    1508:	0e 94 be 3b 	call	0x777c	; 0x777c <turnOffGreenLeds>
							GREEN_LED6_ON;
    150c:	80 91 0b 01 	lds	r24, 0x010B
    1510:	8f 7b       	andi	r24, 0xBF	; 191
    1512:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED7_ON;
							demoEndTime = getTime100MicroSec();
    1516:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <getTime100MicroSec>
    151a:	9b 01       	movw	r18, r22
    151c:	ac 01       	movw	r20, r24
    151e:	60 93 5c 04 	sts	0x045C, r22
    1522:	70 93 5d 04 	sts	0x045D, r23
    1526:	80 93 5e 04 	sts	0x045E, r24
    152a:	90 93 5f 04 	sts	0x045F, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_30_SEC)) {
    152e:	80 91 54 04 	lds	r24, 0x0454
    1532:	90 91 55 04 	lds	r25, 0x0455
    1536:	a0 91 56 04 	lds	r26, 0x0456
    153a:	b0 91 57 04 	lds	r27, 0x0457
    153e:	28 1b       	sub	r18, r24
    1540:	39 0b       	sbc	r19, r25
    1542:	4a 0b       	sbc	r20, r26
    1544:	5b 0b       	sbc	r21, r27
    1546:	2d 3c       	cpi	r18, 0xCD	; 205
    1548:	66 e6       	ldi	r22, 0x66	; 102
    154a:	36 07       	cpc	r19, r22
    154c:	64 e0       	ldi	r22, 0x04	; 4
    154e:	46 07       	cpc	r20, r22
    1550:	60 e0       	ldi	r22, 0x00	; 0
    1552:	56 07       	cpc	r21, r22
    1554:	08 f4       	brcc	.+2      	; 0x1558 <main+0x137c>
    1556:	a5 c0       	rjmp	.+330    	; 0x16a2 <main+0x14c6>
								if(batteryLevel<890) {//860) {	// stay in charge if too much discharged (consider the fact that the robot
    1558:	80 91 bd 02 	lds	r24, 0x02BD
    155c:	90 91 be 02 	lds	r25, 0x02BE
    1560:	e3 e0       	ldi	r30, 0x03	; 3
    1562:	8a 37       	cpi	r24, 0x7A	; 122
    1564:	9e 07       	cpc	r25, r30
    1566:	08 f4       	brcc	.+2      	; 0x156a <main+0x138e>
    1568:	aa c0       	rjmp	.+340    	; 0x16be <main+0x14e2>
														// is still in charge thus the battery value measured is higher)
									demoStartTime = getTime100MicroSec();
									break;
								} else {
									setRightSpeed(-13);
    156a:	83 ef       	ldi	r24, 0xF3	; 243
    156c:	0e 94 cc 26 	call	0x4d98	; 0x4d98 <setRightSpeed>
									setLeftSpeed(-13);
    1570:	83 ef       	ldi	r24, 0xF3	; 243
    1572:	0e 94 af 26 	call	0x4d5e	; 0x4d5e <setLeftSpeed>
									demoStartTime = getTime100MicroSec();
    1576:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <getTime100MicroSec>
    157a:	60 93 54 04 	sts	0x0454, r22
    157e:	70 93 55 04 	sts	0x0455, r23
    1582:	80 93 56 04 	sts	0x0456, r24
    1586:	90 93 57 04 	sts	0x0457, r25
									demoState = 4;
    158a:	f4 e0       	ldi	r31, 0x04	; 4
    158c:	f0 93 50 04 	sts	0x0450, r31
									break;
    1590:	0c 94 38 02 	jmp	0x470	; 0x470 <main+0x294>
				currRand2 = rand()%128;
				if(currRand2<32) {
					pwm_red = 255;
				} else if(currRand2<64) {
					pwm_green = 255;
				} else if (currRand2<96) {
    1594:	80 36       	cpi	r24, 0x60	; 96
    1596:	91 05       	cpc	r25, r1
    1598:	08 f0       	brcs	.+2      	; 0x159c <main+0x13c0>
    159a:	8c ca       	rjmp	.-2792   	; 0xab4 <main+0x8d8>
					pwm_blue = 255;
    159c:	10 93 0e 02 	sts	0x020E, r17
    15a0:	89 ca       	rjmp	.-2798   	; 0xab4 <main+0x8d8>
							outOfLine = 0;
							enableObstacleAvoidance();
							setRightSpeed(15);
							setLeftSpeed(15);
							if(proximityResult[9]<LINE_IN_THR || proximityResult[10]<LINE_IN_THR || proximityResult[8]<LINE_IN_THR || proximityResult[11]<LINE_IN_THR) {
								lineFound++;
    15a2:	80 91 51 04 	lds	r24, 0x0451
    15a6:	8f 5f       	subi	r24, 0xFF	; 255
    15a8:	80 93 51 04 	sts	0x0451, r24
								if(lineFound > 10) {
    15ac:	8b 30       	cpi	r24, 0x0B	; 11
    15ae:	10 f4       	brcc	.+4      	; 0x15b4 <main+0x13d8>
    15b0:	0c 94 38 02 	jmp	0x470	; 0x470 <main+0x294>
									outOfLine = 0;
    15b4:	10 92 52 04 	sts	0x0452, r1
									chargeContact = 0;
    15b8:	10 92 53 04 	sts	0x0453, r1
									demoStartTime = getTime100MicroSec();
    15bc:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <getTime100MicroSec>
    15c0:	60 93 54 04 	sts	0x0454, r22
    15c4:	70 93 55 04 	sts	0x0455, r23
    15c8:	80 93 56 04 	sts	0x0456, r24
    15cc:	90 93 57 04 	sts	0x0457, r25
									demoState = 2;
    15d0:	42 e0       	ldi	r20, 0x02	; 2
    15d2:	40 93 50 04 	sts	0x0450, r20
									break;
    15d6:	0c 94 38 02 	jmp	0x470	; 0x470 <main+0x294>
							}

							currRand = rand()% 200;
							if(currRand<50) {
								pwm_red = 255;
							} else if(currRand<100) {
    15da:	84 36       	cpi	r24, 0x64	; 100
    15dc:	91 05       	cpc	r25, r1
    15de:	08 f0       	brcs	.+2      	; 0x15e2 <main+0x1406>
    15e0:	7a c0       	rjmp	.+244    	; 0x16d6 <main+0x14fa>
								pwm_green = 255;
    15e2:	10 93 0d 02 	sts	0x020D, r17
    15e6:	80 91 0c 02 	lds	r24, 0x020C
    15ea:	88 cb       	rjmp	.-2288   	; 0xcfc <main+0xb20>

							currRand = rand()% 128;
							if(currRand > 95) {
								pwm_blue = 255;
							} else {
								pwm_blue = currRand;
    15ec:	80 93 0e 02 	sts	0x020E, r24
    15f0:	77 cb       	rjmp	.-2322   	; 0xce0 <main+0xb04>

							currRand = rand()% 128;
							if(currRand > 95) {
								pwm_green = 255;
							} else {
								pwm_green = currRand;
    15f2:	80 93 0d 02 	sts	0x020D, r24
    15f6:	68 cb       	rjmp	.-2352   	; 0xcc8 <main+0xaec>
							turnOffGreenLeds();					
							currRand = rand()% 128;	// 0 to 255 is the maximum, we use 0 to 127 to get brighter colors
							if(currRand > 95) {
								pwm_red = 255;
							} else {
								pwm_red = currRand;
    15f8:	80 93 0c 02 	sts	0x020C, r24
    15fc:	59 cb       	rjmp	.-2382   	; 0xcb0 <main+0xad4>
					} else if(pwm_right_desired > pwm_intermediate_right_desired) {
						pwm_intermediate_right_desired += speedStep;
						if(pwm_intermediate_right_desired > pwm_right_desired) {
							pwm_intermediate_right_desired = pwm_right_desired;
						}
					} else if(pwm_right_desired < pwm_intermediate_right_desired) {
    15fe:	82 17       	cp	r24, r18
    1600:	93 07       	cpc	r25, r19
    1602:	0c f0       	brlt	.+2      	; 0x1606 <main+0x142a>
    1604:	0e c8       	rjmp	.-4068   	; 0x622 <main+0x446>
						pwm_intermediate_right_desired -= speedStep;
    1606:	40 91 17 02 	lds	r20, 0x0217
    160a:	24 1b       	sub	r18, r20
    160c:	31 09       	sbc	r19, r1
    160e:	30 93 fe 02 	sts	0x02FE, r19
    1612:	20 93 fd 02 	sts	0x02FD, r18
						if(pwm_intermediate_right_desired < pwm_right_desired) {
    1616:	28 17       	cp	r18, r24
    1618:	39 07       	cpc	r19, r25
    161a:	14 f0       	brlt	.+4      	; 0x1620 <main+0x1444>
    161c:	0c 94 11 03 	jmp	0x622	; 0x622 <main+0x446>
    1620:	0c 94 0d 03 	jmp	0x61a	; 0x61a <main+0x43e>
					} else if(pwm_left_desired > pwm_intermediate_left_desired) {
						pwm_intermediate_left_desired += speedStep;
						if(pwm_intermediate_left_desired > pwm_left_desired) {
							pwm_intermediate_left_desired = pwm_left_desired;
						}
					} else if(pwm_left_desired < pwm_intermediate_left_desired) {
    1624:	82 17       	cp	r24, r18
    1626:	93 07       	cpc	r25, r19
    1628:	14 f0       	brlt	.+4      	; 0x162e <main+0x1452>
    162a:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <main+0xc6>
						pwm_intermediate_left_desired -= speedStep;
    162e:	40 91 17 02 	lds	r20, 0x0217
    1632:	24 1b       	sub	r18, r20
    1634:	31 09       	sbc	r19, r1
    1636:	30 93 00 03 	sts	0x0300, r19
    163a:	20 93 ff 02 	sts	0x02FF, r18
						if(pwm_intermediate_left_desired < pwm_left_desired) {
    163e:	28 17       	cp	r18, r24
    1640:	39 07       	cpc	r19, r25
    1642:	14 f0       	brlt	.+4      	; 0x1648 <main+0x146c>
    1644:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <main+0xc6>
    1648:	10 c8       	rjmp	.-4064   	; 0x66a <main+0x48e>
								}
								setGreenLed(greenLedState, 1);
								demoEndTime = getTime100MicroSec();											
							}
							if((getTime100MicroSec()-demoStartTime2) >= (PAUSE_2_SEC)) {
								rgbLedState = 1;
    164a:	20 92 6b 04 	sts	0x046B, r2
								demoStartTime2 = getTime100MicroSec();
    164e:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <getTime100MicroSec>
    1652:	60 93 58 04 	sts	0x0458, r22
    1656:	70 93 59 04 	sts	0x0459, r23
    165a:	80 93 5a 04 	sts	0x045A, r24
    165e:	90 93 5b 04 	sts	0x045B, r25
    1662:	0c 94 38 02 	jmp	0x470	; 0x470 <main+0x294>
						case 0:							
							pwm_red = 255;
							pwm_green = 255;
							pwm_blue = 255;
							if((getTime100MicroSec()-demoEndTime) >= (PAUSE_100_MSEC)) {
								setGreenLed(greenLedState, 0);
    1666:	80 91 6a 04 	lds	r24, 0x046A
    166a:	60 e0       	ldi	r22, 0x00	; 0
    166c:	0e 94 21 3b 	call	0x7642	; 0x7642 <setGreenLed>
								greenLedState++;
    1670:	80 91 6a 04 	lds	r24, 0x046A
    1674:	8f 5f       	subi	r24, 0xFF	; 255
    1676:	80 93 6a 04 	sts	0x046A, r24
								if(greenLedState > 7) {
    167a:	88 30       	cpi	r24, 0x08	; 8
    167c:	18 f0       	brcs	.+6      	; 0x1684 <main+0x14a8>
									greenLedState = 0;
    167e:	10 92 6a 04 	sts	0x046A, r1
    1682:	80 e0       	ldi	r24, 0x00	; 0
								}
								setGreenLed(greenLedState, 1);
    1684:	61 e0       	ldi	r22, 0x01	; 1
    1686:	0e 94 21 3b 	call	0x7642	; 0x7642 <setGreenLed>
								demoEndTime = getTime100MicroSec();											
    168a:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <getTime100MicroSec>
    168e:	60 93 5c 04 	sts	0x045C, r22
    1692:	70 93 5d 04 	sts	0x045D, r23
    1696:	80 93 5e 04 	sts	0x045E, r24
    169a:	90 93 5f 04 	sts	0x045F, r25
    169e:	0c 94 1e 02 	jmp	0x43c	; 0x43c <main+0x260>
									demoStartTime = getTime100MicroSec();
									demoState = 4;
									break;
								}
							}
							if(!CHARGE_ON) {
    16a2:	80 91 03 01 	lds	r24, 0x0103
    16a6:	84 ff       	sbrs	r24, 4
    16a8:	02 c0       	rjmp	.+4      	; 0x16ae <main+0x14d2>
    16aa:	0c 94 38 02 	jmp	0x470	; 0x470 <main+0x294>
								chargeContact = 0;
    16ae:	10 92 53 04 	sts	0x0453, r1
								outOfLine = 0;
    16b2:	10 92 52 04 	sts	0x0452, r1
								demoState = 2;
    16b6:	82 e0       	ldi	r24, 0x02	; 2
    16b8:	98 2e       	mov	r9, r24
    16ba:	90 92 50 04 	sts	0x0450, r9
								demoStartTime = getTime100MicroSec();
    16be:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <getTime100MicroSec>
    16c2:	60 93 54 04 	sts	0x0454, r22
    16c6:	70 93 55 04 	sts	0x0455, r23
    16ca:	80 93 56 04 	sts	0x0456, r24
    16ce:	90 93 57 04 	sts	0x0457, r25
								break;						
    16d2:	0c 94 38 02 	jmp	0x470	; 0x470 <main+0x294>
							currRand = rand()% 200;
							if(currRand<50) {
								pwm_red = 255;
							} else if(currRand<100) {
								pwm_green = 255;
							} else if (currRand<150) {	
    16d6:	86 39       	cpi	r24, 0x96	; 150
    16d8:	91 05       	cpc	r25, r1
    16da:	10 f4       	brcc	.+4      	; 0x16e0 <main+0x1504>
								pwm_blue = 255;
    16dc:	10 93 0e 02 	sts	0x020E, r17
    16e0:	80 91 0c 02 	lds	r24, 0x020C
    16e4:	0b cb       	rjmp	.-2538   	; 0xcfc <main+0xb20>
								setLeftSpeed(-10);
								setRightSpeed(15);
							} else if(proximityResult[11]<LINE_OUT_THR && proximityResult[8]>LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {	// right ground is the only within the black line => turn right
								setLeftSpeed(15);
								setRightSpeed(-10);
							} else if(proximityResult[9]>LINE_OUT_THR) {	// center left is leaving the line => turn right
    16e6:	e1 e0       	ldi	r30, 0x01	; 1
    16e8:	83 3c       	cpi	r24, 0xC3	; 195
    16ea:	9e 07       	cpc	r25, r30
    16ec:	0c f0       	brlt	.+2      	; 0x16f0 <main+0x1514>
    16ee:	04 cf       	rjmp	.-504    	; 0x14f8 <main+0x131c>
								setRightSpeed(-5);
								//outOfLine++;
								//if(outOfLine > 250) {
								//	demoState = 1;
								//}
							} else if(proximityResult[10]>LINE_OUT_THR) {	// center right is leaving the lnie => turn left
    16f0:	80 91 6d 02 	lds	r24, 0x026D
    16f4:	90 91 6e 02 	lds	r25, 0x026E
    16f8:	f1 e0       	ldi	r31, 0x01	; 1
    16fa:	83 3c       	cpi	r24, 0xC3	; 195
    16fc:	9f 07       	cpc	r25, r31
    16fe:	0c f4       	brge	.+2      	; 0x1702 <main+0x1526>
    1700:	50 c0       	rjmp	.+160    	; 0x17a2 <main+0x15c6>
								setLeftSpeed(-5);
    1702:	8b ef       	ldi	r24, 0xFB	; 251
    1704:	0e 94 af 26 	call	0x4d5e	; 0x4d5e <setLeftSpeed>
								setRightSpeed(15);
    1708:	8f e0       	ldi	r24, 0x0F	; 15
    170a:	0e 94 cc 26 	call	0x4d98	; 0x4d98 <setRightSpeed>
    170e:	0c 94 38 02 	jmp	0x470	; 0x470 <main+0x294>
									demoStartTime = getTime100MicroSec();
									demoState = 3;
									break;
								}
							} else {
								chargeContact = 0;
    1712:	10 92 53 04 	sts	0x0453, r1

								if(proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {
    1716:	80 91 6b 02 	lds	r24, 0x026B
    171a:	90 91 6c 02 	lds	r25, 0x026C
    171e:	e1 e0       	ldi	r30, 0x01	; 1
    1720:	83 3c       	cpi	r24, 0xC3	; 195
    1722:	9e 07       	cpc	r25, r30
    1724:	54 f1       	brlt	.+84     	; 0x177a <main+0x159e>
    1726:	20 91 6d 02 	lds	r18, 0x026D
    172a:	30 91 6e 02 	lds	r19, 0x026E
    172e:	f1 e0       	ldi	r31, 0x01	; 1
    1730:	23 3c       	cpi	r18, 0xC3	; 195
    1732:	3f 07       	cpc	r19, r31
    1734:	14 f1       	brlt	.+68     	; 0x177a <main+0x159e>
									outOfLine++;
    1736:	20 91 52 04 	lds	r18, 0x0452
    173a:	2f 5f       	subi	r18, 0xFF	; 255
    173c:	20 93 52 04 	sts	0x0452, r18
									if(outOfLine > 250) {
    1740:	2b 3f       	cpi	r18, 0xFB	; 251
    1742:	08 f4       	brcc	.+2      	; 0x1746 <main+0x156a>
    1744:	a0 ce       	rjmp	.-704    	; 0x1486 <main+0x12aa>
    1746:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <main+0x51a>
						break;

					case 1:
						irCommTasks();
						if(irCommDataAvailable()==1) {
							i = irCommReadData();
    174a:	0e 94 62 4e 	call	0x9cc4	; 0x9cc4 <irCommReadData>
    174e:	47 c8       	rjmp	.-3954   	; 0x7de <main+0x602>
							disableObstacleAvoidance();

							demoEndTime = getTime100MicroSec();
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {	// the robot seems to be blocked somehow
								// go back for a while
								setRightSpeed(-20);
    1750:	8c ee       	ldi	r24, 0xEC	; 236
    1752:	0e 94 cc 26 	call	0x4d98	; 0x4d98 <setRightSpeed>
								setLeftSpeed(-20);
    1756:	8c ee       	ldi	r24, 0xEC	; 236
    1758:	0e 94 af 26 	call	0x4d5e	; 0x4d5e <setLeftSpeed>
								demoStartTime = getTime100MicroSec();
    175c:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <getTime100MicroSec>
    1760:	60 93 54 04 	sts	0x0454, r22
    1764:	70 93 55 04 	sts	0x0455, r23
    1768:	80 93 56 04 	sts	0x0456, r24
    176c:	90 93 57 04 	sts	0x0457, r25
								demoState = 4;
    1770:	84 e0       	ldi	r24, 0x04	; 4
    1772:	80 93 50 04 	sts	0x0450, r24
								break;
    1776:	0c 94 38 02 	jmp	0x470	; 0x470 <main+0x294>
										chargeContact = 0;
										demoState = 1;
										break;
									}
								} else {
									outOfLine = 0;
    177a:	10 92 52 04 	sts	0x0452, r1
    177e:	83 ce       	rjmp	.-762    	; 0x1486 <main+0x12aa>
					if(rgbState == 0) {
						pwm_red = 254;
						pwm_green = 255;
						pwm_blue = 255;
						rgbState = 1;
					} else if(rgbState == 1) {
    1780:	91 30       	cpi	r25, 0x01	; 1
    1782:	91 f1       	breq	.+100    	; 0x17e8 <main+0x160c>
						pwm_red = 255;
						pwm_green = 254;
						pwm_blue = 255;
						rgbState = 2;
					} else if(rgbState == 2) {
    1784:	92 30       	cpi	r25, 0x02	; 2
    1786:	11 f0       	breq	.+4      	; 0x178c <main+0x15b0>
    1788:	0c 94 8d 03 	jmp	0x71a	; 0x71a <main+0x53e>
						pwm_red = 255;
    178c:	10 93 0c 02 	sts	0x020C, r17
						pwm_green = 255;
    1790:	10 93 0d 02 	sts	0x020D, r17
						pwm_blue = 254;
    1794:	8e ef       	ldi	r24, 0xFE	; 254
    1796:	80 93 0e 02 	sts	0x020E, r24
						rgbState = 0;
    179a:	10 92 1c 03 	sts	0x031C, r1
    179e:	0c 94 8d 03 	jmp	0x71a	; 0x71a <main+0x53e>
								//outOfLine++;
								//if(outOfLine > 250) {
								//	demoState = 1;
								//}
							} else {
								setRightSpeed(15);
    17a2:	8f e0       	ldi	r24, 0x0F	; 15
    17a4:	0e 94 cc 26 	call	0x4d98	; 0x4d98 <setRightSpeed>
								setLeftSpeed(15);
    17a8:	8f e0       	ldi	r24, 0x0F	; 15
    17aa:	0e 94 af 26 	call	0x4d5e	; 0x4d5e <setLeftSpeed>
    17ae:	0c 94 38 02 	jmp	0x470	; 0x470 <main+0x294>
							//	irCommRxByteExpected=0;
							//}
							if(irCommRxByteExpected<255) {
								irCommRxByteExpected++;
							} else {
								irCommRxByteExpected = 0;
    17b2:	10 92 fd 04 	sts	0x04FD, r1
    17b6:	80 91 4c 04 	lds	r24, 0x044C
    17ba:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <main+0xf6>

							if(CHARGE_ON) {
								outOfLine = 0;
								chargeContact++;
								if(chargeContact > 20) {
									setLeftSpeed(0);
    17be:	80 e0       	ldi	r24, 0x00	; 0
    17c0:	0e 94 af 26 	call	0x4d5e	; 0x4d5e <setLeftSpeed>
									setRightSpeed(0);
    17c4:	80 e0       	ldi	r24, 0x00	; 0
    17c6:	0e 94 cc 26 	call	0x4d98	; 0x4d98 <setRightSpeed>
									demoStartTime = getTime100MicroSec();
    17ca:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <getTime100MicroSec>
    17ce:	60 93 54 04 	sts	0x0454, r22
    17d2:	70 93 55 04 	sts	0x0455, r23
    17d6:	80 93 56 04 	sts	0x0456, r24
    17da:	90 93 57 04 	sts	0x0457, r25
									demoState = 3;
    17de:	93 e0       	ldi	r25, 0x03	; 3
    17e0:	90 93 50 04 	sts	0x0450, r25
									break;
    17e4:	0c 94 38 02 	jmp	0x470	; 0x470 <main+0x294>
						pwm_red = 254;
						pwm_green = 255;
						pwm_blue = 255;
						rgbState = 1;
					} else if(rgbState == 1) {
						pwm_red = 255;
    17e8:	10 93 0c 02 	sts	0x020C, r17
						pwm_green = 254;
    17ec:	5e ef       	ldi	r21, 0xFE	; 254
    17ee:	50 93 0d 02 	sts	0x020D, r21
						pwm_blue = 255;
    17f2:	10 93 0e 02 	sts	0x020E, r17
						rgbState = 2;
    17f6:	62 e0       	ldi	r22, 0x02	; 2
    17f8:	60 93 1c 03 	sts	0x031C, r22
    17fc:	0c 94 8d 03 	jmp	0x71a	; 0x71a <main+0x53e>
							
							if(proximityResult[8]<LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR && proximityResult[11]>LINE_OUT_THR) {	// left ground is the only within the black line => turn left
								setLeftSpeed(-10);
								setRightSpeed(15);
							} else if(proximityResult[11]<LINE_OUT_THR && proximityResult[8]>LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {	// right ground is the only within the black line => turn right
								setLeftSpeed(15);
    1800:	8f e0       	ldi	r24, 0x0F	; 15
    1802:	0e 94 af 26 	call	0x4d5e	; 0x4d5e <setLeftSpeed>
								setRightSpeed(-10);
    1806:	86 ef       	ldi	r24, 0xF6	; 246
    1808:	0e 94 cc 26 	call	0x4d98	; 0x4d98 <setRightSpeed>
    180c:	0c 94 38 02 	jmp	0x470	; 0x470 <main+0x294>
									outOfLine = 0;
								}
							}
							
							if(proximityResult[8]<LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR && proximityResult[11]>LINE_OUT_THR) {	// left ground is the only within the black line => turn left
								setLeftSpeed(-10);
    1810:	86 ef       	ldi	r24, 0xF6	; 246
    1812:	0e 94 af 26 	call	0x4d5e	; 0x4d5e <setLeftSpeed>
								setRightSpeed(15);
    1816:	8f e0       	ldi	r24, 0x0F	; 15
    1818:	0e 94 cc 26 	call	0x4d98	; 0x4d98 <setRightSpeed>
    181c:	0c 94 38 02 	jmp	0x470	; 0x470 <main+0x294>

00001820 <SPI_WAIT>:
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	90 e0       	ldi	r25, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
    1824:	21 e0       	ldi	r18, 0x01	; 1
		}
	
		if(SPSR & _BV(SPIF)) {
    1826:	0d b4       	in	r0, 0x2d	; 45
    1828:	07 fc       	sbrc	r0, 7
    182a:	0a c0       	rjmp	.+20     	; 0x1840 <SPI_WAIT+0x20>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    182c:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
    182e:	37 e2       	ldi	r19, 0x27	; 39
    1830:	80 31       	cpi	r24, 0x10	; 16
    1832:	93 07       	cpc	r25, r19
    1834:	c0 f3       	brcs	.-16     	; 0x1826 <SPI_WAIT+0x6>
			spiCommError = 1;
    1836:	20 93 18 03 	sts	0x0318, r18
		}
	
		if(SPSR & _BV(SPIF)) {
    183a:	0d b4       	in	r0, 0x2d	; 45
    183c:	07 fe       	sbrs	r0, 7
    183e:	f6 cf       	rjmp	.-20     	; 0x182c <SPI_WAIT+0xc>
			return;
		}
	}
}
    1840:	08 95       	ret

00001842 <initSPI>:

void initSPI() {

    SPI_DDR &= ~((1<<SPI_MOSI)|(1<<SPI_MISO)|(1<<SPI_SS)|(1<<SPI_SCK));
    1842:	84 b1       	in	r24, 0x04	; 4
    1844:	80 7f       	andi	r24, 0xF0	; 240
    1846:	84 b9       	out	0x04, r24	; 4
    // Define the following pins as output
    SPI_DDR |= ((1<<SPI_MOSI)|(1<<SPI_SS)|(1<<SPI_SCK));
    1848:	84 b1       	in	r24, 0x04	; 4
    184a:	87 60       	ori	r24, 0x07	; 7
    184c:	84 b9       	out	0x04, r24	; 4

    
    SPCR = ((1<<SPE)|               // SPI Enable
    184e:	80 e5       	ldi	r24, 0x50	; 80
    1850:	8c bd       	out	0x2c, r24	; 44
            (1<<MSTR)|              // 1:Master/ 0:Slave
            (0<<SPR1)|(0<<SPR0)|    // SPI Clock Rate => default 1/4 => 2 MHz
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR |= (1<<SPI2X);              // Double Clock Rate
    1852:	8d b5       	in	r24, 0x2d	; 45
    1854:	81 60       	ori	r24, 0x01	; 1
    1856:	8d bd       	out	0x2d, r24	; 45

}
    1858:	08 95       	ret

0000185a <closeSPI>:

void closeSPI() {

	SPCR = 0x00;
    185a:	1c bc       	out	0x2c, r1	; 44
	SPSR = 0x00;
    185c:	1d bc       	out	0x2d, r1	; 45
}
    185e:	08 95       	ret

00001860 <SPI_ReadWrite_Block>:

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1860:	44 23       	and	r20, r20
    1862:	09 f1       	breq	.+66     	; 0x18a6 <SPI_ReadWrite_Block+0x46>
    1864:	a6 2f       	mov	r26, r22
    1866:	b7 2f       	mov	r27, r23
    1868:	e8 2f       	mov	r30, r24
    186a:	f9 2f       	mov	r31, r25
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
    186c:	91 e0       	ldi	r25, 0x01	; 1
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
    186e:	21 91       	ld	r18, Z+
    1870:	2e bd       	out	0x2e, r18	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1872:	21 e0       	ldi	r18, 0x01	; 1
    1874:	30 e0       	ldi	r19, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
    1876:	0d b4       	in	r0, 0x2d	; 45
    1878:	07 fc       	sbrc	r0, 7
    187a:	0b c0       	rjmp	.+22     	; 0x1892 <SPI_ReadWrite_Block+0x32>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    187c:	2f 5f       	subi	r18, 0xFF	; 255
    187e:	3f 4f       	sbci	r19, 0xFF	; 255
		if(timeout>=10000) {
    1880:	57 e2       	ldi	r21, 0x27	; 39
    1882:	20 31       	cpi	r18, 0x10	; 16
    1884:	35 07       	cpc	r19, r21
    1886:	b8 f3       	brcs	.-18     	; 0x1876 <SPI_ReadWrite_Block+0x16>
			spiCommError = 1;
    1888:	90 93 18 03 	sts	0x0318, r25
		}
	
		if(SPSR & _BV(SPIF)) {
    188c:	0d b4       	in	r0, 0x2d	; 45
    188e:	07 fe       	sbrs	r0, 7
    1890:	f5 cf       	rjmp	.-22     	; 0x187c <SPI_ReadWrite_Block+0x1c>
void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
          SPI_WAIT();
		  if(spiCommError) {
    1892:	20 91 18 03 	lds	r18, 0x0318
    1896:	22 23       	and	r18, r18
    1898:	31 f4       	brne	.+12     	; 0x18a6 <SPI_ReadWrite_Block+0x46>
			return;
		  }
          buffer[i] = SPDR;
    189a:	2e b5       	in	r18, 0x2e	; 46
    189c:	2d 93       	st	X+, r18
	SPSR = 0x00;
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    189e:	2e 2f       	mov	r18, r30
    18a0:	28 1b       	sub	r18, r24
    18a2:	24 17       	cp	r18, r20
    18a4:	20 f3       	brcs	.-56     	; 0x186e <SPI_ReadWrite_Block+0xe>
    18a6:	08 95       	ret

000018a8 <SPI_Write_Block>:
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    18a8:	66 23       	and	r22, r22
    18aa:	e9 f0       	breq	.+58     	; 0x18e6 <SPI_Write_Block+0x3e>
    18ac:	e8 2f       	mov	r30, r24
    18ae:	f9 2f       	mov	r31, r25
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
    18b0:	91 e0       	ldi	r25, 0x01	; 1
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
    18b2:	21 91       	ld	r18, Z+
    18b4:	2e bd       	out	0x2e, r18	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    18b6:	21 e0       	ldi	r18, 0x01	; 1
    18b8:	30 e0       	ldi	r19, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
    18ba:	0d b4       	in	r0, 0x2d	; 45
    18bc:	07 fc       	sbrc	r0, 7
    18be:	0b c0       	rjmp	.+22     	; 0x18d6 <SPI_Write_Block+0x2e>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    18c0:	2f 5f       	subi	r18, 0xFF	; 255
    18c2:	3f 4f       	sbci	r19, 0xFF	; 255
		if(timeout>=10000) {
    18c4:	47 e2       	ldi	r20, 0x27	; 39
    18c6:	20 31       	cpi	r18, 0x10	; 16
    18c8:	34 07       	cpc	r19, r20
    18ca:	b8 f3       	brcs	.-18     	; 0x18ba <SPI_Write_Block+0x12>
			spiCommError = 1;
    18cc:	90 93 18 03 	sts	0x0318, r25
		}
	
		if(SPSR & _BV(SPIF)) {
    18d0:	0d b4       	in	r0, 0x2d	; 45
    18d2:	07 fe       	sbrs	r0, 7
    18d4:	f5 cf       	rjmp	.-22     	; 0x18c0 <SPI_Write_Block+0x18>
void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
          SPI_WAIT();
		  if(spiCommError) {
    18d6:	20 91 18 03 	lds	r18, 0x0318
    18da:	22 23       	and	r18, r18
    18dc:	21 f4       	brne	.+8      	; 0x18e6 <SPI_Write_Block+0x3e>
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    18de:	2e 2f       	mov	r18, r30
    18e0:	28 1b       	sub	r18, r24
    18e2:	26 17       	cp	r18, r22
    18e4:	30 f3       	brcs	.-52     	; 0x18b2 <SPI_Write_Block+0xa>
    18e6:	08 95       	ret

000018e8 <SPI_Write_Byte>:
    }

}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    18e8:	8e bd       	out	0x2e, r24	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	90 e0       	ldi	r25, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
    18ee:	21 e0       	ldi	r18, 0x01	; 1
		}
	
		if(SPSR & _BV(SPIF)) {
    18f0:	0d b4       	in	r0, 0x2d	; 45
    18f2:	07 fc       	sbrc	r0, 7
    18f4:	0a c0       	rjmp	.+20     	; 0x190a <SPI_Write_Byte+0x22>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    18f6:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
    18f8:	37 e2       	ldi	r19, 0x27	; 39
    18fa:	80 31       	cpi	r24, 0x10	; 16
    18fc:	93 07       	cpc	r25, r19
    18fe:	c0 f3       	brcs	.-16     	; 0x18f0 <SPI_Write_Byte+0x8>
			spiCommError = 1;
    1900:	20 93 18 03 	sts	0x0318, r18
		}
	
		if(SPSR & _BV(SPIF)) {
    1904:	0d b4       	in	r0, 0x2d	; 45
    1906:	07 fe       	sbrs	r0, 7
    1908:	f6 cf       	rjmp	.-20     	; 0x18f6 <SPI_Write_Byte+0xe>
}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    SPI_WAIT();
    return SPDR;
    190a:	8e b5       	in	r24, 0x2e	; 46
}
    190c:	08 95       	ret

0000190e <mirf_config>:


void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
    190e:	0f 93       	push	r16
    1910:	1f 93       	push	r17
    1912:	df 93       	push	r29
    1914:	cf 93       	push	r28
    1916:	00 d0       	rcall	.+0      	; 0x1918 <mirf_config+0xa>
    1918:	cd b7       	in	r28, 0x3d	; 61
    191a:	de b7       	in	r29, 0x3e	; 62
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    191c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    191e:	80 e2       	ldi	r24, 0x20	; 32
    1920:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1924:	8d e0       	ldi	r24, 0x0D	; 13
    1926:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    mirf_CSN_hi;
    192a:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    192c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    192e:	83 e2       	ldi	r24, 0x23	; 35
    1930:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    mirf_CSN_hi;
    193a:	28 9a       	sbi	0x05, 0	; 5

	// address width
	mirf_config_register(SETUP_AW, 0x01);

	// tx address
	temp[0] = (rfAddress>>8)&0xFF;
    193c:	80 91 15 03 	lds	r24, 0x0315
    1940:	90 91 16 03 	lds	r25, 0x0316
    1944:	99 83       	std	Y+1, r25	; 0x01
	temp[1] = rfAddress & 0xFF;
    1946:	8a 83       	std	Y+2, r24	; 0x02
	temp[2] = 0x00;
    1948:	1b 82       	std	Y+3, r1	; 0x03
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    194a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    194c:	80 e3       	ldi	r24, 0x30	; 48
    194e:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1952:	8e 01       	movw	r16, r28
    1954:	0f 5f       	subi	r16, 0xFF	; 255
    1956:	1f 4f       	sbci	r17, 0xFF	; 255
    1958:	c8 01       	movw	r24, r16
    195a:	63 e0       	ldi	r22, 0x03	; 3
    195c:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <SPI_Write_Block>
    mirf_CSN_hi;
    1960:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1962:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1964:	8a e2       	ldi	r24, 0x2A	; 42
    1966:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    196a:	c8 01       	movw	r24, r16
    196c:	63 e0       	ldi	r22, 0x03	; 3
    196e:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <SPI_Write_Block>
    mirf_CSN_hi;
    1972:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1974:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1976:	81 e2       	ldi	r24, 0x21	; 33
    1978:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    mirf_CSN_hi;
    1982:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1984:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1986:	82 e2       	ldi	r24, 0x22	; 34
    1988:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    mirf_CSN_hi;
    1992:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1994:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1996:	84 e2       	ldi	r24, 0x24	; 36
    1998:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    199c:	82 e1       	ldi	r24, 0x12	; 18
    199e:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    mirf_CSN_hi;
    19a2:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    19a4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    19a6:	85 e2       	ldi	r24, 0x25	; 37
    19a8:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    19ac:	88 e2       	ldi	r24, 0x28	; 40
    19ae:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    mirf_CSN_hi;
    19b2:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    19b4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    19b6:	81 e3       	ldi	r24, 0x31	; 49
    19b8:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    19bc:	8d e0       	ldi	r24, 0x0D	; 13
    19be:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    mirf_CSN_hi;
    19c2:	28 9a       	sbi	0x05, 0	; 5

	// RX payload size; it isn't needed because the dynamic payload length is activated for ACK+PAYLOAD feature
    mirf_config_register(RX_PW_P0, PAYLOAD_SIZE);

	// enable extra features
    mirf_CSN_lo;
    19c4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_ACTIVATE);
    19c6:	80 e5       	ldi	r24, 0x50	; 80
    19c8:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    SPI_Write_Byte(0x73);
    19cc:	83 e7       	ldi	r24, 0x73	; 115
    19ce:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    mirf_CSN_hi;
    19d2:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    19d4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    19d6:	8c e3       	ldi	r24, 0x3C	; 60
    19d8:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    mirf_CSN_hi;
    19e2:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    19e4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    19e6:	8d e3       	ldi	r24, 0x3D	; 61
    19e8:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    19ec:	86 e0       	ldi	r24, 0x06	; 6
    19ee:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    mirf_CSN_hi;
    19f2:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    19f4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    19f6:	80 e2       	ldi	r24, 0x20	; 32
    19f8:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    19fc:	8f e0       	ldi	r24, 0x0F	; 15
    19fe:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    mirf_CSN_hi;
    1a02:	28 9a       	sbi	0x05, 0	; 5

    // Start receiver 
    //PTX = 0;        // Start in receiving mode
    //RX_POWERUP;     // Power up in receiving mode
    //mirf_CE_hi;     // Listening for pakets
}
    1a04:	0f 90       	pop	r0
    1a06:	0f 90       	pop	r0
    1a08:	0f 90       	pop	r0
    1a0a:	cf 91       	pop	r28
    1a0c:	df 91       	pop	r29
    1a0e:	1f 91       	pop	r17
    1a10:	0f 91       	pop	r16
    1a12:	08 95       	ret

00001a14 <mirf_init>:
// Initializes pins as interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    //DDRB |= ((1<<CSN)|(1<<CE));
    mirf_CE_hi;
    1a14:	2c 9a       	sbi	0x05, 4	; 5
    mirf_CSN_hi;
    1a16:	28 9a       	sbi	0x05, 0	; 5

	mirf_config();
    1a18:	0e 94 87 0c 	call	0x190e	; 0x190e <mirf_config>
}
    1a1c:	08 95       	ret

00001a1e <mirf_set_RADDR>:
    //mirf_CE_hi;     // Listening for pakets
}

void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    1a1e:	cf 93       	push	r28
    1a20:	df 93       	push	r29
    1a22:	ec 01       	movw	r28, r24
    mirf_CE_lo;
    1a24:	2c 98       	cbi	0x05, 4	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1a26:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1a28:	8a e2       	ldi	r24, 0x2A	; 42
    1a2a:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1a2e:	ce 01       	movw	r24, r28
    1a30:	65 e0       	ldi	r22, 0x05	; 5
    1a32:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <SPI_Write_Block>
    mirf_CSN_hi;
    1a36:	28 9a       	sbi	0x05, 0	; 5
void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    mirf_CE_lo;
    mirf_write_register(RX_ADDR_P0,adr,5);
    mirf_CE_hi;
    1a38:	2c 9a       	sbi	0x05, 4	; 5
}
    1a3a:	df 91       	pop	r29
    1a3c:	cf 91       	pop	r28
    1a3e:	08 95       	ret

00001a40 <mirf_set_TADDR>:

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
    1a40:	cf 93       	push	r28
    1a42:	df 93       	push	r29
    1a44:	ec 01       	movw	r28, r24
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1a46:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1a48:	80 e3       	ldi	r24, 0x30	; 48
    1a4a:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1a4e:	ce 01       	movw	r24, r28
    1a50:	65 e0       	ldi	r22, 0x05	; 5
    1a52:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <SPI_Write_Block>
    mirf_CSN_hi;
    1a56:	28 9a       	sbi	0x05, 0	; 5

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
	mirf_write_register(TX_ADDR, adr,5);
}
    1a58:	df 91       	pop	r29
    1a5a:	cf 91       	pop	r28
    1a5c:	08 95       	ret

00001a5e <mirf_data_ready>:
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
    1a5e:	80 91 16 05 	lds	r24, 0x0516
    1a62:	88 23       	and	r24, r24
    1a64:	11 f0       	breq	.+4      	; 0x1a6a <mirf_data_ready+0xc>
    1a66:	80 e0       	ldi	r24, 0x00	; 0
    mirf_CSN_lo;                                // Pull down chip select
    status = SPI_Write_Byte(NOP);               // Read status register
    mirf_CSN_hi;                                // Pull up chip select
    return status & (1<<RX_DR);

}
    1a68:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    1a6a:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
    1a6c:	8f ef       	ldi	r24, 0xFF	; 255
    1a6e:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
    1a72:	28 9a       	sbi	0x05, 0	; 5
    return status & (1<<RX_DR);
    1a74:	80 74       	andi	r24, 0x40	; 64
    1a76:	08 95       	ret

00001a78 <rx_fifo_is_empty>:

}

uint8_t rx_fifo_is_empty() {
    1a78:	df 93       	push	r29
    1a7a:	cf 93       	push	r28
    1a7c:	0f 92       	push	r0
    1a7e:	cd b7       	in	r28, 0x3d	; 61
    1a80:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t fifo_status = 0;
    1a82:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
    1a84:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    1a86:	87 e1       	ldi	r24, 0x17	; 23
    1a88:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    1a8c:	be 01       	movw	r22, r28
    1a8e:	6f 5f       	subi	r22, 0xFF	; 255
    1a90:	7f 4f       	sbci	r23, 0xFF	; 255
    1a92:	cb 01       	movw	r24, r22
    1a94:	41 e0       	ldi	r20, 0x01	; 1
    1a96:	0e 94 30 0c 	call	0x1860	; 0x1860 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    1a9a:	28 9a       	sbi	0x05, 0	; 5
	
	uint8_t fifo_status = 0;

	mirf_read_register(FIFO_STATUS, &fifo_status, 1);
	
	return (uint8_t)(fifo_status&0x01);
    1a9c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a9e:	81 70       	andi	r24, 0x01	; 1
    1aa0:	0f 90       	pop	r0
    1aa2:	cf 91       	pop	r28
    1aa4:	df 91       	pop	r29
    1aa6:	08 95       	ret

00001aa8 <flush_rx_fifo>:

void flush_rx_fifo() {

    mirf_CSN_lo;
    1aa8:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
    1aaa:	82 ee       	ldi	r24, 0xE2	; 226
    1aac:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    mirf_CSN_hi;
    1ab0:	28 9a       	sbi	0x05, 0	; 5

}
    1ab2:	08 95       	ret

00001ab4 <mirf_get_data>:

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    1ab4:	cf 93       	push	r28
    1ab6:	df 93       	push	r29
    1ab8:	ec 01       	movw	r28, r24
    mirf_CSN_lo;                               		// Pull down chip select
    1aba:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    1abc:	81 e6       	ldi	r24, 0x61	; 97
    1abe:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    1ac2:	ce 01       	movw	r24, r28
    1ac4:	be 01       	movw	r22, r28
    1ac6:	4d e0       	ldi	r20, 0x0D	; 13
    1ac8:	0e 94 30 0c 	call	0x1860	; 0x1860 <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
    1acc:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1ace:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1ad0:	87 e2       	ldi	r24, 0x27	; 39
    1ad2:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1ad6:	80 e4       	ldi	r24, 0x40	; 64
    1ad8:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    mirf_CSN_hi;
    1adc:	28 9a       	sbi	0x05, 0	; 5
    mirf_CSN_lo;                               		// Pull down chip select
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    mirf_CSN_hi;                               		// Pull up chip select
    mirf_config_register(STATUS,(1<<RX_DR));   		// Reset status register
}
    1ade:	df 91       	pop	r29
    1ae0:	cf 91       	pop	r28
    1ae2:	08 95       	ret

00001ae4 <mirf_config_register>:

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    1ae4:	df 93       	push	r29
    1ae6:	cf 93       	push	r28
    1ae8:	0f 92       	push	r0
    1aea:	cd b7       	in	r28, 0x3d	; 61
    1aec:	de b7       	in	r29, 0x3e	; 62
    mirf_CSN_lo;
    1aee:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1af0:	8f 71       	andi	r24, 0x1F	; 31
    1af2:	80 62       	ori	r24, 0x20	; 32
    1af4:	69 83       	std	Y+1, r22	; 0x01
    1af6:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1afa:	69 81       	ldd	r22, Y+1	; 0x01
    1afc:	86 2f       	mov	r24, r22
    1afe:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    mirf_CSN_hi;
    1b02:	28 9a       	sbi	0x05, 0	; 5
}
    1b04:	0f 90       	pop	r0
    1b06:	cf 91       	pop	r28
    1b08:	df 91       	pop	r29
    1b0a:	08 95       	ret

00001b0c <mirf_read_register>:

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    1b0c:	0f 93       	push	r16
    1b0e:	1f 93       	push	r17
    1b10:	df 93       	push	r29
    1b12:	cf 93       	push	r28
    1b14:	0f 92       	push	r0
    1b16:	cd b7       	in	r28, 0x3d	; 61
    1b18:	de b7       	in	r29, 0x3e	; 62
    1b1a:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    1b1c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    1b1e:	8f 71       	andi	r24, 0x1F	; 31
    1b20:	49 83       	std	Y+1, r20	; 0x01
    1b22:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    1b26:	c8 01       	movw	r24, r16
    1b28:	b8 01       	movw	r22, r16
    1b2a:	49 81       	ldd	r20, Y+1	; 0x01
    1b2c:	0e 94 30 0c 	call	0x1860	; 0x1860 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    1b30:	28 9a       	sbi	0x05, 0	; 5
}
    1b32:	0f 90       	pop	r0
    1b34:	cf 91       	pop	r28
    1b36:	df 91       	pop	r29
    1b38:	1f 91       	pop	r17
    1b3a:	0f 91       	pop	r16
    1b3c:	08 95       	ret

00001b3e <mirf_write_register>:

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    1b3e:	0f 93       	push	r16
    1b40:	1f 93       	push	r17
    1b42:	df 93       	push	r29
    1b44:	cf 93       	push	r28
    1b46:	0f 92       	push	r0
    1b48:	cd b7       	in	r28, 0x3d	; 61
    1b4a:	de b7       	in	r29, 0x3e	; 62
    1b4c:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    1b4e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1b50:	8f 71       	andi	r24, 0x1F	; 31
    1b52:	80 62       	ori	r24, 0x20	; 32
    1b54:	49 83       	std	Y+1, r20	; 0x01
    1b56:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1b5a:	c8 01       	movw	r24, r16
    1b5c:	49 81       	ldd	r20, Y+1	; 0x01
    1b5e:	64 2f       	mov	r22, r20
    1b60:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <SPI_Write_Block>
    mirf_CSN_hi;
    1b64:	28 9a       	sbi	0x05, 0	; 5
}
    1b66:	0f 90       	pop	r0
    1b68:	cf 91       	pop	r28
    1b6a:	df 91       	pop	r29
    1b6c:	1f 91       	pop	r17
    1b6e:	0f 91       	pop	r16
    1b70:	08 95       	ret

00001b72 <mirf_send>:


void mirf_send(uint8_t * value, uint8_t len) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
    1b72:	0f 93       	push	r16
    1b74:	1f 93       	push	r17
    1b76:	df 93       	push	r29
    1b78:	cf 93       	push	r28
    1b7a:	0f 92       	push	r0
    1b7c:	cd b7       	in	r28, 0x3d	; 61
    1b7e:	de b7       	in	r29, 0x3e	; 62
    1b80:	8c 01       	movw	r16, r24
    while (PTX) {}                  // Wait until last paket is send
    1b82:	80 91 16 05 	lds	r24, 0x0516
    1b86:	88 23       	and	r24, r24
    1b88:	e1 f7       	brne	.-8      	; 0x1b82 <mirf_send+0x10>

    mirf_CE_lo;
    1b8a:	2c 98       	cbi	0x05, 4	; 5

    PTX = 1;                        // Set to transmitter mode
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	80 93 16 05 	sts	0x0516, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1b92:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1b94:	80 e2       	ldi	r24, 0x20	; 32
    1b96:	69 83       	std	Y+1, r22	; 0x01
    1b98:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1b9c:	8a e4       	ldi	r24, 0x4A	; 74
    1b9e:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    mirf_CSN_hi;
    1ba2:	28 9a       	sbi	0x05, 0	; 5
    mirf_CE_lo;

    PTX = 1;                        // Set to transmitter mode
    TX_POWERUP;                     // Power up
    
    mirf_CSN_lo;                    // Pull down chip select
    1ba4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( FLUSH_TX );     // Write cmd to flush tx fifo
    1ba6:	81 ee       	ldi	r24, 0xE1	; 225
    1ba8:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    mirf_CSN_hi;                    // Pull up chip select
    1bac:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CSN_lo;                    // Pull down chip select
    1bae:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( W_TX_PAYLOAD ); // Write cmd to write payload
    1bb0:	80 ea       	ldi	r24, 0xA0	; 160
    1bb2:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    SPI_Write_Block(value,len);   // Write payload
    1bb6:	c8 01       	movw	r24, r16
    1bb8:	69 81       	ldd	r22, Y+1	; 0x01
    1bba:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <SPI_Write_Block>
    mirf_CSN_hi;                    // Pull up chip select
    1bbe:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CE_hi;                     // Start transmission
    1bc0:	2c 9a       	sbi	0x05, 4	; 5
}
    1bc2:	0f 90       	pop	r0
    1bc4:	cf 91       	pop	r28
    1bc6:	df 91       	pop	r29
    1bc8:	1f 91       	pop	r17
    1bca:	0f 91       	pop	r16
    1bcc:	08 95       	ret

00001bce <writeAckPayload>:

void writeAckPayload(unsigned char *data, unsigned char size) {
    1bce:	ef 92       	push	r14
    1bd0:	ff 92       	push	r15
    1bd2:	0f 93       	push	r16
    1bd4:	1f 93       	push	r17
    1bd6:	df 93       	push	r29
    1bd8:	cf 93       	push	r28
    1bda:	0f 92       	push	r0
    1bdc:	cd b7       	in	r28, 0x3d	; 61
    1bde:	de b7       	in	r29, 0x3e	; 62
    1be0:	18 2f       	mov	r17, r24
    1be2:	06 2f       	mov	r16, r22
	return pWidth;
}

void flushTxFifo() {

    mirf_CSN_lo;
    1be4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    1be6:	81 ee       	ldi	r24, 0xE1	; 225
    1be8:	99 83       	std	Y+1, r25	; 0x01
    1bea:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    mirf_CSN_hi;
    1bee:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
    1bf0:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
    1bf2:	88 ea       	ldi	r24, 0xA8	; 168
    1bf4:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>

	for(k=0; k<size; k++) {
    1bf8:	99 81       	ldd	r25, Y+1	; 0x01
    1bfa:	00 23       	and	r16, r16
    1bfc:	61 f0       	breq	.+24     	; 0x1c16 <writeAckPayload+0x48>
    1bfe:	61 2f       	mov	r22, r17
    1c00:	79 2f       	mov	r23, r25
    1c02:	7b 01       	movw	r14, r22
		SPI_Write_Byte(data[k]);
    1c04:	f7 01       	movw	r30, r14
    1c06:	81 91       	ld	r24, Z+
    1c08:	7f 01       	movw	r14, r30
    1c0a:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>

    mirf_CSN_lo;

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);

	for(k=0; k<size; k++) {
    1c0e:	8e 2d       	mov	r24, r14
    1c10:	81 1b       	sub	r24, r17
    1c12:	80 17       	cp	r24, r16
    1c14:	b8 f3       	brcs	.-18     	; 0x1c04 <writeAckPayload+0x36>
		SPI_Write_Byte(data[k]);
	}	

    mirf_CSN_hi;
    1c16:	28 9a       	sbi	0x05, 0	; 5


}
    1c18:	0f 90       	pop	r0
    1c1a:	cf 91       	pop	r28
    1c1c:	df 91       	pop	r29
    1c1e:	1f 91       	pop	r17
    1c20:	0f 91       	pop	r16
    1c22:	ff 90       	pop	r15
    1c24:	ef 90       	pop	r14
    1c26:	08 95       	ret

00001c28 <readPayloadWidthFromTopFifo>:

uint8_t readPayloadWidthFromTopFifo() {
	uint8_t pWidth = 0;

    mirf_CSN_lo;
    1c28:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_R_RX_PL_WID);
    1c2a:	80 e6       	ldi	r24, 0x60	; 96
    1c2c:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
	pWidth = SPI_Write_Byte(NOP); 	// not specified in the datasheet but the "NRF_R_RX_PL_WID" has a parameter,
    1c30:	8f ef       	ldi	r24, 0xFF	; 255
    1c32:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
									// we need to send a NOP to receive the actual payload size
    mirf_CSN_hi;
    1c36:	28 9a       	sbi	0x05, 0	; 5
	
	return pWidth;
}
    1c38:	08 95       	ret

00001c3a <readPayloadWidthFromPipe0>:

uint8_t readPayloadWidthFromPipe0() {
    1c3a:	df 93       	push	r29
    1c3c:	cf 93       	push	r28
    1c3e:	0f 92       	push	r0
    1c40:	cd b7       	in	r28, 0x3d	; 61
    1c42:	de b7       	in	r29, 0x3e	; 62
	uint8_t pWidth = 0;
    1c44:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
    1c46:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    1c48:	81 e1       	ldi	r24, 0x11	; 17
    1c4a:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    1c4e:	be 01       	movw	r22, r28
    1c50:	6f 5f       	subi	r22, 0xFF	; 255
    1c52:	7f 4f       	sbci	r23, 0xFF	; 255
    1c54:	cb 01       	movw	r24, r22
    1c56:	41 e0       	ldi	r20, 0x01	; 1
    1c58:	0e 94 30 0c 	call	0x1860	; 0x1860 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    1c5c:	28 9a       	sbi	0x05, 0	; 5
	uint8_t pWidth = 0;

	mirf_read_register(RX_PW_P0, &pWidth, 1);
	
	return pWidth;
}
    1c5e:	89 81       	ldd	r24, Y+1	; 0x01
    1c60:	0f 90       	pop	r0
    1c62:	cf 91       	pop	r28
    1c64:	df 91       	pop	r29
    1c66:	08 95       	ret

00001c68 <flushTxFifo>:

void flushTxFifo() {

    mirf_CSN_lo;
    1c68:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    1c6a:	81 ee       	ldi	r24, 0xE1	; 225
    1c6c:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    mirf_CSN_hi;
    1c70:	28 9a       	sbi	0x05, 0	; 5

}
    1c72:	08 95       	ret

00001c74 <handleRFCommands>:

void handleRFCommands() {
    1c74:	ff 92       	push	r15
    1c76:	0f 93       	push	r16
    1c78:	1f 93       	push	r17
    1c7a:	df 93       	push	r29
    1c7c:	cf 93       	push	r28
    1c7e:	0f 92       	push	r0
    1c80:	cd b7       	in	r28, 0x3d	; 61
    1c82:	de b7       	in	r29, 0x3e	; 62
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
    1c84:	80 91 16 05 	lds	r24, 0x0516
    1c88:	88 23       	and	r24, r24
    1c8a:	39 f0       	breq	.+14     	; 0x1c9a <handleRFCommands+0x26>

		

	}

}
    1c8c:	0f 90       	pop	r0
    1c8e:	cf 91       	pop	r28
    1c90:	df 91       	pop	r29
    1c92:	1f 91       	pop	r17
    1c94:	0f 91       	pop	r16
    1c96:	ff 90       	pop	r15
    1c98:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    1c9a:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
    1c9c:	8f ef       	ldi	r24, 0xFF	; 255
    1c9e:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
    1ca2:	28 9a       	sbi	0x05, 0	; 5

	unsigned int i=0;
	//uint8_t pWidth = 0;
	//uint8_t pWidthP0 = 0;

	if(mirf_data_ready()) {
    1ca4:	86 ff       	sbrs	r24, 6
    1ca6:	f2 cf       	rjmp	.-28     	; 0x1c8c <handleRFCommands+0x18>
		//if(spiCommError) {
		//	usart0Transmit(0xFE,1);
		//	return;
		//}

		rfFlags |= 0x02;
    1ca8:	80 91 17 03 	lds	r24, 0x0317
    1cac:	82 60       	ori	r24, 0x02	; 2
    1cae:	80 93 17 03 	sts	0x0317, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1cb2:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1cb4:	87 e2       	ldi	r24, 0x27	; 39
    1cb6:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1cba:	80 e7       	ldi	r24, 0x70	; 112
    1cbc:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    mirf_CSN_hi;
    1cc0:	28 9a       	sbi	0x05, 0	; 5

}

uint8_t rx_fifo_is_empty() {
	
	uint8_t fifo_status = 0;
    1cc2:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
    1cc4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    1cc6:	87 e1       	ldi	r24, 0x17	; 23
    1cc8:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    1ccc:	be 01       	movw	r22, r28
    1cce:	6f 5f       	subi	r22, 0xFF	; 255
    1cd0:	7f 4f       	sbci	r23, 0xFF	; 255
    1cd2:	cb 01       	movw	r24, r22
    1cd4:	41 e0       	ldi	r20, 0x01	; 1
    1cd6:	0e 94 30 0c 	call	0x1860	; 0x1860 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    1cda:	28 9a       	sbi	0x05, 0	; 5
	
	uint8_t fifo_status = 0;

	mirf_read_register(FIFO_STATUS, &fifo_status, 1);
	
	return (uint8_t)(fifo_status&0x01);
    1cdc:	89 81       	ldd	r24, Y+1	; 0x01
		// aren't present in the fifo with consequent wrong data read and wrong behavior of the robot.
		// To avoid this situtation we add this check before actually reading from the fifo to be 
		// sure there are correct data to be read.
		// We don't know why the IRQ for data reception is raised, maybe is not correctly reset sometimes
		// or it is raised when it shouldn't...
		if(rx_fifo_is_empty()) {
    1cde:	80 fd       	sbrc	r24, 0
    1ce0:	d5 cf       	rjmp	.-86     	; 0x1c8c <handleRFCommands+0x18>
}

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    mirf_CSN_lo;                               		// Pull down chip select
    1ce2:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    1ce4:	81 e6       	ldi	r24, 0x61	; 97
    1ce6:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    1cea:	8d e6       	ldi	r24, 0x6D	; 109
    1cec:	99 e0       	ldi	r25, 0x09	; 9
    1cee:	bc 01       	movw	r22, r24
    1cf0:	4d e0       	ldi	r20, 0x0D	; 13
    1cf2:	0e 94 30 0c 	call	0x1860	; 0x1860 <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
    1cf6:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1cf8:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1cfa:	87 e2       	ldi	r24, 0x27	; 39
    1cfc:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1d00:	80 e4       	ldi	r24, 0x40	; 64
    1d02:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    mirf_CSN_hi;
    1d06:	28 9a       	sbi	0x05, 0	; 5
	return (uint8_t)(fifo_status&0x01);
}

void flush_rx_fifo() {

    mirf_CSN_lo;
    1d08:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
    1d0a:	82 ee       	ldi	r24, 0xE2	; 226
    1d0c:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    mirf_CSN_hi;
    1d10:	28 9a       	sbi	0x05, 0	; 5
		mirf_get_data(rfData);
		flush_rx_fifo();

		//usartTransmit(rfData[0]);

		if(rfDebugMode==1) {
    1d12:	80 91 19 03 	lds	r24, 0x0319
    1d16:	81 30       	cpi	r24, 0x01	; 1
    1d18:	09 f4       	brne	.+2      	; 0x1d1c <handleRFCommands+0xa8>
    1d1a:	4b c1       	rjmp	.+662    	; 0x1fb2 <handleRFCommands+0x33e>

			//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
			// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
			// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    1d1c:	40 91 6d 09 	lds	r20, 0x096D
    1d20:	24 2f       	mov	r18, r20
    1d22:	44 23       	and	r20, r20
    1d24:	09 f0       	breq	.+2      	; 0x1d28 <handleRFCommands+0xb4>
    1d26:	9c c1       	rjmp	.+824    	; 0x2060 <handleRFCommands+0x3ec>
    1d28:	50 91 6e 09 	lds	r21, 0x096E
    1d2c:	e5 2f       	mov	r30, r21
    1d2e:	55 23       	and	r21, r21
    1d30:	09 f4       	brne	.+2      	; 0x1d34 <handleRFCommands+0xc0>
    1d32:	10 c2       	rjmp	.+1056   	; 0x2154 <handleRFCommands+0x4e0>

				sleep(60);
    1d34:	00 91 6f 09 	lds	r16, 0x096F

			}

			if(calibrateOdomFlag==0) { 
    1d38:	80 91 4f 05 	lds	r24, 0x054F
    1d3c:	88 23       	and	r24, r24
    1d3e:	41 f5       	brne	.+80     	; 0x1d90 <handleRFCommands+0x11c>
				speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    1d40:	70 91 71 09 	lds	r23, 0x0971
    1d44:	27 2f       	mov	r18, r23
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	2f 77       	andi	r18, 0x7F	; 127
    1d4a:	30 70       	andi	r19, 0x00	; 0
    1d4c:	30 93 14 03 	sts	0x0314, r19
    1d50:	20 93 13 03 	sts	0x0313, r18
				speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
    1d54:	60 91 72 09 	lds	r22, 0x0972
    1d58:	86 2f       	mov	r24, r22
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	8f 77       	andi	r24, 0x7F	; 127
    1d5e:	90 70       	andi	r25, 0x00	; 0
    1d60:	90 93 12 03 	sts	0x0312, r25
    1d64:	80 93 11 03 	sts	0x0311, r24
											// in the same range of the measured speed that is 0..800.
											// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
											// this means that the range is more or less 0..400.


				if((rfData[4]&0x80)==0x80) {			// motor right forward
    1d68:	77 fd       	sbrc	r23, 7
    1d6a:	03 c0       	rjmp	.+6      	; 0x1d72 <handleRFCommands+0xfe>
					pwm_right_desired = speedr; 		// speed received (0..127) is expressed in 1/5 of mm/s (0..635 mm/s)
				} else {								// backward
					pwm_right_desired = -(speedr);
    1d6c:	30 95       	com	r19
    1d6e:	21 95       	neg	r18
    1d70:	3f 4f       	sbci	r19, 0xFF	; 255
    1d72:	30 93 fa 02 	sts	0x02FA, r19
    1d76:	20 93 f9 02 	sts	0x02F9, r18
				}

				if((rfData[5]&0x80)==0x80) {			// motor left forward
    1d7a:	67 fd       	sbrc	r22, 7
    1d7c:	03 c0       	rjmp	.+6      	; 0x1d84 <handleRFCommands+0x110>
					pwm_left_desired = speedl;
				} else {								// backward
					pwm_left_desired = -(speedl);
    1d7e:	90 95       	com	r25
    1d80:	81 95       	neg	r24
    1d82:	9f 4f       	sbci	r25, 0xFF	; 255
    1d84:	90 93 fc 02 	sts	0x02FC, r25
    1d88:	80 93 fb 02 	sts	0x02FB, r24
    1d8c:	24 2f       	mov	r18, r20
    1d8e:	e5 2f       	mov	r30, r21

			}


			for(i=0; i<3; i++) {
				dataLED[i]=rfData[i]&0xFF;
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	30 93 56 09 	sts	0x0956, r19
    1d96:	20 93 55 09 	sts	0x0955, r18
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	f0 93 58 09 	sts	0x0958, r31
    1da0:	e0 93 57 09 	sts	0x0957, r30
    1da4:	10 e0       	ldi	r17, 0x00	; 0
    1da6:	10 93 5a 09 	sts	0x095A, r17
    1daa:	00 93 59 09 	sts	0x0959, r16
			}
			pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
    1dae:	92 2f       	mov	r25, r18
    1db0:	88 27       	eor	r24, r24
    1db2:	82 1b       	sub	r24, r18
    1db4:	93 0b       	sbc	r25, r19
    1db6:	24 e6       	ldi	r18, 0x64	; 100
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	b9 01       	movw	r22, r18
    1dbc:	0e 94 92 51 	call	0xa324	; 0xa324 <__udivmodhi4>
    1dc0:	f6 2e       	mov	r15, r22
    1dc2:	f0 94       	com	r15
    1dc4:	f0 92 0c 02 	sts	0x020C, r15
			pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
    1dc8:	5e 2f       	mov	r21, r30
    1dca:	44 27       	eor	r20, r20
    1dcc:	4e 1b       	sub	r20, r30
    1dce:	5f 0b       	sbc	r21, r31
    1dd0:	ca 01       	movw	r24, r20
    1dd2:	b9 01       	movw	r22, r18
    1dd4:	0e 94 92 51 	call	0xa324	; 0xa324 <__udivmodhi4>
    1dd8:	60 95       	com	r22
    1dda:	60 93 0e 02 	sts	0x020E, r22
			pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
    1dde:	50 2f       	mov	r21, r16
    1de0:	44 27       	eor	r20, r20
    1de2:	40 1b       	sub	r20, r16
    1de4:	51 0b       	sbc	r21, r17
    1de6:	ca 01       	movw	r24, r20
    1de8:	b9 01       	movw	r22, r18
    1dea:	0e 94 92 51 	call	0xa324	; 0xa324 <__udivmodhi4>
    1dee:	60 95       	com	r22
    1df0:	60 93 0d 02 	sts	0x020D, r22
			updateRedLed(pwm_red);
    1df4:	8f 2d       	mov	r24, r15
    1df6:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <updateRedLed>
			updateGreenLed(pwm_green);
    1dfa:	80 91 0d 02 	lds	r24, 0x020D
    1dfe:	0e 94 f9 3a 	call	0x75f2	; 0x75f2 <updateGreenLed>
			updateBlueLed(pwm_blue);
    1e02:	80 91 0e 02 	lds	r24, 0x020E
    1e06:	0e 94 0d 3b 	call	0x761a	; 0x761a <updateBlueLed>


			if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
    1e0a:	80 91 70 09 	lds	r24, 0x0970
    1e0e:	80 ff       	sbrs	r24, 0
    1e10:	59 c1       	rjmp	.+690    	; 0x20c4 <handleRFCommands+0x450>
				LED_IR1_LOW;
    1e12:	44 98       	cbi	0x08, 4	; 8
			} else {
				LED_IR1_HIGH;
			}

			if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
    1e14:	81 ff       	sbrs	r24, 1
    1e16:	54 c1       	rjmp	.+680    	; 0x20c0 <handleRFCommands+0x44c>
				LED_IR2_LOW;
    1e18:	45 98       	cbi	0x08, 5	; 8
			} else {
				LED_IR2_HIGH;
			}

			if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
    1e1a:	98 2f       	mov	r25, r24
    1e1c:	82 ff       	sbrs	r24, 2
    1e1e:	4d c1       	rjmp	.+666    	; 0x20ba <handleRFCommands+0x446>
				irEnabled = 1;
    1e20:	21 e0       	ldi	r18, 0x01	; 1
    1e22:	20 93 12 02 	sts	0x0212, r18
			} else {
				irEnabled = 0;
			}

			if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
    1e26:	84 fd       	sbrc	r24, 4
    1e28:	a2 c1       	rjmp	.+836    	; 0x216e <handleRFCommands+0x4fa>
				calibrateSensors();
				resetOdometry();
			}

			if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
    1e2a:	86 ff       	sbrs	r24, 6
    1e2c:	43 c1       	rjmp	.+646    	; 0x20b4 <handleRFCommands+0x440>
				obstacleAvoidanceEnabled = 1;
    1e2e:	81 e0       	ldi	r24, 0x01	; 1
    1e30:	80 93 6c 04 	sts	0x046C, r24
			} else {
				obstacleAvoidanceEnabled = 0;
			}

			if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
    1e34:	97 fd       	sbrc	r25, 7
    1e36:	c6 c1       	rjmp	.+908    	; 0x21c4 <handleRFCommands+0x550>
				cliffAvoidanceEnabled = 1;
			} else {
				cliffAvoidanceEnabled = 0;
    1e38:	10 92 6d 04 	sts	0x046D, r1
			}

			// handle small green leds
			#ifdef HW_REV_3_1			

				if(bit_is_set(rfData[6], 0) ) {
    1e3c:	80 91 73 09 	lds	r24, 0x0973
    1e40:	80 ff       	sbrs	r24, 0
    1e42:	32 c1       	rjmp	.+612    	; 0x20a8 <handleRFCommands+0x434>
					GREEN_LED0_ON;
    1e44:	80 91 0b 01 	lds	r24, 0x010B
    1e48:	8e 7f       	andi	r24, 0xFE	; 254
    1e4a:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED0_OFF;
				}
				
				if(bit_is_set(rfData[6], 1) ) {
    1e4e:	80 91 73 09 	lds	r24, 0x0973
    1e52:	81 ff       	sbrs	r24, 1
    1e54:	23 c1       	rjmp	.+582    	; 0x209c <handleRFCommands+0x428>
					GREEN_LED1_ON;
    1e56:	80 91 0b 01 	lds	r24, 0x010B
    1e5a:	8d 7f       	andi	r24, 0xFD	; 253
    1e5c:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED1_OFF;
				}
				
				if(bit_is_set(rfData[6], 2) ) {
    1e60:	80 91 73 09 	lds	r24, 0x0973
    1e64:	82 ff       	sbrs	r24, 2
    1e66:	14 c1       	rjmp	.+552    	; 0x2090 <handleRFCommands+0x41c>
					GREEN_LED2_ON;
    1e68:	80 91 0b 01 	lds	r24, 0x010B
    1e6c:	8b 7f       	andi	r24, 0xFB	; 251
    1e6e:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED2_OFF;
				}												

				if(bit_is_set(rfData[6], 3) ) {
    1e72:	80 91 73 09 	lds	r24, 0x0973
    1e76:	83 ff       	sbrs	r24, 3
    1e78:	09 c1       	rjmp	.+530    	; 0x208c <handleRFCommands+0x418>
					GREEN_LED3_ON;
    1e7a:	a3 98       	cbi	0x14, 3	; 20
				} else {
					GREEN_LED3_OFF;
				}

				if(bit_is_set(rfData[6], 4) ) {
    1e7c:	80 91 73 09 	lds	r24, 0x0973
    1e80:	84 ff       	sbrs	r24, 4
    1e82:	fe c0       	rjmp	.+508    	; 0x2080 <handleRFCommands+0x40c>
					GREEN_LED4_ON;
    1e84:	80 91 0b 01 	lds	r24, 0x010B
    1e88:	8f 7e       	andi	r24, 0xEF	; 239
    1e8a:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED4_OFF;
				}

				if(bit_is_set(rfData[6], 5) ) {
    1e8e:	80 91 73 09 	lds	r24, 0x0973
    1e92:	85 ff       	sbrs	r24, 5
    1e94:	ef c0       	rjmp	.+478    	; 0x2074 <handleRFCommands+0x400>
					GREEN_LED5_ON;
    1e96:	80 91 0b 01 	lds	r24, 0x010B
    1e9a:	8f 7d       	andi	r24, 0xDF	; 223
    1e9c:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED5_OFF;
				}

				if(bit_is_set(rfData[6], 6) ) {
    1ea0:	80 91 73 09 	lds	r24, 0x0973
    1ea4:	86 ff       	sbrs	r24, 6
    1ea6:	e0 c0       	rjmp	.+448    	; 0x2068 <handleRFCommands+0x3f4>
					GREEN_LED6_ON;
    1ea8:	80 91 0b 01 	lds	r24, 0x010B
    1eac:	8f 7b       	andi	r24, 0xBF	; 191
    1eae:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED6_OFF;
				}

				if(bit_is_set(rfData[6], 7) ) {
    1eb2:	80 91 73 09 	lds	r24, 0x0973
    1eb6:	87 fd       	sbrc	r24, 7
    1eb8:	7f c1       	rjmp	.+766    	; 0x21b8 <handleRFCommands+0x544>
					GREEN_LED7_ON;
				} else {
					GREEN_LED7_OFF;
    1eba:	80 91 0b 01 	lds	r24, 0x010B
    1ebe:	80 68       	ori	r24, 0x80	; 128
    1ec0:	80 93 0b 01 	sts	0x010B, r24
				}

			#endif
		
			if(currentSelector == 8) {
    1ec4:	80 91 4c 04 	lds	r24, 0x044C
    1ec8:	88 30       	cpi	r24, 0x08	; 8
    1eca:	09 f4       	brne	.+2      	; 0x1ece <handleRFCommands+0x25a>
    1ecc:	58 c1       	rjmp	.+688    	; 0x217e <handleRFCommands+0x50a>

			// read and handle the remaining bytes of the payload (at the moment not used)


			// write back the ack payload
			ackPayload[0] = packetId&0xFF;
    1ece:	80 91 0b 02 	lds	r24, 0x020B
    1ed2:	80 93 a5 08 	sts	0x08A5, r24

			switch(packetId) {
    1ed6:	85 30       	cpi	r24, 0x05	; 5
    1ed8:	09 f4       	brne	.+2      	; 0x1edc <handleRFCommands+0x268>
    1eda:	78 c1       	rjmp	.+752    	; 0x21cc <handleRFCommands+0x558>
    1edc:	86 30       	cpi	r24, 0x06	; 6
    1ede:	08 f4       	brcc	.+2      	; 0x1ee2 <handleRFCommands+0x26e>
    1ee0:	f3 c0       	rjmp	.+486    	; 0x20c8 <handleRFCommands+0x454>
    1ee2:	86 30       	cpi	r24, 0x06	; 6
    1ee4:	09 f4       	brne	.+2      	; 0x1ee8 <handleRFCommands+0x274>
    1ee6:	34 c2       	rjmp	.+1128   	; 0x2350 <__stack+0x151>
    1ee8:	87 30       	cpi	r24, 0x07	; 7
    1eea:	09 f0       	breq	.+2      	; 0x1eee <handleRFCommands+0x27a>
    1eec:	62 c0       	rjmp	.+196    	; 0x1fb2 <handleRFCommands+0x33e>
					packetId = 7;
					break;


				case 7:
					ackPayload[1] = ((signed long int)leftMotSteps)&0xFF;
    1eee:	60 91 d5 02 	lds	r22, 0x02D5
    1ef2:	70 91 d6 02 	lds	r23, 0x02D6
    1ef6:	80 91 d7 02 	lds	r24, 0x02D7
    1efa:	90 91 d8 02 	lds	r25, 0x02D8
    1efe:	0e 94 a0 4f 	call	0x9f40	; 0x9f40 <__fixsfsi>
    1f02:	60 93 a6 08 	sts	0x08A6, r22
					ackPayload[2] = ((signed long int)leftMotSteps)>>8;
    1f06:	70 93 a7 08 	sts	0x08A7, r23
					ackPayload[3] = ((signed long int)leftMotSteps)>>16;
    1f0a:	80 93 a8 08 	sts	0x08A8, r24
					ackPayload[4] = ((signed long int)leftMotSteps)>>24;
    1f0e:	90 93 a9 08 	sts	0x08A9, r25
					ackPayload[5] = ((signed long int)rightMotSteps)&0xFF;
    1f12:	60 91 d1 02 	lds	r22, 0x02D1
    1f16:	70 91 d2 02 	lds	r23, 0x02D2
    1f1a:	80 91 d3 02 	lds	r24, 0x02D3
    1f1e:	90 91 d4 02 	lds	r25, 0x02D4
    1f22:	0e 94 a0 4f 	call	0x9f40	; 0x9f40 <__fixsfsi>
    1f26:	60 93 aa 08 	sts	0x08AA, r22
					ackPayload[6] = ((signed long int)rightMotSteps)>>8;
    1f2a:	70 93 ab 08 	sts	0x08AB, r23
					ackPayload[7] = ((signed long int)rightMotSteps)>>16;
    1f2e:	80 93 ac 08 	sts	0x08AC, r24
					ackPayload[8] = ((signed long int)rightMotSteps)>>24;
    1f32:	90 93 ad 08 	sts	0x08AD, r25
					lastTheta = theta;
    1f36:	60 91 6f 04 	lds	r22, 0x046F
    1f3a:	70 91 70 04 	lds	r23, 0x0470
    1f3e:	80 91 71 04 	lds	r24, 0x0471
    1f42:	90 91 72 04 	lds	r25, 0x0472
    1f46:	60 93 73 04 	sts	0x0473, r22
    1f4a:	70 93 74 04 	sts	0x0474, r23
    1f4e:	80 93 75 04 	sts	0x0475, r24
    1f52:	90 93 76 04 	sts	0x0476, r25
					ackPayload[9] = ((signed int)(lastTheta*573.0))&0xFF;	// radians to degrees => 573 = 1800/PI
    1f56:	20 e0       	ldi	r18, 0x00	; 0
    1f58:	30 e4       	ldi	r19, 0x40	; 64
    1f5a:	4f e0       	ldi	r20, 0x0F	; 15
    1f5c:	54 e4       	ldi	r21, 0x44	; 68
    1f5e:	0e 94 e8 50 	call	0xa1d0	; 0xa1d0 <__mulsf3>
    1f62:	0e 94 a0 4f 	call	0x9f40	; 0x9f40 <__fixsfsi>
    1f66:	26 2f       	mov	r18, r22
    1f68:	20 93 ae 08 	sts	0x08AE, r18
					ackPayload[10] = ((signed int)(lastTheta*573.0))>>8;				
    1f6c:	70 93 af 08 	sts	0x08AF, r23
					ackPayload[11] = ((unsigned int)xPos)&0xFF;
    1f70:	60 91 77 04 	lds	r22, 0x0477
    1f74:	70 91 78 04 	lds	r23, 0x0478
    1f78:	80 91 79 04 	lds	r24, 0x0479
    1f7c:	90 91 7a 04 	lds	r25, 0x047A
    1f80:	0e 94 a5 4f 	call	0x9f4a	; 0x9f4a <__fixunssfsi>
    1f84:	60 93 b0 08 	sts	0x08B0, r22
					ackPayload[12] = ((unsigned int)xPos)>>8;
    1f88:	70 93 b1 08 	sts	0x08B1, r23
					ackPayload[13] = ((unsigned int)yPos)&0xFF;
    1f8c:	60 91 7b 04 	lds	r22, 0x047B
    1f90:	70 91 7c 04 	lds	r23, 0x047C
    1f94:	80 91 7d 04 	lds	r24, 0x047D
    1f98:	90 91 7e 04 	lds	r25, 0x047E
    1f9c:	0e 94 a5 4f 	call	0x9f4a	; 0x9f4a <__fixunssfsi>
    1fa0:	60 93 b2 08 	sts	0x08B2, r22
					ackPayload[14] = ((unsigned int)yPos)>>8;
    1fa4:	70 93 b3 08 	sts	0x08B3, r23
					//ackPayload[10] = ((unsigned int)(thetaOld*573.0))>>8;
					//ackPayload[11] = ((unsigned int)xPosOld)&0xFF;
					//ackPayload[12] = ((unsigned int)xPosOld)>>8;
					//ackPayload[13] = ((unsigned int)yPosOld)&0xFF;
					//ackPayload[14] = ((unsigned int)yPosOld)>>8;
					ackPayload[15] = 0;
    1fa8:	10 92 b4 08 	sts	0x08B4, r1
					packetId = 3;
    1fac:	83 e0       	ldi	r24, 0x03	; 3
    1fae:	80 93 0b 02 	sts	0x020B, r24
	return pWidth;
}

void flushTxFifo() {

    mirf_CSN_lo;
    1fb2:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    1fb4:	81 ee       	ldi	r24, 0xE1	; 225
    1fb6:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    mirf_CSN_hi;
    1fba:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
    1fbc:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
    1fbe:	88 ea       	ldi	r24, 0xA8	; 168
    1fc0:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>

	for(k=0; k<size; k++) {
		SPI_Write_Byte(data[k]);
    1fc4:	80 91 a5 08 	lds	r24, 0x08A5
    1fc8:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    1fcc:	80 91 a6 08 	lds	r24, 0x08A6
    1fd0:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    1fd4:	80 91 a7 08 	lds	r24, 0x08A7
    1fd8:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    1fdc:	80 91 a8 08 	lds	r24, 0x08A8
    1fe0:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    1fe4:	80 91 a9 08 	lds	r24, 0x08A9
    1fe8:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    1fec:	80 91 aa 08 	lds	r24, 0x08AA
    1ff0:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    1ff4:	80 91 ab 08 	lds	r24, 0x08AB
    1ff8:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    1ffc:	80 91 ac 08 	lds	r24, 0x08AC
    2000:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    2004:	80 91 ad 08 	lds	r24, 0x08AD
    2008:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    200c:	80 91 ae 08 	lds	r24, 0x08AE
    2010:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    2014:	80 91 af 08 	lds	r24, 0x08AF
    2018:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    201c:	80 91 b0 08 	lds	r24, 0x08B0
    2020:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    2024:	80 91 b1 08 	lds	r24, 0x08B1
    2028:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    202c:	80 91 b2 08 	lds	r24, 0x08B2
    2030:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    2034:	80 91 b3 08 	lds	r24, 0x08B3
    2038:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
    203c:	80 91 b4 08 	lds	r24, 0x08B4
    2040:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <SPI_Write_Byte>
	}	

    mirf_CSN_hi;
    2044:	28 9a       	sbi	0x05, 0	; 5

		

	}

}
    2046:	0f 90       	pop	r0
    2048:	cf 91       	pop	r28
    204a:	df 91       	pop	r29
    204c:	1f 91       	pop	r17
    204e:	0f 91       	pop	r16
    2050:	ff 90       	pop	r15
    2052:	08 95       	ret
			// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
			// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {

				sleep(60);
    2054:	8c e3       	ldi	r24, 0x3C	; 60
    2056:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <sleep>
    205a:	40 91 6d 09 	lds	r20, 0x096D
    205e:	24 2f       	mov	r18, r20
    2060:	50 91 6e 09 	lds	r21, 0x096E
    2064:	e5 2f       	mov	r30, r21
    2066:	66 ce       	rjmp	.-820    	; 0x1d34 <handleRFCommands+0xc0>
				}

				if(bit_is_set(rfData[6], 6) ) {
					GREEN_LED6_ON;
				} else {
					GREEN_LED6_OFF;
    2068:	80 91 0b 01 	lds	r24, 0x010B
    206c:	80 64       	ori	r24, 0x40	; 64
    206e:	80 93 0b 01 	sts	0x010B, r24
    2072:	1f cf       	rjmp	.-450    	; 0x1eb2 <handleRFCommands+0x23e>
				}

				if(bit_is_set(rfData[6], 5) ) {
					GREEN_LED5_ON;
				} else {
					GREEN_LED5_OFF;
    2074:	80 91 0b 01 	lds	r24, 0x010B
    2078:	80 62       	ori	r24, 0x20	; 32
    207a:	80 93 0b 01 	sts	0x010B, r24
    207e:	10 cf       	rjmp	.-480    	; 0x1ea0 <handleRFCommands+0x22c>
				}

				if(bit_is_set(rfData[6], 4) ) {
					GREEN_LED4_ON;
				} else {
					GREEN_LED4_OFF;
    2080:	80 91 0b 01 	lds	r24, 0x010B
    2084:	80 61       	ori	r24, 0x10	; 16
    2086:	80 93 0b 01 	sts	0x010B, r24
    208a:	01 cf       	rjmp	.-510    	; 0x1e8e <handleRFCommands+0x21a>
				}												

				if(bit_is_set(rfData[6], 3) ) {
					GREEN_LED3_ON;
				} else {
					GREEN_LED3_OFF;
    208c:	a3 9a       	sbi	0x14, 3	; 20
    208e:	f6 ce       	rjmp	.-532    	; 0x1e7c <handleRFCommands+0x208>
				}
				
				if(bit_is_set(rfData[6], 2) ) {
					GREEN_LED2_ON;
				} else {
					GREEN_LED2_OFF;
    2090:	80 91 0b 01 	lds	r24, 0x010B
    2094:	84 60       	ori	r24, 0x04	; 4
    2096:	80 93 0b 01 	sts	0x010B, r24
    209a:	eb ce       	rjmp	.-554    	; 0x1e72 <handleRFCommands+0x1fe>
				}
				
				if(bit_is_set(rfData[6], 1) ) {
					GREEN_LED1_ON;
				} else {
					GREEN_LED1_OFF;
    209c:	80 91 0b 01 	lds	r24, 0x010B
    20a0:	82 60       	ori	r24, 0x02	; 2
    20a2:	80 93 0b 01 	sts	0x010B, r24
    20a6:	dc ce       	rjmp	.-584    	; 0x1e60 <handleRFCommands+0x1ec>
			#ifdef HW_REV_3_1			

				if(bit_is_set(rfData[6], 0) ) {
					GREEN_LED0_ON;
				} else {
					GREEN_LED0_OFF;
    20a8:	80 91 0b 01 	lds	r24, 0x010B
    20ac:	81 60       	ori	r24, 0x01	; 1
    20ae:	80 93 0b 01 	sts	0x010B, r24
    20b2:	cd ce       	rjmp	.-614    	; 0x1e4e <handleRFCommands+0x1da>
			}

			if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
				obstacleAvoidanceEnabled = 1;
			} else {
				obstacleAvoidanceEnabled = 0;
    20b4:	10 92 6c 04 	sts	0x046C, r1
    20b8:	bd ce       	rjmp	.-646    	; 0x1e34 <handleRFCommands+0x1c0>
			}

			if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
				irEnabled = 1;
			} else {
				irEnabled = 0;
    20ba:	10 92 12 02 	sts	0x0212, r1
    20be:	b3 ce       	rjmp	.-666    	; 0x1e26 <handleRFCommands+0x1b2>
			}

			if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
				LED_IR2_LOW;
			} else {
				LED_IR2_HIGH;
    20c0:	45 9a       	sbi	0x08, 5	; 8
    20c2:	ab ce       	rjmp	.-682    	; 0x1e1a <handleRFCommands+0x1a6>


			if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
				LED_IR1_LOW;
			} else {
				LED_IR1_HIGH;
    20c4:	44 9a       	sbi	0x08, 4	; 8
    20c6:	a6 ce       	rjmp	.-692    	; 0x1e14 <handleRFCommands+0x1a0>


			// write back the ack payload
			ackPayload[0] = packetId&0xFF;

			switch(packetId) {
    20c8:	83 30       	cpi	r24, 0x03	; 3
    20ca:	09 f4       	brne	.+2      	; 0x20ce <handleRFCommands+0x45a>
    20cc:	db c0       	rjmp	.+438    	; 0x2284 <__stack+0x85>
    20ce:	84 30       	cpi	r24, 0x04	; 4
    20d0:	09 f0       	breq	.+2      	; 0x20d4 <handleRFCommands+0x460>
    20d2:	6f cf       	rjmp	.-290    	; 0x1fb2 <handleRFCommands+0x33e>
					#endif
					packetId = 4;
					break;

				case 4:
					ackPayload[1] = proximityResult[4]&0xFF;
    20d4:	90 91 61 02 	lds	r25, 0x0261
    20d8:	80 91 62 02 	lds	r24, 0x0262
    20dc:	90 93 a6 08 	sts	0x08A6, r25
					ackPayload[2] = proximityResult[4]>>8;
    20e0:	80 93 a7 08 	sts	0x08A7, r24
					ackPayload[3] = proximityResult[8]&0xFF;
    20e4:	90 91 69 02 	lds	r25, 0x0269
    20e8:	80 91 6a 02 	lds	r24, 0x026A
    20ec:	90 93 a8 08 	sts	0x08A8, r25
					ackPayload[4] = proximityResult[8]>>8;
    20f0:	80 93 a9 08 	sts	0x08A9, r24
					ackPayload[5] = proximityResult[9]&0xFF;
    20f4:	90 91 6b 02 	lds	r25, 0x026B
    20f8:	80 91 6c 02 	lds	r24, 0x026C
    20fc:	90 93 aa 08 	sts	0x08AA, r25
					ackPayload[6] = proximityResult[9]>>8;
    2100:	80 93 ab 08 	sts	0x08AB, r24
					ackPayload[7] = proximityResult[10]&0xFF;
    2104:	90 91 6d 02 	lds	r25, 0x026D
    2108:	80 91 6e 02 	lds	r24, 0x026E
    210c:	90 93 ac 08 	sts	0x08AC, r25
					ackPayload[8] = proximityResult[10]>>8;
    2110:	80 93 ad 08 	sts	0x08AD, r24
					ackPayload[9] = proximityResult[11]&0xFF;
    2114:	90 91 6f 02 	lds	r25, 0x026F
    2118:	80 91 70 02 	lds	r24, 0x0270
    211c:	90 93 ae 08 	sts	0x08AE, r25
					ackPayload[10] = proximityResult[11]>>8;
    2120:	80 93 af 08 	sts	0x08AF, r24
					ackPayload[11] = accX&0xFF;
    2124:	90 91 2c 04 	lds	r25, 0x042C
    2128:	80 91 2d 04 	lds	r24, 0x042D
    212c:	90 93 b0 08 	sts	0x08B0, r25
					ackPayload[12] = accX>>8;
    2130:	80 93 b1 08 	sts	0x08B1, r24
					ackPayload[13] = accY&0xFF;
    2134:	90 91 2e 04 	lds	r25, 0x042E
    2138:	80 91 2f 04 	lds	r24, 0x042F
    213c:	90 93 b2 08 	sts	0x08B2, r25
					ackPayload[14] = accY>>8;
    2140:	80 93 b3 08 	sts	0x08B3, r24
					ackPayload[15] = irCommand;
    2144:	80 91 27 04 	lds	r24, 0x0427
    2148:	80 93 b4 08 	sts	0x08B4, r24
					packetId = 5;
    214c:	85 e0       	ldi	r24, 0x05	; 5
    214e:	80 93 0b 02 	sts	0x020B, r24
					break;
    2152:	2f cf       	rjmp	.-418    	; 0x1fb2 <handleRFCommands+0x33e>

			//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
			// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
			// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    2154:	00 91 6f 09 	lds	r16, 0x096F
    2158:	00 23       	and	r16, r16
    215a:	09 f0       	breq	.+2      	; 0x215e <handleRFCommands+0x4ea>
    215c:	4b c1       	rjmp	.+662    	; 0x23f4 <__stack+0x1f5>
    215e:	80 91 70 09 	lds	r24, 0x0970
    2162:	88 30       	cpi	r24, 0x08	; 8
    2164:	09 f4       	brne	.+2      	; 0x2168 <handleRFCommands+0x4f4>
    2166:	48 c1       	rjmp	.+656    	; 0x23f8 <__stack+0x1f9>
    2168:	e0 2f       	mov	r30, r16
    216a:	20 2f       	mov	r18, r16
    216c:	e5 cd       	rjmp	.-1078   	; 0x1d38 <handleRFCommands+0xc4>
			} else {
				irEnabled = 0;
			}

			if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
				calibrateSensors();
    216e:	0e 94 dd 3d 	call	0x7bba	; 0x7bba <calibrateSensors>
				resetOdometry();
    2172:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <resetOdometry>
    2176:	90 91 70 09 	lds	r25, 0x0970
    217a:	89 2f       	mov	r24, r25
    217c:	56 ce       	rjmp	.-852    	; 0x1e2a <handleRFCommands+0x1b6>
				}

			#endif
		
			if(currentSelector == 8) {
				if(calibrateOdomFlag==0) {
    217e:	80 91 4f 05 	lds	r24, 0x054F
    2182:	88 23       	and	r24, r24
    2184:	09 f0       	breq	.+2      	; 0x2188 <handleRFCommands+0x514>
    2186:	a3 ce       	rjmp	.-698    	; 0x1ece <handleRFCommands+0x25a>
					if((rfData[7]&0b00000001)==0b00000001) {
    2188:	80 91 74 09 	lds	r24, 0x0974
    218c:	80 ff       	sbrs	r24, 0
    218e:	9f ce       	rjmp	.-706    	; 0x1ece <handleRFCommands+0x25a>
						calibrateSensors();
    2190:	0e 94 dd 3d 	call	0x7bba	; 0x7bba <calibrateSensors>
						proximityResult[8] = 1023;	// because the first time this value could be low after calibration
    2194:	8f ef       	ldi	r24, 0xFF	; 255
    2196:	93 e0       	ldi	r25, 0x03	; 3
    2198:	90 93 6a 02 	sts	0x026A, r25
    219c:	80 93 69 02 	sts	0x0269, r24
						proximityResult[11] = 1023;	// and in that case a false black line will be detected
    21a0:	90 93 70 02 	sts	0x0270, r25
    21a4:	80 93 6f 02 	sts	0x026F, r24
						calibState = 0;
    21a8:	10 92 44 0b 	sts	0x0B44, r1
						calibVelIndex = 1;
    21ac:	81 e0       	ldi	r24, 0x01	; 1
    21ae:	80 93 9e 08 	sts	0x089E, r24
						calibrateOdomFlag = 1;
    21b2:	80 93 4f 05 	sts	0x054F, r24
    21b6:	8b ce       	rjmp	.-746    	; 0x1ece <handleRFCommands+0x25a>
				} else {
					GREEN_LED6_OFF;
				}

				if(bit_is_set(rfData[6], 7) ) {
					GREEN_LED7_ON;
    21b8:	80 91 0b 01 	lds	r24, 0x010B
    21bc:	8f 77       	andi	r24, 0x7F	; 127
    21be:	80 93 0b 01 	sts	0x010B, r24
    21c2:	80 ce       	rjmp	.-768    	; 0x1ec4 <handleRFCommands+0x250>
			} else {
				obstacleAvoidanceEnabled = 0;
			}

			if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
				cliffAvoidanceEnabled = 1;
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	80 93 6d 04 	sts	0x046D, r24
    21ca:	38 ce       	rjmp	.-912    	; 0x1e3c <handleRFCommands+0x1c8>
					ackPayload[15] = irCommand;
					packetId = 5;
					break;

				case 5:
					ackPayload[1] = proximityValue[0]&0xFF;
    21cc:	80 91 29 02 	lds	r24, 0x0229
    21d0:	90 91 2a 02 	lds	r25, 0x022A
    21d4:	80 93 a6 08 	sts	0x08A6, r24
					ackPayload[2] = proximityValue[0]>>8;
    21d8:	80 91 29 02 	lds	r24, 0x0229
    21dc:	90 91 2a 02 	lds	r25, 0x022A
    21e0:	90 93 a7 08 	sts	0x08A7, r25
					ackPayload[3] = proximityValue[2]&0xFF;
    21e4:	80 91 2d 02 	lds	r24, 0x022D
    21e8:	90 91 2e 02 	lds	r25, 0x022E
    21ec:	80 93 a8 08 	sts	0x08A8, r24
					ackPayload[4] = proximityValue[2]>>8;
    21f0:	80 91 2d 02 	lds	r24, 0x022D
    21f4:	90 91 2e 02 	lds	r25, 0x022E
    21f8:	90 93 a9 08 	sts	0x08A9, r25
					ackPayload[5] = proximityValue[4]&0xFF;
    21fc:	80 91 31 02 	lds	r24, 0x0231
    2200:	90 91 32 02 	lds	r25, 0x0232
    2204:	80 93 aa 08 	sts	0x08AA, r24
					ackPayload[6] = proximityValue[4]>>8;
    2208:	80 91 31 02 	lds	r24, 0x0231
    220c:	90 91 32 02 	lds	r25, 0x0232
    2210:	90 93 ab 08 	sts	0x08AB, r25
					ackPayload[7] = proximityValue[6]&0xFF;
    2214:	80 91 35 02 	lds	r24, 0x0235
    2218:	90 91 36 02 	lds	r25, 0x0236
    221c:	80 93 ac 08 	sts	0x08AC, r24
					ackPayload[8] = proximityValue[6]>>8;
    2220:	80 91 35 02 	lds	r24, 0x0235
    2224:	90 91 36 02 	lds	r25, 0x0236
    2228:	90 93 ad 08 	sts	0x08AD, r25
					ackPayload[9] = proximityValue[10]&0xFF;
    222c:	80 91 3d 02 	lds	r24, 0x023D
    2230:	90 91 3e 02 	lds	r25, 0x023E
    2234:	80 93 ae 08 	sts	0x08AE, r24
					ackPayload[10] = proximityValue[10]>>8;
    2238:	80 91 3d 02 	lds	r24, 0x023D
    223c:	90 91 3e 02 	lds	r25, 0x023E
    2240:	90 93 af 08 	sts	0x08AF, r25
					ackPayload[11] = proximityValue[12]&0xFF;
    2244:	80 91 41 02 	lds	r24, 0x0241
    2248:	90 91 42 02 	lds	r25, 0x0242
    224c:	80 93 b0 08 	sts	0x08B0, r24
					ackPayload[12] = proximityValue[12]>>8;
    2250:	80 91 41 02 	lds	r24, 0x0241
    2254:	90 91 42 02 	lds	r25, 0x0242
    2258:	90 93 b1 08 	sts	0x08B1, r25
					ackPayload[13] = proximityValue[14]&0xFF;
    225c:	80 91 45 02 	lds	r24, 0x0245
    2260:	90 91 46 02 	lds	r25, 0x0246
    2264:	80 93 b2 08 	sts	0x08B2, r24
					ackPayload[14] = proximityValue[14]>>8;
    2268:	80 91 45 02 	lds	r24, 0x0245
    226c:	90 91 46 02 	lds	r25, 0x0246
    2270:	90 93 b3 08 	sts	0x08B3, r25
					ackPayload[15] = currentSelector;
    2274:	80 91 4c 04 	lds	r24, 0x044C
    2278:	80 93 b4 08 	sts	0x08B4, r24
					packetId = 6;
    227c:	86 e0       	ldi	r24, 0x06	; 6
    227e:	80 93 0b 02 	sts	0x020B, r24
					break;
    2282:	97 ce       	rjmp	.-722    	; 0x1fb2 <handleRFCommands+0x33e>
			// write back the ack payload
			ackPayload[0] = packetId&0xFF;

			switch(packetId) {
				case 3:
					ackPayload[1] = proximityResult[0]&0xFF;
    2284:	90 91 59 02 	lds	r25, 0x0259
    2288:	80 91 5a 02 	lds	r24, 0x025A
    228c:	90 93 a6 08 	sts	0x08A6, r25
					ackPayload[2] = proximityResult[0]>>8;
    2290:	80 93 a7 08 	sts	0x08A7, r24
					ackPayload[3] = proximityResult[1]&0xFF;
    2294:	90 91 5b 02 	lds	r25, 0x025B
    2298:	80 91 5c 02 	lds	r24, 0x025C
    229c:	90 93 a8 08 	sts	0x08A8, r25
					ackPayload[4] = proximityResult[1]>>8;
    22a0:	80 93 a9 08 	sts	0x08A9, r24
					ackPayload[5] = proximityResult[2]&0xFF;
    22a4:	90 91 5d 02 	lds	r25, 0x025D
    22a8:	80 91 5e 02 	lds	r24, 0x025E
    22ac:	90 93 aa 08 	sts	0x08AA, r25
					ackPayload[6] = proximityResult[2]>>8;
    22b0:	80 93 ab 08 	sts	0x08AB, r24
					ackPayload[7] = proximityResult[3]&0xFF;
    22b4:	90 91 5f 02 	lds	r25, 0x025F
    22b8:	80 91 60 02 	lds	r24, 0x0260
    22bc:	90 93 ac 08 	sts	0x08AC, r25
					ackPayload[8] = proximityResult[3]>>8;
    22c0:	80 93 ad 08 	sts	0x08AD, r24
					ackPayload[9] = proximityResult[5]&0xFF;
    22c4:	90 91 63 02 	lds	r25, 0x0263
    22c8:	80 91 64 02 	lds	r24, 0x0264
    22cc:	90 93 ae 08 	sts	0x08AE, r25
					ackPayload[10] = proximityResult[5]>>8;
    22d0:	80 93 af 08 	sts	0x08AF, r24
					ackPayload[11] = proximityResult[6]&0xFF;
    22d4:	90 91 65 02 	lds	r25, 0x0265
    22d8:	80 91 66 02 	lds	r24, 0x0266
    22dc:	90 93 b0 08 	sts	0x08B0, r25
					ackPayload[12] = proximityResult[6]>>8;
    22e0:	80 93 b1 08 	sts	0x08B1, r24
					ackPayload[13] = proximityResult[7]&0xFF;
    22e4:	90 91 67 02 	lds	r25, 0x0267
    22e8:	80 91 68 02 	lds	r24, 0x0268
    22ec:	90 93 b2 08 	sts	0x08B2, r25
					ackPayload[14] = proximityResult[7]>>8;
    22f0:	80 93 b3 08 	sts	0x08B3, r24
					#ifdef HW_REV_3_1
						ackPayload[15] = CHARGE_ON | (BUTTON0 << 1) | (CHARGE_STAT << 2);
    22f4:	30 91 03 01 	lds	r19, 0x0103
    22f8:	80 91 03 01 	lds	r24, 0x0103
    22fc:	20 91 03 01 	lds	r18, 0x0103
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	80 72       	andi	r24, 0x20	; 32
    2304:	90 70       	andi	r25, 0x00	; 0
    2306:	95 95       	asr	r25
    2308:	87 95       	ror	r24
    230a:	95 95       	asr	r25
    230c:	87 95       	ror	r24
    230e:	95 95       	asr	r25
    2310:	87 95       	ror	r24
    2312:	95 95       	asr	r25
    2314:	87 95       	ror	r24
    2316:	95 95       	asr	r25
    2318:	87 95       	ror	r24
    231a:	88 0f       	add	r24, r24
    231c:	99 1f       	adc	r25, r25
    231e:	22 1f       	adc	r18, r18
    2320:	22 27       	eor	r18, r18
    2322:	22 1f       	adc	r18, r18
    2324:	22 0f       	add	r18, r18
    2326:	22 0f       	add	r18, r18
    2328:	28 2b       	or	r18, r24
    232a:	83 2f       	mov	r24, r19
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	80 71       	andi	r24, 0x10	; 16
    2330:	90 70       	andi	r25, 0x00	; 0
    2332:	95 95       	asr	r25
    2334:	87 95       	ror	r24
    2336:	95 95       	asr	r25
    2338:	87 95       	ror	r24
    233a:	95 95       	asr	r25
    233c:	87 95       	ror	r24
    233e:	95 95       	asr	r25
    2340:	87 95       	ror	r24
    2342:	28 2b       	or	r18, r24
    2344:	20 93 b4 08 	sts	0x08B4, r18
					#else
						ackPayload[15] = CHARGE_ON | (BUTTON0 << 1);
					#endif
					packetId = 4;
    2348:	84 e0       	ldi	r24, 0x04	; 4
    234a:	80 93 0b 02 	sts	0x020B, r24
					break;
    234e:	31 ce       	rjmp	.-926    	; 0x1fb2 <handleRFCommands+0x33e>
					ackPayload[15] = currentSelector;
					packetId = 6;
					break;

				case 6:
					ackPayload[1] = proximityValue[8]&0xFF;
    2350:	80 91 39 02 	lds	r24, 0x0239
    2354:	90 91 3a 02 	lds	r25, 0x023A
    2358:	80 93 a6 08 	sts	0x08A6, r24
					ackPayload[2] = proximityValue[8]>>8;
    235c:	80 91 39 02 	lds	r24, 0x0239
    2360:	90 91 3a 02 	lds	r25, 0x023A
    2364:	90 93 a7 08 	sts	0x08A7, r25
					ackPayload[3] = proximityValue[16]&0xFF;
    2368:	80 91 49 02 	lds	r24, 0x0249
    236c:	90 91 4a 02 	lds	r25, 0x024A
    2370:	80 93 a8 08 	sts	0x08A8, r24
					ackPayload[4] = proximityValue[16]>>8;
    2374:	80 91 49 02 	lds	r24, 0x0249
    2378:	90 91 4a 02 	lds	r25, 0x024A
    237c:	90 93 a9 08 	sts	0x08A9, r25
					ackPayload[5] = proximityValue[18]&0xFF;
    2380:	80 91 4d 02 	lds	r24, 0x024D
    2384:	90 91 4e 02 	lds	r25, 0x024E
    2388:	80 93 aa 08 	sts	0x08AA, r24
					ackPayload[6] = proximityValue[18]>>8;
    238c:	80 91 4d 02 	lds	r24, 0x024D
    2390:	90 91 4e 02 	lds	r25, 0x024E
    2394:	90 93 ab 08 	sts	0x08AB, r25
					ackPayload[7] = proximityValue[20]&0xFF;
    2398:	80 91 51 02 	lds	r24, 0x0251
    239c:	90 91 52 02 	lds	r25, 0x0252
    23a0:	80 93 ac 08 	sts	0x08AC, r24
					ackPayload[8] = proximityValue[20]>>8;
    23a4:	80 91 51 02 	lds	r24, 0x0251
    23a8:	90 91 52 02 	lds	r25, 0x0252
    23ac:	90 93 ad 08 	sts	0x08AD, r25
					ackPayload[9] = proximityValue[22]&0xFF;
    23b0:	80 91 55 02 	lds	r24, 0x0255
    23b4:	90 91 56 02 	lds	r25, 0x0256
    23b8:	80 93 ae 08 	sts	0x08AE, r24
					ackPayload[10] = proximityValue[22]>>8;
    23bc:	80 91 55 02 	lds	r24, 0x0255
    23c0:	90 91 56 02 	lds	r25, 0x0256
    23c4:	90 93 af 08 	sts	0x08AF, r25
					ackPayload[11] = accZ&0xFF;
    23c8:	90 91 30 04 	lds	r25, 0x0430
    23cc:	80 91 31 04 	lds	r24, 0x0431
    23d0:	90 93 b0 08 	sts	0x08B0, r25
					ackPayload[12] = accZ>>8;	
    23d4:	80 93 b1 08 	sts	0x08B1, r24
					ackPayload[13] = batteryLevel&0xFF;
    23d8:	90 91 bd 02 	lds	r25, 0x02BD
    23dc:	80 91 be 02 	lds	r24, 0x02BE
    23e0:	90 93 b2 08 	sts	0x08B2, r25
					ackPayload[14] = batteryLevel>>8;
    23e4:	80 93 b3 08 	sts	0x08B3, r24
					ackPayload[15] = 0;
    23e8:	10 92 b4 08 	sts	0x08B4, r1
					packetId = 7;
    23ec:	87 e0       	ldi	r24, 0x07	; 7
    23ee:	80 93 0b 02 	sts	0x020B, r24
					break;
    23f2:	df cd       	rjmp	.-1090   	; 0x1fb2 <handleRFCommands+0x33e>

			//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
			// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
			// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    23f4:	25 2f       	mov	r18, r21
    23f6:	a0 cc       	rjmp	.-1728   	; 0x1d38 <handleRFCommands+0xc4>
    23f8:	80 91 71 09 	lds	r24, 0x0971
    23fc:	88 23       	and	r24, r24
    23fe:	09 f0       	breq	.+2      	; 0x2402 <__stack+0x203>
    2400:	b3 ce       	rjmp	.-666    	; 0x2168 <handleRFCommands+0x4f4>
    2402:	80 91 72 09 	lds	r24, 0x0972
    2406:	88 23       	and	r24, r24
    2408:	09 f4       	brne	.+2      	; 0x240c <__stack+0x20d>
    240a:	24 ce       	rjmp	.-952    	; 0x2054 <handleRFCommands+0x3e0>
    240c:	e0 e0       	ldi	r30, 0x00	; 0
    240e:	20 e0       	ldi	r18, 0x00	; 0
    2410:	93 cc       	rjmp	.-1754   	; 0x1d38 <handleRFCommands+0xc4>

00002412 <rfEnableDebugMode>:
	}

}

void rfEnableDebugMode() {
	rfDebugMode = 1;
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	80 93 19 03 	sts	0x0319, r24
	rfDebugCounter = 3;
    2418:	83 e0       	ldi	r24, 0x03	; 3
    241a:	80 93 1a 03 	sts	0x031A, r24
}
    241e:	08 95       	ret

00002420 <rfDisableDebugMode>:

void rfDisableDebugMode() {
	rfDebugMode = 0;
    2420:	10 92 19 03 	sts	0x0319, r1
}
    2424:	08 95       	ret

00002426 <rfDebugSendData>:

void rfDebugSendData() {
	ackPayload[0] = rfDebugCounter;
    2426:	80 91 1a 03 	lds	r24, 0x031A
    242a:	80 93 a5 08 	sts	0x08A5, r24
	while(rfData[0] != rfDebugCounter) {
    242e:	90 91 6d 09 	lds	r25, 0x096D
    2432:	89 17       	cp	r24, r25
    2434:	41 f0       	breq	.+16     	; 0x2446 <rfDebugSendData+0x20>
		handleRFCommands();
    2436:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <handleRFCommands>
	rfDebugMode = 0;
}

void rfDebugSendData() {
	ackPayload[0] = rfDebugCounter;
	while(rfData[0] != rfDebugCounter) {
    243a:	80 91 1a 03 	lds	r24, 0x031A
    243e:	90 91 6d 09 	lds	r25, 0x096D
    2442:	98 17       	cp	r25, r24
    2444:	c1 f7       	brne	.-16     	; 0x2436 <rfDebugSendData+0x10>
		handleRFCommands();
	}
	ackPayload[0] = 0x00;
    2446:	10 92 a5 08 	sts	0x08A5, r1
	if(rfDebugCounter < 255) {
    244a:	8f 3f       	cpi	r24, 0xFF	; 255
    244c:	21 f0       	breq	.+8      	; 0x2456 <rfDebugSendData+0x30>
		rfDebugCounter++;
    244e:	8f 5f       	subi	r24, 0xFF	; 255
    2450:	80 93 1a 03 	sts	0x031A, r24
    2454:	08 95       	ret
	} else {
		rfDebugCounter = 3;
    2456:	83 e0       	ldi	r24, 0x03	; 3
    2458:	80 93 1a 03 	sts	0x031A, r24
    245c:	08 95       	ret

0000245e <rfDebugNextPacket>:
	}
}

void rfDebugNextPacket() {
	rfDebugCounter = 3;
    245e:	83 e0       	ldi	r24, 0x03	; 3
    2460:	80 93 1a 03 	sts	0x031A, r24
}
    2464:	08 95       	ret

00002466 <init_ir_remote_control>:
static unsigned char check_temp = 0;
unsigned char address = 0;
unsigned char data_ir = 0;
unsigned char check = 2;

void init_ir_remote_control(void) { 	
    2466:	cf 93       	push	r28
    2468:	df 93       	push	r29

	PCICR = 0;
    246a:	c8 e6       	ldi	r28, 0x68	; 104
    246c:	d0 e0       	ldi	r29, 0x00	; 0
    246e:	18 82       	st	Y, r1
	PCMSK1 = 0;
    2470:	ac e6       	ldi	r26, 0x6C	; 108
    2472:	b0 e0       	ldi	r27, 0x00	; 0
    2474:	1c 92       	st	X, r1
	TCCR2A = 0;
    2476:	e0 eb       	ldi	r30, 0xB0	; 176
    2478:	f0 e0       	ldi	r31, 0x00	; 0
    247a:	10 82       	st	Z, r1
	TCCR2B = 0;
    247c:	10 92 b1 00 	sts	0x00B1, r1
	TIMSK2 = 0;
    2480:	10 92 70 00 	sts	0x0070, r1

	PCICR |= (1 << PCIE1);			// enable interrupt on change of PCINT15:8 pins
    2484:	88 81       	ld	r24, Y
    2486:	82 60       	ori	r24, 0x02	; 2
    2488:	88 83       	st	Y, r24
	PCMSK1 |= (1 << PCINT15);		// enable PCINT15
    248a:	8c 91       	ld	r24, X
    248c:	80 68       	ori	r24, 0x80	; 128
    248e:	8c 93       	st	X, r24
	TCCR2A |= (1 << WGM21); 		// mode 2 => CTC mode
    2490:	80 81       	ld	r24, Z
    2492:	82 60       	ori	r24, 0x02	; 2
    2494:	80 83       	st	Z, r24

}
    2496:	df 91       	pop	r29
    2498:	cf 91       	pop	r28
    249a:	08 95       	ret

0000249c <__vector_10>:

// external interrupt service routine
ISR(PCINT1_vect) {
    249c:	1f 92       	push	r1
    249e:	0f 92       	push	r0
    24a0:	0f b6       	in	r0, 0x3f	; 63
    24a2:	0f 92       	push	r0
    24a4:	11 24       	eor	r1, r1
    24a6:	8f 93       	push	r24

	if(irEnabled) {						// if the robot is configured to accept TV remote commands
    24a8:	80 91 12 02 	lds	r24, 0x0212
    24ac:	88 23       	and	r24, r24
    24ae:	21 f1       	breq	.+72     	; 0x24f8 <__vector_10+0x5c>

		if(bit_is_clear(PINJ, 6)) {		// the interrupt is generated at every pin state change; we only look
    24b0:	80 91 03 01 	lds	r24, 0x0103
    24b4:	86 fd       	sbrc	r24, 6
    24b6:	20 c0       	rjmp	.+64     	; 0x24f8 <__vector_10+0x5c>
										// for the falling edge
			PCICR &= ~(1 << PCIE1);		// disable external interrupt
    24b8:	80 91 68 00 	lds	r24, 0x0068
    24bc:	8d 7f       	andi	r24, 0xFD	; 253
    24be:	80 93 68 00 	sts	0x0068, r24
			PCMSK1 &= ~(1 << PCINT15);
    24c2:	80 91 6c 00 	lds	r24, 0x006C
    24c6:	8f 77       	andi	r24, 0x7F	; 127
    24c8:	80 93 6c 00 	sts	0x006C, r24
		
			// check the pin change isn't due to a glitch; to check this verify that
			// the pin remain low for at least 400 us (the giltches last about 200 us)
			// 0.4 / 0.032 = 13 => 0.416 us
			checkGlitch = 1;							// we're checking if this is a glitch
    24cc:	81 e0       	ldi	r24, 0x01	; 1
    24ce:	80 93 13 02 	sts	0x0213, r24
			OCR2A = 13;									// output compare register
    24d2:	8d e0       	ldi	r24, 0x0D	; 13
    24d4:	80 93 b3 00 	sts	0x00B3, r24
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    24d8:	80 91 b1 00 	lds	r24, 0x00B1
    24dc:	86 60       	ori	r24, 0x06	; 6
    24de:	80 93 b1 00 	sts	0x00B1, r24
			TIMSK2 |= (1 << OCIE2A);					// enable output compare interrupt
    24e2:	80 91 70 00 	lds	r24, 0x0070
    24e6:	82 60       	ori	r24, 0x02	; 2
    24e8:	80 93 70 00 	sts	0x0070, r24

			check_temp = address_temp = data_temp = 0;
    24ec:	10 92 20 02 	sts	0x0220, r1
    24f0:	10 92 21 02 	sts	0x0221, r1
    24f4:	10 92 22 02 	sts	0x0222, r1

		}

	}
	
}
    24f8:	8f 91       	pop	r24
    24fa:	0f 90       	pop	r0
    24fc:	0f be       	out	0x3f, r0	; 63
    24fe:	0f 90       	pop	r0
    2500:	1f 90       	pop	r1
    2502:	18 95       	reti

00002504 <__vector_13>:

ISR(TIMER2_COMPA_vect) {
    2504:	1f 92       	push	r1
    2506:	0f 92       	push	r0
    2508:	0f b6       	in	r0, 0x3f	; 63
    250a:	0f 92       	push	r0
    250c:	11 24       	eor	r1, r1
    250e:	2f 93       	push	r18
    2510:	3f 93       	push	r19
    2512:	4f 93       	push	r20
    2514:	5f 93       	push	r21
    2516:	8f 93       	push	r24
    2518:	9f 93       	push	r25

	static int i = -1;

	//PORTB ^= (1 << 5);	// toggle red led

	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);		// stop timer2
    251a:	80 91 b1 00 	lds	r24, 0x00B1
    251e:	88 7f       	andi	r24, 0xF8	; 248
    2520:	80 93 b1 00 	sts	0x00B1, r24
	
		if(checkGlitch) {					// if checking this is a glitch
    2524:	80 91 13 02 	lds	r24, 0x0213
    2528:	88 23       	and	r24, r24
    252a:	a9 f0       	breq	.+42     	; 0x2556 <__vector_13+0x52>

			if(REMOTE) {					// if high it is a glitch
    252c:	80 91 03 01 	lds	r24, 0x0103
    2530:	86 ff       	sbrs	r24, 6
    2532:	65 c0       	rjmp	.+202    	; 0x25fe <__vector_13+0xfa>

				PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    2534:	80 91 68 00 	lds	r24, 0x0068
    2538:	82 60       	ori	r24, 0x02	; 2
    253a:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    253e:	80 91 6c 00 	lds	r24, 0x006C
    2542:	80 68       	ori	r24, 0x80	; 128
    2544:	80 93 6c 00 	sts	0x006C, r24
				i = -1;			
    2548:	8f ef       	ldi	r24, 0xFF	; 255
    254a:	9f ef       	ldi	r25, 0xFF	; 255
    254c:	90 93 02 02 	sts	0x0202, r25
    2550:	80 93 01 02 	sts	0x0201, r24
    2554:	49 c0       	rjmp	.+146    	; 0x25e8 <__vector_13+0xe4>
			}

		} else {


			if (i == -1) { 						// start bit confirmed
    2556:	80 91 01 02 	lds	r24, 0x0201
    255a:	90 91 02 02 	lds	r25, 0x0202
    255e:	2f ef       	ldi	r18, 0xFF	; 255
    2560:	8f 3f       	cpi	r24, 0xFF	; 255
    2562:	92 07       	cpc	r25, r18
    2564:	09 f4       	brne	.+2      	; 0x2568 <__vector_13+0x64>
    2566:	63 c0       	rjmp	.+198    	; 0x262e <__vector_13+0x12a>
					check_temp = address_temp = data_temp = 0;
					i=0;

				}

			} else if (i == 1)	{ 						// check bit read and change timer period
    2568:	81 30       	cpi	r24, 0x01	; 1
    256a:	91 05       	cpc	r25, r1
    256c:	09 f4       	brne	.+2      	; 0x2570 <__vector_13+0x6c>
    256e:	98 c0       	rjmp	.+304    	; 0x26a0 <__vector_13+0x19c>
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
    2570:	9c 01       	movw	r18, r24
    2572:	22 50       	subi	r18, 0x02	; 2
    2574:	30 40       	sbci	r19, 0x00	; 0
    2576:	25 30       	cpi	r18, 0x05	; 5
    2578:	31 05       	cpc	r19, r1
    257a:	08 f4       	brcc	.+2      	; 0x257e <__vector_13+0x7a>
    257c:	67 c0       	rjmp	.+206    	; 0x264c <__vector_13+0x148>

				unsigned char temp = REMOTE;
				temp <<= 6-i;
				address_temp += temp;

			} else if ((i > 6) && (i < 13 )) { 			// we read data
    257e:	9c 01       	movw	r18, r24
    2580:	27 50       	subi	r18, 0x07	; 7
    2582:	30 40       	sbci	r19, 0x00	; 0
    2584:	26 30       	cpi	r18, 0x06	; 6
    2586:	31 05       	cpc	r19, r1
    2588:	08 f0       	brcs	.+2      	; 0x258c <__vector_13+0x88>
    258a:	bd c0       	rjmp	.+378    	; 0x2706 <__vector_13+0x202>

				OCR2A = 54;
    258c:	26 e3       	ldi	r18, 0x36	; 54
    258e:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    2592:	20 91 b1 00 	lds	r18, 0x00B1
    2596:	26 60       	ori	r18, 0x06	; 6
    2598:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    259c:	20 91 70 00 	lds	r18, 0x0070
    25a0:	22 60       	ori	r18, 0x02	; 2
    25a2:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    25a6:	20 91 03 01 	lds	r18, 0x0103
    25aa:	30 e0       	ldi	r19, 0x00	; 0
    25ac:	20 74       	andi	r18, 0x40	; 64
    25ae:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6+6-i;
    25b0:	00 24       	eor	r0, r0
    25b2:	22 0f       	add	r18, r18
    25b4:	33 1f       	adc	r19, r19
    25b6:	00 1c       	adc	r0, r0
    25b8:	22 0f       	add	r18, r18
    25ba:	33 1f       	adc	r19, r19
    25bc:	00 1c       	adc	r0, r0
    25be:	23 2f       	mov	r18, r19
    25c0:	30 2d       	mov	r19, r0
    25c2:	4c e0       	ldi	r20, 0x0C	; 12
    25c4:	50 e0       	ldi	r21, 0x00	; 0
    25c6:	48 1b       	sub	r20, r24
    25c8:	59 0b       	sbc	r21, r25
    25ca:	02 c0       	rjmp	.+4      	; 0x25d0 <__vector_13+0xcc>
    25cc:	22 0f       	add	r18, r18
    25ce:	33 1f       	adc	r19, r19
    25d0:	4a 95       	dec	r20
    25d2:	e2 f7       	brpl	.-8      	; 0x25cc <__vector_13+0xc8>
				data_temp += temp;
    25d4:	40 91 20 02 	lds	r20, 0x0220
    25d8:	42 0f       	add	r20, r18
    25da:	40 93 20 02 	sts	0x0220, r20

				i = -1;
				check = check_temp;
				address = address_temp;
				data_ir = data_temp;
				command_received=1;
    25de:	01 96       	adiw	r24, 0x01	; 1

		}
	
		if(i!=-1) {

			i++;
    25e0:	90 93 02 02 	sts	0x0202, r25
    25e4:	80 93 01 02 	sts	0x0201, r24

		}

}
    25e8:	9f 91       	pop	r25
    25ea:	8f 91       	pop	r24
    25ec:	5f 91       	pop	r21
    25ee:	4f 91       	pop	r20
    25f0:	3f 91       	pop	r19
    25f2:	2f 91       	pop	r18
    25f4:	0f 90       	pop	r0
    25f6:	0f be       	out	0x3f, r0	; 63
    25f8:	0f 90       	pop	r0
    25fa:	1f 90       	pop	r1
    25fc:	18 95       	reti
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
				i = -1;			

			} else {						// not a glitch => real command received

				checkGlitch = 0;
    25fe:	10 92 13 02 	sts	0x0213, r1

				// activate the IR Receiver with a 2.1 ms cycle value
				// we set the resolution of the timer to be 0.032 ms (prescaler 1/256) so:
				// 2.1 / 0.032 = 64 to be set in the output compare register (=> 2.048 ms)
				// but we already wait 0.416 us => 13, so 64-13=51
				OCR2A = 51;								// output compare register
    2602:	83 e3       	ldi	r24, 0x33	; 51
    2604:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    2608:	80 91 b1 00 	lds	r24, 0x00B1
    260c:	86 60       	ori	r24, 0x06	; 6
    260e:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    2612:	80 91 70 00 	lds	r24, 0x0070
    2616:	82 60       	ori	r24, 0x02	; 2
    2618:	80 93 70 00 	sts	0x0070, r24
    261c:	80 91 01 02 	lds	r24, 0x0201
    2620:	90 91 02 02 	lds	r25, 0x0202

			} 

		}
	
		if(i!=-1) {
    2624:	2f ef       	ldi	r18, 0xFF	; 255
    2626:	8f 3f       	cpi	r24, 0xFF	; 255
    2628:	92 07       	cpc	r25, r18
    262a:	c9 f6       	brne	.-78     	; 0x25de <__vector_13+0xda>
    262c:	dd cf       	rjmp	.-70     	; 0x25e8 <__vector_13+0xe4>
		} else {


			if (i == -1) { 						// start bit confirmed

				if(REMOTE) {					// double check => if high it is only a noise
    262e:	20 91 03 01 	lds	r18, 0x0103
    2632:	26 ff       	sbrs	r18, 6
    2634:	52 c0       	rjmp	.+164    	; 0x26da <__vector_13+0x1d6>

					PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    2636:	20 91 68 00 	lds	r18, 0x0068
    263a:	22 60       	ori	r18, 0x02	; 2
    263c:	20 93 68 00 	sts	0x0068, r18
					PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    2640:	20 91 6c 00 	lds	r18, 0x006C
    2644:	20 68       	ori	r18, 0x80	; 128
    2646:	20 93 6c 00 	sts	0x006C, r18
    264a:	ce cf       	rjmp	.-100    	; 0x25e8 <__vector_13+0xe4>
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
		
				OCR2A = 54;
    264c:	26 e3       	ldi	r18, 0x36	; 54
    264e:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    2652:	20 91 b1 00 	lds	r18, 0x00B1
    2656:	26 60       	ori	r18, 0x06	; 6
    2658:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    265c:	20 91 70 00 	lds	r18, 0x0070
    2660:	22 60       	ori	r18, 0x02	; 2
    2662:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    2666:	20 91 03 01 	lds	r18, 0x0103
    266a:	30 e0       	ldi	r19, 0x00	; 0
    266c:	20 74       	andi	r18, 0x40	; 64
    266e:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6-i;
    2670:	00 24       	eor	r0, r0
    2672:	22 0f       	add	r18, r18
    2674:	33 1f       	adc	r19, r19
    2676:	00 1c       	adc	r0, r0
    2678:	22 0f       	add	r18, r18
    267a:	33 1f       	adc	r19, r19
    267c:	00 1c       	adc	r0, r0
    267e:	23 2f       	mov	r18, r19
    2680:	30 2d       	mov	r19, r0
    2682:	46 e0       	ldi	r20, 0x06	; 6
    2684:	50 e0       	ldi	r21, 0x00	; 0
    2686:	48 1b       	sub	r20, r24
    2688:	59 0b       	sbc	r21, r25
    268a:	02 c0       	rjmp	.+4      	; 0x2690 <__vector_13+0x18c>
    268c:	22 0f       	add	r18, r18
    268e:	33 1f       	adc	r19, r19
    2690:	4a 95       	dec	r20
    2692:	e2 f7       	brpl	.-8      	; 0x268c <__vector_13+0x188>
				address_temp += temp;
    2694:	40 91 21 02 	lds	r20, 0x0221
    2698:	42 0f       	add	r20, r18
    269a:	40 93 21 02 	sts	0x0221, r20
    269e:	9f cf       	rjmp	.-194    	; 0x25de <__vector_13+0xda>

				}

			} else if (i == 1)	{ 						// check bit read and change timer period

				check_temp = REMOTE;	   				// read the check bit
    26a0:	20 91 03 01 	lds	r18, 0x0103
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	20 74       	andi	r18, 0x40	; 64
    26a8:	30 70       	andi	r19, 0x00	; 0
    26aa:	02 2e       	mov	r0, r18
    26ac:	23 2f       	mov	r18, r19
    26ae:	00 0c       	add	r0, r0
    26b0:	22 1f       	adc	r18, r18
    26b2:	33 0b       	sbc	r19, r19
    26b4:	00 0c       	add	r0, r0
    26b6:	22 1f       	adc	r18, r18
    26b8:	33 1f       	adc	r19, r19
    26ba:	20 93 22 02 	sts	0x0222, r18
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
    26be:	26 e3       	ldi	r18, 0x36	; 54
    26c0:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    26c4:	20 91 b1 00 	lds	r18, 0x00B1
    26c8:	26 60       	ori	r18, 0x06	; 6
    26ca:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    26ce:	20 91 70 00 	lds	r18, 0x0070
    26d2:	22 60       	ori	r18, 0x02	; 2
    26d4:	20 93 70 00 	sts	0x0070, r18
    26d8:	82 cf       	rjmp	.-252    	; 0x25de <__vector_13+0xda>

				} else {	// read the check bit
			
					//cycle value is 0.9 ms to go to check bit so:
					// 0.9 / 0.032 = 28 => 0.896
					OCR2A = 28;								// output compare register
    26da:	8c e1       	ldi	r24, 0x1C	; 28
    26dc:	80 93 b3 00 	sts	0x00B3, r24
					TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    26e0:	80 91 b1 00 	lds	r24, 0x00B1
    26e4:	86 60       	ori	r24, 0x06	; 6
    26e6:	80 93 b1 00 	sts	0x00B1, r24
					TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt					
    26ea:	80 91 70 00 	lds	r24, 0x0070
    26ee:	82 60       	ori	r24, 0x02	; 2
    26f0:	80 93 70 00 	sts	0x0070, r24

					check_temp = address_temp = data_temp = 0;
    26f4:	10 92 20 02 	sts	0x0220, r1
    26f8:	10 92 21 02 	sts	0x0221, r1
    26fc:	10 92 22 02 	sts	0x0222, r1
    2700:	81 e0       	ldi	r24, 0x01	; 1
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	6d cf       	rjmp	.-294    	; 0x25e0 <__vector_13+0xdc>

				unsigned char temp = REMOTE;
				temp <<= 6+6-i;
				data_temp += temp;

			} else if (i == 13) { 						// last bit read
    2706:	8d 30       	cpi	r24, 0x0D	; 13
    2708:	91 05       	cpc	r25, r1
    270a:	09 f0       	breq	.+2      	; 0x270e <__vector_13+0x20a>
    270c:	68 cf       	rjmp	.-304    	; 0x25de <__vector_13+0xda>
				
				TIMSK2 = 0;								// disable all interrupt for timer2
    270e:	10 92 70 00 	sts	0x0070, r1
				PCICR |= (1 << PCIE1);					// enable external interrupt to receive next command
    2712:	80 91 68 00 	lds	r24, 0x0068
    2716:	82 60       	ori	r24, 0x02	; 2
    2718:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);				// clear interrupt flag
    271c:	80 91 6c 00 	lds	r24, 0x006C
    2720:	80 68       	ori	r24, 0x80	; 128
    2722:	80 93 6c 00 	sts	0x006C, r24

				i = -1;
    2726:	8f ef       	ldi	r24, 0xFF	; 255
    2728:	9f ef       	ldi	r25, 0xFF	; 255
    272a:	90 93 02 02 	sts	0x0202, r25
    272e:	80 93 01 02 	sts	0x0201, r24
				check = check_temp;
    2732:	80 91 22 02 	lds	r24, 0x0222
    2736:	80 93 00 02 	sts	0x0200, r24
				address = address_temp;
    273a:	80 91 21 02 	lds	r24, 0x0221
    273e:	80 93 1e 02 	sts	0x021E, r24
				data_ir = data_temp;
    2742:	80 91 20 02 	lds	r24, 0x0220
    2746:	80 93 1f 02 	sts	0x021F, r24
				command_received=1;
    274a:	81 e0       	ldi	r24, 0x01	; 1
    274c:	80 93 28 04 	sts	0x0428, r24
    2750:	4b cf       	rjmp	.-362    	; 0x25e8 <__vector_13+0xe4>

00002752 <ir_remote_get_check>:

}

unsigned char ir_remote_get_check(void) {
	return check;
}
    2752:	80 91 00 02 	lds	r24, 0x0200
    2756:	08 95       	ret

00002758 <ir_remote_get_address>:

unsigned char ir_remote_get_address(void) {
	return address;
}
    2758:	80 91 1e 02 	lds	r24, 0x021E
    275c:	08 95       	ret

0000275e <ir_remote_get_data>:

unsigned char ir_remote_get_data(void) {
	return data_ir;
}
    275e:	80 91 1f 02 	lds	r24, 0x021F
    2762:	08 95       	ret

00002764 <handleIRRemoteCommands>:

void handleIRRemoteCommands() {

	if(irEnabled) {
    2764:	80 91 12 02 	lds	r24, 0x0212
    2768:	88 23       	and	r24, r24
    276a:	51 f1       	breq	.+84     	; 0x27c0 <handleIRRemoteCommands+0x5c>

		if(command_received) {
    276c:	80 91 28 04 	lds	r24, 0x0428
    2770:	88 23       	and	r24, r24
    2772:	31 f1       	breq	.+76     	; 0x27c0 <handleIRRemoteCommands+0x5c>
unsigned char ir_remote_get_address(void) {
	return address;
}

unsigned char ir_remote_get_data(void) {
	return data_ir;
    2774:	e0 91 1f 02 	lds	r30, 0x021F

	if(irEnabled) {

		if(command_received) {

            irCommand = ir_remote_get_data();
    2778:	e0 93 27 04 	sts	0x0427, r30

		    //usartTransmit(irCommand);

			command_received = 0;
    277c:	10 92 28 04 	sts	0x0428, r1

			switch(irCommand) {
    2780:	f0 e0       	ldi	r31, 0x00	; 0
    2782:	e5 33       	cpi	r30, 0x35	; 53
    2784:	f1 05       	cpc	r31, r1
    2786:	e8 f0       	brcs	.+58     	; 0x27c2 <handleIRRemoteCommands+0x5e>
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 1;
							break;
						case 3:
							obstacleAvoidanceEnabled = 1;
							cliffAvoidanceEnabled = 1;
    2788:	20 91 f9 02 	lds	r18, 0x02F9
    278c:	30 91 fa 02 	lds	r19, 0x02FA
    2790:	80 91 fb 02 	lds	r24, 0x02FB
    2794:	90 91 fc 02 	lds	r25, 0x02FC
	               	break;

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
    2798:	37 fd       	sbrc	r19, 7
    279a:	b9 c1       	rjmp	.+882    	; 0x2b0e <handleIRRemoteCommands+0x3aa>
				speedr = pwm_right_desired;
			} else {
				speedr = (-pwm_right_desired);
    279c:	30 93 14 03 	sts	0x0314, r19
    27a0:	20 93 13 03 	sts	0x0313, r18
			}
			if(pwm_left_desired >= 0) {
    27a4:	97 fd       	sbrc	r25, 7
    27a6:	05 c0       	rjmp	.+10     	; 0x27b2 <handleIRRemoteCommands+0x4e>
				speedl = pwm_left_desired;
    27a8:	90 93 12 03 	sts	0x0312, r25
    27ac:	80 93 11 03 	sts	0x0311, r24
    27b0:	08 95       	ret
			} else {
				speedl = (-pwm_left_desired);
    27b2:	90 95       	com	r25
    27b4:	81 95       	neg	r24
    27b6:	9f 4f       	sbci	r25, 0xFF	; 255
    27b8:	90 93 12 03 	sts	0x0312, r25
    27bc:	80 93 11 03 	sts	0x0311, r24
    27c0:	08 95       	ret

		    //usartTransmit(irCommand);

			command_received = 0;

			switch(irCommand) {
    27c2:	ee 58       	subi	r30, 0x8E	; 142
    27c4:	ff 4f       	sbci	r31, 0xFF	; 255
    27c6:	ee 0f       	add	r30, r30
    27c8:	ff 1f       	adc	r31, r31
    27ca:	05 90       	lpm	r0, Z+
    27cc:	f4 91       	lpm	r31, Z+
    27ce:	e0 2d       	mov	r30, r0
    27d0:	19 94       	eijmp
						case 0:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 0;
							break;
						case 1:
							obstacleAvoidanceEnabled = 1;
    27d2:	80 93 6c 04 	sts	0x046C, r24
							cliffAvoidanceEnabled = 0;
    27d6:	10 92 6d 04 	sts	0x046D, r1
    27da:	20 91 f9 02 	lds	r18, 0x02F9
    27de:	30 91 fa 02 	lds	r19, 0x02FA
    27e2:	80 91 fb 02 	lds	r24, 0x02FB
    27e6:	90 91 fc 02 	lds	r25, 0x02FC
							break;
    27ea:	d6 cf       	rjmp	.-84     	; 0x2798 <handleIRRemoteCommands+0x34>
						case 2:
							obstacleAvoidanceEnabled = 0;
    27ec:	10 92 6c 04 	sts	0x046C, r1
							cliffAvoidanceEnabled = 1;
    27f0:	81 e0       	ldi	r24, 0x01	; 1
    27f2:	80 93 6d 04 	sts	0x046D, r24
    27f6:	20 91 f9 02 	lds	r18, 0x02F9
    27fa:	30 91 fa 02 	lds	r19, 0x02FA
    27fe:	80 91 fb 02 	lds	r24, 0x02FB
    2802:	90 91 fc 02 	lds	r25, 0x02FC
							break;
    2806:	c8 cf       	rjmp	.-112    	; 0x2798 <handleIRRemoteCommands+0x34>
				case 33:	// program -
					cliffAvoidanceEnabled = 0;
					break;

				case 52:	// av/tv button
					behaviorState = (behaviorState+1)%4;
    2808:	80 91 2a 04 	lds	r24, 0x042A
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	01 96       	adiw	r24, 0x01	; 1
    2810:	83 70       	andi	r24, 0x03	; 3
    2812:	90 70       	andi	r25, 0x00	; 0
    2814:	80 93 2a 04 	sts	0x042A, r24
					switch(behaviorState) {
    2818:	82 30       	cpi	r24, 0x02	; 2
    281a:	41 f3       	breq	.-48     	; 0x27ec <handleIRRemoteCommands+0x88>
    281c:	83 30       	cpi	r24, 0x03	; 3
    281e:	09 f4       	brne	.+2      	; 0x2822 <handleIRRemoteCommands+0xbe>
    2820:	8a c1       	rjmp	.+788    	; 0x2b36 <handleIRRemoteCommands+0x3d2>
    2822:	81 30       	cpi	r24, 0x01	; 1
    2824:	b1 f2       	breq	.-84     	; 0x27d2 <handleIRRemoteCommands+0x6e>
						case 0:
							obstacleAvoidanceEnabled = 0;
    2826:	10 92 6c 04 	sts	0x046C, r1
							cliffAvoidanceEnabled = 0;
    282a:	10 92 6d 04 	sts	0x046D, r1
    282e:	20 91 f9 02 	lds	r18, 0x02F9
    2832:	30 91 fa 02 	lds	r19, 0x02FA
    2836:	80 91 fb 02 	lds	r24, 0x02FB
    283a:	90 91 fc 02 	lds	r25, 0x02FC
							break;
    283e:	ac cf       	rjmp	.-168    	; 0x2798 <handleIRRemoteCommands+0x34>
				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
					break;

				case 17:	// volume -
					obstacleAvoidanceEnabled = 0;
    2840:	10 92 6c 04 	sts	0x046C, r1
    2844:	20 91 f9 02 	lds	r18, 0x02F9
    2848:	30 91 fa 02 	lds	r19, 0x02FA
    284c:	80 91 fb 02 	lds	r24, 0x02FB
    2850:	90 91 fc 02 	lds	r25, 0x02FC
					break;
    2854:	a1 cf       	rjmp	.-190    	; 0x2798 <handleIRRemoteCommands+0x34>
					pwm_right_desired += STEP_MOTORS;
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
					break;

				case 9:	// left motor backward
					pwm_left_desired -= STEP_MOTORS;
    2856:	80 91 fb 02 	lds	r24, 0x02FB
    285a:	90 91 fc 02 	lds	r25, 0x02FC
    285e:	02 97       	sbiw	r24, 0x02	; 2
    2860:	90 93 fc 02 	sts	0x02FC, r25
    2864:	80 93 fb 02 	sts	0x02FB, r24
	           	    if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    2868:	2e ef       	ldi	r18, 0xFE	; 254
    286a:	80 30       	cpi	r24, 0x00	; 0
    286c:	92 07       	cpc	r25, r18
    286e:	9c f5       	brge	.+102    	; 0x28d6 <handleIRRemoteCommands+0x172>
    2870:	80 e0       	ldi	r24, 0x00	; 0
    2872:	9e ef       	ldi	r25, 0xFE	; 254
    2874:	90 93 fc 02 	sts	0x02FC, r25
    2878:	80 93 fb 02 	sts	0x02FB, r24
    287c:	20 91 f9 02 	lds	r18, 0x02F9
    2880:	30 91 fa 02 	lds	r19, 0x02FA
    2884:	89 cf       	rjmp	.-238    	; 0x2798 <handleIRRemoteCommands+0x34>
    	            if (pwm_left_desired > (MAX_MOTORS_PWM/2)) pwm_left_desired = (MAX_MOTORS_PWM/2);
               		break;

				case 8:	// both motors backward
				case 30:
					if(pwm_right_desired < pwm_left) {
    2886:	20 91 f9 02 	lds	r18, 0x02F9
    288a:	30 91 fa 02 	lds	r19, 0x02FA
    288e:	80 91 f7 02 	lds	r24, 0x02F7
    2892:	90 91 f8 02 	lds	r25, 0x02F8
    2896:	28 17       	cp	r18, r24
    2898:	39 07       	cpc	r19, r25
    289a:	24 f0       	brlt	.+8      	; 0x28a4 <handleIRRemoteCommands+0x140>
						pwm_left_desired  = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
    289c:	20 91 fb 02 	lds	r18, 0x02FB
    28a0:	30 91 fc 02 	lds	r19, 0x02FC
					}
					pwm_right_desired -= STEP_MOTORS;
    28a4:	22 50       	subi	r18, 0x02	; 2
    28a6:	30 40       	sbci	r19, 0x00	; 0
    28a8:	30 93 fa 02 	sts	0x02FA, r19
    28ac:	20 93 f9 02 	sts	0x02F9, r18
					pwm_left_desired -= STEP_MOTORS;
    28b0:	c9 01       	movw	r24, r18
    28b2:	30 93 fc 02 	sts	0x02FC, r19
    28b6:	20 93 fb 02 	sts	0x02FB, r18
	                if (pwm_right_desired < -(MAX_MOTORS_PWM/2)) pwm_right_desired = -(MAX_MOTORS_PWM/2);
    28ba:	4e ef       	ldi	r20, 0xFE	; 254
    28bc:	20 30       	cpi	r18, 0x00	; 0
    28be:	34 07       	cpc	r19, r20
    28c0:	34 f4       	brge	.+12     	; 0x28ce <handleIRRemoteCommands+0x16a>
    28c2:	40 e0       	ldi	r20, 0x00	; 0
    28c4:	5e ef       	ldi	r21, 0xFE	; 254
    28c6:	50 93 fa 02 	sts	0x02FA, r21
    28ca:	40 93 f9 02 	sts	0x02F9, r20
    	            if (pwm_left_desired < -(MAX_MOTORS_PWM/2)) pwm_left_desired = -(MAX_MOTORS_PWM/2);
    28ce:	4e ef       	ldi	r20, 0xFE	; 254
    28d0:	20 30       	cpi	r18, 0x00	; 0
    28d2:	34 07       	cpc	r19, r20
    28d4:	6c f2       	brlt	.-102    	; 0x2870 <handleIRRemoteCommands+0x10c>
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    28d6:	20 91 f9 02 	lds	r18, 0x02F9
    28da:	30 91 fa 02 	lds	r19, 0x02FA
    28de:	5c cf       	rjmp	.-328    	; 0x2798 <handleIRRemoteCommands+0x34>
					updateBlueLed(pwm_blue);

	               	break;

				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
    28e0:	81 e0       	ldi	r24, 0x01	; 1
    28e2:	80 93 6c 04 	sts	0x046C, r24
    28e6:	20 91 f9 02 	lds	r18, 0x02F9
    28ea:	30 91 fa 02 	lds	r19, 0x02FA
    28ee:	80 91 fb 02 	lds	r24, 0x02FB
    28f2:	90 91 fc 02 	lds	r25, 0x02FC
					break;
    28f6:	50 cf       	rjmp	.-352    	; 0x2798 <handleIRRemoteCommands+0x34>
					pwm_left_desired -= STEP_MOTORS;
	           	    if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 7:	// right motor backward
					pwm_right_desired -= STEP_MOTORS;
    28f8:	20 91 f9 02 	lds	r18, 0x02F9
    28fc:	30 91 fa 02 	lds	r19, 0x02FA
    2900:	22 50       	subi	r18, 0x02	; 2
    2902:	30 40       	sbci	r19, 0x00	; 0
    2904:	30 93 fa 02 	sts	0x02FA, r19
    2908:	20 93 f9 02 	sts	0x02F9, r18
	               	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    290c:	4e ef       	ldi	r20, 0xFE	; 254
    290e:	20 30       	cpi	r18, 0x00	; 0
    2910:	34 07       	cpc	r19, r20
    2912:	0c f0       	brlt	.+2      	; 0x2916 <handleIRRemoteCommands+0x1b2>
    2914:	3d cf       	rjmp	.-390    	; 0x2790 <handleIRRemoteCommands+0x2c>
    2916:	80 e0       	ldi	r24, 0x00	; 0
    2918:	9e ef       	ldi	r25, 0xFE	; 254
    291a:	90 93 fa 02 	sts	0x02FA, r25
    291e:	80 93 f9 02 	sts	0x02F9, r24
    2922:	80 91 fb 02 	lds	r24, 0x02FB
    2926:	90 91 fc 02 	lds	r25, 0x02FC
    292a:	20 e0       	ldi	r18, 0x00	; 0
    292c:	32 e0       	ldi	r19, 0x02	; 2
    292e:	36 cf       	rjmp	.-404    	; 0x279c <handleIRRemoteCommands+0x38>
    	            if (pwm_left_desired < -(MAX_MOTORS_PWM/2)) pwm_left_desired = -(MAX_MOTORS_PWM/2);
                  	break;

				case 6:	// both motors right
				case 47:
					pwm_right_desired -= STEP_MOTORS;
    2930:	20 91 f9 02 	lds	r18, 0x02F9
    2934:	30 91 fa 02 	lds	r19, 0x02FA
    2938:	22 50       	subi	r18, 0x02	; 2
    293a:	30 40       	sbci	r19, 0x00	; 0
    293c:	30 93 fa 02 	sts	0x02FA, r19
    2940:	20 93 f9 02 	sts	0x02F9, r18
					pwm_left_desired += STEP_MOTORS;
    2944:	80 91 fb 02 	lds	r24, 0x02FB
    2948:	90 91 fc 02 	lds	r25, 0x02FC
    294c:	02 96       	adiw	r24, 0x02	; 2
    294e:	90 93 fc 02 	sts	0x02FC, r25
    2952:	80 93 fb 02 	sts	0x02FB, r24
                	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    2956:	4e ef       	ldi	r20, 0xFE	; 254
    2958:	20 30       	cpi	r18, 0x00	; 0
    295a:	34 07       	cpc	r19, r20
    295c:	34 f4       	brge	.+12     	; 0x296a <handleIRRemoteCommands+0x206>
    295e:	20 e0       	ldi	r18, 0x00	; 0
    2960:	3e ef       	ldi	r19, 0xFE	; 254
    2962:	30 93 fa 02 	sts	0x02FA, r19
    2966:	20 93 f9 02 	sts	0x02F9, r18
                	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    296a:	42 e0       	ldi	r20, 0x02	; 2
    296c:	81 30       	cpi	r24, 0x01	; 1
    296e:	94 07       	cpc	r25, r20
    2970:	0c f4       	brge	.+2      	; 0x2974 <handleIRRemoteCommands+0x210>
    2972:	12 cf       	rjmp	.-476    	; 0x2798 <handleIRRemoteCommands+0x34>
    2974:	80 e0       	ldi	r24, 0x00	; 0
    2976:	92 e0       	ldi	r25, 0x02	; 2
    2978:	90 93 fc 02 	sts	0x02FC, r25
    297c:	80 93 fb 02 	sts	0x02FB, r24
    2980:	0b cf       	rjmp	.-490    	; 0x2798 <handleIRRemoteCommands+0x34>
			switch(irCommand) {
				// sometimes there are two cases for the same command because two different
				// remote controls are used; one of this do not contain "numbers"
				case 5:	// stop motors
				case 51:
					pwm_right_desired = 0;
    2982:	10 92 fa 02 	sts	0x02FA, r1
    2986:	10 92 f9 02 	sts	0x02F9, r1
					pwm_left_desired = 0;
    298a:	10 92 fc 02 	sts	0x02FC, r1
    298e:	10 92 fb 02 	sts	0x02FB, r1
					if(currentSelector == 8) {
    2992:	80 91 4c 04 	lds	r24, 0x044C
    2996:	88 30       	cpi	r24, 0x08	; 8
    2998:	09 f4       	brne	.+2      	; 0x299c <handleIRRemoteCommands+0x238>
    299a:	db c0       	rjmp	.+438    	; 0x2b52 <handleIRRemoteCommands+0x3ee>
    299c:	80 e0       	ldi	r24, 0x00	; 0
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	20 e0       	ldi	r18, 0x00	; 0
    29a2:	30 e0       	ldi	r19, 0x00	; 0
    29a4:	fb ce       	rjmp	.-522    	; 0x279c <handleIRRemoteCommands+0x38>
                	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
					break;

				case 4:	// both motors left
				case 46:
					pwm_right_desired += STEP_MOTORS;
    29a6:	20 91 f9 02 	lds	r18, 0x02F9
    29aa:	30 91 fa 02 	lds	r19, 0x02FA
    29ae:	2e 5f       	subi	r18, 0xFE	; 254
    29b0:	3f 4f       	sbci	r19, 0xFF	; 255
    29b2:	30 93 fa 02 	sts	0x02FA, r19
    29b6:	20 93 f9 02 	sts	0x02F9, r18
					pwm_left_desired -= STEP_MOTORS;
    29ba:	80 91 fb 02 	lds	r24, 0x02FB
    29be:	90 91 fc 02 	lds	r25, 0x02FC
    29c2:	02 97       	sbiw	r24, 0x02	; 2
    29c4:	90 93 fc 02 	sts	0x02FC, r25
    29c8:	80 93 fb 02 	sts	0x02FB, r24
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    29cc:	42 e0       	ldi	r20, 0x02	; 2
    29ce:	21 30       	cpi	r18, 0x01	; 1
    29d0:	34 07       	cpc	r19, r20
    29d2:	34 f0       	brlt	.+12     	; 0x29e0 <handleIRRemoteCommands+0x27c>
    29d4:	20 e0       	ldi	r18, 0x00	; 0
    29d6:	32 e0       	ldi	r19, 0x02	; 2
    29d8:	30 93 fa 02 	sts	0x02FA, r19
    29dc:	20 93 f9 02 	sts	0x02F9, r18
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    29e0:	4e ef       	ldi	r20, 0xFE	; 254
    29e2:	80 30       	cpi	r24, 0x00	; 0
    29e4:	94 07       	cpc	r25, r20
    29e6:	0c f0       	brlt	.+2      	; 0x29ea <handleIRRemoteCommands+0x286>
    29e8:	d7 ce       	rjmp	.-594    	; 0x2798 <handleIRRemoteCommands+0x34>
    29ea:	80 e0       	ldi	r24, 0x00	; 0
    29ec:	9e ef       	ldi	r25, 0xFE	; 254
    29ee:	90 93 fc 02 	sts	0x02FC, r25
    29f2:	80 93 fb 02 	sts	0x02FB, r24
    29f6:	d0 ce       	rjmp	.-608    	; 0x2798 <handleIRRemoteCommands+0x34>
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
    29f8:	80 91 fb 02 	lds	r24, 0x02FB
    29fc:	90 91 fc 02 	lds	r25, 0x02FC
    2a00:	02 96       	adiw	r24, 0x02	; 2
    2a02:	90 93 fc 02 	sts	0x02FC, r25
    2a06:	80 93 fb 02 	sts	0x02FB, r24
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    2a0a:	22 e0       	ldi	r18, 0x02	; 2
    2a0c:	81 30       	cpi	r24, 0x01	; 1
    2a0e:	92 07       	cpc	r25, r18
    2a10:	0c f4       	brge	.+2      	; 0x2a14 <handleIRRemoteCommands+0x2b0>
    2a12:	61 cf       	rjmp	.-318    	; 0x28d6 <handleIRRemoteCommands+0x172>
    2a14:	80 e0       	ldi	r24, 0x00	; 0
    2a16:	92 e0       	ldi	r25, 0x02	; 2
    2a18:	90 93 fc 02 	sts	0x02FC, r25
    2a1c:	80 93 fb 02 	sts	0x02FB, r24
    2a20:	5a cf       	rjmp	.-332    	; 0x28d6 <handleIRRemoteCommands+0x172>
					}
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    2a22:	20 91 f9 02 	lds	r18, 0x02F9
    2a26:	30 91 fa 02 	lds	r19, 0x02FA
    2a2a:	80 91 fb 02 	lds	r24, 0x02FB
    2a2e:	90 91 fc 02 	lds	r25, 0x02FC
    2a32:	82 17       	cp	r24, r18
    2a34:	93 07       	cpc	r25, r19
    2a36:	0c f4       	brge	.+2      	; 0x2a3a <handleIRRemoteCommands+0x2d6>
    2a38:	6e c0       	rjmp	.+220    	; 0x2b16 <handleIRRemoteCommands+0x3b2>
    2a3a:	9c 01       	movw	r18, r24
						pwm_left_desired = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
					}
					pwm_right_desired += STEP_MOTORS;
    2a3c:	2e 5f       	subi	r18, 0xFE	; 254
    2a3e:	3f 4f       	sbci	r19, 0xFF	; 255
    2a40:	30 93 fa 02 	sts	0x02FA, r19
    2a44:	20 93 f9 02 	sts	0x02F9, r18
					pwm_left_desired += STEP_MOTORS;
    2a48:	02 96       	adiw	r24, 0x02	; 2
    2a4a:	90 93 fc 02 	sts	0x02FC, r25
    2a4e:	80 93 fb 02 	sts	0x02FB, r24
	                if (pwm_right_desired > (MAX_MOTORS_PWM/2)) pwm_right_desired = (MAX_MOTORS_PWM/2);
    2a52:	42 e0       	ldi	r20, 0x02	; 2
    2a54:	21 30       	cpi	r18, 0x01	; 1
    2a56:	34 07       	cpc	r19, r20
    2a58:	34 f0       	brlt	.+12     	; 0x2a66 <handleIRRemoteCommands+0x302>
    2a5a:	20 e0       	ldi	r18, 0x00	; 0
    2a5c:	32 e0       	ldi	r19, 0x02	; 2
    2a5e:	30 93 fa 02 	sts	0x02FA, r19
    2a62:	20 93 f9 02 	sts	0x02F9, r18
    	            if (pwm_left_desired > (MAX_MOTORS_PWM/2)) pwm_left_desired = (MAX_MOTORS_PWM/2);
    2a66:	22 e0       	ldi	r18, 0x02	; 2
    2a68:	81 30       	cpi	r24, 0x01	; 1
    2a6a:	92 07       	cpc	r25, r18
    2a6c:	0c f4       	brge	.+2      	; 0x2a70 <handleIRRemoteCommands+0x30c>
    2a6e:	33 cf       	rjmp	.-410    	; 0x28d6 <handleIRRemoteCommands+0x172>
    2a70:	80 e0       	ldi	r24, 0x00	; 0
    2a72:	92 e0       	ldi	r25, 0x02	; 2
    2a74:	90 93 fc 02 	sts	0x02FC, r25
    2a78:	80 93 fb 02 	sts	0x02FB, r24
    2a7c:	20 91 f9 02 	lds	r18, 0x02F9
    2a80:	30 91 fa 02 	lds	r19, 0x02FA
    2a84:	89 ce       	rjmp	.-750    	; 0x2798 <handleIRRemoteCommands+0x34>
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
					break;

				case 1:	// right motor forward
					pwm_right_desired += STEP_MOTORS;
    2a86:	20 91 f9 02 	lds	r18, 0x02F9
    2a8a:	30 91 fa 02 	lds	r19, 0x02FA
    2a8e:	2e 5f       	subi	r18, 0xFE	; 254
    2a90:	3f 4f       	sbci	r19, 0xFF	; 255
    2a92:	30 93 fa 02 	sts	0x02FA, r19
    2a96:	20 93 f9 02 	sts	0x02F9, r18
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    2a9a:	42 e0       	ldi	r20, 0x02	; 2
    2a9c:	21 30       	cpi	r18, 0x01	; 1
    2a9e:	34 07       	cpc	r19, r20
    2aa0:	0c f4       	brge	.+2      	; 0x2aa4 <handleIRRemoteCommands+0x340>
    2aa2:	76 ce       	rjmp	.-788    	; 0x2790 <handleIRRemoteCommands+0x2c>
    2aa4:	80 e0       	ldi	r24, 0x00	; 0
    2aa6:	92 e0       	ldi	r25, 0x02	; 2
    2aa8:	90 93 fa 02 	sts	0x02FA, r25
    2aac:	80 93 f9 02 	sts	0x02F9, r24
    2ab0:	80 91 fb 02 	lds	r24, 0x02FB
    2ab4:	90 91 fc 02 	lds	r25, 0x02FC
	               	break;

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
    2ab8:	20 e0       	ldi	r18, 0x00	; 0
    2aba:	32 e0       	ldi	r19, 0x02	; 2
    2abc:	6f ce       	rjmp	.-802    	; 0x279c <handleIRRemoteCommands+0x38>
	               	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
					break;

	           	case 0:	// colors
				case 50:
					colorState = (colorState+1)%5;
    2abe:	80 91 29 04 	lds	r24, 0x0429
    2ac2:	90 e0       	ldi	r25, 0x00	; 0
    2ac4:	01 96       	adiw	r24, 0x01	; 1
    2ac6:	65 e0       	ldi	r22, 0x05	; 5
    2ac8:	70 e0       	ldi	r23, 0x00	; 0
    2aca:	0e 94 a6 51 	call	0xa34c	; 0xa34c <__divmodhi4>
    2ace:	80 93 29 04 	sts	0x0429, r24

					if(colorState==0) {			// turn on blue and off all IRs
    2ad2:	88 23       	and	r24, r24
    2ad4:	11 f5       	brne	.+68     	; 0x2b1a <handleIRRemoteCommands+0x3b6>
						LED_IR1_HIGH;
    2ad6:	44 9a       	sbi	0x08, 4	; 8
						LED_IR2_HIGH;
    2ad8:	45 9a       	sbi	0x08, 5	; 8
						pwm_blue = 0;
    2ada:	10 92 0e 02 	sts	0x020E, r1
						pwm_green = MAX_LEDS_PWM;
    2ade:	8f ef       	ldi	r24, 0xFF	; 255
    2ae0:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = MAX_LEDS_PWM;
    2ae4:	80 93 0c 02 	sts	0x020C, r24
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					}

					updateRedLed(pwm_red);
    2ae8:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <updateRedLed>
					updateGreenLed(pwm_green);
    2aec:	80 91 0d 02 	lds	r24, 0x020D
    2af0:	0e 94 f9 3a 	call	0x75f2	; 0x75f2 <updateGreenLed>
					updateBlueLed(pwm_blue);
    2af4:	80 91 0e 02 	lds	r24, 0x020E
    2af8:	0e 94 0d 3b 	call	0x761a	; 0x761a <updateBlueLed>
    2afc:	20 91 f9 02 	lds	r18, 0x02F9
    2b00:	30 91 fa 02 	lds	r19, 0x02FA
    2b04:	80 91 fb 02 	lds	r24, 0x02FB
    2b08:	90 91 fc 02 	lds	r25, 0x02FC

	               	break;
    2b0c:	45 ce       	rjmp	.-886    	; 0x2798 <handleIRRemoteCommands+0x34>

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
				speedr = pwm_right_desired;
    2b0e:	30 95       	com	r19
    2b10:	21 95       	neg	r18
    2b12:	3f 4f       	sbci	r19, 0xFF	; 255
    2b14:	43 ce       	rjmp	.-890    	; 0x279c <handleIRRemoteCommands+0x38>
					}
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    2b16:	c9 01       	movw	r24, r18
    2b18:	91 cf       	rjmp	.-222    	; 0x2a3c <handleIRRemoteCommands+0x2d8>
						LED_IR1_HIGH;
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
    2b1a:	81 30       	cpi	r24, 0x01	; 1
    2b1c:	91 f0       	breq	.+36     	; 0x2b42 <handleIRRemoteCommands+0x3de>
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = 0;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==2) {	// turn on red and on all IRs
    2b1e:	82 30       	cpi	r24, 0x02	; 2
    2b20:	a1 f1       	breq	.+104    	; 0x2b8a <handleIRRemoteCommands+0x426>
						LED_IR1_LOW;
						LED_IR2_LOW;
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = 0;
					} else if(colorState==3) {	// turn on white
    2b22:	83 30       	cpi	r24, 0x03	; 3
    2b24:	e9 f1       	breq	.+122    	; 0x2ba0 <handleIRRemoteCommands+0x43c>
						pwm_blue = 0;
						pwm_green = 0;
						pwm_red = 0;
					} else if(colorState==4) {	// turn off all leds
						pwm_blue = MAX_LEDS_PWM;
    2b26:	8f ef       	ldi	r24, 0xFF	; 255
    2b28:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = MAX_LEDS_PWM;
    2b2c:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = MAX_LEDS_PWM;
    2b30:	80 93 0c 02 	sts	0x020C, r24
    2b34:	d9 cf       	rjmp	.-78     	; 0x2ae8 <handleIRRemoteCommands+0x384>
						case 2:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 1;
							break;
						case 3:
							obstacleAvoidanceEnabled = 1;
    2b36:	81 e0       	ldi	r24, 0x01	; 1
    2b38:	80 93 6c 04 	sts	0x046C, r24
							cliffAvoidanceEnabled = 1;
    2b3c:	80 93 6d 04 	sts	0x046D, r24
    2b40:	23 ce       	rjmp	.-954    	; 0x2788 <handleIRRemoteCommands+0x24>
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
						pwm_blue = MAX_LEDS_PWM;
    2b42:	8f ef       	ldi	r24, 0xFF	; 255
    2b44:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = 0;
    2b48:	10 92 0d 02 	sts	0x020D, r1
						pwm_red = MAX_LEDS_PWM;
    2b4c:	80 93 0c 02 	sts	0x020C, r24
    2b50:	cb cf       	rjmp	.-106    	; 0x2ae8 <handleIRRemoteCommands+0x384>
				case 5:	// stop motors
				case 51:
					pwm_right_desired = 0;
					pwm_left_desired = 0;
					if(currentSelector == 8) {
						calibrateSensors();
    2b52:	0e 94 dd 3d 	call	0x7bba	; 0x7bba <calibrateSensors>
						proximityResult[8] = 1023;	// because the first time this value could be low after calibration
    2b56:	8f ef       	ldi	r24, 0xFF	; 255
    2b58:	93 e0       	ldi	r25, 0x03	; 3
    2b5a:	90 93 6a 02 	sts	0x026A, r25
    2b5e:	80 93 69 02 	sts	0x0269, r24
						proximityResult[11] = 1023;	// and in that case a false black line will be detected
    2b62:	90 93 70 02 	sts	0x0270, r25
    2b66:	80 93 6f 02 	sts	0x026F, r24
						calibState = 0;
    2b6a:	10 92 44 0b 	sts	0x0B44, r1
						calibVelIndex = 1;
    2b6e:	81 e0       	ldi	r24, 0x01	; 1
    2b70:	80 93 9e 08 	sts	0x089E, r24
						calibrateOdomFlag = 1;
    2b74:	80 93 4f 05 	sts	0x054F, r24
    2b78:	20 91 f9 02 	lds	r18, 0x02F9
    2b7c:	30 91 fa 02 	lds	r19, 0x02FA
    2b80:	80 91 fb 02 	lds	r24, 0x02FB
    2b84:	90 91 fc 02 	lds	r25, 0x02FC
    2b88:	07 ce       	rjmp	.-1010   	; 0x2798 <handleIRRemoteCommands+0x34>
					} else if(colorState==1) {	// turn on green
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = 0;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==2) {	// turn on red and on all IRs
						LED_IR1_LOW;
    2b8a:	44 98       	cbi	0x08, 4	; 8
						LED_IR2_LOW;
    2b8c:	45 98       	cbi	0x08, 5	; 8
						pwm_blue = MAX_LEDS_PWM;
    2b8e:	8f ef       	ldi	r24, 0xFF	; 255
    2b90:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = MAX_LEDS_PWM;
    2b94:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = 0;
    2b98:	10 92 0c 02 	sts	0x020C, r1
    2b9c:	80 e0       	ldi	r24, 0x00	; 0
    2b9e:	a4 cf       	rjmp	.-184    	; 0x2ae8 <handleIRRemoteCommands+0x384>
					} else if(colorState==3) {	// turn on white
						pwm_blue = 0;
    2ba0:	10 92 0e 02 	sts	0x020E, r1
						pwm_green = 0;
    2ba4:	10 92 0d 02 	sts	0x020D, r1
						pwm_red = 0;
    2ba8:	10 92 0c 02 	sts	0x020C, r1
    2bac:	80 e0       	ldi	r24, 0x00	; 0
    2bae:	9c cf       	rjmp	.-200    	; 0x2ae8 <handleIRRemoteCommands+0x384>

00002bb0 <init_speed_control>:
	//d_speed_control = 5;
	//i_speed_control = 10;
	//i_limit_speed_control = 3200;
	//k_ff_speed_control_left = INIT_KFF;
	//k_ff_speed_control_right = INIT_KFF;
}
    2bb0:	08 95       	ret

00002bb2 <start_vertical_speed_control_left>:

void start_vertical_speed_control_left(signed int *pwm_left) {
    2bb2:	cf 92       	push	r12
    2bb4:	df 92       	push	r13
    2bb6:	ef 92       	push	r14
    2bb8:	ff 92       	push	r15
    2bba:	0f 93       	push	r16
    2bbc:	1f 93       	push	r17
    2bbe:	cf 93       	push	r28
    2bc0:	df 93       	push	r29
    2bc2:	fc 01       	movw	r30, r24
	
	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).
	
	if(*pwm_left==0) {
    2bc4:	80 81       	ld	r24, Z
    2bc6:	91 81       	ldd	r25, Z+1	; 0x01
    2bc8:	00 97       	sbiw	r24, 0x00	; 0
    2bca:	09 f4       	brne	.+2      	; 0x2bce <start_vertical_speed_control_left+0x1c>
    2bcc:	f7 c0       	rjmp	.+494    	; 0x2dbc <start_vertical_speed_control_left+0x20a>
		delta_left_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    2bce:	20 91 3e 04 	lds	r18, 0x043E
    2bd2:	30 91 3f 04 	lds	r19, 0x043F
    2bd6:	41 e0       	ldi	r20, 0x01	; 1
    2bd8:	2e 30       	cpi	r18, 0x0E	; 14
    2bda:	34 07       	cpc	r19, r20
    2bdc:	0c f4       	brge	.+2      	; 0x2be0 <start_vertical_speed_control_left+0x2e>
    2bde:	c7 c0       	rjmp	.+398    	; 0x2d6e <start_vertical_speed_control_left+0x1bc>
		if(*pwm_left > 0) {
    2be0:	18 16       	cp	r1, r24
    2be2:	19 06       	cpc	r1, r25
    2be4:	0c f0       	brlt	.+2      	; 0x2be8 <start_vertical_speed_control_left+0x36>
    2be6:	68 c1       	rjmp	.+720    	; 0x2eb8 <start_vertical_speed_control_left+0x306>
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
    2be8:	88 e6       	ldi	r24, 0x68	; 104
    2bea:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    2bec:	82 1b       	sub	r24, r18
    2bee:	93 0b       	sbc	r25, r19
    2bf0:	95 95       	asr	r25
    2bf2:	87 95       	ror	r24
    2bf4:	95 95       	asr	r25
    2bf6:	87 95       	ror	r24
    2bf8:	29 e1       	ldi	r18, 0x19	; 25
    2bfa:	30 e0       	ldi	r19, 0x00	; 0
    2bfc:	28 1b       	sub	r18, r24
    2bfe:	39 0b       	sbc	r19, r25
    2c00:	30 93 04 02 	sts	0x0204, r19
    2c04:	20 93 03 02 	sts	0x0203, r18
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
		}
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    2c08:	c0 91 54 05 	lds	r28, 0x0554
    2c0c:	d0 91 55 05 	lds	r29, 0x0555
    2c10:	d0 93 6c 09 	sts	0x096C, r29
    2c14:	c0 93 6b 09 	sts	0x096B, r28
	if(*pwm_left >= 0) {
    2c18:	80 81       	ld	r24, Z
    2c1a:	91 81       	ldd	r25, Z+1	; 0x01
    2c1c:	97 fd       	sbrc	r25, 7
    2c1e:	2e c1       	rjmp	.+604    	; 0x2e7c <start_vertical_speed_control_left+0x2ca>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    2c20:	20 91 f1 02 	lds	r18, 0x02F1
    2c24:	30 91 f2 02 	lds	r19, 0x02F2
    2c28:	dc 01       	movw	r26, r24
    2c2a:	a2 1b       	sub	r26, r18
    2c2c:	b3 0b       	sbc	r27, r19
    2c2e:	b0 93 55 05 	sts	0x0555, r27
    2c32:	a0 93 54 05 	sts	0x0554, r26
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;
    2c36:	80 91 09 03 	lds	r24, 0x0309
    2c3a:	90 91 0a 03 	lds	r25, 0x030A
    2c3e:	8a 0f       	add	r24, r26
    2c40:	9b 1f       	adc	r25, r27
    2c42:	90 93 0a 03 	sts	0x030A, r25
    2c46:	80 93 09 03 	sts	0x0309, r24

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
    2c4a:	66 e0       	ldi	r22, 0x06	; 6
    2c4c:	81 34       	cpi	r24, 0x41	; 65
    2c4e:	96 07       	cpc	r25, r22
    2c50:	0c f4       	brge	.+2      	; 0x2c54 <start_vertical_speed_control_left+0xa2>
    2c52:	cb c0       	rjmp	.+406    	; 0x2dea <start_vertical_speed_control_left+0x238>
		delta_left_speed_sum = I_LIMIT_VERTICAL;
    2c54:	80 e4       	ldi	r24, 0x40	; 64
    2c56:	96 e0       	ldi	r25, 0x06	; 6
    2c58:	90 93 0a 03 	sts	0x030A, r25
    2c5c:	80 93 09 03 	sts	0x0309, r24
    2c60:	10 ec       	ldi	r17, 0xC0	; 192
    2c62:	c1 2e       	mov	r12, r17
    2c64:	12 e1       	ldi	r17, 0x12	; 18
    2c66:	d1 2e       	mov	r13, r17
    2c68:	e1 2c       	mov	r14, r1
    2c6a:	f1 2c       	mov	r15, r1
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_left_speed_controller = (signed long int)(k_ff_speed_control_left*(*pwm_left));
    2c6c:	00 81       	ld	r16, Z
    2c6e:	11 81       	ldd	r17, Z+1	; 0x01
	pwm_left_speed_controller += (signed long int)(P_VERTICAL * delta_left_speed_current);
    2c70:	9d 01       	movw	r18, r26
    2c72:	22 0f       	add	r18, r18
    2c74:	33 1f       	adc	r19, r19
    2c76:	2a 0f       	add	r18, r26
    2c78:	3b 1f       	adc	r19, r27
    2c7a:	22 0f       	add	r18, r18
    2c7c:	33 1f       	adc	r19, r19
    2c7e:	22 0f       	add	r18, r18
    2c80:	33 1f       	adc	r19, r19
    2c82:	22 0f       	add	r18, r18
    2c84:	33 1f       	adc	r19, r19
    2c86:	2a 0f       	add	r18, r26
    2c88:	3b 1f       	adc	r19, r27
    2c8a:	44 27       	eor	r20, r20
    2c8c:	37 fd       	sbrc	r19, 7
    2c8e:	40 95       	com	r20
    2c90:	54 2f       	mov	r21, r20
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_left_speed_controller = (signed long int)(k_ff_speed_control_left*(*pwm_left));
    2c92:	80 91 03 02 	lds	r24, 0x0203
    2c96:	90 91 04 02 	lds	r25, 0x0204
    2c9a:	08 9f       	mul	r16, r24
    2c9c:	b0 01       	movw	r22, r0
    2c9e:	09 9f       	mul	r16, r25
    2ca0:	70 0d       	add	r23, r0
    2ca2:	18 9f       	mul	r17, r24
    2ca4:	70 0d       	add	r23, r0
    2ca6:	11 24       	eor	r1, r1
    2ca8:	88 27       	eor	r24, r24
    2caa:	77 fd       	sbrc	r23, 7
    2cac:	80 95       	com	r24
    2cae:	98 2f       	mov	r25, r24
	pwm_left_speed_controller += (signed long int)(P_VERTICAL * delta_left_speed_current);
    2cb0:	26 0f       	add	r18, r22
    2cb2:	37 1f       	adc	r19, r23
    2cb4:	48 1f       	adc	r20, r24
    2cb6:	59 1f       	adc	r21, r25
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
    2cb8:	ac 1b       	sub	r26, r28
    2cba:	bd 0b       	sbc	r27, r29
    2cbc:	aa 0f       	add	r26, r26
    2cbe:	bb 1f       	adc	r27, r27
    2cc0:	bd 01       	movw	r22, r26
    2cc2:	cb 01       	movw	r24, r22
    2cc4:	aa 27       	eor	r26, r26
    2cc6:	97 fd       	sbrc	r25, 7
    2cc8:	a0 95       	com	r26
    2cca:	ba 2f       	mov	r27, r26
    2ccc:	28 0f       	add	r18, r24
    2cce:	39 1f       	adc	r19, r25
    2cd0:	4a 1f       	adc	r20, r26
    2cd2:	5b 1f       	adc	r21, r27
	pwm_left_speed_controller += (signed long int)(I_VERTICAL*delta_left_speed_sum);
    2cd4:	2c 0d       	add	r18, r12
    2cd6:	3d 1d       	adc	r19, r13
    2cd8:	4e 1d       	adc	r20, r14
    2cda:	5f 1d       	adc	r21, r15
    2cdc:	20 93 05 03 	sts	0x0305, r18
    2ce0:	30 93 06 03 	sts	0x0306, r19
    2ce4:	40 93 07 03 	sts	0x0307, r20
    2ce8:	50 93 08 03 	sts	0x0308, r21

	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    2cec:	57 fd       	sbrc	r21, 7
    2cee:	9d c0       	rjmp	.+314    	; 0x2e2a <start_vertical_speed_control_left+0x278>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    2cf0:	12 16       	cp	r1, r18
    2cf2:	13 06       	cpc	r1, r19
    2cf4:	14 06       	cpc	r1, r20
    2cf6:	15 06       	cpc	r1, r21
    2cf8:	0c f0       	brlt	.+2      	; 0x2cfc <start_vertical_speed_control_left+0x14a>
    2cfa:	a4 c0       	rjmp	.+328    	; 0x2e44 <start_vertical_speed_control_left+0x292>
    2cfc:	17 fd       	sbrc	r17, 7
    2cfe:	c9 c0       	rjmp	.+402    	; 0x2e92 <start_vertical_speed_control_left+0x2e0>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    2d00:	21 3c       	cpi	r18, 0xC1	; 193
    2d02:	7d e5       	ldi	r23, 0x5D	; 93
    2d04:	37 07       	cpc	r19, r23
    2d06:	70 e0       	ldi	r23, 0x00	; 0
    2d08:	47 07       	cpc	r20, r23
    2d0a:	70 e0       	ldi	r23, 0x00	; 0
    2d0c:	57 07       	cpc	r21, r23
    2d0e:	0c f4       	brge	.+2      	; 0x2d12 <start_vertical_speed_control_left+0x160>
    2d10:	99 c0       	rjmp	.+306    	; 0x2e44 <start_vertical_speed_control_left+0x292>
    2d12:	80 ec       	ldi	r24, 0xC0	; 192
    2d14:	9d e5       	ldi	r25, 0x5D	; 93
    2d16:	a0 e0       	ldi	r26, 0x00	; 0
    2d18:	b0 e0       	ldi	r27, 0x00	; 0
    2d1a:	80 93 05 03 	sts	0x0305, r24
    2d1e:	90 93 06 03 	sts	0x0306, r25
    2d22:	a0 93 07 03 	sts	0x0307, r26
    2d26:	b0 93 08 03 	sts	0x0308, r27
    2d2a:	2c ed       	ldi	r18, 0xDC	; 220
    2d2c:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = (signed int)(pwm_left_speed_controller>>4);
    2d2e:	31 83       	std	Z+1, r19	; 0x01
    2d30:	20 83       	st	Z, r18

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
    2d32:	80 91 eb 02 	lds	r24, 0x02EB
    2d36:	90 91 ec 02 	lds	r25, 0x02EC
    2d3a:	18 16       	cp	r1, r24
    2d3c:	19 06       	cpc	r1, r25
    2d3e:	0c f0       	brlt	.+2      	; 0x2d42 <start_vertical_speed_control_left+0x190>
    2d40:	98 c0       	rjmp	.+304    	; 0x2e72 <start_vertical_speed_control_left+0x2c0>
		*pwm_left += 1;
    2d42:	2f 5f       	subi	r18, 0xFF	; 255
    2d44:	3f 4f       	sbci	r19, 0xFF	; 255
    2d46:	31 83       	std	Z+1, r19	; 0x01
    2d48:	20 83       	st	Z, r18
	} else {
		*pwm_left -= 1;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    2d4a:	42 e0       	ldi	r20, 0x02	; 2
    2d4c:	21 30       	cpi	r18, 0x01	; 1
    2d4e:	34 07       	cpc	r19, r20
    2d50:	0c f4       	brge	.+2      	; 0x2d54 <start_vertical_speed_control_left+0x1a2>
    2d52:	41 c0       	rjmp	.+130    	; 0x2dd6 <start_vertical_speed_control_left+0x224>
    2d54:	80 e0       	ldi	r24, 0x00	; 0
    2d56:	92 e0       	ldi	r25, 0x02	; 2
    2d58:	91 83       	std	Z+1, r25	; 0x01
    2d5a:	80 83       	st	Z, r24
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);


}
    2d5c:	df 91       	pop	r29
    2d5e:	cf 91       	pop	r28
    2d60:	1f 91       	pop	r17
    2d62:	0f 91       	pop	r16
    2d64:	ff 90       	pop	r15
    2d66:	ef 90       	pop	r14
    2d68:	df 90       	pop	r13
    2d6a:	cf 90       	pop	r12
    2d6c:	08 95       	ret
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    2d6e:	24 3b       	cpi	r18, 0xB4	; 180
    2d70:	31 05       	cpc	r19, r1
    2d72:	94 f4       	brge	.+36     	; 0x2d98 <start_vertical_speed_control_left+0x1e6>
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
    2d74:	2a 35       	cpi	r18, 0x5A	; 90
    2d76:	31 05       	cpc	r19, r1
    2d78:	7c f4       	brge	.+30     	; 0x2d98 <start_vertical_speed_control_left+0x1e6>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
    2d7a:	18 16       	cp	r1, r24
    2d7c:	19 06       	cpc	r1, r25
    2d7e:	0c f0       	brlt	.+2      	; 0x2d82 <start_vertical_speed_control_left+0x1d0>
    2d80:	a9 c0       	rjmp	.+338    	; 0x2ed4 <start_vertical_speed_control_left+0x322>
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
    2d82:	35 95       	asr	r19
    2d84:	27 95       	ror	r18
    2d86:	35 95       	asr	r19
    2d88:	27 95       	ror	r18
    2d8a:	27 5e       	subi	r18, 0xE7	; 231
    2d8c:	3f 4f       	sbci	r19, 0xFF	; 255
    2d8e:	30 93 04 02 	sts	0x0204, r19
    2d92:	20 93 03 02 	sts	0x0203, r18
    2d96:	38 cf       	rjmp	.-400    	; 0x2c08 <start_vertical_speed_control_left+0x56>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
    2d98:	18 16       	cp	r1, r24
    2d9a:	19 06       	cpc	r1, r25
    2d9c:	0c f0       	brlt	.+2      	; 0x2da0 <start_vertical_speed_control_left+0x1ee>
    2d9e:	42 c0       	rjmp	.+132    	; 0x2e24 <start_vertical_speed_control_left+0x272>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
    2da0:	84 eb       	ldi	r24, 0xB4	; 180
    2da2:	90 e0       	ldi	r25, 0x00	; 0
    2da4:	82 1b       	sub	r24, r18
    2da6:	93 0b       	sbc	r25, r19
    2da8:	95 95       	asr	r25
    2daa:	87 95       	ror	r24
    2dac:	95 95       	asr	r25
    2dae:	87 95       	ror	r24
    2db0:	49 96       	adiw	r24, 0x19	; 25
    2db2:	90 93 04 02 	sts	0x0204, r25
    2db6:	80 93 03 02 	sts	0x0203, r24
    2dba:	26 cf       	rjmp	.-436    	; 0x2c08 <start_vertical_speed_control_left+0x56>
void start_vertical_speed_control_left(signed int *pwm_left) {
	
	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).
	
	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    2dbc:	10 92 0a 03 	sts	0x030A, r1
    2dc0:	10 92 09 03 	sts	0x0309, r1
		delta_left_speed_current = 0;
    2dc4:	10 92 55 05 	sts	0x0555, r1
    2dc8:	10 92 54 05 	sts	0x0554, r1
		delta_left_speed_prev = 0;
    2dcc:	10 92 6c 09 	sts	0x096C, r1
    2dd0:	10 92 6b 09 	sts	0x096B, r1
		return;
    2dd4:	c3 cf       	rjmp	.-122    	; 0x2d5c <start_vertical_speed_control_left+0x1aa>
	} else {
		*pwm_left -= 1;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    2dd6:	6e ef       	ldi	r22, 0xFE	; 254
    2dd8:	20 30       	cpi	r18, 0x00	; 0
    2dda:	36 07       	cpc	r19, r22
    2ddc:	0c f0       	brlt	.+2      	; 0x2de0 <start_vertical_speed_control_left+0x22e>
    2dde:	be cf       	rjmp	.-132    	; 0x2d5c <start_vertical_speed_control_left+0x1aa>
    2de0:	80 e0       	ldi	r24, 0x00	; 0
    2de2:	9e ef       	ldi	r25, 0xFE	; 254
    2de4:	91 83       	std	Z+1, r25	; 0x01
    2de6:	80 83       	st	Z, r24
    2de8:	b9 cf       	rjmp	.-142    	; 0x2d5c <start_vertical_speed_control_left+0x1aa>
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    2dea:	79 ef       	ldi	r23, 0xF9	; 249
    2dec:	80 3c       	cpi	r24, 0xC0	; 192
    2dee:	97 07       	cpc	r25, r23
    2df0:	7c f4       	brge	.+30     	; 0x2e10 <start_vertical_speed_control_left+0x25e>
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
    2df2:	80 ec       	ldi	r24, 0xC0	; 192
    2df4:	99 ef       	ldi	r25, 0xF9	; 249
    2df6:	90 93 0a 03 	sts	0x030A, r25
    2dfa:	80 93 09 03 	sts	0x0309, r24
    2dfe:	60 e4       	ldi	r22, 0x40	; 64
    2e00:	c6 2e       	mov	r12, r22
    2e02:	6d ee       	ldi	r22, 0xED	; 237
    2e04:	d6 2e       	mov	r13, r22
    2e06:	6f ef       	ldi	r22, 0xFF	; 255
    2e08:	e6 2e       	mov	r14, r22
    2e0a:	6f ef       	ldi	r22, 0xFF	; 255
    2e0c:	f6 2e       	mov	r15, r22
    2e0e:	2e cf       	rjmp	.-420    	; 0x2c6c <start_vertical_speed_control_left+0xba>
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    2e10:	6c 01       	movw	r12, r24
    2e12:	cc 0c       	add	r12, r12
    2e14:	dd 1c       	adc	r13, r13
    2e16:	c8 0e       	add	r12, r24
    2e18:	d9 1e       	adc	r13, r25
    2e1a:	ee 24       	eor	r14, r14
    2e1c:	d7 fc       	sbrc	r13, 7
    2e1e:	e0 94       	com	r14
    2e20:	fe 2c       	mov	r15, r14
    2e22:	24 cf       	rjmp	.-440    	; 0x2c6c <start_vertical_speed_control_left+0xba>
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    2e24:	84 eb       	ldi	r24, 0xB4	; 180
    2e26:	90 e0       	ldi	r25, 0x00	; 0
    2e28:	e1 ce       	rjmp	.-574    	; 0x2bec <start_vertical_speed_control_left+0x3a>
	pwm_left_speed_controller += (signed long int)(P_VERTICAL * delta_left_speed_current);
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
	pwm_left_speed_controller += (signed long int)(I_VERTICAL*delta_left_speed_sum);

	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    2e2a:	17 fd       	sbrc	r17, 7
    2e2c:	0b c0       	rjmp	.+22     	; 0x2e44 <start_vertical_speed_control_left+0x292>
		pwm_left_speed_controller = 0;
    2e2e:	10 92 05 03 	sts	0x0305, r1
    2e32:	10 92 06 03 	sts	0x0306, r1
    2e36:	10 92 07 03 	sts	0x0307, r1
    2e3a:	10 92 08 03 	sts	0x0308, r1
    2e3e:	20 e0       	ldi	r18, 0x00	; 0
    2e40:	30 e0       	ldi	r19, 0x00	; 0
    2e42:	a9 01       	movw	r20, r18
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    2e44:	20 34       	cpi	r18, 0x40	; 64
    2e46:	82 ea       	ldi	r24, 0xA2	; 162
    2e48:	38 07       	cpc	r19, r24
    2e4a:	8f ef       	ldi	r24, 0xFF	; 255
    2e4c:	48 07       	cpc	r20, r24
    2e4e:	8f ef       	ldi	r24, 0xFF	; 255
    2e50:	58 07       	cpc	r21, r24
    2e52:	54 f5       	brge	.+84     	; 0x2ea8 <start_vertical_speed_control_left+0x2f6>
    2e54:	80 e4       	ldi	r24, 0x40	; 64
    2e56:	92 ea       	ldi	r25, 0xA2	; 162
    2e58:	af ef       	ldi	r26, 0xFF	; 255
    2e5a:	bf ef       	ldi	r27, 0xFF	; 255
    2e5c:	80 93 05 03 	sts	0x0305, r24
    2e60:	90 93 06 03 	sts	0x0306, r25
    2e64:	a0 93 07 03 	sts	0x0307, r26
    2e68:	b0 93 08 03 	sts	0x0308, r27
    2e6c:	24 e2       	ldi	r18, 0x24	; 36
    2e6e:	3a ef       	ldi	r19, 0xFA	; 250
    2e70:	5e cf       	rjmp	.-324    	; 0x2d2e <start_vertical_speed_control_left+0x17c>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
		*pwm_left += 1;
	} else {
		*pwm_left -= 1;
    2e72:	21 50       	subi	r18, 0x01	; 1
    2e74:	30 40       	sbci	r19, 0x00	; 0
    2e76:	31 83       	std	Z+1, r19	; 0x01
    2e78:	20 83       	st	Z, r18
    2e7a:	67 cf       	rjmp	.-306    	; 0x2d4a <start_vertical_speed_control_left+0x198>
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    2e7c:	a0 91 f1 02 	lds	r26, 0x02F1
    2e80:	b0 91 f2 02 	lds	r27, 0x02F2
    2e84:	a8 0f       	add	r26, r24
    2e86:	b9 1f       	adc	r27, r25
    2e88:	b0 93 55 05 	sts	0x0555, r27
    2e8c:	a0 93 54 05 	sts	0x0554, r26
    2e90:	d2 ce       	rjmp	.-604    	; 0x2c36 <start_vertical_speed_control_left+0x84>
	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    2e92:	10 92 05 03 	sts	0x0305, r1
    2e96:	10 92 06 03 	sts	0x0306, r1
    2e9a:	10 92 07 03 	sts	0x0307, r1
    2e9e:	10 92 08 03 	sts	0x0308, r1
    2ea2:	20 e0       	ldi	r18, 0x00	; 0
    2ea4:	30 e0       	ldi	r19, 0x00	; 0
    2ea6:	a9 01       	movw	r20, r18
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    2ea8:	84 e0       	ldi	r24, 0x04	; 4
    2eaa:	55 95       	asr	r21
    2eac:	47 95       	ror	r20
    2eae:	37 95       	ror	r19
    2eb0:	27 95       	ror	r18
    2eb2:	8a 95       	dec	r24
    2eb4:	d1 f7       	brne	.-12     	; 0x2eaa <start_vertical_speed_control_left+0x2f8>
    2eb6:	3b cf       	rjmp	.-394    	; 0x2d2e <start_vertical_speed_control_left+0x17c>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
    2eb8:	88 e6       	ldi	r24, 0x68	; 104
    2eba:	91 e0       	ldi	r25, 0x01	; 1
    2ebc:	82 1b       	sub	r24, r18
    2ebe:	93 0b       	sbc	r25, r19
    2ec0:	95 95       	asr	r25
    2ec2:	87 95       	ror	r24
    2ec4:	95 95       	asr	r25
    2ec6:	87 95       	ror	r24
    2ec8:	49 96       	adiw	r24, 0x19	; 25
    2eca:	90 93 04 02 	sts	0x0204, r25
    2ece:	80 93 03 02 	sts	0x0203, r24
    2ed2:	9a ce       	rjmp	.-716    	; 0x2c08 <start_vertical_speed_control_left+0x56>
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
    2ed4:	35 95       	asr	r19
    2ed6:	27 95       	ror	r18
    2ed8:	35 95       	asr	r19
    2eda:	27 95       	ror	r18
    2edc:	89 e1       	ldi	r24, 0x19	; 25
    2ede:	90 e0       	ldi	r25, 0x00	; 0
    2ee0:	82 1b       	sub	r24, r18
    2ee2:	93 0b       	sbc	r25, r19
    2ee4:	90 93 04 02 	sts	0x0204, r25
    2ee8:	80 93 03 02 	sts	0x0203, r24
    2eec:	8d ce       	rjmp	.-742    	; 0x2c08 <start_vertical_speed_control_left+0x56>

00002eee <start_vertical_speed_control_right>:


}


void start_vertical_speed_control_right(signed int *pwm_right) {
    2eee:	cf 92       	push	r12
    2ef0:	df 92       	push	r13
    2ef2:	ef 92       	push	r14
    2ef4:	ff 92       	push	r15
    2ef6:	0f 93       	push	r16
    2ef8:	1f 93       	push	r17
    2efa:	cf 93       	push	r28
    2efc:	df 93       	push	r29
    2efe:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    2f00:	80 81       	ld	r24, Z
    2f02:	91 81       	ldd	r25, Z+1	; 0x01
    2f04:	00 97       	sbiw	r24, 0x00	; 0
    2f06:	09 f4       	brne	.+2      	; 0x2f0a <start_vertical_speed_control_right+0x1c>
    2f08:	f7 c0       	rjmp	.+494    	; 0x30f8 <start_vertical_speed_control_right+0x20a>
		delta_right_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    2f0a:	20 91 3e 04 	lds	r18, 0x043E
    2f0e:	30 91 3f 04 	lds	r19, 0x043F
    2f12:	41 e0       	ldi	r20, 0x01	; 1
    2f14:	2e 30       	cpi	r18, 0x0E	; 14
    2f16:	34 07       	cpc	r19, r20
    2f18:	0c f4       	brge	.+2      	; 0x2f1c <start_vertical_speed_control_right+0x2e>
    2f1a:	c7 c0       	rjmp	.+398    	; 0x30aa <start_vertical_speed_control_right+0x1bc>
		if(*pwm_right > 0) {
    2f1c:	18 16       	cp	r1, r24
    2f1e:	19 06       	cpc	r1, r25
    2f20:	0c f0       	brlt	.+2      	; 0x2f24 <start_vertical_speed_control_right+0x36>
    2f22:	68 c1       	rjmp	.+720    	; 0x31f4 <start_vertical_speed_control_right+0x306>
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
    2f24:	88 e6       	ldi	r24, 0x68	; 104
    2f26:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    2f28:	82 1b       	sub	r24, r18
    2f2a:	93 0b       	sbc	r25, r19
    2f2c:	95 95       	asr	r25
    2f2e:	87 95       	ror	r24
    2f30:	95 95       	asr	r25
    2f32:	87 95       	ror	r24
    2f34:	29 e1       	ldi	r18, 0x19	; 25
    2f36:	30 e0       	ldi	r19, 0x00	; 0
    2f38:	28 1b       	sub	r18, r24
    2f3a:	39 0b       	sbc	r19, r25
    2f3c:	30 93 06 02 	sts	0x0206, r19
    2f40:	20 93 05 02 	sts	0x0205, r18
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
		}
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    2f44:	c0 91 0a 0b 	lds	r28, 0x0B0A
    2f48:	d0 91 0b 0b 	lds	r29, 0x0B0B
    2f4c:	d0 93 a4 08 	sts	0x08A4, r29
    2f50:	c0 93 a3 08 	sts	0x08A3, r28
	if(*pwm_right >= 0) {
    2f54:	80 81       	ld	r24, Z
    2f56:	91 81       	ldd	r25, Z+1	; 0x01
    2f58:	97 fd       	sbrc	r25, 7
    2f5a:	2e c1       	rjmp	.+604    	; 0x31b8 <start_vertical_speed_control_right+0x2ca>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    2f5c:	20 91 f3 02 	lds	r18, 0x02F3
    2f60:	30 91 f4 02 	lds	r19, 0x02F4
    2f64:	dc 01       	movw	r26, r24
    2f66:	a2 1b       	sub	r26, r18
    2f68:	b3 0b       	sbc	r27, r19
    2f6a:	b0 93 0b 0b 	sts	0x0B0B, r27
    2f6e:	a0 93 0a 0b 	sts	0x0B0A, r26
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    2f72:	80 91 0b 03 	lds	r24, 0x030B
    2f76:	90 91 0c 03 	lds	r25, 0x030C
    2f7a:	8a 0f       	add	r24, r26
    2f7c:	9b 1f       	adc	r25, r27
    2f7e:	90 93 0c 03 	sts	0x030C, r25
    2f82:	80 93 0b 03 	sts	0x030B, r24

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
    2f86:	66 e0       	ldi	r22, 0x06	; 6
    2f88:	81 34       	cpi	r24, 0x41	; 65
    2f8a:	96 07       	cpc	r25, r22
    2f8c:	0c f4       	brge	.+2      	; 0x2f90 <start_vertical_speed_control_right+0xa2>
    2f8e:	cb c0       	rjmp	.+406    	; 0x3126 <start_vertical_speed_control_right+0x238>
		delta_right_speed_sum = I_LIMIT_VERTICAL;
    2f90:	80 e4       	ldi	r24, 0x40	; 64
    2f92:	96 e0       	ldi	r25, 0x06	; 6
    2f94:	90 93 0c 03 	sts	0x030C, r25
    2f98:	80 93 0b 03 	sts	0x030B, r24
    2f9c:	40 ec       	ldi	r20, 0xC0	; 192
    2f9e:	c4 2e       	mov	r12, r20
    2fa0:	42 e1       	ldi	r20, 0x12	; 18
    2fa2:	d4 2e       	mov	r13, r20
    2fa4:	e1 2c       	mov	r14, r1
    2fa6:	f1 2c       	mov	r15, r1
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_right_speed_controller = (signed long int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
    2fa8:	00 81       	ld	r16, Z
    2faa:	11 81       	ldd	r17, Z+1	; 0x01
	pwm_right_speed_controller += (signed long int)(P_VERTICAL * delta_right_speed_current);
    2fac:	9d 01       	movw	r18, r26
    2fae:	22 0f       	add	r18, r18
    2fb0:	33 1f       	adc	r19, r19
    2fb2:	2a 0f       	add	r18, r26
    2fb4:	3b 1f       	adc	r19, r27
    2fb6:	22 0f       	add	r18, r18
    2fb8:	33 1f       	adc	r19, r19
    2fba:	22 0f       	add	r18, r18
    2fbc:	33 1f       	adc	r19, r19
    2fbe:	22 0f       	add	r18, r18
    2fc0:	33 1f       	adc	r19, r19
    2fc2:	2a 0f       	add	r18, r26
    2fc4:	3b 1f       	adc	r19, r27
    2fc6:	44 27       	eor	r20, r20
    2fc8:	37 fd       	sbrc	r19, 7
    2fca:	40 95       	com	r20
    2fcc:	54 2f       	mov	r21, r20
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_right_speed_controller = (signed long int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
    2fce:	80 91 05 02 	lds	r24, 0x0205
    2fd2:	90 91 06 02 	lds	r25, 0x0206
    2fd6:	08 9f       	mul	r16, r24
    2fd8:	b0 01       	movw	r22, r0
    2fda:	09 9f       	mul	r16, r25
    2fdc:	70 0d       	add	r23, r0
    2fde:	18 9f       	mul	r17, r24
    2fe0:	70 0d       	add	r23, r0
    2fe2:	11 24       	eor	r1, r1
    2fe4:	88 27       	eor	r24, r24
    2fe6:	77 fd       	sbrc	r23, 7
    2fe8:	80 95       	com	r24
    2fea:	98 2f       	mov	r25, r24
	pwm_right_speed_controller += (signed long int)(P_VERTICAL * delta_right_speed_current);
    2fec:	26 0f       	add	r18, r22
    2fee:	37 1f       	adc	r19, r23
    2ff0:	48 1f       	adc	r20, r24
    2ff2:	59 1f       	adc	r21, r25
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
    2ff4:	ac 1b       	sub	r26, r28
    2ff6:	bd 0b       	sbc	r27, r29
    2ff8:	aa 0f       	add	r26, r26
    2ffa:	bb 1f       	adc	r27, r27
    2ffc:	bd 01       	movw	r22, r26
    2ffe:	cb 01       	movw	r24, r22
    3000:	aa 27       	eor	r26, r26
    3002:	97 fd       	sbrc	r25, 7
    3004:	a0 95       	com	r26
    3006:	ba 2f       	mov	r27, r26
    3008:	28 0f       	add	r18, r24
    300a:	39 1f       	adc	r19, r25
    300c:	4a 1f       	adc	r20, r26
    300e:	5b 1f       	adc	r21, r27
	pwm_right_speed_controller += (signed long int)(I_VERTICAL*delta_right_speed_sum);
    3010:	2c 0d       	add	r18, r12
    3012:	3d 1d       	adc	r19, r13
    3014:	4e 1d       	adc	r20, r14
    3016:	5f 1d       	adc	r21, r15
    3018:	20 93 01 03 	sts	0x0301, r18
    301c:	30 93 02 03 	sts	0x0302, r19
    3020:	40 93 03 03 	sts	0x0303, r20
    3024:	50 93 04 03 	sts	0x0304, r21

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    3028:	57 fd       	sbrc	r21, 7
    302a:	9d c0       	rjmp	.+314    	; 0x3166 <start_vertical_speed_control_right+0x278>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    302c:	12 16       	cp	r1, r18
    302e:	13 06       	cpc	r1, r19
    3030:	14 06       	cpc	r1, r20
    3032:	15 06       	cpc	r1, r21
    3034:	0c f0       	brlt	.+2      	; 0x3038 <start_vertical_speed_control_right+0x14a>
    3036:	a4 c0       	rjmp	.+328    	; 0x3180 <start_vertical_speed_control_right+0x292>
    3038:	17 fd       	sbrc	r17, 7
    303a:	c9 c0       	rjmp	.+402    	; 0x31ce <start_vertical_speed_control_right+0x2e0>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    303c:	21 3c       	cpi	r18, 0xC1	; 193
    303e:	7d e5       	ldi	r23, 0x5D	; 93
    3040:	37 07       	cpc	r19, r23
    3042:	70 e0       	ldi	r23, 0x00	; 0
    3044:	47 07       	cpc	r20, r23
    3046:	70 e0       	ldi	r23, 0x00	; 0
    3048:	57 07       	cpc	r21, r23
    304a:	0c f4       	brge	.+2      	; 0x304e <start_vertical_speed_control_right+0x160>
    304c:	99 c0       	rjmp	.+306    	; 0x3180 <start_vertical_speed_control_right+0x292>
    304e:	80 ec       	ldi	r24, 0xC0	; 192
    3050:	9d e5       	ldi	r25, 0x5D	; 93
    3052:	a0 e0       	ldi	r26, 0x00	; 0
    3054:	b0 e0       	ldi	r27, 0x00	; 0
    3056:	80 93 01 03 	sts	0x0301, r24
    305a:	90 93 02 03 	sts	0x0302, r25
    305e:	a0 93 03 03 	sts	0x0303, r26
    3062:	b0 93 04 03 	sts	0x0304, r27
    3066:	2c ed       	ldi	r18, 0xDC	; 220
    3068:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = (signed int)(pwm_right_speed_controller>>4);
    306a:	31 83       	std	Z+1, r19	; 0x01
    306c:	20 83       	st	Z, r18

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
    306e:	80 91 e9 02 	lds	r24, 0x02E9
    3072:	90 91 ea 02 	lds	r25, 0x02EA
    3076:	18 16       	cp	r1, r24
    3078:	19 06       	cpc	r1, r25
    307a:	0c f0       	brlt	.+2      	; 0x307e <start_vertical_speed_control_right+0x190>
    307c:	98 c0       	rjmp	.+304    	; 0x31ae <start_vertical_speed_control_right+0x2c0>
		*pwm_right += 1;
    307e:	2f 5f       	subi	r18, 0xFF	; 255
    3080:	3f 4f       	sbci	r19, 0xFF	; 255
    3082:	31 83       	std	Z+1, r19	; 0x01
    3084:	20 83       	st	Z, r18
	} else {
		*pwm_right -= 1;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    3086:	42 e0       	ldi	r20, 0x02	; 2
    3088:	21 30       	cpi	r18, 0x01	; 1
    308a:	34 07       	cpc	r19, r20
    308c:	0c f4       	brge	.+2      	; 0x3090 <start_vertical_speed_control_right+0x1a2>
    308e:	41 c0       	rjmp	.+130    	; 0x3112 <start_vertical_speed_control_right+0x224>
    3090:	80 e0       	ldi	r24, 0x00	; 0
    3092:	92 e0       	ldi	r25, 0x02	; 2
    3094:	91 83       	std	Z+1, r25	; 0x01
    3096:	80 83       	st	Z, r24
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    3098:	df 91       	pop	r29
    309a:	cf 91       	pop	r28
    309c:	1f 91       	pop	r17
    309e:	0f 91       	pop	r16
    30a0:	ff 90       	pop	r15
    30a2:	ef 90       	pop	r14
    30a4:	df 90       	pop	r13
    30a6:	cf 90       	pop	r12
    30a8:	08 95       	ret
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    30aa:	24 3b       	cpi	r18, 0xB4	; 180
    30ac:	31 05       	cpc	r19, r1
    30ae:	94 f4       	brge	.+36     	; 0x30d4 <start_vertical_speed_control_right+0x1e6>
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
    30b0:	2a 35       	cpi	r18, 0x5A	; 90
    30b2:	31 05       	cpc	r19, r1
    30b4:	7c f4       	brge	.+30     	; 0x30d4 <start_vertical_speed_control_right+0x1e6>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
    30b6:	18 16       	cp	r1, r24
    30b8:	19 06       	cpc	r1, r25
    30ba:	0c f0       	brlt	.+2      	; 0x30be <start_vertical_speed_control_right+0x1d0>
    30bc:	a9 c0       	rjmp	.+338    	; 0x3210 <start_vertical_speed_control_right+0x322>
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
    30be:	35 95       	asr	r19
    30c0:	27 95       	ror	r18
    30c2:	35 95       	asr	r19
    30c4:	27 95       	ror	r18
    30c6:	27 5e       	subi	r18, 0xE7	; 231
    30c8:	3f 4f       	sbci	r19, 0xFF	; 255
    30ca:	30 93 06 02 	sts	0x0206, r19
    30ce:	20 93 05 02 	sts	0x0205, r18
    30d2:	38 cf       	rjmp	.-400    	; 0x2f44 <start_vertical_speed_control_right+0x56>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
    30d4:	18 16       	cp	r1, r24
    30d6:	19 06       	cpc	r1, r25
    30d8:	0c f0       	brlt	.+2      	; 0x30dc <start_vertical_speed_control_right+0x1ee>
    30da:	42 c0       	rjmp	.+132    	; 0x3160 <start_vertical_speed_control_right+0x272>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
    30dc:	84 eb       	ldi	r24, 0xB4	; 180
    30de:	90 e0       	ldi	r25, 0x00	; 0
    30e0:	82 1b       	sub	r24, r18
    30e2:	93 0b       	sbc	r25, r19
    30e4:	95 95       	asr	r25
    30e6:	87 95       	ror	r24
    30e8:	95 95       	asr	r25
    30ea:	87 95       	ror	r24
    30ec:	49 96       	adiw	r24, 0x19	; 25
    30ee:	90 93 06 02 	sts	0x0206, r25
    30f2:	80 93 05 02 	sts	0x0205, r24
    30f6:	26 cf       	rjmp	.-436    	; 0x2f44 <start_vertical_speed_control_right+0x56>
void start_vertical_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    30f8:	10 92 0c 03 	sts	0x030C, r1
    30fc:	10 92 0b 03 	sts	0x030B, r1
		delta_right_speed_current = 0;
    3100:	10 92 0b 0b 	sts	0x0B0B, r1
    3104:	10 92 0a 0b 	sts	0x0B0A, r1
		delta_right_speed_prev = 0;
    3108:	10 92 a4 08 	sts	0x08A4, r1
    310c:	10 92 a3 08 	sts	0x08A3, r1
		return;
    3110:	c3 cf       	rjmp	.-122    	; 0x3098 <start_vertical_speed_control_right+0x1aa>
	} else {
		*pwm_right -= 1;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    3112:	6e ef       	ldi	r22, 0xFE	; 254
    3114:	20 30       	cpi	r18, 0x00	; 0
    3116:	36 07       	cpc	r19, r22
    3118:	0c f0       	brlt	.+2      	; 0x311c <start_vertical_speed_control_right+0x22e>
    311a:	be cf       	rjmp	.-132    	; 0x3098 <start_vertical_speed_control_right+0x1aa>
    311c:	80 e0       	ldi	r24, 0x00	; 0
    311e:	9e ef       	ldi	r25, 0xFE	; 254
    3120:	91 83       	std	Z+1, r25	; 0x01
    3122:	80 83       	st	Z, r24
    3124:	b9 cf       	rjmp	.-142    	; 0x3098 <start_vertical_speed_control_right+0x1aa>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    3126:	79 ef       	ldi	r23, 0xF9	; 249
    3128:	80 3c       	cpi	r24, 0xC0	; 192
    312a:	97 07       	cpc	r25, r23
    312c:	7c f4       	brge	.+30     	; 0x314c <start_vertical_speed_control_right+0x25e>
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
    312e:	80 ec       	ldi	r24, 0xC0	; 192
    3130:	99 ef       	ldi	r25, 0xF9	; 249
    3132:	90 93 0c 03 	sts	0x030C, r25
    3136:	80 93 0b 03 	sts	0x030B, r24
    313a:	20 e4       	ldi	r18, 0x40	; 64
    313c:	c2 2e       	mov	r12, r18
    313e:	2d ee       	ldi	r18, 0xED	; 237
    3140:	d2 2e       	mov	r13, r18
    3142:	2f ef       	ldi	r18, 0xFF	; 255
    3144:	e2 2e       	mov	r14, r18
    3146:	2f ef       	ldi	r18, 0xFF	; 255
    3148:	f2 2e       	mov	r15, r18
    314a:	2e cf       	rjmp	.-420    	; 0x2fa8 <start_vertical_speed_control_right+0xba>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    314c:	6c 01       	movw	r12, r24
    314e:	cc 0c       	add	r12, r12
    3150:	dd 1c       	adc	r13, r13
    3152:	c8 0e       	add	r12, r24
    3154:	d9 1e       	adc	r13, r25
    3156:	ee 24       	eor	r14, r14
    3158:	d7 fc       	sbrc	r13, 7
    315a:	e0 94       	com	r14
    315c:	fe 2c       	mov	r15, r14
    315e:	24 cf       	rjmp	.-440    	; 0x2fa8 <start_vertical_speed_control_right+0xba>
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    3160:	84 eb       	ldi	r24, 0xB4	; 180
    3162:	90 e0       	ldi	r25, 0x00	; 0
    3164:	e1 ce       	rjmp	.-574    	; 0x2f28 <start_vertical_speed_control_right+0x3a>
	pwm_right_speed_controller += (signed long int)(P_VERTICAL * delta_right_speed_current);
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
	pwm_right_speed_controller += (signed long int)(I_VERTICAL*delta_right_speed_sum);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    3166:	17 fd       	sbrc	r17, 7
    3168:	0b c0       	rjmp	.+22     	; 0x3180 <start_vertical_speed_control_right+0x292>
		pwm_right_speed_controller = 0;
    316a:	10 92 01 03 	sts	0x0301, r1
    316e:	10 92 02 03 	sts	0x0302, r1
    3172:	10 92 03 03 	sts	0x0303, r1
    3176:	10 92 04 03 	sts	0x0304, r1
    317a:	20 e0       	ldi	r18, 0x00	; 0
    317c:	30 e0       	ldi	r19, 0x00	; 0
    317e:	a9 01       	movw	r20, r18
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    3180:	20 34       	cpi	r18, 0x40	; 64
    3182:	82 ea       	ldi	r24, 0xA2	; 162
    3184:	38 07       	cpc	r19, r24
    3186:	8f ef       	ldi	r24, 0xFF	; 255
    3188:	48 07       	cpc	r20, r24
    318a:	8f ef       	ldi	r24, 0xFF	; 255
    318c:	58 07       	cpc	r21, r24
    318e:	54 f5       	brge	.+84     	; 0x31e4 <start_vertical_speed_control_right+0x2f6>
    3190:	80 e4       	ldi	r24, 0x40	; 64
    3192:	92 ea       	ldi	r25, 0xA2	; 162
    3194:	af ef       	ldi	r26, 0xFF	; 255
    3196:	bf ef       	ldi	r27, 0xFF	; 255
    3198:	80 93 01 03 	sts	0x0301, r24
    319c:	90 93 02 03 	sts	0x0302, r25
    31a0:	a0 93 03 03 	sts	0x0303, r26
    31a4:	b0 93 04 03 	sts	0x0304, r27
    31a8:	24 e2       	ldi	r18, 0x24	; 36
    31aa:	3a ef       	ldi	r19, 0xFA	; 250
    31ac:	5e cf       	rjmp	.-324    	; 0x306a <start_vertical_speed_control_right+0x17c>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
		*pwm_right += 1;
	} else {
		*pwm_right -= 1;
    31ae:	21 50       	subi	r18, 0x01	; 1
    31b0:	30 40       	sbci	r19, 0x00	; 0
    31b2:	31 83       	std	Z+1, r19	; 0x01
    31b4:	20 83       	st	Z, r18
    31b6:	67 cf       	rjmp	.-306    	; 0x3086 <start_vertical_speed_control_right+0x198>
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    31b8:	a0 91 f3 02 	lds	r26, 0x02F3
    31bc:	b0 91 f4 02 	lds	r27, 0x02F4
    31c0:	a8 0f       	add	r26, r24
    31c2:	b9 1f       	adc	r27, r25
    31c4:	b0 93 0b 0b 	sts	0x0B0B, r27
    31c8:	a0 93 0a 0b 	sts	0x0B0A, r26
    31cc:	d2 ce       	rjmp	.-604    	; 0x2f72 <start_vertical_speed_control_right+0x84>
	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    31ce:	10 92 01 03 	sts	0x0301, r1
    31d2:	10 92 02 03 	sts	0x0302, r1
    31d6:	10 92 03 03 	sts	0x0303, r1
    31da:	10 92 04 03 	sts	0x0304, r1
    31de:	20 e0       	ldi	r18, 0x00	; 0
    31e0:	30 e0       	ldi	r19, 0x00	; 0
    31e2:	a9 01       	movw	r20, r18
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    31e4:	64 e0       	ldi	r22, 0x04	; 4
    31e6:	55 95       	asr	r21
    31e8:	47 95       	ror	r20
    31ea:	37 95       	ror	r19
    31ec:	27 95       	ror	r18
    31ee:	6a 95       	dec	r22
    31f0:	d1 f7       	brne	.-12     	; 0x31e6 <start_vertical_speed_control_right+0x2f8>
    31f2:	3b cf       	rjmp	.-394    	; 0x306a <start_vertical_speed_control_right+0x17c>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
    31f4:	88 e6       	ldi	r24, 0x68	; 104
    31f6:	91 e0       	ldi	r25, 0x01	; 1
    31f8:	82 1b       	sub	r24, r18
    31fa:	93 0b       	sbc	r25, r19
    31fc:	95 95       	asr	r25
    31fe:	87 95       	ror	r24
    3200:	95 95       	asr	r25
    3202:	87 95       	ror	r24
    3204:	49 96       	adiw	r24, 0x19	; 25
    3206:	90 93 06 02 	sts	0x0206, r25
    320a:	80 93 05 02 	sts	0x0205, r24
    320e:	9a ce       	rjmp	.-716    	; 0x2f44 <start_vertical_speed_control_right+0x56>
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
    3210:	35 95       	asr	r19
    3212:	27 95       	ror	r18
    3214:	35 95       	asr	r19
    3216:	27 95       	ror	r18
    3218:	89 e1       	ldi	r24, 0x19	; 25
    321a:	90 e0       	ldi	r25, 0x00	; 0
    321c:	82 1b       	sub	r24, r18
    321e:	93 0b       	sbc	r25, r19
    3220:	90 93 06 02 	sts	0x0206, r25
    3224:	80 93 05 02 	sts	0x0205, r24
    3228:	8d ce       	rjmp	.-742    	; 0x2f44 <start_vertical_speed_control_right+0x56>

0000322a <start_horizontal_speed_control_right>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_right(signed int *pwm_right) {
    322a:	cf 92       	push	r12
    322c:	df 92       	push	r13
    322e:	ef 92       	push	r14
    3230:	ff 92       	push	r15
    3232:	0f 93       	push	r16
    3234:	1f 93       	push	r17
    3236:	cf 93       	push	r28
    3238:	df 93       	push	r29
    323a:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    323c:	80 81       	ld	r24, Z
    323e:	91 81       	ldd	r25, Z+1	; 0x01
    3240:	00 97       	sbiw	r24, 0x00	; 0
    3242:	09 f4       	brne	.+2      	; 0x3246 <start_horizontal_speed_control_right+0x1c>
    3244:	b8 c0       	rjmp	.+368    	; 0x33b6 <start_horizontal_speed_control_right+0x18c>
		delta_right_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    3246:	c0 91 0a 0b 	lds	r28, 0x0B0A
    324a:	d0 91 0b 0b 	lds	r29, 0x0B0B
    324e:	d0 93 a4 08 	sts	0x08A4, r29
    3252:	c0 93 a3 08 	sts	0x08A3, r28
	if(*pwm_right >= 0) {
    3256:	80 81       	ld	r24, Z
    3258:	91 81       	ldd	r25, Z+1	; 0x01
    325a:	97 fd       	sbrc	r25, 7
    325c:	cd c0       	rjmp	.+410    	; 0x33f8 <start_horizontal_speed_control_right+0x1ce>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    325e:	20 91 f3 02 	lds	r18, 0x02F3
    3262:	30 91 f4 02 	lds	r19, 0x02F4
    3266:	dc 01       	movw	r26, r24
    3268:	a2 1b       	sub	r26, r18
    326a:	b3 0b       	sbc	r27, r19
    326c:	b0 93 0b 0b 	sts	0x0B0B, r27
    3270:	a0 93 0a 0b 	sts	0x0B0A, r26
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}

	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    3274:	c0 90 0b 03 	lds	r12, 0x030B
    3278:	d0 90 0c 03 	lds	r13, 0x030C
    327c:	ca 0e       	add	r12, r26
    327e:	db 1e       	adc	r13, r27
    3280:	d0 92 0c 03 	sts	0x030C, r13
    3284:	c0 92 0b 03 	sts	0x030B, r12

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
    3288:	81 e4       	ldi	r24, 0x41	; 65
    328a:	c8 16       	cp	r12, r24
    328c:	86 e0       	ldi	r24, 0x06	; 6
    328e:	d8 06       	cpc	r13, r24
    3290:	0c f4       	brge	.+2      	; 0x3294 <start_horizontal_speed_control_right+0x6a>
    3292:	9e c0       	rjmp	.+316    	; 0x33d0 <start_horizontal_speed_control_right+0x1a6>
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
    3294:	80 e4       	ldi	r24, 0x40	; 64
    3296:	96 e0       	ldi	r25, 0x06	; 6
    3298:	90 93 0c 03 	sts	0x030C, r25
    329c:	80 93 0b 03 	sts	0x030B, r24
    32a0:	10 e8       	ldi	r17, 0x80	; 128
    32a2:	c1 2e       	mov	r12, r17
    32a4:	1c e0       	ldi	r17, 0x0C	; 12
    32a6:	d1 2e       	mov	r13, r17
    32a8:	e1 2c       	mov	r14, r1
    32aa:	f1 2c       	mov	r15, r1
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
	}		

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed long int)((*pwm_right) << 3);
    32ac:	00 81       	ld	r16, Z
    32ae:	11 81       	ldd	r17, Z+1	; 0x01
	pwm_right_speed_controller += (signed long int)(delta_right_speed_current*P_HORIZONTAL);
    32b0:	cd 01       	movw	r24, r26
    32b2:	88 0f       	add	r24, r24
    32b4:	99 1f       	adc	r25, r25
    32b6:	8a 0f       	add	r24, r26
    32b8:	9b 1f       	adc	r25, r27
    32ba:	9c 01       	movw	r18, r24
    32bc:	22 0f       	add	r18, r18
    32be:	33 1f       	adc	r19, r19
    32c0:	22 0f       	add	r18, r18
    32c2:	33 1f       	adc	r19, r19
    32c4:	28 0f       	add	r18, r24
    32c6:	39 1f       	adc	r19, r25
    32c8:	44 27       	eor	r20, r20
    32ca:	37 fd       	sbrc	r19, 7
    32cc:	40 95       	com	r20
    32ce:	54 2f       	mov	r21, r20
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
	}		

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed long int)((*pwm_right) << 3);
    32d0:	b8 01       	movw	r22, r16
    32d2:	66 0f       	add	r22, r22
    32d4:	77 1f       	adc	r23, r23
    32d6:	66 0f       	add	r22, r22
    32d8:	77 1f       	adc	r23, r23
    32da:	66 0f       	add	r22, r22
    32dc:	77 1f       	adc	r23, r23
    32de:	88 27       	eor	r24, r24
    32e0:	77 fd       	sbrc	r23, 7
    32e2:	80 95       	com	r24
    32e4:	98 2f       	mov	r25, r24
	pwm_right_speed_controller += (signed long int)(delta_right_speed_current*P_HORIZONTAL);
    32e6:	26 0f       	add	r18, r22
    32e8:	37 1f       	adc	r19, r23
    32ea:	48 1f       	adc	r20, r24
    32ec:	59 1f       	adc	r21, r25
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
    32ee:	ac 1b       	sub	r26, r28
    32f0:	bd 0b       	sbc	r27, r29
    32f2:	cd 01       	movw	r24, r26
    32f4:	88 0f       	add	r24, r24
    32f6:	99 1f       	adc	r25, r25
    32f8:	8a 0f       	add	r24, r26
    32fa:	9b 1f       	adc	r25, r27
    32fc:	aa 27       	eor	r26, r26
    32fe:	97 fd       	sbrc	r25, 7
    3300:	a0 95       	com	r26
    3302:	ba 2f       	mov	r27, r26
    3304:	28 0f       	add	r18, r24
    3306:	39 1f       	adc	r19, r25
    3308:	4a 1f       	adc	r20, r26
    330a:	5b 1f       	adc	r21, r27
	pwm_right_speed_controller += (signed long int)(delta_right_speed_sum*I_HORIZONTAL);
    330c:	2c 0d       	add	r18, r12
    330e:	3d 1d       	adc	r19, r13
    3310:	4e 1d       	adc	r20, r14
    3312:	5f 1d       	adc	r21, r15
    3314:	20 93 01 03 	sts	0x0301, r18
    3318:	30 93 02 03 	sts	0x0302, r19
    331c:	40 93 03 03 	sts	0x0303, r20
    3320:	50 93 04 03 	sts	0x0304, r21

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    3324:	57 fd       	sbrc	r21, 7
    3326:	7a c0       	rjmp	.+244    	; 0x341c <start_horizontal_speed_control_right+0x1f2>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    3328:	12 16       	cp	r1, r18
    332a:	13 06       	cpc	r1, r19
    332c:	14 06       	cpc	r1, r20
    332e:	15 06       	cpc	r1, r21
    3330:	0c f0       	brlt	.+2      	; 0x3334 <start_horizontal_speed_control_right+0x10a>
    3332:	81 c0       	rjmp	.+258    	; 0x3436 <start_horizontal_speed_control_right+0x20c>
    3334:	17 fd       	sbrc	r17, 7
    3336:	ad c0       	rjmp	.+346    	; 0x3492 <start_horizontal_speed_control_right+0x268>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    3338:	21 3c       	cpi	r18, 0xC1	; 193
    333a:	8d e5       	ldi	r24, 0x5D	; 93
    333c:	38 07       	cpc	r19, r24
    333e:	80 e0       	ldi	r24, 0x00	; 0
    3340:	48 07       	cpc	r20, r24
    3342:	80 e0       	ldi	r24, 0x00	; 0
    3344:	58 07       	cpc	r21, r24
    3346:	0c f4       	brge	.+2      	; 0x334a <start_horizontal_speed_control_right+0x120>
    3348:	76 c0       	rjmp	.+236    	; 0x3436 <start_horizontal_speed_control_right+0x20c>
    334a:	80 ec       	ldi	r24, 0xC0	; 192
    334c:	9d e5       	ldi	r25, 0x5D	; 93
    334e:	a0 e0       	ldi	r26, 0x00	; 0
    3350:	b0 e0       	ldi	r27, 0x00	; 0
    3352:	80 93 01 03 	sts	0x0301, r24
    3356:	90 93 02 03 	sts	0x0302, r25
    335a:	a0 93 03 03 	sts	0x0303, r26
    335e:	b0 93 04 03 	sts	0x0304, r27
    3362:	2c ed       	ldi	r18, 0xDC	; 220
    3364:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = (signed int)(pwm_right_speed_controller>>4);
    3366:	31 83       	std	Z+1, r19	; 0x01
    3368:	20 83       	st	Z, r18

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
    336a:	80 91 e9 02 	lds	r24, 0x02E9
    336e:	90 91 ea 02 	lds	r25, 0x02EA
    3372:	18 16       	cp	r1, r24
    3374:	19 06       	cpc	r1, r25
    3376:	0c f0       	brlt	.+2      	; 0x337a <start_horizontal_speed_control_right+0x150>
    3378:	87 c0       	rjmp	.+270    	; 0x3488 <start_horizontal_speed_control_right+0x25e>
		*pwm_right += 1;
    337a:	2f 5f       	subi	r18, 0xFF	; 255
    337c:	3f 4f       	sbci	r19, 0xFF	; 255
    337e:	31 83       	std	Z+1, r19	; 0x01
    3380:	20 83       	st	Z, r18
	} else {
		*pwm_right -= 1;
	}

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
    3382:	12 16       	cp	r1, r18
    3384:	13 06       	cpc	r1, r19
    3386:	0c f0       	brlt	.+2      	; 0x338a <start_horizontal_speed_control_right+0x160>
    3388:	6d c0       	rjmp	.+218    	; 0x3464 <start_horizontal_speed_control_right+0x23a>
		*pwm_right += 30;
    338a:	22 5e       	subi	r18, 0xE2	; 226
    338c:	3f 4f       	sbci	r19, 0xFF	; 255
    338e:	31 83       	std	Z+1, r19	; 0x01
    3390:	20 83       	st	Z, r18
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    3392:	82 e0       	ldi	r24, 0x02	; 2
    3394:	21 30       	cpi	r18, 0x01	; 1
    3396:	38 07       	cpc	r19, r24
    3398:	0c f4       	brge	.+2      	; 0x339c <start_horizontal_speed_control_right+0x172>
    339a:	6c c0       	rjmp	.+216    	; 0x3474 <start_horizontal_speed_control_right+0x24a>
    339c:	80 e0       	ldi	r24, 0x00	; 0
    339e:	92 e0       	ldi	r25, 0x02	; 2
    33a0:	91 83       	std	Z+1, r25	; 0x01
    33a2:	80 83       	st	Z, r24
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    33a4:	df 91       	pop	r29
    33a6:	cf 91       	pop	r28
    33a8:	1f 91       	pop	r17
    33aa:	0f 91       	pop	r16
    33ac:	ff 90       	pop	r15
    33ae:	ef 90       	pop	r14
    33b0:	df 90       	pop	r13
    33b2:	cf 90       	pop	r12
    33b4:	08 95       	ret
void start_horizontal_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    33b6:	10 92 0c 03 	sts	0x030C, r1
    33ba:	10 92 0b 03 	sts	0x030B, r1
		delta_right_speed_current = 0;
    33be:	10 92 0b 0b 	sts	0x0B0B, r1
    33c2:	10 92 0a 0b 	sts	0x0B0A, r1
		delta_right_speed_prev = 0;
    33c6:	10 92 a4 08 	sts	0x08A4, r1
    33ca:	10 92 a3 08 	sts	0x08A3, r1
		return;
    33ce:	ea cf       	rjmp	.-44     	; 0x33a4 <start_horizontal_speed_control_right+0x17a>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    33d0:	80 ec       	ldi	r24, 0xC0	; 192
    33d2:	c8 16       	cp	r12, r24
    33d4:	89 ef       	ldi	r24, 0xF9	; 249
    33d6:	d8 06       	cpc	r13, r24
    33d8:	d4 f4       	brge	.+52     	; 0x340e <start_horizontal_speed_control_right+0x1e4>
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
    33da:	80 ec       	ldi	r24, 0xC0	; 192
    33dc:	99 ef       	ldi	r25, 0xF9	; 249
    33de:	90 93 0c 03 	sts	0x030C, r25
    33e2:	80 93 0b 03 	sts	0x030B, r24
    33e6:	60 e8       	ldi	r22, 0x80	; 128
    33e8:	c6 2e       	mov	r12, r22
    33ea:	63 ef       	ldi	r22, 0xF3	; 243
    33ec:	d6 2e       	mov	r13, r22
    33ee:	6f ef       	ldi	r22, 0xFF	; 255
    33f0:	e6 2e       	mov	r14, r22
    33f2:	6f ef       	ldi	r22, 0xFF	; 255
    33f4:	f6 2e       	mov	r15, r22
    33f6:	5a cf       	rjmp	.-332    	; 0x32ac <start_horizontal_speed_control_right+0x82>
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    33f8:	a0 91 f3 02 	lds	r26, 0x02F3
    33fc:	b0 91 f4 02 	lds	r27, 0x02F4
    3400:	a8 0f       	add	r26, r24
    3402:	b9 1f       	adc	r27, r25
    3404:	b0 93 0b 0b 	sts	0x0B0B, r27
    3408:	a0 93 0a 0b 	sts	0x0B0A, r26
    340c:	33 cf       	rjmp	.-410    	; 0x3274 <start_horizontal_speed_control_right+0x4a>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    340e:	cc 0c       	add	r12, r12
    3410:	dd 1c       	adc	r13, r13
    3412:	ee 24       	eor	r14, r14
    3414:	d7 fc       	sbrc	r13, 7
    3416:	e0 94       	com	r14
    3418:	fe 2c       	mov	r15, r14
    341a:	48 cf       	rjmp	.-368    	; 0x32ac <start_horizontal_speed_control_right+0x82>
	pwm_right_speed_controller += (signed long int)(delta_right_speed_current*P_HORIZONTAL);
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
	pwm_right_speed_controller += (signed long int)(delta_right_speed_sum*I_HORIZONTAL);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    341c:	17 fd       	sbrc	r17, 7
    341e:	0b c0       	rjmp	.+22     	; 0x3436 <start_horizontal_speed_control_right+0x20c>
		pwm_right_speed_controller = 0;
    3420:	10 92 01 03 	sts	0x0301, r1
    3424:	10 92 02 03 	sts	0x0302, r1
    3428:	10 92 03 03 	sts	0x0303, r1
    342c:	10 92 04 03 	sts	0x0304, r1
    3430:	20 e0       	ldi	r18, 0x00	; 0
    3432:	30 e0       	ldi	r19, 0x00	; 0
    3434:	a9 01       	movw	r20, r18
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    3436:	20 34       	cpi	r18, 0x40	; 64
    3438:	82 ea       	ldi	r24, 0xA2	; 162
    343a:	38 07       	cpc	r19, r24
    343c:	8f ef       	ldi	r24, 0xFF	; 255
    343e:	48 07       	cpc	r20, r24
    3440:	8f ef       	ldi	r24, 0xFF	; 255
    3442:	58 07       	cpc	r21, r24
    3444:	8c f5       	brge	.+98     	; 0x34a8 <start_horizontal_speed_control_right+0x27e>
    3446:	80 e4       	ldi	r24, 0x40	; 64
    3448:	92 ea       	ldi	r25, 0xA2	; 162
    344a:	af ef       	ldi	r26, 0xFF	; 255
    344c:	bf ef       	ldi	r27, 0xFF	; 255
    344e:	80 93 01 03 	sts	0x0301, r24
    3452:	90 93 02 03 	sts	0x0302, r25
    3456:	a0 93 03 03 	sts	0x0303, r26
    345a:	b0 93 04 03 	sts	0x0304, r27
    345e:	24 e2       	ldi	r18, 0x24	; 36
    3460:	3a ef       	ldi	r19, 0xFA	; 250
    3462:	81 cf       	rjmp	.-254    	; 0x3366 <start_horizontal_speed_control_right+0x13c>
	}

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
		*pwm_right += 30;
	} else if(*pwm_right < 0) {
    3464:	21 15       	cp	r18, r1
    3466:	31 05       	cpc	r19, r1
    3468:	09 f4       	brne	.+2      	; 0x346c <start_horizontal_speed_control_right+0x242>
    346a:	9c cf       	rjmp	.-200    	; 0x33a4 <start_horizontal_speed_control_right+0x17a>
		*pwm_right -= 30;
    346c:	2e 51       	subi	r18, 0x1E	; 30
    346e:	30 40       	sbci	r19, 0x00	; 0
    3470:	31 83       	std	Z+1, r19	; 0x01
    3472:	20 83       	st	Z, r18
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    3474:	8e ef       	ldi	r24, 0xFE	; 254
    3476:	20 30       	cpi	r18, 0x00	; 0
    3478:	38 07       	cpc	r19, r24
    347a:	0c f0       	brlt	.+2      	; 0x347e <start_horizontal_speed_control_right+0x254>
    347c:	93 cf       	rjmp	.-218    	; 0x33a4 <start_horizontal_speed_control_right+0x17a>
    347e:	80 e0       	ldi	r24, 0x00	; 0
    3480:	9e ef       	ldi	r25, 0xFE	; 254
    3482:	91 83       	std	Z+1, r25	; 0x01
    3484:	80 83       	st	Z, r24
    3486:	8e cf       	rjmp	.-228    	; 0x33a4 <start_horizontal_speed_control_right+0x17a>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
		*pwm_right += 1;
	} else {
		*pwm_right -= 1;
    3488:	21 50       	subi	r18, 0x01	; 1
    348a:	30 40       	sbci	r19, 0x00	; 0
    348c:	31 83       	std	Z+1, r19	; 0x01
    348e:	20 83       	st	Z, r18
    3490:	78 cf       	rjmp	.-272    	; 0x3382 <start_horizontal_speed_control_right+0x158>
	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    3492:	10 92 01 03 	sts	0x0301, r1
    3496:	10 92 02 03 	sts	0x0302, r1
    349a:	10 92 03 03 	sts	0x0303, r1
    349e:	10 92 04 03 	sts	0x0304, r1
    34a2:	20 e0       	ldi	r18, 0x00	; 0
    34a4:	30 e0       	ldi	r19, 0x00	; 0
    34a6:	a9 01       	movw	r20, r18
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    34a8:	14 e0       	ldi	r17, 0x04	; 4
    34aa:	55 95       	asr	r21
    34ac:	47 95       	ror	r20
    34ae:	37 95       	ror	r19
    34b0:	27 95       	ror	r18
    34b2:	1a 95       	dec	r17
    34b4:	d1 f7       	brne	.-12     	; 0x34aa <start_horizontal_speed_control_right+0x280>
    34b6:	57 cf       	rjmp	.-338    	; 0x3366 <start_horizontal_speed_control_right+0x13c>

000034b8 <start_horizontal_speed_control_left>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_left(signed int *pwm_left) {
    34b8:	cf 92       	push	r12
    34ba:	df 92       	push	r13
    34bc:	ef 92       	push	r14
    34be:	ff 92       	push	r15
    34c0:	0f 93       	push	r16
    34c2:	1f 93       	push	r17
    34c4:	cf 93       	push	r28
    34c6:	df 93       	push	r29
    34c8:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
    34ca:	80 81       	ld	r24, Z
    34cc:	91 81       	ldd	r25, Z+1	; 0x01
    34ce:	00 97       	sbiw	r24, 0x00	; 0
    34d0:	09 f4       	brne	.+2      	; 0x34d4 <start_horizontal_speed_control_left+0x1c>
    34d2:	b8 c0       	rjmp	.+368    	; 0x3644 <start_horizontal_speed_control_left+0x18c>
		delta_left_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    34d4:	c0 91 54 05 	lds	r28, 0x0554
    34d8:	d0 91 55 05 	lds	r29, 0x0555
    34dc:	d0 93 6c 09 	sts	0x096C, r29
    34e0:	c0 93 6b 09 	sts	0x096B, r28
	if(*pwm_left >= 0) {
    34e4:	80 81       	ld	r24, Z
    34e6:	91 81       	ldd	r25, Z+1	; 0x01
    34e8:	97 fd       	sbrc	r25, 7
    34ea:	cd c0       	rjmp	.+410    	; 0x3686 <start_horizontal_speed_control_left+0x1ce>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    34ec:	20 91 f1 02 	lds	r18, 0x02F1
    34f0:	30 91 f2 02 	lds	r19, 0x02F2
    34f4:	dc 01       	movw	r26, r24
    34f6:	a2 1b       	sub	r26, r18
    34f8:	b3 0b       	sbc	r27, r19
    34fa:	b0 93 55 05 	sts	0x0555, r27
    34fe:	a0 93 54 05 	sts	0x0554, r26
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;
    3502:	c0 90 09 03 	lds	r12, 0x0309
    3506:	d0 90 0a 03 	lds	r13, 0x030A
    350a:	ca 0e       	add	r12, r26
    350c:	db 1e       	adc	r13, r27
    350e:	d0 92 0a 03 	sts	0x030A, r13
    3512:	c0 92 09 03 	sts	0x0309, r12

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
    3516:	81 e4       	ldi	r24, 0x41	; 65
    3518:	c8 16       	cp	r12, r24
    351a:	86 e0       	ldi	r24, 0x06	; 6
    351c:	d8 06       	cpc	r13, r24
    351e:	0c f4       	brge	.+2      	; 0x3522 <start_horizontal_speed_control_left+0x6a>
    3520:	9e c0       	rjmp	.+316    	; 0x365e <start_horizontal_speed_control_left+0x1a6>
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
    3522:	80 e4       	ldi	r24, 0x40	; 64
    3524:	96 e0       	ldi	r25, 0x06	; 6
    3526:	90 93 0a 03 	sts	0x030A, r25
    352a:	80 93 09 03 	sts	0x0309, r24
    352e:	10 e8       	ldi	r17, 0x80	; 128
    3530:	c1 2e       	mov	r12, r17
    3532:	1c e0       	ldi	r17, 0x0C	; 12
    3534:	d1 2e       	mov	r13, r17
    3536:	e1 2c       	mov	r14, r1
    3538:	f1 2c       	mov	r15, r1
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed long int)((*pwm_left) << 3);
    353a:	00 81       	ld	r16, Z
    353c:	11 81       	ldd	r17, Z+1	; 0x01
	pwm_left_speed_controller += (signed long int)(delta_left_speed_current*P_HORIZONTAL);
    353e:	cd 01       	movw	r24, r26
    3540:	88 0f       	add	r24, r24
    3542:	99 1f       	adc	r25, r25
    3544:	8a 0f       	add	r24, r26
    3546:	9b 1f       	adc	r25, r27
    3548:	9c 01       	movw	r18, r24
    354a:	22 0f       	add	r18, r18
    354c:	33 1f       	adc	r19, r19
    354e:	22 0f       	add	r18, r18
    3550:	33 1f       	adc	r19, r19
    3552:	28 0f       	add	r18, r24
    3554:	39 1f       	adc	r19, r25
    3556:	44 27       	eor	r20, r20
    3558:	37 fd       	sbrc	r19, 7
    355a:	40 95       	com	r20
    355c:	54 2f       	mov	r21, r20
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed long int)((*pwm_left) << 3);
    355e:	b8 01       	movw	r22, r16
    3560:	66 0f       	add	r22, r22
    3562:	77 1f       	adc	r23, r23
    3564:	66 0f       	add	r22, r22
    3566:	77 1f       	adc	r23, r23
    3568:	66 0f       	add	r22, r22
    356a:	77 1f       	adc	r23, r23
    356c:	88 27       	eor	r24, r24
    356e:	77 fd       	sbrc	r23, 7
    3570:	80 95       	com	r24
    3572:	98 2f       	mov	r25, r24
	pwm_left_speed_controller += (signed long int)(delta_left_speed_current*P_HORIZONTAL);
    3574:	26 0f       	add	r18, r22
    3576:	37 1f       	adc	r19, r23
    3578:	48 1f       	adc	r20, r24
    357a:	59 1f       	adc	r21, r25
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
    357c:	ac 1b       	sub	r26, r28
    357e:	bd 0b       	sbc	r27, r29
    3580:	cd 01       	movw	r24, r26
    3582:	88 0f       	add	r24, r24
    3584:	99 1f       	adc	r25, r25
    3586:	8a 0f       	add	r24, r26
    3588:	9b 1f       	adc	r25, r27
    358a:	aa 27       	eor	r26, r26
    358c:	97 fd       	sbrc	r25, 7
    358e:	a0 95       	com	r26
    3590:	ba 2f       	mov	r27, r26
    3592:	28 0f       	add	r18, r24
    3594:	39 1f       	adc	r19, r25
    3596:	4a 1f       	adc	r20, r26
    3598:	5b 1f       	adc	r21, r27
	pwm_left_speed_controller += (signed long int)(delta_left_speed_sum*I_HORIZONTAL);
    359a:	2c 0d       	add	r18, r12
    359c:	3d 1d       	adc	r19, r13
    359e:	4e 1d       	adc	r20, r14
    35a0:	5f 1d       	adc	r21, r15
    35a2:	20 93 05 03 	sts	0x0305, r18
    35a6:	30 93 06 03 	sts	0x0306, r19
    35aa:	40 93 07 03 	sts	0x0307, r20
    35ae:	50 93 08 03 	sts	0x0308, r21

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    35b2:	57 fd       	sbrc	r21, 7
    35b4:	7a c0       	rjmp	.+244    	; 0x36aa <start_horizontal_speed_control_left+0x1f2>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    35b6:	12 16       	cp	r1, r18
    35b8:	13 06       	cpc	r1, r19
    35ba:	14 06       	cpc	r1, r20
    35bc:	15 06       	cpc	r1, r21
    35be:	0c f0       	brlt	.+2      	; 0x35c2 <start_horizontal_speed_control_left+0x10a>
    35c0:	81 c0       	rjmp	.+258    	; 0x36c4 <start_horizontal_speed_control_left+0x20c>
    35c2:	17 fd       	sbrc	r17, 7
    35c4:	ad c0       	rjmp	.+346    	; 0x3720 <start_horizontal_speed_control_left+0x268>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    35c6:	21 3c       	cpi	r18, 0xC1	; 193
    35c8:	8d e5       	ldi	r24, 0x5D	; 93
    35ca:	38 07       	cpc	r19, r24
    35cc:	80 e0       	ldi	r24, 0x00	; 0
    35ce:	48 07       	cpc	r20, r24
    35d0:	80 e0       	ldi	r24, 0x00	; 0
    35d2:	58 07       	cpc	r21, r24
    35d4:	0c f4       	brge	.+2      	; 0x35d8 <start_horizontal_speed_control_left+0x120>
    35d6:	76 c0       	rjmp	.+236    	; 0x36c4 <start_horizontal_speed_control_left+0x20c>
    35d8:	80 ec       	ldi	r24, 0xC0	; 192
    35da:	9d e5       	ldi	r25, 0x5D	; 93
    35dc:	a0 e0       	ldi	r26, 0x00	; 0
    35de:	b0 e0       	ldi	r27, 0x00	; 0
    35e0:	80 93 05 03 	sts	0x0305, r24
    35e4:	90 93 06 03 	sts	0x0306, r25
    35e8:	a0 93 07 03 	sts	0x0307, r26
    35ec:	b0 93 08 03 	sts	0x0308, r27
    35f0:	2c ed       	ldi	r18, 0xDC	; 220
    35f2:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = (signed int)(pwm_left_speed_controller>>4);
    35f4:	31 83       	std	Z+1, r19	; 0x01
    35f6:	20 83       	st	Z, r18

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
    35f8:	80 91 eb 02 	lds	r24, 0x02EB
    35fc:	90 91 ec 02 	lds	r25, 0x02EC
    3600:	18 16       	cp	r1, r24
    3602:	19 06       	cpc	r1, r25
    3604:	0c f0       	brlt	.+2      	; 0x3608 <start_horizontal_speed_control_left+0x150>
    3606:	87 c0       	rjmp	.+270    	; 0x3716 <start_horizontal_speed_control_left+0x25e>
		*pwm_left += 1;
    3608:	2f 5f       	subi	r18, 0xFF	; 255
    360a:	3f 4f       	sbci	r19, 0xFF	; 255
    360c:	31 83       	std	Z+1, r19	; 0x01
    360e:	20 83       	st	Z, r18
	} else {
		*pwm_left -= 1;
	}

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
    3610:	12 16       	cp	r1, r18
    3612:	13 06       	cpc	r1, r19
    3614:	0c f0       	brlt	.+2      	; 0x3618 <start_horizontal_speed_control_left+0x160>
    3616:	6d c0       	rjmp	.+218    	; 0x36f2 <start_horizontal_speed_control_left+0x23a>
		*pwm_left += 30;
    3618:	22 5e       	subi	r18, 0xE2	; 226
    361a:	3f 4f       	sbci	r19, 0xFF	; 255
    361c:	31 83       	std	Z+1, r19	; 0x01
    361e:	20 83       	st	Z, r18
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    3620:	82 e0       	ldi	r24, 0x02	; 2
    3622:	21 30       	cpi	r18, 0x01	; 1
    3624:	38 07       	cpc	r19, r24
    3626:	0c f4       	brge	.+2      	; 0x362a <start_horizontal_speed_control_left+0x172>
    3628:	6c c0       	rjmp	.+216    	; 0x3702 <start_horizontal_speed_control_left+0x24a>
    362a:	80 e0       	ldi	r24, 0x00	; 0
    362c:	92 e0       	ldi	r25, 0x02	; 2
    362e:	91 83       	std	Z+1, r25	; 0x01
    3630:	80 83       	st	Z, r24
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);

}
    3632:	df 91       	pop	r29
    3634:	cf 91       	pop	r28
    3636:	1f 91       	pop	r17
    3638:	0f 91       	pop	r16
    363a:	ff 90       	pop	r15
    363c:	ef 90       	pop	r14
    363e:	df 90       	pop	r13
    3640:	cf 90       	pop	r12
    3642:	08 95       	ret
void start_horizontal_speed_control_left(signed int *pwm_left) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    3644:	10 92 0a 03 	sts	0x030A, r1
    3648:	10 92 09 03 	sts	0x0309, r1
		delta_left_speed_current = 0;
    364c:	10 92 55 05 	sts	0x0555, r1
    3650:	10 92 54 05 	sts	0x0554, r1
		delta_left_speed_prev = 0;
    3654:	10 92 6c 09 	sts	0x096C, r1
    3658:	10 92 6b 09 	sts	0x096B, r1
		return;
    365c:	ea cf       	rjmp	.-44     	; 0x3632 <start_horizontal_speed_control_left+0x17a>
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    365e:	80 ec       	ldi	r24, 0xC0	; 192
    3660:	c8 16       	cp	r12, r24
    3662:	89 ef       	ldi	r24, 0xF9	; 249
    3664:	d8 06       	cpc	r13, r24
    3666:	d4 f4       	brge	.+52     	; 0x369c <start_horizontal_speed_control_left+0x1e4>
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
    3668:	80 ec       	ldi	r24, 0xC0	; 192
    366a:	99 ef       	ldi	r25, 0xF9	; 249
    366c:	90 93 0a 03 	sts	0x030A, r25
    3670:	80 93 09 03 	sts	0x0309, r24
    3674:	60 e8       	ldi	r22, 0x80	; 128
    3676:	c6 2e       	mov	r12, r22
    3678:	63 ef       	ldi	r22, 0xF3	; 243
    367a:	d6 2e       	mov	r13, r22
    367c:	6f ef       	ldi	r22, 0xFF	; 255
    367e:	e6 2e       	mov	r14, r22
    3680:	6f ef       	ldi	r22, 0xFF	; 255
    3682:	f6 2e       	mov	r15, r22
    3684:	5a cf       	rjmp	.-332    	; 0x353a <start_horizontal_speed_control_left+0x82>
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    3686:	a0 91 f1 02 	lds	r26, 0x02F1
    368a:	b0 91 f2 02 	lds	r27, 0x02F2
    368e:	a8 0f       	add	r26, r24
    3690:	b9 1f       	adc	r27, r25
    3692:	b0 93 55 05 	sts	0x0555, r27
    3696:	a0 93 54 05 	sts	0x0554, r26
    369a:	33 cf       	rjmp	.-410    	; 0x3502 <start_horizontal_speed_control_left+0x4a>
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    369c:	cc 0c       	add	r12, r12
    369e:	dd 1c       	adc	r13, r13
    36a0:	ee 24       	eor	r14, r14
    36a2:	d7 fc       	sbrc	r13, 7
    36a4:	e0 94       	com	r14
    36a6:	fe 2c       	mov	r15, r14
    36a8:	48 cf       	rjmp	.-368    	; 0x353a <start_horizontal_speed_control_left+0x82>
	pwm_left_speed_controller += (signed long int)(delta_left_speed_current*P_HORIZONTAL);
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
	pwm_left_speed_controller += (signed long int)(delta_left_speed_sum*I_HORIZONTAL);

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    36aa:	17 fd       	sbrc	r17, 7
    36ac:	0b c0       	rjmp	.+22     	; 0x36c4 <start_horizontal_speed_control_left+0x20c>
		pwm_left_speed_controller = 0;
    36ae:	10 92 05 03 	sts	0x0305, r1
    36b2:	10 92 06 03 	sts	0x0306, r1
    36b6:	10 92 07 03 	sts	0x0307, r1
    36ba:	10 92 08 03 	sts	0x0308, r1
    36be:	20 e0       	ldi	r18, 0x00	; 0
    36c0:	30 e0       	ldi	r19, 0x00	; 0
    36c2:	a9 01       	movw	r20, r18
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    36c4:	20 34       	cpi	r18, 0x40	; 64
    36c6:	82 ea       	ldi	r24, 0xA2	; 162
    36c8:	38 07       	cpc	r19, r24
    36ca:	8f ef       	ldi	r24, 0xFF	; 255
    36cc:	48 07       	cpc	r20, r24
    36ce:	8f ef       	ldi	r24, 0xFF	; 255
    36d0:	58 07       	cpc	r21, r24
    36d2:	8c f5       	brge	.+98     	; 0x3736 <start_horizontal_speed_control_left+0x27e>
    36d4:	80 e4       	ldi	r24, 0x40	; 64
    36d6:	92 ea       	ldi	r25, 0xA2	; 162
    36d8:	af ef       	ldi	r26, 0xFF	; 255
    36da:	bf ef       	ldi	r27, 0xFF	; 255
    36dc:	80 93 05 03 	sts	0x0305, r24
    36e0:	90 93 06 03 	sts	0x0306, r25
    36e4:	a0 93 07 03 	sts	0x0307, r26
    36e8:	b0 93 08 03 	sts	0x0308, r27
    36ec:	24 e2       	ldi	r18, 0x24	; 36
    36ee:	3a ef       	ldi	r19, 0xFA	; 250
    36f0:	81 cf       	rjmp	.-254    	; 0x35f4 <start_horizontal_speed_control_left+0x13c>
	}

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
		*pwm_left += 30;
	} else if(*pwm_left < 0) {
    36f2:	21 15       	cp	r18, r1
    36f4:	31 05       	cpc	r19, r1
    36f6:	09 f4       	brne	.+2      	; 0x36fa <start_horizontal_speed_control_left+0x242>
    36f8:	9c cf       	rjmp	.-200    	; 0x3632 <start_horizontal_speed_control_left+0x17a>
		*pwm_left -= 30;
    36fa:	2e 51       	subi	r18, 0x1E	; 30
    36fc:	30 40       	sbci	r19, 0x00	; 0
    36fe:	31 83       	std	Z+1, r19	; 0x01
    3700:	20 83       	st	Z, r18
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    3702:	8e ef       	ldi	r24, 0xFE	; 254
    3704:	20 30       	cpi	r18, 0x00	; 0
    3706:	38 07       	cpc	r19, r24
    3708:	0c f0       	brlt	.+2      	; 0x370c <start_horizontal_speed_control_left+0x254>
    370a:	93 cf       	rjmp	.-218    	; 0x3632 <start_horizontal_speed_control_left+0x17a>
    370c:	80 e0       	ldi	r24, 0x00	; 0
    370e:	9e ef       	ldi	r25, 0xFE	; 254
    3710:	91 83       	std	Z+1, r25	; 0x01
    3712:	80 83       	st	Z, r24
    3714:	8e cf       	rjmp	.-228    	; 0x3632 <start_horizontal_speed_control_left+0x17a>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
		*pwm_left += 1;
	} else {
		*pwm_left -= 1;
    3716:	21 50       	subi	r18, 0x01	; 1
    3718:	30 40       	sbci	r19, 0x00	; 0
    371a:	31 83       	std	Z+1, r19	; 0x01
    371c:	20 83       	st	Z, r18
    371e:	78 cf       	rjmp	.-272    	; 0x3610 <start_horizontal_speed_control_left+0x158>
	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    3720:	10 92 05 03 	sts	0x0305, r1
    3724:	10 92 06 03 	sts	0x0306, r1
    3728:	10 92 07 03 	sts	0x0307, r1
    372c:	10 92 08 03 	sts	0x0308, r1
    3730:	20 e0       	ldi	r18, 0x00	; 0
    3732:	30 e0       	ldi	r19, 0x00	; 0
    3734:	a9 01       	movw	r20, r18
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    3736:	04 e0       	ldi	r16, 0x04	; 4
    3738:	55 95       	asr	r21
    373a:	47 95       	ror	r20
    373c:	37 95       	ror	r19
    373e:	27 95       	ror	r18
    3740:	0a 95       	dec	r16
    3742:	d1 f7       	brne	.-12     	; 0x3738 <start_horizontal_speed_control_left+0x280>
    3744:	57 cf       	rjmp	.-338    	; 0x35f4 <start_horizontal_speed_control_left+0x13c>

00003746 <initPortsIO>:
#include "ports_io.h"


void initPortsIO(void) {

	MCUCR |= (1 << PUD);	// pull-up disable for all ports
    3746:	85 b7       	in	r24, 0x35	; 53
    3748:	80 61       	ori	r24, 0x10	; 16
    374a:	85 bf       	out	0x35, r24	; 53

	DDRA = 0xFF;			// proximity pulses as output
    374c:	8f ef       	ldi	r24, 0xFF	; 255
    374e:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;			// proximity pulses turned off
    3750:	12 b8       	out	0x02, r1	; 2
	
	DDRB = 0xF7;			// pwm for led r/g/b as output; CE, MOSI, SCK, SS as output (master) 
    3752:	97 ef       	ldi	r25, 0xF7	; 247
    3754:	94 b9       	out	0x04, r25	; 4
	PORTB = 0xE0;			// r,g,b leds turned off on high state
    3756:	90 ee       	ldi	r25, 0xE0	; 224
    3758:	95 b9       	out	0x05, r25	; 5

	DDRC = 0xF0;			// selector as input; IR leds as output; sens-enable, sleep as output
    375a:	90 ef       	ldi	r25, 0xF0	; 240
    375c:	97 b9       	out	0x07, r25	; 7
	PORTC = 0xB0;			// sleep = 1 (no sleep), sense_enable=0, IR leds = 1
    375e:	90 eb       	ldi	r25, 0xB0	; 176
    3760:	98 b9       	out	0x08, r25	; 8

	DDRD = 0xFC;			// all pins to output; when usart and i2c peripherals are activated they change the pins direction accordingly
    3762:	9c ef       	ldi	r25, 0xFC	; 252
    3764:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0x03;			// default for unused pins is 0
    3766:	93 e0       	ldi	r25, 0x03	; 3
    3768:	9b b9       	out	0x0b, r25	; 11

	DDRE = 0xFF;			// all pins to output (pwm and dir for motor right as output; when usart is activated it changes the pins direction accordingly)
    376a:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    376c:	1e b8       	out	0x0e, r1	; 14

	DDRF = 0x00;			// adc channel pins as input		
    376e:	10 ba       	out	0x10, r1	; 16

	DDRG = 0xFF;			// unused pins as output
    3770:	83 bb       	out	0x13, r24	; 19
	if(hardwareRevision == HW_REV_3_0) {
    3772:	80 91 4f 04 	lds	r24, 0x044F
    3776:	88 23       	and	r24, r24
    3778:	e1 f0       	breq	.+56     	; 0x37b2 <initPortsIO+0x6c>
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    377a:	81 30       	cpi	r24, 0x01	; 1
    377c:	d1 f0       	breq	.+52     	; 0x37b2 <initPortsIO+0x6c>
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    377e:	82 30       	cpi	r24, 0x02	; 2
    3780:	51 f1       	breq	.+84     	; 0x37d6 <initPortsIO+0x90>
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
	}	

	DDRH = 0xFF;			// all pins to output; when usart is activated it changes the pins direction accordingly
    3782:	9f ef       	ldi	r25, 0xFF	; 255
    3784:	90 93 01 01 	sts	0x0101, r25
	PORTH = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    3788:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
    378c:	9f e0       	ldi	r25, 0x0F	; 15
    378e:	90 93 04 01 	sts	0x0104, r25
	if(hardwareRevision == HW_REV_3_0) {
    3792:	88 23       	and	r24, r24
    3794:	a9 f4       	brne	.+42     	; 0x37c0 <initPortsIO+0x7a>
		PORTJ &= 0x00;		// cliff pulse turned off
    3796:	90 91 05 01 	lds	r25, 0x0105
    379a:	10 92 05 01 	sts	0x0105, r1
	if(hardwareRevision == HW_REV_3_1) {
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.1)"
	}	

	DDRK = 0x00;			// adc channel pins as input
    379e:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;			// all pins to output
    37a2:	9f ef       	ldi	r25, 0xFF	; 255
    37a4:	90 93 0a 01 	sts	0x010A, r25
	if(hardwareRevision == HW_REV_3_0) {
    37a8:	88 23       	and	r24, r24
    37aa:	29 f4       	brne	.+10     	; 0x37b6 <initPortsIO+0x70>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
    37ac:	10 92 0b 01 	sts	0x010B, r1
    37b0:	08 95       	ret
	DDRG = 0xFF;			// unused pins as output
	if(hardwareRevision == HW_REV_3_0) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
    37b2:	14 ba       	out	0x14, r1	; 20
    37b4:	e6 cf       	rjmp	.-52     	; 0x3782 <initPortsIO+0x3c>

	DDRL = 0xFF;			// all pins to output
	if(hardwareRevision == HW_REV_3_0) {
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
    37b6:	81 30       	cpi	r24, 0x01	; 1
    37b8:	c9 f3       	breq	.-14     	; 0x37ac <initPortsIO+0x66>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    37ba:	82 30       	cpi	r24, 0x02	; 2
    37bc:	41 f0       	breq	.+16     	; 0x37ce <initPortsIO+0x88>
    37be:	08 95       	ret
	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
	if(hardwareRevision == HW_REV_3_0) {
		PORTJ &= 0x00;		// cliff pulse turned off
		//#warning "Normal logic for ground sensors (hw rev 3.0)"
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    37c0:	81 30       	cpi	r24, 0x01	; 1
    37c2:	11 f0       	breq	.+4      	; 0x37c8 <initPortsIO+0x82>
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.0.1)"
	}
	if(hardwareRevision == HW_REV_3_1) {
    37c4:	82 30       	cpi	r24, 0x02	; 2
    37c6:	59 f7       	brne	.-42     	; 0x379e <initPortsIO+0x58>
		PORTJ = 0x0F;
    37c8:	90 93 05 01 	sts	0x0105, r25
    37cc:	e8 cf       	rjmp	.-48     	; 0x379e <initPortsIO+0x58>
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTL = 0xF7;		// pwm (unused) to 0, leds turned off on high state
    37ce:	87 ef       	ldi	r24, 0xF7	; 247
    37d0:	80 93 0b 01 	sts	0x010B, r24
    37d4:	08 95       	ret
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
    37d6:	98 e0       	ldi	r25, 0x08	; 8
    37d8:	94 bb       	out	0x14, r25	; 20
    37da:	d3 cf       	rjmp	.-90     	; 0x3782 <initPortsIO+0x3c>

000037dc <i2c_close>:

/* I2C clock in Hz */
#define SCL_CLOCK  440000L

void i2c_close() {
	TWBR = 0x00;
    37dc:	10 92 b8 00 	sts	0x00B8, r1
	TWCR = 0x00;
    37e0:	10 92 bc 00 	sts	0x00BC, r1
}
    37e4:	08 95       	ret

000037e6 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
    sbi(PORTD, 0);
    37e6:	58 9a       	sbi	0x0b, 0	; 11
    sbi(PORTD, 1);
    37e8:	59 9a       	sbi	0x0b, 1	; 11

  TWSR = 0;                         /* no prescaler */
    37ea:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    37ee:	81 e0       	ldi	r24, 0x01	; 1
    37f0:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
    37f4:	08 95       	ret

000037f6 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    37f6:	94 ea       	ldi	r25, 0xA4	; 164
    37f8:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    37fc:	90 91 bc 00 	lds	r25, 0x00BC
    3800:	97 ff       	sbrs	r25, 7
    3802:	fc cf       	rjmp	.-8      	; 0x37fc <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    3804:	90 91 b9 00 	lds	r25, 0x00B9
    3808:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    380a:	98 30       	cpi	r25, 0x08	; 8
    380c:	21 f0       	breq	.+8      	; 0x3816 <i2c_start+0x20>
    380e:	90 31       	cpi	r25, 0x10	; 16
    3810:	11 f0       	breq	.+4      	; 0x3816 <i2c_start+0x20>
		//usartTransmit(twst);
		return 1;
    3812:	81 e0       	ldi	r24, 0x01	; 1
    3814:	08 95       	ret
	}

	// send device address
	TWDR = address;
    3816:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    381a:	84 e8       	ldi	r24, 0x84	; 132
    381c:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    3820:	80 91 bc 00 	lds	r24, 0x00BC
    3824:	87 ff       	sbrs	r24, 7
    3826:	fc cf       	rjmp	.-8      	; 0x3820 <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    3828:	90 91 b9 00 	lds	r25, 0x00B9
    382c:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    382e:	98 31       	cpi	r25, 0x18	; 24
    3830:	21 f0       	breq	.+8      	; 0x383a <i2c_start+0x44>

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    3832:	81 e0       	ldi	r24, 0x01	; 1
    3834:	90 34       	cpi	r25, 0x40	; 64
    3836:	19 f0       	breq	.+6      	; 0x383e <i2c_start+0x48>
		return 1;
	}

	return 0;

}/* i2c_start */
    3838:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    383a:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    383c:	08 95       	ret

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    383e:	80 e0       	ldi	r24, 0x00	; 0
    3840:	08 95       	ret

00003842 <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    3842:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    3844:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    3846:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    3848:	20 93 bc 00 	sts	0x00BC, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    384c:	90 91 bc 00 	lds	r25, 0x00BC
    3850:	97 ff       	sbrs	r25, 7
    3852:	fc cf       	rjmp	.-8      	; 0x384c <i2c_start_wait+0xa>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    3854:	90 91 b9 00 	lds	r25, 0x00B9
    3858:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    385a:	98 30       	cpi	r25, 0x08	; 8
    385c:	11 f0       	breq	.+4      	; 0x3862 <i2c_start_wait+0x20>
    385e:	90 31       	cpi	r25, 0x10	; 16
    3860:	99 f7       	brne	.-26     	; 0x3848 <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    3862:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    3866:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    386a:	90 91 bc 00 	lds	r25, 0x00BC
    386e:	97 ff       	sbrs	r25, 7
    3870:	fc cf       	rjmp	.-8      	; 0x386a <i2c_start_wait+0x28>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    3872:	90 91 b9 00 	lds	r25, 0x00B9
    3876:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    3878:	90 32       	cpi	r25, 0x20	; 32
    387a:	19 f0       	breq	.+6      	; 0x3882 <i2c_start_wait+0x40>
    387c:	98 35       	cpi	r25, 0x58	; 88
    387e:	09 f0       	breq	.+2      	; 0x3882 <i2c_start_wait+0x40>
    3880:	08 95       	ret
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    3882:	40 93 bc 00 	sts	0x00BC, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    3886:	90 91 bc 00 	lds	r25, 0x00BC
    388a:	94 fd       	sbrc	r25, 4
    388c:	fc cf       	rjmp	.-8      	; 0x3886 <i2c_start_wait+0x44>
    388e:	dc cf       	rjmp	.-72     	; 0x3848 <i2c_start_wait+0x6>

00003890 <i2c_rep_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    3890:	94 ea       	ldi	r25, 0xA4	; 164
    3892:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    3896:	90 91 bc 00 	lds	r25, 0x00BC
    389a:	97 ff       	sbrs	r25, 7
    389c:	fc cf       	rjmp	.-8      	; 0x3896 <i2c_rep_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    389e:	90 91 b9 00 	lds	r25, 0x00B9
    38a2:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    38a4:	98 30       	cpi	r25, 0x08	; 8
    38a6:	21 f0       	breq	.+8      	; 0x38b0 <i2c_rep_start+0x20>
    38a8:	90 31       	cpi	r25, 0x10	; 16
    38aa:	11 f0       	breq	.+4      	; 0x38b0 <i2c_rep_start+0x20>
		//usartTransmit(twst);
		return 1;
    38ac:	81 e0       	ldi	r24, 0x01	; 1
    38ae:	08 95       	ret
	}

	// send device address
	TWDR = address;
    38b0:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    38b4:	84 e8       	ldi	r24, 0x84	; 132
    38b6:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    38ba:	80 91 bc 00 	lds	r24, 0x00BC
    38be:	87 ff       	sbrs	r24, 7
    38c0:	fc cf       	rjmp	.-8      	; 0x38ba <i2c_rep_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    38c2:	90 91 b9 00 	lds	r25, 0x00B9
    38c6:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    38c8:	98 31       	cpi	r25, 0x18	; 24
    38ca:	21 f0       	breq	.+8      	; 0x38d4 <i2c_rep_start+0x44>
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    38cc:	81 e0       	ldi	r24, 0x01	; 1
    38ce:	90 34       	cpi	r25, 0x40	; 64
    38d0:	19 f0       	breq	.+6      	; 0x38d8 <i2c_rep_start+0x48>
{
    return i2c_start( address );

}/* i2c_rep_start */
    38d2:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    38d4:	80 e0       	ldi	r24, 0x00	; 0
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    38d6:	08 95       	ret
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    38d8:	80 e0       	ldi	r24, 0x00	; 0
    38da:	08 95       	ret

000038dc <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    38dc:	84 e9       	ldi	r24, 0x94	; 148
    38de:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    38e2:	80 91 bc 00 	lds	r24, 0x00BC
    38e6:	84 fd       	sbrc	r24, 4
    38e8:	fc cf       	rjmp	.-8      	; 0x38e2 <i2c_stop+0x6>

}/* i2c_stop */
    38ea:	08 95       	ret

000038ec <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    38ec:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    38f0:	84 e8       	ldi	r24, 0x84	; 132
    38f2:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    38f6:	80 91 bc 00 	lds	r24, 0x00BC
    38fa:	87 ff       	sbrs	r24, 7
    38fc:	fc cf       	rjmp	.-8      	; 0x38f6 <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    38fe:	90 91 b9 00 	lds	r25, 0x00B9
    3902:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    3904:	81 e0       	ldi	r24, 0x01	; 1
    3906:	98 32       	cpi	r25, 0x28	; 40
    3908:	09 f0       	breq	.+2      	; 0x390c <i2c_write+0x20>
	return 0;

}/* i2c_write */
    390a:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
    390c:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
    390e:	08 95       	ret

00003910 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    3910:	84 ec       	ldi	r24, 0xC4	; 196
    3912:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    3916:	80 91 bc 00 	lds	r24, 0x00BC
    391a:	87 ff       	sbrs	r24, 7
    391c:	fc cf       	rjmp	.-8      	; 0x3916 <i2c_readAck+0x6>

    return TWDR;
    391e:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    3922:	08 95       	ret

00003924 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    3924:	84 e8       	ldi	r24, 0x84	; 132
    3926:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    392a:	80 91 bc 00 	lds	r24, 0x00BC
    392e:	87 ff       	sbrs	r24, 7
    3930:	fc cf       	rjmp	.-8      	; 0x392a <i2c_readNak+0x6>
	
    return TWDR;
    3932:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    3936:	08 95       	ret

00003938 <initUsart0>:
	// @38400 baud: 8000000/16/38400-1 = 12 => 8000000/16/13 = 38461 => 100-(38400/38461*100)=0.15% of error
	// Double speed mode:
	// @57600 baud: 8000000/8/57600-1 = 16 => 8000000/8/17 = 58823 => 100-(57600/58823*100)=2.08% of error	


	UBRR0H = 0;												// set baudrate
    3938:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 16;
    393c:	80 e1       	ldi	r24, 0x10	; 16
    393e:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0A  |= (1 << U2X0);									// enable double speed
    3942:	e0 ec       	ldi	r30, 0xC0	; 192
    3944:	f0 e0       	ldi	r31, 0x00	; 0
    3946:	80 81       	ld	r24, Z
    3948:	82 60       	ori	r24, 0x02	; 2
    394a:	80 83       	st	Z, r24
	//UCSR0A &= ~(1 << U2X0);
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);	// enable uart0 transmitter and receiver; enable rx interrupt for use with aseba
    394c:	e1 ec       	ldi	r30, 0xC1	; 193
    394e:	f0 e0       	ldi	r31, 0x00	; 0
    3950:	80 81       	ld	r24, Z
    3952:	88 69       	ori	r24, 0x98	; 152
    3954:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);					// set frame format: 8-bit data, no parity, 1 stop bit
    3956:	e2 ec       	ldi	r30, 0xC2	; 194
    3958:	f0 e0       	ldi	r31, 0x00	; 0
    395a:	80 81       	ld	r24, Z
    395c:	86 60       	ori	r24, 0x06	; 6
    395e:	80 83       	st	Z, r24



}
    3960:	08 95       	ret

00003962 <initUsart1>:

void initUsart1() {

	UBRR1H = 0;												// set baudrate
    3962:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = 16;
    3966:	80 e1       	ldi	r24, 0x10	; 16
    3968:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1A  |= (1 << U2X1);									// enable double speed
    396c:	e8 ec       	ldi	r30, 0xC8	; 200
    396e:	f0 e0       	ldi	r31, 0x00	; 0
    3970:	80 81       	ld	r24, Z
    3972:	82 60       	ori	r24, 0x02	; 2
    3974:	80 83       	st	Z, r24
	//UCSR0A &= ~(1 << U2X1);
	UCSR1B |= (1 << TXEN1) | (1 << RXEN1);					// enable uart0 transmitter and receiver
    3976:	e9 ec       	ldi	r30, 0xC9	; 201
    3978:	f0 e0       	ldi	r31, 0x00	; 0
    397a:	80 81       	ld	r24, Z
    397c:	88 61       	ori	r24, 0x18	; 24
    397e:	80 83       	st	Z, r24
	UCSR1C |= (1<<UCSZ11) | (1<<UCSZ10);					// set frame format: 8-bit data, no parity, 1 stop bit
    3980:	ea ec       	ldi	r30, 0xCA	; 202
    3982:	f0 e0       	ldi	r31, 0x00	; 0
    3984:	80 81       	ld	r24, Z
    3986:	86 60       	ori	r24, 0x06	; 6
    3988:	80 83       	st	Z, r24

}
    398a:	08 95       	ret

0000398c <closeUsart>:

void closeUsart() {

	UCSR0A = 0x00;	// clear all usart registers
    398c:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0x00;
    3990:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 0x00;
    3994:	10 92 c2 00 	sts	0x00C2, r1

}
    3998:	08 95       	ret

0000399a <usart0Transmit>:

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    399a:	90 91 c0 00 	lds	r25, 0x00C0
    399e:	95 ff       	sbrs	r25, 5
    39a0:	fc cf       	rjmp	.-8      	; 0x399a <usart0Transmit>
	UDR0 = data;						// put data into buffer, sends the data
    39a2:	80 93 c6 00 	sts	0x00C6, r24
	if(isBlocking) {
    39a6:	66 23       	and	r22, r22
    39a8:	21 f0       	breq	.+8      	; 0x39b2 <usart0Transmit+0x18>
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    39aa:	80 91 c0 00 	lds	r24, 0x00C0
    39ae:	86 ff       	sbrs	r24, 6
    39b0:	fc cf       	rjmp	.-8      	; 0x39aa <usart0Transmit+0x10>
    39b2:	08 95       	ret

000039b4 <usart1Transmit>:
	}
}

void usart1Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR1A & (1<<UDRE1)));		// wait for empty transmit buffer
    39b4:	90 91 c8 00 	lds	r25, 0x00C8
    39b8:	95 ff       	sbrs	r25, 5
    39ba:	fc cf       	rjmp	.-8      	; 0x39b4 <usart1Transmit>
	UDR1 = data;						// put data into buffer, sends the data
    39bc:	80 93 ce 00 	sts	0x00CE, r24
	if(isBlocking) {
    39c0:	66 23       	and	r22, r22
    39c2:	21 f0       	breq	.+8      	; 0x39cc <usart1Transmit+0x18>
		while (!(UCSR1A & (1<<TXC1)));	// wait transmission complete
    39c4:	80 91 c8 00 	lds	r24, 0x00C8
    39c8:	86 ff       	sbrs	r24, 6
    39ca:	fc cf       	rjmp	.-8      	; 0x39c4 <usart1Transmit+0x10>
    39cc:	08 95       	ret

000039ce <usart0InputBufferEmpty>:

}

char usart0InputBufferEmpty() {

	if(UCSR0A & (1<<RXC0)) {	// something received
    39ce:	80 91 c0 00 	lds	r24, 0x00C0
		return 0;
    39d2:	80 95       	com	r24
	} else {
		return 1;
	}

}
    39d4:	88 1f       	adc	r24, r24
    39d6:	88 27       	eor	r24, r24
    39d8:	88 1f       	adc	r24, r24
    39da:	08 95       	ret

000039dc <usart0Receive>:

unsigned char usart0Receive() {

	unsigned int i=0;

	while(usart0InputBufferEmpty()) {
    39dc:	87 e9       	ldi	r24, 0x97	; 151
    39de:	90 e0       	ldi	r25, 0x00	; 0

}

char usart0InputBufferEmpty() {

	if(UCSR0A & (1<<RXC0)) {	// something received
    39e0:	20 91 c0 00 	lds	r18, 0x00C0
    39e4:	27 fd       	sbrc	r18, 7
    39e6:	07 c0       	rjmp	.+14     	; 0x39f6 <usart0Receive+0x1a>
			commError = 1;
			return 0;				// timeout
		}
	}								// wait for data to be received

	return UDR0;					// get and return received data from buffer
    39e8:	01 97       	sbiw	r24, 0x01	; 1

	unsigned int i=0;

	while(usart0InputBufferEmpty()) {
		i++;
		if(i>150) {
    39ea:	d1 f7       	brne	.-12     	; 0x39e0 <usart0Receive+0x4>
			/*
			if(UCSR0A & (1<<3)) {	// overflow flag
			}
			*/
			commError = 1;
    39ec:	81 e0       	ldi	r24, 0x01	; 1
    39ee:	80 93 1e 03 	sts	0x031E, r24
			return 0;				// timeout
    39f2:	80 e0       	ldi	r24, 0x00	; 0
    39f4:	08 95       	ret
		}
	}								// wait for data to be received

	return UDR0;					// get and return received data from buffer
    39f6:	80 91 c6 00 	lds	r24, 0x00C6

}
    39fa:	08 95       	ret

000039fc <__vector_25>:
		}
	}
}
*/

ISR(USART0_RX_vect) {
    39fc:	1f 92       	push	r1
    39fe:	0f 92       	push	r0
    3a00:	0f b6       	in	r0, 0x3f	; 63
    3a02:	0f 92       	push	r0
    3a04:	0b b6       	in	r0, 0x3b	; 59
    3a06:	0f 92       	push	r0
    3a08:	11 24       	eor	r1, r1
    3a0a:	2f 93       	push	r18
    3a0c:	3f 93       	push	r19
    3a0e:	4f 93       	push	r20
    3a10:	5f 93       	push	r21
    3a12:	6f 93       	push	r22
    3a14:	7f 93       	push	r23
    3a16:	8f 93       	push	r24
    3a18:	9f 93       	push	r25
    3a1a:	af 93       	push	r26
    3a1c:	bf 93       	push	r27
    3a1e:	ef 93       	push	r30
    3a20:	ff 93       	push	r31

	char receivedByte = UDR0;
    3a22:	90 91 c6 00 	lds	r25, 0x00C6


	if(currentSelector==14) {
    3a26:	80 91 4c 04 	lds	r24, 0x044C
    3a2a:	8e 30       	cpi	r24, 0x0E	; 14
    3a2c:	09 f4       	brne	.+2      	; 0x3a30 <__vector_25+0x34>
    3a2e:	3f c0       	rjmp	.+126    	; 0x3aae <__vector_25+0xb2>
		if(receivedByte == 0xAA) {
			irCommSendValues = 1;
		}
	} else if(currentSelector==15) {
    3a30:	8f 30       	cpi	r24, 0x0F	; 15
    3a32:	09 f4       	brne	.+2      	; 0x3a36 <__vector_25+0x3a>
    3a34:	42 c0       	rjmp	.+132    	; 0x3aba <__vector_25+0xbe>
			eeprom_write_byte((uint8_t*) 4093, currentOsccal); 
		}

	} else {

		if(chooseMenu) {
    3a36:	80 91 11 02 	lds	r24, 0x0211
    3a3a:	88 23       	and	r24, r24
    3a3c:	09 f5       	brne	.+66     	; 0x3a80 <__vector_25+0x84>
			chooseMenu = 0;
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
    3a3e:	80 91 23 04 	lds	r24, 0x0423
    3a42:	81 30       	cpi	r24, 0x01	; 1
    3a44:	09 f4       	brne	.+2      	; 0x3a48 <__vector_25+0x4c>
    3a46:	65 c0       	rjmp	.+202    	; 0x3b12 <__vector_25+0x116>
    3a48:	82 30       	cpi	r24, 0x02	; 2
    3a4a:	f1 f4       	brne	.+60     	; 0x3a88 <__vector_25+0x8c>
						menuChoice = 0;
					}
					break;

				case 2:	// address writing in eeprom
					if(menuState == 0) { // receive rf address LSB:
    3a4c:	40 91 25 04 	lds	r20, 0x0425
    3a50:	44 23       	and	r20, r20
    3a52:	09 f4       	brne	.+2      	; 0x3a56 <__vector_25+0x5a>
    3a54:	74 c0       	rjmp	.+232    	; 0x3b3e <__vector_25+0x142>
						rfAddress = (unsigned int)receivedByte&0x00FF;
						menuState = 1;
					} else if(menuState == 1) { // receive rf address MSB
    3a56:	41 30       	cpi	r20, 0x01	; 1
    3a58:	b9 f4       	brne	.+46     	; 0x3a88 <__vector_25+0x8c>
						rfAddress |= ((unsigned int)receivedByte<<8);
    3a5a:	39 2f       	mov	r19, r25
    3a5c:	20 e0       	ldi	r18, 0x00	; 0
    3a5e:	80 91 15 03 	lds	r24, 0x0315
    3a62:	90 91 16 03 	lds	r25, 0x0316
    3a66:	82 2b       	or	r24, r18
    3a68:	93 2b       	or	r25, r19
    3a6a:	90 93 16 03 	sts	0x0316, r25
    3a6e:	80 93 15 03 	sts	0x0315, r24
						addressReceived = 1;
    3a72:	40 93 24 04 	sts	0x0424, r20
						menuState = 0;
    3a76:	10 92 25 04 	sts	0x0425, r1
						chooseMenu = 1;
    3a7a:	40 93 11 02 	sts	0x0211, r20
    3a7e:	04 c0       	rjmp	.+8      	; 0x3a88 <__vector_25+0x8c>
		}

	} else {

		if(chooseMenu) {
			chooseMenu = 0;
    3a80:	10 92 11 02 	sts	0x0211, r1
			menuChoice = receivedByte;
    3a84:	90 93 23 04 	sts	0x0423, r25
			}
		}

	}

}
    3a88:	ff 91       	pop	r31
    3a8a:	ef 91       	pop	r30
    3a8c:	bf 91       	pop	r27
    3a8e:	af 91       	pop	r26
    3a90:	9f 91       	pop	r25
    3a92:	8f 91       	pop	r24
    3a94:	7f 91       	pop	r23
    3a96:	6f 91       	pop	r22
    3a98:	5f 91       	pop	r21
    3a9a:	4f 91       	pop	r20
    3a9c:	3f 91       	pop	r19
    3a9e:	2f 91       	pop	r18
    3aa0:	0f 90       	pop	r0
    3aa2:	0b be       	out	0x3b, r0	; 59
    3aa4:	0f 90       	pop	r0
    3aa6:	0f be       	out	0x3f, r0	; 63
    3aa8:	0f 90       	pop	r0
    3aaa:	1f 90       	pop	r1
    3aac:	18 95       	reti

	char receivedByte = UDR0;


	if(currentSelector==14) {
		if(receivedByte == 0xAA) {
    3aae:	9a 3a       	cpi	r25, 0xAA	; 170
    3ab0:	59 f7       	brne	.-42     	; 0x3a88 <__vector_25+0x8c>
			irCommSendValues = 1;
    3ab2:	81 e0       	ldi	r24, 0x01	; 1
    3ab4:	80 93 ca 04 	sts	0x04CA, r24
    3ab8:	e7 cf       	rjmp	.-50     	; 0x3a88 <__vector_25+0x8c>
		}
	} else if(currentSelector==15) {

		if(receivedByte == '+') {
    3aba:	9b 32       	cpi	r25, 0x2B	; 43
    3abc:	01 f1       	breq	.+64     	; 0x3afe <__vector_25+0x102>
				currentOsccal++;
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
    3abe:	9d 32       	cpi	r25, 0x2D	; 45
    3ac0:	91 f1       	breq	.+100    	; 0x3b26 <__vector_25+0x12a>
				currentOsccal--;	
			}
			OSCCAL = currentOsccal;;
		}

		if(receivedByte == 'g') {
    3ac2:	97 36       	cpi	r25, 0x67	; 103
    3ac4:	09 f0       	breq	.+2      	; 0x3ac8 <__vector_25+0xcc>
    3ac6:	43 c0       	rjmp	.+134    	; 0x3b4e <__vector_25+0x152>
			usart0Transmit(irCommand,1);
    3ac8:	90 91 27 04 	lds	r25, 0x0427

}

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    3acc:	80 91 c0 00 	lds	r24, 0x00C0
    3ad0:	85 ff       	sbrs	r24, 5
    3ad2:	fc cf       	rjmp	.-8      	; 0x3acc <__vector_25+0xd0>
	UDR0 = data;						// put data into buffer, sends the data
    3ad4:	90 93 c6 00 	sts	0x00C6, r25
	if(isBlocking) {
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    3ad8:	80 91 c0 00 	lds	r24, 0x00C0
    3adc:	86 ff       	sbrs	r24, 6
    3ade:	fc cf       	rjmp	.-8      	; 0x3ad8 <__vector_25+0xdc>
			OSCCAL = currentOsccal;;
		}

		if(receivedByte == 'g') {
			usart0Transmit(irCommand,1);
			currentOsccal = OSCCAL;
    3ae0:	90 91 66 00 	lds	r25, 0x0066
    3ae4:	90 93 31 05 	sts	0x0531, r25

}

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    3ae8:	80 91 c0 00 	lds	r24, 0x00C0
    3aec:	85 ff       	sbrs	r24, 5
    3aee:	fc cf       	rjmp	.-8      	; 0x3ae8 <__vector_25+0xec>
	UDR0 = data;						// put data into buffer, sends the data
    3af0:	90 93 c6 00 	sts	0x00C6, r25
	if(isBlocking) {
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    3af4:	80 91 c0 00 	lds	r24, 0x00C0
    3af8:	86 ff       	sbrs	r24, 6
    3afa:	fc cf       	rjmp	.-8      	; 0x3af4 <__vector_25+0xf8>
    3afc:	c5 cf       	rjmp	.-118    	; 0x3a88 <__vector_25+0x8c>
			irCommSendValues = 1;
		}
	} else if(currentSelector==15) {

		if(receivedByte == '+') {
			if(currentOsccal<255) {
    3afe:	80 91 31 05 	lds	r24, 0x0531
    3b02:	8f 3f       	cpi	r24, 0xFF	; 255
    3b04:	d1 f0       	breq	.+52     	; 0x3b3a <__vector_25+0x13e>
				currentOsccal++;
    3b06:	8f 5f       	subi	r24, 0xFF	; 255
    3b08:	80 93 31 05 	sts	0x0531, r24

		if(receivedByte == '-') {
			if(currentOsccal>0) {
				currentOsccal--;	
			}
			OSCCAL = currentOsccal;;
    3b0c:	80 93 66 00 	sts	0x0066, r24
    3b10:	bb cf       	rjmp	.-138    	; 0x3a88 <__vector_25+0x8c>
			chooseMenu = 0;
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
				case 1: // send sensors data and activate actuators
					if(receivedByte == 0xAA) {
    3b12:	9a 3a       	cpi	r25, 0xAA	; 170
    3b14:	31 f1       	breq	.+76     	; 0x3b62 <__vector_25+0x166>
						getDataNow = 1;
					} else if(receivedByte == 0x55) {
    3b16:	95 35       	cpi	r25, 0x55	; 85
    3b18:	09 f0       	breq	.+2      	; 0x3b1c <__vector_25+0x120>
    3b1a:	b6 cf       	rjmp	.-148    	; 0x3a88 <__vector_25+0x8c>
						chooseMenu = 1;
    3b1c:	80 93 11 02 	sts	0x0211, r24
						menuChoice = 0;
    3b20:	10 92 23 04 	sts	0x0423, r1
    3b24:	b1 cf       	rjmp	.-158    	; 0x3a88 <__vector_25+0x8c>
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
			if(currentOsccal>0) {
    3b26:	80 91 31 05 	lds	r24, 0x0531
    3b2a:	88 23       	and	r24, r24
    3b2c:	21 f0       	breq	.+8      	; 0x3b36 <__vector_25+0x13a>
				currentOsccal--;	
    3b2e:	81 50       	subi	r24, 0x01	; 1
    3b30:	80 93 31 05 	sts	0x0531, r24
    3b34:	eb cf       	rjmp	.-42     	; 0x3b0c <__vector_25+0x110>
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
			if(currentOsccal>0) {
    3b36:	80 e0       	ldi	r24, 0x00	; 0
    3b38:	e9 cf       	rjmp	.-46     	; 0x3b0c <__vector_25+0x110>
			irCommSendValues = 1;
		}
	} else if(currentSelector==15) {

		if(receivedByte == '+') {
			if(currentOsccal<255) {
    3b3a:	8f ef       	ldi	r24, 0xFF	; 255
    3b3c:	e7 cf       	rjmp	.-50     	; 0x3b0c <__vector_25+0x110>
					}
					break;

				case 2:	// address writing in eeprom
					if(menuState == 0) { // receive rf address LSB:
						rfAddress = (unsigned int)receivedByte&0x00FF;
    3b3e:	90 93 15 03 	sts	0x0315, r25
    3b42:	10 92 16 03 	sts	0x0316, r1
						menuState = 1;
    3b46:	81 e0       	ldi	r24, 0x01	; 1
    3b48:	80 93 25 04 	sts	0x0425, r24
    3b4c:	9d cf       	rjmp	.-198    	; 0x3a88 <__vector_25+0x8c>
			usart0Transmit(irCommand,1);
			currentOsccal = OSCCAL;
			usart0Transmit(currentOsccal,1);
		}

		if(receivedByte == 's') {
    3b4e:	93 37       	cpi	r25, 0x73	; 115
    3b50:	09 f0       	breq	.+2      	; 0x3b54 <__vector_25+0x158>
    3b52:	9a cf       	rjmp	.-204    	; 0x3a88 <__vector_25+0x8c>
			eeprom_write_byte((uint8_t*) 4093, currentOsccal); 
    3b54:	8d ef       	ldi	r24, 0xFD	; 253
    3b56:	9f e0       	ldi	r25, 0x0F	; 15
    3b58:	60 91 31 05 	lds	r22, 0x0531
    3b5c:	0e 94 a1 52 	call	0xa542	; 0xa542 <__eewr_byte_m2560>
    3b60:	93 cf       	rjmp	.-218    	; 0x3a88 <__vector_25+0x8c>
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
				case 1: // send sensors data and activate actuators
					if(receivedByte == 0xAA) {
						getDataNow = 1;
    3b62:	80 93 26 04 	sts	0x0426, r24
    3b66:	90 cf       	rjmp	.-224    	; 0x3a88 <__vector_25+0x8c>

00003b68 <getSelector>:

#include "utility.h"

unsigned char getSelector() {
   return (SEL0) + 2*(SEL1) + 4*(SEL2) + 8*(SEL3);
    3b68:	86 b1       	in	r24, 0x06	; 6
    3b6a:	66 b1       	in	r22, 0x06	; 6
    3b6c:	26 b1       	in	r18, 0x06	; 6
    3b6e:	46 b1       	in	r20, 0x06	; 6
    3b70:	30 e0       	ldi	r19, 0x00	; 0
    3b72:	28 70       	andi	r18, 0x08	; 8
    3b74:	30 70       	andi	r19, 0x00	; 0
    3b76:	35 95       	asr	r19
    3b78:	27 95       	ror	r18
    3b7a:	35 95       	asr	r19
    3b7c:	27 95       	ror	r18
    3b7e:	35 95       	asr	r19
    3b80:	27 95       	ror	r18
    3b82:	22 0f       	add	r18, r18
    3b84:	33 1f       	adc	r19, r19
    3b86:	70 e0       	ldi	r23, 0x00	; 0
    3b88:	64 70       	andi	r22, 0x04	; 4
    3b8a:	70 70       	andi	r23, 0x00	; 0
    3b8c:	75 95       	asr	r23
    3b8e:	67 95       	ror	r22
    3b90:	75 95       	asr	r23
    3b92:	67 95       	ror	r22
    3b94:	26 0f       	add	r18, r22
    3b96:	37 1f       	adc	r19, r23
    3b98:	22 0f       	add	r18, r18
    3b9a:	33 1f       	adc	r19, r19
    3b9c:	50 e0       	ldi	r21, 0x00	; 0
    3b9e:	42 70       	andi	r20, 0x02	; 2
    3ba0:	50 70       	andi	r21, 0x00	; 0
    3ba2:	55 95       	asr	r21
    3ba4:	47 95       	ror	r20
    3ba6:	24 0f       	add	r18, r20
    3ba8:	35 1f       	adc	r19, r21
    3baa:	22 0f       	add	r18, r18
    3bac:	81 70       	andi	r24, 0x01	; 1
}
    3bae:	82 0f       	add	r24, r18
    3bb0:	08 95       	ret

00003bb2 <initPeripherals>:
    

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
    3bb2:	f8 94       	cli
	
	// reset all registers touched by arduino in the "init()" functions (wiring.c) not used by the robot
	TCCR0A = 0;
    3bb4:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
    3bb6:	15 bc       	out	0x25, r1	; 37
	TIMSK0 = 0;
    3bb8:	10 92 6e 00 	sts	0x006E, r1
	TCCR5A = 0;
    3bbc:	10 92 20 01 	sts	0x0120, r1
	TCCR5B = 0;
    3bc0:	10 92 21 01 	sts	0x0121, r1

	rfAddress = eeprom_read_word((uint16_t*)4094);
    3bc4:	8e ef       	ldi	r24, 0xFE	; 254
    3bc6:	9f e0       	ldi	r25, 0x0F	; 15
    3bc8:	0e 94 73 52 	call	0xa4e6	; 0xa4e6 <__eerd_word_m2560>
    3bcc:	90 93 16 03 	sts	0x0316, r25
    3bd0:	80 93 15 03 	sts	0x0315, r24
	currentOsccal = eeprom_read_byte((uint8_t*)4093);
    3bd4:	8d ef       	ldi	r24, 0xFD	; 253
    3bd6:	9f e0       	ldi	r25, 0x0F	; 15
    3bd8:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__eerd_byte_m2560>
    3bdc:	80 93 31 05 	sts	0x0531, r24
	if(currentOsccal!=0 && currentOsccal!=255) { // clear memory
    3be0:	98 2f       	mov	r25, r24
    3be2:	91 50       	subi	r25, 0x01	; 1
    3be4:	9e 3f       	cpi	r25, 0xFE	; 254
    3be6:	e8 f5       	brcc	.+122    	; 0x3c62 <initPeripherals+0xb0>
		OSCCAL = currentOsccal;
    3be8:	80 93 66 00 	sts	0x0066, r24
		currentOsccal = OSCCAL;
		eeprom_write_byte((uint8_t*) 4093, currentOsccal);
	}
	
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
    3bec:	80 91 15 03 	lds	r24, 0x0315
    3bf0:	90 91 16 03 	lds	r25, 0x0316
    3bf4:	9c 01       	movw	r18, r24
    3bf6:	21 58       	subi	r18, 0x81	; 129
    3bf8:	3c 40       	sbci	r19, 0x0C	; 12
    3bfa:	23 30       	cpi	r18, 0x03	; 3
    3bfc:	31 05       	cpc	r19, r1
    3bfe:	08 f5       	brcc	.+66     	; 0x3c42 <initPeripherals+0x90>
		hardwareRevision = HW_REV_3_0;
    3c00:	10 92 4f 04 	sts	0x044F, r1

	if(rfAddress > 3203) {
		hardwareRevision = HW_REV_3_1;
	}

	initCalibration();
    3c04:	0e 94 cd 36 	call	0x6d9a	; 0x6d9a <initCalibration>
	initPortsIO();
    3c08:	0e 94 a3 1b 	call	0x3746	; 0x3746 <initPortsIO>
	initAdc();
    3c0c:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <initAdc>
	initMotors();
    3c10:	0e 94 11 25 	call	0x4a22	; 0x4a22 <initMotors>
	initRGBleds();
    3c14:	0e 94 a8 3a 	call	0x7550	; 0x7550 <initRGBleds>
	initSPI();
    3c18:	0e 94 21 0c 	call	0x1842	; 0x1842 <initSPI>
	mirf_init();
    3c1c:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <mirf_init>
	if(spiCommError==0) {
    3c20:	80 91 18 03 	lds	r24, 0x0318
    3c24:	88 23       	and	r24, r24
    3c26:	29 f4       	brne	.+10     	; 0x3c32 <initPeripherals+0x80>
		rfFlags |= 1;
    3c28:	80 91 17 03 	lds	r24, 0x0317
    3c2c:	81 60       	ori	r24, 0x01	; 1
    3c2e:	80 93 17 03 	sts	0x0317, r24
	}
	initUsart0();
    3c32:	0e 94 9c 1c 	call	0x3938	; 0x3938 <initUsart0>
	initAccelerometer();
    3c36:	0e 94 f0 3b 	call	0x77e0	; 0x77e0 <initAccelerometer>
	init_ir_remote_control();
    3c3a:	0e 94 33 12 	call	0x2466	; 0x2466 <init_ir_remote_control>

	sei();			// enable global interrupts
    3c3e:	78 94       	sei

	
}
    3c40:	08 95       	ret
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
		hardwareRevision = HW_REV_3_0;
	}

	if(rfAddress == 3200) {
    3c42:	2c e0       	ldi	r18, 0x0C	; 12
    3c44:	80 38       	cpi	r24, 0x80	; 128
    3c46:	92 07       	cpc	r25, r18
    3c48:	21 f4       	brne	.+8      	; 0x3c52 <initPeripherals+0xa0>
		hardwareRevision = HW_REV_3_0_1;
    3c4a:	81 e0       	ldi	r24, 0x01	; 1
    3c4c:	80 93 4f 04 	sts	0x044F, r24
    3c50:	d9 cf       	rjmp	.-78     	; 0x3c04 <initPeripherals+0x52>
	}

	if(rfAddress > 3203) {
    3c52:	2c e0       	ldi	r18, 0x0C	; 12
    3c54:	84 38       	cpi	r24, 0x84	; 132
    3c56:	92 07       	cpc	r25, r18
    3c58:	a8 f2       	brcs	.-86     	; 0x3c04 <initPeripherals+0x52>
		hardwareRevision = HW_REV_3_1;
    3c5a:	82 e0       	ldi	r24, 0x02	; 2
    3c5c:	80 93 4f 04 	sts	0x044F, r24
    3c60:	d1 cf       	rjmp	.-94     	; 0x3c04 <initPeripherals+0x52>
	rfAddress = eeprom_read_word((uint16_t*)4094);
	currentOsccal = eeprom_read_byte((uint8_t*)4093);
	if(currentOsccal!=0 && currentOsccal!=255) { // clear memory
		OSCCAL = currentOsccal;
	} else {
		currentOsccal = OSCCAL;
    3c62:	60 91 66 00 	lds	r22, 0x0066
    3c66:	60 93 31 05 	sts	0x0531, r22
		eeprom_write_byte((uint8_t*) 4093, currentOsccal);
    3c6a:	8d ef       	ldi	r24, 0xFD	; 253
    3c6c:	9f e0       	ldi	r25, 0x0F	; 15
    3c6e:	0e 94 a1 52 	call	0xa542	; 0xa542 <__eewr_byte_m2560>
    3c72:	bc cf       	rjmp	.-136    	; 0x3bec <initPeripherals+0x3a>

00003c74 <__vector_15>:

	
}

// used only for wake-up from sleep
ISR(TIMER2_OVF_vect) {
    3c74:	1f 92       	push	r1
    3c76:	0f 92       	push	r0
    3c78:	0f b6       	in	r0, 0x3f	; 63
    3c7a:	0f 92       	push	r0
    3c7c:	11 24       	eor	r1, r1

}
    3c7e:	0f 90       	pop	r0
    3c80:	0f be       	out	0x3f, r0	; 63
    3c82:	0f 90       	pop	r0
    3c84:	1f 90       	pop	r1
    3c86:	18 95       	reti

00003c88 <sleep>:

void sleep(unsigned char seconds) {
    3c88:	cf 93       	push	r28
    3c8a:	df 93       	push	r29

	unsigned int pause = seconds*30;	// the timer2 used to wake-up from sleep is configured to run at 30 Hz
    3c8c:	9e e1       	ldi	r25, 0x1E	; 30
    3c8e:	89 9f       	mul	r24, r25
    3c90:	e0 01       	movw	r28, r0
    3c92:	11 24       	eor	r1, r1

	// disable external interrupt because it uses the timer2 to interpret the tv
	// remote signal and the timer2 must be free in order to be used for wake-up from sleep
	PCICR &= ~(1 << PCIE1);			// disable interrupt from falling edge
    3c94:	80 91 68 00 	lds	r24, 0x0068
    3c98:	8d 7f       	andi	r24, 0xFD	; 253
    3c9a:	80 93 68 00 	sts	0x0068, r24
	PCMSK1 &= ~(1 << PCINT15);		
    3c9e:	80 91 6c 00 	lds	r24, 0x006C
    3ca2:	8f 77       	andi	r24, 0x7F	; 127
    3ca4:	80 93 6c 00 	sts	0x006C, r24
	PCIFR |= (1 << PCIF1);			// clear interrupt flag
    3ca8:	d9 9a       	sbi	0x1b, 1	; 27

	// disable adc
	ADCSRA = 0x00;					// disable interrupt and turn off adc
    3caa:	10 92 7a 00 	sts	0x007A, r1
	ADCSRA |= (1 << ADIF);			// clear interrupt flag
    3cae:	80 91 7a 00 	lds	r24, 0x007A
    3cb2:	80 61       	ori	r24, 0x10	; 16
    3cb4:	80 93 7a 00 	sts	0x007A, r24

	// disable motors pwm
	TCCR3A = 0x00;	// turn off timer
    3cb8:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0x00;
    3cbc:	10 92 91 00 	sts	0x0091, r1
	TIMSK3 = 0x00;	// disable interrupt
    3cc0:	10 92 71 00 	sts	0x0071, r1
	TIFR3 |= (1 << OCF3A) | (1 << OCF3B) | (1 << TOV3);	// clear output compares and timer overflow interrupt flags
    3cc4:	88 b3       	in	r24, 0x18	; 24
    3cc6:	87 60       	ori	r24, 0x07	; 7
    3cc8:	88 bb       	out	0x18, r24	; 24
	TCCR4A = 0x00;
    3cca:	10 92 a0 00 	sts	0x00A0, r1
	TCCR4B = 0x00;
    3cce:	10 92 a1 00 	sts	0x00A1, r1
	TIMSK4 = 0x00;
    3cd2:	10 92 72 00 	sts	0x0072, r1
	TIFR4 |= (1 << OCF4A) | (1 << OCF4B) | (1 << TOV4);	// clear output compares and timer overflow interrupt flags
    3cd6:	89 b3       	in	r24, 0x19	; 25
    3cd8:	87 60       	ori	r24, 0x07	; 7
    3cda:	89 bb       	out	0x19, r24	; 25

	// disable leds pwm
	TCCR1A = 0x00;	// turn off timer
    3cdc:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x00;
    3ce0:	10 92 81 00 	sts	0x0081, r1

	// close communication channels
	closeUsart();
    3ce4:	0e 94 c6 1c 	call	0x398c	; 0x398c <closeUsart>
	closeSPI();
    3ce8:	0e 94 2d 0c 	call	0x185a	; 0x185a <closeSPI>
	i2c_close();
    3cec:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <i2c_close>

	// set port pins
	initPortsIO();
    3cf0:	0e 94 a3 1b 	call	0x3746	; 0x3746 <initPortsIO>
	//PORTB &= ~(1 << 4);	// radio CE pin
	//DDRD = 0xFF;
	//PORTD = 0x00;	// I2C and uart pins to 0

	// set extendend standby mode and enable it
	SMCR |= (1 << SM2) | (1 << SM1) | (1 << SM0) | (1 << SE);	// extended standby
    3cf4:	83 b7       	in	r24, 0x33	; 51
    3cf6:	8f 60       	ori	r24, 0x0F	; 15
    3cf8:	83 bf       	out	0x33, r24	; 51

	// set timer2 for wake-up: 
	// source clock = 8 MHz
	// prescaler = 1/1024 => 7812.5 Hz
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
    3cfa:	81 e0       	ldi	r24, 0x01	; 1
    3cfc:	80 93 70 00 	sts	0x0070, r24
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
    3d00:	80 91 b0 00 	lds	r24, 0x00B0
    3d04:	8d 7f       	andi	r24, 0xFD	; 253
    3d06:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler
    3d0a:	80 91 b1 00 	lds	r24, 0x00B1
    3d0e:	87 60       	ori	r24, 0x07	; 7
    3d10:	80 93 b1 00 	sts	0x00B1, r24

	while(pause > 0) {	
    3d14:	20 97       	sbiw	r28, 0x00	; 0
    3d16:	19 f0       	breq	.+6      	; 0x3d1e <sleep+0x96>
		// enter extended standby mode
		//sleep_cpu();
		__asm__("sleep");
    3d18:	88 95       	sleep
		pause--;
    3d1a:	21 97       	sbiw	r28, 0x01	; 1
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler

	while(pause > 0) {	
    3d1c:	e9 f7       	brne	.-6      	; 0x3d18 <sleep+0x90>
//		PORTB ^= (1 << 6);
	}

	// disable power mode
	//SMCR &= ~(1 << SE);
	SMCR = 0x00;
    3d1e:	13 be       	out	0x33, r1	; 51

	// disable timer2 and its timer overflow interrupt
	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);	// disable timer2
    3d20:	80 91 b1 00 	lds	r24, 0x00B1
    3d24:	88 7f       	andi	r24, 0xF8	; 248
    3d26:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;					// disable all interrupt for timer2
    3d2a:	10 92 70 00 	sts	0x0070, r1
	TCCR2A |= (1 << WGM21); 	// mode 2 => CTC mode
    3d2e:	80 91 b0 00 	lds	r24, 0x00B0
    3d32:	82 60       	ori	r24, 0x02	; 2
    3d34:	80 93 b0 00 	sts	0x00B0, r24

	pwm_red = 255;
    3d38:	8f ef       	ldi	r24, 0xFF	; 255
    3d3a:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    3d3e:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    3d42:	80 93 0e 02 	sts	0x020E, r24
	pwm_right = 0;
    3d46:	10 92 f6 02 	sts	0x02F6, r1
    3d4a:	10 92 f5 02 	sts	0x02F5, r1
	pwm_left = 0;
    3d4e:	10 92 f8 02 	sts	0x02F8, r1
    3d52:	10 92 f7 02 	sts	0x02F7, r1
	initPeripherals();
    3d56:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <initPeripherals>

}
    3d5a:	df 91       	pop	r29
    3d5c:	cf 91       	pop	r28
    3d5e:	08 95       	ret

00003d60 <getTime100MicroSec>:

unsigned long int getTime100MicroSec() {
    3d60:	60 91 48 04 	lds	r22, 0x0448
    3d64:	70 91 49 04 	lds	r23, 0x0449
	return clockTick;
}
    3d68:	80 91 4a 04 	lds	r24, 0x044A
    3d6c:	90 91 4b 04 	lds	r25, 0x044B
    3d70:	08 95       	ret

00003d72 <readBatteryLevel>:

void readBatteryLevel() {
	measBattery = 1;
    3d72:	81 e0       	ldi	r24, 0x01	; 1
    3d74:	80 93 bf 02 	sts	0x02BF, r24
}
    3d78:	08 95       	ret

00003d7a <resetOdometry>:

void resetOdometry() {
	leftMotSteps = 0;
    3d7a:	80 e0       	ldi	r24, 0x00	; 0
    3d7c:	90 e0       	ldi	r25, 0x00	; 0
    3d7e:	dc 01       	movw	r26, r24
    3d80:	80 93 d5 02 	sts	0x02D5, r24
    3d84:	90 93 d6 02 	sts	0x02D6, r25
    3d88:	a0 93 d7 02 	sts	0x02D7, r26
    3d8c:	b0 93 d8 02 	sts	0x02D8, r27
	rightMotSteps = 0;
    3d90:	80 93 d1 02 	sts	0x02D1, r24
    3d94:	90 93 d2 02 	sts	0x02D2, r25
    3d98:	a0 93 d3 02 	sts	0x02D3, r26
    3d9c:	b0 93 d4 02 	sts	0x02D4, r27
	theta = 0;
    3da0:	80 93 6f 04 	sts	0x046F, r24
    3da4:	90 93 70 04 	sts	0x0470, r25
    3da8:	a0 93 71 04 	sts	0x0471, r26
    3dac:	b0 93 72 04 	sts	0x0472, r27
	xPos = 0;
    3db0:	80 93 77 04 	sts	0x0477, r24
    3db4:	90 93 78 04 	sts	0x0478, r25
    3db8:	a0 93 79 04 	sts	0x0479, r26
    3dbc:	b0 93 7a 04 	sts	0x047A, r27
	yPos = 0;
    3dc0:	80 93 7b 04 	sts	0x047B, r24
    3dc4:	90 93 7c 04 	sts	0x047C, r25
    3dc8:	a0 93 7d 04 	sts	0x047D, r26
    3dcc:	b0 93 7e 04 	sts	0x047E, r27
}
    3dd0:	08 95       	ret

00003dd2 <initAdc>:

#include "adc.h"


void initAdc(void) {
    3dd2:	cf 93       	push	r28
    3dd4:	df 93       	push	r29
	// ADMUX  -----> REFS1	REFS0	 ADLAR	MUX4	MUX3 	 MUX2	MUX1	MUX0
	// default		 0		0		 0		0		0		 0		0		0
	// ADCSRB -----> -		ACME	 - 		- 		MUX5 	 ADTS2 	ADTS1 	ADTS0
	// default		 0		0		 0		0		0		 0		0		0

	ADCSRA = 0;
    3dd6:	ea e7       	ldi	r30, 0x7A	; 122
    3dd8:	f0 e0       	ldi	r31, 0x00	; 0
    3dda:	10 82       	st	Z, r1
	ADCSRB = 0;
    3ddc:	ab e7       	ldi	r26, 0x7B	; 123
    3dde:	b0 e0       	ldi	r27, 0x00	; 0
    3de0:	1c 92       	st	X, r1
	ADMUX = 0;
    3de2:	cc e7       	ldi	r28, 0x7C	; 124
    3de4:	d0 e0       	ldi	r29, 0x00	; 0
    3de6:	18 82       	st	Y, r1

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// 1/64 prescaler => 8 MHz/64=125 KHz => Tad (adc clock)
    3de8:	80 81       	ld	r24, Z
    3dea:	86 60       	ori	r24, 0x06	; 6
    3dec:	80 83       	st	Z, r24
											// one sample need 13 Tad in free running mode, so interrupt 
											// frequency is 125/13=9.6 KHz (104 us between adc interrupts)
	ADMUX |= (1 << REFS0); 	// voltage reference to AVCC (external)
    3dee:	88 81       	ld	r24, Y
    3df0:	80 64       	ori	r24, 0x40	; 64
    3df2:	88 83       	st	Y, r24
	ADCSRA |= (1 << ADATE); // auto-trigger mode: the new sampling is started just after the last one is completed
    3df4:	80 81       	ld	r24, Z
    3df6:	80 62       	ori	r24, 0x20	; 32
    3df8:	80 83       	st	Z, r24
	ADCSRB &= 0xF8;			// for safety...ADTS2:0 in ADCSRB should be already set to free running by default (0b000)
    3dfa:	8c 91       	ld	r24, X
    3dfc:	88 7f       	andi	r24, 0xF8	; 248
    3dfe:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADIE);	// enable interrupt on conversion completion
    3e00:	80 81       	ld	r24, Z
    3e02:	88 60       	ori	r24, 0x08	; 8
    3e04:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	// enable ADC
    3e06:	80 81       	ld	r24, Z
    3e08:	80 68       	ori	r24, 0x80	; 128
    3e0a:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);	// start first conversion (start from channel 0)
    3e0c:	80 81       	ld	r24, Z
    3e0e:	80 64       	ori	r24, 0x40	; 64
    3e10:	80 83       	st	Z, r24

}
    3e12:	df 91       	pop	r29
    3e14:	cf 91       	pop	r28
    3e16:	08 95       	ret

00003e18 <__vector_29>:

ISR(ADC_vect) {
    3e18:	1f 92       	push	r1
    3e1a:	0f 92       	push	r0
    3e1c:	0f b6       	in	r0, 0x3f	; 63
    3e1e:	0f 92       	push	r0
    3e20:	0b b6       	in	r0, 0x3b	; 59
    3e22:	0f 92       	push	r0
    3e24:	11 24       	eor	r1, r1
    3e26:	1f 93       	push	r17
    3e28:	2f 93       	push	r18
    3e2a:	3f 93       	push	r19
    3e2c:	4f 93       	push	r20
    3e2e:	5f 93       	push	r21
    3e30:	6f 93       	push	r22
    3e32:	7f 93       	push	r23
    3e34:	8f 93       	push	r24
    3e36:	9f 93       	push	r25
    3e38:	af 93       	push	r26
    3e3a:	bf 93       	push	r27
    3e3c:	ef 93       	push	r30
    3e3e:	ff 93       	push	r31
	// channel 15:    active phase when going forward: motor left current; passive phase when going backward: motor left velocity


	//LED_BLUE_ON;

	clockTick++;				// this variable is used as base time for timed processes/functions (e,g, delay); 
    3e40:	80 91 48 04 	lds	r24, 0x0448
    3e44:	90 91 49 04 	lds	r25, 0x0449
    3e48:	a0 91 4a 04 	lds	r26, 0x044A
    3e4c:	b0 91 4b 04 	lds	r27, 0x044B
    3e50:	01 96       	adiw	r24, 0x01	; 1
    3e52:	a1 1d       	adc	r26, r1
    3e54:	b1 1d       	adc	r27, r1
    3e56:	80 93 48 04 	sts	0x0448, r24
    3e5a:	90 93 49 04 	sts	0x0449, r25
    3e5e:	a0 93 4a 04 	sts	0x044A, r26
    3e62:	b0 93 4b 04 	sts	0x044B, r27
								// resolution of 104 us based on adc interrupts

	unsigned int value = ADCL;			// get the sample; low byte must be read first!!
    3e66:	80 91 78 00 	lds	r24, 0x0078
    3e6a:	90 e0       	ldi	r25, 0x00	; 0
	value = (ADCH<<8) | value;
    3e6c:	40 91 79 00 	lds	r20, 0x0079
    3e70:	34 2f       	mov	r19, r20
    3e72:	20 e0       	ldi	r18, 0x00	; 0
    3e74:	82 2b       	or	r24, r18
    3e76:	93 2b       	or	r25, r19
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    3e78:	20 91 b9 02 	lds	r18, 0x02B9
    3e7c:	22 30       	cpi	r18, 0x02	; 2
    3e7e:	09 f4       	brne	.+2      	; 0x3e82 <__vector_29+0x6a>
    3e80:	c1 c1       	rjmp	.+898    	; 0x4204 <__vector_29+0x3ec>
    3e82:	23 30       	cpi	r18, 0x03	; 3
    3e84:	08 f4       	brcc	.+2      	; 0x3e88 <__vector_29+0x70>
    3e86:	4c c0       	rjmp	.+152    	; 0x3f20 <__vector_29+0x108>
    3e88:	24 30       	cpi	r18, 0x04	; 4
    3e8a:	09 f4       	brne	.+2      	; 0x3e8e <__vector_29+0x76>
    3e8c:	e5 c1       	rjmp	.+970    	; 0x4258 <__vector_29+0x440>
    3e8e:	24 30       	cpi	r18, 0x04	; 4
    3e90:	08 f0       	brcs	.+2      	; 0x3e94 <__vector_29+0x7c>
    3e92:	2a c1       	rjmp	.+596    	; 0x40e8 <__vector_29+0x2d0>
				}
			}
			break;

		case SAVE_TO_LEFT_MOTOR_CURRENT:
			left_current_avg += value;
    3e94:	20 91 e1 02 	lds	r18, 0x02E1
    3e98:	30 91 e2 02 	lds	r19, 0x02E2
    3e9c:	28 0f       	add	r18, r24
    3e9e:	39 1f       	adc	r19, r25
			left_current_avg = left_current_avg >> 1;
    3ea0:	36 95       	lsr	r19
    3ea2:	27 95       	ror	r18
    3ea4:	30 93 e2 02 	sts	0x02E2, r19
    3ea8:	20 93 e1 02 	sts	0x02E1, r18
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
    3eac:	80 91 c6 04 	lds	r24, 0x04C6
    3eb0:	82 30       	cpi	r24, 0x02	; 2
    3eb2:	09 f0       	breq	.+2      	; 0x3eb6 <__vector_29+0x9e>
    3eb4:	4b c0       	rjmp	.+150    	; 0x3f4c <__vector_29+0x134>
		switch(irCommAdcTxState) {
    3eb6:	80 91 05 05 	lds	r24, 0x0505
    3eba:	81 30       	cpi	r24, 0x01	; 1
    3ebc:	09 f4       	brne	.+2      	; 0x3ec0 <__vector_29+0xa8>
    3ebe:	a0 c2       	rjmp	.+1344   	; 0x4400 <__vector_29+0x5e8>
    3ec0:	81 30       	cpi	r24, 0x01	; 1
    3ec2:	08 f0       	brcs	.+2      	; 0x3ec6 <__vector_29+0xae>
    3ec4:	f7 c1       	rjmp	.+1006   	; 0x42b4 <__vector_29+0x49c>
				}
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ1;
				break;

			case IRCOMM_TX_ADC_IDLE:
				if(irCommTxByteEnqueued==1) {					
    3ec6:	80 91 07 05 	lds	r24, 0x0507
    3eca:	81 30       	cpi	r24, 0x01	; 1
    3ecc:	09 f4       	brne	.+2      	; 0x3ed0 <__vector_29+0xb8>
    3ece:	09 c3       	rjmp	.+1554   	; 0x44e2 <__vector_29+0x6ca>
    3ed0:	80 91 ba 02 	lds	r24, 0x02BA
	
	}

	// channel selection in the adc register; continuously manually change the channel 
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
    3ed4:	90 91 23 02 	lds	r25, 0x0223
    3ed8:	98 30       	cpi	r25, 0x08	; 8
    3eda:	08 f0       	brcs	.+2      	; 0x3ede <__vector_29+0xc6>
    3edc:	4b c1       	rjmp	.+662    	; 0x4174 <__vector_29+0x35c>
		ADCSRB &= ~(1 << MUX5);
    3ede:	90 91 7b 00 	lds	r25, 0x007B
    3ee2:	97 7f       	andi	r25, 0xF7	; 247
    3ee4:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + currentAdChannel;
    3ee8:	90 91 23 02 	lds	r25, 0x0223
    3eec:	90 5c       	subi	r25, 0xC0	; 192
    3eee:	90 93 7c 00 	sts	0x007C, r25
		ADCSRB |= (1 << MUX5);
		ADMUX = 0x40 + (currentAdChannel-8);
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if((adcSamplingState==2) && (irCommMode==IRCOMM_MODE_SENSORS_SAMPLING)) {
    3ef2:	82 30       	cpi	r24, 0x02	; 2
    3ef4:	09 f4       	brne	.+2      	; 0x3ef8 <__vector_29+0xe0>
    3ef6:	4b c1       	rjmp	.+662    	; 0x418e <__vector_29+0x376>

	}

	//LED_BLUE_OFF;

}
    3ef8:	ff 91       	pop	r31
    3efa:	ef 91       	pop	r30
    3efc:	bf 91       	pop	r27
    3efe:	af 91       	pop	r26
    3f00:	9f 91       	pop	r25
    3f02:	8f 91       	pop	r24
    3f04:	7f 91       	pop	r23
    3f06:	6f 91       	pop	r22
    3f08:	5f 91       	pop	r21
    3f0a:	4f 91       	pop	r20
    3f0c:	3f 91       	pop	r19
    3f0e:	2f 91       	pop	r18
    3f10:	1f 91       	pop	r17
    3f12:	0f 90       	pop	r0
    3f14:	0b be       	out	0x3b, r0	; 59
    3f16:	0f 90       	pop	r0
    3f18:	0f be       	out	0x3f, r0	; 63
    3f1a:	0f 90       	pop	r0
    3f1c:	1f 90       	pop	r1
    3f1e:	18 95       	reti
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    3f20:	22 23       	and	r18, r18
    3f22:	09 f4       	brne	.+2      	; 0x3f26 <__vector_29+0x10e>
    3f24:	4d c0       	rjmp	.+154    	; 0x3fc0 <__vector_29+0x1a8>
    3f26:	21 30       	cpi	r18, 0x01	; 1
    3f28:	61 f4       	brne	.+24     	; 0x3f42 <__vector_29+0x12a>
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
			}											// is sampled; thus 12 sensors x 2 phases = 24 samples
			break;

		case SAVE_TO_RIGHT_MOTOR_CURRENT:
			right_current_avg += value;
    3f2a:	20 91 e3 02 	lds	r18, 0x02E3
    3f2e:	30 91 e4 02 	lds	r19, 0x02E4
    3f32:	28 0f       	add	r18, r24
    3f34:	39 1f       	adc	r19, r25
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
    3f36:	36 95       	lsr	r19
    3f38:	27 95       	ror	r18
    3f3a:	30 93 e4 02 	sts	0x02E4, r19
    3f3e:	20 93 e3 02 	sts	0x02E3, r18
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
    3f42:	80 91 c6 04 	lds	r24, 0x04C6
    3f46:	82 30       	cpi	r24, 0x02	; 2
    3f48:	09 f4       	brne	.+2      	; 0x3f4c <__vector_29+0x134>
    3f4a:	b5 cf       	rjmp	.-150    	; 0x3eb6 <__vector_29+0x9e>
					irCommAdcTxState = IRCOMM_TX_ADC_TURN_OFF_SENSORS;
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
    3f4c:	81 30       	cpi	r24, 0x01	; 1
    3f4e:	09 f4       	brne	.+2      	; 0x3f52 <__vector_29+0x13a>
    3f50:	38 c1       	rjmp	.+624    	; 0x41c2 <__vector_29+0x3aa>
			case 12:
				adcSaveDataTo = SKIP_SAMPLE;
				break;

		}
	} else if(irCommMode==IRCOMM_MODE_SENSORS_SAMPLING) {
    3f52:	88 23       	and	r24, r24
    3f54:	09 f0       	breq	.+2      	; 0x3f58 <__vector_29+0x140>
    3f56:	bc cf       	rjmp	.-136    	; 0x3ed0 <__vector_29+0xb8>
		switch(adcSamplingState) {
    3f58:	80 91 ba 02 	lds	r24, 0x02BA
    3f5c:	82 30       	cpi	r24, 0x02	; 2
    3f5e:	09 f4       	brne	.+2      	; 0x3f62 <__vector_29+0x14a>
    3f60:	23 c3       	rjmp	.+1606   	; 0x45a8 <__vector_29+0x790>
    3f62:	83 30       	cpi	r24, 0x03	; 3
    3f64:	08 f0       	brcs	.+2      	; 0x3f68 <__vector_29+0x150>
    3f66:	d3 c1       	rjmp	.+934    	; 0x430e <__vector_29+0x4f6>
    3f68:	88 23       	and	r24, r24
    3f6a:	09 f4       	brne	.+2      	; 0x3f6e <__vector_29+0x156>
    3f6c:	76 c2       	rjmp	.+1260   	; 0x445a <__vector_29+0x642>
    3f6e:	81 30       	cpi	r24, 0x01	; 1
    3f70:	09 f0       	breq	.+2      	; 0x3f74 <__vector_29+0x15c>
    3f72:	b0 cf       	rjmp	.-160    	; 0x3ed4 <__vector_29+0xbc>
				}
				adcSamplingState = 1;
				break;

			case 1:	// left motor
				currentAdChannel = currentMotLeftChannel;
    3f74:	80 91 25 02 	lds	r24, 0x0225
    3f78:	80 93 23 02 	sts	0x0223, r24
				leftChannelPhase = leftMotorPhase;
    3f7c:	80 91 28 02 	lds	r24, 0x0228
    3f80:	80 93 bc 02 	sts	0x02BC, r24
				adcSaveDataTo = SAVE_TO_PROX;
    3f84:	10 92 b9 02 	sts	0x02B9, r1
				adcSamplingState = 2;
    3f88:	82 e0       	ldi	r24, 0x02	; 2
    3f8a:	80 93 ba 02 	sts	0x02BA, r24
				if(irCommEnabled==IRCOMM_MODE_RECEIVE && currentProx==23) {					
    3f8e:	10 91 c4 04 	lds	r17, 0x04C4
    3f92:	11 30       	cpi	r17, 0x01	; 1
    3f94:	09 f4       	brne	.+2      	; 0x3f98 <__vector_29+0x180>
    3f96:	0b c4       	rjmp	.+2070   	; 0x47ae <__vector_29+0x996>
					irCommRxWindowSamples = 0;
					memset(irCommMaxSensorValueAdc, 0x00, 16);
					memset(irCommMinSensorValueAdc, 0xFF, 16);
					irCommMode = IRCOMM_MODE_RECEIVE;					
				}
				if(irCommEnabled==IRCOMM_MODE_TRANSMIT && currentProx==23) {
    3f98:	12 30       	cpi	r17, 0x02	; 2
    3f9a:	09 f0       	breq	.+2      	; 0x3f9e <__vector_29+0x186>
    3f9c:	99 cf       	rjmp	.-206    	; 0x3ed0 <__vector_29+0xb8>
    3f9e:	80 91 24 02 	lds	r24, 0x0224
    3fa2:	87 31       	cpi	r24, 0x17	; 23
    3fa4:	09 f0       	breq	.+2      	; 0x3fa8 <__vector_29+0x190>
    3fa6:	94 cf       	rjmp	.-216    	; 0x3ed0 <__vector_29+0xb8>
					irCommMode = IRCOMM_MODE_TRANSMIT;
    3fa8:	10 93 c6 04 	sts	0x04C6, r17
					if(irCommTxByteEnqueued==1) {
    3fac:	80 91 07 05 	lds	r24, 0x0507
    3fb0:	81 30       	cpi	r24, 0x01	; 1
    3fb2:	09 f4       	brne	.+2      	; 0x3fb6 <__vector_29+0x19e>
    3fb4:	96 c2       	rjmp	.+1324   	; 0x44e2 <__vector_29+0x6ca>
						irCommAdcTxState = IRCOMM_TX_ADC_TURN_OFF_SENSORS;
					} else {
						irCommMode=IRCOMM_MODE_SENSORS_SAMPLING; // no data to be transmitted, restart sensors sampling
    3fb6:	10 92 c6 04 	sts	0x04C6, r1
    3fba:	80 91 ba 02 	lds	r24, 0x02BA
    3fbe:	8a cf       	rjmp	.-236    	; 0x3ed4 <__vector_29+0xbc>
			}
			currentProx++;
			break;

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    3fc0:	60 91 24 02 	lds	r22, 0x0224
    3fc4:	6e 30       	cpi	r22, 0x0E	; 14
    3fc6:	09 f4       	brne	.+2      	; 0x3fca <__vector_29+0x1b2>
    3fc8:	02 c3       	rjmp	.+1540   	; 0x45ce <__vector_29+0x7b6>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
				measBattery = 0;
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
			} else {
				proximityValue[currentProx] = value;	// even indexes contain ambient values; odd indexes contains "reflected" values
    3fca:	26 2f       	mov	r18, r22
    3fcc:	30 e0       	ldi	r19, 0x00	; 0
    3fce:	f9 01       	movw	r30, r18
    3fd0:	ee 0f       	add	r30, r30
    3fd2:	ff 1f       	adc	r31, r31
    3fd4:	e7 5d       	subi	r30, 0xD7	; 215
    3fd6:	fd 4f       	sbci	r31, 0xFD	; 253
    3fd8:	91 83       	std	Z+1, r25	; 0x01
    3fda:	80 83       	st	Z, r24
			}

			if(currentProx & 0x01) {
    3fdc:	20 ff       	sbrs	r18, 0
    3fde:	78 c0       	rjmp	.+240    	; 0x40d0 <__vector_29+0x2b8>
				//if(currentProx < 16) {	// prox
					proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
    3fe0:	f9 01       	movw	r30, r18
    3fe2:	ee 0f       	add	r30, r30
    3fe4:	ff 1f       	adc	r31, r31
    3fe6:	e9 5d       	subi	r30, 0xD9	; 217
    3fe8:	fd 4f       	sbci	r31, 0xFD	; 253
    3fea:	80 81       	ld	r24, Z
    3fec:	91 81       	ldd	r25, Z+1	; 0x01
    3fee:	f9 01       	movw	r30, r18
    3ff0:	ee 0f       	add	r30, r30
    3ff2:	ff 1f       	adc	r31, r31
    3ff4:	e7 5d       	subi	r30, 0xD7	; 215
    3ff6:	fd 4f       	sbci	r31, 0xFD	; 253
    3ff8:	40 81       	ld	r20, Z
    3ffa:	51 81       	ldd	r21, Z+1	; 0x01
    3ffc:	26 2f       	mov	r18, r22
    3ffe:	26 95       	lsr	r18
    4000:	30 e0       	ldi	r19, 0x00	; 0
    4002:	84 1b       	sub	r24, r20
    4004:	95 0b       	sbc	r25, r21
    4006:	22 0f       	add	r18, r18
    4008:	33 1f       	adc	r19, r19
    400a:	f9 01       	movw	r30, r18
    400c:	ef 58       	subi	r30, 0x8F	; 143
    400e:	fd 4f       	sbci	r31, 0xFD	; 253
    4010:	40 81       	ld	r20, Z
    4012:	51 81       	ldd	r21, Z+1	; 0x01
    4014:	84 1b       	sub	r24, r20
    4016:	95 0b       	sbc	r25, r21
    4018:	f9 01       	movw	r30, r18
    401a:	e7 5a       	subi	r30, 0xA7	; 167
    401c:	fd 4f       	sbci	r31, 0xFD	; 253
    401e:	91 83       	std	Z+1, r25	; 0x01
    4020:	80 83       	st	Z, r24
				//} else {	// ground
				//	proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx];
				//}
				if(proximityResult[currentProx>>1] < 0) {
    4022:	97 fd       	sbrc	r25, 7
    4024:	fe c2       	rjmp	.+1532   	; 0x4622 <__vector_29+0x80a>
					proximityResult[currentProx>>1] = 0;
				}
				if(proximityResult[currentProx>>1] > 1024) {
    4026:	44 e0       	ldi	r20, 0x04	; 4
    4028:	81 30       	cpi	r24, 0x01	; 1
    402a:	94 07       	cpc	r25, r20
    402c:	24 f0       	brlt	.+8      	; 0x4036 <__vector_29+0x21e>
					proximityResult[currentProx>>1] = 1024;
    402e:	80 e0       	ldi	r24, 0x00	; 0
    4030:	94 e0       	ldi	r25, 0x04	; 4
    4032:	91 83       	std	Z+1, r25	; 0x01
    4034:	80 83       	st	Z, r24
				// 1) from 0 to PHASE1: y = x (where x = proximity value9
				// 2) from PHASE1 to PHASE2: y = x/2 + 30
				// 3) from PHASE2 to PHASE3: y = x/4 + 75
				// 4) from PHASE3 upwards: y = x/8 + 127.5
				// The linearized values are used for the obstacles avoidance.
				if(currentProx < 16) {	// only for proximity (not ground sensors)
    4036:	60 31       	cpi	r22, 0x10	; 16
    4038:	50 f4       	brcc	.+20     	; 0x404e <__vector_29+0x236>
					
					if(proximityResult[currentProx>>1] < PHASE1) {
    403a:	8c 33       	cpi	r24, 0x3C	; 60
    403c:	91 05       	cpc	r25, r1
    403e:	0c f0       	brlt	.+2      	; 0x4042 <__vector_29+0x22a>
    4040:	f5 c2       	rjmp	.+1514   	; 0x462c <__vector_29+0x814>

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];
    4042:	2f 53       	subi	r18, 0x3F	; 63
    4044:	3d 4f       	sbci	r19, 0xFD	; 253
    4046:	d9 01       	movw	r26, r18
    4048:	11 96       	adiw	r26, 0x01	; 1
    404a:	9c 93       	st	X, r25
    404c:	8e 93       	st	-X, r24
				}

				// the cliff avoidance behavior is inserted within this interrupt service routine in order to react
				// as fast as possible; the maximum speed usable with cliff avoidance is 30 in all kind of surface 
				// (apart from black ones) after calibration.
				if(cliffAvoidanceEnabled) {
    404e:	80 91 6d 04 	lds	r24, 0x046D
    4052:	88 23       	and	r24, r24
    4054:	09 f4       	brne	.+2      	; 0x4058 <__vector_29+0x240>
    4056:	12 c2       	rjmp	.+1060   	; 0x447c <__vector_29+0x664>
					if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    4058:	80 91 69 02 	lds	r24, 0x0269
    405c:	90 91 6a 02 	lds	r25, 0x026A
    4060:	f1 e0       	ldi	r31, 0x01	; 1
    4062:	84 3a       	cpi	r24, 0xA4	; 164
    4064:	9f 07       	cpc	r25, r31
    4066:	cc f0       	brlt	.+50     	; 0x409a <__vector_29+0x282>
    4068:	80 91 6b 02 	lds	r24, 0x026B
    406c:	90 91 6c 02 	lds	r25, 0x026C
    4070:	21 e0       	ldi	r18, 0x01	; 1
    4072:	84 3a       	cpi	r24, 0xA4	; 164
    4074:	92 07       	cpc	r25, r18
    4076:	8c f0       	brlt	.+34     	; 0x409a <__vector_29+0x282>
    4078:	80 91 6d 02 	lds	r24, 0x026D
    407c:	90 91 6e 02 	lds	r25, 0x026E
    4080:	41 e0       	ldi	r20, 0x01	; 1
    4082:	84 3a       	cpi	r24, 0xA4	; 164
    4084:	94 07       	cpc	r25, r20
    4086:	4c f0       	brlt	.+18     	; 0x409a <__vector_29+0x282>
    4088:	80 91 6f 02 	lds	r24, 0x026F
    408c:	90 91 70 02 	lds	r25, 0x0270
    4090:	a1 e0       	ldi	r26, 0x01	; 1
    4092:	84 3a       	cpi	r24, 0xA4	; 164
    4094:	9a 07       	cpc	r25, r26
    4096:	0c f0       	brlt	.+2      	; 0x409a <__vector_29+0x282>
    4098:	f1 c1       	rjmp	.+994    	; 0x447c <__vector_29+0x664>
					//if(proximityResult[8]<(proximityOffset[8]>>1) || proximityResult[9]<(proximityOffset[9]>>1) || proximityResult[10]<(proximityOffset[10]>>1) || proximityResult[11]<(proximityOffset[11]>>1)) {
						cliffDetectedFlag = 1;
    409a:	81 e0       	ldi	r24, 0x01	; 1
    409c:	80 93 6e 04 	sts	0x046E, r24
						//LED_RED_ON;			
						// set resulting velocity to 0 and change the pwm registers directly to be able
						// to stop as fast as possible (the next pwm cycle)
						// left motor
						pwm_left = 0;
    40a0:	10 92 f8 02 	sts	0x02F8, r1
    40a4:	10 92 f7 02 	sts	0x02F7, r1
						OCR4A = 0;
    40a8:	10 92 a9 00 	sts	0x00A9, r1
    40ac:	10 92 a8 00 	sts	0x00A8, r1
						OCR4B = 0;
    40b0:	10 92 ab 00 	sts	0x00AB, r1
    40b4:	10 92 aa 00 	sts	0x00AA, r1
						// right motor
						pwm_right = 0;
    40b8:	10 92 f6 02 	sts	0x02F6, r1
    40bc:	10 92 f5 02 	sts	0x02F5, r1
						OCR3A = 0;
    40c0:	10 92 99 00 	sts	0x0099, r1
    40c4:	10 92 98 00 	sts	0x0098, r1
						OCR3B = 0;
    40c8:	10 92 9b 00 	sts	0x009B, r1
    40cc:	10 92 9a 00 	sts	0x009A, r1
				} else {
					cliffDetectedFlag = 0;
				}

			}			
			currentProx++;
    40d0:	6f 5f       	subi	r22, 0xFF	; 255
    40d2:	60 93 24 02 	sts	0x0224, r22
			if(currentProx > 23) {						// in total there are 8 proximity sensors and 4 ground sensors => 12 sensors
    40d6:	68 31       	cpi	r22, 0x18	; 24
    40d8:	08 f4       	brcc	.+2      	; 0x40dc <__vector_29+0x2c4>
    40da:	33 cf       	rjmp	.-410    	; 0x3f42 <__vector_29+0x12a>
				currentProx = 0;						// for each one there is a passive phase in which the ambient light is sampled,
    40dc:	10 92 24 02 	sts	0x0224, r1
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
    40e0:	81 e0       	ldi	r24, 0x01	; 1
    40e2:	80 93 c0 02 	sts	0x02C0, r24
    40e6:	2d cf       	rjmp	.-422    	; 0x3f42 <__vector_29+0x12a>
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    40e8:	26 30       	cpi	r18, 0x06	; 6
    40ea:	09 f0       	breq	.+2      	; 0x40ee <__vector_29+0x2d6>
    40ec:	2a cf       	rjmp	.-428    	; 0x3f42 <__vector_29+0x12a>
		case SAVE_TO_PROX_IRCOMM:
			irCommProxValuesAdc[currentProx+irCommRxWindowSamples*8] = value;
    40ee:	20 91 e8 04 	lds	r18, 0x04E8
    40f2:	30 e0       	ldi	r19, 0x00	; 0
    40f4:	40 91 24 02 	lds	r20, 0x0224
    40f8:	22 0f       	add	r18, r18
    40fa:	33 1f       	adc	r19, r19
    40fc:	22 0f       	add	r18, r18
    40fe:	33 1f       	adc	r19, r19
    4100:	22 0f       	add	r18, r18
    4102:	33 1f       	adc	r19, r19
    4104:	24 0f       	add	r18, r20
    4106:	31 1d       	adc	r19, r1
    4108:	22 0f       	add	r18, r18
    410a:	33 1f       	adc	r19, r19
    410c:	e0 91 4c 08 	lds	r30, 0x084C
    4110:	f0 91 4d 08 	lds	r31, 0x084D
    4114:	e2 0f       	add	r30, r18
    4116:	f3 1f       	adc	r31, r19
    4118:	91 83       	std	Z+1, r25	; 0x01
    411a:	80 83       	st	Z, r24
			// get the min and max values in the sampling window for all the sensors
			if(irCommMaxSensorValueAdc[currentProx] < value) {
    411c:	60 91 24 02 	lds	r22, 0x0224
    4120:	26 2f       	mov	r18, r22
    4122:	30 e0       	ldi	r19, 0x00	; 0
    4124:	22 0f       	add	r18, r18
    4126:	33 1f       	adc	r19, r19
    4128:	e0 91 1a 0b 	lds	r30, 0x0B1A
    412c:	f0 91 1b 0b 	lds	r31, 0x0B1B
    4130:	e2 0f       	add	r30, r18
    4132:	f3 1f       	adc	r31, r19
    4134:	40 81       	ld	r20, Z
    4136:	51 81       	ldd	r21, Z+1	; 0x01
    4138:	48 17       	cp	r20, r24
    413a:	59 07       	cpc	r21, r25
    413c:	40 f4       	brcc	.+16     	; 0x414e <__vector_29+0x336>
				irCommMaxSensorValueAdc[currentProx] = value;
    413e:	91 83       	std	Z+1, r25	; 0x01
    4140:	80 83       	st	Z, r24
    4142:	60 91 24 02 	lds	r22, 0x0224
    4146:	26 2f       	mov	r18, r22
    4148:	30 e0       	ldi	r19, 0x00	; 0
    414a:	22 0f       	add	r18, r18
    414c:	33 1f       	adc	r19, r19
			}
			if(irCommMinSensorValueAdc[currentProx] > value) {
    414e:	e0 91 a8 05 	lds	r30, 0x05A8
    4152:	f0 91 a9 05 	lds	r31, 0x05A9
    4156:	e2 0f       	add	r30, r18
    4158:	f3 1f       	adc	r31, r19
    415a:	20 81       	ld	r18, Z
    415c:	31 81       	ldd	r19, Z+1	; 0x01
    415e:	82 17       	cp	r24, r18
    4160:	93 07       	cpc	r25, r19
    4162:	20 f4       	brcc	.+8      	; 0x416c <__vector_29+0x354>
				irCommMinSensorValueAdc[currentProx] = value;
    4164:	91 83       	std	Z+1, r25	; 0x01
    4166:	80 83       	st	Z, r24
    4168:	60 91 24 02 	lds	r22, 0x0224
			}
			currentProx++;
    416c:	6f 5f       	subi	r22, 0xFF	; 255
    416e:	60 93 24 02 	sts	0x0224, r22
			break;
    4172:	e7 ce       	rjmp	.-562    	; 0x3f42 <__vector_29+0x12a>
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
		ADCSRB &= ~(1 << MUX5);
		ADMUX = 0x40 + currentAdChannel;
	} else {						// MUX5=1 + ADMUX=0..7 => adc channel=8..15
		ADCSRB |= (1 << MUX5);
    4174:	90 91 7b 00 	lds	r25, 0x007B
    4178:	98 60       	ori	r25, 0x08	; 8
    417a:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + (currentAdChannel-8);
    417e:	90 91 23 02 	lds	r25, 0x0223
    4182:	98 5c       	subi	r25, 0xC8	; 200
    4184:	90 93 7c 00 	sts	0x007C, r25
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if((adcSamplingState==2) && (irCommMode==IRCOMM_MODE_SENSORS_SAMPLING)) {
    4188:	82 30       	cpi	r24, 0x02	; 2
    418a:	09 f0       	breq	.+2      	; 0x418e <__vector_29+0x376>
    418c:	b5 ce       	rjmp	.-662    	; 0x3ef8 <__vector_29+0xe0>
    418e:	80 91 c6 04 	lds	r24, 0x04C6
    4192:	88 23       	and	r24, r24
    4194:	09 f0       	breq	.+2      	; 0x4198 <__vector_29+0x380>
    4196:	b0 ce       	rjmp	.-672    	; 0x3ef8 <__vector_29+0xe0>

		if(hardwareRevision == HW_REV_3_0) {
    4198:	20 91 4f 04 	lds	r18, 0x044F
    419c:	22 23       	and	r18, r18
    419e:	39 f4       	brne	.+14     	; 0x41ae <__vector_29+0x396>
			PORTJ &= 0xF0;
    41a0:	80 91 05 01 	lds	r24, 0x0105
    41a4:	80 7f       	andi	r24, 0xF0	; 240
    41a6:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    41aa:	12 b8       	out	0x02, r1	; 2
    41ac:	a5 ce       	rjmp	.-694    	; 0x3ef8 <__vector_29+0xe0>
			//#warning "turn off pulse with 0 (hw rev 3.0)"
		}

		if(hardwareRevision == HW_REV_3_0_1) {
    41ae:	21 30       	cpi	r18, 0x01	; 1
    41b0:	19 f0       	breq	.+6      	; 0x41b8 <__vector_29+0x3a0>
			PORTJ = 0xFF;
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0.1)"
		}

		if(hardwareRevision == HW_REV_3_1) {
    41b2:	22 30       	cpi	r18, 0x02	; 2
    41b4:	09 f0       	breq	.+2      	; 0x41b8 <__vector_29+0x3a0>
    41b6:	a0 ce       	rjmp	.-704    	; 0x3ef8 <__vector_29+0xe0>
			PORTJ = 0xFF;
    41b8:	8f ef       	ldi	r24, 0xFF	; 255
    41ba:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    41be:	12 b8       	out	0x02, r1	; 2
    41c0:	9b ce       	rjmp	.-714    	; 0x3ef8 <__vector_29+0xe0>
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
    41c2:	90 91 e7 04 	lds	r25, 0x04E7
    41c6:	96 30       	cpi	r25, 0x06	; 6
    41c8:	09 f4       	brne	.+2      	; 0x41cc <__vector_29+0x3b4>
    41ca:	43 c2       	rjmp	.+1158   	; 0x4652 <__vector_29+0x83a>
    41cc:	97 30       	cpi	r25, 0x07	; 7
    41ce:	08 f0       	brcs	.+2      	; 0x41d2 <__vector_29+0x3ba>
    41d0:	ce c0       	rjmp	.+412    	; 0x436e <__vector_29+0x556>
    41d2:	92 30       	cpi	r25, 0x02	; 2
    41d4:	09 f4       	brne	.+2      	; 0x41d8 <__vector_29+0x3c0>
    41d6:	a9 c2       	rjmp	.+1362   	; 0x472a <__vector_29+0x912>
    41d8:	93 30       	cpi	r25, 0x03	; 3
    41da:	08 f4       	brcc	.+2      	; 0x41de <__vector_29+0x3c6>
    41dc:	6e c1       	rjmp	.+732    	; 0x44ba <__vector_29+0x6a2>
    41de:	94 30       	cpi	r25, 0x04	; 4
    41e0:	09 f4       	brne	.+2      	; 0x41e4 <__vector_29+0x3cc>
    41e2:	d0 c2       	rjmp	.+1440   	; 0x4784 <__vector_29+0x96c>
    41e4:	95 30       	cpi	r25, 0x05	; 5
    41e6:	08 f4       	brcc	.+2      	; 0x41ea <__vector_29+0x3d2>
    41e8:	bf c2       	rjmp	.+1406   	; 0x4768 <__vector_29+0x950>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 5;
				break;

			case 5:
				currentAdChannel = currentProx+1;
    41ea:	80 91 24 02 	lds	r24, 0x0224
    41ee:	8f 5f       	subi	r24, 0xFF	; 255
    41f0:	80 93 23 02 	sts	0x0223, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    41f4:	86 e0       	ldi	r24, 0x06	; 6
    41f6:	80 93 b9 02 	sts	0x02B9, r24
				irCommAdcRxState = 6;
    41fa:	80 93 e7 04 	sts	0x04E7, r24
    41fe:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    4202:	68 ce       	rjmp	.-816    	; 0x3ed4 <__vector_29+0xbc>
			right_current_avg += value;
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
			break;

		case SAVE_TO_RIGHT_MOTOR_VEL:
			if(firstSampleRight > 0) {
    4204:	20 91 09 02 	lds	r18, 0x0209
    4208:	22 23       	and	r18, r18
    420a:	09 f4       	brne	.+2      	; 0x420e <__vector_29+0x3f6>
    420c:	9a ce       	rjmp	.-716    	; 0x3f42 <__vector_29+0x12a>
			    // sometimes it was noticed that the velocity is sampled even if the pwm
			    // is in its active phase; as a workaround simply skip the samples in these
			    // cases
				if(((PINE & _BV(PE3))>>3) || ((PINE & _BV(PE4))>>4)) {  // if active phase for either forward or backward direction
    420e:	63 99       	sbic	0x0c, 3	; 12
    4210:	98 ce       	rjmp	.-720    	; 0x3f42 <__vector_29+0x12a>
    4212:	64 99       	sbic	0x0c, 4	; 12
    4214:	96 ce       	rjmp	.-724    	; 0x3f42 <__vector_29+0x12a>
					//LED_RED_ON;
					break;
				}
				firstSampleRight++;
    4216:	42 2f       	mov	r20, r18
    4218:	4f 5f       	subi	r20, 0xFF	; 255
    421a:	40 93 09 02 	sts	0x0209, r20
				if(firstSampleRight > 4) {				// to skip undesired samples (3 samples skipped) in which there could be glitches
    421e:	45 30       	cpi	r20, 0x05	; 5
    4220:	08 f4       	brcc	.+2      	; 0x4224 <__vector_29+0x40c>
    4222:	8f ce       	rjmp	.-738    	; 0x3f42 <__vector_29+0x12a>
					if(pwm_right != 0) {
    4224:	20 91 f5 02 	lds	r18, 0x02F5
    4228:	30 91 f6 02 	lds	r19, 0x02F6
    422c:	21 15       	cp	r18, r1
    422e:	31 05       	cpc	r19, r1
    4230:	51 f0       	breq	.+20     	; 0x4246 <__vector_29+0x42e>
						right_vel_sum += value;
    4232:	20 91 ef 02 	lds	r18, 0x02EF
    4236:	30 91 f0 02 	lds	r19, 0x02F0
    423a:	28 0f       	add	r18, r24
    423c:	39 1f       	adc	r19, r25
    423e:	30 93 f0 02 	sts	0x02F0, r19
    4242:	20 93 ef 02 	sts	0x02EF, r18
					}
					if(firstSampleRight==8) {			// number of samples to take for the speed computation (average of 4 samples)
    4246:	48 30       	cpi	r20, 0x08	; 8
    4248:	09 f0       	breq	.+2      	; 0x424c <__vector_29+0x434>
    424a:	7b ce       	rjmp	.-778    	; 0x3f42 <__vector_29+0x12a>
						firstSampleRight = 0;
    424c:	10 92 09 02 	sts	0x0209, r1
						compute_right_vel = 1;
    4250:	81 e0       	ldi	r24, 0x01	; 1
    4252:	80 93 08 02 	sts	0x0208, r24
    4256:	75 ce       	rjmp	.-790    	; 0x3f42 <__vector_29+0x12a>
			left_current_avg += value;
			left_current_avg = left_current_avg >> 1;
			break;

		case SAVE_TO_LEFT_MOTOR_VEL:
			if(firstSampleLeft > 0) {
    4258:	20 91 0a 02 	lds	r18, 0x020A
    425c:	22 23       	and	r18, r18
    425e:	09 f4       	brne	.+2      	; 0x4262 <__vector_29+0x44a>
    4260:	70 ce       	rjmp	.-800    	; 0x3f42 <__vector_29+0x12a>
				if(((PINH & _BV(PH3))>>3) || ((PINH & _BV(PH4))>>4)) {
    4262:	30 91 00 01 	lds	r19, 0x0100
    4266:	33 fd       	sbrc	r19, 3
    4268:	6c ce       	rjmp	.-808    	; 0x3f42 <__vector_29+0x12a>
    426a:	30 91 00 01 	lds	r19, 0x0100
    426e:	34 fd       	sbrc	r19, 4
    4270:	68 ce       	rjmp	.-816    	; 0x3f42 <__vector_29+0x12a>
					//LED_RED_ON;
					break;
				}
				firstSampleLeft++;
    4272:	42 2f       	mov	r20, r18
    4274:	4f 5f       	subi	r20, 0xFF	; 255
    4276:	40 93 0a 02 	sts	0x020A, r20
				if(firstSampleLeft > 4) {
    427a:	45 30       	cpi	r20, 0x05	; 5
    427c:	08 f4       	brcc	.+2      	; 0x4280 <__vector_29+0x468>
    427e:	61 ce       	rjmp	.-830    	; 0x3f42 <__vector_29+0x12a>
					if(pwm_left != 0) {
    4280:	20 91 f7 02 	lds	r18, 0x02F7
    4284:	30 91 f8 02 	lds	r19, 0x02F8
    4288:	21 15       	cp	r18, r1
    428a:	31 05       	cpc	r19, r1
    428c:	51 f0       	breq	.+20     	; 0x42a2 <__vector_29+0x48a>
						left_vel_sum += value;
    428e:	20 91 ed 02 	lds	r18, 0x02ED
    4292:	30 91 ee 02 	lds	r19, 0x02EE
    4296:	28 0f       	add	r18, r24
    4298:	39 1f       	adc	r19, r25
    429a:	30 93 ee 02 	sts	0x02EE, r19
    429e:	20 93 ed 02 	sts	0x02ED, r18
					}
					if(firstSampleLeft==8) {
    42a2:	48 30       	cpi	r20, 0x08	; 8
    42a4:	09 f0       	breq	.+2      	; 0x42a8 <__vector_29+0x490>
    42a6:	4d ce       	rjmp	.-870    	; 0x3f42 <__vector_29+0x12a>
						firstSampleLeft = 0;
    42a8:	10 92 0a 02 	sts	0x020A, r1
						compute_left_vel = 1;
    42ac:	81 e0       	ldi	r24, 0x01	; 1
    42ae:	80 93 07 02 	sts	0x0207, r24
    42b2:	47 ce       	rjmp	.-882    	; 0x3f42 <__vector_29+0x12a>
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
		switch(irCommAdcTxState) {
    42b4:	83 30       	cpi	r24, 0x03	; 3
    42b6:	09 f4       	brne	.+2      	; 0x42ba <__vector_29+0x4a2>
    42b8:	7c c0       	rjmp	.+248    	; 0x43b2 <__vector_29+0x59a>
    42ba:	84 30       	cpi	r24, 0x04	; 4
    42bc:	09 f0       	breq	.+2      	; 0x42c0 <__vector_29+0x4a8>
    42be:	08 ce       	rjmp	.-1008   	; 0x3ed0 <__vector_29+0xb8>
				}
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ2;
				break;

			case IRCOMM_TX_ADC_TRANSMISSION_SEQ2:
				irCommTxDurationCycle++;
    42c0:	20 91 13 05 	lds	r18, 0x0513
    42c4:	2f 5f       	subi	r18, 0xFF	; 255
    42c6:	20 93 13 05 	sts	0x0513, r18
				if(irCommTxDurationCycle == irCommTxDuration) {
    42ca:	30 e0       	ldi	r19, 0x00	; 0
    42cc:	80 91 0f 05 	lds	r24, 0x050F
    42d0:	90 91 10 05 	lds	r25, 0x0510
    42d4:	28 17       	cp	r18, r24
    42d6:	39 07       	cpc	r19, r25
    42d8:	09 f4       	brne	.+2      	; 0x42dc <__vector_29+0x4c4>
    42da:	08 c1       	rjmp	.+528    	; 0x44ec <__vector_29+0x6d4>
						irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;
						adcSaveDataTo = SKIP_SAMPLE;
						break;
					}
				}
				currentAdChannel = currentMotLeftChannel;
    42dc:	80 91 25 02 	lds	r24, 0x0225
    42e0:	80 93 23 02 	sts	0x0223, r24
				leftChannelPhase = leftMotorPhase;
    42e4:	80 91 28 02 	lds	r24, 0x0228
    42e8:	80 93 bc 02 	sts	0x02BC, r24
				if(rightChannelPhase == ACTIVE_PHASE) {
    42ec:	80 91 bb 02 	lds	r24, 0x02BB
    42f0:	88 23       	and	r24, r24
    42f2:	09 f4       	brne	.+2      	; 0x42f6 <__vector_29+0x4de>
    42f4:	cf c0       	rjmp	.+414    	; 0x4494 <__vector_29+0x67c>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    42f6:	81 30       	cpi	r24, 0x01	; 1
    42f8:	09 f4       	brne	.+2      	; 0x42fc <__vector_29+0x4e4>
    42fa:	b5 c2       	rjmp	.+1386   	; 0x4866 <__vector_29+0xa4e>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    42fc:	85 e0       	ldi	r24, 0x05	; 5
    42fe:	80 93 b9 02 	sts	0x02B9, r24
				}
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ1;
    4302:	83 e0       	ldi	r24, 0x03	; 3
    4304:	80 93 05 05 	sts	0x0505, r24
    4308:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    430c:	e3 cd       	rjmp	.-1082   	; 0x3ed4 <__vector_29+0xbc>
				adcSaveDataTo = SKIP_SAMPLE;
				break;

		}
	} else if(irCommMode==IRCOMM_MODE_SENSORS_SAMPLING) {
		switch(adcSamplingState) {
    430e:	83 30       	cpi	r24, 0x03	; 3
    4310:	09 f4       	brne	.+2      	; 0x4314 <__vector_29+0x4fc>
    4312:	37 c1       	rjmp	.+622    	; 0x4582 <__vector_29+0x76a>
    4314:	84 30       	cpi	r24, 0x04	; 4
    4316:	09 f0       	breq	.+2      	; 0x431a <__vector_29+0x502>
    4318:	dd cd       	rjmp	.-1094   	; 0x3ed4 <__vector_29+0xbc>
				}
				adcSamplingState = 4;
				break;

			case 4:	// right motor
				currentAdChannel = currentMotRightChannel;
    431a:	90 91 26 02 	lds	r25, 0x0226
    431e:	90 93 23 02 	sts	0x0223, r25
				rightChannelPhase = rightMotorPhase;
    4322:	90 91 27 02 	lds	r25, 0x0227
    4326:	90 93 bb 02 	sts	0x02BB, r25
				if(leftChannelPhase == ACTIVE_PHASE) {
    432a:	90 91 bc 02 	lds	r25, 0x02BC
    432e:	99 23       	and	r25, r25
    4330:	09 f0       	breq	.+2      	; 0x4334 <__vector_29+0x51c>
    4332:	6a c1       	rjmp	.+724    	; 0x4608 <__vector_29+0x7f0>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    4334:	83 e0       	ldi	r24, 0x03	; 3
    4336:	80 93 b9 02 	sts	0x02B9, r24
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 0;
    433a:	10 92 ba 02 	sts	0x02BA, r1

				if(currentProx==14 && measBattery==1) {
    433e:	60 91 24 02 	lds	r22, 0x0224
    4342:	6e 30       	cpi	r22, 0x0E	; 14
    4344:	09 f4       	brne	.+2      	; 0x4348 <__vector_29+0x530>
    4346:	2c c2       	rjmp	.+1112   	; 0x47a0 <__vector_29+0x988>
					measBattery=2;
					SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
				}

				// turn on the IR pulses for the proximities only in their active phases
				if(currentProx & 0x01) {
    4348:	86 2f       	mov	r24, r22
    434a:	90 e0       	ldi	r25, 0x00	; 0
    434c:	60 ff       	sbrs	r22, 0
    434e:	c0 cd       	rjmp	.-1152   	; 0x3ed0 <__vector_29+0xb8>
					if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
    4350:	60 31       	cpi	r22, 0x10	; 16
    4352:	08 f0       	brcs	.+2      	; 0x4356 <__vector_29+0x53e>
    4354:	33 c2       	rjmp	.+1126   	; 0x47bc <__vector_29+0x9a4>
											// PORTA for proximity sensors, PORTJ for ground sensors
						PORTA = (1 << (currentProx>>1));	// pulse on
    4356:	66 95       	lsr	r22
    4358:	81 e0       	ldi	r24, 0x01	; 1
    435a:	90 e0       	ldi	r25, 0x00	; 0
    435c:	02 c0       	rjmp	.+4      	; 0x4362 <__vector_29+0x54a>
    435e:	88 0f       	add	r24, r24
    4360:	99 1f       	adc	r25, r25
    4362:	6a 95       	dec	r22
    4364:	e2 f7       	brpl	.-8      	; 0x435e <__vector_29+0x546>
    4366:	82 b9       	out	0x02, r24	; 2
    4368:	80 91 ba 02 	lds	r24, 0x02BA
    436c:	b3 cd       	rjmp	.-1178   	; 0x3ed4 <__vector_29+0xbc>
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
    436e:	99 30       	cpi	r25, 0x09	; 9
    4370:	09 f4       	brne	.+2      	; 0x4374 <__vector_29+0x55c>
    4372:	c3 c1       	rjmp	.+902    	; 0x46fa <__vector_29+0x8e2>
    4374:	9a 30       	cpi	r25, 0x0A	; 10
    4376:	08 f0       	brcs	.+2      	; 0x437a <__vector_29+0x562>
    4378:	91 c0       	rjmp	.+290    	; 0x449c <__vector_29+0x684>
    437a:	97 30       	cpi	r25, 0x07	; 7
    437c:	09 f4       	brne	.+2      	; 0x4380 <__vector_29+0x568>
    437e:	e3 c1       	rjmp	.+966    	; 0x4746 <__vector_29+0x92e>
    4380:	98 30       	cpi	r25, 0x08	; 8
    4382:	09 f0       	breq	.+2      	; 0x4386 <__vector_29+0x56e>
    4384:	a5 cd       	rjmp	.-1206   	; 0x3ed0 <__vector_29+0xb8>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 8;
				break;

			case 8:
				currentAdChannel = currentMotRightChannel;
    4386:	80 91 26 02 	lds	r24, 0x0226
    438a:	80 93 23 02 	sts	0x0223, r24
				rightChannelPhase = rightMotorPhase;
    438e:	80 91 27 02 	lds	r24, 0x0227
    4392:	80 93 bb 02 	sts	0x02BB, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    4396:	80 91 bc 02 	lds	r24, 0x02BC
    439a:	88 23       	and	r24, r24
    439c:	09 f0       	breq	.+2      	; 0x43a0 <__vector_29+0x588>
    439e:	67 c2       	rjmp	.+1230   	; 0x486e <__vector_29+0xa56>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    43a0:	83 e0       	ldi	r24, 0x03	; 3
    43a2:	80 93 b9 02 	sts	0x02B9, r24
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				irCommAdcRxState = 9;
    43a6:	89 e0       	ldi	r24, 0x09	; 9
    43a8:	80 93 e7 04 	sts	0x04E7, r24
    43ac:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    43b0:	91 cd       	rjmp	.-1246   	; 0x3ed4 <__vector_29+0xbc>

			case IRCOMM_TX_ADC_WAIT_PREPARATION:
				break;

			case IRCOMM_TX_ADC_TRANSMISSION_SEQ1:
				irCommTxDurationCycle++;
    43b2:	20 91 13 05 	lds	r18, 0x0513
    43b6:	2f 5f       	subi	r18, 0xFF	; 255
    43b8:	20 93 13 05 	sts	0x0513, r18
				if(irCommTxDurationCycle == irCommTxDuration) {
    43bc:	30 e0       	ldi	r19, 0x00	; 0
    43be:	80 91 0f 05 	lds	r24, 0x050F
    43c2:	90 91 10 05 	lds	r25, 0x0510
    43c6:	28 17       	cp	r18, r24
    43c8:	39 07       	cpc	r19, r25
    43ca:	09 f4       	brne	.+2      	; 0x43ce <__vector_29+0x5b6>
    43cc:	be c0       	rjmp	.+380    	; 0x454a <__vector_29+0x732>
						irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;						
						adcSaveDataTo = SKIP_SAMPLE;
						break;
					}
				}	
				currentAdChannel = currentMotRightChannel;
    43ce:	80 91 26 02 	lds	r24, 0x0226
    43d2:	80 93 23 02 	sts	0x0223, r24
				rightChannelPhase = rightMotorPhase;
    43d6:	80 91 27 02 	lds	r24, 0x0227
    43da:	80 93 bb 02 	sts	0x02BB, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    43de:	80 91 bc 02 	lds	r24, 0x02BC
    43e2:	88 23       	and	r24, r24
    43e4:	09 f4       	brne	.+2      	; 0x43e8 <__vector_29+0x5d0>
    43e6:	52 c0       	rjmp	.+164    	; 0x448c <__vector_29+0x674>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    43e8:	81 30       	cpi	r24, 0x01	; 1
    43ea:	09 f4       	brne	.+2      	; 0x43ee <__vector_29+0x5d6>
    43ec:	38 c2       	rjmp	.+1136   	; 0x485e <__vector_29+0xa46>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    43ee:	85 e0       	ldi	r24, 0x05	; 5
    43f0:	80 93 b9 02 	sts	0x02B9, r24
				}
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ2;
    43f4:	84 e0       	ldi	r24, 0x04	; 4
    43f6:	80 93 05 05 	sts	0x0505, r24
    43fa:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    43fe:	6a cd       	rjmp	.-1324   	; 0x3ed4 <__vector_29+0xbc>
	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
		switch(irCommAdcTxState) {
			case IRCOMM_TX_ADC_TURN_OFF_SENSORS:
				// turn off all proximity
				if(hardwareRevision == HW_REV_3_0) {
    4400:	20 91 4f 04 	lds	r18, 0x044F
    4404:	22 23       	and	r18, r18
    4406:	01 f5       	brne	.+64     	; 0x4448 <__vector_29+0x630>
					PORTJ &= 0xF0;	// ground
    4408:	80 91 05 01 	lds	r24, 0x0105
    440c:	80 7f       	andi	r24, 0xF0	; 240
    440e:	80 93 05 01 	sts	0x0105, r24
					PORTA = 0x00;	// proximity
    4412:	12 b8       	out	0x02, r1	; 2

				if(hardwareRevision == HW_REV_3_1) {
					PORTJ = 0xFF;	// ground
					PORTA = 0x00;	// proximtiy
				}
				currentAdChannel = currentMotLeftChannel;
    4414:	80 91 25 02 	lds	r24, 0x0225
    4418:	80 93 23 02 	sts	0x0223, r24
				leftChannelPhase = leftMotorPhase;
    441c:	80 91 28 02 	lds	r24, 0x0228
    4420:	80 93 bc 02 	sts	0x02BC, r24
				adcSaveDataTo = SKIP_SAMPLE;				
    4424:	85 e0       	ldi	r24, 0x05	; 5
    4426:	80 93 b9 02 	sts	0x02B9, r24
				irCommState = IRCOMM_TX_PREPARE_TRANSMISSION;
    442a:	80 93 c7 04 	sts	0x04C7, r24
				irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;
    442e:	82 e0       	ldi	r24, 0x02	; 2
    4430:	80 93 05 05 	sts	0x0505, r24
				if(irCommTxSensorGroup==0) {
    4434:	80 91 15 05 	lds	r24, 0x0515
    4438:	88 23       	and	r24, r24
    443a:	19 f5       	brne	.+70     	; 0x4482 <__vector_29+0x66a>
					irCommTxSensorGroup = 1;
    443c:	81 e0       	ldi	r24, 0x01	; 1
    443e:	80 93 15 05 	sts	0x0515, r24
    4442:	80 91 ba 02 	lds	r24, 0x02BA
    4446:	46 cd       	rjmp	.-1396   	; 0x3ed4 <__vector_29+0xbc>
				if(hardwareRevision == HW_REV_3_0) {
					PORTJ &= 0xF0;	// ground
					PORTA = 0x00;	// proximity
				}

				if(hardwareRevision == HW_REV_3_0_1) {
    4448:	21 30       	cpi	r18, 0x01	; 1
    444a:	11 f0       	breq	.+4      	; 0x4450 <__vector_29+0x638>
					PORTJ = 0xFF;	// ground
					PORTA = 0x00;	// proximity
				}

				if(hardwareRevision == HW_REV_3_1) {
    444c:	22 30       	cpi	r18, 0x02	; 2
    444e:	11 f7       	brne	.-60     	; 0x4414 <__vector_29+0x5fc>
					PORTJ = 0xFF;	// ground
    4450:	8f ef       	ldi	r24, 0xFF	; 255
    4452:	80 93 05 01 	sts	0x0105, r24
					PORTA = 0x00;	// proximtiy
    4456:	12 b8       	out	0x02, r1	; 2
    4458:	dd cf       	rjmp	.-70     	; 0x4414 <__vector_29+0x5fc>
		}
	} else if(irCommMode==IRCOMM_MODE_SENSORS_SAMPLING) {
		switch(adcSamplingState) {

			case 0:	// proximity
				currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
    445a:	80 91 24 02 	lds	r24, 0x0224
    445e:	86 95       	lsr	r24
    4460:	80 93 23 02 	sts	0x0223, r24
																// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
				if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
    4464:	80 91 bb 02 	lds	r24, 0x02BB
    4468:	88 23       	and	r24, r24
    446a:	09 f0       	breq	.+2      	; 0x446e <__vector_29+0x656>
    446c:	bf c0       	rjmp	.+382    	; 0x45ec <__vector_29+0x7d4>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    446e:	81 e0       	ldi	r24, 0x01	; 1
    4470:	80 93 b9 02 	sts	0x02B9, r24
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 1;
    4474:	81 e0       	ldi	r24, 0x01	; 1
    4476:	80 93 ba 02 	sts	0x02BA, r24
				break;
    447a:	2c cd       	rjmp	.-1448   	; 0x3ed4 <__vector_29+0xbc>
					} else {
						cliffDetectedFlag = 0;
						//LED_RED_OFF;
					}
				} else {
					cliffDetectedFlag = 0;
    447c:	10 92 6e 04 	sts	0x046E, r1
    4480:	27 ce       	rjmp	.-946    	; 0x40d0 <__vector_29+0x2b8>
				irCommState = IRCOMM_TX_PREPARE_TRANSMISSION;
				irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;
				if(irCommTxSensorGroup==0) {
					irCommTxSensorGroup = 1;
				} else {
					irCommTxSensorGroup = 0;
    4482:	10 92 15 05 	sts	0x0515, r1
    4486:	80 91 ba 02 	lds	r24, 0x02BA
    448a:	24 cd       	rjmp	.-1464   	; 0x3ed4 <__vector_29+0xbc>
					}
				}	
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    448c:	83 e0       	ldi	r24, 0x03	; 3
    448e:	80 93 b9 02 	sts	0x02B9, r24
    4492:	b0 cf       	rjmp	.-160    	; 0x43f4 <__vector_29+0x5dc>
					}
				}
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    4494:	81 e0       	ldi	r24, 0x01	; 1
    4496:	80 93 b9 02 	sts	0x02B9, r24
    449a:	33 cf       	rjmp	.-410    	; 0x4302 <__vector_29+0x4ea>
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
    449c:	9b 30       	cpi	r25, 0x0B	; 11
    449e:	09 f4       	brne	.+2      	; 0x44a2 <__vector_29+0x68a>
    44a0:	0f c1       	rjmp	.+542    	; 0x46c0 <__vector_29+0x8a8>
    44a2:	9b 30       	cpi	r25, 0x0B	; 11
    44a4:	08 f4       	brcc	.+2      	; 0x44a8 <__vector_29+0x690>
    44a6:	e2 c0       	rjmp	.+452    	; 0x466c <__vector_29+0x854>
    44a8:	9c 30       	cpi	r25, 0x0C	; 12
    44aa:	09 f0       	breq	.+2      	; 0x44ae <__vector_29+0x696>
    44ac:	11 cd       	rjmp	.-1502   	; 0x3ed0 <__vector_29+0xb8>
				}
				irCommAdcRxState = 0;
				break;

			case 12:
				adcSaveDataTo = SKIP_SAMPLE;
    44ae:	85 e0       	ldi	r24, 0x05	; 5
    44b0:	80 93 b9 02 	sts	0x02B9, r24
    44b4:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    44b8:	0d cd       	rjmp	.-1510   	; 0x3ed4 <__vector_29+0xbc>
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
    44ba:	99 23       	and	r25, r25
    44bc:	09 f4       	brne	.+2      	; 0x44c0 <__vector_29+0x6a8>
    44be:	11 c1       	rjmp	.+546    	; 0x46e2 <__vector_29+0x8ca>
    44c0:	91 30       	cpi	r25, 0x01	; 1
    44c2:	09 f0       	breq	.+2      	; 0x44c6 <__vector_29+0x6ae>
    44c4:	05 cd       	rjmp	.-1526   	; 0x3ed0 <__vector_29+0xb8>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 1;
				break;

			case 1:
				currentAdChannel = currentProx+1;
    44c6:	80 91 24 02 	lds	r24, 0x0224
    44ca:	8f 5f       	subi	r24, 0xFF	; 255
    44cc:	80 93 23 02 	sts	0x0223, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    44d0:	86 e0       	ldi	r24, 0x06	; 6
    44d2:	80 93 b9 02 	sts	0x02B9, r24
				irCommAdcRxState = 2;
    44d6:	82 e0       	ldi	r24, 0x02	; 2
    44d8:	80 93 e7 04 	sts	0x04E7, r24
    44dc:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    44e0:	f9 cc       	rjmp	.-1550   	; 0x3ed4 <__vector_29+0xbc>
					irCommMode = IRCOMM_MODE_RECEIVE;					
				}
				if(irCommEnabled==IRCOMM_MODE_TRANSMIT && currentProx==23) {
					irCommMode = IRCOMM_MODE_TRANSMIT;
					if(irCommTxByteEnqueued==1) {
						irCommAdcTxState = IRCOMM_TX_ADC_TURN_OFF_SENSORS;
    44e2:	80 93 05 05 	sts	0x0505, r24
    44e6:	80 91 ba 02 	lds	r24, 0x02BA
    44ea:	f4 cc       	rjmp	.-1560   	; 0x3ed4 <__vector_29+0xbc>
				break;

			case IRCOMM_TX_ADC_TRANSMISSION_SEQ2:
				irCommTxDurationCycle++;
				if(irCommTxDurationCycle == irCommTxDuration) {
					irCommTxDurationCycle = 0;
    44ec:	10 92 13 05 	sts	0x0513, r1
					if(irCommTxPulseState == 0) {
    44f0:	80 91 0e 05 	lds	r24, 0x050E
    44f4:	88 23       	and	r24, r24
    44f6:	09 f0       	breq	.+2      	; 0x44fa <__vector_29+0x6e2>
    44f8:	a7 c1       	rjmp	.+846    	; 0x4848 <__vector_29+0xa30>
						irCommTxPulseState = 1;
    44fa:	81 e0       	ldi	r24, 0x01	; 1
    44fc:	80 93 0e 05 	sts	0x050E, r24
						//PORTA = 0xFF;
						//PORTA = 0x01;
						//PORTA = irCommTxSensorMask;
						if(irCommTxSensorGroup==0) {
    4500:	80 91 15 05 	lds	r24, 0x0515
    4504:	88 23       	and	r24, r24
    4506:	09 f0       	breq	.+2      	; 0x450a <__vector_29+0x6f2>
    4508:	e2 c1       	rjmp	.+964    	; 0x48ce <__vector_29+0xab6>
							PORTA = 0xAA;
    450a:	8a ea       	ldi	r24, 0xAA	; 170
    450c:	82 b9       	out	0x02, r24	; 2
						}
					} else {
						irCommTxPulseState = 0;
						PORTA = 0x00;
					}
					irCommTxSwitchCounter++;
    450e:	80 91 12 05 	lds	r24, 0x0512
    4512:	8f 5f       	subi	r24, 0xFF	; 255
    4514:	80 93 12 05 	sts	0x0512, r24
					if(irCommTxSwitchCounter == irCommTxSwitchCount) {
    4518:	90 91 11 05 	lds	r25, 0x0511
    451c:	89 17       	cp	r24, r25
    451e:	09 f0       	breq	.+2      	; 0x4522 <__vector_29+0x70a>
    4520:	dd ce       	rjmp	.-582    	; 0x42dc <__vector_29+0x4c4>
						irCommTxBitCount++;
    4522:	80 91 0d 05 	lds	r24, 0x050D
    4526:	8f 5f       	subi	r24, 0xFF	; 255
    4528:	80 93 0d 05 	sts	0x050D, r24
						if(irCommTxBitCount==12) {
    452c:	8c 30       	cpi	r24, 0x0C	; 12
    452e:	09 f4       	brne	.+2      	; 0x4532 <__vector_29+0x71a>
    4530:	5b c2       	rjmp	.+1206   	; 0x49e8 <__vector_29+0xbd0>
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
							irCommInitReceiver();
							PORTA = 0x00;
							irCommTxLastTransmissionTime = getTime100MicroSec();
						} else {
							irCommState = IRCOMM_TX_COMPUTE_TIMINGS;
    4532:	82 e0       	ldi	r24, 0x02	; 2
    4534:	80 93 c7 04 	sts	0x04C7, r24
						}
						irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;
    4538:	82 e0       	ldi	r24, 0x02	; 2
    453a:	80 93 05 05 	sts	0x0505, r24
						adcSaveDataTo = SKIP_SAMPLE;
    453e:	85 e0       	ldi	r24, 0x05	; 5
    4540:	80 93 b9 02 	sts	0x02B9, r24
    4544:	80 91 ba 02 	lds	r24, 0x02BA
						break;
    4548:	c5 cc       	rjmp	.-1654   	; 0x3ed4 <__vector_29+0xbc>
				break;

			case IRCOMM_TX_ADC_TRANSMISSION_SEQ1:
				irCommTxDurationCycle++;
				if(irCommTxDurationCycle == irCommTxDuration) {
					irCommTxDurationCycle = 0;
    454a:	10 92 13 05 	sts	0x0513, r1
					if(irCommTxPulseState == 0) {
    454e:	80 91 0e 05 	lds	r24, 0x050E
    4552:	88 23       	and	r24, r24
    4554:	09 f0       	breq	.+2      	; 0x4558 <__vector_29+0x740>
    4556:	74 c1       	rjmp	.+744    	; 0x4840 <__vector_29+0xa28>
						irCommTxPulseState = 1;
    4558:	81 e0       	ldi	r24, 0x01	; 1
    455a:	80 93 0e 05 	sts	0x050E, r24
						//PORTA = 0xFF;
						//PORTA = 0x01;
						//PORTA = irCommTxSensorMask;
						if(irCommTxSensorGroup==0) {
    455e:	80 91 15 05 	lds	r24, 0x0515
    4562:	88 23       	and	r24, r24
    4564:	09 f0       	breq	.+2      	; 0x4568 <__vector_29+0x750>
    4566:	b0 c1       	rjmp	.+864    	; 0x48c8 <__vector_29+0xab0>
							PORTA = 0xAA;
    4568:	8a ea       	ldi	r24, 0xAA	; 170
    456a:	82 b9       	out	0x02, r24	; 2
						}
					} else {
						irCommTxPulseState = 0;
						PORTA = 0x00;
					}
					irCommTxSwitchCounter++;
    456c:	80 91 12 05 	lds	r24, 0x0512
    4570:	8f 5f       	subi	r24, 0xFF	; 255
    4572:	80 93 12 05 	sts	0x0512, r24
					if(irCommTxSwitchCounter == irCommTxSwitchCount) {
    4576:	90 91 11 05 	lds	r25, 0x0511
    457a:	89 17       	cp	r24, r25
    457c:	09 f0       	breq	.+2      	; 0x4580 <__vector_29+0x768>
    457e:	27 cf       	rjmp	.-434    	; 0x43ce <__vector_29+0x5b6>
    4580:	d0 cf       	rjmp	.-96     	; 0x4522 <__vector_29+0x70a>
				}
				adcSamplingState = 3;
				break;

			case 3:	// left motor
				currentAdChannel = currentMotLeftChannel;
    4582:	80 91 25 02 	lds	r24, 0x0225
    4586:	80 93 23 02 	sts	0x0223, r24
				leftChannelPhase = leftMotorPhase;
    458a:	80 91 28 02 	lds	r24, 0x0228
    458e:	80 93 bc 02 	sts	0x02BC, r24
				if(rightChannelPhase == ACTIVE_PHASE) {
    4592:	80 91 bb 02 	lds	r24, 0x02BB
    4596:	88 23       	and	r24, r24
    4598:	e9 f5       	brne	.+122    	; 0x4614 <__vector_29+0x7fc>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    459a:	81 e0       	ldi	r24, 0x01	; 1
    459c:	80 93 b9 02 	sts	0x02B9, r24
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 4;
    45a0:	84 e0       	ldi	r24, 0x04	; 4
    45a2:	80 93 ba 02 	sts	0x02BA, r24
				break;
    45a6:	96 cc       	rjmp	.-1748   	; 0x3ed4 <__vector_29+0xbc>
					}
				}
				break;

			case 2:	// right motor
				currentAdChannel = currentMotRightChannel;
    45a8:	80 91 26 02 	lds	r24, 0x0226
    45ac:	80 93 23 02 	sts	0x0223, r24
				rightChannelPhase = rightMotorPhase;
    45b0:	80 91 27 02 	lds	r24, 0x0227
    45b4:	80 93 bb 02 	sts	0x02BB, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    45b8:	80 91 bc 02 	lds	r24, 0x02BC
    45bc:	88 23       	and	r24, r24
    45be:	e9 f4       	brne	.+58     	; 0x45fa <__vector_29+0x7e2>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    45c0:	83 e0       	ldi	r24, 0x03	; 3
    45c2:	80 93 b9 02 	sts	0x02B9, r24
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 3;
    45c6:	83 e0       	ldi	r24, 0x03	; 3
    45c8:	80 93 ba 02 	sts	0x02BA, r24
				break;
    45cc:	83 cc       	rjmp	.-1786   	; 0x3ed4 <__vector_29+0xbc>
			}
			currentProx++;
			break;

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    45ce:	20 91 bf 02 	lds	r18, 0x02BF
    45d2:	22 30       	cpi	r18, 0x02	; 2
    45d4:	09 f0       	breq	.+2      	; 0x45d8 <__vector_29+0x7c0>
    45d6:	f9 cc       	rjmp	.-1550   	; 0x3fca <__vector_29+0x1b2>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
    45d8:	90 93 be 02 	sts	0x02BE, r25
    45dc:	80 93 bd 02 	sts	0x02BD, r24
				measBattery = 0;
    45e0:	10 92 bf 02 	sts	0x02BF, r1
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
    45e4:	46 98       	cbi	0x08, 6	; 8
    45e6:	2e e0       	ldi	r18, 0x0E	; 14
    45e8:	30 e0       	ldi	r19, 0x00	; 0
    45ea:	f8 cc       	rjmp	.-1552   	; 0x3fdc <__vector_29+0x1c4>
			case 0:	// proximity
				currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
																// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
				if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    45ec:	81 30       	cpi	r24, 0x01	; 1
    45ee:	09 f4       	brne	.+2      	; 0x45f2 <__vector_29+0x7da>
    45f0:	48 c1       	rjmp	.+656    	; 0x4882 <__vector_29+0xa6a>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    45f2:	85 e0       	ldi	r24, 0x05	; 5
    45f4:	80 93 b9 02 	sts	0x02B9, r24
    45f8:	3d cf       	rjmp	.-390    	; 0x4474 <__vector_29+0x65c>
			case 2:	// right motor
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    45fa:	81 30       	cpi	r24, 0x01	; 1
    45fc:	09 f4       	brne	.+2      	; 0x4600 <__vector_29+0x7e8>
    45fe:	3d c1       	rjmp	.+634    	; 0x487a <__vector_29+0xa62>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4600:	85 e0       	ldi	r24, 0x05	; 5
    4602:	80 93 b9 02 	sts	0x02B9, r24
    4606:	df cf       	rjmp	.-66     	; 0x45c6 <__vector_29+0x7ae>
			case 4:	// right motor
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    4608:	91 30       	cpi	r25, 0x01	; 1
    460a:	09 f0       	breq	.+2      	; 0x460e <__vector_29+0x7f6>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    460c:	85 e0       	ldi	r24, 0x05	; 5
    460e:	80 93 b9 02 	sts	0x02B9, r24
    4612:	93 ce       	rjmp	.-730    	; 0x433a <__vector_29+0x522>
			case 3:	// left motor
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    4614:	81 30       	cpi	r24, 0x01	; 1
    4616:	09 f4       	brne	.+2      	; 0x461a <__vector_29+0x802>
    4618:	38 c1       	rjmp	.+624    	; 0x488a <__vector_29+0xa72>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    461a:	85 e0       	ldi	r24, 0x05	; 5
    461c:	80 93 b9 02 	sts	0x02B9, r24
    4620:	bf cf       	rjmp	.-130    	; 0x45a0 <__vector_29+0x788>
					proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
				//} else {	// ground
				//	proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx];
				//}
				if(proximityResult[currentProx>>1] < 0) {
					proximityResult[currentProx>>1] = 0;
    4622:	11 82       	std	Z+1, r1	; 0x01
    4624:	10 82       	st	Z, r1
    4626:	80 e0       	ldi	r24, 0x00	; 0
    4628:	90 e0       	ldi	r25, 0x00	; 0
    462a:	05 cd       	rjmp	.-1526   	; 0x4036 <__vector_29+0x21e>
					
					if(proximityResult[currentProx>>1] < PHASE1) {

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
    462c:	ac 01       	movw	r20, r24
    462e:	44 5c       	subi	r20, 0xC4	; 196
    4630:	5f 4f       	sbci	r21, 0xFF	; 255
    4632:	55 95       	asr	r21
    4634:	47 95       	ror	r20
    4636:	48 37       	cpi	r20, 0x78	; 120
    4638:	51 05       	cpc	r21, r1
    463a:	0c f0       	brlt	.+2      	; 0x463e <__vector_29+0x826>
    463c:	e8 c0       	rjmp	.+464    	; 0x480e <__vector_29+0x9f6>
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;
    463e:	2f 53       	subi	r18, 0x3F	; 63
    4640:	3d 4f       	sbci	r19, 0xFD	; 253
    4642:	cc 97       	sbiw	r24, 0x3c	; 60
    4644:	95 95       	asr	r25
    4646:	87 95       	ror	r24
    4648:	cc 96       	adiw	r24, 0x3c	; 60
    464a:	f9 01       	movw	r30, r18
    464c:	91 83       	std	Z+1, r25	; 0x01
    464e:	80 83       	st	Z, r24
    4650:	fe cc       	rjmp	.-1540   	; 0x404e <__vector_29+0x236>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 6;
				break;

			case 6:
				currentAdChannel = currentProx+1;
    4652:	80 91 24 02 	lds	r24, 0x0224
    4656:	8f 5f       	subi	r24, 0xFF	; 255
    4658:	80 93 23 02 	sts	0x0223, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    465c:	90 93 b9 02 	sts	0x02B9, r25
				irCommAdcRxState = 7;
    4660:	87 e0       	ldi	r24, 0x07	; 7
    4662:	80 93 e7 04 	sts	0x04E7, r24
    4666:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    466a:	34 cc       	rjmp	.-1944   	; 0x3ed4 <__vector_29+0xbc>
				}
				irCommAdcRxState = 10;
				break;

			case 10:
				currentAdChannel = currentMotRightChannel;
    466c:	80 91 26 02 	lds	r24, 0x0226
    4670:	80 93 23 02 	sts	0x0223, r24
				rightChannelPhase = rightMotorPhase;
    4674:	80 91 27 02 	lds	r24, 0x0227
    4678:	80 93 bb 02 	sts	0x02BB, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    467c:	80 91 bc 02 	lds	r24, 0x02BC
    4680:	88 23       	and	r24, r24
    4682:	09 f0       	breq	.+2      	; 0x4686 <__vector_29+0x86e>
    4684:	e5 c0       	rjmp	.+458    	; 0x4850 <__vector_29+0xa38>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    4686:	83 e0       	ldi	r24, 0x03	; 3
    4688:	80 93 b9 02 	sts	0x02B9, r24
					}
				} else {
					irCommRxWindowSamples++;
				}
				*/
				if(irCommRxBitSkipped < 254) {	// safety check
    468c:	90 91 01 05 	lds	r25, 0x0501
    4690:	9e 3f       	cpi	r25, 0xFE	; 254
    4692:	18 f4       	brcc	.+6      	; 0x469a <__vector_29+0x882>
					irCommRxBitSkipped++;
    4694:	9f 5f       	subi	r25, 0xFF	; 255
    4696:	90 93 01 05 	sts	0x0501, r25
				}
				irCommRxWindowSamples++;
    469a:	80 91 e8 04 	lds	r24, 0x04E8
    469e:	8f 5f       	subi	r24, 0xFF	; 255
    46a0:	80 93 e8 04 	sts	0x04E8, r24
				if(irCommState==IRCOMM_RX_SYNC_SIGNAL) {
    46a4:	20 91 c7 04 	lds	r18, 0x04C7
    46a8:	24 30       	cpi	r18, 0x04	; 4
    46aa:	09 f4       	brne	.+2      	; 0x46ae <__vector_29+0x896>
    46ac:	02 c1       	rjmp	.+516    	; 0x48b2 <__vector_29+0xa9a>
					if(irCommRxBitSkipped >= irCommShiftCount) {
						irCommState = IRCOMM_RX_WAITING_BIT;
					}
				}

				if(irCommRxWindowSamples == IRCOMM_SAMPLING_WINDOW) {					
    46ae:	84 31       	cpi	r24, 0x14	; 20
    46b0:	09 f4       	brne	.+2      	; 0x46b4 <__vector_29+0x89c>
    46b2:	21 c1       	rjmp	.+578    	; 0x48f6 <__vector_29+0xade>
				} else {
					irCommTickCounter = 0;
					updateBlueLed(0);
				}
				*/
				irCommAdcRxState = 11;
    46b4:	8b e0       	ldi	r24, 0x0B	; 11
    46b6:	80 93 e7 04 	sts	0x04E7, r24
    46ba:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    46be:	0a cc       	rjmp	.-2028   	; 0x3ed4 <__vector_29+0xbc>

			case 11:
				currentAdChannel = 0;	// prox0
    46c0:	10 92 23 02 	sts	0x0223, r1
				if(rightChannelPhase == ACTIVE_PHASE) {
    46c4:	90 91 bb 02 	lds	r25, 0x02BB
    46c8:	99 23       	and	r25, r25
    46ca:	21 f0       	breq	.+8      	; 0x46d4 <__vector_29+0x8bc>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    46cc:	91 30       	cpi	r25, 0x01	; 1
    46ce:	09 f4       	brne	.+2      	; 0x46d2 <__vector_29+0x8ba>
    46d0:	0a c1       	rjmp	.+532    	; 0x48e6 <__vector_29+0xace>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    46d2:	85 e0       	ldi	r24, 0x05	; 5
    46d4:	80 93 b9 02 	sts	0x02B9, r24
				}
				irCommAdcRxState = 0;
    46d8:	10 92 e7 04 	sts	0x04E7, r1
    46dc:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    46e0:	f9 cb       	rjmp	.-2062   	; 0x3ed4 <__vector_29+0xbc>

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
			case 0:				
				currentProx = 0;
    46e2:	10 92 24 02 	sts	0x0224, r1
				currentAdChannel = currentProx+1;				
    46e6:	80 93 23 02 	sts	0x0223, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    46ea:	96 e0       	ldi	r25, 0x06	; 6
    46ec:	90 93 b9 02 	sts	0x02B9, r25
				irCommAdcRxState = 1;
    46f0:	80 93 e7 04 	sts	0x04E7, r24
    46f4:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    46f8:	ed cb       	rjmp	.-2086   	; 0x3ed4 <__vector_29+0xbc>
				}
				irCommAdcRxState = 9;
				break;

			case 9:
				currentAdChannel = currentMotLeftChannel;
    46fa:	90 91 25 02 	lds	r25, 0x0225
    46fe:	90 93 23 02 	sts	0x0223, r25
				leftChannelPhase = leftMotorPhase;
    4702:	90 91 28 02 	lds	r25, 0x0228
    4706:	90 93 bc 02 	sts	0x02BC, r25
				if(rightChannelPhase == ACTIVE_PHASE) {
    470a:	90 91 bb 02 	lds	r25, 0x02BB
    470e:	99 23       	and	r25, r25
    4710:	21 f0       	breq	.+8      	; 0x471a <__vector_29+0x902>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    4712:	91 30       	cpi	r25, 0x01	; 1
    4714:	09 f4       	brne	.+2      	; 0x4718 <__vector_29+0x900>
    4716:	eb c0       	rjmp	.+470    	; 0x48ee <__vector_29+0xad6>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4718:	85 e0       	ldi	r24, 0x05	; 5
    471a:	80 93 b9 02 	sts	0x02B9, r24
				}
				irCommAdcRxState = 10;
    471e:	8a e0       	ldi	r24, 0x0A	; 10
    4720:	80 93 e7 04 	sts	0x04E7, r24
    4724:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    4728:	d5 cb       	rjmp	.-2134   	; 0x3ed4 <__vector_29+0xbc>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 2;
				break;

			case 2:
				currentAdChannel = currentProx+1;
    472a:	80 91 24 02 	lds	r24, 0x0224
    472e:	8f 5f       	subi	r24, 0xFF	; 255
    4730:	80 93 23 02 	sts	0x0223, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    4734:	86 e0       	ldi	r24, 0x06	; 6
    4736:	80 93 b9 02 	sts	0x02B9, r24
				irCommAdcRxState = 3;
    473a:	83 e0       	ldi	r24, 0x03	; 3
    473c:	80 93 e7 04 	sts	0x04E7, r24
    4740:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    4744:	c7 cb       	rjmp	.-2162   	; 0x3ed4 <__vector_29+0xbc>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 7;
				break;

			case 7:
				currentAdChannel = currentMotLeftChannel;
    4746:	80 91 25 02 	lds	r24, 0x0225
    474a:	80 93 23 02 	sts	0x0223, r24
				leftChannelPhase = leftMotorPhase;
    474e:	80 91 28 02 	lds	r24, 0x0228
    4752:	80 93 bc 02 	sts	0x02BC, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    4756:	86 e0       	ldi	r24, 0x06	; 6
    4758:	80 93 b9 02 	sts	0x02B9, r24
				irCommAdcRxState = 8;
    475c:	88 e0       	ldi	r24, 0x08	; 8
    475e:	80 93 e7 04 	sts	0x04E7, r24
    4762:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    4766:	b6 cb       	rjmp	.-2196   	; 0x3ed4 <__vector_29+0xbc>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 3;
				break;

			case 3:
				currentAdChannel = currentProx+1;
    4768:	80 91 24 02 	lds	r24, 0x0224
    476c:	8f 5f       	subi	r24, 0xFF	; 255
    476e:	80 93 23 02 	sts	0x0223, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    4772:	86 e0       	ldi	r24, 0x06	; 6
    4774:	80 93 b9 02 	sts	0x02B9, r24
				irCommAdcRxState = 4;
    4778:	84 e0       	ldi	r24, 0x04	; 4
    477a:	80 93 e7 04 	sts	0x04E7, r24
    477e:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    4782:	a8 cb       	rjmp	.-2224   	; 0x3ed4 <__vector_29+0xbc>

			case 4:
				currentAdChannel = currentProx+1;
    4784:	80 91 24 02 	lds	r24, 0x0224
    4788:	8f 5f       	subi	r24, 0xFF	; 255
    478a:	80 93 23 02 	sts	0x0223, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    478e:	86 e0       	ldi	r24, 0x06	; 6
    4790:	80 93 b9 02 	sts	0x02B9, r24
				irCommAdcRxState = 5;
    4794:	85 e0       	ldi	r24, 0x05	; 5
    4796:	80 93 e7 04 	sts	0x04E7, r24
    479a:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    479e:	9a cb       	rjmp	.-2252   	; 0x3ed4 <__vector_29+0xbc>
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 0;

				if(currentProx==14 && measBattery==1) {
    47a0:	80 91 bf 02 	lds	r24, 0x02BF
    47a4:	81 30       	cpi	r24, 0x01	; 1
    47a6:	09 f4       	brne	.+2      	; 0x47aa <__vector_29+0x992>
    47a8:	95 c0       	rjmp	.+298    	; 0x48d4 <__vector_29+0xabc>
    47aa:	80 e0       	ldi	r24, 0x00	; 0
    47ac:	93 cb       	rjmp	.-2266   	; 0x3ed4 <__vector_29+0xbc>
			case 1:	// left motor
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				adcSaveDataTo = SAVE_TO_PROX;
				adcSamplingState = 2;
				if(irCommEnabled==IRCOMM_MODE_RECEIVE && currentProx==23) {					
    47ae:	80 91 24 02 	lds	r24, 0x0224
    47b2:	87 31       	cpi	r24, 0x17	; 23
    47b4:	09 f4       	brne	.+2      	; 0x47b8 <__vector_29+0x9a0>
    47b6:	f8 c0       	rjmp	.+496    	; 0x49a8 <__vector_29+0xb90>
    47b8:	82 e0       	ldi	r24, 0x02	; 2
    47ba:	8c cb       	rjmp	.-2280   	; 0x3ed4 <__vector_29+0xbc>
				if(currentProx & 0x01) {
					if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
											// PORTA for proximity sensors, PORTJ for ground sensors
						PORTA = (1 << (currentProx>>1));	// pulse on
					} else {
						if(hardwareRevision == HW_REV_3_0) {
    47bc:	20 91 4f 04 	lds	r18, 0x044F
    47c0:	22 23       	and	r18, r18
    47c2:	79 f4       	brne	.+30     	; 0x47e2 <__vector_29+0x9ca>
							PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
    47c4:	40 97       	sbiw	r24, 0x10	; 16
    47c6:	95 95       	asr	r25
    47c8:	87 95       	ror	r24
    47ca:	21 e0       	ldi	r18, 0x01	; 1
    47cc:	30 e0       	ldi	r19, 0x00	; 0
    47ce:	02 c0       	rjmp	.+4      	; 0x47d4 <__vector_29+0x9bc>
    47d0:	22 0f       	add	r18, r18
    47d2:	33 1f       	adc	r19, r19
    47d4:	8a 95       	dec	r24
    47d6:	e2 f7       	brpl	.-8      	; 0x47d0 <__vector_29+0x9b8>
    47d8:	20 93 05 01 	sts	0x0105, r18
    47dc:	80 91 ba 02 	lds	r24, 0x02BA
    47e0:	79 cb       	rjmp	.-2318   	; 0x3ed4 <__vector_29+0xbc>
						}

						if(hardwareRevision == HW_REV_3_0_1) {
    47e2:	21 30       	cpi	r18, 0x01	; 1
    47e4:	19 f0       	breq	.+6      	; 0x47ec <__vector_29+0x9d4>
							PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
						}

						if(hardwareRevision == HW_REV_3_1) {
    47e6:	22 30       	cpi	r18, 0x02	; 2
    47e8:	09 f0       	breq	.+2      	; 0x47ec <__vector_29+0x9d4>
    47ea:	72 cb       	rjmp	.-2332   	; 0x3ed0 <__vector_29+0xb8>
							PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
    47ec:	40 91 05 01 	lds	r20, 0x0105
    47f0:	40 97       	sbiw	r24, 0x10	; 16
    47f2:	95 95       	asr	r25
    47f4:	87 95       	ror	r24
    47f6:	21 e0       	ldi	r18, 0x01	; 1
    47f8:	30 e0       	ldi	r19, 0x00	; 0
    47fa:	02 c0       	rjmp	.+4      	; 0x4800 <__vector_29+0x9e8>
    47fc:	22 0f       	add	r18, r18
    47fe:	33 1f       	adc	r19, r19
    4800:	8a 95       	dec	r24
    4802:	e2 f7       	brpl	.-8      	; 0x47fc <__vector_29+0x9e4>
    4804:	20 95       	com	r18
    4806:	24 23       	and	r18, r20
    4808:	20 93 05 01 	sts	0x0105, r18
    480c:	61 cb       	rjmp	.-2366   	; 0x3ed0 <__vector_29+0xb8>

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;

					} else if(((proximityResult[currentProx>>1]+300)>>2) < PHASE3) {
    480e:	ac 01       	movw	r20, r24
    4810:	44 5d       	subi	r20, 0xD4	; 212
    4812:	5e 4f       	sbci	r21, 0xFE	; 254
    4814:	55 95       	asr	r21
    4816:	47 95       	ror	r20
    4818:	55 95       	asr	r21
    481a:	47 95       	ror	r20
    481c:	44 3b       	cpi	r20, 0xB4	; 180
    481e:	51 05       	cpc	r21, r1
    4820:	c4 f5       	brge	.+112    	; 0x4892 <__vector_29+0xa7a>

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-180)>>2) + PHASE2;
    4822:	2f 53       	subi	r18, 0x3F	; 63
    4824:	3d 4f       	sbci	r19, 0xFD	; 253
    4826:	84 5b       	subi	r24, 0xB4	; 180
    4828:	90 40       	sbci	r25, 0x00	; 0
    482a:	95 95       	asr	r25
    482c:	87 95       	ror	r24
    482e:	95 95       	asr	r25
    4830:	87 95       	ror	r24
    4832:	88 58       	subi	r24, 0x88	; 136
    4834:	9f 4f       	sbci	r25, 0xFF	; 255
    4836:	d9 01       	movw	r26, r18
    4838:	11 96       	adiw	r26, 0x01	; 1
    483a:	9c 93       	st	X, r25
    483c:	8e 93       	st	-X, r24
    483e:	07 cc       	rjmp	.-2034   	; 0x404e <__vector_29+0x236>
							PORTA = 0xAA;
						} else {
							PORTA = 0x55;
						}
					} else {
						irCommTxPulseState = 0;
    4840:	10 92 0e 05 	sts	0x050E, r1
						PORTA = 0x00;
    4844:	12 b8       	out	0x02, r1	; 2
    4846:	92 ce       	rjmp	.-732    	; 0x456c <__vector_29+0x754>
							PORTA = 0xAA;
						} else {
							PORTA = 0x55;
						}
					} else {
						irCommTxPulseState = 0;
    4848:	10 92 0e 05 	sts	0x050E, r1
						PORTA = 0x00;
    484c:	12 b8       	out	0x02, r1	; 2
    484e:	5f ce       	rjmp	.-834    	; 0x450e <__vector_29+0x6f6>
			case 10:
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    4850:	81 30       	cpi	r24, 0x01	; 1
    4852:	09 f4       	brne	.+2      	; 0x4856 <__vector_29+0xa3e>
    4854:	a5 c0       	rjmp	.+330    	; 0x49a0 <__vector_29+0xb88>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4856:	85 e0       	ldi	r24, 0x05	; 5
    4858:	80 93 b9 02 	sts	0x02B9, r24
    485c:	17 cf       	rjmp	.-466    	; 0x468c <__vector_29+0x874>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    485e:	84 e0       	ldi	r24, 0x04	; 4
    4860:	80 93 b9 02 	sts	0x02B9, r24
    4864:	c7 cd       	rjmp	.-1138   	; 0x43f4 <__vector_29+0x5dc>
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    4866:	82 e0       	ldi	r24, 0x02	; 2
    4868:	80 93 b9 02 	sts	0x02B9, r24
    486c:	4a cd       	rjmp	.-1388   	; 0x4302 <__vector_29+0x4ea>
			case 8:
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    486e:	81 30       	cpi	r24, 0x01	; 1
    4870:	b1 f1       	breq	.+108    	; 0x48de <__vector_29+0xac6>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4872:	85 e0       	ldi	r24, 0x05	; 5
    4874:	80 93 b9 02 	sts	0x02B9, r24
    4878:	96 cd       	rjmp	.-1236   	; 0x43a6 <__vector_29+0x58e>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    487a:	84 e0       	ldi	r24, 0x04	; 4
    487c:	80 93 b9 02 	sts	0x02B9, r24
    4880:	a2 ce       	rjmp	.-700    	; 0x45c6 <__vector_29+0x7ae>
				currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
																// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
				if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    4882:	82 e0       	ldi	r24, 0x02	; 2
    4884:	80 93 b9 02 	sts	0x02B9, r24
    4888:	f5 cd       	rjmp	.-1046   	; 0x4474 <__vector_29+0x65c>
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    488a:	82 e0       	ldi	r24, 0x02	; 2
    488c:	80 93 b9 02 	sts	0x02B9, r24
    4890:	87 ce       	rjmp	.-754    	; 0x45a0 <__vector_29+0x788>

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-180)>>2) + PHASE2;

					} else {

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-420)>>3) + PHASE3;
    4892:	2f 53       	subi	r18, 0x3F	; 63
    4894:	3d 4f       	sbci	r19, 0xFD	; 253
    4896:	84 5a       	subi	r24, 0xA4	; 164
    4898:	91 40       	sbci	r25, 0x01	; 1
    489a:	95 95       	asr	r25
    489c:	87 95       	ror	r24
    489e:	95 95       	asr	r25
    48a0:	87 95       	ror	r24
    48a2:	95 95       	asr	r25
    48a4:	87 95       	ror	r24
    48a6:	8c 54       	subi	r24, 0x4C	; 76
    48a8:	9f 4f       	sbci	r25, 0xFF	; 255
    48aa:	f9 01       	movw	r30, r18
    48ac:	91 83       	std	Z+1, r25	; 0x01
    48ae:	80 83       	st	Z, r24
    48b0:	ce cb       	rjmp	.-2148   	; 0x404e <__vector_29+0x236>
				if(irCommRxBitSkipped < 254) {	// safety check
					irCommRxBitSkipped++;
				}
				irCommRxWindowSamples++;
				if(irCommState==IRCOMM_RX_SYNC_SIGNAL) {
					irCommRxWindowSamples = 0;
    48b2:	10 92 e8 04 	sts	0x04E8, r1
					if(irCommRxBitSkipped >= irCommShiftCount) {
    48b6:	80 91 f2 04 	lds	r24, 0x04F2
    48ba:	98 17       	cp	r25, r24
    48bc:	08 f4       	brcc	.+2      	; 0x48c0 <__vector_29+0xaa8>
    48be:	fa ce       	rjmp	.-524    	; 0x46b4 <__vector_29+0x89c>
						irCommState = IRCOMM_RX_WAITING_BIT;
    48c0:	85 e0       	ldi	r24, 0x05	; 5
    48c2:	80 93 c7 04 	sts	0x04C7, r24
    48c6:	f6 ce       	rjmp	.-532    	; 0x46b4 <__vector_29+0x89c>
						//PORTA = 0x01;
						//PORTA = irCommTxSensorMask;
						if(irCommTxSensorGroup==0) {
							PORTA = 0xAA;
						} else {
							PORTA = 0x55;
    48c8:	85 e5       	ldi	r24, 0x55	; 85
    48ca:	82 b9       	out	0x02, r24	; 2
    48cc:	4f ce       	rjmp	.-866    	; 0x456c <__vector_29+0x754>
						//PORTA = 0x01;
						//PORTA = irCommTxSensorMask;
						if(irCommTxSensorGroup==0) {
							PORTA = 0xAA;
						} else {
							PORTA = 0x55;
    48ce:	85 e5       	ldi	r24, 0x55	; 85
    48d0:	82 b9       	out	0x02, r24	; 2
    48d2:	1d ce       	rjmp	.-966    	; 0x450e <__vector_29+0x6f6>
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 0;

				if(currentProx==14 && measBattery==1) {
					measBattery=2;
    48d4:	82 e0       	ldi	r24, 0x02	; 2
    48d6:	80 93 bf 02 	sts	0x02BF, r24
					SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
    48da:	46 9a       	sbi	0x08, 6	; 8
    48dc:	35 cd       	rjmp	.-1430   	; 0x4348 <__vector_29+0x530>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    48de:	84 e0       	ldi	r24, 0x04	; 4
    48e0:	80 93 b9 02 	sts	0x02B9, r24
    48e4:	60 cd       	rjmp	.-1344   	; 0x43a6 <__vector_29+0x58e>
			case 11:
				currentAdChannel = 0;	// prox0
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    48e6:	82 e0       	ldi	r24, 0x02	; 2
    48e8:	80 93 b9 02 	sts	0x02B9, r24
    48ec:	f5 ce       	rjmp	.-534    	; 0x46d8 <__vector_29+0x8c0>
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    48ee:	82 e0       	ldi	r24, 0x02	; 2
    48f0:	80 93 b9 02 	sts	0x02B9, r24
    48f4:	14 cf       	rjmp	.-472    	; 0x471e <__vector_29+0x906>
						irCommState = IRCOMM_RX_WAITING_BIT;
					}
				}

				if(irCommRxWindowSamples == IRCOMM_SAMPLING_WINDOW) {					
					irCommRxWindowSamples = 0;
    48f6:	10 92 e8 04 	sts	0x04E8, r1
					irCommTempPointer = irCommProxValuesCurr;
    48fa:	80 91 2e 08 	lds	r24, 0x082E
    48fe:	90 91 2f 08 	lds	r25, 0x082F
					irCommProxValuesCurr = irCommProxValuesAdc;
    4902:	20 91 4c 08 	lds	r18, 0x084C
    4906:	30 91 4d 08 	lds	r19, 0x084D
    490a:	30 93 2f 08 	sts	0x082F, r19
    490e:	20 93 2e 08 	sts	0x082E, r18
					irCommProxValuesAdc = irCommTempPointer;
    4912:	90 93 4d 08 	sts	0x084D, r25
    4916:	80 93 4c 08 	sts	0x084C, r24
					irCommTempPointer = irCommMaxSensorValueCurr;
    491a:	50 91 2b 05 	lds	r21, 0x052B
    491e:	40 91 2c 05 	lds	r20, 0x052C
					irCommMaxSensorValueCurr = irCommMaxSensorValueAdc;
    4922:	80 91 1a 0b 	lds	r24, 0x0B1A
    4926:	90 91 1b 0b 	lds	r25, 0x0B1B
    492a:	90 93 2c 05 	sts	0x052C, r25
    492e:	80 93 2b 05 	sts	0x052B, r24
					irCommMaxSensorValueAdc = irCommTempPointer;
    4932:	50 93 1a 0b 	sts	0x0B1A, r21
    4936:	40 93 1b 0b 	sts	0x0B1B, r20
					irCommTempPointer = irCommMinSensorValueCurr;
    493a:	80 91 17 05 	lds	r24, 0x0517
    493e:	90 91 18 05 	lds	r25, 0x0518
    4942:	90 93 5c 0b 	sts	0x0B5C, r25
    4946:	80 93 5b 0b 	sts	0x0B5B, r24
					irCommMinSensorValueCurr = irCommMinSensorValueAdc;
    494a:	20 91 a8 05 	lds	r18, 0x05A8
    494e:	30 91 a9 05 	lds	r19, 0x05A9
    4952:	30 93 18 05 	sts	0x0518, r19
    4956:	20 93 17 05 	sts	0x0517, r18
					irCommMinSensorValueAdc = irCommTempPointer;
    495a:	90 93 a9 05 	sts	0x05A9, r25
    495e:	80 93 a8 05 	sts	0x05A8, r24
					memset(irCommMaxSensorValueAdc, 0x00, 16);
    4962:	e5 2f       	mov	r30, r21
    4964:	f4 2f       	mov	r31, r20
    4966:	80 e1       	ldi	r24, 0x10	; 16
    4968:	df 01       	movw	r26, r30
    496a:	1d 92       	st	X+, r1
    496c:	8a 95       	dec	r24
    496e:	e9 f7       	brne	.-6      	; 0x496a <__vector_29+0xb52>
					memset(irCommMinSensorValueAdc, 0xFF, 16);
    4970:	80 91 a8 05 	lds	r24, 0x05A8
    4974:	90 91 a9 05 	lds	r25, 0x05A9
    4978:	6f ef       	ldi	r22, 0xFF	; 255
    497a:	70 e0       	ldi	r23, 0x00	; 0
    497c:	40 e1       	ldi	r20, 0x10	; 16
    497e:	50 e0       	ldi	r21, 0x00	; 0
    4980:	0e 94 54 52 	call	0xa4a8	; 0xa4a8 <memset>
					if(irCommState == IRCOMM_RX_IDLE_STATE) {
    4984:	80 91 c7 04 	lds	r24, 0x04C7
    4988:	81 30       	cpi	r24, 0x01	; 1
    498a:	09 f4       	brne	.+2      	; 0x498e <__vector_29+0xb76>
    498c:	44 c0       	rjmp	.+136    	; 0x4a16 <__vector_29+0xbfe>
						irCommRxBitSkipped = 0;
					}
					//if(irCommState == IRCOMM_RX_SYNC_SIGNAL) {
					//	irCommSecondBitSkipped = 1;	// the second start bit is just sampled, skip it and sync with the received signal						
					//}
					if(irCommState == IRCOMM_RX_WAITING_BIT) {
    498e:	80 91 c7 04 	lds	r24, 0x04C7
    4992:	85 30       	cpi	r24, 0x05	; 5
    4994:	09 f0       	breq	.+2      	; 0x4998 <__vector_29+0xb80>
    4996:	8e ce       	rjmp	.-740    	; 0x46b4 <__vector_29+0x89c>
						irCommState = IRCOMM_RX_READ_BIT;
    4998:	86 e0       	ldi	r24, 0x06	; 6
    499a:	80 93 c7 04 	sts	0x04C7, r24
    499e:	8a ce       	rjmp	.-748    	; 0x46b4 <__vector_29+0x89c>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    49a0:	84 e0       	ldi	r24, 0x04	; 4
    49a2:	80 93 b9 02 	sts	0x02B9, r24
    49a6:	72 ce       	rjmp	.-796    	; 0x468c <__vector_29+0x874>
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				adcSaveDataTo = SAVE_TO_PROX;
				adcSamplingState = 2;
				if(irCommEnabled==IRCOMM_MODE_RECEIVE && currentProx==23) {					
					currentAdChannel = 0;	// prox0					
    49a8:	10 92 23 02 	sts	0x0223, r1
					measBattery = 0;
    49ac:	10 92 bf 02 	sts	0x02BF, r1
					irCommAdcRxState = 0;					
    49b0:	10 92 e7 04 	sts	0x04E7, r1
					irCommRxWindowSamples = 0;
    49b4:	10 92 e8 04 	sts	0x04E8, r1
					memset(irCommMaxSensorValueAdc, 0x00, 16);
    49b8:	e0 91 1a 0b 	lds	r30, 0x0B1A
    49bc:	f0 91 1b 0b 	lds	r31, 0x0B1B
    49c0:	80 e1       	ldi	r24, 0x10	; 16
    49c2:	df 01       	movw	r26, r30
    49c4:	1d 92       	st	X+, r1
    49c6:	8a 95       	dec	r24
    49c8:	e9 f7       	brne	.-6      	; 0x49c4 <__vector_29+0xbac>
					memset(irCommMinSensorValueAdc, 0xFF, 16);
    49ca:	80 91 a8 05 	lds	r24, 0x05A8
    49ce:	90 91 a9 05 	lds	r25, 0x05A9
    49d2:	6f ef       	ldi	r22, 0xFF	; 255
    49d4:	70 e0       	ldi	r23, 0x00	; 0
    49d6:	40 e1       	ldi	r20, 0x10	; 16
    49d8:	50 e0       	ldi	r21, 0x00	; 0
    49da:	0e 94 54 52 	call	0xa4a8	; 0xa4a8 <memset>
					irCommMode = IRCOMM_MODE_RECEIVE;					
    49de:	10 93 c6 04 	sts	0x04C6, r17
    49e2:	10 91 c4 04 	lds	r17, 0x04C4
    49e6:	d8 ca       	rjmp	.-2640   	; 0x3f98 <__vector_29+0x180>
					}
					irCommTxSwitchCounter++;
					if(irCommTxSwitchCounter == irCommTxSwitchCount) {
						irCommTxBitCount++;
						if(irCommTxBitCount==12) {
							irCommState = IRCOMM_TX_IDLE_STATE;
    49e8:	81 e0       	ldi	r24, 0x01	; 1
    49ea:	80 93 c7 04 	sts	0x04C7, r24
							irCommTxByteEnqueued = 0;
    49ee:	10 92 07 05 	sts	0x0507, r1
							adcSamplingState = 0;
    49f2:	10 92 ba 02 	sts	0x02BA, r1
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    49f6:	10 92 c6 04 	sts	0x04C6, r1
							irCommInitReceiver();
    49fa:	0e 94 f2 42 	call	0x85e4	; 0x85e4 <irCommInitReceiver>
							PORTA = 0x00;
    49fe:	12 b8       	out	0x02, r1	; 2
							irCommTxLastTransmissionTime = getTime100MicroSec();
    4a00:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <getTime100MicroSec>
    4a04:	60 93 08 05 	sts	0x0508, r22
    4a08:	70 93 09 05 	sts	0x0509, r23
    4a0c:	80 93 0a 05 	sts	0x050A, r24
    4a10:	90 93 0b 05 	sts	0x050B, r25
    4a14:	91 cd       	rjmp	.-1246   	; 0x4538 <__vector_29+0x720>
					irCommMinSensorValueCurr = irCommMinSensorValueAdc;
					irCommMinSensorValueAdc = irCommTempPointer;
					memset(irCommMaxSensorValueAdc, 0x00, 16);
					memset(irCommMinSensorValueAdc, 0xFF, 16);
					if(irCommState == IRCOMM_RX_IDLE_STATE) {
						irCommState = IRCOMM_RX_MAX_SENSOR_STATE;
    4a16:	82 e0       	ldi	r24, 0x02	; 2
    4a18:	80 93 c7 04 	sts	0x04C7, r24
						irCommRxBitSkipped = 0;
    4a1c:	10 92 01 05 	sts	0x0501, r1
    4a20:	b6 cf       	rjmp	.-148    	; 0x498e <__vector_29+0xb76>

00004a22 <initMotors>:

#include "motors.h"

void initMotors() {
    4a22:	0f 93       	push	r16
    4a24:	1f 93       	push	r17
    4a26:	cf 93       	push	r28
    4a28:	df 93       	push	r29
	// Using 10-bit resolution (waveform generation mode 7) we have a period of: 8000000/1024 = 7812.5 Hz
	// We need to apply a prescaler to the timer in such a way to get the desired period:
	// 7812.5/100 = 78.125 => ideal prescaler, the nearest one is 1/64 and we get a period of:
	// 8000000/64/1024 = 122 Hz

	TCCR3A = 0;
    4a2a:	e0 e9       	ldi	r30, 0x90	; 144
    4a2c:	f0 e0       	ldi	r31, 0x00	; 0
    4a2e:	10 82       	st	Z, r1
	TCCR3B = 0;
    4a30:	41 e9       	ldi	r20, 0x91	; 145
    4a32:	50 e0       	ldi	r21, 0x00	; 0
    4a34:	da 01       	movw	r26, r20
    4a36:	1c 92       	st	X, r1
	TIMSK3 = 0;
    4a38:	21 e7       	ldi	r18, 0x71	; 113
    4a3a:	30 e0       	ldi	r19, 0x00	; 0
    4a3c:	e9 01       	movw	r28, r18
    4a3e:	18 82       	st	Y, r1
	TCCR4A = 0;
    4a40:	a0 ea       	ldi	r26, 0xA0	; 160
    4a42:	b0 e0       	ldi	r27, 0x00	; 0
    4a44:	1c 92       	st	X, r1
	TCCR4B = 0;
    4a46:	81 ea       	ldi	r24, 0xA1	; 161
    4a48:	90 e0       	ldi	r25, 0x00	; 0
    4a4a:	ec 01       	movw	r28, r24
    4a4c:	18 82       	st	Y, r1
	TIMSK4 = 0;
    4a4e:	02 e7       	ldi	r16, 0x72	; 114
    4a50:	10 e0       	ldi	r17, 0x00	; 0
    4a52:	e8 01       	movw	r28, r16
    4a54:	18 82       	st	Y, r1

	TCCR3A |= (1 << COM3A1) | (1 << WGM31) | (1 << WGM30); 	// enable OCA; clear on match, set at bottom
    4a56:	60 81       	ld	r22, Z
    4a58:	63 68       	ori	r22, 0x83	; 131
    4a5a:	60 83       	st	Z, r22
	TCCR3A |= (1 << WGM31) | (1 << WGM30);
    4a5c:	60 81       	ld	r22, Z
    4a5e:	63 60       	ori	r22, 0x03	; 3
    4a60:	60 83       	st	Z, r22
	TCCR3B |= (1 << WGM32) | (1 << CS31) | (1 << CS30);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    4a62:	ea 01       	movw	r28, r20
    4a64:	68 81       	ld	r22, Y
    4a66:	6b 60       	ori	r22, 0x0B	; 11
    4a68:	68 83       	st	Y, r22
	// the values for motors goes from 0 (stopped) to 1023 (max power)
	OCR3A = pwm_right;
    4a6a:	40 91 f5 02 	lds	r20, 0x02F5
    4a6e:	50 91 f6 02 	lds	r21, 0x02F6
    4a72:	50 93 99 00 	sts	0x0099, r21
    4a76:	40 93 98 00 	sts	0x0098, r20
	OCR3B = 0;
    4a7a:	10 92 9b 00 	sts	0x009B, r1
    4a7e:	10 92 9a 00 	sts	0x009A, r1
	TIMSK3 |= (1 << TOIE3);		// Enable timer overflow interrupt
    4a82:	e9 01       	movw	r28, r18
    4a84:	48 81       	ld	r20, Y
    4a86:	41 60       	ori	r20, 0x01	; 1
    4a88:	48 83       	st	Y, r20

	// stop right motor
	TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    4a8a:	20 81       	ld	r18, Z
    4a8c:	2f 75       	andi	r18, 0x5F	; 95
    4a8e:	20 83       	st	Z, r18
	PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    4a90:	2e b1       	in	r18, 0x0e	; 14
    4a92:	27 7e       	andi	r18, 0xE7	; 231
    4a94:	2e b9       	out	0x0e, r18	; 14

	// Motor left timer4/pwm
	// same configuration as timer3
	TCCR4A |= (1 << COM4A1) | (1 << WGM41) | (1 << WGM40); 	// enable OCA; clear on match, set at bottom
    4a96:	2c 91       	ld	r18, X
    4a98:	23 68       	ori	r18, 0x83	; 131
    4a9a:	2c 93       	st	X, r18
	TCCR4B |= (1 << WGM42) | (1 << CS41) | (1 << CS40);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    4a9c:	fc 01       	movw	r30, r24
    4a9e:	20 81       	ld	r18, Z
    4aa0:	2b 60       	ori	r18, 0x0B	; 11
    4aa2:	20 83       	st	Z, r18
	// the values for motors goes from 0 (stopped) to 1024 (max power)
	OCR4A = pwm_left;
    4aa4:	80 91 f7 02 	lds	r24, 0x02F7
    4aa8:	90 91 f8 02 	lds	r25, 0x02F8
    4aac:	90 93 a9 00 	sts	0x00A9, r25
    4ab0:	80 93 a8 00 	sts	0x00A8, r24
	OCR4B = 0;
    4ab4:	10 92 ab 00 	sts	0x00AB, r1
    4ab8:	10 92 aa 00 	sts	0x00AA, r1
	TIMSK4 |= (1 << TOIE4);		// Enable timer overflow interrupt
    4abc:	e8 01       	movw	r28, r16
    4abe:	88 81       	ld	r24, Y
    4ac0:	81 60       	ori	r24, 0x01	; 1
    4ac2:	88 83       	st	Y, r24
	// stop left motor
	TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    4ac4:	8c 91       	ld	r24, X
    4ac6:	8f 75       	andi	r24, 0x5F	; 95
    4ac8:	8c 93       	st	X, r24
	PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    4aca:	e2 e0       	ldi	r30, 0x02	; 2
    4acc:	f1 e0       	ldi	r31, 0x01	; 1
    4ace:	80 81       	ld	r24, Z
    4ad0:	87 7e       	andi	r24, 0xE7	; 231
    4ad2:	80 83       	st	Z, r24


}
    4ad4:	df 91       	pop	r29
    4ad6:	cf 91       	pop	r28
    4ad8:	1f 91       	pop	r17
    4ada:	0f 91       	pop	r16
    4adc:	08 95       	ret

00004ade <cast_speed>:

signed int cast_speed(signed int vel) {
    4ade:	28 2f       	mov	r18, r24
    4ae0:	39 2f       	mov	r19, r25
    4ae2:	8e ef       	ldi	r24, 0xFE	; 254
    4ae4:	20 30       	cpi	r18, 0x00	; 0
    4ae6:	38 07       	cpc	r19, r24
    4ae8:	14 f4       	brge	.+4      	; 0x4aee <cast_speed+0x10>
    4aea:	20 e0       	ldi	r18, 0x00	; 0
    4aec:	3e ef       	ldi	r19, 0xFE	; 254
    4aee:	82 e0       	ldi	r24, 0x02	; 2
    4af0:	21 30       	cpi	r18, 0x01	; 1
    4af2:	38 07       	cpc	r19, r24
    4af4:	14 f0       	brlt	.+4      	; 0x4afa <cast_speed+0x1c>
    4af6:	20 e0       	ldi	r18, 0x00	; 0
    4af8:	32 e0       	ldi	r19, 0x02	; 2
        vel = MAX_MOTORS_PWM/2;
    } else if(vel < -(MAX_MOTORS_PWM/2)) {
        vel = -(MAX_MOTORS_PWM/2);
    }
    return vel;
}
    4afa:	c9 01       	movw	r24, r18
    4afc:	08 95       	ret

00004afe <handleMotorsWithNoController>:

void handleMotorsWithNoController() {

	// compute velocities even if they aren't used
	if(compute_left_vel) {
    4afe:	80 91 07 02 	lds	r24, 0x0207
    4b02:	88 23       	and	r24, r24
    4b04:	c1 f1       	breq	.+112    	; 0x4b76 <handleMotorsWithNoController+0x78>
		last_left_vel = left_vel_sum>>2;
    4b06:	60 91 ed 02 	lds	r22, 0x02ED
    4b0a:	70 91 ee 02 	lds	r23, 0x02EE
    4b0e:	76 95       	lsr	r23
    4b10:	67 95       	ror	r22
    4b12:	76 95       	lsr	r23
    4b14:	67 95       	ror	r22
    4b16:	70 93 f2 02 	sts	0x02F2, r23
    4b1a:	60 93 f1 02 	sts	0x02F1, r22
		compute_left_vel = 0;
    4b1e:	10 92 07 02 	sts	0x0207, r1
		left_vel_sum = 0;
    4b22:	10 92 ee 02 	sts	0x02EE, r1
    4b26:	10 92 ed 02 	sts	0x02ED, r1

		if(pwm_left_desired >= 0) {
    4b2a:	80 91 fb 02 	lds	r24, 0x02FB
    4b2e:	90 91 fc 02 	lds	r25, 0x02FC
    4b32:	97 fd       	sbrc	r25, 7
    4b34:	e3 c0       	rjmp	.+454    	; 0x4cfc <handleMotorsWithNoController+0x1fe>
			leftMotSteps += (last_left_vel>>3);
    4b36:	75 95       	asr	r23
    4b38:	67 95       	ror	r22
    4b3a:	75 95       	asr	r23
    4b3c:	67 95       	ror	r22
    4b3e:	75 95       	asr	r23
    4b40:	67 95       	ror	r22
    4b42:	88 27       	eor	r24, r24
    4b44:	77 fd       	sbrc	r23, 7
    4b46:	80 95       	com	r24
    4b48:	98 2f       	mov	r25, r24
    4b4a:	0e 94 d3 4f 	call	0x9fa6	; 0x9fa6 <__floatsisf>
    4b4e:	9b 01       	movw	r18, r22
    4b50:	ac 01       	movw	r20, r24
    4b52:	60 91 d5 02 	lds	r22, 0x02D5
    4b56:	70 91 d6 02 	lds	r23, 0x02D6
    4b5a:	80 91 d7 02 	lds	r24, 0x02D7
    4b5e:	90 91 d8 02 	lds	r25, 0x02D8
    4b62:	0e 94 6b 4e 	call	0x9cd6	; 0x9cd6 <__addsf3>
    4b66:	60 93 d5 02 	sts	0x02D5, r22
    4b6a:	70 93 d6 02 	sts	0x02D6, r23
    4b6e:	80 93 d7 02 	sts	0x02D7, r24
    4b72:	90 93 d8 02 	sts	0x02D8, r25
		} else {
			leftMotSteps -= (last_left_vel>>3);
		}
	}

	if(compute_right_vel) {
    4b76:	80 91 08 02 	lds	r24, 0x0208
    4b7a:	88 23       	and	r24, r24
    4b7c:	c1 f1       	breq	.+112    	; 0x4bee <handleMotorsWithNoController+0xf0>
		last_right_vel = right_vel_sum>>2;
    4b7e:	60 91 ef 02 	lds	r22, 0x02EF
    4b82:	70 91 f0 02 	lds	r23, 0x02F0
    4b86:	76 95       	lsr	r23
    4b88:	67 95       	ror	r22
    4b8a:	76 95       	lsr	r23
    4b8c:	67 95       	ror	r22
    4b8e:	70 93 f4 02 	sts	0x02F4, r23
    4b92:	60 93 f3 02 	sts	0x02F3, r22
		compute_right_vel = 0;
    4b96:	10 92 08 02 	sts	0x0208, r1
		right_vel_sum = 0;
    4b9a:	10 92 f0 02 	sts	0x02F0, r1
    4b9e:	10 92 ef 02 	sts	0x02EF, r1

		if(pwm_right_desired >= 0) {
    4ba2:	80 91 f9 02 	lds	r24, 0x02F9
    4ba6:	90 91 fa 02 	lds	r25, 0x02FA
    4baa:	97 fd       	sbrc	r25, 7
    4bac:	86 c0       	rjmp	.+268    	; 0x4cba <handleMotorsWithNoController+0x1bc>
			rightMotSteps += (last_right_vel>>3);
    4bae:	75 95       	asr	r23
    4bb0:	67 95       	ror	r22
    4bb2:	75 95       	asr	r23
    4bb4:	67 95       	ror	r22
    4bb6:	75 95       	asr	r23
    4bb8:	67 95       	ror	r22
    4bba:	88 27       	eor	r24, r24
    4bbc:	77 fd       	sbrc	r23, 7
    4bbe:	80 95       	com	r24
    4bc0:	98 2f       	mov	r25, r24
    4bc2:	0e 94 d3 4f 	call	0x9fa6	; 0x9fa6 <__floatsisf>
    4bc6:	9b 01       	movw	r18, r22
    4bc8:	ac 01       	movw	r20, r24
    4bca:	60 91 d1 02 	lds	r22, 0x02D1
    4bce:	70 91 d2 02 	lds	r23, 0x02D2
    4bd2:	80 91 d3 02 	lds	r24, 0x02D3
    4bd6:	90 91 d4 02 	lds	r25, 0x02D4
    4bda:	0e 94 6b 4e 	call	0x9cd6	; 0x9cd6 <__addsf3>
    4bde:	60 93 d1 02 	sts	0x02D1, r22
    4be2:	70 93 d2 02 	sts	0x02D2, r23
    4be6:	80 93 d3 02 	sts	0x02D3, r24
    4bea:	90 93 d4 02 	sts	0x02D4, r25
		} else {
			rightMotSteps -= (last_right_vel>>3);
		}
	}

	pwm_right_working = pwm_intermediate_right_desired*BYTE_TO_MM_S;	// pwm in the range -635..635 (127*BYTE_TO_MM_S)
    4bee:	20 91 fd 02 	lds	r18, 0x02FD
    4bf2:	30 91 fe 02 	lds	r19, 0x02FE
    4bf6:	c9 01       	movw	r24, r18
    4bf8:	88 0f       	add	r24, r24
    4bfa:	99 1f       	adc	r25, r25
    4bfc:	88 0f       	add	r24, r24
    4bfe:	99 1f       	adc	r25, r25
    4c00:	82 0f       	add	r24, r18
    4c02:	93 1f       	adc	r25, r19
    4c04:	90 93 0e 03 	sts	0x030E, r25
    4c08:	80 93 0d 03 	sts	0x030D, r24
	pwm_left_working = pwm_intermediate_left_desired*BYTE_TO_MM_S;	
    4c0c:	40 91 ff 02 	lds	r20, 0x02FF
    4c10:	50 91 00 03 	lds	r21, 0x0300
    4c14:	9a 01       	movw	r18, r20
    4c16:	22 0f       	add	r18, r18
    4c18:	33 1f       	adc	r19, r19
    4c1a:	22 0f       	add	r18, r18
    4c1c:	33 1f       	adc	r19, r19
    4c1e:	24 0f       	add	r18, r20
    4c20:	35 1f       	adc	r19, r21
    4c22:	52 2f       	mov	r21, r18
    4c24:	43 2f       	mov	r20, r19
    4c26:	20 93 0f 03 	sts	0x030F, r18
    4c2a:	30 93 10 03 	sts	0x0310, r19
	if(obstacleAvoidanceEnabled) {
    4c2e:	20 91 6c 04 	lds	r18, 0x046C
    4c32:	22 23       	and	r18, r18
    4c34:	39 f5       	brne	.+78     	; 0x4c84 <handleMotorsWithNoController+0x186>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);		// out is in the range -MAX_MOTORS_PWM/2..MAX_MOTORS_PWM/2
	}
	//pwm_left_desired_to_control = cast_speed(pwm_left_working);		// pwm in the range -MAX_MOTORS_PWM/2..MAX_MOTORS_PWM/2
	//pwm_right_desired_to_control = cast_speed(pwm_right_working);

	pwm_left = pwm_left_working;
    4c36:	50 93 f7 02 	sts	0x02F7, r21
    4c3a:	40 93 f8 02 	sts	0x02F8, r20
	pwm_right = pwm_right_working;
    4c3e:	90 93 f6 02 	sts	0x02F6, r25
    4c42:	80 93 f5 02 	sts	0x02F5, r24

	if(pwm_right > 0) {
    4c46:	18 16       	cp	r1, r24
    4c48:	19 06       	cpc	r1, r25
    4c4a:	5c f5       	brge	.+86     	; 0x4ca2 <handleMotorsWithNoController+0x1a4>
		OCR3A = (unsigned int)pwm_right;
    4c4c:	90 93 99 00 	sts	0x0099, r25
    4c50:	80 93 98 00 	sts	0x0098, r24
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
		OCR3B = 0;
	}
	if(pwm_left > 0) {
    4c54:	80 91 f7 02 	lds	r24, 0x02F7
    4c58:	90 91 f8 02 	lds	r25, 0x02F8
    4c5c:	18 16       	cp	r1, r24
    4c5e:	19 06       	cpc	r1, r25
    4c60:	2c f4       	brge	.+10     	; 0x4c6c <handleMotorsWithNoController+0x16e>
		OCR4A = (unsigned int)pwm_left;
    4c62:	90 93 a9 00 	sts	0x00A9, r25
    4c66:	80 93 a8 00 	sts	0x00A8, r24
    4c6a:	08 95       	ret
	} else if(pwm_left < 0) {
    4c6c:	00 97       	sbiw	r24, 0x00	; 0
    4c6e:	09 f0       	breq	.+2      	; 0x4c72 <handleMotorsWithNoController+0x174>
    4c70:	6e c0       	rjmp	.+220    	; 0x4d4e <handleMotorsWithNoController+0x250>
		OCR4B =(unsigned int)( -pwm_left);
	} else {
		OCR4A = 0;
    4c72:	10 92 a9 00 	sts	0x00A9, r1
    4c76:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    4c7a:	10 92 ab 00 	sts	0x00AB, r1
    4c7e:	10 92 aa 00 	sts	0x00AA, r1
    4c82:	08 95       	ret
	}

	pwm_right_working = pwm_intermediate_right_desired*BYTE_TO_MM_S;	// pwm in the range -635..635 (127*BYTE_TO_MM_S)
	pwm_left_working = pwm_intermediate_left_desired*BYTE_TO_MM_S;	
	if(obstacleAvoidanceEnabled) {
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);		// out is in the range -MAX_MOTORS_PWM/2..MAX_MOTORS_PWM/2
    4c84:	8f e0       	ldi	r24, 0x0F	; 15
    4c86:	93 e0       	ldi	r25, 0x03	; 3
    4c88:	6d e0       	ldi	r22, 0x0D	; 13
    4c8a:	73 e0       	ldi	r23, 0x03	; 3
    4c8c:	0e 94 5e 38 	call	0x70bc	; 0x70bc <obstacleAvoidance>
    4c90:	50 91 0f 03 	lds	r21, 0x030F
    4c94:	40 91 10 03 	lds	r20, 0x0310
    4c98:	80 91 0d 03 	lds	r24, 0x030D
    4c9c:	90 91 0e 03 	lds	r25, 0x030E
    4ca0:	ca cf       	rjmp	.-108    	; 0x4c36 <handleMotorsWithNoController+0x138>
	pwm_left = pwm_left_working;
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
    4ca2:	00 97       	sbiw	r24, 0x00	; 0
    4ca4:	09 f0       	breq	.+2      	; 0x4ca8 <handleMotorsWithNoController+0x1aa>
    4ca6:	4b c0       	rjmp	.+150    	; 0x4d3e <handleMotorsWithNoController+0x240>
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
    4ca8:	10 92 99 00 	sts	0x0099, r1
    4cac:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    4cb0:	10 92 9b 00 	sts	0x009B, r1
    4cb4:	10 92 9a 00 	sts	0x009A, r1
    4cb8:	cd cf       	rjmp	.-102    	; 0x4c54 <handleMotorsWithNoController+0x156>
		right_vel_sum = 0;

		if(pwm_right_desired >= 0) {
			rightMotSteps += (last_right_vel>>3);
		} else {
			rightMotSteps -= (last_right_vel>>3);
    4cba:	75 95       	asr	r23
    4cbc:	67 95       	ror	r22
    4cbe:	75 95       	asr	r23
    4cc0:	67 95       	ror	r22
    4cc2:	75 95       	asr	r23
    4cc4:	67 95       	ror	r22
    4cc6:	88 27       	eor	r24, r24
    4cc8:	77 fd       	sbrc	r23, 7
    4cca:	80 95       	com	r24
    4ccc:	98 2f       	mov	r25, r24
    4cce:	0e 94 d3 4f 	call	0x9fa6	; 0x9fa6 <__floatsisf>
    4cd2:	9b 01       	movw	r18, r22
    4cd4:	ac 01       	movw	r20, r24
    4cd6:	60 91 d1 02 	lds	r22, 0x02D1
    4cda:	70 91 d2 02 	lds	r23, 0x02D2
    4cde:	80 91 d3 02 	lds	r24, 0x02D3
    4ce2:	90 91 d4 02 	lds	r25, 0x02D4
    4ce6:	0e 94 6a 4e 	call	0x9cd4	; 0x9cd4 <__subsf3>
    4cea:	60 93 d1 02 	sts	0x02D1, r22
    4cee:	70 93 d2 02 	sts	0x02D2, r23
    4cf2:	80 93 d3 02 	sts	0x02D3, r24
    4cf6:	90 93 d4 02 	sts	0x02D4, r25
    4cfa:	79 cf       	rjmp	.-270    	; 0x4bee <handleMotorsWithNoController+0xf0>
		left_vel_sum = 0;

		if(pwm_left_desired >= 0) {
			leftMotSteps += (last_left_vel>>3);
		} else {
			leftMotSteps -= (last_left_vel>>3);
    4cfc:	75 95       	asr	r23
    4cfe:	67 95       	ror	r22
    4d00:	75 95       	asr	r23
    4d02:	67 95       	ror	r22
    4d04:	75 95       	asr	r23
    4d06:	67 95       	ror	r22
    4d08:	88 27       	eor	r24, r24
    4d0a:	77 fd       	sbrc	r23, 7
    4d0c:	80 95       	com	r24
    4d0e:	98 2f       	mov	r25, r24
    4d10:	0e 94 d3 4f 	call	0x9fa6	; 0x9fa6 <__floatsisf>
    4d14:	9b 01       	movw	r18, r22
    4d16:	ac 01       	movw	r20, r24
    4d18:	60 91 d5 02 	lds	r22, 0x02D5
    4d1c:	70 91 d6 02 	lds	r23, 0x02D6
    4d20:	80 91 d7 02 	lds	r24, 0x02D7
    4d24:	90 91 d8 02 	lds	r25, 0x02D8
    4d28:	0e 94 6a 4e 	call	0x9cd4	; 0x9cd4 <__subsf3>
    4d2c:	60 93 d5 02 	sts	0x02D5, r22
    4d30:	70 93 d6 02 	sts	0x02D6, r23
    4d34:	80 93 d7 02 	sts	0x02D7, r24
    4d38:	90 93 d8 02 	sts	0x02D8, r25
    4d3c:	1c cf       	rjmp	.-456    	; 0x4b76 <handleMotorsWithNoController+0x78>
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
		OCR3B = (unsigned int)(-pwm_right);
    4d3e:	90 95       	com	r25
    4d40:	81 95       	neg	r24
    4d42:	9f 4f       	sbci	r25, 0xFF	; 255
    4d44:	90 93 9b 00 	sts	0x009B, r25
    4d48:	80 93 9a 00 	sts	0x009A, r24
    4d4c:	83 cf       	rjmp	.-250    	; 0x4c54 <handleMotorsWithNoController+0x156>
		OCR3B = 0;
	}
	if(pwm_left > 0) {
		OCR4A = (unsigned int)pwm_left;
	} else if(pwm_left < 0) {
		OCR4B =(unsigned int)( -pwm_left);
    4d4e:	90 95       	com	r25
    4d50:	81 95       	neg	r24
    4d52:	9f 4f       	sbci	r25, 0xFF	; 255
    4d54:	90 93 ab 00 	sts	0x00AB, r25
    4d58:	80 93 aa 00 	sts	0x00AA, r24
    4d5c:	08 95       	ret

00004d5e <setLeftSpeed>:
}

// vel expressed in 1/5 of mm/s
void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    4d5e:	28 2f       	mov	r18, r24
    4d60:	33 27       	eor	r19, r19
    4d62:	27 fd       	sbrc	r18, 7
    4d64:	30 95       	com	r19
    4d66:	37 fd       	sbrc	r19, 7
    4d68:	13 c0       	rjmp	.+38     	; 0x4d90 <setLeftSpeed+0x32>
    4d6a:	30 93 12 03 	sts	0x0312, r19
    4d6e:	20 93 11 03 	sts	0x0311, r18

    if(vel >= 0) {
    4d72:	87 fd       	sbrc	r24, 7
    4d74:	05 c0       	rjmp	.+10     	; 0x4d80 <setLeftSpeed+0x22>
        pwm_left_desired = speedl;
    } else {
        pwm_left_desired = -(speedl);
    4d76:	30 93 fc 02 	sts	0x02FC, r19
    4d7a:	20 93 fb 02 	sts	0x02FB, r18
    4d7e:	08 95       	ret
    4d80:	30 95       	com	r19
    4d82:	21 95       	neg	r18
    4d84:	3f 4f       	sbci	r19, 0xFF	; 255
    4d86:	30 93 fc 02 	sts	0x02FC, r19
    4d8a:	20 93 fb 02 	sts	0x02FB, r18
    4d8e:	08 95       	ret
}

// vel expressed in 1/5 of mm/s
void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    4d90:	30 95       	com	r19
    4d92:	21 95       	neg	r18
    4d94:	3f 4f       	sbci	r19, 0xFF	; 255
    4d96:	e9 cf       	rjmp	.-46     	; 0x4d6a <setLeftSpeed+0xc>

00004d98 <setRightSpeed>:

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    4d98:	28 2f       	mov	r18, r24
    4d9a:	33 27       	eor	r19, r19
    4d9c:	27 fd       	sbrc	r18, 7
    4d9e:	30 95       	com	r19
    4da0:	37 fd       	sbrc	r19, 7
    4da2:	13 c0       	rjmp	.+38     	; 0x4dca <setRightSpeed+0x32>
    4da4:	30 93 14 03 	sts	0x0314, r19
    4da8:	20 93 13 03 	sts	0x0313, r18

    if(vel >= 0) {
    4dac:	87 fd       	sbrc	r24, 7
    4dae:	05 c0       	rjmp	.+10     	; 0x4dba <setRightSpeed+0x22>
        pwm_right_desired = speedr;
    } else {
        pwm_right_desired = -(speedr);
    4db0:	30 93 fa 02 	sts	0x02FA, r19
    4db4:	20 93 f9 02 	sts	0x02F9, r18
    4db8:	08 95       	ret
    4dba:	30 95       	com	r19
    4dbc:	21 95       	neg	r18
    4dbe:	3f 4f       	sbci	r19, 0xFF	; 255
    4dc0:	30 93 fa 02 	sts	0x02FA, r19
    4dc4:	20 93 f9 02 	sts	0x02F9, r18
    4dc8:	08 95       	ret

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    4dca:	30 95       	com	r19
    4dcc:	21 95       	neg	r18
    4dce:	3f 4f       	sbci	r19, 0xFF	; 255
    4dd0:	e9 cf       	rjmp	.-46     	; 0x4da4 <setRightSpeed+0xc>

00004dd2 <updateOdomData>:
}


void updateOdomData() {

    if(calibWheel == LEFT_WHEEL_FW_SC) {
    4dd2:	80 91 34 05 	lds	r24, 0x0534
    4dd6:	88 23       	and	r24, r24
    4dd8:	89 f5       	brne	.+98     	; 0x4e3c <updateOdomData+0x6a>
        if(calibVelIndex>1) {
    4dda:	e0 91 9e 08 	lds	r30, 0x089E
    4dde:	e2 30       	cpi	r30, 0x02	; 2
    4de0:	08 f4       	brcc	.+2      	; 0x4de4 <updateOdomData+0x12>
    4de2:	96 c0       	rjmp	.+300    	; 0x4f10 <updateOdomData+0x13e>
            if(calibration[calibVelIndex-2][1] >= tempVel) {  // check that we have always increasing values of speed, otherwise there
    4de4:	f0 e0       	ldi	r31, 0x00	; 0
    4de6:	df 01       	movw	r26, r30
    4de8:	a2 95       	swap	r26
    4dea:	b2 95       	swap	r27
    4dec:	b0 7f       	andi	r27, 0xF0	; 240
    4dee:	ba 27       	eor	r27, r26
    4df0:	a0 7f       	andi	r26, 0xF0	; 240
    4df2:	ba 27       	eor	r27, r26
    4df4:	ab 55       	subi	r26, 0x5B	; 91
    4df6:	b7 4f       	sbci	r27, 0xF7	; 247
    4df8:	12 96       	adiw	r26, 0x02	; 2
    4dfa:	2d 91       	ld	r18, X+
    4dfc:	3c 91       	ld	r19, X
    4dfe:	13 97       	sbiw	r26, 0x03	; 3
    4e00:	80 91 59 0b 	lds	r24, 0x0B59
    4e04:	90 91 5a 0b 	lds	r25, 0x0B5A
    4e08:	28 17       	cp	r18, r24
    4e0a:	39 07       	cpc	r19, r25
    4e0c:	34 f0       	brlt	.+12     	; 0x4e1a <updateOdomData+0x48>
                tempVel = calibration[calibVelIndex-2][1]+1; // will be problems when getting data from the lookup table
    4e0e:	c9 01       	movw	r24, r18
    4e10:	01 96       	adiw	r24, 0x01	; 1
    4e12:	90 93 5a 0b 	sts	0x0B5A, r25
    4e16:	80 93 59 0b 	sts	0x0B59, r24
            }
        }
        calibration[calibVelIndex-1][0] = avgLeftSpeed;
    4e1a:	e2 95       	swap	r30
    4e1c:	f2 95       	swap	r31
    4e1e:	f0 7f       	andi	r31, 0xF0	; 240
    4e20:	fe 27       	eor	r31, r30
    4e22:	e0 7f       	andi	r30, 0xF0	; 240
    4e24:	fe 27       	eor	r31, r30
    4e26:	eb 54       	subi	r30, 0x4B	; 75
    4e28:	f7 4f       	sbci	r31, 0xF7	; 247
    4e2a:	20 91 b4 04 	lds	r18, 0x04B4
    4e2e:	30 91 b5 04 	lds	r19, 0x04B5
    4e32:	31 83       	std	Z+1, r19	; 0x01
    4e34:	20 83       	st	Z, r18
        calibration[calibVelIndex-1][1] = tempVel;
    4e36:	93 83       	std	Z+3, r25	; 0x03
    4e38:	82 83       	std	Z+2, r24	; 0x02
    4e3a:	08 95       	ret
    } else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    4e3c:	81 30       	cpi	r24, 0x01	; 1
    4e3e:	31 f0       	breq	.+12     	; 0x4e4c <updateOdomData+0x7a>
                tempVel = calibration[calibVelIndex-2][3]+1;
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
        calibration[calibVelIndex-1][3] = tempVel;
    } else if(calibWheel == LEFT_WHEEL_BW_SC) {
    4e40:	82 30       	cpi	r24, 0x02	; 2
    4e42:	09 f4       	brne	.+2      	; 0x4e46 <updateOdomData+0x74>
    4e44:	6b c0       	rjmp	.+214    	; 0x4f1c <updateOdomData+0x14a>
                tempVel = calibration[calibVelIndex-2][5]+1;
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
        calibration[calibVelIndex-1][5] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    4e46:	83 30       	cpi	r24, 0x03	; 3
    4e48:	91 f1       	breq	.+100    	; 0x4eae <updateOdomData+0xdc>
    4e4a:	08 95       	ret
            }
        }
        calibration[calibVelIndex-1][0] = avgLeftSpeed;
        calibration[calibVelIndex-1][1] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_FW_SC) {
        if(calibVelIndex>1) {
    4e4c:	e0 91 9e 08 	lds	r30, 0x089E
    4e50:	e2 30       	cpi	r30, 0x02	; 2
    4e52:	08 f4       	brcc	.+2      	; 0x4e56 <updateOdomData+0x84>
    4e54:	93 c0       	rjmp	.+294    	; 0x4f7c <updateOdomData+0x1aa>
            if(calibration[calibVelIndex-2][3] >= tempVel) {
    4e56:	f0 e0       	ldi	r31, 0x00	; 0
    4e58:	df 01       	movw	r26, r30
    4e5a:	a2 95       	swap	r26
    4e5c:	b2 95       	swap	r27
    4e5e:	b0 7f       	andi	r27, 0xF0	; 240
    4e60:	ba 27       	eor	r27, r26
    4e62:	a0 7f       	andi	r26, 0xF0	; 240
    4e64:	ba 27       	eor	r27, r26
    4e66:	ab 55       	subi	r26, 0x5B	; 91
    4e68:	b7 4f       	sbci	r27, 0xF7	; 247
    4e6a:	16 96       	adiw	r26, 0x06	; 6
    4e6c:	2d 91       	ld	r18, X+
    4e6e:	3c 91       	ld	r19, X
    4e70:	17 97       	sbiw	r26, 0x07	; 7
    4e72:	80 91 59 0b 	lds	r24, 0x0B59
    4e76:	90 91 5a 0b 	lds	r25, 0x0B5A
    4e7a:	28 17       	cp	r18, r24
    4e7c:	39 07       	cpc	r19, r25
    4e7e:	34 f0       	brlt	.+12     	; 0x4e8c <updateOdomData+0xba>
                tempVel = calibration[calibVelIndex-2][3]+1;
    4e80:	c9 01       	movw	r24, r18
    4e82:	01 96       	adiw	r24, 0x01	; 1
    4e84:	90 93 5a 0b 	sts	0x0B5A, r25
    4e88:	80 93 59 0b 	sts	0x0B59, r24
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
    4e8c:	e2 95       	swap	r30
    4e8e:	f2 95       	swap	r31
    4e90:	f0 7f       	andi	r31, 0xF0	; 240
    4e92:	fe 27       	eor	r31, r30
    4e94:	e0 7f       	andi	r30, 0xF0	; 240
    4e96:	fe 27       	eor	r31, r30
    4e98:	eb 54       	subi	r30, 0x4B	; 75
    4e9a:	f7 4f       	sbci	r31, 0xF7	; 247
    4e9c:	20 91 b6 04 	lds	r18, 0x04B6
    4ea0:	30 91 b7 04 	lds	r19, 0x04B7
    4ea4:	35 83       	std	Z+5, r19	; 0x05
    4ea6:	24 83       	std	Z+4, r18	; 0x04
        calibration[calibVelIndex-1][3] = tempVel;
    4ea8:	97 83       	std	Z+7, r25	; 0x07
    4eaa:	86 83       	std	Z+6, r24	; 0x06
    4eac:	08 95       	ret
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
        calibration[calibVelIndex-1][5] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    4eae:	e0 91 9e 08 	lds	r30, 0x089E
    4eb2:	e2 30       	cpi	r30, 0x02	; 2
    4eb4:	08 f4       	brcc	.+2      	; 0x4eb8 <updateOdomData+0xe6>
    4eb6:	68 c0       	rjmp	.+208    	; 0x4f88 <updateOdomData+0x1b6>
            if(calibration[calibVelIndex-2][7] >= tempVel) {
    4eb8:	f0 e0       	ldi	r31, 0x00	; 0
    4eba:	df 01       	movw	r26, r30
    4ebc:	a2 95       	swap	r26
    4ebe:	b2 95       	swap	r27
    4ec0:	b0 7f       	andi	r27, 0xF0	; 240
    4ec2:	ba 27       	eor	r27, r26
    4ec4:	a0 7f       	andi	r26, 0xF0	; 240
    4ec6:	ba 27       	eor	r27, r26
    4ec8:	ab 55       	subi	r26, 0x5B	; 91
    4eca:	b7 4f       	sbci	r27, 0xF7	; 247
    4ecc:	1e 96       	adiw	r26, 0x0e	; 14
    4ece:	2d 91       	ld	r18, X+
    4ed0:	3c 91       	ld	r19, X
    4ed2:	1f 97       	sbiw	r26, 0x0f	; 15
    4ed4:	80 91 59 0b 	lds	r24, 0x0B59
    4ed8:	90 91 5a 0b 	lds	r25, 0x0B5A
    4edc:	28 17       	cp	r18, r24
    4ede:	39 07       	cpc	r19, r25
    4ee0:	34 f0       	brlt	.+12     	; 0x4eee <updateOdomData+0x11c>
                tempVel = calibration[calibVelIndex-2][7]+1;
    4ee2:	c9 01       	movw	r24, r18
    4ee4:	01 96       	adiw	r24, 0x01	; 1
    4ee6:	90 93 5a 0b 	sts	0x0B5A, r25
    4eea:	80 93 59 0b 	sts	0x0B59, r24
            }
        }
		calibration[calibVelIndex-1][6] = avgRightSpeed;
    4eee:	e2 95       	swap	r30
    4ef0:	f2 95       	swap	r31
    4ef2:	f0 7f       	andi	r31, 0xF0	; 240
    4ef4:	fe 27       	eor	r31, r30
    4ef6:	e0 7f       	andi	r30, 0xF0	; 240
    4ef8:	fe 27       	eor	r31, r30
    4efa:	eb 54       	subi	r30, 0x4B	; 75
    4efc:	f7 4f       	sbci	r31, 0xF7	; 247
    4efe:	20 91 b6 04 	lds	r18, 0x04B6
    4f02:	30 91 b7 04 	lds	r19, 0x04B7
    4f06:	35 87       	std	Z+13, r19	; 0x0d
    4f08:	24 87       	std	Z+12, r18	; 0x0c
        calibration[calibVelIndex-1][7] = tempVel;
    4f0a:	97 87       	std	Z+15, r25	; 0x0f
    4f0c:	86 87       	std	Z+14, r24	; 0x0e
    4f0e:	08 95       	ret


void updateOdomData() {

    if(calibWheel == LEFT_WHEEL_FW_SC) {
        if(calibVelIndex>1) {
    4f10:	f0 e0       	ldi	r31, 0x00	; 0
    4f12:	80 91 59 0b 	lds	r24, 0x0B59
    4f16:	90 91 5a 0b 	lds	r25, 0x0B5A
    4f1a:	7f cf       	rjmp	.-258    	; 0x4e1a <updateOdomData+0x48>
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
        calibration[calibVelIndex-1][3] = tempVel;
    } else if(calibWheel == LEFT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    4f1c:	e0 91 9e 08 	lds	r30, 0x089E
    4f20:	e2 30       	cpi	r30, 0x02	; 2
    4f22:	c0 f1       	brcs	.+112    	; 0x4f94 <updateOdomData+0x1c2>
            if(calibration[calibVelIndex-2][5] >= tempVel) {
    4f24:	f0 e0       	ldi	r31, 0x00	; 0
    4f26:	df 01       	movw	r26, r30
    4f28:	a2 95       	swap	r26
    4f2a:	b2 95       	swap	r27
    4f2c:	b0 7f       	andi	r27, 0xF0	; 240
    4f2e:	ba 27       	eor	r27, r26
    4f30:	a0 7f       	andi	r26, 0xF0	; 240
    4f32:	ba 27       	eor	r27, r26
    4f34:	ab 55       	subi	r26, 0x5B	; 91
    4f36:	b7 4f       	sbci	r27, 0xF7	; 247
    4f38:	1a 96       	adiw	r26, 0x0a	; 10
    4f3a:	2d 91       	ld	r18, X+
    4f3c:	3c 91       	ld	r19, X
    4f3e:	1b 97       	sbiw	r26, 0x0b	; 11
    4f40:	80 91 59 0b 	lds	r24, 0x0B59
    4f44:	90 91 5a 0b 	lds	r25, 0x0B5A
    4f48:	28 17       	cp	r18, r24
    4f4a:	39 07       	cpc	r19, r25
    4f4c:	34 f0       	brlt	.+12     	; 0x4f5a <updateOdomData+0x188>
                tempVel = calibration[calibVelIndex-2][5]+1;
    4f4e:	c9 01       	movw	r24, r18
    4f50:	01 96       	adiw	r24, 0x01	; 1
    4f52:	90 93 5a 0b 	sts	0x0B5A, r25
    4f56:	80 93 59 0b 	sts	0x0B59, r24
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
    4f5a:	e2 95       	swap	r30
    4f5c:	f2 95       	swap	r31
    4f5e:	f0 7f       	andi	r31, 0xF0	; 240
    4f60:	fe 27       	eor	r31, r30
    4f62:	e0 7f       	andi	r30, 0xF0	; 240
    4f64:	fe 27       	eor	r31, r30
    4f66:	eb 54       	subi	r30, 0x4B	; 75
    4f68:	f7 4f       	sbci	r31, 0xF7	; 247
    4f6a:	20 91 b4 04 	lds	r18, 0x04B4
    4f6e:	30 91 b5 04 	lds	r19, 0x04B5
    4f72:	31 87       	std	Z+9, r19	; 0x09
    4f74:	20 87       	std	Z+8, r18	; 0x08
        calibration[calibVelIndex-1][5] = tempVel;
    4f76:	93 87       	std	Z+11, r25	; 0x0b
    4f78:	82 87       	std	Z+10, r24	; 0x0a
    4f7a:	08 95       	ret
            }
        }
        calibration[calibVelIndex-1][0] = avgLeftSpeed;
        calibration[calibVelIndex-1][1] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_FW_SC) {
        if(calibVelIndex>1) {
    4f7c:	f0 e0       	ldi	r31, 0x00	; 0
    4f7e:	80 91 59 0b 	lds	r24, 0x0B59
    4f82:	90 91 5a 0b 	lds	r25, 0x0B5A
    4f86:	82 cf       	rjmp	.-252    	; 0x4e8c <updateOdomData+0xba>
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
        calibration[calibVelIndex-1][5] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    4f88:	f0 e0       	ldi	r31, 0x00	; 0
    4f8a:	80 91 59 0b 	lds	r24, 0x0B59
    4f8e:	90 91 5a 0b 	lds	r25, 0x0B5A
    4f92:	ad cf       	rjmp	.-166    	; 0x4eee <updateOdomData+0x11c>
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
        calibration[calibVelIndex-1][3] = tempVel;
    } else if(calibWheel == LEFT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    4f94:	f0 e0       	ldi	r31, 0x00	; 0
    4f96:	80 91 59 0b 	lds	r24, 0x0B59
    4f9a:	90 91 5a 0b 	lds	r25, 0x0B5A
    4f9e:	dd cf       	rjmp	.-70     	; 0x4f5a <updateOdomData+0x188>

00004fa0 <handleCalibration>:

}

void handleCalibration() {

	switch(calibState) {
    4fa0:	80 91 44 0b 	lds	r24, 0x0B44
    4fa4:	82 30       	cpi	r24, 0x02	; 2
    4fa6:	09 f4       	brne	.+2      	; 0x4faa <handleCalibration+0xa>
    4fa8:	d0 c0       	rjmp	.+416    	; 0x514a <handleCalibration+0x1aa>
    4faa:	83 30       	cpi	r24, 0x03	; 3
    4fac:	08 f4       	brcc	.+2      	; 0x4fb0 <handleCalibration+0x10>
    4fae:	3f c0       	rjmp	.+126    	; 0x502e <handleCalibration+0x8e>
    4fb0:	84 30       	cpi	r24, 0x04	; 4
    4fb2:	09 f4       	brne	.+2      	; 0x4fb6 <handleCalibration+0x16>
    4fb4:	91 c0       	rjmp	.+290    	; 0x50d8 <handleCalibration+0x138>
    4fb6:	84 30       	cpi	r24, 0x04	; 4
    4fb8:	08 f0       	brcs	.+2      	; 0x4fbc <handleCalibration+0x1c>
    4fba:	63 c0       	rjmp	.+198    	; 0x5082 <handleCalibration+0xe2>
                calibState = 5;
			}
            break;

		case 3: // look for black line again, stop time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    4fbc:	80 91 34 05 	lds	r24, 0x0534
    4fc0:	88 23       	and	r24, r24
    4fc2:	09 f4       	brne	.+2      	; 0x4fc6 <handleCalibration+0x26>
    4fc4:	e1 c0       	rjmp	.+450    	; 0x5188 <handleCalibration+0x1e8>
    4fc6:	82 30       	cpi	r24, 0x02	; 2
    4fc8:	09 f4       	brne	.+2      	; 0x4fcc <handleCalibration+0x2c>
    4fca:	de c0       	rjmp	.+444    	; 0x5188 <handleCalibration+0x1e8>
                    updateOdomData();
                    calibState = 4;
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
            	if(proximityResult[11]<(512-2*HYSTERESIS_THR)) {
    4fcc:	80 91 6f 02 	lds	r24, 0x026F
    4fd0:	90 91 70 02 	lds	r25, 0x0270
    4fd4:	21 e0       	ldi	r18, 0x01	; 1
    4fd6:	8a 36       	cpi	r24, 0x6A	; 106
    4fd8:	92 07       	cpc	r25, r18
    4fda:	0c f4       	brge	.+2      	; 0x4fde <handleCalibration+0x3e>
    4fdc:	8a c1       	rjmp	.+788    	; 0x52f2 <handleCalibration+0x352>
					updateOdomData();
                    calibState = 4;
                    timeoutOdometry = getTime100MicroSec();;
				}
			}
			if((getTime100MicroSec() - timeoutOdometry)>PAUSE_60_SEC) {    // the robot seems to be still, go to next velcoity
    4fde:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <getTime100MicroSec>
    4fe2:	20 91 14 0b 	lds	r18, 0x0B14
    4fe6:	30 91 15 0b 	lds	r19, 0x0B15
    4fea:	40 91 16 0b 	lds	r20, 0x0B16
    4fee:	50 91 17 0b 	lds	r21, 0x0B17
    4ff2:	62 1b       	sub	r22, r18
    4ff4:	73 0b       	sbc	r23, r19
    4ff6:	84 0b       	sbc	r24, r20
    4ff8:	95 0b       	sbc	r25, r21
    4ffa:	6c 39       	cpi	r22, 0x9C	; 156
    4ffc:	2d ec       	ldi	r18, 0xCD	; 205
    4ffe:	72 07       	cpc	r23, r18
    5000:	28 e0       	ldi	r18, 0x08	; 8
    5002:	82 07       	cpc	r24, r18
    5004:	20 e0       	ldi	r18, 0x00	; 0
    5006:	92 07       	cpc	r25, r18
    5008:	d8 f1       	brcs	.+118    	; 0x5080 <handleCalibration+0xe0>
            	tempVel = 0;
    500a:	10 92 5a 0b 	sts	0x0B5A, r1
    500e:	10 92 59 0b 	sts	0x0B59, r1
				avgLeftSpeed = 0;
    5012:	10 92 b5 04 	sts	0x04B5, r1
    5016:	10 92 b4 04 	sts	0x04B4, r1
				avgRightSpeed = 0;
    501a:	10 92 b7 04 	sts	0x04B7, r1
    501e:	10 92 b6 04 	sts	0x04B6, r1
                updateOdomData();
    5022:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <updateOdomData>
                calibState = 5;
    5026:	85 e0       	ldi	r24, 0x05	; 5
    5028:	80 93 44 0b 	sts	0x0B44, r24
    502c:	08 95       	ret

}

void handleCalibration() {

	switch(calibState) {
    502e:	88 23       	and	r24, r24
    5030:	29 f5       	brne	.+74     	; 0x507c <handleCalibration+0xdc>

    	case 0: // set speed
        	if(calibWheel == LEFT_WHEEL_FW_SC) {
    5032:	80 91 34 05 	lds	r24, 0x0534
    5036:	88 23       	and	r24, r24
    5038:	09 f0       	breq	.+2      	; 0x503c <handleCalibration+0x9c>
    503a:	3c c1       	rjmp	.+632    	; 0x52b4 <handleCalibration+0x314>
				pwm_intermediate_right_desired = 0;
    503c:	10 92 fe 02 	sts	0x02FE, r1
    5040:	10 92 fd 02 	sts	0x02FD, r1
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
    5044:	90 91 9e 08 	lds	r25, 0x089E
    5048:	85 e0       	ldi	r24, 0x05	; 5
    504a:	98 9f       	mul	r25, r24
    504c:	c0 01       	movw	r24, r0
    504e:	11 24       	eor	r1, r1
    5050:	88 0f       	add	r24, r24
    5052:	99 1f       	adc	r25, r25
    5054:	88 0f       	add	r24, r24
    5056:	99 1f       	adc	r25, r25
    5058:	90 93 00 03 	sts	0x0300, r25
    505c:	80 93 ff 02 	sts	0x02FF, r24
				pwm_intermediate_left_desired = -((INDEX_STEP*calibVelIndex)<<2);
        	} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
				pwm_intermediate_right_desired = -((INDEX_STEP*calibVelIndex)<<2);
				pwm_intermediate_left_desired = 0;
			}               
            calibState = 1;
    5060:	81 e0       	ldi	r24, 0x01	; 1
    5062:	80 93 44 0b 	sts	0x0B44, r24
            timeoutOdometry = getTime100MicroSec();
    5066:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <getTime100MicroSec>
    506a:	60 93 14 0b 	sts	0x0B14, r22
    506e:	70 93 15 0b 	sts	0x0B15, r23
    5072:	80 93 16 0b 	sts	0x0B16, r24
    5076:	90 93 17 0b 	sts	0x0B17, r25
            break;
    507a:	08 95       	ret

}

void handleCalibration() {

	switch(calibState) {
    507c:	81 30       	cpi	r24, 0x01	; 1
    507e:	71 f0       	breq	.+28     	; 0x509c <handleCalibration+0xfc>
    5080:	08 95       	ret
    5082:	85 30       	cpi	r24, 0x05	; 5
    5084:	e9 f7       	brne	.-6      	; 0x5080 <handleCalibration+0xe0>
                calibState = 5;
			}
            break;

		case 5:
        	calibVelIndex++;
    5086:	80 91 9e 08 	lds	r24, 0x089E
    508a:	8f 5f       	subi	r24, 0xFF	; 255
    508c:	80 93 9e 08 	sts	0x089E, r24
            if(calibVelIndex == 10) {
    5090:	8a 30       	cpi	r24, 0x0A	; 10
    5092:	09 f4       	brne	.+2      	; 0x5096 <handleCalibration+0xf6>
    5094:	8b c1       	rjmp	.+790    	; 0x53ac <handleCalibration+0x40c>
					// red off
					writeCalibrationToFlash();
					calibrateOdomFlag = 0;
				}
			}
			calibState = 0;
    5096:	10 92 44 0b 	sts	0x0B44, r1
    509a:	08 95       	ret
            calibState = 1;
            timeoutOdometry = getTime100MicroSec();
            break;

		case 1: // look for black line, start time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    509c:	80 91 34 05 	lds	r24, 0x0534
    50a0:	88 23       	and	r24, r24
    50a2:	09 f4       	brne	.+2      	; 0x50a6 <handleCalibration+0x106>
    50a4:	d0 c0       	rjmp	.+416    	; 0x5246 <handleCalibration+0x2a6>
    50a6:	82 30       	cpi	r24, 0x02	; 2
    50a8:	09 f4       	brne	.+2      	; 0x50ac <handleCalibration+0x10c>
    50aa:	cd c0       	rjmp	.+410    	; 0x5246 <handleCalibration+0x2a6>
                    timeOdometry = getTime100MicroSec();;
                    calibState = 2;
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
            	if(proximityResult[11]<(512-2*HYSTERESIS_THR)) {
    50ac:	80 91 6f 02 	lds	r24, 0x026F
    50b0:	90 91 70 02 	lds	r25, 0x0270
    50b4:	21 e0       	ldi	r18, 0x01	; 1
    50b6:	8a 36       	cpi	r24, 0x6A	; 106
    50b8:	92 07       	cpc	r25, r18
    50ba:	0c f0       	brlt	.+2      	; 0x50be <handleCalibration+0x11e>
    50bc:	90 cf       	rjmp	.-224    	; 0x4fde <handleCalibration+0x3e>
				//if((proximityResult[11])<(proximityOffset[11]>>1)) {	
					rightSumCount = 0;
    50be:	10 92 b3 04 	sts	0x04B3, r1
    50c2:	10 92 b2 04 	sts	0x04B2, r1
					rightSpeedSumOdom = 0;
    50c6:	10 92 ac 04 	sts	0x04AC, r1
    50ca:	10 92 ad 04 	sts	0x04AD, r1
    50ce:	10 92 ae 04 	sts	0x04AE, r1
    50d2:	10 92 af 04 	sts	0x04AF, r1
    50d6:	cc c0       	rjmp	.+408    	; 0x5270 <handleCalibration+0x2d0>
                calibState = 5;
			}
            break;

		case 4: // exit from black line again
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    50d8:	80 91 34 05 	lds	r24, 0x0534
    50dc:	88 23       	and	r24, r24
    50de:	49 f1       	breq	.+82     	; 0x5132 <handleCalibration+0x192>
    50e0:	82 30       	cpi	r24, 0x02	; 2
    50e2:	39 f1       	breq	.+78     	; 0x5132 <handleCalibration+0x192>
            	if(proximityResult[8]>(512-HYSTERESIS_THR)) {
				//if((proximityResult[8])>(proximityOffset[8]>>1)) {	
                	calibState = 5;
				}
			} else {
            	if(proximityResult[11]>(512-HYSTERESIS_THR)) {
    50e4:	80 91 6f 02 	lds	r24, 0x026F
    50e8:	90 91 70 02 	lds	r25, 0x0270
    50ec:	21 e0       	ldi	r18, 0x01	; 1
    50ee:	86 3b       	cpi	r24, 0xB6	; 182
    50f0:	92 07       	cpc	r25, r18
    50f2:	3c f5       	brge	.+78     	; 0x5142 <handleCalibration+0x1a2>
				//if((proximityResult[11])>(proximityOffset[11]>>1)) {	
					calibState = 5;
				}
			}
            if((getTime100MicroSec() - timeoutOdometry)>PAUSE_60_SEC) {    // the robot seems to be still, go to next velocity
    50f4:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <getTime100MicroSec>
    50f8:	20 91 14 0b 	lds	r18, 0x0B14
    50fc:	30 91 15 0b 	lds	r19, 0x0B15
    5100:	40 91 16 0b 	lds	r20, 0x0B16
    5104:	50 91 17 0b 	lds	r21, 0x0B17
    5108:	62 1b       	sub	r22, r18
    510a:	73 0b       	sbc	r23, r19
    510c:	84 0b       	sbc	r24, r20
    510e:	95 0b       	sbc	r25, r21
    5110:	6c 39       	cpi	r22, 0x9C	; 156
    5112:	2d ec       	ldi	r18, 0xCD	; 205
    5114:	72 07       	cpc	r23, r18
    5116:	28 e0       	ldi	r18, 0x08	; 8
    5118:	82 07       	cpc	r24, r18
    511a:	20 e0       	ldi	r18, 0x00	; 0
    511c:	92 07       	cpc	r25, r18
    511e:	08 f4       	brcc	.+2      	; 0x5122 <handleCalibration+0x182>
    5120:	af cf       	rjmp	.-162    	; 0x5080 <handleCalibration+0xe0>
            	tempVel = 0;
    5122:	10 92 5a 0b 	sts	0x0B5A, r1
    5126:	10 92 59 0b 	sts	0x0B59, r1
                //updateOdomData();
                calibState = 5;
    512a:	85 e0       	ldi	r24, 0x05	; 5
    512c:	80 93 44 0b 	sts	0x0B44, r24
    5130:	08 95       	ret
			}
            break;

		case 4: // exit from black line again
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
            	if(proximityResult[8]>(512-HYSTERESIS_THR)) {
    5132:	80 91 69 02 	lds	r24, 0x0269
    5136:	90 91 6a 02 	lds	r25, 0x026A
    513a:	21 e0       	ldi	r18, 0x01	; 1
    513c:	86 3b       	cpi	r24, 0xB6	; 182
    513e:	92 07       	cpc	r25, r18
    5140:	cc f2       	brlt	.-78     	; 0x50f4 <handleCalibration+0x154>
                	calibState = 5;
				}
			} else {
            	if(proximityResult[11]>(512-HYSTERESIS_THR)) {
				//if((proximityResult[11])>(proximityOffset[11]>>1)) {	
					calibState = 5;
    5142:	85 e0       	ldi	r24, 0x05	; 5
    5144:	80 93 44 0b 	sts	0x0B44, r24
    5148:	d5 cf       	rjmp	.-86     	; 0x50f4 <handleCalibration+0x154>
                calibState = 5;
			}
			break;

		case 2: // exit from black line
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    514a:	80 91 34 05 	lds	r24, 0x0534
    514e:	88 23       	and	r24, r24
    5150:	09 f4       	brne	.+2      	; 0x5154 <handleCalibration+0x1b4>
    5152:	a6 c0       	rjmp	.+332    	; 0x52a0 <handleCalibration+0x300>
    5154:	82 30       	cpi	r24, 0x02	; 2
    5156:	09 f4       	brne	.+2      	; 0x515a <handleCalibration+0x1ba>
    5158:	a3 c0       	rjmp	.+326    	; 0x52a0 <handleCalibration+0x300>
				//if((proximityResult[8])>(proximityOffset[8]>>1)) {	
                	calibState = 3;
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
            	if(proximityResult[11]>(512-HYSTERESIS_THR)) {
    515a:	80 91 6f 02 	lds	r24, 0x026F
    515e:	90 91 70 02 	lds	r25, 0x0270
    5162:	21 e0       	ldi	r18, 0x01	; 1
    5164:	86 3b       	cpi	r24, 0xB6	; 182
    5166:	92 07       	cpc	r25, r18
    5168:	0c f4       	brge	.+2      	; 0x516c <handleCalibration+0x1cc>
    516a:	39 cf       	rjmp	.-398    	; 0x4fde <handleCalibration+0x3e>
				//if((proximityResult[11])>(proximityOffset[11]>>1)) {	
                	calibState = 3;
    516c:	83 e0       	ldi	r24, 0x03	; 3
    516e:	80 93 44 0b 	sts	0x0B44, r24
                    timeoutOdometry = getTime100MicroSec();;
    5172:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <getTime100MicroSec>
    5176:	60 93 14 0b 	sts	0x0B14, r22
    517a:	70 93 15 0b 	sts	0x0B15, r23
    517e:	80 93 16 0b 	sts	0x0B16, r24
    5182:	90 93 17 0b 	sts	0x0B17, r25
    5186:	2b cf       	rjmp	.-426    	; 0x4fde <handleCalibration+0x3e>
			}
            break;

		case 3: // look for black line again, stop time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
            	if(proximityResult[8]<(512-2*HYSTERESIS_THR)) {
    5188:	80 91 69 02 	lds	r24, 0x0269
    518c:	90 91 6a 02 	lds	r25, 0x026A
    5190:	21 e0       	ldi	r18, 0x01	; 1
    5192:	8a 36       	cpi	r24, 0x6A	; 106
    5194:	92 07       	cpc	r25, r18
    5196:	0c f0       	brlt	.+2      	; 0x519a <handleCalibration+0x1fa>
    5198:	22 cf       	rjmp	.-444    	; 0x4fde <handleCalibration+0x3e>
				//if((proximityResult[8])<(proximityOffset[8]>>1)) {	
                	timeOdometry = getTime100MicroSec() - timeOdometry;
    519a:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <getTime100MicroSec>
    519e:	20 91 2d 05 	lds	r18, 0x052D
    51a2:	30 91 2e 05 	lds	r19, 0x052E
    51a6:	40 91 2f 05 	lds	r20, 0x052F
    51aa:	50 91 30 05 	lds	r21, 0x0530
    51ae:	62 1b       	sub	r22, r18
    51b0:	73 0b       	sbc	r23, r19
    51b2:	84 0b       	sbc	r24, r20
    51b4:	95 0b       	sbc	r25, r21
    51b6:	60 93 2d 05 	sts	0x052D, r22
    51ba:	70 93 2e 05 	sts	0x052E, r23
    51be:	80 93 2f 05 	sts	0x052F, r24
    51c2:	90 93 30 05 	sts	0x0530, r25
                    tempVel = (unsigned int)(DISTANCE_MM/((float)timeOdometry*104.0/1000000.0));
    51c6:	0e 94 d1 4f 	call	0x9fa2	; 0x9fa2 <__floatunsisf>
    51ca:	20 e0       	ldi	r18, 0x00	; 0
    51cc:	30 e0       	ldi	r19, 0x00	; 0
    51ce:	40 ed       	ldi	r20, 0xD0	; 208
    51d0:	52 e4       	ldi	r21, 0x42	; 66
    51d2:	0e 94 e8 50 	call	0xa1d0	; 0xa1d0 <__mulsf3>
    51d6:	20 e0       	ldi	r18, 0x00	; 0
    51d8:	34 e2       	ldi	r19, 0x24	; 36
    51da:	44 e7       	ldi	r20, 0x74	; 116
    51dc:	59 e4       	ldi	r21, 0x49	; 73
    51de:	0e 94 38 4f 	call	0x9e70	; 0x9e70 <__divsf3>
    51e2:	9b 01       	movw	r18, r22
    51e4:	ac 01       	movw	r20, r24
    51e6:	64 e1       	ldi	r22, 0x14	; 20
    51e8:	7e e2       	ldi	r23, 0x2E	; 46
    51ea:	88 e7       	ldi	r24, 0x78	; 120
    51ec:	93 e4       	ldi	r25, 0x43	; 67
    51ee:	0e 94 38 4f 	call	0x9e70	; 0x9e70 <__divsf3>
    51f2:	0e 94 a5 4f 	call	0x9f4a	; 0x9f4a <__fixunssfsi>
    51f6:	70 93 5a 0b 	sts	0x0B5A, r23
    51fa:	60 93 59 0b 	sts	0x0B59, r22
					avgLeftSpeed = leftSpeedSumOdom/leftSumCount;
    51fe:	20 91 b0 04 	lds	r18, 0x04B0
    5202:	30 91 b1 04 	lds	r19, 0x04B1
    5206:	40 e0       	ldi	r20, 0x00	; 0
    5208:	50 e0       	ldi	r21, 0x00	; 0
    520a:	60 91 a8 04 	lds	r22, 0x04A8
    520e:	70 91 a9 04 	lds	r23, 0x04A9
    5212:	80 91 aa 04 	lds	r24, 0x04AA
    5216:	90 91 ab 04 	lds	r25, 0x04AB
    521a:	0e 94 b9 51 	call	0xa372	; 0xa372 <__divmodsi4>
    521e:	30 93 b5 04 	sts	0x04B5, r19
    5222:	20 93 b4 04 	sts	0x04B4, r18
            	if(proximityResult[11]<(512-2*HYSTERESIS_THR)) {
				//if((proximityResult[11])<(proximityOffset[11]>>1)) {	
                	timeOdometry = getTime100MicroSec() - timeOdometry;
                    tempVel = (unsigned int)(DISTANCE_MM/((float)timeOdometry*104.0/1000000.0));
                    avgRightSpeed = rightSpeedSumOdom/rightSumCount;
					updateOdomData();
    5226:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <updateOdomData>
                    calibState = 4;
    522a:	84 e0       	ldi	r24, 0x04	; 4
    522c:	80 93 44 0b 	sts	0x0B44, r24
                    timeoutOdometry = getTime100MicroSec();;
    5230:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <getTime100MicroSec>
    5234:	60 93 14 0b 	sts	0x0B14, r22
    5238:	70 93 15 0b 	sts	0x0B15, r23
    523c:	80 93 16 0b 	sts	0x0B16, r24
    5240:	90 93 17 0b 	sts	0x0B17, r25
    5244:	cc ce       	rjmp	.-616    	; 0x4fde <handleCalibration+0x3e>
            timeoutOdometry = getTime100MicroSec();
            break;

		case 1: // look for black line, start time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
            	if(proximityResult[8]<(512-2*HYSTERESIS_THR)) {
    5246:	80 91 69 02 	lds	r24, 0x0269
    524a:	90 91 6a 02 	lds	r25, 0x026A
    524e:	21 e0       	ldi	r18, 0x01	; 1
    5250:	8a 36       	cpi	r24, 0x6A	; 106
    5252:	92 07       	cpc	r25, r18
    5254:	0c f0       	brlt	.+2      	; 0x5258 <handleCalibration+0x2b8>
    5256:	c3 ce       	rjmp	.-634    	; 0x4fde <handleCalibration+0x3e>
				//if((proximityResult[8])<(proximityOffset[8]>>1)) {				
                	leftSumCount = 0;
    5258:	10 92 b1 04 	sts	0x04B1, r1
    525c:	10 92 b0 04 	sts	0x04B0, r1
                    leftSpeedSumOdom = 0;
    5260:	10 92 a8 04 	sts	0x04A8, r1
    5264:	10 92 a9 04 	sts	0x04A9, r1
    5268:	10 92 aa 04 	sts	0x04AA, r1
    526c:	10 92 ab 04 	sts	0x04AB, r1
			} else {
            	if(proximityResult[11]<(512-2*HYSTERESIS_THR)) {
				//if((proximityResult[11])<(proximityOffset[11]>>1)) {	
					rightSumCount = 0;
					rightSpeedSumOdom = 0;
                    timeOdometry = getTime100MicroSec();;
    5270:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <getTime100MicroSec>
    5274:	60 93 2d 05 	sts	0x052D, r22
    5278:	70 93 2e 05 	sts	0x052E, r23
    527c:	80 93 2f 05 	sts	0x052F, r24
    5280:	90 93 30 05 	sts	0x0530, r25
                    calibState = 2;
    5284:	82 e0       	ldi	r24, 0x02	; 2
    5286:	80 93 44 0b 	sts	0x0B44, r24
                    timeoutOdometry = getTime100MicroSec();;
    528a:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <getTime100MicroSec>
    528e:	60 93 14 0b 	sts	0x0B14, r22
    5292:	70 93 15 0b 	sts	0x0B15, r23
    5296:	80 93 16 0b 	sts	0x0B16, r24
    529a:	90 93 17 0b 	sts	0x0B17, r25
    529e:	9f ce       	rjmp	.-706    	; 0x4fde <handleCalibration+0x3e>
			}
			break;

		case 2: // exit from black line
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
            	if(proximityResult[8]>(512-HYSTERESIS_THR)) {
    52a0:	80 91 69 02 	lds	r24, 0x0269
    52a4:	90 91 6a 02 	lds	r25, 0x026A
    52a8:	21 e0       	ldi	r18, 0x01	; 1
    52aa:	86 3b       	cpi	r24, 0xB6	; 182
    52ac:	92 07       	cpc	r25, r18
    52ae:	0c f4       	brge	.+2      	; 0x52b2 <handleCalibration+0x312>
    52b0:	96 ce       	rjmp	.-724    	; 0x4fde <handleCalibration+0x3e>
    52b2:	5c cf       	rjmp	.-328    	; 0x516c <handleCalibration+0x1cc>

    	case 0: // set speed
        	if(calibWheel == LEFT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = 0;
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    52b4:	81 30       	cpi	r24, 0x01	; 1
    52b6:	09 f4       	brne	.+2      	; 0x52ba <handleCalibration+0x31a>
    52b8:	84 c0       	rjmp	.+264    	; 0x53c2 <handleCalibration+0x422>
				pwm_intermediate_right_desired = (INDEX_STEP*calibVelIndex)<<2;
				pwm_intermediate_left_desired = 0;
			} else if(calibWheel == LEFT_WHEEL_BW_SC) {
    52ba:	82 30       	cpi	r24, 0x02	; 2
    52bc:	09 f4       	brne	.+2      	; 0x52c0 <handleCalibration+0x320>
    52be:	60 c0       	rjmp	.+192    	; 0x5380 <handleCalibration+0x3e0>
				pwm_intermediate_right_desired = 0;
				pwm_intermediate_left_desired = -((INDEX_STEP*calibVelIndex)<<2);
        	} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    52c0:	83 30       	cpi	r24, 0x03	; 3
    52c2:	09 f0       	breq	.+2      	; 0x52c6 <handleCalibration+0x326>
    52c4:	cd ce       	rjmp	.-614    	; 0x5060 <handleCalibration+0xc0>
				pwm_intermediate_right_desired = -((INDEX_STEP*calibVelIndex)<<2);
    52c6:	90 91 9e 08 	lds	r25, 0x089E
    52ca:	85 e0       	ldi	r24, 0x05	; 5
    52cc:	98 9f       	mul	r25, r24
    52ce:	c0 01       	movw	r24, r0
    52d0:	11 24       	eor	r1, r1
    52d2:	88 0f       	add	r24, r24
    52d4:	99 1f       	adc	r25, r25
    52d6:	88 0f       	add	r24, r24
    52d8:	99 1f       	adc	r25, r25
    52da:	90 95       	com	r25
    52dc:	81 95       	neg	r24
    52de:	9f 4f       	sbci	r25, 0xFF	; 255
    52e0:	90 93 fe 02 	sts	0x02FE, r25
    52e4:	80 93 fd 02 	sts	0x02FD, r24
				pwm_intermediate_left_desired = 0;
    52e8:	10 92 00 03 	sts	0x0300, r1
    52ec:	10 92 ff 02 	sts	0x02FF, r1
    52f0:	b7 ce       	rjmp	.-658    	; 0x5060 <handleCalibration+0xc0>
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
            	if(proximityResult[11]<(512-2*HYSTERESIS_THR)) {
				//if((proximityResult[11])<(proximityOffset[11]>>1)) {	
                	timeOdometry = getTime100MicroSec() - timeOdometry;
    52f2:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <getTime100MicroSec>
    52f6:	20 91 2d 05 	lds	r18, 0x052D
    52fa:	30 91 2e 05 	lds	r19, 0x052E
    52fe:	40 91 2f 05 	lds	r20, 0x052F
    5302:	50 91 30 05 	lds	r21, 0x0530
    5306:	62 1b       	sub	r22, r18
    5308:	73 0b       	sbc	r23, r19
    530a:	84 0b       	sbc	r24, r20
    530c:	95 0b       	sbc	r25, r21
    530e:	60 93 2d 05 	sts	0x052D, r22
    5312:	70 93 2e 05 	sts	0x052E, r23
    5316:	80 93 2f 05 	sts	0x052F, r24
    531a:	90 93 30 05 	sts	0x0530, r25
                    tempVel = (unsigned int)(DISTANCE_MM/((float)timeOdometry*104.0/1000000.0));
    531e:	0e 94 d1 4f 	call	0x9fa2	; 0x9fa2 <__floatunsisf>
    5322:	20 e0       	ldi	r18, 0x00	; 0
    5324:	30 e0       	ldi	r19, 0x00	; 0
    5326:	40 ed       	ldi	r20, 0xD0	; 208
    5328:	52 e4       	ldi	r21, 0x42	; 66
    532a:	0e 94 e8 50 	call	0xa1d0	; 0xa1d0 <__mulsf3>
    532e:	20 e0       	ldi	r18, 0x00	; 0
    5330:	34 e2       	ldi	r19, 0x24	; 36
    5332:	44 e7       	ldi	r20, 0x74	; 116
    5334:	59 e4       	ldi	r21, 0x49	; 73
    5336:	0e 94 38 4f 	call	0x9e70	; 0x9e70 <__divsf3>
    533a:	9b 01       	movw	r18, r22
    533c:	ac 01       	movw	r20, r24
    533e:	64 e1       	ldi	r22, 0x14	; 20
    5340:	7e e2       	ldi	r23, 0x2E	; 46
    5342:	88 e7       	ldi	r24, 0x78	; 120
    5344:	93 e4       	ldi	r25, 0x43	; 67
    5346:	0e 94 38 4f 	call	0x9e70	; 0x9e70 <__divsf3>
    534a:	0e 94 a5 4f 	call	0x9f4a	; 0x9f4a <__fixunssfsi>
    534e:	70 93 5a 0b 	sts	0x0B5A, r23
    5352:	60 93 59 0b 	sts	0x0B59, r22
                    avgRightSpeed = rightSpeedSumOdom/rightSumCount;
    5356:	20 91 b2 04 	lds	r18, 0x04B2
    535a:	30 91 b3 04 	lds	r19, 0x04B3
    535e:	40 e0       	ldi	r20, 0x00	; 0
    5360:	50 e0       	ldi	r21, 0x00	; 0
    5362:	60 91 ac 04 	lds	r22, 0x04AC
    5366:	70 91 ad 04 	lds	r23, 0x04AD
    536a:	80 91 ae 04 	lds	r24, 0x04AE
    536e:	90 91 af 04 	lds	r25, 0x04AF
    5372:	0e 94 b9 51 	call	0xa372	; 0xa372 <__divmodsi4>
    5376:	30 93 b7 04 	sts	0x04B7, r19
    537a:	20 93 b6 04 	sts	0x04B6, r18
    537e:	53 cf       	rjmp	.-346    	; 0x5226 <handleCalibration+0x286>
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = (INDEX_STEP*calibVelIndex)<<2;
				pwm_intermediate_left_desired = 0;
			} else if(calibWheel == LEFT_WHEEL_BW_SC) {
				pwm_intermediate_right_desired = 0;
    5380:	10 92 fe 02 	sts	0x02FE, r1
    5384:	10 92 fd 02 	sts	0x02FD, r1
				pwm_intermediate_left_desired = -((INDEX_STEP*calibVelIndex)<<2);
    5388:	90 91 9e 08 	lds	r25, 0x089E
    538c:	85 e0       	ldi	r24, 0x05	; 5
    538e:	98 9f       	mul	r25, r24
    5390:	c0 01       	movw	r24, r0
    5392:	11 24       	eor	r1, r1
    5394:	88 0f       	add	r24, r24
    5396:	99 1f       	adc	r25, r25
    5398:	88 0f       	add	r24, r24
    539a:	99 1f       	adc	r25, r25
    539c:	90 95       	com	r25
    539e:	81 95       	neg	r24
    53a0:	9f 4f       	sbci	r25, 0xFF	; 255
    53a2:	90 93 00 03 	sts	0x0300, r25
    53a6:	80 93 ff 02 	sts	0x02FF, r24
    53aa:	5a ce       	rjmp	.-844    	; 0x5060 <handleCalibration+0xc0>
            break;

		case 5:
        	calibVelIndex++;
            if(calibVelIndex == 10) {
            	calibVelIndex = 1;
    53ac:	91 e0       	ldi	r25, 0x01	; 1
    53ae:	90 93 9e 08 	sts	0x089E, r25
                if(calibWheel == LEFT_WHEEL_FW_SC) {
    53b2:	80 91 34 05 	lds	r24, 0x0534
    53b6:	88 23       	and	r24, r24
    53b8:	b9 f4       	brne	.+46     	; 0x53e8 <handleCalibration+0x448>
                	calibWheel = LEFT_WHEEL_BW_SC;
    53ba:	82 e0       	ldi	r24, 0x02	; 2
    53bc:	80 93 34 05 	sts	0x0534, r24
    53c0:	6a ce       	rjmp	.-812    	; 0x5096 <handleCalibration+0xf6>
    	case 0: // set speed
        	if(calibWheel == LEFT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = 0;
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = (INDEX_STEP*calibVelIndex)<<2;
    53c2:	90 91 9e 08 	lds	r25, 0x089E
    53c6:	85 e0       	ldi	r24, 0x05	; 5
    53c8:	98 9f       	mul	r25, r24
    53ca:	c0 01       	movw	r24, r0
    53cc:	11 24       	eor	r1, r1
    53ce:	88 0f       	add	r24, r24
    53d0:	99 1f       	adc	r25, r25
    53d2:	88 0f       	add	r24, r24
    53d4:	99 1f       	adc	r25, r25
    53d6:	90 93 fe 02 	sts	0x02FE, r25
    53da:	80 93 fd 02 	sts	0x02FD, r24
				pwm_intermediate_left_desired = 0;
    53de:	10 92 00 03 	sts	0x0300, r1
    53e2:	10 92 ff 02 	sts	0x02FF, r1
    53e6:	3c ce       	rjmp	.-904    	; 0x5060 <handleCalibration+0xc0>
        	calibVelIndex++;
            if(calibVelIndex == 10) {
            	calibVelIndex = 1;
                if(calibWheel == LEFT_WHEEL_FW_SC) {
                	calibWheel = LEFT_WHEEL_BW_SC;
				} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    53e8:	81 30       	cpi	r24, 0x01	; 1
    53ea:	61 f0       	breq	.+24     	; 0x5404 <handleCalibration+0x464>
                	calibWheel = RIGHT_WHEEL_BW_SC;
				} else if(calibWheel == LEFT_WHEEL_BW_SC) {
    53ec:	82 30       	cpi	r24, 0x02	; 2
    53ee:	71 f0       	breq	.+28     	; 0x540c <handleCalibration+0x46c>
                	calibWheel = RIGHT_WHEEL_FW_SC;
					calibrateOdomFlag = 0;
					// red on
				} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    53f0:	83 30       	cpi	r24, 0x03	; 3
    53f2:	09 f0       	breq	.+2      	; 0x53f6 <handleCalibration+0x456>
    53f4:	50 ce       	rjmp	.-864    	; 0x5096 <handleCalibration+0xf6>
                	calibWheel = LEFT_WHEEL_FW_SC;					
    53f6:	10 92 34 05 	sts	0x0534, r1
					// red off
					writeCalibrationToFlash();
    53fa:	0e 94 d3 42 	call	0x85a6	; 0x85a6 <writeCalibrationToFlash>
					calibrateOdomFlag = 0;
    53fe:	10 92 4f 05 	sts	0x054F, r1
    5402:	49 ce       	rjmp	.-878    	; 0x5096 <handleCalibration+0xf6>
            if(calibVelIndex == 10) {
            	calibVelIndex = 1;
                if(calibWheel == LEFT_WHEEL_FW_SC) {
                	calibWheel = LEFT_WHEEL_BW_SC;
				} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
                	calibWheel = RIGHT_WHEEL_BW_SC;
    5404:	83 e0       	ldi	r24, 0x03	; 3
    5406:	80 93 34 05 	sts	0x0534, r24
    540a:	45 ce       	rjmp	.-886    	; 0x5096 <handleCalibration+0xf6>
				} else if(calibWheel == LEFT_WHEEL_BW_SC) {
                	calibWheel = RIGHT_WHEEL_FW_SC;
    540c:	90 93 34 05 	sts	0x0534, r25
					calibrateOdomFlag = 0;
    5410:	10 92 4f 05 	sts	0x054F, r1
    5414:	40 ce       	rjmp	.-896    	; 0x5096 <handleCalibration+0xf6>

00005416 <getInputFromSpeed>:

}

// extract data to pass to speed controller given a desired speed in mm/s
// mode => return a measured speed 0..1023
signed int getInputFromSpeed(signed int s, unsigned char mode) {
    5416:	af 92       	push	r10
    5418:	bf 92       	push	r11
    541a:	cf 92       	push	r12
    541c:	df 92       	push	r13
    541e:	ef 92       	push	r14
    5420:	ff 92       	push	r15
    5422:	0f 93       	push	r16
    5424:	1f 93       	push	r17
    5426:	cf 93       	push	r28
    5428:	df 93       	push	r29
    
    int i = 0;
    signed int currVel = s*BYTE_TO_MM_S;
    542a:	9c 01       	movw	r18, r24
    542c:	22 0f       	add	r18, r18
    542e:	33 1f       	adc	r19, r19
    5430:	22 0f       	add	r18, r18
    5432:	33 1f       	adc	r19, r19
    5434:	28 0f       	add	r18, r24
    5436:	39 1f       	adc	r19, r25
    signed int temp = 0;

    if(currVel == 0) {
    5438:	21 15       	cp	r18, r1
    543a:	31 05       	cpc	r19, r1
    543c:	09 f4       	brne	.+2      	; 0x5440 <getInputFromSpeed+0x2a>
    543e:	7b c0       	rjmp	.+246    	; 0x5536 <getInputFromSpeed+0x120>
        return 0;
    }

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
    5440:	86 2f       	mov	r24, r22
    5442:	82 50       	subi	r24, 0x02	; 2
    5444:	82 30       	cpi	r24, 0x02	; 2
    5446:	08 f4       	brcc	.+2      	; 0x544a <getInputFromSpeed+0x34>
    5448:	84 c0       	rjmp	.+264    	; 0x5552 <getInputFromSpeed+0x13c>
        currVel = -currVel; // consider only positive values
    544a:	66 23       	and	r22, r22
    544c:	09 f0       	breq	.+2      	; 0x5450 <getInputFromSpeed+0x3a>
    544e:	84 c0       	rjmp	.+264    	; 0x5558 <getInputFromSpeed+0x142>
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
    5450:	80 91 c7 08 	lds	r24, 0x08C7
    5454:	90 91 c8 08 	lds	r25, 0x08C8
    5458:	82 17       	cp	r24, r18
    545a:	93 07       	cpc	r25, r19
    545c:	0c f0       	brlt	.+2      	; 0x5460 <getInputFromSpeed+0x4a>
    545e:	1b c2       	rjmp	.+1078   	; 0x5896 <getInputFromSpeed+0x480>
    5460:	80 91 d7 08 	lds	r24, 0x08D7
    5464:	90 91 d8 08 	lds	r25, 0x08D8
    5468:	82 17       	cp	r24, r18
    546a:	93 07       	cpc	r25, r19
    546c:	0c f0       	brlt	.+2      	; 0x5470 <getInputFromSpeed+0x5a>
    546e:	1c c2       	rjmp	.+1080   	; 0x58a8 <getInputFromSpeed+0x492>
    5470:	80 91 e7 08 	lds	r24, 0x08E7
    5474:	90 91 e8 08 	lds	r25, 0x08E8
    5478:	82 17       	cp	r24, r18
    547a:	93 07       	cpc	r25, r19
    547c:	0c f0       	brlt	.+2      	; 0x5480 <getInputFromSpeed+0x6a>
    547e:	17 c2       	rjmp	.+1070   	; 0x58ae <getInputFromSpeed+0x498>
    5480:	80 91 f7 08 	lds	r24, 0x08F7
    5484:	90 91 f8 08 	lds	r25, 0x08F8
    5488:	82 17       	cp	r24, r18
    548a:	93 07       	cpc	r25, r19
    548c:	0c f0       	brlt	.+2      	; 0x5490 <getInputFromSpeed+0x7a>
    548e:	12 c2       	rjmp	.+1060   	; 0x58b4 <getInputFromSpeed+0x49e>
    5490:	80 91 07 09 	lds	r24, 0x0907
    5494:	90 91 08 09 	lds	r25, 0x0908
    5498:	82 17       	cp	r24, r18
    549a:	93 07       	cpc	r25, r19
    549c:	0c f0       	brlt	.+2      	; 0x54a0 <getInputFromSpeed+0x8a>
    549e:	fe c1       	rjmp	.+1020   	; 0x589c <getInputFromSpeed+0x486>
    54a0:	80 91 17 09 	lds	r24, 0x0917
    54a4:	90 91 18 09 	lds	r25, 0x0918
    54a8:	82 17       	cp	r24, r18
    54aa:	93 07       	cpc	r25, r19
    54ac:	0c f0       	brlt	.+2      	; 0x54b0 <getInputFromSpeed+0x9a>
    54ae:	f9 c1       	rjmp	.+1010   	; 0x58a2 <getInputFromSpeed+0x48c>
    54b0:	80 91 27 09 	lds	r24, 0x0927
    54b4:	90 91 28 09 	lds	r25, 0x0928
    54b8:	82 17       	cp	r24, r18
    54ba:	93 07       	cpc	r25, r19
    54bc:	0c f0       	brlt	.+2      	; 0x54c0 <getInputFromSpeed+0xaa>
    54be:	02 c2       	rjmp	.+1028   	; 0x58c4 <getInputFromSpeed+0x4ae>
    54c0:	80 91 37 09 	lds	r24, 0x0937
    54c4:	90 91 38 09 	lds	r25, 0x0938
    54c8:	82 17       	cp	r24, r18
    54ca:	93 07       	cpc	r25, r19
    54cc:	0c f0       	brlt	.+2      	; 0x54d0 <getInputFromSpeed+0xba>
    54ce:	fd c1       	rjmp	.+1018   	; 0x58ca <getInputFromSpeed+0x4b4>
    54d0:	c0 91 47 09 	lds	r28, 0x0947
    54d4:	d0 91 48 09 	lds	r29, 0x0948
    54d8:	c2 17       	cp	r28, r18
    54da:	d3 07       	cpc	r29, r19
    54dc:	0c f0       	brlt	.+2      	; 0x54e0 <getInputFromSpeed+0xca>
    54de:	7a c1       	rjmp	.+756    	; 0x57d4 <getInputFromSpeed+0x3be>
            temp = currVel*calibration[0][6]/calibration[0][7];
            temp = -temp;
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
    54e0:	b9 01       	movw	r22, r18
    54e2:	88 27       	eor	r24, r24
    54e4:	77 fd       	sbrc	r23, 7
    54e6:	80 95       	com	r24
    54e8:	98 2f       	mov	r25, r24
    54ea:	0e 94 d3 4f 	call	0x9fa6	; 0x9fa6 <__floatsisf>
    54ee:	7b 01       	movw	r14, r22
    54f0:	8c 01       	movw	r16, r24
    54f2:	60 91 45 09 	lds	r22, 0x0945
    54f6:	70 91 46 09 	lds	r23, 0x0946
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
    54fa:	88 27       	eor	r24, r24
    54fc:	77 fd       	sbrc	r23, 7
    54fe:	80 95       	com	r24
    5500:	98 2f       	mov	r25, r24
    5502:	0e 94 d3 4f 	call	0x9fa6	; 0x9fa6 <__floatsisf>
    5506:	9b 01       	movw	r18, r22
    5508:	ac 01       	movw	r20, r24
    550a:	c8 01       	movw	r24, r16
    550c:	b7 01       	movw	r22, r14
    550e:	0e 94 e8 50 	call	0xa1d0	; 0xa1d0 <__mulsf3>
    5512:	7b 01       	movw	r14, r22
    5514:	8c 01       	movw	r16, r24
    5516:	be 01       	movw	r22, r28
    5518:	88 27       	eor	r24, r24
    551a:	77 fd       	sbrc	r23, 7
    551c:	80 95       	com	r24
    551e:	98 2f       	mov	r25, r24
    5520:	0e 94 d3 4f 	call	0x9fa6	; 0x9fa6 <__floatsisf>
    5524:	9b 01       	movw	r18, r22
    5526:	ac 01       	movw	r20, r24
    5528:	c8 01       	movw	r24, r16
    552a:	b7 01       	movw	r22, r14
    552c:	0e 94 38 4f 	call	0x9e70	; 0x9e70 <__divsf3>
    5530:	0e 94 a0 4f 	call	0x9f40	; 0x9f40 <__fixsfsi>
    5534:	02 c0       	rjmp	.+4      	; 0x553a <getInputFromSpeed+0x124>
// mode => return a measured speed 0..1023
signed int getInputFromSpeed(signed int s, unsigned char mode) {
    
    int i = 0;
    signed int currVel = s*BYTE_TO_MM_S;
    signed int temp = 0;
    5536:	60 e0       	ldi	r22, 0x00	; 0
    5538:	70 e0       	ldi	r23, 0x00	; 0
            temp = -temp;
        }        
    }
    
    return temp;
}
    553a:	cb 01       	movw	r24, r22
    553c:	df 91       	pop	r29
    553e:	cf 91       	pop	r28
    5540:	1f 91       	pop	r17
    5542:	0f 91       	pop	r16
    5544:	ff 90       	pop	r15
    5546:	ef 90       	pop	r14
    5548:	df 90       	pop	r13
    554a:	cf 90       	pop	r12
    554c:	bf 90       	pop	r11
    554e:	af 90       	pop	r10
    5550:	08 95       	ret
    if(currVel == 0) {
        return 0;
    }

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
        currVel = -currVel; // consider only positive values
    5552:	30 95       	com	r19
    5554:	21 95       	neg	r18
    5556:	3f 4f       	sbci	r19, 0xFF	; 255
    5558:	63 30       	cpi	r22, 0x03	; 3
    555a:	09 f4       	brne	.+2      	; 0x555e <getInputFromSpeed+0x148>
    555c:	f3 c0       	rjmp	.+486    	; 0x5744 <getInputFromSpeed+0x32e>
    555e:	62 30       	cpi	r22, 0x02	; 2
    5560:	01 f1       	breq	.+64     	; 0x55a2 <getInputFromSpeed+0x18c>
    5562:	61 30       	cpi	r22, 0x01	; 1
    5564:	09 f4       	brne	.+2      	; 0x5568 <getInputFromSpeed+0x152>
    5566:	98 c0       	rjmp	.+304    	; 0x5698 <getInputFromSpeed+0x282>
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][6]/calibration[0][7];
            temp = -temp;
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
    5568:	66 23       	and	r22, r22
    556a:	09 f4       	brne	.+2      	; 0x556e <getInputFromSpeed+0x158>
    556c:	90 c0       	rjmp	.+288    	; 0x568e <getInputFromSpeed+0x278>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
    556e:	61 30       	cpi	r22, 0x01	; 1
    5570:	09 f4       	brne	.+2      	; 0x5574 <getInputFromSpeed+0x15e>
    5572:	8c c1       	rjmp	.+792    	; 0x588c <getInputFromSpeed+0x476>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
        } else if(mode==LEFT_WHEEL_BW_SC) {
    5574:	62 30       	cpi	r22, 0x02	; 2
    5576:	09 f4       	brne	.+2      	; 0x557a <getInputFromSpeed+0x164>
    5578:	a0 c1       	rjmp	.+832    	; 0x58ba <getInputFromSpeed+0x4a4>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][4]/(float)calibration[CALIBRATION_SAMPLES-1][5]);
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
    557a:	63 30       	cpi	r22, 0x03	; 3
    557c:	e1 f6       	brne	.-72     	; 0x5536 <getInputFromSpeed+0x120>
    557e:	c0 91 53 09 	lds	r28, 0x0953
    5582:	d0 91 54 09 	lds	r29, 0x0954
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][6]/(float)calibration[CALIBRATION_SAMPLES-1][7]);
    5586:	b9 01       	movw	r22, r18
    5588:	88 27       	eor	r24, r24
    558a:	77 fd       	sbrc	r23, 7
    558c:	80 95       	com	r24
    558e:	98 2f       	mov	r25, r24
    5590:	0e 94 d3 4f 	call	0x9fa6	; 0x9fa6 <__floatsisf>
    5594:	7b 01       	movw	r14, r22
    5596:	8c 01       	movw	r16, r24
    5598:	60 91 51 09 	lds	r22, 0x0951
    559c:	70 91 52 09 	lds	r23, 0x0952
    55a0:	55 c0       	rjmp	.+170    	; 0x564c <getInputFromSpeed+0x236>
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            if(calibration[i][3] >= currVel) {
                break;
            }
        } else if(mode==LEFT_WHEEL_BW_SC) {
            if(calibration[i][5] >= currVel) {
    55a2:	80 91 cf 08 	lds	r24, 0x08CF
    55a6:	90 91 d0 08 	lds	r25, 0x08D0
    55aa:	82 17       	cp	r24, r18
    55ac:	93 07       	cpc	r25, r19
    55ae:	0c f0       	brlt	.+2      	; 0x55b2 <getInputFromSpeed+0x19c>
    55b0:	72 c1       	rjmp	.+740    	; 0x5896 <getInputFromSpeed+0x480>
    55b2:	80 91 df 08 	lds	r24, 0x08DF
    55b6:	90 91 e0 08 	lds	r25, 0x08E0
    55ba:	82 17       	cp	r24, r18
    55bc:	93 07       	cpc	r25, r19
    55be:	0c f0       	brlt	.+2      	; 0x55c2 <getInputFromSpeed+0x1ac>
    55c0:	73 c1       	rjmp	.+742    	; 0x58a8 <getInputFromSpeed+0x492>
    55c2:	80 91 ef 08 	lds	r24, 0x08EF
    55c6:	90 91 f0 08 	lds	r25, 0x08F0
    55ca:	82 17       	cp	r24, r18
    55cc:	93 07       	cpc	r25, r19
    55ce:	0c f0       	brlt	.+2      	; 0x55d2 <getInputFromSpeed+0x1bc>
    55d0:	6e c1       	rjmp	.+732    	; 0x58ae <getInputFromSpeed+0x498>
    55d2:	80 91 ff 08 	lds	r24, 0x08FF
    55d6:	90 91 00 09 	lds	r25, 0x0900
    55da:	82 17       	cp	r24, r18
    55dc:	93 07       	cpc	r25, r19
    55de:	0c f0       	brlt	.+2      	; 0x55e2 <getInputFromSpeed+0x1cc>
    55e0:	69 c1       	rjmp	.+722    	; 0x58b4 <getInputFromSpeed+0x49e>
    55e2:	80 91 0f 09 	lds	r24, 0x090F
    55e6:	90 91 10 09 	lds	r25, 0x0910
    55ea:	82 17       	cp	r24, r18
    55ec:	93 07       	cpc	r25, r19
    55ee:	0c f0       	brlt	.+2      	; 0x55f2 <getInputFromSpeed+0x1dc>
    55f0:	55 c1       	rjmp	.+682    	; 0x589c <getInputFromSpeed+0x486>
    55f2:	80 91 1f 09 	lds	r24, 0x091F
    55f6:	90 91 20 09 	lds	r25, 0x0920
    55fa:	82 17       	cp	r24, r18
    55fc:	93 07       	cpc	r25, r19
    55fe:	0c f0       	brlt	.+2      	; 0x5602 <getInputFromSpeed+0x1ec>
    5600:	50 c1       	rjmp	.+672    	; 0x58a2 <getInputFromSpeed+0x48c>
    5602:	80 91 2f 09 	lds	r24, 0x092F
    5606:	90 91 30 09 	lds	r25, 0x0930
    560a:	82 17       	cp	r24, r18
    560c:	93 07       	cpc	r25, r19
    560e:	0c f0       	brlt	.+2      	; 0x5612 <getInputFromSpeed+0x1fc>
    5610:	59 c1       	rjmp	.+690    	; 0x58c4 <getInputFromSpeed+0x4ae>
    5612:	80 91 3f 09 	lds	r24, 0x093F
    5616:	90 91 40 09 	lds	r25, 0x0940
    561a:	82 17       	cp	r24, r18
    561c:	93 07       	cpc	r25, r19
    561e:	0c f0       	brlt	.+2      	; 0x5622 <getInputFromSpeed+0x20c>
    5620:	54 c1       	rjmp	.+680    	; 0x58ca <getInputFromSpeed+0x4b4>
    5622:	c0 91 4f 09 	lds	r28, 0x094F
    5626:	d0 91 50 09 	lds	r29, 0x0950
    562a:	c2 17       	cp	r28, r18
    562c:	d3 07       	cpc	r29, r19
    562e:	0c f0       	brlt	.+2      	; 0x5632 <getInputFromSpeed+0x21c>
    5630:	d1 c0       	rjmp	.+418    	; 0x57d4 <getInputFromSpeed+0x3be>
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][4]/(float)calibration[CALIBRATION_SAMPLES-1][5]);
    5632:	b9 01       	movw	r22, r18
    5634:	88 27       	eor	r24, r24
    5636:	77 fd       	sbrc	r23, 7
    5638:	80 95       	com	r24
    563a:	98 2f       	mov	r25, r24
    563c:	0e 94 d3 4f 	call	0x9fa6	; 0x9fa6 <__floatsisf>
    5640:	7b 01       	movw	r14, r22
    5642:	8c 01       	movw	r16, r24
    5644:	60 91 4d 09 	lds	r22, 0x094D
    5648:	70 91 4e 09 	lds	r23, 0x094E
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][6]/(float)calibration[CALIBRATION_SAMPLES-1][7]);
    564c:	88 27       	eor	r24, r24
    564e:	77 fd       	sbrc	r23, 7
    5650:	80 95       	com	r24
    5652:	98 2f       	mov	r25, r24
    5654:	0e 94 d3 4f 	call	0x9fa6	; 0x9fa6 <__floatsisf>
    5658:	9b 01       	movw	r18, r22
    565a:	ac 01       	movw	r20, r24
    565c:	c8 01       	movw	r24, r16
    565e:	b7 01       	movw	r22, r14
    5660:	0e 94 e8 50 	call	0xa1d0	; 0xa1d0 <__mulsf3>
    5664:	7b 01       	movw	r14, r22
    5666:	8c 01       	movw	r16, r24
    5668:	be 01       	movw	r22, r28
    566a:	88 27       	eor	r24, r24
    566c:	77 fd       	sbrc	r23, 7
    566e:	80 95       	com	r24
    5670:	98 2f       	mov	r25, r24
    5672:	0e 94 d3 4f 	call	0x9fa6	; 0x9fa6 <__floatsisf>
    5676:	9b 01       	movw	r18, r22
    5678:	ac 01       	movw	r20, r24
    567a:	c8 01       	movw	r24, r16
    567c:	b7 01       	movw	r22, r14
    567e:	0e 94 38 4f 	call	0x9e70	; 0x9e70 <__divsf3>
    5682:	0e 94 a0 4f 	call	0x9f40	; 0x9f40 <__fixsfsi>
            temp = -temp;
    5686:	70 95       	com	r23
    5688:	61 95       	neg	r22
    568a:	7f 4f       	sbci	r23, 0xFF	; 255
    568c:	56 cf       	rjmp	.-340    	; 0x553a <getInputFromSpeed+0x124>
    568e:	c0 91 47 09 	lds	r28, 0x0947
    5692:	d0 91 48 09 	lds	r29, 0x0948
    5696:	24 cf       	rjmp	.-440    	; 0x54e0 <getInputFromSpeed+0xca>
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
                break;
            }
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            if(calibration[i][3] >= currVel) {
    5698:	80 91 cb 08 	lds	r24, 0x08CB
    569c:	90 91 cc 08 	lds	r25, 0x08CC
    56a0:	82 17       	cp	r24, r18
    56a2:	93 07       	cpc	r25, r19
    56a4:	0c f0       	brlt	.+2      	; 0x56a8 <getInputFromSpeed+0x292>
    56a6:	f7 c0       	rjmp	.+494    	; 0x5896 <getInputFromSpeed+0x480>
    56a8:	80 91 db 08 	lds	r24, 0x08DB
    56ac:	90 91 dc 08 	lds	r25, 0x08DC
    56b0:	82 17       	cp	r24, r18
    56b2:	93 07       	cpc	r25, r19
    56b4:	0c f0       	brlt	.+2      	; 0x56b8 <getInputFromSpeed+0x2a2>
    56b6:	f8 c0       	rjmp	.+496    	; 0x58a8 <getInputFromSpeed+0x492>
    56b8:	80 91 eb 08 	lds	r24, 0x08EB
    56bc:	90 91 ec 08 	lds	r25, 0x08EC
    56c0:	82 17       	cp	r24, r18
    56c2:	93 07       	cpc	r25, r19
    56c4:	0c f0       	brlt	.+2      	; 0x56c8 <getInputFromSpeed+0x2b2>
    56c6:	f3 c0       	rjmp	.+486    	; 0x58ae <getInputFromSpeed+0x498>
    56c8:	80 91 fb 08 	lds	r24, 0x08FB
    56cc:	90 91 fc 08 	lds	r25, 0x08FC
    56d0:	82 17       	cp	r24, r18
    56d2:	93 07       	cpc	r25, r19
    56d4:	0c f0       	brlt	.+2      	; 0x56d8 <getInputFromSpeed+0x2c2>
    56d6:	ee c0       	rjmp	.+476    	; 0x58b4 <getInputFromSpeed+0x49e>
    56d8:	80 91 0b 09 	lds	r24, 0x090B
    56dc:	90 91 0c 09 	lds	r25, 0x090C
    56e0:	82 17       	cp	r24, r18
    56e2:	93 07       	cpc	r25, r19
    56e4:	0c f0       	brlt	.+2      	; 0x56e8 <getInputFromSpeed+0x2d2>
    56e6:	da c0       	rjmp	.+436    	; 0x589c <getInputFromSpeed+0x486>
    56e8:	80 91 1b 09 	lds	r24, 0x091B
    56ec:	90 91 1c 09 	lds	r25, 0x091C
    56f0:	82 17       	cp	r24, r18
    56f2:	93 07       	cpc	r25, r19
    56f4:	0c f0       	brlt	.+2      	; 0x56f8 <getInputFromSpeed+0x2e2>
    56f6:	d5 c0       	rjmp	.+426    	; 0x58a2 <getInputFromSpeed+0x48c>
    56f8:	80 91 2b 09 	lds	r24, 0x092B
    56fc:	90 91 2c 09 	lds	r25, 0x092C
    5700:	82 17       	cp	r24, r18
    5702:	93 07       	cpc	r25, r19
    5704:	0c f0       	brlt	.+2      	; 0x5708 <getInputFromSpeed+0x2f2>
    5706:	de c0       	rjmp	.+444    	; 0x58c4 <getInputFromSpeed+0x4ae>
    5708:	80 91 3b 09 	lds	r24, 0x093B
    570c:	90 91 3c 09 	lds	r25, 0x093C
    5710:	82 17       	cp	r24, r18
    5712:	93 07       	cpc	r25, r19
    5714:	0c f0       	brlt	.+2      	; 0x5718 <getInputFromSpeed+0x302>
    5716:	d9 c0       	rjmp	.+434    	; 0x58ca <getInputFromSpeed+0x4b4>
    5718:	c0 91 4b 09 	lds	r28, 0x094B
    571c:	d0 91 4c 09 	lds	r29, 0x094C
    5720:	c2 17       	cp	r28, r18
    5722:	d3 07       	cpc	r29, r19
    5724:	0c f0       	brlt	.+2      	; 0x5728 <getInputFromSpeed+0x312>
    5726:	56 c0       	rjmp	.+172    	; 0x57d4 <getInputFromSpeed+0x3be>
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
    5728:	b9 01       	movw	r22, r18
    572a:	88 27       	eor	r24, r24
    572c:	77 fd       	sbrc	r23, 7
    572e:	80 95       	com	r24
    5730:	98 2f       	mov	r25, r24
    5732:	0e 94 d3 4f 	call	0x9fa6	; 0x9fa6 <__floatsisf>
    5736:	7b 01       	movw	r14, r22
    5738:	8c 01       	movw	r16, r24
    573a:	60 91 49 09 	lds	r22, 0x0949
    573e:	70 91 4a 09 	lds	r23, 0x094A
    5742:	db ce       	rjmp	.-586    	; 0x54fa <getInputFromSpeed+0xe4>
        } else if(mode==LEFT_WHEEL_BW_SC) {
            if(calibration[i][5] >= currVel) {
                break;
            }
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            if(calibration[i][7] >= currVel) {
    5744:	80 91 d3 08 	lds	r24, 0x08D3
    5748:	90 91 d4 08 	lds	r25, 0x08D4
    574c:	82 17       	cp	r24, r18
    574e:	93 07       	cpc	r25, r19
    5750:	0c f0       	brlt	.+2      	; 0x5754 <getInputFromSpeed+0x33e>
    5752:	a1 c0       	rjmp	.+322    	; 0x5896 <getInputFromSpeed+0x480>
    5754:	80 91 e3 08 	lds	r24, 0x08E3
    5758:	90 91 e4 08 	lds	r25, 0x08E4
    575c:	82 17       	cp	r24, r18
    575e:	93 07       	cpc	r25, r19
    5760:	0c f0       	brlt	.+2      	; 0x5764 <getInputFromSpeed+0x34e>
    5762:	a2 c0       	rjmp	.+324    	; 0x58a8 <getInputFromSpeed+0x492>
    5764:	80 91 f3 08 	lds	r24, 0x08F3
    5768:	90 91 f4 08 	lds	r25, 0x08F4
    576c:	82 17       	cp	r24, r18
    576e:	93 07       	cpc	r25, r19
    5770:	0c f0       	brlt	.+2      	; 0x5774 <getInputFromSpeed+0x35e>
    5772:	9d c0       	rjmp	.+314    	; 0x58ae <getInputFromSpeed+0x498>
    5774:	80 91 03 09 	lds	r24, 0x0903
    5778:	90 91 04 09 	lds	r25, 0x0904
    577c:	82 17       	cp	r24, r18
    577e:	93 07       	cpc	r25, r19
    5780:	0c f0       	brlt	.+2      	; 0x5784 <getInputFromSpeed+0x36e>
    5782:	98 c0       	rjmp	.+304    	; 0x58b4 <getInputFromSpeed+0x49e>
    5784:	80 91 13 09 	lds	r24, 0x0913
    5788:	90 91 14 09 	lds	r25, 0x0914
    578c:	82 17       	cp	r24, r18
    578e:	93 07       	cpc	r25, r19
    5790:	0c f0       	brlt	.+2      	; 0x5794 <getInputFromSpeed+0x37e>
    5792:	84 c0       	rjmp	.+264    	; 0x589c <getInputFromSpeed+0x486>
    5794:	80 91 23 09 	lds	r24, 0x0923
    5798:	90 91 24 09 	lds	r25, 0x0924
    579c:	82 17       	cp	r24, r18
    579e:	93 07       	cpc	r25, r19
    57a0:	0c f0       	brlt	.+2      	; 0x57a4 <getInputFromSpeed+0x38e>
    57a2:	7f c0       	rjmp	.+254    	; 0x58a2 <getInputFromSpeed+0x48c>
    57a4:	80 91 33 09 	lds	r24, 0x0933
    57a8:	90 91 34 09 	lds	r25, 0x0934
    57ac:	82 17       	cp	r24, r18
    57ae:	93 07       	cpc	r25, r19
    57b0:	0c f0       	brlt	.+2      	; 0x57b4 <getInputFromSpeed+0x39e>
    57b2:	88 c0       	rjmp	.+272    	; 0x58c4 <getInputFromSpeed+0x4ae>
    57b4:	80 91 43 09 	lds	r24, 0x0943
    57b8:	90 91 44 09 	lds	r25, 0x0944
    57bc:	82 17       	cp	r24, r18
    57be:	93 07       	cpc	r25, r19
    57c0:	0c f0       	brlt	.+2      	; 0x57c4 <getInputFromSpeed+0x3ae>
    57c2:	83 c0       	rjmp	.+262    	; 0x58ca <getInputFromSpeed+0x4b4>
    57c4:	c0 91 53 09 	lds	r28, 0x0953
    57c8:	d0 91 54 09 	lds	r29, 0x0954
    57cc:	c2 17       	cp	r28, r18
    57ce:	d3 07       	cpc	r29, r19
    57d0:	0c f4       	brge	.+2      	; 0x57d4 <getInputFromSpeed+0x3be>
    57d2:	d9 ce       	rjmp	.-590    	; 0x5586 <getInputFromSpeed+0x170>
        currVel = -currVel; // consider only positive values
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
    57d4:	c8 e0       	ldi	r28, 0x08	; 8
    57d6:	d0 e0       	ldi	r29, 0x00	; 0
                break;
            }
        } 
    }

    if(i==0) {  // the velocity is lower than first saved in the matrix
    57d8:	20 97       	sbiw	r28, 0x00	; 0
    57da:	09 f0       	breq	.+2      	; 0x57de <getInputFromSpeed+0x3c8>
    57dc:	79 c0       	rjmp	.+242    	; 0x58d0 <getInputFromSpeed+0x4ba>
        if(mode==LEFT_WHEEL_FW_SC) {
    57de:	66 23       	and	r22, r22
    57e0:	91 f4       	brne	.+36     	; 0x5806 <getInputFromSpeed+0x3f0>
            temp = (currVel*calibration[0][0])/calibration[0][1];
    57e2:	40 91 c5 08 	lds	r20, 0x08C5
    57e6:	50 91 c6 08 	lds	r21, 0x08C6
    57ea:	24 9f       	mul	r18, r20
    57ec:	c0 01       	movw	r24, r0
    57ee:	25 9f       	mul	r18, r21
    57f0:	90 0d       	add	r25, r0
    57f2:	34 9f       	mul	r19, r20
    57f4:	90 0d       	add	r25, r0
    57f6:	11 24       	eor	r1, r1
    57f8:	60 91 c7 08 	lds	r22, 0x08C7
    57fc:	70 91 c8 08 	lds	r23, 0x08C8
    5800:	0e 94 a6 51 	call	0xa34c	; 0xa34c <__divmodhi4>
    5804:	9a ce       	rjmp	.-716    	; 0x553a <getInputFromSpeed+0x124>
        } else if(mode==RIGHT_WHEEL_FW_SC) {
    5806:	61 30       	cpi	r22, 0x01	; 1
    5808:	d1 f0       	breq	.+52     	; 0x583e <getInputFromSpeed+0x428>
            temp = (currVel*calibration[0][2])/calibration[0][3];
        } else if(mode==LEFT_WHEEL_BW_SC) {
    580a:	62 30       	cpi	r22, 0x02	; 2
    580c:	51 f1       	breq	.+84     	; 0x5862 <getInputFromSpeed+0x44c>
            temp = currVel*calibration[0][4]/calibration[0][5];
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
    580e:	63 30       	cpi	r22, 0x03	; 3
    5810:	09 f0       	breq	.+2      	; 0x5814 <getInputFromSpeed+0x3fe>
    5812:	91 ce       	rjmp	.-734    	; 0x5536 <getInputFromSpeed+0x120>
            temp = currVel*calibration[0][6]/calibration[0][7];
    5814:	40 91 d1 08 	lds	r20, 0x08D1
    5818:	50 91 d2 08 	lds	r21, 0x08D2
    581c:	24 9f       	mul	r18, r20
    581e:	c0 01       	movw	r24, r0
    5820:	25 9f       	mul	r18, r21
    5822:	90 0d       	add	r25, r0
    5824:	34 9f       	mul	r19, r20
    5826:	90 0d       	add	r25, r0
    5828:	11 24       	eor	r1, r1
    582a:	60 91 d3 08 	lds	r22, 0x08D3
    582e:	70 91 d4 08 	lds	r23, 0x08D4
    5832:	0e 94 a6 51 	call	0xa34c	; 0xa34c <__divmodhi4>
            temp = -temp;
    5836:	70 95       	com	r23
    5838:	61 95       	neg	r22
    583a:	7f 4f       	sbci	r23, 0xFF	; 255
    583c:	7e ce       	rjmp	.-772    	; 0x553a <getInputFromSpeed+0x124>

    if(i==0) {  // the velocity is lower than first saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][0])/calibration[0][1];
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][2])/calibration[0][3];
    583e:	40 91 c9 08 	lds	r20, 0x08C9
    5842:	50 91 ca 08 	lds	r21, 0x08CA
    5846:	24 9f       	mul	r18, r20
    5848:	c0 01       	movw	r24, r0
    584a:	25 9f       	mul	r18, r21
    584c:	90 0d       	add	r25, r0
    584e:	34 9f       	mul	r19, r20
    5850:	90 0d       	add	r25, r0
    5852:	11 24       	eor	r1, r1
    5854:	60 91 cb 08 	lds	r22, 0x08CB
    5858:	70 91 cc 08 	lds	r23, 0x08CC
    585c:	0e 94 a6 51 	call	0xa34c	; 0xa34c <__divmodhi4>
    5860:	6c ce       	rjmp	.-808    	; 0x553a <getInputFromSpeed+0x124>
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][4]/calibration[0][5];
    5862:	40 91 cd 08 	lds	r20, 0x08CD
    5866:	50 91 ce 08 	lds	r21, 0x08CE
    586a:	24 9f       	mul	r18, r20
    586c:	c0 01       	movw	r24, r0
    586e:	25 9f       	mul	r18, r21
    5870:	90 0d       	add	r25, r0
    5872:	34 9f       	mul	r19, r20
    5874:	90 0d       	add	r25, r0
    5876:	11 24       	eor	r1, r1
    5878:	60 91 cf 08 	lds	r22, 0x08CF
    587c:	70 91 d0 08 	lds	r23, 0x08D0
    5880:	0e 94 a6 51 	call	0xa34c	; 0xa34c <__divmodhi4>
            temp = -temp;
    5884:	70 95       	com	r23
    5886:	61 95       	neg	r22
    5888:	7f 4f       	sbci	r23, 0xFF	; 255
    588a:	57 ce       	rjmp	.-850    	; 0x553a <getInputFromSpeed+0x124>
    588c:	c0 91 4b 09 	lds	r28, 0x094B
    5890:	d0 91 4c 09 	lds	r29, 0x094C
    5894:	49 cf       	rjmp	.-366    	; 0x5728 <getInputFromSpeed+0x312>

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
        currVel = -currVel; // consider only positive values
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    5896:	c0 e0       	ldi	r28, 0x00	; 0
    5898:	d0 e0       	ldi	r29, 0x00	; 0
    589a:	9e cf       	rjmp	.-196    	; 0x57d8 <getInputFromSpeed+0x3c2>
    589c:	c4 e0       	ldi	r28, 0x04	; 4
    589e:	d0 e0       	ldi	r29, 0x00	; 0
    58a0:	9b cf       	rjmp	.-202    	; 0x57d8 <getInputFromSpeed+0x3c2>
    58a2:	c5 e0       	ldi	r28, 0x05	; 5
    58a4:	d0 e0       	ldi	r29, 0x00	; 0
    58a6:	98 cf       	rjmp	.-208    	; 0x57d8 <getInputFromSpeed+0x3c2>
    58a8:	c1 e0       	ldi	r28, 0x01	; 1
    58aa:	d0 e0       	ldi	r29, 0x00	; 0
    58ac:	95 cf       	rjmp	.-214    	; 0x57d8 <getInputFromSpeed+0x3c2>
    58ae:	c2 e0       	ldi	r28, 0x02	; 2
    58b0:	d0 e0       	ldi	r29, 0x00	; 0
    58b2:	92 cf       	rjmp	.-220    	; 0x57d8 <getInputFromSpeed+0x3c2>
    58b4:	c3 e0       	ldi	r28, 0x03	; 3
    58b6:	d0 e0       	ldi	r29, 0x00	; 0
    58b8:	8f cf       	rjmp	.-226    	; 0x57d8 <getInputFromSpeed+0x3c2>
    58ba:	c0 91 4f 09 	lds	r28, 0x094F
    58be:	d0 91 50 09 	lds	r29, 0x0950
    58c2:	b7 ce       	rjmp	.-658    	; 0x5632 <getInputFromSpeed+0x21c>
    58c4:	c6 e0       	ldi	r28, 0x06	; 6
    58c6:	d0 e0       	ldi	r29, 0x00	; 0
    58c8:	87 cf       	rjmp	.-242    	; 0x57d8 <getInputFromSpeed+0x3c2>
    58ca:	c7 e0       	ldi	r28, 0x07	; 7
    58cc:	d0 e0       	ldi	r29, 0x00	; 0
    58ce:	84 cf       	rjmp	.-248    	; 0x57d8 <getInputFromSpeed+0x3c2>
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][6]/calibration[0][7];
            temp = -temp;
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    58d0:	c9 30       	cpi	r28, 0x09	; 9
    58d2:	d1 05       	cpc	r29, r1
    58d4:	09 f4       	brne	.+2      	; 0x58d8 <getInputFromSpeed+0x4c2>
    58d6:	48 ce       	rjmp	.-880    	; 0x5568 <getInputFromSpeed+0x152>
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][6]/(float)calibration[CALIBRATION_SAMPLES-1][7]);
            temp = -temp;
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
    58d8:	66 23       	and	r22, r22
    58da:	09 f0       	breq	.+2      	; 0x58de <getInputFromSpeed+0x4c8>
    58dc:	47 c0       	rjmp	.+142    	; 0x596c <getInputFromSpeed+0x556>
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
    58de:	fe 01       	movw	r30, r28
    58e0:	e2 95       	swap	r30
    58e2:	f2 95       	swap	r31
    58e4:	f0 7f       	andi	r31, 0xF0	; 240
    58e6:	fe 27       	eor	r31, r30
    58e8:	e0 7f       	andi	r30, 0xF0	; 240
    58ea:	fe 27       	eor	r31, r30
    58ec:	eb 54       	subi	r30, 0x4B	; 75
    58ee:	f7 4f       	sbci	r31, 0xF7	; 247
    58f0:	c2 80       	ldd	r12, Z+2	; 0x02
    58f2:	d3 80       	ldd	r13, Z+3	; 0x03
    58f4:	a0 80       	ld	r10, Z
    58f6:	b1 80       	ldd	r11, Z+1	; 0x01
    58f8:	2c 19       	sub	r18, r12
    58fa:	3d 09       	sbc	r19, r13
    58fc:	b9 01       	movw	r22, r18
    58fe:	88 27       	eor	r24, r24
    5900:	77 fd       	sbrc	r23, 7
    5902:	80 95       	com	r24
    5904:	98 2f       	mov	r25, r24
    5906:	0e 94 d3 4f 	call	0x9fa6	; 0x9fa6 <__floatsisf>
    590a:	7b 01       	movw	r14, r22
    590c:	8c 01       	movw	r16, r24
    590e:	c2 95       	swap	r28
    5910:	d2 95       	swap	r29
    5912:	d0 7f       	andi	r29, 0xF0	; 240
    5914:	dc 27       	eor	r29, r28
    5916:	c0 7f       	andi	r28, 0xF0	; 240
    5918:	dc 27       	eor	r29, r28
    591a:	cb 53       	subi	r28, 0x3B	; 59
    591c:	d7 4f       	sbci	r29, 0xF7	; 247
    591e:	68 81       	ld	r22, Y
    5920:	79 81       	ldd	r23, Y+1	; 0x01
    5922:	6a 19       	sub	r22, r10
    5924:	7b 09       	sbc	r23, r11
    5926:	88 27       	eor	r24, r24
    5928:	77 fd       	sbrc	r23, 7
    592a:	80 95       	com	r24
    592c:	98 2f       	mov	r25, r24
    592e:	0e 94 d3 4f 	call	0x9fa6	; 0x9fa6 <__floatsisf>
    5932:	9b 01       	movw	r18, r22
    5934:	ac 01       	movw	r20, r24
    5936:	c8 01       	movw	r24, r16
    5938:	b7 01       	movw	r22, r14
    593a:	0e 94 e8 50 	call	0xa1d0	; 0xa1d0 <__mulsf3>
    593e:	7b 01       	movw	r14, r22
    5940:	8c 01       	movw	r16, r24
    5942:	6a 81       	ldd	r22, Y+2	; 0x02
    5944:	7b 81       	ldd	r23, Y+3	; 0x03
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
    5946:	6c 19       	sub	r22, r12
    5948:	7d 09       	sbc	r23, r13
    594a:	88 27       	eor	r24, r24
    594c:	77 fd       	sbrc	r23, 7
    594e:	80 95       	com	r24
    5950:	98 2f       	mov	r25, r24
    5952:	0e 94 d3 4f 	call	0x9fa6	; 0x9fa6 <__floatsisf>
    5956:	9b 01       	movw	r18, r22
    5958:	ac 01       	movw	r20, r24
    595a:	c8 01       	movw	r24, r16
    595c:	b7 01       	movw	r22, r14
    595e:	0e 94 38 4f 	call	0x9e70	; 0x9e70 <__divsf3>
    5962:	0e 94 a0 4f 	call	0x9f40	; 0x9f40 <__fixsfsi>
    5966:	6a 0d       	add	r22, r10
    5968:	7b 1d       	adc	r23, r11
    596a:	e7 cd       	rjmp	.-1074   	; 0x553a <getInputFromSpeed+0x124>
            temp = -temp;
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
        } else if(mode==RIGHT_WHEEL_FW_SC) {
    596c:	61 30       	cpi	r22, 0x01	; 1
    596e:	09 f4       	brne	.+2      	; 0x5972 <getInputFromSpeed+0x55c>
    5970:	50 c0       	rjmp	.+160    	; 0x5a12 <getInputFromSpeed+0x5fc>
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
        } else if(mode==LEFT_WHEEL_BW_SC) {
    5972:	62 30       	cpi	r22, 0x02	; 2
    5974:	09 f4       	brne	.+2      	; 0x5978 <getInputFromSpeed+0x562>
    5976:	82 c0       	rjmp	.+260    	; 0x5a7c <getInputFromSpeed+0x666>
            temp = calibration[i-1][4] + (signed int)(((float)(currVel-calibration[i-1][5])*(float)(calibration[i][4]-calibration[i-1][4]))/(float)(calibration[i][5]-calibration[i-1][5]));
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
    5978:	63 30       	cpi	r22, 0x03	; 3
    597a:	09 f0       	breq	.+2      	; 0x597e <getInputFromSpeed+0x568>
    597c:	dc cd       	rjmp	.-1096   	; 0x5536 <getInputFromSpeed+0x120>
            temp = calibration[i-1][6] + (signed int)(((float)(currVel-calibration[i-1][7])*(float)(calibration[i][6]-calibration[i-1][6]))/(float)(calibration[i][7]-calibration[i-1][7]));
    597e:	fe 01       	movw	r30, r28
    5980:	e2 95       	swap	r30
    5982:	f2 95       	swap	r31
    5984:	f0 7f       	andi	r31, 0xF0	; 240
    5986:	fe 27       	eor	r31, r30
    5988:	e0 7f       	andi	r30, 0xF0	; 240
    598a:	fe 27       	eor	r31, r30
    598c:	eb 54       	subi	r30, 0x4B	; 75
    598e:	f7 4f       	sbci	r31, 0xF7	; 247
    5990:	c6 84       	ldd	r12, Z+14	; 0x0e
    5992:	d7 84       	ldd	r13, Z+15	; 0x0f
    5994:	a4 84       	ldd	r10, Z+12	; 0x0c
    5996:	b5 84       	ldd	r11, Z+13	; 0x0d
    5998:	2c 19       	sub	r18, r12
    599a:	3d 09       	sbc	r19, r13
    599c:	b9 01       	movw	r22, r18
    599e:	88 27       	eor	r24, r24
    59a0:	77 fd       	sbrc	r23, 7
    59a2:	80 95       	com	r24
    59a4:	98 2f       	mov	r25, r24
    59a6:	0e 94 d3 4f 	call	0x9fa6	; 0x9fa6 <__floatsisf>
    59aa:	7b 01       	movw	r14, r22
    59ac:	8c 01       	movw	r16, r24
    59ae:	c2 95       	swap	r28
    59b0:	d2 95       	swap	r29
    59b2:	d0 7f       	andi	r29, 0xF0	; 240
    59b4:	dc 27       	eor	r29, r28
    59b6:	c0 7f       	andi	r28, 0xF0	; 240
    59b8:	dc 27       	eor	r29, r28
    59ba:	cb 53       	subi	r28, 0x3B	; 59
    59bc:	d7 4f       	sbci	r29, 0xF7	; 247
    59be:	6c 85       	ldd	r22, Y+12	; 0x0c
    59c0:	7d 85       	ldd	r23, Y+13	; 0x0d
    59c2:	6a 19       	sub	r22, r10
    59c4:	7b 09       	sbc	r23, r11
    59c6:	88 27       	eor	r24, r24
    59c8:	77 fd       	sbrc	r23, 7
    59ca:	80 95       	com	r24
    59cc:	98 2f       	mov	r25, r24
    59ce:	0e 94 d3 4f 	call	0x9fa6	; 0x9fa6 <__floatsisf>
    59d2:	9b 01       	movw	r18, r22
    59d4:	ac 01       	movw	r20, r24
    59d6:	c8 01       	movw	r24, r16
    59d8:	b7 01       	movw	r22, r14
    59da:	0e 94 e8 50 	call	0xa1d0	; 0xa1d0 <__mulsf3>
    59de:	7b 01       	movw	r14, r22
    59e0:	8c 01       	movw	r16, r24
    59e2:	6e 85       	ldd	r22, Y+14	; 0x0e
    59e4:	7f 85       	ldd	r23, Y+15	; 0x0f
    59e6:	6c 19       	sub	r22, r12
    59e8:	7d 09       	sbc	r23, r13
    59ea:	88 27       	eor	r24, r24
    59ec:	77 fd       	sbrc	r23, 7
    59ee:	80 95       	com	r24
    59f0:	98 2f       	mov	r25, r24
    59f2:	0e 94 d3 4f 	call	0x9fa6	; 0x9fa6 <__floatsisf>
    59f6:	9b 01       	movw	r18, r22
    59f8:	ac 01       	movw	r20, r24
    59fa:	c8 01       	movw	r24, r16
    59fc:	b7 01       	movw	r22, r14
    59fe:	0e 94 38 4f 	call	0x9e70	; 0x9e70 <__divsf3>
    5a02:	0e 94 a0 4f 	call	0x9f40	; 0x9f40 <__fixsfsi>
    5a06:	6a 0d       	add	r22, r10
    5a08:	7b 1d       	adc	r23, r11
            temp = -temp;
    5a0a:	70 95       	com	r23
    5a0c:	61 95       	neg	r22
    5a0e:	7f 4f       	sbci	r23, 0xFF	; 255
    5a10:	94 cd       	rjmp	.-1240   	; 0x553a <getInputFromSpeed+0x124>
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
    5a12:	fe 01       	movw	r30, r28
    5a14:	e2 95       	swap	r30
    5a16:	f2 95       	swap	r31
    5a18:	f0 7f       	andi	r31, 0xF0	; 240
    5a1a:	fe 27       	eor	r31, r30
    5a1c:	e0 7f       	andi	r30, 0xF0	; 240
    5a1e:	fe 27       	eor	r31, r30
    5a20:	eb 54       	subi	r30, 0x4B	; 75
    5a22:	f7 4f       	sbci	r31, 0xF7	; 247
    5a24:	c6 80       	ldd	r12, Z+6	; 0x06
    5a26:	d7 80       	ldd	r13, Z+7	; 0x07
    5a28:	a4 80       	ldd	r10, Z+4	; 0x04
    5a2a:	b5 80       	ldd	r11, Z+5	; 0x05
    5a2c:	2c 19       	sub	r18, r12
    5a2e:	3d 09       	sbc	r19, r13
    5a30:	b9 01       	movw	r22, r18
    5a32:	88 27       	eor	r24, r24
    5a34:	77 fd       	sbrc	r23, 7
    5a36:	80 95       	com	r24
    5a38:	98 2f       	mov	r25, r24
    5a3a:	0e 94 d3 4f 	call	0x9fa6	; 0x9fa6 <__floatsisf>
    5a3e:	7b 01       	movw	r14, r22
    5a40:	8c 01       	movw	r16, r24
    5a42:	c2 95       	swap	r28
    5a44:	d2 95       	swap	r29
    5a46:	d0 7f       	andi	r29, 0xF0	; 240
    5a48:	dc 27       	eor	r29, r28
    5a4a:	c0 7f       	andi	r28, 0xF0	; 240
    5a4c:	dc 27       	eor	r29, r28
    5a4e:	cb 53       	subi	r28, 0x3B	; 59
    5a50:	d7 4f       	sbci	r29, 0xF7	; 247
    5a52:	6c 81       	ldd	r22, Y+4	; 0x04
    5a54:	7d 81       	ldd	r23, Y+5	; 0x05
    5a56:	6a 19       	sub	r22, r10
    5a58:	7b 09       	sbc	r23, r11
    5a5a:	88 27       	eor	r24, r24
    5a5c:	77 fd       	sbrc	r23, 7
    5a5e:	80 95       	com	r24
    5a60:	98 2f       	mov	r25, r24
    5a62:	0e 94 d3 4f 	call	0x9fa6	; 0x9fa6 <__floatsisf>
    5a66:	9b 01       	movw	r18, r22
    5a68:	ac 01       	movw	r20, r24
    5a6a:	c8 01       	movw	r24, r16
    5a6c:	b7 01       	movw	r22, r14
    5a6e:	0e 94 e8 50 	call	0xa1d0	; 0xa1d0 <__mulsf3>
    5a72:	7b 01       	movw	r14, r22
    5a74:	8c 01       	movw	r16, r24
    5a76:	6e 81       	ldd	r22, Y+6	; 0x06
    5a78:	7f 81       	ldd	r23, Y+7	; 0x07
    5a7a:	65 cf       	rjmp	.-310    	; 0x5946 <getInputFromSpeed+0x530>
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = calibration[i-1][4] + (signed int)(((float)(currVel-calibration[i-1][5])*(float)(calibration[i][4]-calibration[i-1][4]))/(float)(calibration[i][5]-calibration[i-1][5]));
    5a7c:	fe 01       	movw	r30, r28
    5a7e:	e2 95       	swap	r30
    5a80:	f2 95       	swap	r31
    5a82:	f0 7f       	andi	r31, 0xF0	; 240
    5a84:	fe 27       	eor	r31, r30
    5a86:	e0 7f       	andi	r30, 0xF0	; 240
    5a88:	fe 27       	eor	r31, r30
    5a8a:	eb 54       	subi	r30, 0x4B	; 75
    5a8c:	f7 4f       	sbci	r31, 0xF7	; 247
    5a8e:	c2 84       	ldd	r12, Z+10	; 0x0a
    5a90:	d3 84       	ldd	r13, Z+11	; 0x0b
    5a92:	a0 84       	ldd	r10, Z+8	; 0x08
    5a94:	b1 84       	ldd	r11, Z+9	; 0x09
    5a96:	2c 19       	sub	r18, r12
    5a98:	3d 09       	sbc	r19, r13
    5a9a:	b9 01       	movw	r22, r18
    5a9c:	88 27       	eor	r24, r24
    5a9e:	77 fd       	sbrc	r23, 7
    5aa0:	80 95       	com	r24
    5aa2:	98 2f       	mov	r25, r24
    5aa4:	0e 94 d3 4f 	call	0x9fa6	; 0x9fa6 <__floatsisf>
    5aa8:	7b 01       	movw	r14, r22
    5aaa:	8c 01       	movw	r16, r24
    5aac:	c2 95       	swap	r28
    5aae:	d2 95       	swap	r29
    5ab0:	d0 7f       	andi	r29, 0xF0	; 240
    5ab2:	dc 27       	eor	r29, r28
    5ab4:	c0 7f       	andi	r28, 0xF0	; 240
    5ab6:	dc 27       	eor	r29, r28
    5ab8:	cb 53       	subi	r28, 0x3B	; 59
    5aba:	d7 4f       	sbci	r29, 0xF7	; 247
    5abc:	68 85       	ldd	r22, Y+8	; 0x08
    5abe:	79 85       	ldd	r23, Y+9	; 0x09
    5ac0:	6a 19       	sub	r22, r10
    5ac2:	7b 09       	sbc	r23, r11
    5ac4:	88 27       	eor	r24, r24
    5ac6:	77 fd       	sbrc	r23, 7
    5ac8:	80 95       	com	r24
    5aca:	98 2f       	mov	r25, r24
    5acc:	0e 94 d3 4f 	call	0x9fa6	; 0x9fa6 <__floatsisf>
    5ad0:	9b 01       	movw	r18, r22
    5ad2:	ac 01       	movw	r20, r24
    5ad4:	c8 01       	movw	r24, r16
    5ad6:	b7 01       	movw	r22, r14
    5ad8:	0e 94 e8 50 	call	0xa1d0	; 0xa1d0 <__mulsf3>
    5adc:	7b 01       	movw	r14, r22
    5ade:	8c 01       	movw	r16, r24
    5ae0:	6a 85       	ldd	r22, Y+10	; 0x0a
    5ae2:	7b 85       	ldd	r23, Y+11	; 0x0b
    5ae4:	80 cf       	rjmp	.-256    	; 0x59e6 <getInputFromSpeed+0x5d0>

00005ae6 <getRightSpeedFromInput>:
    
    return temp;
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {
    5ae6:	8f 92       	push	r8
    5ae8:	9f 92       	push	r9
    5aea:	af 92       	push	r10
    5aec:	bf 92       	push	r11
    5aee:	cf 92       	push	r12
    5af0:	df 92       	push	r13
    5af2:	ef 92       	push	r14
    5af4:	ff 92       	push	r15
    5af6:	0f 93       	push	r16
    5af8:	1f 93       	push	r17
    5afa:	cf 93       	push	r28
    5afc:	df 93       	push	r29

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    5afe:	c0 91 f3 02 	lds	r28, 0x02F3
    5b02:	d0 91 f4 02 	lds	r29, 0x02F4
    5b06:	80 91 f5 02 	lds	r24, 0x02F5
    5b0a:	90 91 f6 02 	lds	r25, 0x02F6
    5b0e:	97 fd       	sbrc	r25, 7
    5b10:	d9 c0       	rjmp	.+434    	; 0x5cc4 <getRightSpeedFromInput+0x1de>
    5b12:	60 91 c9 08 	lds	r22, 0x08C9
    5b16:	70 91 ca 08 	lds	r23, 0x08CA
    5b1a:	6c 17       	cp	r22, r28
    5b1c:	7d 07       	cpc	r23, r29
    5b1e:	0c f0       	brlt	.+2      	; 0x5b22 <getRightSpeedFromInput+0x3c>
    5b20:	bd c0       	rjmp	.+378    	; 0x5c9c <getRightSpeedFromInput+0x1b6>
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    5b22:	0f ef       	ldi	r16, 0xFF	; 255
    5b24:	1f ef       	ldi	r17, 0xFF	; 255
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    5b26:	80 91 d9 08 	lds	r24, 0x08D9
    5b2a:	90 91 da 08 	lds	r25, 0x08DA
    5b2e:	8c 17       	cp	r24, r28
    5b30:	9d 07       	cpc	r25, r29
    5b32:	44 f0       	brlt	.+16     	; 0x5b44 <getRightSpeedFromInput+0x5e>
    
    return temp;
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {
    5b34:	81 e0       	ldi	r24, 0x01	; 1
    5b36:	9f ef       	ldi	r25, 0xFF	; 255
    5b38:	0f 3f       	cpi	r16, 0xFF	; 255
    5b3a:	19 07       	cpc	r17, r25
    5b3c:	09 f0       	breq	.+2      	; 0x5b40 <getRightSpeedFromInput+0x5a>
    5b3e:	80 e0       	ldi	r24, 0x00	; 0
    5b40:	08 2f       	mov	r16, r24
    5b42:	10 e0       	ldi	r17, 0x00	; 0

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    5b44:	80 91 e9 08 	lds	r24, 0x08E9
    5b48:	90 91 ea 08 	lds	r25, 0x08EA
    5b4c:	8c 17       	cp	r24, r28
    5b4e:	9d 07       	cpc	r25, r29
    5b50:	2c f0       	brlt	.+10     	; 0x5b5c <getRightSpeedFromInput+0x76>
    5b52:	8f ef       	ldi	r24, 0xFF	; 255
    5b54:	0f 3f       	cpi	r16, 0xFF	; 255
    5b56:	18 07       	cpc	r17, r24
    5b58:	09 f4       	brne	.+2      	; 0x5b5c <getRightSpeedFromInput+0x76>
    5b5a:	6c c1       	rjmp	.+728    	; 0x5e34 <getRightSpeedFromInput+0x34e>
    5b5c:	80 91 f9 08 	lds	r24, 0x08F9
    5b60:	90 91 fa 08 	lds	r25, 0x08FA
    5b64:	8c 17       	cp	r24, r28
    5b66:	9d 07       	cpc	r25, r29
    5b68:	2c f0       	brlt	.+10     	; 0x5b74 <getRightSpeedFromInput+0x8e>
    5b6a:	9f ef       	ldi	r25, 0xFF	; 255
    5b6c:	0f 3f       	cpi	r16, 0xFF	; 255
    5b6e:	19 07       	cpc	r17, r25
    5b70:	09 f4       	brne	.+2      	; 0x5b74 <getRightSpeedFromInput+0x8e>
    5b72:	72 c1       	rjmp	.+740    	; 0x5e58 <getRightSpeedFromInput+0x372>
    5b74:	80 91 09 09 	lds	r24, 0x0909
    5b78:	90 91 0a 09 	lds	r25, 0x090A
    5b7c:	8c 17       	cp	r24, r28
    5b7e:	9d 07       	cpc	r25, r29
    5b80:	2c f0       	brlt	.+10     	; 0x5b8c <getRightSpeedFromInput+0xa6>
    5b82:	8f ef       	ldi	r24, 0xFF	; 255
    5b84:	0f 3f       	cpi	r16, 0xFF	; 255
    5b86:	18 07       	cpc	r17, r24
    5b88:	09 f4       	brne	.+2      	; 0x5b8c <getRightSpeedFromInput+0xa6>
    5b8a:	63 c1       	rjmp	.+710    	; 0x5e52 <getRightSpeedFromInput+0x36c>
    5b8c:	80 91 19 09 	lds	r24, 0x0919
    5b90:	90 91 1a 09 	lds	r25, 0x091A
    5b94:	8c 17       	cp	r24, r28
    5b96:	9d 07       	cpc	r25, r29
    5b98:	2c f0       	brlt	.+10     	; 0x5ba4 <getRightSpeedFromInput+0xbe>
    5b9a:	9f ef       	ldi	r25, 0xFF	; 255
    5b9c:	0f 3f       	cpi	r16, 0xFF	; 255
    5b9e:	19 07       	cpc	r17, r25
    5ba0:	09 f4       	brne	.+2      	; 0x5ba4 <getRightSpeedFromInput+0xbe>
    5ba2:	54 c1       	rjmp	.+680    	; 0x5e4c <getRightSpeedFromInput+0x366>
    5ba4:	80 91 29 09 	lds	r24, 0x0929
    5ba8:	90 91 2a 09 	lds	r25, 0x092A
    5bac:	8c 17       	cp	r24, r28
    5bae:	9d 07       	cpc	r25, r29
    5bb0:	2c f0       	brlt	.+10     	; 0x5bbc <getRightSpeedFromInput+0xd6>
    5bb2:	8f ef       	ldi	r24, 0xFF	; 255
    5bb4:	0f 3f       	cpi	r16, 0xFF	; 255
    5bb6:	18 07       	cpc	r17, r24
    5bb8:	09 f4       	brne	.+2      	; 0x5bbc <getRightSpeedFromInput+0xd6>
    5bba:	45 c1       	rjmp	.+650    	; 0x5e46 <getRightSpeedFromInput+0x360>
    5bbc:	80 91 39 09 	lds	r24, 0x0939
    5bc0:	90 91 3a 09 	lds	r25, 0x093A
    5bc4:	8c 17       	cp	r24, r28
    5bc6:	9d 07       	cpc	r25, r29
    5bc8:	2c f0       	brlt	.+10     	; 0x5bd4 <getRightSpeedFromInput+0xee>
    5bca:	9f ef       	ldi	r25, 0xFF	; 255
    5bcc:	0f 3f       	cpi	r16, 0xFF	; 255
    5bce:	19 07       	cpc	r17, r25
    5bd0:	09 f4       	brne	.+2      	; 0x5bd4 <getRightSpeedFromInput+0xee>
    5bd2:	36 c1       	rjmp	.+620    	; 0x5e40 <getRightSpeedFromInput+0x35a>
    5bd4:	e0 90 49 09 	lds	r14, 0x0949
    5bd8:	f0 90 4a 09 	lds	r15, 0x094A
    5bdc:	ec 16       	cp	r14, r28
    5bde:	fd 06       	cpc	r15, r29
    5be0:	2c f0       	brlt	.+10     	; 0x5bec <getRightSpeedFromInput+0x106>
    5be2:	8f ef       	ldi	r24, 0xFF	; 255
    5be4:	0f 3f       	cpi	r16, 0xFF	; 255
    5be6:	18 07       	cpc	r17, r24
    5be8:	09 f4       	brne	.+2      	; 0x5bec <getRightSpeedFromInput+0x106>
    5bea:	27 c1       	rjmp	.+590    	; 0x5e3a <getRightSpeedFromInput+0x354>
			}
		}        
    }

    if(pwm_right >= 0) {
        if(last_right_vel == 0) {
    5bec:	20 97       	sbiw	r28, 0x00	; 0
    5bee:	09 f4       	brne	.+2      	; 0x5bf2 <getRightSpeedFromInput+0x10c>
    5bf0:	58 c0       	rjmp	.+176    	; 0x5ca2 <getRightSpeedFromInput+0x1bc>
            speedRightFromEnc = 0;
        } else {
            if(indFwR==0) {  // the velocity is lower than first saved in the matrix
    5bf2:	01 15       	cp	r16, r1
    5bf4:	11 05       	cpc	r17, r1
    5bf6:	09 f4       	brne	.+2      	; 0x5bfa <getRightSpeedFromInput+0x114>
    5bf8:	32 c1       	rjmp	.+612    	; 0x5e5e <getRightSpeedFromInput+0x378>
                speedRightFromEnc = (last_right_vel*calibration[0][3])/calibration[0][2];
            } else if(indFwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    5bfa:	9f ef       	ldi	r25, 0xFF	; 255
    5bfc:	0f 3f       	cpi	r16, 0xFF	; 255
    5bfe:	19 07       	cpc	r17, r25
    5c00:	09 f4       	brne	.+2      	; 0x5c04 <getRightSpeedFromInput+0x11e>
    5c02:	e9 c0       	rjmp	.+466    	; 0x5dd6 <getRightSpeedFromInput+0x2f0>
                speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][3]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][2]);  // take the max
            } else {
                speedRightFromEnc = calibration[indFwR-1][3] + (signed int)(((float)(last_right_vel-calibration[indFwR-1][2])*(float)(calibration[indFwR][3]-calibration[indFwR-1][3]))/(float)(calibration[indFwR][2]-calibration[indFwR-1][2]));
    5c04:	f8 01       	movw	r30, r16
    5c06:	e2 95       	swap	r30
    5c08:	f2 95       	swap	r31
    5c0a:	f0 7f       	andi	r31, 0xF0	; 240
    5c0c:	fe 27       	eor	r31, r30
    5c0e:	e0 7f       	andi	r30, 0xF0	; 240
    5c10:	fe 27       	eor	r31, r30
    5c12:	eb 54       	subi	r30, 0x4B	; 75
    5c14:	f7 4f       	sbci	r31, 0xF7	; 247
    5c16:	a4 80       	ldd	r10, Z+4	; 0x04
    5c18:	b5 80       	ldd	r11, Z+5	; 0x05
    5c1a:	86 80       	ldd	r8, Z+6	; 0x06
    5c1c:	97 80       	ldd	r9, Z+7	; 0x07
    5c1e:	ca 19       	sub	r28, r10
    5c20:	db 09       	sbc	r29, r11
    5c22:	be 01       	movw	r22, r28
    5c24:	88 27       	eor	r24, r24
    5c26:	77 fd       	sbrc	r23, 7
    5c28:	80 95       	com	r24
    5c2a:	98 2f       	mov	r25, r24
    5c2c:	0e 94 d3 4f 	call	0x9fa6	; 0x9fa6 <__floatsisf>
    5c30:	6b 01       	movw	r12, r22
    5c32:	7c 01       	movw	r14, r24
    5c34:	e8 01       	movw	r28, r16
    5c36:	c2 95       	swap	r28
    5c38:	d2 95       	swap	r29
    5c3a:	d0 7f       	andi	r29, 0xF0	; 240
    5c3c:	dc 27       	eor	r29, r28
    5c3e:	c0 7f       	andi	r28, 0xF0	; 240
    5c40:	dc 27       	eor	r29, r28
    5c42:	cb 53       	subi	r28, 0x3B	; 59
    5c44:	d7 4f       	sbci	r29, 0xF7	; 247
    5c46:	6e 81       	ldd	r22, Y+6	; 0x06
    5c48:	7f 81       	ldd	r23, Y+7	; 0x07
    5c4a:	68 19       	sub	r22, r8
    5c4c:	79 09       	sbc	r23, r9
    5c4e:	88 27       	eor	r24, r24
    5c50:	77 fd       	sbrc	r23, 7
    5c52:	80 95       	com	r24
    5c54:	98 2f       	mov	r25, r24
    5c56:	0e 94 d3 4f 	call	0x9fa6	; 0x9fa6 <__floatsisf>
    5c5a:	9b 01       	movw	r18, r22
    5c5c:	ac 01       	movw	r20, r24
    5c5e:	c7 01       	movw	r24, r14
    5c60:	b6 01       	movw	r22, r12
    5c62:	0e 94 e8 50 	call	0xa1d0	; 0xa1d0 <__mulsf3>
    5c66:	7b 01       	movw	r14, r22
    5c68:	8c 01       	movw	r16, r24
    5c6a:	6c 81       	ldd	r22, Y+4	; 0x04
    5c6c:	7d 81       	ldd	r23, Y+5	; 0x05
    5c6e:	6a 19       	sub	r22, r10
    5c70:	7b 09       	sbc	r23, r11
    5c72:	88 27       	eor	r24, r24
    5c74:	77 fd       	sbrc	r23, 7
    5c76:	80 95       	com	r24
    5c78:	98 2f       	mov	r25, r24
    5c7a:	0e 94 d3 4f 	call	0x9fa6	; 0x9fa6 <__floatsisf>
    5c7e:	9b 01       	movw	r18, r22
    5c80:	ac 01       	movw	r20, r24
    5c82:	c8 01       	movw	r24, r16
    5c84:	b7 01       	movw	r22, r14
    5c86:	0e 94 38 4f 	call	0x9e70	; 0x9e70 <__divsf3>
    5c8a:	0e 94 a0 4f 	call	0x9f40	; 0x9f40 <__fixsfsi>
    5c8e:	68 0d       	add	r22, r8
    5c90:	79 1d       	adc	r23, r9
    5c92:	70 93 bb 04 	sts	0x04BB, r23
    5c96:	60 93 ba 04 	sts	0x04BA, r22
    5c9a:	07 c0       	rjmp	.+14     	; 0x5caa <getRightSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    5c9c:	00 e0       	ldi	r16, 0x00	; 0
    5c9e:	10 e0       	ldi	r17, 0x00	; 0
    5ca0:	42 cf       	rjmp	.-380    	; 0x5b26 <getRightSpeedFromInput+0x40>
		}        
    }

    if(pwm_right >= 0) {
        if(last_right_vel == 0) {
            speedRightFromEnc = 0;
    5ca2:	10 92 bb 04 	sts	0x04BB, r1
    5ca6:	10 92 ba 04 	sts	0x04BA, r1
        	speedRightFromEnc = calibration[indBwR-1][7] + (signed int)(((float)(last_right_vel-calibration[indBwR-1][6])*(float)(calibration[indBwR][7]-calibration[indBwR-1][7]))/(float)(calibration[indBwR][6]-calibration[indBwR-1][6]));
		}
		speedRightFromEnc = -speedRightFromEnc;
    }
    
}
    5caa:	df 91       	pop	r29
    5cac:	cf 91       	pop	r28
    5cae:	1f 91       	pop	r17
    5cb0:	0f 91       	pop	r16
    5cb2:	ff 90       	pop	r15
    5cb4:	ef 90       	pop	r14
    5cb6:	df 90       	pop	r13
    5cb8:	cf 90       	pop	r12
    5cba:	bf 90       	pop	r11
    5cbc:	af 90       	pop	r10
    5cbe:	9f 90       	pop	r9
    5cc0:	8f 90       	pop	r8
    5cc2:	08 95       	ret
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    5cc4:	60 91 d1 08 	lds	r22, 0x08D1
    5cc8:	70 91 d2 08 	lds	r23, 0x08D2
    5ccc:	6c 17       	cp	r22, r28
    5cce:	7d 07       	cpc	r23, r29
    5cd0:	0c f0       	brlt	.+2      	; 0x5cd4 <getRightSpeedFromInput+0x1ee>
    5cd2:	7e c0       	rjmp	.+252    	; 0x5dd0 <getRightSpeedFromInput+0x2ea>
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    5cd4:	0f ef       	ldi	r16, 0xFF	; 255
    5cd6:	1f ef       	ldi	r17, 0xFF	; 255
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    5cd8:	80 91 e1 08 	lds	r24, 0x08E1
    5cdc:	90 91 e2 08 	lds	r25, 0x08E2
    5ce0:	8c 17       	cp	r24, r28
    5ce2:	9d 07       	cpc	r25, r29
    5ce4:	44 f0       	brlt	.+16     	; 0x5cf6 <getRightSpeedFromInput+0x210>
    
    return temp;
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {
    5ce6:	81 e0       	ldi	r24, 0x01	; 1
    5ce8:	9f ef       	ldi	r25, 0xFF	; 255
    5cea:	0f 3f       	cpi	r16, 0xFF	; 255
    5cec:	19 07       	cpc	r17, r25
    5cee:	09 f0       	breq	.+2      	; 0x5cf2 <getRightSpeedFromInput+0x20c>
    5cf0:	80 e0       	ldi	r24, 0x00	; 0
    5cf2:	08 2f       	mov	r16, r24
    5cf4:	10 e0       	ldi	r17, 0x00	; 0
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    5cf6:	80 91 f1 08 	lds	r24, 0x08F1
    5cfa:	90 91 f2 08 	lds	r25, 0x08F2
    5cfe:	8c 17       	cp	r24, r28
    5d00:	9d 07       	cpc	r25, r29
    5d02:	2c f0       	brlt	.+10     	; 0x5d0e <getRightSpeedFromInput+0x228>
    5d04:	8f ef       	ldi	r24, 0xFF	; 255
    5d06:	0f 3f       	cpi	r16, 0xFF	; 255
    5d08:	18 07       	cpc	r17, r24
    5d0a:	09 f4       	brne	.+2      	; 0x5d0e <getRightSpeedFromInput+0x228>
    5d0c:	19 c1       	rjmp	.+562    	; 0x5f40 <getRightSpeedFromInput+0x45a>
    5d0e:	80 91 01 09 	lds	r24, 0x0901
    5d12:	90 91 02 09 	lds	r25, 0x0902
    5d16:	8c 17       	cp	r24, r28
    5d18:	9d 07       	cpc	r25, r29
    5d1a:	2c f0       	brlt	.+10     	; 0x5d26 <getRightSpeedFromInput+0x240>
    5d1c:	9f ef       	ldi	r25, 0xFF	; 255
    5d1e:	0f 3f       	cpi	r16, 0xFF	; 255
    5d20:	19 07       	cpc	r17, r25
    5d22:	09 f4       	brne	.+2      	; 0x5d26 <getRightSpeedFromInput+0x240>
    5d24:	0a c1       	rjmp	.+532    	; 0x5f3a <getRightSpeedFromInput+0x454>
    5d26:	80 91 11 09 	lds	r24, 0x0911
    5d2a:	90 91 12 09 	lds	r25, 0x0912
    5d2e:	8c 17       	cp	r24, r28
    5d30:	9d 07       	cpc	r25, r29
    5d32:	2c f0       	brlt	.+10     	; 0x5d3e <getRightSpeedFromInput+0x258>
    5d34:	8f ef       	ldi	r24, 0xFF	; 255
    5d36:	0f 3f       	cpi	r16, 0xFF	; 255
    5d38:	18 07       	cpc	r17, r24
    5d3a:	09 f4       	brne	.+2      	; 0x5d3e <getRightSpeedFromInput+0x258>
    5d3c:	fb c0       	rjmp	.+502    	; 0x5f34 <getRightSpeedFromInput+0x44e>
    5d3e:	80 91 21 09 	lds	r24, 0x0921
    5d42:	90 91 22 09 	lds	r25, 0x0922
    5d46:	8c 17       	cp	r24, r28
    5d48:	9d 07       	cpc	r25, r29
    5d4a:	2c f0       	brlt	.+10     	; 0x5d56 <getRightSpeedFromInput+0x270>
    5d4c:	9f ef       	ldi	r25, 0xFF	; 255
    5d4e:	0f 3f       	cpi	r16, 0xFF	; 255
    5d50:	19 07       	cpc	r17, r25
    5d52:	09 f4       	brne	.+2      	; 0x5d56 <getRightSpeedFromInput+0x270>
    5d54:	ec c0       	rjmp	.+472    	; 0x5f2e <getRightSpeedFromInput+0x448>
    5d56:	80 91 31 09 	lds	r24, 0x0931
    5d5a:	90 91 32 09 	lds	r25, 0x0932
    5d5e:	8c 17       	cp	r24, r28
    5d60:	9d 07       	cpc	r25, r29
    5d62:	2c f0       	brlt	.+10     	; 0x5d6e <getRightSpeedFromInput+0x288>
    5d64:	8f ef       	ldi	r24, 0xFF	; 255
    5d66:	0f 3f       	cpi	r16, 0xFF	; 255
    5d68:	18 07       	cpc	r17, r24
    5d6a:	09 f4       	brne	.+2      	; 0x5d6e <getRightSpeedFromInput+0x288>
    5d6c:	dd c0       	rjmp	.+442    	; 0x5f28 <getRightSpeedFromInput+0x442>
    5d6e:	80 91 41 09 	lds	r24, 0x0941
    5d72:	90 91 42 09 	lds	r25, 0x0942
    5d76:	8c 17       	cp	r24, r28
    5d78:	9d 07       	cpc	r25, r29
    5d7a:	2c f0       	brlt	.+10     	; 0x5d86 <getRightSpeedFromInput+0x2a0>
    5d7c:	9f ef       	ldi	r25, 0xFF	; 255
    5d7e:	0f 3f       	cpi	r16, 0xFF	; 255
    5d80:	19 07       	cpc	r17, r25
    5d82:	09 f4       	brne	.+2      	; 0x5d86 <getRightSpeedFromInput+0x2a0>
    5d84:	ce c0       	rjmp	.+412    	; 0x5f22 <getRightSpeedFromInput+0x43c>
    5d86:	e0 90 51 09 	lds	r14, 0x0951
    5d8a:	f0 90 52 09 	lds	r15, 0x0952
    5d8e:	ec 16       	cp	r14, r28
    5d90:	fd 06       	cpc	r15, r29
    5d92:	2c f0       	brlt	.+10     	; 0x5d9e <getRightSpeedFromInput+0x2b8>
    5d94:	8f ef       	ldi	r24, 0xFF	; 255
    5d96:	0f 3f       	cpi	r16, 0xFF	; 255
    5d98:	18 07       	cpc	r17, r24
    5d9a:	09 f4       	brne	.+2      	; 0x5d9e <getRightSpeedFromInput+0x2b8>
    5d9c:	bf c0       	rjmp	.+382    	; 0x5f1c <getRightSpeedFromInput+0x436>
            } else {
                speedRightFromEnc = calibration[indFwR-1][3] + (signed int)(((float)(last_right_vel-calibration[indFwR-1][2])*(float)(calibration[indFwR][3]-calibration[indFwR-1][3]))/(float)(calibration[indFwR][2]-calibration[indFwR-1][2]));
            }
        }
    } else {
		if(indBwR==0) {  // the velocity is lower than first saved in the matrix
    5d9e:	01 15       	cp	r16, r1
    5da0:	11 05       	cpc	r17, r1
    5da2:	09 f0       	breq	.+2      	; 0x5da6 <getRightSpeedFromInput+0x2c0>
    5da4:	6e c0       	rjmp	.+220    	; 0x5e82 <getRightSpeedFromInput+0x39c>
        	speedRightFromEnc = (last_right_vel*calibration[0][7])/calibration[0][6];
    5da6:	20 91 d3 08 	lds	r18, 0x08D3
    5daa:	30 91 d4 08 	lds	r19, 0x08D4
    5dae:	c2 9f       	mul	r28, r18
    5db0:	c0 01       	movw	r24, r0
    5db2:	c3 9f       	mul	r28, r19
    5db4:	90 0d       	add	r25, r0
    5db6:	d2 9f       	mul	r29, r18
    5db8:	90 0d       	add	r25, r0
    5dba:	11 24       	eor	r1, r1
    5dbc:	0e 94 a6 51 	call	0xa34c	; 0xa34c <__divmodhi4>
		} else if(indBwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][7]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][6]);  // take the max
		} else {
        	speedRightFromEnc = calibration[indBwR-1][7] + (signed int)(((float)(last_right_vel-calibration[indBwR-1][6])*(float)(calibration[indBwR][7]-calibration[indBwR-1][7]))/(float)(calibration[indBwR][6]-calibration[indBwR-1][6]));
		}
		speedRightFromEnc = -speedRightFromEnc;
    5dc0:	70 95       	com	r23
    5dc2:	61 95       	neg	r22
    5dc4:	7f 4f       	sbci	r23, 0xFF	; 255
    5dc6:	70 93 bb 04 	sts	0x04BB, r23
    5dca:	60 93 ba 04 	sts	0x04BA, r22
    5dce:	6d cf       	rjmp	.-294    	; 0x5caa <getRightSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    5dd0:	00 e0       	ldi	r16, 0x00	; 0
    5dd2:	10 e0       	ldi	r17, 0x00	; 0
    5dd4:	81 cf       	rjmp	.-254    	; 0x5cd8 <getRightSpeedFromInput+0x1f2>
            speedRightFromEnc = 0;
        } else {
            if(indFwR==0) {  // the velocity is lower than first saved in the matrix
                speedRightFromEnc = (last_right_vel*calibration[0][3])/calibration[0][2];
            } else if(indFwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
                speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][3]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][2]);  // take the max
    5dd6:	60 91 4b 09 	lds	r22, 0x094B
    5dda:	70 91 4c 09 	lds	r23, 0x094C
    5dde:	88 27       	eor	r24, r24
    5de0:	77 fd       	sbrc	r23, 7
    5de2:	80 95       	com	r24
    5de4:	98 2f       	mov	r25, r24
    5de6:	0e 94 d3 4f 	call	0x9fa6	; 0x9fa6 <__floatsisf>
    5dea:	5b 01       	movw	r10, r22
    5dec:	6c 01       	movw	r12, r24
    5dee:	be 01       	movw	r22, r28
    5df0:	88 27       	eor	r24, r24
    5df2:	77 fd       	sbrc	r23, 7
    5df4:	80 95       	com	r24
    5df6:	98 2f       	mov	r25, r24
    5df8:	0e 94 d3 4f 	call	0x9fa6	; 0x9fa6 <__floatsisf>
    5dfc:	9b 01       	movw	r18, r22
    5dfe:	ac 01       	movw	r20, r24
    5e00:	c6 01       	movw	r24, r12
    5e02:	b5 01       	movw	r22, r10
    5e04:	0e 94 e8 50 	call	0xa1d0	; 0xa1d0 <__mulsf3>
    5e08:	5b 01       	movw	r10, r22
    5e0a:	6c 01       	movw	r12, r24
    5e0c:	b7 01       	movw	r22, r14
    5e0e:	88 27       	eor	r24, r24
    5e10:	77 fd       	sbrc	r23, 7
    5e12:	80 95       	com	r24
    5e14:	98 2f       	mov	r25, r24
    5e16:	0e 94 d3 4f 	call	0x9fa6	; 0x9fa6 <__floatsisf>
    5e1a:	9b 01       	movw	r18, r22
    5e1c:	ac 01       	movw	r20, r24
    5e1e:	c6 01       	movw	r24, r12
    5e20:	b5 01       	movw	r22, r10
    5e22:	0e 94 38 4f 	call	0x9e70	; 0x9e70 <__divsf3>
    5e26:	0e 94 a0 4f 	call	0x9f40	; 0x9f40 <__fixsfsi>
    5e2a:	70 93 bb 04 	sts	0x04BB, r23
    5e2e:	60 93 ba 04 	sts	0x04BA, r22
    5e32:	3b cf       	rjmp	.-394    	; 0x5caa <getRightSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    5e34:	02 e0       	ldi	r16, 0x02	; 2
    5e36:	10 e0       	ldi	r17, 0x00	; 0
    5e38:	91 ce       	rjmp	.-734    	; 0x5b5c <getRightSpeedFromInput+0x76>
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    5e3a:	08 e0       	ldi	r16, 0x08	; 8
    5e3c:	10 e0       	ldi	r17, 0x00	; 0
    5e3e:	d6 ce       	rjmp	.-596    	; 0x5bec <getRightSpeedFromInput+0x106>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    5e40:	07 e0       	ldi	r16, 0x07	; 7
    5e42:	10 e0       	ldi	r17, 0x00	; 0
    5e44:	c7 ce       	rjmp	.-626    	; 0x5bd4 <getRightSpeedFromInput+0xee>
    5e46:	06 e0       	ldi	r16, 0x06	; 6
    5e48:	10 e0       	ldi	r17, 0x00	; 0
    5e4a:	b8 ce       	rjmp	.-656    	; 0x5bbc <getRightSpeedFromInput+0xd6>
    5e4c:	05 e0       	ldi	r16, 0x05	; 5
    5e4e:	10 e0       	ldi	r17, 0x00	; 0
    5e50:	a9 ce       	rjmp	.-686    	; 0x5ba4 <getRightSpeedFromInput+0xbe>
    5e52:	04 e0       	ldi	r16, 0x04	; 4
    5e54:	10 e0       	ldi	r17, 0x00	; 0
    5e56:	9a ce       	rjmp	.-716    	; 0x5b8c <getRightSpeedFromInput+0xa6>
    5e58:	03 e0       	ldi	r16, 0x03	; 3
    5e5a:	10 e0       	ldi	r17, 0x00	; 0
    5e5c:	8b ce       	rjmp	.-746    	; 0x5b74 <getRightSpeedFromInput+0x8e>
    if(pwm_right >= 0) {
        if(last_right_vel == 0) {
            speedRightFromEnc = 0;
        } else {
            if(indFwR==0) {  // the velocity is lower than first saved in the matrix
                speedRightFromEnc = (last_right_vel*calibration[0][3])/calibration[0][2];
    5e5e:	20 91 cb 08 	lds	r18, 0x08CB
    5e62:	30 91 cc 08 	lds	r19, 0x08CC
    5e66:	c2 9f       	mul	r28, r18
    5e68:	c0 01       	movw	r24, r0
    5e6a:	c3 9f       	mul	r28, r19
    5e6c:	90 0d       	add	r25, r0
    5e6e:	d2 9f       	mul	r29, r18
    5e70:	90 0d       	add	r25, r0
    5e72:	11 24       	eor	r1, r1
    5e74:	0e 94 a6 51 	call	0xa34c	; 0xa34c <__divmodhi4>
    5e78:	70 93 bb 04 	sts	0x04BB, r23
    5e7c:	60 93 ba 04 	sts	0x04BA, r22
    5e80:	14 cf       	rjmp	.-472    	; 0x5caa <getRightSpeedFromInput+0x1c4>
            }
        }
    } else {
		if(indBwR==0) {  // the velocity is lower than first saved in the matrix
        	speedRightFromEnc = (last_right_vel*calibration[0][7])/calibration[0][6];
		} else if(indBwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    5e82:	8f ef       	ldi	r24, 0xFF	; 255
    5e84:	0f 3f       	cpi	r16, 0xFF	; 255
    5e86:	18 07       	cpc	r17, r24
    5e88:	09 f4       	brne	.+2      	; 0x5e8c <getRightSpeedFromInput+0x3a6>
    5e8a:	5d c0       	rjmp	.+186    	; 0x5f46 <getRightSpeedFromInput+0x460>
        	speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][7]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][6]);  // take the max
		} else {
        	speedRightFromEnc = calibration[indBwR-1][7] + (signed int)(((float)(last_right_vel-calibration[indBwR-1][6])*(float)(calibration[indBwR][7]-calibration[indBwR-1][7]))/(float)(calibration[indBwR][6]-calibration[indBwR-1][6]));
    5e8c:	f8 01       	movw	r30, r16
    5e8e:	e2 95       	swap	r30
    5e90:	f2 95       	swap	r31
    5e92:	f0 7f       	andi	r31, 0xF0	; 240
    5e94:	fe 27       	eor	r31, r30
    5e96:	e0 7f       	andi	r30, 0xF0	; 240
    5e98:	fe 27       	eor	r31, r30
    5e9a:	eb 54       	subi	r30, 0x4B	; 75
    5e9c:	f7 4f       	sbci	r31, 0xF7	; 247
    5e9e:	a4 84       	ldd	r10, Z+12	; 0x0c
    5ea0:	b5 84       	ldd	r11, Z+13	; 0x0d
    5ea2:	86 84       	ldd	r8, Z+14	; 0x0e
    5ea4:	97 84       	ldd	r9, Z+15	; 0x0f
    5ea6:	ca 19       	sub	r28, r10
    5ea8:	db 09       	sbc	r29, r11
    5eaa:	be 01       	movw	r22, r28
    5eac:	88 27       	eor	r24, r24
    5eae:	77 fd       	sbrc	r23, 7
    5eb0:	80 95       	com	r24
    5eb2:	98 2f       	mov	r25, r24
    5eb4:	0e 94 d3 4f 	call	0x9fa6	; 0x9fa6 <__floatsisf>
    5eb8:	6b 01       	movw	r12, r22
    5eba:	7c 01       	movw	r14, r24
    5ebc:	e8 01       	movw	r28, r16
    5ebe:	c2 95       	swap	r28
    5ec0:	d2 95       	swap	r29
    5ec2:	d0 7f       	andi	r29, 0xF0	; 240
    5ec4:	dc 27       	eor	r29, r28
    5ec6:	c0 7f       	andi	r28, 0xF0	; 240
    5ec8:	dc 27       	eor	r29, r28
    5eca:	cb 53       	subi	r28, 0x3B	; 59
    5ecc:	d7 4f       	sbci	r29, 0xF7	; 247
    5ece:	6e 85       	ldd	r22, Y+14	; 0x0e
    5ed0:	7f 85       	ldd	r23, Y+15	; 0x0f
    5ed2:	68 19       	sub	r22, r8
    5ed4:	79 09       	sbc	r23, r9
    5ed6:	88 27       	eor	r24, r24
    5ed8:	77 fd       	sbrc	r23, 7
    5eda:	80 95       	com	r24
    5edc:	98 2f       	mov	r25, r24
    5ede:	0e 94 d3 4f 	call	0x9fa6	; 0x9fa6 <__floatsisf>
    5ee2:	9b 01       	movw	r18, r22
    5ee4:	ac 01       	movw	r20, r24
    5ee6:	c7 01       	movw	r24, r14
    5ee8:	b6 01       	movw	r22, r12
    5eea:	0e 94 e8 50 	call	0xa1d0	; 0xa1d0 <__mulsf3>
    5eee:	7b 01       	movw	r14, r22
    5ef0:	8c 01       	movw	r16, r24
    5ef2:	6c 85       	ldd	r22, Y+12	; 0x0c
    5ef4:	7d 85       	ldd	r23, Y+13	; 0x0d
    5ef6:	6a 19       	sub	r22, r10
    5ef8:	7b 09       	sbc	r23, r11
    5efa:	88 27       	eor	r24, r24
    5efc:	77 fd       	sbrc	r23, 7
    5efe:	80 95       	com	r24
    5f00:	98 2f       	mov	r25, r24
    5f02:	0e 94 d3 4f 	call	0x9fa6	; 0x9fa6 <__floatsisf>
    5f06:	9b 01       	movw	r18, r22
    5f08:	ac 01       	movw	r20, r24
    5f0a:	c8 01       	movw	r24, r16
    5f0c:	b7 01       	movw	r22, r14
    5f0e:	0e 94 38 4f 	call	0x9e70	; 0x9e70 <__divsf3>
    5f12:	0e 94 a0 4f 	call	0x9f40	; 0x9f40 <__fixsfsi>
    5f16:	68 0d       	add	r22, r8
    5f18:	79 1d       	adc	r23, r9
    5f1a:	52 cf       	rjmp	.-348    	; 0x5dc0 <getRightSpeedFromInput+0x2da>
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    5f1c:	08 e0       	ldi	r16, 0x08	; 8
    5f1e:	10 e0       	ldi	r17, 0x00	; 0
    5f20:	3e cf       	rjmp	.-388    	; 0x5d9e <getRightSpeedFromInput+0x2b8>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    5f22:	07 e0       	ldi	r16, 0x07	; 7
    5f24:	10 e0       	ldi	r17, 0x00	; 0
    5f26:	2f cf       	rjmp	.-418    	; 0x5d86 <getRightSpeedFromInput+0x2a0>
    5f28:	06 e0       	ldi	r16, 0x06	; 6
    5f2a:	10 e0       	ldi	r17, 0x00	; 0
    5f2c:	20 cf       	rjmp	.-448    	; 0x5d6e <getRightSpeedFromInput+0x288>
    5f2e:	05 e0       	ldi	r16, 0x05	; 5
    5f30:	10 e0       	ldi	r17, 0x00	; 0
    5f32:	11 cf       	rjmp	.-478    	; 0x5d56 <getRightSpeedFromInput+0x270>
    5f34:	04 e0       	ldi	r16, 0x04	; 4
    5f36:	10 e0       	ldi	r17, 0x00	; 0
    5f38:	02 cf       	rjmp	.-508    	; 0x5d3e <getRightSpeedFromInput+0x258>
    5f3a:	03 e0       	ldi	r16, 0x03	; 3
    5f3c:	10 e0       	ldi	r17, 0x00	; 0
    5f3e:	f3 ce       	rjmp	.-538    	; 0x5d26 <getRightSpeedFromInput+0x240>
    5f40:	02 e0       	ldi	r16, 0x02	; 2
    5f42:	10 e0       	ldi	r17, 0x00	; 0
    5f44:	e4 ce       	rjmp	.-568    	; 0x5d0e <getRightSpeedFromInput+0x228>
        }
    } else {
		if(indBwR==0) {  // the velocity is lower than first saved in the matrix
        	speedRightFromEnc = (last_right_vel*calibration[0][7])/calibration[0][6];
		} else if(indBwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][7]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][6]);  // take the max
    5f46:	60 91 53 09 	lds	r22, 0x0953
    5f4a:	70 91 54 09 	lds	r23, 0x0954
    5f4e:	88 27       	eor	r24, r24
    5f50:	77 fd       	sbrc	r23, 7
    5f52:	80 95       	com	r24
    5f54:	98 2f       	mov	r25, r24
    5f56:	0e 94 d3 4f 	call	0x9fa6	; 0x9fa6 <__floatsisf>
    5f5a:	5b 01       	movw	r10, r22
    5f5c:	6c 01       	movw	r12, r24
    5f5e:	be 01       	movw	r22, r28
    5f60:	88 27       	eor	r24, r24
    5f62:	77 fd       	sbrc	r23, 7
    5f64:	80 95       	com	r24
    5f66:	98 2f       	mov	r25, r24
    5f68:	0e 94 d3 4f 	call	0x9fa6	; 0x9fa6 <__floatsisf>
    5f6c:	9b 01       	movw	r18, r22
    5f6e:	ac 01       	movw	r20, r24
    5f70:	c6 01       	movw	r24, r12
    5f72:	b5 01       	movw	r22, r10
    5f74:	0e 94 e8 50 	call	0xa1d0	; 0xa1d0 <__mulsf3>
    5f78:	5b 01       	movw	r10, r22
    5f7a:	6c 01       	movw	r12, r24
    5f7c:	b7 01       	movw	r22, r14
    5f7e:	88 27       	eor	r24, r24
    5f80:	77 fd       	sbrc	r23, 7
    5f82:	80 95       	com	r24
    5f84:	98 2f       	mov	r25, r24
    5f86:	0e 94 d3 4f 	call	0x9fa6	; 0x9fa6 <__floatsisf>
    5f8a:	9b 01       	movw	r18, r22
    5f8c:	ac 01       	movw	r20, r24
    5f8e:	c6 01       	movw	r24, r12
    5f90:	b5 01       	movw	r22, r10
    5f92:	0e 94 38 4f 	call	0x9e70	; 0x9e70 <__divsf3>
    5f96:	0e 94 a0 4f 	call	0x9f40	; 0x9f40 <__fixsfsi>
    5f9a:	12 cf       	rjmp	.-476    	; 0x5dc0 <getRightSpeedFromInput+0x2da>

00005f9c <getLeftSpeedFromInput>:
    }
    
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {
    5f9c:	8f 92       	push	r8
    5f9e:	9f 92       	push	r9
    5fa0:	af 92       	push	r10
    5fa2:	bf 92       	push	r11
    5fa4:	cf 92       	push	r12
    5fa6:	df 92       	push	r13
    5fa8:	ef 92       	push	r14
    5faa:	ff 92       	push	r15
    5fac:	0f 93       	push	r16
    5fae:	1f 93       	push	r17
    5fb0:	cf 93       	push	r28
    5fb2:	df 93       	push	r29

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    5fb4:	c0 91 f1 02 	lds	r28, 0x02F1
    5fb8:	d0 91 f2 02 	lds	r29, 0x02F2
    5fbc:	80 91 f7 02 	lds	r24, 0x02F7
    5fc0:	90 91 f8 02 	lds	r25, 0x02F8
    5fc4:	97 fd       	sbrc	r25, 7
    5fc6:	d9 c0       	rjmp	.+434    	; 0x617a <getLeftSpeedFromInput+0x1de>
    5fc8:	60 91 c5 08 	lds	r22, 0x08C5
    5fcc:	70 91 c6 08 	lds	r23, 0x08C6
    5fd0:	6c 17       	cp	r22, r28
    5fd2:	7d 07       	cpc	r23, r29
    5fd4:	0c f0       	brlt	.+2      	; 0x5fd8 <getLeftSpeedFromInput+0x3c>
    5fd6:	bd c0       	rjmp	.+378    	; 0x6152 <getLeftSpeedFromInput+0x1b6>
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    5fd8:	0f ef       	ldi	r16, 0xFF	; 255
    5fda:	1f ef       	ldi	r17, 0xFF	; 255
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    5fdc:	80 91 d5 08 	lds	r24, 0x08D5
    5fe0:	90 91 d6 08 	lds	r25, 0x08D6
    5fe4:	8c 17       	cp	r24, r28
    5fe6:	9d 07       	cpc	r25, r29
    5fe8:	44 f0       	brlt	.+16     	; 0x5ffa <getLeftSpeedFromInput+0x5e>
    }
    
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {
    5fea:	81 e0       	ldi	r24, 0x01	; 1
    5fec:	9f ef       	ldi	r25, 0xFF	; 255
    5fee:	0f 3f       	cpi	r16, 0xFF	; 255
    5ff0:	19 07       	cpc	r17, r25
    5ff2:	09 f0       	breq	.+2      	; 0x5ff6 <getLeftSpeedFromInput+0x5a>
    5ff4:	80 e0       	ldi	r24, 0x00	; 0
    5ff6:	08 2f       	mov	r16, r24
    5ff8:	10 e0       	ldi	r17, 0x00	; 0

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    5ffa:	80 91 e5 08 	lds	r24, 0x08E5
    5ffe:	90 91 e6 08 	lds	r25, 0x08E6
    6002:	8c 17       	cp	r24, r28
    6004:	9d 07       	cpc	r25, r29
    6006:	2c f0       	brlt	.+10     	; 0x6012 <getLeftSpeedFromInput+0x76>
    6008:	8f ef       	ldi	r24, 0xFF	; 255
    600a:	0f 3f       	cpi	r16, 0xFF	; 255
    600c:	18 07       	cpc	r17, r24
    600e:	09 f4       	brne	.+2      	; 0x6012 <getLeftSpeedFromInput+0x76>
    6010:	6c c1       	rjmp	.+728    	; 0x62ea <getLeftSpeedFromInput+0x34e>
    6012:	80 91 f5 08 	lds	r24, 0x08F5
    6016:	90 91 f6 08 	lds	r25, 0x08F6
    601a:	8c 17       	cp	r24, r28
    601c:	9d 07       	cpc	r25, r29
    601e:	2c f0       	brlt	.+10     	; 0x602a <getLeftSpeedFromInput+0x8e>
    6020:	9f ef       	ldi	r25, 0xFF	; 255
    6022:	0f 3f       	cpi	r16, 0xFF	; 255
    6024:	19 07       	cpc	r17, r25
    6026:	09 f4       	brne	.+2      	; 0x602a <getLeftSpeedFromInput+0x8e>
    6028:	72 c1       	rjmp	.+740    	; 0x630e <getLeftSpeedFromInput+0x372>
    602a:	80 91 05 09 	lds	r24, 0x0905
    602e:	90 91 06 09 	lds	r25, 0x0906
    6032:	8c 17       	cp	r24, r28
    6034:	9d 07       	cpc	r25, r29
    6036:	2c f0       	brlt	.+10     	; 0x6042 <getLeftSpeedFromInput+0xa6>
    6038:	8f ef       	ldi	r24, 0xFF	; 255
    603a:	0f 3f       	cpi	r16, 0xFF	; 255
    603c:	18 07       	cpc	r17, r24
    603e:	09 f4       	brne	.+2      	; 0x6042 <getLeftSpeedFromInput+0xa6>
    6040:	63 c1       	rjmp	.+710    	; 0x6308 <getLeftSpeedFromInput+0x36c>
    6042:	80 91 15 09 	lds	r24, 0x0915
    6046:	90 91 16 09 	lds	r25, 0x0916
    604a:	8c 17       	cp	r24, r28
    604c:	9d 07       	cpc	r25, r29
    604e:	2c f0       	brlt	.+10     	; 0x605a <getLeftSpeedFromInput+0xbe>
    6050:	9f ef       	ldi	r25, 0xFF	; 255
    6052:	0f 3f       	cpi	r16, 0xFF	; 255
    6054:	19 07       	cpc	r17, r25
    6056:	09 f4       	brne	.+2      	; 0x605a <getLeftSpeedFromInput+0xbe>
    6058:	54 c1       	rjmp	.+680    	; 0x6302 <getLeftSpeedFromInput+0x366>
    605a:	80 91 25 09 	lds	r24, 0x0925
    605e:	90 91 26 09 	lds	r25, 0x0926
    6062:	8c 17       	cp	r24, r28
    6064:	9d 07       	cpc	r25, r29
    6066:	2c f0       	brlt	.+10     	; 0x6072 <getLeftSpeedFromInput+0xd6>
    6068:	8f ef       	ldi	r24, 0xFF	; 255
    606a:	0f 3f       	cpi	r16, 0xFF	; 255
    606c:	18 07       	cpc	r17, r24
    606e:	09 f4       	brne	.+2      	; 0x6072 <getLeftSpeedFromInput+0xd6>
    6070:	45 c1       	rjmp	.+650    	; 0x62fc <getLeftSpeedFromInput+0x360>
    6072:	80 91 35 09 	lds	r24, 0x0935
    6076:	90 91 36 09 	lds	r25, 0x0936
    607a:	8c 17       	cp	r24, r28
    607c:	9d 07       	cpc	r25, r29
    607e:	2c f0       	brlt	.+10     	; 0x608a <getLeftSpeedFromInput+0xee>
    6080:	9f ef       	ldi	r25, 0xFF	; 255
    6082:	0f 3f       	cpi	r16, 0xFF	; 255
    6084:	19 07       	cpc	r17, r25
    6086:	09 f4       	brne	.+2      	; 0x608a <getLeftSpeedFromInput+0xee>
    6088:	36 c1       	rjmp	.+620    	; 0x62f6 <getLeftSpeedFromInput+0x35a>
    608a:	e0 90 45 09 	lds	r14, 0x0945
    608e:	f0 90 46 09 	lds	r15, 0x0946
    6092:	ec 16       	cp	r14, r28
    6094:	fd 06       	cpc	r15, r29
    6096:	2c f0       	brlt	.+10     	; 0x60a2 <getLeftSpeedFromInput+0x106>
    6098:	8f ef       	ldi	r24, 0xFF	; 255
    609a:	0f 3f       	cpi	r16, 0xFF	; 255
    609c:	18 07       	cpc	r17, r24
    609e:	09 f4       	brne	.+2      	; 0x60a2 <getLeftSpeedFromInput+0x106>
    60a0:	27 c1       	rjmp	.+590    	; 0x62f0 <getLeftSpeedFromInput+0x354>
			}
		}     
    }

    if(pwm_left >= 0) {
        if(last_left_vel == 0) {
    60a2:	20 97       	sbiw	r28, 0x00	; 0
    60a4:	09 f4       	brne	.+2      	; 0x60a8 <getLeftSpeedFromInput+0x10c>
    60a6:	58 c0       	rjmp	.+176    	; 0x6158 <getLeftSpeedFromInput+0x1bc>
            speedLeftFromEnc = 0;
        } else {
            if(indFwL==0) {  // the velocity is lower than first saved in the matrix
    60a8:	01 15       	cp	r16, r1
    60aa:	11 05       	cpc	r17, r1
    60ac:	09 f4       	brne	.+2      	; 0x60b0 <getLeftSpeedFromInput+0x114>
    60ae:	32 c1       	rjmp	.+612    	; 0x6314 <getLeftSpeedFromInput+0x378>
                speedLeftFromEnc = (last_left_vel*calibration[0][1])/calibration[0][0];
            } else if(indFwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    60b0:	9f ef       	ldi	r25, 0xFF	; 255
    60b2:	0f 3f       	cpi	r16, 0xFF	; 255
    60b4:	19 07       	cpc	r17, r25
    60b6:	09 f4       	brne	.+2      	; 0x60ba <getLeftSpeedFromInput+0x11e>
    60b8:	e9 c0       	rjmp	.+466    	; 0x628c <getLeftSpeedFromInput+0x2f0>
                speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][1]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][0]);  // take the max
            } else {
                speedLeftFromEnc = calibration[indFwL-1][1] + (signed int)(((float)(last_left_vel-calibration[indFwL-1][0])*(float)(calibration[indFwL][1]-calibration[indFwL-1][1]))/(float)(calibration[indFwL][0]-calibration[indFwL-1][0]));
    60ba:	f8 01       	movw	r30, r16
    60bc:	e2 95       	swap	r30
    60be:	f2 95       	swap	r31
    60c0:	f0 7f       	andi	r31, 0xF0	; 240
    60c2:	fe 27       	eor	r31, r30
    60c4:	e0 7f       	andi	r30, 0xF0	; 240
    60c6:	fe 27       	eor	r31, r30
    60c8:	eb 54       	subi	r30, 0x4B	; 75
    60ca:	f7 4f       	sbci	r31, 0xF7	; 247
    60cc:	a0 80       	ld	r10, Z
    60ce:	b1 80       	ldd	r11, Z+1	; 0x01
    60d0:	82 80       	ldd	r8, Z+2	; 0x02
    60d2:	93 80       	ldd	r9, Z+3	; 0x03
    60d4:	ca 19       	sub	r28, r10
    60d6:	db 09       	sbc	r29, r11
    60d8:	be 01       	movw	r22, r28
    60da:	88 27       	eor	r24, r24
    60dc:	77 fd       	sbrc	r23, 7
    60de:	80 95       	com	r24
    60e0:	98 2f       	mov	r25, r24
    60e2:	0e 94 d3 4f 	call	0x9fa6	; 0x9fa6 <__floatsisf>
    60e6:	6b 01       	movw	r12, r22
    60e8:	7c 01       	movw	r14, r24
    60ea:	e8 01       	movw	r28, r16
    60ec:	c2 95       	swap	r28
    60ee:	d2 95       	swap	r29
    60f0:	d0 7f       	andi	r29, 0xF0	; 240
    60f2:	dc 27       	eor	r29, r28
    60f4:	c0 7f       	andi	r28, 0xF0	; 240
    60f6:	dc 27       	eor	r29, r28
    60f8:	cb 53       	subi	r28, 0x3B	; 59
    60fa:	d7 4f       	sbci	r29, 0xF7	; 247
    60fc:	6a 81       	ldd	r22, Y+2	; 0x02
    60fe:	7b 81       	ldd	r23, Y+3	; 0x03
    6100:	68 19       	sub	r22, r8
    6102:	79 09       	sbc	r23, r9
    6104:	88 27       	eor	r24, r24
    6106:	77 fd       	sbrc	r23, 7
    6108:	80 95       	com	r24
    610a:	98 2f       	mov	r25, r24
    610c:	0e 94 d3 4f 	call	0x9fa6	; 0x9fa6 <__floatsisf>
    6110:	9b 01       	movw	r18, r22
    6112:	ac 01       	movw	r20, r24
    6114:	c7 01       	movw	r24, r14
    6116:	b6 01       	movw	r22, r12
    6118:	0e 94 e8 50 	call	0xa1d0	; 0xa1d0 <__mulsf3>
    611c:	7b 01       	movw	r14, r22
    611e:	8c 01       	movw	r16, r24
    6120:	68 81       	ld	r22, Y
    6122:	79 81       	ldd	r23, Y+1	; 0x01
    6124:	6a 19       	sub	r22, r10
    6126:	7b 09       	sbc	r23, r11
    6128:	88 27       	eor	r24, r24
    612a:	77 fd       	sbrc	r23, 7
    612c:	80 95       	com	r24
    612e:	98 2f       	mov	r25, r24
    6130:	0e 94 d3 4f 	call	0x9fa6	; 0x9fa6 <__floatsisf>
    6134:	9b 01       	movw	r18, r22
    6136:	ac 01       	movw	r20, r24
    6138:	c8 01       	movw	r24, r16
    613a:	b7 01       	movw	r22, r14
    613c:	0e 94 38 4f 	call	0x9e70	; 0x9e70 <__divsf3>
    6140:	0e 94 a0 4f 	call	0x9f40	; 0x9f40 <__fixsfsi>
    6144:	68 0d       	add	r22, r8
    6146:	79 1d       	adc	r23, r9
    6148:	70 93 b9 04 	sts	0x04B9, r23
    614c:	60 93 b8 04 	sts	0x04B8, r22
    6150:	07 c0       	rjmp	.+14     	; 0x6160 <getLeftSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    6152:	00 e0       	ldi	r16, 0x00	; 0
    6154:	10 e0       	ldi	r17, 0x00	; 0
    6156:	42 cf       	rjmp	.-380    	; 0x5fdc <getLeftSpeedFromInput+0x40>
		}     
    }

    if(pwm_left >= 0) {
        if(last_left_vel == 0) {
            speedLeftFromEnc = 0;
    6158:	10 92 b9 04 	sts	0x04B9, r1
    615c:	10 92 b8 04 	sts	0x04B8, r1
        	speedLeftFromEnc = calibration[indBwL-1][5] + (signed int)(((float)(last_left_vel-calibration[indBwL-1][4])*(float)(calibration[indBwL][5]-calibration[indBwL-1][5]))/(float)(calibration[indBwL][4]-calibration[indBwL-1][4]));
		}
		speedLeftFromEnc = -speedLeftFromEnc;
    }
    
}
    6160:	df 91       	pop	r29
    6162:	cf 91       	pop	r28
    6164:	1f 91       	pop	r17
    6166:	0f 91       	pop	r16
    6168:	ff 90       	pop	r15
    616a:	ef 90       	pop	r14
    616c:	df 90       	pop	r13
    616e:	cf 90       	pop	r12
    6170:	bf 90       	pop	r11
    6172:	af 90       	pop	r10
    6174:	9f 90       	pop	r9
    6176:	8f 90       	pop	r8
    6178:	08 95       	ret
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    617a:	60 91 cd 08 	lds	r22, 0x08CD
    617e:	70 91 ce 08 	lds	r23, 0x08CE
    6182:	6c 17       	cp	r22, r28
    6184:	7d 07       	cpc	r23, r29
    6186:	0c f0       	brlt	.+2      	; 0x618a <getLeftSpeedFromInput+0x1ee>
    6188:	7e c0       	rjmp	.+252    	; 0x6286 <getLeftSpeedFromInput+0x2ea>
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    618a:	0f ef       	ldi	r16, 0xFF	; 255
    618c:	1f ef       	ldi	r17, 0xFF	; 255
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    618e:	80 91 dd 08 	lds	r24, 0x08DD
    6192:	90 91 de 08 	lds	r25, 0x08DE
    6196:	8c 17       	cp	r24, r28
    6198:	9d 07       	cpc	r25, r29
    619a:	44 f0       	brlt	.+16     	; 0x61ac <getLeftSpeedFromInput+0x210>
    }
    
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {
    619c:	81 e0       	ldi	r24, 0x01	; 1
    619e:	9f ef       	ldi	r25, 0xFF	; 255
    61a0:	0f 3f       	cpi	r16, 0xFF	; 255
    61a2:	19 07       	cpc	r17, r25
    61a4:	09 f0       	breq	.+2      	; 0x61a8 <getLeftSpeedFromInput+0x20c>
    61a6:	80 e0       	ldi	r24, 0x00	; 0
    61a8:	08 2f       	mov	r16, r24
    61aa:	10 e0       	ldi	r17, 0x00	; 0
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    61ac:	80 91 ed 08 	lds	r24, 0x08ED
    61b0:	90 91 ee 08 	lds	r25, 0x08EE
    61b4:	8c 17       	cp	r24, r28
    61b6:	9d 07       	cpc	r25, r29
    61b8:	2c f0       	brlt	.+10     	; 0x61c4 <getLeftSpeedFromInput+0x228>
    61ba:	8f ef       	ldi	r24, 0xFF	; 255
    61bc:	0f 3f       	cpi	r16, 0xFF	; 255
    61be:	18 07       	cpc	r17, r24
    61c0:	09 f4       	brne	.+2      	; 0x61c4 <getLeftSpeedFromInput+0x228>
    61c2:	19 c1       	rjmp	.+562    	; 0x63f6 <getLeftSpeedFromInput+0x45a>
    61c4:	80 91 fd 08 	lds	r24, 0x08FD
    61c8:	90 91 fe 08 	lds	r25, 0x08FE
    61cc:	8c 17       	cp	r24, r28
    61ce:	9d 07       	cpc	r25, r29
    61d0:	2c f0       	brlt	.+10     	; 0x61dc <getLeftSpeedFromInput+0x240>
    61d2:	9f ef       	ldi	r25, 0xFF	; 255
    61d4:	0f 3f       	cpi	r16, 0xFF	; 255
    61d6:	19 07       	cpc	r17, r25
    61d8:	09 f4       	brne	.+2      	; 0x61dc <getLeftSpeedFromInput+0x240>
    61da:	0a c1       	rjmp	.+532    	; 0x63f0 <getLeftSpeedFromInput+0x454>
    61dc:	80 91 0d 09 	lds	r24, 0x090D
    61e0:	90 91 0e 09 	lds	r25, 0x090E
    61e4:	8c 17       	cp	r24, r28
    61e6:	9d 07       	cpc	r25, r29
    61e8:	2c f0       	brlt	.+10     	; 0x61f4 <getLeftSpeedFromInput+0x258>
    61ea:	8f ef       	ldi	r24, 0xFF	; 255
    61ec:	0f 3f       	cpi	r16, 0xFF	; 255
    61ee:	18 07       	cpc	r17, r24
    61f0:	09 f4       	brne	.+2      	; 0x61f4 <getLeftSpeedFromInput+0x258>
    61f2:	fb c0       	rjmp	.+502    	; 0x63ea <getLeftSpeedFromInput+0x44e>
    61f4:	80 91 1d 09 	lds	r24, 0x091D
    61f8:	90 91 1e 09 	lds	r25, 0x091E
    61fc:	8c 17       	cp	r24, r28
    61fe:	9d 07       	cpc	r25, r29
    6200:	2c f0       	brlt	.+10     	; 0x620c <getLeftSpeedFromInput+0x270>
    6202:	9f ef       	ldi	r25, 0xFF	; 255
    6204:	0f 3f       	cpi	r16, 0xFF	; 255
    6206:	19 07       	cpc	r17, r25
    6208:	09 f4       	brne	.+2      	; 0x620c <getLeftSpeedFromInput+0x270>
    620a:	ec c0       	rjmp	.+472    	; 0x63e4 <getLeftSpeedFromInput+0x448>
    620c:	80 91 2d 09 	lds	r24, 0x092D
    6210:	90 91 2e 09 	lds	r25, 0x092E
    6214:	8c 17       	cp	r24, r28
    6216:	9d 07       	cpc	r25, r29
    6218:	2c f0       	brlt	.+10     	; 0x6224 <getLeftSpeedFromInput+0x288>
    621a:	8f ef       	ldi	r24, 0xFF	; 255
    621c:	0f 3f       	cpi	r16, 0xFF	; 255
    621e:	18 07       	cpc	r17, r24
    6220:	09 f4       	brne	.+2      	; 0x6224 <getLeftSpeedFromInput+0x288>
    6222:	dd c0       	rjmp	.+442    	; 0x63de <getLeftSpeedFromInput+0x442>
    6224:	80 91 3d 09 	lds	r24, 0x093D
    6228:	90 91 3e 09 	lds	r25, 0x093E
    622c:	8c 17       	cp	r24, r28
    622e:	9d 07       	cpc	r25, r29
    6230:	2c f0       	brlt	.+10     	; 0x623c <getLeftSpeedFromInput+0x2a0>
    6232:	9f ef       	ldi	r25, 0xFF	; 255
    6234:	0f 3f       	cpi	r16, 0xFF	; 255
    6236:	19 07       	cpc	r17, r25
    6238:	09 f4       	brne	.+2      	; 0x623c <getLeftSpeedFromInput+0x2a0>
    623a:	ce c0       	rjmp	.+412    	; 0x63d8 <getLeftSpeedFromInput+0x43c>
    623c:	e0 90 4d 09 	lds	r14, 0x094D
    6240:	f0 90 4e 09 	lds	r15, 0x094E
    6244:	ec 16       	cp	r14, r28
    6246:	fd 06       	cpc	r15, r29
    6248:	2c f0       	brlt	.+10     	; 0x6254 <getLeftSpeedFromInput+0x2b8>
    624a:	8f ef       	ldi	r24, 0xFF	; 255
    624c:	0f 3f       	cpi	r16, 0xFF	; 255
    624e:	18 07       	cpc	r17, r24
    6250:	09 f4       	brne	.+2      	; 0x6254 <getLeftSpeedFromInput+0x2b8>
    6252:	bf c0       	rjmp	.+382    	; 0x63d2 <getLeftSpeedFromInput+0x436>
            } else {
                speedLeftFromEnc = calibration[indFwL-1][1] + (signed int)(((float)(last_left_vel-calibration[indFwL-1][0])*(float)(calibration[indFwL][1]-calibration[indFwL-1][1]))/(float)(calibration[indFwL][0]-calibration[indFwL-1][0]));
            }
        }
    } else {
		if(indBwL==0) {  // the velocity is lower than first saved in the matrix
    6254:	01 15       	cp	r16, r1
    6256:	11 05       	cpc	r17, r1
    6258:	09 f0       	breq	.+2      	; 0x625c <getLeftSpeedFromInput+0x2c0>
    625a:	6e c0       	rjmp	.+220    	; 0x6338 <getLeftSpeedFromInput+0x39c>
        	speedLeftFromEnc = (last_left_vel*calibration[0][5])/calibration[0][4];
    625c:	20 91 cf 08 	lds	r18, 0x08CF
    6260:	30 91 d0 08 	lds	r19, 0x08D0
    6264:	c2 9f       	mul	r28, r18
    6266:	c0 01       	movw	r24, r0
    6268:	c3 9f       	mul	r28, r19
    626a:	90 0d       	add	r25, r0
    626c:	d2 9f       	mul	r29, r18
    626e:	90 0d       	add	r25, r0
    6270:	11 24       	eor	r1, r1
    6272:	0e 94 a6 51 	call	0xa34c	; 0xa34c <__divmodhi4>
		} else if(indBwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][5]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][4]);  // take the max
		} else {
        	speedLeftFromEnc = calibration[indBwL-1][5] + (signed int)(((float)(last_left_vel-calibration[indBwL-1][4])*(float)(calibration[indBwL][5]-calibration[indBwL-1][5]))/(float)(calibration[indBwL][4]-calibration[indBwL-1][4]));
		}
		speedLeftFromEnc = -speedLeftFromEnc;
    6276:	70 95       	com	r23
    6278:	61 95       	neg	r22
    627a:	7f 4f       	sbci	r23, 0xFF	; 255
    627c:	70 93 b9 04 	sts	0x04B9, r23
    6280:	60 93 b8 04 	sts	0x04B8, r22
    6284:	6d cf       	rjmp	.-294    	; 0x6160 <getLeftSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    6286:	00 e0       	ldi	r16, 0x00	; 0
    6288:	10 e0       	ldi	r17, 0x00	; 0
    628a:	81 cf       	rjmp	.-254    	; 0x618e <getLeftSpeedFromInput+0x1f2>
            speedLeftFromEnc = 0;
        } else {
            if(indFwL==0) {  // the velocity is lower than first saved in the matrix
                speedLeftFromEnc = (last_left_vel*calibration[0][1])/calibration[0][0];
            } else if(indFwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
                speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][1]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][0]);  // take the max
    628c:	60 91 47 09 	lds	r22, 0x0947
    6290:	70 91 48 09 	lds	r23, 0x0948
    6294:	88 27       	eor	r24, r24
    6296:	77 fd       	sbrc	r23, 7
    6298:	80 95       	com	r24
    629a:	98 2f       	mov	r25, r24
    629c:	0e 94 d3 4f 	call	0x9fa6	; 0x9fa6 <__floatsisf>
    62a0:	5b 01       	movw	r10, r22
    62a2:	6c 01       	movw	r12, r24
    62a4:	be 01       	movw	r22, r28
    62a6:	88 27       	eor	r24, r24
    62a8:	77 fd       	sbrc	r23, 7
    62aa:	80 95       	com	r24
    62ac:	98 2f       	mov	r25, r24
    62ae:	0e 94 d3 4f 	call	0x9fa6	; 0x9fa6 <__floatsisf>
    62b2:	9b 01       	movw	r18, r22
    62b4:	ac 01       	movw	r20, r24
    62b6:	c6 01       	movw	r24, r12
    62b8:	b5 01       	movw	r22, r10
    62ba:	0e 94 e8 50 	call	0xa1d0	; 0xa1d0 <__mulsf3>
    62be:	5b 01       	movw	r10, r22
    62c0:	6c 01       	movw	r12, r24
    62c2:	b7 01       	movw	r22, r14
    62c4:	88 27       	eor	r24, r24
    62c6:	77 fd       	sbrc	r23, 7
    62c8:	80 95       	com	r24
    62ca:	98 2f       	mov	r25, r24
    62cc:	0e 94 d3 4f 	call	0x9fa6	; 0x9fa6 <__floatsisf>
    62d0:	9b 01       	movw	r18, r22
    62d2:	ac 01       	movw	r20, r24
    62d4:	c6 01       	movw	r24, r12
    62d6:	b5 01       	movw	r22, r10
    62d8:	0e 94 38 4f 	call	0x9e70	; 0x9e70 <__divsf3>
    62dc:	0e 94 a0 4f 	call	0x9f40	; 0x9f40 <__fixsfsi>
    62e0:	70 93 b9 04 	sts	0x04B9, r23
    62e4:	60 93 b8 04 	sts	0x04B8, r22
    62e8:	3b cf       	rjmp	.-394    	; 0x6160 <getLeftSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    62ea:	02 e0       	ldi	r16, 0x02	; 2
    62ec:	10 e0       	ldi	r17, 0x00	; 0
    62ee:	91 ce       	rjmp	.-734    	; 0x6012 <getLeftSpeedFromInput+0x76>
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    62f0:	08 e0       	ldi	r16, 0x08	; 8
    62f2:	10 e0       	ldi	r17, 0x00	; 0
    62f4:	d6 ce       	rjmp	.-596    	; 0x60a2 <getLeftSpeedFromInput+0x106>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    62f6:	07 e0       	ldi	r16, 0x07	; 7
    62f8:	10 e0       	ldi	r17, 0x00	; 0
    62fa:	c7 ce       	rjmp	.-626    	; 0x608a <getLeftSpeedFromInput+0xee>
    62fc:	06 e0       	ldi	r16, 0x06	; 6
    62fe:	10 e0       	ldi	r17, 0x00	; 0
    6300:	b8 ce       	rjmp	.-656    	; 0x6072 <getLeftSpeedFromInput+0xd6>
    6302:	05 e0       	ldi	r16, 0x05	; 5
    6304:	10 e0       	ldi	r17, 0x00	; 0
    6306:	a9 ce       	rjmp	.-686    	; 0x605a <getLeftSpeedFromInput+0xbe>
    6308:	04 e0       	ldi	r16, 0x04	; 4
    630a:	10 e0       	ldi	r17, 0x00	; 0
    630c:	9a ce       	rjmp	.-716    	; 0x6042 <getLeftSpeedFromInput+0xa6>
    630e:	03 e0       	ldi	r16, 0x03	; 3
    6310:	10 e0       	ldi	r17, 0x00	; 0
    6312:	8b ce       	rjmp	.-746    	; 0x602a <getLeftSpeedFromInput+0x8e>
    if(pwm_left >= 0) {
        if(last_left_vel == 0) {
            speedLeftFromEnc = 0;
        } else {
            if(indFwL==0) {  // the velocity is lower than first saved in the matrix
                speedLeftFromEnc = (last_left_vel*calibration[0][1])/calibration[0][0];
    6314:	20 91 c7 08 	lds	r18, 0x08C7
    6318:	30 91 c8 08 	lds	r19, 0x08C8
    631c:	c2 9f       	mul	r28, r18
    631e:	c0 01       	movw	r24, r0
    6320:	c3 9f       	mul	r28, r19
    6322:	90 0d       	add	r25, r0
    6324:	d2 9f       	mul	r29, r18
    6326:	90 0d       	add	r25, r0
    6328:	11 24       	eor	r1, r1
    632a:	0e 94 a6 51 	call	0xa34c	; 0xa34c <__divmodhi4>
    632e:	70 93 b9 04 	sts	0x04B9, r23
    6332:	60 93 b8 04 	sts	0x04B8, r22
    6336:	14 cf       	rjmp	.-472    	; 0x6160 <getLeftSpeedFromInput+0x1c4>
            }
        }
    } else {
		if(indBwL==0) {  // the velocity is lower than first saved in the matrix
        	speedLeftFromEnc = (last_left_vel*calibration[0][5])/calibration[0][4];
		} else if(indBwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    6338:	8f ef       	ldi	r24, 0xFF	; 255
    633a:	0f 3f       	cpi	r16, 0xFF	; 255
    633c:	18 07       	cpc	r17, r24
    633e:	09 f4       	brne	.+2      	; 0x6342 <getLeftSpeedFromInput+0x3a6>
    6340:	5d c0       	rjmp	.+186    	; 0x63fc <getLeftSpeedFromInput+0x460>
        	speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][5]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][4]);  // take the max
		} else {
        	speedLeftFromEnc = calibration[indBwL-1][5] + (signed int)(((float)(last_left_vel-calibration[indBwL-1][4])*(float)(calibration[indBwL][5]-calibration[indBwL-1][5]))/(float)(calibration[indBwL][4]-calibration[indBwL-1][4]));
    6342:	f8 01       	movw	r30, r16
    6344:	e2 95       	swap	r30
    6346:	f2 95       	swap	r31
    6348:	f0 7f       	andi	r31, 0xF0	; 240
    634a:	fe 27       	eor	r31, r30
    634c:	e0 7f       	andi	r30, 0xF0	; 240
    634e:	fe 27       	eor	r31, r30
    6350:	eb 54       	subi	r30, 0x4B	; 75
    6352:	f7 4f       	sbci	r31, 0xF7	; 247
    6354:	a0 84       	ldd	r10, Z+8	; 0x08
    6356:	b1 84       	ldd	r11, Z+9	; 0x09
    6358:	82 84       	ldd	r8, Z+10	; 0x0a
    635a:	93 84       	ldd	r9, Z+11	; 0x0b
    635c:	ca 19       	sub	r28, r10
    635e:	db 09       	sbc	r29, r11
    6360:	be 01       	movw	r22, r28
    6362:	88 27       	eor	r24, r24
    6364:	77 fd       	sbrc	r23, 7
    6366:	80 95       	com	r24
    6368:	98 2f       	mov	r25, r24
    636a:	0e 94 d3 4f 	call	0x9fa6	; 0x9fa6 <__floatsisf>
    636e:	6b 01       	movw	r12, r22
    6370:	7c 01       	movw	r14, r24
    6372:	e8 01       	movw	r28, r16
    6374:	c2 95       	swap	r28
    6376:	d2 95       	swap	r29
    6378:	d0 7f       	andi	r29, 0xF0	; 240
    637a:	dc 27       	eor	r29, r28
    637c:	c0 7f       	andi	r28, 0xF0	; 240
    637e:	dc 27       	eor	r29, r28
    6380:	cb 53       	subi	r28, 0x3B	; 59
    6382:	d7 4f       	sbci	r29, 0xF7	; 247
    6384:	6a 85       	ldd	r22, Y+10	; 0x0a
    6386:	7b 85       	ldd	r23, Y+11	; 0x0b
    6388:	68 19       	sub	r22, r8
    638a:	79 09       	sbc	r23, r9
    638c:	88 27       	eor	r24, r24
    638e:	77 fd       	sbrc	r23, 7
    6390:	80 95       	com	r24
    6392:	98 2f       	mov	r25, r24
    6394:	0e 94 d3 4f 	call	0x9fa6	; 0x9fa6 <__floatsisf>
    6398:	9b 01       	movw	r18, r22
    639a:	ac 01       	movw	r20, r24
    639c:	c7 01       	movw	r24, r14
    639e:	b6 01       	movw	r22, r12
    63a0:	0e 94 e8 50 	call	0xa1d0	; 0xa1d0 <__mulsf3>
    63a4:	7b 01       	movw	r14, r22
    63a6:	8c 01       	movw	r16, r24
    63a8:	68 85       	ldd	r22, Y+8	; 0x08
    63aa:	79 85       	ldd	r23, Y+9	; 0x09
    63ac:	6a 19       	sub	r22, r10
    63ae:	7b 09       	sbc	r23, r11
    63b0:	88 27       	eor	r24, r24
    63b2:	77 fd       	sbrc	r23, 7
    63b4:	80 95       	com	r24
    63b6:	98 2f       	mov	r25, r24
    63b8:	0e 94 d3 4f 	call	0x9fa6	; 0x9fa6 <__floatsisf>
    63bc:	9b 01       	movw	r18, r22
    63be:	ac 01       	movw	r20, r24
    63c0:	c8 01       	movw	r24, r16
    63c2:	b7 01       	movw	r22, r14
    63c4:	0e 94 38 4f 	call	0x9e70	; 0x9e70 <__divsf3>
    63c8:	0e 94 a0 4f 	call	0x9f40	; 0x9f40 <__fixsfsi>
    63cc:	68 0d       	add	r22, r8
    63ce:	79 1d       	adc	r23, r9
    63d0:	52 cf       	rjmp	.-348    	; 0x6276 <getLeftSpeedFromInput+0x2da>
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    63d2:	08 e0       	ldi	r16, 0x08	; 8
    63d4:	10 e0       	ldi	r17, 0x00	; 0
    63d6:	3e cf       	rjmp	.-388    	; 0x6254 <getLeftSpeedFromInput+0x2b8>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    63d8:	07 e0       	ldi	r16, 0x07	; 7
    63da:	10 e0       	ldi	r17, 0x00	; 0
    63dc:	2f cf       	rjmp	.-418    	; 0x623c <getLeftSpeedFromInput+0x2a0>
    63de:	06 e0       	ldi	r16, 0x06	; 6
    63e0:	10 e0       	ldi	r17, 0x00	; 0
    63e2:	20 cf       	rjmp	.-448    	; 0x6224 <getLeftSpeedFromInput+0x288>
    63e4:	05 e0       	ldi	r16, 0x05	; 5
    63e6:	10 e0       	ldi	r17, 0x00	; 0
    63e8:	11 cf       	rjmp	.-478    	; 0x620c <getLeftSpeedFromInput+0x270>
    63ea:	04 e0       	ldi	r16, 0x04	; 4
    63ec:	10 e0       	ldi	r17, 0x00	; 0
    63ee:	02 cf       	rjmp	.-508    	; 0x61f4 <getLeftSpeedFromInput+0x258>
    63f0:	03 e0       	ldi	r16, 0x03	; 3
    63f2:	10 e0       	ldi	r17, 0x00	; 0
    63f4:	f3 ce       	rjmp	.-538    	; 0x61dc <getLeftSpeedFromInput+0x240>
    63f6:	02 e0       	ldi	r16, 0x02	; 2
    63f8:	10 e0       	ldi	r17, 0x00	; 0
    63fa:	e4 ce       	rjmp	.-568    	; 0x61c4 <getLeftSpeedFromInput+0x228>
        }
    } else {
		if(indBwL==0) {  // the velocity is lower than first saved in the matrix
        	speedLeftFromEnc = (last_left_vel*calibration[0][5])/calibration[0][4];
		} else if(indBwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][5]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][4]);  // take the max
    63fc:	60 91 4f 09 	lds	r22, 0x094F
    6400:	70 91 50 09 	lds	r23, 0x0950
    6404:	88 27       	eor	r24, r24
    6406:	77 fd       	sbrc	r23, 7
    6408:	80 95       	com	r24
    640a:	98 2f       	mov	r25, r24
    640c:	0e 94 d3 4f 	call	0x9fa6	; 0x9fa6 <__floatsisf>
    6410:	5b 01       	movw	r10, r22
    6412:	6c 01       	movw	r12, r24
    6414:	be 01       	movw	r22, r28
    6416:	88 27       	eor	r24, r24
    6418:	77 fd       	sbrc	r23, 7
    641a:	80 95       	com	r24
    641c:	98 2f       	mov	r25, r24
    641e:	0e 94 d3 4f 	call	0x9fa6	; 0x9fa6 <__floatsisf>
    6422:	9b 01       	movw	r18, r22
    6424:	ac 01       	movw	r20, r24
    6426:	c6 01       	movw	r24, r12
    6428:	b5 01       	movw	r22, r10
    642a:	0e 94 e8 50 	call	0xa1d0	; 0xa1d0 <__mulsf3>
    642e:	5b 01       	movw	r10, r22
    6430:	6c 01       	movw	r12, r24
    6432:	b7 01       	movw	r22, r14
    6434:	88 27       	eor	r24, r24
    6436:	77 fd       	sbrc	r23, 7
    6438:	80 95       	com	r24
    643a:	98 2f       	mov	r25, r24
    643c:	0e 94 d3 4f 	call	0x9fa6	; 0x9fa6 <__floatsisf>
    6440:	9b 01       	movw	r18, r22
    6442:	ac 01       	movw	r20, r24
    6444:	c6 01       	movw	r24, r12
    6446:	b5 01       	movw	r22, r10
    6448:	0e 94 38 4f 	call	0x9e70	; 0x9e70 <__divsf3>
    644c:	0e 94 a0 4f 	call	0x9f40	; 0x9f40 <__fixsfsi>
    6450:	12 cf       	rjmp	.-476    	; 0x6276 <getLeftSpeedFromInput+0x2da>

00006452 <handleMotorsWithSpeedController>:
		OCR4B = 0;
	}

}

void handleMotorsWithSpeedController() {
    6452:	2f 92       	push	r2
    6454:	3f 92       	push	r3
    6456:	4f 92       	push	r4
    6458:	5f 92       	push	r5
    645a:	6f 92       	push	r6
    645c:	7f 92       	push	r7
    645e:	8f 92       	push	r8
    6460:	9f 92       	push	r9
    6462:	af 92       	push	r10
    6464:	bf 92       	push	r11
    6466:	cf 92       	push	r12
    6468:	df 92       	push	r13
    646a:	ef 92       	push	r14
    646c:	ff 92       	push	r15
    646e:	0f 93       	push	r16
    6470:	1f 93       	push	r17

	if(calibrateOdomFlag==1) {
    6472:	80 91 4f 05 	lds	r24, 0x054F
    6476:	81 30       	cpi	r24, 0x01	; 1
    6478:	09 f4       	brne	.+2      	; 0x647c <handleMotorsWithSpeedController+0x2a>
    647a:	28 c2       	rjmp	.+1104   	; 0x68cc <handleMotorsWithSpeedController+0x47a>
		pwm_right_working = pwm_intermediate_right_desired;
		pwm_left_working = pwm_intermediate_left_desired;
	} else {
		if(pwm_intermediate_right_desired >= 0) {		// pwm in the range -127..127
    647c:	80 91 fd 02 	lds	r24, 0x02FD
    6480:	90 91 fe 02 	lds	r25, 0x02FE
    6484:	97 fd       	sbrc	r25, 7
    6486:	9a c2       	rjmp	.+1332   	; 0x69bc <handleMotorsWithSpeedController+0x56a>
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_FW_SC);
    6488:	61 e0       	ldi	r22, 0x01	; 1
    648a:	0e 94 0b 2a 	call	0x5416	; 0x5416 <getInputFromSpeed>
    648e:	90 93 0e 03 	sts	0x030E, r25
    6492:	80 93 0d 03 	sts	0x030D, r24
		} else {
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_BW_SC);
		}
		if(pwm_intermediate_left_desired >= 0) {		// pwm in the range -127..127
    6496:	80 91 ff 02 	lds	r24, 0x02FF
    649a:	90 91 00 03 	lds	r25, 0x0300
    649e:	97 fd       	sbrc	r25, 7
    64a0:	85 c2       	rjmp	.+1290   	; 0x69ac <handleMotorsWithSpeedController+0x55a>
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_FW_SC);
    64a2:	60 e0       	ldi	r22, 0x00	; 0
    64a4:	0e 94 0b 2a 	call	0x5416	; 0x5416 <getInputFromSpeed>
    64a8:	90 93 10 03 	sts	0x0310, r25
    64ac:	80 93 0f 03 	sts	0x030F, r24
		} else {
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_BW_SC);
		}
	}

	if(obstacleAvoidanceEnabled) {
    64b0:	20 91 6c 04 	lds	r18, 0x046C
    64b4:	22 23       	and	r18, r18
    64b6:	09 f0       	breq	.+2      	; 0x64ba <handleMotorsWithSpeedController+0x68>
    64b8:	fe c1       	rjmp	.+1020   	; 0x68b6 <handleMotorsWithSpeedController+0x464>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
	}
	pwm_left_desired_to_control = pwm_left_working;
    64ba:	90 93 ec 02 	sts	0x02EC, r25
    64be:	80 93 eb 02 	sts	0x02EB, r24
	pwm_right_desired_to_control = pwm_right_working;
    64c2:	80 91 0d 03 	lds	r24, 0x030D
    64c6:	90 91 0e 03 	lds	r25, 0x030E
    64ca:	90 93 ea 02 	sts	0x02EA, r25
    64ce:	80 93 e9 02 	sts	0x02E9, r24

	if(compute_left_vel) {
    64d2:	80 91 07 02 	lds	r24, 0x0207
    64d6:	88 23       	and	r24, r24
    64d8:	09 f4       	brne	.+2      	; 0x64dc <handleMotorsWithSpeedController+0x8a>
    64da:	93 c0       	rjmp	.+294    	; 0x6602 <handleMotorsWithSpeedController+0x1b0>

		last_left_vel = left_vel_sum>>2;
    64dc:	20 91 ed 02 	lds	r18, 0x02ED
    64e0:	30 91 ee 02 	lds	r19, 0x02EE
    64e4:	36 95       	lsr	r19
    64e6:	27 95       	ror	r18
    64e8:	36 95       	lsr	r19
    64ea:	27 95       	ror	r18
    64ec:	30 93 f2 02 	sts	0x02F2, r19
    64f0:	20 93 f1 02 	sts	0x02F1, r18
		compute_left_vel = 0;
    64f4:	10 92 07 02 	sts	0x0207, r1
		left_vel_sum = 0;
    64f8:	10 92 ee 02 	sts	0x02EE, r1
    64fc:	10 92 ed 02 	sts	0x02ED, r1
		
		if(calibrateOdomFlag==1) {
    6500:	80 91 4f 05 	lds	r24, 0x054F
    6504:	81 30       	cpi	r24, 0x01	; 1
    6506:	09 f4       	brne	.+2      	; 0x650a <handleMotorsWithSpeedController+0xb8>
    6508:	08 c2       	rjmp	.+1040   	; 0x691a <handleMotorsWithSpeedController+0x4c8>
			leftSpeedSumOdom += last_left_vel;
			leftSumCount++;
		}

		getLeftSpeedFromInput();	// get speed in mm/s
    650a:	0e 94 ce 2f 	call	0x5f9c	; 0x5f9c <getLeftSpeedFromInput>
		leftDistPrev = leftDist;
    650e:	80 91 93 04 	lds	r24, 0x0493
    6512:	90 91 94 04 	lds	r25, 0x0494
    6516:	a0 91 95 04 	lds	r26, 0x0495
    651a:	b0 91 96 04 	lds	r27, 0x0496
    651e:	80 93 9b 04 	sts	0x049B, r24
    6522:	90 93 9c 04 	sts	0x049C, r25
    6526:	a0 93 9d 04 	sts	0x049D, r26
    652a:	b0 93 9e 04 	sts	0x049E, r27
		//timeOdometry = getTime100MicroSec()-timeLeftOdom;
		leftDist += ((float)speedLeftFromEnc*((float)(getTime100MicroSec()-timeLeftOdom)*104.0))/1000000.0;	// distance in mm				
    652e:	60 91 b8 04 	lds	r22, 0x04B8
    6532:	70 91 b9 04 	lds	r23, 0x04B9
    6536:	88 27       	eor	r24, r24
    6538:	77 fd       	sbrc	r23, 7
    653a:	80 95       	com	r24
    653c:	98 2f       	mov	r25, r24
    653e:	0e 94 d3 4f 	call	0x9fa6	; 0x9fa6 <__floatsisf>
    6542:	7b 01       	movw	r14, r22
    6544:	8c 01       	movw	r16, r24
    6546:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <getTime100MicroSec>
    654a:	20 91 bc 04 	lds	r18, 0x04BC
    654e:	30 91 bd 04 	lds	r19, 0x04BD
    6552:	40 91 be 04 	lds	r20, 0x04BE
    6556:	50 91 bf 04 	lds	r21, 0x04BF
    655a:	62 1b       	sub	r22, r18
    655c:	73 0b       	sbc	r23, r19
    655e:	84 0b       	sbc	r24, r20
    6560:	95 0b       	sbc	r25, r21
    6562:	0e 94 d1 4f 	call	0x9fa2	; 0x9fa2 <__floatunsisf>
    6566:	20 e0       	ldi	r18, 0x00	; 0
    6568:	30 e0       	ldi	r19, 0x00	; 0
    656a:	40 ed       	ldi	r20, 0xD0	; 208
    656c:	52 e4       	ldi	r21, 0x42	; 66
    656e:	0e 94 e8 50 	call	0xa1d0	; 0xa1d0 <__mulsf3>
    6572:	9b 01       	movw	r18, r22
    6574:	ac 01       	movw	r20, r24
    6576:	c8 01       	movw	r24, r16
    6578:	b7 01       	movw	r22, r14
    657a:	0e 94 e8 50 	call	0xa1d0	; 0xa1d0 <__mulsf3>
    657e:	20 e0       	ldi	r18, 0x00	; 0
    6580:	34 e2       	ldi	r19, 0x24	; 36
    6582:	44 e7       	ldi	r20, 0x74	; 116
    6584:	59 e4       	ldi	r21, 0x49	; 73
    6586:	0e 94 38 4f 	call	0x9e70	; 0x9e70 <__divsf3>
    658a:	9b 01       	movw	r18, r22
    658c:	ac 01       	movw	r20, r24
    658e:	60 91 93 04 	lds	r22, 0x0493
    6592:	70 91 94 04 	lds	r23, 0x0494
    6596:	80 91 95 04 	lds	r24, 0x0495
    659a:	90 91 96 04 	lds	r25, 0x0496
    659e:	0e 94 6b 4e 	call	0x9cd6	; 0x9cd6 <__addsf3>
    65a2:	60 93 93 04 	sts	0x0493, r22
    65a6:	70 93 94 04 	sts	0x0494, r23
    65aa:	80 93 95 04 	sts	0x0495, r24
    65ae:	90 93 96 04 	sts	0x0496, r25
		timeLeftOdom = getTime100MicroSec();
    65b2:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <getTime100MicroSec>
    65b6:	60 93 bc 04 	sts	0x04BC, r22
    65ba:	70 93 bd 04 	sts	0x04BD, r23
    65be:	80 93 be 04 	sts	0x04BE, r24
    65c2:	90 93 bf 04 	sts	0x04BF, r25
		} else {
			leftMotSteps -= ((float)(last_left_vel>>3))*(LEFT_ENC_OFFSET-ENC_SLOPE*((float)(last_left_vel>>2)))/1000.0;
		}

*/
		if(robotPosition == HORIZONTAL_POS) {
    65c6:	80 91 16 02 	lds	r24, 0x0216
    65ca:	81 30       	cpi	r24, 0x01	; 1
    65cc:	09 f4       	brne	.+2      	; 0x65d0 <handleMotorsWithSpeedController+0x17e>
    65ce:	c7 c1       	rjmp	.+910    	; 0x695e <handleMotorsWithSpeedController+0x50c>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_left(&pwm_left_working);
			//PORTB |= (1 << 5);
		} else {
			//PORTB &= ~(1 << 6);
			start_vertical_speed_control_left(&pwm_left_working);
    65d0:	8f e0       	ldi	r24, 0x0F	; 15
    65d2:	93 e0       	ldi	r25, 0x03	; 3
    65d4:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <start_vertical_speed_control_left>
			//PORTB |= (1 << 6);
		}

		pwm_left = pwm_left_working;
    65d8:	80 91 0f 03 	lds	r24, 0x030F
    65dc:	90 91 10 03 	lds	r25, 0x0310
    65e0:	90 93 f8 02 	sts	0x02F8, r25
    65e4:	80 93 f7 02 	sts	0x02F7, r24

		if(pwm_left > 0) {
    65e8:	18 16       	cp	r1, r24
    65ea:	19 06       	cpc	r1, r25
    65ec:	0c f0       	brlt	.+2      	; 0x65f0 <handleMotorsWithSpeedController+0x19e>
    65ee:	f9 c1       	rjmp	.+1010   	; 0x69e2 <handleMotorsWithSpeedController+0x590>
			OCR4A = (unsigned int)pwm_left;
    65f0:	90 93 a9 00 	sts	0x00A9, r25
    65f4:	80 93 a8 00 	sts	0x00A8, r24
		} else {
			OCR4A = 0;
			OCR4B = 0;
		}

		computeOdometry++;
    65f8:	80 91 a3 04 	lds	r24, 0x04A3
    65fc:	8f 5f       	subi	r24, 0xFF	; 255
    65fe:	80 93 a3 04 	sts	0x04A3, r24

	}

	if(compute_right_vel) {
    6602:	80 91 08 02 	lds	r24, 0x0208
    6606:	88 23       	and	r24, r24
    6608:	09 f0       	breq	.+2      	; 0x660c <handleMotorsWithSpeedController+0x1ba>
    660a:	c1 c0       	rjmp	.+386    	; 0x678e <handleMotorsWithSpeedController+0x33c>
    660c:	80 91 a3 04 	lds	r24, 0x04A3

		computeOdometry++;

	}

	if(computeOdometry>=2) {	// compute odometry when we get the last encoders values for both wheels
    6610:	82 30       	cpi	r24, 0x02	; 2
    6612:	08 f4       	brcc	.+2      	; 0x6616 <handleMotorsWithSpeedController+0x1c4>
    6614:	ab c0       	rjmp	.+342    	; 0x676c <handleMotorsWithSpeedController+0x31a>

		// the odometry computation takes about 1 ms

		computeOdometry = 0;
    6616:	10 92 a3 04 	sts	0x04A3, r1

		deltaDist = ((rightDist-rightDistPrev)+(leftDist-leftDistPrev))/2.0;
    661a:	60 90 97 04 	lds	r6, 0x0497
    661e:	70 90 98 04 	lds	r7, 0x0498
    6622:	80 90 99 04 	lds	r8, 0x0499
    6626:	90 90 9a 04 	lds	r9, 0x049A
    662a:	20 90 93 04 	lds	r2, 0x0493
    662e:	30 90 94 04 	lds	r3, 0x0494
    6632:	40 90 95 04 	lds	r4, 0x0495
    6636:	50 90 96 04 	lds	r5, 0x0496
    663a:	c4 01       	movw	r24, r8
    663c:	b3 01       	movw	r22, r6
    663e:	20 91 9f 04 	lds	r18, 0x049F
    6642:	30 91 a0 04 	lds	r19, 0x04A0
    6646:	40 91 a1 04 	lds	r20, 0x04A1
    664a:	50 91 a2 04 	lds	r21, 0x04A2
    664e:	0e 94 6a 4e 	call	0x9cd4	; 0x9cd4 <__subsf3>
    6652:	7b 01       	movw	r14, r22
    6654:	8c 01       	movw	r16, r24
    6656:	c2 01       	movw	r24, r4
    6658:	b1 01       	movw	r22, r2
    665a:	20 91 9b 04 	lds	r18, 0x049B
    665e:	30 91 9c 04 	lds	r19, 0x049C
    6662:	40 91 9d 04 	lds	r20, 0x049D
    6666:	50 91 9e 04 	lds	r21, 0x049E
    666a:	0e 94 6a 4e 	call	0x9cd4	; 0x9cd4 <__subsf3>
    666e:	9b 01       	movw	r18, r22
    6670:	ac 01       	movw	r20, r24
    6672:	c8 01       	movw	r24, r16
    6674:	b7 01       	movw	r22, r14
    6676:	0e 94 6b 4e 	call	0x9cd6	; 0x9cd6 <__addsf3>
    667a:	20 e0       	ldi	r18, 0x00	; 0
    667c:	30 e0       	ldi	r19, 0x00	; 0
    667e:	40 e0       	ldi	r20, 0x00	; 0
    6680:	5f e3       	ldi	r21, 0x3F	; 63
    6682:	0e 94 e8 50 	call	0xa1d0	; 0xa1d0 <__mulsf3>
    6686:	d6 2e       	mov	r13, r22
    6688:	c7 2e       	mov	r12, r23
    668a:	b8 2e       	mov	r11, r24
    668c:	a9 2e       	mov	r10, r25
    668e:	a6 01       	movw	r20, r12
    6690:	95 01       	movw	r18, r10
    6692:	85 2f       	mov	r24, r21
    6694:	94 2f       	mov	r25, r20
    6696:	a3 2f       	mov	r26, r19
    6698:	b2 2f       	mov	r27, r18
    669a:	80 93 7f 04 	sts	0x047F, r24
    669e:	90 93 80 04 	sts	0x0480, r25
    66a2:	a0 93 81 04 	sts	0x0481, r26
    66a6:	b0 93 82 04 	sts	0x0482, r27

		if(robotPosition == HORIZONTAL_POS) {
    66aa:	80 91 16 02 	lds	r24, 0x0216
    66ae:	81 30       	cpi	r24, 0x01	; 1
    66b0:	09 f4       	brne	.+2      	; 0x66b4 <handleMotorsWithSpeedController+0x262>
    66b2:	1d c1       	rjmp	.+570    	; 0x68ee <handleMotorsWithSpeedController+0x49c>
			//thetaOld = (rightMotSteps - leftMotSteps)/WHEEL_DIST;	// radians
			theta = (rightDist-leftDist)/WHEEL_DIST;
		} else {
			//thetaOld = thetaAcc;
			theta = thetaAcc;
    66b4:	f0 90 a4 04 	lds	r15, 0x04A4
    66b8:	00 91 a5 04 	lds	r16, 0x04A5
    66bc:	10 91 a6 04 	lds	r17, 0x04A6
    66c0:	e0 90 a7 04 	lds	r14, 0x04A7
    66c4:	8f 2d       	mov	r24, r15
    66c6:	90 2f       	mov	r25, r16
    66c8:	a1 2f       	mov	r26, r17
    66ca:	be 2d       	mov	r27, r14
    66cc:	80 93 6f 04 	sts	0x046F, r24
    66d0:	90 93 70 04 	sts	0x0470, r25
    66d4:	a0 93 71 04 	sts	0x0471, r26
    66d8:	b0 93 72 04 	sts	0x0472, r27
		}

		//deltaDistOld = ((rightMotSteps-rightMotStepsOld)+(leftMotSteps-leftMotStepsOld))/2.0;

		xPos = xPos + cos(theta)*deltaDist;				
    66dc:	6f 2d       	mov	r22, r15
    66de:	70 2f       	mov	r23, r16
    66e0:	81 2f       	mov	r24, r17
    66e2:	9e 2d       	mov	r25, r14
    66e4:	0e 94 35 4f 	call	0x9e6a	; 0x9e6a <cos>
    66e8:	9b 01       	movw	r18, r22
    66ea:	ac 01       	movw	r20, r24
    66ec:	d6 01       	movw	r26, r12
    66ee:	f5 01       	movw	r30, r10
    66f0:	6b 2f       	mov	r22, r27
    66f2:	7c 2d       	mov	r23, r12
    66f4:	8f 2f       	mov	r24, r31
    66f6:	9a 2d       	mov	r25, r10
    66f8:	0e 94 e8 50 	call	0xa1d0	; 0xa1d0 <__mulsf3>
    66fc:	9b 01       	movw	r18, r22
    66fe:	ac 01       	movw	r20, r24
    6700:	60 91 77 04 	lds	r22, 0x0477
    6704:	70 91 78 04 	lds	r23, 0x0478
    6708:	80 91 79 04 	lds	r24, 0x0479
    670c:	90 91 7a 04 	lds	r25, 0x047A
    6710:	0e 94 6b 4e 	call	0x9cd6	; 0x9cd6 <__addsf3>
    6714:	60 93 77 04 	sts	0x0477, r22
    6718:	70 93 78 04 	sts	0x0478, r23
    671c:	80 93 79 04 	sts	0x0479, r24
    6720:	90 93 7a 04 	sts	0x047A, r25
		yPos = yPos + sin(theta)*deltaDist;
    6724:	6f 2d       	mov	r22, r15
    6726:	70 2f       	mov	r23, r16
    6728:	81 2f       	mov	r24, r17
    672a:	9e 2d       	mov	r25, r14
    672c:	0e 94 4b 51 	call	0xa296	; 0xa296 <sin>
    6730:	9b 01       	movw	r18, r22
    6732:	ac 01       	movw	r20, r24
    6734:	d6 01       	movw	r26, r12
    6736:	f5 01       	movw	r30, r10
    6738:	6b 2f       	mov	r22, r27
    673a:	7c 2d       	mov	r23, r12
    673c:	8f 2f       	mov	r24, r31
    673e:	9a 2d       	mov	r25, r10
    6740:	0e 94 e8 50 	call	0xa1d0	; 0xa1d0 <__mulsf3>
    6744:	9b 01       	movw	r18, r22
    6746:	ac 01       	movw	r20, r24
    6748:	60 91 7b 04 	lds	r22, 0x047B
    674c:	70 91 7c 04 	lds	r23, 0x047C
    6750:	80 91 7d 04 	lds	r24, 0x047D
    6754:	90 91 7e 04 	lds	r25, 0x047E
    6758:	0e 94 6b 4e 	call	0x9cd6	; 0x9cd6 <__addsf3>
    675c:	60 93 7b 04 	sts	0x047B, r22
    6760:	70 93 7c 04 	sts	0x047C, r23
    6764:	80 93 7d 04 	sts	0x047D, r24
    6768:	90 93 7e 04 	sts	0x047E, r25
		//xPosOld = xPosOld + cos(thetaOld)*deltaDistOld;				
		//yPosOld = yPosOld + sin(thetaOld)*deltaDistOld;

	}

}
    676c:	1f 91       	pop	r17
    676e:	0f 91       	pop	r16
    6770:	ff 90       	pop	r15
    6772:	ef 90       	pop	r14
    6774:	df 90       	pop	r13
    6776:	cf 90       	pop	r12
    6778:	bf 90       	pop	r11
    677a:	af 90       	pop	r10
    677c:	9f 90       	pop	r9
    677e:	8f 90       	pop	r8
    6780:	7f 90       	pop	r7
    6782:	6f 90       	pop	r6
    6784:	5f 90       	pop	r5
    6786:	4f 90       	pop	r4
    6788:	3f 90       	pop	r3
    678a:	2f 90       	pop	r2
    678c:	08 95       	ret

	}

	if(compute_right_vel) {

		last_right_vel = right_vel_sum>>2;
    678e:	20 91 ef 02 	lds	r18, 0x02EF
    6792:	30 91 f0 02 	lds	r19, 0x02F0
    6796:	36 95       	lsr	r19
    6798:	27 95       	ror	r18
    679a:	36 95       	lsr	r19
    679c:	27 95       	ror	r18
    679e:	30 93 f4 02 	sts	0x02F4, r19
    67a2:	20 93 f3 02 	sts	0x02F3, r18
		compute_right_vel = 0;
    67a6:	10 92 08 02 	sts	0x0208, r1
		right_vel_sum = 0;
    67aa:	10 92 f0 02 	sts	0x02F0, r1
    67ae:	10 92 ef 02 	sts	0x02EF, r1

		if(calibrateOdomFlag==1) {
    67b2:	80 91 4f 05 	lds	r24, 0x054F
    67b6:	81 30       	cpi	r24, 0x01	; 1
    67b8:	09 f4       	brne	.+2      	; 0x67bc <handleMotorsWithSpeedController+0x36a>
    67ba:	d6 c0       	rjmp	.+428    	; 0x6968 <handleMotorsWithSpeedController+0x516>
			rightSpeedSumOdom += last_right_vel;
			rightSumCount++;
		}

		getRightSpeedFromInput();
    67bc:	0e 94 73 2d 	call	0x5ae6	; 0x5ae6 <getRightSpeedFromInput>
		rightDistPrev = rightDist;
    67c0:	80 91 97 04 	lds	r24, 0x0497
    67c4:	90 91 98 04 	lds	r25, 0x0498
    67c8:	a0 91 99 04 	lds	r26, 0x0499
    67cc:	b0 91 9a 04 	lds	r27, 0x049A
    67d0:	80 93 9f 04 	sts	0x049F, r24
    67d4:	90 93 a0 04 	sts	0x04A0, r25
    67d8:	a0 93 a1 04 	sts	0x04A1, r26
    67dc:	b0 93 a2 04 	sts	0x04A2, r27
		rightDist += ((float)speedRightFromEnc*((float)(getTime100MicroSec()-timeRightOdom)*104.0))/1000000.0;	// distance in mm				
    67e0:	60 91 ba 04 	lds	r22, 0x04BA
    67e4:	70 91 bb 04 	lds	r23, 0x04BB
    67e8:	88 27       	eor	r24, r24
    67ea:	77 fd       	sbrc	r23, 7
    67ec:	80 95       	com	r24
    67ee:	98 2f       	mov	r25, r24
    67f0:	0e 94 d3 4f 	call	0x9fa6	; 0x9fa6 <__floatsisf>
    67f4:	7b 01       	movw	r14, r22
    67f6:	8c 01       	movw	r16, r24
    67f8:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <getTime100MicroSec>
    67fc:	20 91 c0 04 	lds	r18, 0x04C0
    6800:	30 91 c1 04 	lds	r19, 0x04C1
    6804:	40 91 c2 04 	lds	r20, 0x04C2
    6808:	50 91 c3 04 	lds	r21, 0x04C3
    680c:	62 1b       	sub	r22, r18
    680e:	73 0b       	sbc	r23, r19
    6810:	84 0b       	sbc	r24, r20
    6812:	95 0b       	sbc	r25, r21
    6814:	0e 94 d1 4f 	call	0x9fa2	; 0x9fa2 <__floatunsisf>
    6818:	20 e0       	ldi	r18, 0x00	; 0
    681a:	30 e0       	ldi	r19, 0x00	; 0
    681c:	40 ed       	ldi	r20, 0xD0	; 208
    681e:	52 e4       	ldi	r21, 0x42	; 66
    6820:	0e 94 e8 50 	call	0xa1d0	; 0xa1d0 <__mulsf3>
    6824:	9b 01       	movw	r18, r22
    6826:	ac 01       	movw	r20, r24
    6828:	c8 01       	movw	r24, r16
    682a:	b7 01       	movw	r22, r14
    682c:	0e 94 e8 50 	call	0xa1d0	; 0xa1d0 <__mulsf3>
    6830:	20 e0       	ldi	r18, 0x00	; 0
    6832:	34 e2       	ldi	r19, 0x24	; 36
    6834:	44 e7       	ldi	r20, 0x74	; 116
    6836:	59 e4       	ldi	r21, 0x49	; 73
    6838:	0e 94 38 4f 	call	0x9e70	; 0x9e70 <__divsf3>
    683c:	9b 01       	movw	r18, r22
    683e:	ac 01       	movw	r20, r24
    6840:	60 91 97 04 	lds	r22, 0x0497
    6844:	70 91 98 04 	lds	r23, 0x0498
    6848:	80 91 99 04 	lds	r24, 0x0499
    684c:	90 91 9a 04 	lds	r25, 0x049A
    6850:	0e 94 6b 4e 	call	0x9cd6	; 0x9cd6 <__addsf3>
    6854:	60 93 97 04 	sts	0x0497, r22
    6858:	70 93 98 04 	sts	0x0498, r23
    685c:	80 93 99 04 	sts	0x0499, r24
    6860:	90 93 9a 04 	sts	0x049A, r25
		timeRightOdom = getTime100MicroSec();
    6864:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <getTime100MicroSec>
    6868:	60 93 c0 04 	sts	0x04C0, r22
    686c:	70 93 c1 04 	sts	0x04C1, r23
    6870:	80 93 c2 04 	sts	0x04C2, r24
    6874:	90 93 c3 04 	sts	0x04C3, r25
		} else {
			rightMotSteps -= ((float)(last_right_vel>>3))*(RIGHT_ENC_OFFSET-ENC_SLOPE*((float)(last_right_vel>>2)))/1000.0;
		}
*/

		if(robotPosition == HORIZONTAL_POS) {
    6878:	80 91 16 02 	lds	r24, 0x0216
    687c:	81 30       	cpi	r24, 0x01	; 1
    687e:	09 f4       	brne	.+2      	; 0x6882 <handleMotorsWithSpeedController+0x430>
    6880:	47 c0       	rjmp	.+142    	; 0x6910 <handleMotorsWithSpeedController+0x4be>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_right(&pwm_right_working);
			//PORTB |= (1 << 5);
		} else {
			//PORTB &= ~(1 << 6);
			start_vertical_speed_control_right(&pwm_right_working);
    6882:	8d e0       	ldi	r24, 0x0D	; 13
    6884:	93 e0       	ldi	r25, 0x03	; 3
    6886:	0e 94 77 17 	call	0x2eee	; 0x2eee <start_vertical_speed_control_right>
			//PORTB |= (1 << 6);
		}

		pwm_right = pwm_right_working;
    688a:	80 91 0d 03 	lds	r24, 0x030D
    688e:	90 91 0e 03 	lds	r25, 0x030E
    6892:	90 93 f6 02 	sts	0x02F6, r25
    6896:	80 93 f5 02 	sts	0x02F5, r24

		if(pwm_right > 0) {
    689a:	18 16       	cp	r1, r24
    689c:	19 06       	cpc	r1, r25
    689e:	0c f0       	brlt	.+2      	; 0x68a2 <handleMotorsWithSpeedController+0x450>
    68a0:	95 c0       	rjmp	.+298    	; 0x69cc <handleMotorsWithSpeedController+0x57a>
			OCR3A = (unsigned int)pwm_right;
    68a2:	90 93 99 00 	sts	0x0099, r25
    68a6:	80 93 98 00 	sts	0x0098, r24
		} else {
			OCR3A = 0;
			OCR3B = 0;
		}

		computeOdometry++;
    68aa:	80 91 a3 04 	lds	r24, 0x04A3
    68ae:	8f 5f       	subi	r24, 0xFF	; 255
    68b0:	80 93 a3 04 	sts	0x04A3, r24
    68b4:	ad ce       	rjmp	.-678    	; 0x6610 <handleMotorsWithSpeedController+0x1be>
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_BW_SC);
		}
	}

	if(obstacleAvoidanceEnabled) {
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
    68b6:	8f e0       	ldi	r24, 0x0F	; 15
    68b8:	93 e0       	ldi	r25, 0x03	; 3
    68ba:	6d e0       	ldi	r22, 0x0D	; 13
    68bc:	73 e0       	ldi	r23, 0x03	; 3
    68be:	0e 94 5e 38 	call	0x70bc	; 0x70bc <obstacleAvoidance>
    68c2:	80 91 0f 03 	lds	r24, 0x030F
    68c6:	90 91 10 03 	lds	r25, 0x0310
    68ca:	f7 cd       	rjmp	.-1042   	; 0x64ba <handleMotorsWithSpeedController+0x68>
}

void handleMotorsWithSpeedController() {

	if(calibrateOdomFlag==1) {
		pwm_right_working = pwm_intermediate_right_desired;
    68cc:	80 91 fd 02 	lds	r24, 0x02FD
    68d0:	90 91 fe 02 	lds	r25, 0x02FE
    68d4:	90 93 0e 03 	sts	0x030E, r25
    68d8:	80 93 0d 03 	sts	0x030D, r24
		pwm_left_working = pwm_intermediate_left_desired;
    68dc:	80 91 ff 02 	lds	r24, 0x02FF
    68e0:	90 91 00 03 	lds	r25, 0x0300
    68e4:	90 93 10 03 	sts	0x0310, r25
    68e8:	80 93 0f 03 	sts	0x030F, r24
    68ec:	e1 cd       	rjmp	.-1086   	; 0x64b0 <handleMotorsWithSpeedController+0x5e>

		deltaDist = ((rightDist-rightDistPrev)+(leftDist-leftDistPrev))/2.0;

		if(robotPosition == HORIZONTAL_POS) {
			//thetaOld = (rightMotSteps - leftMotSteps)/WHEEL_DIST;	// radians
			theta = (rightDist-leftDist)/WHEEL_DIST;
    68ee:	c4 01       	movw	r24, r8
    68f0:	b3 01       	movw	r22, r6
    68f2:	a2 01       	movw	r20, r4
    68f4:	91 01       	movw	r18, r2
    68f6:	0e 94 6a 4e 	call	0x9cd4	; 0x9cd4 <__subsf3>
    68fa:	20 e0       	ldi	r18, 0x00	; 0
    68fc:	30 e0       	ldi	r19, 0x00	; 0
    68fe:	4e e1       	ldi	r20, 0x1E	; 30
    6900:	52 e4       	ldi	r21, 0x42	; 66
    6902:	0e 94 38 4f 	call	0x9e70	; 0x9e70 <__divsf3>
    6906:	f6 2e       	mov	r15, r22
    6908:	07 2f       	mov	r16, r23
    690a:	18 2f       	mov	r17, r24
    690c:	e9 2e       	mov	r14, r25
    690e:	da ce       	rjmp	.-588    	; 0x66c4 <handleMotorsWithSpeedController+0x272>
		}
*/

		if(robotPosition == HORIZONTAL_POS) {
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_right(&pwm_right_working);
    6910:	8d e0       	ldi	r24, 0x0D	; 13
    6912:	93 e0       	ldi	r25, 0x03	; 3
    6914:	0e 94 15 19 	call	0x322a	; 0x322a <start_horizontal_speed_control_right>
    6918:	b8 cf       	rjmp	.-144    	; 0x688a <handleMotorsWithSpeedController+0x438>
		last_left_vel = left_vel_sum>>2;
		compute_left_vel = 0;
		left_vel_sum = 0;
		
		if(calibrateOdomFlag==1) {
			leftSpeedSumOdom += last_left_vel;
    691a:	44 27       	eor	r20, r20
    691c:	37 fd       	sbrc	r19, 7
    691e:	40 95       	com	r20
    6920:	54 2f       	mov	r21, r20
    6922:	80 91 a8 04 	lds	r24, 0x04A8
    6926:	90 91 a9 04 	lds	r25, 0x04A9
    692a:	a0 91 aa 04 	lds	r26, 0x04AA
    692e:	b0 91 ab 04 	lds	r27, 0x04AB
    6932:	82 0f       	add	r24, r18
    6934:	93 1f       	adc	r25, r19
    6936:	a4 1f       	adc	r26, r20
    6938:	b5 1f       	adc	r27, r21
    693a:	80 93 a8 04 	sts	0x04A8, r24
    693e:	90 93 a9 04 	sts	0x04A9, r25
    6942:	a0 93 aa 04 	sts	0x04AA, r26
    6946:	b0 93 ab 04 	sts	0x04AB, r27
			leftSumCount++;
    694a:	80 91 b0 04 	lds	r24, 0x04B0
    694e:	90 91 b1 04 	lds	r25, 0x04B1
    6952:	01 96       	adiw	r24, 0x01	; 1
    6954:	90 93 b1 04 	sts	0x04B1, r25
    6958:	80 93 b0 04 	sts	0x04B0, r24
    695c:	d6 cd       	rjmp	.-1108   	; 0x650a <handleMotorsWithSpeedController+0xb8>
		}

*/
		if(robotPosition == HORIZONTAL_POS) {
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_left(&pwm_left_working);
    695e:	8f e0       	ldi	r24, 0x0F	; 15
    6960:	93 e0       	ldi	r25, 0x03	; 3
    6962:	0e 94 5c 1a 	call	0x34b8	; 0x34b8 <start_horizontal_speed_control_left>
    6966:	38 ce       	rjmp	.-912    	; 0x65d8 <handleMotorsWithSpeedController+0x186>
		last_right_vel = right_vel_sum>>2;
		compute_right_vel = 0;
		right_vel_sum = 0;

		if(calibrateOdomFlag==1) {
			rightSpeedSumOdom += last_right_vel;
    6968:	44 27       	eor	r20, r20
    696a:	37 fd       	sbrc	r19, 7
    696c:	40 95       	com	r20
    696e:	54 2f       	mov	r21, r20
    6970:	80 91 ac 04 	lds	r24, 0x04AC
    6974:	90 91 ad 04 	lds	r25, 0x04AD
    6978:	a0 91 ae 04 	lds	r26, 0x04AE
    697c:	b0 91 af 04 	lds	r27, 0x04AF
    6980:	82 0f       	add	r24, r18
    6982:	93 1f       	adc	r25, r19
    6984:	a4 1f       	adc	r26, r20
    6986:	b5 1f       	adc	r27, r21
    6988:	80 93 ac 04 	sts	0x04AC, r24
    698c:	90 93 ad 04 	sts	0x04AD, r25
    6990:	a0 93 ae 04 	sts	0x04AE, r26
    6994:	b0 93 af 04 	sts	0x04AF, r27
			rightSumCount++;
    6998:	80 91 b2 04 	lds	r24, 0x04B2
    699c:	90 91 b3 04 	lds	r25, 0x04B3
    69a0:	01 96       	adiw	r24, 0x01	; 1
    69a2:	90 93 b3 04 	sts	0x04B3, r25
    69a6:	80 93 b2 04 	sts	0x04B2, r24
    69aa:	08 cf       	rjmp	.-496    	; 0x67bc <handleMotorsWithSpeedController+0x36a>
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_BW_SC);
		}
		if(pwm_intermediate_left_desired >= 0) {		// pwm in the range -127..127
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_FW_SC);
		} else {
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_BW_SC);
    69ac:	62 e0       	ldi	r22, 0x02	; 2
    69ae:	0e 94 0b 2a 	call	0x5416	; 0x5416 <getInputFromSpeed>
    69b2:	90 93 10 03 	sts	0x0310, r25
    69b6:	80 93 0f 03 	sts	0x030F, r24
    69ba:	7a cd       	rjmp	.-1292   	; 0x64b0 <handleMotorsWithSpeedController+0x5e>
		pwm_left_working = pwm_intermediate_left_desired;
	} else {
		if(pwm_intermediate_right_desired >= 0) {		// pwm in the range -127..127
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_FW_SC);
		} else {
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_BW_SC);
    69bc:	63 e0       	ldi	r22, 0x03	; 3
    69be:	0e 94 0b 2a 	call	0x5416	; 0x5416 <getInputFromSpeed>
    69c2:	90 93 0e 03 	sts	0x030E, r25
    69c6:	80 93 0d 03 	sts	0x030D, r24
    69ca:	65 cd       	rjmp	.-1334   	; 0x6496 <handleMotorsWithSpeedController+0x44>

		pwm_right = pwm_right_working;

		if(pwm_right > 0) {
			OCR3A = (unsigned int)pwm_right;
		} else if(pwm_right < 0) {
    69cc:	00 97       	sbiw	r24, 0x00	; 0
    69ce:	a1 f4       	brne	.+40     	; 0x69f8 <handleMotorsWithSpeedController+0x5a6>
			OCR3B = (unsigned int)(-pwm_right);
		} else {
			OCR3A = 0;
    69d0:	10 92 99 00 	sts	0x0099, r1
    69d4:	10 92 98 00 	sts	0x0098, r1
			OCR3B = 0;
    69d8:	10 92 9b 00 	sts	0x009B, r1
    69dc:	10 92 9a 00 	sts	0x009A, r1
    69e0:	64 cf       	rjmp	.-312    	; 0x68aa <handleMotorsWithSpeedController+0x458>

		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
    69e2:	00 97       	sbiw	r24, 0x00	; 0
    69e4:	89 f4       	brne	.+34     	; 0x6a08 <handleMotorsWithSpeedController+0x5b6>
			OCR4B =(unsigned int)( -pwm_left);
		} else {
			OCR4A = 0;
    69e6:	10 92 a9 00 	sts	0x00A9, r1
    69ea:	10 92 a8 00 	sts	0x00A8, r1
			OCR4B = 0;
    69ee:	10 92 ab 00 	sts	0x00AB, r1
    69f2:	10 92 aa 00 	sts	0x00AA, r1
    69f6:	00 ce       	rjmp	.-1024   	; 0x65f8 <handleMotorsWithSpeedController+0x1a6>
		pwm_right = pwm_right_working;

		if(pwm_right > 0) {
			OCR3A = (unsigned int)pwm_right;
		} else if(pwm_right < 0) {
			OCR3B = (unsigned int)(-pwm_right);
    69f8:	90 95       	com	r25
    69fa:	81 95       	neg	r24
    69fc:	9f 4f       	sbci	r25, 0xFF	; 255
    69fe:	90 93 9b 00 	sts	0x009B, r25
    6a02:	80 93 9a 00 	sts	0x009A, r24
    6a06:	51 cf       	rjmp	.-350    	; 0x68aa <handleMotorsWithSpeedController+0x458>
		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
			OCR4B =(unsigned int)( -pwm_left);
    6a08:	90 95       	com	r25
    6a0a:	81 95       	neg	r24
    6a0c:	9f 4f       	sbci	r25, 0xFF	; 255
    6a0e:	90 93 ab 00 	sts	0x00AB, r25
    6a12:	80 93 aa 00 	sts	0x00AA, r24
    6a16:	f0 cd       	rjmp	.-1056   	; 0x65f8 <handleMotorsWithSpeedController+0x1a6>

00006a18 <writeDefaultCalibration>:
		speedLeftFromEnc = -speedLeftFromEnc;
    }
    
}

void writeDefaultCalibration() {
    6a18:	2f 92       	push	r2
    6a1a:	3f 92       	push	r3
    6a1c:	4f 92       	push	r4
    6a1e:	5f 92       	push	r5
    6a20:	6f 92       	push	r6
    6a22:	7f 92       	push	r7
    6a24:	8f 92       	push	r8
    6a26:	9f 92       	push	r9
    6a28:	af 92       	push	r10
    6a2a:	bf 92       	push	r11
    6a2c:	cf 92       	push	r12
    6a2e:	df 92       	push	r13
    6a30:	ef 92       	push	r14
    6a32:	ff 92       	push	r15
    6a34:	0f 93       	push	r16
    6a36:	1f 93       	push	r17
    6a38:	cf 93       	push	r28
    6a3a:	df 93       	push	r29
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    	calibration[i][0] = i+1;
	}
    // the following values are taken from a field test
    // forward left, speed control enabled
    calibration[0][0] = 20;		// measured speed with back EMF (adc 0..1023)
    6a3c:	a4 e1       	ldi	r26, 0x14	; 20
    6a3e:	b0 e0       	ldi	r27, 0x00	; 0
    6a40:	b0 93 c6 08 	sts	0x08C6, r27
    6a44:	a0 93 c5 08 	sts	0x08C5, r26
    calibration[1][0] = 40;
    6a48:	88 e2       	ldi	r24, 0x28	; 40
    6a4a:	90 e0       	ldi	r25, 0x00	; 0
    6a4c:	90 93 d6 08 	sts	0x08D6, r25
    6a50:	80 93 d5 08 	sts	0x08D5, r24
    calibration[2][0] = 59;
    6a54:	6b e3       	ldi	r22, 0x3B	; 59
    6a56:	70 e0       	ldi	r23, 0x00	; 0
    6a58:	70 93 e6 08 	sts	0x08E6, r23
    6a5c:	60 93 e5 08 	sts	0x08E5, r22
    calibration[3][0] = 79;
    6a60:	0f e4       	ldi	r16, 0x4F	; 79
    6a62:	10 e0       	ldi	r17, 0x00	; 0
    6a64:	10 93 f6 08 	sts	0x08F6, r17
    6a68:	00 93 f5 08 	sts	0x08F5, r16
    calibration[4][0] = 100;
    6a6c:	84 e6       	ldi	r24, 0x64	; 100
    6a6e:	90 e0       	ldi	r25, 0x00	; 0
    6a70:	90 93 06 09 	sts	0x0906, r25
    6a74:	80 93 05 09 	sts	0x0905, r24
    calibration[5][0] = 120;
    6a78:	f8 e7       	ldi	r31, 0x78	; 120
    6a7a:	af 2e       	mov	r10, r31
    6a7c:	b1 2c       	mov	r11, r1
    6a7e:	b0 92 16 09 	sts	0x0916, r11
    6a82:	a0 92 15 09 	sts	0x0915, r10
    calibration[6][0] = 139;
    6a86:	8b e8       	ldi	r24, 0x8B	; 139
    6a88:	90 e0       	ldi	r25, 0x00	; 0
    6a8a:	90 93 26 09 	sts	0x0926, r25
    6a8e:	80 93 25 09 	sts	0x0925, r24
    calibration[7][0] = 159;
    6a92:	2f e9       	ldi	r18, 0x9F	; 159
    6a94:	30 e0       	ldi	r19, 0x00	; 0
    6a96:	30 93 36 09 	sts	0x0936, r19
    6a9a:	20 93 35 09 	sts	0x0935, r18
	calibration[8][0] = 180;
    6a9e:	44 eb       	ldi	r20, 0xB4	; 180
    6aa0:	50 e0       	ldi	r21, 0x00	; 0
    6aa2:	50 93 46 09 	sts	0x0946, r21
    6aa6:	40 93 45 09 	sts	0x0945, r20
    calibration[0][1] = 19;    	// real speed measured in mm/s
    6aaa:	63 e1       	ldi	r22, 0x13	; 19
    6aac:	70 e0       	ldi	r23, 0x00	; 0
    6aae:	70 93 c8 08 	sts	0x08C8, r23
    6ab2:	60 93 c7 08 	sts	0x08C7, r22
    calibration[1][1] = 47;
    6ab6:	2f e2       	ldi	r18, 0x2F	; 47
    6ab8:	30 e0       	ldi	r19, 0x00	; 0
    6aba:	30 93 d8 08 	sts	0x08D8, r19
    6abe:	20 93 d7 08 	sts	0x08D7, r18
    calibration[2][1] = 72;
    6ac2:	28 e4       	ldi	r18, 0x48	; 72
    6ac4:	30 e0       	ldi	r19, 0x00	; 0
    6ac6:	30 93 e8 08 	sts	0x08E8, r19
    6aca:	20 93 e7 08 	sts	0x08E7, r18
    calibration[3][1] = 91;
    6ace:	2b e5       	ldi	r18, 0x5B	; 91
    6ad0:	30 e0       	ldi	r19, 0x00	; 0
    6ad2:	30 93 f8 08 	sts	0x08F8, r19
    6ad6:	20 93 f7 08 	sts	0x08F7, r18
    calibration[4][1] = 109;
    6ada:	2d e6       	ldi	r18, 0x6D	; 109
    6adc:	30 e0       	ldi	r19, 0x00	; 0
    6ade:	30 93 08 09 	sts	0x0908, r19
    6ae2:	20 93 07 09 	sts	0x0907, r18
    calibration[5][1] = 125;
    6ae6:	ed e7       	ldi	r30, 0x7D	; 125
    6ae8:	6e 2e       	mov	r6, r30
    6aea:	71 2c       	mov	r7, r1
    6aec:	70 92 18 09 	sts	0x0918, r7
    6af0:	60 92 17 09 	sts	0x0917, r6
    calibration[6][1] = 143;
    6af4:	2f e8       	ldi	r18, 0x8F	; 143
    6af6:	30 e0       	ldi	r19, 0x00	; 0
    6af8:	30 93 28 09 	sts	0x0928, r19
    6afc:	20 93 27 09 	sts	0x0927, r18
    calibration[7][1] = 160;
    6b00:	20 ea       	ldi	r18, 0xA0	; 160
    6b02:	30 e0       	ldi	r19, 0x00	; 0
    6b04:	30 93 38 09 	sts	0x0938, r19
    6b08:	20 93 37 09 	sts	0x0937, r18
	calibration[8][1] = 174;
    6b0c:	ee ea       	ldi	r30, 0xAE	; 174
    6b0e:	f0 e0       	ldi	r31, 0x00	; 0
    6b10:	f0 93 48 09 	sts	0x0948, r31
    6b14:	e0 93 47 09 	sts	0x0947, r30
    // forward right, speed control enabled
    calibration[0][2] = 19;		// measured speed with back EMF (adc 0..1023)
    6b18:	70 93 ca 08 	sts	0x08CA, r23
    6b1c:	60 93 c9 08 	sts	0x08C9, r22
    calibration[1][2] = 39;
    6b20:	e7 e2       	ldi	r30, 0x27	; 39
    6b22:	f0 e0       	ldi	r31, 0x00	; 0
    6b24:	f0 93 da 08 	sts	0x08DA, r31
    6b28:	e0 93 d9 08 	sts	0x08D9, r30
    calibration[2][2] = 60;
    6b2c:	cc e3       	ldi	r28, 0x3C	; 60
    6b2e:	d0 e0       	ldi	r29, 0x00	; 0
    6b30:	d0 93 ea 08 	sts	0x08EA, r29
    6b34:	c0 93 e9 08 	sts	0x08E9, r28
    calibration[3][2] = 80;
    6b38:	60 e5       	ldi	r22, 0x50	; 80
    6b3a:	70 e0       	ldi	r23, 0x00	; 0
    6b3c:	70 93 fa 08 	sts	0x08FA, r23
    6b40:	60 93 f9 08 	sts	0x08F9, r22
    calibration[4][2] = 99;
    6b44:	63 e6       	ldi	r22, 0x63	; 99
    6b46:	e6 2e       	mov	r14, r22
    6b48:	f1 2c       	mov	r15, r1
    6b4a:	f0 92 0a 09 	sts	0x090A, r15
    6b4e:	e0 92 09 09 	sts	0x0909, r14
    calibration[5][2] = 119;
    6b52:	67 e7       	ldi	r22, 0x77	; 119
    6b54:	70 e0       	ldi	r23, 0x00	; 0
    6b56:	70 93 1a 09 	sts	0x091A, r23
    6b5a:	60 93 19 09 	sts	0x0919, r22
    calibration[6][2] = 140;
    6b5e:	0f 2e       	mov	r0, r31
    6b60:	fc e8       	ldi	r31, 0x8C	; 140
    6b62:	cf 2e       	mov	r12, r31
    6b64:	dd 24       	eor	r13, r13
    6b66:	f0 2d       	mov	r31, r0
    6b68:	d0 92 2a 09 	sts	0x092A, r13
    6b6c:	c0 92 29 09 	sts	0x0929, r12
    calibration[7][2] = 160;
    6b70:	30 93 3a 09 	sts	0x093A, r19
    6b74:	20 93 39 09 	sts	0x0939, r18
	calibration[8][2] = 180;
    6b78:	50 93 4a 09 	sts	0x094A, r21
    6b7c:	40 93 49 09 	sts	0x0949, r20
    calibration[0][3] = 23;    	// real speed measured in mm/s
    6b80:	0f 2e       	mov	r0, r31
    6b82:	f7 e1       	ldi	r31, 0x17	; 23
    6b84:	8f 2e       	mov	r8, r31
    6b86:	99 24       	eor	r9, r9
    6b88:	f0 2d       	mov	r31, r0
    6b8a:	90 92 cc 08 	sts	0x08CC, r9
    6b8e:	80 92 cb 08 	sts	0x08CB, r8
    calibration[1][3] = 46;
    6b92:	0f 2e       	mov	r0, r31
    6b94:	fe e2       	ldi	r31, 0x2E	; 46
    6b96:	4f 2e       	mov	r4, r31
    6b98:	55 24       	eor	r5, r5
    6b9a:	f0 2d       	mov	r31, r0
    6b9c:	50 92 dc 08 	sts	0x08DC, r5
    6ba0:	40 92 db 08 	sts	0x08DB, r4
    calibration[2][3] = 64;
    6ba4:	88 24       	eor	r8, r8
    6ba6:	99 24       	eor	r9, r9
    6ba8:	68 94       	set
    6baa:	86 f8       	bld	r8, 6
    6bac:	90 92 ec 08 	sts	0x08EC, r9
    6bb0:	80 92 eb 08 	sts	0x08EB, r8
    calibration[3][3] = 81;
    6bb4:	0f 2e       	mov	r0, r31
    6bb6:	f1 e5       	ldi	r31, 0x51	; 81
    6bb8:	2f 2e       	mov	r2, r31
    6bba:	33 24       	eor	r3, r3
    6bbc:	f0 2d       	mov	r31, r0
    6bbe:	30 92 fc 08 	sts	0x08FC, r3
    6bc2:	20 92 fb 08 	sts	0x08FB, r2
    calibration[4][3] = 97;
    6bc6:	0f 2e       	mov	r0, r31
    6bc8:	f1 e6       	ldi	r31, 0x61	; 97
    6bca:	8f 2e       	mov	r8, r31
    6bcc:	99 24       	eor	r9, r9
    6bce:	f0 2d       	mov	r31, r0
    6bd0:	90 92 0c 09 	sts	0x090C, r9
    6bd4:	80 92 0b 09 	sts	0x090B, r8
    calibration[5][3] = 112;
    6bd8:	0f 2e       	mov	r0, r31
    6bda:	f0 e7       	ldi	r31, 0x70	; 112
    6bdc:	8f 2e       	mov	r8, r31
    6bde:	99 24       	eor	r9, r9
    6be0:	f0 2d       	mov	r31, r0
    6be2:	90 92 1c 09 	sts	0x091C, r9
    6be6:	80 92 1b 09 	sts	0x091B, r8
    calibration[6][3] = 125;
    6bea:	70 92 2c 09 	sts	0x092C, r7
    6bee:	60 92 2b 09 	sts	0x092B, r6
    calibration[7][3] = 139;
    6bf2:	90 93 3c 09 	sts	0x093C, r25
    6bf6:	80 93 3b 09 	sts	0x093B, r24
	calibration[8][3] = 152;
    6bfa:	0f 2e       	mov	r0, r31
    6bfc:	f8 e9       	ldi	r31, 0x98	; 152
    6bfe:	8f 2e       	mov	r8, r31
    6c00:	99 24       	eor	r9, r9
    6c02:	f0 2d       	mov	r31, r0
    6c04:	90 92 4c 09 	sts	0x094C, r9
    6c08:	80 92 4b 09 	sts	0x094B, r8
    // backward left, speed control enabled
    calibration[0][4] = 20;		// measured speed with back EMF (adc 0..1023)
    6c0c:	b0 93 ce 08 	sts	0x08CE, r27
    6c10:	a0 93 cd 08 	sts	0x08CD, r26
    calibration[1][4] = 39;
    6c14:	f0 93 de 08 	sts	0x08DE, r31
    6c18:	e0 93 dd 08 	sts	0x08DD, r30
    calibration[2][4] = 60;
    6c1c:	d0 93 ee 08 	sts	0x08EE, r29
    6c20:	c0 93 ed 08 	sts	0x08ED, r28
    calibration[3][4] = 79;
    6c24:	10 93 fe 08 	sts	0x08FE, r17
    6c28:	00 93 fd 08 	sts	0x08FD, r16
    calibration[4][4] = 99;
    6c2c:	f0 92 0e 09 	sts	0x090E, r15
    6c30:	e0 92 0d 09 	sts	0x090D, r14
    calibration[5][4] = 120;
    6c34:	b0 92 1e 09 	sts	0x091E, r11
    6c38:	a0 92 1d 09 	sts	0x091D, r10
    calibration[6][4] = 140;
    6c3c:	d0 92 2e 09 	sts	0x092E, r13
    6c40:	c0 92 2d 09 	sts	0x092D, r12
    calibration[7][4] = 160;
    6c44:	30 93 3e 09 	sts	0x093E, r19
    6c48:	20 93 3d 09 	sts	0x093D, r18
	calibration[8][4] = 179;
    6c4c:	c3 eb       	ldi	r28, 0xB3	; 179
    6c4e:	d0 e0       	ldi	r29, 0x00	; 0
    6c50:	d0 93 4e 09 	sts	0x094E, r29
    6c54:	c0 93 4d 09 	sts	0x094D, r28
    calibration[0][5] = 18;    	// real speed measured in mm/s
    6c58:	c2 e1       	ldi	r28, 0x12	; 18
    6c5a:	d0 e0       	ldi	r29, 0x00	; 0
    6c5c:	d0 93 d0 08 	sts	0x08D0, r29
    6c60:	c0 93 cf 08 	sts	0x08CF, r28
    calibration[1][5] = 45;
    6c64:	cd e2       	ldi	r28, 0x2D	; 45
    6c66:	d0 e0       	ldi	r29, 0x00	; 0
    6c68:	d0 93 e0 08 	sts	0x08E0, r29
    6c6c:	c0 93 df 08 	sts	0x08DF, r28
    calibration[2][5] = 68;
    6c70:	c4 e4       	ldi	r28, 0x44	; 68
    6c72:	d0 e0       	ldi	r29, 0x00	; 0
    6c74:	d0 93 f0 08 	sts	0x08F0, r29
    6c78:	c0 93 ef 08 	sts	0x08EF, r28
    calibration[3][5] = 87;
    6c7c:	c7 e5       	ldi	r28, 0x57	; 87
    6c7e:	d0 e0       	ldi	r29, 0x00	; 0
    6c80:	d0 93 00 09 	sts	0x0900, r29
    6c84:	c0 93 ff 08 	sts	0x08FF, r28
    calibration[4][5] = 105;
    6c88:	c9 e6       	ldi	r28, 0x69	; 105
    6c8a:	d0 e0       	ldi	r29, 0x00	; 0
    6c8c:	d0 93 10 09 	sts	0x0910, r29
    6c90:	c0 93 0f 09 	sts	0x090F, r28
    calibration[5][5] = 119;
    6c94:	70 93 20 09 	sts	0x0920, r23
    6c98:	60 93 1f 09 	sts	0x091F, r22
    calibration[6][5] = 137;
    6c9c:	c9 e8       	ldi	r28, 0x89	; 137
    6c9e:	d0 e0       	ldi	r29, 0x00	; 0
    6ca0:	d0 93 30 09 	sts	0x0930, r29
    6ca4:	c0 93 2f 09 	sts	0x092F, r28
    calibration[7][5] = 151;
    6ca8:	c7 e9       	ldi	r28, 0x97	; 151
    6caa:	d0 e0       	ldi	r29, 0x00	; 0
    6cac:	d0 93 40 09 	sts	0x0940, r29
    6cb0:	c0 93 3f 09 	sts	0x093F, r28
	calibration[8][5] = 168;
    6cb4:	c8 ea       	ldi	r28, 0xA8	; 168
    6cb6:	d0 e0       	ldi	r29, 0x00	; 0
    6cb8:	d0 93 50 09 	sts	0x0950, r29
    6cbc:	c0 93 4f 09 	sts	0x094F, r28
    // backward right, speed control enabled
    calibration[0][6] = 20;		// measured speed with back EMF (adc 0..1023)
    6cc0:	b0 93 d2 08 	sts	0x08D2, r27
    6cc4:	a0 93 d1 08 	sts	0x08D1, r26
    calibration[1][6] = 39;
    6cc8:	f0 93 e2 08 	sts	0x08E2, r31
    6ccc:	e0 93 e1 08 	sts	0x08E1, r30
    calibration[2][6] = 59;
    6cd0:	eb e3       	ldi	r30, 0x3B	; 59
    6cd2:	f0 e0       	ldi	r31, 0x00	; 0
    6cd4:	f0 93 f2 08 	sts	0x08F2, r31
    6cd8:	e0 93 f1 08 	sts	0x08F1, r30
    calibration[3][6] = 80;
    6cdc:	e0 e5       	ldi	r30, 0x50	; 80
    6cde:	f0 e0       	ldi	r31, 0x00	; 0
    6ce0:	f0 93 02 09 	sts	0x0902, r31
    6ce4:	e0 93 01 09 	sts	0x0901, r30
    calibration[4][6] = 100;
    6ce8:	e4 e6       	ldi	r30, 0x64	; 100
    6cea:	f0 e0       	ldi	r31, 0x00	; 0
    6cec:	f0 93 12 09 	sts	0x0912, r31
    6cf0:	e0 93 11 09 	sts	0x0911, r30
    calibration[5][6] = 119;
    6cf4:	70 93 22 09 	sts	0x0922, r23
    6cf8:	60 93 21 09 	sts	0x0921, r22
    calibration[6][6] = 139;
    6cfc:	90 93 32 09 	sts	0x0932, r25
    6d00:	80 93 31 09 	sts	0x0931, r24
    calibration[7][6] = 160;
    6d04:	30 93 42 09 	sts	0x0942, r19
    6d08:	20 93 41 09 	sts	0x0941, r18
	calibration[8][6] = 180;
    6d0c:	50 93 52 09 	sts	0x0952, r21
    6d10:	40 93 51 09 	sts	0x0951, r20
    calibration[0][7] = 22;    	// real speed measured in mm/s
    6d14:	26 e1       	ldi	r18, 0x16	; 22
    6d16:	30 e0       	ldi	r19, 0x00	; 0
    6d18:	30 93 d4 08 	sts	0x08D4, r19
    6d1c:	20 93 d3 08 	sts	0x08D3, r18
    calibration[1][7] = 46;
    6d20:	50 92 e4 08 	sts	0x08E4, r5
    6d24:	40 92 e3 08 	sts	0x08E3, r4
    calibration[2][7] = 65;
    6d28:	21 e4       	ldi	r18, 0x41	; 65
    6d2a:	30 e0       	ldi	r19, 0x00	; 0
    6d2c:	30 93 f4 08 	sts	0x08F4, r19
    6d30:	20 93 f3 08 	sts	0x08F3, r18
    calibration[3][7] = 81;
    6d34:	30 92 04 09 	sts	0x0904, r3
    6d38:	20 92 03 09 	sts	0x0903, r2
    calibration[4][7] = 96;
    6d3c:	20 e6       	ldi	r18, 0x60	; 96
    6d3e:	30 e0       	ldi	r19, 0x00	; 0
    6d40:	30 93 14 09 	sts	0x0914, r19
    6d44:	20 93 13 09 	sts	0x0913, r18
    calibration[5][7] = 111;
    6d48:	2f e6       	ldi	r18, 0x6F	; 111
    6d4a:	30 e0       	ldi	r19, 0x00	; 0
    6d4c:	30 93 24 09 	sts	0x0924, r19
    6d50:	20 93 23 09 	sts	0x0923, r18
    calibration[6][7] = 125;
    6d54:	70 92 34 09 	sts	0x0934, r7
    6d58:	60 92 33 09 	sts	0x0933, r6
    calibration[7][7] = 139;
    6d5c:	90 93 44 09 	sts	0x0944, r25
    6d60:	80 93 43 09 	sts	0x0943, r24
	calibration[8][7] = 153;
    6d64:	89 e9       	ldi	r24, 0x99	; 153
    6d66:	90 e0       	ldi	r25, 0x00	; 0
    6d68:	90 93 54 09 	sts	0x0954, r25
    6d6c:	80 93 53 09 	sts	0x0953, r24

    writeCalibrationToFlash();
    6d70:	0e 94 d3 42 	call	0x85a6	; 0x85a6 <writeCalibrationToFlash>
}
    6d74:	df 91       	pop	r29
    6d76:	cf 91       	pop	r28
    6d78:	1f 91       	pop	r17
    6d7a:	0f 91       	pop	r16
    6d7c:	ff 90       	pop	r15
    6d7e:	ef 90       	pop	r14
    6d80:	df 90       	pop	r13
    6d82:	cf 90       	pop	r12
    6d84:	bf 90       	pop	r11
    6d86:	af 90       	pop	r10
    6d88:	9f 90       	pop	r9
    6d8a:	8f 90       	pop	r8
    6d8c:	7f 90       	pop	r7
    6d8e:	6f 90       	pop	r6
    6d90:	5f 90       	pop	r5
    6d92:	4f 90       	pop	r4
    6d94:	3f 90       	pop	r3
    6d96:	2f 90       	pop	r2
    6d98:	08 95       	ret

00006d9a <initCalibration>:

void initCalibration() {

    unsigned int temp=0;
 
 	temp = eeprom_read_word((uint16_t*)CALIB_CHECK_ADDRESS);
    6d9a:	8a e6       	ldi	r24, 0x6A	; 106
    6d9c:	9f e0       	ldi	r25, 0x0F	; 15
    6d9e:	0e 94 73 52 	call	0xa4e6	; 0xa4e6 <__eerd_word_m2560>

    if(temp==0xAA55) {   // valid odometry data saved in flash, read them
    6da2:	2a ea       	ldi	r18, 0xAA	; 170
    6da4:	85 35       	cpi	r24, 0x55	; 85
    6da6:	92 07       	cpc	r25, r18
    6da8:	19 f0       	breq	.+6      	; 0x6db0 <initCalibration+0x16>
        readCalibrationFromFlash();
    } else {
		writeDefaultCalibration();		
    6daa:	0e 94 0c 35 	call	0x6a18	; 0x6a18 <writeDefaultCalibration>
    6dae:	08 95       	ret
    unsigned int temp=0;
 
 	temp = eeprom_read_word((uint16_t*)CALIB_CHECK_ADDRESS);

    if(temp==0xAA55) {   // valid odometry data saved in flash, read them
        readCalibrationFromFlash();
    6db0:	0e 94 e2 42 	call	0x85c4	; 0x85c4 <readCalibrationFromFlash>
    6db4:	08 95       	ret

00006db6 <__vector_45>:
    }

}

// Motor left
ISR(TIMER4_OVF_vect) {
    6db6:	1f 92       	push	r1
    6db8:	0f 92       	push	r0
    6dba:	0f b6       	in	r0, 0x3f	; 63
    6dbc:	0f 92       	push	r0
    6dbe:	11 24       	eor	r1, r1
    6dc0:	8f 93       	push	r24
    6dc2:	9f 93       	push	r25

//	LED_GREEN_ON;

	if(cliffDetectedFlag) {
    6dc4:	80 91 6e 04 	lds	r24, 0x046E
    6dc8:	88 23       	and	r24, r24
    6dca:	61 f0       	breq	.+24     	; 0x6de4 <__vector_45+0x2e>
		pwm_left = 0;
    6dcc:	10 92 f8 02 	sts	0x02F8, r1
    6dd0:	10 92 f7 02 	sts	0x02F7, r1
		OCR4A = 0;
    6dd4:	10 92 a9 00 	sts	0x00A9, r1
    6dd8:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    6ddc:	10 92 ab 00 	sts	0x00AB, r1
    6de0:	10 92 aa 00 	sts	0x00AA, r1
	}

	left_current_avg = 0;
    6de4:	10 92 e2 02 	sts	0x02E2, r1
    6de8:	10 92 e1 02 	sts	0x02E1, r1

	// set pins mode based on controller output
	if(pwm_left == 0) {
    6dec:	80 91 f7 02 	lds	r24, 0x02F7
    6df0:	90 91 f8 02 	lds	r25, 0x02F8
    6df4:	00 97       	sbiw	r24, 0x00	; 0
    6df6:	41 f5       	brne	.+80     	; 0x6e48 <__vector_45+0x92>


		//leftMotorPhase = NO_PHASE;
		//compute_left_vel = 1;

		if(pwm_left_desired_to_control >= 0) {
    6df8:	80 91 eb 02 	lds	r24, 0x02EB
    6dfc:	90 91 ec 02 	lds	r25, 0x02EC
    6e00:	97 fd       	sbrc	r25, 7
    6e02:	69 c0       	rjmp	.+210    	; 0x6ed6 <__vector_45+0x120>
			leftMotorPhase = PASSIVE_PHASE;
    6e04:	81 e0       	ldi	r24, 0x01	; 1
    6e06:	80 93 28 02 	sts	0x0228, r24
			currentMotLeftChannel = 14;
    6e0a:	8e e0       	ldi	r24, 0x0E	; 14
    6e0c:	80 93 25 02 	sts	0x0225, r24
		} else {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 15;
		}
		firstSampleLeft = 1;
    6e10:	81 e0       	ldi	r24, 0x01	; 1
    6e12:	80 93 0a 02 	sts	0x020A, r24

		// select channel 15 to sample left current
		//currentMotLeftChannel = 15;
		TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    6e16:	80 91 a0 00 	lds	r24, 0x00A0
    6e1a:	8f 75       	andi	r24, 0x5F	; 95
    6e1c:	80 93 a0 00 	sts	0x00A0, r24
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    6e20:	80 91 02 01 	lds	r24, 0x0102
    6e24:	87 7e       	andi	r24, 0xE7	; 231
    6e26:	80 93 02 01 	sts	0x0102, r24
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
    6e2a:	80 91 72 00 	lds	r24, 0x0072
    6e2e:	89 7f       	andi	r24, 0xF9	; 249
    6e30:	80 93 72 00 	sts	0x0072, r24
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
    6e34:	89 b3       	in	r24, 0x19	; 25
    6e36:	86 60       	ori	r24, 0x06	; 6
    6e38:	89 bb       	out	0x19, r24	; 25
	}
*/

//	LED_GREEN_OFF;

}
    6e3a:	9f 91       	pop	r25
    6e3c:	8f 91       	pop	r24
    6e3e:	0f 90       	pop	r0
    6e40:	0f be       	out	0x3f, r0	; 63
    6e42:	0f 90       	pop	r0
    6e44:	1f 90       	pop	r1
    6e46:	18 95       	reti
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
	} else if(pwm_left > 0) {   		// move forward
    6e48:	18 16       	cp	r1, r24
    6e4a:	19 06       	cpc	r1, r25
    6e4c:	2c f5       	brge	.+74     	; 0x6e98 <__vector_45+0xe2>
		leftMotorPhase = ACTIVE_PHASE;
    6e4e:	10 92 28 02 	sts	0x0228, r1
		// select channel 15 to sample left current
		currentMotLeftChannel = 15;
    6e52:	8f e0       	ldi	r24, 0x0F	; 15
    6e54:	80 93 25 02 	sts	0x0225, r24
		TCCR4A  &= ~(1 << COM4B1);		// disable OCB
    6e58:	80 91 a0 00 	lds	r24, 0x00A0
    6e5c:	8f 7d       	andi	r24, 0xDF	; 223
    6e5e:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
    6e62:	80 91 72 00 	lds	r24, 0x0072
    6e66:	8b 7f       	andi	r24, 0xFB	; 251
    6e68:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 4);				// output to 0
    6e6c:	80 91 02 01 	lds	r24, 0x0102
    6e70:	8f 7e       	andi	r24, 0xEF	; 239
    6e72:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4A1);		// enable OCA
    6e76:	80 91 a0 00 	lds	r24, 0x00A0
    6e7a:	80 68       	ori	r24, 0x80	; 128
    6e7c:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
    6e80:	80 91 72 00 	lds	r24, 0x0072
    6e84:	82 60       	ori	r24, 0x02	; 2
    6e86:	80 93 72 00 	sts	0x0072, r24
	}
*/

//	LED_GREEN_OFF;

}
    6e8a:	9f 91       	pop	r25
    6e8c:	8f 91       	pop	r24
    6e8e:	0f 90       	pop	r0
    6e90:	0f be       	out	0x3f, r0	; 63
    6e92:	0f 90       	pop	r0
    6e94:	1f 90       	pop	r1
    6e96:	18 95       	reti
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
		PORTH &= ~(1 << 4);				// output to 0
		TCCR4A |= (1 << COM4A1);		// enable OCA
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
	} else if(pwm_left < 0) {      		// move backward
		leftMotorPhase = ACTIVE_PHASE;
    6e98:	10 92 28 02 	sts	0x0228, r1
		// select channel 14 to sample left current
		currentMotLeftChannel = 14;
    6e9c:	8e e0       	ldi	r24, 0x0E	; 14
    6e9e:	80 93 25 02 	sts	0x0225, r24
		TCCR4A  &= ~(1 << COM4A1);		// disable OCA
    6ea2:	80 91 a0 00 	lds	r24, 0x00A0
    6ea6:	8f 77       	andi	r24, 0x7F	; 127
    6ea8:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4A);		// disable OCA interrupt
    6eac:	80 91 72 00 	lds	r24, 0x0072
    6eb0:	8d 7f       	andi	r24, 0xFD	; 253
    6eb2:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 3);				// output to 0
    6eb6:	80 91 02 01 	lds	r24, 0x0102
    6eba:	87 7f       	andi	r24, 0xF7	; 247
    6ebc:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4B1);		// enable OCB
    6ec0:	80 91 a0 00 	lds	r24, 0x00A0
    6ec4:	80 62       	ori	r24, 0x20	; 32
    6ec6:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
    6eca:	80 91 72 00 	lds	r24, 0x0072
    6ece:	84 60       	ori	r24, 0x04	; 4
    6ed0:	80 93 72 00 	sts	0x0072, r24
    6ed4:	b2 cf       	rjmp	.-156    	; 0x6e3a <__vector_45+0x84>

		if(pwm_left_desired_to_control >= 0) {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 14;
		} else {
			leftMotorPhase = PASSIVE_PHASE;
    6ed6:	81 e0       	ldi	r24, 0x01	; 1
    6ed8:	80 93 28 02 	sts	0x0228, r24
			currentMotLeftChannel = 15;
    6edc:	8f e0       	ldi	r24, 0x0F	; 15
    6ede:	80 93 25 02 	sts	0x0225, r24
    6ee2:	96 cf       	rjmp	.-212    	; 0x6e10 <__vector_45+0x5a>

00006ee4 <__vector_42>:
//	LED_GREEN_OFF;

}

// motor left forward
ISR(TIMER4_COMPA_vect) {
    6ee4:	1f 92       	push	r1
    6ee6:	0f 92       	push	r0
    6ee8:	0f b6       	in	r0, 0x3f	; 63
    6eea:	0f 92       	push	r0
    6eec:	11 24       	eor	r1, r1
    6eee:	8f 93       	push	r24
    6ef0:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    6ef2:	81 e0       	ldi	r24, 0x01	; 1
    6ef4:	80 93 28 02 	sts	0x0228, r24
	// select channel 14 to sample the left velocity
	currentMotLeftChannel = 14;
    6ef8:	9e e0       	ldi	r25, 0x0E	; 14
    6efa:	90 93 25 02 	sts	0x0225, r25

	firstSampleLeft = 1;
    6efe:	80 93 0a 02 	sts	0x020A, r24

//	LED_GREEN_OFF;

}
    6f02:	9f 91       	pop	r25
    6f04:	8f 91       	pop	r24
    6f06:	0f 90       	pop	r0
    6f08:	0f be       	out	0x3f, r0	; 63
    6f0a:	0f 90       	pop	r0
    6f0c:	1f 90       	pop	r1
    6f0e:	18 95       	reti

00006f10 <__vector_43>:

// motor left backward
ISR(TIMER4_COMPB_vect) {
    6f10:	1f 92       	push	r1
    6f12:	0f 92       	push	r0
    6f14:	0f b6       	in	r0, 0x3f	; 63
    6f16:	0f 92       	push	r0
    6f18:	11 24       	eor	r1, r1
    6f1a:	8f 93       	push	r24
    6f1c:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    6f1e:	81 e0       	ldi	r24, 0x01	; 1
    6f20:	80 93 28 02 	sts	0x0228, r24
	// select channel 15 to sample the left velocity
	currentMotLeftChannel = 15;
    6f24:	9f e0       	ldi	r25, 0x0F	; 15
    6f26:	90 93 25 02 	sts	0x0225, r25

	firstSampleLeft = 1;
    6f2a:	80 93 0a 02 	sts	0x020A, r24

//	LED_GREEN_OFF;

}
    6f2e:	9f 91       	pop	r25
    6f30:	8f 91       	pop	r24
    6f32:	0f 90       	pop	r0
    6f34:	0f be       	out	0x3f, r0	; 63
    6f36:	0f 90       	pop	r0
    6f38:	1f 90       	pop	r1
    6f3a:	18 95       	reti

00006f3c <__vector_35>:

// Motor right
ISR(TIMER3_OVF_vect) {
    6f3c:	1f 92       	push	r1
    6f3e:	0f 92       	push	r0
    6f40:	0f b6       	in	r0, 0x3f	; 63
    6f42:	0f 92       	push	r0
    6f44:	11 24       	eor	r1, r1
    6f46:	8f 93       	push	r24
    6f48:	9f 93       	push	r25

//	LED_GREEN_ON;

  	// PORTB ^= (1 << 7); // Toggle the LED

	if(cliffDetectedFlag) {
    6f4a:	80 91 6e 04 	lds	r24, 0x046E
    6f4e:	88 23       	and	r24, r24
    6f50:	61 f0       	breq	.+24     	; 0x6f6a <__vector_35+0x2e>
		pwm_right = 0;
    6f52:	10 92 f6 02 	sts	0x02F6, r1
    6f56:	10 92 f5 02 	sts	0x02F5, r1
		OCR3A = 0;
    6f5a:	10 92 99 00 	sts	0x0099, r1
    6f5e:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    6f62:	10 92 9b 00 	sts	0x009B, r1
    6f66:	10 92 9a 00 	sts	0x009A, r1
	}

	right_current_avg = 0;
    6f6a:	10 92 e4 02 	sts	0x02E4, r1
    6f6e:	10 92 e3 02 	sts	0x02E3, r1


	if(pwm_right == 0) {
    6f72:	80 91 f5 02 	lds	r24, 0x02F5
    6f76:	90 91 f6 02 	lds	r25, 0x02F6
    6f7a:	00 97       	sbiw	r24, 0x00	; 0
    6f7c:	31 f5       	brne	.+76     	; 0x6fca <__vector_35+0x8e>
		//firstSampleRight = 0;

		//rightMotorPhase = NO_PHASE;
		//compute_right_vel = 1;

		if(pwm_right_desired_to_control >= 0) {
    6f7e:	80 91 e9 02 	lds	r24, 0x02E9
    6f82:	90 91 ea 02 	lds	r25, 0x02EA
    6f86:	97 fd       	sbrc	r25, 7
    6f88:	5f c0       	rjmp	.+190    	; 0x7048 <__vector_35+0x10c>
			rightMotorPhase = PASSIVE_PHASE;
    6f8a:	81 e0       	ldi	r24, 0x01	; 1
    6f8c:	80 93 27 02 	sts	0x0227, r24
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
    6f90:	8c e0       	ldi	r24, 0x0C	; 12
    6f92:	80 93 26 02 	sts	0x0226, r24
		} else {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
		}
		firstSampleRight = 1;
    6f96:	81 e0       	ldi	r24, 0x01	; 1
    6f98:	80 93 09 02 	sts	0x0209, r24

		// select channel 13 to sample left current
		//currentMotRightChannel = 13;
		TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    6f9c:	80 91 90 00 	lds	r24, 0x0090
    6fa0:	8f 75       	andi	r24, 0x5F	; 95
    6fa2:	80 93 90 00 	sts	0x0090, r24
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    6fa6:	8e b1       	in	r24, 0x0e	; 14
    6fa8:	87 7e       	andi	r24, 0xE7	; 231
    6faa:	8e b9       	out	0x0e, r24	; 14
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
    6fac:	80 91 71 00 	lds	r24, 0x0071
    6fb0:	89 7f       	andi	r24, 0xF9	; 249
    6fb2:	80 93 71 00 	sts	0x0071, r24
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
    6fb6:	88 b3       	in	r24, 0x18	; 24
    6fb8:	86 60       	ori	r24, 0x06	; 6
    6fba:	88 bb       	out	0x18, r24	; 24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    6fbc:	9f 91       	pop	r25
    6fbe:	8f 91       	pop	r24
    6fc0:	0f 90       	pop	r0
    6fc2:	0f be       	out	0x3f, r0	; 63
    6fc4:	0f 90       	pop	r0
    6fc6:	1f 90       	pop	r1
    6fc8:	18 95       	reti
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
	}else if(pwm_right > 0) {   		// move forward
    6fca:	18 16       	cp	r1, r24
    6fcc:	19 06       	cpc	r1, r25
    6fce:	0c f5       	brge	.+66     	; 0x7012 <__vector_35+0xd6>
		rightMotorPhase = ACTIVE_PHASE;
    6fd0:	10 92 27 02 	sts	0x0227, r1
		// select channel 13 to sample left current
		currentMotRightChannel = 13;
    6fd4:	8d e0       	ldi	r24, 0x0D	; 13
    6fd6:	80 93 26 02 	sts	0x0226, r24
		TCCR3A  &= ~(1 << COM3B1);		// disable OCB
    6fda:	80 91 90 00 	lds	r24, 0x0090
    6fde:	8f 7d       	andi	r24, 0xDF	; 223
    6fe0:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
    6fe4:	80 91 71 00 	lds	r24, 0x0071
    6fe8:	8b 7f       	andi	r24, 0xFB	; 251
    6fea:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 4);				// output to 0
    6fee:	74 98       	cbi	0x0e, 4	; 14
		TCCR3A |= (1 << COM3A1);		// enable OCA
    6ff0:	80 91 90 00 	lds	r24, 0x0090
    6ff4:	80 68       	ori	r24, 0x80	; 128
    6ff6:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
    6ffa:	80 91 71 00 	lds	r24, 0x0071
    6ffe:	82 60       	ori	r24, 0x02	; 2
    7000:	80 93 71 00 	sts	0x0071, r24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    7004:	9f 91       	pop	r25
    7006:	8f 91       	pop	r24
    7008:	0f 90       	pop	r0
    700a:	0f be       	out	0x3f, r0	; 63
    700c:	0f 90       	pop	r0
    700e:	1f 90       	pop	r1
    7010:	18 95       	reti
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
		PORTE &= ~(1 << 4);				// output to 0
		TCCR3A |= (1 << COM3A1);		// enable OCA
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
	} else if(pwm_right < 0) {      	// move backward
		rightMotorPhase = ACTIVE_PHASE;
    7012:	10 92 27 02 	sts	0x0227, r1
		// select channel 12 to sample left current
		currentMotRightChannel = 12;
    7016:	8c e0       	ldi	r24, 0x0C	; 12
    7018:	80 93 26 02 	sts	0x0226, r24
		TCCR3A  &= ~(1 << COM3A1);		// disable OCA
    701c:	80 91 90 00 	lds	r24, 0x0090
    7020:	8f 77       	andi	r24, 0x7F	; 127
    7022:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3A);		// disable OCA interrupt
    7026:	80 91 71 00 	lds	r24, 0x0071
    702a:	8d 7f       	andi	r24, 0xFD	; 253
    702c:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 3);				// output to 0
    7030:	73 98       	cbi	0x0e, 3	; 14
		TCCR3A |= (1 << COM3B1);		// enable OCB
    7032:	80 91 90 00 	lds	r24, 0x0090
    7036:	80 62       	ori	r24, 0x20	; 32
    7038:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3B);		// enable OCB interrupt
    703c:	80 91 71 00 	lds	r24, 0x0071
    7040:	84 60       	ori	r24, 0x04	; 4
    7042:	80 93 71 00 	sts	0x0071, r24
    7046:	ba cf       	rjmp	.-140    	; 0x6fbc <__vector_35+0x80>
		if(pwm_right_desired_to_control >= 0) {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
		} else {
			rightMotorPhase = PASSIVE_PHASE;
    7048:	81 e0       	ldi	r24, 0x01	; 1
    704a:	80 93 27 02 	sts	0x0227, r24
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
    704e:	8d e0       	ldi	r24, 0x0D	; 13
    7050:	80 93 26 02 	sts	0x0226, r24
    7054:	a0 cf       	rjmp	.-192    	; 0x6f96 <__vector_35+0x5a>

00007056 <__vector_32>:
//	LED_GREEN_OFF;

}

// motor right forward
ISR(TIMER3_COMPA_vect) {
    7056:	1f 92       	push	r1
    7058:	0f 92       	push	r0
    705a:	0f b6       	in	r0, 0x3f	; 63
    705c:	0f 92       	push	r0
    705e:	11 24       	eor	r1, r1
    7060:	8f 93       	push	r24
    7062:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    7064:	81 e0       	ldi	r24, 0x01	; 1
    7066:	80 93 27 02 	sts	0x0227, r24
	// select channel 12 to sample the right velocity
	currentMotRightChannel = 12;
    706a:	9c e0       	ldi	r25, 0x0C	; 12
    706c:	90 93 26 02 	sts	0x0226, r25

	firstSampleRight = 1;
    7070:	80 93 09 02 	sts	0x0209, r24

//	LED_RED_OFF;

}
    7074:	9f 91       	pop	r25
    7076:	8f 91       	pop	r24
    7078:	0f 90       	pop	r0
    707a:	0f be       	out	0x3f, r0	; 63
    707c:	0f 90       	pop	r0
    707e:	1f 90       	pop	r1
    7080:	18 95       	reti

00007082 <__vector_33>:

// motor right backward
ISR(TIMER3_COMPB_vect) {
    7082:	1f 92       	push	r1
    7084:	0f 92       	push	r0
    7086:	0f b6       	in	r0, 0x3f	; 63
    7088:	0f 92       	push	r0
    708a:	11 24       	eor	r1, r1
    708c:	8f 93       	push	r24
    708e:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    7090:	81 e0       	ldi	r24, 0x01	; 1
    7092:	80 93 27 02 	sts	0x0227, r24
	// select channel 13 to sample the right velocity
	currentMotRightChannel = 13;
    7096:	9d e0       	ldi	r25, 0x0D	; 13
    7098:	90 93 26 02 	sts	0x0226, r25

	firstSampleRight = 1;
    709c:	80 93 09 02 	sts	0x0209, r24

//	LED_RED_OFF;
}
    70a0:	9f 91       	pop	r25
    70a2:	8f 91       	pop	r24
    70a4:	0f 90       	pop	r0
    70a6:	0f be       	out	0x3f, r0	; 63
    70a8:	0f 90       	pop	r0
    70aa:	1f 90       	pop	r1
    70ac:	18 95       	reti

000070ae <initBehaviors>:

#include "behaviors.h"

void initBehaviors() {

	srand(TCNT3);	// initialize random seed (used in obstacle avoidance)
    70ae:	80 91 94 00 	lds	r24, 0x0094
    70b2:	90 91 95 00 	lds	r25, 0x0095
    70b6:	0e 94 49 52 	call	0xa492	; 0xa492 <srand>

}
    70ba:	08 95       	ret

000070bc <obstacleAvoidance>:

void obstacleAvoidance(signed int *pwmLeft, signed int *pwmRight) {
    70bc:	2f 92       	push	r2
    70be:	3f 92       	push	r3
    70c0:	4f 92       	push	r4
    70c2:	5f 92       	push	r5
    70c4:	6f 92       	push	r6
    70c6:	7f 92       	push	r7
    70c8:	8f 92       	push	r8
    70ca:	9f 92       	push	r9
    70cc:	af 92       	push	r10
    70ce:	bf 92       	push	r11
    70d0:	cf 92       	push	r12
    70d2:	df 92       	push	r13
    70d4:	ef 92       	push	r14
    70d6:	ff 92       	push	r15
    70d8:	0f 93       	push	r16
    70da:	1f 93       	push	r17
    70dc:	df 93       	push	r29
    70de:	cf 93       	push	r28
    70e0:	cd b7       	in	r28, 0x3d	; 61
    70e2:	de b7       	in	r29, 0x3e	; 62
    70e4:	28 97       	sbiw	r28, 0x08	; 8
    70e6:	0f b6       	in	r0, 0x3f	; 63
    70e8:	f8 94       	cli
    70ea:	de bf       	out	0x3e, r29	; 62
    70ec:	0f be       	out	0x3f, r0	; 63
    70ee:	cd bf       	out	0x3d, r28	; 61
    70f0:	3c 01       	movw	r6, r24
    70f2:	7a 83       	std	Y+2, r23	; 0x02
    70f4:	69 83       	std	Y+1, r22	; 0x01
	//	y	0		0.5		1		0.5		0		-0.5	-1		-0.5

	unsigned int i=0;
	signed int long res=0;
	signed int sumSensorsX=0, sumSensorsY=0;
	signed int desL=*pwmLeft, desR=*pwmRight;
    70f6:	fc 01       	movw	r30, r24
    70f8:	01 90       	ld	r0, Z+
    70fa:	f0 81       	ld	r31, Z
    70fc:	e0 2d       	mov	r30, r0
    70fe:	fc 83       	std	Y+4, r31	; 0x04
    7100:	eb 83       	std	Y+3, r30	; 0x03
    7102:	fb 01       	movw	r30, r22
    7104:	01 90       	ld	r0, Z+
    7106:	f0 81       	ld	r31, Z
    7108:	e0 2d       	mov	r30, r0
    710a:	fe 83       	std	Y+6, r31	; 0x06
    710c:	ed 83       	std	Y+5, r30	; 0x05

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    710e:	00 91 c1 02 	lds	r16, 0x02C1
    7112:	10 91 c2 02 	lds	r17, 0x02C2
    7116:	05 30       	cpi	r16, 0x05	; 5
    7118:	11 05       	cpc	r17, r1
    711a:	34 f4       	brge	.+12     	; 0x7128 <obstacleAvoidance+0x6c>
			proximityResultLinear[i] = 0;
    711c:	10 92 c2 02 	sts	0x02C2, r1
    7120:	10 92 c1 02 	sts	0x02C1, r1
    7124:	00 e0       	ldi	r16, 0x00	; 0
    7126:	10 e0       	ldi	r17, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    7128:	60 91 c3 02 	lds	r22, 0x02C3
    712c:	70 91 c4 02 	lds	r23, 0x02C4
    7130:	65 30       	cpi	r22, 0x05	; 5
    7132:	71 05       	cpc	r23, r1
    7134:	34 f4       	brge	.+12     	; 0x7142 <obstacleAvoidance+0x86>
			proximityResultLinear[i] = 0;
    7136:	10 92 c4 02 	sts	0x02C4, r1
    713a:	10 92 c3 02 	sts	0x02C3, r1
    713e:	60 e0       	ldi	r22, 0x00	; 0
    7140:	70 e0       	ldi	r23, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    7142:	80 91 c5 02 	lds	r24, 0x02C5
    7146:	90 91 c6 02 	lds	r25, 0x02C6
    714a:	85 30       	cpi	r24, 0x05	; 5
    714c:	91 05       	cpc	r25, r1
    714e:	24 f4       	brge	.+8      	; 0x7158 <obstacleAvoidance+0x9c>
			proximityResultLinear[i] = 0;
    7150:	10 92 c6 02 	sts	0x02C6, r1
    7154:	10 92 c5 02 	sts	0x02C5, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    7158:	40 91 c7 02 	lds	r20, 0x02C7
    715c:	50 91 c8 02 	lds	r21, 0x02C8
    7160:	45 30       	cpi	r20, 0x05	; 5
    7162:	51 05       	cpc	r21, r1
    7164:	34 f4       	brge	.+12     	; 0x7172 <obstacleAvoidance+0xb6>
			proximityResultLinear[i] = 0;
    7166:	10 92 c8 02 	sts	0x02C8, r1
    716a:	10 92 c7 02 	sts	0x02C7, r1
    716e:	40 e0       	ldi	r20, 0x00	; 0
    7170:	50 e0       	ldi	r21, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    7172:	40 90 c9 02 	lds	r4, 0x02C9
    7176:	50 90 ca 02 	lds	r5, 0x02CA
    717a:	f5 e0       	ldi	r31, 0x05	; 5
    717c:	4f 16       	cp	r4, r31
    717e:	51 04       	cpc	r5, r1
    7180:	34 f4       	brge	.+12     	; 0x718e <obstacleAvoidance+0xd2>
			proximityResultLinear[i] = 0;
    7182:	10 92 ca 02 	sts	0x02CA, r1
    7186:	10 92 c9 02 	sts	0x02C9, r1
    718a:	44 24       	eor	r4, r4
    718c:	55 24       	eor	r5, r5
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    718e:	20 91 cb 02 	lds	r18, 0x02CB
    7192:	30 91 cc 02 	lds	r19, 0x02CC
    7196:	25 30       	cpi	r18, 0x05	; 5
    7198:	31 05       	cpc	r19, r1
    719a:	34 f4       	brge	.+12     	; 0x71a8 <obstacleAvoidance+0xec>
			proximityResultLinear[i] = 0;
    719c:	10 92 cc 02 	sts	0x02CC, r1
    71a0:	10 92 cb 02 	sts	0x02CB, r1
    71a4:	20 e0       	ldi	r18, 0x00	; 0
    71a6:	30 e0       	ldi	r19, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    71a8:	80 91 cd 02 	lds	r24, 0x02CD
    71ac:	90 91 ce 02 	lds	r25, 0x02CE
    71b0:	85 30       	cpi	r24, 0x05	; 5
    71b2:	91 05       	cpc	r25, r1
    71b4:	24 f4       	brge	.+8      	; 0x71be <obstacleAvoidance+0x102>
			proximityResultLinear[i] = 0;
    71b6:	10 92 ce 02 	sts	0x02CE, r1
    71ba:	10 92 cd 02 	sts	0x02CD, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    71be:	80 91 cf 02 	lds	r24, 0x02CF
    71c2:	90 91 d0 02 	lds	r25, 0x02D0
    71c6:	85 30       	cpi	r24, 0x05	; 5
    71c8:	91 05       	cpc	r25, r1
    71ca:	34 f4       	brge	.+12     	; 0x71d8 <obstacleAvoidance+0x11c>
			proximityResultLinear[i] = 0;
    71cc:	10 92 d0 02 	sts	0x02D0, r1
    71d0:	10 92 cf 02 	sts	0x02CF, r1
    71d4:	80 e0       	ldi	r24, 0x00	; 0
    71d6:	90 e0       	ldi	r25, 0x00	; 0
	}

	// sum the contribution of each sensor (based on the previous weights table);
	// give more weight to prox2 and prox6 (side proximities) in order to get more stability in narrow aisles;
	// add some noise to the sum in order to escape from dead-lock positions
	sumSensorsX = -proximityResultLinear[0] - (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) + proximityResultLinear[4] + (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + ((rand()%60)-30);
    71d8:	10 95       	com	r17
    71da:	01 95       	neg	r16
    71dc:	1f 4f       	sbci	r17, 0xFF	; 255
    71de:	5b 01       	movw	r10, r22
    71e0:	b5 94       	asr	r11
    71e2:	a7 94       	ror	r10
    71e4:	7a 01       	movw	r14, r20
    71e6:	f5 94       	asr	r15
    71e8:	e7 94       	ror	r14
    71ea:	69 01       	movw	r12, r18
    71ec:	d5 94       	asr	r13
    71ee:	c7 94       	ror	r12
    71f0:	4c 01       	movw	r8, r24
    71f2:	95 94       	asr	r9
    71f4:	87 94       	ror	r8
    71f6:	0e 94 44 52 	call	0xa488	; 0xa488 <rand>
    71fa:	92 01       	movw	r18, r4
    71fc:	2e 51       	subi	r18, 0x1E	; 30
    71fe:	30 40       	sbci	r19, 0x00	; 0
    7200:	20 0f       	add	r18, r16
    7202:	31 1f       	adc	r19, r17
    7204:	2e 0d       	add	r18, r14
    7206:	3f 1d       	adc	r19, r15
    7208:	2c 0d       	add	r18, r12
    720a:	3d 1d       	adc	r19, r13
    720c:	2a 19       	sub	r18, r10
    720e:	3b 09       	sbc	r19, r11
    7210:	28 19       	sub	r18, r8
    7212:	39 09       	sbc	r19, r9
    7214:	6c e3       	ldi	r22, 0x3C	; 60
    7216:	26 2e       	mov	r2, r22
    7218:	31 2c       	mov	r3, r1
    721a:	b1 01       	movw	r22, r2
    721c:	0e 94 a6 51 	call	0xa34c	; 0xa34c <__divmodhi4>
    7220:	28 0f       	add	r18, r24
    7222:	39 1f       	adc	r19, r25
    7224:	38 87       	std	Y+8, r19	; 0x08
    7226:	2f 83       	std	Y+7, r18	; 0x07
	//sumSensorsX = -proximityResultLinear[0]  + proximityResultLinear[4];	
	sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[2]>>2) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[6]>>2) - (proximityResultLinear[7]>>1)+ ((rand()%60)-30);
    7228:	e0 90 c3 02 	lds	r14, 0x02C3
    722c:	f0 90 c4 02 	lds	r15, 0x02C4
    7230:	f5 94       	asr	r15
    7232:	e7 94       	ror	r14
    7234:	00 91 c5 02 	lds	r16, 0x02C5
    7238:	10 91 c6 02 	lds	r17, 0x02C6
    723c:	15 95       	asr	r17
    723e:	07 95       	ror	r16
    7240:	15 95       	asr	r17
    7242:	07 95       	ror	r16
    7244:	c0 90 c7 02 	lds	r12, 0x02C7
    7248:	d0 90 c8 02 	lds	r13, 0x02C8
    724c:	d5 94       	asr	r13
    724e:	c7 94       	ror	r12
    7250:	a0 90 cb 02 	lds	r10, 0x02CB
    7254:	b0 90 cc 02 	lds	r11, 0x02CC
    7258:	b5 94       	asr	r11
    725a:	a7 94       	ror	r10
    725c:	40 90 cd 02 	lds	r4, 0x02CD
    7260:	50 90 ce 02 	lds	r5, 0x02CE
    7264:	55 94       	asr	r5
    7266:	47 94       	ror	r4
    7268:	55 94       	asr	r5
    726a:	47 94       	ror	r4
    726c:	80 90 cf 02 	lds	r8, 0x02CF
    7270:	90 90 d0 02 	lds	r9, 0x02D0
    7274:	95 94       	asr	r9
    7276:	87 94       	ror	r8
    7278:	0e 94 44 52 	call	0xa488	; 0xa488 <rand>
    727c:	97 01       	movw	r18, r14
    727e:	20 0f       	add	r18, r16
    7280:	31 1f       	adc	r19, r17
    7282:	2e 51       	subi	r18, 0x1E	; 30
    7284:	30 40       	sbci	r19, 0x00	; 0
    7286:	2c 0d       	add	r18, r12
    7288:	3d 1d       	adc	r19, r13
    728a:	2a 19       	sub	r18, r10
    728c:	3b 09       	sbc	r19, r11
    728e:	28 19       	sub	r18, r8
    7290:	39 09       	sbc	r19, r9
    7292:	24 19       	sub	r18, r4
    7294:	35 09       	sbc	r19, r5
    7296:	b1 01       	movw	r22, r2
    7298:	0e 94 a6 51 	call	0xa34c	; 0xa34c <__divmodhi4>
    729c:	28 0f       	add	r18, r24
    729e:	39 1f       	adc	r19, r25
	//sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + (rand()%30);

	// modify the velocity components based on sensor values
	if(desL >= 0) {
    72a0:	4b 81       	ldd	r20, Y+3	; 0x03
    72a2:	5c 81       	ldd	r21, Y+4	; 0x04
    72a4:	57 fd       	sbrc	r21, 7
    72a6:	e5 c0       	rjmp	.+458    	; 0x7472 <obstacleAvoidance+0x3b6>
		res = (signed long int)desL + (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
    72a8:	5a 01       	movw	r10, r20
    72aa:	cc 24       	eor	r12, r12
    72ac:	b7 fc       	sbrc	r11, 7
    72ae:	c0 94       	com	r12
    72b0:	dc 2c       	mov	r13, r12
    72b2:	8f 81       	ldd	r24, Y+7	; 0x07
    72b4:	98 85       	ldd	r25, Y+8	; 0x08
    72b6:	1c 01       	movw	r2, r24
    72b8:	44 24       	eor	r4, r4
    72ba:	37 fc       	sbrc	r3, 7
    72bc:	40 94       	com	r4
    72be:	54 2c       	mov	r5, r4
    72c0:	79 01       	movw	r14, r18
    72c2:	00 27       	eor	r16, r16
    72c4:	f7 fc       	sbrc	r15, 7
    72c6:	00 95       	com	r16
    72c8:	10 2f       	mov	r17, r16
    72ca:	c2 01       	movw	r24, r4
    72cc:	b1 01       	movw	r22, r2
    72ce:	6e 19       	sub	r22, r14
    72d0:	7f 09       	sbc	r23, r15
    72d2:	80 0b       	sbc	r24, r16
    72d4:	91 0b       	sbc	r25, r17
    72d6:	a6 01       	movw	r20, r12
    72d8:	95 01       	movw	r18, r10
    72da:	0e 94 73 51 	call	0xa2e6	; 0xa2e6 <__mulsi3>
    72de:	b6 e0       	ldi	r27, 0x06	; 6
    72e0:	95 95       	asr	r25
    72e2:	87 95       	ror	r24
    72e4:	77 95       	ror	r23
    72e6:	67 95       	ror	r22
    72e8:	ba 95       	dec	r27
    72ea:	d1 f7       	brne	.-12     	; 0x72e0 <obstacleAvoidance+0x224>
    72ec:	6a 0d       	add	r22, r10
    72ee:	7b 1d       	adc	r23, r11
    72f0:	8c 1d       	adc	r24, r12
    72f2:	9d 1d       	adc	r25, r13
		*pwmLeft = (signed int)res;
    72f4:	f3 01       	movw	r30, r6
    72f6:	71 83       	std	Z+1, r23	; 0x01
    72f8:	60 83       	st	Z, r22
	} else {
		res = (signed long int)desL - (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
		*pwmLeft = (signed int)res;
	}
	if(desR >=0) {
    72fa:	2d 81       	ldd	r18, Y+5	; 0x05
    72fc:	3e 81       	ldd	r19, Y+6	; 0x06
    72fe:	37 fd       	sbrc	r19, 7
    7300:	97 c0       	rjmp	.+302    	; 0x7430 <obstacleAvoidance+0x374>
		res = (signed long int)desR + (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
    7302:	59 01       	movw	r10, r18
    7304:	cc 24       	eor	r12, r12
    7306:	b7 fc       	sbrc	r11, 7
    7308:	c0 94       	com	r12
    730a:	dc 2c       	mov	r13, r12
    730c:	c8 01       	movw	r24, r16
    730e:	b7 01       	movw	r22, r14
    7310:	62 0d       	add	r22, r2
    7312:	73 1d       	adc	r23, r3
    7314:	84 1d       	adc	r24, r4
    7316:	95 1d       	adc	r25, r5
    7318:	a6 01       	movw	r20, r12
    731a:	95 01       	movw	r18, r10
    731c:	0e 94 73 51 	call	0xa2e6	; 0xa2e6 <__mulsi3>
    7320:	f6 e0       	ldi	r31, 0x06	; 6
    7322:	95 95       	asr	r25
    7324:	87 95       	ror	r24
    7326:	77 95       	ror	r23
    7328:	67 95       	ror	r22
    732a:	fa 95       	dec	r31
    732c:	d1 f7       	brne	.-12     	; 0x7322 <obstacleAvoidance+0x266>
    732e:	6a 0d       	add	r22, r10
    7330:	7b 1d       	adc	r23, r11
    7332:	8c 1d       	adc	r24, r12
    7334:	9d 1d       	adc	r25, r13
		*pwmRight = (signed int)res;
    7336:	9b 01       	movw	r18, r22
    7338:	e9 81       	ldd	r30, Y+1	; 0x01
    733a:	fa 81       	ldd	r31, Y+2	; 0x02
    733c:	71 83       	std	Z+1, r23	; 0x01
    733e:	60 83       	st	Z, r22
	} else {
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	}

	if(currentSelector == 10) {	// force a little bit the upwards direction in vertical motion
    7340:	80 91 4c 04 	lds	r24, 0x044C
    7344:	8a 30       	cpi	r24, 0x0A	; 10
    7346:	09 f4       	brne	.+2      	; 0x734a <obstacleAvoidance+0x28e>
    7348:	4b c0       	rjmp	.+150    	; 0x73e0 <obstacleAvoidance+0x324>
			}
		}
	}

	// force the values to be in the pwm maximum range
	if (*pwmRight>(MAX_MOTORS_PWM/2)) *pwmRight=(MAX_MOTORS_PWM/2);
    734a:	f2 e0       	ldi	r31, 0x02	; 2
    734c:	21 30       	cpi	r18, 0x01	; 1
    734e:	3f 07       	cpc	r19, r31
    7350:	44 f0       	brlt	.+16     	; 0x7362 <obstacleAvoidance+0x2a6>
    7352:	80 e0       	ldi	r24, 0x00	; 0
    7354:	92 e0       	ldi	r25, 0x02	; 2
    7356:	e9 81       	ldd	r30, Y+1	; 0x01
    7358:	fa 81       	ldd	r31, Y+2	; 0x02
    735a:	91 83       	std	Z+1, r25	; 0x01
    735c:	80 83       	st	Z, r24
    735e:	20 e0       	ldi	r18, 0x00	; 0
    7360:	32 e0       	ldi	r19, 0x02	; 2
	if (*pwmLeft>(MAX_MOTORS_PWM/2)) *pwmLeft=(MAX_MOTORS_PWM/2);
    7362:	f3 01       	movw	r30, r6
    7364:	80 81       	ld	r24, Z
    7366:	91 81       	ldd	r25, Z+1	; 0x01
    7368:	f2 e0       	ldi	r31, 0x02	; 2
    736a:	81 30       	cpi	r24, 0x01	; 1
    736c:	9f 07       	cpc	r25, r31
    736e:	4c f0       	brlt	.+18     	; 0x7382 <obstacleAvoidance+0x2c6>
    7370:	80 e0       	ldi	r24, 0x00	; 0
    7372:	92 e0       	ldi	r25, 0x02	; 2
    7374:	f3 01       	movw	r30, r6
    7376:	91 83       	std	Z+1, r25	; 0x01
    7378:	80 83       	st	Z, r24
    737a:	e9 81       	ldd	r30, Y+1	; 0x01
    737c:	fa 81       	ldd	r31, Y+2	; 0x02
    737e:	20 81       	ld	r18, Z
    7380:	31 81       	ldd	r19, Z+1	; 0x01
	if (*pwmRight<-(MAX_MOTORS_PWM/2)) *pwmRight=-(MAX_MOTORS_PWM/2);
    7382:	fe ef       	ldi	r31, 0xFE	; 254
    7384:	20 30       	cpi	r18, 0x00	; 0
    7386:	3f 07       	cpc	r19, r31
    7388:	4c f4       	brge	.+18     	; 0x739c <obstacleAvoidance+0x2e0>
    738a:	80 e0       	ldi	r24, 0x00	; 0
    738c:	9e ef       	ldi	r25, 0xFE	; 254
    738e:	e9 81       	ldd	r30, Y+1	; 0x01
    7390:	fa 81       	ldd	r31, Y+2	; 0x02
    7392:	91 83       	std	Z+1, r25	; 0x01
    7394:	80 83       	st	Z, r24
    7396:	f3 01       	movw	r30, r6
    7398:	80 81       	ld	r24, Z
    739a:	91 81       	ldd	r25, Z+1	; 0x01
	if (*pwmLeft<-(MAX_MOTORS_PWM/2)) *pwmLeft=-(MAX_MOTORS_PWM/2);
    739c:	fe ef       	ldi	r31, 0xFE	; 254
    739e:	80 30       	cpi	r24, 0x00	; 0
    73a0:	9f 07       	cpc	r25, r31
    73a2:	2c f4       	brge	.+10     	; 0x73ae <obstacleAvoidance+0x2f2>
    73a4:	80 e0       	ldi	r24, 0x00	; 0
    73a6:	9e ef       	ldi	r25, 0xFE	; 254
    73a8:	f3 01       	movw	r30, r6
    73aa:	91 83       	std	Z+1, r25	; 0x01
    73ac:	80 83       	st	Z, r24

}
    73ae:	28 96       	adiw	r28, 0x08	; 8
    73b0:	0f b6       	in	r0, 0x3f	; 63
    73b2:	f8 94       	cli
    73b4:	de bf       	out	0x3e, r29	; 62
    73b6:	0f be       	out	0x3f, r0	; 63
    73b8:	cd bf       	out	0x3d, r28	; 61
    73ba:	cf 91       	pop	r28
    73bc:	df 91       	pop	r29
    73be:	1f 91       	pop	r17
    73c0:	0f 91       	pop	r16
    73c2:	ff 90       	pop	r15
    73c4:	ef 90       	pop	r14
    73c6:	df 90       	pop	r13
    73c8:	cf 90       	pop	r12
    73ca:	bf 90       	pop	r11
    73cc:	af 90       	pop	r10
    73ce:	9f 90       	pop	r9
    73d0:	8f 90       	pop	r8
    73d2:	7f 90       	pop	r7
    73d4:	6f 90       	pop	r6
    73d6:	5f 90       	pop	r5
    73d8:	4f 90       	pop	r4
    73da:	3f 90       	pop	r3
    73dc:	2f 90       	pop	r2
    73de:	08 95       	ret
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	}

	if(currentSelector == 10) {	// force a little bit the upwards direction in vertical motion
		if(desL!=0 && desR!=0) {
    73e0:	2b 81       	ldd	r18, Y+3	; 0x03
    73e2:	3c 81       	ldd	r19, Y+4	; 0x04
    73e4:	21 15       	cp	r18, r1
    73e6:	31 05       	cpc	r19, r1
    73e8:	f1 f0       	breq	.+60     	; 0x7426 <obstacleAvoidance+0x36a>
    73ea:	2d 81       	ldd	r18, Y+5	; 0x05
    73ec:	3e 81       	ldd	r19, Y+6	; 0x06
    73ee:	21 15       	cp	r18, r1
    73f0:	31 05       	cpc	r19, r1
    73f2:	c9 f0       	breq	.+50     	; 0x7426 <obstacleAvoidance+0x36a>
			if(currentAngle<270 && currentAngle>90) {
    73f4:	80 91 3e 04 	lds	r24, 0x043E
    73f8:	90 91 3f 04 	lds	r25, 0x043F
    73fc:	8b 55       	subi	r24, 0x5B	; 91
    73fe:	90 40       	sbci	r25, 0x00	; 0
    7400:	83 3b       	cpi	r24, 0xB3	; 179
    7402:	91 05       	cpc	r25, r1
    7404:	08 f0       	brcs	.+2      	; 0x7408 <obstacleAvoidance+0x34c>
    7406:	5f c0       	rjmp	.+190    	; 0x74c6 <obstacleAvoidance+0x40a>
				*pwmLeft += 10;
    7408:	f3 01       	movw	r30, r6
    740a:	80 81       	ld	r24, Z
    740c:	91 81       	ldd	r25, Z+1	; 0x01
    740e:	0a 96       	adiw	r24, 0x0a	; 10
    7410:	91 83       	std	Z+1, r25	; 0x01
    7412:	80 83       	st	Z, r24
				*pwmRight -= 10;
    7414:	e9 81       	ldd	r30, Y+1	; 0x01
    7416:	fa 81       	ldd	r31, Y+2	; 0x02
    7418:	20 81       	ld	r18, Z
    741a:	31 81       	ldd	r19, Z+1	; 0x01
    741c:	2a 50       	subi	r18, 0x0A	; 10
    741e:	30 40       	sbci	r19, 0x00	; 0
    7420:	31 83       	std	Z+1, r19	; 0x01
    7422:	20 83       	st	Z, r18
    7424:	92 cf       	rjmp	.-220    	; 0x734a <obstacleAvoidance+0x28e>
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	}

	if(currentSelector == 10) {	// force a little bit the upwards direction in vertical motion
		if(desL!=0 && desR!=0) {
    7426:	e9 81       	ldd	r30, Y+1	; 0x01
    7428:	fa 81       	ldd	r31, Y+2	; 0x02
    742a:	20 81       	ld	r18, Z
    742c:	31 81       	ldd	r19, Z+1	; 0x01
    742e:	8d cf       	rjmp	.-230    	; 0x734a <obstacleAvoidance+0x28e>
	}
	if(desR >=0) {
		res = (signed long int)desR + (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	} else {
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
    7430:	59 01       	movw	r10, r18
    7432:	cc 24       	eor	r12, r12
    7434:	b7 fc       	sbrc	r11, 7
    7436:	c0 94       	com	r12
    7438:	dc 2c       	mov	r13, r12
    743a:	c2 01       	movw	r24, r4
    743c:	b1 01       	movw	r22, r2
    743e:	6e 19       	sub	r22, r14
    7440:	7f 09       	sbc	r23, r15
    7442:	80 0b       	sbc	r24, r16
    7444:	91 0b       	sbc	r25, r17
    7446:	a6 01       	movw	r20, r12
    7448:	95 01       	movw	r18, r10
    744a:	0e 94 73 51 	call	0xa2e6	; 0xa2e6 <__mulsi3>
    744e:	e6 e0       	ldi	r30, 0x06	; 6
    7450:	95 95       	asr	r25
    7452:	87 95       	ror	r24
    7454:	77 95       	ror	r23
    7456:	67 95       	ror	r22
    7458:	ea 95       	dec	r30
    745a:	d1 f7       	brne	.-12     	; 0x7450 <obstacleAvoidance+0x394>
    745c:	26 1b       	sub	r18, r22
    745e:	37 0b       	sbc	r19, r23
    7460:	48 0b       	sbc	r20, r24
    7462:	59 0b       	sbc	r21, r25
    7464:	da 01       	movw	r26, r20
    7466:	c9 01       	movw	r24, r18
		*pwmRight = (signed int)res;
    7468:	e9 81       	ldd	r30, Y+1	; 0x01
    746a:	fa 81       	ldd	r31, Y+2	; 0x02
    746c:	91 83       	std	Z+1, r25	; 0x01
    746e:	80 83       	st	Z, r24
    7470:	67 cf       	rjmp	.-306    	; 0x7340 <obstacleAvoidance+0x284>
	// modify the velocity components based on sensor values
	if(desL >= 0) {
		res = (signed long int)desL + (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmLeft = (signed int)res;
	} else {
		res = (signed long int)desL - (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
    7472:	5a 01       	movw	r10, r20
    7474:	cc 24       	eor	r12, r12
    7476:	b7 fc       	sbrc	r11, 7
    7478:	c0 94       	com	r12
    747a:	dc 2c       	mov	r13, r12
    747c:	8f 81       	ldd	r24, Y+7	; 0x07
    747e:	98 85       	ldd	r25, Y+8	; 0x08
    7480:	1c 01       	movw	r2, r24
    7482:	44 24       	eor	r4, r4
    7484:	37 fc       	sbrc	r3, 7
    7486:	40 94       	com	r4
    7488:	54 2c       	mov	r5, r4
    748a:	79 01       	movw	r14, r18
    748c:	00 27       	eor	r16, r16
    748e:	f7 fc       	sbrc	r15, 7
    7490:	00 95       	com	r16
    7492:	10 2f       	mov	r17, r16
    7494:	c8 01       	movw	r24, r16
    7496:	b7 01       	movw	r22, r14
    7498:	62 0d       	add	r22, r2
    749a:	73 1d       	adc	r23, r3
    749c:	84 1d       	adc	r24, r4
    749e:	95 1d       	adc	r25, r5
    74a0:	a6 01       	movw	r20, r12
    74a2:	95 01       	movw	r18, r10
    74a4:	0e 94 73 51 	call	0xa2e6	; 0xa2e6 <__mulsi3>
    74a8:	a6 e0       	ldi	r26, 0x06	; 6
    74aa:	95 95       	asr	r25
    74ac:	87 95       	ror	r24
    74ae:	77 95       	ror	r23
    74b0:	67 95       	ror	r22
    74b2:	aa 95       	dec	r26
    74b4:	d1 f7       	brne	.-12     	; 0x74aa <obstacleAvoidance+0x3ee>
    74b6:	26 1b       	sub	r18, r22
    74b8:	37 0b       	sbc	r19, r23
    74ba:	48 0b       	sbc	r20, r24
    74bc:	59 0b       	sbc	r21, r25
		*pwmLeft = (signed int)res;
    74be:	f3 01       	movw	r30, r6
    74c0:	31 83       	std	Z+1, r19	; 0x01
    74c2:	20 83       	st	Z, r18
    74c4:	1a cf       	rjmp	.-460    	; 0x72fa <obstacleAvoidance+0x23e>
		if(desL!=0 && desR!=0) {
			if(currentAngle<270 && currentAngle>90) {
				*pwmLeft += 10;
				*pwmRight -= 10;
			} else {
				*pwmLeft -= 10;
    74c6:	f3 01       	movw	r30, r6
    74c8:	80 81       	ld	r24, Z
    74ca:	91 81       	ldd	r25, Z+1	; 0x01
    74cc:	0a 97       	sbiw	r24, 0x0a	; 10
    74ce:	91 83       	std	Z+1, r25	; 0x01
    74d0:	80 83       	st	Z, r24
				*pwmRight += 10;
    74d2:	e9 81       	ldd	r30, Y+1	; 0x01
    74d4:	fa 81       	ldd	r31, Y+2	; 0x02
    74d6:	20 81       	ld	r18, Z
    74d8:	31 81       	ldd	r19, Z+1	; 0x01
    74da:	26 5f       	subi	r18, 0xF6	; 246
    74dc:	3f 4f       	sbci	r19, 0xFF	; 255
    74de:	31 83       	std	Z+1, r19	; 0x01
    74e0:	20 83       	st	Z, r18
    74e2:	33 cf       	rjmp	.-410    	; 0x734a <obstacleAvoidance+0x28e>

000074e4 <cliffDetected>:


char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    74e4:	80 91 69 02 	lds	r24, 0x0269
    74e8:	90 91 6a 02 	lds	r25, 0x026A
    74ec:	21 e0       	ldi	r18, 0x01	; 1
    74ee:	84 3a       	cpi	r24, 0xA4	; 164
    74f0:	92 07       	cpc	r25, r18
    74f2:	d4 f0       	brlt	.+52     	; 0x7528 <cliffDetected+0x44>
    74f4:	80 91 6b 02 	lds	r24, 0x026B
    74f8:	90 91 6c 02 	lds	r25, 0x026C
    74fc:	21 e0       	ldi	r18, 0x01	; 1
    74fe:	84 3a       	cpi	r24, 0xA4	; 164
    7500:	92 07       	cpc	r25, r18
    7502:	94 f0       	brlt	.+36     	; 0x7528 <cliffDetected+0x44>
    7504:	80 91 6d 02 	lds	r24, 0x026D
    7508:	90 91 6e 02 	lds	r25, 0x026E
    750c:	21 e0       	ldi	r18, 0x01	; 1
    750e:	84 3a       	cpi	r24, 0xA4	; 164
    7510:	92 07       	cpc	r25, r18
    7512:	74 f0       	brlt	.+28     	; 0x7530 <cliffDetected+0x4c>
	//if(proximityResult[8]<(proximityOffset[8]>>1) || proximityResult[9]<(proximityOffset[9]>>1) || proximityResult[10]<(proximityOffset[10]>>1) || proximityResult[11]<(proximityOffset[11]>>1)) {
		return 1;
    7514:	81 e0       	ldi	r24, 0x01	; 1
    7516:	20 91 6f 02 	lds	r18, 0x026F
    751a:	30 91 70 02 	lds	r19, 0x0270
    751e:	91 e0       	ldi	r25, 0x01	; 1
    7520:	24 3a       	cpi	r18, 0xA4	; 164
    7522:	39 07       	cpc	r19, r25
    7524:	1c f4       	brge	.+6      	; 0x752c <cliffDetected+0x48>
	} else {
		return 0;
	}


}
    7526:	08 95       	ret
char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
	//if(proximityResult[8]<(proximityOffset[8]>>1) || proximityResult[9]<(proximityOffset[9]>>1) || proximityResult[10]<(proximityOffset[10]>>1) || proximityResult[11]<(proximityOffset[11]>>1)) {
		return 1;
    7528:	81 e0       	ldi	r24, 0x01	; 1
    752a:	08 95       	ret
    752c:	80 e0       	ldi	r24, 0x00	; 0
    752e:	08 95       	ret
    7530:	81 e0       	ldi	r24, 0x01	; 1
	} else {
		return 0;
	}


}
    7532:	08 95       	ret

00007534 <enableObstacleAvoidance>:

void enableObstacleAvoidance() {
	obstacleAvoidanceEnabled=1;
    7534:	81 e0       	ldi	r24, 0x01	; 1
    7536:	80 93 6c 04 	sts	0x046C, r24
}
    753a:	08 95       	ret

0000753c <disableObstacleAvoidance>:

void disableObstacleAvoidance() {
	obstacleAvoidanceEnabled=0;
    753c:	10 92 6c 04 	sts	0x046C, r1
}
    7540:	08 95       	ret

00007542 <enableCliffAvoidance>:

void enableCliffAvoidance() {
	cliffAvoidanceEnabled=1;
    7542:	81 e0       	ldi	r24, 0x01	; 1
    7544:	80 93 6d 04 	sts	0x046D, r24
}
    7548:	08 95       	ret

0000754a <disableCliffAvoidance>:

void disableCliffAvoidance() {
	cliffAvoidanceEnabled=0;
    754a:	10 92 6d 04 	sts	0x046D, r1
}
    754e:	08 95       	ret

00007550 <initRGBleds>:
	// Period freq = Fosc/TOP (max timer value) => TOP = Fosc/period freq
	// We need a frequency of about 30 KHz => 8000000/30000 = 266
	// The waveform generation mode let us chose the TOP value to be 256
	// thus we get period freq = 8000000/256 = 31250 Hz

	TCCR1A = 0;
    7550:	a0 e8       	ldi	r26, 0x80	; 128
    7552:	b0 e0       	ldi	r27, 0x00	; 0
    7554:	1c 92       	st	X, r1
	TCCR1B = 0;
    7556:	e1 e8       	ldi	r30, 0x81	; 129
    7558:	f0 e0       	ldi	r31, 0x00	; 0
    755a:	10 82       	st	Z, r1

	// enable OCA, OCB, OCC; clear on match, set at bottom
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << COM1C1) | (1 << WGM10); 	
    755c:	8c 91       	ld	r24, X
    755e:	89 6a       	ori	r24, 0xA9	; 169
    7560:	8c 93       	st	X, r24
	// mode 5 => fast-pwm 8 bit; no prescaler
	TCCR1B |= (1 << WGM12) | (1 << CS10);										
    7562:	80 81       	ld	r24, Z
    7564:	89 60       	ori	r24, 0x09	; 9
    7566:	80 83       	st	Z, r24
	// the values for the leds pwm goes from 0 (max power on) to 255 (off)
	OCR1A = pwm_red;
    7568:	80 91 0c 02 	lds	r24, 0x020C
    756c:	90 e0       	ldi	r25, 0x00	; 0
    756e:	90 93 89 00 	sts	0x0089, r25
    7572:	80 93 88 00 	sts	0x0088, r24
	OCR1B = pwm_green;
    7576:	80 91 0d 02 	lds	r24, 0x020D
    757a:	90 e0       	ldi	r25, 0x00	; 0
    757c:	90 93 8b 00 	sts	0x008B, r25
    7580:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = pwm_blue;
    7584:	80 91 0e 02 	lds	r24, 0x020E
    7588:	90 e0       	ldi	r25, 0x00	; 0
    758a:	90 93 8d 00 	sts	0x008D, r25
    758e:	80 93 8c 00 	sts	0x008C, r24

}
    7592:	08 95       	ret

00007594 <toggleBlueLed>:

void toggleBlueLed() {

	blinkState = 1 - blinkState;
    7594:	81 e0       	ldi	r24, 0x01	; 1
    7596:	90 91 1b 03 	lds	r25, 0x031B
    759a:	89 1b       	sub	r24, r25
    759c:	80 93 1b 03 	sts	0x031B, r24

	if(blinkState) {
    75a0:	88 23       	and	r24, r24
    75a2:	39 f4       	brne	.+14     	; 0x75b2 <toggleBlueLed+0x1e>
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
		OCR1C = 255;
	} else {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC to get the maximum output power; this is due to the fact 
    75a4:	80 91 80 00 	lds	r24, 0x0080
    75a8:	87 7f       	andi	r24, 0xF7	; 247
    75aa:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// that the minimum duty cycle when the output compare is enable is 1 
    75ae:	2f 98       	cbi	0x05, 7	; 5
    75b0:	08 95       	ret
void toggleBlueLed() {

	blinkState = 1 - blinkState;

	if(blinkState) {
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
    75b2:	80 91 80 00 	lds	r24, 0x0080
    75b6:	88 60       	ori	r24, 0x08	; 8
    75b8:	80 93 80 00 	sts	0x0080, r24
		OCR1C = 255;
    75bc:	8f ef       	ldi	r24, 0xFF	; 255
    75be:	90 e0       	ldi	r25, 0x00	; 0
    75c0:	90 93 8d 00 	sts	0x008D, r25
    75c4:	80 93 8c 00 	sts	0x008C, r24
    75c8:	08 95       	ret

000075ca <updateRedLed>:

}

void updateRedLed(unsigned char value) {

	if(value == 0) {
    75ca:	88 23       	and	r24, r24
    75cc:	59 f0       	breq	.+22     	; 0x75e4 <updateRedLed+0x1a>
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1A1);	// always enable OCA in case it was disabled
    75ce:	90 91 80 00 	lds	r25, 0x0080
    75d2:	90 68       	ori	r25, 0x80	; 128
    75d4:	90 93 80 00 	sts	0x0080, r25
		OCR1A = value;
    75d8:	90 e0       	ldi	r25, 0x00	; 0
    75da:	90 93 89 00 	sts	0x0089, r25
    75de:	80 93 88 00 	sts	0x0088, r24
    75e2:	08 95       	ret
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
    75e4:	80 91 80 00 	lds	r24, 0x0080
    75e8:	8f 77       	andi	r24, 0x7F	; 127
    75ea:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
    75ee:	2d 98       	cbi	0x05, 5	; 5
    75f0:	08 95       	ret

000075f2 <updateGreenLed>:

}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
    75f2:	88 23       	and	r24, r24
    75f4:	59 f0       	breq	.+22     	; 0x760c <updateGreenLed+0x1a>
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
	} else {	
		TCCR1A |= (1 << COM1B1);	// always enable OCA in case it was disabled
    75f6:	90 91 80 00 	lds	r25, 0x0080
    75fa:	90 62       	ori	r25, 0x20	; 32
    75fc:	90 93 80 00 	sts	0x0080, r25
		OCR1B = value;
    7600:	90 e0       	ldi	r25, 0x00	; 0
    7602:	90 93 8b 00 	sts	0x008B, r25
    7606:	80 93 8a 00 	sts	0x008A, r24
    760a:	08 95       	ret
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
    760c:	80 91 80 00 	lds	r24, 0x0080
    7610:	8f 7d       	andi	r24, 0xDF	; 223
    7612:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
    7616:	2e 98       	cbi	0x05, 6	; 5
    7618:	08 95       	ret

0000761a <updateBlueLed>:

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
    761a:	88 23       	and	r24, r24
    761c:	59 f0       	breq	.+22     	; 0x7634 <updateBlueLed+0x1a>
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1C1);	// always enable OCA in case it was disabled
    761e:	90 91 80 00 	lds	r25, 0x0080
    7622:	98 60       	ori	r25, 0x08	; 8
    7624:	90 93 80 00 	sts	0x0080, r25
		OCR1C = value;
    7628:	90 e0       	ldi	r25, 0x00	; 0
    762a:	90 93 8d 00 	sts	0x008D, r25
    762e:	80 93 8c 00 	sts	0x008C, r24
    7632:	08 95       	ret
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
    7634:	80 91 80 00 	lds	r24, 0x0080
    7638:	87 7f       	andi	r24, 0xF7	; 247
    763a:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
    763e:	2f 98       	cbi	0x05, 7	; 5
    7640:	08 95       	ret

00007642 <setGreenLed>:

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    7642:	83 30       	cpi	r24, 0x03	; 3
    7644:	09 f4       	brne	.+2      	; 0x7648 <setGreenLed+0x6>
    7646:	5a c0       	rjmp	.+180    	; 0x76fc <setGreenLed+0xba>
    7648:	84 30       	cpi	r24, 0x04	; 4
    764a:	80 f0       	brcs	.+32     	; 0x766c <setGreenLed+0x2a>
    764c:	85 30       	cpi	r24, 0x05	; 5
    764e:	09 f4       	brne	.+2      	; 0x7652 <setGreenLed+0x10>
    7650:	41 c0       	rjmp	.+130    	; 0x76d4 <setGreenLed+0x92>
    7652:	85 30       	cpi	r24, 0x05	; 5
    7654:	d0 f4       	brcc	.+52     	; 0x768a <setGreenLed+0x48>
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
    7656:	66 23       	and	r22, r22
    7658:	09 f4       	brne	.+2      	; 0x765c <setGreenLed+0x1a>
    765a:	68 c0       	rjmp	.+208    	; 0x772c <setGreenLed+0xea>
    765c:	80 91 0b 01 	lds	r24, 0x010B
    7660:	8f 7e       	andi	r24, 0xEF	; 239
    7662:	80 93 0b 01 	sts	0x010B, r24
    7666:	80 91 0b 01 	lds	r24, 0x010B
    766a:	08 95       	ret

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    766c:	81 30       	cpi	r24, 0x01	; 1
    766e:	e1 f1       	breq	.+120    	; 0x76e8 <setGreenLed+0xa6>
    7670:	82 30       	cpi	r24, 0x02	; 2
    7672:	80 f0       	brcs	.+32     	; 0x7694 <setGreenLed+0x52>
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
    7674:	66 23       	and	r22, r22
    7676:	09 f4       	brne	.+2      	; 0x767a <setGreenLed+0x38>
    7678:	46 c0       	rjmp	.+140    	; 0x7706 <setGreenLed+0xc4>
    767a:	80 91 0b 01 	lds	r24, 0x010B
    767e:	8b 7f       	andi	r24, 0xFB	; 251
    7680:	80 93 0b 01 	sts	0x010B, r24
    7684:	80 91 0b 01 	lds	r24, 0x010B
    7688:	08 95       	ret

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    768a:	86 30       	cpi	r24, 0x06	; 6
    768c:	c9 f0       	breq	.+50     	; 0x76c0 <setGreenLed+0x7e>
    768e:	87 30       	cpi	r24, 0x07	; 7
    7690:	61 f0       	breq	.+24     	; 0x76aa <setGreenLed+0x68>
    7692:	08 95       	ret

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
    7694:	66 23       	and	r22, r22
    7696:	09 f4       	brne	.+2      	; 0x769a <setGreenLed+0x58>
    7698:	51 c0       	rjmp	.+162    	; 0x773c <setGreenLed+0xfa>
    769a:	80 91 0b 01 	lds	r24, 0x010B
    769e:	8e 7f       	andi	r24, 0xFE	; 254
    76a0:	80 93 0b 01 	sts	0x010B, r24
    76a4:	80 91 0b 01 	lds	r24, 0x010B
    76a8:	08 95       	ret
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
				break;

		case 7:	isOn?GREEN_LED7_ON:GREEN_LED7_OFF;
    76aa:	66 23       	and	r22, r22
    76ac:	09 f0       	breq	.+2      	; 0x76b0 <setGreenLed+0x6e>
    76ae:	5e c0       	rjmp	.+188    	; 0x776c <setGreenLed+0x12a>
    76b0:	80 91 0b 01 	lds	r24, 0x010B
    76b4:	80 68       	ori	r24, 0x80	; 128
    76b6:	80 93 0b 01 	sts	0x010B, r24
    76ba:	80 91 0b 01 	lds	r24, 0x010B
    76be:	08 95       	ret
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
    76c0:	66 23       	and	r22, r22
    76c2:	49 f1       	breq	.+82     	; 0x7716 <setGreenLed+0xd4>
    76c4:	80 91 0b 01 	lds	r24, 0x010B
    76c8:	8f 7b       	andi	r24, 0xBF	; 191
    76ca:	80 93 0b 01 	sts	0x010B, r24
    76ce:	80 91 0b 01 	lds	r24, 0x010B
    76d2:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
    76d4:	66 23       	and	r22, r22
    76d6:	d1 f1       	breq	.+116    	; 0x774c <setGreenLed+0x10a>
    76d8:	80 91 0b 01 	lds	r24, 0x010B
    76dc:	8f 7d       	andi	r24, 0xDF	; 223
    76de:	80 93 0b 01 	sts	0x010B, r24
    76e2:	80 91 0b 01 	lds	r24, 0x010B
    76e6:	08 95       	ret
	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
    76e8:	66 23       	and	r22, r22
    76ea:	c1 f1       	breq	.+112    	; 0x775c <setGreenLed+0x11a>
    76ec:	80 91 0b 01 	lds	r24, 0x010B
    76f0:	8d 7f       	andi	r24, 0xFD	; 253
    76f2:	80 93 0b 01 	sts	0x010B, r24
    76f6:	80 91 0b 01 	lds	r24, 0x010B
    76fa:	08 95       	ret
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
    76fc:	66 23       	and	r22, r22
    76fe:	99 f0       	breq	.+38     	; 0x7726 <setGreenLed+0xe4>
    7700:	a3 98       	cbi	0x14, 3	; 20
    7702:	84 b3       	in	r24, 0x14	; 20
    7704:	08 95       	ret
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
    7706:	80 91 0b 01 	lds	r24, 0x010B
    770a:	84 60       	ori	r24, 0x04	; 4
    770c:	80 93 0b 01 	sts	0x010B, r24
    7710:	80 91 0b 01 	lds	r24, 0x010B
    7714:	08 95       	ret
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
    7716:	80 91 0b 01 	lds	r24, 0x010B
    771a:	80 64       	ori	r24, 0x40	; 64
    771c:	80 93 0b 01 	sts	0x010B, r24
    7720:	80 91 0b 01 	lds	r24, 0x010B
    7724:	08 95       	ret
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
    7726:	a3 9a       	sbi	0x14, 3	; 20
    7728:	84 b3       	in	r24, 0x14	; 20
    772a:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
    772c:	80 91 0b 01 	lds	r24, 0x010B
    7730:	80 61       	ori	r24, 0x10	; 16
    7732:	80 93 0b 01 	sts	0x010B, r24
    7736:	80 91 0b 01 	lds	r24, 0x010B
    773a:	08 95       	ret

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
    773c:	80 91 0b 01 	lds	r24, 0x010B
    7740:	81 60       	ori	r24, 0x01	; 1
    7742:	80 93 0b 01 	sts	0x010B, r24
    7746:	80 91 0b 01 	lds	r24, 0x010B
    774a:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
    774c:	80 91 0b 01 	lds	r24, 0x010B
    7750:	80 62       	ori	r24, 0x20	; 32
    7752:	80 93 0b 01 	sts	0x010B, r24
    7756:	80 91 0b 01 	lds	r24, 0x010B
    775a:	08 95       	ret
	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
    775c:	80 91 0b 01 	lds	r24, 0x010B
    7760:	82 60       	ori	r24, 0x02	; 2
    7762:	80 93 0b 01 	sts	0x010B, r24
    7766:	80 91 0b 01 	lds	r24, 0x010B
    776a:	08 95       	ret
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
				break;

		case 7:	isOn?GREEN_LED7_ON:GREEN_LED7_OFF;
    776c:	80 91 0b 01 	lds	r24, 0x010B
    7770:	8f 77       	andi	r24, 0x7F	; 127
    7772:	80 93 0b 01 	sts	0x010B, r24
    7776:	80 91 0b 01 	lds	r24, 0x010B
    777a:	08 95       	ret

0000777c <turnOffGreenLeds>:

}

void turnOffGreenLeds() {

	GREEN_LED0_OFF;
    777c:	eb e0       	ldi	r30, 0x0B	; 11
    777e:	f1 e0       	ldi	r31, 0x01	; 1
    7780:	80 81       	ld	r24, Z
    7782:	81 60       	ori	r24, 0x01	; 1
    7784:	80 83       	st	Z, r24
	GREEN_LED1_OFF;
    7786:	80 81       	ld	r24, Z
    7788:	82 60       	ori	r24, 0x02	; 2
    778a:	80 83       	st	Z, r24
	GREEN_LED2_OFF;
    778c:	80 81       	ld	r24, Z
    778e:	84 60       	ori	r24, 0x04	; 4
    7790:	80 83       	st	Z, r24
	GREEN_LED3_OFF;
    7792:	a3 9a       	sbi	0x14, 3	; 20
	GREEN_LED4_OFF;
    7794:	80 81       	ld	r24, Z
    7796:	80 61       	ori	r24, 0x10	; 16
    7798:	80 83       	st	Z, r24
	GREEN_LED5_OFF;
    779a:	80 81       	ld	r24, Z
    779c:	80 62       	ori	r24, 0x20	; 32
    779e:	80 83       	st	Z, r24
	GREEN_LED6_OFF;
    77a0:	80 81       	ld	r24, Z
    77a2:	80 64       	ori	r24, 0x40	; 64
    77a4:	80 83       	st	Z, r24
	GREEN_LED7_OFF;
    77a6:	80 81       	ld	r24, Z
    77a8:	80 68       	ori	r24, 0x80	; 128
    77aa:	80 83       	st	Z, r24

}
    77ac:	08 95       	ret

000077ae <turnOnGreenLeds>:


void turnOnGreenLeds() {

	GREEN_LED0_ON;
    77ae:	eb e0       	ldi	r30, 0x0B	; 11
    77b0:	f1 e0       	ldi	r31, 0x01	; 1
    77b2:	80 81       	ld	r24, Z
    77b4:	8e 7f       	andi	r24, 0xFE	; 254
    77b6:	80 83       	st	Z, r24
	GREEN_LED1_ON;
    77b8:	80 81       	ld	r24, Z
    77ba:	8d 7f       	andi	r24, 0xFD	; 253
    77bc:	80 83       	st	Z, r24
	GREEN_LED2_ON;
    77be:	80 81       	ld	r24, Z
    77c0:	8b 7f       	andi	r24, 0xFB	; 251
    77c2:	80 83       	st	Z, r24
	GREEN_LED3_ON;
    77c4:	a3 98       	cbi	0x14, 3	; 20
	GREEN_LED4_ON;
    77c6:	80 81       	ld	r24, Z
    77c8:	8f 7e       	andi	r24, 0xEF	; 239
    77ca:	80 83       	st	Z, r24
	GREEN_LED5_ON;
    77cc:	80 81       	ld	r24, Z
    77ce:	8f 7d       	andi	r24, 0xDF	; 223
    77d0:	80 83       	st	Z, r24
	GREEN_LED6_ON;
    77d2:	80 81       	ld	r24, Z
    77d4:	8f 7b       	andi	r24, 0xBF	; 191
    77d6:	80 83       	st	Z, r24
	GREEN_LED7_ON;
    77d8:	80 81       	ld	r24, Z
    77da:	8f 77       	andi	r24, 0x7F	; 127
    77dc:	80 83       	st	Z, r24

}
    77de:	08 95       	ret

000077e0 <initAccelerometer>:

void initAccelerometer() {

	unsigned char ret;

	i2c_init();		// init I2C bus
    77e0:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <i2c_init>
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    77e4:	80 91 14 02 	lds	r24, 0x0214
    77e8:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    77ec:	88 23       	and	r24, r24
    77ee:	49 f4       	brne	.+18     	; 0x7802 <initAccelerometer+0x22>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    77f0:	86 e1       	ldi	r24, 0x16	; 22
    77f2:	0e 94 76 1c 	call	0x38ec	; 0x38ec <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    77f6:	85 e4       	ldi	r24, 0x45	; 69
    77f8:	0e 94 76 1c 	call	0x38ec	; 0x38ec <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    77fc:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <i2c_stop>
    7800:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    7802:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <i2c_stop>
	i2c_init();		// init I2C bus

	ret = initMMA7455L();

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
    7806:	86 ea       	ldi	r24, 0xA6	; 166
    7808:	90 e0       	ldi	r25, 0x00	; 0
    780a:	90 93 15 02 	sts	0x0215, r25
    780e:	80 93 14 02 	sts	0x0214, r24
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7812:	86 ea       	ldi	r24, 0xA6	; 166
    7814:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    7818:	88 23       	and	r24, r24
    781a:	41 f5       	brne	.+80     	; 0x786c <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    781c:	8d e2       	ldi	r24, 0x2D	; 45
    781e:	0e 94 76 1c 	call	0x38ec	; 0x38ec <i2c_write>
        i2c_write(0x08);	// measurement mode
    7822:	88 e0       	ldi	r24, 0x08	; 8
    7824:	0e 94 76 1c 	call	0x38ec	; 0x38ec <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    7828:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    782c:	80 91 14 02 	lds	r24, 0x0214
    7830:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    7834:	88 23       	and	r24, r24
    7836:	d1 f4       	brne	.+52     	; 0x786c <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    7838:	81 e3       	ldi	r24, 0x31	; 49
    783a:	0e 94 76 1c 	call	0x38ec	; 0x38ec <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    783e:	80 e0       	ldi	r24, 0x00	; 0
    7840:	0e 94 76 1c 	call	0x38ec	; 0x38ec <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    7844:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7848:	80 91 14 02 	lds	r24, 0x0214
    784c:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    7850:	88 23       	and	r24, r24
    7852:	61 f4       	brne	.+24     	; 0x786c <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    7854:	8c e2       	ldi	r24, 0x2C	; 44
    7856:	0e 94 76 1c 	call	0x38ec	; 0x38ec <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    785a:	89 e0       	ldi	r24, 0x09	; 9
    785c:	0e 94 76 1c 	call	0x38ec	; 0x38ec <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    7860:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <i2c_stop>
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
		} else {
			useAccel = USE_ADXL345;
    7864:	81 e0       	ldi	r24, 0x01	; 1
    7866:	80 93 2b 04 	sts	0x042B, r24
    786a:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    786c:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <i2c_stop>

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
    7870:	82 e0       	ldi	r24, 0x02	; 2
    7872:	80 93 2b 04 	sts	0x042B, r24
    7876:	08 95       	ret

00007878 <initMMA7455L>:
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7878:	80 91 14 02 	lds	r24, 0x0214
    787c:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    7880:	88 23       	and	r24, r24
    7882:	51 f4       	brne	.+20     	; 0x7898 <initMMA7455L+0x20>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    7884:	86 e1       	ldi	r24, 0x16	; 22
    7886:	0e 94 76 1c 	call	0x38ec	; 0x38ec <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    788a:	85 e4       	ldi	r24, 0x45	; 69
    788c:	0e 94 76 1c 	call	0x38ec	; 0x38ec <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    7890:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <i2c_stop>
    }

	return 0;				// configuration ok
    7894:	80 e0       	ldi	r24, 0x00	; 0

}
    7896:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    7898:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <i2c_stop>
		return 1;
    789c:	81 e0       	ldi	r24, 0x01	; 1
    789e:	08 95       	ret

000078a0 <initADXL345>:
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    78a0:	80 91 14 02 	lds	r24, 0x0214
    78a4:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    78a8:	88 23       	and	r24, r24
    78aa:	31 f5       	brne	.+76     	; 0x78f8 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    78ac:	8d e2       	ldi	r24, 0x2D	; 45
    78ae:	0e 94 76 1c 	call	0x38ec	; 0x38ec <i2c_write>
        i2c_write(0x08);	// measurement mode
    78b2:	88 e0       	ldi	r24, 0x08	; 8
    78b4:	0e 94 76 1c 	call	0x38ec	; 0x38ec <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    78b8:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    78bc:	80 91 14 02 	lds	r24, 0x0214
    78c0:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    78c4:	88 23       	and	r24, r24
    78c6:	c1 f4       	brne	.+48     	; 0x78f8 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    78c8:	81 e3       	ldi	r24, 0x31	; 49
    78ca:	0e 94 76 1c 	call	0x38ec	; 0x38ec <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    78ce:	80 e0       	ldi	r24, 0x00	; 0
    78d0:	0e 94 76 1c 	call	0x38ec	; 0x38ec <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    78d4:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    78d8:	80 91 14 02 	lds	r24, 0x0214
    78dc:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    78e0:	88 23       	and	r24, r24
    78e2:	51 f4       	brne	.+20     	; 0x78f8 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    78e4:	8c e2       	ldi	r24, 0x2C	; 44
    78e6:	0e 94 76 1c 	call	0x38ec	; 0x38ec <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    78ea:	89 e0       	ldi	r24, 0x09	; 9
    78ec:	0e 94 76 1c 	call	0x38ec	; 0x38ec <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    78f0:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <i2c_stop>
    }

	return 0;
    78f4:	80 e0       	ldi	r24, 0x00	; 0

}
    78f6:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    78f8:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <i2c_stop>
		return 1;
    78fc:	81 e0       	ldi	r24, 0x01	; 1
    78fe:	08 95       	ret

00007900 <readAccelXY>:

	return 0;

}

void readAccelXY() {
    7900:	ff 92       	push	r15
    7902:	0f 93       	push	r16
    7904:	1f 93       	push	r17
    7906:	df 93       	push	r29
    7908:	cf 93       	push	r28
    790a:	0f 92       	push	r0
    790c:	cd b7       	in	r28, 0x3d	; 61
    790e:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[4];

	if(useAccel == USE_MMAX7455L) {
    7910:	80 91 2b 04 	lds	r24, 0x042B
    7914:	88 23       	and	r24, r24
    7916:	91 f0       	breq	.+36     	; 0x793c <readAccelXY+0x3c>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else if(useAccel == USE_ADXL345) {
    7918:	81 30       	cpi	r24, 0x01	; 1
    791a:	09 f4       	brne	.+2      	; 0x791e <readAccelXY+0x1e>
    791c:	88 c0       	rjmp	.+272    	; 0x7a2e <readAccelXY+0x12e>
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else {

		accX = 0;
    791e:	10 92 2d 04 	sts	0x042D, r1
    7922:	10 92 2c 04 	sts	0x042C, r1
		accY = 0;
    7926:	10 92 2f 04 	sts	0x042F, r1
    792a:	10 92 2e 04 	sts	0x042E, r1

	}

}
    792e:	0f 90       	pop	r0
    7930:	cf 91       	pop	r28
    7932:	df 91       	pop	r29
    7934:	1f 91       	pop	r17
    7936:	0f 91       	pop	r16
    7938:	ff 90       	pop	r15
    793a:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    793c:	80 91 14 02 	lds	r24, 0x0214
    7940:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    7944:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
		i2c_write(0x32);											// sends address to read from (X LSB)
    7946:	0e 94 76 1c 	call	0x38ec	; 0x38ec <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    794a:	80 91 14 02 	lds	r24, 0x0214
    794e:	8f 5f       	subi	r24, 0xFF	; 255
    7950:	0e 94 48 1c 	call	0x3890	; 0x3890 <i2c_rep_start>

		for(i=0; i<3; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    7954:	0e 94 88 1c 	call	0x3910	; 0x3910 <i2c_readAck>
    7958:	08 2f       	mov	r16, r24
    795a:	0e 94 88 1c 	call	0x3910	; 0x3910 <i2c_readAck>
    795e:	f8 2e       	mov	r15, r24
    7960:	0e 94 88 1c 	call	0x3910	; 0x3910 <i2c_readAck>
    7964:	18 2f       	mov	r17, r24
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    7966:	0e 94 92 1c 	call	0x3924	; 0x3924 <i2c_readNak>
		i2c_stop();													// set stop conditon = release bus
    796a:	89 83       	std	Y+1, r24	; 0x01
    796c:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    7970:	90 91 5f 0b 	lds	r25, 0x0B5F
    7974:	89 81       	ldd	r24, Y+1	; 0x01
    7976:	99 23       	and	r25, r25
    7978:	39 f1       	breq	.+78     	; 0x79c8 <readAccelXY+0xc8>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    797a:	4f 2d       	mov	r20, r15
    797c:	55 27       	eor	r21, r21
    797e:	47 fd       	sbrc	r20, 7
    7980:	50 95       	com	r21
    7982:	54 2f       	mov	r21, r20
    7984:	44 27       	eor	r20, r20
    7986:	60 2f       	mov	r22, r16
    7988:	77 27       	eor	r23, r23
    798a:	67 fd       	sbrc	r22, 7
    798c:	70 95       	com	r23
    798e:	46 2b       	or	r20, r22
    7990:	57 2b       	or	r21, r23
    7992:	50 93 2d 04 	sts	0x042D, r21
    7996:	40 93 2c 04 	sts	0x042C, r20
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    799a:	28 2f       	mov	r18, r24
    799c:	33 27       	eor	r19, r19
    799e:	27 fd       	sbrc	r18, 7
    79a0:	30 95       	com	r19
    79a2:	32 2f       	mov	r19, r18
    79a4:	22 27       	eor	r18, r18
    79a6:	81 2f       	mov	r24, r17
    79a8:	99 27       	eor	r25, r25
    79aa:	87 fd       	sbrc	r24, 7
    79ac:	90 95       	com	r25
    79ae:	28 2b       	or	r18, r24
    79b0:	39 2b       	or	r19, r25
    79b2:	30 93 2f 04 	sts	0x042F, r19
    79b6:	20 93 2e 04 	sts	0x042E, r18
		accX = 0;
		accY = 0;

	}

}
    79ba:	0f 90       	pop	r0
    79bc:	cf 91       	pop	r28
    79be:	df 91       	pop	r29
    79c0:	1f 91       	pop	r17
    79c2:	0f 91       	pop	r16
    79c4:	ff 90       	pop	r15
    79c6:	08 95       	ret

		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    79c8:	4f 2d       	mov	r20, r15
    79ca:	55 27       	eor	r21, r21
    79cc:	47 fd       	sbrc	r20, 7
    79ce:	50 95       	com	r21
    79d0:	54 2f       	mov	r21, r20
    79d2:	44 27       	eor	r20, r20
    79d4:	60 2f       	mov	r22, r16
    79d6:	77 27       	eor	r23, r23
    79d8:	67 fd       	sbrc	r22, 7
    79da:	70 95       	com	r23
    79dc:	46 2b       	or	r20, r22
    79de:	57 2b       	or	r21, r23
    79e0:	60 91 32 04 	lds	r22, 0x0432
    79e4:	70 91 33 04 	lds	r23, 0x0433
    79e8:	46 1b       	sub	r20, r22
    79ea:	57 0b       	sbc	r21, r23
    79ec:	50 93 2d 04 	sts	0x042D, r21
    79f0:	40 93 2c 04 	sts	0x042C, r20
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    79f4:	28 2f       	mov	r18, r24
    79f6:	33 27       	eor	r19, r19
    79f8:	27 fd       	sbrc	r18, 7
    79fa:	30 95       	com	r19
    79fc:	32 2f       	mov	r19, r18
    79fe:	22 27       	eor	r18, r18
    7a00:	81 2f       	mov	r24, r17
    7a02:	99 27       	eor	r25, r25
    7a04:	87 fd       	sbrc	r24, 7
    7a06:	90 95       	com	r25
    7a08:	28 2b       	or	r18, r24
    7a0a:	39 2b       	or	r19, r25
    7a0c:	80 91 34 04 	lds	r24, 0x0434
    7a10:	90 91 35 04 	lds	r25, 0x0435
    7a14:	28 1b       	sub	r18, r24
    7a16:	39 0b       	sbc	r19, r25
    7a18:	30 93 2f 04 	sts	0x042F, r19
    7a1c:	20 93 2e 04 	sts	0x042E, r18
		accX = 0;
		accY = 0;

	}

}
    7a20:	0f 90       	pop	r0
    7a22:	cf 91       	pop	r28
    7a24:	df 91       	pop	r29
    7a26:	1f 91       	pop	r17
    7a28:	0f 91       	pop	r16
    7a2a:	ff 90       	pop	r15
    7a2c:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    7a2e:	80 91 14 02 	lds	r24, 0x0214
    7a32:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    7a36:	82 e3       	ldi	r24, 0x32	; 50
    7a38:	86 cf       	rjmp	.-244    	; 0x7946 <readAccelXY+0x46>

00007a3a <readAccelXYZ>:

	}

}

void readAccelXYZ() {
    7a3a:	df 93       	push	r29
    7a3c:	cf 93       	push	r28
    7a3e:	00 d0       	rcall	.+0      	; 0x7a40 <readAccelXYZ+0x6>
    7a40:	00 d0       	rcall	.+0      	; 0x7a42 <readAccelXYZ+0x8>
    7a42:	cd b7       	in	r28, 0x3d	; 61
    7a44:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[6];

	if(useAccel == USE_MMAX7455L) {
    7a46:	80 91 2b 04 	lds	r24, 0x042B
    7a4a:	88 23       	and	r24, r24
    7a4c:	c1 f0       	breq	.+48     	; 0x7a7e <readAccelXYZ+0x44>
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    7a4e:	81 30       	cpi	r24, 0x01	; 1
    7a50:	09 f4       	brne	.+2      	; 0x7a54 <readAccelXYZ+0x1a>
    7a52:	ad c0       	rjmp	.+346    	; 0x7bae <readAccelXYZ+0x174>
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else {

		accX = 0;
    7a54:	10 92 2d 04 	sts	0x042D, r1
    7a58:	10 92 2c 04 	sts	0x042C, r1
		accY = 0;
    7a5c:	10 92 2f 04 	sts	0x042F, r1
    7a60:	10 92 2e 04 	sts	0x042E, r1
		accZ = 0;
    7a64:	10 92 31 04 	sts	0x0431, r1
    7a68:	10 92 30 04 	sts	0x0430, r1

	}

}
    7a6c:	26 96       	adiw	r28, 0x06	; 6
    7a6e:	0f b6       	in	r0, 0x3f	; 63
    7a70:	f8 94       	cli
    7a72:	de bf       	out	0x3e, r29	; 62
    7a74:	0f be       	out	0x3f, r0	; 63
    7a76:	cd bf       	out	0x3d, r28	; 61
    7a78:	cf 91       	pop	r28
    7a7a:	df 91       	pop	r29
    7a7c:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    7a7e:	80 91 14 02 	lds	r24, 0x0214
    7a82:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    7a86:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
		i2c_write(0x32);											// sends address to read from (X LSB)
    7a88:	0e 94 76 1c 	call	0x38ec	; 0x38ec <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    7a8c:	80 91 14 02 	lds	r24, 0x0214
    7a90:	8f 5f       	subi	r24, 0xFF	; 255
    7a92:	0e 94 48 1c 	call	0x3890	; 0x3890 <i2c_rep_start>

		for(i=0; i<5; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    7a96:	0e 94 88 1c 	call	0x3910	; 0x3910 <i2c_readAck>
    7a9a:	89 83       	std	Y+1, r24	; 0x01
    7a9c:	0e 94 88 1c 	call	0x3910	; 0x3910 <i2c_readAck>
    7aa0:	8a 83       	std	Y+2, r24	; 0x02
    7aa2:	0e 94 88 1c 	call	0x3910	; 0x3910 <i2c_readAck>
    7aa6:	8b 83       	std	Y+3, r24	; 0x03
    7aa8:	0e 94 88 1c 	call	0x3910	; 0x3910 <i2c_readAck>
    7aac:	8c 83       	std	Y+4, r24	; 0x04
    7aae:	0e 94 88 1c 	call	0x3910	; 0x3910 <i2c_readAck>
    7ab2:	8d 83       	std	Y+5, r24	; 0x05
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    7ab4:	0e 94 92 1c 	call	0x3924	; 0x3924 <i2c_readNak>
    7ab8:	8e 83       	std	Y+6, r24	; 0x06
		i2c_stop();													// set stop conditon = release bus
    7aba:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    7abe:	80 91 5f 0b 	lds	r24, 0x0B5F
    7ac2:	88 23       	and	r24, r24
    7ac4:	89 f1       	breq	.+98     	; 0x7b28 <readAccelXYZ+0xee>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    7ac6:	8a 81       	ldd	r24, Y+2	; 0x02
    7ac8:	99 27       	eor	r25, r25
    7aca:	87 fd       	sbrc	r24, 7
    7acc:	90 95       	com	r25
    7ace:	98 2f       	mov	r25, r24
    7ad0:	88 27       	eor	r24, r24
    7ad2:	29 81       	ldd	r18, Y+1	; 0x01
    7ad4:	33 27       	eor	r19, r19
    7ad6:	27 fd       	sbrc	r18, 7
    7ad8:	30 95       	com	r19
    7ada:	82 2b       	or	r24, r18
    7adc:	93 2b       	or	r25, r19
    7ade:	90 93 2d 04 	sts	0x042D, r25
    7ae2:	80 93 2c 04 	sts	0x042C, r24
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    7ae6:	8c 81       	ldd	r24, Y+4	; 0x04
    7ae8:	99 27       	eor	r25, r25
    7aea:	87 fd       	sbrc	r24, 7
    7aec:	90 95       	com	r25
    7aee:	98 2f       	mov	r25, r24
    7af0:	88 27       	eor	r24, r24
    7af2:	2b 81       	ldd	r18, Y+3	; 0x03
    7af4:	33 27       	eor	r19, r19
    7af6:	27 fd       	sbrc	r18, 7
    7af8:	30 95       	com	r19
    7afa:	82 2b       	or	r24, r18
    7afc:	93 2b       	or	r25, r19
    7afe:	90 93 2f 04 	sts	0x042F, r25
    7b02:	80 93 2e 04 	sts	0x042E, r24
			accZ = ((signed int)buff[5]<<8)|buff[4];    			// Z axis
    7b06:	8e 81       	ldd	r24, Y+6	; 0x06
    7b08:	99 27       	eor	r25, r25
    7b0a:	87 fd       	sbrc	r24, 7
    7b0c:	90 95       	com	r25
    7b0e:	98 2f       	mov	r25, r24
    7b10:	88 27       	eor	r24, r24
    7b12:	2d 81       	ldd	r18, Y+5	; 0x05
    7b14:	33 27       	eor	r19, r19
    7b16:	27 fd       	sbrc	r18, 7
    7b18:	30 95       	com	r19
    7b1a:	82 2b       	or	r24, r18
    7b1c:	93 2b       	or	r25, r19
    7b1e:	90 93 31 04 	sts	0x0431, r25
    7b22:	80 93 30 04 	sts	0x0430, r24
    7b26:	a2 cf       	rjmp	.-188    	; 0x7a6c <readAccelXYZ+0x32>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    7b28:	8a 81       	ldd	r24, Y+2	; 0x02
    7b2a:	99 27       	eor	r25, r25
    7b2c:	87 fd       	sbrc	r24, 7
    7b2e:	90 95       	com	r25
    7b30:	98 2f       	mov	r25, r24
    7b32:	88 27       	eor	r24, r24
    7b34:	29 81       	ldd	r18, Y+1	; 0x01
    7b36:	33 27       	eor	r19, r19
    7b38:	27 fd       	sbrc	r18, 7
    7b3a:	30 95       	com	r19
    7b3c:	82 2b       	or	r24, r18
    7b3e:	93 2b       	or	r25, r19
    7b40:	20 91 32 04 	lds	r18, 0x0432
    7b44:	30 91 33 04 	lds	r19, 0x0433
    7b48:	82 1b       	sub	r24, r18
    7b4a:	93 0b       	sbc	r25, r19
    7b4c:	90 93 2d 04 	sts	0x042D, r25
    7b50:	80 93 2c 04 	sts	0x042C, r24
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    7b54:	8c 81       	ldd	r24, Y+4	; 0x04
    7b56:	99 27       	eor	r25, r25
    7b58:	87 fd       	sbrc	r24, 7
    7b5a:	90 95       	com	r25
    7b5c:	98 2f       	mov	r25, r24
    7b5e:	88 27       	eor	r24, r24
    7b60:	2b 81       	ldd	r18, Y+3	; 0x03
    7b62:	33 27       	eor	r19, r19
    7b64:	27 fd       	sbrc	r18, 7
    7b66:	30 95       	com	r19
    7b68:	82 2b       	or	r24, r18
    7b6a:	93 2b       	or	r25, r19
    7b6c:	20 91 34 04 	lds	r18, 0x0434
    7b70:	30 91 35 04 	lds	r19, 0x0435
    7b74:	82 1b       	sub	r24, r18
    7b76:	93 0b       	sbc	r25, r19
    7b78:	90 93 2f 04 	sts	0x042F, r25
    7b7c:	80 93 2e 04 	sts	0x042E, r24
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
    7b80:	8e 81       	ldd	r24, Y+6	; 0x06
    7b82:	99 27       	eor	r25, r25
    7b84:	87 fd       	sbrc	r24, 7
    7b86:	90 95       	com	r25
    7b88:	98 2f       	mov	r25, r24
    7b8a:	88 27       	eor	r24, r24
    7b8c:	2d 81       	ldd	r18, Y+5	; 0x05
    7b8e:	33 27       	eor	r19, r19
    7b90:	27 fd       	sbrc	r18, 7
    7b92:	30 95       	com	r19
    7b94:	82 2b       	or	r24, r18
    7b96:	93 2b       	or	r25, r19
    7b98:	20 91 36 04 	lds	r18, 0x0436
    7b9c:	30 91 37 04 	lds	r19, 0x0437
    7ba0:	82 1b       	sub	r24, r18
    7ba2:	93 0b       	sbc	r25, r19
    7ba4:	90 93 31 04 	sts	0x0431, r25
    7ba8:	80 93 30 04 	sts	0x0430, r24
    7bac:	5f cf       	rjmp	.-322    	; 0x7a6c <readAccelXYZ+0x32>
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    7bae:	80 91 14 02 	lds	r24, 0x0214
    7bb2:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    7bb6:	82 e3       	ldi	r24, 0x32	; 50
    7bb8:	67 cf       	rjmp	.-306    	; 0x7a88 <readAccelXYZ+0x4e>

00007bba <calibrateSensors>:

#include "sensors.h"


void calibrateSensors() {
    7bba:	cf 93       	push	r28
    7bbc:	df 93       	push	r29

	unsigned int i=0;

	pwm_red = 0;
    7bbe:	10 92 0c 02 	sts	0x020C, r1
	pwm_green = 0;
    7bc2:	10 92 0d 02 	sts	0x020D, r1
	pwm_blue = 0;
    7bc6:	10 92 0e 02 	sts	0x020E, r1
	updateRedLed(pwm_red);
    7bca:	80 e0       	ldi	r24, 0x00	; 0
    7bcc:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <updateRedLed>
	updateGreenLed(pwm_green);
    7bd0:	80 91 0d 02 	lds	r24, 0x020D
    7bd4:	0e 94 f9 3a 	call	0x75f2	; 0x75f2 <updateGreenLed>
	updateBlueLed(pwm_blue);
    7bd8:	80 91 0e 02 	lds	r24, 0x020E
    7bdc:	0e 94 0d 3b 	call	0x761a	; 0x761a <updateBlueLed>

	calibrationCycle = 0;
    7be0:	10 92 4e 04 	sts	0x044E, r1
    7be4:	10 92 4d 04 	sts	0x044D, r1
	startCalibration = 1;
    7be8:	81 e0       	ldi	r24, 0x01	; 1
    7bea:	80 93 5f 0b 	sts	0x0B5F, r24
					}
					accOffsetXSum = 0;
					accOffsetYSum = 0;
					accOffsetZSum = 0;

					calibrationCycle++;
    7bee:	c1 e0       	ldi	r28, 0x01	; 1
    7bf0:	d0 e0       	ldi	r29, 0x00	; 0
	calibrationCycle = 0;
	startCalibration = 1;

	while(startCalibration) {

		readAccelXYZ();
    7bf2:	0e 94 1d 3d 	call	0x7a3a	; 0x7a3a <readAccelXYZ>

		if(calibrationCycle<=CALIBRATION_CYCLES) {
    7bf6:	20 91 4d 04 	lds	r18, 0x044D
    7bfa:	30 91 4e 04 	lds	r19, 0x044E
    7bfe:	21 31       	cpi	r18, 0x11	; 17
    7c00:	31 05       	cpc	r19, r1
    7c02:	0c f4       	brge	.+2      	; 0x7c06 <calibrateSensors+0x4c>
    7c04:	35 c1       	rjmp	.+618    	; 0x7e70 <calibrateSensors+0x2b6>
			continue;

		} else if(calibrationCycle > CALIBRATION_CYCLES) {

			for(i=0;i<12;i++) {
				proximityOffset[i] = proximitySum[i]>>4;
    7c06:	80 91 89 02 	lds	r24, 0x0289
    7c0a:	90 91 8a 02 	lds	r25, 0x028A
    7c0e:	a0 91 8b 02 	lds	r26, 0x028B
    7c12:	b0 91 8c 02 	lds	r27, 0x028C
    7c16:	54 e0       	ldi	r21, 0x04	; 4
    7c18:	b6 95       	lsr	r27
    7c1a:	a7 95       	ror	r26
    7c1c:	97 95       	ror	r25
    7c1e:	87 95       	ror	r24
    7c20:	5a 95       	dec	r21
    7c22:	d1 f7       	brne	.-12     	; 0x7c18 <calibrateSensors+0x5e>
    7c24:	90 93 72 02 	sts	0x0272, r25
    7c28:	80 93 71 02 	sts	0x0271, r24
    7c2c:	80 91 8d 02 	lds	r24, 0x028D
    7c30:	90 91 8e 02 	lds	r25, 0x028E
    7c34:	a0 91 8f 02 	lds	r26, 0x028F
    7c38:	b0 91 90 02 	lds	r27, 0x0290
    7c3c:	44 e0       	ldi	r20, 0x04	; 4
    7c3e:	b6 95       	lsr	r27
    7c40:	a7 95       	ror	r26
    7c42:	97 95       	ror	r25
    7c44:	87 95       	ror	r24
    7c46:	4a 95       	dec	r20
    7c48:	d1 f7       	brne	.-12     	; 0x7c3e <calibrateSensors+0x84>
    7c4a:	90 93 74 02 	sts	0x0274, r25
    7c4e:	80 93 73 02 	sts	0x0273, r24
    7c52:	80 91 91 02 	lds	r24, 0x0291
    7c56:	90 91 92 02 	lds	r25, 0x0292
    7c5a:	a0 91 93 02 	lds	r26, 0x0293
    7c5e:	b0 91 94 02 	lds	r27, 0x0294
    7c62:	34 e0       	ldi	r19, 0x04	; 4
    7c64:	b6 95       	lsr	r27
    7c66:	a7 95       	ror	r26
    7c68:	97 95       	ror	r25
    7c6a:	87 95       	ror	r24
    7c6c:	3a 95       	dec	r19
    7c6e:	d1 f7       	brne	.-12     	; 0x7c64 <calibrateSensors+0xaa>
    7c70:	90 93 76 02 	sts	0x0276, r25
    7c74:	80 93 75 02 	sts	0x0275, r24
    7c78:	80 91 95 02 	lds	r24, 0x0295
    7c7c:	90 91 96 02 	lds	r25, 0x0296
    7c80:	a0 91 97 02 	lds	r26, 0x0297
    7c84:	b0 91 98 02 	lds	r27, 0x0298
    7c88:	24 e0       	ldi	r18, 0x04	; 4
    7c8a:	b6 95       	lsr	r27
    7c8c:	a7 95       	ror	r26
    7c8e:	97 95       	ror	r25
    7c90:	87 95       	ror	r24
    7c92:	2a 95       	dec	r18
    7c94:	d1 f7       	brne	.-12     	; 0x7c8a <calibrateSensors+0xd0>
    7c96:	90 93 78 02 	sts	0x0278, r25
    7c9a:	80 93 77 02 	sts	0x0277, r24
    7c9e:	80 91 99 02 	lds	r24, 0x0299
    7ca2:	90 91 9a 02 	lds	r25, 0x029A
    7ca6:	a0 91 9b 02 	lds	r26, 0x029B
    7caa:	b0 91 9c 02 	lds	r27, 0x029C
    7cae:	f4 e0       	ldi	r31, 0x04	; 4
    7cb0:	b6 95       	lsr	r27
    7cb2:	a7 95       	ror	r26
    7cb4:	97 95       	ror	r25
    7cb6:	87 95       	ror	r24
    7cb8:	fa 95       	dec	r31
    7cba:	d1 f7       	brne	.-12     	; 0x7cb0 <calibrateSensors+0xf6>
    7cbc:	90 93 7a 02 	sts	0x027A, r25
    7cc0:	80 93 79 02 	sts	0x0279, r24
    7cc4:	80 91 9d 02 	lds	r24, 0x029D
    7cc8:	90 91 9e 02 	lds	r25, 0x029E
    7ccc:	a0 91 9f 02 	lds	r26, 0x029F
    7cd0:	b0 91 a0 02 	lds	r27, 0x02A0
    7cd4:	e4 e0       	ldi	r30, 0x04	; 4
    7cd6:	b6 95       	lsr	r27
    7cd8:	a7 95       	ror	r26
    7cda:	97 95       	ror	r25
    7cdc:	87 95       	ror	r24
    7cde:	ea 95       	dec	r30
    7ce0:	d1 f7       	brne	.-12     	; 0x7cd6 <calibrateSensors+0x11c>
    7ce2:	90 93 7c 02 	sts	0x027C, r25
    7ce6:	80 93 7b 02 	sts	0x027B, r24
    7cea:	80 91 a1 02 	lds	r24, 0x02A1
    7cee:	90 91 a2 02 	lds	r25, 0x02A2
    7cf2:	a0 91 a3 02 	lds	r26, 0x02A3
    7cf6:	b0 91 a4 02 	lds	r27, 0x02A4
    7cfa:	74 e0       	ldi	r23, 0x04	; 4
    7cfc:	b6 95       	lsr	r27
    7cfe:	a7 95       	ror	r26
    7d00:	97 95       	ror	r25
    7d02:	87 95       	ror	r24
    7d04:	7a 95       	dec	r23
    7d06:	d1 f7       	brne	.-12     	; 0x7cfc <calibrateSensors+0x142>
    7d08:	90 93 7e 02 	sts	0x027E, r25
    7d0c:	80 93 7d 02 	sts	0x027D, r24
    7d10:	80 91 a5 02 	lds	r24, 0x02A5
    7d14:	90 91 a6 02 	lds	r25, 0x02A6
    7d18:	a0 91 a7 02 	lds	r26, 0x02A7
    7d1c:	b0 91 a8 02 	lds	r27, 0x02A8
    7d20:	64 e0       	ldi	r22, 0x04	; 4
    7d22:	b6 95       	lsr	r27
    7d24:	a7 95       	ror	r26
    7d26:	97 95       	ror	r25
    7d28:	87 95       	ror	r24
    7d2a:	6a 95       	dec	r22
    7d2c:	d1 f7       	brne	.-12     	; 0x7d22 <calibrateSensors+0x168>
    7d2e:	90 93 80 02 	sts	0x0280, r25
    7d32:	80 93 7f 02 	sts	0x027F, r24
    7d36:	80 91 ad 02 	lds	r24, 0x02AD
    7d3a:	90 91 ae 02 	lds	r25, 0x02AE
    7d3e:	a0 91 af 02 	lds	r26, 0x02AF
    7d42:	b0 91 b0 02 	lds	r27, 0x02B0
    7d46:	54 e0       	ldi	r21, 0x04	; 4
    7d48:	b6 95       	lsr	r27
    7d4a:	a7 95       	ror	r26
    7d4c:	97 95       	ror	r25
    7d4e:	87 95       	ror	r24
    7d50:	5a 95       	dec	r21
    7d52:	d1 f7       	brne	.-12     	; 0x7d48 <calibrateSensors+0x18e>
    7d54:	9c 01       	movw	r18, r24
    7d56:	80 91 b1 02 	lds	r24, 0x02B1
    7d5a:	90 91 b2 02 	lds	r25, 0x02B2
    7d5e:	a0 91 b3 02 	lds	r26, 0x02B3
    7d62:	b0 91 b4 02 	lds	r27, 0x02B4
    7d66:	44 e0       	ldi	r20, 0x04	; 4
    7d68:	b6 95       	lsr	r27
    7d6a:	a7 95       	ror	r26
    7d6c:	97 95       	ror	r25
    7d6e:	87 95       	ror	r24
    7d70:	4a 95       	dec	r20
    7d72:	d1 f7       	brne	.-12     	; 0x7d68 <calibrateSensors+0x1ae>
    7d74:	bc 01       	movw	r22, r24
    7d76:	80 91 b5 02 	lds	r24, 0x02B5
    7d7a:	90 91 b6 02 	lds	r25, 0x02B6
    7d7e:	a0 91 b7 02 	lds	r26, 0x02B7
    7d82:	b0 91 b8 02 	lds	r27, 0x02B8
    7d86:	f4 e0       	ldi	r31, 0x04	; 4
    7d88:	b6 95       	lsr	r27
    7d8a:	a7 95       	ror	r26
    7d8c:	97 95       	ror	r25
    7d8e:	87 95       	ror	r24
    7d90:	fa 95       	dec	r31
    7d92:	d1 f7       	brne	.-12     	; 0x7d88 <calibrateSensors+0x1ce>
    7d94:	ac 01       	movw	r20, r24
    7d96:	80 91 a9 02 	lds	r24, 0x02A9
    7d9a:	90 91 aa 02 	lds	r25, 0x02AA
    7d9e:	a0 91 ab 02 	lds	r26, 0x02AB
    7da2:	b0 91 ac 02 	lds	r27, 0x02AC
    7da6:	e4 e0       	ldi	r30, 0x04	; 4
    7da8:	b6 95       	lsr	r27
    7daa:	a7 95       	ror	r26
    7dac:	97 95       	ror	r25
    7dae:	87 95       	ror	r24
    7db0:	ea 95       	dec	r30
    7db2:	d1 f7       	brne	.-12     	; 0x7da8 <calibrateSensors+0x1ee>
			}

			for(i=8; i<12; i++) {
				proximityOffset[i] -= 512;	// move the "0" to 512 (values around 512)
    7db4:	80 50       	subi	r24, 0x00	; 0
    7db6:	92 40       	sbci	r25, 0x02	; 2
    7db8:	90 93 82 02 	sts	0x0282, r25
    7dbc:	80 93 81 02 	sts	0x0281, r24
    7dc0:	20 50       	subi	r18, 0x00	; 0
    7dc2:	32 40       	sbci	r19, 0x02	; 2
    7dc4:	30 93 84 02 	sts	0x0284, r19
    7dc8:	20 93 83 02 	sts	0x0283, r18
    7dcc:	60 50       	subi	r22, 0x00	; 0
    7dce:	72 40       	sbci	r23, 0x02	; 2
    7dd0:	70 93 86 02 	sts	0x0286, r23
    7dd4:	60 93 85 02 	sts	0x0285, r22
    7dd8:	40 50       	subi	r20, 0x00	; 0
    7dda:	52 40       	sbci	r21, 0x02	; 2
    7ddc:	50 93 88 02 	sts	0x0288, r21
    7de0:	40 93 87 02 	sts	0x0287, r20
			}

			accOffsetX = accOffsetXSum>>4;
    7de4:	80 91 38 04 	lds	r24, 0x0438
    7de8:	90 91 39 04 	lds	r25, 0x0439
    7dec:	95 95       	asr	r25
    7dee:	87 95       	ror	r24
    7df0:	95 95       	asr	r25
    7df2:	87 95       	ror	r24
    7df4:	95 95       	asr	r25
    7df6:	87 95       	ror	r24
    7df8:	95 95       	asr	r25
    7dfa:	87 95       	ror	r24
    7dfc:	90 93 33 04 	sts	0x0433, r25
    7e00:	80 93 32 04 	sts	0x0432, r24
			accOffsetY = accOffsetYSum>>4;
    7e04:	80 91 3a 04 	lds	r24, 0x043A
    7e08:	90 91 3b 04 	lds	r25, 0x043B
    7e0c:	95 95       	asr	r25
    7e0e:	87 95       	ror	r24
    7e10:	95 95       	asr	r25
    7e12:	87 95       	ror	r24
    7e14:	95 95       	asr	r25
    7e16:	87 95       	ror	r24
    7e18:	95 95       	asr	r25
    7e1a:	87 95       	ror	r24
    7e1c:	90 93 35 04 	sts	0x0435, r25
    7e20:	80 93 34 04 	sts	0x0434, r24
			accOffsetZ = accOffsetZSum>>4;
    7e24:	80 91 3c 04 	lds	r24, 0x043C
    7e28:	90 91 3d 04 	lds	r25, 0x043D
    7e2c:	95 95       	asr	r25
    7e2e:	87 95       	ror	r24
    7e30:	95 95       	asr	r25
    7e32:	87 95       	ror	r24
    7e34:	95 95       	asr	r25
    7e36:	87 95       	ror	r24
    7e38:	95 95       	asr	r25
    7e3a:	87 95       	ror	r24
    7e3c:	90 93 37 04 	sts	0x0437, r25
    7e40:	80 93 36 04 	sts	0x0436, r24

			//proxUpdated = 0;
			//if(proxUpdated) {	
				startCalibration = 0;					
    7e44:	10 92 5f 0b 	sts	0x0B5F, r1

		}

	}

	pwm_red = 255;
    7e48:	8f ef       	ldi	r24, 0xFF	; 255
    7e4a:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    7e4e:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    7e52:	80 93 0e 02 	sts	0x020E, r24
	updateRedLed(pwm_red);
    7e56:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <updateRedLed>
	updateGreenLed(pwm_green);
    7e5a:	80 91 0d 02 	lds	r24, 0x020D
    7e5e:	0e 94 f9 3a 	call	0x75f2	; 0x75f2 <updateGreenLed>
	updateBlueLed(pwm_blue);
    7e62:	80 91 0e 02 	lds	r24, 0x020E
    7e66:	0e 94 0d 3b 	call	0x761a	; 0x761a <updateBlueLed>

}
    7e6a:	df 91       	pop	r29
    7e6c:	cf 91       	pop	r28
    7e6e:	08 95       	ret

		readAccelXYZ();

		if(calibrationCycle<=CALIBRATION_CYCLES) {

			if(proxUpdated) {
    7e70:	80 91 c0 02 	lds	r24, 0x02C0
    7e74:	88 23       	and	r24, r24
    7e76:	09 f4       	brne	.+2      	; 0x7e7a <calibrateSensors+0x2c0>
    7e78:	86 c1       	rjmp	.+780    	; 0x8186 <calibrateSensors+0x5cc>

				proxUpdated = 0;
    7e7a:	10 92 c0 02 	sts	0x02C0, r1

				if(calibrationCycle==0) {		// reset all variables
    7e7e:	21 15       	cp	r18, r1
    7e80:	31 05       	cpc	r19, r1
    7e82:	09 f4       	brne	.+2      	; 0x7e86 <calibrateSensors+0x2cc>
    7e84:	86 c1       	rjmp	.+780    	; 0x8192 <calibrateSensors+0x5d8>
												// "proximityResult" hasn't the offset reset to 0. so we start the actual calibration
												// the next time
				}

				for (i=0;i<12;i++) {
					proximitySum[i] += proximityResult[i];
    7e86:	80 91 59 02 	lds	r24, 0x0259
    7e8a:	90 91 5a 02 	lds	r25, 0x025A
    7e8e:	aa 27       	eor	r26, r26
    7e90:	97 fd       	sbrc	r25, 7
    7e92:	a0 95       	com	r26
    7e94:	ba 2f       	mov	r27, r26
    7e96:	40 91 89 02 	lds	r20, 0x0289
    7e9a:	50 91 8a 02 	lds	r21, 0x028A
    7e9e:	60 91 8b 02 	lds	r22, 0x028B
    7ea2:	70 91 8c 02 	lds	r23, 0x028C
    7ea6:	84 0f       	add	r24, r20
    7ea8:	95 1f       	adc	r25, r21
    7eaa:	a6 1f       	adc	r26, r22
    7eac:	b7 1f       	adc	r27, r23
    7eae:	80 93 89 02 	sts	0x0289, r24
    7eb2:	90 93 8a 02 	sts	0x028A, r25
    7eb6:	a0 93 8b 02 	sts	0x028B, r26
    7eba:	b0 93 8c 02 	sts	0x028C, r27
    7ebe:	80 91 5b 02 	lds	r24, 0x025B
    7ec2:	90 91 5c 02 	lds	r25, 0x025C
    7ec6:	aa 27       	eor	r26, r26
    7ec8:	97 fd       	sbrc	r25, 7
    7eca:	a0 95       	com	r26
    7ecc:	ba 2f       	mov	r27, r26
    7ece:	40 91 8d 02 	lds	r20, 0x028D
    7ed2:	50 91 8e 02 	lds	r21, 0x028E
    7ed6:	60 91 8f 02 	lds	r22, 0x028F
    7eda:	70 91 90 02 	lds	r23, 0x0290
    7ede:	84 0f       	add	r24, r20
    7ee0:	95 1f       	adc	r25, r21
    7ee2:	a6 1f       	adc	r26, r22
    7ee4:	b7 1f       	adc	r27, r23
    7ee6:	80 93 8d 02 	sts	0x028D, r24
    7eea:	90 93 8e 02 	sts	0x028E, r25
    7eee:	a0 93 8f 02 	sts	0x028F, r26
    7ef2:	b0 93 90 02 	sts	0x0290, r27
    7ef6:	80 91 5d 02 	lds	r24, 0x025D
    7efa:	90 91 5e 02 	lds	r25, 0x025E
    7efe:	aa 27       	eor	r26, r26
    7f00:	97 fd       	sbrc	r25, 7
    7f02:	a0 95       	com	r26
    7f04:	ba 2f       	mov	r27, r26
    7f06:	40 91 91 02 	lds	r20, 0x0291
    7f0a:	50 91 92 02 	lds	r21, 0x0292
    7f0e:	60 91 93 02 	lds	r22, 0x0293
    7f12:	70 91 94 02 	lds	r23, 0x0294
    7f16:	84 0f       	add	r24, r20
    7f18:	95 1f       	adc	r25, r21
    7f1a:	a6 1f       	adc	r26, r22
    7f1c:	b7 1f       	adc	r27, r23
    7f1e:	80 93 91 02 	sts	0x0291, r24
    7f22:	90 93 92 02 	sts	0x0292, r25
    7f26:	a0 93 93 02 	sts	0x0293, r26
    7f2a:	b0 93 94 02 	sts	0x0294, r27
    7f2e:	80 91 5f 02 	lds	r24, 0x025F
    7f32:	90 91 60 02 	lds	r25, 0x0260
    7f36:	aa 27       	eor	r26, r26
    7f38:	97 fd       	sbrc	r25, 7
    7f3a:	a0 95       	com	r26
    7f3c:	ba 2f       	mov	r27, r26
    7f3e:	40 91 95 02 	lds	r20, 0x0295
    7f42:	50 91 96 02 	lds	r21, 0x0296
    7f46:	60 91 97 02 	lds	r22, 0x0297
    7f4a:	70 91 98 02 	lds	r23, 0x0298
    7f4e:	84 0f       	add	r24, r20
    7f50:	95 1f       	adc	r25, r21
    7f52:	a6 1f       	adc	r26, r22
    7f54:	b7 1f       	adc	r27, r23
    7f56:	80 93 95 02 	sts	0x0295, r24
    7f5a:	90 93 96 02 	sts	0x0296, r25
    7f5e:	a0 93 97 02 	sts	0x0297, r26
    7f62:	b0 93 98 02 	sts	0x0298, r27
    7f66:	80 91 61 02 	lds	r24, 0x0261
    7f6a:	90 91 62 02 	lds	r25, 0x0262
    7f6e:	aa 27       	eor	r26, r26
    7f70:	97 fd       	sbrc	r25, 7
    7f72:	a0 95       	com	r26
    7f74:	ba 2f       	mov	r27, r26
    7f76:	40 91 99 02 	lds	r20, 0x0299
    7f7a:	50 91 9a 02 	lds	r21, 0x029A
    7f7e:	60 91 9b 02 	lds	r22, 0x029B
    7f82:	70 91 9c 02 	lds	r23, 0x029C
    7f86:	84 0f       	add	r24, r20
    7f88:	95 1f       	adc	r25, r21
    7f8a:	a6 1f       	adc	r26, r22
    7f8c:	b7 1f       	adc	r27, r23
    7f8e:	80 93 99 02 	sts	0x0299, r24
    7f92:	90 93 9a 02 	sts	0x029A, r25
    7f96:	a0 93 9b 02 	sts	0x029B, r26
    7f9a:	b0 93 9c 02 	sts	0x029C, r27
    7f9e:	80 91 63 02 	lds	r24, 0x0263
    7fa2:	90 91 64 02 	lds	r25, 0x0264
    7fa6:	aa 27       	eor	r26, r26
    7fa8:	97 fd       	sbrc	r25, 7
    7faa:	a0 95       	com	r26
    7fac:	ba 2f       	mov	r27, r26
    7fae:	40 91 9d 02 	lds	r20, 0x029D
    7fb2:	50 91 9e 02 	lds	r21, 0x029E
    7fb6:	60 91 9f 02 	lds	r22, 0x029F
    7fba:	70 91 a0 02 	lds	r23, 0x02A0
    7fbe:	84 0f       	add	r24, r20
    7fc0:	95 1f       	adc	r25, r21
    7fc2:	a6 1f       	adc	r26, r22
    7fc4:	b7 1f       	adc	r27, r23
    7fc6:	80 93 9d 02 	sts	0x029D, r24
    7fca:	90 93 9e 02 	sts	0x029E, r25
    7fce:	a0 93 9f 02 	sts	0x029F, r26
    7fd2:	b0 93 a0 02 	sts	0x02A0, r27
    7fd6:	80 91 65 02 	lds	r24, 0x0265
    7fda:	90 91 66 02 	lds	r25, 0x0266
    7fde:	aa 27       	eor	r26, r26
    7fe0:	97 fd       	sbrc	r25, 7
    7fe2:	a0 95       	com	r26
    7fe4:	ba 2f       	mov	r27, r26
    7fe6:	40 91 a1 02 	lds	r20, 0x02A1
    7fea:	50 91 a2 02 	lds	r21, 0x02A2
    7fee:	60 91 a3 02 	lds	r22, 0x02A3
    7ff2:	70 91 a4 02 	lds	r23, 0x02A4
    7ff6:	84 0f       	add	r24, r20
    7ff8:	95 1f       	adc	r25, r21
    7ffa:	a6 1f       	adc	r26, r22
    7ffc:	b7 1f       	adc	r27, r23
    7ffe:	80 93 a1 02 	sts	0x02A1, r24
    8002:	90 93 a2 02 	sts	0x02A2, r25
    8006:	a0 93 a3 02 	sts	0x02A3, r26
    800a:	b0 93 a4 02 	sts	0x02A4, r27
    800e:	80 91 67 02 	lds	r24, 0x0267
    8012:	90 91 68 02 	lds	r25, 0x0268
    8016:	aa 27       	eor	r26, r26
    8018:	97 fd       	sbrc	r25, 7
    801a:	a0 95       	com	r26
    801c:	ba 2f       	mov	r27, r26
    801e:	40 91 a5 02 	lds	r20, 0x02A5
    8022:	50 91 a6 02 	lds	r21, 0x02A6
    8026:	60 91 a7 02 	lds	r22, 0x02A7
    802a:	70 91 a8 02 	lds	r23, 0x02A8
    802e:	84 0f       	add	r24, r20
    8030:	95 1f       	adc	r25, r21
    8032:	a6 1f       	adc	r26, r22
    8034:	b7 1f       	adc	r27, r23
    8036:	80 93 a5 02 	sts	0x02A5, r24
    803a:	90 93 a6 02 	sts	0x02A6, r25
    803e:	a0 93 a7 02 	sts	0x02A7, r26
    8042:	b0 93 a8 02 	sts	0x02A8, r27
    8046:	80 91 69 02 	lds	r24, 0x0269
    804a:	90 91 6a 02 	lds	r25, 0x026A
    804e:	aa 27       	eor	r26, r26
    8050:	97 fd       	sbrc	r25, 7
    8052:	a0 95       	com	r26
    8054:	ba 2f       	mov	r27, r26
    8056:	40 91 a9 02 	lds	r20, 0x02A9
    805a:	50 91 aa 02 	lds	r21, 0x02AA
    805e:	60 91 ab 02 	lds	r22, 0x02AB
    8062:	70 91 ac 02 	lds	r23, 0x02AC
    8066:	84 0f       	add	r24, r20
    8068:	95 1f       	adc	r25, r21
    806a:	a6 1f       	adc	r26, r22
    806c:	b7 1f       	adc	r27, r23
    806e:	80 93 a9 02 	sts	0x02A9, r24
    8072:	90 93 aa 02 	sts	0x02AA, r25
    8076:	a0 93 ab 02 	sts	0x02AB, r26
    807a:	b0 93 ac 02 	sts	0x02AC, r27
    807e:	80 91 6b 02 	lds	r24, 0x026B
    8082:	90 91 6c 02 	lds	r25, 0x026C
    8086:	aa 27       	eor	r26, r26
    8088:	97 fd       	sbrc	r25, 7
    808a:	a0 95       	com	r26
    808c:	ba 2f       	mov	r27, r26
    808e:	40 91 ad 02 	lds	r20, 0x02AD
    8092:	50 91 ae 02 	lds	r21, 0x02AE
    8096:	60 91 af 02 	lds	r22, 0x02AF
    809a:	70 91 b0 02 	lds	r23, 0x02B0
    809e:	84 0f       	add	r24, r20
    80a0:	95 1f       	adc	r25, r21
    80a2:	a6 1f       	adc	r26, r22
    80a4:	b7 1f       	adc	r27, r23
    80a6:	80 93 ad 02 	sts	0x02AD, r24
    80aa:	90 93 ae 02 	sts	0x02AE, r25
    80ae:	a0 93 af 02 	sts	0x02AF, r26
    80b2:	b0 93 b0 02 	sts	0x02B0, r27
    80b6:	80 91 6d 02 	lds	r24, 0x026D
    80ba:	90 91 6e 02 	lds	r25, 0x026E
    80be:	aa 27       	eor	r26, r26
    80c0:	97 fd       	sbrc	r25, 7
    80c2:	a0 95       	com	r26
    80c4:	ba 2f       	mov	r27, r26
    80c6:	40 91 b1 02 	lds	r20, 0x02B1
    80ca:	50 91 b2 02 	lds	r21, 0x02B2
    80ce:	60 91 b3 02 	lds	r22, 0x02B3
    80d2:	70 91 b4 02 	lds	r23, 0x02B4
    80d6:	84 0f       	add	r24, r20
    80d8:	95 1f       	adc	r25, r21
    80da:	a6 1f       	adc	r26, r22
    80dc:	b7 1f       	adc	r27, r23
    80de:	80 93 b1 02 	sts	0x02B1, r24
    80e2:	90 93 b2 02 	sts	0x02B2, r25
    80e6:	a0 93 b3 02 	sts	0x02B3, r26
    80ea:	b0 93 b4 02 	sts	0x02B4, r27
    80ee:	80 91 6f 02 	lds	r24, 0x026F
    80f2:	90 91 70 02 	lds	r25, 0x0270
    80f6:	aa 27       	eor	r26, r26
    80f8:	97 fd       	sbrc	r25, 7
    80fa:	a0 95       	com	r26
    80fc:	ba 2f       	mov	r27, r26
    80fe:	40 91 b5 02 	lds	r20, 0x02B5
    8102:	50 91 b6 02 	lds	r21, 0x02B6
    8106:	60 91 b7 02 	lds	r22, 0x02B7
    810a:	70 91 b8 02 	lds	r23, 0x02B8
    810e:	84 0f       	add	r24, r20
    8110:	95 1f       	adc	r25, r21
    8112:	a6 1f       	adc	r26, r22
    8114:	b7 1f       	adc	r27, r23
    8116:	80 93 b5 02 	sts	0x02B5, r24
    811a:	90 93 b6 02 	sts	0x02B6, r25
    811e:	a0 93 b7 02 	sts	0x02B7, r26
    8122:	b0 93 b8 02 	sts	0x02B8, r27
				}

				accOffsetXSum += accX;
    8126:	80 91 38 04 	lds	r24, 0x0438
    812a:	90 91 39 04 	lds	r25, 0x0439
    812e:	40 91 2c 04 	lds	r20, 0x042C
    8132:	50 91 2d 04 	lds	r21, 0x042D
    8136:	84 0f       	add	r24, r20
    8138:	95 1f       	adc	r25, r21
    813a:	90 93 39 04 	sts	0x0439, r25
    813e:	80 93 38 04 	sts	0x0438, r24
				accOffsetYSum += accY;
    8142:	80 91 3a 04 	lds	r24, 0x043A
    8146:	90 91 3b 04 	lds	r25, 0x043B
    814a:	40 91 2e 04 	lds	r20, 0x042E
    814e:	50 91 2f 04 	lds	r21, 0x042F
    8152:	84 0f       	add	r24, r20
    8154:	95 1f       	adc	r25, r21
    8156:	90 93 3b 04 	sts	0x043B, r25
    815a:	80 93 3a 04 	sts	0x043A, r24
				accOffsetZSum += accZ;
    815e:	80 91 3c 04 	lds	r24, 0x043C
    8162:	90 91 3d 04 	lds	r25, 0x043D
    8166:	40 91 30 04 	lds	r20, 0x0430
    816a:	50 91 31 04 	lds	r21, 0x0431
    816e:	84 0f       	add	r24, r20
    8170:	95 1f       	adc	r25, r21
    8172:	90 93 3d 04 	sts	0x043D, r25
    8176:	80 93 3c 04 	sts	0x043C, r24

				calibrationCycle++;
    817a:	2f 5f       	subi	r18, 0xFF	; 255
    817c:	3f 4f       	sbci	r19, 0xFF	; 255
    817e:	30 93 4e 04 	sts	0x044E, r19
    8182:	20 93 4d 04 	sts	0x044D, r18
    8186:	80 91 5f 0b 	lds	r24, 0x0B5F
	updateBlueLed(pwm_blue);

	calibrationCycle = 0;
	startCalibration = 1;

	while(startCalibration) {
    818a:	88 23       	and	r24, r24
    818c:	09 f0       	breq	.+2      	; 0x8190 <calibrateSensors+0x5d6>
    818e:	31 cd       	rjmp	.-1438   	; 0x7bf2 <calibrateSensors+0x38>
    8190:	5b ce       	rjmp	.-842    	; 0x7e48 <calibrateSensors+0x28e>

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8192:	10 92 89 02 	sts	0x0289, r1
    8196:	10 92 8a 02 	sts	0x028A, r1
    819a:	10 92 8b 02 	sts	0x028B, r1
    819e:	10 92 8c 02 	sts	0x028C, r1
						proximityOffset[i] = 0;
    81a2:	10 92 72 02 	sts	0x0272, r1
    81a6:	10 92 71 02 	sts	0x0271, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    81aa:	10 92 8d 02 	sts	0x028D, r1
    81ae:	10 92 8e 02 	sts	0x028E, r1
    81b2:	10 92 8f 02 	sts	0x028F, r1
    81b6:	10 92 90 02 	sts	0x0290, r1
						proximityOffset[i] = 0;
    81ba:	10 92 74 02 	sts	0x0274, r1
    81be:	10 92 73 02 	sts	0x0273, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    81c2:	10 92 91 02 	sts	0x0291, r1
    81c6:	10 92 92 02 	sts	0x0292, r1
    81ca:	10 92 93 02 	sts	0x0293, r1
    81ce:	10 92 94 02 	sts	0x0294, r1
						proximityOffset[i] = 0;
    81d2:	10 92 76 02 	sts	0x0276, r1
    81d6:	10 92 75 02 	sts	0x0275, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    81da:	10 92 95 02 	sts	0x0295, r1
    81de:	10 92 96 02 	sts	0x0296, r1
    81e2:	10 92 97 02 	sts	0x0297, r1
    81e6:	10 92 98 02 	sts	0x0298, r1
						proximityOffset[i] = 0;
    81ea:	10 92 78 02 	sts	0x0278, r1
    81ee:	10 92 77 02 	sts	0x0277, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    81f2:	10 92 99 02 	sts	0x0299, r1
    81f6:	10 92 9a 02 	sts	0x029A, r1
    81fa:	10 92 9b 02 	sts	0x029B, r1
    81fe:	10 92 9c 02 	sts	0x029C, r1
						proximityOffset[i] = 0;
    8202:	10 92 7a 02 	sts	0x027A, r1
    8206:	10 92 79 02 	sts	0x0279, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    820a:	10 92 9d 02 	sts	0x029D, r1
    820e:	10 92 9e 02 	sts	0x029E, r1
    8212:	10 92 9f 02 	sts	0x029F, r1
    8216:	10 92 a0 02 	sts	0x02A0, r1
						proximityOffset[i] = 0;
    821a:	10 92 7c 02 	sts	0x027C, r1
    821e:	10 92 7b 02 	sts	0x027B, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8222:	10 92 a1 02 	sts	0x02A1, r1
    8226:	10 92 a2 02 	sts	0x02A2, r1
    822a:	10 92 a3 02 	sts	0x02A3, r1
    822e:	10 92 a4 02 	sts	0x02A4, r1
						proximityOffset[i] = 0;
    8232:	10 92 7e 02 	sts	0x027E, r1
    8236:	10 92 7d 02 	sts	0x027D, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    823a:	10 92 a5 02 	sts	0x02A5, r1
    823e:	10 92 a6 02 	sts	0x02A6, r1
    8242:	10 92 a7 02 	sts	0x02A7, r1
    8246:	10 92 a8 02 	sts	0x02A8, r1
						proximityOffset[i] = 0;
    824a:	10 92 80 02 	sts	0x0280, r1
    824e:	10 92 7f 02 	sts	0x027F, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8252:	10 92 a9 02 	sts	0x02A9, r1
    8256:	10 92 aa 02 	sts	0x02AA, r1
    825a:	10 92 ab 02 	sts	0x02AB, r1
    825e:	10 92 ac 02 	sts	0x02AC, r1
						proximityOffset[i] = 0;
    8262:	10 92 82 02 	sts	0x0282, r1
    8266:	10 92 81 02 	sts	0x0281, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    826a:	10 92 ad 02 	sts	0x02AD, r1
    826e:	10 92 ae 02 	sts	0x02AE, r1
    8272:	10 92 af 02 	sts	0x02AF, r1
    8276:	10 92 b0 02 	sts	0x02B0, r1
						proximityOffset[i] = 0;
    827a:	10 92 84 02 	sts	0x0284, r1
    827e:	10 92 83 02 	sts	0x0283, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8282:	10 92 b1 02 	sts	0x02B1, r1
    8286:	10 92 b2 02 	sts	0x02B2, r1
    828a:	10 92 b3 02 	sts	0x02B3, r1
    828e:	10 92 b4 02 	sts	0x02B4, r1
						proximityOffset[i] = 0;
    8292:	10 92 86 02 	sts	0x0286, r1
    8296:	10 92 85 02 	sts	0x0285, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    829a:	10 92 b5 02 	sts	0x02B5, r1
    829e:	10 92 b6 02 	sts	0x02B6, r1
    82a2:	10 92 b7 02 	sts	0x02B7, r1
    82a6:	10 92 b8 02 	sts	0x02B8, r1
						proximityOffset[i] = 0;
    82aa:	10 92 88 02 	sts	0x0288, r1
    82ae:	10 92 87 02 	sts	0x0287, r1
					}
					accOffsetXSum = 0;
    82b2:	10 92 39 04 	sts	0x0439, r1
    82b6:	10 92 38 04 	sts	0x0438, r1
					accOffsetYSum = 0;
    82ba:	10 92 3b 04 	sts	0x043B, r1
    82be:	10 92 3a 04 	sts	0x043A, r1
					accOffsetZSum = 0;
    82c2:	10 92 3d 04 	sts	0x043D, r1
    82c6:	10 92 3c 04 	sts	0x043C, r1

					calibrationCycle++;
    82ca:	d0 93 4e 04 	sts	0x044E, r29
    82ce:	c0 93 4d 04 	sts	0x044D, r28
    82d2:	80 91 5f 0b 	lds	r24, 0x0B5F

					continue;					// the first time "proxUpdated" is set, all the proximity values saved in the array 
    82d6:	59 cf       	rjmp	.-334    	; 0x818a <calibrateSensors+0x5d0>

000082d8 <readAccelXYZ_1>:

void readAccelXYZ_1() {

	int i = 0;

	if(useAccel == USE_MMAX7455L) {
    82d8:	80 91 2b 04 	lds	r24, 0x042B
    82dc:	88 23       	and	r24, r24
    82de:	79 f0       	breq	.+30     	; 0x82fe <readAccelXYZ_1+0x26>
		for(i=0; i<2; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
		}
		return;

	} else if(useAccel == USE_ADXL345) {							
    82e0:	81 30       	cpi	r24, 0x01	; 1
    82e2:	11 f1       	breq	.+68     	; 0x8328 <readAccelXYZ_1+0x50>
		}
		return;

	} else {

		accX = 0;
    82e4:	10 92 2d 04 	sts	0x042D, r1
    82e8:	10 92 2c 04 	sts	0x042C, r1
		accY = 0;
    82ec:	10 92 2f 04 	sts	0x042F, r1
    82f0:	10 92 2e 04 	sts	0x042E, r1
		accZ = 0;
    82f4:	10 92 31 04 	sts	0x0431, r1
    82f8:	10 92 30 04 	sts	0x0430, r1
    82fc:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    82fe:	80 91 14 02 	lds	r24, 0x0214
    8302:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    8306:	80 e0       	ldi	r24, 0x00	; 0
    8308:	0e 94 76 1c 	call	0x38ec	; 0x38ec <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    830c:	80 91 14 02 	lds	r24, 0x0214
    8310:	8f 5f       	subi	r24, 0xFF	; 255
    8312:	0e 94 48 1c 	call	0x3890	; 0x3890 <i2c_rep_start>

		for(i=0; i<2; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    8316:	0e 94 88 1c 	call	0x3910	; 0x3910 <i2c_readAck>
    831a:	80 93 42 04 	sts	0x0442, r24
    831e:	0e 94 88 1c 	call	0x3910	; 0x3910 <i2c_readAck>
    8322:	80 93 43 04 	sts	0x0443, r24
    8326:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    8328:	80 91 14 02 	lds	r24, 0x0214
    832c:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    8330:	82 e3       	ldi	r24, 0x32	; 50
    8332:	0e 94 76 1c 	call	0x38ec	; 0x38ec <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    8336:	80 91 14 02 	lds	r24, 0x0214
    833a:	8f 5f       	subi	r24, 0xFF	; 255
    833c:	0e 94 48 1c 	call	0x3890	; 0x3890 <i2c_rep_start>

		for(i=0; i<3; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    8340:	0e 94 88 1c 	call	0x3910	; 0x3910 <i2c_readAck>
    8344:	80 93 42 04 	sts	0x0442, r24
    8348:	0e 94 88 1c 	call	0x3910	; 0x3910 <i2c_readAck>
    834c:	80 93 43 04 	sts	0x0443, r24
    8350:	0e 94 88 1c 	call	0x3910	; 0x3910 <i2c_readAck>
    8354:	80 93 44 04 	sts	0x0444, r24
    8358:	08 95       	ret

0000835a <readAccelXYZ_2>:

void readAccelXYZ_2() {

	int i = 2;

	if(useAccel == USE_MMAX7455L) {
    835a:	80 91 2b 04 	lds	r24, 0x042B
    835e:	88 23       	and	r24, r24
    8360:	09 f0       	breq	.+2      	; 0x8364 <readAccelXYZ_2+0xa>
    8362:	4e c0       	rjmp	.+156    	; 0x8400 <readAccelXYZ_2+0xa6>

		for(i=2; i<5; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    8364:	0e 94 88 1c 	call	0x3910	; 0x3910 <i2c_readAck>
    8368:	80 93 44 04 	sts	0x0444, r24
		}

	} else if(useAccel == USE_ADXL345) {							

		for(i=3; i<5; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    836c:	0e 94 88 1c 	call	0x3910	; 0x3910 <i2c_readAck>
    8370:	80 93 45 04 	sts	0x0445, r24
    8374:	0e 94 88 1c 	call	0x3910	; 0x3910 <i2c_readAck>
    8378:	80 93 46 04 	sts	0x0446, r24
		}
		accBuff[i] = i2c_readNak();									// read last byte sending NACK
    837c:	0e 94 92 1c 	call	0x3924	; 0x3924 <i2c_readNak>
    8380:	80 93 47 04 	sts	0x0447, r24
		i2c_stop();													// set stop conditon = release bus
    8384:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    8388:	80 91 5f 0b 	lds	r24, 0x0B5F
    838c:	88 23       	and	r24, r24
    838e:	09 f4       	brne	.+2      	; 0x8392 <readAccelXYZ_2+0x38>
    8390:	47 c0       	rjmp	.+142    	; 0x8420 <readAccelXYZ_2+0xc6>
			accX = ((signed int)accBuff[1]<<8)|accBuff[0];    			// X axis
    8392:	80 91 43 04 	lds	r24, 0x0443
    8396:	99 27       	eor	r25, r25
    8398:	87 fd       	sbrc	r24, 7
    839a:	90 95       	com	r25
    839c:	98 2f       	mov	r25, r24
    839e:	88 27       	eor	r24, r24
    83a0:	20 91 42 04 	lds	r18, 0x0442
    83a4:	33 27       	eor	r19, r19
    83a6:	27 fd       	sbrc	r18, 7
    83a8:	30 95       	com	r19
    83aa:	82 2b       	or	r24, r18
    83ac:	93 2b       	or	r25, r19
    83ae:	90 93 2d 04 	sts	0x042D, r25
    83b2:	80 93 2c 04 	sts	0x042C, r24
			accY = ((signed int)accBuff[3]<<8)|accBuff[2];    			// Y axis
    83b6:	80 91 45 04 	lds	r24, 0x0445
    83ba:	99 27       	eor	r25, r25
    83bc:	87 fd       	sbrc	r24, 7
    83be:	90 95       	com	r25
    83c0:	98 2f       	mov	r25, r24
    83c2:	88 27       	eor	r24, r24
    83c4:	20 91 44 04 	lds	r18, 0x0444
    83c8:	33 27       	eor	r19, r19
    83ca:	27 fd       	sbrc	r18, 7
    83cc:	30 95       	com	r19
    83ce:	82 2b       	or	r24, r18
    83d0:	93 2b       	or	r25, r19
    83d2:	90 93 2f 04 	sts	0x042F, r25
    83d6:	80 93 2e 04 	sts	0x042E, r24
			accZ = ((signed int)accBuff[5]<<8)|accBuff[4];    			// Z axis
    83da:	80 91 47 04 	lds	r24, 0x0447
    83de:	99 27       	eor	r25, r25
    83e0:	87 fd       	sbrc	r24, 7
    83e2:	90 95       	com	r25
    83e4:	98 2f       	mov	r25, r24
    83e6:	88 27       	eor	r24, r24
    83e8:	20 91 46 04 	lds	r18, 0x0446
    83ec:	33 27       	eor	r19, r19
    83ee:	27 fd       	sbrc	r18, 7
    83f0:	30 95       	com	r19
    83f2:	82 2b       	or	r24, r18
    83f4:	93 2b       	or	r25, r19
    83f6:	90 93 31 04 	sts	0x0431, r25
    83fa:	80 93 30 04 	sts	0x0430, r24
    83fe:	08 95       	ret
			accX = (((signed int)accBuff[1]<<8)|accBuff[0])-accOffsetX;	// X axis
			accY = (((signed int)accBuff[3]<<8)|accBuff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    8400:	81 30       	cpi	r24, 0x01	; 1
    8402:	09 f4       	brne	.+2      	; 0x8406 <readAccelXYZ_2+0xac>
    8404:	b3 cf       	rjmp	.-154    	; 0x836c <readAccelXYZ_2+0x12>
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
		}

	} else {

		accX = 0;
    8406:	10 92 2d 04 	sts	0x042D, r1
    840a:	10 92 2c 04 	sts	0x042C, r1
		accY = 0;
    840e:	10 92 2f 04 	sts	0x042F, r1
    8412:	10 92 2e 04 	sts	0x042E, r1
		accZ = 0;
    8416:	10 92 31 04 	sts	0x0431, r1
    841a:	10 92 30 04 	sts	0x0430, r1
    841e:	08 95       	ret
		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)accBuff[1]<<8)|accBuff[0];    			// X axis
			accY = ((signed int)accBuff[3]<<8)|accBuff[2];    			// Y axis
			accZ = ((signed int)accBuff[5]<<8)|accBuff[4];    			// Z axis
		} else {													// else return the calibrated values
			accX = (((signed int)accBuff[1]<<8)|accBuff[0])-accOffsetX;	// X axis
    8420:	80 91 43 04 	lds	r24, 0x0443
    8424:	99 27       	eor	r25, r25
    8426:	87 fd       	sbrc	r24, 7
    8428:	90 95       	com	r25
    842a:	98 2f       	mov	r25, r24
    842c:	88 27       	eor	r24, r24
    842e:	20 91 42 04 	lds	r18, 0x0442
    8432:	33 27       	eor	r19, r19
    8434:	27 fd       	sbrc	r18, 7
    8436:	30 95       	com	r19
    8438:	82 2b       	or	r24, r18
    843a:	93 2b       	or	r25, r19
    843c:	20 91 32 04 	lds	r18, 0x0432
    8440:	30 91 33 04 	lds	r19, 0x0433
    8444:	82 1b       	sub	r24, r18
    8446:	93 0b       	sbc	r25, r19
    8448:	90 93 2d 04 	sts	0x042D, r25
    844c:	80 93 2c 04 	sts	0x042C, r24
			accY = (((signed int)accBuff[3]<<8)|accBuff[2])-accOffsetY;	// Y axis
    8450:	80 91 45 04 	lds	r24, 0x0445
    8454:	99 27       	eor	r25, r25
    8456:	87 fd       	sbrc	r24, 7
    8458:	90 95       	com	r25
    845a:	98 2f       	mov	r25, r24
    845c:	88 27       	eor	r24, r24
    845e:	20 91 44 04 	lds	r18, 0x0444
    8462:	33 27       	eor	r19, r19
    8464:	27 fd       	sbrc	r18, 7
    8466:	30 95       	com	r19
    8468:	82 2b       	or	r24, r18
    846a:	93 2b       	or	r25, r19
    846c:	20 91 34 04 	lds	r18, 0x0434
    8470:	30 91 35 04 	lds	r19, 0x0435
    8474:	82 1b       	sub	r24, r18
    8476:	93 0b       	sbc	r25, r19
    8478:	90 93 2f 04 	sts	0x042F, r25
    847c:	80 93 2e 04 	sts	0x042E, r24
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
    8480:	80 91 47 04 	lds	r24, 0x0447
    8484:	99 27       	eor	r25, r25
    8486:	87 fd       	sbrc	r24, 7
    8488:	90 95       	com	r25
    848a:	98 2f       	mov	r25, r24
    848c:	88 27       	eor	r24, r24
    848e:	20 91 46 04 	lds	r18, 0x0446
    8492:	33 27       	eor	r19, r19
    8494:	27 fd       	sbrc	r18, 7
    8496:	30 95       	com	r19
    8498:	82 2b       	or	r24, r18
    849a:	93 2b       	or	r25, r19
    849c:	20 91 36 04 	lds	r18, 0x0436
    84a0:	30 91 37 04 	lds	r19, 0x0437
    84a4:	82 1b       	sub	r24, r18
    84a6:	93 0b       	sbc	r25, r19
    84a8:	90 93 31 04 	sts	0x0431, r25
    84ac:	80 93 30 04 	sts	0x0430, r24
    84b0:	08 95       	ret

000084b2 <computeAngle>:

	}

}

void computeAngle() {
    84b2:	ef 92       	push	r14
    84b4:	ff 92       	push	r15
    84b6:	0f 93       	push	r16
    84b8:	1f 93       	push	r17

	unsigned int abs_acc_z=abs(accZ);
    84ba:	80 91 30 04 	lds	r24, 0x0430
    84be:	90 91 31 04 	lds	r25, 0x0431
    84c2:	97 fd       	sbrc	r25, 7
    84c4:	6c c0       	rjmp	.+216    	; 0x859e <computeAngle+0xec>

	// check the robot motion plane (horizontal or vertical) based on the Z axes;
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
    84c6:	85 31       	cpi	r24, 0x15	; 21
    84c8:	91 05       	cpc	r25, r1
    84ca:	08 f0       	brcs	.+2      	; 0x84ce <computeAngle+0x1c>
    84cc:	54 c0       	rjmp	.+168    	; 0x8576 <computeAngle+0xc4>
		currPosition = HORIZONTAL_POS;
    84ce:	81 e0       	ldi	r24, 0x01	; 1
    84d0:	80 93 15 02 	sts	0x0215, r24
    84d4:	21 e0       	ldi	r18, 0x01	; 1
	} else {
		currPosition = VERTICAL_POS;	
	}
	if(currPosition != robotPosition) {			
    84d6:	80 91 16 02 	lds	r24, 0x0216
    84da:	82 17       	cp	r24, r18
    84dc:	09 f4       	brne	.+2      	; 0x84e0 <computeAngle+0x2e>
    84de:	53 c0       	rjmp	.+166    	; 0x8586 <computeAngle+0xd4>
		timesInSamePos++;
    84e0:	80 91 40 04 	lds	r24, 0x0440
    84e4:	90 91 41 04 	lds	r25, 0x0441
    84e8:	01 96       	adiw	r24, 0x01	; 1
    84ea:	90 93 41 04 	sts	0x0441, r25
    84ee:	80 93 40 04 	sts	0x0440, r24
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
    84f2:	88 3c       	cpi	r24, 0xC8	; 200
    84f4:	91 05       	cpc	r25, r1
    84f6:	08 f0       	brcs	.+2      	; 0x84fa <computeAngle+0x48>
    84f8:	4b c0       	rjmp	.+150    	; 0x8590 <computeAngle+0xde>
	} else {
		timesInSamePos = 0;
	}

	// compute the angle using the X and Y axis
	thetaAcc = atan2((float)accX, (float)accY);
    84fa:	60 91 2c 04 	lds	r22, 0x042C
    84fe:	70 91 2d 04 	lds	r23, 0x042D
    8502:	88 27       	eor	r24, r24
    8504:	77 fd       	sbrc	r23, 7
    8506:	80 95       	com	r24
    8508:	98 2f       	mov	r25, r24
    850a:	0e 94 d3 4f 	call	0x9fa6	; 0x9fa6 <__floatsisf>
    850e:	7b 01       	movw	r14, r22
    8510:	8c 01       	movw	r16, r24
    8512:	60 91 2e 04 	lds	r22, 0x042E
    8516:	70 91 2f 04 	lds	r23, 0x042F
    851a:	88 27       	eor	r24, r24
    851c:	77 fd       	sbrc	r23, 7
    851e:	80 95       	com	r24
    8520:	98 2f       	mov	r25, r24
    8522:	0e 94 d3 4f 	call	0x9fa6	; 0x9fa6 <__floatsisf>
    8526:	9b 01       	movw	r18, r22
    8528:	ac 01       	movw	r20, r24
    852a:	c8 01       	movw	r24, r16
    852c:	b7 01       	movw	r22, r14
    852e:	0e 94 de 4e 	call	0x9dbc	; 0x9dbc <atan2>
    8532:	60 93 a4 04 	sts	0x04A4, r22
    8536:	70 93 a5 04 	sts	0x04A5, r23
    853a:	80 93 a6 04 	sts	0x04A6, r24
    853e:	90 93 a7 04 	sts	0x04A7, r25
	currentAngle = (signed int)(thetaAcc*RAD_2_DEG);
    8542:	21 ee       	ldi	r18, 0xE1	; 225
    8544:	3e e2       	ldi	r19, 0x2E	; 46
    8546:	45 e6       	ldi	r20, 0x65	; 101
    8548:	52 e4       	ldi	r21, 0x42	; 66
    854a:	0e 94 e8 50 	call	0xa1d0	; 0xa1d0 <__mulsf3>
    854e:	0e 94 a0 4f 	call	0x9f40	; 0x9f40 <__fixsfsi>
    8552:	9b 01       	movw	r18, r22
    8554:	70 93 3f 04 	sts	0x043F, r23
    8558:	60 93 3e 04 	sts	0x043E, r22

	if(currentAngle < 0) {
    855c:	77 ff       	sbrs	r23, 7
    855e:	06 c0       	rjmp	.+12     	; 0x856c <computeAngle+0xba>
		currentAngle = currentAngle + (signed int)360;	// angles from 0 to 360
    8560:	28 59       	subi	r18, 0x98	; 152
    8562:	3e 4f       	sbci	r19, 0xFE	; 254
    8564:	30 93 3f 04 	sts	0x043F, r19
    8568:	20 93 3e 04 	sts	0x043E, r18
	}

}
    856c:	1f 91       	pop	r17
    856e:	0f 91       	pop	r16
    8570:	ff 90       	pop	r15
    8572:	ef 90       	pop	r14
    8574:	08 95       	ret
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
		currPosition = HORIZONTAL_POS;
	} else {
		currPosition = VERTICAL_POS;	
    8576:	10 92 15 02 	sts	0x0215, r1
    857a:	20 e0       	ldi	r18, 0x00	; 0
	}
	if(currPosition != robotPosition) {			
    857c:	80 91 16 02 	lds	r24, 0x0216
    8580:	82 17       	cp	r24, r18
    8582:	09 f0       	breq	.+2      	; 0x8586 <computeAngle+0xd4>
    8584:	ad cf       	rjmp	.-166    	; 0x84e0 <computeAngle+0x2e>
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
			robotPosition = currPosition;
		}
	} else {
		timesInSamePos = 0;
    8586:	10 92 41 04 	sts	0x0441, r1
    858a:	10 92 40 04 	sts	0x0440, r1
    858e:	b5 cf       	rjmp	.-150    	; 0x84fa <computeAngle+0x48>
		currPosition = VERTICAL_POS;	
	}
	if(currPosition != robotPosition) {			
		timesInSamePos++;
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
    8590:	10 92 41 04 	sts	0x0441, r1
    8594:	10 92 40 04 	sts	0x0440, r1
			robotPosition = currPosition;
    8598:	20 93 16 02 	sts	0x0216, r18
    859c:	ae cf       	rjmp	.-164    	; 0x84fa <computeAngle+0x48>

}

void computeAngle() {

	unsigned int abs_acc_z=abs(accZ);
    859e:	90 95       	com	r25
    85a0:	81 95       	neg	r24
    85a2:	9f 4f       	sbci	r25, 0xFF	; 255
    85a4:	90 cf       	rjmp	.-224    	; 0x84c6 <computeAngle+0x14>

000085a6 <writeCalibrationToFlash>:


#include "eepromIO.h"

void writeCalibrationToFlash() {	
	eeprom_update_block(calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
    85a6:	85 ec       	ldi	r24, 0xC5	; 197
    85a8:	98 e0       	ldi	r25, 0x08	; 8
    85aa:	6c e6       	ldi	r22, 0x6C	; 108
    85ac:	7f e0       	ldi	r23, 0x0F	; 15
    85ae:	40 e9       	ldi	r20, 0x90	; 144
    85b0:	50 e0       	ldi	r21, 0x00	; 0
    85b2:	0e 94 79 52 	call	0xa4f2	; 0xa4f2 <__eeupd_block_m2560>
	eeprom_update_word ((uint16_t*) CALIB_CHECK_ADDRESS, 0xAA55);   // to let know the calibration data are valid
    85b6:	8a e6       	ldi	r24, 0x6A	; 106
    85b8:	9f e0       	ldi	r25, 0x0F	; 15
    85ba:	65 e5       	ldi	r22, 0x55	; 85
    85bc:	7a ea       	ldi	r23, 0xAA	; 170
    85be:	0e 94 9b 52 	call	0xa536	; 0xa536 <__eeupd_word_m2560>
}
    85c2:	08 95       	ret

000085c4 <readCalibrationFromFlash>:

void readCalibrationFromFlash() {
	eeprom_read_block (calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
    85c4:	85 ec       	ldi	r24, 0xC5	; 197
    85c6:	98 e0       	ldi	r25, 0x08	; 8
    85c8:	6c e6       	ldi	r22, 0x6C	; 108
    85ca:	7f e0       	ldi	r23, 0x0F	; 15
    85cc:	40 e9       	ldi	r20, 0x90	; 144
    85ce:	50 e0       	ldi	r21, 0x00	; 0
    85d0:	0e 94 5b 52 	call	0xa4b6	; 0xa4b6 <__eerd_block_m2560>
}
    85d4:	08 95       	ret

000085d6 <irCommInitTransmitter>:
#include "irCommunication.h"


void irCommInitTransmitter() {
	irCommEnabled = IRCOMM_MODE_TRANSMIT;
    85d6:	82 e0       	ldi	r24, 0x02	; 2
    85d8:	80 93 c4 04 	sts	0x04C4, r24
	irCommState = IRCOMM_TX_IDLE_STATE;
    85dc:	81 e0       	ldi	r24, 0x01	; 1
    85de:	80 93 c7 04 	sts	0x04C7, r24
}
    85e2:	08 95       	ret

000085e4 <irCommInitReceiver>:

void irCommInitReceiver() {
	irCommEnabled = IRCOMM_MODE_RECEIVE;
    85e4:	81 e0       	ldi	r24, 0x01	; 1
    85e6:	80 93 c4 04 	sts	0x04C4, r24
	irCommState = IRCOMM_RX_IDLE_STATE;
    85ea:	80 93 c7 04 	sts	0x04C7, r24
	irCommEnabledNext = IRCOMM_MODE_RECEIVE;
    85ee:	80 93 c5 04 	sts	0x04C5, r24
}
    85f2:	08 95       	ret

000085f4 <irCommInit>:

void irCommInit() {
	irCommProxValuesAdc = irCommProxValuesBuff1;
    85f4:	8c ea       	ldi	r24, 0xAC	; 172
    85f6:	95 e0       	ldi	r25, 0x05	; 5
    85f8:	90 93 4d 08 	sts	0x084D, r25
    85fc:	80 93 4c 08 	sts	0x084C, r24
	irCommProxValuesCurr = irCommProxValuesBuff2;
    8600:	8e ee       	ldi	r24, 0xEE	; 238
    8602:	96 e0       	ldi	r25, 0x06	; 6
    8604:	90 93 2f 08 	sts	0x082F, r25
    8608:	80 93 2e 08 	sts	0x082E, r24
	irCommMaxSensorValueAdc = irCommMaxSensorValueBuff1;
    860c:	eb e5       	ldi	r30, 0x5B	; 91
    860e:	f9 e0       	ldi	r31, 0x09	; 9
    8610:	f0 93 1b 0b 	sts	0x0B1B, r31
    8614:	e0 93 1a 0b 	sts	0x0B1A, r30
	irCommMaxSensorValueCurr = irCommMaxSensorValueBuff2;
    8618:	89 e4       	ldi	r24, 0x49	; 73
    861a:	9b e0       	ldi	r25, 0x0B	; 11
    861c:	90 93 2c 05 	sts	0x052C, r25
    8620:	80 93 2b 05 	sts	0x052B, r24
	irCommMinSensorValueAdc = irCommMinSensorValueBuff1;
    8624:	80 e3       	ldi	r24, 0x30	; 48
    8626:	98 e0       	ldi	r25, 0x08	; 8
    8628:	90 93 a9 05 	sts	0x05A9, r25
    862c:	80 93 a8 05 	sts	0x05A8, r24
	irCommMinSensorValueCurr = irCommMinSensorValueBuff2;
    8630:	25 eb       	ldi	r18, 0xB5	; 181
    8632:	38 e0       	ldi	r19, 0x08	; 8
    8634:	30 93 18 05 	sts	0x0518, r19
    8638:	20 93 17 05 	sts	0x0517, r18
	memset(irCommMaxSensorValueAdc, 0x00, 16);
    863c:	20 e1       	ldi	r18, 0x10	; 16
    863e:	df 01       	movw	r26, r30
    8640:	1d 92       	st	X+, r1
    8642:	2a 95       	dec	r18
    8644:	e9 f7       	brne	.-6      	; 0x8640 <irCommInit+0x4c>
	memset(irCommMinSensorValueAdc, 0xFF, 16);
    8646:	6f ef       	ldi	r22, 0xFF	; 255
    8648:	70 e0       	ldi	r23, 0x00	; 0
    864a:	40 e1       	ldi	r20, 0x10	; 16
    864c:	50 e0       	ldi	r21, 0x00	; 0
    864e:	0e 94 54 52 	call	0xa4a8	; 0xa4a8 <memset>
	irCommMode = IRCOMM_MODE_SENSORS_SAMPLING;
    8652:	10 92 c6 04 	sts	0x04C6, r1
	irCommEnabled = IRCOMM_MODE_TRANSMIT;
	irCommState = IRCOMM_TX_IDLE_STATE;
}

void irCommInitReceiver() {
	irCommEnabled = IRCOMM_MODE_RECEIVE;
    8656:	81 e0       	ldi	r24, 0x01	; 1
    8658:	80 93 c4 04 	sts	0x04C4, r24
	irCommState = IRCOMM_RX_IDLE_STATE;
    865c:	80 93 c7 04 	sts	0x04C7, r24
	irCommEnabledNext = IRCOMM_MODE_RECEIVE;
    8660:	80 93 c5 04 	sts	0x04C5, r24
	irCommMinSensorValueCurr = irCommMinSensorValueBuff2;
	memset(irCommMaxSensorValueAdc, 0x00, 16);
	memset(irCommMinSensorValueAdc, 0xFF, 16);
	irCommMode = IRCOMM_MODE_SENSORS_SAMPLING;
	irCommInitReceiver();
}
    8664:	08 95       	ret

00008666 <irCommDeinit>:

void irCommDeinit() {
	irCommEnabled = IRCOMM_MODE_SENSORS_SAMPLING;
    8666:	10 92 c4 04 	sts	0x04C4, r1
	irCommMode = IRCOMM_MODE_SENSORS_SAMPLING;
    866a:	10 92 c6 04 	sts	0x04C6, r1
}
    866e:	08 95       	ret

00008670 <resetDebugVariables>:

void resetDebugVariables() {
    8670:	ef 92       	push	r14
    8672:	ff 92       	push	r15
    8674:	0f 93       	push	r16
    8676:	1f 93       	push	r17
    8678:	cf 93       	push	r28
    867a:	df 93       	push	r29
	irCommRxMaxSensorIndexTemp=0;
    867c:	10 92 d6 04 	sts	0x04D6, r1
	irCommRxMaxDiffIndexTemp=0;
    8680:	10 92 d7 04 	sts	0x04D7, r1
	irCommMaxSensorValueCurrIndexTemp=0;
    8684:	10 92 da 04 	sts	0x04DA, r1
	irCommMinSensorValueCurrIndexTemp=0;
    8688:	10 92 db 04 	sts	0x04DB, r1
	memset(irCommRxMaxSensorTemp, 0xFF, 4);
    868c:	ee 24       	eor	r14, r14
    868e:	ea 94       	dec	r14
    8690:	fe 2c       	mov	r15, r14
    8692:	87 01       	movw	r16, r14
    8694:	e0 92 0c 0b 	sts	0x0B0C, r14
    8698:	f0 92 0d 0b 	sts	0x0B0D, r15
    869c:	00 93 0e 0b 	sts	0x0B0E, r16
    86a0:	10 93 0f 0b 	sts	0x0B0F, r17
	memset(irCommRxMaxDiffTemp, 0xFF, 4);
    86a4:	e0 92 45 0b 	sts	0x0B45, r14
    86a8:	f0 92 46 0b 	sts	0x0B46, r15
    86ac:	00 93 47 0b 	sts	0x0B47, r16
    86b0:	10 93 48 0b 	sts	0x0B48, r17
	memset(irCommMaxSensorValueCurrTemp, 0xFF, 4);
    86b4:	e0 92 19 05 	sts	0x0519, r14
    86b8:	f0 92 1a 05 	sts	0x051A, r15
    86bc:	00 93 1b 05 	sts	0x051B, r16
    86c0:	10 93 1c 05 	sts	0x051C, r17
	memset(irCommMinSensorValueCurrTemp, 0xFF, 4);
    86c4:	e0 92 10 0b 	sts	0x0B10, r14
    86c8:	f0 92 11 0b 	sts	0x0B11, r15
    86cc:	00 93 12 0b 	sts	0x0B12, r16
    86d0:	10 93 13 0b 	sts	0x0B13, r17

	irCommStateIndexTemp = 0;					
    86d4:	10 92 e3 04 	sts	0x04E3, r1
	memset(irCommStateTemp, 0xFF, 14);
    86d8:	8d e1       	ldi	r24, 0x1D	; 29
    86da:	95 e0       	ldi	r25, 0x05	; 5
    86dc:	6f ef       	ldi	r22, 0xFF	; 255
    86de:	70 e0       	ldi	r23, 0x00	; 0
    86e0:	4e e0       	ldi	r20, 0x0E	; 14
    86e2:	50 e0       	ldi	r21, 0x00	; 0
    86e4:	0e 94 54 52 	call	0xa4a8	; 0xa4a8 <memset>

	irCommShiftCountFinalIndexTemp = 0;
    86e8:	10 92 dd 04 	sts	0x04DD, r1
	memset(irCommShiftCountFinalTemp, 0xFF, 2);
    86ec:	cf ef       	ldi	r28, 0xFF	; 255
    86ee:	df ef       	ldi	r29, 0xFF	; 255
    86f0:	d0 93 19 0b 	sts	0x0B19, r29
    86f4:	c0 93 18 0b 	sts	0x0B18, r28
	irCommRxStartBitDetectedIndexTemp = 0;
    86f8:	10 92 e2 04 	sts	0x04E2, r1
	memset(irCommRxStartBitDetectedTemp, 0xFF, 2);
    86fc:	d0 93 57 05 	sts	0x0557, r29
    8700:	c0 93 56 05 	sts	0x0556, r28
	irCommSwitchCountIndexTemp = 0;
    8704:	10 92 d9 04 	sts	0x04D9, r1
	memset(irCommSwitchCountTemp, 0xFF, 2);
    8708:	d0 93 33 05 	sts	0x0533, r29
    870c:	c0 93 32 05 	sts	0x0532, r28
	irCommMaxSensorSignalFiltIndexTemp = 0;
    8710:	10 92 d5 04 	sts	0x04D5, r1
	memset(irCommMaxSensorSignalFiltTemp, 0xFF, 80);
    8714:	88 e5       	ldi	r24, 0x58	; 88
    8716:	95 e0       	ldi	r25, 0x05	; 5
    8718:	6f ef       	ldi	r22, 0xFF	; 255
    871a:	70 e0       	ldi	r23, 0x00	; 0
    871c:	40 e5       	ldi	r20, 0x50	; 80
    871e:	50 e0       	ldi	r21, 0x00	; 0
    8720:	0e 94 54 52 	call	0xa4a8	; 0xa4a8 <memset>
	irCommMaxSensorSignalIndexTemp = 0;
    8724:	10 92 d4 04 	sts	0x04D4, r1
	memset(irCommMaxSensorSignalTemp, 0xFF, 80);
    8728:	8e e4       	ldi	r24, 0x4E	; 78
    872a:	98 e0       	ldi	r25, 0x08	; 8
    872c:	6f ef       	ldi	r22, 0xFF	; 255
    872e:	70 e0       	ldi	r23, 0x00	; 0
    8730:	40 e5       	ldi	r20, 0x50	; 80
    8732:	50 e0       	ldi	r21, 0x00	; 0
    8734:	0e 94 54 52 	call	0xa4a8	; 0xa4a8 <memset>
	irCommProxMeanIndexTemp = 0;
    8738:	10 92 d8 04 	sts	0x04D8, r1
	memset(irCommProxMeanTemp, 0xFF, 4);
    873c:	e0 92 50 05 	sts	0x0550, r14
    8740:	f0 92 51 05 	sts	0x0551, r15
    8744:	00 93 52 05 	sts	0x0552, r16
    8748:	10 93 53 05 	sts	0x0553, r17
	irCommComputeShiftIndexTemp = 0;
    874c:	10 92 df 04 	sts	0x04DF, r1
	memset(irCommComputeShiftTemp, 0xFF, 2);
    8750:	d0 93 4e 05 	sts	0x054E, r29
    8754:	c0 93 4d 05 	sts	0x054D, r28
	irCommShiftCountIndexTemp = 0;
    8758:	10 92 dc 04 	sts	0x04DC, r1
	memset(irCommShiftCountTemp, 0xFF, 2);
    875c:	d0 93 61 0b 	sts	0x0B61, r29
    8760:	c0 93 60 0b 	sts	0x0B60, r28
	irCommRxPeakHighToLowIndexTemp = 0;
    8764:	10 92 e0 04 	sts	0x04E0, r1
	memset(irCommRxPeakHighToLowTemp, 0xFF, 2);
    8768:	d0 93 ab 05 	sts	0x05AB, r29
    876c:	c0 93 aa 05 	sts	0x05AA, r28
	irCommRxStartPeakDurationIndexTemp = 0;
    8770:	10 92 e1 04 	sts	0x04E1, r1
	memset(irCommRxStartPeakDurationTemp, 0xFF, 2);
    8774:	d0 93 ed 06 	sts	0x06ED, r29
    8778:	c0 93 ec 06 	sts	0x06EC, r28
	irCommStartDiffIndexTemp = 0;
    877c:	10 92 de 04 	sts	0x04DE, r1
	memset(irCommSyncStateTemp, 0xFF, 2);
    8780:	d0 93 4c 05 	sts	0x054C, r29
    8784:	c0 93 4b 05 	sts	0x054B, r28
	irCommSyncStateIndexTemp = 0;
    8788:	10 92 e4 04 	sts	0x04E4, r1
	memset(irCommBitsSignalTemp, 0xFF, 400);
    878c:	8a e7       	ldi	r24, 0x7A	; 122
    878e:	99 e0       	ldi	r25, 0x09	; 9
    8790:	6f ef       	ldi	r22, 0xFF	; 255
    8792:	70 e0       	ldi	r23, 0x00	; 0
    8794:	40 e9       	ldi	r20, 0x90	; 144
    8796:	51 e0       	ldi	r21, 0x01	; 1
    8798:	0e 94 54 52 	call	0xa4a8	; 0xa4a8 <memset>
	irCommBitsSignalIndexTemp = 0;
    879c:	10 92 e5 04 	sts	0x04E5, r1
	memset(irCommRxBitReceivedTemp, 0xFF, 10);
    87a0:	80 e4       	ldi	r24, 0x40	; 64
    87a2:	98 e0       	ldi	r25, 0x08	; 8
    87a4:	6f ef       	ldi	r22, 0xFF	; 255
    87a6:	70 e0       	ldi	r23, 0x00	; 0
    87a8:	4a e0       	ldi	r20, 0x0A	; 10
    87aa:	50 e0       	ldi	r21, 0x00	; 0
    87ac:	0e 94 54 52 	call	0xa4a8	; 0xa4a8 <memset>
	irCommRxBitReceivedIndexTemp = 0;
    87b0:	10 92 e6 04 	sts	0x04E6, r1
	
	
}
    87b4:	df 91       	pop	r29
    87b6:	cf 91       	pop	r28
    87b8:	1f 91       	pop	r17
    87ba:	0f 91       	pop	r16
    87bc:	ff 90       	pop	r15
    87be:	ef 90       	pop	r14
    87c0:	08 95       	ret

000087c2 <irCommTasks>:

void irCommTasks() {
    87c2:	4f 92       	push	r4
    87c4:	5f 92       	push	r5
    87c6:	6f 92       	push	r6
    87c8:	7f 92       	push	r7
    87ca:	8f 92       	push	r8
    87cc:	9f 92       	push	r9
    87ce:	af 92       	push	r10
    87d0:	bf 92       	push	r11
    87d2:	cf 92       	push	r12
    87d4:	df 92       	push	r13
    87d6:	ef 92       	push	r14
    87d8:	ff 92       	push	r15
    87da:	0f 93       	push	r16
    87dc:	1f 93       	push	r17
    87de:	df 93       	push	r29
    87e0:	cf 93       	push	r28
    87e2:	0f 92       	push	r0
    87e4:	0f 92       	push	r0
    87e6:	cd b7       	in	r28, 0x3d	; 61
    87e8:	de b7       	in	r29, 0x3e	; 62
	int i = 0;

	if(irCommMode==IRCOMM_MODE_RECEIVE) {
    87ea:	00 91 c6 04 	lds	r16, 0x04C6
    87ee:	01 30       	cpi	r16, 0x01	; 1
    87f0:	09 f4       	brne	.+2      	; 0x87f4 <irCommTasks+0x32>
    87f2:	ce c0       	rjmp	.+412    	; 0x8990 <irCommTasks+0x1ce>
			case IRCOMM_RX_STOP:
				break;
					
		}

	} else if(irCommMode==IRCOMM_MODE_TRANSMIT) {
    87f4:	02 30       	cpi	r16, 0x02	; 2
    87f6:	99 f0       	breq	.+38     	; 0x881e <irCommTasks+0x5c>

		}

	}

}
    87f8:	0f 90       	pop	r0
    87fa:	0f 90       	pop	r0
    87fc:	cf 91       	pop	r28
    87fe:	df 91       	pop	r29
    8800:	1f 91       	pop	r17
    8802:	0f 91       	pop	r16
    8804:	ff 90       	pop	r15
    8806:	ef 90       	pop	r14
    8808:	df 90       	pop	r13
    880a:	cf 90       	pop	r12
    880c:	bf 90       	pop	r11
    880e:	af 90       	pop	r10
    8810:	9f 90       	pop	r9
    8812:	8f 90       	pop	r8
    8814:	7f 90       	pop	r7
    8816:	6f 90       	pop	r6
    8818:	5f 90       	pop	r5
    881a:	4f 90       	pop	r4
    881c:	08 95       	ret
					
		}

	} else if(irCommMode==IRCOMM_MODE_TRANSMIT) {

		switch(irCommState) {
    881e:	80 91 c7 04 	lds	r24, 0x04C7
    8822:	82 30       	cpi	r24, 0x02	; 2
    8824:	09 f4       	brne	.+2      	; 0x8828 <irCommTasks+0x66>
    8826:	03 c2       	rjmp	.+1030   	; 0x8c2e <irCommTasks+0x46c>
    8828:	85 30       	cpi	r24, 0x05	; 5
    882a:	31 f7       	brne	.-52     	; 0x87f8 <irCommTasks+0x36>
				break;

			case IRCOMM_TX_PREPARE_TRANSMISSION:				
				//updateBlueLed(255);
				//updateBlueLed(0);
				irCommTickCounter = getTime100MicroSec()-irCommTickCounter2;
    882c:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <getTime100MicroSec>
    8830:	20 91 cf 04 	lds	r18, 0x04CF
    8834:	30 91 d0 04 	lds	r19, 0x04D0
    8838:	40 91 d1 04 	lds	r20, 0x04D1
    883c:	50 91 d2 04 	lds	r21, 0x04D2
    8840:	62 1b       	sub	r22, r18
    8842:	73 0b       	sbc	r23, r19
    8844:	84 0b       	sbc	r24, r20
    8846:	95 0b       	sbc	r25, r21
    8848:	60 93 cb 04 	sts	0x04CB, r22
    884c:	70 93 cc 04 	sts	0x04CC, r23
    8850:	80 93 cd 04 	sts	0x04CD, r24
    8854:	90 93 ce 04 	sts	0x04CE, r25
				irCommTickCounter2 = getTime100MicroSec();
    8858:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <getTime100MicroSec>
    885c:	60 93 cf 04 	sts	0x04CF, r22
    8860:	70 93 d0 04 	sts	0x04D0, r23
    8864:	80 93 d1 04 	sts	0x04D1, r24
    8868:	90 93 d2 04 	sts	0x04D2, r25
				irCommTxBitToTransmit[0] = 2;	// start bit 1
    886c:	00 93 35 05 	sts	0x0535, r16
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
    8870:	83 e0       	ldi	r24, 0x03	; 3
    8872:	80 93 36 05 	sts	0x0536, r24
    8876:	80 91 06 05 	lds	r24, 0x0506
    887a:	90 e0       	ldi	r25, 0x00	; 0
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    887c:	9c 01       	movw	r18, r24
    887e:	21 70       	andi	r18, 0x01	; 1
    8880:	30 70       	andi	r19, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    8882:	20 93 3e 05 	sts	0x053E, r18
	irCommRxBitReceivedIndexTemp = 0;
	
	
}

void irCommTasks() {
    8886:	41 e0       	ldi	r20, 0x01	; 1
    8888:	21 30       	cpi	r18, 0x01	; 1
    888a:	31 05       	cpc	r19, r1
    888c:	09 f0       	breq	.+2      	; 0x8890 <irCommTasks+0xce>
    888e:	40 e0       	ldi	r20, 0x00	; 0
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    8890:	9c 01       	movw	r18, r24
    8892:	35 95       	asr	r19
    8894:	27 95       	ror	r18
    8896:	21 70       	andi	r18, 0x01	; 1
    8898:	30 70       	andi	r19, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    889a:	20 93 3d 05 	sts	0x053D, r18
					if(irCommTempValue==1) {
    889e:	21 30       	cpi	r18, 0x01	; 1
    88a0:	31 05       	cpc	r19, r1
    88a2:	09 f4       	brne	.+2      	; 0x88a6 <irCommTasks+0xe4>
    88a4:	69 c7       	rjmp	.+3794   	; 0x9778 <irCommTasks+0xfb6>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    88a6:	9c 01       	movw	r18, r24
    88a8:	35 95       	asr	r19
    88aa:	27 95       	ror	r18
    88ac:	35 95       	asr	r19
    88ae:	27 95       	ror	r18
    88b0:	21 70       	andi	r18, 0x01	; 1
    88b2:	30 70       	andi	r19, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    88b4:	20 93 3c 05 	sts	0x053C, r18
					if(irCommTempValue==1) {
    88b8:	21 30       	cpi	r18, 0x01	; 1
    88ba:	31 05       	cpc	r19, r1
    88bc:	09 f4       	brne	.+2      	; 0x88c0 <irCommTasks+0xfe>
    88be:	60 c7       	rjmp	.+3776   	; 0x9780 <irCommTasks+0xfbe>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    88c0:	9c 01       	movw	r18, r24
    88c2:	35 95       	asr	r19
    88c4:	27 95       	ror	r18
    88c6:	35 95       	asr	r19
    88c8:	27 95       	ror	r18
    88ca:	35 95       	asr	r19
    88cc:	27 95       	ror	r18
    88ce:	21 70       	andi	r18, 0x01	; 1
    88d0:	30 70       	andi	r19, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    88d2:	20 93 3b 05 	sts	0x053B, r18
					if(irCommTempValue==1) {
    88d6:	21 30       	cpi	r18, 0x01	; 1
    88d8:	31 05       	cpc	r19, r1
    88da:	09 f4       	brne	.+2      	; 0x88de <irCommTasks+0x11c>
    88dc:	4f c7       	rjmp	.+3742   	; 0x977c <irCommTasks+0xfba>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    88de:	9c 01       	movw	r18, r24
    88e0:	35 95       	asr	r19
    88e2:	27 95       	ror	r18
    88e4:	35 95       	asr	r19
    88e6:	27 95       	ror	r18
    88e8:	35 95       	asr	r19
    88ea:	27 95       	ror	r18
    88ec:	35 95       	asr	r19
    88ee:	27 95       	ror	r18
    88f0:	21 70       	andi	r18, 0x01	; 1
    88f2:	30 70       	andi	r19, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    88f4:	20 93 3a 05 	sts	0x053A, r18
					if(irCommTempValue==1) {
    88f8:	21 30       	cpi	r18, 0x01	; 1
    88fa:	31 05       	cpc	r19, r1
    88fc:	09 f4       	brne	.+2      	; 0x8900 <irCommTasks+0x13e>
    88fe:	48 c7       	rjmp	.+3728   	; 0x9790 <irCommTasks+0xfce>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    8900:	9c 01       	movw	r18, r24
    8902:	35 95       	asr	r19
    8904:	27 95       	ror	r18
    8906:	35 95       	asr	r19
    8908:	27 95       	ror	r18
    890a:	35 95       	asr	r19
    890c:	27 95       	ror	r18
    890e:	35 95       	asr	r19
    8910:	27 95       	ror	r18
    8912:	35 95       	asr	r19
    8914:	27 95       	ror	r18
    8916:	21 70       	andi	r18, 0x01	; 1
    8918:	30 70       	andi	r19, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    891a:	20 93 39 05 	sts	0x0539, r18
					if(irCommTempValue==1) {
    891e:	21 30       	cpi	r18, 0x01	; 1
    8920:	31 05       	cpc	r19, r1
    8922:	09 f4       	brne	.+2      	; 0x8926 <irCommTasks+0x164>
    8924:	33 c7       	rjmp	.+3686   	; 0x978c <irCommTasks+0xfca>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    8926:	9c 01       	movw	r18, r24
    8928:	02 2e       	mov	r0, r18
    892a:	23 2f       	mov	r18, r19
    892c:	00 0c       	add	r0, r0
    892e:	22 1f       	adc	r18, r18
    8930:	33 0b       	sbc	r19, r19
    8932:	00 0c       	add	r0, r0
    8934:	22 1f       	adc	r18, r18
    8936:	33 1f       	adc	r19, r19
    8938:	21 70       	andi	r18, 0x01	; 1
    893a:	30 70       	andi	r19, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    893c:	20 93 38 05 	sts	0x0538, r18
					if(irCommTempValue==1) {
    8940:	21 30       	cpi	r18, 0x01	; 1
    8942:	31 05       	cpc	r19, r1
    8944:	09 f4       	brne	.+2      	; 0x8948 <irCommTasks+0x186>
    8946:	20 c7       	rjmp	.+3648   	; 0x9788 <irCommTasks+0xfc6>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    8948:	88 0f       	add	r24, r24
    894a:	89 2f       	mov	r24, r25
    894c:	88 1f       	adc	r24, r24
    894e:	99 0b       	sbc	r25, r25
    8950:	91 95       	neg	r25
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    8952:	80 93 37 05 	sts	0x0537, r24
					if(irCommTempValue==1) {
    8956:	81 30       	cpi	r24, 0x01	; 1
    8958:	91 05       	cpc	r25, r1
    895a:	09 f4       	brne	.+2      	; 0x895e <irCommTasks+0x19c>
    895c:	13 c7       	rjmp	.+3622   	; 0x9784 <irCommTasks+0xfc2>
						irCommTxCrc++;
    895e:	90 93 c9 04 	sts	0x04C9, r25
    8962:	80 93 c8 04 	sts	0x04C8, r24
					}
					//irCommTxBitToTransmit[9-i] = 2;
				}
				irCommTxCrc = irCommTxCrc % 4;
    8966:	43 70       	andi	r20, 0x03	; 3
				irCommTxCrc = 4 - irCommTxCrc;
    8968:	84 e0       	ldi	r24, 0x04	; 4
    896a:	84 1b       	sub	r24, r20
    896c:	80 93 0c 05 	sts	0x050C, r24
				irCommTxBitToTransmit[10] = (irCommTxCrc>>1)&0x01;
    8970:	98 2f       	mov	r25, r24
    8972:	96 95       	lsr	r25
    8974:	91 70       	andi	r25, 0x01	; 1
    8976:	90 93 3f 05 	sts	0x053F, r25
				irCommTxBitToTransmit[11] = irCommTxCrc&0x01;	
    897a:	81 70       	andi	r24, 0x01	; 1
    897c:	80 93 40 05 	sts	0x0540, r24
				irCommTxBitCount = 0;							
    8980:	10 92 0d 05 	sts	0x050D, r1
				irCommTxPulseState = 0;	
    8984:	10 92 0e 05 	sts	0x050E, r1
				irCommState = IRCOMM_TX_COMPUTE_TIMINGS;				
    8988:	82 e0       	ldi	r24, 0x02	; 2
    898a:	80 93 c7 04 	sts	0x04C7, r24
				break;
    898e:	34 cf       	rjmp	.-408    	; 0x87f8 <irCommTasks+0x36>
void irCommTasks() {
	int i = 0;

	if(irCommMode==IRCOMM_MODE_RECEIVE) {

		switch(irCommState) {
    8990:	10 91 c7 04 	lds	r17, 0x04C7
    8994:	13 30       	cpi	r17, 0x03	; 3
    8996:	09 f4       	brne	.+2      	; 0x899a <irCommTasks+0x1d8>
    8998:	26 c2       	rjmp	.+1100   	; 0x8de6 <irCommTasks+0x624>
    899a:	14 30       	cpi	r17, 0x04	; 4
    899c:	08 f0       	brcs	.+2      	; 0x89a0 <irCommTasks+0x1de>
    899e:	79 c1       	rjmp	.+754    	; 0x8c92 <irCommTasks+0x4d0>
    89a0:	11 30       	cpi	r17, 0x01	; 1
    89a2:	09 f4       	brne	.+2      	; 0x89a6 <irCommTasks+0x1e4>
    89a4:	56 c3       	rjmp	.+1708   	; 0x9052 <irCommTasks+0x890>
    89a6:	12 30       	cpi	r17, 0x02	; 2
    89a8:	09 f0       	breq	.+2      	; 0x89ac <irCommTasks+0x1ea>
    89aa:	26 cf       	rjmp	.-436    	; 0x87f8 <irCommTasks+0x36>
					}					
				}
				break;

			case IRCOMM_RX_MAX_SENSOR_STATE:				
				irCommRxMaxDiff = -1;
    89ac:	8f ef       	ldi	r24, 0xFF	; 255
    89ae:	9f ef       	ldi	r25, 0xFF	; 255
    89b0:	90 93 4b 08 	sts	0x084B, r25
    89b4:	80 93 4a 08 	sts	0x084A, r24
    			irCommRxMaxSensor = -1;
    89b8:	90 93 5e 0b 	sts	0x0B5E, r25
    89bc:	80 93 5d 0b 	sts	0x0B5D, r24
    89c0:	a0 91 2b 05 	lds	r26, 0x052B
    89c4:	b0 91 2c 05 	lds	r27, 0x052C
    89c8:	c0 90 17 05 	lds	r12, 0x0517
    89cc:	d0 90 18 05 	lds	r13, 0x0518
				for(i=0; i<8; i++) {
					if ((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) > irCommRxMaxDiff) {
    89d0:	8d 91       	ld	r24, X+
    89d2:	9c 91       	ld	r25, X
    89d4:	11 97       	sbiw	r26, 0x01	; 1
    89d6:	f6 01       	movw	r30, r12
    89d8:	20 81       	ld	r18, Z
    89da:	31 81       	ldd	r19, Z+1	; 0x01
    89dc:	82 1b       	sub	r24, r18
    89de:	93 0b       	sbc	r25, r19
    89e0:	97 fd       	sbrc	r25, 7
    89e2:	08 c0       	rjmp	.+16     	; 0x89f4 <irCommTasks+0x232>
						irCommRxMaxDiff = irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i];
    89e4:	90 93 4b 08 	sts	0x084B, r25
    89e8:	80 93 4a 08 	sts	0x084A, r24
						irCommRxMaxSensor = i;
    89ec:	10 92 5e 0b 	sts	0x0B5E, r1
    89f0:	10 92 5d 0b 	sts	0x0B5D, r1

			case IRCOMM_RX_MAX_SENSOR_STATE:				
				irCommRxMaxDiff = -1;
    			irCommRxMaxSensor = -1;
				for(i=0; i<8; i++) {
					if ((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) > irCommRxMaxDiff) {
    89f4:	12 96       	adiw	r26, 0x02	; 2
    89f6:	2d 91       	ld	r18, X+
    89f8:	3c 91       	ld	r19, X
    89fa:	13 97       	sbiw	r26, 0x03	; 3
    89fc:	f6 01       	movw	r30, r12
    89fe:	82 81       	ldd	r24, Z+2	; 0x02
    8a00:	93 81       	ldd	r25, Z+3	; 0x03
    8a02:	28 1b       	sub	r18, r24
    8a04:	39 0b       	sbc	r19, r25
    8a06:	80 91 4a 08 	lds	r24, 0x084A
    8a0a:	90 91 4b 08 	lds	r25, 0x084B
    8a0e:	82 17       	cp	r24, r18
    8a10:	93 07       	cpc	r25, r19
    8a12:	5c f4       	brge	.+22     	; 0x8a2a <irCommTasks+0x268>
						irCommRxMaxDiff = irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i];
    8a14:	30 93 4b 08 	sts	0x084B, r19
    8a18:	20 93 4a 08 	sts	0x084A, r18
						irCommRxMaxSensor = i;
    8a1c:	81 e0       	ldi	r24, 0x01	; 1
    8a1e:	90 e0       	ldi	r25, 0x00	; 0
    8a20:	90 93 5e 0b 	sts	0x0B5E, r25
    8a24:	80 93 5d 0b 	sts	0x0B5D, r24
    8a28:	c9 01       	movw	r24, r18

			case IRCOMM_RX_MAX_SENSOR_STATE:				
				irCommRxMaxDiff = -1;
    			irCommRxMaxSensor = -1;
				for(i=0; i<8; i++) {
					if ((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) > irCommRxMaxDiff) {
    8a2a:	14 96       	adiw	r26, 0x04	; 4
    8a2c:	2d 91       	ld	r18, X+
    8a2e:	3c 91       	ld	r19, X
    8a30:	15 97       	sbiw	r26, 0x05	; 5
    8a32:	f6 01       	movw	r30, r12
    8a34:	44 81       	ldd	r20, Z+4	; 0x04
    8a36:	55 81       	ldd	r21, Z+5	; 0x05
    8a38:	24 1b       	sub	r18, r20
    8a3a:	35 0b       	sbc	r19, r21
    8a3c:	82 17       	cp	r24, r18
    8a3e:	93 07       	cpc	r25, r19
    8a40:	5c f4       	brge	.+22     	; 0x8a58 <irCommTasks+0x296>
						irCommRxMaxDiff = irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i];
    8a42:	30 93 4b 08 	sts	0x084B, r19
    8a46:	20 93 4a 08 	sts	0x084A, r18
						irCommRxMaxSensor = i;
    8a4a:	82 e0       	ldi	r24, 0x02	; 2
    8a4c:	90 e0       	ldi	r25, 0x00	; 0
    8a4e:	90 93 5e 0b 	sts	0x0B5E, r25
    8a52:	80 93 5d 0b 	sts	0x0B5D, r24
    8a56:	c9 01       	movw	r24, r18

			case IRCOMM_RX_MAX_SENSOR_STATE:				
				irCommRxMaxDiff = -1;
    			irCommRxMaxSensor = -1;
				for(i=0; i<8; i++) {
					if ((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) > irCommRxMaxDiff) {
    8a58:	16 96       	adiw	r26, 0x06	; 6
    8a5a:	2d 91       	ld	r18, X+
    8a5c:	3c 91       	ld	r19, X
    8a5e:	17 97       	sbiw	r26, 0x07	; 7
    8a60:	f6 01       	movw	r30, r12
    8a62:	46 81       	ldd	r20, Z+6	; 0x06
    8a64:	57 81       	ldd	r21, Z+7	; 0x07
    8a66:	24 1b       	sub	r18, r20
    8a68:	35 0b       	sbc	r19, r21
    8a6a:	82 17       	cp	r24, r18
    8a6c:	93 07       	cpc	r25, r19
    8a6e:	5c f4       	brge	.+22     	; 0x8a86 <irCommTasks+0x2c4>
						irCommRxMaxDiff = irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i];
    8a70:	30 93 4b 08 	sts	0x084B, r19
    8a74:	20 93 4a 08 	sts	0x084A, r18
						irCommRxMaxSensor = i;
    8a78:	83 e0       	ldi	r24, 0x03	; 3
    8a7a:	90 e0       	ldi	r25, 0x00	; 0
    8a7c:	90 93 5e 0b 	sts	0x0B5E, r25
    8a80:	80 93 5d 0b 	sts	0x0B5D, r24
    8a84:	c9 01       	movw	r24, r18

			case IRCOMM_RX_MAX_SENSOR_STATE:				
				irCommRxMaxDiff = -1;
    			irCommRxMaxSensor = -1;
				for(i=0; i<8; i++) {
					if ((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) > irCommRxMaxDiff) {
    8a86:	18 96       	adiw	r26, 0x08	; 8
    8a88:	2d 91       	ld	r18, X+
    8a8a:	3c 91       	ld	r19, X
    8a8c:	19 97       	sbiw	r26, 0x09	; 9
    8a8e:	f6 01       	movw	r30, r12
    8a90:	40 85       	ldd	r20, Z+8	; 0x08
    8a92:	51 85       	ldd	r21, Z+9	; 0x09
    8a94:	24 1b       	sub	r18, r20
    8a96:	35 0b       	sbc	r19, r21
    8a98:	82 17       	cp	r24, r18
    8a9a:	93 07       	cpc	r25, r19
    8a9c:	5c f4       	brge	.+22     	; 0x8ab4 <irCommTasks+0x2f2>
						irCommRxMaxDiff = irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i];
    8a9e:	30 93 4b 08 	sts	0x084B, r19
    8aa2:	20 93 4a 08 	sts	0x084A, r18
						irCommRxMaxSensor = i;
    8aa6:	84 e0       	ldi	r24, 0x04	; 4
    8aa8:	90 e0       	ldi	r25, 0x00	; 0
    8aaa:	90 93 5e 0b 	sts	0x0B5E, r25
    8aae:	80 93 5d 0b 	sts	0x0B5D, r24
    8ab2:	c9 01       	movw	r24, r18

			case IRCOMM_RX_MAX_SENSOR_STATE:				
				irCommRxMaxDiff = -1;
    			irCommRxMaxSensor = -1;
				for(i=0; i<8; i++) {
					if ((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) > irCommRxMaxDiff) {
    8ab4:	1a 96       	adiw	r26, 0x0a	; 10
    8ab6:	2d 91       	ld	r18, X+
    8ab8:	3c 91       	ld	r19, X
    8aba:	1b 97       	sbiw	r26, 0x0b	; 11
    8abc:	f6 01       	movw	r30, r12
    8abe:	42 85       	ldd	r20, Z+10	; 0x0a
    8ac0:	53 85       	ldd	r21, Z+11	; 0x0b
    8ac2:	24 1b       	sub	r18, r20
    8ac4:	35 0b       	sbc	r19, r21
    8ac6:	82 17       	cp	r24, r18
    8ac8:	93 07       	cpc	r25, r19
    8aca:	5c f4       	brge	.+22     	; 0x8ae2 <irCommTasks+0x320>
						irCommRxMaxDiff = irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i];
    8acc:	30 93 4b 08 	sts	0x084B, r19
    8ad0:	20 93 4a 08 	sts	0x084A, r18
						irCommRxMaxSensor = i;
    8ad4:	85 e0       	ldi	r24, 0x05	; 5
    8ad6:	90 e0       	ldi	r25, 0x00	; 0
    8ad8:	90 93 5e 0b 	sts	0x0B5E, r25
    8adc:	80 93 5d 0b 	sts	0x0B5D, r24
    8ae0:	c9 01       	movw	r24, r18

			case IRCOMM_RX_MAX_SENSOR_STATE:				
				irCommRxMaxDiff = -1;
    			irCommRxMaxSensor = -1;
				for(i=0; i<8; i++) {
					if ((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) > irCommRxMaxDiff) {
    8ae2:	1c 96       	adiw	r26, 0x0c	; 12
    8ae4:	2d 91       	ld	r18, X+
    8ae6:	3c 91       	ld	r19, X
    8ae8:	1d 97       	sbiw	r26, 0x0d	; 13
    8aea:	f6 01       	movw	r30, r12
    8aec:	44 85       	ldd	r20, Z+12	; 0x0c
    8aee:	55 85       	ldd	r21, Z+13	; 0x0d
    8af0:	24 1b       	sub	r18, r20
    8af2:	35 0b       	sbc	r19, r21
    8af4:	82 17       	cp	r24, r18
    8af6:	93 07       	cpc	r25, r19
    8af8:	5c f4       	brge	.+22     	; 0x8b10 <irCommTasks+0x34e>
						irCommRxMaxDiff = irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i];
    8afa:	30 93 4b 08 	sts	0x084B, r19
    8afe:	20 93 4a 08 	sts	0x084A, r18
						irCommRxMaxSensor = i;
    8b02:	86 e0       	ldi	r24, 0x06	; 6
    8b04:	90 e0       	ldi	r25, 0x00	; 0
    8b06:	90 93 5e 0b 	sts	0x0B5E, r25
    8b0a:	80 93 5d 0b 	sts	0x0B5D, r24
    8b0e:	c9 01       	movw	r24, r18

			case IRCOMM_RX_MAX_SENSOR_STATE:				
				irCommRxMaxDiff = -1;
    			irCommRxMaxSensor = -1;
				for(i=0; i<8; i++) {
					if ((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) > irCommRxMaxDiff) {
    8b10:	1e 96       	adiw	r26, 0x0e	; 14
    8b12:	2d 91       	ld	r18, X+
    8b14:	3c 91       	ld	r19, X
    8b16:	1f 97       	sbiw	r26, 0x0f	; 15
    8b18:	f6 01       	movw	r30, r12
    8b1a:	46 85       	ldd	r20, Z+14	; 0x0e
    8b1c:	57 85       	ldd	r21, Z+15	; 0x0f
    8b1e:	24 1b       	sub	r18, r20
    8b20:	35 0b       	sbc	r19, r21
    8b22:	82 17       	cp	r24, r18
    8b24:	93 07       	cpc	r25, r19
    8b26:	5c f4       	brge	.+22     	; 0x8b3e <irCommTasks+0x37c>
						irCommRxMaxDiff = irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i];
    8b28:	30 93 4b 08 	sts	0x084B, r19
    8b2c:	20 93 4a 08 	sts	0x084A, r18
						irCommRxMaxSensor = i;
    8b30:	87 e0       	ldi	r24, 0x07	; 7
    8b32:	90 e0       	ldi	r25, 0x00	; 0
    8b34:	90 93 5e 0b 	sts	0x0B5E, r25
    8b38:	80 93 5d 0b 	sts	0x0B5D, r24
    8b3c:	c9 01       	movw	r24, r18
					}
				}

				if(irCommRxMaxSensorIndexTemp>1) {
    8b3e:	20 91 d6 04 	lds	r18, 0x04D6
    8b42:	22 30       	cpi	r18, 0x02	; 2
    8b44:	08 f4       	brcc	.+2      	; 0x8b48 <irCommTasks+0x386>
    8b46:	be c6       	rjmp	.+3452   	; 0x98c4 <irCommTasks+0x1102>
    8b48:	42 e0       	ldi	r20, 0x02	; 2
    8b4a:	61 e0       	ldi	r22, 0x01	; 1
    8b4c:	70 e0       	ldi	r23, 0x00	; 0
					irCommRxMaxSensorIndexTemp = 1;
					//updateBlueLed(0);
				}
				irCommRxMaxSensorTemp[irCommRxMaxSensorIndexTemp] = irCommRxMaxSensor;
    8b4e:	20 91 5d 0b 	lds	r18, 0x0B5D
    8b52:	30 91 5e 0b 	lds	r19, 0x0B5E
    8b56:	66 0f       	add	r22, r22
    8b58:	77 1f       	adc	r23, r23
    8b5a:	64 5f       	subi	r22, 0xF4	; 244
    8b5c:	74 4f       	sbci	r23, 0xF4	; 244
    8b5e:	fb 01       	movw	r30, r22
    8b60:	31 83       	std	Z+1, r19	; 0x01
    8b62:	20 83       	st	Z, r18
				irCommRxMaxSensorIndexTemp++;
    8b64:	40 93 d6 04 	sts	0x04D6, r20
					
				if(irCommRxMaxDiffIndexTemp>1) {
    8b68:	40 91 d7 04 	lds	r20, 0x04D7
    8b6c:	42 30       	cpi	r20, 0x02	; 2
    8b6e:	08 f4       	brcc	.+2      	; 0x8b72 <irCommTasks+0x3b0>
    8b70:	a5 c6       	rjmp	.+3402   	; 0x98bc <irCommTasks+0x10fa>
    8b72:	42 e0       	ldi	r20, 0x02	; 2
    8b74:	61 e0       	ldi	r22, 0x01	; 1
    8b76:	70 e0       	ldi	r23, 0x00	; 0
					irCommRxMaxDiffIndexTemp = 1;
					//updateBlueLed(0);
				}
				irCommRxMaxDiffTemp[irCommRxMaxDiffIndexTemp] = irCommRxMaxDiff;
    8b78:	66 0f       	add	r22, r22
    8b7a:	77 1f       	adc	r23, r23
    8b7c:	6b 5b       	subi	r22, 0xBB	; 187
    8b7e:	74 4f       	sbci	r23, 0xF4	; 244
    8b80:	fb 01       	movw	r30, r22
    8b82:	91 83       	std	Z+1, r25	; 0x01
    8b84:	80 83       	st	Z, r24
				irCommRxMaxDiffIndexTemp++;
    8b86:	40 93 d7 04 	sts	0x04D7, r20
				
				if(irCommMaxSensorValueCurrIndexTemp>1) {
    8b8a:	40 91 da 04 	lds	r20, 0x04DA
    8b8e:	42 30       	cpi	r20, 0x02	; 2
    8b90:	08 f4       	brcc	.+2      	; 0x8b94 <irCommTasks+0x3d2>
    8b92:	8f c6       	rjmp	.+3358   	; 0x98b2 <irCommTasks+0x10f0>
					irCommMaxSensorValueCurrIndexTemp = 1;
    8b94:	41 e0       	ldi	r20, 0x01	; 1
    8b96:	40 93 da 04 	sts	0x04DA, r20
    8b9a:	62 e0       	ldi	r22, 0x02	; 2
    8b9c:	01 e0       	ldi	r16, 0x01	; 1
    8b9e:	10 e0       	ldi	r17, 0x00	; 0
					//updateBlueLed(0);
				}
				irCommMaxSensorValueCurrTemp[irCommMaxSensorValueCurrIndexTemp] = irCommMaxSensorValueCurr[irCommRxMaxSensor];
    8ba0:	22 0f       	add	r18, r18
    8ba2:	33 1f       	adc	r19, r19
    8ba4:	00 0f       	add	r16, r16
    8ba6:	11 1f       	adc	r17, r17
    8ba8:	07 5e       	subi	r16, 0xE7	; 231
    8baa:	1a 4f       	sbci	r17, 0xFA	; 250
    8bac:	a2 0f       	add	r26, r18
    8bae:	b3 1f       	adc	r27, r19
    8bb0:	4d 91       	ld	r20, X+
    8bb2:	5c 91       	ld	r21, X
    8bb4:	d8 01       	movw	r26, r16
    8bb6:	11 96       	adiw	r26, 0x01	; 1
    8bb8:	5c 93       	st	X, r21
    8bba:	4e 93       	st	-X, r20
				irCommMaxSensorValueCurrIndexTemp++;
    8bbc:	60 93 da 04 	sts	0x04DA, r22
				
				if(irCommMinSensorValueCurrIndexTemp>1) {
    8bc0:	40 91 db 04 	lds	r20, 0x04DB
    8bc4:	42 30       	cpi	r20, 0x02	; 2
    8bc6:	08 f4       	brcc	.+2      	; 0x8bca <irCommTasks+0x408>
    8bc8:	70 c6       	rjmp	.+3296   	; 0x98aa <irCommTasks+0x10e8>
					irCommMinSensorValueCurrIndexTemp = 1;
    8bca:	41 e0       	ldi	r20, 0x01	; 1
    8bcc:	40 93 db 04 	sts	0x04DB, r20
    8bd0:	42 e0       	ldi	r20, 0x02	; 2
    8bd2:	a1 e0       	ldi	r26, 0x01	; 1
    8bd4:	b0 e0       	ldi	r27, 0x00	; 0
					//updateBlueLed(0);
				}
				irCommMinSensorValueCurrTemp[irCommMinSensorValueCurrIndexTemp] = irCommMinSensorValueCurr[irCommRxMaxSensor];
    8bd6:	aa 0f       	add	r26, r26
    8bd8:	bb 1f       	adc	r27, r27
    8bda:	a0 5f       	subi	r26, 0xF0	; 240
    8bdc:	b4 4f       	sbci	r27, 0xF4	; 244
    8bde:	f6 01       	movw	r30, r12
    8be0:	e2 0f       	add	r30, r18
    8be2:	f3 1f       	adc	r31, r19
    8be4:	20 81       	ld	r18, Z
    8be6:	31 81       	ldd	r19, Z+1	; 0x01
    8be8:	11 96       	adiw	r26, 0x01	; 1
    8bea:	3c 93       	st	X, r19
    8bec:	2e 93       	st	-X, r18
				irCommMinSensorValueCurrIndexTemp++;			
    8bee:	40 93 db 04 	sts	0x04DB, r20


				//if(irCommRxMaxSensor == -1) {
				//	updateRedLed(0);
				//}
				if(irCommRxMaxDiff >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    8bf2:	88 32       	cpi	r24, 0x28	; 40
    8bf4:	91 05       	cpc	r25, r1
    8bf6:	0c f4       	brge	.+2      	; 0x8bfa <irCommTasks+0x438>
    8bf8:	70 c6       	rjmp	.+3296   	; 0x98da <irCommTasks+0x1118>
					irCommState = IRCOMM_RX_DETECT_START_BIT_STATE;	
    8bfa:	83 e0       	ldi	r24, 0x03	; 3
    8bfc:	80 93 c7 04 	sts	0x04C7, r24
					
					if(irCommStateIndexTemp>13) {
    8c00:	80 91 e3 04 	lds	r24, 0x04E3
    8c04:	8e 30       	cpi	r24, 0x0E	; 14
    8c06:	40 f0       	brcs	.+16     	; 0x8c18 <irCommTasks+0x456>
						irCommStateIndexTemp = 13;
    8c08:	8d e0       	ldi	r24, 0x0D	; 13
    8c0a:	80 93 e3 04 	sts	0x04E3, r24
						updateBlueLed(0);
    8c0e:	80 e0       	ldi	r24, 0x00	; 0
    8c10:	0e 94 0d 3b 	call	0x761a	; 0x761a <updateBlueLed>
    8c14:	80 91 e3 04 	lds	r24, 0x04E3

					if(irCommStateIndexTemp>13) {
						irCommStateIndexTemp = 13;
						updateRedLed(0);
					}
					irCommStateTemp[irCommStateIndexTemp] = irCommState;
    8c18:	90 91 c7 04 	lds	r25, 0x04C7
    8c1c:	e8 2f       	mov	r30, r24
    8c1e:	f0 e0       	ldi	r31, 0x00	; 0
    8c20:	e3 5e       	subi	r30, 0xE3	; 227
    8c22:	fa 4f       	sbci	r31, 0xFA	; 250
    8c24:	90 83       	st	Z, r25
					irCommStateIndexTemp++;
    8c26:	8f 5f       	subi	r24, 0xFF	; 255
    8c28:	80 93 e3 04 	sts	0x04E3, r24
    8c2c:	e5 cd       	rjmp	.-1078   	; 0x87f8 <irCommTasks+0x36>
				irCommTxPulseState = 0;	
				irCommState = IRCOMM_TX_COMPUTE_TIMINGS;				
				break;

			case IRCOMM_TX_COMPUTE_TIMINGS:
				updateBlueLed(255);
    8c2e:	8f ef       	ldi	r24, 0xFF	; 255
    8c30:	0e 94 0d 3b 	call	0x761a	; 0x761a <updateBlueLed>
				if(irCommTxBitToTransmit[irCommTxBitCount] == 3) {
    8c34:	20 91 0d 05 	lds	r18, 0x050D
    8c38:	e2 2f       	mov	r30, r18
    8c3a:	f0 e0       	ldi	r31, 0x00	; 0
    8c3c:	eb 5c       	subi	r30, 0xCB	; 203
    8c3e:	fa 4f       	sbci	r31, 0xFA	; 250
    8c40:	10 81       	ld	r17, Z
    8c42:	13 30       	cpi	r17, 0x03	; 3
    8c44:	09 f4       	brne	.+2      	; 0x8c48 <irCommTasks+0x486>
    8c46:	de c5       	rjmp	.+3004   	; 0x9804 <irCommTasks+0x1042>
					updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START2_DURATION;					
					irCommTxSwitchCount = IRCOMM_BIT_START2_SWITCH_COUNT;
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 2) {
    8c48:	12 30       	cpi	r17, 0x02	; 2
    8c4a:	09 f4       	brne	.+2      	; 0x8c4e <irCommTasks+0x48c>
    8c4c:	1a c6       	rjmp	.+3124   	; 0x9882 <irCommTasks+0x10c0>
					updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START1_DURATION;					
					irCommTxSwitchCount = IRCOMM_BIT_START1_SWITCH_COUNT;
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 1) {
    8c4e:	11 30       	cpi	r17, 0x01	; 1
    8c50:	09 f4       	brne	.+2      	; 0x8c54 <irCommTasks+0x492>
    8c52:	50 c1       	rjmp	.+672    	; 0x8ef4 <irCommTasks+0x732>
					irCommTxDuration = IRCOMM_BIT1_DURATOIN;					
					irCommTxSwitchCount = IRCOMM_BIT1_SWITCH_COUNT;
				} else {
					irCommTxDuration = IRCOMM_BIT0_DURATION;						
    8c54:	8e e1       	ldi	r24, 0x1E	; 30
    8c56:	90 e0       	ldi	r25, 0x00	; 0
    8c58:	90 93 10 05 	sts	0x0510, r25
    8c5c:	80 93 0f 05 	sts	0x050F, r24
					irCommTxSwitchCount = IRCOMM_BIT0_SWITCH_COUNT;
    8c60:	88 e0       	ldi	r24, 0x08	; 8
    8c62:	80 93 11 05 	sts	0x0511, r24
				}
				if(irCommTxBitCount == 0) {
    8c66:	22 23       	and	r18, r18
    8c68:	51 f4       	brne	.+20     	; 0x8c7e <irCommTasks+0x4bc>
					//PORTA = irCommTxSensorMask;
					if(irCommTxSensorGroup==0) {
    8c6a:	80 91 15 05 	lds	r24, 0x0515
    8c6e:	88 23       	and	r24, r24
    8c70:	09 f0       	breq	.+2      	; 0x8c74 <irCommTasks+0x4b2>
    8c72:	90 c5       	rjmp	.+2848   	; 0x9794 <irCommTasks+0xfd2>
						PORTA = 0xAA;
    8c74:	8a ea       	ldi	r24, 0xAA	; 170
    8c76:	82 b9       	out	0x02, r24	; 2
					} else {
						PORTA = 0x55;
					}					
					irCommTxPulseState = 1;
    8c78:	81 e0       	ldi	r24, 0x01	; 1
    8c7a:	80 93 0e 05 	sts	0x050E, r24
				}
				irCommTxDurationCycle = 0;
    8c7e:	10 92 13 05 	sts	0x0513, r1
				irCommTxSwitchCounter = 0;						
    8c82:	10 92 12 05 	sts	0x0512, r1
				irCommState = IRCOMM_TX_TRANSMIT_BIT;
    8c86:	83 e0       	ldi	r24, 0x03	; 3
    8c88:	80 93 c7 04 	sts	0x04C7, r24
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ1;
    8c8c:	80 93 05 05 	sts	0x0505, r24
    8c90:	b3 cd       	rjmp	.-1178   	; 0x87f8 <irCommTasks+0x36>
void irCommTasks() {
	int i = 0;

	if(irCommMode==IRCOMM_MODE_RECEIVE) {

		switch(irCommState) {
    8c92:	17 30       	cpi	r17, 0x07	; 7
    8c94:	09 f4       	brne	.+2      	; 0x8c98 <irCommTasks+0x4d6>
    8c96:	a6 c3       	rjmp	.+1868   	; 0x93e4 <irCommTasks+0xc22>
    8c98:	18 30       	cpi	r17, 0x08	; 8
    8c9a:	09 f4       	brne	.+2      	; 0x8c9e <irCommTasks+0x4dc>
    8c9c:	03 c2       	rjmp	.+1030   	; 0x90a4 <irCommTasks+0x8e2>
    8c9e:	16 30       	cpi	r17, 0x06	; 6
    8ca0:	09 f0       	breq	.+2      	; 0x8ca4 <irCommTasks+0x4e2>
    8ca2:	aa cd       	rjmp	.-1196   	; 0x87f8 <irCommTasks+0x36>
			case IRCOMM_RX_WAITING_BIT:
				break;

			case IRCOMM_RX_READ_BIT:
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
    8ca4:	10 92 ea 04 	sts	0x04EA, r1
    8ca8:	10 92 eb 04 	sts	0x04EB, r1
    8cac:	10 92 ec 04 	sts	0x04EC, r1
    8cb0:	10 92 ed 04 	sts	0x04ED, r1
				irCommTempMin = 1024;
    8cb4:	80 e0       	ldi	r24, 0x00	; 0
    8cb6:	94 e0       	ldi	r25, 0x04	; 4
    8cb8:	90 93 f1 04 	sts	0x04F1, r25
    8cbc:	80 93 f0 04 	sts	0x04F0, r24
				irCommTempMax = 0;
    8cc0:	10 92 ef 04 	sts	0x04EF, r1
    8cc4:	10 92 ee 04 	sts	0x04EE, r1
	irCommRxBitReceivedIndexTemp = 0;
	
	
}

void irCommTasks() {
    8cc8:	80 91 5d 0b 	lds	r24, 0x0B5D
    8ccc:	90 91 5e 0b 	lds	r25, 0x0B5E
    8cd0:	88 0f       	add	r24, r24
    8cd2:	99 1f       	adc	r25, r25
    8cd4:	e0 91 2e 08 	lds	r30, 0x082E
    8cd8:	f0 91 2f 08 	lds	r31, 0x082F
    8cdc:	e8 0f       	add	r30, r24
    8cde:	f9 1f       	adc	r31, r25

			case IRCOMM_RX_READ_BIT:
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
				irCommTempMin = 1024;
				irCommTempMax = 0;
    8ce0:	0c e1       	ldi	r16, 0x1C	; 28
    8ce2:	1b e0       	ldi	r17, 0x0B	; 11
	irCommRxBitReceivedIndexTemp = 0;
	
	
}

void irCommTasks() {
    8ce4:	58 01       	movw	r10, r16
    8ce6:	60 e0       	ldi	r22, 0x00	; 0
    8ce8:	70 e0       	ldi	r23, 0x00	; 0
    8cea:	40 e0       	ldi	r20, 0x00	; 0
    8cec:	54 e0       	ldi	r21, 0x04	; 4
    8cee:	cc 24       	eor	r12, r12
    8cf0:	dd 24       	eor	r13, r13
    8cf2:	76 01       	movw	r14, r12
    8cf4:	08 c0       	rjmp	.+16     	; 0x8d06 <irCommTasks+0x544>
			case IRCOMM_RX_READ_BIT:
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
				irCommTempMin = 1024;
				irCommTempMax = 0;
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    8cf6:	40 91 f0 04 	lds	r20, 0x04F0
    8cfa:	50 91 f1 04 	lds	r21, 0x04F1
    8cfe:	60 91 ee 04 	lds	r22, 0x04EE
    8d02:	70 91 ef 04 	lds	r23, 0x04EF
					irCommMaxSensorSignal[i] = irCommProxValuesCurr[irCommRxMaxSensor+i*8];
    8d06:	20 81       	ld	r18, Z
    8d08:	31 81       	ldd	r19, Z+1	; 0x01
    8d0a:	d5 01       	movw	r26, r10
    8d0c:	2d 93       	st	X+, r18
    8d0e:	3d 93       	st	X+, r19
    8d10:	5d 01       	movw	r10, r26
					irCommProxSum += irCommMaxSensorSignal[i];
    8d12:	c9 01       	movw	r24, r18
    8d14:	aa 27       	eor	r26, r26
    8d16:	97 fd       	sbrc	r25, 7
    8d18:	a0 95       	com	r26
    8d1a:	ba 2f       	mov	r27, r26
    8d1c:	c8 0e       	add	r12, r24
    8d1e:	d9 1e       	adc	r13, r25
    8d20:	ea 1e       	adc	r14, r26
    8d22:	fb 1e       	adc	r15, r27
					if(irCommTempMin > irCommMaxSensorSignal[i]) {
    8d24:	24 17       	cp	r18, r20
    8d26:	35 07       	cpc	r19, r21
    8d28:	2c f4       	brge	.+10     	; 0x8d34 <irCommTasks+0x572>
						irCommTempMin = irCommMaxSensorSignal[i];
    8d2a:	30 93 f1 04 	sts	0x04F1, r19
    8d2e:	20 93 f0 04 	sts	0x04F0, r18
    8d32:	a9 01       	movw	r20, r18
					}
					if(irCommTempMax < irCommMaxSensorSignal[i]) {
    8d34:	62 17       	cp	r22, r18
    8d36:	73 07       	cpc	r23, r19
    8d38:	2c f4       	brge	.+10     	; 0x8d44 <irCommTasks+0x582>
						irCommTempMax = irCommMaxSensorSignal[i];
    8d3a:	30 93 ef 04 	sts	0x04EF, r19
    8d3e:	20 93 ee 04 	sts	0x04EE, r18
    8d42:	b9 01       	movw	r22, r18
    8d44:	70 96       	adiw	r30, 0x10	; 16
			case IRCOMM_RX_READ_BIT:
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
				irCommTempMin = 1024;
				irCommTempMax = 0;
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    8d46:	b4 e4       	ldi	r27, 0x44	; 68
    8d48:	ab 16       	cp	r10, r27
    8d4a:	bb e0       	ldi	r27, 0x0B	; 11
    8d4c:	bb 06       	cpc	r11, r27
    8d4e:	99 f6       	brne	.-90     	; 0x8cf6 <irCommTasks+0x534>
    8d50:	c0 92 ea 04 	sts	0x04EA, r12
    8d54:	d0 92 eb 04 	sts	0x04EB, r13
    8d58:	e0 92 ec 04 	sts	0x04EC, r14
    8d5c:	f0 92 ed 04 	sts	0x04ED, r15
					if(irCommTempMax < irCommMaxSensorSignal[i]) {
						irCommTempMax = irCommMaxSensorSignal[i];
					}
				}

				if((irCommTempMax-irCommTempMin) < IRCOMM_DETECTION_AMPLITUDE_THR) {	// error...no significant signal perceived					
    8d60:	64 1b       	sub	r22, r20
    8d62:	75 0b       	sbc	r23, r21
    8d64:	68 32       	cpi	r22, 0x28	; 40
    8d66:	71 05       	cpc	r23, r1
    8d68:	0c f4       	brge	.+2      	; 0x8d6c <irCommTasks+0x5aa>
    8d6a:	23 c5       	rjmp	.+2630   	; 0x97b2 <irCommTasks+0xff0>

					resetDebugVariables();
					break;
				}

				irCommProxMean = (int)(irCommProxSum / IRCOMM_SAMPLING_WINDOW);
    8d6c:	c7 01       	movw	r24, r14
    8d6e:	b6 01       	movw	r22, r12
    8d70:	24 e1       	ldi	r18, 0x14	; 20
    8d72:	30 e0       	ldi	r19, 0x00	; 0
    8d74:	40 e0       	ldi	r20, 0x00	; 0
    8d76:	50 e0       	ldi	r21, 0x00	; 0
    8d78:	0e 94 b9 51 	call	0xa372	; 0xa372 <__divmodsi4>
    8d7c:	b9 01       	movw	r22, r18
    8d7e:	30 93 f5 04 	sts	0x04F5, r19
    8d82:	20 93 f4 04 	sts	0x04F4, r18
    8d86:	20 91 e5 04 	lds	r18, 0x04E5
				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
					irCommMaxSensorSignal[i] -= irCommProxMean;

					if(irCommBitsSignalIndexTemp>199) {
						irCommBitsSignalIndexTemp = 199;
    8d8a:	47 ec       	ldi	r20, 0xC7	; 199
    8d8c:	c4 2e       	mov	r12, r20
    8d8e:	16 c0       	rjmp	.+44     	; 0x8dbc <irCommTasks+0x5fa>
						updateRedLed(0);
					}
					irCommBitsSignalTemp[irCommBitsSignalIndexTemp] = irCommMaxSensorSignal[i];
    8d90:	e2 2f       	mov	r30, r18
    8d92:	f0 e0       	ldi	r31, 0x00	; 0
    8d94:	ee 0f       	add	r30, r30
    8d96:	ff 1f       	adc	r31, r31
    8d98:	e6 58       	subi	r30, 0x86	; 134
    8d9a:	f6 4f       	sbci	r31, 0xF6	; 246
    8d9c:	91 83       	std	Z+1, r25	; 0x01
    8d9e:	80 83       	st	Z, r24
					irCommBitsSignalIndexTemp++;
    8da0:	2f 5f       	subi	r18, 0xFF	; 255
    8da2:	20 93 e5 04 	sts	0x04E5, r18
    8da6:	0e 5f       	subi	r16, 0xFE	; 254
    8da8:	1f 4f       	sbci	r17, 0xFF	; 255
				}

				irCommProxMean = (int)(irCommProxSum / IRCOMM_SAMPLING_WINDOW);

				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    8daa:	bb e0       	ldi	r27, 0x0B	; 11
    8dac:	04 34       	cpi	r16, 0x44	; 68
    8dae:	1b 07       	cpc	r17, r27
    8db0:	09 f4       	brne	.+2      	; 0x8db4 <irCommTasks+0x5f2>
    8db2:	7a c4       	rjmp	.+2292   	; 0x96a8 <irCommTasks+0xee6>
    8db4:	60 91 f4 04 	lds	r22, 0x04F4
    8db8:	70 91 f5 04 	lds	r23, 0x04F5
					irCommMaxSensorSignal[i] -= irCommProxMean;
    8dbc:	f8 01       	movw	r30, r16
    8dbe:	80 81       	ld	r24, Z
    8dc0:	91 81       	ldd	r25, Z+1	; 0x01
    8dc2:	86 1b       	sub	r24, r22
    8dc4:	97 0b       	sbc	r25, r23
    8dc6:	91 83       	std	Z+1, r25	; 0x01
    8dc8:	80 83       	st	Z, r24

					if(irCommBitsSignalIndexTemp>199) {
    8dca:	28 3c       	cpi	r18, 0xC8	; 200
    8dcc:	08 f3       	brcs	.-62     	; 0x8d90 <irCommTasks+0x5ce>
						irCommBitsSignalIndexTemp = 199;
    8dce:	c0 92 e5 04 	sts	0x04E5, r12
						updateRedLed(0);
    8dd2:	80 e0       	ldi	r24, 0x00	; 0
    8dd4:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <updateRedLed>
    8dd8:	20 91 e5 04 	lds	r18, 0x04E5
    8ddc:	d8 01       	movw	r26, r16
    8dde:	8d 91       	ld	r24, X+
    8de0:	9c 91       	ld	r25, X
    8de2:	11 97       	sbiw	r26, 0x01	; 1
    8de4:	d5 cf       	rjmp	.-86     	; 0x8d90 <irCommTasks+0x5ce>
												
				break;

			case IRCOMM_RX_DETECT_START_BIT_STATE:
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
    8de6:	10 92 ea 04 	sts	0x04EA, r1
    8dea:	10 92 eb 04 	sts	0x04EB, r1
    8dee:	10 92 ec 04 	sts	0x04EC, r1
    8df2:	10 92 ed 04 	sts	0x04ED, r1
				irCommTempMin = 1024;
    8df6:	80 e0       	ldi	r24, 0x00	; 0
    8df8:	94 e0       	ldi	r25, 0x04	; 4
    8dfa:	90 93 f1 04 	sts	0x04F1, r25
    8dfe:	80 93 f0 04 	sts	0x04F0, r24
				irCommTempMax = 0;
    8e02:	10 92 ef 04 	sts	0x04EF, r1
    8e06:	10 92 ee 04 	sts	0x04EE, r1
				irCommShiftCount = 0;
    8e0a:	10 92 f2 04 	sts	0x04F2, r1
				irCommComputeShift = 1;												
    8e0e:	00 93 f3 04 	sts	0x04F3, r16
    8e12:	bc e1       	ldi	r27, 0x1C	; 28
    8e14:	4b 2e       	mov	r4, r27
    8e16:	bb e0       	ldi	r27, 0x0B	; 11
    8e18:	5b 2e       	mov	r5, r27
    8e1a:	92 01       	movw	r18, r4
    8e1c:	00 e0       	ldi	r16, 0x00	; 0
    8e1e:	10 e0       	ldi	r17, 0x00	; 0
    8e20:	aa 24       	eor	r10, r10
    8e22:	a3 94       	inc	r10
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
					irCommMaxSensorSignal[i] = irCommProxValuesCurr[irCommRxMaxSensor+i*8];

					if(irCommMaxSensorSignalIndexTemp>39) {
						irCommMaxSensorSignalIndexTemp = 39;
    8e24:	a7 e2       	ldi	r26, 0x27	; 39
    8e26:	ba 2e       	mov	r11, r26
							} else if(irCommMaxSensorSignal[i] == irCommTempMin) {
								irCommRxPeakHighToLow = 1;
							} else {
								//updateGreenLed(0);
							}
							irCommTempMin = 1024;
    8e28:	81 2c       	mov	r8, r1
    8e2a:	f4 e0       	ldi	r31, 0x04	; 4
    8e2c:	9f 2e       	mov	r9, r31
							irCommTempMax = 0;
							irCommComputeShift = 2;
    8e2e:	e2 e0       	ldi	r30, 0x02	; 2
    8e30:	7e 2e       	mov	r7, r30
							

							if(irCommMaxSensorSignal[i] == irCommTempMax) {
								irCommRxPeakHighToLow = 0;
							} else if(irCommMaxSensorSignal[i] == irCommTempMin) {
								irCommRxPeakHighToLow = 1;
    8e32:	66 24       	eor	r6, r6
    8e34:	63 94       	inc	r6
    8e36:	34 c0       	rjmp	.+104    	; 0x8ea0 <irCommTasks+0x6de>

					if(irCommMaxSensorSignalIndexTemp>39) {
						irCommMaxSensorSignalIndexTemp = 39;
						updateRedLed(0);
					}
					irCommMaxSensorSignalTemp[irCommMaxSensorSignalIndexTemp] = irCommMaxSensorSignal[i];
    8e38:	e8 2f       	mov	r30, r24
    8e3a:	f0 e0       	ldi	r31, 0x00	; 0
    8e3c:	ee 0f       	add	r30, r30
    8e3e:	ff 1f       	adc	r31, r31
    8e40:	e2 5b       	subi	r30, 0xB2	; 178
    8e42:	f7 4f       	sbci	r31, 0xF7	; 247
    8e44:	51 83       	std	Z+1, r21	; 0x01
    8e46:	40 83       	st	Z, r20
					irCommMaxSensorSignalIndexTemp++;					
    8e48:	8f 5f       	subi	r24, 0xFF	; 255
    8e4a:	80 93 d4 04 	sts	0x04D4, r24

					irCommProxSum += irCommMaxSensorSignal[i];
    8e4e:	6a 01       	movw	r12, r20
    8e50:	ee 24       	eor	r14, r14
    8e52:	d7 fc       	sbrc	r13, 7
    8e54:	e0 94       	com	r14
    8e56:	fe 2c       	mov	r15, r14
    8e58:	80 91 ea 04 	lds	r24, 0x04EA
    8e5c:	90 91 eb 04 	lds	r25, 0x04EB
    8e60:	a0 91 ec 04 	lds	r26, 0x04EC
    8e64:	b0 91 ed 04 	lds	r27, 0x04ED
    8e68:	8c 0d       	add	r24, r12
    8e6a:	9d 1d       	adc	r25, r13
    8e6c:	ae 1d       	adc	r26, r14
    8e6e:	bf 1d       	adc	r27, r15
    8e70:	80 93 ea 04 	sts	0x04EA, r24
    8e74:	90 93 eb 04 	sts	0x04EB, r25
    8e78:	a0 93 ec 04 	sts	0x04EC, r26
    8e7c:	b0 93 ed 04 	sts	0x04ED, r27
					if(irCommComputeShift == 1) {	// compute the shift between the rx sampling and tx signal
    8e80:	ba 2d       	mov	r27, r10
    8e82:	b1 30       	cpi	r27, 0x01	; 1
    8e84:	09 f4       	brne	.+2      	; 0x8e88 <irCommTasks+0x6c6>
    8e86:	40 c0       	rjmp	.+128    	; 0x8f08 <irCommTasks+0x746>
							irCommTempMax = 0;
							irCommComputeShift = 2;
							irCommShiftCount--;	// the current sample is already part of the signal start thus do not skip it
							irCommRxStartPeakDuration = 0;
						}
					 } else if(irCommComputeShift == 2) {		
    8e88:	fa 2d       	mov	r31, r10
    8e8a:	f2 30       	cpi	r31, 0x02	; 2
    8e8c:	09 f4       	brne	.+2      	; 0x8e90 <irCommTasks+0x6ce>
    8e8e:	ac c0       	rjmp	.+344    	; 0x8fe8 <irCommTasks+0x826>
						}	
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
							if((irCommMaxSensorSignal[i]==irCommTempMax) && (irCommRxPeakHighToLow==1)) {
								irCommComputeShift = 0;
							} else if((irCommMaxSensorSignal[i]==irCommTempMin) && (irCommRxPeakHighToLow==0)) {
								irCommComputeShift = 0;
    8e90:	08 5f       	subi	r16, 0xF8	; 248
    8e92:	1f 4f       	sbci	r17, 0xFF	; 255
    8e94:	2e 5f       	subi	r18, 0xFE	; 254
    8e96:	3f 4f       	sbci	r19, 0xFF	; 255
				irCommProxSum = 0;
				irCommTempMin = 1024;
				irCommTempMax = 0;
				irCommShiftCount = 0;
				irCommComputeShift = 1;												
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    8e98:	00 3a       	cpi	r16, 0xA0	; 160
    8e9a:	11 05       	cpc	r17, r1
    8e9c:	09 f4       	brne	.+2      	; 0x8ea0 <irCommTasks+0x6de>
    8e9e:	d4 c2       	rjmp	.+1448   	; 0x9448 <irCommTasks+0xc86>
					irCommMaxSensorSignal[i] = irCommProxValuesCurr[irCommRxMaxSensor+i*8];
    8ea0:	80 91 5d 0b 	lds	r24, 0x0B5D
    8ea4:	90 91 5e 0b 	lds	r25, 0x0B5E
    8ea8:	80 0f       	add	r24, r16
    8eaa:	91 1f       	adc	r25, r17
    8eac:	88 0f       	add	r24, r24
    8eae:	99 1f       	adc	r25, r25
    8eb0:	e0 91 2e 08 	lds	r30, 0x082E
    8eb4:	f0 91 2f 08 	lds	r31, 0x082F
    8eb8:	e8 0f       	add	r30, r24
    8eba:	f9 1f       	adc	r31, r25
    8ebc:	40 81       	ld	r20, Z
    8ebe:	51 81       	ldd	r21, Z+1	; 0x01
    8ec0:	f9 01       	movw	r30, r18
    8ec2:	51 83       	std	Z+1, r21	; 0x01
    8ec4:	40 83       	st	Z, r20

					if(irCommMaxSensorSignalIndexTemp>39) {
    8ec6:	80 91 d4 04 	lds	r24, 0x04D4
    8eca:	88 32       	cpi	r24, 0x28	; 40
    8ecc:	08 f4       	brcc	.+2      	; 0x8ed0 <irCommTasks+0x70e>
    8ece:	b4 cf       	rjmp	.-152    	; 0x8e38 <irCommTasks+0x676>
						irCommMaxSensorSignalIndexTemp = 39;
    8ed0:	b0 92 d4 04 	sts	0x04D4, r11
						updateRedLed(0);
    8ed4:	80 e0       	ldi	r24, 0x00	; 0
    8ed6:	29 83       	std	Y+1, r18	; 0x01
    8ed8:	3a 83       	std	Y+2, r19	; 0x02
    8eda:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <updateRedLed>
    8ede:	80 91 d4 04 	lds	r24, 0x04D4
    8ee2:	29 81       	ldd	r18, Y+1	; 0x01
    8ee4:	3a 81       	ldd	r19, Y+2	; 0x02
    8ee6:	d9 01       	movw	r26, r18
    8ee8:	4d 91       	ld	r20, X+
    8eea:	5c 91       	ld	r21, X
    8eec:	11 97       	sbiw	r26, 0x01	; 1
    8eee:	a0 90 f3 04 	lds	r10, 0x04F3
    8ef2:	a2 cf       	rjmp	.-188    	; 0x8e38 <irCommTasks+0x676>
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 2) {
					updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START1_DURATION;					
					irCommTxSwitchCount = IRCOMM_BIT_START1_SWITCH_COUNT;
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 1) {
					irCommTxDuration = IRCOMM_BIT1_DURATOIN;					
    8ef4:	8c e3       	ldi	r24, 0x3C	; 60
    8ef6:	90 e0       	ldi	r25, 0x00	; 0
    8ef8:	90 93 10 05 	sts	0x0510, r25
    8efc:	80 93 0f 05 	sts	0x050F, r24
					irCommTxSwitchCount = IRCOMM_BIT1_SWITCH_COUNT;
    8f00:	84 e0       	ldi	r24, 0x04	; 4
    8f02:	80 93 11 05 	sts	0x0511, r24
    8f06:	af ce       	rjmp	.-674    	; 0x8c66 <irCommTasks+0x4a4>
					irCommMaxSensorSignalTemp[irCommMaxSensorSignalIndexTemp] = irCommMaxSensorSignal[i];
					irCommMaxSensorSignalIndexTemp++;					

					irCommProxSum += irCommMaxSensorSignal[i];
					if(irCommComputeShift == 1) {	// compute the shift between the rx sampling and tx signal
						irCommShiftCount++;								
    8f08:	a0 91 f2 04 	lds	r26, 0x04F2
    8f0c:	af 5f       	subi	r26, 0xFF	; 255
    8f0e:	a0 93 f2 04 	sts	0x04F2, r26
						if(irCommTempMin > irCommMaxSensorSignal[i]) {
    8f12:	80 91 f0 04 	lds	r24, 0x04F0
    8f16:	90 91 f1 04 	lds	r25, 0x04F1
    8f1a:	48 17       	cp	r20, r24
    8f1c:	59 07       	cpc	r21, r25
    8f1e:	2c f4       	brge	.+10     	; 0x8f2a <irCommTasks+0x768>
							irCommTempMin = irCommMaxSensorSignal[i];
    8f20:	50 93 f1 04 	sts	0x04F1, r21
    8f24:	40 93 f0 04 	sts	0x04F0, r20
    8f28:	ca 01       	movw	r24, r20
						}
						if(irCommTempMax < irCommMaxSensorSignal[i]) {
    8f2a:	60 91 ee 04 	lds	r22, 0x04EE
    8f2e:	70 91 ef 04 	lds	r23, 0x04EF
    8f32:	64 17       	cp	r22, r20
    8f34:	75 07       	cpc	r23, r21
    8f36:	2c f4       	brge	.+10     	; 0x8f42 <irCommTasks+0x780>
							irCommTempMax = irCommMaxSensorSignal[i];
    8f38:	50 93 ef 04 	sts	0x04EF, r21
    8f3c:	40 93 ee 04 	sts	0x04EE, r20
    8f40:	ba 01       	movw	r22, r20
						}
						irCommTempValue = (irCommTempMax - irCommTempMin);						
    8f42:	fb 01       	movw	r30, r22
    8f44:	e8 1b       	sub	r30, r24
    8f46:	f9 0b       	sbc	r31, r25
    8f48:	cf 01       	movw	r24, r30
    8f4a:	ce 2e       	mov	r12, r30
    8f4c:	b9 2f       	mov	r27, r25
    8f4e:	e0 93 c8 04 	sts	0x04C8, r30
    8f52:	90 93 c9 04 	sts	0x04C9, r25
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    8f56:	e8 32       	cpi	r30, 0x28	; 40
    8f58:	f1 05       	cpc	r31, r1
    8f5a:	0c f4       	brge	.+2      	; 0x8f5e <irCommTasks+0x79c>
    8f5c:	99 cf       	rjmp	.-206    	; 0x8e90 <irCommTasks+0x6ce>

							if(irCommStartDiffIndexTemp>1) {
    8f5e:	80 91 de 04 	lds	r24, 0x04DE
    8f62:	82 30       	cpi	r24, 0x02	; 2
    8f64:	c0 f0       	brcs	.+48     	; 0x8f96 <irCommTasks+0x7d4>
								irCommStartDiffIndexTemp = 1;
    8f66:	60 92 de 04 	sts	0x04DE, r6
								updateRedLed(0);
    8f6a:	80 e0       	ldi	r24, 0x00	; 0
    8f6c:	29 83       	std	Y+1, r18	; 0x01
    8f6e:	3a 83       	std	Y+2, r19	; 0x02
    8f70:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <updateRedLed>
    8f74:	80 91 de 04 	lds	r24, 0x04DE
    8f78:	c0 90 c8 04 	lds	r12, 0x04C8
    8f7c:	b0 91 c9 04 	lds	r27, 0x04C9
    8f80:	29 81       	ldd	r18, Y+1	; 0x01
    8f82:	3a 81       	ldd	r19, Y+2	; 0x02
    8f84:	f9 01       	movw	r30, r18
    8f86:	40 81       	ld	r20, Z
    8f88:	51 81       	ldd	r21, Z+1	; 0x01
    8f8a:	60 91 ee 04 	lds	r22, 0x04EE
    8f8e:	70 91 ef 04 	lds	r23, 0x04EF
    8f92:	a0 91 f2 04 	lds	r26, 0x04F2
							}
							irCommStartDiffTemp[irCommStartDiffIndexTemp] = irCommTempValue;
    8f96:	e8 2f       	mov	r30, r24
    8f98:	f0 e0       	ldi	r31, 0x00	; 0
    8f9a:	ee 0f       	add	r30, r30
    8f9c:	ff 1f       	adc	r31, r31
    8f9e:	e1 56       	subi	r30, 0x61	; 97
    8fa0:	f7 4f       	sbci	r31, 0xF7	; 247
    8fa2:	c0 82       	st	Z, r12
    8fa4:	b1 83       	std	Z+1, r27	; 0x01
							irCommStartDiffIndexTemp++;
    8fa6:	8f 5f       	subi	r24, 0xFF	; 255
    8fa8:	80 93 de 04 	sts	0x04DE, r24
							

							if(irCommMaxSensorSignal[i] == irCommTempMax) {
    8fac:	46 17       	cp	r20, r22
    8fae:	57 07       	cpc	r21, r23
    8fb0:	09 f4       	brne	.+2      	; 0x8fb4 <irCommTasks+0x7f2>
    8fb2:	df c3       	rjmp	.+1982   	; 0x9772 <irCommTasks+0xfb0>
								irCommRxPeakHighToLow = 0;
							} else if(irCommMaxSensorSignal[i] == irCommTempMin) {
    8fb4:	80 91 f0 04 	lds	r24, 0x04F0
    8fb8:	90 91 f1 04 	lds	r25, 0x04F1
    8fbc:	84 17       	cp	r24, r20
    8fbe:	95 07       	cpc	r25, r21
    8fc0:	09 f4       	brne	.+2      	; 0x8fc4 <irCommTasks+0x802>
    8fc2:	eb c3       	rjmp	.+2006   	; 0x979a <irCommTasks+0xfd8>
								irCommRxPeakHighToLow = 1;
							} else {
								//updateGreenLed(0);
							}
							irCommTempMin = 1024;
    8fc4:	90 92 f1 04 	sts	0x04F1, r9
    8fc8:	80 92 f0 04 	sts	0x04F0, r8
							irCommTempMax = 0;
    8fcc:	10 92 ef 04 	sts	0x04EF, r1
    8fd0:	10 92 ee 04 	sts	0x04EE, r1
							irCommComputeShift = 2;
    8fd4:	70 92 f3 04 	sts	0x04F3, r7
							irCommShiftCount--;	// the current sample is already part of the signal start thus do not skip it
    8fd8:	a1 50       	subi	r26, 0x01	; 1
    8fda:	a0 93 f2 04 	sts	0x04F2, r26
							irCommRxStartPeakDuration = 0;
    8fde:	10 92 04 05 	sts	0x0504, r1
    8fe2:	b2 e0       	ldi	r27, 0x02	; 2
    8fe4:	ab 2e       	mov	r10, r27
    8fe6:	54 cf       	rjmp	.-344    	; 0x8e90 <irCommTasks+0x6ce>
						}
					 } else if(irCommComputeShift == 2) {		
					 	irCommRxStartPeakDuration++;					
    8fe8:	80 91 04 05 	lds	r24, 0x0504
    8fec:	8f 5f       	subi	r24, 0xFF	; 255
    8fee:	80 93 04 05 	sts	0x0504, r24
						if(irCommTempMin > irCommMaxSensorSignal[i]) {
    8ff2:	60 91 f0 04 	lds	r22, 0x04F0
    8ff6:	70 91 f1 04 	lds	r23, 0x04F1
    8ffa:	46 17       	cp	r20, r22
    8ffc:	57 07       	cpc	r21, r23
    8ffe:	2c f4       	brge	.+10     	; 0x900a <irCommTasks+0x848>
							irCommTempMin = irCommMaxSensorSignal[i];
    9000:	50 93 f1 04 	sts	0x04F1, r21
    9004:	40 93 f0 04 	sts	0x04F0, r20
    9008:	ba 01       	movw	r22, r20
						}
						if(irCommTempMax < irCommMaxSensorSignal[i]) {
    900a:	80 91 ee 04 	lds	r24, 0x04EE
    900e:	90 91 ef 04 	lds	r25, 0x04EF
    9012:	84 17       	cp	r24, r20
    9014:	95 07       	cpc	r25, r21
    9016:	2c f4       	brge	.+10     	; 0x9022 <irCommTasks+0x860>
							irCommTempMax = irCommMaxSensorSignal[i];
    9018:	50 93 ef 04 	sts	0x04EF, r21
    901c:	40 93 ee 04 	sts	0x04EE, r20
    9020:	ca 01       	movw	r24, r20
						}	
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    9022:	fc 01       	movw	r30, r24
    9024:	e6 1b       	sub	r30, r22
    9026:	f7 0b       	sbc	r31, r23
    9028:	e8 32       	cpi	r30, 0x28	; 40
    902a:	f1 05       	cpc	r31, r1
    902c:	0c f4       	brge	.+2      	; 0x9030 <irCommTasks+0x86e>
    902e:	30 cf       	rjmp	.-416    	; 0x8e90 <irCommTasks+0x6ce>
							if((irCommMaxSensorSignal[i]==irCommTempMax) && (irCommRxPeakHighToLow==1)) {
    9030:	48 17       	cp	r20, r24
    9032:	59 07       	cpc	r21, r25
    9034:	09 f4       	brne	.+2      	; 0x9038 <irCommTasks+0x876>
    9036:	b4 c3       	rjmp	.+1896   	; 0x97a0 <irCommTasks+0xfde>
								irCommComputeShift = 0;
							} else if((irCommMaxSensorSignal[i]==irCommTempMin) && (irCommRxPeakHighToLow==0)) {
    9038:	46 17       	cp	r20, r22
    903a:	57 07       	cpc	r21, r23
    903c:	09 f0       	breq	.+2      	; 0x9040 <irCommTasks+0x87e>
    903e:	28 cf       	rjmp	.-432    	; 0x8e90 <irCommTasks+0x6ce>
    9040:	80 91 03 05 	lds	r24, 0x0503
    9044:	88 23       	and	r24, r24
    9046:	09 f0       	breq	.+2      	; 0x904a <irCommTasks+0x888>
    9048:	23 cf       	rjmp	.-442    	; 0x8e90 <irCommTasks+0x6ce>
								irCommComputeShift = 0;
    904a:	10 92 f3 04 	sts	0x04F3, r1
    904e:	aa 24       	eor	r10, r10
    9050:	1f cf       	rjmp	.-450    	; 0x8e90 <irCommTasks+0x6ce>

	if(irCommMode==IRCOMM_MODE_RECEIVE) {

		switch(irCommState) {
			case IRCOMM_RX_IDLE_STATE:				
				if((irCommRxStartBitDetected==0) && (irCommEnabled!=irCommEnabledNext)) {
    9052:	80 91 02 05 	lds	r24, 0x0502
    9056:	88 23       	and	r24, r24
    9058:	09 f0       	breq	.+2      	; 0x905c <irCommTasks+0x89a>
    905a:	ce cb       	rjmp	.-2148   	; 0x87f8 <irCommTasks+0x36>
    905c:	90 91 c4 04 	lds	r25, 0x04C4
    9060:	80 91 c5 04 	lds	r24, 0x04C5
    9064:	98 17       	cp	r25, r24
    9066:	09 f4       	brne	.+2      	; 0x906a <irCommTasks+0x8a8>
    9068:	c7 cb       	rjmp	.-2162   	; 0x87f8 <irCommTasks+0x36>
					if((getTime100MicroSec() - irCommTxLastTransmissionTime) > PAUSE_100_MSEC) {
    906a:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <getTime100MicroSec>
    906e:	20 91 08 05 	lds	r18, 0x0508
    9072:	30 91 09 05 	lds	r19, 0x0509
    9076:	40 91 0a 05 	lds	r20, 0x050A
    907a:	50 91 0b 05 	lds	r21, 0x050B
    907e:	62 1b       	sub	r22, r18
    9080:	73 0b       	sbc	r23, r19
    9082:	84 0b       	sbc	r24, r20
    9084:	95 0b       	sbc	r25, r21
    9086:	62 3c       	cpi	r22, 0xC2	; 194
    9088:	23 e0       	ldi	r18, 0x03	; 3
    908a:	72 07       	cpc	r23, r18
    908c:	20 e0       	ldi	r18, 0x00	; 0
    908e:	82 07       	cpc	r24, r18
    9090:	20 e0       	ldi	r18, 0x00	; 0
    9092:	92 07       	cpc	r25, r18
    9094:	08 f4       	brcc	.+2      	; 0x9098 <irCommTasks+0x8d6>
    9096:	b0 cb       	rjmp	.-2208   	; 0x87f8 <irCommTasks+0x36>
#include "irCommunication.h"


void irCommInitTransmitter() {
	irCommEnabled = IRCOMM_MODE_TRANSMIT;
    9098:	82 e0       	ldi	r24, 0x02	; 2
    909a:	80 93 c4 04 	sts	0x04C4, r24
	irCommState = IRCOMM_TX_IDLE_STATE;
    909e:	10 93 c7 04 	sts	0x04C7, r17
    90a2:	aa cb       	rjmp	.-2220   	; 0x87f8 <irCommTasks+0x36>
				irCommState = IRCOMM_RX_IDLE_STATE;

				break;

			case IRCOMM_RX_DEBUG:								
				irCommSendValues = 0;						
    90a4:	10 92 ca 04 	sts	0x04CA, r1
				while(irCommSendValues==0);	// wait for the start from the uart (computer)
    90a8:	80 91 ca 04 	lds	r24, 0x04CA
    90ac:	88 23       	and	r24, r24
    90ae:	e1 f3       	breq	.-8      	; 0x90a8 <irCommTasks+0x8e6>
				usart0Transmit(0xFF, 1);
    90b0:	8f ef       	ldi	r24, 0xFF	; 255
    90b2:	61 e0       	ldi	r22, 0x01	; 1
    90b4:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
				usart0Transmit(irCommRxMaxSensorTemp[0],1);
    90b8:	80 91 0c 0b 	lds	r24, 0x0B0C
    90bc:	61 e0       	ldi	r22, 0x01	; 1
    90be:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
				usart0Transmit(irCommRxMaxSensorTemp[1],1);
    90c2:	80 91 0e 0b 	lds	r24, 0x0B0E
    90c6:	61 e0       	ldi	r22, 0x01	; 1
    90c8:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
				usart0Transmit(irCommRxMaxDiffTemp[0]&0xFF,1);
    90cc:	80 91 45 0b 	lds	r24, 0x0B45
    90d0:	61 e0       	ldi	r22, 0x01	; 1
    90d2:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
				usart0Transmit(irCommRxMaxDiffTemp[0]>>8,1);
    90d6:	80 91 46 0b 	lds	r24, 0x0B46
    90da:	61 e0       	ldi	r22, 0x01	; 1
    90dc:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
				usart0Transmit(irCommRxMaxDiffTemp[1]&0xFF,1);
    90e0:	80 91 47 0b 	lds	r24, 0x0B47
    90e4:	61 e0       	ldi	r22, 0x01	; 1
    90e6:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
				usart0Transmit(irCommRxMaxDiffTemp[1]>>8,1);
    90ea:	80 91 48 0b 	lds	r24, 0x0B48
    90ee:	61 e0       	ldi	r22, 0x01	; 1
    90f0:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
				usart0Transmit(irCommProxMeanTemp[0]&0xFF,1);
    90f4:	80 91 50 05 	lds	r24, 0x0550
    90f8:	61 e0       	ldi	r22, 0x01	; 1
    90fa:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
				usart0Transmit(irCommProxMeanTemp[0]>>8,1);
    90fe:	80 91 51 05 	lds	r24, 0x0551
    9102:	61 e0       	ldi	r22, 0x01	; 1
    9104:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
				usart0Transmit(irCommProxMeanTemp[1]&0xFF,1);
    9108:	80 91 52 05 	lds	r24, 0x0552
    910c:	61 e0       	ldi	r22, 0x01	; 1
    910e:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
				usart0Transmit(irCommProxMeanTemp[1]>>8,1);
    9112:	80 91 53 05 	lds	r24, 0x0553
    9116:	61 e0       	ldi	r22, 0x01	; 1
    9118:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
				usart0Transmit(irCommSwitchCountTemp[0],1);
    911c:	80 91 32 05 	lds	r24, 0x0532
    9120:	61 e0       	ldi	r22, 0x01	; 1
    9122:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
				usart0Transmit(irCommSwitchCountTemp[1],1);
    9126:	80 91 33 05 	lds	r24, 0x0533
    912a:	61 e0       	ldi	r22, 0x01	; 1
    912c:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
    9130:	be e4       	ldi	r27, 0x4E	; 78
    9132:	cb 2e       	mov	r12, r27
    9134:	b8 e0       	ldi	r27, 0x08	; 8
    9136:	db 2e       	mov	r13, r27
    9138:	08 e5       	ldi	r16, 0x58	; 88
    913a:	15 e0       	ldi	r17, 0x05	; 5
				for(i=0; i<IRCOMM_SAMPLING_WINDOW*2; i++) {
					irCommTempValue = irCommMaxSensorSignalTemp[i];
    913c:	d6 01       	movw	r26, r12
    913e:	8c 91       	ld	r24, X
    9140:	11 96       	adiw	r26, 0x01	; 1
    9142:	9c 91       	ld	r25, X
    9144:	e2 e0       	ldi	r30, 0x02	; 2
    9146:	f0 e0       	ldi	r31, 0x00	; 0
    9148:	ce 0e       	add	r12, r30
    914a:	df 1e       	adc	r13, r31
    914c:	80 93 c8 04 	sts	0x04C8, r24
    9150:	90 93 c9 04 	sts	0x04C9, r25
					usart0Transmit(irCommTempValue&0xFF,1);
    9154:	61 e0       	ldi	r22, 0x01	; 1
    9156:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
					usart0Transmit(irCommTempValue>>8,1);
    915a:	80 91 c9 04 	lds	r24, 0x04C9
    915e:	61 e0       	ldi	r22, 0x01	; 1
    9160:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
					irCommTempValue = irCommMaxSensorSignalFiltTemp[i];
    9164:	d8 01       	movw	r26, r16
    9166:	8c 91       	ld	r24, X
    9168:	11 96       	adiw	r26, 0x01	; 1
    916a:	9c 91       	ld	r25, X
    916c:	0e 5f       	subi	r16, 0xFE	; 254
    916e:	1f 4f       	sbci	r17, 0xFF	; 255
    9170:	80 93 c8 04 	sts	0x04C8, r24
    9174:	90 93 c9 04 	sts	0x04C9, r25
					usart0Transmit(irCommTempValue&0xFF,1);
    9178:	61 e0       	ldi	r22, 0x01	; 1
    917a:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
					usart0Transmit(irCommTempValue>>8,1);
    917e:	80 91 c9 04 	lds	r24, 0x04C9
    9182:	61 e0       	ldi	r22, 0x01	; 1
    9184:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
				usart0Transmit(irCommProxMeanTemp[0]>>8,1);
				usart0Transmit(irCommProxMeanTemp[1]&0xFF,1);
				usart0Transmit(irCommProxMeanTemp[1]>>8,1);
				usart0Transmit(irCommSwitchCountTemp[0],1);
				usart0Transmit(irCommSwitchCountTemp[1],1);
				for(i=0; i<IRCOMM_SAMPLING_WINDOW*2; i++) {
    9188:	be e9       	ldi	r27, 0x9E	; 158
    918a:	cb 16       	cp	r12, r27
    918c:	b8 e0       	ldi	r27, 0x08	; 8
    918e:	db 06       	cpc	r13, r27
    9190:	a9 f6       	brne	.-86     	; 0x913c <irCommTasks+0x97a>
					usart0Transmit(irCommTempValue>>8,1);
					irCommTempValue = irCommMaxSensorSignalFiltTemp[i];
					usart0Transmit(irCommTempValue&0xFF,1);
					usart0Transmit(irCommTempValue>>8,1);
				}
				usart0Transmit(irCommMaxSensorValueCurrTemp[0]&0xFF,1);
    9192:	80 91 19 05 	lds	r24, 0x0519
    9196:	61 e0       	ldi	r22, 0x01	; 1
    9198:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
				usart0Transmit(irCommMaxSensorValueCurrTemp[0]>>8,1);
    919c:	80 91 1a 05 	lds	r24, 0x051A
    91a0:	61 e0       	ldi	r22, 0x01	; 1
    91a2:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
				usart0Transmit(irCommMaxSensorValueCurrTemp[1]&0xFF,1);
    91a6:	80 91 1b 05 	lds	r24, 0x051B
    91aa:	61 e0       	ldi	r22, 0x01	; 1
    91ac:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
				usart0Transmit(irCommMaxSensorValueCurrTemp[1]>>8,1);
    91b0:	80 91 1c 05 	lds	r24, 0x051C
    91b4:	61 e0       	ldi	r22, 0x01	; 1
    91b6:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
				usart0Transmit(irCommMinSensorValueCurrTemp[0]&0xFF,1);
    91ba:	80 91 10 0b 	lds	r24, 0x0B10
    91be:	61 e0       	ldi	r22, 0x01	; 1
    91c0:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
				usart0Transmit(irCommMinSensorValueCurrTemp[0]>>8,1);
    91c4:	80 91 11 0b 	lds	r24, 0x0B11
    91c8:	61 e0       	ldi	r22, 0x01	; 1
    91ca:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
				usart0Transmit(irCommMinSensorValueCurrTemp[1]&0xFF,1);
    91ce:	80 91 12 0b 	lds	r24, 0x0B12
    91d2:	61 e0       	ldi	r22, 0x01	; 1
    91d4:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
				usart0Transmit(irCommMinSensorValueCurrTemp[1]>>8,1);
    91d8:	80 91 13 0b 	lds	r24, 0x0B13
    91dc:	61 e0       	ldi	r22, 0x01	; 1
    91de:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
				usart0Transmit(irCommShiftCountTemp[0],1);
    91e2:	80 91 60 0b 	lds	r24, 0x0B60
    91e6:	61 e0       	ldi	r22, 0x01	; 1
    91e8:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
				usart0Transmit(irCommShiftCountTemp[1],1);
    91ec:	80 91 61 0b 	lds	r24, 0x0B61
    91f0:	61 e0       	ldi	r22, 0x01	; 1
    91f2:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
				usart0Transmit(irCommShiftCountFinalTemp[0],1);
    91f6:	80 91 18 0b 	lds	r24, 0x0B18
    91fa:	61 e0       	ldi	r22, 0x01	; 1
    91fc:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
				usart0Transmit(irCommShiftCountFinalTemp[1],1);
    9200:	80 91 19 0b 	lds	r24, 0x0B19
    9204:	61 e0       	ldi	r22, 0x01	; 1
    9206:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
				usart0Transmit(irCommStartDiffTemp[0]&0xFF,1);
    920a:	80 91 9f 08 	lds	r24, 0x089F
    920e:	61 e0       	ldi	r22, 0x01	; 1
    9210:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
				usart0Transmit(irCommStartDiffTemp[0]>>8,1);
    9214:	80 91 a0 08 	lds	r24, 0x08A0
    9218:	61 e0       	ldi	r22, 0x01	; 1
    921a:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
				usart0Transmit(irCommStartDiffTemp[1]&0xFF,1);
    921e:	80 91 a1 08 	lds	r24, 0x08A1
    9222:	61 e0       	ldi	r22, 0x01	; 1
    9224:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
				usart0Transmit(irCommStartDiffTemp[1]>>8,1);
    9228:	80 91 a2 08 	lds	r24, 0x08A2
    922c:	61 e0       	ldi	r22, 0x01	; 1
    922e:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
				usart0Transmit(irCommComputeShiftTemp[0],1);
    9232:	80 91 4d 05 	lds	r24, 0x054D
    9236:	61 e0       	ldi	r22, 0x01	; 1
    9238:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
				usart0Transmit(irCommComputeShiftTemp[1],1);
    923c:	80 91 4e 05 	lds	r24, 0x054E
    9240:	61 e0       	ldi	r22, 0x01	; 1
    9242:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
				usart0Transmit(irCommRxPeakHighToLowTemp[0],1);
    9246:	80 91 aa 05 	lds	r24, 0x05AA
    924a:	61 e0       	ldi	r22, 0x01	; 1
    924c:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
				usart0Transmit(irCommRxPeakHighToLowTemp[1],1);
    9250:	80 91 ab 05 	lds	r24, 0x05AB
    9254:	61 e0       	ldi	r22, 0x01	; 1
    9256:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
				usart0Transmit(irCommRxStartPeakDurationTemp[0],1);
    925a:	80 91 ec 06 	lds	r24, 0x06EC
    925e:	61 e0       	ldi	r22, 0x01	; 1
    9260:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
				usart0Transmit(irCommRxStartPeakDurationTemp[1],1);
    9264:	80 91 ed 06 	lds	r24, 0x06ED
    9268:	61 e0       	ldi	r22, 0x01	; 1
    926a:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
				usart0Transmit(irCommRxStartBitDetectedTemp[0],1);
    926e:	80 91 56 05 	lds	r24, 0x0556
    9272:	61 e0       	ldi	r22, 0x01	; 1
    9274:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
				usart0Transmit(irCommRxStartBitDetectedTemp[1],1);
    9278:	80 91 57 05 	lds	r24, 0x0557
    927c:	61 e0       	ldi	r22, 0x01	; 1
    927e:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
				usart0Transmit(irCommSyncStateTemp[0],1);
    9282:	80 91 4b 05 	lds	r24, 0x054B
    9286:	61 e0       	ldi	r22, 0x01	; 1
    9288:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
				usart0Transmit(irCommSyncStateTemp[1],1);
    928c:	80 91 4c 05 	lds	r24, 0x054C
    9290:	61 e0       	ldi	r22, 0x01	; 1
    9292:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
				for(i=0; i<14; i++) {
					usart0Transmit(irCommStateTemp[i],1);
    9296:	80 91 1d 05 	lds	r24, 0x051D
    929a:	61 e0       	ldi	r22, 0x01	; 1
    929c:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
    92a0:	80 91 1e 05 	lds	r24, 0x051E
    92a4:	61 e0       	ldi	r22, 0x01	; 1
    92a6:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
    92aa:	80 91 1f 05 	lds	r24, 0x051F
    92ae:	61 e0       	ldi	r22, 0x01	; 1
    92b0:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
    92b4:	80 91 20 05 	lds	r24, 0x0520
    92b8:	61 e0       	ldi	r22, 0x01	; 1
    92ba:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
    92be:	80 91 21 05 	lds	r24, 0x0521
    92c2:	61 e0       	ldi	r22, 0x01	; 1
    92c4:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
    92c8:	80 91 22 05 	lds	r24, 0x0522
    92cc:	61 e0       	ldi	r22, 0x01	; 1
    92ce:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
    92d2:	80 91 23 05 	lds	r24, 0x0523
    92d6:	61 e0       	ldi	r22, 0x01	; 1
    92d8:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
    92dc:	80 91 24 05 	lds	r24, 0x0524
    92e0:	61 e0       	ldi	r22, 0x01	; 1
    92e2:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
    92e6:	80 91 25 05 	lds	r24, 0x0525
    92ea:	61 e0       	ldi	r22, 0x01	; 1
    92ec:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
    92f0:	80 91 26 05 	lds	r24, 0x0526
    92f4:	61 e0       	ldi	r22, 0x01	; 1
    92f6:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
    92fa:	80 91 27 05 	lds	r24, 0x0527
    92fe:	61 e0       	ldi	r22, 0x01	; 1
    9300:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
    9304:	80 91 28 05 	lds	r24, 0x0528
    9308:	61 e0       	ldi	r22, 0x01	; 1
    930a:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
    930e:	80 91 29 05 	lds	r24, 0x0529
    9312:	61 e0       	ldi	r22, 0x01	; 1
    9314:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
    9318:	80 91 2a 05 	lds	r24, 0x052A
    931c:	61 e0       	ldi	r22, 0x01	; 1
    931e:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
    9322:	0a e7       	ldi	r16, 0x7A	; 122
    9324:	19 e0       	ldi	r17, 0x09	; 9
				}
				for(i=0; i<200; i++) {
					irCommTempValue = irCommBitsSignalTemp[i];
    9326:	f8 01       	movw	r30, r16
    9328:	80 81       	ld	r24, Z
    932a:	91 81       	ldd	r25, Z+1	; 0x01
    932c:	0e 5f       	subi	r16, 0xFE	; 254
    932e:	1f 4f       	sbci	r17, 0xFF	; 255
    9330:	80 93 c8 04 	sts	0x04C8, r24
    9334:	90 93 c9 04 	sts	0x04C9, r25
					usart0Transmit(irCommTempValue&0xFF,1);
    9338:	61 e0       	ldi	r22, 0x01	; 1
    933a:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
					usart0Transmit(irCommTempValue>>8,1);
    933e:	80 91 c9 04 	lds	r24, 0x04C9
    9342:	61 e0       	ldi	r22, 0x01	; 1
    9344:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
				usart0Transmit(irCommSyncStateTemp[0],1);
				usart0Transmit(irCommSyncStateTemp[1],1);
				for(i=0; i<14; i++) {
					usart0Transmit(irCommStateTemp[i],1);
				}
				for(i=0; i<200; i++) {
    9348:	fb e0       	ldi	r31, 0x0B	; 11
    934a:	0a 30       	cpi	r16, 0x0A	; 10
    934c:	1f 07       	cpc	r17, r31
    934e:	59 f7       	brne	.-42     	; 0x9326 <irCommTasks+0xb64>
					irCommTempValue = irCommBitsSignalTemp[i];
					usart0Transmit(irCommTempValue&0xFF,1);
					usart0Transmit(irCommTempValue>>8,1);
				}
				for(i=0; i<10; i++) {
					usart0Transmit(irCommRxBitReceivedTemp[i],1);
    9350:	80 91 40 08 	lds	r24, 0x0840
    9354:	61 e0       	ldi	r22, 0x01	; 1
    9356:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
    935a:	80 91 41 08 	lds	r24, 0x0841
    935e:	61 e0       	ldi	r22, 0x01	; 1
    9360:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
    9364:	80 91 42 08 	lds	r24, 0x0842
    9368:	61 e0       	ldi	r22, 0x01	; 1
    936a:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
    936e:	80 91 43 08 	lds	r24, 0x0843
    9372:	61 e0       	ldi	r22, 0x01	; 1
    9374:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
    9378:	80 91 44 08 	lds	r24, 0x0844
    937c:	61 e0       	ldi	r22, 0x01	; 1
    937e:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
    9382:	80 91 45 08 	lds	r24, 0x0845
    9386:	61 e0       	ldi	r22, 0x01	; 1
    9388:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
    938c:	80 91 46 08 	lds	r24, 0x0846
    9390:	61 e0       	ldi	r22, 0x01	; 1
    9392:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
    9396:	80 91 47 08 	lds	r24, 0x0847
    939a:	61 e0       	ldi	r22, 0x01	; 1
    939c:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
    93a0:	80 91 48 08 	lds	r24, 0x0848
    93a4:	61 e0       	ldi	r22, 0x01	; 1
    93a6:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
    93aa:	80 91 49 08 	lds	r24, 0x0849
    93ae:	61 e0       	ldi	r22, 0x01	; 1
    93b0:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
				}
				usart0Transmit(irCommRxCrc,1);
    93b4:	80 91 e9 04 	lds	r24, 0x04E9
    93b8:	61 e0       	ldi	r22, 0x01	; 1
    93ba:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
				usart0Transmit(irCommRxCrcError,1);
    93be:	80 91 f9 04 	lds	r24, 0x04F9
    93c2:	61 e0       	ldi	r22, 0x01	; 1
    93c4:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
				usart0Transmit(irCommRxByte,1);
    93c8:	80 91 fa 04 	lds	r24, 0x04FA
    93cc:	61 e0       	ldi	r22, 0x01	; 1
    93ce:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
				usart0Transmit(irCommRxByteExpected,1);				
    93d2:	80 91 fd 04 	lds	r24, 0x04FD
    93d6:	61 e0       	ldi	r22, 0x01	; 1
    93d8:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>

				irCommState = IRCOMM_RX_STOP;
    93dc:	89 e0       	ldi	r24, 0x09	; 9
    93de:	80 93 c7 04 	sts	0x04C7, r24
				break;
    93e2:	0a ca       	rjmp	.-3052   	; 0x87f8 <irCommTasks+0x36>

				}							
				break;

			case IRCOMM_RX_CHECK_CRC:
				irCommRxCrcError = (irCommRxCrc + (irCommRxBitReceived[8]<<1) + irCommRxBitReceived[9])&0x03;
    93e4:	80 91 4a 05 	lds	r24, 0x054A
    93e8:	90 91 e9 04 	lds	r25, 0x04E9
    93ec:	89 0f       	add	r24, r25
    93ee:	90 91 49 05 	lds	r25, 0x0549
    93f2:	99 0f       	add	r25, r25
    93f4:	89 0f       	add	r24, r25
    93f6:	83 70       	andi	r24, 0x03	; 3
    93f8:	80 93 f9 04 	sts	0x04F9, r24
				if(irCommRxCrcError==0) {
    93fc:	88 23       	and	r24, r24
    93fe:	a9 f4       	brne	.+42     	; 0x942a <irCommTasks+0xc68>
					irCommRxLastDataReceived = irCommRxByte;
    9400:	80 91 fa 04 	lds	r24, 0x04FA
    9404:	80 93 ff 04 	sts	0x04FF, r24
					irCommRxReceivingSensor = irCommRxMaxSensor;
    9408:	80 91 5d 0b 	lds	r24, 0x0B5D
    940c:	80 93 18 02 	sts	0x0218, r24
					irCommRxDataAvailable = 1;
    9410:	00 93 00 05 	sts	0x0500, r16
					updateBlueLed(0);
    9414:	80 e0       	ldi	r24, 0x00	; 0
    9416:	0e 94 0d 3b 	call	0x761a	; 0x761a <updateBlueLed>
					usart0Transmit(irCommRxByte,1);		
    941a:	80 91 fa 04 	lds	r24, 0x04FA
    941e:	61 e0       	ldi	r22, 0x01	; 1
    9420:	0e 94 cd 1c 	call	0x399a	; 0x399a <usart0Transmit>
					updateBlueLed(255);
    9424:	8f ef       	ldi	r24, 0xFF	; 255
    9426:	0e 94 0d 3b 	call	0x761a	; 0x761a <updateBlueLed>
				}
												
				currentProx = 0;
    942a:	10 92 24 02 	sts	0x0224, r1
				adcSaveDataTo = SKIP_SAMPLE;
    942e:	85 e0       	ldi	r24, 0x05	; 5
    9430:	80 93 b9 02 	sts	0x02B9, r24
				adcSamplingState = 0;
    9434:	10 92 ba 02 	sts	0x02BA, r1
				irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;				
    9438:	10 92 c6 04 	sts	0x04C6, r1
				} else {
					irCommRxByteExpected++;
				}				
				*/

				resetDebugVariables();
    943c:	0e 94 38 43 	call	0x8670	; 0x8670 <resetDebugVariables>

				irCommState = IRCOMM_RX_IDLE_STATE;
    9440:	81 e0       	ldi	r24, 0x01	; 1
    9442:	80 93 c7 04 	sts	0x04C7, r24

				break;
    9446:	d8 c9       	rjmp	.-3152   	; 0x87f8 <irCommTasks+0x36>
						}											
					 }

				}

				if(irCommComputeShiftIndexTemp>1) {
    9448:	80 91 df 04 	lds	r24, 0x04DF
    944c:	82 30       	cpi	r24, 0x02	; 2
    944e:	50 f0       	brcs	.+20     	; 0x9464 <irCommTasks+0xca2>
					irCommComputeShiftIndexTemp = 1;
    9450:	81 e0       	ldi	r24, 0x01	; 1
    9452:	80 93 df 04 	sts	0x04DF, r24
					updateRedLed(0);
    9456:	80 e0       	ldi	r24, 0x00	; 0
    9458:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <updateRedLed>
    945c:	80 91 df 04 	lds	r24, 0x04DF
    9460:	a0 90 f3 04 	lds	r10, 0x04F3
				}
				irCommComputeShiftTemp[irCommComputeShiftIndexTemp] = irCommComputeShift;
    9464:	e8 2f       	mov	r30, r24
    9466:	f0 e0       	ldi	r31, 0x00	; 0
    9468:	e3 5b       	subi	r30, 0xB3	; 179
    946a:	fa 4f       	sbci	r31, 0xFA	; 250
    946c:	a0 82       	st	Z, r10
				irCommComputeShiftIndexTemp++;
    946e:	8f 5f       	subi	r24, 0xFF	; 255
    9470:	80 93 df 04 	sts	0x04DF, r24
				
				if(irCommShiftCountIndexTemp>1) {
    9474:	80 91 dc 04 	lds	r24, 0x04DC
    9478:	82 30       	cpi	r24, 0x02	; 2
    947a:	40 f0       	brcs	.+16     	; 0x948c <irCommTasks+0xcca>
					irCommShiftCountIndexTemp = 1;
    947c:	81 e0       	ldi	r24, 0x01	; 1
    947e:	80 93 dc 04 	sts	0x04DC, r24
					updateRedLed(0);
    9482:	80 e0       	ldi	r24, 0x00	; 0
    9484:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <updateRedLed>
    9488:	80 91 dc 04 	lds	r24, 0x04DC
				}
				irCommShiftCountTemp[irCommShiftCountIndexTemp] = irCommShiftCount;
    948c:	e8 2f       	mov	r30, r24
    948e:	f0 e0       	ldi	r31, 0x00	; 0
    9490:	e0 5a       	subi	r30, 0xA0	; 160
    9492:	f4 4f       	sbci	r31, 0xF4	; 244
    9494:	90 91 f2 04 	lds	r25, 0x04F2
    9498:	90 83       	st	Z, r25
				irCommShiftCountIndexTemp++;
    949a:	8f 5f       	subi	r24, 0xFF	; 255
    949c:	80 93 dc 04 	sts	0x04DC, r24
				
				if(irCommRxPeakHighToLowIndexTemp>1) {
    94a0:	80 91 e0 04 	lds	r24, 0x04E0
    94a4:	82 30       	cpi	r24, 0x02	; 2
    94a6:	40 f0       	brcs	.+16     	; 0x94b8 <irCommTasks+0xcf6>
					irCommRxPeakHighToLowIndexTemp = 1;
    94a8:	81 e0       	ldi	r24, 0x01	; 1
    94aa:	80 93 e0 04 	sts	0x04E0, r24
					updateRedLed(0);
    94ae:	80 e0       	ldi	r24, 0x00	; 0
    94b0:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <updateRedLed>
    94b4:	80 91 e0 04 	lds	r24, 0x04E0
				}
				irCommRxPeakHighToLowTemp[irCommRxPeakHighToLowIndexTemp] = irCommRxPeakHighToLow;
    94b8:	e8 2f       	mov	r30, r24
    94ba:	f0 e0       	ldi	r31, 0x00	; 0
    94bc:	e6 55       	subi	r30, 0x56	; 86
    94be:	fa 4f       	sbci	r31, 0xFA	; 250
    94c0:	90 91 03 05 	lds	r25, 0x0503
    94c4:	90 83       	st	Z, r25
				irCommRxPeakHighToLowIndexTemp++;
    94c6:	8f 5f       	subi	r24, 0xFF	; 255
    94c8:	80 93 e0 04 	sts	0x04E0, r24
				
				if(irCommRxStartPeakDurationIndexTemp>1) {
    94cc:	80 91 e1 04 	lds	r24, 0x04E1
    94d0:	82 30       	cpi	r24, 0x02	; 2
    94d2:	40 f0       	brcs	.+16     	; 0x94e4 <irCommTasks+0xd22>
					irCommRxStartPeakDurationIndexTemp = 1;
    94d4:	81 e0       	ldi	r24, 0x01	; 1
    94d6:	80 93 e1 04 	sts	0x04E1, r24
					updateRedLed(0);
    94da:	80 e0       	ldi	r24, 0x00	; 0
    94dc:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <updateRedLed>
    94e0:	80 91 e1 04 	lds	r24, 0x04E1
				}
				irCommRxStartPeakDurationTemp[irCommRxStartPeakDurationIndexTemp] = irCommRxStartPeakDuration;
    94e4:	e8 2f       	mov	r30, r24
    94e6:	f0 e0       	ldi	r31, 0x00	; 0
    94e8:	e4 51       	subi	r30, 0x14	; 20
    94ea:	f9 4f       	sbci	r31, 0xF9	; 249
    94ec:	90 91 04 05 	lds	r25, 0x0504
    94f0:	90 83       	st	Z, r25
				irCommRxStartPeakDurationIndexTemp++;
    94f2:	8f 5f       	subi	r24, 0xFF	; 255
    94f4:	80 93 e1 04 	sts	0x04E1, r24
					
				
				//if(irCommComputeShift != 0) {	// it should not be never 1 because the difference between min and max in the current signal
					//updateRedLed(0);			// is at least IRCOMM_DETECTION_AMPLITUDE_THR (checked in the previous state)
				//}
				irCommProxMean = (int)(irCommProxSum / IRCOMM_SAMPLING_WINDOW);
    94f8:	60 91 ea 04 	lds	r22, 0x04EA
    94fc:	70 91 eb 04 	lds	r23, 0x04EB
    9500:	80 91 ec 04 	lds	r24, 0x04EC
    9504:	90 91 ed 04 	lds	r25, 0x04ED
    9508:	24 e1       	ldi	r18, 0x14	; 20
    950a:	30 e0       	ldi	r19, 0x00	; 0
    950c:	40 e0       	ldi	r20, 0x00	; 0
    950e:	50 e0       	ldi	r21, 0x00	; 0
    9510:	0e 94 b9 51 	call	0xa372	; 0xa372 <__divmodsi4>
    9514:	b9 01       	movw	r22, r18
    9516:	30 93 f5 04 	sts	0x04F5, r19
    951a:	20 93 f4 04 	sts	0x04F4, r18

				if(irCommProxMeanIndexTemp>1) {
    951e:	80 91 d8 04 	lds	r24, 0x04D8
    9522:	82 30       	cpi	r24, 0x02	; 2
    9524:	60 f0       	brcs	.+24     	; 0x953e <irCommTasks+0xd7c>
					irCommProxMeanIndexTemp = 1;
    9526:	81 e0       	ldi	r24, 0x01	; 1
    9528:	80 93 d8 04 	sts	0x04D8, r24
					updateRedLed(0);
    952c:	80 e0       	ldi	r24, 0x00	; 0
    952e:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <updateRedLed>
    9532:	80 91 d8 04 	lds	r24, 0x04D8
    9536:	60 91 f4 04 	lds	r22, 0x04F4
    953a:	70 91 f5 04 	lds	r23, 0x04F5
				}
				irCommProxMeanTemp[irCommProxMeanIndexTemp] = irCommProxMean;
    953e:	e8 2f       	mov	r30, r24
    9540:	f0 e0       	ldi	r31, 0x00	; 0
    9542:	ee 0f       	add	r30, r30
    9544:	ff 1f       	adc	r31, r31
    9546:	e0 5b       	subi	r30, 0xB0	; 176
    9548:	fa 4f       	sbci	r31, 0xFA	; 250
    954a:	71 83       	std	Z+1, r23	; 0x01
    954c:	60 83       	st	Z, r22
				irCommProxMeanIndexTemp++;
    954e:	8f 5f       	subi	r24, 0xFF	; 255
    9550:	80 93 d8 04 	sts	0x04D8, r24
    9554:	20 91 d5 04 	lds	r18, 0x04D5
	irCommRxBitReceivedIndexTemp = 0;
	
	
}

void irCommTasks() {
    9558:	04 e4       	ldi	r16, 0x44	; 68
    955a:	1b e0       	ldi	r17, 0x0B	; 11
				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
					irCommMaxSensorSignal[i] -= irCommProxMean;

					if(irCommMaxSensorSignalFiltIndexTemp>39) {
						irCommMaxSensorSignalFiltIndexTemp = 39;
    955c:	e7 e2       	ldi	r30, 0x27	; 39
    955e:	ce 2e       	mov	r12, r30
    9560:	18 c0       	rjmp	.+48     	; 0x9592 <irCommTasks+0xdd0>
						updateRedLed(0);
					}
					irCommMaxSensorSignalFiltTemp[irCommMaxSensorSignalFiltIndexTemp] = irCommMaxSensorSignal[i];
    9562:	e2 2f       	mov	r30, r18
    9564:	f0 e0       	ldi	r31, 0x00	; 0
    9566:	ee 0f       	add	r30, r30
    9568:	ff 1f       	adc	r31, r31
    956a:	e8 5a       	subi	r30, 0xA8	; 168
    956c:	fa 4f       	sbci	r31, 0xFA	; 250
    956e:	91 83       	std	Z+1, r25	; 0x01
    9570:	80 83       	st	Z, r24
					irCommMaxSensorSignalFiltIndexTemp++;
    9572:	2f 5f       	subi	r18, 0xFF	; 255
    9574:	20 93 d5 04 	sts	0x04D5, r18
    9578:	82 e0       	ldi	r24, 0x02	; 2
    957a:	90 e0       	ldi	r25, 0x00	; 0
    957c:	48 0e       	add	r4, r24
    957e:	59 1e       	adc	r5, r25
				irCommProxMeanTemp[irCommProxMeanIndexTemp] = irCommProxMean;
				irCommProxMeanIndexTemp++;
				

				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    9580:	94 e4       	ldi	r25, 0x44	; 68
    9582:	49 16       	cp	r4, r25
    9584:	9b e0       	ldi	r25, 0x0B	; 11
    9586:	59 06       	cpc	r5, r25
    9588:	d1 f0       	breq	.+52     	; 0x95be <irCommTasks+0xdfc>
    958a:	60 91 f4 04 	lds	r22, 0x04F4
    958e:	70 91 f5 04 	lds	r23, 0x04F5
					irCommMaxSensorSignal[i] -= irCommProxMean;
    9592:	d2 01       	movw	r26, r4
    9594:	8d 91       	ld	r24, X+
    9596:	9c 91       	ld	r25, X
    9598:	11 97       	sbiw	r26, 0x01	; 1
    959a:	86 1b       	sub	r24, r22
    959c:	97 0b       	sbc	r25, r23
    959e:	11 96       	adiw	r26, 0x01	; 1
    95a0:	9c 93       	st	X, r25
    95a2:	8e 93       	st	-X, r24

					if(irCommMaxSensorSignalFiltIndexTemp>39) {
    95a4:	28 32       	cpi	r18, 0x28	; 40
    95a6:	e8 f2       	brcs	.-70     	; 0x9562 <irCommTasks+0xda0>
						irCommMaxSensorSignalFiltIndexTemp = 39;
    95a8:	c0 92 d5 04 	sts	0x04D5, r12
						updateRedLed(0);
    95ac:	80 e0       	ldi	r24, 0x00	; 0
    95ae:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <updateRedLed>
    95b2:	20 91 d5 04 	lds	r18, 0x04D5
    95b6:	f2 01       	movw	r30, r4
    95b8:	80 81       	ld	r24, Z
    95ba:	91 81       	ldd	r25, Z+1	; 0x01
    95bc:	d2 cf       	rjmp	.-92     	; 0x9562 <irCommTasks+0xda0>
					irCommMaxSensorSignalFiltIndexTemp++;
					
				}
						
				// start counting number of switch around mean signal
				if(irCommMaxSensorSignal[0] > 0) {
    95be:	80 91 1c 0b 	lds	r24, 0x0B1C
    95c2:	90 91 1d 0b 	lds	r25, 0x0B1D
    95c6:	18 16       	cp	r1, r24
    95c8:	19 06       	cpc	r1, r25
    95ca:	0c f0       	brlt	.+2      	; 0x95ce <irCommTasks+0xe0c>
    95cc:	68 c1       	rjmp	.+720    	; 0x989e <irCommTasks+0x10dc>
					irCommSignalState = 1;
    95ce:	81 e0       	ldi	r24, 0x01	; 1
    95d0:	80 93 f6 04 	sts	0x04F6, r24
    95d4:	21 e0       	ldi	r18, 0x01	; 1
    95d6:	38 2f       	mov	r19, r24
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
    95d8:	ee e1       	ldi	r30, 0x1E	; 30
    95da:	fb e0       	ldi	r31, 0x0B	; 11
    95dc:	40 e0       	ldi	r20, 0x00	; 0
    95de:	06 c0       	rjmp	.+12     	; 0x95ec <irCommTasks+0xe2a>
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
    95e0:	27 fd       	sbrc	r18, 7
    95e2:	0e c0       	rjmp	.+28     	; 0x9600 <irCommTasks+0xe3e>
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
    95e4:	0e 17       	cp	r16, r30
    95e6:	1f 07       	cpc	r17, r31
    95e8:	71 f0       	breq	.+28     	; 0x9606 <irCommTasks+0xe44>
    95ea:	23 2f       	mov	r18, r19
					if(irCommMaxSensorSignal[i] > 0) {
    95ec:	81 91       	ld	r24, Z+
    95ee:	91 91       	ld	r25, Z+
    95f0:	18 16       	cp	r1, r24
    95f2:	19 06       	cpc	r1, r25
    95f4:	ac f3       	brlt	.-22     	; 0x95e0 <irCommTasks+0xe1e>
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
							irCommSwitchCount++;
						}
					} else {
						if(irCommSignalState > 0) {
    95f6:	12 16       	cp	r1, r18
    95f8:	ac f7       	brge	.-22     	; 0x95e4 <irCommTasks+0xe22>
							irCommSignalState = -1;
							irCommSwitchCount++;
    95fa:	4f 5f       	subi	r20, 0xFF	; 255
							irCommSignalState = 1;
							irCommSwitchCount++;
						}
					} else {
						if(irCommSignalState > 0) {
							irCommSignalState = -1;
    95fc:	3f ef       	ldi	r19, 0xFF	; 255
    95fe:	f2 cf       	rjmp	.-28     	; 0x95e4 <irCommTasks+0xe22>
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
							irCommSwitchCount++;
    9600:	4f 5f       	subi	r20, 0xFF	; 255
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
    9602:	31 e0       	ldi	r19, 0x01	; 1
    9604:	ef cf       	rjmp	.-34     	; 0x95e4 <irCommTasks+0xe22>
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
    9606:	30 93 f6 04 	sts	0x04F6, r19
    960a:	40 93 f7 04 	sts	0x04F7, r20
							irCommSwitchCount++;
						}
					}
				}

				if(irCommSwitchCountIndexTemp>1) {
    960e:	80 91 d9 04 	lds	r24, 0x04D9
    9612:	82 30       	cpi	r24, 0x02	; 2
    9614:	40 f0       	brcs	.+16     	; 0x9626 <irCommTasks+0xe64>
					irCommSwitchCountIndexTemp = 1;
    9616:	81 e0       	ldi	r24, 0x01	; 1
    9618:	80 93 d9 04 	sts	0x04D9, r24
					updateRedLed(0);
    961c:	80 e0       	ldi	r24, 0x00	; 0
    961e:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <updateRedLed>
    9622:	80 91 d9 04 	lds	r24, 0x04D9
				}
				irCommSwitchCountTemp[irCommSwitchCountIndexTemp] = irCommSwitchCount;
    9626:	e8 2f       	mov	r30, r24
    9628:	f0 e0       	ldi	r31, 0x00	; 0
    962a:	ee 5c       	subi	r30, 0xCE	; 206
    962c:	fa 4f       	sbci	r31, 0xFA	; 250
    962e:	90 91 f7 04 	lds	r25, 0x04F7
    9632:	90 83       	st	Z, r25
				irCommSwitchCountIndexTemp++;
    9634:	8f 5f       	subi	r24, 0xFF	; 255
    9636:	80 93 d9 04 	sts	0x04D9, r24
				

				turnOffGreenLeds();
    963a:	0e 94 be 3b 	call	0x777c	; 0x777c <turnOffGreenLeds>
				if(irCommRxPeakHighToLow==1) {
    963e:	90 91 03 05 	lds	r25, 0x0503
    9642:	91 30       	cpi	r25, 0x01	; 1
    9644:	09 f4       	brne	.+2      	; 0x9648 <irCommTasks+0xe86>
    9646:	ed c0       	rjmp	.+474    	; 0x9822 <irCommTasks+0x1060>
							resetDebugVariables();				
							break;
						}
					}
				} else {
					if(irCommRxStartBitDetected==1) {
    9648:	90 91 02 05 	lds	r25, 0x0502
    964c:	91 30       	cpi	r25, 0x01	; 1
    964e:	09 f4       	brne	.+2      	; 0x9652 <irCommTasks+0xe90>
    9650:	62 c1       	rjmp	.+708    	; 0x9916 <irCommTasks+0x1154>

							resetDebugVariables();				
							break;
						}
					} else {
						if(irCommSwitchCount==2) {
    9652:	90 91 f7 04 	lds	r25, 0x04F7
    9656:	92 30       	cpi	r25, 0x02	; 2
    9658:	09 f4       	brne	.+2      	; 0x965c <irCommTasks+0xe9a>
    965a:	8c c1       	rjmp	.+792    	; 0x9974 <irCommTasks+0x11b2>
							irCommShiftCounter = 0;
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else if(irCommSwitchCount==1) {
    965c:	91 30       	cpi	r25, 0x01	; 1
    965e:	09 f4       	brne	.+2      	; 0x9662 <irCommTasks+0xea0>
    9660:	f9 c1       	rjmp	.+1010   	; 0x9a54 <irCommTasks+0x1292>
								irCommRxCrc = 0;	
								irCommRxByte = 0;
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
							}
						} else {
							currentProx = 0;
    9662:	10 92 24 02 	sts	0x0224, r1
							adcSaveDataTo = SKIP_SAMPLE;
    9666:	85 e0       	ldi	r24, 0x05	; 5
    9668:	80 93 b9 02 	sts	0x02B9, r24
							adcSamplingState = 0;
    966c:	10 92 ba 02 	sts	0x02BA, r1
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;							
    9670:	10 92 c6 04 	sts	0x04C6, r1
							irCommState = IRCOMM_RX_IDLE_STATE;
    9674:	91 e0       	ldi	r25, 0x01	; 1
    9676:	90 93 c7 04 	sts	0x04C7, r25

							if(irCommSyncStateIndexTemp>1) {
    967a:	80 91 e4 04 	lds	r24, 0x04E4
    967e:	82 30       	cpi	r24, 0x02	; 2
    9680:	38 f0       	brcs	.+14     	; 0x9690 <irCommTasks+0xece>
								irCommSyncStateIndexTemp = 1;
    9682:	90 93 e4 04 	sts	0x04E4, r25
								updateRedLed(0);
    9686:	80 e0       	ldi	r24, 0x00	; 0
    9688:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <updateRedLed>
    968c:	80 91 e4 04 	lds	r24, 0x04E4
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 15;
    9690:	e8 2f       	mov	r30, r24
    9692:	f0 e0       	ldi	r31, 0x00	; 0
    9694:	e5 5b       	subi	r30, 0xB5	; 181
    9696:	fa 4f       	sbci	r31, 0xFA	; 250
    9698:	9f e0       	ldi	r25, 0x0F	; 15
    969a:	90 83       	st	Z, r25
							irCommSyncStateIndexTemp++;
    969c:	8f 5f       	subi	r24, 0xFF	; 255
    969e:	80 93 e4 04 	sts	0x04E4, r24
							//irCommState = IRCOMM_RX_DEBUG;
							//irCommAdcRxState = 12;
							//updateRedLed(0);
							//break;

							resetDebugVariables();				
    96a2:	0e 94 38 43 	call	0x8670	; 0x8670 <resetDebugVariables>
							break;				
    96a6:	a8 c8       	rjmp	.-3760   	; 0x87f8 <irCommTasks+0x36>
					irCommBitsSignalTemp[irCommBitsSignalIndexTemp] = irCommMaxSensorSignal[i];
					irCommBitsSignalIndexTemp++;
				}
						
				// start counting number of switch around mean signal
				if(irCommMaxSensorSignal[0] > 0) {
    96a8:	80 91 1c 0b 	lds	r24, 0x0B1C
    96ac:	90 91 1d 0b 	lds	r25, 0x0B1D
    96b0:	18 16       	cp	r1, r24
    96b2:	19 06       	cpc	r1, r25
    96b4:	0c f0       	brlt	.+2      	; 0x96b8 <irCommTasks+0xef6>
    96b6:	0b c1       	rjmp	.+534    	; 0x98ce <irCommTasks+0x110c>
					irCommSignalState = 1;
    96b8:	81 e0       	ldi	r24, 0x01	; 1
    96ba:	80 93 f6 04 	sts	0x04F6, r24
    96be:	21 e0       	ldi	r18, 0x01	; 1
    96c0:	38 2f       	mov	r19, r24
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
    96c2:	ee e1       	ldi	r30, 0x1E	; 30
    96c4:	fb e0       	ldi	r31, 0x0B	; 11
    96c6:	40 e0       	ldi	r20, 0x00	; 0
    96c8:	07 c0       	rjmp	.+14     	; 0x96d8 <irCommTasks+0xf16>
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
    96ca:	27 fd       	sbrc	r18, 7
    96cc:	0f c0       	rjmp	.+30     	; 0x96ec <irCommTasks+0xf2a>
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
    96ce:	2b e0       	ldi	r18, 0x0B	; 11
    96d0:	e4 34       	cpi	r30, 0x44	; 68
    96d2:	f2 07       	cpc	r31, r18
    96d4:	71 f0       	breq	.+28     	; 0x96f2 <irCommTasks+0xf30>
    96d6:	23 2f       	mov	r18, r19
					if(irCommMaxSensorSignal[i] > 0) {
    96d8:	81 91       	ld	r24, Z+
    96da:	91 91       	ld	r25, Z+
    96dc:	18 16       	cp	r1, r24
    96de:	19 06       	cpc	r1, r25
    96e0:	a4 f3       	brlt	.-24     	; 0x96ca <irCommTasks+0xf08>
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
							irCommSwitchCount++;
						}
					} else {
						if(irCommSignalState > 0) {
    96e2:	12 16       	cp	r1, r18
    96e4:	a4 f7       	brge	.-24     	; 0x96ce <irCommTasks+0xf0c>
							irCommSignalState = -1;
							irCommSwitchCount++;
    96e6:	4f 5f       	subi	r20, 0xFF	; 255
							irCommSignalState = 1;
							irCommSwitchCount++;
						}
					} else {
						if(irCommSignalState > 0) {
							irCommSignalState = -1;
    96e8:	3f ef       	ldi	r19, 0xFF	; 255
    96ea:	f1 cf       	rjmp	.-30     	; 0x96ce <irCommTasks+0xf0c>
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
							irCommSwitchCount++;
    96ec:	4f 5f       	subi	r20, 0xFF	; 255
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
    96ee:	31 e0       	ldi	r19, 0x01	; 1
    96f0:	ee cf       	rjmp	.-36     	; 0x96ce <irCommTasks+0xf0c>
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
    96f2:	30 93 f6 04 	sts	0x04F6, r19
    96f6:	40 93 f7 04 	sts	0x04F7, r20
							irCommSwitchCount++;
						}
					}
				}
				// check whether we received either a "0" or a "1"
				if(irCommSwitchCount >= (IRCOMM_BIT0_SWITCH_COUNT-2)) {
    96fa:	46 30       	cpi	r20, 0x06	; 6
    96fc:	08 f4       	brcc	.+2      	; 0x9700 <irCommTasks+0xf3e>
    96fe:	68 c0       	rjmp	.+208    	; 0x97d0 <irCommTasks+0x100e>
					irCommRxBitReceived[irCommRxBitCount] = 0;
    9700:	80 91 f8 04 	lds	r24, 0x04F8
    9704:	e8 2f       	mov	r30, r24
    9706:	f0 e0       	ldi	r31, 0x00	; 0
    9708:	ef 5b       	subi	r30, 0xBF	; 191
    970a:	fa 4f       	sbci	r31, 0xFA	; 250
    970c:	10 82       	st	Z, r1
					if(irCommRxBitCount<8) {	// do not consider the crc for byte interpretation
    970e:	88 30       	cpi	r24, 0x08	; 8
    9710:	08 f0       	brcs	.+2      	; 0x9714 <irCommTasks+0xf52>
    9712:	f6 c0       	rjmp	.+492    	; 0x9900 <irCommTasks+0x113e>
						irCommRxByte = irCommRxByte<<1;	// bit0, only shift
    9714:	90 91 fa 04 	lds	r25, 0x04FA
    9718:	99 0f       	add	r25, r25
    971a:	90 93 fa 04 	sts	0x04FA, r25
    971e:	20 e0       	ldi	r18, 0x00	; 0
					resetDebugVariables();
					break;

				}

				if(irCommRxBitReceivedIndexTemp>9) {
    9720:	90 91 e6 04 	lds	r25, 0x04E6
    9724:	9a 30       	cpi	r25, 0x0A	; 10
    9726:	08 f0       	brcs	.+2      	; 0x972a <irCommTasks+0xf68>
    9728:	db c0       	rjmp	.+438    	; 0x98e0 <irCommTasks+0x111e>
					irCommRxBitReceivedIndexTemp = 9;
					updateRedLed(0);
				}
				irCommRxBitReceivedTemp[irCommRxBitReceivedIndexTemp] = irCommRxBitReceived[irCommRxBitCount];
    972a:	e9 2f       	mov	r30, r25
    972c:	f0 e0       	ldi	r31, 0x00	; 0
    972e:	e0 5c       	subi	r30, 0xC0	; 192
    9730:	f7 4f       	sbci	r31, 0xF7	; 247
    9732:	20 83       	st	Z, r18
				irCommRxBitReceivedIndexTemp++;
    9734:	9f 5f       	subi	r25, 0xFF	; 255
    9736:	90 93 e6 04 	sts	0x04E6, r25

				setGreenLed(irCommRxBitCount, 1);
    973a:	61 e0       	ldi	r22, 0x01	; 1
    973c:	0e 94 21 3b 	call	0x7642	; 0x7642 <setGreenLed>

				irCommRxBitCount++;
    9740:	80 91 f8 04 	lds	r24, 0x04F8
    9744:	8f 5f       	subi	r24, 0xFF	; 255
    9746:	80 93 f8 04 	sts	0x04F8, r24
				if(irCommRxBitCount == 10) {	// received 8 bit of data + 2 bit of crc
    974a:	8a 30       	cpi	r24, 0x0A	; 10
    974c:	09 f4       	brne	.+2      	; 0x9750 <irCommTasks+0xf8e>
    974e:	da c0       	rjmp	.+436    	; 0x9904 <irCommTasks+0x1142>
					}
					irCommStateTemp[irCommStateIndexTemp] = irCommState;
					irCommStateIndexTemp++;

				} else {
					irCommState = IRCOMM_RX_WAITING_BIT;
    9750:	85 e0       	ldi	r24, 0x05	; 5
    9752:	80 93 c7 04 	sts	0x04C7, r24

					if(irCommStateIndexTemp>13) {
    9756:	80 91 e3 04 	lds	r24, 0x04E3
    975a:	8e 30       	cpi	r24, 0x0E	; 14
    975c:	08 f4       	brcc	.+2      	; 0x9760 <irCommTasks+0xf9e>
    975e:	5c ca       	rjmp	.-2888   	; 0x8c18 <irCommTasks+0x456>
						irCommStateIndexTemp = 13;
    9760:	8d e0       	ldi	r24, 0x0D	; 13
    9762:	80 93 e3 04 	sts	0x04E3, r24
						updateRedLed(0);
    9766:	80 e0       	ldi	r24, 0x00	; 0
    9768:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <updateRedLed>
    976c:	80 91 e3 04 	lds	r24, 0x04E3
    9770:	53 ca       	rjmp	.-2906   	; 0x8c18 <irCommTasks+0x456>
							irCommStartDiffTemp[irCommStartDiffIndexTemp] = irCommTempValue;
							irCommStartDiffIndexTemp++;
							

							if(irCommMaxSensorSignal[i] == irCommTempMax) {
								irCommRxPeakHighToLow = 0;
    9772:	10 92 03 05 	sts	0x0503, r1
    9776:	26 cc       	rjmp	.-1972   	; 0x8fc4 <irCommTasks+0x802>
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
					irCommTxBitToTransmit[9-i] = irCommTempValue;
					if(irCommTempValue==1) {
						irCommTxCrc++;
    9778:	4f 5f       	subi	r20, 0xFF	; 255
    977a:	95 c8       	rjmp	.-3798   	; 0x88a6 <irCommTasks+0xe4>
    977c:	4f 5f       	subi	r20, 0xFF	; 255
    977e:	af c8       	rjmp	.-3746   	; 0x88de <irCommTasks+0x11c>
    9780:	4f 5f       	subi	r20, 0xFF	; 255
    9782:	9e c8       	rjmp	.-3780   	; 0x88c0 <irCommTasks+0xfe>
    9784:	4f 5f       	subi	r20, 0xFF	; 255
    9786:	eb c8       	rjmp	.-3626   	; 0x895e <irCommTasks+0x19c>
    9788:	4f 5f       	subi	r20, 0xFF	; 255
    978a:	de c8       	rjmp	.-3652   	; 0x8948 <irCommTasks+0x186>
    978c:	4f 5f       	subi	r20, 0xFF	; 255
    978e:	cb c8       	rjmp	.-3690   	; 0x8926 <irCommTasks+0x164>
    9790:	4f 5f       	subi	r20, 0xFF	; 255
    9792:	b6 c8       	rjmp	.-3732   	; 0x8900 <irCommTasks+0x13e>
				if(irCommTxBitCount == 0) {
					//PORTA = irCommTxSensorMask;
					if(irCommTxSensorGroup==0) {
						PORTA = 0xAA;
					} else {
						PORTA = 0x55;
    9794:	85 e5       	ldi	r24, 0x55	; 85
    9796:	82 b9       	out	0x02, r24	; 2
    9798:	6f ca       	rjmp	.-2850   	; 0x8c78 <irCommTasks+0x4b6>
							

							if(irCommMaxSensorSignal[i] == irCommTempMax) {
								irCommRxPeakHighToLow = 0;
							} else if(irCommMaxSensorSignal[i] == irCommTempMin) {
								irCommRxPeakHighToLow = 1;
    979a:	60 92 03 05 	sts	0x0503, r6
    979e:	12 cc       	rjmp	.-2012   	; 0x8fc4 <irCommTasks+0x802>
						}
						if(irCommTempMax < irCommMaxSensorSignal[i]) {
							irCommTempMax = irCommMaxSensorSignal[i];
						}	
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
							if((irCommMaxSensorSignal[i]==irCommTempMax) && (irCommRxPeakHighToLow==1)) {
    97a0:	80 91 03 05 	lds	r24, 0x0503
    97a4:	81 30       	cpi	r24, 0x01	; 1
    97a6:	09 f0       	breq	.+2      	; 0x97aa <irCommTasks+0xfe8>
    97a8:	47 cc       	rjmp	.-1906   	; 0x9038 <irCommTasks+0x876>
    97aa:	4f cc       	rjmp	.-1890   	; 0x904a <irCommTasks+0x888>
						irCommRxByte = irCommRxByte<<1;	// bit1, shift and add 1
						irCommRxByte += 1;
					}
				} else {	// error...no significant signal perceived
					//irCommRxBitReceived[irCommRxBitCount] = 0xFF;
					updateBlueLed(0);
    97ac:	80 e0       	ldi	r24, 0x00	; 0
    97ae:	0e 94 0d 3b 	call	0x761a	; 0x761a <updateBlueLed>
					currentProx = 0;
    97b2:	10 92 24 02 	sts	0x0224, r1
					adcSaveDataTo = SKIP_SAMPLE;
    97b6:	85 e0       	ldi	r24, 0x05	; 5
    97b8:	80 93 b9 02 	sts	0x02B9, r24
					adcSamplingState = 0;
    97bc:	10 92 ba 02 	sts	0x02BA, r1
					irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;					
    97c0:	10 92 c6 04 	sts	0x04C6, r1
					irCommState = IRCOMM_RX_IDLE_STATE;
    97c4:	81 e0       	ldi	r24, 0x01	; 1
    97c6:	80 93 c7 04 	sts	0x04C7, r24

					//irCommState = IRCOMM_RX_DEBUG;
					//irCommAdcRxState = 12;
					//break;

					resetDebugVariables();
    97ca:	0e 94 38 43 	call	0x8670	; 0x8670 <resetDebugVariables>
					break;
    97ce:	14 c8       	rjmp	.-4056   	; 0x87f8 <irCommTasks+0x36>
				if(irCommSwitchCount >= (IRCOMM_BIT0_SWITCH_COUNT-2)) {
					irCommRxBitReceived[irCommRxBitCount] = 0;
					if(irCommRxBitCount<8) {	// do not consider the crc for byte interpretation
						irCommRxByte = irCommRxByte<<1;	// bit0, only shift
					}
				} else if(irCommSwitchCount >= (IRCOMM_BIT1_SWITCH_COUNT-1)) {
    97d0:	43 30       	cpi	r20, 0x03	; 3
    97d2:	60 f3       	brcs	.-40     	; 0x97ac <irCommTasks+0xfea>
					irCommRxBitReceived[irCommRxBitCount] = 1;
    97d4:	80 91 f8 04 	lds	r24, 0x04F8
    97d8:	e8 2f       	mov	r30, r24
    97da:	f0 e0       	ldi	r31, 0x00	; 0
    97dc:	ef 5b       	subi	r30, 0xBF	; 191
    97de:	fa 4f       	sbci	r31, 0xFA	; 250
    97e0:	91 e0       	ldi	r25, 0x01	; 1
    97e2:	90 83       	st	Z, r25
					if(irCommRxBitCount<8) {	// do not consider the crc for byte interpretation
    97e4:	88 30       	cpi	r24, 0x08	; 8
    97e6:	08 f0       	brcs	.+2      	; 0x97ea <irCommTasks+0x1028>
    97e8:	c3 c0       	rjmp	.+390    	; 0x9970 <irCommTasks+0x11ae>
						irCommRxCrc++;
    97ea:	90 91 e9 04 	lds	r25, 0x04E9
    97ee:	9f 5f       	subi	r25, 0xFF	; 255
    97f0:	90 93 e9 04 	sts	0x04E9, r25
						irCommRxByte = irCommRxByte<<1;	// bit1, shift and add 1
    97f4:	90 91 fa 04 	lds	r25, 0x04FA
    97f8:	99 0f       	add	r25, r25
						irCommRxByte += 1;
    97fa:	9f 5f       	subi	r25, 0xFF	; 255
    97fc:	90 93 fa 04 	sts	0x04FA, r25
    9800:	21 e0       	ldi	r18, 0x01	; 1
    9802:	8e cf       	rjmp	.-228    	; 0x9720 <irCommTasks+0xf5e>
				break;

			case IRCOMM_TX_COMPUTE_TIMINGS:
				updateBlueLed(255);
				if(irCommTxBitToTransmit[irCommTxBitCount] == 3) {
					updateBlueLed(0);
    9804:	80 e0       	ldi	r24, 0x00	; 0
    9806:	0e 94 0d 3b 	call	0x761a	; 0x761a <updateBlueLed>
					irCommTxDuration = IRCOMM_BIT_START2_DURATION;					
    980a:	80 ef       	ldi	r24, 0xF0	; 240
    980c:	90 e0       	ldi	r25, 0x00	; 0
    980e:	90 93 10 05 	sts	0x0510, r25
    9812:	80 93 0f 05 	sts	0x050F, r24
					irCommTxSwitchCount = IRCOMM_BIT_START2_SWITCH_COUNT;
    9816:	81 e0       	ldi	r24, 0x01	; 1
    9818:	80 93 11 05 	sts	0x0511, r24
    981c:	20 91 0d 05 	lds	r18, 0x050D
    9820:	22 ca       	rjmp	.-3004   	; 0x8c66 <irCommTasks+0x4a4>
				irCommSwitchCountIndexTemp++;
				

				turnOffGreenLeds();
				if(irCommRxPeakHighToLow==1) {
					if(irCommRxStartBitDetected==1) {
    9822:	20 91 02 05 	lds	r18, 0x0502
    9826:	21 30       	cpi	r18, 0x01	; 1
    9828:	09 f4       	brne	.+2      	; 0x982c <irCommTasks+0x106a>
    982a:	3c c1       	rjmp	.+632    	; 0x9aa4 <irCommTasks+0x12e2>

							resetDebugVariables();				
							break;
						}
					} else {
						if(irCommSwitchCount==2) {
    982c:	20 91 f7 04 	lds	r18, 0x04F7
    9830:	22 30       	cpi	r18, 0x02	; 2
    9832:	09 f4       	brne	.+2      	; 0x9836 <irCommTasks+0x1074>
    9834:	75 c1       	rjmp	.+746    	; 0x9b20 <irCommTasks+0x135e>
							irCommShiftCounter = 0;
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else if(irCommSwitchCount==1) {		
    9836:	21 30       	cpi	r18, 0x01	; 1
    9838:	09 f4       	brne	.+2      	; 0x983c <irCommTasks+0x107a>
    983a:	cc c1       	rjmp	.+920    	; 0x9bd4 <irCommTasks+0x1412>
								irCommState = IRCOMM_RX_IDLE_STATE;

								irCommSyncStateIndexTemp++;
							}							
						} else {							
							currentProx = 0;
    983c:	10 92 24 02 	sts	0x0224, r1
							adcSaveDataTo = SKIP_SAMPLE;
    9840:	85 e0       	ldi	r24, 0x05	; 5
    9842:	80 93 b9 02 	sts	0x02B9, r24
							adcSamplingState = 0;
    9846:	10 92 ba 02 	sts	0x02BA, r1
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;							
    984a:	10 92 c6 04 	sts	0x04C6, r1
							irCommState = IRCOMM_RX_IDLE_STATE;	
    984e:	90 93 c7 04 	sts	0x04C7, r25

							if(irCommSyncStateIndexTemp>1) {
    9852:	80 91 e4 04 	lds	r24, 0x04E4
    9856:	82 30       	cpi	r24, 0x02	; 2
    9858:	38 f0       	brcs	.+14     	; 0x9868 <irCommTasks+0x10a6>
								irCommSyncStateIndexTemp = 1;
    985a:	90 93 e4 04 	sts	0x04E4, r25
								updateRedLed(0);
    985e:	80 e0       	ldi	r24, 0x00	; 0
    9860:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <updateRedLed>
    9864:	80 91 e4 04 	lds	r24, 0x04E4
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 11;
    9868:	e8 2f       	mov	r30, r24
    986a:	f0 e0       	ldi	r31, 0x00	; 0
    986c:	e5 5b       	subi	r30, 0xB5	; 181
    986e:	fa 4f       	sbci	r31, 0xFA	; 250
    9870:	9b e0       	ldi	r25, 0x0B	; 11
    9872:	90 83       	st	Z, r25
							irCommSyncStateIndexTemp++;
    9874:	8f 5f       	subi	r24, 0xFF	; 255
    9876:	80 93 e4 04 	sts	0x04E4, r24
							//irCommState = IRCOMM_RX_DEBUG;
							//irCommAdcRxState = 12;
							//updateRedLed(0);
							//break;

							resetDebugVariables();				
    987a:	0e 94 38 43 	call	0x8670	; 0x8670 <resetDebugVariables>
							break;
    987e:	0c 94 fc 43 	jmp	0x87f8	; 0x87f8 <irCommTasks+0x36>
				if(irCommTxBitToTransmit[irCommTxBitCount] == 3) {
					updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START2_DURATION;					
					irCommTxSwitchCount = IRCOMM_BIT_START2_SWITCH_COUNT;
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 2) {
					updateBlueLed(0);
    9882:	80 e0       	ldi	r24, 0x00	; 0
    9884:	0e 94 0d 3b 	call	0x761a	; 0x761a <updateBlueLed>
					irCommTxDuration = IRCOMM_BIT_START1_DURATION;					
    9888:	88 e7       	ldi	r24, 0x78	; 120
    988a:	90 e0       	ldi	r25, 0x00	; 0
    988c:	90 93 10 05 	sts	0x0510, r25
    9890:	80 93 0f 05 	sts	0x050F, r24
					irCommTxSwitchCount = IRCOMM_BIT_START1_SWITCH_COUNT;
    9894:	10 93 11 05 	sts	0x0511, r17
    9898:	20 91 0d 05 	lds	r18, 0x050D
    989c:	e4 c9       	rjmp	.-3128   	; 0x8c66 <irCommTasks+0x4a4>
						
				// start counting number of switch around mean signal
				if(irCommMaxSensorSignal[0] > 0) {
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
    989e:	8f ef       	ldi	r24, 0xFF	; 255
    98a0:	80 93 f6 04 	sts	0x04F6, r24
    98a4:	2f ef       	ldi	r18, 0xFF	; 255
    98a6:	38 2f       	mov	r19, r24
    98a8:	97 ce       	rjmp	.-722    	; 0x95d8 <irCommTasks+0xe16>
					//updateBlueLed(0);
				}
				irCommMaxSensorValueCurrTemp[irCommMaxSensorValueCurrIndexTemp] = irCommMaxSensorValueCurr[irCommRxMaxSensor];
				irCommMaxSensorValueCurrIndexTemp++;
				
				if(irCommMinSensorValueCurrIndexTemp>1) {
    98aa:	a4 2f       	mov	r26, r20
    98ac:	b0 e0       	ldi	r27, 0x00	; 0
    98ae:	4f 5f       	subi	r20, 0xFF	; 255
    98b0:	92 c9       	rjmp	.-3292   	; 0x8bd6 <irCommTasks+0x414>
					//updateBlueLed(0);
				}
				irCommRxMaxDiffTemp[irCommRxMaxDiffIndexTemp] = irCommRxMaxDiff;
				irCommRxMaxDiffIndexTemp++;
				
				if(irCommMaxSensorValueCurrIndexTemp>1) {
    98b2:	04 2f       	mov	r16, r20
    98b4:	10 e0       	ldi	r17, 0x00	; 0
    98b6:	64 2f       	mov	r22, r20
    98b8:	6f 5f       	subi	r22, 0xFF	; 255
    98ba:	72 c9       	rjmp	.-3356   	; 0x8ba0 <irCommTasks+0x3de>
					//updateBlueLed(0);
				}
				irCommRxMaxSensorTemp[irCommRxMaxSensorIndexTemp] = irCommRxMaxSensor;
				irCommRxMaxSensorIndexTemp++;
					
				if(irCommRxMaxDiffIndexTemp>1) {
    98bc:	64 2f       	mov	r22, r20
    98be:	70 e0       	ldi	r23, 0x00	; 0
    98c0:	4f 5f       	subi	r20, 0xFF	; 255
    98c2:	5a c9       	rjmp	.-3404   	; 0x8b78 <irCommTasks+0x3b6>
						irCommRxMaxDiff = irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i];
						irCommRxMaxSensor = i;
					}
				}

				if(irCommRxMaxSensorIndexTemp>1) {
    98c4:	62 2f       	mov	r22, r18
    98c6:	70 e0       	ldi	r23, 0x00	; 0
    98c8:	42 2f       	mov	r20, r18
    98ca:	4f 5f       	subi	r20, 0xFF	; 255
    98cc:	40 c9       	rjmp	.-3456   	; 0x8b4e <irCommTasks+0x38c>
						
				// start counting number of switch around mean signal
				if(irCommMaxSensorSignal[0] > 0) {
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
    98ce:	8f ef       	ldi	r24, 0xFF	; 255
    98d0:	80 93 f6 04 	sts	0x04F6, r24
    98d4:	2f ef       	ldi	r18, 0xFF	; 255
    98d6:	38 2f       	mov	r19, r24
    98d8:	f4 ce       	rjmp	.-536    	; 0x96c2 <irCommTasks+0xf00>
					//if(irCommRxStartBitDetected == 1) {	// signal becomes too low to be reliable...or something else happened				
					//	irCommState = IRCOMM_RX_DEBUG;
					//	irCommAdcRxState = 12;
					//	updateGreenLed(0);
					//} else {
						irCommRxStartBitDetected = 0;
    98da:	10 92 02 05 	sts	0x0502, r1
    98de:	69 cf       	rjmp	.-302    	; 0x97b2 <irCommTasks+0xff0>
					break;

				}

				if(irCommRxBitReceivedIndexTemp>9) {
					irCommRxBitReceivedIndexTemp = 9;
    98e0:	89 e0       	ldi	r24, 0x09	; 9
    98e2:	80 93 e6 04 	sts	0x04E6, r24
					updateRedLed(0);
    98e6:	80 e0       	ldi	r24, 0x00	; 0
    98e8:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <updateRedLed>
    98ec:	90 91 e6 04 	lds	r25, 0x04E6
    98f0:	80 91 f8 04 	lds	r24, 0x04F8
    98f4:	e8 2f       	mov	r30, r24
    98f6:	f0 e0       	ldi	r31, 0x00	; 0
    98f8:	ef 5b       	subi	r30, 0xBF	; 191
    98fa:	fa 4f       	sbci	r31, 0xFA	; 250
    98fc:	20 81       	ld	r18, Z
    98fe:	15 cf       	rjmp	.-470    	; 0x972a <irCommTasks+0xf68>
					}
				}
				// check whether we received either a "0" or a "1"
				if(irCommSwitchCount >= (IRCOMM_BIT0_SWITCH_COUNT-2)) {
					irCommRxBitReceived[irCommRxBitCount] = 0;
					if(irCommRxBitCount<8) {	// do not consider the crc for byte interpretation
    9900:	20 e0       	ldi	r18, 0x00	; 0
    9902:	0e cf       	rjmp	.-484    	; 0x9720 <irCommTasks+0xf5e>

				setGreenLed(irCommRxBitCount, 1);

				irCommRxBitCount++;
				if(irCommRxBitCount == 10) {	// received 8 bit of data + 2 bit of crc
					irCommState = IRCOMM_RX_CHECK_CRC;
    9904:	87 e0       	ldi	r24, 0x07	; 7
    9906:	80 93 c7 04 	sts	0x04C7, r24

					if(irCommStateIndexTemp>13) {
    990a:	80 91 e3 04 	lds	r24, 0x04E3
    990e:	8e 30       	cpi	r24, 0x0E	; 14
    9910:	08 f4       	brcc	.+2      	; 0x9914 <irCommTasks+0x1152>
    9912:	82 c9       	rjmp	.-3324   	; 0x8c18 <irCommTasks+0x456>
    9914:	25 cf       	rjmp	.-438    	; 0x9760 <irCommTasks+0xf9e>
							break;
						}
					}
				} else {
					if(irCommRxStartBitDetected==1) {
						if(irCommSwitchCount==2) {
    9916:	20 91 f7 04 	lds	r18, 0x04F7
    991a:	22 30       	cpi	r18, 0x02	; 2
    991c:	09 f4       	brne	.+2      	; 0x9920 <irCommTasks+0x115e>
    991e:	ef c0       	rjmp	.+478    	; 0x9afe <irCommTasks+0x133c>
							irCommShiftCounter = 0;
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else if(irCommSwitchCount==1) {
    9920:	21 30       	cpi	r18, 0x01	; 1
    9922:	09 f4       	brne	.+2      	; 0x9926 <irCommTasks+0x1164>
    9924:	2f c1       	rjmp	.+606    	; 0x9b84 <irCommTasks+0x13c2>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_WAITING_BIT;
						} else {
							irCommRxStartBitDetected = 0;
    9926:	10 92 02 05 	sts	0x0502, r1
							currentProx = 0;
    992a:	10 92 24 02 	sts	0x0224, r1
							adcSaveDataTo = SKIP_SAMPLE;
    992e:	85 e0       	ldi	r24, 0x05	; 5
    9930:	80 93 b9 02 	sts	0x02B9, r24
							adcSamplingState = 0;
    9934:	10 92 ba 02 	sts	0x02BA, r1
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    9938:	10 92 c6 04 	sts	0x04C6, r1
							irCommState = IRCOMM_RX_IDLE_STATE;	
    993c:	90 93 c7 04 	sts	0x04C7, r25

							if(irCommSyncStateIndexTemp>1) {
    9940:	80 91 e4 04 	lds	r24, 0x04E4
    9944:	82 30       	cpi	r24, 0x02	; 2
    9946:	38 f0       	brcs	.+14     	; 0x9956 <irCommTasks+0x1194>
								irCommSyncStateIndexTemp = 1;
    9948:	90 93 e4 04 	sts	0x04E4, r25
								updateRedLed(0);
    994c:	80 e0       	ldi	r24, 0x00	; 0
    994e:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <updateRedLed>
    9952:	80 91 e4 04 	lds	r24, 0x04E4
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 13;
    9956:	e8 2f       	mov	r30, r24
    9958:	f0 e0       	ldi	r31, 0x00	; 0
    995a:	e5 5b       	subi	r30, 0xB5	; 181
    995c:	fa 4f       	sbci	r31, 0xFA	; 250
    995e:	9d e0       	ldi	r25, 0x0D	; 13
    9960:	90 83       	st	Z, r25
							irCommSyncStateIndexTemp++;
    9962:	8f 5f       	subi	r24, 0xFF	; 255
    9964:	80 93 e4 04 	sts	0x04E4, r24
							//irCommState = IRCOMM_RX_DEBUG;
							//irCommAdcRxState = 12;
							//updateRedLed(0);
							//break;

							resetDebugVariables();				
    9968:	0e 94 38 43 	call	0x8670	; 0x8670 <resetDebugVariables>
							break;
    996c:	0c 94 fc 43 	jmp	0x87f8	; 0x87f8 <irCommTasks+0x36>
					if(irCommRxBitCount<8) {	// do not consider the crc for byte interpretation
						irCommRxByte = irCommRxByte<<1;	// bit0, only shift
					}
				} else if(irCommSwitchCount >= (IRCOMM_BIT1_SWITCH_COUNT-1)) {
					irCommRxBitReceived[irCommRxBitCount] = 1;
					if(irCommRxBitCount<8) {	// do not consider the crc for byte interpretation
    9970:	21 e0       	ldi	r18, 0x01	; 1
    9972:	d6 ce       	rjmp	.-596    	; 0x9720 <irCommTasks+0xf5e>
							resetDebugVariables();				
							break;
						}
					} else {
						if(irCommSwitchCount==2) {
							if(irCommSyncStateIndexTemp>1) {
    9974:	80 91 e4 04 	lds	r24, 0x04E4
    9978:	82 30       	cpi	r24, 0x02	; 2
    997a:	40 f0       	brcs	.+16     	; 0x998c <irCommTasks+0x11ca>
								irCommSyncStateIndexTemp = 1;
    997c:	81 e0       	ldi	r24, 0x01	; 1
    997e:	80 93 e4 04 	sts	0x04E4, r24
								updateRedLed(0);
    9982:	80 e0       	ldi	r24, 0x00	; 0
    9984:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <updateRedLed>
    9988:	80 91 e4 04 	lds	r24, 0x04E4
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 1;
    998c:	e8 2f       	mov	r30, r24
    998e:	f0 e0       	ldi	r31, 0x00	; 0
    9990:	e5 5b       	subi	r30, 0xB5	; 181
    9992:	fa 4f       	sbci	r31, 0xFA	; 250
    9994:	91 e0       	ldi	r25, 0x01	; 1
						if(irCommSwitchCount==2) {
							if(irCommSyncStateIndexTemp>1) {
								irCommSyncStateIndexTemp = 1;
								updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 5;
    9996:	90 83       	st	Z, r25
							irCommSyncStateIndexTemp++;
    9998:	8f 5f       	subi	r24, 0xFF	; 255
    999a:	80 93 e4 04 	sts	0x04E4, r24

							irCommShiftCount = IRCOMM_SAMPLING_WINDOW/2 + irCommShiftCount;
    999e:	80 91 f2 04 	lds	r24, 0x04F2
    99a2:	86 5f       	subi	r24, 0xF6	; 246
    99a4:	80 93 f2 04 	sts	0x04F2, r24
							irCommRxPeakHighToLow = 0;
    99a8:	10 92 03 05 	sts	0x0503, r1
							irCommRxStartBitDetected = 0;
    99ac:	10 92 02 05 	sts	0x0502, r1
							irCommSecondBitSkipped = 0;
    99b0:	10 92 fb 04 	sts	0x04FB, r1
							irCommShiftCounter = 0;
    99b4:	10 92 fc 04 	sts	0x04FC, r1
							irCommRxBitCount = 0;	
    99b8:	10 92 f8 04 	sts	0x04F8, r1
							irCommRxCrc = 0;	
    99bc:	10 92 e9 04 	sts	0x04E9, r1
							irCommRxByte = 0;
    99c0:	10 92 fa 04 	sts	0x04FA, r1
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
    99c4:	84 e0       	ldi	r24, 0x04	; 4
    99c6:	80 93 c7 04 	sts	0x04C7, r24
							break;				
						}
					}
				}
	
				if(irCommStateIndexTemp>13) {
    99ca:	80 91 e3 04 	lds	r24, 0x04E3
    99ce:	8e 30       	cpi	r24, 0x0E	; 14
    99d0:	c0 f5       	brcc	.+112    	; 0x9a42 <irCommTasks+0x1280>
					irCommStateIndexTemp = 13;
					updateRedLed(0);
				}
				irCommStateTemp[irCommStateIndexTemp] = irCommState;
    99d2:	90 91 c7 04 	lds	r25, 0x04C7
    99d6:	e8 2f       	mov	r30, r24
    99d8:	f0 e0       	ldi	r31, 0x00	; 0
    99da:	e3 5e       	subi	r30, 0xE3	; 227
    99dc:	fa 4f       	sbci	r31, 0xFA	; 250
    99de:	90 83       	st	Z, r25
				irCommStateIndexTemp++;
    99e0:	8f 5f       	subi	r24, 0xFF	; 255
    99e2:	80 93 e3 04 	sts	0x04E3, r24
				
				if(irCommShiftCountFinalIndexTemp>1) {
    99e6:	80 91 dd 04 	lds	r24, 0x04DD
    99ea:	82 30       	cpi	r24, 0x02	; 2
    99ec:	40 f0       	brcs	.+16     	; 0x99fe <irCommTasks+0x123c>
					irCommShiftCountFinalIndexTemp = 1;
    99ee:	81 e0       	ldi	r24, 0x01	; 1
    99f0:	80 93 dd 04 	sts	0x04DD, r24
					updateRedLed(0);
    99f4:	80 e0       	ldi	r24, 0x00	; 0
    99f6:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <updateRedLed>
    99fa:	80 91 dd 04 	lds	r24, 0x04DD
				}
				irCommShiftCountFinalTemp[irCommShiftCountFinalIndexTemp] = irCommShiftCount;
    99fe:	e8 2f       	mov	r30, r24
    9a00:	f0 e0       	ldi	r31, 0x00	; 0
    9a02:	e8 5e       	subi	r30, 0xE8	; 232
    9a04:	f4 4f       	sbci	r31, 0xF4	; 244
    9a06:	90 91 f2 04 	lds	r25, 0x04F2
    9a0a:	90 83       	st	Z, r25
				irCommShiftCountFinalIndexTemp++;
    9a0c:	8f 5f       	subi	r24, 0xFF	; 255
    9a0e:	80 93 dd 04 	sts	0x04DD, r24
				
				if(irCommRxStartBitDetectedIndexTemp>1) {
    9a12:	80 91 e2 04 	lds	r24, 0x04E2
    9a16:	82 30       	cpi	r24, 0x02	; 2
    9a18:	40 f0       	brcs	.+16     	; 0x9a2a <irCommTasks+0x1268>
					irCommRxStartBitDetectedIndexTemp = 1;
    9a1a:	81 e0       	ldi	r24, 0x01	; 1
    9a1c:	80 93 e2 04 	sts	0x04E2, r24
					updateRedLed(0);
    9a20:	80 e0       	ldi	r24, 0x00	; 0
    9a22:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <updateRedLed>
    9a26:	80 91 e2 04 	lds	r24, 0x04E2
				}
				irCommRxStartBitDetectedTemp[irCommRxStartBitDetectedIndexTemp] = irCommRxStartBitDetected;
    9a2a:	e8 2f       	mov	r30, r24
    9a2c:	f0 e0       	ldi	r31, 0x00	; 0
    9a2e:	ea 5a       	subi	r30, 0xAA	; 170
    9a30:	fa 4f       	sbci	r31, 0xFA	; 250
    9a32:	90 91 02 05 	lds	r25, 0x0502
    9a36:	90 83       	st	Z, r25
				irCommRxStartBitDetectedIndexTemp++;			
    9a38:	8f 5f       	subi	r24, 0xFF	; 255
    9a3a:	80 93 e2 04 	sts	0x04E2, r24
					usart0Transmit(irCommState,1);					
				}
				updateBlueLed(255);
				*/

				break;
    9a3e:	0c 94 fc 43 	jmp	0x87f8	; 0x87f8 <irCommTasks+0x36>
						}
					}
				}
	
				if(irCommStateIndexTemp>13) {
					irCommStateIndexTemp = 13;
    9a42:	8d e0       	ldi	r24, 0x0D	; 13
    9a44:	80 93 e3 04 	sts	0x04E3, r24
					updateRedLed(0);
    9a48:	80 e0       	ldi	r24, 0x00	; 0
    9a4a:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <updateRedLed>
    9a4e:	80 91 e3 04 	lds	r24, 0x04E3
    9a52:	bf cf       	rjmp	.-130    	; 0x99d2 <irCommTasks+0x1210>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else if(irCommSwitchCount==1) {
							if(irCommRxStartPeakDuration > IRCOMM_SAMPLING_WINDOW/2) {
    9a54:	80 91 04 05 	lds	r24, 0x0504
    9a58:	8b 30       	cpi	r24, 0x0B	; 11
    9a5a:	08 f4       	brcc	.+2      	; 0x9a5e <irCommTasks+0x129c>
    9a5c:	7b c0       	rjmp	.+246    	; 0x9b54 <irCommTasks+0x1392>
								currentProx = 0;
    9a5e:	10 92 24 02 	sts	0x0224, r1
								adcSaveDataTo = SKIP_SAMPLE;
    9a62:	85 e0       	ldi	r24, 0x05	; 5
    9a64:	80 93 b9 02 	sts	0x02B9, r24
								adcSamplingState = 0;
    9a68:	10 92 ba 02 	sts	0x02BA, r1
								irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;								
    9a6c:	10 92 c6 04 	sts	0x04C6, r1
								irCommState = IRCOMM_RX_IDLE_STATE;
    9a70:	90 93 c7 04 	sts	0x04C7, r25

								if(irCommSyncStateIndexTemp>1) {
    9a74:	80 91 e4 04 	lds	r24, 0x04E4
    9a78:	82 30       	cpi	r24, 0x02	; 2
    9a7a:	38 f0       	brcs	.+14     	; 0x9a8a <irCommTasks+0x12c8>
									irCommSyncStateIndexTemp = 1;
    9a7c:	90 93 e4 04 	sts	0x04E4, r25
									updateRedLed(0);
    9a80:	80 e0       	ldi	r24, 0x00	; 0
    9a82:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <updateRedLed>
    9a86:	80 91 e4 04 	lds	r24, 0x04E4
								}
								irCommSyncStateTemp[irCommSyncStateIndexTemp] = 14;
    9a8a:	e8 2f       	mov	r30, r24
    9a8c:	f0 e0       	ldi	r31, 0x00	; 0
    9a8e:	e5 5b       	subi	r30, 0xB5	; 181
    9a90:	fa 4f       	sbci	r31, 0xFA	; 250
    9a92:	9e e0       	ldi	r25, 0x0E	; 14
    9a94:	90 83       	st	Z, r25
								irCommSyncStateIndexTemp++;
    9a96:	8f 5f       	subi	r24, 0xFF	; 255
    9a98:	80 93 e4 04 	sts	0x04E4, r24
								//irCommState = IRCOMM_RX_DEBUG;
								//irCommAdcRxState = 12;
								//updateRedLed(0);
								//break;

								resetDebugVariables();				
    9a9c:	0e 94 38 43 	call	0x8670	; 0x8670 <resetDebugVariables>
								break;
    9aa0:	0c 94 fc 43 	jmp	0x87f8	; 0x87f8 <irCommTasks+0x36>
				

				turnOffGreenLeds();
				if(irCommRxPeakHighToLow==1) {
					if(irCommRxStartBitDetected==1) {
						if(irCommSwitchCount==2) {
    9aa4:	90 91 f7 04 	lds	r25, 0x04F7
    9aa8:	92 30       	cpi	r25, 0x02	; 2
    9aaa:	09 f4       	brne	.+2      	; 0x9aae <irCommTasks+0x12ec>
    9aac:	e4 c0       	rjmp	.+456    	; 0x9c76 <irCommTasks+0x14b4>
							irCommShiftCounter = 0;
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_WAITING_BIT;
						} else if(irCommSwitchCount==1) {
    9aae:	91 30       	cpi	r25, 0x01	; 1
    9ab0:	09 f4       	brne	.+2      	; 0x9ab4 <irCommTasks+0x12f2>
    9ab2:	cc c0       	rjmp	.+408    	; 0x9c4c <irCommTasks+0x148a>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else {
							irCommRxStartBitDetected = 0;
    9ab4:	10 92 02 05 	sts	0x0502, r1
							currentProx = 0;
    9ab8:	10 92 24 02 	sts	0x0224, r1
							adcSaveDataTo = SKIP_SAMPLE;
    9abc:	85 e0       	ldi	r24, 0x05	; 5
    9abe:	80 93 b9 02 	sts	0x02B9, r24
							adcSamplingState = 0;
    9ac2:	10 92 ba 02 	sts	0x02BA, r1
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    9ac6:	10 92 c6 04 	sts	0x04C6, r1
							irCommState = IRCOMM_RX_IDLE_STATE;	
    9aca:	20 93 c7 04 	sts	0x04C7, r18

							if(irCommSyncStateIndexTemp>1) {
    9ace:	80 91 e4 04 	lds	r24, 0x04E4
    9ad2:	82 30       	cpi	r24, 0x02	; 2
    9ad4:	38 f0       	brcs	.+14     	; 0x9ae4 <irCommTasks+0x1322>
								irCommSyncStateIndexTemp = 1;
    9ad6:	20 93 e4 04 	sts	0x04E4, r18
								updateRedLed(0);
    9ada:	80 e0       	ldi	r24, 0x00	; 0
    9adc:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <updateRedLed>
    9ae0:	80 91 e4 04 	lds	r24, 0x04E4
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 12;
    9ae4:	e8 2f       	mov	r30, r24
    9ae6:	f0 e0       	ldi	r31, 0x00	; 0
    9ae8:	e5 5b       	subi	r30, 0xB5	; 181
    9aea:	fa 4f       	sbci	r31, 0xFA	; 250
    9aec:	9c e0       	ldi	r25, 0x0C	; 12
    9aee:	90 83       	st	Z, r25
							irCommSyncStateIndexTemp++;
    9af0:	8f 5f       	subi	r24, 0xFF	; 255
    9af2:	80 93 e4 04 	sts	0x04E4, r24
							//irCommState = IRCOMM_RX_DEBUG;
							//irCommAdcRxState = 12;
							//updateRedLed(0);
							//break;

							resetDebugVariables();				
    9af6:	0e 94 38 43 	call	0x8670	; 0x8670 <resetDebugVariables>
							break;
    9afa:	0c 94 fc 43 	jmp	0x87f8	; 0x87f8 <irCommTasks+0x36>
						}
					}
				} else {
					if(irCommRxStartBitDetected==1) {
						if(irCommSwitchCount==2) {
							if(irCommSyncStateIndexTemp>1) {
    9afe:	80 91 e4 04 	lds	r24, 0x04E4
    9b02:	82 30       	cpi	r24, 0x02	; 2
    9b04:	38 f0       	brcs	.+14     	; 0x9b14 <irCommTasks+0x1352>
								irCommSyncStateIndexTemp = 1;
    9b06:	90 93 e4 04 	sts	0x04E4, r25
								updateRedLed(0);
    9b0a:	80 e0       	ldi	r24, 0x00	; 0
    9b0c:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <updateRedLed>
    9b10:	80 91 e4 04 	lds	r24, 0x04E4
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 5;
    9b14:	e8 2f       	mov	r30, r24
    9b16:	f0 e0       	ldi	r31, 0x00	; 0
    9b18:	e5 5b       	subi	r30, 0xB5	; 181
    9b1a:	fa 4f       	sbci	r31, 0xFA	; 250
    9b1c:	95 e0       	ldi	r25, 0x05	; 5
    9b1e:	3b cf       	rjmp	.-394    	; 0x9996 <irCommTasks+0x11d4>
							resetDebugVariables();				
							break;
						}
					} else {
						if(irCommSwitchCount==2) {
							if(irCommSyncStateIndexTemp>1) {
    9b20:	80 91 e4 04 	lds	r24, 0x04E4
    9b24:	82 30       	cpi	r24, 0x02	; 2
    9b26:	38 f0       	brcs	.+14     	; 0x9b36 <irCommTasks+0x1374>
								irCommSyncStateIndexTemp = 1;
    9b28:	90 93 e4 04 	sts	0x04E4, r25
								updateRedLed(0);
    9b2c:	80 e0       	ldi	r24, 0x00	; 0
    9b2e:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <updateRedLed>
    9b32:	80 91 e4 04 	lds	r24, 0x04E4
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 3;
    9b36:	e8 2f       	mov	r30, r24
    9b38:	f0 e0       	ldi	r31, 0x00	; 0
    9b3a:	e5 5b       	subi	r30, 0xB5	; 181
    9b3c:	fa 4f       	sbci	r31, 0xFA	; 250
    9b3e:	93 e0       	ldi	r25, 0x03	; 3
    9b40:	90 83       	st	Z, r25
							irCommSyncStateIndexTemp++;
    9b42:	8f 5f       	subi	r24, 0xFF	; 255
    9b44:	80 93 e4 04 	sts	0x04E4, r24

							irCommShiftCount = IRCOMM_SAMPLING_WINDOW + irCommShiftCount;
    9b48:	80 91 f2 04 	lds	r24, 0x04F2
    9b4c:	8c 5e       	subi	r24, 0xEC	; 236
    9b4e:	80 93 f2 04 	sts	0x04F2, r24
    9b52:	2a cf       	rjmp	.-428    	; 0x99a8 <irCommTasks+0x11e6>
								//break;

								resetDebugVariables();				
								break;
							} else {
								if(irCommSyncStateIndexTemp>1) {
    9b54:	80 91 e4 04 	lds	r24, 0x04E4
    9b58:	82 30       	cpi	r24, 0x02	; 2
    9b5a:	38 f0       	brcs	.+14     	; 0x9b6a <irCommTasks+0x13a8>
									irCommSyncStateIndexTemp = 1;
    9b5c:	90 93 e4 04 	sts	0x04E4, r25
									updateRedLed(0);
    9b60:	80 e0       	ldi	r24, 0x00	; 0
    9b62:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <updateRedLed>
    9b66:	80 91 e4 04 	lds	r24, 0x04E4
								}
								irCommSyncStateTemp[irCommSyncStateIndexTemp] = 7;
    9b6a:	e8 2f       	mov	r30, r24
    9b6c:	f0 e0       	ldi	r31, 0x00	; 0
    9b6e:	e5 5b       	subi	r30, 0xB5	; 181
    9b70:	fa 4f       	sbci	r31, 0xFA	; 250
    9b72:	97 e0       	ldi	r25, 0x07	; 7
    9b74:	90 83       	st	Z, r25
								irCommSyncStateIndexTemp++;
    9b76:	8f 5f       	subi	r24, 0xFF	; 255
    9b78:	80 93 e4 04 	sts	0x04E4, r24

								irCommShiftCount = IRCOMM_SAMPLING_WINDOW;
    9b7c:	84 e1       	ldi	r24, 0x14	; 20
    9b7e:	80 93 f2 04 	sts	0x04F2, r24
    9b82:	12 cf       	rjmp	.-476    	; 0x99a8 <irCommTasks+0x11e6>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else if(irCommSwitchCount==1) {
							if(irCommSyncStateIndexTemp>1) {
    9b84:	80 91 e4 04 	lds	r24, 0x04E4
    9b88:	82 30       	cpi	r24, 0x02	; 2
    9b8a:	38 f0       	brcs	.+14     	; 0x9b9a <irCommTasks+0x13d8>
								irCommSyncStateIndexTemp = 1;
    9b8c:	20 93 e4 04 	sts	0x04E4, r18
								updateRedLed(0);
    9b90:	80 e0       	ldi	r24, 0x00	; 0
    9b92:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <updateRedLed>
    9b96:	80 91 e4 04 	lds	r24, 0x04E4
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 8;
    9b9a:	e8 2f       	mov	r30, r24
    9b9c:	f0 e0       	ldi	r31, 0x00	; 0
    9b9e:	e5 5b       	subi	r30, 0xB5	; 181
    9ba0:	fa 4f       	sbci	r31, 0xFA	; 250
    9ba2:	98 e0       	ldi	r25, 0x08	; 8
    9ba4:	90 83       	st	Z, r25
							irCommSyncStateIndexTemp++;
    9ba6:	8f 5f       	subi	r24, 0xFF	; 255
    9ba8:	80 93 e4 04 	sts	0x04E4, r24

							irCommShiftCount = 0;
    9bac:	10 92 f2 04 	sts	0x04F2, r1
							irCommRxPeakHighToLow = 0;
    9bb0:	10 92 03 05 	sts	0x0503, r1
							irCommRxStartBitDetected = 0;
    9bb4:	10 92 02 05 	sts	0x0502, r1
							irCommSecondBitSkipped = 0;
    9bb8:	10 92 fb 04 	sts	0x04FB, r1
							irCommShiftCounter = 0;
    9bbc:	10 92 fc 04 	sts	0x04FC, r1
							irCommRxBitCount = 0;	
    9bc0:	10 92 f8 04 	sts	0x04F8, r1
							irCommRxCrc = 0;	
    9bc4:	10 92 e9 04 	sts	0x04E9, r1
							irCommRxByte = 0;
    9bc8:	10 92 fa 04 	sts	0x04FA, r1
							irCommState = IRCOMM_RX_WAITING_BIT;
    9bcc:	85 e0       	ldi	r24, 0x05	; 5
    9bce:	80 93 c7 04 	sts	0x04C7, r24
    9bd2:	fb ce       	rjmp	.-522    	; 0x99ca <irCommTasks+0x1208>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else if(irCommSwitchCount==1) {		
							irCommRxStartBitDetected = 1;					
    9bd4:	20 93 02 05 	sts	0x0502, r18
							if(irCommRxStartPeakDuration > IRCOMM_SAMPLING_WINDOW/2) {
    9bd8:	80 91 04 05 	lds	r24, 0x0504
    9bdc:	8b 30       	cpi	r24, 0x0B	; 11
    9bde:	28 f1       	brcs	.+74     	; 0x9c2a <irCommTasks+0x1468>
								if(irCommSyncStateIndexTemp>1) {
    9be0:	80 91 e4 04 	lds	r24, 0x04E4
    9be4:	82 30       	cpi	r24, 0x02	; 2
    9be6:	38 f0       	brcs	.+14     	; 0x9bf6 <irCommTasks+0x1434>
									irCommSyncStateIndexTemp = 1;
    9be8:	20 93 e4 04 	sts	0x04E4, r18
									updateRedLed(0);
    9bec:	80 e0       	ldi	r24, 0x00	; 0
    9bee:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <updateRedLed>
    9bf2:	80 91 e4 04 	lds	r24, 0x04E4
								}
								irCommSyncStateTemp[irCommSyncStateIndexTemp] = 4;
    9bf6:	e8 2f       	mov	r30, r24
    9bf8:	f0 e0       	ldi	r31, 0x00	; 0
    9bfa:	e5 5b       	subi	r30, 0xB5	; 181
    9bfc:	fa 4f       	sbci	r31, 0xFA	; 250
    9bfe:	94 e0       	ldi	r25, 0x04	; 4
    9c00:	90 83       	st	Z, r25
								irCommSyncStateIndexTemp++;
    9c02:	8f 5f       	subi	r24, 0xFF	; 255
    9c04:	80 93 e4 04 	sts	0x04E4, r24

								//irCommShiftCount = irCommShiftCount;
								irCommRxPeakHighToLow = 0;
    9c08:	10 92 03 05 	sts	0x0503, r1
								irCommRxStartBitDetected = 0;
    9c0c:	10 92 02 05 	sts	0x0502, r1
								irCommSecondBitSkipped = 0;
    9c10:	10 92 fb 04 	sts	0x04FB, r1
								irCommShiftCounter = 0;
    9c14:	10 92 fc 04 	sts	0x04FC, r1
								irCommRxBitCount = 0;	
    9c18:	10 92 f8 04 	sts	0x04F8, r1
								irCommRxCrc = 0;	
    9c1c:	10 92 e9 04 	sts	0x04E9, r1
								irCommRxByte = 0;
    9c20:	10 92 fa 04 	sts	0x04FA, r1
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
    9c24:	90 93 c7 04 	sts	0x04C7, r25
    9c28:	d0 ce       	rjmp	.-608    	; 0x99ca <irCommTasks+0x1208>
							} else {
								currentProx = 0;
    9c2a:	10 92 24 02 	sts	0x0224, r1
								adcSaveDataTo = SKIP_SAMPLE;
    9c2e:	85 e0       	ldi	r24, 0x05	; 5
    9c30:	80 93 b9 02 	sts	0x02B9, r24
								adcSamplingState = 0;
    9c34:	10 92 ba 02 	sts	0x02BA, r1
								irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;								
    9c38:	10 92 c6 04 	sts	0x04C6, r1
								irCommState = IRCOMM_RX_IDLE_STATE;
    9c3c:	20 93 c7 04 	sts	0x04C7, r18

								irCommSyncStateIndexTemp++;
    9c40:	80 91 e4 04 	lds	r24, 0x04E4
    9c44:	8f 5f       	subi	r24, 0xFF	; 255
    9c46:	80 93 e4 04 	sts	0x04E4, r24
    9c4a:	bf ce       	rjmp	.-642    	; 0x99ca <irCommTasks+0x1208>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_WAITING_BIT;
						} else if(irCommSwitchCount==1) {
							if(irCommSyncStateIndexTemp>1) {
    9c4c:	80 91 e4 04 	lds	r24, 0x04E4
    9c50:	82 30       	cpi	r24, 0x02	; 2
    9c52:	38 f0       	brcs	.+14     	; 0x9c62 <irCommTasks+0x14a0>
								irCommSyncStateIndexTemp = 1;
    9c54:	90 93 e4 04 	sts	0x04E4, r25
								updateRedLed(0);
    9c58:	80 e0       	ldi	r24, 0x00	; 0
    9c5a:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <updateRedLed>
    9c5e:	80 91 e4 04 	lds	r24, 0x04E4
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 2;
    9c62:	e8 2f       	mov	r30, r24
    9c64:	f0 e0       	ldi	r31, 0x00	; 0
    9c66:	e5 5b       	subi	r30, 0xB5	; 181
    9c68:	fa 4f       	sbci	r31, 0xFA	; 250
    9c6a:	92 e0       	ldi	r25, 0x02	; 2
    9c6c:	90 83       	st	Z, r25
							irCommSyncStateIndexTemp++;
    9c6e:	8f 5f       	subi	r24, 0xFF	; 255
    9c70:	80 93 e4 04 	sts	0x04E4, r24
    9c74:	99 ce       	rjmp	.-718    	; 0x99a8 <irCommTasks+0x11e6>

				turnOffGreenLeds();
				if(irCommRxPeakHighToLow==1) {
					if(irCommRxStartBitDetected==1) {
						if(irCommSwitchCount==2) {
							if(irCommSyncStateIndexTemp>1) {
    9c76:	80 91 e4 04 	lds	r24, 0x04E4
    9c7a:	82 30       	cpi	r24, 0x02	; 2
    9c7c:	38 f0       	brcs	.+14     	; 0x9c8c <irCommTasks+0x14ca>
								irCommSyncStateIndexTemp = 1;
    9c7e:	20 93 e4 04 	sts	0x04E4, r18
								updateRedLed(0);
    9c82:	80 e0       	ldi	r24, 0x00	; 0
    9c84:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <updateRedLed>
    9c88:	80 91 e4 04 	lds	r24, 0x04E4
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 6;
    9c8c:	e8 2f       	mov	r30, r24
    9c8e:	f0 e0       	ldi	r31, 0x00	; 0
    9c90:	e5 5b       	subi	r30, 0xB5	; 181
    9c92:	fa 4f       	sbci	r31, 0xFA	; 250
    9c94:	96 e0       	ldi	r25, 0x06	; 6
    9c96:	86 cf       	rjmp	.-244    	; 0x9ba4 <irCommTasks+0x13e2>

00009c98 <irCommSendData>:

}


void irCommSendData(unsigned char value, unsigned char sensorMask) {
	irCommTxByte = value;
    9c98:	80 93 06 05 	sts	0x0506, r24
	irCommTxByteEnqueued = 1;
    9c9c:	81 e0       	ldi	r24, 0x01	; 1
    9c9e:	80 93 07 05 	sts	0x0507, r24
	irCommTxSensorMask = sensorMask;
    9ca2:	60 93 14 05 	sts	0x0514, r22
	irCommEnabledNext = IRCOMM_MODE_TRANSMIT;
    9ca6:	82 e0       	ldi	r24, 0x02	; 2
    9ca8:	80 93 c5 04 	sts	0x04C5, r24
}
    9cac:	08 95       	ret

00009cae <irCommDataSent>:

unsigned char irCommDataSent() {
	if(irCommTxByteEnqueued==1) {
		return 0;
    9cae:	81 e0       	ldi	r24, 0x01	; 1
    9cb0:	90 91 07 05 	lds	r25, 0x0507
    9cb4:	91 30       	cpi	r25, 0x01	; 1
    9cb6:	09 f0       	breq	.+2      	; 0x9cba <irCommDataSent+0xc>
	} else {
		return 1;
	}
}
    9cb8:	08 95       	ret
	irCommEnabledNext = IRCOMM_MODE_TRANSMIT;
}

unsigned char irCommDataSent() {
	if(irCommTxByteEnqueued==1) {
		return 0;
    9cba:	80 e0       	ldi	r24, 0x00	; 0
	} else {
		return 1;
	}
}
    9cbc:	08 95       	ret

00009cbe <irCommDataAvailable>:

unsigned char irCommDataAvailable() {
	return irCommRxDataAvailable;
}
    9cbe:	80 91 00 05 	lds	r24, 0x0500
    9cc2:	08 95       	ret

00009cc4 <irCommReadData>:

unsigned char irCommReadData() {
	irCommRxDataAvailable = 0;
    9cc4:	10 92 00 05 	sts	0x0500, r1
	return irCommRxLastDataReceived;
}
    9cc8:	80 91 ff 04 	lds	r24, 0x04FF
    9ccc:	08 95       	ret

00009cce <irCommReceivingSensor>:

signed char irCommReceivingSensor() {
	return irCommRxReceivingSensor;
}
    9cce:	80 91 18 02 	lds	r24, 0x0218
    9cd2:	08 95       	ret

00009cd4 <__subsf3>:
    9cd4:	50 58       	subi	r21, 0x80	; 128

00009cd6 <__addsf3>:
    9cd6:	bb 27       	eor	r27, r27
    9cd8:	aa 27       	eor	r26, r26
    9cda:	0e d0       	rcall	.+28     	; 0x9cf8 <__addsf3x>
    9cdc:	27 c2       	rjmp	.+1102   	; 0xa12c <__fp_round>
    9cde:	f0 d1       	rcall	.+992    	; 0xa0c0 <__fp_pscA>
    9ce0:	30 f0       	brcs	.+12     	; 0x9cee <__addsf3+0x18>
    9ce2:	f5 d1       	rcall	.+1002   	; 0xa0ce <__fp_pscB>
    9ce4:	20 f0       	brcs	.+8      	; 0x9cee <__addsf3+0x18>
    9ce6:	31 f4       	brne	.+12     	; 0x9cf4 <__addsf3+0x1e>
    9ce8:	9f 3f       	cpi	r25, 0xFF	; 255
    9cea:	11 f4       	brne	.+4      	; 0x9cf0 <__addsf3+0x1a>
    9cec:	1e f4       	brtc	.+6      	; 0x9cf4 <__addsf3+0x1e>
    9cee:	c0 c1       	rjmp	.+896    	; 0xa070 <__fp_nan>
    9cf0:	0e f4       	brtc	.+2      	; 0x9cf4 <__addsf3+0x1e>
    9cf2:	e0 95       	com	r30
    9cf4:	e7 fb       	bst	r30, 7
    9cf6:	b6 c1       	rjmp	.+876    	; 0xa064 <__fp_inf>

00009cf8 <__addsf3x>:
    9cf8:	e9 2f       	mov	r30, r25
    9cfa:	3a d2       	rcall	.+1140   	; 0xa170 <__fp_split3>
    9cfc:	80 f3       	brcs	.-32     	; 0x9cde <__addsf3+0x8>
    9cfe:	ba 17       	cp	r27, r26
    9d00:	62 07       	cpc	r22, r18
    9d02:	73 07       	cpc	r23, r19
    9d04:	84 07       	cpc	r24, r20
    9d06:	95 07       	cpc	r25, r21
    9d08:	18 f0       	brcs	.+6      	; 0x9d10 <__addsf3x+0x18>
    9d0a:	71 f4       	brne	.+28     	; 0x9d28 <__addsf3x+0x30>
    9d0c:	9e f5       	brtc	.+102    	; 0x9d74 <__addsf3x+0x7c>
    9d0e:	52 c2       	rjmp	.+1188   	; 0xa1b4 <__fp_zero>
    9d10:	0e f4       	brtc	.+2      	; 0x9d14 <__addsf3x+0x1c>
    9d12:	e0 95       	com	r30
    9d14:	0b 2e       	mov	r0, r27
    9d16:	ba 2f       	mov	r27, r26
    9d18:	a0 2d       	mov	r26, r0
    9d1a:	0b 01       	movw	r0, r22
    9d1c:	b9 01       	movw	r22, r18
    9d1e:	90 01       	movw	r18, r0
    9d20:	0c 01       	movw	r0, r24
    9d22:	ca 01       	movw	r24, r20
    9d24:	a0 01       	movw	r20, r0
    9d26:	11 24       	eor	r1, r1
    9d28:	ff 27       	eor	r31, r31
    9d2a:	59 1b       	sub	r21, r25
    9d2c:	99 f0       	breq	.+38     	; 0x9d54 <__addsf3x+0x5c>
    9d2e:	59 3f       	cpi	r21, 0xF9	; 249
    9d30:	50 f4       	brcc	.+20     	; 0x9d46 <__addsf3x+0x4e>
    9d32:	50 3e       	cpi	r21, 0xE0	; 224
    9d34:	68 f1       	brcs	.+90     	; 0x9d90 <__addsf3x+0x98>
    9d36:	1a 16       	cp	r1, r26
    9d38:	f0 40       	sbci	r31, 0x00	; 0
    9d3a:	a2 2f       	mov	r26, r18
    9d3c:	23 2f       	mov	r18, r19
    9d3e:	34 2f       	mov	r19, r20
    9d40:	44 27       	eor	r20, r20
    9d42:	58 5f       	subi	r21, 0xF8	; 248
    9d44:	f3 cf       	rjmp	.-26     	; 0x9d2c <__addsf3x+0x34>
    9d46:	46 95       	lsr	r20
    9d48:	37 95       	ror	r19
    9d4a:	27 95       	ror	r18
    9d4c:	a7 95       	ror	r26
    9d4e:	f0 40       	sbci	r31, 0x00	; 0
    9d50:	53 95       	inc	r21
    9d52:	c9 f7       	brne	.-14     	; 0x9d46 <__addsf3x+0x4e>
    9d54:	7e f4       	brtc	.+30     	; 0x9d74 <__addsf3x+0x7c>
    9d56:	1f 16       	cp	r1, r31
    9d58:	ba 0b       	sbc	r27, r26
    9d5a:	62 0b       	sbc	r22, r18
    9d5c:	73 0b       	sbc	r23, r19
    9d5e:	84 0b       	sbc	r24, r20
    9d60:	ba f0       	brmi	.+46     	; 0x9d90 <__addsf3x+0x98>
    9d62:	91 50       	subi	r25, 0x01	; 1
    9d64:	a1 f0       	breq	.+40     	; 0x9d8e <__addsf3x+0x96>
    9d66:	ff 0f       	add	r31, r31
    9d68:	bb 1f       	adc	r27, r27
    9d6a:	66 1f       	adc	r22, r22
    9d6c:	77 1f       	adc	r23, r23
    9d6e:	88 1f       	adc	r24, r24
    9d70:	c2 f7       	brpl	.-16     	; 0x9d62 <__addsf3x+0x6a>
    9d72:	0e c0       	rjmp	.+28     	; 0x9d90 <__addsf3x+0x98>
    9d74:	ba 0f       	add	r27, r26
    9d76:	62 1f       	adc	r22, r18
    9d78:	73 1f       	adc	r23, r19
    9d7a:	84 1f       	adc	r24, r20
    9d7c:	48 f4       	brcc	.+18     	; 0x9d90 <__addsf3x+0x98>
    9d7e:	87 95       	ror	r24
    9d80:	77 95       	ror	r23
    9d82:	67 95       	ror	r22
    9d84:	b7 95       	ror	r27
    9d86:	f7 95       	ror	r31
    9d88:	9e 3f       	cpi	r25, 0xFE	; 254
    9d8a:	08 f0       	brcs	.+2      	; 0x9d8e <__addsf3x+0x96>
    9d8c:	b3 cf       	rjmp	.-154    	; 0x9cf4 <__addsf3+0x1e>
    9d8e:	93 95       	inc	r25
    9d90:	88 0f       	add	r24, r24
    9d92:	08 f0       	brcs	.+2      	; 0x9d96 <__addsf3x+0x9e>
    9d94:	99 27       	eor	r25, r25
    9d96:	ee 0f       	add	r30, r30
    9d98:	97 95       	ror	r25
    9d9a:	87 95       	ror	r24
    9d9c:	08 95       	ret
    9d9e:	90 d1       	rcall	.+800    	; 0xa0c0 <__fp_pscA>
    9da0:	58 f0       	brcs	.+22     	; 0x9db8 <__addsf3x+0xc0>
    9da2:	80 e8       	ldi	r24, 0x80	; 128
    9da4:	91 e0       	ldi	r25, 0x01	; 1
    9da6:	09 f4       	brne	.+2      	; 0x9daa <__addsf3x+0xb2>
    9da8:	9e ef       	ldi	r25, 0xFE	; 254
    9daa:	91 d1       	rcall	.+802    	; 0xa0ce <__fp_pscB>
    9dac:	28 f0       	brcs	.+10     	; 0x9db8 <__addsf3x+0xc0>
    9dae:	40 e8       	ldi	r20, 0x80	; 128
    9db0:	51 e0       	ldi	r21, 0x01	; 1
    9db2:	59 f4       	brne	.+22     	; 0x9dca <atan2+0xe>
    9db4:	5e ef       	ldi	r21, 0xFE	; 254
    9db6:	09 c0       	rjmp	.+18     	; 0x9dca <atan2+0xe>
    9db8:	5b c1       	rjmp	.+694    	; 0xa070 <__fp_nan>
    9dba:	fc c1       	rjmp	.+1016   	; 0xa1b4 <__fp_zero>

00009dbc <atan2>:
    9dbc:	e9 2f       	mov	r30, r25
    9dbe:	e0 78       	andi	r30, 0x80	; 128
    9dc0:	d7 d1       	rcall	.+942    	; 0xa170 <__fp_split3>
    9dc2:	68 f3       	brcs	.-38     	; 0x9d9e <__addsf3x+0xa6>
    9dc4:	09 2e       	mov	r0, r25
    9dc6:	05 2a       	or	r0, r21
    9dc8:	c1 f3       	breq	.-16     	; 0x9dba <__addsf3x+0xc2>
    9dca:	26 17       	cp	r18, r22
    9dcc:	37 07       	cpc	r19, r23
    9dce:	48 07       	cpc	r20, r24
    9dd0:	59 07       	cpc	r21, r25
    9dd2:	38 f0       	brcs	.+14     	; 0x9de2 <atan2+0x26>
    9dd4:	0e 2e       	mov	r0, r30
    9dd6:	07 f8       	bld	r0, 7
    9dd8:	e0 25       	eor	r30, r0
    9dda:	69 f0       	breq	.+26     	; 0x9df6 <atan2+0x3a>
    9ddc:	e0 25       	eor	r30, r0
    9dde:	e0 64       	ori	r30, 0x40	; 64
    9de0:	0a c0       	rjmp	.+20     	; 0x9df6 <atan2+0x3a>
    9de2:	ef 63       	ori	r30, 0x3F	; 63
    9de4:	07 f8       	bld	r0, 7
    9de6:	00 94       	com	r0
    9de8:	07 fa       	bst	r0, 7
    9dea:	db 01       	movw	r26, r22
    9dec:	b9 01       	movw	r22, r18
    9dee:	9d 01       	movw	r18, r26
    9df0:	dc 01       	movw	r26, r24
    9df2:	ca 01       	movw	r24, r20
    9df4:	ad 01       	movw	r20, r26
    9df6:	ef 93       	push	r30
    9df8:	4a d0       	rcall	.+148    	; 0x9e8e <__divsf3_pse>
    9dfa:	98 d1       	rcall	.+816    	; 0xa12c <__fp_round>
    9dfc:	0a d0       	rcall	.+20     	; 0x9e12 <atan>
    9dfe:	5f 91       	pop	r21
    9e00:	55 23       	and	r21, r21
    9e02:	31 f0       	breq	.+12     	; 0x9e10 <atan2+0x54>
    9e04:	2b ed       	ldi	r18, 0xDB	; 219
    9e06:	3f e0       	ldi	r19, 0x0F	; 15
    9e08:	49 e4       	ldi	r20, 0x49	; 73
    9e0a:	50 fd       	sbrc	r21, 0
    9e0c:	49 ec       	ldi	r20, 0xC9	; 201
    9e0e:	63 cf       	rjmp	.-314    	; 0x9cd6 <__addsf3>
    9e10:	08 95       	ret

00009e12 <atan>:
    9e12:	df 93       	push	r29
    9e14:	dd 27       	eor	r29, r29
    9e16:	b9 2f       	mov	r27, r25
    9e18:	bf 77       	andi	r27, 0x7F	; 127
    9e1a:	40 e8       	ldi	r20, 0x80	; 128
    9e1c:	5f e3       	ldi	r21, 0x3F	; 63
    9e1e:	16 16       	cp	r1, r22
    9e20:	17 06       	cpc	r1, r23
    9e22:	48 07       	cpc	r20, r24
    9e24:	5b 07       	cpc	r21, r27
    9e26:	10 f4       	brcc	.+4      	; 0x9e2c <atan+0x1a>
    9e28:	d9 2f       	mov	r29, r25
    9e2a:	cb d1       	rcall	.+918    	; 0xa1c2 <inverse>
    9e2c:	9f 93       	push	r25
    9e2e:	8f 93       	push	r24
    9e30:	7f 93       	push	r23
    9e32:	6f 93       	push	r22
    9e34:	36 d2       	rcall	.+1132   	; 0xa2a2 <square>
    9e36:	ee e4       	ldi	r30, 0x4E	; 78
    9e38:	f1 e0       	ldi	r31, 0x01	; 1
    9e3a:	1d d1       	rcall	.+570    	; 0xa076 <__fp_powser>
    9e3c:	77 d1       	rcall	.+750    	; 0xa12c <__fp_round>
    9e3e:	2f 91       	pop	r18
    9e40:	3f 91       	pop	r19
    9e42:	4f 91       	pop	r20
    9e44:	5f 91       	pop	r21
    9e46:	d0 d1       	rcall	.+928    	; 0xa1e8 <__mulsf3x>
    9e48:	dd 23       	and	r29, r29
    9e4a:	49 f0       	breq	.+18     	; 0x9e5e <atan+0x4c>
    9e4c:	90 58       	subi	r25, 0x80	; 128
    9e4e:	a2 ea       	ldi	r26, 0xA2	; 162
    9e50:	2a ed       	ldi	r18, 0xDA	; 218
    9e52:	3f e0       	ldi	r19, 0x0F	; 15
    9e54:	49 ec       	ldi	r20, 0xC9	; 201
    9e56:	5f e3       	ldi	r21, 0x3F	; 63
    9e58:	d0 78       	andi	r29, 0x80	; 128
    9e5a:	5d 27       	eor	r21, r29
    9e5c:	4d df       	rcall	.-358    	; 0x9cf8 <__addsf3x>
    9e5e:	df 91       	pop	r29
    9e60:	65 c1       	rjmp	.+714    	; 0xa12c <__fp_round>

00009e62 <__cmpsf2>:
    9e62:	dc d0       	rcall	.+440    	; 0xa01c <__fp_cmp>
    9e64:	08 f4       	brcc	.+2      	; 0x9e68 <__cmpsf2+0x6>
    9e66:	81 e0       	ldi	r24, 0x01	; 1
    9e68:	08 95       	ret

00009e6a <cos>:
    9e6a:	39 d1       	rcall	.+626    	; 0xa0de <__fp_rempio2>
    9e6c:	e3 95       	inc	r30
    9e6e:	6f c1       	rjmp	.+734    	; 0xa14e <__fp_sinus>

00009e70 <__divsf3>:
    9e70:	0c d0       	rcall	.+24     	; 0x9e8a <__divsf3x>
    9e72:	5c c1       	rjmp	.+696    	; 0xa12c <__fp_round>
    9e74:	2c d1       	rcall	.+600    	; 0xa0ce <__fp_pscB>
    9e76:	40 f0       	brcs	.+16     	; 0x9e88 <__divsf3+0x18>
    9e78:	23 d1       	rcall	.+582    	; 0xa0c0 <__fp_pscA>
    9e7a:	30 f0       	brcs	.+12     	; 0x9e88 <__divsf3+0x18>
    9e7c:	21 f4       	brne	.+8      	; 0x9e86 <__divsf3+0x16>
    9e7e:	5f 3f       	cpi	r21, 0xFF	; 255
    9e80:	19 f0       	breq	.+6      	; 0x9e88 <__divsf3+0x18>
    9e82:	f0 c0       	rjmp	.+480    	; 0xa064 <__fp_inf>
    9e84:	51 11       	cpse	r21, r1
    9e86:	97 c1       	rjmp	.+814    	; 0xa1b6 <__fp_szero>
    9e88:	f3 c0       	rjmp	.+486    	; 0xa070 <__fp_nan>

00009e8a <__divsf3x>:
    9e8a:	72 d1       	rcall	.+740    	; 0xa170 <__fp_split3>
    9e8c:	98 f3       	brcs	.-26     	; 0x9e74 <__divsf3+0x4>

00009e8e <__divsf3_pse>:
    9e8e:	99 23       	and	r25, r25
    9e90:	c9 f3       	breq	.-14     	; 0x9e84 <__divsf3+0x14>
    9e92:	55 23       	and	r21, r21
    9e94:	b1 f3       	breq	.-20     	; 0x9e82 <__divsf3+0x12>
    9e96:	95 1b       	sub	r25, r21
    9e98:	55 0b       	sbc	r21, r21
    9e9a:	bb 27       	eor	r27, r27
    9e9c:	aa 27       	eor	r26, r26
    9e9e:	62 17       	cp	r22, r18
    9ea0:	73 07       	cpc	r23, r19
    9ea2:	84 07       	cpc	r24, r20
    9ea4:	38 f0       	brcs	.+14     	; 0x9eb4 <__divsf3_pse+0x26>
    9ea6:	9f 5f       	subi	r25, 0xFF	; 255
    9ea8:	5f 4f       	sbci	r21, 0xFF	; 255
    9eaa:	22 0f       	add	r18, r18
    9eac:	33 1f       	adc	r19, r19
    9eae:	44 1f       	adc	r20, r20
    9eb0:	aa 1f       	adc	r26, r26
    9eb2:	a9 f3       	breq	.-22     	; 0x9e9e <__divsf3_pse+0x10>
    9eb4:	33 d0       	rcall	.+102    	; 0x9f1c <__divsf3_pse+0x8e>
    9eb6:	0e 2e       	mov	r0, r30
    9eb8:	3a f0       	brmi	.+14     	; 0x9ec8 <__divsf3_pse+0x3a>
    9eba:	e0 e8       	ldi	r30, 0x80	; 128
    9ebc:	30 d0       	rcall	.+96     	; 0x9f1e <__divsf3_pse+0x90>
    9ebe:	91 50       	subi	r25, 0x01	; 1
    9ec0:	50 40       	sbci	r21, 0x00	; 0
    9ec2:	e6 95       	lsr	r30
    9ec4:	00 1c       	adc	r0, r0
    9ec6:	ca f7       	brpl	.-14     	; 0x9eba <__divsf3_pse+0x2c>
    9ec8:	29 d0       	rcall	.+82     	; 0x9f1c <__divsf3_pse+0x8e>
    9eca:	fe 2f       	mov	r31, r30
    9ecc:	27 d0       	rcall	.+78     	; 0x9f1c <__divsf3_pse+0x8e>
    9ece:	66 0f       	add	r22, r22
    9ed0:	77 1f       	adc	r23, r23
    9ed2:	88 1f       	adc	r24, r24
    9ed4:	bb 1f       	adc	r27, r27
    9ed6:	26 17       	cp	r18, r22
    9ed8:	37 07       	cpc	r19, r23
    9eda:	48 07       	cpc	r20, r24
    9edc:	ab 07       	cpc	r26, r27
    9ede:	b0 e8       	ldi	r27, 0x80	; 128
    9ee0:	09 f0       	breq	.+2      	; 0x9ee4 <__divsf3_pse+0x56>
    9ee2:	bb 0b       	sbc	r27, r27
    9ee4:	80 2d       	mov	r24, r0
    9ee6:	bf 01       	movw	r22, r30
    9ee8:	ff 27       	eor	r31, r31
    9eea:	93 58       	subi	r25, 0x83	; 131
    9eec:	5f 4f       	sbci	r21, 0xFF	; 255
    9eee:	2a f0       	brmi	.+10     	; 0x9efa <__divsf3_pse+0x6c>
    9ef0:	9e 3f       	cpi	r25, 0xFE	; 254
    9ef2:	51 05       	cpc	r21, r1
    9ef4:	68 f0       	brcs	.+26     	; 0x9f10 <__divsf3_pse+0x82>
    9ef6:	b6 c0       	rjmp	.+364    	; 0xa064 <__fp_inf>
    9ef8:	5e c1       	rjmp	.+700    	; 0xa1b6 <__fp_szero>
    9efa:	5f 3f       	cpi	r21, 0xFF	; 255
    9efc:	ec f3       	brlt	.-6      	; 0x9ef8 <__divsf3_pse+0x6a>
    9efe:	98 3e       	cpi	r25, 0xE8	; 232
    9f00:	dc f3       	brlt	.-10     	; 0x9ef8 <__divsf3_pse+0x6a>
    9f02:	86 95       	lsr	r24
    9f04:	77 95       	ror	r23
    9f06:	67 95       	ror	r22
    9f08:	b7 95       	ror	r27
    9f0a:	f7 95       	ror	r31
    9f0c:	9f 5f       	subi	r25, 0xFF	; 255
    9f0e:	c9 f7       	brne	.-14     	; 0x9f02 <__divsf3_pse+0x74>
    9f10:	88 0f       	add	r24, r24
    9f12:	91 1d       	adc	r25, r1
    9f14:	96 95       	lsr	r25
    9f16:	87 95       	ror	r24
    9f18:	97 f9       	bld	r25, 7
    9f1a:	08 95       	ret
    9f1c:	e1 e0       	ldi	r30, 0x01	; 1
    9f1e:	66 0f       	add	r22, r22
    9f20:	77 1f       	adc	r23, r23
    9f22:	88 1f       	adc	r24, r24
    9f24:	bb 1f       	adc	r27, r27
    9f26:	62 17       	cp	r22, r18
    9f28:	73 07       	cpc	r23, r19
    9f2a:	84 07       	cpc	r24, r20
    9f2c:	ba 07       	cpc	r27, r26
    9f2e:	20 f0       	brcs	.+8      	; 0x9f38 <__divsf3_pse+0xaa>
    9f30:	62 1b       	sub	r22, r18
    9f32:	73 0b       	sbc	r23, r19
    9f34:	84 0b       	sbc	r24, r20
    9f36:	ba 0b       	sbc	r27, r26
    9f38:	ee 1f       	adc	r30, r30
    9f3a:	88 f7       	brcc	.-30     	; 0x9f1e <__divsf3_pse+0x90>
    9f3c:	e0 95       	com	r30
    9f3e:	08 95       	ret

00009f40 <__fixsfsi>:
    9f40:	04 d0       	rcall	.+8      	; 0x9f4a <__fixunssfsi>
    9f42:	68 94       	set
    9f44:	b1 11       	cpse	r27, r1
    9f46:	37 c1       	rjmp	.+622    	; 0xa1b6 <__fp_szero>
    9f48:	08 95       	ret

00009f4a <__fixunssfsi>:
    9f4a:	1a d1       	rcall	.+564    	; 0xa180 <__fp_splitA>
    9f4c:	88 f0       	brcs	.+34     	; 0x9f70 <__fixunssfsi+0x26>
    9f4e:	9f 57       	subi	r25, 0x7F	; 127
    9f50:	90 f0       	brcs	.+36     	; 0x9f76 <__fixunssfsi+0x2c>
    9f52:	b9 2f       	mov	r27, r25
    9f54:	99 27       	eor	r25, r25
    9f56:	b7 51       	subi	r27, 0x17	; 23
    9f58:	a0 f0       	brcs	.+40     	; 0x9f82 <__fixunssfsi+0x38>
    9f5a:	d1 f0       	breq	.+52     	; 0x9f90 <__fixunssfsi+0x46>
    9f5c:	66 0f       	add	r22, r22
    9f5e:	77 1f       	adc	r23, r23
    9f60:	88 1f       	adc	r24, r24
    9f62:	99 1f       	adc	r25, r25
    9f64:	1a f0       	brmi	.+6      	; 0x9f6c <__fixunssfsi+0x22>
    9f66:	ba 95       	dec	r27
    9f68:	c9 f7       	brne	.-14     	; 0x9f5c <__fixunssfsi+0x12>
    9f6a:	12 c0       	rjmp	.+36     	; 0x9f90 <__fixunssfsi+0x46>
    9f6c:	b1 30       	cpi	r27, 0x01	; 1
    9f6e:	81 f0       	breq	.+32     	; 0x9f90 <__fixunssfsi+0x46>
    9f70:	21 d1       	rcall	.+578    	; 0xa1b4 <__fp_zero>
    9f72:	b1 e0       	ldi	r27, 0x01	; 1
    9f74:	08 95       	ret
    9f76:	1e c1       	rjmp	.+572    	; 0xa1b4 <__fp_zero>
    9f78:	67 2f       	mov	r22, r23
    9f7a:	78 2f       	mov	r23, r24
    9f7c:	88 27       	eor	r24, r24
    9f7e:	b8 5f       	subi	r27, 0xF8	; 248
    9f80:	39 f0       	breq	.+14     	; 0x9f90 <__fixunssfsi+0x46>
    9f82:	b9 3f       	cpi	r27, 0xF9	; 249
    9f84:	cc f3       	brlt	.-14     	; 0x9f78 <__fixunssfsi+0x2e>
    9f86:	86 95       	lsr	r24
    9f88:	77 95       	ror	r23
    9f8a:	67 95       	ror	r22
    9f8c:	b3 95       	inc	r27
    9f8e:	d9 f7       	brne	.-10     	; 0x9f86 <__fixunssfsi+0x3c>
    9f90:	3e f4       	brtc	.+14     	; 0x9fa0 <__fixunssfsi+0x56>
    9f92:	90 95       	com	r25
    9f94:	80 95       	com	r24
    9f96:	70 95       	com	r23
    9f98:	61 95       	neg	r22
    9f9a:	7f 4f       	sbci	r23, 0xFF	; 255
    9f9c:	8f 4f       	sbci	r24, 0xFF	; 255
    9f9e:	9f 4f       	sbci	r25, 0xFF	; 255
    9fa0:	08 95       	ret

00009fa2 <__floatunsisf>:
    9fa2:	e8 94       	clt
    9fa4:	09 c0       	rjmp	.+18     	; 0x9fb8 <__floatsisf+0x12>

00009fa6 <__floatsisf>:
    9fa6:	97 fb       	bst	r25, 7
    9fa8:	3e f4       	brtc	.+14     	; 0x9fb8 <__floatsisf+0x12>
    9faa:	90 95       	com	r25
    9fac:	80 95       	com	r24
    9fae:	70 95       	com	r23
    9fb0:	61 95       	neg	r22
    9fb2:	7f 4f       	sbci	r23, 0xFF	; 255
    9fb4:	8f 4f       	sbci	r24, 0xFF	; 255
    9fb6:	9f 4f       	sbci	r25, 0xFF	; 255
    9fb8:	99 23       	and	r25, r25
    9fba:	a9 f0       	breq	.+42     	; 0x9fe6 <__floatsisf+0x40>
    9fbc:	f9 2f       	mov	r31, r25
    9fbe:	96 e9       	ldi	r25, 0x96	; 150
    9fc0:	bb 27       	eor	r27, r27
    9fc2:	93 95       	inc	r25
    9fc4:	f6 95       	lsr	r31
    9fc6:	87 95       	ror	r24
    9fc8:	77 95       	ror	r23
    9fca:	67 95       	ror	r22
    9fcc:	b7 95       	ror	r27
    9fce:	f1 11       	cpse	r31, r1
    9fd0:	f8 cf       	rjmp	.-16     	; 0x9fc2 <__floatsisf+0x1c>
    9fd2:	fa f4       	brpl	.+62     	; 0xa012 <__floatsisf+0x6c>
    9fd4:	bb 0f       	add	r27, r27
    9fd6:	11 f4       	brne	.+4      	; 0x9fdc <__floatsisf+0x36>
    9fd8:	60 ff       	sbrs	r22, 0
    9fda:	1b c0       	rjmp	.+54     	; 0xa012 <__floatsisf+0x6c>
    9fdc:	6f 5f       	subi	r22, 0xFF	; 255
    9fde:	7f 4f       	sbci	r23, 0xFF	; 255
    9fe0:	8f 4f       	sbci	r24, 0xFF	; 255
    9fe2:	9f 4f       	sbci	r25, 0xFF	; 255
    9fe4:	16 c0       	rjmp	.+44     	; 0xa012 <__floatsisf+0x6c>
    9fe6:	88 23       	and	r24, r24
    9fe8:	11 f0       	breq	.+4      	; 0x9fee <__floatsisf+0x48>
    9fea:	96 e9       	ldi	r25, 0x96	; 150
    9fec:	11 c0       	rjmp	.+34     	; 0xa010 <__floatsisf+0x6a>
    9fee:	77 23       	and	r23, r23
    9ff0:	21 f0       	breq	.+8      	; 0x9ffa <__floatsisf+0x54>
    9ff2:	9e e8       	ldi	r25, 0x8E	; 142
    9ff4:	87 2f       	mov	r24, r23
    9ff6:	76 2f       	mov	r23, r22
    9ff8:	05 c0       	rjmp	.+10     	; 0xa004 <__floatsisf+0x5e>
    9ffa:	66 23       	and	r22, r22
    9ffc:	71 f0       	breq	.+28     	; 0xa01a <__floatsisf+0x74>
    9ffe:	96 e8       	ldi	r25, 0x86	; 134
    a000:	86 2f       	mov	r24, r22
    a002:	70 e0       	ldi	r23, 0x00	; 0
    a004:	60 e0       	ldi	r22, 0x00	; 0
    a006:	2a f0       	brmi	.+10     	; 0xa012 <__floatsisf+0x6c>
    a008:	9a 95       	dec	r25
    a00a:	66 0f       	add	r22, r22
    a00c:	77 1f       	adc	r23, r23
    a00e:	88 1f       	adc	r24, r24
    a010:	da f7       	brpl	.-10     	; 0xa008 <__floatsisf+0x62>
    a012:	88 0f       	add	r24, r24
    a014:	96 95       	lsr	r25
    a016:	87 95       	ror	r24
    a018:	97 f9       	bld	r25, 7
    a01a:	08 95       	ret

0000a01c <__fp_cmp>:
    a01c:	99 0f       	add	r25, r25
    a01e:	00 08       	sbc	r0, r0
    a020:	55 0f       	add	r21, r21
    a022:	aa 0b       	sbc	r26, r26
    a024:	e0 e8       	ldi	r30, 0x80	; 128
    a026:	fe ef       	ldi	r31, 0xFE	; 254
    a028:	16 16       	cp	r1, r22
    a02a:	17 06       	cpc	r1, r23
    a02c:	e8 07       	cpc	r30, r24
    a02e:	f9 07       	cpc	r31, r25
    a030:	c0 f0       	brcs	.+48     	; 0xa062 <__fp_cmp+0x46>
    a032:	12 16       	cp	r1, r18
    a034:	13 06       	cpc	r1, r19
    a036:	e4 07       	cpc	r30, r20
    a038:	f5 07       	cpc	r31, r21
    a03a:	98 f0       	brcs	.+38     	; 0xa062 <__fp_cmp+0x46>
    a03c:	62 1b       	sub	r22, r18
    a03e:	73 0b       	sbc	r23, r19
    a040:	84 0b       	sbc	r24, r20
    a042:	95 0b       	sbc	r25, r21
    a044:	39 f4       	brne	.+14     	; 0xa054 <__fp_cmp+0x38>
    a046:	0a 26       	eor	r0, r26
    a048:	61 f0       	breq	.+24     	; 0xa062 <__fp_cmp+0x46>
    a04a:	23 2b       	or	r18, r19
    a04c:	24 2b       	or	r18, r20
    a04e:	25 2b       	or	r18, r21
    a050:	21 f4       	brne	.+8      	; 0xa05a <__fp_cmp+0x3e>
    a052:	08 95       	ret
    a054:	0a 26       	eor	r0, r26
    a056:	09 f4       	brne	.+2      	; 0xa05a <__fp_cmp+0x3e>
    a058:	a1 40       	sbci	r26, 0x01	; 1
    a05a:	a6 95       	lsr	r26
    a05c:	8f ef       	ldi	r24, 0xFF	; 255
    a05e:	81 1d       	adc	r24, r1
    a060:	81 1d       	adc	r24, r1
    a062:	08 95       	ret

0000a064 <__fp_inf>:
    a064:	97 f9       	bld	r25, 7
    a066:	9f 67       	ori	r25, 0x7F	; 127
    a068:	80 e8       	ldi	r24, 0x80	; 128
    a06a:	70 e0       	ldi	r23, 0x00	; 0
    a06c:	60 e0       	ldi	r22, 0x00	; 0
    a06e:	08 95       	ret

0000a070 <__fp_nan>:
    a070:	9f ef       	ldi	r25, 0xFF	; 255
    a072:	80 ec       	ldi	r24, 0xC0	; 192
    a074:	08 95       	ret

0000a076 <__fp_powser>:
    a076:	df 93       	push	r29
    a078:	cf 93       	push	r28
    a07a:	1f 93       	push	r17
    a07c:	0f 93       	push	r16
    a07e:	ff 92       	push	r15
    a080:	ef 92       	push	r14
    a082:	df 92       	push	r13
    a084:	7b 01       	movw	r14, r22
    a086:	8c 01       	movw	r16, r24
    a088:	68 94       	set
    a08a:	05 c0       	rjmp	.+10     	; 0xa096 <__fp_powser+0x20>
    a08c:	da 2e       	mov	r13, r26
    a08e:	ef 01       	movw	r28, r30
    a090:	ab d0       	rcall	.+342    	; 0xa1e8 <__mulsf3x>
    a092:	fe 01       	movw	r30, r28
    a094:	e8 94       	clt
    a096:	a5 91       	lpm	r26, Z+
    a098:	25 91       	lpm	r18, Z+
    a09a:	35 91       	lpm	r19, Z+
    a09c:	45 91       	lpm	r20, Z+
    a09e:	55 91       	lpm	r21, Z+
    a0a0:	ae f3       	brts	.-22     	; 0xa08c <__fp_powser+0x16>
    a0a2:	ef 01       	movw	r28, r30
    a0a4:	29 de       	rcall	.-942    	; 0x9cf8 <__addsf3x>
    a0a6:	fe 01       	movw	r30, r28
    a0a8:	97 01       	movw	r18, r14
    a0aa:	a8 01       	movw	r20, r16
    a0ac:	da 94       	dec	r13
    a0ae:	79 f7       	brne	.-34     	; 0xa08e <__fp_powser+0x18>
    a0b0:	df 90       	pop	r13
    a0b2:	ef 90       	pop	r14
    a0b4:	ff 90       	pop	r15
    a0b6:	0f 91       	pop	r16
    a0b8:	1f 91       	pop	r17
    a0ba:	cf 91       	pop	r28
    a0bc:	df 91       	pop	r29
    a0be:	08 95       	ret

0000a0c0 <__fp_pscA>:
    a0c0:	00 24       	eor	r0, r0
    a0c2:	0a 94       	dec	r0
    a0c4:	16 16       	cp	r1, r22
    a0c6:	17 06       	cpc	r1, r23
    a0c8:	18 06       	cpc	r1, r24
    a0ca:	09 06       	cpc	r0, r25
    a0cc:	08 95       	ret

0000a0ce <__fp_pscB>:
    a0ce:	00 24       	eor	r0, r0
    a0d0:	0a 94       	dec	r0
    a0d2:	12 16       	cp	r1, r18
    a0d4:	13 06       	cpc	r1, r19
    a0d6:	14 06       	cpc	r1, r20
    a0d8:	05 06       	cpc	r0, r21
    a0da:	08 95       	ret
    a0dc:	c9 cf       	rjmp	.-110    	; 0xa070 <__fp_nan>

0000a0de <__fp_rempio2>:
    a0de:	50 d0       	rcall	.+160    	; 0xa180 <__fp_splitA>
    a0e0:	e8 f3       	brcs	.-6      	; 0xa0dc <__fp_pscB+0xe>
    a0e2:	e8 94       	clt
    a0e4:	e0 e0       	ldi	r30, 0x00	; 0
    a0e6:	bb 27       	eor	r27, r27
    a0e8:	9f 57       	subi	r25, 0x7F	; 127
    a0ea:	f0 f0       	brcs	.+60     	; 0xa128 <__fp_rempio2+0x4a>
    a0ec:	2a ed       	ldi	r18, 0xDA	; 218
    a0ee:	3f e0       	ldi	r19, 0x0F	; 15
    a0f0:	49 ec       	ldi	r20, 0xC9	; 201
    a0f2:	06 c0       	rjmp	.+12     	; 0xa100 <__fp_rempio2+0x22>
    a0f4:	ee 0f       	add	r30, r30
    a0f6:	bb 0f       	add	r27, r27
    a0f8:	66 1f       	adc	r22, r22
    a0fa:	77 1f       	adc	r23, r23
    a0fc:	88 1f       	adc	r24, r24
    a0fe:	28 f0       	brcs	.+10     	; 0xa10a <__fp_rempio2+0x2c>
    a100:	b2 3a       	cpi	r27, 0xA2	; 162
    a102:	62 07       	cpc	r22, r18
    a104:	73 07       	cpc	r23, r19
    a106:	84 07       	cpc	r24, r20
    a108:	28 f0       	brcs	.+10     	; 0xa114 <__fp_rempio2+0x36>
    a10a:	b2 5a       	subi	r27, 0xA2	; 162
    a10c:	62 0b       	sbc	r22, r18
    a10e:	73 0b       	sbc	r23, r19
    a110:	84 0b       	sbc	r24, r20
    a112:	e3 95       	inc	r30
    a114:	9a 95       	dec	r25
    a116:	72 f7       	brpl	.-36     	; 0xa0f4 <__fp_rempio2+0x16>
    a118:	80 38       	cpi	r24, 0x80	; 128
    a11a:	30 f4       	brcc	.+12     	; 0xa128 <__fp_rempio2+0x4a>
    a11c:	9a 95       	dec	r25
    a11e:	bb 0f       	add	r27, r27
    a120:	66 1f       	adc	r22, r22
    a122:	77 1f       	adc	r23, r23
    a124:	88 1f       	adc	r24, r24
    a126:	d2 f7       	brpl	.-12     	; 0xa11c <__fp_rempio2+0x3e>
    a128:	90 48       	sbci	r25, 0x80	; 128
    a12a:	c0 c0       	rjmp	.+384    	; 0xa2ac <__fp_mpack_finite>

0000a12c <__fp_round>:
    a12c:	09 2e       	mov	r0, r25
    a12e:	03 94       	inc	r0
    a130:	00 0c       	add	r0, r0
    a132:	11 f4       	brne	.+4      	; 0xa138 <__fp_round+0xc>
    a134:	88 23       	and	r24, r24
    a136:	52 f0       	brmi	.+20     	; 0xa14c <__fp_round+0x20>
    a138:	bb 0f       	add	r27, r27
    a13a:	40 f4       	brcc	.+16     	; 0xa14c <__fp_round+0x20>
    a13c:	bf 2b       	or	r27, r31
    a13e:	11 f4       	brne	.+4      	; 0xa144 <__fp_round+0x18>
    a140:	60 ff       	sbrs	r22, 0
    a142:	04 c0       	rjmp	.+8      	; 0xa14c <__fp_round+0x20>
    a144:	6f 5f       	subi	r22, 0xFF	; 255
    a146:	7f 4f       	sbci	r23, 0xFF	; 255
    a148:	8f 4f       	sbci	r24, 0xFF	; 255
    a14a:	9f 4f       	sbci	r25, 0xFF	; 255
    a14c:	08 95       	ret

0000a14e <__fp_sinus>:
    a14e:	ef 93       	push	r30
    a150:	e0 ff       	sbrs	r30, 0
    a152:	06 c0       	rjmp	.+12     	; 0xa160 <__fp_sinus+0x12>
    a154:	a2 ea       	ldi	r26, 0xA2	; 162
    a156:	2a ed       	ldi	r18, 0xDA	; 218
    a158:	3f e0       	ldi	r19, 0x0F	; 15
    a15a:	49 ec       	ldi	r20, 0xC9	; 201
    a15c:	5f eb       	ldi	r21, 0xBF	; 191
    a15e:	cc dd       	rcall	.-1128   	; 0x9cf8 <__addsf3x>
    a160:	e5 df       	rcall	.-54     	; 0xa12c <__fp_round>
    a162:	0f 90       	pop	r0
    a164:	03 94       	inc	r0
    a166:	01 fc       	sbrc	r0, 1
    a168:	90 58       	subi	r25, 0x80	; 128
    a16a:	eb e7       	ldi	r30, 0x7B	; 123
    a16c:	f1 e0       	ldi	r31, 0x01	; 1
    a16e:	aa c0       	rjmp	.+340    	; 0xa2c4 <__fp_powsodd>

0000a170 <__fp_split3>:
    a170:	57 fd       	sbrc	r21, 7
    a172:	90 58       	subi	r25, 0x80	; 128
    a174:	44 0f       	add	r20, r20
    a176:	55 1f       	adc	r21, r21
    a178:	59 f0       	breq	.+22     	; 0xa190 <__fp_splitA+0x10>
    a17a:	5f 3f       	cpi	r21, 0xFF	; 255
    a17c:	71 f0       	breq	.+28     	; 0xa19a <__fp_splitA+0x1a>
    a17e:	47 95       	ror	r20

0000a180 <__fp_splitA>:
    a180:	88 0f       	add	r24, r24
    a182:	97 fb       	bst	r25, 7
    a184:	99 1f       	adc	r25, r25
    a186:	61 f0       	breq	.+24     	; 0xa1a0 <__fp_splitA+0x20>
    a188:	9f 3f       	cpi	r25, 0xFF	; 255
    a18a:	79 f0       	breq	.+30     	; 0xa1aa <__fp_splitA+0x2a>
    a18c:	87 95       	ror	r24
    a18e:	08 95       	ret
    a190:	12 16       	cp	r1, r18
    a192:	13 06       	cpc	r1, r19
    a194:	14 06       	cpc	r1, r20
    a196:	55 1f       	adc	r21, r21
    a198:	f2 cf       	rjmp	.-28     	; 0xa17e <__fp_split3+0xe>
    a19a:	46 95       	lsr	r20
    a19c:	f1 df       	rcall	.-30     	; 0xa180 <__fp_splitA>
    a19e:	08 c0       	rjmp	.+16     	; 0xa1b0 <__fp_splitA+0x30>
    a1a0:	16 16       	cp	r1, r22
    a1a2:	17 06       	cpc	r1, r23
    a1a4:	18 06       	cpc	r1, r24
    a1a6:	99 1f       	adc	r25, r25
    a1a8:	f1 cf       	rjmp	.-30     	; 0xa18c <__fp_splitA+0xc>
    a1aa:	86 95       	lsr	r24
    a1ac:	71 05       	cpc	r23, r1
    a1ae:	61 05       	cpc	r22, r1
    a1b0:	08 94       	sec
    a1b2:	08 95       	ret

0000a1b4 <__fp_zero>:
    a1b4:	e8 94       	clt

0000a1b6 <__fp_szero>:
    a1b6:	bb 27       	eor	r27, r27
    a1b8:	66 27       	eor	r22, r22
    a1ba:	77 27       	eor	r23, r23
    a1bc:	cb 01       	movw	r24, r22
    a1be:	97 f9       	bld	r25, 7
    a1c0:	08 95       	ret

0000a1c2 <inverse>:
    a1c2:	9b 01       	movw	r18, r22
    a1c4:	ac 01       	movw	r20, r24
    a1c6:	60 e0       	ldi	r22, 0x00	; 0
    a1c8:	70 e0       	ldi	r23, 0x00	; 0
    a1ca:	80 e8       	ldi	r24, 0x80	; 128
    a1cc:	9f e3       	ldi	r25, 0x3F	; 63
    a1ce:	50 ce       	rjmp	.-864    	; 0x9e70 <__divsf3>

0000a1d0 <__mulsf3>:
    a1d0:	0b d0       	rcall	.+22     	; 0xa1e8 <__mulsf3x>
    a1d2:	ac cf       	rjmp	.-168    	; 0xa12c <__fp_round>
    a1d4:	75 df       	rcall	.-278    	; 0xa0c0 <__fp_pscA>
    a1d6:	28 f0       	brcs	.+10     	; 0xa1e2 <__mulsf3+0x12>
    a1d8:	7a df       	rcall	.-268    	; 0xa0ce <__fp_pscB>
    a1da:	18 f0       	brcs	.+6      	; 0xa1e2 <__mulsf3+0x12>
    a1dc:	95 23       	and	r25, r21
    a1de:	09 f0       	breq	.+2      	; 0xa1e2 <__mulsf3+0x12>
    a1e0:	41 cf       	rjmp	.-382    	; 0xa064 <__fp_inf>
    a1e2:	46 cf       	rjmp	.-372    	; 0xa070 <__fp_nan>
    a1e4:	11 24       	eor	r1, r1
    a1e6:	e7 cf       	rjmp	.-50     	; 0xa1b6 <__fp_szero>

0000a1e8 <__mulsf3x>:
    a1e8:	c3 df       	rcall	.-122    	; 0xa170 <__fp_split3>
    a1ea:	a0 f3       	brcs	.-24     	; 0xa1d4 <__mulsf3+0x4>

0000a1ec <__mulsf3_pse>:
    a1ec:	95 9f       	mul	r25, r21
    a1ee:	d1 f3       	breq	.-12     	; 0xa1e4 <__mulsf3+0x14>
    a1f0:	95 0f       	add	r25, r21
    a1f2:	50 e0       	ldi	r21, 0x00	; 0
    a1f4:	55 1f       	adc	r21, r21
    a1f6:	62 9f       	mul	r22, r18
    a1f8:	f0 01       	movw	r30, r0
    a1fa:	72 9f       	mul	r23, r18
    a1fc:	bb 27       	eor	r27, r27
    a1fe:	f0 0d       	add	r31, r0
    a200:	b1 1d       	adc	r27, r1
    a202:	63 9f       	mul	r22, r19
    a204:	aa 27       	eor	r26, r26
    a206:	f0 0d       	add	r31, r0
    a208:	b1 1d       	adc	r27, r1
    a20a:	aa 1f       	adc	r26, r26
    a20c:	64 9f       	mul	r22, r20
    a20e:	66 27       	eor	r22, r22
    a210:	b0 0d       	add	r27, r0
    a212:	a1 1d       	adc	r26, r1
    a214:	66 1f       	adc	r22, r22
    a216:	82 9f       	mul	r24, r18
    a218:	22 27       	eor	r18, r18
    a21a:	b0 0d       	add	r27, r0
    a21c:	a1 1d       	adc	r26, r1
    a21e:	62 1f       	adc	r22, r18
    a220:	73 9f       	mul	r23, r19
    a222:	b0 0d       	add	r27, r0
    a224:	a1 1d       	adc	r26, r1
    a226:	62 1f       	adc	r22, r18
    a228:	83 9f       	mul	r24, r19
    a22a:	a0 0d       	add	r26, r0
    a22c:	61 1d       	adc	r22, r1
    a22e:	22 1f       	adc	r18, r18
    a230:	74 9f       	mul	r23, r20
    a232:	33 27       	eor	r19, r19
    a234:	a0 0d       	add	r26, r0
    a236:	61 1d       	adc	r22, r1
    a238:	23 1f       	adc	r18, r19
    a23a:	84 9f       	mul	r24, r20
    a23c:	60 0d       	add	r22, r0
    a23e:	21 1d       	adc	r18, r1
    a240:	82 2f       	mov	r24, r18
    a242:	76 2f       	mov	r23, r22
    a244:	6a 2f       	mov	r22, r26
    a246:	11 24       	eor	r1, r1
    a248:	9f 57       	subi	r25, 0x7F	; 127
    a24a:	50 40       	sbci	r21, 0x00	; 0
    a24c:	8a f0       	brmi	.+34     	; 0xa270 <__mulsf3_pse+0x84>
    a24e:	e1 f0       	breq	.+56     	; 0xa288 <__mulsf3_pse+0x9c>
    a250:	88 23       	and	r24, r24
    a252:	4a f0       	brmi	.+18     	; 0xa266 <__mulsf3_pse+0x7a>
    a254:	ee 0f       	add	r30, r30
    a256:	ff 1f       	adc	r31, r31
    a258:	bb 1f       	adc	r27, r27
    a25a:	66 1f       	adc	r22, r22
    a25c:	77 1f       	adc	r23, r23
    a25e:	88 1f       	adc	r24, r24
    a260:	91 50       	subi	r25, 0x01	; 1
    a262:	50 40       	sbci	r21, 0x00	; 0
    a264:	a9 f7       	brne	.-22     	; 0xa250 <__mulsf3_pse+0x64>
    a266:	9e 3f       	cpi	r25, 0xFE	; 254
    a268:	51 05       	cpc	r21, r1
    a26a:	70 f0       	brcs	.+28     	; 0xa288 <__mulsf3_pse+0x9c>
    a26c:	fb ce       	rjmp	.-522    	; 0xa064 <__fp_inf>
    a26e:	a3 cf       	rjmp	.-186    	; 0xa1b6 <__fp_szero>
    a270:	5f 3f       	cpi	r21, 0xFF	; 255
    a272:	ec f3       	brlt	.-6      	; 0xa26e <__mulsf3_pse+0x82>
    a274:	98 3e       	cpi	r25, 0xE8	; 232
    a276:	dc f3       	brlt	.-10     	; 0xa26e <__mulsf3_pse+0x82>
    a278:	86 95       	lsr	r24
    a27a:	77 95       	ror	r23
    a27c:	67 95       	ror	r22
    a27e:	b7 95       	ror	r27
    a280:	f7 95       	ror	r31
    a282:	e7 95       	ror	r30
    a284:	9f 5f       	subi	r25, 0xFF	; 255
    a286:	c1 f7       	brne	.-16     	; 0xa278 <__mulsf3_pse+0x8c>
    a288:	fe 2b       	or	r31, r30
    a28a:	88 0f       	add	r24, r24
    a28c:	91 1d       	adc	r25, r1
    a28e:	96 95       	lsr	r25
    a290:	87 95       	ror	r24
    a292:	97 f9       	bld	r25, 7
    a294:	08 95       	ret

0000a296 <sin>:
    a296:	9f 93       	push	r25
    a298:	22 df       	rcall	.-444    	; 0xa0de <__fp_rempio2>
    a29a:	0f 90       	pop	r0
    a29c:	07 fc       	sbrc	r0, 7
    a29e:	ee 5f       	subi	r30, 0xFE	; 254
    a2a0:	56 cf       	rjmp	.-340    	; 0xa14e <__fp_sinus>

0000a2a2 <square>:
    a2a2:	9b 01       	movw	r18, r22
    a2a4:	ac 01       	movw	r20, r24
    a2a6:	94 cf       	rjmp	.-216    	; 0xa1d0 <__mulsf3>

0000a2a8 <__fp_mpack>:
    a2a8:	9f 3f       	cpi	r25, 0xFF	; 255
    a2aa:	31 f0       	breq	.+12     	; 0xa2b8 <__fp_mpack_finite+0xc>

0000a2ac <__fp_mpack_finite>:
    a2ac:	91 50       	subi	r25, 0x01	; 1
    a2ae:	20 f4       	brcc	.+8      	; 0xa2b8 <__fp_mpack_finite+0xc>
    a2b0:	87 95       	ror	r24
    a2b2:	77 95       	ror	r23
    a2b4:	67 95       	ror	r22
    a2b6:	b7 95       	ror	r27
    a2b8:	88 0f       	add	r24, r24
    a2ba:	91 1d       	adc	r25, r1
    a2bc:	96 95       	lsr	r25
    a2be:	87 95       	ror	r24
    a2c0:	97 f9       	bld	r25, 7
    a2c2:	08 95       	ret

0000a2c4 <__fp_powsodd>:
    a2c4:	9f 93       	push	r25
    a2c6:	8f 93       	push	r24
    a2c8:	7f 93       	push	r23
    a2ca:	6f 93       	push	r22
    a2cc:	ff 93       	push	r31
    a2ce:	ef 93       	push	r30
    a2d0:	9b 01       	movw	r18, r22
    a2d2:	ac 01       	movw	r20, r24
    a2d4:	7d df       	rcall	.-262    	; 0xa1d0 <__mulsf3>
    a2d6:	ef 91       	pop	r30
    a2d8:	ff 91       	pop	r31
    a2da:	cd de       	rcall	.-614    	; 0xa076 <__fp_powser>
    a2dc:	2f 91       	pop	r18
    a2de:	3f 91       	pop	r19
    a2e0:	4f 91       	pop	r20
    a2e2:	5f 91       	pop	r21
    a2e4:	75 cf       	rjmp	.-278    	; 0xa1d0 <__mulsf3>

0000a2e6 <__mulsi3>:
    a2e6:	62 9f       	mul	r22, r18
    a2e8:	d0 01       	movw	r26, r0
    a2ea:	73 9f       	mul	r23, r19
    a2ec:	f0 01       	movw	r30, r0
    a2ee:	82 9f       	mul	r24, r18
    a2f0:	e0 0d       	add	r30, r0
    a2f2:	f1 1d       	adc	r31, r1
    a2f4:	64 9f       	mul	r22, r20
    a2f6:	e0 0d       	add	r30, r0
    a2f8:	f1 1d       	adc	r31, r1
    a2fa:	92 9f       	mul	r25, r18
    a2fc:	f0 0d       	add	r31, r0
    a2fe:	83 9f       	mul	r24, r19
    a300:	f0 0d       	add	r31, r0
    a302:	74 9f       	mul	r23, r20
    a304:	f0 0d       	add	r31, r0
    a306:	65 9f       	mul	r22, r21
    a308:	f0 0d       	add	r31, r0
    a30a:	99 27       	eor	r25, r25
    a30c:	72 9f       	mul	r23, r18
    a30e:	b0 0d       	add	r27, r0
    a310:	e1 1d       	adc	r30, r1
    a312:	f9 1f       	adc	r31, r25
    a314:	63 9f       	mul	r22, r19
    a316:	b0 0d       	add	r27, r0
    a318:	e1 1d       	adc	r30, r1
    a31a:	f9 1f       	adc	r31, r25
    a31c:	bd 01       	movw	r22, r26
    a31e:	cf 01       	movw	r24, r30
    a320:	11 24       	eor	r1, r1
    a322:	08 95       	ret

0000a324 <__udivmodhi4>:
    a324:	aa 1b       	sub	r26, r26
    a326:	bb 1b       	sub	r27, r27
    a328:	51 e1       	ldi	r21, 0x11	; 17
    a32a:	07 c0       	rjmp	.+14     	; 0xa33a <__udivmodhi4_ep>

0000a32c <__udivmodhi4_loop>:
    a32c:	aa 1f       	adc	r26, r26
    a32e:	bb 1f       	adc	r27, r27
    a330:	a6 17       	cp	r26, r22
    a332:	b7 07       	cpc	r27, r23
    a334:	10 f0       	brcs	.+4      	; 0xa33a <__udivmodhi4_ep>
    a336:	a6 1b       	sub	r26, r22
    a338:	b7 0b       	sbc	r27, r23

0000a33a <__udivmodhi4_ep>:
    a33a:	88 1f       	adc	r24, r24
    a33c:	99 1f       	adc	r25, r25
    a33e:	5a 95       	dec	r21
    a340:	a9 f7       	brne	.-22     	; 0xa32c <__udivmodhi4_loop>
    a342:	80 95       	com	r24
    a344:	90 95       	com	r25
    a346:	bc 01       	movw	r22, r24
    a348:	cd 01       	movw	r24, r26
    a34a:	08 95       	ret

0000a34c <__divmodhi4>:
    a34c:	97 fb       	bst	r25, 7
    a34e:	09 2e       	mov	r0, r25
    a350:	07 26       	eor	r0, r23
    a352:	0a d0       	rcall	.+20     	; 0xa368 <__divmodhi4_neg1>
    a354:	77 fd       	sbrc	r23, 7
    a356:	04 d0       	rcall	.+8      	; 0xa360 <__divmodhi4_neg2>
    a358:	e5 df       	rcall	.-54     	; 0xa324 <__udivmodhi4>
    a35a:	06 d0       	rcall	.+12     	; 0xa368 <__divmodhi4_neg1>
    a35c:	00 20       	and	r0, r0
    a35e:	1a f4       	brpl	.+6      	; 0xa366 <__divmodhi4_exit>

0000a360 <__divmodhi4_neg2>:
    a360:	70 95       	com	r23
    a362:	61 95       	neg	r22
    a364:	7f 4f       	sbci	r23, 0xFF	; 255

0000a366 <__divmodhi4_exit>:
    a366:	08 95       	ret

0000a368 <__divmodhi4_neg1>:
    a368:	f6 f7       	brtc	.-4      	; 0xa366 <__divmodhi4_exit>
    a36a:	90 95       	com	r25
    a36c:	81 95       	neg	r24
    a36e:	9f 4f       	sbci	r25, 0xFF	; 255
    a370:	08 95       	ret

0000a372 <__divmodsi4>:
    a372:	97 fb       	bst	r25, 7
    a374:	09 2e       	mov	r0, r25
    a376:	05 26       	eor	r0, r21
    a378:	0e d0       	rcall	.+28     	; 0xa396 <__divmodsi4_neg1>
    a37a:	57 fd       	sbrc	r21, 7
    a37c:	04 d0       	rcall	.+8      	; 0xa386 <__divmodsi4_neg2>
    a37e:	14 d0       	rcall	.+40     	; 0xa3a8 <__udivmodsi4>
    a380:	0a d0       	rcall	.+20     	; 0xa396 <__divmodsi4_neg1>
    a382:	00 1c       	adc	r0, r0
    a384:	38 f4       	brcc	.+14     	; 0xa394 <__divmodsi4_exit>

0000a386 <__divmodsi4_neg2>:
    a386:	50 95       	com	r21
    a388:	40 95       	com	r20
    a38a:	30 95       	com	r19
    a38c:	21 95       	neg	r18
    a38e:	3f 4f       	sbci	r19, 0xFF	; 255
    a390:	4f 4f       	sbci	r20, 0xFF	; 255
    a392:	5f 4f       	sbci	r21, 0xFF	; 255

0000a394 <__divmodsi4_exit>:
    a394:	08 95       	ret

0000a396 <__divmodsi4_neg1>:
    a396:	f6 f7       	brtc	.-4      	; 0xa394 <__divmodsi4_exit>
    a398:	90 95       	com	r25
    a39a:	80 95       	com	r24
    a39c:	70 95       	com	r23
    a39e:	61 95       	neg	r22
    a3a0:	7f 4f       	sbci	r23, 0xFF	; 255
    a3a2:	8f 4f       	sbci	r24, 0xFF	; 255
    a3a4:	9f 4f       	sbci	r25, 0xFF	; 255
    a3a6:	08 95       	ret

0000a3a8 <__udivmodsi4>:
    a3a8:	a1 e2       	ldi	r26, 0x21	; 33
    a3aa:	1a 2e       	mov	r1, r26
    a3ac:	aa 1b       	sub	r26, r26
    a3ae:	bb 1b       	sub	r27, r27
    a3b0:	fd 01       	movw	r30, r26
    a3b2:	0d c0       	rjmp	.+26     	; 0xa3ce <__udivmodsi4_ep>

0000a3b4 <__udivmodsi4_loop>:
    a3b4:	aa 1f       	adc	r26, r26
    a3b6:	bb 1f       	adc	r27, r27
    a3b8:	ee 1f       	adc	r30, r30
    a3ba:	ff 1f       	adc	r31, r31
    a3bc:	a2 17       	cp	r26, r18
    a3be:	b3 07       	cpc	r27, r19
    a3c0:	e4 07       	cpc	r30, r20
    a3c2:	f5 07       	cpc	r31, r21
    a3c4:	20 f0       	brcs	.+8      	; 0xa3ce <__udivmodsi4_ep>
    a3c6:	a2 1b       	sub	r26, r18
    a3c8:	b3 0b       	sbc	r27, r19
    a3ca:	e4 0b       	sbc	r30, r20
    a3cc:	f5 0b       	sbc	r31, r21

0000a3ce <__udivmodsi4_ep>:
    a3ce:	66 1f       	adc	r22, r22
    a3d0:	77 1f       	adc	r23, r23
    a3d2:	88 1f       	adc	r24, r24
    a3d4:	99 1f       	adc	r25, r25
    a3d6:	1a 94       	dec	r1
    a3d8:	69 f7       	brne	.-38     	; 0xa3b4 <__udivmodsi4_loop>
    a3da:	60 95       	com	r22
    a3dc:	70 95       	com	r23
    a3de:	80 95       	com	r24
    a3e0:	90 95       	com	r25
    a3e2:	9b 01       	movw	r18, r22
    a3e4:	ac 01       	movw	r20, r24
    a3e6:	bd 01       	movw	r22, r26
    a3e8:	cf 01       	movw	r24, r30
    a3ea:	08 95       	ret

0000a3ec <do_rand>:
    a3ec:	af 92       	push	r10
    a3ee:	bf 92       	push	r11
    a3f0:	cf 92       	push	r12
    a3f2:	df 92       	push	r13
    a3f4:	ef 92       	push	r14
    a3f6:	ff 92       	push	r15
    a3f8:	0f 93       	push	r16
    a3fa:	1f 93       	push	r17
    a3fc:	cf 93       	push	r28
    a3fe:	df 93       	push	r29
    a400:	ec 01       	movw	r28, r24
    a402:	68 81       	ld	r22, Y
    a404:	79 81       	ldd	r23, Y+1	; 0x01
    a406:	8a 81       	ldd	r24, Y+2	; 0x02
    a408:	9b 81       	ldd	r25, Y+3	; 0x03
    a40a:	61 15       	cp	r22, r1
    a40c:	71 05       	cpc	r23, r1
    a40e:	81 05       	cpc	r24, r1
    a410:	91 05       	cpc	r25, r1
    a412:	21 f4       	brne	.+8      	; 0xa41c <do_rand+0x30>
    a414:	64 e2       	ldi	r22, 0x24	; 36
    a416:	79 ed       	ldi	r23, 0xD9	; 217
    a418:	8b e5       	ldi	r24, 0x5B	; 91
    a41a:	97 e0       	ldi	r25, 0x07	; 7
    a41c:	2d e1       	ldi	r18, 0x1D	; 29
    a41e:	33 ef       	ldi	r19, 0xF3	; 243
    a420:	41 e0       	ldi	r20, 0x01	; 1
    a422:	50 e0       	ldi	r21, 0x00	; 0
    a424:	0e 94 b9 51 	call	0xa372	; 0xa372 <__divmodsi4>
    a428:	79 01       	movw	r14, r18
    a42a:	8a 01       	movw	r16, r20
    a42c:	27 ea       	ldi	r18, 0xA7	; 167
    a42e:	31 e4       	ldi	r19, 0x41	; 65
    a430:	40 e0       	ldi	r20, 0x00	; 0
    a432:	50 e0       	ldi	r21, 0x00	; 0
    a434:	0e 94 73 51 	call	0xa2e6	; 0xa2e6 <__mulsi3>
    a438:	5b 01       	movw	r10, r22
    a43a:	6c 01       	movw	r12, r24
    a43c:	c8 01       	movw	r24, r16
    a43e:	b7 01       	movw	r22, r14
    a440:	2c ee       	ldi	r18, 0xEC	; 236
    a442:	34 ef       	ldi	r19, 0xF4	; 244
    a444:	4f ef       	ldi	r20, 0xFF	; 255
    a446:	5f ef       	ldi	r21, 0xFF	; 255
    a448:	0e 94 73 51 	call	0xa2e6	; 0xa2e6 <__mulsi3>
    a44c:	6a 0d       	add	r22, r10
    a44e:	7b 1d       	adc	r23, r11
    a450:	8c 1d       	adc	r24, r12
    a452:	9d 1d       	adc	r25, r13
    a454:	97 ff       	sbrs	r25, 7
    a456:	04 c0       	rjmp	.+8      	; 0xa460 <do_rand+0x74>
    a458:	61 50       	subi	r22, 0x01	; 1
    a45a:	70 40       	sbci	r23, 0x00	; 0
    a45c:	80 40       	sbci	r24, 0x00	; 0
    a45e:	90 48       	sbci	r25, 0x80	; 128
    a460:	68 83       	st	Y, r22
    a462:	79 83       	std	Y+1, r23	; 0x01
    a464:	8a 83       	std	Y+2, r24	; 0x02
    a466:	9b 83       	std	Y+3, r25	; 0x03
    a468:	7f 77       	andi	r23, 0x7F	; 127
    a46a:	cb 01       	movw	r24, r22
    a46c:	df 91       	pop	r29
    a46e:	cf 91       	pop	r28
    a470:	1f 91       	pop	r17
    a472:	0f 91       	pop	r16
    a474:	ff 90       	pop	r15
    a476:	ef 90       	pop	r14
    a478:	df 90       	pop	r13
    a47a:	cf 90       	pop	r12
    a47c:	bf 90       	pop	r11
    a47e:	af 90       	pop	r10
    a480:	08 95       	ret

0000a482 <rand_r>:
    a482:	0e 94 f6 51 	call	0xa3ec	; 0xa3ec <do_rand>
    a486:	08 95       	ret

0000a488 <rand>:
    a488:	89 e1       	ldi	r24, 0x19	; 25
    a48a:	92 e0       	ldi	r25, 0x02	; 2
    a48c:	0e 94 f6 51 	call	0xa3ec	; 0xa3ec <do_rand>
    a490:	08 95       	ret

0000a492 <srand>:
    a492:	a0 e0       	ldi	r26, 0x00	; 0
    a494:	b0 e0       	ldi	r27, 0x00	; 0
    a496:	80 93 19 02 	sts	0x0219, r24
    a49a:	90 93 1a 02 	sts	0x021A, r25
    a49e:	a0 93 1b 02 	sts	0x021B, r26
    a4a2:	b0 93 1c 02 	sts	0x021C, r27
    a4a6:	08 95       	ret

0000a4a8 <memset>:
    a4a8:	dc 01       	movw	r26, r24
    a4aa:	01 c0       	rjmp	.+2      	; 0xa4ae <memset+0x6>
    a4ac:	6d 93       	st	X+, r22
    a4ae:	41 50       	subi	r20, 0x01	; 1
    a4b0:	50 40       	sbci	r21, 0x00	; 0
    a4b2:	e0 f7       	brcc	.-8      	; 0xa4ac <memset+0x4>
    a4b4:	08 95       	ret

0000a4b6 <__eerd_block_m2560>:
    a4b6:	dc 01       	movw	r26, r24
    a4b8:	cb 01       	movw	r24, r22

0000a4ba <__eerd_blraw_m2560>:
    a4ba:	fc 01       	movw	r30, r24
    a4bc:	f9 99       	sbic	0x1f, 1	; 31
    a4be:	fe cf       	rjmp	.-4      	; 0xa4bc <__eerd_blraw_m2560+0x2>
    a4c0:	06 c0       	rjmp	.+12     	; 0xa4ce <__eerd_blraw_m2560+0x14>
    a4c2:	f2 bd       	out	0x22, r31	; 34
    a4c4:	e1 bd       	out	0x21, r30	; 33
    a4c6:	f8 9a       	sbi	0x1f, 0	; 31
    a4c8:	31 96       	adiw	r30, 0x01	; 1
    a4ca:	00 b4       	in	r0, 0x20	; 32
    a4cc:	0d 92       	st	X+, r0
    a4ce:	41 50       	subi	r20, 0x01	; 1
    a4d0:	50 40       	sbci	r21, 0x00	; 0
    a4d2:	b8 f7       	brcc	.-18     	; 0xa4c2 <__eerd_blraw_m2560+0x8>
    a4d4:	08 95       	ret

0000a4d6 <__eerd_byte_m2560>:
    a4d6:	f9 99       	sbic	0x1f, 1	; 31
    a4d8:	fe cf       	rjmp	.-4      	; 0xa4d6 <__eerd_byte_m2560>
    a4da:	92 bd       	out	0x22, r25	; 34
    a4dc:	81 bd       	out	0x21, r24	; 33
    a4de:	f8 9a       	sbi	0x1f, 0	; 31
    a4e0:	99 27       	eor	r25, r25
    a4e2:	80 b5       	in	r24, 0x20	; 32
    a4e4:	08 95       	ret

0000a4e6 <__eerd_word_m2560>:
    a4e6:	a8 e1       	ldi	r26, 0x18	; 24
    a4e8:	b0 e0       	ldi	r27, 0x00	; 0
    a4ea:	42 e0       	ldi	r20, 0x02	; 2
    a4ec:	50 e0       	ldi	r21, 0x00	; 0
    a4ee:	0c 94 5d 52 	jmp	0xa4ba	; 0xa4ba <__eerd_blraw_m2560>

0000a4f2 <__eeupd_block_m2560>:
    a4f2:	dc 01       	movw	r26, r24
    a4f4:	a4 0f       	add	r26, r20
    a4f6:	b5 1f       	adc	r27, r21
    a4f8:	41 50       	subi	r20, 0x01	; 1
    a4fa:	50 40       	sbci	r21, 0x00	; 0
    a4fc:	48 f0       	brcs	.+18     	; 0xa510 <__eeupd_block_m2560+0x1e>
    a4fe:	cb 01       	movw	r24, r22
    a500:	84 0f       	add	r24, r20
    a502:	95 1f       	adc	r25, r21
    a504:	2e 91       	ld	r18, -X
    a506:	0e 94 8a 52 	call	0xa514	; 0xa514 <__eeupd_r18_m2560>
    a50a:	41 50       	subi	r20, 0x01	; 1
    a50c:	50 40       	sbci	r21, 0x00	; 0
    a50e:	d0 f7       	brcc	.-12     	; 0xa504 <__eeupd_block_m2560+0x12>
    a510:	08 95       	ret

0000a512 <__eeupd_byte_m2560>:
    a512:	26 2f       	mov	r18, r22

0000a514 <__eeupd_r18_m2560>:
    a514:	f9 99       	sbic	0x1f, 1	; 31
    a516:	fe cf       	rjmp	.-4      	; 0xa514 <__eeupd_r18_m2560>
    a518:	92 bd       	out	0x22, r25	; 34
    a51a:	81 bd       	out	0x21, r24	; 33
    a51c:	f8 9a       	sbi	0x1f, 0	; 31
    a51e:	01 97       	sbiw	r24, 0x01	; 1
    a520:	00 b4       	in	r0, 0x20	; 32
    a522:	02 16       	cp	r0, r18
    a524:	39 f0       	breq	.+14     	; 0xa534 <__eeupd_r18_m2560+0x20>
    a526:	1f ba       	out	0x1f, r1	; 31
    a528:	20 bd       	out	0x20, r18	; 32
    a52a:	0f b6       	in	r0, 0x3f	; 63
    a52c:	f8 94       	cli
    a52e:	fa 9a       	sbi	0x1f, 2	; 31
    a530:	f9 9a       	sbi	0x1f, 1	; 31
    a532:	0f be       	out	0x3f, r0	; 63
    a534:	08 95       	ret

0000a536 <__eeupd_word_m2560>:
    a536:	01 96       	adiw	r24, 0x01	; 1
    a538:	27 2f       	mov	r18, r23
    a53a:	0e 94 8a 52 	call	0xa514	; 0xa514 <__eeupd_r18_m2560>
    a53e:	0c 94 89 52 	jmp	0xa512	; 0xa512 <__eeupd_byte_m2560>

0000a542 <__eewr_byte_m2560>:
    a542:	26 2f       	mov	r18, r22

0000a544 <__eewr_r18_m2560>:
    a544:	f9 99       	sbic	0x1f, 1	; 31
    a546:	fe cf       	rjmp	.-4      	; 0xa544 <__eewr_r18_m2560>
    a548:	1f ba       	out	0x1f, r1	; 31
    a54a:	92 bd       	out	0x22, r25	; 34
    a54c:	81 bd       	out	0x21, r24	; 33
    a54e:	20 bd       	out	0x20, r18	; 32
    a550:	0f b6       	in	r0, 0x3f	; 63
    a552:	f8 94       	cli
    a554:	fa 9a       	sbi	0x1f, 2	; 31
    a556:	f9 9a       	sbi	0x1f, 1	; 31
    a558:	0f be       	out	0x3f, r0	; 63
    a55a:	01 96       	adiw	r24, 0x01	; 1
    a55c:	08 95       	ret

0000a55e <__eewr_word_m2560>:
    a55e:	0e 94 a1 52 	call	0xa542	; 0xa542 <__eewr_byte_m2560>
    a562:	27 2f       	mov	r18, r23
    a564:	0c 94 a2 52 	jmp	0xa544	; 0xa544 <__eewr_r18_m2560>

0000a568 <_exit>:
    a568:	ff cf       	rjmp	.-2      	; 0xa568 <_exit>
