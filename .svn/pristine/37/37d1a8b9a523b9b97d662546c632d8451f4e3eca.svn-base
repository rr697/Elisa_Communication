
Elisa3-avr-studio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800200  0000b370  0000b404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000b370  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000963  0080022e  0080022e  0000b432  2**0
                  ALLOC
  3 .stab         000037ec  00000000  00000000  0000b434  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f7b  00000000  00000000  0000ec20  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000238  00000000  00000000  0000fb9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000276f  00000000  00000000  0000fdd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000068b1  00000000  00000000  00012542  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000012a4  00000000  00000000  00018df3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000885e  00000000  00000000  0001a097  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000930  00000000  00000000  000228f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001e24  00000000  00000000  00023228  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002a3c  00000000  00000000  0002504c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000002b0  00000000  00000000  00027a88  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000140  00000000  00000000  00027d38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__ctors_end>
       4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
       8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
       c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      10:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      14:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      18:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      1c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      20:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      24:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      28:	0c 94 73 14 	jmp	0x28e6	; 0x28e6 <__vector_10>
      2c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      30:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      34:	0c 94 a7 14 	jmp	0x294e	; 0x294e <__vector_13>
      38:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      3c:	0c 94 7b 20 	jmp	0x40f6	; 0x40f6 <__vector_15>
      40:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      44:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      48:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      4c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      50:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      54:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      58:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      5c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      60:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      64:	0c 94 3f 1f 	jmp	0x3e7e	; 0x3e7e <__vector_25>
      68:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      6c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      70:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      74:	0c 94 5d 21 	jmp	0x42ba	; 0x42ba <__vector_29>
      78:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      7c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      80:	0c 94 41 3d 	jmp	0x7a82	; 0x7a82 <__vector_32>
      84:	0c 94 57 3d 	jmp	0x7aae	; 0x7aae <__vector_33>
      88:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      8c:	0c 94 b4 3c 	jmp	0x7968	; 0x7968 <__vector_35>
      90:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      94:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      98:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      9c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      a0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      a4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      a8:	0c 94 88 3c 	jmp	0x7910	; 0x7910 <__vector_42>
      ac:	0c 94 9e 3c 	jmp	0x793c	; 0x793c <__vector_43>
      b0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      b4:	0c 94 f1 3b 	jmp	0x77e2	; 0x77e2 <__vector_45>
      b8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      bc:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      c0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      c4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      c8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      cc:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      d0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      d4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      d8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      dc:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      e0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      e4:	97 17       	cp	r25, r23
      e6:	7c 17       	cp	r23, r28
      e8:	4c 17       	cp	r20, r28
      ea:	38 17       	cp	r19, r24
      ec:	10 17       	cp	r17, r16
      ee:	fe 16       	cp	r15, r30
      f0:	d6 16       	cp	r13, r22
      f2:	ba 16       	cp	r11, r26
      f4:	81 16       	cp	r8, r17
      f6:	69 16       	cp	r6, r25
      f8:	0a 16       	cp	r0, r26
      fa:	0a 16       	cp	r0, r26
      fc:	0a 16       	cp	r0, r26
      fe:	0a 16       	cp	r0, r26
     100:	0a 16       	cp	r0, r26
     102:	0a 16       	cp	r0, r26
     104:	ae 16       	cp	r10, r30
     106:	5e 16       	cp	r5, r30
     108:	0a 16       	cp	r0, r26
     10a:	0a 16       	cp	r0, r26
     10c:	0a 16       	cp	r0, r26
     10e:	0a 16       	cp	r0, r26
     110:	0a 16       	cp	r0, r26
     112:	0a 16       	cp	r0, r26
     114:	0a 16       	cp	r0, r26
     116:	0a 16       	cp	r0, r26
     118:	0a 16       	cp	r0, r26
     11a:	0a 16       	cp	r0, r26
     11c:	0a 16       	cp	r0, r26
     11e:	0a 16       	cp	r0, r26
     120:	81 16       	cp	r8, r17
     122:	4c 17       	cp	r20, r28
     124:	36 16       	cp	r3, r22
     126:	29 16       	cp	r2, r25
     128:	0a 16       	cp	r0, r26
     12a:	0a 16       	cp	r0, r26
     12c:	0a 16       	cp	r0, r26
     12e:	0a 16       	cp	r0, r26
     130:	0a 16       	cp	r0, r26
     132:	0a 16       	cp	r0, r26
     134:	0a 16       	cp	r0, r26
     136:	0a 16       	cp	r0, r26
     138:	0a 16       	cp	r0, r26
     13a:	0a 16       	cp	r0, r26
     13c:	0a 16       	cp	r0, r26
     13e:	0a 16       	cp	r0, r26
     140:	10 17       	cp	r17, r16
     142:	d6 16       	cp	r13, r22
     144:	0a 16       	cp	r0, r26
     146:	0a 16       	cp	r0, r26
     148:	97 17       	cp	r25, r23
     14a:	fe 16       	cp	r15, r30
     14c:	42 16       	cp	r4, r18
     14e:	08 4a       	sbci	r16, 0xA8	; 168
     150:	d7 3b       	cpi	r29, 0xB7	; 183
     152:	3b ce       	rjmp	.-906    	; 0xfffffdca <__eeprom_end+0xff7efdca>
     154:	01 6e       	ori	r16, 0xE1	; 225
     156:	84 bc       	out	0x24, r8	; 36
     158:	bf fd       	.word	0xfdbf	; ????
     15a:	c1 2f       	mov	r28, r17
     15c:	3d 6c       	ori	r19, 0xCD	; 205
     15e:	74 31       	cpi	r23, 0x14	; 20
     160:	9a bd       	out	0x2a, r25	; 42
     162:	56 83       	std	Z+6, r21	; 0x06
     164:	3d da       	rcall	.-2950   	; 0xfffff5e0 <__eeprom_end+0xff7ef5e0>
     166:	3d 00       	.word	0x003d	; ????
     168:	c7 7f       	andi	r28, 0xF7	; 247
     16a:	11 be       	out	0x31, r1	; 49
     16c:	d9 e4       	ldi	r29, 0x49	; 73
     16e:	bb 4c       	sbci	r27, 0xCB	; 203
     170:	3e 91       	ld	r19, -X
     172:	6b aa       	std	Y+51, r6	; 0x33
     174:	aa be       	out	0x3a, r10	; 58
     176:	00 00       	nop
     178:	00 80       	ld	r0, Z
     17a:	3f 05       	cpc	r19, r15
     17c:	a8 4c       	sbci	r26, 0xC8	; 200
     17e:	cd b2       	in	r12, 0x1d	; 29
     180:	d4 4e       	sbci	r29, 0xE4	; 228
     182:	b9 38       	cpi	r27, 0x89	; 137
     184:	36 a9       	ldd	r19, Z+54	; 0x36
     186:	02 0c       	add	r0, r2
     188:	50 b9       	out	0x00, r21	; 0
     18a:	91 86       	std	Z+9, r9	; 0x09
     18c:	88 08       	sbc	r8, r8
     18e:	3c a6       	std	Y+44, r3	; 0x2c
     190:	aa aa       	std	Y+50, r10	; 0x32
     192:	2a be       	out	0x3a, r2	; 58
     194:	00 00       	nop
     196:	00 80       	ld	r0, Z
     198:	3f 00       	.word	0x003f	; ????

0000019a <__ctors_end>:
     19a:	11 24       	eor	r1, r1
     19c:	1f be       	out	0x3f, r1	; 63
     19e:	cf ef       	ldi	r28, 0xFF	; 255
     1a0:	d1 e2       	ldi	r29, 0x21	; 33
     1a2:	de bf       	out	0x3e, r29	; 62
     1a4:	cd bf       	out	0x3d, r28	; 61
     1a6:	00 e0       	ldi	r16, 0x00	; 0
     1a8:	0c bf       	out	0x3c, r16	; 60

000001aa <__do_copy_data>:
     1aa:	12 e0       	ldi	r17, 0x02	; 2
     1ac:	a0 e0       	ldi	r26, 0x00	; 0
     1ae:	b2 e0       	ldi	r27, 0x02	; 2
     1b0:	e0 e7       	ldi	r30, 0x70	; 112
     1b2:	f3 eb       	ldi	r31, 0xB3	; 179
     1b4:	02 c0       	rjmp	.+4      	; 0x1ba <.do_copy_data_start>

000001b6 <.do_copy_data_loop>:
     1b6:	05 90       	lpm	r0, Z+
     1b8:	0d 92       	st	X+, r0

000001ba <.do_copy_data_start>:
     1ba:	ae 32       	cpi	r26, 0x2E	; 46
     1bc:	b1 07       	cpc	r27, r17
     1be:	d9 f7       	brne	.-10     	; 0x1b6 <.do_copy_data_loop>

000001c0 <__do_clear_bss>:
     1c0:	1b e0       	ldi	r17, 0x0B	; 11
     1c2:	ae e2       	ldi	r26, 0x2E	; 46
     1c4:	b2 e0       	ldi	r27, 0x02	; 2
     1c6:	01 c0       	rjmp	.+2      	; 0x1ca <.do_clear_bss_start>

000001c8 <.do_clear_bss_loop>:
     1c8:	1d 92       	st	X+, r1

000001ca <.do_clear_bss_start>:
     1ca:	a1 39       	cpi	r26, 0x91	; 145
     1cc:	b1 07       	cpc	r27, r17
     1ce:	e1 f7       	brne	.-8      	; 0x1c8 <.do_clear_bss_loop>
     1d0:	0e 94 ee 00 	call	0x1dc	; 0x1dc <main>
     1d4:	0c 94 b7 59 	jmp	0xb36e	; 0xb36e <_exit>

000001d8 <__bad_interrupt>:
     1d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001dc <main>:
#include "behaviors.h"
#include "sensors.h"
#include "irCommunication.h"
#include "motors.h"

int main(void) {
     1dc:	2f 92       	push	r2
     1de:	3f 92       	push	r3
     1e0:	4f 92       	push	r4
     1e2:	5f 92       	push	r5
     1e4:	6f 92       	push	r6
     1e6:	7f 92       	push	r7
     1e8:	8f 92       	push	r8
     1ea:	9f 92       	push	r9
     1ec:	af 92       	push	r10
     1ee:	bf 92       	push	r11
     1f0:	cf 92       	push	r12
     1f2:	df 92       	push	r13
     1f4:	ef 92       	push	r14
     1f6:	ff 92       	push	r15
     1f8:	0f 93       	push	r16
     1fa:	1f 93       	push	r17
     1fc:	df 93       	push	r29
     1fe:	cf 93       	push	r28
     200:	cd b7       	in	r28, 0x3d	; 61
     202:	de b7       	in	r29, 0x3e	; 62
     204:	2c 97       	sbiw	r28, 0x0c	; 12
     206:	0f b6       	in	r0, 0x3f	; 63
     208:	f8 94       	cli
     20a:	de bf       	out	0x3e, r29	; 62
     20c:	0f be       	out	0x3f, r0	; 63
     20e:	cd bf       	out	0x3d, r28	; 61
	unsigned char prevSelector=0;
	unsigned int i=0;
	unsigned int currRand=0, currRand2=0;
	float targetAngle=0;

	initPeripherals();
     210:	0e 94 1a 20 	call	0x4034	; 0x4034 <initPeripherals>

	initBehaviors();
     214:	0e 94 6d 3d 	call	0x7ada	; 0x7ada <initBehaviors>

	speedStepCounter = getTime100MicroSec();
     218:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
     21c:	9b 01       	movw	r18, r22
     21e:	ac 01       	movw	r20, r24
     220:	60 93 78 04 	sts	0x0478, r22
     224:	30 93 79 04 	sts	0x0479, r19
     228:	40 93 7a 04 	sts	0x047A, r20
     22c:	50 93 7b 04 	sts	0x047B, r21
     230:	10 92 7c 04 	sts	0x047C, r1
     234:	10 92 7d 04 	sts	0x047D, r1
     238:	10 92 7e 04 	sts	0x047E, r1
     23c:	10 92 7f 04 	sts	0x047F, r1
	
	// I noticed that I have to wait a little before calibrating in order to have the sensors to be 
	// well calibrated (sensors noise eliminated). Don't sure why, maybe due to the sensitivity of the 
	// sensor that stabilizes...
	startTime = getTime100MicroSec();
     240:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
     244:	7b 01       	movw	r14, r22
     246:	8c 01       	movw	r16, r24
	while((getTime100MicroSec() - startTime) < PAUSE_300_MSEC);
     248:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
     24c:	6e 19       	sub	r22, r14
     24e:	7f 09       	sbc	r23, r15
     250:	80 0b       	sbc	r24, r16
     252:	91 0b       	sbc	r25, r17
     254:	65 34       	cpi	r22, 0x45	; 69
     256:	2b e0       	ldi	r18, 0x0B	; 11
     258:	72 07       	cpc	r23, r18
     25a:	20 e0       	ldi	r18, 0x00	; 0
     25c:	82 07       	cpc	r24, r18
     25e:	20 e0       	ldi	r18, 0x00	; 0
     260:	92 07       	cpc	r25, r18
     262:	90 f3       	brcs	.-28     	; 0x248 <main+0x6c>
	calibrateSensors();
     264:	0e 94 d9 42 	call	0x85b2	; 0x85b2 <calibrateSensors>

	startTime = getTime100MicroSec();
     268:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
     26c:	6b 01       	movw	r12, r22
     26e:	7c 01       	movw	r14, r24

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
	unsigned char prevSelector=0;
	unsigned int i=0;
	unsigned int currRand=0, currRand2=0;
	float targetAngle=0;
     270:	80 e0       	ldi	r24, 0x00	; 0
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	dc 01       	movw	r26, r24
     276:	8b 83       	std	Y+3, r24	; 0x03
     278:	9c 83       	std	Y+4, r25	; 0x04
     27a:	ad 83       	std	Y+5, r26	; 0x05
     27c:	be 83       	std	Y+6, r27	; 0x06
int main(void) {

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
	unsigned char prevSelector=0;
	unsigned int i=0;
	unsigned int currRand=0, currRand2=0;
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	90 e0       	ldi	r25, 0x00	; 0

int main(void) {

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
	unsigned char prevSelector=0;
	unsigned int i=0;
     282:	1a 82       	std	Y+2, r1	; 0x02
     284:	19 82       	std	Y+1, r1	; 0x01
#include "motors.h"

int main(void) {

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
	unsigned char prevSelector=0;
     286:	00 e0       	ldi	r16, 0x00	; 0
#include "irCommunication.h"
#include "motors.h"

int main(void) {

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
     288:	88 24       	eor	r8, r8
     28a:	99 24       	eor	r9, r9
     28c:	54 01       	movw	r10, r8
		computeAngle();

		// turn off the rgb leds after one half second in the "charger demo"
		if(currentSelector==7) {
			if((getTime100MicroSec()-turnOffLedsTime) > PAUSE_500_MSEC) {
				pwm_red = 255;
     28e:	1f ef       	ldi	r17, 0xFF	; 255
						rgbState = 1;
					} else if(rgbState == 1) {
						pwm_red = 255;
						pwm_green = 254;
						pwm_blue = 255;
						rgbState = 2;
     290:	72 e0       	ldi	r23, 0x02	; 2
     292:	67 2e       	mov	r6, r23
				}

			} else if(currentSelector==7) {

				srand(TCNT3);
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption
     294:	6e e1       	ldi	r22, 0x1E	; 30
     296:	46 2e       	mov	r4, r22
     298:	51 2c       	mov	r5, r1
				currRand = (currRand + rand()%30) % 128;
				pwm_blue = 255 - currRand;

			
				srand(TCNT3);
				currRand2 = rand()%128;
     29a:	50 e8       	ldi	r21, 0x80	; 128
     29c:	25 2e       	mov	r2, r21
     29e:	31 2c       	mov	r3, r1
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption

				switch(rgbState) {
					case 0:
						pwm_red = 255 - currRand;	
						rgbState = 1;
     2a0:	77 24       	eor	r7, r7
     2a2:	73 94       	inc	r7
								pwm_blue = 255;
							} else {
								pwm_blue = currRand;
							}

							currRand = rand()% 200;
     2a4:	9c 87       	std	Y+12, r25	; 0x0c
     2a6:	8b 87       	std	Y+11, r24	; 0x0b
	eeprom_update_block(calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
*/

	while(1) {

		currentSelector = getSelector();	// update selector position
     2a8:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <getSelector>
     2ac:	80 93 64 04 	sts	0x0464, r24

		readAccelXYZ();						// update accelerometer values to compute the angle
     2b0:	0e 94 33 42 	call	0x8466	; 0x8466 <readAccelXYZ>

		computeAngle();
     2b4:	0e 94 57 48 	call	0x90ae	; 0x90ae <computeAngle>

		// turn off the rgb leds after one half second in the "charger demo"
		if(currentSelector==7) {
     2b8:	80 91 64 04 	lds	r24, 0x0464
     2bc:	87 30       	cpi	r24, 0x07	; 7
     2be:	09 f4       	brne	.+2      	; 0x2c2 <main+0xe6>
     2c0:	6b c1       	rjmp	.+726    	; 0x598 <main+0x3bc>
				pwm_green = 255;
				pwm_blue = 255;			
			}
		}

		endTime = getTime100MicroSec();
     2c2:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
     2c6:	6c 19       	sub	r22, r12
     2c8:	7d 09       	sbc	r23, r13
     2ca:	8e 09       	sbc	r24, r14
     2cc:	9f 09       	sbc	r25, r15
     2ce:	6e 31       	cpi	r22, 0x1E	; 30
     2d0:	bb e4       	ldi	r27, 0x4B	; 75
     2d2:	7b 07       	cpc	r23, r27
     2d4:	b0 e0       	ldi	r27, 0x00	; 0
     2d6:	8b 07       	cpc	r24, r27
     2d8:	b0 e0       	ldi	r27, 0x00	; 0
     2da:	9b 07       	cpc	r25, r27
     2dc:	08 f0       	brcs	.+2      	; 0x2e0 <main+0x104>
     2de:	00 c1       	rjmp	.+512    	; 0x4e0 <main+0x304>
			startTime = getTime100MicroSec();
		}

		
		//if(calibrateOdomFlag==0) {
			handleIRRemoteCommands();
     2e0:	0e 94 d7 15 	call	0x2bae	; 0x2bae <handleIRRemoteCommands>
		//}


		//if(calibrateOdomFlag==0) {
			handleRFCommands();
     2e4:	0e 94 5e 10 	call	0x20bc	; 0x20bc <handleRFCommands>

		//if(currentSelector!=6 && currentSelector!=15) {
		//	usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		//}

		switch(currentSelector) {
     2e8:	80 91 64 04 	lds	r24, 0x0464
     2ec:	87 30       	cpi	r24, 0x07	; 7
     2ee:	09 f4       	brne	.+2      	; 0x2f2 <main+0x116>
     2f0:	13 c1       	rjmp	.+550    	; 0x518 <main+0x33c>
     2f2:	88 30       	cpi	r24, 0x08	; 8
     2f4:	08 f0       	brcs	.+2      	; 0x2f8 <main+0x11c>
     2f6:	60 c0       	rjmp	.+192    	; 0x3b8 <main+0x1dc>
     2f8:	83 30       	cpi	r24, 0x03	; 3
     2fa:	09 f4       	brne	.+2      	; 0x2fe <main+0x122>
     2fc:	a6 c1       	rjmp	.+844    	; 0x64a <main+0x46e>
     2fe:	84 30       	cpi	r24, 0x04	; 4
     300:	08 f0       	brcs	.+2      	; 0x304 <main+0x128>
     302:	60 c1       	rjmp	.+704    	; 0x5c4 <main+0x3e8>
     304:	81 30       	cpi	r24, 0x01	; 1
     306:	09 f4       	brne	.+2      	; 0x30a <main+0x12e>
     308:	59 c2       	rjmp	.+1202   	; 0x7bc <main+0x5e0>
     30a:	82 30       	cpi	r24, 0x02	; 2
     30c:	08 f0       	brcs	.+2      	; 0x310 <main+0x134>
     30e:	9f c1       	rjmp	.+830    	; 0x64e <main+0x472>
    
			case 0:	// motors in direct power control (no speed control)
					handleMotorsWithNoController();
     310:	0e 94 bf 3a 	call	0x757e	; 0x757e <handleMotorsWithNoController>
     314:	80 91 64 04 	lds	r24, 0x0464
					//usart0Transmit(currentOsccal,1);
					break;

		}

		if(currentSelector!=0) {
     318:	88 23       	and	r24, r24
     31a:	09 f0       	breq	.+2      	; 0x31e <main+0x142>
     31c:	dc c0       	rjmp	.+440    	; 0x4d6 <main+0x2fa>
     31e:	80 e0       	ldi	r24, 0x00	; 0
			handleMotorsWithSpeedController();  
		}

		if(prevSelector != currentSelector) {	// in case the selector is changed, reset the robot state
     320:	08 17       	cp	r16, r24
     322:	11 f2       	breq	.-124    	; 0x2a8 <main+0xcc>
			disableObstacleAvoidance();
     324:	0e 94 b4 3f 	call	0x7f68	; 0x7f68 <disableObstacleAvoidance>
			disableCliffAvoidance();
     328:	0e 94 bb 3f 	call	0x7f76	; 0x7f76 <disableCliffAvoidance>
			GREEN_LED0_OFF;
     32c:	80 91 0b 01 	lds	r24, 0x010B
     330:	81 60       	ori	r24, 0x01	; 1
     332:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED1_OFF;
     336:	80 91 0b 01 	lds	r24, 0x010B
     33a:	82 60       	ori	r24, 0x02	; 2
     33c:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED2_OFF;
     340:	80 91 0b 01 	lds	r24, 0x010B
     344:	84 60       	ori	r24, 0x04	; 4
     346:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED3_OFF;
     34a:	a3 9a       	sbi	0x14, 3	; 20
			GREEN_LED4_OFF;
     34c:	80 91 0b 01 	lds	r24, 0x010B
     350:	80 61       	ori	r24, 0x10	; 16
     352:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED5_OFF;
     356:	80 91 0b 01 	lds	r24, 0x010B
     35a:	80 62       	ori	r24, 0x20	; 32
     35c:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED6_OFF;
     360:	80 91 0b 01 	lds	r24, 0x010B
     364:	80 64       	ori	r24, 0x40	; 64
     366:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED7_OFF;
     36a:	80 91 0b 01 	lds	r24, 0x010B
     36e:	80 68       	ori	r24, 0x80	; 128
     370:	80 93 0b 01 	sts	0x010B, r24
			pwm_red = 255;
     374:	10 93 0c 02 	sts	0x020C, r17
			pwm_green = 255;
     378:	10 93 0d 02 	sts	0x020D, r17
			pwm_blue = 255;
     37c:	10 93 0e 02 	sts	0x020E, r17
			updateRedLed(pwm_red);
     380:	8f ef       	ldi	r24, 0xFF	; 255
     382:	0e 94 fb 3f 	call	0x7ff6	; 0x7ff6 <updateRedLed>
			updateGreenLed(pwm_green);
     386:	80 91 0d 02 	lds	r24, 0x020D
     38a:	0e 94 0f 40 	call	0x801e	; 0x801e <updateGreenLed>
			updateBlueLed(pwm_blue);
     38e:	80 91 0e 02 	lds	r24, 0x020E
     392:	0e 94 23 40 	call	0x8046	; 0x8046 <updateBlueLed>
			setRightSpeed(0);
     396:	80 e0       	ldi	r24, 0x00	; 0
     398:	0e 94 ff 27 	call	0x4ffe	; 0x4ffe <setRightSpeed>
			setLeftSpeed(0);
     39c:	80 e0       	ldi	r24, 0x00	; 0
     39e:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <setLeftSpeed>
			rgbState = 0;
     3a2:	10 92 2c 03 	sts	0x032C, r1
			calibrationWritten = 0;
     3a6:	10 92 81 04 	sts	0x0481, r1
			demoState = 0;
     3aa:	10 92 68 04 	sts	0x0468, r1

			irCommState = 0;
     3ae:	10 92 e9 04 	sts	0x04E9, r1
     3b2:	00 91 64 04 	lds	r16, 0x0464
     3b6:	78 cf       	rjmp	.-272    	; 0x2a8 <main+0xcc>

		//if(currentSelector!=6 && currentSelector!=15) {
		//	usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		//}

		switch(currentSelector) {
     3b8:	8b 30       	cpi	r24, 0x0B	; 11
     3ba:	09 f4       	brne	.+2      	; 0x3be <main+0x1e2>
     3bc:	7b c1       	rjmp	.+758    	; 0x6b4 <main+0x4d8>
     3be:	8c 30       	cpi	r24, 0x0C	; 12
     3c0:	08 f0       	brcs	.+2      	; 0x3c4 <main+0x1e8>
     3c2:	2c c1       	rjmp	.+600    	; 0x61c <main+0x440>
     3c4:	89 30       	cpi	r24, 0x09	; 9
     3c6:	09 f4       	brne	.+2      	; 0x3ca <main+0x1ee>
     3c8:	a6 c1       	rjmp	.+844    	; 0x716 <main+0x53a>
     3ca:	8a 30       	cpi	r24, 0x0A	; 10
     3cc:	08 f4       	brcc	.+2      	; 0x3d0 <main+0x1f4>
     3ce:	97 c1       	rjmp	.+814    	; 0x6fe <main+0x522>
							break;
					}
					break;

			case 10:// obstacle avoidance with random colors; 4 seconds motion and 10 seconds pause					
					switch(demoState) {
     3d0:	80 91 68 04 	lds	r24, 0x0468
     3d4:	81 30       	cpi	r24, 0x01	; 1
     3d6:	09 f4       	brne	.+2      	; 0x3da <main+0x1fe>
     3d8:	ee c6       	rjmp	.+3548   	; 0x11b6 <main+0xfda>
     3da:	81 30       	cpi	r24, 0x01	; 1
     3dc:	08 f0       	brcs	.+2      	; 0x3e0 <main+0x204>
     3de:	cf c3       	rjmp	.+1950   	; 0xb7e <main+0x9a2>
						case 0: // get first clock tick and start moving the robot with obstacle avoidance enabled
							demoStartTime = getTime100MicroSec();
     3e0:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
     3e4:	60 93 6c 04 	sts	0x046C, r22
     3e8:	70 93 6d 04 	sts	0x046D, r23
     3ec:	80 93 6e 04 	sts	0x046E, r24
     3f0:	90 93 6f 04 	sts	0x046F, r25
							demoEndTime = getTime100MicroSec();							
     3f4:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
     3f8:	60 93 74 04 	sts	0x0474, r22
     3fc:	70 93 75 04 	sts	0x0475, r23
     400:	80 93 76 04 	sts	0x0476, r24
     404:	90 93 77 04 	sts	0x0477, r25
							demoStartTime2 = getTime100MicroSec();
     408:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
     40c:	60 93 70 04 	sts	0x0470, r22
     410:	70 93 71 04 	sts	0x0471, r23
     414:	80 93 72 04 	sts	0x0472, r24
     418:	90 93 73 04 	sts	0x0473, r25
							enableObstacleAvoidance();
     41c:	0e 94 b0 3f 	call	0x7f60	; 0x7f60 <enableObstacleAvoidance>
							setLeftSpeed(20);
     420:	84 e1       	ldi	r24, 0x14	; 20
     422:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <setLeftSpeed>
							setRightSpeed(20);
     426:	84 e1       	ldi	r24, 0x14	; 20
     428:	0e 94 ff 27 	call	0x4ffe	; 0x4ffe <setRightSpeed>
							demoState = 1;
     42c:	70 92 68 04 	sts	0x0468, r7
								demoState = 1;							
							}
							break;
					}	
					
					switch(rgbLedState) {
     430:	80 91 83 04 	lds	r24, 0x0483
     434:	81 30       	cpi	r24, 0x01	; 1
     436:	09 f4       	brne	.+2      	; 0x43a <main+0x25e>
     438:	d5 c3       	rjmp	.+1962   	; 0xbe4 <main+0xa08>
     43a:	81 30       	cpi	r24, 0x01	; 1
     43c:	08 f0       	brcs	.+2      	; 0x440 <main+0x264>
     43e:	36 c3       	rjmp	.+1644   	; 0xaac <main+0x8d0>
						case 0:							
							pwm_red = 255;
     440:	10 93 0c 02 	sts	0x020C, r17
							pwm_green = 255;
     444:	10 93 0d 02 	sts	0x020D, r17
							pwm_blue = 255;
     448:	10 93 0e 02 	sts	0x020E, r17
							if((getTime100MicroSec()-demoEndTime) >= (PAUSE_100_MSEC)) {
     44c:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
     450:	9b 01       	movw	r18, r22
     452:	ac 01       	movw	r20, r24
     454:	80 91 74 04 	lds	r24, 0x0474
     458:	90 91 75 04 	lds	r25, 0x0475
     45c:	a0 91 76 04 	lds	r26, 0x0476
     460:	b0 91 77 04 	lds	r27, 0x0477
     464:	28 1b       	sub	r18, r24
     466:	39 0b       	sbc	r19, r25
     468:	4a 0b       	sbc	r20, r26
     46a:	5b 0b       	sbc	r21, r27
     46c:	21 3c       	cpi	r18, 0xC1	; 193
     46e:	f3 e0       	ldi	r31, 0x03	; 3
     470:	3f 07       	cpc	r19, r31
     472:	f0 e0       	ldi	r31, 0x00	; 0
     474:	4f 07       	cpc	r20, r31
     476:	f0 e0       	ldi	r31, 0x00	; 0
     478:	5f 07       	cpc	r21, r31
     47a:	10 f0       	brcs	.+4      	; 0x480 <main+0x2a4>
     47c:	0c 94 78 0b 	jmp	0x16f0	; 0x16f0 <main+0x1514>
									greenLedState = 0;
								}
								setGreenLed(greenLedState, 1);
								demoEndTime = getTime100MicroSec();											
							}
							if((getTime100MicroSec()-demoStartTime2) >= (PAUSE_2_SEC)) {
     480:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
     484:	9b 01       	movw	r18, r22
     486:	ac 01       	movw	r20, r24
     488:	80 91 70 04 	lds	r24, 0x0470
     48c:	90 91 71 04 	lds	r25, 0x0471
     490:	a0 91 72 04 	lds	r26, 0x0472
     494:	b0 91 73 04 	lds	r27, 0x0473
     498:	28 1b       	sub	r18, r24
     49a:	39 0b       	sbc	r19, r25
     49c:	4a 0b       	sbc	r20, r26
     49e:	5b 0b       	sbc	r21, r27
     4a0:	2e 31       	cpi	r18, 0x1E	; 30
     4a2:	6b e4       	ldi	r22, 0x4B	; 75
     4a4:	36 07       	cpc	r19, r22
     4a6:	60 e0       	ldi	r22, 0x00	; 0
     4a8:	46 07       	cpc	r20, r22
     4aa:	60 e0       	ldi	r22, 0x00	; 0
     4ac:	56 07       	cpc	r21, r22
     4ae:	10 f0       	brcs	.+4      	; 0x4b4 <main+0x2d8>
     4b0:	0c 94 6a 0b 	jmp	0x16d4	; 0x16d4 <main+0x14f8>
								rgbLedState = 1;
								demoStartTime2 = getTime100MicroSec();
							}
							updateRedLed(pwm_red);
     4b4:	80 91 0c 02 	lds	r24, 0x020C
     4b8:	0e 94 fb 3f 	call	0x7ff6	; 0x7ff6 <updateRedLed>
							updateGreenLed(pwm_green);
     4bc:	80 91 0d 02 	lds	r24, 0x020D
     4c0:	0e 94 0f 40 	call	0x801e	; 0x801e <updateGreenLed>
							updateBlueLed(pwm_blue);
     4c4:	80 91 0e 02 	lds	r24, 0x020E
     4c8:	0e 94 23 40 	call	0x8046	; 0x8046 <updateBlueLed>
     4cc:	80 91 64 04 	lds	r24, 0x0464
					//usart0Transmit(currentOsccal,1);
					break;

		}

		if(currentSelector!=0) {
     4d0:	88 23       	and	r24, r24
     4d2:	09 f4       	brne	.+2      	; 0x4d6 <main+0x2fa>
     4d4:	24 cf       	rjmp	.-440    	; 0x31e <main+0x142>
			handleMotorsWithSpeedController();  
     4d6:	0e 94 b2 37 	call	0x6f64	; 0x6f64 <handleMotorsWithSpeedController>
     4da:	80 91 64 04 	lds	r24, 0x0464
     4de:	20 cf       	rjmp	.-448    	; 0x320 <main+0x144>
			}
		}

		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
     4e0:	0e 94 fa 20 	call	0x41f4	; 0x41f4 <readBatteryLevel>
             		
			if(currentSelector==4 || currentSelector==5) {
     4e4:	80 91 64 04 	lds	r24, 0x0464
     4e8:	98 2f       	mov	r25, r24
     4ea:	94 50       	subi	r25, 0x04	; 4
     4ec:	92 30       	cpi	r25, 0x02	; 2
     4ee:	08 f4       	brcc	.+2      	; 0x4f2 <main+0x316>
     4f0:	84 c1       	rjmp	.+776    	; 0x7fa <main+0x61e>
					}
				} else {	// do nothing => all 3 leds turned on

				}

			} else if(currentSelector==7) {
     4f2:	87 30       	cpi	r24, 0x07	; 7
     4f4:	09 f4       	brne	.+2      	; 0x4f8 <main+0x31c>
     4f6:	af c1       	rjmp	.+862    	; 0x856 <main+0x67a>

				}

				turnOffLedsTime = getTime100MicroSec();

			} else if(currentSelector==6) {
     4f8:	86 30       	cpi	r24, 0x06	; 6
     4fa:	09 f4       	brne	.+2      	; 0x4fe <main+0x322>
     4fc:	64 c1       	rjmp	.+712    	; 0x7c6 <main+0x5ea>
						rgbState = 0;
					}
				}
			}

			startTime = getTime100MicroSec();
     4fe:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
     502:	6b 01       	movw	r12, r22
     504:	7c 01       	movw	r14, r24
		}

		
		//if(calibrateOdomFlag==0) {
			handleIRRemoteCommands();
     506:	0e 94 d7 15 	call	0x2bae	; 0x2bae <handleIRRemoteCommands>
		//}


		//if(calibrateOdomFlag==0) {
			handleRFCommands();
     50a:	0e 94 5e 10 	call	0x20bc	; 0x20bc <handleRFCommands>

		//if(currentSelector!=6 && currentSelector!=15) {
		//	usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		//}

		switch(currentSelector) {
     50e:	80 91 64 04 	lds	r24, 0x0464
     512:	87 30       	cpi	r24, 0x07	; 7
     514:	09 f0       	breq	.+2      	; 0x518 <main+0x33c>
     516:	ed ce       	rjmp	.-550    	; 0x2f2 <main+0x116>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
     518:	80 91 68 04 	lds	r24, 0x0468
     51c:	82 30       	cpi	r24, 0x02	; 2
     51e:	09 f4       	brne	.+2      	; 0x522 <main+0x346>
     520:	87 c7       	rjmp	.+3854   	; 0x1430 <main+0x1254>
     522:	83 30       	cpi	r24, 0x03	; 3
     524:	08 f0       	brcs	.+2      	; 0x528 <main+0x34c>
     526:	00 c2       	rjmp	.+1024   	; 0x928 <main+0x74c>
     528:	88 23       	and	r24, r24
     52a:	09 f0       	breq	.+2      	; 0x52e <main+0x352>
     52c:	e3 c6       	rjmp	.+3526   	; 0x12f4 <main+0x1118>
						case 0:	// move around
							turnOffGreenLeds();
     52e:	0e 94 d4 40 	call	0x81a8	; 0x81a8 <turnOffGreenLeds>
							GREEN_LED0_ON;
     532:	80 91 0b 01 	lds	r24, 0x010B
     536:	8e 7f       	andi	r24, 0xFE	; 254
     538:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED1_ON;
							lineFound = 0;
     53c:	10 92 69 04 	sts	0x0469, r1
							enableObstacleAvoidance();
     540:	0e 94 b0 3f 	call	0x7f60	; 0x7f60 <enableObstacleAvoidance>
							setRightSpeed(20);
     544:	84 e1       	ldi	r24, 0x14	; 20
     546:	0e 94 ff 27 	call	0x4ffe	; 0x4ffe <setRightSpeed>
							setLeftSpeed(20);
     54a:	84 e1       	ldi	r24, 0x14	; 20
     54c:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <setLeftSpeed>
							demoEndTime = getTime100MicroSec();
     550:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
     554:	9b 01       	movw	r18, r22
     556:	ac 01       	movw	r20, r24
     558:	60 93 74 04 	sts	0x0474, r22
     55c:	70 93 75 04 	sts	0x0475, r23
     560:	80 93 76 04 	sts	0x0476, r24
     564:	90 93 77 04 	sts	0x0477, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {
     568:	80 91 6c 04 	lds	r24, 0x046C
     56c:	90 91 6d 04 	lds	r25, 0x046D
     570:	a0 91 6e 04 	lds	r26, 0x046E
     574:	b0 91 6f 04 	lds	r27, 0x046F
     578:	28 1b       	sub	r18, r24
     57a:	39 0b       	sbc	r19, r25
     57c:	4a 0b       	sbc	r20, r26
     57e:	5b 0b       	sbc	r21, r27
     580:	23 33       	cpi	r18, 0x33	; 51
     582:	9f ee       	ldi	r25, 0xEF	; 239
     584:	39 07       	cpc	r19, r25
     586:	92 e0       	ldi	r25, 0x02	; 2
     588:	49 07       	cpc	r20, r25
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	59 07       	cpc	r21, r25
     58e:	08 f4       	brcc	.+2      	; 0x592 <main+0x3b6>
     590:	91 cf       	rjmp	.-222    	; 0x4b4 <main+0x2d8>

								if(proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {
									outOfLine++;
									if(outOfLine > 250) {
										chargeContact = 0;
										demoState = 1;
     592:	70 92 68 04 	sts	0x0468, r7
										break;
     596:	8e cf       	rjmp	.-228    	; 0x4b4 <main+0x2d8>

		computeAngle();

		// turn off the rgb leds after one half second in the "charger demo"
		if(currentSelector==7) {
			if((getTime100MicroSec()-turnOffLedsTime) > PAUSE_500_MSEC) {
     598:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
     59c:	68 19       	sub	r22, r8
     59e:	79 09       	sbc	r23, r9
     5a0:	8a 09       	sbc	r24, r10
     5a2:	9b 09       	sbc	r25, r11
     5a4:	68 3c       	cpi	r22, 0xC8	; 200
     5a6:	a2 e1       	ldi	r26, 0x12	; 18
     5a8:	7a 07       	cpc	r23, r26
     5aa:	a0 e0       	ldi	r26, 0x00	; 0
     5ac:	8a 07       	cpc	r24, r26
     5ae:	a0 e0       	ldi	r26, 0x00	; 0
     5b0:	9a 07       	cpc	r25, r26
     5b2:	08 f4       	brcc	.+2      	; 0x5b6 <main+0x3da>
     5b4:	86 ce       	rjmp	.-756    	; 0x2c2 <main+0xe6>
				pwm_red = 255;
     5b6:	10 93 0c 02 	sts	0x020C, r17
				pwm_green = 255;
     5ba:	10 93 0d 02 	sts	0x020D, r17
				pwm_blue = 255;			
     5be:	10 93 0e 02 	sts	0x020E, r17
     5c2:	7f ce       	rjmp	.-770    	; 0x2c2 <main+0xe6>

		//if(currentSelector!=6 && currentSelector!=15) {
		//	usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		//}

		switch(currentSelector) {
     5c4:	85 30       	cpi	r24, 0x05	; 5
     5c6:	09 f4       	brne	.+2      	; 0x5ca <main+0x3ee>
     5c8:	e2 c0       	rjmp	.+452    	; 0x78e <main+0x5b2>
     5ca:	86 30       	cpi	r24, 0x06	; 6
     5cc:	08 f4       	brcc	.+2      	; 0x5d0 <main+0x3f4>
     5ce:	ba c0       	rjmp	.+372    	; 0x744 <main+0x568>
					setLeftSpeed(25);
					setRightSpeed(25);
					break;

			case 6:	// robot testing
					switch(menuChoice) {
     5d0:	80 91 33 04 	lds	r24, 0x0433
     5d4:	81 30       	cpi	r24, 0x01	; 1
     5d6:	09 f4       	brne	.+2      	; 0x5da <main+0x3fe>
     5d8:	81 c3       	rjmp	.+1794   	; 0xcdc <main+0xb00>
     5da:	81 30       	cpi	r24, 0x01	; 1
     5dc:	08 f0       	brcs	.+2      	; 0x5e0 <main+0x404>
     5de:	a1 c2       	rjmp	.+1346   	; 0xb22 <main+0x946>
						case 0:
							setRightSpeed(0);
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	0e 94 ff 27 	call	0x4ffe	; 0x4ffe <setRightSpeed>
							setLeftSpeed(0);
     5e6:	80 e0       	ldi	r24, 0x00	; 0
     5e8:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <setLeftSpeed>
							turnOffGreenLeds();
     5ec:	0e 94 d4 40 	call	0x81a8	; 0x81a8 <turnOffGreenLeds>
							pwm_red=255;
     5f0:	10 93 0c 02 	sts	0x020C, r17
							pwm_green=255;
     5f4:	10 93 0d 02 	sts	0x020D, r17
							pwm_blue=255;
     5f8:	10 93 0e 02 	sts	0x020E, r17
							updateRedLed(pwm_red);
     5fc:	8f ef       	ldi	r24, 0xFF	; 255
     5fe:	0e 94 fb 3f 	call	0x7ff6	; 0x7ff6 <updateRedLed>
							updateGreenLed(pwm_green);
     602:	80 91 0d 02 	lds	r24, 0x020D
     606:	0e 94 0f 40 	call	0x801e	; 0x801e <updateGreenLed>
							updateBlueLed(pwm_blue);
     60a:	80 91 0e 02 	lds	r24, 0x020E
     60e:	0e 94 23 40 	call	0x8046	; 0x8046 <updateBlueLed>
							LED_IR1_HIGH;
     612:	44 9a       	sbi	0x08, 4	; 8
							LED_IR2_HIGH;
     614:	45 9a       	sbi	0x08, 5	; 8
     616:	80 91 64 04 	lds	r24, 0x0464
							break;
     61a:	7e ce       	rjmp	.-772    	; 0x318 <main+0x13c>

		//if(currentSelector!=6 && currentSelector!=15) {
		//	usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		//}

		switch(currentSelector) {
     61c:	8d 30       	cpi	r24, 0x0D	; 13
     61e:	89 f1       	breq	.+98     	; 0x682 <main+0x4a6>
     620:	8d 30       	cpi	r24, 0x0D	; 13
     622:	d0 f0       	brcs	.+52     	; 0x658 <main+0x47c>
     624:	8e 30       	cpi	r24, 0x0E	; 14
     626:	09 f0       	breq	.+2      	; 0x62a <main+0x44e>
     628:	77 ce       	rjmp	.-786    	; 0x318 <main+0x13c>
						break;
				}
				break;
			
			case 14: // Multirobots communication: continuously change current color and make it change also for other robots
				switch(demoState) {
     62a:	80 91 68 04 	lds	r24, 0x0468
     62e:	88 23       	and	r24, r24
     630:	09 f0       	breq	.+2      	; 0x634 <main+0x458>
     632:	68 c1       	rjmp	.+720    	; 0x904 <main+0x728>
					case 0:
						irCommInit();
     634:	0e 94 0e 49 	call	0x921c	; 0x921c <irCommInit>
						demoState = 1;
     638:	70 92 68 04 	sts	0x0468, r7
						irCommRxByteExpected = 1;
     63c:	70 92 2b 05 	sts	0x052B, r7
						irCommMsgCount = 0;
     640:	10 92 00 05 	sts	0x0500, r1
     644:	80 91 64 04 	lds	r24, 0x0464
						break;
     648:	67 ce       	rjmp	.-818    	; 0x318 <main+0x13c>
             		enableCliffAvoidance();
					break;
    
			case 3:	// both obstacle and cliff avoidance enabled (the robot does not move untill commands are
					// received from the radio or tv remote)
            		enableObstacleAvoidance();
     64a:	0e 94 b0 3f 	call	0x7f60	; 0x7f60 <enableObstacleAvoidance>
					enableCliffAvoidance();
     64e:	0e 94 b7 3f 	call	0x7f6e	; 0x7f6e <enableCliffAvoidance>
     652:	80 91 64 04 	lds	r24, 0x0464
					break;
     656:	60 ce       	rjmp	.-832    	; 0x318 <main+0x13c>
						break;
				}
				break;

			case 12:	// IR local communication: 2 or more robots pass information between them in sequence
				switch(demoState) {
     658:	80 91 68 04 	lds	r24, 0x0468
     65c:	81 30       	cpi	r24, 0x01	; 1
     65e:	09 f4       	brne	.+2      	; 0x662 <main+0x486>
     660:	15 c6       	rjmp	.+3114   	; 0x128c <main+0x10b0>
     662:	81 30       	cpi	r24, 0x01	; 1
     664:	08 f0       	brcs	.+2      	; 0x668 <main+0x48c>
     666:	c0 c1       	rjmp	.+896    	; 0x9e8 <main+0x80c>
					case 0:
						irCommInit();
     668:	0e 94 0e 49 	call	0x921c	; 0x921c <irCommInit>
						irCommRobotsNum = 4;	// total number of robots that exchange data
     66c:	84 e0       	ldi	r24, 0x04	; 4
     66e:	80 93 fe 04 	sts	0x04FE, r24
						irCommRobotId = 3;		// choose the id of the robot (a different id for each robot), from 0 to 254 (255 is reserved)
     672:	93 e0       	ldi	r25, 0x03	; 3
     674:	90 93 fd 04 	sts	0x04FD, r25
							updateBlueLed(255);
							updateRedLed(255);
							updateGreenLed(128);
							demoState = 1;
						} else {
							demoState = 2;
     678:	60 92 68 04 	sts	0x0468, r6
     67c:	80 91 64 04 	lds	r24, 0x0464
     680:	4b ce       	rjmp	.-874    	; 0x318 <main+0x13c>

				}
				break;

			case 13: // IR local communication: listen and transmit continuously
				switch(demoState) {
     682:	80 91 68 04 	lds	r24, 0x0468
     686:	81 30       	cpi	r24, 0x01	; 1
     688:	09 f4       	brne	.+2      	; 0x68c <main+0x4b0>
     68a:	23 c3       	rjmp	.+1606   	; 0xcd2 <main+0xaf6>
     68c:	81 30       	cpi	r24, 0x01	; 1
     68e:	08 f0       	brcs	.+2      	; 0x692 <main+0x4b6>
     690:	e8 c1       	rjmp	.+976    	; 0xa62 <main+0x886>
					case 0:
						irCommInit();
     692:	0e 94 0e 49 	call	0x921c	; 0x921c <irCommInit>
						enableObstacleAvoidance();
     696:	0e 94 b0 3f 	call	0x7f60	; 0x7f60 <enableObstacleAvoidance>
						setLeftSpeed(10);
     69a:	8a e0       	ldi	r24, 0x0A	; 10
     69c:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <setLeftSpeed>
						setRightSpeed(10);
     6a0:	8a e0       	ldi	r24, 0x0A	; 10
     6a2:	0e 94 ff 27 	call	0x4ffe	; 0x4ffe <setRightSpeed>
						demoState = 1;
     6a6:	70 92 68 04 	sts	0x0468, r7
     6aa:	80 91 64 04 	lds	r24, 0x0464
						i = 0;
     6ae:	1a 82       	std	Y+2, r1	; 0x02
     6b0:	19 82       	std	Y+1, r1	; 0x01
						break;
     6b2:	32 ce       	rjmp	.-924    	; 0x318 <main+0x13c>

					break;

			case 11: 	// sync-react demo using the IR local communication (2 robots only): the robots move around with obstacle avoidance
						// enabled and when they detect each other they try to align towards the same direction rotating in place
				switch(demoState) {
     6b4:	80 91 68 04 	lds	r24, 0x0468
     6b8:	82 30       	cpi	r24, 0x02	; 2
     6ba:	09 f4       	brne	.+2      	; 0x6be <main+0x4e2>
     6bc:	6e c6       	rjmp	.+3292   	; 0x139a <main+0x11be>
     6be:	83 30       	cpi	r24, 0x03	; 3
     6c0:	08 f0       	brcs	.+2      	; 0x6c4 <main+0x4e8>
     6c2:	75 c1       	rjmp	.+746    	; 0x9ae <main+0x7d2>
     6c4:	88 23       	and	r24, r24
     6c6:	09 f4       	brne	.+2      	; 0x6ca <main+0x4ee>
     6c8:	93 c6       	rjmp	.+3366   	; 0x13f0 <main+0x1214>
     6ca:	81 30       	cpi	r24, 0x01	; 1
     6cc:	09 f0       	breq	.+2      	; 0x6d0 <main+0x4f4>
     6ce:	03 cf       	rjmp	.-506    	; 0x4d6 <main+0x2fa>
						irCommInit();
						demoState = 1;
						break;

					case 1:						
						enableObstacleAvoidance();
     6d0:	0e 94 b0 3f 	call	0x7f60	; 0x7f60 <enableObstacleAvoidance>
						setLeftSpeed(10);
     6d4:	8a e0       	ldi	r24, 0x0A	; 10
     6d6:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <setLeftSpeed>
						setRightSpeed(10);
     6da:	8a e0       	ldi	r24, 0x0A	; 10

					case 4:	// rotate left
						irCommTasks();
						if(theta >= targetAngle) {
							setLeftSpeed(0);
							setRightSpeed(0);
     6dc:	0e 94 ff 27 	call	0x4ffe	; 0x4ffe <setRightSpeed>
							demoState = 2;
     6e0:	60 92 68 04 	sts	0x0468, r6
							demoStartTime = getTime100MicroSec();
     6e4:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
     6e8:	60 93 6c 04 	sts	0x046C, r22
     6ec:	70 93 6d 04 	sts	0x046D, r23
     6f0:	80 93 6e 04 	sts	0x046E, r24
     6f4:	90 93 6f 04 	sts	0x046F, r25
     6f8:	80 91 64 04 	lds	r24, 0x0464
     6fc:	0d ce       	rjmp	.-998    	; 0x318 <main+0x13c>
					updateBlueLed(pwm_blue);

					break;
  
			case 8:	// motors calibration
					irEnabled = 1;
     6fe:	70 92 12 02 	sts	0x0212, r7
					if(calibrateOdomFlag==1) {
     702:	80 91 82 05 	lds	r24, 0x0582
     706:	81 30       	cpi	r24, 0x01	; 1
     708:	09 f0       	breq	.+2      	; 0x70c <main+0x530>
     70a:	e5 ce       	rjmp	.-566    	; 0x4d6 <main+0x2fa>
						handleCalibration();
     70c:	0e 94 03 29 	call	0x5206	; 0x5206 <handleCalibration>
     710:	80 91 64 04 	lds	r24, 0x0464
     714:	01 ce       	rjmp	.-1022   	; 0x318 <main+0x13c>
					break;

			case 9:	// write default calibration values; wait 2 seconds before start writing the calibration values
					// in eeprom in order to avoid rewriting the data involuntarily when moving the selector and passing 
					// through selector position 9
					switch(demoState) {
     716:	80 91 68 04 	lds	r24, 0x0468
     71a:	81 30       	cpi	r24, 0x01	; 1
     71c:	09 f4       	brne	.+2      	; 0x720 <main+0x544>
     71e:	bb c2       	rjmp	.+1398   	; 0xc96 <main+0xaba>
     720:	81 30       	cpi	r24, 0x01	; 1
     722:	08 f0       	brcs	.+2      	; 0x726 <main+0x54a>
     724:	1d c2       	rjmp	.+1082   	; 0xb60 <main+0x984>
						case 0:
							demoStartTime = getTime100MicroSec();
     726:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
     72a:	60 93 6c 04 	sts	0x046C, r22
     72e:	70 93 6d 04 	sts	0x046D, r23
     732:	80 93 6e 04 	sts	0x046E, r24
     736:	90 93 6f 04 	sts	0x046F, r25
							demoState = 1;
     73a:	70 92 68 04 	sts	0x0468, r7
     73e:	80 91 64 04 	lds	r24, 0x0464
							break;
     742:	ea cd       	rjmp	.-1068   	; 0x318 <main+0x13c>
            		enableObstacleAvoidance();
					enableCliffAvoidance();
					break;
            
			case 4:	// random colors on RGB leds; small green leds turned on
					GREEN_LED0_ON;
     744:	80 91 0b 01 	lds	r24, 0x010B
     748:	8e 7f       	andi	r24, 0xFE	; 254
     74a:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED1_ON;
     74e:	80 91 0b 01 	lds	r24, 0x010B
     752:	8d 7f       	andi	r24, 0xFD	; 253
     754:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED2_ON;
     758:	80 91 0b 01 	lds	r24, 0x010B
     75c:	8b 7f       	andi	r24, 0xFB	; 251
     75e:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED3_ON;
     762:	a3 98       	cbi	0x14, 3	; 20
					GREEN_LED4_ON;
     764:	80 91 0b 01 	lds	r24, 0x010B
     768:	8f 7e       	andi	r24, 0xEF	; 239
     76a:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED5_ON;
     76e:	80 91 0b 01 	lds	r24, 0x010B
     772:	8f 7d       	andi	r24, 0xDF	; 223
     774:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED6_ON;
     778:	80 91 0b 01 	lds	r24, 0x010B
     77c:	8f 7b       	andi	r24, 0xBF	; 191
     77e:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED7_ON;
     782:	80 91 0b 01 	lds	r24, 0x010B
     786:	8f 77       	andi	r24, 0x7F	; 127
     788:	80 93 0b 01 	sts	0x010B, r24
     78c:	93 ce       	rjmp	.-730    	; 0x4b4 <main+0x2d8>
					updateBlueLed(pwm_blue);
					break;
             
			case 5:	// random colors on RGB leds; obstacle avoidance enabled; robot start moving automatically
					// (motors speed setting)
					updateRedLed(pwm_red);
     78e:	80 91 0c 02 	lds	r24, 0x020C
     792:	0e 94 fb 3f 	call	0x7ff6	; 0x7ff6 <updateRedLed>
					updateGreenLed(pwm_green);
     796:	80 91 0d 02 	lds	r24, 0x020D
     79a:	0e 94 0f 40 	call	0x801e	; 0x801e <updateGreenLed>
					updateBlueLed(pwm_blue);
     79e:	80 91 0e 02 	lds	r24, 0x020E
     7a2:	0e 94 23 40 	call	0x8046	; 0x8046 <updateBlueLed>
					enableObstacleAvoidance();
     7a6:	0e 94 b0 3f 	call	0x7f60	; 0x7f60 <enableObstacleAvoidance>
					setLeftSpeed(25);
     7aa:	89 e1       	ldi	r24, 0x19	; 25
     7ac:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <setLeftSpeed>
					setRightSpeed(25);
     7b0:	89 e1       	ldi	r24, 0x19	; 25
     7b2:	0e 94 ff 27 	call	0x4ffe	; 0x4ffe <setRightSpeed>
     7b6:	80 91 64 04 	lds	r24, 0x0464
					break;
     7ba:	ae cd       	rjmp	.-1188   	; 0x318 <main+0x13c>
					handleMotorsWithNoController();
					break;
             
			case 1:	// obstacle avoidance enabled (the robot does not move untill commands are 
					// received from the radio or tv remote)
             		enableObstacleAvoidance();
     7bc:	0e 94 b0 3f 	call	0x7f60	; 0x7f60 <enableObstacleAvoidance>
     7c0:	80 91 64 04 	lds	r24, 0x0464
					break;
     7c4:	a9 cd       	rjmp	.-1198   	; 0x318 <main+0x13c>
				}

				turnOffLedsTime = getTime100MicroSec();

			} else if(currentSelector==6) {
				if(menuChoice==1 && rfFlags<=1) {
     7c6:	80 91 33 04 	lds	r24, 0x0433
     7ca:	81 30       	cpi	r24, 0x01	; 1
     7cc:	09 f0       	breq	.+2      	; 0x7d0 <main+0x5f4>
     7ce:	97 ce       	rjmp	.-722    	; 0x4fe <main+0x322>
     7d0:	90 91 27 03 	lds	r25, 0x0327
     7d4:	92 30       	cpi	r25, 0x02	; 2
     7d6:	08 f0       	brcs	.+2      	; 0x7da <main+0x5fe>
     7d8:	92 ce       	rjmp	.-732    	; 0x4fe <main+0x322>
					if(rgbState == 0) {
     7da:	90 91 2c 03 	lds	r25, 0x032C
     7de:	99 23       	and	r25, r25
     7e0:	11 f0       	breq	.+4      	; 0x7e6 <main+0x60a>
     7e2:	0c 94 3d 0c 	jmp	0x187a	; 0x187a <main+0x169e>
						pwm_red = 254;
     7e6:	fe ef       	ldi	r31, 0xFE	; 254
     7e8:	f0 93 0c 02 	sts	0x020C, r31
						pwm_green = 255;
     7ec:	10 93 0d 02 	sts	0x020D, r17
						pwm_blue = 255;
     7f0:	10 93 0e 02 	sts	0x020E, r17
						rgbState = 1;
     7f4:	80 93 2c 03 	sts	0x032C, r24
     7f8:	82 ce       	rjmp	.-764    	; 0x4fe <main+0x322>
		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
             		
			if(currentSelector==4 || currentSelector==5) {
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption
     7fa:	0e 94 47 59 	call	0xb28e	; 0xb28e <rand>
     7fe:	b2 01       	movw	r22, r4
     800:	0e 94 a9 58 	call	0xb152	; 0xb152 <__divmodhi4>
     804:	eb 85       	ldd	r30, Y+11	; 0x0b
     806:	fc 85       	ldd	r31, Y+12	; 0x0c
     808:	e8 0f       	add	r30, r24
     80a:	f9 1f       	adc	r31, r25
     80c:	ef 77       	andi	r30, 0x7F	; 127
     80e:	f0 70       	andi	r31, 0x00	; 0
     810:	fc 87       	std	Y+12, r31	; 0x0c
     812:	eb 87       	std	Y+11, r30	; 0x0b

				switch(rgbState) {
     814:	80 91 2c 03 	lds	r24, 0x032C
     818:	81 30       	cpi	r24, 0x01	; 1
     81a:	09 f4       	brne	.+2      	; 0x81e <main+0x642>
     81c:	02 c6       	rjmp	.+3076   	; 0x1422 <main+0x1246>
     81e:	81 30       	cpi	r24, 0x01	; 1
     820:	08 f0       	brcs	.+2      	; 0x824 <main+0x648>
     822:	f5 c4       	rjmp	.+2538   	; 0x120e <main+0x1032>
					case 0:
						pwm_red = 255 - currRand;	
     824:	8b 85       	ldd	r24, Y+11	; 0x0b
     826:	80 95       	com	r24
     828:	80 93 0c 02 	sts	0x020C, r24
						rgbState = 1;
     82c:	70 92 2c 03 	sts	0x032C, r7
						pwm_blue = 255 - currRand;
						rgbState = 0;
						break;
				}
				
				if(currRand<32) {
     830:	2b 85       	ldd	r18, Y+11	; 0x0b
     832:	3c 85       	ldd	r19, Y+12	; 0x0c
     834:	20 32       	cpi	r18, 0x20	; 32
     836:	31 05       	cpc	r19, r1
     838:	08 f0       	brcs	.+2      	; 0x83c <main+0x660>
     83a:	15 c2       	rjmp	.+1066   	; 0xc66 <main+0xa8a>
					if(pwm_green!=255 && pwm_blue!=255) {	// do not turn on all leds
     83c:	80 91 0d 02 	lds	r24, 0x020D
     840:	8f 3f       	cpi	r24, 0xFF	; 255
     842:	09 f4       	brne	.+2      	; 0x846 <main+0x66a>
     844:	5c ce       	rjmp	.-840    	; 0x4fe <main+0x322>
     846:	80 91 0e 02 	lds	r24, 0x020E
     84a:	8f 3f       	cpi	r24, 0xFF	; 255
     84c:	09 f4       	brne	.+2      	; 0x850 <main+0x674>
     84e:	57 ce       	rjmp	.-850    	; 0x4fe <main+0x322>
						pwm_red = 255;
     850:	10 93 0c 02 	sts	0x020C, r17
     854:	54 ce       	rjmp	.-856    	; 0x4fe <main+0x322>

				}

			} else if(currentSelector==7) {

				srand(TCNT3);
     856:	80 91 94 00 	lds	r24, 0x0094
     85a:	90 91 95 00 	lds	r25, 0x0095
     85e:	0e 94 4c 59 	call	0xb298	; 0xb298 <srand>
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption
     862:	0e 94 47 59 	call	0xb28e	; 0xb28e <rand>
     866:	b2 01       	movw	r22, r4
     868:	0e 94 a9 58 	call	0xb152	; 0xb152 <__divmodhi4>
     86c:	7c 01       	movw	r14, r24
     86e:	ab 85       	ldd	r26, Y+11	; 0x0b
     870:	bc 85       	ldd	r27, Y+12	; 0x0c
     872:	ea 0e       	add	r14, r26
     874:	fb 1e       	adc	r15, r27
     876:	bf e7       	ldi	r27, 0x7F	; 127
     878:	eb 22       	and	r14, r27
     87a:	ff 24       	eor	r15, r15

				pwm_red = 255 - currRand;
     87c:	8e 2d       	mov	r24, r14
     87e:	80 95       	com	r24
     880:	80 93 0c 02 	sts	0x020C, r24
				
				srand(TCNT3);
     884:	80 91 94 00 	lds	r24, 0x0094
     888:	90 91 95 00 	lds	r25, 0x0095
     88c:	0e 94 4c 59 	call	0xb298	; 0xb298 <srand>
				currRand = (currRand + rand()%30) % 128;	
     890:	0e 94 47 59 	call	0xb28e	; 0xb28e <rand>
     894:	b2 01       	movw	r22, r4
     896:	0e 94 a9 58 	call	0xb152	; 0xb152 <__divmodhi4>
     89a:	6c 01       	movw	r12, r24
     89c:	ce 0c       	add	r12, r14
     89e:	df 1c       	adc	r13, r15
     8a0:	ef e7       	ldi	r30, 0x7F	; 127
     8a2:	ce 22       	and	r12, r30
     8a4:	dd 24       	eor	r13, r13
				pwm_green = 255 - currRand;
     8a6:	8c 2d       	mov	r24, r12
     8a8:	80 95       	com	r24
     8aa:	80 93 0d 02 	sts	0x020D, r24

				srand(TCNT3);
     8ae:	80 91 94 00 	lds	r24, 0x0094
     8b2:	90 91 95 00 	lds	r25, 0x0095
     8b6:	0e 94 4c 59 	call	0xb298	; 0xb298 <srand>
				currRand = (currRand + rand()%30) % 128;
     8ba:	0e 94 47 59 	call	0xb28e	; 0xb28e <rand>
     8be:	b2 01       	movw	r22, r4
     8c0:	0e 94 a9 58 	call	0xb152	; 0xb152 <__divmodhi4>
     8c4:	8c 0d       	add	r24, r12
     8c6:	9d 1d       	adc	r25, r13
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	9c 87       	std	Y+12, r25	; 0x0c
     8ce:	8b 87       	std	Y+11, r24	; 0x0b
				pwm_blue = 255 - currRand;
     8d0:	8b 85       	ldd	r24, Y+11	; 0x0b
     8d2:	80 95       	com	r24
     8d4:	80 93 0e 02 	sts	0x020E, r24

			
				srand(TCNT3);
     8d8:	80 91 94 00 	lds	r24, 0x0094
     8dc:	90 91 95 00 	lds	r25, 0x0095
     8e0:	0e 94 4c 59 	call	0xb298	; 0xb298 <srand>
				currRand2 = rand()%128;
     8e4:	0e 94 47 59 	call	0xb28e	; 0xb28e <rand>
     8e8:	b1 01       	movw	r22, r2
     8ea:	0e 94 a9 58 	call	0xb152	; 0xb152 <__divmodhi4>
				if(currRand2<32) {
     8ee:	80 32       	cpi	r24, 0x20	; 32
     8f0:	91 05       	cpc	r25, r1
     8f2:	08 f0       	brcs	.+2      	; 0x8f6 <main+0x71a>
     8f4:	c9 c1       	rjmp	.+914    	; 0xc88 <main+0xaac>
					pwm_red = 255;
     8f6:	10 93 0c 02 	sts	0x020C, r17
					pwm_blue = 255;
				} else {	// do nothing => all 3 leds turned on

				}

				turnOffLedsTime = getTime100MicroSec();
     8fa:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
     8fe:	4b 01       	movw	r8, r22
     900:	5c 01       	movw	r10, r24
     902:	fd cd       	rjmp	.-1030   	; 0x4fe <main+0x322>
						break;
				}
				break;
			
			case 14: // Multirobots communication: continuously change current color and make it change also for other robots
				switch(demoState) {
     904:	81 30       	cpi	r24, 0x01	; 1
     906:	09 f0       	breq	.+2      	; 0x90a <main+0x72e>
     908:	e6 cd       	rjmp	.-1076   	; 0x4d6 <main+0x2fa>
						irCommRxByteExpected = 1;
						irCommMsgCount = 0;
						break;

					case 1:	
						irCommTasks();
     90a:	0e 94 f5 49 	call	0x93ea	; 0x93ea <irCommTasks>
						if(irCommDataSent()==1) {	
     90e:	0e 94 46 55 	call	0xaa8c	; 0xaa8c <irCommDataSent>
     912:	81 30       	cpi	r24, 0x01	; 1
     914:	09 f4       	brne	.+2      	; 0x918 <main+0x73c>
     916:	94 c7       	rjmp	.+3880   	; 0x1840 <main+0x1664>
							irCommSendData(irCommRxByteExpected);					
						}
						if(irCommDataAvailable()==1) {							
     918:	0e 94 4e 55 	call	0xaa9c	; 0xaa9c <irCommDataAvailable>
     91c:	81 30       	cpi	r24, 0x01	; 1
     91e:	09 f4       	brne	.+2      	; 0x922 <main+0x746>
     920:	5d c7       	rjmp	.+3770   	; 0x17dc <main+0x1600>
									updateBlueLed(235);
									break;
								case 7: 
									updateRedLed(235);
									updateGreenLed(235);
									updateBlueLed(235);
     922:	80 91 64 04 	lds	r24, 0x0464
									break;
     926:	f8 cc       	rjmp	.-1552   	; 0x318 <main+0x13c>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
     928:	84 30       	cpi	r24, 0x04	; 4
     92a:	09 f4       	brne	.+2      	; 0x92e <main+0x752>
     92c:	44 c6       	rjmp	.+3208   	; 0x15b6 <main+0x13da>
     92e:	84 30       	cpi	r24, 0x04	; 4
     930:	08 f4       	brcc	.+2      	; 0x934 <main+0x758>
     932:	fb c5       	rjmp	.+3062   	; 0x152a <main+0x134e>
     934:	85 30       	cpi	r24, 0x05	; 5
     936:	09 f0       	breq	.+2      	; 0x93a <main+0x75e>
     938:	bd cd       	rjmp	.-1158   	; 0x4b4 <main+0x2d8>
							//pwm_green = 0;
							//pwm_blue = 255;													
							break;

						case 5:	// turn around
							turnOffGreenLeds();
     93a:	0e 94 d4 40 	call	0x81a8	; 0x81a8 <turnOffGreenLeds>
							GREEN_LED6_ON;
     93e:	80 91 0b 01 	lds	r24, 0x010B
     942:	8f 7b       	andi	r24, 0xBF	; 191
     944:	80 93 0b 01 	sts	0x010B, r24
							GREEN_LED7_ON;
     948:	80 91 0b 01 	lds	r24, 0x010B
     94c:	8f 77       	andi	r24, 0x7F	; 127
     94e:	80 93 0b 01 	sts	0x010B, r24
							demoEndTime = getTime100MicroSec();
     952:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
     956:	9b 01       	movw	r18, r22
     958:	ac 01       	movw	r20, r24
     95a:	60 93 74 04 	sts	0x0474, r22
     95e:	70 93 75 04 	sts	0x0475, r23
     962:	80 93 76 04 	sts	0x0476, r24
     966:	90 93 77 04 	sts	0x0477, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_750_MSEC)) {
     96a:	80 91 6c 04 	lds	r24, 0x046C
     96e:	90 91 6d 04 	lds	r25, 0x046D
     972:	a0 91 6e 04 	lds	r26, 0x046E
     976:	b0 91 6f 04 	lds	r27, 0x046F
     97a:	28 1b       	sub	r18, r24
     97c:	39 0b       	sbc	r19, r25
     97e:	4a 0b       	sbc	r20, r26
     980:	5b 0b       	sbc	r21, r27
     982:	2b 32       	cpi	r18, 0x2B	; 43
     984:	9c e1       	ldi	r25, 0x1C	; 28
     986:	39 07       	cpc	r19, r25
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	49 07       	cpc	r20, r25
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	59 07       	cpc	r21, r25
     990:	08 f4       	brcc	.+2      	; 0x994 <main+0x7b8>
     992:	90 cd       	rjmp	.-1248   	; 0x4b4 <main+0x2d8>
								demoStartTime = getTime100MicroSec();
     994:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
     998:	60 93 6c 04 	sts	0x046C, r22
     99c:	70 93 6d 04 	sts	0x046D, r23
     9a0:	80 93 6e 04 	sts	0x046E, r24
     9a4:	90 93 6f 04 	sts	0x046F, r25
								demoState = 0;							
     9a8:	10 92 68 04 	sts	0x0468, r1
     9ac:	83 cd       	rjmp	.-1274   	; 0x4b4 <main+0x2d8>

					break;

			case 11: 	// sync-react demo using the IR local communication (2 robots only): the robots move around with obstacle avoidance
						// enabled and when they detect each other they try to align towards the same direction rotating in place
				switch(demoState) {
     9ae:	83 30       	cpi	r24, 0x03	; 3
     9b0:	09 f4       	brne	.+2      	; 0x9b4 <main+0x7d8>
     9b2:	db c4       	rjmp	.+2486   	; 0x136a <main+0x118e>
     9b4:	84 30       	cpi	r24, 0x04	; 4
     9b6:	09 f0       	breq	.+2      	; 0x9ba <main+0x7de>
     9b8:	8e cd       	rjmp	.-1252   	; 0x4d6 <main+0x2fa>
							demoStartTime = getTime100MicroSec();
						}
						break;

					case 4:	// rotate left
						irCommTasks();
     9ba:	0e 94 f5 49 	call	0x93ea	; 0x93ea <irCommTasks>
						if(theta >= targetAngle) {
     9be:	60 91 8b 04 	lds	r22, 0x048B
     9c2:	70 91 8c 04 	lds	r23, 0x048C
     9c6:	80 91 8d 04 	lds	r24, 0x048D
     9ca:	90 91 8e 04 	lds	r25, 0x048E
     9ce:	2b 81       	ldd	r18, Y+3	; 0x03
     9d0:	3c 81       	ldd	r19, Y+4	; 0x04
     9d2:	4d 81       	ldd	r20, Y+5	; 0x05
     9d4:	5e 81       	ldd	r21, Y+6	; 0x06
     9d6:	0e 94 e0 57 	call	0xafc0	; 0xafc0 <__gesf2>
     9da:	87 fd       	sbrc	r24, 7
     9dc:	a2 cf       	rjmp	.-188    	; 0x922 <main+0x746>
							setLeftSpeed(0);
     9de:	80 e0       	ldi	r24, 0x00	; 0
     9e0:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <setLeftSpeed>
							setRightSpeed(0);
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	7a ce       	rjmp	.-780    	; 0x6dc <main+0x500>
						break;
				}
				break;

			case 12:	// IR local communication: 2 or more robots pass information between them in sequence
				switch(demoState) {
     9e8:	82 30       	cpi	r24, 0x02	; 2
     9ea:	09 f4       	brne	.+2      	; 0x9ee <main+0x812>
     9ec:	1a c4       	rjmp	.+2100   	; 0x1222 <main+0x1046>
     9ee:	83 30       	cpi	r24, 0x03	; 3
     9f0:	09 f0       	breq	.+2      	; 0x9f4 <main+0x818>
     9f2:	71 cd       	rjmp	.-1310   	; 0x4d6 <main+0x2fa>
						break;

					case 3:	// led is on
							// transmission: send 0xFF untill the previous robot is turned off
							// reception: I know that it is turned off when I receive the previous robot id 
						irCommTasks();
     9f4:	0e 94 f5 49 	call	0x93ea	; 0x93ea <irCommTasks>
						if(irCommDataSent()==1) {
     9f8:	0e 94 46 55 	call	0xaa8c	; 0xaa8c <irCommDataSent>
     9fc:	81 30       	cpi	r24, 0x01	; 1
     9fe:	09 f0       	breq	.+2      	; 0xa02 <main+0x826>
     a00:	90 cf       	rjmp	.-224    	; 0x922 <main+0x746>
							if(irCommDataAvailable()==1) {
     a02:	0e 94 4e 55 	call	0xaa9c	; 0xaa9c <irCommDataAvailable>
     a06:	81 30       	cpi	r24, 0x01	; 1
     a08:	09 f0       	breq	.+2      	; 0xa0c <main+0x830>
     a0a:	8b cf       	rjmp	.-234    	; 0x922 <main+0x746>
								if(irCommLedToggle==0) {
     a0c:	90 91 ff 04 	lds	r25, 0x04FF
     a10:	99 23       	and	r25, r25
     a12:	11 f0       	breq	.+4      	; 0xa18 <main+0x83c>
     a14:	0c 94 f4 0d 	jmp	0x1be8	; 0x1be8 <main+0x1a0c>
									irCommLedToggle = 1;
     a18:	80 93 ff 04 	sts	0x04FF, r24
									updateBlueLed(255);
     a1c:	8f ef       	ldi	r24, 0xFF	; 255
     a1e:	0e 94 23 40 	call	0x8046	; 0x8046 <updateBlueLed>
									updateRedLed(255);
     a22:	8f ef       	ldi	r24, 0xFF	; 255
     a24:	0e 94 fb 3f 	call	0x7ff6	; 0x7ff6 <updateRedLed>
									updateGreenLed(128);
     a28:	80 e8       	ldi	r24, 0x80	; 128
     a2a:	0e 94 0f 40 	call	0x801e	; 0x801e <updateGreenLed>
									irCommLedToggle = 0;
									updateBlueLed(255);
									updateRedLed(255);
									updateGreenLed(235);
								}
								i = irCommReadData();
     a2e:	0e 94 51 55 	call	0xaaa2	; 0xaaa2 <irCommReadData>
     a32:	28 2f       	mov	r18, r24
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	3a 83       	std	Y+2, r19	; 0x02
     a38:	29 83       	std	Y+1, r18	; 0x01
								if(irCommRobotId == 0) {
     a3a:	80 91 fd 04 	lds	r24, 0x04FD
     a3e:	88 23       	and	r24, r24
     a40:	11 f0       	breq	.+4      	; 0xa46 <main+0x86a>
     a42:	0c 94 ea 0d 	jmp	0x1bd4	; 0x1bd4 <main+0x19f8>
									if(i == (unsigned int)(irCommRobotsNum-1)) {
     a46:	80 91 fe 04 	lds	r24, 0x04FE
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	01 97       	sbiw	r24, 0x01	; 1
     a4e:	82 17       	cp	r24, r18
     a50:	93 07       	cpc	r25, r19
     a52:	09 f4       	brne	.+2      	; 0xa56 <main+0x87a>
     a54:	c7 c4       	rjmp	.+2446   	; 0x13e4 <main+0x1208>
									}
								} else {
									if(i == (unsigned int)(irCommRobotId-1)) {
										demoState = 1;
									} else {
										irCommSendData(0xFF);
     a56:	8f ef       	ldi	r24, 0xFF	; 255
     a58:	0e 94 3d 55 	call	0xaa7a	; 0xaa7a <irCommSendData>
     a5c:	80 91 64 04 	lds	r24, 0x0464
     a60:	5b cc       	rjmp	.-1866   	; 0x318 <main+0x13c>

				}
				break;

			case 13: // IR local communication: listen and transmit continuously
				switch(demoState) {
     a62:	82 30       	cpi	r24, 0x02	; 2
     a64:	09 f0       	breq	.+2      	; 0xa68 <main+0x88c>
     a66:	37 cd       	rjmp	.-1426   	; 0x4d6 <main+0x2fa>
						irCommSendData(irCommRxByteExpected);													
						demoState = 2;
						break;

					case 2:
						irCommTasks();
     a68:	0e 94 f5 49 	call	0x93ea	; 0x93ea <irCommTasks>
						if(irCommDataSent()==1) {							
     a6c:	0e 94 46 55 	call	0xaa8c	; 0xaa8c <irCommDataSent>
     a70:	81 30       	cpi	r24, 0x01	; 1
     a72:	09 f4       	brne	.+2      	; 0xa76 <main+0x89a>
     a74:	5b c6       	rjmp	.+3254   	; 0x172c <main+0x1550>
								irCommRxByteExpected++;
							} else {
								irCommRxByteExpected = 0;
							}
						}
						if(irCommDataAvailable()==1) {
     a76:	0e 94 4e 55 	call	0xaa9c	; 0xaa9c <irCommDataAvailable>
     a7a:	81 30       	cpi	r24, 0x01	; 1
     a7c:	09 f0       	breq	.+2      	; 0xa80 <main+0x8a4>
     a7e:	51 cf       	rjmp	.-350    	; 0x922 <main+0x746>
							irCommReadData();
     a80:	0e 94 51 55 	call	0xaaa2	; 0xaaa2 <irCommReadData>
							if(i<7) {
     a84:	89 81       	ldd	r24, Y+1	; 0x01
     a86:	9a 81       	ldd	r25, Y+2	; 0x02
     a88:	87 30       	cpi	r24, 0x07	; 7
     a8a:	91 05       	cpc	r25, r1
     a8c:	08 f4       	brcc	.+2      	; 0xa90 <main+0x8b4>
     a8e:	a9 c7       	rjmp	.+3922   	; 0x19e2 <main+0x1806>
							} else {
								i = 0;
							}
							switch(i) {
								case 0: 
									updateRedLed(255);
     a90:	8f ef       	ldi	r24, 0xFF	; 255
     a92:	0e 94 fb 3f 	call	0x7ff6	; 0x7ff6 <updateRedLed>
									updateGreenLed(255);
     a96:	8f ef       	ldi	r24, 0xFF	; 255
     a98:	0e 94 0f 40 	call	0x801e	; 0x801e <updateGreenLed>
									updateBlueLed(255);
     a9c:	8f ef       	ldi	r24, 0xFF	; 255
     a9e:	0e 94 23 40 	call	0x8046	; 0x8046 <updateBlueLed>
     aa2:	80 91 64 04 	lds	r24, 0x0464
									break;
     aa6:	1a 82       	std	Y+2, r1	; 0x02
     aa8:	19 82       	std	Y+1, r1	; 0x01
     aaa:	36 cc       	rjmp	.-1940   	; 0x318 <main+0x13c>
								demoState = 1;							
							}
							break;
					}	
					
					switch(rgbLedState) {
     aac:	82 30       	cpi	r24, 0x02	; 2
     aae:	09 f0       	breq	.+2      	; 0xab2 <main+0x8d6>
     ab0:	38 cf       	rjmp	.-400    	; 0x922 <main+0x746>
							updateBlueLed(pwm_blue);
							rgbLedState = 2;
							break;

						case 2:
							if((getTime100MicroSec()-demoStartTime2) >= (PAUSE_500_MSEC)) {
     ab2:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
     ab6:	9b 01       	movw	r18, r22
     ab8:	ac 01       	movw	r20, r24
     aba:	80 91 70 04 	lds	r24, 0x0470
     abe:	90 91 71 04 	lds	r25, 0x0471
     ac2:	a0 91 72 04 	lds	r26, 0x0472
     ac6:	b0 91 73 04 	lds	r27, 0x0473
     aca:	28 1b       	sub	r18, r24
     acc:	39 0b       	sbc	r19, r25
     ace:	4a 0b       	sbc	r20, r26
     ad0:	5b 0b       	sbc	r21, r27
     ad2:	27 3c       	cpi	r18, 0xC7	; 199
     ad4:	b2 e1       	ldi	r27, 0x12	; 18
     ad6:	3b 07       	cpc	r19, r27
     ad8:	b0 e0       	ldi	r27, 0x00	; 0
     ada:	4b 07       	cpc	r20, r27
     adc:	b0 e0       	ldi	r27, 0x00	; 0
     ade:	5b 07       	cpc	r21, r27
     ae0:	08 f4       	brcc	.+2      	; 0xae4 <main+0x908>
     ae2:	1f cf       	rjmp	.-450    	; 0x922 <main+0x746>
								rgbLedState = 0;
     ae4:	10 92 83 04 	sts	0x0483, r1
								demoStartTime2 = getTime100MicroSec();
     ae8:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
     aec:	60 93 70 04 	sts	0x0470, r22
     af0:	70 93 71 04 	sts	0x0471, r23
     af4:	80 93 72 04 	sts	0x0472, r24
     af8:	90 93 73 04 	sts	0x0473, r25
								demoEndTime = getTime100MicroSec();
     afc:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
     b00:	60 93 74 04 	sts	0x0474, r22
     b04:	70 93 75 04 	sts	0x0475, r23
     b08:	80 93 76 04 	sts	0x0476, r24
     b0c:	90 93 77 04 	sts	0x0477, r25
								greenLedState = 0;
     b10:	10 92 82 04 	sts	0x0482, r1
								setGreenLed(greenLedState, 1);
     b14:	80 e0       	ldi	r24, 0x00	; 0
     b16:	61 e0       	ldi	r22, 0x01	; 1
     b18:	0e 94 37 40 	call	0x806e	; 0x806e <setGreenLed>
     b1c:	80 91 64 04 	lds	r24, 0x0464
     b20:	fb cb       	rjmp	.-2058   	; 0x318 <main+0x13c>
					setLeftSpeed(25);
					setRightSpeed(25);
					break;

			case 6:	// robot testing
					switch(menuChoice) {
     b22:	82 30       	cpi	r24, 0x02	; 2
     b24:	09 f0       	breq	.+2      	; 0xb28 <main+0x94c>
     b26:	d7 cc       	rjmp	.-1618   	; 0x4d6 <main+0x2fa>
							}

							break;

						case 2:	// address writing in eeprom
							if(addressReceived) {
     b28:	80 91 34 04 	lds	r24, 0x0434
     b2c:	88 23       	and	r24, r24
     b2e:	09 f4       	brne	.+2      	; 0xb32 <main+0x956>
     b30:	d2 cc       	rjmp	.-1628   	; 0x4d6 <main+0x2fa>
								turnOnGreenLeds();
     b32:	0e 94 ed 40 	call	0x81da	; 0x81da <turnOnGreenLeds>
								eeprom_write_word((uint16_t*)4094, rfAddress);
     b36:	60 91 25 03 	lds	r22, 0x0325
     b3a:	70 91 26 03 	lds	r23, 0x0326
     b3e:	8e ef       	ldi	r24, 0xFE	; 254
     b40:	9f e0       	ldi	r25, 0x0F	; 15
     b42:	0e 94 b2 59 	call	0xb364	; 0xb364 <__eewr_word_m2560>
								turnOffGreenLeds();
     b46:	0e 94 d4 40 	call	0x81a8	; 0x81a8 <turnOffGreenLeds>
								usart0Transmit(0xAA, 1);	// successfully written
     b4a:	8a ea       	ldi	r24, 0xAA	; 170
     b4c:	61 e0       	ldi	r22, 0x01	; 1
     b4e:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
								addressReceived = 0;
     b52:	10 92 34 04 	sts	0x0434, r1
								menuChoice = 0;
     b56:	10 92 33 04 	sts	0x0433, r1
     b5a:	80 91 64 04 	lds	r24, 0x0464
     b5e:	dc cb       	rjmp	.-2120   	; 0x318 <main+0x13c>
					break;

			case 9:	// write default calibration values; wait 2 seconds before start writing the calibration values
					// in eeprom in order to avoid rewriting the data involuntarily when moving the selector and passing 
					// through selector position 9
					switch(demoState) {
     b60:	82 30       	cpi	r24, 0x02	; 2
     b62:	09 f0       	breq	.+2      	; 0xb66 <main+0x98a>
     b64:	b8 cc       	rjmp	.-1680   	; 0x4d6 <main+0x2fa>
								demoState = 2;
							}
							break;						

						case 2:
							if(!calibrationWritten) {
     b66:	80 91 81 04 	lds	r24, 0x0481
     b6a:	88 23       	and	r24, r24
     b6c:	09 f0       	breq	.+2      	; 0xb70 <main+0x994>
     b6e:	b3 cc       	rjmp	.-1690   	; 0x4d6 <main+0x2fa>
								calibrationWritten = 1;
     b70:	70 92 81 04 	sts	0x0481, r7
								writeDefaultCalibration();
     b74:	0e 94 49 34 	call	0x6892	; 0x6892 <writeDefaultCalibration>
     b78:	80 91 64 04 	lds	r24, 0x0464
     b7c:	cd cb       	rjmp	.-2150   	; 0x318 <main+0x13c>
							break;
					}
					break;

			case 10:// obstacle avoidance with random colors; 4 seconds motion and 10 seconds pause					
					switch(demoState) {
     b7e:	82 30       	cpi	r24, 0x02	; 2
     b80:	09 f0       	breq	.+2      	; 0xb84 <main+0x9a8>
     b82:	56 cc       	rjmp	.-1876   	; 0x430 <main+0x254>
								demoState = 2;							
							}
							break;

						case 2: // pause							
							if((getTime100MicroSec()-demoStartTime) >= (PAUSE_10_SEC)) {
     b84:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
     b88:	9b 01       	movw	r18, r22
     b8a:	ac 01       	movw	r20, r24
     b8c:	80 91 6c 04 	lds	r24, 0x046C
     b90:	90 91 6d 04 	lds	r25, 0x046D
     b94:	a0 91 6e 04 	lds	r26, 0x046E
     b98:	b0 91 6f 04 	lds	r27, 0x046F
     b9c:	28 1b       	sub	r18, r24
     b9e:	39 0b       	sbc	r19, r25
     ba0:	4a 0b       	sbc	r20, r26
     ba2:	5b 0b       	sbc	r21, r27
     ba4:	2a 39       	cpi	r18, 0x9A	; 154
     ba6:	e7 e7       	ldi	r30, 0x77	; 119
     ba8:	3e 07       	cpc	r19, r30
     baa:	e1 e0       	ldi	r30, 0x01	; 1
     bac:	4e 07       	cpc	r20, r30
     bae:	e0 e0       	ldi	r30, 0x00	; 0
     bb0:	5e 07       	cpc	r21, r30
     bb2:	08 f4       	brcc	.+2      	; 0xbb6 <main+0x9da>
     bb4:	3d cc       	rjmp	.-1926   	; 0x430 <main+0x254>
								setRightSpeed(20);
     bb6:	84 e1       	ldi	r24, 0x14	; 20
     bb8:	0e 94 ff 27 	call	0x4ffe	; 0x4ffe <setRightSpeed>
								setLeftSpeed(20);								
     bbc:	84 e1       	ldi	r24, 0x14	; 20
     bbe:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <setLeftSpeed>
								demoStartTime = getTime100MicroSec();								
     bc2:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
     bc6:	60 93 6c 04 	sts	0x046C, r22
     bca:	70 93 6d 04 	sts	0x046D, r23
     bce:	80 93 6e 04 	sts	0x046E, r24
     bd2:	90 93 6f 04 	sts	0x046F, r25
								demoState = 1;							
     bd6:	70 92 68 04 	sts	0x0468, r7
							}
							break;
					}	
					
					switch(rgbLedState) {
     bda:	80 91 83 04 	lds	r24, 0x0483
     bde:	81 30       	cpi	r24, 0x01	; 1
     be0:	09 f0       	breq	.+2      	; 0xbe4 <main+0xa08>
     be2:	2b cc       	rjmp	.-1962   	; 0x43a <main+0x25e>
							updateGreenLed(pwm_green);
							updateBlueLed(pwm_blue);
							break;

						case 1:		
							turnOffGreenLeds();					
     be4:	0e 94 d4 40 	call	0x81a8	; 0x81a8 <turnOffGreenLeds>
							currRand = rand()% 128;	// 0 to 255 is the maximum, we use 0 to 127 to get brighter colors
     be8:	0e 94 47 59 	call	0xb28e	; 0xb28e <rand>
     bec:	b1 01       	movw	r22, r2
     bee:	0e 94 a9 58 	call	0xb152	; 0xb152 <__divmodhi4>
							if(currRand > 95) {
     bf2:	80 36       	cpi	r24, 0x60	; 96
     bf4:	91 05       	cpc	r25, r1
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <main+0xa1e>
     bf8:	52 c5       	rjmp	.+2724   	; 0x169e <main+0x14c2>
								pwm_red = 255;
     bfa:	10 93 0c 02 	sts	0x020C, r17
							} else {
								pwm_red = currRand;
							}

							currRand = rand()% 128;
     bfe:	0e 94 47 59 	call	0xb28e	; 0xb28e <rand>
     c02:	b1 01       	movw	r22, r2
     c04:	0e 94 a9 58 	call	0xb152	; 0xb152 <__divmodhi4>
							if(currRand > 95) {
     c08:	80 36       	cpi	r24, 0x60	; 96
     c0a:	91 05       	cpc	r25, r1
     c0c:	08 f4       	brcc	.+2      	; 0xc10 <main+0xa34>
     c0e:	44 c5       	rjmp	.+2696   	; 0x1698 <main+0x14bc>
								pwm_green = 255;
     c10:	10 93 0d 02 	sts	0x020D, r17
							} else {
								pwm_green = currRand;
							}

							currRand = rand()% 128;
     c14:	0e 94 47 59 	call	0xb28e	; 0xb28e <rand>
     c18:	b1 01       	movw	r22, r2
     c1a:	0e 94 a9 58 	call	0xb152	; 0xb152 <__divmodhi4>
							if(currRand > 95) {
     c1e:	80 36       	cpi	r24, 0x60	; 96
     c20:	91 05       	cpc	r25, r1
     c22:	08 f4       	brcc	.+2      	; 0xc26 <main+0xa4a>
     c24:	36 c5       	rjmp	.+2668   	; 0x1692 <main+0x14b6>
								pwm_blue = 255;
     c26:	10 93 0e 02 	sts	0x020E, r17
							} else {
								pwm_blue = currRand;
							}

							currRand = rand()% 200;
     c2a:	0e 94 47 59 	call	0xb28e	; 0xb28e <rand>
     c2e:	68 ec       	ldi	r22, 0xC8	; 200
     c30:	70 e0       	ldi	r23, 0x00	; 0
     c32:	0e 94 a9 58 	call	0xb152	; 0xb152 <__divmodhi4>
     c36:	9c 87       	std	Y+12, r25	; 0x0c
     c38:	8b 87       	std	Y+11, r24	; 0x0b
							if(currRand<50) {
     c3a:	82 33       	cpi	r24, 0x32	; 50
     c3c:	91 05       	cpc	r25, r1
     c3e:	08 f0       	brcs	.+2      	; 0xc42 <main+0xa66>
     c40:	1f c5       	rjmp	.+2622   	; 0x1680 <main+0x14a4>
								pwm_red = 255;
     c42:	10 93 0c 02 	sts	0x020C, r17
     c46:	8f ef       	ldi	r24, 0xFF	; 255
							} else if(currRand<100) {
								pwm_green = 255;
							} else if (currRand<150) {	
								pwm_blue = 255;
							}
							updateRedLed(pwm_red);
     c48:	0e 94 fb 3f 	call	0x7ff6	; 0x7ff6 <updateRedLed>
							updateGreenLed(pwm_green);
     c4c:	80 91 0d 02 	lds	r24, 0x020D
     c50:	0e 94 0f 40 	call	0x801e	; 0x801e <updateGreenLed>
							updateBlueLed(pwm_blue);
     c54:	80 91 0e 02 	lds	r24, 0x020E
     c58:	0e 94 23 40 	call	0x8046	; 0x8046 <updateBlueLed>
							rgbLedState = 2;
     c5c:	60 92 83 04 	sts	0x0483, r6
     c60:	80 91 64 04 	lds	r24, 0x0464
							break;
     c64:	59 cb       	rjmp	.-2382   	; 0x318 <main+0x13c>
				
				if(currRand<32) {
					if(pwm_green!=255 && pwm_blue!=255) {	// do not turn on all leds
						pwm_red = 255;
					}
				} else if(currRand<64) {
     c66:	20 34       	cpi	r18, 0x40	; 64
     c68:	31 05       	cpc	r19, r1
     c6a:	08 f0       	brcs	.+2      	; 0xc6e <main+0xa92>
     c6c:	c9 c3       	rjmp	.+1938   	; 0x1400 <main+0x1224>
					if(pwm_red!=255 && pwm_blue!=255) {
     c6e:	80 91 0c 02 	lds	r24, 0x020C
     c72:	8f 3f       	cpi	r24, 0xFF	; 255
     c74:	09 f4       	brne	.+2      	; 0xc78 <main+0xa9c>
     c76:	43 cc       	rjmp	.-1914   	; 0x4fe <main+0x322>
     c78:	80 91 0e 02 	lds	r24, 0x020E
     c7c:	8f 3f       	cpi	r24, 0xFF	; 255
     c7e:	09 f4       	brne	.+2      	; 0xc82 <main+0xaa6>
     c80:	3e cc       	rjmp	.-1924   	; 0x4fe <main+0x322>
						pwm_green = 255;
     c82:	10 93 0d 02 	sts	0x020D, r17
     c86:	3b cc       	rjmp	.-1930   	; 0x4fe <main+0x322>
			
				srand(TCNT3);
				currRand2 = rand()%128;
				if(currRand2<32) {
					pwm_red = 255;
				} else if(currRand2<64) {
     c88:	80 34       	cpi	r24, 0x40	; 64
     c8a:	91 05       	cpc	r25, r1
     c8c:	08 f0       	brcs	.+2      	; 0xc90 <main+0xab4>
     c8e:	d6 c4       	rjmp	.+2476   	; 0x163c <main+0x1460>
					pwm_green = 255;
     c90:	10 93 0d 02 	sts	0x020D, r17
     c94:	32 ce       	rjmp	.-924    	; 0x8fa <main+0x71e>
							demoStartTime = getTime100MicroSec();
							demoState = 1;
							break;

						case 1:
							if((getTime100MicroSec()-demoStartTime) >= (PAUSE_2_SEC)) {
     c96:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
     c9a:	9b 01       	movw	r18, r22
     c9c:	ac 01       	movw	r20, r24
     c9e:	80 91 6c 04 	lds	r24, 0x046C
     ca2:	90 91 6d 04 	lds	r25, 0x046D
     ca6:	a0 91 6e 04 	lds	r26, 0x046E
     caa:	b0 91 6f 04 	lds	r27, 0x046F
     cae:	28 1b       	sub	r18, r24
     cb0:	39 0b       	sbc	r19, r25
     cb2:	4a 0b       	sbc	r20, r26
     cb4:	5b 0b       	sbc	r21, r27
     cb6:	2e 31       	cpi	r18, 0x1E	; 30
     cb8:	ab e4       	ldi	r26, 0x4B	; 75
     cba:	3a 07       	cpc	r19, r26
     cbc:	a0 e0       	ldi	r26, 0x00	; 0
     cbe:	4a 07       	cpc	r20, r26
     cc0:	a0 e0       	ldi	r26, 0x00	; 0
     cc2:	5a 07       	cpc	r21, r26
     cc4:	08 f4       	brcc	.+2      	; 0xcc8 <main+0xaec>
     cc6:	2d ce       	rjmp	.-934    	; 0x922 <main+0x746>
						i = 0;
						break;

					case 1:						
						irCommSendData(irCommRxByteExpected);													
						demoState = 2;
     cc8:	60 92 68 04 	sts	0x0468, r6
     ccc:	80 91 64 04 	lds	r24, 0x0464
						break;
     cd0:	23 cb       	rjmp	.-2490   	; 0x318 <main+0x13c>
						demoState = 1;
						i = 0;
						break;

					case 1:						
						irCommSendData(irCommRxByteExpected);													
     cd2:	80 91 2b 05 	lds	r24, 0x052B
     cd6:	0e 94 3d 55 	call	0xaa7a	; 0xaa7a <irCommSendData>
     cda:	f6 cf       	rjmp	.-20     	; 0xcc8 <main+0xaec>
							break;

						case 1:	// send sensors data and activate actuators
							//setRightSpeed(20);
							//setLeftSpeed(20);
							turnOnGreenLeds();
     cdc:	0e 94 ed 40 	call	0x81da	; 0x81da <turnOnGreenLeds>
							updateRedLed(pwm_red);
     ce0:	80 91 0c 02 	lds	r24, 0x020C
     ce4:	0e 94 fb 3f 	call	0x7ff6	; 0x7ff6 <updateRedLed>
							updateGreenLed(pwm_green);
     ce8:	80 91 0d 02 	lds	r24, 0x020D
     cec:	0e 94 0f 40 	call	0x801e	; 0x801e <updateGreenLed>
							updateBlueLed(pwm_blue);
     cf0:	80 91 0e 02 	lds	r24, 0x020E
     cf4:	0e 94 23 40 	call	0x8046	; 0x8046 <updateBlueLed>
							LED_IR1_LOW;
     cf8:	44 98       	cbi	0x08, 4	; 8
							LED_IR2_LOW;
     cfa:	45 98       	cbi	0x08, 5	; 8
							
							if(getDataNow) {
     cfc:	80 91 36 04 	lds	r24, 0x0436
     d00:	88 23       	and	r24, r24
     d02:	09 f4       	brne	.+2      	; 0xd06 <main+0xb2a>
     d04:	0e ce       	rjmp	.-996    	; 0x922 <main+0x746>
								getDataNow = 0;	
     d06:	10 92 36 04 	sts	0x0436, r1
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     d0a:	80 91 69 02 	lds	r24, 0x0269
     d0e:	61 e0       	ldi	r22, 0x01	; 1
     d10:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     d14:	80 91 6a 02 	lds	r24, 0x026A
     d18:	61 e0       	ldi	r22, 0x01	; 1
     d1a:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     d1e:	80 91 39 02 	lds	r24, 0x0239
     d22:	90 91 3a 02 	lds	r25, 0x023A
     d26:	61 e0       	ldi	r22, 0x01	; 1
     d28:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     d2c:	80 91 39 02 	lds	r24, 0x0239
     d30:	90 91 3a 02 	lds	r25, 0x023A
     d34:	89 2f       	mov	r24, r25
     d36:	61 e0       	ldi	r22, 0x01	; 1
     d38:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     d3c:	80 91 6b 02 	lds	r24, 0x026B
     d40:	61 e0       	ldi	r22, 0x01	; 1
     d42:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     d46:	80 91 6c 02 	lds	r24, 0x026C
     d4a:	61 e0       	ldi	r22, 0x01	; 1
     d4c:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     d50:	80 91 3d 02 	lds	r24, 0x023D
     d54:	90 91 3e 02 	lds	r25, 0x023E
     d58:	61 e0       	ldi	r22, 0x01	; 1
     d5a:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     d5e:	80 91 3d 02 	lds	r24, 0x023D
     d62:	90 91 3e 02 	lds	r25, 0x023E
     d66:	89 2f       	mov	r24, r25
     d68:	61 e0       	ldi	r22, 0x01	; 1
     d6a:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     d6e:	80 91 6d 02 	lds	r24, 0x026D
     d72:	61 e0       	ldi	r22, 0x01	; 1
     d74:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     d78:	80 91 6e 02 	lds	r24, 0x026E
     d7c:	61 e0       	ldi	r22, 0x01	; 1
     d7e:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     d82:	80 91 41 02 	lds	r24, 0x0241
     d86:	90 91 42 02 	lds	r25, 0x0242
     d8a:	61 e0       	ldi	r22, 0x01	; 1
     d8c:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     d90:	80 91 41 02 	lds	r24, 0x0241
     d94:	90 91 42 02 	lds	r25, 0x0242
     d98:	89 2f       	mov	r24, r25
     d9a:	61 e0       	ldi	r22, 0x01	; 1
     d9c:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     da0:	80 91 6f 02 	lds	r24, 0x026F
     da4:	61 e0       	ldi	r22, 0x01	; 1
     da6:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     daa:	80 91 70 02 	lds	r24, 0x0270
     dae:	61 e0       	ldi	r22, 0x01	; 1
     db0:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     db4:	80 91 45 02 	lds	r24, 0x0245
     db8:	90 91 46 02 	lds	r25, 0x0246
     dbc:	61 e0       	ldi	r22, 0x01	; 1
     dbe:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     dc2:	80 91 45 02 	lds	r24, 0x0245
     dc6:	90 91 46 02 	lds	r25, 0x0246
     dca:	89 2f       	mov	r24, r25
     dcc:	61 e0       	ldi	r22, 0x01	; 1
     dce:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     dd2:	80 91 71 02 	lds	r24, 0x0271
     dd6:	61 e0       	ldi	r22, 0x01	; 1
     dd8:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     ddc:	80 91 72 02 	lds	r24, 0x0272
     de0:	61 e0       	ldi	r22, 0x01	; 1
     de2:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     de6:	80 91 49 02 	lds	r24, 0x0249
     dea:	90 91 4a 02 	lds	r25, 0x024A
     dee:	61 e0       	ldi	r22, 0x01	; 1
     df0:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     df4:	80 91 49 02 	lds	r24, 0x0249
     df8:	90 91 4a 02 	lds	r25, 0x024A
     dfc:	89 2f       	mov	r24, r25
     dfe:	61 e0       	ldi	r22, 0x01	; 1
     e00:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     e04:	80 91 73 02 	lds	r24, 0x0273
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     e0e:	80 91 74 02 	lds	r24, 0x0274
     e12:	61 e0       	ldi	r22, 0x01	; 1
     e14:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     e18:	80 91 4d 02 	lds	r24, 0x024D
     e1c:	90 91 4e 02 	lds	r25, 0x024E
     e20:	61 e0       	ldi	r22, 0x01	; 1
     e22:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     e26:	80 91 4d 02 	lds	r24, 0x024D
     e2a:	90 91 4e 02 	lds	r25, 0x024E
     e2e:	89 2f       	mov	r24, r25
     e30:	61 e0       	ldi	r22, 0x01	; 1
     e32:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     e36:	80 91 75 02 	lds	r24, 0x0275
     e3a:	61 e0       	ldi	r22, 0x01	; 1
     e3c:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     e40:	80 91 76 02 	lds	r24, 0x0276
     e44:	61 e0       	ldi	r22, 0x01	; 1
     e46:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     e4a:	80 91 51 02 	lds	r24, 0x0251
     e4e:	90 91 52 02 	lds	r25, 0x0252
     e52:	61 e0       	ldi	r22, 0x01	; 1
     e54:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     e58:	80 91 51 02 	lds	r24, 0x0251
     e5c:	90 91 52 02 	lds	r25, 0x0252
     e60:	89 2f       	mov	r24, r25
     e62:	61 e0       	ldi	r22, 0x01	; 1
     e64:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     e68:	80 91 77 02 	lds	r24, 0x0277
     e6c:	61 e0       	ldi	r22, 0x01	; 1
     e6e:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     e72:	80 91 78 02 	lds	r24, 0x0278
     e76:	61 e0       	ldi	r22, 0x01	; 1
     e78:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     e7c:	80 91 55 02 	lds	r24, 0x0255
     e80:	90 91 56 02 	lds	r25, 0x0256
     e84:	61 e0       	ldi	r22, 0x01	; 1
     e86:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     e8a:	80 91 55 02 	lds	r24, 0x0255
     e8e:	90 91 56 02 	lds	r25, 0x0256
     e92:	89 2f       	mov	r24, r25
     e94:	61 e0       	ldi	r22, 0x01	; 1
     e96:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     e9a:	80 91 79 02 	lds	r24, 0x0279
     e9e:	61 e0       	ldi	r22, 0x01	; 1
     ea0:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     ea4:	80 91 7a 02 	lds	r24, 0x027A
     ea8:	61 e0       	ldi	r22, 0x01	; 1
     eaa:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     eae:	80 91 59 02 	lds	r24, 0x0259
     eb2:	90 91 5a 02 	lds	r25, 0x025A
     eb6:	61 e0       	ldi	r22, 0x01	; 1
     eb8:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     ebc:	80 91 59 02 	lds	r24, 0x0259
     ec0:	90 91 5a 02 	lds	r25, 0x025A
     ec4:	89 2f       	mov	r24, r25
     ec6:	61 e0       	ldi	r22, 0x01	; 1
     ec8:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     ecc:	80 91 7b 02 	lds	r24, 0x027B
     ed0:	61 e0       	ldi	r22, 0x01	; 1
     ed2:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     ed6:	80 91 7c 02 	lds	r24, 0x027C
     eda:	61 e0       	ldi	r22, 0x01	; 1
     edc:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     ee0:	80 91 5d 02 	lds	r24, 0x025D
     ee4:	90 91 5e 02 	lds	r25, 0x025E
     ee8:	61 e0       	ldi	r22, 0x01	; 1
     eea:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     eee:	80 91 5d 02 	lds	r24, 0x025D
     ef2:	90 91 5e 02 	lds	r25, 0x025E
     ef6:	89 2f       	mov	r24, r25
     ef8:	61 e0       	ldi	r22, 0x01	; 1
     efa:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     efe:	80 91 7d 02 	lds	r24, 0x027D
     f02:	61 e0       	ldi	r22, 0x01	; 1
     f04:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     f08:	80 91 7e 02 	lds	r24, 0x027E
     f0c:	61 e0       	ldi	r22, 0x01	; 1
     f0e:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     f12:	80 91 61 02 	lds	r24, 0x0261
     f16:	90 91 62 02 	lds	r25, 0x0262
     f1a:	61 e0       	ldi	r22, 0x01	; 1
     f1c:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     f20:	80 91 61 02 	lds	r24, 0x0261
     f24:	90 91 62 02 	lds	r25, 0x0262
     f28:	89 2f       	mov	r24, r25
     f2a:	61 e0       	ldi	r22, 0x01	; 1
     f2c:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     f30:	80 91 7f 02 	lds	r24, 0x027F
     f34:	61 e0       	ldi	r22, 0x01	; 1
     f36:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     f3a:	80 91 80 02 	lds	r24, 0x0280
     f3e:	61 e0       	ldi	r22, 0x01	; 1
     f40:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     f44:	80 91 65 02 	lds	r24, 0x0265
     f48:	90 91 66 02 	lds	r25, 0x0266
     f4c:	61 e0       	ldi	r22, 0x01	; 1
     f4e:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     f52:	80 91 65 02 	lds	r24, 0x0265
     f56:	90 91 66 02 	lds	r25, 0x0266
     f5a:	89 2f       	mov	r24, r25
     f5c:	61 e0       	ldi	r22, 0x01	; 1
     f5e:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
								}
								usart0Transmit(accX&0xFF,1);
     f62:	80 91 40 04 	lds	r24, 0x0440
     f66:	61 e0       	ldi	r22, 0x01	; 1
     f68:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
								usart0Transmit(accX>>8,1);
     f6c:	80 91 41 04 	lds	r24, 0x0441
     f70:	61 e0       	ldi	r22, 0x01	; 1
     f72:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
								usart0Transmit(accY&0xFF,1);
     f76:	80 91 42 04 	lds	r24, 0x0442
     f7a:	61 e0       	ldi	r22, 0x01	; 1
     f7c:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
								usart0Transmit(accY>>8,1);
     f80:	80 91 43 04 	lds	r24, 0x0443
     f84:	61 e0       	ldi	r22, 0x01	; 1
     f86:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
								usart0Transmit(accZ&0xFF,1);
     f8a:	80 91 44 04 	lds	r24, 0x0444
     f8e:	61 e0       	ldi	r22, 0x01	; 1
     f90:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
								usart0Transmit(accZ>>8,1);
     f94:	80 91 45 04 	lds	r24, 0x0445
     f98:	61 e0       	ldi	r22, 0x01	; 1
     f9a:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
								usart0Transmit(irCommand,1);
     f9e:	80 91 37 04 	lds	r24, 0x0437
     fa2:	61 e0       	ldi	r22, 0x01	; 1
     fa4:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
								usart0Transmit(currentSelector,1);
     fa8:	80 91 64 04 	lds	r24, 0x0464
     fac:	61 e0       	ldi	r22, 0x01	; 1
     fae:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
								usart0Transmit(BUTTON0,1);
     fb2:	80 91 03 01 	lds	r24, 0x0103
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	80 72       	andi	r24, 0x20	; 32
     fba:	90 70       	andi	r25, 0x00	; 0
     fbc:	95 95       	asr	r25
     fbe:	87 95       	ror	r24
     fc0:	95 95       	asr	r25
     fc2:	87 95       	ror	r24
     fc4:	95 95       	asr	r25
     fc6:	87 95       	ror	r24
     fc8:	95 95       	asr	r25
     fca:	87 95       	ror	r24
     fcc:	95 95       	asr	r25
     fce:	87 95       	ror	r24
     fd0:	61 e0       	ldi	r22, 0x01	; 1
     fd2:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
								usart0Transmit(rfFlags,1);
     fd6:	80 91 27 03 	lds	r24, 0x0327
     fda:	61 e0       	ldi	r22, 0x01	; 1
     fdc:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
								usart0Transmit(((unsigned int)(theta*573.0))&0xFF,1);	// radians to degrees => 573 = 1800/PI
     fe0:	60 91 8b 04 	lds	r22, 0x048B
     fe4:	70 91 8c 04 	lds	r23, 0x048C
     fe8:	80 91 8d 04 	lds	r24, 0x048D
     fec:	90 91 8e 04 	lds	r25, 0x048E
     ff0:	20 e0       	ldi	r18, 0x00	; 0
     ff2:	30 e4       	ldi	r19, 0x40	; 64
     ff4:	4f e0       	ldi	r20, 0x0F	; 15
     ff6:	54 e4       	ldi	r21, 0x44	; 68
     ff8:	0e 94 eb 57 	call	0xafd6	; 0xafd6 <__mulsf3>
     ffc:	0e 94 a4 56 	call	0xad48	; 0xad48 <__fixunssfsi>
    1000:	86 2f       	mov	r24, r22
    1002:	61 e0       	ldi	r22, 0x01	; 1
    1004:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
								usart0Transmit(((unsigned int)(theta*573.0))>>8,1);
    1008:	60 91 8b 04 	lds	r22, 0x048B
    100c:	70 91 8c 04 	lds	r23, 0x048C
    1010:	80 91 8d 04 	lds	r24, 0x048D
    1014:	90 91 8e 04 	lds	r25, 0x048E
    1018:	20 e0       	ldi	r18, 0x00	; 0
    101a:	30 e4       	ldi	r19, 0x40	; 64
    101c:	4f e0       	ldi	r20, 0x0F	; 15
    101e:	54 e4       	ldi	r21, 0x44	; 68
    1020:	0e 94 eb 57 	call	0xafd6	; 0xafd6 <__mulsf3>
    1024:	0e 94 a4 56 	call	0xad48	; 0xad48 <__fixunssfsi>
    1028:	87 2f       	mov	r24, r23
    102a:	61 e0       	ldi	r22, 0x01	; 1
    102c:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
								usart0Transmit(((unsigned int)xPos)&0xFF,1);
    1030:	60 91 93 04 	lds	r22, 0x0493
    1034:	70 91 94 04 	lds	r23, 0x0494
    1038:	80 91 95 04 	lds	r24, 0x0495
    103c:	90 91 96 04 	lds	r25, 0x0496
    1040:	0e 94 a4 56 	call	0xad48	; 0xad48 <__fixunssfsi>
    1044:	86 2f       	mov	r24, r22
    1046:	61 e0       	ldi	r22, 0x01	; 1
    1048:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
								usart0Transmit(((unsigned int)xPos)>>8,1);
    104c:	60 91 93 04 	lds	r22, 0x0493
    1050:	70 91 94 04 	lds	r23, 0x0494
    1054:	80 91 95 04 	lds	r24, 0x0495
    1058:	90 91 96 04 	lds	r25, 0x0496
    105c:	0e 94 a4 56 	call	0xad48	; 0xad48 <__fixunssfsi>
    1060:	87 2f       	mov	r24, r23
    1062:	61 e0       	ldi	r22, 0x01	; 1
    1064:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
								usart0Transmit(((unsigned int)yPos)&0xFF,1);
    1068:	60 91 97 04 	lds	r22, 0x0497
    106c:	70 91 98 04 	lds	r23, 0x0498
    1070:	80 91 99 04 	lds	r24, 0x0499
    1074:	90 91 9a 04 	lds	r25, 0x049A
    1078:	0e 94 a4 56 	call	0xad48	; 0xad48 <__fixunssfsi>
    107c:	86 2f       	mov	r24, r22
    107e:	61 e0       	ldi	r22, 0x01	; 1
    1080:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
								usart0Transmit(((unsigned int)yPos)>>8,1);
    1084:	60 91 97 04 	lds	r22, 0x0497
    1088:	70 91 98 04 	lds	r23, 0x0498
    108c:	80 91 99 04 	lds	r24, 0x0499
    1090:	90 91 9a 04 	lds	r25, 0x049A
    1094:	0e 94 a4 56 	call	0xad48	; 0xad48 <__fixunssfsi>
    1098:	87 2f       	mov	r24, r23
    109a:	61 e0       	ldi	r22, 0x01	; 1
    109c:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)&0xFF,1);
    10a0:	60 91 e5 02 	lds	r22, 0x02E5
    10a4:	70 91 e6 02 	lds	r23, 0x02E6
    10a8:	80 91 e7 02 	lds	r24, 0x02E7
    10ac:	90 91 e8 02 	lds	r25, 0x02E8
    10b0:	0e 94 9f 56 	call	0xad3e	; 0xad3e <__fixsfsi>
    10b4:	86 2f       	mov	r24, r22
    10b6:	61 e0       	ldi	r22, 0x01	; 1
    10b8:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)>>8,1);
    10bc:	60 91 e5 02 	lds	r22, 0x02E5
    10c0:	70 91 e6 02 	lds	r23, 0x02E6
    10c4:	80 91 e7 02 	lds	r24, 0x02E7
    10c8:	90 91 e8 02 	lds	r25, 0x02E8
    10cc:	0e 94 9f 56 	call	0xad3e	; 0xad3e <__fixsfsi>
    10d0:	87 2f       	mov	r24, r23
    10d2:	61 e0       	ldi	r22, 0x01	; 1
    10d4:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)>>16,1);
    10d8:	60 91 e5 02 	lds	r22, 0x02E5
    10dc:	70 91 e6 02 	lds	r23, 0x02E6
    10e0:	80 91 e7 02 	lds	r24, 0x02E7
    10e4:	90 91 e8 02 	lds	r25, 0x02E8
    10e8:	0e 94 9f 56 	call	0xad3e	; 0xad3e <__fixsfsi>
    10ec:	61 e0       	ldi	r22, 0x01	; 1
    10ee:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)>>24,1);
    10f2:	60 91 e5 02 	lds	r22, 0x02E5
    10f6:	70 91 e6 02 	lds	r23, 0x02E6
    10fa:	80 91 e7 02 	lds	r24, 0x02E7
    10fe:	90 91 e8 02 	lds	r25, 0x02E8
    1102:	0e 94 9f 56 	call	0xad3e	; 0xad3e <__fixsfsi>
    1106:	89 2f       	mov	r24, r25
    1108:	61 e0       	ldi	r22, 0x01	; 1
    110a:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)&0xFF,1);
    110e:	60 91 e1 02 	lds	r22, 0x02E1
    1112:	70 91 e2 02 	lds	r23, 0x02E2
    1116:	80 91 e3 02 	lds	r24, 0x02E3
    111a:	90 91 e4 02 	lds	r25, 0x02E4
    111e:	0e 94 9f 56 	call	0xad3e	; 0xad3e <__fixsfsi>
    1122:	86 2f       	mov	r24, r22
    1124:	61 e0       	ldi	r22, 0x01	; 1
    1126:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)>>8,1);
    112a:	60 91 e1 02 	lds	r22, 0x02E1
    112e:	70 91 e2 02 	lds	r23, 0x02E2
    1132:	80 91 e3 02 	lds	r24, 0x02E3
    1136:	90 91 e4 02 	lds	r25, 0x02E4
    113a:	0e 94 9f 56 	call	0xad3e	; 0xad3e <__fixsfsi>
    113e:	87 2f       	mov	r24, r23
    1140:	61 e0       	ldi	r22, 0x01	; 1
    1142:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)>>16,1);
    1146:	60 91 e1 02 	lds	r22, 0x02E1
    114a:	70 91 e2 02 	lds	r23, 0x02E2
    114e:	80 91 e3 02 	lds	r24, 0x02E3
    1152:	90 91 e4 02 	lds	r25, 0x02E4
    1156:	0e 94 9f 56 	call	0xad3e	; 0xad3e <__fixsfsi>
    115a:	61 e0       	ldi	r22, 0x01	; 1
    115c:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)>>24,1);
    1160:	60 91 e1 02 	lds	r22, 0x02E1
    1164:	70 91 e2 02 	lds	r23, 0x02E2
    1168:	80 91 e3 02 	lds	r24, 0x02E3
    116c:	90 91 e4 02 	lds	r25, 0x02E4
    1170:	0e 94 9f 56 	call	0xad3e	; 0xad3e <__fixsfsi>
    1174:	89 2f       	mov	r24, r25
    1176:	61 e0       	ldi	r22, 0x01	; 1
    1178:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
								usart0Transmit(pwm_left_desired>>2, 1);
    117c:	80 91 0b 03 	lds	r24, 0x030B
    1180:	90 91 0c 03 	lds	r25, 0x030C
    1184:	95 95       	asr	r25
    1186:	87 95       	ror	r24
    1188:	95 95       	asr	r25
    118a:	87 95       	ror	r24
    118c:	61 e0       	ldi	r22, 0x01	; 1
    118e:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
								usart0Transmit(pwm_right_desired>>2, 1);
    1192:	80 91 09 03 	lds	r24, 0x0309
    1196:	90 91 0a 03 	lds	r25, 0x030A
    119a:	95 95       	asr	r25
    119c:	87 95       	ror	r24
    119e:	95 95       	asr	r25
    11a0:	87 95       	ror	r24
    11a2:	61 e0       	ldi	r22, 0x01	; 1
    11a4:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
    11a8:	80 91 64 04 	lds	r24, 0x0464
    11ac:	4c e0       	ldi	r20, 0x0C	; 12
    11ae:	50 e0       	ldi	r21, 0x00	; 0
    11b0:	5a 83       	std	Y+2, r21	; 0x02
    11b2:	49 83       	std	Y+1, r20	; 0x01
    11b4:	b1 c8       	rjmp	.-3742   	; 0x318 <main+0x13c>
							setLeftSpeed(20);
							setRightSpeed(20);
							demoState = 1;
							break;
						case 1: // motion					
							if((getTime100MicroSec()-demoStartTime) >= (PAUSE_4_SEC)) {
    11b6:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
    11ba:	9b 01       	movw	r18, r22
    11bc:	ac 01       	movw	r20, r24
    11be:	80 91 6c 04 	lds	r24, 0x046C
    11c2:	90 91 6d 04 	lds	r25, 0x046D
    11c6:	a0 91 6e 04 	lds	r26, 0x046E
    11ca:	b0 91 6f 04 	lds	r27, 0x046F
    11ce:	28 1b       	sub	r18, r24
    11d0:	39 0b       	sbc	r19, r25
    11d2:	4a 0b       	sbc	r20, r26
    11d4:	5b 0b       	sbc	r21, r27
    11d6:	2e 33       	cpi	r18, 0x3E	; 62
    11d8:	b6 e9       	ldi	r27, 0x96	; 150
    11da:	3b 07       	cpc	r19, r27
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	4b 07       	cpc	r20, r27
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	5b 07       	cpc	r21, r27
    11e4:	08 f4       	brcc	.+2      	; 0x11e8 <main+0x100c>
    11e6:	24 c9       	rjmp	.-3512   	; 0x430 <main+0x254>
								setRightSpeed(0);
    11e8:	80 e0       	ldi	r24, 0x00	; 0
    11ea:	0e 94 ff 27 	call	0x4ffe	; 0x4ffe <setRightSpeed>
								setLeftSpeed(0);								
    11ee:	80 e0       	ldi	r24, 0x00	; 0
    11f0:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <setLeftSpeed>
								demoStartTime = getTime100MicroSec();
    11f4:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
    11f8:	60 93 6c 04 	sts	0x046C, r22
    11fc:	70 93 6d 04 	sts	0x046D, r23
    1200:	80 93 6e 04 	sts	0x046E, r24
    1204:	90 93 6f 04 	sts	0x046F, r25
								demoState = 2;							
    1208:	60 92 68 04 	sts	0x0468, r6
    120c:	11 c9       	rjmp	.-3550   	; 0x430 <main+0x254>
			readBatteryLevel();				// the battery level is updated every two seconds
             		
			if(currentSelector==4 || currentSelector==5) {
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption

				switch(rgbState) {
    120e:	82 30       	cpi	r24, 0x02	; 2
    1210:	09 f0       	breq	.+2      	; 0x1214 <main+0x1038>
    1212:	0e cb       	rjmp	.-2532   	; 0x830 <main+0x654>
						pwm_green = 255 - currRand;
						rgbState = 2;
						break;

					case 2:
						pwm_blue = 255 - currRand;
    1214:	8b 85       	ldd	r24, Y+11	; 0x0b
    1216:	80 95       	com	r24
    1218:	80 93 0e 02 	sts	0x020E, r24
						rgbState = 0;
    121c:	10 92 2c 03 	sts	0x032C, r1
						break;
    1220:	07 cb       	rjmp	.-2546   	; 0x830 <main+0x654>
						break;

					case 2: // led is off
							// transmission: continuously send my robot id to tell the next robot I turned off the led
							// reception: listen for my robot id and then turn on the led				
						irCommTasks();
    1222:	0e 94 f5 49 	call	0x93ea	; 0x93ea <irCommTasks>
						if(irCommDataSent()==1) {
    1226:	0e 94 46 55 	call	0xaa8c	; 0xaa8c <irCommDataSent>
    122a:	81 30       	cpi	r24, 0x01	; 1
    122c:	09 f4       	brne	.+2      	; 0x1230 <main+0x1054>
    122e:	3d c3       	rjmp	.+1658   	; 0x18aa <main+0x16ce>
							irCommSendData(irCommRobotId);							
						}
						if(irCommDataAvailable()==1) {
    1230:	0e 94 4e 55 	call	0xaa9c	; 0xaa9c <irCommDataAvailable>
    1234:	81 30       	cpi	r24, 0x01	; 1
    1236:	09 f0       	breq	.+2      	; 0x123a <main+0x105e>
    1238:	74 cb       	rjmp	.-2328   	; 0x922 <main+0x746>
							if(irCommLedToggle==0) {
    123a:	90 91 ff 04 	lds	r25, 0x04FF
    123e:	99 23       	and	r25, r25
    1240:	09 f0       	breq	.+2      	; 0x1244 <main+0x1068>
    1242:	2d c3       	rjmp	.+1626   	; 0x189e <main+0x16c2>
								irCommLedToggle = 1;
    1244:	80 93 ff 04 	sts	0x04FF, r24
								updateRedLed(255);
    1248:	8f ef       	ldi	r24, 0xFF	; 255
    124a:	0e 94 fb 3f 	call	0x7ff6	; 0x7ff6 <updateRedLed>
							} else {
								irCommLedToggle = 0;
								updateRedLed(235);
							}
							i = irCommReadData();
    124e:	0e 94 51 55 	call	0xaaa2	; 0xaaa2 <irCommReadData>
    1252:	e8 2f       	mov	r30, r24
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	fa 83       	std	Y+2, r31	; 0x02
    1258:	e9 83       	std	Y+1, r30	; 0x01
							if(i == irCommRobotId) {
    125a:	80 91 fd 04 	lds	r24, 0x04FD
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	8e 17       	cp	r24, r30
    1262:	9f 07       	cpc	r25, r31
    1264:	09 f0       	breq	.+2      	; 0x1268 <main+0x108c>
    1266:	5d cb       	rjmp	.-2374   	; 0x922 <main+0x746>
								updateBlueLed(255);
    1268:	8f ef       	ldi	r24, 0xFF	; 255
    126a:	0e 94 23 40 	call	0x8046	; 0x8046 <updateBlueLed>
								updateRedLed(255);
    126e:	8f ef       	ldi	r24, 0xFF	; 255
    1270:	0e 94 fb 3f 	call	0x7ff6	; 0x7ff6 <updateRedLed>
								updateGreenLed(128);
    1274:	80 e8       	ldi	r24, 0x80	; 128
    1276:	0e 94 0f 40 	call	0x801e	; 0x801e <updateGreenLed>
								irCommSendData(0xFF);
    127a:	8f ef       	ldi	r24, 0xFF	; 255
    127c:	0e 94 3d 55 	call	0xaa7a	; 0xaa7a <irCommSendData>
								demoState = 3;					
    1280:	f3 e0       	ldi	r31, 0x03	; 3
    1282:	f0 93 68 04 	sts	0x0468, r31
    1286:	80 91 64 04 	lds	r24, 0x0464
    128a:	46 c8       	rjmp	.-3956   	; 0x318 <main+0x13c>

					case 1: // led is on
							// transmission: continuously send the next robot id to tell him to turn on the led
							// reception: listen for 0xFF and then turn off the led; when I receive 0xFF it means the next robot has
							// received its id, thus it has turned on its led
						irCommTasks();
    128c:	0e 94 f5 49 	call	0x93ea	; 0x93ea <irCommTasks>
						if(irCommDataSent()==1) {
    1290:	0e 94 46 55 	call	0xaa8c	; 0xaa8c <irCommDataSent>
    1294:	81 30       	cpi	r24, 0x01	; 1
    1296:	09 f4       	brne	.+2      	; 0x129a <main+0x10be>
    1298:	72 c2       	rjmp	.+1252   	; 0x177e <main+0x15a2>
								irCommSendData(irCommRobotId+1);
							} else {
								irCommSendData(0x00);
							}							
						}
						if(irCommDataAvailable()==1) {
    129a:	0e 94 4e 55 	call	0xaa9c	; 0xaa9c <irCommDataAvailable>
    129e:	81 30       	cpi	r24, 0x01	; 1
    12a0:	09 f0       	breq	.+2      	; 0x12a4 <main+0x10c8>
    12a2:	3f cb       	rjmp	.-2434   	; 0x922 <main+0x746>
							if(irCommLedToggle==0) {
    12a4:	90 91 ff 04 	lds	r25, 0x04FF
    12a8:	99 23       	and	r25, r25
    12aa:	09 f0       	breq	.+2      	; 0x12ae <main+0x10d2>
    12ac:	03 c3       	rjmp	.+1542   	; 0x18b4 <main+0x16d8>
								irCommLedToggle = 1;
    12ae:	80 93 ff 04 	sts	0x04FF, r24
								updateBlueLed(255);
    12b2:	8f ef       	ldi	r24, 0xFF	; 255
    12b4:	0e 94 23 40 	call	0x8046	; 0x8046 <updateBlueLed>
								updateRedLed(255);
    12b8:	8f ef       	ldi	r24, 0xFF	; 255
    12ba:	0e 94 fb 3f 	call	0x7ff6	; 0x7ff6 <updateRedLed>
								updateGreenLed(128);
    12be:	80 e8       	ldi	r24, 0x80	; 128
    12c0:	0e 94 0f 40 	call	0x801e	; 0x801e <updateGreenLed>
								irCommLedToggle = 0;
								updateBlueLed(255);
								updateRedLed(255);
								updateGreenLed(235);
							}
							i = irCommReadData();
    12c4:	0e 94 51 55 	call	0xaaa2	; 0xaaa2 <irCommReadData>
    12c8:	a8 2f       	mov	r26, r24
    12ca:	b0 e0       	ldi	r27, 0x00	; 0
    12cc:	ba 83       	std	Y+2, r27	; 0x02
    12ce:	a9 83       	std	Y+1, r26	; 0x01
							if(i == 0xFF) {
    12d0:	af 3f       	cpi	r26, 0xFF	; 255
    12d2:	b1 05       	cpc	r27, r1
    12d4:	09 f0       	breq	.+2      	; 0x12d8 <main+0x10fc>
    12d6:	25 cb       	rjmp	.-2486   	; 0x922 <main+0x746>
								demoState = 2;
    12d8:	60 92 68 04 	sts	0x0468, r6
								updateBlueLed(255);		
    12dc:	8f ef       	ldi	r24, 0xFF	; 255
    12de:	0e 94 23 40 	call	0x8046	; 0x8046 <updateBlueLed>
								updateRedLed(255);
    12e2:	8f ef       	ldi	r24, 0xFF	; 255
    12e4:	0e 94 fb 3f 	call	0x7ff6	; 0x7ff6 <updateRedLed>
								updateGreenLed(255);		
    12e8:	8f ef       	ldi	r24, 0xFF	; 255
    12ea:	0e 94 0f 40 	call	0x801e	; 0x801e <updateGreenLed>
    12ee:	80 91 64 04 	lds	r24, 0x0464
    12f2:	12 c8       	rjmp	.-4060   	; 0x318 <main+0x13c>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
    12f4:	81 30       	cpi	r24, 0x01	; 1
    12f6:	09 f0       	breq	.+2      	; 0x12fa <main+0x111e>
    12f8:	dd c8       	rjmp	.-3654   	; 0x4b4 <main+0x2d8>
							//pwm_green = 255;
							//pwm_blue = 255;
							break;

						case 1:	// search for a line
							turnOffGreenLeds();
    12fa:	0e 94 d4 40 	call	0x81a8	; 0x81a8 <turnOffGreenLeds>
							GREEN_LED2_ON;
    12fe:	80 91 0b 01 	lds	r24, 0x010B
    1302:	8b 7f       	andi	r24, 0xFB	; 251
    1304:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED3_ON;
							outOfLine = 0;
    1308:	10 92 6a 04 	sts	0x046A, r1
							enableObstacleAvoidance();
    130c:	0e 94 b0 3f 	call	0x7f60	; 0x7f60 <enableObstacleAvoidance>
							setRightSpeed(15);
    1310:	8f e0       	ldi	r24, 0x0F	; 15
    1312:	0e 94 ff 27 	call	0x4ffe	; 0x4ffe <setRightSpeed>
							setLeftSpeed(15);
    1316:	8f e0       	ldi	r24, 0x0F	; 15
    1318:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <setLeftSpeed>
							if(proximityResult[9]<LINE_IN_THR || proximityResult[10]<LINE_IN_THR || proximityResult[8]<LINE_IN_THR || proximityResult[11]<LINE_IN_THR) {
    131c:	80 91 7b 02 	lds	r24, 0x027B
    1320:	90 91 7c 02 	lds	r25, 0x027C
    1324:	a1 e0       	ldi	r26, 0x01	; 1
    1326:	80 39       	cpi	r24, 0x90	; 144
    1328:	9a 07       	cpc	r25, r26
    132a:	0c f4       	brge	.+2      	; 0x132e <main+0x1152>
    132c:	8e c1       	rjmp	.+796    	; 0x164a <main+0x146e>
    132e:	80 91 7d 02 	lds	r24, 0x027D
    1332:	90 91 7e 02 	lds	r25, 0x027E
    1336:	b1 e0       	ldi	r27, 0x01	; 1
    1338:	80 39       	cpi	r24, 0x90	; 144
    133a:	9b 07       	cpc	r25, r27
    133c:	0c f4       	brge	.+2      	; 0x1340 <main+0x1164>
    133e:	85 c1       	rjmp	.+778    	; 0x164a <main+0x146e>
    1340:	80 91 79 02 	lds	r24, 0x0279
    1344:	90 91 7a 02 	lds	r25, 0x027A
    1348:	e1 e0       	ldi	r30, 0x01	; 1
    134a:	80 39       	cpi	r24, 0x90	; 144
    134c:	9e 07       	cpc	r25, r30
    134e:	0c f4       	brge	.+2      	; 0x1352 <main+0x1176>
    1350:	7c c1       	rjmp	.+760    	; 0x164a <main+0x146e>
    1352:	80 91 7f 02 	lds	r24, 0x027F
    1356:	90 91 80 02 	lds	r25, 0x0280
    135a:	f1 e0       	ldi	r31, 0x01	; 1
    135c:	80 39       	cpi	r24, 0x90	; 144
    135e:	9f 07       	cpc	r25, r31
    1360:	0c f4       	brge	.+2      	; 0x1364 <main+0x1188>
    1362:	73 c1       	rjmp	.+742    	; 0x164a <main+0x146e>
									demoStartTime = getTime100MicroSec();
									demoState = 2;
									break;
								}
							} else {
								lineFound = 0;
    1364:	10 92 69 04 	sts	0x0469, r1
    1368:	a5 c8       	rjmp	.-3766   	; 0x4b4 <main+0x2d8>
							demoState = 1;
						}
						break;

					case 3:	// rotate right
						irCommTasks();
    136a:	0e 94 f5 49 	call	0x93ea	; 0x93ea <irCommTasks>
						if(theta <= targetAngle) {
    136e:	60 91 8b 04 	lds	r22, 0x048B
    1372:	70 91 8c 04 	lds	r23, 0x048C
    1376:	80 91 8d 04 	lds	r24, 0x048D
    137a:	90 91 8e 04 	lds	r25, 0x048E
    137e:	2b 81       	ldd	r18, Y+3	; 0x03
    1380:	3c 81       	ldd	r19, Y+4	; 0x04
    1382:	4d 81       	ldd	r20, Y+5	; 0x05
    1384:	5e 81       	ldd	r21, Y+6	; 0x06
    1386:	0e 94 30 56 	call	0xac60	; 0xac60 <__cmpsf2>
    138a:	18 16       	cp	r1, r24
    138c:	0c f4       	brge	.+2      	; 0x1390 <main+0x11b4>
    138e:	c9 ca       	rjmp	.-2670   	; 0x922 <main+0x746>
						break;

					case 4:	// rotate left
						irCommTasks();
						if(theta >= targetAngle) {
							setLeftSpeed(0);
    1390:	80 e0       	ldi	r24, 0x00	; 0
    1392:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <setLeftSpeed>
							setRightSpeed(0);
    1396:	80 e0       	ldi	r24, 0x00	; 0
    1398:	a1 c9       	rjmp	.-3262   	; 0x6dc <main+0x500>
						demoState = 2;
						demoStartTime = getTime100MicroSec();
						break;

					case 2:
						irCommTasks();
    139a:	0e 94 f5 49 	call	0x93ea	; 0x93ea <irCommTasks>
						if(irCommDataSent()==1) {
    139e:	0e 94 46 55 	call	0xaa8c	; 0xaa8c <irCommDataSent>
    13a2:	81 30       	cpi	r24, 0x01	; 1
    13a4:	09 f4       	brne	.+2      	; 0x13a8 <main+0x11cc>
    13a6:	9e c2       	rjmp	.+1340   	; 0x18e4 <main+0x1708>
							angleDegEncode = (unsigned char)((float)angleDeg*0.7084);
							irCommSendData(angleDegEncode);
						}
						if(irCommDataAvailable()==1) {
    13a8:	0e 94 4e 55 	call	0xaa9c	; 0xaa9c <irCommDataAvailable>
    13ac:	81 30       	cpi	r24, 0x01	; 1
    13ae:	09 f4       	brne	.+2      	; 0x13b2 <main+0x11d6>
    13b0:	b5 c2       	rjmp	.+1386   	; 0x191c <main+0x1740>
									demoState = 3;
								}								
							}

						}
						if((getTime100MicroSec()-demoStartTime) >= (PAUSE_5_SEC)) {
    13b2:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
    13b6:	9b 01       	movw	r18, r22
    13b8:	ac 01       	movw	r20, r24
    13ba:	80 91 6c 04 	lds	r24, 0x046C
    13be:	90 91 6d 04 	lds	r25, 0x046D
    13c2:	a0 91 6e 04 	lds	r26, 0x046E
    13c6:	b0 91 6f 04 	lds	r27, 0x046F
    13ca:	28 1b       	sub	r18, r24
    13cc:	39 0b       	sbc	r19, r25
    13ce:	4a 0b       	sbc	r20, r26
    13d0:	5b 0b       	sbc	r21, r27
    13d2:	2d 3c       	cpi	r18, 0xCD	; 205
    13d4:	6b eb       	ldi	r22, 0xBB	; 187
    13d6:	36 07       	cpc	r19, r22
    13d8:	60 e0       	ldi	r22, 0x00	; 0
    13da:	46 07       	cpc	r20, r22
    13dc:	60 e0       	ldi	r22, 0x00	; 0
    13de:	56 07       	cpc	r21, r22
    13e0:	08 f4       	brcc	.+2      	; 0x13e4 <main+0x1208>
    13e2:	9f ca       	rjmp	.-2754   	; 0x922 <main+0x746>
									} else {
										irCommSendData(0xFF);
									}
								} else {
									if(i == (unsigned int)(irCommRobotId-1)) {
										demoState = 1;
    13e4:	70 92 68 04 	sts	0x0468, r7
    13e8:	80 91 64 04 	lds	r24, 0x0464
    13ec:	0c 94 8c 01 	jmp	0x318	; 0x318 <main+0x13c>

			case 11: 	// sync-react demo using the IR local communication (2 robots only): the robots move around with obstacle avoidance
						// enabled and when they detect each other they try to align towards the same direction rotating in place
				switch(demoState) {
					case 0:
						irCommInit();
    13f0:	0e 94 0e 49 	call	0x921c	; 0x921c <irCommInit>
						demoState = 1;
    13f4:	70 92 68 04 	sts	0x0468, r7
    13f8:	80 91 64 04 	lds	r24, 0x0464
						break;
    13fc:	0c 94 8c 01 	jmp	0x318	; 0x318 <main+0x13c>
					}
				} else if(currRand<64) {
					if(pwm_red!=255 && pwm_blue!=255) {
						pwm_green = 255;
					}
				} else if (currRand<96) {
    1400:	20 36       	cpi	r18, 0x60	; 96
    1402:	31 05       	cpc	r19, r1
    1404:	08 f0       	brcs	.+2      	; 0x1408 <main+0x122c>
    1406:	7b c8       	rjmp	.-3850   	; 0x4fe <main+0x322>
					if(pwm_red!=255 && pwm_green!=255) {
    1408:	80 91 0c 02 	lds	r24, 0x020C
    140c:	8f 3f       	cpi	r24, 0xFF	; 255
    140e:	09 f4       	brne	.+2      	; 0x1412 <main+0x1236>
    1410:	76 c8       	rjmp	.-3860   	; 0x4fe <main+0x322>
    1412:	80 91 0d 02 	lds	r24, 0x020D
    1416:	8f 3f       	cpi	r24, 0xFF	; 255
    1418:	09 f4       	brne	.+2      	; 0x141c <main+0x1240>
    141a:	71 c8       	rjmp	.-3870   	; 0x4fe <main+0x322>
						pwm_blue = 255;
    141c:	10 93 0e 02 	sts	0x020E, r17
    1420:	6e c8       	rjmp	.-3876   	; 0x4fe <main+0x322>
						pwm_red = 255 - currRand;	
						rgbState = 1;
						break;

					case 1:
						pwm_green = 255 - currRand;
    1422:	8b 85       	ldd	r24, Y+11	; 0x0b
    1424:	80 95       	com	r24
    1426:	80 93 0d 02 	sts	0x020D, r24
						rgbState = 2;
    142a:	60 92 2c 03 	sts	0x032C, r6
						break;
    142e:	00 ca       	rjmp	.-3072   	; 0x830 <main+0x654>
							//pwm_green = 0;
							//pwm_blue = 255;
							break;

						case 2:	// line found, follow it
							turnOffGreenLeds();
    1430:	0e 94 d4 40 	call	0x81a8	; 0x81a8 <turnOffGreenLeds>
							GREEN_LED4_ON;
    1434:	80 91 0b 01 	lds	r24, 0x010B
    1438:	8f 7e       	andi	r24, 0xEF	; 239
    143a:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED5_ON;
							disableObstacleAvoidance();
    143e:	0e 94 b4 3f 	call	0x7f68	; 0x7f68 <disableObstacleAvoidance>

							demoEndTime = getTime100MicroSec();
    1442:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
    1446:	9b 01       	movw	r18, r22
    1448:	ac 01       	movw	r20, r24
    144a:	60 93 74 04 	sts	0x0474, r22
    144e:	70 93 75 04 	sts	0x0475, r23
    1452:	80 93 76 04 	sts	0x0476, r24
    1456:	90 93 77 04 	sts	0x0477, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {	// the robot seems to be blocked somehow
    145a:	80 91 6c 04 	lds	r24, 0x046C
    145e:	90 91 6d 04 	lds	r25, 0x046D
    1462:	a0 91 6e 04 	lds	r26, 0x046E
    1466:	b0 91 6f 04 	lds	r27, 0x046F
    146a:	28 1b       	sub	r18, r24
    146c:	39 0b       	sbc	r19, r25
    146e:	4a 0b       	sbc	r20, r26
    1470:	5b 0b       	sbc	r21, r27
    1472:	23 33       	cpi	r18, 0x33	; 51
    1474:	9f ee       	ldi	r25, 0xEF	; 239
    1476:	39 07       	cpc	r19, r25
    1478:	92 e0       	ldi	r25, 0x02	; 2
    147a:	49 07       	cpc	r20, r25
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	59 07       	cpc	r21, r25
    1480:	08 f0       	brcs	.+2      	; 0x1484 <main+0x12a8>
    1482:	e3 c1       	rjmp	.+966    	; 0x184a <main+0x166e>
								demoStartTime = getTime100MicroSec();
								demoState = 4;
								break;
							}

							if(CHARGE_ON) {
    1484:	80 91 03 01 	lds	r24, 0x0103
    1488:	84 ff       	sbrs	r24, 4
    148a:	8a c1       	rjmp	.+788    	; 0x17a0 <main+0x15c4>
								outOfLine = 0;
    148c:	10 92 6a 04 	sts	0x046A, r1
								chargeContact++;
    1490:	80 91 6b 04 	lds	r24, 0x046B
    1494:	8f 5f       	subi	r24, 0xFF	; 255
    1496:	80 93 6b 04 	sts	0x046B, r24
								if(chargeContact > 20) {
    149a:	85 31       	cpi	r24, 0x15	; 21
    149c:	08 f0       	brcs	.+2      	; 0x14a0 <main+0x12c4>
    149e:	c5 c2       	rjmp	.+1418   	; 0x1a2a <main+0x184e>
    14a0:	20 91 7b 02 	lds	r18, 0x027B
    14a4:	30 91 7c 02 	lds	r19, 0x027C
								} else {
									outOfLine = 0;
								}
							}
							
							if(proximityResult[8]<LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR && proximityResult[11]>LINE_OUT_THR) {	// left ground is the only within the black line => turn left
    14a8:	40 91 79 02 	lds	r20, 0x0279
    14ac:	50 91 7a 02 	lds	r21, 0x027A
    14b0:	61 e0       	ldi	r22, 0x01	; 1
    14b2:	42 3c       	cpi	r20, 0xC2	; 194
    14b4:	56 07       	cpc	r21, r22
    14b6:	ac f4       	brge	.+42     	; 0x14e2 <main+0x1306>
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	23 3c       	cpi	r18, 0xC3	; 195
    14bc:	38 07       	cpc	r19, r24
    14be:	8c f0       	brlt	.+34     	; 0x14e2 <main+0x1306>
    14c0:	80 91 7d 02 	lds	r24, 0x027D
    14c4:	90 91 7e 02 	lds	r25, 0x027E
    14c8:	a1 e0       	ldi	r26, 0x01	; 1
    14ca:	83 3c       	cpi	r24, 0xC3	; 195
    14cc:	9a 07       	cpc	r25, r26
    14ce:	4c f0       	brlt	.+18     	; 0x14e2 <main+0x1306>
    14d0:	80 91 7f 02 	lds	r24, 0x027F
    14d4:	90 91 80 02 	lds	r25, 0x0280
    14d8:	b1 e0       	ldi	r27, 0x01	; 1
    14da:	83 3c       	cpi	r24, 0xC3	; 195
    14dc:	9b 07       	cpc	r25, r27
    14de:	0c f0       	brlt	.+2      	; 0x14e2 <main+0x1306>
    14e0:	9d c3       	rjmp	.+1850   	; 0x1c1c <main+0x1a40>
								setLeftSpeed(-10);
								setRightSpeed(15);
							} else if(proximityResult[11]<LINE_OUT_THR && proximityResult[8]>LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {	// right ground is the only within the black line => turn right
    14e2:	80 91 7f 02 	lds	r24, 0x027F
    14e6:	90 91 80 02 	lds	r25, 0x0280
    14ea:	e1 e0       	ldi	r30, 0x01	; 1
    14ec:	82 3c       	cpi	r24, 0xC2	; 194
    14ee:	9e 07       	cpc	r25, r30
    14f0:	0c f0       	brlt	.+2      	; 0x14f4 <main+0x1318>
    14f2:	2f c1       	rjmp	.+606    	; 0x1752 <main+0x1576>
    14f4:	f1 e0       	ldi	r31, 0x01	; 1
    14f6:	43 3c       	cpi	r20, 0xC3	; 195
    14f8:	5f 07       	cpc	r21, r31
    14fa:	0c f4       	brge	.+2      	; 0x14fe <main+0x1322>
    14fc:	2a c1       	rjmp	.+596    	; 0x1752 <main+0x1576>
    14fe:	41 e0       	ldi	r20, 0x01	; 1
    1500:	23 3c       	cpi	r18, 0xC3	; 195
    1502:	34 07       	cpc	r19, r20
    1504:	0c f4       	brge	.+2      	; 0x1508 <main+0x132c>
    1506:	2a c1       	rjmp	.+596    	; 0x175c <main+0x1580>
    1508:	80 91 7d 02 	lds	r24, 0x027D
    150c:	90 91 7e 02 	lds	r25, 0x027E
    1510:	51 e0       	ldi	r21, 0x01	; 1
    1512:	83 3c       	cpi	r24, 0xC3	; 195
    1514:	95 07       	cpc	r25, r21
    1516:	0c f0       	brlt	.+2      	; 0x151a <main+0x133e>
    1518:	89 c3       	rjmp	.+1810   	; 0x1c2c <main+0x1a50>
								setLeftSpeed(15);
								setRightSpeed(-10);
							} else if(proximityResult[9]>LINE_OUT_THR) {	// center left is leaving the line => turn right
								setLeftSpeed(15);
    151a:	8f e0       	ldi	r24, 0x0F	; 15
    151c:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <setLeftSpeed>
								setRightSpeed(-5);
    1520:	8b ef       	ldi	r24, 0xFB	; 251
    1522:	0e 94 ff 27 	call	0x4ffe	; 0x4ffe <setRightSpeed>
    1526:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <main+0x2d8>
							//pwm_green = 255;
							//pwm_blue = 0;
							break;

						case 3:	// charge for some time
							turnOffGreenLeds();
    152a:	0e 94 d4 40 	call	0x81a8	; 0x81a8 <turnOffGreenLeds>
							GREEN_LED6_ON;
    152e:	80 91 0b 01 	lds	r24, 0x010B
    1532:	8f 7b       	andi	r24, 0xBF	; 191
    1534:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED7_ON;
							demoEndTime = getTime100MicroSec();
    1538:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
    153c:	9b 01       	movw	r18, r22
    153e:	ac 01       	movw	r20, r24
    1540:	60 93 74 04 	sts	0x0474, r22
    1544:	70 93 75 04 	sts	0x0475, r23
    1548:	80 93 76 04 	sts	0x0476, r24
    154c:	90 93 77 04 	sts	0x0477, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_30_SEC)) {
    1550:	80 91 6c 04 	lds	r24, 0x046C
    1554:	90 91 6d 04 	lds	r25, 0x046D
    1558:	a0 91 6e 04 	lds	r26, 0x046E
    155c:	b0 91 6f 04 	lds	r27, 0x046F
    1560:	28 1b       	sub	r18, r24
    1562:	39 0b       	sbc	r19, r25
    1564:	4a 0b       	sbc	r20, r26
    1566:	5b 0b       	sbc	r21, r27
    1568:	2d 3c       	cpi	r18, 0xCD	; 205
    156a:	96 e6       	ldi	r25, 0x66	; 102
    156c:	39 07       	cpc	r19, r25
    156e:	94 e0       	ldi	r25, 0x04	; 4
    1570:	49 07       	cpc	r20, r25
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	59 07       	cpc	r21, r25
    1576:	08 f4       	brcc	.+2      	; 0x157a <main+0x139e>
    1578:	95 c0       	rjmp	.+298    	; 0x16a4 <main+0x14c8>
								if(batteryLevel<890) {//860) {	// stay in charge if too much discharged (consider the fact that the robot
    157a:	80 91 cd 02 	lds	r24, 0x02CD
    157e:	90 91 ce 02 	lds	r25, 0x02CE
    1582:	a3 e0       	ldi	r26, 0x03	; 3
    1584:	8a 37       	cpi	r24, 0x7A	; 122
    1586:	9a 07       	cpc	r25, r26
    1588:	08 f4       	brcc	.+2      	; 0x158c <main+0x13b0>
    158a:	98 c0       	rjmp	.+304    	; 0x16bc <main+0x14e0>
														// is still in charge thus the battery value measured is higher)
									demoStartTime = getTime100MicroSec();
									break;
								} else {
									setRightSpeed(-13);
    158c:	83 ef       	ldi	r24, 0xF3	; 243
    158e:	0e 94 ff 27 	call	0x4ffe	; 0x4ffe <setRightSpeed>
									setLeftSpeed(-13);
    1592:	83 ef       	ldi	r24, 0xF3	; 243
    1594:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <setLeftSpeed>
									demoStartTime = getTime100MicroSec();
    1598:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
    159c:	60 93 6c 04 	sts	0x046C, r22
    15a0:	70 93 6d 04 	sts	0x046D, r23
    15a4:	80 93 6e 04 	sts	0x046E, r24
    15a8:	90 93 6f 04 	sts	0x046F, r25
									demoState = 4;
    15ac:	b4 e0       	ldi	r27, 0x04	; 4
    15ae:	b0 93 68 04 	sts	0x0468, r27
									break;
    15b2:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <main+0x2d8>
							//pwm_green = 255;
							//pwm_blue = 0;
							break;
						
						case 4: // go back from charger
							turnOffGreenLeds();
    15b6:	0e 94 d4 40 	call	0x81a8	; 0x81a8 <turnOffGreenLeds>
							GREEN_LED6_ON;
    15ba:	80 91 0b 01 	lds	r24, 0x010B
    15be:	8f 7b       	andi	r24, 0xBF	; 191
    15c0:	80 93 0b 01 	sts	0x010B, r24
							GREEN_LED7_ON;
    15c4:	80 91 0b 01 	lds	r24, 0x010B
    15c8:	8f 77       	andi	r24, 0x7F	; 127
    15ca:	80 93 0b 01 	sts	0x010B, r24
							demoEndTime = getTime100MicroSec();
    15ce:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
    15d2:	9b 01       	movw	r18, r22
    15d4:	ac 01       	movw	r20, r24
    15d6:	60 93 74 04 	sts	0x0474, r22
    15da:	70 93 75 04 	sts	0x0475, r23
    15de:	80 93 76 04 	sts	0x0476, r24
    15e2:	90 93 77 04 	sts	0x0477, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_1_SEC)) {
    15e6:	80 91 6c 04 	lds	r24, 0x046C
    15ea:	90 91 6d 04 	lds	r25, 0x046D
    15ee:	a0 91 6e 04 	lds	r26, 0x046E
    15f2:	b0 91 6f 04 	lds	r27, 0x046F
    15f6:	28 1b       	sub	r18, r24
    15f8:	39 0b       	sbc	r19, r25
    15fa:	4a 0b       	sbc	r20, r26
    15fc:	5b 0b       	sbc	r21, r27
    15fe:	2f 38       	cpi	r18, 0x8F	; 143
    1600:	95 e2       	ldi	r25, 0x25	; 37
    1602:	39 07       	cpc	r19, r25
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	49 07       	cpc	r20, r25
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	59 07       	cpc	r21, r25
    160c:	10 f4       	brcc	.+4      	; 0x1612 <main+0x1436>
    160e:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <main+0x2d8>
								setRightSpeed(20);
    1612:	84 e1       	ldi	r24, 0x14	; 20
    1614:	0e 94 ff 27 	call	0x4ffe	; 0x4ffe <setRightSpeed>
								setLeftSpeed(-20);								
    1618:	8c ee       	ldi	r24, 0xEC	; 236
    161a:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <setLeftSpeed>
								demoStartTime = getTime100MicroSec();
    161e:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
    1622:	60 93 6c 04 	sts	0x046C, r22
    1626:	70 93 6d 04 	sts	0x046D, r23
    162a:	80 93 6e 04 	sts	0x046E, r24
    162e:	90 93 6f 04 	sts	0x046F, r25
								demoState = 5;							
    1632:	a5 e0       	ldi	r26, 0x05	; 5
    1634:	a0 93 68 04 	sts	0x0468, r26
    1638:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <main+0x2d8>
				currRand2 = rand()%128;
				if(currRand2<32) {
					pwm_red = 255;
				} else if(currRand2<64) {
					pwm_green = 255;
				} else if (currRand2<96) {
    163c:	80 36       	cpi	r24, 0x60	; 96
    163e:	91 05       	cpc	r25, r1
    1640:	08 f0       	brcs	.+2      	; 0x1644 <main+0x1468>
    1642:	5b c9       	rjmp	.-3402   	; 0x8fa <main+0x71e>
					pwm_blue = 255;
    1644:	10 93 0e 02 	sts	0x020E, r17
    1648:	58 c9       	rjmp	.-3408   	; 0x8fa <main+0x71e>
							outOfLine = 0;
							enableObstacleAvoidance();
							setRightSpeed(15);
							setLeftSpeed(15);
							if(proximityResult[9]<LINE_IN_THR || proximityResult[10]<LINE_IN_THR || proximityResult[8]<LINE_IN_THR || proximityResult[11]<LINE_IN_THR) {
								lineFound++;
    164a:	80 91 69 04 	lds	r24, 0x0469
    164e:	8f 5f       	subi	r24, 0xFF	; 255
    1650:	80 93 69 04 	sts	0x0469, r24
								if(lineFound > 10) {
    1654:	8b 30       	cpi	r24, 0x0B	; 11
    1656:	10 f4       	brcc	.+4      	; 0x165c <main+0x1480>
    1658:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <main+0x2d8>
									outOfLine = 0;
    165c:	10 92 6a 04 	sts	0x046A, r1
									chargeContact = 0;
    1660:	10 92 6b 04 	sts	0x046B, r1
									demoStartTime = getTime100MicroSec();
    1664:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
    1668:	60 93 6c 04 	sts	0x046C, r22
    166c:	70 93 6d 04 	sts	0x046D, r23
    1670:	80 93 6e 04 	sts	0x046E, r24
    1674:	90 93 6f 04 	sts	0x046F, r25
									demoState = 2;
    1678:	60 92 68 04 	sts	0x0468, r6
									break;
    167c:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <main+0x2d8>
							}

							currRand = rand()% 200;
							if(currRand<50) {
								pwm_red = 255;
							} else if(currRand<100) {
    1680:	84 36       	cpi	r24, 0x64	; 100
    1682:	91 05       	cpc	r25, r1
    1684:	08 f0       	brcs	.+2      	; 0x1688 <main+0x14ac>
    1686:	5d c0       	rjmp	.+186    	; 0x1742 <main+0x1566>
								pwm_green = 255;
    1688:	10 93 0d 02 	sts	0x020D, r17
    168c:	80 91 0c 02 	lds	r24, 0x020C
    1690:	db ca       	rjmp	.-2634   	; 0xc48 <main+0xa6c>

							currRand = rand()% 128;
							if(currRand > 95) {
								pwm_blue = 255;
							} else {
								pwm_blue = currRand;
    1692:	80 93 0e 02 	sts	0x020E, r24
    1696:	c9 ca       	rjmp	.-2670   	; 0xc2a <main+0xa4e>

							currRand = rand()% 128;
							if(currRand > 95) {
								pwm_green = 255;
							} else {
								pwm_green = currRand;
    1698:	80 93 0d 02 	sts	0x020D, r24
    169c:	bb ca       	rjmp	.-2698   	; 0xc14 <main+0xa38>
							turnOffGreenLeds();					
							currRand = rand()% 128;	// 0 to 255 is the maximum, we use 0 to 127 to get brighter colors
							if(currRand > 95) {
								pwm_red = 255;
							} else {
								pwm_red = currRand;
    169e:	80 93 0c 02 	sts	0x020C, r24
    16a2:	ad ca       	rjmp	.-2726   	; 0xbfe <main+0xa22>
									demoStartTime = getTime100MicroSec();
									demoState = 4;
									break;
								}
							}
							if(!CHARGE_ON) {
    16a4:	80 91 03 01 	lds	r24, 0x0103
    16a8:	84 ff       	sbrs	r24, 4
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <main+0x14d4>
    16ac:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <main+0x2d8>
								chargeContact = 0;
    16b0:	10 92 6b 04 	sts	0x046B, r1
								outOfLine = 0;
    16b4:	10 92 6a 04 	sts	0x046A, r1
								demoState = 2;
    16b8:	60 92 68 04 	sts	0x0468, r6
								demoStartTime = getTime100MicroSec();
    16bc:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
    16c0:	60 93 6c 04 	sts	0x046C, r22
    16c4:	70 93 6d 04 	sts	0x046D, r23
    16c8:	80 93 6e 04 	sts	0x046E, r24
    16cc:	90 93 6f 04 	sts	0x046F, r25
								break;						
    16d0:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <main+0x2d8>
								}
								setGreenLed(greenLedState, 1);
								demoEndTime = getTime100MicroSec();											
							}
							if((getTime100MicroSec()-demoStartTime2) >= (PAUSE_2_SEC)) {
								rgbLedState = 1;
    16d4:	70 92 83 04 	sts	0x0483, r7
								demoStartTime2 = getTime100MicroSec();
    16d8:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
    16dc:	60 93 70 04 	sts	0x0470, r22
    16e0:	70 93 71 04 	sts	0x0471, r23
    16e4:	80 93 72 04 	sts	0x0472, r24
    16e8:	90 93 73 04 	sts	0x0473, r25
    16ec:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <main+0x2d8>
						case 0:							
							pwm_red = 255;
							pwm_green = 255;
							pwm_blue = 255;
							if((getTime100MicroSec()-demoEndTime) >= (PAUSE_100_MSEC)) {
								setGreenLed(greenLedState, 0);
    16f0:	80 91 82 04 	lds	r24, 0x0482
    16f4:	60 e0       	ldi	r22, 0x00	; 0
    16f6:	0e 94 37 40 	call	0x806e	; 0x806e <setGreenLed>
								greenLedState++;
    16fa:	80 91 82 04 	lds	r24, 0x0482
    16fe:	8f 5f       	subi	r24, 0xFF	; 255
    1700:	80 93 82 04 	sts	0x0482, r24
								if(greenLedState > 7) {
    1704:	88 30       	cpi	r24, 0x08	; 8
    1706:	18 f0       	brcs	.+6      	; 0x170e <main+0x1532>
									greenLedState = 0;
    1708:	10 92 82 04 	sts	0x0482, r1
    170c:	80 e0       	ldi	r24, 0x00	; 0
								}
								setGreenLed(greenLedState, 1);
    170e:	61 e0       	ldi	r22, 0x01	; 1
    1710:	0e 94 37 40 	call	0x806e	; 0x806e <setGreenLed>
								demoEndTime = getTime100MicroSec();											
    1714:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
    1718:	60 93 74 04 	sts	0x0474, r22
    171c:	70 93 75 04 	sts	0x0475, r23
    1720:	80 93 76 04 	sts	0x0476, r24
    1724:	90 93 77 04 	sts	0x0477, r25
    1728:	0c 94 40 02 	jmp	0x480	; 0x480 <main+0x2a4>
						break;

					case 2:
						irCommTasks();
						if(irCommDataSent()==1) {							
							demoState = 1;
    172c:	80 93 68 04 	sts	0x0468, r24
							if(irCommRxByteExpected<255) {
    1730:	80 91 2b 05 	lds	r24, 0x052B
    1734:	8f 3f       	cpi	r24, 0xFF	; 255
    1736:	09 f4       	brne	.+2      	; 0x173a <main+0x155e>
    1738:	51 c1       	rjmp	.+674    	; 0x19dc <main+0x1800>
								irCommRxByteExpected++;
    173a:	8f 5f       	subi	r24, 0xFF	; 255
    173c:	80 93 2b 05 	sts	0x052B, r24
    1740:	9a c9       	rjmp	.-3276   	; 0xa76 <main+0x89a>
							currRand = rand()% 200;
							if(currRand<50) {
								pwm_red = 255;
							} else if(currRand<100) {
								pwm_green = 255;
							} else if (currRand<150) {	
    1742:	86 39       	cpi	r24, 0x96	; 150
    1744:	91 05       	cpc	r25, r1
    1746:	10 f4       	brcc	.+4      	; 0x174c <main+0x1570>
								pwm_blue = 255;
    1748:	10 93 0e 02 	sts	0x020E, r17
    174c:	80 91 0c 02 	lds	r24, 0x020C
    1750:	7b ca       	rjmp	.-2826   	; 0xc48 <main+0xa6c>
								setLeftSpeed(-10);
								setRightSpeed(15);
							} else if(proximityResult[11]<LINE_OUT_THR && proximityResult[8]>LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {	// right ground is the only within the black line => turn right
								setLeftSpeed(15);
								setRightSpeed(-10);
							} else if(proximityResult[9]>LINE_OUT_THR) {	// center left is leaving the line => turn right
    1752:	61 e0       	ldi	r22, 0x01	; 1
    1754:	23 3c       	cpi	r18, 0xC3	; 195
    1756:	36 07       	cpc	r19, r22
    1758:	0c f0       	brlt	.+2      	; 0x175c <main+0x1580>
    175a:	df ce       	rjmp	.-578    	; 0x151a <main+0x133e>
								setRightSpeed(-5);
								//outOfLine++;
								//if(outOfLine > 250) {
								//	demoState = 1;
								//}
							} else if(proximityResult[10]>LINE_OUT_THR) {	// center right is leaving the lnie => turn left
    175c:	80 91 7d 02 	lds	r24, 0x027D
    1760:	90 91 7e 02 	lds	r25, 0x027E
    1764:	a1 e0       	ldi	r26, 0x01	; 1
    1766:	83 3c       	cpi	r24, 0xC3	; 195
    1768:	9a 07       	cpc	r25, r26
    176a:	0c f4       	brge	.+2      	; 0x176e <main+0x1592>
    176c:	af c0       	rjmp	.+350    	; 0x18cc <main+0x16f0>
								setLeftSpeed(-5);
    176e:	8b ef       	ldi	r24, 0xFB	; 251
    1770:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <setLeftSpeed>
								setRightSpeed(15);
    1774:	8f e0       	ldi	r24, 0x0F	; 15
    1776:	0e 94 ff 27 	call	0x4ffe	; 0x4ffe <setRightSpeed>
    177a:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <main+0x2d8>
							// transmission: continuously send the next robot id to tell him to turn on the led
							// reception: listen for 0xFF and then turn off the led; when I receive 0xFF it means the next robot has
							// received its id, thus it has turned on its led
						irCommTasks();
						if(irCommDataSent()==1) {
							if(irCommRobotId < (irCommRobotsNum-1)) {
    177e:	80 91 fd 04 	lds	r24, 0x04FD
    1782:	48 2f       	mov	r20, r24
    1784:	50 e0       	ldi	r21, 0x00	; 0
    1786:	20 91 fe 04 	lds	r18, 0x04FE
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	21 50       	subi	r18, 0x01	; 1
    178e:	30 40       	sbci	r19, 0x00	; 0
    1790:	42 17       	cp	r20, r18
    1792:	53 07       	cpc	r21, r19
    1794:	0c f0       	brlt	.+2      	; 0x1798 <main+0x15bc>
    1796:	a2 c0       	rjmp	.+324    	; 0x18dc <main+0x1700>
								irCommSendData(irCommRobotId+1);
    1798:	8f 5f       	subi	r24, 0xFF	; 255
    179a:	0e 94 3d 55 	call	0xaa7a	; 0xaa7a <irCommSendData>
    179e:	7d cd       	rjmp	.-1286   	; 0x129a <main+0x10be>
									demoStartTime = getTime100MicroSec();
									demoState = 3;
									break;
								}
							} else {
								chargeContact = 0;
    17a0:	10 92 6b 04 	sts	0x046B, r1

								if(proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {
    17a4:	20 91 7b 02 	lds	r18, 0x027B
    17a8:	30 91 7c 02 	lds	r19, 0x027C
    17ac:	e1 e0       	ldi	r30, 0x01	; 1
    17ae:	23 3c       	cpi	r18, 0xC3	; 195
    17b0:	3e 07       	cpc	r19, r30
    17b2:	0c f4       	brge	.+2      	; 0x17b6 <main+0x15da>
    17b4:	5f c0       	rjmp	.+190    	; 0x1874 <main+0x1698>
    17b6:	80 91 7d 02 	lds	r24, 0x027D
    17ba:	90 91 7e 02 	lds	r25, 0x027E
    17be:	f1 e0       	ldi	r31, 0x01	; 1
    17c0:	83 3c       	cpi	r24, 0xC3	; 195
    17c2:	9f 07       	cpc	r25, r31
    17c4:	0c f4       	brge	.+2      	; 0x17c8 <main+0x15ec>
    17c6:	56 c0       	rjmp	.+172    	; 0x1874 <main+0x1698>
									outOfLine++;
    17c8:	80 91 6a 04 	lds	r24, 0x046A
    17cc:	8f 5f       	subi	r24, 0xFF	; 255
    17ce:	80 93 6a 04 	sts	0x046A, r24
									if(outOfLine > 250) {
    17d2:	8b 3f       	cpi	r24, 0xFB	; 251
    17d4:	08 f4       	brcc	.+2      	; 0x17d8 <main+0x15fc>
    17d6:	68 ce       	rjmp	.-816    	; 0x14a8 <main+0x12cc>
    17d8:	0c 94 c9 02 	jmp	0x592	; 0x592 <main+0x3b6>
						irCommTasks();
						if(irCommDataSent()==1) {	
							irCommSendData(irCommRxByteExpected);					
						}
						if(irCommDataAvailable()==1) {							
							i = irCommReadData();
    17dc:	0e 94 51 55 	call	0xaaa2	; 0xaaa2 <irCommReadData>
    17e0:	28 2f       	mov	r18, r24
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	3a 83       	std	Y+2, r19	; 0x02
    17e6:	29 83       	std	Y+1, r18	; 0x01
							if(i == irCommRxByteExpected) {
    17e8:	90 91 2b 05 	lds	r25, 0x052B
    17ec:	49 2f       	mov	r20, r25
    17ee:	50 e0       	ldi	r21, 0x00	; 0
    17f0:	42 17       	cp	r20, r18
    17f2:	53 07       	cpc	r21, r19
    17f4:	09 f4       	brne	.+2      	; 0x17f8 <main+0x161c>
    17f6:	46 c1       	rjmp	.+652    	; 0x1a84 <main+0x18a8>
									} else {
										irCommRxByteExpected = 0;
									}
								}
							} else {
								if(irCommRxByteExpected==7) {
    17f8:	97 30       	cpi	r25, 0x07	; 7
    17fa:	09 f4       	brne	.+2      	; 0x17fe <main+0x1622>
    17fc:	70 c1       	rjmp	.+736    	; 0x1ade <main+0x1902>
									if(i==0) {
										irCommRxByteExpected = 0;
										irCommMsgCount = 0;
									}
								} else {
									if(irCommRxByteExpected==(i-1)) {
    17fe:	29 81       	ldd	r18, Y+1	; 0x01
    1800:	3a 81       	ldd	r19, Y+2	; 0x02
    1802:	21 50       	subi	r18, 0x01	; 1
    1804:	30 40       	sbci	r19, 0x00	; 0
    1806:	42 17       	cp	r20, r18
    1808:	53 07       	cpc	r21, r19
    180a:	09 f4       	brne	.+2      	; 0x180e <main+0x1632>
    180c:	89 c1       	rjmp	.+786    	; 0x1b20 <main+0x1944>
										irCommRxByteExpected = i;
										irCommMsgCount = 0;
									}
								}
							}
							switch(irCommRxByteExpected) {
    180e:	93 30       	cpi	r25, 0x03	; 3
    1810:	09 f4       	brne	.+2      	; 0x1814 <main+0x1638>
    1812:	ae c1       	rjmp	.+860    	; 0x1b70 <main+0x1994>
    1814:	94 30       	cpi	r25, 0x04	; 4
    1816:	08 f0       	brcs	.+2      	; 0x181a <main+0x163e>
    1818:	1d c1       	rjmp	.+570    	; 0x1a54 <main+0x1878>
    181a:	91 30       	cpi	r25, 0x01	; 1
    181c:	09 f4       	brne	.+2      	; 0x1820 <main+0x1644>
    181e:	c6 c1       	rjmp	.+908    	; 0x1bac <main+0x19d0>
    1820:	92 30       	cpi	r25, 0x02	; 2
    1822:	08 f4       	brcc	.+2      	; 0x1826 <main+0x164a>
    1824:	65 c1       	rjmp	.+714    	; 0x1af0 <main+0x1914>
									updateRedLed(235);
									updateGreenLed(255);
									updateBlueLed(255);
									break;	
								case 2: 
									updateRedLed(255);
    1826:	8f ef       	ldi	r24, 0xFF	; 255
									updateRedLed(255);
									updateGreenLed(255);
									updateBlueLed(235);
									break;
								case 4: 
									updateRedLed(235);
    1828:	0e 94 fb 3f 	call	0x7ff6	; 0x7ff6 <updateRedLed>
									updateGreenLed(235);
    182c:	8b ee       	ldi	r24, 0xEB	; 235
    182e:	0e 94 0f 40 	call	0x801e	; 0x801e <updateGreenLed>
									updateBlueLed(255);
    1832:	8f ef       	ldi	r24, 0xFF	; 255
    1834:	0e 94 23 40 	call	0x8046	; 0x8046 <updateBlueLed>
    1838:	80 91 64 04 	lds	r24, 0x0464
									break;
    183c:	0c 94 8c 01 	jmp	0x318	; 0x318 <main+0x13c>
						break;

					case 1:	
						irCommTasks();
						if(irCommDataSent()==1) {	
							irCommSendData(irCommRxByteExpected);					
    1840:	80 91 2b 05 	lds	r24, 0x052B
    1844:	0e 94 3d 55 	call	0xaa7a	; 0xaa7a <irCommSendData>
    1848:	67 c8       	rjmp	.-3890   	; 0x918 <main+0x73c>
							disableObstacleAvoidance();

							demoEndTime = getTime100MicroSec();
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {	// the robot seems to be blocked somehow
								// go back for a while
								setRightSpeed(-20);
    184a:	8c ee       	ldi	r24, 0xEC	; 236
    184c:	0e 94 ff 27 	call	0x4ffe	; 0x4ffe <setRightSpeed>
								setLeftSpeed(-20);
    1850:	8c ee       	ldi	r24, 0xEC	; 236
    1852:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <setLeftSpeed>
								demoStartTime = getTime100MicroSec();
    1856:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
    185a:	60 93 6c 04 	sts	0x046C, r22
    185e:	70 93 6d 04 	sts	0x046D, r23
    1862:	80 93 6e 04 	sts	0x046E, r24
    1866:	90 93 6f 04 	sts	0x046F, r25
								demoState = 4;
    186a:	a4 e0       	ldi	r26, 0x04	; 4
    186c:	a0 93 68 04 	sts	0x0468, r26
								break;
    1870:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <main+0x2d8>
										chargeContact = 0;
										demoState = 1;
										break;
									}
								} else {
									outOfLine = 0;
    1874:	10 92 6a 04 	sts	0x046A, r1
    1878:	17 ce       	rjmp	.-978    	; 0x14a8 <main+0x12cc>
					if(rgbState == 0) {
						pwm_red = 254;
						pwm_green = 255;
						pwm_blue = 255;
						rgbState = 1;
					} else if(rgbState == 1) {
    187a:	91 30       	cpi	r25, 0x01	; 1
    187c:	09 f4       	brne	.+2      	; 0x1880 <main+0x16a4>
    187e:	45 c1       	rjmp	.+650    	; 0x1b0a <main+0x192e>
						pwm_red = 255;
						pwm_green = 254;
						pwm_blue = 255;
						rgbState = 2;
					} else if(rgbState == 2) {
    1880:	92 30       	cpi	r25, 0x02	; 2
    1882:	11 f0       	breq	.+4      	; 0x1888 <main+0x16ac>
    1884:	0c 94 7f 02 	jmp	0x4fe	; 0x4fe <main+0x322>
						pwm_red = 255;
    1888:	10 93 0c 02 	sts	0x020C, r17
						pwm_green = 255;
    188c:	10 93 0d 02 	sts	0x020D, r17
						pwm_blue = 254;
    1890:	3e ef       	ldi	r19, 0xFE	; 254
    1892:	30 93 0e 02 	sts	0x020E, r19
						rgbState = 0;
    1896:	10 92 2c 03 	sts	0x032C, r1
    189a:	0c 94 7f 02 	jmp	0x4fe	; 0x4fe <main+0x322>
						if(irCommDataAvailable()==1) {
							if(irCommLedToggle==0) {
								irCommLedToggle = 1;
								updateRedLed(255);
							} else {
								irCommLedToggle = 0;
    189e:	10 92 ff 04 	sts	0x04FF, r1
								updateRedLed(235);
    18a2:	8b ee       	ldi	r24, 0xEB	; 235
    18a4:	0e 94 fb 3f 	call	0x7ff6	; 0x7ff6 <updateRedLed>
    18a8:	d2 cc       	rjmp	.-1628   	; 0x124e <main+0x1072>
					case 2: // led is off
							// transmission: continuously send my robot id to tell the next robot I turned off the led
							// reception: listen for my robot id and then turn on the led				
						irCommTasks();
						if(irCommDataSent()==1) {
							irCommSendData(irCommRobotId);							
    18aa:	80 91 fd 04 	lds	r24, 0x04FD
    18ae:	0e 94 3d 55 	call	0xaa7a	; 0xaa7a <irCommSendData>
    18b2:	be cc       	rjmp	.-1668   	; 0x1230 <main+0x1054>
								irCommLedToggle = 1;
								updateBlueLed(255);
								updateRedLed(255);
								updateGreenLed(128);
							} else {
								irCommLedToggle = 0;
    18b4:	10 92 ff 04 	sts	0x04FF, r1
								updateBlueLed(255);
    18b8:	8f ef       	ldi	r24, 0xFF	; 255
    18ba:	0e 94 23 40 	call	0x8046	; 0x8046 <updateBlueLed>
								updateRedLed(255);
    18be:	8f ef       	ldi	r24, 0xFF	; 255
    18c0:	0e 94 fb 3f 	call	0x7ff6	; 0x7ff6 <updateRedLed>
								updateGreenLed(235);
    18c4:	8b ee       	ldi	r24, 0xEB	; 235
    18c6:	0e 94 0f 40 	call	0x801e	; 0x801e <updateGreenLed>
    18ca:	fc cc       	rjmp	.-1544   	; 0x12c4 <main+0x10e8>
								//outOfLine++;
								//if(outOfLine > 250) {
								//	demoState = 1;
								//}
							} else {
								setRightSpeed(15);
    18cc:	8f e0       	ldi	r24, 0x0F	; 15
    18ce:	0e 94 ff 27 	call	0x4ffe	; 0x4ffe <setRightSpeed>
								setLeftSpeed(15);
    18d2:	8f e0       	ldi	r24, 0x0F	; 15
    18d4:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <setLeftSpeed>
    18d8:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <main+0x2d8>
						irCommTasks();
						if(irCommDataSent()==1) {
							if(irCommRobotId < (irCommRobotsNum-1)) {
								irCommSendData(irCommRobotId+1);
							} else {
								irCommSendData(0x00);
    18dc:	80 e0       	ldi	r24, 0x00	; 0
    18de:	0e 94 3d 55 	call	0xaa7a	; 0xaa7a <irCommSendData>
    18e2:	db cc       	rjmp	.-1610   	; 0x129a <main+0x10be>
						break;

					case 2:
						irCommTasks();
						if(irCommDataSent()==1) {
							angleDegEncode = (unsigned char)((float)angleDeg*0.7084);
    18e4:	60 91 f8 04 	lds	r22, 0x04F8
    18e8:	70 91 f9 04 	lds	r23, 0x04F9
    18ec:	88 27       	eor	r24, r24
    18ee:	77 fd       	sbrc	r23, 7
    18f0:	80 95       	com	r24
    18f2:	98 2f       	mov	r25, r24
    18f4:	0e 94 d2 56 	call	0xada4	; 0xada4 <__floatsisf>
    18f8:	24 eb       	ldi	r18, 0xB4	; 180
    18fa:	39 e5       	ldi	r19, 0x59	; 89
    18fc:	45 e3       	ldi	r20, 0x35	; 53
    18fe:	5f e3       	ldi	r21, 0x3F	; 63
    1900:	0e 94 eb 57 	call	0xafd6	; 0xafd6 <__mulsf3>
    1904:	0e 94 a4 56 	call	0xad48	; 0xad48 <__fixunssfsi>
    1908:	86 2f       	mov	r24, r22
    190a:	60 93 fc 04 	sts	0x04FC, r22
							irCommSendData(angleDegEncode);
    190e:	0e 94 3d 55 	call	0xaa7a	; 0xaa7a <irCommSendData>
						}
						if(irCommDataAvailable()==1) {
    1912:	0e 94 4e 55 	call	0xaa9c	; 0xaa9c <irCommDataAvailable>
    1916:	81 30       	cpi	r24, 0x01	; 1
    1918:	09 f0       	breq	.+2      	; 0x191c <main+0x1740>
    191a:	4b cd       	rjmp	.-1386   	; 0x13b2 <main+0x11d6>
							demoStartTime = getTime100MicroSec();
    191c:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
    1920:	60 93 6c 04 	sts	0x046C, r22
    1924:	70 93 6d 04 	sts	0x046D, r23
    1928:	80 93 6e 04 	sts	0x046E, r24
    192c:	90 93 6f 04 	sts	0x046F, r25
							irCommLastData = irCommReadData();
    1930:	0e 94 51 55 	call	0xaaa2	; 0xaaa2 <irCommReadData>
    1934:	90 e0       	ldi	r25, 0x00	; 0
							irCommLastData = (int)((float)irCommLastData*1.411);
    1936:	fc 01       	movw	r30, r24
    1938:	bf 01       	movw	r22, r30
    193a:	88 27       	eor	r24, r24
    193c:	77 fd       	sbrc	r23, 7
    193e:	80 95       	com	r24
    1940:	98 2f       	mov	r25, r24
    1942:	0e 94 d2 56 	call	0xada4	; 0xada4 <__floatsisf>
    1946:	26 ea       	ldi	r18, 0xA6	; 166
    1948:	3b e9       	ldi	r19, 0x9B	; 155
    194a:	44 eb       	ldi	r20, 0xB4	; 180
    194c:	5f e3       	ldi	r21, 0x3F	; 63
    194e:	0e 94 eb 57 	call	0xafd6	; 0xafd6 <__mulsf3>
    1952:	0e 94 9f 56 	call	0xad3e	; 0xad3e <__fixsfsi>
    1956:	70 93 f7 04 	sts	0x04F7, r23
    195a:	60 93 f6 04 	sts	0x04F6, r22
							irCommLastSensor = irCommReceivingSensor();	
    195e:	0e 94 56 55 	call	0xaaac	; 0xaaac <irCommReceivingSensor>
    1962:	80 93 18 02 	sts	0x0218, r24
							disableObstacleAvoidance();										
    1966:	0e 94 b4 3f 	call	0x7f68	; 0x7f68 <disableObstacleAvoidance>
							angleDeg = getBearing(irCommLastSensor);
    196a:	80 91 18 02 	lds	r24, 0x0218
    196e:	0e 94 59 55 	call	0xaab2	; 0xaab2 <getBearing>
    1972:	9c 01       	movw	r18, r24
    1974:	90 93 f9 04 	sts	0x04F9, r25
    1978:	80 93 f8 04 	sts	0x04F8, r24
							if(angleDeg < 0) {
    197c:	97 fd       	sbrc	r25, 7
    197e:	f1 c0       	rjmp	.+482    	; 0x1b62 <main+0x1986>
								angleDeg += 360;
							}
							angleError = angleDeg - irCommLastData;
    1980:	80 91 f6 04 	lds	r24, 0x04F6
    1984:	90 91 f7 04 	lds	r25, 0x04F7
    1988:	44 eb       	ldi	r20, 0xB4	; 180
    198a:	50 e0       	ldi	r21, 0x00	; 0
    198c:	48 1b       	sub	r20, r24
    198e:	59 0b       	sbc	r21, r25
    1990:	ca 01       	movw	r24, r20
							angleError += 180;
    1992:	82 0f       	add	r24, r18
    1994:	93 1f       	adc	r25, r19
    1996:	90 93 fb 04 	sts	0x04FB, r25
    199a:	80 93 fa 04 	sts	0x04FA, r24
							if(angleError > 180) {
    199e:	85 3b       	cpi	r24, 0xB5	; 181
    19a0:	91 05       	cpc	r25, r1
    19a2:	34 f0       	brlt	.+12     	; 0x19b0 <main+0x17d4>
								angleError -= 360;
    19a4:	88 56       	subi	r24, 0x68	; 104
    19a6:	91 40       	sbci	r25, 0x01	; 1
    19a8:	90 93 fb 04 	sts	0x04FB, r25
    19ac:	80 93 fa 04 	sts	0x04FA, r24
							}
							if(angleError < -180) {
    19b0:	5f ef       	ldi	r21, 0xFF	; 255
    19b2:	8c 34       	cpi	r24, 0x4C	; 76
    19b4:	95 07       	cpc	r25, r21
    19b6:	34 f4       	brge	.+12     	; 0x19c4 <main+0x17e8>
								angleError += 360;
    19b8:	88 59       	subi	r24, 0x98	; 152
    19ba:	9e 4f       	sbci	r25, 0xFE	; 254
    19bc:	90 93 fb 04 	sts	0x04FB, r25
    19c0:	80 93 fa 04 	sts	0x04FA, r24
							}
							if(abs(angleError) < 10) {
    19c4:	09 96       	adiw	r24, 0x09	; 9
    19c6:	83 31       	cpi	r24, 0x13	; 19
    19c8:	91 05       	cpc	r25, r1
    19ca:	08 f0       	brcs	.+2      	; 0x19ce <main+0x17f2>
    19cc:	6c c0       	rjmp	.+216    	; 0x1aa6 <main+0x18ca>
								setLeftSpeed(0);
    19ce:	80 e0       	ldi	r24, 0x00	; 0
    19d0:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <setLeftSpeed>
								setRightSpeed(0);
    19d4:	80 e0       	ldi	r24, 0x00	; 0
    19d6:	0e 94 ff 27 	call	0x4ffe	; 0x4ffe <setRightSpeed>
    19da:	eb cc       	rjmp	.-1578   	; 0x13b2 <main+0x11d6>
						if(irCommDataSent()==1) {							
							demoState = 1;
							if(irCommRxByteExpected<255) {
								irCommRxByteExpected++;
							} else {
								irCommRxByteExpected = 0;
    19dc:	10 92 2b 05 	sts	0x052B, r1
    19e0:	4a c8       	rjmp	.-3948   	; 0xa76 <main+0x89a>
							}
						}
						if(irCommDataAvailable()==1) {
							irCommReadData();
							if(i<7) {
								i++;
    19e2:	01 96       	adiw	r24, 0x01	; 1
    19e4:	9a 83       	std	Y+2, r25	; 0x02
    19e6:	89 83       	std	Y+1, r24	; 0x01
							} else {
								i = 0;
							}
							switch(i) {
    19e8:	84 30       	cpi	r24, 0x04	; 4
    19ea:	91 05       	cpc	r25, r1
    19ec:	09 f4       	brne	.+2      	; 0x19f0 <main+0x1814>
    19ee:	2b c1       	rjmp	.+598    	; 0x1c46 <main+0x1a6a>
    19f0:	85 30       	cpi	r24, 0x05	; 5
    19f2:	91 05       	cpc	r25, r1
    19f4:	08 f0       	brcs	.+2      	; 0x19f8 <main+0x181c>
    19f6:	9a c0       	rjmp	.+308    	; 0x1b2c <main+0x1950>
    19f8:	82 30       	cpi	r24, 0x02	; 2
    19fa:	91 05       	cpc	r25, r1
    19fc:	09 f4       	brne	.+2      	; 0x1a00 <main+0x1824>
    19fe:	32 c1       	rjmp	.+612    	; 0x1c64 <main+0x1a88>
    1a00:	83 30       	cpi	r24, 0x03	; 3
    1a02:	91 05       	cpc	r25, r1
    1a04:	09 f4       	brne	.+2      	; 0x1a08 <main+0x182c>
    1a06:	2c c1       	rjmp	.+600    	; 0x1c60 <main+0x1a84>
									updateRedLed(255);
									updateGreenLed(255);
									updateBlueLed(255);
									break;
								case 1: 
									updateRedLed(0);
    1a08:	80 e0       	ldi	r24, 0x00	; 0
    1a0a:	0e 94 fb 3f 	call	0x7ff6	; 0x7ff6 <updateRedLed>
									updateGreenLed(255);
    1a0e:	8f ef       	ldi	r24, 0xFF	; 255
    1a10:	0e 94 0f 40 	call	0x801e	; 0x801e <updateGreenLed>
									updateBlueLed(255);
    1a14:	8f ef       	ldi	r24, 0xFF	; 255
    1a16:	0e 94 23 40 	call	0x8046	; 0x8046 <updateBlueLed>
    1a1a:	80 91 64 04 	lds	r24, 0x0464
									break;	
    1a1e:	e1 e0       	ldi	r30, 0x01	; 1
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	fa 83       	std	Y+2, r31	; 0x02
    1a24:	e9 83       	std	Y+1, r30	; 0x01
    1a26:	0c 94 8c 01 	jmp	0x318	; 0x318 <main+0x13c>

							if(CHARGE_ON) {
								outOfLine = 0;
								chargeContact++;
								if(chargeContact > 20) {
									setLeftSpeed(0);
    1a2a:	80 e0       	ldi	r24, 0x00	; 0
    1a2c:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <setLeftSpeed>
									setRightSpeed(0);
    1a30:	80 e0       	ldi	r24, 0x00	; 0
    1a32:	0e 94 ff 27 	call	0x4ffe	; 0x4ffe <setRightSpeed>
									demoStartTime = getTime100MicroSec();
    1a36:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
    1a3a:	60 93 6c 04 	sts	0x046C, r22
    1a3e:	70 93 6d 04 	sts	0x046D, r23
    1a42:	80 93 6e 04 	sts	0x046E, r24
    1a46:	90 93 6f 04 	sts	0x046F, r25
									demoState = 3;
    1a4a:	b3 e0       	ldi	r27, 0x03	; 3
    1a4c:	b0 93 68 04 	sts	0x0468, r27
									break;
    1a50:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <main+0x2d8>
										irCommRxByteExpected = i;
										irCommMsgCount = 0;
									}
								}
							}
							switch(irCommRxByteExpected) {
    1a54:	95 30       	cpi	r25, 0x05	; 5
    1a56:	09 f4       	brne	.+2      	; 0x1a5a <main+0x187e>
    1a58:	a7 c0       	rjmp	.+334    	; 0x1ba8 <main+0x19cc>
    1a5a:	95 30       	cpi	r25, 0x05	; 5
    1a5c:	08 f4       	brcc	.+2      	; 0x1a60 <main+0x1884>
    1a5e:	a2 c0       	rjmp	.+324    	; 0x1ba4 <main+0x19c8>
    1a60:	96 30       	cpi	r25, 0x06	; 6
    1a62:	09 f4       	brne	.+2      	; 0x1a66 <main+0x188a>
    1a64:	92 c0       	rjmp	.+292    	; 0x1b8a <main+0x19ae>
    1a66:	97 30       	cpi	r25, 0x07	; 7
    1a68:	11 f0       	breq	.+4      	; 0x1a6e <main+0x1892>
    1a6a:	0c 94 91 04 	jmp	0x922	; 0x922 <main+0x746>
									updateRedLed(255);
									updateGreenLed(235);
									updateBlueLed(235);
									break;
								case 7: 
									updateRedLed(235);
    1a6e:	8b ee       	ldi	r24, 0xEB	; 235
    1a70:	0e 94 fb 3f 	call	0x7ff6	; 0x7ff6 <updateRedLed>
									updateGreenLed(235);
    1a74:	8b ee       	ldi	r24, 0xEB	; 235
    1a76:	0e 94 0f 40 	call	0x801e	; 0x801e <updateGreenLed>
									updateBlueLed(235);
    1a7a:	8b ee       	ldi	r24, 0xEB	; 235
    1a7c:	0e 94 23 40 	call	0x8046	; 0x8046 <updateBlueLed>
    1a80:	0c 94 91 04 	jmp	0x922	; 0x922 <main+0x746>
							irCommSendData(irCommRxByteExpected);					
						}
						if(irCommDataAvailable()==1) {							
							i = irCommReadData();
							if(i == irCommRxByteExpected) {
								irCommMsgCount++;
    1a84:	80 91 00 05 	lds	r24, 0x0500
    1a88:	8f 5f       	subi	r24, 0xFF	; 255
    1a8a:	80 93 00 05 	sts	0x0500, r24
								if(irCommMsgCount >= 4) {
    1a8e:	84 30       	cpi	r24, 0x04	; 4
    1a90:	08 f4       	brcc	.+2      	; 0x1a94 <main+0x18b8>
    1a92:	bd ce       	rjmp	.-646    	; 0x180e <main+0x1632>
									irCommMsgCount = 0;
    1a94:	10 92 00 05 	sts	0x0500, r1
									if(irCommRxByteExpected < 7) {
    1a98:	97 30       	cpi	r25, 0x07	; 7
    1a9a:	08 f0       	brcs	.+2      	; 0x1a9e <main+0x18c2>
    1a9c:	cf c0       	rjmp	.+414    	; 0x1c3c <main+0x1a60>
										irCommRxByteExpected++;
    1a9e:	9f 5f       	subi	r25, 0xFF	; 255
    1aa0:	90 93 2b 05 	sts	0x052B, r25
    1aa4:	b4 ce       	rjmp	.-664    	; 0x180e <main+0x1632>
							}
							if(abs(angleError) < 10) {
								setLeftSpeed(0);
								setRightSpeed(0);
							} else {
								resetOdometry();
    1aa6:	0e 94 fe 20 	call	0x41fc	; 0x41fc <resetOdometry>
								if(angleError > 0) {	// turn left
    1aaa:	80 91 fa 04 	lds	r24, 0x04FA
    1aae:	90 91 fb 04 	lds	r25, 0x04FB
    1ab2:	18 16       	cp	r1, r24
    1ab4:	19 06       	cpc	r1, r25
    1ab6:	0c f0       	brlt	.+2      	; 0x1aba <main+0x18de>
    1ab8:	7b c0       	rjmp	.+246    	; 0x1bb0 <main+0x19d4>
									setLeftSpeed(-7);
    1aba:	89 ef       	ldi	r24, 0xF9	; 249
    1abc:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <setLeftSpeed>
									setRightSpeed(7);
    1ac0:	87 e0       	ldi	r24, 0x07	; 7
    1ac2:	0e 94 ff 27 	call	0x4ffe	; 0x4ffe <setRightSpeed>
									targetAngle = 0.09;	// about -10 degrees
									demoState = 4;
    1ac6:	64 e0       	ldi	r22, 0x04	; 4
    1ac8:	60 93 68 04 	sts	0x0468, r22
							} else {
								resetOdometry();
								if(angleError > 0) {	// turn left
									setLeftSpeed(-7);
									setRightSpeed(7);
									targetAngle = 0.09;	// about -10 degrees
    1acc:	8c ee       	ldi	r24, 0xEC	; 236
    1ace:	91 e5       	ldi	r25, 0x51	; 81
    1ad0:	a8 eb       	ldi	r26, 0xB8	; 184
    1ad2:	bd e3       	ldi	r27, 0x3D	; 61
    1ad4:	8b 83       	std	Y+3, r24	; 0x03
    1ad6:	9c 83       	std	Y+4, r25	; 0x04
    1ad8:	ad 83       	std	Y+5, r26	; 0x05
    1ada:	be 83       	std	Y+6, r27	; 0x06
    1adc:	6a cc       	rjmp	.-1836   	; 0x13b2 <main+0x11d6>
										irCommRxByteExpected = 0;
									}
								}
							} else {
								if(irCommRxByteExpected==7) {
									if(i==0) {
    1ade:	49 81       	ldd	r20, Y+1	; 0x01
    1ae0:	5a 81       	ldd	r21, Y+2	; 0x02
    1ae2:	41 15       	cp	r20, r1
    1ae4:	51 05       	cpc	r21, r1
    1ae6:	19 f6       	brne	.-122    	; 0x1a6e <main+0x1892>
										irCommRxByteExpected = 0;
    1ae8:	10 92 2b 05 	sts	0x052B, r1
										irCommMsgCount = 0;
    1aec:	10 92 00 05 	sts	0x0500, r1
									}
								}
							}
							switch(irCommRxByteExpected) {
								case 0: 
									updateRedLed(255);
    1af0:	8f ef       	ldi	r24, 0xFF	; 255
									updateGreenLed(255);
									updateBlueLed(255);
									break;
								case 1: 
									updateRedLed(235);
    1af2:	0e 94 fb 3f 	call	0x7ff6	; 0x7ff6 <updateRedLed>
									updateGreenLed(255);
    1af6:	8f ef       	ldi	r24, 0xFF	; 255
    1af8:	0e 94 0f 40 	call	0x801e	; 0x801e <updateGreenLed>
									updateBlueLed(255);
    1afc:	8f ef       	ldi	r24, 0xFF	; 255
    1afe:	0e 94 23 40 	call	0x8046	; 0x8046 <updateBlueLed>
    1b02:	80 91 64 04 	lds	r24, 0x0464
									break;	
    1b06:	0c 94 8c 01 	jmp	0x318	; 0x318 <main+0x13c>
						pwm_red = 254;
						pwm_green = 255;
						pwm_blue = 255;
						rgbState = 1;
					} else if(rgbState == 1) {
						pwm_red = 255;
    1b0a:	10 93 0c 02 	sts	0x020C, r17
						pwm_green = 254;
    1b0e:	2e ef       	ldi	r18, 0xFE	; 254
    1b10:	20 93 0d 02 	sts	0x020D, r18
						pwm_blue = 255;
    1b14:	10 93 0e 02 	sts	0x020E, r17
						rgbState = 2;
    1b18:	60 92 2c 03 	sts	0x032C, r6
    1b1c:	0c 94 7f 02 	jmp	0x4fe	; 0x4fe <main+0x322>
										irCommRxByteExpected = 0;
										irCommMsgCount = 0;
									}
								} else {
									if(irCommRxByteExpected==(i-1)) {
										irCommRxByteExpected = i;
    1b20:	80 93 2b 05 	sts	0x052B, r24
										irCommMsgCount = 0;
    1b24:	10 92 00 05 	sts	0x0500, r1
    1b28:	98 2f       	mov	r25, r24
    1b2a:	71 ce       	rjmp	.-798    	; 0x180e <main+0x1632>
							if(i<7) {
								i++;
							} else {
								i = 0;
							}
							switch(i) {
    1b2c:	a9 81       	ldd	r26, Y+1	; 0x01
    1b2e:	ba 81       	ldd	r27, Y+2	; 0x02
    1b30:	a6 30       	cpi	r26, 0x06	; 6
    1b32:	b1 05       	cpc	r27, r1
    1b34:	09 f4       	brne	.+2      	; 0x1b38 <main+0x195c>
    1b36:	85 c0       	rjmp	.+266    	; 0x1c42 <main+0x1a66>
    1b38:	a6 30       	cpi	r26, 0x06	; 6
    1b3a:	b1 05       	cpc	r27, r1
    1b3c:	08 f4       	brcc	.+2      	; 0x1b40 <main+0x1964>
    1b3e:	61 c0       	rjmp	.+194    	; 0x1c02 <main+0x1a26>
    1b40:	a7 30       	cpi	r26, 0x07	; 7
    1b42:	b1 05       	cpc	r27, r1
    1b44:	09 f0       	breq	.+2      	; 0x1b48 <main+0x196c>
    1b46:	60 cf       	rjmp	.-320    	; 0x1a08 <main+0x182c>
									updateRedLed(255);
									updateGreenLed(0);
									updateBlueLed(0);
									break;
								case 7: 
									updateRedLed(0);
    1b48:	80 e0       	ldi	r24, 0x00	; 0
    1b4a:	0e 94 fb 3f 	call	0x7ff6	; 0x7ff6 <updateRedLed>
									updateGreenLed(0);
    1b4e:	80 e0       	ldi	r24, 0x00	; 0
    1b50:	0e 94 0f 40 	call	0x801e	; 0x801e <updateGreenLed>
									updateBlueLed(0);
    1b54:	80 e0       	ldi	r24, 0x00	; 0
    1b56:	0e 94 23 40 	call	0x8046	; 0x8046 <updateBlueLed>
    1b5a:	80 91 64 04 	lds	r24, 0x0464
									break;
    1b5e:	0c 94 8c 01 	jmp	0x318	; 0x318 <main+0x13c>
							irCommLastData = (int)((float)irCommLastData*1.411);
							irCommLastSensor = irCommReceivingSensor();	
							disableObstacleAvoidance();										
							angleDeg = getBearing(irCommLastSensor);
							if(angleDeg < 0) {
								angleDeg += 360;
    1b62:	28 59       	subi	r18, 0x98	; 152
    1b64:	3e 4f       	sbci	r19, 0xFE	; 254
    1b66:	30 93 f9 04 	sts	0x04F9, r19
    1b6a:	20 93 f8 04 	sts	0x04F8, r18
    1b6e:	08 cf       	rjmp	.-496    	; 0x1980 <main+0x17a4>
									updateRedLed(255);
									updateGreenLed(235);
									updateBlueLed(255);
									break;
								case 3: 
									updateRedLed(255);
    1b70:	8f ef       	ldi	r24, 0xFF	; 255
									updateRedLed(235);
									updateGreenLed(235);
									updateBlueLed(255);
									break;
								case 5: 
									updateRedLed(235);
    1b72:	0e 94 fb 3f 	call	0x7ff6	; 0x7ff6 <updateRedLed>
									updateGreenLed(255);
    1b76:	8f ef       	ldi	r24, 0xFF	; 255
    1b78:	0e 94 0f 40 	call	0x801e	; 0x801e <updateGreenLed>
									updateBlueLed(235);
    1b7c:	8b ee       	ldi	r24, 0xEB	; 235
    1b7e:	0e 94 23 40 	call	0x8046	; 0x8046 <updateBlueLed>
    1b82:	80 91 64 04 	lds	r24, 0x0464
									break;
    1b86:	0c 94 8c 01 	jmp	0x318	; 0x318 <main+0x13c>
								case 6: 
									updateRedLed(255);
    1b8a:	8f ef       	ldi	r24, 0xFF	; 255
    1b8c:	0e 94 fb 3f 	call	0x7ff6	; 0x7ff6 <updateRedLed>
									updateGreenLed(235);
    1b90:	8b ee       	ldi	r24, 0xEB	; 235
    1b92:	0e 94 0f 40 	call	0x801e	; 0x801e <updateGreenLed>
									updateBlueLed(235);
    1b96:	8b ee       	ldi	r24, 0xEB	; 235
    1b98:	0e 94 23 40 	call	0x8046	; 0x8046 <updateBlueLed>
    1b9c:	80 91 64 04 	lds	r24, 0x0464
									break;
    1ba0:	0c 94 8c 01 	jmp	0x318	; 0x318 <main+0x13c>
									updateRedLed(255);
									updateGreenLed(255);
									updateBlueLed(235);
									break;
								case 4: 
									updateRedLed(235);
    1ba4:	8b ee       	ldi	r24, 0xEB	; 235
    1ba6:	40 ce       	rjmp	.-896    	; 0x1828 <main+0x164c>
									updateGreenLed(235);
									updateBlueLed(255);
									break;
								case 5: 
									updateRedLed(235);
    1ba8:	8b ee       	ldi	r24, 0xEB	; 235
    1baa:	e3 cf       	rjmp	.-58     	; 0x1b72 <main+0x1996>
									updateRedLed(255);
									updateGreenLed(255);
									updateBlueLed(255);
									break;
								case 1: 
									updateRedLed(235);
    1bac:	8b ee       	ldi	r24, 0xEB	; 235
    1bae:	a1 cf       	rjmp	.-190    	; 0x1af2 <main+0x1916>
									setLeftSpeed(-7);
									setRightSpeed(7);
									targetAngle = 0.09;	// about -10 degrees
									demoState = 4;
								} else {	// turn right
									setLeftSpeed(7);
    1bb0:	87 e0       	ldi	r24, 0x07	; 7
    1bb2:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <setLeftSpeed>
									setRightSpeed(-7);
    1bb6:	89 ef       	ldi	r24, 0xF9	; 249
    1bb8:	0e 94 ff 27 	call	0x4ffe	; 0x4ffe <setRightSpeed>
									targetAngle = -0.09;	// about 10 degrees
									demoState = 3;
    1bbc:	93 e0       	ldi	r25, 0x03	; 3
    1bbe:	90 93 68 04 	sts	0x0468, r25
									targetAngle = 0.09;	// about -10 degrees
									demoState = 4;
								} else {	// turn right
									setLeftSpeed(7);
									setRightSpeed(-7);
									targetAngle = -0.09;	// about 10 degrees
    1bc2:	2c ee       	ldi	r18, 0xEC	; 236
    1bc4:	31 e5       	ldi	r19, 0x51	; 81
    1bc6:	48 eb       	ldi	r20, 0xB8	; 184
    1bc8:	5d eb       	ldi	r21, 0xBD	; 189
    1bca:	2b 83       	std	Y+3, r18	; 0x03
    1bcc:	3c 83       	std	Y+4, r19	; 0x04
    1bce:	4d 83       	std	Y+5, r20	; 0x05
    1bd0:	5e 83       	std	Y+6, r21	; 0x06
    1bd2:	ef cb       	rjmp	.-2082   	; 0x13b2 <main+0x11d6>
										demoState = 1;
									} else {
										irCommSendData(0xFF);
									}
								} else {
									if(i == (unsigned int)(irCommRobotId-1)) {
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	01 97       	sbiw	r24, 0x01	; 1
    1bd8:	49 81       	ldd	r20, Y+1	; 0x01
    1bda:	5a 81       	ldd	r21, Y+2	; 0x02
    1bdc:	84 17       	cp	r24, r20
    1bde:	95 07       	cpc	r25, r21
    1be0:	11 f0       	breq	.+4      	; 0x1be6 <main+0x1a0a>
    1be2:	0c 94 2b 05 	jmp	0xa56	; 0xa56 <main+0x87a>
    1be6:	fe cb       	rjmp	.-2052   	; 0x13e4 <main+0x1208>
									irCommLedToggle = 1;
									updateBlueLed(255);
									updateRedLed(255);
									updateGreenLed(128);
								} else {
									irCommLedToggle = 0;
    1be8:	10 92 ff 04 	sts	0x04FF, r1
									updateBlueLed(255);
    1bec:	8f ef       	ldi	r24, 0xFF	; 255
    1bee:	0e 94 23 40 	call	0x8046	; 0x8046 <updateBlueLed>
									updateRedLed(255);
    1bf2:	8f ef       	ldi	r24, 0xFF	; 255
    1bf4:	0e 94 fb 3f 	call	0x7ff6	; 0x7ff6 <updateRedLed>
									updateGreenLed(235);
    1bf8:	8b ee       	ldi	r24, 0xEB	; 235
    1bfa:	0e 94 0f 40 	call	0x801e	; 0x801e <updateGreenLed>
    1bfe:	0c 94 17 05 	jmp	0xa2e	; 0xa2e <main+0x852>
									updateRedLed(0);
									updateGreenLed(0);
									updateBlueLed(255);
									break;
								case 5: 
									updateRedLed(0);
    1c02:	80 e0       	ldi	r24, 0x00	; 0
    1c04:	0e 94 fb 3f 	call	0x7ff6	; 0x7ff6 <updateRedLed>
									updateGreenLed(255);
    1c08:	8f ef       	ldi	r24, 0xFF	; 255
    1c0a:	0e 94 0f 40 	call	0x801e	; 0x801e <updateGreenLed>
									updateBlueLed(0);
    1c0e:	80 e0       	ldi	r24, 0x00	; 0
    1c10:	0e 94 23 40 	call	0x8046	; 0x8046 <updateBlueLed>
    1c14:	80 91 64 04 	lds	r24, 0x0464
									break;
    1c18:	0c 94 8c 01 	jmp	0x318	; 0x318 <main+0x13c>
									outOfLine = 0;
								}
							}
							
							if(proximityResult[8]<LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR && proximityResult[11]>LINE_OUT_THR) {	// left ground is the only within the black line => turn left
								setLeftSpeed(-10);
    1c1c:	86 ef       	ldi	r24, 0xF6	; 246
    1c1e:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <setLeftSpeed>
								setRightSpeed(15);
    1c22:	8f e0       	ldi	r24, 0x0F	; 15
    1c24:	0e 94 ff 27 	call	0x4ffe	; 0x4ffe <setRightSpeed>
    1c28:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <main+0x2d8>
							} else if(proximityResult[11]<LINE_OUT_THR && proximityResult[8]>LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {	// right ground is the only within the black line => turn right
								setLeftSpeed(15);
    1c2c:	8f e0       	ldi	r24, 0x0F	; 15
    1c2e:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <setLeftSpeed>
								setRightSpeed(-10);
    1c32:	86 ef       	ldi	r24, 0xF6	; 246
    1c34:	0e 94 ff 27 	call	0x4ffe	; 0x4ffe <setRightSpeed>
    1c38:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <main+0x2d8>
								if(irCommMsgCount >= 4) {
									irCommMsgCount = 0;
									if(irCommRxByteExpected < 7) {
										irCommRxByteExpected++;
									} else {
										irCommRxByteExpected = 0;
    1c3c:	10 92 2b 05 	sts	0x052B, r1
    1c40:	57 cf       	rjmp	.-338    	; 0x1af0 <main+0x1914>
									updateRedLed(0);
									updateGreenLed(255);
									updateBlueLed(0);
									break;
								case 6: 
									updateRedLed(255);
    1c42:	8f ef       	ldi	r24, 0xFF	; 255
    1c44:	82 cf       	rjmp	.-252    	; 0x1b4a <main+0x196e>
									updateRedLed(255);
									updateGreenLed(255);
									updateBlueLed(0);
									break;
								case 4: 
									updateRedLed(0);
    1c46:	80 e0       	ldi	r24, 0x00	; 0
    1c48:	0e 94 fb 3f 	call	0x7ff6	; 0x7ff6 <updateRedLed>
									updateGreenLed(0);
    1c4c:	80 e0       	ldi	r24, 0x00	; 0
    1c4e:	0e 94 0f 40 	call	0x801e	; 0x801e <updateGreenLed>
									updateBlueLed(255);
    1c52:	8f ef       	ldi	r24, 0xFF	; 255
    1c54:	0e 94 23 40 	call	0x8046	; 0x8046 <updateBlueLed>
    1c58:	80 91 64 04 	lds	r24, 0x0464
									break;
    1c5c:	0c 94 8c 01 	jmp	0x318	; 0x318 <main+0x13c>
									updateRedLed(255);
									updateGreenLed(0);
									updateBlueLed(255);
									break;
								case 3: 
									updateRedLed(255);
    1c60:	8f ef       	ldi	r24, 0xFF	; 255
    1c62:	d0 cf       	rjmp	.-96     	; 0x1c04 <main+0x1a28>
									updateRedLed(0);
									updateGreenLed(255);
									updateBlueLed(255);
									break;	
								case 2: 
									updateRedLed(255);
    1c64:	8f ef       	ldi	r24, 0xFF	; 255
    1c66:	f0 cf       	rjmp	.-32     	; 0x1c48 <main+0x1a6c>

00001c68 <SPI_WAIT>:
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
    1c6c:	21 e0       	ldi	r18, 0x01	; 1
		}
	
		if(SPSR & _BV(SPIF)) {
    1c6e:	0d b4       	in	r0, 0x2d	; 45
    1c70:	07 fc       	sbrc	r0, 7
    1c72:	0a c0       	rjmp	.+20     	; 0x1c88 <SPI_WAIT+0x20>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1c74:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
    1c76:	37 e2       	ldi	r19, 0x27	; 39
    1c78:	80 31       	cpi	r24, 0x10	; 16
    1c7a:	93 07       	cpc	r25, r19
    1c7c:	c0 f3       	brcs	.-16     	; 0x1c6e <SPI_WAIT+0x6>
			spiCommError = 1;
    1c7e:	20 93 28 03 	sts	0x0328, r18
		}
	
		if(SPSR & _BV(SPIF)) {
    1c82:	0d b4       	in	r0, 0x2d	; 45
    1c84:	07 fe       	sbrs	r0, 7
    1c86:	f6 cf       	rjmp	.-20     	; 0x1c74 <SPI_WAIT+0xc>
			return;
		}
	}
}
    1c88:	08 95       	ret

00001c8a <initSPI>:

void initSPI() {

    SPI_DDR &= ~((1<<SPI_MOSI)|(1<<SPI_MISO)|(1<<SPI_SS)|(1<<SPI_SCK));
    1c8a:	84 b1       	in	r24, 0x04	; 4
    1c8c:	80 7f       	andi	r24, 0xF0	; 240
    1c8e:	84 b9       	out	0x04, r24	; 4
    // Define the following pins as output
    SPI_DDR |= ((1<<SPI_MOSI)|(1<<SPI_SS)|(1<<SPI_SCK));
    1c90:	84 b1       	in	r24, 0x04	; 4
    1c92:	87 60       	ori	r24, 0x07	; 7
    1c94:	84 b9       	out	0x04, r24	; 4

    
    SPCR = ((1<<SPE)|               // SPI Enable
    1c96:	80 e5       	ldi	r24, 0x50	; 80
    1c98:	8c bd       	out	0x2c, r24	; 44
            (1<<MSTR)|              // 1:Master/ 0:Slave
            (0<<SPR1)|(0<<SPR0)|    // SPI Clock Rate => default 1/4 => 2 MHz
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR |= (1<<SPI2X);              // Double Clock Rate
    1c9a:	8d b5       	in	r24, 0x2d	; 45
    1c9c:	81 60       	ori	r24, 0x01	; 1
    1c9e:	8d bd       	out	0x2d, r24	; 45

}
    1ca0:	08 95       	ret

00001ca2 <closeSPI>:

void closeSPI() {

	SPCR = 0x00;
    1ca2:	1c bc       	out	0x2c, r1	; 44
	SPSR = 0x00;
    1ca4:	1d bc       	out	0x2d, r1	; 45
}
    1ca6:	08 95       	ret

00001ca8 <SPI_ReadWrite_Block>:

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1ca8:	44 23       	and	r20, r20
    1caa:	09 f1       	breq	.+66     	; 0x1cee <SPI_ReadWrite_Block+0x46>
    1cac:	a6 2f       	mov	r26, r22
    1cae:	b7 2f       	mov	r27, r23
    1cb0:	e8 2f       	mov	r30, r24
    1cb2:	f9 2f       	mov	r31, r25
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
    1cb4:	91 e0       	ldi	r25, 0x01	; 1
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
    1cb6:	21 91       	ld	r18, Z+
    1cb8:	2e bd       	out	0x2e, r18	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1cba:	21 e0       	ldi	r18, 0x01	; 1
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
    1cbe:	0d b4       	in	r0, 0x2d	; 45
    1cc0:	07 fc       	sbrc	r0, 7
    1cc2:	0b c0       	rjmp	.+22     	; 0x1cda <SPI_ReadWrite_Block+0x32>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1cc4:	2f 5f       	subi	r18, 0xFF	; 255
    1cc6:	3f 4f       	sbci	r19, 0xFF	; 255
		if(timeout>=10000) {
    1cc8:	57 e2       	ldi	r21, 0x27	; 39
    1cca:	20 31       	cpi	r18, 0x10	; 16
    1ccc:	35 07       	cpc	r19, r21
    1cce:	b8 f3       	brcs	.-18     	; 0x1cbe <SPI_ReadWrite_Block+0x16>
			spiCommError = 1;
    1cd0:	90 93 28 03 	sts	0x0328, r25
		}
	
		if(SPSR & _BV(SPIF)) {
    1cd4:	0d b4       	in	r0, 0x2d	; 45
    1cd6:	07 fe       	sbrs	r0, 7
    1cd8:	f5 cf       	rjmp	.-22     	; 0x1cc4 <SPI_ReadWrite_Block+0x1c>
void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
          SPI_WAIT();
		  if(spiCommError) {
    1cda:	20 91 28 03 	lds	r18, 0x0328
    1cde:	22 23       	and	r18, r18
    1ce0:	31 f4       	brne	.+12     	; 0x1cee <SPI_ReadWrite_Block+0x46>
			return;
		  }
          buffer[i] = SPDR;
    1ce2:	2e b5       	in	r18, 0x2e	; 46
    1ce4:	2d 93       	st	X+, r18
	SPSR = 0x00;
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1ce6:	2e 2f       	mov	r18, r30
    1ce8:	28 1b       	sub	r18, r24
    1cea:	24 17       	cp	r18, r20
    1cec:	20 f3       	brcs	.-56     	; 0x1cb6 <SPI_ReadWrite_Block+0xe>
    1cee:	08 95       	ret

00001cf0 <SPI_Write_Block>:
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1cf0:	66 23       	and	r22, r22
    1cf2:	e9 f0       	breq	.+58     	; 0x1d2e <SPI_Write_Block+0x3e>
    1cf4:	e8 2f       	mov	r30, r24
    1cf6:	f9 2f       	mov	r31, r25
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
    1cf8:	91 e0       	ldi	r25, 0x01	; 1
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
    1cfa:	21 91       	ld	r18, Z+
    1cfc:	2e bd       	out	0x2e, r18	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1cfe:	21 e0       	ldi	r18, 0x01	; 1
    1d00:	30 e0       	ldi	r19, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
    1d02:	0d b4       	in	r0, 0x2d	; 45
    1d04:	07 fc       	sbrc	r0, 7
    1d06:	0b c0       	rjmp	.+22     	; 0x1d1e <SPI_Write_Block+0x2e>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1d08:	2f 5f       	subi	r18, 0xFF	; 255
    1d0a:	3f 4f       	sbci	r19, 0xFF	; 255
		if(timeout>=10000) {
    1d0c:	47 e2       	ldi	r20, 0x27	; 39
    1d0e:	20 31       	cpi	r18, 0x10	; 16
    1d10:	34 07       	cpc	r19, r20
    1d12:	b8 f3       	brcs	.-18     	; 0x1d02 <SPI_Write_Block+0x12>
			spiCommError = 1;
    1d14:	90 93 28 03 	sts	0x0328, r25
		}
	
		if(SPSR & _BV(SPIF)) {
    1d18:	0d b4       	in	r0, 0x2d	; 45
    1d1a:	07 fe       	sbrs	r0, 7
    1d1c:	f5 cf       	rjmp	.-22     	; 0x1d08 <SPI_Write_Block+0x18>
void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
          SPI_WAIT();
		  if(spiCommError) {
    1d1e:	20 91 28 03 	lds	r18, 0x0328
    1d22:	22 23       	and	r18, r18
    1d24:	21 f4       	brne	.+8      	; 0x1d2e <SPI_Write_Block+0x3e>
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1d26:	2e 2f       	mov	r18, r30
    1d28:	28 1b       	sub	r18, r24
    1d2a:	26 17       	cp	r18, r22
    1d2c:	30 f3       	brcs	.-52     	; 0x1cfa <SPI_Write_Block+0xa>
    1d2e:	08 95       	ret

00001d30 <SPI_Write_Byte>:
    }

}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    1d30:	8e bd       	out	0x2e, r24	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1d32:	81 e0       	ldi	r24, 0x01	; 1
    1d34:	90 e0       	ldi	r25, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
    1d36:	21 e0       	ldi	r18, 0x01	; 1
		}
	
		if(SPSR & _BV(SPIF)) {
    1d38:	0d b4       	in	r0, 0x2d	; 45
    1d3a:	07 fc       	sbrc	r0, 7
    1d3c:	0a c0       	rjmp	.+20     	; 0x1d52 <SPI_Write_Byte+0x22>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1d3e:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
    1d40:	37 e2       	ldi	r19, 0x27	; 39
    1d42:	80 31       	cpi	r24, 0x10	; 16
    1d44:	93 07       	cpc	r25, r19
    1d46:	c0 f3       	brcs	.-16     	; 0x1d38 <SPI_Write_Byte+0x8>
			spiCommError = 1;
    1d48:	20 93 28 03 	sts	0x0328, r18
		}
	
		if(SPSR & _BV(SPIF)) {
    1d4c:	0d b4       	in	r0, 0x2d	; 45
    1d4e:	07 fe       	sbrs	r0, 7
    1d50:	f6 cf       	rjmp	.-20     	; 0x1d3e <SPI_Write_Byte+0xe>
}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    SPI_WAIT();
    return SPDR;
    1d52:	8e b5       	in	r24, 0x2e	; 46
}
    1d54:	08 95       	ret

00001d56 <mirf_config>:


void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
    1d56:	0f 93       	push	r16
    1d58:	1f 93       	push	r17
    1d5a:	df 93       	push	r29
    1d5c:	cf 93       	push	r28
    1d5e:	00 d0       	rcall	.+0      	; 0x1d60 <mirf_config+0xa>
    1d60:	cd b7       	in	r28, 0x3d	; 61
    1d62:	de b7       	in	r29, 0x3e	; 62
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1d64:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1d66:	80 e2       	ldi	r24, 0x20	; 32
    1d68:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1d6c:	8d e0       	ldi	r24, 0x0D	; 13
    1d6e:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    mirf_CSN_hi;
    1d72:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1d74:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1d76:	83 e2       	ldi	r24, 0x23	; 35
    1d78:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    mirf_CSN_hi;
    1d82:	28 9a       	sbi	0x05, 0	; 5

	// address width
	mirf_config_register(SETUP_AW, 0x01);

	// tx address
	temp[0] = (rfAddress>>8)&0xFF;
    1d84:	80 91 25 03 	lds	r24, 0x0325
    1d88:	90 91 26 03 	lds	r25, 0x0326
    1d8c:	99 83       	std	Y+1, r25	; 0x01
	temp[1] = rfAddress & 0xFF;
    1d8e:	8a 83       	std	Y+2, r24	; 0x02
	temp[2] = 0x00;
    1d90:	1b 82       	std	Y+3, r1	; 0x03
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1d92:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1d94:	80 e3       	ldi	r24, 0x30	; 48
    1d96:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1d9a:	8e 01       	movw	r16, r28
    1d9c:	0f 5f       	subi	r16, 0xFF	; 255
    1d9e:	1f 4f       	sbci	r17, 0xFF	; 255
    1da0:	c8 01       	movw	r24, r16
    1da2:	63 e0       	ldi	r22, 0x03	; 3
    1da4:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <SPI_Write_Block>
    mirf_CSN_hi;
    1da8:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1daa:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1dac:	8a e2       	ldi	r24, 0x2A	; 42
    1dae:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1db2:	c8 01       	movw	r24, r16
    1db4:	63 e0       	ldi	r22, 0x03	; 3
    1db6:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <SPI_Write_Block>
    mirf_CSN_hi;
    1dba:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1dbc:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1dbe:	81 e2       	ldi	r24, 0x21	; 33
    1dc0:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
    1dc6:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    mirf_CSN_hi;
    1dca:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1dcc:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1dce:	82 e2       	ldi	r24, 0x22	; 34
    1dd0:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1dd4:	81 e0       	ldi	r24, 0x01	; 1
    1dd6:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    mirf_CSN_hi;
    1dda:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1ddc:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1dde:	84 e2       	ldi	r24, 0x24	; 36
    1de0:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1de4:	82 e1       	ldi	r24, 0x12	; 18
    1de6:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    mirf_CSN_hi;
    1dea:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1dec:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1dee:	85 e2       	ldi	r24, 0x25	; 37
    1df0:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1df4:	88 e2       	ldi	r24, 0x28	; 40
    1df6:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    mirf_CSN_hi;
    1dfa:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1dfc:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1dfe:	81 e3       	ldi	r24, 0x31	; 49
    1e00:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1e04:	8d e0       	ldi	r24, 0x0D	; 13
    1e06:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    mirf_CSN_hi;
    1e0a:	28 9a       	sbi	0x05, 0	; 5

	// RX payload size; it isn't needed because the dynamic payload length is activated for ACK+PAYLOAD feature
    mirf_config_register(RX_PW_P0, PAYLOAD_SIZE);

	// enable extra features
    mirf_CSN_lo;
    1e0c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_ACTIVATE);
    1e0e:	80 e5       	ldi	r24, 0x50	; 80
    1e10:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    SPI_Write_Byte(0x73);
    1e14:	83 e7       	ldi	r24, 0x73	; 115
    1e16:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    mirf_CSN_hi;
    1e1a:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1e1c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1e1e:	8c e3       	ldi	r24, 0x3C	; 60
    1e20:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1e24:	81 e0       	ldi	r24, 0x01	; 1
    1e26:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    mirf_CSN_hi;
    1e2a:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1e2c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1e2e:	8d e3       	ldi	r24, 0x3D	; 61
    1e30:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1e34:	86 e0       	ldi	r24, 0x06	; 6
    1e36:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    mirf_CSN_hi;
    1e3a:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1e3c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1e3e:	80 e2       	ldi	r24, 0x20	; 32
    1e40:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1e44:	8f e0       	ldi	r24, 0x0F	; 15
    1e46:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    mirf_CSN_hi;
    1e4a:	28 9a       	sbi	0x05, 0	; 5

    // Start receiver 
    //PTX = 0;        // Start in receiving mode
    //RX_POWERUP;     // Power up in receiving mode
    //mirf_CE_hi;     // Listening for pakets
}
    1e4c:	0f 90       	pop	r0
    1e4e:	0f 90       	pop	r0
    1e50:	0f 90       	pop	r0
    1e52:	cf 91       	pop	r28
    1e54:	df 91       	pop	r29
    1e56:	1f 91       	pop	r17
    1e58:	0f 91       	pop	r16
    1e5a:	08 95       	ret

00001e5c <mirf_init>:
// Initializes pins as interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    //DDRB |= ((1<<CSN)|(1<<CE));
    mirf_CE_hi;
    1e5c:	2c 9a       	sbi	0x05, 4	; 5
    mirf_CSN_hi;
    1e5e:	28 9a       	sbi	0x05, 0	; 5

	mirf_config();
    1e60:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <mirf_config>
}
    1e64:	08 95       	ret

00001e66 <mirf_set_RADDR>:
    //mirf_CE_hi;     // Listening for pakets
}

void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    1e66:	cf 93       	push	r28
    1e68:	df 93       	push	r29
    1e6a:	ec 01       	movw	r28, r24
    mirf_CE_lo;
    1e6c:	2c 98       	cbi	0x05, 4	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1e6e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1e70:	8a e2       	ldi	r24, 0x2A	; 42
    1e72:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1e76:	ce 01       	movw	r24, r28
    1e78:	65 e0       	ldi	r22, 0x05	; 5
    1e7a:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <SPI_Write_Block>
    mirf_CSN_hi;
    1e7e:	28 9a       	sbi	0x05, 0	; 5
void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    mirf_CE_lo;
    mirf_write_register(RX_ADDR_P0,adr,5);
    mirf_CE_hi;
    1e80:	2c 9a       	sbi	0x05, 4	; 5
}
    1e82:	df 91       	pop	r29
    1e84:	cf 91       	pop	r28
    1e86:	08 95       	ret

00001e88 <mirf_set_TADDR>:

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
    1e88:	cf 93       	push	r28
    1e8a:	df 93       	push	r29
    1e8c:	ec 01       	movw	r28, r24
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1e8e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1e90:	80 e3       	ldi	r24, 0x30	; 48
    1e92:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1e96:	ce 01       	movw	r24, r28
    1e98:	65 e0       	ldi	r22, 0x05	; 5
    1e9a:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <SPI_Write_Block>
    mirf_CSN_hi;
    1e9e:	28 9a       	sbi	0x05, 0	; 5

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
	mirf_write_register(TX_ADDR, adr,5);
}
    1ea0:	df 91       	pop	r29
    1ea2:	cf 91       	pop	r28
    1ea4:	08 95       	ret

00001ea6 <mirf_data_ready>:
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
    1ea6:	80 91 49 05 	lds	r24, 0x0549
    1eaa:	88 23       	and	r24, r24
    1eac:	11 f0       	breq	.+4      	; 0x1eb2 <mirf_data_ready+0xc>
    1eae:	80 e0       	ldi	r24, 0x00	; 0
    mirf_CSN_lo;                                // Pull down chip select
    status = SPI_Write_Byte(NOP);               // Read status register
    mirf_CSN_hi;                                // Pull up chip select
    return status & (1<<RX_DR);

}
    1eb0:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    1eb2:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
    1eb4:	8f ef       	ldi	r24, 0xFF	; 255
    1eb6:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
    1eba:	28 9a       	sbi	0x05, 0	; 5
    return status & (1<<RX_DR);
    1ebc:	80 74       	andi	r24, 0x40	; 64
    1ebe:	08 95       	ret

00001ec0 <rx_fifo_is_empty>:

}

uint8_t rx_fifo_is_empty() {
    1ec0:	df 93       	push	r29
    1ec2:	cf 93       	push	r28
    1ec4:	0f 92       	push	r0
    1ec6:	cd b7       	in	r28, 0x3d	; 61
    1ec8:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t fifo_status = 0;
    1eca:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
    1ecc:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    1ece:	87 e1       	ldi	r24, 0x17	; 23
    1ed0:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    1ed4:	be 01       	movw	r22, r28
    1ed6:	6f 5f       	subi	r22, 0xFF	; 255
    1ed8:	7f 4f       	sbci	r23, 0xFF	; 255
    1eda:	cb 01       	movw	r24, r22
    1edc:	41 e0       	ldi	r20, 0x01	; 1
    1ede:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    1ee2:	28 9a       	sbi	0x05, 0	; 5
	
	uint8_t fifo_status = 0;

	mirf_read_register(FIFO_STATUS, &fifo_status, 1);
	
	return (uint8_t)(fifo_status&0x01);
    1ee4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ee6:	81 70       	andi	r24, 0x01	; 1
    1ee8:	0f 90       	pop	r0
    1eea:	cf 91       	pop	r28
    1eec:	df 91       	pop	r29
    1eee:	08 95       	ret

00001ef0 <flush_rx_fifo>:

void flush_rx_fifo() {

    mirf_CSN_lo;
    1ef0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
    1ef2:	82 ee       	ldi	r24, 0xE2	; 226
    1ef4:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    mirf_CSN_hi;
    1ef8:	28 9a       	sbi	0x05, 0	; 5

}
    1efa:	08 95       	ret

00001efc <mirf_get_data>:

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    1efc:	cf 93       	push	r28
    1efe:	df 93       	push	r29
    1f00:	ec 01       	movw	r28, r24
    mirf_CSN_lo;                               		// Pull down chip select
    1f02:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    1f04:	81 e6       	ldi	r24, 0x61	; 97
    1f06:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    1f0a:	ce 01       	movw	r24, r28
    1f0c:	be 01       	movw	r22, r28
    1f0e:	4d e0       	ldi	r20, 0x0D	; 13
    1f10:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
    1f14:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1f16:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1f18:	87 e2       	ldi	r24, 0x27	; 39
    1f1a:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1f1e:	80 e4       	ldi	r24, 0x40	; 64
    1f20:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    mirf_CSN_hi;
    1f24:	28 9a       	sbi	0x05, 0	; 5
    mirf_CSN_lo;                               		// Pull down chip select
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    mirf_CSN_hi;                               		// Pull up chip select
    mirf_config_register(STATUS,(1<<RX_DR));   		// Reset status register
}
    1f26:	df 91       	pop	r29
    1f28:	cf 91       	pop	r28
    1f2a:	08 95       	ret

00001f2c <mirf_config_register>:

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    1f2c:	df 93       	push	r29
    1f2e:	cf 93       	push	r28
    1f30:	0f 92       	push	r0
    1f32:	cd b7       	in	r28, 0x3d	; 61
    1f34:	de b7       	in	r29, 0x3e	; 62
    mirf_CSN_lo;
    1f36:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1f38:	8f 71       	andi	r24, 0x1F	; 31
    1f3a:	80 62       	ori	r24, 0x20	; 32
    1f3c:	69 83       	std	Y+1, r22	; 0x01
    1f3e:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1f42:	69 81       	ldd	r22, Y+1	; 0x01
    1f44:	86 2f       	mov	r24, r22
    1f46:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    mirf_CSN_hi;
    1f4a:	28 9a       	sbi	0x05, 0	; 5
}
    1f4c:	0f 90       	pop	r0
    1f4e:	cf 91       	pop	r28
    1f50:	df 91       	pop	r29
    1f52:	08 95       	ret

00001f54 <mirf_read_register>:

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    1f54:	0f 93       	push	r16
    1f56:	1f 93       	push	r17
    1f58:	df 93       	push	r29
    1f5a:	cf 93       	push	r28
    1f5c:	0f 92       	push	r0
    1f5e:	cd b7       	in	r28, 0x3d	; 61
    1f60:	de b7       	in	r29, 0x3e	; 62
    1f62:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    1f64:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    1f66:	8f 71       	andi	r24, 0x1F	; 31
    1f68:	49 83       	std	Y+1, r20	; 0x01
    1f6a:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    1f6e:	c8 01       	movw	r24, r16
    1f70:	b8 01       	movw	r22, r16
    1f72:	49 81       	ldd	r20, Y+1	; 0x01
    1f74:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    1f78:	28 9a       	sbi	0x05, 0	; 5
}
    1f7a:	0f 90       	pop	r0
    1f7c:	cf 91       	pop	r28
    1f7e:	df 91       	pop	r29
    1f80:	1f 91       	pop	r17
    1f82:	0f 91       	pop	r16
    1f84:	08 95       	ret

00001f86 <mirf_write_register>:

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    1f86:	0f 93       	push	r16
    1f88:	1f 93       	push	r17
    1f8a:	df 93       	push	r29
    1f8c:	cf 93       	push	r28
    1f8e:	0f 92       	push	r0
    1f90:	cd b7       	in	r28, 0x3d	; 61
    1f92:	de b7       	in	r29, 0x3e	; 62
    1f94:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    1f96:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1f98:	8f 71       	andi	r24, 0x1F	; 31
    1f9a:	80 62       	ori	r24, 0x20	; 32
    1f9c:	49 83       	std	Y+1, r20	; 0x01
    1f9e:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1fa2:	c8 01       	movw	r24, r16
    1fa4:	49 81       	ldd	r20, Y+1	; 0x01
    1fa6:	64 2f       	mov	r22, r20
    1fa8:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <SPI_Write_Block>
    mirf_CSN_hi;
    1fac:	28 9a       	sbi	0x05, 0	; 5
}
    1fae:	0f 90       	pop	r0
    1fb0:	cf 91       	pop	r28
    1fb2:	df 91       	pop	r29
    1fb4:	1f 91       	pop	r17
    1fb6:	0f 91       	pop	r16
    1fb8:	08 95       	ret

00001fba <mirf_send>:


void mirf_send(uint8_t * value, uint8_t len) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
    1fba:	0f 93       	push	r16
    1fbc:	1f 93       	push	r17
    1fbe:	df 93       	push	r29
    1fc0:	cf 93       	push	r28
    1fc2:	0f 92       	push	r0
    1fc4:	cd b7       	in	r28, 0x3d	; 61
    1fc6:	de b7       	in	r29, 0x3e	; 62
    1fc8:	8c 01       	movw	r16, r24
    while (PTX) {}                  // Wait until last paket is send
    1fca:	80 91 49 05 	lds	r24, 0x0549
    1fce:	88 23       	and	r24, r24
    1fd0:	e1 f7       	brne	.-8      	; 0x1fca <mirf_send+0x10>

    mirf_CE_lo;
    1fd2:	2c 98       	cbi	0x05, 4	; 5

    PTX = 1;                        // Set to transmitter mode
    1fd4:	81 e0       	ldi	r24, 0x01	; 1
    1fd6:	80 93 49 05 	sts	0x0549, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1fda:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1fdc:	80 e2       	ldi	r24, 0x20	; 32
    1fde:	69 83       	std	Y+1, r22	; 0x01
    1fe0:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1fe4:	8a e4       	ldi	r24, 0x4A	; 74
    1fe6:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    mirf_CSN_hi;
    1fea:	28 9a       	sbi	0x05, 0	; 5
    mirf_CE_lo;

    PTX = 1;                        // Set to transmitter mode
    TX_POWERUP;                     // Power up
    
    mirf_CSN_lo;                    // Pull down chip select
    1fec:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( FLUSH_TX );     // Write cmd to flush tx fifo
    1fee:	81 ee       	ldi	r24, 0xE1	; 225
    1ff0:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    mirf_CSN_hi;                    // Pull up chip select
    1ff4:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CSN_lo;                    // Pull down chip select
    1ff6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( W_TX_PAYLOAD ); // Write cmd to write payload
    1ff8:	80 ea       	ldi	r24, 0xA0	; 160
    1ffa:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    SPI_Write_Block(value,len);   // Write payload
    1ffe:	c8 01       	movw	r24, r16
    2000:	69 81       	ldd	r22, Y+1	; 0x01
    2002:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <SPI_Write_Block>
    mirf_CSN_hi;                    // Pull up chip select
    2006:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CE_hi;                     // Start transmission
    2008:	2c 9a       	sbi	0x05, 4	; 5
}
    200a:	0f 90       	pop	r0
    200c:	cf 91       	pop	r28
    200e:	df 91       	pop	r29
    2010:	1f 91       	pop	r17
    2012:	0f 91       	pop	r16
    2014:	08 95       	ret

00002016 <writeAckPayload>:

void writeAckPayload(unsigned char *data, unsigned char size) {
    2016:	ef 92       	push	r14
    2018:	ff 92       	push	r15
    201a:	0f 93       	push	r16
    201c:	1f 93       	push	r17
    201e:	df 93       	push	r29
    2020:	cf 93       	push	r28
    2022:	0f 92       	push	r0
    2024:	cd b7       	in	r28, 0x3d	; 61
    2026:	de b7       	in	r29, 0x3e	; 62
    2028:	18 2f       	mov	r17, r24
    202a:	06 2f       	mov	r16, r22
	return pWidth;
}

void flushTxFifo() {

    mirf_CSN_lo;
    202c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    202e:	81 ee       	ldi	r24, 0xE1	; 225
    2030:	99 83       	std	Y+1, r25	; 0x01
    2032:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    mirf_CSN_hi;
    2036:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
    2038:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
    203a:	88 ea       	ldi	r24, 0xA8	; 168
    203c:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>

	for(k=0; k<size; k++) {
    2040:	99 81       	ldd	r25, Y+1	; 0x01
    2042:	00 23       	and	r16, r16
    2044:	61 f0       	breq	.+24     	; 0x205e <writeAckPayload+0x48>
    2046:	61 2f       	mov	r22, r17
    2048:	79 2f       	mov	r23, r25
    204a:	7b 01       	movw	r14, r22
		SPI_Write_Byte(data[k]);
    204c:	f7 01       	movw	r30, r14
    204e:	81 91       	ld	r24, Z+
    2050:	7f 01       	movw	r14, r30
    2052:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>

    mirf_CSN_lo;

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);

	for(k=0; k<size; k++) {
    2056:	8e 2d       	mov	r24, r14
    2058:	81 1b       	sub	r24, r17
    205a:	80 17       	cp	r24, r16
    205c:	b8 f3       	brcs	.-18     	; 0x204c <writeAckPayload+0x36>
		SPI_Write_Byte(data[k]);
	}	

    mirf_CSN_hi;
    205e:	28 9a       	sbi	0x05, 0	; 5


}
    2060:	0f 90       	pop	r0
    2062:	cf 91       	pop	r28
    2064:	df 91       	pop	r29
    2066:	1f 91       	pop	r17
    2068:	0f 91       	pop	r16
    206a:	ff 90       	pop	r15
    206c:	ef 90       	pop	r14
    206e:	08 95       	ret

00002070 <readPayloadWidthFromTopFifo>:

uint8_t readPayloadWidthFromTopFifo() {
	uint8_t pWidth = 0;

    mirf_CSN_lo;
    2070:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_R_RX_PL_WID);
    2072:	80 e6       	ldi	r24, 0x60	; 96
    2074:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
	pWidth = SPI_Write_Byte(NOP); 	// not specified in the datasheet but the "NRF_R_RX_PL_WID" has a parameter,
    2078:	8f ef       	ldi	r24, 0xFF	; 255
    207a:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
									// we need to send a NOP to receive the actual payload size
    mirf_CSN_hi;
    207e:	28 9a       	sbi	0x05, 0	; 5
	
	return pWidth;
}
    2080:	08 95       	ret

00002082 <readPayloadWidthFromPipe0>:

uint8_t readPayloadWidthFromPipe0() {
    2082:	df 93       	push	r29
    2084:	cf 93       	push	r28
    2086:	0f 92       	push	r0
    2088:	cd b7       	in	r28, 0x3d	; 61
    208a:	de b7       	in	r29, 0x3e	; 62
	uint8_t pWidth = 0;
    208c:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
    208e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    2090:	81 e1       	ldi	r24, 0x11	; 17
    2092:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    2096:	be 01       	movw	r22, r28
    2098:	6f 5f       	subi	r22, 0xFF	; 255
    209a:	7f 4f       	sbci	r23, 0xFF	; 255
    209c:	cb 01       	movw	r24, r22
    209e:	41 e0       	ldi	r20, 0x01	; 1
    20a0:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    20a4:	28 9a       	sbi	0x05, 0	; 5
	uint8_t pWidth = 0;

	mirf_read_register(RX_PW_P0, &pWidth, 1);
	
	return pWidth;
}
    20a6:	89 81       	ldd	r24, Y+1	; 0x01
    20a8:	0f 90       	pop	r0
    20aa:	cf 91       	pop	r28
    20ac:	df 91       	pop	r29
    20ae:	08 95       	ret

000020b0 <flushTxFifo>:

void flushTxFifo() {

    mirf_CSN_lo;
    20b0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    20b2:	81 ee       	ldi	r24, 0xE1	; 225
    20b4:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    mirf_CSN_hi;
    20b8:	28 9a       	sbi	0x05, 0	; 5

}
    20ba:	08 95       	ret

000020bc <handleRFCommands>:

void handleRFCommands() {
    20bc:	ff 92       	push	r15
    20be:	0f 93       	push	r16
    20c0:	1f 93       	push	r17
    20c2:	df 93       	push	r29
    20c4:	cf 93       	push	r28
    20c6:	0f 92       	push	r0
    20c8:	cd b7       	in	r28, 0x3d	; 61
    20ca:	de b7       	in	r29, 0x3e	; 62
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
    20cc:	80 91 49 05 	lds	r24, 0x0549
    20d0:	88 23       	and	r24, r24
    20d2:	39 f0       	breq	.+14     	; 0x20e2 <handleRFCommands+0x26>

		

	}

}
    20d4:	0f 90       	pop	r0
    20d6:	cf 91       	pop	r28
    20d8:	df 91       	pop	r29
    20da:	1f 91       	pop	r17
    20dc:	0f 91       	pop	r16
    20de:	ff 90       	pop	r15
    20e0:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    20e2:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
    20e4:	8f ef       	ldi	r24, 0xFF	; 255
    20e6:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
    20ea:	28 9a       	sbi	0x05, 0	; 5

	unsigned int i=0;
	//uint8_t pWidth = 0;
	//uint8_t pWidthP0 = 0;

	if(mirf_data_ready()) {
    20ec:	86 ff       	sbrs	r24, 6
    20ee:	f2 cf       	rjmp	.-28     	; 0x20d4 <handleRFCommands+0x18>
		//if(spiCommError) {
		//	usart0Transmit(0xFE,1);
		//	return;
		//}

		rfFlags |= 0x02;
    20f0:	80 91 27 03 	lds	r24, 0x0327
    20f4:	82 60       	ori	r24, 0x02	; 2
    20f6:	80 93 27 03 	sts	0x0327, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    20fa:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    20fc:	87 e2       	ldi	r24, 0x27	; 39
    20fe:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    2102:	80 e7       	ldi	r24, 0x70	; 112
    2104:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    mirf_CSN_hi;
    2108:	28 9a       	sbi	0x05, 0	; 5

}

uint8_t rx_fifo_is_empty() {
	
	uint8_t fifo_status = 0;
    210a:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
    210c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    210e:	87 e1       	ldi	r24, 0x17	; 23
    2110:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    2114:	be 01       	movw	r22, r28
    2116:	6f 5f       	subi	r22, 0xFF	; 255
    2118:	7f 4f       	sbci	r23, 0xFF	; 255
    211a:	cb 01       	movw	r24, r22
    211c:	41 e0       	ldi	r20, 0x01	; 1
    211e:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    2122:	28 9a       	sbi	0x05, 0	; 5
	
	uint8_t fifo_status = 0;

	mirf_read_register(FIFO_STATUS, &fifo_status, 1);
	
	return (uint8_t)(fifo_status&0x01);
    2124:	89 81       	ldd	r24, Y+1	; 0x01
		// aren't present in the fifo with consequent wrong data read and wrong behavior of the robot.
		// To avoid this situtation we add this check before actually reading from the fifo to be 
		// sure there are correct data to be read.
		// We don't know why the IRQ for data reception is raised, maybe is not correctly reset sometimes
		// or it is raised when it shouldn't...
		if(rx_fifo_is_empty()) {
    2126:	80 fd       	sbrc	r24, 0
    2128:	d5 cf       	rjmp	.-86     	; 0x20d4 <handleRFCommands+0x18>
}

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    mirf_CSN_lo;                               		// Pull down chip select
    212a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    212c:	81 e6       	ldi	r24, 0x61	; 97
    212e:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    2132:	8e e9       	ldi	r24, 0x9E	; 158
    2134:	99 e0       	ldi	r25, 0x09	; 9
    2136:	bc 01       	movw	r22, r24
    2138:	4d e0       	ldi	r20, 0x0D	; 13
    213a:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
    213e:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    2140:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2142:	87 e2       	ldi	r24, 0x27	; 39
    2144:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    2148:	80 e4       	ldi	r24, 0x40	; 64
    214a:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    mirf_CSN_hi;
    214e:	28 9a       	sbi	0x05, 0	; 5
	return (uint8_t)(fifo_status&0x01);
}

void flush_rx_fifo() {

    mirf_CSN_lo;
    2150:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
    2152:	82 ee       	ldi	r24, 0xE2	; 226
    2154:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    mirf_CSN_hi;
    2158:	28 9a       	sbi	0x05, 0	; 5
		mirf_get_data(rfData);
		flush_rx_fifo();

		//usartTransmit(rfData[0]);

		if(rfDebugMode==1) {
    215a:	80 91 29 03 	lds	r24, 0x0329
    215e:	81 30       	cpi	r24, 0x01	; 1
    2160:	09 f4       	brne	.+2      	; 0x2164 <handleRFCommands+0xa8>
    2162:	4b c1       	rjmp	.+662    	; 0x23fa <__stack+0x1fb>

			//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
			// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
			// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    2164:	40 91 9e 09 	lds	r20, 0x099E
    2168:	24 2f       	mov	r18, r20
    216a:	44 23       	and	r20, r20
    216c:	09 f0       	breq	.+2      	; 0x2170 <handleRFCommands+0xb4>
    216e:	9c c1       	rjmp	.+824    	; 0x24a8 <__stack+0x2a9>
    2170:	50 91 9f 09 	lds	r21, 0x099F
    2174:	e5 2f       	mov	r30, r21
    2176:	55 23       	and	r21, r21
    2178:	09 f4       	brne	.+2      	; 0x217c <handleRFCommands+0xc0>
    217a:	10 c2       	rjmp	.+1056   	; 0x259c <__stack+0x39d>

				sleep(60);
    217c:	00 91 a0 09 	lds	r16, 0x09A0

			}

			if(calibrateOdomFlag==0) { 
    2180:	80 91 82 05 	lds	r24, 0x0582
    2184:	88 23       	and	r24, r24
    2186:	41 f5       	brne	.+80     	; 0x21d8 <handleRFCommands+0x11c>
				speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    2188:	70 91 a2 09 	lds	r23, 0x09A2
    218c:	27 2f       	mov	r18, r23
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	2f 77       	andi	r18, 0x7F	; 127
    2192:	30 70       	andi	r19, 0x00	; 0
    2194:	30 93 24 03 	sts	0x0324, r19
    2198:	20 93 23 03 	sts	0x0323, r18
				speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
    219c:	60 91 a3 09 	lds	r22, 0x09A3
    21a0:	86 2f       	mov	r24, r22
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	8f 77       	andi	r24, 0x7F	; 127
    21a6:	90 70       	andi	r25, 0x00	; 0
    21a8:	90 93 22 03 	sts	0x0322, r25
    21ac:	80 93 21 03 	sts	0x0321, r24
											// in the same range of the measured speed that is 0..800.
											// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
											// this means that the range is more or less 0..400.


				if((rfData[4]&0x80)==0x80) {			// motor right forward
    21b0:	77 fd       	sbrc	r23, 7
    21b2:	03 c0       	rjmp	.+6      	; 0x21ba <handleRFCommands+0xfe>
					pwm_right_desired = speedr; 		// speed received (0..127) is expressed in 1/5 of mm/s (0..635 mm/s)
				} else {								// backward
					pwm_right_desired = -(speedr);
    21b4:	30 95       	com	r19
    21b6:	21 95       	neg	r18
    21b8:	3f 4f       	sbci	r19, 0xFF	; 255
    21ba:	30 93 0a 03 	sts	0x030A, r19
    21be:	20 93 09 03 	sts	0x0309, r18
				}

				if((rfData[5]&0x80)==0x80) {			// motor left forward
    21c2:	67 fd       	sbrc	r22, 7
    21c4:	03 c0       	rjmp	.+6      	; 0x21cc <handleRFCommands+0x110>
					pwm_left_desired = speedl;
				} else {								// backward
					pwm_left_desired = -(speedl);
    21c6:	90 95       	com	r25
    21c8:	81 95       	neg	r24
    21ca:	9f 4f       	sbci	r25, 0xFF	; 255
    21cc:	90 93 0c 03 	sts	0x030C, r25
    21d0:	80 93 0b 03 	sts	0x030B, r24
    21d4:	24 2f       	mov	r18, r20
    21d6:	e5 2f       	mov	r30, r21

			}


			for(i=0; i<3; i++) {
				dataLED[i]=rfData[i]&0xFF;
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	30 93 87 09 	sts	0x0987, r19
    21de:	20 93 86 09 	sts	0x0986, r18
    21e2:	f0 e0       	ldi	r31, 0x00	; 0
    21e4:	f0 93 89 09 	sts	0x0989, r31
    21e8:	e0 93 88 09 	sts	0x0988, r30
    21ec:	10 e0       	ldi	r17, 0x00	; 0
    21ee:	10 93 8b 09 	sts	0x098B, r17
    21f2:	00 93 8a 09 	sts	0x098A, r16
			}
			pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
    21f6:	92 2f       	mov	r25, r18
    21f8:	88 27       	eor	r24, r24
    21fa:	82 1b       	sub	r24, r18
    21fc:	93 0b       	sbc	r25, r19
    21fe:	24 e6       	ldi	r18, 0x64	; 100
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	b9 01       	movw	r22, r18
    2204:	0e 94 95 58 	call	0xb12a	; 0xb12a <__udivmodhi4>
    2208:	f6 2e       	mov	r15, r22
    220a:	f0 94       	com	r15
    220c:	f0 92 0c 02 	sts	0x020C, r15
			pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
    2210:	5e 2f       	mov	r21, r30
    2212:	44 27       	eor	r20, r20
    2214:	4e 1b       	sub	r20, r30
    2216:	5f 0b       	sbc	r21, r31
    2218:	ca 01       	movw	r24, r20
    221a:	b9 01       	movw	r22, r18
    221c:	0e 94 95 58 	call	0xb12a	; 0xb12a <__udivmodhi4>
    2220:	60 95       	com	r22
    2222:	60 93 0e 02 	sts	0x020E, r22
			pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
    2226:	50 2f       	mov	r21, r16
    2228:	44 27       	eor	r20, r20
    222a:	40 1b       	sub	r20, r16
    222c:	51 0b       	sbc	r21, r17
    222e:	ca 01       	movw	r24, r20
    2230:	b9 01       	movw	r22, r18
    2232:	0e 94 95 58 	call	0xb12a	; 0xb12a <__udivmodhi4>
    2236:	60 95       	com	r22
    2238:	60 93 0d 02 	sts	0x020D, r22
			updateRedLed(pwm_red);
    223c:	8f 2d       	mov	r24, r15
    223e:	0e 94 fb 3f 	call	0x7ff6	; 0x7ff6 <updateRedLed>
			updateGreenLed(pwm_green);
    2242:	80 91 0d 02 	lds	r24, 0x020D
    2246:	0e 94 0f 40 	call	0x801e	; 0x801e <updateGreenLed>
			updateBlueLed(pwm_blue);
    224a:	80 91 0e 02 	lds	r24, 0x020E
    224e:	0e 94 23 40 	call	0x8046	; 0x8046 <updateBlueLed>


			if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
    2252:	80 91 a1 09 	lds	r24, 0x09A1
    2256:	80 ff       	sbrs	r24, 0
    2258:	59 c1       	rjmp	.+690    	; 0x250c <__stack+0x30d>
				LED_IR1_LOW;
    225a:	44 98       	cbi	0x08, 4	; 8
			} else {
				LED_IR1_HIGH;
			}

			if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
    225c:	81 ff       	sbrs	r24, 1
    225e:	54 c1       	rjmp	.+680    	; 0x2508 <__stack+0x309>
				LED_IR2_LOW;
    2260:	45 98       	cbi	0x08, 5	; 8
			} else {
				LED_IR2_HIGH;
			}

			if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
    2262:	98 2f       	mov	r25, r24
    2264:	82 ff       	sbrs	r24, 2
    2266:	4d c1       	rjmp	.+666    	; 0x2502 <__stack+0x303>
				irEnabled = 1;
    2268:	21 e0       	ldi	r18, 0x01	; 1
    226a:	20 93 12 02 	sts	0x0212, r18
			} else {
				irEnabled = 0;
			}

			if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
    226e:	84 fd       	sbrc	r24, 4
    2270:	a2 c1       	rjmp	.+836    	; 0x25b6 <__stack+0x3b7>
				calibrateSensors();
				resetOdometry();
			}

			if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
    2272:	86 ff       	sbrs	r24, 6
    2274:	43 c1       	rjmp	.+646    	; 0x24fc <__stack+0x2fd>
				obstacleAvoidanceEnabled = 1;
    2276:	81 e0       	ldi	r24, 0x01	; 1
    2278:	80 93 88 04 	sts	0x0488, r24
			} else {
				obstacleAvoidanceEnabled = 0;
			}

			if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
    227c:	97 fd       	sbrc	r25, 7
    227e:	c7 c1       	rjmp	.+910    	; 0x260e <__stack+0x40f>
				cliffAvoidanceEnabled = 1;
			} else {
				cliffAvoidanceEnabled = 0;
    2280:	10 92 89 04 	sts	0x0489, r1
			}

			// handle small green leds
			#ifdef HW_REV_3_1			

				if(bit_is_set(rfData[6], 0) ) {
    2284:	80 91 a4 09 	lds	r24, 0x09A4
    2288:	80 ff       	sbrs	r24, 0
    228a:	32 c1       	rjmp	.+612    	; 0x24f0 <__stack+0x2f1>
					GREEN_LED0_ON;
    228c:	80 91 0b 01 	lds	r24, 0x010B
    2290:	8e 7f       	andi	r24, 0xFE	; 254
    2292:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED0_OFF;
				}
				
				if(bit_is_set(rfData[6], 1) ) {
    2296:	80 91 a4 09 	lds	r24, 0x09A4
    229a:	81 ff       	sbrs	r24, 1
    229c:	23 c1       	rjmp	.+582    	; 0x24e4 <__stack+0x2e5>
					GREEN_LED1_ON;
    229e:	80 91 0b 01 	lds	r24, 0x010B
    22a2:	8d 7f       	andi	r24, 0xFD	; 253
    22a4:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED1_OFF;
				}
				
				if(bit_is_set(rfData[6], 2) ) {
    22a8:	80 91 a4 09 	lds	r24, 0x09A4
    22ac:	82 ff       	sbrs	r24, 2
    22ae:	14 c1       	rjmp	.+552    	; 0x24d8 <__stack+0x2d9>
					GREEN_LED2_ON;
    22b0:	80 91 0b 01 	lds	r24, 0x010B
    22b4:	8b 7f       	andi	r24, 0xFB	; 251
    22b6:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED2_OFF;
				}												

				if(bit_is_set(rfData[6], 3) ) {
    22ba:	80 91 a4 09 	lds	r24, 0x09A4
    22be:	83 ff       	sbrs	r24, 3
    22c0:	09 c1       	rjmp	.+530    	; 0x24d4 <__stack+0x2d5>
					GREEN_LED3_ON;
    22c2:	a3 98       	cbi	0x14, 3	; 20
				} else {
					GREEN_LED3_OFF;
				}

				if(bit_is_set(rfData[6], 4) ) {
    22c4:	80 91 a4 09 	lds	r24, 0x09A4
    22c8:	84 ff       	sbrs	r24, 4
    22ca:	fe c0       	rjmp	.+508    	; 0x24c8 <__stack+0x2c9>
					GREEN_LED4_ON;
    22cc:	80 91 0b 01 	lds	r24, 0x010B
    22d0:	8f 7e       	andi	r24, 0xEF	; 239
    22d2:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED4_OFF;
				}

				if(bit_is_set(rfData[6], 5) ) {
    22d6:	80 91 a4 09 	lds	r24, 0x09A4
    22da:	85 ff       	sbrs	r24, 5
    22dc:	ef c0       	rjmp	.+478    	; 0x24bc <__stack+0x2bd>
					GREEN_LED5_ON;
    22de:	80 91 0b 01 	lds	r24, 0x010B
    22e2:	8f 7d       	andi	r24, 0xDF	; 223
    22e4:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED5_OFF;
				}

				if(bit_is_set(rfData[6], 6) ) {
    22e8:	80 91 a4 09 	lds	r24, 0x09A4
    22ec:	86 ff       	sbrs	r24, 6
    22ee:	e0 c0       	rjmp	.+448    	; 0x24b0 <__stack+0x2b1>
					GREEN_LED6_ON;
    22f0:	80 91 0b 01 	lds	r24, 0x010B
    22f4:	8f 7b       	andi	r24, 0xBF	; 191
    22f6:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED6_OFF;
				}

				if(bit_is_set(rfData[6], 7) ) {
    22fa:	80 91 a4 09 	lds	r24, 0x09A4
    22fe:	87 fd       	sbrc	r24, 7
    2300:	80 c1       	rjmp	.+768    	; 0x2602 <__stack+0x403>
					GREEN_LED7_ON;
				} else {
					GREEN_LED7_OFF;
    2302:	80 91 0b 01 	lds	r24, 0x010B
    2306:	80 68       	ori	r24, 0x80	; 128
    2308:	80 93 0b 01 	sts	0x010B, r24
				}

			#endif
		
			if(currentSelector == 8) {
    230c:	80 91 64 04 	lds	r24, 0x0464
    2310:	88 30       	cpi	r24, 0x08	; 8
    2312:	09 f4       	brne	.+2      	; 0x2316 <__stack+0x117>
    2314:	58 c1       	rjmp	.+688    	; 0x25c6 <__stack+0x3c7>

			// read and handle the remaining bytes of the payload (at the moment not used)


			// write back the ack payload
			ackPayload[0] = packetId&0xFF;
    2316:	80 91 0b 02 	lds	r24, 0x020B
    231a:	80 93 d6 08 	sts	0x08D6, r24

			switch(packetId) {
    231e:	85 30       	cpi	r24, 0x05	; 5
    2320:	09 f4       	brne	.+2      	; 0x2324 <__stack+0x125>
    2322:	79 c1       	rjmp	.+754    	; 0x2616 <__stack+0x417>
    2324:	86 30       	cpi	r24, 0x06	; 6
    2326:	08 f4       	brcc	.+2      	; 0x232a <__stack+0x12b>
    2328:	f3 c0       	rjmp	.+486    	; 0x2510 <__stack+0x311>
    232a:	86 30       	cpi	r24, 0x06	; 6
    232c:	09 f4       	brne	.+2      	; 0x2330 <__stack+0x131>
    232e:	35 c2       	rjmp	.+1130   	; 0x279a <__stack+0x59b>
    2330:	87 30       	cpi	r24, 0x07	; 7
    2332:	09 f0       	breq	.+2      	; 0x2336 <__stack+0x137>
    2334:	62 c0       	rjmp	.+196    	; 0x23fa <__stack+0x1fb>
					packetId = 7;
					break;


				case 7:
					ackPayload[1] = ((signed long int)leftMotSteps)&0xFF;
    2336:	60 91 e5 02 	lds	r22, 0x02E5
    233a:	70 91 e6 02 	lds	r23, 0x02E6
    233e:	80 91 e7 02 	lds	r24, 0x02E7
    2342:	90 91 e8 02 	lds	r25, 0x02E8
    2346:	0e 94 9f 56 	call	0xad3e	; 0xad3e <__fixsfsi>
    234a:	60 93 d7 08 	sts	0x08D7, r22
					ackPayload[2] = ((signed long int)leftMotSteps)>>8;
    234e:	70 93 d8 08 	sts	0x08D8, r23
					ackPayload[3] = ((signed long int)leftMotSteps)>>16;
    2352:	80 93 d9 08 	sts	0x08D9, r24
					ackPayload[4] = ((signed long int)leftMotSteps)>>24;
    2356:	90 93 da 08 	sts	0x08DA, r25
					ackPayload[5] = ((signed long int)rightMotSteps)&0xFF;
    235a:	60 91 e1 02 	lds	r22, 0x02E1
    235e:	70 91 e2 02 	lds	r23, 0x02E2
    2362:	80 91 e3 02 	lds	r24, 0x02E3
    2366:	90 91 e4 02 	lds	r25, 0x02E4
    236a:	0e 94 9f 56 	call	0xad3e	; 0xad3e <__fixsfsi>
    236e:	60 93 db 08 	sts	0x08DB, r22
					ackPayload[6] = ((signed long int)rightMotSteps)>>8;
    2372:	70 93 dc 08 	sts	0x08DC, r23
					ackPayload[7] = ((signed long int)rightMotSteps)>>16;
    2376:	80 93 dd 08 	sts	0x08DD, r24
					ackPayload[8] = ((signed long int)rightMotSteps)>>24;
    237a:	90 93 de 08 	sts	0x08DE, r25
					lastTheta = theta;
    237e:	60 91 8b 04 	lds	r22, 0x048B
    2382:	70 91 8c 04 	lds	r23, 0x048C
    2386:	80 91 8d 04 	lds	r24, 0x048D
    238a:	90 91 8e 04 	lds	r25, 0x048E
    238e:	60 93 8f 04 	sts	0x048F, r22
    2392:	70 93 90 04 	sts	0x0490, r23
    2396:	80 93 91 04 	sts	0x0491, r24
    239a:	90 93 92 04 	sts	0x0492, r25
					ackPayload[9] = ((signed int)(lastTheta*573.0))&0xFF;	// radians to degrees => 573 = 1800/PI
    239e:	20 e0       	ldi	r18, 0x00	; 0
    23a0:	30 e4       	ldi	r19, 0x40	; 64
    23a2:	4f e0       	ldi	r20, 0x0F	; 15
    23a4:	54 e4       	ldi	r21, 0x44	; 68
    23a6:	0e 94 eb 57 	call	0xafd6	; 0xafd6 <__mulsf3>
    23aa:	0e 94 9f 56 	call	0xad3e	; 0xad3e <__fixsfsi>
    23ae:	26 2f       	mov	r18, r22
    23b0:	20 93 df 08 	sts	0x08DF, r18
					ackPayload[10] = ((signed int)(lastTheta*573.0))>>8;				
    23b4:	70 93 e0 08 	sts	0x08E0, r23
					ackPayload[11] = ((unsigned int)xPos)&0xFF;
    23b8:	60 91 93 04 	lds	r22, 0x0493
    23bc:	70 91 94 04 	lds	r23, 0x0494
    23c0:	80 91 95 04 	lds	r24, 0x0495
    23c4:	90 91 96 04 	lds	r25, 0x0496
    23c8:	0e 94 a4 56 	call	0xad48	; 0xad48 <__fixunssfsi>
    23cc:	60 93 e1 08 	sts	0x08E1, r22
					ackPayload[12] = ((unsigned int)xPos)>>8;
    23d0:	70 93 e2 08 	sts	0x08E2, r23
					ackPayload[13] = ((unsigned int)yPos)&0xFF;
    23d4:	60 91 97 04 	lds	r22, 0x0497
    23d8:	70 91 98 04 	lds	r23, 0x0498
    23dc:	80 91 99 04 	lds	r24, 0x0499
    23e0:	90 91 9a 04 	lds	r25, 0x049A
    23e4:	0e 94 a4 56 	call	0xad48	; 0xad48 <__fixunssfsi>
    23e8:	60 93 e3 08 	sts	0x08E3, r22
					ackPayload[14] = ((unsigned int)yPos)>>8;
    23ec:	70 93 e4 08 	sts	0x08E4, r23
					//ackPayload[10] = ((unsigned int)(thetaOld*573.0))>>8;
					//ackPayload[11] = ((unsigned int)xPosOld)&0xFF;
					//ackPayload[12] = ((unsigned int)xPosOld)>>8;
					//ackPayload[13] = ((unsigned int)yPosOld)&0xFF;
					//ackPayload[14] = ((unsigned int)yPosOld)>>8;
					ackPayload[15] = 0;
    23f0:	10 92 e5 08 	sts	0x08E5, r1
					packetId = 3;
    23f4:	83 e0       	ldi	r24, 0x03	; 3
    23f6:	80 93 0b 02 	sts	0x020B, r24
	return pWidth;
}

void flushTxFifo() {

    mirf_CSN_lo;
    23fa:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    23fc:	81 ee       	ldi	r24, 0xE1	; 225
    23fe:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    mirf_CSN_hi;
    2402:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
    2404:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
    2406:	88 ea       	ldi	r24, 0xA8	; 168
    2408:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>

	for(k=0; k<size; k++) {
		SPI_Write_Byte(data[k]);
    240c:	80 91 d6 08 	lds	r24, 0x08D6
    2410:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    2414:	80 91 d7 08 	lds	r24, 0x08D7
    2418:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    241c:	80 91 d8 08 	lds	r24, 0x08D8
    2420:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    2424:	80 91 d9 08 	lds	r24, 0x08D9
    2428:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    242c:	80 91 da 08 	lds	r24, 0x08DA
    2430:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    2434:	80 91 db 08 	lds	r24, 0x08DB
    2438:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    243c:	80 91 dc 08 	lds	r24, 0x08DC
    2440:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    2444:	80 91 dd 08 	lds	r24, 0x08DD
    2448:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    244c:	80 91 de 08 	lds	r24, 0x08DE
    2450:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    2454:	80 91 df 08 	lds	r24, 0x08DF
    2458:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    245c:	80 91 e0 08 	lds	r24, 0x08E0
    2460:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    2464:	80 91 e1 08 	lds	r24, 0x08E1
    2468:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    246c:	80 91 e2 08 	lds	r24, 0x08E2
    2470:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    2474:	80 91 e3 08 	lds	r24, 0x08E3
    2478:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    247c:	80 91 e4 08 	lds	r24, 0x08E4
    2480:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
    2484:	80 91 e5 08 	lds	r24, 0x08E5
    2488:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <SPI_Write_Byte>
	}	

    mirf_CSN_hi;
    248c:	28 9a       	sbi	0x05, 0	; 5

		

	}

}
    248e:	0f 90       	pop	r0
    2490:	cf 91       	pop	r28
    2492:	df 91       	pop	r29
    2494:	1f 91       	pop	r17
    2496:	0f 91       	pop	r16
    2498:	ff 90       	pop	r15
    249a:	08 95       	ret
			// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
			// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {

				sleep(60);
    249c:	8c e3       	ldi	r24, 0x3C	; 60
    249e:	0e 94 85 20 	call	0x410a	; 0x410a <sleep>
    24a2:	40 91 9e 09 	lds	r20, 0x099E
    24a6:	24 2f       	mov	r18, r20
    24a8:	50 91 9f 09 	lds	r21, 0x099F
    24ac:	e5 2f       	mov	r30, r21
    24ae:	66 ce       	rjmp	.-820    	; 0x217c <handleRFCommands+0xc0>
				}

				if(bit_is_set(rfData[6], 6) ) {
					GREEN_LED6_ON;
				} else {
					GREEN_LED6_OFF;
    24b0:	80 91 0b 01 	lds	r24, 0x010B
    24b4:	80 64       	ori	r24, 0x40	; 64
    24b6:	80 93 0b 01 	sts	0x010B, r24
    24ba:	1f cf       	rjmp	.-450    	; 0x22fa <__stack+0xfb>
				}

				if(bit_is_set(rfData[6], 5) ) {
					GREEN_LED5_ON;
				} else {
					GREEN_LED5_OFF;
    24bc:	80 91 0b 01 	lds	r24, 0x010B
    24c0:	80 62       	ori	r24, 0x20	; 32
    24c2:	80 93 0b 01 	sts	0x010B, r24
    24c6:	10 cf       	rjmp	.-480    	; 0x22e8 <__stack+0xe9>
				}

				if(bit_is_set(rfData[6], 4) ) {
					GREEN_LED4_ON;
				} else {
					GREEN_LED4_OFF;
    24c8:	80 91 0b 01 	lds	r24, 0x010B
    24cc:	80 61       	ori	r24, 0x10	; 16
    24ce:	80 93 0b 01 	sts	0x010B, r24
    24d2:	01 cf       	rjmp	.-510    	; 0x22d6 <__stack+0xd7>
				}												

				if(bit_is_set(rfData[6], 3) ) {
					GREEN_LED3_ON;
				} else {
					GREEN_LED3_OFF;
    24d4:	a3 9a       	sbi	0x14, 3	; 20
    24d6:	f6 ce       	rjmp	.-532    	; 0x22c4 <__stack+0xc5>
				}
				
				if(bit_is_set(rfData[6], 2) ) {
					GREEN_LED2_ON;
				} else {
					GREEN_LED2_OFF;
    24d8:	80 91 0b 01 	lds	r24, 0x010B
    24dc:	84 60       	ori	r24, 0x04	; 4
    24de:	80 93 0b 01 	sts	0x010B, r24
    24e2:	eb ce       	rjmp	.-554    	; 0x22ba <__stack+0xbb>
				}
				
				if(bit_is_set(rfData[6], 1) ) {
					GREEN_LED1_ON;
				} else {
					GREEN_LED1_OFF;
    24e4:	80 91 0b 01 	lds	r24, 0x010B
    24e8:	82 60       	ori	r24, 0x02	; 2
    24ea:	80 93 0b 01 	sts	0x010B, r24
    24ee:	dc ce       	rjmp	.-584    	; 0x22a8 <__stack+0xa9>
			#ifdef HW_REV_3_1			

				if(bit_is_set(rfData[6], 0) ) {
					GREEN_LED0_ON;
				} else {
					GREEN_LED0_OFF;
    24f0:	80 91 0b 01 	lds	r24, 0x010B
    24f4:	81 60       	ori	r24, 0x01	; 1
    24f6:	80 93 0b 01 	sts	0x010B, r24
    24fa:	cd ce       	rjmp	.-614    	; 0x2296 <__stack+0x97>
			}

			if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
				obstacleAvoidanceEnabled = 1;
			} else {
				obstacleAvoidanceEnabled = 0;
    24fc:	10 92 88 04 	sts	0x0488, r1
    2500:	bd ce       	rjmp	.-646    	; 0x227c <__stack+0x7d>
			}

			if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
				irEnabled = 1;
			} else {
				irEnabled = 0;
    2502:	10 92 12 02 	sts	0x0212, r1
    2506:	b3 ce       	rjmp	.-666    	; 0x226e <__stack+0x6f>
			}

			if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
				LED_IR2_LOW;
			} else {
				LED_IR2_HIGH;
    2508:	45 9a       	sbi	0x08, 5	; 8
    250a:	ab ce       	rjmp	.-682    	; 0x2262 <__stack+0x63>


			if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
				LED_IR1_LOW;
			} else {
				LED_IR1_HIGH;
    250c:	44 9a       	sbi	0x08, 4	; 8
    250e:	a6 ce       	rjmp	.-692    	; 0x225c <__stack+0x5d>


			// write back the ack payload
			ackPayload[0] = packetId&0xFF;

			switch(packetId) {
    2510:	83 30       	cpi	r24, 0x03	; 3
    2512:	09 f4       	brne	.+2      	; 0x2516 <__stack+0x317>
    2514:	dc c0       	rjmp	.+440    	; 0x26ce <__stack+0x4cf>
    2516:	84 30       	cpi	r24, 0x04	; 4
    2518:	09 f0       	breq	.+2      	; 0x251c <__stack+0x31d>
    251a:	6f cf       	rjmp	.-290    	; 0x23fa <__stack+0x1fb>
					#endif
					packetId = 4;
					break;

				case 4:
					ackPayload[1] = proximityResult[4]&0xFF;
    251c:	90 91 71 02 	lds	r25, 0x0271
    2520:	80 91 72 02 	lds	r24, 0x0272
    2524:	90 93 d7 08 	sts	0x08D7, r25
					ackPayload[2] = proximityResult[4]>>8;
    2528:	80 93 d8 08 	sts	0x08D8, r24
					ackPayload[3] = proximityResult[8]&0xFF;
    252c:	90 91 79 02 	lds	r25, 0x0279
    2530:	80 91 7a 02 	lds	r24, 0x027A
    2534:	90 93 d9 08 	sts	0x08D9, r25
					ackPayload[4] = proximityResult[8]>>8;
    2538:	80 93 da 08 	sts	0x08DA, r24
					ackPayload[5] = proximityResult[9]&0xFF;
    253c:	90 91 7b 02 	lds	r25, 0x027B
    2540:	80 91 7c 02 	lds	r24, 0x027C
    2544:	90 93 db 08 	sts	0x08DB, r25
					ackPayload[6] = proximityResult[9]>>8;
    2548:	80 93 dc 08 	sts	0x08DC, r24
					ackPayload[7] = proximityResult[10]&0xFF;
    254c:	90 91 7d 02 	lds	r25, 0x027D
    2550:	80 91 7e 02 	lds	r24, 0x027E
    2554:	90 93 dd 08 	sts	0x08DD, r25
					ackPayload[8] = proximityResult[10]>>8;
    2558:	80 93 de 08 	sts	0x08DE, r24
					ackPayload[9] = proximityResult[11]&0xFF;
    255c:	90 91 7f 02 	lds	r25, 0x027F
    2560:	80 91 80 02 	lds	r24, 0x0280
    2564:	90 93 df 08 	sts	0x08DF, r25
					ackPayload[10] = proximityResult[11]>>8;
    2568:	80 93 e0 08 	sts	0x08E0, r24
					ackPayload[11] = accX&0xFF;
    256c:	90 91 40 04 	lds	r25, 0x0440
    2570:	80 91 41 04 	lds	r24, 0x0441
    2574:	90 93 e1 08 	sts	0x08E1, r25
					ackPayload[12] = accX>>8;
    2578:	80 93 e2 08 	sts	0x08E2, r24
					ackPayload[13] = accY&0xFF;
    257c:	90 91 42 04 	lds	r25, 0x0442
    2580:	80 91 43 04 	lds	r24, 0x0443
    2584:	90 93 e3 08 	sts	0x08E3, r25
					ackPayload[14] = accY>>8;
    2588:	80 93 e4 08 	sts	0x08E4, r24
					ackPayload[15] = irCommand;
    258c:	80 91 37 04 	lds	r24, 0x0437
    2590:	80 93 e5 08 	sts	0x08E5, r24
					packetId = 5;
    2594:	85 e0       	ldi	r24, 0x05	; 5
    2596:	80 93 0b 02 	sts	0x020B, r24
					break;
    259a:	2f cf       	rjmp	.-418    	; 0x23fa <__stack+0x1fb>

			//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
			// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
			// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    259c:	00 91 a0 09 	lds	r16, 0x09A0
    25a0:	00 23       	and	r16, r16
    25a2:	09 f0       	breq	.+2      	; 0x25a6 <__stack+0x3a7>
    25a4:	4c c1       	rjmp	.+664    	; 0x283e <__stack+0x63f>
    25a6:	80 91 a1 09 	lds	r24, 0x09A1
    25aa:	88 30       	cpi	r24, 0x08	; 8
    25ac:	09 f4       	brne	.+2      	; 0x25b0 <__stack+0x3b1>
    25ae:	49 c1       	rjmp	.+658    	; 0x2842 <__stack+0x643>
    25b0:	e0 2f       	mov	r30, r16
    25b2:	20 2f       	mov	r18, r16
    25b4:	e5 cd       	rjmp	.-1078   	; 0x2180 <handleRFCommands+0xc4>
			} else {
				irEnabled = 0;
			}

			if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
				calibrateSensors();
    25b6:	0e 94 d9 42 	call	0x85b2	; 0x85b2 <calibrateSensors>
				resetOdometry();
    25ba:	0e 94 fe 20 	call	0x41fc	; 0x41fc <resetOdometry>
    25be:	90 91 a1 09 	lds	r25, 0x09A1
    25c2:	89 2f       	mov	r24, r25
    25c4:	56 ce       	rjmp	.-852    	; 0x2272 <__stack+0x73>
				}

			#endif
		
			if(currentSelector == 8) {
				if(calibrateOdomFlag==0) {
    25c6:	80 91 82 05 	lds	r24, 0x0582
    25ca:	88 23       	and	r24, r24
    25cc:	09 f0       	breq	.+2      	; 0x25d0 <__stack+0x3d1>
    25ce:	a3 ce       	rjmp	.-698    	; 0x2316 <__stack+0x117>
					if((rfData[7]&0b00000001)==0b00000001) {
    25d0:	80 91 a5 09 	lds	r24, 0x09A5
    25d4:	80 ff       	sbrs	r24, 0
    25d6:	9f ce       	rjmp	.-706    	; 0x2316 <__stack+0x117>
						calibrateSensors();
    25d8:	0e 94 d9 42 	call	0x85b2	; 0x85b2 <calibrateSensors>
						proximityResult[8] = 1023;	// because the first time this value could be low after calibration
    25dc:	8f ef       	ldi	r24, 0xFF	; 255
    25de:	93 e0       	ldi	r25, 0x03	; 3
    25e0:	90 93 7a 02 	sts	0x027A, r25
    25e4:	80 93 79 02 	sts	0x0279, r24
						proximityResult[11] = 1023;	// and in that case a false black line will be detected
    25e8:	90 93 80 02 	sts	0x0280, r25
    25ec:	80 93 7f 02 	sts	0x027F, r24
						calibState = CALIBRATION_STATE_FIND_THRS_0;
    25f0:	86 e0       	ldi	r24, 0x06	; 6
    25f2:	80 93 75 0b 	sts	0x0B75, r24
						calibVelIndex = 1;
    25f6:	81 e0       	ldi	r24, 0x01	; 1
    25f8:	80 93 cf 08 	sts	0x08CF, r24
						calibrateOdomFlag = 1;
    25fc:	80 93 82 05 	sts	0x0582, r24
    2600:	8a ce       	rjmp	.-748    	; 0x2316 <__stack+0x117>
				} else {
					GREEN_LED6_OFF;
				}

				if(bit_is_set(rfData[6], 7) ) {
					GREEN_LED7_ON;
    2602:	80 91 0b 01 	lds	r24, 0x010B
    2606:	8f 77       	andi	r24, 0x7F	; 127
    2608:	80 93 0b 01 	sts	0x010B, r24
    260c:	7f ce       	rjmp	.-770    	; 0x230c <__stack+0x10d>
			} else {
				obstacleAvoidanceEnabled = 0;
			}

			if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
				cliffAvoidanceEnabled = 1;
    260e:	81 e0       	ldi	r24, 0x01	; 1
    2610:	80 93 89 04 	sts	0x0489, r24
    2614:	37 ce       	rjmp	.-914    	; 0x2284 <__stack+0x85>
					ackPayload[15] = irCommand;
					packetId = 5;
					break;

				case 5:
					ackPayload[1] = proximityValue[0]&0xFF;
    2616:	80 91 39 02 	lds	r24, 0x0239
    261a:	90 91 3a 02 	lds	r25, 0x023A
    261e:	80 93 d7 08 	sts	0x08D7, r24
					ackPayload[2] = proximityValue[0]>>8;
    2622:	80 91 39 02 	lds	r24, 0x0239
    2626:	90 91 3a 02 	lds	r25, 0x023A
    262a:	90 93 d8 08 	sts	0x08D8, r25
					ackPayload[3] = proximityValue[2]&0xFF;
    262e:	80 91 3d 02 	lds	r24, 0x023D
    2632:	90 91 3e 02 	lds	r25, 0x023E
    2636:	80 93 d9 08 	sts	0x08D9, r24
					ackPayload[4] = proximityValue[2]>>8;
    263a:	80 91 3d 02 	lds	r24, 0x023D
    263e:	90 91 3e 02 	lds	r25, 0x023E
    2642:	90 93 da 08 	sts	0x08DA, r25
					ackPayload[5] = proximityValue[4]&0xFF;
    2646:	80 91 41 02 	lds	r24, 0x0241
    264a:	90 91 42 02 	lds	r25, 0x0242
    264e:	80 93 db 08 	sts	0x08DB, r24
					ackPayload[6] = proximityValue[4]>>8;
    2652:	80 91 41 02 	lds	r24, 0x0241
    2656:	90 91 42 02 	lds	r25, 0x0242
    265a:	90 93 dc 08 	sts	0x08DC, r25
					ackPayload[7] = proximityValue[6]&0xFF;
    265e:	80 91 45 02 	lds	r24, 0x0245
    2662:	90 91 46 02 	lds	r25, 0x0246
    2666:	80 93 dd 08 	sts	0x08DD, r24
					ackPayload[8] = proximityValue[6]>>8;
    266a:	80 91 45 02 	lds	r24, 0x0245
    266e:	90 91 46 02 	lds	r25, 0x0246
    2672:	90 93 de 08 	sts	0x08DE, r25
					ackPayload[9] = proximityValue[10]&0xFF;
    2676:	80 91 4d 02 	lds	r24, 0x024D
    267a:	90 91 4e 02 	lds	r25, 0x024E
    267e:	80 93 df 08 	sts	0x08DF, r24
					ackPayload[10] = proximityValue[10]>>8;
    2682:	80 91 4d 02 	lds	r24, 0x024D
    2686:	90 91 4e 02 	lds	r25, 0x024E
    268a:	90 93 e0 08 	sts	0x08E0, r25
					ackPayload[11] = proximityValue[12]&0xFF;
    268e:	80 91 51 02 	lds	r24, 0x0251
    2692:	90 91 52 02 	lds	r25, 0x0252
    2696:	80 93 e1 08 	sts	0x08E1, r24
					ackPayload[12] = proximityValue[12]>>8;
    269a:	80 91 51 02 	lds	r24, 0x0251
    269e:	90 91 52 02 	lds	r25, 0x0252
    26a2:	90 93 e2 08 	sts	0x08E2, r25
					ackPayload[13] = proximityValue[14]&0xFF;
    26a6:	80 91 55 02 	lds	r24, 0x0255
    26aa:	90 91 56 02 	lds	r25, 0x0256
    26ae:	80 93 e3 08 	sts	0x08E3, r24
					ackPayload[14] = proximityValue[14]>>8;
    26b2:	80 91 55 02 	lds	r24, 0x0255
    26b6:	90 91 56 02 	lds	r25, 0x0256
    26ba:	90 93 e4 08 	sts	0x08E4, r25
					ackPayload[15] = currentSelector;
    26be:	80 91 64 04 	lds	r24, 0x0464
    26c2:	80 93 e5 08 	sts	0x08E5, r24
					packetId = 6;
    26c6:	86 e0       	ldi	r24, 0x06	; 6
    26c8:	80 93 0b 02 	sts	0x020B, r24
					break;
    26cc:	96 ce       	rjmp	.-724    	; 0x23fa <__stack+0x1fb>
			// write back the ack payload
			ackPayload[0] = packetId&0xFF;

			switch(packetId) {
				case 3:
					ackPayload[1] = proximityResult[0]&0xFF;
    26ce:	90 91 69 02 	lds	r25, 0x0269
    26d2:	80 91 6a 02 	lds	r24, 0x026A
    26d6:	90 93 d7 08 	sts	0x08D7, r25
					ackPayload[2] = proximityResult[0]>>8;
    26da:	80 93 d8 08 	sts	0x08D8, r24
					ackPayload[3] = proximityResult[1]&0xFF;
    26de:	90 91 6b 02 	lds	r25, 0x026B
    26e2:	80 91 6c 02 	lds	r24, 0x026C
    26e6:	90 93 d9 08 	sts	0x08D9, r25
					ackPayload[4] = proximityResult[1]>>8;
    26ea:	80 93 da 08 	sts	0x08DA, r24
					ackPayload[5] = proximityResult[2]&0xFF;
    26ee:	90 91 6d 02 	lds	r25, 0x026D
    26f2:	80 91 6e 02 	lds	r24, 0x026E
    26f6:	90 93 db 08 	sts	0x08DB, r25
					ackPayload[6] = proximityResult[2]>>8;
    26fa:	80 93 dc 08 	sts	0x08DC, r24
					ackPayload[7] = proximityResult[3]&0xFF;
    26fe:	90 91 6f 02 	lds	r25, 0x026F
    2702:	80 91 70 02 	lds	r24, 0x0270
    2706:	90 93 dd 08 	sts	0x08DD, r25
					ackPayload[8] = proximityResult[3]>>8;
    270a:	80 93 de 08 	sts	0x08DE, r24
					ackPayload[9] = proximityResult[5]&0xFF;
    270e:	90 91 73 02 	lds	r25, 0x0273
    2712:	80 91 74 02 	lds	r24, 0x0274
    2716:	90 93 df 08 	sts	0x08DF, r25
					ackPayload[10] = proximityResult[5]>>8;
    271a:	80 93 e0 08 	sts	0x08E0, r24
					ackPayload[11] = proximityResult[6]&0xFF;
    271e:	90 91 75 02 	lds	r25, 0x0275
    2722:	80 91 76 02 	lds	r24, 0x0276
    2726:	90 93 e1 08 	sts	0x08E1, r25
					ackPayload[12] = proximityResult[6]>>8;
    272a:	80 93 e2 08 	sts	0x08E2, r24
					ackPayload[13] = proximityResult[7]&0xFF;
    272e:	90 91 77 02 	lds	r25, 0x0277
    2732:	80 91 78 02 	lds	r24, 0x0278
    2736:	90 93 e3 08 	sts	0x08E3, r25
					ackPayload[14] = proximityResult[7]>>8;
    273a:	80 93 e4 08 	sts	0x08E4, r24
					#ifdef HW_REV_3_1
						ackPayload[15] = CHARGE_ON | (BUTTON0 << 1) | (CHARGE_STAT << 2);
    273e:	30 91 03 01 	lds	r19, 0x0103
    2742:	80 91 03 01 	lds	r24, 0x0103
    2746:	20 91 03 01 	lds	r18, 0x0103
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	80 72       	andi	r24, 0x20	; 32
    274e:	90 70       	andi	r25, 0x00	; 0
    2750:	95 95       	asr	r25
    2752:	87 95       	ror	r24
    2754:	95 95       	asr	r25
    2756:	87 95       	ror	r24
    2758:	95 95       	asr	r25
    275a:	87 95       	ror	r24
    275c:	95 95       	asr	r25
    275e:	87 95       	ror	r24
    2760:	95 95       	asr	r25
    2762:	87 95       	ror	r24
    2764:	88 0f       	add	r24, r24
    2766:	99 1f       	adc	r25, r25
    2768:	22 1f       	adc	r18, r18
    276a:	22 27       	eor	r18, r18
    276c:	22 1f       	adc	r18, r18
    276e:	22 0f       	add	r18, r18
    2770:	22 0f       	add	r18, r18
    2772:	28 2b       	or	r18, r24
    2774:	83 2f       	mov	r24, r19
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	80 71       	andi	r24, 0x10	; 16
    277a:	90 70       	andi	r25, 0x00	; 0
    277c:	95 95       	asr	r25
    277e:	87 95       	ror	r24
    2780:	95 95       	asr	r25
    2782:	87 95       	ror	r24
    2784:	95 95       	asr	r25
    2786:	87 95       	ror	r24
    2788:	95 95       	asr	r25
    278a:	87 95       	ror	r24
    278c:	28 2b       	or	r18, r24
    278e:	20 93 e5 08 	sts	0x08E5, r18
					#else
						ackPayload[15] = CHARGE_ON | (BUTTON0 << 1);
					#endif
					packetId = 4;
    2792:	84 e0       	ldi	r24, 0x04	; 4
    2794:	80 93 0b 02 	sts	0x020B, r24
					break;
    2798:	30 ce       	rjmp	.-928    	; 0x23fa <__stack+0x1fb>
					ackPayload[15] = currentSelector;
					packetId = 6;
					break;

				case 6:
					ackPayload[1] = proximityValue[8]&0xFF;
    279a:	80 91 49 02 	lds	r24, 0x0249
    279e:	90 91 4a 02 	lds	r25, 0x024A
    27a2:	80 93 d7 08 	sts	0x08D7, r24
					ackPayload[2] = proximityValue[8]>>8;
    27a6:	80 91 49 02 	lds	r24, 0x0249
    27aa:	90 91 4a 02 	lds	r25, 0x024A
    27ae:	90 93 d8 08 	sts	0x08D8, r25
					ackPayload[3] = proximityValue[16]&0xFF;
    27b2:	80 91 59 02 	lds	r24, 0x0259
    27b6:	90 91 5a 02 	lds	r25, 0x025A
    27ba:	80 93 d9 08 	sts	0x08D9, r24
					ackPayload[4] = proximityValue[16]>>8;
    27be:	80 91 59 02 	lds	r24, 0x0259
    27c2:	90 91 5a 02 	lds	r25, 0x025A
    27c6:	90 93 da 08 	sts	0x08DA, r25
					ackPayload[5] = proximityValue[18]&0xFF;
    27ca:	80 91 5d 02 	lds	r24, 0x025D
    27ce:	90 91 5e 02 	lds	r25, 0x025E
    27d2:	80 93 db 08 	sts	0x08DB, r24
					ackPayload[6] = proximityValue[18]>>8;
    27d6:	80 91 5d 02 	lds	r24, 0x025D
    27da:	90 91 5e 02 	lds	r25, 0x025E
    27de:	90 93 dc 08 	sts	0x08DC, r25
					ackPayload[7] = proximityValue[20]&0xFF;
    27e2:	80 91 61 02 	lds	r24, 0x0261
    27e6:	90 91 62 02 	lds	r25, 0x0262
    27ea:	80 93 dd 08 	sts	0x08DD, r24
					ackPayload[8] = proximityValue[20]>>8;
    27ee:	80 91 61 02 	lds	r24, 0x0261
    27f2:	90 91 62 02 	lds	r25, 0x0262
    27f6:	90 93 de 08 	sts	0x08DE, r25
					ackPayload[9] = proximityValue[22]&0xFF;
    27fa:	80 91 65 02 	lds	r24, 0x0265
    27fe:	90 91 66 02 	lds	r25, 0x0266
    2802:	80 93 df 08 	sts	0x08DF, r24
					ackPayload[10] = proximityValue[22]>>8;
    2806:	80 91 65 02 	lds	r24, 0x0265
    280a:	90 91 66 02 	lds	r25, 0x0266
    280e:	90 93 e0 08 	sts	0x08E0, r25
					ackPayload[11] = accZ&0xFF;
    2812:	90 91 44 04 	lds	r25, 0x0444
    2816:	80 91 45 04 	lds	r24, 0x0445
    281a:	90 93 e1 08 	sts	0x08E1, r25
					ackPayload[12] = accZ>>8;	
    281e:	80 93 e2 08 	sts	0x08E2, r24
					ackPayload[13] = batteryLevel&0xFF;
    2822:	90 91 cd 02 	lds	r25, 0x02CD
    2826:	80 91 ce 02 	lds	r24, 0x02CE
    282a:	90 93 e3 08 	sts	0x08E3, r25
					ackPayload[14] = batteryLevel>>8;
    282e:	80 93 e4 08 	sts	0x08E4, r24
					ackPayload[15] = 0;
    2832:	10 92 e5 08 	sts	0x08E5, r1
					packetId = 7;
    2836:	87 e0       	ldi	r24, 0x07	; 7
    2838:	80 93 0b 02 	sts	0x020B, r24
					break;
    283c:	de cd       	rjmp	.-1092   	; 0x23fa <__stack+0x1fb>

			//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
			// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
			// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    283e:	25 2f       	mov	r18, r21
    2840:	9f cc       	rjmp	.-1730   	; 0x2180 <handleRFCommands+0xc4>
    2842:	80 91 a2 09 	lds	r24, 0x09A2
    2846:	88 23       	and	r24, r24
    2848:	09 f0       	breq	.+2      	; 0x284c <__stack+0x64d>
    284a:	b2 ce       	rjmp	.-668    	; 0x25b0 <__stack+0x3b1>
    284c:	80 91 a3 09 	lds	r24, 0x09A3
    2850:	88 23       	and	r24, r24
    2852:	09 f4       	brne	.+2      	; 0x2856 <__stack+0x657>
    2854:	23 ce       	rjmp	.-954    	; 0x249c <__stack+0x29d>
    2856:	e0 e0       	ldi	r30, 0x00	; 0
    2858:	20 e0       	ldi	r18, 0x00	; 0
    285a:	92 cc       	rjmp	.-1756   	; 0x2180 <handleRFCommands+0xc4>

0000285c <rfEnableDebugMode>:
	}

}

void rfEnableDebugMode() {
	rfDebugMode = 1;
    285c:	81 e0       	ldi	r24, 0x01	; 1
    285e:	80 93 29 03 	sts	0x0329, r24
	rfDebugCounter = 3;
    2862:	83 e0       	ldi	r24, 0x03	; 3
    2864:	80 93 2a 03 	sts	0x032A, r24
}
    2868:	08 95       	ret

0000286a <rfDisableDebugMode>:

void rfDisableDebugMode() {
	rfDebugMode = 0;
    286a:	10 92 29 03 	sts	0x0329, r1
}
    286e:	08 95       	ret

00002870 <rfDebugSendData>:

void rfDebugSendData() {
	ackPayload[0] = rfDebugCounter;
    2870:	80 91 2a 03 	lds	r24, 0x032A
    2874:	80 93 d6 08 	sts	0x08D6, r24
	while(rfData[0] != rfDebugCounter) {
    2878:	90 91 9e 09 	lds	r25, 0x099E
    287c:	89 17       	cp	r24, r25
    287e:	41 f0       	breq	.+16     	; 0x2890 <rfDebugSendData+0x20>
		handleRFCommands();
    2880:	0e 94 5e 10 	call	0x20bc	; 0x20bc <handleRFCommands>
	rfDebugMode = 0;
}

void rfDebugSendData() {
	ackPayload[0] = rfDebugCounter;
	while(rfData[0] != rfDebugCounter) {
    2884:	80 91 2a 03 	lds	r24, 0x032A
    2888:	90 91 9e 09 	lds	r25, 0x099E
    288c:	98 17       	cp	r25, r24
    288e:	c1 f7       	brne	.-16     	; 0x2880 <rfDebugSendData+0x10>
		handleRFCommands();
	}
	ackPayload[0] = 0x00;
    2890:	10 92 d6 08 	sts	0x08D6, r1
	if(rfDebugCounter < 255) {
    2894:	8f 3f       	cpi	r24, 0xFF	; 255
    2896:	21 f0       	breq	.+8      	; 0x28a0 <rfDebugSendData+0x30>
		rfDebugCounter++;
    2898:	8f 5f       	subi	r24, 0xFF	; 255
    289a:	80 93 2a 03 	sts	0x032A, r24
    289e:	08 95       	ret
	} else {
		rfDebugCounter = 3;
    28a0:	83 e0       	ldi	r24, 0x03	; 3
    28a2:	80 93 2a 03 	sts	0x032A, r24
    28a6:	08 95       	ret

000028a8 <rfDebugNextPacket>:
	}
}

void rfDebugNextPacket() {
	rfDebugCounter = 3;
    28a8:	83 e0       	ldi	r24, 0x03	; 3
    28aa:	80 93 2a 03 	sts	0x032A, r24
}
    28ae:	08 95       	ret

000028b0 <init_ir_remote_control>:
static unsigned char check_temp = 0;
unsigned char address = 0;
unsigned char data_ir = 0;
unsigned char check = 2;

void init_ir_remote_control(void) { 	
    28b0:	cf 93       	push	r28
    28b2:	df 93       	push	r29

	PCICR = 0;
    28b4:	c8 e6       	ldi	r28, 0x68	; 104
    28b6:	d0 e0       	ldi	r29, 0x00	; 0
    28b8:	18 82       	st	Y, r1
	PCMSK1 = 0;
    28ba:	ac e6       	ldi	r26, 0x6C	; 108
    28bc:	b0 e0       	ldi	r27, 0x00	; 0
    28be:	1c 92       	st	X, r1
	TCCR2A = 0;
    28c0:	e0 eb       	ldi	r30, 0xB0	; 176
    28c2:	f0 e0       	ldi	r31, 0x00	; 0
    28c4:	10 82       	st	Z, r1
	TCCR2B = 0;
    28c6:	10 92 b1 00 	sts	0x00B1, r1
	TIMSK2 = 0;
    28ca:	10 92 70 00 	sts	0x0070, r1

	PCICR |= (1 << PCIE1);			// enable interrupt on change of PCINT15:8 pins
    28ce:	88 81       	ld	r24, Y
    28d0:	82 60       	ori	r24, 0x02	; 2
    28d2:	88 83       	st	Y, r24
	PCMSK1 |= (1 << PCINT15);		// enable PCINT15
    28d4:	8c 91       	ld	r24, X
    28d6:	80 68       	ori	r24, 0x80	; 128
    28d8:	8c 93       	st	X, r24
	TCCR2A |= (1 << WGM21); 		// mode 2 => CTC mode
    28da:	80 81       	ld	r24, Z
    28dc:	82 60       	ori	r24, 0x02	; 2
    28de:	80 83       	st	Z, r24

}
    28e0:	df 91       	pop	r29
    28e2:	cf 91       	pop	r28
    28e4:	08 95       	ret

000028e6 <__vector_10>:

// external interrupt service routine
ISR(PCINT1_vect) {
    28e6:	1f 92       	push	r1
    28e8:	0f 92       	push	r0
    28ea:	0f b6       	in	r0, 0x3f	; 63
    28ec:	0f 92       	push	r0
    28ee:	11 24       	eor	r1, r1
    28f0:	8f 93       	push	r24

	if(irEnabled) {						// if the robot is configured to accept TV remote commands
    28f2:	80 91 12 02 	lds	r24, 0x0212
    28f6:	88 23       	and	r24, r24
    28f8:	21 f1       	breq	.+72     	; 0x2942 <__vector_10+0x5c>

		if(bit_is_clear(PINJ, 6)) {		// the interrupt is generated at every pin state change; we only look
    28fa:	80 91 03 01 	lds	r24, 0x0103
    28fe:	86 fd       	sbrc	r24, 6
    2900:	20 c0       	rjmp	.+64     	; 0x2942 <__vector_10+0x5c>
										// for the falling edge
			PCICR &= ~(1 << PCIE1);		// disable external interrupt
    2902:	80 91 68 00 	lds	r24, 0x0068
    2906:	8d 7f       	andi	r24, 0xFD	; 253
    2908:	80 93 68 00 	sts	0x0068, r24
			PCMSK1 &= ~(1 << PCINT15);
    290c:	80 91 6c 00 	lds	r24, 0x006C
    2910:	8f 77       	andi	r24, 0x7F	; 127
    2912:	80 93 6c 00 	sts	0x006C, r24
		
			// check the pin change isn't due to a glitch; to check this verify that
			// the pin remain low for at least 400 us (the giltches last about 200 us)
			// 0.4 / 0.032 = 13 => 0.416 us
			checkGlitch = 1;							// we're checking if this is a glitch
    2916:	81 e0       	ldi	r24, 0x01	; 1
    2918:	80 93 13 02 	sts	0x0213, r24
			OCR2A = 13;									// output compare register
    291c:	8d e0       	ldi	r24, 0x0D	; 13
    291e:	80 93 b3 00 	sts	0x00B3, r24
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    2922:	80 91 b1 00 	lds	r24, 0x00B1
    2926:	86 60       	ori	r24, 0x06	; 6
    2928:	80 93 b1 00 	sts	0x00B1, r24
			TIMSK2 |= (1 << OCIE2A);					// enable output compare interrupt
    292c:	80 91 70 00 	lds	r24, 0x0070
    2930:	82 60       	ori	r24, 0x02	; 2
    2932:	80 93 70 00 	sts	0x0070, r24

			check_temp = address_temp = data_temp = 0;
    2936:	10 92 30 02 	sts	0x0230, r1
    293a:	10 92 31 02 	sts	0x0231, r1
    293e:	10 92 32 02 	sts	0x0232, r1

		}

	}
	
}
    2942:	8f 91       	pop	r24
    2944:	0f 90       	pop	r0
    2946:	0f be       	out	0x3f, r0	; 63
    2948:	0f 90       	pop	r0
    294a:	1f 90       	pop	r1
    294c:	18 95       	reti

0000294e <__vector_13>:

ISR(TIMER2_COMPA_vect) {
    294e:	1f 92       	push	r1
    2950:	0f 92       	push	r0
    2952:	0f b6       	in	r0, 0x3f	; 63
    2954:	0f 92       	push	r0
    2956:	11 24       	eor	r1, r1
    2958:	2f 93       	push	r18
    295a:	3f 93       	push	r19
    295c:	4f 93       	push	r20
    295e:	5f 93       	push	r21
    2960:	8f 93       	push	r24
    2962:	9f 93       	push	r25

	static int i = -1;

	//PORTB ^= (1 << 5);	// toggle red led

	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);		// stop timer2
    2964:	80 91 b1 00 	lds	r24, 0x00B1
    2968:	88 7f       	andi	r24, 0xF8	; 248
    296a:	80 93 b1 00 	sts	0x00B1, r24
	
		if(checkGlitch) {					// if checking this is a glitch
    296e:	80 91 13 02 	lds	r24, 0x0213
    2972:	88 23       	and	r24, r24
    2974:	a9 f0       	breq	.+42     	; 0x29a0 <__vector_13+0x52>

			if(REMOTE) {					// if high it is a glitch
    2976:	80 91 03 01 	lds	r24, 0x0103
    297a:	86 ff       	sbrs	r24, 6
    297c:	65 c0       	rjmp	.+202    	; 0x2a48 <__vector_13+0xfa>

				PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    297e:	80 91 68 00 	lds	r24, 0x0068
    2982:	82 60       	ori	r24, 0x02	; 2
    2984:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    2988:	80 91 6c 00 	lds	r24, 0x006C
    298c:	80 68       	ori	r24, 0x80	; 128
    298e:	80 93 6c 00 	sts	0x006C, r24
				i = -1;			
    2992:	8f ef       	ldi	r24, 0xFF	; 255
    2994:	9f ef       	ldi	r25, 0xFF	; 255
    2996:	90 93 02 02 	sts	0x0202, r25
    299a:	80 93 01 02 	sts	0x0201, r24
    299e:	49 c0       	rjmp	.+146    	; 0x2a32 <__vector_13+0xe4>
			}

		} else {


			if (i == -1) { 						// start bit confirmed
    29a0:	80 91 01 02 	lds	r24, 0x0201
    29a4:	90 91 02 02 	lds	r25, 0x0202
    29a8:	2f ef       	ldi	r18, 0xFF	; 255
    29aa:	8f 3f       	cpi	r24, 0xFF	; 255
    29ac:	92 07       	cpc	r25, r18
    29ae:	09 f4       	brne	.+2      	; 0x29b2 <__vector_13+0x64>
    29b0:	63 c0       	rjmp	.+198    	; 0x2a78 <__vector_13+0x12a>
					check_temp = address_temp = data_temp = 0;
					i=0;

				}

			} else if (i == 1)	{ 						// check bit read and change timer period
    29b2:	81 30       	cpi	r24, 0x01	; 1
    29b4:	91 05       	cpc	r25, r1
    29b6:	09 f4       	brne	.+2      	; 0x29ba <__vector_13+0x6c>
    29b8:	98 c0       	rjmp	.+304    	; 0x2aea <__vector_13+0x19c>
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
    29ba:	9c 01       	movw	r18, r24
    29bc:	22 50       	subi	r18, 0x02	; 2
    29be:	30 40       	sbci	r19, 0x00	; 0
    29c0:	25 30       	cpi	r18, 0x05	; 5
    29c2:	31 05       	cpc	r19, r1
    29c4:	08 f4       	brcc	.+2      	; 0x29c8 <__vector_13+0x7a>
    29c6:	67 c0       	rjmp	.+206    	; 0x2a96 <__vector_13+0x148>

				unsigned char temp = REMOTE;
				temp <<= 6-i;
				address_temp += temp;

			} else if ((i > 6) && (i < 13 )) { 			// we read data
    29c8:	9c 01       	movw	r18, r24
    29ca:	27 50       	subi	r18, 0x07	; 7
    29cc:	30 40       	sbci	r19, 0x00	; 0
    29ce:	26 30       	cpi	r18, 0x06	; 6
    29d0:	31 05       	cpc	r19, r1
    29d2:	08 f0       	brcs	.+2      	; 0x29d6 <__vector_13+0x88>
    29d4:	bd c0       	rjmp	.+378    	; 0x2b50 <__vector_13+0x202>

				OCR2A = 54;
    29d6:	26 e3       	ldi	r18, 0x36	; 54
    29d8:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    29dc:	20 91 b1 00 	lds	r18, 0x00B1
    29e0:	26 60       	ori	r18, 0x06	; 6
    29e2:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    29e6:	20 91 70 00 	lds	r18, 0x0070
    29ea:	22 60       	ori	r18, 0x02	; 2
    29ec:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    29f0:	20 91 03 01 	lds	r18, 0x0103
    29f4:	30 e0       	ldi	r19, 0x00	; 0
    29f6:	20 74       	andi	r18, 0x40	; 64
    29f8:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6+6-i;
    29fa:	00 24       	eor	r0, r0
    29fc:	22 0f       	add	r18, r18
    29fe:	33 1f       	adc	r19, r19
    2a00:	00 1c       	adc	r0, r0
    2a02:	22 0f       	add	r18, r18
    2a04:	33 1f       	adc	r19, r19
    2a06:	00 1c       	adc	r0, r0
    2a08:	23 2f       	mov	r18, r19
    2a0a:	30 2d       	mov	r19, r0
    2a0c:	4c e0       	ldi	r20, 0x0C	; 12
    2a0e:	50 e0       	ldi	r21, 0x00	; 0
    2a10:	48 1b       	sub	r20, r24
    2a12:	59 0b       	sbc	r21, r25
    2a14:	02 c0       	rjmp	.+4      	; 0x2a1a <__vector_13+0xcc>
    2a16:	22 0f       	add	r18, r18
    2a18:	33 1f       	adc	r19, r19
    2a1a:	4a 95       	dec	r20
    2a1c:	e2 f7       	brpl	.-8      	; 0x2a16 <__vector_13+0xc8>
				data_temp += temp;
    2a1e:	40 91 30 02 	lds	r20, 0x0230
    2a22:	42 0f       	add	r20, r18
    2a24:	40 93 30 02 	sts	0x0230, r20

				i = -1;
				check = check_temp;
				address = address_temp;
				data_ir = data_temp;
				command_received=1;
    2a28:	01 96       	adiw	r24, 0x01	; 1

		}
	
		if(i!=-1) {

			i++;
    2a2a:	90 93 02 02 	sts	0x0202, r25
    2a2e:	80 93 01 02 	sts	0x0201, r24

		}

}
    2a32:	9f 91       	pop	r25
    2a34:	8f 91       	pop	r24
    2a36:	5f 91       	pop	r21
    2a38:	4f 91       	pop	r20
    2a3a:	3f 91       	pop	r19
    2a3c:	2f 91       	pop	r18
    2a3e:	0f 90       	pop	r0
    2a40:	0f be       	out	0x3f, r0	; 63
    2a42:	0f 90       	pop	r0
    2a44:	1f 90       	pop	r1
    2a46:	18 95       	reti
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
				i = -1;			

			} else {						// not a glitch => real command received

				checkGlitch = 0;
    2a48:	10 92 13 02 	sts	0x0213, r1

				// activate the IR Receiver with a 2.1 ms cycle value
				// we set the resolution of the timer to be 0.032 ms (prescaler 1/256) so:
				// 2.1 / 0.032 = 64 to be set in the output compare register (=> 2.048 ms)
				// but we already wait 0.416 us => 13, so 64-13=51
				OCR2A = 51;								// output compare register
    2a4c:	83 e3       	ldi	r24, 0x33	; 51
    2a4e:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    2a52:	80 91 b1 00 	lds	r24, 0x00B1
    2a56:	86 60       	ori	r24, 0x06	; 6
    2a58:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    2a5c:	80 91 70 00 	lds	r24, 0x0070
    2a60:	82 60       	ori	r24, 0x02	; 2
    2a62:	80 93 70 00 	sts	0x0070, r24
    2a66:	80 91 01 02 	lds	r24, 0x0201
    2a6a:	90 91 02 02 	lds	r25, 0x0202

			} 

		}
	
		if(i!=-1) {
    2a6e:	2f ef       	ldi	r18, 0xFF	; 255
    2a70:	8f 3f       	cpi	r24, 0xFF	; 255
    2a72:	92 07       	cpc	r25, r18
    2a74:	c9 f6       	brne	.-78     	; 0x2a28 <__vector_13+0xda>
    2a76:	dd cf       	rjmp	.-70     	; 0x2a32 <__vector_13+0xe4>
		} else {


			if (i == -1) { 						// start bit confirmed

				if(REMOTE) {					// double check => if high it is only a noise
    2a78:	20 91 03 01 	lds	r18, 0x0103
    2a7c:	26 ff       	sbrs	r18, 6
    2a7e:	52 c0       	rjmp	.+164    	; 0x2b24 <__vector_13+0x1d6>

					PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    2a80:	20 91 68 00 	lds	r18, 0x0068
    2a84:	22 60       	ori	r18, 0x02	; 2
    2a86:	20 93 68 00 	sts	0x0068, r18
					PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    2a8a:	20 91 6c 00 	lds	r18, 0x006C
    2a8e:	20 68       	ori	r18, 0x80	; 128
    2a90:	20 93 6c 00 	sts	0x006C, r18
    2a94:	ce cf       	rjmp	.-100    	; 0x2a32 <__vector_13+0xe4>
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
		
				OCR2A = 54;
    2a96:	26 e3       	ldi	r18, 0x36	; 54
    2a98:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    2a9c:	20 91 b1 00 	lds	r18, 0x00B1
    2aa0:	26 60       	ori	r18, 0x06	; 6
    2aa2:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    2aa6:	20 91 70 00 	lds	r18, 0x0070
    2aaa:	22 60       	ori	r18, 0x02	; 2
    2aac:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    2ab0:	20 91 03 01 	lds	r18, 0x0103
    2ab4:	30 e0       	ldi	r19, 0x00	; 0
    2ab6:	20 74       	andi	r18, 0x40	; 64
    2ab8:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6-i;
    2aba:	00 24       	eor	r0, r0
    2abc:	22 0f       	add	r18, r18
    2abe:	33 1f       	adc	r19, r19
    2ac0:	00 1c       	adc	r0, r0
    2ac2:	22 0f       	add	r18, r18
    2ac4:	33 1f       	adc	r19, r19
    2ac6:	00 1c       	adc	r0, r0
    2ac8:	23 2f       	mov	r18, r19
    2aca:	30 2d       	mov	r19, r0
    2acc:	46 e0       	ldi	r20, 0x06	; 6
    2ace:	50 e0       	ldi	r21, 0x00	; 0
    2ad0:	48 1b       	sub	r20, r24
    2ad2:	59 0b       	sbc	r21, r25
    2ad4:	02 c0       	rjmp	.+4      	; 0x2ada <__vector_13+0x18c>
    2ad6:	22 0f       	add	r18, r18
    2ad8:	33 1f       	adc	r19, r19
    2ada:	4a 95       	dec	r20
    2adc:	e2 f7       	brpl	.-8      	; 0x2ad6 <__vector_13+0x188>
				address_temp += temp;
    2ade:	40 91 31 02 	lds	r20, 0x0231
    2ae2:	42 0f       	add	r20, r18
    2ae4:	40 93 31 02 	sts	0x0231, r20
    2ae8:	9f cf       	rjmp	.-194    	; 0x2a28 <__vector_13+0xda>

				}

			} else if (i == 1)	{ 						// check bit read and change timer period

				check_temp = REMOTE;	   				// read the check bit
    2aea:	20 91 03 01 	lds	r18, 0x0103
    2aee:	30 e0       	ldi	r19, 0x00	; 0
    2af0:	20 74       	andi	r18, 0x40	; 64
    2af2:	30 70       	andi	r19, 0x00	; 0
    2af4:	02 2e       	mov	r0, r18
    2af6:	23 2f       	mov	r18, r19
    2af8:	00 0c       	add	r0, r0
    2afa:	22 1f       	adc	r18, r18
    2afc:	33 0b       	sbc	r19, r19
    2afe:	00 0c       	add	r0, r0
    2b00:	22 1f       	adc	r18, r18
    2b02:	33 1f       	adc	r19, r19
    2b04:	20 93 32 02 	sts	0x0232, r18
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
    2b08:	26 e3       	ldi	r18, 0x36	; 54
    2b0a:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    2b0e:	20 91 b1 00 	lds	r18, 0x00B1
    2b12:	26 60       	ori	r18, 0x06	; 6
    2b14:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    2b18:	20 91 70 00 	lds	r18, 0x0070
    2b1c:	22 60       	ori	r18, 0x02	; 2
    2b1e:	20 93 70 00 	sts	0x0070, r18
    2b22:	82 cf       	rjmp	.-252    	; 0x2a28 <__vector_13+0xda>

				} else {	// read the check bit
			
					//cycle value is 0.9 ms to go to check bit so:
					// 0.9 / 0.032 = 28 => 0.896
					OCR2A = 28;								// output compare register
    2b24:	8c e1       	ldi	r24, 0x1C	; 28
    2b26:	80 93 b3 00 	sts	0x00B3, r24
					TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    2b2a:	80 91 b1 00 	lds	r24, 0x00B1
    2b2e:	86 60       	ori	r24, 0x06	; 6
    2b30:	80 93 b1 00 	sts	0x00B1, r24
					TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt					
    2b34:	80 91 70 00 	lds	r24, 0x0070
    2b38:	82 60       	ori	r24, 0x02	; 2
    2b3a:	80 93 70 00 	sts	0x0070, r24

					check_temp = address_temp = data_temp = 0;
    2b3e:	10 92 30 02 	sts	0x0230, r1
    2b42:	10 92 31 02 	sts	0x0231, r1
    2b46:	10 92 32 02 	sts	0x0232, r1
    2b4a:	81 e0       	ldi	r24, 0x01	; 1
    2b4c:	90 e0       	ldi	r25, 0x00	; 0
    2b4e:	6d cf       	rjmp	.-294    	; 0x2a2a <__vector_13+0xdc>

				unsigned char temp = REMOTE;
				temp <<= 6+6-i;
				data_temp += temp;

			} else if (i == 13) { 						// last bit read
    2b50:	8d 30       	cpi	r24, 0x0D	; 13
    2b52:	91 05       	cpc	r25, r1
    2b54:	09 f0       	breq	.+2      	; 0x2b58 <__vector_13+0x20a>
    2b56:	68 cf       	rjmp	.-304    	; 0x2a28 <__vector_13+0xda>
				
				TIMSK2 = 0;								// disable all interrupt for timer2
    2b58:	10 92 70 00 	sts	0x0070, r1
				PCICR |= (1 << PCIE1);					// enable external interrupt to receive next command
    2b5c:	80 91 68 00 	lds	r24, 0x0068
    2b60:	82 60       	ori	r24, 0x02	; 2
    2b62:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);				// clear interrupt flag
    2b66:	80 91 6c 00 	lds	r24, 0x006C
    2b6a:	80 68       	ori	r24, 0x80	; 128
    2b6c:	80 93 6c 00 	sts	0x006C, r24

				i = -1;
    2b70:	8f ef       	ldi	r24, 0xFF	; 255
    2b72:	9f ef       	ldi	r25, 0xFF	; 255
    2b74:	90 93 02 02 	sts	0x0202, r25
    2b78:	80 93 01 02 	sts	0x0201, r24
				check = check_temp;
    2b7c:	80 91 32 02 	lds	r24, 0x0232
    2b80:	80 93 00 02 	sts	0x0200, r24
				address = address_temp;
    2b84:	80 91 31 02 	lds	r24, 0x0231
    2b88:	80 93 2e 02 	sts	0x022E, r24
				data_ir = data_temp;
    2b8c:	80 91 30 02 	lds	r24, 0x0230
    2b90:	80 93 2f 02 	sts	0x022F, r24
				command_received=1;
    2b94:	81 e0       	ldi	r24, 0x01	; 1
    2b96:	80 93 38 04 	sts	0x0438, r24
    2b9a:	4b cf       	rjmp	.-362    	; 0x2a32 <__vector_13+0xe4>

00002b9c <ir_remote_get_check>:

}

unsigned char ir_remote_get_check(void) {
	return check;
}
    2b9c:	80 91 00 02 	lds	r24, 0x0200
    2ba0:	08 95       	ret

00002ba2 <ir_remote_get_address>:

unsigned char ir_remote_get_address(void) {
	return address;
}
    2ba2:	80 91 2e 02 	lds	r24, 0x022E
    2ba6:	08 95       	ret

00002ba8 <ir_remote_get_data>:

unsigned char ir_remote_get_data(void) {
	return data_ir;
}
    2ba8:	80 91 2f 02 	lds	r24, 0x022F
    2bac:	08 95       	ret

00002bae <handleIRRemoteCommands>:

void handleIRRemoteCommands() {

	if(irEnabled) {
    2bae:	80 91 12 02 	lds	r24, 0x0212
    2bb2:	88 23       	and	r24, r24
    2bb4:	21 f0       	breq	.+8      	; 0x2bbe <handleIRRemoteCommands+0x10>

		if(command_received) {
    2bb6:	80 91 38 04 	lds	r24, 0x0438
    2bba:	88 23       	and	r24, r24
    2bbc:	09 f4       	brne	.+2      	; 0x2bc0 <handleIRRemoteCommands+0x12>
    2bbe:	08 95       	ret

			command_received = 0;
    2bc0:	10 92 38 04 	sts	0x0438, r1
			
			if((getTime100MicroSec() - lastCmdTime) < PAUSE_200_MSEC) {
    2bc4:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
    2bc8:	20 91 3b 04 	lds	r18, 0x043B
    2bcc:	30 91 3c 04 	lds	r19, 0x043C
    2bd0:	40 91 3d 04 	lds	r20, 0x043D
    2bd4:	50 91 3e 04 	lds	r21, 0x043E
    2bd8:	62 1b       	sub	r22, r18
    2bda:	73 0b       	sbc	r23, r19
    2bdc:	84 0b       	sbc	r24, r20
    2bde:	95 0b       	sbc	r25, r21
    2be0:	63 38       	cpi	r22, 0x83	; 131
    2be2:	27 e0       	ldi	r18, 0x07	; 7
    2be4:	72 07       	cpc	r23, r18
    2be6:	20 e0       	ldi	r18, 0x00	; 0
    2be8:	82 07       	cpc	r24, r18
    2bea:	20 e0       	ldi	r18, 0x00	; 0
    2bec:	92 07       	cpc	r25, r18
    2bee:	38 f3       	brcs	.-50     	; 0x2bbe <handleIRRemoteCommands+0x10>
				return;
			}

			lastCmdTime = getTime100MicroSec();
    2bf0:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
    2bf4:	60 93 3b 04 	sts	0x043B, r22
    2bf8:	70 93 3c 04 	sts	0x043C, r23
    2bfc:	80 93 3d 04 	sts	0x043D, r24
    2c00:	90 93 3e 04 	sts	0x043E, r25
unsigned char ir_remote_get_address(void) {
	return address;
}

unsigned char ir_remote_get_data(void) {
	return data_ir;
    2c04:	e0 91 2f 02 	lds	r30, 0x022F
				return;
			}

			lastCmdTime = getTime100MicroSec();

            irCommand = ir_remote_get_data();
    2c08:	e0 93 37 04 	sts	0x0437, r30

		    //usartTransmit(irCommand);			
			
			switch(irCommand) {
    2c0c:	f0 e0       	ldi	r31, 0x00	; 0
    2c0e:	e5 33       	cpi	r30, 0x35	; 53
    2c10:	f1 05       	cpc	r31, r1
    2c12:	a8 f0       	brcs	.+42     	; 0x2c3e <handleIRRemoteCommands+0x90>
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 1;
							break;
						case 3:
							obstacleAvoidanceEnabled = 1;
							cliffAvoidanceEnabled = 1;
    2c14:	20 91 09 03 	lds	r18, 0x0309
    2c18:	30 91 0a 03 	lds	r19, 0x030A
    2c1c:	80 91 0b 03 	lds	r24, 0x030B
    2c20:	90 91 0c 03 	lds	r25, 0x030C
	               	break;

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
    2c24:	37 fd       	sbrc	r19, 7
    2c26:	b3 c1       	rjmp	.+870    	; 0x2f8e <handleIRRemoteCommands+0x3e0>
				speedr = pwm_right_desired;
			} else {
				speedr = (-pwm_right_desired);
    2c28:	30 93 24 03 	sts	0x0324, r19
    2c2c:	20 93 23 03 	sts	0x0323, r18
			}
			if(pwm_left_desired >= 0) {
    2c30:	97 fd       	sbrc	r25, 7
    2c32:	a5 c1       	rjmp	.+842    	; 0x2f7e <handleIRRemoteCommands+0x3d0>
				speedl = pwm_left_desired;
    2c34:	90 93 22 03 	sts	0x0322, r25
    2c38:	80 93 21 03 	sts	0x0321, r24
    2c3c:	08 95       	ret

            irCommand = ir_remote_get_data();

		    //usartTransmit(irCommand);			
			
			switch(irCommand) {
    2c3e:	ee 58       	subi	r30, 0x8E	; 142
    2c40:	ff 4f       	sbci	r31, 0xFF	; 255
    2c42:	ee 0f       	add	r30, r30
    2c44:	ff 1f       	adc	r31, r31
    2c46:	05 90       	lpm	r0, Z+
    2c48:	f4 91       	lpm	r31, Z+
    2c4a:	e0 2d       	mov	r30, r0
    2c4c:	19 94       	eijmp
						case 0:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 0;
							break;
						case 1:
							obstacleAvoidanceEnabled = 1;
    2c4e:	80 93 88 04 	sts	0x0488, r24
							cliffAvoidanceEnabled = 0;
    2c52:	10 92 89 04 	sts	0x0489, r1
    2c56:	20 91 09 03 	lds	r18, 0x0309
    2c5a:	30 91 0a 03 	lds	r19, 0x030A
    2c5e:	80 91 0b 03 	lds	r24, 0x030B
    2c62:	90 91 0c 03 	lds	r25, 0x030C
							break;
    2c66:	de cf       	rjmp	.-68     	; 0x2c24 <handleIRRemoteCommands+0x76>
						case 2:
							obstacleAvoidanceEnabled = 0;
    2c68:	10 92 88 04 	sts	0x0488, r1
							cliffAvoidanceEnabled = 1;
    2c6c:	81 e0       	ldi	r24, 0x01	; 1
    2c6e:	80 93 89 04 	sts	0x0489, r24
    2c72:	20 91 09 03 	lds	r18, 0x0309
    2c76:	30 91 0a 03 	lds	r19, 0x030A
    2c7a:	80 91 0b 03 	lds	r24, 0x030B
    2c7e:	90 91 0c 03 	lds	r25, 0x030C
							break;
    2c82:	d0 cf       	rjmp	.-96     	; 0x2c24 <handleIRRemoteCommands+0x76>
				case 33:	// program -
					cliffAvoidanceEnabled = 0;
					break;

				case 52:	// av/tv button
					behaviorState = (behaviorState+1)%4;
    2c84:	80 91 3a 04 	lds	r24, 0x043A
    2c88:	90 e0       	ldi	r25, 0x00	; 0
    2c8a:	01 96       	adiw	r24, 0x01	; 1
    2c8c:	83 70       	andi	r24, 0x03	; 3
    2c8e:	90 70       	andi	r25, 0x00	; 0
    2c90:	80 93 3a 04 	sts	0x043A, r24
					switch(behaviorState) {
    2c94:	82 30       	cpi	r24, 0x02	; 2
    2c96:	41 f3       	breq	.-48     	; 0x2c68 <handleIRRemoteCommands+0xba>
    2c98:	83 30       	cpi	r24, 0x03	; 3
    2c9a:	09 f4       	brne	.+2      	; 0x2c9e <handleIRRemoteCommands+0xf0>
    2c9c:	8c c1       	rjmp	.+792    	; 0x2fb6 <handleIRRemoteCommands+0x408>
    2c9e:	81 30       	cpi	r24, 0x01	; 1
    2ca0:	b1 f2       	breq	.-84     	; 0x2c4e <handleIRRemoteCommands+0xa0>
						case 0:
							obstacleAvoidanceEnabled = 0;
    2ca2:	10 92 88 04 	sts	0x0488, r1
							cliffAvoidanceEnabled = 0;
    2ca6:	10 92 89 04 	sts	0x0489, r1
    2caa:	20 91 09 03 	lds	r18, 0x0309
    2cae:	30 91 0a 03 	lds	r19, 0x030A
    2cb2:	80 91 0b 03 	lds	r24, 0x030B
    2cb6:	90 91 0c 03 	lds	r25, 0x030C
							break;
    2cba:	b4 cf       	rjmp	.-152    	; 0x2c24 <handleIRRemoteCommands+0x76>
				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
					break;

				case 17:	// volume -
					obstacleAvoidanceEnabled = 0;
    2cbc:	10 92 88 04 	sts	0x0488, r1
    2cc0:	20 91 09 03 	lds	r18, 0x0309
    2cc4:	30 91 0a 03 	lds	r19, 0x030A
    2cc8:	80 91 0b 03 	lds	r24, 0x030B
    2ccc:	90 91 0c 03 	lds	r25, 0x030C
					break;
    2cd0:	a9 cf       	rjmp	.-174    	; 0x2c24 <handleIRRemoteCommands+0x76>
					pwm_right_desired += STEP_MOTORS;
	                if (pwm_right_desired>127) pwm_right_desired=127;
					break;

				case 9:	// left motor backward
					pwm_left_desired -= STEP_MOTORS;
    2cd2:	80 91 0b 03 	lds	r24, 0x030B
    2cd6:	90 91 0c 03 	lds	r25, 0x030C
    2cda:	02 97       	sbiw	r24, 0x02	; 2
    2cdc:	90 93 0c 03 	sts	0x030C, r25
    2ce0:	80 93 0b 03 	sts	0x030B, r24
	           	    if (pwm_left_desired<-127) pwm_left_desired=-127;
    2ce4:	2f ef       	ldi	r18, 0xFF	; 255
    2ce6:	81 38       	cpi	r24, 0x81	; 129
    2ce8:	92 07       	cpc	r25, r18
    2cea:	9c f5       	brge	.+102    	; 0x2d52 <handleIRRemoteCommands+0x1a4>
    2cec:	81 e8       	ldi	r24, 0x81	; 129
    2cee:	9f ef       	ldi	r25, 0xFF	; 255
    2cf0:	90 93 0c 03 	sts	0x030C, r25
    2cf4:	80 93 0b 03 	sts	0x030B, r24
    2cf8:	20 91 09 03 	lds	r18, 0x0309
    2cfc:	30 91 0a 03 	lds	r19, 0x030A
    2d00:	91 cf       	rjmp	.-222    	; 0x2c24 <handleIRRemoteCommands+0x76>
    	            if (pwm_left_desired > 127) pwm_left_desired = 127;
               		break;

				case 8:	// both motors backward
				case 30:
					if(pwm_right_desired < pwm_left) {
    2d02:	20 91 09 03 	lds	r18, 0x0309
    2d06:	30 91 0a 03 	lds	r19, 0x030A
    2d0a:	80 91 07 03 	lds	r24, 0x0307
    2d0e:	90 91 08 03 	lds	r25, 0x0308
    2d12:	28 17       	cp	r18, r24
    2d14:	39 07       	cpc	r19, r25
    2d16:	24 f0       	brlt	.+8      	; 0x2d20 <handleIRRemoteCommands+0x172>
						pwm_left_desired  = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
    2d18:	20 91 0b 03 	lds	r18, 0x030B
    2d1c:	30 91 0c 03 	lds	r19, 0x030C
					}
					pwm_right_desired -= STEP_MOTORS;
    2d20:	22 50       	subi	r18, 0x02	; 2
    2d22:	30 40       	sbci	r19, 0x00	; 0
    2d24:	30 93 0a 03 	sts	0x030A, r19
    2d28:	20 93 09 03 	sts	0x0309, r18
					pwm_left_desired -= STEP_MOTORS;
    2d2c:	c9 01       	movw	r24, r18
    2d2e:	30 93 0c 03 	sts	0x030C, r19
    2d32:	20 93 0b 03 	sts	0x030B, r18
	                if (pwm_right_desired < -127) pwm_right_desired = -127;
    2d36:	4f ef       	ldi	r20, 0xFF	; 255
    2d38:	21 38       	cpi	r18, 0x81	; 129
    2d3a:	34 07       	cpc	r19, r20
    2d3c:	34 f4       	brge	.+12     	; 0x2d4a <handleIRRemoteCommands+0x19c>
    2d3e:	41 e8       	ldi	r20, 0x81	; 129
    2d40:	5f ef       	ldi	r21, 0xFF	; 255
    2d42:	50 93 0a 03 	sts	0x030A, r21
    2d46:	40 93 09 03 	sts	0x0309, r20
    	            if (pwm_left_desired < -127) pwm_left_desired = -127;
    2d4a:	4f ef       	ldi	r20, 0xFF	; 255
    2d4c:	21 38       	cpi	r18, 0x81	; 129
    2d4e:	34 07       	cpc	r19, r20
    2d50:	6c f2       	brlt	.-102    	; 0x2cec <handleIRRemoteCommands+0x13e>
	   	            if (pwm_left_desired<-127) pwm_left_desired=-127;
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>127) pwm_left_desired=127;
    2d52:	20 91 09 03 	lds	r18, 0x0309
    2d56:	30 91 0a 03 	lds	r19, 0x030A
    2d5a:	64 cf       	rjmp	.-312    	; 0x2c24 <handleIRRemoteCommands+0x76>
					updateBlueLed(pwm_blue);

	               	break;

				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
    2d5c:	81 e0       	ldi	r24, 0x01	; 1
    2d5e:	80 93 88 04 	sts	0x0488, r24
    2d62:	20 91 09 03 	lds	r18, 0x0309
    2d66:	30 91 0a 03 	lds	r19, 0x030A
    2d6a:	80 91 0b 03 	lds	r24, 0x030B
    2d6e:	90 91 0c 03 	lds	r25, 0x030C
					break;
    2d72:	58 cf       	rjmp	.-336    	; 0x2c24 <handleIRRemoteCommands+0x76>
					pwm_left_desired -= STEP_MOTORS;
	           	    if (pwm_left_desired<-127) pwm_left_desired=-127;
					break;

				case 7:	// right motor backward
					pwm_right_desired -= STEP_MOTORS;
    2d74:	20 91 09 03 	lds	r18, 0x0309
    2d78:	30 91 0a 03 	lds	r19, 0x030A
    2d7c:	22 50       	subi	r18, 0x02	; 2
    2d7e:	30 40       	sbci	r19, 0x00	; 0
    2d80:	30 93 0a 03 	sts	0x030A, r19
    2d84:	20 93 09 03 	sts	0x0309, r18
	               	if (pwm_right_desired<-127) pwm_right_desired=-127;
    2d88:	4f ef       	ldi	r20, 0xFF	; 255
    2d8a:	21 38       	cpi	r18, 0x81	; 129
    2d8c:	34 07       	cpc	r19, r20
    2d8e:	0c f0       	brlt	.+2      	; 0x2d92 <handleIRRemoteCommands+0x1e4>
    2d90:	45 cf       	rjmp	.-374    	; 0x2c1c <handleIRRemoteCommands+0x6e>
    2d92:	81 e8       	ldi	r24, 0x81	; 129
    2d94:	9f ef       	ldi	r25, 0xFF	; 255
    2d96:	90 93 0a 03 	sts	0x030A, r25
    2d9a:	80 93 09 03 	sts	0x0309, r24
    2d9e:	80 91 0b 03 	lds	r24, 0x030B
    2da2:	90 91 0c 03 	lds	r25, 0x030C
    2da6:	2f e7       	ldi	r18, 0x7F	; 127
    2da8:	30 e0       	ldi	r19, 0x00	; 0
    2daa:	3e cf       	rjmp	.-388    	; 0x2c28 <handleIRRemoteCommands+0x7a>
    	            if (pwm_left_desired < -127) pwm_left_desired = -127;
                  	break;

				case 6:	// both motors right
				case 47:
					pwm_right_desired -= STEP_MOTORS;
    2dac:	20 91 09 03 	lds	r18, 0x0309
    2db0:	30 91 0a 03 	lds	r19, 0x030A
    2db4:	22 50       	subi	r18, 0x02	; 2
    2db6:	30 40       	sbci	r19, 0x00	; 0
    2db8:	30 93 0a 03 	sts	0x030A, r19
    2dbc:	20 93 09 03 	sts	0x0309, r18
					pwm_left_desired += STEP_MOTORS;
    2dc0:	80 91 0b 03 	lds	r24, 0x030B
    2dc4:	90 91 0c 03 	lds	r25, 0x030C
    2dc8:	02 96       	adiw	r24, 0x02	; 2
    2dca:	90 93 0c 03 	sts	0x030C, r25
    2dce:	80 93 0b 03 	sts	0x030B, r24
                	if (pwm_right_desired<-127) pwm_right_desired=-127;
    2dd2:	4f ef       	ldi	r20, 0xFF	; 255
    2dd4:	21 38       	cpi	r18, 0x81	; 129
    2dd6:	34 07       	cpc	r19, r20
    2dd8:	34 f4       	brge	.+12     	; 0x2de6 <handleIRRemoteCommands+0x238>
    2dda:	21 e8       	ldi	r18, 0x81	; 129
    2ddc:	3f ef       	ldi	r19, 0xFF	; 255
    2dde:	30 93 0a 03 	sts	0x030A, r19
    2de2:	20 93 09 03 	sts	0x0309, r18
                	if (pwm_left_desired>127) pwm_left_desired=127;
    2de6:	80 38       	cpi	r24, 0x80	; 128
    2de8:	91 05       	cpc	r25, r1
    2dea:	0c f4       	brge	.+2      	; 0x2dee <handleIRRemoteCommands+0x240>
    2dec:	1b cf       	rjmp	.-458    	; 0x2c24 <handleIRRemoteCommands+0x76>
    2dee:	8f e7       	ldi	r24, 0x7F	; 127
    2df0:	90 e0       	ldi	r25, 0x00	; 0
    2df2:	90 93 0c 03 	sts	0x030C, r25
    2df6:	80 93 0b 03 	sts	0x030B, r24
    2dfa:	14 cf       	rjmp	.-472    	; 0x2c24 <handleIRRemoteCommands+0x76>
			switch(irCommand) {
				// sometimes there are two cases for the same command because two different
				// remote controls are used; one of this do not contain "numbers"
				case 5:	// stop motors
				case 51:
					pwm_right_desired = 0;
    2dfc:	10 92 0a 03 	sts	0x030A, r1
    2e00:	10 92 09 03 	sts	0x0309, r1
					pwm_left_desired = 0;
    2e04:	10 92 0c 03 	sts	0x030C, r1
    2e08:	10 92 0b 03 	sts	0x030B, r1
					if(currentSelector == 8) {
    2e0c:	80 91 64 04 	lds	r24, 0x0464
    2e10:	88 30       	cpi	r24, 0x08	; 8
    2e12:	09 f4       	brne	.+2      	; 0x2e16 <handleIRRemoteCommands+0x268>
    2e14:	d6 c0       	rjmp	.+428    	; 0x2fc2 <handleIRRemoteCommands+0x414>
    2e16:	80 e0       	ldi	r24, 0x00	; 0
    2e18:	90 e0       	ldi	r25, 0x00	; 0
    2e1a:	20 e0       	ldi	r18, 0x00	; 0
    2e1c:	30 e0       	ldi	r19, 0x00	; 0
    2e1e:	04 cf       	rjmp	.-504    	; 0x2c28 <handleIRRemoteCommands+0x7a>
                	if (pwm_left_desired>127) pwm_left_desired=127;
					break;

				case 4:	// both motors left
				case 46:
					pwm_right_desired += STEP_MOTORS;
    2e20:	20 91 09 03 	lds	r18, 0x0309
    2e24:	30 91 0a 03 	lds	r19, 0x030A
    2e28:	2e 5f       	subi	r18, 0xFE	; 254
    2e2a:	3f 4f       	sbci	r19, 0xFF	; 255
    2e2c:	30 93 0a 03 	sts	0x030A, r19
    2e30:	20 93 09 03 	sts	0x0309, r18
					pwm_left_desired -= STEP_MOTORS;
    2e34:	80 91 0b 03 	lds	r24, 0x030B
    2e38:	90 91 0c 03 	lds	r25, 0x030C
    2e3c:	02 97       	sbiw	r24, 0x02	; 2
    2e3e:	90 93 0c 03 	sts	0x030C, r25
    2e42:	80 93 0b 03 	sts	0x030B, r24
	                if (pwm_right_desired>127) pwm_right_desired=127;
    2e46:	20 38       	cpi	r18, 0x80	; 128
    2e48:	31 05       	cpc	r19, r1
    2e4a:	34 f0       	brlt	.+12     	; 0x2e58 <handleIRRemoteCommands+0x2aa>
    2e4c:	2f e7       	ldi	r18, 0x7F	; 127
    2e4e:	30 e0       	ldi	r19, 0x00	; 0
    2e50:	30 93 0a 03 	sts	0x030A, r19
    2e54:	20 93 09 03 	sts	0x0309, r18
	   	            if (pwm_left_desired<-127) pwm_left_desired=-127;
    2e58:	4f ef       	ldi	r20, 0xFF	; 255
    2e5a:	81 38       	cpi	r24, 0x81	; 129
    2e5c:	94 07       	cpc	r25, r20
    2e5e:	0c f0       	brlt	.+2      	; 0x2e62 <handleIRRemoteCommands+0x2b4>
    2e60:	e1 ce       	rjmp	.-574    	; 0x2c24 <handleIRRemoteCommands+0x76>
    2e62:	81 e8       	ldi	r24, 0x81	; 129
    2e64:	9f ef       	ldi	r25, 0xFF	; 255
    2e66:	90 93 0c 03 	sts	0x030C, r25
    2e6a:	80 93 0b 03 	sts	0x030B, r24
    2e6e:	da ce       	rjmp	.-588    	; 0x2c24 <handleIRRemoteCommands+0x76>
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
    2e70:	80 91 0b 03 	lds	r24, 0x030B
    2e74:	90 91 0c 03 	lds	r25, 0x030C
    2e78:	02 96       	adiw	r24, 0x02	; 2
    2e7a:	90 93 0c 03 	sts	0x030C, r25
    2e7e:	80 93 0b 03 	sts	0x030B, r24
	               	if (pwm_left_desired>127) pwm_left_desired=127;
    2e82:	80 38       	cpi	r24, 0x80	; 128
    2e84:	91 05       	cpc	r25, r1
    2e86:	0c f4       	brge	.+2      	; 0x2e8a <handleIRRemoteCommands+0x2dc>
    2e88:	64 cf       	rjmp	.-312    	; 0x2d52 <handleIRRemoteCommands+0x1a4>
    2e8a:	8f e7       	ldi	r24, 0x7F	; 127
    2e8c:	90 e0       	ldi	r25, 0x00	; 0
    2e8e:	90 93 0c 03 	sts	0x030C, r25
    2e92:	80 93 0b 03 	sts	0x030B, r24
    2e96:	5d cf       	rjmp	.-326    	; 0x2d52 <handleIRRemoteCommands+0x1a4>
					}
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    2e98:	20 91 09 03 	lds	r18, 0x0309
    2e9c:	30 91 0a 03 	lds	r19, 0x030A
    2ea0:	80 91 0b 03 	lds	r24, 0x030B
    2ea4:	90 91 0c 03 	lds	r25, 0x030C
    2ea8:	82 17       	cp	r24, r18
    2eaa:	93 07       	cpc	r25, r19
    2eac:	0c f4       	brge	.+2      	; 0x2eb0 <handleIRRemoteCommands+0x302>
    2eae:	73 c0       	rjmp	.+230    	; 0x2f96 <handleIRRemoteCommands+0x3e8>
    2eb0:	9c 01       	movw	r18, r24
						pwm_left_desired = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
					}
					pwm_right_desired += STEP_MOTORS;
    2eb2:	2e 5f       	subi	r18, 0xFE	; 254
    2eb4:	3f 4f       	sbci	r19, 0xFF	; 255
    2eb6:	30 93 0a 03 	sts	0x030A, r19
    2eba:	20 93 09 03 	sts	0x0309, r18
					pwm_left_desired += STEP_MOTORS;
    2ebe:	02 96       	adiw	r24, 0x02	; 2
    2ec0:	90 93 0c 03 	sts	0x030C, r25
    2ec4:	80 93 0b 03 	sts	0x030B, r24
	                if (pwm_right_desired > 127) pwm_right_desired = 127;
    2ec8:	20 38       	cpi	r18, 0x80	; 128
    2eca:	31 05       	cpc	r19, r1
    2ecc:	34 f0       	brlt	.+12     	; 0x2eda <handleIRRemoteCommands+0x32c>
    2ece:	2f e7       	ldi	r18, 0x7F	; 127
    2ed0:	30 e0       	ldi	r19, 0x00	; 0
    2ed2:	30 93 0a 03 	sts	0x030A, r19
    2ed6:	20 93 09 03 	sts	0x0309, r18
    	            if (pwm_left_desired > 127) pwm_left_desired = 127;
    2eda:	80 38       	cpi	r24, 0x80	; 128
    2edc:	91 05       	cpc	r25, r1
    2ede:	0c f4       	brge	.+2      	; 0x2ee2 <handleIRRemoteCommands+0x334>
    2ee0:	38 cf       	rjmp	.-400    	; 0x2d52 <handleIRRemoteCommands+0x1a4>
    2ee2:	8f e7       	ldi	r24, 0x7F	; 127
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	90 93 0c 03 	sts	0x030C, r25
    2eea:	80 93 0b 03 	sts	0x030B, r24
    2eee:	20 91 09 03 	lds	r18, 0x0309
    2ef2:	30 91 0a 03 	lds	r19, 0x030A
    2ef6:	96 ce       	rjmp	.-724    	; 0x2c24 <handleIRRemoteCommands+0x76>
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>127) pwm_left_desired=127;
					break;

				case 1:	// right motor forward
					pwm_right_desired += STEP_MOTORS;
    2ef8:	20 91 09 03 	lds	r18, 0x0309
    2efc:	30 91 0a 03 	lds	r19, 0x030A
    2f00:	2e 5f       	subi	r18, 0xFE	; 254
    2f02:	3f 4f       	sbci	r19, 0xFF	; 255
    2f04:	30 93 0a 03 	sts	0x030A, r19
    2f08:	20 93 09 03 	sts	0x0309, r18
	                if (pwm_right_desired>127) pwm_right_desired=127;
    2f0c:	20 38       	cpi	r18, 0x80	; 128
    2f0e:	31 05       	cpc	r19, r1
    2f10:	0c f4       	brge	.+2      	; 0x2f14 <handleIRRemoteCommands+0x366>
    2f12:	84 ce       	rjmp	.-760    	; 0x2c1c <handleIRRemoteCommands+0x6e>
    2f14:	8f e7       	ldi	r24, 0x7F	; 127
    2f16:	90 e0       	ldi	r25, 0x00	; 0
    2f18:	90 93 0a 03 	sts	0x030A, r25
    2f1c:	80 93 09 03 	sts	0x0309, r24
    2f20:	80 91 0b 03 	lds	r24, 0x030B
    2f24:	90 91 0c 03 	lds	r25, 0x030C
	               	break;

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
    2f28:	2f e7       	ldi	r18, 0x7F	; 127
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
    2f2c:	7d ce       	rjmp	.-774    	; 0x2c28 <handleIRRemoteCommands+0x7a>
	               	if (pwm_right_desired<-127) pwm_right_desired=-127;
					break;

	           	case 0:	// colors
				case 50:
					colorState = (colorState+1)%5;
    2f2e:	80 91 39 04 	lds	r24, 0x0439
    2f32:	90 e0       	ldi	r25, 0x00	; 0
    2f34:	01 96       	adiw	r24, 0x01	; 1
    2f36:	65 e0       	ldi	r22, 0x05	; 5
    2f38:	70 e0       	ldi	r23, 0x00	; 0
    2f3a:	0e 94 a9 58 	call	0xb152	; 0xb152 <__divmodhi4>
    2f3e:	80 93 39 04 	sts	0x0439, r24

					if(colorState==0) {			// turn on blue and off all IRs
    2f42:	88 23       	and	r24, r24
    2f44:	51 f5       	brne	.+84     	; 0x2f9a <handleIRRemoteCommands+0x3ec>
						LED_IR1_HIGH;
    2f46:	44 9a       	sbi	0x08, 4	; 8
						LED_IR2_HIGH;
    2f48:	45 9a       	sbi	0x08, 5	; 8
						pwm_blue = 0;
    2f4a:	10 92 0e 02 	sts	0x020E, r1
						pwm_green = MAX_LEDS_PWM;
    2f4e:	8f ef       	ldi	r24, 0xFF	; 255
    2f50:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = MAX_LEDS_PWM;
    2f54:	80 93 0c 02 	sts	0x020C, r24
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					}

					updateRedLed(pwm_red);
    2f58:	0e 94 fb 3f 	call	0x7ff6	; 0x7ff6 <updateRedLed>
					updateGreenLed(pwm_green);
    2f5c:	80 91 0d 02 	lds	r24, 0x020D
    2f60:	0e 94 0f 40 	call	0x801e	; 0x801e <updateGreenLed>
					updateBlueLed(pwm_blue);
    2f64:	80 91 0e 02 	lds	r24, 0x020E
    2f68:	0e 94 23 40 	call	0x8046	; 0x8046 <updateBlueLed>
    2f6c:	20 91 09 03 	lds	r18, 0x0309
    2f70:	30 91 0a 03 	lds	r19, 0x030A
    2f74:	80 91 0b 03 	lds	r24, 0x030B
    2f78:	90 91 0c 03 	lds	r25, 0x030C

	               	break;
    2f7c:	53 ce       	rjmp	.-858    	; 0x2c24 <handleIRRemoteCommands+0x76>
				speedr = (-pwm_right_desired);
			}
			if(pwm_left_desired >= 0) {
				speedl = pwm_left_desired;
			} else {
				speedl = (-pwm_left_desired);
    2f7e:	90 95       	com	r25
    2f80:	81 95       	neg	r24
    2f82:	9f 4f       	sbci	r25, 0xFF	; 255
    2f84:	90 93 22 03 	sts	0x0322, r25
    2f88:	80 93 21 03 	sts	0x0321, r24
    2f8c:	08 95       	ret

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
				speedr = pwm_right_desired;
    2f8e:	30 95       	com	r19
    2f90:	21 95       	neg	r18
    2f92:	3f 4f       	sbci	r19, 0xFF	; 255
    2f94:	49 ce       	rjmp	.-878    	; 0x2c28 <handleIRRemoteCommands+0x7a>
					}
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    2f96:	c9 01       	movw	r24, r18
    2f98:	8c cf       	rjmp	.-232    	; 0x2eb2 <handleIRRemoteCommands+0x304>
						LED_IR1_HIGH;
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
    2f9a:	81 30       	cpi	r24, 0x01	; 1
    2f9c:	79 f1       	breq	.+94     	; 0x2ffc <handleIRRemoteCommands+0x44e>
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = 0;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==2) {	// turn on red and on all IRs
    2f9e:	82 30       	cpi	r24, 0x02	; 2
    2fa0:	a9 f1       	breq	.+106    	; 0x300c <handleIRRemoteCommands+0x45e>
						LED_IR1_LOW;
						LED_IR2_LOW;
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = 0;
					} else if(colorState==3) {	// turn on white
    2fa2:	83 30       	cpi	r24, 0x03	; 3
    2fa4:	f1 f1       	breq	.+124    	; 0x3022 <handleIRRemoteCommands+0x474>
						pwm_blue = 0;
						pwm_green = 0;
						pwm_red = 0;
					} else if(colorState==4) {	// turn off all leds
						pwm_blue = MAX_LEDS_PWM;
    2fa6:	8f ef       	ldi	r24, 0xFF	; 255
    2fa8:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = MAX_LEDS_PWM;
    2fac:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = MAX_LEDS_PWM;
    2fb0:	80 93 0c 02 	sts	0x020C, r24
    2fb4:	d1 cf       	rjmp	.-94     	; 0x2f58 <handleIRRemoteCommands+0x3aa>
						case 2:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 1;
							break;
						case 3:
							obstacleAvoidanceEnabled = 1;
    2fb6:	81 e0       	ldi	r24, 0x01	; 1
    2fb8:	80 93 88 04 	sts	0x0488, r24
							cliffAvoidanceEnabled = 1;
    2fbc:	80 93 89 04 	sts	0x0489, r24
    2fc0:	29 ce       	rjmp	.-942    	; 0x2c14 <handleIRRemoteCommands+0x66>
				case 5:	// stop motors
				case 51:
					pwm_right_desired = 0;
					pwm_left_desired = 0;
					if(currentSelector == 8) {
						calibrateSensors();
    2fc2:	0e 94 d9 42 	call	0x85b2	; 0x85b2 <calibrateSensors>
						proximityResult[8] = 1023;	// because the first time this value could be low after calibration
    2fc6:	8f ef       	ldi	r24, 0xFF	; 255
    2fc8:	93 e0       	ldi	r25, 0x03	; 3
    2fca:	90 93 7a 02 	sts	0x027A, r25
    2fce:	80 93 79 02 	sts	0x0279, r24
						proximityResult[11] = 1023;	// and in that case a false black line will be detected
    2fd2:	90 93 80 02 	sts	0x0280, r25
    2fd6:	80 93 7f 02 	sts	0x027F, r24
						calibState = CALIBRATION_STATE_FIND_THRS_0;
    2fda:	86 e0       	ldi	r24, 0x06	; 6
    2fdc:	80 93 75 0b 	sts	0x0B75, r24
						calibVelIndex = 1;
    2fe0:	81 e0       	ldi	r24, 0x01	; 1
    2fe2:	80 93 cf 08 	sts	0x08CF, r24
						calibrateOdomFlag = 1;
    2fe6:	80 93 82 05 	sts	0x0582, r24
    2fea:	20 91 09 03 	lds	r18, 0x0309
    2fee:	30 91 0a 03 	lds	r19, 0x030A
    2ff2:	80 91 0b 03 	lds	r24, 0x030B
    2ff6:	90 91 0c 03 	lds	r25, 0x030C
    2ffa:	14 ce       	rjmp	.-984    	; 0x2c24 <handleIRRemoteCommands+0x76>
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
						pwm_blue = MAX_LEDS_PWM;
    2ffc:	8f ef       	ldi	r24, 0xFF	; 255
    2ffe:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = 0;
    3002:	10 92 0d 02 	sts	0x020D, r1
						pwm_red = MAX_LEDS_PWM;
    3006:	80 93 0c 02 	sts	0x020C, r24
    300a:	a6 cf       	rjmp	.-180    	; 0x2f58 <handleIRRemoteCommands+0x3aa>
					} else if(colorState==2) {	// turn on red and on all IRs
						LED_IR1_LOW;
    300c:	44 98       	cbi	0x08, 4	; 8
						LED_IR2_LOW;
    300e:	45 98       	cbi	0x08, 5	; 8
						pwm_blue = MAX_LEDS_PWM;
    3010:	8f ef       	ldi	r24, 0xFF	; 255
    3012:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = MAX_LEDS_PWM;
    3016:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = 0;
    301a:	10 92 0c 02 	sts	0x020C, r1
    301e:	80 e0       	ldi	r24, 0x00	; 0
    3020:	9b cf       	rjmp	.-202    	; 0x2f58 <handleIRRemoteCommands+0x3aa>
					} else if(colorState==3) {	// turn on white
						pwm_blue = 0;
    3022:	10 92 0e 02 	sts	0x020E, r1
						pwm_green = 0;
    3026:	10 92 0d 02 	sts	0x020D, r1
						pwm_red = 0;
    302a:	10 92 0c 02 	sts	0x020C, r1
    302e:	80 e0       	ldi	r24, 0x00	; 0
    3030:	93 cf       	rjmp	.-218    	; 0x2f58 <handleIRRemoteCommands+0x3aa>

00003032 <init_speed_control>:
	//d_speed_control = 5;
	//i_speed_control = 10;
	//i_limit_speed_control = 3200;
	//k_ff_speed_control_left = INIT_KFF;
	//k_ff_speed_control_right = INIT_KFF;
}
    3032:	08 95       	ret

00003034 <start_vertical_speed_control_left>:

void start_vertical_speed_control_left(signed int *pwm_left) {
    3034:	cf 92       	push	r12
    3036:	df 92       	push	r13
    3038:	ef 92       	push	r14
    303a:	ff 92       	push	r15
    303c:	0f 93       	push	r16
    303e:	1f 93       	push	r17
    3040:	cf 93       	push	r28
    3042:	df 93       	push	r29
    3044:	fc 01       	movw	r30, r24
	
	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).
	
	if(*pwm_left==0) {
    3046:	80 81       	ld	r24, Z
    3048:	91 81       	ldd	r25, Z+1	; 0x01
    304a:	00 97       	sbiw	r24, 0x00	; 0
    304c:	09 f4       	brne	.+2      	; 0x3050 <start_vertical_speed_control_left+0x1c>
    304e:	f7 c0       	rjmp	.+494    	; 0x323e <start_vertical_speed_control_left+0x20a>
		delta_left_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    3050:	20 91 56 04 	lds	r18, 0x0456
    3054:	30 91 57 04 	lds	r19, 0x0457
    3058:	41 e0       	ldi	r20, 0x01	; 1
    305a:	2e 30       	cpi	r18, 0x0E	; 14
    305c:	34 07       	cpc	r19, r20
    305e:	0c f4       	brge	.+2      	; 0x3062 <start_vertical_speed_control_left+0x2e>
    3060:	c7 c0       	rjmp	.+398    	; 0x31f0 <start_vertical_speed_control_left+0x1bc>
		if(*pwm_left > 0) {
    3062:	18 16       	cp	r1, r24
    3064:	19 06       	cpc	r1, r25
    3066:	0c f0       	brlt	.+2      	; 0x306a <start_vertical_speed_control_left+0x36>
    3068:	68 c1       	rjmp	.+720    	; 0x333a <start_vertical_speed_control_left+0x306>
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
    306a:	88 e6       	ldi	r24, 0x68	; 104
    306c:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    306e:	82 1b       	sub	r24, r18
    3070:	93 0b       	sbc	r25, r19
    3072:	95 95       	asr	r25
    3074:	87 95       	ror	r24
    3076:	95 95       	asr	r25
    3078:	87 95       	ror	r24
    307a:	29 e1       	ldi	r18, 0x19	; 25
    307c:	30 e0       	ldi	r19, 0x00	; 0
    307e:	28 1b       	sub	r18, r24
    3080:	39 0b       	sbc	r19, r25
    3082:	30 93 04 02 	sts	0x0204, r19
    3086:	20 93 03 02 	sts	0x0203, r18
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
		}
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    308a:	c0 91 87 05 	lds	r28, 0x0587
    308e:	d0 91 88 05 	lds	r29, 0x0588
    3092:	d0 93 9d 09 	sts	0x099D, r29
    3096:	c0 93 9c 09 	sts	0x099C, r28
	if(*pwm_left >= 0) {
    309a:	80 81       	ld	r24, Z
    309c:	91 81       	ldd	r25, Z+1	; 0x01
    309e:	97 fd       	sbrc	r25, 7
    30a0:	2e c1       	rjmp	.+604    	; 0x32fe <start_vertical_speed_control_left+0x2ca>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    30a2:	20 91 01 03 	lds	r18, 0x0301
    30a6:	30 91 02 03 	lds	r19, 0x0302
    30aa:	dc 01       	movw	r26, r24
    30ac:	a2 1b       	sub	r26, r18
    30ae:	b3 0b       	sbc	r27, r19
    30b0:	b0 93 88 05 	sts	0x0588, r27
    30b4:	a0 93 87 05 	sts	0x0587, r26
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;
    30b8:	80 91 19 03 	lds	r24, 0x0319
    30bc:	90 91 1a 03 	lds	r25, 0x031A
    30c0:	8a 0f       	add	r24, r26
    30c2:	9b 1f       	adc	r25, r27
    30c4:	90 93 1a 03 	sts	0x031A, r25
    30c8:	80 93 19 03 	sts	0x0319, r24

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
    30cc:	66 e0       	ldi	r22, 0x06	; 6
    30ce:	81 34       	cpi	r24, 0x41	; 65
    30d0:	96 07       	cpc	r25, r22
    30d2:	0c f4       	brge	.+2      	; 0x30d6 <start_vertical_speed_control_left+0xa2>
    30d4:	cb c0       	rjmp	.+406    	; 0x326c <start_vertical_speed_control_left+0x238>
		delta_left_speed_sum = I_LIMIT_VERTICAL;
    30d6:	80 e4       	ldi	r24, 0x40	; 64
    30d8:	96 e0       	ldi	r25, 0x06	; 6
    30da:	90 93 1a 03 	sts	0x031A, r25
    30de:	80 93 19 03 	sts	0x0319, r24
    30e2:	10 ec       	ldi	r17, 0xC0	; 192
    30e4:	c1 2e       	mov	r12, r17
    30e6:	12 e1       	ldi	r17, 0x12	; 18
    30e8:	d1 2e       	mov	r13, r17
    30ea:	e1 2c       	mov	r14, r1
    30ec:	f1 2c       	mov	r15, r1
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_left_speed_controller = (signed long int)(k_ff_speed_control_left*(*pwm_left));
    30ee:	00 81       	ld	r16, Z
    30f0:	11 81       	ldd	r17, Z+1	; 0x01
	pwm_left_speed_controller += (signed long int)(P_VERTICAL * delta_left_speed_current);
    30f2:	9d 01       	movw	r18, r26
    30f4:	22 0f       	add	r18, r18
    30f6:	33 1f       	adc	r19, r19
    30f8:	2a 0f       	add	r18, r26
    30fa:	3b 1f       	adc	r19, r27
    30fc:	22 0f       	add	r18, r18
    30fe:	33 1f       	adc	r19, r19
    3100:	22 0f       	add	r18, r18
    3102:	33 1f       	adc	r19, r19
    3104:	22 0f       	add	r18, r18
    3106:	33 1f       	adc	r19, r19
    3108:	2a 0f       	add	r18, r26
    310a:	3b 1f       	adc	r19, r27
    310c:	44 27       	eor	r20, r20
    310e:	37 fd       	sbrc	r19, 7
    3110:	40 95       	com	r20
    3112:	54 2f       	mov	r21, r20
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_left_speed_controller = (signed long int)(k_ff_speed_control_left*(*pwm_left));
    3114:	80 91 03 02 	lds	r24, 0x0203
    3118:	90 91 04 02 	lds	r25, 0x0204
    311c:	08 9f       	mul	r16, r24
    311e:	b0 01       	movw	r22, r0
    3120:	09 9f       	mul	r16, r25
    3122:	70 0d       	add	r23, r0
    3124:	18 9f       	mul	r17, r24
    3126:	70 0d       	add	r23, r0
    3128:	11 24       	eor	r1, r1
    312a:	88 27       	eor	r24, r24
    312c:	77 fd       	sbrc	r23, 7
    312e:	80 95       	com	r24
    3130:	98 2f       	mov	r25, r24
	pwm_left_speed_controller += (signed long int)(P_VERTICAL * delta_left_speed_current);
    3132:	26 0f       	add	r18, r22
    3134:	37 1f       	adc	r19, r23
    3136:	48 1f       	adc	r20, r24
    3138:	59 1f       	adc	r21, r25
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
    313a:	ac 1b       	sub	r26, r28
    313c:	bd 0b       	sbc	r27, r29
    313e:	aa 0f       	add	r26, r26
    3140:	bb 1f       	adc	r27, r27
    3142:	bd 01       	movw	r22, r26
    3144:	cb 01       	movw	r24, r22
    3146:	aa 27       	eor	r26, r26
    3148:	97 fd       	sbrc	r25, 7
    314a:	a0 95       	com	r26
    314c:	ba 2f       	mov	r27, r26
    314e:	28 0f       	add	r18, r24
    3150:	39 1f       	adc	r19, r25
    3152:	4a 1f       	adc	r20, r26
    3154:	5b 1f       	adc	r21, r27
	pwm_left_speed_controller += (signed long int)(I_VERTICAL*delta_left_speed_sum);
    3156:	2c 0d       	add	r18, r12
    3158:	3d 1d       	adc	r19, r13
    315a:	4e 1d       	adc	r20, r14
    315c:	5f 1d       	adc	r21, r15
    315e:	20 93 15 03 	sts	0x0315, r18
    3162:	30 93 16 03 	sts	0x0316, r19
    3166:	40 93 17 03 	sts	0x0317, r20
    316a:	50 93 18 03 	sts	0x0318, r21

	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    316e:	57 fd       	sbrc	r21, 7
    3170:	9d c0       	rjmp	.+314    	; 0x32ac <start_vertical_speed_control_left+0x278>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    3172:	12 16       	cp	r1, r18
    3174:	13 06       	cpc	r1, r19
    3176:	14 06       	cpc	r1, r20
    3178:	15 06       	cpc	r1, r21
    317a:	0c f0       	brlt	.+2      	; 0x317e <start_vertical_speed_control_left+0x14a>
    317c:	a4 c0       	rjmp	.+328    	; 0x32c6 <start_vertical_speed_control_left+0x292>
    317e:	17 fd       	sbrc	r17, 7
    3180:	c9 c0       	rjmp	.+402    	; 0x3314 <start_vertical_speed_control_left+0x2e0>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    3182:	21 3c       	cpi	r18, 0xC1	; 193
    3184:	7d e5       	ldi	r23, 0x5D	; 93
    3186:	37 07       	cpc	r19, r23
    3188:	70 e0       	ldi	r23, 0x00	; 0
    318a:	47 07       	cpc	r20, r23
    318c:	70 e0       	ldi	r23, 0x00	; 0
    318e:	57 07       	cpc	r21, r23
    3190:	0c f4       	brge	.+2      	; 0x3194 <start_vertical_speed_control_left+0x160>
    3192:	99 c0       	rjmp	.+306    	; 0x32c6 <start_vertical_speed_control_left+0x292>
    3194:	80 ec       	ldi	r24, 0xC0	; 192
    3196:	9d e5       	ldi	r25, 0x5D	; 93
    3198:	a0 e0       	ldi	r26, 0x00	; 0
    319a:	b0 e0       	ldi	r27, 0x00	; 0
    319c:	80 93 15 03 	sts	0x0315, r24
    31a0:	90 93 16 03 	sts	0x0316, r25
    31a4:	a0 93 17 03 	sts	0x0317, r26
    31a8:	b0 93 18 03 	sts	0x0318, r27
    31ac:	2c ed       	ldi	r18, 0xDC	; 220
    31ae:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = (signed int)(pwm_left_speed_controller>>4);
    31b0:	31 83       	std	Z+1, r19	; 0x01
    31b2:	20 83       	st	Z, r18

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
    31b4:	80 91 fb 02 	lds	r24, 0x02FB
    31b8:	90 91 fc 02 	lds	r25, 0x02FC
    31bc:	18 16       	cp	r1, r24
    31be:	19 06       	cpc	r1, r25
    31c0:	0c f0       	brlt	.+2      	; 0x31c4 <start_vertical_speed_control_left+0x190>
    31c2:	98 c0       	rjmp	.+304    	; 0x32f4 <start_vertical_speed_control_left+0x2c0>
		*pwm_left += 1;
    31c4:	2f 5f       	subi	r18, 0xFF	; 255
    31c6:	3f 4f       	sbci	r19, 0xFF	; 255
    31c8:	31 83       	std	Z+1, r19	; 0x01
    31ca:	20 83       	st	Z, r18
	} else {
		*pwm_left -= 1;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    31cc:	42 e0       	ldi	r20, 0x02	; 2
    31ce:	20 30       	cpi	r18, 0x00	; 0
    31d0:	34 07       	cpc	r19, r20
    31d2:	0c f4       	brge	.+2      	; 0x31d6 <start_vertical_speed_control_left+0x1a2>
    31d4:	41 c0       	rjmp	.+130    	; 0x3258 <start_vertical_speed_control_left+0x224>
    31d6:	8f ef       	ldi	r24, 0xFF	; 255
    31d8:	91 e0       	ldi	r25, 0x01	; 1
    31da:	91 83       	std	Z+1, r25	; 0x01
    31dc:	80 83       	st	Z, r24
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);


}
    31de:	df 91       	pop	r29
    31e0:	cf 91       	pop	r28
    31e2:	1f 91       	pop	r17
    31e4:	0f 91       	pop	r16
    31e6:	ff 90       	pop	r15
    31e8:	ef 90       	pop	r14
    31ea:	df 90       	pop	r13
    31ec:	cf 90       	pop	r12
    31ee:	08 95       	ret
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    31f0:	24 3b       	cpi	r18, 0xB4	; 180
    31f2:	31 05       	cpc	r19, r1
    31f4:	94 f4       	brge	.+36     	; 0x321a <start_vertical_speed_control_left+0x1e6>
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
    31f6:	2a 35       	cpi	r18, 0x5A	; 90
    31f8:	31 05       	cpc	r19, r1
    31fa:	7c f4       	brge	.+30     	; 0x321a <start_vertical_speed_control_left+0x1e6>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
    31fc:	18 16       	cp	r1, r24
    31fe:	19 06       	cpc	r1, r25
    3200:	0c f0       	brlt	.+2      	; 0x3204 <start_vertical_speed_control_left+0x1d0>
    3202:	a9 c0       	rjmp	.+338    	; 0x3356 <start_vertical_speed_control_left+0x322>
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
    3204:	35 95       	asr	r19
    3206:	27 95       	ror	r18
    3208:	35 95       	asr	r19
    320a:	27 95       	ror	r18
    320c:	27 5e       	subi	r18, 0xE7	; 231
    320e:	3f 4f       	sbci	r19, 0xFF	; 255
    3210:	30 93 04 02 	sts	0x0204, r19
    3214:	20 93 03 02 	sts	0x0203, r18
    3218:	38 cf       	rjmp	.-400    	; 0x308a <start_vertical_speed_control_left+0x56>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
    321a:	18 16       	cp	r1, r24
    321c:	19 06       	cpc	r1, r25
    321e:	0c f0       	brlt	.+2      	; 0x3222 <start_vertical_speed_control_left+0x1ee>
    3220:	42 c0       	rjmp	.+132    	; 0x32a6 <start_vertical_speed_control_left+0x272>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
    3222:	84 eb       	ldi	r24, 0xB4	; 180
    3224:	90 e0       	ldi	r25, 0x00	; 0
    3226:	82 1b       	sub	r24, r18
    3228:	93 0b       	sbc	r25, r19
    322a:	95 95       	asr	r25
    322c:	87 95       	ror	r24
    322e:	95 95       	asr	r25
    3230:	87 95       	ror	r24
    3232:	49 96       	adiw	r24, 0x19	; 25
    3234:	90 93 04 02 	sts	0x0204, r25
    3238:	80 93 03 02 	sts	0x0203, r24
    323c:	26 cf       	rjmp	.-436    	; 0x308a <start_vertical_speed_control_left+0x56>
void start_vertical_speed_control_left(signed int *pwm_left) {
	
	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).
	
	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    323e:	10 92 1a 03 	sts	0x031A, r1
    3242:	10 92 19 03 	sts	0x0319, r1
		delta_left_speed_current = 0;
    3246:	10 92 88 05 	sts	0x0588, r1
    324a:	10 92 87 05 	sts	0x0587, r1
		delta_left_speed_prev = 0;
    324e:	10 92 9d 09 	sts	0x099D, r1
    3252:	10 92 9c 09 	sts	0x099C, r1
		return;
    3256:	c3 cf       	rjmp	.-122    	; 0x31de <start_vertical_speed_control_left+0x1aa>
	} else {
		*pwm_left -= 1;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    3258:	6e ef       	ldi	r22, 0xFE	; 254
    325a:	21 30       	cpi	r18, 0x01	; 1
    325c:	36 07       	cpc	r19, r22
    325e:	0c f0       	brlt	.+2      	; 0x3262 <start_vertical_speed_control_left+0x22e>
    3260:	be cf       	rjmp	.-132    	; 0x31de <start_vertical_speed_control_left+0x1aa>
    3262:	81 e0       	ldi	r24, 0x01	; 1
    3264:	9e ef       	ldi	r25, 0xFE	; 254
    3266:	91 83       	std	Z+1, r25	; 0x01
    3268:	80 83       	st	Z, r24
    326a:	b9 cf       	rjmp	.-142    	; 0x31de <start_vertical_speed_control_left+0x1aa>
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    326c:	79 ef       	ldi	r23, 0xF9	; 249
    326e:	80 3c       	cpi	r24, 0xC0	; 192
    3270:	97 07       	cpc	r25, r23
    3272:	7c f4       	brge	.+30     	; 0x3292 <start_vertical_speed_control_left+0x25e>
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
    3274:	80 ec       	ldi	r24, 0xC0	; 192
    3276:	99 ef       	ldi	r25, 0xF9	; 249
    3278:	90 93 1a 03 	sts	0x031A, r25
    327c:	80 93 19 03 	sts	0x0319, r24
    3280:	60 e4       	ldi	r22, 0x40	; 64
    3282:	c6 2e       	mov	r12, r22
    3284:	6d ee       	ldi	r22, 0xED	; 237
    3286:	d6 2e       	mov	r13, r22
    3288:	6f ef       	ldi	r22, 0xFF	; 255
    328a:	e6 2e       	mov	r14, r22
    328c:	6f ef       	ldi	r22, 0xFF	; 255
    328e:	f6 2e       	mov	r15, r22
    3290:	2e cf       	rjmp	.-420    	; 0x30ee <start_vertical_speed_control_left+0xba>
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    3292:	6c 01       	movw	r12, r24
    3294:	cc 0c       	add	r12, r12
    3296:	dd 1c       	adc	r13, r13
    3298:	c8 0e       	add	r12, r24
    329a:	d9 1e       	adc	r13, r25
    329c:	ee 24       	eor	r14, r14
    329e:	d7 fc       	sbrc	r13, 7
    32a0:	e0 94       	com	r14
    32a2:	fe 2c       	mov	r15, r14
    32a4:	24 cf       	rjmp	.-440    	; 0x30ee <start_vertical_speed_control_left+0xba>
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    32a6:	84 eb       	ldi	r24, 0xB4	; 180
    32a8:	90 e0       	ldi	r25, 0x00	; 0
    32aa:	e1 ce       	rjmp	.-574    	; 0x306e <start_vertical_speed_control_left+0x3a>
	pwm_left_speed_controller += (signed long int)(P_VERTICAL * delta_left_speed_current);
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
	pwm_left_speed_controller += (signed long int)(I_VERTICAL*delta_left_speed_sum);

	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    32ac:	17 fd       	sbrc	r17, 7
    32ae:	0b c0       	rjmp	.+22     	; 0x32c6 <start_vertical_speed_control_left+0x292>
		pwm_left_speed_controller = 0;
    32b0:	10 92 15 03 	sts	0x0315, r1
    32b4:	10 92 16 03 	sts	0x0316, r1
    32b8:	10 92 17 03 	sts	0x0317, r1
    32bc:	10 92 18 03 	sts	0x0318, r1
    32c0:	20 e0       	ldi	r18, 0x00	; 0
    32c2:	30 e0       	ldi	r19, 0x00	; 0
    32c4:	a9 01       	movw	r20, r18
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    32c6:	20 34       	cpi	r18, 0x40	; 64
    32c8:	82 ea       	ldi	r24, 0xA2	; 162
    32ca:	38 07       	cpc	r19, r24
    32cc:	8f ef       	ldi	r24, 0xFF	; 255
    32ce:	48 07       	cpc	r20, r24
    32d0:	8f ef       	ldi	r24, 0xFF	; 255
    32d2:	58 07       	cpc	r21, r24
    32d4:	54 f5       	brge	.+84     	; 0x332a <start_vertical_speed_control_left+0x2f6>
    32d6:	80 e4       	ldi	r24, 0x40	; 64
    32d8:	92 ea       	ldi	r25, 0xA2	; 162
    32da:	af ef       	ldi	r26, 0xFF	; 255
    32dc:	bf ef       	ldi	r27, 0xFF	; 255
    32de:	80 93 15 03 	sts	0x0315, r24
    32e2:	90 93 16 03 	sts	0x0316, r25
    32e6:	a0 93 17 03 	sts	0x0317, r26
    32ea:	b0 93 18 03 	sts	0x0318, r27
    32ee:	24 e2       	ldi	r18, 0x24	; 36
    32f0:	3a ef       	ldi	r19, 0xFA	; 250
    32f2:	5e cf       	rjmp	.-324    	; 0x31b0 <start_vertical_speed_control_left+0x17c>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
		*pwm_left += 1;
	} else {
		*pwm_left -= 1;
    32f4:	21 50       	subi	r18, 0x01	; 1
    32f6:	30 40       	sbci	r19, 0x00	; 0
    32f8:	31 83       	std	Z+1, r19	; 0x01
    32fa:	20 83       	st	Z, r18
    32fc:	67 cf       	rjmp	.-306    	; 0x31cc <start_vertical_speed_control_left+0x198>
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    32fe:	a0 91 01 03 	lds	r26, 0x0301
    3302:	b0 91 02 03 	lds	r27, 0x0302
    3306:	a8 0f       	add	r26, r24
    3308:	b9 1f       	adc	r27, r25
    330a:	b0 93 88 05 	sts	0x0588, r27
    330e:	a0 93 87 05 	sts	0x0587, r26
    3312:	d2 ce       	rjmp	.-604    	; 0x30b8 <start_vertical_speed_control_left+0x84>
	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    3314:	10 92 15 03 	sts	0x0315, r1
    3318:	10 92 16 03 	sts	0x0316, r1
    331c:	10 92 17 03 	sts	0x0317, r1
    3320:	10 92 18 03 	sts	0x0318, r1
    3324:	20 e0       	ldi	r18, 0x00	; 0
    3326:	30 e0       	ldi	r19, 0x00	; 0
    3328:	a9 01       	movw	r20, r18
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    332a:	84 e0       	ldi	r24, 0x04	; 4
    332c:	55 95       	asr	r21
    332e:	47 95       	ror	r20
    3330:	37 95       	ror	r19
    3332:	27 95       	ror	r18
    3334:	8a 95       	dec	r24
    3336:	d1 f7       	brne	.-12     	; 0x332c <start_vertical_speed_control_left+0x2f8>
    3338:	3b cf       	rjmp	.-394    	; 0x31b0 <start_vertical_speed_control_left+0x17c>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
    333a:	88 e6       	ldi	r24, 0x68	; 104
    333c:	91 e0       	ldi	r25, 0x01	; 1
    333e:	82 1b       	sub	r24, r18
    3340:	93 0b       	sbc	r25, r19
    3342:	95 95       	asr	r25
    3344:	87 95       	ror	r24
    3346:	95 95       	asr	r25
    3348:	87 95       	ror	r24
    334a:	49 96       	adiw	r24, 0x19	; 25
    334c:	90 93 04 02 	sts	0x0204, r25
    3350:	80 93 03 02 	sts	0x0203, r24
    3354:	9a ce       	rjmp	.-716    	; 0x308a <start_vertical_speed_control_left+0x56>
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
    3356:	35 95       	asr	r19
    3358:	27 95       	ror	r18
    335a:	35 95       	asr	r19
    335c:	27 95       	ror	r18
    335e:	89 e1       	ldi	r24, 0x19	; 25
    3360:	90 e0       	ldi	r25, 0x00	; 0
    3362:	82 1b       	sub	r24, r18
    3364:	93 0b       	sbc	r25, r19
    3366:	90 93 04 02 	sts	0x0204, r25
    336a:	80 93 03 02 	sts	0x0203, r24
    336e:	8d ce       	rjmp	.-742    	; 0x308a <start_vertical_speed_control_left+0x56>

00003370 <start_vertical_speed_control_right>:


}


void start_vertical_speed_control_right(signed int *pwm_right) {
    3370:	cf 92       	push	r12
    3372:	df 92       	push	r13
    3374:	ef 92       	push	r14
    3376:	ff 92       	push	r15
    3378:	0f 93       	push	r16
    337a:	1f 93       	push	r17
    337c:	cf 93       	push	r28
    337e:	df 93       	push	r29
    3380:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    3382:	80 81       	ld	r24, Z
    3384:	91 81       	ldd	r25, Z+1	; 0x01
    3386:	00 97       	sbiw	r24, 0x00	; 0
    3388:	09 f4       	brne	.+2      	; 0x338c <start_vertical_speed_control_right+0x1c>
    338a:	f7 c0       	rjmp	.+494    	; 0x357a <start_vertical_speed_control_right+0x20a>
		delta_right_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    338c:	20 91 56 04 	lds	r18, 0x0456
    3390:	30 91 57 04 	lds	r19, 0x0457
    3394:	41 e0       	ldi	r20, 0x01	; 1
    3396:	2e 30       	cpi	r18, 0x0E	; 14
    3398:	34 07       	cpc	r19, r20
    339a:	0c f4       	brge	.+2      	; 0x339e <start_vertical_speed_control_right+0x2e>
    339c:	c7 c0       	rjmp	.+398    	; 0x352c <start_vertical_speed_control_right+0x1bc>
		if(*pwm_right > 0) {
    339e:	18 16       	cp	r1, r24
    33a0:	19 06       	cpc	r1, r25
    33a2:	0c f0       	brlt	.+2      	; 0x33a6 <start_vertical_speed_control_right+0x36>
    33a4:	68 c1       	rjmp	.+720    	; 0x3676 <start_vertical_speed_control_right+0x306>
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
    33a6:	88 e6       	ldi	r24, 0x68	; 104
    33a8:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    33aa:	82 1b       	sub	r24, r18
    33ac:	93 0b       	sbc	r25, r19
    33ae:	95 95       	asr	r25
    33b0:	87 95       	ror	r24
    33b2:	95 95       	asr	r25
    33b4:	87 95       	ror	r24
    33b6:	29 e1       	ldi	r18, 0x19	; 25
    33b8:	30 e0       	ldi	r19, 0x00	; 0
    33ba:	28 1b       	sub	r18, r24
    33bc:	39 0b       	sbc	r19, r25
    33be:	30 93 06 02 	sts	0x0206, r19
    33c2:	20 93 05 02 	sts	0x0205, r18
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
		}
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    33c6:	c0 91 3b 0b 	lds	r28, 0x0B3B
    33ca:	d0 91 3c 0b 	lds	r29, 0x0B3C
    33ce:	d0 93 d5 08 	sts	0x08D5, r29
    33d2:	c0 93 d4 08 	sts	0x08D4, r28
	if(*pwm_right >= 0) {
    33d6:	80 81       	ld	r24, Z
    33d8:	91 81       	ldd	r25, Z+1	; 0x01
    33da:	97 fd       	sbrc	r25, 7
    33dc:	2e c1       	rjmp	.+604    	; 0x363a <start_vertical_speed_control_right+0x2ca>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    33de:	20 91 03 03 	lds	r18, 0x0303
    33e2:	30 91 04 03 	lds	r19, 0x0304
    33e6:	dc 01       	movw	r26, r24
    33e8:	a2 1b       	sub	r26, r18
    33ea:	b3 0b       	sbc	r27, r19
    33ec:	b0 93 3c 0b 	sts	0x0B3C, r27
    33f0:	a0 93 3b 0b 	sts	0x0B3B, r26
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    33f4:	80 91 1b 03 	lds	r24, 0x031B
    33f8:	90 91 1c 03 	lds	r25, 0x031C
    33fc:	8a 0f       	add	r24, r26
    33fe:	9b 1f       	adc	r25, r27
    3400:	90 93 1c 03 	sts	0x031C, r25
    3404:	80 93 1b 03 	sts	0x031B, r24

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
    3408:	66 e0       	ldi	r22, 0x06	; 6
    340a:	81 34       	cpi	r24, 0x41	; 65
    340c:	96 07       	cpc	r25, r22
    340e:	0c f4       	brge	.+2      	; 0x3412 <start_vertical_speed_control_right+0xa2>
    3410:	cb c0       	rjmp	.+406    	; 0x35a8 <start_vertical_speed_control_right+0x238>
		delta_right_speed_sum = I_LIMIT_VERTICAL;
    3412:	80 e4       	ldi	r24, 0x40	; 64
    3414:	96 e0       	ldi	r25, 0x06	; 6
    3416:	90 93 1c 03 	sts	0x031C, r25
    341a:	80 93 1b 03 	sts	0x031B, r24
    341e:	40 ec       	ldi	r20, 0xC0	; 192
    3420:	c4 2e       	mov	r12, r20
    3422:	42 e1       	ldi	r20, 0x12	; 18
    3424:	d4 2e       	mov	r13, r20
    3426:	e1 2c       	mov	r14, r1
    3428:	f1 2c       	mov	r15, r1
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_right_speed_controller = (signed long int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
    342a:	00 81       	ld	r16, Z
    342c:	11 81       	ldd	r17, Z+1	; 0x01
	pwm_right_speed_controller += (signed long int)(P_VERTICAL * delta_right_speed_current);
    342e:	9d 01       	movw	r18, r26
    3430:	22 0f       	add	r18, r18
    3432:	33 1f       	adc	r19, r19
    3434:	2a 0f       	add	r18, r26
    3436:	3b 1f       	adc	r19, r27
    3438:	22 0f       	add	r18, r18
    343a:	33 1f       	adc	r19, r19
    343c:	22 0f       	add	r18, r18
    343e:	33 1f       	adc	r19, r19
    3440:	22 0f       	add	r18, r18
    3442:	33 1f       	adc	r19, r19
    3444:	2a 0f       	add	r18, r26
    3446:	3b 1f       	adc	r19, r27
    3448:	44 27       	eor	r20, r20
    344a:	37 fd       	sbrc	r19, 7
    344c:	40 95       	com	r20
    344e:	54 2f       	mov	r21, r20
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_right_speed_controller = (signed long int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
    3450:	80 91 05 02 	lds	r24, 0x0205
    3454:	90 91 06 02 	lds	r25, 0x0206
    3458:	08 9f       	mul	r16, r24
    345a:	b0 01       	movw	r22, r0
    345c:	09 9f       	mul	r16, r25
    345e:	70 0d       	add	r23, r0
    3460:	18 9f       	mul	r17, r24
    3462:	70 0d       	add	r23, r0
    3464:	11 24       	eor	r1, r1
    3466:	88 27       	eor	r24, r24
    3468:	77 fd       	sbrc	r23, 7
    346a:	80 95       	com	r24
    346c:	98 2f       	mov	r25, r24
	pwm_right_speed_controller += (signed long int)(P_VERTICAL * delta_right_speed_current);
    346e:	26 0f       	add	r18, r22
    3470:	37 1f       	adc	r19, r23
    3472:	48 1f       	adc	r20, r24
    3474:	59 1f       	adc	r21, r25
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
    3476:	ac 1b       	sub	r26, r28
    3478:	bd 0b       	sbc	r27, r29
    347a:	aa 0f       	add	r26, r26
    347c:	bb 1f       	adc	r27, r27
    347e:	bd 01       	movw	r22, r26
    3480:	cb 01       	movw	r24, r22
    3482:	aa 27       	eor	r26, r26
    3484:	97 fd       	sbrc	r25, 7
    3486:	a0 95       	com	r26
    3488:	ba 2f       	mov	r27, r26
    348a:	28 0f       	add	r18, r24
    348c:	39 1f       	adc	r19, r25
    348e:	4a 1f       	adc	r20, r26
    3490:	5b 1f       	adc	r21, r27
	pwm_right_speed_controller += (signed long int)(I_VERTICAL*delta_right_speed_sum);
    3492:	2c 0d       	add	r18, r12
    3494:	3d 1d       	adc	r19, r13
    3496:	4e 1d       	adc	r20, r14
    3498:	5f 1d       	adc	r21, r15
    349a:	20 93 11 03 	sts	0x0311, r18
    349e:	30 93 12 03 	sts	0x0312, r19
    34a2:	40 93 13 03 	sts	0x0313, r20
    34a6:	50 93 14 03 	sts	0x0314, r21

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    34aa:	57 fd       	sbrc	r21, 7
    34ac:	9d c0       	rjmp	.+314    	; 0x35e8 <start_vertical_speed_control_right+0x278>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    34ae:	12 16       	cp	r1, r18
    34b0:	13 06       	cpc	r1, r19
    34b2:	14 06       	cpc	r1, r20
    34b4:	15 06       	cpc	r1, r21
    34b6:	0c f0       	brlt	.+2      	; 0x34ba <start_vertical_speed_control_right+0x14a>
    34b8:	a4 c0       	rjmp	.+328    	; 0x3602 <start_vertical_speed_control_right+0x292>
    34ba:	17 fd       	sbrc	r17, 7
    34bc:	c9 c0       	rjmp	.+402    	; 0x3650 <start_vertical_speed_control_right+0x2e0>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    34be:	21 3c       	cpi	r18, 0xC1	; 193
    34c0:	7d e5       	ldi	r23, 0x5D	; 93
    34c2:	37 07       	cpc	r19, r23
    34c4:	70 e0       	ldi	r23, 0x00	; 0
    34c6:	47 07       	cpc	r20, r23
    34c8:	70 e0       	ldi	r23, 0x00	; 0
    34ca:	57 07       	cpc	r21, r23
    34cc:	0c f4       	brge	.+2      	; 0x34d0 <start_vertical_speed_control_right+0x160>
    34ce:	99 c0       	rjmp	.+306    	; 0x3602 <start_vertical_speed_control_right+0x292>
    34d0:	80 ec       	ldi	r24, 0xC0	; 192
    34d2:	9d e5       	ldi	r25, 0x5D	; 93
    34d4:	a0 e0       	ldi	r26, 0x00	; 0
    34d6:	b0 e0       	ldi	r27, 0x00	; 0
    34d8:	80 93 11 03 	sts	0x0311, r24
    34dc:	90 93 12 03 	sts	0x0312, r25
    34e0:	a0 93 13 03 	sts	0x0313, r26
    34e4:	b0 93 14 03 	sts	0x0314, r27
    34e8:	2c ed       	ldi	r18, 0xDC	; 220
    34ea:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = (signed int)(pwm_right_speed_controller>>4);
    34ec:	31 83       	std	Z+1, r19	; 0x01
    34ee:	20 83       	st	Z, r18

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
    34f0:	80 91 f9 02 	lds	r24, 0x02F9
    34f4:	90 91 fa 02 	lds	r25, 0x02FA
    34f8:	18 16       	cp	r1, r24
    34fa:	19 06       	cpc	r1, r25
    34fc:	0c f0       	brlt	.+2      	; 0x3500 <start_vertical_speed_control_right+0x190>
    34fe:	98 c0       	rjmp	.+304    	; 0x3630 <start_vertical_speed_control_right+0x2c0>
		*pwm_right += 1;
    3500:	2f 5f       	subi	r18, 0xFF	; 255
    3502:	3f 4f       	sbci	r19, 0xFF	; 255
    3504:	31 83       	std	Z+1, r19	; 0x01
    3506:	20 83       	st	Z, r18
	} else {
		*pwm_right -= 1;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    3508:	42 e0       	ldi	r20, 0x02	; 2
    350a:	20 30       	cpi	r18, 0x00	; 0
    350c:	34 07       	cpc	r19, r20
    350e:	0c f4       	brge	.+2      	; 0x3512 <start_vertical_speed_control_right+0x1a2>
    3510:	41 c0       	rjmp	.+130    	; 0x3594 <start_vertical_speed_control_right+0x224>
    3512:	8f ef       	ldi	r24, 0xFF	; 255
    3514:	91 e0       	ldi	r25, 0x01	; 1
    3516:	91 83       	std	Z+1, r25	; 0x01
    3518:	80 83       	st	Z, r24
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    351a:	df 91       	pop	r29
    351c:	cf 91       	pop	r28
    351e:	1f 91       	pop	r17
    3520:	0f 91       	pop	r16
    3522:	ff 90       	pop	r15
    3524:	ef 90       	pop	r14
    3526:	df 90       	pop	r13
    3528:	cf 90       	pop	r12
    352a:	08 95       	ret
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    352c:	24 3b       	cpi	r18, 0xB4	; 180
    352e:	31 05       	cpc	r19, r1
    3530:	94 f4       	brge	.+36     	; 0x3556 <start_vertical_speed_control_right+0x1e6>
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
    3532:	2a 35       	cpi	r18, 0x5A	; 90
    3534:	31 05       	cpc	r19, r1
    3536:	7c f4       	brge	.+30     	; 0x3556 <start_vertical_speed_control_right+0x1e6>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
    3538:	18 16       	cp	r1, r24
    353a:	19 06       	cpc	r1, r25
    353c:	0c f0       	brlt	.+2      	; 0x3540 <start_vertical_speed_control_right+0x1d0>
    353e:	a9 c0       	rjmp	.+338    	; 0x3692 <start_vertical_speed_control_right+0x322>
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
    3540:	35 95       	asr	r19
    3542:	27 95       	ror	r18
    3544:	35 95       	asr	r19
    3546:	27 95       	ror	r18
    3548:	27 5e       	subi	r18, 0xE7	; 231
    354a:	3f 4f       	sbci	r19, 0xFF	; 255
    354c:	30 93 06 02 	sts	0x0206, r19
    3550:	20 93 05 02 	sts	0x0205, r18
    3554:	38 cf       	rjmp	.-400    	; 0x33c6 <start_vertical_speed_control_right+0x56>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
    3556:	18 16       	cp	r1, r24
    3558:	19 06       	cpc	r1, r25
    355a:	0c f0       	brlt	.+2      	; 0x355e <start_vertical_speed_control_right+0x1ee>
    355c:	42 c0       	rjmp	.+132    	; 0x35e2 <start_vertical_speed_control_right+0x272>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
    355e:	84 eb       	ldi	r24, 0xB4	; 180
    3560:	90 e0       	ldi	r25, 0x00	; 0
    3562:	82 1b       	sub	r24, r18
    3564:	93 0b       	sbc	r25, r19
    3566:	95 95       	asr	r25
    3568:	87 95       	ror	r24
    356a:	95 95       	asr	r25
    356c:	87 95       	ror	r24
    356e:	49 96       	adiw	r24, 0x19	; 25
    3570:	90 93 06 02 	sts	0x0206, r25
    3574:	80 93 05 02 	sts	0x0205, r24
    3578:	26 cf       	rjmp	.-436    	; 0x33c6 <start_vertical_speed_control_right+0x56>
void start_vertical_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    357a:	10 92 1c 03 	sts	0x031C, r1
    357e:	10 92 1b 03 	sts	0x031B, r1
		delta_right_speed_current = 0;
    3582:	10 92 3c 0b 	sts	0x0B3C, r1
    3586:	10 92 3b 0b 	sts	0x0B3B, r1
		delta_right_speed_prev = 0;
    358a:	10 92 d5 08 	sts	0x08D5, r1
    358e:	10 92 d4 08 	sts	0x08D4, r1
		return;
    3592:	c3 cf       	rjmp	.-122    	; 0x351a <start_vertical_speed_control_right+0x1aa>
	} else {
		*pwm_right -= 1;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    3594:	6e ef       	ldi	r22, 0xFE	; 254
    3596:	21 30       	cpi	r18, 0x01	; 1
    3598:	36 07       	cpc	r19, r22
    359a:	0c f0       	brlt	.+2      	; 0x359e <start_vertical_speed_control_right+0x22e>
    359c:	be cf       	rjmp	.-132    	; 0x351a <start_vertical_speed_control_right+0x1aa>
    359e:	81 e0       	ldi	r24, 0x01	; 1
    35a0:	9e ef       	ldi	r25, 0xFE	; 254
    35a2:	91 83       	std	Z+1, r25	; 0x01
    35a4:	80 83       	st	Z, r24
    35a6:	b9 cf       	rjmp	.-142    	; 0x351a <start_vertical_speed_control_right+0x1aa>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    35a8:	79 ef       	ldi	r23, 0xF9	; 249
    35aa:	80 3c       	cpi	r24, 0xC0	; 192
    35ac:	97 07       	cpc	r25, r23
    35ae:	7c f4       	brge	.+30     	; 0x35ce <start_vertical_speed_control_right+0x25e>
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
    35b0:	80 ec       	ldi	r24, 0xC0	; 192
    35b2:	99 ef       	ldi	r25, 0xF9	; 249
    35b4:	90 93 1c 03 	sts	0x031C, r25
    35b8:	80 93 1b 03 	sts	0x031B, r24
    35bc:	20 e4       	ldi	r18, 0x40	; 64
    35be:	c2 2e       	mov	r12, r18
    35c0:	2d ee       	ldi	r18, 0xED	; 237
    35c2:	d2 2e       	mov	r13, r18
    35c4:	2f ef       	ldi	r18, 0xFF	; 255
    35c6:	e2 2e       	mov	r14, r18
    35c8:	2f ef       	ldi	r18, 0xFF	; 255
    35ca:	f2 2e       	mov	r15, r18
    35cc:	2e cf       	rjmp	.-420    	; 0x342a <start_vertical_speed_control_right+0xba>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    35ce:	6c 01       	movw	r12, r24
    35d0:	cc 0c       	add	r12, r12
    35d2:	dd 1c       	adc	r13, r13
    35d4:	c8 0e       	add	r12, r24
    35d6:	d9 1e       	adc	r13, r25
    35d8:	ee 24       	eor	r14, r14
    35da:	d7 fc       	sbrc	r13, 7
    35dc:	e0 94       	com	r14
    35de:	fe 2c       	mov	r15, r14
    35e0:	24 cf       	rjmp	.-440    	; 0x342a <start_vertical_speed_control_right+0xba>
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    35e2:	84 eb       	ldi	r24, 0xB4	; 180
    35e4:	90 e0       	ldi	r25, 0x00	; 0
    35e6:	e1 ce       	rjmp	.-574    	; 0x33aa <start_vertical_speed_control_right+0x3a>
	pwm_right_speed_controller += (signed long int)(P_VERTICAL * delta_right_speed_current);
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
	pwm_right_speed_controller += (signed long int)(I_VERTICAL*delta_right_speed_sum);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    35e8:	17 fd       	sbrc	r17, 7
    35ea:	0b c0       	rjmp	.+22     	; 0x3602 <start_vertical_speed_control_right+0x292>
		pwm_right_speed_controller = 0;
    35ec:	10 92 11 03 	sts	0x0311, r1
    35f0:	10 92 12 03 	sts	0x0312, r1
    35f4:	10 92 13 03 	sts	0x0313, r1
    35f8:	10 92 14 03 	sts	0x0314, r1
    35fc:	20 e0       	ldi	r18, 0x00	; 0
    35fe:	30 e0       	ldi	r19, 0x00	; 0
    3600:	a9 01       	movw	r20, r18
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    3602:	20 34       	cpi	r18, 0x40	; 64
    3604:	82 ea       	ldi	r24, 0xA2	; 162
    3606:	38 07       	cpc	r19, r24
    3608:	8f ef       	ldi	r24, 0xFF	; 255
    360a:	48 07       	cpc	r20, r24
    360c:	8f ef       	ldi	r24, 0xFF	; 255
    360e:	58 07       	cpc	r21, r24
    3610:	54 f5       	brge	.+84     	; 0x3666 <start_vertical_speed_control_right+0x2f6>
    3612:	80 e4       	ldi	r24, 0x40	; 64
    3614:	92 ea       	ldi	r25, 0xA2	; 162
    3616:	af ef       	ldi	r26, 0xFF	; 255
    3618:	bf ef       	ldi	r27, 0xFF	; 255
    361a:	80 93 11 03 	sts	0x0311, r24
    361e:	90 93 12 03 	sts	0x0312, r25
    3622:	a0 93 13 03 	sts	0x0313, r26
    3626:	b0 93 14 03 	sts	0x0314, r27
    362a:	24 e2       	ldi	r18, 0x24	; 36
    362c:	3a ef       	ldi	r19, 0xFA	; 250
    362e:	5e cf       	rjmp	.-324    	; 0x34ec <start_vertical_speed_control_right+0x17c>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
		*pwm_right += 1;
	} else {
		*pwm_right -= 1;
    3630:	21 50       	subi	r18, 0x01	; 1
    3632:	30 40       	sbci	r19, 0x00	; 0
    3634:	31 83       	std	Z+1, r19	; 0x01
    3636:	20 83       	st	Z, r18
    3638:	67 cf       	rjmp	.-306    	; 0x3508 <start_vertical_speed_control_right+0x198>
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    363a:	a0 91 03 03 	lds	r26, 0x0303
    363e:	b0 91 04 03 	lds	r27, 0x0304
    3642:	a8 0f       	add	r26, r24
    3644:	b9 1f       	adc	r27, r25
    3646:	b0 93 3c 0b 	sts	0x0B3C, r27
    364a:	a0 93 3b 0b 	sts	0x0B3B, r26
    364e:	d2 ce       	rjmp	.-604    	; 0x33f4 <start_vertical_speed_control_right+0x84>
	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    3650:	10 92 11 03 	sts	0x0311, r1
    3654:	10 92 12 03 	sts	0x0312, r1
    3658:	10 92 13 03 	sts	0x0313, r1
    365c:	10 92 14 03 	sts	0x0314, r1
    3660:	20 e0       	ldi	r18, 0x00	; 0
    3662:	30 e0       	ldi	r19, 0x00	; 0
    3664:	a9 01       	movw	r20, r18
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    3666:	64 e0       	ldi	r22, 0x04	; 4
    3668:	55 95       	asr	r21
    366a:	47 95       	ror	r20
    366c:	37 95       	ror	r19
    366e:	27 95       	ror	r18
    3670:	6a 95       	dec	r22
    3672:	d1 f7       	brne	.-12     	; 0x3668 <start_vertical_speed_control_right+0x2f8>
    3674:	3b cf       	rjmp	.-394    	; 0x34ec <start_vertical_speed_control_right+0x17c>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
    3676:	88 e6       	ldi	r24, 0x68	; 104
    3678:	91 e0       	ldi	r25, 0x01	; 1
    367a:	82 1b       	sub	r24, r18
    367c:	93 0b       	sbc	r25, r19
    367e:	95 95       	asr	r25
    3680:	87 95       	ror	r24
    3682:	95 95       	asr	r25
    3684:	87 95       	ror	r24
    3686:	49 96       	adiw	r24, 0x19	; 25
    3688:	90 93 06 02 	sts	0x0206, r25
    368c:	80 93 05 02 	sts	0x0205, r24
    3690:	9a ce       	rjmp	.-716    	; 0x33c6 <start_vertical_speed_control_right+0x56>
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
    3692:	35 95       	asr	r19
    3694:	27 95       	ror	r18
    3696:	35 95       	asr	r19
    3698:	27 95       	ror	r18
    369a:	89 e1       	ldi	r24, 0x19	; 25
    369c:	90 e0       	ldi	r25, 0x00	; 0
    369e:	82 1b       	sub	r24, r18
    36a0:	93 0b       	sbc	r25, r19
    36a2:	90 93 06 02 	sts	0x0206, r25
    36a6:	80 93 05 02 	sts	0x0205, r24
    36aa:	8d ce       	rjmp	.-742    	; 0x33c6 <start_vertical_speed_control_right+0x56>

000036ac <start_horizontal_speed_control_right>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_right(signed int *pwm_right) {
    36ac:	cf 92       	push	r12
    36ae:	df 92       	push	r13
    36b0:	ef 92       	push	r14
    36b2:	ff 92       	push	r15
    36b4:	0f 93       	push	r16
    36b6:	1f 93       	push	r17
    36b8:	cf 93       	push	r28
    36ba:	df 93       	push	r29
    36bc:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    36be:	80 81       	ld	r24, Z
    36c0:	91 81       	ldd	r25, Z+1	; 0x01
    36c2:	00 97       	sbiw	r24, 0x00	; 0
    36c4:	09 f4       	brne	.+2      	; 0x36c8 <start_horizontal_speed_control_right+0x1c>
    36c6:	b8 c0       	rjmp	.+368    	; 0x3838 <start_horizontal_speed_control_right+0x18c>
		delta_right_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    36c8:	c0 91 3b 0b 	lds	r28, 0x0B3B
    36cc:	d0 91 3c 0b 	lds	r29, 0x0B3C
    36d0:	d0 93 d5 08 	sts	0x08D5, r29
    36d4:	c0 93 d4 08 	sts	0x08D4, r28
	if(*pwm_right >= 0) {
    36d8:	80 81       	ld	r24, Z
    36da:	91 81       	ldd	r25, Z+1	; 0x01
    36dc:	97 fd       	sbrc	r25, 7
    36de:	cd c0       	rjmp	.+410    	; 0x387a <start_horizontal_speed_control_right+0x1ce>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    36e0:	20 91 03 03 	lds	r18, 0x0303
    36e4:	30 91 04 03 	lds	r19, 0x0304
    36e8:	dc 01       	movw	r26, r24
    36ea:	a2 1b       	sub	r26, r18
    36ec:	b3 0b       	sbc	r27, r19
    36ee:	b0 93 3c 0b 	sts	0x0B3C, r27
    36f2:	a0 93 3b 0b 	sts	0x0B3B, r26
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}

	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    36f6:	c0 90 1b 03 	lds	r12, 0x031B
    36fa:	d0 90 1c 03 	lds	r13, 0x031C
    36fe:	ca 0e       	add	r12, r26
    3700:	db 1e       	adc	r13, r27
    3702:	d0 92 1c 03 	sts	0x031C, r13
    3706:	c0 92 1b 03 	sts	0x031B, r12

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
    370a:	81 e4       	ldi	r24, 0x41	; 65
    370c:	c8 16       	cp	r12, r24
    370e:	86 e0       	ldi	r24, 0x06	; 6
    3710:	d8 06       	cpc	r13, r24
    3712:	0c f4       	brge	.+2      	; 0x3716 <start_horizontal_speed_control_right+0x6a>
    3714:	9e c0       	rjmp	.+316    	; 0x3852 <start_horizontal_speed_control_right+0x1a6>
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
    3716:	80 e4       	ldi	r24, 0x40	; 64
    3718:	96 e0       	ldi	r25, 0x06	; 6
    371a:	90 93 1c 03 	sts	0x031C, r25
    371e:	80 93 1b 03 	sts	0x031B, r24
    3722:	10 e8       	ldi	r17, 0x80	; 128
    3724:	c1 2e       	mov	r12, r17
    3726:	1c e0       	ldi	r17, 0x0C	; 12
    3728:	d1 2e       	mov	r13, r17
    372a:	e1 2c       	mov	r14, r1
    372c:	f1 2c       	mov	r15, r1
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
	}		

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed long int)((*pwm_right) << 3);
    372e:	00 81       	ld	r16, Z
    3730:	11 81       	ldd	r17, Z+1	; 0x01
	pwm_right_speed_controller += (signed long int)(delta_right_speed_current*P_HORIZONTAL);
    3732:	cd 01       	movw	r24, r26
    3734:	88 0f       	add	r24, r24
    3736:	99 1f       	adc	r25, r25
    3738:	8a 0f       	add	r24, r26
    373a:	9b 1f       	adc	r25, r27
    373c:	9c 01       	movw	r18, r24
    373e:	22 0f       	add	r18, r18
    3740:	33 1f       	adc	r19, r19
    3742:	22 0f       	add	r18, r18
    3744:	33 1f       	adc	r19, r19
    3746:	28 0f       	add	r18, r24
    3748:	39 1f       	adc	r19, r25
    374a:	44 27       	eor	r20, r20
    374c:	37 fd       	sbrc	r19, 7
    374e:	40 95       	com	r20
    3750:	54 2f       	mov	r21, r20
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
	}		

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed long int)((*pwm_right) << 3);
    3752:	b8 01       	movw	r22, r16
    3754:	66 0f       	add	r22, r22
    3756:	77 1f       	adc	r23, r23
    3758:	66 0f       	add	r22, r22
    375a:	77 1f       	adc	r23, r23
    375c:	66 0f       	add	r22, r22
    375e:	77 1f       	adc	r23, r23
    3760:	88 27       	eor	r24, r24
    3762:	77 fd       	sbrc	r23, 7
    3764:	80 95       	com	r24
    3766:	98 2f       	mov	r25, r24
	pwm_right_speed_controller += (signed long int)(delta_right_speed_current*P_HORIZONTAL);
    3768:	26 0f       	add	r18, r22
    376a:	37 1f       	adc	r19, r23
    376c:	48 1f       	adc	r20, r24
    376e:	59 1f       	adc	r21, r25
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
    3770:	ac 1b       	sub	r26, r28
    3772:	bd 0b       	sbc	r27, r29
    3774:	cd 01       	movw	r24, r26
    3776:	88 0f       	add	r24, r24
    3778:	99 1f       	adc	r25, r25
    377a:	8a 0f       	add	r24, r26
    377c:	9b 1f       	adc	r25, r27
    377e:	aa 27       	eor	r26, r26
    3780:	97 fd       	sbrc	r25, 7
    3782:	a0 95       	com	r26
    3784:	ba 2f       	mov	r27, r26
    3786:	28 0f       	add	r18, r24
    3788:	39 1f       	adc	r19, r25
    378a:	4a 1f       	adc	r20, r26
    378c:	5b 1f       	adc	r21, r27
	pwm_right_speed_controller += (signed long int)(delta_right_speed_sum*I_HORIZONTAL);
    378e:	2c 0d       	add	r18, r12
    3790:	3d 1d       	adc	r19, r13
    3792:	4e 1d       	adc	r20, r14
    3794:	5f 1d       	adc	r21, r15
    3796:	20 93 11 03 	sts	0x0311, r18
    379a:	30 93 12 03 	sts	0x0312, r19
    379e:	40 93 13 03 	sts	0x0313, r20
    37a2:	50 93 14 03 	sts	0x0314, r21

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    37a6:	57 fd       	sbrc	r21, 7
    37a8:	7a c0       	rjmp	.+244    	; 0x389e <start_horizontal_speed_control_right+0x1f2>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    37aa:	12 16       	cp	r1, r18
    37ac:	13 06       	cpc	r1, r19
    37ae:	14 06       	cpc	r1, r20
    37b0:	15 06       	cpc	r1, r21
    37b2:	0c f0       	brlt	.+2      	; 0x37b6 <start_horizontal_speed_control_right+0x10a>
    37b4:	81 c0       	rjmp	.+258    	; 0x38b8 <start_horizontal_speed_control_right+0x20c>
    37b6:	17 fd       	sbrc	r17, 7
    37b8:	ad c0       	rjmp	.+346    	; 0x3914 <start_horizontal_speed_control_right+0x268>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    37ba:	21 3c       	cpi	r18, 0xC1	; 193
    37bc:	8d e5       	ldi	r24, 0x5D	; 93
    37be:	38 07       	cpc	r19, r24
    37c0:	80 e0       	ldi	r24, 0x00	; 0
    37c2:	48 07       	cpc	r20, r24
    37c4:	80 e0       	ldi	r24, 0x00	; 0
    37c6:	58 07       	cpc	r21, r24
    37c8:	0c f4       	brge	.+2      	; 0x37cc <start_horizontal_speed_control_right+0x120>
    37ca:	76 c0       	rjmp	.+236    	; 0x38b8 <start_horizontal_speed_control_right+0x20c>
    37cc:	80 ec       	ldi	r24, 0xC0	; 192
    37ce:	9d e5       	ldi	r25, 0x5D	; 93
    37d0:	a0 e0       	ldi	r26, 0x00	; 0
    37d2:	b0 e0       	ldi	r27, 0x00	; 0
    37d4:	80 93 11 03 	sts	0x0311, r24
    37d8:	90 93 12 03 	sts	0x0312, r25
    37dc:	a0 93 13 03 	sts	0x0313, r26
    37e0:	b0 93 14 03 	sts	0x0314, r27
    37e4:	2c ed       	ldi	r18, 0xDC	; 220
    37e6:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = (signed int)(pwm_right_speed_controller>>4);
    37e8:	31 83       	std	Z+1, r19	; 0x01
    37ea:	20 83       	st	Z, r18

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
    37ec:	80 91 f9 02 	lds	r24, 0x02F9
    37f0:	90 91 fa 02 	lds	r25, 0x02FA
    37f4:	18 16       	cp	r1, r24
    37f6:	19 06       	cpc	r1, r25
    37f8:	0c f0       	brlt	.+2      	; 0x37fc <start_horizontal_speed_control_right+0x150>
    37fa:	87 c0       	rjmp	.+270    	; 0x390a <start_horizontal_speed_control_right+0x25e>
		*pwm_right += 1;
    37fc:	2f 5f       	subi	r18, 0xFF	; 255
    37fe:	3f 4f       	sbci	r19, 0xFF	; 255
    3800:	31 83       	std	Z+1, r19	; 0x01
    3802:	20 83       	st	Z, r18
	} else {
		*pwm_right -= 1;
	}

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
    3804:	12 16       	cp	r1, r18
    3806:	13 06       	cpc	r1, r19
    3808:	0c f0       	brlt	.+2      	; 0x380c <start_horizontal_speed_control_right+0x160>
    380a:	6d c0       	rjmp	.+218    	; 0x38e6 <start_horizontal_speed_control_right+0x23a>
		*pwm_right += 30;
    380c:	22 5e       	subi	r18, 0xE2	; 226
    380e:	3f 4f       	sbci	r19, 0xFF	; 255
    3810:	31 83       	std	Z+1, r19	; 0x01
    3812:	20 83       	st	Z, r18
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    3814:	82 e0       	ldi	r24, 0x02	; 2
    3816:	20 30       	cpi	r18, 0x00	; 0
    3818:	38 07       	cpc	r19, r24
    381a:	0c f4       	brge	.+2      	; 0x381e <start_horizontal_speed_control_right+0x172>
    381c:	6c c0       	rjmp	.+216    	; 0x38f6 <start_horizontal_speed_control_right+0x24a>
    381e:	8f ef       	ldi	r24, 0xFF	; 255
    3820:	91 e0       	ldi	r25, 0x01	; 1
    3822:	91 83       	std	Z+1, r25	; 0x01
    3824:	80 83       	st	Z, r24
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    3826:	df 91       	pop	r29
    3828:	cf 91       	pop	r28
    382a:	1f 91       	pop	r17
    382c:	0f 91       	pop	r16
    382e:	ff 90       	pop	r15
    3830:	ef 90       	pop	r14
    3832:	df 90       	pop	r13
    3834:	cf 90       	pop	r12
    3836:	08 95       	ret
void start_horizontal_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    3838:	10 92 1c 03 	sts	0x031C, r1
    383c:	10 92 1b 03 	sts	0x031B, r1
		delta_right_speed_current = 0;
    3840:	10 92 3c 0b 	sts	0x0B3C, r1
    3844:	10 92 3b 0b 	sts	0x0B3B, r1
		delta_right_speed_prev = 0;
    3848:	10 92 d5 08 	sts	0x08D5, r1
    384c:	10 92 d4 08 	sts	0x08D4, r1
		return;
    3850:	ea cf       	rjmp	.-44     	; 0x3826 <start_horizontal_speed_control_right+0x17a>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    3852:	80 ec       	ldi	r24, 0xC0	; 192
    3854:	c8 16       	cp	r12, r24
    3856:	89 ef       	ldi	r24, 0xF9	; 249
    3858:	d8 06       	cpc	r13, r24
    385a:	d4 f4       	brge	.+52     	; 0x3890 <start_horizontal_speed_control_right+0x1e4>
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
    385c:	80 ec       	ldi	r24, 0xC0	; 192
    385e:	99 ef       	ldi	r25, 0xF9	; 249
    3860:	90 93 1c 03 	sts	0x031C, r25
    3864:	80 93 1b 03 	sts	0x031B, r24
    3868:	60 e8       	ldi	r22, 0x80	; 128
    386a:	c6 2e       	mov	r12, r22
    386c:	63 ef       	ldi	r22, 0xF3	; 243
    386e:	d6 2e       	mov	r13, r22
    3870:	6f ef       	ldi	r22, 0xFF	; 255
    3872:	e6 2e       	mov	r14, r22
    3874:	6f ef       	ldi	r22, 0xFF	; 255
    3876:	f6 2e       	mov	r15, r22
    3878:	5a cf       	rjmp	.-332    	; 0x372e <start_horizontal_speed_control_right+0x82>
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    387a:	a0 91 03 03 	lds	r26, 0x0303
    387e:	b0 91 04 03 	lds	r27, 0x0304
    3882:	a8 0f       	add	r26, r24
    3884:	b9 1f       	adc	r27, r25
    3886:	b0 93 3c 0b 	sts	0x0B3C, r27
    388a:	a0 93 3b 0b 	sts	0x0B3B, r26
    388e:	33 cf       	rjmp	.-410    	; 0x36f6 <start_horizontal_speed_control_right+0x4a>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    3890:	cc 0c       	add	r12, r12
    3892:	dd 1c       	adc	r13, r13
    3894:	ee 24       	eor	r14, r14
    3896:	d7 fc       	sbrc	r13, 7
    3898:	e0 94       	com	r14
    389a:	fe 2c       	mov	r15, r14
    389c:	48 cf       	rjmp	.-368    	; 0x372e <start_horizontal_speed_control_right+0x82>
	pwm_right_speed_controller += (signed long int)(delta_right_speed_current*P_HORIZONTAL);
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
	pwm_right_speed_controller += (signed long int)(delta_right_speed_sum*I_HORIZONTAL);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    389e:	17 fd       	sbrc	r17, 7
    38a0:	0b c0       	rjmp	.+22     	; 0x38b8 <start_horizontal_speed_control_right+0x20c>
		pwm_right_speed_controller = 0;
    38a2:	10 92 11 03 	sts	0x0311, r1
    38a6:	10 92 12 03 	sts	0x0312, r1
    38aa:	10 92 13 03 	sts	0x0313, r1
    38ae:	10 92 14 03 	sts	0x0314, r1
    38b2:	20 e0       	ldi	r18, 0x00	; 0
    38b4:	30 e0       	ldi	r19, 0x00	; 0
    38b6:	a9 01       	movw	r20, r18
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    38b8:	20 34       	cpi	r18, 0x40	; 64
    38ba:	82 ea       	ldi	r24, 0xA2	; 162
    38bc:	38 07       	cpc	r19, r24
    38be:	8f ef       	ldi	r24, 0xFF	; 255
    38c0:	48 07       	cpc	r20, r24
    38c2:	8f ef       	ldi	r24, 0xFF	; 255
    38c4:	58 07       	cpc	r21, r24
    38c6:	8c f5       	brge	.+98     	; 0x392a <start_horizontal_speed_control_right+0x27e>
    38c8:	80 e4       	ldi	r24, 0x40	; 64
    38ca:	92 ea       	ldi	r25, 0xA2	; 162
    38cc:	af ef       	ldi	r26, 0xFF	; 255
    38ce:	bf ef       	ldi	r27, 0xFF	; 255
    38d0:	80 93 11 03 	sts	0x0311, r24
    38d4:	90 93 12 03 	sts	0x0312, r25
    38d8:	a0 93 13 03 	sts	0x0313, r26
    38dc:	b0 93 14 03 	sts	0x0314, r27
    38e0:	24 e2       	ldi	r18, 0x24	; 36
    38e2:	3a ef       	ldi	r19, 0xFA	; 250
    38e4:	81 cf       	rjmp	.-254    	; 0x37e8 <start_horizontal_speed_control_right+0x13c>
	}

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
		*pwm_right += 30;
	} else if(*pwm_right < 0) {
    38e6:	21 15       	cp	r18, r1
    38e8:	31 05       	cpc	r19, r1
    38ea:	09 f4       	brne	.+2      	; 0x38ee <start_horizontal_speed_control_right+0x242>
    38ec:	9c cf       	rjmp	.-200    	; 0x3826 <start_horizontal_speed_control_right+0x17a>
		*pwm_right -= 30;
    38ee:	2e 51       	subi	r18, 0x1E	; 30
    38f0:	30 40       	sbci	r19, 0x00	; 0
    38f2:	31 83       	std	Z+1, r19	; 0x01
    38f4:	20 83       	st	Z, r18
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    38f6:	8e ef       	ldi	r24, 0xFE	; 254
    38f8:	21 30       	cpi	r18, 0x01	; 1
    38fa:	38 07       	cpc	r19, r24
    38fc:	0c f0       	brlt	.+2      	; 0x3900 <start_horizontal_speed_control_right+0x254>
    38fe:	93 cf       	rjmp	.-218    	; 0x3826 <start_horizontal_speed_control_right+0x17a>
    3900:	81 e0       	ldi	r24, 0x01	; 1
    3902:	9e ef       	ldi	r25, 0xFE	; 254
    3904:	91 83       	std	Z+1, r25	; 0x01
    3906:	80 83       	st	Z, r24
    3908:	8e cf       	rjmp	.-228    	; 0x3826 <start_horizontal_speed_control_right+0x17a>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
		*pwm_right += 1;
	} else {
		*pwm_right -= 1;
    390a:	21 50       	subi	r18, 0x01	; 1
    390c:	30 40       	sbci	r19, 0x00	; 0
    390e:	31 83       	std	Z+1, r19	; 0x01
    3910:	20 83       	st	Z, r18
    3912:	78 cf       	rjmp	.-272    	; 0x3804 <start_horizontal_speed_control_right+0x158>
	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    3914:	10 92 11 03 	sts	0x0311, r1
    3918:	10 92 12 03 	sts	0x0312, r1
    391c:	10 92 13 03 	sts	0x0313, r1
    3920:	10 92 14 03 	sts	0x0314, r1
    3924:	20 e0       	ldi	r18, 0x00	; 0
    3926:	30 e0       	ldi	r19, 0x00	; 0
    3928:	a9 01       	movw	r20, r18
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    392a:	14 e0       	ldi	r17, 0x04	; 4
    392c:	55 95       	asr	r21
    392e:	47 95       	ror	r20
    3930:	37 95       	ror	r19
    3932:	27 95       	ror	r18
    3934:	1a 95       	dec	r17
    3936:	d1 f7       	brne	.-12     	; 0x392c <start_horizontal_speed_control_right+0x280>
    3938:	57 cf       	rjmp	.-338    	; 0x37e8 <start_horizontal_speed_control_right+0x13c>

0000393a <start_horizontal_speed_control_left>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_left(signed int *pwm_left) {
    393a:	cf 92       	push	r12
    393c:	df 92       	push	r13
    393e:	ef 92       	push	r14
    3940:	ff 92       	push	r15
    3942:	0f 93       	push	r16
    3944:	1f 93       	push	r17
    3946:	cf 93       	push	r28
    3948:	df 93       	push	r29
    394a:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
    394c:	80 81       	ld	r24, Z
    394e:	91 81       	ldd	r25, Z+1	; 0x01
    3950:	00 97       	sbiw	r24, 0x00	; 0
    3952:	09 f4       	brne	.+2      	; 0x3956 <start_horizontal_speed_control_left+0x1c>
    3954:	b8 c0       	rjmp	.+368    	; 0x3ac6 <start_horizontal_speed_control_left+0x18c>
		delta_left_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    3956:	c0 91 87 05 	lds	r28, 0x0587
    395a:	d0 91 88 05 	lds	r29, 0x0588
    395e:	d0 93 9d 09 	sts	0x099D, r29
    3962:	c0 93 9c 09 	sts	0x099C, r28
	if(*pwm_left >= 0) {
    3966:	80 81       	ld	r24, Z
    3968:	91 81       	ldd	r25, Z+1	; 0x01
    396a:	97 fd       	sbrc	r25, 7
    396c:	cd c0       	rjmp	.+410    	; 0x3b08 <start_horizontal_speed_control_left+0x1ce>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    396e:	20 91 01 03 	lds	r18, 0x0301
    3972:	30 91 02 03 	lds	r19, 0x0302
    3976:	dc 01       	movw	r26, r24
    3978:	a2 1b       	sub	r26, r18
    397a:	b3 0b       	sbc	r27, r19
    397c:	b0 93 88 05 	sts	0x0588, r27
    3980:	a0 93 87 05 	sts	0x0587, r26
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;
    3984:	c0 90 19 03 	lds	r12, 0x0319
    3988:	d0 90 1a 03 	lds	r13, 0x031A
    398c:	ca 0e       	add	r12, r26
    398e:	db 1e       	adc	r13, r27
    3990:	d0 92 1a 03 	sts	0x031A, r13
    3994:	c0 92 19 03 	sts	0x0319, r12

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
    3998:	81 e4       	ldi	r24, 0x41	; 65
    399a:	c8 16       	cp	r12, r24
    399c:	86 e0       	ldi	r24, 0x06	; 6
    399e:	d8 06       	cpc	r13, r24
    39a0:	0c f4       	brge	.+2      	; 0x39a4 <start_horizontal_speed_control_left+0x6a>
    39a2:	9e c0       	rjmp	.+316    	; 0x3ae0 <start_horizontal_speed_control_left+0x1a6>
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
    39a4:	80 e4       	ldi	r24, 0x40	; 64
    39a6:	96 e0       	ldi	r25, 0x06	; 6
    39a8:	90 93 1a 03 	sts	0x031A, r25
    39ac:	80 93 19 03 	sts	0x0319, r24
    39b0:	10 e8       	ldi	r17, 0x80	; 128
    39b2:	c1 2e       	mov	r12, r17
    39b4:	1c e0       	ldi	r17, 0x0C	; 12
    39b6:	d1 2e       	mov	r13, r17
    39b8:	e1 2c       	mov	r14, r1
    39ba:	f1 2c       	mov	r15, r1
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed long int)((*pwm_left) << 3);
    39bc:	00 81       	ld	r16, Z
    39be:	11 81       	ldd	r17, Z+1	; 0x01
	pwm_left_speed_controller += (signed long int)(delta_left_speed_current*P_HORIZONTAL);
    39c0:	cd 01       	movw	r24, r26
    39c2:	88 0f       	add	r24, r24
    39c4:	99 1f       	adc	r25, r25
    39c6:	8a 0f       	add	r24, r26
    39c8:	9b 1f       	adc	r25, r27
    39ca:	9c 01       	movw	r18, r24
    39cc:	22 0f       	add	r18, r18
    39ce:	33 1f       	adc	r19, r19
    39d0:	22 0f       	add	r18, r18
    39d2:	33 1f       	adc	r19, r19
    39d4:	28 0f       	add	r18, r24
    39d6:	39 1f       	adc	r19, r25
    39d8:	44 27       	eor	r20, r20
    39da:	37 fd       	sbrc	r19, 7
    39dc:	40 95       	com	r20
    39de:	54 2f       	mov	r21, r20
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed long int)((*pwm_left) << 3);
    39e0:	b8 01       	movw	r22, r16
    39e2:	66 0f       	add	r22, r22
    39e4:	77 1f       	adc	r23, r23
    39e6:	66 0f       	add	r22, r22
    39e8:	77 1f       	adc	r23, r23
    39ea:	66 0f       	add	r22, r22
    39ec:	77 1f       	adc	r23, r23
    39ee:	88 27       	eor	r24, r24
    39f0:	77 fd       	sbrc	r23, 7
    39f2:	80 95       	com	r24
    39f4:	98 2f       	mov	r25, r24
	pwm_left_speed_controller += (signed long int)(delta_left_speed_current*P_HORIZONTAL);
    39f6:	26 0f       	add	r18, r22
    39f8:	37 1f       	adc	r19, r23
    39fa:	48 1f       	adc	r20, r24
    39fc:	59 1f       	adc	r21, r25
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
    39fe:	ac 1b       	sub	r26, r28
    3a00:	bd 0b       	sbc	r27, r29
    3a02:	cd 01       	movw	r24, r26
    3a04:	88 0f       	add	r24, r24
    3a06:	99 1f       	adc	r25, r25
    3a08:	8a 0f       	add	r24, r26
    3a0a:	9b 1f       	adc	r25, r27
    3a0c:	aa 27       	eor	r26, r26
    3a0e:	97 fd       	sbrc	r25, 7
    3a10:	a0 95       	com	r26
    3a12:	ba 2f       	mov	r27, r26
    3a14:	28 0f       	add	r18, r24
    3a16:	39 1f       	adc	r19, r25
    3a18:	4a 1f       	adc	r20, r26
    3a1a:	5b 1f       	adc	r21, r27
	pwm_left_speed_controller += (signed long int)(delta_left_speed_sum*I_HORIZONTAL);
    3a1c:	2c 0d       	add	r18, r12
    3a1e:	3d 1d       	adc	r19, r13
    3a20:	4e 1d       	adc	r20, r14
    3a22:	5f 1d       	adc	r21, r15
    3a24:	20 93 15 03 	sts	0x0315, r18
    3a28:	30 93 16 03 	sts	0x0316, r19
    3a2c:	40 93 17 03 	sts	0x0317, r20
    3a30:	50 93 18 03 	sts	0x0318, r21

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    3a34:	57 fd       	sbrc	r21, 7
    3a36:	7a c0       	rjmp	.+244    	; 0x3b2c <start_horizontal_speed_control_left+0x1f2>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    3a38:	12 16       	cp	r1, r18
    3a3a:	13 06       	cpc	r1, r19
    3a3c:	14 06       	cpc	r1, r20
    3a3e:	15 06       	cpc	r1, r21
    3a40:	0c f0       	brlt	.+2      	; 0x3a44 <start_horizontal_speed_control_left+0x10a>
    3a42:	81 c0       	rjmp	.+258    	; 0x3b46 <start_horizontal_speed_control_left+0x20c>
    3a44:	17 fd       	sbrc	r17, 7
    3a46:	ad c0       	rjmp	.+346    	; 0x3ba2 <start_horizontal_speed_control_left+0x268>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    3a48:	21 3c       	cpi	r18, 0xC1	; 193
    3a4a:	8d e5       	ldi	r24, 0x5D	; 93
    3a4c:	38 07       	cpc	r19, r24
    3a4e:	80 e0       	ldi	r24, 0x00	; 0
    3a50:	48 07       	cpc	r20, r24
    3a52:	80 e0       	ldi	r24, 0x00	; 0
    3a54:	58 07       	cpc	r21, r24
    3a56:	0c f4       	brge	.+2      	; 0x3a5a <start_horizontal_speed_control_left+0x120>
    3a58:	76 c0       	rjmp	.+236    	; 0x3b46 <start_horizontal_speed_control_left+0x20c>
    3a5a:	80 ec       	ldi	r24, 0xC0	; 192
    3a5c:	9d e5       	ldi	r25, 0x5D	; 93
    3a5e:	a0 e0       	ldi	r26, 0x00	; 0
    3a60:	b0 e0       	ldi	r27, 0x00	; 0
    3a62:	80 93 15 03 	sts	0x0315, r24
    3a66:	90 93 16 03 	sts	0x0316, r25
    3a6a:	a0 93 17 03 	sts	0x0317, r26
    3a6e:	b0 93 18 03 	sts	0x0318, r27
    3a72:	2c ed       	ldi	r18, 0xDC	; 220
    3a74:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = (signed int)(pwm_left_speed_controller>>4);
    3a76:	31 83       	std	Z+1, r19	; 0x01
    3a78:	20 83       	st	Z, r18

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
    3a7a:	80 91 fb 02 	lds	r24, 0x02FB
    3a7e:	90 91 fc 02 	lds	r25, 0x02FC
    3a82:	18 16       	cp	r1, r24
    3a84:	19 06       	cpc	r1, r25
    3a86:	0c f0       	brlt	.+2      	; 0x3a8a <start_horizontal_speed_control_left+0x150>
    3a88:	87 c0       	rjmp	.+270    	; 0x3b98 <start_horizontal_speed_control_left+0x25e>
		*pwm_left += 1;
    3a8a:	2f 5f       	subi	r18, 0xFF	; 255
    3a8c:	3f 4f       	sbci	r19, 0xFF	; 255
    3a8e:	31 83       	std	Z+1, r19	; 0x01
    3a90:	20 83       	st	Z, r18
	} else {
		*pwm_left -= 1;
	}

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
    3a92:	12 16       	cp	r1, r18
    3a94:	13 06       	cpc	r1, r19
    3a96:	0c f0       	brlt	.+2      	; 0x3a9a <start_horizontal_speed_control_left+0x160>
    3a98:	6d c0       	rjmp	.+218    	; 0x3b74 <start_horizontal_speed_control_left+0x23a>
		*pwm_left += 30;
    3a9a:	22 5e       	subi	r18, 0xE2	; 226
    3a9c:	3f 4f       	sbci	r19, 0xFF	; 255
    3a9e:	31 83       	std	Z+1, r19	; 0x01
    3aa0:	20 83       	st	Z, r18
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    3aa2:	82 e0       	ldi	r24, 0x02	; 2
    3aa4:	20 30       	cpi	r18, 0x00	; 0
    3aa6:	38 07       	cpc	r19, r24
    3aa8:	0c f4       	brge	.+2      	; 0x3aac <start_horizontal_speed_control_left+0x172>
    3aaa:	6c c0       	rjmp	.+216    	; 0x3b84 <start_horizontal_speed_control_left+0x24a>
    3aac:	8f ef       	ldi	r24, 0xFF	; 255
    3aae:	91 e0       	ldi	r25, 0x01	; 1
    3ab0:	91 83       	std	Z+1, r25	; 0x01
    3ab2:	80 83       	st	Z, r24
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);

}
    3ab4:	df 91       	pop	r29
    3ab6:	cf 91       	pop	r28
    3ab8:	1f 91       	pop	r17
    3aba:	0f 91       	pop	r16
    3abc:	ff 90       	pop	r15
    3abe:	ef 90       	pop	r14
    3ac0:	df 90       	pop	r13
    3ac2:	cf 90       	pop	r12
    3ac4:	08 95       	ret
void start_horizontal_speed_control_left(signed int *pwm_left) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    3ac6:	10 92 1a 03 	sts	0x031A, r1
    3aca:	10 92 19 03 	sts	0x0319, r1
		delta_left_speed_current = 0;
    3ace:	10 92 88 05 	sts	0x0588, r1
    3ad2:	10 92 87 05 	sts	0x0587, r1
		delta_left_speed_prev = 0;
    3ad6:	10 92 9d 09 	sts	0x099D, r1
    3ada:	10 92 9c 09 	sts	0x099C, r1
		return;
    3ade:	ea cf       	rjmp	.-44     	; 0x3ab4 <start_horizontal_speed_control_left+0x17a>
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    3ae0:	80 ec       	ldi	r24, 0xC0	; 192
    3ae2:	c8 16       	cp	r12, r24
    3ae4:	89 ef       	ldi	r24, 0xF9	; 249
    3ae6:	d8 06       	cpc	r13, r24
    3ae8:	d4 f4       	brge	.+52     	; 0x3b1e <start_horizontal_speed_control_left+0x1e4>
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
    3aea:	80 ec       	ldi	r24, 0xC0	; 192
    3aec:	99 ef       	ldi	r25, 0xF9	; 249
    3aee:	90 93 1a 03 	sts	0x031A, r25
    3af2:	80 93 19 03 	sts	0x0319, r24
    3af6:	60 e8       	ldi	r22, 0x80	; 128
    3af8:	c6 2e       	mov	r12, r22
    3afa:	63 ef       	ldi	r22, 0xF3	; 243
    3afc:	d6 2e       	mov	r13, r22
    3afe:	6f ef       	ldi	r22, 0xFF	; 255
    3b00:	e6 2e       	mov	r14, r22
    3b02:	6f ef       	ldi	r22, 0xFF	; 255
    3b04:	f6 2e       	mov	r15, r22
    3b06:	5a cf       	rjmp	.-332    	; 0x39bc <start_horizontal_speed_control_left+0x82>
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    3b08:	a0 91 01 03 	lds	r26, 0x0301
    3b0c:	b0 91 02 03 	lds	r27, 0x0302
    3b10:	a8 0f       	add	r26, r24
    3b12:	b9 1f       	adc	r27, r25
    3b14:	b0 93 88 05 	sts	0x0588, r27
    3b18:	a0 93 87 05 	sts	0x0587, r26
    3b1c:	33 cf       	rjmp	.-410    	; 0x3984 <start_horizontal_speed_control_left+0x4a>
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    3b1e:	cc 0c       	add	r12, r12
    3b20:	dd 1c       	adc	r13, r13
    3b22:	ee 24       	eor	r14, r14
    3b24:	d7 fc       	sbrc	r13, 7
    3b26:	e0 94       	com	r14
    3b28:	fe 2c       	mov	r15, r14
    3b2a:	48 cf       	rjmp	.-368    	; 0x39bc <start_horizontal_speed_control_left+0x82>
	pwm_left_speed_controller += (signed long int)(delta_left_speed_current*P_HORIZONTAL);
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
	pwm_left_speed_controller += (signed long int)(delta_left_speed_sum*I_HORIZONTAL);

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    3b2c:	17 fd       	sbrc	r17, 7
    3b2e:	0b c0       	rjmp	.+22     	; 0x3b46 <start_horizontal_speed_control_left+0x20c>
		pwm_left_speed_controller = 0;
    3b30:	10 92 15 03 	sts	0x0315, r1
    3b34:	10 92 16 03 	sts	0x0316, r1
    3b38:	10 92 17 03 	sts	0x0317, r1
    3b3c:	10 92 18 03 	sts	0x0318, r1
    3b40:	20 e0       	ldi	r18, 0x00	; 0
    3b42:	30 e0       	ldi	r19, 0x00	; 0
    3b44:	a9 01       	movw	r20, r18
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    3b46:	20 34       	cpi	r18, 0x40	; 64
    3b48:	82 ea       	ldi	r24, 0xA2	; 162
    3b4a:	38 07       	cpc	r19, r24
    3b4c:	8f ef       	ldi	r24, 0xFF	; 255
    3b4e:	48 07       	cpc	r20, r24
    3b50:	8f ef       	ldi	r24, 0xFF	; 255
    3b52:	58 07       	cpc	r21, r24
    3b54:	8c f5       	brge	.+98     	; 0x3bb8 <start_horizontal_speed_control_left+0x27e>
    3b56:	80 e4       	ldi	r24, 0x40	; 64
    3b58:	92 ea       	ldi	r25, 0xA2	; 162
    3b5a:	af ef       	ldi	r26, 0xFF	; 255
    3b5c:	bf ef       	ldi	r27, 0xFF	; 255
    3b5e:	80 93 15 03 	sts	0x0315, r24
    3b62:	90 93 16 03 	sts	0x0316, r25
    3b66:	a0 93 17 03 	sts	0x0317, r26
    3b6a:	b0 93 18 03 	sts	0x0318, r27
    3b6e:	24 e2       	ldi	r18, 0x24	; 36
    3b70:	3a ef       	ldi	r19, 0xFA	; 250
    3b72:	81 cf       	rjmp	.-254    	; 0x3a76 <start_horizontal_speed_control_left+0x13c>
	}

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
		*pwm_left += 30;
	} else if(*pwm_left < 0) {
    3b74:	21 15       	cp	r18, r1
    3b76:	31 05       	cpc	r19, r1
    3b78:	09 f4       	brne	.+2      	; 0x3b7c <start_horizontal_speed_control_left+0x242>
    3b7a:	9c cf       	rjmp	.-200    	; 0x3ab4 <start_horizontal_speed_control_left+0x17a>
		*pwm_left -= 30;
    3b7c:	2e 51       	subi	r18, 0x1E	; 30
    3b7e:	30 40       	sbci	r19, 0x00	; 0
    3b80:	31 83       	std	Z+1, r19	; 0x01
    3b82:	20 83       	st	Z, r18
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    3b84:	8e ef       	ldi	r24, 0xFE	; 254
    3b86:	21 30       	cpi	r18, 0x01	; 1
    3b88:	38 07       	cpc	r19, r24
    3b8a:	0c f0       	brlt	.+2      	; 0x3b8e <start_horizontal_speed_control_left+0x254>
    3b8c:	93 cf       	rjmp	.-218    	; 0x3ab4 <start_horizontal_speed_control_left+0x17a>
    3b8e:	81 e0       	ldi	r24, 0x01	; 1
    3b90:	9e ef       	ldi	r25, 0xFE	; 254
    3b92:	91 83       	std	Z+1, r25	; 0x01
    3b94:	80 83       	st	Z, r24
    3b96:	8e cf       	rjmp	.-228    	; 0x3ab4 <start_horizontal_speed_control_left+0x17a>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
		*pwm_left += 1;
	} else {
		*pwm_left -= 1;
    3b98:	21 50       	subi	r18, 0x01	; 1
    3b9a:	30 40       	sbci	r19, 0x00	; 0
    3b9c:	31 83       	std	Z+1, r19	; 0x01
    3b9e:	20 83       	st	Z, r18
    3ba0:	78 cf       	rjmp	.-272    	; 0x3a92 <start_horizontal_speed_control_left+0x158>
	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    3ba2:	10 92 15 03 	sts	0x0315, r1
    3ba6:	10 92 16 03 	sts	0x0316, r1
    3baa:	10 92 17 03 	sts	0x0317, r1
    3bae:	10 92 18 03 	sts	0x0318, r1
    3bb2:	20 e0       	ldi	r18, 0x00	; 0
    3bb4:	30 e0       	ldi	r19, 0x00	; 0
    3bb6:	a9 01       	movw	r20, r18
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    3bb8:	04 e0       	ldi	r16, 0x04	; 4
    3bba:	55 95       	asr	r21
    3bbc:	47 95       	ror	r20
    3bbe:	37 95       	ror	r19
    3bc0:	27 95       	ror	r18
    3bc2:	0a 95       	dec	r16
    3bc4:	d1 f7       	brne	.-12     	; 0x3bba <start_horizontal_speed_control_left+0x280>
    3bc6:	57 cf       	rjmp	.-338    	; 0x3a76 <start_horizontal_speed_control_left+0x13c>

00003bc8 <initPortsIO>:
#include "ports_io.h"


void initPortsIO(void) {

	MCUCR |= (1 << PUD);	// pull-up disable for all ports
    3bc8:	85 b7       	in	r24, 0x35	; 53
    3bca:	80 61       	ori	r24, 0x10	; 16
    3bcc:	85 bf       	out	0x35, r24	; 53

	DDRA = 0xFF;			// proximity pulses as output
    3bce:	8f ef       	ldi	r24, 0xFF	; 255
    3bd0:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;			// proximity pulses turned off
    3bd2:	12 b8       	out	0x02, r1	; 2
	
	DDRB = 0xF7;			// pwm for led r/g/b as output; CE, MOSI, SCK, SS as output (master) 
    3bd4:	97 ef       	ldi	r25, 0xF7	; 247
    3bd6:	94 b9       	out	0x04, r25	; 4
	PORTB = 0xE0;			// r,g,b leds turned off on high state
    3bd8:	90 ee       	ldi	r25, 0xE0	; 224
    3bda:	95 b9       	out	0x05, r25	; 5

	DDRC = 0xF0;			// selector as input; IR leds as output; sens-enable, sleep as output
    3bdc:	90 ef       	ldi	r25, 0xF0	; 240
    3bde:	97 b9       	out	0x07, r25	; 7
	PORTC = 0xB0;			// sleep = 1 (no sleep), sense_enable=0, IR leds = 1
    3be0:	90 eb       	ldi	r25, 0xB0	; 176
    3be2:	98 b9       	out	0x08, r25	; 8

	DDRD = 0xFC;			// all pins to output; when usart and i2c peripherals are activated they change the pins direction accordingly
    3be4:	9c ef       	ldi	r25, 0xFC	; 252
    3be6:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0x03;			// default for unused pins is 0
    3be8:	93 e0       	ldi	r25, 0x03	; 3
    3bea:	9b b9       	out	0x0b, r25	; 11

	DDRE = 0xFF;			// all pins to output (pwm and dir for motor right as output; when usart is activated it changes the pins direction accordingly)
    3bec:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    3bee:	1e b8       	out	0x0e, r1	; 14

	DDRF = 0x00;			// adc channel pins as input		
    3bf0:	10 ba       	out	0x10, r1	; 16

	DDRG = 0xFF;			// unused pins as output
    3bf2:	83 bb       	out	0x13, r24	; 19
	if(hardwareRevision == HW_REV_3_0) {
    3bf4:	80 91 67 04 	lds	r24, 0x0467
    3bf8:	88 23       	and	r24, r24
    3bfa:	e1 f0       	breq	.+56     	; 0x3c34 <initPortsIO+0x6c>
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    3bfc:	81 30       	cpi	r24, 0x01	; 1
    3bfe:	d1 f0       	breq	.+52     	; 0x3c34 <initPortsIO+0x6c>
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    3c00:	82 30       	cpi	r24, 0x02	; 2
    3c02:	51 f1       	breq	.+84     	; 0x3c58 <initPortsIO+0x90>
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
	}	

	DDRH = 0xFF;			// all pins to output; when usart is activated it changes the pins direction accordingly
    3c04:	9f ef       	ldi	r25, 0xFF	; 255
    3c06:	90 93 01 01 	sts	0x0101, r25
	PORTH = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    3c0a:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
    3c0e:	9f e0       	ldi	r25, 0x0F	; 15
    3c10:	90 93 04 01 	sts	0x0104, r25
	if(hardwareRevision == HW_REV_3_0) {
    3c14:	88 23       	and	r24, r24
    3c16:	a9 f4       	brne	.+42     	; 0x3c42 <initPortsIO+0x7a>
		PORTJ &= 0x00;		// cliff pulse turned off
    3c18:	90 91 05 01 	lds	r25, 0x0105
    3c1c:	10 92 05 01 	sts	0x0105, r1
	if(hardwareRevision == HW_REV_3_1) {
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.1)"
	}	

	DDRK = 0x00;			// adc channel pins as input
    3c20:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;			// all pins to output
    3c24:	9f ef       	ldi	r25, 0xFF	; 255
    3c26:	90 93 0a 01 	sts	0x010A, r25
	if(hardwareRevision == HW_REV_3_0) {
    3c2a:	88 23       	and	r24, r24
    3c2c:	29 f4       	brne	.+10     	; 0x3c38 <initPortsIO+0x70>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
    3c2e:	10 92 0b 01 	sts	0x010B, r1
    3c32:	08 95       	ret
	DDRG = 0xFF;			// unused pins as output
	if(hardwareRevision == HW_REV_3_0) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
    3c34:	14 ba       	out	0x14, r1	; 20
    3c36:	e6 cf       	rjmp	.-52     	; 0x3c04 <initPortsIO+0x3c>

	DDRL = 0xFF;			// all pins to output
	if(hardwareRevision == HW_REV_3_0) {
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
    3c38:	81 30       	cpi	r24, 0x01	; 1
    3c3a:	c9 f3       	breq	.-14     	; 0x3c2e <initPortsIO+0x66>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    3c3c:	82 30       	cpi	r24, 0x02	; 2
    3c3e:	41 f0       	breq	.+16     	; 0x3c50 <initPortsIO+0x88>
    3c40:	08 95       	ret
	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
	if(hardwareRevision == HW_REV_3_0) {
		PORTJ &= 0x00;		// cliff pulse turned off
		//#warning "Normal logic for ground sensors (hw rev 3.0)"
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    3c42:	81 30       	cpi	r24, 0x01	; 1
    3c44:	11 f0       	breq	.+4      	; 0x3c4a <initPortsIO+0x82>
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.0.1)"
	}
	if(hardwareRevision == HW_REV_3_1) {
    3c46:	82 30       	cpi	r24, 0x02	; 2
    3c48:	59 f7       	brne	.-42     	; 0x3c20 <initPortsIO+0x58>
		PORTJ = 0x0F;
    3c4a:	90 93 05 01 	sts	0x0105, r25
    3c4e:	e8 cf       	rjmp	.-48     	; 0x3c20 <initPortsIO+0x58>
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTL = 0xF7;		// pwm (unused) to 0, leds turned off on high state
    3c50:	87 ef       	ldi	r24, 0xF7	; 247
    3c52:	80 93 0b 01 	sts	0x010B, r24
    3c56:	08 95       	ret
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
    3c58:	98 e0       	ldi	r25, 0x08	; 8
    3c5a:	94 bb       	out	0x14, r25	; 20
    3c5c:	d3 cf       	rjmp	.-90     	; 0x3c04 <initPortsIO+0x3c>

00003c5e <i2c_close>:

/* I2C clock in Hz */
#define SCL_CLOCK  440000L

void i2c_close() {
	TWBR = 0x00;
    3c5e:	10 92 b8 00 	sts	0x00B8, r1
	TWCR = 0x00;
    3c62:	10 92 bc 00 	sts	0x00BC, r1
}
    3c66:	08 95       	ret

00003c68 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
    sbi(PORTD, 0);
    3c68:	58 9a       	sbi	0x0b, 0	; 11
    sbi(PORTD, 1);
    3c6a:	59 9a       	sbi	0x0b, 1	; 11

  TWSR = 0;                         /* no prescaler */
    3c6c:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    3c70:	81 e0       	ldi	r24, 0x01	; 1
    3c72:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
    3c76:	08 95       	ret

00003c78 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    3c78:	94 ea       	ldi	r25, 0xA4	; 164
    3c7a:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    3c7e:	90 91 bc 00 	lds	r25, 0x00BC
    3c82:	97 ff       	sbrs	r25, 7
    3c84:	fc cf       	rjmp	.-8      	; 0x3c7e <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    3c86:	90 91 b9 00 	lds	r25, 0x00B9
    3c8a:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    3c8c:	98 30       	cpi	r25, 0x08	; 8
    3c8e:	21 f0       	breq	.+8      	; 0x3c98 <i2c_start+0x20>
    3c90:	90 31       	cpi	r25, 0x10	; 16
    3c92:	11 f0       	breq	.+4      	; 0x3c98 <i2c_start+0x20>
		//usartTransmit(twst);
		return 1;
    3c94:	81 e0       	ldi	r24, 0x01	; 1
    3c96:	08 95       	ret
	}

	// send device address
	TWDR = address;
    3c98:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    3c9c:	84 e8       	ldi	r24, 0x84	; 132
    3c9e:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    3ca2:	80 91 bc 00 	lds	r24, 0x00BC
    3ca6:	87 ff       	sbrs	r24, 7
    3ca8:	fc cf       	rjmp	.-8      	; 0x3ca2 <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    3caa:	90 91 b9 00 	lds	r25, 0x00B9
    3cae:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    3cb0:	98 31       	cpi	r25, 0x18	; 24
    3cb2:	21 f0       	breq	.+8      	; 0x3cbc <i2c_start+0x44>

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    3cb4:	81 e0       	ldi	r24, 0x01	; 1
    3cb6:	90 34       	cpi	r25, 0x40	; 64
    3cb8:	19 f0       	breq	.+6      	; 0x3cc0 <i2c_start+0x48>
		return 1;
	}

	return 0;

}/* i2c_start */
    3cba:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    3cbc:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    3cbe:	08 95       	ret

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    3cc0:	80 e0       	ldi	r24, 0x00	; 0
    3cc2:	08 95       	ret

00003cc4 <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    3cc4:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    3cc6:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    3cc8:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    3cca:	20 93 bc 00 	sts	0x00BC, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    3cce:	90 91 bc 00 	lds	r25, 0x00BC
    3cd2:	97 ff       	sbrs	r25, 7
    3cd4:	fc cf       	rjmp	.-8      	; 0x3cce <i2c_start_wait+0xa>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    3cd6:	90 91 b9 00 	lds	r25, 0x00B9
    3cda:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    3cdc:	98 30       	cpi	r25, 0x08	; 8
    3cde:	11 f0       	breq	.+4      	; 0x3ce4 <i2c_start_wait+0x20>
    3ce0:	90 31       	cpi	r25, 0x10	; 16
    3ce2:	99 f7       	brne	.-26     	; 0x3cca <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    3ce4:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    3ce8:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    3cec:	90 91 bc 00 	lds	r25, 0x00BC
    3cf0:	97 ff       	sbrs	r25, 7
    3cf2:	fc cf       	rjmp	.-8      	; 0x3cec <i2c_start_wait+0x28>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    3cf4:	90 91 b9 00 	lds	r25, 0x00B9
    3cf8:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    3cfa:	90 32       	cpi	r25, 0x20	; 32
    3cfc:	19 f0       	breq	.+6      	; 0x3d04 <i2c_start_wait+0x40>
    3cfe:	98 35       	cpi	r25, 0x58	; 88
    3d00:	09 f0       	breq	.+2      	; 0x3d04 <i2c_start_wait+0x40>
    3d02:	08 95       	ret
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    3d04:	40 93 bc 00 	sts	0x00BC, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    3d08:	90 91 bc 00 	lds	r25, 0x00BC
    3d0c:	94 fd       	sbrc	r25, 4
    3d0e:	fc cf       	rjmp	.-8      	; 0x3d08 <i2c_start_wait+0x44>
    3d10:	dc cf       	rjmp	.-72     	; 0x3cca <i2c_start_wait+0x6>

00003d12 <i2c_rep_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    3d12:	94 ea       	ldi	r25, 0xA4	; 164
    3d14:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    3d18:	90 91 bc 00 	lds	r25, 0x00BC
    3d1c:	97 ff       	sbrs	r25, 7
    3d1e:	fc cf       	rjmp	.-8      	; 0x3d18 <i2c_rep_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    3d20:	90 91 b9 00 	lds	r25, 0x00B9
    3d24:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    3d26:	98 30       	cpi	r25, 0x08	; 8
    3d28:	21 f0       	breq	.+8      	; 0x3d32 <i2c_rep_start+0x20>
    3d2a:	90 31       	cpi	r25, 0x10	; 16
    3d2c:	11 f0       	breq	.+4      	; 0x3d32 <i2c_rep_start+0x20>
		//usartTransmit(twst);
		return 1;
    3d2e:	81 e0       	ldi	r24, 0x01	; 1
    3d30:	08 95       	ret
	}

	// send device address
	TWDR = address;
    3d32:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    3d36:	84 e8       	ldi	r24, 0x84	; 132
    3d38:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    3d3c:	80 91 bc 00 	lds	r24, 0x00BC
    3d40:	87 ff       	sbrs	r24, 7
    3d42:	fc cf       	rjmp	.-8      	; 0x3d3c <i2c_rep_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    3d44:	90 91 b9 00 	lds	r25, 0x00B9
    3d48:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    3d4a:	98 31       	cpi	r25, 0x18	; 24
    3d4c:	21 f0       	breq	.+8      	; 0x3d56 <i2c_rep_start+0x44>
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    3d4e:	81 e0       	ldi	r24, 0x01	; 1
    3d50:	90 34       	cpi	r25, 0x40	; 64
    3d52:	19 f0       	breq	.+6      	; 0x3d5a <i2c_rep_start+0x48>
{
    return i2c_start( address );

}/* i2c_rep_start */
    3d54:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    3d56:	80 e0       	ldi	r24, 0x00	; 0
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    3d58:	08 95       	ret
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    3d5a:	80 e0       	ldi	r24, 0x00	; 0
    3d5c:	08 95       	ret

00003d5e <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    3d5e:	84 e9       	ldi	r24, 0x94	; 148
    3d60:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    3d64:	80 91 bc 00 	lds	r24, 0x00BC
    3d68:	84 fd       	sbrc	r24, 4
    3d6a:	fc cf       	rjmp	.-8      	; 0x3d64 <i2c_stop+0x6>

}/* i2c_stop */
    3d6c:	08 95       	ret

00003d6e <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    3d6e:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    3d72:	84 e8       	ldi	r24, 0x84	; 132
    3d74:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    3d78:	80 91 bc 00 	lds	r24, 0x00BC
    3d7c:	87 ff       	sbrs	r24, 7
    3d7e:	fc cf       	rjmp	.-8      	; 0x3d78 <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    3d80:	90 91 b9 00 	lds	r25, 0x00B9
    3d84:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    3d86:	81 e0       	ldi	r24, 0x01	; 1
    3d88:	98 32       	cpi	r25, 0x28	; 40
    3d8a:	09 f0       	breq	.+2      	; 0x3d8e <i2c_write+0x20>
	return 0;

}/* i2c_write */
    3d8c:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
    3d8e:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
    3d90:	08 95       	ret

00003d92 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    3d92:	84 ec       	ldi	r24, 0xC4	; 196
    3d94:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    3d98:	80 91 bc 00 	lds	r24, 0x00BC
    3d9c:	87 ff       	sbrs	r24, 7
    3d9e:	fc cf       	rjmp	.-8      	; 0x3d98 <i2c_readAck+0x6>

    return TWDR;
    3da0:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    3da4:	08 95       	ret

00003da6 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    3da6:	84 e8       	ldi	r24, 0x84	; 132
    3da8:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    3dac:	80 91 bc 00 	lds	r24, 0x00BC
    3db0:	87 ff       	sbrs	r24, 7
    3db2:	fc cf       	rjmp	.-8      	; 0x3dac <i2c_readNak+0x6>
	
    return TWDR;
    3db4:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    3db8:	08 95       	ret

00003dba <initUsart0>:
	// @38400 baud: 8000000/16/38400-1 = 12 => 8000000/16/13 = 38461 => 100-(38400/38461*100)=0.15% of error
	// Double speed mode:
	// @57600 baud: 8000000/8/57600-1 = 16 => 8000000/8/17 = 58823 => 100-(57600/58823*100)=2.08% of error	


	UBRR0H = 0;												// set baudrate
    3dba:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 16;
    3dbe:	80 e1       	ldi	r24, 0x10	; 16
    3dc0:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0A  |= (1 << U2X0);									// enable double speed
    3dc4:	e0 ec       	ldi	r30, 0xC0	; 192
    3dc6:	f0 e0       	ldi	r31, 0x00	; 0
    3dc8:	80 81       	ld	r24, Z
    3dca:	82 60       	ori	r24, 0x02	; 2
    3dcc:	80 83       	st	Z, r24
	//UCSR0A &= ~(1 << U2X0);
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);	// enable uart0 transmitter and receiver; enable rx interrupt for use with aseba
    3dce:	e1 ec       	ldi	r30, 0xC1	; 193
    3dd0:	f0 e0       	ldi	r31, 0x00	; 0
    3dd2:	80 81       	ld	r24, Z
    3dd4:	88 69       	ori	r24, 0x98	; 152
    3dd6:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);					// set frame format: 8-bit data, no parity, 1 stop bit
    3dd8:	e2 ec       	ldi	r30, 0xC2	; 194
    3dda:	f0 e0       	ldi	r31, 0x00	; 0
    3ddc:	80 81       	ld	r24, Z
    3dde:	86 60       	ori	r24, 0x06	; 6
    3de0:	80 83       	st	Z, r24



}
    3de2:	08 95       	ret

00003de4 <initUsart1>:

void initUsart1() {

	UBRR1H = 0;												// set baudrate
    3de4:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = 16;
    3de8:	80 e1       	ldi	r24, 0x10	; 16
    3dea:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1A  |= (1 << U2X1);									// enable double speed
    3dee:	e8 ec       	ldi	r30, 0xC8	; 200
    3df0:	f0 e0       	ldi	r31, 0x00	; 0
    3df2:	80 81       	ld	r24, Z
    3df4:	82 60       	ori	r24, 0x02	; 2
    3df6:	80 83       	st	Z, r24
	//UCSR0A &= ~(1 << U2X1);
	UCSR1B |= (1 << TXEN1) | (1 << RXEN1);					// enable uart0 transmitter and receiver
    3df8:	e9 ec       	ldi	r30, 0xC9	; 201
    3dfa:	f0 e0       	ldi	r31, 0x00	; 0
    3dfc:	80 81       	ld	r24, Z
    3dfe:	88 61       	ori	r24, 0x18	; 24
    3e00:	80 83       	st	Z, r24
	UCSR1C |= (1<<UCSZ11) | (1<<UCSZ10);					// set frame format: 8-bit data, no parity, 1 stop bit
    3e02:	ea ec       	ldi	r30, 0xCA	; 202
    3e04:	f0 e0       	ldi	r31, 0x00	; 0
    3e06:	80 81       	ld	r24, Z
    3e08:	86 60       	ori	r24, 0x06	; 6
    3e0a:	80 83       	st	Z, r24

}
    3e0c:	08 95       	ret

00003e0e <closeUsart>:

void closeUsart() {

	UCSR0A = 0x00;	// clear all usart registers
    3e0e:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0x00;
    3e12:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 0x00;
    3e16:	10 92 c2 00 	sts	0x00C2, r1

}
    3e1a:	08 95       	ret

00003e1c <usart0Transmit>:

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    3e1c:	90 91 c0 00 	lds	r25, 0x00C0
    3e20:	95 ff       	sbrs	r25, 5
    3e22:	fc cf       	rjmp	.-8      	; 0x3e1c <usart0Transmit>
	UDR0 = data;						// put data into buffer, sends the data
    3e24:	80 93 c6 00 	sts	0x00C6, r24
	if(isBlocking) {
    3e28:	66 23       	and	r22, r22
    3e2a:	21 f0       	breq	.+8      	; 0x3e34 <usart0Transmit+0x18>
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    3e2c:	80 91 c0 00 	lds	r24, 0x00C0
    3e30:	86 ff       	sbrs	r24, 6
    3e32:	fc cf       	rjmp	.-8      	; 0x3e2c <usart0Transmit+0x10>
    3e34:	08 95       	ret

00003e36 <usart1Transmit>:
	}
}

void usart1Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR1A & (1<<UDRE1)));		// wait for empty transmit buffer
    3e36:	90 91 c8 00 	lds	r25, 0x00C8
    3e3a:	95 ff       	sbrs	r25, 5
    3e3c:	fc cf       	rjmp	.-8      	; 0x3e36 <usart1Transmit>
	UDR1 = data;						// put data into buffer, sends the data
    3e3e:	80 93 ce 00 	sts	0x00CE, r24
	if(isBlocking) {
    3e42:	66 23       	and	r22, r22
    3e44:	21 f0       	breq	.+8      	; 0x3e4e <usart1Transmit+0x18>
		while (!(UCSR1A & (1<<TXC1)));	// wait transmission complete
    3e46:	80 91 c8 00 	lds	r24, 0x00C8
    3e4a:	86 ff       	sbrs	r24, 6
    3e4c:	fc cf       	rjmp	.-8      	; 0x3e46 <usart1Transmit+0x10>
    3e4e:	08 95       	ret

00003e50 <usart0InputBufferEmpty>:

}

char usart0InputBufferEmpty() {

	if(UCSR0A & (1<<RXC0)) {	// something received
    3e50:	80 91 c0 00 	lds	r24, 0x00C0
		return 0;
    3e54:	80 95       	com	r24
	} else {
		return 1;
	}

}
    3e56:	88 1f       	adc	r24, r24
    3e58:	88 27       	eor	r24, r24
    3e5a:	88 1f       	adc	r24, r24
    3e5c:	08 95       	ret

00003e5e <usart0Receive>:

unsigned char usart0Receive() {

	unsigned int i=0;

	while(usart0InputBufferEmpty()) {
    3e5e:	87 e9       	ldi	r24, 0x97	; 151
    3e60:	90 e0       	ldi	r25, 0x00	; 0

}

char usart0InputBufferEmpty() {

	if(UCSR0A & (1<<RXC0)) {	// something received
    3e62:	20 91 c0 00 	lds	r18, 0x00C0
    3e66:	27 fd       	sbrc	r18, 7
    3e68:	07 c0       	rjmp	.+14     	; 0x3e78 <usart0Receive+0x1a>
			commError = 1;
			return 0;				// timeout
		}
	}								// wait for data to be received

	return UDR0;					// get and return received data from buffer
    3e6a:	01 97       	sbiw	r24, 0x01	; 1

	unsigned int i=0;

	while(usart0InputBufferEmpty()) {
		i++;
		if(i>150) {
    3e6c:	d1 f7       	brne	.-12     	; 0x3e62 <usart0Receive+0x4>
			/*
			if(UCSR0A & (1<<3)) {	// overflow flag
			}
			*/
			commError = 1;
    3e6e:	81 e0       	ldi	r24, 0x01	; 1
    3e70:	80 93 2e 03 	sts	0x032E, r24
			return 0;				// timeout
    3e74:	80 e0       	ldi	r24, 0x00	; 0
    3e76:	08 95       	ret
		}
	}								// wait for data to be received

	return UDR0;					// get and return received data from buffer
    3e78:	80 91 c6 00 	lds	r24, 0x00C6

}
    3e7c:	08 95       	ret

00003e7e <__vector_25>:
		}
	}
}
*/

ISR(USART0_RX_vect) {
    3e7e:	1f 92       	push	r1
    3e80:	0f 92       	push	r0
    3e82:	0f b6       	in	r0, 0x3f	; 63
    3e84:	0f 92       	push	r0
    3e86:	0b b6       	in	r0, 0x3b	; 59
    3e88:	0f 92       	push	r0
    3e8a:	11 24       	eor	r1, r1
    3e8c:	2f 93       	push	r18
    3e8e:	3f 93       	push	r19
    3e90:	4f 93       	push	r20
    3e92:	5f 93       	push	r21
    3e94:	6f 93       	push	r22
    3e96:	7f 93       	push	r23
    3e98:	8f 93       	push	r24
    3e9a:	9f 93       	push	r25
    3e9c:	af 93       	push	r26
    3e9e:	bf 93       	push	r27
    3ea0:	ef 93       	push	r30
    3ea2:	ff 93       	push	r31

	char receivedByte = UDR0;
    3ea4:	90 91 c6 00 	lds	r25, 0x00C6


	if(currentSelector==14) {
    3ea8:	80 91 64 04 	lds	r24, 0x0464
    3eac:	8e 30       	cpi	r24, 0x0E	; 14
    3eae:	09 f4       	brne	.+2      	; 0x3eb2 <__vector_25+0x34>
    3eb0:	3f c0       	rjmp	.+126    	; 0x3f30 <__vector_25+0xb2>
		if(receivedByte == 0xAA) {
			irCommSendValues = 1;
		}
	} else if(currentSelector==15) {
    3eb2:	8f 30       	cpi	r24, 0x0F	; 15
    3eb4:	09 f4       	brne	.+2      	; 0x3eb8 <__vector_25+0x3a>
    3eb6:	42 c0       	rjmp	.+132    	; 0x3f3c <__vector_25+0xbe>
			eeprom_write_byte((uint8_t*) 4093, currentOsccal); 
		}

	} else {

		if(chooseMenu) {
    3eb8:	80 91 11 02 	lds	r24, 0x0211
    3ebc:	88 23       	and	r24, r24
    3ebe:	09 f5       	brne	.+66     	; 0x3f02 <__vector_25+0x84>
			chooseMenu = 0;
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
    3ec0:	80 91 33 04 	lds	r24, 0x0433
    3ec4:	81 30       	cpi	r24, 0x01	; 1
    3ec6:	09 f4       	brne	.+2      	; 0x3eca <__vector_25+0x4c>
    3ec8:	65 c0       	rjmp	.+202    	; 0x3f94 <__vector_25+0x116>
    3eca:	82 30       	cpi	r24, 0x02	; 2
    3ecc:	f1 f4       	brne	.+60     	; 0x3f0a <__vector_25+0x8c>
						menuChoice = 0;
					}
					break;

				case 2:	// address writing in eeprom
					if(menuState == 0) { // receive rf address LSB:
    3ece:	40 91 35 04 	lds	r20, 0x0435
    3ed2:	44 23       	and	r20, r20
    3ed4:	09 f4       	brne	.+2      	; 0x3ed8 <__vector_25+0x5a>
    3ed6:	74 c0       	rjmp	.+232    	; 0x3fc0 <__vector_25+0x142>
						rfAddress = (unsigned int)receivedByte&0x00FF;
						menuState = 1;
					} else if(menuState == 1) { // receive rf address MSB
    3ed8:	41 30       	cpi	r20, 0x01	; 1
    3eda:	b9 f4       	brne	.+46     	; 0x3f0a <__vector_25+0x8c>
						rfAddress |= ((unsigned int)receivedByte<<8);
    3edc:	39 2f       	mov	r19, r25
    3ede:	20 e0       	ldi	r18, 0x00	; 0
    3ee0:	80 91 25 03 	lds	r24, 0x0325
    3ee4:	90 91 26 03 	lds	r25, 0x0326
    3ee8:	82 2b       	or	r24, r18
    3eea:	93 2b       	or	r25, r19
    3eec:	90 93 26 03 	sts	0x0326, r25
    3ef0:	80 93 25 03 	sts	0x0325, r24
						addressReceived = 1;
    3ef4:	40 93 34 04 	sts	0x0434, r20
						menuState = 0;
    3ef8:	10 92 35 04 	sts	0x0435, r1
						chooseMenu = 1;
    3efc:	40 93 11 02 	sts	0x0211, r20
    3f00:	04 c0       	rjmp	.+8      	; 0x3f0a <__vector_25+0x8c>
		}

	} else {

		if(chooseMenu) {
			chooseMenu = 0;
    3f02:	10 92 11 02 	sts	0x0211, r1
			menuChoice = receivedByte;
    3f06:	90 93 33 04 	sts	0x0433, r25
			}
		}

	}

}
    3f0a:	ff 91       	pop	r31
    3f0c:	ef 91       	pop	r30
    3f0e:	bf 91       	pop	r27
    3f10:	af 91       	pop	r26
    3f12:	9f 91       	pop	r25
    3f14:	8f 91       	pop	r24
    3f16:	7f 91       	pop	r23
    3f18:	6f 91       	pop	r22
    3f1a:	5f 91       	pop	r21
    3f1c:	4f 91       	pop	r20
    3f1e:	3f 91       	pop	r19
    3f20:	2f 91       	pop	r18
    3f22:	0f 90       	pop	r0
    3f24:	0b be       	out	0x3b, r0	; 59
    3f26:	0f 90       	pop	r0
    3f28:	0f be       	out	0x3f, r0	; 63
    3f2a:	0f 90       	pop	r0
    3f2c:	1f 90       	pop	r1
    3f2e:	18 95       	reti

	char receivedByte = UDR0;


	if(currentSelector==14) {
		if(receivedByte == 0xAA) {
    3f30:	9a 3a       	cpi	r25, 0xAA	; 170
    3f32:	59 f7       	brne	.-42     	; 0x3f0a <__vector_25+0x8c>
			irCommSendValues = 1;
    3f34:	81 e0       	ldi	r24, 0x01	; 1
    3f36:	80 93 ec 04 	sts	0x04EC, r24
    3f3a:	e7 cf       	rjmp	.-50     	; 0x3f0a <__vector_25+0x8c>
		}
	} else if(currentSelector==15) {

		if(receivedByte == '+') {
    3f3c:	9b 32       	cpi	r25, 0x2B	; 43
    3f3e:	01 f1       	breq	.+64     	; 0x3f80 <__vector_25+0x102>
				currentOsccal++;
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
    3f40:	9d 32       	cpi	r25, 0x2D	; 45
    3f42:	91 f1       	breq	.+100    	; 0x3fa8 <__vector_25+0x12a>
				currentOsccal--;	
			}
			OSCCAL = currentOsccal;;
		}

		if(receivedByte == 'g') {
    3f44:	97 36       	cpi	r25, 0x67	; 103
    3f46:	09 f0       	breq	.+2      	; 0x3f4a <__vector_25+0xcc>
    3f48:	43 c0       	rjmp	.+134    	; 0x3fd0 <__vector_25+0x152>
			usart0Transmit(irCommand,1);
    3f4a:	90 91 37 04 	lds	r25, 0x0437

}

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    3f4e:	80 91 c0 00 	lds	r24, 0x00C0
    3f52:	85 ff       	sbrs	r24, 5
    3f54:	fc cf       	rjmp	.-8      	; 0x3f4e <__vector_25+0xd0>
	UDR0 = data;						// put data into buffer, sends the data
    3f56:	90 93 c6 00 	sts	0x00C6, r25
	if(isBlocking) {
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    3f5a:	80 91 c0 00 	lds	r24, 0x00C0
    3f5e:	86 ff       	sbrs	r24, 6
    3f60:	fc cf       	rjmp	.-8      	; 0x3f5a <__vector_25+0xdc>
			OSCCAL = currentOsccal;;
		}

		if(receivedByte == 'g') {
			usart0Transmit(irCommand,1);
			currentOsccal = OSCCAL;
    3f62:	90 91 66 00 	lds	r25, 0x0066
    3f66:	90 93 64 05 	sts	0x0564, r25

}

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    3f6a:	80 91 c0 00 	lds	r24, 0x00C0
    3f6e:	85 ff       	sbrs	r24, 5
    3f70:	fc cf       	rjmp	.-8      	; 0x3f6a <__vector_25+0xec>
	UDR0 = data;						// put data into buffer, sends the data
    3f72:	90 93 c6 00 	sts	0x00C6, r25
	if(isBlocking) {
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    3f76:	80 91 c0 00 	lds	r24, 0x00C0
    3f7a:	86 ff       	sbrs	r24, 6
    3f7c:	fc cf       	rjmp	.-8      	; 0x3f76 <__vector_25+0xf8>
    3f7e:	c5 cf       	rjmp	.-118    	; 0x3f0a <__vector_25+0x8c>
			irCommSendValues = 1;
		}
	} else if(currentSelector==15) {

		if(receivedByte == '+') {
			if(currentOsccal<255) {
    3f80:	80 91 64 05 	lds	r24, 0x0564
    3f84:	8f 3f       	cpi	r24, 0xFF	; 255
    3f86:	d1 f0       	breq	.+52     	; 0x3fbc <__vector_25+0x13e>
				currentOsccal++;
    3f88:	8f 5f       	subi	r24, 0xFF	; 255
    3f8a:	80 93 64 05 	sts	0x0564, r24

		if(receivedByte == '-') {
			if(currentOsccal>0) {
				currentOsccal--;	
			}
			OSCCAL = currentOsccal;;
    3f8e:	80 93 66 00 	sts	0x0066, r24
    3f92:	bb cf       	rjmp	.-138    	; 0x3f0a <__vector_25+0x8c>
			chooseMenu = 0;
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
				case 1: // send sensors data and activate actuators
					if(receivedByte == 0xAA) {
    3f94:	9a 3a       	cpi	r25, 0xAA	; 170
    3f96:	31 f1       	breq	.+76     	; 0x3fe4 <__vector_25+0x166>
						getDataNow = 1;
					} else if(receivedByte == 0x55) {
    3f98:	95 35       	cpi	r25, 0x55	; 85
    3f9a:	09 f0       	breq	.+2      	; 0x3f9e <__vector_25+0x120>
    3f9c:	b6 cf       	rjmp	.-148    	; 0x3f0a <__vector_25+0x8c>
						chooseMenu = 1;
    3f9e:	80 93 11 02 	sts	0x0211, r24
						menuChoice = 0;
    3fa2:	10 92 33 04 	sts	0x0433, r1
    3fa6:	b1 cf       	rjmp	.-158    	; 0x3f0a <__vector_25+0x8c>
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
			if(currentOsccal>0) {
    3fa8:	80 91 64 05 	lds	r24, 0x0564
    3fac:	88 23       	and	r24, r24
    3fae:	21 f0       	breq	.+8      	; 0x3fb8 <__vector_25+0x13a>
				currentOsccal--;	
    3fb0:	81 50       	subi	r24, 0x01	; 1
    3fb2:	80 93 64 05 	sts	0x0564, r24
    3fb6:	eb cf       	rjmp	.-42     	; 0x3f8e <__vector_25+0x110>
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
			if(currentOsccal>0) {
    3fb8:	80 e0       	ldi	r24, 0x00	; 0
    3fba:	e9 cf       	rjmp	.-46     	; 0x3f8e <__vector_25+0x110>
			irCommSendValues = 1;
		}
	} else if(currentSelector==15) {

		if(receivedByte == '+') {
			if(currentOsccal<255) {
    3fbc:	8f ef       	ldi	r24, 0xFF	; 255
    3fbe:	e7 cf       	rjmp	.-50     	; 0x3f8e <__vector_25+0x110>
					}
					break;

				case 2:	// address writing in eeprom
					if(menuState == 0) { // receive rf address LSB:
						rfAddress = (unsigned int)receivedByte&0x00FF;
    3fc0:	90 93 25 03 	sts	0x0325, r25
    3fc4:	10 92 26 03 	sts	0x0326, r1
						menuState = 1;
    3fc8:	81 e0       	ldi	r24, 0x01	; 1
    3fca:	80 93 35 04 	sts	0x0435, r24
    3fce:	9d cf       	rjmp	.-198    	; 0x3f0a <__vector_25+0x8c>
			usart0Transmit(irCommand,1);
			currentOsccal = OSCCAL;
			usart0Transmit(currentOsccal,1);
		}

		if(receivedByte == 's') {
    3fd0:	93 37       	cpi	r25, 0x73	; 115
    3fd2:	09 f0       	breq	.+2      	; 0x3fd6 <__vector_25+0x158>
    3fd4:	9a cf       	rjmp	.-204    	; 0x3f0a <__vector_25+0x8c>
			eeprom_write_byte((uint8_t*) 4093, currentOsccal); 
    3fd6:	8d ef       	ldi	r24, 0xFD	; 253
    3fd8:	9f e0       	ldi	r25, 0x0F	; 15
    3fda:	60 91 64 05 	lds	r22, 0x0564
    3fde:	0e 94 a4 59 	call	0xb348	; 0xb348 <__eewr_byte_m2560>
    3fe2:	93 cf       	rjmp	.-218    	; 0x3f0a <__vector_25+0x8c>
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
				case 1: // send sensors data and activate actuators
					if(receivedByte == 0xAA) {
						getDataNow = 1;
    3fe4:	80 93 36 04 	sts	0x0436, r24
    3fe8:	90 cf       	rjmp	.-224    	; 0x3f0a <__vector_25+0x8c>

00003fea <getSelector>:

#include "utility.h"

unsigned char getSelector() {
   return (SEL0) + 2*(SEL1) + 4*(SEL2) + 8*(SEL3);
    3fea:	86 b1       	in	r24, 0x06	; 6
    3fec:	66 b1       	in	r22, 0x06	; 6
    3fee:	26 b1       	in	r18, 0x06	; 6
    3ff0:	46 b1       	in	r20, 0x06	; 6
    3ff2:	30 e0       	ldi	r19, 0x00	; 0
    3ff4:	28 70       	andi	r18, 0x08	; 8
    3ff6:	30 70       	andi	r19, 0x00	; 0
    3ff8:	35 95       	asr	r19
    3ffa:	27 95       	ror	r18
    3ffc:	35 95       	asr	r19
    3ffe:	27 95       	ror	r18
    4000:	35 95       	asr	r19
    4002:	27 95       	ror	r18
    4004:	22 0f       	add	r18, r18
    4006:	33 1f       	adc	r19, r19
    4008:	70 e0       	ldi	r23, 0x00	; 0
    400a:	64 70       	andi	r22, 0x04	; 4
    400c:	70 70       	andi	r23, 0x00	; 0
    400e:	75 95       	asr	r23
    4010:	67 95       	ror	r22
    4012:	75 95       	asr	r23
    4014:	67 95       	ror	r22
    4016:	26 0f       	add	r18, r22
    4018:	37 1f       	adc	r19, r23
    401a:	22 0f       	add	r18, r18
    401c:	33 1f       	adc	r19, r19
    401e:	50 e0       	ldi	r21, 0x00	; 0
    4020:	42 70       	andi	r20, 0x02	; 2
    4022:	50 70       	andi	r21, 0x00	; 0
    4024:	55 95       	asr	r21
    4026:	47 95       	ror	r20
    4028:	24 0f       	add	r18, r20
    402a:	35 1f       	adc	r19, r21
    402c:	22 0f       	add	r18, r18
    402e:	81 70       	andi	r24, 0x01	; 1
}
    4030:	82 0f       	add	r24, r18
    4032:	08 95       	ret

00004034 <initPeripherals>:
    

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
    4034:	f8 94       	cli
	
	// reset all registers touched by arduino in the "init()" functions (wiring.c) not used by the robot
	TCCR0A = 0;
    4036:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
    4038:	15 bc       	out	0x25, r1	; 37
	TIMSK0 = 0;
    403a:	10 92 6e 00 	sts	0x006E, r1
	TCCR5A = 0;
    403e:	10 92 20 01 	sts	0x0120, r1
	TCCR5B = 0;
    4042:	10 92 21 01 	sts	0x0121, r1

	rfAddress = eeprom_read_word((uint16_t*)4094);
    4046:	8e ef       	ldi	r24, 0xFE	; 254
    4048:	9f e0       	ldi	r25, 0x0F	; 15
    404a:	0e 94 76 59 	call	0xb2ec	; 0xb2ec <__eerd_word_m2560>
    404e:	90 93 26 03 	sts	0x0326, r25
    4052:	80 93 25 03 	sts	0x0325, r24
	currentOsccal = eeprom_read_byte((uint8_t*)4093);
    4056:	8d ef       	ldi	r24, 0xFD	; 253
    4058:	9f e0       	ldi	r25, 0x0F	; 15
    405a:	0e 94 6e 59 	call	0xb2dc	; 0xb2dc <__eerd_byte_m2560>
    405e:	80 93 64 05 	sts	0x0564, r24
	if(currentOsccal!=0 && currentOsccal!=255) { // clear memory
    4062:	98 2f       	mov	r25, r24
    4064:	91 50       	subi	r25, 0x01	; 1
    4066:	9e 3f       	cpi	r25, 0xFE	; 254
    4068:	e8 f5       	brcc	.+122    	; 0x40e4 <initPeripherals+0xb0>
		OSCCAL = currentOsccal;
    406a:	80 93 66 00 	sts	0x0066, r24
		currentOsccal = OSCCAL;
		eeprom_write_byte((uint8_t*) 4093, currentOsccal);
	}
	
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
    406e:	80 91 25 03 	lds	r24, 0x0325
    4072:	90 91 26 03 	lds	r25, 0x0326
    4076:	9c 01       	movw	r18, r24
    4078:	21 58       	subi	r18, 0x81	; 129
    407a:	3c 40       	sbci	r19, 0x0C	; 12
    407c:	23 30       	cpi	r18, 0x03	; 3
    407e:	31 05       	cpc	r19, r1
    4080:	08 f5       	brcc	.+66     	; 0x40c4 <initPeripherals+0x90>
		hardwareRevision = HW_REV_3_0;
    4082:	10 92 67 04 	sts	0x0467, r1

	if(rfAddress > 3203) {
		hardwareRevision = HW_REV_3_1;
	}

	initCalibration();
    4086:	0e 94 0a 36 	call	0x6c14	; 0x6c14 <initCalibration>
	initPortsIO();
    408a:	0e 94 e4 1d 	call	0x3bc8	; 0x3bc8 <initPortsIO>
	initAdc();
    408e:	0e 94 3a 21 	call	0x4274	; 0x4274 <initAdc>
	initMotors();
    4092:	0e 94 74 27 	call	0x4ee8	; 0x4ee8 <initMotors>
	initRGBleds();
    4096:	0e 94 be 3f 	call	0x7f7c	; 0x7f7c <initRGBleds>
	initSPI();
    409a:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <initSPI>
	mirf_init();
    409e:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <mirf_init>
	if(spiCommError==0) {
    40a2:	80 91 28 03 	lds	r24, 0x0328
    40a6:	88 23       	and	r24, r24
    40a8:	29 f4       	brne	.+10     	; 0x40b4 <initPeripherals+0x80>
		rfFlags |= 1;
    40aa:	80 91 27 03 	lds	r24, 0x0327
    40ae:	81 60       	ori	r24, 0x01	; 1
    40b0:	80 93 27 03 	sts	0x0327, r24
	}
	initUsart0();
    40b4:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <initUsart0>
	initAccelerometer();
    40b8:	0e 94 06 41 	call	0x820c	; 0x820c <initAccelerometer>
	init_ir_remote_control();
    40bc:	0e 94 58 14 	call	0x28b0	; 0x28b0 <init_ir_remote_control>

	sei();			// enable global interrupts
    40c0:	78 94       	sei

	
}
    40c2:	08 95       	ret
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
		hardwareRevision = HW_REV_3_0;
	}

	if(rfAddress == 3200) {
    40c4:	2c e0       	ldi	r18, 0x0C	; 12
    40c6:	80 38       	cpi	r24, 0x80	; 128
    40c8:	92 07       	cpc	r25, r18
    40ca:	21 f4       	brne	.+8      	; 0x40d4 <initPeripherals+0xa0>
		hardwareRevision = HW_REV_3_0_1;
    40cc:	81 e0       	ldi	r24, 0x01	; 1
    40ce:	80 93 67 04 	sts	0x0467, r24
    40d2:	d9 cf       	rjmp	.-78     	; 0x4086 <initPeripherals+0x52>
	}

	if(rfAddress > 3203) {
    40d4:	2c e0       	ldi	r18, 0x0C	; 12
    40d6:	84 38       	cpi	r24, 0x84	; 132
    40d8:	92 07       	cpc	r25, r18
    40da:	a8 f2       	brcs	.-86     	; 0x4086 <initPeripherals+0x52>
		hardwareRevision = HW_REV_3_1;
    40dc:	82 e0       	ldi	r24, 0x02	; 2
    40de:	80 93 67 04 	sts	0x0467, r24
    40e2:	d1 cf       	rjmp	.-94     	; 0x4086 <initPeripherals+0x52>
	rfAddress = eeprom_read_word((uint16_t*)4094);
	currentOsccal = eeprom_read_byte((uint8_t*)4093);
	if(currentOsccal!=0 && currentOsccal!=255) { // clear memory
		OSCCAL = currentOsccal;
	} else {
		currentOsccal = OSCCAL;
    40e4:	60 91 66 00 	lds	r22, 0x0066
    40e8:	60 93 64 05 	sts	0x0564, r22
		eeprom_write_byte((uint8_t*) 4093, currentOsccal);
    40ec:	8d ef       	ldi	r24, 0xFD	; 253
    40ee:	9f e0       	ldi	r25, 0x0F	; 15
    40f0:	0e 94 a4 59 	call	0xb348	; 0xb348 <__eewr_byte_m2560>
    40f4:	bc cf       	rjmp	.-136    	; 0x406e <initPeripherals+0x3a>

000040f6 <__vector_15>:

	
}

// used only for wake-up from sleep
ISR(TIMER2_OVF_vect) {
    40f6:	1f 92       	push	r1
    40f8:	0f 92       	push	r0
    40fa:	0f b6       	in	r0, 0x3f	; 63
    40fc:	0f 92       	push	r0
    40fe:	11 24       	eor	r1, r1

}
    4100:	0f 90       	pop	r0
    4102:	0f be       	out	0x3f, r0	; 63
    4104:	0f 90       	pop	r0
    4106:	1f 90       	pop	r1
    4108:	18 95       	reti

0000410a <sleep>:

void sleep(unsigned char seconds) {
    410a:	cf 93       	push	r28
    410c:	df 93       	push	r29

	unsigned int pause = seconds*30;	// the timer2 used to wake-up from sleep is configured to run at 30 Hz
    410e:	9e e1       	ldi	r25, 0x1E	; 30
    4110:	89 9f       	mul	r24, r25
    4112:	e0 01       	movw	r28, r0
    4114:	11 24       	eor	r1, r1

	// disable external interrupt because it uses the timer2 to interpret the tv
	// remote signal and the timer2 must be free in order to be used for wake-up from sleep
	PCICR &= ~(1 << PCIE1);			// disable interrupt from falling edge
    4116:	80 91 68 00 	lds	r24, 0x0068
    411a:	8d 7f       	andi	r24, 0xFD	; 253
    411c:	80 93 68 00 	sts	0x0068, r24
	PCMSK1 &= ~(1 << PCINT15);		
    4120:	80 91 6c 00 	lds	r24, 0x006C
    4124:	8f 77       	andi	r24, 0x7F	; 127
    4126:	80 93 6c 00 	sts	0x006C, r24
	PCIFR |= (1 << PCIF1);			// clear interrupt flag
    412a:	d9 9a       	sbi	0x1b, 1	; 27

	// disable adc
	ADCSRA = 0x00;					// disable interrupt and turn off adc
    412c:	10 92 7a 00 	sts	0x007A, r1
	ADCSRA |= (1 << ADIF);			// clear interrupt flag
    4130:	80 91 7a 00 	lds	r24, 0x007A
    4134:	80 61       	ori	r24, 0x10	; 16
    4136:	80 93 7a 00 	sts	0x007A, r24

	// disable motors pwm
	TCCR3A = 0x00;	// turn off timer
    413a:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0x00;
    413e:	10 92 91 00 	sts	0x0091, r1
	TIMSK3 = 0x00;	// disable interrupt
    4142:	10 92 71 00 	sts	0x0071, r1
	TIFR3 |= (1 << OCF3A) | (1 << OCF3B) | (1 << TOV3);	// clear output compares and timer overflow interrupt flags
    4146:	88 b3       	in	r24, 0x18	; 24
    4148:	87 60       	ori	r24, 0x07	; 7
    414a:	88 bb       	out	0x18, r24	; 24
	TCCR4A = 0x00;
    414c:	10 92 a0 00 	sts	0x00A0, r1
	TCCR4B = 0x00;
    4150:	10 92 a1 00 	sts	0x00A1, r1
	TIMSK4 = 0x00;
    4154:	10 92 72 00 	sts	0x0072, r1
	TIFR4 |= (1 << OCF4A) | (1 << OCF4B) | (1 << TOV4);	// clear output compares and timer overflow interrupt flags
    4158:	89 b3       	in	r24, 0x19	; 25
    415a:	87 60       	ori	r24, 0x07	; 7
    415c:	89 bb       	out	0x19, r24	; 25

	// disable leds pwm
	TCCR1A = 0x00;	// turn off timer
    415e:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x00;
    4162:	10 92 81 00 	sts	0x0081, r1

	// close communication channels
	closeUsart();
    4166:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <closeUsart>
	closeSPI();
    416a:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <closeSPI>
	i2c_close();
    416e:	0e 94 2f 1e 	call	0x3c5e	; 0x3c5e <i2c_close>

	// set port pins
	initPortsIO();
    4172:	0e 94 e4 1d 	call	0x3bc8	; 0x3bc8 <initPortsIO>
	//PORTB &= ~(1 << 4);	// radio CE pin
	//DDRD = 0xFF;
	//PORTD = 0x00;	// I2C and uart pins to 0

	// set extendend standby mode and enable it
	SMCR |= (1 << SM2) | (1 << SM1) | (1 << SM0) | (1 << SE);	// extended standby
    4176:	83 b7       	in	r24, 0x33	; 51
    4178:	8f 60       	ori	r24, 0x0F	; 15
    417a:	83 bf       	out	0x33, r24	; 51

	// set timer2 for wake-up: 
	// source clock = 8 MHz
	// prescaler = 1/1024 => 7812.5 Hz
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
    417c:	81 e0       	ldi	r24, 0x01	; 1
    417e:	80 93 70 00 	sts	0x0070, r24
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
    4182:	80 91 b0 00 	lds	r24, 0x00B0
    4186:	8d 7f       	andi	r24, 0xFD	; 253
    4188:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler
    418c:	80 91 b1 00 	lds	r24, 0x00B1
    4190:	87 60       	ori	r24, 0x07	; 7
    4192:	80 93 b1 00 	sts	0x00B1, r24

	while(pause > 0) {	
    4196:	20 97       	sbiw	r28, 0x00	; 0
    4198:	19 f0       	breq	.+6      	; 0x41a0 <sleep+0x96>
		// enter extended standby mode
		//sleep_cpu();
		__asm__("sleep");
    419a:	88 95       	sleep
		pause--;
    419c:	21 97       	sbiw	r28, 0x01	; 1
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler

	while(pause > 0) {	
    419e:	e9 f7       	brne	.-6      	; 0x419a <sleep+0x90>
//		PORTB ^= (1 << 6);
	}

	// disable power mode
	//SMCR &= ~(1 << SE);
	SMCR = 0x00;
    41a0:	13 be       	out	0x33, r1	; 51

	// disable timer2 and its timer overflow interrupt
	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);	// disable timer2
    41a2:	80 91 b1 00 	lds	r24, 0x00B1
    41a6:	88 7f       	andi	r24, 0xF8	; 248
    41a8:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;					// disable all interrupt for timer2
    41ac:	10 92 70 00 	sts	0x0070, r1
	TCCR2A |= (1 << WGM21); 	// mode 2 => CTC mode
    41b0:	80 91 b0 00 	lds	r24, 0x00B0
    41b4:	82 60       	ori	r24, 0x02	; 2
    41b6:	80 93 b0 00 	sts	0x00B0, r24

	pwm_red = 255;
    41ba:	8f ef       	ldi	r24, 0xFF	; 255
    41bc:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    41c0:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    41c4:	80 93 0e 02 	sts	0x020E, r24
	pwm_right = 0;
    41c8:	10 92 06 03 	sts	0x0306, r1
    41cc:	10 92 05 03 	sts	0x0305, r1
	pwm_left = 0;
    41d0:	10 92 08 03 	sts	0x0308, r1
    41d4:	10 92 07 03 	sts	0x0307, r1
	initPeripherals();
    41d8:	0e 94 1a 20 	call	0x4034	; 0x4034 <initPeripherals>

}
    41dc:	df 91       	pop	r29
    41de:	cf 91       	pop	r28
    41e0:	08 95       	ret

000041e2 <getTime100MicroSec>:

unsigned long int getTime100MicroSec() {
    41e2:	60 91 60 04 	lds	r22, 0x0460
    41e6:	70 91 61 04 	lds	r23, 0x0461
	return clockTick;
}
    41ea:	80 91 62 04 	lds	r24, 0x0462
    41ee:	90 91 63 04 	lds	r25, 0x0463
    41f2:	08 95       	ret

000041f4 <readBatteryLevel>:

void readBatteryLevel() {
	measBattery = 1;
    41f4:	81 e0       	ldi	r24, 0x01	; 1
    41f6:	80 93 cf 02 	sts	0x02CF, r24
}
    41fa:	08 95       	ret

000041fc <resetOdometry>:

void resetOdometry() {
	leftMotSteps = 0;
    41fc:	80 e0       	ldi	r24, 0x00	; 0
    41fe:	90 e0       	ldi	r25, 0x00	; 0
    4200:	dc 01       	movw	r26, r24
    4202:	80 93 e5 02 	sts	0x02E5, r24
    4206:	90 93 e6 02 	sts	0x02E6, r25
    420a:	a0 93 e7 02 	sts	0x02E7, r26
    420e:	b0 93 e8 02 	sts	0x02E8, r27
	rightMotSteps = 0;
    4212:	80 93 e1 02 	sts	0x02E1, r24
    4216:	90 93 e2 02 	sts	0x02E2, r25
    421a:	a0 93 e3 02 	sts	0x02E3, r26
    421e:	b0 93 e4 02 	sts	0x02E4, r27
	theta = 0;
    4222:	80 93 8b 04 	sts	0x048B, r24
    4226:	90 93 8c 04 	sts	0x048C, r25
    422a:	a0 93 8d 04 	sts	0x048D, r26
    422e:	b0 93 8e 04 	sts	0x048E, r27
	xPos = 0;
    4232:	80 93 93 04 	sts	0x0493, r24
    4236:	90 93 94 04 	sts	0x0494, r25
    423a:	a0 93 95 04 	sts	0x0495, r26
    423e:	b0 93 96 04 	sts	0x0496, r27
	yPos = 0;
    4242:	80 93 97 04 	sts	0x0497, r24
    4246:	90 93 98 04 	sts	0x0498, r25
    424a:	a0 93 99 04 	sts	0x0499, r26
    424e:	b0 93 9a 04 	sts	0x049A, r27
	rightDist = 0;
    4252:	80 93 b3 04 	sts	0x04B3, r24
    4256:	90 93 b4 04 	sts	0x04B4, r25
    425a:	a0 93 b5 04 	sts	0x04B5, r26
    425e:	b0 93 b6 04 	sts	0x04B6, r27
	leftDist = 0;
    4262:	80 93 af 04 	sts	0x04AF, r24
    4266:	90 93 b0 04 	sts	0x04B0, r25
    426a:	a0 93 b1 04 	sts	0x04B1, r26
    426e:	b0 93 b2 04 	sts	0x04B2, r27
}
    4272:	08 95       	ret

00004274 <initAdc>:

#include "adc.h"


void initAdc(void) {
    4274:	cf 93       	push	r28
    4276:	df 93       	push	r29
	// ADMUX  -----> REFS1	REFS0	 ADLAR	MUX4	MUX3 	 MUX2	MUX1	MUX0
	// default		 0		0		 0		0		0		 0		0		0
	// ADCSRB -----> -		ACME	 - 		- 		MUX5 	 ADTS2 	ADTS1 	ADTS0
	// default		 0		0		 0		0		0		 0		0		0

	ADCSRA = 0;
    4278:	ea e7       	ldi	r30, 0x7A	; 122
    427a:	f0 e0       	ldi	r31, 0x00	; 0
    427c:	10 82       	st	Z, r1
	ADCSRB = 0;
    427e:	ab e7       	ldi	r26, 0x7B	; 123
    4280:	b0 e0       	ldi	r27, 0x00	; 0
    4282:	1c 92       	st	X, r1
	ADMUX = 0;
    4284:	cc e7       	ldi	r28, 0x7C	; 124
    4286:	d0 e0       	ldi	r29, 0x00	; 0
    4288:	18 82       	st	Y, r1

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// 1/64 prescaler => 8 MHz/64=125 KHz => Tad (adc clock)
    428a:	80 81       	ld	r24, Z
    428c:	86 60       	ori	r24, 0x06	; 6
    428e:	80 83       	st	Z, r24
											// one sample need 13 Tad in free running mode, so interrupt 
											// frequency is 125/13=9.6 KHz (104 us between adc interrupts)
	ADMUX |= (1 << REFS0); 	// voltage reference to AVCC (external)
    4290:	88 81       	ld	r24, Y
    4292:	80 64       	ori	r24, 0x40	; 64
    4294:	88 83       	st	Y, r24
	ADCSRA |= (1 << ADATE); // auto-trigger mode: the new sampling is started just after the last one is completed
    4296:	80 81       	ld	r24, Z
    4298:	80 62       	ori	r24, 0x20	; 32
    429a:	80 83       	st	Z, r24
	ADCSRB &= 0xF8;			// for safety...ADTS2:0 in ADCSRB should be already set to free running by default (0b000)
    429c:	8c 91       	ld	r24, X
    429e:	88 7f       	andi	r24, 0xF8	; 248
    42a0:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADIE);	// enable interrupt on conversion completion
    42a2:	80 81       	ld	r24, Z
    42a4:	88 60       	ori	r24, 0x08	; 8
    42a6:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	// enable ADC
    42a8:	80 81       	ld	r24, Z
    42aa:	80 68       	ori	r24, 0x80	; 128
    42ac:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);	// start first conversion (start from channel 0)
    42ae:	80 81       	ld	r24, Z
    42b0:	80 64       	ori	r24, 0x40	; 64
    42b2:	80 83       	st	Z, r24

}
    42b4:	df 91       	pop	r29
    42b6:	cf 91       	pop	r28
    42b8:	08 95       	ret

000042ba <__vector_29>:

ISR(ADC_vect) {
    42ba:	1f 92       	push	r1
    42bc:	0f 92       	push	r0
    42be:	0f b6       	in	r0, 0x3f	; 63
    42c0:	0f 92       	push	r0
    42c2:	0b b6       	in	r0, 0x3b	; 59
    42c4:	0f 92       	push	r0
    42c6:	11 24       	eor	r1, r1
    42c8:	1f 93       	push	r17
    42ca:	2f 93       	push	r18
    42cc:	3f 93       	push	r19
    42ce:	4f 93       	push	r20
    42d0:	5f 93       	push	r21
    42d2:	6f 93       	push	r22
    42d4:	7f 93       	push	r23
    42d6:	8f 93       	push	r24
    42d8:	9f 93       	push	r25
    42da:	af 93       	push	r26
    42dc:	bf 93       	push	r27
    42de:	ef 93       	push	r30
    42e0:	ff 93       	push	r31
	// channel 15:    active phase when going forward: motor left current; passive phase when going backward: motor left velocity


	//LED_BLUE_ON;

	if(clockTick == MAX_U32) {
    42e2:	80 91 60 04 	lds	r24, 0x0460
    42e6:	90 91 61 04 	lds	r25, 0x0461
    42ea:	a0 91 62 04 	lds	r26, 0x0462
    42ee:	b0 91 63 04 	lds	r27, 0x0463
    42f2:	8f 3f       	cpi	r24, 0xFF	; 255
    42f4:	2f ef       	ldi	r18, 0xFF	; 255
    42f6:	92 07       	cpc	r25, r18
    42f8:	2f ef       	ldi	r18, 0xFF	; 255
    42fa:	a2 07       	cpc	r26, r18
    42fc:	2f ef       	ldi	r18, 0xFF	; 255
    42fe:	b2 07       	cpc	r27, r18
    4300:	09 f4       	brne	.+2      	; 0x4304 <__vector_29+0x4a>
    4302:	b8 c0       	rjmp	.+368    	; 0x4474 <__vector_29+0x1ba>
		clockTick = 0;
	} else {
		clockTick++;				// this variable is used as base time for timed processes/functions (e,g, delay); 
    4304:	01 96       	adiw	r24, 0x01	; 1
    4306:	a1 1d       	adc	r26, r1
    4308:	b1 1d       	adc	r27, r1
    430a:	80 93 60 04 	sts	0x0460, r24
    430e:	90 93 61 04 	sts	0x0461, r25
    4312:	a0 93 62 04 	sts	0x0462, r26
    4316:	b0 93 63 04 	sts	0x0463, r27
	}								// resolution of 104 us based on adc interrupts

	unsigned int value = ADCL;			// get the sample; low byte must be read first!!
    431a:	80 91 78 00 	lds	r24, 0x0078
    431e:	90 e0       	ldi	r25, 0x00	; 0
	value = (ADCH<<8) | value;
    4320:	40 91 79 00 	lds	r20, 0x0079
    4324:	34 2f       	mov	r19, r20
    4326:	20 e0       	ldi	r18, 0x00	; 0
    4328:	82 2b       	or	r24, r18
    432a:	93 2b       	or	r25, r19
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    432c:	20 91 c9 02 	lds	r18, 0x02C9
    4330:	22 30       	cpi	r18, 0x02	; 2
    4332:	09 f4       	brne	.+2      	; 0x4336 <__vector_29+0x7c>
    4334:	ca c1       	rjmp	.+916    	; 0x46ca <__vector_29+0x410>
    4336:	23 30       	cpi	r18, 0x03	; 3
    4338:	08 f4       	brcc	.+2      	; 0x433c <__vector_29+0x82>
    433a:	4c c0       	rjmp	.+152    	; 0x43d4 <__vector_29+0x11a>
    433c:	24 30       	cpi	r18, 0x04	; 4
    433e:	09 f4       	brne	.+2      	; 0x4342 <__vector_29+0x88>
    4340:	ee c1       	rjmp	.+988    	; 0x471e <__vector_29+0x464>
    4342:	24 30       	cpi	r18, 0x04	; 4
    4344:	08 f0       	brcs	.+2      	; 0x4348 <__vector_29+0x8e>
    4346:	33 c1       	rjmp	.+614    	; 0x45ae <__vector_29+0x2f4>
				}
			}
			break;

		case SAVE_TO_LEFT_MOTOR_CURRENT:
			left_current_avg += value;
    4348:	20 91 f1 02 	lds	r18, 0x02F1
    434c:	30 91 f2 02 	lds	r19, 0x02F2
    4350:	28 0f       	add	r18, r24
    4352:	39 1f       	adc	r19, r25
			left_current_avg = left_current_avg >> 1;
    4354:	36 95       	lsr	r19
    4356:	27 95       	ror	r18
    4358:	30 93 f2 02 	sts	0x02F2, r19
    435c:	20 93 f1 02 	sts	0x02F1, r18
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
    4360:	80 91 e8 04 	lds	r24, 0x04E8
    4364:	82 30       	cpi	r24, 0x02	; 2
    4366:	09 f0       	breq	.+2      	; 0x436a <__vector_29+0xb0>
    4368:	4b c0       	rjmp	.+150    	; 0x4400 <__vector_29+0x146>
		switch(irCommAdcTxState) {
    436a:	80 91 38 05 	lds	r24, 0x0538
    436e:	81 30       	cpi	r24, 0x01	; 1
    4370:	09 f4       	brne	.+2      	; 0x4374 <__vector_29+0xba>
    4372:	a9 c2       	rjmp	.+1362   	; 0x48c6 <__vector_29+0x60c>
    4374:	81 30       	cpi	r24, 0x01	; 1
    4376:	08 f0       	brcs	.+2      	; 0x437a <__vector_29+0xc0>
    4378:	00 c2       	rjmp	.+1024   	; 0x477a <__vector_29+0x4c0>
				}
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ1;
				break;

			case IRCOMM_TX_ADC_IDLE:
				if(irCommTxByteEnqueued==1) {					
    437a:	80 91 3a 05 	lds	r24, 0x053A
    437e:	81 30       	cpi	r24, 0x01	; 1
    4380:	09 f4       	brne	.+2      	; 0x4384 <__vector_29+0xca>
    4382:	12 c3       	rjmp	.+1572   	; 0x49a8 <__vector_29+0x6ee>
    4384:	80 91 ca 02 	lds	r24, 0x02CA
	
	}

	// channel selection in the adc register; continuously manually change the channel 
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
    4388:	90 91 33 02 	lds	r25, 0x0233
    438c:	98 30       	cpi	r25, 0x08	; 8
    438e:	08 f0       	brcs	.+2      	; 0x4392 <__vector_29+0xd8>
    4390:	54 c1       	rjmp	.+680    	; 0x463a <__vector_29+0x380>
		ADCSRB &= ~(1 << MUX5);
    4392:	90 91 7b 00 	lds	r25, 0x007B
    4396:	97 7f       	andi	r25, 0xF7	; 247
    4398:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + currentAdChannel;
    439c:	90 91 33 02 	lds	r25, 0x0233
    43a0:	90 5c       	subi	r25, 0xC0	; 192
    43a2:	90 93 7c 00 	sts	0x007C, r25
		ADCSRB |= (1 << MUX5);
		ADMUX = 0x40 + (currentAdChannel-8);
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if((adcSamplingState==2) && (irCommMode==IRCOMM_MODE_SENSORS_SAMPLING)) {
    43a6:	82 30       	cpi	r24, 0x02	; 2
    43a8:	09 f4       	brne	.+2      	; 0x43ac <__vector_29+0xf2>
    43aa:	54 c1       	rjmp	.+680    	; 0x4654 <__vector_29+0x39a>

	}

	//LED_BLUE_OFF;

}
    43ac:	ff 91       	pop	r31
    43ae:	ef 91       	pop	r30
    43b0:	bf 91       	pop	r27
    43b2:	af 91       	pop	r26
    43b4:	9f 91       	pop	r25
    43b6:	8f 91       	pop	r24
    43b8:	7f 91       	pop	r23
    43ba:	6f 91       	pop	r22
    43bc:	5f 91       	pop	r21
    43be:	4f 91       	pop	r20
    43c0:	3f 91       	pop	r19
    43c2:	2f 91       	pop	r18
    43c4:	1f 91       	pop	r17
    43c6:	0f 90       	pop	r0
    43c8:	0b be       	out	0x3b, r0	; 59
    43ca:	0f 90       	pop	r0
    43cc:	0f be       	out	0x3f, r0	; 63
    43ce:	0f 90       	pop	r0
    43d0:	1f 90       	pop	r1
    43d2:	18 95       	reti
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    43d4:	22 23       	and	r18, r18
    43d6:	09 f4       	brne	.+2      	; 0x43da <__vector_29+0x120>
    43d8:	56 c0       	rjmp	.+172    	; 0x4486 <__vector_29+0x1cc>
    43da:	21 30       	cpi	r18, 0x01	; 1
    43dc:	61 f4       	brne	.+24     	; 0x43f6 <__vector_29+0x13c>
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
			}											// is sampled; thus 12 sensors x 2 phases = 24 samples
			break;

		case SAVE_TO_RIGHT_MOTOR_CURRENT:
			right_current_avg += value;
    43de:	20 91 f3 02 	lds	r18, 0x02F3
    43e2:	30 91 f4 02 	lds	r19, 0x02F4
    43e6:	28 0f       	add	r18, r24
    43e8:	39 1f       	adc	r19, r25
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
    43ea:	36 95       	lsr	r19
    43ec:	27 95       	ror	r18
    43ee:	30 93 f4 02 	sts	0x02F4, r19
    43f2:	20 93 f3 02 	sts	0x02F3, r18
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
    43f6:	80 91 e8 04 	lds	r24, 0x04E8
    43fa:	82 30       	cpi	r24, 0x02	; 2
    43fc:	09 f4       	brne	.+2      	; 0x4400 <__vector_29+0x146>
    43fe:	b5 cf       	rjmp	.-150    	; 0x436a <__vector_29+0xb0>
					irCommAdcTxState = IRCOMM_TX_ADC_TURN_OFF_SENSORS;
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
    4400:	81 30       	cpi	r24, 0x01	; 1
    4402:	09 f4       	brne	.+2      	; 0x4406 <__vector_29+0x14c>
    4404:	41 c1       	rjmp	.+642    	; 0x4688 <__vector_29+0x3ce>
			case 12:
				adcSaveDataTo = SKIP_SAMPLE;
				break;

		}
	} else if(irCommMode==IRCOMM_MODE_SENSORS_SAMPLING) {
    4406:	88 23       	and	r24, r24
    4408:	09 f0       	breq	.+2      	; 0x440c <__vector_29+0x152>
    440a:	bc cf       	rjmp	.-136    	; 0x4384 <__vector_29+0xca>
		switch(adcSamplingState) {
    440c:	80 91 ca 02 	lds	r24, 0x02CA
    4410:	82 30       	cpi	r24, 0x02	; 2
    4412:	09 f4       	brne	.+2      	; 0x4416 <__vector_29+0x15c>
    4414:	2c c3       	rjmp	.+1624   	; 0x4a6e <__vector_29+0x7b4>
    4416:	83 30       	cpi	r24, 0x03	; 3
    4418:	08 f0       	brcs	.+2      	; 0x441c <__vector_29+0x162>
    441a:	dc c1       	rjmp	.+952    	; 0x47d4 <__vector_29+0x51a>
    441c:	88 23       	and	r24, r24
    441e:	09 f4       	brne	.+2      	; 0x4422 <__vector_29+0x168>
    4420:	7f c2       	rjmp	.+1278   	; 0x4920 <__vector_29+0x666>
    4422:	81 30       	cpi	r24, 0x01	; 1
    4424:	09 f0       	breq	.+2      	; 0x4428 <__vector_29+0x16e>
    4426:	b0 cf       	rjmp	.-160    	; 0x4388 <__vector_29+0xce>
				}
				adcSamplingState = 1;
				break;

			case 1:	// left motor
				currentAdChannel = currentMotLeftChannel;
    4428:	80 91 35 02 	lds	r24, 0x0235
    442c:	80 93 33 02 	sts	0x0233, r24
				leftChannelPhase = leftMotorPhase;
    4430:	80 91 38 02 	lds	r24, 0x0238
    4434:	80 93 cc 02 	sts	0x02CC, r24
				adcSaveDataTo = SAVE_TO_PROX;
    4438:	10 92 c9 02 	sts	0x02C9, r1
				adcSamplingState = 2;
    443c:	82 e0       	ldi	r24, 0x02	; 2
    443e:	80 93 ca 02 	sts	0x02CA, r24
				if(irCommEnabled==IRCOMM_MODE_RECEIVE && currentProx==23) {					
    4442:	10 91 e6 04 	lds	r17, 0x04E6
    4446:	11 30       	cpi	r17, 0x01	; 1
    4448:	09 f4       	brne	.+2      	; 0x444c <__vector_29+0x192>
    444a:	14 c4       	rjmp	.+2088   	; 0x4c74 <__vector_29+0x9ba>
					irCommRxWindowSamples = 0;
					memset(irCommMaxSensorValueAdc, 0x00, 16);
					memset(irCommMinSensorValueAdc, 0xFF, 16);
					irCommMode = IRCOMM_MODE_RECEIVE;					
				}
				if(irCommEnabled==IRCOMM_MODE_TRANSMIT && currentProx==23) {
    444c:	12 30       	cpi	r17, 0x02	; 2
    444e:	09 f0       	breq	.+2      	; 0x4452 <__vector_29+0x198>
    4450:	99 cf       	rjmp	.-206    	; 0x4384 <__vector_29+0xca>
    4452:	80 91 34 02 	lds	r24, 0x0234
    4456:	87 31       	cpi	r24, 0x17	; 23
    4458:	09 f0       	breq	.+2      	; 0x445c <__vector_29+0x1a2>
    445a:	94 cf       	rjmp	.-216    	; 0x4384 <__vector_29+0xca>
					irCommMode = IRCOMM_MODE_TRANSMIT;
    445c:	10 93 e8 04 	sts	0x04E8, r17
					if(irCommTxByteEnqueued==1) {
    4460:	80 91 3a 05 	lds	r24, 0x053A
    4464:	81 30       	cpi	r24, 0x01	; 1
    4466:	09 f4       	brne	.+2      	; 0x446a <__vector_29+0x1b0>
    4468:	9f c2       	rjmp	.+1342   	; 0x49a8 <__vector_29+0x6ee>
						irCommAdcTxState = IRCOMM_TX_ADC_TURN_OFF_SENSORS;
					} else {
						irCommMode=IRCOMM_MODE_SENSORS_SAMPLING; // no data to be transmitted, restart sensors sampling
    446a:	10 92 e8 04 	sts	0x04E8, r1
    446e:	80 91 ca 02 	lds	r24, 0x02CA
    4472:	8a cf       	rjmp	.-236    	; 0x4388 <__vector_29+0xce>


	//LED_BLUE_ON;

	if(clockTick == MAX_U32) {
		clockTick = 0;
    4474:	10 92 60 04 	sts	0x0460, r1
    4478:	10 92 61 04 	sts	0x0461, r1
    447c:	10 92 62 04 	sts	0x0462, r1
    4480:	10 92 63 04 	sts	0x0463, r1
    4484:	4a cf       	rjmp	.-364    	; 0x431a <__vector_29+0x60>
			}
			currentProx++;
			break;

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    4486:	60 91 34 02 	lds	r22, 0x0234
    448a:	6e 30       	cpi	r22, 0x0E	; 14
    448c:	09 f4       	brne	.+2      	; 0x4490 <__vector_29+0x1d6>
    448e:	02 c3       	rjmp	.+1540   	; 0x4a94 <__vector_29+0x7da>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
				measBattery = 0;
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
			} else {
				proximityValue[currentProx] = value;	// even indexes contain ambient values; odd indexes contains "reflected" values
    4490:	26 2f       	mov	r18, r22
    4492:	30 e0       	ldi	r19, 0x00	; 0
    4494:	f9 01       	movw	r30, r18
    4496:	ee 0f       	add	r30, r30
    4498:	ff 1f       	adc	r31, r31
    449a:	e7 5c       	subi	r30, 0xC7	; 199
    449c:	fd 4f       	sbci	r31, 0xFD	; 253
    449e:	91 83       	std	Z+1, r25	; 0x01
    44a0:	80 83       	st	Z, r24
			}

			if(currentProx & 0x01) {
    44a2:	20 ff       	sbrs	r18, 0
    44a4:	78 c0       	rjmp	.+240    	; 0x4596 <__vector_29+0x2dc>
				//if(currentProx < 16) {	// prox
					proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
    44a6:	f9 01       	movw	r30, r18
    44a8:	ee 0f       	add	r30, r30
    44aa:	ff 1f       	adc	r31, r31
    44ac:	e9 5c       	subi	r30, 0xC9	; 201
    44ae:	fd 4f       	sbci	r31, 0xFD	; 253
    44b0:	80 81       	ld	r24, Z
    44b2:	91 81       	ldd	r25, Z+1	; 0x01
    44b4:	f9 01       	movw	r30, r18
    44b6:	ee 0f       	add	r30, r30
    44b8:	ff 1f       	adc	r31, r31
    44ba:	e7 5c       	subi	r30, 0xC7	; 199
    44bc:	fd 4f       	sbci	r31, 0xFD	; 253
    44be:	40 81       	ld	r20, Z
    44c0:	51 81       	ldd	r21, Z+1	; 0x01
    44c2:	26 2f       	mov	r18, r22
    44c4:	26 95       	lsr	r18
    44c6:	30 e0       	ldi	r19, 0x00	; 0
    44c8:	84 1b       	sub	r24, r20
    44ca:	95 0b       	sbc	r25, r21
    44cc:	22 0f       	add	r18, r18
    44ce:	33 1f       	adc	r19, r19
    44d0:	f9 01       	movw	r30, r18
    44d2:	ef 57       	subi	r30, 0x7F	; 127
    44d4:	fd 4f       	sbci	r31, 0xFD	; 253
    44d6:	40 81       	ld	r20, Z
    44d8:	51 81       	ldd	r21, Z+1	; 0x01
    44da:	84 1b       	sub	r24, r20
    44dc:	95 0b       	sbc	r25, r21
    44de:	f9 01       	movw	r30, r18
    44e0:	e7 59       	subi	r30, 0x97	; 151
    44e2:	fd 4f       	sbci	r31, 0xFD	; 253
    44e4:	91 83       	std	Z+1, r25	; 0x01
    44e6:	80 83       	st	Z, r24
				//} else {	// ground
				//	proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx];
				//}
				if(proximityResult[currentProx>>1] < 0) {
    44e8:	97 fd       	sbrc	r25, 7
    44ea:	fe c2       	rjmp	.+1532   	; 0x4ae8 <__vector_29+0x82e>
					proximityResult[currentProx>>1] = 0;
				}
				if(proximityResult[currentProx>>1] > 1024) {
    44ec:	44 e0       	ldi	r20, 0x04	; 4
    44ee:	81 30       	cpi	r24, 0x01	; 1
    44f0:	94 07       	cpc	r25, r20
    44f2:	24 f0       	brlt	.+8      	; 0x44fc <__vector_29+0x242>
					proximityResult[currentProx>>1] = 1024;
    44f4:	80 e0       	ldi	r24, 0x00	; 0
    44f6:	94 e0       	ldi	r25, 0x04	; 4
    44f8:	91 83       	std	Z+1, r25	; 0x01
    44fa:	80 83       	st	Z, r24
				// 1) from 0 to PHASE1: y = x (where x = proximity value9
				// 2) from PHASE1 to PHASE2: y = x/2 + 30
				// 3) from PHASE2 to PHASE3: y = x/4 + 75
				// 4) from PHASE3 upwards: y = x/8 + 127.5
				// The linearized values are used for the obstacles avoidance.
				if(currentProx < 16) {	// only for proximity (not ground sensors)
    44fc:	60 31       	cpi	r22, 0x10	; 16
    44fe:	50 f4       	brcc	.+20     	; 0x4514 <__vector_29+0x25a>
					
					if(proximityResult[currentProx>>1] < PHASE1) {
    4500:	8c 33       	cpi	r24, 0x3C	; 60
    4502:	91 05       	cpc	r25, r1
    4504:	0c f0       	brlt	.+2      	; 0x4508 <__vector_29+0x24e>
    4506:	f5 c2       	rjmp	.+1514   	; 0x4af2 <__vector_29+0x838>

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];
    4508:	2f 52       	subi	r18, 0x2F	; 47
    450a:	3d 4f       	sbci	r19, 0xFD	; 253
    450c:	d9 01       	movw	r26, r18
    450e:	11 96       	adiw	r26, 0x01	; 1
    4510:	9c 93       	st	X, r25
    4512:	8e 93       	st	-X, r24
				}

				// the cliff avoidance behavior is inserted within this interrupt service routine in order to react
				// as fast as possible; the maximum speed usable with cliff avoidance is 30 in all kind of surface 
				// (apart from black ones) after calibration.
				if(cliffAvoidanceEnabled) {
    4514:	80 91 89 04 	lds	r24, 0x0489
    4518:	88 23       	and	r24, r24
    451a:	09 f4       	brne	.+2      	; 0x451e <__vector_29+0x264>
    451c:	12 c2       	rjmp	.+1060   	; 0x4942 <__vector_29+0x688>
					if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    451e:	80 91 79 02 	lds	r24, 0x0279
    4522:	90 91 7a 02 	lds	r25, 0x027A
    4526:	f1 e0       	ldi	r31, 0x01	; 1
    4528:	84 3a       	cpi	r24, 0xA4	; 164
    452a:	9f 07       	cpc	r25, r31
    452c:	cc f0       	brlt	.+50     	; 0x4560 <__vector_29+0x2a6>
    452e:	80 91 7b 02 	lds	r24, 0x027B
    4532:	90 91 7c 02 	lds	r25, 0x027C
    4536:	21 e0       	ldi	r18, 0x01	; 1
    4538:	84 3a       	cpi	r24, 0xA4	; 164
    453a:	92 07       	cpc	r25, r18
    453c:	8c f0       	brlt	.+34     	; 0x4560 <__vector_29+0x2a6>
    453e:	80 91 7d 02 	lds	r24, 0x027D
    4542:	90 91 7e 02 	lds	r25, 0x027E
    4546:	41 e0       	ldi	r20, 0x01	; 1
    4548:	84 3a       	cpi	r24, 0xA4	; 164
    454a:	94 07       	cpc	r25, r20
    454c:	4c f0       	brlt	.+18     	; 0x4560 <__vector_29+0x2a6>
    454e:	80 91 7f 02 	lds	r24, 0x027F
    4552:	90 91 80 02 	lds	r25, 0x0280
    4556:	a1 e0       	ldi	r26, 0x01	; 1
    4558:	84 3a       	cpi	r24, 0xA4	; 164
    455a:	9a 07       	cpc	r25, r26
    455c:	0c f0       	brlt	.+2      	; 0x4560 <__vector_29+0x2a6>
    455e:	f1 c1       	rjmp	.+994    	; 0x4942 <__vector_29+0x688>
					//if(proximityResult[8]<(proximityOffset[8]>>1) || proximityResult[9]<(proximityOffset[9]>>1) || proximityResult[10]<(proximityOffset[10]>>1) || proximityResult[11]<(proximityOffset[11]>>1)) {
						cliffDetectedFlag = 1;
    4560:	81 e0       	ldi	r24, 0x01	; 1
    4562:	80 93 8a 04 	sts	0x048A, r24
						//LED_RED_ON;			
						// set resulting velocity to 0 and change the pwm registers directly to be able
						// to stop as fast as possible (the next pwm cycle)
						// left motor
						pwm_left = 0;
    4566:	10 92 08 03 	sts	0x0308, r1
    456a:	10 92 07 03 	sts	0x0307, r1
						OCR4A = 0;
    456e:	10 92 a9 00 	sts	0x00A9, r1
    4572:	10 92 a8 00 	sts	0x00A8, r1
						OCR4B = 0;
    4576:	10 92 ab 00 	sts	0x00AB, r1
    457a:	10 92 aa 00 	sts	0x00AA, r1
						// right motor
						pwm_right = 0;
    457e:	10 92 06 03 	sts	0x0306, r1
    4582:	10 92 05 03 	sts	0x0305, r1
						OCR3A = 0;
    4586:	10 92 99 00 	sts	0x0099, r1
    458a:	10 92 98 00 	sts	0x0098, r1
						OCR3B = 0;
    458e:	10 92 9b 00 	sts	0x009B, r1
    4592:	10 92 9a 00 	sts	0x009A, r1
				} else {
					cliffDetectedFlag = 0;
				}

			}			
			currentProx++;
    4596:	6f 5f       	subi	r22, 0xFF	; 255
    4598:	60 93 34 02 	sts	0x0234, r22
			if(currentProx > 23) {						// in total there are 8 proximity sensors and 4 ground sensors => 12 sensors
    459c:	68 31       	cpi	r22, 0x18	; 24
    459e:	08 f4       	brcc	.+2      	; 0x45a2 <__vector_29+0x2e8>
    45a0:	2a cf       	rjmp	.-428    	; 0x43f6 <__vector_29+0x13c>
				currentProx = 0;						// for each one there is a passive phase in which the ambient light is sampled,
    45a2:	10 92 34 02 	sts	0x0234, r1
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
    45a6:	81 e0       	ldi	r24, 0x01	; 1
    45a8:	80 93 d0 02 	sts	0x02D0, r24
    45ac:	24 cf       	rjmp	.-440    	; 0x43f6 <__vector_29+0x13c>
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    45ae:	26 30       	cpi	r18, 0x06	; 6
    45b0:	09 f0       	breq	.+2      	; 0x45b4 <__vector_29+0x2fa>
    45b2:	21 cf       	rjmp	.-446    	; 0x43f6 <__vector_29+0x13c>
		case SAVE_TO_PROX_IRCOMM:
			irCommProxValuesAdc[currentProx+irCommRxWindowSamples*8] = value;
    45b4:	20 91 16 05 	lds	r18, 0x0516
    45b8:	30 e0       	ldi	r19, 0x00	; 0
    45ba:	40 91 34 02 	lds	r20, 0x0234
    45be:	22 0f       	add	r18, r18
    45c0:	33 1f       	adc	r19, r19
    45c2:	22 0f       	add	r18, r18
    45c4:	33 1f       	adc	r19, r19
    45c6:	22 0f       	add	r18, r18
    45c8:	33 1f       	adc	r19, r19
    45ca:	24 0f       	add	r18, r20
    45cc:	31 1d       	adc	r19, r1
    45ce:	22 0f       	add	r18, r18
    45d0:	33 1f       	adc	r19, r19
    45d2:	e0 91 7d 08 	lds	r30, 0x087D
    45d6:	f0 91 7e 08 	lds	r31, 0x087E
    45da:	e2 0f       	add	r30, r18
    45dc:	f3 1f       	adc	r31, r19
    45de:	91 83       	std	Z+1, r25	; 0x01
    45e0:	80 83       	st	Z, r24
			// get the min and max values in the sampling window for all the sensors
			if(irCommMaxSensorValueAdc[currentProx] < value) {
    45e2:	60 91 34 02 	lds	r22, 0x0234
    45e6:	26 2f       	mov	r18, r22
    45e8:	30 e0       	ldi	r19, 0x00	; 0
    45ea:	22 0f       	add	r18, r18
    45ec:	33 1f       	adc	r19, r19
    45ee:	e0 91 4b 0b 	lds	r30, 0x0B4B
    45f2:	f0 91 4c 0b 	lds	r31, 0x0B4C
    45f6:	e2 0f       	add	r30, r18
    45f8:	f3 1f       	adc	r31, r19
    45fa:	40 81       	ld	r20, Z
    45fc:	51 81       	ldd	r21, Z+1	; 0x01
    45fe:	48 17       	cp	r20, r24
    4600:	59 07       	cpc	r21, r25
    4602:	40 f4       	brcc	.+16     	; 0x4614 <__vector_29+0x35a>
				irCommMaxSensorValueAdc[currentProx] = value;
    4604:	91 83       	std	Z+1, r25	; 0x01
    4606:	80 83       	st	Z, r24
    4608:	60 91 34 02 	lds	r22, 0x0234
    460c:	26 2f       	mov	r18, r22
    460e:	30 e0       	ldi	r19, 0x00	; 0
    4610:	22 0f       	add	r18, r18
    4612:	33 1f       	adc	r19, r19
			}
			if(irCommMinSensorValueAdc[currentProx] > value) {
    4614:	e0 91 db 05 	lds	r30, 0x05DB
    4618:	f0 91 dc 05 	lds	r31, 0x05DC
    461c:	e2 0f       	add	r30, r18
    461e:	f3 1f       	adc	r31, r19
    4620:	20 81       	ld	r18, Z
    4622:	31 81       	ldd	r19, Z+1	; 0x01
    4624:	82 17       	cp	r24, r18
    4626:	93 07       	cpc	r25, r19
    4628:	20 f4       	brcc	.+8      	; 0x4632 <__vector_29+0x378>
				irCommMinSensorValueAdc[currentProx] = value;
    462a:	91 83       	std	Z+1, r25	; 0x01
    462c:	80 83       	st	Z, r24
    462e:	60 91 34 02 	lds	r22, 0x0234
			}
			currentProx++;
    4632:	6f 5f       	subi	r22, 0xFF	; 255
    4634:	60 93 34 02 	sts	0x0234, r22
			break;
    4638:	de ce       	rjmp	.-580    	; 0x43f6 <__vector_29+0x13c>
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
		ADCSRB &= ~(1 << MUX5);
		ADMUX = 0x40 + currentAdChannel;
	} else {						// MUX5=1 + ADMUX=0..7 => adc channel=8..15
		ADCSRB |= (1 << MUX5);
    463a:	90 91 7b 00 	lds	r25, 0x007B
    463e:	98 60       	ori	r25, 0x08	; 8
    4640:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + (currentAdChannel-8);
    4644:	90 91 33 02 	lds	r25, 0x0233
    4648:	98 5c       	subi	r25, 0xC8	; 200
    464a:	90 93 7c 00 	sts	0x007C, r25
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if((adcSamplingState==2) && (irCommMode==IRCOMM_MODE_SENSORS_SAMPLING)) {
    464e:	82 30       	cpi	r24, 0x02	; 2
    4650:	09 f0       	breq	.+2      	; 0x4654 <__vector_29+0x39a>
    4652:	ac ce       	rjmp	.-680    	; 0x43ac <__vector_29+0xf2>
    4654:	80 91 e8 04 	lds	r24, 0x04E8
    4658:	88 23       	and	r24, r24
    465a:	09 f0       	breq	.+2      	; 0x465e <__vector_29+0x3a4>
    465c:	a7 ce       	rjmp	.-690    	; 0x43ac <__vector_29+0xf2>

		if(hardwareRevision == HW_REV_3_0) {
    465e:	20 91 67 04 	lds	r18, 0x0467
    4662:	22 23       	and	r18, r18
    4664:	39 f4       	brne	.+14     	; 0x4674 <__vector_29+0x3ba>
			PORTJ &= 0xF0;
    4666:	80 91 05 01 	lds	r24, 0x0105
    466a:	80 7f       	andi	r24, 0xF0	; 240
    466c:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    4670:	12 b8       	out	0x02, r1	; 2
    4672:	9c ce       	rjmp	.-712    	; 0x43ac <__vector_29+0xf2>
			//#warning "turn off pulse with 0 (hw rev 3.0)"
		}

		if(hardwareRevision == HW_REV_3_0_1) {
    4674:	21 30       	cpi	r18, 0x01	; 1
    4676:	19 f0       	breq	.+6      	; 0x467e <__vector_29+0x3c4>
			PORTJ = 0xFF;
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0.1)"
		}

		if(hardwareRevision == HW_REV_3_1) {
    4678:	22 30       	cpi	r18, 0x02	; 2
    467a:	09 f0       	breq	.+2      	; 0x467e <__vector_29+0x3c4>
    467c:	97 ce       	rjmp	.-722    	; 0x43ac <__vector_29+0xf2>
			PORTJ = 0xFF;
    467e:	8f ef       	ldi	r24, 0xFF	; 255
    4680:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    4684:	12 b8       	out	0x02, r1	; 2
    4686:	92 ce       	rjmp	.-732    	; 0x43ac <__vector_29+0xf2>
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
    4688:	90 91 15 05 	lds	r25, 0x0515
    468c:	96 30       	cpi	r25, 0x06	; 6
    468e:	09 f4       	brne	.+2      	; 0x4692 <__vector_29+0x3d8>
    4690:	43 c2       	rjmp	.+1158   	; 0x4b18 <__vector_29+0x85e>
    4692:	97 30       	cpi	r25, 0x07	; 7
    4694:	08 f0       	brcs	.+2      	; 0x4698 <__vector_29+0x3de>
    4696:	ce c0       	rjmp	.+412    	; 0x4834 <__vector_29+0x57a>
    4698:	92 30       	cpi	r25, 0x02	; 2
    469a:	09 f4       	brne	.+2      	; 0x469e <__vector_29+0x3e4>
    469c:	a9 c2       	rjmp	.+1362   	; 0x4bf0 <__vector_29+0x936>
    469e:	93 30       	cpi	r25, 0x03	; 3
    46a0:	08 f4       	brcc	.+2      	; 0x46a4 <__vector_29+0x3ea>
    46a2:	6e c1       	rjmp	.+732    	; 0x4980 <__vector_29+0x6c6>
    46a4:	94 30       	cpi	r25, 0x04	; 4
    46a6:	09 f4       	brne	.+2      	; 0x46aa <__vector_29+0x3f0>
    46a8:	d0 c2       	rjmp	.+1440   	; 0x4c4a <__vector_29+0x990>
    46aa:	95 30       	cpi	r25, 0x05	; 5
    46ac:	08 f4       	brcc	.+2      	; 0x46b0 <__vector_29+0x3f6>
    46ae:	bf c2       	rjmp	.+1406   	; 0x4c2e <__vector_29+0x974>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 5;
				break;

			case 5:
				currentAdChannel = currentProx+1;
    46b0:	80 91 34 02 	lds	r24, 0x0234
    46b4:	8f 5f       	subi	r24, 0xFF	; 255
    46b6:	80 93 33 02 	sts	0x0233, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    46ba:	86 e0       	ldi	r24, 0x06	; 6
    46bc:	80 93 c9 02 	sts	0x02C9, r24
				irCommAdcRxState = 6;
    46c0:	80 93 15 05 	sts	0x0515, r24
    46c4:	80 91 ca 02 	lds	r24, 0x02CA
				break;
    46c8:	5f ce       	rjmp	.-834    	; 0x4388 <__vector_29+0xce>
			right_current_avg += value;
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
			break;

		case SAVE_TO_RIGHT_MOTOR_VEL:
			if(firstSampleRight > 0) {
    46ca:	20 91 09 02 	lds	r18, 0x0209
    46ce:	22 23       	and	r18, r18
    46d0:	09 f4       	brne	.+2      	; 0x46d4 <__vector_29+0x41a>
    46d2:	91 ce       	rjmp	.-734    	; 0x43f6 <__vector_29+0x13c>
			    // sometimes it was noticed that the velocity is sampled even if the pwm
			    // is in its active phase; as a workaround simply skip the samples in these
			    // cases
				if(((PINE & _BV(PE3))>>3) || ((PINE & _BV(PE4))>>4)) {  // if active phase for either forward or backward direction
    46d4:	63 99       	sbic	0x0c, 3	; 12
    46d6:	8f ce       	rjmp	.-738    	; 0x43f6 <__vector_29+0x13c>
    46d8:	64 99       	sbic	0x0c, 4	; 12
    46da:	8d ce       	rjmp	.-742    	; 0x43f6 <__vector_29+0x13c>
					//LED_RED_ON;
					break;
				}
				firstSampleRight++;
    46dc:	42 2f       	mov	r20, r18
    46de:	4f 5f       	subi	r20, 0xFF	; 255
    46e0:	40 93 09 02 	sts	0x0209, r20
				if(firstSampleRight > 4) {				// to skip undesired samples (3 samples skipped) in which there could be glitches
    46e4:	45 30       	cpi	r20, 0x05	; 5
    46e6:	08 f4       	brcc	.+2      	; 0x46ea <__vector_29+0x430>
    46e8:	86 ce       	rjmp	.-756    	; 0x43f6 <__vector_29+0x13c>
					if(pwm_right != 0) {
    46ea:	20 91 05 03 	lds	r18, 0x0305
    46ee:	30 91 06 03 	lds	r19, 0x0306
    46f2:	21 15       	cp	r18, r1
    46f4:	31 05       	cpc	r19, r1
    46f6:	51 f0       	breq	.+20     	; 0x470c <__vector_29+0x452>
						right_vel_sum += value;
    46f8:	20 91 ff 02 	lds	r18, 0x02FF
    46fc:	30 91 00 03 	lds	r19, 0x0300
    4700:	28 0f       	add	r18, r24
    4702:	39 1f       	adc	r19, r25
    4704:	30 93 00 03 	sts	0x0300, r19
    4708:	20 93 ff 02 	sts	0x02FF, r18
					}
					if(firstSampleRight==8) {			// number of samples to take for the speed computation (average of 4 samples)
    470c:	48 30       	cpi	r20, 0x08	; 8
    470e:	09 f0       	breq	.+2      	; 0x4712 <__vector_29+0x458>
    4710:	72 ce       	rjmp	.-796    	; 0x43f6 <__vector_29+0x13c>
						firstSampleRight = 0;
    4712:	10 92 09 02 	sts	0x0209, r1
						compute_right_vel = 1;
    4716:	81 e0       	ldi	r24, 0x01	; 1
    4718:	80 93 08 02 	sts	0x0208, r24
    471c:	6c ce       	rjmp	.-808    	; 0x43f6 <__vector_29+0x13c>
			left_current_avg += value;
			left_current_avg = left_current_avg >> 1;
			break;

		case SAVE_TO_LEFT_MOTOR_VEL:
			if(firstSampleLeft > 0) {
    471e:	20 91 0a 02 	lds	r18, 0x020A
    4722:	22 23       	and	r18, r18
    4724:	09 f4       	brne	.+2      	; 0x4728 <__vector_29+0x46e>
    4726:	67 ce       	rjmp	.-818    	; 0x43f6 <__vector_29+0x13c>
				if(((PINH & _BV(PH3))>>3) || ((PINH & _BV(PH4))>>4)) {
    4728:	30 91 00 01 	lds	r19, 0x0100
    472c:	33 fd       	sbrc	r19, 3
    472e:	63 ce       	rjmp	.-826    	; 0x43f6 <__vector_29+0x13c>
    4730:	30 91 00 01 	lds	r19, 0x0100
    4734:	34 fd       	sbrc	r19, 4
    4736:	5f ce       	rjmp	.-834    	; 0x43f6 <__vector_29+0x13c>
					//LED_RED_ON;
					break;
				}
				firstSampleLeft++;
    4738:	42 2f       	mov	r20, r18
    473a:	4f 5f       	subi	r20, 0xFF	; 255
    473c:	40 93 0a 02 	sts	0x020A, r20
				if(firstSampleLeft > 4) {
    4740:	45 30       	cpi	r20, 0x05	; 5
    4742:	08 f4       	brcc	.+2      	; 0x4746 <__vector_29+0x48c>
    4744:	58 ce       	rjmp	.-848    	; 0x43f6 <__vector_29+0x13c>
					if(pwm_left != 0) {
    4746:	20 91 07 03 	lds	r18, 0x0307
    474a:	30 91 08 03 	lds	r19, 0x0308
    474e:	21 15       	cp	r18, r1
    4750:	31 05       	cpc	r19, r1
    4752:	51 f0       	breq	.+20     	; 0x4768 <__vector_29+0x4ae>
						left_vel_sum += value;
    4754:	20 91 fd 02 	lds	r18, 0x02FD
    4758:	30 91 fe 02 	lds	r19, 0x02FE
    475c:	28 0f       	add	r18, r24
    475e:	39 1f       	adc	r19, r25
    4760:	30 93 fe 02 	sts	0x02FE, r19
    4764:	20 93 fd 02 	sts	0x02FD, r18
					}
					if(firstSampleLeft==8) {
    4768:	48 30       	cpi	r20, 0x08	; 8
    476a:	09 f0       	breq	.+2      	; 0x476e <__vector_29+0x4b4>
    476c:	44 ce       	rjmp	.-888    	; 0x43f6 <__vector_29+0x13c>
						firstSampleLeft = 0;
    476e:	10 92 0a 02 	sts	0x020A, r1
						compute_left_vel = 1;
    4772:	81 e0       	ldi	r24, 0x01	; 1
    4774:	80 93 07 02 	sts	0x0207, r24
    4778:	3e ce       	rjmp	.-900    	; 0x43f6 <__vector_29+0x13c>
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
		switch(irCommAdcTxState) {
    477a:	83 30       	cpi	r24, 0x03	; 3
    477c:	09 f4       	brne	.+2      	; 0x4780 <__vector_29+0x4c6>
    477e:	7c c0       	rjmp	.+248    	; 0x4878 <__vector_29+0x5be>
    4780:	84 30       	cpi	r24, 0x04	; 4
    4782:	09 f0       	breq	.+2      	; 0x4786 <__vector_29+0x4cc>
    4784:	ff cd       	rjmp	.-1026   	; 0x4384 <__vector_29+0xca>
				}
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ2;
				break;

			case IRCOMM_TX_ADC_TRANSMISSION_SEQ2:
				irCommTxDurationCycle++;
    4786:	20 91 46 05 	lds	r18, 0x0546
    478a:	2f 5f       	subi	r18, 0xFF	; 255
    478c:	20 93 46 05 	sts	0x0546, r18
				if(irCommTxDurationCycle == irCommTxDuration) {
    4790:	30 e0       	ldi	r19, 0x00	; 0
    4792:	80 91 42 05 	lds	r24, 0x0542
    4796:	90 91 43 05 	lds	r25, 0x0543
    479a:	28 17       	cp	r18, r24
    479c:	39 07       	cpc	r19, r25
    479e:	09 f4       	brne	.+2      	; 0x47a2 <__vector_29+0x4e8>
    47a0:	08 c1       	rjmp	.+528    	; 0x49b2 <__vector_29+0x6f8>
						irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;
						adcSaveDataTo = SKIP_SAMPLE;
						break;
					}
				}
				currentAdChannel = currentMotLeftChannel;
    47a2:	80 91 35 02 	lds	r24, 0x0235
    47a6:	80 93 33 02 	sts	0x0233, r24
				leftChannelPhase = leftMotorPhase;
    47aa:	80 91 38 02 	lds	r24, 0x0238
    47ae:	80 93 cc 02 	sts	0x02CC, r24
				if(rightChannelPhase == ACTIVE_PHASE) {
    47b2:	80 91 cb 02 	lds	r24, 0x02CB
    47b6:	88 23       	and	r24, r24
    47b8:	09 f4       	brne	.+2      	; 0x47bc <__vector_29+0x502>
    47ba:	cf c0       	rjmp	.+414    	; 0x495a <__vector_29+0x6a0>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    47bc:	81 30       	cpi	r24, 0x01	; 1
    47be:	09 f4       	brne	.+2      	; 0x47c2 <__vector_29+0x508>
    47c0:	b5 c2       	rjmp	.+1386   	; 0x4d2c <__vector_29+0xa72>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    47c2:	85 e0       	ldi	r24, 0x05	; 5
    47c4:	80 93 c9 02 	sts	0x02C9, r24
				}
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ1;
    47c8:	83 e0       	ldi	r24, 0x03	; 3
    47ca:	80 93 38 05 	sts	0x0538, r24
    47ce:	80 91 ca 02 	lds	r24, 0x02CA
				break;
    47d2:	da cd       	rjmp	.-1100   	; 0x4388 <__vector_29+0xce>
				adcSaveDataTo = SKIP_SAMPLE;
				break;

		}
	} else if(irCommMode==IRCOMM_MODE_SENSORS_SAMPLING) {
		switch(adcSamplingState) {
    47d4:	83 30       	cpi	r24, 0x03	; 3
    47d6:	09 f4       	brne	.+2      	; 0x47da <__vector_29+0x520>
    47d8:	37 c1       	rjmp	.+622    	; 0x4a48 <__vector_29+0x78e>
    47da:	84 30       	cpi	r24, 0x04	; 4
    47dc:	09 f0       	breq	.+2      	; 0x47e0 <__vector_29+0x526>
    47de:	d4 cd       	rjmp	.-1112   	; 0x4388 <__vector_29+0xce>
				}
				adcSamplingState = 4;
				break;

			case 4:	// right motor
				currentAdChannel = currentMotRightChannel;
    47e0:	90 91 36 02 	lds	r25, 0x0236
    47e4:	90 93 33 02 	sts	0x0233, r25
				rightChannelPhase = rightMotorPhase;
    47e8:	90 91 37 02 	lds	r25, 0x0237
    47ec:	90 93 cb 02 	sts	0x02CB, r25
				if(leftChannelPhase == ACTIVE_PHASE) {
    47f0:	90 91 cc 02 	lds	r25, 0x02CC
    47f4:	99 23       	and	r25, r25
    47f6:	09 f0       	breq	.+2      	; 0x47fa <__vector_29+0x540>
    47f8:	6a c1       	rjmp	.+724    	; 0x4ace <__vector_29+0x814>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    47fa:	83 e0       	ldi	r24, 0x03	; 3
    47fc:	80 93 c9 02 	sts	0x02C9, r24
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 0;
    4800:	10 92 ca 02 	sts	0x02CA, r1

				if(currentProx==14 && measBattery==1) {
    4804:	60 91 34 02 	lds	r22, 0x0234
    4808:	6e 30       	cpi	r22, 0x0E	; 14
    480a:	09 f4       	brne	.+2      	; 0x480e <__vector_29+0x554>
    480c:	2c c2       	rjmp	.+1112   	; 0x4c66 <__vector_29+0x9ac>
					measBattery=2;
					SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
				}

				// turn on the IR pulses for the proximities only in their active phases
				if(currentProx & 0x01) {
    480e:	86 2f       	mov	r24, r22
    4810:	90 e0       	ldi	r25, 0x00	; 0
    4812:	60 ff       	sbrs	r22, 0
    4814:	b7 cd       	rjmp	.-1170   	; 0x4384 <__vector_29+0xca>
					if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
    4816:	60 31       	cpi	r22, 0x10	; 16
    4818:	08 f0       	brcs	.+2      	; 0x481c <__vector_29+0x562>
    481a:	33 c2       	rjmp	.+1126   	; 0x4c82 <__vector_29+0x9c8>
											// PORTA for proximity sensors, PORTJ for ground sensors
						PORTA = (1 << (currentProx>>1));	// pulse on
    481c:	66 95       	lsr	r22
    481e:	81 e0       	ldi	r24, 0x01	; 1
    4820:	90 e0       	ldi	r25, 0x00	; 0
    4822:	02 c0       	rjmp	.+4      	; 0x4828 <__vector_29+0x56e>
    4824:	88 0f       	add	r24, r24
    4826:	99 1f       	adc	r25, r25
    4828:	6a 95       	dec	r22
    482a:	e2 f7       	brpl	.-8      	; 0x4824 <__vector_29+0x56a>
    482c:	82 b9       	out	0x02, r24	; 2
    482e:	80 91 ca 02 	lds	r24, 0x02CA
    4832:	aa cd       	rjmp	.-1196   	; 0x4388 <__vector_29+0xce>
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
    4834:	99 30       	cpi	r25, 0x09	; 9
    4836:	09 f4       	brne	.+2      	; 0x483a <__vector_29+0x580>
    4838:	c3 c1       	rjmp	.+902    	; 0x4bc0 <__vector_29+0x906>
    483a:	9a 30       	cpi	r25, 0x0A	; 10
    483c:	08 f0       	brcs	.+2      	; 0x4840 <__vector_29+0x586>
    483e:	91 c0       	rjmp	.+290    	; 0x4962 <__vector_29+0x6a8>
    4840:	97 30       	cpi	r25, 0x07	; 7
    4842:	09 f4       	brne	.+2      	; 0x4846 <__vector_29+0x58c>
    4844:	e3 c1       	rjmp	.+966    	; 0x4c0c <__vector_29+0x952>
    4846:	98 30       	cpi	r25, 0x08	; 8
    4848:	09 f0       	breq	.+2      	; 0x484c <__vector_29+0x592>
    484a:	9c cd       	rjmp	.-1224   	; 0x4384 <__vector_29+0xca>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 8;
				break;

			case 8:
				currentAdChannel = currentMotRightChannel;
    484c:	80 91 36 02 	lds	r24, 0x0236
    4850:	80 93 33 02 	sts	0x0233, r24
				rightChannelPhase = rightMotorPhase;
    4854:	80 91 37 02 	lds	r24, 0x0237
    4858:	80 93 cb 02 	sts	0x02CB, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    485c:	80 91 cc 02 	lds	r24, 0x02CC
    4860:	88 23       	and	r24, r24
    4862:	09 f0       	breq	.+2      	; 0x4866 <__vector_29+0x5ac>
    4864:	67 c2       	rjmp	.+1230   	; 0x4d34 <__vector_29+0xa7a>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    4866:	83 e0       	ldi	r24, 0x03	; 3
    4868:	80 93 c9 02 	sts	0x02C9, r24
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				irCommAdcRxState = 9;
    486c:	89 e0       	ldi	r24, 0x09	; 9
    486e:	80 93 15 05 	sts	0x0515, r24
    4872:	80 91 ca 02 	lds	r24, 0x02CA
				break;
    4876:	88 cd       	rjmp	.-1264   	; 0x4388 <__vector_29+0xce>

			case IRCOMM_TX_ADC_WAIT_PREPARATION:
				break;

			case IRCOMM_TX_ADC_TRANSMISSION_SEQ1:
				irCommTxDurationCycle++;
    4878:	20 91 46 05 	lds	r18, 0x0546
    487c:	2f 5f       	subi	r18, 0xFF	; 255
    487e:	20 93 46 05 	sts	0x0546, r18
				if(irCommTxDurationCycle == irCommTxDuration) {
    4882:	30 e0       	ldi	r19, 0x00	; 0
    4884:	80 91 42 05 	lds	r24, 0x0542
    4888:	90 91 43 05 	lds	r25, 0x0543
    488c:	28 17       	cp	r18, r24
    488e:	39 07       	cpc	r19, r25
    4890:	09 f4       	brne	.+2      	; 0x4894 <__vector_29+0x5da>
    4892:	be c0       	rjmp	.+380    	; 0x4a10 <__vector_29+0x756>
						irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;						
						adcSaveDataTo = SKIP_SAMPLE;
						break;
					}
				}	
				currentAdChannel = currentMotRightChannel;
    4894:	80 91 36 02 	lds	r24, 0x0236
    4898:	80 93 33 02 	sts	0x0233, r24
				rightChannelPhase = rightMotorPhase;
    489c:	80 91 37 02 	lds	r24, 0x0237
    48a0:	80 93 cb 02 	sts	0x02CB, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    48a4:	80 91 cc 02 	lds	r24, 0x02CC
    48a8:	88 23       	and	r24, r24
    48aa:	09 f4       	brne	.+2      	; 0x48ae <__vector_29+0x5f4>
    48ac:	52 c0       	rjmp	.+164    	; 0x4952 <__vector_29+0x698>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    48ae:	81 30       	cpi	r24, 0x01	; 1
    48b0:	09 f4       	brne	.+2      	; 0x48b4 <__vector_29+0x5fa>
    48b2:	38 c2       	rjmp	.+1136   	; 0x4d24 <__vector_29+0xa6a>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    48b4:	85 e0       	ldi	r24, 0x05	; 5
    48b6:	80 93 c9 02 	sts	0x02C9, r24
				}
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ2;
    48ba:	84 e0       	ldi	r24, 0x04	; 4
    48bc:	80 93 38 05 	sts	0x0538, r24
    48c0:	80 91 ca 02 	lds	r24, 0x02CA
				break;
    48c4:	61 cd       	rjmp	.-1342   	; 0x4388 <__vector_29+0xce>
	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
		switch(irCommAdcTxState) {
			case IRCOMM_TX_ADC_TURN_OFF_SENSORS:
				// turn off all proximity
				if(hardwareRevision == HW_REV_3_0) {
    48c6:	20 91 67 04 	lds	r18, 0x0467
    48ca:	22 23       	and	r18, r18
    48cc:	01 f5       	brne	.+64     	; 0x490e <__vector_29+0x654>
					PORTJ &= 0xF0;	// ground
    48ce:	80 91 05 01 	lds	r24, 0x0105
    48d2:	80 7f       	andi	r24, 0xF0	; 240
    48d4:	80 93 05 01 	sts	0x0105, r24
					PORTA = 0x00;	// proximity
    48d8:	12 b8       	out	0x02, r1	; 2

				if(hardwareRevision == HW_REV_3_1) {
					PORTJ = 0xFF;	// ground
					PORTA = 0x00;	// proximtiy
				}
				currentAdChannel = currentMotLeftChannel;
    48da:	80 91 35 02 	lds	r24, 0x0235
    48de:	80 93 33 02 	sts	0x0233, r24
				leftChannelPhase = leftMotorPhase;
    48e2:	80 91 38 02 	lds	r24, 0x0238
    48e6:	80 93 cc 02 	sts	0x02CC, r24
				adcSaveDataTo = SKIP_SAMPLE;				
    48ea:	85 e0       	ldi	r24, 0x05	; 5
    48ec:	80 93 c9 02 	sts	0x02C9, r24
				irCommState = IRCOMM_TX_PREPARE_TRANSMISSION;
    48f0:	80 93 e9 04 	sts	0x04E9, r24
				irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;
    48f4:	82 e0       	ldi	r24, 0x02	; 2
    48f6:	80 93 38 05 	sts	0x0538, r24
				if(irCommTxSensorGroup==0) {
    48fa:	80 91 48 05 	lds	r24, 0x0548
    48fe:	88 23       	and	r24, r24
    4900:	19 f5       	brne	.+70     	; 0x4948 <__vector_29+0x68e>
					irCommTxSensorGroup = 1;
    4902:	81 e0       	ldi	r24, 0x01	; 1
    4904:	80 93 48 05 	sts	0x0548, r24
    4908:	80 91 ca 02 	lds	r24, 0x02CA
    490c:	3d cd       	rjmp	.-1414   	; 0x4388 <__vector_29+0xce>
				if(hardwareRevision == HW_REV_3_0) {
					PORTJ &= 0xF0;	// ground
					PORTA = 0x00;	// proximity
				}

				if(hardwareRevision == HW_REV_3_0_1) {
    490e:	21 30       	cpi	r18, 0x01	; 1
    4910:	11 f0       	breq	.+4      	; 0x4916 <__vector_29+0x65c>
					PORTJ = 0xFF;	// ground
					PORTA = 0x00;	// proximity
				}

				if(hardwareRevision == HW_REV_3_1) {
    4912:	22 30       	cpi	r18, 0x02	; 2
    4914:	11 f7       	brne	.-60     	; 0x48da <__vector_29+0x620>
					PORTJ = 0xFF;	// ground
    4916:	8f ef       	ldi	r24, 0xFF	; 255
    4918:	80 93 05 01 	sts	0x0105, r24
					PORTA = 0x00;	// proximtiy
    491c:	12 b8       	out	0x02, r1	; 2
    491e:	dd cf       	rjmp	.-70     	; 0x48da <__vector_29+0x620>
		}
	} else if(irCommMode==IRCOMM_MODE_SENSORS_SAMPLING) {
		switch(adcSamplingState) {

			case 0:	// proximity
				currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
    4920:	80 91 34 02 	lds	r24, 0x0234
    4924:	86 95       	lsr	r24
    4926:	80 93 33 02 	sts	0x0233, r24
																// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
				if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
    492a:	80 91 cb 02 	lds	r24, 0x02CB
    492e:	88 23       	and	r24, r24
    4930:	09 f0       	breq	.+2      	; 0x4934 <__vector_29+0x67a>
    4932:	bf c0       	rjmp	.+382    	; 0x4ab2 <__vector_29+0x7f8>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    4934:	81 e0       	ldi	r24, 0x01	; 1
    4936:	80 93 c9 02 	sts	0x02C9, r24
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 1;
    493a:	81 e0       	ldi	r24, 0x01	; 1
    493c:	80 93 ca 02 	sts	0x02CA, r24
				break;
    4940:	23 cd       	rjmp	.-1466   	; 0x4388 <__vector_29+0xce>
					} else {
						cliffDetectedFlag = 0;
						//LED_RED_OFF;
					}
				} else {
					cliffDetectedFlag = 0;
    4942:	10 92 8a 04 	sts	0x048A, r1
    4946:	27 ce       	rjmp	.-946    	; 0x4596 <__vector_29+0x2dc>
				irCommState = IRCOMM_TX_PREPARE_TRANSMISSION;
				irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;
				if(irCommTxSensorGroup==0) {
					irCommTxSensorGroup = 1;
				} else {
					irCommTxSensorGroup = 0;
    4948:	10 92 48 05 	sts	0x0548, r1
    494c:	80 91 ca 02 	lds	r24, 0x02CA
    4950:	1b cd       	rjmp	.-1482   	; 0x4388 <__vector_29+0xce>
					}
				}	
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    4952:	83 e0       	ldi	r24, 0x03	; 3
    4954:	80 93 c9 02 	sts	0x02C9, r24
    4958:	b0 cf       	rjmp	.-160    	; 0x48ba <__vector_29+0x600>
					}
				}
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    495a:	81 e0       	ldi	r24, 0x01	; 1
    495c:	80 93 c9 02 	sts	0x02C9, r24
    4960:	33 cf       	rjmp	.-410    	; 0x47c8 <__vector_29+0x50e>
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
    4962:	9b 30       	cpi	r25, 0x0B	; 11
    4964:	09 f4       	brne	.+2      	; 0x4968 <__vector_29+0x6ae>
    4966:	0f c1       	rjmp	.+542    	; 0x4b86 <__vector_29+0x8cc>
    4968:	9b 30       	cpi	r25, 0x0B	; 11
    496a:	08 f4       	brcc	.+2      	; 0x496e <__vector_29+0x6b4>
    496c:	e2 c0       	rjmp	.+452    	; 0x4b32 <__vector_29+0x878>
    496e:	9c 30       	cpi	r25, 0x0C	; 12
    4970:	09 f0       	breq	.+2      	; 0x4974 <__vector_29+0x6ba>
    4972:	08 cd       	rjmp	.-1520   	; 0x4384 <__vector_29+0xca>
				}
				irCommAdcRxState = 0;
				break;

			case 12:
				adcSaveDataTo = SKIP_SAMPLE;
    4974:	85 e0       	ldi	r24, 0x05	; 5
    4976:	80 93 c9 02 	sts	0x02C9, r24
    497a:	80 91 ca 02 	lds	r24, 0x02CA
				break;
    497e:	04 cd       	rjmp	.-1528   	; 0x4388 <__vector_29+0xce>
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
    4980:	99 23       	and	r25, r25
    4982:	09 f4       	brne	.+2      	; 0x4986 <__vector_29+0x6cc>
    4984:	11 c1       	rjmp	.+546    	; 0x4ba8 <__vector_29+0x8ee>
    4986:	91 30       	cpi	r25, 0x01	; 1
    4988:	09 f0       	breq	.+2      	; 0x498c <__vector_29+0x6d2>
    498a:	fc cc       	rjmp	.-1544   	; 0x4384 <__vector_29+0xca>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 1;
				break;

			case 1:
				currentAdChannel = currentProx+1;
    498c:	80 91 34 02 	lds	r24, 0x0234
    4990:	8f 5f       	subi	r24, 0xFF	; 255
    4992:	80 93 33 02 	sts	0x0233, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    4996:	86 e0       	ldi	r24, 0x06	; 6
    4998:	80 93 c9 02 	sts	0x02C9, r24
				irCommAdcRxState = 2;
    499c:	82 e0       	ldi	r24, 0x02	; 2
    499e:	80 93 15 05 	sts	0x0515, r24
    49a2:	80 91 ca 02 	lds	r24, 0x02CA
				break;
    49a6:	f0 cc       	rjmp	.-1568   	; 0x4388 <__vector_29+0xce>
					irCommMode = IRCOMM_MODE_RECEIVE;					
				}
				if(irCommEnabled==IRCOMM_MODE_TRANSMIT && currentProx==23) {
					irCommMode = IRCOMM_MODE_TRANSMIT;
					if(irCommTxByteEnqueued==1) {
						irCommAdcTxState = IRCOMM_TX_ADC_TURN_OFF_SENSORS;
    49a8:	80 93 38 05 	sts	0x0538, r24
    49ac:	80 91 ca 02 	lds	r24, 0x02CA
    49b0:	eb cc       	rjmp	.-1578   	; 0x4388 <__vector_29+0xce>
				break;

			case IRCOMM_TX_ADC_TRANSMISSION_SEQ2:
				irCommTxDurationCycle++;
				if(irCommTxDurationCycle == irCommTxDuration) {
					irCommTxDurationCycle = 0;
    49b2:	10 92 46 05 	sts	0x0546, r1
					if(irCommTxPulseState == 0) {
    49b6:	80 91 41 05 	lds	r24, 0x0541
    49ba:	88 23       	and	r24, r24
    49bc:	09 f0       	breq	.+2      	; 0x49c0 <__vector_29+0x706>
    49be:	a7 c1       	rjmp	.+846    	; 0x4d0e <__vector_29+0xa54>
						irCommTxPulseState = 1;
    49c0:	81 e0       	ldi	r24, 0x01	; 1
    49c2:	80 93 41 05 	sts	0x0541, r24
						//PORTA = 0xFF;
						//PORTA = 0x01;
						//PORTA = irCommTxSensorMask;
						if(irCommTxSensorGroup==0) {
    49c6:	80 91 48 05 	lds	r24, 0x0548
    49ca:	88 23       	and	r24, r24
    49cc:	09 f0       	breq	.+2      	; 0x49d0 <__vector_29+0x716>
    49ce:	e2 c1       	rjmp	.+964    	; 0x4d94 <__vector_29+0xada>
							PORTA = 0xAA;
    49d0:	8a ea       	ldi	r24, 0xAA	; 170
    49d2:	82 b9       	out	0x02, r24	; 2
						}
					} else {
						irCommTxPulseState = 0;
						PORTA = 0x00;
					}
					irCommTxSwitchCounter++;
    49d4:	80 91 45 05 	lds	r24, 0x0545
    49d8:	8f 5f       	subi	r24, 0xFF	; 255
    49da:	80 93 45 05 	sts	0x0545, r24
					if(irCommTxSwitchCounter == irCommTxSwitchCount) {
    49de:	90 91 44 05 	lds	r25, 0x0544
    49e2:	89 17       	cp	r24, r25
    49e4:	09 f0       	breq	.+2      	; 0x49e8 <__vector_29+0x72e>
    49e6:	dd ce       	rjmp	.-582    	; 0x47a2 <__vector_29+0x4e8>
						irCommTxBitCount++;
    49e8:	80 91 40 05 	lds	r24, 0x0540
    49ec:	8f 5f       	subi	r24, 0xFF	; 255
    49ee:	80 93 40 05 	sts	0x0540, r24
						if(irCommTxBitCount==12) {
    49f2:	8c 30       	cpi	r24, 0x0C	; 12
    49f4:	09 f4       	brne	.+2      	; 0x49f8 <__vector_29+0x73e>
    49f6:	5b c2       	rjmp	.+1206   	; 0x4eae <__vector_29+0xbf4>
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
							irCommInitReceiver();
							PORTA = 0x00;
							irCommTxLastTransmissionTime = getTime100MicroSec();
						} else {
							irCommState = IRCOMM_TX_COMPUTE_TIMINGS;
    49f8:	82 e0       	ldi	r24, 0x02	; 2
    49fa:	80 93 e9 04 	sts	0x04E9, r24
						}
						irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;
    49fe:	82 e0       	ldi	r24, 0x02	; 2
    4a00:	80 93 38 05 	sts	0x0538, r24
						adcSaveDataTo = SKIP_SAMPLE;
    4a04:	85 e0       	ldi	r24, 0x05	; 5
    4a06:	80 93 c9 02 	sts	0x02C9, r24
    4a0a:	80 91 ca 02 	lds	r24, 0x02CA
						break;
    4a0e:	bc cc       	rjmp	.-1672   	; 0x4388 <__vector_29+0xce>
				break;

			case IRCOMM_TX_ADC_TRANSMISSION_SEQ1:
				irCommTxDurationCycle++;
				if(irCommTxDurationCycle == irCommTxDuration) {
					irCommTxDurationCycle = 0;
    4a10:	10 92 46 05 	sts	0x0546, r1
					if(irCommTxPulseState == 0) {
    4a14:	80 91 41 05 	lds	r24, 0x0541
    4a18:	88 23       	and	r24, r24
    4a1a:	09 f0       	breq	.+2      	; 0x4a1e <__vector_29+0x764>
    4a1c:	74 c1       	rjmp	.+744    	; 0x4d06 <__vector_29+0xa4c>
						irCommTxPulseState = 1;
    4a1e:	81 e0       	ldi	r24, 0x01	; 1
    4a20:	80 93 41 05 	sts	0x0541, r24
						//PORTA = 0xFF;
						//PORTA = 0x01;
						//PORTA = irCommTxSensorMask;
						if(irCommTxSensorGroup==0) {
    4a24:	80 91 48 05 	lds	r24, 0x0548
    4a28:	88 23       	and	r24, r24
    4a2a:	09 f0       	breq	.+2      	; 0x4a2e <__vector_29+0x774>
    4a2c:	b0 c1       	rjmp	.+864    	; 0x4d8e <__vector_29+0xad4>
							PORTA = 0xAA;
    4a2e:	8a ea       	ldi	r24, 0xAA	; 170
    4a30:	82 b9       	out	0x02, r24	; 2
						}
					} else {
						irCommTxPulseState = 0;
						PORTA = 0x00;
					}
					irCommTxSwitchCounter++;
    4a32:	80 91 45 05 	lds	r24, 0x0545
    4a36:	8f 5f       	subi	r24, 0xFF	; 255
    4a38:	80 93 45 05 	sts	0x0545, r24
					if(irCommTxSwitchCounter == irCommTxSwitchCount) {
    4a3c:	90 91 44 05 	lds	r25, 0x0544
    4a40:	89 17       	cp	r24, r25
    4a42:	09 f0       	breq	.+2      	; 0x4a46 <__vector_29+0x78c>
    4a44:	27 cf       	rjmp	.-434    	; 0x4894 <__vector_29+0x5da>
    4a46:	d0 cf       	rjmp	.-96     	; 0x49e8 <__vector_29+0x72e>
				}
				adcSamplingState = 3;
				break;

			case 3:	// left motor
				currentAdChannel = currentMotLeftChannel;
    4a48:	80 91 35 02 	lds	r24, 0x0235
    4a4c:	80 93 33 02 	sts	0x0233, r24
				leftChannelPhase = leftMotorPhase;
    4a50:	80 91 38 02 	lds	r24, 0x0238
    4a54:	80 93 cc 02 	sts	0x02CC, r24
				if(rightChannelPhase == ACTIVE_PHASE) {
    4a58:	80 91 cb 02 	lds	r24, 0x02CB
    4a5c:	88 23       	and	r24, r24
    4a5e:	e9 f5       	brne	.+122    	; 0x4ada <__vector_29+0x820>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    4a60:	81 e0       	ldi	r24, 0x01	; 1
    4a62:	80 93 c9 02 	sts	0x02C9, r24
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 4;
    4a66:	84 e0       	ldi	r24, 0x04	; 4
    4a68:	80 93 ca 02 	sts	0x02CA, r24
				break;
    4a6c:	8d cc       	rjmp	.-1766   	; 0x4388 <__vector_29+0xce>
					}
				}
				break;

			case 2:	// right motor
				currentAdChannel = currentMotRightChannel;
    4a6e:	80 91 36 02 	lds	r24, 0x0236
    4a72:	80 93 33 02 	sts	0x0233, r24
				rightChannelPhase = rightMotorPhase;
    4a76:	80 91 37 02 	lds	r24, 0x0237
    4a7a:	80 93 cb 02 	sts	0x02CB, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    4a7e:	80 91 cc 02 	lds	r24, 0x02CC
    4a82:	88 23       	and	r24, r24
    4a84:	e9 f4       	brne	.+58     	; 0x4ac0 <__vector_29+0x806>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    4a86:	83 e0       	ldi	r24, 0x03	; 3
    4a88:	80 93 c9 02 	sts	0x02C9, r24
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 3;
    4a8c:	83 e0       	ldi	r24, 0x03	; 3
    4a8e:	80 93 ca 02 	sts	0x02CA, r24
				break;
    4a92:	7a cc       	rjmp	.-1804   	; 0x4388 <__vector_29+0xce>
			}
			currentProx++;
			break;

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    4a94:	20 91 cf 02 	lds	r18, 0x02CF
    4a98:	22 30       	cpi	r18, 0x02	; 2
    4a9a:	09 f0       	breq	.+2      	; 0x4a9e <__vector_29+0x7e4>
    4a9c:	f9 cc       	rjmp	.-1550   	; 0x4490 <__vector_29+0x1d6>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
    4a9e:	90 93 ce 02 	sts	0x02CE, r25
    4aa2:	80 93 cd 02 	sts	0x02CD, r24
				measBattery = 0;
    4aa6:	10 92 cf 02 	sts	0x02CF, r1
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
    4aaa:	46 98       	cbi	0x08, 6	; 8
    4aac:	2e e0       	ldi	r18, 0x0E	; 14
    4aae:	30 e0       	ldi	r19, 0x00	; 0
    4ab0:	f8 cc       	rjmp	.-1552   	; 0x44a2 <__vector_29+0x1e8>
			case 0:	// proximity
				currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
																// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
				if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    4ab2:	81 30       	cpi	r24, 0x01	; 1
    4ab4:	09 f4       	brne	.+2      	; 0x4ab8 <__vector_29+0x7fe>
    4ab6:	48 c1       	rjmp	.+656    	; 0x4d48 <__vector_29+0xa8e>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4ab8:	85 e0       	ldi	r24, 0x05	; 5
    4aba:	80 93 c9 02 	sts	0x02C9, r24
    4abe:	3d cf       	rjmp	.-390    	; 0x493a <__vector_29+0x680>
			case 2:	// right motor
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    4ac0:	81 30       	cpi	r24, 0x01	; 1
    4ac2:	09 f4       	brne	.+2      	; 0x4ac6 <__vector_29+0x80c>
    4ac4:	3d c1       	rjmp	.+634    	; 0x4d40 <__vector_29+0xa86>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4ac6:	85 e0       	ldi	r24, 0x05	; 5
    4ac8:	80 93 c9 02 	sts	0x02C9, r24
    4acc:	df cf       	rjmp	.-66     	; 0x4a8c <__vector_29+0x7d2>
			case 4:	// right motor
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    4ace:	91 30       	cpi	r25, 0x01	; 1
    4ad0:	09 f0       	breq	.+2      	; 0x4ad4 <__vector_29+0x81a>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4ad2:	85 e0       	ldi	r24, 0x05	; 5
    4ad4:	80 93 c9 02 	sts	0x02C9, r24
    4ad8:	93 ce       	rjmp	.-730    	; 0x4800 <__vector_29+0x546>
			case 3:	// left motor
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    4ada:	81 30       	cpi	r24, 0x01	; 1
    4adc:	09 f4       	brne	.+2      	; 0x4ae0 <__vector_29+0x826>
    4ade:	38 c1       	rjmp	.+624    	; 0x4d50 <__vector_29+0xa96>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4ae0:	85 e0       	ldi	r24, 0x05	; 5
    4ae2:	80 93 c9 02 	sts	0x02C9, r24
    4ae6:	bf cf       	rjmp	.-130    	; 0x4a66 <__vector_29+0x7ac>
					proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
				//} else {	// ground
				//	proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx];
				//}
				if(proximityResult[currentProx>>1] < 0) {
					proximityResult[currentProx>>1] = 0;
    4ae8:	11 82       	std	Z+1, r1	; 0x01
    4aea:	10 82       	st	Z, r1
    4aec:	80 e0       	ldi	r24, 0x00	; 0
    4aee:	90 e0       	ldi	r25, 0x00	; 0
    4af0:	05 cd       	rjmp	.-1526   	; 0x44fc <__vector_29+0x242>
					
					if(proximityResult[currentProx>>1] < PHASE1) {

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
    4af2:	ac 01       	movw	r20, r24
    4af4:	44 5c       	subi	r20, 0xC4	; 196
    4af6:	5f 4f       	sbci	r21, 0xFF	; 255
    4af8:	55 95       	asr	r21
    4afa:	47 95       	ror	r20
    4afc:	48 37       	cpi	r20, 0x78	; 120
    4afe:	51 05       	cpc	r21, r1
    4b00:	0c f0       	brlt	.+2      	; 0x4b04 <__vector_29+0x84a>
    4b02:	e8 c0       	rjmp	.+464    	; 0x4cd4 <__vector_29+0xa1a>
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;
    4b04:	2f 52       	subi	r18, 0x2F	; 47
    4b06:	3d 4f       	sbci	r19, 0xFD	; 253
    4b08:	cc 97       	sbiw	r24, 0x3c	; 60
    4b0a:	95 95       	asr	r25
    4b0c:	87 95       	ror	r24
    4b0e:	cc 96       	adiw	r24, 0x3c	; 60
    4b10:	f9 01       	movw	r30, r18
    4b12:	91 83       	std	Z+1, r25	; 0x01
    4b14:	80 83       	st	Z, r24
    4b16:	fe cc       	rjmp	.-1540   	; 0x4514 <__vector_29+0x25a>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 6;
				break;

			case 6:
				currentAdChannel = currentProx+1;
    4b18:	80 91 34 02 	lds	r24, 0x0234
    4b1c:	8f 5f       	subi	r24, 0xFF	; 255
    4b1e:	80 93 33 02 	sts	0x0233, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    4b22:	90 93 c9 02 	sts	0x02C9, r25
				irCommAdcRxState = 7;
    4b26:	87 e0       	ldi	r24, 0x07	; 7
    4b28:	80 93 15 05 	sts	0x0515, r24
    4b2c:	80 91 ca 02 	lds	r24, 0x02CA
				break;
    4b30:	2b cc       	rjmp	.-1962   	; 0x4388 <__vector_29+0xce>
				}
				irCommAdcRxState = 10;
				break;

			case 10:
				currentAdChannel = currentMotRightChannel;
    4b32:	80 91 36 02 	lds	r24, 0x0236
    4b36:	80 93 33 02 	sts	0x0233, r24
				rightChannelPhase = rightMotorPhase;
    4b3a:	80 91 37 02 	lds	r24, 0x0237
    4b3e:	80 93 cb 02 	sts	0x02CB, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    4b42:	80 91 cc 02 	lds	r24, 0x02CC
    4b46:	88 23       	and	r24, r24
    4b48:	09 f0       	breq	.+2      	; 0x4b4c <__vector_29+0x892>
    4b4a:	e5 c0       	rjmp	.+458    	; 0x4d16 <__vector_29+0xa5c>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    4b4c:	83 e0       	ldi	r24, 0x03	; 3
    4b4e:	80 93 c9 02 	sts	0x02C9, r24
					}
				} else {
					irCommRxWindowSamples++;
				}
				*/
				if(irCommRxBitSkipped < 254) {	// safety check
    4b52:	90 91 2f 05 	lds	r25, 0x052F
    4b56:	9e 3f       	cpi	r25, 0xFE	; 254
    4b58:	18 f4       	brcc	.+6      	; 0x4b60 <__vector_29+0x8a6>
					irCommRxBitSkipped++;
    4b5a:	9f 5f       	subi	r25, 0xFF	; 255
    4b5c:	90 93 2f 05 	sts	0x052F, r25
				}
				irCommRxWindowSamples++;
    4b60:	80 91 16 05 	lds	r24, 0x0516
    4b64:	8f 5f       	subi	r24, 0xFF	; 255
    4b66:	80 93 16 05 	sts	0x0516, r24
				if(irCommState==IRCOMM_RX_SYNC_SIGNAL) {
    4b6a:	20 91 e9 04 	lds	r18, 0x04E9
    4b6e:	24 30       	cpi	r18, 0x04	; 4
    4b70:	09 f4       	brne	.+2      	; 0x4b74 <__vector_29+0x8ba>
    4b72:	02 c1       	rjmp	.+516    	; 0x4d78 <__vector_29+0xabe>
					if(irCommRxBitSkipped >= irCommShiftCount) {
						irCommState = IRCOMM_RX_WAITING_BIT;
					}
				}

				if(irCommRxWindowSamples == IRCOMM_SAMPLING_WINDOW) {					
    4b74:	84 31       	cpi	r24, 0x14	; 20
    4b76:	09 f4       	brne	.+2      	; 0x4b7a <__vector_29+0x8c0>
    4b78:	21 c1       	rjmp	.+578    	; 0x4dbc <__vector_29+0xb02>
				} else {
					irCommTickCounter = 0;
					updateBlueLed(0);
				}
				*/
				irCommAdcRxState = 11;
    4b7a:	8b e0       	ldi	r24, 0x0B	; 11
    4b7c:	80 93 15 05 	sts	0x0515, r24
    4b80:	80 91 ca 02 	lds	r24, 0x02CA
				break;
    4b84:	01 cc       	rjmp	.-2046   	; 0x4388 <__vector_29+0xce>

			case 11:
				currentAdChannel = 0;	// prox0
    4b86:	10 92 33 02 	sts	0x0233, r1
				if(rightChannelPhase == ACTIVE_PHASE) {
    4b8a:	90 91 cb 02 	lds	r25, 0x02CB
    4b8e:	99 23       	and	r25, r25
    4b90:	21 f0       	breq	.+8      	; 0x4b9a <__vector_29+0x8e0>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    4b92:	91 30       	cpi	r25, 0x01	; 1
    4b94:	09 f4       	brne	.+2      	; 0x4b98 <__vector_29+0x8de>
    4b96:	0a c1       	rjmp	.+532    	; 0x4dac <__vector_29+0xaf2>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4b98:	85 e0       	ldi	r24, 0x05	; 5
    4b9a:	80 93 c9 02 	sts	0x02C9, r24
				}
				irCommAdcRxState = 0;
    4b9e:	10 92 15 05 	sts	0x0515, r1
    4ba2:	80 91 ca 02 	lds	r24, 0x02CA
				break;
    4ba6:	f0 cb       	rjmp	.-2080   	; 0x4388 <__vector_29+0xce>

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
			case 0:				
				currentProx = 0;
    4ba8:	10 92 34 02 	sts	0x0234, r1
				currentAdChannel = currentProx+1;				
    4bac:	80 93 33 02 	sts	0x0233, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    4bb0:	96 e0       	ldi	r25, 0x06	; 6
    4bb2:	90 93 c9 02 	sts	0x02C9, r25
				irCommAdcRxState = 1;
    4bb6:	80 93 15 05 	sts	0x0515, r24
    4bba:	80 91 ca 02 	lds	r24, 0x02CA
				break;
    4bbe:	e4 cb       	rjmp	.-2104   	; 0x4388 <__vector_29+0xce>
				}
				irCommAdcRxState = 9;
				break;

			case 9:
				currentAdChannel = currentMotLeftChannel;
    4bc0:	90 91 35 02 	lds	r25, 0x0235
    4bc4:	90 93 33 02 	sts	0x0233, r25
				leftChannelPhase = leftMotorPhase;
    4bc8:	90 91 38 02 	lds	r25, 0x0238
    4bcc:	90 93 cc 02 	sts	0x02CC, r25
				if(rightChannelPhase == ACTIVE_PHASE) {
    4bd0:	90 91 cb 02 	lds	r25, 0x02CB
    4bd4:	99 23       	and	r25, r25
    4bd6:	21 f0       	breq	.+8      	; 0x4be0 <__vector_29+0x926>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    4bd8:	91 30       	cpi	r25, 0x01	; 1
    4bda:	09 f4       	brne	.+2      	; 0x4bde <__vector_29+0x924>
    4bdc:	eb c0       	rjmp	.+470    	; 0x4db4 <__vector_29+0xafa>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4bde:	85 e0       	ldi	r24, 0x05	; 5
    4be0:	80 93 c9 02 	sts	0x02C9, r24
				}
				irCommAdcRxState = 10;
    4be4:	8a e0       	ldi	r24, 0x0A	; 10
    4be6:	80 93 15 05 	sts	0x0515, r24
    4bea:	80 91 ca 02 	lds	r24, 0x02CA
				break;
    4bee:	cc cb       	rjmp	.-2152   	; 0x4388 <__vector_29+0xce>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 2;
				break;

			case 2:
				currentAdChannel = currentProx+1;
    4bf0:	80 91 34 02 	lds	r24, 0x0234
    4bf4:	8f 5f       	subi	r24, 0xFF	; 255
    4bf6:	80 93 33 02 	sts	0x0233, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    4bfa:	86 e0       	ldi	r24, 0x06	; 6
    4bfc:	80 93 c9 02 	sts	0x02C9, r24
				irCommAdcRxState = 3;
    4c00:	83 e0       	ldi	r24, 0x03	; 3
    4c02:	80 93 15 05 	sts	0x0515, r24
    4c06:	80 91 ca 02 	lds	r24, 0x02CA
				break;
    4c0a:	be cb       	rjmp	.-2180   	; 0x4388 <__vector_29+0xce>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 7;
				break;

			case 7:
				currentAdChannel = currentMotLeftChannel;
    4c0c:	80 91 35 02 	lds	r24, 0x0235
    4c10:	80 93 33 02 	sts	0x0233, r24
				leftChannelPhase = leftMotorPhase;
    4c14:	80 91 38 02 	lds	r24, 0x0238
    4c18:	80 93 cc 02 	sts	0x02CC, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    4c1c:	86 e0       	ldi	r24, 0x06	; 6
    4c1e:	80 93 c9 02 	sts	0x02C9, r24
				irCommAdcRxState = 8;
    4c22:	88 e0       	ldi	r24, 0x08	; 8
    4c24:	80 93 15 05 	sts	0x0515, r24
    4c28:	80 91 ca 02 	lds	r24, 0x02CA
				break;
    4c2c:	ad cb       	rjmp	.-2214   	; 0x4388 <__vector_29+0xce>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 3;
				break;

			case 3:
				currentAdChannel = currentProx+1;
    4c2e:	80 91 34 02 	lds	r24, 0x0234
    4c32:	8f 5f       	subi	r24, 0xFF	; 255
    4c34:	80 93 33 02 	sts	0x0233, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    4c38:	86 e0       	ldi	r24, 0x06	; 6
    4c3a:	80 93 c9 02 	sts	0x02C9, r24
				irCommAdcRxState = 4;
    4c3e:	84 e0       	ldi	r24, 0x04	; 4
    4c40:	80 93 15 05 	sts	0x0515, r24
    4c44:	80 91 ca 02 	lds	r24, 0x02CA
				break;
    4c48:	9f cb       	rjmp	.-2242   	; 0x4388 <__vector_29+0xce>

			case 4:
				currentAdChannel = currentProx+1;
    4c4a:	80 91 34 02 	lds	r24, 0x0234
    4c4e:	8f 5f       	subi	r24, 0xFF	; 255
    4c50:	80 93 33 02 	sts	0x0233, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    4c54:	86 e0       	ldi	r24, 0x06	; 6
    4c56:	80 93 c9 02 	sts	0x02C9, r24
				irCommAdcRxState = 5;
    4c5a:	85 e0       	ldi	r24, 0x05	; 5
    4c5c:	80 93 15 05 	sts	0x0515, r24
    4c60:	80 91 ca 02 	lds	r24, 0x02CA
				break;
    4c64:	91 cb       	rjmp	.-2270   	; 0x4388 <__vector_29+0xce>
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 0;

				if(currentProx==14 && measBattery==1) {
    4c66:	80 91 cf 02 	lds	r24, 0x02CF
    4c6a:	81 30       	cpi	r24, 0x01	; 1
    4c6c:	09 f4       	brne	.+2      	; 0x4c70 <__vector_29+0x9b6>
    4c6e:	95 c0       	rjmp	.+298    	; 0x4d9a <__vector_29+0xae0>
    4c70:	80 e0       	ldi	r24, 0x00	; 0
    4c72:	8a cb       	rjmp	.-2284   	; 0x4388 <__vector_29+0xce>
			case 1:	// left motor
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				adcSaveDataTo = SAVE_TO_PROX;
				adcSamplingState = 2;
				if(irCommEnabled==IRCOMM_MODE_RECEIVE && currentProx==23) {					
    4c74:	80 91 34 02 	lds	r24, 0x0234
    4c78:	87 31       	cpi	r24, 0x17	; 23
    4c7a:	09 f4       	brne	.+2      	; 0x4c7e <__vector_29+0x9c4>
    4c7c:	f8 c0       	rjmp	.+496    	; 0x4e6e <__vector_29+0xbb4>
    4c7e:	82 e0       	ldi	r24, 0x02	; 2
    4c80:	83 cb       	rjmp	.-2298   	; 0x4388 <__vector_29+0xce>
				if(currentProx & 0x01) {
					if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
											// PORTA for proximity sensors, PORTJ for ground sensors
						PORTA = (1 << (currentProx>>1));	// pulse on
					} else {
						if(hardwareRevision == HW_REV_3_0) {
    4c82:	20 91 67 04 	lds	r18, 0x0467
    4c86:	22 23       	and	r18, r18
    4c88:	79 f4       	brne	.+30     	; 0x4ca8 <__vector_29+0x9ee>
							PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
    4c8a:	40 97       	sbiw	r24, 0x10	; 16
    4c8c:	95 95       	asr	r25
    4c8e:	87 95       	ror	r24
    4c90:	21 e0       	ldi	r18, 0x01	; 1
    4c92:	30 e0       	ldi	r19, 0x00	; 0
    4c94:	02 c0       	rjmp	.+4      	; 0x4c9a <__vector_29+0x9e0>
    4c96:	22 0f       	add	r18, r18
    4c98:	33 1f       	adc	r19, r19
    4c9a:	8a 95       	dec	r24
    4c9c:	e2 f7       	brpl	.-8      	; 0x4c96 <__vector_29+0x9dc>
    4c9e:	20 93 05 01 	sts	0x0105, r18
    4ca2:	80 91 ca 02 	lds	r24, 0x02CA
    4ca6:	70 cb       	rjmp	.-2336   	; 0x4388 <__vector_29+0xce>
						}

						if(hardwareRevision == HW_REV_3_0_1) {
    4ca8:	21 30       	cpi	r18, 0x01	; 1
    4caa:	19 f0       	breq	.+6      	; 0x4cb2 <__vector_29+0x9f8>
							PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
						}

						if(hardwareRevision == HW_REV_3_1) {
    4cac:	22 30       	cpi	r18, 0x02	; 2
    4cae:	09 f0       	breq	.+2      	; 0x4cb2 <__vector_29+0x9f8>
    4cb0:	69 cb       	rjmp	.-2350   	; 0x4384 <__vector_29+0xca>
							PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
    4cb2:	40 91 05 01 	lds	r20, 0x0105
    4cb6:	40 97       	sbiw	r24, 0x10	; 16
    4cb8:	95 95       	asr	r25
    4cba:	87 95       	ror	r24
    4cbc:	21 e0       	ldi	r18, 0x01	; 1
    4cbe:	30 e0       	ldi	r19, 0x00	; 0
    4cc0:	02 c0       	rjmp	.+4      	; 0x4cc6 <__vector_29+0xa0c>
    4cc2:	22 0f       	add	r18, r18
    4cc4:	33 1f       	adc	r19, r19
    4cc6:	8a 95       	dec	r24
    4cc8:	e2 f7       	brpl	.-8      	; 0x4cc2 <__vector_29+0xa08>
    4cca:	20 95       	com	r18
    4ccc:	24 23       	and	r18, r20
    4cce:	20 93 05 01 	sts	0x0105, r18
    4cd2:	58 cb       	rjmp	.-2384   	; 0x4384 <__vector_29+0xca>

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;

					} else if(((proximityResult[currentProx>>1]+300)>>2) < PHASE3) {
    4cd4:	ac 01       	movw	r20, r24
    4cd6:	44 5d       	subi	r20, 0xD4	; 212
    4cd8:	5e 4f       	sbci	r21, 0xFE	; 254
    4cda:	55 95       	asr	r21
    4cdc:	47 95       	ror	r20
    4cde:	55 95       	asr	r21
    4ce0:	47 95       	ror	r20
    4ce2:	44 3b       	cpi	r20, 0xB4	; 180
    4ce4:	51 05       	cpc	r21, r1
    4ce6:	c4 f5       	brge	.+112    	; 0x4d58 <__vector_29+0xa9e>

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-180)>>2) + PHASE2;
    4ce8:	2f 52       	subi	r18, 0x2F	; 47
    4cea:	3d 4f       	sbci	r19, 0xFD	; 253
    4cec:	84 5b       	subi	r24, 0xB4	; 180
    4cee:	90 40       	sbci	r25, 0x00	; 0
    4cf0:	95 95       	asr	r25
    4cf2:	87 95       	ror	r24
    4cf4:	95 95       	asr	r25
    4cf6:	87 95       	ror	r24
    4cf8:	88 58       	subi	r24, 0x88	; 136
    4cfa:	9f 4f       	sbci	r25, 0xFF	; 255
    4cfc:	d9 01       	movw	r26, r18
    4cfe:	11 96       	adiw	r26, 0x01	; 1
    4d00:	9c 93       	st	X, r25
    4d02:	8e 93       	st	-X, r24
    4d04:	07 cc       	rjmp	.-2034   	; 0x4514 <__vector_29+0x25a>
							PORTA = 0xAA;
						} else {
							PORTA = 0x55;
						}
					} else {
						irCommTxPulseState = 0;
    4d06:	10 92 41 05 	sts	0x0541, r1
						PORTA = 0x00;
    4d0a:	12 b8       	out	0x02, r1	; 2
    4d0c:	92 ce       	rjmp	.-732    	; 0x4a32 <__vector_29+0x778>
							PORTA = 0xAA;
						} else {
							PORTA = 0x55;
						}
					} else {
						irCommTxPulseState = 0;
    4d0e:	10 92 41 05 	sts	0x0541, r1
						PORTA = 0x00;
    4d12:	12 b8       	out	0x02, r1	; 2
    4d14:	5f ce       	rjmp	.-834    	; 0x49d4 <__vector_29+0x71a>
			case 10:
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    4d16:	81 30       	cpi	r24, 0x01	; 1
    4d18:	09 f4       	brne	.+2      	; 0x4d1c <__vector_29+0xa62>
    4d1a:	a5 c0       	rjmp	.+330    	; 0x4e66 <__vector_29+0xbac>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4d1c:	85 e0       	ldi	r24, 0x05	; 5
    4d1e:	80 93 c9 02 	sts	0x02C9, r24
    4d22:	17 cf       	rjmp	.-466    	; 0x4b52 <__vector_29+0x898>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    4d24:	84 e0       	ldi	r24, 0x04	; 4
    4d26:	80 93 c9 02 	sts	0x02C9, r24
    4d2a:	c7 cd       	rjmp	.-1138   	; 0x48ba <__vector_29+0x600>
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    4d2c:	82 e0       	ldi	r24, 0x02	; 2
    4d2e:	80 93 c9 02 	sts	0x02C9, r24
    4d32:	4a cd       	rjmp	.-1388   	; 0x47c8 <__vector_29+0x50e>
			case 8:
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    4d34:	81 30       	cpi	r24, 0x01	; 1
    4d36:	b1 f1       	breq	.+108    	; 0x4da4 <__vector_29+0xaea>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4d38:	85 e0       	ldi	r24, 0x05	; 5
    4d3a:	80 93 c9 02 	sts	0x02C9, r24
    4d3e:	96 cd       	rjmp	.-1236   	; 0x486c <__vector_29+0x5b2>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    4d40:	84 e0       	ldi	r24, 0x04	; 4
    4d42:	80 93 c9 02 	sts	0x02C9, r24
    4d46:	a2 ce       	rjmp	.-700    	; 0x4a8c <__vector_29+0x7d2>
				currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
																// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
				if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    4d48:	82 e0       	ldi	r24, 0x02	; 2
    4d4a:	80 93 c9 02 	sts	0x02C9, r24
    4d4e:	f5 cd       	rjmp	.-1046   	; 0x493a <__vector_29+0x680>
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    4d50:	82 e0       	ldi	r24, 0x02	; 2
    4d52:	80 93 c9 02 	sts	0x02C9, r24
    4d56:	87 ce       	rjmp	.-754    	; 0x4a66 <__vector_29+0x7ac>

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-180)>>2) + PHASE2;

					} else {

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-420)>>3) + PHASE3;
    4d58:	2f 52       	subi	r18, 0x2F	; 47
    4d5a:	3d 4f       	sbci	r19, 0xFD	; 253
    4d5c:	84 5a       	subi	r24, 0xA4	; 164
    4d5e:	91 40       	sbci	r25, 0x01	; 1
    4d60:	95 95       	asr	r25
    4d62:	87 95       	ror	r24
    4d64:	95 95       	asr	r25
    4d66:	87 95       	ror	r24
    4d68:	95 95       	asr	r25
    4d6a:	87 95       	ror	r24
    4d6c:	8c 54       	subi	r24, 0x4C	; 76
    4d6e:	9f 4f       	sbci	r25, 0xFF	; 255
    4d70:	f9 01       	movw	r30, r18
    4d72:	91 83       	std	Z+1, r25	; 0x01
    4d74:	80 83       	st	Z, r24
    4d76:	ce cb       	rjmp	.-2148   	; 0x4514 <__vector_29+0x25a>
				if(irCommRxBitSkipped < 254) {	// safety check
					irCommRxBitSkipped++;
				}
				irCommRxWindowSamples++;
				if(irCommState==IRCOMM_RX_SYNC_SIGNAL) {
					irCommRxWindowSamples = 0;
    4d78:	10 92 16 05 	sts	0x0516, r1
					if(irCommRxBitSkipped >= irCommShiftCount) {
    4d7c:	80 91 20 05 	lds	r24, 0x0520
    4d80:	98 17       	cp	r25, r24
    4d82:	08 f4       	brcc	.+2      	; 0x4d86 <__vector_29+0xacc>
    4d84:	fa ce       	rjmp	.-524    	; 0x4b7a <__vector_29+0x8c0>
						irCommState = IRCOMM_RX_WAITING_BIT;
    4d86:	85 e0       	ldi	r24, 0x05	; 5
    4d88:	80 93 e9 04 	sts	0x04E9, r24
    4d8c:	f6 ce       	rjmp	.-532    	; 0x4b7a <__vector_29+0x8c0>
						//PORTA = 0x01;
						//PORTA = irCommTxSensorMask;
						if(irCommTxSensorGroup==0) {
							PORTA = 0xAA;
						} else {
							PORTA = 0x55;
    4d8e:	85 e5       	ldi	r24, 0x55	; 85
    4d90:	82 b9       	out	0x02, r24	; 2
    4d92:	4f ce       	rjmp	.-866    	; 0x4a32 <__vector_29+0x778>
						//PORTA = 0x01;
						//PORTA = irCommTxSensorMask;
						if(irCommTxSensorGroup==0) {
							PORTA = 0xAA;
						} else {
							PORTA = 0x55;
    4d94:	85 e5       	ldi	r24, 0x55	; 85
    4d96:	82 b9       	out	0x02, r24	; 2
    4d98:	1d ce       	rjmp	.-966    	; 0x49d4 <__vector_29+0x71a>
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 0;

				if(currentProx==14 && measBattery==1) {
					measBattery=2;
    4d9a:	82 e0       	ldi	r24, 0x02	; 2
    4d9c:	80 93 cf 02 	sts	0x02CF, r24
					SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
    4da0:	46 9a       	sbi	0x08, 6	; 8
    4da2:	35 cd       	rjmp	.-1430   	; 0x480e <__vector_29+0x554>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    4da4:	84 e0       	ldi	r24, 0x04	; 4
    4da6:	80 93 c9 02 	sts	0x02C9, r24
    4daa:	60 cd       	rjmp	.-1344   	; 0x486c <__vector_29+0x5b2>
			case 11:
				currentAdChannel = 0;	// prox0
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    4dac:	82 e0       	ldi	r24, 0x02	; 2
    4dae:	80 93 c9 02 	sts	0x02C9, r24
    4db2:	f5 ce       	rjmp	.-534    	; 0x4b9e <__vector_29+0x8e4>
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    4db4:	82 e0       	ldi	r24, 0x02	; 2
    4db6:	80 93 c9 02 	sts	0x02C9, r24
    4dba:	14 cf       	rjmp	.-472    	; 0x4be4 <__vector_29+0x92a>
						irCommState = IRCOMM_RX_WAITING_BIT;
					}
				}

				if(irCommRxWindowSamples == IRCOMM_SAMPLING_WINDOW) {					
					irCommRxWindowSamples = 0;
    4dbc:	10 92 16 05 	sts	0x0516, r1
					irCommTempPointer = irCommProxValuesCurr;
    4dc0:	80 91 61 08 	lds	r24, 0x0861
    4dc4:	90 91 62 08 	lds	r25, 0x0862
					irCommProxValuesCurr = irCommProxValuesAdc;
    4dc8:	20 91 7d 08 	lds	r18, 0x087D
    4dcc:	30 91 7e 08 	lds	r19, 0x087E
    4dd0:	30 93 62 08 	sts	0x0862, r19
    4dd4:	20 93 61 08 	sts	0x0861, r18
					irCommProxValuesAdc = irCommTempPointer;
    4dd8:	90 93 7e 08 	sts	0x087E, r25
    4ddc:	80 93 7d 08 	sts	0x087D, r24
					irCommTempPointer = irCommMaxSensorValueCurr;
    4de0:	50 91 5e 05 	lds	r21, 0x055E
    4de4:	40 91 5f 05 	lds	r20, 0x055F
					irCommMaxSensorValueCurr = irCommMaxSensorValueAdc;
    4de8:	80 91 4b 0b 	lds	r24, 0x0B4B
    4dec:	90 91 4c 0b 	lds	r25, 0x0B4C
    4df0:	90 93 5f 05 	sts	0x055F, r25
    4df4:	80 93 5e 05 	sts	0x055E, r24
					irCommMaxSensorValueAdc = irCommTempPointer;
    4df8:	50 93 4b 0b 	sts	0x0B4B, r21
    4dfc:	40 93 4c 0b 	sts	0x0B4C, r20
					irCommTempPointer = irCommMinSensorValueCurr;
    4e00:	80 91 4a 05 	lds	r24, 0x054A
    4e04:	90 91 4b 05 	lds	r25, 0x054B
    4e08:	90 93 8d 0b 	sts	0x0B8D, r25
    4e0c:	80 93 8c 0b 	sts	0x0B8C, r24
					irCommMinSensorValueCurr = irCommMinSensorValueAdc;
    4e10:	20 91 db 05 	lds	r18, 0x05DB
    4e14:	30 91 dc 05 	lds	r19, 0x05DC
    4e18:	30 93 4b 05 	sts	0x054B, r19
    4e1c:	20 93 4a 05 	sts	0x054A, r18
					irCommMinSensorValueAdc = irCommTempPointer;
    4e20:	90 93 dc 05 	sts	0x05DC, r25
    4e24:	80 93 db 05 	sts	0x05DB, r24
					memset(irCommMaxSensorValueAdc, 0x00, 16);
    4e28:	e5 2f       	mov	r30, r21
    4e2a:	f4 2f       	mov	r31, r20
    4e2c:	80 e1       	ldi	r24, 0x10	; 16
    4e2e:	df 01       	movw	r26, r30
    4e30:	1d 92       	st	X+, r1
    4e32:	8a 95       	dec	r24
    4e34:	e9 f7       	brne	.-6      	; 0x4e30 <__vector_29+0xb76>
					memset(irCommMinSensorValueAdc, 0xFF, 16);
    4e36:	80 91 db 05 	lds	r24, 0x05DB
    4e3a:	90 91 dc 05 	lds	r25, 0x05DC
    4e3e:	6f ef       	ldi	r22, 0xFF	; 255
    4e40:	70 e0       	ldi	r23, 0x00	; 0
    4e42:	40 e1       	ldi	r20, 0x10	; 16
    4e44:	50 e0       	ldi	r21, 0x00	; 0
    4e46:	0e 94 57 59 	call	0xb2ae	; 0xb2ae <memset>
					if(irCommState == IRCOMM_RX_IDLE_STATE) {
    4e4a:	80 91 e9 04 	lds	r24, 0x04E9
    4e4e:	81 30       	cpi	r24, 0x01	; 1
    4e50:	09 f4       	brne	.+2      	; 0x4e54 <__vector_29+0xb9a>
    4e52:	44 c0       	rjmp	.+136    	; 0x4edc <__vector_29+0xc22>
						irCommRxBitSkipped = 0;
					}
					//if(irCommState == IRCOMM_RX_SYNC_SIGNAL) {
					//	irCommSecondBitSkipped = 1;	// the second start bit is just sampled, skip it and sync with the received signal						
					//}
					if(irCommState == IRCOMM_RX_WAITING_BIT) {
    4e54:	80 91 e9 04 	lds	r24, 0x04E9
    4e58:	85 30       	cpi	r24, 0x05	; 5
    4e5a:	09 f0       	breq	.+2      	; 0x4e5e <__vector_29+0xba4>
    4e5c:	8e ce       	rjmp	.-740    	; 0x4b7a <__vector_29+0x8c0>
						irCommState = IRCOMM_RX_READ_BIT;
    4e5e:	86 e0       	ldi	r24, 0x06	; 6
    4e60:	80 93 e9 04 	sts	0x04E9, r24
    4e64:	8a ce       	rjmp	.-748    	; 0x4b7a <__vector_29+0x8c0>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    4e66:	84 e0       	ldi	r24, 0x04	; 4
    4e68:	80 93 c9 02 	sts	0x02C9, r24
    4e6c:	72 ce       	rjmp	.-796    	; 0x4b52 <__vector_29+0x898>
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				adcSaveDataTo = SAVE_TO_PROX;
				adcSamplingState = 2;
				if(irCommEnabled==IRCOMM_MODE_RECEIVE && currentProx==23) {					
					currentAdChannel = 0;	// prox0					
    4e6e:	10 92 33 02 	sts	0x0233, r1
					measBattery = 0;
    4e72:	10 92 cf 02 	sts	0x02CF, r1
					irCommAdcRxState = 0;					
    4e76:	10 92 15 05 	sts	0x0515, r1
					irCommRxWindowSamples = 0;
    4e7a:	10 92 16 05 	sts	0x0516, r1
					memset(irCommMaxSensorValueAdc, 0x00, 16);
    4e7e:	e0 91 4b 0b 	lds	r30, 0x0B4B
    4e82:	f0 91 4c 0b 	lds	r31, 0x0B4C
    4e86:	80 e1       	ldi	r24, 0x10	; 16
    4e88:	df 01       	movw	r26, r30
    4e8a:	1d 92       	st	X+, r1
    4e8c:	8a 95       	dec	r24
    4e8e:	e9 f7       	brne	.-6      	; 0x4e8a <__vector_29+0xbd0>
					memset(irCommMinSensorValueAdc, 0xFF, 16);
    4e90:	80 91 db 05 	lds	r24, 0x05DB
    4e94:	90 91 dc 05 	lds	r25, 0x05DC
    4e98:	6f ef       	ldi	r22, 0xFF	; 255
    4e9a:	70 e0       	ldi	r23, 0x00	; 0
    4e9c:	40 e1       	ldi	r20, 0x10	; 16
    4e9e:	50 e0       	ldi	r21, 0x00	; 0
    4ea0:	0e 94 57 59 	call	0xb2ae	; 0xb2ae <memset>
					irCommMode = IRCOMM_MODE_RECEIVE;					
    4ea4:	10 93 e8 04 	sts	0x04E8, r17
    4ea8:	10 91 e6 04 	lds	r17, 0x04E6
    4eac:	cf ca       	rjmp	.-2658   	; 0x444c <__vector_29+0x192>
					}
					irCommTxSwitchCounter++;
					if(irCommTxSwitchCounter == irCommTxSwitchCount) {
						irCommTxBitCount++;
						if(irCommTxBitCount==12) {
							irCommState = IRCOMM_TX_IDLE_STATE;
    4eae:	81 e0       	ldi	r24, 0x01	; 1
    4eb0:	80 93 e9 04 	sts	0x04E9, r24
							irCommTxByteEnqueued = 0;
    4eb4:	10 92 3a 05 	sts	0x053A, r1
							adcSamplingState = 0;
    4eb8:	10 92 ca 02 	sts	0x02CA, r1
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    4ebc:	10 92 e8 04 	sts	0x04E8, r1
							irCommInitReceiver();
    4ec0:	0e 94 f0 48 	call	0x91e0	; 0x91e0 <irCommInitReceiver>
							PORTA = 0x00;
    4ec4:	12 b8       	out	0x02, r1	; 2
							irCommTxLastTransmissionTime = getTime100MicroSec();
    4ec6:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
    4eca:	60 93 3b 05 	sts	0x053B, r22
    4ece:	70 93 3c 05 	sts	0x053C, r23
    4ed2:	80 93 3d 05 	sts	0x053D, r24
    4ed6:	90 93 3e 05 	sts	0x053E, r25
    4eda:	91 cd       	rjmp	.-1246   	; 0x49fe <__vector_29+0x744>
					irCommMinSensorValueCurr = irCommMinSensorValueAdc;
					irCommMinSensorValueAdc = irCommTempPointer;
					memset(irCommMaxSensorValueAdc, 0x00, 16);
					memset(irCommMinSensorValueAdc, 0xFF, 16);
					if(irCommState == IRCOMM_RX_IDLE_STATE) {
						irCommState = IRCOMM_RX_MAX_SENSOR_STATE;
    4edc:	82 e0       	ldi	r24, 0x02	; 2
    4ede:	80 93 e9 04 	sts	0x04E9, r24
						irCommRxBitSkipped = 0;
    4ee2:	10 92 2f 05 	sts	0x052F, r1
    4ee6:	b6 cf       	rjmp	.-148    	; 0x4e54 <__vector_29+0xb9a>

00004ee8 <initMotors>:

#include "motors.h"

void initMotors() {
    4ee8:	0f 93       	push	r16
    4eea:	1f 93       	push	r17
    4eec:	cf 93       	push	r28
    4eee:	df 93       	push	r29
	// Using 10-bit resolution (waveform generation mode 7) we have a period of: 8000000/1024 = 7812.5 Hz
	// We need to apply a prescaler to the timer in such a way to get the desired period:
	// 7812.5/100 = 78.125 => ideal prescaler, the nearest one is 1/64 and we get a period of:
	// 8000000/64/1024 = 122 Hz

	TCCR3A = 0;
    4ef0:	e0 e9       	ldi	r30, 0x90	; 144
    4ef2:	f0 e0       	ldi	r31, 0x00	; 0
    4ef4:	10 82       	st	Z, r1
	TCCR3B = 0;
    4ef6:	41 e9       	ldi	r20, 0x91	; 145
    4ef8:	50 e0       	ldi	r21, 0x00	; 0
    4efa:	da 01       	movw	r26, r20
    4efc:	1c 92       	st	X, r1
	TIMSK3 = 0;
    4efe:	21 e7       	ldi	r18, 0x71	; 113
    4f00:	30 e0       	ldi	r19, 0x00	; 0
    4f02:	e9 01       	movw	r28, r18
    4f04:	18 82       	st	Y, r1
	TCCR4A = 0;
    4f06:	a0 ea       	ldi	r26, 0xA0	; 160
    4f08:	b0 e0       	ldi	r27, 0x00	; 0
    4f0a:	1c 92       	st	X, r1
	TCCR4B = 0;
    4f0c:	81 ea       	ldi	r24, 0xA1	; 161
    4f0e:	90 e0       	ldi	r25, 0x00	; 0
    4f10:	ec 01       	movw	r28, r24
    4f12:	18 82       	st	Y, r1
	TIMSK4 = 0;
    4f14:	02 e7       	ldi	r16, 0x72	; 114
    4f16:	10 e0       	ldi	r17, 0x00	; 0
    4f18:	e8 01       	movw	r28, r16
    4f1a:	18 82       	st	Y, r1

	TCCR3A |= (1 << COM3A1) | (1 << WGM31) | (1 << WGM30); 	// enable OCA; clear on match, set at bottom
    4f1c:	60 81       	ld	r22, Z
    4f1e:	63 68       	ori	r22, 0x83	; 131
    4f20:	60 83       	st	Z, r22
	TCCR3A |= (1 << WGM31) | (1 << WGM30);
    4f22:	60 81       	ld	r22, Z
    4f24:	63 60       	ori	r22, 0x03	; 3
    4f26:	60 83       	st	Z, r22
	TCCR3B |= (1 << WGM32) | (1 << CS31) | (1 << CS30);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    4f28:	ea 01       	movw	r28, r20
    4f2a:	68 81       	ld	r22, Y
    4f2c:	6b 60       	ori	r22, 0x0B	; 11
    4f2e:	68 83       	st	Y, r22
	// the values for motors goes from 0 (stopped) to 1023 (max power)
	OCR3A = pwm_right;
    4f30:	40 91 05 03 	lds	r20, 0x0305
    4f34:	50 91 06 03 	lds	r21, 0x0306
    4f38:	50 93 99 00 	sts	0x0099, r21
    4f3c:	40 93 98 00 	sts	0x0098, r20
	OCR3B = 0;
    4f40:	10 92 9b 00 	sts	0x009B, r1
    4f44:	10 92 9a 00 	sts	0x009A, r1
	TIMSK3 |= (1 << TOIE3);		// Enable timer overflow interrupt
    4f48:	e9 01       	movw	r28, r18
    4f4a:	48 81       	ld	r20, Y
    4f4c:	41 60       	ori	r20, 0x01	; 1
    4f4e:	48 83       	st	Y, r20

	// stop right motor
	TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    4f50:	20 81       	ld	r18, Z
    4f52:	2f 75       	andi	r18, 0x5F	; 95
    4f54:	20 83       	st	Z, r18
	PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    4f56:	2e b1       	in	r18, 0x0e	; 14
    4f58:	27 7e       	andi	r18, 0xE7	; 231
    4f5a:	2e b9       	out	0x0e, r18	; 14

	// Motor left timer4/pwm
	// same configuration as timer3
	TCCR4A |= (1 << COM4A1) | (1 << WGM41) | (1 << WGM40); 	// enable OCA; clear on match, set at bottom
    4f5c:	2c 91       	ld	r18, X
    4f5e:	23 68       	ori	r18, 0x83	; 131
    4f60:	2c 93       	st	X, r18
	TCCR4B |= (1 << WGM42) | (1 << CS41) | (1 << CS40);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    4f62:	fc 01       	movw	r30, r24
    4f64:	20 81       	ld	r18, Z
    4f66:	2b 60       	ori	r18, 0x0B	; 11
    4f68:	20 83       	st	Z, r18
	// the values for motors goes from 0 (stopped) to 1024 (max power)
	OCR4A = pwm_left;
    4f6a:	80 91 07 03 	lds	r24, 0x0307
    4f6e:	90 91 08 03 	lds	r25, 0x0308
    4f72:	90 93 a9 00 	sts	0x00A9, r25
    4f76:	80 93 a8 00 	sts	0x00A8, r24
	OCR4B = 0;
    4f7a:	10 92 ab 00 	sts	0x00AB, r1
    4f7e:	10 92 aa 00 	sts	0x00AA, r1
	TIMSK4 |= (1 << TOIE4);		// Enable timer overflow interrupt
    4f82:	e8 01       	movw	r28, r16
    4f84:	88 81       	ld	r24, Y
    4f86:	81 60       	ori	r24, 0x01	; 1
    4f88:	88 83       	st	Y, r24
	// stop left motor
	TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    4f8a:	8c 91       	ld	r24, X
    4f8c:	8f 75       	andi	r24, 0x5F	; 95
    4f8e:	8c 93       	st	X, r24
	PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    4f90:	e2 e0       	ldi	r30, 0x02	; 2
    4f92:	f1 e0       	ldi	r31, 0x01	; 1
    4f94:	80 81       	ld	r24, Z
    4f96:	87 7e       	andi	r24, 0xE7	; 231
    4f98:	80 83       	st	Z, r24


}
    4f9a:	df 91       	pop	r29
    4f9c:	cf 91       	pop	r28
    4f9e:	1f 91       	pop	r17
    4fa0:	0f 91       	pop	r16
    4fa2:	08 95       	ret

00004fa4 <cast_speed>:

signed int cast_speed(signed int vel) {
    4fa4:	28 2f       	mov	r18, r24
    4fa6:	39 2f       	mov	r19, r25
    4fa8:	8e ef       	ldi	r24, 0xFE	; 254
    4faa:	21 30       	cpi	r18, 0x01	; 1
    4fac:	38 07       	cpc	r19, r24
    4fae:	14 f4       	brge	.+4      	; 0x4fb4 <cast_speed+0x10>
    4fb0:	21 e0       	ldi	r18, 0x01	; 1
    4fb2:	3e ef       	ldi	r19, 0xFE	; 254
    4fb4:	82 e0       	ldi	r24, 0x02	; 2
    4fb6:	20 30       	cpi	r18, 0x00	; 0
    4fb8:	38 07       	cpc	r19, r24
    4fba:	14 f0       	brlt	.+4      	; 0x4fc0 <cast_speed+0x1c>
    4fbc:	2f ef       	ldi	r18, 0xFF	; 255
    4fbe:	31 e0       	ldi	r19, 0x01	; 1
        vel = MAX_MOTORS_PWM/2;
    } else if(vel < -(MAX_MOTORS_PWM/2)) {
        vel = -(MAX_MOTORS_PWM/2);
    }
    return vel;
}
    4fc0:	c9 01       	movw	r24, r18
    4fc2:	08 95       	ret

00004fc4 <setLeftSpeed>:
}

// vel expressed in 1/5 of mm/s
void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    4fc4:	28 2f       	mov	r18, r24
    4fc6:	33 27       	eor	r19, r19
    4fc8:	27 fd       	sbrc	r18, 7
    4fca:	30 95       	com	r19
    4fcc:	37 fd       	sbrc	r19, 7
    4fce:	13 c0       	rjmp	.+38     	; 0x4ff6 <setLeftSpeed+0x32>
    4fd0:	30 93 22 03 	sts	0x0322, r19
    4fd4:	20 93 21 03 	sts	0x0321, r18

    if(vel >= 0) {
    4fd8:	87 fd       	sbrc	r24, 7
    4fda:	05 c0       	rjmp	.+10     	; 0x4fe6 <setLeftSpeed+0x22>
        pwm_left_desired = speedl;
    } else {
        pwm_left_desired = -(speedl);
    4fdc:	30 93 0c 03 	sts	0x030C, r19
    4fe0:	20 93 0b 03 	sts	0x030B, r18
    4fe4:	08 95       	ret
    4fe6:	30 95       	com	r19
    4fe8:	21 95       	neg	r18
    4fea:	3f 4f       	sbci	r19, 0xFF	; 255
    4fec:	30 93 0c 03 	sts	0x030C, r19
    4ff0:	20 93 0b 03 	sts	0x030B, r18
    4ff4:	08 95       	ret
}

// vel expressed in 1/5 of mm/s
void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    4ff6:	30 95       	com	r19
    4ff8:	21 95       	neg	r18
    4ffa:	3f 4f       	sbci	r19, 0xFF	; 255
    4ffc:	e9 cf       	rjmp	.-46     	; 0x4fd0 <setLeftSpeed+0xc>

00004ffe <setRightSpeed>:

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    4ffe:	28 2f       	mov	r18, r24
    5000:	33 27       	eor	r19, r19
    5002:	27 fd       	sbrc	r18, 7
    5004:	30 95       	com	r19
    5006:	37 fd       	sbrc	r19, 7
    5008:	13 c0       	rjmp	.+38     	; 0x5030 <setRightSpeed+0x32>
    500a:	30 93 24 03 	sts	0x0324, r19
    500e:	20 93 23 03 	sts	0x0323, r18

    if(vel >= 0) {
    5012:	87 fd       	sbrc	r24, 7
    5014:	05 c0       	rjmp	.+10     	; 0x5020 <setRightSpeed+0x22>
        pwm_right_desired = speedr;
    } else {
        pwm_right_desired = -(speedr);
    5016:	30 93 0a 03 	sts	0x030A, r19
    501a:	20 93 09 03 	sts	0x0309, r18
    501e:	08 95       	ret
    5020:	30 95       	com	r19
    5022:	21 95       	neg	r18
    5024:	3f 4f       	sbci	r19, 0xFF	; 255
    5026:	30 93 0a 03 	sts	0x030A, r19
    502a:	20 93 09 03 	sts	0x0309, r18
    502e:	08 95       	ret

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    5030:	30 95       	com	r19
    5032:	21 95       	neg	r18
    5034:	3f 4f       	sbci	r19, 0xFF	; 255
    5036:	e9 cf       	rjmp	.-46     	; 0x500a <setRightSpeed+0xc>

00005038 <updateOdomData>:
}


void updateOdomData() {

    if(calibWheel == LEFT_WHEEL_FW_SC) {
    5038:	80 91 67 05 	lds	r24, 0x0567
    503c:	88 23       	and	r24, r24
    503e:	89 f5       	brne	.+98     	; 0x50a2 <updateOdomData+0x6a>
        if(calibVelIndex>1) {
    5040:	e0 91 cf 08 	lds	r30, 0x08CF
    5044:	e2 30       	cpi	r30, 0x02	; 2
    5046:	08 f4       	brcc	.+2      	; 0x504a <updateOdomData+0x12>
    5048:	96 c0       	rjmp	.+300    	; 0x5176 <updateOdomData+0x13e>
            if(calibration[calibVelIndex-2][1] >= tempVel) {  // check that we have always increasing values of speed, otherwise there
    504a:	f0 e0       	ldi	r31, 0x00	; 0
    504c:	df 01       	movw	r26, r30
    504e:	a2 95       	swap	r26
    5050:	b2 95       	swap	r27
    5052:	b0 7f       	andi	r27, 0xF0	; 240
    5054:	ba 27       	eor	r27, r26
    5056:	a0 7f       	andi	r26, 0xF0	; 240
    5058:	ba 27       	eor	r27, r26
    505a:	aa 52       	subi	r26, 0x2A	; 42
    505c:	b7 4f       	sbci	r27, 0xF7	; 247
    505e:	12 96       	adiw	r26, 0x02	; 2
    5060:	2d 91       	ld	r18, X+
    5062:	3c 91       	ld	r19, X
    5064:	13 97       	sbiw	r26, 0x03	; 3
    5066:	80 91 8a 0b 	lds	r24, 0x0B8A
    506a:	90 91 8b 0b 	lds	r25, 0x0B8B
    506e:	28 17       	cp	r18, r24
    5070:	39 07       	cpc	r19, r25
    5072:	34 f0       	brlt	.+12     	; 0x5080 <updateOdomData+0x48>
                tempVel = calibration[calibVelIndex-2][1]+1; // will be problems when getting data from the lookup table
    5074:	c9 01       	movw	r24, r18
    5076:	01 96       	adiw	r24, 0x01	; 1
    5078:	90 93 8b 0b 	sts	0x0B8B, r25
    507c:	80 93 8a 0b 	sts	0x0B8A, r24
            }
        }
        calibration[calibVelIndex-1][0] = avgLeftSpeed;
    5080:	e2 95       	swap	r30
    5082:	f2 95       	swap	r31
    5084:	f0 7f       	andi	r31, 0xF0	; 240
    5086:	fe 27       	eor	r31, r30
    5088:	e0 7f       	andi	r30, 0xF0	; 240
    508a:	fe 27       	eor	r31, r30
    508c:	ea 51       	subi	r30, 0x1A	; 26
    508e:	f7 4f       	sbci	r31, 0xF7	; 247
    5090:	20 91 d0 04 	lds	r18, 0x04D0
    5094:	30 91 d1 04 	lds	r19, 0x04D1
    5098:	31 83       	std	Z+1, r19	; 0x01
    509a:	20 83       	st	Z, r18
        calibration[calibVelIndex-1][1] = tempVel;
    509c:	93 83       	std	Z+3, r25	; 0x03
    509e:	82 83       	std	Z+2, r24	; 0x02
    50a0:	08 95       	ret
    } else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    50a2:	81 30       	cpi	r24, 0x01	; 1
    50a4:	31 f0       	breq	.+12     	; 0x50b2 <updateOdomData+0x7a>
                tempVel = calibration[calibVelIndex-2][3]+1;
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
        calibration[calibVelIndex-1][3] = tempVel;
    } else if(calibWheel == LEFT_WHEEL_BW_SC) {
    50a6:	82 30       	cpi	r24, 0x02	; 2
    50a8:	09 f4       	brne	.+2      	; 0x50ac <updateOdomData+0x74>
    50aa:	6b c0       	rjmp	.+214    	; 0x5182 <updateOdomData+0x14a>
                tempVel = calibration[calibVelIndex-2][5]+1;
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
        calibration[calibVelIndex-1][5] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    50ac:	83 30       	cpi	r24, 0x03	; 3
    50ae:	91 f1       	breq	.+100    	; 0x5114 <updateOdomData+0xdc>
    50b0:	08 95       	ret
            }
        }
        calibration[calibVelIndex-1][0] = avgLeftSpeed;
        calibration[calibVelIndex-1][1] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_FW_SC) {
        if(calibVelIndex>1) {
    50b2:	e0 91 cf 08 	lds	r30, 0x08CF
    50b6:	e2 30       	cpi	r30, 0x02	; 2
    50b8:	08 f4       	brcc	.+2      	; 0x50bc <updateOdomData+0x84>
    50ba:	93 c0       	rjmp	.+294    	; 0x51e2 <updateOdomData+0x1aa>
            if(calibration[calibVelIndex-2][3] >= tempVel) {
    50bc:	f0 e0       	ldi	r31, 0x00	; 0
    50be:	df 01       	movw	r26, r30
    50c0:	a2 95       	swap	r26
    50c2:	b2 95       	swap	r27
    50c4:	b0 7f       	andi	r27, 0xF0	; 240
    50c6:	ba 27       	eor	r27, r26
    50c8:	a0 7f       	andi	r26, 0xF0	; 240
    50ca:	ba 27       	eor	r27, r26
    50cc:	aa 52       	subi	r26, 0x2A	; 42
    50ce:	b7 4f       	sbci	r27, 0xF7	; 247
    50d0:	16 96       	adiw	r26, 0x06	; 6
    50d2:	2d 91       	ld	r18, X+
    50d4:	3c 91       	ld	r19, X
    50d6:	17 97       	sbiw	r26, 0x07	; 7
    50d8:	80 91 8a 0b 	lds	r24, 0x0B8A
    50dc:	90 91 8b 0b 	lds	r25, 0x0B8B
    50e0:	28 17       	cp	r18, r24
    50e2:	39 07       	cpc	r19, r25
    50e4:	34 f0       	brlt	.+12     	; 0x50f2 <updateOdomData+0xba>
                tempVel = calibration[calibVelIndex-2][3]+1;
    50e6:	c9 01       	movw	r24, r18
    50e8:	01 96       	adiw	r24, 0x01	; 1
    50ea:	90 93 8b 0b 	sts	0x0B8B, r25
    50ee:	80 93 8a 0b 	sts	0x0B8A, r24
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
    50f2:	e2 95       	swap	r30
    50f4:	f2 95       	swap	r31
    50f6:	f0 7f       	andi	r31, 0xF0	; 240
    50f8:	fe 27       	eor	r31, r30
    50fa:	e0 7f       	andi	r30, 0xF0	; 240
    50fc:	fe 27       	eor	r31, r30
    50fe:	ea 51       	subi	r30, 0x1A	; 26
    5100:	f7 4f       	sbci	r31, 0xF7	; 247
    5102:	20 91 d2 04 	lds	r18, 0x04D2
    5106:	30 91 d3 04 	lds	r19, 0x04D3
    510a:	35 83       	std	Z+5, r19	; 0x05
    510c:	24 83       	std	Z+4, r18	; 0x04
        calibration[calibVelIndex-1][3] = tempVel;
    510e:	97 83       	std	Z+7, r25	; 0x07
    5110:	86 83       	std	Z+6, r24	; 0x06
    5112:	08 95       	ret
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
        calibration[calibVelIndex-1][5] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    5114:	e0 91 cf 08 	lds	r30, 0x08CF
    5118:	e2 30       	cpi	r30, 0x02	; 2
    511a:	08 f4       	brcc	.+2      	; 0x511e <updateOdomData+0xe6>
    511c:	68 c0       	rjmp	.+208    	; 0x51ee <updateOdomData+0x1b6>
            if(calibration[calibVelIndex-2][7] >= tempVel) {
    511e:	f0 e0       	ldi	r31, 0x00	; 0
    5120:	df 01       	movw	r26, r30
    5122:	a2 95       	swap	r26
    5124:	b2 95       	swap	r27
    5126:	b0 7f       	andi	r27, 0xF0	; 240
    5128:	ba 27       	eor	r27, r26
    512a:	a0 7f       	andi	r26, 0xF0	; 240
    512c:	ba 27       	eor	r27, r26
    512e:	aa 52       	subi	r26, 0x2A	; 42
    5130:	b7 4f       	sbci	r27, 0xF7	; 247
    5132:	1e 96       	adiw	r26, 0x0e	; 14
    5134:	2d 91       	ld	r18, X+
    5136:	3c 91       	ld	r19, X
    5138:	1f 97       	sbiw	r26, 0x0f	; 15
    513a:	80 91 8a 0b 	lds	r24, 0x0B8A
    513e:	90 91 8b 0b 	lds	r25, 0x0B8B
    5142:	28 17       	cp	r18, r24
    5144:	39 07       	cpc	r19, r25
    5146:	34 f0       	brlt	.+12     	; 0x5154 <updateOdomData+0x11c>
                tempVel = calibration[calibVelIndex-2][7]+1;
    5148:	c9 01       	movw	r24, r18
    514a:	01 96       	adiw	r24, 0x01	; 1
    514c:	90 93 8b 0b 	sts	0x0B8B, r25
    5150:	80 93 8a 0b 	sts	0x0B8A, r24
            }
        }
		calibration[calibVelIndex-1][6] = avgRightSpeed;
    5154:	e2 95       	swap	r30
    5156:	f2 95       	swap	r31
    5158:	f0 7f       	andi	r31, 0xF0	; 240
    515a:	fe 27       	eor	r31, r30
    515c:	e0 7f       	andi	r30, 0xF0	; 240
    515e:	fe 27       	eor	r31, r30
    5160:	ea 51       	subi	r30, 0x1A	; 26
    5162:	f7 4f       	sbci	r31, 0xF7	; 247
    5164:	20 91 d2 04 	lds	r18, 0x04D2
    5168:	30 91 d3 04 	lds	r19, 0x04D3
    516c:	35 87       	std	Z+13, r19	; 0x0d
    516e:	24 87       	std	Z+12, r18	; 0x0c
        calibration[calibVelIndex-1][7] = tempVel;
    5170:	97 87       	std	Z+15, r25	; 0x0f
    5172:	86 87       	std	Z+14, r24	; 0x0e
    5174:	08 95       	ret


void updateOdomData() {

    if(calibWheel == LEFT_WHEEL_FW_SC) {
        if(calibVelIndex>1) {
    5176:	f0 e0       	ldi	r31, 0x00	; 0
    5178:	80 91 8a 0b 	lds	r24, 0x0B8A
    517c:	90 91 8b 0b 	lds	r25, 0x0B8B
    5180:	7f cf       	rjmp	.-258    	; 0x5080 <updateOdomData+0x48>
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
        calibration[calibVelIndex-1][3] = tempVel;
    } else if(calibWheel == LEFT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    5182:	e0 91 cf 08 	lds	r30, 0x08CF
    5186:	e2 30       	cpi	r30, 0x02	; 2
    5188:	c0 f1       	brcs	.+112    	; 0x51fa <updateOdomData+0x1c2>
            if(calibration[calibVelIndex-2][5] >= tempVel) {
    518a:	f0 e0       	ldi	r31, 0x00	; 0
    518c:	df 01       	movw	r26, r30
    518e:	a2 95       	swap	r26
    5190:	b2 95       	swap	r27
    5192:	b0 7f       	andi	r27, 0xF0	; 240
    5194:	ba 27       	eor	r27, r26
    5196:	a0 7f       	andi	r26, 0xF0	; 240
    5198:	ba 27       	eor	r27, r26
    519a:	aa 52       	subi	r26, 0x2A	; 42
    519c:	b7 4f       	sbci	r27, 0xF7	; 247
    519e:	1a 96       	adiw	r26, 0x0a	; 10
    51a0:	2d 91       	ld	r18, X+
    51a2:	3c 91       	ld	r19, X
    51a4:	1b 97       	sbiw	r26, 0x0b	; 11
    51a6:	80 91 8a 0b 	lds	r24, 0x0B8A
    51aa:	90 91 8b 0b 	lds	r25, 0x0B8B
    51ae:	28 17       	cp	r18, r24
    51b0:	39 07       	cpc	r19, r25
    51b2:	34 f0       	brlt	.+12     	; 0x51c0 <updateOdomData+0x188>
                tempVel = calibration[calibVelIndex-2][5]+1;
    51b4:	c9 01       	movw	r24, r18
    51b6:	01 96       	adiw	r24, 0x01	; 1
    51b8:	90 93 8b 0b 	sts	0x0B8B, r25
    51bc:	80 93 8a 0b 	sts	0x0B8A, r24
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
    51c0:	e2 95       	swap	r30
    51c2:	f2 95       	swap	r31
    51c4:	f0 7f       	andi	r31, 0xF0	; 240
    51c6:	fe 27       	eor	r31, r30
    51c8:	e0 7f       	andi	r30, 0xF0	; 240
    51ca:	fe 27       	eor	r31, r30
    51cc:	ea 51       	subi	r30, 0x1A	; 26
    51ce:	f7 4f       	sbci	r31, 0xF7	; 247
    51d0:	20 91 d0 04 	lds	r18, 0x04D0
    51d4:	30 91 d1 04 	lds	r19, 0x04D1
    51d8:	31 87       	std	Z+9, r19	; 0x09
    51da:	20 87       	std	Z+8, r18	; 0x08
        calibration[calibVelIndex-1][5] = tempVel;
    51dc:	93 87       	std	Z+11, r25	; 0x0b
    51de:	82 87       	std	Z+10, r24	; 0x0a
    51e0:	08 95       	ret
            }
        }
        calibration[calibVelIndex-1][0] = avgLeftSpeed;
        calibration[calibVelIndex-1][1] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_FW_SC) {
        if(calibVelIndex>1) {
    51e2:	f0 e0       	ldi	r31, 0x00	; 0
    51e4:	80 91 8a 0b 	lds	r24, 0x0B8A
    51e8:	90 91 8b 0b 	lds	r25, 0x0B8B
    51ec:	82 cf       	rjmp	.-252    	; 0x50f2 <updateOdomData+0xba>
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
        calibration[calibVelIndex-1][5] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    51ee:	f0 e0       	ldi	r31, 0x00	; 0
    51f0:	80 91 8a 0b 	lds	r24, 0x0B8A
    51f4:	90 91 8b 0b 	lds	r25, 0x0B8B
    51f8:	ad cf       	rjmp	.-166    	; 0x5154 <updateOdomData+0x11c>
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
        calibration[calibVelIndex-1][3] = tempVel;
    } else if(calibWheel == LEFT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    51fa:	f0 e0       	ldi	r31, 0x00	; 0
    51fc:	80 91 8a 0b 	lds	r24, 0x0B8A
    5200:	90 91 8b 0b 	lds	r25, 0x0B8B
    5204:	dd cf       	rjmp	.-70     	; 0x51c0 <updateOdomData+0x188>

00005206 <handleCalibration>:

}

void handleCalibration() {

	switch(calibState) {
    5206:	80 91 75 0b 	lds	r24, 0x0B75
    520a:	84 30       	cpi	r24, 0x04	; 4
    520c:	09 f4       	brne	.+2      	; 0x5210 <handleCalibration+0xa>
    520e:	d6 c1       	rjmp	.+940    	; 0x55bc <handleCalibration+0x3b6>
    5210:	85 30       	cpi	r24, 0x05	; 5
    5212:	80 f0       	brcs	.+32     	; 0x5234 <handleCalibration+0x2e>
    5214:	86 30       	cpi	r24, 0x06	; 6
    5216:	09 f4       	brne	.+2      	; 0x521a <handleCalibration+0x14>
    5218:	83 c2       	rjmp	.+1286   	; 0x5720 <handleCalibration+0x51a>
    521a:	86 30       	cpi	r24, 0x06	; 6
    521c:	b0 f5       	brcc	.+108    	; 0x528a <handleCalibration+0x84>
                calibState = CALIBRATION_STATE_NEXT;
			}
            break;

		case CALIBRATION_STATE_NEXT:
        	calibVelIndex++;
    521e:	80 91 cf 08 	lds	r24, 0x08CF
    5222:	8f 5f       	subi	r24, 0xFF	; 255
    5224:	80 93 cf 08 	sts	0x08CF, r24
            if(calibVelIndex == 10) {
    5228:	8a 30       	cpi	r24, 0x0A	; 10
    522a:	09 f4       	brne	.+2      	; 0x522e <handleCalibration+0x28>
    522c:	c3 c2       	rjmp	.+1414   	; 0x57b4 <handleCalibration+0x5ae>
					// red off
					writeCalibrationToFlash();
					calibrateOdomFlag = 0;
				}
			}
			calibState = CALIBRATION_STATE_SET_SPEED;
    522e:	10 92 75 0b 	sts	0x0B75, r1
    5232:	08 95       	ret

}

void handleCalibration() {

	switch(calibState) {
    5234:	81 30       	cpi	r24, 0x01	; 1
    5236:	09 f4       	brne	.+2      	; 0x523a <handleCalibration+0x34>
    5238:	72 c1       	rjmp	.+740    	; 0x551e <handleCalibration+0x318>
    523a:	81 30       	cpi	r24, 0x01	; 1
    523c:	08 f0       	brcs	.+2      	; 0x5240 <handleCalibration+0x3a>
    523e:	73 c0       	rjmp	.+230    	; 0x5326 <handleCalibration+0x120>
			}
			break;


    	case CALIBRATION_STATE_SET_SPEED: // set speed
        	if(calibWheel == LEFT_WHEEL_FW_SC) {
    5240:	80 91 67 05 	lds	r24, 0x0567
    5244:	88 23       	and	r24, r24
    5246:	09 f0       	breq	.+2      	; 0x524a <handleCalibration+0x44>
    5248:	79 c2       	rjmp	.+1266   	; 0x573c <handleCalibration+0x536>
				pwm_intermediate_right_desired = 0;
    524a:	10 92 0e 03 	sts	0x030E, r1
    524e:	10 92 0d 03 	sts	0x030D, r1
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
    5252:	90 91 cf 08 	lds	r25, 0x08CF
    5256:	85 e0       	ldi	r24, 0x05	; 5
    5258:	98 9f       	mul	r25, r24
    525a:	c0 01       	movw	r24, r0
    525c:	11 24       	eor	r1, r1
    525e:	88 0f       	add	r24, r24
    5260:	99 1f       	adc	r25, r25
    5262:	88 0f       	add	r24, r24
    5264:	99 1f       	adc	r25, r25
    5266:	90 93 10 03 	sts	0x0310, r25
    526a:	80 93 0f 03 	sts	0x030F, r24
				pwm_intermediate_left_desired = -((INDEX_STEP*calibVelIndex)<<2);
        	} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
				pwm_intermediate_right_desired = -((INDEX_STEP*calibVelIndex)<<2);
				pwm_intermediate_left_desired = 0;
			}               
            calibState = CALIBRATION_STATE_START_MEASURE;
    526e:	81 e0       	ldi	r24, 0x01	; 1
    5270:	80 93 75 0b 	sts	0x0B75, r24
            timeoutOdometry = getTime100MicroSec();
    5274:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
    5278:	60 93 45 0b 	sts	0x0B45, r22
    527c:	70 93 46 0b 	sts	0x0B46, r23
    5280:	80 93 47 0b 	sts	0x0B47, r24
    5284:	90 93 48 0b 	sts	0x0B48, r25
            break;
    5288:	08 95       	ret

}

void handleCalibration() {

	switch(calibState) {
    528a:	87 30       	cpi	r24, 0x07	; 7
    528c:	09 f4       	brne	.+2      	; 0x5290 <handleCalibration+0x8a>
    528e:	02 c2       	rjmp	.+1028   	; 0x5694 <handleCalibration+0x48e>
    5290:	88 30       	cpi	r24, 0x08	; 8
    5292:	79 f6       	brne	.-98     	; 0x5232 <handleCalibration+0x2c>
	            timeoutOdometry = getTime100MicroSec();
			}
			break;

		case CALIBRATION_STATE_FIND_THRS_2:	// Wait for 5 seconds during which the ground min and max values are saved.
			if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    5294:	80 91 67 05 	lds	r24, 0x0567
    5298:	88 23       	and	r24, r24
    529a:	09 f4       	brne	.+2      	; 0x529e <handleCalibration+0x98>
    529c:	dc c0       	rjmp	.+440    	; 0x5456 <handleCalibration+0x250>
    529e:	82 30       	cpi	r24, 0x02	; 2
    52a0:	09 f4       	brne	.+2      	; 0x52a4 <handleCalibration+0x9e>
    52a2:	d9 c0       	rjmp	.+434    	; 0x5456 <handleCalibration+0x250>
				}
				if(proximityResult[8] > maxGround) {
					maxGround = proximityResult[8];
				}
			} else {
				if(proximityResult[11] < minGround) {
    52a4:	80 91 7f 02 	lds	r24, 0x027F
    52a8:	90 91 80 02 	lds	r25, 0x0280
    52ac:	20 91 e0 04 	lds	r18, 0x04E0
    52b0:	30 91 e1 04 	lds	r19, 0x04E1
    52b4:	82 17       	cp	r24, r18
    52b6:	93 07       	cpc	r25, r19
    52b8:	0c f4       	brge	.+2      	; 0x52bc <handleCalibration+0xb6>
    52ba:	d9 c0       	rjmp	.+434    	; 0x546e <handleCalibration+0x268>
					minGround = proximityResult[11];
				}
				if(proximityResult[11] > maxGround) {
    52bc:	20 91 e2 04 	lds	r18, 0x04E2
    52c0:	30 91 e3 04 	lds	r19, 0x04E3
    52c4:	28 17       	cp	r18, r24
    52c6:	39 07       	cpc	r19, r25
    52c8:	24 f4       	brge	.+8      	; 0x52d2 <handleCalibration+0xcc>
					maxGround = proximityResult[11];
    52ca:	90 93 e3 04 	sts	0x04E3, r25
    52ce:	80 93 e2 04 	sts	0x04E2, r24
				}
			}
			if((getTime100MicroSec() - timeoutOdometry)>PAUSE_5_SEC) {    // the robot seems to be still, go to next velcoity
    52d2:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
    52d6:	20 91 45 0b 	lds	r18, 0x0B45
    52da:	30 91 46 0b 	lds	r19, 0x0B46
    52de:	40 91 47 0b 	lds	r20, 0x0B47
    52e2:	50 91 48 0b 	lds	r21, 0x0B48
    52e6:	62 1b       	sub	r22, r18
    52e8:	73 0b       	sbc	r23, r19
    52ea:	84 0b       	sbc	r24, r20
    52ec:	95 0b       	sbc	r25, r21
    52ee:	6e 3c       	cpi	r22, 0xCE	; 206
    52f0:	2b eb       	ldi	r18, 0xBB	; 187
    52f2:	72 07       	cpc	r23, r18
    52f4:	20 e0       	ldi	r18, 0x00	; 0
    52f6:	82 07       	cpc	r24, r18
    52f8:	20 e0       	ldi	r18, 0x00	; 0
    52fa:	92 07       	cpc	r25, r18
    52fc:	08 f4       	brcc	.+2      	; 0x5300 <handleCalibration+0xfa>
    52fe:	99 cf       	rjmp	.-206    	; 0x5232 <handleCalibration+0x2c>
				calibrationThr = (minGround + maxGround)>>1;	// Take the average of the 2 as the reference threshold value.
    5300:	80 91 e2 04 	lds	r24, 0x04E2
    5304:	90 91 e3 04 	lds	r25, 0x04E3
    5308:	20 91 e0 04 	lds	r18, 0x04E0
    530c:	30 91 e1 04 	lds	r19, 0x04E1
    5310:	82 0f       	add	r24, r18
    5312:	93 1f       	adc	r25, r19
    5314:	95 95       	asr	r25
    5316:	87 95       	ror	r24
    5318:	90 93 e5 04 	sts	0x04E5, r25
    531c:	80 93 e4 04 	sts	0x04E4, r24
				//calibrationThrLow = calibrationThr - ((maxGround-minGround)>>2);	// Use an histeresys between max and min (not needed...).
				//calibrationThrHigh = calibrationThr + ((maxGround-minGround)>>2);
                calibState = CALIBRATION_STATE_SET_SPEED;
    5320:	10 92 75 0b 	sts	0x0B75, r1
    5324:	08 95       	ret

}

void handleCalibration() {

	switch(calibState) {
    5326:	82 30       	cpi	r24, 0x02	; 2
    5328:	09 f4       	brne	.+2      	; 0x532c <handleCalibration+0x126>
    532a:	87 c1       	rjmp	.+782    	; 0x563a <handleCalibration+0x434>
    532c:	83 30       	cpi	r24, 0x03	; 3
    532e:	09 f0       	breq	.+2      	; 0x5332 <handleCalibration+0x12c>
    5330:	80 cf       	rjmp	.-256    	; 0x5232 <handleCalibration+0x2c>
                calibState = CALIBRATION_STATE_NEXT;
			}
            break;

		case CALIBRATION_STATE_STOP_MEASURE: // look for black line again, stop time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    5332:	80 91 67 05 	lds	r24, 0x0567
    5336:	88 23       	and	r24, r24
    5338:	09 f4       	brne	.+2      	; 0x533c <handleCalibration+0x136>
    533a:	9e c0       	rjmp	.+316    	; 0x5478 <handleCalibration+0x272>
    533c:	82 30       	cpi	r24, 0x02	; 2
    533e:	09 f4       	brne	.+2      	; 0x5342 <handleCalibration+0x13c>
    5340:	9b c0       	rjmp	.+310    	; 0x5478 <handleCalibration+0x272>
                    updateOdomData();
                    calibState = CALIBRATION_STATE_EXIT_BLACK_LINE_2;
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
				if(proximityResult[11] < calibrationThr) {	
    5342:	20 91 7f 02 	lds	r18, 0x027F
    5346:	30 91 80 02 	lds	r19, 0x0280
    534a:	80 91 e4 04 	lds	r24, 0x04E4
    534e:	90 91 e5 04 	lds	r25, 0x04E5
    5352:	28 17       	cp	r18, r24
    5354:	39 07       	cpc	r19, r25
    5356:	0c f0       	brlt	.+2      	; 0x535a <handleCalibration+0x154>
    5358:	55 c0       	rjmp	.+170    	; 0x5404 <handleCalibration+0x1fe>
                	timeOdometry = getTime100MicroSec() - timeOdometry;
    535a:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
    535e:	20 91 60 05 	lds	r18, 0x0560
    5362:	30 91 61 05 	lds	r19, 0x0561
    5366:	40 91 62 05 	lds	r20, 0x0562
    536a:	50 91 63 05 	lds	r21, 0x0563
    536e:	62 1b       	sub	r22, r18
    5370:	73 0b       	sbc	r23, r19
    5372:	84 0b       	sbc	r24, r20
    5374:	95 0b       	sbc	r25, r21
    5376:	60 93 60 05 	sts	0x0560, r22
    537a:	70 93 61 05 	sts	0x0561, r23
    537e:	80 93 62 05 	sts	0x0562, r24
    5382:	90 93 63 05 	sts	0x0563, r25
                    tempVel = (unsigned int)(DISTANCE_MM/((float)timeOdometry*104.0/1000000.0));
    5386:	0e 94 d0 56 	call	0xada0	; 0xada0 <__floatunsisf>
    538a:	20 e0       	ldi	r18, 0x00	; 0
    538c:	30 e0       	ldi	r19, 0x00	; 0
    538e:	40 ed       	ldi	r20, 0xD0	; 208
    5390:	52 e4       	ldi	r21, 0x42	; 66
    5392:	0e 94 eb 57 	call	0xafd6	; 0xafd6 <__mulsf3>
    5396:	20 e0       	ldi	r18, 0x00	; 0
    5398:	34 e2       	ldi	r19, 0x24	; 36
    539a:	44 e7       	ldi	r20, 0x74	; 116
    539c:	59 e4       	ldi	r21, 0x49	; 73
    539e:	0e 94 37 56 	call	0xac6e	; 0xac6e <__divsf3>
    53a2:	9b 01       	movw	r18, r22
    53a4:	ac 01       	movw	r20, r24
    53a6:	64 e1       	ldi	r22, 0x14	; 20
    53a8:	7e e2       	ldi	r23, 0x2E	; 46
    53aa:	88 e7       	ldi	r24, 0x78	; 120
    53ac:	93 e4       	ldi	r25, 0x43	; 67
    53ae:	0e 94 37 56 	call	0xac6e	; 0xac6e <__divsf3>
    53b2:	0e 94 a4 56 	call	0xad48	; 0xad48 <__fixunssfsi>
    53b6:	70 93 8b 0b 	sts	0x0B8B, r23
    53ba:	60 93 8a 0b 	sts	0x0B8A, r22
                    avgRightSpeed = rightSpeedSumOdom/rightSumCount;
    53be:	20 91 ce 04 	lds	r18, 0x04CE
    53c2:	30 91 cf 04 	lds	r19, 0x04CF
    53c6:	40 e0       	ldi	r20, 0x00	; 0
    53c8:	50 e0       	ldi	r21, 0x00	; 0
    53ca:	60 91 c8 04 	lds	r22, 0x04C8
    53ce:	70 91 c9 04 	lds	r23, 0x04C9
    53d2:	80 91 ca 04 	lds	r24, 0x04CA
    53d6:	90 91 cb 04 	lds	r25, 0x04CB
    53da:	0e 94 bc 58 	call	0xb178	; 0xb178 <__divmodsi4>
    53de:	30 93 d3 04 	sts	0x04D3, r19
    53e2:	20 93 d2 04 	sts	0x04D2, r18
					updateOdomData();
    53e6:	0e 94 1c 28 	call	0x5038	; 0x5038 <updateOdomData>
                    calibState = CALIBRATION_STATE_EXIT_BLACK_LINE_2;
    53ea:	84 e0       	ldi	r24, 0x04	; 4
    53ec:	80 93 75 0b 	sts	0x0B75, r24
                    timeoutOdometry = getTime100MicroSec();;
    53f0:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
    53f4:	60 93 45 0b 	sts	0x0B45, r22
    53f8:	70 93 46 0b 	sts	0x0B46, r23
    53fc:	80 93 47 0b 	sts	0x0B47, r24
    5400:	90 93 48 0b 	sts	0x0B48, r25
				}
			}
			if((getTime100MicroSec() - timeoutOdometry)>PAUSE_60_SEC) {    // the robot seems to be still, go to next velcoity
    5404:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
    5408:	20 91 45 0b 	lds	r18, 0x0B45
    540c:	30 91 46 0b 	lds	r19, 0x0B46
    5410:	40 91 47 0b 	lds	r20, 0x0B47
    5414:	50 91 48 0b 	lds	r21, 0x0B48
    5418:	62 1b       	sub	r22, r18
    541a:	73 0b       	sbc	r23, r19
    541c:	84 0b       	sbc	r24, r20
    541e:	95 0b       	sbc	r25, r21
    5420:	6c 39       	cpi	r22, 0x9C	; 156
    5422:	2d ec       	ldi	r18, 0xCD	; 205
    5424:	72 07       	cpc	r23, r18
    5426:	28 e0       	ldi	r18, 0x08	; 8
    5428:	82 07       	cpc	r24, r18
    542a:	20 e0       	ldi	r18, 0x00	; 0
    542c:	92 07       	cpc	r25, r18
    542e:	08 f4       	brcc	.+2      	; 0x5432 <handleCalibration+0x22c>
    5430:	00 cf       	rjmp	.-512    	; 0x5232 <handleCalibration+0x2c>
            	tempVel = 0;
    5432:	10 92 8b 0b 	sts	0x0B8B, r1
    5436:	10 92 8a 0b 	sts	0x0B8A, r1
				avgLeftSpeed = 0;
    543a:	10 92 d1 04 	sts	0x04D1, r1
    543e:	10 92 d0 04 	sts	0x04D0, r1
				avgRightSpeed = 0;
    5442:	10 92 d3 04 	sts	0x04D3, r1
    5446:	10 92 d2 04 	sts	0x04D2, r1
                updateOdomData();
    544a:	0e 94 1c 28 	call	0x5038	; 0x5038 <updateOdomData>
                calibState = CALIBRATION_STATE_NEXT;
    544e:	85 e0       	ldi	r24, 0x05	; 5
    5450:	80 93 75 0b 	sts	0x0B75, r24
    5454:	08 95       	ret
			}
			break;

		case CALIBRATION_STATE_FIND_THRS_2:	// Wait for 5 seconds during which the ground min and max values are saved.
			if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
				if(proximityResult[8] < minGround) {
    5456:	80 91 79 02 	lds	r24, 0x0279
    545a:	90 91 7a 02 	lds	r25, 0x027A
    545e:	20 91 e0 04 	lds	r18, 0x04E0
    5462:	30 91 e1 04 	lds	r19, 0x04E1
    5466:	82 17       	cp	r24, r18
    5468:	93 07       	cpc	r25, r19
    546a:	0c f0       	brlt	.+2      	; 0x546e <handleCalibration+0x268>
    546c:	27 cf       	rjmp	.-434    	; 0x52bc <handleCalibration+0xb6>
				if(proximityResult[8] > maxGround) {
					maxGround = proximityResult[8];
				}
			} else {
				if(proximityResult[11] < minGround) {
					minGround = proximityResult[11];
    546e:	90 93 e1 04 	sts	0x04E1, r25
    5472:	80 93 e0 04 	sts	0x04E0, r24
    5476:	22 cf       	rjmp	.-444    	; 0x52bc <handleCalibration+0xb6>
			}
            break;

		case CALIBRATION_STATE_STOP_MEASURE: // look for black line again, stop time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
				if(proximityResult[8] < calibrationThr) {	
    5478:	20 91 79 02 	lds	r18, 0x0279
    547c:	30 91 7a 02 	lds	r19, 0x027A
    5480:	80 91 e4 04 	lds	r24, 0x04E4
    5484:	90 91 e5 04 	lds	r25, 0x04E5
    5488:	28 17       	cp	r18, r24
    548a:	39 07       	cpc	r19, r25
    548c:	0c f0       	brlt	.+2      	; 0x5490 <handleCalibration+0x28a>
    548e:	ba cf       	rjmp	.-140    	; 0x5404 <handleCalibration+0x1fe>
                	timeOdometry = getTime100MicroSec() - timeOdometry;
    5490:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
    5494:	20 91 60 05 	lds	r18, 0x0560
    5498:	30 91 61 05 	lds	r19, 0x0561
    549c:	40 91 62 05 	lds	r20, 0x0562
    54a0:	50 91 63 05 	lds	r21, 0x0563
    54a4:	62 1b       	sub	r22, r18
    54a6:	73 0b       	sbc	r23, r19
    54a8:	84 0b       	sbc	r24, r20
    54aa:	95 0b       	sbc	r25, r21
    54ac:	60 93 60 05 	sts	0x0560, r22
    54b0:	70 93 61 05 	sts	0x0561, r23
    54b4:	80 93 62 05 	sts	0x0562, r24
    54b8:	90 93 63 05 	sts	0x0563, r25
                    tempVel = (unsigned int)(DISTANCE_MM/((float)timeOdometry*104.0/1000000.0));
    54bc:	0e 94 d0 56 	call	0xada0	; 0xada0 <__floatunsisf>
    54c0:	20 e0       	ldi	r18, 0x00	; 0
    54c2:	30 e0       	ldi	r19, 0x00	; 0
    54c4:	40 ed       	ldi	r20, 0xD0	; 208
    54c6:	52 e4       	ldi	r21, 0x42	; 66
    54c8:	0e 94 eb 57 	call	0xafd6	; 0xafd6 <__mulsf3>
    54cc:	20 e0       	ldi	r18, 0x00	; 0
    54ce:	34 e2       	ldi	r19, 0x24	; 36
    54d0:	44 e7       	ldi	r20, 0x74	; 116
    54d2:	59 e4       	ldi	r21, 0x49	; 73
    54d4:	0e 94 37 56 	call	0xac6e	; 0xac6e <__divsf3>
    54d8:	9b 01       	movw	r18, r22
    54da:	ac 01       	movw	r20, r24
    54dc:	64 e1       	ldi	r22, 0x14	; 20
    54de:	7e e2       	ldi	r23, 0x2E	; 46
    54e0:	88 e7       	ldi	r24, 0x78	; 120
    54e2:	93 e4       	ldi	r25, 0x43	; 67
    54e4:	0e 94 37 56 	call	0xac6e	; 0xac6e <__divsf3>
    54e8:	0e 94 a4 56 	call	0xad48	; 0xad48 <__fixunssfsi>
    54ec:	70 93 8b 0b 	sts	0x0B8B, r23
    54f0:	60 93 8a 0b 	sts	0x0B8A, r22
					avgLeftSpeed = leftSpeedSumOdom/leftSumCount;
    54f4:	20 91 cc 04 	lds	r18, 0x04CC
    54f8:	30 91 cd 04 	lds	r19, 0x04CD
    54fc:	40 e0       	ldi	r20, 0x00	; 0
    54fe:	50 e0       	ldi	r21, 0x00	; 0
    5500:	60 91 c4 04 	lds	r22, 0x04C4
    5504:	70 91 c5 04 	lds	r23, 0x04C5
    5508:	80 91 c6 04 	lds	r24, 0x04C6
    550c:	90 91 c7 04 	lds	r25, 0x04C7
    5510:	0e 94 bc 58 	call	0xb178	; 0xb178 <__divmodsi4>
    5514:	30 93 d1 04 	sts	0x04D1, r19
    5518:	20 93 d0 04 	sts	0x04D0, r18
    551c:	64 cf       	rjmp	.-312    	; 0x53e6 <handleCalibration+0x1e0>
            calibState = CALIBRATION_STATE_START_MEASURE;
            timeoutOdometry = getTime100MicroSec();
            break;

		case CALIBRATION_STATE_START_MEASURE: // look for black line, start time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    551e:	80 91 67 05 	lds	r24, 0x0567
    5522:	88 23       	and	r24, r24
    5524:	91 f1       	breq	.+100    	; 0x558a <handleCalibration+0x384>
    5526:	82 30       	cpi	r24, 0x02	; 2
    5528:	81 f1       	breq	.+96     	; 0x558a <handleCalibration+0x384>
                    timeOdometry = getTime100MicroSec();;
                    calibState = CALIBRATION_STATE_EXIT_BLACK_LINE_1;
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
				if(proximityResult[11] < calibrationThr) {	
    552a:	20 91 7f 02 	lds	r18, 0x027F
    552e:	30 91 80 02 	lds	r19, 0x0280
    5532:	80 91 e4 04 	lds	r24, 0x04E4
    5536:	90 91 e5 04 	lds	r25, 0x04E5
    553a:	28 17       	cp	r18, r24
    553c:	39 07       	cpc	r19, r25
    553e:	0c f0       	brlt	.+2      	; 0x5542 <handleCalibration+0x33c>
    5540:	61 cf       	rjmp	.-318    	; 0x5404 <handleCalibration+0x1fe>
					rightSumCount = 0;
    5542:	10 92 cf 04 	sts	0x04CF, r1
    5546:	10 92 ce 04 	sts	0x04CE, r1
					rightSpeedSumOdom = 0;
    554a:	10 92 c8 04 	sts	0x04C8, r1
    554e:	10 92 c9 04 	sts	0x04C9, r1
    5552:	10 92 ca 04 	sts	0x04CA, r1
    5556:	10 92 cb 04 	sts	0x04CB, r1
                    timeOdometry = getTime100MicroSec();;
    555a:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
    555e:	60 93 60 05 	sts	0x0560, r22
    5562:	70 93 61 05 	sts	0x0561, r23
    5566:	80 93 62 05 	sts	0x0562, r24
    556a:	90 93 63 05 	sts	0x0563, r25
                    calibState = CALIBRATION_STATE_EXIT_BLACK_LINE_1;
    556e:	82 e0       	ldi	r24, 0x02	; 2
    5570:	80 93 75 0b 	sts	0x0B75, r24
                    timeoutOdometry = getTime100MicroSec();;
    5574:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
    5578:	60 93 45 0b 	sts	0x0B45, r22
    557c:	70 93 46 0b 	sts	0x0B46, r23
    5580:	80 93 47 0b 	sts	0x0B47, r24
    5584:	90 93 48 0b 	sts	0x0B48, r25
    5588:	3d cf       	rjmp	.-390    	; 0x5404 <handleCalibration+0x1fe>
            timeoutOdometry = getTime100MicroSec();
            break;

		case CALIBRATION_STATE_START_MEASURE: // look for black line, start time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
				if(proximityResult[8] < calibrationThr) {				
    558a:	20 91 79 02 	lds	r18, 0x0279
    558e:	30 91 7a 02 	lds	r19, 0x027A
    5592:	80 91 e4 04 	lds	r24, 0x04E4
    5596:	90 91 e5 04 	lds	r25, 0x04E5
    559a:	28 17       	cp	r18, r24
    559c:	39 07       	cpc	r19, r25
    559e:	0c f0       	brlt	.+2      	; 0x55a2 <handleCalibration+0x39c>
    55a0:	31 cf       	rjmp	.-414    	; 0x5404 <handleCalibration+0x1fe>
                	leftSumCount = 0;
    55a2:	10 92 cd 04 	sts	0x04CD, r1
    55a6:	10 92 cc 04 	sts	0x04CC, r1
                    leftSpeedSumOdom = 0;
    55aa:	10 92 c4 04 	sts	0x04C4, r1
    55ae:	10 92 c5 04 	sts	0x04C5, r1
    55b2:	10 92 c6 04 	sts	0x04C6, r1
    55b6:	10 92 c7 04 	sts	0x04C7, r1
    55ba:	cf cf       	rjmp	.-98     	; 0x555a <handleCalibration+0x354>
                calibState = CALIBRATION_STATE_NEXT;
			}
            break;

		case CALIBRATION_STATE_EXIT_BLACK_LINE_2: // exit from black line again
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    55bc:	80 91 67 05 	lds	r24, 0x0567
    55c0:	88 23       	and	r24, r24
    55c2:	61 f1       	breq	.+88     	; 0x561c <handleCalibration+0x416>
    55c4:	82 30       	cpi	r24, 0x02	; 2
    55c6:	51 f1       	breq	.+84     	; 0x561c <handleCalibration+0x416>
				if(proximityResult[8] > calibrationThr) {	
                	calibState = CALIBRATION_STATE_NEXT;
				}
			} else {
				if(proximityResult[11] > calibrationThr) {	
    55c8:	20 91 7f 02 	lds	r18, 0x027F
    55cc:	30 91 80 02 	lds	r19, 0x0280
    55d0:	80 91 e4 04 	lds	r24, 0x04E4
    55d4:	90 91 e5 04 	lds	r25, 0x04E5
    55d8:	82 17       	cp	r24, r18
    55da:	93 07       	cpc	r25, r19
    55dc:	54 f1       	brlt	.+84     	; 0x5632 <handleCalibration+0x42c>
					calibState = CALIBRATION_STATE_NEXT;
				}
			}
            if((getTime100MicroSec() - timeoutOdometry)>PAUSE_60_SEC) {    // the robot seems to be still, go to next velocity
    55de:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
    55e2:	20 91 45 0b 	lds	r18, 0x0B45
    55e6:	30 91 46 0b 	lds	r19, 0x0B46
    55ea:	40 91 47 0b 	lds	r20, 0x0B47
    55ee:	50 91 48 0b 	lds	r21, 0x0B48
    55f2:	62 1b       	sub	r22, r18
    55f4:	73 0b       	sbc	r23, r19
    55f6:	84 0b       	sbc	r24, r20
    55f8:	95 0b       	sbc	r25, r21
    55fa:	6c 39       	cpi	r22, 0x9C	; 156
    55fc:	2d ec       	ldi	r18, 0xCD	; 205
    55fe:	72 07       	cpc	r23, r18
    5600:	28 e0       	ldi	r18, 0x08	; 8
    5602:	82 07       	cpc	r24, r18
    5604:	20 e0       	ldi	r18, 0x00	; 0
    5606:	92 07       	cpc	r25, r18
    5608:	08 f4       	brcc	.+2      	; 0x560c <handleCalibration+0x406>
    560a:	13 ce       	rjmp	.-986    	; 0x5232 <handleCalibration+0x2c>
            	tempVel = 0;
    560c:	10 92 8b 0b 	sts	0x0B8B, r1
    5610:	10 92 8a 0b 	sts	0x0B8A, r1
                //updateOdomData();
                calibState = CALIBRATION_STATE_NEXT;
    5614:	85 e0       	ldi	r24, 0x05	; 5
    5616:	80 93 75 0b 	sts	0x0B75, r24
    561a:	08 95       	ret
			}
            break;

		case CALIBRATION_STATE_EXIT_BLACK_LINE_2: // exit from black line again
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
				if(proximityResult[8] > calibrationThr) {	
    561c:	20 91 79 02 	lds	r18, 0x0279
    5620:	30 91 7a 02 	lds	r19, 0x027A
    5624:	80 91 e4 04 	lds	r24, 0x04E4
    5628:	90 91 e5 04 	lds	r25, 0x04E5
    562c:	82 17       	cp	r24, r18
    562e:	93 07       	cpc	r25, r19
    5630:	b4 f6       	brge	.-84     	; 0x55de <handleCalibration+0x3d8>
                	calibState = CALIBRATION_STATE_NEXT;
				}
			} else {
				if(proximityResult[11] > calibrationThr) {	
					calibState = CALIBRATION_STATE_NEXT;
    5632:	85 e0       	ldi	r24, 0x05	; 5
    5634:	80 93 75 0b 	sts	0x0B75, r24
    5638:	d2 cf       	rjmp	.-92     	; 0x55de <handleCalibration+0x3d8>
                calibState = CALIBRATION_STATE_NEXT;
			}
			break;

		case CALIBRATION_STATE_EXIT_BLACK_LINE_1: // exit from black line
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    563a:	80 91 67 05 	lds	r24, 0x0567
    563e:	88 23       	and	r24, r24
    5640:	e1 f0       	breq	.+56     	; 0x567a <handleCalibration+0x474>
    5642:	82 30       	cpi	r24, 0x02	; 2
    5644:	d1 f0       	breq	.+52     	; 0x567a <handleCalibration+0x474>
				if(proximityResult[8] > calibrationThr) {	
                	calibState = CALIBRATION_STATE_STOP_MEASURE;
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
				if(proximityResult[11] > calibrationThr) {	
    5646:	20 91 7f 02 	lds	r18, 0x027F
    564a:	30 91 80 02 	lds	r19, 0x0280
    564e:	80 91 e4 04 	lds	r24, 0x04E4
    5652:	90 91 e5 04 	lds	r25, 0x04E5
    5656:	82 17       	cp	r24, r18
    5658:	93 07       	cpc	r25, r19
    565a:	0c f0       	brlt	.+2      	; 0x565e <handleCalibration+0x458>
    565c:	d3 ce       	rjmp	.-602    	; 0x5404 <handleCalibration+0x1fe>
                	calibState = CALIBRATION_STATE_STOP_MEASURE;
    565e:	83 e0       	ldi	r24, 0x03	; 3
    5660:	80 93 75 0b 	sts	0x0B75, r24
                    timeoutOdometry = getTime100MicroSec();;
    5664:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
    5668:	60 93 45 0b 	sts	0x0B45, r22
    566c:	70 93 46 0b 	sts	0x0B46, r23
    5670:	80 93 47 0b 	sts	0x0B47, r24
    5674:	90 93 48 0b 	sts	0x0B48, r25
    5678:	c5 ce       	rjmp	.-630    	; 0x5404 <handleCalibration+0x1fe>
			}
			break;

		case CALIBRATION_STATE_EXIT_BLACK_LINE_1: // exit from black line
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
				if(proximityResult[8] > calibrationThr) {	
    567a:	20 91 79 02 	lds	r18, 0x0279
    567e:	30 91 7a 02 	lds	r19, 0x027A
    5682:	80 91 e4 04 	lds	r24, 0x04E4
    5686:	90 91 e5 04 	lds	r25, 0x04E5
    568a:	82 17       	cp	r24, r18
    568c:	93 07       	cpc	r25, r19
    568e:	0c f0       	brlt	.+2      	; 0x5692 <handleCalibration+0x48c>
    5690:	b9 ce       	rjmp	.-654    	; 0x5404 <handleCalibration+0x1fe>
    5692:	e5 cf       	rjmp	.-54     	; 0x565e <handleCalibration+0x458>
			calibState = CALIBRATION_STATE_FIND_THRS_1;
			break;
		
		case CALIBRATION_STATE_FIND_THRS_1:	// Find the max and min of the ground sensor value in order to get a threshold to detect 
											// the black line securily (the threshold will be the average of the min and max).
			if((getTime100MicroSec() - timeoutOdometry)>PAUSE_1_SEC) { 	// Wait for the current sensor calibration to be terminated 
    5694:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
    5698:	20 91 45 0b 	lds	r18, 0x0B45
    569c:	30 91 46 0b 	lds	r19, 0x0B46
    56a0:	40 91 47 0b 	lds	r20, 0x0B47
    56a4:	50 91 48 0b 	lds	r21, 0x0B48
    56a8:	62 1b       	sub	r22, r18
    56aa:	73 0b       	sbc	r23, r19
    56ac:	84 0b       	sbc	r24, r20
    56ae:	95 0b       	sbc	r25, r21
    56b0:	60 39       	cpi	r22, 0x90	; 144
    56b2:	25 e2       	ldi	r18, 0x25	; 37
    56b4:	72 07       	cpc	r23, r18
    56b6:	20 e0       	ldi	r18, 0x00	; 0
    56b8:	82 07       	cpc	r24, r18
    56ba:	20 e0       	ldi	r18, 0x00	; 0
    56bc:	92 07       	cpc	r25, r18
    56be:	08 f4       	brcc	.+2      	; 0x56c2 <handleCalibration+0x4bc>
    56c0:	b8 cd       	rjmp	.-1168   	; 0x5232 <handleCalibration+0x2c>
																		// (started when calibration is started).
				if(calibWheel == LEFT_WHEEL_FW_SC) {
    56c2:	80 91 67 05 	lds	r24, 0x0567
    56c6:	88 23       	and	r24, r24
    56c8:	09 f4       	brne	.+2      	; 0x56cc <handleCalibration+0x4c6>
    56ca:	56 c0       	rjmp	.+172    	; 0x5778 <handleCalibration+0x572>
					pwm_intermediate_right_desired = 0;
					pwm_intermediate_left_desired = (INDEX_STEP*3)<<2;		// Use a moderate speed.
	        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    56cc:	81 30       	cpi	r24, 0x01	; 1
    56ce:	09 f4       	brne	.+2      	; 0x56d2 <handleCalibration+0x4cc>
    56d0:	a0 c0       	rjmp	.+320    	; 0x5812 <handleCalibration+0x60c>
					pwm_intermediate_right_desired = (INDEX_STEP*3)<<2;
					pwm_intermediate_left_desired = 0;
				} else if(calibWheel == LEFT_WHEEL_BW_SC) {
    56d2:	82 30       	cpi	r24, 0x02	; 2
    56d4:	09 f4       	brne	.+2      	; 0x56d8 <handleCalibration+0x4d2>
    56d6:	a8 c0       	rjmp	.+336    	; 0x5828 <handleCalibration+0x622>
					pwm_intermediate_right_desired = 0;
					pwm_intermediate_left_desired = -((INDEX_STEP*3)<<2);
	        	} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    56d8:	83 30       	cpi	r24, 0x03	; 3
    56da:	51 f4       	brne	.+20     	; 0x56f0 <handleCalibration+0x4ea>
					pwm_intermediate_right_desired = -((INDEX_STEP*3)<<2);
    56dc:	84 ec       	ldi	r24, 0xC4	; 196
    56de:	9f ef       	ldi	r25, 0xFF	; 255
    56e0:	90 93 0e 03 	sts	0x030E, r25
    56e4:	80 93 0d 03 	sts	0x030D, r24
					pwm_intermediate_left_desired = 0;
    56e8:	10 92 10 03 	sts	0x0310, r1
    56ec:	10 92 0f 03 	sts	0x030F, r1
				}               
				minGround = 1023;
    56f0:	8f ef       	ldi	r24, 0xFF	; 255
    56f2:	93 e0       	ldi	r25, 0x03	; 3
    56f4:	90 93 e1 04 	sts	0x04E1, r25
    56f8:	80 93 e0 04 	sts	0x04E0, r24
				maxGround = 0;
    56fc:	10 92 e3 04 	sts	0x04E3, r1
    5700:	10 92 e2 04 	sts	0x04E2, r1
	            calibState = CALIBRATION_STATE_FIND_THRS_2;
    5704:	88 e0       	ldi	r24, 0x08	; 8
    5706:	80 93 75 0b 	sts	0x0B75, r24
	            timeoutOdometry = getTime100MicroSec();
    570a:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
    570e:	60 93 45 0b 	sts	0x0B45, r22
    5712:	70 93 46 0b 	sts	0x0B46, r23
    5716:	80 93 47 0b 	sts	0x0B47, r24
    571a:	90 93 48 0b 	sts	0x0B48, r25
    571e:	08 95       	ret

void handleCalibration() {

	switch(calibState) {
		case CALIBRATION_STATE_FIND_THRS_0:
			timeoutOdometry = getTime100MicroSec();
    5720:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
    5724:	60 93 45 0b 	sts	0x0B45, r22
    5728:	70 93 46 0b 	sts	0x0B46, r23
    572c:	80 93 47 0b 	sts	0x0B47, r24
    5730:	90 93 48 0b 	sts	0x0B48, r25
			calibState = CALIBRATION_STATE_FIND_THRS_1;
    5734:	87 e0       	ldi	r24, 0x07	; 7
    5736:	80 93 75 0b 	sts	0x0B75, r24
			break;
    573a:	08 95       	ret

    	case CALIBRATION_STATE_SET_SPEED: // set speed
        	if(calibWheel == LEFT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = 0;
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    573c:	81 30       	cpi	r24, 0x01	; 1
    573e:	39 f1       	breq	.+78     	; 0x578e <handleCalibration+0x588>
				pwm_intermediate_right_desired = (INDEX_STEP*calibVelIndex)<<2;
				pwm_intermediate_left_desired = 0;
			} else if(calibWheel == LEFT_WHEEL_BW_SC) {
    5740:	82 30       	cpi	r24, 0x02	; 2
    5742:	09 f4       	brne	.+2      	; 0x5746 <handleCalibration+0x540>
    5744:	50 c0       	rjmp	.+160    	; 0x57e6 <handleCalibration+0x5e0>
				pwm_intermediate_right_desired = 0;
				pwm_intermediate_left_desired = -((INDEX_STEP*calibVelIndex)<<2);
        	} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    5746:	83 30       	cpi	r24, 0x03	; 3
    5748:	09 f0       	breq	.+2      	; 0x574c <handleCalibration+0x546>
    574a:	91 cd       	rjmp	.-1246   	; 0x526e <handleCalibration+0x68>
				pwm_intermediate_right_desired = -((INDEX_STEP*calibVelIndex)<<2);
    574c:	90 91 cf 08 	lds	r25, 0x08CF
    5750:	85 e0       	ldi	r24, 0x05	; 5
    5752:	98 9f       	mul	r25, r24
    5754:	c0 01       	movw	r24, r0
    5756:	11 24       	eor	r1, r1
    5758:	88 0f       	add	r24, r24
    575a:	99 1f       	adc	r25, r25
    575c:	88 0f       	add	r24, r24
    575e:	99 1f       	adc	r25, r25
    5760:	90 95       	com	r25
    5762:	81 95       	neg	r24
    5764:	9f 4f       	sbci	r25, 0xFF	; 255
    5766:	90 93 0e 03 	sts	0x030E, r25
    576a:	80 93 0d 03 	sts	0x030D, r24
				pwm_intermediate_left_desired = 0;
    576e:	10 92 10 03 	sts	0x0310, r1
    5772:	10 92 0f 03 	sts	0x030F, r1
    5776:	7b cd       	rjmp	.-1290   	; 0x526e <handleCalibration+0x68>
		case CALIBRATION_STATE_FIND_THRS_1:	// Find the max and min of the ground sensor value in order to get a threshold to detect 
											// the black line securily (the threshold will be the average of the min and max).
			if((getTime100MicroSec() - timeoutOdometry)>PAUSE_1_SEC) { 	// Wait for the current sensor calibration to be terminated 
																		// (started when calibration is started).
				if(calibWheel == LEFT_WHEEL_FW_SC) {
					pwm_intermediate_right_desired = 0;
    5778:	10 92 0e 03 	sts	0x030E, r1
    577c:	10 92 0d 03 	sts	0x030D, r1
					pwm_intermediate_left_desired = (INDEX_STEP*3)<<2;		// Use a moderate speed.
    5780:	8c e3       	ldi	r24, 0x3C	; 60
    5782:	90 e0       	ldi	r25, 0x00	; 0
    5784:	90 93 10 03 	sts	0x0310, r25
    5788:	80 93 0f 03 	sts	0x030F, r24
    578c:	b1 cf       	rjmp	.-158    	; 0x56f0 <handleCalibration+0x4ea>
    	case CALIBRATION_STATE_SET_SPEED: // set speed
        	if(calibWheel == LEFT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = 0;
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = (INDEX_STEP*calibVelIndex)<<2;
    578e:	90 91 cf 08 	lds	r25, 0x08CF
    5792:	85 e0       	ldi	r24, 0x05	; 5
    5794:	98 9f       	mul	r25, r24
    5796:	c0 01       	movw	r24, r0
    5798:	11 24       	eor	r1, r1
    579a:	88 0f       	add	r24, r24
    579c:	99 1f       	adc	r25, r25
    579e:	88 0f       	add	r24, r24
    57a0:	99 1f       	adc	r25, r25
    57a2:	90 93 0e 03 	sts	0x030E, r25
    57a6:	80 93 0d 03 	sts	0x030D, r24
				pwm_intermediate_left_desired = 0;
    57aa:	10 92 10 03 	sts	0x0310, r1
    57ae:	10 92 0f 03 	sts	0x030F, r1
    57b2:	5d cd       	rjmp	.-1350   	; 0x526e <handleCalibration+0x68>
            break;

		case CALIBRATION_STATE_NEXT:
        	calibVelIndex++;
            if(calibVelIndex == 10) {
            	calibVelIndex = 1;
    57b4:	91 e0       	ldi	r25, 0x01	; 1
    57b6:	90 93 cf 08 	sts	0x08CF, r25
                if(calibWheel == LEFT_WHEEL_FW_SC) {
    57ba:	80 91 67 05 	lds	r24, 0x0567
    57be:	88 23       	and	r24, r24
    57c0:	21 f4       	brne	.+8      	; 0x57ca <handleCalibration+0x5c4>
                	calibWheel = LEFT_WHEEL_BW_SC;
    57c2:	82 e0       	ldi	r24, 0x02	; 2
    57c4:	80 93 67 05 	sts	0x0567, r24
    57c8:	32 cd       	rjmp	.-1436   	; 0x522e <handleCalibration+0x28>
				} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    57ca:	81 30       	cpi	r24, 0x01	; 1
    57cc:	c1 f1       	breq	.+112    	; 0x583e <handleCalibration+0x638>
                	calibWheel = RIGHT_WHEEL_BW_SC;
				} else if(calibWheel == LEFT_WHEEL_BW_SC) {
    57ce:	82 30       	cpi	r24, 0x02	; 2
    57d0:	d1 f1       	breq	.+116    	; 0x5846 <handleCalibration+0x640>
                	calibWheel = RIGHT_WHEEL_FW_SC;
					calibrateOdomFlag = 0;
					calibState = CALIBRATION_STATE_FIND_THRS_0;	// Recompute the thresholds for the right ground.
					break;
					// red on
				} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    57d2:	83 30       	cpi	r24, 0x03	; 3
    57d4:	09 f0       	breq	.+2      	; 0x57d8 <handleCalibration+0x5d2>
    57d6:	2b cd       	rjmp	.-1450   	; 0x522e <handleCalibration+0x28>
                	calibWheel = LEFT_WHEEL_FW_SC;					
    57d8:	10 92 67 05 	sts	0x0567, r1
					// red off
					writeCalibrationToFlash();
    57dc:	0e 94 d1 48 	call	0x91a2	; 0x91a2 <writeCalibrationToFlash>
					calibrateOdomFlag = 0;
    57e0:	10 92 82 05 	sts	0x0582, r1
    57e4:	24 cd       	rjmp	.-1464   	; 0x522e <handleCalibration+0x28>
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = (INDEX_STEP*calibVelIndex)<<2;
				pwm_intermediate_left_desired = 0;
			} else if(calibWheel == LEFT_WHEEL_BW_SC) {
				pwm_intermediate_right_desired = 0;
    57e6:	10 92 0e 03 	sts	0x030E, r1
    57ea:	10 92 0d 03 	sts	0x030D, r1
				pwm_intermediate_left_desired = -((INDEX_STEP*calibVelIndex)<<2);
    57ee:	90 91 cf 08 	lds	r25, 0x08CF
    57f2:	85 e0       	ldi	r24, 0x05	; 5
    57f4:	98 9f       	mul	r25, r24
    57f6:	c0 01       	movw	r24, r0
    57f8:	11 24       	eor	r1, r1
    57fa:	88 0f       	add	r24, r24
    57fc:	99 1f       	adc	r25, r25
    57fe:	88 0f       	add	r24, r24
    5800:	99 1f       	adc	r25, r25
    5802:	90 95       	com	r25
    5804:	81 95       	neg	r24
    5806:	9f 4f       	sbci	r25, 0xFF	; 255
    5808:	90 93 10 03 	sts	0x0310, r25
    580c:	80 93 0f 03 	sts	0x030F, r24
    5810:	2e cd       	rjmp	.-1444   	; 0x526e <handleCalibration+0x68>
																		// (started when calibration is started).
				if(calibWheel == LEFT_WHEEL_FW_SC) {
					pwm_intermediate_right_desired = 0;
					pwm_intermediate_left_desired = (INDEX_STEP*3)<<2;		// Use a moderate speed.
	        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
					pwm_intermediate_right_desired = (INDEX_STEP*3)<<2;
    5812:	8c e3       	ldi	r24, 0x3C	; 60
    5814:	90 e0       	ldi	r25, 0x00	; 0
    5816:	90 93 0e 03 	sts	0x030E, r25
    581a:	80 93 0d 03 	sts	0x030D, r24
					pwm_intermediate_left_desired = 0;
    581e:	10 92 10 03 	sts	0x0310, r1
    5822:	10 92 0f 03 	sts	0x030F, r1
    5826:	64 cf       	rjmp	.-312    	; 0x56f0 <handleCalibration+0x4ea>
				} else if(calibWheel == LEFT_WHEEL_BW_SC) {
					pwm_intermediate_right_desired = 0;
    5828:	10 92 0e 03 	sts	0x030E, r1
    582c:	10 92 0d 03 	sts	0x030D, r1
					pwm_intermediate_left_desired = -((INDEX_STEP*3)<<2);
    5830:	84 ec       	ldi	r24, 0xC4	; 196
    5832:	9f ef       	ldi	r25, 0xFF	; 255
    5834:	90 93 10 03 	sts	0x0310, r25
    5838:	80 93 0f 03 	sts	0x030F, r24
    583c:	59 cf       	rjmp	.-334    	; 0x56f0 <handleCalibration+0x4ea>
            if(calibVelIndex == 10) {
            	calibVelIndex = 1;
                if(calibWheel == LEFT_WHEEL_FW_SC) {
                	calibWheel = LEFT_WHEEL_BW_SC;
				} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
                	calibWheel = RIGHT_WHEEL_BW_SC;
    583e:	83 e0       	ldi	r24, 0x03	; 3
    5840:	80 93 67 05 	sts	0x0567, r24
    5844:	f4 cc       	rjmp	.-1560   	; 0x522e <handleCalibration+0x28>
				} else if(calibWheel == LEFT_WHEEL_BW_SC) {
                	calibWheel = RIGHT_WHEEL_FW_SC;
    5846:	90 93 67 05 	sts	0x0567, r25
					calibrateOdomFlag = 0;
    584a:	10 92 82 05 	sts	0x0582, r1
					calibState = CALIBRATION_STATE_FIND_THRS_0;	// Recompute the thresholds for the right ground.
    584e:	86 e0       	ldi	r24, 0x06	; 6
    5850:	80 93 75 0b 	sts	0x0B75, r24
					break;
    5854:	08 95       	ret

00005856 <getInputFromSpeed>:

}

// extract data to pass to speed controller given a desired speed in mm/s
// mode => return a measured speed 0..1023
signed int getInputFromSpeed(signed int s, unsigned char mode) {
    5856:	af 92       	push	r10
    5858:	bf 92       	push	r11
    585a:	cf 92       	push	r12
    585c:	df 92       	push	r13
    585e:	ef 92       	push	r14
    5860:	ff 92       	push	r15
    5862:	0f 93       	push	r16
    5864:	1f 93       	push	r17
    5866:	cf 93       	push	r28
    5868:	df 93       	push	r29
    
    int i = 0;
    signed int currVel = s*BYTE_TO_MM_S;
    586a:	9c 01       	movw	r18, r24
    586c:	22 0f       	add	r18, r18
    586e:	33 1f       	adc	r19, r19
    5870:	22 0f       	add	r18, r18
    5872:	33 1f       	adc	r19, r19
    5874:	28 0f       	add	r18, r24
    5876:	39 1f       	adc	r19, r25
    signed int temp = 0;

    if(currVel == 0) {
    5878:	21 15       	cp	r18, r1
    587a:	31 05       	cpc	r19, r1
    587c:	09 f4       	brne	.+2      	; 0x5880 <getInputFromSpeed+0x2a>
    587e:	7b c0       	rjmp	.+246    	; 0x5976 <getInputFromSpeed+0x120>
        return 0;
    }

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
    5880:	86 2f       	mov	r24, r22
    5882:	82 50       	subi	r24, 0x02	; 2
    5884:	82 30       	cpi	r24, 0x02	; 2
    5886:	08 f4       	brcc	.+2      	; 0x588a <getInputFromSpeed+0x34>
    5888:	84 c0       	rjmp	.+264    	; 0x5992 <getInputFromSpeed+0x13c>
        currVel = -currVel; // consider only positive values
    588a:	66 23       	and	r22, r22
    588c:	09 f0       	breq	.+2      	; 0x5890 <getInputFromSpeed+0x3a>
    588e:	84 c0       	rjmp	.+264    	; 0x5998 <getInputFromSpeed+0x142>
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
    5890:	80 91 f8 08 	lds	r24, 0x08F8
    5894:	90 91 f9 08 	lds	r25, 0x08F9
    5898:	82 17       	cp	r24, r18
    589a:	93 07       	cpc	r25, r19
    589c:	0c f0       	brlt	.+2      	; 0x58a0 <getInputFromSpeed+0x4a>
    589e:	1b c2       	rjmp	.+1078   	; 0x5cd6 <getInputFromSpeed+0x480>
    58a0:	80 91 08 09 	lds	r24, 0x0908
    58a4:	90 91 09 09 	lds	r25, 0x0909
    58a8:	82 17       	cp	r24, r18
    58aa:	93 07       	cpc	r25, r19
    58ac:	0c f0       	brlt	.+2      	; 0x58b0 <getInputFromSpeed+0x5a>
    58ae:	1c c2       	rjmp	.+1080   	; 0x5ce8 <getInputFromSpeed+0x492>
    58b0:	80 91 18 09 	lds	r24, 0x0918
    58b4:	90 91 19 09 	lds	r25, 0x0919
    58b8:	82 17       	cp	r24, r18
    58ba:	93 07       	cpc	r25, r19
    58bc:	0c f0       	brlt	.+2      	; 0x58c0 <getInputFromSpeed+0x6a>
    58be:	17 c2       	rjmp	.+1070   	; 0x5cee <getInputFromSpeed+0x498>
    58c0:	80 91 28 09 	lds	r24, 0x0928
    58c4:	90 91 29 09 	lds	r25, 0x0929
    58c8:	82 17       	cp	r24, r18
    58ca:	93 07       	cpc	r25, r19
    58cc:	0c f0       	brlt	.+2      	; 0x58d0 <getInputFromSpeed+0x7a>
    58ce:	12 c2       	rjmp	.+1060   	; 0x5cf4 <getInputFromSpeed+0x49e>
    58d0:	80 91 38 09 	lds	r24, 0x0938
    58d4:	90 91 39 09 	lds	r25, 0x0939
    58d8:	82 17       	cp	r24, r18
    58da:	93 07       	cpc	r25, r19
    58dc:	0c f0       	brlt	.+2      	; 0x58e0 <getInputFromSpeed+0x8a>
    58de:	fe c1       	rjmp	.+1020   	; 0x5cdc <getInputFromSpeed+0x486>
    58e0:	80 91 48 09 	lds	r24, 0x0948
    58e4:	90 91 49 09 	lds	r25, 0x0949
    58e8:	82 17       	cp	r24, r18
    58ea:	93 07       	cpc	r25, r19
    58ec:	0c f0       	brlt	.+2      	; 0x58f0 <getInputFromSpeed+0x9a>
    58ee:	f9 c1       	rjmp	.+1010   	; 0x5ce2 <getInputFromSpeed+0x48c>
    58f0:	80 91 58 09 	lds	r24, 0x0958
    58f4:	90 91 59 09 	lds	r25, 0x0959
    58f8:	82 17       	cp	r24, r18
    58fa:	93 07       	cpc	r25, r19
    58fc:	0c f0       	brlt	.+2      	; 0x5900 <getInputFromSpeed+0xaa>
    58fe:	02 c2       	rjmp	.+1028   	; 0x5d04 <getInputFromSpeed+0x4ae>
    5900:	80 91 68 09 	lds	r24, 0x0968
    5904:	90 91 69 09 	lds	r25, 0x0969
    5908:	82 17       	cp	r24, r18
    590a:	93 07       	cpc	r25, r19
    590c:	0c f0       	brlt	.+2      	; 0x5910 <getInputFromSpeed+0xba>
    590e:	fd c1       	rjmp	.+1018   	; 0x5d0a <getInputFromSpeed+0x4b4>
    5910:	c0 91 78 09 	lds	r28, 0x0978
    5914:	d0 91 79 09 	lds	r29, 0x0979
    5918:	c2 17       	cp	r28, r18
    591a:	d3 07       	cpc	r29, r19
    591c:	0c f0       	brlt	.+2      	; 0x5920 <getInputFromSpeed+0xca>
    591e:	7a c1       	rjmp	.+756    	; 0x5c14 <getInputFromSpeed+0x3be>
            temp = currVel*calibration[0][6]/calibration[0][7];
            temp = -temp;
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
    5920:	b9 01       	movw	r22, r18
    5922:	88 27       	eor	r24, r24
    5924:	77 fd       	sbrc	r23, 7
    5926:	80 95       	com	r24
    5928:	98 2f       	mov	r25, r24
    592a:	0e 94 d2 56 	call	0xada4	; 0xada4 <__floatsisf>
    592e:	7b 01       	movw	r14, r22
    5930:	8c 01       	movw	r16, r24
    5932:	60 91 76 09 	lds	r22, 0x0976
    5936:	70 91 77 09 	lds	r23, 0x0977
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
    593a:	88 27       	eor	r24, r24
    593c:	77 fd       	sbrc	r23, 7
    593e:	80 95       	com	r24
    5940:	98 2f       	mov	r25, r24
    5942:	0e 94 d2 56 	call	0xada4	; 0xada4 <__floatsisf>
    5946:	9b 01       	movw	r18, r22
    5948:	ac 01       	movw	r20, r24
    594a:	c8 01       	movw	r24, r16
    594c:	b7 01       	movw	r22, r14
    594e:	0e 94 eb 57 	call	0xafd6	; 0xafd6 <__mulsf3>
    5952:	7b 01       	movw	r14, r22
    5954:	8c 01       	movw	r16, r24
    5956:	be 01       	movw	r22, r28
    5958:	88 27       	eor	r24, r24
    595a:	77 fd       	sbrc	r23, 7
    595c:	80 95       	com	r24
    595e:	98 2f       	mov	r25, r24
    5960:	0e 94 d2 56 	call	0xada4	; 0xada4 <__floatsisf>
    5964:	9b 01       	movw	r18, r22
    5966:	ac 01       	movw	r20, r24
    5968:	c8 01       	movw	r24, r16
    596a:	b7 01       	movw	r22, r14
    596c:	0e 94 37 56 	call	0xac6e	; 0xac6e <__divsf3>
    5970:	0e 94 9f 56 	call	0xad3e	; 0xad3e <__fixsfsi>
    5974:	02 c0       	rjmp	.+4      	; 0x597a <getInputFromSpeed+0x124>
// mode => return a measured speed 0..1023
signed int getInputFromSpeed(signed int s, unsigned char mode) {
    
    int i = 0;
    signed int currVel = s*BYTE_TO_MM_S;
    signed int temp = 0;
    5976:	60 e0       	ldi	r22, 0x00	; 0
    5978:	70 e0       	ldi	r23, 0x00	; 0
            temp = -temp;
        }        
    }
    
    return temp;
}
    597a:	cb 01       	movw	r24, r22
    597c:	df 91       	pop	r29
    597e:	cf 91       	pop	r28
    5980:	1f 91       	pop	r17
    5982:	0f 91       	pop	r16
    5984:	ff 90       	pop	r15
    5986:	ef 90       	pop	r14
    5988:	df 90       	pop	r13
    598a:	cf 90       	pop	r12
    598c:	bf 90       	pop	r11
    598e:	af 90       	pop	r10
    5990:	08 95       	ret
    if(currVel == 0) {
        return 0;
    }

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
        currVel = -currVel; // consider only positive values
    5992:	30 95       	com	r19
    5994:	21 95       	neg	r18
    5996:	3f 4f       	sbci	r19, 0xFF	; 255
    5998:	63 30       	cpi	r22, 0x03	; 3
    599a:	09 f4       	brne	.+2      	; 0x599e <getInputFromSpeed+0x148>
    599c:	f3 c0       	rjmp	.+486    	; 0x5b84 <getInputFromSpeed+0x32e>
    599e:	62 30       	cpi	r22, 0x02	; 2
    59a0:	01 f1       	breq	.+64     	; 0x59e2 <getInputFromSpeed+0x18c>
    59a2:	61 30       	cpi	r22, 0x01	; 1
    59a4:	09 f4       	brne	.+2      	; 0x59a8 <getInputFromSpeed+0x152>
    59a6:	98 c0       	rjmp	.+304    	; 0x5ad8 <getInputFromSpeed+0x282>
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][6]/calibration[0][7];
            temp = -temp;
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
    59a8:	66 23       	and	r22, r22
    59aa:	09 f4       	brne	.+2      	; 0x59ae <getInputFromSpeed+0x158>
    59ac:	90 c0       	rjmp	.+288    	; 0x5ace <getInputFromSpeed+0x278>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
    59ae:	61 30       	cpi	r22, 0x01	; 1
    59b0:	09 f4       	brne	.+2      	; 0x59b4 <getInputFromSpeed+0x15e>
    59b2:	8c c1       	rjmp	.+792    	; 0x5ccc <getInputFromSpeed+0x476>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
        } else if(mode==LEFT_WHEEL_BW_SC) {
    59b4:	62 30       	cpi	r22, 0x02	; 2
    59b6:	09 f4       	brne	.+2      	; 0x59ba <getInputFromSpeed+0x164>
    59b8:	a0 c1       	rjmp	.+832    	; 0x5cfa <getInputFromSpeed+0x4a4>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][4]/(float)calibration[CALIBRATION_SAMPLES-1][5]);
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
    59ba:	63 30       	cpi	r22, 0x03	; 3
    59bc:	e1 f6       	brne	.-72     	; 0x5976 <getInputFromSpeed+0x120>
    59be:	c0 91 84 09 	lds	r28, 0x0984
    59c2:	d0 91 85 09 	lds	r29, 0x0985
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][6]/(float)calibration[CALIBRATION_SAMPLES-1][7]);
    59c6:	b9 01       	movw	r22, r18
    59c8:	88 27       	eor	r24, r24
    59ca:	77 fd       	sbrc	r23, 7
    59cc:	80 95       	com	r24
    59ce:	98 2f       	mov	r25, r24
    59d0:	0e 94 d2 56 	call	0xada4	; 0xada4 <__floatsisf>
    59d4:	7b 01       	movw	r14, r22
    59d6:	8c 01       	movw	r16, r24
    59d8:	60 91 82 09 	lds	r22, 0x0982
    59dc:	70 91 83 09 	lds	r23, 0x0983
    59e0:	55 c0       	rjmp	.+170    	; 0x5a8c <getInputFromSpeed+0x236>
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            if(calibration[i][3] >= currVel) {
                break;
            }
        } else if(mode==LEFT_WHEEL_BW_SC) {
            if(calibration[i][5] >= currVel) {
    59e2:	80 91 00 09 	lds	r24, 0x0900
    59e6:	90 91 01 09 	lds	r25, 0x0901
    59ea:	82 17       	cp	r24, r18
    59ec:	93 07       	cpc	r25, r19
    59ee:	0c f0       	brlt	.+2      	; 0x59f2 <getInputFromSpeed+0x19c>
    59f0:	72 c1       	rjmp	.+740    	; 0x5cd6 <getInputFromSpeed+0x480>
    59f2:	80 91 10 09 	lds	r24, 0x0910
    59f6:	90 91 11 09 	lds	r25, 0x0911
    59fa:	82 17       	cp	r24, r18
    59fc:	93 07       	cpc	r25, r19
    59fe:	0c f0       	brlt	.+2      	; 0x5a02 <getInputFromSpeed+0x1ac>
    5a00:	73 c1       	rjmp	.+742    	; 0x5ce8 <getInputFromSpeed+0x492>
    5a02:	80 91 20 09 	lds	r24, 0x0920
    5a06:	90 91 21 09 	lds	r25, 0x0921
    5a0a:	82 17       	cp	r24, r18
    5a0c:	93 07       	cpc	r25, r19
    5a0e:	0c f0       	brlt	.+2      	; 0x5a12 <getInputFromSpeed+0x1bc>
    5a10:	6e c1       	rjmp	.+732    	; 0x5cee <getInputFromSpeed+0x498>
    5a12:	80 91 30 09 	lds	r24, 0x0930
    5a16:	90 91 31 09 	lds	r25, 0x0931
    5a1a:	82 17       	cp	r24, r18
    5a1c:	93 07       	cpc	r25, r19
    5a1e:	0c f0       	brlt	.+2      	; 0x5a22 <getInputFromSpeed+0x1cc>
    5a20:	69 c1       	rjmp	.+722    	; 0x5cf4 <getInputFromSpeed+0x49e>
    5a22:	80 91 40 09 	lds	r24, 0x0940
    5a26:	90 91 41 09 	lds	r25, 0x0941
    5a2a:	82 17       	cp	r24, r18
    5a2c:	93 07       	cpc	r25, r19
    5a2e:	0c f0       	brlt	.+2      	; 0x5a32 <getInputFromSpeed+0x1dc>
    5a30:	55 c1       	rjmp	.+682    	; 0x5cdc <getInputFromSpeed+0x486>
    5a32:	80 91 50 09 	lds	r24, 0x0950
    5a36:	90 91 51 09 	lds	r25, 0x0951
    5a3a:	82 17       	cp	r24, r18
    5a3c:	93 07       	cpc	r25, r19
    5a3e:	0c f0       	brlt	.+2      	; 0x5a42 <getInputFromSpeed+0x1ec>
    5a40:	50 c1       	rjmp	.+672    	; 0x5ce2 <getInputFromSpeed+0x48c>
    5a42:	80 91 60 09 	lds	r24, 0x0960
    5a46:	90 91 61 09 	lds	r25, 0x0961
    5a4a:	82 17       	cp	r24, r18
    5a4c:	93 07       	cpc	r25, r19
    5a4e:	0c f0       	brlt	.+2      	; 0x5a52 <getInputFromSpeed+0x1fc>
    5a50:	59 c1       	rjmp	.+690    	; 0x5d04 <getInputFromSpeed+0x4ae>
    5a52:	80 91 70 09 	lds	r24, 0x0970
    5a56:	90 91 71 09 	lds	r25, 0x0971
    5a5a:	82 17       	cp	r24, r18
    5a5c:	93 07       	cpc	r25, r19
    5a5e:	0c f0       	brlt	.+2      	; 0x5a62 <getInputFromSpeed+0x20c>
    5a60:	54 c1       	rjmp	.+680    	; 0x5d0a <getInputFromSpeed+0x4b4>
    5a62:	c0 91 80 09 	lds	r28, 0x0980
    5a66:	d0 91 81 09 	lds	r29, 0x0981
    5a6a:	c2 17       	cp	r28, r18
    5a6c:	d3 07       	cpc	r29, r19
    5a6e:	0c f0       	brlt	.+2      	; 0x5a72 <getInputFromSpeed+0x21c>
    5a70:	d1 c0       	rjmp	.+418    	; 0x5c14 <getInputFromSpeed+0x3be>
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][4]/(float)calibration[CALIBRATION_SAMPLES-1][5]);
    5a72:	b9 01       	movw	r22, r18
    5a74:	88 27       	eor	r24, r24
    5a76:	77 fd       	sbrc	r23, 7
    5a78:	80 95       	com	r24
    5a7a:	98 2f       	mov	r25, r24
    5a7c:	0e 94 d2 56 	call	0xada4	; 0xada4 <__floatsisf>
    5a80:	7b 01       	movw	r14, r22
    5a82:	8c 01       	movw	r16, r24
    5a84:	60 91 7e 09 	lds	r22, 0x097E
    5a88:	70 91 7f 09 	lds	r23, 0x097F
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][6]/(float)calibration[CALIBRATION_SAMPLES-1][7]);
    5a8c:	88 27       	eor	r24, r24
    5a8e:	77 fd       	sbrc	r23, 7
    5a90:	80 95       	com	r24
    5a92:	98 2f       	mov	r25, r24
    5a94:	0e 94 d2 56 	call	0xada4	; 0xada4 <__floatsisf>
    5a98:	9b 01       	movw	r18, r22
    5a9a:	ac 01       	movw	r20, r24
    5a9c:	c8 01       	movw	r24, r16
    5a9e:	b7 01       	movw	r22, r14
    5aa0:	0e 94 eb 57 	call	0xafd6	; 0xafd6 <__mulsf3>
    5aa4:	7b 01       	movw	r14, r22
    5aa6:	8c 01       	movw	r16, r24
    5aa8:	be 01       	movw	r22, r28
    5aaa:	88 27       	eor	r24, r24
    5aac:	77 fd       	sbrc	r23, 7
    5aae:	80 95       	com	r24
    5ab0:	98 2f       	mov	r25, r24
    5ab2:	0e 94 d2 56 	call	0xada4	; 0xada4 <__floatsisf>
    5ab6:	9b 01       	movw	r18, r22
    5ab8:	ac 01       	movw	r20, r24
    5aba:	c8 01       	movw	r24, r16
    5abc:	b7 01       	movw	r22, r14
    5abe:	0e 94 37 56 	call	0xac6e	; 0xac6e <__divsf3>
    5ac2:	0e 94 9f 56 	call	0xad3e	; 0xad3e <__fixsfsi>
            temp = -temp;
    5ac6:	70 95       	com	r23
    5ac8:	61 95       	neg	r22
    5aca:	7f 4f       	sbci	r23, 0xFF	; 255
    5acc:	56 cf       	rjmp	.-340    	; 0x597a <getInputFromSpeed+0x124>
    5ace:	c0 91 78 09 	lds	r28, 0x0978
    5ad2:	d0 91 79 09 	lds	r29, 0x0979
    5ad6:	24 cf       	rjmp	.-440    	; 0x5920 <getInputFromSpeed+0xca>
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
                break;
            }
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            if(calibration[i][3] >= currVel) {
    5ad8:	80 91 fc 08 	lds	r24, 0x08FC
    5adc:	90 91 fd 08 	lds	r25, 0x08FD
    5ae0:	82 17       	cp	r24, r18
    5ae2:	93 07       	cpc	r25, r19
    5ae4:	0c f0       	brlt	.+2      	; 0x5ae8 <getInputFromSpeed+0x292>
    5ae6:	f7 c0       	rjmp	.+494    	; 0x5cd6 <getInputFromSpeed+0x480>
    5ae8:	80 91 0c 09 	lds	r24, 0x090C
    5aec:	90 91 0d 09 	lds	r25, 0x090D
    5af0:	82 17       	cp	r24, r18
    5af2:	93 07       	cpc	r25, r19
    5af4:	0c f0       	brlt	.+2      	; 0x5af8 <getInputFromSpeed+0x2a2>
    5af6:	f8 c0       	rjmp	.+496    	; 0x5ce8 <getInputFromSpeed+0x492>
    5af8:	80 91 1c 09 	lds	r24, 0x091C
    5afc:	90 91 1d 09 	lds	r25, 0x091D
    5b00:	82 17       	cp	r24, r18
    5b02:	93 07       	cpc	r25, r19
    5b04:	0c f0       	brlt	.+2      	; 0x5b08 <getInputFromSpeed+0x2b2>
    5b06:	f3 c0       	rjmp	.+486    	; 0x5cee <getInputFromSpeed+0x498>
    5b08:	80 91 2c 09 	lds	r24, 0x092C
    5b0c:	90 91 2d 09 	lds	r25, 0x092D
    5b10:	82 17       	cp	r24, r18
    5b12:	93 07       	cpc	r25, r19
    5b14:	0c f0       	brlt	.+2      	; 0x5b18 <getInputFromSpeed+0x2c2>
    5b16:	ee c0       	rjmp	.+476    	; 0x5cf4 <getInputFromSpeed+0x49e>
    5b18:	80 91 3c 09 	lds	r24, 0x093C
    5b1c:	90 91 3d 09 	lds	r25, 0x093D
    5b20:	82 17       	cp	r24, r18
    5b22:	93 07       	cpc	r25, r19
    5b24:	0c f0       	brlt	.+2      	; 0x5b28 <getInputFromSpeed+0x2d2>
    5b26:	da c0       	rjmp	.+436    	; 0x5cdc <getInputFromSpeed+0x486>
    5b28:	80 91 4c 09 	lds	r24, 0x094C
    5b2c:	90 91 4d 09 	lds	r25, 0x094D
    5b30:	82 17       	cp	r24, r18
    5b32:	93 07       	cpc	r25, r19
    5b34:	0c f0       	brlt	.+2      	; 0x5b38 <getInputFromSpeed+0x2e2>
    5b36:	d5 c0       	rjmp	.+426    	; 0x5ce2 <getInputFromSpeed+0x48c>
    5b38:	80 91 5c 09 	lds	r24, 0x095C
    5b3c:	90 91 5d 09 	lds	r25, 0x095D
    5b40:	82 17       	cp	r24, r18
    5b42:	93 07       	cpc	r25, r19
    5b44:	0c f0       	brlt	.+2      	; 0x5b48 <getInputFromSpeed+0x2f2>
    5b46:	de c0       	rjmp	.+444    	; 0x5d04 <getInputFromSpeed+0x4ae>
    5b48:	80 91 6c 09 	lds	r24, 0x096C
    5b4c:	90 91 6d 09 	lds	r25, 0x096D
    5b50:	82 17       	cp	r24, r18
    5b52:	93 07       	cpc	r25, r19
    5b54:	0c f0       	brlt	.+2      	; 0x5b58 <getInputFromSpeed+0x302>
    5b56:	d9 c0       	rjmp	.+434    	; 0x5d0a <getInputFromSpeed+0x4b4>
    5b58:	c0 91 7c 09 	lds	r28, 0x097C
    5b5c:	d0 91 7d 09 	lds	r29, 0x097D
    5b60:	c2 17       	cp	r28, r18
    5b62:	d3 07       	cpc	r29, r19
    5b64:	0c f0       	brlt	.+2      	; 0x5b68 <getInputFromSpeed+0x312>
    5b66:	56 c0       	rjmp	.+172    	; 0x5c14 <getInputFromSpeed+0x3be>
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
    5b68:	b9 01       	movw	r22, r18
    5b6a:	88 27       	eor	r24, r24
    5b6c:	77 fd       	sbrc	r23, 7
    5b6e:	80 95       	com	r24
    5b70:	98 2f       	mov	r25, r24
    5b72:	0e 94 d2 56 	call	0xada4	; 0xada4 <__floatsisf>
    5b76:	7b 01       	movw	r14, r22
    5b78:	8c 01       	movw	r16, r24
    5b7a:	60 91 7a 09 	lds	r22, 0x097A
    5b7e:	70 91 7b 09 	lds	r23, 0x097B
    5b82:	db ce       	rjmp	.-586    	; 0x593a <getInputFromSpeed+0xe4>
        } else if(mode==LEFT_WHEEL_BW_SC) {
            if(calibration[i][5] >= currVel) {
                break;
            }
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            if(calibration[i][7] >= currVel) {
    5b84:	80 91 04 09 	lds	r24, 0x0904
    5b88:	90 91 05 09 	lds	r25, 0x0905
    5b8c:	82 17       	cp	r24, r18
    5b8e:	93 07       	cpc	r25, r19
    5b90:	0c f0       	brlt	.+2      	; 0x5b94 <getInputFromSpeed+0x33e>
    5b92:	a1 c0       	rjmp	.+322    	; 0x5cd6 <getInputFromSpeed+0x480>
    5b94:	80 91 14 09 	lds	r24, 0x0914
    5b98:	90 91 15 09 	lds	r25, 0x0915
    5b9c:	82 17       	cp	r24, r18
    5b9e:	93 07       	cpc	r25, r19
    5ba0:	0c f0       	brlt	.+2      	; 0x5ba4 <getInputFromSpeed+0x34e>
    5ba2:	a2 c0       	rjmp	.+324    	; 0x5ce8 <getInputFromSpeed+0x492>
    5ba4:	80 91 24 09 	lds	r24, 0x0924
    5ba8:	90 91 25 09 	lds	r25, 0x0925
    5bac:	82 17       	cp	r24, r18
    5bae:	93 07       	cpc	r25, r19
    5bb0:	0c f0       	brlt	.+2      	; 0x5bb4 <getInputFromSpeed+0x35e>
    5bb2:	9d c0       	rjmp	.+314    	; 0x5cee <getInputFromSpeed+0x498>
    5bb4:	80 91 34 09 	lds	r24, 0x0934
    5bb8:	90 91 35 09 	lds	r25, 0x0935
    5bbc:	82 17       	cp	r24, r18
    5bbe:	93 07       	cpc	r25, r19
    5bc0:	0c f0       	brlt	.+2      	; 0x5bc4 <getInputFromSpeed+0x36e>
    5bc2:	98 c0       	rjmp	.+304    	; 0x5cf4 <getInputFromSpeed+0x49e>
    5bc4:	80 91 44 09 	lds	r24, 0x0944
    5bc8:	90 91 45 09 	lds	r25, 0x0945
    5bcc:	82 17       	cp	r24, r18
    5bce:	93 07       	cpc	r25, r19
    5bd0:	0c f0       	brlt	.+2      	; 0x5bd4 <getInputFromSpeed+0x37e>
    5bd2:	84 c0       	rjmp	.+264    	; 0x5cdc <getInputFromSpeed+0x486>
    5bd4:	80 91 54 09 	lds	r24, 0x0954
    5bd8:	90 91 55 09 	lds	r25, 0x0955
    5bdc:	82 17       	cp	r24, r18
    5bde:	93 07       	cpc	r25, r19
    5be0:	0c f0       	brlt	.+2      	; 0x5be4 <getInputFromSpeed+0x38e>
    5be2:	7f c0       	rjmp	.+254    	; 0x5ce2 <getInputFromSpeed+0x48c>
    5be4:	80 91 64 09 	lds	r24, 0x0964
    5be8:	90 91 65 09 	lds	r25, 0x0965
    5bec:	82 17       	cp	r24, r18
    5bee:	93 07       	cpc	r25, r19
    5bf0:	0c f0       	brlt	.+2      	; 0x5bf4 <getInputFromSpeed+0x39e>
    5bf2:	88 c0       	rjmp	.+272    	; 0x5d04 <getInputFromSpeed+0x4ae>
    5bf4:	80 91 74 09 	lds	r24, 0x0974
    5bf8:	90 91 75 09 	lds	r25, 0x0975
    5bfc:	82 17       	cp	r24, r18
    5bfe:	93 07       	cpc	r25, r19
    5c00:	0c f0       	brlt	.+2      	; 0x5c04 <getInputFromSpeed+0x3ae>
    5c02:	83 c0       	rjmp	.+262    	; 0x5d0a <getInputFromSpeed+0x4b4>
    5c04:	c0 91 84 09 	lds	r28, 0x0984
    5c08:	d0 91 85 09 	lds	r29, 0x0985
    5c0c:	c2 17       	cp	r28, r18
    5c0e:	d3 07       	cpc	r29, r19
    5c10:	0c f4       	brge	.+2      	; 0x5c14 <getInputFromSpeed+0x3be>
    5c12:	d9 ce       	rjmp	.-590    	; 0x59c6 <getInputFromSpeed+0x170>
        currVel = -currVel; // consider only positive values
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
    5c14:	c8 e0       	ldi	r28, 0x08	; 8
    5c16:	d0 e0       	ldi	r29, 0x00	; 0
                break;
            }
        } 
    }

    if(i==0) {  // the velocity is lower than first saved in the matrix
    5c18:	20 97       	sbiw	r28, 0x00	; 0
    5c1a:	09 f0       	breq	.+2      	; 0x5c1e <getInputFromSpeed+0x3c8>
    5c1c:	79 c0       	rjmp	.+242    	; 0x5d10 <getInputFromSpeed+0x4ba>
        if(mode==LEFT_WHEEL_FW_SC) {
    5c1e:	66 23       	and	r22, r22
    5c20:	91 f4       	brne	.+36     	; 0x5c46 <getInputFromSpeed+0x3f0>
            temp = (currVel*calibration[0][0])/calibration[0][1];
    5c22:	40 91 f6 08 	lds	r20, 0x08F6
    5c26:	50 91 f7 08 	lds	r21, 0x08F7
    5c2a:	24 9f       	mul	r18, r20
    5c2c:	c0 01       	movw	r24, r0
    5c2e:	25 9f       	mul	r18, r21
    5c30:	90 0d       	add	r25, r0
    5c32:	34 9f       	mul	r19, r20
    5c34:	90 0d       	add	r25, r0
    5c36:	11 24       	eor	r1, r1
    5c38:	60 91 f8 08 	lds	r22, 0x08F8
    5c3c:	70 91 f9 08 	lds	r23, 0x08F9
    5c40:	0e 94 a9 58 	call	0xb152	; 0xb152 <__divmodhi4>
    5c44:	9a ce       	rjmp	.-716    	; 0x597a <getInputFromSpeed+0x124>
        } else if(mode==RIGHT_WHEEL_FW_SC) {
    5c46:	61 30       	cpi	r22, 0x01	; 1
    5c48:	d1 f0       	breq	.+52     	; 0x5c7e <getInputFromSpeed+0x428>
            temp = (currVel*calibration[0][2])/calibration[0][3];
        } else if(mode==LEFT_WHEEL_BW_SC) {
    5c4a:	62 30       	cpi	r22, 0x02	; 2
    5c4c:	51 f1       	breq	.+84     	; 0x5ca2 <getInputFromSpeed+0x44c>
            temp = currVel*calibration[0][4]/calibration[0][5];
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
    5c4e:	63 30       	cpi	r22, 0x03	; 3
    5c50:	09 f0       	breq	.+2      	; 0x5c54 <getInputFromSpeed+0x3fe>
    5c52:	91 ce       	rjmp	.-734    	; 0x5976 <getInputFromSpeed+0x120>
            temp = currVel*calibration[0][6]/calibration[0][7];
    5c54:	40 91 02 09 	lds	r20, 0x0902
    5c58:	50 91 03 09 	lds	r21, 0x0903
    5c5c:	24 9f       	mul	r18, r20
    5c5e:	c0 01       	movw	r24, r0
    5c60:	25 9f       	mul	r18, r21
    5c62:	90 0d       	add	r25, r0
    5c64:	34 9f       	mul	r19, r20
    5c66:	90 0d       	add	r25, r0
    5c68:	11 24       	eor	r1, r1
    5c6a:	60 91 04 09 	lds	r22, 0x0904
    5c6e:	70 91 05 09 	lds	r23, 0x0905
    5c72:	0e 94 a9 58 	call	0xb152	; 0xb152 <__divmodhi4>
            temp = -temp;
    5c76:	70 95       	com	r23
    5c78:	61 95       	neg	r22
    5c7a:	7f 4f       	sbci	r23, 0xFF	; 255
    5c7c:	7e ce       	rjmp	.-772    	; 0x597a <getInputFromSpeed+0x124>

    if(i==0) {  // the velocity is lower than first saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][0])/calibration[0][1];
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][2])/calibration[0][3];
    5c7e:	40 91 fa 08 	lds	r20, 0x08FA
    5c82:	50 91 fb 08 	lds	r21, 0x08FB
    5c86:	24 9f       	mul	r18, r20
    5c88:	c0 01       	movw	r24, r0
    5c8a:	25 9f       	mul	r18, r21
    5c8c:	90 0d       	add	r25, r0
    5c8e:	34 9f       	mul	r19, r20
    5c90:	90 0d       	add	r25, r0
    5c92:	11 24       	eor	r1, r1
    5c94:	60 91 fc 08 	lds	r22, 0x08FC
    5c98:	70 91 fd 08 	lds	r23, 0x08FD
    5c9c:	0e 94 a9 58 	call	0xb152	; 0xb152 <__divmodhi4>
    5ca0:	6c ce       	rjmp	.-808    	; 0x597a <getInputFromSpeed+0x124>
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][4]/calibration[0][5];
    5ca2:	40 91 fe 08 	lds	r20, 0x08FE
    5ca6:	50 91 ff 08 	lds	r21, 0x08FF
    5caa:	24 9f       	mul	r18, r20
    5cac:	c0 01       	movw	r24, r0
    5cae:	25 9f       	mul	r18, r21
    5cb0:	90 0d       	add	r25, r0
    5cb2:	34 9f       	mul	r19, r20
    5cb4:	90 0d       	add	r25, r0
    5cb6:	11 24       	eor	r1, r1
    5cb8:	60 91 00 09 	lds	r22, 0x0900
    5cbc:	70 91 01 09 	lds	r23, 0x0901
    5cc0:	0e 94 a9 58 	call	0xb152	; 0xb152 <__divmodhi4>
            temp = -temp;
    5cc4:	70 95       	com	r23
    5cc6:	61 95       	neg	r22
    5cc8:	7f 4f       	sbci	r23, 0xFF	; 255
    5cca:	57 ce       	rjmp	.-850    	; 0x597a <getInputFromSpeed+0x124>
    5ccc:	c0 91 7c 09 	lds	r28, 0x097C
    5cd0:	d0 91 7d 09 	lds	r29, 0x097D
    5cd4:	49 cf       	rjmp	.-366    	; 0x5b68 <getInputFromSpeed+0x312>

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
        currVel = -currVel; // consider only positive values
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    5cd6:	c0 e0       	ldi	r28, 0x00	; 0
    5cd8:	d0 e0       	ldi	r29, 0x00	; 0
    5cda:	9e cf       	rjmp	.-196    	; 0x5c18 <getInputFromSpeed+0x3c2>
    5cdc:	c4 e0       	ldi	r28, 0x04	; 4
    5cde:	d0 e0       	ldi	r29, 0x00	; 0
    5ce0:	9b cf       	rjmp	.-202    	; 0x5c18 <getInputFromSpeed+0x3c2>
    5ce2:	c5 e0       	ldi	r28, 0x05	; 5
    5ce4:	d0 e0       	ldi	r29, 0x00	; 0
    5ce6:	98 cf       	rjmp	.-208    	; 0x5c18 <getInputFromSpeed+0x3c2>
    5ce8:	c1 e0       	ldi	r28, 0x01	; 1
    5cea:	d0 e0       	ldi	r29, 0x00	; 0
    5cec:	95 cf       	rjmp	.-214    	; 0x5c18 <getInputFromSpeed+0x3c2>
    5cee:	c2 e0       	ldi	r28, 0x02	; 2
    5cf0:	d0 e0       	ldi	r29, 0x00	; 0
    5cf2:	92 cf       	rjmp	.-220    	; 0x5c18 <getInputFromSpeed+0x3c2>
    5cf4:	c3 e0       	ldi	r28, 0x03	; 3
    5cf6:	d0 e0       	ldi	r29, 0x00	; 0
    5cf8:	8f cf       	rjmp	.-226    	; 0x5c18 <getInputFromSpeed+0x3c2>
    5cfa:	c0 91 80 09 	lds	r28, 0x0980
    5cfe:	d0 91 81 09 	lds	r29, 0x0981
    5d02:	b7 ce       	rjmp	.-658    	; 0x5a72 <getInputFromSpeed+0x21c>
    5d04:	c6 e0       	ldi	r28, 0x06	; 6
    5d06:	d0 e0       	ldi	r29, 0x00	; 0
    5d08:	87 cf       	rjmp	.-242    	; 0x5c18 <getInputFromSpeed+0x3c2>
    5d0a:	c7 e0       	ldi	r28, 0x07	; 7
    5d0c:	d0 e0       	ldi	r29, 0x00	; 0
    5d0e:	84 cf       	rjmp	.-248    	; 0x5c18 <getInputFromSpeed+0x3c2>
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][6]/calibration[0][7];
            temp = -temp;
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    5d10:	c9 30       	cpi	r28, 0x09	; 9
    5d12:	d1 05       	cpc	r29, r1
    5d14:	09 f4       	brne	.+2      	; 0x5d18 <getInputFromSpeed+0x4c2>
    5d16:	48 ce       	rjmp	.-880    	; 0x59a8 <getInputFromSpeed+0x152>
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][6]/(float)calibration[CALIBRATION_SAMPLES-1][7]);
            temp = -temp;
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
    5d18:	66 23       	and	r22, r22
    5d1a:	09 f0       	breq	.+2      	; 0x5d1e <getInputFromSpeed+0x4c8>
    5d1c:	47 c0       	rjmp	.+142    	; 0x5dac <getInputFromSpeed+0x556>
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
    5d1e:	fe 01       	movw	r30, r28
    5d20:	e2 95       	swap	r30
    5d22:	f2 95       	swap	r31
    5d24:	f0 7f       	andi	r31, 0xF0	; 240
    5d26:	fe 27       	eor	r31, r30
    5d28:	e0 7f       	andi	r30, 0xF0	; 240
    5d2a:	fe 27       	eor	r31, r30
    5d2c:	ea 51       	subi	r30, 0x1A	; 26
    5d2e:	f7 4f       	sbci	r31, 0xF7	; 247
    5d30:	c2 80       	ldd	r12, Z+2	; 0x02
    5d32:	d3 80       	ldd	r13, Z+3	; 0x03
    5d34:	a0 80       	ld	r10, Z
    5d36:	b1 80       	ldd	r11, Z+1	; 0x01
    5d38:	2c 19       	sub	r18, r12
    5d3a:	3d 09       	sbc	r19, r13
    5d3c:	b9 01       	movw	r22, r18
    5d3e:	88 27       	eor	r24, r24
    5d40:	77 fd       	sbrc	r23, 7
    5d42:	80 95       	com	r24
    5d44:	98 2f       	mov	r25, r24
    5d46:	0e 94 d2 56 	call	0xada4	; 0xada4 <__floatsisf>
    5d4a:	7b 01       	movw	r14, r22
    5d4c:	8c 01       	movw	r16, r24
    5d4e:	c2 95       	swap	r28
    5d50:	d2 95       	swap	r29
    5d52:	d0 7f       	andi	r29, 0xF0	; 240
    5d54:	dc 27       	eor	r29, r28
    5d56:	c0 7f       	andi	r28, 0xF0	; 240
    5d58:	dc 27       	eor	r29, r28
    5d5a:	ca 50       	subi	r28, 0x0A	; 10
    5d5c:	d7 4f       	sbci	r29, 0xF7	; 247
    5d5e:	68 81       	ld	r22, Y
    5d60:	79 81       	ldd	r23, Y+1	; 0x01
    5d62:	6a 19       	sub	r22, r10
    5d64:	7b 09       	sbc	r23, r11
    5d66:	88 27       	eor	r24, r24
    5d68:	77 fd       	sbrc	r23, 7
    5d6a:	80 95       	com	r24
    5d6c:	98 2f       	mov	r25, r24
    5d6e:	0e 94 d2 56 	call	0xada4	; 0xada4 <__floatsisf>
    5d72:	9b 01       	movw	r18, r22
    5d74:	ac 01       	movw	r20, r24
    5d76:	c8 01       	movw	r24, r16
    5d78:	b7 01       	movw	r22, r14
    5d7a:	0e 94 eb 57 	call	0xafd6	; 0xafd6 <__mulsf3>
    5d7e:	7b 01       	movw	r14, r22
    5d80:	8c 01       	movw	r16, r24
    5d82:	6a 81       	ldd	r22, Y+2	; 0x02
    5d84:	7b 81       	ldd	r23, Y+3	; 0x03
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
    5d86:	6c 19       	sub	r22, r12
    5d88:	7d 09       	sbc	r23, r13
    5d8a:	88 27       	eor	r24, r24
    5d8c:	77 fd       	sbrc	r23, 7
    5d8e:	80 95       	com	r24
    5d90:	98 2f       	mov	r25, r24
    5d92:	0e 94 d2 56 	call	0xada4	; 0xada4 <__floatsisf>
    5d96:	9b 01       	movw	r18, r22
    5d98:	ac 01       	movw	r20, r24
    5d9a:	c8 01       	movw	r24, r16
    5d9c:	b7 01       	movw	r22, r14
    5d9e:	0e 94 37 56 	call	0xac6e	; 0xac6e <__divsf3>
    5da2:	0e 94 9f 56 	call	0xad3e	; 0xad3e <__fixsfsi>
    5da6:	6a 0d       	add	r22, r10
    5da8:	7b 1d       	adc	r23, r11
    5daa:	e7 cd       	rjmp	.-1074   	; 0x597a <getInputFromSpeed+0x124>
            temp = -temp;
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
        } else if(mode==RIGHT_WHEEL_FW_SC) {
    5dac:	61 30       	cpi	r22, 0x01	; 1
    5dae:	09 f4       	brne	.+2      	; 0x5db2 <getInputFromSpeed+0x55c>
    5db0:	50 c0       	rjmp	.+160    	; 0x5e52 <getInputFromSpeed+0x5fc>
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
        } else if(mode==LEFT_WHEEL_BW_SC) {
    5db2:	62 30       	cpi	r22, 0x02	; 2
    5db4:	09 f4       	brne	.+2      	; 0x5db8 <getInputFromSpeed+0x562>
    5db6:	82 c0       	rjmp	.+260    	; 0x5ebc <getInputFromSpeed+0x666>
            temp = calibration[i-1][4] + (signed int)(((float)(currVel-calibration[i-1][5])*(float)(calibration[i][4]-calibration[i-1][4]))/(float)(calibration[i][5]-calibration[i-1][5]));
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
    5db8:	63 30       	cpi	r22, 0x03	; 3
    5dba:	09 f0       	breq	.+2      	; 0x5dbe <getInputFromSpeed+0x568>
    5dbc:	dc cd       	rjmp	.-1096   	; 0x5976 <getInputFromSpeed+0x120>
            temp = calibration[i-1][6] + (signed int)(((float)(currVel-calibration[i-1][7])*(float)(calibration[i][6]-calibration[i-1][6]))/(float)(calibration[i][7]-calibration[i-1][7]));
    5dbe:	fe 01       	movw	r30, r28
    5dc0:	e2 95       	swap	r30
    5dc2:	f2 95       	swap	r31
    5dc4:	f0 7f       	andi	r31, 0xF0	; 240
    5dc6:	fe 27       	eor	r31, r30
    5dc8:	e0 7f       	andi	r30, 0xF0	; 240
    5dca:	fe 27       	eor	r31, r30
    5dcc:	ea 51       	subi	r30, 0x1A	; 26
    5dce:	f7 4f       	sbci	r31, 0xF7	; 247
    5dd0:	c6 84       	ldd	r12, Z+14	; 0x0e
    5dd2:	d7 84       	ldd	r13, Z+15	; 0x0f
    5dd4:	a4 84       	ldd	r10, Z+12	; 0x0c
    5dd6:	b5 84       	ldd	r11, Z+13	; 0x0d
    5dd8:	2c 19       	sub	r18, r12
    5dda:	3d 09       	sbc	r19, r13
    5ddc:	b9 01       	movw	r22, r18
    5dde:	88 27       	eor	r24, r24
    5de0:	77 fd       	sbrc	r23, 7
    5de2:	80 95       	com	r24
    5de4:	98 2f       	mov	r25, r24
    5de6:	0e 94 d2 56 	call	0xada4	; 0xada4 <__floatsisf>
    5dea:	7b 01       	movw	r14, r22
    5dec:	8c 01       	movw	r16, r24
    5dee:	c2 95       	swap	r28
    5df0:	d2 95       	swap	r29
    5df2:	d0 7f       	andi	r29, 0xF0	; 240
    5df4:	dc 27       	eor	r29, r28
    5df6:	c0 7f       	andi	r28, 0xF0	; 240
    5df8:	dc 27       	eor	r29, r28
    5dfa:	ca 50       	subi	r28, 0x0A	; 10
    5dfc:	d7 4f       	sbci	r29, 0xF7	; 247
    5dfe:	6c 85       	ldd	r22, Y+12	; 0x0c
    5e00:	7d 85       	ldd	r23, Y+13	; 0x0d
    5e02:	6a 19       	sub	r22, r10
    5e04:	7b 09       	sbc	r23, r11
    5e06:	88 27       	eor	r24, r24
    5e08:	77 fd       	sbrc	r23, 7
    5e0a:	80 95       	com	r24
    5e0c:	98 2f       	mov	r25, r24
    5e0e:	0e 94 d2 56 	call	0xada4	; 0xada4 <__floatsisf>
    5e12:	9b 01       	movw	r18, r22
    5e14:	ac 01       	movw	r20, r24
    5e16:	c8 01       	movw	r24, r16
    5e18:	b7 01       	movw	r22, r14
    5e1a:	0e 94 eb 57 	call	0xafd6	; 0xafd6 <__mulsf3>
    5e1e:	7b 01       	movw	r14, r22
    5e20:	8c 01       	movw	r16, r24
    5e22:	6e 85       	ldd	r22, Y+14	; 0x0e
    5e24:	7f 85       	ldd	r23, Y+15	; 0x0f
    5e26:	6c 19       	sub	r22, r12
    5e28:	7d 09       	sbc	r23, r13
    5e2a:	88 27       	eor	r24, r24
    5e2c:	77 fd       	sbrc	r23, 7
    5e2e:	80 95       	com	r24
    5e30:	98 2f       	mov	r25, r24
    5e32:	0e 94 d2 56 	call	0xada4	; 0xada4 <__floatsisf>
    5e36:	9b 01       	movw	r18, r22
    5e38:	ac 01       	movw	r20, r24
    5e3a:	c8 01       	movw	r24, r16
    5e3c:	b7 01       	movw	r22, r14
    5e3e:	0e 94 37 56 	call	0xac6e	; 0xac6e <__divsf3>
    5e42:	0e 94 9f 56 	call	0xad3e	; 0xad3e <__fixsfsi>
    5e46:	6a 0d       	add	r22, r10
    5e48:	7b 1d       	adc	r23, r11
            temp = -temp;
    5e4a:	70 95       	com	r23
    5e4c:	61 95       	neg	r22
    5e4e:	7f 4f       	sbci	r23, 0xFF	; 255
    5e50:	94 cd       	rjmp	.-1240   	; 0x597a <getInputFromSpeed+0x124>
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
    5e52:	fe 01       	movw	r30, r28
    5e54:	e2 95       	swap	r30
    5e56:	f2 95       	swap	r31
    5e58:	f0 7f       	andi	r31, 0xF0	; 240
    5e5a:	fe 27       	eor	r31, r30
    5e5c:	e0 7f       	andi	r30, 0xF0	; 240
    5e5e:	fe 27       	eor	r31, r30
    5e60:	ea 51       	subi	r30, 0x1A	; 26
    5e62:	f7 4f       	sbci	r31, 0xF7	; 247
    5e64:	c6 80       	ldd	r12, Z+6	; 0x06
    5e66:	d7 80       	ldd	r13, Z+7	; 0x07
    5e68:	a4 80       	ldd	r10, Z+4	; 0x04
    5e6a:	b5 80       	ldd	r11, Z+5	; 0x05
    5e6c:	2c 19       	sub	r18, r12
    5e6e:	3d 09       	sbc	r19, r13
    5e70:	b9 01       	movw	r22, r18
    5e72:	88 27       	eor	r24, r24
    5e74:	77 fd       	sbrc	r23, 7
    5e76:	80 95       	com	r24
    5e78:	98 2f       	mov	r25, r24
    5e7a:	0e 94 d2 56 	call	0xada4	; 0xada4 <__floatsisf>
    5e7e:	7b 01       	movw	r14, r22
    5e80:	8c 01       	movw	r16, r24
    5e82:	c2 95       	swap	r28
    5e84:	d2 95       	swap	r29
    5e86:	d0 7f       	andi	r29, 0xF0	; 240
    5e88:	dc 27       	eor	r29, r28
    5e8a:	c0 7f       	andi	r28, 0xF0	; 240
    5e8c:	dc 27       	eor	r29, r28
    5e8e:	ca 50       	subi	r28, 0x0A	; 10
    5e90:	d7 4f       	sbci	r29, 0xF7	; 247
    5e92:	6c 81       	ldd	r22, Y+4	; 0x04
    5e94:	7d 81       	ldd	r23, Y+5	; 0x05
    5e96:	6a 19       	sub	r22, r10
    5e98:	7b 09       	sbc	r23, r11
    5e9a:	88 27       	eor	r24, r24
    5e9c:	77 fd       	sbrc	r23, 7
    5e9e:	80 95       	com	r24
    5ea0:	98 2f       	mov	r25, r24
    5ea2:	0e 94 d2 56 	call	0xada4	; 0xada4 <__floatsisf>
    5ea6:	9b 01       	movw	r18, r22
    5ea8:	ac 01       	movw	r20, r24
    5eaa:	c8 01       	movw	r24, r16
    5eac:	b7 01       	movw	r22, r14
    5eae:	0e 94 eb 57 	call	0xafd6	; 0xafd6 <__mulsf3>
    5eb2:	7b 01       	movw	r14, r22
    5eb4:	8c 01       	movw	r16, r24
    5eb6:	6e 81       	ldd	r22, Y+6	; 0x06
    5eb8:	7f 81       	ldd	r23, Y+7	; 0x07
    5eba:	65 cf       	rjmp	.-310    	; 0x5d86 <getInputFromSpeed+0x530>
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = calibration[i-1][4] + (signed int)(((float)(currVel-calibration[i-1][5])*(float)(calibration[i][4]-calibration[i-1][4]))/(float)(calibration[i][5]-calibration[i-1][5]));
    5ebc:	fe 01       	movw	r30, r28
    5ebe:	e2 95       	swap	r30
    5ec0:	f2 95       	swap	r31
    5ec2:	f0 7f       	andi	r31, 0xF0	; 240
    5ec4:	fe 27       	eor	r31, r30
    5ec6:	e0 7f       	andi	r30, 0xF0	; 240
    5ec8:	fe 27       	eor	r31, r30
    5eca:	ea 51       	subi	r30, 0x1A	; 26
    5ecc:	f7 4f       	sbci	r31, 0xF7	; 247
    5ece:	c2 84       	ldd	r12, Z+10	; 0x0a
    5ed0:	d3 84       	ldd	r13, Z+11	; 0x0b
    5ed2:	a0 84       	ldd	r10, Z+8	; 0x08
    5ed4:	b1 84       	ldd	r11, Z+9	; 0x09
    5ed6:	2c 19       	sub	r18, r12
    5ed8:	3d 09       	sbc	r19, r13
    5eda:	b9 01       	movw	r22, r18
    5edc:	88 27       	eor	r24, r24
    5ede:	77 fd       	sbrc	r23, 7
    5ee0:	80 95       	com	r24
    5ee2:	98 2f       	mov	r25, r24
    5ee4:	0e 94 d2 56 	call	0xada4	; 0xada4 <__floatsisf>
    5ee8:	7b 01       	movw	r14, r22
    5eea:	8c 01       	movw	r16, r24
    5eec:	c2 95       	swap	r28
    5eee:	d2 95       	swap	r29
    5ef0:	d0 7f       	andi	r29, 0xF0	; 240
    5ef2:	dc 27       	eor	r29, r28
    5ef4:	c0 7f       	andi	r28, 0xF0	; 240
    5ef6:	dc 27       	eor	r29, r28
    5ef8:	ca 50       	subi	r28, 0x0A	; 10
    5efa:	d7 4f       	sbci	r29, 0xF7	; 247
    5efc:	68 85       	ldd	r22, Y+8	; 0x08
    5efe:	79 85       	ldd	r23, Y+9	; 0x09
    5f00:	6a 19       	sub	r22, r10
    5f02:	7b 09       	sbc	r23, r11
    5f04:	88 27       	eor	r24, r24
    5f06:	77 fd       	sbrc	r23, 7
    5f08:	80 95       	com	r24
    5f0a:	98 2f       	mov	r25, r24
    5f0c:	0e 94 d2 56 	call	0xada4	; 0xada4 <__floatsisf>
    5f10:	9b 01       	movw	r18, r22
    5f12:	ac 01       	movw	r20, r24
    5f14:	c8 01       	movw	r24, r16
    5f16:	b7 01       	movw	r22, r14
    5f18:	0e 94 eb 57 	call	0xafd6	; 0xafd6 <__mulsf3>
    5f1c:	7b 01       	movw	r14, r22
    5f1e:	8c 01       	movw	r16, r24
    5f20:	6a 85       	ldd	r22, Y+10	; 0x0a
    5f22:	7b 85       	ldd	r23, Y+11	; 0x0b
    5f24:	80 cf       	rjmp	.-256    	; 0x5e26 <getInputFromSpeed+0x5d0>

00005f26 <getRightSpeedFromInput>:
    
    return temp;
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {
    5f26:	8f 92       	push	r8
    5f28:	9f 92       	push	r9
    5f2a:	af 92       	push	r10
    5f2c:	bf 92       	push	r11
    5f2e:	cf 92       	push	r12
    5f30:	df 92       	push	r13
    5f32:	ef 92       	push	r14
    5f34:	ff 92       	push	r15
    5f36:	0f 93       	push	r16
    5f38:	1f 93       	push	r17
    5f3a:	cf 93       	push	r28
    5f3c:	df 93       	push	r29

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    5f3e:	c0 91 03 03 	lds	r28, 0x0303
    5f42:	d0 91 04 03 	lds	r29, 0x0304
    5f46:	80 91 05 03 	lds	r24, 0x0305
    5f4a:	90 91 06 03 	lds	r25, 0x0306
    5f4e:	97 fd       	sbrc	r25, 7
    5f50:	d9 c0       	rjmp	.+434    	; 0x6104 <getRightSpeedFromInput+0x1de>
    5f52:	60 91 fa 08 	lds	r22, 0x08FA
    5f56:	70 91 fb 08 	lds	r23, 0x08FB
    5f5a:	6c 17       	cp	r22, r28
    5f5c:	7d 07       	cpc	r23, r29
    5f5e:	0c f0       	brlt	.+2      	; 0x5f62 <getRightSpeedFromInput+0x3c>
    5f60:	bd c0       	rjmp	.+378    	; 0x60dc <getRightSpeedFromInput+0x1b6>
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    5f62:	0f ef       	ldi	r16, 0xFF	; 255
    5f64:	1f ef       	ldi	r17, 0xFF	; 255
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    5f66:	80 91 0a 09 	lds	r24, 0x090A
    5f6a:	90 91 0b 09 	lds	r25, 0x090B
    5f6e:	8c 17       	cp	r24, r28
    5f70:	9d 07       	cpc	r25, r29
    5f72:	44 f0       	brlt	.+16     	; 0x5f84 <getRightSpeedFromInput+0x5e>
    
    return temp;
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {
    5f74:	81 e0       	ldi	r24, 0x01	; 1
    5f76:	9f ef       	ldi	r25, 0xFF	; 255
    5f78:	0f 3f       	cpi	r16, 0xFF	; 255
    5f7a:	19 07       	cpc	r17, r25
    5f7c:	09 f0       	breq	.+2      	; 0x5f80 <getRightSpeedFromInput+0x5a>
    5f7e:	80 e0       	ldi	r24, 0x00	; 0
    5f80:	08 2f       	mov	r16, r24
    5f82:	10 e0       	ldi	r17, 0x00	; 0

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    5f84:	80 91 1a 09 	lds	r24, 0x091A
    5f88:	90 91 1b 09 	lds	r25, 0x091B
    5f8c:	8c 17       	cp	r24, r28
    5f8e:	9d 07       	cpc	r25, r29
    5f90:	2c f0       	brlt	.+10     	; 0x5f9c <getRightSpeedFromInput+0x76>
    5f92:	8f ef       	ldi	r24, 0xFF	; 255
    5f94:	0f 3f       	cpi	r16, 0xFF	; 255
    5f96:	18 07       	cpc	r17, r24
    5f98:	09 f4       	brne	.+2      	; 0x5f9c <getRightSpeedFromInput+0x76>
    5f9a:	6c c1       	rjmp	.+728    	; 0x6274 <getRightSpeedFromInput+0x34e>
    5f9c:	80 91 2a 09 	lds	r24, 0x092A
    5fa0:	90 91 2b 09 	lds	r25, 0x092B
    5fa4:	8c 17       	cp	r24, r28
    5fa6:	9d 07       	cpc	r25, r29
    5fa8:	2c f0       	brlt	.+10     	; 0x5fb4 <getRightSpeedFromInput+0x8e>
    5faa:	9f ef       	ldi	r25, 0xFF	; 255
    5fac:	0f 3f       	cpi	r16, 0xFF	; 255
    5fae:	19 07       	cpc	r17, r25
    5fb0:	09 f4       	brne	.+2      	; 0x5fb4 <getRightSpeedFromInput+0x8e>
    5fb2:	72 c1       	rjmp	.+740    	; 0x6298 <getRightSpeedFromInput+0x372>
    5fb4:	80 91 3a 09 	lds	r24, 0x093A
    5fb8:	90 91 3b 09 	lds	r25, 0x093B
    5fbc:	8c 17       	cp	r24, r28
    5fbe:	9d 07       	cpc	r25, r29
    5fc0:	2c f0       	brlt	.+10     	; 0x5fcc <getRightSpeedFromInput+0xa6>
    5fc2:	8f ef       	ldi	r24, 0xFF	; 255
    5fc4:	0f 3f       	cpi	r16, 0xFF	; 255
    5fc6:	18 07       	cpc	r17, r24
    5fc8:	09 f4       	brne	.+2      	; 0x5fcc <getRightSpeedFromInput+0xa6>
    5fca:	63 c1       	rjmp	.+710    	; 0x6292 <getRightSpeedFromInput+0x36c>
    5fcc:	80 91 4a 09 	lds	r24, 0x094A
    5fd0:	90 91 4b 09 	lds	r25, 0x094B
    5fd4:	8c 17       	cp	r24, r28
    5fd6:	9d 07       	cpc	r25, r29
    5fd8:	2c f0       	brlt	.+10     	; 0x5fe4 <getRightSpeedFromInput+0xbe>
    5fda:	9f ef       	ldi	r25, 0xFF	; 255
    5fdc:	0f 3f       	cpi	r16, 0xFF	; 255
    5fde:	19 07       	cpc	r17, r25
    5fe0:	09 f4       	brne	.+2      	; 0x5fe4 <getRightSpeedFromInput+0xbe>
    5fe2:	54 c1       	rjmp	.+680    	; 0x628c <getRightSpeedFromInput+0x366>
    5fe4:	80 91 5a 09 	lds	r24, 0x095A
    5fe8:	90 91 5b 09 	lds	r25, 0x095B
    5fec:	8c 17       	cp	r24, r28
    5fee:	9d 07       	cpc	r25, r29
    5ff0:	2c f0       	brlt	.+10     	; 0x5ffc <getRightSpeedFromInput+0xd6>
    5ff2:	8f ef       	ldi	r24, 0xFF	; 255
    5ff4:	0f 3f       	cpi	r16, 0xFF	; 255
    5ff6:	18 07       	cpc	r17, r24
    5ff8:	09 f4       	brne	.+2      	; 0x5ffc <getRightSpeedFromInput+0xd6>
    5ffa:	45 c1       	rjmp	.+650    	; 0x6286 <getRightSpeedFromInput+0x360>
    5ffc:	80 91 6a 09 	lds	r24, 0x096A
    6000:	90 91 6b 09 	lds	r25, 0x096B
    6004:	8c 17       	cp	r24, r28
    6006:	9d 07       	cpc	r25, r29
    6008:	2c f0       	brlt	.+10     	; 0x6014 <getRightSpeedFromInput+0xee>
    600a:	9f ef       	ldi	r25, 0xFF	; 255
    600c:	0f 3f       	cpi	r16, 0xFF	; 255
    600e:	19 07       	cpc	r17, r25
    6010:	09 f4       	brne	.+2      	; 0x6014 <getRightSpeedFromInput+0xee>
    6012:	36 c1       	rjmp	.+620    	; 0x6280 <getRightSpeedFromInput+0x35a>
    6014:	e0 90 7a 09 	lds	r14, 0x097A
    6018:	f0 90 7b 09 	lds	r15, 0x097B
    601c:	ec 16       	cp	r14, r28
    601e:	fd 06       	cpc	r15, r29
    6020:	2c f0       	brlt	.+10     	; 0x602c <getRightSpeedFromInput+0x106>
    6022:	8f ef       	ldi	r24, 0xFF	; 255
    6024:	0f 3f       	cpi	r16, 0xFF	; 255
    6026:	18 07       	cpc	r17, r24
    6028:	09 f4       	brne	.+2      	; 0x602c <getRightSpeedFromInput+0x106>
    602a:	27 c1       	rjmp	.+590    	; 0x627a <getRightSpeedFromInput+0x354>
			}
		}        
    }

    if(pwm_right >= 0) {
        if(last_right_vel == 0) {
    602c:	20 97       	sbiw	r28, 0x00	; 0
    602e:	09 f4       	brne	.+2      	; 0x6032 <getRightSpeedFromInput+0x10c>
    6030:	58 c0       	rjmp	.+176    	; 0x60e2 <getRightSpeedFromInput+0x1bc>
            speedRightFromEnc = 0;
        } else {
            if(indFwR==0) {  // the velocity is lower than first saved in the matrix
    6032:	01 15       	cp	r16, r1
    6034:	11 05       	cpc	r17, r1
    6036:	09 f4       	brne	.+2      	; 0x603a <getRightSpeedFromInput+0x114>
    6038:	32 c1       	rjmp	.+612    	; 0x629e <getRightSpeedFromInput+0x378>
                speedRightFromEnc = (last_right_vel*calibration[0][3])/calibration[0][2];
            } else if(indFwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    603a:	9f ef       	ldi	r25, 0xFF	; 255
    603c:	0f 3f       	cpi	r16, 0xFF	; 255
    603e:	19 07       	cpc	r17, r25
    6040:	09 f4       	brne	.+2      	; 0x6044 <getRightSpeedFromInput+0x11e>
    6042:	e9 c0       	rjmp	.+466    	; 0x6216 <getRightSpeedFromInput+0x2f0>
                speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][3]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][2]);  // take the max
            } else {
                speedRightFromEnc = calibration[indFwR-1][3] + (signed int)(((float)(last_right_vel-calibration[indFwR-1][2])*(float)(calibration[indFwR][3]-calibration[indFwR-1][3]))/(float)(calibration[indFwR][2]-calibration[indFwR-1][2]));
    6044:	f8 01       	movw	r30, r16
    6046:	e2 95       	swap	r30
    6048:	f2 95       	swap	r31
    604a:	f0 7f       	andi	r31, 0xF0	; 240
    604c:	fe 27       	eor	r31, r30
    604e:	e0 7f       	andi	r30, 0xF0	; 240
    6050:	fe 27       	eor	r31, r30
    6052:	ea 51       	subi	r30, 0x1A	; 26
    6054:	f7 4f       	sbci	r31, 0xF7	; 247
    6056:	a4 80       	ldd	r10, Z+4	; 0x04
    6058:	b5 80       	ldd	r11, Z+5	; 0x05
    605a:	86 80       	ldd	r8, Z+6	; 0x06
    605c:	97 80       	ldd	r9, Z+7	; 0x07
    605e:	ca 19       	sub	r28, r10
    6060:	db 09       	sbc	r29, r11
    6062:	be 01       	movw	r22, r28
    6064:	88 27       	eor	r24, r24
    6066:	77 fd       	sbrc	r23, 7
    6068:	80 95       	com	r24
    606a:	98 2f       	mov	r25, r24
    606c:	0e 94 d2 56 	call	0xada4	; 0xada4 <__floatsisf>
    6070:	6b 01       	movw	r12, r22
    6072:	7c 01       	movw	r14, r24
    6074:	e8 01       	movw	r28, r16
    6076:	c2 95       	swap	r28
    6078:	d2 95       	swap	r29
    607a:	d0 7f       	andi	r29, 0xF0	; 240
    607c:	dc 27       	eor	r29, r28
    607e:	c0 7f       	andi	r28, 0xF0	; 240
    6080:	dc 27       	eor	r29, r28
    6082:	ca 50       	subi	r28, 0x0A	; 10
    6084:	d7 4f       	sbci	r29, 0xF7	; 247
    6086:	6e 81       	ldd	r22, Y+6	; 0x06
    6088:	7f 81       	ldd	r23, Y+7	; 0x07
    608a:	68 19       	sub	r22, r8
    608c:	79 09       	sbc	r23, r9
    608e:	88 27       	eor	r24, r24
    6090:	77 fd       	sbrc	r23, 7
    6092:	80 95       	com	r24
    6094:	98 2f       	mov	r25, r24
    6096:	0e 94 d2 56 	call	0xada4	; 0xada4 <__floatsisf>
    609a:	9b 01       	movw	r18, r22
    609c:	ac 01       	movw	r20, r24
    609e:	c7 01       	movw	r24, r14
    60a0:	b6 01       	movw	r22, r12
    60a2:	0e 94 eb 57 	call	0xafd6	; 0xafd6 <__mulsf3>
    60a6:	7b 01       	movw	r14, r22
    60a8:	8c 01       	movw	r16, r24
    60aa:	6c 81       	ldd	r22, Y+4	; 0x04
    60ac:	7d 81       	ldd	r23, Y+5	; 0x05
    60ae:	6a 19       	sub	r22, r10
    60b0:	7b 09       	sbc	r23, r11
    60b2:	88 27       	eor	r24, r24
    60b4:	77 fd       	sbrc	r23, 7
    60b6:	80 95       	com	r24
    60b8:	98 2f       	mov	r25, r24
    60ba:	0e 94 d2 56 	call	0xada4	; 0xada4 <__floatsisf>
    60be:	9b 01       	movw	r18, r22
    60c0:	ac 01       	movw	r20, r24
    60c2:	c8 01       	movw	r24, r16
    60c4:	b7 01       	movw	r22, r14
    60c6:	0e 94 37 56 	call	0xac6e	; 0xac6e <__divsf3>
    60ca:	0e 94 9f 56 	call	0xad3e	; 0xad3e <__fixsfsi>
    60ce:	68 0d       	add	r22, r8
    60d0:	79 1d       	adc	r23, r9
    60d2:	70 93 d7 04 	sts	0x04D7, r23
    60d6:	60 93 d6 04 	sts	0x04D6, r22
    60da:	07 c0       	rjmp	.+14     	; 0x60ea <getRightSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    60dc:	00 e0       	ldi	r16, 0x00	; 0
    60de:	10 e0       	ldi	r17, 0x00	; 0
    60e0:	42 cf       	rjmp	.-380    	; 0x5f66 <getRightSpeedFromInput+0x40>
		}        
    }

    if(pwm_right >= 0) {
        if(last_right_vel == 0) {
            speedRightFromEnc = 0;
    60e2:	10 92 d7 04 	sts	0x04D7, r1
    60e6:	10 92 d6 04 	sts	0x04D6, r1
        	speedRightFromEnc = calibration[indBwR-1][7] + (signed int)(((float)(last_right_vel-calibration[indBwR-1][6])*(float)(calibration[indBwR][7]-calibration[indBwR-1][7]))/(float)(calibration[indBwR][6]-calibration[indBwR-1][6]));
		}
		speedRightFromEnc = -speedRightFromEnc;
    }
    
}
    60ea:	df 91       	pop	r29
    60ec:	cf 91       	pop	r28
    60ee:	1f 91       	pop	r17
    60f0:	0f 91       	pop	r16
    60f2:	ff 90       	pop	r15
    60f4:	ef 90       	pop	r14
    60f6:	df 90       	pop	r13
    60f8:	cf 90       	pop	r12
    60fa:	bf 90       	pop	r11
    60fc:	af 90       	pop	r10
    60fe:	9f 90       	pop	r9
    6100:	8f 90       	pop	r8
    6102:	08 95       	ret
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    6104:	60 91 02 09 	lds	r22, 0x0902
    6108:	70 91 03 09 	lds	r23, 0x0903
    610c:	6c 17       	cp	r22, r28
    610e:	7d 07       	cpc	r23, r29
    6110:	0c f0       	brlt	.+2      	; 0x6114 <getRightSpeedFromInput+0x1ee>
    6112:	7e c0       	rjmp	.+252    	; 0x6210 <getRightSpeedFromInput+0x2ea>
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    6114:	0f ef       	ldi	r16, 0xFF	; 255
    6116:	1f ef       	ldi	r17, 0xFF	; 255
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    6118:	80 91 12 09 	lds	r24, 0x0912
    611c:	90 91 13 09 	lds	r25, 0x0913
    6120:	8c 17       	cp	r24, r28
    6122:	9d 07       	cpc	r25, r29
    6124:	44 f0       	brlt	.+16     	; 0x6136 <getRightSpeedFromInput+0x210>
    
    return temp;
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {
    6126:	81 e0       	ldi	r24, 0x01	; 1
    6128:	9f ef       	ldi	r25, 0xFF	; 255
    612a:	0f 3f       	cpi	r16, 0xFF	; 255
    612c:	19 07       	cpc	r17, r25
    612e:	09 f0       	breq	.+2      	; 0x6132 <getRightSpeedFromInput+0x20c>
    6130:	80 e0       	ldi	r24, 0x00	; 0
    6132:	08 2f       	mov	r16, r24
    6134:	10 e0       	ldi	r17, 0x00	; 0
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    6136:	80 91 22 09 	lds	r24, 0x0922
    613a:	90 91 23 09 	lds	r25, 0x0923
    613e:	8c 17       	cp	r24, r28
    6140:	9d 07       	cpc	r25, r29
    6142:	2c f0       	brlt	.+10     	; 0x614e <getRightSpeedFromInput+0x228>
    6144:	8f ef       	ldi	r24, 0xFF	; 255
    6146:	0f 3f       	cpi	r16, 0xFF	; 255
    6148:	18 07       	cpc	r17, r24
    614a:	09 f4       	brne	.+2      	; 0x614e <getRightSpeedFromInput+0x228>
    614c:	19 c1       	rjmp	.+562    	; 0x6380 <getRightSpeedFromInput+0x45a>
    614e:	80 91 32 09 	lds	r24, 0x0932
    6152:	90 91 33 09 	lds	r25, 0x0933
    6156:	8c 17       	cp	r24, r28
    6158:	9d 07       	cpc	r25, r29
    615a:	2c f0       	brlt	.+10     	; 0x6166 <getRightSpeedFromInput+0x240>
    615c:	9f ef       	ldi	r25, 0xFF	; 255
    615e:	0f 3f       	cpi	r16, 0xFF	; 255
    6160:	19 07       	cpc	r17, r25
    6162:	09 f4       	brne	.+2      	; 0x6166 <getRightSpeedFromInput+0x240>
    6164:	0a c1       	rjmp	.+532    	; 0x637a <getRightSpeedFromInput+0x454>
    6166:	80 91 42 09 	lds	r24, 0x0942
    616a:	90 91 43 09 	lds	r25, 0x0943
    616e:	8c 17       	cp	r24, r28
    6170:	9d 07       	cpc	r25, r29
    6172:	2c f0       	brlt	.+10     	; 0x617e <getRightSpeedFromInput+0x258>
    6174:	8f ef       	ldi	r24, 0xFF	; 255
    6176:	0f 3f       	cpi	r16, 0xFF	; 255
    6178:	18 07       	cpc	r17, r24
    617a:	09 f4       	brne	.+2      	; 0x617e <getRightSpeedFromInput+0x258>
    617c:	fb c0       	rjmp	.+502    	; 0x6374 <getRightSpeedFromInput+0x44e>
    617e:	80 91 52 09 	lds	r24, 0x0952
    6182:	90 91 53 09 	lds	r25, 0x0953
    6186:	8c 17       	cp	r24, r28
    6188:	9d 07       	cpc	r25, r29
    618a:	2c f0       	brlt	.+10     	; 0x6196 <getRightSpeedFromInput+0x270>
    618c:	9f ef       	ldi	r25, 0xFF	; 255
    618e:	0f 3f       	cpi	r16, 0xFF	; 255
    6190:	19 07       	cpc	r17, r25
    6192:	09 f4       	brne	.+2      	; 0x6196 <getRightSpeedFromInput+0x270>
    6194:	ec c0       	rjmp	.+472    	; 0x636e <getRightSpeedFromInput+0x448>
    6196:	80 91 62 09 	lds	r24, 0x0962
    619a:	90 91 63 09 	lds	r25, 0x0963
    619e:	8c 17       	cp	r24, r28
    61a0:	9d 07       	cpc	r25, r29
    61a2:	2c f0       	brlt	.+10     	; 0x61ae <getRightSpeedFromInput+0x288>
    61a4:	8f ef       	ldi	r24, 0xFF	; 255
    61a6:	0f 3f       	cpi	r16, 0xFF	; 255
    61a8:	18 07       	cpc	r17, r24
    61aa:	09 f4       	brne	.+2      	; 0x61ae <getRightSpeedFromInput+0x288>
    61ac:	dd c0       	rjmp	.+442    	; 0x6368 <getRightSpeedFromInput+0x442>
    61ae:	80 91 72 09 	lds	r24, 0x0972
    61b2:	90 91 73 09 	lds	r25, 0x0973
    61b6:	8c 17       	cp	r24, r28
    61b8:	9d 07       	cpc	r25, r29
    61ba:	2c f0       	brlt	.+10     	; 0x61c6 <getRightSpeedFromInput+0x2a0>
    61bc:	9f ef       	ldi	r25, 0xFF	; 255
    61be:	0f 3f       	cpi	r16, 0xFF	; 255
    61c0:	19 07       	cpc	r17, r25
    61c2:	09 f4       	brne	.+2      	; 0x61c6 <getRightSpeedFromInput+0x2a0>
    61c4:	ce c0       	rjmp	.+412    	; 0x6362 <getRightSpeedFromInput+0x43c>
    61c6:	e0 90 82 09 	lds	r14, 0x0982
    61ca:	f0 90 83 09 	lds	r15, 0x0983
    61ce:	ec 16       	cp	r14, r28
    61d0:	fd 06       	cpc	r15, r29
    61d2:	2c f0       	brlt	.+10     	; 0x61de <getRightSpeedFromInput+0x2b8>
    61d4:	8f ef       	ldi	r24, 0xFF	; 255
    61d6:	0f 3f       	cpi	r16, 0xFF	; 255
    61d8:	18 07       	cpc	r17, r24
    61da:	09 f4       	brne	.+2      	; 0x61de <getRightSpeedFromInput+0x2b8>
    61dc:	bf c0       	rjmp	.+382    	; 0x635c <getRightSpeedFromInput+0x436>
            } else {
                speedRightFromEnc = calibration[indFwR-1][3] + (signed int)(((float)(last_right_vel-calibration[indFwR-1][2])*(float)(calibration[indFwR][3]-calibration[indFwR-1][3]))/(float)(calibration[indFwR][2]-calibration[indFwR-1][2]));
            }
        }
    } else {
		if(indBwR==0) {  // the velocity is lower than first saved in the matrix
    61de:	01 15       	cp	r16, r1
    61e0:	11 05       	cpc	r17, r1
    61e2:	09 f0       	breq	.+2      	; 0x61e6 <getRightSpeedFromInput+0x2c0>
    61e4:	6e c0       	rjmp	.+220    	; 0x62c2 <getRightSpeedFromInput+0x39c>
        	speedRightFromEnc = (last_right_vel*calibration[0][7])/calibration[0][6];
    61e6:	20 91 04 09 	lds	r18, 0x0904
    61ea:	30 91 05 09 	lds	r19, 0x0905
    61ee:	c2 9f       	mul	r28, r18
    61f0:	c0 01       	movw	r24, r0
    61f2:	c3 9f       	mul	r28, r19
    61f4:	90 0d       	add	r25, r0
    61f6:	d2 9f       	mul	r29, r18
    61f8:	90 0d       	add	r25, r0
    61fa:	11 24       	eor	r1, r1
    61fc:	0e 94 a9 58 	call	0xb152	; 0xb152 <__divmodhi4>
		} else if(indBwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][7]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][6]);  // take the max
		} else {
        	speedRightFromEnc = calibration[indBwR-1][7] + (signed int)(((float)(last_right_vel-calibration[indBwR-1][6])*(float)(calibration[indBwR][7]-calibration[indBwR-1][7]))/(float)(calibration[indBwR][6]-calibration[indBwR-1][6]));
		}
		speedRightFromEnc = -speedRightFromEnc;
    6200:	70 95       	com	r23
    6202:	61 95       	neg	r22
    6204:	7f 4f       	sbci	r23, 0xFF	; 255
    6206:	70 93 d7 04 	sts	0x04D7, r23
    620a:	60 93 d6 04 	sts	0x04D6, r22
    620e:	6d cf       	rjmp	.-294    	; 0x60ea <getRightSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    6210:	00 e0       	ldi	r16, 0x00	; 0
    6212:	10 e0       	ldi	r17, 0x00	; 0
    6214:	81 cf       	rjmp	.-254    	; 0x6118 <getRightSpeedFromInput+0x1f2>
            speedRightFromEnc = 0;
        } else {
            if(indFwR==0) {  // the velocity is lower than first saved in the matrix
                speedRightFromEnc = (last_right_vel*calibration[0][3])/calibration[0][2];
            } else if(indFwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
                speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][3]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][2]);  // take the max
    6216:	60 91 7c 09 	lds	r22, 0x097C
    621a:	70 91 7d 09 	lds	r23, 0x097D
    621e:	88 27       	eor	r24, r24
    6220:	77 fd       	sbrc	r23, 7
    6222:	80 95       	com	r24
    6224:	98 2f       	mov	r25, r24
    6226:	0e 94 d2 56 	call	0xada4	; 0xada4 <__floatsisf>
    622a:	5b 01       	movw	r10, r22
    622c:	6c 01       	movw	r12, r24
    622e:	be 01       	movw	r22, r28
    6230:	88 27       	eor	r24, r24
    6232:	77 fd       	sbrc	r23, 7
    6234:	80 95       	com	r24
    6236:	98 2f       	mov	r25, r24
    6238:	0e 94 d2 56 	call	0xada4	; 0xada4 <__floatsisf>
    623c:	9b 01       	movw	r18, r22
    623e:	ac 01       	movw	r20, r24
    6240:	c6 01       	movw	r24, r12
    6242:	b5 01       	movw	r22, r10
    6244:	0e 94 eb 57 	call	0xafd6	; 0xafd6 <__mulsf3>
    6248:	5b 01       	movw	r10, r22
    624a:	6c 01       	movw	r12, r24
    624c:	b7 01       	movw	r22, r14
    624e:	88 27       	eor	r24, r24
    6250:	77 fd       	sbrc	r23, 7
    6252:	80 95       	com	r24
    6254:	98 2f       	mov	r25, r24
    6256:	0e 94 d2 56 	call	0xada4	; 0xada4 <__floatsisf>
    625a:	9b 01       	movw	r18, r22
    625c:	ac 01       	movw	r20, r24
    625e:	c6 01       	movw	r24, r12
    6260:	b5 01       	movw	r22, r10
    6262:	0e 94 37 56 	call	0xac6e	; 0xac6e <__divsf3>
    6266:	0e 94 9f 56 	call	0xad3e	; 0xad3e <__fixsfsi>
    626a:	70 93 d7 04 	sts	0x04D7, r23
    626e:	60 93 d6 04 	sts	0x04D6, r22
    6272:	3b cf       	rjmp	.-394    	; 0x60ea <getRightSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    6274:	02 e0       	ldi	r16, 0x02	; 2
    6276:	10 e0       	ldi	r17, 0x00	; 0
    6278:	91 ce       	rjmp	.-734    	; 0x5f9c <getRightSpeedFromInput+0x76>
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    627a:	08 e0       	ldi	r16, 0x08	; 8
    627c:	10 e0       	ldi	r17, 0x00	; 0
    627e:	d6 ce       	rjmp	.-596    	; 0x602c <getRightSpeedFromInput+0x106>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    6280:	07 e0       	ldi	r16, 0x07	; 7
    6282:	10 e0       	ldi	r17, 0x00	; 0
    6284:	c7 ce       	rjmp	.-626    	; 0x6014 <getRightSpeedFromInput+0xee>
    6286:	06 e0       	ldi	r16, 0x06	; 6
    6288:	10 e0       	ldi	r17, 0x00	; 0
    628a:	b8 ce       	rjmp	.-656    	; 0x5ffc <getRightSpeedFromInput+0xd6>
    628c:	05 e0       	ldi	r16, 0x05	; 5
    628e:	10 e0       	ldi	r17, 0x00	; 0
    6290:	a9 ce       	rjmp	.-686    	; 0x5fe4 <getRightSpeedFromInput+0xbe>
    6292:	04 e0       	ldi	r16, 0x04	; 4
    6294:	10 e0       	ldi	r17, 0x00	; 0
    6296:	9a ce       	rjmp	.-716    	; 0x5fcc <getRightSpeedFromInput+0xa6>
    6298:	03 e0       	ldi	r16, 0x03	; 3
    629a:	10 e0       	ldi	r17, 0x00	; 0
    629c:	8b ce       	rjmp	.-746    	; 0x5fb4 <getRightSpeedFromInput+0x8e>
    if(pwm_right >= 0) {
        if(last_right_vel == 0) {
            speedRightFromEnc = 0;
        } else {
            if(indFwR==0) {  // the velocity is lower than first saved in the matrix
                speedRightFromEnc = (last_right_vel*calibration[0][3])/calibration[0][2];
    629e:	20 91 fc 08 	lds	r18, 0x08FC
    62a2:	30 91 fd 08 	lds	r19, 0x08FD
    62a6:	c2 9f       	mul	r28, r18
    62a8:	c0 01       	movw	r24, r0
    62aa:	c3 9f       	mul	r28, r19
    62ac:	90 0d       	add	r25, r0
    62ae:	d2 9f       	mul	r29, r18
    62b0:	90 0d       	add	r25, r0
    62b2:	11 24       	eor	r1, r1
    62b4:	0e 94 a9 58 	call	0xb152	; 0xb152 <__divmodhi4>
    62b8:	70 93 d7 04 	sts	0x04D7, r23
    62bc:	60 93 d6 04 	sts	0x04D6, r22
    62c0:	14 cf       	rjmp	.-472    	; 0x60ea <getRightSpeedFromInput+0x1c4>
            }
        }
    } else {
		if(indBwR==0) {  // the velocity is lower than first saved in the matrix
        	speedRightFromEnc = (last_right_vel*calibration[0][7])/calibration[0][6];
		} else if(indBwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    62c2:	8f ef       	ldi	r24, 0xFF	; 255
    62c4:	0f 3f       	cpi	r16, 0xFF	; 255
    62c6:	18 07       	cpc	r17, r24
    62c8:	09 f4       	brne	.+2      	; 0x62cc <getRightSpeedFromInput+0x3a6>
    62ca:	5d c0       	rjmp	.+186    	; 0x6386 <getRightSpeedFromInput+0x460>
        	speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][7]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][6]);  // take the max
		} else {
        	speedRightFromEnc = calibration[indBwR-1][7] + (signed int)(((float)(last_right_vel-calibration[indBwR-1][6])*(float)(calibration[indBwR][7]-calibration[indBwR-1][7]))/(float)(calibration[indBwR][6]-calibration[indBwR-1][6]));
    62cc:	f8 01       	movw	r30, r16
    62ce:	e2 95       	swap	r30
    62d0:	f2 95       	swap	r31
    62d2:	f0 7f       	andi	r31, 0xF0	; 240
    62d4:	fe 27       	eor	r31, r30
    62d6:	e0 7f       	andi	r30, 0xF0	; 240
    62d8:	fe 27       	eor	r31, r30
    62da:	ea 51       	subi	r30, 0x1A	; 26
    62dc:	f7 4f       	sbci	r31, 0xF7	; 247
    62de:	a4 84       	ldd	r10, Z+12	; 0x0c
    62e0:	b5 84       	ldd	r11, Z+13	; 0x0d
    62e2:	86 84       	ldd	r8, Z+14	; 0x0e
    62e4:	97 84       	ldd	r9, Z+15	; 0x0f
    62e6:	ca 19       	sub	r28, r10
    62e8:	db 09       	sbc	r29, r11
    62ea:	be 01       	movw	r22, r28
    62ec:	88 27       	eor	r24, r24
    62ee:	77 fd       	sbrc	r23, 7
    62f0:	80 95       	com	r24
    62f2:	98 2f       	mov	r25, r24
    62f4:	0e 94 d2 56 	call	0xada4	; 0xada4 <__floatsisf>
    62f8:	6b 01       	movw	r12, r22
    62fa:	7c 01       	movw	r14, r24
    62fc:	e8 01       	movw	r28, r16
    62fe:	c2 95       	swap	r28
    6300:	d2 95       	swap	r29
    6302:	d0 7f       	andi	r29, 0xF0	; 240
    6304:	dc 27       	eor	r29, r28
    6306:	c0 7f       	andi	r28, 0xF0	; 240
    6308:	dc 27       	eor	r29, r28
    630a:	ca 50       	subi	r28, 0x0A	; 10
    630c:	d7 4f       	sbci	r29, 0xF7	; 247
    630e:	6e 85       	ldd	r22, Y+14	; 0x0e
    6310:	7f 85       	ldd	r23, Y+15	; 0x0f
    6312:	68 19       	sub	r22, r8
    6314:	79 09       	sbc	r23, r9
    6316:	88 27       	eor	r24, r24
    6318:	77 fd       	sbrc	r23, 7
    631a:	80 95       	com	r24
    631c:	98 2f       	mov	r25, r24
    631e:	0e 94 d2 56 	call	0xada4	; 0xada4 <__floatsisf>
    6322:	9b 01       	movw	r18, r22
    6324:	ac 01       	movw	r20, r24
    6326:	c7 01       	movw	r24, r14
    6328:	b6 01       	movw	r22, r12
    632a:	0e 94 eb 57 	call	0xafd6	; 0xafd6 <__mulsf3>
    632e:	7b 01       	movw	r14, r22
    6330:	8c 01       	movw	r16, r24
    6332:	6c 85       	ldd	r22, Y+12	; 0x0c
    6334:	7d 85       	ldd	r23, Y+13	; 0x0d
    6336:	6a 19       	sub	r22, r10
    6338:	7b 09       	sbc	r23, r11
    633a:	88 27       	eor	r24, r24
    633c:	77 fd       	sbrc	r23, 7
    633e:	80 95       	com	r24
    6340:	98 2f       	mov	r25, r24
    6342:	0e 94 d2 56 	call	0xada4	; 0xada4 <__floatsisf>
    6346:	9b 01       	movw	r18, r22
    6348:	ac 01       	movw	r20, r24
    634a:	c8 01       	movw	r24, r16
    634c:	b7 01       	movw	r22, r14
    634e:	0e 94 37 56 	call	0xac6e	; 0xac6e <__divsf3>
    6352:	0e 94 9f 56 	call	0xad3e	; 0xad3e <__fixsfsi>
    6356:	68 0d       	add	r22, r8
    6358:	79 1d       	adc	r23, r9
    635a:	52 cf       	rjmp	.-348    	; 0x6200 <getRightSpeedFromInput+0x2da>
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    635c:	08 e0       	ldi	r16, 0x08	; 8
    635e:	10 e0       	ldi	r17, 0x00	; 0
    6360:	3e cf       	rjmp	.-388    	; 0x61de <getRightSpeedFromInput+0x2b8>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    6362:	07 e0       	ldi	r16, 0x07	; 7
    6364:	10 e0       	ldi	r17, 0x00	; 0
    6366:	2f cf       	rjmp	.-418    	; 0x61c6 <getRightSpeedFromInput+0x2a0>
    6368:	06 e0       	ldi	r16, 0x06	; 6
    636a:	10 e0       	ldi	r17, 0x00	; 0
    636c:	20 cf       	rjmp	.-448    	; 0x61ae <getRightSpeedFromInput+0x288>
    636e:	05 e0       	ldi	r16, 0x05	; 5
    6370:	10 e0       	ldi	r17, 0x00	; 0
    6372:	11 cf       	rjmp	.-478    	; 0x6196 <getRightSpeedFromInput+0x270>
    6374:	04 e0       	ldi	r16, 0x04	; 4
    6376:	10 e0       	ldi	r17, 0x00	; 0
    6378:	02 cf       	rjmp	.-508    	; 0x617e <getRightSpeedFromInput+0x258>
    637a:	03 e0       	ldi	r16, 0x03	; 3
    637c:	10 e0       	ldi	r17, 0x00	; 0
    637e:	f3 ce       	rjmp	.-538    	; 0x6166 <getRightSpeedFromInput+0x240>
    6380:	02 e0       	ldi	r16, 0x02	; 2
    6382:	10 e0       	ldi	r17, 0x00	; 0
    6384:	e4 ce       	rjmp	.-568    	; 0x614e <getRightSpeedFromInput+0x228>
        }
    } else {
		if(indBwR==0) {  // the velocity is lower than first saved in the matrix
        	speedRightFromEnc = (last_right_vel*calibration[0][7])/calibration[0][6];
		} else if(indBwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][7]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][6]);  // take the max
    6386:	60 91 84 09 	lds	r22, 0x0984
    638a:	70 91 85 09 	lds	r23, 0x0985
    638e:	88 27       	eor	r24, r24
    6390:	77 fd       	sbrc	r23, 7
    6392:	80 95       	com	r24
    6394:	98 2f       	mov	r25, r24
    6396:	0e 94 d2 56 	call	0xada4	; 0xada4 <__floatsisf>
    639a:	5b 01       	movw	r10, r22
    639c:	6c 01       	movw	r12, r24
    639e:	be 01       	movw	r22, r28
    63a0:	88 27       	eor	r24, r24
    63a2:	77 fd       	sbrc	r23, 7
    63a4:	80 95       	com	r24
    63a6:	98 2f       	mov	r25, r24
    63a8:	0e 94 d2 56 	call	0xada4	; 0xada4 <__floatsisf>
    63ac:	9b 01       	movw	r18, r22
    63ae:	ac 01       	movw	r20, r24
    63b0:	c6 01       	movw	r24, r12
    63b2:	b5 01       	movw	r22, r10
    63b4:	0e 94 eb 57 	call	0xafd6	; 0xafd6 <__mulsf3>
    63b8:	5b 01       	movw	r10, r22
    63ba:	6c 01       	movw	r12, r24
    63bc:	b7 01       	movw	r22, r14
    63be:	88 27       	eor	r24, r24
    63c0:	77 fd       	sbrc	r23, 7
    63c2:	80 95       	com	r24
    63c4:	98 2f       	mov	r25, r24
    63c6:	0e 94 d2 56 	call	0xada4	; 0xada4 <__floatsisf>
    63ca:	9b 01       	movw	r18, r22
    63cc:	ac 01       	movw	r20, r24
    63ce:	c6 01       	movw	r24, r12
    63d0:	b5 01       	movw	r22, r10
    63d2:	0e 94 37 56 	call	0xac6e	; 0xac6e <__divsf3>
    63d6:	0e 94 9f 56 	call	0xad3e	; 0xad3e <__fixsfsi>
    63da:	12 cf       	rjmp	.-476    	; 0x6200 <getRightSpeedFromInput+0x2da>

000063dc <getLeftSpeedFromInput>:
    }
    
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {
    63dc:	8f 92       	push	r8
    63de:	9f 92       	push	r9
    63e0:	af 92       	push	r10
    63e2:	bf 92       	push	r11
    63e4:	cf 92       	push	r12
    63e6:	df 92       	push	r13
    63e8:	ef 92       	push	r14
    63ea:	ff 92       	push	r15
    63ec:	0f 93       	push	r16
    63ee:	1f 93       	push	r17
    63f0:	cf 93       	push	r28
    63f2:	df 93       	push	r29

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    63f4:	c0 91 01 03 	lds	r28, 0x0301
    63f8:	d0 91 02 03 	lds	r29, 0x0302
    63fc:	80 91 07 03 	lds	r24, 0x0307
    6400:	90 91 08 03 	lds	r25, 0x0308
    6404:	97 fd       	sbrc	r25, 7
    6406:	d9 c0       	rjmp	.+434    	; 0x65ba <getLeftSpeedFromInput+0x1de>
    6408:	60 91 f6 08 	lds	r22, 0x08F6
    640c:	70 91 f7 08 	lds	r23, 0x08F7
    6410:	6c 17       	cp	r22, r28
    6412:	7d 07       	cpc	r23, r29
    6414:	0c f0       	brlt	.+2      	; 0x6418 <getLeftSpeedFromInput+0x3c>
    6416:	bd c0       	rjmp	.+378    	; 0x6592 <getLeftSpeedFromInput+0x1b6>
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    6418:	0f ef       	ldi	r16, 0xFF	; 255
    641a:	1f ef       	ldi	r17, 0xFF	; 255
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    641c:	80 91 06 09 	lds	r24, 0x0906
    6420:	90 91 07 09 	lds	r25, 0x0907
    6424:	8c 17       	cp	r24, r28
    6426:	9d 07       	cpc	r25, r29
    6428:	44 f0       	brlt	.+16     	; 0x643a <getLeftSpeedFromInput+0x5e>
    }
    
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {
    642a:	81 e0       	ldi	r24, 0x01	; 1
    642c:	9f ef       	ldi	r25, 0xFF	; 255
    642e:	0f 3f       	cpi	r16, 0xFF	; 255
    6430:	19 07       	cpc	r17, r25
    6432:	09 f0       	breq	.+2      	; 0x6436 <getLeftSpeedFromInput+0x5a>
    6434:	80 e0       	ldi	r24, 0x00	; 0
    6436:	08 2f       	mov	r16, r24
    6438:	10 e0       	ldi	r17, 0x00	; 0

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    643a:	80 91 16 09 	lds	r24, 0x0916
    643e:	90 91 17 09 	lds	r25, 0x0917
    6442:	8c 17       	cp	r24, r28
    6444:	9d 07       	cpc	r25, r29
    6446:	2c f0       	brlt	.+10     	; 0x6452 <getLeftSpeedFromInput+0x76>
    6448:	8f ef       	ldi	r24, 0xFF	; 255
    644a:	0f 3f       	cpi	r16, 0xFF	; 255
    644c:	18 07       	cpc	r17, r24
    644e:	09 f4       	brne	.+2      	; 0x6452 <getLeftSpeedFromInput+0x76>
    6450:	6c c1       	rjmp	.+728    	; 0x672a <getLeftSpeedFromInput+0x34e>
    6452:	80 91 26 09 	lds	r24, 0x0926
    6456:	90 91 27 09 	lds	r25, 0x0927
    645a:	8c 17       	cp	r24, r28
    645c:	9d 07       	cpc	r25, r29
    645e:	2c f0       	brlt	.+10     	; 0x646a <getLeftSpeedFromInput+0x8e>
    6460:	9f ef       	ldi	r25, 0xFF	; 255
    6462:	0f 3f       	cpi	r16, 0xFF	; 255
    6464:	19 07       	cpc	r17, r25
    6466:	09 f4       	brne	.+2      	; 0x646a <getLeftSpeedFromInput+0x8e>
    6468:	72 c1       	rjmp	.+740    	; 0x674e <getLeftSpeedFromInput+0x372>
    646a:	80 91 36 09 	lds	r24, 0x0936
    646e:	90 91 37 09 	lds	r25, 0x0937
    6472:	8c 17       	cp	r24, r28
    6474:	9d 07       	cpc	r25, r29
    6476:	2c f0       	brlt	.+10     	; 0x6482 <getLeftSpeedFromInput+0xa6>
    6478:	8f ef       	ldi	r24, 0xFF	; 255
    647a:	0f 3f       	cpi	r16, 0xFF	; 255
    647c:	18 07       	cpc	r17, r24
    647e:	09 f4       	brne	.+2      	; 0x6482 <getLeftSpeedFromInput+0xa6>
    6480:	63 c1       	rjmp	.+710    	; 0x6748 <getLeftSpeedFromInput+0x36c>
    6482:	80 91 46 09 	lds	r24, 0x0946
    6486:	90 91 47 09 	lds	r25, 0x0947
    648a:	8c 17       	cp	r24, r28
    648c:	9d 07       	cpc	r25, r29
    648e:	2c f0       	brlt	.+10     	; 0x649a <getLeftSpeedFromInput+0xbe>
    6490:	9f ef       	ldi	r25, 0xFF	; 255
    6492:	0f 3f       	cpi	r16, 0xFF	; 255
    6494:	19 07       	cpc	r17, r25
    6496:	09 f4       	brne	.+2      	; 0x649a <getLeftSpeedFromInput+0xbe>
    6498:	54 c1       	rjmp	.+680    	; 0x6742 <getLeftSpeedFromInput+0x366>
    649a:	80 91 56 09 	lds	r24, 0x0956
    649e:	90 91 57 09 	lds	r25, 0x0957
    64a2:	8c 17       	cp	r24, r28
    64a4:	9d 07       	cpc	r25, r29
    64a6:	2c f0       	brlt	.+10     	; 0x64b2 <getLeftSpeedFromInput+0xd6>
    64a8:	8f ef       	ldi	r24, 0xFF	; 255
    64aa:	0f 3f       	cpi	r16, 0xFF	; 255
    64ac:	18 07       	cpc	r17, r24
    64ae:	09 f4       	brne	.+2      	; 0x64b2 <getLeftSpeedFromInput+0xd6>
    64b0:	45 c1       	rjmp	.+650    	; 0x673c <getLeftSpeedFromInput+0x360>
    64b2:	80 91 66 09 	lds	r24, 0x0966
    64b6:	90 91 67 09 	lds	r25, 0x0967
    64ba:	8c 17       	cp	r24, r28
    64bc:	9d 07       	cpc	r25, r29
    64be:	2c f0       	brlt	.+10     	; 0x64ca <getLeftSpeedFromInput+0xee>
    64c0:	9f ef       	ldi	r25, 0xFF	; 255
    64c2:	0f 3f       	cpi	r16, 0xFF	; 255
    64c4:	19 07       	cpc	r17, r25
    64c6:	09 f4       	brne	.+2      	; 0x64ca <getLeftSpeedFromInput+0xee>
    64c8:	36 c1       	rjmp	.+620    	; 0x6736 <getLeftSpeedFromInput+0x35a>
    64ca:	e0 90 76 09 	lds	r14, 0x0976
    64ce:	f0 90 77 09 	lds	r15, 0x0977
    64d2:	ec 16       	cp	r14, r28
    64d4:	fd 06       	cpc	r15, r29
    64d6:	2c f0       	brlt	.+10     	; 0x64e2 <getLeftSpeedFromInput+0x106>
    64d8:	8f ef       	ldi	r24, 0xFF	; 255
    64da:	0f 3f       	cpi	r16, 0xFF	; 255
    64dc:	18 07       	cpc	r17, r24
    64de:	09 f4       	brne	.+2      	; 0x64e2 <getLeftSpeedFromInput+0x106>
    64e0:	27 c1       	rjmp	.+590    	; 0x6730 <getLeftSpeedFromInput+0x354>
			}
		}     
    }

    if(pwm_left >= 0) {
        if(last_left_vel == 0) {
    64e2:	20 97       	sbiw	r28, 0x00	; 0
    64e4:	09 f4       	brne	.+2      	; 0x64e8 <getLeftSpeedFromInput+0x10c>
    64e6:	58 c0       	rjmp	.+176    	; 0x6598 <getLeftSpeedFromInput+0x1bc>
            speedLeftFromEnc = 0;
        } else {
            if(indFwL==0) {  // the velocity is lower than first saved in the matrix
    64e8:	01 15       	cp	r16, r1
    64ea:	11 05       	cpc	r17, r1
    64ec:	09 f4       	brne	.+2      	; 0x64f0 <getLeftSpeedFromInput+0x114>
    64ee:	32 c1       	rjmp	.+612    	; 0x6754 <getLeftSpeedFromInput+0x378>
                speedLeftFromEnc = (last_left_vel*calibration[0][1])/calibration[0][0];
            } else if(indFwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    64f0:	9f ef       	ldi	r25, 0xFF	; 255
    64f2:	0f 3f       	cpi	r16, 0xFF	; 255
    64f4:	19 07       	cpc	r17, r25
    64f6:	09 f4       	brne	.+2      	; 0x64fa <getLeftSpeedFromInput+0x11e>
    64f8:	e9 c0       	rjmp	.+466    	; 0x66cc <getLeftSpeedFromInput+0x2f0>
                speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][1]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][0]);  // take the max
            } else {
                speedLeftFromEnc = calibration[indFwL-1][1] + (signed int)(((float)(last_left_vel-calibration[indFwL-1][0])*(float)(calibration[indFwL][1]-calibration[indFwL-1][1]))/(float)(calibration[indFwL][0]-calibration[indFwL-1][0]));
    64fa:	f8 01       	movw	r30, r16
    64fc:	e2 95       	swap	r30
    64fe:	f2 95       	swap	r31
    6500:	f0 7f       	andi	r31, 0xF0	; 240
    6502:	fe 27       	eor	r31, r30
    6504:	e0 7f       	andi	r30, 0xF0	; 240
    6506:	fe 27       	eor	r31, r30
    6508:	ea 51       	subi	r30, 0x1A	; 26
    650a:	f7 4f       	sbci	r31, 0xF7	; 247
    650c:	a0 80       	ld	r10, Z
    650e:	b1 80       	ldd	r11, Z+1	; 0x01
    6510:	82 80       	ldd	r8, Z+2	; 0x02
    6512:	93 80       	ldd	r9, Z+3	; 0x03
    6514:	ca 19       	sub	r28, r10
    6516:	db 09       	sbc	r29, r11
    6518:	be 01       	movw	r22, r28
    651a:	88 27       	eor	r24, r24
    651c:	77 fd       	sbrc	r23, 7
    651e:	80 95       	com	r24
    6520:	98 2f       	mov	r25, r24
    6522:	0e 94 d2 56 	call	0xada4	; 0xada4 <__floatsisf>
    6526:	6b 01       	movw	r12, r22
    6528:	7c 01       	movw	r14, r24
    652a:	e8 01       	movw	r28, r16
    652c:	c2 95       	swap	r28
    652e:	d2 95       	swap	r29
    6530:	d0 7f       	andi	r29, 0xF0	; 240
    6532:	dc 27       	eor	r29, r28
    6534:	c0 7f       	andi	r28, 0xF0	; 240
    6536:	dc 27       	eor	r29, r28
    6538:	ca 50       	subi	r28, 0x0A	; 10
    653a:	d7 4f       	sbci	r29, 0xF7	; 247
    653c:	6a 81       	ldd	r22, Y+2	; 0x02
    653e:	7b 81       	ldd	r23, Y+3	; 0x03
    6540:	68 19       	sub	r22, r8
    6542:	79 09       	sbc	r23, r9
    6544:	88 27       	eor	r24, r24
    6546:	77 fd       	sbrc	r23, 7
    6548:	80 95       	com	r24
    654a:	98 2f       	mov	r25, r24
    654c:	0e 94 d2 56 	call	0xada4	; 0xada4 <__floatsisf>
    6550:	9b 01       	movw	r18, r22
    6552:	ac 01       	movw	r20, r24
    6554:	c7 01       	movw	r24, r14
    6556:	b6 01       	movw	r22, r12
    6558:	0e 94 eb 57 	call	0xafd6	; 0xafd6 <__mulsf3>
    655c:	7b 01       	movw	r14, r22
    655e:	8c 01       	movw	r16, r24
    6560:	68 81       	ld	r22, Y
    6562:	79 81       	ldd	r23, Y+1	; 0x01
    6564:	6a 19       	sub	r22, r10
    6566:	7b 09       	sbc	r23, r11
    6568:	88 27       	eor	r24, r24
    656a:	77 fd       	sbrc	r23, 7
    656c:	80 95       	com	r24
    656e:	98 2f       	mov	r25, r24
    6570:	0e 94 d2 56 	call	0xada4	; 0xada4 <__floatsisf>
    6574:	9b 01       	movw	r18, r22
    6576:	ac 01       	movw	r20, r24
    6578:	c8 01       	movw	r24, r16
    657a:	b7 01       	movw	r22, r14
    657c:	0e 94 37 56 	call	0xac6e	; 0xac6e <__divsf3>
    6580:	0e 94 9f 56 	call	0xad3e	; 0xad3e <__fixsfsi>
    6584:	68 0d       	add	r22, r8
    6586:	79 1d       	adc	r23, r9
    6588:	70 93 d5 04 	sts	0x04D5, r23
    658c:	60 93 d4 04 	sts	0x04D4, r22
    6590:	07 c0       	rjmp	.+14     	; 0x65a0 <getLeftSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    6592:	00 e0       	ldi	r16, 0x00	; 0
    6594:	10 e0       	ldi	r17, 0x00	; 0
    6596:	42 cf       	rjmp	.-380    	; 0x641c <getLeftSpeedFromInput+0x40>
		}     
    }

    if(pwm_left >= 0) {
        if(last_left_vel == 0) {
            speedLeftFromEnc = 0;
    6598:	10 92 d5 04 	sts	0x04D5, r1
    659c:	10 92 d4 04 	sts	0x04D4, r1
        	speedLeftFromEnc = calibration[indBwL-1][5] + (signed int)(((float)(last_left_vel-calibration[indBwL-1][4])*(float)(calibration[indBwL][5]-calibration[indBwL-1][5]))/(float)(calibration[indBwL][4]-calibration[indBwL-1][4]));
		}
		speedLeftFromEnc = -speedLeftFromEnc;
    }
    
}
    65a0:	df 91       	pop	r29
    65a2:	cf 91       	pop	r28
    65a4:	1f 91       	pop	r17
    65a6:	0f 91       	pop	r16
    65a8:	ff 90       	pop	r15
    65aa:	ef 90       	pop	r14
    65ac:	df 90       	pop	r13
    65ae:	cf 90       	pop	r12
    65b0:	bf 90       	pop	r11
    65b2:	af 90       	pop	r10
    65b4:	9f 90       	pop	r9
    65b6:	8f 90       	pop	r8
    65b8:	08 95       	ret
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    65ba:	60 91 fe 08 	lds	r22, 0x08FE
    65be:	70 91 ff 08 	lds	r23, 0x08FF
    65c2:	6c 17       	cp	r22, r28
    65c4:	7d 07       	cpc	r23, r29
    65c6:	0c f0       	brlt	.+2      	; 0x65ca <getLeftSpeedFromInput+0x1ee>
    65c8:	7e c0       	rjmp	.+252    	; 0x66c6 <getLeftSpeedFromInput+0x2ea>
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    65ca:	0f ef       	ldi	r16, 0xFF	; 255
    65cc:	1f ef       	ldi	r17, 0xFF	; 255
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    65ce:	80 91 0e 09 	lds	r24, 0x090E
    65d2:	90 91 0f 09 	lds	r25, 0x090F
    65d6:	8c 17       	cp	r24, r28
    65d8:	9d 07       	cpc	r25, r29
    65da:	44 f0       	brlt	.+16     	; 0x65ec <getLeftSpeedFromInput+0x210>
    }
    
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {
    65dc:	81 e0       	ldi	r24, 0x01	; 1
    65de:	9f ef       	ldi	r25, 0xFF	; 255
    65e0:	0f 3f       	cpi	r16, 0xFF	; 255
    65e2:	19 07       	cpc	r17, r25
    65e4:	09 f0       	breq	.+2      	; 0x65e8 <getLeftSpeedFromInput+0x20c>
    65e6:	80 e0       	ldi	r24, 0x00	; 0
    65e8:	08 2f       	mov	r16, r24
    65ea:	10 e0       	ldi	r17, 0x00	; 0
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    65ec:	80 91 1e 09 	lds	r24, 0x091E
    65f0:	90 91 1f 09 	lds	r25, 0x091F
    65f4:	8c 17       	cp	r24, r28
    65f6:	9d 07       	cpc	r25, r29
    65f8:	2c f0       	brlt	.+10     	; 0x6604 <getLeftSpeedFromInput+0x228>
    65fa:	8f ef       	ldi	r24, 0xFF	; 255
    65fc:	0f 3f       	cpi	r16, 0xFF	; 255
    65fe:	18 07       	cpc	r17, r24
    6600:	09 f4       	brne	.+2      	; 0x6604 <getLeftSpeedFromInput+0x228>
    6602:	19 c1       	rjmp	.+562    	; 0x6836 <getLeftSpeedFromInput+0x45a>
    6604:	80 91 2e 09 	lds	r24, 0x092E
    6608:	90 91 2f 09 	lds	r25, 0x092F
    660c:	8c 17       	cp	r24, r28
    660e:	9d 07       	cpc	r25, r29
    6610:	2c f0       	brlt	.+10     	; 0x661c <getLeftSpeedFromInput+0x240>
    6612:	9f ef       	ldi	r25, 0xFF	; 255
    6614:	0f 3f       	cpi	r16, 0xFF	; 255
    6616:	19 07       	cpc	r17, r25
    6618:	09 f4       	brne	.+2      	; 0x661c <getLeftSpeedFromInput+0x240>
    661a:	0a c1       	rjmp	.+532    	; 0x6830 <getLeftSpeedFromInput+0x454>
    661c:	80 91 3e 09 	lds	r24, 0x093E
    6620:	90 91 3f 09 	lds	r25, 0x093F
    6624:	8c 17       	cp	r24, r28
    6626:	9d 07       	cpc	r25, r29
    6628:	2c f0       	brlt	.+10     	; 0x6634 <getLeftSpeedFromInput+0x258>
    662a:	8f ef       	ldi	r24, 0xFF	; 255
    662c:	0f 3f       	cpi	r16, 0xFF	; 255
    662e:	18 07       	cpc	r17, r24
    6630:	09 f4       	brne	.+2      	; 0x6634 <getLeftSpeedFromInput+0x258>
    6632:	fb c0       	rjmp	.+502    	; 0x682a <getLeftSpeedFromInput+0x44e>
    6634:	80 91 4e 09 	lds	r24, 0x094E
    6638:	90 91 4f 09 	lds	r25, 0x094F
    663c:	8c 17       	cp	r24, r28
    663e:	9d 07       	cpc	r25, r29
    6640:	2c f0       	brlt	.+10     	; 0x664c <getLeftSpeedFromInput+0x270>
    6642:	9f ef       	ldi	r25, 0xFF	; 255
    6644:	0f 3f       	cpi	r16, 0xFF	; 255
    6646:	19 07       	cpc	r17, r25
    6648:	09 f4       	brne	.+2      	; 0x664c <getLeftSpeedFromInput+0x270>
    664a:	ec c0       	rjmp	.+472    	; 0x6824 <getLeftSpeedFromInput+0x448>
    664c:	80 91 5e 09 	lds	r24, 0x095E
    6650:	90 91 5f 09 	lds	r25, 0x095F
    6654:	8c 17       	cp	r24, r28
    6656:	9d 07       	cpc	r25, r29
    6658:	2c f0       	brlt	.+10     	; 0x6664 <getLeftSpeedFromInput+0x288>
    665a:	8f ef       	ldi	r24, 0xFF	; 255
    665c:	0f 3f       	cpi	r16, 0xFF	; 255
    665e:	18 07       	cpc	r17, r24
    6660:	09 f4       	brne	.+2      	; 0x6664 <getLeftSpeedFromInput+0x288>
    6662:	dd c0       	rjmp	.+442    	; 0x681e <getLeftSpeedFromInput+0x442>
    6664:	80 91 6e 09 	lds	r24, 0x096E
    6668:	90 91 6f 09 	lds	r25, 0x096F
    666c:	8c 17       	cp	r24, r28
    666e:	9d 07       	cpc	r25, r29
    6670:	2c f0       	brlt	.+10     	; 0x667c <getLeftSpeedFromInput+0x2a0>
    6672:	9f ef       	ldi	r25, 0xFF	; 255
    6674:	0f 3f       	cpi	r16, 0xFF	; 255
    6676:	19 07       	cpc	r17, r25
    6678:	09 f4       	brne	.+2      	; 0x667c <getLeftSpeedFromInput+0x2a0>
    667a:	ce c0       	rjmp	.+412    	; 0x6818 <getLeftSpeedFromInput+0x43c>
    667c:	e0 90 7e 09 	lds	r14, 0x097E
    6680:	f0 90 7f 09 	lds	r15, 0x097F
    6684:	ec 16       	cp	r14, r28
    6686:	fd 06       	cpc	r15, r29
    6688:	2c f0       	brlt	.+10     	; 0x6694 <getLeftSpeedFromInput+0x2b8>
    668a:	8f ef       	ldi	r24, 0xFF	; 255
    668c:	0f 3f       	cpi	r16, 0xFF	; 255
    668e:	18 07       	cpc	r17, r24
    6690:	09 f4       	brne	.+2      	; 0x6694 <getLeftSpeedFromInput+0x2b8>
    6692:	bf c0       	rjmp	.+382    	; 0x6812 <getLeftSpeedFromInput+0x436>
            } else {
                speedLeftFromEnc = calibration[indFwL-1][1] + (signed int)(((float)(last_left_vel-calibration[indFwL-1][0])*(float)(calibration[indFwL][1]-calibration[indFwL-1][1]))/(float)(calibration[indFwL][0]-calibration[indFwL-1][0]));
            }
        }
    } else {
		if(indBwL==0) {  // the velocity is lower than first saved in the matrix
    6694:	01 15       	cp	r16, r1
    6696:	11 05       	cpc	r17, r1
    6698:	09 f0       	breq	.+2      	; 0x669c <getLeftSpeedFromInput+0x2c0>
    669a:	6e c0       	rjmp	.+220    	; 0x6778 <getLeftSpeedFromInput+0x39c>
        	speedLeftFromEnc = (last_left_vel*calibration[0][5])/calibration[0][4];
    669c:	20 91 00 09 	lds	r18, 0x0900
    66a0:	30 91 01 09 	lds	r19, 0x0901
    66a4:	c2 9f       	mul	r28, r18
    66a6:	c0 01       	movw	r24, r0
    66a8:	c3 9f       	mul	r28, r19
    66aa:	90 0d       	add	r25, r0
    66ac:	d2 9f       	mul	r29, r18
    66ae:	90 0d       	add	r25, r0
    66b0:	11 24       	eor	r1, r1
    66b2:	0e 94 a9 58 	call	0xb152	; 0xb152 <__divmodhi4>
		} else if(indBwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][5]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][4]);  // take the max
		} else {
        	speedLeftFromEnc = calibration[indBwL-1][5] + (signed int)(((float)(last_left_vel-calibration[indBwL-1][4])*(float)(calibration[indBwL][5]-calibration[indBwL-1][5]))/(float)(calibration[indBwL][4]-calibration[indBwL-1][4]));
		}
		speedLeftFromEnc = -speedLeftFromEnc;
    66b6:	70 95       	com	r23
    66b8:	61 95       	neg	r22
    66ba:	7f 4f       	sbci	r23, 0xFF	; 255
    66bc:	70 93 d5 04 	sts	0x04D5, r23
    66c0:	60 93 d4 04 	sts	0x04D4, r22
    66c4:	6d cf       	rjmp	.-294    	; 0x65a0 <getLeftSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    66c6:	00 e0       	ldi	r16, 0x00	; 0
    66c8:	10 e0       	ldi	r17, 0x00	; 0
    66ca:	81 cf       	rjmp	.-254    	; 0x65ce <getLeftSpeedFromInput+0x1f2>
            speedLeftFromEnc = 0;
        } else {
            if(indFwL==0) {  // the velocity is lower than first saved in the matrix
                speedLeftFromEnc = (last_left_vel*calibration[0][1])/calibration[0][0];
            } else if(indFwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
                speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][1]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][0]);  // take the max
    66cc:	60 91 78 09 	lds	r22, 0x0978
    66d0:	70 91 79 09 	lds	r23, 0x0979
    66d4:	88 27       	eor	r24, r24
    66d6:	77 fd       	sbrc	r23, 7
    66d8:	80 95       	com	r24
    66da:	98 2f       	mov	r25, r24
    66dc:	0e 94 d2 56 	call	0xada4	; 0xada4 <__floatsisf>
    66e0:	5b 01       	movw	r10, r22
    66e2:	6c 01       	movw	r12, r24
    66e4:	be 01       	movw	r22, r28
    66e6:	88 27       	eor	r24, r24
    66e8:	77 fd       	sbrc	r23, 7
    66ea:	80 95       	com	r24
    66ec:	98 2f       	mov	r25, r24
    66ee:	0e 94 d2 56 	call	0xada4	; 0xada4 <__floatsisf>
    66f2:	9b 01       	movw	r18, r22
    66f4:	ac 01       	movw	r20, r24
    66f6:	c6 01       	movw	r24, r12
    66f8:	b5 01       	movw	r22, r10
    66fa:	0e 94 eb 57 	call	0xafd6	; 0xafd6 <__mulsf3>
    66fe:	5b 01       	movw	r10, r22
    6700:	6c 01       	movw	r12, r24
    6702:	b7 01       	movw	r22, r14
    6704:	88 27       	eor	r24, r24
    6706:	77 fd       	sbrc	r23, 7
    6708:	80 95       	com	r24
    670a:	98 2f       	mov	r25, r24
    670c:	0e 94 d2 56 	call	0xada4	; 0xada4 <__floatsisf>
    6710:	9b 01       	movw	r18, r22
    6712:	ac 01       	movw	r20, r24
    6714:	c6 01       	movw	r24, r12
    6716:	b5 01       	movw	r22, r10
    6718:	0e 94 37 56 	call	0xac6e	; 0xac6e <__divsf3>
    671c:	0e 94 9f 56 	call	0xad3e	; 0xad3e <__fixsfsi>
    6720:	70 93 d5 04 	sts	0x04D5, r23
    6724:	60 93 d4 04 	sts	0x04D4, r22
    6728:	3b cf       	rjmp	.-394    	; 0x65a0 <getLeftSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    672a:	02 e0       	ldi	r16, 0x02	; 2
    672c:	10 e0       	ldi	r17, 0x00	; 0
    672e:	91 ce       	rjmp	.-734    	; 0x6452 <getLeftSpeedFromInput+0x76>
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    6730:	08 e0       	ldi	r16, 0x08	; 8
    6732:	10 e0       	ldi	r17, 0x00	; 0
    6734:	d6 ce       	rjmp	.-596    	; 0x64e2 <getLeftSpeedFromInput+0x106>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    6736:	07 e0       	ldi	r16, 0x07	; 7
    6738:	10 e0       	ldi	r17, 0x00	; 0
    673a:	c7 ce       	rjmp	.-626    	; 0x64ca <getLeftSpeedFromInput+0xee>
    673c:	06 e0       	ldi	r16, 0x06	; 6
    673e:	10 e0       	ldi	r17, 0x00	; 0
    6740:	b8 ce       	rjmp	.-656    	; 0x64b2 <getLeftSpeedFromInput+0xd6>
    6742:	05 e0       	ldi	r16, 0x05	; 5
    6744:	10 e0       	ldi	r17, 0x00	; 0
    6746:	a9 ce       	rjmp	.-686    	; 0x649a <getLeftSpeedFromInput+0xbe>
    6748:	04 e0       	ldi	r16, 0x04	; 4
    674a:	10 e0       	ldi	r17, 0x00	; 0
    674c:	9a ce       	rjmp	.-716    	; 0x6482 <getLeftSpeedFromInput+0xa6>
    674e:	03 e0       	ldi	r16, 0x03	; 3
    6750:	10 e0       	ldi	r17, 0x00	; 0
    6752:	8b ce       	rjmp	.-746    	; 0x646a <getLeftSpeedFromInput+0x8e>
    if(pwm_left >= 0) {
        if(last_left_vel == 0) {
            speedLeftFromEnc = 0;
        } else {
            if(indFwL==0) {  // the velocity is lower than first saved in the matrix
                speedLeftFromEnc = (last_left_vel*calibration[0][1])/calibration[0][0];
    6754:	20 91 f8 08 	lds	r18, 0x08F8
    6758:	30 91 f9 08 	lds	r19, 0x08F9
    675c:	c2 9f       	mul	r28, r18
    675e:	c0 01       	movw	r24, r0
    6760:	c3 9f       	mul	r28, r19
    6762:	90 0d       	add	r25, r0
    6764:	d2 9f       	mul	r29, r18
    6766:	90 0d       	add	r25, r0
    6768:	11 24       	eor	r1, r1
    676a:	0e 94 a9 58 	call	0xb152	; 0xb152 <__divmodhi4>
    676e:	70 93 d5 04 	sts	0x04D5, r23
    6772:	60 93 d4 04 	sts	0x04D4, r22
    6776:	14 cf       	rjmp	.-472    	; 0x65a0 <getLeftSpeedFromInput+0x1c4>
            }
        }
    } else {
		if(indBwL==0) {  // the velocity is lower than first saved in the matrix
        	speedLeftFromEnc = (last_left_vel*calibration[0][5])/calibration[0][4];
		} else if(indBwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    6778:	8f ef       	ldi	r24, 0xFF	; 255
    677a:	0f 3f       	cpi	r16, 0xFF	; 255
    677c:	18 07       	cpc	r17, r24
    677e:	09 f4       	brne	.+2      	; 0x6782 <getLeftSpeedFromInput+0x3a6>
    6780:	5d c0       	rjmp	.+186    	; 0x683c <getLeftSpeedFromInput+0x460>
        	speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][5]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][4]);  // take the max
		} else {
        	speedLeftFromEnc = calibration[indBwL-1][5] + (signed int)(((float)(last_left_vel-calibration[indBwL-1][4])*(float)(calibration[indBwL][5]-calibration[indBwL-1][5]))/(float)(calibration[indBwL][4]-calibration[indBwL-1][4]));
    6782:	f8 01       	movw	r30, r16
    6784:	e2 95       	swap	r30
    6786:	f2 95       	swap	r31
    6788:	f0 7f       	andi	r31, 0xF0	; 240
    678a:	fe 27       	eor	r31, r30
    678c:	e0 7f       	andi	r30, 0xF0	; 240
    678e:	fe 27       	eor	r31, r30
    6790:	ea 51       	subi	r30, 0x1A	; 26
    6792:	f7 4f       	sbci	r31, 0xF7	; 247
    6794:	a0 84       	ldd	r10, Z+8	; 0x08
    6796:	b1 84       	ldd	r11, Z+9	; 0x09
    6798:	82 84       	ldd	r8, Z+10	; 0x0a
    679a:	93 84       	ldd	r9, Z+11	; 0x0b
    679c:	ca 19       	sub	r28, r10
    679e:	db 09       	sbc	r29, r11
    67a0:	be 01       	movw	r22, r28
    67a2:	88 27       	eor	r24, r24
    67a4:	77 fd       	sbrc	r23, 7
    67a6:	80 95       	com	r24
    67a8:	98 2f       	mov	r25, r24
    67aa:	0e 94 d2 56 	call	0xada4	; 0xada4 <__floatsisf>
    67ae:	6b 01       	movw	r12, r22
    67b0:	7c 01       	movw	r14, r24
    67b2:	e8 01       	movw	r28, r16
    67b4:	c2 95       	swap	r28
    67b6:	d2 95       	swap	r29
    67b8:	d0 7f       	andi	r29, 0xF0	; 240
    67ba:	dc 27       	eor	r29, r28
    67bc:	c0 7f       	andi	r28, 0xF0	; 240
    67be:	dc 27       	eor	r29, r28
    67c0:	ca 50       	subi	r28, 0x0A	; 10
    67c2:	d7 4f       	sbci	r29, 0xF7	; 247
    67c4:	6a 85       	ldd	r22, Y+10	; 0x0a
    67c6:	7b 85       	ldd	r23, Y+11	; 0x0b
    67c8:	68 19       	sub	r22, r8
    67ca:	79 09       	sbc	r23, r9
    67cc:	88 27       	eor	r24, r24
    67ce:	77 fd       	sbrc	r23, 7
    67d0:	80 95       	com	r24
    67d2:	98 2f       	mov	r25, r24
    67d4:	0e 94 d2 56 	call	0xada4	; 0xada4 <__floatsisf>
    67d8:	9b 01       	movw	r18, r22
    67da:	ac 01       	movw	r20, r24
    67dc:	c7 01       	movw	r24, r14
    67de:	b6 01       	movw	r22, r12
    67e0:	0e 94 eb 57 	call	0xafd6	; 0xafd6 <__mulsf3>
    67e4:	7b 01       	movw	r14, r22
    67e6:	8c 01       	movw	r16, r24
    67e8:	68 85       	ldd	r22, Y+8	; 0x08
    67ea:	79 85       	ldd	r23, Y+9	; 0x09
    67ec:	6a 19       	sub	r22, r10
    67ee:	7b 09       	sbc	r23, r11
    67f0:	88 27       	eor	r24, r24
    67f2:	77 fd       	sbrc	r23, 7
    67f4:	80 95       	com	r24
    67f6:	98 2f       	mov	r25, r24
    67f8:	0e 94 d2 56 	call	0xada4	; 0xada4 <__floatsisf>
    67fc:	9b 01       	movw	r18, r22
    67fe:	ac 01       	movw	r20, r24
    6800:	c8 01       	movw	r24, r16
    6802:	b7 01       	movw	r22, r14
    6804:	0e 94 37 56 	call	0xac6e	; 0xac6e <__divsf3>
    6808:	0e 94 9f 56 	call	0xad3e	; 0xad3e <__fixsfsi>
    680c:	68 0d       	add	r22, r8
    680e:	79 1d       	adc	r23, r9
    6810:	52 cf       	rjmp	.-348    	; 0x66b6 <getLeftSpeedFromInput+0x2da>
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    6812:	08 e0       	ldi	r16, 0x08	; 8
    6814:	10 e0       	ldi	r17, 0x00	; 0
    6816:	3e cf       	rjmp	.-388    	; 0x6694 <getLeftSpeedFromInput+0x2b8>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    6818:	07 e0       	ldi	r16, 0x07	; 7
    681a:	10 e0       	ldi	r17, 0x00	; 0
    681c:	2f cf       	rjmp	.-418    	; 0x667c <getLeftSpeedFromInput+0x2a0>
    681e:	06 e0       	ldi	r16, 0x06	; 6
    6820:	10 e0       	ldi	r17, 0x00	; 0
    6822:	20 cf       	rjmp	.-448    	; 0x6664 <getLeftSpeedFromInput+0x288>
    6824:	05 e0       	ldi	r16, 0x05	; 5
    6826:	10 e0       	ldi	r17, 0x00	; 0
    6828:	11 cf       	rjmp	.-478    	; 0x664c <getLeftSpeedFromInput+0x270>
    682a:	04 e0       	ldi	r16, 0x04	; 4
    682c:	10 e0       	ldi	r17, 0x00	; 0
    682e:	02 cf       	rjmp	.-508    	; 0x6634 <getLeftSpeedFromInput+0x258>
    6830:	03 e0       	ldi	r16, 0x03	; 3
    6832:	10 e0       	ldi	r17, 0x00	; 0
    6834:	f3 ce       	rjmp	.-538    	; 0x661c <getLeftSpeedFromInput+0x240>
    6836:	02 e0       	ldi	r16, 0x02	; 2
    6838:	10 e0       	ldi	r17, 0x00	; 0
    683a:	e4 ce       	rjmp	.-568    	; 0x6604 <getLeftSpeedFromInput+0x228>
        }
    } else {
		if(indBwL==0) {  // the velocity is lower than first saved in the matrix
        	speedLeftFromEnc = (last_left_vel*calibration[0][5])/calibration[0][4];
		} else if(indBwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][5]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][4]);  // take the max
    683c:	60 91 80 09 	lds	r22, 0x0980
    6840:	70 91 81 09 	lds	r23, 0x0981
    6844:	88 27       	eor	r24, r24
    6846:	77 fd       	sbrc	r23, 7
    6848:	80 95       	com	r24
    684a:	98 2f       	mov	r25, r24
    684c:	0e 94 d2 56 	call	0xada4	; 0xada4 <__floatsisf>
    6850:	5b 01       	movw	r10, r22
    6852:	6c 01       	movw	r12, r24
    6854:	be 01       	movw	r22, r28
    6856:	88 27       	eor	r24, r24
    6858:	77 fd       	sbrc	r23, 7
    685a:	80 95       	com	r24
    685c:	98 2f       	mov	r25, r24
    685e:	0e 94 d2 56 	call	0xada4	; 0xada4 <__floatsisf>
    6862:	9b 01       	movw	r18, r22
    6864:	ac 01       	movw	r20, r24
    6866:	c6 01       	movw	r24, r12
    6868:	b5 01       	movw	r22, r10
    686a:	0e 94 eb 57 	call	0xafd6	; 0xafd6 <__mulsf3>
    686e:	5b 01       	movw	r10, r22
    6870:	6c 01       	movw	r12, r24
    6872:	b7 01       	movw	r22, r14
    6874:	88 27       	eor	r24, r24
    6876:	77 fd       	sbrc	r23, 7
    6878:	80 95       	com	r24
    687a:	98 2f       	mov	r25, r24
    687c:	0e 94 d2 56 	call	0xada4	; 0xada4 <__floatsisf>
    6880:	9b 01       	movw	r18, r22
    6882:	ac 01       	movw	r20, r24
    6884:	c6 01       	movw	r24, r12
    6886:	b5 01       	movw	r22, r10
    6888:	0e 94 37 56 	call	0xac6e	; 0xac6e <__divsf3>
    688c:	0e 94 9f 56 	call	0xad3e	; 0xad3e <__fixsfsi>
    6890:	12 cf       	rjmp	.-476    	; 0x66b6 <getLeftSpeedFromInput+0x2da>

00006892 <writeDefaultCalibration>:
		speedLeftFromEnc = -speedLeftFromEnc;
    }
    
}

void writeDefaultCalibration() {
    6892:	2f 92       	push	r2
    6894:	3f 92       	push	r3
    6896:	4f 92       	push	r4
    6898:	5f 92       	push	r5
    689a:	6f 92       	push	r6
    689c:	7f 92       	push	r7
    689e:	8f 92       	push	r8
    68a0:	9f 92       	push	r9
    68a2:	af 92       	push	r10
    68a4:	bf 92       	push	r11
    68a6:	cf 92       	push	r12
    68a8:	df 92       	push	r13
    68aa:	ef 92       	push	r14
    68ac:	ff 92       	push	r15
    68ae:	0f 93       	push	r16
    68b0:	1f 93       	push	r17
    68b2:	cf 93       	push	r28
    68b4:	df 93       	push	r29
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    	calibration[i][0] = i+1;
	}
    // the following values are taken from a field test
    // forward left, speed control enabled
    calibration[0][0] = 20;		// measured speed with back EMF (adc 0..1023)
    68b6:	a4 e1       	ldi	r26, 0x14	; 20
    68b8:	b0 e0       	ldi	r27, 0x00	; 0
    68ba:	b0 93 f7 08 	sts	0x08F7, r27
    68be:	a0 93 f6 08 	sts	0x08F6, r26
    calibration[1][0] = 40;
    68c2:	88 e2       	ldi	r24, 0x28	; 40
    68c4:	90 e0       	ldi	r25, 0x00	; 0
    68c6:	90 93 07 09 	sts	0x0907, r25
    68ca:	80 93 06 09 	sts	0x0906, r24
    calibration[2][0] = 59;
    68ce:	6b e3       	ldi	r22, 0x3B	; 59
    68d0:	70 e0       	ldi	r23, 0x00	; 0
    68d2:	70 93 17 09 	sts	0x0917, r23
    68d6:	60 93 16 09 	sts	0x0916, r22
    calibration[3][0] = 79;
    68da:	0f e4       	ldi	r16, 0x4F	; 79
    68dc:	10 e0       	ldi	r17, 0x00	; 0
    68de:	10 93 27 09 	sts	0x0927, r17
    68e2:	00 93 26 09 	sts	0x0926, r16
    calibration[4][0] = 100;
    68e6:	84 e6       	ldi	r24, 0x64	; 100
    68e8:	90 e0       	ldi	r25, 0x00	; 0
    68ea:	90 93 37 09 	sts	0x0937, r25
    68ee:	80 93 36 09 	sts	0x0936, r24
    calibration[5][0] = 120;
    68f2:	f8 e7       	ldi	r31, 0x78	; 120
    68f4:	af 2e       	mov	r10, r31
    68f6:	b1 2c       	mov	r11, r1
    68f8:	b0 92 47 09 	sts	0x0947, r11
    68fc:	a0 92 46 09 	sts	0x0946, r10
    calibration[6][0] = 139;
    6900:	8b e8       	ldi	r24, 0x8B	; 139
    6902:	90 e0       	ldi	r25, 0x00	; 0
    6904:	90 93 57 09 	sts	0x0957, r25
    6908:	80 93 56 09 	sts	0x0956, r24
    calibration[7][0] = 159;
    690c:	2f e9       	ldi	r18, 0x9F	; 159
    690e:	30 e0       	ldi	r19, 0x00	; 0
    6910:	30 93 67 09 	sts	0x0967, r19
    6914:	20 93 66 09 	sts	0x0966, r18
	calibration[8][0] = 180;
    6918:	44 eb       	ldi	r20, 0xB4	; 180
    691a:	50 e0       	ldi	r21, 0x00	; 0
    691c:	50 93 77 09 	sts	0x0977, r21
    6920:	40 93 76 09 	sts	0x0976, r20
    calibration[0][1] = 19;    	// real speed measured in mm/s
    6924:	63 e1       	ldi	r22, 0x13	; 19
    6926:	70 e0       	ldi	r23, 0x00	; 0
    6928:	70 93 f9 08 	sts	0x08F9, r23
    692c:	60 93 f8 08 	sts	0x08F8, r22
    calibration[1][1] = 47;
    6930:	2f e2       	ldi	r18, 0x2F	; 47
    6932:	30 e0       	ldi	r19, 0x00	; 0
    6934:	30 93 09 09 	sts	0x0909, r19
    6938:	20 93 08 09 	sts	0x0908, r18
    calibration[2][1] = 72;
    693c:	28 e4       	ldi	r18, 0x48	; 72
    693e:	30 e0       	ldi	r19, 0x00	; 0
    6940:	30 93 19 09 	sts	0x0919, r19
    6944:	20 93 18 09 	sts	0x0918, r18
    calibration[3][1] = 91;
    6948:	2b e5       	ldi	r18, 0x5B	; 91
    694a:	30 e0       	ldi	r19, 0x00	; 0
    694c:	30 93 29 09 	sts	0x0929, r19
    6950:	20 93 28 09 	sts	0x0928, r18
    calibration[4][1] = 109;
    6954:	2d e6       	ldi	r18, 0x6D	; 109
    6956:	30 e0       	ldi	r19, 0x00	; 0
    6958:	30 93 39 09 	sts	0x0939, r19
    695c:	20 93 38 09 	sts	0x0938, r18
    calibration[5][1] = 125;
    6960:	ed e7       	ldi	r30, 0x7D	; 125
    6962:	6e 2e       	mov	r6, r30
    6964:	71 2c       	mov	r7, r1
    6966:	70 92 49 09 	sts	0x0949, r7
    696a:	60 92 48 09 	sts	0x0948, r6
    calibration[6][1] = 143;
    696e:	2f e8       	ldi	r18, 0x8F	; 143
    6970:	30 e0       	ldi	r19, 0x00	; 0
    6972:	30 93 59 09 	sts	0x0959, r19
    6976:	20 93 58 09 	sts	0x0958, r18
    calibration[7][1] = 160;
    697a:	20 ea       	ldi	r18, 0xA0	; 160
    697c:	30 e0       	ldi	r19, 0x00	; 0
    697e:	30 93 69 09 	sts	0x0969, r19
    6982:	20 93 68 09 	sts	0x0968, r18
	calibration[8][1] = 174;
    6986:	ee ea       	ldi	r30, 0xAE	; 174
    6988:	f0 e0       	ldi	r31, 0x00	; 0
    698a:	f0 93 79 09 	sts	0x0979, r31
    698e:	e0 93 78 09 	sts	0x0978, r30
    // forward right, speed control enabled
    calibration[0][2] = 19;		// measured speed with back EMF (adc 0..1023)
    6992:	70 93 fb 08 	sts	0x08FB, r23
    6996:	60 93 fa 08 	sts	0x08FA, r22
    calibration[1][2] = 39;
    699a:	e7 e2       	ldi	r30, 0x27	; 39
    699c:	f0 e0       	ldi	r31, 0x00	; 0
    699e:	f0 93 0b 09 	sts	0x090B, r31
    69a2:	e0 93 0a 09 	sts	0x090A, r30
    calibration[2][2] = 60;
    69a6:	cc e3       	ldi	r28, 0x3C	; 60
    69a8:	d0 e0       	ldi	r29, 0x00	; 0
    69aa:	d0 93 1b 09 	sts	0x091B, r29
    69ae:	c0 93 1a 09 	sts	0x091A, r28
    calibration[3][2] = 80;
    69b2:	60 e5       	ldi	r22, 0x50	; 80
    69b4:	70 e0       	ldi	r23, 0x00	; 0
    69b6:	70 93 2b 09 	sts	0x092B, r23
    69ba:	60 93 2a 09 	sts	0x092A, r22
    calibration[4][2] = 99;
    69be:	63 e6       	ldi	r22, 0x63	; 99
    69c0:	e6 2e       	mov	r14, r22
    69c2:	f1 2c       	mov	r15, r1
    69c4:	f0 92 3b 09 	sts	0x093B, r15
    69c8:	e0 92 3a 09 	sts	0x093A, r14
    calibration[5][2] = 119;
    69cc:	67 e7       	ldi	r22, 0x77	; 119
    69ce:	70 e0       	ldi	r23, 0x00	; 0
    69d0:	70 93 4b 09 	sts	0x094B, r23
    69d4:	60 93 4a 09 	sts	0x094A, r22
    calibration[6][2] = 140;
    69d8:	0f 2e       	mov	r0, r31
    69da:	fc e8       	ldi	r31, 0x8C	; 140
    69dc:	cf 2e       	mov	r12, r31
    69de:	dd 24       	eor	r13, r13
    69e0:	f0 2d       	mov	r31, r0
    69e2:	d0 92 5b 09 	sts	0x095B, r13
    69e6:	c0 92 5a 09 	sts	0x095A, r12
    calibration[7][2] = 160;
    69ea:	30 93 6b 09 	sts	0x096B, r19
    69ee:	20 93 6a 09 	sts	0x096A, r18
	calibration[8][2] = 180;
    69f2:	50 93 7b 09 	sts	0x097B, r21
    69f6:	40 93 7a 09 	sts	0x097A, r20
    calibration[0][3] = 23;    	// real speed measured in mm/s
    69fa:	0f 2e       	mov	r0, r31
    69fc:	f7 e1       	ldi	r31, 0x17	; 23
    69fe:	8f 2e       	mov	r8, r31
    6a00:	99 24       	eor	r9, r9
    6a02:	f0 2d       	mov	r31, r0
    6a04:	90 92 fd 08 	sts	0x08FD, r9
    6a08:	80 92 fc 08 	sts	0x08FC, r8
    calibration[1][3] = 46;
    6a0c:	0f 2e       	mov	r0, r31
    6a0e:	fe e2       	ldi	r31, 0x2E	; 46
    6a10:	4f 2e       	mov	r4, r31
    6a12:	55 24       	eor	r5, r5
    6a14:	f0 2d       	mov	r31, r0
    6a16:	50 92 0d 09 	sts	0x090D, r5
    6a1a:	40 92 0c 09 	sts	0x090C, r4
    calibration[2][3] = 64;
    6a1e:	88 24       	eor	r8, r8
    6a20:	99 24       	eor	r9, r9
    6a22:	68 94       	set
    6a24:	86 f8       	bld	r8, 6
    6a26:	90 92 1d 09 	sts	0x091D, r9
    6a2a:	80 92 1c 09 	sts	0x091C, r8
    calibration[3][3] = 81;
    6a2e:	0f 2e       	mov	r0, r31
    6a30:	f1 e5       	ldi	r31, 0x51	; 81
    6a32:	2f 2e       	mov	r2, r31
    6a34:	33 24       	eor	r3, r3
    6a36:	f0 2d       	mov	r31, r0
    6a38:	30 92 2d 09 	sts	0x092D, r3
    6a3c:	20 92 2c 09 	sts	0x092C, r2
    calibration[4][3] = 97;
    6a40:	0f 2e       	mov	r0, r31
    6a42:	f1 e6       	ldi	r31, 0x61	; 97
    6a44:	8f 2e       	mov	r8, r31
    6a46:	99 24       	eor	r9, r9
    6a48:	f0 2d       	mov	r31, r0
    6a4a:	90 92 3d 09 	sts	0x093D, r9
    6a4e:	80 92 3c 09 	sts	0x093C, r8
    calibration[5][3] = 112;
    6a52:	0f 2e       	mov	r0, r31
    6a54:	f0 e7       	ldi	r31, 0x70	; 112
    6a56:	8f 2e       	mov	r8, r31
    6a58:	99 24       	eor	r9, r9
    6a5a:	f0 2d       	mov	r31, r0
    6a5c:	90 92 4d 09 	sts	0x094D, r9
    6a60:	80 92 4c 09 	sts	0x094C, r8
    calibration[6][3] = 125;
    6a64:	70 92 5d 09 	sts	0x095D, r7
    6a68:	60 92 5c 09 	sts	0x095C, r6
    calibration[7][3] = 139;
    6a6c:	90 93 6d 09 	sts	0x096D, r25
    6a70:	80 93 6c 09 	sts	0x096C, r24
	calibration[8][3] = 152;
    6a74:	0f 2e       	mov	r0, r31
    6a76:	f8 e9       	ldi	r31, 0x98	; 152
    6a78:	8f 2e       	mov	r8, r31
    6a7a:	99 24       	eor	r9, r9
    6a7c:	f0 2d       	mov	r31, r0
    6a7e:	90 92 7d 09 	sts	0x097D, r9
    6a82:	80 92 7c 09 	sts	0x097C, r8
    // backward left, speed control enabled
    calibration[0][4] = 20;		// measured speed with back EMF (adc 0..1023)
    6a86:	b0 93 ff 08 	sts	0x08FF, r27
    6a8a:	a0 93 fe 08 	sts	0x08FE, r26
    calibration[1][4] = 39;
    6a8e:	f0 93 0f 09 	sts	0x090F, r31
    6a92:	e0 93 0e 09 	sts	0x090E, r30
    calibration[2][4] = 60;
    6a96:	d0 93 1f 09 	sts	0x091F, r29
    6a9a:	c0 93 1e 09 	sts	0x091E, r28
    calibration[3][4] = 79;
    6a9e:	10 93 2f 09 	sts	0x092F, r17
    6aa2:	00 93 2e 09 	sts	0x092E, r16
    calibration[4][4] = 99;
    6aa6:	f0 92 3f 09 	sts	0x093F, r15
    6aaa:	e0 92 3e 09 	sts	0x093E, r14
    calibration[5][4] = 120;
    6aae:	b0 92 4f 09 	sts	0x094F, r11
    6ab2:	a0 92 4e 09 	sts	0x094E, r10
    calibration[6][4] = 140;
    6ab6:	d0 92 5f 09 	sts	0x095F, r13
    6aba:	c0 92 5e 09 	sts	0x095E, r12
    calibration[7][4] = 160;
    6abe:	30 93 6f 09 	sts	0x096F, r19
    6ac2:	20 93 6e 09 	sts	0x096E, r18
	calibration[8][4] = 179;
    6ac6:	c3 eb       	ldi	r28, 0xB3	; 179
    6ac8:	d0 e0       	ldi	r29, 0x00	; 0
    6aca:	d0 93 7f 09 	sts	0x097F, r29
    6ace:	c0 93 7e 09 	sts	0x097E, r28
    calibration[0][5] = 18;    	// real speed measured in mm/s
    6ad2:	c2 e1       	ldi	r28, 0x12	; 18
    6ad4:	d0 e0       	ldi	r29, 0x00	; 0
    6ad6:	d0 93 01 09 	sts	0x0901, r29
    6ada:	c0 93 00 09 	sts	0x0900, r28
    calibration[1][5] = 45;
    6ade:	cd e2       	ldi	r28, 0x2D	; 45
    6ae0:	d0 e0       	ldi	r29, 0x00	; 0
    6ae2:	d0 93 11 09 	sts	0x0911, r29
    6ae6:	c0 93 10 09 	sts	0x0910, r28
    calibration[2][5] = 68;
    6aea:	c4 e4       	ldi	r28, 0x44	; 68
    6aec:	d0 e0       	ldi	r29, 0x00	; 0
    6aee:	d0 93 21 09 	sts	0x0921, r29
    6af2:	c0 93 20 09 	sts	0x0920, r28
    calibration[3][5] = 87;
    6af6:	c7 e5       	ldi	r28, 0x57	; 87
    6af8:	d0 e0       	ldi	r29, 0x00	; 0
    6afa:	d0 93 31 09 	sts	0x0931, r29
    6afe:	c0 93 30 09 	sts	0x0930, r28
    calibration[4][5] = 105;
    6b02:	c9 e6       	ldi	r28, 0x69	; 105
    6b04:	d0 e0       	ldi	r29, 0x00	; 0
    6b06:	d0 93 41 09 	sts	0x0941, r29
    6b0a:	c0 93 40 09 	sts	0x0940, r28
    calibration[5][5] = 119;
    6b0e:	70 93 51 09 	sts	0x0951, r23
    6b12:	60 93 50 09 	sts	0x0950, r22
    calibration[6][5] = 137;
    6b16:	c9 e8       	ldi	r28, 0x89	; 137
    6b18:	d0 e0       	ldi	r29, 0x00	; 0
    6b1a:	d0 93 61 09 	sts	0x0961, r29
    6b1e:	c0 93 60 09 	sts	0x0960, r28
    calibration[7][5] = 151;
    6b22:	c7 e9       	ldi	r28, 0x97	; 151
    6b24:	d0 e0       	ldi	r29, 0x00	; 0
    6b26:	d0 93 71 09 	sts	0x0971, r29
    6b2a:	c0 93 70 09 	sts	0x0970, r28
	calibration[8][5] = 168;
    6b2e:	c8 ea       	ldi	r28, 0xA8	; 168
    6b30:	d0 e0       	ldi	r29, 0x00	; 0
    6b32:	d0 93 81 09 	sts	0x0981, r29
    6b36:	c0 93 80 09 	sts	0x0980, r28
    // backward right, speed control enabled
    calibration[0][6] = 20;		// measured speed with back EMF (adc 0..1023)
    6b3a:	b0 93 03 09 	sts	0x0903, r27
    6b3e:	a0 93 02 09 	sts	0x0902, r26
    calibration[1][6] = 39;
    6b42:	f0 93 13 09 	sts	0x0913, r31
    6b46:	e0 93 12 09 	sts	0x0912, r30
    calibration[2][6] = 59;
    6b4a:	eb e3       	ldi	r30, 0x3B	; 59
    6b4c:	f0 e0       	ldi	r31, 0x00	; 0
    6b4e:	f0 93 23 09 	sts	0x0923, r31
    6b52:	e0 93 22 09 	sts	0x0922, r30
    calibration[3][6] = 80;
    6b56:	e0 e5       	ldi	r30, 0x50	; 80
    6b58:	f0 e0       	ldi	r31, 0x00	; 0
    6b5a:	f0 93 33 09 	sts	0x0933, r31
    6b5e:	e0 93 32 09 	sts	0x0932, r30
    calibration[4][6] = 100;
    6b62:	e4 e6       	ldi	r30, 0x64	; 100
    6b64:	f0 e0       	ldi	r31, 0x00	; 0
    6b66:	f0 93 43 09 	sts	0x0943, r31
    6b6a:	e0 93 42 09 	sts	0x0942, r30
    calibration[5][6] = 119;
    6b6e:	70 93 53 09 	sts	0x0953, r23
    6b72:	60 93 52 09 	sts	0x0952, r22
    calibration[6][6] = 139;
    6b76:	90 93 63 09 	sts	0x0963, r25
    6b7a:	80 93 62 09 	sts	0x0962, r24
    calibration[7][6] = 160;
    6b7e:	30 93 73 09 	sts	0x0973, r19
    6b82:	20 93 72 09 	sts	0x0972, r18
	calibration[8][6] = 180;
    6b86:	50 93 83 09 	sts	0x0983, r21
    6b8a:	40 93 82 09 	sts	0x0982, r20
    calibration[0][7] = 22;    	// real speed measured in mm/s
    6b8e:	26 e1       	ldi	r18, 0x16	; 22
    6b90:	30 e0       	ldi	r19, 0x00	; 0
    6b92:	30 93 05 09 	sts	0x0905, r19
    6b96:	20 93 04 09 	sts	0x0904, r18
    calibration[1][7] = 46;
    6b9a:	50 92 15 09 	sts	0x0915, r5
    6b9e:	40 92 14 09 	sts	0x0914, r4
    calibration[2][7] = 65;
    6ba2:	21 e4       	ldi	r18, 0x41	; 65
    6ba4:	30 e0       	ldi	r19, 0x00	; 0
    6ba6:	30 93 25 09 	sts	0x0925, r19
    6baa:	20 93 24 09 	sts	0x0924, r18
    calibration[3][7] = 81;
    6bae:	30 92 35 09 	sts	0x0935, r3
    6bb2:	20 92 34 09 	sts	0x0934, r2
    calibration[4][7] = 96;
    6bb6:	20 e6       	ldi	r18, 0x60	; 96
    6bb8:	30 e0       	ldi	r19, 0x00	; 0
    6bba:	30 93 45 09 	sts	0x0945, r19
    6bbe:	20 93 44 09 	sts	0x0944, r18
    calibration[5][7] = 111;
    6bc2:	2f e6       	ldi	r18, 0x6F	; 111
    6bc4:	30 e0       	ldi	r19, 0x00	; 0
    6bc6:	30 93 55 09 	sts	0x0955, r19
    6bca:	20 93 54 09 	sts	0x0954, r18
    calibration[6][7] = 125;
    6bce:	70 92 65 09 	sts	0x0965, r7
    6bd2:	60 92 64 09 	sts	0x0964, r6
    calibration[7][7] = 139;
    6bd6:	90 93 75 09 	sts	0x0975, r25
    6bda:	80 93 74 09 	sts	0x0974, r24
	calibration[8][7] = 153;
    6bde:	89 e9       	ldi	r24, 0x99	; 153
    6be0:	90 e0       	ldi	r25, 0x00	; 0
    6be2:	90 93 85 09 	sts	0x0985, r25
    6be6:	80 93 84 09 	sts	0x0984, r24

    writeCalibrationToFlash();
    6bea:	0e 94 d1 48 	call	0x91a2	; 0x91a2 <writeCalibrationToFlash>
}
    6bee:	df 91       	pop	r29
    6bf0:	cf 91       	pop	r28
    6bf2:	1f 91       	pop	r17
    6bf4:	0f 91       	pop	r16
    6bf6:	ff 90       	pop	r15
    6bf8:	ef 90       	pop	r14
    6bfa:	df 90       	pop	r13
    6bfc:	cf 90       	pop	r12
    6bfe:	bf 90       	pop	r11
    6c00:	af 90       	pop	r10
    6c02:	9f 90       	pop	r9
    6c04:	8f 90       	pop	r8
    6c06:	7f 90       	pop	r7
    6c08:	6f 90       	pop	r6
    6c0a:	5f 90       	pop	r5
    6c0c:	4f 90       	pop	r4
    6c0e:	3f 90       	pop	r3
    6c10:	2f 90       	pop	r2
    6c12:	08 95       	ret

00006c14 <initCalibration>:

void initCalibration() {

    unsigned int temp=0;
 
 	temp = eeprom_read_word((uint16_t*)CALIB_CHECK_ADDRESS);
    6c14:	8a e6       	ldi	r24, 0x6A	; 106
    6c16:	9f e0       	ldi	r25, 0x0F	; 15
    6c18:	0e 94 76 59 	call	0xb2ec	; 0xb2ec <__eerd_word_m2560>

    if(temp==0xAA55) {   // valid odometry data saved in flash, read them
    6c1c:	2a ea       	ldi	r18, 0xAA	; 170
    6c1e:	85 35       	cpi	r24, 0x55	; 85
    6c20:	92 07       	cpc	r25, r18
    6c22:	19 f0       	breq	.+6      	; 0x6c2a <initCalibration+0x16>
        readCalibrationFromFlash();
    } else {
		writeDefaultCalibration();		
    6c24:	0e 94 49 34 	call	0x6892	; 0x6892 <writeDefaultCalibration>
    6c28:	08 95       	ret
    unsigned int temp=0;
 
 	temp = eeprom_read_word((uint16_t*)CALIB_CHECK_ADDRESS);

    if(temp==0xAA55) {   // valid odometry data saved in flash, read them
        readCalibrationFromFlash();
    6c2a:	0e 94 e0 48 	call	0x91c0	; 0x91c0 <readCalibrationFromFlash>
    6c2e:	08 95       	ret

00006c30 <handleSoftAcceleration>:

// Handle "soft acceleration" that basically increase or decrease the current speed
// at steps untill raching the new desired speed, resulting in a smooth acceleration).
// At the moment the "soft acceleration" is disabled and can be enabled only in the code 
// by setting the value of "softAccEnabled" to 1 at variable initialization.
void handleSoftAcceleration() {
    6c30:	bf 92       	push	r11
    6c32:	cf 92       	push	r12
    6c34:	df 92       	push	r13
    6c36:	ef 92       	push	r14
    6c38:	ff 92       	push	r15
    6c3a:	0f 93       	push	r16
    6c3c:	1f 93       	push	r17
		
	if(calibrateOdomFlag==0) {
    6c3e:	80 91 82 05 	lds	r24, 0x0582
    6c42:	88 23       	and	r24, r24
    6c44:	41 f0       	breq	.+16     	; 0x6c56 <handleSoftAcceleration+0x26>
			}

		}
	}

}
    6c46:	1f 91       	pop	r17
    6c48:	0f 91       	pop	r16
    6c4a:	ff 90       	pop	r15
    6c4c:	ef 90       	pop	r14
    6c4e:	df 90       	pop	r13
    6c50:	cf 90       	pop	r12
    6c52:	bf 90       	pop	r11
    6c54:	08 95       	ret
// At the moment the "soft acceleration" is disabled and can be enabled only in the code 
// by setting the value of "softAccEnabled" to 1 at variable initialization.
void handleSoftAcceleration() {
		
	if(calibrateOdomFlag==0) {
		if((getTime100MicroSec()-speedStepCounter) >= SPEED_STEP_DELAY) {
    6c56:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
    6c5a:	9b 01       	movw	r18, r22
    6c5c:	ac 01       	movw	r20, r24
    6c5e:	60 e0       	ldi	r22, 0x00	; 0
    6c60:	70 e0       	ldi	r23, 0x00	; 0
    6c62:	cb 01       	movw	r24, r22
    6c64:	f0 91 78 04 	lds	r31, 0x0478
    6c68:	e0 91 79 04 	lds	r30, 0x0479
    6c6c:	c0 90 7a 04 	lds	r12, 0x047A
    6c70:	b0 90 7b 04 	lds	r11, 0x047B
    6c74:	10 91 7c 04 	lds	r17, 0x047C
    6c78:	b0 91 7d 04 	lds	r27, 0x047D
    6c7c:	a0 91 7e 04 	lds	r26, 0x047E
    6c80:	d0 90 7f 04 	lds	r13, 0x047F
    6c84:	e2 2e       	mov	r14, r18
    6c86:	ef 1a       	sub	r14, r31
    6c88:	01 e0       	ldi	r16, 0x01	; 1
    6c8a:	2e 15       	cp	r18, r14
    6c8c:	08 f0       	brcs	.+2      	; 0x6c90 <handleSoftAcceleration+0x60>
    6c8e:	08 c1       	rjmp	.+528    	; 0x6ea0 <handleSoftAcceleration+0x270>
    6c90:	f3 2f       	mov	r31, r19
    6c92:	fe 1b       	sub	r31, r30
    6c94:	ef 2f       	mov	r30, r31
    6c96:	f1 e0       	ldi	r31, 0x01	; 1
    6c98:	3e 17       	cp	r19, r30
    6c9a:	08 f0       	brcs	.+2      	; 0x6c9e <handleSoftAcceleration+0x6e>
    6c9c:	f9 c0       	rjmp	.+498    	; 0x6e90 <handleSoftAcceleration+0x260>
    6c9e:	fe 2e       	mov	r15, r30
    6ca0:	f0 1a       	sub	r15, r16
    6ca2:	01 e0       	ldi	r16, 0x01	; 1
    6ca4:	ef 15       	cp	r30, r15
    6ca6:	08 f0       	brcs	.+2      	; 0x6caa <handleSoftAcceleration+0x7a>
    6ca8:	ea c0       	rjmp	.+468    	; 0x6e7e <handleSoftAcceleration+0x24e>
    6caa:	f0 2b       	or	r31, r16
    6cac:	04 2f       	mov	r16, r20
    6cae:	0c 19       	sub	r16, r12
    6cb0:	e1 e0       	ldi	r30, 0x01	; 1
    6cb2:	40 17       	cp	r20, r16
    6cb4:	08 f0       	brcs	.+2      	; 0x6cb8 <handleSoftAcceleration+0x88>
    6cb6:	db c0       	rjmp	.+438    	; 0x6e6e <handleSoftAcceleration+0x23e>
    6cb8:	c0 2e       	mov	r12, r16
    6cba:	cf 1a       	sub	r12, r31
    6cbc:	f1 e0       	ldi	r31, 0x01	; 1
    6cbe:	0c 15       	cp	r16, r12
    6cc0:	08 f0       	brcs	.+2      	; 0x6cc4 <handleSoftAcceleration+0x94>
    6cc2:	cc c0       	rjmp	.+408    	; 0x6e5c <handleSoftAcceleration+0x22c>
    6cc4:	ef 2b       	or	r30, r31
    6cc6:	05 2f       	mov	r16, r21
    6cc8:	0b 19       	sub	r16, r11
    6cca:	f1 e0       	ldi	r31, 0x01	; 1
    6ccc:	50 17       	cp	r21, r16
    6cce:	08 f0       	brcs	.+2      	; 0x6cd2 <handleSoftAcceleration+0xa2>
    6cd0:	bd c0       	rjmp	.+378    	; 0x6e4c <handleSoftAcceleration+0x21c>
    6cd2:	b0 2e       	mov	r11, r16
    6cd4:	be 1a       	sub	r11, r30
    6cd6:	e1 e0       	ldi	r30, 0x01	; 1
    6cd8:	0b 15       	cp	r16, r11
    6cda:	08 f0       	brcs	.+2      	; 0x6cde <handleSoftAcceleration+0xae>
    6cdc:	af c0       	rjmp	.+350    	; 0x6e3c <handleSoftAcceleration+0x20c>
    6cde:	fe 2b       	or	r31, r30
    6ce0:	11 95       	neg	r17
    6ce2:	e1 e0       	ldi	r30, 0x01	; 1
    6ce4:	61 17       	cp	r22, r17
    6ce6:	08 f0       	brcs	.+2      	; 0x6cea <handleSoftAcceleration+0xba>
    6ce8:	a1 c0       	rjmp	.+322    	; 0x6e2c <handleSoftAcceleration+0x1fc>
    6cea:	01 2f       	mov	r16, r17
    6cec:	0f 1b       	sub	r16, r31
    6cee:	f1 e0       	ldi	r31, 0x01	; 1
    6cf0:	10 17       	cp	r17, r16
    6cf2:	08 f0       	brcs	.+2      	; 0x6cf6 <handleSoftAcceleration+0xc6>
    6cf4:	93 c0       	rjmp	.+294    	; 0x6e1c <handleSoftAcceleration+0x1ec>
    6cf6:	ef 2b       	or	r30, r31
    6cf8:	b1 95       	neg	r27
    6cfa:	f1 e0       	ldi	r31, 0x01	; 1
    6cfc:	7b 17       	cp	r23, r27
    6cfe:	08 f0       	brcs	.+2      	; 0x6d02 <handleSoftAcceleration+0xd2>
    6d00:	85 c0       	rjmp	.+266    	; 0x6e0c <handleSoftAcceleration+0x1dc>
    6d02:	1b 2f       	mov	r17, r27
    6d04:	1e 1b       	sub	r17, r30
    6d06:	e1 e0       	ldi	r30, 0x01	; 1
    6d08:	b1 17       	cp	r27, r17
    6d0a:	08 f0       	brcs	.+2      	; 0x6d0e <handleSoftAcceleration+0xde>
    6d0c:	77 c0       	rjmp	.+238    	; 0x6dfc <handleSoftAcceleration+0x1cc>
    6d0e:	fe 2b       	or	r31, r30
    6d10:	a1 95       	neg	r26
    6d12:	e1 e0       	ldi	r30, 0x01	; 1
    6d14:	8a 17       	cp	r24, r26
    6d16:	08 f0       	brcs	.+2      	; 0x6d1a <handleSoftAcceleration+0xea>
    6d18:	69 c0       	rjmp	.+210    	; 0x6dec <handleSoftAcceleration+0x1bc>
    6d1a:	9a 2f       	mov	r25, r26
    6d1c:	9f 1b       	sub	r25, r31
    6d1e:	81 e0       	ldi	r24, 0x01	; 1
    6d20:	a9 17       	cp	r26, r25
    6d22:	08 f0       	brcs	.+2      	; 0x6d26 <handleSoftAcceleration+0xf6>
    6d24:	61 c0       	rjmp	.+194    	; 0x6de8 <handleSoftAcceleration+0x1b8>
    6d26:	e8 2b       	or	r30, r24
    6d28:	d1 94       	neg	r13
    6d2a:	de 16       	cp	r13, r30
    6d2c:	a1 f4       	brne	.+40     	; 0x6d56 <handleSoftAcceleration+0x126>
    6d2e:	99 23       	and	r25, r25
    6d30:	91 f4       	brne	.+36     	; 0x6d56 <handleSoftAcceleration+0x126>
    6d32:	11 23       	and	r17, r17
    6d34:	81 f4       	brne	.+32     	; 0x6d56 <handleSoftAcceleration+0x126>
    6d36:	00 23       	and	r16, r16
    6d38:	71 f4       	brne	.+28     	; 0x6d56 <handleSoftAcceleration+0x126>
    6d3a:	bb 20       	and	r11, r11
    6d3c:	61 f4       	brne	.+24     	; 0x6d56 <handleSoftAcceleration+0x126>
    6d3e:	cc 20       	and	r12, r12
    6d40:	51 f4       	brne	.+20     	; 0x6d56 <handleSoftAcceleration+0x126>
    6d42:	8f 2d       	mov	r24, r15
    6d44:	82 30       	cpi	r24, 0x02	; 2
    6d46:	38 f4       	brcc	.+14     	; 0x6d56 <handleSoftAcceleration+0x126>
    6d48:	81 30       	cpi	r24, 0x01	; 1
    6d4a:	09 f0       	breq	.+2      	; 0x6d4e <handleSoftAcceleration+0x11e>
    6d4c:	7c cf       	rjmp	.-264    	; 0x6c46 <handleSoftAcceleration+0x16>
    6d4e:	fe 2d       	mov	r31, r14
    6d50:	f0 39       	cpi	r31, 0x90	; 144
    6d52:	08 f4       	brcc	.+2      	; 0x6d56 <handleSoftAcceleration+0x126>
    6d54:	78 cf       	rjmp	.-272    	; 0x6c46 <handleSoftAcceleration+0x16>
			speedStepCounter = getTime100MicroSec();
    6d56:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
    6d5a:	9b 01       	movw	r18, r22
    6d5c:	ac 01       	movw	r20, r24
    6d5e:	60 93 78 04 	sts	0x0478, r22
    6d62:	30 93 79 04 	sts	0x0479, r19
    6d66:	40 93 7a 04 	sts	0x047A, r20
    6d6a:	50 93 7b 04 	sts	0x047B, r21
    6d6e:	10 92 7c 04 	sts	0x047C, r1
    6d72:	10 92 7d 04 	sts	0x047D, r1
    6d76:	10 92 7e 04 	sts	0x047E, r1
    6d7a:	10 92 7f 04 	sts	0x047F, r1

			if(softAccEnabled) {
    6d7e:	80 91 80 04 	lds	r24, 0x0480
    6d82:	88 23       	and	r24, r24
    6d84:	09 f4       	brne	.+2      	; 0x6d88 <handleSoftAcceleration+0x158>
    6d86:	95 c0       	rjmp	.+298    	; 0x6eb2 <handleSoftAcceleration+0x282>
				if(pwm_right_desired == 0) {
    6d88:	80 91 09 03 	lds	r24, 0x0309
    6d8c:	90 91 0a 03 	lds	r25, 0x030A
    6d90:	00 97       	sbiw	r24, 0x00	; 0
    6d92:	09 f0       	breq	.+2      	; 0x6d96 <handleSoftAcceleration+0x166>
    6d94:	9f c0       	rjmp	.+318    	; 0x6ed4 <handleSoftAcceleration+0x2a4>
					pwm_intermediate_right_desired = 0;
				} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
					pwm_intermediate_right_desired = 0;
    6d96:	10 92 0e 03 	sts	0x030E, r1
    6d9a:	10 92 0d 03 	sts	0x030D, r1
					if(pwm_intermediate_right_desired < pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
					}					
				}
	
				if(pwm_left_desired == 0) {
    6d9e:	80 91 0b 03 	lds	r24, 0x030B
    6da2:	90 91 0c 03 	lds	r25, 0x030C
    6da6:	00 97       	sbiw	r24, 0x00	; 0
    6da8:	09 f4       	brne	.+2      	; 0x6dac <handleSoftAcceleration+0x17c>
    6daa:	b5 c0       	rjmp	.+362    	; 0x6f16 <handleSoftAcceleration+0x2e6>
					pwm_intermediate_left_desired = 0;
				} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
    6dac:	20 91 0f 03 	lds	r18, 0x030F
    6db0:	30 91 10 03 	lds	r19, 0x0310
    6db4:	28 9f       	mul	r18, r24
    6db6:	a0 01       	movw	r20, r0
    6db8:	29 9f       	mul	r18, r25
    6dba:	50 0d       	add	r21, r0
    6dbc:	38 9f       	mul	r19, r24
    6dbe:	50 0d       	add	r21, r0
    6dc0:	11 24       	eor	r1, r1
    6dc2:	57 fd       	sbrc	r21, 7
    6dc4:	a8 c0       	rjmp	.+336    	; 0x6f16 <handleSoftAcceleration+0x2e6>
					pwm_intermediate_left_desired = 0;
				} else if(pwm_left_desired > pwm_intermediate_left_desired) {
    6dc6:	28 17       	cp	r18, r24
    6dc8:	39 07       	cpc	r19, r25
    6dca:	0c f0       	brlt	.+2      	; 0x6dce <handleSoftAcceleration+0x19e>
    6dcc:	a9 c0       	rjmp	.+338    	; 0x6f20 <handleSoftAcceleration+0x2f0>
					pwm_intermediate_left_desired += speedStep;
    6dce:	40 91 17 02 	lds	r20, 0x0217
    6dd2:	24 0f       	add	r18, r20
    6dd4:	31 1d       	adc	r19, r1
    6dd6:	30 93 10 03 	sts	0x0310, r19
    6dda:	20 93 0f 03 	sts	0x030F, r18
					if(pwm_intermediate_left_desired > pwm_left_desired) {
    6dde:	82 17       	cp	r24, r18
    6de0:	93 07       	cpc	r25, r19
    6de2:	0c f0       	brlt	.+2      	; 0x6de6 <handleSoftAcceleration+0x1b6>
    6de4:	30 cf       	rjmp	.-416    	; 0x6c46 <handleSoftAcceleration+0x16>
    6de6:	71 c0       	rjmp	.+226    	; 0x6eca <handleSoftAcceleration+0x29a>
// At the moment the "soft acceleration" is disabled and can be enabled only in the code 
// by setting the value of "softAccEnabled" to 1 at variable initialization.
void handleSoftAcceleration() {
		
	if(calibrateOdomFlag==0) {
		if((getTime100MicroSec()-speedStepCounter) >= SPEED_STEP_DELAY) {
    6de8:	80 e0       	ldi	r24, 0x00	; 0
    6dea:	9d cf       	rjmp	.-198    	; 0x6d26 <handleSoftAcceleration+0xf6>
    6dec:	e0 e0       	ldi	r30, 0x00	; 0
    6dee:	9a 2f       	mov	r25, r26
    6df0:	9f 1b       	sub	r25, r31
    6df2:	81 e0       	ldi	r24, 0x01	; 1
    6df4:	a9 17       	cp	r26, r25
    6df6:	08 f4       	brcc	.+2      	; 0x6dfa <handleSoftAcceleration+0x1ca>
    6df8:	96 cf       	rjmp	.-212    	; 0x6d26 <handleSoftAcceleration+0xf6>
    6dfa:	f6 cf       	rjmp	.-20     	; 0x6de8 <handleSoftAcceleration+0x1b8>
    6dfc:	e0 e0       	ldi	r30, 0x00	; 0
    6dfe:	fe 2b       	or	r31, r30
    6e00:	a1 95       	neg	r26
    6e02:	e1 e0       	ldi	r30, 0x01	; 1
    6e04:	8a 17       	cp	r24, r26
    6e06:	08 f4       	brcc	.+2      	; 0x6e0a <handleSoftAcceleration+0x1da>
    6e08:	88 cf       	rjmp	.-240    	; 0x6d1a <handleSoftAcceleration+0xea>
    6e0a:	f0 cf       	rjmp	.-32     	; 0x6dec <handleSoftAcceleration+0x1bc>
    6e0c:	f0 e0       	ldi	r31, 0x00	; 0
    6e0e:	1b 2f       	mov	r17, r27
    6e10:	1e 1b       	sub	r17, r30
    6e12:	e1 e0       	ldi	r30, 0x01	; 1
    6e14:	b1 17       	cp	r27, r17
    6e16:	08 f4       	brcc	.+2      	; 0x6e1a <handleSoftAcceleration+0x1ea>
    6e18:	7a cf       	rjmp	.-268    	; 0x6d0e <handleSoftAcceleration+0xde>
    6e1a:	f0 cf       	rjmp	.-32     	; 0x6dfc <handleSoftAcceleration+0x1cc>
    6e1c:	f0 e0       	ldi	r31, 0x00	; 0
    6e1e:	ef 2b       	or	r30, r31
    6e20:	b1 95       	neg	r27
    6e22:	f1 e0       	ldi	r31, 0x01	; 1
    6e24:	7b 17       	cp	r23, r27
    6e26:	08 f4       	brcc	.+2      	; 0x6e2a <handleSoftAcceleration+0x1fa>
    6e28:	6c cf       	rjmp	.-296    	; 0x6d02 <handleSoftAcceleration+0xd2>
    6e2a:	f0 cf       	rjmp	.-32     	; 0x6e0c <handleSoftAcceleration+0x1dc>
    6e2c:	e0 e0       	ldi	r30, 0x00	; 0
    6e2e:	01 2f       	mov	r16, r17
    6e30:	0f 1b       	sub	r16, r31
    6e32:	f1 e0       	ldi	r31, 0x01	; 1
    6e34:	10 17       	cp	r17, r16
    6e36:	08 f4       	brcc	.+2      	; 0x6e3a <handleSoftAcceleration+0x20a>
    6e38:	5e cf       	rjmp	.-324    	; 0x6cf6 <handleSoftAcceleration+0xc6>
    6e3a:	f0 cf       	rjmp	.-32     	; 0x6e1c <handleSoftAcceleration+0x1ec>
    6e3c:	e0 e0       	ldi	r30, 0x00	; 0
    6e3e:	fe 2b       	or	r31, r30
    6e40:	11 95       	neg	r17
    6e42:	e1 e0       	ldi	r30, 0x01	; 1
    6e44:	61 17       	cp	r22, r17
    6e46:	08 f4       	brcc	.+2      	; 0x6e4a <handleSoftAcceleration+0x21a>
    6e48:	50 cf       	rjmp	.-352    	; 0x6cea <handleSoftAcceleration+0xba>
    6e4a:	f0 cf       	rjmp	.-32     	; 0x6e2c <handleSoftAcceleration+0x1fc>
    6e4c:	f0 e0       	ldi	r31, 0x00	; 0
    6e4e:	b0 2e       	mov	r11, r16
    6e50:	be 1a       	sub	r11, r30
    6e52:	e1 e0       	ldi	r30, 0x01	; 1
    6e54:	0b 15       	cp	r16, r11
    6e56:	08 f4       	brcc	.+2      	; 0x6e5a <handleSoftAcceleration+0x22a>
    6e58:	42 cf       	rjmp	.-380    	; 0x6cde <handleSoftAcceleration+0xae>
    6e5a:	f0 cf       	rjmp	.-32     	; 0x6e3c <handleSoftAcceleration+0x20c>
    6e5c:	f0 e0       	ldi	r31, 0x00	; 0
    6e5e:	ef 2b       	or	r30, r31
    6e60:	05 2f       	mov	r16, r21
    6e62:	0b 19       	sub	r16, r11
    6e64:	f1 e0       	ldi	r31, 0x01	; 1
    6e66:	50 17       	cp	r21, r16
    6e68:	08 f4       	brcc	.+2      	; 0x6e6c <handleSoftAcceleration+0x23c>
    6e6a:	33 cf       	rjmp	.-410    	; 0x6cd2 <handleSoftAcceleration+0xa2>
    6e6c:	ef cf       	rjmp	.-34     	; 0x6e4c <handleSoftAcceleration+0x21c>
    6e6e:	e0 e0       	ldi	r30, 0x00	; 0
    6e70:	c0 2e       	mov	r12, r16
    6e72:	cf 1a       	sub	r12, r31
    6e74:	f1 e0       	ldi	r31, 0x01	; 1
    6e76:	0c 15       	cp	r16, r12
    6e78:	08 f4       	brcc	.+2      	; 0x6e7c <handleSoftAcceleration+0x24c>
    6e7a:	24 cf       	rjmp	.-440    	; 0x6cc4 <handleSoftAcceleration+0x94>
    6e7c:	ef cf       	rjmp	.-34     	; 0x6e5c <handleSoftAcceleration+0x22c>
    6e7e:	00 e0       	ldi	r16, 0x00	; 0
    6e80:	f0 2b       	or	r31, r16
    6e82:	04 2f       	mov	r16, r20
    6e84:	0c 19       	sub	r16, r12
    6e86:	e1 e0       	ldi	r30, 0x01	; 1
    6e88:	40 17       	cp	r20, r16
    6e8a:	08 f4       	brcc	.+2      	; 0x6e8e <handleSoftAcceleration+0x25e>
    6e8c:	15 cf       	rjmp	.-470    	; 0x6cb8 <handleSoftAcceleration+0x88>
    6e8e:	ef cf       	rjmp	.-34     	; 0x6e6e <handleSoftAcceleration+0x23e>
    6e90:	f0 e0       	ldi	r31, 0x00	; 0
    6e92:	fe 2e       	mov	r15, r30
    6e94:	f0 1a       	sub	r15, r16
    6e96:	01 e0       	ldi	r16, 0x01	; 1
    6e98:	ef 15       	cp	r30, r15
    6e9a:	08 f4       	brcc	.+2      	; 0x6e9e <handleSoftAcceleration+0x26e>
    6e9c:	06 cf       	rjmp	.-500    	; 0x6caa <handleSoftAcceleration+0x7a>
    6e9e:	ef cf       	rjmp	.-34     	; 0x6e7e <handleSoftAcceleration+0x24e>
    6ea0:	00 e0       	ldi	r16, 0x00	; 0
    6ea2:	f3 2f       	mov	r31, r19
    6ea4:	fe 1b       	sub	r31, r30
    6ea6:	ef 2f       	mov	r30, r31
    6ea8:	f1 e0       	ldi	r31, 0x01	; 1
    6eaa:	3e 17       	cp	r19, r30
    6eac:	08 f4       	brcc	.+2      	; 0x6eb0 <handleSoftAcceleration+0x280>
    6eae:	f7 ce       	rjmp	.-530    	; 0x6c9e <handleSoftAcceleration+0x6e>
    6eb0:	ef cf       	rjmp	.-34     	; 0x6e90 <handleSoftAcceleration+0x260>
					if(pwm_intermediate_left_desired < pwm_left_desired) {
						pwm_intermediate_left_desired = pwm_left_desired;
					}					
				}
			} else {
				pwm_intermediate_right_desired = pwm_right_desired;
    6eb2:	80 91 09 03 	lds	r24, 0x0309
    6eb6:	90 91 0a 03 	lds	r25, 0x030A
    6eba:	90 93 0e 03 	sts	0x030E, r25
    6ebe:	80 93 0d 03 	sts	0x030D, r24
				pwm_intermediate_left_desired = pwm_left_desired;
    6ec2:	80 91 0b 03 	lds	r24, 0x030B
    6ec6:	90 91 0c 03 	lds	r25, 0x030C
    6eca:	90 93 10 03 	sts	0x0310, r25
    6ece:	80 93 0f 03 	sts	0x030F, r24
    6ed2:	b9 ce       	rjmp	.-654    	; 0x6c46 <handleSoftAcceleration+0x16>
			speedStepCounter = getTime100MicroSec();

			if(softAccEnabled) {
				if(pwm_right_desired == 0) {
					pwm_intermediate_right_desired = 0;
				} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
    6ed4:	20 91 0d 03 	lds	r18, 0x030D
    6ed8:	30 91 0e 03 	lds	r19, 0x030E
    6edc:	28 9f       	mul	r18, r24
    6ede:	a0 01       	movw	r20, r0
    6ee0:	29 9f       	mul	r18, r25
    6ee2:	50 0d       	add	r21, r0
    6ee4:	38 9f       	mul	r19, r24
    6ee6:	50 0d       	add	r21, r0
    6ee8:	11 24       	eor	r1, r1
    6eea:	57 fd       	sbrc	r21, 7
    6eec:	54 cf       	rjmp	.-344    	; 0x6d96 <handleSoftAcceleration+0x166>
					pwm_intermediate_right_desired = 0;
				} else if(pwm_right_desired > pwm_intermediate_right_desired) {
    6eee:	28 17       	cp	r18, r24
    6ef0:	39 07       	cpc	r19, r25
    6ef2:	3c f5       	brge	.+78     	; 0x6f42 <handleSoftAcceleration+0x312>
					pwm_intermediate_right_desired += speedStep;
    6ef4:	40 91 17 02 	lds	r20, 0x0217
    6ef8:	24 0f       	add	r18, r20
    6efa:	31 1d       	adc	r19, r1
    6efc:	30 93 0e 03 	sts	0x030E, r19
    6f00:	20 93 0d 03 	sts	0x030D, r18
					if(pwm_intermediate_right_desired > pwm_right_desired) {
    6f04:	82 17       	cp	r24, r18
    6f06:	93 07       	cpc	r25, r19
    6f08:	0c f0       	brlt	.+2      	; 0x6f0c <handleSoftAcceleration+0x2dc>
    6f0a:	49 cf       	rjmp	.-366    	; 0x6d9e <handleSoftAcceleration+0x16e>
						pwm_intermediate_right_desired = pwm_right_desired;
					}
				} else if(pwm_right_desired < pwm_intermediate_right_desired) {
					pwm_intermediate_right_desired -= speedStep;
					if(pwm_intermediate_right_desired < pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
    6f0c:	90 93 0e 03 	sts	0x030E, r25
    6f10:	80 93 0d 03 	sts	0x030D, r24
    6f14:	44 cf       	rjmp	.-376    	; 0x6d9e <handleSoftAcceleration+0x16e>
				}
	
				if(pwm_left_desired == 0) {
					pwm_intermediate_left_desired = 0;
				} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
					pwm_intermediate_left_desired = 0;
    6f16:	10 92 10 03 	sts	0x0310, r1
    6f1a:	10 92 0f 03 	sts	0x030F, r1
    6f1e:	93 ce       	rjmp	.-730    	; 0x6c46 <handleSoftAcceleration+0x16>
				} else if(pwm_left_desired > pwm_intermediate_left_desired) {
					pwm_intermediate_left_desired += speedStep;
					if(pwm_intermediate_left_desired > pwm_left_desired) {
						pwm_intermediate_left_desired = pwm_left_desired;
					}
				} else if(pwm_left_desired < pwm_intermediate_left_desired) {
    6f20:	82 17       	cp	r24, r18
    6f22:	93 07       	cpc	r25, r19
    6f24:	0c f0       	brlt	.+2      	; 0x6f28 <handleSoftAcceleration+0x2f8>
    6f26:	8f ce       	rjmp	.-738    	; 0x6c46 <handleSoftAcceleration+0x16>
					pwm_intermediate_left_desired -= speedStep;
    6f28:	40 91 17 02 	lds	r20, 0x0217
    6f2c:	24 1b       	sub	r18, r20
    6f2e:	31 09       	sbc	r19, r1
    6f30:	30 93 10 03 	sts	0x0310, r19
    6f34:	20 93 0f 03 	sts	0x030F, r18
					if(pwm_intermediate_left_desired < pwm_left_desired) {
    6f38:	28 17       	cp	r18, r24
    6f3a:	39 07       	cpc	r19, r25
    6f3c:	0c f0       	brlt	.+2      	; 0x6f40 <handleSoftAcceleration+0x310>
    6f3e:	83 ce       	rjmp	.-762    	; 0x6c46 <handleSoftAcceleration+0x16>
    6f40:	c4 cf       	rjmp	.-120    	; 0x6eca <handleSoftAcceleration+0x29a>
				} else if(pwm_right_desired > pwm_intermediate_right_desired) {
					pwm_intermediate_right_desired += speedStep;
					if(pwm_intermediate_right_desired > pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
					}
				} else if(pwm_right_desired < pwm_intermediate_right_desired) {
    6f42:	82 17       	cp	r24, r18
    6f44:	93 07       	cpc	r25, r19
    6f46:	0c f0       	brlt	.+2      	; 0x6f4a <handleSoftAcceleration+0x31a>
    6f48:	2a cf       	rjmp	.-428    	; 0x6d9e <handleSoftAcceleration+0x16e>
					pwm_intermediate_right_desired -= speedStep;
    6f4a:	40 91 17 02 	lds	r20, 0x0217
    6f4e:	24 1b       	sub	r18, r20
    6f50:	31 09       	sbc	r19, r1
    6f52:	30 93 0e 03 	sts	0x030E, r19
    6f56:	20 93 0d 03 	sts	0x030D, r18
					if(pwm_intermediate_right_desired < pwm_right_desired) {
    6f5a:	28 17       	cp	r18, r24
    6f5c:	39 07       	cpc	r19, r25
    6f5e:	0c f0       	brlt	.+2      	; 0x6f62 <handleSoftAcceleration+0x332>
    6f60:	1e cf       	rjmp	.-452    	; 0x6d9e <handleSoftAcceleration+0x16e>
    6f62:	d4 cf       	rjmp	.-88     	; 0x6f0c <handleSoftAcceleration+0x2dc>

00006f64 <handleMotorsWithSpeedController>:
		OCR4B = 0;
	}

}

void handleMotorsWithSpeedController() {
    6f64:	2f 92       	push	r2
    6f66:	3f 92       	push	r3
    6f68:	4f 92       	push	r4
    6f6a:	5f 92       	push	r5
    6f6c:	6f 92       	push	r6
    6f6e:	7f 92       	push	r7
    6f70:	8f 92       	push	r8
    6f72:	9f 92       	push	r9
    6f74:	af 92       	push	r10
    6f76:	bf 92       	push	r11
    6f78:	cf 92       	push	r12
    6f7a:	df 92       	push	r13
    6f7c:	ef 92       	push	r14
    6f7e:	ff 92       	push	r15
    6f80:	0f 93       	push	r16
    6f82:	1f 93       	push	r17

	handleSoftAcceleration();
    6f84:	0e 94 18 36 	call	0x6c30	; 0x6c30 <handleSoftAcceleration>

	if(calibrateOdomFlag==1) {
    6f88:	80 91 82 05 	lds	r24, 0x0582
    6f8c:	81 30       	cpi	r24, 0x01	; 1
    6f8e:	09 f4       	brne	.+2      	; 0x6f92 <handleMotorsWithSpeedController+0x2e>
    6f90:	50 c2       	rjmp	.+1184   	; 0x7432 <handleMotorsWithSpeedController+0x4ce>
		pwm_right_working = pwm_intermediate_right_desired;
		pwm_left_working = pwm_intermediate_left_desired;
	} else {
		if(pwm_intermediate_right_desired >= 0) {		// pwm in the range -127..127
    6f92:	80 91 0d 03 	lds	r24, 0x030D
    6f96:	90 91 0e 03 	lds	r25, 0x030E
    6f9a:	97 fd       	sbrc	r25, 7
    6f9c:	c2 c2       	rjmp	.+1412   	; 0x7522 <handleMotorsWithSpeedController+0x5be>
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_FW_SC);
    6f9e:	61 e0       	ldi	r22, 0x01	; 1
    6fa0:	0e 94 2b 2c 	call	0x5856	; 0x5856 <getInputFromSpeed>
    6fa4:	90 93 1e 03 	sts	0x031E, r25
    6fa8:	80 93 1d 03 	sts	0x031D, r24
		} else {
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_BW_SC);
		}
		if(pwm_intermediate_left_desired >= 0) {		// pwm in the range -127..127
    6fac:	80 91 0f 03 	lds	r24, 0x030F
    6fb0:	90 91 10 03 	lds	r25, 0x0310
    6fb4:	97 fd       	sbrc	r25, 7
    6fb6:	ad c2       	rjmp	.+1370   	; 0x7512 <handleMotorsWithSpeedController+0x5ae>
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_FW_SC);
    6fb8:	60 e0       	ldi	r22, 0x00	; 0
    6fba:	0e 94 2b 2c 	call	0x5856	; 0x5856 <getInputFromSpeed>
    6fbe:	90 93 20 03 	sts	0x0320, r25
    6fc2:	80 93 1f 03 	sts	0x031F, r24
		} else {
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_BW_SC);
		}
	}

	if(obstacleAvoidanceEnabled) {
    6fc6:	20 91 88 04 	lds	r18, 0x0488
    6fca:	22 23       	and	r18, r18
    6fcc:	09 f0       	breq	.+2      	; 0x6fd0 <handleMotorsWithSpeedController+0x6c>
    6fce:	26 c2       	rjmp	.+1100   	; 0x741c <handleMotorsWithSpeedController+0x4b8>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
	}
	pwm_left_desired_to_control = pwm_left_working;
    6fd0:	90 93 fc 02 	sts	0x02FC, r25
    6fd4:	80 93 fb 02 	sts	0x02FB, r24
	pwm_right_desired_to_control = pwm_right_working;
    6fd8:	80 91 1d 03 	lds	r24, 0x031D
    6fdc:	90 91 1e 03 	lds	r25, 0x031E
    6fe0:	90 93 fa 02 	sts	0x02FA, r25
    6fe4:	80 93 f9 02 	sts	0x02F9, r24

	if(compute_left_vel) {
    6fe8:	80 91 07 02 	lds	r24, 0x0207
    6fec:	88 23       	and	r24, r24
    6fee:	09 f4       	brne	.+2      	; 0x6ff2 <handleMotorsWithSpeedController+0x8e>
    6ff0:	a7 c0       	rjmp	.+334    	; 0x7140 <handleMotorsWithSpeedController+0x1dc>

		last_left_vel = left_vel_sum>>2;
    6ff2:	20 91 fd 02 	lds	r18, 0x02FD
    6ff6:	30 91 fe 02 	lds	r19, 0x02FE
    6ffa:	36 95       	lsr	r19
    6ffc:	27 95       	ror	r18
    6ffe:	36 95       	lsr	r19
    7000:	27 95       	ror	r18
    7002:	30 93 02 03 	sts	0x0302, r19
    7006:	20 93 01 03 	sts	0x0301, r18
		compute_left_vel = 0;
    700a:	10 92 07 02 	sts	0x0207, r1
		left_vel_sum = 0;
    700e:	10 92 fe 02 	sts	0x02FE, r1
    7012:	10 92 fd 02 	sts	0x02FD, r1
		
		if(calibrateOdomFlag==1) {
    7016:	80 91 82 05 	lds	r24, 0x0582
    701a:	81 30       	cpi	r24, 0x01	; 1
    701c:	09 f4       	brne	.+2      	; 0x7020 <handleMotorsWithSpeedController+0xbc>
    701e:	30 c2       	rjmp	.+1120   	; 0x7480 <handleMotorsWithSpeedController+0x51c>
			leftSpeedSumOdom += last_left_vel;
			leftSumCount++;
		}

		getLeftSpeedFromInput();	// get speed in mm/s
    7020:	0e 94 ee 31 	call	0x63dc	; 0x63dc <getLeftSpeedFromInput>
		leftDistPrev = leftDist;
    7024:	80 91 af 04 	lds	r24, 0x04AF
    7028:	90 91 b0 04 	lds	r25, 0x04B0
    702c:	a0 91 b1 04 	lds	r26, 0x04B1
    7030:	b0 91 b2 04 	lds	r27, 0x04B2
    7034:	80 93 b7 04 	sts	0x04B7, r24
    7038:	90 93 b8 04 	sts	0x04B8, r25
    703c:	a0 93 b9 04 	sts	0x04B9, r26
    7040:	b0 93 ba 04 	sts	0x04BA, r27
		//timeOdometry = getTime100MicroSec()-timeLeftOdom;
		leftDist += ((float)speedLeftFromEnc*((float)(getTime100MicroSec()-timeLeftOdom)*104.0))/1000000.0;	// distance in mm				
    7044:	60 91 d4 04 	lds	r22, 0x04D4
    7048:	70 91 d5 04 	lds	r23, 0x04D5
    704c:	88 27       	eor	r24, r24
    704e:	77 fd       	sbrc	r23, 7
    7050:	80 95       	com	r24
    7052:	98 2f       	mov	r25, r24
    7054:	0e 94 d2 56 	call	0xada4	; 0xada4 <__floatsisf>
    7058:	7b 01       	movw	r14, r22
    705a:	8c 01       	movw	r16, r24
    705c:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
    7060:	20 91 d8 04 	lds	r18, 0x04D8
    7064:	30 91 d9 04 	lds	r19, 0x04D9
    7068:	40 91 da 04 	lds	r20, 0x04DA
    706c:	50 91 db 04 	lds	r21, 0x04DB
    7070:	62 1b       	sub	r22, r18
    7072:	73 0b       	sbc	r23, r19
    7074:	84 0b       	sbc	r24, r20
    7076:	95 0b       	sbc	r25, r21
    7078:	0e 94 d0 56 	call	0xada0	; 0xada0 <__floatunsisf>
    707c:	20 e0       	ldi	r18, 0x00	; 0
    707e:	30 e0       	ldi	r19, 0x00	; 0
    7080:	40 ed       	ldi	r20, 0xD0	; 208
    7082:	52 e4       	ldi	r21, 0x42	; 66
    7084:	0e 94 eb 57 	call	0xafd6	; 0xafd6 <__mulsf3>
    7088:	9b 01       	movw	r18, r22
    708a:	ac 01       	movw	r20, r24
    708c:	c8 01       	movw	r24, r16
    708e:	b7 01       	movw	r22, r14
    7090:	0e 94 eb 57 	call	0xafd6	; 0xafd6 <__mulsf3>
    7094:	20 e0       	ldi	r18, 0x00	; 0
    7096:	34 e2       	ldi	r19, 0x24	; 36
    7098:	44 e7       	ldi	r20, 0x74	; 116
    709a:	59 e4       	ldi	r21, 0x49	; 73
    709c:	0e 94 37 56 	call	0xac6e	; 0xac6e <__divsf3>
    70a0:	9b 01       	movw	r18, r22
    70a2:	ac 01       	movw	r20, r24
    70a4:	60 91 af 04 	lds	r22, 0x04AF
    70a8:	70 91 b0 04 	lds	r23, 0x04B0
    70ac:	80 91 b1 04 	lds	r24, 0x04B1
    70b0:	90 91 b2 04 	lds	r25, 0x04B2
    70b4:	0e 94 6a 55 	call	0xaad4	; 0xaad4 <__addsf3>
    70b8:	60 93 af 04 	sts	0x04AF, r22
    70bc:	70 93 b0 04 	sts	0x04B0, r23
    70c0:	80 93 b1 04 	sts	0x04B1, r24
    70c4:	90 93 b2 04 	sts	0x04B2, r25
		timeLeftOdom = getTime100MicroSec();
    70c8:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
    70cc:	60 93 d8 04 	sts	0x04D8, r22
    70d0:	70 93 d9 04 	sts	0x04D9, r23
    70d4:	80 93 da 04 	sts	0x04DA, r24
    70d8:	90 93 db 04 	sts	0x04DB, r25
		leftMotSteps = (signed long int)leftDist;
    70dc:	60 91 af 04 	lds	r22, 0x04AF
    70e0:	70 91 b0 04 	lds	r23, 0x04B0
    70e4:	80 91 b1 04 	lds	r24, 0x04B1
    70e8:	90 91 b2 04 	lds	r25, 0x04B2
    70ec:	0e 94 9f 56 	call	0xad3e	; 0xad3e <__fixsfsi>
    70f0:	0e 94 d2 56 	call	0xada4	; 0xada4 <__floatsisf>
    70f4:	60 93 e5 02 	sts	0x02E5, r22
    70f8:	70 93 e6 02 	sts	0x02E6, r23
    70fc:	80 93 e7 02 	sts	0x02E7, r24
    7100:	90 93 e8 02 	sts	0x02E8, r25
		} else {
			leftMotSteps -= ((float)(last_left_vel>>3))*(LEFT_ENC_OFFSET-ENC_SLOPE*((float)(last_left_vel>>2)))/1000.0;
		}

*/
		if(robotPosition == HORIZONTAL_POS) {
    7104:	80 91 16 02 	lds	r24, 0x0216
    7108:	81 30       	cpi	r24, 0x01	; 1
    710a:	09 f4       	brne	.+2      	; 0x710e <handleMotorsWithSpeedController+0x1aa>
    710c:	db c1       	rjmp	.+950    	; 0x74c4 <handleMotorsWithSpeedController+0x560>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_left(&pwm_left_working);
			//PORTB |= (1 << 5);
		} else {
			//PORTB &= ~(1 << 6);
			start_vertical_speed_control_left(&pwm_left_working);
    710e:	8f e1       	ldi	r24, 0x1F	; 31
    7110:	93 e0       	ldi	r25, 0x03	; 3
    7112:	0e 94 1a 18 	call	0x3034	; 0x3034 <start_vertical_speed_control_left>
			//PORTB |= (1 << 6);
		}

		pwm_left = pwm_left_working;
    7116:	80 91 1f 03 	lds	r24, 0x031F
    711a:	90 91 20 03 	lds	r25, 0x0320
    711e:	90 93 08 03 	sts	0x0308, r25
    7122:	80 93 07 03 	sts	0x0307, r24

		if(pwm_left > 0) {
    7126:	18 16       	cp	r1, r24
    7128:	19 06       	cpc	r1, r25
    712a:	0c f0       	brlt	.+2      	; 0x712e <handleMotorsWithSpeedController+0x1ca>
    712c:	0d c2       	rjmp	.+1050   	; 0x7548 <handleMotorsWithSpeedController+0x5e4>
			OCR4A = (unsigned int)pwm_left;
    712e:	90 93 a9 00 	sts	0x00A9, r25
    7132:	80 93 a8 00 	sts	0x00A8, r24
		} else {
			OCR4A = 0;
			OCR4B = 0;
		}

		computeOdometry++;
    7136:	80 91 bf 04 	lds	r24, 0x04BF
    713a:	8f 5f       	subi	r24, 0xFF	; 255
    713c:	80 93 bf 04 	sts	0x04BF, r24

	}

	if(compute_right_vel) {
    7140:	80 91 08 02 	lds	r24, 0x0208
    7144:	88 23       	and	r24, r24
    7146:	09 f0       	breq	.+2      	; 0x714a <handleMotorsWithSpeedController+0x1e6>
    7148:	c1 c0       	rjmp	.+386    	; 0x72cc <handleMotorsWithSpeedController+0x368>
    714a:	80 91 bf 04 	lds	r24, 0x04BF

		computeOdometry++;

	}

	if(computeOdometry>=2) {	// compute odometry when we get the last encoders values for both wheels
    714e:	82 30       	cpi	r24, 0x02	; 2
    7150:	08 f4       	brcc	.+2      	; 0x7154 <handleMotorsWithSpeedController+0x1f0>
    7152:	ab c0       	rjmp	.+342    	; 0x72aa <handleMotorsWithSpeedController+0x346>

		// the odometry computation takes about 1 ms

		computeOdometry = 0;
    7154:	10 92 bf 04 	sts	0x04BF, r1

		deltaDist = ((rightDist-rightDistPrev)+(leftDist-leftDistPrev))/2.0;
    7158:	60 90 b3 04 	lds	r6, 0x04B3
    715c:	70 90 b4 04 	lds	r7, 0x04B4
    7160:	80 90 b5 04 	lds	r8, 0x04B5
    7164:	90 90 b6 04 	lds	r9, 0x04B6
    7168:	20 90 af 04 	lds	r2, 0x04AF
    716c:	30 90 b0 04 	lds	r3, 0x04B0
    7170:	40 90 b1 04 	lds	r4, 0x04B1
    7174:	50 90 b2 04 	lds	r5, 0x04B2
    7178:	c4 01       	movw	r24, r8
    717a:	b3 01       	movw	r22, r6
    717c:	20 91 bb 04 	lds	r18, 0x04BB
    7180:	30 91 bc 04 	lds	r19, 0x04BC
    7184:	40 91 bd 04 	lds	r20, 0x04BD
    7188:	50 91 be 04 	lds	r21, 0x04BE
    718c:	0e 94 69 55 	call	0xaad2	; 0xaad2 <__subsf3>
    7190:	7b 01       	movw	r14, r22
    7192:	8c 01       	movw	r16, r24
    7194:	c2 01       	movw	r24, r4
    7196:	b1 01       	movw	r22, r2
    7198:	20 91 b7 04 	lds	r18, 0x04B7
    719c:	30 91 b8 04 	lds	r19, 0x04B8
    71a0:	40 91 b9 04 	lds	r20, 0x04B9
    71a4:	50 91 ba 04 	lds	r21, 0x04BA
    71a8:	0e 94 69 55 	call	0xaad2	; 0xaad2 <__subsf3>
    71ac:	9b 01       	movw	r18, r22
    71ae:	ac 01       	movw	r20, r24
    71b0:	c8 01       	movw	r24, r16
    71b2:	b7 01       	movw	r22, r14
    71b4:	0e 94 6a 55 	call	0xaad4	; 0xaad4 <__addsf3>
    71b8:	20 e0       	ldi	r18, 0x00	; 0
    71ba:	30 e0       	ldi	r19, 0x00	; 0
    71bc:	40 e0       	ldi	r20, 0x00	; 0
    71be:	5f e3       	ldi	r21, 0x3F	; 63
    71c0:	0e 94 eb 57 	call	0xafd6	; 0xafd6 <__mulsf3>
    71c4:	d6 2e       	mov	r13, r22
    71c6:	c7 2e       	mov	r12, r23
    71c8:	b8 2e       	mov	r11, r24
    71ca:	a9 2e       	mov	r10, r25
    71cc:	a6 01       	movw	r20, r12
    71ce:	95 01       	movw	r18, r10
    71d0:	85 2f       	mov	r24, r21
    71d2:	94 2f       	mov	r25, r20
    71d4:	a3 2f       	mov	r26, r19
    71d6:	b2 2f       	mov	r27, r18
    71d8:	80 93 9b 04 	sts	0x049B, r24
    71dc:	90 93 9c 04 	sts	0x049C, r25
    71e0:	a0 93 9d 04 	sts	0x049D, r26
    71e4:	b0 93 9e 04 	sts	0x049E, r27

		if(robotPosition == HORIZONTAL_POS) {
    71e8:	80 91 16 02 	lds	r24, 0x0216
    71ec:	81 30       	cpi	r24, 0x01	; 1
    71ee:	09 f4       	brne	.+2      	; 0x71f2 <handleMotorsWithSpeedController+0x28e>
    71f0:	31 c1       	rjmp	.+610    	; 0x7454 <handleMotorsWithSpeedController+0x4f0>
			//thetaOld = (rightMotSteps - leftMotSteps)/WHEEL_DIST;	// radians
			theta = (rightDist-leftDist)/WHEEL_DIST;
		} else {
			//thetaOld = thetaAcc;
			theta = thetaAcc;
    71f2:	f0 90 c0 04 	lds	r15, 0x04C0
    71f6:	00 91 c1 04 	lds	r16, 0x04C1
    71fa:	10 91 c2 04 	lds	r17, 0x04C2
    71fe:	e0 90 c3 04 	lds	r14, 0x04C3
    7202:	8f 2d       	mov	r24, r15
    7204:	90 2f       	mov	r25, r16
    7206:	a1 2f       	mov	r26, r17
    7208:	be 2d       	mov	r27, r14
    720a:	80 93 8b 04 	sts	0x048B, r24
    720e:	90 93 8c 04 	sts	0x048C, r25
    7212:	a0 93 8d 04 	sts	0x048D, r26
    7216:	b0 93 8e 04 	sts	0x048E, r27
		}

		//deltaDistOld = ((rightMotSteps-rightMotStepsOld)+(leftMotSteps-leftMotStepsOld))/2.0;

		xPos = xPos + cos(theta)*deltaDist;				
    721a:	6f 2d       	mov	r22, r15
    721c:	70 2f       	mov	r23, r16
    721e:	81 2f       	mov	r24, r17
    7220:	9e 2d       	mov	r25, r14
    7222:	0e 94 34 56 	call	0xac68	; 0xac68 <cos>
    7226:	9b 01       	movw	r18, r22
    7228:	ac 01       	movw	r20, r24
    722a:	d6 01       	movw	r26, r12
    722c:	f5 01       	movw	r30, r10
    722e:	6b 2f       	mov	r22, r27
    7230:	7c 2d       	mov	r23, r12
    7232:	8f 2f       	mov	r24, r31
    7234:	9a 2d       	mov	r25, r10
    7236:	0e 94 eb 57 	call	0xafd6	; 0xafd6 <__mulsf3>
    723a:	9b 01       	movw	r18, r22
    723c:	ac 01       	movw	r20, r24
    723e:	60 91 93 04 	lds	r22, 0x0493
    7242:	70 91 94 04 	lds	r23, 0x0494
    7246:	80 91 95 04 	lds	r24, 0x0495
    724a:	90 91 96 04 	lds	r25, 0x0496
    724e:	0e 94 6a 55 	call	0xaad4	; 0xaad4 <__addsf3>
    7252:	60 93 93 04 	sts	0x0493, r22
    7256:	70 93 94 04 	sts	0x0494, r23
    725a:	80 93 95 04 	sts	0x0495, r24
    725e:	90 93 96 04 	sts	0x0496, r25
		yPos = yPos + sin(theta)*deltaDist;
    7262:	6f 2d       	mov	r22, r15
    7264:	70 2f       	mov	r23, r16
    7266:	81 2f       	mov	r24, r17
    7268:	9e 2d       	mov	r25, r14
    726a:	0e 94 4e 58 	call	0xb09c	; 0xb09c <sin>
    726e:	9b 01       	movw	r18, r22
    7270:	ac 01       	movw	r20, r24
    7272:	d6 01       	movw	r26, r12
    7274:	f5 01       	movw	r30, r10
    7276:	6b 2f       	mov	r22, r27
    7278:	7c 2d       	mov	r23, r12
    727a:	8f 2f       	mov	r24, r31
    727c:	9a 2d       	mov	r25, r10
    727e:	0e 94 eb 57 	call	0xafd6	; 0xafd6 <__mulsf3>
    7282:	9b 01       	movw	r18, r22
    7284:	ac 01       	movw	r20, r24
    7286:	60 91 97 04 	lds	r22, 0x0497
    728a:	70 91 98 04 	lds	r23, 0x0498
    728e:	80 91 99 04 	lds	r24, 0x0499
    7292:	90 91 9a 04 	lds	r25, 0x049A
    7296:	0e 94 6a 55 	call	0xaad4	; 0xaad4 <__addsf3>
    729a:	60 93 97 04 	sts	0x0497, r22
    729e:	70 93 98 04 	sts	0x0498, r23
    72a2:	80 93 99 04 	sts	0x0499, r24
    72a6:	90 93 9a 04 	sts	0x049A, r25
		//xPosOld = xPosOld + cos(thetaOld)*deltaDistOld;				
		//yPosOld = yPosOld + sin(thetaOld)*deltaDistOld;

	}

}
    72aa:	1f 91       	pop	r17
    72ac:	0f 91       	pop	r16
    72ae:	ff 90       	pop	r15
    72b0:	ef 90       	pop	r14
    72b2:	df 90       	pop	r13
    72b4:	cf 90       	pop	r12
    72b6:	bf 90       	pop	r11
    72b8:	af 90       	pop	r10
    72ba:	9f 90       	pop	r9
    72bc:	8f 90       	pop	r8
    72be:	7f 90       	pop	r7
    72c0:	6f 90       	pop	r6
    72c2:	5f 90       	pop	r5
    72c4:	4f 90       	pop	r4
    72c6:	3f 90       	pop	r3
    72c8:	2f 90       	pop	r2
    72ca:	08 95       	ret

	}

	if(compute_right_vel) {

		last_right_vel = right_vel_sum>>2;
    72cc:	20 91 ff 02 	lds	r18, 0x02FF
    72d0:	30 91 00 03 	lds	r19, 0x0300
    72d4:	36 95       	lsr	r19
    72d6:	27 95       	ror	r18
    72d8:	36 95       	lsr	r19
    72da:	27 95       	ror	r18
    72dc:	30 93 04 03 	sts	0x0304, r19
    72e0:	20 93 03 03 	sts	0x0303, r18
		compute_right_vel = 0;
    72e4:	10 92 08 02 	sts	0x0208, r1
		right_vel_sum = 0;
    72e8:	10 92 00 03 	sts	0x0300, r1
    72ec:	10 92 ff 02 	sts	0x02FF, r1

		if(calibrateOdomFlag==1) {
    72f0:	80 91 82 05 	lds	r24, 0x0582
    72f4:	81 30       	cpi	r24, 0x01	; 1
    72f6:	09 f4       	brne	.+2      	; 0x72fa <handleMotorsWithSpeedController+0x396>
    72f8:	ea c0       	rjmp	.+468    	; 0x74ce <handleMotorsWithSpeedController+0x56a>
			rightSpeedSumOdom += last_right_vel;
			rightSumCount++;
		}

		getRightSpeedFromInput();
    72fa:	0e 94 93 2f 	call	0x5f26	; 0x5f26 <getRightSpeedFromInput>
		rightDistPrev = rightDist;
    72fe:	80 91 b3 04 	lds	r24, 0x04B3
    7302:	90 91 b4 04 	lds	r25, 0x04B4
    7306:	a0 91 b5 04 	lds	r26, 0x04B5
    730a:	b0 91 b6 04 	lds	r27, 0x04B6
    730e:	80 93 bb 04 	sts	0x04BB, r24
    7312:	90 93 bc 04 	sts	0x04BC, r25
    7316:	a0 93 bd 04 	sts	0x04BD, r26
    731a:	b0 93 be 04 	sts	0x04BE, r27
		rightDist += ((float)speedRightFromEnc*((float)(getTime100MicroSec()-timeRightOdom)*104.0))/1000000.0;	// distance in mm				
    731e:	60 91 d6 04 	lds	r22, 0x04D6
    7322:	70 91 d7 04 	lds	r23, 0x04D7
    7326:	88 27       	eor	r24, r24
    7328:	77 fd       	sbrc	r23, 7
    732a:	80 95       	com	r24
    732c:	98 2f       	mov	r25, r24
    732e:	0e 94 d2 56 	call	0xada4	; 0xada4 <__floatsisf>
    7332:	7b 01       	movw	r14, r22
    7334:	8c 01       	movw	r16, r24
    7336:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
    733a:	20 91 dc 04 	lds	r18, 0x04DC
    733e:	30 91 dd 04 	lds	r19, 0x04DD
    7342:	40 91 de 04 	lds	r20, 0x04DE
    7346:	50 91 df 04 	lds	r21, 0x04DF
    734a:	62 1b       	sub	r22, r18
    734c:	73 0b       	sbc	r23, r19
    734e:	84 0b       	sbc	r24, r20
    7350:	95 0b       	sbc	r25, r21
    7352:	0e 94 d0 56 	call	0xada0	; 0xada0 <__floatunsisf>
    7356:	20 e0       	ldi	r18, 0x00	; 0
    7358:	30 e0       	ldi	r19, 0x00	; 0
    735a:	40 ed       	ldi	r20, 0xD0	; 208
    735c:	52 e4       	ldi	r21, 0x42	; 66
    735e:	0e 94 eb 57 	call	0xafd6	; 0xafd6 <__mulsf3>
    7362:	9b 01       	movw	r18, r22
    7364:	ac 01       	movw	r20, r24
    7366:	c8 01       	movw	r24, r16
    7368:	b7 01       	movw	r22, r14
    736a:	0e 94 eb 57 	call	0xafd6	; 0xafd6 <__mulsf3>
    736e:	20 e0       	ldi	r18, 0x00	; 0
    7370:	34 e2       	ldi	r19, 0x24	; 36
    7372:	44 e7       	ldi	r20, 0x74	; 116
    7374:	59 e4       	ldi	r21, 0x49	; 73
    7376:	0e 94 37 56 	call	0xac6e	; 0xac6e <__divsf3>
    737a:	9b 01       	movw	r18, r22
    737c:	ac 01       	movw	r20, r24
    737e:	60 91 b3 04 	lds	r22, 0x04B3
    7382:	70 91 b4 04 	lds	r23, 0x04B4
    7386:	80 91 b5 04 	lds	r24, 0x04B5
    738a:	90 91 b6 04 	lds	r25, 0x04B6
    738e:	0e 94 6a 55 	call	0xaad4	; 0xaad4 <__addsf3>
    7392:	60 93 b3 04 	sts	0x04B3, r22
    7396:	70 93 b4 04 	sts	0x04B4, r23
    739a:	80 93 b5 04 	sts	0x04B5, r24
    739e:	90 93 b6 04 	sts	0x04B6, r25
		timeRightOdom = getTime100MicroSec();
    73a2:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
    73a6:	60 93 dc 04 	sts	0x04DC, r22
    73aa:	70 93 dd 04 	sts	0x04DD, r23
    73ae:	80 93 de 04 	sts	0x04DE, r24
    73b2:	90 93 df 04 	sts	0x04DF, r25
		rightMotSteps = (signed long int)rightDist;
    73b6:	60 91 b3 04 	lds	r22, 0x04B3
    73ba:	70 91 b4 04 	lds	r23, 0x04B4
    73be:	80 91 b5 04 	lds	r24, 0x04B5
    73c2:	90 91 b6 04 	lds	r25, 0x04B6
    73c6:	0e 94 9f 56 	call	0xad3e	; 0xad3e <__fixsfsi>
    73ca:	0e 94 d2 56 	call	0xada4	; 0xada4 <__floatsisf>
    73ce:	60 93 e1 02 	sts	0x02E1, r22
    73d2:	70 93 e2 02 	sts	0x02E2, r23
    73d6:	80 93 e3 02 	sts	0x02E3, r24
    73da:	90 93 e4 02 	sts	0x02E4, r25
		} else {
			rightMotSteps -= ((float)(last_right_vel>>3))*(RIGHT_ENC_OFFSET-ENC_SLOPE*((float)(last_right_vel>>2)))/1000.0;
		}
*/

		if(robotPosition == HORIZONTAL_POS) {
    73de:	80 91 16 02 	lds	r24, 0x0216
    73e2:	81 30       	cpi	r24, 0x01	; 1
    73e4:	09 f4       	brne	.+2      	; 0x73e8 <handleMotorsWithSpeedController+0x484>
    73e6:	47 c0       	rjmp	.+142    	; 0x7476 <handleMotorsWithSpeedController+0x512>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_right(&pwm_right_working);
			//PORTB |= (1 << 5);
		} else {
			//PORTB &= ~(1 << 6);
			start_vertical_speed_control_right(&pwm_right_working);
    73e8:	8d e1       	ldi	r24, 0x1D	; 29
    73ea:	93 e0       	ldi	r25, 0x03	; 3
    73ec:	0e 94 b8 19 	call	0x3370	; 0x3370 <start_vertical_speed_control_right>
			//PORTB |= (1 << 6);
		}

		pwm_right = pwm_right_working;
    73f0:	80 91 1d 03 	lds	r24, 0x031D
    73f4:	90 91 1e 03 	lds	r25, 0x031E
    73f8:	90 93 06 03 	sts	0x0306, r25
    73fc:	80 93 05 03 	sts	0x0305, r24

		if(pwm_right > 0) {
    7400:	18 16       	cp	r1, r24
    7402:	19 06       	cpc	r1, r25
    7404:	0c f0       	brlt	.+2      	; 0x7408 <handleMotorsWithSpeedController+0x4a4>
    7406:	95 c0       	rjmp	.+298    	; 0x7532 <handleMotorsWithSpeedController+0x5ce>
			OCR3A = (unsigned int)pwm_right;
    7408:	90 93 99 00 	sts	0x0099, r25
    740c:	80 93 98 00 	sts	0x0098, r24
		} else {
			OCR3A = 0;
			OCR3B = 0;
		}

		computeOdometry++;
    7410:	80 91 bf 04 	lds	r24, 0x04BF
    7414:	8f 5f       	subi	r24, 0xFF	; 255
    7416:	80 93 bf 04 	sts	0x04BF, r24
    741a:	99 ce       	rjmp	.-718    	; 0x714e <handleMotorsWithSpeedController+0x1ea>
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_BW_SC);
		}
	}

	if(obstacleAvoidanceEnabled) {
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
    741c:	8f e1       	ldi	r24, 0x1F	; 31
    741e:	93 e0       	ldi	r25, 0x03	; 3
    7420:	6d e1       	ldi	r22, 0x1D	; 29
    7422:	73 e0       	ldi	r23, 0x03	; 3
    7424:	0e 94 74 3d 	call	0x7ae8	; 0x7ae8 <obstacleAvoidance>
    7428:	80 91 1f 03 	lds	r24, 0x031F
    742c:	90 91 20 03 	lds	r25, 0x0320
    7430:	cf cd       	rjmp	.-1122   	; 0x6fd0 <handleMotorsWithSpeedController+0x6c>
void handleMotorsWithSpeedController() {

	handleSoftAcceleration();

	if(calibrateOdomFlag==1) {
		pwm_right_working = pwm_intermediate_right_desired;
    7432:	80 91 0d 03 	lds	r24, 0x030D
    7436:	90 91 0e 03 	lds	r25, 0x030E
    743a:	90 93 1e 03 	sts	0x031E, r25
    743e:	80 93 1d 03 	sts	0x031D, r24
		pwm_left_working = pwm_intermediate_left_desired;
    7442:	80 91 0f 03 	lds	r24, 0x030F
    7446:	90 91 10 03 	lds	r25, 0x0310
    744a:	90 93 20 03 	sts	0x0320, r25
    744e:	80 93 1f 03 	sts	0x031F, r24
    7452:	b9 cd       	rjmp	.-1166   	; 0x6fc6 <handleMotorsWithSpeedController+0x62>

		deltaDist = ((rightDist-rightDistPrev)+(leftDist-leftDistPrev))/2.0;

		if(robotPosition == HORIZONTAL_POS) {
			//thetaOld = (rightMotSteps - leftMotSteps)/WHEEL_DIST;	// radians
			theta = (rightDist-leftDist)/WHEEL_DIST;
    7454:	c4 01       	movw	r24, r8
    7456:	b3 01       	movw	r22, r6
    7458:	a2 01       	movw	r20, r4
    745a:	91 01       	movw	r18, r2
    745c:	0e 94 69 55 	call	0xaad2	; 0xaad2 <__subsf3>
    7460:	20 e0       	ldi	r18, 0x00	; 0
    7462:	30 e0       	ldi	r19, 0x00	; 0
    7464:	4e e1       	ldi	r20, 0x1E	; 30
    7466:	52 e4       	ldi	r21, 0x42	; 66
    7468:	0e 94 37 56 	call	0xac6e	; 0xac6e <__divsf3>
    746c:	f6 2e       	mov	r15, r22
    746e:	07 2f       	mov	r16, r23
    7470:	18 2f       	mov	r17, r24
    7472:	e9 2e       	mov	r14, r25
    7474:	c6 ce       	rjmp	.-628    	; 0x7202 <handleMotorsWithSpeedController+0x29e>
		}
*/

		if(robotPosition == HORIZONTAL_POS) {
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_right(&pwm_right_working);
    7476:	8d e1       	ldi	r24, 0x1D	; 29
    7478:	93 e0       	ldi	r25, 0x03	; 3
    747a:	0e 94 56 1b 	call	0x36ac	; 0x36ac <start_horizontal_speed_control_right>
    747e:	b8 cf       	rjmp	.-144    	; 0x73f0 <handleMotorsWithSpeedController+0x48c>
		last_left_vel = left_vel_sum>>2;
		compute_left_vel = 0;
		left_vel_sum = 0;
		
		if(calibrateOdomFlag==1) {
			leftSpeedSumOdom += last_left_vel;
    7480:	44 27       	eor	r20, r20
    7482:	37 fd       	sbrc	r19, 7
    7484:	40 95       	com	r20
    7486:	54 2f       	mov	r21, r20
    7488:	80 91 c4 04 	lds	r24, 0x04C4
    748c:	90 91 c5 04 	lds	r25, 0x04C5
    7490:	a0 91 c6 04 	lds	r26, 0x04C6
    7494:	b0 91 c7 04 	lds	r27, 0x04C7
    7498:	82 0f       	add	r24, r18
    749a:	93 1f       	adc	r25, r19
    749c:	a4 1f       	adc	r26, r20
    749e:	b5 1f       	adc	r27, r21
    74a0:	80 93 c4 04 	sts	0x04C4, r24
    74a4:	90 93 c5 04 	sts	0x04C5, r25
    74a8:	a0 93 c6 04 	sts	0x04C6, r26
    74ac:	b0 93 c7 04 	sts	0x04C7, r27
			leftSumCount++;
    74b0:	80 91 cc 04 	lds	r24, 0x04CC
    74b4:	90 91 cd 04 	lds	r25, 0x04CD
    74b8:	01 96       	adiw	r24, 0x01	; 1
    74ba:	90 93 cd 04 	sts	0x04CD, r25
    74be:	80 93 cc 04 	sts	0x04CC, r24
    74c2:	ae cd       	rjmp	.-1188   	; 0x7020 <handleMotorsWithSpeedController+0xbc>
		}

*/
		if(robotPosition == HORIZONTAL_POS) {
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_left(&pwm_left_working);
    74c4:	8f e1       	ldi	r24, 0x1F	; 31
    74c6:	93 e0       	ldi	r25, 0x03	; 3
    74c8:	0e 94 9d 1c 	call	0x393a	; 0x393a <start_horizontal_speed_control_left>
    74cc:	24 ce       	rjmp	.-952    	; 0x7116 <handleMotorsWithSpeedController+0x1b2>
		last_right_vel = right_vel_sum>>2;
		compute_right_vel = 0;
		right_vel_sum = 0;

		if(calibrateOdomFlag==1) {
			rightSpeedSumOdom += last_right_vel;
    74ce:	44 27       	eor	r20, r20
    74d0:	37 fd       	sbrc	r19, 7
    74d2:	40 95       	com	r20
    74d4:	54 2f       	mov	r21, r20
    74d6:	80 91 c8 04 	lds	r24, 0x04C8
    74da:	90 91 c9 04 	lds	r25, 0x04C9
    74de:	a0 91 ca 04 	lds	r26, 0x04CA
    74e2:	b0 91 cb 04 	lds	r27, 0x04CB
    74e6:	82 0f       	add	r24, r18
    74e8:	93 1f       	adc	r25, r19
    74ea:	a4 1f       	adc	r26, r20
    74ec:	b5 1f       	adc	r27, r21
    74ee:	80 93 c8 04 	sts	0x04C8, r24
    74f2:	90 93 c9 04 	sts	0x04C9, r25
    74f6:	a0 93 ca 04 	sts	0x04CA, r26
    74fa:	b0 93 cb 04 	sts	0x04CB, r27
			rightSumCount++;
    74fe:	80 91 ce 04 	lds	r24, 0x04CE
    7502:	90 91 cf 04 	lds	r25, 0x04CF
    7506:	01 96       	adiw	r24, 0x01	; 1
    7508:	90 93 cf 04 	sts	0x04CF, r25
    750c:	80 93 ce 04 	sts	0x04CE, r24
    7510:	f4 ce       	rjmp	.-536    	; 0x72fa <handleMotorsWithSpeedController+0x396>
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_BW_SC);
		}
		if(pwm_intermediate_left_desired >= 0) {		// pwm in the range -127..127
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_FW_SC);
		} else {
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_BW_SC);
    7512:	62 e0       	ldi	r22, 0x02	; 2
    7514:	0e 94 2b 2c 	call	0x5856	; 0x5856 <getInputFromSpeed>
    7518:	90 93 20 03 	sts	0x0320, r25
    751c:	80 93 1f 03 	sts	0x031F, r24
    7520:	52 cd       	rjmp	.-1372   	; 0x6fc6 <handleMotorsWithSpeedController+0x62>
		pwm_left_working = pwm_intermediate_left_desired;
	} else {
		if(pwm_intermediate_right_desired >= 0) {		// pwm in the range -127..127
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_FW_SC);
		} else {
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_BW_SC);
    7522:	63 e0       	ldi	r22, 0x03	; 3
    7524:	0e 94 2b 2c 	call	0x5856	; 0x5856 <getInputFromSpeed>
    7528:	90 93 1e 03 	sts	0x031E, r25
    752c:	80 93 1d 03 	sts	0x031D, r24
    7530:	3d cd       	rjmp	.-1414   	; 0x6fac <handleMotorsWithSpeedController+0x48>

		pwm_right = pwm_right_working;

		if(pwm_right > 0) {
			OCR3A = (unsigned int)pwm_right;
		} else if(pwm_right < 0) {
    7532:	00 97       	sbiw	r24, 0x00	; 0
    7534:	a1 f4       	brne	.+40     	; 0x755e <handleMotorsWithSpeedController+0x5fa>
			OCR3B = (unsigned int)(-pwm_right);
		} else {
			OCR3A = 0;
    7536:	10 92 99 00 	sts	0x0099, r1
    753a:	10 92 98 00 	sts	0x0098, r1
			OCR3B = 0;
    753e:	10 92 9b 00 	sts	0x009B, r1
    7542:	10 92 9a 00 	sts	0x009A, r1
    7546:	64 cf       	rjmp	.-312    	; 0x7410 <handleMotorsWithSpeedController+0x4ac>

		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
    7548:	00 97       	sbiw	r24, 0x00	; 0
    754a:	89 f4       	brne	.+34     	; 0x756e <handleMotorsWithSpeedController+0x60a>
			OCR4B =(unsigned int)( -pwm_left);
		} else {
			OCR4A = 0;
    754c:	10 92 a9 00 	sts	0x00A9, r1
    7550:	10 92 a8 00 	sts	0x00A8, r1
			OCR4B = 0;
    7554:	10 92 ab 00 	sts	0x00AB, r1
    7558:	10 92 aa 00 	sts	0x00AA, r1
    755c:	ec cd       	rjmp	.-1064   	; 0x7136 <handleMotorsWithSpeedController+0x1d2>
		pwm_right = pwm_right_working;

		if(pwm_right > 0) {
			OCR3A = (unsigned int)pwm_right;
		} else if(pwm_right < 0) {
			OCR3B = (unsigned int)(-pwm_right);
    755e:	90 95       	com	r25
    7560:	81 95       	neg	r24
    7562:	9f 4f       	sbci	r25, 0xFF	; 255
    7564:	90 93 9b 00 	sts	0x009B, r25
    7568:	80 93 9a 00 	sts	0x009A, r24
    756c:	51 cf       	rjmp	.-350    	; 0x7410 <handleMotorsWithSpeedController+0x4ac>
		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
			OCR4B =(unsigned int)( -pwm_left);
    756e:	90 95       	com	r25
    7570:	81 95       	neg	r24
    7572:	9f 4f       	sbci	r25, 0xFF	; 255
    7574:	90 93 ab 00 	sts	0x00AB, r25
    7578:	80 93 aa 00 	sts	0x00AA, r24
    757c:	dc cd       	rjmp	.-1096   	; 0x7136 <handleMotorsWithSpeedController+0x1d2>

0000757e <handleMotorsWithNoController>:
    return vel;
}

void handleMotorsWithNoController() {

	handleSoftAcceleration();
    757e:	0e 94 18 36 	call	0x6c30	; 0x6c30 <handleSoftAcceleration>

	// compute velocities even if they aren't used
	if(compute_left_vel) {
    7582:	80 91 07 02 	lds	r24, 0x0207
    7586:	88 23       	and	r24, r24
    7588:	c1 f1       	breq	.+112    	; 0x75fa <handleMotorsWithNoController+0x7c>
		last_left_vel = left_vel_sum>>2;
    758a:	60 91 fd 02 	lds	r22, 0x02FD
    758e:	70 91 fe 02 	lds	r23, 0x02FE
    7592:	76 95       	lsr	r23
    7594:	67 95       	ror	r22
    7596:	76 95       	lsr	r23
    7598:	67 95       	ror	r22
    759a:	70 93 02 03 	sts	0x0302, r23
    759e:	60 93 01 03 	sts	0x0301, r22
		compute_left_vel = 0;
    75a2:	10 92 07 02 	sts	0x0207, r1
		left_vel_sum = 0;
    75a6:	10 92 fe 02 	sts	0x02FE, r1
    75aa:	10 92 fd 02 	sts	0x02FD, r1

		if(pwm_left_desired >= 0) {
    75ae:	80 91 0b 03 	lds	r24, 0x030B
    75b2:	90 91 0c 03 	lds	r25, 0x030C
    75b6:	97 fd       	sbrc	r25, 7
    75b8:	e3 c0       	rjmp	.+454    	; 0x7780 <handleMotorsWithNoController+0x202>
			leftMotSteps += (last_left_vel>>3);
    75ba:	75 95       	asr	r23
    75bc:	67 95       	ror	r22
    75be:	75 95       	asr	r23
    75c0:	67 95       	ror	r22
    75c2:	75 95       	asr	r23
    75c4:	67 95       	ror	r22
    75c6:	88 27       	eor	r24, r24
    75c8:	77 fd       	sbrc	r23, 7
    75ca:	80 95       	com	r24
    75cc:	98 2f       	mov	r25, r24
    75ce:	0e 94 d2 56 	call	0xada4	; 0xada4 <__floatsisf>
    75d2:	9b 01       	movw	r18, r22
    75d4:	ac 01       	movw	r20, r24
    75d6:	60 91 e5 02 	lds	r22, 0x02E5
    75da:	70 91 e6 02 	lds	r23, 0x02E6
    75de:	80 91 e7 02 	lds	r24, 0x02E7
    75e2:	90 91 e8 02 	lds	r25, 0x02E8
    75e6:	0e 94 6a 55 	call	0xaad4	; 0xaad4 <__addsf3>
    75ea:	60 93 e5 02 	sts	0x02E5, r22
    75ee:	70 93 e6 02 	sts	0x02E6, r23
    75f2:	80 93 e7 02 	sts	0x02E7, r24
    75f6:	90 93 e8 02 	sts	0x02E8, r25
		} else {
			leftMotSteps -= (last_left_vel>>3);
		}
	}

	if(compute_right_vel) {
    75fa:	80 91 08 02 	lds	r24, 0x0208
    75fe:	88 23       	and	r24, r24
    7600:	c1 f1       	breq	.+112    	; 0x7672 <handleMotorsWithNoController+0xf4>
		last_right_vel = right_vel_sum>>2;
    7602:	60 91 ff 02 	lds	r22, 0x02FF
    7606:	70 91 00 03 	lds	r23, 0x0300
    760a:	76 95       	lsr	r23
    760c:	67 95       	ror	r22
    760e:	76 95       	lsr	r23
    7610:	67 95       	ror	r22
    7612:	70 93 04 03 	sts	0x0304, r23
    7616:	60 93 03 03 	sts	0x0303, r22
		compute_right_vel = 0;
    761a:	10 92 08 02 	sts	0x0208, r1
		right_vel_sum = 0;
    761e:	10 92 00 03 	sts	0x0300, r1
    7622:	10 92 ff 02 	sts	0x02FF, r1

		if(pwm_right_desired >= 0) {
    7626:	80 91 09 03 	lds	r24, 0x0309
    762a:	90 91 0a 03 	lds	r25, 0x030A
    762e:	97 fd       	sbrc	r25, 7
    7630:	86 c0       	rjmp	.+268    	; 0x773e <handleMotorsWithNoController+0x1c0>
			rightMotSteps += (last_right_vel>>3);
    7632:	75 95       	asr	r23
    7634:	67 95       	ror	r22
    7636:	75 95       	asr	r23
    7638:	67 95       	ror	r22
    763a:	75 95       	asr	r23
    763c:	67 95       	ror	r22
    763e:	88 27       	eor	r24, r24
    7640:	77 fd       	sbrc	r23, 7
    7642:	80 95       	com	r24
    7644:	98 2f       	mov	r25, r24
    7646:	0e 94 d2 56 	call	0xada4	; 0xada4 <__floatsisf>
    764a:	9b 01       	movw	r18, r22
    764c:	ac 01       	movw	r20, r24
    764e:	60 91 e1 02 	lds	r22, 0x02E1
    7652:	70 91 e2 02 	lds	r23, 0x02E2
    7656:	80 91 e3 02 	lds	r24, 0x02E3
    765a:	90 91 e4 02 	lds	r25, 0x02E4
    765e:	0e 94 6a 55 	call	0xaad4	; 0xaad4 <__addsf3>
    7662:	60 93 e1 02 	sts	0x02E1, r22
    7666:	70 93 e2 02 	sts	0x02E2, r23
    766a:	80 93 e3 02 	sts	0x02E3, r24
    766e:	90 93 e4 02 	sts	0x02E4, r25
		} else {
			rightMotSteps -= (last_right_vel>>3);
		}
	}

	pwm_right_working = pwm_intermediate_right_desired*BYTE_TO_MM_S;	// pwm in the range -635..635 (127*BYTE_TO_MM_S)
    7672:	20 91 0d 03 	lds	r18, 0x030D
    7676:	30 91 0e 03 	lds	r19, 0x030E
    767a:	c9 01       	movw	r24, r18
    767c:	88 0f       	add	r24, r24
    767e:	99 1f       	adc	r25, r25
    7680:	88 0f       	add	r24, r24
    7682:	99 1f       	adc	r25, r25
    7684:	82 0f       	add	r24, r18
    7686:	93 1f       	adc	r25, r19
    7688:	90 93 1e 03 	sts	0x031E, r25
    768c:	80 93 1d 03 	sts	0x031D, r24
	pwm_left_working = pwm_intermediate_left_desired*BYTE_TO_MM_S;	
    7690:	40 91 0f 03 	lds	r20, 0x030F
    7694:	50 91 10 03 	lds	r21, 0x0310
    7698:	9a 01       	movw	r18, r20
    769a:	22 0f       	add	r18, r18
    769c:	33 1f       	adc	r19, r19
    769e:	22 0f       	add	r18, r18
    76a0:	33 1f       	adc	r19, r19
    76a2:	24 0f       	add	r18, r20
    76a4:	35 1f       	adc	r19, r21
    76a6:	52 2f       	mov	r21, r18
    76a8:	43 2f       	mov	r20, r19
    76aa:	20 93 1f 03 	sts	0x031F, r18
    76ae:	30 93 20 03 	sts	0x0320, r19
	if(obstacleAvoidanceEnabled) {
    76b2:	20 91 88 04 	lds	r18, 0x0488
    76b6:	22 23       	and	r18, r18
    76b8:	39 f5       	brne	.+78     	; 0x7708 <handleMotorsWithNoController+0x18a>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);		// out is in the range -MAX_MOTORS_PWM/2..MAX_MOTORS_PWM/2
	}
	//pwm_left_desired_to_control = cast_speed(pwm_left_working);		// pwm in the range -MAX_MOTORS_PWM/2..MAX_MOTORS_PWM/2
	//pwm_right_desired_to_control = cast_speed(pwm_right_working);

	pwm_left = pwm_left_working;
    76ba:	50 93 07 03 	sts	0x0307, r21
    76be:	40 93 08 03 	sts	0x0308, r20
	pwm_right = pwm_right_working;
    76c2:	90 93 06 03 	sts	0x0306, r25
    76c6:	80 93 05 03 	sts	0x0305, r24

	if(pwm_right > 0) {
    76ca:	18 16       	cp	r1, r24
    76cc:	19 06       	cpc	r1, r25
    76ce:	5c f5       	brge	.+86     	; 0x7726 <handleMotorsWithNoController+0x1a8>
		OCR3A = (unsigned int)pwm_right;
    76d0:	90 93 99 00 	sts	0x0099, r25
    76d4:	80 93 98 00 	sts	0x0098, r24
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
		OCR3B = 0;
	}
	if(pwm_left > 0) {
    76d8:	80 91 07 03 	lds	r24, 0x0307
    76dc:	90 91 08 03 	lds	r25, 0x0308
    76e0:	18 16       	cp	r1, r24
    76e2:	19 06       	cpc	r1, r25
    76e4:	2c f4       	brge	.+10     	; 0x76f0 <handleMotorsWithNoController+0x172>
		OCR4A = (unsigned int)pwm_left;
    76e6:	90 93 a9 00 	sts	0x00A9, r25
    76ea:	80 93 a8 00 	sts	0x00A8, r24
    76ee:	08 95       	ret
	} else if(pwm_left < 0) {
    76f0:	00 97       	sbiw	r24, 0x00	; 0
    76f2:	09 f0       	breq	.+2      	; 0x76f6 <handleMotorsWithNoController+0x178>
    76f4:	6e c0       	rjmp	.+220    	; 0x77d2 <handleMotorsWithNoController+0x254>
		OCR4B =(unsigned int)( -pwm_left);
	} else {
		OCR4A = 0;
    76f6:	10 92 a9 00 	sts	0x00A9, r1
    76fa:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    76fe:	10 92 ab 00 	sts	0x00AB, r1
    7702:	10 92 aa 00 	sts	0x00AA, r1
    7706:	08 95       	ret
	}

	pwm_right_working = pwm_intermediate_right_desired*BYTE_TO_MM_S;	// pwm in the range -635..635 (127*BYTE_TO_MM_S)
	pwm_left_working = pwm_intermediate_left_desired*BYTE_TO_MM_S;	
	if(obstacleAvoidanceEnabled) {
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);		// out is in the range -MAX_MOTORS_PWM/2..MAX_MOTORS_PWM/2
    7708:	8f e1       	ldi	r24, 0x1F	; 31
    770a:	93 e0       	ldi	r25, 0x03	; 3
    770c:	6d e1       	ldi	r22, 0x1D	; 29
    770e:	73 e0       	ldi	r23, 0x03	; 3
    7710:	0e 94 74 3d 	call	0x7ae8	; 0x7ae8 <obstacleAvoidance>
    7714:	50 91 1f 03 	lds	r21, 0x031F
    7718:	40 91 20 03 	lds	r20, 0x0320
    771c:	80 91 1d 03 	lds	r24, 0x031D
    7720:	90 91 1e 03 	lds	r25, 0x031E
    7724:	ca cf       	rjmp	.-108    	; 0x76ba <handleMotorsWithNoController+0x13c>
	pwm_left = pwm_left_working;
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
    7726:	00 97       	sbiw	r24, 0x00	; 0
    7728:	09 f0       	breq	.+2      	; 0x772c <handleMotorsWithNoController+0x1ae>
    772a:	4b c0       	rjmp	.+150    	; 0x77c2 <handleMotorsWithNoController+0x244>
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
    772c:	10 92 99 00 	sts	0x0099, r1
    7730:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    7734:	10 92 9b 00 	sts	0x009B, r1
    7738:	10 92 9a 00 	sts	0x009A, r1
    773c:	cd cf       	rjmp	.-102    	; 0x76d8 <handleMotorsWithNoController+0x15a>
		right_vel_sum = 0;

		if(pwm_right_desired >= 0) {
			rightMotSteps += (last_right_vel>>3);
		} else {
			rightMotSteps -= (last_right_vel>>3);
    773e:	75 95       	asr	r23
    7740:	67 95       	ror	r22
    7742:	75 95       	asr	r23
    7744:	67 95       	ror	r22
    7746:	75 95       	asr	r23
    7748:	67 95       	ror	r22
    774a:	88 27       	eor	r24, r24
    774c:	77 fd       	sbrc	r23, 7
    774e:	80 95       	com	r24
    7750:	98 2f       	mov	r25, r24
    7752:	0e 94 d2 56 	call	0xada4	; 0xada4 <__floatsisf>
    7756:	9b 01       	movw	r18, r22
    7758:	ac 01       	movw	r20, r24
    775a:	60 91 e1 02 	lds	r22, 0x02E1
    775e:	70 91 e2 02 	lds	r23, 0x02E2
    7762:	80 91 e3 02 	lds	r24, 0x02E3
    7766:	90 91 e4 02 	lds	r25, 0x02E4
    776a:	0e 94 69 55 	call	0xaad2	; 0xaad2 <__subsf3>
    776e:	60 93 e1 02 	sts	0x02E1, r22
    7772:	70 93 e2 02 	sts	0x02E2, r23
    7776:	80 93 e3 02 	sts	0x02E3, r24
    777a:	90 93 e4 02 	sts	0x02E4, r25
    777e:	79 cf       	rjmp	.-270    	; 0x7672 <handleMotorsWithNoController+0xf4>
		left_vel_sum = 0;

		if(pwm_left_desired >= 0) {
			leftMotSteps += (last_left_vel>>3);
		} else {
			leftMotSteps -= (last_left_vel>>3);
    7780:	75 95       	asr	r23
    7782:	67 95       	ror	r22
    7784:	75 95       	asr	r23
    7786:	67 95       	ror	r22
    7788:	75 95       	asr	r23
    778a:	67 95       	ror	r22
    778c:	88 27       	eor	r24, r24
    778e:	77 fd       	sbrc	r23, 7
    7790:	80 95       	com	r24
    7792:	98 2f       	mov	r25, r24
    7794:	0e 94 d2 56 	call	0xada4	; 0xada4 <__floatsisf>
    7798:	9b 01       	movw	r18, r22
    779a:	ac 01       	movw	r20, r24
    779c:	60 91 e5 02 	lds	r22, 0x02E5
    77a0:	70 91 e6 02 	lds	r23, 0x02E6
    77a4:	80 91 e7 02 	lds	r24, 0x02E7
    77a8:	90 91 e8 02 	lds	r25, 0x02E8
    77ac:	0e 94 69 55 	call	0xaad2	; 0xaad2 <__subsf3>
    77b0:	60 93 e5 02 	sts	0x02E5, r22
    77b4:	70 93 e6 02 	sts	0x02E6, r23
    77b8:	80 93 e7 02 	sts	0x02E7, r24
    77bc:	90 93 e8 02 	sts	0x02E8, r25
    77c0:	1c cf       	rjmp	.-456    	; 0x75fa <handleMotorsWithNoController+0x7c>
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
		OCR3B = (unsigned int)(-pwm_right);
    77c2:	90 95       	com	r25
    77c4:	81 95       	neg	r24
    77c6:	9f 4f       	sbci	r25, 0xFF	; 255
    77c8:	90 93 9b 00 	sts	0x009B, r25
    77cc:	80 93 9a 00 	sts	0x009A, r24
    77d0:	83 cf       	rjmp	.-250    	; 0x76d8 <handleMotorsWithNoController+0x15a>
		OCR3B = 0;
	}
	if(pwm_left > 0) {
		OCR4A = (unsigned int)pwm_left;
	} else if(pwm_left < 0) {
		OCR4B =(unsigned int)( -pwm_left);
    77d2:	90 95       	com	r25
    77d4:	81 95       	neg	r24
    77d6:	9f 4f       	sbci	r25, 0xFF	; 255
    77d8:	90 93 ab 00 	sts	0x00AB, r25
    77dc:	80 93 aa 00 	sts	0x00AA, r24
    77e0:	08 95       	ret

000077e2 <__vector_45>:

}


// Motor left
ISR(TIMER4_OVF_vect) {
    77e2:	1f 92       	push	r1
    77e4:	0f 92       	push	r0
    77e6:	0f b6       	in	r0, 0x3f	; 63
    77e8:	0f 92       	push	r0
    77ea:	11 24       	eor	r1, r1
    77ec:	8f 93       	push	r24
    77ee:	9f 93       	push	r25

//	LED_GREEN_ON;

	if(cliffDetectedFlag) {
    77f0:	80 91 8a 04 	lds	r24, 0x048A
    77f4:	88 23       	and	r24, r24
    77f6:	61 f0       	breq	.+24     	; 0x7810 <__vector_45+0x2e>
		pwm_left = 0;
    77f8:	10 92 08 03 	sts	0x0308, r1
    77fc:	10 92 07 03 	sts	0x0307, r1
		OCR4A = 0;
    7800:	10 92 a9 00 	sts	0x00A9, r1
    7804:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    7808:	10 92 ab 00 	sts	0x00AB, r1
    780c:	10 92 aa 00 	sts	0x00AA, r1
	}

	left_current_avg = 0;
    7810:	10 92 f2 02 	sts	0x02F2, r1
    7814:	10 92 f1 02 	sts	0x02F1, r1

	// set pins mode based on controller output
	if(pwm_left == 0) {
    7818:	80 91 07 03 	lds	r24, 0x0307
    781c:	90 91 08 03 	lds	r25, 0x0308
    7820:	00 97       	sbiw	r24, 0x00	; 0
    7822:	41 f5       	brne	.+80     	; 0x7874 <__vector_45+0x92>


		//leftMotorPhase = NO_PHASE;
		//compute_left_vel = 1;

		if(pwm_left_desired_to_control >= 0) {
    7824:	80 91 fb 02 	lds	r24, 0x02FB
    7828:	90 91 fc 02 	lds	r25, 0x02FC
    782c:	97 fd       	sbrc	r25, 7
    782e:	69 c0       	rjmp	.+210    	; 0x7902 <__vector_45+0x120>
			leftMotorPhase = PASSIVE_PHASE;
    7830:	81 e0       	ldi	r24, 0x01	; 1
    7832:	80 93 38 02 	sts	0x0238, r24
			currentMotLeftChannel = 14;
    7836:	8e e0       	ldi	r24, 0x0E	; 14
    7838:	80 93 35 02 	sts	0x0235, r24
		} else {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 15;
		}
		firstSampleLeft = 1;
    783c:	81 e0       	ldi	r24, 0x01	; 1
    783e:	80 93 0a 02 	sts	0x020A, r24

		// select channel 15 to sample left current
		//currentMotLeftChannel = 15;
		TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    7842:	80 91 a0 00 	lds	r24, 0x00A0
    7846:	8f 75       	andi	r24, 0x5F	; 95
    7848:	80 93 a0 00 	sts	0x00A0, r24
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    784c:	80 91 02 01 	lds	r24, 0x0102
    7850:	87 7e       	andi	r24, 0xE7	; 231
    7852:	80 93 02 01 	sts	0x0102, r24
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
    7856:	80 91 72 00 	lds	r24, 0x0072
    785a:	89 7f       	andi	r24, 0xF9	; 249
    785c:	80 93 72 00 	sts	0x0072, r24
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
    7860:	89 b3       	in	r24, 0x19	; 25
    7862:	86 60       	ori	r24, 0x06	; 6
    7864:	89 bb       	out	0x19, r24	; 25
	}
*/

//	LED_GREEN_OFF;

}
    7866:	9f 91       	pop	r25
    7868:	8f 91       	pop	r24
    786a:	0f 90       	pop	r0
    786c:	0f be       	out	0x3f, r0	; 63
    786e:	0f 90       	pop	r0
    7870:	1f 90       	pop	r1
    7872:	18 95       	reti
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
	} else if(pwm_left > 0) {   		// move forward
    7874:	18 16       	cp	r1, r24
    7876:	19 06       	cpc	r1, r25
    7878:	2c f5       	brge	.+74     	; 0x78c4 <__vector_45+0xe2>
		leftMotorPhase = ACTIVE_PHASE;
    787a:	10 92 38 02 	sts	0x0238, r1
		// select channel 15 to sample left current
		currentMotLeftChannel = 15;
    787e:	8f e0       	ldi	r24, 0x0F	; 15
    7880:	80 93 35 02 	sts	0x0235, r24
		TCCR4A  &= ~(1 << COM4B1);		// disable OCB
    7884:	80 91 a0 00 	lds	r24, 0x00A0
    7888:	8f 7d       	andi	r24, 0xDF	; 223
    788a:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
    788e:	80 91 72 00 	lds	r24, 0x0072
    7892:	8b 7f       	andi	r24, 0xFB	; 251
    7894:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 4);				// output to 0
    7898:	80 91 02 01 	lds	r24, 0x0102
    789c:	8f 7e       	andi	r24, 0xEF	; 239
    789e:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4A1);		// enable OCA
    78a2:	80 91 a0 00 	lds	r24, 0x00A0
    78a6:	80 68       	ori	r24, 0x80	; 128
    78a8:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
    78ac:	80 91 72 00 	lds	r24, 0x0072
    78b0:	82 60       	ori	r24, 0x02	; 2
    78b2:	80 93 72 00 	sts	0x0072, r24
	}
*/

//	LED_GREEN_OFF;

}
    78b6:	9f 91       	pop	r25
    78b8:	8f 91       	pop	r24
    78ba:	0f 90       	pop	r0
    78bc:	0f be       	out	0x3f, r0	; 63
    78be:	0f 90       	pop	r0
    78c0:	1f 90       	pop	r1
    78c2:	18 95       	reti
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
		PORTH &= ~(1 << 4);				// output to 0
		TCCR4A |= (1 << COM4A1);		// enable OCA
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
	} else if(pwm_left < 0) {      		// move backward
		leftMotorPhase = ACTIVE_PHASE;
    78c4:	10 92 38 02 	sts	0x0238, r1
		// select channel 14 to sample left current
		currentMotLeftChannel = 14;
    78c8:	8e e0       	ldi	r24, 0x0E	; 14
    78ca:	80 93 35 02 	sts	0x0235, r24
		TCCR4A  &= ~(1 << COM4A1);		// disable OCA
    78ce:	80 91 a0 00 	lds	r24, 0x00A0
    78d2:	8f 77       	andi	r24, 0x7F	; 127
    78d4:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4A);		// disable OCA interrupt
    78d8:	80 91 72 00 	lds	r24, 0x0072
    78dc:	8d 7f       	andi	r24, 0xFD	; 253
    78de:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 3);				// output to 0
    78e2:	80 91 02 01 	lds	r24, 0x0102
    78e6:	87 7f       	andi	r24, 0xF7	; 247
    78e8:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4B1);		// enable OCB
    78ec:	80 91 a0 00 	lds	r24, 0x00A0
    78f0:	80 62       	ori	r24, 0x20	; 32
    78f2:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
    78f6:	80 91 72 00 	lds	r24, 0x0072
    78fa:	84 60       	ori	r24, 0x04	; 4
    78fc:	80 93 72 00 	sts	0x0072, r24
    7900:	b2 cf       	rjmp	.-156    	; 0x7866 <__vector_45+0x84>

		if(pwm_left_desired_to_control >= 0) {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 14;
		} else {
			leftMotorPhase = PASSIVE_PHASE;
    7902:	81 e0       	ldi	r24, 0x01	; 1
    7904:	80 93 38 02 	sts	0x0238, r24
			currentMotLeftChannel = 15;
    7908:	8f e0       	ldi	r24, 0x0F	; 15
    790a:	80 93 35 02 	sts	0x0235, r24
    790e:	96 cf       	rjmp	.-212    	; 0x783c <__vector_45+0x5a>

00007910 <__vector_42>:
//	LED_GREEN_OFF;

}

// motor left forward
ISR(TIMER4_COMPA_vect) {
    7910:	1f 92       	push	r1
    7912:	0f 92       	push	r0
    7914:	0f b6       	in	r0, 0x3f	; 63
    7916:	0f 92       	push	r0
    7918:	11 24       	eor	r1, r1
    791a:	8f 93       	push	r24
    791c:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    791e:	81 e0       	ldi	r24, 0x01	; 1
    7920:	80 93 38 02 	sts	0x0238, r24
	// select channel 14 to sample the left velocity
	currentMotLeftChannel = 14;
    7924:	9e e0       	ldi	r25, 0x0E	; 14
    7926:	90 93 35 02 	sts	0x0235, r25

	firstSampleLeft = 1;
    792a:	80 93 0a 02 	sts	0x020A, r24

//	LED_GREEN_OFF;

}
    792e:	9f 91       	pop	r25
    7930:	8f 91       	pop	r24
    7932:	0f 90       	pop	r0
    7934:	0f be       	out	0x3f, r0	; 63
    7936:	0f 90       	pop	r0
    7938:	1f 90       	pop	r1
    793a:	18 95       	reti

0000793c <__vector_43>:

// motor left backward
ISR(TIMER4_COMPB_vect) {
    793c:	1f 92       	push	r1
    793e:	0f 92       	push	r0
    7940:	0f b6       	in	r0, 0x3f	; 63
    7942:	0f 92       	push	r0
    7944:	11 24       	eor	r1, r1
    7946:	8f 93       	push	r24
    7948:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    794a:	81 e0       	ldi	r24, 0x01	; 1
    794c:	80 93 38 02 	sts	0x0238, r24
	// select channel 15 to sample the left velocity
	currentMotLeftChannel = 15;
    7950:	9f e0       	ldi	r25, 0x0F	; 15
    7952:	90 93 35 02 	sts	0x0235, r25

	firstSampleLeft = 1;
    7956:	80 93 0a 02 	sts	0x020A, r24

//	LED_GREEN_OFF;

}
    795a:	9f 91       	pop	r25
    795c:	8f 91       	pop	r24
    795e:	0f 90       	pop	r0
    7960:	0f be       	out	0x3f, r0	; 63
    7962:	0f 90       	pop	r0
    7964:	1f 90       	pop	r1
    7966:	18 95       	reti

00007968 <__vector_35>:

// Motor right
ISR(TIMER3_OVF_vect) {
    7968:	1f 92       	push	r1
    796a:	0f 92       	push	r0
    796c:	0f b6       	in	r0, 0x3f	; 63
    796e:	0f 92       	push	r0
    7970:	11 24       	eor	r1, r1
    7972:	8f 93       	push	r24
    7974:	9f 93       	push	r25

//	LED_GREEN_ON;

  	// PORTB ^= (1 << 7); // Toggle the LED

	if(cliffDetectedFlag) {
    7976:	80 91 8a 04 	lds	r24, 0x048A
    797a:	88 23       	and	r24, r24
    797c:	61 f0       	breq	.+24     	; 0x7996 <__vector_35+0x2e>
		pwm_right = 0;
    797e:	10 92 06 03 	sts	0x0306, r1
    7982:	10 92 05 03 	sts	0x0305, r1
		OCR3A = 0;
    7986:	10 92 99 00 	sts	0x0099, r1
    798a:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    798e:	10 92 9b 00 	sts	0x009B, r1
    7992:	10 92 9a 00 	sts	0x009A, r1
	}

	right_current_avg = 0;
    7996:	10 92 f4 02 	sts	0x02F4, r1
    799a:	10 92 f3 02 	sts	0x02F3, r1


	if(pwm_right == 0) {
    799e:	80 91 05 03 	lds	r24, 0x0305
    79a2:	90 91 06 03 	lds	r25, 0x0306
    79a6:	00 97       	sbiw	r24, 0x00	; 0
    79a8:	31 f5       	brne	.+76     	; 0x79f6 <__vector_35+0x8e>
		//firstSampleRight = 0;

		//rightMotorPhase = NO_PHASE;
		//compute_right_vel = 1;

		if(pwm_right_desired_to_control >= 0) {
    79aa:	80 91 f9 02 	lds	r24, 0x02F9
    79ae:	90 91 fa 02 	lds	r25, 0x02FA
    79b2:	97 fd       	sbrc	r25, 7
    79b4:	5f c0       	rjmp	.+190    	; 0x7a74 <__vector_35+0x10c>
			rightMotorPhase = PASSIVE_PHASE;
    79b6:	81 e0       	ldi	r24, 0x01	; 1
    79b8:	80 93 37 02 	sts	0x0237, r24
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
    79bc:	8c e0       	ldi	r24, 0x0C	; 12
    79be:	80 93 36 02 	sts	0x0236, r24
		} else {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
		}
		firstSampleRight = 1;
    79c2:	81 e0       	ldi	r24, 0x01	; 1
    79c4:	80 93 09 02 	sts	0x0209, r24

		// select channel 13 to sample left current
		//currentMotRightChannel = 13;
		TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    79c8:	80 91 90 00 	lds	r24, 0x0090
    79cc:	8f 75       	andi	r24, 0x5F	; 95
    79ce:	80 93 90 00 	sts	0x0090, r24
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    79d2:	8e b1       	in	r24, 0x0e	; 14
    79d4:	87 7e       	andi	r24, 0xE7	; 231
    79d6:	8e b9       	out	0x0e, r24	; 14
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
    79d8:	80 91 71 00 	lds	r24, 0x0071
    79dc:	89 7f       	andi	r24, 0xF9	; 249
    79de:	80 93 71 00 	sts	0x0071, r24
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
    79e2:	88 b3       	in	r24, 0x18	; 24
    79e4:	86 60       	ori	r24, 0x06	; 6
    79e6:	88 bb       	out	0x18, r24	; 24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    79e8:	9f 91       	pop	r25
    79ea:	8f 91       	pop	r24
    79ec:	0f 90       	pop	r0
    79ee:	0f be       	out	0x3f, r0	; 63
    79f0:	0f 90       	pop	r0
    79f2:	1f 90       	pop	r1
    79f4:	18 95       	reti
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
	}else if(pwm_right > 0) {   		// move forward
    79f6:	18 16       	cp	r1, r24
    79f8:	19 06       	cpc	r1, r25
    79fa:	0c f5       	brge	.+66     	; 0x7a3e <__vector_35+0xd6>
		rightMotorPhase = ACTIVE_PHASE;
    79fc:	10 92 37 02 	sts	0x0237, r1
		// select channel 13 to sample left current
		currentMotRightChannel = 13;
    7a00:	8d e0       	ldi	r24, 0x0D	; 13
    7a02:	80 93 36 02 	sts	0x0236, r24
		TCCR3A  &= ~(1 << COM3B1);		// disable OCB
    7a06:	80 91 90 00 	lds	r24, 0x0090
    7a0a:	8f 7d       	andi	r24, 0xDF	; 223
    7a0c:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
    7a10:	80 91 71 00 	lds	r24, 0x0071
    7a14:	8b 7f       	andi	r24, 0xFB	; 251
    7a16:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 4);				// output to 0
    7a1a:	74 98       	cbi	0x0e, 4	; 14
		TCCR3A |= (1 << COM3A1);		// enable OCA
    7a1c:	80 91 90 00 	lds	r24, 0x0090
    7a20:	80 68       	ori	r24, 0x80	; 128
    7a22:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
    7a26:	80 91 71 00 	lds	r24, 0x0071
    7a2a:	82 60       	ori	r24, 0x02	; 2
    7a2c:	80 93 71 00 	sts	0x0071, r24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    7a30:	9f 91       	pop	r25
    7a32:	8f 91       	pop	r24
    7a34:	0f 90       	pop	r0
    7a36:	0f be       	out	0x3f, r0	; 63
    7a38:	0f 90       	pop	r0
    7a3a:	1f 90       	pop	r1
    7a3c:	18 95       	reti
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
		PORTE &= ~(1 << 4);				// output to 0
		TCCR3A |= (1 << COM3A1);		// enable OCA
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
	} else if(pwm_right < 0) {      	// move backward
		rightMotorPhase = ACTIVE_PHASE;
    7a3e:	10 92 37 02 	sts	0x0237, r1
		// select channel 12 to sample left current
		currentMotRightChannel = 12;
    7a42:	8c e0       	ldi	r24, 0x0C	; 12
    7a44:	80 93 36 02 	sts	0x0236, r24
		TCCR3A  &= ~(1 << COM3A1);		// disable OCA
    7a48:	80 91 90 00 	lds	r24, 0x0090
    7a4c:	8f 77       	andi	r24, 0x7F	; 127
    7a4e:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3A);		// disable OCA interrupt
    7a52:	80 91 71 00 	lds	r24, 0x0071
    7a56:	8d 7f       	andi	r24, 0xFD	; 253
    7a58:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 3);				// output to 0
    7a5c:	73 98       	cbi	0x0e, 3	; 14
		TCCR3A |= (1 << COM3B1);		// enable OCB
    7a5e:	80 91 90 00 	lds	r24, 0x0090
    7a62:	80 62       	ori	r24, 0x20	; 32
    7a64:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3B);		// enable OCB interrupt
    7a68:	80 91 71 00 	lds	r24, 0x0071
    7a6c:	84 60       	ori	r24, 0x04	; 4
    7a6e:	80 93 71 00 	sts	0x0071, r24
    7a72:	ba cf       	rjmp	.-140    	; 0x79e8 <__vector_35+0x80>
		if(pwm_right_desired_to_control >= 0) {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
		} else {
			rightMotorPhase = PASSIVE_PHASE;
    7a74:	81 e0       	ldi	r24, 0x01	; 1
    7a76:	80 93 37 02 	sts	0x0237, r24
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
    7a7a:	8d e0       	ldi	r24, 0x0D	; 13
    7a7c:	80 93 36 02 	sts	0x0236, r24
    7a80:	a0 cf       	rjmp	.-192    	; 0x79c2 <__vector_35+0x5a>

00007a82 <__vector_32>:
//	LED_GREEN_OFF;

}

// motor right forward
ISR(TIMER3_COMPA_vect) {
    7a82:	1f 92       	push	r1
    7a84:	0f 92       	push	r0
    7a86:	0f b6       	in	r0, 0x3f	; 63
    7a88:	0f 92       	push	r0
    7a8a:	11 24       	eor	r1, r1
    7a8c:	8f 93       	push	r24
    7a8e:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    7a90:	81 e0       	ldi	r24, 0x01	; 1
    7a92:	80 93 37 02 	sts	0x0237, r24
	// select channel 12 to sample the right velocity
	currentMotRightChannel = 12;
    7a96:	9c e0       	ldi	r25, 0x0C	; 12
    7a98:	90 93 36 02 	sts	0x0236, r25

	firstSampleRight = 1;
    7a9c:	80 93 09 02 	sts	0x0209, r24

//	LED_RED_OFF;

}
    7aa0:	9f 91       	pop	r25
    7aa2:	8f 91       	pop	r24
    7aa4:	0f 90       	pop	r0
    7aa6:	0f be       	out	0x3f, r0	; 63
    7aa8:	0f 90       	pop	r0
    7aaa:	1f 90       	pop	r1
    7aac:	18 95       	reti

00007aae <__vector_33>:

// motor right backward
ISR(TIMER3_COMPB_vect) {
    7aae:	1f 92       	push	r1
    7ab0:	0f 92       	push	r0
    7ab2:	0f b6       	in	r0, 0x3f	; 63
    7ab4:	0f 92       	push	r0
    7ab6:	11 24       	eor	r1, r1
    7ab8:	8f 93       	push	r24
    7aba:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    7abc:	81 e0       	ldi	r24, 0x01	; 1
    7abe:	80 93 37 02 	sts	0x0237, r24
	// select channel 13 to sample the right velocity
	currentMotRightChannel = 13;
    7ac2:	9d e0       	ldi	r25, 0x0D	; 13
    7ac4:	90 93 36 02 	sts	0x0236, r25

	firstSampleRight = 1;
    7ac8:	80 93 09 02 	sts	0x0209, r24

//	LED_RED_OFF;
}
    7acc:	9f 91       	pop	r25
    7ace:	8f 91       	pop	r24
    7ad0:	0f 90       	pop	r0
    7ad2:	0f be       	out	0x3f, r0	; 63
    7ad4:	0f 90       	pop	r0
    7ad6:	1f 90       	pop	r1
    7ad8:	18 95       	reti

00007ada <initBehaviors>:

#include "behaviors.h"

void initBehaviors() {

	srand(TCNT3);	// initialize random seed (used in obstacle avoidance)
    7ada:	80 91 94 00 	lds	r24, 0x0094
    7ade:	90 91 95 00 	lds	r25, 0x0095
    7ae2:	0e 94 4c 59 	call	0xb298	; 0xb298 <srand>

}
    7ae6:	08 95       	ret

00007ae8 <obstacleAvoidance>:

void obstacleAvoidance(signed int *pwmLeft, signed int *pwmRight) {
    7ae8:	2f 92       	push	r2
    7aea:	3f 92       	push	r3
    7aec:	4f 92       	push	r4
    7aee:	5f 92       	push	r5
    7af0:	6f 92       	push	r6
    7af2:	7f 92       	push	r7
    7af4:	8f 92       	push	r8
    7af6:	9f 92       	push	r9
    7af8:	af 92       	push	r10
    7afa:	bf 92       	push	r11
    7afc:	cf 92       	push	r12
    7afe:	df 92       	push	r13
    7b00:	ef 92       	push	r14
    7b02:	ff 92       	push	r15
    7b04:	0f 93       	push	r16
    7b06:	1f 93       	push	r17
    7b08:	df 93       	push	r29
    7b0a:	cf 93       	push	r28
    7b0c:	cd b7       	in	r28, 0x3d	; 61
    7b0e:	de b7       	in	r29, 0x3e	; 62
    7b10:	28 97       	sbiw	r28, 0x08	; 8
    7b12:	0f b6       	in	r0, 0x3f	; 63
    7b14:	f8 94       	cli
    7b16:	de bf       	out	0x3e, r29	; 62
    7b18:	0f be       	out	0x3f, r0	; 63
    7b1a:	cd bf       	out	0x3d, r28	; 61
    7b1c:	3c 01       	movw	r6, r24
    7b1e:	7a 83       	std	Y+2, r23	; 0x02
    7b20:	69 83       	std	Y+1, r22	; 0x01
	//	y	0		0.5		1		0.5		0		-0.5	-1		-0.5

	unsigned int i=0;
	signed int long res=0;
	signed int sumSensorsX=0, sumSensorsY=0;
	signed int desL=*pwmLeft, desR=*pwmRight;
    7b22:	fc 01       	movw	r30, r24
    7b24:	01 90       	ld	r0, Z+
    7b26:	f0 81       	ld	r31, Z
    7b28:	e0 2d       	mov	r30, r0
    7b2a:	fc 83       	std	Y+4, r31	; 0x04
    7b2c:	eb 83       	std	Y+3, r30	; 0x03
    7b2e:	fb 01       	movw	r30, r22
    7b30:	01 90       	ld	r0, Z+
    7b32:	f0 81       	ld	r31, Z
    7b34:	e0 2d       	mov	r30, r0
    7b36:	fe 83       	std	Y+6, r31	; 0x06
    7b38:	ed 83       	std	Y+5, r30	; 0x05

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    7b3a:	00 91 d1 02 	lds	r16, 0x02D1
    7b3e:	10 91 d2 02 	lds	r17, 0x02D2
    7b42:	05 30       	cpi	r16, 0x05	; 5
    7b44:	11 05       	cpc	r17, r1
    7b46:	34 f4       	brge	.+12     	; 0x7b54 <obstacleAvoidance+0x6c>
			proximityResultLinear[i] = 0;
    7b48:	10 92 d2 02 	sts	0x02D2, r1
    7b4c:	10 92 d1 02 	sts	0x02D1, r1
    7b50:	00 e0       	ldi	r16, 0x00	; 0
    7b52:	10 e0       	ldi	r17, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    7b54:	60 91 d3 02 	lds	r22, 0x02D3
    7b58:	70 91 d4 02 	lds	r23, 0x02D4
    7b5c:	65 30       	cpi	r22, 0x05	; 5
    7b5e:	71 05       	cpc	r23, r1
    7b60:	34 f4       	brge	.+12     	; 0x7b6e <obstacleAvoidance+0x86>
			proximityResultLinear[i] = 0;
    7b62:	10 92 d4 02 	sts	0x02D4, r1
    7b66:	10 92 d3 02 	sts	0x02D3, r1
    7b6a:	60 e0       	ldi	r22, 0x00	; 0
    7b6c:	70 e0       	ldi	r23, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    7b6e:	80 91 d5 02 	lds	r24, 0x02D5
    7b72:	90 91 d6 02 	lds	r25, 0x02D6
    7b76:	85 30       	cpi	r24, 0x05	; 5
    7b78:	91 05       	cpc	r25, r1
    7b7a:	24 f4       	brge	.+8      	; 0x7b84 <obstacleAvoidance+0x9c>
			proximityResultLinear[i] = 0;
    7b7c:	10 92 d6 02 	sts	0x02D6, r1
    7b80:	10 92 d5 02 	sts	0x02D5, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    7b84:	40 91 d7 02 	lds	r20, 0x02D7
    7b88:	50 91 d8 02 	lds	r21, 0x02D8
    7b8c:	45 30       	cpi	r20, 0x05	; 5
    7b8e:	51 05       	cpc	r21, r1
    7b90:	34 f4       	brge	.+12     	; 0x7b9e <obstacleAvoidance+0xb6>
			proximityResultLinear[i] = 0;
    7b92:	10 92 d8 02 	sts	0x02D8, r1
    7b96:	10 92 d7 02 	sts	0x02D7, r1
    7b9a:	40 e0       	ldi	r20, 0x00	; 0
    7b9c:	50 e0       	ldi	r21, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    7b9e:	40 90 d9 02 	lds	r4, 0x02D9
    7ba2:	50 90 da 02 	lds	r5, 0x02DA
    7ba6:	f5 e0       	ldi	r31, 0x05	; 5
    7ba8:	4f 16       	cp	r4, r31
    7baa:	51 04       	cpc	r5, r1
    7bac:	34 f4       	brge	.+12     	; 0x7bba <obstacleAvoidance+0xd2>
			proximityResultLinear[i] = 0;
    7bae:	10 92 da 02 	sts	0x02DA, r1
    7bb2:	10 92 d9 02 	sts	0x02D9, r1
    7bb6:	44 24       	eor	r4, r4
    7bb8:	55 24       	eor	r5, r5
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    7bba:	20 91 db 02 	lds	r18, 0x02DB
    7bbe:	30 91 dc 02 	lds	r19, 0x02DC
    7bc2:	25 30       	cpi	r18, 0x05	; 5
    7bc4:	31 05       	cpc	r19, r1
    7bc6:	34 f4       	brge	.+12     	; 0x7bd4 <obstacleAvoidance+0xec>
			proximityResultLinear[i] = 0;
    7bc8:	10 92 dc 02 	sts	0x02DC, r1
    7bcc:	10 92 db 02 	sts	0x02DB, r1
    7bd0:	20 e0       	ldi	r18, 0x00	; 0
    7bd2:	30 e0       	ldi	r19, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    7bd4:	80 91 dd 02 	lds	r24, 0x02DD
    7bd8:	90 91 de 02 	lds	r25, 0x02DE
    7bdc:	85 30       	cpi	r24, 0x05	; 5
    7bde:	91 05       	cpc	r25, r1
    7be0:	24 f4       	brge	.+8      	; 0x7bea <obstacleAvoidance+0x102>
			proximityResultLinear[i] = 0;
    7be2:	10 92 de 02 	sts	0x02DE, r1
    7be6:	10 92 dd 02 	sts	0x02DD, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    7bea:	80 91 df 02 	lds	r24, 0x02DF
    7bee:	90 91 e0 02 	lds	r25, 0x02E0
    7bf2:	85 30       	cpi	r24, 0x05	; 5
    7bf4:	91 05       	cpc	r25, r1
    7bf6:	34 f4       	brge	.+12     	; 0x7c04 <obstacleAvoidance+0x11c>
			proximityResultLinear[i] = 0;
    7bf8:	10 92 e0 02 	sts	0x02E0, r1
    7bfc:	10 92 df 02 	sts	0x02DF, r1
    7c00:	80 e0       	ldi	r24, 0x00	; 0
    7c02:	90 e0       	ldi	r25, 0x00	; 0
	}

	// sum the contribution of each sensor (based on the previous weights table);
	// give more weight to prox2 and prox6 (side proximities) in order to get more stability in narrow aisles;
	// add some noise to the sum in order to escape from dead-lock positions
	sumSensorsX = -proximityResultLinear[0] - (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) + proximityResultLinear[4] + (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + ((rand()%60)-30);
    7c04:	10 95       	com	r17
    7c06:	01 95       	neg	r16
    7c08:	1f 4f       	sbci	r17, 0xFF	; 255
    7c0a:	5b 01       	movw	r10, r22
    7c0c:	b5 94       	asr	r11
    7c0e:	a7 94       	ror	r10
    7c10:	7a 01       	movw	r14, r20
    7c12:	f5 94       	asr	r15
    7c14:	e7 94       	ror	r14
    7c16:	69 01       	movw	r12, r18
    7c18:	d5 94       	asr	r13
    7c1a:	c7 94       	ror	r12
    7c1c:	4c 01       	movw	r8, r24
    7c1e:	95 94       	asr	r9
    7c20:	87 94       	ror	r8
    7c22:	0e 94 47 59 	call	0xb28e	; 0xb28e <rand>
    7c26:	92 01       	movw	r18, r4
    7c28:	2e 51       	subi	r18, 0x1E	; 30
    7c2a:	30 40       	sbci	r19, 0x00	; 0
    7c2c:	20 0f       	add	r18, r16
    7c2e:	31 1f       	adc	r19, r17
    7c30:	2e 0d       	add	r18, r14
    7c32:	3f 1d       	adc	r19, r15
    7c34:	2c 0d       	add	r18, r12
    7c36:	3d 1d       	adc	r19, r13
    7c38:	2a 19       	sub	r18, r10
    7c3a:	3b 09       	sbc	r19, r11
    7c3c:	28 19       	sub	r18, r8
    7c3e:	39 09       	sbc	r19, r9
    7c40:	6c e3       	ldi	r22, 0x3C	; 60
    7c42:	26 2e       	mov	r2, r22
    7c44:	31 2c       	mov	r3, r1
    7c46:	b1 01       	movw	r22, r2
    7c48:	0e 94 a9 58 	call	0xb152	; 0xb152 <__divmodhi4>
    7c4c:	28 0f       	add	r18, r24
    7c4e:	39 1f       	adc	r19, r25
    7c50:	38 87       	std	Y+8, r19	; 0x08
    7c52:	2f 83       	std	Y+7, r18	; 0x07
	//sumSensorsX = -proximityResultLinear[0]  + proximityResultLinear[4];	
	sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[2]>>2) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[6]>>2) - (proximityResultLinear[7]>>1)+ ((rand()%60)-30);
    7c54:	e0 90 d3 02 	lds	r14, 0x02D3
    7c58:	f0 90 d4 02 	lds	r15, 0x02D4
    7c5c:	f5 94       	asr	r15
    7c5e:	e7 94       	ror	r14
    7c60:	00 91 d5 02 	lds	r16, 0x02D5
    7c64:	10 91 d6 02 	lds	r17, 0x02D6
    7c68:	15 95       	asr	r17
    7c6a:	07 95       	ror	r16
    7c6c:	15 95       	asr	r17
    7c6e:	07 95       	ror	r16
    7c70:	c0 90 d7 02 	lds	r12, 0x02D7
    7c74:	d0 90 d8 02 	lds	r13, 0x02D8
    7c78:	d5 94       	asr	r13
    7c7a:	c7 94       	ror	r12
    7c7c:	a0 90 db 02 	lds	r10, 0x02DB
    7c80:	b0 90 dc 02 	lds	r11, 0x02DC
    7c84:	b5 94       	asr	r11
    7c86:	a7 94       	ror	r10
    7c88:	40 90 dd 02 	lds	r4, 0x02DD
    7c8c:	50 90 de 02 	lds	r5, 0x02DE
    7c90:	55 94       	asr	r5
    7c92:	47 94       	ror	r4
    7c94:	55 94       	asr	r5
    7c96:	47 94       	ror	r4
    7c98:	80 90 df 02 	lds	r8, 0x02DF
    7c9c:	90 90 e0 02 	lds	r9, 0x02E0
    7ca0:	95 94       	asr	r9
    7ca2:	87 94       	ror	r8
    7ca4:	0e 94 47 59 	call	0xb28e	; 0xb28e <rand>
    7ca8:	97 01       	movw	r18, r14
    7caa:	20 0f       	add	r18, r16
    7cac:	31 1f       	adc	r19, r17
    7cae:	2e 51       	subi	r18, 0x1E	; 30
    7cb0:	30 40       	sbci	r19, 0x00	; 0
    7cb2:	2c 0d       	add	r18, r12
    7cb4:	3d 1d       	adc	r19, r13
    7cb6:	2a 19       	sub	r18, r10
    7cb8:	3b 09       	sbc	r19, r11
    7cba:	28 19       	sub	r18, r8
    7cbc:	39 09       	sbc	r19, r9
    7cbe:	24 19       	sub	r18, r4
    7cc0:	35 09       	sbc	r19, r5
    7cc2:	b1 01       	movw	r22, r2
    7cc4:	0e 94 a9 58 	call	0xb152	; 0xb152 <__divmodhi4>
    7cc8:	28 0f       	add	r18, r24
    7cca:	39 1f       	adc	r19, r25
	//sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + (rand()%30);

	// modify the velocity components based on sensor values
	if(desL >= 0) {
    7ccc:	4b 81       	ldd	r20, Y+3	; 0x03
    7cce:	5c 81       	ldd	r21, Y+4	; 0x04
    7cd0:	57 fd       	sbrc	r21, 7
    7cd2:	e5 c0       	rjmp	.+458    	; 0x7e9e <obstacleAvoidance+0x3b6>
		res = (signed long int)desL + (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
    7cd4:	5a 01       	movw	r10, r20
    7cd6:	cc 24       	eor	r12, r12
    7cd8:	b7 fc       	sbrc	r11, 7
    7cda:	c0 94       	com	r12
    7cdc:	dc 2c       	mov	r13, r12
    7cde:	8f 81       	ldd	r24, Y+7	; 0x07
    7ce0:	98 85       	ldd	r25, Y+8	; 0x08
    7ce2:	1c 01       	movw	r2, r24
    7ce4:	44 24       	eor	r4, r4
    7ce6:	37 fc       	sbrc	r3, 7
    7ce8:	40 94       	com	r4
    7cea:	54 2c       	mov	r5, r4
    7cec:	79 01       	movw	r14, r18
    7cee:	00 27       	eor	r16, r16
    7cf0:	f7 fc       	sbrc	r15, 7
    7cf2:	00 95       	com	r16
    7cf4:	10 2f       	mov	r17, r16
    7cf6:	c2 01       	movw	r24, r4
    7cf8:	b1 01       	movw	r22, r2
    7cfa:	6e 19       	sub	r22, r14
    7cfc:	7f 09       	sbc	r23, r15
    7cfe:	80 0b       	sbc	r24, r16
    7d00:	91 0b       	sbc	r25, r17
    7d02:	a6 01       	movw	r20, r12
    7d04:	95 01       	movw	r18, r10
    7d06:	0e 94 76 58 	call	0xb0ec	; 0xb0ec <__mulsi3>
    7d0a:	b6 e0       	ldi	r27, 0x06	; 6
    7d0c:	95 95       	asr	r25
    7d0e:	87 95       	ror	r24
    7d10:	77 95       	ror	r23
    7d12:	67 95       	ror	r22
    7d14:	ba 95       	dec	r27
    7d16:	d1 f7       	brne	.-12     	; 0x7d0c <obstacleAvoidance+0x224>
    7d18:	6a 0d       	add	r22, r10
    7d1a:	7b 1d       	adc	r23, r11
    7d1c:	8c 1d       	adc	r24, r12
    7d1e:	9d 1d       	adc	r25, r13
		*pwmLeft = (signed int)res;
    7d20:	f3 01       	movw	r30, r6
    7d22:	71 83       	std	Z+1, r23	; 0x01
    7d24:	60 83       	st	Z, r22
	} else {
		res = (signed long int)desL - (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
		*pwmLeft = (signed int)res;
	}
	if(desR >=0) {
    7d26:	2d 81       	ldd	r18, Y+5	; 0x05
    7d28:	3e 81       	ldd	r19, Y+6	; 0x06
    7d2a:	37 fd       	sbrc	r19, 7
    7d2c:	97 c0       	rjmp	.+302    	; 0x7e5c <obstacleAvoidance+0x374>
		res = (signed long int)desR + (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
    7d2e:	59 01       	movw	r10, r18
    7d30:	cc 24       	eor	r12, r12
    7d32:	b7 fc       	sbrc	r11, 7
    7d34:	c0 94       	com	r12
    7d36:	dc 2c       	mov	r13, r12
    7d38:	c8 01       	movw	r24, r16
    7d3a:	b7 01       	movw	r22, r14
    7d3c:	62 0d       	add	r22, r2
    7d3e:	73 1d       	adc	r23, r3
    7d40:	84 1d       	adc	r24, r4
    7d42:	95 1d       	adc	r25, r5
    7d44:	a6 01       	movw	r20, r12
    7d46:	95 01       	movw	r18, r10
    7d48:	0e 94 76 58 	call	0xb0ec	; 0xb0ec <__mulsi3>
    7d4c:	f6 e0       	ldi	r31, 0x06	; 6
    7d4e:	95 95       	asr	r25
    7d50:	87 95       	ror	r24
    7d52:	77 95       	ror	r23
    7d54:	67 95       	ror	r22
    7d56:	fa 95       	dec	r31
    7d58:	d1 f7       	brne	.-12     	; 0x7d4e <obstacleAvoidance+0x266>
    7d5a:	6a 0d       	add	r22, r10
    7d5c:	7b 1d       	adc	r23, r11
    7d5e:	8c 1d       	adc	r24, r12
    7d60:	9d 1d       	adc	r25, r13
		*pwmRight = (signed int)res;
    7d62:	9b 01       	movw	r18, r22
    7d64:	e9 81       	ldd	r30, Y+1	; 0x01
    7d66:	fa 81       	ldd	r31, Y+2	; 0x02
    7d68:	71 83       	std	Z+1, r23	; 0x01
    7d6a:	60 83       	st	Z, r22
	} else {
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	}

	if(currentSelector == 10) {	// force a little bit the upwards direction in vertical motion
    7d6c:	80 91 64 04 	lds	r24, 0x0464
    7d70:	8a 30       	cpi	r24, 0x0A	; 10
    7d72:	09 f4       	brne	.+2      	; 0x7d76 <obstacleAvoidance+0x28e>
    7d74:	4b c0       	rjmp	.+150    	; 0x7e0c <obstacleAvoidance+0x324>
			}
		}
	}

	// force the values to be in the pwm maximum range
	if (*pwmRight>(MAX_MOTORS_PWM/2)) *pwmRight=(MAX_MOTORS_PWM/2);
    7d76:	f2 e0       	ldi	r31, 0x02	; 2
    7d78:	20 30       	cpi	r18, 0x00	; 0
    7d7a:	3f 07       	cpc	r19, r31
    7d7c:	44 f0       	brlt	.+16     	; 0x7d8e <obstacleAvoidance+0x2a6>
    7d7e:	8f ef       	ldi	r24, 0xFF	; 255
    7d80:	91 e0       	ldi	r25, 0x01	; 1
    7d82:	e9 81       	ldd	r30, Y+1	; 0x01
    7d84:	fa 81       	ldd	r31, Y+2	; 0x02
    7d86:	91 83       	std	Z+1, r25	; 0x01
    7d88:	80 83       	st	Z, r24
    7d8a:	2f ef       	ldi	r18, 0xFF	; 255
    7d8c:	31 e0       	ldi	r19, 0x01	; 1
	if (*pwmLeft>(MAX_MOTORS_PWM/2)) *pwmLeft=(MAX_MOTORS_PWM/2);
    7d8e:	f3 01       	movw	r30, r6
    7d90:	80 81       	ld	r24, Z
    7d92:	91 81       	ldd	r25, Z+1	; 0x01
    7d94:	f2 e0       	ldi	r31, 0x02	; 2
    7d96:	80 30       	cpi	r24, 0x00	; 0
    7d98:	9f 07       	cpc	r25, r31
    7d9a:	4c f0       	brlt	.+18     	; 0x7dae <obstacleAvoidance+0x2c6>
    7d9c:	8f ef       	ldi	r24, 0xFF	; 255
    7d9e:	91 e0       	ldi	r25, 0x01	; 1
    7da0:	f3 01       	movw	r30, r6
    7da2:	91 83       	std	Z+1, r25	; 0x01
    7da4:	80 83       	st	Z, r24
    7da6:	e9 81       	ldd	r30, Y+1	; 0x01
    7da8:	fa 81       	ldd	r31, Y+2	; 0x02
    7daa:	20 81       	ld	r18, Z
    7dac:	31 81       	ldd	r19, Z+1	; 0x01
	if (*pwmRight<-(MAX_MOTORS_PWM/2)) *pwmRight=-(MAX_MOTORS_PWM/2);
    7dae:	fe ef       	ldi	r31, 0xFE	; 254
    7db0:	21 30       	cpi	r18, 0x01	; 1
    7db2:	3f 07       	cpc	r19, r31
    7db4:	4c f4       	brge	.+18     	; 0x7dc8 <obstacleAvoidance+0x2e0>
    7db6:	81 e0       	ldi	r24, 0x01	; 1
    7db8:	9e ef       	ldi	r25, 0xFE	; 254
    7dba:	e9 81       	ldd	r30, Y+1	; 0x01
    7dbc:	fa 81       	ldd	r31, Y+2	; 0x02
    7dbe:	91 83       	std	Z+1, r25	; 0x01
    7dc0:	80 83       	st	Z, r24
    7dc2:	f3 01       	movw	r30, r6
    7dc4:	80 81       	ld	r24, Z
    7dc6:	91 81       	ldd	r25, Z+1	; 0x01
	if (*pwmLeft<-(MAX_MOTORS_PWM/2)) *pwmLeft=-(MAX_MOTORS_PWM/2);
    7dc8:	fe ef       	ldi	r31, 0xFE	; 254
    7dca:	81 30       	cpi	r24, 0x01	; 1
    7dcc:	9f 07       	cpc	r25, r31
    7dce:	2c f4       	brge	.+10     	; 0x7dda <obstacleAvoidance+0x2f2>
    7dd0:	81 e0       	ldi	r24, 0x01	; 1
    7dd2:	9e ef       	ldi	r25, 0xFE	; 254
    7dd4:	f3 01       	movw	r30, r6
    7dd6:	91 83       	std	Z+1, r25	; 0x01
    7dd8:	80 83       	st	Z, r24

}
    7dda:	28 96       	adiw	r28, 0x08	; 8
    7ddc:	0f b6       	in	r0, 0x3f	; 63
    7dde:	f8 94       	cli
    7de0:	de bf       	out	0x3e, r29	; 62
    7de2:	0f be       	out	0x3f, r0	; 63
    7de4:	cd bf       	out	0x3d, r28	; 61
    7de6:	cf 91       	pop	r28
    7de8:	df 91       	pop	r29
    7dea:	1f 91       	pop	r17
    7dec:	0f 91       	pop	r16
    7dee:	ff 90       	pop	r15
    7df0:	ef 90       	pop	r14
    7df2:	df 90       	pop	r13
    7df4:	cf 90       	pop	r12
    7df6:	bf 90       	pop	r11
    7df8:	af 90       	pop	r10
    7dfa:	9f 90       	pop	r9
    7dfc:	8f 90       	pop	r8
    7dfe:	7f 90       	pop	r7
    7e00:	6f 90       	pop	r6
    7e02:	5f 90       	pop	r5
    7e04:	4f 90       	pop	r4
    7e06:	3f 90       	pop	r3
    7e08:	2f 90       	pop	r2
    7e0a:	08 95       	ret
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	}

	if(currentSelector == 10) {	// force a little bit the upwards direction in vertical motion
		if(desL!=0 && desR!=0) {
    7e0c:	2b 81       	ldd	r18, Y+3	; 0x03
    7e0e:	3c 81       	ldd	r19, Y+4	; 0x04
    7e10:	21 15       	cp	r18, r1
    7e12:	31 05       	cpc	r19, r1
    7e14:	f1 f0       	breq	.+60     	; 0x7e52 <obstacleAvoidance+0x36a>
    7e16:	2d 81       	ldd	r18, Y+5	; 0x05
    7e18:	3e 81       	ldd	r19, Y+6	; 0x06
    7e1a:	21 15       	cp	r18, r1
    7e1c:	31 05       	cpc	r19, r1
    7e1e:	c9 f0       	breq	.+50     	; 0x7e52 <obstacleAvoidance+0x36a>
			if(currentAngle<270 && currentAngle>90) {
    7e20:	80 91 56 04 	lds	r24, 0x0456
    7e24:	90 91 57 04 	lds	r25, 0x0457
    7e28:	8b 55       	subi	r24, 0x5B	; 91
    7e2a:	90 40       	sbci	r25, 0x00	; 0
    7e2c:	83 3b       	cpi	r24, 0xB3	; 179
    7e2e:	91 05       	cpc	r25, r1
    7e30:	08 f0       	brcs	.+2      	; 0x7e34 <obstacleAvoidance+0x34c>
    7e32:	5f c0       	rjmp	.+190    	; 0x7ef2 <obstacleAvoidance+0x40a>
				*pwmLeft += 10;
    7e34:	f3 01       	movw	r30, r6
    7e36:	80 81       	ld	r24, Z
    7e38:	91 81       	ldd	r25, Z+1	; 0x01
    7e3a:	0a 96       	adiw	r24, 0x0a	; 10
    7e3c:	91 83       	std	Z+1, r25	; 0x01
    7e3e:	80 83       	st	Z, r24
				*pwmRight -= 10;
    7e40:	e9 81       	ldd	r30, Y+1	; 0x01
    7e42:	fa 81       	ldd	r31, Y+2	; 0x02
    7e44:	20 81       	ld	r18, Z
    7e46:	31 81       	ldd	r19, Z+1	; 0x01
    7e48:	2a 50       	subi	r18, 0x0A	; 10
    7e4a:	30 40       	sbci	r19, 0x00	; 0
    7e4c:	31 83       	std	Z+1, r19	; 0x01
    7e4e:	20 83       	st	Z, r18
    7e50:	92 cf       	rjmp	.-220    	; 0x7d76 <obstacleAvoidance+0x28e>
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	}

	if(currentSelector == 10) {	// force a little bit the upwards direction in vertical motion
		if(desL!=0 && desR!=0) {
    7e52:	e9 81       	ldd	r30, Y+1	; 0x01
    7e54:	fa 81       	ldd	r31, Y+2	; 0x02
    7e56:	20 81       	ld	r18, Z
    7e58:	31 81       	ldd	r19, Z+1	; 0x01
    7e5a:	8d cf       	rjmp	.-230    	; 0x7d76 <obstacleAvoidance+0x28e>
	}
	if(desR >=0) {
		res = (signed long int)desR + (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	} else {
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
    7e5c:	59 01       	movw	r10, r18
    7e5e:	cc 24       	eor	r12, r12
    7e60:	b7 fc       	sbrc	r11, 7
    7e62:	c0 94       	com	r12
    7e64:	dc 2c       	mov	r13, r12
    7e66:	c2 01       	movw	r24, r4
    7e68:	b1 01       	movw	r22, r2
    7e6a:	6e 19       	sub	r22, r14
    7e6c:	7f 09       	sbc	r23, r15
    7e6e:	80 0b       	sbc	r24, r16
    7e70:	91 0b       	sbc	r25, r17
    7e72:	a6 01       	movw	r20, r12
    7e74:	95 01       	movw	r18, r10
    7e76:	0e 94 76 58 	call	0xb0ec	; 0xb0ec <__mulsi3>
    7e7a:	e6 e0       	ldi	r30, 0x06	; 6
    7e7c:	95 95       	asr	r25
    7e7e:	87 95       	ror	r24
    7e80:	77 95       	ror	r23
    7e82:	67 95       	ror	r22
    7e84:	ea 95       	dec	r30
    7e86:	d1 f7       	brne	.-12     	; 0x7e7c <obstacleAvoidance+0x394>
    7e88:	26 1b       	sub	r18, r22
    7e8a:	37 0b       	sbc	r19, r23
    7e8c:	48 0b       	sbc	r20, r24
    7e8e:	59 0b       	sbc	r21, r25
    7e90:	da 01       	movw	r26, r20
    7e92:	c9 01       	movw	r24, r18
		*pwmRight = (signed int)res;
    7e94:	e9 81       	ldd	r30, Y+1	; 0x01
    7e96:	fa 81       	ldd	r31, Y+2	; 0x02
    7e98:	91 83       	std	Z+1, r25	; 0x01
    7e9a:	80 83       	st	Z, r24
    7e9c:	67 cf       	rjmp	.-306    	; 0x7d6c <obstacleAvoidance+0x284>
	// modify the velocity components based on sensor values
	if(desL >= 0) {
		res = (signed long int)desL + (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmLeft = (signed int)res;
	} else {
		res = (signed long int)desL - (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
    7e9e:	5a 01       	movw	r10, r20
    7ea0:	cc 24       	eor	r12, r12
    7ea2:	b7 fc       	sbrc	r11, 7
    7ea4:	c0 94       	com	r12
    7ea6:	dc 2c       	mov	r13, r12
    7ea8:	8f 81       	ldd	r24, Y+7	; 0x07
    7eaa:	98 85       	ldd	r25, Y+8	; 0x08
    7eac:	1c 01       	movw	r2, r24
    7eae:	44 24       	eor	r4, r4
    7eb0:	37 fc       	sbrc	r3, 7
    7eb2:	40 94       	com	r4
    7eb4:	54 2c       	mov	r5, r4
    7eb6:	79 01       	movw	r14, r18
    7eb8:	00 27       	eor	r16, r16
    7eba:	f7 fc       	sbrc	r15, 7
    7ebc:	00 95       	com	r16
    7ebe:	10 2f       	mov	r17, r16
    7ec0:	c8 01       	movw	r24, r16
    7ec2:	b7 01       	movw	r22, r14
    7ec4:	62 0d       	add	r22, r2
    7ec6:	73 1d       	adc	r23, r3
    7ec8:	84 1d       	adc	r24, r4
    7eca:	95 1d       	adc	r25, r5
    7ecc:	a6 01       	movw	r20, r12
    7ece:	95 01       	movw	r18, r10
    7ed0:	0e 94 76 58 	call	0xb0ec	; 0xb0ec <__mulsi3>
    7ed4:	a6 e0       	ldi	r26, 0x06	; 6
    7ed6:	95 95       	asr	r25
    7ed8:	87 95       	ror	r24
    7eda:	77 95       	ror	r23
    7edc:	67 95       	ror	r22
    7ede:	aa 95       	dec	r26
    7ee0:	d1 f7       	brne	.-12     	; 0x7ed6 <obstacleAvoidance+0x3ee>
    7ee2:	26 1b       	sub	r18, r22
    7ee4:	37 0b       	sbc	r19, r23
    7ee6:	48 0b       	sbc	r20, r24
    7ee8:	59 0b       	sbc	r21, r25
		*pwmLeft = (signed int)res;
    7eea:	f3 01       	movw	r30, r6
    7eec:	31 83       	std	Z+1, r19	; 0x01
    7eee:	20 83       	st	Z, r18
    7ef0:	1a cf       	rjmp	.-460    	; 0x7d26 <obstacleAvoidance+0x23e>
		if(desL!=0 && desR!=0) {
			if(currentAngle<270 && currentAngle>90) {
				*pwmLeft += 10;
				*pwmRight -= 10;
			} else {
				*pwmLeft -= 10;
    7ef2:	f3 01       	movw	r30, r6
    7ef4:	80 81       	ld	r24, Z
    7ef6:	91 81       	ldd	r25, Z+1	; 0x01
    7ef8:	0a 97       	sbiw	r24, 0x0a	; 10
    7efa:	91 83       	std	Z+1, r25	; 0x01
    7efc:	80 83       	st	Z, r24
				*pwmRight += 10;
    7efe:	e9 81       	ldd	r30, Y+1	; 0x01
    7f00:	fa 81       	ldd	r31, Y+2	; 0x02
    7f02:	20 81       	ld	r18, Z
    7f04:	31 81       	ldd	r19, Z+1	; 0x01
    7f06:	26 5f       	subi	r18, 0xF6	; 246
    7f08:	3f 4f       	sbci	r19, 0xFF	; 255
    7f0a:	31 83       	std	Z+1, r19	; 0x01
    7f0c:	20 83       	st	Z, r18
    7f0e:	33 cf       	rjmp	.-410    	; 0x7d76 <obstacleAvoidance+0x28e>

00007f10 <cliffDetected>:


char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    7f10:	80 91 79 02 	lds	r24, 0x0279
    7f14:	90 91 7a 02 	lds	r25, 0x027A
    7f18:	21 e0       	ldi	r18, 0x01	; 1
    7f1a:	84 3a       	cpi	r24, 0xA4	; 164
    7f1c:	92 07       	cpc	r25, r18
    7f1e:	d4 f0       	brlt	.+52     	; 0x7f54 <cliffDetected+0x44>
    7f20:	80 91 7b 02 	lds	r24, 0x027B
    7f24:	90 91 7c 02 	lds	r25, 0x027C
    7f28:	21 e0       	ldi	r18, 0x01	; 1
    7f2a:	84 3a       	cpi	r24, 0xA4	; 164
    7f2c:	92 07       	cpc	r25, r18
    7f2e:	94 f0       	brlt	.+36     	; 0x7f54 <cliffDetected+0x44>
    7f30:	80 91 7d 02 	lds	r24, 0x027D
    7f34:	90 91 7e 02 	lds	r25, 0x027E
    7f38:	21 e0       	ldi	r18, 0x01	; 1
    7f3a:	84 3a       	cpi	r24, 0xA4	; 164
    7f3c:	92 07       	cpc	r25, r18
    7f3e:	74 f0       	brlt	.+28     	; 0x7f5c <cliffDetected+0x4c>
	//if(proximityResult[8]<(proximityOffset[8]>>1) || proximityResult[9]<(proximityOffset[9]>>1) || proximityResult[10]<(proximityOffset[10]>>1) || proximityResult[11]<(proximityOffset[11]>>1)) {
		return 1;
    7f40:	81 e0       	ldi	r24, 0x01	; 1
    7f42:	20 91 7f 02 	lds	r18, 0x027F
    7f46:	30 91 80 02 	lds	r19, 0x0280
    7f4a:	91 e0       	ldi	r25, 0x01	; 1
    7f4c:	24 3a       	cpi	r18, 0xA4	; 164
    7f4e:	39 07       	cpc	r19, r25
    7f50:	1c f4       	brge	.+6      	; 0x7f58 <cliffDetected+0x48>
	} else {
		return 0;
	}


}
    7f52:	08 95       	ret
char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
	//if(proximityResult[8]<(proximityOffset[8]>>1) || proximityResult[9]<(proximityOffset[9]>>1) || proximityResult[10]<(proximityOffset[10]>>1) || proximityResult[11]<(proximityOffset[11]>>1)) {
		return 1;
    7f54:	81 e0       	ldi	r24, 0x01	; 1
    7f56:	08 95       	ret
    7f58:	80 e0       	ldi	r24, 0x00	; 0
    7f5a:	08 95       	ret
    7f5c:	81 e0       	ldi	r24, 0x01	; 1
	} else {
		return 0;
	}


}
    7f5e:	08 95       	ret

00007f60 <enableObstacleAvoidance>:

void enableObstacleAvoidance() {
	obstacleAvoidanceEnabled=1;
    7f60:	81 e0       	ldi	r24, 0x01	; 1
    7f62:	80 93 88 04 	sts	0x0488, r24
}
    7f66:	08 95       	ret

00007f68 <disableObstacleAvoidance>:

void disableObstacleAvoidance() {
	obstacleAvoidanceEnabled=0;
    7f68:	10 92 88 04 	sts	0x0488, r1
}
    7f6c:	08 95       	ret

00007f6e <enableCliffAvoidance>:

void enableCliffAvoidance() {
	cliffAvoidanceEnabled=1;
    7f6e:	81 e0       	ldi	r24, 0x01	; 1
    7f70:	80 93 89 04 	sts	0x0489, r24
}
    7f74:	08 95       	ret

00007f76 <disableCliffAvoidance>:

void disableCliffAvoidance() {
	cliffAvoidanceEnabled=0;
    7f76:	10 92 89 04 	sts	0x0489, r1
}
    7f7a:	08 95       	ret

00007f7c <initRGBleds>:
	// Period freq = Fosc/TOP (max timer value) => TOP = Fosc/period freq
	// We need a frequency of about 30 KHz => 8000000/30000 = 266
	// The waveform generation mode let us chose the TOP value to be 256
	// thus we get period freq = 8000000/256 = 31250 Hz

	TCCR1A = 0;
    7f7c:	a0 e8       	ldi	r26, 0x80	; 128
    7f7e:	b0 e0       	ldi	r27, 0x00	; 0
    7f80:	1c 92       	st	X, r1
	TCCR1B = 0;
    7f82:	e1 e8       	ldi	r30, 0x81	; 129
    7f84:	f0 e0       	ldi	r31, 0x00	; 0
    7f86:	10 82       	st	Z, r1

	// enable OCA, OCB, OCC; clear on match, set at bottom
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << COM1C1) | (1 << WGM10); 	
    7f88:	8c 91       	ld	r24, X
    7f8a:	89 6a       	ori	r24, 0xA9	; 169
    7f8c:	8c 93       	st	X, r24
	// mode 5 => fast-pwm 8 bit; no prescaler
	TCCR1B |= (1 << WGM12) | (1 << CS10);										
    7f8e:	80 81       	ld	r24, Z
    7f90:	89 60       	ori	r24, 0x09	; 9
    7f92:	80 83       	st	Z, r24
	// the values for the leds pwm goes from 0 (max power on) to 255 (off)
	OCR1A = pwm_red;
    7f94:	80 91 0c 02 	lds	r24, 0x020C
    7f98:	90 e0       	ldi	r25, 0x00	; 0
    7f9a:	90 93 89 00 	sts	0x0089, r25
    7f9e:	80 93 88 00 	sts	0x0088, r24
	OCR1B = pwm_green;
    7fa2:	80 91 0d 02 	lds	r24, 0x020D
    7fa6:	90 e0       	ldi	r25, 0x00	; 0
    7fa8:	90 93 8b 00 	sts	0x008B, r25
    7fac:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = pwm_blue;
    7fb0:	80 91 0e 02 	lds	r24, 0x020E
    7fb4:	90 e0       	ldi	r25, 0x00	; 0
    7fb6:	90 93 8d 00 	sts	0x008D, r25
    7fba:	80 93 8c 00 	sts	0x008C, r24

}
    7fbe:	08 95       	ret

00007fc0 <toggleBlueLed>:

void toggleBlueLed() {

	blinkState = 1 - blinkState;
    7fc0:	81 e0       	ldi	r24, 0x01	; 1
    7fc2:	90 91 2b 03 	lds	r25, 0x032B
    7fc6:	89 1b       	sub	r24, r25
    7fc8:	80 93 2b 03 	sts	0x032B, r24

	if(blinkState) {
    7fcc:	88 23       	and	r24, r24
    7fce:	39 f4       	brne	.+14     	; 0x7fde <toggleBlueLed+0x1e>
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
		OCR1C = 255;
	} else {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC to get the maximum output power; this is due to the fact 
    7fd0:	80 91 80 00 	lds	r24, 0x0080
    7fd4:	87 7f       	andi	r24, 0xF7	; 247
    7fd6:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// that the minimum duty cycle when the output compare is enable is 1 
    7fda:	2f 98       	cbi	0x05, 7	; 5
    7fdc:	08 95       	ret
void toggleBlueLed() {

	blinkState = 1 - blinkState;

	if(blinkState) {
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
    7fde:	80 91 80 00 	lds	r24, 0x0080
    7fe2:	88 60       	ori	r24, 0x08	; 8
    7fe4:	80 93 80 00 	sts	0x0080, r24
		OCR1C = 255;
    7fe8:	8f ef       	ldi	r24, 0xFF	; 255
    7fea:	90 e0       	ldi	r25, 0x00	; 0
    7fec:	90 93 8d 00 	sts	0x008D, r25
    7ff0:	80 93 8c 00 	sts	0x008C, r24
    7ff4:	08 95       	ret

00007ff6 <updateRedLed>:

}

void updateRedLed(unsigned char value) {

	if(value == 0) {
    7ff6:	88 23       	and	r24, r24
    7ff8:	59 f0       	breq	.+22     	; 0x8010 <updateRedLed+0x1a>
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1A1);	// always enable OCA in case it was disabled
    7ffa:	90 91 80 00 	lds	r25, 0x0080
    7ffe:	90 68       	ori	r25, 0x80	; 128
    8000:	90 93 80 00 	sts	0x0080, r25
		OCR1A = value;
    8004:	90 e0       	ldi	r25, 0x00	; 0
    8006:	90 93 89 00 	sts	0x0089, r25
    800a:	80 93 88 00 	sts	0x0088, r24
    800e:	08 95       	ret
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
    8010:	80 91 80 00 	lds	r24, 0x0080
    8014:	8f 77       	andi	r24, 0x7F	; 127
    8016:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
    801a:	2d 98       	cbi	0x05, 5	; 5
    801c:	08 95       	ret

0000801e <updateGreenLed>:

}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
    801e:	88 23       	and	r24, r24
    8020:	59 f0       	breq	.+22     	; 0x8038 <updateGreenLed+0x1a>
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
	} else {	
		TCCR1A |= (1 << COM1B1);	// always enable OCA in case it was disabled
    8022:	90 91 80 00 	lds	r25, 0x0080
    8026:	90 62       	ori	r25, 0x20	; 32
    8028:	90 93 80 00 	sts	0x0080, r25
		OCR1B = value;
    802c:	90 e0       	ldi	r25, 0x00	; 0
    802e:	90 93 8b 00 	sts	0x008B, r25
    8032:	80 93 8a 00 	sts	0x008A, r24
    8036:	08 95       	ret
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
    8038:	80 91 80 00 	lds	r24, 0x0080
    803c:	8f 7d       	andi	r24, 0xDF	; 223
    803e:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
    8042:	2e 98       	cbi	0x05, 6	; 5
    8044:	08 95       	ret

00008046 <updateBlueLed>:

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
    8046:	88 23       	and	r24, r24
    8048:	59 f0       	breq	.+22     	; 0x8060 <updateBlueLed+0x1a>
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1C1);	// always enable OCA in case it was disabled
    804a:	90 91 80 00 	lds	r25, 0x0080
    804e:	98 60       	ori	r25, 0x08	; 8
    8050:	90 93 80 00 	sts	0x0080, r25
		OCR1C = value;
    8054:	90 e0       	ldi	r25, 0x00	; 0
    8056:	90 93 8d 00 	sts	0x008D, r25
    805a:	80 93 8c 00 	sts	0x008C, r24
    805e:	08 95       	ret
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
    8060:	80 91 80 00 	lds	r24, 0x0080
    8064:	87 7f       	andi	r24, 0xF7	; 247
    8066:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
    806a:	2f 98       	cbi	0x05, 7	; 5
    806c:	08 95       	ret

0000806e <setGreenLed>:

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    806e:	83 30       	cpi	r24, 0x03	; 3
    8070:	09 f4       	brne	.+2      	; 0x8074 <setGreenLed+0x6>
    8072:	5a c0       	rjmp	.+180    	; 0x8128 <setGreenLed+0xba>
    8074:	84 30       	cpi	r24, 0x04	; 4
    8076:	80 f0       	brcs	.+32     	; 0x8098 <setGreenLed+0x2a>
    8078:	85 30       	cpi	r24, 0x05	; 5
    807a:	09 f4       	brne	.+2      	; 0x807e <setGreenLed+0x10>
    807c:	41 c0       	rjmp	.+130    	; 0x8100 <setGreenLed+0x92>
    807e:	85 30       	cpi	r24, 0x05	; 5
    8080:	d0 f4       	brcc	.+52     	; 0x80b6 <setGreenLed+0x48>
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
    8082:	66 23       	and	r22, r22
    8084:	09 f4       	brne	.+2      	; 0x8088 <setGreenLed+0x1a>
    8086:	68 c0       	rjmp	.+208    	; 0x8158 <setGreenLed+0xea>
    8088:	80 91 0b 01 	lds	r24, 0x010B
    808c:	8f 7e       	andi	r24, 0xEF	; 239
    808e:	80 93 0b 01 	sts	0x010B, r24
    8092:	80 91 0b 01 	lds	r24, 0x010B
    8096:	08 95       	ret

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    8098:	81 30       	cpi	r24, 0x01	; 1
    809a:	e1 f1       	breq	.+120    	; 0x8114 <setGreenLed+0xa6>
    809c:	82 30       	cpi	r24, 0x02	; 2
    809e:	80 f0       	brcs	.+32     	; 0x80c0 <setGreenLed+0x52>
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
    80a0:	66 23       	and	r22, r22
    80a2:	09 f4       	brne	.+2      	; 0x80a6 <setGreenLed+0x38>
    80a4:	46 c0       	rjmp	.+140    	; 0x8132 <setGreenLed+0xc4>
    80a6:	80 91 0b 01 	lds	r24, 0x010B
    80aa:	8b 7f       	andi	r24, 0xFB	; 251
    80ac:	80 93 0b 01 	sts	0x010B, r24
    80b0:	80 91 0b 01 	lds	r24, 0x010B
    80b4:	08 95       	ret

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    80b6:	86 30       	cpi	r24, 0x06	; 6
    80b8:	c9 f0       	breq	.+50     	; 0x80ec <setGreenLed+0x7e>
    80ba:	87 30       	cpi	r24, 0x07	; 7
    80bc:	61 f0       	breq	.+24     	; 0x80d6 <setGreenLed+0x68>
    80be:	08 95       	ret

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
    80c0:	66 23       	and	r22, r22
    80c2:	09 f4       	brne	.+2      	; 0x80c6 <setGreenLed+0x58>
    80c4:	51 c0       	rjmp	.+162    	; 0x8168 <setGreenLed+0xfa>
    80c6:	80 91 0b 01 	lds	r24, 0x010B
    80ca:	8e 7f       	andi	r24, 0xFE	; 254
    80cc:	80 93 0b 01 	sts	0x010B, r24
    80d0:	80 91 0b 01 	lds	r24, 0x010B
    80d4:	08 95       	ret
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
				break;

		case 7:	isOn?GREEN_LED7_ON:GREEN_LED7_OFF;
    80d6:	66 23       	and	r22, r22
    80d8:	09 f0       	breq	.+2      	; 0x80dc <setGreenLed+0x6e>
    80da:	5e c0       	rjmp	.+188    	; 0x8198 <setGreenLed+0x12a>
    80dc:	80 91 0b 01 	lds	r24, 0x010B
    80e0:	80 68       	ori	r24, 0x80	; 128
    80e2:	80 93 0b 01 	sts	0x010B, r24
    80e6:	80 91 0b 01 	lds	r24, 0x010B
    80ea:	08 95       	ret
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
    80ec:	66 23       	and	r22, r22
    80ee:	49 f1       	breq	.+82     	; 0x8142 <setGreenLed+0xd4>
    80f0:	80 91 0b 01 	lds	r24, 0x010B
    80f4:	8f 7b       	andi	r24, 0xBF	; 191
    80f6:	80 93 0b 01 	sts	0x010B, r24
    80fa:	80 91 0b 01 	lds	r24, 0x010B
    80fe:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
    8100:	66 23       	and	r22, r22
    8102:	d1 f1       	breq	.+116    	; 0x8178 <setGreenLed+0x10a>
    8104:	80 91 0b 01 	lds	r24, 0x010B
    8108:	8f 7d       	andi	r24, 0xDF	; 223
    810a:	80 93 0b 01 	sts	0x010B, r24
    810e:	80 91 0b 01 	lds	r24, 0x010B
    8112:	08 95       	ret
	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
    8114:	66 23       	and	r22, r22
    8116:	c1 f1       	breq	.+112    	; 0x8188 <setGreenLed+0x11a>
    8118:	80 91 0b 01 	lds	r24, 0x010B
    811c:	8d 7f       	andi	r24, 0xFD	; 253
    811e:	80 93 0b 01 	sts	0x010B, r24
    8122:	80 91 0b 01 	lds	r24, 0x010B
    8126:	08 95       	ret
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
    8128:	66 23       	and	r22, r22
    812a:	99 f0       	breq	.+38     	; 0x8152 <setGreenLed+0xe4>
    812c:	a3 98       	cbi	0x14, 3	; 20
    812e:	84 b3       	in	r24, 0x14	; 20
    8130:	08 95       	ret
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
    8132:	80 91 0b 01 	lds	r24, 0x010B
    8136:	84 60       	ori	r24, 0x04	; 4
    8138:	80 93 0b 01 	sts	0x010B, r24
    813c:	80 91 0b 01 	lds	r24, 0x010B
    8140:	08 95       	ret
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
    8142:	80 91 0b 01 	lds	r24, 0x010B
    8146:	80 64       	ori	r24, 0x40	; 64
    8148:	80 93 0b 01 	sts	0x010B, r24
    814c:	80 91 0b 01 	lds	r24, 0x010B
    8150:	08 95       	ret
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
    8152:	a3 9a       	sbi	0x14, 3	; 20
    8154:	84 b3       	in	r24, 0x14	; 20
    8156:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
    8158:	80 91 0b 01 	lds	r24, 0x010B
    815c:	80 61       	ori	r24, 0x10	; 16
    815e:	80 93 0b 01 	sts	0x010B, r24
    8162:	80 91 0b 01 	lds	r24, 0x010B
    8166:	08 95       	ret

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
    8168:	80 91 0b 01 	lds	r24, 0x010B
    816c:	81 60       	ori	r24, 0x01	; 1
    816e:	80 93 0b 01 	sts	0x010B, r24
    8172:	80 91 0b 01 	lds	r24, 0x010B
    8176:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
    8178:	80 91 0b 01 	lds	r24, 0x010B
    817c:	80 62       	ori	r24, 0x20	; 32
    817e:	80 93 0b 01 	sts	0x010B, r24
    8182:	80 91 0b 01 	lds	r24, 0x010B
    8186:	08 95       	ret
	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
    8188:	80 91 0b 01 	lds	r24, 0x010B
    818c:	82 60       	ori	r24, 0x02	; 2
    818e:	80 93 0b 01 	sts	0x010B, r24
    8192:	80 91 0b 01 	lds	r24, 0x010B
    8196:	08 95       	ret
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
				break;

		case 7:	isOn?GREEN_LED7_ON:GREEN_LED7_OFF;
    8198:	80 91 0b 01 	lds	r24, 0x010B
    819c:	8f 77       	andi	r24, 0x7F	; 127
    819e:	80 93 0b 01 	sts	0x010B, r24
    81a2:	80 91 0b 01 	lds	r24, 0x010B
    81a6:	08 95       	ret

000081a8 <turnOffGreenLeds>:

}

void turnOffGreenLeds() {

	GREEN_LED0_OFF;
    81a8:	eb e0       	ldi	r30, 0x0B	; 11
    81aa:	f1 e0       	ldi	r31, 0x01	; 1
    81ac:	80 81       	ld	r24, Z
    81ae:	81 60       	ori	r24, 0x01	; 1
    81b0:	80 83       	st	Z, r24
	GREEN_LED1_OFF;
    81b2:	80 81       	ld	r24, Z
    81b4:	82 60       	ori	r24, 0x02	; 2
    81b6:	80 83       	st	Z, r24
	GREEN_LED2_OFF;
    81b8:	80 81       	ld	r24, Z
    81ba:	84 60       	ori	r24, 0x04	; 4
    81bc:	80 83       	st	Z, r24
	GREEN_LED3_OFF;
    81be:	a3 9a       	sbi	0x14, 3	; 20
	GREEN_LED4_OFF;
    81c0:	80 81       	ld	r24, Z
    81c2:	80 61       	ori	r24, 0x10	; 16
    81c4:	80 83       	st	Z, r24
	GREEN_LED5_OFF;
    81c6:	80 81       	ld	r24, Z
    81c8:	80 62       	ori	r24, 0x20	; 32
    81ca:	80 83       	st	Z, r24
	GREEN_LED6_OFF;
    81cc:	80 81       	ld	r24, Z
    81ce:	80 64       	ori	r24, 0x40	; 64
    81d0:	80 83       	st	Z, r24
	GREEN_LED7_OFF;
    81d2:	80 81       	ld	r24, Z
    81d4:	80 68       	ori	r24, 0x80	; 128
    81d6:	80 83       	st	Z, r24

}
    81d8:	08 95       	ret

000081da <turnOnGreenLeds>:


void turnOnGreenLeds() {

	GREEN_LED0_ON;
    81da:	eb e0       	ldi	r30, 0x0B	; 11
    81dc:	f1 e0       	ldi	r31, 0x01	; 1
    81de:	80 81       	ld	r24, Z
    81e0:	8e 7f       	andi	r24, 0xFE	; 254
    81e2:	80 83       	st	Z, r24
	GREEN_LED1_ON;
    81e4:	80 81       	ld	r24, Z
    81e6:	8d 7f       	andi	r24, 0xFD	; 253
    81e8:	80 83       	st	Z, r24
	GREEN_LED2_ON;
    81ea:	80 81       	ld	r24, Z
    81ec:	8b 7f       	andi	r24, 0xFB	; 251
    81ee:	80 83       	st	Z, r24
	GREEN_LED3_ON;
    81f0:	a3 98       	cbi	0x14, 3	; 20
	GREEN_LED4_ON;
    81f2:	80 81       	ld	r24, Z
    81f4:	8f 7e       	andi	r24, 0xEF	; 239
    81f6:	80 83       	st	Z, r24
	GREEN_LED5_ON;
    81f8:	80 81       	ld	r24, Z
    81fa:	8f 7d       	andi	r24, 0xDF	; 223
    81fc:	80 83       	st	Z, r24
	GREEN_LED6_ON;
    81fe:	80 81       	ld	r24, Z
    8200:	8f 7b       	andi	r24, 0xBF	; 191
    8202:	80 83       	st	Z, r24
	GREEN_LED7_ON;
    8204:	80 81       	ld	r24, Z
    8206:	8f 77       	andi	r24, 0x7F	; 127
    8208:	80 83       	st	Z, r24

}
    820a:	08 95       	ret

0000820c <initAccelerometer>:

void initAccelerometer() {

	unsigned char ret;

	i2c_init();		// init I2C bus
    820c:	0e 94 34 1e 	call	0x3c68	; 0x3c68 <i2c_init>
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    8210:	80 91 14 02 	lds	r24, 0x0214
    8214:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    8218:	88 23       	and	r24, r24
    821a:	49 f4       	brne	.+18     	; 0x822e <initAccelerometer+0x22>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    821c:	86 e1       	ldi	r24, 0x16	; 22
    821e:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    8222:	85 e4       	ldi	r24, 0x45	; 69
    8224:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    8228:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <i2c_stop>
    822c:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    822e:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <i2c_stop>
	i2c_init();		// init I2C bus

	ret = initMMA7455L();

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
    8232:	86 ea       	ldi	r24, 0xA6	; 166
    8234:	90 e0       	ldi	r25, 0x00	; 0
    8236:	90 93 15 02 	sts	0x0215, r25
    823a:	80 93 14 02 	sts	0x0214, r24
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    823e:	86 ea       	ldi	r24, 0xA6	; 166
    8240:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    8244:	88 23       	and	r24, r24
    8246:	41 f5       	brne	.+80     	; 0x8298 <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    8248:	8d e2       	ldi	r24, 0x2D	; 45
    824a:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <i2c_write>
        i2c_write(0x08);	// measurement mode
    824e:	88 e0       	ldi	r24, 0x08	; 8
    8250:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    8254:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    8258:	80 91 14 02 	lds	r24, 0x0214
    825c:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    8260:	88 23       	and	r24, r24
    8262:	d1 f4       	brne	.+52     	; 0x8298 <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    8264:	81 e3       	ldi	r24, 0x31	; 49
    8266:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    826a:	80 e0       	ldi	r24, 0x00	; 0
    826c:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    8270:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    8274:	80 91 14 02 	lds	r24, 0x0214
    8278:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    827c:	88 23       	and	r24, r24
    827e:	61 f4       	brne	.+24     	; 0x8298 <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    8280:	8c e2       	ldi	r24, 0x2C	; 44
    8282:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    8286:	89 e0       	ldi	r24, 0x09	; 9
    8288:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    828c:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <i2c_stop>
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
		} else {
			useAccel = USE_ADXL345;
    8290:	81 e0       	ldi	r24, 0x01	; 1
    8292:	80 93 3f 04 	sts	0x043F, r24
    8296:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    8298:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <i2c_stop>

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
    829c:	82 e0       	ldi	r24, 0x02	; 2
    829e:	80 93 3f 04 	sts	0x043F, r24
    82a2:	08 95       	ret

000082a4 <initMMA7455L>:
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    82a4:	80 91 14 02 	lds	r24, 0x0214
    82a8:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    82ac:	88 23       	and	r24, r24
    82ae:	51 f4       	brne	.+20     	; 0x82c4 <initMMA7455L+0x20>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    82b0:	86 e1       	ldi	r24, 0x16	; 22
    82b2:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    82b6:	85 e4       	ldi	r24, 0x45	; 69
    82b8:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    82bc:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <i2c_stop>
    }

	return 0;				// configuration ok
    82c0:	80 e0       	ldi	r24, 0x00	; 0

}
    82c2:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    82c4:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <i2c_stop>
		return 1;
    82c8:	81 e0       	ldi	r24, 0x01	; 1
    82ca:	08 95       	ret

000082cc <initADXL345>:
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    82cc:	80 91 14 02 	lds	r24, 0x0214
    82d0:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    82d4:	88 23       	and	r24, r24
    82d6:	31 f5       	brne	.+76     	; 0x8324 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    82d8:	8d e2       	ldi	r24, 0x2D	; 45
    82da:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <i2c_write>
        i2c_write(0x08);	// measurement mode
    82de:	88 e0       	ldi	r24, 0x08	; 8
    82e0:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    82e4:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    82e8:	80 91 14 02 	lds	r24, 0x0214
    82ec:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    82f0:	88 23       	and	r24, r24
    82f2:	c1 f4       	brne	.+48     	; 0x8324 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    82f4:	81 e3       	ldi	r24, 0x31	; 49
    82f6:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    82fa:	80 e0       	ldi	r24, 0x00	; 0
    82fc:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    8300:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    8304:	80 91 14 02 	lds	r24, 0x0214
    8308:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    830c:	88 23       	and	r24, r24
    830e:	51 f4       	brne	.+20     	; 0x8324 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    8310:	8c e2       	ldi	r24, 0x2C	; 44
    8312:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    8316:	89 e0       	ldi	r24, 0x09	; 9
    8318:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    831c:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <i2c_stop>
    }

	return 0;
    8320:	80 e0       	ldi	r24, 0x00	; 0

}
    8322:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    8324:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <i2c_stop>
		return 1;
    8328:	81 e0       	ldi	r24, 0x01	; 1
    832a:	08 95       	ret

0000832c <readAccelXY>:

	return 0;

}

void readAccelXY() {
    832c:	ff 92       	push	r15
    832e:	0f 93       	push	r16
    8330:	1f 93       	push	r17
    8332:	df 93       	push	r29
    8334:	cf 93       	push	r28
    8336:	0f 92       	push	r0
    8338:	cd b7       	in	r28, 0x3d	; 61
    833a:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[4];

	if(useAccel == USE_MMAX7455L) {
    833c:	80 91 3f 04 	lds	r24, 0x043F
    8340:	88 23       	and	r24, r24
    8342:	91 f0       	breq	.+36     	; 0x8368 <readAccelXY+0x3c>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else if(useAccel == USE_ADXL345) {
    8344:	81 30       	cpi	r24, 0x01	; 1
    8346:	09 f4       	brne	.+2      	; 0x834a <readAccelXY+0x1e>
    8348:	88 c0       	rjmp	.+272    	; 0x845a <readAccelXY+0x12e>
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else {

		accX = 0;
    834a:	10 92 41 04 	sts	0x0441, r1
    834e:	10 92 40 04 	sts	0x0440, r1
		accY = 0;
    8352:	10 92 43 04 	sts	0x0443, r1
    8356:	10 92 42 04 	sts	0x0442, r1

	}

}
    835a:	0f 90       	pop	r0
    835c:	cf 91       	pop	r28
    835e:	df 91       	pop	r29
    8360:	1f 91       	pop	r17
    8362:	0f 91       	pop	r16
    8364:	ff 90       	pop	r15
    8366:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    8368:	80 91 14 02 	lds	r24, 0x0214
    836c:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    8370:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
		i2c_write(0x32);											// sends address to read from (X LSB)
    8372:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    8376:	80 91 14 02 	lds	r24, 0x0214
    837a:	8f 5f       	subi	r24, 0xFF	; 255
    837c:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <i2c_rep_start>

		for(i=0; i<3; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    8380:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <i2c_readAck>
    8384:	08 2f       	mov	r16, r24
    8386:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <i2c_readAck>
    838a:	f8 2e       	mov	r15, r24
    838c:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <i2c_readAck>
    8390:	18 2f       	mov	r17, r24
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    8392:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <i2c_readNak>
		i2c_stop();													// set stop conditon = release bus
    8396:	89 83       	std	Y+1, r24	; 0x01
    8398:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    839c:	90 91 8e 0b 	lds	r25, 0x0B8E
    83a0:	89 81       	ldd	r24, Y+1	; 0x01
    83a2:	99 23       	and	r25, r25
    83a4:	39 f1       	breq	.+78     	; 0x83f4 <readAccelXY+0xc8>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    83a6:	4f 2d       	mov	r20, r15
    83a8:	55 27       	eor	r21, r21
    83aa:	47 fd       	sbrc	r20, 7
    83ac:	50 95       	com	r21
    83ae:	54 2f       	mov	r21, r20
    83b0:	44 27       	eor	r20, r20
    83b2:	60 2f       	mov	r22, r16
    83b4:	77 27       	eor	r23, r23
    83b6:	67 fd       	sbrc	r22, 7
    83b8:	70 95       	com	r23
    83ba:	46 2b       	or	r20, r22
    83bc:	57 2b       	or	r21, r23
    83be:	50 93 41 04 	sts	0x0441, r21
    83c2:	40 93 40 04 	sts	0x0440, r20
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    83c6:	28 2f       	mov	r18, r24
    83c8:	33 27       	eor	r19, r19
    83ca:	27 fd       	sbrc	r18, 7
    83cc:	30 95       	com	r19
    83ce:	32 2f       	mov	r19, r18
    83d0:	22 27       	eor	r18, r18
    83d2:	81 2f       	mov	r24, r17
    83d4:	99 27       	eor	r25, r25
    83d6:	87 fd       	sbrc	r24, 7
    83d8:	90 95       	com	r25
    83da:	28 2b       	or	r18, r24
    83dc:	39 2b       	or	r19, r25
    83de:	30 93 43 04 	sts	0x0443, r19
    83e2:	20 93 42 04 	sts	0x0442, r18
		accX = 0;
		accY = 0;

	}

}
    83e6:	0f 90       	pop	r0
    83e8:	cf 91       	pop	r28
    83ea:	df 91       	pop	r29
    83ec:	1f 91       	pop	r17
    83ee:	0f 91       	pop	r16
    83f0:	ff 90       	pop	r15
    83f2:	08 95       	ret

		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    83f4:	4f 2d       	mov	r20, r15
    83f6:	55 27       	eor	r21, r21
    83f8:	47 fd       	sbrc	r20, 7
    83fa:	50 95       	com	r21
    83fc:	54 2f       	mov	r21, r20
    83fe:	44 27       	eor	r20, r20
    8400:	60 2f       	mov	r22, r16
    8402:	77 27       	eor	r23, r23
    8404:	67 fd       	sbrc	r22, 7
    8406:	70 95       	com	r23
    8408:	46 2b       	or	r20, r22
    840a:	57 2b       	or	r21, r23
    840c:	60 91 46 04 	lds	r22, 0x0446
    8410:	70 91 47 04 	lds	r23, 0x0447
    8414:	46 1b       	sub	r20, r22
    8416:	57 0b       	sbc	r21, r23
    8418:	50 93 41 04 	sts	0x0441, r21
    841c:	40 93 40 04 	sts	0x0440, r20
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    8420:	28 2f       	mov	r18, r24
    8422:	33 27       	eor	r19, r19
    8424:	27 fd       	sbrc	r18, 7
    8426:	30 95       	com	r19
    8428:	32 2f       	mov	r19, r18
    842a:	22 27       	eor	r18, r18
    842c:	81 2f       	mov	r24, r17
    842e:	99 27       	eor	r25, r25
    8430:	87 fd       	sbrc	r24, 7
    8432:	90 95       	com	r25
    8434:	28 2b       	or	r18, r24
    8436:	39 2b       	or	r19, r25
    8438:	80 91 48 04 	lds	r24, 0x0448
    843c:	90 91 49 04 	lds	r25, 0x0449
    8440:	28 1b       	sub	r18, r24
    8442:	39 0b       	sbc	r19, r25
    8444:	30 93 43 04 	sts	0x0443, r19
    8448:	20 93 42 04 	sts	0x0442, r18
		accX = 0;
		accY = 0;

	}

}
    844c:	0f 90       	pop	r0
    844e:	cf 91       	pop	r28
    8450:	df 91       	pop	r29
    8452:	1f 91       	pop	r17
    8454:	0f 91       	pop	r16
    8456:	ff 90       	pop	r15
    8458:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    845a:	80 91 14 02 	lds	r24, 0x0214
    845e:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    8462:	82 e3       	ldi	r24, 0x32	; 50
    8464:	86 cf       	rjmp	.-244    	; 0x8372 <readAccelXY+0x46>

00008466 <readAccelXYZ>:

	}

}

void readAccelXYZ() {
    8466:	df 93       	push	r29
    8468:	cf 93       	push	r28
    846a:	00 d0       	rcall	.+0      	; 0x846c <readAccelXYZ+0x6>
    846c:	00 d0       	rcall	.+0      	; 0x846e <readAccelXYZ+0x8>
    846e:	cd b7       	in	r28, 0x3d	; 61
    8470:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[6];

	if(useAccel == USE_MMAX7455L) {
    8472:	80 91 3f 04 	lds	r24, 0x043F
    8476:	88 23       	and	r24, r24
    8478:	c1 f0       	breq	.+48     	; 0x84aa <readAccelXYZ+0x44>
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)buff[5]<<8)|buff[4]);				// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    847a:	81 30       	cpi	r24, 0x01	; 1
    847c:	09 f4       	brne	.+2      	; 0x8480 <readAccelXYZ+0x1a>
    847e:	93 c0       	rjmp	.+294    	; 0x85a6 <readAccelXYZ+0x140>
			accZ = (((signed int)buff[5]<<8)|buff[4]);				// Z axis
		}

	} else {

		accX = 0;
    8480:	10 92 41 04 	sts	0x0441, r1
    8484:	10 92 40 04 	sts	0x0440, r1
		accY = 0;
    8488:	10 92 43 04 	sts	0x0443, r1
    848c:	10 92 42 04 	sts	0x0442, r1
		accZ = 0;
    8490:	10 92 45 04 	sts	0x0445, r1
    8494:	10 92 44 04 	sts	0x0444, r1

	}

}
    8498:	26 96       	adiw	r28, 0x06	; 6
    849a:	0f b6       	in	r0, 0x3f	; 63
    849c:	f8 94       	cli
    849e:	de bf       	out	0x3e, r29	; 62
    84a0:	0f be       	out	0x3f, r0	; 63
    84a2:	cd bf       	out	0x3d, r28	; 61
    84a4:	cf 91       	pop	r28
    84a6:	df 91       	pop	r29
    84a8:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    84aa:	80 91 14 02 	lds	r24, 0x0214
    84ae:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    84b2:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
		i2c_write(0x32);											// sends address to read from (X LSB)
    84b4:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    84b8:	80 91 14 02 	lds	r24, 0x0214
    84bc:	8f 5f       	subi	r24, 0xFF	; 255
    84be:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <i2c_rep_start>

		for(i=0; i<5; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    84c2:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <i2c_readAck>
    84c6:	89 83       	std	Y+1, r24	; 0x01
    84c8:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <i2c_readAck>
    84cc:	8a 83       	std	Y+2, r24	; 0x02
    84ce:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <i2c_readAck>
    84d2:	8b 83       	std	Y+3, r24	; 0x03
    84d4:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <i2c_readAck>
    84d8:	8c 83       	std	Y+4, r24	; 0x04
    84da:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <i2c_readAck>
    84de:	8d 83       	std	Y+5, r24	; 0x05
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    84e0:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <i2c_readNak>
    84e4:	8e 83       	std	Y+6, r24	; 0x06
		i2c_stop();													// set stop conditon = release bus
    84e6:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    84ea:	80 91 8e 0b 	lds	r24, 0x0B8E
    84ee:	88 23       	and	r24, r24
    84f0:	e9 f5       	brne	.+122    	; 0x856c <readAccelXYZ+0x106>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
			accZ = ((signed int)buff[5]<<8)|buff[4];    			// Z axis
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    84f2:	8a 81       	ldd	r24, Y+2	; 0x02
    84f4:	99 27       	eor	r25, r25
    84f6:	87 fd       	sbrc	r24, 7
    84f8:	90 95       	com	r25
    84fa:	98 2f       	mov	r25, r24
    84fc:	88 27       	eor	r24, r24
    84fe:	29 81       	ldd	r18, Y+1	; 0x01
    8500:	33 27       	eor	r19, r19
    8502:	27 fd       	sbrc	r18, 7
    8504:	30 95       	com	r19
    8506:	82 2b       	or	r24, r18
    8508:	93 2b       	or	r25, r19
    850a:	20 91 46 04 	lds	r18, 0x0446
    850e:	30 91 47 04 	lds	r19, 0x0447
    8512:	82 1b       	sub	r24, r18
    8514:	93 0b       	sbc	r25, r19
    8516:	90 93 41 04 	sts	0x0441, r25
    851a:	80 93 40 04 	sts	0x0440, r24
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    851e:	8c 81       	ldd	r24, Y+4	; 0x04
    8520:	99 27       	eor	r25, r25
    8522:	87 fd       	sbrc	r24, 7
    8524:	90 95       	com	r25
    8526:	98 2f       	mov	r25, r24
    8528:	88 27       	eor	r24, r24
    852a:	2b 81       	ldd	r18, Y+3	; 0x03
    852c:	33 27       	eor	r19, r19
    852e:	27 fd       	sbrc	r18, 7
    8530:	30 95       	com	r19
    8532:	82 2b       	or	r24, r18
    8534:	93 2b       	or	r25, r19
    8536:	20 91 48 04 	lds	r18, 0x0448
    853a:	30 91 49 04 	lds	r19, 0x0449
    853e:	82 1b       	sub	r24, r18
    8540:	93 0b       	sbc	r25, r19
    8542:	90 93 43 04 	sts	0x0443, r25
    8546:	80 93 42 04 	sts	0x0442, r24
			accZ = (((signed int)buff[5]<<8)|buff[4]);				// Z axis
    854a:	8e 81       	ldd	r24, Y+6	; 0x06
    854c:	99 27       	eor	r25, r25
    854e:	87 fd       	sbrc	r24, 7
    8550:	90 95       	com	r25
    8552:	98 2f       	mov	r25, r24
    8554:	88 27       	eor	r24, r24
    8556:	2d 81       	ldd	r18, Y+5	; 0x05
    8558:	33 27       	eor	r19, r19
    855a:	27 fd       	sbrc	r18, 7
    855c:	30 95       	com	r19
    855e:	82 2b       	or	r24, r18
    8560:	93 2b       	or	r25, r19
    8562:	90 93 45 04 	sts	0x0445, r25
    8566:	80 93 44 04 	sts	0x0444, r24
    856a:	96 cf       	rjmp	.-212    	; 0x8498 <readAccelXYZ+0x32>
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
		i2c_stop();													// set stop conditon = release bus

		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    856c:	8a 81       	ldd	r24, Y+2	; 0x02
    856e:	99 27       	eor	r25, r25
    8570:	87 fd       	sbrc	r24, 7
    8572:	90 95       	com	r25
    8574:	98 2f       	mov	r25, r24
    8576:	88 27       	eor	r24, r24
    8578:	29 81       	ldd	r18, Y+1	; 0x01
    857a:	33 27       	eor	r19, r19
    857c:	27 fd       	sbrc	r18, 7
    857e:	30 95       	com	r19
    8580:	82 2b       	or	r24, r18
    8582:	93 2b       	or	r25, r19
    8584:	90 93 41 04 	sts	0x0441, r25
    8588:	80 93 40 04 	sts	0x0440, r24
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    858c:	8c 81       	ldd	r24, Y+4	; 0x04
    858e:	99 27       	eor	r25, r25
    8590:	87 fd       	sbrc	r24, 7
    8592:	90 95       	com	r25
    8594:	98 2f       	mov	r25, r24
    8596:	88 27       	eor	r24, r24
    8598:	2b 81       	ldd	r18, Y+3	; 0x03
    859a:	33 27       	eor	r19, r19
    859c:	27 fd       	sbrc	r18, 7
    859e:	30 95       	com	r19
    85a0:	82 2b       	or	r24, r18
    85a2:	93 2b       	or	r25, r19
    85a4:	ce cf       	rjmp	.-100    	; 0x8542 <readAccelXYZ+0xdc>
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    85a6:	80 91 14 02 	lds	r24, 0x0214
    85aa:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    85ae:	82 e3       	ldi	r24, 0x32	; 50
    85b0:	81 cf       	rjmp	.-254    	; 0x84b4 <readAccelXYZ+0x4e>

000085b2 <calibrateSensors>:

#include "sensors.h"


void calibrateSensors() {
    85b2:	1f 93       	push	r17
    85b4:	cf 93       	push	r28
    85b6:	df 93       	push	r29

	unsigned int i=0;

	pwm_red = 0;
    85b8:	10 92 0c 02 	sts	0x020C, r1
	pwm_green = 0;
    85bc:	10 92 0d 02 	sts	0x020D, r1
	pwm_blue = 0;
    85c0:	10 92 0e 02 	sts	0x020E, r1
	updateRedLed(pwm_red);
    85c4:	80 e0       	ldi	r24, 0x00	; 0
    85c6:	0e 94 fb 3f 	call	0x7ff6	; 0x7ff6 <updateRedLed>
	updateGreenLed(pwm_green);
    85ca:	80 91 0d 02 	lds	r24, 0x020D
    85ce:	0e 94 0f 40 	call	0x801e	; 0x801e <updateGreenLed>
	updateBlueLed(pwm_blue);
    85d2:	80 91 0e 02 	lds	r24, 0x020E
    85d6:	0e 94 23 40 	call	0x8046	; 0x8046 <updateBlueLed>

	calibrationCycle = 0;
    85da:	10 92 66 04 	sts	0x0466, r1
    85de:	10 92 65 04 	sts	0x0465, r1
	startCalibration = 1;
    85e2:	81 e0       	ldi	r24, 0x01	; 1
    85e4:	80 93 8e 0b 	sts	0x0B8E, r24


	// calibrate accelerometer

	lastTick = getTime100MicroSec();
    85e8:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
    85ec:	60 93 84 04 	sts	0x0484, r22
    85f0:	70 93 85 04 	sts	0x0485, r23
    85f4:	80 93 86 04 	sts	0x0486, r24
    85f8:	90 93 87 04 	sts	0x0487, r25
	while((getTime100MicroSec() - lastTick) < PAUSE_100_MSEC) {
    85fc:	02 c0       	rjmp	.+4      	; 0x8602 <calibrateSensors+0x50>
		readAccelXYZ();	// get a fresh value from the accelerometer
    85fe:	0e 94 33 42 	call	0x8466	; 0x8466 <readAccelXYZ>


	// calibrate accelerometer

	lastTick = getTime100MicroSec();
	while((getTime100MicroSec() - lastTick) < PAUSE_100_MSEC) {
    8602:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
    8606:	20 91 84 04 	lds	r18, 0x0484
    860a:	30 91 85 04 	lds	r19, 0x0485
    860e:	40 91 86 04 	lds	r20, 0x0486
    8612:	50 91 87 04 	lds	r21, 0x0487
    8616:	62 1b       	sub	r22, r18
    8618:	73 0b       	sbc	r23, r19
    861a:	84 0b       	sbc	r24, r20
    861c:	95 0b       	sbc	r25, r21
    861e:	61 3c       	cpi	r22, 0xC1	; 193
    8620:	23 e0       	ldi	r18, 0x03	; 3
    8622:	72 07       	cpc	r23, r18
    8624:	20 e0       	ldi	r18, 0x00	; 0
    8626:	82 07       	cpc	r24, r18
    8628:	20 e0       	ldi	r18, 0x00	; 0
    862a:	92 07       	cpc	r25, r18
    862c:	40 f3       	brcs	.-48     	; 0x85fe <calibrateSensors+0x4c>
		readAccelXYZ();	// get a fresh value from the accelerometer
	}
	
	accXMax = -1023;
    862e:	21 e0       	ldi	r18, 0x01	; 1
    8630:	3c ef       	ldi	r19, 0xFC	; 252
    8632:	30 93 4f 04 	sts	0x044F, r19
    8636:	20 93 4e 04 	sts	0x044E, r18
	accXMin = 1023;
    863a:	8f ef       	ldi	r24, 0xFF	; 255
    863c:	93 e0       	ldi	r25, 0x03	; 3
    863e:	90 93 51 04 	sts	0x0451, r25
    8642:	80 93 50 04 	sts	0x0450, r24
	accYMax = -1023;
    8646:	30 93 53 04 	sts	0x0453, r19
    864a:	20 93 52 04 	sts	0x0452, r18
	accYMin = 1023;
    864e:	90 93 55 04 	sts	0x0455, r25
    8652:	80 93 54 04 	sts	0x0454, r24
	accOffsetXSum = 0;
    8656:	10 92 4b 04 	sts	0x044B, r1
    865a:	10 92 4a 04 	sts	0x044A, r1
	accOffsetYSum = 0;
    865e:	10 92 4d 04 	sts	0x044D, r1
    8662:	10 92 4c 04 	sts	0x044C, r1

	if(abs(accZ) >= VERTICAL_THRESHOLD) {
    8666:	80 91 44 04 	lds	r24, 0x0444
    866a:	90 91 45 04 	lds	r25, 0x0445
    866e:	97 fd       	sbrc	r25, 7
    8670:	49 c4       	rjmp	.+2194   	; 0x8f04 <calibrateSensors+0x952>
    8672:	8d 32       	cpi	r24, 0x2D	; 45
    8674:	91 05       	cpc	r25, r1
    8676:	0c f4       	brge	.+2      	; 0x867a <calibrateSensors+0xc8>
    8678:	a4 c3       	rjmp	.+1864   	; 0x8dc2 <calibrateSensors+0x810>

		pwm_red = 0;
    867a:	10 92 0c 02 	sts	0x020C, r1
		pwm_green = 255;
    867e:	8f ef       	ldi	r24, 0xFF	; 255
    8680:	80 93 0d 02 	sts	0x020D, r24
		pwm_blue = 255;
    8684:	80 93 0e 02 	sts	0x020E, r24
		updateRedLed(pwm_red);
    8688:	80 e0       	ldi	r24, 0x00	; 0
    868a:	0e 94 fb 3f 	call	0x7ff6	; 0x7ff6 <updateRedLed>
		updateGreenLed(pwm_green);
    868e:	80 91 0d 02 	lds	r24, 0x020D
    8692:	0e 94 0f 40 	call	0x801e	; 0x801e <updateGreenLed>
		updateBlueLed(pwm_blue);
    8696:	80 91 0e 02 	lds	r24, 0x020E
    869a:	0e 94 23 40 	call	0x8046	; 0x8046 <updateBlueLed>

		setLeftSpeed(0);
    869e:	80 e0       	ldi	r24, 0x00	; 0
    86a0:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <setLeftSpeed>
		setRightSpeed(0);
    86a4:	80 e0       	ldi	r24, 0x00	; 0
    86a6:	0e 94 ff 27 	call	0x4ffe	; 0x4ffe <setRightSpeed>
    86aa:	22 c0       	rjmp	.+68     	; 0x86f0 <calibrateSensors+0x13e>
			readAccelXYZ();

			handleMotorsWithNoController();

			if(calibrationCycle < CALIBRATION_CYCLES) {
				accOffsetXSum += accX;
    86ac:	80 91 4a 04 	lds	r24, 0x044A
    86b0:	90 91 4b 04 	lds	r25, 0x044B
    86b4:	40 91 40 04 	lds	r20, 0x0440
    86b8:	50 91 41 04 	lds	r21, 0x0441
    86bc:	84 0f       	add	r24, r20
    86be:	95 1f       	adc	r25, r21
    86c0:	90 93 4b 04 	sts	0x044B, r25
    86c4:	80 93 4a 04 	sts	0x044A, r24
				accOffsetYSum += accY;
    86c8:	80 91 4c 04 	lds	r24, 0x044C
    86cc:	90 91 4d 04 	lds	r25, 0x044D
    86d0:	40 91 42 04 	lds	r20, 0x0442
    86d4:	50 91 43 04 	lds	r21, 0x0443
    86d8:	84 0f       	add	r24, r20
    86da:	95 1f       	adc	r25, r21
    86dc:	90 93 4d 04 	sts	0x044D, r25
    86e0:	80 93 4c 04 	sts	0x044C, r24
				calibrationCycle++;
    86e4:	2f 5f       	subi	r18, 0xFF	; 255
    86e6:	3f 4f       	sbci	r19, 0xFF	; 255
    86e8:	30 93 66 04 	sts	0x0466, r19
    86ec:	20 93 65 04 	sts	0x0465, r18
		setLeftSpeed(0);
		setRightSpeed(0);

		while(1) {

			readAccelXYZ();
    86f0:	0e 94 33 42 	call	0x8466	; 0x8466 <readAccelXYZ>

			handleMotorsWithNoController();
    86f4:	0e 94 bf 3a 	call	0x757e	; 0x757e <handleMotorsWithNoController>

			if(calibrationCycle < CALIBRATION_CYCLES) {
    86f8:	20 91 65 04 	lds	r18, 0x0465
    86fc:	30 91 66 04 	lds	r19, 0x0466
    8700:	20 31       	cpi	r18, 0x10	; 16
    8702:	31 05       	cpc	r19, r1
    8704:	9c f2       	brlt	.-90     	; 0x86ac <calibrateSensors+0xfa>
				accOffsetXSum += accX;
				accOffsetYSum += accY;
				calibrationCycle++;
			} else {
				accOffsetX = accOffsetXSum>>4;
    8706:	80 91 4a 04 	lds	r24, 0x044A
    870a:	90 91 4b 04 	lds	r25, 0x044B
    870e:	95 95       	asr	r25
    8710:	87 95       	ror	r24
    8712:	95 95       	asr	r25
    8714:	87 95       	ror	r24
    8716:	95 95       	asr	r25
    8718:	87 95       	ror	r24
    871a:	95 95       	asr	r25
    871c:	87 95       	ror	r24
    871e:	90 93 47 04 	sts	0x0447, r25
    8722:	80 93 46 04 	sts	0x0446, r24
				accOffsetY = accOffsetYSum>>4;
    8726:	80 91 4c 04 	lds	r24, 0x044C
    872a:	90 91 4d 04 	lds	r25, 0x044D
    872e:	95 95       	asr	r25
    8730:	87 95       	ror	r24
    8732:	95 95       	asr	r25
    8734:	87 95       	ror	r24
    8736:	95 95       	asr	r25
    8738:	87 95       	ror	r24
    873a:	95 95       	asr	r25
    873c:	87 95       	ror	r24
    873e:	90 93 49 04 	sts	0x0449, r25
    8742:	80 93 48 04 	sts	0x0448, r24
		setLeftSpeed(0);
		setRightSpeed(0);

	}	

	startCalibration = 1;
    8746:	81 e0       	ldi	r24, 0x01	; 1
    8748:	80 93 8e 0b 	sts	0x0B8E, r24
	calibrationCycle = 0;
    874c:	10 92 66 04 	sts	0x0466, r1
    8750:	10 92 65 04 	sts	0x0465, r1

		} else {

			pwm_red = 0;
			pwm_green = 0;
			pwm_blue = 255;
    8754:	1f ef       	ldi	r17, 0xFF	; 255
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
						proximityOffset[i] = 0;
					}				
					
					calibrationCycle++;
    8756:	c1 e0       	ldi	r28, 0x01	; 1
    8758:	d0 e0       	ldi	r29, 0x00	; 0
    875a:	0a c0       	rjmp	.+20     	; 0x8770 <calibrateSensors+0x1be>
	// calibrate prox and ground sensors
	while(startCalibration) {

		if(calibrationCycle<=CALIBRATION_CYCLES) {

			if(proxUpdated) {
    875c:	80 91 d0 02 	lds	r24, 0x02D0
    8760:	88 23       	and	r24, r24
    8762:	09 f0       	breq	.+2      	; 0x8766 <calibrateSensors+0x1b4>
    8764:	27 c1       	rjmp	.+590    	; 0x89b4 <calibrateSensors+0x402>

	startCalibration = 1;
	calibrationCycle = 0;

	// calibrate prox and ground sensors
	while(startCalibration) {
    8766:	80 91 8e 0b 	lds	r24, 0x0B8E
    876a:	88 23       	and	r24, r24
    876c:	09 f4       	brne	.+2      	; 0x8770 <calibrateSensors+0x1be>
    876e:	0d c1       	rjmp	.+538    	; 0x898a <calibrateSensors+0x3d8>

		if(calibrationCycle<=CALIBRATION_CYCLES) {
    8770:	80 91 65 04 	lds	r24, 0x0465
    8774:	90 91 66 04 	lds	r25, 0x0466
    8778:	81 31       	cpi	r24, 0x11	; 17
    877a:	91 05       	cpc	r25, r1
    877c:	7c f3       	brlt	.-34     	; 0x875c <calibrateSensors+0x1aa>

			}

		} else {

			pwm_red = 0;
    877e:	10 92 0c 02 	sts	0x020C, r1
			pwm_green = 0;
    8782:	10 92 0d 02 	sts	0x020D, r1
			pwm_blue = 255;
    8786:	10 93 0e 02 	sts	0x020E, r17
			updateRedLed(pwm_red);
    878a:	80 e0       	ldi	r24, 0x00	; 0
    878c:	0e 94 fb 3f 	call	0x7ff6	; 0x7ff6 <updateRedLed>
			updateGreenLed(pwm_green);
    8790:	80 91 0d 02 	lds	r24, 0x020D
    8794:	0e 94 0f 40 	call	0x801e	; 0x801e <updateGreenLed>
			updateBlueLed(pwm_blue);
    8798:	80 91 0e 02 	lds	r24, 0x020E
    879c:	0e 94 23 40 	call	0x8046	; 0x8046 <updateBlueLed>

			for(i=0;i<12;i++) {
				proximityOffset[i] = proximitySum[i]>>4;
    87a0:	80 91 99 02 	lds	r24, 0x0299
    87a4:	90 91 9a 02 	lds	r25, 0x029A
    87a8:	a0 91 9b 02 	lds	r26, 0x029B
    87ac:	b0 91 9c 02 	lds	r27, 0x029C
    87b0:	64 e0       	ldi	r22, 0x04	; 4
    87b2:	b6 95       	lsr	r27
    87b4:	a7 95       	ror	r26
    87b6:	97 95       	ror	r25
    87b8:	87 95       	ror	r24
    87ba:	6a 95       	dec	r22
    87bc:	d1 f7       	brne	.-12     	; 0x87b2 <calibrateSensors+0x200>
    87be:	90 93 82 02 	sts	0x0282, r25
    87c2:	80 93 81 02 	sts	0x0281, r24
    87c6:	80 91 9d 02 	lds	r24, 0x029D
    87ca:	90 91 9e 02 	lds	r25, 0x029E
    87ce:	a0 91 9f 02 	lds	r26, 0x029F
    87d2:	b0 91 a0 02 	lds	r27, 0x02A0
    87d6:	54 e0       	ldi	r21, 0x04	; 4
    87d8:	b6 95       	lsr	r27
    87da:	a7 95       	ror	r26
    87dc:	97 95       	ror	r25
    87de:	87 95       	ror	r24
    87e0:	5a 95       	dec	r21
    87e2:	d1 f7       	brne	.-12     	; 0x87d8 <calibrateSensors+0x226>
    87e4:	90 93 84 02 	sts	0x0284, r25
    87e8:	80 93 83 02 	sts	0x0283, r24
    87ec:	80 91 a1 02 	lds	r24, 0x02A1
    87f0:	90 91 a2 02 	lds	r25, 0x02A2
    87f4:	a0 91 a3 02 	lds	r26, 0x02A3
    87f8:	b0 91 a4 02 	lds	r27, 0x02A4
    87fc:	44 e0       	ldi	r20, 0x04	; 4
    87fe:	b6 95       	lsr	r27
    8800:	a7 95       	ror	r26
    8802:	97 95       	ror	r25
    8804:	87 95       	ror	r24
    8806:	4a 95       	dec	r20
    8808:	d1 f7       	brne	.-12     	; 0x87fe <calibrateSensors+0x24c>
    880a:	90 93 86 02 	sts	0x0286, r25
    880e:	80 93 85 02 	sts	0x0285, r24
    8812:	80 91 a5 02 	lds	r24, 0x02A5
    8816:	90 91 a6 02 	lds	r25, 0x02A6
    881a:	a0 91 a7 02 	lds	r26, 0x02A7
    881e:	b0 91 a8 02 	lds	r27, 0x02A8
    8822:	34 e0       	ldi	r19, 0x04	; 4
    8824:	b6 95       	lsr	r27
    8826:	a7 95       	ror	r26
    8828:	97 95       	ror	r25
    882a:	87 95       	ror	r24
    882c:	3a 95       	dec	r19
    882e:	d1 f7       	brne	.-12     	; 0x8824 <calibrateSensors+0x272>
    8830:	90 93 88 02 	sts	0x0288, r25
    8834:	80 93 87 02 	sts	0x0287, r24
    8838:	80 91 a9 02 	lds	r24, 0x02A9
    883c:	90 91 aa 02 	lds	r25, 0x02AA
    8840:	a0 91 ab 02 	lds	r26, 0x02AB
    8844:	b0 91 ac 02 	lds	r27, 0x02AC
    8848:	24 e0       	ldi	r18, 0x04	; 4
    884a:	b6 95       	lsr	r27
    884c:	a7 95       	ror	r26
    884e:	97 95       	ror	r25
    8850:	87 95       	ror	r24
    8852:	2a 95       	dec	r18
    8854:	d1 f7       	brne	.-12     	; 0x884a <calibrateSensors+0x298>
    8856:	90 93 8a 02 	sts	0x028A, r25
    885a:	80 93 89 02 	sts	0x0289, r24
    885e:	80 91 ad 02 	lds	r24, 0x02AD
    8862:	90 91 ae 02 	lds	r25, 0x02AE
    8866:	a0 91 af 02 	lds	r26, 0x02AF
    886a:	b0 91 b0 02 	lds	r27, 0x02B0
    886e:	f4 e0       	ldi	r31, 0x04	; 4
    8870:	b6 95       	lsr	r27
    8872:	a7 95       	ror	r26
    8874:	97 95       	ror	r25
    8876:	87 95       	ror	r24
    8878:	fa 95       	dec	r31
    887a:	d1 f7       	brne	.-12     	; 0x8870 <calibrateSensors+0x2be>
    887c:	90 93 8c 02 	sts	0x028C, r25
    8880:	80 93 8b 02 	sts	0x028B, r24
    8884:	80 91 b1 02 	lds	r24, 0x02B1
    8888:	90 91 b2 02 	lds	r25, 0x02B2
    888c:	a0 91 b3 02 	lds	r26, 0x02B3
    8890:	b0 91 b4 02 	lds	r27, 0x02B4
    8894:	e4 e0       	ldi	r30, 0x04	; 4
    8896:	b6 95       	lsr	r27
    8898:	a7 95       	ror	r26
    889a:	97 95       	ror	r25
    889c:	87 95       	ror	r24
    889e:	ea 95       	dec	r30
    88a0:	d1 f7       	brne	.-12     	; 0x8896 <calibrateSensors+0x2e4>
    88a2:	90 93 8e 02 	sts	0x028E, r25
    88a6:	80 93 8d 02 	sts	0x028D, r24
    88aa:	80 91 b5 02 	lds	r24, 0x02B5
    88ae:	90 91 b6 02 	lds	r25, 0x02B6
    88b2:	a0 91 b7 02 	lds	r26, 0x02B7
    88b6:	b0 91 b8 02 	lds	r27, 0x02B8
    88ba:	74 e0       	ldi	r23, 0x04	; 4
    88bc:	b6 95       	lsr	r27
    88be:	a7 95       	ror	r26
    88c0:	97 95       	ror	r25
    88c2:	87 95       	ror	r24
    88c4:	7a 95       	dec	r23
    88c6:	d1 f7       	brne	.-12     	; 0x88bc <calibrateSensors+0x30a>
    88c8:	90 93 90 02 	sts	0x0290, r25
    88cc:	80 93 8f 02 	sts	0x028F, r24
    88d0:	20 91 bd 02 	lds	r18, 0x02BD
    88d4:	30 91 be 02 	lds	r19, 0x02BE
    88d8:	40 91 bf 02 	lds	r20, 0x02BF
    88dc:	50 91 c0 02 	lds	r21, 0x02C0
    88e0:	64 e0       	ldi	r22, 0x04	; 4
    88e2:	56 95       	lsr	r21
    88e4:	47 95       	ror	r20
    88e6:	37 95       	ror	r19
    88e8:	27 95       	ror	r18
    88ea:	6a 95       	dec	r22
    88ec:	d1 f7       	brne	.-12     	; 0x88e2 <calibrateSensors+0x330>
    88ee:	80 91 c1 02 	lds	r24, 0x02C1
    88f2:	90 91 c2 02 	lds	r25, 0x02C2
    88f6:	a0 91 c3 02 	lds	r26, 0x02C3
    88fa:	b0 91 c4 02 	lds	r27, 0x02C4
    88fe:	44 e0       	ldi	r20, 0x04	; 4
    8900:	b6 95       	lsr	r27
    8902:	a7 95       	ror	r26
    8904:	97 95       	ror	r25
    8906:	87 95       	ror	r24
    8908:	4a 95       	dec	r20
    890a:	d1 f7       	brne	.-12     	; 0x8900 <calibrateSensors+0x34e>
    890c:	ac 01       	movw	r20, r24
    890e:	80 91 c5 02 	lds	r24, 0x02C5
    8912:	90 91 c6 02 	lds	r25, 0x02C6
    8916:	a0 91 c7 02 	lds	r26, 0x02C7
    891a:	b0 91 c8 02 	lds	r27, 0x02C8
    891e:	f4 e0       	ldi	r31, 0x04	; 4
    8920:	b6 95       	lsr	r27
    8922:	a7 95       	ror	r26
    8924:	97 95       	ror	r25
    8926:	87 95       	ror	r24
    8928:	fa 95       	dec	r31
    892a:	d1 f7       	brne	.-12     	; 0x8920 <calibrateSensors+0x36e>
    892c:	bc 01       	movw	r22, r24
    892e:	80 91 b9 02 	lds	r24, 0x02B9
    8932:	90 91 ba 02 	lds	r25, 0x02BA
    8936:	a0 91 bb 02 	lds	r26, 0x02BB
    893a:	b0 91 bc 02 	lds	r27, 0x02BC
    893e:	e4 e0       	ldi	r30, 0x04	; 4
    8940:	b6 95       	lsr	r27
    8942:	a7 95       	ror	r26
    8944:	97 95       	ror	r25
    8946:	87 95       	ror	r24
    8948:	ea 95       	dec	r30
    894a:	d1 f7       	brne	.-12     	; 0x8940 <calibrateSensors+0x38e>
			}

			for(i=8; i<12; i++) {
				proximityOffset[i] -= 512;	// move the "0" to 512 (values around 512)
    894c:	80 50       	subi	r24, 0x00	; 0
    894e:	92 40       	sbci	r25, 0x02	; 2
    8950:	90 93 92 02 	sts	0x0292, r25
    8954:	80 93 91 02 	sts	0x0291, r24
    8958:	20 50       	subi	r18, 0x00	; 0
    895a:	32 40       	sbci	r19, 0x02	; 2
    895c:	30 93 94 02 	sts	0x0294, r19
    8960:	20 93 93 02 	sts	0x0293, r18
    8964:	40 50       	subi	r20, 0x00	; 0
    8966:	52 40       	sbci	r21, 0x02	; 2
    8968:	50 93 96 02 	sts	0x0296, r21
    896c:	40 93 95 02 	sts	0x0295, r20
    8970:	60 50       	subi	r22, 0x00	; 0
    8972:	72 40       	sbci	r23, 0x02	; 2
    8974:	70 93 98 02 	sts	0x0298, r23
    8978:	60 93 97 02 	sts	0x0297, r22
			}

			//proxUpdated = 0;
			//if(proxUpdated) {	
				startCalibration = 0;					
    897c:	10 92 8e 0b 	sts	0x0B8E, r1

	startCalibration = 1;
	calibrationCycle = 0;

	// calibrate prox and ground sensors
	while(startCalibration) {
    8980:	80 91 8e 0b 	lds	r24, 0x0B8E
    8984:	88 23       	and	r24, r24
    8986:	09 f0       	breq	.+2      	; 0x898a <calibrateSensors+0x3d8>
    8988:	f3 ce       	rjmp	.-538    	; 0x8770 <calibrateSensors+0x1be>

		}

	}

	pwm_red = 255;
    898a:	8f ef       	ldi	r24, 0xFF	; 255
    898c:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    8990:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    8994:	80 93 0e 02 	sts	0x020E, r24
	updateRedLed(pwm_red);
    8998:	0e 94 fb 3f 	call	0x7ff6	; 0x7ff6 <updateRedLed>
	updateGreenLed(pwm_green);
    899c:	80 91 0d 02 	lds	r24, 0x020D
    89a0:	0e 94 0f 40 	call	0x801e	; 0x801e <updateGreenLed>
	updateBlueLed(pwm_blue);
    89a4:	80 91 0e 02 	lds	r24, 0x020E
    89a8:	0e 94 23 40 	call	0x8046	; 0x8046 <updateBlueLed>

}
    89ac:	df 91       	pop	r29
    89ae:	cf 91       	pop	r28
    89b0:	1f 91       	pop	r17
    89b2:	08 95       	ret

		if(calibrationCycle<=CALIBRATION_CYCLES) {

			if(proxUpdated) {

				pwm_red = 255;
    89b4:	10 93 0c 02 	sts	0x020C, r17
				pwm_green = 255;
    89b8:	10 93 0d 02 	sts	0x020D, r17
				pwm_blue = 0;
    89bc:	10 92 0e 02 	sts	0x020E, r1
				updateRedLed(pwm_red);
    89c0:	8f ef       	ldi	r24, 0xFF	; 255
    89c2:	0e 94 fb 3f 	call	0x7ff6	; 0x7ff6 <updateRedLed>
				updateGreenLed(pwm_green);
    89c6:	80 91 0d 02 	lds	r24, 0x020D
    89ca:	0e 94 0f 40 	call	0x801e	; 0x801e <updateGreenLed>
				updateBlueLed(pwm_blue);
    89ce:	80 91 0e 02 	lds	r24, 0x020E
    89d2:	0e 94 23 40 	call	0x8046	; 0x8046 <updateBlueLed>

				proxUpdated = 0;
    89d6:	10 92 d0 02 	sts	0x02D0, r1

				if(calibrationCycle==0) {		// reset all variables
    89da:	20 91 65 04 	lds	r18, 0x0465
    89de:	30 91 66 04 	lds	r19, 0x0466
    89e2:	21 15       	cp	r18, r1
    89e4:	31 05       	cpc	r19, r1
    89e6:	09 f4       	brne	.+2      	; 0x89ea <calibrateSensors+0x438>
    89e8:	57 c1       	rjmp	.+686    	; 0x8c98 <calibrateSensors+0x6e6>
												// "proximityResult" hasn't the offset reset to 0. so we start the actual calibration
												// the next time
				}

				for (i=0;i<12;i++) {
					proximitySum[i] += proximityResult[i];
    89ea:	80 91 69 02 	lds	r24, 0x0269
    89ee:	90 91 6a 02 	lds	r25, 0x026A
    89f2:	aa 27       	eor	r26, r26
    89f4:	97 fd       	sbrc	r25, 7
    89f6:	a0 95       	com	r26
    89f8:	ba 2f       	mov	r27, r26
    89fa:	40 91 99 02 	lds	r20, 0x0299
    89fe:	50 91 9a 02 	lds	r21, 0x029A
    8a02:	60 91 9b 02 	lds	r22, 0x029B
    8a06:	70 91 9c 02 	lds	r23, 0x029C
    8a0a:	84 0f       	add	r24, r20
    8a0c:	95 1f       	adc	r25, r21
    8a0e:	a6 1f       	adc	r26, r22
    8a10:	b7 1f       	adc	r27, r23
    8a12:	80 93 99 02 	sts	0x0299, r24
    8a16:	90 93 9a 02 	sts	0x029A, r25
    8a1a:	a0 93 9b 02 	sts	0x029B, r26
    8a1e:	b0 93 9c 02 	sts	0x029C, r27
    8a22:	80 91 6b 02 	lds	r24, 0x026B
    8a26:	90 91 6c 02 	lds	r25, 0x026C
    8a2a:	aa 27       	eor	r26, r26
    8a2c:	97 fd       	sbrc	r25, 7
    8a2e:	a0 95       	com	r26
    8a30:	ba 2f       	mov	r27, r26
    8a32:	40 91 9d 02 	lds	r20, 0x029D
    8a36:	50 91 9e 02 	lds	r21, 0x029E
    8a3a:	60 91 9f 02 	lds	r22, 0x029F
    8a3e:	70 91 a0 02 	lds	r23, 0x02A0
    8a42:	84 0f       	add	r24, r20
    8a44:	95 1f       	adc	r25, r21
    8a46:	a6 1f       	adc	r26, r22
    8a48:	b7 1f       	adc	r27, r23
    8a4a:	80 93 9d 02 	sts	0x029D, r24
    8a4e:	90 93 9e 02 	sts	0x029E, r25
    8a52:	a0 93 9f 02 	sts	0x029F, r26
    8a56:	b0 93 a0 02 	sts	0x02A0, r27
    8a5a:	80 91 6d 02 	lds	r24, 0x026D
    8a5e:	90 91 6e 02 	lds	r25, 0x026E
    8a62:	aa 27       	eor	r26, r26
    8a64:	97 fd       	sbrc	r25, 7
    8a66:	a0 95       	com	r26
    8a68:	ba 2f       	mov	r27, r26
    8a6a:	40 91 a1 02 	lds	r20, 0x02A1
    8a6e:	50 91 a2 02 	lds	r21, 0x02A2
    8a72:	60 91 a3 02 	lds	r22, 0x02A3
    8a76:	70 91 a4 02 	lds	r23, 0x02A4
    8a7a:	84 0f       	add	r24, r20
    8a7c:	95 1f       	adc	r25, r21
    8a7e:	a6 1f       	adc	r26, r22
    8a80:	b7 1f       	adc	r27, r23
    8a82:	80 93 a1 02 	sts	0x02A1, r24
    8a86:	90 93 a2 02 	sts	0x02A2, r25
    8a8a:	a0 93 a3 02 	sts	0x02A3, r26
    8a8e:	b0 93 a4 02 	sts	0x02A4, r27
    8a92:	80 91 6f 02 	lds	r24, 0x026F
    8a96:	90 91 70 02 	lds	r25, 0x0270
    8a9a:	aa 27       	eor	r26, r26
    8a9c:	97 fd       	sbrc	r25, 7
    8a9e:	a0 95       	com	r26
    8aa0:	ba 2f       	mov	r27, r26
    8aa2:	40 91 a5 02 	lds	r20, 0x02A5
    8aa6:	50 91 a6 02 	lds	r21, 0x02A6
    8aaa:	60 91 a7 02 	lds	r22, 0x02A7
    8aae:	70 91 a8 02 	lds	r23, 0x02A8
    8ab2:	84 0f       	add	r24, r20
    8ab4:	95 1f       	adc	r25, r21
    8ab6:	a6 1f       	adc	r26, r22
    8ab8:	b7 1f       	adc	r27, r23
    8aba:	80 93 a5 02 	sts	0x02A5, r24
    8abe:	90 93 a6 02 	sts	0x02A6, r25
    8ac2:	a0 93 a7 02 	sts	0x02A7, r26
    8ac6:	b0 93 a8 02 	sts	0x02A8, r27
    8aca:	80 91 71 02 	lds	r24, 0x0271
    8ace:	90 91 72 02 	lds	r25, 0x0272
    8ad2:	aa 27       	eor	r26, r26
    8ad4:	97 fd       	sbrc	r25, 7
    8ad6:	a0 95       	com	r26
    8ad8:	ba 2f       	mov	r27, r26
    8ada:	40 91 a9 02 	lds	r20, 0x02A9
    8ade:	50 91 aa 02 	lds	r21, 0x02AA
    8ae2:	60 91 ab 02 	lds	r22, 0x02AB
    8ae6:	70 91 ac 02 	lds	r23, 0x02AC
    8aea:	84 0f       	add	r24, r20
    8aec:	95 1f       	adc	r25, r21
    8aee:	a6 1f       	adc	r26, r22
    8af0:	b7 1f       	adc	r27, r23
    8af2:	80 93 a9 02 	sts	0x02A9, r24
    8af6:	90 93 aa 02 	sts	0x02AA, r25
    8afa:	a0 93 ab 02 	sts	0x02AB, r26
    8afe:	b0 93 ac 02 	sts	0x02AC, r27
    8b02:	80 91 73 02 	lds	r24, 0x0273
    8b06:	90 91 74 02 	lds	r25, 0x0274
    8b0a:	aa 27       	eor	r26, r26
    8b0c:	97 fd       	sbrc	r25, 7
    8b0e:	a0 95       	com	r26
    8b10:	ba 2f       	mov	r27, r26
    8b12:	40 91 ad 02 	lds	r20, 0x02AD
    8b16:	50 91 ae 02 	lds	r21, 0x02AE
    8b1a:	60 91 af 02 	lds	r22, 0x02AF
    8b1e:	70 91 b0 02 	lds	r23, 0x02B0
    8b22:	84 0f       	add	r24, r20
    8b24:	95 1f       	adc	r25, r21
    8b26:	a6 1f       	adc	r26, r22
    8b28:	b7 1f       	adc	r27, r23
    8b2a:	80 93 ad 02 	sts	0x02AD, r24
    8b2e:	90 93 ae 02 	sts	0x02AE, r25
    8b32:	a0 93 af 02 	sts	0x02AF, r26
    8b36:	b0 93 b0 02 	sts	0x02B0, r27
    8b3a:	80 91 75 02 	lds	r24, 0x0275
    8b3e:	90 91 76 02 	lds	r25, 0x0276
    8b42:	aa 27       	eor	r26, r26
    8b44:	97 fd       	sbrc	r25, 7
    8b46:	a0 95       	com	r26
    8b48:	ba 2f       	mov	r27, r26
    8b4a:	40 91 b1 02 	lds	r20, 0x02B1
    8b4e:	50 91 b2 02 	lds	r21, 0x02B2
    8b52:	60 91 b3 02 	lds	r22, 0x02B3
    8b56:	70 91 b4 02 	lds	r23, 0x02B4
    8b5a:	84 0f       	add	r24, r20
    8b5c:	95 1f       	adc	r25, r21
    8b5e:	a6 1f       	adc	r26, r22
    8b60:	b7 1f       	adc	r27, r23
    8b62:	80 93 b1 02 	sts	0x02B1, r24
    8b66:	90 93 b2 02 	sts	0x02B2, r25
    8b6a:	a0 93 b3 02 	sts	0x02B3, r26
    8b6e:	b0 93 b4 02 	sts	0x02B4, r27
    8b72:	80 91 77 02 	lds	r24, 0x0277
    8b76:	90 91 78 02 	lds	r25, 0x0278
    8b7a:	aa 27       	eor	r26, r26
    8b7c:	97 fd       	sbrc	r25, 7
    8b7e:	a0 95       	com	r26
    8b80:	ba 2f       	mov	r27, r26
    8b82:	40 91 b5 02 	lds	r20, 0x02B5
    8b86:	50 91 b6 02 	lds	r21, 0x02B6
    8b8a:	60 91 b7 02 	lds	r22, 0x02B7
    8b8e:	70 91 b8 02 	lds	r23, 0x02B8
    8b92:	84 0f       	add	r24, r20
    8b94:	95 1f       	adc	r25, r21
    8b96:	a6 1f       	adc	r26, r22
    8b98:	b7 1f       	adc	r27, r23
    8b9a:	80 93 b5 02 	sts	0x02B5, r24
    8b9e:	90 93 b6 02 	sts	0x02B6, r25
    8ba2:	a0 93 b7 02 	sts	0x02B7, r26
    8ba6:	b0 93 b8 02 	sts	0x02B8, r27
    8baa:	80 91 79 02 	lds	r24, 0x0279
    8bae:	90 91 7a 02 	lds	r25, 0x027A
    8bb2:	aa 27       	eor	r26, r26
    8bb4:	97 fd       	sbrc	r25, 7
    8bb6:	a0 95       	com	r26
    8bb8:	ba 2f       	mov	r27, r26
    8bba:	40 91 b9 02 	lds	r20, 0x02B9
    8bbe:	50 91 ba 02 	lds	r21, 0x02BA
    8bc2:	60 91 bb 02 	lds	r22, 0x02BB
    8bc6:	70 91 bc 02 	lds	r23, 0x02BC
    8bca:	84 0f       	add	r24, r20
    8bcc:	95 1f       	adc	r25, r21
    8bce:	a6 1f       	adc	r26, r22
    8bd0:	b7 1f       	adc	r27, r23
    8bd2:	80 93 b9 02 	sts	0x02B9, r24
    8bd6:	90 93 ba 02 	sts	0x02BA, r25
    8bda:	a0 93 bb 02 	sts	0x02BB, r26
    8bde:	b0 93 bc 02 	sts	0x02BC, r27
    8be2:	80 91 7b 02 	lds	r24, 0x027B
    8be6:	90 91 7c 02 	lds	r25, 0x027C
    8bea:	aa 27       	eor	r26, r26
    8bec:	97 fd       	sbrc	r25, 7
    8bee:	a0 95       	com	r26
    8bf0:	ba 2f       	mov	r27, r26
    8bf2:	40 91 bd 02 	lds	r20, 0x02BD
    8bf6:	50 91 be 02 	lds	r21, 0x02BE
    8bfa:	60 91 bf 02 	lds	r22, 0x02BF
    8bfe:	70 91 c0 02 	lds	r23, 0x02C0
    8c02:	84 0f       	add	r24, r20
    8c04:	95 1f       	adc	r25, r21
    8c06:	a6 1f       	adc	r26, r22
    8c08:	b7 1f       	adc	r27, r23
    8c0a:	80 93 bd 02 	sts	0x02BD, r24
    8c0e:	90 93 be 02 	sts	0x02BE, r25
    8c12:	a0 93 bf 02 	sts	0x02BF, r26
    8c16:	b0 93 c0 02 	sts	0x02C0, r27
    8c1a:	80 91 7d 02 	lds	r24, 0x027D
    8c1e:	90 91 7e 02 	lds	r25, 0x027E
    8c22:	aa 27       	eor	r26, r26
    8c24:	97 fd       	sbrc	r25, 7
    8c26:	a0 95       	com	r26
    8c28:	ba 2f       	mov	r27, r26
    8c2a:	40 91 c1 02 	lds	r20, 0x02C1
    8c2e:	50 91 c2 02 	lds	r21, 0x02C2
    8c32:	60 91 c3 02 	lds	r22, 0x02C3
    8c36:	70 91 c4 02 	lds	r23, 0x02C4
    8c3a:	84 0f       	add	r24, r20
    8c3c:	95 1f       	adc	r25, r21
    8c3e:	a6 1f       	adc	r26, r22
    8c40:	b7 1f       	adc	r27, r23
    8c42:	80 93 c1 02 	sts	0x02C1, r24
    8c46:	90 93 c2 02 	sts	0x02C2, r25
    8c4a:	a0 93 c3 02 	sts	0x02C3, r26
    8c4e:	b0 93 c4 02 	sts	0x02C4, r27
    8c52:	80 91 7f 02 	lds	r24, 0x027F
    8c56:	90 91 80 02 	lds	r25, 0x0280
    8c5a:	aa 27       	eor	r26, r26
    8c5c:	97 fd       	sbrc	r25, 7
    8c5e:	a0 95       	com	r26
    8c60:	ba 2f       	mov	r27, r26
    8c62:	40 91 c5 02 	lds	r20, 0x02C5
    8c66:	50 91 c6 02 	lds	r21, 0x02C6
    8c6a:	60 91 c7 02 	lds	r22, 0x02C7
    8c6e:	70 91 c8 02 	lds	r23, 0x02C8
    8c72:	84 0f       	add	r24, r20
    8c74:	95 1f       	adc	r25, r21
    8c76:	a6 1f       	adc	r26, r22
    8c78:	b7 1f       	adc	r27, r23
    8c7a:	80 93 c5 02 	sts	0x02C5, r24
    8c7e:	90 93 c6 02 	sts	0x02C6, r25
    8c82:	a0 93 c7 02 	sts	0x02C7, r26
    8c86:	b0 93 c8 02 	sts	0x02C8, r27
				}

				calibrationCycle++;
    8c8a:	2f 5f       	subi	r18, 0xFF	; 255
    8c8c:	3f 4f       	sbci	r19, 0xFF	; 255
    8c8e:	30 93 66 04 	sts	0x0466, r19
    8c92:	20 93 65 04 	sts	0x0465, r18
    8c96:	67 cd       	rjmp	.-1330   	; 0x8766 <calibrateSensors+0x1b4>
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8c98:	10 92 99 02 	sts	0x0299, r1
    8c9c:	10 92 9a 02 	sts	0x029A, r1
    8ca0:	10 92 9b 02 	sts	0x029B, r1
    8ca4:	10 92 9c 02 	sts	0x029C, r1
						proximityOffset[i] = 0;
    8ca8:	10 92 82 02 	sts	0x0282, r1
    8cac:	10 92 81 02 	sts	0x0281, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8cb0:	10 92 9d 02 	sts	0x029D, r1
    8cb4:	10 92 9e 02 	sts	0x029E, r1
    8cb8:	10 92 9f 02 	sts	0x029F, r1
    8cbc:	10 92 a0 02 	sts	0x02A0, r1
						proximityOffset[i] = 0;
    8cc0:	10 92 84 02 	sts	0x0284, r1
    8cc4:	10 92 83 02 	sts	0x0283, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8cc8:	10 92 a1 02 	sts	0x02A1, r1
    8ccc:	10 92 a2 02 	sts	0x02A2, r1
    8cd0:	10 92 a3 02 	sts	0x02A3, r1
    8cd4:	10 92 a4 02 	sts	0x02A4, r1
						proximityOffset[i] = 0;
    8cd8:	10 92 86 02 	sts	0x0286, r1
    8cdc:	10 92 85 02 	sts	0x0285, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8ce0:	10 92 a5 02 	sts	0x02A5, r1
    8ce4:	10 92 a6 02 	sts	0x02A6, r1
    8ce8:	10 92 a7 02 	sts	0x02A7, r1
    8cec:	10 92 a8 02 	sts	0x02A8, r1
						proximityOffset[i] = 0;
    8cf0:	10 92 88 02 	sts	0x0288, r1
    8cf4:	10 92 87 02 	sts	0x0287, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8cf8:	10 92 a9 02 	sts	0x02A9, r1
    8cfc:	10 92 aa 02 	sts	0x02AA, r1
    8d00:	10 92 ab 02 	sts	0x02AB, r1
    8d04:	10 92 ac 02 	sts	0x02AC, r1
						proximityOffset[i] = 0;
    8d08:	10 92 8a 02 	sts	0x028A, r1
    8d0c:	10 92 89 02 	sts	0x0289, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8d10:	10 92 ad 02 	sts	0x02AD, r1
    8d14:	10 92 ae 02 	sts	0x02AE, r1
    8d18:	10 92 af 02 	sts	0x02AF, r1
    8d1c:	10 92 b0 02 	sts	0x02B0, r1
						proximityOffset[i] = 0;
    8d20:	10 92 8c 02 	sts	0x028C, r1
    8d24:	10 92 8b 02 	sts	0x028B, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8d28:	10 92 b1 02 	sts	0x02B1, r1
    8d2c:	10 92 b2 02 	sts	0x02B2, r1
    8d30:	10 92 b3 02 	sts	0x02B3, r1
    8d34:	10 92 b4 02 	sts	0x02B4, r1
						proximityOffset[i] = 0;
    8d38:	10 92 8e 02 	sts	0x028E, r1
    8d3c:	10 92 8d 02 	sts	0x028D, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8d40:	10 92 b5 02 	sts	0x02B5, r1
    8d44:	10 92 b6 02 	sts	0x02B6, r1
    8d48:	10 92 b7 02 	sts	0x02B7, r1
    8d4c:	10 92 b8 02 	sts	0x02B8, r1
						proximityOffset[i] = 0;
    8d50:	10 92 90 02 	sts	0x0290, r1
    8d54:	10 92 8f 02 	sts	0x028F, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8d58:	10 92 b9 02 	sts	0x02B9, r1
    8d5c:	10 92 ba 02 	sts	0x02BA, r1
    8d60:	10 92 bb 02 	sts	0x02BB, r1
    8d64:	10 92 bc 02 	sts	0x02BC, r1
						proximityOffset[i] = 0;
    8d68:	10 92 92 02 	sts	0x0292, r1
    8d6c:	10 92 91 02 	sts	0x0291, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8d70:	10 92 bd 02 	sts	0x02BD, r1
    8d74:	10 92 be 02 	sts	0x02BE, r1
    8d78:	10 92 bf 02 	sts	0x02BF, r1
    8d7c:	10 92 c0 02 	sts	0x02C0, r1
						proximityOffset[i] = 0;
    8d80:	10 92 94 02 	sts	0x0294, r1
    8d84:	10 92 93 02 	sts	0x0293, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8d88:	10 92 c1 02 	sts	0x02C1, r1
    8d8c:	10 92 c2 02 	sts	0x02C2, r1
    8d90:	10 92 c3 02 	sts	0x02C3, r1
    8d94:	10 92 c4 02 	sts	0x02C4, r1
						proximityOffset[i] = 0;
    8d98:	10 92 96 02 	sts	0x0296, r1
    8d9c:	10 92 95 02 	sts	0x0295, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8da0:	10 92 c5 02 	sts	0x02C5, r1
    8da4:	10 92 c6 02 	sts	0x02C6, r1
    8da8:	10 92 c7 02 	sts	0x02C7, r1
    8dac:	10 92 c8 02 	sts	0x02C8, r1
						proximityOffset[i] = 0;
    8db0:	10 92 98 02 	sts	0x0298, r1
    8db4:	10 92 97 02 	sts	0x0297, r1
					}				
					
					calibrationCycle++;
    8db8:	d0 93 66 04 	sts	0x0466, r29
    8dbc:	c0 93 65 04 	sts	0x0465, r28

					continue;					// the first time "proxUpdated" is set, all the proximity values saved in the array 
    8dc0:	d2 cc       	rjmp	.-1628   	; 0x8766 <calibrateSensors+0x1b4>

		}

	} else {

		pwm_red = 255;
    8dc2:	8f ef       	ldi	r24, 0xFF	; 255
    8dc4:	80 93 0c 02 	sts	0x020C, r24
		pwm_green = 0;
    8dc8:	10 92 0d 02 	sts	0x020D, r1
		pwm_blue = 255;
    8dcc:	80 93 0e 02 	sts	0x020E, r24
		updateRedLed(pwm_red);
    8dd0:	0e 94 fb 3f 	call	0x7ff6	; 0x7ff6 <updateRedLed>
		updateGreenLed(pwm_green);
    8dd4:	80 91 0d 02 	lds	r24, 0x020D
    8dd8:	0e 94 0f 40 	call	0x801e	; 0x801e <updateGreenLed>
		updateBlueLed(pwm_blue);
    8ddc:	80 91 0e 02 	lds	r24, 0x020E
    8de0:	0e 94 23 40 	call	0x8046	; 0x8046 <updateBlueLed>

		setLeftSpeed(-10);
    8de4:	86 ef       	ldi	r24, 0xF6	; 246
    8de6:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <setLeftSpeed>
		setRightSpeed(10);
    8dea:	8a e0       	ldi	r24, 0x0A	; 10
    8dec:	0e 94 ff 27 	call	0x4ffe	; 0x4ffe <setRightSpeed>

		lastTick = getTime100MicroSec();
    8df0:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
    8df4:	60 93 84 04 	sts	0x0484, r22
    8df8:	70 93 85 04 	sts	0x0485, r23
    8dfc:	80 93 86 04 	sts	0x0486, r24
    8e00:	90 93 87 04 	sts	0x0487, r25
    8e04:	3d c0       	rjmp	.+122    	; 0x8e80 <calibrateSensors+0x8ce>
			readAccelXYZ();

			handleMotorsWithSpeedController();

			if((getTime100MicroSec()-lastTick) < PAUSE_4_SEC) {
				if(accXMax < accX) {
    8e06:	80 91 40 04 	lds	r24, 0x0440
    8e0a:	90 91 41 04 	lds	r25, 0x0441
    8e0e:	20 91 4e 04 	lds	r18, 0x044E
    8e12:	30 91 4f 04 	lds	r19, 0x044F
    8e16:	28 17       	cp	r18, r24
    8e18:	39 07       	cpc	r19, r25
    8e1a:	24 f4       	brge	.+8      	; 0x8e24 <calibrateSensors+0x872>
					accXMax = accX;
    8e1c:	90 93 4f 04 	sts	0x044F, r25
    8e20:	80 93 4e 04 	sts	0x044E, r24
				}
				if(accXMin > accX) {
    8e24:	20 91 50 04 	lds	r18, 0x0450
    8e28:	30 91 51 04 	lds	r19, 0x0451
    8e2c:	82 17       	cp	r24, r18
    8e2e:	93 07       	cpc	r25, r19
    8e30:	24 f4       	brge	.+8      	; 0x8e3a <calibrateSensors+0x888>
					accXMin = accX;
    8e32:	90 93 51 04 	sts	0x0451, r25
    8e36:	80 93 50 04 	sts	0x0450, r24
				}
				if(accYMax < accY) {
    8e3a:	80 91 42 04 	lds	r24, 0x0442
    8e3e:	90 91 43 04 	lds	r25, 0x0443
    8e42:	20 91 52 04 	lds	r18, 0x0452
    8e46:	30 91 53 04 	lds	r19, 0x0453
    8e4a:	28 17       	cp	r18, r24
    8e4c:	39 07       	cpc	r19, r25
    8e4e:	24 f4       	brge	.+8      	; 0x8e58 <calibrateSensors+0x8a6>
					accYMax = accY;
    8e50:	90 93 53 04 	sts	0x0453, r25
    8e54:	80 93 52 04 	sts	0x0452, r24
				}
				if(accYMin > accY) {
    8e58:	20 91 54 04 	lds	r18, 0x0454
    8e5c:	30 91 55 04 	lds	r19, 0x0455
    8e60:	82 17       	cp	r24, r18
    8e62:	93 07       	cpc	r25, r19
    8e64:	24 f4       	brge	.+8      	; 0x8e6e <calibrateSensors+0x8bc>
					accYMin = accY;
    8e66:	90 93 55 04 	sts	0x0455, r25
    8e6a:	80 93 54 04 	sts	0x0454, r24
				}
				calibrationCycle++;
    8e6e:	80 91 65 04 	lds	r24, 0x0465
    8e72:	90 91 66 04 	lds	r25, 0x0466
    8e76:	01 96       	adiw	r24, 0x01	; 1
    8e78:	90 93 66 04 	sts	0x0466, r25
    8e7c:	80 93 65 04 	sts	0x0465, r24

		lastTick = getTime100MicroSec();

		while(1) {

			readAccelXYZ();
    8e80:	0e 94 33 42 	call	0x8466	; 0x8466 <readAccelXYZ>

			handleMotorsWithSpeedController();
    8e84:	0e 94 b2 37 	call	0x6f64	; 0x6f64 <handleMotorsWithSpeedController>

			if((getTime100MicroSec()-lastTick) < PAUSE_4_SEC) {
    8e88:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
    8e8c:	20 91 84 04 	lds	r18, 0x0484
    8e90:	30 91 85 04 	lds	r19, 0x0485
    8e94:	40 91 86 04 	lds	r20, 0x0486
    8e98:	50 91 87 04 	lds	r21, 0x0487
    8e9c:	62 1b       	sub	r22, r18
    8e9e:	73 0b       	sbc	r23, r19
    8ea0:	84 0b       	sbc	r24, r20
    8ea2:	95 0b       	sbc	r25, r21
    8ea4:	6e 33       	cpi	r22, 0x3E	; 62
    8ea6:	26 e9       	ldi	r18, 0x96	; 150
    8ea8:	72 07       	cpc	r23, r18
    8eaa:	20 e0       	ldi	r18, 0x00	; 0
    8eac:	82 07       	cpc	r24, r18
    8eae:	20 e0       	ldi	r18, 0x00	; 0
    8eb0:	92 07       	cpc	r25, r18
    8eb2:	08 f4       	brcc	.+2      	; 0x8eb6 <calibrateSensors+0x904>
    8eb4:	a8 cf       	rjmp	.-176    	; 0x8e06 <calibrateSensors+0x854>
				if(accYMin > accY) {
					accYMin = accY;
				}
				calibrationCycle++;
			} else {
				accOffsetX = (accXMax + accXMin)>>1;
    8eb6:	80 91 50 04 	lds	r24, 0x0450
    8eba:	90 91 51 04 	lds	r25, 0x0451
    8ebe:	20 91 4e 04 	lds	r18, 0x044E
    8ec2:	30 91 4f 04 	lds	r19, 0x044F
    8ec6:	82 0f       	add	r24, r18
    8ec8:	93 1f       	adc	r25, r19
    8eca:	95 95       	asr	r25
    8ecc:	87 95       	ror	r24
    8ece:	90 93 47 04 	sts	0x0447, r25
    8ed2:	80 93 46 04 	sts	0x0446, r24
				accOffsetY = (accYMax + accYMin)>>1;
    8ed6:	80 91 54 04 	lds	r24, 0x0454
    8eda:	90 91 55 04 	lds	r25, 0x0455
    8ede:	20 91 52 04 	lds	r18, 0x0452
    8ee2:	30 91 53 04 	lds	r19, 0x0453
    8ee6:	82 0f       	add	r24, r18
    8ee8:	93 1f       	adc	r25, r19
    8eea:	95 95       	asr	r25
    8eec:	87 95       	ror	r24
    8eee:	90 93 49 04 	sts	0x0449, r25
    8ef2:	80 93 48 04 	sts	0x0448, r24
				break;
			}

		}

		setLeftSpeed(0);
    8ef6:	80 e0       	ldi	r24, 0x00	; 0
    8ef8:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <setLeftSpeed>
		setRightSpeed(0);
    8efc:	80 e0       	ldi	r24, 0x00	; 0
    8efe:	0e 94 ff 27 	call	0x4ffe	; 0x4ffe <setRightSpeed>
    8f02:	21 cc       	rjmp	.-1982   	; 0x8746 <calibrateSensors+0x194>
	accYMax = -1023;
	accYMin = 1023;
	accOffsetXSum = 0;
	accOffsetYSum = 0;

	if(abs(accZ) >= VERTICAL_THRESHOLD) {
    8f04:	90 95       	com	r25
    8f06:	81 95       	neg	r24
    8f08:	9f 4f       	sbci	r25, 0xFF	; 255
    8f0a:	b3 cb       	rjmp	.-2202   	; 0x8672 <calibrateSensors+0xc0>

00008f0c <readAccelXYZ_1>:

void readAccelXYZ_1() {

	int i = 0;

	if(useAccel == USE_MMAX7455L) {
    8f0c:	80 91 3f 04 	lds	r24, 0x043F
    8f10:	88 23       	and	r24, r24
    8f12:	79 f0       	breq	.+30     	; 0x8f32 <readAccelXYZ_1+0x26>
		for(i=0; i<2; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
		}
		return;

	} else if(useAccel == USE_ADXL345) {							
    8f14:	81 30       	cpi	r24, 0x01	; 1
    8f16:	11 f1       	breq	.+68     	; 0x8f5c <readAccelXYZ_1+0x50>
		}
		return;

	} else {

		accX = 0;
    8f18:	10 92 41 04 	sts	0x0441, r1
    8f1c:	10 92 40 04 	sts	0x0440, r1
		accY = 0;
    8f20:	10 92 43 04 	sts	0x0443, r1
    8f24:	10 92 42 04 	sts	0x0442, r1
		accZ = 0;
    8f28:	10 92 45 04 	sts	0x0445, r1
    8f2c:	10 92 44 04 	sts	0x0444, r1
    8f30:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    8f32:	80 91 14 02 	lds	r24, 0x0214
    8f36:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    8f3a:	80 e0       	ldi	r24, 0x00	; 0
    8f3c:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    8f40:	80 91 14 02 	lds	r24, 0x0214
    8f44:	8f 5f       	subi	r24, 0xFF	; 255
    8f46:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <i2c_rep_start>

		for(i=0; i<2; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    8f4a:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <i2c_readAck>
    8f4e:	80 93 5a 04 	sts	0x045A, r24
    8f52:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <i2c_readAck>
    8f56:	80 93 5b 04 	sts	0x045B, r24
    8f5a:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    8f5c:	80 91 14 02 	lds	r24, 0x0214
    8f60:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    8f64:	82 e3       	ldi	r24, 0x32	; 50
    8f66:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    8f6a:	80 91 14 02 	lds	r24, 0x0214
    8f6e:	8f 5f       	subi	r24, 0xFF	; 255
    8f70:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <i2c_rep_start>

		for(i=0; i<3; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    8f74:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <i2c_readAck>
    8f78:	80 93 5a 04 	sts	0x045A, r24
    8f7c:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <i2c_readAck>
    8f80:	80 93 5b 04 	sts	0x045B, r24
    8f84:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <i2c_readAck>
    8f88:	80 93 5c 04 	sts	0x045C, r24
    8f8c:	08 95       	ret

00008f8e <readAccelXYZ_2>:

void readAccelXYZ_2() {

	int i = 2;

	if(useAccel == USE_MMAX7455L) {
    8f8e:	80 91 3f 04 	lds	r24, 0x043F
    8f92:	88 23       	and	r24, r24
    8f94:	09 f0       	breq	.+2      	; 0x8f98 <readAccelXYZ_2+0xa>
    8f96:	5a c0       	rjmp	.+180    	; 0x904c <readAccelXYZ_2+0xbe>

		for(i=2; i<5; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    8f98:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <i2c_readAck>
    8f9c:	80 93 5c 04 	sts	0x045C, r24
		}

	} else if(useAccel == USE_ADXL345) {							

		for(i=3; i<5; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    8fa0:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <i2c_readAck>
    8fa4:	80 93 5d 04 	sts	0x045D, r24
    8fa8:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <i2c_readAck>
    8fac:	80 93 5e 04 	sts	0x045E, r24
		}
		accBuff[i] = i2c_readNak();									// read last byte sending NACK
    8fb0:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <i2c_readNak>
    8fb4:	80 93 5f 04 	sts	0x045F, r24
		i2c_stop();													// set stop conditon = release bus
    8fb8:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    8fbc:	80 91 8e 0b 	lds	r24, 0x0B8E
    8fc0:	88 23       	and	r24, r24
    8fc2:	09 f0       	breq	.+2      	; 0x8fc6 <readAccelXYZ_2+0x38>
    8fc4:	53 c0       	rjmp	.+166    	; 0x906c <readAccelXYZ_2+0xde>
			accX = ((signed int)accBuff[1]<<8)|accBuff[0];    			// X axis
			accY = ((signed int)accBuff[3]<<8)|accBuff[2];    			// Y axis
			accZ = ((signed int)accBuff[5]<<8)|accBuff[4];    			// Z axis
		} else {													// else return the calibrated values
			accX = (((signed int)accBuff[1]<<8)|accBuff[0])-accOffsetX;	// X axis
    8fc6:	80 91 5b 04 	lds	r24, 0x045B
    8fca:	99 27       	eor	r25, r25
    8fcc:	87 fd       	sbrc	r24, 7
    8fce:	90 95       	com	r25
    8fd0:	98 2f       	mov	r25, r24
    8fd2:	88 27       	eor	r24, r24
    8fd4:	20 91 5a 04 	lds	r18, 0x045A
    8fd8:	33 27       	eor	r19, r19
    8fda:	27 fd       	sbrc	r18, 7
    8fdc:	30 95       	com	r19
    8fde:	82 2b       	or	r24, r18
    8fe0:	93 2b       	or	r25, r19
    8fe2:	20 91 46 04 	lds	r18, 0x0446
    8fe6:	30 91 47 04 	lds	r19, 0x0447
    8fea:	82 1b       	sub	r24, r18
    8fec:	93 0b       	sbc	r25, r19
    8fee:	90 93 41 04 	sts	0x0441, r25
    8ff2:	80 93 40 04 	sts	0x0440, r24
			accY = (((signed int)accBuff[3]<<8)|accBuff[2])-accOffsetY;	// Y axis
    8ff6:	80 91 5d 04 	lds	r24, 0x045D
    8ffa:	99 27       	eor	r25, r25
    8ffc:	87 fd       	sbrc	r24, 7
    8ffe:	90 95       	com	r25
    9000:	98 2f       	mov	r25, r24
    9002:	88 27       	eor	r24, r24
    9004:	20 91 5c 04 	lds	r18, 0x045C
    9008:	33 27       	eor	r19, r19
    900a:	27 fd       	sbrc	r18, 7
    900c:	30 95       	com	r19
    900e:	82 2b       	or	r24, r18
    9010:	93 2b       	or	r25, r19
    9012:	20 91 48 04 	lds	r18, 0x0448
    9016:	30 91 49 04 	lds	r19, 0x0449
    901a:	82 1b       	sub	r24, r18
    901c:	93 0b       	sbc	r25, r19
    901e:	90 93 43 04 	sts	0x0443, r25
    9022:	80 93 42 04 	sts	0x0442, r24
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4]);			// Z axis
    9026:	80 91 5f 04 	lds	r24, 0x045F
    902a:	99 27       	eor	r25, r25
    902c:	87 fd       	sbrc	r24, 7
    902e:	90 95       	com	r25
    9030:	98 2f       	mov	r25, r24
    9032:	88 27       	eor	r24, r24
    9034:	20 91 5e 04 	lds	r18, 0x045E
    9038:	33 27       	eor	r19, r19
    903a:	27 fd       	sbrc	r18, 7
    903c:	30 95       	com	r19
    903e:	82 2b       	or	r24, r18
    9040:	93 2b       	or	r25, r19
    9042:	90 93 45 04 	sts	0x0445, r25
    9046:	80 93 44 04 	sts	0x0444, r24
    904a:	08 95       	ret
			accX = (((signed int)accBuff[1]<<8)|accBuff[0])-accOffsetX;	// X axis
			accY = (((signed int)accBuff[3]<<8)|accBuff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4]);			// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    904c:	81 30       	cpi	r24, 0x01	; 1
    904e:	09 f4       	brne	.+2      	; 0x9052 <readAccelXYZ_2+0xc4>
    9050:	a7 cf       	rjmp	.-178    	; 0x8fa0 <readAccelXYZ_2+0x12>
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4]);			// Z axis
		}

	} else {

		accX = 0;
    9052:	10 92 41 04 	sts	0x0441, r1
    9056:	10 92 40 04 	sts	0x0440, r1
		accY = 0;
    905a:	10 92 43 04 	sts	0x0443, r1
    905e:	10 92 42 04 	sts	0x0442, r1
		accZ = 0;
    9062:	10 92 45 04 	sts	0x0445, r1
    9066:	10 92 44 04 	sts	0x0444, r1
    906a:	08 95       	ret
		}
		accBuff[i] = i2c_readNak();									// read last byte sending NACK
		i2c_stop();													// set stop conditon = release bus

		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)accBuff[1]<<8)|accBuff[0];    			// X axis
    906c:	80 91 5b 04 	lds	r24, 0x045B
    9070:	99 27       	eor	r25, r25
    9072:	87 fd       	sbrc	r24, 7
    9074:	90 95       	com	r25
    9076:	98 2f       	mov	r25, r24
    9078:	88 27       	eor	r24, r24
    907a:	20 91 5a 04 	lds	r18, 0x045A
    907e:	33 27       	eor	r19, r19
    9080:	27 fd       	sbrc	r18, 7
    9082:	30 95       	com	r19
    9084:	82 2b       	or	r24, r18
    9086:	93 2b       	or	r25, r19
    9088:	90 93 41 04 	sts	0x0441, r25
    908c:	80 93 40 04 	sts	0x0440, r24
			accY = ((signed int)accBuff[3]<<8)|accBuff[2];    			// Y axis
    9090:	80 91 5d 04 	lds	r24, 0x045D
    9094:	99 27       	eor	r25, r25
    9096:	87 fd       	sbrc	r24, 7
    9098:	90 95       	com	r25
    909a:	98 2f       	mov	r25, r24
    909c:	88 27       	eor	r24, r24
    909e:	20 91 5c 04 	lds	r18, 0x045C
    90a2:	33 27       	eor	r19, r19
    90a4:	27 fd       	sbrc	r18, 7
    90a6:	30 95       	com	r19
    90a8:	82 2b       	or	r24, r18
    90aa:	93 2b       	or	r25, r19
    90ac:	b8 cf       	rjmp	.-144    	; 0x901e <readAccelXYZ_2+0x90>

000090ae <computeAngle>:

	}

}

void computeAngle() {
    90ae:	ef 92       	push	r14
    90b0:	ff 92       	push	r15
    90b2:	0f 93       	push	r16
    90b4:	1f 93       	push	r17

	// check the robot motion plane (horizontal or vertical) based on the Z axes;
	if(abs(accZ) >= VERTICAL_THRESHOLD) {
    90b6:	80 91 44 04 	lds	r24, 0x0444
    90ba:	90 91 45 04 	lds	r25, 0x0445
    90be:	97 fd       	sbrc	r25, 7
    90c0:	6c c0       	rjmp	.+216    	; 0x919a <computeAngle+0xec>
    90c2:	8d 32       	cpi	r24, 0x2D	; 45
    90c4:	91 05       	cpc	r25, r1
    90c6:	0c f4       	brge	.+2      	; 0x90ca <computeAngle+0x1c>
    90c8:	54 c0       	rjmp	.+168    	; 0x9172 <computeAngle+0xc4>
		currPosition = HORIZONTAL_POS;
    90ca:	81 e0       	ldi	r24, 0x01	; 1
    90cc:	80 93 15 02 	sts	0x0215, r24
    90d0:	21 e0       	ldi	r18, 0x01	; 1
	} else {
		currPosition = VERTICAL_POS;	
	}
	if(currPosition != robotPosition) {			
    90d2:	80 91 16 02 	lds	r24, 0x0216
    90d6:	82 17       	cp	r24, r18
    90d8:	09 f4       	brne	.+2      	; 0x90dc <computeAngle+0x2e>
    90da:	53 c0       	rjmp	.+166    	; 0x9182 <computeAngle+0xd4>
		timesInSamePos++;
    90dc:	80 91 58 04 	lds	r24, 0x0458
    90e0:	90 91 59 04 	lds	r25, 0x0459
    90e4:	01 96       	adiw	r24, 0x01	; 1
    90e6:	90 93 59 04 	sts	0x0459, r25
    90ea:	80 93 58 04 	sts	0x0458, r24
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
    90ee:	88 3c       	cpi	r24, 0xC8	; 200
    90f0:	91 05       	cpc	r25, r1
    90f2:	08 f0       	brcs	.+2      	; 0x90f6 <computeAngle+0x48>
    90f4:	4b c0       	rjmp	.+150    	; 0x918c <computeAngle+0xde>
	} else {
		timesInSamePos = 0;
	}

	// compute the angle using the X and Y axis
	thetaAcc = atan2((float)accX, (float)accY);
    90f6:	60 91 40 04 	lds	r22, 0x0440
    90fa:	70 91 41 04 	lds	r23, 0x0441
    90fe:	88 27       	eor	r24, r24
    9100:	77 fd       	sbrc	r23, 7
    9102:	80 95       	com	r24
    9104:	98 2f       	mov	r25, r24
    9106:	0e 94 d2 56 	call	0xada4	; 0xada4 <__floatsisf>
    910a:	7b 01       	movw	r14, r22
    910c:	8c 01       	movw	r16, r24
    910e:	60 91 42 04 	lds	r22, 0x0442
    9112:	70 91 43 04 	lds	r23, 0x0443
    9116:	88 27       	eor	r24, r24
    9118:	77 fd       	sbrc	r23, 7
    911a:	80 95       	com	r24
    911c:	98 2f       	mov	r25, r24
    911e:	0e 94 d2 56 	call	0xada4	; 0xada4 <__floatsisf>
    9122:	9b 01       	movw	r18, r22
    9124:	ac 01       	movw	r20, r24
    9126:	c8 01       	movw	r24, r16
    9128:	b7 01       	movw	r22, r14
    912a:	0e 94 dd 55 	call	0xabba	; 0xabba <atan2>
    912e:	60 93 c0 04 	sts	0x04C0, r22
    9132:	70 93 c1 04 	sts	0x04C1, r23
    9136:	80 93 c2 04 	sts	0x04C2, r24
    913a:	90 93 c3 04 	sts	0x04C3, r25
	currentAngle = (signed int)(thetaAcc*RAD_2_DEG);
    913e:	21 ee       	ldi	r18, 0xE1	; 225
    9140:	3e e2       	ldi	r19, 0x2E	; 46
    9142:	45 e6       	ldi	r20, 0x65	; 101
    9144:	52 e4       	ldi	r21, 0x42	; 66
    9146:	0e 94 eb 57 	call	0xafd6	; 0xafd6 <__mulsf3>
    914a:	0e 94 9f 56 	call	0xad3e	; 0xad3e <__fixsfsi>
    914e:	9b 01       	movw	r18, r22
    9150:	70 93 57 04 	sts	0x0457, r23
    9154:	60 93 56 04 	sts	0x0456, r22

	if(currentAngle < 0) {
    9158:	77 ff       	sbrs	r23, 7
    915a:	06 c0       	rjmp	.+12     	; 0x9168 <computeAngle+0xba>
		currentAngle = currentAngle + (signed int)360;	// angles from 0 to 360
    915c:	28 59       	subi	r18, 0x98	; 152
    915e:	3e 4f       	sbci	r19, 0xFE	; 254
    9160:	30 93 57 04 	sts	0x0457, r19
    9164:	20 93 56 04 	sts	0x0456, r18
	}

}
    9168:	1f 91       	pop	r17
    916a:	0f 91       	pop	r16
    916c:	ff 90       	pop	r15
    916e:	ef 90       	pop	r14
    9170:	08 95       	ret

	// check the robot motion plane (horizontal or vertical) based on the Z axes;
	if(abs(accZ) >= VERTICAL_THRESHOLD) {
		currPosition = HORIZONTAL_POS;
	} else {
		currPosition = VERTICAL_POS;	
    9172:	10 92 15 02 	sts	0x0215, r1
    9176:	20 e0       	ldi	r18, 0x00	; 0
	}
	if(currPosition != robotPosition) {			
    9178:	80 91 16 02 	lds	r24, 0x0216
    917c:	82 17       	cp	r24, r18
    917e:	09 f0       	breq	.+2      	; 0x9182 <computeAngle+0xd4>
    9180:	ad cf       	rjmp	.-166    	; 0x90dc <computeAngle+0x2e>
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
			robotPosition = currPosition;
		}
	} else {
		timesInSamePos = 0;
    9182:	10 92 59 04 	sts	0x0459, r1
    9186:	10 92 58 04 	sts	0x0458, r1
    918a:	b5 cf       	rjmp	.-150    	; 0x90f6 <computeAngle+0x48>
		currPosition = VERTICAL_POS;	
	}
	if(currPosition != robotPosition) {			
		timesInSamePos++;
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
    918c:	10 92 59 04 	sts	0x0459, r1
    9190:	10 92 58 04 	sts	0x0458, r1
			robotPosition = currPosition;
    9194:	20 93 16 02 	sts	0x0216, r18
    9198:	ae cf       	rjmp	.-164    	; 0x90f6 <computeAngle+0x48>
}

void computeAngle() {

	// check the robot motion plane (horizontal or vertical) based on the Z axes;
	if(abs(accZ) >= VERTICAL_THRESHOLD) {
    919a:	90 95       	com	r25
    919c:	81 95       	neg	r24
    919e:	9f 4f       	sbci	r25, 0xFF	; 255
    91a0:	90 cf       	rjmp	.-224    	; 0x90c2 <computeAngle+0x14>

000091a2 <writeCalibrationToFlash>:


#include "eepromIO.h"

void writeCalibrationToFlash() {	
	eeprom_update_block(calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
    91a2:	86 ef       	ldi	r24, 0xF6	; 246
    91a4:	98 e0       	ldi	r25, 0x08	; 8
    91a6:	6c e6       	ldi	r22, 0x6C	; 108
    91a8:	7f e0       	ldi	r23, 0x0F	; 15
    91aa:	40 e9       	ldi	r20, 0x90	; 144
    91ac:	50 e0       	ldi	r21, 0x00	; 0
    91ae:	0e 94 7c 59 	call	0xb2f8	; 0xb2f8 <__eeupd_block_m2560>
	eeprom_update_word ((uint16_t*) CALIB_CHECK_ADDRESS, 0xAA55);   // to let know the calibration data are valid
    91b2:	8a e6       	ldi	r24, 0x6A	; 106
    91b4:	9f e0       	ldi	r25, 0x0F	; 15
    91b6:	65 e5       	ldi	r22, 0x55	; 85
    91b8:	7a ea       	ldi	r23, 0xAA	; 170
    91ba:	0e 94 9e 59 	call	0xb33c	; 0xb33c <__eeupd_word_m2560>
}
    91be:	08 95       	ret

000091c0 <readCalibrationFromFlash>:

void readCalibrationFromFlash() {
	eeprom_read_block (calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
    91c0:	86 ef       	ldi	r24, 0xF6	; 246
    91c2:	98 e0       	ldi	r25, 0x08	; 8
    91c4:	6c e6       	ldi	r22, 0x6C	; 108
    91c6:	7f e0       	ldi	r23, 0x0F	; 15
    91c8:	40 e9       	ldi	r20, 0x90	; 144
    91ca:	50 e0       	ldi	r21, 0x00	; 0
    91cc:	0e 94 5e 59 	call	0xb2bc	; 0xb2bc <__eerd_block_m2560>
}
    91d0:	08 95       	ret

000091d2 <irCommInitTransmitter>:
#include "irCommunication.h"


void irCommInitTransmitter() {
	irCommEnabled = IRCOMM_MODE_TRANSMIT;
    91d2:	82 e0       	ldi	r24, 0x02	; 2
    91d4:	80 93 e6 04 	sts	0x04E6, r24
	irCommState = IRCOMM_TX_IDLE_STATE;
    91d8:	81 e0       	ldi	r24, 0x01	; 1
    91da:	80 93 e9 04 	sts	0x04E9, r24
}
    91de:	08 95       	ret

000091e0 <irCommInitReceiver>:

void irCommInitReceiver() {
	irCommEnabled = IRCOMM_MODE_RECEIVE;
    91e0:	81 e0       	ldi	r24, 0x01	; 1
    91e2:	80 93 e6 04 	sts	0x04E6, r24
	irCommState = IRCOMM_RX_IDLE_STATE;
    91e6:	80 93 e9 04 	sts	0x04E9, r24
	irCommEnabledNext = IRCOMM_MODE_RECEIVE;
    91ea:	80 93 e7 04 	sts	0x04E7, r24
}
    91ee:	08 95       	ret

000091f0 <irCommInitVars>:

void irCommInitVars() {
	memset(irCommMaxSensorValueAdc, 0x00, 16);
    91f0:	e0 91 4b 0b 	lds	r30, 0x0B4B
    91f4:	f0 91 4c 0b 	lds	r31, 0x0B4C
    91f8:	80 e1       	ldi	r24, 0x10	; 16
    91fa:	df 01       	movw	r26, r30
    91fc:	1d 92       	st	X+, r1
    91fe:	8a 95       	dec	r24
    9200:	e9 f7       	brne	.-6      	; 0x91fc <irCommInitVars+0xc>
	memset(irCommMinSensorValueAdc, 0xFF, 16);
    9202:	80 91 db 05 	lds	r24, 0x05DB
    9206:	90 91 dc 05 	lds	r25, 0x05DC
    920a:	6f ef       	ldi	r22, 0xFF	; 255
    920c:	70 e0       	ldi	r23, 0x00	; 0
    920e:	40 e1       	ldi	r20, 0x10	; 16
    9210:	50 e0       	ldi	r21, 0x00	; 0
    9212:	0e 94 57 59 	call	0xb2ae	; 0xb2ae <memset>
	irCommMode = IRCOMM_MODE_SENSORS_SAMPLING;
    9216:	10 92 e8 04 	sts	0x04E8, r1
}
    921a:	08 95       	ret

0000921c <irCommInit>:

void irCommInit() {
	irCommProxValuesAdc = irCommProxValuesBuff1;
    921c:	8f ed       	ldi	r24, 0xDF	; 223
    921e:	95 e0       	ldi	r25, 0x05	; 5
    9220:	90 93 7e 08 	sts	0x087E, r25
    9224:	80 93 7d 08 	sts	0x087D, r24
	irCommProxValuesCurr = irCommProxValuesBuff2;
    9228:	81 e2       	ldi	r24, 0x21	; 33
    922a:	97 e0       	ldi	r25, 0x07	; 7
    922c:	90 93 62 08 	sts	0x0862, r25
    9230:	80 93 61 08 	sts	0x0861, r24
	irCommMaxSensorValueAdc = irCommMaxSensorValueBuff1;
    9234:	ec e8       	ldi	r30, 0x8C	; 140
    9236:	f9 e0       	ldi	r31, 0x09	; 9
    9238:	f0 93 4c 0b 	sts	0x0B4C, r31
    923c:	e0 93 4b 0b 	sts	0x0B4B, r30
	irCommMaxSensorValueCurr = irCommMaxSensorValueBuff2;
    9240:	8a e7       	ldi	r24, 0x7A	; 122
    9242:	9b e0       	ldi	r25, 0x0B	; 11
    9244:	90 93 5f 05 	sts	0x055F, r25
    9248:	80 93 5e 05 	sts	0x055E, r24
	irCommMinSensorValueAdc = irCommMinSensorValueBuff1;
    924c:	83 e6       	ldi	r24, 0x63	; 99
    924e:	98 e0       	ldi	r25, 0x08	; 8
    9250:	90 93 dc 05 	sts	0x05DC, r25
    9254:	80 93 db 05 	sts	0x05DB, r24
	irCommMinSensorValueCurr = irCommMinSensorValueBuff2;
    9258:	26 ee       	ldi	r18, 0xE6	; 230
    925a:	38 e0       	ldi	r19, 0x08	; 8
    925c:	30 93 4b 05 	sts	0x054B, r19
    9260:	20 93 4a 05 	sts	0x054A, r18
	irCommState = IRCOMM_RX_IDLE_STATE;
	irCommEnabledNext = IRCOMM_MODE_RECEIVE;
}

void irCommInitVars() {
	memset(irCommMaxSensorValueAdc, 0x00, 16);
    9264:	20 e1       	ldi	r18, 0x10	; 16
    9266:	df 01       	movw	r26, r30
    9268:	1d 92       	st	X+, r1
    926a:	2a 95       	dec	r18
    926c:	e9 f7       	brne	.-6      	; 0x9268 <irCommInit+0x4c>
	memset(irCommMinSensorValueAdc, 0xFF, 16);
    926e:	6f ef       	ldi	r22, 0xFF	; 255
    9270:	70 e0       	ldi	r23, 0x00	; 0
    9272:	40 e1       	ldi	r20, 0x10	; 16
    9274:	50 e0       	ldi	r21, 0x00	; 0
    9276:	0e 94 57 59 	call	0xb2ae	; 0xb2ae <memset>
	irCommMode = IRCOMM_MODE_SENSORS_SAMPLING;
    927a:	10 92 e8 04 	sts	0x04E8, r1
	irCommEnabled = IRCOMM_MODE_TRANSMIT;
	irCommState = IRCOMM_TX_IDLE_STATE;
}

void irCommInitReceiver() {
	irCommEnabled = IRCOMM_MODE_RECEIVE;
    927e:	81 e0       	ldi	r24, 0x01	; 1
    9280:	80 93 e6 04 	sts	0x04E6, r24
	irCommState = IRCOMM_RX_IDLE_STATE;
    9284:	80 93 e9 04 	sts	0x04E9, r24
	irCommEnabledNext = IRCOMM_MODE_RECEIVE;
    9288:	80 93 e7 04 	sts	0x04E7, r24
	irCommMaxSensorValueCurr = irCommMaxSensorValueBuff2;
	irCommMinSensorValueAdc = irCommMinSensorValueBuff1;
	irCommMinSensorValueCurr = irCommMinSensorValueBuff2;
	irCommInitVars();
	irCommInitReceiver();
}
    928c:	08 95       	ret

0000928e <irCommDeinit>:

void irCommDeinit() {
	irCommEnabled = IRCOMM_MODE_SENSORS_SAMPLING;
    928e:	10 92 e6 04 	sts	0x04E6, r1
	irCommMode = IRCOMM_MODE_SENSORS_SAMPLING;
    9292:	10 92 e8 04 	sts	0x04E8, r1
}
    9296:	08 95       	ret

00009298 <resetDebugVariables>:

void resetDebugVariables() {
    9298:	ef 92       	push	r14
    929a:	ff 92       	push	r15
    929c:	0f 93       	push	r16
    929e:	1f 93       	push	r17
    92a0:	cf 93       	push	r28
    92a2:	df 93       	push	r29
	irCommRxMaxSensorIndexTemp=0;
    92a4:	10 92 03 05 	sts	0x0503, r1
	irCommRxMaxDiffIndexTemp=0;
    92a8:	10 92 04 05 	sts	0x0504, r1
	irCommMaxSensorValueCurrIndexTemp=0;
    92ac:	10 92 07 05 	sts	0x0507, r1
	irCommMinSensorValueCurrIndexTemp=0;
    92b0:	10 92 08 05 	sts	0x0508, r1
	memset(irCommRxMaxSensorTemp, 0xFF, 4);
    92b4:	ee 24       	eor	r14, r14
    92b6:	ea 94       	dec	r14
    92b8:	fe 2c       	mov	r15, r14
    92ba:	87 01       	movw	r16, r14
    92bc:	e0 92 3d 0b 	sts	0x0B3D, r14
    92c0:	f0 92 3e 0b 	sts	0x0B3E, r15
    92c4:	00 93 3f 0b 	sts	0x0B3F, r16
    92c8:	10 93 40 0b 	sts	0x0B40, r17
	memset(irCommRxMaxDiffTemp, 0xFF, 4);
    92cc:	e0 92 76 0b 	sts	0x0B76, r14
    92d0:	f0 92 77 0b 	sts	0x0B77, r15
    92d4:	00 93 78 0b 	sts	0x0B78, r16
    92d8:	10 93 79 0b 	sts	0x0B79, r17
	memset(irCommMaxSensorValueCurrTemp, 0xFF, 4);
    92dc:	e0 92 4c 05 	sts	0x054C, r14
    92e0:	f0 92 4d 05 	sts	0x054D, r15
    92e4:	00 93 4e 05 	sts	0x054E, r16
    92e8:	10 93 4f 05 	sts	0x054F, r17
	memset(irCommMinSensorValueCurrTemp, 0xFF, 4);
    92ec:	e0 92 41 0b 	sts	0x0B41, r14
    92f0:	f0 92 42 0b 	sts	0x0B42, r15
    92f4:	00 93 43 0b 	sts	0x0B43, r16
    92f8:	10 93 44 0b 	sts	0x0B44, r17

	irCommStateIndexTemp = 0;					
    92fc:	10 92 10 05 	sts	0x0510, r1
	memset(irCommStateTemp, 0xFF, 14);
    9300:	80 e5       	ldi	r24, 0x50	; 80
    9302:	95 e0       	ldi	r25, 0x05	; 5
    9304:	6f ef       	ldi	r22, 0xFF	; 255
    9306:	70 e0       	ldi	r23, 0x00	; 0
    9308:	4e e0       	ldi	r20, 0x0E	; 14
    930a:	50 e0       	ldi	r21, 0x00	; 0
    930c:	0e 94 57 59 	call	0xb2ae	; 0xb2ae <memset>

	irCommShiftCountFinalIndexTemp = 0;
    9310:	10 92 0a 05 	sts	0x050A, r1
	memset(irCommShiftCountFinalTemp, 0xFF, 2);
    9314:	cf ef       	ldi	r28, 0xFF	; 255
    9316:	df ef       	ldi	r29, 0xFF	; 255
    9318:	d0 93 4a 0b 	sts	0x0B4A, r29
    931c:	c0 93 49 0b 	sts	0x0B49, r28
	irCommRxStartBitDetectedIndexTemp = 0;
    9320:	10 92 0f 05 	sts	0x050F, r1
	memset(irCommRxStartBitDetectedTemp, 0xFF, 2);
    9324:	d0 93 8a 05 	sts	0x058A, r29
    9328:	c0 93 89 05 	sts	0x0589, r28
	irCommSwitchCountIndexTemp = 0;
    932c:	10 92 06 05 	sts	0x0506, r1
	memset(irCommSwitchCountTemp, 0xFF, 2);
    9330:	d0 93 66 05 	sts	0x0566, r29
    9334:	c0 93 65 05 	sts	0x0565, r28
	irCommMaxSensorSignalFiltIndexTemp = 0;
    9338:	10 92 02 05 	sts	0x0502, r1
	memset(irCommMaxSensorSignalFiltTemp, 0xFF, 80);
    933c:	8b e8       	ldi	r24, 0x8B	; 139
    933e:	95 e0       	ldi	r25, 0x05	; 5
    9340:	6f ef       	ldi	r22, 0xFF	; 255
    9342:	70 e0       	ldi	r23, 0x00	; 0
    9344:	40 e5       	ldi	r20, 0x50	; 80
    9346:	50 e0       	ldi	r21, 0x00	; 0
    9348:	0e 94 57 59 	call	0xb2ae	; 0xb2ae <memset>
	irCommMaxSensorSignalIndexTemp = 0;
    934c:	10 92 01 05 	sts	0x0501, r1
	memset(irCommMaxSensorSignalTemp, 0xFF, 80);
    9350:	8f e7       	ldi	r24, 0x7F	; 127
    9352:	98 e0       	ldi	r25, 0x08	; 8
    9354:	6f ef       	ldi	r22, 0xFF	; 255
    9356:	70 e0       	ldi	r23, 0x00	; 0
    9358:	40 e5       	ldi	r20, 0x50	; 80
    935a:	50 e0       	ldi	r21, 0x00	; 0
    935c:	0e 94 57 59 	call	0xb2ae	; 0xb2ae <memset>
	irCommProxMeanIndexTemp = 0;
    9360:	10 92 05 05 	sts	0x0505, r1
	memset(irCommProxMeanTemp, 0xFF, 4);
    9364:	e0 92 83 05 	sts	0x0583, r14
    9368:	f0 92 84 05 	sts	0x0584, r15
    936c:	00 93 85 05 	sts	0x0585, r16
    9370:	10 93 86 05 	sts	0x0586, r17
	irCommComputeShiftIndexTemp = 0;
    9374:	10 92 0c 05 	sts	0x050C, r1
	memset(irCommComputeShiftTemp, 0xFF, 2);
    9378:	d0 93 81 05 	sts	0x0581, r29
    937c:	c0 93 80 05 	sts	0x0580, r28
	irCommShiftCountIndexTemp = 0;
    9380:	10 92 09 05 	sts	0x0509, r1
	memset(irCommShiftCountTemp, 0xFF, 2);
    9384:	d0 93 90 0b 	sts	0x0B90, r29
    9388:	c0 93 8f 0b 	sts	0x0B8F, r28
	irCommRxPeakHighToLowIndexTemp = 0;
    938c:	10 92 0d 05 	sts	0x050D, r1
	memset(irCommRxPeakHighToLowTemp, 0xFF, 2);
    9390:	d0 93 de 05 	sts	0x05DE, r29
    9394:	c0 93 dd 05 	sts	0x05DD, r28
	irCommRxStartPeakDurationIndexTemp = 0;
    9398:	10 92 0e 05 	sts	0x050E, r1
	memset(irCommRxStartPeakDurationTemp, 0xFF, 2);
    939c:	d0 93 20 07 	sts	0x0720, r29
    93a0:	c0 93 1f 07 	sts	0x071F, r28
	irCommStartDiffIndexTemp = 0;
    93a4:	10 92 0b 05 	sts	0x050B, r1
	memset(irCommSyncStateTemp, 0xFF, 2);
    93a8:	d0 93 7f 05 	sts	0x057F, r29
    93ac:	c0 93 7e 05 	sts	0x057E, r28
	irCommSyncStateIndexTemp = 0;
    93b0:	10 92 11 05 	sts	0x0511, r1
	memset(irCommBitsSignalTemp, 0xFF, 400);
    93b4:	8b ea       	ldi	r24, 0xAB	; 171
    93b6:	99 e0       	ldi	r25, 0x09	; 9
    93b8:	6f ef       	ldi	r22, 0xFF	; 255
    93ba:	70 e0       	ldi	r23, 0x00	; 0
    93bc:	40 e9       	ldi	r20, 0x90	; 144
    93be:	51 e0       	ldi	r21, 0x01	; 1
    93c0:	0e 94 57 59 	call	0xb2ae	; 0xb2ae <memset>
	irCommBitsSignalIndexTemp = 0;
    93c4:	10 92 12 05 	sts	0x0512, r1
	memset(irCommRxBitReceivedTemp, 0xFF, 10);
    93c8:	83 e7       	ldi	r24, 0x73	; 115
    93ca:	98 e0       	ldi	r25, 0x08	; 8
    93cc:	6f ef       	ldi	r22, 0xFF	; 255
    93ce:	70 e0       	ldi	r23, 0x00	; 0
    93d0:	4a e0       	ldi	r20, 0x0A	; 10
    93d2:	50 e0       	ldi	r21, 0x00	; 0
    93d4:	0e 94 57 59 	call	0xb2ae	; 0xb2ae <memset>
	irCommRxBitReceivedIndexTemp = 0;
    93d8:	10 92 13 05 	sts	0x0513, r1
	
	
}
    93dc:	df 91       	pop	r29
    93de:	cf 91       	pop	r28
    93e0:	1f 91       	pop	r17
    93e2:	0f 91       	pop	r16
    93e4:	ff 90       	pop	r15
    93e6:	ef 90       	pop	r14
    93e8:	08 95       	ret

000093ea <irCommTasks>:

void irCommTasks() {
    93ea:	2f 92       	push	r2
    93ec:	3f 92       	push	r3
    93ee:	5f 92       	push	r5
    93f0:	6f 92       	push	r6
    93f2:	7f 92       	push	r7
    93f4:	8f 92       	push	r8
    93f6:	9f 92       	push	r9
    93f8:	af 92       	push	r10
    93fa:	bf 92       	push	r11
    93fc:	cf 92       	push	r12
    93fe:	df 92       	push	r13
    9400:	ef 92       	push	r14
    9402:	ff 92       	push	r15
    9404:	0f 93       	push	r16
    9406:	1f 93       	push	r17
    9408:	cf 93       	push	r28
    940a:	df 93       	push	r29
	int i = 0;

	if(irCommMode==IRCOMM_MODE_RECEIVE) {
    940c:	00 91 e8 04 	lds	r16, 0x04E8
    9410:	01 30       	cpi	r16, 0x01	; 1
    9412:	09 f4       	brne	.+2      	; 0x9416 <irCommTasks+0x2c>
    9414:	cd c0       	rjmp	.+410    	; 0x95b0 <irCommTasks+0x1c6>
			case IRCOMM_RX_STOP:
				break;
					
		}

	} else if(irCommMode==IRCOMM_MODE_TRANSMIT) {
    9416:	02 30       	cpi	r16, 0x02	; 2
    9418:	91 f0       	breq	.+36     	; 0x943e <irCommTasks+0x54>

		}

	}

}
    941a:	df 91       	pop	r29
    941c:	cf 91       	pop	r28
    941e:	1f 91       	pop	r17
    9420:	0f 91       	pop	r16
    9422:	ff 90       	pop	r15
    9424:	ef 90       	pop	r14
    9426:	df 90       	pop	r13
    9428:	cf 90       	pop	r12
    942a:	bf 90       	pop	r11
    942c:	af 90       	pop	r10
    942e:	9f 90       	pop	r9
    9430:	8f 90       	pop	r8
    9432:	7f 90       	pop	r7
    9434:	6f 90       	pop	r6
    9436:	5f 90       	pop	r5
    9438:	3f 90       	pop	r3
    943a:	2f 90       	pop	r2
    943c:	08 95       	ret
					
		}

	} else if(irCommMode==IRCOMM_MODE_TRANSMIT) {

		switch(irCommState) {
    943e:	80 91 e9 04 	lds	r24, 0x04E9
    9442:	82 30       	cpi	r24, 0x02	; 2
    9444:	09 f4       	brne	.+2      	; 0x9448 <irCommTasks+0x5e>
    9446:	c8 c2       	rjmp	.+1424   	; 0x99d8 <irCommTasks+0x5ee>
    9448:	85 30       	cpi	r24, 0x05	; 5
    944a:	39 f7       	brne	.-50     	; 0x941a <irCommTasks+0x30>
				break;

			case IRCOMM_TX_PREPARE_TRANSMISSION:				
				//updateBlueLed(255);
				//updateBlueLed(0);
				irCommTickCounter = getTime100MicroSec()-irCommTickCounter2;
    944c:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
    9450:	20 91 f1 04 	lds	r18, 0x04F1
    9454:	30 91 f2 04 	lds	r19, 0x04F2
    9458:	40 91 f3 04 	lds	r20, 0x04F3
    945c:	50 91 f4 04 	lds	r21, 0x04F4
    9460:	62 1b       	sub	r22, r18
    9462:	73 0b       	sbc	r23, r19
    9464:	84 0b       	sbc	r24, r20
    9466:	95 0b       	sbc	r25, r21
    9468:	60 93 ed 04 	sts	0x04ED, r22
    946c:	70 93 ee 04 	sts	0x04EE, r23
    9470:	80 93 ef 04 	sts	0x04EF, r24
    9474:	90 93 f0 04 	sts	0x04F0, r25
				irCommTickCounter2 = getTime100MicroSec();
    9478:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
    947c:	60 93 f1 04 	sts	0x04F1, r22
    9480:	70 93 f2 04 	sts	0x04F2, r23
    9484:	80 93 f3 04 	sts	0x04F3, r24
    9488:	90 93 f4 04 	sts	0x04F4, r25
				irCommTxBitToTransmit[0] = 2;	// start bit 1
    948c:	00 93 68 05 	sts	0x0568, r16
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
    9490:	83 e0       	ldi	r24, 0x03	; 3
    9492:	80 93 69 05 	sts	0x0569, r24
    9496:	80 91 39 05 	lds	r24, 0x0539
    949a:	90 e0       	ldi	r25, 0x00	; 0
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    949c:	9c 01       	movw	r18, r24
    949e:	21 70       	andi	r18, 0x01	; 1
    94a0:	30 70       	andi	r19, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    94a2:	20 93 71 05 	sts	0x0571, r18
	irCommRxBitReceivedIndexTemp = 0;
	
	
}

void irCommTasks() {
    94a6:	41 e0       	ldi	r20, 0x01	; 1
    94a8:	21 30       	cpi	r18, 0x01	; 1
    94aa:	31 05       	cpc	r19, r1
    94ac:	09 f0       	breq	.+2      	; 0x94b0 <irCommTasks+0xc6>
    94ae:	40 e0       	ldi	r20, 0x00	; 0
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    94b0:	9c 01       	movw	r18, r24
    94b2:	35 95       	asr	r19
    94b4:	27 95       	ror	r18
    94b6:	21 70       	andi	r18, 0x01	; 1
    94b8:	30 70       	andi	r19, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    94ba:	20 93 70 05 	sts	0x0570, r18
					if(irCommTempValue==1) {
    94be:	21 30       	cpi	r18, 0x01	; 1
    94c0:	31 05       	cpc	r19, r1
    94c2:	09 f4       	brne	.+2      	; 0x94c6 <irCommTasks+0xdc>
    94c4:	a0 c7       	rjmp	.+3904   	; 0xa406 <irCommTasks+0x101c>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    94c6:	9c 01       	movw	r18, r24
    94c8:	35 95       	asr	r19
    94ca:	27 95       	ror	r18
    94cc:	35 95       	asr	r19
    94ce:	27 95       	ror	r18
    94d0:	21 70       	andi	r18, 0x01	; 1
    94d2:	30 70       	andi	r19, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    94d4:	20 93 6f 05 	sts	0x056F, r18
					if(irCommTempValue==1) {
    94d8:	21 30       	cpi	r18, 0x01	; 1
    94da:	31 05       	cpc	r19, r1
    94dc:	09 f4       	brne	.+2      	; 0x94e0 <irCommTasks+0xf6>
    94de:	91 c7       	rjmp	.+3874   	; 0xa402 <irCommTasks+0x1018>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    94e0:	9c 01       	movw	r18, r24
    94e2:	35 95       	asr	r19
    94e4:	27 95       	ror	r18
    94e6:	35 95       	asr	r19
    94e8:	27 95       	ror	r18
    94ea:	35 95       	asr	r19
    94ec:	27 95       	ror	r18
    94ee:	21 70       	andi	r18, 0x01	; 1
    94f0:	30 70       	andi	r19, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    94f2:	20 93 6e 05 	sts	0x056E, r18
					if(irCommTempValue==1) {
    94f6:	21 30       	cpi	r18, 0x01	; 1
    94f8:	31 05       	cpc	r19, r1
    94fa:	09 f4       	brne	.+2      	; 0x94fe <irCommTasks+0x114>
    94fc:	80 c7       	rjmp	.+3840   	; 0xa3fe <irCommTasks+0x1014>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    94fe:	9c 01       	movw	r18, r24
    9500:	35 95       	asr	r19
    9502:	27 95       	ror	r18
    9504:	35 95       	asr	r19
    9506:	27 95       	ror	r18
    9508:	35 95       	asr	r19
    950a:	27 95       	ror	r18
    950c:	35 95       	asr	r19
    950e:	27 95       	ror	r18
    9510:	21 70       	andi	r18, 0x01	; 1
    9512:	30 70       	andi	r19, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    9514:	20 93 6d 05 	sts	0x056D, r18
					if(irCommTempValue==1) {
    9518:	21 30       	cpi	r18, 0x01	; 1
    951a:	31 05       	cpc	r19, r1
    951c:	09 f4       	brne	.+2      	; 0x9520 <irCommTasks+0x136>
    951e:	6d c7       	rjmp	.+3802   	; 0xa3fa <irCommTasks+0x1010>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    9520:	9c 01       	movw	r18, r24
    9522:	35 95       	asr	r19
    9524:	27 95       	ror	r18
    9526:	35 95       	asr	r19
    9528:	27 95       	ror	r18
    952a:	35 95       	asr	r19
    952c:	27 95       	ror	r18
    952e:	35 95       	asr	r19
    9530:	27 95       	ror	r18
    9532:	35 95       	asr	r19
    9534:	27 95       	ror	r18
    9536:	21 70       	andi	r18, 0x01	; 1
    9538:	30 70       	andi	r19, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    953a:	20 93 6c 05 	sts	0x056C, r18
					if(irCommTempValue==1) {
    953e:	21 30       	cpi	r18, 0x01	; 1
    9540:	31 05       	cpc	r19, r1
    9542:	09 f4       	brne	.+2      	; 0x9546 <irCommTasks+0x15c>
    9544:	6e c7       	rjmp	.+3804   	; 0xa422 <irCommTasks+0x1038>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    9546:	9c 01       	movw	r18, r24
    9548:	02 2e       	mov	r0, r18
    954a:	23 2f       	mov	r18, r19
    954c:	00 0c       	add	r0, r0
    954e:	22 1f       	adc	r18, r18
    9550:	33 0b       	sbc	r19, r19
    9552:	00 0c       	add	r0, r0
    9554:	22 1f       	adc	r18, r18
    9556:	33 1f       	adc	r19, r19
    9558:	21 70       	andi	r18, 0x01	; 1
    955a:	30 70       	andi	r19, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    955c:	20 93 6b 05 	sts	0x056B, r18
					if(irCommTempValue==1) {
    9560:	21 30       	cpi	r18, 0x01	; 1
    9562:	31 05       	cpc	r19, r1
    9564:	09 f4       	brne	.+2      	; 0x9568 <irCommTasks+0x17e>
    9566:	51 c7       	rjmp	.+3746   	; 0xa40a <irCommTasks+0x1020>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    9568:	88 0f       	add	r24, r24
    956a:	89 2f       	mov	r24, r25
    956c:	88 1f       	adc	r24, r24
    956e:	99 0b       	sbc	r25, r25
    9570:	91 95       	neg	r25
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    9572:	80 93 6a 05 	sts	0x056A, r24
					if(irCommTempValue==1) {
    9576:	81 30       	cpi	r24, 0x01	; 1
    9578:	91 05       	cpc	r25, r1
    957a:	09 f4       	brne	.+2      	; 0x957e <irCommTasks+0x194>
    957c:	54 c7       	rjmp	.+3752   	; 0xa426 <irCommTasks+0x103c>
						irCommTxCrc++;
    957e:	90 93 eb 04 	sts	0x04EB, r25
    9582:	80 93 ea 04 	sts	0x04EA, r24
					}
					//irCommTxBitToTransmit[9-i] = 2;
				}
				irCommTxCrc = irCommTxCrc % 4;
    9586:	43 70       	andi	r20, 0x03	; 3
				irCommTxCrc = 4 - irCommTxCrc;
    9588:	84 e0       	ldi	r24, 0x04	; 4
    958a:	84 1b       	sub	r24, r20
    958c:	80 93 3f 05 	sts	0x053F, r24
				irCommTxBitToTransmit[10] = (irCommTxCrc>>1)&0x01;
    9590:	98 2f       	mov	r25, r24
    9592:	96 95       	lsr	r25
    9594:	91 70       	andi	r25, 0x01	; 1
    9596:	90 93 72 05 	sts	0x0572, r25
				irCommTxBitToTransmit[11] = irCommTxCrc&0x01;	
    959a:	81 70       	andi	r24, 0x01	; 1
    959c:	80 93 73 05 	sts	0x0573, r24
				irCommTxBitCount = 0;							
    95a0:	10 92 40 05 	sts	0x0540, r1
				irCommTxPulseState = 0;	
    95a4:	10 92 41 05 	sts	0x0541, r1
				irCommState = IRCOMM_TX_COMPUTE_TIMINGS;				
    95a8:	82 e0       	ldi	r24, 0x02	; 2
    95aa:	80 93 e9 04 	sts	0x04E9, r24
				break;
    95ae:	35 cf       	rjmp	.-406    	; 0x941a <irCommTasks+0x30>
void irCommTasks() {
	int i = 0;

	if(irCommMode==IRCOMM_MODE_RECEIVE) {

		switch(irCommState) {
    95b0:	10 91 e9 04 	lds	r17, 0x04E9
    95b4:	13 30       	cpi	r17, 0x03	; 3
    95b6:	09 f4       	brne	.+2      	; 0x95ba <irCommTasks+0x1d0>
    95b8:	d9 c2       	rjmp	.+1458   	; 0x9b6c <irCommTasks+0x782>
    95ba:	14 30       	cpi	r17, 0x04	; 4
    95bc:	08 f0       	brcs	.+2      	; 0x95c0 <irCommTasks+0x1d6>
    95be:	3b c2       	rjmp	.+1142   	; 0x9a36 <irCommTasks+0x64c>
    95c0:	11 30       	cpi	r17, 0x01	; 1
    95c2:	09 f4       	brne	.+2      	; 0x95c6 <irCommTasks+0x1dc>
    95c4:	74 c6       	rjmp	.+3304   	; 0xa2ae <irCommTasks+0xec4>
    95c6:	12 30       	cpi	r17, 0x02	; 2
    95c8:	09 f0       	breq	.+2      	; 0x95cc <irCommTasks+0x1e2>
    95ca:	27 cf       	rjmp	.-434    	; 0x941a <irCommTasks+0x30>
#include "irCommunication.h"


void irCommInitTransmitter() {
	irCommEnabled = IRCOMM_MODE_TRANSMIT;
	irCommState = IRCOMM_TX_IDLE_STATE;
    95cc:	a0 91 5e 05 	lds	r26, 0x055E
    95d0:	b0 91 5f 05 	lds	r27, 0x055F
    95d4:	e0 91 4a 05 	lds	r30, 0x054A
    95d8:	f0 91 4b 05 	lds	r31, 0x054B
    95dc:	40 91 37 05 	lds	r20, 0x0537
				break;

			case IRCOMM_RX_MAX_SENSOR_STATE:
				// check from how many sensors the robot is receiving a possible message
				for(i=0; i<8; i++) {
					if((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    95e0:	8d 91       	ld	r24, X+
    95e2:	9c 91       	ld	r25, X
    95e4:	11 97       	sbiw	r26, 0x01	; 1
    95e6:	20 81       	ld	r18, Z
    95e8:	31 81       	ldd	r19, Z+1	; 0x01
    95ea:	82 1b       	sub	r24, r18
    95ec:	93 0b       	sbc	r25, r19
    95ee:	80 35       	cpi	r24, 0x50	; 80
    95f0:	91 05       	cpc	r25, r1
    95f2:	1c f0       	brlt	.+6      	; 0x95fa <irCommTasks+0x210>
						irCommRxNumReceivingSensors++;
    95f4:	4f 5f       	subi	r20, 0xFF	; 255
    95f6:	40 93 37 05 	sts	0x0537, r20
				break;

			case IRCOMM_RX_MAX_SENSOR_STATE:
				// check from how many sensors the robot is receiving a possible message
				for(i=0; i<8; i++) {
					if((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    95fa:	12 96       	adiw	r26, 0x02	; 2
    95fc:	8d 91       	ld	r24, X+
    95fe:	9c 91       	ld	r25, X
    9600:	13 97       	sbiw	r26, 0x03	; 3
    9602:	22 81       	ldd	r18, Z+2	; 0x02
    9604:	33 81       	ldd	r19, Z+3	; 0x03
    9606:	82 1b       	sub	r24, r18
    9608:	93 0b       	sbc	r25, r19
    960a:	80 35       	cpi	r24, 0x50	; 80
    960c:	91 05       	cpc	r25, r1
    960e:	0c f0       	brlt	.+2      	; 0x9612 <irCommTasks+0x228>
    9610:	29 c7       	rjmp	.+3666   	; 0xa464 <irCommTasks+0x107a>
    9612:	40 91 37 05 	lds	r20, 0x0537
    9616:	14 96       	adiw	r26, 0x04	; 4
    9618:	8d 91       	ld	r24, X+
    961a:	9c 91       	ld	r25, X
    961c:	15 97       	sbiw	r26, 0x05	; 5
    961e:	24 81       	ldd	r18, Z+4	; 0x04
    9620:	35 81       	ldd	r19, Z+5	; 0x05
    9622:	82 1b       	sub	r24, r18
    9624:	93 0b       	sbc	r25, r19
    9626:	80 35       	cpi	r24, 0x50	; 80
    9628:	91 05       	cpc	r25, r1
    962a:	0c f0       	brlt	.+2      	; 0x962e <irCommTasks+0x244>
    962c:	17 c7       	rjmp	.+3630   	; 0xa45c <irCommTasks+0x1072>
    962e:	40 91 37 05 	lds	r20, 0x0537
    9632:	16 96       	adiw	r26, 0x06	; 6
    9634:	8d 91       	ld	r24, X+
    9636:	9c 91       	ld	r25, X
    9638:	17 97       	sbiw	r26, 0x07	; 7
    963a:	26 81       	ldd	r18, Z+6	; 0x06
    963c:	37 81       	ldd	r19, Z+7	; 0x07
    963e:	82 1b       	sub	r24, r18
    9640:	93 0b       	sbc	r25, r19
    9642:	80 35       	cpi	r24, 0x50	; 80
    9644:	91 05       	cpc	r25, r1
    9646:	0c f0       	brlt	.+2      	; 0x964a <irCommTasks+0x260>
    9648:	05 c7       	rjmp	.+3594   	; 0xa454 <irCommTasks+0x106a>
    964a:	40 91 37 05 	lds	r20, 0x0537
    964e:	18 96       	adiw	r26, 0x08	; 8
    9650:	8d 91       	ld	r24, X+
    9652:	9c 91       	ld	r25, X
    9654:	19 97       	sbiw	r26, 0x09	; 9
    9656:	20 85       	ldd	r18, Z+8	; 0x08
    9658:	31 85       	ldd	r19, Z+9	; 0x09
    965a:	82 1b       	sub	r24, r18
    965c:	93 0b       	sbc	r25, r19
    965e:	80 35       	cpi	r24, 0x50	; 80
    9660:	91 05       	cpc	r25, r1
    9662:	0c f0       	brlt	.+2      	; 0x9666 <irCommTasks+0x27c>
    9664:	f3 c6       	rjmp	.+3558   	; 0xa44c <irCommTasks+0x1062>
    9666:	40 91 37 05 	lds	r20, 0x0537
    966a:	1a 96       	adiw	r26, 0x0a	; 10
    966c:	8d 91       	ld	r24, X+
    966e:	9c 91       	ld	r25, X
    9670:	1b 97       	sbiw	r26, 0x0b	; 11
    9672:	22 85       	ldd	r18, Z+10	; 0x0a
    9674:	33 85       	ldd	r19, Z+11	; 0x0b
    9676:	82 1b       	sub	r24, r18
    9678:	93 0b       	sbc	r25, r19
    967a:	80 35       	cpi	r24, 0x50	; 80
    967c:	91 05       	cpc	r25, r1
    967e:	0c f0       	brlt	.+2      	; 0x9682 <irCommTasks+0x298>
    9680:	f9 c6       	rjmp	.+3570   	; 0xa474 <irCommTasks+0x108a>
    9682:	40 91 37 05 	lds	r20, 0x0537
    9686:	1c 96       	adiw	r26, 0x0c	; 12
    9688:	8d 91       	ld	r24, X+
    968a:	9c 91       	ld	r25, X
    968c:	1d 97       	sbiw	r26, 0x0d	; 13
    968e:	24 85       	ldd	r18, Z+12	; 0x0c
    9690:	35 85       	ldd	r19, Z+13	; 0x0d
    9692:	82 1b       	sub	r24, r18
    9694:	93 0b       	sbc	r25, r19
    9696:	80 35       	cpi	r24, 0x50	; 80
    9698:	91 05       	cpc	r25, r1
    969a:	0c f0       	brlt	.+2      	; 0x969e <irCommTasks+0x2b4>
    969c:	e7 c6       	rjmp	.+3534   	; 0xa46c <irCommTasks+0x1082>
    969e:	40 91 37 05 	lds	r20, 0x0537
    96a2:	1e 96       	adiw	r26, 0x0e	; 14
    96a4:	8d 91       	ld	r24, X+
    96a6:	9c 91       	ld	r25, X
    96a8:	1f 97       	sbiw	r26, 0x0f	; 15
    96aa:	26 85       	ldd	r18, Z+14	; 0x0e
    96ac:	37 85       	ldd	r19, Z+15	; 0x0f
    96ae:	82 1b       	sub	r24, r18
    96b0:	93 0b       	sbc	r25, r19
    96b2:	80 35       	cpi	r24, 0x50	; 80
    96b4:	91 05       	cpc	r25, r1
    96b6:	0c f0       	brlt	.+2      	; 0x96ba <irCommTasks+0x2d0>
    96b8:	c4 c6       	rjmp	.+3464   	; 0xa442 <irCommTasks+0x1058>
    96ba:	80 91 37 05 	lds	r24, 0x0537
						irCommRxNumReceivingSensors++;
					}					
				}
				if(irCommRxNumReceivingSensors==0) {
    96be:	88 23       	and	r24, r24
    96c0:	09 f4       	brne	.+2      	; 0x96c4 <irCommTasks+0x2da>
    96c2:	1f c7       	rjmp	.+3646   	; 0xa502 <irCommTasks+0x1118>
						irCommRxMaxSensor++;
					} else {
						irCommRxMaxSensor = 0;
					}
				} else {
					if(irCommRxStartBitDetected==0) {
    96c4:	80 91 30 05 	lds	r24, 0x0530
    96c8:	88 23       	and	r24, r24
    96ca:	09 f0       	breq	.+2      	; 0x96ce <irCommTasks+0x2e4>
    96cc:	d7 c6       	rjmp	.+3502   	; 0xa47c <irCommTasks+0x1092>
						// start listening from the next sensor
						if(irCommRxMaxSensor < 7) {
    96ce:	20 91 35 05 	lds	r18, 0x0535
    96d2:	30 91 36 05 	lds	r19, 0x0536
    96d6:	27 30       	cpi	r18, 0x07	; 7
    96d8:	31 05       	cpc	r19, r1
    96da:	0c f0       	brlt	.+2      	; 0x96de <irCommTasks+0x2f4>
    96dc:	db c7       	rjmp	.+4022   	; 0xa694 <irCommTasks+0x12aa>
							irCommRxMaxSensor++;
    96de:	2f 5f       	subi	r18, 0xFF	; 255
    96e0:	3f 4f       	sbci	r19, 0xFF	; 255
    96e2:	30 93 36 05 	sts	0x0536, r19
    96e6:	20 93 35 05 	sts	0x0535, r18
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    96ea:	e9 01       	movw	r28, r18
    96ec:	cc 0f       	add	r28, r28
    96ee:	dd 1f       	adc	r29, r29
    96f0:	ad 01       	movw	r20, r26
    96f2:	4c 0f       	add	r20, r28
    96f4:	5d 1f       	adc	r21, r29
    96f6:	8e 01       	movw	r16, r28
    96f8:	0e 0f       	add	r16, r30
    96fa:	1f 1f       	adc	r17, r31
    96fc:	ea 01       	movw	r28, r20
    96fe:	88 81       	ld	r24, Y
    9700:	99 81       	ldd	r25, Y+1	; 0x01
    9702:	e8 01       	movw	r28, r16
    9704:	68 81       	ld	r22, Y
    9706:	79 81       	ldd	r23, Y+1	; 0x01
    9708:	86 1b       	sub	r24, r22
    970a:	97 0b       	sbc	r25, r23
    970c:	80 35       	cpi	r24, 0x50	; 80
    970e:	91 05       	cpc	r25, r1
    9710:	0c f0       	brlt	.+2      	; 0x9714 <irCommTasks+0x32a>
    9712:	ca c6       	rjmp	.+3476   	; 0xa4a8 <irCommTasks+0x10be>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    9714:	27 30       	cpi	r18, 0x07	; 7
    9716:	31 05       	cpc	r19, r1
    9718:	09 f0       	breq	.+2      	; 0x971c <irCommTasks+0x332>
    971a:	c3 c7       	rjmp	.+3974   	; 0xa6a2 <irCommTasks+0x12b8>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
    971c:	10 92 36 05 	sts	0x0536, r1
    9720:	10 92 35 05 	sts	0x0535, r1
    9724:	20 91 35 05 	lds	r18, 0x0535
    9728:	30 91 36 05 	lds	r19, 0x0536
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    972c:	e9 01       	movw	r28, r18
    972e:	cc 0f       	add	r28, r28
    9730:	dd 1f       	adc	r29, r29
    9732:	ad 01       	movw	r20, r26
    9734:	4c 0f       	add	r20, r28
    9736:	5d 1f       	adc	r21, r29
    9738:	8e 01       	movw	r16, r28
    973a:	0e 0f       	add	r16, r30
    973c:	1f 1f       	adc	r17, r31
    973e:	ea 01       	movw	r28, r20
    9740:	88 81       	ld	r24, Y
    9742:	99 81       	ldd	r25, Y+1	; 0x01
    9744:	e8 01       	movw	r28, r16
    9746:	68 81       	ld	r22, Y
    9748:	79 81       	ldd	r23, Y+1	; 0x01
    974a:	86 1b       	sub	r24, r22
    974c:	97 0b       	sbc	r25, r23
    974e:	80 35       	cpi	r24, 0x50	; 80
    9750:	91 05       	cpc	r25, r1
    9752:	0c f0       	brlt	.+2      	; 0x9756 <irCommTasks+0x36c>
    9754:	a9 c6       	rjmp	.+3410   	; 0xa4a8 <irCommTasks+0x10be>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    9756:	27 30       	cpi	r18, 0x07	; 7
    9758:	31 05       	cpc	r19, r1
    975a:	0c f4       	brge	.+2      	; 0x975e <irCommTasks+0x374>
    975c:	b0 c7       	rjmp	.+3936   	; 0xa6be <irCommTasks+0x12d4>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
    975e:	10 92 36 05 	sts	0x0536, r1
    9762:	10 92 35 05 	sts	0x0535, r1
    9766:	20 91 35 05 	lds	r18, 0x0535
    976a:	30 91 36 05 	lds	r19, 0x0536
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    976e:	e9 01       	movw	r28, r18
    9770:	cc 0f       	add	r28, r28
    9772:	dd 1f       	adc	r29, r29
    9774:	ad 01       	movw	r20, r26
    9776:	4c 0f       	add	r20, r28
    9778:	5d 1f       	adc	r21, r29
    977a:	8e 01       	movw	r16, r28
    977c:	0e 0f       	add	r16, r30
    977e:	1f 1f       	adc	r17, r31
    9780:	ea 01       	movw	r28, r20
    9782:	88 81       	ld	r24, Y
    9784:	99 81       	ldd	r25, Y+1	; 0x01
    9786:	e8 01       	movw	r28, r16
    9788:	68 81       	ld	r22, Y
    978a:	79 81       	ldd	r23, Y+1	; 0x01
    978c:	86 1b       	sub	r24, r22
    978e:	97 0b       	sbc	r25, r23
    9790:	80 35       	cpi	r24, 0x50	; 80
    9792:	91 05       	cpc	r25, r1
    9794:	0c f0       	brlt	.+2      	; 0x9798 <irCommTasks+0x3ae>
    9796:	88 c6       	rjmp	.+3344   	; 0xa4a8 <irCommTasks+0x10be>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    9798:	27 30       	cpi	r18, 0x07	; 7
    979a:	31 05       	cpc	r19, r1
    979c:	0c f4       	brge	.+2      	; 0x97a0 <irCommTasks+0x3b6>
    979e:	88 c7       	rjmp	.+3856   	; 0xa6b0 <irCommTasks+0x12c6>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
    97a0:	10 92 36 05 	sts	0x0536, r1
    97a4:	10 92 35 05 	sts	0x0535, r1
    97a8:	20 91 35 05 	lds	r18, 0x0535
    97ac:	30 91 36 05 	lds	r19, 0x0536
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    97b0:	e9 01       	movw	r28, r18
    97b2:	cc 0f       	add	r28, r28
    97b4:	dd 1f       	adc	r29, r29
    97b6:	ad 01       	movw	r20, r26
    97b8:	4c 0f       	add	r20, r28
    97ba:	5d 1f       	adc	r21, r29
    97bc:	8e 01       	movw	r16, r28
    97be:	0e 0f       	add	r16, r30
    97c0:	1f 1f       	adc	r17, r31
    97c2:	ea 01       	movw	r28, r20
    97c4:	88 81       	ld	r24, Y
    97c6:	99 81       	ldd	r25, Y+1	; 0x01
    97c8:	e8 01       	movw	r28, r16
    97ca:	68 81       	ld	r22, Y
    97cc:	79 81       	ldd	r23, Y+1	; 0x01
    97ce:	86 1b       	sub	r24, r22
    97d0:	97 0b       	sbc	r25, r23
    97d2:	80 35       	cpi	r24, 0x50	; 80
    97d4:	91 05       	cpc	r25, r1
    97d6:	0c f0       	brlt	.+2      	; 0x97da <irCommTasks+0x3f0>
    97d8:	67 c6       	rjmp	.+3278   	; 0xa4a8 <irCommTasks+0x10be>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    97da:	27 30       	cpi	r18, 0x07	; 7
    97dc:	31 05       	cpc	r19, r1
    97de:	0c f4       	brge	.+2      	; 0x97e2 <irCommTasks+0x3f8>
    97e0:	db c7       	rjmp	.+4022   	; 0xa798 <irCommTasks+0x13ae>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
    97e2:	10 92 36 05 	sts	0x0536, r1
    97e6:	10 92 35 05 	sts	0x0535, r1
    97ea:	20 91 35 05 	lds	r18, 0x0535
    97ee:	30 91 36 05 	lds	r19, 0x0536
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    97f2:	e9 01       	movw	r28, r18
    97f4:	cc 0f       	add	r28, r28
    97f6:	dd 1f       	adc	r29, r29
    97f8:	ad 01       	movw	r20, r26
    97fa:	4c 0f       	add	r20, r28
    97fc:	5d 1f       	adc	r21, r29
    97fe:	8e 01       	movw	r16, r28
    9800:	0e 0f       	add	r16, r30
    9802:	1f 1f       	adc	r17, r31
    9804:	ea 01       	movw	r28, r20
    9806:	88 81       	ld	r24, Y
    9808:	99 81       	ldd	r25, Y+1	; 0x01
    980a:	e8 01       	movw	r28, r16
    980c:	68 81       	ld	r22, Y
    980e:	79 81       	ldd	r23, Y+1	; 0x01
    9810:	86 1b       	sub	r24, r22
    9812:	97 0b       	sbc	r25, r23
    9814:	80 35       	cpi	r24, 0x50	; 80
    9816:	91 05       	cpc	r25, r1
    9818:	0c f0       	brlt	.+2      	; 0x981c <irCommTasks+0x432>
    981a:	46 c6       	rjmp	.+3212   	; 0xa4a8 <irCommTasks+0x10be>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    981c:	27 30       	cpi	r18, 0x07	; 7
    981e:	31 05       	cpc	r19, r1
    9820:	0c f4       	brge	.+2      	; 0x9824 <irCommTasks+0x43a>
    9822:	c1 c7       	rjmp	.+3970   	; 0xa7a6 <irCommTasks+0x13bc>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
    9824:	10 92 36 05 	sts	0x0536, r1
    9828:	10 92 35 05 	sts	0x0535, r1
    982c:	20 91 35 05 	lds	r18, 0x0535
    9830:	30 91 36 05 	lds	r19, 0x0536
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    9834:	e9 01       	movw	r28, r18
    9836:	cc 0f       	add	r28, r28
    9838:	dd 1f       	adc	r29, r29
    983a:	ad 01       	movw	r20, r26
    983c:	4c 0f       	add	r20, r28
    983e:	5d 1f       	adc	r21, r29
    9840:	8e 01       	movw	r16, r28
    9842:	0e 0f       	add	r16, r30
    9844:	1f 1f       	adc	r17, r31
    9846:	ea 01       	movw	r28, r20
    9848:	88 81       	ld	r24, Y
    984a:	99 81       	ldd	r25, Y+1	; 0x01
    984c:	e8 01       	movw	r28, r16
    984e:	68 81       	ld	r22, Y
    9850:	79 81       	ldd	r23, Y+1	; 0x01
    9852:	86 1b       	sub	r24, r22
    9854:	97 0b       	sbc	r25, r23
    9856:	80 35       	cpi	r24, 0x50	; 80
    9858:	91 05       	cpc	r25, r1
    985a:	0c f0       	brlt	.+2      	; 0x985e <irCommTasks+0x474>
    985c:	25 c6       	rjmp	.+3146   	; 0xa4a8 <irCommTasks+0x10be>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    985e:	27 30       	cpi	r18, 0x07	; 7
    9860:	31 05       	cpc	r19, r1
    9862:	0c f4       	brge	.+2      	; 0x9866 <irCommTasks+0x47c>
    9864:	a7 c7       	rjmp	.+3918   	; 0xa7b4 <irCommTasks+0x13ca>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
    9866:	10 92 36 05 	sts	0x0536, r1
    986a:	10 92 35 05 	sts	0x0535, r1
    986e:	20 91 35 05 	lds	r18, 0x0535
    9872:	30 91 36 05 	lds	r19, 0x0536
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    9876:	e9 01       	movw	r28, r18
    9878:	cc 0f       	add	r28, r28
    987a:	dd 1f       	adc	r29, r29
    987c:	ad 01       	movw	r20, r26
    987e:	4c 0f       	add	r20, r28
    9880:	5d 1f       	adc	r21, r29
    9882:	8e 01       	movw	r16, r28
    9884:	0e 0f       	add	r16, r30
    9886:	1f 1f       	adc	r17, r31
    9888:	ea 01       	movw	r28, r20
    988a:	88 81       	ld	r24, Y
    988c:	99 81       	ldd	r25, Y+1	; 0x01
    988e:	e8 01       	movw	r28, r16
    9890:	68 81       	ld	r22, Y
    9892:	79 81       	ldd	r23, Y+1	; 0x01
    9894:	86 1b       	sub	r24, r22
    9896:	97 0b       	sbc	r25, r23
    9898:	80 35       	cpi	r24, 0x50	; 80
    989a:	91 05       	cpc	r25, r1
    989c:	0c f0       	brlt	.+2      	; 0x98a0 <irCommTasks+0x4b6>
    989e:	04 c6       	rjmp	.+3080   	; 0xa4a8 <irCommTasks+0x10be>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    98a0:	27 30       	cpi	r18, 0x07	; 7
    98a2:	31 05       	cpc	r19, r1
    98a4:	0c f4       	brge	.+2      	; 0x98a8 <irCommTasks+0x4be>
    98a6:	8d c7       	rjmp	.+3866   	; 0xa7c2 <irCommTasks+0x13d8>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
    98a8:	10 92 36 05 	sts	0x0536, r1
    98ac:	10 92 35 05 	sts	0x0535, r1
    98b0:	20 91 35 05 	lds	r18, 0x0535
    98b4:	30 91 36 05 	lds	r19, 0x0536
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    98b8:	e9 01       	movw	r28, r18
    98ba:	cc 0f       	add	r28, r28
    98bc:	dd 1f       	adc	r29, r29
    98be:	ad 01       	movw	r20, r26
    98c0:	4c 0f       	add	r20, r28
    98c2:	5d 1f       	adc	r21, r29
    98c4:	8e 01       	movw	r16, r28
    98c6:	0e 0f       	add	r16, r30
    98c8:	1f 1f       	adc	r17, r31
    98ca:	ea 01       	movw	r28, r20
    98cc:	88 81       	ld	r24, Y
    98ce:	99 81       	ldd	r25, Y+1	; 0x01
    98d0:	e8 01       	movw	r28, r16
    98d2:	68 81       	ld	r22, Y
    98d4:	79 81       	ldd	r23, Y+1	; 0x01
    98d6:	86 1b       	sub	r24, r22
    98d8:	97 0b       	sbc	r25, r23
    98da:	80 35       	cpi	r24, 0x50	; 80
    98dc:	91 05       	cpc	r25, r1
    98de:	0c f0       	brlt	.+2      	; 0x98e2 <irCommTasks+0x4f8>
    98e0:	e3 c5       	rjmp	.+3014   	; 0xa4a8 <irCommTasks+0x10be>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    98e2:	27 30       	cpi	r18, 0x07	; 7
    98e4:	31 05       	cpc	r19, r1
    98e6:	0c f0       	brlt	.+2      	; 0x98ea <irCommTasks+0x500>
    98e8:	73 c7       	rjmp	.+3814   	; 0xa7d0 <irCommTasks+0x13e6>
								irCommRxMaxSensor++;
    98ea:	2f 5f       	subi	r18, 0xFF	; 255
    98ec:	3f 4f       	sbci	r19, 0xFF	; 255
    98ee:	30 93 36 05 	sts	0x0536, r19
    98f2:	20 93 35 05 	sts	0x0535, r18
							} else {
								irCommRxMaxSensor = 0;
    98f6:	80 91 33 05 	lds	r24, 0x0533
    98fa:	90 91 34 05 	lds	r25, 0x0534
    98fe:	e9 01       	movw	r28, r18
    9900:	cc 0f       	add	r28, r28
    9902:	dd 1f       	adc	r29, r29
    9904:	ad 01       	movw	r20, r26
    9906:	4c 0f       	add	r20, r28
    9908:	5d 1f       	adc	r21, r29
    990a:	8e 01       	movw	r16, r28
    990c:	0e 0f       	add	r16, r30
    990e:	1f 1f       	adc	r17, r31
					}
				}
				//turnOffGreenLeds();
				//setGreenLed(irCommRxMaxSensor, 1);			

				if(irCommRxMaxSensorIndexTemp>1) {
    9910:	60 91 03 05 	lds	r22, 0x0503
    9914:	62 30       	cpi	r22, 0x02	; 2
    9916:	08 f4       	brcc	.+2      	; 0x991a <irCommTasks+0x530>
    9918:	5b c6       	rjmp	.+3254   	; 0xa5d0 <irCommTasks+0x11e6>
    991a:	62 e0       	ldi	r22, 0x02	; 2
    991c:	e1 e0       	ldi	r30, 0x01	; 1
    991e:	f0 e0       	ldi	r31, 0x00	; 0
					irCommRxMaxSensorIndexTemp = 1;
					//updateBlueLed(0);
				}
				irCommRxMaxSensorTemp[irCommRxMaxSensorIndexTemp] = irCommRxMaxSensor;
    9920:	ee 0f       	add	r30, r30
    9922:	ff 1f       	adc	r31, r31
    9924:	e3 5c       	subi	r30, 0xC3	; 195
    9926:	f4 4f       	sbci	r31, 0xF4	; 244
    9928:	31 83       	std	Z+1, r19	; 0x01
    992a:	20 83       	st	Z, r18
				irCommRxMaxSensorIndexTemp++;
    992c:	60 93 03 05 	sts	0x0503, r22
					
				if(irCommRxMaxDiffIndexTemp>1) {
    9930:	60 91 04 05 	lds	r22, 0x0504
    9934:	62 30       	cpi	r22, 0x02	; 2
    9936:	08 f4       	brcc	.+2      	; 0x993a <irCommTasks+0x550>
    9938:	47 c6       	rjmp	.+3214   	; 0xa5c8 <irCommTasks+0x11de>
    993a:	62 e0       	ldi	r22, 0x02	; 2
    993c:	e1 e0       	ldi	r30, 0x01	; 1
    993e:	f0 e0       	ldi	r31, 0x00	; 0
					irCommRxMaxDiffIndexTemp = 1;
					//updateBlueLed(0);
				}
				irCommRxMaxDiffTemp[irCommRxMaxDiffIndexTemp] = irCommRxMaxDiff;
    9940:	ee 0f       	add	r30, r30
    9942:	ff 1f       	adc	r31, r31
    9944:	ea 58       	subi	r30, 0x8A	; 138
    9946:	f4 4f       	sbci	r31, 0xF4	; 244
    9948:	91 83       	std	Z+1, r25	; 0x01
    994a:	80 83       	st	Z, r24
				irCommRxMaxDiffIndexTemp++;
    994c:	60 93 04 05 	sts	0x0504, r22
				
				if(irCommMaxSensorValueCurrIndexTemp>1) {
    9950:	60 91 07 05 	lds	r22, 0x0507
    9954:	62 30       	cpi	r22, 0x02	; 2
    9956:	08 f4       	brcc	.+2      	; 0x995a <irCommTasks+0x570>
    9958:	33 c6       	rjmp	.+3174   	; 0xa5c0 <irCommTasks+0x11d6>
					irCommMaxSensorValueCurrIndexTemp = 1;
    995a:	61 e0       	ldi	r22, 0x01	; 1
    995c:	60 93 07 05 	sts	0x0507, r22
    9960:	62 e0       	ldi	r22, 0x02	; 2
    9962:	e1 e0       	ldi	r30, 0x01	; 1
    9964:	f0 e0       	ldi	r31, 0x00	; 0
					//updateBlueLed(0);
				}
				irCommMaxSensorValueCurrTemp[irCommMaxSensorValueCurrIndexTemp] = irCommMaxSensorValueCurr[irCommRxMaxSensor];
    9966:	ee 0f       	add	r30, r30
    9968:	ff 1f       	adc	r31, r31
    996a:	e4 5b       	subi	r30, 0xB4	; 180
    996c:	fa 4f       	sbci	r31, 0xFA	; 250
    996e:	ea 01       	movw	r28, r20
    9970:	48 81       	ld	r20, Y
    9972:	59 81       	ldd	r21, Y+1	; 0x01
    9974:	51 83       	std	Z+1, r21	; 0x01
    9976:	40 83       	st	Z, r20
				irCommMaxSensorValueCurrIndexTemp++;
    9978:	60 93 07 05 	sts	0x0507, r22
				
				if(irCommMinSensorValueCurrIndexTemp>1) {
    997c:	40 91 08 05 	lds	r20, 0x0508
    9980:	42 30       	cpi	r20, 0x02	; 2
    9982:	08 f4       	brcc	.+2      	; 0x9986 <irCommTasks+0x59c>
    9984:	29 c6       	rjmp	.+3154   	; 0xa5d8 <irCommTasks+0x11ee>
					irCommMinSensorValueCurrIndexTemp = 1;
    9986:	41 e0       	ldi	r20, 0x01	; 1
    9988:	40 93 08 05 	sts	0x0508, r20
    998c:	62 e0       	ldi	r22, 0x02	; 2
    998e:	e1 e0       	ldi	r30, 0x01	; 1
    9990:	f0 e0       	ldi	r31, 0x00	; 0
					//updateBlueLed(0);
				}
				irCommMinSensorValueCurrTemp[irCommMinSensorValueCurrIndexTemp] = irCommMinSensorValueCurr[irCommRxMaxSensor];
    9992:	ee 0f       	add	r30, r30
    9994:	ff 1f       	adc	r31, r31
    9996:	ef 5b       	subi	r30, 0xBF	; 191
    9998:	f4 4f       	sbci	r31, 0xF4	; 244
    999a:	d8 01       	movw	r26, r16
    999c:	4d 91       	ld	r20, X+
    999e:	5c 91       	ld	r21, X
    99a0:	11 97       	sbiw	r26, 0x01	; 1
    99a2:	51 83       	std	Z+1, r21	; 0x01
    99a4:	40 83       	st	Z, r20
				irCommMinSensorValueCurrIndexTemp++;			
    99a6:	60 93 08 05 	sts	0x0508, r22


				//if(irCommRxMaxSensor == -1) {
				//	updateRedLed(0);
				//}
				if(irCommRxMaxDiff >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    99aa:	80 35       	cpi	r24, 0x50	; 80
    99ac:	91 05       	cpc	r25, r1
    99ae:	0c f4       	brge	.+2      	; 0x99b2 <irCommTasks+0x5c8>
    99b0:	07 c5       	rjmp	.+2574   	; 0xa3c0 <irCommTasks+0xfd6>
					irCommState = IRCOMM_RX_DETECT_START_BIT_STATE;	
    99b2:	83 e0       	ldi	r24, 0x03	; 3
    99b4:	80 93 e9 04 	sts	0x04E9, r24
					
					if(irCommStateIndexTemp>13) {
    99b8:	80 91 10 05 	lds	r24, 0x0510
    99bc:	8e 30       	cpi	r24, 0x0E	; 14
    99be:	08 f4       	brcc	.+2      	; 0x99c2 <irCommTasks+0x5d8>
    99c0:	fb c4       	rjmp	.+2550   	; 0xa3b8 <irCommTasks+0xfce>
					irCommStateIndexTemp++;

				} else {
					irCommState = IRCOMM_RX_WAITING_BIT;

					if(irCommStateIndexTemp>13) {
    99c2:	8e e0       	ldi	r24, 0x0E	; 14
    99c4:	ed e0       	ldi	r30, 0x0D	; 13
    99c6:	f0 e0       	ldi	r31, 0x00	; 0
						irCommStateIndexTemp = 13;
						//updateRedLed(0);
					}
					irCommStateTemp[irCommStateIndexTemp] = irCommState;
    99c8:	90 91 e9 04 	lds	r25, 0x04E9
    99cc:	e0 5b       	subi	r30, 0xB0	; 176
    99ce:	fa 4f       	sbci	r31, 0xFA	; 250
    99d0:	90 83       	st	Z, r25
					irCommStateIndexTemp++;
    99d2:	80 93 10 05 	sts	0x0510, r24
    99d6:	21 cd       	rjmp	.-1470   	; 0x941a <irCommTasks+0x30>
				irCommState = IRCOMM_TX_COMPUTE_TIMINGS;				
				break;

			case IRCOMM_TX_COMPUTE_TIMINGS:
				//updateBlueLed(255);
				if(irCommTxBitToTransmit[irCommTxBitCount] == 3) {
    99d8:	30 91 40 05 	lds	r19, 0x0540
    99dc:	e3 2f       	mov	r30, r19
    99de:	f0 e0       	ldi	r31, 0x00	; 0
    99e0:	e8 59       	subi	r30, 0x98	; 152
    99e2:	fa 4f       	sbci	r31, 0xFA	; 250
    99e4:	20 81       	ld	r18, Z
    99e6:	23 30       	cpi	r18, 0x03	; 3
    99e8:	09 f4       	brne	.+2      	; 0x99ec <irCommTasks+0x602>
    99ea:	11 c5       	rjmp	.+2594   	; 0xa40e <irCommTasks+0x1024>
					//updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START2_DURATION;					
					irCommTxSwitchCount = IRCOMM_BIT_START2_SWITCH_COUNT;
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 2) {
    99ec:	22 30       	cpi	r18, 0x02	; 2
    99ee:	09 f4       	brne	.+2      	; 0x99f2 <irCommTasks+0x608>
    99f0:	28 c1       	rjmp	.+592    	; 0x9c42 <irCommTasks+0x858>
					//updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START1_DURATION;					
					irCommTxSwitchCount = IRCOMM_BIT_START1_SWITCH_COUNT;
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 1) {
    99f2:	21 30       	cpi	r18, 0x01	; 1
    99f4:	09 f4       	brne	.+2      	; 0x99f8 <irCommTasks+0x60e>
    99f6:	7b c5       	rjmp	.+2806   	; 0xa4ee <irCommTasks+0x1104>
					irCommTxDuration = IRCOMM_BIT1_DURATOIN;					
					irCommTxSwitchCount = IRCOMM_BIT1_SWITCH_COUNT;
				} else {
					irCommTxDuration = IRCOMM_BIT0_DURATION;						
    99f8:	8e e1       	ldi	r24, 0x1E	; 30
    99fa:	90 e0       	ldi	r25, 0x00	; 0
    99fc:	90 93 43 05 	sts	0x0543, r25
    9a00:	80 93 42 05 	sts	0x0542, r24
					irCommTxSwitchCount = IRCOMM_BIT0_SWITCH_COUNT;
    9a04:	88 e0       	ldi	r24, 0x08	; 8
    9a06:	80 93 44 05 	sts	0x0544, r24
				}
				if(irCommTxBitCount == 0) {
    9a0a:	33 23       	and	r19, r19
    9a0c:	51 f4       	brne	.+20     	; 0x9a22 <irCommTasks+0x638>
					//PORTA = irCommTxSensorMask;
					if(irCommTxSensorGroup==0) {
    9a0e:	80 91 48 05 	lds	r24, 0x0548
    9a12:	88 23       	and	r24, r24
    9a14:	09 f0       	breq	.+2      	; 0x9a18 <irCommTasks+0x62e>
    9a16:	09 c5       	rjmp	.+2578   	; 0xa42a <irCommTasks+0x1040>
						PORTA = 0xAA;
    9a18:	8a ea       	ldi	r24, 0xAA	; 170
    9a1a:	82 b9       	out	0x02, r24	; 2
					} else {
						PORTA = 0x55;
					}					
					irCommTxPulseState = 1;
    9a1c:	81 e0       	ldi	r24, 0x01	; 1
    9a1e:	80 93 41 05 	sts	0x0541, r24
				}
				irCommTxDurationCycle = 0;
    9a22:	10 92 46 05 	sts	0x0546, r1
				irCommTxSwitchCounter = 0;						
    9a26:	10 92 45 05 	sts	0x0545, r1
				irCommState = IRCOMM_TX_TRANSMIT_BIT;
    9a2a:	83 e0       	ldi	r24, 0x03	; 3
    9a2c:	80 93 e9 04 	sts	0x04E9, r24
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ1;
    9a30:	80 93 38 05 	sts	0x0538, r24
    9a34:	f2 cc       	rjmp	.-1564   	; 0x941a <irCommTasks+0x30>
void irCommTasks() {
	int i = 0;

	if(irCommMode==IRCOMM_MODE_RECEIVE) {

		switch(irCommState) {
    9a36:	17 30       	cpi	r17, 0x07	; 7
    9a38:	09 f4       	brne	.+2      	; 0x9a3c <irCommTasks+0x652>
    9a3a:	0f c4       	rjmp	.+2078   	; 0xa25a <irCommTasks+0xe70>
    9a3c:	18 30       	cpi	r17, 0x08	; 8
    9a3e:	09 f4       	brne	.+2      	; 0x9a42 <irCommTasks+0x658>
    9a40:	93 c1       	rjmp	.+806    	; 0x9d68 <irCommTasks+0x97e>
    9a42:	16 30       	cpi	r17, 0x06	; 6
    9a44:	09 f0       	breq	.+2      	; 0x9a48 <irCommTasks+0x65e>
    9a46:	e9 cc       	rjmp	.-1582   	; 0x941a <irCommTasks+0x30>
			case IRCOMM_RX_WAITING_BIT:
				break;

			case IRCOMM_RX_READ_BIT:
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
    9a48:	10 92 18 05 	sts	0x0518, r1
    9a4c:	10 92 19 05 	sts	0x0519, r1
    9a50:	10 92 1a 05 	sts	0x051A, r1
    9a54:	10 92 1b 05 	sts	0x051B, r1
				irCommTempMin = 1024;
    9a58:	80 e0       	ldi	r24, 0x00	; 0
    9a5a:	94 e0       	ldi	r25, 0x04	; 4
    9a5c:	90 93 1f 05 	sts	0x051F, r25
    9a60:	80 93 1e 05 	sts	0x051E, r24
				irCommTempMax = 0;
    9a64:	10 92 1d 05 	sts	0x051D, r1
    9a68:	10 92 1c 05 	sts	0x051C, r1
	irCommRxBitReceivedIndexTemp = 0;
	
	
}

void irCommTasks() {
    9a6c:	80 91 35 05 	lds	r24, 0x0535
    9a70:	90 91 36 05 	lds	r25, 0x0536
    9a74:	88 0f       	add	r24, r24
    9a76:	99 1f       	adc	r25, r25
    9a78:	e0 91 61 08 	lds	r30, 0x0861
    9a7c:	f0 91 62 08 	lds	r31, 0x0862
    9a80:	e8 0f       	add	r30, r24
    9a82:	f9 1f       	adc	r31, r25

			case IRCOMM_RX_READ_BIT:
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
				irCommTempMin = 1024;
				irCommTempMax = 0;
    9a84:	1d e4       	ldi	r17, 0x4D	; 77
    9a86:	c1 2e       	mov	r12, r17
    9a88:	1b e0       	ldi	r17, 0x0B	; 11
    9a8a:	d1 2e       	mov	r13, r17
	irCommRxBitReceivedIndexTemp = 0;
	
	
}

void irCommTasks() {
    9a8c:	e6 01       	movw	r28, r12
    9a8e:	60 e0       	ldi	r22, 0x00	; 0
    9a90:	70 e0       	ldi	r23, 0x00	; 0
    9a92:	40 e0       	ldi	r20, 0x00	; 0
    9a94:	54 e0       	ldi	r21, 0x04	; 4
    9a96:	ee 24       	eor	r14, r14
    9a98:	ff 24       	eor	r15, r15
    9a9a:	87 01       	movw	r16, r14
    9a9c:	08 c0       	rjmp	.+16     	; 0x9aae <irCommTasks+0x6c4>
			case IRCOMM_RX_READ_BIT:
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
				irCommTempMin = 1024;
				irCommTempMax = 0;
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    9a9e:	40 91 1e 05 	lds	r20, 0x051E
    9aa2:	50 91 1f 05 	lds	r21, 0x051F
    9aa6:	60 91 1c 05 	lds	r22, 0x051C
    9aaa:	70 91 1d 05 	lds	r23, 0x051D
					irCommMaxSensorSignal[i] = irCommProxValuesCurr[irCommRxMaxSensor+i*8];
    9aae:	20 81       	ld	r18, Z
    9ab0:	31 81       	ldd	r19, Z+1	; 0x01
    9ab2:	29 93       	st	Y+, r18
    9ab4:	39 93       	st	Y+, r19
					irCommProxSum += irCommMaxSensorSignal[i];
    9ab6:	c9 01       	movw	r24, r18
    9ab8:	aa 27       	eor	r26, r26
    9aba:	97 fd       	sbrc	r25, 7
    9abc:	a0 95       	com	r26
    9abe:	ba 2f       	mov	r27, r26
    9ac0:	e8 0e       	add	r14, r24
    9ac2:	f9 1e       	adc	r15, r25
    9ac4:	0a 1f       	adc	r16, r26
    9ac6:	1b 1f       	adc	r17, r27
					if(irCommTempMin > irCommMaxSensorSignal[i]) {
    9ac8:	24 17       	cp	r18, r20
    9aca:	35 07       	cpc	r19, r21
    9acc:	2c f4       	brge	.+10     	; 0x9ad8 <irCommTasks+0x6ee>
						irCommTempMin = irCommMaxSensorSignal[i];
    9ace:	30 93 1f 05 	sts	0x051F, r19
    9ad2:	20 93 1e 05 	sts	0x051E, r18
    9ad6:	a9 01       	movw	r20, r18
					}
					if(irCommTempMax < irCommMaxSensorSignal[i]) {
    9ad8:	62 17       	cp	r22, r18
    9ada:	73 07       	cpc	r23, r19
    9adc:	2c f4       	brge	.+10     	; 0x9ae8 <irCommTasks+0x6fe>
						irCommTempMax = irCommMaxSensorSignal[i];
    9ade:	30 93 1d 05 	sts	0x051D, r19
    9ae2:	20 93 1c 05 	sts	0x051C, r18
    9ae6:	b9 01       	movw	r22, r18
    9ae8:	70 96       	adiw	r30, 0x10	; 16
			case IRCOMM_RX_READ_BIT:
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
				irCommTempMin = 1024;
				irCommTempMax = 0;
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    9aea:	2b e0       	ldi	r18, 0x0B	; 11
    9aec:	c5 37       	cpi	r28, 0x75	; 117
    9aee:	d2 07       	cpc	r29, r18
    9af0:	b1 f6       	brne	.-84     	; 0x9a9e <irCommTasks+0x6b4>
    9af2:	e0 92 18 05 	sts	0x0518, r14
    9af6:	f0 92 19 05 	sts	0x0519, r15
    9afa:	00 93 1a 05 	sts	0x051A, r16
    9afe:	10 93 1b 05 	sts	0x051B, r17
					if(irCommTempMax < irCommMaxSensorSignal[i]) {
						irCommTempMax = irCommMaxSensorSignal[i];
					}
				}

				if((irCommTempMax-irCommTempMin) < IRCOMM_DETECTION_AMPLITUDE_THR) {	// error...no significant signal perceived					
    9b02:	64 1b       	sub	r22, r20
    9b04:	75 0b       	sbc	r23, r21
    9b06:	60 35       	cpi	r22, 0x50	; 80
    9b08:	71 05       	cpc	r23, r1
    9b0a:	0c f4       	brge	.+2      	; 0x9b0e <irCommTasks+0x724>
    9b0c:	60 c4       	rjmp	.+2240   	; 0xa3ce <irCommTasks+0xfe4>

					resetDebugVariables();
					break;
				}

				irCommProxMean = (int)(irCommProxSum / IRCOMM_SAMPLING_WINDOW);
    9b0e:	c8 01       	movw	r24, r16
    9b10:	b7 01       	movw	r22, r14
    9b12:	24 e1       	ldi	r18, 0x14	; 20
    9b14:	30 e0       	ldi	r19, 0x00	; 0
    9b16:	40 e0       	ldi	r20, 0x00	; 0
    9b18:	50 e0       	ldi	r21, 0x00	; 0
    9b1a:	0e 94 bc 58 	call	0xb178	; 0xb178 <__divmodsi4>
    9b1e:	b9 01       	movw	r22, r18
    9b20:	30 93 23 05 	sts	0x0523, r19
    9b24:	20 93 22 05 	sts	0x0522, r18
    9b28:	20 91 12 05 	lds	r18, 0x0512
    9b2c:	0f c0       	rjmp	.+30     	; 0x9b4c <irCommTasks+0x762>

				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
					irCommMaxSensorSignal[i] -= irCommProxMean;

					if(irCommBitsSignalIndexTemp>199) {
    9b2e:	e2 2f       	mov	r30, r18
    9b30:	f0 e0       	ldi	r31, 0x00	; 0
    9b32:	2f 5f       	subi	r18, 0xFF	; 255
						irCommBitsSignalIndexTemp = 199;
						//updateRedLed(0);
					}
					irCommBitsSignalTemp[irCommBitsSignalIndexTemp] = irCommMaxSensorSignal[i];
    9b34:	ee 0f       	add	r30, r30
    9b36:	ff 1f       	adc	r31, r31
    9b38:	e5 55       	subi	r30, 0x55	; 85
    9b3a:	f6 4f       	sbci	r31, 0xF6	; 246
    9b3c:	91 83       	std	Z+1, r25	; 0x01
    9b3e:	80 83       	st	Z, r24
				}

				irCommProxMean = (int)(irCommProxSum / IRCOMM_SAMPLING_WINDOW);

				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    9b40:	e5 e7       	ldi	r30, 0x75	; 117
    9b42:	ce 16       	cp	r12, r30
    9b44:	eb e0       	ldi	r30, 0x0B	; 11
    9b46:	de 06       	cpc	r13, r30
    9b48:	09 f4       	brne	.+2      	; 0x9b4c <irCommTasks+0x762>
    9b4a:	da c3       	rjmp	.+1972   	; 0xa300 <irCommTasks+0xf16>
					irCommMaxSensorSignal[i] -= irCommProxMean;
    9b4c:	d6 01       	movw	r26, r12
    9b4e:	8d 91       	ld	r24, X+
    9b50:	9c 91       	ld	r25, X
    9b52:	11 97       	sbiw	r26, 0x01	; 1
    9b54:	86 1b       	sub	r24, r22
    9b56:	97 0b       	sbc	r25, r23
    9b58:	e6 01       	movw	r28, r12
    9b5a:	89 93       	st	Y+, r24
    9b5c:	99 93       	st	Y+, r25
    9b5e:	6e 01       	movw	r12, r28

					if(irCommBitsSignalIndexTemp>199) {
    9b60:	28 3c       	cpi	r18, 0xC8	; 200
    9b62:	28 f3       	brcs	.-54     	; 0x9b2e <irCommTasks+0x744>
    9b64:	28 ec       	ldi	r18, 0xC8	; 200
    9b66:	e7 ec       	ldi	r30, 0xC7	; 199
    9b68:	f0 e0       	ldi	r31, 0x00	; 0
    9b6a:	e4 cf       	rjmp	.-56     	; 0x9b34 <irCommTasks+0x74a>
												
				break;

			case IRCOMM_RX_DETECT_START_BIT_STATE:
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
    9b6c:	10 92 18 05 	sts	0x0518, r1
    9b70:	10 92 19 05 	sts	0x0519, r1
    9b74:	10 92 1a 05 	sts	0x051A, r1
    9b78:	10 92 1b 05 	sts	0x051B, r1
				irCommTempMin = 1024;
    9b7c:	80 e0       	ldi	r24, 0x00	; 0
    9b7e:	94 e0       	ldi	r25, 0x04	; 4
    9b80:	90 93 1f 05 	sts	0x051F, r25
    9b84:	80 93 1e 05 	sts	0x051E, r24
				irCommTempMax = 0;
    9b88:	10 92 1d 05 	sts	0x051D, r1
    9b8c:	10 92 1c 05 	sts	0x051C, r1
				irCommShiftCount = 0;
    9b90:	10 92 20 05 	sts	0x0520, r1
				irCommComputeShift = 1;												
    9b94:	00 93 21 05 	sts	0x0521, r16
    9b98:	e0 90 01 05 	lds	r14, 0x0501
    9b9c:	60 e0       	ldi	r22, 0x00	; 0
    9b9e:	70 e0       	ldi	r23, 0x00	; 0
    9ba0:	cb 01       	movw	r24, r22
	irCommRxBitReceivedIndexTemp = 0;
	
	
}

void irCommTasks() {
    9ba2:	20 91 35 05 	lds	r18, 0x0535
    9ba6:	30 91 36 05 	lds	r19, 0x0536
    9baa:	22 0f       	add	r18, r18
    9bac:	33 1f       	adc	r19, r19
    9bae:	a0 91 61 08 	lds	r26, 0x0861
    9bb2:	b0 91 62 08 	lds	r27, 0x0862
    9bb6:	a2 0f       	add	r26, r18
    9bb8:	b3 1f       	adc	r27, r19
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
				irCommTempMin = 1024;
				irCommTempMax = 0;
				irCommShiftCount = 0;
				irCommComputeShift = 1;												
    9bba:	0d e4       	ldi	r16, 0x4D	; 77
    9bbc:	1b e0       	ldi	r17, 0x0B	; 11
	irCommRxBitReceivedIndexTemp = 0;
	
	
}

void irCommTasks() {
    9bbe:	f8 e2       	ldi	r31, 0x28	; 40
    9bc0:	8f 2e       	mov	r8, r31
    9bc2:	91 2c       	mov	r9, r1
    9bc4:	80 0e       	add	r8, r16
    9bc6:	91 1e       	adc	r9, r17
    9bc8:	18 01       	movw	r2, r16
    9bca:	cc 24       	eor	r12, r12
    9bcc:	c3 94       	inc	r12
    9bce:	ff 24       	eor	r15, r15
							} else {
								//updateGreenLed(0);
							}
							irCommTempMin = irCommMaxSensorSignal[i];	// otherwise I cannot detect spike of one sample (peakDuration=1), related to sensors sampling
							irCommTempMax = irCommMaxSensorSignal[i];
							irCommComputeShift = 2;
    9bd0:	e2 e0       	ldi	r30, 0x02	; 2
    9bd2:	6e 2e       	mov	r6, r30
							

							if(irCommMaxSensorSignal[i] == irCommTempMax) {
								irCommRxPeakHighToLow = 0;
							} else if(irCommMaxSensorSignal[i] == irCommTempMin) {
								irCommRxPeakHighToLow = 1;
    9bd4:	55 24       	eor	r5, r5
    9bd6:	53 94       	inc	r5
    9bd8:	25 c0       	rjmp	.+74     	; 0x9c24 <irCommTasks+0x83a>
				irCommShiftCount = 0;
				irCommComputeShift = 1;												
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
					irCommMaxSensorSignal[i] = irCommProxValuesCurr[irCommRxMaxSensor+i*8];

					if(irCommMaxSensorSignalIndexTemp>39) {
    9bda:	2e 2d       	mov	r18, r14
    9bdc:	30 e0       	ldi	r19, 0x00	; 0
    9bde:	e3 94       	inc	r14
						irCommMaxSensorSignalIndexTemp = 39;
						//updateRedLed(0);
					}
					irCommMaxSensorSignalTemp[irCommMaxSensorSignalIndexTemp] = irCommMaxSensorSignal[i];
    9be0:	22 0f       	add	r18, r18
    9be2:	33 1f       	adc	r19, r19
    9be4:	21 58       	subi	r18, 0x81	; 129
    9be6:	37 4f       	sbci	r19, 0xF7	; 247
    9be8:	e9 01       	movw	r28, r18
    9bea:	f9 83       	std	Y+1, r31	; 0x01
    9bec:	e8 83       	st	Y, r30
					irCommMaxSensorSignalIndexTemp++;					
    9bee:	e0 92 01 05 	sts	0x0501, r14

					irCommProxSum += irCommMaxSensorSignal[i];
    9bf2:	9f 01       	movw	r18, r30
    9bf4:	44 27       	eor	r20, r20
    9bf6:	37 fd       	sbrc	r19, 7
    9bf8:	40 95       	com	r20
    9bfa:	54 2f       	mov	r21, r20
    9bfc:	62 0f       	add	r22, r18
    9bfe:	73 1f       	adc	r23, r19
    9c00:	84 1f       	adc	r24, r20
    9c02:	95 1f       	adc	r25, r21
					if(irCommComputeShift == 1) {	// compute the shift between the rx sampling and tx signal
    9c04:	2c 2d       	mov	r18, r12
    9c06:	21 30       	cpi	r18, 0x01	; 1
    9c08:	29 f1       	breq	.+74     	; 0x9c54 <irCommTasks+0x86a>
							irCommTempMax = irCommMaxSensorSignal[i];
							irCommComputeShift = 2;
							irCommShiftCount--;	// the current sample is already part of the signal start thus do not skip it
							irCommRxStartPeakDuration = 0;
						}
					 } else if(irCommComputeShift == 2) {		
    9c0a:	2c 2d       	mov	r18, r12
    9c0c:	22 30       	cpi	r18, 0x02	; 2
    9c0e:	09 f4       	brne	.+2      	; 0x9c12 <irCommTasks+0x828>
    9c10:	76 c0       	rjmp	.+236    	; 0x9cfe <irCommTasks+0x914>
						}	
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
							if((irCommMaxSensorSignal[i]==irCommTempMax) && (irCommRxPeakHighToLow==1)) {
								irCommComputeShift = 0;
							} else if((irCommMaxSensorSignal[i]==irCommTempMin) && (irCommRxPeakHighToLow==0)) {
								irCommComputeShift = 0;
    9c12:	50 96       	adiw	r26, 0x10	; 16
				irCommProxSum = 0;
				irCommTempMin = 1024;
				irCommTempMax = 0;
				irCommShiftCount = 0;
				irCommComputeShift = 1;												
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    9c14:	e5 e7       	ldi	r30, 0x75	; 117
    9c16:	2e 16       	cp	r2, r30
    9c18:	eb e0       	ldi	r30, 0x0B	; 11
    9c1a:	3e 06       	cpc	r3, r30
    9c1c:	09 f4       	brne	.+2      	; 0x9c20 <irCommTasks+0x836>
    9c1e:	3a c2       	rjmp	.+1140   	; 0xa094 <irCommTasks+0xcaa>
    9c20:	c0 90 21 05 	lds	r12, 0x0521
					irCommMaxSensorSignal[i] = irCommProxValuesCurr[irCommRxMaxSensor+i*8];
    9c24:	ed 91       	ld	r30, X+
    9c26:	fc 91       	ld	r31, X
    9c28:	11 97       	sbiw	r26, 0x01	; 1
    9c2a:	e1 01       	movw	r28, r2
    9c2c:	e9 93       	st	Y+, r30
    9c2e:	f9 93       	st	Y+, r31
    9c30:	1e 01       	movw	r2, r28

					if(irCommMaxSensorSignalIndexTemp>39) {
    9c32:	2e 2d       	mov	r18, r14
    9c34:	28 32       	cpi	r18, 0x28	; 40
    9c36:	88 f2       	brcs	.-94     	; 0x9bda <irCommTasks+0x7f0>
    9c38:	58 e2       	ldi	r21, 0x28	; 40
    9c3a:	e5 2e       	mov	r14, r21
    9c3c:	27 e2       	ldi	r18, 0x27	; 39
    9c3e:	30 e0       	ldi	r19, 0x00	; 0
    9c40:	cf cf       	rjmp	.-98     	; 0x9be0 <irCommTasks+0x7f6>
					//updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START2_DURATION;					
					irCommTxSwitchCount = IRCOMM_BIT_START2_SWITCH_COUNT;
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 2) {
					//updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START1_DURATION;					
    9c42:	88 e7       	ldi	r24, 0x78	; 120
    9c44:	90 e0       	ldi	r25, 0x00	; 0
    9c46:	90 93 43 05 	sts	0x0543, r25
    9c4a:	80 93 42 05 	sts	0x0542, r24
					irCommTxSwitchCount = IRCOMM_BIT_START1_SWITCH_COUNT;
    9c4e:	20 93 44 05 	sts	0x0544, r18
    9c52:	db ce       	rjmp	.-586    	; 0x9a0a <irCommTasks+0x620>
					irCommMaxSensorSignalTemp[irCommMaxSensorSignalIndexTemp] = irCommMaxSensorSignal[i];
					irCommMaxSensorSignalIndexTemp++;					

					irCommProxSum += irCommMaxSensorSignal[i];
					if(irCommComputeShift == 1) {	// compute the shift between the rx sampling and tx signal
						irCommShiftCount++;								
    9c54:	f3 94       	inc	r15
    9c56:	f0 92 20 05 	sts	0x0520, r15
						if(irCommTempMin > irCommMaxSensorSignal[i]) {
    9c5a:	a0 90 1e 05 	lds	r10, 0x051E
    9c5e:	b0 90 1f 05 	lds	r11, 0x051F
    9c62:	ea 15       	cp	r30, r10
    9c64:	fb 05       	cpc	r31, r11
    9c66:	2c f4       	brge	.+10     	; 0x9c72 <irCommTasks+0x888>
							irCommTempMin = irCommMaxSensorSignal[i];
    9c68:	f0 93 1f 05 	sts	0x051F, r31
    9c6c:	e0 93 1e 05 	sts	0x051E, r30
    9c70:	5f 01       	movw	r10, r30
						}
						if(irCommTempMax < irCommMaxSensorSignal[i]) {
    9c72:	40 91 1c 05 	lds	r20, 0x051C
    9c76:	50 91 1d 05 	lds	r21, 0x051D
    9c7a:	4e 17       	cp	r20, r30
    9c7c:	5f 07       	cpc	r21, r31
    9c7e:	2c f4       	brge	.+10     	; 0x9c8a <irCommTasks+0x8a0>
							irCommTempMax = irCommMaxSensorSignal[i];
    9c80:	f0 93 1d 05 	sts	0x051D, r31
    9c84:	e0 93 1c 05 	sts	0x051C, r30
    9c88:	af 01       	movw	r20, r30
						}
						irCommTempValue = (irCommTempMax - irCommTempMin);						
    9c8a:	9a 01       	movw	r18, r20
    9c8c:	2a 19       	sub	r18, r10
    9c8e:	3b 09       	sbc	r19, r11
    9c90:	72 2e       	mov	r7, r18
    9c92:	d3 2e       	mov	r13, r19
    9c94:	20 93 ea 04 	sts	0x04EA, r18
    9c98:	30 93 eb 04 	sts	0x04EB, r19
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    9c9c:	20 35       	cpi	r18, 0x50	; 80
    9c9e:	31 05       	cpc	r19, r1
    9ca0:	0c f4       	brge	.+2      	; 0x9ca4 <irCommTasks+0x8ba>
    9ca2:	b7 cf       	rjmp	.-146    	; 0x9c12 <irCommTasks+0x828>

							if(irCommStartDiffIndexTemp>1) {
    9ca4:	c0 90 0b 05 	lds	r12, 0x050B
    9ca8:	2c 2d       	mov	r18, r12
    9caa:	22 30       	cpi	r18, 0x02	; 2
    9cac:	08 f4       	brcc	.+2      	; 0x9cb0 <irCommTasks+0x8c6>
    9cae:	a1 c3       	rjmp	.+1858   	; 0xa3f2 <irCommTasks+0x1008>
    9cb0:	22 e0       	ldi	r18, 0x02	; 2
    9cb2:	c2 2e       	mov	r12, r18
    9cb4:	21 e0       	ldi	r18, 0x01	; 1
    9cb6:	30 e0       	ldi	r19, 0x00	; 0
								irCommStartDiffIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommStartDiffTemp[irCommStartDiffIndexTemp] = irCommTempValue;
    9cb8:	22 0f       	add	r18, r18
    9cba:	33 1f       	adc	r19, r19
    9cbc:	20 53       	subi	r18, 0x30	; 48
    9cbe:	37 4f       	sbci	r19, 0xF7	; 247
    9cc0:	e9 01       	movw	r28, r18
    9cc2:	78 82       	st	Y, r7
    9cc4:	d9 82       	std	Y+1, r13	; 0x01
							irCommStartDiffIndexTemp++;
    9cc6:	c0 92 0b 05 	sts	0x050B, r12
							

							if(irCommMaxSensorSignal[i] == irCommTempMax) {
    9cca:	e4 17       	cp	r30, r20
    9ccc:	f5 07       	cpc	r31, r21
    9cce:	09 f4       	brne	.+2      	; 0x9cd2 <irCommTasks+0x8e8>
    9cd0:	8d c3       	rjmp	.+1818   	; 0xa3ec <irCommTasks+0x1002>
								irCommRxPeakHighToLow = 0;
							} else if(irCommMaxSensorSignal[i] == irCommTempMin) {
    9cd2:	ea 15       	cp	r30, r10
    9cd4:	fb 05       	cpc	r31, r11
    9cd6:	09 f4       	brne	.+2      	; 0x9cda <irCommTasks+0x8f0>
    9cd8:	ab c3       	rjmp	.+1878   	; 0xa430 <irCommTasks+0x1046>
								irCommRxPeakHighToLow = 1;
							} else {
								//updateGreenLed(0);
							}
							irCommTempMin = irCommMaxSensorSignal[i];	// otherwise I cannot detect spike of one sample (peakDuration=1), related to sensors sampling
    9cda:	f0 93 1f 05 	sts	0x051F, r31
    9cde:	e0 93 1e 05 	sts	0x051E, r30
							irCommTempMax = irCommMaxSensorSignal[i];
    9ce2:	f0 93 1d 05 	sts	0x051D, r31
    9ce6:	e0 93 1c 05 	sts	0x051C, r30
							irCommComputeShift = 2;
    9cea:	60 92 21 05 	sts	0x0521, r6
							irCommShiftCount--;	// the current sample is already part of the signal start thus do not skip it
    9cee:	fa 94       	dec	r15
    9cf0:	f0 92 20 05 	sts	0x0520, r15
							irCommRxStartPeakDuration = 0;
    9cf4:	10 92 32 05 	sts	0x0532, r1
    9cf8:	e2 e0       	ldi	r30, 0x02	; 2
    9cfa:	ce 2e       	mov	r12, r30
    9cfc:	8a cf       	rjmp	.-236    	; 0x9c12 <irCommTasks+0x828>
						}
					 } else if(irCommComputeShift == 2) {		
					 	irCommRxStartPeakDuration++;					
    9cfe:	20 91 32 05 	lds	r18, 0x0532
    9d02:	2f 5f       	subi	r18, 0xFF	; 255
    9d04:	20 93 32 05 	sts	0x0532, r18
						if(irCommTempMin > irCommMaxSensorSignal[i]) {
    9d08:	a0 90 1e 05 	lds	r10, 0x051E
    9d0c:	b0 90 1f 05 	lds	r11, 0x051F
    9d10:	ea 15       	cp	r30, r10
    9d12:	fb 05       	cpc	r31, r11
    9d14:	2c f4       	brge	.+10     	; 0x9d20 <irCommTasks+0x936>
							irCommTempMin = irCommMaxSensorSignal[i];
    9d16:	f0 93 1f 05 	sts	0x051F, r31
    9d1a:	e0 93 1e 05 	sts	0x051E, r30
    9d1e:	5f 01       	movw	r10, r30
						}
						if(irCommTempMax < irCommMaxSensorSignal[i]) {
    9d20:	40 91 1c 05 	lds	r20, 0x051C
    9d24:	50 91 1d 05 	lds	r21, 0x051D
    9d28:	4e 17       	cp	r20, r30
    9d2a:	5f 07       	cpc	r21, r31
    9d2c:	2c f4       	brge	.+10     	; 0x9d38 <irCommTasks+0x94e>
							irCommTempMax = irCommMaxSensorSignal[i];
    9d2e:	f0 93 1d 05 	sts	0x051D, r31
    9d32:	e0 93 1c 05 	sts	0x051C, r30
    9d36:	af 01       	movw	r20, r30
						}	
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    9d38:	9a 01       	movw	r18, r20
    9d3a:	2a 19       	sub	r18, r10
    9d3c:	3b 09       	sbc	r19, r11
    9d3e:	20 35       	cpi	r18, 0x50	; 80
    9d40:	31 05       	cpc	r19, r1
    9d42:	0c f4       	brge	.+2      	; 0x9d46 <irCommTasks+0x95c>
    9d44:	66 cf       	rjmp	.-308    	; 0x9c12 <irCommTasks+0x828>
							if((irCommMaxSensorSignal[i]==irCommTempMax) && (irCommRxPeakHighToLow==1)) {
    9d46:	e4 17       	cp	r30, r20
    9d48:	f5 07       	cpc	r31, r21
    9d4a:	09 f4       	brne	.+2      	; 0x9d4e <irCommTasks+0x964>
    9d4c:	74 c3       	rjmp	.+1768   	; 0xa436 <irCommTasks+0x104c>
								irCommComputeShift = 0;
							} else if((irCommMaxSensorSignal[i]==irCommTempMin) && (irCommRxPeakHighToLow==0)) {
    9d4e:	ea 15       	cp	r30, r10
    9d50:	fb 05       	cpc	r31, r11
    9d52:	09 f0       	breq	.+2      	; 0x9d56 <irCommTasks+0x96c>
    9d54:	5e cf       	rjmp	.-324    	; 0x9c12 <irCommTasks+0x828>
    9d56:	20 91 31 05 	lds	r18, 0x0531
    9d5a:	22 23       	and	r18, r18
    9d5c:	09 f0       	breq	.+2      	; 0x9d60 <irCommTasks+0x976>
    9d5e:	59 cf       	rjmp	.-334    	; 0x9c12 <irCommTasks+0x828>
								irCommComputeShift = 0;
    9d60:	10 92 21 05 	sts	0x0521, r1
    9d64:	cc 24       	eor	r12, r12
    9d66:	55 cf       	rjmp	.-342    	; 0x9c12 <irCommTasks+0x828>
				irCommState = IRCOMM_RX_IDLE_STATE;

				break;

			case IRCOMM_RX_DEBUG:								
				irCommSendValues = 0;						
    9d68:	10 92 ec 04 	sts	0x04EC, r1
				while(irCommSendValues==0);	// wait for the start from the uart (computer)
    9d6c:	80 91 ec 04 	lds	r24, 0x04EC
    9d70:	88 23       	and	r24, r24
    9d72:	e1 f3       	breq	.-8      	; 0x9d6c <irCommTasks+0x982>
				usart0Transmit(0xFF, 1);
    9d74:	8f ef       	ldi	r24, 0xFF	; 255
    9d76:	61 e0       	ldi	r22, 0x01	; 1
    9d78:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
				usart0Transmit(irCommRxMaxSensorTemp[0],1);
    9d7c:	80 91 3d 0b 	lds	r24, 0x0B3D
    9d80:	61 e0       	ldi	r22, 0x01	; 1
    9d82:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
				usart0Transmit(irCommRxMaxSensorTemp[1],1);
    9d86:	80 91 3f 0b 	lds	r24, 0x0B3F
    9d8a:	61 e0       	ldi	r22, 0x01	; 1
    9d8c:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
				usart0Transmit(irCommRxMaxDiffTemp[0]&0xFF,1);
    9d90:	80 91 76 0b 	lds	r24, 0x0B76
    9d94:	61 e0       	ldi	r22, 0x01	; 1
    9d96:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
				usart0Transmit(irCommRxMaxDiffTemp[0]>>8,1);
    9d9a:	80 91 77 0b 	lds	r24, 0x0B77
    9d9e:	61 e0       	ldi	r22, 0x01	; 1
    9da0:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
				usart0Transmit(irCommRxMaxDiffTemp[1]&0xFF,1);
    9da4:	80 91 78 0b 	lds	r24, 0x0B78
    9da8:	61 e0       	ldi	r22, 0x01	; 1
    9daa:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
				usart0Transmit(irCommRxMaxDiffTemp[1]>>8,1);
    9dae:	80 91 79 0b 	lds	r24, 0x0B79
    9db2:	61 e0       	ldi	r22, 0x01	; 1
    9db4:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
				usart0Transmit(irCommProxMeanTemp[0]&0xFF,1);
    9db8:	80 91 83 05 	lds	r24, 0x0583
    9dbc:	61 e0       	ldi	r22, 0x01	; 1
    9dbe:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
				usart0Transmit(irCommProxMeanTemp[0]>>8,1);
    9dc2:	80 91 84 05 	lds	r24, 0x0584
    9dc6:	61 e0       	ldi	r22, 0x01	; 1
    9dc8:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
				usart0Transmit(irCommProxMeanTemp[1]&0xFF,1);
    9dcc:	80 91 85 05 	lds	r24, 0x0585
    9dd0:	61 e0       	ldi	r22, 0x01	; 1
    9dd2:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
				usart0Transmit(irCommProxMeanTemp[1]>>8,1);
    9dd6:	80 91 86 05 	lds	r24, 0x0586
    9dda:	61 e0       	ldi	r22, 0x01	; 1
    9ddc:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
				usart0Transmit(irCommSwitchCountTemp[0],1);
    9de0:	80 91 65 05 	lds	r24, 0x0565
    9de4:	61 e0       	ldi	r22, 0x01	; 1
    9de6:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
				usart0Transmit(irCommSwitchCountTemp[1],1);
    9dea:	80 91 66 05 	lds	r24, 0x0566
    9dee:	61 e0       	ldi	r22, 0x01	; 1
    9df0:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
    9df4:	cf e7       	ldi	r28, 0x7F	; 127
    9df6:	d8 e0       	ldi	r29, 0x08	; 8
    9df8:	0b e8       	ldi	r16, 0x8B	; 139
    9dfa:	15 e0       	ldi	r17, 0x05	; 5
				for(i=0; i<IRCOMM_SAMPLING_WINDOW*2; i++) {
					irCommTempValue = irCommMaxSensorSignalTemp[i];
    9dfc:	88 81       	ld	r24, Y
    9dfe:	99 81       	ldd	r25, Y+1	; 0x01
    9e00:	22 96       	adiw	r28, 0x02	; 2
    9e02:	80 93 ea 04 	sts	0x04EA, r24
    9e06:	90 93 eb 04 	sts	0x04EB, r25
					usart0Transmit(irCommTempValue&0xFF,1);
    9e0a:	61 e0       	ldi	r22, 0x01	; 1
    9e0c:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
					usart0Transmit(irCommTempValue>>8,1);
    9e10:	80 91 eb 04 	lds	r24, 0x04EB
    9e14:	61 e0       	ldi	r22, 0x01	; 1
    9e16:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
					irCommTempValue = irCommMaxSensorSignalFiltTemp[i];
    9e1a:	d8 01       	movw	r26, r16
    9e1c:	8c 91       	ld	r24, X
    9e1e:	11 96       	adiw	r26, 0x01	; 1
    9e20:	9c 91       	ld	r25, X
    9e22:	0e 5f       	subi	r16, 0xFE	; 254
    9e24:	1f 4f       	sbci	r17, 0xFF	; 255
    9e26:	80 93 ea 04 	sts	0x04EA, r24
    9e2a:	90 93 eb 04 	sts	0x04EB, r25
					usart0Transmit(irCommTempValue&0xFF,1);
    9e2e:	61 e0       	ldi	r22, 0x01	; 1
    9e30:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
					usart0Transmit(irCommTempValue>>8,1);
    9e34:	80 91 eb 04 	lds	r24, 0x04EB
    9e38:	61 e0       	ldi	r22, 0x01	; 1
    9e3a:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
				usart0Transmit(irCommProxMeanTemp[0]>>8,1);
				usart0Transmit(irCommProxMeanTemp[1]&0xFF,1);
				usart0Transmit(irCommProxMeanTemp[1]>>8,1);
				usart0Transmit(irCommSwitchCountTemp[0],1);
				usart0Transmit(irCommSwitchCountTemp[1],1);
				for(i=0; i<IRCOMM_SAMPLING_WINDOW*2; i++) {
    9e3e:	b8 e0       	ldi	r27, 0x08	; 8
    9e40:	cf 3c       	cpi	r28, 0xCF	; 207
    9e42:	db 07       	cpc	r29, r27
    9e44:	d9 f6       	brne	.-74     	; 0x9dfc <irCommTasks+0xa12>
					usart0Transmit(irCommTempValue>>8,1);
					irCommTempValue = irCommMaxSensorSignalFiltTemp[i];
					usart0Transmit(irCommTempValue&0xFF,1);
					usart0Transmit(irCommTempValue>>8,1);
				}
				usart0Transmit(irCommMaxSensorValueCurrTemp[0]&0xFF,1);
    9e46:	80 91 4c 05 	lds	r24, 0x054C
    9e4a:	61 e0       	ldi	r22, 0x01	; 1
    9e4c:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
				usart0Transmit(irCommMaxSensorValueCurrTemp[0]>>8,1);
    9e50:	80 91 4d 05 	lds	r24, 0x054D
    9e54:	61 e0       	ldi	r22, 0x01	; 1
    9e56:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
				usart0Transmit(irCommMaxSensorValueCurrTemp[1]&0xFF,1);
    9e5a:	80 91 4e 05 	lds	r24, 0x054E
    9e5e:	61 e0       	ldi	r22, 0x01	; 1
    9e60:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
				usart0Transmit(irCommMaxSensorValueCurrTemp[1]>>8,1);
    9e64:	80 91 4f 05 	lds	r24, 0x054F
    9e68:	61 e0       	ldi	r22, 0x01	; 1
    9e6a:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
				usart0Transmit(irCommMinSensorValueCurrTemp[0]&0xFF,1);
    9e6e:	80 91 41 0b 	lds	r24, 0x0B41
    9e72:	61 e0       	ldi	r22, 0x01	; 1
    9e74:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
				usart0Transmit(irCommMinSensorValueCurrTemp[0]>>8,1);
    9e78:	80 91 42 0b 	lds	r24, 0x0B42
    9e7c:	61 e0       	ldi	r22, 0x01	; 1
    9e7e:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
				usart0Transmit(irCommMinSensorValueCurrTemp[1]&0xFF,1);
    9e82:	80 91 43 0b 	lds	r24, 0x0B43
    9e86:	61 e0       	ldi	r22, 0x01	; 1
    9e88:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
				usart0Transmit(irCommMinSensorValueCurrTemp[1]>>8,1);
    9e8c:	80 91 44 0b 	lds	r24, 0x0B44
    9e90:	61 e0       	ldi	r22, 0x01	; 1
    9e92:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
				usart0Transmit(irCommShiftCountTemp[0],1);
    9e96:	80 91 8f 0b 	lds	r24, 0x0B8F
    9e9a:	61 e0       	ldi	r22, 0x01	; 1
    9e9c:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
				usart0Transmit(irCommShiftCountTemp[1],1);
    9ea0:	80 91 90 0b 	lds	r24, 0x0B90
    9ea4:	61 e0       	ldi	r22, 0x01	; 1
    9ea6:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
				usart0Transmit(irCommShiftCountFinalTemp[0],1);
    9eaa:	80 91 49 0b 	lds	r24, 0x0B49
    9eae:	61 e0       	ldi	r22, 0x01	; 1
    9eb0:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
				usart0Transmit(irCommShiftCountFinalTemp[1],1);
    9eb4:	80 91 4a 0b 	lds	r24, 0x0B4A
    9eb8:	61 e0       	ldi	r22, 0x01	; 1
    9eba:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
				usart0Transmit(irCommStartDiffTemp[0]&0xFF,1);
    9ebe:	80 91 d0 08 	lds	r24, 0x08D0
    9ec2:	61 e0       	ldi	r22, 0x01	; 1
    9ec4:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
				usart0Transmit(irCommStartDiffTemp[0]>>8,1);
    9ec8:	80 91 d1 08 	lds	r24, 0x08D1
    9ecc:	61 e0       	ldi	r22, 0x01	; 1
    9ece:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
				usart0Transmit(irCommStartDiffTemp[1]&0xFF,1);
    9ed2:	80 91 d2 08 	lds	r24, 0x08D2
    9ed6:	61 e0       	ldi	r22, 0x01	; 1
    9ed8:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
				usart0Transmit(irCommStartDiffTemp[1]>>8,1);
    9edc:	80 91 d3 08 	lds	r24, 0x08D3
    9ee0:	61 e0       	ldi	r22, 0x01	; 1
    9ee2:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
				usart0Transmit(irCommComputeShiftTemp[0],1);
    9ee6:	80 91 80 05 	lds	r24, 0x0580
    9eea:	61 e0       	ldi	r22, 0x01	; 1
    9eec:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
				usart0Transmit(irCommComputeShiftTemp[1],1);
    9ef0:	80 91 81 05 	lds	r24, 0x0581
    9ef4:	61 e0       	ldi	r22, 0x01	; 1
    9ef6:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
				usart0Transmit(irCommRxPeakHighToLowTemp[0],1);
    9efa:	80 91 dd 05 	lds	r24, 0x05DD
    9efe:	61 e0       	ldi	r22, 0x01	; 1
    9f00:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
				usart0Transmit(irCommRxPeakHighToLowTemp[1],1);
    9f04:	80 91 de 05 	lds	r24, 0x05DE
    9f08:	61 e0       	ldi	r22, 0x01	; 1
    9f0a:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
				usart0Transmit(irCommRxStartPeakDurationTemp[0],1);
    9f0e:	80 91 1f 07 	lds	r24, 0x071F
    9f12:	61 e0       	ldi	r22, 0x01	; 1
    9f14:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
				usart0Transmit(irCommRxStartPeakDurationTemp[1],1);
    9f18:	80 91 20 07 	lds	r24, 0x0720
    9f1c:	61 e0       	ldi	r22, 0x01	; 1
    9f1e:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
				usart0Transmit(irCommRxStartBitDetectedTemp[0],1);
    9f22:	80 91 89 05 	lds	r24, 0x0589
    9f26:	61 e0       	ldi	r22, 0x01	; 1
    9f28:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
				usart0Transmit(irCommRxStartBitDetectedTemp[1],1);
    9f2c:	80 91 8a 05 	lds	r24, 0x058A
    9f30:	61 e0       	ldi	r22, 0x01	; 1
    9f32:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
				usart0Transmit(irCommSyncStateTemp[0],1);
    9f36:	80 91 7e 05 	lds	r24, 0x057E
    9f3a:	61 e0       	ldi	r22, 0x01	; 1
    9f3c:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
				usart0Transmit(irCommSyncStateTemp[1],1);
    9f40:	80 91 7f 05 	lds	r24, 0x057F
    9f44:	61 e0       	ldi	r22, 0x01	; 1
    9f46:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
				for(i=0; i<14; i++) {
					usart0Transmit(irCommStateTemp[i],1);
    9f4a:	80 91 50 05 	lds	r24, 0x0550
    9f4e:	61 e0       	ldi	r22, 0x01	; 1
    9f50:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
    9f54:	80 91 51 05 	lds	r24, 0x0551
    9f58:	61 e0       	ldi	r22, 0x01	; 1
    9f5a:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
    9f5e:	80 91 52 05 	lds	r24, 0x0552
    9f62:	61 e0       	ldi	r22, 0x01	; 1
    9f64:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
    9f68:	80 91 53 05 	lds	r24, 0x0553
    9f6c:	61 e0       	ldi	r22, 0x01	; 1
    9f6e:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
    9f72:	80 91 54 05 	lds	r24, 0x0554
    9f76:	61 e0       	ldi	r22, 0x01	; 1
    9f78:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
    9f7c:	80 91 55 05 	lds	r24, 0x0555
    9f80:	61 e0       	ldi	r22, 0x01	; 1
    9f82:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
    9f86:	80 91 56 05 	lds	r24, 0x0556
    9f8a:	61 e0       	ldi	r22, 0x01	; 1
    9f8c:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
    9f90:	80 91 57 05 	lds	r24, 0x0557
    9f94:	61 e0       	ldi	r22, 0x01	; 1
    9f96:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
    9f9a:	80 91 58 05 	lds	r24, 0x0558
    9f9e:	61 e0       	ldi	r22, 0x01	; 1
    9fa0:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
    9fa4:	80 91 59 05 	lds	r24, 0x0559
    9fa8:	61 e0       	ldi	r22, 0x01	; 1
    9faa:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
    9fae:	80 91 5a 05 	lds	r24, 0x055A
    9fb2:	61 e0       	ldi	r22, 0x01	; 1
    9fb4:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
    9fb8:	80 91 5b 05 	lds	r24, 0x055B
    9fbc:	61 e0       	ldi	r22, 0x01	; 1
    9fbe:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
    9fc2:	80 91 5c 05 	lds	r24, 0x055C
    9fc6:	61 e0       	ldi	r22, 0x01	; 1
    9fc8:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
    9fcc:	80 91 5d 05 	lds	r24, 0x055D
    9fd0:	61 e0       	ldi	r22, 0x01	; 1
    9fd2:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
    9fd6:	cb ea       	ldi	r28, 0xAB	; 171
    9fd8:	d9 e0       	ldi	r29, 0x09	; 9
				}
				for(i=0; i<200; i++) {
					irCommTempValue = irCommBitsSignalTemp[i];
    9fda:	88 81       	ld	r24, Y
    9fdc:	99 81       	ldd	r25, Y+1	; 0x01
    9fde:	22 96       	adiw	r28, 0x02	; 2
    9fe0:	80 93 ea 04 	sts	0x04EA, r24
    9fe4:	90 93 eb 04 	sts	0x04EB, r25
					usart0Transmit(irCommTempValue&0xFF,1);
    9fe8:	61 e0       	ldi	r22, 0x01	; 1
    9fea:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
					usart0Transmit(irCommTempValue>>8,1);
    9fee:	80 91 eb 04 	lds	r24, 0x04EB
    9ff2:	61 e0       	ldi	r22, 0x01	; 1
    9ff4:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
				usart0Transmit(irCommSyncStateTemp[0],1);
				usart0Transmit(irCommSyncStateTemp[1],1);
				for(i=0; i<14; i++) {
					usart0Transmit(irCommStateTemp[i],1);
				}
				for(i=0; i<200; i++) {
    9ff8:	eb e0       	ldi	r30, 0x0B	; 11
    9ffa:	cb 33       	cpi	r28, 0x3B	; 59
    9ffc:	de 07       	cpc	r29, r30
    9ffe:	69 f7       	brne	.-38     	; 0x9fda <irCommTasks+0xbf0>
					irCommTempValue = irCommBitsSignalTemp[i];
					usart0Transmit(irCommTempValue&0xFF,1);
					usart0Transmit(irCommTempValue>>8,1);
				}
				for(i=0; i<10; i++) {
					usart0Transmit(irCommRxBitReceivedTemp[i],1);
    a000:	80 91 73 08 	lds	r24, 0x0873
    a004:	61 e0       	ldi	r22, 0x01	; 1
    a006:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
    a00a:	80 91 74 08 	lds	r24, 0x0874
    a00e:	61 e0       	ldi	r22, 0x01	; 1
    a010:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
    a014:	80 91 75 08 	lds	r24, 0x0875
    a018:	61 e0       	ldi	r22, 0x01	; 1
    a01a:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
    a01e:	80 91 76 08 	lds	r24, 0x0876
    a022:	61 e0       	ldi	r22, 0x01	; 1
    a024:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
    a028:	80 91 77 08 	lds	r24, 0x0877
    a02c:	61 e0       	ldi	r22, 0x01	; 1
    a02e:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
    a032:	80 91 78 08 	lds	r24, 0x0878
    a036:	61 e0       	ldi	r22, 0x01	; 1
    a038:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
    a03c:	80 91 79 08 	lds	r24, 0x0879
    a040:	61 e0       	ldi	r22, 0x01	; 1
    a042:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
    a046:	80 91 7a 08 	lds	r24, 0x087A
    a04a:	61 e0       	ldi	r22, 0x01	; 1
    a04c:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
    a050:	80 91 7b 08 	lds	r24, 0x087B
    a054:	61 e0       	ldi	r22, 0x01	; 1
    a056:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
    a05a:	80 91 7c 08 	lds	r24, 0x087C
    a05e:	61 e0       	ldi	r22, 0x01	; 1
    a060:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
				}
				usart0Transmit(irCommRxCrc,1);
    a064:	80 91 17 05 	lds	r24, 0x0517
    a068:	61 e0       	ldi	r22, 0x01	; 1
    a06a:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
				usart0Transmit(irCommRxCrcError,1);
    a06e:	80 91 27 05 	lds	r24, 0x0527
    a072:	61 e0       	ldi	r22, 0x01	; 1
    a074:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
				usart0Transmit(irCommRxByte,1);
    a078:	80 91 28 05 	lds	r24, 0x0528
    a07c:	61 e0       	ldi	r22, 0x01	; 1
    a07e:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
				usart0Transmit(irCommRxByteExpected,1);				
    a082:	80 91 2b 05 	lds	r24, 0x052B
    a086:	61 e0       	ldi	r22, 0x01	; 1
    a088:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>

				irCommState = IRCOMM_RX_STOP;
    a08c:	89 e0       	ldi	r24, 0x09	; 9
    a08e:	80 93 e9 04 	sts	0x04E9, r24
				break;
    a092:	c3 c9       	rjmp	.-3194   	; 0x941a <irCommTasks+0x30>
				irCommProxSum = 0;
				irCommTempMin = 1024;
				irCommTempMax = 0;
				irCommShiftCount = 0;
				irCommComputeShift = 1;												
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    a094:	60 93 18 05 	sts	0x0518, r22
    a098:	70 93 19 05 	sts	0x0519, r23
    a09c:	80 93 1a 05 	sts	0x051A, r24
    a0a0:	90 93 1b 05 	sts	0x051B, r25
						}											
					 }

				}

				if(irCommComputeShiftIndexTemp>1) {
    a0a4:	20 91 0c 05 	lds	r18, 0x050C
    a0a8:	22 30       	cpi	r18, 0x02	; 2
    a0aa:	08 f4       	brcc	.+2      	; 0xa0ae <irCommTasks+0xcc4>
    a0ac:	b0 c2       	rjmp	.+1376   	; 0xa60e <irCommTasks+0x1224>
    a0ae:	22 e0       	ldi	r18, 0x02	; 2
    a0b0:	e1 e0       	ldi	r30, 0x01	; 1
    a0b2:	f0 e0       	ldi	r31, 0x00	; 0
					irCommComputeShiftIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommComputeShiftTemp[irCommComputeShiftIndexTemp] = irCommComputeShift;
    a0b4:	e0 58       	subi	r30, 0x80	; 128
    a0b6:	fa 4f       	sbci	r31, 0xFA	; 250
    a0b8:	c0 82       	st	Z, r12
				irCommComputeShiftIndexTemp++;
    a0ba:	20 93 0c 05 	sts	0x050C, r18
				
				if(irCommShiftCountIndexTemp>1) {
    a0be:	20 91 09 05 	lds	r18, 0x0509
    a0c2:	22 30       	cpi	r18, 0x02	; 2
    a0c4:	08 f4       	brcc	.+2      	; 0xa0c8 <irCommTasks+0xcde>
    a0c6:	9f c2       	rjmp	.+1342   	; 0xa606 <irCommTasks+0x121c>
    a0c8:	22 e0       	ldi	r18, 0x02	; 2
    a0ca:	e1 e0       	ldi	r30, 0x01	; 1
    a0cc:	f0 e0       	ldi	r31, 0x00	; 0
					irCommShiftCountIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommShiftCountTemp[irCommShiftCountIndexTemp] = irCommShiftCount;
    a0ce:	e1 57       	subi	r30, 0x71	; 113
    a0d0:	f4 4f       	sbci	r31, 0xF4	; 244
    a0d2:	f0 82       	st	Z, r15
				irCommShiftCountIndexTemp++;
    a0d4:	20 93 09 05 	sts	0x0509, r18
				
				if(irCommRxPeakHighToLowIndexTemp>1) {
    a0d8:	20 91 0d 05 	lds	r18, 0x050D
    a0dc:	22 30       	cpi	r18, 0x02	; 2
    a0de:	08 f4       	brcc	.+2      	; 0xa0e2 <irCommTasks+0xcf8>
    a0e0:	8e c2       	rjmp	.+1308   	; 0xa5fe <irCommTasks+0x1214>
    a0e2:	22 e0       	ldi	r18, 0x02	; 2
    a0e4:	e1 e0       	ldi	r30, 0x01	; 1
    a0e6:	f0 e0       	ldi	r31, 0x00	; 0
					irCommRxPeakHighToLowIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommRxPeakHighToLowTemp[irCommRxPeakHighToLowIndexTemp] = irCommRxPeakHighToLow;
    a0e8:	e0 90 31 05 	lds	r14, 0x0531
    a0ec:	ce 2c       	mov	r12, r14
    a0ee:	e3 52       	subi	r30, 0x23	; 35
    a0f0:	fa 4f       	sbci	r31, 0xFA	; 250
    a0f2:	e0 82       	st	Z, r14
				irCommRxPeakHighToLowIndexTemp++;
    a0f4:	20 93 0d 05 	sts	0x050D, r18
				
				if(irCommRxStartPeakDurationIndexTemp>1) {
    a0f8:	20 91 0e 05 	lds	r18, 0x050E
    a0fc:	22 30       	cpi	r18, 0x02	; 2
    a0fe:	08 f4       	brcc	.+2      	; 0xa102 <irCommTasks+0xd18>
    a100:	7a c2       	rjmp	.+1268   	; 0xa5f6 <irCommTasks+0x120c>
    a102:	22 e0       	ldi	r18, 0x02	; 2
    a104:	e1 e0       	ldi	r30, 0x01	; 1
    a106:	f0 e0       	ldi	r31, 0x00	; 0
					irCommRxStartPeakDurationIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommRxStartPeakDurationTemp[irCommRxStartPeakDurationIndexTemp] = irCommRxStartPeakDuration;
    a108:	e1 5e       	subi	r30, 0xE1	; 225
    a10a:	f8 4f       	sbci	r31, 0xF8	; 248
    a10c:	d0 90 32 05 	lds	r13, 0x0532
    a110:	d0 82       	st	Z, r13
				irCommRxStartPeakDurationIndexTemp++;
    a112:	20 93 0e 05 	sts	0x050E, r18
					
				
				//if(irCommComputeShift != 0) {	// it should not be never 1 because the difference between min and max in the current signal
					//updateRedLed(0);			// is at least IRCOMM_DETECTION_AMPLITUDE_THR (checked in the previous state)
				//}
				irCommProxMean = (int)(irCommProxSum / IRCOMM_SAMPLING_WINDOW);
    a116:	24 e1       	ldi	r18, 0x14	; 20
    a118:	30 e0       	ldi	r19, 0x00	; 0
    a11a:	40 e0       	ldi	r20, 0x00	; 0
    a11c:	50 e0       	ldi	r21, 0x00	; 0
    a11e:	0e 94 bc 58 	call	0xb178	; 0xb178 <__divmodsi4>
    a122:	c9 01       	movw	r24, r18
    a124:	30 93 23 05 	sts	0x0523, r19
    a128:	20 93 22 05 	sts	0x0522, r18

				if(irCommProxMeanIndexTemp>1) {
    a12c:	20 91 05 05 	lds	r18, 0x0505
    a130:	22 30       	cpi	r18, 0x02	; 2
    a132:	08 f4       	brcc	.+2      	; 0xa136 <irCommTasks+0xd4c>
    a134:	5c c2       	rjmp	.+1208   	; 0xa5ee <irCommTasks+0x1204>
    a136:	22 e0       	ldi	r18, 0x02	; 2
    a138:	e1 e0       	ldi	r30, 0x01	; 1
    a13a:	f0 e0       	ldi	r31, 0x00	; 0
					irCommProxMeanIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommProxMeanTemp[irCommProxMeanIndexTemp] = irCommProxMean;
    a13c:	ee 0f       	add	r30, r30
    a13e:	ff 1f       	adc	r31, r31
    a140:	ed 57       	subi	r30, 0x7D	; 125
    a142:	fa 4f       	sbci	r31, 0xFA	; 250
    a144:	91 83       	std	Z+1, r25	; 0x01
    a146:	80 83       	st	Z, r24
				irCommProxMeanIndexTemp++;
    a148:	20 93 05 05 	sts	0x0505, r18
    a14c:	40 91 02 05 	lds	r20, 0x0502
    a150:	0d c0       	rjmp	.+26     	; 0xa16c <irCommTasks+0xd82>

				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
					irCommMaxSensorSignal[i] -= irCommProxMean;

					if(irCommMaxSensorSignalFiltIndexTemp>39) {
    a152:	e4 2f       	mov	r30, r20
    a154:	f0 e0       	ldi	r31, 0x00	; 0
    a156:	4f 5f       	subi	r20, 0xFF	; 255
						irCommMaxSensorSignalFiltIndexTemp = 39;
						//updateRedLed(0);
					}
					irCommMaxSensorSignalFiltTemp[irCommMaxSensorSignalFiltIndexTemp] = irCommMaxSensorSignal[i];
    a158:	ee 0f       	add	r30, r30
    a15a:	ff 1f       	adc	r31, r31
    a15c:	e5 57       	subi	r30, 0x75	; 117
    a15e:	fa 4f       	sbci	r31, 0xFA	; 250
    a160:	31 83       	std	Z+1, r19	; 0x01
    a162:	20 83       	st	Z, r18
				irCommProxMeanTemp[irCommProxMeanIndexTemp] = irCommProxMean;
				irCommProxMeanIndexTemp++;
				

				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    a164:	eb e0       	ldi	r30, 0x0B	; 11
    a166:	05 37       	cpi	r16, 0x75	; 117
    a168:	1e 07       	cpc	r17, r30
    a16a:	81 f0       	breq	.+32     	; 0xa18c <irCommTasks+0xda2>
					irCommMaxSensorSignal[i] -= irCommProxMean;
    a16c:	d8 01       	movw	r26, r16
    a16e:	2d 91       	ld	r18, X+
    a170:	3c 91       	ld	r19, X
    a172:	11 97       	sbiw	r26, 0x01	; 1
    a174:	28 1b       	sub	r18, r24
    a176:	39 0b       	sbc	r19, r25
    a178:	e8 01       	movw	r28, r16
    a17a:	29 93       	st	Y+, r18
    a17c:	39 93       	st	Y+, r19
    a17e:	8e 01       	movw	r16, r28

					if(irCommMaxSensorSignalFiltIndexTemp>39) {
    a180:	48 32       	cpi	r20, 0x28	; 40
    a182:	38 f3       	brcs	.-50     	; 0xa152 <irCommTasks+0xd68>
    a184:	48 e2       	ldi	r20, 0x28	; 40
    a186:	e7 e2       	ldi	r30, 0x27	; 39
    a188:	f0 e0       	ldi	r31, 0x00	; 0
    a18a:	e6 cf       	rjmp	.-52     	; 0xa158 <irCommTasks+0xd6e>
				irCommProxMeanTemp[irCommProxMeanIndexTemp] = irCommProxMean;
				irCommProxMeanIndexTemp++;
				

				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    a18c:	40 93 02 05 	sts	0x0502, r20
					irCommMaxSensorSignalFiltIndexTemp++;
					
				}
						
				// start counting number of switch around mean signal
				if(irCommMaxSensorSignal[0] > 0) {
    a190:	80 91 4d 0b 	lds	r24, 0x0B4D
    a194:	90 91 4e 0b 	lds	r25, 0x0B4E
    a198:	18 16       	cp	r1, r24
    a19a:	19 06       	cpc	r1, r25
    a19c:	0c f0       	brlt	.+2      	; 0xa1a0 <irCommTasks+0xdb6>
    a19e:	21 c2       	rjmp	.+1090   	; 0xa5e2 <irCommTasks+0x11f8>
					irCommSignalState = 1;
    a1a0:	81 e0       	ldi	r24, 0x01	; 1
    a1a2:	80 93 24 05 	sts	0x0524, r24
    a1a6:	21 e0       	ldi	r18, 0x01	; 1
    a1a8:	38 2f       	mov	r19, r24
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
    a1aa:	ef e4       	ldi	r30, 0x4F	; 79
    a1ac:	fb e0       	ldi	r31, 0x0B	; 11
    a1ae:	40 e0       	ldi	r20, 0x00	; 0
    a1b0:	07 c0       	rjmp	.+14     	; 0xa1c0 <irCommTasks+0xdd6>
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
    a1b2:	27 fd       	sbrc	r18, 7
    a1b4:	0f c0       	rjmp	.+30     	; 0xa1d4 <irCommTasks+0xdea>
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
    a1b6:	8e 16       	cp	r8, r30
    a1b8:	9f 06       	cpc	r9, r31
    a1ba:	79 f0       	breq	.+30     	; 0xa1da <irCommTasks+0xdf0>
    a1bc:	ce 2c       	mov	r12, r14
    a1be:	23 2f       	mov	r18, r19
					if(irCommMaxSensorSignal[i] > 0) {
    a1c0:	81 91       	ld	r24, Z+
    a1c2:	91 91       	ld	r25, Z+
    a1c4:	18 16       	cp	r1, r24
    a1c6:	19 06       	cpc	r1, r25
    a1c8:	a4 f3       	brlt	.-24     	; 0xa1b2 <irCommTasks+0xdc8>
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
							irCommSwitchCount++;
						}
					} else {
						if(irCommSignalState > 0) {
    a1ca:	12 16       	cp	r1, r18
    a1cc:	a4 f7       	brge	.-24     	; 0xa1b6 <irCommTasks+0xdcc>
							irCommSignalState = -1;
							irCommSwitchCount++;
    a1ce:	4f 5f       	subi	r20, 0xFF	; 255
							irCommSignalState = 1;
							irCommSwitchCount++;
						}
					} else {
						if(irCommSignalState > 0) {
							irCommSignalState = -1;
    a1d0:	3f ef       	ldi	r19, 0xFF	; 255
    a1d2:	f1 cf       	rjmp	.-30     	; 0xa1b6 <irCommTasks+0xdcc>
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
							irCommSwitchCount++;
    a1d4:	4f 5f       	subi	r20, 0xFF	; 255
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
    a1d6:	31 e0       	ldi	r19, 0x01	; 1
    a1d8:	ee cf       	rjmp	.-36     	; 0xa1b6 <irCommTasks+0xdcc>
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
    a1da:	30 93 24 05 	sts	0x0524, r19
    a1de:	40 93 25 05 	sts	0x0525, r20
							irCommSwitchCount++;
						}
					}
				}

				if(irCommSwitchCountIndexTemp>1) {
    a1e2:	80 91 06 05 	lds	r24, 0x0506
    a1e6:	82 30       	cpi	r24, 0x02	; 2
    a1e8:	08 f4       	brcc	.+2      	; 0xa1ec <irCommTasks+0xe02>
    a1ea:	e5 c1       	rjmp	.+970    	; 0xa5b6 <irCommTasks+0x11cc>
    a1ec:	92 e0       	ldi	r25, 0x02	; 2
    a1ee:	e1 e0       	ldi	r30, 0x01	; 1
    a1f0:	f0 e0       	ldi	r31, 0x00	; 0
					irCommSwitchCountIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommSwitchCountTemp[irCommSwitchCountIndexTemp] = irCommSwitchCount;
    a1f2:	80 91 25 05 	lds	r24, 0x0525
    a1f6:	eb 59       	subi	r30, 0x9B	; 155
    a1f8:	fa 4f       	sbci	r31, 0xFA	; 250
    a1fa:	80 83       	st	Z, r24
				irCommSwitchCountIndexTemp++;
    a1fc:	90 93 06 05 	sts	0x0506, r25
				

				//turnOffGreenLeds();
				if(irCommRxPeakHighToLow==1) {
    a200:	fc 2d       	mov	r31, r12
    a202:	f1 30       	cpi	r31, 0x01	; 1
    a204:	09 f4       	brne	.+2      	; 0xa208 <irCommTasks+0xe1e>
    a206:	af c1       	rjmp	.+862    	; 0xa566 <irCommTasks+0x117c>
							resetDebugVariables();				
							break;
						}
					}
				} else {
					if(irCommRxStartBitDetected==1) {
    a208:	90 91 30 05 	lds	r25, 0x0530
    a20c:	91 30       	cpi	r25, 0x01	; 1
    a20e:	09 f4       	brne	.+2      	; 0xa212 <irCommTasks+0xe28>
    a210:	08 c2       	rjmp	.+1040   	; 0xa622 <irCommTasks+0x1238>

							resetDebugVariables();				
							break;
						}
					} else {
						if(irCommSwitchCount==2) {
    a212:	82 30       	cpi	r24, 0x02	; 2
    a214:	09 f4       	brne	.+2      	; 0xa218 <irCommTasks+0xe2e>
    a216:	5a c2       	rjmp	.+1204   	; 0xa6cc <irCommTasks+0x12e2>
							irCommShiftCounter = 0;
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else if(irCommSwitchCount==1) {
    a218:	81 30       	cpi	r24, 0x01	; 1
    a21a:	09 f4       	brne	.+2      	; 0xa21e <irCommTasks+0xe34>
    a21c:	e6 c2       	rjmp	.+1484   	; 0xa7ea <irCommTasks+0x1400>
								irCommRxCrc = 0;	
								irCommRxByte = 0;
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
							}
						} else {
							currentProx = 0;
    a21e:	10 92 34 02 	sts	0x0234, r1
							adcSaveDataTo = SKIP_SAMPLE;
    a222:	85 e0       	ldi	r24, 0x05	; 5
    a224:	80 93 c9 02 	sts	0x02C9, r24
							adcSamplingState = 0;
    a228:	10 92 ca 02 	sts	0x02CA, r1
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;							
    a22c:	10 92 e8 04 	sts	0x04E8, r1
							irCommState = IRCOMM_RX_IDLE_STATE;
    a230:	81 e0       	ldi	r24, 0x01	; 1
    a232:	80 93 e9 04 	sts	0x04E9, r24

							if(irCommSyncStateIndexTemp>1) {
    a236:	20 91 11 05 	lds	r18, 0x0511
    a23a:	22 30       	cpi	r18, 0x02	; 2
    a23c:	08 f4       	brcc	.+2      	; 0xa240 <irCommTasks+0xe56>
    a23e:	79 c3       	rjmp	.+1778   	; 0xa932 <irCommTasks+0x1548>
    a240:	22 e0       	ldi	r18, 0x02	; 2
    a242:	81 e0       	ldi	r24, 0x01	; 1
    a244:	90 e0       	ldi	r25, 0x00	; 0
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 15;
    a246:	82 58       	subi	r24, 0x82	; 130
    a248:	9a 4f       	sbci	r25, 0xFA	; 250
    a24a:	3f e0       	ldi	r19, 0x0F	; 15
    a24c:	ec 01       	movw	r28, r24
    a24e:	38 83       	st	Y, r19
							irCommSyncStateIndexTemp++;
    a250:	20 93 11 05 	sts	0x0511, r18
							//irCommState = IRCOMM_RX_DEBUG;
							//irCommAdcRxState = 12;
							//updateRedLed(0);
							//break;

							resetDebugVariables();				
    a254:	0e 94 4c 49 	call	0x9298	; 0x9298 <resetDebugVariables>
							break;				
    a258:	e0 c8       	rjmp	.-3648   	; 0x941a <irCommTasks+0x30>

				}							
				break;

			case IRCOMM_RX_CHECK_CRC:
				irCommRxCrcError = (irCommRxCrc + (irCommRxBitReceived[8]<<1) + irCommRxBitReceived[9])&0x03;
    a25a:	80 91 7d 05 	lds	r24, 0x057D
    a25e:	90 91 17 05 	lds	r25, 0x0517
    a262:	89 0f       	add	r24, r25
    a264:	90 91 7c 05 	lds	r25, 0x057C
    a268:	99 0f       	add	r25, r25
    a26a:	89 0f       	add	r24, r25
    a26c:	83 70       	andi	r24, 0x03	; 3
    a26e:	80 93 27 05 	sts	0x0527, r24
				if(irCommRxCrcError==0) {
    a272:	88 23       	and	r24, r24
    a274:	69 f4       	brne	.+26     	; 0xa290 <irCommTasks+0xea6>
					irCommRxLastDataReceived = irCommRxByte;
    a276:	80 91 28 05 	lds	r24, 0x0528
    a27a:	80 93 2d 05 	sts	0x052D, r24
					irCommRxReceivingSensor = irCommRxMaxSensor;
    a27e:	90 91 35 05 	lds	r25, 0x0535
    a282:	90 93 19 02 	sts	0x0219, r25
					irCommRxDataAvailable = 1;
    a286:	00 93 2e 05 	sts	0x052E, r16
					//updateBlueLed(0);
					usart0Transmit(irCommRxByte,1);		
    a28a:	61 e0       	ldi	r22, 0x01	; 1
    a28c:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <usart0Transmit>
					//updateBlueLed(255);			
				}
												
				currentProx = 0;
    a290:	10 92 34 02 	sts	0x0234, r1
				adcSaveDataTo = SKIP_SAMPLE;
    a294:	85 e0       	ldi	r24, 0x05	; 5
    a296:	80 93 c9 02 	sts	0x02C9, r24
				adcSamplingState = 0;
    a29a:	10 92 ca 02 	sts	0x02CA, r1
				irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;				
    a29e:	10 92 e8 04 	sts	0x04E8, r1
				} else {
					irCommRxPrevDataReceived = irCommRxLastDataReceived;
				}
				*/

				resetDebugVariables();
    a2a2:	0e 94 4c 49 	call	0x9298	; 0x9298 <resetDebugVariables>

				irCommState = IRCOMM_RX_IDLE_STATE;
    a2a6:	81 e0       	ldi	r24, 0x01	; 1
    a2a8:	80 93 e9 04 	sts	0x04E9, r24

				break;
    a2ac:	b6 c8       	rjmp	.-3732   	; 0x941a <irCommTasks+0x30>

	if(irCommMode==IRCOMM_MODE_RECEIVE) {

		switch(irCommState) {
			case IRCOMM_RX_IDLE_STATE:				
				if((irCommRxStartBitDetected==0) && (irCommEnabled!=irCommEnabledNext)) {
    a2ae:	80 91 30 05 	lds	r24, 0x0530
    a2b2:	88 23       	and	r24, r24
    a2b4:	09 f0       	breq	.+2      	; 0xa2b8 <irCommTasks+0xece>
    a2b6:	b1 c8       	rjmp	.-3742   	; 0x941a <irCommTasks+0x30>
    a2b8:	90 91 e6 04 	lds	r25, 0x04E6
    a2bc:	80 91 e7 04 	lds	r24, 0x04E7
    a2c0:	98 17       	cp	r25, r24
    a2c2:	09 f4       	brne	.+2      	; 0xa2c6 <irCommTasks+0xedc>
    a2c4:	aa c8       	rjmp	.-3756   	; 0x941a <irCommTasks+0x30>
					if((getTime100MicroSec() - irCommTxLastTransmissionTime) > PAUSE_200_MSEC) {
    a2c6:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <getTime100MicroSec>
    a2ca:	20 91 3b 05 	lds	r18, 0x053B
    a2ce:	30 91 3c 05 	lds	r19, 0x053C
    a2d2:	40 91 3d 05 	lds	r20, 0x053D
    a2d6:	50 91 3e 05 	lds	r21, 0x053E
    a2da:	62 1b       	sub	r22, r18
    a2dc:	73 0b       	sbc	r23, r19
    a2de:	84 0b       	sbc	r24, r20
    a2e0:	95 0b       	sbc	r25, r21
    a2e2:	64 38       	cpi	r22, 0x84	; 132
    a2e4:	27 e0       	ldi	r18, 0x07	; 7
    a2e6:	72 07       	cpc	r23, r18
    a2e8:	20 e0       	ldi	r18, 0x00	; 0
    a2ea:	82 07       	cpc	r24, r18
    a2ec:	20 e0       	ldi	r18, 0x00	; 0
    a2ee:	92 07       	cpc	r25, r18
    a2f0:	08 f4       	brcc	.+2      	; 0xa2f4 <irCommTasks+0xf0a>
    a2f2:	93 c8       	rjmp	.-3802   	; 0x941a <irCommTasks+0x30>
#include "irCommunication.h"


void irCommInitTransmitter() {
	irCommEnabled = IRCOMM_MODE_TRANSMIT;
    a2f4:	82 e0       	ldi	r24, 0x02	; 2
    a2f6:	80 93 e6 04 	sts	0x04E6, r24
	irCommState = IRCOMM_TX_IDLE_STATE;
    a2fa:	10 93 e9 04 	sts	0x04E9, r17
    a2fe:	8d c8       	rjmp	.-3814   	; 0x941a <irCommTasks+0x30>
				}

				irCommProxMean = (int)(irCommProxSum / IRCOMM_SAMPLING_WINDOW);

				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    a300:	20 93 12 05 	sts	0x0512, r18
					irCommBitsSignalTemp[irCommBitsSignalIndexTemp] = irCommMaxSensorSignal[i];
					irCommBitsSignalIndexTemp++;
				}
						
				// start counting number of switch around mean signal
				if(irCommMaxSensorSignal[0] > 0) {
    a304:	80 91 4d 0b 	lds	r24, 0x0B4D
    a308:	90 91 4e 0b 	lds	r25, 0x0B4E
    a30c:	18 16       	cp	r1, r24
    a30e:	19 06       	cpc	r1, r25
    a310:	0c f0       	brlt	.+2      	; 0xa314 <irCommTasks+0xf2a>
    a312:	81 c1       	rjmp	.+770    	; 0xa616 <irCommTasks+0x122c>
					irCommSignalState = 1;
    a314:	81 e0       	ldi	r24, 0x01	; 1
    a316:	80 93 24 05 	sts	0x0524, r24
    a31a:	21 e0       	ldi	r18, 0x01	; 1
    a31c:	38 2f       	mov	r19, r24
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
    a31e:	ef e4       	ldi	r30, 0x4F	; 79
    a320:	fb e0       	ldi	r31, 0x0B	; 11
    a322:	40 e0       	ldi	r20, 0x00	; 0
    a324:	07 c0       	rjmp	.+14     	; 0xa334 <irCommTasks+0xf4a>
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
    a326:	27 fd       	sbrc	r18, 7
    a328:	0f c0       	rjmp	.+30     	; 0xa348 <irCommTasks+0xf5e>
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
    a32a:	2b e0       	ldi	r18, 0x0B	; 11
    a32c:	e5 37       	cpi	r30, 0x75	; 117
    a32e:	f2 07       	cpc	r31, r18
    a330:	71 f0       	breq	.+28     	; 0xa34e <irCommTasks+0xf64>
    a332:	23 2f       	mov	r18, r19
					if(irCommMaxSensorSignal[i] > 0) {
    a334:	81 91       	ld	r24, Z+
    a336:	91 91       	ld	r25, Z+
    a338:	18 16       	cp	r1, r24
    a33a:	19 06       	cpc	r1, r25
    a33c:	a4 f3       	brlt	.-24     	; 0xa326 <irCommTasks+0xf3c>
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
							irCommSwitchCount++;
						}
					} else {
						if(irCommSignalState > 0) {
    a33e:	12 16       	cp	r1, r18
    a340:	a4 f7       	brge	.-24     	; 0xa32a <irCommTasks+0xf40>
							irCommSignalState = -1;
							irCommSwitchCount++;
    a342:	4f 5f       	subi	r20, 0xFF	; 255
							irCommSignalState = 1;
							irCommSwitchCount++;
						}
					} else {
						if(irCommSignalState > 0) {
							irCommSignalState = -1;
    a344:	3f ef       	ldi	r19, 0xFF	; 255
    a346:	f1 cf       	rjmp	.-30     	; 0xa32a <irCommTasks+0xf40>
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
							irCommSwitchCount++;
    a348:	4f 5f       	subi	r20, 0xFF	; 255
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
    a34a:	31 e0       	ldi	r19, 0x01	; 1
    a34c:	ee cf       	rjmp	.-36     	; 0xa32a <irCommTasks+0xf40>
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
    a34e:	30 93 24 05 	sts	0x0524, r19
    a352:	40 93 25 05 	sts	0x0525, r20
							irCommSwitchCount++;
						}
					}
				}
				// check whether we received either a "0" or a "1"
				if(irCommSwitchCount >= (IRCOMM_BIT0_SWITCH_COUNT-2)) {
    a356:	46 30       	cpi	r20, 0x06	; 6
    a358:	08 f4       	brcc	.+2      	; 0xa35c <irCommTasks+0xf72>
    a35a:	ab c0       	rjmp	.+342    	; 0xa4b2 <irCommTasks+0x10c8>
					irCommRxBitReceived[irCommRxBitCount] = 0;
    a35c:	80 91 26 05 	lds	r24, 0x0526
    a360:	e8 2f       	mov	r30, r24
    a362:	f0 e0       	ldi	r31, 0x00	; 0
    a364:	ec 58       	subi	r30, 0x8C	; 140
    a366:	fa 4f       	sbci	r31, 0xFA	; 250
    a368:	10 82       	st	Z, r1
					if(irCommRxBitCount<8) {	// do not consider the crc for byte interpretation
    a36a:	88 30       	cpi	r24, 0x08	; 8
    a36c:	28 f4       	brcc	.+10     	; 0xa378 <irCommTasks+0xf8e>
						irCommRxByte = irCommRxByte<<1;	// bit0, only shift
    a36e:	90 91 28 05 	lds	r25, 0x0528
    a372:	99 0f       	add	r25, r25
    a374:	90 93 28 05 	sts	0x0528, r25
					resetDebugVariables();
					break;

				}

				if(irCommRxBitReceivedIndexTemp>9) {
    a378:	90 91 13 05 	lds	r25, 0x0513
    a37c:	9a 30       	cpi	r25, 0x0A	; 10
    a37e:	08 f0       	brcs	.+2      	; 0xa382 <irCommTasks+0xf98>
    a380:	b2 c0       	rjmp	.+356    	; 0xa4e6 <irCommTasks+0x10fc>
    a382:	a9 2f       	mov	r26, r25
    a384:	b0 e0       	ldi	r27, 0x00	; 0
    a386:	9f 5f       	subi	r25, 0xFF	; 255
					irCommRxBitReceivedIndexTemp = 9;
					//updateRedLed(0);
				}
				irCommRxBitReceivedTemp[irCommRxBitReceivedIndexTemp] = irCommRxBitReceived[irCommRxBitCount];
    a388:	ad 58       	subi	r26, 0x8D	; 141
    a38a:	b7 4f       	sbci	r27, 0xF7	; 247
    a38c:	e8 2f       	mov	r30, r24
    a38e:	f0 e0       	ldi	r31, 0x00	; 0
    a390:	ec 58       	subi	r30, 0x8C	; 140
    a392:	fa 4f       	sbci	r31, 0xFA	; 250
    a394:	20 81       	ld	r18, Z
    a396:	2c 93       	st	X, r18
				irCommRxBitReceivedIndexTemp++;
    a398:	90 93 13 05 	sts	0x0513, r25

				//setGreenLed(irCommRxBitCount, 1);

				irCommRxBitCount++;
    a39c:	8f 5f       	subi	r24, 0xFF	; 255
    a39e:	80 93 26 05 	sts	0x0526, r24
				if(irCommRxBitCount == 10) {	// received 8 bit of data + 2 bit of crc
    a3a2:	8a 30       	cpi	r24, 0x0A	; 10
    a3a4:	09 f4       	brne	.+2      	; 0xa3a8 <irCommTasks+0xfbe>
    a3a6:	62 c1       	rjmp	.+708    	; 0xa66c <irCommTasks+0x1282>
					}
					irCommStateTemp[irCommStateIndexTemp] = irCommState;
					irCommStateIndexTemp++;

				} else {
					irCommState = IRCOMM_RX_WAITING_BIT;
    a3a8:	85 e0       	ldi	r24, 0x05	; 5
    a3aa:	80 93 e9 04 	sts	0x04E9, r24

					if(irCommStateIndexTemp>13) {
    a3ae:	80 91 10 05 	lds	r24, 0x0510
    a3b2:	8e 30       	cpi	r24, 0x0E	; 14
    a3b4:	08 f0       	brcs	.+2      	; 0xa3b8 <irCommTasks+0xfce>
    a3b6:	05 cb       	rjmp	.-2550   	; 0x99c2 <irCommTasks+0x5d8>
    a3b8:	e8 2f       	mov	r30, r24
    a3ba:	f0 e0       	ldi	r31, 0x00	; 0
    a3bc:	8f 5f       	subi	r24, 0xFF	; 255
    a3be:	04 cb       	rjmp	.-2552   	; 0x99c8 <irCommTasks+0x5de>
						}
					}
				} else {
					// cannot get a reliable signal from the sensor from which the start bit was detected the previous time,
					// thus restart listening from the next sensor
					if(irCommRxStartBitDetected == 1) {
    a3c0:	80 91 30 05 	lds	r24, 0x0530
    a3c4:	81 30       	cpi	r24, 0x01	; 1
    a3c6:	09 f4       	brne	.+2      	; 0xa3ca <irCommTasks+0xfe0>
    a3c8:	5a c1       	rjmp	.+692    	; 0xa67e <irCommTasks+0x1294>
					//if(irCommRxStartBitDetected == 1) {	// signal becomes too low to be reliable...or something else happened				
					//	irCommState = IRCOMM_RX_DEBUG;
					//	irCommAdcRxState = 12;
					//	updateGreenLed(0);
					//} else {
						irCommRxStartBitDetected = 0;
    a3ca:	10 92 30 05 	sts	0x0530, r1
						irCommRxByte += 1;
					}
				} else {	// error...no significant signal perceived
					//irCommRxBitReceived[irCommRxBitCount] = 0xFF;
					//updateRedLed(0);
					currentProx = 0;
    a3ce:	10 92 34 02 	sts	0x0234, r1
					adcSaveDataTo = SKIP_SAMPLE;
    a3d2:	85 e0       	ldi	r24, 0x05	; 5
    a3d4:	80 93 c9 02 	sts	0x02C9, r24
					adcSamplingState = 0;
    a3d8:	10 92 ca 02 	sts	0x02CA, r1
					irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;					
    a3dc:	10 92 e8 04 	sts	0x04E8, r1
					irCommState = IRCOMM_RX_IDLE_STATE;
    a3e0:	81 e0       	ldi	r24, 0x01	; 1
    a3e2:	80 93 e9 04 	sts	0x04E9, r24

					//irCommState = IRCOMM_RX_DEBUG;
					//irCommAdcRxState = 12;
					//break;

					resetDebugVariables();
    a3e6:	0e 94 4c 49 	call	0x9298	; 0x9298 <resetDebugVariables>
					break;
    a3ea:	17 c8       	rjmp	.-4050   	; 0x941a <irCommTasks+0x30>
							irCommStartDiffTemp[irCommStartDiffIndexTemp] = irCommTempValue;
							irCommStartDiffIndexTemp++;
							

							if(irCommMaxSensorSignal[i] == irCommTempMax) {
								irCommRxPeakHighToLow = 0;
    a3ec:	10 92 31 05 	sts	0x0531, r1
    a3f0:	74 cc       	rjmp	.-1816   	; 0x9cda <irCommTasks+0x8f0>
							irCommTempMax = irCommMaxSensorSignal[i];
						}
						irCommTempValue = (irCommTempMax - irCommTempMin);						
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {

							if(irCommStartDiffIndexTemp>1) {
    a3f2:	2c 2d       	mov	r18, r12
    a3f4:	30 e0       	ldi	r19, 0x00	; 0
    a3f6:	c3 94       	inc	r12
    a3f8:	5f cc       	rjmp	.-1858   	; 0x9cb8 <irCommTasks+0x8ce>
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
					irCommTxBitToTransmit[9-i] = irCommTempValue;
					if(irCommTempValue==1) {
						irCommTxCrc++;
    a3fa:	4f 5f       	subi	r20, 0xFF	; 255
    a3fc:	91 c8       	rjmp	.-3806   	; 0x9520 <irCommTasks+0x136>
    a3fe:	4f 5f       	subi	r20, 0xFF	; 255
    a400:	7e c8       	rjmp	.-3844   	; 0x94fe <irCommTasks+0x114>
    a402:	4f 5f       	subi	r20, 0xFF	; 255
    a404:	6d c8       	rjmp	.-3878   	; 0x94e0 <irCommTasks+0xf6>
    a406:	4f 5f       	subi	r20, 0xFF	; 255
    a408:	5e c8       	rjmp	.-3908   	; 0x94c6 <irCommTasks+0xdc>
    a40a:	4f 5f       	subi	r20, 0xFF	; 255
    a40c:	ad c8       	rjmp	.-3750   	; 0x9568 <irCommTasks+0x17e>

			case IRCOMM_TX_COMPUTE_TIMINGS:
				//updateBlueLed(255);
				if(irCommTxBitToTransmit[irCommTxBitCount] == 3) {
					//updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START2_DURATION;					
    a40e:	80 ef       	ldi	r24, 0xF0	; 240
    a410:	90 e0       	ldi	r25, 0x00	; 0
    a412:	90 93 43 05 	sts	0x0543, r25
    a416:	80 93 42 05 	sts	0x0542, r24
					irCommTxSwitchCount = IRCOMM_BIT_START2_SWITCH_COUNT;
    a41a:	81 e0       	ldi	r24, 0x01	; 1
    a41c:	80 93 44 05 	sts	0x0544, r24
    a420:	f4 ca       	rjmp	.-2584   	; 0x9a0a <irCommTasks+0x620>
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
					irCommTxBitToTransmit[9-i] = irCommTempValue;
					if(irCommTempValue==1) {
						irCommTxCrc++;
    a422:	4f 5f       	subi	r20, 0xFF	; 255
    a424:	90 c8       	rjmp	.-3808   	; 0x9546 <irCommTasks+0x15c>
    a426:	4f 5f       	subi	r20, 0xFF	; 255
    a428:	aa c8       	rjmp	.-3756   	; 0x957e <irCommTasks+0x194>
				if(irCommTxBitCount == 0) {
					//PORTA = irCommTxSensorMask;
					if(irCommTxSensorGroup==0) {
						PORTA = 0xAA;
					} else {
						PORTA = 0x55;
    a42a:	85 e5       	ldi	r24, 0x55	; 85
    a42c:	82 b9       	out	0x02, r24	; 2
    a42e:	f6 ca       	rjmp	.-2580   	; 0x9a1c <irCommTasks+0x632>
							

							if(irCommMaxSensorSignal[i] == irCommTempMax) {
								irCommRxPeakHighToLow = 0;
							} else if(irCommMaxSensorSignal[i] == irCommTempMin) {
								irCommRxPeakHighToLow = 1;
    a430:	50 92 31 05 	sts	0x0531, r5
    a434:	52 cc       	rjmp	.-1884   	; 0x9cda <irCommTasks+0x8f0>
						}
						if(irCommTempMax < irCommMaxSensorSignal[i]) {
							irCommTempMax = irCommMaxSensorSignal[i];
						}	
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
							if((irCommMaxSensorSignal[i]==irCommTempMax) && (irCommRxPeakHighToLow==1)) {
    a436:	20 91 31 05 	lds	r18, 0x0531
    a43a:	21 30       	cpi	r18, 0x01	; 1
    a43c:	09 f0       	breq	.+2      	; 0xa440 <irCommTasks+0x1056>
    a43e:	87 cc       	rjmp	.-1778   	; 0x9d4e <irCommTasks+0x964>
    a440:	8f cc       	rjmp	.-1762   	; 0x9d60 <irCommTasks+0x976>

			case IRCOMM_RX_MAX_SENSOR_STATE:
				// check from how many sensors the robot is receiving a possible message
				for(i=0; i<8; i++) {
					if((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
						irCommRxNumReceivingSensors++;
    a442:	84 2f       	mov	r24, r20
    a444:	8f 5f       	subi	r24, 0xFF	; 255
    a446:	80 93 37 05 	sts	0x0537, r24
    a44a:	39 c9       	rjmp	.-3470   	; 0x96be <irCommTasks+0x2d4>
    a44c:	4f 5f       	subi	r20, 0xFF	; 255
    a44e:	40 93 37 05 	sts	0x0537, r20
    a452:	0b c9       	rjmp	.-3562   	; 0x966a <irCommTasks+0x280>
    a454:	4f 5f       	subi	r20, 0xFF	; 255
    a456:	40 93 37 05 	sts	0x0537, r20
    a45a:	f9 c8       	rjmp	.-3598   	; 0x964e <irCommTasks+0x264>
    a45c:	4f 5f       	subi	r20, 0xFF	; 255
    a45e:	40 93 37 05 	sts	0x0537, r20
    a462:	e7 c8       	rjmp	.-3634   	; 0x9632 <irCommTasks+0x248>
    a464:	4f 5f       	subi	r20, 0xFF	; 255
    a466:	40 93 37 05 	sts	0x0537, r20
    a46a:	d5 c8       	rjmp	.-3670   	; 0x9616 <irCommTasks+0x22c>
    a46c:	4f 5f       	subi	r20, 0xFF	; 255
    a46e:	40 93 37 05 	sts	0x0537, r20
    a472:	17 c9       	rjmp	.-3538   	; 0x96a2 <irCommTasks+0x2b8>
    a474:	4f 5f       	subi	r20, 0xFF	; 255
    a476:	40 93 37 05 	sts	0x0537, r20
    a47a:	05 c9       	rjmp	.-3574   	; 0x9686 <irCommTasks+0x29c>
								irCommRxMaxSensor = 0;
							}
							i++;
						}
					} else {	// listen from the same sensor when a start bit is detected
						irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
    a47c:	20 91 35 05 	lds	r18, 0x0535
    a480:	30 91 36 05 	lds	r19, 0x0536
    a484:	e9 01       	movw	r28, r18
    a486:	cc 0f       	add	r28, r28
    a488:	dd 1f       	adc	r29, r29
    a48a:	ad 01       	movw	r20, r26
    a48c:	4c 0f       	add	r20, r28
    a48e:	5d 1f       	adc	r21, r29
    a490:	8e 01       	movw	r16, r28
    a492:	0e 0f       	add	r16, r30
    a494:	1f 1f       	adc	r17, r31
    a496:	fa 01       	movw	r30, r20
    a498:	80 81       	ld	r24, Z
    a49a:	91 81       	ldd	r25, Z+1	; 0x01
    a49c:	d8 01       	movw	r26, r16
    a49e:	6d 91       	ld	r22, X+
    a4a0:	7c 91       	ld	r23, X
    a4a2:	11 97       	sbiw	r26, 0x01	; 1
    a4a4:	86 1b       	sub	r24, r22
    a4a6:	97 0b       	sbc	r25, r23
    a4a8:	90 93 34 05 	sts	0x0534, r25
    a4ac:	80 93 33 05 	sts	0x0533, r24
    a4b0:	2f ca       	rjmp	.-2978   	; 0x9910 <irCommTasks+0x526>
				if(irCommSwitchCount >= (IRCOMM_BIT0_SWITCH_COUNT-2)) {
					irCommRxBitReceived[irCommRxBitCount] = 0;
					if(irCommRxBitCount<8) {	// do not consider the crc for byte interpretation
						irCommRxByte = irCommRxByte<<1;	// bit0, only shift
					}
				} else if(irCommSwitchCount >= (IRCOMM_BIT1_SWITCH_COUNT-1)) {
    a4b2:	43 30       	cpi	r20, 0x03	; 3
    a4b4:	08 f4       	brcc	.+2      	; 0xa4b8 <irCommTasks+0x10ce>
    a4b6:	8b cf       	rjmp	.-234    	; 0xa3ce <irCommTasks+0xfe4>
					irCommRxBitReceived[irCommRxBitCount] = 1;
    a4b8:	80 91 26 05 	lds	r24, 0x0526
    a4bc:	e8 2f       	mov	r30, r24
    a4be:	f0 e0       	ldi	r31, 0x00	; 0
    a4c0:	ec 58       	subi	r30, 0x8C	; 140
    a4c2:	fa 4f       	sbci	r31, 0xFA	; 250
    a4c4:	91 e0       	ldi	r25, 0x01	; 1
    a4c6:	90 83       	st	Z, r25
					if(irCommRxBitCount<8) {	// do not consider the crc for byte interpretation
    a4c8:	88 30       	cpi	r24, 0x08	; 8
    a4ca:	08 f0       	brcs	.+2      	; 0xa4ce <irCommTasks+0x10e4>
    a4cc:	55 cf       	rjmp	.-342    	; 0xa378 <irCommTasks+0xf8e>
						irCommRxCrc++;
    a4ce:	90 91 17 05 	lds	r25, 0x0517
    a4d2:	9f 5f       	subi	r25, 0xFF	; 255
    a4d4:	90 93 17 05 	sts	0x0517, r25
						irCommRxByte = irCommRxByte<<1;	// bit1, shift and add 1
    a4d8:	90 91 28 05 	lds	r25, 0x0528
    a4dc:	99 0f       	add	r25, r25
						irCommRxByte += 1;
    a4de:	9f 5f       	subi	r25, 0xFF	; 255
    a4e0:	90 93 28 05 	sts	0x0528, r25
    a4e4:	49 cf       	rjmp	.-366    	; 0xa378 <irCommTasks+0xf8e>
					resetDebugVariables();
					break;

				}

				if(irCommRxBitReceivedIndexTemp>9) {
    a4e6:	9a e0       	ldi	r25, 0x0A	; 10
    a4e8:	a9 e0       	ldi	r26, 0x09	; 9
    a4ea:	b0 e0       	ldi	r27, 0x00	; 0
    a4ec:	4d cf       	rjmp	.-358    	; 0xa388 <irCommTasks+0xf9e>
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 2) {
					//updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START1_DURATION;					
					irCommTxSwitchCount = IRCOMM_BIT_START1_SWITCH_COUNT;
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 1) {
					irCommTxDuration = IRCOMM_BIT1_DURATOIN;					
    a4ee:	8c e3       	ldi	r24, 0x3C	; 60
    a4f0:	90 e0       	ldi	r25, 0x00	; 0
    a4f2:	90 93 43 05 	sts	0x0543, r25
    a4f6:	80 93 42 05 	sts	0x0542, r24
					irCommTxSwitchCount = IRCOMM_BIT1_SWITCH_COUNT;
    a4fa:	84 e0       	ldi	r24, 0x04	; 4
    a4fc:	80 93 44 05 	sts	0x0544, r24
    a500:	84 ca       	rjmp	.-2808   	; 0x9a0a <irCommTasks+0x620>
					//if(irCommRxStartBitDetected == 1) {	// signal becomes too low to be reliable...or something else happened				
					//	irCommState = IRCOMM_RX_DEBUG;
					//	irCommAdcRxState = 12;
					//	updateGreenLed(0);
					//} else {
						irCommRxStartBitDetected = 0;
    a502:	10 92 30 05 	sts	0x0530, r1
						currentProx = 0;
    a506:	10 92 34 02 	sts	0x0234, r1
						adcSaveDataTo = SKIP_SAMPLE;
    a50a:	85 e0       	ldi	r24, 0x05	; 5
    a50c:	80 93 c9 02 	sts	0x02C9, r24
						adcSamplingState = 0;
    a510:	10 92 ca 02 	sts	0x02CA, r1
						irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    a514:	10 92 e8 04 	sts	0x04E8, r1
						irCommState = IRCOMM_RX_IDLE_STATE;
    a518:	81 e0       	ldi	r24, 0x01	; 1
    a51a:	80 93 e9 04 	sts	0x04E9, r24
						resetDebugVariables();
    a51e:	0e 94 4c 49 	call	0x9298	; 0x9298 <resetDebugVariables>
					//}			
					// start listening from the next sensor the next time I check for a start bit in order to get the same chance 
					// to all sensors, instead of always listening from the sensor that has the best signal
					if(irCommRxMaxSensor < 7) {
    a522:	20 91 35 05 	lds	r18, 0x0535
    a526:	30 91 36 05 	lds	r19, 0x0536
    a52a:	27 30       	cpi	r18, 0x07	; 7
    a52c:	31 05       	cpc	r19, r1
    a52e:	0c f0       	brlt	.+2      	; 0xa532 <irCommTasks+0x1148>
    a530:	20 c1       	rjmp	.+576    	; 0xa772 <irCommTasks+0x1388>
						irCommRxMaxSensor++;
    a532:	2f 5f       	subi	r18, 0xFF	; 255
    a534:	3f 4f       	sbci	r19, 0xFF	; 255
    a536:	30 93 36 05 	sts	0x0536, r19
    a53a:	20 93 35 05 	sts	0x0535, r18
    a53e:	80 91 33 05 	lds	r24, 0x0533
    a542:	90 91 34 05 	lds	r25, 0x0534
    a546:	b9 01       	movw	r22, r18
    a548:	66 0f       	add	r22, r22
    a54a:	77 1f       	adc	r23, r23
    a54c:	40 91 5e 05 	lds	r20, 0x055E
    a550:	50 91 5f 05 	lds	r21, 0x055F
    a554:	46 0f       	add	r20, r22
    a556:	57 1f       	adc	r21, r23
    a558:	00 91 4a 05 	lds	r16, 0x054A
    a55c:	10 91 4b 05 	lds	r17, 0x054B
    a560:	06 0f       	add	r16, r22
    a562:	17 1f       	adc	r17, r23
    a564:	d5 c9       	rjmp	.-3158   	; 0x9910 <irCommTasks+0x526>
				irCommSwitchCountIndexTemp++;
				

				//turnOffGreenLeds();
				if(irCommRxPeakHighToLow==1) {
					if(irCommRxStartBitDetected==1) {
    a566:	90 91 30 05 	lds	r25, 0x0530
    a56a:	91 30       	cpi	r25, 0x01	; 1
    a56c:	09 f4       	brne	.+2      	; 0xa570 <irCommTasks+0x1186>
    a56e:	67 c1       	rjmp	.+718    	; 0xa83e <irCommTasks+0x1454>

							resetDebugVariables();				
							break;
						}
					} else {
						if(irCommSwitchCount==2) {
    a570:	82 30       	cpi	r24, 0x02	; 2
    a572:	09 f4       	brne	.+2      	; 0xa576 <irCommTasks+0x118c>
    a574:	89 c1       	rjmp	.+786    	; 0xa888 <irCommTasks+0x149e>
								irCommRxBitCount = 0;	
								irCommRxCrc = 0;	
								irCommRxByte = 0;
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
							}
						} else if(irCommSwitchCount==1) {		
    a576:	81 30       	cpi	r24, 0x01	; 1
    a578:	09 f4       	brne	.+2      	; 0xa57c <irCommTasks+0x1192>
    a57a:	e3 c1       	rjmp	.+966    	; 0xa942 <irCommTasks+0x1558>
								irCommState = IRCOMM_RX_IDLE_STATE;

								irCommSyncStateIndexTemp++;
							}							
						} else {							
							currentProx = 0;
    a57c:	10 92 34 02 	sts	0x0234, r1
							adcSaveDataTo = SKIP_SAMPLE;
    a580:	85 e0       	ldi	r24, 0x05	; 5
    a582:	80 93 c9 02 	sts	0x02C9, r24
							adcSamplingState = 0;
    a586:	10 92 ca 02 	sts	0x02CA, r1
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;							
    a58a:	10 92 e8 04 	sts	0x04E8, r1
							irCommState = IRCOMM_RX_IDLE_STATE;	
    a58e:	c0 92 e9 04 	sts	0x04E9, r12

							if(irCommSyncStateIndexTemp>1) {
    a592:	80 91 11 05 	lds	r24, 0x0511
    a596:	82 30       	cpi	r24, 0x02	; 2
    a598:	08 f0       	brcs	.+2      	; 0xa59c <irCommTasks+0x11b2>
    a59a:	81 e0       	ldi	r24, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 11;
    a59c:	e8 2f       	mov	r30, r24
    a59e:	f0 e0       	ldi	r31, 0x00	; 0
    a5a0:	e2 58       	subi	r30, 0x82	; 130
    a5a2:	fa 4f       	sbci	r31, 0xFA	; 250
    a5a4:	9b e0       	ldi	r25, 0x0B	; 11
    a5a6:	90 83       	st	Z, r25
							irCommSyncStateIndexTemp++;
    a5a8:	8f 5f       	subi	r24, 0xFF	; 255
    a5aa:	80 93 11 05 	sts	0x0511, r24
							//irCommState = IRCOMM_RX_DEBUG;
							//irCommAdcRxState = 12;
							//updateRedLed(0);
							//break;

							resetDebugVariables();				
    a5ae:	0e 94 4c 49 	call	0x9298	; 0x9298 <resetDebugVariables>
							break;
    a5b2:	0c 94 0d 4a 	jmp	0x941a	; 0x941a <irCommTasks+0x30>
							irCommSwitchCount++;
						}
					}
				}

				if(irCommSwitchCountIndexTemp>1) {
    a5b6:	e8 2f       	mov	r30, r24
    a5b8:	f0 e0       	ldi	r31, 0x00	; 0
    a5ba:	98 2f       	mov	r25, r24
    a5bc:	9f 5f       	subi	r25, 0xFF	; 255
    a5be:	19 ce       	rjmp	.-974    	; 0xa1f2 <irCommTasks+0xe08>
					//updateBlueLed(0);
				}
				irCommRxMaxDiffTemp[irCommRxMaxDiffIndexTemp] = irCommRxMaxDiff;
				irCommRxMaxDiffIndexTemp++;
				
				if(irCommMaxSensorValueCurrIndexTemp>1) {
    a5c0:	e6 2f       	mov	r30, r22
    a5c2:	f0 e0       	ldi	r31, 0x00	; 0
    a5c4:	6f 5f       	subi	r22, 0xFF	; 255
    a5c6:	cf c9       	rjmp	.-3170   	; 0x9966 <irCommTasks+0x57c>
					//updateBlueLed(0);
				}
				irCommRxMaxSensorTemp[irCommRxMaxSensorIndexTemp] = irCommRxMaxSensor;
				irCommRxMaxSensorIndexTemp++;
					
				if(irCommRxMaxDiffIndexTemp>1) {
    a5c8:	e6 2f       	mov	r30, r22
    a5ca:	f0 e0       	ldi	r31, 0x00	; 0
    a5cc:	6f 5f       	subi	r22, 0xFF	; 255
    a5ce:	b8 c9       	rjmp	.-3216   	; 0x9940 <irCommTasks+0x556>
					}
				}
				//turnOffGreenLeds();
				//setGreenLed(irCommRxMaxSensor, 1);			

				if(irCommRxMaxSensorIndexTemp>1) {
    a5d0:	e6 2f       	mov	r30, r22
    a5d2:	f0 e0       	ldi	r31, 0x00	; 0
    a5d4:	6f 5f       	subi	r22, 0xFF	; 255
    a5d6:	a4 c9       	rjmp	.-3256   	; 0x9920 <irCommTasks+0x536>
					//updateBlueLed(0);
				}
				irCommMaxSensorValueCurrTemp[irCommMaxSensorValueCurrIndexTemp] = irCommMaxSensorValueCurr[irCommRxMaxSensor];
				irCommMaxSensorValueCurrIndexTemp++;
				
				if(irCommMinSensorValueCurrIndexTemp>1) {
    a5d8:	e4 2f       	mov	r30, r20
    a5da:	f0 e0       	ldi	r31, 0x00	; 0
    a5dc:	64 2f       	mov	r22, r20
    a5de:	6f 5f       	subi	r22, 0xFF	; 255
    a5e0:	d8 c9       	rjmp	.-3152   	; 0x9992 <irCommTasks+0x5a8>
						
				// start counting number of switch around mean signal
				if(irCommMaxSensorSignal[0] > 0) {
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
    a5e2:	8f ef       	ldi	r24, 0xFF	; 255
    a5e4:	80 93 24 05 	sts	0x0524, r24
    a5e8:	2f ef       	ldi	r18, 0xFF	; 255
    a5ea:	38 2f       	mov	r19, r24
    a5ec:	de cd       	rjmp	.-1092   	; 0xa1aa <irCommTasks+0xdc0>
				//if(irCommComputeShift != 0) {	// it should not be never 1 because the difference between min and max in the current signal
					//updateRedLed(0);			// is at least IRCOMM_DETECTION_AMPLITUDE_THR (checked in the previous state)
				//}
				irCommProxMean = (int)(irCommProxSum / IRCOMM_SAMPLING_WINDOW);

				if(irCommProxMeanIndexTemp>1) {
    a5ee:	e2 2f       	mov	r30, r18
    a5f0:	f0 e0       	ldi	r31, 0x00	; 0
    a5f2:	2f 5f       	subi	r18, 0xFF	; 255
    a5f4:	a3 cd       	rjmp	.-1210   	; 0xa13c <irCommTasks+0xd52>
					//updateRedLed(0);
				}
				irCommRxPeakHighToLowTemp[irCommRxPeakHighToLowIndexTemp] = irCommRxPeakHighToLow;
				irCommRxPeakHighToLowIndexTemp++;
				
				if(irCommRxStartPeakDurationIndexTemp>1) {
    a5f6:	e2 2f       	mov	r30, r18
    a5f8:	f0 e0       	ldi	r31, 0x00	; 0
    a5fa:	2f 5f       	subi	r18, 0xFF	; 255
    a5fc:	85 cd       	rjmp	.-1270   	; 0xa108 <irCommTasks+0xd1e>
					//updateRedLed(0);
				}
				irCommShiftCountTemp[irCommShiftCountIndexTemp] = irCommShiftCount;
				irCommShiftCountIndexTemp++;
				
				if(irCommRxPeakHighToLowIndexTemp>1) {
    a5fe:	e2 2f       	mov	r30, r18
    a600:	f0 e0       	ldi	r31, 0x00	; 0
    a602:	2f 5f       	subi	r18, 0xFF	; 255
    a604:	71 cd       	rjmp	.-1310   	; 0xa0e8 <irCommTasks+0xcfe>
					//updateRedLed(0);
				}
				irCommComputeShiftTemp[irCommComputeShiftIndexTemp] = irCommComputeShift;
				irCommComputeShiftIndexTemp++;
				
				if(irCommShiftCountIndexTemp>1) {
    a606:	e2 2f       	mov	r30, r18
    a608:	f0 e0       	ldi	r31, 0x00	; 0
    a60a:	2f 5f       	subi	r18, 0xFF	; 255
    a60c:	60 cd       	rjmp	.-1344   	; 0xa0ce <irCommTasks+0xce4>
						}											
					 }

				}

				if(irCommComputeShiftIndexTemp>1) {
    a60e:	e2 2f       	mov	r30, r18
    a610:	f0 e0       	ldi	r31, 0x00	; 0
    a612:	2f 5f       	subi	r18, 0xFF	; 255
    a614:	4f cd       	rjmp	.-1378   	; 0xa0b4 <irCommTasks+0xcca>
						
				// start counting number of switch around mean signal
				if(irCommMaxSensorSignal[0] > 0) {
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
    a616:	8f ef       	ldi	r24, 0xFF	; 255
    a618:	80 93 24 05 	sts	0x0524, r24
    a61c:	2f ef       	ldi	r18, 0xFF	; 255
    a61e:	38 2f       	mov	r19, r24
    a620:	7e ce       	rjmp	.-772    	; 0xa31e <irCommTasks+0xf34>
							break;
						}
					}
				} else {
					if(irCommRxStartBitDetected==1) {
						if(irCommSwitchCount==2) {
    a622:	82 30       	cpi	r24, 0x02	; 2
    a624:	09 f4       	brne	.+2      	; 0xa628 <irCommTasks+0x123e>
    a626:	51 c1       	rjmp	.+674    	; 0xa8ca <irCommTasks+0x14e0>
							irCommShiftCounter = 0;
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else if(irCommSwitchCount==1) {
    a628:	81 30       	cpi	r24, 0x01	; 1
    a62a:	09 f4       	brne	.+2      	; 0xa62e <irCommTasks+0x1244>
    a62c:	b1 c1       	rjmp	.+866    	; 0xa990 <irCommTasks+0x15a6>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_WAITING_BIT;
						} else {
							irCommRxStartBitDetected = 0;
    a62e:	10 92 30 05 	sts	0x0530, r1
							currentProx = 0;
    a632:	10 92 34 02 	sts	0x0234, r1
							adcSaveDataTo = SKIP_SAMPLE;
    a636:	85 e0       	ldi	r24, 0x05	; 5
    a638:	80 93 c9 02 	sts	0x02C9, r24
							adcSamplingState = 0;
    a63c:	10 92 ca 02 	sts	0x02CA, r1
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    a640:	10 92 e8 04 	sts	0x04E8, r1
							irCommState = IRCOMM_RX_IDLE_STATE;	
    a644:	90 93 e9 04 	sts	0x04E9, r25

							if(irCommSyncStateIndexTemp>1) {
    a648:	80 91 11 05 	lds	r24, 0x0511
    a64c:	82 30       	cpi	r24, 0x02	; 2
    a64e:	08 f0       	brcs	.+2      	; 0xa652 <irCommTasks+0x1268>
    a650:	81 e0       	ldi	r24, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 13;
    a652:	e8 2f       	mov	r30, r24
    a654:	f0 e0       	ldi	r31, 0x00	; 0
    a656:	e2 58       	subi	r30, 0x82	; 130
    a658:	fa 4f       	sbci	r31, 0xFA	; 250
    a65a:	9d e0       	ldi	r25, 0x0D	; 13
    a65c:	90 83       	st	Z, r25
							irCommSyncStateIndexTemp++;
    a65e:	8f 5f       	subi	r24, 0xFF	; 255
    a660:	80 93 11 05 	sts	0x0511, r24
							//irCommState = IRCOMM_RX_DEBUG;
							//irCommAdcRxState = 12;
							//updateRedLed(0);
							//break;

							resetDebugVariables();				
    a664:	0e 94 4c 49 	call	0x9298	; 0x9298 <resetDebugVariables>
							break;
    a668:	0c 94 0d 4a 	jmp	0x941a	; 0x941a <irCommTasks+0x30>

				//setGreenLed(irCommRxBitCount, 1);

				irCommRxBitCount++;
				if(irCommRxBitCount == 10) {	// received 8 bit of data + 2 bit of crc
					irCommState = IRCOMM_RX_CHECK_CRC;
    a66c:	87 e0       	ldi	r24, 0x07	; 7
    a66e:	80 93 e9 04 	sts	0x04E9, r24

					if(irCommStateIndexTemp>13) {
    a672:	80 91 10 05 	lds	r24, 0x0510
    a676:	8e 30       	cpi	r24, 0x0E	; 14
    a678:	08 f0       	brcs	.+2      	; 0xa67c <irCommTasks+0x1292>
    a67a:	a3 c9       	rjmp	.-3258   	; 0x99c2 <irCommTasks+0x5d8>
    a67c:	9d ce       	rjmp	.-710    	; 0xa3b8 <irCommTasks+0xfce>
					}
				} else {
					// cannot get a reliable signal from the sensor from which the start bit was detected the previous time,
					// thus restart listening from the next sensor
					if(irCommRxStartBitDetected == 1) {
						if(irCommRxMaxSensor < 7) {
    a67e:	27 30       	cpi	r18, 0x07	; 7
    a680:	31 05       	cpc	r19, r1
    a682:	0c f0       	brlt	.+2      	; 0xa686 <irCommTasks+0x129c>
    a684:	d3 c0       	rjmp	.+422    	; 0xa82c <irCommTasks+0x1442>
							irCommRxMaxSensor++;
    a686:	2f 5f       	subi	r18, 0xFF	; 255
    a688:	3f 4f       	sbci	r19, 0xFF	; 255
    a68a:	30 93 36 05 	sts	0x0536, r19
    a68e:	20 93 35 05 	sts	0x0535, r18
    a692:	9b ce       	rjmp	.-714    	; 0xa3ca <irCommTasks+0xfe0>
					if(irCommRxStartBitDetected==0) {
						// start listening from the next sensor
						if(irCommRxMaxSensor < 7) {
							irCommRxMaxSensor++;
						} else {
							irCommRxMaxSensor = 0;
    a694:	10 92 36 05 	sts	0x0536, r1
    a698:	10 92 35 05 	sts	0x0535, r1
    a69c:	20 e0       	ldi	r18, 0x00	; 0
    a69e:	30 e0       	ldi	r19, 0x00	; 0
    a6a0:	24 c8       	rjmp	.-4024   	; 0x96ea <irCommTasks+0x300>
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
								irCommRxMaxSensor++;
    a6a2:	2f 5f       	subi	r18, 0xFF	; 255
    a6a4:	3f 4f       	sbci	r19, 0xFF	; 255
    a6a6:	30 93 36 05 	sts	0x0536, r19
    a6aa:	20 93 35 05 	sts	0x0535, r18
    a6ae:	3e c8       	rjmp	.-3972   	; 0x972c <irCommTasks+0x342>
    a6b0:	2f 5f       	subi	r18, 0xFF	; 255
    a6b2:	3f 4f       	sbci	r19, 0xFF	; 255
    a6b4:	30 93 36 05 	sts	0x0536, r19
    a6b8:	20 93 35 05 	sts	0x0535, r18
    a6bc:	79 c8       	rjmp	.-3854   	; 0x97b0 <irCommTasks+0x3c6>
    a6be:	2f 5f       	subi	r18, 0xFF	; 255
    a6c0:	3f 4f       	sbci	r19, 0xFF	; 255
    a6c2:	30 93 36 05 	sts	0x0536, r19
    a6c6:	20 93 35 05 	sts	0x0535, r18
    a6ca:	51 c8       	rjmp	.-3934   	; 0x976e <irCommTasks+0x384>
							resetDebugVariables();				
							break;
						}
					} else {
						if(irCommSwitchCount==2) {
							if(irCommSyncStateIndexTemp>1) {
    a6cc:	20 91 11 05 	lds	r18, 0x0511
    a6d0:	22 30       	cpi	r18, 0x02	; 2
    a6d2:	08 f4       	brcc	.+2      	; 0xa6d6 <irCommTasks+0x12ec>
    a6d4:	32 c1       	rjmp	.+612    	; 0xa93a <irCommTasks+0x1550>
    a6d6:	22 e0       	ldi	r18, 0x02	; 2
    a6d8:	81 e0       	ldi	r24, 0x01	; 1
    a6da:	90 e0       	ldi	r25, 0x00	; 0
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 1;
    a6dc:	82 58       	subi	r24, 0x82	; 130
    a6de:	9a 4f       	sbci	r25, 0xFA	; 250
    a6e0:	31 e0       	ldi	r19, 0x01	; 1
    a6e2:	dc 01       	movw	r26, r24
    a6e4:	3c 93       	st	X, r19
							irCommSyncStateIndexTemp++;
    a6e6:	20 93 11 05 	sts	0x0511, r18

							irCommShiftCount = IRCOMM_SAMPLING_WINDOW/2 + irCommShiftCount;
    a6ea:	8f 2d       	mov	r24, r15
    a6ec:	86 5f       	subi	r24, 0xF6	; 246
    a6ee:	80 93 20 05 	sts	0x0520, r24
							irCommRxPeakHighToLow = 0;
    a6f2:	10 92 31 05 	sts	0x0531, r1
							irCommRxStartBitDetected = 0;
    a6f6:	10 92 30 05 	sts	0x0530, r1
							irCommSecondBitSkipped = 0;
    a6fa:	10 92 29 05 	sts	0x0529, r1
							irCommShiftCounter = 0;
    a6fe:	10 92 2a 05 	sts	0x052A, r1
							irCommRxBitCount = 0;	
    a702:	10 92 26 05 	sts	0x0526, r1
							irCommRxCrc = 0;	
    a706:	10 92 17 05 	sts	0x0517, r1
							irCommRxByte = 0;
    a70a:	10 92 28 05 	sts	0x0528, r1
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
    a70e:	94 e0       	ldi	r25, 0x04	; 4
    a710:	90 93 e9 04 	sts	0x04E9, r25
    a714:	90 e0       	ldi	r25, 0x00	; 0
							break;				
						}
					}
				}
	
				if(irCommStateIndexTemp>13) {
    a716:	20 91 10 05 	lds	r18, 0x0510
    a71a:	2e 30       	cpi	r18, 0x0E	; 14
    a71c:	30 f5       	brcc	.+76     	; 0xa76a <irCommTasks+0x1380>
    a71e:	e2 2f       	mov	r30, r18
    a720:	f0 e0       	ldi	r31, 0x00	; 0
    a722:	2f 5f       	subi	r18, 0xFF	; 255
					irCommStateIndexTemp = 13;
					//updateRedLed(0);
				}
				irCommStateTemp[irCommStateIndexTemp] = irCommState;
    a724:	30 91 e9 04 	lds	r19, 0x04E9
    a728:	e0 5b       	subi	r30, 0xB0	; 176
    a72a:	fa 4f       	sbci	r31, 0xFA	; 250
    a72c:	30 83       	st	Z, r19
				irCommStateIndexTemp++;
    a72e:	20 93 10 05 	sts	0x0510, r18
				
				if(irCommShiftCountFinalIndexTemp>1) {
    a732:	20 91 0a 05 	lds	r18, 0x050A
    a736:	22 30       	cpi	r18, 0x02	; 2
    a738:	08 f4       	brcc	.+2      	; 0xa73c <irCommTasks+0x1352>
    a73a:	53 c0       	rjmp	.+166    	; 0xa7e2 <irCommTasks+0x13f8>
    a73c:	22 e0       	ldi	r18, 0x02	; 2
    a73e:	e1 e0       	ldi	r30, 0x01	; 1
    a740:	f0 e0       	ldi	r31, 0x00	; 0
					irCommShiftCountFinalIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommShiftCountFinalTemp[irCommShiftCountFinalIndexTemp] = irCommShiftCount;
    a742:	e7 5b       	subi	r30, 0xB7	; 183
    a744:	f4 4f       	sbci	r31, 0xF4	; 244
    a746:	80 83       	st	Z, r24
				irCommShiftCountFinalIndexTemp++;
    a748:	20 93 0a 05 	sts	0x050A, r18
				
				if(irCommRxStartBitDetectedIndexTemp>1) {
    a74c:	80 91 0f 05 	lds	r24, 0x050F
    a750:	82 30       	cpi	r24, 0x02	; 2
    a752:	08 f4       	brcc	.+2      	; 0xa756 <irCommTasks+0x136c>
    a754:	70 c0       	rjmp	.+224    	; 0xa836 <irCommTasks+0x144c>
    a756:	82 e0       	ldi	r24, 0x02	; 2
    a758:	e1 e0       	ldi	r30, 0x01	; 1
    a75a:	f0 e0       	ldi	r31, 0x00	; 0
					irCommRxStartBitDetectedIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommRxStartBitDetectedTemp[irCommRxStartBitDetectedIndexTemp] = irCommRxStartBitDetected;
    a75c:	e7 57       	subi	r30, 0x77	; 119
    a75e:	fa 4f       	sbci	r31, 0xFA	; 250
    a760:	90 83       	st	Z, r25
				irCommRxStartBitDetectedIndexTemp++;			
    a762:	80 93 0f 05 	sts	0x050F, r24
					usart0Transmit(irCommState,1);					
				}
				updateBlueLed(255);
				*/

				break;
    a766:	0c 94 0d 4a 	jmp	0x941a	; 0x941a <irCommTasks+0x30>
							break;				
						}
					}
				}
	
				if(irCommStateIndexTemp>13) {
    a76a:	2e e0       	ldi	r18, 0x0E	; 14
    a76c:	ed e0       	ldi	r30, 0x0D	; 13
    a76e:	f0 e0       	ldi	r31, 0x00	; 0
    a770:	d9 cf       	rjmp	.-78     	; 0xa724 <irCommTasks+0x133a>
					// start listening from the next sensor the next time I check for a start bit in order to get the same chance 
					// to all sensors, instead of always listening from the sensor that has the best signal
					if(irCommRxMaxSensor < 7) {
						irCommRxMaxSensor++;
					} else {
						irCommRxMaxSensor = 0;
    a772:	10 92 36 05 	sts	0x0536, r1
    a776:	10 92 35 05 	sts	0x0535, r1
    a77a:	80 91 33 05 	lds	r24, 0x0533
    a77e:	90 91 34 05 	lds	r25, 0x0534
    a782:	40 91 5e 05 	lds	r20, 0x055E
    a786:	50 91 5f 05 	lds	r21, 0x055F
    a78a:	00 91 4a 05 	lds	r16, 0x054A
    a78e:	10 91 4b 05 	lds	r17, 0x054B
    a792:	20 e0       	ldi	r18, 0x00	; 0
    a794:	30 e0       	ldi	r19, 0x00	; 0
    a796:	bc c8       	rjmp	.-3720   	; 0x9910 <irCommTasks+0x526>
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
								irCommRxMaxSensor++;
    a798:	2f 5f       	subi	r18, 0xFF	; 255
    a79a:	3f 4f       	sbci	r19, 0xFF	; 255
    a79c:	30 93 36 05 	sts	0x0536, r19
    a7a0:	20 93 35 05 	sts	0x0535, r18
    a7a4:	26 c8       	rjmp	.-4020   	; 0x97f2 <irCommTasks+0x408>
    a7a6:	2f 5f       	subi	r18, 0xFF	; 255
    a7a8:	3f 4f       	sbci	r19, 0xFF	; 255
    a7aa:	30 93 36 05 	sts	0x0536, r19
    a7ae:	20 93 35 05 	sts	0x0535, r18
    a7b2:	40 c8       	rjmp	.-3968   	; 0x9834 <irCommTasks+0x44a>
    a7b4:	2f 5f       	subi	r18, 0xFF	; 255
    a7b6:	3f 4f       	sbci	r19, 0xFF	; 255
    a7b8:	30 93 36 05 	sts	0x0536, r19
    a7bc:	20 93 35 05 	sts	0x0535, r18
    a7c0:	5a c8       	rjmp	.-3916   	; 0x9876 <irCommTasks+0x48c>
    a7c2:	2f 5f       	subi	r18, 0xFF	; 255
    a7c4:	3f 4f       	sbci	r19, 0xFF	; 255
    a7c6:	30 93 36 05 	sts	0x0536, r19
    a7ca:	20 93 35 05 	sts	0x0535, r18
    a7ce:	74 c8       	rjmp	.-3864   	; 0x98b8 <irCommTasks+0x4ce>
							} else {
								irCommRxMaxSensor = 0;
    a7d0:	10 92 36 05 	sts	0x0536, r1
    a7d4:	10 92 35 05 	sts	0x0535, r1
    a7d8:	20 91 35 05 	lds	r18, 0x0535
    a7dc:	30 91 36 05 	lds	r19, 0x0536
    a7e0:	8a c8       	rjmp	.-3820   	; 0x98f6 <irCommTasks+0x50c>
					//updateRedLed(0);
				}
				irCommStateTemp[irCommStateIndexTemp] = irCommState;
				irCommStateIndexTemp++;
				
				if(irCommShiftCountFinalIndexTemp>1) {
    a7e2:	e2 2f       	mov	r30, r18
    a7e4:	f0 e0       	ldi	r31, 0x00	; 0
    a7e6:	2f 5f       	subi	r18, 0xFF	; 255
    a7e8:	ac cf       	rjmp	.-168    	; 0xa742 <irCommTasks+0x1358>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else if(irCommSwitchCount==1) {
							if(irCommRxStartPeakDuration > IRCOMM_SAMPLING_WINDOW/2) {
    a7ea:	bd 2d       	mov	r27, r13
    a7ec:	bb 30       	cpi	r27, 0x0B	; 11
    a7ee:	08 f4       	brcc	.+2      	; 0xa7f2 <irCommTasks+0x1408>
    a7f0:	7b c0       	rjmp	.+246    	; 0xa8e8 <irCommTasks+0x14fe>
								currentProx = 0;
    a7f2:	10 92 34 02 	sts	0x0234, r1
								adcSaveDataTo = SKIP_SAMPLE;
    a7f6:	95 e0       	ldi	r25, 0x05	; 5
    a7f8:	90 93 c9 02 	sts	0x02C9, r25
								adcSamplingState = 0;
    a7fc:	10 92 ca 02 	sts	0x02CA, r1
								irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;								
    a800:	10 92 e8 04 	sts	0x04E8, r1
								irCommState = IRCOMM_RX_IDLE_STATE;
    a804:	80 93 e9 04 	sts	0x04E9, r24

								if(irCommSyncStateIndexTemp>1) {
    a808:	80 91 11 05 	lds	r24, 0x0511
    a80c:	82 30       	cpi	r24, 0x02	; 2
    a80e:	08 f0       	brcs	.+2      	; 0xa812 <irCommTasks+0x1428>
    a810:	81 e0       	ldi	r24, 0x01	; 1
									irCommSyncStateIndexTemp = 1;
									//updateRedLed(0);
								}
								irCommSyncStateTemp[irCommSyncStateIndexTemp] = 14;
    a812:	e8 2f       	mov	r30, r24
    a814:	f0 e0       	ldi	r31, 0x00	; 0
    a816:	e2 58       	subi	r30, 0x82	; 130
    a818:	fa 4f       	sbci	r31, 0xFA	; 250
    a81a:	9e e0       	ldi	r25, 0x0E	; 14
    a81c:	90 83       	st	Z, r25
								irCommSyncStateIndexTemp++;
    a81e:	8f 5f       	subi	r24, 0xFF	; 255
    a820:	80 93 11 05 	sts	0x0511, r24
								//irCommState = IRCOMM_RX_DEBUG;
								//irCommAdcRxState = 12;
								//updateRedLed(0);
								//break;

								resetDebugVariables();				
    a824:	0e 94 4c 49 	call	0x9298	; 0x9298 <resetDebugVariables>
								break;
    a828:	0c 94 0d 4a 	jmp	0x941a	; 0x941a <irCommTasks+0x30>
					// thus restart listening from the next sensor
					if(irCommRxStartBitDetected == 1) {
						if(irCommRxMaxSensor < 7) {
							irCommRxMaxSensor++;
						} else {
							irCommRxMaxSensor = 0;
    a82c:	10 92 36 05 	sts	0x0536, r1
    a830:	10 92 35 05 	sts	0x0535, r1
    a834:	ca cd       	rjmp	.-1132   	; 0xa3ca <irCommTasks+0xfe0>
					//updateRedLed(0);
				}
				irCommShiftCountFinalTemp[irCommShiftCountFinalIndexTemp] = irCommShiftCount;
				irCommShiftCountFinalIndexTemp++;
				
				if(irCommRxStartBitDetectedIndexTemp>1) {
    a836:	e8 2f       	mov	r30, r24
    a838:	f0 e0       	ldi	r31, 0x00	; 0
    a83a:	8f 5f       	subi	r24, 0xFF	; 255
    a83c:	8f cf       	rjmp	.-226    	; 0xa75c <irCommTasks+0x1372>
				

				//turnOffGreenLeds();
				if(irCommRxPeakHighToLow==1) {
					if(irCommRxStartBitDetected==1) {
						if(irCommSwitchCount==2) {
    a83e:	82 30       	cpi	r24, 0x02	; 2
    a840:	09 f4       	brne	.+2      	; 0xa844 <irCommTasks+0x145a>
    a842:	10 c1       	rjmp	.+544    	; 0xaa64 <irCommTasks+0x167a>
							irCommShiftCounter = 0;
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_WAITING_BIT;
						} else if(irCommSwitchCount==1) {
    a844:	81 30       	cpi	r24, 0x01	; 1
    a846:	09 f4       	brne	.+2      	; 0xa84a <irCommTasks+0x1460>
    a848:	eb c0       	rjmp	.+470    	; 0xaa20 <irCommTasks+0x1636>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else {
							irCommRxStartBitDetected = 0;
    a84a:	10 92 30 05 	sts	0x0530, r1
							currentProx = 0;
    a84e:	10 92 34 02 	sts	0x0234, r1
							adcSaveDataTo = SKIP_SAMPLE;
    a852:	85 e0       	ldi	r24, 0x05	; 5
    a854:	80 93 c9 02 	sts	0x02C9, r24
							adcSamplingState = 0;
    a858:	10 92 ca 02 	sts	0x02CA, r1
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    a85c:	10 92 e8 04 	sts	0x04E8, r1
							irCommState = IRCOMM_RX_IDLE_STATE;	
    a860:	c0 92 e9 04 	sts	0x04E9, r12

							if(irCommSyncStateIndexTemp>1) {
    a864:	80 91 11 05 	lds	r24, 0x0511
    a868:	82 30       	cpi	r24, 0x02	; 2
    a86a:	08 f0       	brcs	.+2      	; 0xa86e <irCommTasks+0x1484>
    a86c:	81 e0       	ldi	r24, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 12;
    a86e:	e8 2f       	mov	r30, r24
    a870:	f0 e0       	ldi	r31, 0x00	; 0
    a872:	e2 58       	subi	r30, 0x82	; 130
    a874:	fa 4f       	sbci	r31, 0xFA	; 250
    a876:	9c e0       	ldi	r25, 0x0C	; 12
    a878:	90 83       	st	Z, r25
							irCommSyncStateIndexTemp++;
    a87a:	8f 5f       	subi	r24, 0xFF	; 255
    a87c:	80 93 11 05 	sts	0x0511, r24
							//irCommState = IRCOMM_RX_DEBUG;
							//irCommAdcRxState = 12;
							//updateRedLed(0);
							//break;

							resetDebugVariables();				
    a880:	0e 94 4c 49 	call	0x9298	; 0x9298 <resetDebugVariables>
							break;
    a884:	0c 94 0d 4a 	jmp	0x941a	; 0x941a <irCommTasks+0x30>
						}
					} else {
						if(irCommSwitchCount==2) {
							if(irCommRxStartPeakDuration<=3) {	// peak due to sensors sampling detected
    a888:	2d 2d       	mov	r18, r13
    a88a:	24 30       	cpi	r18, 0x04	; 4
    a88c:	08 f0       	brcs	.+2      	; 0xa890 <irCommTasks+0x14a6>
    a88e:	a4 c0       	rjmp	.+328    	; 0xa9d8 <irCommTasks+0x15ee>
								currentProx = 0;
    a890:	10 92 34 02 	sts	0x0234, r1
								adcSaveDataTo = SKIP_SAMPLE;
    a894:	85 e0       	ldi	r24, 0x05	; 5
    a896:	80 93 c9 02 	sts	0x02C9, r24
								adcSamplingState = 0;
    a89a:	10 92 ca 02 	sts	0x02CA, r1
								irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;							
    a89e:	10 92 e8 04 	sts	0x04E8, r1
								irCommState = IRCOMM_RX_IDLE_STATE;
    a8a2:	c0 92 e9 04 	sts	0x04E9, r12

								if(irCommSyncStateIndexTemp>1) {
    a8a6:	80 91 11 05 	lds	r24, 0x0511
    a8aa:	82 30       	cpi	r24, 0x02	; 2
    a8ac:	08 f0       	brcs	.+2      	; 0xa8b0 <irCommTasks+0x14c6>
    a8ae:	81 e0       	ldi	r24, 0x01	; 1
									irCommSyncStateIndexTemp = 1;
									//updateRedLed(0);
								}
								irCommSyncStateTemp[irCommSyncStateIndexTemp] = 16;
    a8b0:	e8 2f       	mov	r30, r24
    a8b2:	f0 e0       	ldi	r31, 0x00	; 0
    a8b4:	e2 58       	subi	r30, 0x82	; 130
    a8b6:	fa 4f       	sbci	r31, 0xFA	; 250
    a8b8:	90 e1       	ldi	r25, 0x10	; 16
    a8ba:	90 83       	st	Z, r25
								irCommSyncStateIndexTemp++;
    a8bc:	8f 5f       	subi	r24, 0xFF	; 255
    a8be:	80 93 11 05 	sts	0x0511, r24
								//irCommState = IRCOMM_RX_DEBUG;
								//irCommAdcRxState = 12;
								//updateGreenLed(0);
								//break;

								resetDebugVariables();
    a8c2:	0e 94 4c 49 	call	0x9298	; 0x9298 <resetDebugVariables>
								break;
    a8c6:	0c 94 0d 4a 	jmp	0x941a	; 0x941a <irCommTasks+0x30>
						}
					}
				} else {
					if(irCommRxStartBitDetected==1) {
						if(irCommSwitchCount==2) {
							if(irCommSyncStateIndexTemp>1) {
    a8ca:	80 91 11 05 	lds	r24, 0x0511
    a8ce:	82 30       	cpi	r24, 0x02	; 2
    a8d0:	08 f0       	brcs	.+2      	; 0xa8d4 <irCommTasks+0x14ea>
    a8d2:	81 e0       	ldi	r24, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 5;
    a8d4:	e8 2f       	mov	r30, r24
    a8d6:	f0 e0       	ldi	r31, 0x00	; 0
    a8d8:	e2 58       	subi	r30, 0x82	; 130
    a8da:	fa 4f       	sbci	r31, 0xFA	; 250
    a8dc:	95 e0       	ldi	r25, 0x05	; 5
    a8de:	90 83       	st	Z, r25
							irCommSyncStateIndexTemp++;
    a8e0:	8f 5f       	subi	r24, 0xFF	; 255
    a8e2:	80 93 11 05 	sts	0x0511, r24
    a8e6:	01 cf       	rjmp	.-510    	; 0xa6ea <irCommTasks+0x1300>
								//break;

								resetDebugVariables();				
								break;
							} else {
								if(irCommSyncStateIndexTemp>1) {
    a8e8:	80 91 11 05 	lds	r24, 0x0511
    a8ec:	82 30       	cpi	r24, 0x02	; 2
    a8ee:	08 f0       	brcs	.+2      	; 0xa8f2 <irCommTasks+0x1508>
    a8f0:	81 e0       	ldi	r24, 0x01	; 1
									irCommSyncStateIndexTemp = 1;
									//updateRedLed(0);
								}
								irCommSyncStateTemp[irCommSyncStateIndexTemp] = 7;
    a8f2:	e8 2f       	mov	r30, r24
    a8f4:	f0 e0       	ldi	r31, 0x00	; 0
    a8f6:	e2 58       	subi	r30, 0x82	; 130
    a8f8:	fa 4f       	sbci	r31, 0xFA	; 250
    a8fa:	97 e0       	ldi	r25, 0x07	; 7
    a8fc:	90 83       	st	Z, r25
								irCommSyncStateIndexTemp++;
    a8fe:	8f 5f       	subi	r24, 0xFF	; 255
    a900:	80 93 11 05 	sts	0x0511, r24

								irCommShiftCount = IRCOMM_SAMPLING_WINDOW;
    a904:	84 e1       	ldi	r24, 0x14	; 20
    a906:	80 93 20 05 	sts	0x0520, r24
								irCommRxPeakHighToLow = 0;
    a90a:	10 92 31 05 	sts	0x0531, r1
								irCommRxStartBitDetected = 0;
    a90e:	10 92 30 05 	sts	0x0530, r1
								irCommSecondBitSkipped = 0;
    a912:	10 92 29 05 	sts	0x0529, r1
								irCommShiftCounter = 0;
    a916:	10 92 2a 05 	sts	0x052A, r1
								irCommRxBitCount = 0;	
    a91a:	10 92 26 05 	sts	0x0526, r1
								irCommRxCrc = 0;	
    a91e:	10 92 17 05 	sts	0x0517, r1
								irCommRxByte = 0;
    a922:	10 92 28 05 	sts	0x0528, r1
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
    a926:	84 e0       	ldi	r24, 0x04	; 4
    a928:	80 93 e9 04 	sts	0x04E9, r24
    a92c:	90 e0       	ldi	r25, 0x00	; 0
    a92e:	84 e1       	ldi	r24, 0x14	; 20
    a930:	f2 ce       	rjmp	.-540    	; 0xa716 <irCommTasks+0x132c>
							adcSaveDataTo = SKIP_SAMPLE;
							adcSamplingState = 0;
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;							
							irCommState = IRCOMM_RX_IDLE_STATE;

							if(irCommSyncStateIndexTemp>1) {
    a932:	82 2f       	mov	r24, r18
    a934:	90 e0       	ldi	r25, 0x00	; 0
    a936:	2f 5f       	subi	r18, 0xFF	; 255
    a938:	86 cc       	rjmp	.-1780   	; 0xa246 <irCommTasks+0xe5c>
							resetDebugVariables();				
							break;
						}
					} else {
						if(irCommSwitchCount==2) {
							if(irCommSyncStateIndexTemp>1) {
    a93a:	82 2f       	mov	r24, r18
    a93c:	90 e0       	ldi	r25, 0x00	; 0
    a93e:	2f 5f       	subi	r18, 0xFF	; 255
    a940:	cd ce       	rjmp	.-614    	; 0xa6dc <irCommTasks+0x12f2>
								irCommRxCrc = 0;	
								irCommRxByte = 0;
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
							}
						} else if(irCommSwitchCount==1) {		
							irCommRxStartBitDetected = 1;					
    a942:	c0 92 30 05 	sts	0x0530, r12
							if(irCommRxStartPeakDuration > IRCOMM_SAMPLING_WINDOW/2) {
    a946:	8d 2d       	mov	r24, r13
    a948:	8b 30       	cpi	r24, 0x0B	; 11
    a94a:	08 f4       	brcc	.+2      	; 0xa94e <irCommTasks+0x1564>
    a94c:	56 c0       	rjmp	.+172    	; 0xa9fa <irCommTasks+0x1610>
								if(irCommSyncStateIndexTemp>1) {
    a94e:	80 91 11 05 	lds	r24, 0x0511
    a952:	82 30       	cpi	r24, 0x02	; 2
    a954:	08 f0       	brcs	.+2      	; 0xa958 <irCommTasks+0x156e>
    a956:	81 e0       	ldi	r24, 0x01	; 1
									irCommSyncStateIndexTemp = 1;
									//updateRedLed(0);
								}
								irCommSyncStateTemp[irCommSyncStateIndexTemp] = 4;
    a958:	e8 2f       	mov	r30, r24
    a95a:	f0 e0       	ldi	r31, 0x00	; 0
    a95c:	e2 58       	subi	r30, 0x82	; 130
    a95e:	fa 4f       	sbci	r31, 0xFA	; 250
    a960:	94 e0       	ldi	r25, 0x04	; 4
    a962:	90 83       	st	Z, r25
								irCommSyncStateIndexTemp++;
    a964:	8f 5f       	subi	r24, 0xFF	; 255
    a966:	80 93 11 05 	sts	0x0511, r24

								//irCommShiftCount = irCommShiftCount;
								irCommRxPeakHighToLow = 0;
    a96a:	10 92 31 05 	sts	0x0531, r1
								irCommRxStartBitDetected = 0;
    a96e:	10 92 30 05 	sts	0x0530, r1
								irCommSecondBitSkipped = 0;
    a972:	10 92 29 05 	sts	0x0529, r1
								irCommShiftCounter = 0;
    a976:	10 92 2a 05 	sts	0x052A, r1
								irCommRxBitCount = 0;	
    a97a:	10 92 26 05 	sts	0x0526, r1
								irCommRxCrc = 0;	
    a97e:	10 92 17 05 	sts	0x0517, r1
								irCommRxByte = 0;
    a982:	10 92 28 05 	sts	0x0528, r1
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
    a986:	90 93 e9 04 	sts	0x04E9, r25
    a98a:	8f 2d       	mov	r24, r15
    a98c:	90 e0       	ldi	r25, 0x00	; 0
    a98e:	c3 ce       	rjmp	.-634    	; 0xa716 <irCommTasks+0x132c>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else if(irCommSwitchCount==1) {
							if(irCommSyncStateIndexTemp>1) {
    a990:	80 91 11 05 	lds	r24, 0x0511
    a994:	82 30       	cpi	r24, 0x02	; 2
    a996:	08 f0       	brcs	.+2      	; 0xa99a <irCommTasks+0x15b0>
    a998:	81 e0       	ldi	r24, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 8;
    a99a:	e8 2f       	mov	r30, r24
    a99c:	f0 e0       	ldi	r31, 0x00	; 0
    a99e:	e2 58       	subi	r30, 0x82	; 130
    a9a0:	fa 4f       	sbci	r31, 0xFA	; 250
    a9a2:	98 e0       	ldi	r25, 0x08	; 8
    a9a4:	90 83       	st	Z, r25
							irCommSyncStateIndexTemp++;
    a9a6:	8f 5f       	subi	r24, 0xFF	; 255
    a9a8:	80 93 11 05 	sts	0x0511, r24

							irCommShiftCount = 0;
    a9ac:	10 92 20 05 	sts	0x0520, r1
							irCommRxPeakHighToLow = 0;
    a9b0:	10 92 31 05 	sts	0x0531, r1
							irCommRxStartBitDetected = 0;
    a9b4:	10 92 30 05 	sts	0x0530, r1
							irCommSecondBitSkipped = 0;
    a9b8:	10 92 29 05 	sts	0x0529, r1
							irCommShiftCounter = 0;
    a9bc:	10 92 2a 05 	sts	0x052A, r1
							irCommRxBitCount = 0;	
    a9c0:	10 92 26 05 	sts	0x0526, r1
							irCommRxCrc = 0;	
    a9c4:	10 92 17 05 	sts	0x0517, r1
							irCommRxByte = 0;
    a9c8:	10 92 28 05 	sts	0x0528, r1
							irCommState = IRCOMM_RX_WAITING_BIT;
    a9cc:	85 e0       	ldi	r24, 0x05	; 5
    a9ce:	80 93 e9 04 	sts	0x04E9, r24
    a9d2:	90 e0       	ldi	r25, 0x00	; 0
    a9d4:	80 e0       	ldi	r24, 0x00	; 0
    a9d6:	9f ce       	rjmp	.-706    	; 0xa716 <irCommTasks+0x132c>
								//break;

								resetDebugVariables();
								break;
							} else {
								if(irCommSyncStateIndexTemp>1) {
    a9d8:	80 91 11 05 	lds	r24, 0x0511
    a9dc:	82 30       	cpi	r24, 0x02	; 2
    a9de:	08 f0       	brcs	.+2      	; 0xa9e2 <irCommTasks+0x15f8>
    a9e0:	81 e0       	ldi	r24, 0x01	; 1
									irCommSyncStateIndexTemp = 1;
									//updateRedLed(0);
								}
								irCommSyncStateTemp[irCommSyncStateIndexTemp] = 3;
    a9e2:	e8 2f       	mov	r30, r24
    a9e4:	f0 e0       	ldi	r31, 0x00	; 0
    a9e6:	e2 58       	subi	r30, 0x82	; 130
    a9e8:	fa 4f       	sbci	r31, 0xFA	; 250
    a9ea:	93 e0       	ldi	r25, 0x03	; 3
    a9ec:	90 83       	st	Z, r25
								irCommSyncStateIndexTemp++;
    a9ee:	8f 5f       	subi	r24, 0xFF	; 255
    a9f0:	80 93 11 05 	sts	0x0511, r24

								irCommShiftCount = IRCOMM_SAMPLING_WINDOW + irCommShiftCount;
    a9f4:	8f 2d       	mov	r24, r15
    a9f6:	8c 5e       	subi	r24, 0xEC	; 236
    a9f8:	7a ce       	rjmp	.-780    	; 0xa6ee <irCommTasks+0x1304>
								irCommRxBitCount = 0;	
								irCommRxCrc = 0;	
								irCommRxByte = 0;
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
							} else {
								currentProx = 0;
    a9fa:	10 92 34 02 	sts	0x0234, r1
								adcSaveDataTo = SKIP_SAMPLE;
    a9fe:	85 e0       	ldi	r24, 0x05	; 5
    aa00:	80 93 c9 02 	sts	0x02C9, r24
								adcSamplingState = 0;
    aa04:	10 92 ca 02 	sts	0x02CA, r1
								irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;								
    aa08:	10 92 e8 04 	sts	0x04E8, r1
								irCommState = IRCOMM_RX_IDLE_STATE;
    aa0c:	c0 92 e9 04 	sts	0x04E9, r12

								irCommSyncStateIndexTemp++;
    aa10:	80 91 11 05 	lds	r24, 0x0511
    aa14:	8f 5f       	subi	r24, 0xFF	; 255
    aa16:	80 93 11 05 	sts	0x0511, r24
    aa1a:	8f 2d       	mov	r24, r15
    aa1c:	91 e0       	ldi	r25, 0x01	; 1
    aa1e:	7b ce       	rjmp	.-778    	; 0xa716 <irCommTasks+0x132c>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_WAITING_BIT;
						} else if(irCommSwitchCount==1) {
							if(irCommSyncStateIndexTemp>1) {
    aa20:	80 91 11 05 	lds	r24, 0x0511
    aa24:	82 30       	cpi	r24, 0x02	; 2
    aa26:	08 f0       	brcs	.+2      	; 0xaa2a <irCommTasks+0x1640>
    aa28:	81 e0       	ldi	r24, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 2;
    aa2a:	e8 2f       	mov	r30, r24
    aa2c:	f0 e0       	ldi	r31, 0x00	; 0
    aa2e:	e2 58       	subi	r30, 0x82	; 130
    aa30:	fa 4f       	sbci	r31, 0xFA	; 250
    aa32:	92 e0       	ldi	r25, 0x02	; 2
    aa34:	90 83       	st	Z, r25
							irCommSyncStateIndexTemp++;
    aa36:	8f 5f       	subi	r24, 0xFF	; 255
    aa38:	80 93 11 05 	sts	0x0511, r24

							//irCommShiftCount = irCommShiftCount;
							irCommRxPeakHighToLow = 0;
    aa3c:	10 92 31 05 	sts	0x0531, r1
							irCommRxStartBitDetected = 0;
    aa40:	10 92 30 05 	sts	0x0530, r1
							irCommSecondBitSkipped = 0;
    aa44:	10 92 29 05 	sts	0x0529, r1
							irCommShiftCounter = 0;
    aa48:	10 92 2a 05 	sts	0x052A, r1
							irCommRxBitCount = 0;	
    aa4c:	10 92 26 05 	sts	0x0526, r1
							irCommRxCrc = 0;	
    aa50:	10 92 17 05 	sts	0x0517, r1
							irCommRxByte = 0;
    aa54:	10 92 28 05 	sts	0x0528, r1
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
    aa58:	84 e0       	ldi	r24, 0x04	; 4
    aa5a:	80 93 e9 04 	sts	0x04E9, r24
    aa5e:	8f 2d       	mov	r24, r15
    aa60:	90 e0       	ldi	r25, 0x00	; 0
    aa62:	59 ce       	rjmp	.-846    	; 0xa716 <irCommTasks+0x132c>

				//turnOffGreenLeds();
				if(irCommRxPeakHighToLow==1) {
					if(irCommRxStartBitDetected==1) {
						if(irCommSwitchCount==2) {
							if(irCommSyncStateIndexTemp>1) {
    aa64:	80 91 11 05 	lds	r24, 0x0511
    aa68:	82 30       	cpi	r24, 0x02	; 2
    aa6a:	08 f0       	brcs	.+2      	; 0xaa6e <irCommTasks+0x1684>
    aa6c:	81 e0       	ldi	r24, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 6;
    aa6e:	e8 2f       	mov	r30, r24
    aa70:	f0 e0       	ldi	r31, 0x00	; 0
    aa72:	e2 58       	subi	r30, 0x82	; 130
    aa74:	fa 4f       	sbci	r31, 0xFA	; 250
    aa76:	96 e0       	ldi	r25, 0x06	; 6
    aa78:	95 cf       	rjmp	.-214    	; 0xa9a4 <irCommTasks+0x15ba>

0000aa7a <irCommSendData>:
//	irCommTxSensorMask = sensorMask;
//	irCommEnabledNext = IRCOMM_MODE_TRANSMIT;
//}

void irCommSendData(unsigned char value) {
	irCommTxByte = value;
    aa7a:	80 93 39 05 	sts	0x0539, r24
	irCommTxByteEnqueued = 1;
    aa7e:	81 e0       	ldi	r24, 0x01	; 1
    aa80:	80 93 3a 05 	sts	0x053A, r24
	irCommEnabledNext = IRCOMM_MODE_TRANSMIT;
    aa84:	82 e0       	ldi	r24, 0x02	; 2
    aa86:	80 93 e7 04 	sts	0x04E7, r24
}
    aa8a:	08 95       	ret

0000aa8c <irCommDataSent>:

unsigned char irCommDataSent() {
	if(irCommTxByteEnqueued==1) {
		return 0;
    aa8c:	81 e0       	ldi	r24, 0x01	; 1
    aa8e:	90 91 3a 05 	lds	r25, 0x053A
    aa92:	91 30       	cpi	r25, 0x01	; 1
    aa94:	09 f0       	breq	.+2      	; 0xaa98 <irCommDataSent+0xc>
	} else {
		return 1;
	}
}
    aa96:	08 95       	ret
	irCommEnabledNext = IRCOMM_MODE_TRANSMIT;
}

unsigned char irCommDataSent() {
	if(irCommTxByteEnqueued==1) {
		return 0;
    aa98:	80 e0       	ldi	r24, 0x00	; 0
	} else {
		return 1;
	}
}
    aa9a:	08 95       	ret

0000aa9c <irCommDataAvailable>:

unsigned char irCommDataAvailable() {
	return irCommRxDataAvailable;
}
    aa9c:	80 91 2e 05 	lds	r24, 0x052E
    aaa0:	08 95       	ret

0000aaa2 <irCommReadData>:

unsigned char irCommReadData() {
	irCommRxDataAvailable = 0;
    aaa2:	10 92 2e 05 	sts	0x052E, r1
	return irCommRxLastDataReceived;
}
    aaa6:	80 91 2d 05 	lds	r24, 0x052D
    aaaa:	08 95       	ret

0000aaac <irCommReceivingSensor>:

signed char irCommReceivingSensor() {
	return irCommRxReceivingSensor;
}
    aaac:	80 91 19 02 	lds	r24, 0x0219
    aab0:	08 95       	ret

0000aab2 <getBearing>:

signed int getBearing(unsigned char sensor) {
    aab2:	88 30       	cpi	r24, 0x08	; 8
    aab4:	50 f4       	brcc	.+20     	; 0xaaca <getBearing+0x18>
    aab6:	e8 2f       	mov	r30, r24
    aab8:	f0 e0       	ldi	r31, 0x00	; 0
    aaba:	ee 0f       	add	r30, r30
    aabc:	ff 1f       	adc	r31, r31
    aabe:	e6 5e       	subi	r30, 0xE6	; 230
    aac0:	fd 4f       	sbci	r31, 0xFD	; 253
    aac2:	20 81       	ld	r18, Z
    aac4:	31 81       	ldd	r19, Z+1	; 0x01
		case 7:
			return 45;
		default:
			return -1;
	}
}
    aac6:	c9 01       	movw	r24, r18
    aac8:	08 95       	ret

signed char irCommReceivingSensor() {
	return irCommRxReceivingSensor;
}

signed int getBearing(unsigned char sensor) {
    aaca:	2f ef       	ldi	r18, 0xFF	; 255
    aacc:	3f ef       	ldi	r19, 0xFF	; 255
		case 7:
			return 45;
		default:
			return -1;
	}
}
    aace:	c9 01       	movw	r24, r18
    aad0:	08 95       	ret

0000aad2 <__subsf3>:
    aad2:	50 58       	subi	r21, 0x80	; 128

0000aad4 <__addsf3>:
    aad4:	bb 27       	eor	r27, r27
    aad6:	aa 27       	eor	r26, r26
    aad8:	0e d0       	rcall	.+28     	; 0xaaf6 <__addsf3x>
    aada:	27 c2       	rjmp	.+1102   	; 0xaf2a <__fp_round>
    aadc:	f0 d1       	rcall	.+992    	; 0xaebe <__fp_pscA>
    aade:	30 f0       	brcs	.+12     	; 0xaaec <__addsf3+0x18>
    aae0:	f5 d1       	rcall	.+1002   	; 0xaecc <__fp_pscB>
    aae2:	20 f0       	brcs	.+8      	; 0xaaec <__addsf3+0x18>
    aae4:	31 f4       	brne	.+12     	; 0xaaf2 <__addsf3+0x1e>
    aae6:	9f 3f       	cpi	r25, 0xFF	; 255
    aae8:	11 f4       	brne	.+4      	; 0xaaee <__addsf3+0x1a>
    aaea:	1e f4       	brtc	.+6      	; 0xaaf2 <__addsf3+0x1e>
    aaec:	c0 c1       	rjmp	.+896    	; 0xae6e <__fp_nan>
    aaee:	0e f4       	brtc	.+2      	; 0xaaf2 <__addsf3+0x1e>
    aaf0:	e0 95       	com	r30
    aaf2:	e7 fb       	bst	r30, 7
    aaf4:	b6 c1       	rjmp	.+876    	; 0xae62 <__fp_inf>

0000aaf6 <__addsf3x>:
    aaf6:	e9 2f       	mov	r30, r25
    aaf8:	3a d2       	rcall	.+1140   	; 0xaf6e <__fp_split3>
    aafa:	80 f3       	brcs	.-32     	; 0xaadc <__addsf3+0x8>
    aafc:	ba 17       	cp	r27, r26
    aafe:	62 07       	cpc	r22, r18
    ab00:	73 07       	cpc	r23, r19
    ab02:	84 07       	cpc	r24, r20
    ab04:	95 07       	cpc	r25, r21
    ab06:	18 f0       	brcs	.+6      	; 0xab0e <__addsf3x+0x18>
    ab08:	71 f4       	brne	.+28     	; 0xab26 <__addsf3x+0x30>
    ab0a:	9e f5       	brtc	.+102    	; 0xab72 <__addsf3x+0x7c>
    ab0c:	52 c2       	rjmp	.+1188   	; 0xafb2 <__fp_zero>
    ab0e:	0e f4       	brtc	.+2      	; 0xab12 <__addsf3x+0x1c>
    ab10:	e0 95       	com	r30
    ab12:	0b 2e       	mov	r0, r27
    ab14:	ba 2f       	mov	r27, r26
    ab16:	a0 2d       	mov	r26, r0
    ab18:	0b 01       	movw	r0, r22
    ab1a:	b9 01       	movw	r22, r18
    ab1c:	90 01       	movw	r18, r0
    ab1e:	0c 01       	movw	r0, r24
    ab20:	ca 01       	movw	r24, r20
    ab22:	a0 01       	movw	r20, r0
    ab24:	11 24       	eor	r1, r1
    ab26:	ff 27       	eor	r31, r31
    ab28:	59 1b       	sub	r21, r25
    ab2a:	99 f0       	breq	.+38     	; 0xab52 <__addsf3x+0x5c>
    ab2c:	59 3f       	cpi	r21, 0xF9	; 249
    ab2e:	50 f4       	brcc	.+20     	; 0xab44 <__addsf3x+0x4e>
    ab30:	50 3e       	cpi	r21, 0xE0	; 224
    ab32:	68 f1       	brcs	.+90     	; 0xab8e <__addsf3x+0x98>
    ab34:	1a 16       	cp	r1, r26
    ab36:	f0 40       	sbci	r31, 0x00	; 0
    ab38:	a2 2f       	mov	r26, r18
    ab3a:	23 2f       	mov	r18, r19
    ab3c:	34 2f       	mov	r19, r20
    ab3e:	44 27       	eor	r20, r20
    ab40:	58 5f       	subi	r21, 0xF8	; 248
    ab42:	f3 cf       	rjmp	.-26     	; 0xab2a <__addsf3x+0x34>
    ab44:	46 95       	lsr	r20
    ab46:	37 95       	ror	r19
    ab48:	27 95       	ror	r18
    ab4a:	a7 95       	ror	r26
    ab4c:	f0 40       	sbci	r31, 0x00	; 0
    ab4e:	53 95       	inc	r21
    ab50:	c9 f7       	brne	.-14     	; 0xab44 <__addsf3x+0x4e>
    ab52:	7e f4       	brtc	.+30     	; 0xab72 <__addsf3x+0x7c>
    ab54:	1f 16       	cp	r1, r31
    ab56:	ba 0b       	sbc	r27, r26
    ab58:	62 0b       	sbc	r22, r18
    ab5a:	73 0b       	sbc	r23, r19
    ab5c:	84 0b       	sbc	r24, r20
    ab5e:	ba f0       	brmi	.+46     	; 0xab8e <__addsf3x+0x98>
    ab60:	91 50       	subi	r25, 0x01	; 1
    ab62:	a1 f0       	breq	.+40     	; 0xab8c <__addsf3x+0x96>
    ab64:	ff 0f       	add	r31, r31
    ab66:	bb 1f       	adc	r27, r27
    ab68:	66 1f       	adc	r22, r22
    ab6a:	77 1f       	adc	r23, r23
    ab6c:	88 1f       	adc	r24, r24
    ab6e:	c2 f7       	brpl	.-16     	; 0xab60 <__addsf3x+0x6a>
    ab70:	0e c0       	rjmp	.+28     	; 0xab8e <__addsf3x+0x98>
    ab72:	ba 0f       	add	r27, r26
    ab74:	62 1f       	adc	r22, r18
    ab76:	73 1f       	adc	r23, r19
    ab78:	84 1f       	adc	r24, r20
    ab7a:	48 f4       	brcc	.+18     	; 0xab8e <__addsf3x+0x98>
    ab7c:	87 95       	ror	r24
    ab7e:	77 95       	ror	r23
    ab80:	67 95       	ror	r22
    ab82:	b7 95       	ror	r27
    ab84:	f7 95       	ror	r31
    ab86:	9e 3f       	cpi	r25, 0xFE	; 254
    ab88:	08 f0       	brcs	.+2      	; 0xab8c <__addsf3x+0x96>
    ab8a:	b3 cf       	rjmp	.-154    	; 0xaaf2 <__addsf3+0x1e>
    ab8c:	93 95       	inc	r25
    ab8e:	88 0f       	add	r24, r24
    ab90:	08 f0       	brcs	.+2      	; 0xab94 <__addsf3x+0x9e>
    ab92:	99 27       	eor	r25, r25
    ab94:	ee 0f       	add	r30, r30
    ab96:	97 95       	ror	r25
    ab98:	87 95       	ror	r24
    ab9a:	08 95       	ret
    ab9c:	90 d1       	rcall	.+800    	; 0xaebe <__fp_pscA>
    ab9e:	58 f0       	brcs	.+22     	; 0xabb6 <__addsf3x+0xc0>
    aba0:	80 e8       	ldi	r24, 0x80	; 128
    aba2:	91 e0       	ldi	r25, 0x01	; 1
    aba4:	09 f4       	brne	.+2      	; 0xaba8 <__addsf3x+0xb2>
    aba6:	9e ef       	ldi	r25, 0xFE	; 254
    aba8:	91 d1       	rcall	.+802    	; 0xaecc <__fp_pscB>
    abaa:	28 f0       	brcs	.+10     	; 0xabb6 <__addsf3x+0xc0>
    abac:	40 e8       	ldi	r20, 0x80	; 128
    abae:	51 e0       	ldi	r21, 0x01	; 1
    abb0:	59 f4       	brne	.+22     	; 0xabc8 <atan2+0xe>
    abb2:	5e ef       	ldi	r21, 0xFE	; 254
    abb4:	09 c0       	rjmp	.+18     	; 0xabc8 <atan2+0xe>
    abb6:	5b c1       	rjmp	.+694    	; 0xae6e <__fp_nan>
    abb8:	fc c1       	rjmp	.+1016   	; 0xafb2 <__fp_zero>

0000abba <atan2>:
    abba:	e9 2f       	mov	r30, r25
    abbc:	e0 78       	andi	r30, 0x80	; 128
    abbe:	d7 d1       	rcall	.+942    	; 0xaf6e <__fp_split3>
    abc0:	68 f3       	brcs	.-38     	; 0xab9c <__addsf3x+0xa6>
    abc2:	09 2e       	mov	r0, r25
    abc4:	05 2a       	or	r0, r21
    abc6:	c1 f3       	breq	.-16     	; 0xabb8 <__addsf3x+0xc2>
    abc8:	26 17       	cp	r18, r22
    abca:	37 07       	cpc	r19, r23
    abcc:	48 07       	cpc	r20, r24
    abce:	59 07       	cpc	r21, r25
    abd0:	38 f0       	brcs	.+14     	; 0xabe0 <atan2+0x26>
    abd2:	0e 2e       	mov	r0, r30
    abd4:	07 f8       	bld	r0, 7
    abd6:	e0 25       	eor	r30, r0
    abd8:	69 f0       	breq	.+26     	; 0xabf4 <atan2+0x3a>
    abda:	e0 25       	eor	r30, r0
    abdc:	e0 64       	ori	r30, 0x40	; 64
    abde:	0a c0       	rjmp	.+20     	; 0xabf4 <atan2+0x3a>
    abe0:	ef 63       	ori	r30, 0x3F	; 63
    abe2:	07 f8       	bld	r0, 7
    abe4:	00 94       	com	r0
    abe6:	07 fa       	bst	r0, 7
    abe8:	db 01       	movw	r26, r22
    abea:	b9 01       	movw	r22, r18
    abec:	9d 01       	movw	r18, r26
    abee:	dc 01       	movw	r26, r24
    abf0:	ca 01       	movw	r24, r20
    abf2:	ad 01       	movw	r20, r26
    abf4:	ef 93       	push	r30
    abf6:	4a d0       	rcall	.+148    	; 0xac8c <__divsf3_pse>
    abf8:	98 d1       	rcall	.+816    	; 0xaf2a <__fp_round>
    abfa:	0a d0       	rcall	.+20     	; 0xac10 <atan>
    abfc:	5f 91       	pop	r21
    abfe:	55 23       	and	r21, r21
    ac00:	31 f0       	breq	.+12     	; 0xac0e <atan2+0x54>
    ac02:	2b ed       	ldi	r18, 0xDB	; 219
    ac04:	3f e0       	ldi	r19, 0x0F	; 15
    ac06:	49 e4       	ldi	r20, 0x49	; 73
    ac08:	50 fd       	sbrc	r21, 0
    ac0a:	49 ec       	ldi	r20, 0xC9	; 201
    ac0c:	63 cf       	rjmp	.-314    	; 0xaad4 <__addsf3>
    ac0e:	08 95       	ret

0000ac10 <atan>:
    ac10:	df 93       	push	r29
    ac12:	dd 27       	eor	r29, r29
    ac14:	b9 2f       	mov	r27, r25
    ac16:	bf 77       	andi	r27, 0x7F	; 127
    ac18:	40 e8       	ldi	r20, 0x80	; 128
    ac1a:	5f e3       	ldi	r21, 0x3F	; 63
    ac1c:	16 16       	cp	r1, r22
    ac1e:	17 06       	cpc	r1, r23
    ac20:	48 07       	cpc	r20, r24
    ac22:	5b 07       	cpc	r21, r27
    ac24:	10 f4       	brcc	.+4      	; 0xac2a <atan+0x1a>
    ac26:	d9 2f       	mov	r29, r25
    ac28:	cf d1       	rcall	.+926    	; 0xafc8 <inverse>
    ac2a:	9f 93       	push	r25
    ac2c:	8f 93       	push	r24
    ac2e:	7f 93       	push	r23
    ac30:	6f 93       	push	r22
    ac32:	3a d2       	rcall	.+1140   	; 0xb0a8 <square>
    ac34:	ee e4       	ldi	r30, 0x4E	; 78
    ac36:	f1 e0       	ldi	r31, 0x01	; 1
    ac38:	1d d1       	rcall	.+570    	; 0xae74 <__fp_powser>
    ac3a:	77 d1       	rcall	.+750    	; 0xaf2a <__fp_round>
    ac3c:	2f 91       	pop	r18
    ac3e:	3f 91       	pop	r19
    ac40:	4f 91       	pop	r20
    ac42:	5f 91       	pop	r21
    ac44:	d4 d1       	rcall	.+936    	; 0xafee <__mulsf3x>
    ac46:	dd 23       	and	r29, r29
    ac48:	49 f0       	breq	.+18     	; 0xac5c <atan+0x4c>
    ac4a:	90 58       	subi	r25, 0x80	; 128
    ac4c:	a2 ea       	ldi	r26, 0xA2	; 162
    ac4e:	2a ed       	ldi	r18, 0xDA	; 218
    ac50:	3f e0       	ldi	r19, 0x0F	; 15
    ac52:	49 ec       	ldi	r20, 0xC9	; 201
    ac54:	5f e3       	ldi	r21, 0x3F	; 63
    ac56:	d0 78       	andi	r29, 0x80	; 128
    ac58:	5d 27       	eor	r21, r29
    ac5a:	4d df       	rcall	.-358    	; 0xaaf6 <__addsf3x>
    ac5c:	df 91       	pop	r29
    ac5e:	65 c1       	rjmp	.+714    	; 0xaf2a <__fp_round>

0000ac60 <__cmpsf2>:
    ac60:	dc d0       	rcall	.+440    	; 0xae1a <__fp_cmp>
    ac62:	08 f4       	brcc	.+2      	; 0xac66 <__cmpsf2+0x6>
    ac64:	81 e0       	ldi	r24, 0x01	; 1
    ac66:	08 95       	ret

0000ac68 <cos>:
    ac68:	39 d1       	rcall	.+626    	; 0xaedc <__fp_rempio2>
    ac6a:	e3 95       	inc	r30
    ac6c:	6f c1       	rjmp	.+734    	; 0xaf4c <__fp_sinus>

0000ac6e <__divsf3>:
    ac6e:	0c d0       	rcall	.+24     	; 0xac88 <__divsf3x>
    ac70:	5c c1       	rjmp	.+696    	; 0xaf2a <__fp_round>
    ac72:	2c d1       	rcall	.+600    	; 0xaecc <__fp_pscB>
    ac74:	40 f0       	brcs	.+16     	; 0xac86 <__divsf3+0x18>
    ac76:	23 d1       	rcall	.+582    	; 0xaebe <__fp_pscA>
    ac78:	30 f0       	brcs	.+12     	; 0xac86 <__divsf3+0x18>
    ac7a:	21 f4       	brne	.+8      	; 0xac84 <__divsf3+0x16>
    ac7c:	5f 3f       	cpi	r21, 0xFF	; 255
    ac7e:	19 f0       	breq	.+6      	; 0xac86 <__divsf3+0x18>
    ac80:	f0 c0       	rjmp	.+480    	; 0xae62 <__fp_inf>
    ac82:	51 11       	cpse	r21, r1
    ac84:	97 c1       	rjmp	.+814    	; 0xafb4 <__fp_szero>
    ac86:	f3 c0       	rjmp	.+486    	; 0xae6e <__fp_nan>

0000ac88 <__divsf3x>:
    ac88:	72 d1       	rcall	.+740    	; 0xaf6e <__fp_split3>
    ac8a:	98 f3       	brcs	.-26     	; 0xac72 <__divsf3+0x4>

0000ac8c <__divsf3_pse>:
    ac8c:	99 23       	and	r25, r25
    ac8e:	c9 f3       	breq	.-14     	; 0xac82 <__divsf3+0x14>
    ac90:	55 23       	and	r21, r21
    ac92:	b1 f3       	breq	.-20     	; 0xac80 <__divsf3+0x12>
    ac94:	95 1b       	sub	r25, r21
    ac96:	55 0b       	sbc	r21, r21
    ac98:	bb 27       	eor	r27, r27
    ac9a:	aa 27       	eor	r26, r26
    ac9c:	62 17       	cp	r22, r18
    ac9e:	73 07       	cpc	r23, r19
    aca0:	84 07       	cpc	r24, r20
    aca2:	38 f0       	brcs	.+14     	; 0xacb2 <__divsf3_pse+0x26>
    aca4:	9f 5f       	subi	r25, 0xFF	; 255
    aca6:	5f 4f       	sbci	r21, 0xFF	; 255
    aca8:	22 0f       	add	r18, r18
    acaa:	33 1f       	adc	r19, r19
    acac:	44 1f       	adc	r20, r20
    acae:	aa 1f       	adc	r26, r26
    acb0:	a9 f3       	breq	.-22     	; 0xac9c <__divsf3_pse+0x10>
    acb2:	33 d0       	rcall	.+102    	; 0xad1a <__divsf3_pse+0x8e>
    acb4:	0e 2e       	mov	r0, r30
    acb6:	3a f0       	brmi	.+14     	; 0xacc6 <__divsf3_pse+0x3a>
    acb8:	e0 e8       	ldi	r30, 0x80	; 128
    acba:	30 d0       	rcall	.+96     	; 0xad1c <__divsf3_pse+0x90>
    acbc:	91 50       	subi	r25, 0x01	; 1
    acbe:	50 40       	sbci	r21, 0x00	; 0
    acc0:	e6 95       	lsr	r30
    acc2:	00 1c       	adc	r0, r0
    acc4:	ca f7       	brpl	.-14     	; 0xacb8 <__divsf3_pse+0x2c>
    acc6:	29 d0       	rcall	.+82     	; 0xad1a <__divsf3_pse+0x8e>
    acc8:	fe 2f       	mov	r31, r30
    acca:	27 d0       	rcall	.+78     	; 0xad1a <__divsf3_pse+0x8e>
    accc:	66 0f       	add	r22, r22
    acce:	77 1f       	adc	r23, r23
    acd0:	88 1f       	adc	r24, r24
    acd2:	bb 1f       	adc	r27, r27
    acd4:	26 17       	cp	r18, r22
    acd6:	37 07       	cpc	r19, r23
    acd8:	48 07       	cpc	r20, r24
    acda:	ab 07       	cpc	r26, r27
    acdc:	b0 e8       	ldi	r27, 0x80	; 128
    acde:	09 f0       	breq	.+2      	; 0xace2 <__divsf3_pse+0x56>
    ace0:	bb 0b       	sbc	r27, r27
    ace2:	80 2d       	mov	r24, r0
    ace4:	bf 01       	movw	r22, r30
    ace6:	ff 27       	eor	r31, r31
    ace8:	93 58       	subi	r25, 0x83	; 131
    acea:	5f 4f       	sbci	r21, 0xFF	; 255
    acec:	2a f0       	brmi	.+10     	; 0xacf8 <__divsf3_pse+0x6c>
    acee:	9e 3f       	cpi	r25, 0xFE	; 254
    acf0:	51 05       	cpc	r21, r1
    acf2:	68 f0       	brcs	.+26     	; 0xad0e <__divsf3_pse+0x82>
    acf4:	b6 c0       	rjmp	.+364    	; 0xae62 <__fp_inf>
    acf6:	5e c1       	rjmp	.+700    	; 0xafb4 <__fp_szero>
    acf8:	5f 3f       	cpi	r21, 0xFF	; 255
    acfa:	ec f3       	brlt	.-6      	; 0xacf6 <__divsf3_pse+0x6a>
    acfc:	98 3e       	cpi	r25, 0xE8	; 232
    acfe:	dc f3       	brlt	.-10     	; 0xacf6 <__divsf3_pse+0x6a>
    ad00:	86 95       	lsr	r24
    ad02:	77 95       	ror	r23
    ad04:	67 95       	ror	r22
    ad06:	b7 95       	ror	r27
    ad08:	f7 95       	ror	r31
    ad0a:	9f 5f       	subi	r25, 0xFF	; 255
    ad0c:	c9 f7       	brne	.-14     	; 0xad00 <__divsf3_pse+0x74>
    ad0e:	88 0f       	add	r24, r24
    ad10:	91 1d       	adc	r25, r1
    ad12:	96 95       	lsr	r25
    ad14:	87 95       	ror	r24
    ad16:	97 f9       	bld	r25, 7
    ad18:	08 95       	ret
    ad1a:	e1 e0       	ldi	r30, 0x01	; 1
    ad1c:	66 0f       	add	r22, r22
    ad1e:	77 1f       	adc	r23, r23
    ad20:	88 1f       	adc	r24, r24
    ad22:	bb 1f       	adc	r27, r27
    ad24:	62 17       	cp	r22, r18
    ad26:	73 07       	cpc	r23, r19
    ad28:	84 07       	cpc	r24, r20
    ad2a:	ba 07       	cpc	r27, r26
    ad2c:	20 f0       	brcs	.+8      	; 0xad36 <__divsf3_pse+0xaa>
    ad2e:	62 1b       	sub	r22, r18
    ad30:	73 0b       	sbc	r23, r19
    ad32:	84 0b       	sbc	r24, r20
    ad34:	ba 0b       	sbc	r27, r26
    ad36:	ee 1f       	adc	r30, r30
    ad38:	88 f7       	brcc	.-30     	; 0xad1c <__divsf3_pse+0x90>
    ad3a:	e0 95       	com	r30
    ad3c:	08 95       	ret

0000ad3e <__fixsfsi>:
    ad3e:	04 d0       	rcall	.+8      	; 0xad48 <__fixunssfsi>
    ad40:	68 94       	set
    ad42:	b1 11       	cpse	r27, r1
    ad44:	37 c1       	rjmp	.+622    	; 0xafb4 <__fp_szero>
    ad46:	08 95       	ret

0000ad48 <__fixunssfsi>:
    ad48:	1a d1       	rcall	.+564    	; 0xaf7e <__fp_splitA>
    ad4a:	88 f0       	brcs	.+34     	; 0xad6e <__fixunssfsi+0x26>
    ad4c:	9f 57       	subi	r25, 0x7F	; 127
    ad4e:	90 f0       	brcs	.+36     	; 0xad74 <__fixunssfsi+0x2c>
    ad50:	b9 2f       	mov	r27, r25
    ad52:	99 27       	eor	r25, r25
    ad54:	b7 51       	subi	r27, 0x17	; 23
    ad56:	a0 f0       	brcs	.+40     	; 0xad80 <__fixunssfsi+0x38>
    ad58:	d1 f0       	breq	.+52     	; 0xad8e <__fixunssfsi+0x46>
    ad5a:	66 0f       	add	r22, r22
    ad5c:	77 1f       	adc	r23, r23
    ad5e:	88 1f       	adc	r24, r24
    ad60:	99 1f       	adc	r25, r25
    ad62:	1a f0       	brmi	.+6      	; 0xad6a <__fixunssfsi+0x22>
    ad64:	ba 95       	dec	r27
    ad66:	c9 f7       	brne	.-14     	; 0xad5a <__fixunssfsi+0x12>
    ad68:	12 c0       	rjmp	.+36     	; 0xad8e <__fixunssfsi+0x46>
    ad6a:	b1 30       	cpi	r27, 0x01	; 1
    ad6c:	81 f0       	breq	.+32     	; 0xad8e <__fixunssfsi+0x46>
    ad6e:	21 d1       	rcall	.+578    	; 0xafb2 <__fp_zero>
    ad70:	b1 e0       	ldi	r27, 0x01	; 1
    ad72:	08 95       	ret
    ad74:	1e c1       	rjmp	.+572    	; 0xafb2 <__fp_zero>
    ad76:	67 2f       	mov	r22, r23
    ad78:	78 2f       	mov	r23, r24
    ad7a:	88 27       	eor	r24, r24
    ad7c:	b8 5f       	subi	r27, 0xF8	; 248
    ad7e:	39 f0       	breq	.+14     	; 0xad8e <__fixunssfsi+0x46>
    ad80:	b9 3f       	cpi	r27, 0xF9	; 249
    ad82:	cc f3       	brlt	.-14     	; 0xad76 <__fixunssfsi+0x2e>
    ad84:	86 95       	lsr	r24
    ad86:	77 95       	ror	r23
    ad88:	67 95       	ror	r22
    ad8a:	b3 95       	inc	r27
    ad8c:	d9 f7       	brne	.-10     	; 0xad84 <__fixunssfsi+0x3c>
    ad8e:	3e f4       	brtc	.+14     	; 0xad9e <__fixunssfsi+0x56>
    ad90:	90 95       	com	r25
    ad92:	80 95       	com	r24
    ad94:	70 95       	com	r23
    ad96:	61 95       	neg	r22
    ad98:	7f 4f       	sbci	r23, 0xFF	; 255
    ad9a:	8f 4f       	sbci	r24, 0xFF	; 255
    ad9c:	9f 4f       	sbci	r25, 0xFF	; 255
    ad9e:	08 95       	ret

0000ada0 <__floatunsisf>:
    ada0:	e8 94       	clt
    ada2:	09 c0       	rjmp	.+18     	; 0xadb6 <__floatsisf+0x12>

0000ada4 <__floatsisf>:
    ada4:	97 fb       	bst	r25, 7
    ada6:	3e f4       	brtc	.+14     	; 0xadb6 <__floatsisf+0x12>
    ada8:	90 95       	com	r25
    adaa:	80 95       	com	r24
    adac:	70 95       	com	r23
    adae:	61 95       	neg	r22
    adb0:	7f 4f       	sbci	r23, 0xFF	; 255
    adb2:	8f 4f       	sbci	r24, 0xFF	; 255
    adb4:	9f 4f       	sbci	r25, 0xFF	; 255
    adb6:	99 23       	and	r25, r25
    adb8:	a9 f0       	breq	.+42     	; 0xade4 <__floatsisf+0x40>
    adba:	f9 2f       	mov	r31, r25
    adbc:	96 e9       	ldi	r25, 0x96	; 150
    adbe:	bb 27       	eor	r27, r27
    adc0:	93 95       	inc	r25
    adc2:	f6 95       	lsr	r31
    adc4:	87 95       	ror	r24
    adc6:	77 95       	ror	r23
    adc8:	67 95       	ror	r22
    adca:	b7 95       	ror	r27
    adcc:	f1 11       	cpse	r31, r1
    adce:	f8 cf       	rjmp	.-16     	; 0xadc0 <__floatsisf+0x1c>
    add0:	fa f4       	brpl	.+62     	; 0xae10 <__floatsisf+0x6c>
    add2:	bb 0f       	add	r27, r27
    add4:	11 f4       	brne	.+4      	; 0xadda <__floatsisf+0x36>
    add6:	60 ff       	sbrs	r22, 0
    add8:	1b c0       	rjmp	.+54     	; 0xae10 <__floatsisf+0x6c>
    adda:	6f 5f       	subi	r22, 0xFF	; 255
    addc:	7f 4f       	sbci	r23, 0xFF	; 255
    adde:	8f 4f       	sbci	r24, 0xFF	; 255
    ade0:	9f 4f       	sbci	r25, 0xFF	; 255
    ade2:	16 c0       	rjmp	.+44     	; 0xae10 <__floatsisf+0x6c>
    ade4:	88 23       	and	r24, r24
    ade6:	11 f0       	breq	.+4      	; 0xadec <__floatsisf+0x48>
    ade8:	96 e9       	ldi	r25, 0x96	; 150
    adea:	11 c0       	rjmp	.+34     	; 0xae0e <__floatsisf+0x6a>
    adec:	77 23       	and	r23, r23
    adee:	21 f0       	breq	.+8      	; 0xadf8 <__floatsisf+0x54>
    adf0:	9e e8       	ldi	r25, 0x8E	; 142
    adf2:	87 2f       	mov	r24, r23
    adf4:	76 2f       	mov	r23, r22
    adf6:	05 c0       	rjmp	.+10     	; 0xae02 <__floatsisf+0x5e>
    adf8:	66 23       	and	r22, r22
    adfa:	71 f0       	breq	.+28     	; 0xae18 <__floatsisf+0x74>
    adfc:	96 e8       	ldi	r25, 0x86	; 134
    adfe:	86 2f       	mov	r24, r22
    ae00:	70 e0       	ldi	r23, 0x00	; 0
    ae02:	60 e0       	ldi	r22, 0x00	; 0
    ae04:	2a f0       	brmi	.+10     	; 0xae10 <__floatsisf+0x6c>
    ae06:	9a 95       	dec	r25
    ae08:	66 0f       	add	r22, r22
    ae0a:	77 1f       	adc	r23, r23
    ae0c:	88 1f       	adc	r24, r24
    ae0e:	da f7       	brpl	.-10     	; 0xae06 <__floatsisf+0x62>
    ae10:	88 0f       	add	r24, r24
    ae12:	96 95       	lsr	r25
    ae14:	87 95       	ror	r24
    ae16:	97 f9       	bld	r25, 7
    ae18:	08 95       	ret

0000ae1a <__fp_cmp>:
    ae1a:	99 0f       	add	r25, r25
    ae1c:	00 08       	sbc	r0, r0
    ae1e:	55 0f       	add	r21, r21
    ae20:	aa 0b       	sbc	r26, r26
    ae22:	e0 e8       	ldi	r30, 0x80	; 128
    ae24:	fe ef       	ldi	r31, 0xFE	; 254
    ae26:	16 16       	cp	r1, r22
    ae28:	17 06       	cpc	r1, r23
    ae2a:	e8 07       	cpc	r30, r24
    ae2c:	f9 07       	cpc	r31, r25
    ae2e:	c0 f0       	brcs	.+48     	; 0xae60 <__fp_cmp+0x46>
    ae30:	12 16       	cp	r1, r18
    ae32:	13 06       	cpc	r1, r19
    ae34:	e4 07       	cpc	r30, r20
    ae36:	f5 07       	cpc	r31, r21
    ae38:	98 f0       	brcs	.+38     	; 0xae60 <__fp_cmp+0x46>
    ae3a:	62 1b       	sub	r22, r18
    ae3c:	73 0b       	sbc	r23, r19
    ae3e:	84 0b       	sbc	r24, r20
    ae40:	95 0b       	sbc	r25, r21
    ae42:	39 f4       	brne	.+14     	; 0xae52 <__fp_cmp+0x38>
    ae44:	0a 26       	eor	r0, r26
    ae46:	61 f0       	breq	.+24     	; 0xae60 <__fp_cmp+0x46>
    ae48:	23 2b       	or	r18, r19
    ae4a:	24 2b       	or	r18, r20
    ae4c:	25 2b       	or	r18, r21
    ae4e:	21 f4       	brne	.+8      	; 0xae58 <__fp_cmp+0x3e>
    ae50:	08 95       	ret
    ae52:	0a 26       	eor	r0, r26
    ae54:	09 f4       	brne	.+2      	; 0xae58 <__fp_cmp+0x3e>
    ae56:	a1 40       	sbci	r26, 0x01	; 1
    ae58:	a6 95       	lsr	r26
    ae5a:	8f ef       	ldi	r24, 0xFF	; 255
    ae5c:	81 1d       	adc	r24, r1
    ae5e:	81 1d       	adc	r24, r1
    ae60:	08 95       	ret

0000ae62 <__fp_inf>:
    ae62:	97 f9       	bld	r25, 7
    ae64:	9f 67       	ori	r25, 0x7F	; 127
    ae66:	80 e8       	ldi	r24, 0x80	; 128
    ae68:	70 e0       	ldi	r23, 0x00	; 0
    ae6a:	60 e0       	ldi	r22, 0x00	; 0
    ae6c:	08 95       	ret

0000ae6e <__fp_nan>:
    ae6e:	9f ef       	ldi	r25, 0xFF	; 255
    ae70:	80 ec       	ldi	r24, 0xC0	; 192
    ae72:	08 95       	ret

0000ae74 <__fp_powser>:
    ae74:	df 93       	push	r29
    ae76:	cf 93       	push	r28
    ae78:	1f 93       	push	r17
    ae7a:	0f 93       	push	r16
    ae7c:	ff 92       	push	r15
    ae7e:	ef 92       	push	r14
    ae80:	df 92       	push	r13
    ae82:	7b 01       	movw	r14, r22
    ae84:	8c 01       	movw	r16, r24
    ae86:	68 94       	set
    ae88:	05 c0       	rjmp	.+10     	; 0xae94 <__fp_powser+0x20>
    ae8a:	da 2e       	mov	r13, r26
    ae8c:	ef 01       	movw	r28, r30
    ae8e:	af d0       	rcall	.+350    	; 0xafee <__mulsf3x>
    ae90:	fe 01       	movw	r30, r28
    ae92:	e8 94       	clt
    ae94:	a5 91       	lpm	r26, Z+
    ae96:	25 91       	lpm	r18, Z+
    ae98:	35 91       	lpm	r19, Z+
    ae9a:	45 91       	lpm	r20, Z+
    ae9c:	55 91       	lpm	r21, Z+
    ae9e:	ae f3       	brts	.-22     	; 0xae8a <__fp_powser+0x16>
    aea0:	ef 01       	movw	r28, r30
    aea2:	29 de       	rcall	.-942    	; 0xaaf6 <__addsf3x>
    aea4:	fe 01       	movw	r30, r28
    aea6:	97 01       	movw	r18, r14
    aea8:	a8 01       	movw	r20, r16
    aeaa:	da 94       	dec	r13
    aeac:	79 f7       	brne	.-34     	; 0xae8c <__fp_powser+0x18>
    aeae:	df 90       	pop	r13
    aeb0:	ef 90       	pop	r14
    aeb2:	ff 90       	pop	r15
    aeb4:	0f 91       	pop	r16
    aeb6:	1f 91       	pop	r17
    aeb8:	cf 91       	pop	r28
    aeba:	df 91       	pop	r29
    aebc:	08 95       	ret

0000aebe <__fp_pscA>:
    aebe:	00 24       	eor	r0, r0
    aec0:	0a 94       	dec	r0
    aec2:	16 16       	cp	r1, r22
    aec4:	17 06       	cpc	r1, r23
    aec6:	18 06       	cpc	r1, r24
    aec8:	09 06       	cpc	r0, r25
    aeca:	08 95       	ret

0000aecc <__fp_pscB>:
    aecc:	00 24       	eor	r0, r0
    aece:	0a 94       	dec	r0
    aed0:	12 16       	cp	r1, r18
    aed2:	13 06       	cpc	r1, r19
    aed4:	14 06       	cpc	r1, r20
    aed6:	05 06       	cpc	r0, r21
    aed8:	08 95       	ret
    aeda:	c9 cf       	rjmp	.-110    	; 0xae6e <__fp_nan>

0000aedc <__fp_rempio2>:
    aedc:	50 d0       	rcall	.+160    	; 0xaf7e <__fp_splitA>
    aede:	e8 f3       	brcs	.-6      	; 0xaeda <__fp_pscB+0xe>
    aee0:	e8 94       	clt
    aee2:	e0 e0       	ldi	r30, 0x00	; 0
    aee4:	bb 27       	eor	r27, r27
    aee6:	9f 57       	subi	r25, 0x7F	; 127
    aee8:	f0 f0       	brcs	.+60     	; 0xaf26 <__fp_rempio2+0x4a>
    aeea:	2a ed       	ldi	r18, 0xDA	; 218
    aeec:	3f e0       	ldi	r19, 0x0F	; 15
    aeee:	49 ec       	ldi	r20, 0xC9	; 201
    aef0:	06 c0       	rjmp	.+12     	; 0xaefe <__fp_rempio2+0x22>
    aef2:	ee 0f       	add	r30, r30
    aef4:	bb 0f       	add	r27, r27
    aef6:	66 1f       	adc	r22, r22
    aef8:	77 1f       	adc	r23, r23
    aefa:	88 1f       	adc	r24, r24
    aefc:	28 f0       	brcs	.+10     	; 0xaf08 <__fp_rempio2+0x2c>
    aefe:	b2 3a       	cpi	r27, 0xA2	; 162
    af00:	62 07       	cpc	r22, r18
    af02:	73 07       	cpc	r23, r19
    af04:	84 07       	cpc	r24, r20
    af06:	28 f0       	brcs	.+10     	; 0xaf12 <__fp_rempio2+0x36>
    af08:	b2 5a       	subi	r27, 0xA2	; 162
    af0a:	62 0b       	sbc	r22, r18
    af0c:	73 0b       	sbc	r23, r19
    af0e:	84 0b       	sbc	r24, r20
    af10:	e3 95       	inc	r30
    af12:	9a 95       	dec	r25
    af14:	72 f7       	brpl	.-36     	; 0xaef2 <__fp_rempio2+0x16>
    af16:	80 38       	cpi	r24, 0x80	; 128
    af18:	30 f4       	brcc	.+12     	; 0xaf26 <__fp_rempio2+0x4a>
    af1a:	9a 95       	dec	r25
    af1c:	bb 0f       	add	r27, r27
    af1e:	66 1f       	adc	r22, r22
    af20:	77 1f       	adc	r23, r23
    af22:	88 1f       	adc	r24, r24
    af24:	d2 f7       	brpl	.-12     	; 0xaf1a <__fp_rempio2+0x3e>
    af26:	90 48       	sbci	r25, 0x80	; 128
    af28:	c4 c0       	rjmp	.+392    	; 0xb0b2 <__fp_mpack_finite>

0000af2a <__fp_round>:
    af2a:	09 2e       	mov	r0, r25
    af2c:	03 94       	inc	r0
    af2e:	00 0c       	add	r0, r0
    af30:	11 f4       	brne	.+4      	; 0xaf36 <__fp_round+0xc>
    af32:	88 23       	and	r24, r24
    af34:	52 f0       	brmi	.+20     	; 0xaf4a <__fp_round+0x20>
    af36:	bb 0f       	add	r27, r27
    af38:	40 f4       	brcc	.+16     	; 0xaf4a <__fp_round+0x20>
    af3a:	bf 2b       	or	r27, r31
    af3c:	11 f4       	brne	.+4      	; 0xaf42 <__fp_round+0x18>
    af3e:	60 ff       	sbrs	r22, 0
    af40:	04 c0       	rjmp	.+8      	; 0xaf4a <__fp_round+0x20>
    af42:	6f 5f       	subi	r22, 0xFF	; 255
    af44:	7f 4f       	sbci	r23, 0xFF	; 255
    af46:	8f 4f       	sbci	r24, 0xFF	; 255
    af48:	9f 4f       	sbci	r25, 0xFF	; 255
    af4a:	08 95       	ret

0000af4c <__fp_sinus>:
    af4c:	ef 93       	push	r30
    af4e:	e0 ff       	sbrs	r30, 0
    af50:	06 c0       	rjmp	.+12     	; 0xaf5e <__fp_sinus+0x12>
    af52:	a2 ea       	ldi	r26, 0xA2	; 162
    af54:	2a ed       	ldi	r18, 0xDA	; 218
    af56:	3f e0       	ldi	r19, 0x0F	; 15
    af58:	49 ec       	ldi	r20, 0xC9	; 201
    af5a:	5f eb       	ldi	r21, 0xBF	; 191
    af5c:	cc dd       	rcall	.-1128   	; 0xaaf6 <__addsf3x>
    af5e:	e5 df       	rcall	.-54     	; 0xaf2a <__fp_round>
    af60:	0f 90       	pop	r0
    af62:	03 94       	inc	r0
    af64:	01 fc       	sbrc	r0, 1
    af66:	90 58       	subi	r25, 0x80	; 128
    af68:	eb e7       	ldi	r30, 0x7B	; 123
    af6a:	f1 e0       	ldi	r31, 0x01	; 1
    af6c:	ae c0       	rjmp	.+348    	; 0xb0ca <__fp_powsodd>

0000af6e <__fp_split3>:
    af6e:	57 fd       	sbrc	r21, 7
    af70:	90 58       	subi	r25, 0x80	; 128
    af72:	44 0f       	add	r20, r20
    af74:	55 1f       	adc	r21, r21
    af76:	59 f0       	breq	.+22     	; 0xaf8e <__fp_splitA+0x10>
    af78:	5f 3f       	cpi	r21, 0xFF	; 255
    af7a:	71 f0       	breq	.+28     	; 0xaf98 <__fp_splitA+0x1a>
    af7c:	47 95       	ror	r20

0000af7e <__fp_splitA>:
    af7e:	88 0f       	add	r24, r24
    af80:	97 fb       	bst	r25, 7
    af82:	99 1f       	adc	r25, r25
    af84:	61 f0       	breq	.+24     	; 0xaf9e <__fp_splitA+0x20>
    af86:	9f 3f       	cpi	r25, 0xFF	; 255
    af88:	79 f0       	breq	.+30     	; 0xafa8 <__fp_splitA+0x2a>
    af8a:	87 95       	ror	r24
    af8c:	08 95       	ret
    af8e:	12 16       	cp	r1, r18
    af90:	13 06       	cpc	r1, r19
    af92:	14 06       	cpc	r1, r20
    af94:	55 1f       	adc	r21, r21
    af96:	f2 cf       	rjmp	.-28     	; 0xaf7c <__fp_split3+0xe>
    af98:	46 95       	lsr	r20
    af9a:	f1 df       	rcall	.-30     	; 0xaf7e <__fp_splitA>
    af9c:	08 c0       	rjmp	.+16     	; 0xafae <__fp_splitA+0x30>
    af9e:	16 16       	cp	r1, r22
    afa0:	17 06       	cpc	r1, r23
    afa2:	18 06       	cpc	r1, r24
    afa4:	99 1f       	adc	r25, r25
    afa6:	f1 cf       	rjmp	.-30     	; 0xaf8a <__fp_splitA+0xc>
    afa8:	86 95       	lsr	r24
    afaa:	71 05       	cpc	r23, r1
    afac:	61 05       	cpc	r22, r1
    afae:	08 94       	sec
    afb0:	08 95       	ret

0000afb2 <__fp_zero>:
    afb2:	e8 94       	clt

0000afb4 <__fp_szero>:
    afb4:	bb 27       	eor	r27, r27
    afb6:	66 27       	eor	r22, r22
    afb8:	77 27       	eor	r23, r23
    afba:	cb 01       	movw	r24, r22
    afbc:	97 f9       	bld	r25, 7
    afbe:	08 95       	ret

0000afc0 <__gesf2>:
    afc0:	2c df       	rcall	.-424    	; 0xae1a <__fp_cmp>
    afc2:	08 f4       	brcc	.+2      	; 0xafc6 <__gesf2+0x6>
    afc4:	8f ef       	ldi	r24, 0xFF	; 255
    afc6:	08 95       	ret

0000afc8 <inverse>:
    afc8:	9b 01       	movw	r18, r22
    afca:	ac 01       	movw	r20, r24
    afcc:	60 e0       	ldi	r22, 0x00	; 0
    afce:	70 e0       	ldi	r23, 0x00	; 0
    afd0:	80 e8       	ldi	r24, 0x80	; 128
    afd2:	9f e3       	ldi	r25, 0x3F	; 63
    afd4:	4c ce       	rjmp	.-872    	; 0xac6e <__divsf3>

0000afd6 <__mulsf3>:
    afd6:	0b d0       	rcall	.+22     	; 0xafee <__mulsf3x>
    afd8:	a8 cf       	rjmp	.-176    	; 0xaf2a <__fp_round>
    afda:	71 df       	rcall	.-286    	; 0xaebe <__fp_pscA>
    afdc:	28 f0       	brcs	.+10     	; 0xafe8 <__mulsf3+0x12>
    afde:	76 df       	rcall	.-276    	; 0xaecc <__fp_pscB>
    afe0:	18 f0       	brcs	.+6      	; 0xafe8 <__mulsf3+0x12>
    afe2:	95 23       	and	r25, r21
    afe4:	09 f0       	breq	.+2      	; 0xafe8 <__mulsf3+0x12>
    afe6:	3d cf       	rjmp	.-390    	; 0xae62 <__fp_inf>
    afe8:	42 cf       	rjmp	.-380    	; 0xae6e <__fp_nan>
    afea:	11 24       	eor	r1, r1
    afec:	e3 cf       	rjmp	.-58     	; 0xafb4 <__fp_szero>

0000afee <__mulsf3x>:
    afee:	bf df       	rcall	.-130    	; 0xaf6e <__fp_split3>
    aff0:	a0 f3       	brcs	.-24     	; 0xafda <__mulsf3+0x4>

0000aff2 <__mulsf3_pse>:
    aff2:	95 9f       	mul	r25, r21
    aff4:	d1 f3       	breq	.-12     	; 0xafea <__mulsf3+0x14>
    aff6:	95 0f       	add	r25, r21
    aff8:	50 e0       	ldi	r21, 0x00	; 0
    affa:	55 1f       	adc	r21, r21
    affc:	62 9f       	mul	r22, r18
    affe:	f0 01       	movw	r30, r0
    b000:	72 9f       	mul	r23, r18
    b002:	bb 27       	eor	r27, r27
    b004:	f0 0d       	add	r31, r0
    b006:	b1 1d       	adc	r27, r1
    b008:	63 9f       	mul	r22, r19
    b00a:	aa 27       	eor	r26, r26
    b00c:	f0 0d       	add	r31, r0
    b00e:	b1 1d       	adc	r27, r1
    b010:	aa 1f       	adc	r26, r26
    b012:	64 9f       	mul	r22, r20
    b014:	66 27       	eor	r22, r22
    b016:	b0 0d       	add	r27, r0
    b018:	a1 1d       	adc	r26, r1
    b01a:	66 1f       	adc	r22, r22
    b01c:	82 9f       	mul	r24, r18
    b01e:	22 27       	eor	r18, r18
    b020:	b0 0d       	add	r27, r0
    b022:	a1 1d       	adc	r26, r1
    b024:	62 1f       	adc	r22, r18
    b026:	73 9f       	mul	r23, r19
    b028:	b0 0d       	add	r27, r0
    b02a:	a1 1d       	adc	r26, r1
    b02c:	62 1f       	adc	r22, r18
    b02e:	83 9f       	mul	r24, r19
    b030:	a0 0d       	add	r26, r0
    b032:	61 1d       	adc	r22, r1
    b034:	22 1f       	adc	r18, r18
    b036:	74 9f       	mul	r23, r20
    b038:	33 27       	eor	r19, r19
    b03a:	a0 0d       	add	r26, r0
    b03c:	61 1d       	adc	r22, r1
    b03e:	23 1f       	adc	r18, r19
    b040:	84 9f       	mul	r24, r20
    b042:	60 0d       	add	r22, r0
    b044:	21 1d       	adc	r18, r1
    b046:	82 2f       	mov	r24, r18
    b048:	76 2f       	mov	r23, r22
    b04a:	6a 2f       	mov	r22, r26
    b04c:	11 24       	eor	r1, r1
    b04e:	9f 57       	subi	r25, 0x7F	; 127
    b050:	50 40       	sbci	r21, 0x00	; 0
    b052:	8a f0       	brmi	.+34     	; 0xb076 <__mulsf3_pse+0x84>
    b054:	e1 f0       	breq	.+56     	; 0xb08e <__mulsf3_pse+0x9c>
    b056:	88 23       	and	r24, r24
    b058:	4a f0       	brmi	.+18     	; 0xb06c <__mulsf3_pse+0x7a>
    b05a:	ee 0f       	add	r30, r30
    b05c:	ff 1f       	adc	r31, r31
    b05e:	bb 1f       	adc	r27, r27
    b060:	66 1f       	adc	r22, r22
    b062:	77 1f       	adc	r23, r23
    b064:	88 1f       	adc	r24, r24
    b066:	91 50       	subi	r25, 0x01	; 1
    b068:	50 40       	sbci	r21, 0x00	; 0
    b06a:	a9 f7       	brne	.-22     	; 0xb056 <__mulsf3_pse+0x64>
    b06c:	9e 3f       	cpi	r25, 0xFE	; 254
    b06e:	51 05       	cpc	r21, r1
    b070:	70 f0       	brcs	.+28     	; 0xb08e <__mulsf3_pse+0x9c>
    b072:	f7 ce       	rjmp	.-530    	; 0xae62 <__fp_inf>
    b074:	9f cf       	rjmp	.-194    	; 0xafb4 <__fp_szero>
    b076:	5f 3f       	cpi	r21, 0xFF	; 255
    b078:	ec f3       	brlt	.-6      	; 0xb074 <__mulsf3_pse+0x82>
    b07a:	98 3e       	cpi	r25, 0xE8	; 232
    b07c:	dc f3       	brlt	.-10     	; 0xb074 <__mulsf3_pse+0x82>
    b07e:	86 95       	lsr	r24
    b080:	77 95       	ror	r23
    b082:	67 95       	ror	r22
    b084:	b7 95       	ror	r27
    b086:	f7 95       	ror	r31
    b088:	e7 95       	ror	r30
    b08a:	9f 5f       	subi	r25, 0xFF	; 255
    b08c:	c1 f7       	brne	.-16     	; 0xb07e <__mulsf3_pse+0x8c>
    b08e:	fe 2b       	or	r31, r30
    b090:	88 0f       	add	r24, r24
    b092:	91 1d       	adc	r25, r1
    b094:	96 95       	lsr	r25
    b096:	87 95       	ror	r24
    b098:	97 f9       	bld	r25, 7
    b09a:	08 95       	ret

0000b09c <sin>:
    b09c:	9f 93       	push	r25
    b09e:	1e df       	rcall	.-452    	; 0xaedc <__fp_rempio2>
    b0a0:	0f 90       	pop	r0
    b0a2:	07 fc       	sbrc	r0, 7
    b0a4:	ee 5f       	subi	r30, 0xFE	; 254
    b0a6:	52 cf       	rjmp	.-348    	; 0xaf4c <__fp_sinus>

0000b0a8 <square>:
    b0a8:	9b 01       	movw	r18, r22
    b0aa:	ac 01       	movw	r20, r24
    b0ac:	94 cf       	rjmp	.-216    	; 0xafd6 <__mulsf3>

0000b0ae <__fp_mpack>:
    b0ae:	9f 3f       	cpi	r25, 0xFF	; 255
    b0b0:	31 f0       	breq	.+12     	; 0xb0be <__fp_mpack_finite+0xc>

0000b0b2 <__fp_mpack_finite>:
    b0b2:	91 50       	subi	r25, 0x01	; 1
    b0b4:	20 f4       	brcc	.+8      	; 0xb0be <__fp_mpack_finite+0xc>
    b0b6:	87 95       	ror	r24
    b0b8:	77 95       	ror	r23
    b0ba:	67 95       	ror	r22
    b0bc:	b7 95       	ror	r27
    b0be:	88 0f       	add	r24, r24
    b0c0:	91 1d       	adc	r25, r1
    b0c2:	96 95       	lsr	r25
    b0c4:	87 95       	ror	r24
    b0c6:	97 f9       	bld	r25, 7
    b0c8:	08 95       	ret

0000b0ca <__fp_powsodd>:
    b0ca:	9f 93       	push	r25
    b0cc:	8f 93       	push	r24
    b0ce:	7f 93       	push	r23
    b0d0:	6f 93       	push	r22
    b0d2:	ff 93       	push	r31
    b0d4:	ef 93       	push	r30
    b0d6:	9b 01       	movw	r18, r22
    b0d8:	ac 01       	movw	r20, r24
    b0da:	7d df       	rcall	.-262    	; 0xafd6 <__mulsf3>
    b0dc:	ef 91       	pop	r30
    b0de:	ff 91       	pop	r31
    b0e0:	c9 de       	rcall	.-622    	; 0xae74 <__fp_powser>
    b0e2:	2f 91       	pop	r18
    b0e4:	3f 91       	pop	r19
    b0e6:	4f 91       	pop	r20
    b0e8:	5f 91       	pop	r21
    b0ea:	75 cf       	rjmp	.-278    	; 0xafd6 <__mulsf3>

0000b0ec <__mulsi3>:
    b0ec:	62 9f       	mul	r22, r18
    b0ee:	d0 01       	movw	r26, r0
    b0f0:	73 9f       	mul	r23, r19
    b0f2:	f0 01       	movw	r30, r0
    b0f4:	82 9f       	mul	r24, r18
    b0f6:	e0 0d       	add	r30, r0
    b0f8:	f1 1d       	adc	r31, r1
    b0fa:	64 9f       	mul	r22, r20
    b0fc:	e0 0d       	add	r30, r0
    b0fe:	f1 1d       	adc	r31, r1
    b100:	92 9f       	mul	r25, r18
    b102:	f0 0d       	add	r31, r0
    b104:	83 9f       	mul	r24, r19
    b106:	f0 0d       	add	r31, r0
    b108:	74 9f       	mul	r23, r20
    b10a:	f0 0d       	add	r31, r0
    b10c:	65 9f       	mul	r22, r21
    b10e:	f0 0d       	add	r31, r0
    b110:	99 27       	eor	r25, r25
    b112:	72 9f       	mul	r23, r18
    b114:	b0 0d       	add	r27, r0
    b116:	e1 1d       	adc	r30, r1
    b118:	f9 1f       	adc	r31, r25
    b11a:	63 9f       	mul	r22, r19
    b11c:	b0 0d       	add	r27, r0
    b11e:	e1 1d       	adc	r30, r1
    b120:	f9 1f       	adc	r31, r25
    b122:	bd 01       	movw	r22, r26
    b124:	cf 01       	movw	r24, r30
    b126:	11 24       	eor	r1, r1
    b128:	08 95       	ret

0000b12a <__udivmodhi4>:
    b12a:	aa 1b       	sub	r26, r26
    b12c:	bb 1b       	sub	r27, r27
    b12e:	51 e1       	ldi	r21, 0x11	; 17
    b130:	07 c0       	rjmp	.+14     	; 0xb140 <__udivmodhi4_ep>

0000b132 <__udivmodhi4_loop>:
    b132:	aa 1f       	adc	r26, r26
    b134:	bb 1f       	adc	r27, r27
    b136:	a6 17       	cp	r26, r22
    b138:	b7 07       	cpc	r27, r23
    b13a:	10 f0       	brcs	.+4      	; 0xb140 <__udivmodhi4_ep>
    b13c:	a6 1b       	sub	r26, r22
    b13e:	b7 0b       	sbc	r27, r23

0000b140 <__udivmodhi4_ep>:
    b140:	88 1f       	adc	r24, r24
    b142:	99 1f       	adc	r25, r25
    b144:	5a 95       	dec	r21
    b146:	a9 f7       	brne	.-22     	; 0xb132 <__udivmodhi4_loop>
    b148:	80 95       	com	r24
    b14a:	90 95       	com	r25
    b14c:	bc 01       	movw	r22, r24
    b14e:	cd 01       	movw	r24, r26
    b150:	08 95       	ret

0000b152 <__divmodhi4>:
    b152:	97 fb       	bst	r25, 7
    b154:	09 2e       	mov	r0, r25
    b156:	07 26       	eor	r0, r23
    b158:	0a d0       	rcall	.+20     	; 0xb16e <__divmodhi4_neg1>
    b15a:	77 fd       	sbrc	r23, 7
    b15c:	04 d0       	rcall	.+8      	; 0xb166 <__divmodhi4_neg2>
    b15e:	e5 df       	rcall	.-54     	; 0xb12a <__udivmodhi4>
    b160:	06 d0       	rcall	.+12     	; 0xb16e <__divmodhi4_neg1>
    b162:	00 20       	and	r0, r0
    b164:	1a f4       	brpl	.+6      	; 0xb16c <__divmodhi4_exit>

0000b166 <__divmodhi4_neg2>:
    b166:	70 95       	com	r23
    b168:	61 95       	neg	r22
    b16a:	7f 4f       	sbci	r23, 0xFF	; 255

0000b16c <__divmodhi4_exit>:
    b16c:	08 95       	ret

0000b16e <__divmodhi4_neg1>:
    b16e:	f6 f7       	brtc	.-4      	; 0xb16c <__divmodhi4_exit>
    b170:	90 95       	com	r25
    b172:	81 95       	neg	r24
    b174:	9f 4f       	sbci	r25, 0xFF	; 255
    b176:	08 95       	ret

0000b178 <__divmodsi4>:
    b178:	97 fb       	bst	r25, 7
    b17a:	09 2e       	mov	r0, r25
    b17c:	05 26       	eor	r0, r21
    b17e:	0e d0       	rcall	.+28     	; 0xb19c <__divmodsi4_neg1>
    b180:	57 fd       	sbrc	r21, 7
    b182:	04 d0       	rcall	.+8      	; 0xb18c <__divmodsi4_neg2>
    b184:	14 d0       	rcall	.+40     	; 0xb1ae <__udivmodsi4>
    b186:	0a d0       	rcall	.+20     	; 0xb19c <__divmodsi4_neg1>
    b188:	00 1c       	adc	r0, r0
    b18a:	38 f4       	brcc	.+14     	; 0xb19a <__divmodsi4_exit>

0000b18c <__divmodsi4_neg2>:
    b18c:	50 95       	com	r21
    b18e:	40 95       	com	r20
    b190:	30 95       	com	r19
    b192:	21 95       	neg	r18
    b194:	3f 4f       	sbci	r19, 0xFF	; 255
    b196:	4f 4f       	sbci	r20, 0xFF	; 255
    b198:	5f 4f       	sbci	r21, 0xFF	; 255

0000b19a <__divmodsi4_exit>:
    b19a:	08 95       	ret

0000b19c <__divmodsi4_neg1>:
    b19c:	f6 f7       	brtc	.-4      	; 0xb19a <__divmodsi4_exit>
    b19e:	90 95       	com	r25
    b1a0:	80 95       	com	r24
    b1a2:	70 95       	com	r23
    b1a4:	61 95       	neg	r22
    b1a6:	7f 4f       	sbci	r23, 0xFF	; 255
    b1a8:	8f 4f       	sbci	r24, 0xFF	; 255
    b1aa:	9f 4f       	sbci	r25, 0xFF	; 255
    b1ac:	08 95       	ret

0000b1ae <__udivmodsi4>:
    b1ae:	a1 e2       	ldi	r26, 0x21	; 33
    b1b0:	1a 2e       	mov	r1, r26
    b1b2:	aa 1b       	sub	r26, r26
    b1b4:	bb 1b       	sub	r27, r27
    b1b6:	fd 01       	movw	r30, r26
    b1b8:	0d c0       	rjmp	.+26     	; 0xb1d4 <__udivmodsi4_ep>

0000b1ba <__udivmodsi4_loop>:
    b1ba:	aa 1f       	adc	r26, r26
    b1bc:	bb 1f       	adc	r27, r27
    b1be:	ee 1f       	adc	r30, r30
    b1c0:	ff 1f       	adc	r31, r31
    b1c2:	a2 17       	cp	r26, r18
    b1c4:	b3 07       	cpc	r27, r19
    b1c6:	e4 07       	cpc	r30, r20
    b1c8:	f5 07       	cpc	r31, r21
    b1ca:	20 f0       	brcs	.+8      	; 0xb1d4 <__udivmodsi4_ep>
    b1cc:	a2 1b       	sub	r26, r18
    b1ce:	b3 0b       	sbc	r27, r19
    b1d0:	e4 0b       	sbc	r30, r20
    b1d2:	f5 0b       	sbc	r31, r21

0000b1d4 <__udivmodsi4_ep>:
    b1d4:	66 1f       	adc	r22, r22
    b1d6:	77 1f       	adc	r23, r23
    b1d8:	88 1f       	adc	r24, r24
    b1da:	99 1f       	adc	r25, r25
    b1dc:	1a 94       	dec	r1
    b1de:	69 f7       	brne	.-38     	; 0xb1ba <__udivmodsi4_loop>
    b1e0:	60 95       	com	r22
    b1e2:	70 95       	com	r23
    b1e4:	80 95       	com	r24
    b1e6:	90 95       	com	r25
    b1e8:	9b 01       	movw	r18, r22
    b1ea:	ac 01       	movw	r20, r24
    b1ec:	bd 01       	movw	r22, r26
    b1ee:	cf 01       	movw	r24, r30
    b1f0:	08 95       	ret

0000b1f2 <do_rand>:
    b1f2:	af 92       	push	r10
    b1f4:	bf 92       	push	r11
    b1f6:	cf 92       	push	r12
    b1f8:	df 92       	push	r13
    b1fa:	ef 92       	push	r14
    b1fc:	ff 92       	push	r15
    b1fe:	0f 93       	push	r16
    b200:	1f 93       	push	r17
    b202:	cf 93       	push	r28
    b204:	df 93       	push	r29
    b206:	ec 01       	movw	r28, r24
    b208:	68 81       	ld	r22, Y
    b20a:	79 81       	ldd	r23, Y+1	; 0x01
    b20c:	8a 81       	ldd	r24, Y+2	; 0x02
    b20e:	9b 81       	ldd	r25, Y+3	; 0x03
    b210:	61 15       	cp	r22, r1
    b212:	71 05       	cpc	r23, r1
    b214:	81 05       	cpc	r24, r1
    b216:	91 05       	cpc	r25, r1
    b218:	21 f4       	brne	.+8      	; 0xb222 <do_rand+0x30>
    b21a:	64 e2       	ldi	r22, 0x24	; 36
    b21c:	79 ed       	ldi	r23, 0xD9	; 217
    b21e:	8b e5       	ldi	r24, 0x5B	; 91
    b220:	97 e0       	ldi	r25, 0x07	; 7
    b222:	2d e1       	ldi	r18, 0x1D	; 29
    b224:	33 ef       	ldi	r19, 0xF3	; 243
    b226:	41 e0       	ldi	r20, 0x01	; 1
    b228:	50 e0       	ldi	r21, 0x00	; 0
    b22a:	0e 94 bc 58 	call	0xb178	; 0xb178 <__divmodsi4>
    b22e:	79 01       	movw	r14, r18
    b230:	8a 01       	movw	r16, r20
    b232:	27 ea       	ldi	r18, 0xA7	; 167
    b234:	31 e4       	ldi	r19, 0x41	; 65
    b236:	40 e0       	ldi	r20, 0x00	; 0
    b238:	50 e0       	ldi	r21, 0x00	; 0
    b23a:	0e 94 76 58 	call	0xb0ec	; 0xb0ec <__mulsi3>
    b23e:	5b 01       	movw	r10, r22
    b240:	6c 01       	movw	r12, r24
    b242:	c8 01       	movw	r24, r16
    b244:	b7 01       	movw	r22, r14
    b246:	2c ee       	ldi	r18, 0xEC	; 236
    b248:	34 ef       	ldi	r19, 0xF4	; 244
    b24a:	4f ef       	ldi	r20, 0xFF	; 255
    b24c:	5f ef       	ldi	r21, 0xFF	; 255
    b24e:	0e 94 76 58 	call	0xb0ec	; 0xb0ec <__mulsi3>
    b252:	6a 0d       	add	r22, r10
    b254:	7b 1d       	adc	r23, r11
    b256:	8c 1d       	adc	r24, r12
    b258:	9d 1d       	adc	r25, r13
    b25a:	97 ff       	sbrs	r25, 7
    b25c:	04 c0       	rjmp	.+8      	; 0xb266 <do_rand+0x74>
    b25e:	61 50       	subi	r22, 0x01	; 1
    b260:	70 40       	sbci	r23, 0x00	; 0
    b262:	80 40       	sbci	r24, 0x00	; 0
    b264:	90 48       	sbci	r25, 0x80	; 128
    b266:	68 83       	st	Y, r22
    b268:	79 83       	std	Y+1, r23	; 0x01
    b26a:	8a 83       	std	Y+2, r24	; 0x02
    b26c:	9b 83       	std	Y+3, r25	; 0x03
    b26e:	7f 77       	andi	r23, 0x7F	; 127
    b270:	cb 01       	movw	r24, r22
    b272:	df 91       	pop	r29
    b274:	cf 91       	pop	r28
    b276:	1f 91       	pop	r17
    b278:	0f 91       	pop	r16
    b27a:	ff 90       	pop	r15
    b27c:	ef 90       	pop	r14
    b27e:	df 90       	pop	r13
    b280:	cf 90       	pop	r12
    b282:	bf 90       	pop	r11
    b284:	af 90       	pop	r10
    b286:	08 95       	ret

0000b288 <rand_r>:
    b288:	0e 94 f9 58 	call	0xb1f2	; 0xb1f2 <do_rand>
    b28c:	08 95       	ret

0000b28e <rand>:
    b28e:	8a e2       	ldi	r24, 0x2A	; 42
    b290:	92 e0       	ldi	r25, 0x02	; 2
    b292:	0e 94 f9 58 	call	0xb1f2	; 0xb1f2 <do_rand>
    b296:	08 95       	ret

0000b298 <srand>:
    b298:	a0 e0       	ldi	r26, 0x00	; 0
    b29a:	b0 e0       	ldi	r27, 0x00	; 0
    b29c:	80 93 2a 02 	sts	0x022A, r24
    b2a0:	90 93 2b 02 	sts	0x022B, r25
    b2a4:	a0 93 2c 02 	sts	0x022C, r26
    b2a8:	b0 93 2d 02 	sts	0x022D, r27
    b2ac:	08 95       	ret

0000b2ae <memset>:
    b2ae:	dc 01       	movw	r26, r24
    b2b0:	01 c0       	rjmp	.+2      	; 0xb2b4 <memset+0x6>
    b2b2:	6d 93       	st	X+, r22
    b2b4:	41 50       	subi	r20, 0x01	; 1
    b2b6:	50 40       	sbci	r21, 0x00	; 0
    b2b8:	e0 f7       	brcc	.-8      	; 0xb2b2 <memset+0x4>
    b2ba:	08 95       	ret

0000b2bc <__eerd_block_m2560>:
    b2bc:	dc 01       	movw	r26, r24
    b2be:	cb 01       	movw	r24, r22

0000b2c0 <__eerd_blraw_m2560>:
    b2c0:	fc 01       	movw	r30, r24
    b2c2:	f9 99       	sbic	0x1f, 1	; 31
    b2c4:	fe cf       	rjmp	.-4      	; 0xb2c2 <__eerd_blraw_m2560+0x2>
    b2c6:	06 c0       	rjmp	.+12     	; 0xb2d4 <__eerd_blraw_m2560+0x14>
    b2c8:	f2 bd       	out	0x22, r31	; 34
    b2ca:	e1 bd       	out	0x21, r30	; 33
    b2cc:	f8 9a       	sbi	0x1f, 0	; 31
    b2ce:	31 96       	adiw	r30, 0x01	; 1
    b2d0:	00 b4       	in	r0, 0x20	; 32
    b2d2:	0d 92       	st	X+, r0
    b2d4:	41 50       	subi	r20, 0x01	; 1
    b2d6:	50 40       	sbci	r21, 0x00	; 0
    b2d8:	b8 f7       	brcc	.-18     	; 0xb2c8 <__eerd_blraw_m2560+0x8>
    b2da:	08 95       	ret

0000b2dc <__eerd_byte_m2560>:
    b2dc:	f9 99       	sbic	0x1f, 1	; 31
    b2de:	fe cf       	rjmp	.-4      	; 0xb2dc <__eerd_byte_m2560>
    b2e0:	92 bd       	out	0x22, r25	; 34
    b2e2:	81 bd       	out	0x21, r24	; 33
    b2e4:	f8 9a       	sbi	0x1f, 0	; 31
    b2e6:	99 27       	eor	r25, r25
    b2e8:	80 b5       	in	r24, 0x20	; 32
    b2ea:	08 95       	ret

0000b2ec <__eerd_word_m2560>:
    b2ec:	a8 e1       	ldi	r26, 0x18	; 24
    b2ee:	b0 e0       	ldi	r27, 0x00	; 0
    b2f0:	42 e0       	ldi	r20, 0x02	; 2
    b2f2:	50 e0       	ldi	r21, 0x00	; 0
    b2f4:	0c 94 60 59 	jmp	0xb2c0	; 0xb2c0 <__eerd_blraw_m2560>

0000b2f8 <__eeupd_block_m2560>:
    b2f8:	dc 01       	movw	r26, r24
    b2fa:	a4 0f       	add	r26, r20
    b2fc:	b5 1f       	adc	r27, r21
    b2fe:	41 50       	subi	r20, 0x01	; 1
    b300:	50 40       	sbci	r21, 0x00	; 0
    b302:	48 f0       	brcs	.+18     	; 0xb316 <__eeupd_block_m2560+0x1e>
    b304:	cb 01       	movw	r24, r22
    b306:	84 0f       	add	r24, r20
    b308:	95 1f       	adc	r25, r21
    b30a:	2e 91       	ld	r18, -X
    b30c:	0e 94 8d 59 	call	0xb31a	; 0xb31a <__eeupd_r18_m2560>
    b310:	41 50       	subi	r20, 0x01	; 1
    b312:	50 40       	sbci	r21, 0x00	; 0
    b314:	d0 f7       	brcc	.-12     	; 0xb30a <__eeupd_block_m2560+0x12>
    b316:	08 95       	ret

0000b318 <__eeupd_byte_m2560>:
    b318:	26 2f       	mov	r18, r22

0000b31a <__eeupd_r18_m2560>:
    b31a:	f9 99       	sbic	0x1f, 1	; 31
    b31c:	fe cf       	rjmp	.-4      	; 0xb31a <__eeupd_r18_m2560>
    b31e:	92 bd       	out	0x22, r25	; 34
    b320:	81 bd       	out	0x21, r24	; 33
    b322:	f8 9a       	sbi	0x1f, 0	; 31
    b324:	01 97       	sbiw	r24, 0x01	; 1
    b326:	00 b4       	in	r0, 0x20	; 32
    b328:	02 16       	cp	r0, r18
    b32a:	39 f0       	breq	.+14     	; 0xb33a <__eeupd_r18_m2560+0x20>
    b32c:	1f ba       	out	0x1f, r1	; 31
    b32e:	20 bd       	out	0x20, r18	; 32
    b330:	0f b6       	in	r0, 0x3f	; 63
    b332:	f8 94       	cli
    b334:	fa 9a       	sbi	0x1f, 2	; 31
    b336:	f9 9a       	sbi	0x1f, 1	; 31
    b338:	0f be       	out	0x3f, r0	; 63
    b33a:	08 95       	ret

0000b33c <__eeupd_word_m2560>:
    b33c:	01 96       	adiw	r24, 0x01	; 1
    b33e:	27 2f       	mov	r18, r23
    b340:	0e 94 8d 59 	call	0xb31a	; 0xb31a <__eeupd_r18_m2560>
    b344:	0c 94 8c 59 	jmp	0xb318	; 0xb318 <__eeupd_byte_m2560>

0000b348 <__eewr_byte_m2560>:
    b348:	26 2f       	mov	r18, r22

0000b34a <__eewr_r18_m2560>:
    b34a:	f9 99       	sbic	0x1f, 1	; 31
    b34c:	fe cf       	rjmp	.-4      	; 0xb34a <__eewr_r18_m2560>
    b34e:	1f ba       	out	0x1f, r1	; 31
    b350:	92 bd       	out	0x22, r25	; 34
    b352:	81 bd       	out	0x21, r24	; 33
    b354:	20 bd       	out	0x20, r18	; 32
    b356:	0f b6       	in	r0, 0x3f	; 63
    b358:	f8 94       	cli
    b35a:	fa 9a       	sbi	0x1f, 2	; 31
    b35c:	f9 9a       	sbi	0x1f, 1	; 31
    b35e:	0f be       	out	0x3f, r0	; 63
    b360:	01 96       	adiw	r24, 0x01	; 1
    b362:	08 95       	ret

0000b364 <__eewr_word_m2560>:
    b364:	0e 94 a4 59 	call	0xb348	; 0xb348 <__eewr_byte_m2560>
    b368:	27 2f       	mov	r18, r23
    b36a:	0c 94 a5 59 	jmp	0xb34a	; 0xb34a <__eewr_r18_m2560>

0000b36e <_exit>:
    b36e:	ff cf       	rjmp	.-2      	; 0xb36e <_exit>
