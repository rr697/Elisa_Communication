
Elisa3-avr-studio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800200  0000b1a8  0000b23c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000b1a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000972  0080023a  0080023a  0000b276  2**0
                  ALLOC
  3 .debug_aranges 000002a0  00000000  00000000  0000b276  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000029fb  00000000  00000000  0000b516  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00005546  00000000  00000000  0000df11  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000148c  00000000  00000000  00013457  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00007c5c  00000000  00000000  000148e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000009e0  00000000  00000000  0001c540  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001e9f  00000000  00000000  0001cf20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001040  00000000  00000000  0001edbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000260  00000000  00000000  0001fdff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__ctors_end>
       4:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
       8:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
       c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      10:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      14:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      18:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      1c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      20:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      24:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      28:	0c 94 91 07 	jmp	0xf22	; 0xf22 <__vector_10>
      2c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      30:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      34:	0c 94 c5 07 	jmp	0xf8a	; 0xf8a <__vector_13>
      38:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      3c:	0c 94 fa 0f 	jmp	0x1ff4	; 0x1ff4 <__vector_15>
      40:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      44:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      48:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      4c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      50:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      54:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      58:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      5c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      60:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      64:	0c 94 32 0f 	jmp	0x1e64	; 0x1e64 <__vector_25>
      68:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      6c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      70:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      74:	0c 94 39 11 	jmp	0x2272	; 0x2272 <__vector_29>
      78:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      7c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      80:	0c 94 7f 23 	jmp	0x46fe	; 0x46fe <__vector_32>
      84:	0c 94 95 23 	jmp	0x472a	; 0x472a <__vector_33>
      88:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      8c:	0c 94 e8 22 	jmp	0x45d0	; 0x45d0 <__vector_35>
      90:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      94:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      98:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      9c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      a0:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      a4:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      a8:	0c 94 bc 22 	jmp	0x4578	; 0x4578 <__vector_42>
      ac:	0c 94 d2 22 	jmp	0x45a4	; 0x45a4 <__vector_43>
      b0:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      b4:	0c 94 1b 22 	jmp	0x4436	; 0x4436 <__vector_45>
      b8:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      bc:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      c0:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      c4:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      c8:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      cc:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      d0:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      d4:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      d8:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      dc:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      e0:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      e4:	b7 0a       	sbc	r11, r23
      e6:	a2 0a       	sbc	r10, r18
      e8:	79 0a       	sbc	r7, r25
      ea:	5e 0a       	sbc	r5, r30
      ec:	39 0a       	sbc	r3, r25
      ee:	03 0a       	sbc	r0, r19
      f0:	d5 09       	sbc	r29, r5
      f2:	19 0a       	sbc	r1, r25
      f4:	a2 09       	sbc	r26, r2
      f6:	86 09       	sbc	r24, r6
      f8:	26 09       	sbc	r18, r6
      fa:	26 09       	sbc	r18, r6
      fc:	26 09       	sbc	r18, r6
      fe:	26 09       	sbc	r18, r6
     100:	26 09       	sbc	r18, r6
     102:	26 09       	sbc	r18, r6
     104:	7a 09       	sbc	r23, r10
     106:	6f 09       	sbc	r22, r15
     108:	26 09       	sbc	r18, r6
     10a:	26 09       	sbc	r18, r6
     10c:	26 09       	sbc	r18, r6
     10e:	26 09       	sbc	r18, r6
     110:	26 09       	sbc	r18, r6
     112:	26 09       	sbc	r18, r6
     114:	26 09       	sbc	r18, r6
     116:	26 09       	sbc	r18, r6
     118:	26 09       	sbc	r18, r6
     11a:	26 09       	sbc	r18, r6
     11c:	26 09       	sbc	r18, r6
     11e:	26 09       	sbc	r18, r6
     120:	a2 09       	sbc	r26, r2
     122:	79 0a       	sbc	r7, r25
     124:	63 09       	sbc	r22, r3
     126:	56 09       	sbc	r21, r6
     128:	26 09       	sbc	r18, r6
     12a:	26 09       	sbc	r18, r6
     12c:	26 09       	sbc	r18, r6
     12e:	26 09       	sbc	r18, r6
     130:	26 09       	sbc	r18, r6
     132:	26 09       	sbc	r18, r6
     134:	26 09       	sbc	r18, r6
     136:	26 09       	sbc	r18, r6
     138:	26 09       	sbc	r18, r6
     13a:	26 09       	sbc	r18, r6
     13c:	26 09       	sbc	r18, r6
     13e:	26 09       	sbc	r18, r6
     140:	39 0a       	sbc	r3, r25
     142:	d5 09       	sbc	r29, r5
     144:	26 09       	sbc	r18, r6
     146:	26 09       	sbc	r18, r6
     148:	b7 0a       	sbc	r11, r23
     14a:	03 0a       	sbc	r0, r19
     14c:	46 09       	sbc	r20, r6
     14e:	08 4a       	sbci	r16, 0xA8	; 168
     150:	d7 3b       	cpi	r29, 0xB7	; 183
     152:	3b ce       	rjmp	.-906    	; 0xfffffdca <__eeprom_end+0xff7efdca>
     154:	01 6e       	ori	r16, 0xE1	; 225
     156:	84 bc       	out	0x24, r8	; 36
     158:	bf fd       	.word	0xfdbf	; ????
     15a:	c1 2f       	mov	r28, r17
     15c:	3d 6c       	ori	r19, 0xCD	; 205
     15e:	74 31       	cpi	r23, 0x14	; 20
     160:	9a bd       	out	0x2a, r25	; 42
     162:	56 83       	std	Z+6, r21	; 0x06
     164:	3d da       	rcall	.-2950   	; 0xfffff5e0 <__eeprom_end+0xff7ef5e0>
     166:	3d 00       	.word	0x003d	; ????
     168:	c7 7f       	andi	r28, 0xF7	; 247
     16a:	11 be       	out	0x31, r1	; 49
     16c:	d9 e4       	ldi	r29, 0x49	; 73
     16e:	bb 4c       	sbci	r27, 0xCB	; 203
     170:	3e 91       	ld	r19, -X
     172:	6b aa       	std	Y+51, r6	; 0x33
     174:	aa be       	out	0x3a, r10	; 58
     176:	00 00       	nop
     178:	00 80       	ld	r0, Z
     17a:	3f 05       	cpc	r19, r15
     17c:	a8 4c       	sbci	r26, 0xC8	; 200
     17e:	cd b2       	in	r12, 0x1d	; 29
     180:	d4 4e       	sbci	r29, 0xE4	; 228
     182:	b9 38       	cpi	r27, 0x89	; 137
     184:	36 a9       	ldd	r19, Z+54	; 0x36
     186:	02 0c       	add	r0, r2
     188:	50 b9       	out	0x00, r21	; 0
     18a:	91 86       	std	Z+9, r9	; 0x09
     18c:	88 08       	sbc	r8, r8
     18e:	3c a6       	std	Y+44, r3	; 0x2c
     190:	aa aa       	std	Y+50, r10	; 0x32
     192:	2a be       	out	0x3a, r2	; 58
     194:	00 00       	nop
     196:	00 80       	ld	r0, Z
     198:	3f 00       	.word	0x003f	; ????

0000019a <__ctors_end>:
     19a:	11 24       	eor	r1, r1
     19c:	1f be       	out	0x3f, r1	; 63
     19e:	cf ef       	ldi	r28, 0xFF	; 255
     1a0:	d1 e2       	ldi	r29, 0x21	; 33
     1a2:	de bf       	out	0x3e, r29	; 62
     1a4:	cd bf       	out	0x3d, r28	; 61
     1a6:	00 e0       	ldi	r16, 0x00	; 0
     1a8:	0c bf       	out	0x3c, r16	; 60

000001aa <__do_copy_data>:
     1aa:	12 e0       	ldi	r17, 0x02	; 2
     1ac:	a0 e0       	ldi	r26, 0x00	; 0
     1ae:	b2 e0       	ldi	r27, 0x02	; 2
     1b0:	e8 ea       	ldi	r30, 0xA8	; 168
     1b2:	f1 eb       	ldi	r31, 0xB1	; 177
     1b4:	00 e0       	ldi	r16, 0x00	; 0
     1b6:	0b bf       	out	0x3b, r16	; 59
     1b8:	02 c0       	rjmp	.+4      	; 0x1be <__do_copy_data+0x14>
     1ba:	07 90       	elpm	r0, Z+
     1bc:	0d 92       	st	X+, r0
     1be:	aa 33       	cpi	r26, 0x3A	; 58
     1c0:	b1 07       	cpc	r27, r17
     1c2:	d9 f7       	brne	.-10     	; 0x1ba <__do_copy_data+0x10>

000001c4 <__do_clear_bss>:
     1c4:	1b e0       	ldi	r17, 0x0B	; 11
     1c6:	aa e3       	ldi	r26, 0x3A	; 58
     1c8:	b2 e0       	ldi	r27, 0x02	; 2
     1ca:	01 c0       	rjmp	.+2      	; 0x1ce <.do_clear_bss_start>

000001cc <.do_clear_bss_loop>:
     1cc:	1d 92       	st	X+, r1

000001ce <.do_clear_bss_start>:
     1ce:	ac 3a       	cpi	r26, 0xAC	; 172
     1d0:	b1 07       	cpc	r27, r17
     1d2:	e1 f7       	brne	.-8      	; 0x1cc <.do_clear_bss_loop>
     1d4:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <main>
     1d8:	0c 94 d2 58 	jmp	0xb1a4	; 0xb1a4 <_exit>

000001dc <__bad_interrupt>:
     1dc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e0 <main>:
#include "pathing.h"
#include "gridNavigation.h"

int main(void) {

	initPeripherals();
     1e0:	0e 94 4e 10 	call	0x209c	; 0x209c <initPeripherals>
	calibrateSensors();
     1e4:	0e 94 01 3a 	call	0x7402	; 0x7402 <calibrateSensors>
	initBehaviors();
     1e8:	0e 94 da 35 	call	0x6bb4	; 0x6bb4 <initBehaviors>
	
	GREEN_LED0_OFF;
     1ec:	80 91 0b 01 	lds	r24, 0x010B
     1f0:	81 60       	ori	r24, 0x01	; 1
     1f2:	80 93 0b 01 	sts	0x010B, r24
	GREEN_LED1_OFF;
     1f6:	80 91 0b 01 	lds	r24, 0x010B
     1fa:	82 60       	ori	r24, 0x02	; 2
     1fc:	80 93 0b 01 	sts	0x010B, r24
	GREEN_LED2_OFF;
     200:	80 91 0b 01 	lds	r24, 0x010B
     204:	84 60       	ori	r24, 0x04	; 4
     206:	80 93 0b 01 	sts	0x010B, r24
	GREEN_LED3_OFF;
     20a:	a3 9a       	sbi	0x14, 3	; 20
	GREEN_LED4_OFF;
     20c:	80 91 0b 01 	lds	r24, 0x010B
     210:	80 61       	ori	r24, 0x10	; 16
     212:	80 93 0b 01 	sts	0x010B, r24
	GREEN_LED5_OFF;
     216:	80 91 0b 01 	lds	r24, 0x010B
     21a:	80 62       	ori	r24, 0x20	; 32
     21c:	80 93 0b 01 	sts	0x010B, r24
	GREEN_LED6_OFF;
     220:	80 91 0b 01 	lds	r24, 0x010B
     224:	80 64       	ori	r24, 0x40	; 64
     226:	80 93 0b 01 	sts	0x010B, r24
	GREEN_LED7_OFF; 
     22a:	80 91 0b 01 	lds	r24, 0x010B
     22e:	80 68       	ori	r24, 0x80	; 128
     230:	80 93 0b 01 	sts	0x010B, r24
   	

	while(1) {

	//elisa_communication();
    demoComm();
     234:	0e 94 46 4f 	call	0x9e8c	; 0x9e8c <demoComm>
     238:	fd cf       	rjmp	.-6      	; 0x234 <main+0x54>

0000023a <SPI_WAIT>:
#define SPI_SCK PORTB1	// SCK pin (SPI clock)
#define SPI_SS PORTB0	// SS pin (Slave Select)

// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
     23a:	20 91 34 03 	lds	r18, 0x0334
     23e:	81 e0       	ldi	r24, 0x01	; 1
     240:	90 e0       	ldi	r25, 0x00	; 0
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
     242:	0d b4       	in	r0, 0x2d	; 45
     244:	07 fc       	sbrc	r0, 7
     246:	09 c0       	rjmp	.+18     	; 0x25a <SPI_WAIT+0x20>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
     248:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
     24a:	37 e2       	ldi	r19, 0x27	; 39
     24c:	80 31       	cpi	r24, 0x10	; 16
     24e:	93 07       	cpc	r25, r19
     250:	c0 f3       	brcs	.-16     	; 0x242 <SPI_WAIT+0x8>
     252:	21 e0       	ldi	r18, 0x01	; 1
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
     254:	0d b4       	in	r0, 0x2d	; 45
     256:	07 fe       	sbrs	r0, 7
     258:	f7 cf       	rjmp	.-18     	; 0x248 <SPI_WAIT+0xe>
     25a:	20 93 34 03 	sts	0x0334, r18
			return;
		}
	}
}
     25e:	08 95       	ret

00000260 <initSPI>:

void initSPI() {

    SPI_DDR &= ~((1<<SPI_MOSI)|(1<<SPI_MISO)|(1<<SPI_SS)|(1<<SPI_SCK));
     260:	84 b1       	in	r24, 0x04	; 4
     262:	80 7f       	andi	r24, 0xF0	; 240
     264:	84 b9       	out	0x04, r24	; 4
    // Define the following pins as output
    SPI_DDR |= ((1<<SPI_MOSI)|(1<<SPI_SS)|(1<<SPI_SCK));
     266:	84 b1       	in	r24, 0x04	; 4
     268:	87 60       	ori	r24, 0x07	; 7
     26a:	84 b9       	out	0x04, r24	; 4

    
    SPCR = ((1<<SPE)|               // SPI Enable
     26c:	80 e5       	ldi	r24, 0x50	; 80
     26e:	8c bd       	out	0x2c, r24	; 44
            (1<<MSTR)|              // 1:Master/ 0:Slave
            (0<<SPR1)|(0<<SPR0)|    // SPI Clock Rate => default 1/4 => 2 MHz
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR |= (1<<SPI2X);              // Double Clock Rate
     270:	8d b5       	in	r24, 0x2d	; 45
     272:	81 60       	ori	r24, 0x01	; 1
     274:	8d bd       	out	0x2d, r24	; 45

}
     276:	08 95       	ret

00000278 <closeSPI>:

void closeSPI() {

	SPCR = 0x00;
     278:	1c bc       	out	0x2c, r1	; 44
	SPSR = 0x00;
     27a:	1d bc       	out	0x2d, r1	; 45
}
     27c:	08 95       	ret

0000027e <SPI_Write_Block>:
		  }
          buffer[i] = SPDR;
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
     27e:	48 2f       	mov	r20, r24
    uint8_t i;
    for (i = 0; i < len; i++) {
     280:	66 23       	and	r22, r22
     282:	e9 f0       	breq	.+58     	; 0x2be <SPI_Write_Block+0x40>
     284:	9c 01       	movw	r18, r24
     286:	f9 01       	movw	r30, r18
          SPDR = data[i];
     288:	80 81       	ld	r24, Z
     28a:	8e bd       	out	0x2e, r24	; 46
     28c:	20 91 34 03 	lds	r18, 0x0334
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	90 e0       	ldi	r25, 0x00	; 0
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
     294:	0d b4       	in	r0, 0x2d	; 45
     296:	07 fc       	sbrc	r0, 7
     298:	09 c0       	rjmp	.+18     	; 0x2ac <SPI_Write_Block+0x2e>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
     29a:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
     29c:	37 e2       	ldi	r19, 0x27	; 39
     29e:	80 31       	cpi	r24, 0x10	; 16
     2a0:	93 07       	cpc	r25, r19
     2a2:	c0 f3       	brcs	.-16     	; 0x294 <SPI_Write_Block+0x16>
     2a4:	21 e0       	ldi	r18, 0x01	; 1
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
     2a6:	0d b4       	in	r0, 0x2d	; 45
     2a8:	07 fe       	sbrs	r0, 7
     2aa:	f7 cf       	rjmp	.-18     	; 0x29a <SPI_Write_Block+0x1c>
     2ac:	20 93 34 03 	sts	0x0334, r18
void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
          SPI_WAIT();
		  if(spiCommError) {
     2b0:	22 23       	and	r18, r18
     2b2:	29 f4       	brne	.+10     	; 0x2be <SPI_Write_Block+0x40>
			return;
     2b4:	31 96       	adiw	r30, 0x01	; 1
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
     2b6:	8e 2f       	mov	r24, r30
     2b8:	84 1b       	sub	r24, r20
     2ba:	86 17       	cp	r24, r22
     2bc:	28 f3       	brcs	.-54     	; 0x288 <SPI_Write_Block+0xa>
     2be:	08 95       	ret

000002c0 <SPI_ReadWrite_Block>:

	SPCR = 0x00;
	SPSR = 0x00;
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
     2c0:	cf 93       	push	r28
     2c2:	df 93       	push	r29
     2c4:	ec 01       	movw	r28, r24
    uint8_t i;
    for (i = 0; i < len; i++) {
     2c6:	44 23       	and	r20, r20
     2c8:	21 f1       	breq	.+72     	; 0x312 <SPI_ReadWrite_Block+0x52>
     2ca:	a0 e0       	ldi	r26, 0x00	; 0
     2cc:	b0 e0       	ldi	r27, 0x00	; 0
          SPDR = data[i];
     2ce:	fe 01       	movw	r30, r28
     2d0:	ea 0f       	add	r30, r26
     2d2:	fb 1f       	adc	r31, r27
     2d4:	80 81       	ld	r24, Z
     2d6:	8e bd       	out	0x2e, r24	; 46
     2d8:	80 91 34 03 	lds	r24, 0x0334
     2dc:	21 e0       	ldi	r18, 0x01	; 1
     2de:	30 e0       	ldi	r19, 0x00	; 0
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
     2e0:	0d b4       	in	r0, 0x2d	; 45
     2e2:	07 fc       	sbrc	r0, 7
     2e4:	0a c0       	rjmp	.+20     	; 0x2fa <SPI_ReadWrite_Block+0x3a>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
     2e6:	2f 5f       	subi	r18, 0xFF	; 255
     2e8:	3f 4f       	sbci	r19, 0xFF	; 255
		if(timeout>=10000) {
     2ea:	97 e2       	ldi	r25, 0x27	; 39
     2ec:	20 31       	cpi	r18, 0x10	; 16
     2ee:	39 07       	cpc	r19, r25
     2f0:	b8 f3       	brcs	.-18     	; 0x2e0 <SPI_ReadWrite_Block+0x20>
     2f2:	81 e0       	ldi	r24, 0x01	; 1
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
     2f4:	0d b4       	in	r0, 0x2d	; 45
     2f6:	07 fe       	sbrs	r0, 7
     2f8:	f6 cf       	rjmp	.-20     	; 0x2e6 <SPI_ReadWrite_Block+0x26>
     2fa:	80 93 34 03 	sts	0x0334, r24
void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
          SPI_WAIT();
		  if(spiCommError) {
     2fe:	88 23       	and	r24, r24
     300:	41 f4       	brne	.+16     	; 0x312 <SPI_ReadWrite_Block+0x52>
			return;
		  }
          buffer[i] = SPDR;
     302:	8e b5       	in	r24, 0x2e	; 46
     304:	fb 01       	movw	r30, r22
     306:	ea 0f       	add	r30, r26
     308:	fb 1f       	adc	r31, r27
     30a:	80 83       	st	Z, r24
     30c:	11 96       	adiw	r26, 0x01	; 1
	SPSR = 0x00;
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
     30e:	a4 17       	cp	r26, r20
     310:	f0 f2       	brcs	.-68     	; 0x2ce <SPI_ReadWrite_Block+0xe>
		  if(spiCommError) {
			return;
		  }
          buffer[i] = SPDR;
    }
}
     312:	df 91       	pop	r29
     314:	cf 91       	pop	r28
     316:	08 95       	ret

00000318 <SPI_Write_Byte>:
    }

}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
     318:	8e bd       	out	0x2e, r24	; 46
     31a:	20 91 34 03 	lds	r18, 0x0334
     31e:	81 e0       	ldi	r24, 0x01	; 1
     320:	90 e0       	ldi	r25, 0x00	; 0
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
     322:	0d b4       	in	r0, 0x2d	; 45
     324:	07 fc       	sbrc	r0, 7
     326:	09 c0       	rjmp	.+18     	; 0x33a <SPI_Write_Byte+0x22>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
     328:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
     32a:	37 e2       	ldi	r19, 0x27	; 39
     32c:	80 31       	cpi	r24, 0x10	; 16
     32e:	93 07       	cpc	r25, r19
     330:	c0 f3       	brcs	.-16     	; 0x322 <SPI_Write_Byte+0xa>
     332:	21 e0       	ldi	r18, 0x01	; 1
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
     334:	0d b4       	in	r0, 0x2d	; 45
     336:	07 fe       	sbrs	r0, 7
     338:	f7 cf       	rjmp	.-18     	; 0x328 <SPI_Write_Byte+0x10>
     33a:	20 93 34 03 	sts	0x0334, r18
}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    SPI_WAIT();
    return SPDR;
     33e:	8e b5       	in	r24, 0x2e	; 46
}
     340:	08 95       	ret

00000342 <rfEnableDebugMode>:
	}

}

void rfEnableDebugMode() {
	rfDebugMode = 1;
     342:	81 e0       	ldi	r24, 0x01	; 1
     344:	80 93 35 03 	sts	0x0335, r24
	rfDebugCounter = 3;
     348:	83 e0       	ldi	r24, 0x03	; 3
     34a:	80 93 36 03 	sts	0x0336, r24
}
     34e:	08 95       	ret

00000350 <rfDisableDebugMode>:

void rfDisableDebugMode() {
	rfDebugMode = 0;
     350:	10 92 35 03 	sts	0x0335, r1
}
     354:	08 95       	ret

00000356 <rfDebugNextPacket>:
		rfDebugCounter = 3;
	}
}

void rfDebugNextPacket() {
	rfDebugCounter = 3;
     356:	83 e0       	ldi	r24, 0x03	; 3
     358:	80 93 36 03 	sts	0x0336, r24
}
     35c:	08 95       	ret

0000035e <flushTxFifo>:
	return pWidth;
}

void flushTxFifo() {

    mirf_CSN_lo;
     35e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
     360:	81 ee       	ldi	r24, 0xE1	; 225
     362:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
    mirf_CSN_hi;
     366:	28 9a       	sbi	0x05, 0	; 5

}
     368:	08 95       	ret

0000036a <readPayloadWidthFromTopFifo>:
}

uint8_t readPayloadWidthFromTopFifo() {
	uint8_t pWidth = 0;

    mirf_CSN_lo;
     36a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_R_RX_PL_WID);
     36c:	80 e6       	ldi	r24, 0x60	; 96
     36e:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
	pWidth = SPI_Write_Byte(NOP); 	// not specified in the datasheet but the "NRF_R_RX_PL_WID" has a parameter,
     372:	8f ef       	ldi	r24, 0xFF	; 255
     374:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
									// we need to send a NOP to receive the actual payload size
    mirf_CSN_hi;
     378:	28 9a       	sbi	0x05, 0	; 5
	
	return pWidth;
}
     37a:	08 95       	ret

0000037c <mirf_config_register>:
    mirf_config_register(STATUS,(1<<RX_DR));   		// Reset status register
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
     37c:	1f 93       	push	r17
     37e:	16 2f       	mov	r17, r22
    mirf_CSN_lo;
     380:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     382:	8f 71       	andi	r24, 0x1F	; 31
     384:	80 62       	ori	r24, 0x20	; 32
     386:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     38a:	81 2f       	mov	r24, r17
     38c:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
    mirf_CSN_hi;
     390:	28 9a       	sbi	0x05, 0	; 5
}
     392:	1f 91       	pop	r17
     394:	08 95       	ret

00000396 <flush_rx_fifo>:
	return (uint8_t)(fifo_status&0x01);
}

void flush_rx_fifo() {

    mirf_CSN_lo;
     396:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
     398:	82 ee       	ldi	r24, 0xE2	; 226
     39a:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
    mirf_CSN_hi;
     39e:	28 9a       	sbi	0x05, 0	; 5

}
     3a0:	08 95       	ret

000003a2 <mirf_data_ready>:
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
     3a2:	80 91 63 05 	lds	r24, 0x0563
     3a6:	88 23       	and	r24, r24
     3a8:	11 f0       	breq	.+4      	; 0x3ae <mirf_data_ready+0xc>
     3aa:	80 e0       	ldi	r24, 0x00	; 0
     3ac:	08 95       	ret
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
     3ae:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
     3b0:	8f ef       	ldi	r24, 0xFF	; 255
     3b2:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
     3b6:	28 9a       	sbi	0x05, 0	; 5
    return status & (1<<RX_DR);
     3b8:	80 74       	andi	r24, 0x40	; 64

}
     3ba:	08 95       	ret

000003bc <mirf_write_register>:
    mirf_CSN_hi;
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
     3bc:	ff 92       	push	r15
     3be:	0f 93       	push	r16
     3c0:	1f 93       	push	r17
     3c2:	8b 01       	movw	r16, r22
     3c4:	f4 2e       	mov	r15, r20
    mirf_CSN_lo;
     3c6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     3c8:	8f 71       	andi	r24, 0x1F	; 31
     3ca:	80 62       	ori	r24, 0x20	; 32
     3cc:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     3d0:	c8 01       	movw	r24, r16
     3d2:	6f 2d       	mov	r22, r15
     3d4:	0e 94 3f 01 	call	0x27e	; 0x27e <SPI_Write_Block>
    mirf_CSN_hi;
     3d8:	28 9a       	sbi	0x05, 0	; 5
}
     3da:	1f 91       	pop	r17
     3dc:	0f 91       	pop	r16
     3de:	ff 90       	pop	r15
     3e0:	08 95       	ret

000003e2 <mirf_read_register>:
    mirf_CSN_hi;
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
     3e2:	ff 92       	push	r15
     3e4:	0f 93       	push	r16
     3e6:	1f 93       	push	r17
     3e8:	8b 01       	movw	r16, r22
     3ea:	f4 2e       	mov	r15, r20
    mirf_CSN_lo;
     3ec:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
     3ee:	8f 71       	andi	r24, 0x1F	; 31
     3f0:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
     3f4:	c8 01       	movw	r24, r16
     3f6:	b8 01       	movw	r22, r16
     3f8:	4f 2d       	mov	r20, r15
     3fa:	0e 94 60 01 	call	0x2c0	; 0x2c0 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
     3fe:	28 9a       	sbi	0x05, 0	; 5
}
     400:	1f 91       	pop	r17
     402:	0f 91       	pop	r16
     404:	ff 90       	pop	r15
     406:	08 95       	ret

00000408 <writeAckPayload>:
    mirf_CSN_hi;                    // Pull up chip select
    
    mirf_CE_hi;                     // Start transmission
}

void writeAckPayload(unsigned char *data, unsigned char size) {
     408:	ff 92       	push	r15
     40a:	0f 93       	push	r16
     40c:	1f 93       	push	r17
     40e:	cf 93       	push	r28
     410:	df 93       	push	r29
     412:	08 2f       	mov	r16, r24
     414:	f9 2e       	mov	r15, r25
     416:	16 2f       	mov	r17, r22
	return pWidth;
}

void flushTxFifo() {

    mirf_CSN_lo;
     418:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
     41a:	81 ee       	ldi	r24, 0xE1	; 225
     41c:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
    mirf_CSN_hi;
     420:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
     422:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
     424:	88 ea       	ldi	r24, 0xA8	; 168
     426:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>

	for(k=0; k<size; k++) {
     42a:	11 23       	and	r17, r17
     42c:	59 f0       	breq	.+22     	; 0x444 <writeAckPayload+0x3c>
     42e:	80 2f       	mov	r24, r16
     430:	9f 2d       	mov	r25, r15
     432:	9c 01       	movw	r18, r24
     434:	e9 01       	movw	r28, r18
		SPI_Write_Byte(data[k]);
     436:	89 91       	ld	r24, Y+
     438:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>

    mirf_CSN_lo;

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);

	for(k=0; k<size; k++) {
     43c:	9e 01       	movw	r18, r28
     43e:	20 1b       	sub	r18, r16
     440:	21 17       	cp	r18, r17
     442:	c8 f3       	brcs	.-14     	; 0x436 <writeAckPayload+0x2e>
		SPI_Write_Byte(data[k]);
	}	

    mirf_CSN_hi;
     444:	28 9a       	sbi	0x05, 0	; 5


}
     446:	df 91       	pop	r29
     448:	cf 91       	pop	r28
     44a:	1f 91       	pop	r17
     44c:	0f 91       	pop	r16
     44e:	ff 90       	pop	r15
     450:	08 95       	ret

00000452 <readPayloadWidthFromPipe0>:
    mirf_CSN_hi;
	
	return pWidth;
}

uint8_t readPayloadWidthFromPipe0() {
     452:	df 93       	push	r29
     454:	cf 93       	push	r28
     456:	0f 92       	push	r0
     458:	cd b7       	in	r28, 0x3d	; 61
     45a:	de b7       	in	r29, 0x3e	; 62
	uint8_t pWidth = 0;
     45c:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
     45e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
     460:	81 e1       	ldi	r24, 0x11	; 17
     462:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
     466:	be 01       	movw	r22, r28
     468:	6f 5f       	subi	r22, 0xFF	; 255
     46a:	7f 4f       	sbci	r23, 0xFF	; 255
     46c:	cb 01       	movw	r24, r22
     46e:	41 e0       	ldi	r20, 0x01	; 1
     470:	0e 94 60 01 	call	0x2c0	; 0x2c0 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
     474:	28 9a       	sbi	0x05, 0	; 5
	uint8_t pWidth = 0;

	mirf_read_register(RX_PW_P0, &pWidth, 1);
	
	return pWidth;
}
     476:	89 81       	ldd	r24, Y+1	; 0x01
     478:	0f 90       	pop	r0
     47a:	cf 91       	pop	r28
     47c:	df 91       	pop	r29
     47e:	08 95       	ret

00000480 <rx_fifo_is_empty>:
    mirf_CSN_hi;                                // Pull up chip select
    return status & (1<<RX_DR);

}

uint8_t rx_fifo_is_empty() {
     480:	df 93       	push	r29
     482:	cf 93       	push	r28
     484:	0f 92       	push	r0
     486:	cd b7       	in	r28, 0x3d	; 61
     488:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t fifo_status = 0;
     48a:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
     48c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
     48e:	87 e1       	ldi	r24, 0x17	; 23
     490:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
     494:	be 01       	movw	r22, r28
     496:	6f 5f       	subi	r22, 0xFF	; 255
     498:	7f 4f       	sbci	r23, 0xFF	; 255
     49a:	cb 01       	movw	r24, r22
     49c:	41 e0       	ldi	r20, 0x01	; 1
     49e:	0e 94 60 01 	call	0x2c0	; 0x2c0 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
     4a2:	28 9a       	sbi	0x05, 0	; 5
     4a4:	89 81       	ldd	r24, Y+1	; 0x01
	uint8_t fifo_status = 0;

	mirf_read_register(FIFO_STATUS, &fifo_status, 1);
	
	return (uint8_t)(fifo_status&0x01);
}
     4a6:	81 70       	andi	r24, 0x01	; 1
     4a8:	0f 90       	pop	r0
     4aa:	cf 91       	pop	r28
     4ac:	df 91       	pop	r29
     4ae:	08 95       	ret

000004b0 <mirf_set_TADDR>:
    mirf_CE_hi;
}

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
     4b0:	0f 93       	push	r16
     4b2:	1f 93       	push	r17
     4b4:	8c 01       	movw	r16, r24
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
     4b6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     4b8:	80 e3       	ldi	r24, 0x30	; 48
     4ba:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     4be:	c8 01       	movw	r24, r16
     4c0:	65 e0       	ldi	r22, 0x05	; 5
     4c2:	0e 94 3f 01 	call	0x27e	; 0x27e <SPI_Write_Block>
    mirf_CSN_hi;
     4c6:	28 9a       	sbi	0x05, 0	; 5

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
	mirf_write_register(TX_ADDR, adr,5);
}
     4c8:	1f 91       	pop	r17
     4ca:	0f 91       	pop	r16
     4cc:	08 95       	ret

000004ce <mirf_set_RADDR>:
    //mirf_CE_hi;     // Listening for pakets
}

void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
     4ce:	0f 93       	push	r16
     4d0:	1f 93       	push	r17
     4d2:	8c 01       	movw	r16, r24
    mirf_CE_lo;
     4d4:	2c 98       	cbi	0x05, 4	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
     4d6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     4d8:	8a e2       	ldi	r24, 0x2A	; 42
     4da:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     4de:	c8 01       	movw	r24, r16
     4e0:	65 e0       	ldi	r22, 0x05	; 5
     4e2:	0e 94 3f 01 	call	0x27e	; 0x27e <SPI_Write_Block>
    mirf_CSN_hi;
     4e6:	28 9a       	sbi	0x05, 0	; 5
void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    mirf_CE_lo;
    mirf_write_register(RX_ADDR_P0,adr,5);
    mirf_CE_hi;
     4e8:	2c 9a       	sbi	0x05, 4	; 5
}
     4ea:	1f 91       	pop	r17
     4ec:	0f 91       	pop	r16
     4ee:	08 95       	ret

000004f0 <mirf_send>:


void mirf_send(uint8_t * value, uint8_t len) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
     4f0:	1f 93       	push	r17
     4f2:	cf 93       	push	r28
     4f4:	df 93       	push	r29
     4f6:	ec 01       	movw	r28, r24
     4f8:	16 2f       	mov	r17, r22
    while (PTX) {}                  // Wait until last paket is send
     4fa:	80 91 63 05 	lds	r24, 0x0563
     4fe:	88 23       	and	r24, r24
     500:	e1 f7       	brne	.-8      	; 0x4fa <mirf_send+0xa>

    mirf_CE_lo;
     502:	2c 98       	cbi	0x05, 4	; 5

    PTX = 1;                        // Set to transmitter mode
     504:	81 e0       	ldi	r24, 0x01	; 1
     506:	80 93 63 05 	sts	0x0563, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     50a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     50c:	80 e2       	ldi	r24, 0x20	; 32
     50e:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     512:	8a e4       	ldi	r24, 0x4A	; 74
     514:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
    mirf_CSN_hi;
     518:	28 9a       	sbi	0x05, 0	; 5
    mirf_CE_lo;

    PTX = 1;                        // Set to transmitter mode
    TX_POWERUP;                     // Power up
    
    mirf_CSN_lo;                    // Pull down chip select
     51a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( FLUSH_TX );     // Write cmd to flush tx fifo
     51c:	81 ee       	ldi	r24, 0xE1	; 225
     51e:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
    mirf_CSN_hi;                    // Pull up chip select
     522:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CSN_lo;                    // Pull down chip select
     524:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( W_TX_PAYLOAD ); // Write cmd to write payload
     526:	80 ea       	ldi	r24, 0xA0	; 160
     528:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
    SPI_Write_Block(value,len);   // Write payload
     52c:	ce 01       	movw	r24, r28
     52e:	61 2f       	mov	r22, r17
     530:	0e 94 3f 01 	call	0x27e	; 0x27e <SPI_Write_Block>
    mirf_CSN_hi;                    // Pull up chip select
     534:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CE_hi;                     // Start transmission
     536:	2c 9a       	sbi	0x05, 4	; 5
}
     538:	df 91       	pop	r29
     53a:	cf 91       	pop	r28
     53c:	1f 91       	pop	r17
     53e:	08 95       	ret

00000540 <mirf_config>:


void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
     540:	0f 93       	push	r16
     542:	1f 93       	push	r17
     544:	df 93       	push	r29
     546:	cf 93       	push	r28
     548:	00 d0       	rcall	.+0      	; 0x54a <mirf_config+0xa>
     54a:	cd b7       	in	r28, 0x3d	; 61
     54c:	de b7       	in	r29, 0x3e	; 62
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     54e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     550:	80 e2       	ldi	r24, 0x20	; 32
     552:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     556:	8d e0       	ldi	r24, 0x0D	; 13
     558:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
    mirf_CSN_hi;
     55c:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     55e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     560:	83 e2       	ldi	r24, 0x23	; 35
     562:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     566:	81 e0       	ldi	r24, 0x01	; 1
     568:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
    mirf_CSN_hi;
     56c:	28 9a       	sbi	0x05, 0	; 5

	// address width
	mirf_config_register(SETUP_AW, 0x01);

	// tx address
	temp[0] = (rfAddress>>8)&0xFF;
     56e:	80 91 31 03 	lds	r24, 0x0331
     572:	90 91 32 03 	lds	r25, 0x0332
     576:	99 83       	std	Y+1, r25	; 0x01
	temp[1] = rfAddress & 0xFF;
     578:	8a 83       	std	Y+2, r24	; 0x02
	temp[2] = 0x00;
     57a:	1b 82       	std	Y+3, r1	; 0x03
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
     57c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     57e:	80 e3       	ldi	r24, 0x30	; 48
     580:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     584:	8e 01       	movw	r16, r28
     586:	0f 5f       	subi	r16, 0xFF	; 255
     588:	1f 4f       	sbci	r17, 0xFF	; 255
     58a:	c8 01       	movw	r24, r16
     58c:	63 e0       	ldi	r22, 0x03	; 3
     58e:	0e 94 3f 01 	call	0x27e	; 0x27e <SPI_Write_Block>
    mirf_CSN_hi;
     592:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
     594:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     596:	8a e2       	ldi	r24, 0x2A	; 42
     598:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     59c:	c8 01       	movw	r24, r16
     59e:	63 e0       	ldi	r22, 0x03	; 3
     5a0:	0e 94 3f 01 	call	0x27e	; 0x27e <SPI_Write_Block>
    mirf_CSN_hi;
     5a4:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     5a6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     5a8:	81 e2       	ldi	r24, 0x21	; 33
     5aa:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
    mirf_CSN_hi;
     5b4:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     5b6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     5b8:	82 e2       	ldi	r24, 0x22	; 34
     5ba:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     5be:	81 e0       	ldi	r24, 0x01	; 1
     5c0:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
    mirf_CSN_hi;
     5c4:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     5c6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     5c8:	84 e2       	ldi	r24, 0x24	; 36
     5ca:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     5ce:	82 e1       	ldi	r24, 0x12	; 18
     5d0:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
    mirf_CSN_hi;
     5d4:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     5d6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     5d8:	85 e2       	ldi	r24, 0x25	; 37
     5da:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     5de:	88 e2       	ldi	r24, 0x28	; 40
     5e0:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
    mirf_CSN_hi;
     5e4:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     5e6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     5e8:	81 e3       	ldi	r24, 0x31	; 49
     5ea:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     5ee:	8d e0       	ldi	r24, 0x0D	; 13
     5f0:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
    mirf_CSN_hi;
     5f4:	28 9a       	sbi	0x05, 0	; 5

	// RX payload size; it isn't needed because the dynamic payload length is activated for ACK+PAYLOAD feature
    mirf_config_register(RX_PW_P0, PAYLOAD_SIZE);

	// enable extra features
    mirf_CSN_lo;
     5f6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_ACTIVATE);
     5f8:	80 e5       	ldi	r24, 0x50	; 80
     5fa:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
    SPI_Write_Byte(0x73);
     5fe:	83 e7       	ldi	r24, 0x73	; 115
     600:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
    mirf_CSN_hi;
     604:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     606:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     608:	8c e3       	ldi	r24, 0x3C	; 60
     60a:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
    mirf_CSN_hi;
     614:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     616:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     618:	8d e3       	ldi	r24, 0x3D	; 61
     61a:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     61e:	86 e0       	ldi	r24, 0x06	; 6
     620:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
    mirf_CSN_hi;
     624:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     626:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     628:	80 e2       	ldi	r24, 0x20	; 32
     62a:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     62e:	8f e0       	ldi	r24, 0x0F	; 15
     630:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
    mirf_CSN_hi;
     634:	28 9a       	sbi	0x05, 0	; 5

    // Start receiver 
    //PTX = 0;        // Start in receiving mode
    //RX_POWERUP;     // Power up in receiving mode
    //mirf_CE_hi;     // Listening for pakets
}
     636:	0f 90       	pop	r0
     638:	0f 90       	pop	r0
     63a:	0f 90       	pop	r0
     63c:	cf 91       	pop	r28
     63e:	df 91       	pop	r29
     640:	1f 91       	pop	r17
     642:	0f 91       	pop	r16
     644:	08 95       	ret

00000646 <mirf_init>:
// Initializes pins as interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    //DDRB |= ((1<<CSN)|(1<<CE));
    mirf_CE_hi;
     646:	2c 9a       	sbi	0x05, 4	; 5
    mirf_CSN_hi;
     648:	28 9a       	sbi	0x05, 0	; 5

	mirf_config();
     64a:	0e 94 a0 02 	call	0x540	; 0x540 <mirf_config>
}
     64e:	08 95       	ret

00000650 <mirf_get_data>:

}

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
     650:	0f 93       	push	r16
     652:	1f 93       	push	r17
     654:	8c 01       	movw	r16, r24
    mirf_CSN_lo;                               		// Pull down chip select
     656:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
     658:	81 e6       	ldi	r24, 0x61	; 97
     65a:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
     65e:	c8 01       	movw	r24, r16
     660:	b8 01       	movw	r22, r16
     662:	4d e0       	ldi	r20, 0x0D	; 13
     664:	0e 94 60 01 	call	0x2c0	; 0x2c0 <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
     668:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     66a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     66c:	87 e2       	ldi	r24, 0x27	; 39
     66e:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     672:	80 e4       	ldi	r24, 0x40	; 64
     674:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
    mirf_CSN_hi;
     678:	28 9a       	sbi	0x05, 0	; 5
    mirf_CSN_lo;                               		// Pull down chip select
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    mirf_CSN_hi;                               		// Pull up chip select
    mirf_config_register(STATUS,(1<<RX_DR));   		// Reset status register
}
     67a:	1f 91       	pop	r17
     67c:	0f 91       	pop	r16
     67e:	08 95       	ret

00000680 <handleRFCommands>:
    SPI_Write_Byte(FLUSH_TX);
    mirf_CSN_hi;

}

void handleRFCommands() {
     680:	0f 93       	push	r16
     682:	1f 93       	push	r17
     684:	df 93       	push	r29
     686:	cf 93       	push	r28
     688:	0f 92       	push	r0
     68a:	cd b7       	in	r28, 0x3d	; 61
     68c:	de b7       	in	r29, 0x3e	; 62
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
     68e:	80 91 63 05 	lds	r24, 0x0563
     692:	88 23       	and	r24, r24
     694:	31 f0       	breq	.+12     	; 0x6a2 <handleRFCommands+0x22>

		

	}

}
     696:	0f 90       	pop	r0
     698:	cf 91       	pop	r28
     69a:	df 91       	pop	r29
     69c:	1f 91       	pop	r17
     69e:	0f 91       	pop	r16
     6a0:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
     6a2:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
     6a4:	8f ef       	ldi	r24, 0xFF	; 255
     6a6:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
     6aa:	28 9a       	sbi	0x05, 0	; 5

	unsigned int i=0;
	//uint8_t pWidth = 0;
	//uint8_t pWidthP0 = 0;

	if(mirf_data_ready()) {
     6ac:	86 ff       	sbrs	r24, 6
     6ae:	f3 cf       	rjmp	.-26     	; 0x696 <handleRFCommands+0x16>
		//if(spiCommError) {
		//	usart0Transmit(0xFE,1);
		//	return;
		//}

		rfFlags |= 0x02;
     6b0:	80 91 33 03 	lds	r24, 0x0333
     6b4:	82 60       	ori	r24, 0x02	; 2
     6b6:	80 93 33 03 	sts	0x0333, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     6ba:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     6bc:	87 e2       	ldi	r24, 0x27	; 39
     6be:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     6c2:	80 e7       	ldi	r24, 0x70	; 112
     6c4:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
    mirf_CSN_hi;
     6c8:	28 9a       	sbi	0x05, 0	; 5

}

uint8_t rx_fifo_is_empty() {
	
	uint8_t fifo_status = 0;
     6ca:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
     6cc:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
     6ce:	87 e1       	ldi	r24, 0x17	; 23
     6d0:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
     6d4:	be 01       	movw	r22, r28
     6d6:	6f 5f       	subi	r22, 0xFF	; 255
     6d8:	7f 4f       	sbci	r23, 0xFF	; 255
     6da:	cb 01       	movw	r24, r22
     6dc:	41 e0       	ldi	r20, 0x01	; 1
     6de:	0e 94 60 01 	call	0x2c0	; 0x2c0 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
     6e2:	28 9a       	sbi	0x05, 0	; 5
		// aren't present in the fifo with consequent wrong data read and wrong behavior of the robot.
		// To avoid this situtation we add this check before actually reading from the fifo to be 
		// sure there are correct data to be read.
		// We don't know why the IRQ for data reception is raised, maybe is not correctly reset sometimes
		// or it is raised when it shouldn't...
		if(rx_fifo_is_empty()) {
     6e4:	89 81       	ldd	r24, Y+1	; 0x01
     6e6:	80 fd       	sbrc	r24, 0
     6e8:	d6 cf       	rjmp	.-84     	; 0x696 <handleRFCommands+0x16>
}

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    mirf_CSN_lo;                               		// Pull down chip select
     6ea:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
     6ec:	81 e6       	ldi	r24, 0x61	; 97
     6ee:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
     6f2:	88 eb       	ldi	r24, 0xB8	; 184
     6f4:	99 e0       	ldi	r25, 0x09	; 9
     6f6:	bc 01       	movw	r22, r24
     6f8:	4d e0       	ldi	r20, 0x0D	; 13
     6fa:	0e 94 60 01 	call	0x2c0	; 0x2c0 <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
     6fe:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     700:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     702:	87 e2       	ldi	r24, 0x27	; 39
     704:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     708:	80 e4       	ldi	r24, 0x40	; 64
     70a:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
    mirf_CSN_hi;
     70e:	28 9a       	sbi	0x05, 0	; 5
	return (uint8_t)(fifo_status&0x01);
}

void flush_rx_fifo() {

    mirf_CSN_lo;
     710:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
     712:	82 ee       	ldi	r24, 0xE2	; 226
     714:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
    mirf_CSN_hi;
     718:	28 9a       	sbi	0x05, 0	; 5
		mirf_get_data(rfData);
		flush_rx_fifo();

		//usartTransmit(rfData[0]);

		if(rfDebugMode==1) {
     71a:	80 91 35 03 	lds	r24, 0x0335
     71e:	81 30       	cpi	r24, 0x01	; 1
     720:	09 f4       	brne	.+2      	; 0x724 <handleRFCommands+0xa4>
     722:	91 c2       	rjmp	.+1314   	; 0xc46 <handleRFCommands+0x5c6>

			//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
			// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
			// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
     724:	80 91 b8 09 	lds	r24, 0x09B8
     728:	88 23       	and	r24, r24
     72a:	b9 f4       	brne	.+46     	; 0x75a <handleRFCommands+0xda>
     72c:	80 91 b9 09 	lds	r24, 0x09B9
     730:	88 23       	and	r24, r24
     732:	99 f4       	brne	.+38     	; 0x75a <handleRFCommands+0xda>
     734:	80 91 ba 09 	lds	r24, 0x09BA
     738:	88 23       	and	r24, r24
     73a:	79 f4       	brne	.+30     	; 0x75a <handleRFCommands+0xda>
     73c:	80 91 bb 09 	lds	r24, 0x09BB
     740:	88 30       	cpi	r24, 0x08	; 8
     742:	59 f4       	brne	.+22     	; 0x75a <handleRFCommands+0xda>
     744:	80 91 bc 09 	lds	r24, 0x09BC
     748:	88 23       	and	r24, r24
     74a:	39 f4       	brne	.+14     	; 0x75a <handleRFCommands+0xda>
     74c:	80 91 bd 09 	lds	r24, 0x09BD
     750:	88 23       	and	r24, r24
     752:	19 f4       	brne	.+6      	; 0x75a <handleRFCommands+0xda>

				sleep(60);
     754:	8c e3       	ldi	r24, 0x3C	; 60
     756:	0e 94 ac 10 	call	0x2158	; 0x2158 <sleep>

			}

			if(calibrateOdomFlag==0) { 
     75a:	80 91 9c 05 	lds	r24, 0x059C
     75e:	88 23       	and	r24, r24
     760:	41 f5       	brne	.+80     	; 0x7b2 <handleRFCommands+0x132>
				speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
     762:	80 91 bc 09 	lds	r24, 0x09BC
     766:	28 2f       	mov	r18, r24
     768:	30 e0       	ldi	r19, 0x00	; 0
     76a:	2f 77       	andi	r18, 0x7F	; 127
     76c:	30 70       	andi	r19, 0x00	; 0
     76e:	30 93 30 03 	sts	0x0330, r19
     772:	20 93 2f 03 	sts	0x032F, r18
				speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
     776:	60 91 bd 09 	lds	r22, 0x09BD
     77a:	46 2f       	mov	r20, r22
     77c:	50 e0       	ldi	r21, 0x00	; 0
     77e:	4f 77       	andi	r20, 0x7F	; 127
     780:	50 70       	andi	r21, 0x00	; 0
     782:	50 93 2e 03 	sts	0x032E, r21
     786:	40 93 2d 03 	sts	0x032D, r20
											// in the same range of the measured speed that is 0..800.
											// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
											// this means that the range is more or less 0..400.


				if((rfData[4]&0x80)==0x80) {			// motor right forward
     78a:	87 fd       	sbrc	r24, 7
     78c:	27 c2       	rjmp	.+1102   	; 0xbdc <handleRFCommands+0x55c>
					pwm_right_desired = speedr; 		// speed received (0..127) is expressed in 1/5 of mm/s (0..635 mm/s)
				} else {								// backward
					pwm_right_desired = -(speedr);
     78e:	88 27       	eor	r24, r24
     790:	99 27       	eor	r25, r25
     792:	82 1b       	sub	r24, r18
     794:	93 0b       	sbc	r25, r19
     796:	90 93 16 03 	sts	0x0316, r25
     79a:	80 93 15 03 	sts	0x0315, r24
				}

				if((rfData[5]&0x80)==0x80) {			// motor left forward
     79e:	67 fd       	sbrc	r22, 7
     7a0:	83 c3       	rjmp	.+1798   	; 0xea8 <handleRFCommands+0x828>
					pwm_left_desired = speedl;
				} else {								// backward
					pwm_left_desired = -(speedl);
     7a2:	88 27       	eor	r24, r24
     7a4:	99 27       	eor	r25, r25
     7a6:	84 1b       	sub	r24, r20
     7a8:	95 0b       	sbc	r25, r21
     7aa:	90 93 18 03 	sts	0x0318, r25
     7ae:	80 93 17 03 	sts	0x0317, r24

			}


			for(i=0; i<3; i++) {
				dataLED[i]=rfData[i]&0xFF;
     7b2:	20 91 b8 09 	lds	r18, 0x09B8
     7b6:	30 e0       	ldi	r19, 0x00	; 0
     7b8:	30 93 a1 09 	sts	0x09A1, r19
     7bc:	20 93 a0 09 	sts	0x09A0, r18
     7c0:	e0 91 b9 09 	lds	r30, 0x09B9
     7c4:	f0 e0       	ldi	r31, 0x00	; 0
     7c6:	f0 93 a3 09 	sts	0x09A3, r31
     7ca:	e0 93 a2 09 	sts	0x09A2, r30
     7ce:	00 91 ba 09 	lds	r16, 0x09BA
     7d2:	10 e0       	ldi	r17, 0x00	; 0
     7d4:	10 93 a5 09 	sts	0x09A5, r17
     7d8:	00 93 a4 09 	sts	0x09A4, r16
			}
			pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
     7dc:	92 2f       	mov	r25, r18
     7de:	88 27       	eor	r24, r24
     7e0:	82 1b       	sub	r24, r18
     7e2:	93 0b       	sbc	r25, r19
     7e4:	64 e6       	ldi	r22, 0x64	; 100
     7e6:	70 e0       	ldi	r23, 0x00	; 0
     7e8:	0e 94 a8 57 	call	0xaf50	; 0xaf50 <__udivmodhi4>
     7ec:	26 2f       	mov	r18, r22
     7ee:	20 95       	com	r18
     7f0:	20 93 08 02 	sts	0x0208, r18
			pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
     7f4:	9e 2f       	mov	r25, r30
     7f6:	88 27       	eor	r24, r24
     7f8:	8e 1b       	sub	r24, r30
     7fa:	9f 0b       	sbc	r25, r31
     7fc:	64 e6       	ldi	r22, 0x64	; 100
     7fe:	70 e0       	ldi	r23, 0x00	; 0
     800:	0e 94 a8 57 	call	0xaf50	; 0xaf50 <__udivmodhi4>
     804:	60 95       	com	r22
     806:	60 93 0a 02 	sts	0x020A, r22
			pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
     80a:	90 2f       	mov	r25, r16
     80c:	88 27       	eor	r24, r24
     80e:	80 1b       	sub	r24, r16
     810:	91 0b       	sbc	r25, r17
     812:	64 e6       	ldi	r22, 0x64	; 100
     814:	70 e0       	ldi	r23, 0x00	; 0
     816:	0e 94 a8 57 	call	0xaf50	; 0xaf50 <__udivmodhi4>
     81a:	60 95       	com	r22
     81c:	60 93 09 02 	sts	0x0209, r22
			updateRedLed(pwm_red);
     820:	82 2f       	mov	r24, r18
     822:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <updateRedLed>
			updateGreenLed(pwm_green);
     826:	80 91 09 02 	lds	r24, 0x0209
     82a:	0e 94 34 36 	call	0x6c68	; 0x6c68 <updateGreenLed>
			updateBlueLed(pwm_blue);
     82e:	80 91 0a 02 	lds	r24, 0x020A
     832:	0e 94 4a 36 	call	0x6c94	; 0x6c94 <updateBlueLed>


			if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
     836:	20 91 bb 09 	lds	r18, 0x09BB
     83a:	92 2f       	mov	r25, r18
     83c:	20 ff       	sbrs	r18, 0
     83e:	11 c1       	rjmp	.+546    	; 0xa62 <handleRFCommands+0x3e2>
				LED_IR1_LOW;
     840:	44 98       	cbi	0x08, 4	; 8
			} else {
				LED_IR1_HIGH;
			}

			if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
     842:	91 ff       	sbrs	r25, 1
     844:	3c c1       	rjmp	.+632    	; 0xabe <handleRFCommands+0x43e>
				LED_IR2_LOW;
     846:	45 98       	cbi	0x08, 5	; 8
			} else {
				LED_IR2_HIGH;
			}

			if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
     848:	92 ff       	sbrs	r25, 2
     84a:	36 c1       	rjmp	.+620    	; 0xab8 <handleRFCommands+0x438>
				irEnabled = 1;
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	80 93 0e 02 	sts	0x020E, r24
			} else {
				irEnabled = 0;
			}

			if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
     852:	94 fd       	sbrc	r25, 4
     854:	e6 c1       	rjmp	.+972    	; 0xc22 <handleRFCommands+0x5a2>
				calibrateSensors();
				resetOdometry();
			}

			if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
     856:	96 ff       	sbrs	r25, 6
     858:	2c c1       	rjmp	.+600    	; 0xab2 <handleRFCommands+0x432>
				obstacleAvoidanceEnabled = 1;
     85a:	81 e0       	ldi	r24, 0x01	; 1
     85c:	80 93 94 04 	sts	0x0494, r24
			} else {
				obstacleAvoidanceEnabled = 0;
			}

			if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
     860:	27 fd       	sbrc	r18, 7
     862:	e7 c1       	rjmp	.+974    	; 0xc32 <handleRFCommands+0x5b2>
				cliffAvoidanceEnabled = 1;
			} else {
				cliffAvoidanceEnabled = 0;
     864:	10 92 95 04 	sts	0x0495, r1
			}

			// handle small green leds
			#ifdef HW_REV_3_1			

				if(bit_is_set(rfData[6], 0) ) {
     868:	80 91 be 09 	lds	r24, 0x09BE
     86c:	80 ff       	sbrs	r24, 0
     86e:	1b c1       	rjmp	.+566    	; 0xaa6 <handleRFCommands+0x426>
					GREEN_LED0_ON;
     870:	80 91 0b 01 	lds	r24, 0x010B
     874:	8e 7f       	andi	r24, 0xFE	; 254
     876:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED0_OFF;
				}
				
				if(bit_is_set(rfData[6], 1) ) {
     87a:	80 91 be 09 	lds	r24, 0x09BE
     87e:	81 ff       	sbrs	r24, 1
     880:	0c c1       	rjmp	.+536    	; 0xa9a <handleRFCommands+0x41a>
					GREEN_LED1_ON;
     882:	80 91 0b 01 	lds	r24, 0x010B
     886:	8d 7f       	andi	r24, 0xFD	; 253
     888:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED1_OFF;
				}
				
				if(bit_is_set(rfData[6], 2) ) {
     88c:	80 91 be 09 	lds	r24, 0x09BE
     890:	82 ff       	sbrs	r24, 2
     892:	fd c0       	rjmp	.+506    	; 0xa8e <handleRFCommands+0x40e>
					GREEN_LED2_ON;
     894:	80 91 0b 01 	lds	r24, 0x010B
     898:	8b 7f       	andi	r24, 0xFB	; 251
     89a:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED2_OFF;
				}												

				if(bit_is_set(rfData[6], 3) ) {
     89e:	80 91 be 09 	lds	r24, 0x09BE
     8a2:	83 ff       	sbrs	r24, 3
     8a4:	f2 c0       	rjmp	.+484    	; 0xa8a <handleRFCommands+0x40a>
					GREEN_LED3_ON;
     8a6:	a3 98       	cbi	0x14, 3	; 20
				} else {
					GREEN_LED3_OFF;
				}

				if(bit_is_set(rfData[6], 4) ) {
     8a8:	80 91 be 09 	lds	r24, 0x09BE
     8ac:	84 ff       	sbrs	r24, 4
     8ae:	e7 c0       	rjmp	.+462    	; 0xa7e <handleRFCommands+0x3fe>
					GREEN_LED4_ON;
     8b0:	80 91 0b 01 	lds	r24, 0x010B
     8b4:	8f 7e       	andi	r24, 0xEF	; 239
     8b6:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED4_OFF;
				}

				if(bit_is_set(rfData[6], 5) ) {
     8ba:	80 91 be 09 	lds	r24, 0x09BE
     8be:	85 ff       	sbrs	r24, 5
     8c0:	d8 c0       	rjmp	.+432    	; 0xa72 <handleRFCommands+0x3f2>
					GREEN_LED5_ON;
     8c2:	80 91 0b 01 	lds	r24, 0x010B
     8c6:	8f 7d       	andi	r24, 0xDF	; 223
     8c8:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED5_OFF;
				}

				if(bit_is_set(rfData[6], 6) ) {
     8cc:	80 91 be 09 	lds	r24, 0x09BE
     8d0:	86 ff       	sbrs	r24, 6
     8d2:	c9 c0       	rjmp	.+402    	; 0xa66 <handleRFCommands+0x3e6>
					GREEN_LED6_ON;
     8d4:	80 91 0b 01 	lds	r24, 0x010B
     8d8:	8f 7b       	andi	r24, 0xBF	; 191
     8da:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED6_OFF;
				}

				if(bit_is_set(rfData[6], 7) ) {
     8de:	80 91 be 09 	lds	r24, 0x09BE
     8e2:	87 fd       	sbrc	r24, 7
     8e4:	aa c1       	rjmp	.+852    	; 0xc3a <handleRFCommands+0x5ba>
					GREEN_LED7_ON;
				} else {
					GREEN_LED7_OFF;
     8e6:	80 91 0b 01 	lds	r24, 0x010B
     8ea:	80 68       	ori	r24, 0x80	; 128
     8ec:	80 93 0b 01 	sts	0x010B, r24
				}

			#endif
		
			if(currentSelector == 8) {
     8f0:	80 91 70 04 	lds	r24, 0x0470
     8f4:	88 30       	cpi	r24, 0x08	; 8
     8f6:	09 f4       	brne	.+2      	; 0x8fa <handleRFCommands+0x27a>
     8f8:	76 c1       	rjmp	.+748    	; 0xbe6 <handleRFCommands+0x566>

			// read and handle the remaining bytes of the payload (at the moment not used)


			// write back the ack payload
			ackPayload[0] = packetId&0xFF;
     8fa:	80 91 07 02 	lds	r24, 0x0207
     8fe:	80 93 f0 08 	sts	0x08F0, r24

			switch(packetId) {
     902:	85 30       	cpi	r24, 0x05	; 5
     904:	09 f4       	brne	.+2      	; 0x908 <handleRFCommands+0x288>
     906:	74 c2       	rjmp	.+1256   	; 0xdf0 <handleRFCommands+0x770>
     908:	86 30       	cpi	r24, 0x06	; 6
     90a:	08 f0       	brcs	.+2      	; 0x90e <handleRFCommands+0x28e>
     90c:	da c0       	rjmp	.+436    	; 0xac2 <handleRFCommands+0x442>
     90e:	83 30       	cpi	r24, 0x03	; 3
     910:	09 f4       	brne	.+2      	; 0x914 <handleRFCommands+0x294>
     912:	f4 c1       	rjmp	.+1000   	; 0xcfc <handleRFCommands+0x67c>
     914:	84 30       	cpi	r24, 0x04	; 4
     916:	09 f0       	breq	.+2      	; 0x91a <handleRFCommands+0x29a>
     918:	54 c0       	rjmp	.+168    	; 0x9c2 <handleRFCommands+0x342>
					#endif
					packetId = 4;
					break;

				case 4:
					ackPayload[1] = proximityResult[4]&0xFF;
     91a:	80 91 7d 02 	lds	r24, 0x027D
     91e:	90 91 7e 02 	lds	r25, 0x027E
     922:	80 93 f1 08 	sts	0x08F1, r24
					ackPayload[2] = proximityResult[4]>>8;
     926:	89 2f       	mov	r24, r25
     928:	99 0f       	add	r25, r25
     92a:	99 0b       	sbc	r25, r25
     92c:	80 93 f2 08 	sts	0x08F2, r24
					ackPayload[3] = proximityResult[8]&0xFF;
     930:	80 91 85 02 	lds	r24, 0x0285
     934:	90 91 86 02 	lds	r25, 0x0286
     938:	80 93 f3 08 	sts	0x08F3, r24
					ackPayload[4] = proximityResult[8]>>8;
     93c:	89 2f       	mov	r24, r25
     93e:	99 0f       	add	r25, r25
     940:	99 0b       	sbc	r25, r25
     942:	80 93 f4 08 	sts	0x08F4, r24
					ackPayload[5] = proximityResult[9]&0xFF;
     946:	80 91 87 02 	lds	r24, 0x0287
     94a:	90 91 88 02 	lds	r25, 0x0288
     94e:	80 93 f5 08 	sts	0x08F5, r24
					ackPayload[6] = proximityResult[9]>>8;
     952:	89 2f       	mov	r24, r25
     954:	99 0f       	add	r25, r25
     956:	99 0b       	sbc	r25, r25
     958:	80 93 f6 08 	sts	0x08F6, r24
					ackPayload[7] = proximityResult[10]&0xFF;
     95c:	80 91 89 02 	lds	r24, 0x0289
     960:	90 91 8a 02 	lds	r25, 0x028A
     964:	80 93 f7 08 	sts	0x08F7, r24
					ackPayload[8] = proximityResult[10]>>8;
     968:	89 2f       	mov	r24, r25
     96a:	99 0f       	add	r25, r25
     96c:	99 0b       	sbc	r25, r25
     96e:	80 93 f8 08 	sts	0x08F8, r24
					ackPayload[9] = proximityResult[11]&0xFF;
     972:	80 91 8b 02 	lds	r24, 0x028B
     976:	90 91 8c 02 	lds	r25, 0x028C
     97a:	80 93 f9 08 	sts	0x08F9, r24
					ackPayload[10] = proximityResult[11]>>8;
     97e:	89 2f       	mov	r24, r25
     980:	99 0f       	add	r25, r25
     982:	99 0b       	sbc	r25, r25
     984:	80 93 fa 08 	sts	0x08FA, r24
					ackPayload[11] = accX&0xFF;
     988:	80 91 4c 04 	lds	r24, 0x044C
     98c:	90 91 4d 04 	lds	r25, 0x044D
     990:	80 93 fb 08 	sts	0x08FB, r24
					ackPayload[12] = accX>>8;
     994:	89 2f       	mov	r24, r25
     996:	99 0f       	add	r25, r25
     998:	99 0b       	sbc	r25, r25
     99a:	80 93 fc 08 	sts	0x08FC, r24
					ackPayload[13] = accY&0xFF;
     99e:	80 91 4e 04 	lds	r24, 0x044E
     9a2:	90 91 4f 04 	lds	r25, 0x044F
     9a6:	80 93 fd 08 	sts	0x08FD, r24
					ackPayload[14] = accY>>8;
     9aa:	89 2f       	mov	r24, r25
     9ac:	99 0f       	add	r25, r25
     9ae:	99 0b       	sbc	r25, r25
     9b0:	80 93 fe 08 	sts	0x08FE, r24
					ackPayload[15] = irCommand;
     9b4:	80 91 43 04 	lds	r24, 0x0443
     9b8:	80 93 ff 08 	sts	0x08FF, r24
					packetId = 5;
     9bc:	85 e0       	ldi	r24, 0x05	; 5
     9be:	80 93 07 02 	sts	0x0207, r24
	return pWidth;
}

void flushTxFifo() {

    mirf_CSN_lo;
     9c2:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
     9c4:	81 ee       	ldi	r24, 0xE1	; 225
     9c6:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
    mirf_CSN_hi;
     9ca:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
     9cc:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
     9ce:	88 ea       	ldi	r24, 0xA8	; 168
     9d0:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>

	for(k=0; k<size; k++) {
		SPI_Write_Byte(data[k]);
     9d4:	80 91 f0 08 	lds	r24, 0x08F0
     9d8:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
     9dc:	80 91 f1 08 	lds	r24, 0x08F1
     9e0:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
     9e4:	80 91 f2 08 	lds	r24, 0x08F2
     9e8:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
     9ec:	80 91 f3 08 	lds	r24, 0x08F3
     9f0:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
     9f4:	80 91 f4 08 	lds	r24, 0x08F4
     9f8:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
     9fc:	80 91 f5 08 	lds	r24, 0x08F5
     a00:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
     a04:	80 91 f6 08 	lds	r24, 0x08F6
     a08:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
     a0c:	80 91 f7 08 	lds	r24, 0x08F7
     a10:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
     a14:	80 91 f8 08 	lds	r24, 0x08F8
     a18:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
     a1c:	80 91 f9 08 	lds	r24, 0x08F9
     a20:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
     a24:	80 91 fa 08 	lds	r24, 0x08FA
     a28:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
     a2c:	80 91 fb 08 	lds	r24, 0x08FB
     a30:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
     a34:	80 91 fc 08 	lds	r24, 0x08FC
     a38:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
     a3c:	80 91 fd 08 	lds	r24, 0x08FD
     a40:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
     a44:	80 91 fe 08 	lds	r24, 0x08FE
     a48:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
     a4c:	80 91 ff 08 	lds	r24, 0x08FF
     a50:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_Write_Byte>
	}	

    mirf_CSN_hi;
     a54:	28 9a       	sbi	0x05, 0	; 5

		

	}

}
     a56:	0f 90       	pop	r0
     a58:	cf 91       	pop	r28
     a5a:	df 91       	pop	r29
     a5c:	1f 91       	pop	r17
     a5e:	0f 91       	pop	r16
     a60:	08 95       	ret


			if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
				LED_IR1_LOW;
			} else {
				LED_IR1_HIGH;
     a62:	44 9a       	sbi	0x08, 4	; 8
     a64:	ee ce       	rjmp	.-548    	; 0x842 <handleRFCommands+0x1c2>
				}

				if(bit_is_set(rfData[6], 6) ) {
					GREEN_LED6_ON;
				} else {
					GREEN_LED6_OFF;
     a66:	80 91 0b 01 	lds	r24, 0x010B
     a6a:	80 64       	ori	r24, 0x40	; 64
     a6c:	80 93 0b 01 	sts	0x010B, r24
     a70:	36 cf       	rjmp	.-404    	; 0x8de <handleRFCommands+0x25e>
				}

				if(bit_is_set(rfData[6], 5) ) {
					GREEN_LED5_ON;
				} else {
					GREEN_LED5_OFF;
     a72:	80 91 0b 01 	lds	r24, 0x010B
     a76:	80 62       	ori	r24, 0x20	; 32
     a78:	80 93 0b 01 	sts	0x010B, r24
     a7c:	27 cf       	rjmp	.-434    	; 0x8cc <handleRFCommands+0x24c>
				}

				if(bit_is_set(rfData[6], 4) ) {
					GREEN_LED4_ON;
				} else {
					GREEN_LED4_OFF;
     a7e:	80 91 0b 01 	lds	r24, 0x010B
     a82:	80 61       	ori	r24, 0x10	; 16
     a84:	80 93 0b 01 	sts	0x010B, r24
     a88:	18 cf       	rjmp	.-464    	; 0x8ba <handleRFCommands+0x23a>
				}												

				if(bit_is_set(rfData[6], 3) ) {
					GREEN_LED3_ON;
				} else {
					GREEN_LED3_OFF;
     a8a:	a3 9a       	sbi	0x14, 3	; 20
     a8c:	0d cf       	rjmp	.-486    	; 0x8a8 <handleRFCommands+0x228>
				}
				
				if(bit_is_set(rfData[6], 2) ) {
					GREEN_LED2_ON;
				} else {
					GREEN_LED2_OFF;
     a8e:	80 91 0b 01 	lds	r24, 0x010B
     a92:	84 60       	ori	r24, 0x04	; 4
     a94:	80 93 0b 01 	sts	0x010B, r24
     a98:	02 cf       	rjmp	.-508    	; 0x89e <handleRFCommands+0x21e>
				}
				
				if(bit_is_set(rfData[6], 1) ) {
					GREEN_LED1_ON;
				} else {
					GREEN_LED1_OFF;
     a9a:	80 91 0b 01 	lds	r24, 0x010B
     a9e:	82 60       	ori	r24, 0x02	; 2
     aa0:	80 93 0b 01 	sts	0x010B, r24
     aa4:	f3 ce       	rjmp	.-538    	; 0x88c <handleRFCommands+0x20c>
			#ifdef HW_REV_3_1			

				if(bit_is_set(rfData[6], 0) ) {
					GREEN_LED0_ON;
				} else {
					GREEN_LED0_OFF;
     aa6:	80 91 0b 01 	lds	r24, 0x010B
     aaa:	81 60       	ori	r24, 0x01	; 1
     aac:	80 93 0b 01 	sts	0x010B, r24
     ab0:	e4 ce       	rjmp	.-568    	; 0x87a <handleRFCommands+0x1fa>
			}

			if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
				obstacleAvoidanceEnabled = 1;
			} else {
				obstacleAvoidanceEnabled = 0;
     ab2:	10 92 94 04 	sts	0x0494, r1
     ab6:	d4 ce       	rjmp	.-600    	; 0x860 <handleRFCommands+0x1e0>
			}

			if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
				irEnabled = 1;
			} else {
				irEnabled = 0;
     ab8:	10 92 0e 02 	sts	0x020E, r1
     abc:	ca ce       	rjmp	.-620    	; 0x852 <handleRFCommands+0x1d2>
			}

			if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
				LED_IR2_LOW;
			} else {
				LED_IR2_HIGH;
     abe:	45 9a       	sbi	0x08, 5	; 8
     ac0:	c3 ce       	rjmp	.-634    	; 0x848 <handleRFCommands+0x1c8>


			// write back the ack payload
			ackPayload[0] = packetId&0xFF;

			switch(packetId) {
     ac2:	86 30       	cpi	r24, 0x06	; 6
     ac4:	09 f4       	brne	.+2      	; 0xac8 <handleRFCommands+0x448>
     ac6:	c5 c0       	rjmp	.+394    	; 0xc52 <handleRFCommands+0x5d2>
     ac8:	87 30       	cpi	r24, 0x07	; 7
     aca:	09 f0       	breq	.+2      	; 0xace <handleRFCommands+0x44e>
     acc:	7a cf       	rjmp	.-268    	; 0x9c2 <handleRFCommands+0x342>
					packetId = 7;
					break;


				case 7:
					ackPayload[1] = ((signed long int)leftMotSteps)&0xFF;
     ace:	60 91 f1 02 	lds	r22, 0x02F1
     ad2:	70 91 f2 02 	lds	r23, 0x02F2
     ad6:	80 91 f3 02 	lds	r24, 0x02F3
     ada:	90 91 f4 02 	lds	r25, 0x02F4
     ade:	0e 94 b2 55 	call	0xab64	; 0xab64 <__fixsfsi>
     ae2:	60 93 f1 08 	sts	0x08F1, r22
					ackPayload[2] = ((signed long int)leftMotSteps)>>8;
     ae6:	27 2f       	mov	r18, r23
     ae8:	38 2f       	mov	r19, r24
     aea:	49 2f       	mov	r20, r25
     aec:	55 27       	eor	r21, r21
     aee:	47 fd       	sbrc	r20, 7
     af0:	5a 95       	dec	r21
     af2:	20 93 f2 08 	sts	0x08F2, r18
					ackPayload[3] = ((signed long int)leftMotSteps)>>16;
     af6:	9c 01       	movw	r18, r24
     af8:	55 27       	eor	r21, r21
     afa:	37 fd       	sbrc	r19, 7
     afc:	50 95       	com	r21
     afe:	45 2f       	mov	r20, r21
     b00:	20 93 f3 08 	sts	0x08F3, r18
					ackPayload[4] = ((signed long int)leftMotSteps)>>24;
     b04:	69 2f       	mov	r22, r25
     b06:	99 27       	eor	r25, r25
     b08:	67 fd       	sbrc	r22, 7
     b0a:	90 95       	com	r25
     b0c:	79 2f       	mov	r23, r25
     b0e:	89 2f       	mov	r24, r25
     b10:	60 93 f4 08 	sts	0x08F4, r22
					ackPayload[5] = ((signed long int)rightMotSteps)&0xFF;
     b14:	60 91 ed 02 	lds	r22, 0x02ED
     b18:	70 91 ee 02 	lds	r23, 0x02EE
     b1c:	80 91 ef 02 	lds	r24, 0x02EF
     b20:	90 91 f0 02 	lds	r25, 0x02F0
     b24:	0e 94 b2 55 	call	0xab64	; 0xab64 <__fixsfsi>
     b28:	60 93 f5 08 	sts	0x08F5, r22
					ackPayload[6] = ((signed long int)rightMotSteps)>>8;
     b2c:	27 2f       	mov	r18, r23
     b2e:	38 2f       	mov	r19, r24
     b30:	49 2f       	mov	r20, r25
     b32:	55 27       	eor	r21, r21
     b34:	47 fd       	sbrc	r20, 7
     b36:	5a 95       	dec	r21
     b38:	20 93 f6 08 	sts	0x08F6, r18
					ackPayload[7] = ((signed long int)rightMotSteps)>>16;
     b3c:	9c 01       	movw	r18, r24
     b3e:	55 27       	eor	r21, r21
     b40:	37 fd       	sbrc	r19, 7
     b42:	50 95       	com	r21
     b44:	45 2f       	mov	r20, r21
     b46:	20 93 f7 08 	sts	0x08F7, r18
					ackPayload[8] = ((signed long int)rightMotSteps)>>24;
     b4a:	69 2f       	mov	r22, r25
     b4c:	99 27       	eor	r25, r25
     b4e:	67 fd       	sbrc	r22, 7
     b50:	90 95       	com	r25
     b52:	79 2f       	mov	r23, r25
     b54:	89 2f       	mov	r24, r25
     b56:	60 93 f8 08 	sts	0x08F8, r22
					lastTheta = theta;
     b5a:	60 91 97 04 	lds	r22, 0x0497
     b5e:	70 91 98 04 	lds	r23, 0x0498
     b62:	80 91 99 04 	lds	r24, 0x0499
     b66:	90 91 9a 04 	lds	r25, 0x049A
     b6a:	60 93 9b 04 	sts	0x049B, r22
     b6e:	70 93 9c 04 	sts	0x049C, r23
     b72:	80 93 9d 04 	sts	0x049D, r24
     b76:	90 93 9e 04 	sts	0x049E, r25
					ackPayload[9] = ((signed int)(lastTheta*573.0))&0xFF;	// radians to degrees => 573 = 1800/PI
     b7a:	20 e0       	ldi	r18, 0x00	; 0
     b7c:	30 e4       	ldi	r19, 0x40	; 64
     b7e:	4f e0       	ldi	r20, 0x0F	; 15
     b80:	54 e4       	ldi	r21, 0x44	; 68
     b82:	0e 94 fe 56 	call	0xadfc	; 0xadfc <__mulsf3>
     b86:	0e 94 b2 55 	call	0xab64	; 0xab64 <__fixsfsi>
     b8a:	60 93 f9 08 	sts	0x08F9, r22
					ackPayload[10] = ((signed int)(lastTheta*573.0))>>8;				
     b8e:	67 2f       	mov	r22, r23
     b90:	77 0f       	add	r23, r23
     b92:	77 0b       	sbc	r23, r23
     b94:	60 93 fa 08 	sts	0x08FA, r22
					ackPayload[11] = ((unsigned int)xPos)&0xFF;
     b98:	60 91 9f 04 	lds	r22, 0x049F
     b9c:	70 91 a0 04 	lds	r23, 0x04A0
     ba0:	80 91 a1 04 	lds	r24, 0x04A1
     ba4:	90 91 a2 04 	lds	r25, 0x04A2
     ba8:	0e 94 b7 55 	call	0xab6e	; 0xab6e <__fixunssfsi>
     bac:	60 93 fb 08 	sts	0x08FB, r22
					ackPayload[12] = ((unsigned int)xPos)>>8;
     bb0:	70 93 fc 08 	sts	0x08FC, r23
					ackPayload[13] = ((unsigned int)yPos)&0xFF;
     bb4:	60 91 a3 04 	lds	r22, 0x04A3
     bb8:	70 91 a4 04 	lds	r23, 0x04A4
     bbc:	80 91 a5 04 	lds	r24, 0x04A5
     bc0:	90 91 a6 04 	lds	r25, 0x04A6
     bc4:	0e 94 b7 55 	call	0xab6e	; 0xab6e <__fixunssfsi>
     bc8:	60 93 fd 08 	sts	0x08FD, r22
					ackPayload[14] = ((unsigned int)yPos)>>8;
     bcc:	70 93 fe 08 	sts	0x08FE, r23
					//ackPayload[10] = ((unsigned int)(thetaOld*573.0))>>8;
					//ackPayload[11] = ((unsigned int)xPosOld)&0xFF;
					//ackPayload[12] = ((unsigned int)xPosOld)>>8;
					//ackPayload[13] = ((unsigned int)yPosOld)&0xFF;
					//ackPayload[14] = ((unsigned int)yPosOld)>>8;
					ackPayload[15] = 0;
     bd0:	10 92 ff 08 	sts	0x08FF, r1
					packetId = 3;
     bd4:	83 e0       	ldi	r24, 0x03	; 3
     bd6:	80 93 07 02 	sts	0x0207, r24
     bda:	f3 ce       	rjmp	.-538    	; 0x9c2 <handleRFCommands+0x342>
											// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
											// this means that the range is more or less 0..400.


				if((rfData[4]&0x80)==0x80) {			// motor right forward
					pwm_right_desired = speedr; 		// speed received (0..127) is expressed in 1/5 of mm/s (0..635 mm/s)
     bdc:	30 93 16 03 	sts	0x0316, r19
     be0:	20 93 15 03 	sts	0x0315, r18
     be4:	dc cd       	rjmp	.-1096   	; 0x79e <handleRFCommands+0x11e>
				}

			#endif
		
			if(currentSelector == 8) {
				if(calibrateOdomFlag==0) {
     be6:	80 91 9c 05 	lds	r24, 0x059C
     bea:	88 23       	and	r24, r24
     bec:	09 f0       	breq	.+2      	; 0xbf0 <handleRFCommands+0x570>
     bee:	85 ce       	rjmp	.-758    	; 0x8fa <handleRFCommands+0x27a>
					if((rfData[7]&0b00000001)==0b00000001) {
     bf0:	80 91 bf 09 	lds	r24, 0x09BF
     bf4:	80 ff       	sbrs	r24, 0
     bf6:	81 ce       	rjmp	.-766    	; 0x8fa <handleRFCommands+0x27a>
						calibrateSensors();
     bf8:	0e 94 01 3a 	call	0x7402	; 0x7402 <calibrateSensors>
						proximityResult[8] = 1023;	// because the first time this value could be low after calibration
     bfc:	8f ef       	ldi	r24, 0xFF	; 255
     bfe:	93 e0       	ldi	r25, 0x03	; 3
     c00:	90 93 86 02 	sts	0x0286, r25
     c04:	80 93 85 02 	sts	0x0285, r24
						proximityResult[11] = 1023;	// and in that case a false black line will be detected
     c08:	90 93 8c 02 	sts	0x028C, r25
     c0c:	80 93 8b 02 	sts	0x028B, r24
						calibState = CALIBRATION_STATE_FIND_THRS_0;
     c10:	86 e0       	ldi	r24, 0x06	; 6
     c12:	80 93 8f 0b 	sts	0x0B8F, r24
						calibVelIndex = 1;
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	80 93 e9 08 	sts	0x08E9, r24
						calibrateOdomFlag = 1;
     c1c:	80 93 9c 05 	sts	0x059C, r24
     c20:	6c ce       	rjmp	.-808    	; 0x8fa <handleRFCommands+0x27a>
			} else {
				irEnabled = 0;
			}

			if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
				calibrateSensors();
     c22:	0e 94 01 3a 	call	0x7402	; 0x7402 <calibrateSensors>
				resetOdometry();
     c26:	0e 94 11 10 	call	0x2022	; 0x2022 <resetOdometry>
     c2a:	20 91 bb 09 	lds	r18, 0x09BB
     c2e:	92 2f       	mov	r25, r18
     c30:	12 ce       	rjmp	.-988    	; 0x856 <handleRFCommands+0x1d6>
			} else {
				obstacleAvoidanceEnabled = 0;
			}

			if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
				cliffAvoidanceEnabled = 1;
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	80 93 95 04 	sts	0x0495, r24
     c38:	17 ce       	rjmp	.-978    	; 0x868 <handleRFCommands+0x1e8>
				} else {
					GREEN_LED6_OFF;
				}

				if(bit_is_set(rfData[6], 7) ) {
					GREEN_LED7_ON;
     c3a:	80 91 0b 01 	lds	r24, 0x010B
     c3e:	8f 77       	andi	r24, 0x7F	; 127
     c40:	80 93 0b 01 	sts	0x010B, r24
     c44:	55 ce       	rjmp	.-854    	; 0x8f0 <handleRFCommands+0x270>

		//usartTransmit(rfData[0]);

		if(rfDebugMode==1) {

			writeAckPayload(ackPayload, 16);
     c46:	80 ef       	ldi	r24, 0xF0	; 240
     c48:	98 e0       	ldi	r25, 0x08	; 8
     c4a:	60 e1       	ldi	r22, 0x10	; 16
     c4c:	0e 94 04 02 	call	0x408	; 0x408 <writeAckPayload>
     c50:	22 cd       	rjmp	.-1468   	; 0x696 <handleRFCommands+0x16>
					ackPayload[15] = currentSelector;
					packetId = 6;
					break;

				case 6:
					ackPayload[1] = proximityValue[8]&0xFF;
     c52:	80 91 55 02 	lds	r24, 0x0255
     c56:	90 91 56 02 	lds	r25, 0x0256
     c5a:	80 93 f1 08 	sts	0x08F1, r24
					ackPayload[2] = proximityValue[8]>>8;
     c5e:	80 91 55 02 	lds	r24, 0x0255
     c62:	90 91 56 02 	lds	r25, 0x0256
     c66:	90 93 f2 08 	sts	0x08F2, r25
					ackPayload[3] = proximityValue[16]&0xFF;
     c6a:	80 91 65 02 	lds	r24, 0x0265
     c6e:	90 91 66 02 	lds	r25, 0x0266
     c72:	80 93 f3 08 	sts	0x08F3, r24
					ackPayload[4] = proximityValue[16]>>8;
     c76:	80 91 65 02 	lds	r24, 0x0265
     c7a:	90 91 66 02 	lds	r25, 0x0266
     c7e:	90 93 f4 08 	sts	0x08F4, r25
					ackPayload[5] = proximityValue[18]&0xFF;
     c82:	80 91 69 02 	lds	r24, 0x0269
     c86:	90 91 6a 02 	lds	r25, 0x026A
     c8a:	80 93 f5 08 	sts	0x08F5, r24
					ackPayload[6] = proximityValue[18]>>8;
     c8e:	80 91 69 02 	lds	r24, 0x0269
     c92:	90 91 6a 02 	lds	r25, 0x026A
     c96:	90 93 f6 08 	sts	0x08F6, r25
					ackPayload[7] = proximityValue[20]&0xFF;
     c9a:	80 91 6d 02 	lds	r24, 0x026D
     c9e:	90 91 6e 02 	lds	r25, 0x026E
     ca2:	80 93 f7 08 	sts	0x08F7, r24
					ackPayload[8] = proximityValue[20]>>8;
     ca6:	80 91 6d 02 	lds	r24, 0x026D
     caa:	90 91 6e 02 	lds	r25, 0x026E
     cae:	90 93 f8 08 	sts	0x08F8, r25
					ackPayload[9] = proximityValue[22]&0xFF;
     cb2:	80 91 71 02 	lds	r24, 0x0271
     cb6:	90 91 72 02 	lds	r25, 0x0272
     cba:	80 93 f9 08 	sts	0x08F9, r24
					ackPayload[10] = proximityValue[22]>>8;
     cbe:	80 91 71 02 	lds	r24, 0x0271
     cc2:	90 91 72 02 	lds	r25, 0x0272
     cc6:	90 93 fa 08 	sts	0x08FA, r25
					ackPayload[11] = accZ&0xFF;
     cca:	80 91 50 04 	lds	r24, 0x0450
     cce:	90 91 51 04 	lds	r25, 0x0451
     cd2:	80 93 fb 08 	sts	0x08FB, r24
					ackPayload[12] = accZ>>8;	
     cd6:	89 2f       	mov	r24, r25
     cd8:	99 0f       	add	r25, r25
     cda:	99 0b       	sbc	r25, r25
     cdc:	80 93 fc 08 	sts	0x08FC, r24
					ackPayload[13] = batteryLevel&0xFF;
     ce0:	80 91 d9 02 	lds	r24, 0x02D9
     ce4:	90 91 da 02 	lds	r25, 0x02DA
     ce8:	80 93 fd 08 	sts	0x08FD, r24
					ackPayload[14] = batteryLevel>>8;
     cec:	90 93 fe 08 	sts	0x08FE, r25
					ackPayload[15] = 0;
     cf0:	10 92 ff 08 	sts	0x08FF, r1
					packetId = 7;
     cf4:	87 e0       	ldi	r24, 0x07	; 7
     cf6:	80 93 07 02 	sts	0x0207, r24
     cfa:	63 ce       	rjmp	.-826    	; 0x9c2 <handleRFCommands+0x342>
			// write back the ack payload
			ackPayload[0] = packetId&0xFF;

			switch(packetId) {
				case 3:
					ackPayload[1] = proximityResult[0]&0xFF;
     cfc:	80 91 75 02 	lds	r24, 0x0275
     d00:	90 91 76 02 	lds	r25, 0x0276
     d04:	80 93 f1 08 	sts	0x08F1, r24
					ackPayload[2] = proximityResult[0]>>8;
     d08:	89 2f       	mov	r24, r25
     d0a:	99 0f       	add	r25, r25
     d0c:	99 0b       	sbc	r25, r25
     d0e:	80 93 f2 08 	sts	0x08F2, r24
					ackPayload[3] = proximityResult[1]&0xFF;
     d12:	80 91 77 02 	lds	r24, 0x0277
     d16:	90 91 78 02 	lds	r25, 0x0278
     d1a:	80 93 f3 08 	sts	0x08F3, r24
					ackPayload[4] = proximityResult[1]>>8;
     d1e:	89 2f       	mov	r24, r25
     d20:	99 0f       	add	r25, r25
     d22:	99 0b       	sbc	r25, r25
     d24:	80 93 f4 08 	sts	0x08F4, r24
					ackPayload[5] = proximityResult[2]&0xFF;
     d28:	80 91 79 02 	lds	r24, 0x0279
     d2c:	90 91 7a 02 	lds	r25, 0x027A
     d30:	80 93 f5 08 	sts	0x08F5, r24
					ackPayload[6] = proximityResult[2]>>8;
     d34:	89 2f       	mov	r24, r25
     d36:	99 0f       	add	r25, r25
     d38:	99 0b       	sbc	r25, r25
     d3a:	80 93 f6 08 	sts	0x08F6, r24
					ackPayload[7] = proximityResult[3]&0xFF;
     d3e:	80 91 7b 02 	lds	r24, 0x027B
     d42:	90 91 7c 02 	lds	r25, 0x027C
     d46:	80 93 f7 08 	sts	0x08F7, r24
					ackPayload[8] = proximityResult[3]>>8;
     d4a:	89 2f       	mov	r24, r25
     d4c:	99 0f       	add	r25, r25
     d4e:	99 0b       	sbc	r25, r25
     d50:	80 93 f8 08 	sts	0x08F8, r24
					ackPayload[9] = proximityResult[5]&0xFF;
     d54:	80 91 7f 02 	lds	r24, 0x027F
     d58:	90 91 80 02 	lds	r25, 0x0280
     d5c:	80 93 f9 08 	sts	0x08F9, r24
					ackPayload[10] = proximityResult[5]>>8;
     d60:	89 2f       	mov	r24, r25
     d62:	99 0f       	add	r25, r25
     d64:	99 0b       	sbc	r25, r25
     d66:	80 93 fa 08 	sts	0x08FA, r24
					ackPayload[11] = proximityResult[6]&0xFF;
     d6a:	80 91 81 02 	lds	r24, 0x0281
     d6e:	90 91 82 02 	lds	r25, 0x0282
     d72:	80 93 fb 08 	sts	0x08FB, r24
					ackPayload[12] = proximityResult[6]>>8;
     d76:	89 2f       	mov	r24, r25
     d78:	99 0f       	add	r25, r25
     d7a:	99 0b       	sbc	r25, r25
     d7c:	80 93 fc 08 	sts	0x08FC, r24
					ackPayload[13] = proximityResult[7]&0xFF;
     d80:	80 91 83 02 	lds	r24, 0x0283
     d84:	90 91 84 02 	lds	r25, 0x0284
     d88:	80 93 fd 08 	sts	0x08FD, r24
					ackPayload[14] = proximityResult[7]>>8;
     d8c:	89 2f       	mov	r24, r25
     d8e:	99 0f       	add	r25, r25
     d90:	99 0b       	sbc	r25, r25
     d92:	80 93 fe 08 	sts	0x08FE, r24
					#ifdef HW_REV_3_1
						ackPayload[15] = CHARGE_ON | (BUTTON0 << 1) | (CHARGE_STAT << 2);
     d96:	20 91 03 01 	lds	r18, 0x0103
     d9a:	80 91 03 01 	lds	r24, 0x0103
     d9e:	40 91 03 01 	lds	r20, 0x0103
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	80 72       	andi	r24, 0x20	; 32
     da6:	90 70       	andi	r25, 0x00	; 0
     da8:	95 95       	asr	r25
     daa:	87 95       	ror	r24
     dac:	95 95       	asr	r25
     dae:	87 95       	ror	r24
     db0:	95 95       	asr	r25
     db2:	87 95       	ror	r24
     db4:	95 95       	asr	r25
     db6:	87 95       	ror	r24
     db8:	95 95       	asr	r25
     dba:	87 95       	ror	r24
     dbc:	88 0f       	add	r24, r24
     dbe:	99 1f       	adc	r25, r25
     dc0:	44 1f       	adc	r20, r20
     dc2:	44 27       	eor	r20, r20
     dc4:	44 1f       	adc	r20, r20
     dc6:	44 0f       	add	r20, r20
     dc8:	44 0f       	add	r20, r20
     dca:	48 2b       	or	r20, r24
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	20 71       	andi	r18, 0x10	; 16
     dd0:	30 70       	andi	r19, 0x00	; 0
     dd2:	35 95       	asr	r19
     dd4:	27 95       	ror	r18
     dd6:	35 95       	asr	r19
     dd8:	27 95       	ror	r18
     dda:	35 95       	asr	r19
     ddc:	27 95       	ror	r18
     dde:	35 95       	asr	r19
     de0:	27 95       	ror	r18
     de2:	42 2b       	or	r20, r18
     de4:	40 93 ff 08 	sts	0x08FF, r20
					#else
						ackPayload[15] = CHARGE_ON | (BUTTON0 << 1);
					#endif
					packetId = 4;
     de8:	84 e0       	ldi	r24, 0x04	; 4
     dea:	80 93 07 02 	sts	0x0207, r24
     dee:	e9 cd       	rjmp	.-1070   	; 0x9c2 <handleRFCommands+0x342>
					ackPayload[15] = irCommand;
					packetId = 5;
					break;

				case 5:
					ackPayload[1] = proximityValue[0]&0xFF;
     df0:	80 91 45 02 	lds	r24, 0x0245
     df4:	90 91 46 02 	lds	r25, 0x0246
     df8:	80 93 f1 08 	sts	0x08F1, r24
					ackPayload[2] = proximityValue[0]>>8;
     dfc:	80 91 45 02 	lds	r24, 0x0245
     e00:	90 91 46 02 	lds	r25, 0x0246
     e04:	90 93 f2 08 	sts	0x08F2, r25
					ackPayload[3] = proximityValue[2]&0xFF;
     e08:	80 91 49 02 	lds	r24, 0x0249
     e0c:	90 91 4a 02 	lds	r25, 0x024A
     e10:	80 93 f3 08 	sts	0x08F3, r24
					ackPayload[4] = proximityValue[2]>>8;
     e14:	80 91 49 02 	lds	r24, 0x0249
     e18:	90 91 4a 02 	lds	r25, 0x024A
     e1c:	90 93 f4 08 	sts	0x08F4, r25
					ackPayload[5] = proximityValue[4]&0xFF;
     e20:	80 91 4d 02 	lds	r24, 0x024D
     e24:	90 91 4e 02 	lds	r25, 0x024E
     e28:	80 93 f5 08 	sts	0x08F5, r24
					ackPayload[6] = proximityValue[4]>>8;
     e2c:	80 91 4d 02 	lds	r24, 0x024D
     e30:	90 91 4e 02 	lds	r25, 0x024E
     e34:	90 93 f6 08 	sts	0x08F6, r25
					ackPayload[7] = proximityValue[6]&0xFF;
     e38:	80 91 51 02 	lds	r24, 0x0251
     e3c:	90 91 52 02 	lds	r25, 0x0252
     e40:	80 93 f7 08 	sts	0x08F7, r24
					ackPayload[8] = proximityValue[6]>>8;
     e44:	80 91 51 02 	lds	r24, 0x0251
     e48:	90 91 52 02 	lds	r25, 0x0252
     e4c:	90 93 f8 08 	sts	0x08F8, r25
					ackPayload[9] = proximityValue[10]&0xFF;
     e50:	80 91 59 02 	lds	r24, 0x0259
     e54:	90 91 5a 02 	lds	r25, 0x025A
     e58:	80 93 f9 08 	sts	0x08F9, r24
					ackPayload[10] = proximityValue[10]>>8;
     e5c:	80 91 59 02 	lds	r24, 0x0259
     e60:	90 91 5a 02 	lds	r25, 0x025A
     e64:	90 93 fa 08 	sts	0x08FA, r25
					ackPayload[11] = proximityValue[12]&0xFF;
     e68:	80 91 5d 02 	lds	r24, 0x025D
     e6c:	90 91 5e 02 	lds	r25, 0x025E
     e70:	80 93 fb 08 	sts	0x08FB, r24
					ackPayload[12] = proximityValue[12]>>8;
     e74:	80 91 5d 02 	lds	r24, 0x025D
     e78:	90 91 5e 02 	lds	r25, 0x025E
     e7c:	90 93 fc 08 	sts	0x08FC, r25
					ackPayload[13] = proximityValue[14]&0xFF;
     e80:	80 91 61 02 	lds	r24, 0x0261
     e84:	90 91 62 02 	lds	r25, 0x0262
     e88:	80 93 fd 08 	sts	0x08FD, r24
					ackPayload[14] = proximityValue[14]>>8;
     e8c:	80 91 61 02 	lds	r24, 0x0261
     e90:	90 91 62 02 	lds	r25, 0x0262
     e94:	90 93 fe 08 	sts	0x08FE, r25
					ackPayload[15] = currentSelector;
     e98:	80 91 70 04 	lds	r24, 0x0470
     e9c:	80 93 ff 08 	sts	0x08FF, r24
					packetId = 6;
     ea0:	86 e0       	ldi	r24, 0x06	; 6
     ea2:	80 93 07 02 	sts	0x0207, r24
     ea6:	8d cd       	rjmp	.-1254   	; 0x9c2 <handleRFCommands+0x342>
				} else {								// backward
					pwm_right_desired = -(speedr);
				}

				if((rfData[5]&0x80)==0x80) {			// motor left forward
					pwm_left_desired = speedl;
     ea8:	50 93 18 03 	sts	0x0318, r21
     eac:	40 93 17 03 	sts	0x0317, r20
     eb0:	80 cc       	rjmp	.-1792   	; 0x7b2 <handleRFCommands+0x132>

00000eb2 <rfDebugSendData>:
void rfDisableDebugMode() {
	rfDebugMode = 0;
}

void rfDebugSendData() {
	ackPayload[0] = rfDebugCounter;
     eb2:	90 91 36 03 	lds	r25, 0x0336
     eb6:	90 93 f0 08 	sts	0x08F0, r25
	while(rfData[0] != rfDebugCounter) {
     eba:	80 91 b8 09 	lds	r24, 0x09B8
     ebe:	98 17       	cp	r25, r24
     ec0:	41 f0       	breq	.+16     	; 0xed2 <rfDebugSendData+0x20>
		handleRFCommands();
     ec2:	0e 94 40 03 	call	0x680	; 0x680 <handleRFCommands>
	rfDebugMode = 0;
}

void rfDebugSendData() {
	ackPayload[0] = rfDebugCounter;
	while(rfData[0] != rfDebugCounter) {
     ec6:	90 91 b8 09 	lds	r25, 0x09B8
     eca:	80 91 36 03 	lds	r24, 0x0336
     ece:	98 17       	cp	r25, r24
     ed0:	c1 f7       	brne	.-16     	; 0xec2 <rfDebugSendData+0x10>
		handleRFCommands();
	}
	ackPayload[0] = 0x00;
     ed2:	10 92 f0 08 	sts	0x08F0, r1
	if(rfDebugCounter < 255) {
     ed6:	9f 3f       	cpi	r25, 0xFF	; 255
     ed8:	21 f0       	breq	.+8      	; 0xee2 <rfDebugSendData+0x30>
		rfDebugCounter++;
     eda:	9f 5f       	subi	r25, 0xFF	; 255
     edc:	90 93 36 03 	sts	0x0336, r25
     ee0:	08 95       	ret
	} else {
		rfDebugCounter = 3;
     ee2:	83 e0       	ldi	r24, 0x03	; 3
     ee4:	80 93 36 03 	sts	0x0336, r24
     ee8:	08 95       	ret

00000eea <init_ir_remote_control>:
static unsigned char check_temp = 0;
unsigned char address = 0;
unsigned char data_ir = 0;
unsigned char check = 2;

void init_ir_remote_control(void) { 	
     eea:	cf 93       	push	r28
     eec:	df 93       	push	r29

	PCICR = 0;
     eee:	e8 e6       	ldi	r30, 0x68	; 104
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	10 82       	st	Z, r1
	PCMSK1 = 0;
     ef4:	ac e6       	ldi	r26, 0x6C	; 108
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	1c 92       	st	X, r1
	TCCR2A = 0;
     efa:	20 eb       	ldi	r18, 0xB0	; 176
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	e9 01       	movw	r28, r18
     f00:	18 82       	st	Y, r1
	TCCR2B = 0;
     f02:	10 92 b1 00 	sts	0x00B1, r1
	TIMSK2 = 0;
     f06:	10 92 70 00 	sts	0x0070, r1

	PCICR |= (1 << PCIE1);			// enable interrupt on change of PCINT15:8 pins
     f0a:	80 81       	ld	r24, Z
     f0c:	82 60       	ori	r24, 0x02	; 2
     f0e:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT15);		// enable PCINT15
     f10:	8c 91       	ld	r24, X
     f12:	80 68       	ori	r24, 0x80	; 128
     f14:	8c 93       	st	X, r24
	TCCR2A |= (1 << WGM21); 		// mode 2 => CTC mode
     f16:	88 81       	ld	r24, Y
     f18:	82 60       	ori	r24, 0x02	; 2
     f1a:	88 83       	st	Y, r24

}
     f1c:	df 91       	pop	r29
     f1e:	cf 91       	pop	r28
     f20:	08 95       	ret

00000f22 <__vector_10>:

// external interrupt service routine
ISR(PCINT1_vect) {
     f22:	1f 92       	push	r1
     f24:	0f 92       	push	r0
     f26:	0f b6       	in	r0, 0x3f	; 63
     f28:	0f 92       	push	r0
     f2a:	11 24       	eor	r1, r1
     f2c:	8f 93       	push	r24

	if(irEnabled) {						// if the robot is configured to accept TV remote commands
     f2e:	80 91 0e 02 	lds	r24, 0x020E
     f32:	88 23       	and	r24, r24
     f34:	21 f1       	breq	.+72     	; 0xf7e <__vector_10+0x5c>

		if(bit_is_clear(PINJ, 6)) {		// the interrupt is generated at every pin state change; we only look
     f36:	80 91 03 01 	lds	r24, 0x0103
     f3a:	86 fd       	sbrc	r24, 6
     f3c:	20 c0       	rjmp	.+64     	; 0xf7e <__vector_10+0x5c>
										// for the falling edge
			PCICR &= ~(1 << PCIE1);		// disable external interrupt
     f3e:	80 91 68 00 	lds	r24, 0x0068
     f42:	8d 7f       	andi	r24, 0xFD	; 253
     f44:	80 93 68 00 	sts	0x0068, r24
			PCMSK1 &= ~(1 << PCINT15);
     f48:	80 91 6c 00 	lds	r24, 0x006C
     f4c:	8f 77       	andi	r24, 0x7F	; 127
     f4e:	80 93 6c 00 	sts	0x006C, r24
		
			// check the pin change isn't due to a glitch; to check this verify that
			// the pin remain low for at least 400 us (the giltches last about 200 us)
			// 0.4 / 0.032 = 13 => 0.416 us
			checkGlitch = 1;							// we're checking if this is a glitch
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	80 93 0f 02 	sts	0x020F, r24
			OCR2A = 13;									// output compare register
     f58:	8d e0       	ldi	r24, 0x0D	; 13
     f5a:	80 93 b3 00 	sts	0x00B3, r24
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
     f5e:	80 91 b1 00 	lds	r24, 0x00B1
     f62:	86 60       	ori	r24, 0x06	; 6
     f64:	80 93 b1 00 	sts	0x00B1, r24
			TIMSK2 |= (1 << OCIE2A);					// enable output compare interrupt
     f68:	80 91 70 00 	lds	r24, 0x0070
     f6c:	82 60       	ori	r24, 0x02	; 2
     f6e:	80 93 70 00 	sts	0x0070, r24

			check_temp = address_temp = data_temp = 0;
     f72:	10 92 3c 02 	sts	0x023C, r1
     f76:	10 92 3d 02 	sts	0x023D, r1
     f7a:	10 92 3e 02 	sts	0x023E, r1

		}

	}
	
}
     f7e:	8f 91       	pop	r24
     f80:	0f 90       	pop	r0
     f82:	0f be       	out	0x3f, r0	; 63
     f84:	0f 90       	pop	r0
     f86:	1f 90       	pop	r1
     f88:	18 95       	reti

00000f8a <__vector_13>:

ISR(TIMER2_COMPA_vect) {
     f8a:	1f 92       	push	r1
     f8c:	0f 92       	push	r0
     f8e:	0f b6       	in	r0, 0x3f	; 63
     f90:	0f 92       	push	r0
     f92:	11 24       	eor	r1, r1
     f94:	2f 93       	push	r18
     f96:	3f 93       	push	r19
     f98:	4f 93       	push	r20
     f9a:	5f 93       	push	r21
     f9c:	8f 93       	push	r24
     f9e:	9f 93       	push	r25

	static int i = -1;

	//PORTB ^= (1 << 5);	// toggle red led

	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);		// stop timer2
     fa0:	80 91 b1 00 	lds	r24, 0x00B1
     fa4:	88 7f       	andi	r24, 0xF8	; 248
     fa6:	80 93 b1 00 	sts	0x00B1, r24
	
		if(checkGlitch) {					// if checking this is a glitch
     faa:	80 91 0f 02 	lds	r24, 0x020F
     fae:	88 23       	and	r24, r24
     fb0:	59 f1       	breq	.+86     	; 0x1008 <__vector_13+0x7e>

			if(REMOTE) {					// if high it is a glitch
     fb2:	80 91 03 01 	lds	r24, 0x0103
     fb6:	86 fd       	sbrc	r24, 6
     fb8:	69 c0       	rjmp	.+210    	; 0x108c <__vector_13+0x102>
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
				i = -1;			

			} else {						// not a glitch => real command received

				checkGlitch = 0;
     fba:	10 92 0f 02 	sts	0x020F, r1

				// activate the IR Receiver with a 2.1 ms cycle value
				// we set the resolution of the timer to be 0.032 ms (prescaler 1/256) so:
				// 2.1 / 0.032 = 64 to be set in the output compare register (=> 2.048 ms)
				// but we already wait 0.416 us => 13, so 64-13=51
				OCR2A = 51;								// output compare register
     fbe:	83 e3       	ldi	r24, 0x33	; 51
     fc0:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
     fc4:	80 91 b1 00 	lds	r24, 0x00B1
     fc8:	86 60       	ori	r24, 0x06	; 6
     fca:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
     fce:	80 91 70 00 	lds	r24, 0x0070
     fd2:	82 60       	ori	r24, 0x02	; 2
     fd4:	80 93 70 00 	sts	0x0070, r24

			} 

		}
	
		if(i!=-1) {
     fd8:	80 91 01 02 	lds	r24, 0x0201
     fdc:	90 91 02 02 	lds	r25, 0x0202
     fe0:	2f ef       	ldi	r18, 0xFF	; 255
     fe2:	8f 3f       	cpi	r24, 0xFF	; 255
     fe4:	92 07       	cpc	r25, r18
     fe6:	29 f0       	breq	.+10     	; 0xff2 <__vector_13+0x68>

			i++;
     fe8:	01 96       	adiw	r24, 0x01	; 1
     fea:	90 93 02 02 	sts	0x0202, r25
     fee:	80 93 01 02 	sts	0x0201, r24

		}

}
     ff2:	9f 91       	pop	r25
     ff4:	8f 91       	pop	r24
     ff6:	5f 91       	pop	r21
     ff8:	4f 91       	pop	r20
     ffa:	3f 91       	pop	r19
     ffc:	2f 91       	pop	r18
     ffe:	0f 90       	pop	r0
    1000:	0f be       	out	0x3f, r0	; 63
    1002:	0f 90       	pop	r0
    1004:	1f 90       	pop	r1
    1006:	18 95       	reti
			}

		} else {


			if (i == -1) { 						// start bit confirmed
    1008:	40 91 01 02 	lds	r20, 0x0201
    100c:	50 91 02 02 	lds	r21, 0x0202
    1010:	8f ef       	ldi	r24, 0xFF	; 255
    1012:	4f 3f       	cpi	r20, 0xFF	; 255
    1014:	58 07       	cpc	r21, r24
    1016:	09 f4       	brne	.+2      	; 0x101a <__vector_13+0x90>
    1018:	4a c0       	rjmp	.+148    	; 0x10ae <__vector_13+0x124>
					check_temp = address_temp = data_temp = 0;
					i=0;

				}

			} else if (i == 1)	{ 						// check bit read and change timer period
    101a:	41 30       	cpi	r20, 0x01	; 1
    101c:	51 05       	cpc	r21, r1
    101e:	09 f4       	brne	.+2      	; 0x1022 <__vector_13+0x98>
    1020:	80 c0       	rjmp	.+256    	; 0x1122 <__vector_13+0x198>
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
    1022:	ca 01       	movw	r24, r20
    1024:	02 97       	sbiw	r24, 0x02	; 2
    1026:	05 97       	sbiw	r24, 0x05	; 5
    1028:	08 f4       	brcc	.+2      	; 0x102c <__vector_13+0xa2>
    102a:	50 c0       	rjmp	.+160    	; 0x10cc <__vector_13+0x142>

				unsigned char temp = REMOTE;
				temp <<= 6-i;
				address_temp += temp;

			} else if ((i > 6) && (i < 13 )) { 			// we read data
    102c:	ca 01       	movw	r24, r20
    102e:	07 97       	sbiw	r24, 0x07	; 7
    1030:	06 97       	sbiw	r24, 0x06	; 6
    1032:	08 f0       	brcs	.+2      	; 0x1036 <__vector_13+0xac>
    1034:	ab c0       	rjmp	.+342    	; 0x118c <__vector_13+0x202>

				OCR2A = 54;
    1036:	86 e3       	ldi	r24, 0x36	; 54
    1038:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);
    103c:	80 91 b1 00 	lds	r24, 0x00B1
    1040:	86 60       	ori	r24, 0x06	; 6
    1042:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);
    1046:	80 91 70 00 	lds	r24, 0x0070
    104a:	82 60       	ori	r24, 0x02	; 2
    104c:	80 93 70 00 	sts	0x0070, r24

				unsigned char temp = REMOTE;
    1050:	20 91 03 01 	lds	r18, 0x0103
				temp <<= 6+6-i;
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	20 74       	andi	r18, 0x40	; 64
    1058:	30 70       	andi	r19, 0x00	; 0
    105a:	00 24       	eor	r0, r0
    105c:	22 0f       	add	r18, r18
    105e:	33 1f       	adc	r19, r19
    1060:	00 1c       	adc	r0, r0
    1062:	22 0f       	add	r18, r18
    1064:	33 1f       	adc	r19, r19
    1066:	00 1c       	adc	r0, r0
    1068:	23 2f       	mov	r18, r19
    106a:	30 2d       	mov	r19, r0
    106c:	8c e0       	ldi	r24, 0x0C	; 12
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	84 1b       	sub	r24, r20
    1072:	95 0b       	sbc	r25, r21
    1074:	02 c0       	rjmp	.+4      	; 0x107a <__vector_13+0xf0>
    1076:	22 0f       	add	r18, r18
    1078:	33 1f       	adc	r19, r19
    107a:	8a 95       	dec	r24
    107c:	e2 f7       	brpl	.-8      	; 0x1076 <__vector_13+0xec>
				data_temp += temp;
    107e:	80 91 3c 02 	lds	r24, 0x023C
    1082:	82 0f       	add	r24, r18
    1084:	80 93 3c 02 	sts	0x023C, r24

			} 

		}
	
		if(i!=-1) {
    1088:	ca 01       	movw	r24, r20
    108a:	ae cf       	rjmp	.-164    	; 0xfe8 <__vector_13+0x5e>
	
		if(checkGlitch) {					// if checking this is a glitch

			if(REMOTE) {					// if high it is a glitch

				PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    108c:	80 91 68 00 	lds	r24, 0x0068
    1090:	82 60       	ori	r24, 0x02	; 2
    1092:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    1096:	80 91 6c 00 	lds	r24, 0x006C
    109a:	80 68       	ori	r24, 0x80	; 128
    109c:	80 93 6c 00 	sts	0x006C, r24
				i = -1;			
    10a0:	8f ef       	ldi	r24, 0xFF	; 255
    10a2:	9f ef       	ldi	r25, 0xFF	; 255
    10a4:	90 93 02 02 	sts	0x0202, r25
    10a8:	80 93 01 02 	sts	0x0201, r24
    10ac:	a2 cf       	rjmp	.-188    	; 0xff2 <__vector_13+0x68>
		} else {


			if (i == -1) { 						// start bit confirmed

				if(REMOTE) {					// double check => if high it is only a noise
    10ae:	80 91 03 01 	lds	r24, 0x0103
    10b2:	86 ff       	sbrs	r24, 6
    10b4:	54 c0       	rjmp	.+168    	; 0x115e <__vector_13+0x1d4>

					PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    10b6:	80 91 68 00 	lds	r24, 0x0068
    10ba:	82 60       	ori	r24, 0x02	; 2
    10bc:	80 93 68 00 	sts	0x0068, r24
					PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    10c0:	80 91 6c 00 	lds	r24, 0x006C
    10c4:	80 68       	ori	r24, 0x80	; 128
    10c6:	80 93 6c 00 	sts	0x006C, r24
    10ca:	93 cf       	rjmp	.-218    	; 0xff2 <__vector_13+0x68>
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
		
				OCR2A = 54;
    10cc:	86 e3       	ldi	r24, 0x36	; 54
    10ce:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);
    10d2:	80 91 b1 00 	lds	r24, 0x00B1
    10d6:	86 60       	ori	r24, 0x06	; 6
    10d8:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);
    10dc:	80 91 70 00 	lds	r24, 0x0070
    10e0:	82 60       	ori	r24, 0x02	; 2
    10e2:	80 93 70 00 	sts	0x0070, r24

				unsigned char temp = REMOTE;
    10e6:	20 91 03 01 	lds	r18, 0x0103
				temp <<= 6-i;
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	20 74       	andi	r18, 0x40	; 64
    10ee:	30 70       	andi	r19, 0x00	; 0
    10f0:	00 24       	eor	r0, r0
    10f2:	22 0f       	add	r18, r18
    10f4:	33 1f       	adc	r19, r19
    10f6:	00 1c       	adc	r0, r0
    10f8:	22 0f       	add	r18, r18
    10fa:	33 1f       	adc	r19, r19
    10fc:	00 1c       	adc	r0, r0
    10fe:	23 2f       	mov	r18, r19
    1100:	30 2d       	mov	r19, r0
    1102:	86 e0       	ldi	r24, 0x06	; 6
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	84 1b       	sub	r24, r20
    1108:	95 0b       	sbc	r25, r21
    110a:	02 c0       	rjmp	.+4      	; 0x1110 <__vector_13+0x186>
    110c:	22 0f       	add	r18, r18
    110e:	33 1f       	adc	r19, r19
    1110:	8a 95       	dec	r24
    1112:	e2 f7       	brpl	.-8      	; 0x110c <__vector_13+0x182>
				address_temp += temp;
    1114:	80 91 3d 02 	lds	r24, 0x023D
    1118:	82 0f       	add	r24, r18
    111a:	80 93 3d 02 	sts	0x023D, r24

			} 

		}
	
		if(i!=-1) {
    111e:	ca 01       	movw	r24, r20
    1120:	63 cf       	rjmp	.-314    	; 0xfe8 <__vector_13+0x5e>

				}

			} else if (i == 1)	{ 						// check bit read and change timer period

				check_temp = REMOTE;	   				// read the check bit
    1122:	80 91 03 01 	lds	r24, 0x0103
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	80 74       	andi	r24, 0x40	; 64
    112a:	90 70       	andi	r25, 0x00	; 0
    112c:	08 2e       	mov	r0, r24
    112e:	89 2f       	mov	r24, r25
    1130:	00 0c       	add	r0, r0
    1132:	88 1f       	adc	r24, r24
    1134:	99 0b       	sbc	r25, r25
    1136:	00 0c       	add	r0, r0
    1138:	88 1f       	adc	r24, r24
    113a:	99 1f       	adc	r25, r25
    113c:	80 93 3e 02 	sts	0x023E, r24
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
    1140:	86 e3       	ldi	r24, 0x36	; 54
    1142:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    1146:	80 91 b1 00 	lds	r24, 0x00B1
    114a:	86 60       	ori	r24, 0x06	; 6
    114c:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    1150:	80 91 70 00 	lds	r24, 0x0070
    1154:	82 60       	ori	r24, 0x02	; 2
    1156:	80 93 70 00 	sts	0x0070, r24

			} 

		}
	
		if(i!=-1) {
    115a:	ca 01       	movw	r24, r20
    115c:	45 cf       	rjmp	.-374    	; 0xfe8 <__vector_13+0x5e>

				} else {	// read the check bit
			
					//cycle value is 0.9 ms to go to check bit so:
					// 0.9 / 0.032 = 28 => 0.896
					OCR2A = 28;								// output compare register
    115e:	8c e1       	ldi	r24, 0x1C	; 28
    1160:	80 93 b3 00 	sts	0x00B3, r24
					TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    1164:	80 91 b1 00 	lds	r24, 0x00B1
    1168:	86 60       	ori	r24, 0x06	; 6
    116a:	80 93 b1 00 	sts	0x00B1, r24
					TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt					
    116e:	80 91 70 00 	lds	r24, 0x0070
    1172:	82 60       	ori	r24, 0x02	; 2
    1174:	80 93 70 00 	sts	0x0070, r24

					check_temp = address_temp = data_temp = 0;
    1178:	10 92 3c 02 	sts	0x023C, r1
    117c:	10 92 3d 02 	sts	0x023D, r1
    1180:	10 92 3e 02 	sts	0x023E, r1
    1184:	40 e0       	ldi	r20, 0x00	; 0
    1186:	50 e0       	ldi	r21, 0x00	; 0

			} 

		}
	
		if(i!=-1) {
    1188:	ca 01       	movw	r24, r20
    118a:	2e cf       	rjmp	.-420    	; 0xfe8 <__vector_13+0x5e>

				unsigned char temp = REMOTE;
				temp <<= 6+6-i;
				data_temp += temp;

			} else if (i == 13) { 						// last bit read
    118c:	4d 30       	cpi	r20, 0x0D	; 13
    118e:	51 05       	cpc	r21, r1
    1190:	09 f0       	breq	.+2      	; 0x1194 <__vector_13+0x20a>
    1192:	7a cf       	rjmp	.-268    	; 0x1088 <__vector_13+0xfe>
				
				TIMSK2 = 0;								// disable all interrupt for timer2
    1194:	10 92 70 00 	sts	0x0070, r1
				PCICR |= (1 << PCIE1);					// enable external interrupt to receive next command
    1198:	80 91 68 00 	lds	r24, 0x0068
    119c:	82 60       	ori	r24, 0x02	; 2
    119e:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);				// clear interrupt flag
    11a2:	80 91 6c 00 	lds	r24, 0x006C
    11a6:	80 68       	ori	r24, 0x80	; 128
    11a8:	80 93 6c 00 	sts	0x006C, r24

				i = -1;
    11ac:	8f ef       	ldi	r24, 0xFF	; 255
    11ae:	9f ef       	ldi	r25, 0xFF	; 255
    11b0:	90 93 02 02 	sts	0x0202, r25
    11b4:	80 93 01 02 	sts	0x0201, r24
				check = check_temp;
    11b8:	80 91 3e 02 	lds	r24, 0x023E
    11bc:	80 93 00 02 	sts	0x0200, r24
				address = address_temp;
    11c0:	80 91 3d 02 	lds	r24, 0x023D
    11c4:	80 93 3a 02 	sts	0x023A, r24
				data_ir = data_temp;
    11c8:	80 91 3c 02 	lds	r24, 0x023C
    11cc:	80 93 3b 02 	sts	0x023B, r24
				command_received=1;
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	80 93 44 04 	sts	0x0444, r24
    11d6:	0d cf       	rjmp	.-486    	; 0xff2 <__vector_13+0x68>

000011d8 <ir_remote_get_check>:

}

unsigned char ir_remote_get_check(void) {
	return check;
}
    11d8:	80 91 00 02 	lds	r24, 0x0200
    11dc:	08 95       	ret

000011de <ir_remote_get_address>:

unsigned char ir_remote_get_address(void) {
	return address;
}
    11de:	80 91 3a 02 	lds	r24, 0x023A
    11e2:	08 95       	ret

000011e4 <ir_remote_get_data>:

unsigned char ir_remote_get_data(void) {
	return data_ir;
}
    11e4:	80 91 3b 02 	lds	r24, 0x023B
    11e8:	08 95       	ret

000011ea <handleIRRemoteCommands>:

void handleIRRemoteCommands() {

	if(irEnabled) {
    11ea:	80 91 0e 02 	lds	r24, 0x020E
    11ee:	88 23       	and	r24, r24
    11f0:	21 f0       	breq	.+8      	; 0x11fa <handleIRRemoteCommands+0x10>

		if(command_received) {
    11f2:	80 91 44 04 	lds	r24, 0x0444
    11f6:	88 23       	and	r24, r24
    11f8:	09 f4       	brne	.+2      	; 0x11fc <handleIRRemoteCommands+0x12>
    11fa:	08 95       	ret

			command_received = 0;
    11fc:	10 92 44 04 	sts	0x0444, r1
			
			if((getTime100MicroSec() - lastCmdTime) < PAUSE_200_MSEC) {
    1200:	0e 94 04 10 	call	0x2008	; 0x2008 <getTime100MicroSec>
    1204:	20 91 47 04 	lds	r18, 0x0447
    1208:	30 91 48 04 	lds	r19, 0x0448
    120c:	40 91 49 04 	lds	r20, 0x0449
    1210:	50 91 4a 04 	lds	r21, 0x044A
    1214:	62 1b       	sub	r22, r18
    1216:	73 0b       	sbc	r23, r19
    1218:	84 0b       	sbc	r24, r20
    121a:	95 0b       	sbc	r25, r21
    121c:	63 58       	subi	r22, 0x83	; 131
    121e:	77 40       	sbci	r23, 0x07	; 7
    1220:	80 40       	sbci	r24, 0x00	; 0
    1222:	90 40       	sbci	r25, 0x00	; 0
    1224:	50 f3       	brcs	.-44     	; 0x11fa <handleIRRemoteCommands+0x10>
				return;
			}

			lastCmdTime = getTime100MicroSec();
    1226:	0e 94 04 10 	call	0x2008	; 0x2008 <getTime100MicroSec>
    122a:	60 93 47 04 	sts	0x0447, r22
    122e:	70 93 48 04 	sts	0x0448, r23
    1232:	80 93 49 04 	sts	0x0449, r24
    1236:	90 93 4a 04 	sts	0x044A, r25
unsigned char ir_remote_get_address(void) {
	return address;
}

unsigned char ir_remote_get_data(void) {
	return data_ir;
    123a:	80 91 3b 02 	lds	r24, 0x023B
				return;
			}

			lastCmdTime = getTime100MicroSec();

            irCommand = ir_remote_get_data();
    123e:	80 93 43 04 	sts	0x0443, r24

		    //usartTransmit(irCommand);			
			
			switch(irCommand) {
    1242:	e8 2f       	mov	r30, r24
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	e5 33       	cpi	r30, 0x35	; 53
    1248:	f1 05       	cpc	r31, r1
    124a:	c0 f0       	brcs	.+48     	; 0x127c <handleIRRemoteCommands+0x92>
    124c:	40 91 15 03 	lds	r20, 0x0315
    1250:	50 91 16 03 	lds	r21, 0x0316
    1254:	20 91 17 03 	lds	r18, 0x0317
    1258:	30 91 18 03 	lds	r19, 0x0318
	               	break;

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
    125c:	ca 01       	movw	r24, r20
    125e:	64 2f       	mov	r22, r20
    1260:	89 2f       	mov	r24, r25
    1262:	57 fd       	sbrc	r21, 7
    1264:	b7 c1       	rjmp	.+878    	; 0x15d4 <handleIRRemoteCommands+0x3ea>
				speedr = pwm_right_desired;
    1266:	60 93 2f 03 	sts	0x032F, r22
    126a:	80 93 30 03 	sts	0x0330, r24
			} else {
				speedr = (-pwm_right_desired);
			}
			if(pwm_left_desired >= 0) {
    126e:	37 fd       	sbrc	r19, 7
    1270:	a8 c1       	rjmp	.+848    	; 0x15c2 <handleIRRemoteCommands+0x3d8>
				speedl = pwm_left_desired;
    1272:	30 93 2e 03 	sts	0x032E, r19
    1276:	20 93 2d 03 	sts	0x032D, r18
    127a:	08 95       	ret

            irCommand = ir_remote_get_data();

		    //usartTransmit(irCommand);			
			
			switch(irCommand) {
    127c:	ee 58       	subi	r30, 0x8E	; 142
    127e:	ff 4f       	sbci	r31, 0xFF	; 255
    1280:	ee 0f       	add	r30, r30
    1282:	ff 1f       	adc	r31, r31
    1284:	05 90       	lpm	r0, Z+
    1286:	f4 91       	lpm	r31, Z+
    1288:	e0 2d       	mov	r30, r0
    128a:	19 94       	eijmp
				case 33:	// program -
					cliffAvoidanceEnabled = 0;
					break;

				case 52:	// av/tv button
					behaviorState = (behaviorState+1)%4;
    128c:	80 91 46 04 	lds	r24, 0x0446
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	01 96       	adiw	r24, 0x01	; 1
    1294:	83 70       	andi	r24, 0x03	; 3
    1296:	90 70       	andi	r25, 0x00	; 0
    1298:	80 93 46 04 	sts	0x0446, r24
					switch(behaviorState) {
    129c:	81 30       	cpi	r24, 0x01	; 1
    129e:	09 f4       	brne	.+2      	; 0x12a2 <handleIRRemoteCommands+0xb8>
    12a0:	ca c1       	rjmp	.+916    	; 0x1636 <handleIRRemoteCommands+0x44c>
    12a2:	81 30       	cpi	r24, 0x01	; 1
    12a4:	08 f0       	brcs	.+2      	; 0x12a8 <handleIRRemoteCommands+0xbe>
    12a6:	bb c1       	rjmp	.+886    	; 0x161e <handleIRRemoteCommands+0x434>
						case 0:
							obstacleAvoidanceEnabled = 0;
    12a8:	10 92 94 04 	sts	0x0494, r1
							cliffAvoidanceEnabled = 0;
    12ac:	10 92 95 04 	sts	0x0495, r1
    12b0:	40 91 15 03 	lds	r20, 0x0315
    12b4:	50 91 16 03 	lds	r21, 0x0316
    12b8:	20 91 17 03 	lds	r18, 0x0317
    12bc:	30 91 18 03 	lds	r19, 0x0318
    12c0:	cd cf       	rjmp	.-102    	; 0x125c <handleIRRemoteCommands+0x72>
						case 1:
							obstacleAvoidanceEnabled = 1;
							cliffAvoidanceEnabled = 0;
							break;
						case 2:
							obstacleAvoidanceEnabled = 0;
    12c2:	10 92 94 04 	sts	0x0494, r1
							cliffAvoidanceEnabled = 1;
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	80 93 95 04 	sts	0x0495, r24
    12cc:	40 91 15 03 	lds	r20, 0x0315
    12d0:	50 91 16 03 	lds	r21, 0x0316
    12d4:	20 91 17 03 	lds	r18, 0x0317
    12d8:	30 91 18 03 	lds	r19, 0x0318
    12dc:	bf cf       	rjmp	.-130    	; 0x125c <handleIRRemoteCommands+0x72>
				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
					break;

				case 17:	// volume -
					obstacleAvoidanceEnabled = 0;
    12de:	10 92 94 04 	sts	0x0494, r1
    12e2:	40 91 15 03 	lds	r20, 0x0315
    12e6:	50 91 16 03 	lds	r21, 0x0316
    12ea:	20 91 17 03 	lds	r18, 0x0317
    12ee:	30 91 18 03 	lds	r19, 0x0318
    12f2:	b4 cf       	rjmp	.-152    	; 0x125c <handleIRRemoteCommands+0x72>
					updateBlueLed(pwm_blue);

	               	break;

				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	80 93 94 04 	sts	0x0494, r24
    12fa:	40 91 15 03 	lds	r20, 0x0315
    12fe:	50 91 16 03 	lds	r21, 0x0316
    1302:	20 91 17 03 	lds	r18, 0x0317
    1306:	30 91 18 03 	lds	r19, 0x0318
    130a:	a8 cf       	rjmp	.-176    	; 0x125c <handleIRRemoteCommands+0x72>
					pwm_right_desired += STEP_MOTORS;
	                if (pwm_right_desired>127) pwm_right_desired=127;
					break;

				case 9:	// left motor backward
					pwm_left_desired -= STEP_MOTORS;
    130c:	20 91 17 03 	lds	r18, 0x0317
    1310:	30 91 18 03 	lds	r19, 0x0318
    1314:	22 50       	subi	r18, 0x02	; 2
    1316:	30 40       	sbci	r19, 0x00	; 0
    1318:	30 93 18 03 	sts	0x0318, r19
    131c:	20 93 17 03 	sts	0x0317, r18
	           	    if (pwm_left_desired<-127) pwm_left_desired=-127;
    1320:	8f ef       	ldi	r24, 0xFF	; 255
    1322:	21 38       	cpi	r18, 0x81	; 129
    1324:	38 07       	cpc	r19, r24
    1326:	0c f0       	brlt	.+2      	; 0x132a <handleIRRemoteCommands+0x140>
    1328:	5a c1       	rjmp	.+692    	; 0x15de <handleIRRemoteCommands+0x3f4>
    132a:	81 e8       	ldi	r24, 0x81	; 129
    132c:	9f ef       	ldi	r25, 0xFF	; 255
    132e:	90 93 18 03 	sts	0x0318, r25
    1332:	80 93 17 03 	sts	0x0317, r24
    1336:	40 91 15 03 	lds	r20, 0x0315
    133a:	50 91 16 03 	lds	r21, 0x0316
    133e:	21 e8       	ldi	r18, 0x81	; 129
    1340:	3f ef       	ldi	r19, 0xFF	; 255
    1342:	8c cf       	rjmp	.-232    	; 0x125c <handleIRRemoteCommands+0x72>
    	            if (pwm_left_desired > 127) pwm_left_desired = 127;
               		break;

				case 8:	// both motors backward
				case 30:
					if(pwm_right_desired < pwm_left) {
    1344:	40 91 15 03 	lds	r20, 0x0315
    1348:	50 91 16 03 	lds	r21, 0x0316
    134c:	80 91 13 03 	lds	r24, 0x0313
    1350:	90 91 14 03 	lds	r25, 0x0314
    1354:	48 17       	cp	r20, r24
    1356:	59 07       	cpc	r21, r25
    1358:	0c f0       	brlt	.+2      	; 0x135c <handleIRRemoteCommands+0x172>
    135a:	5b c1       	rjmp	.+694    	; 0x1612 <handleIRRemoteCommands+0x428>
    135c:	9a 01       	movw	r18, r20
						pwm_left_desired  = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
					}
					pwm_right_desired -= STEP_MOTORS;
    135e:	42 50       	subi	r20, 0x02	; 2
    1360:	50 40       	sbci	r21, 0x00	; 0
    1362:	50 93 16 03 	sts	0x0316, r21
    1366:	40 93 15 03 	sts	0x0315, r20
					pwm_left_desired -= STEP_MOTORS;
    136a:	22 50       	subi	r18, 0x02	; 2
    136c:	30 40       	sbci	r19, 0x00	; 0
    136e:	30 93 18 03 	sts	0x0318, r19
    1372:	20 93 17 03 	sts	0x0317, r18
	                if (pwm_right_desired < -127) pwm_right_desired = -127;
    1376:	8f ef       	ldi	r24, 0xFF	; 255
    1378:	41 38       	cpi	r20, 0x81	; 129
    137a:	58 07       	cpc	r21, r24
    137c:	44 f4       	brge	.+16     	; 0x138e <handleIRRemoteCommands+0x1a4>
    137e:	81 e8       	ldi	r24, 0x81	; 129
    1380:	9f ef       	ldi	r25, 0xFF	; 255
    1382:	90 93 16 03 	sts	0x0316, r25
    1386:	80 93 15 03 	sts	0x0315, r24
    138a:	41 e8       	ldi	r20, 0x81	; 129
    138c:	5f ef       	ldi	r21, 0xFF	; 255
    	            if (pwm_left_desired < -127) pwm_left_desired = -127;
    138e:	8f ef       	ldi	r24, 0xFF	; 255
    1390:	21 38       	cpi	r18, 0x81	; 129
    1392:	38 07       	cpc	r19, r24
    1394:	0c f0       	brlt	.+2      	; 0x1398 <handleIRRemoteCommands+0x1ae>
    1396:	62 cf       	rjmp	.-316    	; 0x125c <handleIRRemoteCommands+0x72>
				case 4:	// both motors left
				case 46:
					pwm_right_desired += STEP_MOTORS;
					pwm_left_desired -= STEP_MOTORS;
	                if (pwm_right_desired>127) pwm_right_desired=127;
	   	            if (pwm_left_desired<-127) pwm_left_desired=-127;
    1398:	81 e8       	ldi	r24, 0x81	; 129
    139a:	9f ef       	ldi	r25, 0xFF	; 255
    139c:	90 93 18 03 	sts	0x0318, r25
    13a0:	80 93 17 03 	sts	0x0317, r24
    13a4:	21 e8       	ldi	r18, 0x81	; 129
    13a6:	3f ef       	ldi	r19, 0xFF	; 255
    13a8:	59 cf       	rjmp	.-334    	; 0x125c <handleIRRemoteCommands+0x72>
    	            if (pwm_left_desired < -127) pwm_left_desired = -127;
                  	break;

				case 6:	// both motors right
				case 47:
					pwm_right_desired -= STEP_MOTORS;
    13aa:	40 91 15 03 	lds	r20, 0x0315
    13ae:	50 91 16 03 	lds	r21, 0x0316
    13b2:	42 50       	subi	r20, 0x02	; 2
    13b4:	50 40       	sbci	r21, 0x00	; 0
    13b6:	50 93 16 03 	sts	0x0316, r21
    13ba:	40 93 15 03 	sts	0x0315, r20
					pwm_left_desired += STEP_MOTORS;
    13be:	60 91 17 03 	lds	r22, 0x0317
    13c2:	70 91 18 03 	lds	r23, 0x0318
    13c6:	6e 5f       	subi	r22, 0xFE	; 254
    13c8:	7f 4f       	sbci	r23, 0xFF	; 255
    13ca:	9b 01       	movw	r18, r22
    13cc:	70 93 18 03 	sts	0x0318, r23
    13d0:	60 93 17 03 	sts	0x0317, r22
                	if (pwm_right_desired<-127) pwm_right_desired=-127;
    13d4:	8f ef       	ldi	r24, 0xFF	; 255
    13d6:	41 38       	cpi	r20, 0x81	; 129
    13d8:	58 07       	cpc	r21, r24
    13da:	44 f4       	brge	.+16     	; 0x13ec <handleIRRemoteCommands+0x202>
    13dc:	81 e8       	ldi	r24, 0x81	; 129
    13de:	9f ef       	ldi	r25, 0xFF	; 255
    13e0:	90 93 16 03 	sts	0x0316, r25
    13e4:	80 93 15 03 	sts	0x0315, r24
    13e8:	41 e8       	ldi	r20, 0x81	; 129
    13ea:	5f ef       	ldi	r21, 0xFF	; 255
                	if (pwm_left_desired>127) pwm_left_desired=127;
    13ec:	60 38       	cpi	r22, 0x80	; 128
    13ee:	71 05       	cpc	r23, r1
    13f0:	0c f4       	brge	.+2      	; 0x13f4 <handleIRRemoteCommands+0x20a>
    13f2:	34 cf       	rjmp	.-408    	; 0x125c <handleIRRemoteCommands+0x72>
    13f4:	8f e7       	ldi	r24, 0x7F	; 127
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	90 93 18 03 	sts	0x0318, r25
    13fc:	80 93 17 03 	sts	0x0317, r24
    1400:	2f e7       	ldi	r18, 0x7F	; 127
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	2b cf       	rjmp	.-426    	; 0x125c <handleIRRemoteCommands+0x72>
			switch(irCommand) {
				// sometimes there are two cases for the same command because two different
				// remote controls are used; one of this do not contain "numbers"
				case 5:	// stop motors
				case 51:
					pwm_right_desired = 0;
    1406:	10 92 16 03 	sts	0x0316, r1
    140a:	10 92 15 03 	sts	0x0315, r1
					pwm_left_desired = 0;
    140e:	10 92 18 03 	sts	0x0318, r1
    1412:	10 92 17 03 	sts	0x0317, r1
					if(currentSelector == 8) {
    1416:	80 91 70 04 	lds	r24, 0x0470
    141a:	88 30       	cpi	r24, 0x08	; 8
    141c:	09 f4       	brne	.+2      	; 0x1420 <handleIRRemoteCommands+0x236>
    141e:	18 c1       	rjmp	.+560    	; 0x1650 <handleIRRemoteCommands+0x466>
	               	break;

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
    1420:	60 91 15 03 	lds	r22, 0x0315
    1424:	80 91 16 03 	lds	r24, 0x0316
    1428:	20 91 17 03 	lds	r18, 0x0317
    142c:	30 91 18 03 	lds	r19, 0x0318
    1430:	1a cf       	rjmp	.-460    	; 0x1266 <handleIRRemoteCommands+0x7c>
					pwm_left_desired -= STEP_MOTORS;
	           	    if (pwm_left_desired<-127) pwm_left_desired=-127;
					break;

				case 7:	// right motor backward
					pwm_right_desired -= STEP_MOTORS;
    1432:	40 91 15 03 	lds	r20, 0x0315
    1436:	50 91 16 03 	lds	r21, 0x0316
    143a:	42 50       	subi	r20, 0x02	; 2
    143c:	50 40       	sbci	r21, 0x00	; 0
    143e:	50 93 16 03 	sts	0x0316, r21
    1442:	40 93 15 03 	sts	0x0315, r20
	               	if (pwm_right_desired<-127) pwm_right_desired=-127;
    1446:	2f ef       	ldi	r18, 0xFF	; 255
    1448:	41 38       	cpi	r20, 0x81	; 129
    144a:	52 07       	cpc	r21, r18
    144c:	0c f0       	brlt	.+2      	; 0x1450 <handleIRRemoteCommands+0x266>
    144e:	02 cf       	rjmp	.-508    	; 0x1254 <handleIRRemoteCommands+0x6a>
    1450:	81 e8       	ldi	r24, 0x81	; 129
    1452:	9f ef       	ldi	r25, 0xFF	; 255
    1454:	90 93 16 03 	sts	0x0316, r25
    1458:	80 93 15 03 	sts	0x0315, r24
    145c:	8f e7       	ldi	r24, 0x7F	; 127
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	20 91 17 03 	lds	r18, 0x0317
    1464:	30 91 18 03 	lds	r19, 0x0318

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
				speedr = pwm_right_desired;
			} else {
				speedr = (-pwm_right_desired);
    1468:	90 93 30 03 	sts	0x0330, r25
    146c:	80 93 2f 03 	sts	0x032F, r24
    1470:	fe ce       	rjmp	.-516    	; 0x126e <handleIRRemoteCommands+0x84>
                	if (pwm_left_desired>127) pwm_left_desired=127;
					break;

				case 4:	// both motors left
				case 46:
					pwm_right_desired += STEP_MOTORS;
    1472:	40 91 15 03 	lds	r20, 0x0315
    1476:	50 91 16 03 	lds	r21, 0x0316
    147a:	4e 5f       	subi	r20, 0xFE	; 254
    147c:	5f 4f       	sbci	r21, 0xFF	; 255
    147e:	50 93 16 03 	sts	0x0316, r21
    1482:	40 93 15 03 	sts	0x0315, r20
					pwm_left_desired -= STEP_MOTORS;
    1486:	60 91 17 03 	lds	r22, 0x0317
    148a:	70 91 18 03 	lds	r23, 0x0318
    148e:	62 50       	subi	r22, 0x02	; 2
    1490:	70 40       	sbci	r23, 0x00	; 0
    1492:	9b 01       	movw	r18, r22
    1494:	70 93 18 03 	sts	0x0318, r23
    1498:	60 93 17 03 	sts	0x0317, r22
	                if (pwm_right_desired>127) pwm_right_desired=127;
    149c:	40 38       	cpi	r20, 0x80	; 128
    149e:	51 05       	cpc	r21, r1
    14a0:	44 f0       	brlt	.+16     	; 0x14b2 <handleIRRemoteCommands+0x2c8>
    14a2:	8f e7       	ldi	r24, 0x7F	; 127
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	90 93 16 03 	sts	0x0316, r25
    14aa:	80 93 15 03 	sts	0x0315, r24
    14ae:	4f e7       	ldi	r20, 0x7F	; 127
    14b0:	50 e0       	ldi	r21, 0x00	; 0
	   	            if (pwm_left_desired<-127) pwm_left_desired=-127;
    14b2:	61 58       	subi	r22, 0x81	; 129
    14b4:	7f 4f       	sbci	r23, 0xFF	; 255
    14b6:	0c f0       	brlt	.+2      	; 0x14ba <handleIRRemoteCommands+0x2d0>
    14b8:	d1 ce       	rjmp	.-606    	; 0x125c <handleIRRemoteCommands+0x72>
    14ba:	6e cf       	rjmp	.-292    	; 0x1398 <handleIRRemoteCommands+0x1ae>
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
    14bc:	20 91 17 03 	lds	r18, 0x0317
    14c0:	30 91 18 03 	lds	r19, 0x0318
    14c4:	2e 5f       	subi	r18, 0xFE	; 254
    14c6:	3f 4f       	sbci	r19, 0xFF	; 255
    14c8:	30 93 18 03 	sts	0x0318, r19
    14cc:	20 93 17 03 	sts	0x0317, r18
	               	if (pwm_left_desired>127) pwm_left_desired=127;
    14d0:	20 38       	cpi	r18, 0x80	; 128
    14d2:	31 05       	cpc	r19, r1
    14d4:	0c f4       	brge	.+2      	; 0x14d8 <handleIRRemoteCommands+0x2ee>
    14d6:	83 c0       	rjmp	.+262    	; 0x15de <handleIRRemoteCommands+0x3f4>
    14d8:	8f e7       	ldi	r24, 0x7F	; 127
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	90 93 18 03 	sts	0x0318, r25
    14e0:	80 93 17 03 	sts	0x0317, r24
    14e4:	40 91 15 03 	lds	r20, 0x0315
    14e8:	50 91 16 03 	lds	r21, 0x0316
    14ec:	2f e7       	ldi	r18, 0x7F	; 127
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	b5 ce       	rjmp	.-662    	; 0x125c <handleIRRemoteCommands+0x72>
					}
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    14f2:	40 91 15 03 	lds	r20, 0x0315
    14f6:	50 91 16 03 	lds	r21, 0x0316
    14fa:	20 91 17 03 	lds	r18, 0x0317
    14fe:	30 91 18 03 	lds	r19, 0x0318
    1502:	24 17       	cp	r18, r20
    1504:	35 07       	cpc	r19, r21
    1506:	0c f0       	brlt	.+2      	; 0x150a <handleIRRemoteCommands+0x320>
    1508:	82 c0       	rjmp	.+260    	; 0x160e <handleIRRemoteCommands+0x424>
    150a:	9a 01       	movw	r18, r20
						pwm_left_desired = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
					}
					pwm_right_desired += STEP_MOTORS;
    150c:	4e 5f       	subi	r20, 0xFE	; 254
    150e:	5f 4f       	sbci	r21, 0xFF	; 255
    1510:	50 93 16 03 	sts	0x0316, r21
    1514:	40 93 15 03 	sts	0x0315, r20
					pwm_left_desired += STEP_MOTORS;
    1518:	2e 5f       	subi	r18, 0xFE	; 254
    151a:	3f 4f       	sbci	r19, 0xFF	; 255
    151c:	30 93 18 03 	sts	0x0318, r19
    1520:	20 93 17 03 	sts	0x0317, r18
	                if (pwm_right_desired > 127) pwm_right_desired = 127;
    1524:	40 38       	cpi	r20, 0x80	; 128
    1526:	51 05       	cpc	r21, r1
    1528:	44 f0       	brlt	.+16     	; 0x153a <handleIRRemoteCommands+0x350>
    152a:	8f e7       	ldi	r24, 0x7F	; 127
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	90 93 16 03 	sts	0x0316, r25
    1532:	80 93 15 03 	sts	0x0315, r24
    1536:	4f e7       	ldi	r20, 0x7F	; 127
    1538:	50 e0       	ldi	r21, 0x00	; 0
    	            if (pwm_left_desired > 127) pwm_left_desired = 127;
    153a:	20 38       	cpi	r18, 0x80	; 128
    153c:	31 05       	cpc	r19, r1
    153e:	0c f4       	brge	.+2      	; 0x1542 <handleIRRemoteCommands+0x358>
    1540:	8d ce       	rjmp	.-742    	; 0x125c <handleIRRemoteCommands+0x72>
    1542:	58 cf       	rjmp	.-336    	; 0x13f4 <handleIRRemoteCommands+0x20a>
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>127) pwm_left_desired=127;
					break;

				case 1:	// right motor forward
					pwm_right_desired += STEP_MOTORS;
    1544:	40 91 15 03 	lds	r20, 0x0315
    1548:	50 91 16 03 	lds	r21, 0x0316
    154c:	4e 5f       	subi	r20, 0xFE	; 254
    154e:	5f 4f       	sbci	r21, 0xFF	; 255
    1550:	50 93 16 03 	sts	0x0316, r21
    1554:	40 93 15 03 	sts	0x0315, r20
	                if (pwm_right_desired>127) pwm_right_desired=127;
    1558:	40 38       	cpi	r20, 0x80	; 128
    155a:	51 05       	cpc	r21, r1
    155c:	0c f4       	brge	.+2      	; 0x1560 <handleIRRemoteCommands+0x376>
    155e:	7a ce       	rjmp	.-780    	; 0x1254 <handleIRRemoteCommands+0x6a>
    1560:	8f e7       	ldi	r24, 0x7F	; 127
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	90 93 16 03 	sts	0x0316, r25
    1568:	80 93 15 03 	sts	0x0315, r24
    156c:	59 cf       	rjmp	.-334    	; 0x1420 <handleIRRemoteCommands+0x236>
	               	if (pwm_right_desired<-127) pwm_right_desired=-127;
					break;

	           	case 0:	// colors
				case 50:
					colorState = (colorState+1)%5;
    156e:	80 91 45 04 	lds	r24, 0x0445
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	01 96       	adiw	r24, 0x01	; 1
    1576:	65 e0       	ldi	r22, 0x05	; 5
    1578:	70 e0       	ldi	r23, 0x00	; 0
    157a:	0e 94 bc 57 	call	0xaf78	; 0xaf78 <__divmodhi4>
    157e:	80 93 45 04 	sts	0x0445, r24

					if(colorState==0) {			// turn on blue and off all IRs
    1582:	88 23       	and	r24, r24
    1584:	89 f5       	brne	.+98     	; 0x15e8 <handleIRRemoteCommands+0x3fe>
						LED_IR1_HIGH;
    1586:	44 9a       	sbi	0x08, 4	; 8
						LED_IR2_HIGH;
    1588:	45 9a       	sbi	0x08, 5	; 8
						pwm_blue = 0;
    158a:	10 92 0a 02 	sts	0x020A, r1
						pwm_green = MAX_LEDS_PWM;
    158e:	8f ef       	ldi	r24, 0xFF	; 255
    1590:	80 93 09 02 	sts	0x0209, r24
						pwm_red = MAX_LEDS_PWM;
    1594:	80 93 08 02 	sts	0x0208, r24
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					}

					updateRedLed(pwm_red);
    1598:	80 91 08 02 	lds	r24, 0x0208
    159c:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <updateRedLed>
					updateGreenLed(pwm_green);
    15a0:	80 91 09 02 	lds	r24, 0x0209
    15a4:	0e 94 34 36 	call	0x6c68	; 0x6c68 <updateGreenLed>
					updateBlueLed(pwm_blue);
    15a8:	80 91 0a 02 	lds	r24, 0x020A
    15ac:	0e 94 4a 36 	call	0x6c94	; 0x6c94 <updateBlueLed>
    15b0:	40 91 15 03 	lds	r20, 0x0315
    15b4:	50 91 16 03 	lds	r21, 0x0316
    15b8:	20 91 17 03 	lds	r18, 0x0317
    15bc:	30 91 18 03 	lds	r19, 0x0318
    15c0:	4d ce       	rjmp	.-870    	; 0x125c <handleIRRemoteCommands+0x72>
				speedr = (-pwm_right_desired);
			}
			if(pwm_left_desired >= 0) {
				speedl = pwm_left_desired;
			} else {
				speedl = (-pwm_left_desired);
    15c2:	88 27       	eor	r24, r24
    15c4:	99 27       	eor	r25, r25
    15c6:	82 1b       	sub	r24, r18
    15c8:	93 0b       	sbc	r25, r19
    15ca:	90 93 2e 03 	sts	0x032E, r25
    15ce:	80 93 2d 03 	sts	0x032D, r24
    15d2:	08 95       	ret

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
				speedr = pwm_right_desired;
    15d4:	88 27       	eor	r24, r24
    15d6:	99 27       	eor	r25, r25
    15d8:	84 1b       	sub	r24, r20
    15da:	95 0b       	sbc	r25, r21
    15dc:	45 cf       	rjmp	.-374    	; 0x1468 <handleIRRemoteCommands+0x27e>
    15de:	40 91 15 03 	lds	r20, 0x0315
    15e2:	50 91 16 03 	lds	r21, 0x0316
    15e6:	3a ce       	rjmp	.-908    	; 0x125c <handleIRRemoteCommands+0x72>
						LED_IR1_HIGH;
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
    15e8:	81 30       	cpi	r24, 0x01	; 1
    15ea:	09 f4       	brne	.+2      	; 0x15ee <handleIRRemoteCommands+0x404>
    15ec:	4e c0       	rjmp	.+156    	; 0x168a <handleIRRemoteCommands+0x4a0>
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = 0;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==2) {	// turn on red and on all IRs
    15ee:	82 30       	cpi	r24, 0x02	; 2
    15f0:	09 f4       	brne	.+2      	; 0x15f4 <handleIRRemoteCommands+0x40a>
    15f2:	53 c0       	rjmp	.+166    	; 0x169a <handleIRRemoteCommands+0x4b0>
						LED_IR1_LOW;
						LED_IR2_LOW;
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = 0;
					} else if(colorState==3) {	// turn on white
    15f4:	83 30       	cpi	r24, 0x03	; 3
    15f6:	09 f4       	brne	.+2      	; 0x15fa <handleIRRemoteCommands+0x410>
    15f8:	5a c0       	rjmp	.+180    	; 0x16ae <handleIRRemoteCommands+0x4c4>
						pwm_blue = 0;
						pwm_green = 0;
						pwm_red = 0;
					} else if(colorState==4) {	// turn off all leds
    15fa:	84 30       	cpi	r24, 0x04	; 4
    15fc:	69 f6       	brne	.-102    	; 0x1598 <handleIRRemoteCommands+0x3ae>
						pwm_blue = MAX_LEDS_PWM;
    15fe:	8f ef       	ldi	r24, 0xFF	; 255
    1600:	80 93 0a 02 	sts	0x020A, r24
						pwm_green = MAX_LEDS_PWM;
    1604:	80 93 09 02 	sts	0x0209, r24
						pwm_red = MAX_LEDS_PWM;
    1608:	80 93 08 02 	sts	0x0208, r24
    160c:	c5 cf       	rjmp	.-118    	; 0x1598 <handleIRRemoteCommands+0x3ae>
    160e:	a9 01       	movw	r20, r18
    1610:	7d cf       	rjmp	.-262    	; 0x150c <handleIRRemoteCommands+0x322>
				case 8:	// both motors backward
				case 30:
					if(pwm_right_desired < pwm_left) {
						pwm_left_desired  = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
    1612:	20 91 17 03 	lds	r18, 0x0317
    1616:	30 91 18 03 	lds	r19, 0x0318
    161a:	a9 01       	movw	r20, r18
    161c:	a0 ce       	rjmp	.-704    	; 0x135e <handleIRRemoteCommands+0x174>
					cliffAvoidanceEnabled = 0;
					break;

				case 52:	// av/tv button
					behaviorState = (behaviorState+1)%4;
					switch(behaviorState) {
    161e:	82 30       	cpi	r24, 0x02	; 2
    1620:	09 f4       	brne	.+2      	; 0x1624 <handleIRRemoteCommands+0x43a>
    1622:	4f ce       	rjmp	.-866    	; 0x12c2 <handleIRRemoteCommands+0xd8>
    1624:	83 30       	cpi	r24, 0x03	; 3
    1626:	09 f0       	breq	.+2      	; 0x162a <handleIRRemoteCommands+0x440>
    1628:	51 ce       	rjmp	.-862    	; 0x12cc <handleIRRemoteCommands+0xe2>
						case 2:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 1;
							break;
						case 3:
							obstacleAvoidanceEnabled = 1;
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	80 93 94 04 	sts	0x0494, r24
							cliffAvoidanceEnabled = 1;
    1630:	80 93 95 04 	sts	0x0495, r24
    1634:	0b ce       	rjmp	.-1002   	; 0x124c <handleIRRemoteCommands+0x62>
						case 0:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 0;
							break;
						case 1:
							obstacleAvoidanceEnabled = 1;
    1636:	80 93 94 04 	sts	0x0494, r24
							cliffAvoidanceEnabled = 0;
    163a:	10 92 95 04 	sts	0x0495, r1
    163e:	40 91 15 03 	lds	r20, 0x0315
    1642:	50 91 16 03 	lds	r21, 0x0316
    1646:	20 91 17 03 	lds	r18, 0x0317
    164a:	30 91 18 03 	lds	r19, 0x0318
    164e:	06 ce       	rjmp	.-1012   	; 0x125c <handleIRRemoteCommands+0x72>
				case 5:	// stop motors
				case 51:
					pwm_right_desired = 0;
					pwm_left_desired = 0;
					if(currentSelector == 8) {
						calibrateSensors();
    1650:	0e 94 01 3a 	call	0x7402	; 0x7402 <calibrateSensors>
						proximityResult[8] = 1023;	// because the first time this value could be low after calibration
    1654:	8f ef       	ldi	r24, 0xFF	; 255
    1656:	93 e0       	ldi	r25, 0x03	; 3
    1658:	90 93 86 02 	sts	0x0286, r25
    165c:	80 93 85 02 	sts	0x0285, r24
						proximityResult[11] = 1023;	// and in that case a false black line will be detected
    1660:	90 93 8c 02 	sts	0x028C, r25
    1664:	80 93 8b 02 	sts	0x028B, r24
						calibState = CALIBRATION_STATE_FIND_THRS_0;
    1668:	86 e0       	ldi	r24, 0x06	; 6
    166a:	80 93 8f 0b 	sts	0x0B8F, r24
						calibVelIndex = 1;
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	80 93 e9 08 	sts	0x08E9, r24
						calibrateOdomFlag = 1;
    1674:	80 93 9c 05 	sts	0x059C, r24
    1678:	40 91 15 03 	lds	r20, 0x0315
    167c:	50 91 16 03 	lds	r21, 0x0316
    1680:	20 91 17 03 	lds	r18, 0x0317
    1684:	30 91 18 03 	lds	r19, 0x0318
    1688:	e9 cd       	rjmp	.-1070   	; 0x125c <handleIRRemoteCommands+0x72>
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
						pwm_blue = MAX_LEDS_PWM;
    168a:	8f ef       	ldi	r24, 0xFF	; 255
    168c:	80 93 0a 02 	sts	0x020A, r24
						pwm_green = 0;
    1690:	10 92 09 02 	sts	0x0209, r1
						pwm_red = MAX_LEDS_PWM;
    1694:	80 93 08 02 	sts	0x0208, r24
    1698:	7f cf       	rjmp	.-258    	; 0x1598 <handleIRRemoteCommands+0x3ae>
					} else if(colorState==2) {	// turn on red and on all IRs
						LED_IR1_LOW;
    169a:	44 98       	cbi	0x08, 4	; 8
						LED_IR2_LOW;
    169c:	45 98       	cbi	0x08, 5	; 8
						pwm_blue = MAX_LEDS_PWM;
    169e:	8f ef       	ldi	r24, 0xFF	; 255
    16a0:	80 93 0a 02 	sts	0x020A, r24
						pwm_green = MAX_LEDS_PWM;
    16a4:	80 93 09 02 	sts	0x0209, r24
						pwm_red = 0;
    16a8:	10 92 08 02 	sts	0x0208, r1
    16ac:	75 cf       	rjmp	.-278    	; 0x1598 <handleIRRemoteCommands+0x3ae>
					} else if(colorState==3) {	// turn on white
						pwm_blue = 0;
    16ae:	10 92 0a 02 	sts	0x020A, r1
						pwm_green = 0;
    16b2:	10 92 09 02 	sts	0x0209, r1
						pwm_red = 0;
    16b6:	10 92 08 02 	sts	0x0208, r1
    16ba:	6e cf       	rjmp	.-292    	; 0x1598 <handleIRRemoteCommands+0x3ae>

000016bc <init_speed_control>:
	//d_speed_control = 5;
	//i_speed_control = 10;
	//i_limit_speed_control = 3200;
	//k_ff_speed_control_left = INIT_KFF;
	//k_ff_speed_control_right = INIT_KFF;
}
    16bc:	08 95       	ret

000016be <start_speed_control_right>:

void start_speed_control_right(signed int *pwm_right) {
    16be:	ef 92       	push	r14
    16c0:	ff 92       	push	r15
    16c2:	0f 93       	push	r16
    16c4:	1f 93       	push	r17
    16c6:	cf 93       	push	r28
    16c8:	df 93       	push	r29
    16ca:	ec 01       	movw	r28, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    16cc:	88 81       	ld	r24, Y
    16ce:	99 81       	ldd	r25, Y+1	; 0x01
    16d0:	89 2b       	or	r24, r25
    16d2:	09 f4       	brne	.+2      	; 0x16d6 <start_speed_control_right+0x18>
    16d4:	b2 c0       	rjmp	.+356    	; 0x183a <start_speed_control_right+0x17c>
		delta_right_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    16d6:	e0 90 55 0b 	lds	r14, 0x0B55
    16da:	f0 90 56 0b 	lds	r15, 0x0B56
    16de:	f0 92 ef 08 	sts	0x08EF, r15
    16e2:	e0 92 ee 08 	sts	0x08EE, r14
	if(*pwm_right >= 0) {
    16e6:	28 81       	ld	r18, Y
    16e8:	39 81       	ldd	r19, Y+1	; 0x01
    16ea:	37 fd       	sbrc	r19, 7
    16ec:	e4 c0       	rjmp	.+456    	; 0x18b6 <start_speed_control_right+0x1f8>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    16ee:	80 91 0f 03 	lds	r24, 0x030F
    16f2:	90 91 10 03 	lds	r25, 0x0310
    16f6:	28 1b       	sub	r18, r24
    16f8:	39 0b       	sbc	r19, r25
    16fa:	30 93 56 0b 	sts	0x0B56, r19
    16fe:	20 93 55 0b 	sts	0x0B55, r18
    1702:	f9 01       	movw	r30, r18
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}

	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    1704:	20 91 27 03 	lds	r18, 0x0327
    1708:	30 91 28 03 	lds	r19, 0x0328
    170c:	2e 0f       	add	r18, r30
    170e:	3f 1f       	adc	r19, r31
    1710:	30 93 28 03 	sts	0x0328, r19
    1714:	20 93 27 03 	sts	0x0327, r18

	if(delta_right_speed_sum > I_LIMIT) {
    1718:	86 e0       	ldi	r24, 0x06	; 6
    171a:	21 34       	cpi	r18, 0x41	; 65
    171c:	38 07       	cpc	r19, r24
    171e:	0c f4       	brge	.+2      	; 0x1722 <start_speed_control_right+0x64>
    1720:	ad c0       	rjmp	.+346    	; 0x187c <start_speed_control_right+0x1be>
		delta_right_speed_sum = I_LIMIT;
    1722:	80 e4       	ldi	r24, 0x40	; 64
    1724:	96 e0       	ldi	r25, 0x06	; 6
    1726:	90 93 28 03 	sts	0x0328, r25
    172a:	80 93 27 03 	sts	0x0327, r24
    172e:	20 e4       	ldi	r18, 0x40	; 64
    1730:	36 e0       	ldi	r19, 0x06	; 6
		delta_right_speed_sum = -I_LIMIT;
	}		

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed long int)((*pwm_right) << 3);
    1732:	08 81       	ld	r16, Y
    1734:	19 81       	ldd	r17, Y+1	; 0x01
	pwm_right_speed_controller += (signed long int)(delta_right_speed_current*P_PART);
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_PART);
	pwm_right_speed_controller += (signed long int)(delta_right_speed_sum*I_PART);
    1736:	c9 01       	movw	r24, r18
    1738:	88 0f       	add	r24, r24
    173a:	99 1f       	adc	r25, r25
    173c:	82 0f       	add	r24, r18
    173e:	93 1f       	adc	r25, r19
    1740:	ac 01       	movw	r20, r24
    1742:	66 27       	eor	r22, r22
    1744:	57 fd       	sbrc	r21, 7
    1746:	60 95       	com	r22
    1748:	76 2f       	mov	r23, r22
    174a:	cf 01       	movw	r24, r30
    174c:	88 0f       	add	r24, r24
    174e:	99 1f       	adc	r25, r25
    1750:	9f 01       	movw	r18, r30
    1752:	22 0f       	add	r18, r18
    1754:	33 1f       	adc	r19, r19
    1756:	22 0f       	add	r18, r18
    1758:	33 1f       	adc	r19, r19
    175a:	22 0f       	add	r18, r18
    175c:	33 1f       	adc	r19, r19
    175e:	82 0f       	add	r24, r18
    1760:	93 1f       	adc	r25, r19
    1762:	aa 27       	eor	r26, r26
    1764:	97 fd       	sbrc	r25, 7
    1766:	a0 95       	com	r26
    1768:	ba 2f       	mov	r27, r26
    176a:	48 0f       	add	r20, r24
    176c:	59 1f       	adc	r21, r25
    176e:	6a 1f       	adc	r22, r26
    1770:	7b 1f       	adc	r23, r27
    1772:	ee 19       	sub	r30, r14
    1774:	ff 09       	sbc	r31, r15
    1776:	ee 0f       	add	r30, r30
    1778:	ff 1f       	adc	r31, r31
    177a:	cf 01       	movw	r24, r30
    177c:	aa 27       	eor	r26, r26
    177e:	97 fd       	sbrc	r25, 7
    1780:	a0 95       	com	r26
    1782:	ba 2f       	mov	r27, r26
    1784:	48 0f       	add	r20, r24
    1786:	59 1f       	adc	r21, r25
    1788:	6a 1f       	adc	r22, r26
    178a:	7b 1f       	adc	r23, r27
    178c:	c8 01       	movw	r24, r16
    178e:	88 0f       	add	r24, r24
    1790:	99 1f       	adc	r25, r25
    1792:	88 0f       	add	r24, r24
    1794:	99 1f       	adc	r25, r25
    1796:	88 0f       	add	r24, r24
    1798:	99 1f       	adc	r25, r25
    179a:	aa 27       	eor	r26, r26
    179c:	97 fd       	sbrc	r25, 7
    179e:	a0 95       	com	r26
    17a0:	ba 2f       	mov	r27, r26
    17a2:	48 0f       	add	r20, r24
    17a4:	59 1f       	adc	r21, r25
    17a6:	6a 1f       	adc	r22, r26
    17a8:	7b 1f       	adc	r23, r27
    17aa:	40 93 1d 03 	sts	0x031D, r20
    17ae:	50 93 1e 03 	sts	0x031E, r21
    17b2:	60 93 1f 03 	sts	0x031F, r22
    17b6:	70 93 20 03 	sts	0x0320, r23

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    17ba:	77 fd       	sbrc	r23, 7
    17bc:	6d c0       	rjmp	.+218    	; 0x1898 <start_speed_control_right+0x1da>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    17be:	14 16       	cp	r1, r20
    17c0:	15 06       	cpc	r1, r21
    17c2:	16 06       	cpc	r1, r22
    17c4:	17 06       	cpc	r1, r23
    17c6:	14 f4       	brge	.+4      	; 0x17cc <start_speed_control_right+0x10e>
    17c8:	17 fd       	sbrc	r17, 7
    17ca:	68 c0       	rjmp	.+208    	; 0x189c <start_speed_control_right+0x1de>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    17cc:	41 5c       	subi	r20, 0xC1	; 193
    17ce:	5d 45       	sbci	r21, 0x5D	; 93
    17d0:	60 40       	sbci	r22, 0x00	; 0
    17d2:	70 40       	sbci	r23, 0x00	; 0
    17d4:	0c f4       	brge	.+2      	; 0x17d8 <start_speed_control_right+0x11a>
    17d6:	80 c0       	rjmp	.+256    	; 0x18d8 <start_speed_control_right+0x21a>
    17d8:	80 ec       	ldi	r24, 0xC0	; 192
    17da:	9d e5       	ldi	r25, 0x5D	; 93
    17dc:	a0 e0       	ldi	r26, 0x00	; 0
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	80 93 1d 03 	sts	0x031D, r24
    17e4:	90 93 1e 03 	sts	0x031E, r25
    17e8:	a0 93 1f 03 	sts	0x031F, r26
    17ec:	b0 93 20 03 	sts	0x0320, r27
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = (signed int)(pwm_right_speed_controller>>4);
    17f0:	24 e0       	ldi	r18, 0x04	; 4
    17f2:	b5 95       	asr	r27
    17f4:	a7 95       	ror	r26
    17f6:	97 95       	ror	r25
    17f8:	87 95       	ror	r24
    17fa:	2a 95       	dec	r18
    17fc:	d1 f7       	brne	.-12     	; 0x17f2 <start_speed_control_right+0x134>
    17fe:	9c 01       	movw	r18, r24
    1800:	99 83       	std	Y+1, r25	; 0x01
    1802:	88 83       	st	Y, r24

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
    1804:	80 91 05 03 	lds	r24, 0x0305
    1808:	90 91 06 03 	lds	r25, 0x0306
    180c:	18 16       	cp	r1, r24
    180e:	19 06       	cpc	r1, r25
    1810:	0c f0       	brlt	.+2      	; 0x1814 <start_speed_control_right+0x156>
    1812:	5d c0       	rjmp	.+186    	; 0x18ce <start_speed_control_right+0x210>
		*pwm_right += 1;
    1814:	c9 01       	movw	r24, r18
    1816:	01 96       	adiw	r24, 0x01	; 1
    1818:	99 83       	std	Y+1, r25	; 0x01
    181a:	88 83       	st	Y, r24
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
	}
	*/

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    181c:	22 e0       	ldi	r18, 0x02	; 2
    181e:	80 30       	cpi	r24, 0x00	; 0
    1820:	92 07       	cpc	r25, r18
    1822:	f4 f0       	brlt	.+60     	; 0x1860 <start_speed_control_right+0x1a2>
    1824:	8f ef       	ldi	r24, 0xFF	; 255
    1826:	91 e0       	ldi	r25, 0x01	; 1
    1828:	99 83       	std	Y+1, r25	; 0x01
    182a:	88 83       	st	Y, r24
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    182c:	df 91       	pop	r29
    182e:	cf 91       	pop	r28
    1830:	1f 91       	pop	r17
    1832:	0f 91       	pop	r16
    1834:	ff 90       	pop	r15
    1836:	ef 90       	pop	r14
    1838:	08 95       	ret
void start_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    183a:	10 92 28 03 	sts	0x0328, r1
    183e:	10 92 27 03 	sts	0x0327, r1
		delta_right_speed_current = 0;
    1842:	10 92 56 0b 	sts	0x0B56, r1
    1846:	10 92 55 0b 	sts	0x0B55, r1
		delta_right_speed_prev = 0;
    184a:	10 92 ef 08 	sts	0x08EF, r1
    184e:	10 92 ee 08 	sts	0x08EE, r1
	*/

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    1852:	df 91       	pop	r29
    1854:	cf 91       	pop	r28
    1856:	1f 91       	pop	r17
    1858:	0f 91       	pop	r16
    185a:	ff 90       	pop	r15
    185c:	ef 90       	pop	r14
    185e:	08 95       	ret
		*pwm_right -= 30;
	}
	*/

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    1860:	81 50       	subi	r24, 0x01	; 1
    1862:	9e 4f       	sbci	r25, 0xFE	; 254
    1864:	1c f7       	brge	.-58     	; 0x182c <start_speed_control_right+0x16e>
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	9e ef       	ldi	r25, 0xFE	; 254
    186a:	99 83       	std	Y+1, r25	; 0x01
    186c:	88 83       	st	Y, r24

}
    186e:	df 91       	pop	r29
    1870:	cf 91       	pop	r28
    1872:	1f 91       	pop	r17
    1874:	0f 91       	pop	r16
    1876:	ff 90       	pop	r15
    1878:	ef 90       	pop	r14
    187a:	08 95       	ret
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT) {
		delta_right_speed_sum = I_LIMIT;
	}else if(delta_right_speed_sum < -I_LIMIT) {
    187c:	89 ef       	ldi	r24, 0xF9	; 249
    187e:	20 3c       	cpi	r18, 0xC0	; 192
    1880:	38 07       	cpc	r19, r24
    1882:	0c f0       	brlt	.+2      	; 0x1886 <start_speed_control_right+0x1c8>
    1884:	56 cf       	rjmp	.-340    	; 0x1732 <start_speed_control_right+0x74>
		delta_right_speed_sum = -I_LIMIT;
    1886:	80 ec       	ldi	r24, 0xC0	; 192
    1888:	99 ef       	ldi	r25, 0xF9	; 249
    188a:	90 93 28 03 	sts	0x0328, r25
    188e:	80 93 27 03 	sts	0x0327, r24
    1892:	20 ec       	ldi	r18, 0xC0	; 192
    1894:	39 ef       	ldi	r19, 0xF9	; 249
    1896:	4d cf       	rjmp	.-358    	; 0x1732 <start_speed_control_right+0x74>
	pwm_right_speed_controller += (signed long int)(delta_right_speed_current*P_PART);
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_PART);
	pwm_right_speed_controller += (signed long int)(delta_right_speed_sum*I_PART);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    1898:	17 fd       	sbrc	r17, 7
    189a:	98 cf       	rjmp	.-208    	; 0x17cc <start_speed_control_right+0x10e>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    189c:	10 92 1d 03 	sts	0x031D, r1
    18a0:	10 92 1e 03 	sts	0x031E, r1
    18a4:	10 92 1f 03 	sts	0x031F, r1
    18a8:	10 92 20 03 	sts	0x0320, r1
    18ac:	80 e0       	ldi	r24, 0x00	; 0
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	a0 e0       	ldi	r26, 0x00	; 0
    18b2:	b0 e0       	ldi	r27, 0x00	; 0
    18b4:	9d cf       	rjmp	.-198    	; 0x17f0 <start_speed_control_right+0x132>
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    18b6:	80 91 0f 03 	lds	r24, 0x030F
    18ba:	90 91 10 03 	lds	r25, 0x0310
    18be:	28 0f       	add	r18, r24
    18c0:	39 1f       	adc	r19, r25
    18c2:	30 93 56 0b 	sts	0x0B56, r19
    18c6:	20 93 55 0b 	sts	0x0B55, r18
    18ca:	f9 01       	movw	r30, r18
    18cc:	1b cf       	rjmp	.-458    	; 0x1704 <start_speed_control_right+0x46>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
		*pwm_right += 1;
	} else {
		*pwm_right -= 1;
    18ce:	c9 01       	movw	r24, r18
    18d0:	01 97       	sbiw	r24, 0x01	; 1
    18d2:	99 83       	std	Y+1, r25	; 0x01
    18d4:	88 83       	st	Y, r24
    18d6:	a2 cf       	rjmp	.-188    	; 0x181c <start_speed_control_right+0x15e>
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    18d8:	80 91 1d 03 	lds	r24, 0x031D
    18dc:	90 91 1e 03 	lds	r25, 0x031E
    18e0:	a0 91 1f 03 	lds	r26, 0x031F
    18e4:	b0 91 20 03 	lds	r27, 0x0320
    18e8:	80 34       	cpi	r24, 0x40	; 64
    18ea:	22 ea       	ldi	r18, 0xA2	; 162
    18ec:	92 07       	cpc	r25, r18
    18ee:	2f ef       	ldi	r18, 0xFF	; 255
    18f0:	a2 07       	cpc	r26, r18
    18f2:	2f ef       	ldi	r18, 0xFF	; 255
    18f4:	b2 07       	cpc	r27, r18
    18f6:	0c f0       	brlt	.+2      	; 0x18fa <start_speed_control_right+0x23c>
    18f8:	7b cf       	rjmp	.-266    	; 0x17f0 <start_speed_control_right+0x132>
    18fa:	80 e4       	ldi	r24, 0x40	; 64
    18fc:	92 ea       	ldi	r25, 0xA2	; 162
    18fe:	af ef       	ldi	r26, 0xFF	; 255
    1900:	bf ef       	ldi	r27, 0xFF	; 255
    1902:	80 93 1d 03 	sts	0x031D, r24
    1906:	90 93 1e 03 	sts	0x031E, r25
    190a:	a0 93 1f 03 	sts	0x031F, r26
    190e:	b0 93 20 03 	sts	0x0320, r27
    1912:	6e cf       	rjmp	.-292    	; 0x17f0 <start_speed_control_right+0x132>

00001914 <start_speed_control_left>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_speed_control_left(signed int *pwm_left) {
    1914:	ef 92       	push	r14
    1916:	ff 92       	push	r15
    1918:	0f 93       	push	r16
    191a:	1f 93       	push	r17
    191c:	cf 93       	push	r28
    191e:	df 93       	push	r29
    1920:	ec 01       	movw	r28, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
    1922:	88 81       	ld	r24, Y
    1924:	99 81       	ldd	r25, Y+1	; 0x01
    1926:	89 2b       	or	r24, r25
    1928:	09 f4       	brne	.+2      	; 0x192c <start_speed_control_left+0x18>
    192a:	b2 c0       	rjmp	.+356    	; 0x1a90 <start_speed_control_left+0x17c>
		delta_left_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    192c:	e0 90 a1 05 	lds	r14, 0x05A1
    1930:	f0 90 a2 05 	lds	r15, 0x05A2
    1934:	f0 92 b7 09 	sts	0x09B7, r15
    1938:	e0 92 b6 09 	sts	0x09B6, r14
	if(*pwm_left >= 0) {
    193c:	28 81       	ld	r18, Y
    193e:	39 81       	ldd	r19, Y+1	; 0x01
    1940:	37 fd       	sbrc	r19, 7
    1942:	e4 c0       	rjmp	.+456    	; 0x1b0c <start_speed_control_left+0x1f8>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    1944:	80 91 0d 03 	lds	r24, 0x030D
    1948:	90 91 0e 03 	lds	r25, 0x030E
    194c:	28 1b       	sub	r18, r24
    194e:	39 0b       	sbc	r19, r25
    1950:	30 93 a2 05 	sts	0x05A2, r19
    1954:	20 93 a1 05 	sts	0x05A1, r18
    1958:	f9 01       	movw	r30, r18
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;
    195a:	20 91 25 03 	lds	r18, 0x0325
    195e:	30 91 26 03 	lds	r19, 0x0326
    1962:	2e 0f       	add	r18, r30
    1964:	3f 1f       	adc	r19, r31
    1966:	30 93 26 03 	sts	0x0326, r19
    196a:	20 93 25 03 	sts	0x0325, r18

	if(delta_left_speed_sum > I_LIMIT) {
    196e:	86 e0       	ldi	r24, 0x06	; 6
    1970:	21 34       	cpi	r18, 0x41	; 65
    1972:	38 07       	cpc	r19, r24
    1974:	0c f4       	brge	.+2      	; 0x1978 <start_speed_control_left+0x64>
    1976:	ad c0       	rjmp	.+346    	; 0x1ad2 <start_speed_control_left+0x1be>
		delta_left_speed_sum = I_LIMIT;
    1978:	80 e4       	ldi	r24, 0x40	; 64
    197a:	96 e0       	ldi	r25, 0x06	; 6
    197c:	90 93 26 03 	sts	0x0326, r25
    1980:	80 93 25 03 	sts	0x0325, r24
    1984:	20 e4       	ldi	r18, 0x40	; 64
    1986:	36 e0       	ldi	r19, 0x06	; 6
		delta_left_speed_sum = -I_LIMIT;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed long int)((*pwm_left) << 3);
    1988:	08 81       	ld	r16, Y
    198a:	19 81       	ldd	r17, Y+1	; 0x01
	pwm_left_speed_controller += (signed long int)(delta_left_speed_current*P_PART);
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_PART);
	pwm_left_speed_controller += (signed long int)(delta_left_speed_sum*I_PART);
    198c:	c9 01       	movw	r24, r18
    198e:	88 0f       	add	r24, r24
    1990:	99 1f       	adc	r25, r25
    1992:	82 0f       	add	r24, r18
    1994:	93 1f       	adc	r25, r19
    1996:	ac 01       	movw	r20, r24
    1998:	66 27       	eor	r22, r22
    199a:	57 fd       	sbrc	r21, 7
    199c:	60 95       	com	r22
    199e:	76 2f       	mov	r23, r22
    19a0:	cf 01       	movw	r24, r30
    19a2:	88 0f       	add	r24, r24
    19a4:	99 1f       	adc	r25, r25
    19a6:	9f 01       	movw	r18, r30
    19a8:	22 0f       	add	r18, r18
    19aa:	33 1f       	adc	r19, r19
    19ac:	22 0f       	add	r18, r18
    19ae:	33 1f       	adc	r19, r19
    19b0:	22 0f       	add	r18, r18
    19b2:	33 1f       	adc	r19, r19
    19b4:	82 0f       	add	r24, r18
    19b6:	93 1f       	adc	r25, r19
    19b8:	aa 27       	eor	r26, r26
    19ba:	97 fd       	sbrc	r25, 7
    19bc:	a0 95       	com	r26
    19be:	ba 2f       	mov	r27, r26
    19c0:	48 0f       	add	r20, r24
    19c2:	59 1f       	adc	r21, r25
    19c4:	6a 1f       	adc	r22, r26
    19c6:	7b 1f       	adc	r23, r27
    19c8:	ee 19       	sub	r30, r14
    19ca:	ff 09       	sbc	r31, r15
    19cc:	ee 0f       	add	r30, r30
    19ce:	ff 1f       	adc	r31, r31
    19d0:	cf 01       	movw	r24, r30
    19d2:	aa 27       	eor	r26, r26
    19d4:	97 fd       	sbrc	r25, 7
    19d6:	a0 95       	com	r26
    19d8:	ba 2f       	mov	r27, r26
    19da:	48 0f       	add	r20, r24
    19dc:	59 1f       	adc	r21, r25
    19de:	6a 1f       	adc	r22, r26
    19e0:	7b 1f       	adc	r23, r27
    19e2:	c8 01       	movw	r24, r16
    19e4:	88 0f       	add	r24, r24
    19e6:	99 1f       	adc	r25, r25
    19e8:	88 0f       	add	r24, r24
    19ea:	99 1f       	adc	r25, r25
    19ec:	88 0f       	add	r24, r24
    19ee:	99 1f       	adc	r25, r25
    19f0:	aa 27       	eor	r26, r26
    19f2:	97 fd       	sbrc	r25, 7
    19f4:	a0 95       	com	r26
    19f6:	ba 2f       	mov	r27, r26
    19f8:	48 0f       	add	r20, r24
    19fa:	59 1f       	adc	r21, r25
    19fc:	6a 1f       	adc	r22, r26
    19fe:	7b 1f       	adc	r23, r27
    1a00:	40 93 21 03 	sts	0x0321, r20
    1a04:	50 93 22 03 	sts	0x0322, r21
    1a08:	60 93 23 03 	sts	0x0323, r22
    1a0c:	70 93 24 03 	sts	0x0324, r23

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    1a10:	77 fd       	sbrc	r23, 7
    1a12:	6d c0       	rjmp	.+218    	; 0x1aee <start_speed_control_left+0x1da>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    1a14:	14 16       	cp	r1, r20
    1a16:	15 06       	cpc	r1, r21
    1a18:	16 06       	cpc	r1, r22
    1a1a:	17 06       	cpc	r1, r23
    1a1c:	14 f4       	brge	.+4      	; 0x1a22 <start_speed_control_left+0x10e>
    1a1e:	17 fd       	sbrc	r17, 7
    1a20:	68 c0       	rjmp	.+208    	; 0x1af2 <start_speed_control_left+0x1de>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    1a22:	41 5c       	subi	r20, 0xC1	; 193
    1a24:	5d 45       	sbci	r21, 0x5D	; 93
    1a26:	60 40       	sbci	r22, 0x00	; 0
    1a28:	70 40       	sbci	r23, 0x00	; 0
    1a2a:	0c f4       	brge	.+2      	; 0x1a2e <start_speed_control_left+0x11a>
    1a2c:	80 c0       	rjmp	.+256    	; 0x1b2e <start_speed_control_left+0x21a>
    1a2e:	80 ec       	ldi	r24, 0xC0	; 192
    1a30:	9d e5       	ldi	r25, 0x5D	; 93
    1a32:	a0 e0       	ldi	r26, 0x00	; 0
    1a34:	b0 e0       	ldi	r27, 0x00	; 0
    1a36:	80 93 21 03 	sts	0x0321, r24
    1a3a:	90 93 22 03 	sts	0x0322, r25
    1a3e:	a0 93 23 03 	sts	0x0323, r26
    1a42:	b0 93 24 03 	sts	0x0324, r27
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = (signed int)(pwm_left_speed_controller>>4);
    1a46:	54 e0       	ldi	r21, 0x04	; 4
    1a48:	b5 95       	asr	r27
    1a4a:	a7 95       	ror	r26
    1a4c:	97 95       	ror	r25
    1a4e:	87 95       	ror	r24
    1a50:	5a 95       	dec	r21
    1a52:	d1 f7       	brne	.-12     	; 0x1a48 <start_speed_control_left+0x134>
    1a54:	9c 01       	movw	r18, r24
    1a56:	99 83       	std	Y+1, r25	; 0x01
    1a58:	88 83       	st	Y, r24

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
    1a5a:	80 91 07 03 	lds	r24, 0x0307
    1a5e:	90 91 08 03 	lds	r25, 0x0308
    1a62:	18 16       	cp	r1, r24
    1a64:	19 06       	cpc	r1, r25
    1a66:	0c f0       	brlt	.+2      	; 0x1a6a <start_speed_control_left+0x156>
    1a68:	5d c0       	rjmp	.+186    	; 0x1b24 <start_speed_control_left+0x210>
		*pwm_left += 1;
    1a6a:	c9 01       	movw	r24, r18
    1a6c:	01 96       	adiw	r24, 0x01	; 1
    1a6e:	99 83       	std	Y+1, r25	; 0x01
    1a70:	88 83       	st	Y, r24
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
	}
	*/

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    1a72:	22 e0       	ldi	r18, 0x02	; 2
    1a74:	80 30       	cpi	r24, 0x00	; 0
    1a76:	92 07       	cpc	r25, r18
    1a78:	f4 f0       	brlt	.+60     	; 0x1ab6 <start_speed_control_left+0x1a2>
    1a7a:	8f ef       	ldi	r24, 0xFF	; 255
    1a7c:	91 e0       	ldi	r25, 0x01	; 1
    1a7e:	99 83       	std	Y+1, r25	; 0x01
    1a80:	88 83       	st	Y, r24
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);

}
    1a82:	df 91       	pop	r29
    1a84:	cf 91       	pop	r28
    1a86:	1f 91       	pop	r17
    1a88:	0f 91       	pop	r16
    1a8a:	ff 90       	pop	r15
    1a8c:	ef 90       	pop	r14
    1a8e:	08 95       	ret
void start_speed_control_left(signed int *pwm_left) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    1a90:	10 92 26 03 	sts	0x0326, r1
    1a94:	10 92 25 03 	sts	0x0325, r1
		delta_left_speed_current = 0;
    1a98:	10 92 a2 05 	sts	0x05A2, r1
    1a9c:	10 92 a1 05 	sts	0x05A1, r1
		delta_left_speed_prev = 0;
    1aa0:	10 92 b7 09 	sts	0x09B7, r1
    1aa4:	10 92 b6 09 	sts	0x09B6, r1
	*/

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);

}
    1aa8:	df 91       	pop	r29
    1aaa:	cf 91       	pop	r28
    1aac:	1f 91       	pop	r17
    1aae:	0f 91       	pop	r16
    1ab0:	ff 90       	pop	r15
    1ab2:	ef 90       	pop	r14
    1ab4:	08 95       	ret
		*pwm_left -= 30;
	}
	*/

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    1ab6:	81 50       	subi	r24, 0x01	; 1
    1ab8:	9e 4f       	sbci	r25, 0xFE	; 254
    1aba:	1c f7       	brge	.-58     	; 0x1a82 <start_speed_control_left+0x16e>
    1abc:	81 e0       	ldi	r24, 0x01	; 1
    1abe:	9e ef       	ldi	r25, 0xFE	; 254
    1ac0:	99 83       	std	Y+1, r25	; 0x01
    1ac2:	88 83       	st	Y, r24

}
    1ac4:	df 91       	pop	r29
    1ac6:	cf 91       	pop	r28
    1ac8:	1f 91       	pop	r17
    1aca:	0f 91       	pop	r16
    1acc:	ff 90       	pop	r15
    1ace:	ef 90       	pop	r14
    1ad0:	08 95       	ret
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT) {
		delta_left_speed_sum = I_LIMIT;
	} else if(delta_left_speed_sum < -I_LIMIT) {
    1ad2:	89 ef       	ldi	r24, 0xF9	; 249
    1ad4:	20 3c       	cpi	r18, 0xC0	; 192
    1ad6:	38 07       	cpc	r19, r24
    1ad8:	0c f0       	brlt	.+2      	; 0x1adc <start_speed_control_left+0x1c8>
    1ada:	56 cf       	rjmp	.-340    	; 0x1988 <start_speed_control_left+0x74>
		delta_left_speed_sum = -I_LIMIT;
    1adc:	80 ec       	ldi	r24, 0xC0	; 192
    1ade:	99 ef       	ldi	r25, 0xF9	; 249
    1ae0:	90 93 26 03 	sts	0x0326, r25
    1ae4:	80 93 25 03 	sts	0x0325, r24
    1ae8:	20 ec       	ldi	r18, 0xC0	; 192
    1aea:	39 ef       	ldi	r19, 0xF9	; 249
    1aec:	4d cf       	rjmp	.-358    	; 0x1988 <start_speed_control_left+0x74>
	pwm_left_speed_controller += (signed long int)(delta_left_speed_current*P_PART);
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_PART);
	pwm_left_speed_controller += (signed long int)(delta_left_speed_sum*I_PART);

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    1aee:	17 fd       	sbrc	r17, 7
    1af0:	98 cf       	rjmp	.-208    	; 0x1a22 <start_speed_control_left+0x10e>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    1af2:	10 92 21 03 	sts	0x0321, r1
    1af6:	10 92 22 03 	sts	0x0322, r1
    1afa:	10 92 23 03 	sts	0x0323, r1
    1afe:	10 92 24 03 	sts	0x0324, r1
    1b02:	80 e0       	ldi	r24, 0x00	; 0
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	a0 e0       	ldi	r26, 0x00	; 0
    1b08:	b0 e0       	ldi	r27, 0x00	; 0
    1b0a:	9d cf       	rjmp	.-198    	; 0x1a46 <start_speed_control_left+0x132>
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    1b0c:	80 91 0d 03 	lds	r24, 0x030D
    1b10:	90 91 0e 03 	lds	r25, 0x030E
    1b14:	28 0f       	add	r18, r24
    1b16:	39 1f       	adc	r19, r25
    1b18:	30 93 a2 05 	sts	0x05A2, r19
    1b1c:	20 93 a1 05 	sts	0x05A1, r18
    1b20:	f9 01       	movw	r30, r18
    1b22:	1b cf       	rjmp	.-458    	; 0x195a <start_speed_control_left+0x46>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
		*pwm_left += 1;
	} else {
		*pwm_left -= 1;
    1b24:	c9 01       	movw	r24, r18
    1b26:	01 97       	sbiw	r24, 0x01	; 1
    1b28:	99 83       	std	Y+1, r25	; 0x01
    1b2a:	88 83       	st	Y, r24
    1b2c:	a2 cf       	rjmp	.-188    	; 0x1a72 <start_speed_control_left+0x15e>
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    1b2e:	80 91 21 03 	lds	r24, 0x0321
    1b32:	90 91 22 03 	lds	r25, 0x0322
    1b36:	a0 91 23 03 	lds	r26, 0x0323
    1b3a:	b0 91 24 03 	lds	r27, 0x0324
    1b3e:	80 34       	cpi	r24, 0x40	; 64
    1b40:	22 ea       	ldi	r18, 0xA2	; 162
    1b42:	92 07       	cpc	r25, r18
    1b44:	2f ef       	ldi	r18, 0xFF	; 255
    1b46:	a2 07       	cpc	r26, r18
    1b48:	2f ef       	ldi	r18, 0xFF	; 255
    1b4a:	b2 07       	cpc	r27, r18
    1b4c:	0c f0       	brlt	.+2      	; 0x1b50 <start_speed_control_left+0x23c>
    1b4e:	7b cf       	rjmp	.-266    	; 0x1a46 <start_speed_control_left+0x132>
    1b50:	80 e4       	ldi	r24, 0x40	; 64
    1b52:	92 ea       	ldi	r25, 0xA2	; 162
    1b54:	af ef       	ldi	r26, 0xFF	; 255
    1b56:	bf ef       	ldi	r27, 0xFF	; 255
    1b58:	80 93 21 03 	sts	0x0321, r24
    1b5c:	90 93 22 03 	sts	0x0322, r25
    1b60:	a0 93 23 03 	sts	0x0323, r26
    1b64:	b0 93 24 03 	sts	0x0324, r27
    1b68:	6e cf       	rjmp	.-292    	; 0x1a46 <start_speed_control_left+0x132>

00001b6a <initPortsIO>:
#include "ports_io.h"


void initPortsIO(void) {

	MCUCR |= (1 << PUD);	// pull-up disable for all ports
    1b6a:	85 b7       	in	r24, 0x35	; 53
    1b6c:	80 61       	ori	r24, 0x10	; 16
    1b6e:	85 bf       	out	0x35, r24	; 53

	DDRA = 0xFF;			// proximity pulses as output
    1b70:	2f ef       	ldi	r18, 0xFF	; 255
    1b72:	21 b9       	out	0x01, r18	; 1
	PORTA = 0x00;			// proximity pulses turned off
    1b74:	12 b8       	out	0x02, r1	; 2
	
	DDRB = 0xF7;			// pwm for led r/g/b as output; CE, MOSI, SCK, SS as output (master) 
    1b76:	87 ef       	ldi	r24, 0xF7	; 247
    1b78:	84 b9       	out	0x04, r24	; 4
	PORTB = 0xE0;			// r,g,b leds turned off on high state
    1b7a:	80 ee       	ldi	r24, 0xE0	; 224
    1b7c:	85 b9       	out	0x05, r24	; 5

	DDRC = 0xF0;			// selector as input; IR leds as output; sens-enable, sleep as output
    1b7e:	80 ef       	ldi	r24, 0xF0	; 240
    1b80:	87 b9       	out	0x07, r24	; 7
	PORTC = 0xB0;			// sleep = 1 (no sleep), sense_enable=0, IR leds = 1
    1b82:	80 eb       	ldi	r24, 0xB0	; 176
    1b84:	88 b9       	out	0x08, r24	; 8

	DDRD = 0xFC;			// all pins to output; when usart and i2c peripherals are activated they change the pins direction accordingly
    1b86:	8c ef       	ldi	r24, 0xFC	; 252
    1b88:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x03;			// default for unused pins is 0
    1b8a:	83 e0       	ldi	r24, 0x03	; 3
    1b8c:	8b b9       	out	0x0b, r24	; 11

	DDRE = 0xFF;			// all pins to output (pwm and dir for motor right as output; when usart is activated it changes the pins direction accordingly)
    1b8e:	2d b9       	out	0x0d, r18	; 13
	PORTE = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    1b90:	1e b8       	out	0x0e, r1	; 14

	DDRF = 0x00;			// adc channel pins as input		
    1b92:	10 ba       	out	0x10, r1	; 16

	DDRG = 0xFF;			// unused pins as output
    1b94:	23 bb       	out	0x13, r18	; 19
	if(hardwareRevision == HW_REV_3_0) {
    1b96:	90 91 73 04 	lds	r25, 0x0473
    1b9a:	99 23       	and	r25, r25
    1b9c:	99 f4       	brne	.+38     	; 0x1bc4 <initPortsIO+0x5a>
		PORTG = 0x00;		// default for unused pins is 0
    1b9e:	14 ba       	out	0x14, r1	; 20
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
	}	

	DDRH = 0xFF;			// all pins to output; when usart is activated it changes the pins direction accordingly
    1ba0:	20 93 01 01 	sts	0x0101, r18
	PORTH = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    1ba4:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
    1ba8:	8f e0       	ldi	r24, 0x0F	; 15
    1baa:	80 93 04 01 	sts	0x0104, r24
	if(hardwareRevision == HW_REV_3_0) {
		PORTJ &= 0x00;		// cliff pulse turned off
    1bae:	80 91 05 01 	lds	r24, 0x0105
    1bb2:	10 92 05 01 	sts	0x0105, r1
	if(hardwareRevision == HW_REV_3_1) {
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.1)"
	}	

	DDRK = 0x00;			// adc channel pins as input
    1bb6:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;			// all pins to output
    1bba:	20 93 0a 01 	sts	0x010A, r18
	if(hardwareRevision == HW_REV_3_0) {
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
    1bbe:	10 92 0b 01 	sts	0x010B, r1
    1bc2:	08 95       	ret

	DDRG = 0xFF;			// unused pins as output
	if(hardwareRevision == HW_REV_3_0) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    1bc4:	91 30       	cpi	r25, 0x01	; 1
    1bc6:	89 f4       	brne	.+34     	; 0x1bea <initPortsIO+0x80>
		PORTG = 0x00;		// default for unused pins is 0
    1bc8:	14 ba       	out	0x14, r1	; 20
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
	}	

	DDRH = 0xFF;			// all pins to output; when usart is activated it changes the pins direction accordingly
    1bca:	20 93 01 01 	sts	0x0101, r18
	PORTH = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    1bce:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
    1bd2:	8f e0       	ldi	r24, 0x0F	; 15
    1bd4:	80 93 04 01 	sts	0x0104, r24
	if(hardwareRevision == HW_REV_3_0) {
		PORTJ &= 0x00;		// cliff pulse turned off
		//#warning "Normal logic for ground sensors (hw rev 3.0)"
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTJ = 0x0F;
    1bd8:	80 93 05 01 	sts	0x0105, r24
	if(hardwareRevision == HW_REV_3_1) {
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.1)"
	}	

	DDRK = 0x00;			// adc channel pins as input
    1bdc:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;			// all pins to output
    1be0:	20 93 0a 01 	sts	0x010A, r18
	if(hardwareRevision == HW_REV_3_0) {
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
    1be4:	10 92 0b 01 	sts	0x010B, r1
    1be8:	08 95       	ret
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    1bea:	92 30       	cpi	r25, 0x02	; 2
    1bec:	99 f4       	brne	.+38     	; 0x1c14 <initPortsIO+0xaa>
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
    1bee:	88 e0       	ldi	r24, 0x08	; 8
    1bf0:	84 bb       	out	0x14, r24	; 20
	}	

	DDRH = 0xFF;			// all pins to output; when usart is activated it changes the pins direction accordingly
    1bf2:	20 93 01 01 	sts	0x0101, r18
	PORTH = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    1bf6:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
    1bfa:	8f e0       	ldi	r24, 0x0F	; 15
    1bfc:	80 93 04 01 	sts	0x0104, r24
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.0.1)"
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTJ = 0x0F;
    1c00:	80 93 05 01 	sts	0x0105, r24
		//#warning "Inverse logic for ground sensors (hw rev 3.1)"
	}	

	DDRK = 0x00;			// adc channel pins as input
    1c04:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;			// all pins to output
    1c08:	20 93 0a 01 	sts	0x010A, r18
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTL = 0xF7;		// pwm (unused) to 0, leds turned off on high state
    1c0c:	87 ef       	ldi	r24, 0xF7	; 247
    1c0e:	80 93 0b 01 	sts	0x010B, r24
    1c12:	08 95       	ret
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
	}	

	DDRH = 0xFF;			// all pins to output; when usart is activated it changes the pins direction accordingly
    1c14:	20 93 01 01 	sts	0x0101, r18
	PORTH = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    1c18:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
    1c1c:	8f e0       	ldi	r24, 0x0F	; 15
    1c1e:	80 93 04 01 	sts	0x0104, r24
	if(hardwareRevision == HW_REV_3_1) {
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.1)"
	}	

	DDRK = 0x00;			// adc channel pins as input
    1c22:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;			// all pins to output
    1c26:	20 93 0a 01 	sts	0x010A, r18
	if(hardwareRevision == HW_REV_3_0) {
    1c2a:	99 23       	and	r25, r25
    1c2c:	41 f2       	breq	.-112    	; 0x1bbe <initPortsIO+0x54>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
    1c2e:	91 30       	cpi	r25, 0x01	; 1
    1c30:	31 f2       	breq	.-116    	; 0x1bbe <initPortsIO+0x54>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    1c32:	92 30       	cpi	r25, 0x02	; 2
    1c34:	59 f3       	breq	.-42     	; 0x1c0c <initPortsIO+0xa2>
    1c36:	08 95       	ret

00001c38 <i2c_close>:

/* I2C clock in Hz */
#define SCL_CLOCK  440000L

void i2c_close() {
	TWBR = 0x00;
    1c38:	10 92 b8 00 	sts	0x00B8, r1
	TWCR = 0x00;
    1c3c:	10 92 bc 00 	sts	0x00BC, r1
}
    1c40:	08 95       	ret

00001c42 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
    sbi(PORTD, 0);
    1c42:	58 9a       	sbi	0x0b, 0	; 11
    sbi(PORTD, 1);
    1c44:	59 9a       	sbi	0x0b, 1	; 11

  TWSR = 0;                         /* no prescaler */
    1c46:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    1c4a:	81 e0       	ldi	r24, 0x01	; 1
    1c4c:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
    1c50:	08 95       	ret

00001c52 <i2c_start>:
/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
{
    1c52:	98 2f       	mov	r25, r24
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1c54:	84 ea       	ldi	r24, 0xA4	; 164
    1c56:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    1c5a:	80 91 bc 00 	lds	r24, 0x00BC
    1c5e:	87 ff       	sbrs	r24, 7
    1c60:	fc cf       	rjmp	.-8      	; 0x1c5a <i2c_start+0x8>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    1c62:	80 91 b9 00 	lds	r24, 0x00B9
    1c66:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    1c68:	88 30       	cpi	r24, 0x08	; 8
    1c6a:	21 f0       	breq	.+8      	; 0x1c74 <i2c_start+0x22>
    1c6c:	80 31       	cpi	r24, 0x10	; 16
    1c6e:	11 f0       	breq	.+4      	; 0x1c74 <i2c_start+0x22>
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	08 95       	ret
		//usartTransmit(twst);
		return 1;
	}

	// send device address
	TWDR = address;
    1c74:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    1c78:	84 e8       	ldi	r24, 0x84	; 132
    1c7a:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    1c7e:	80 91 bc 00 	lds	r24, 0x00BC
    1c82:	87 ff       	sbrs	r24, 7
    1c84:	fc cf       	rjmp	.-8      	; 0x1c7e <i2c_start+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    1c86:	90 91 b9 00 	lds	r25, 0x00B9
    1c8a:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    1c8c:	98 31       	cpi	r25, 0x18	; 24
    1c8e:	29 f0       	breq	.+10     	; 0x1c9a <i2c_start+0x48>
    1c90:	80 e0       	ldi	r24, 0x00	; 0
    1c92:	90 34       	cpi	r25, 0x40	; 64
    1c94:	09 f0       	breq	.+2      	; 0x1c98 <i2c_start+0x46>
    1c96:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}

	return 0;

}/* i2c_start */
    1c98:	08 95       	ret
	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    1c9a:	80 e0       	ldi	r24, 0x00	; 0
    1c9c:	08 95       	ret

00001c9e <i2c_start_wait>:
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
    1c9e:	98 2f       	mov	r25, r24


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1ca0:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    1ca2:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1ca4:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1ca6:	20 93 bc 00 	sts	0x00BC, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    1caa:	80 91 bc 00 	lds	r24, 0x00BC
    1cae:	87 ff       	sbrs	r24, 7
    1cb0:	fc cf       	rjmp	.-8      	; 0x1caa <i2c_start_wait+0xc>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    1cb2:	80 91 b9 00 	lds	r24, 0x00B9
    1cb6:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    1cb8:	88 30       	cpi	r24, 0x08	; 8
    1cba:	11 f0       	breq	.+4      	; 0x1cc0 <i2c_start_wait+0x22>
    1cbc:	80 31       	cpi	r24, 0x10	; 16
    1cbe:	99 f7       	brne	.-26     	; 0x1ca6 <i2c_start_wait+0x8>
    
    	// send device address
    	TWDR = address;
    1cc0:	90 93 bb 00 	sts	0x00BB, r25
    	TWCR = (1<<TWINT) | (1<<TWEN);
    1cc4:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    1cc8:	80 91 bc 00 	lds	r24, 0x00BC
    1ccc:	87 ff       	sbrs	r24, 7
    1cce:	fc cf       	rjmp	.-8      	; 0x1cc8 <i2c_start_wait+0x2a>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    1cd0:	80 91 b9 00 	lds	r24, 0x00B9
    1cd4:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    1cd6:	80 32       	cpi	r24, 0x20	; 32
    1cd8:	11 f0       	breq	.+4      	; 0x1cde <i2c_start_wait+0x40>
    1cda:	88 35       	cpi	r24, 0x58	; 88
    1cdc:	39 f4       	brne	.+14     	; 0x1cec <i2c_start_wait+0x4e>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1cde:	40 93 bc 00 	sts	0x00BC, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    1ce2:	80 91 bc 00 	lds	r24, 0x00BC
    1ce6:	84 fd       	sbrc	r24, 4
    1ce8:	fc cf       	rjmp	.-8      	; 0x1ce2 <i2c_start_wait+0x44>
    1cea:	dd cf       	rjmp	.-70     	; 0x1ca6 <i2c_start_wait+0x8>
    1cec:	08 95       	ret

00001cee <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1cee:	84 e9       	ldi	r24, 0x94	; 148
    1cf0:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    1cf4:	80 91 bc 00 	lds	r24, 0x00BC
    1cf8:	84 fd       	sbrc	r24, 4
    1cfa:	fc cf       	rjmp	.-8      	; 0x1cf4 <i2c_stop+0x6>

}/* i2c_stop */
    1cfc:	08 95       	ret

00001cfe <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    1cfe:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1d02:	84 e8       	ldi	r24, 0x84	; 132
    1d04:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    1d08:	80 91 bc 00 	lds	r24, 0x00BC
    1d0c:	87 ff       	sbrs	r24, 7
    1d0e:	fc cf       	rjmp	.-8      	; 0x1d08 <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    1d10:	80 91 b9 00 	lds	r24, 0x00B9
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	88 7f       	andi	r24, 0xF8	; 248
    1d18:	88 32       	cpi	r24, 0x28	; 40
    1d1a:	09 f0       	breq	.+2      	; 0x1d1e <i2c_write+0x20>
    1d1c:	91 e0       	ldi	r25, 0x01	; 1
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    1d1e:	89 2f       	mov	r24, r25
    1d20:	08 95       	ret

00001d22 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    1d22:	84 ec       	ldi	r24, 0xC4	; 196
    1d24:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    1d28:	80 91 bc 00 	lds	r24, 0x00BC
    1d2c:	87 ff       	sbrs	r24, 7
    1d2e:	fc cf       	rjmp	.-8      	; 0x1d28 <i2c_readAck+0x6>

    return TWDR;
    1d30:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    1d34:	08 95       	ret

00001d36 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    1d36:	84 e8       	ldi	r24, 0x84	; 132
    1d38:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    1d3c:	80 91 bc 00 	lds	r24, 0x00BC
    1d40:	87 ff       	sbrs	r24, 7
    1d42:	fc cf       	rjmp	.-8      	; 0x1d3c <i2c_readNak+0x6>
	
    return TWDR;
    1d44:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    1d48:	08 95       	ret

00001d4a <i2c_rep_start>:
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    1d4a:	98 2f       	mov	r25, r24
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1d4c:	84 ea       	ldi	r24, 0xA4	; 164
    1d4e:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    1d52:	80 91 bc 00 	lds	r24, 0x00BC
    1d56:	87 ff       	sbrs	r24, 7
    1d58:	fc cf       	rjmp	.-8      	; 0x1d52 <i2c_rep_start+0x8>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    1d5a:	80 91 b9 00 	lds	r24, 0x00B9
    1d5e:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    1d60:	88 30       	cpi	r24, 0x08	; 8
    1d62:	21 f0       	breq	.+8      	; 0x1d6c <i2c_rep_start+0x22>
    1d64:	80 31       	cpi	r24, 0x10	; 16
    1d66:	11 f0       	breq	.+4      	; 0x1d6c <i2c_rep_start+0x22>
    1d68:	81 e0       	ldi	r24, 0x01	; 1
    1d6a:	08 95       	ret
		//usartTransmit(twst);
		return 1;
	}

	// send device address
	TWDR = address;
    1d6c:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    1d70:	84 e8       	ldi	r24, 0x84	; 132
    1d72:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    1d76:	80 91 bc 00 	lds	r24, 0x00BC
    1d7a:	87 ff       	sbrs	r24, 7
    1d7c:	fc cf       	rjmp	.-8      	; 0x1d76 <i2c_rep_start+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    1d7e:	90 91 b9 00 	lds	r25, 0x00B9
    1d82:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    1d84:	98 31       	cpi	r25, 0x18	; 24
    1d86:	29 f0       	breq	.+10     	; 0x1d92 <i2c_rep_start+0x48>
    1d88:	80 e0       	ldi	r24, 0x00	; 0
    1d8a:	90 34       	cpi	r25, 0x40	; 64
    1d8c:	09 f0       	breq	.+2      	; 0x1d90 <i2c_rep_start+0x46>
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    1d90:	08 95       	ret
	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    1d92:	80 e0       	ldi	r24, 0x00	; 0
    1d94:	08 95       	ret

00001d96 <initUsart0>:
	// @38400 baud: 8000000/16/38400-1 = 12 => 8000000/16/13 = 38461 => 100-(38400/38461*100)=0.15% of error
	// Double speed mode:
	// @57600 baud: 8000000/8/57600-1 = 16 => 8000000/8/17 = 58823 => 100-(57600/58823*100)=2.08% of error	


	UBRR0H = 0;												// set baudrate
    1d96:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 16;
    1d9a:	80 e1       	ldi	r24, 0x10	; 16
    1d9c:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0A  |= (1 << U2X0);									// enable double speed
    1da0:	e0 ec       	ldi	r30, 0xC0	; 192
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	80 81       	ld	r24, Z
    1da6:	82 60       	ori	r24, 0x02	; 2
    1da8:	80 83       	st	Z, r24
	//UCSR0A &= ~(1 << U2X0);
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);	// enable uart0 transmitter and receiver; enable rx interrupt for use with aseba
    1daa:	e1 ec       	ldi	r30, 0xC1	; 193
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	80 81       	ld	r24, Z
    1db0:	88 69       	ori	r24, 0x98	; 152
    1db2:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);					// set frame format: 8-bit data, no parity, 1 stop bit
    1db4:	e2 ec       	ldi	r30, 0xC2	; 194
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	80 81       	ld	r24, Z
    1dba:	86 60       	ori	r24, 0x06	; 6
    1dbc:	80 83       	st	Z, r24



}
    1dbe:	08 95       	ret

00001dc0 <initUsart1>:

void initUsart1() {

	UBRR1H = 0;												// set baudrate
    1dc0:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = 16;
    1dc4:	80 e1       	ldi	r24, 0x10	; 16
    1dc6:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1A  |= (1 << U2X1);									// enable double speed
    1dca:	e8 ec       	ldi	r30, 0xC8	; 200
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	80 81       	ld	r24, Z
    1dd0:	82 60       	ori	r24, 0x02	; 2
    1dd2:	80 83       	st	Z, r24
	//UCSR0A &= ~(1 << U2X1);
	UCSR1B |= (1 << TXEN1) | (1 << RXEN1);					// enable uart0 transmitter and receiver
    1dd4:	e9 ec       	ldi	r30, 0xC9	; 201
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	80 81       	ld	r24, Z
    1dda:	88 61       	ori	r24, 0x18	; 24
    1ddc:	80 83       	st	Z, r24
	UCSR1C |= (1<<UCSZ11) | (1<<UCSZ10);					// set frame format: 8-bit data, no parity, 1 stop bit
    1dde:	ea ec       	ldi	r30, 0xCA	; 202
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	80 81       	ld	r24, Z
    1de4:	86 60       	ori	r24, 0x06	; 6
    1de6:	80 83       	st	Z, r24

}
    1de8:	08 95       	ret

00001dea <closeUsart>:

void closeUsart() {

	UCSR0A = 0x00;	// clear all usart registers
    1dea:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0x00;
    1dee:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 0x00;
    1df2:	10 92 c2 00 	sts	0x00C2, r1

}
    1df6:	08 95       	ret

00001df8 <usart0Transmit>:

void usart0Transmit(unsigned char data, unsigned char isBlocking) {
    1df8:	98 2f       	mov	r25, r24

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    1dfa:	80 91 c0 00 	lds	r24, 0x00C0
    1dfe:	85 ff       	sbrs	r24, 5
    1e00:	fc cf       	rjmp	.-8      	; 0x1dfa <usart0Transmit+0x2>
	UDR0 = data;						// put data into buffer, sends the data
    1e02:	90 93 c6 00 	sts	0x00C6, r25
	if(isBlocking) {
    1e06:	66 23       	and	r22, r22
    1e08:	21 f0       	breq	.+8      	; 0x1e12 <usart0Transmit+0x1a>
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    1e0a:	80 91 c0 00 	lds	r24, 0x00C0
    1e0e:	86 ff       	sbrs	r24, 6
    1e10:	fc cf       	rjmp	.-8      	; 0x1e0a <usart0Transmit+0x12>
    1e12:	08 95       	ret

00001e14 <usart1Transmit>:
	}
}

void usart1Transmit(unsigned char data, unsigned char isBlocking) {
    1e14:	98 2f       	mov	r25, r24

	while (!(UCSR1A & (1<<UDRE1)));		// wait for empty transmit buffer
    1e16:	80 91 c8 00 	lds	r24, 0x00C8
    1e1a:	85 ff       	sbrs	r24, 5
    1e1c:	fc cf       	rjmp	.-8      	; 0x1e16 <usart1Transmit+0x2>
	UDR1 = data;						// put data into buffer, sends the data
    1e1e:	90 93 ce 00 	sts	0x00CE, r25
	if(isBlocking) {
    1e22:	66 23       	and	r22, r22
    1e24:	21 f0       	breq	.+8      	; 0x1e2e <usart1Transmit+0x1a>
		while (!(UCSR1A & (1<<TXC1)));	// wait transmission complete
    1e26:	80 91 c8 00 	lds	r24, 0x00C8
    1e2a:	86 ff       	sbrs	r24, 6
    1e2c:	fc cf       	rjmp	.-8      	; 0x1e26 <usart1Transmit+0x12>
    1e2e:	08 95       	ret

00001e30 <usart0InputBufferEmpty>:

}

char usart0InputBufferEmpty() {

	if(UCSR0A & (1<<RXC0)) {	// something received
    1e30:	80 91 c0 00 	lds	r24, 0x00C0
    1e34:	80 95       	com	r24
		return 0;
	} else {
		return 1;
	}

}
    1e36:	88 1f       	adc	r24, r24
    1e38:	88 27       	eor	r24, r24
    1e3a:	88 1f       	adc	r24, r24
    1e3c:	08 95       	ret

00001e3e <usart0Receive>:

unsigned char usart0Receive() {
    1e3e:	20 e0       	ldi	r18, 0x00	; 0
    1e40:	30 e0       	ldi	r19, 0x00	; 0

}

char usart0InputBufferEmpty() {

	if(UCSR0A & (1<<RXC0)) {	// something received
    1e42:	80 91 c0 00 	lds	r24, 0x00C0
    1e46:	87 fd       	sbrc	r24, 7
    1e48:	0a c0       	rjmp	.+20     	; 0x1e5e <usart0Receive+0x20>
			commError = 1;
			return 0;				// timeout
		}
	}								// wait for data to be received

	return UDR0;					// get and return received data from buffer
    1e4a:	2f 5f       	subi	r18, 0xFF	; 255
    1e4c:	3f 4f       	sbci	r19, 0xFF	; 255

	unsigned int i=0;

	while(usart0InputBufferEmpty()) {
		i++;
		if(i>150) {
    1e4e:	27 39       	cpi	r18, 0x97	; 151
    1e50:	31 05       	cpc	r19, r1
    1e52:	b9 f7       	brne	.-18     	; 0x1e42 <usart0Receive+0x4>
			/*
			if(UCSR0A & (1<<3)) {	// overflow flag
			}
			*/
			commError = 1;
    1e54:	81 e0       	ldi	r24, 0x01	; 1
    1e56:	80 93 3a 03 	sts	0x033A, r24
    1e5a:	80 e0       	ldi	r24, 0x00	; 0
    1e5c:	08 95       	ret
			return 0;				// timeout
		}
	}								// wait for data to be received

	return UDR0;					// get and return received data from buffer
    1e5e:	80 91 c6 00 	lds	r24, 0x00C6

}
    1e62:	08 95       	ret

00001e64 <__vector_25>:
		}
	}
}
*/

ISR(USART0_RX_vect) {
    1e64:	1f 92       	push	r1
    1e66:	0f 92       	push	r0
    1e68:	0f b6       	in	r0, 0x3f	; 63
    1e6a:	0f 92       	push	r0
    1e6c:	0b b6       	in	r0, 0x3b	; 59
    1e6e:	0f 92       	push	r0
    1e70:	11 24       	eor	r1, r1
    1e72:	2f 93       	push	r18
    1e74:	3f 93       	push	r19
    1e76:	4f 93       	push	r20
    1e78:	5f 93       	push	r21
    1e7a:	6f 93       	push	r22
    1e7c:	7f 93       	push	r23
    1e7e:	8f 93       	push	r24
    1e80:	9f 93       	push	r25
    1e82:	af 93       	push	r26
    1e84:	bf 93       	push	r27
    1e86:	ef 93       	push	r30
    1e88:	ff 93       	push	r31

	char receivedByte = UDR0;
    1e8a:	90 91 c6 00 	lds	r25, 0x00C6


	if(currentSelector==14) {
    1e8e:	80 91 70 04 	lds	r24, 0x0470
    1e92:	8e 30       	cpi	r24, 0x0E	; 14
    1e94:	c1 f1       	breq	.+112    	; 0x1f06 <__vector_25+0xa2>
		if(receivedByte == 0xAA) {
			irCommSendValues = 1;
		}
	} else if(currentSelector==15) {
    1e96:	8f 30       	cpi	r24, 0x0F	; 15
    1e98:	31 f1       	breq	.+76     	; 0x1ee6 <__vector_25+0x82>
			eeprom_write_byte((uint8_t*) 4093, currentOsccal); 
		}

	} else {

		if(chooseMenu) {
    1e9a:	80 91 0d 02 	lds	r24, 0x020D
    1e9e:	88 23       	and	r24, r24
    1ea0:	09 f0       	breq	.+2      	; 0x1ea4 <__vector_25+0x40>
    1ea2:	46 c0       	rjmp	.+140    	; 0x1f30 <__vector_25+0xcc>
			chooseMenu = 0;
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
    1ea4:	80 91 3f 04 	lds	r24, 0x043F
    1ea8:	81 30       	cpi	r24, 0x01	; 1
    1eaa:	09 f4       	brne	.+2      	; 0x1eae <__vector_25+0x4a>
    1eac:	46 c0       	rjmp	.+140    	; 0x1f3a <__vector_25+0xd6>
    1eae:	82 30       	cpi	r24, 0x02	; 2
    1eb0:	61 f5       	brne	.+88     	; 0x1f0a <__vector_25+0xa6>
						menuChoice = 0;
					}
					break;

				case 2:	// address writing in eeprom
					if(menuState == 0) { // receive rf address LSB:
    1eb2:	40 91 41 04 	lds	r20, 0x0441
    1eb6:	44 23       	and	r20, r20
    1eb8:	09 f4       	brne	.+2      	; 0x1ebc <__vector_25+0x58>
    1eba:	5e c0       	rjmp	.+188    	; 0x1f78 <__vector_25+0x114>
						rfAddress = (unsigned int)receivedByte&0x00FF;
						menuState = 1;
					} else if(menuState == 1) { // receive rf address MSB
    1ebc:	41 30       	cpi	r20, 0x01	; 1
    1ebe:	29 f5       	brne	.+74     	; 0x1f0a <__vector_25+0xa6>
						rfAddress |= ((unsigned int)receivedByte<<8);
    1ec0:	39 2f       	mov	r19, r25
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	80 91 31 03 	lds	r24, 0x0331
    1ec8:	90 91 32 03 	lds	r25, 0x0332
    1ecc:	82 2b       	or	r24, r18
    1ece:	93 2b       	or	r25, r19
    1ed0:	90 93 32 03 	sts	0x0332, r25
    1ed4:	80 93 31 03 	sts	0x0331, r24
						addressReceived = 1;
    1ed8:	40 93 40 04 	sts	0x0440, r20
						menuState = 0;
    1edc:	10 92 41 04 	sts	0x0441, r1
						chooseMenu = 1;
    1ee0:	40 93 0d 02 	sts	0x020D, r20
    1ee4:	12 c0       	rjmp	.+36     	; 0x1f0a <__vector_25+0xa6>
		if(receivedByte == 0xAA) {
			irCommSendValues = 1;
		}
	} else if(currentSelector==15) {

		if(receivedByte == '+') {
    1ee6:	9b 32       	cpi	r25, 0x2B	; 43
    1ee8:	89 f1       	breq	.+98     	; 0x1f4c <__vector_25+0xe8>
				currentOsccal++;
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
    1eea:	9d 32       	cpi	r25, 0x2D	; 45
    1eec:	e9 f1       	breq	.+122    	; 0x1f68 <__vector_25+0x104>
				currentOsccal--;	
			}
			OSCCAL = currentOsccal;;
		}

		if(receivedByte == 'g') {
    1eee:	97 36       	cpi	r25, 0x67	; 103
    1ef0:	09 f4       	brne	.+2      	; 0x1ef4 <__vector_25+0x90>
    1ef2:	4a c0       	rjmp	.+148    	; 0x1f88 <__vector_25+0x124>
			usart0Transmit(irCommand,1);
			currentOsccal = OSCCAL;
			usart0Transmit(currentOsccal,1);
		}

		if(receivedByte == 's') {
    1ef4:	93 37       	cpi	r25, 0x73	; 115
    1ef6:	49 f4       	brne	.+18     	; 0x1f0a <__vector_25+0xa6>
			eeprom_write_byte((uint8_t*) 4093, currentOsccal); 
    1ef8:	8d ef       	ldi	r24, 0xFD	; 253
    1efa:	9f e0       	ldi	r25, 0x0F	; 15
    1efc:	60 91 7e 05 	lds	r22, 0x057E
    1f00:	0e 94 c4 58 	call	0xb188	; 0xb188 <__eewr_byte_m2560>
    1f04:	02 c0       	rjmp	.+4      	; 0x1f0a <__vector_25+0xa6>

	char receivedByte = UDR0;


	if(currentSelector==14) {
		if(receivedByte == 0xAA) {
    1f06:	9a 3a       	cpi	r25, 0xAA	; 170
    1f08:	59 f1       	breq	.+86     	; 0x1f60 <__vector_25+0xfc>
			}
		}

	}

}
    1f0a:	ff 91       	pop	r31
    1f0c:	ef 91       	pop	r30
    1f0e:	bf 91       	pop	r27
    1f10:	af 91       	pop	r26
    1f12:	9f 91       	pop	r25
    1f14:	8f 91       	pop	r24
    1f16:	7f 91       	pop	r23
    1f18:	6f 91       	pop	r22
    1f1a:	5f 91       	pop	r21
    1f1c:	4f 91       	pop	r20
    1f1e:	3f 91       	pop	r19
    1f20:	2f 91       	pop	r18
    1f22:	0f 90       	pop	r0
    1f24:	0b be       	out	0x3b, r0	; 59
    1f26:	0f 90       	pop	r0
    1f28:	0f be       	out	0x3f, r0	; 63
    1f2a:	0f 90       	pop	r0
    1f2c:	1f 90       	pop	r1
    1f2e:	18 95       	reti
		}

	} else {

		if(chooseMenu) {
			chooseMenu = 0;
    1f30:	10 92 0d 02 	sts	0x020D, r1
			menuChoice = receivedByte;
    1f34:	90 93 3f 04 	sts	0x043F, r25
    1f38:	e8 cf       	rjmp	.-48     	; 0x1f0a <__vector_25+0xa6>
		} else {
			switch(menuChoice) {
				case 1: // send sensors data and activate actuators
					if(receivedByte == 0xAA) {
    1f3a:	9a 3a       	cpi	r25, 0xAA	; 170
    1f3c:	91 f1       	breq	.+100    	; 0x1fa2 <__vector_25+0x13e>
						getDataNow = 1;
					} else if(receivedByte == 0x55) {
    1f3e:	95 35       	cpi	r25, 0x55	; 85
    1f40:	21 f7       	brne	.-56     	; 0x1f0a <__vector_25+0xa6>
						chooseMenu = 1;
    1f42:	80 93 0d 02 	sts	0x020D, r24
						menuChoice = 0;
    1f46:	10 92 3f 04 	sts	0x043F, r1
    1f4a:	df cf       	rjmp	.-66     	; 0x1f0a <__vector_25+0xa6>
			irCommSendValues = 1;
		}
	} else if(currentSelector==15) {

		if(receivedByte == '+') {
			if(currentOsccal<255) {
    1f4c:	80 91 7e 05 	lds	r24, 0x057E
    1f50:	8f 3f       	cpi	r24, 0xFF	; 255
    1f52:	19 f0       	breq	.+6      	; 0x1f5a <__vector_25+0xf6>
				currentOsccal++;
    1f54:	8f 5f       	subi	r24, 0xFF	; 255
    1f56:	80 93 7e 05 	sts	0x057E, r24

		if(receivedByte == '-') {
			if(currentOsccal>0) {
				currentOsccal--;	
			}
			OSCCAL = currentOsccal;;
    1f5a:	80 93 66 00 	sts	0x0066, r24
    1f5e:	d5 cf       	rjmp	.-86     	; 0x1f0a <__vector_25+0xa6>
	char receivedByte = UDR0;


	if(currentSelector==14) {
		if(receivedByte == 0xAA) {
			irCommSendValues = 1;
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	80 93 f8 04 	sts	0x04F8, r24
    1f66:	d1 cf       	rjmp	.-94     	; 0x1f0a <__vector_25+0xa6>
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
			if(currentOsccal>0) {
    1f68:	80 91 7e 05 	lds	r24, 0x057E
    1f6c:	88 23       	and	r24, r24
    1f6e:	a9 f3       	breq	.-22     	; 0x1f5a <__vector_25+0xf6>
				currentOsccal--;	
    1f70:	81 50       	subi	r24, 0x01	; 1
    1f72:	80 93 7e 05 	sts	0x057E, r24
    1f76:	f1 cf       	rjmp	.-30     	; 0x1f5a <__vector_25+0xf6>
					}
					break;

				case 2:	// address writing in eeprom
					if(menuState == 0) { // receive rf address LSB:
						rfAddress = (unsigned int)receivedByte&0x00FF;
    1f78:	90 93 31 03 	sts	0x0331, r25
    1f7c:	10 92 32 03 	sts	0x0332, r1
						menuState = 1;
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	80 93 41 04 	sts	0x0441, r24
    1f86:	c1 cf       	rjmp	.-126    	; 0x1f0a <__vector_25+0xa6>
			}
			OSCCAL = currentOsccal;;
		}

		if(receivedByte == 'g') {
			usart0Transmit(irCommand,1);
    1f88:	80 91 43 04 	lds	r24, 0x0443
    1f8c:	61 e0       	ldi	r22, 0x01	; 1
    1f8e:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
			currentOsccal = OSCCAL;
    1f92:	80 91 66 00 	lds	r24, 0x0066
    1f96:	80 93 7e 05 	sts	0x057E, r24
			usart0Transmit(currentOsccal,1);
    1f9a:	61 e0       	ldi	r22, 0x01	; 1
    1f9c:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
    1fa0:	b4 cf       	rjmp	.-152    	; 0x1f0a <__vector_25+0xa6>
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
				case 1: // send sensors data and activate actuators
					if(receivedByte == 0xAA) {
						getDataNow = 1;
    1fa2:	80 93 42 04 	sts	0x0442, r24
    1fa6:	b1 cf       	rjmp	.-158    	; 0x1f0a <__vector_25+0xa6>

00001fa8 <getSelector>:

#include "utility.h"

unsigned char getSelector() {
   return (SEL0) + 2*(SEL1) + 4*(SEL2) + 8*(SEL3);
    1fa8:	86 b1       	in	r24, 0x06	; 6
    1faa:	46 b1       	in	r20, 0x06	; 6
    1fac:	26 b1       	in	r18, 0x06	; 6
    1fae:	66 b1       	in	r22, 0x06	; 6
    1fb0:	30 e0       	ldi	r19, 0x00	; 0
    1fb2:	28 70       	andi	r18, 0x08	; 8
    1fb4:	30 70       	andi	r19, 0x00	; 0
    1fb6:	35 95       	asr	r19
    1fb8:	27 95       	ror	r18
    1fba:	35 95       	asr	r19
    1fbc:	27 95       	ror	r18
    1fbe:	35 95       	asr	r19
    1fc0:	27 95       	ror	r18
    1fc2:	22 0f       	add	r18, r18
    1fc4:	33 1f       	adc	r19, r19
    1fc6:	50 e0       	ldi	r21, 0x00	; 0
    1fc8:	44 70       	andi	r20, 0x04	; 4
    1fca:	50 70       	andi	r21, 0x00	; 0
    1fcc:	55 95       	asr	r21
    1fce:	47 95       	ror	r20
    1fd0:	55 95       	asr	r21
    1fd2:	47 95       	ror	r20
    1fd4:	24 0f       	add	r18, r20
    1fd6:	35 1f       	adc	r19, r21
    1fd8:	22 0f       	add	r18, r18
    1fda:	33 1f       	adc	r19, r19
    1fdc:	70 e0       	ldi	r23, 0x00	; 0
    1fde:	62 70       	andi	r22, 0x02	; 2
    1fe0:	70 70       	andi	r23, 0x00	; 0
    1fe2:	75 95       	asr	r23
    1fe4:	67 95       	ror	r22
    1fe6:	26 0f       	add	r18, r22
    1fe8:	37 1f       	adc	r19, r23
    1fea:	22 0f       	add	r18, r18
    1fec:	33 1f       	adc	r19, r19
    1fee:	81 70       	andi	r24, 0x01	; 1
}
    1ff0:	82 0f       	add	r24, r18
    1ff2:	08 95       	ret

00001ff4 <__vector_15>:

	
}

// used only for wake-up from sleep
ISR(TIMER2_OVF_vect) {
    1ff4:	1f 92       	push	r1
    1ff6:	0f 92       	push	r0
    1ff8:	0f b6       	in	r0, 0x3f	; 63
    1ffa:	0f 92       	push	r0
    1ffc:	11 24       	eor	r1, r1

}
    1ffe:	0f 90       	pop	r0
    2000:	0f be       	out	0x3f, r0	; 63
    2002:	0f 90       	pop	r0
    2004:	1f 90       	pop	r1
    2006:	18 95       	reti

00002008 <getTime100MicroSec>:
	pwm_left = 0;
	initPeripherals();

}

unsigned long int getTime100MicroSec() {
    2008:	60 91 6c 04 	lds	r22, 0x046C
    200c:	70 91 6d 04 	lds	r23, 0x046D
	return clockTick;
}
    2010:	80 91 6e 04 	lds	r24, 0x046E
    2014:	90 91 6f 04 	lds	r25, 0x046F
    2018:	08 95       	ret

0000201a <readBatteryLevel>:

void readBatteryLevel() {
	measBattery = 1;
    201a:	81 e0       	ldi	r24, 0x01	; 1
    201c:	80 93 db 02 	sts	0x02DB, r24
}
    2020:	08 95       	ret

00002022 <resetOdometry>:

void resetOdometry() {
	leftMotSteps = 0;
    2022:	80 e0       	ldi	r24, 0x00	; 0
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	a0 e0       	ldi	r26, 0x00	; 0
    2028:	b0 e0       	ldi	r27, 0x00	; 0
    202a:	80 93 f1 02 	sts	0x02F1, r24
    202e:	90 93 f2 02 	sts	0x02F2, r25
    2032:	a0 93 f3 02 	sts	0x02F3, r26
    2036:	b0 93 f4 02 	sts	0x02F4, r27
	rightMotSteps = 0;
    203a:	80 93 ed 02 	sts	0x02ED, r24
    203e:	90 93 ee 02 	sts	0x02EE, r25
    2042:	a0 93 ef 02 	sts	0x02EF, r26
    2046:	b0 93 f0 02 	sts	0x02F0, r27
	theta = 0;
    204a:	80 93 97 04 	sts	0x0497, r24
    204e:	90 93 98 04 	sts	0x0498, r25
    2052:	a0 93 99 04 	sts	0x0499, r26
    2056:	b0 93 9a 04 	sts	0x049A, r27
	xPos = 0;
    205a:	80 93 9f 04 	sts	0x049F, r24
    205e:	90 93 a0 04 	sts	0x04A0, r25
    2062:	a0 93 a1 04 	sts	0x04A1, r26
    2066:	b0 93 a2 04 	sts	0x04A2, r27
	yPos = 0;
    206a:	80 93 a3 04 	sts	0x04A3, r24
    206e:	90 93 a4 04 	sts	0x04A4, r25
    2072:	a0 93 a5 04 	sts	0x04A5, r26
    2076:	b0 93 a6 04 	sts	0x04A6, r27
	rightDist = 0;
    207a:	80 93 bf 04 	sts	0x04BF, r24
    207e:	90 93 c0 04 	sts	0x04C0, r25
    2082:	a0 93 c1 04 	sts	0x04C1, r26
    2086:	b0 93 c2 04 	sts	0x04C2, r27
	leftDist = 0;
    208a:	80 93 bb 04 	sts	0x04BB, r24
    208e:	90 93 bc 04 	sts	0x04BC, r25
    2092:	a0 93 bd 04 	sts	0x04BD, r26
    2096:	b0 93 be 04 	sts	0x04BE, r27
}
    209a:	08 95       	ret

0000209c <initPeripherals>:
}
    

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
    209c:	f8 94       	cli
	
	// reset all registers touched by arduino in the "init()" functions (wiring.c) not used by the robot
	TCCR0A = 0;
    209e:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
    20a0:	15 bc       	out	0x25, r1	; 37
	TIMSK0 = 0;
    20a2:	10 92 6e 00 	sts	0x006E, r1
	TCCR5A = 0;
    20a6:	10 92 20 01 	sts	0x0120, r1
	TCCR5B = 0;
    20aa:	10 92 21 01 	sts	0x0121, r1

	rfAddress = eeprom_read_word((uint16_t*)4094);
    20ae:	8e ef       	ldi	r24, 0xFE	; 254
    20b0:	9f e0       	ldi	r25, 0x0F	; 15
    20b2:	0e 94 96 58 	call	0xb12c	; 0xb12c <__eerd_word_m2560>
    20b6:	90 93 32 03 	sts	0x0332, r25
    20ba:	80 93 31 03 	sts	0x0331, r24
	currentOsccal = eeprom_read_byte((uint8_t*)4093);
    20be:	8d ef       	ldi	r24, 0xFD	; 253
    20c0:	9f e0       	ldi	r25, 0x0F	; 15
    20c2:	0e 94 8e 58 	call	0xb11c	; 0xb11c <__eerd_byte_m2560>
    20c6:	98 2f       	mov	r25, r24
    20c8:	80 93 7e 05 	sts	0x057E, r24
	if(currentOsccal!=0 && currentOsccal!=255) { // clear memory
    20cc:	81 50       	subi	r24, 0x01	; 1
    20ce:	8e 3f       	cpi	r24, 0xFE	; 254
    20d0:	b0 f5       	brcc	.+108    	; 0x213e <initPeripherals+0xa2>
		OSCCAL = currentOsccal;
    20d2:	90 93 66 00 	sts	0x0066, r25
		currentOsccal = OSCCAL;
		eeprom_write_byte((uint8_t*) 4093, currentOsccal);
	}
	
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
    20d6:	20 91 31 03 	lds	r18, 0x0331
    20da:	30 91 32 03 	lds	r19, 0x0332
    20de:	c9 01       	movw	r24, r18
    20e0:	81 58       	subi	r24, 0x81	; 129
    20e2:	9c 40       	sbci	r25, 0x0C	; 12
    20e4:	03 97       	sbiw	r24, 0x03	; 3
    20e6:	10 f4       	brcc	.+4      	; 0x20ec <initPeripherals+0x50>
		hardwareRevision = HW_REV_3_0;
    20e8:	10 92 73 04 	sts	0x0473, r1
	}

	if(rfAddress == 3200) {
    20ec:	8c e0       	ldi	r24, 0x0C	; 12
    20ee:	20 38       	cpi	r18, 0x80	; 128
    20f0:	38 07       	cpc	r19, r24
    20f2:	71 f1       	breq	.+92     	; 0x2150 <initPeripherals+0xb4>
		hardwareRevision = HW_REV_3_0_1;
	}

	if(rfAddress > 3203) {
    20f4:	24 58       	subi	r18, 0x84	; 132
    20f6:	3c 40       	sbci	r19, 0x0C	; 12
    20f8:	18 f0       	brcs	.+6      	; 0x2100 <initPeripherals+0x64>
		hardwareRevision = HW_REV_3_1;
    20fa:	82 e0       	ldi	r24, 0x02	; 2
    20fc:	80 93 73 04 	sts	0x0473, r24
	}

	initCalibration();
    2100:	0e 94 ee 31 	call	0x63dc	; 0x63dc <initCalibration>
	initPortsIO();
    2104:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <initPortsIO>
	initAdc();
    2108:	0e 94 18 11 	call	0x2230	; 0x2230 <initAdc>
	initMotors();
    210c:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <initMotors>
	initRGBleds();
    2110:	0e 94 e1 35 	call	0x6bc2	; 0x6bc2 <initRGBleds>
	initSPI();
    2114:	0e 94 30 01 	call	0x260	; 0x260 <initSPI>
	mirf_init();
    2118:	0e 94 23 03 	call	0x646	; 0x646 <mirf_init>
	if(spiCommError==0) {
    211c:	80 91 34 03 	lds	r24, 0x0334
    2120:	88 23       	and	r24, r24
    2122:	29 f4       	brne	.+10     	; 0x212e <initPeripherals+0x92>
		rfFlags |= 1;
    2124:	80 91 33 03 	lds	r24, 0x0333
    2128:	81 60       	ori	r24, 0x01	; 1
    212a:	80 93 33 03 	sts	0x0333, r24
	}
	initUsart0();
    212e:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <initUsart0>
	initAccelerometer();
    2132:	0e 94 b5 3e 	call	0x7d6a	; 0x7d6a <initAccelerometer>
	init_ir_remote_control();
    2136:	0e 94 75 07 	call	0xeea	; 0xeea <init_ir_remote_control>

	sei();			// enable global interrupts
    213a:	78 94       	sei

	
}
    213c:	08 95       	ret
	rfAddress = eeprom_read_word((uint16_t*)4094);
	currentOsccal = eeprom_read_byte((uint8_t*)4093);
	if(currentOsccal!=0 && currentOsccal!=255) { // clear memory
		OSCCAL = currentOsccal;
	} else {
		currentOsccal = OSCCAL;
    213e:	60 91 66 00 	lds	r22, 0x0066
    2142:	60 93 7e 05 	sts	0x057E, r22
		eeprom_write_byte((uint8_t*) 4093, currentOsccal);
    2146:	8d ef       	ldi	r24, 0xFD	; 253
    2148:	9f e0       	ldi	r25, 0x0F	; 15
    214a:	0e 94 c4 58 	call	0xb188	; 0xb188 <__eewr_byte_m2560>
    214e:	c3 cf       	rjmp	.-122    	; 0x20d6 <initPeripherals+0x3a>
	if(rfAddress >= 3201 && rfAddress <= 3203) {
		hardwareRevision = HW_REV_3_0;
	}

	if(rfAddress == 3200) {
		hardwareRevision = HW_REV_3_0_1;
    2150:	81 e0       	ldi	r24, 0x01	; 1
    2152:	80 93 73 04 	sts	0x0473, r24
    2156:	d4 cf       	rjmp	.-88     	; 0x2100 <initPeripherals+0x64>

00002158 <sleep>:
// used only for wake-up from sleep
ISR(TIMER2_OVF_vect) {

}

void sleep(unsigned char seconds) {
    2158:	cf 93       	push	r28
    215a:	df 93       	push	r29

	unsigned int pause = seconds*30;	// the timer2 used to wake-up from sleep is configured to run at 30 Hz
    215c:	9e e1       	ldi	r25, 0x1E	; 30
    215e:	89 9f       	mul	r24, r25
    2160:	e0 01       	movw	r28, r0
    2162:	11 24       	eor	r1, r1

	// disable external interrupt because it uses the timer2 to interpret the tv
	// remote signal and the timer2 must be free in order to be used for wake-up from sleep
	PCICR &= ~(1 << PCIE1);			// disable interrupt from falling edge
    2164:	80 91 68 00 	lds	r24, 0x0068
    2168:	8d 7f       	andi	r24, 0xFD	; 253
    216a:	80 93 68 00 	sts	0x0068, r24
	PCMSK1 &= ~(1 << PCINT15);		
    216e:	80 91 6c 00 	lds	r24, 0x006C
    2172:	8f 77       	andi	r24, 0x7F	; 127
    2174:	80 93 6c 00 	sts	0x006C, r24
	PCIFR |= (1 << PCIF1);			// clear interrupt flag
    2178:	d9 9a       	sbi	0x1b, 1	; 27

	// disable adc
	ADCSRA = 0x00;					// disable interrupt and turn off adc
    217a:	10 92 7a 00 	sts	0x007A, r1
	ADCSRA |= (1 << ADIF);			// clear interrupt flag
    217e:	80 91 7a 00 	lds	r24, 0x007A
    2182:	80 61       	ori	r24, 0x10	; 16
    2184:	80 93 7a 00 	sts	0x007A, r24

	// disable motors pwm
	TCCR3A = 0x00;	// turn off timer
    2188:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0x00;
    218c:	10 92 91 00 	sts	0x0091, r1
	TIMSK3 = 0x00;	// disable interrupt
    2190:	10 92 71 00 	sts	0x0071, r1
	TIFR3 |= (1 << OCF3A) | (1 << OCF3B) | (1 << TOV3);	// clear output compares and timer overflow interrupt flags
    2194:	88 b3       	in	r24, 0x18	; 24
    2196:	87 60       	ori	r24, 0x07	; 7
    2198:	88 bb       	out	0x18, r24	; 24
	TCCR4A = 0x00;
    219a:	10 92 a0 00 	sts	0x00A0, r1
	TCCR4B = 0x00;
    219e:	10 92 a1 00 	sts	0x00A1, r1
	TIMSK4 = 0x00;
    21a2:	10 92 72 00 	sts	0x0072, r1
	TIFR4 |= (1 << OCF4A) | (1 << OCF4B) | (1 << TOV4);	// clear output compares and timer overflow interrupt flags
    21a6:	89 b3       	in	r24, 0x19	; 25
    21a8:	87 60       	ori	r24, 0x07	; 7
    21aa:	89 bb       	out	0x19, r24	; 25

	// disable leds pwm
	TCCR1A = 0x00;	// turn off timer
    21ac:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x00;
    21b0:	10 92 81 00 	sts	0x0081, r1

	// close communication channels
	closeUsart();
    21b4:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <closeUsart>
	closeSPI();
    21b8:	0e 94 3c 01 	call	0x278	; 0x278 <closeSPI>
	i2c_close();
    21bc:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <i2c_close>

	// set port pins
	initPortsIO();
    21c0:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <initPortsIO>
	//PORTB &= ~(1 << 4);	// radio CE pin
	//DDRD = 0xFF;
	//PORTD = 0x00;	// I2C and uart pins to 0

	// set extendend standby mode and enable it
	SMCR |= (1 << SM2) | (1 << SM1) | (1 << SM0) | (1 << SE);	// extended standby
    21c4:	83 b7       	in	r24, 0x33	; 51
    21c6:	8f 60       	ori	r24, 0x0F	; 15
    21c8:	83 bf       	out	0x33, r24	; 51

	// set timer2 for wake-up: 
	// source clock = 8 MHz
	// prescaler = 1/1024 => 7812.5 Hz
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
    21ca:	81 e0       	ldi	r24, 0x01	; 1
    21cc:	80 93 70 00 	sts	0x0070, r24
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
    21d0:	80 91 b0 00 	lds	r24, 0x00B0
    21d4:	8d 7f       	andi	r24, 0xFD	; 253
    21d6:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler
    21da:	80 91 b1 00 	lds	r24, 0x00B1
    21de:	87 60       	ori	r24, 0x07	; 7
    21e0:	80 93 b1 00 	sts	0x00B1, r24

	while(pause > 0) {	
    21e4:	20 97       	sbiw	r28, 0x00	; 0
    21e6:	19 f0       	breq	.+6      	; 0x21ee <sleep+0x96>
		// enter extended standby mode
		//sleep_cpu();
		__asm__("sleep");
    21e8:	88 95       	sleep
		pause--;
    21ea:	21 97       	sbiw	r28, 0x01	; 1
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler

	while(pause > 0) {	
    21ec:	e9 f7       	brne	.-6      	; 0x21e8 <sleep+0x90>
//		PORTB ^= (1 << 6);
	}

	// disable power mode
	//SMCR &= ~(1 << SE);
	SMCR = 0x00;
    21ee:	13 be       	out	0x33, r1	; 51

	// disable timer2 and its timer overflow interrupt
	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);	// disable timer2
    21f0:	80 91 b1 00 	lds	r24, 0x00B1
    21f4:	88 7f       	andi	r24, 0xF8	; 248
    21f6:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;					// disable all interrupt for timer2
    21fa:	10 92 70 00 	sts	0x0070, r1
	TCCR2A |= (1 << WGM21); 	// mode 2 => CTC mode
    21fe:	80 91 b0 00 	lds	r24, 0x00B0
    2202:	82 60       	ori	r24, 0x02	; 2
    2204:	80 93 b0 00 	sts	0x00B0, r24

	pwm_red = 255;
    2208:	8f ef       	ldi	r24, 0xFF	; 255
    220a:	80 93 08 02 	sts	0x0208, r24
	pwm_green = 255;
    220e:	80 93 09 02 	sts	0x0209, r24
	pwm_blue = 255;
    2212:	80 93 0a 02 	sts	0x020A, r24
	pwm_right = 0;
    2216:	10 92 12 03 	sts	0x0312, r1
    221a:	10 92 11 03 	sts	0x0311, r1
	pwm_left = 0;
    221e:	10 92 14 03 	sts	0x0314, r1
    2222:	10 92 13 03 	sts	0x0313, r1
	initPeripherals();
    2226:	0e 94 4e 10 	call	0x209c	; 0x209c <initPeripherals>

}
    222a:	df 91       	pop	r29
    222c:	cf 91       	pop	r28
    222e:	08 95       	ret

00002230 <initAdc>:
	// ADMUX  -----> REFS1	REFS0	 ADLAR	MUX4	MUX3 	 MUX2	MUX1	MUX0
	// default		 0		0		 0		0		0		 0		0		0
	// ADCSRB -----> -		ACME	 - 		- 		MUX5 	 ADTS2 	ADTS1 	ADTS0
	// default		 0		0		 0		0		0		 0		0		0

	ADCSRA = 0;
    2230:	ea e7       	ldi	r30, 0x7A	; 122
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	10 82       	st	Z, r1
	ADCSRB = 0;
    2236:	2b e7       	ldi	r18, 0x7B	; 123
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	d9 01       	movw	r26, r18
    223c:	1c 92       	st	X, r1
	ADMUX = 0;
    223e:	ac e7       	ldi	r26, 0x7C	; 124
    2240:	b0 e0       	ldi	r27, 0x00	; 0
    2242:	1c 92       	st	X, r1

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// 1/64 prescaler => 8 MHz/64=125 KHz => Tad (adc clock)
    2244:	80 81       	ld	r24, Z
    2246:	86 60       	ori	r24, 0x06	; 6
    2248:	80 83       	st	Z, r24
											// one sample need 13 Tad in free running mode, so interrupt 
											// frequency is 125/13=9.6 KHz (104 us between adc interrupts)
	ADMUX |= (1 << REFS0); 	// voltage reference to AVCC (external)
    224a:	8c 91       	ld	r24, X
    224c:	80 64       	ori	r24, 0x40	; 64
    224e:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADATE); // auto-trigger mode: the new sampling is started just after the last one is completed
    2250:	80 81       	ld	r24, Z
    2252:	80 62       	ori	r24, 0x20	; 32
    2254:	80 83       	st	Z, r24
	ADCSRB &= 0xF8;			// for safety...ADTS2:0 in ADCSRB should be already set to free running by default (0b000)
    2256:	d9 01       	movw	r26, r18
    2258:	8c 91       	ld	r24, X
    225a:	88 7f       	andi	r24, 0xF8	; 248
    225c:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADIE);	// enable interrupt on conversion completion
    225e:	80 81       	ld	r24, Z
    2260:	88 60       	ori	r24, 0x08	; 8
    2262:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	// enable ADC
    2264:	80 81       	ld	r24, Z
    2266:	80 68       	ori	r24, 0x80	; 128
    2268:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);	// start first conversion (start from channel 0)
    226a:	80 81       	ld	r24, Z
    226c:	80 64       	ori	r24, 0x40	; 64
    226e:	80 83       	st	Z, r24

}
    2270:	08 95       	ret

00002272 <__vector_29>:

ISR(ADC_vect) {
    2272:	1f 92       	push	r1
    2274:	0f 92       	push	r0
    2276:	0f b6       	in	r0, 0x3f	; 63
    2278:	0f 92       	push	r0
    227a:	0b b6       	in	r0, 0x3b	; 59
    227c:	0f 92       	push	r0
    227e:	11 24       	eor	r1, r1
    2280:	1f 93       	push	r17
    2282:	2f 93       	push	r18
    2284:	3f 93       	push	r19
    2286:	4f 93       	push	r20
    2288:	5f 93       	push	r21
    228a:	6f 93       	push	r22
    228c:	7f 93       	push	r23
    228e:	8f 93       	push	r24
    2290:	9f 93       	push	r25
    2292:	af 93       	push	r26
    2294:	bf 93       	push	r27
    2296:	ef 93       	push	r30
    2298:	ff 93       	push	r31
	// channel 15:    active phase when going forward: motor left current; passive phase when going backward: motor left velocity


	//LED_BLUE_ON;

	if(clockTick == MAX_U32) {
    229a:	80 91 6c 04 	lds	r24, 0x046C
    229e:	90 91 6d 04 	lds	r25, 0x046D
    22a2:	a0 91 6e 04 	lds	r26, 0x046E
    22a6:	b0 91 6f 04 	lds	r27, 0x046F
    22aa:	8f 3f       	cpi	r24, 0xFF	; 255
    22ac:	2f ef       	ldi	r18, 0xFF	; 255
    22ae:	92 07       	cpc	r25, r18
    22b0:	2f ef       	ldi	r18, 0xFF	; 255
    22b2:	a2 07       	cpc	r26, r18
    22b4:	2f ef       	ldi	r18, 0xFF	; 255
    22b6:	b2 07       	cpc	r27, r18
    22b8:	09 f4       	brne	.+2      	; 0x22bc <__vector_29+0x4a>
    22ba:	b9 c0       	rjmp	.+370    	; 0x242e <__vector_29+0x1bc>
		clockTick = 0;
	} else {
		clockTick++;				// this variable is used as base time for timed processes/functions (e,g, delay); 
    22bc:	01 96       	adiw	r24, 0x01	; 1
    22be:	a1 1d       	adc	r26, r1
    22c0:	b1 1d       	adc	r27, r1
    22c2:	80 93 6c 04 	sts	0x046C, r24
    22c6:	90 93 6d 04 	sts	0x046D, r25
    22ca:	a0 93 6e 04 	sts	0x046E, r26
    22ce:	b0 93 6f 04 	sts	0x046F, r27
	}								// resolution of 104 us based on adc interrupts

	unsigned int value = ADCL;			// get the sample; low byte must be read first!!
    22d2:	80 91 78 00 	lds	r24, 0x0078
    22d6:	48 2f       	mov	r20, r24
    22d8:	50 e0       	ldi	r21, 0x00	; 0
	value = (ADCH<<8) | value;
    22da:	20 91 79 00 	lds	r18, 0x0079
    22de:	92 2f       	mov	r25, r18
    22e0:	80 e0       	ldi	r24, 0x00	; 0
    22e2:	48 2b       	or	r20, r24
    22e4:	59 2b       	or	r21, r25
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    22e6:	80 91 d5 02 	lds	r24, 0x02D5
    22ea:	82 30       	cpi	r24, 0x02	; 2
    22ec:	09 f4       	brne	.+2      	; 0x22f0 <__vector_29+0x7e>
    22ee:	bd c1       	rjmp	.+890    	; 0x266a <__vector_29+0x3f8>
    22f0:	83 30       	cpi	r24, 0x03	; 3
    22f2:	08 f4       	brcc	.+2      	; 0x22f6 <__vector_29+0x84>
    22f4:	4c c0       	rjmp	.+152    	; 0x238e <__vector_29+0x11c>
    22f6:	84 30       	cpi	r24, 0x04	; 4
    22f8:	09 f4       	brne	.+2      	; 0x22fc <__vector_29+0x8a>
    22fa:	e0 c1       	rjmp	.+960    	; 0x26bc <__vector_29+0x44a>
    22fc:	84 30       	cpi	r24, 0x04	; 4
    22fe:	08 f0       	brcs	.+2      	; 0x2302 <__vector_29+0x90>
    2300:	2f c1       	rjmp	.+606    	; 0x2560 <__vector_29+0x2ee>
				}
			}
			break;

		case SAVE_TO_LEFT_MOTOR_CURRENT:
			left_current_avg += value;
    2302:	80 91 fd 02 	lds	r24, 0x02FD
    2306:	90 91 fe 02 	lds	r25, 0x02FE
    230a:	48 0f       	add	r20, r24
    230c:	59 1f       	adc	r21, r25
			left_current_avg = left_current_avg >> 1;
    230e:	56 95       	lsr	r21
    2310:	47 95       	ror	r20
    2312:	50 93 fe 02 	sts	0x02FE, r21
    2316:	40 93 fd 02 	sts	0x02FD, r20
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
    231a:	90 91 f4 04 	lds	r25, 0x04F4
    231e:	92 30       	cpi	r25, 0x02	; 2
    2320:	09 f0       	breq	.+2      	; 0x2324 <__vector_29+0xb2>
    2322:	4b c0       	rjmp	.+150    	; 0x23ba <__vector_29+0x148>
		switch(irCommAdcTxState) {
    2324:	80 91 44 05 	lds	r24, 0x0544
    2328:	81 30       	cpi	r24, 0x01	; 1
    232a:	09 f4       	brne	.+2      	; 0x232e <__vector_29+0xbc>
    232c:	7b c2       	rjmp	.+1270   	; 0x2824 <__vector_29+0x5b2>
    232e:	81 30       	cpi	r24, 0x01	; 1
    2330:	08 f0       	brcs	.+2      	; 0x2334 <__vector_29+0xc2>
    2332:	f1 c1       	rjmp	.+994    	; 0x2716 <__vector_29+0x4a4>
				}
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ1;
				break;

			case IRCOMM_TX_ADC_IDLE:
				if(irCommTxByteEnqueued==1) {					
    2334:	80 91 46 05 	lds	r24, 0x0546
    2338:	81 30       	cpi	r24, 0x01	; 1
    233a:	09 f4       	brne	.+2      	; 0x233e <__vector_29+0xcc>
    233c:	07 c3       	rjmp	.+1550   	; 0x294c <__vector_29+0x6da>
    233e:	90 91 d6 02 	lds	r25, 0x02D6
	
	}

	// channel selection in the adc register; continuously manually change the channel 
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
    2342:	80 91 3f 02 	lds	r24, 0x023F
    2346:	88 30       	cpi	r24, 0x08	; 8
    2348:	08 f0       	brcs	.+2      	; 0x234c <__vector_29+0xda>
    234a:	50 c1       	rjmp	.+672    	; 0x25ec <__vector_29+0x37a>
		ADCSRB &= ~(1 << MUX5);
    234c:	80 91 7b 00 	lds	r24, 0x007B
    2350:	87 7f       	andi	r24, 0xF7	; 247
    2352:	80 93 7b 00 	sts	0x007B, r24
		ADMUX = 0x40 + currentAdChannel;
    2356:	80 91 3f 02 	lds	r24, 0x023F
    235a:	80 5c       	subi	r24, 0xC0	; 192
    235c:	80 93 7c 00 	sts	0x007C, r24
		ADCSRB |= (1 << MUX5);
		ADMUX = 0x40 + (currentAdChannel-8);
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if((adcSamplingState==2) && (irCommMode==IRCOMM_MODE_SENSORS_SAMPLING)) {
    2360:	92 30       	cpi	r25, 0x02	; 2
    2362:	09 f4       	brne	.+2      	; 0x2366 <__vector_29+0xf4>
    2364:	50 c1       	rjmp	.+672    	; 0x2606 <__vector_29+0x394>

	}

	//LED_BLUE_OFF;

}
    2366:	ff 91       	pop	r31
    2368:	ef 91       	pop	r30
    236a:	bf 91       	pop	r27
    236c:	af 91       	pop	r26
    236e:	9f 91       	pop	r25
    2370:	8f 91       	pop	r24
    2372:	7f 91       	pop	r23
    2374:	6f 91       	pop	r22
    2376:	5f 91       	pop	r21
    2378:	4f 91       	pop	r20
    237a:	3f 91       	pop	r19
    237c:	2f 91       	pop	r18
    237e:	1f 91       	pop	r17
    2380:	0f 90       	pop	r0
    2382:	0b be       	out	0x3b, r0	; 59
    2384:	0f 90       	pop	r0
    2386:	0f be       	out	0x3f, r0	; 63
    2388:	0f 90       	pop	r0
    238a:	1f 90       	pop	r1
    238c:	18 95       	reti
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    238e:	88 23       	and	r24, r24
    2390:	09 f4       	brne	.+2      	; 0x2394 <__vector_29+0x122>
    2392:	56 c0       	rjmp	.+172    	; 0x2440 <__vector_29+0x1ce>
    2394:	81 30       	cpi	r24, 0x01	; 1
    2396:	61 f4       	brne	.+24     	; 0x23b0 <__vector_29+0x13e>
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
			}											// is sampled; thus 12 sensors x 2 phases = 24 samples
			break;

		case SAVE_TO_RIGHT_MOTOR_CURRENT:
			right_current_avg += value;
    2398:	80 91 ff 02 	lds	r24, 0x02FF
    239c:	90 91 00 03 	lds	r25, 0x0300
    23a0:	48 0f       	add	r20, r24
    23a2:	59 1f       	adc	r21, r25
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
    23a4:	56 95       	lsr	r21
    23a6:	47 95       	ror	r20
    23a8:	50 93 00 03 	sts	0x0300, r21
    23ac:	40 93 ff 02 	sts	0x02FF, r20
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
    23b0:	90 91 f4 04 	lds	r25, 0x04F4
    23b4:	92 30       	cpi	r25, 0x02	; 2
    23b6:	09 f4       	brne	.+2      	; 0x23ba <__vector_29+0x148>
    23b8:	b5 cf       	rjmp	.-150    	; 0x2324 <__vector_29+0xb2>
					irCommAdcTxState = IRCOMM_TX_ADC_TURN_OFF_SENSORS;
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
    23ba:	91 30       	cpi	r25, 0x01	; 1
    23bc:	09 f4       	brne	.+2      	; 0x23c0 <__vector_29+0x14e>
    23be:	34 c1       	rjmp	.+616    	; 0x2628 <__vector_29+0x3b6>
			case 12:
				adcSaveDataTo = SKIP_SAMPLE;
				break;

		}
	} else if(irCommMode==IRCOMM_MODE_SENSORS_SAMPLING) {
    23c0:	99 23       	and	r25, r25
    23c2:	09 f0       	breq	.+2      	; 0x23c6 <__vector_29+0x154>
    23c4:	bc cf       	rjmp	.-136    	; 0x233e <__vector_29+0xcc>
		switch(adcSamplingState) {
    23c6:	90 91 d6 02 	lds	r25, 0x02D6
    23ca:	92 30       	cpi	r25, 0x02	; 2
    23cc:	09 f4       	brne	.+2      	; 0x23d0 <__vector_29+0x15e>
    23ce:	32 c3       	rjmp	.+1636   	; 0x2a34 <__vector_29+0x7c2>
    23d0:	93 30       	cpi	r25, 0x03	; 3
    23d2:	08 f0       	brcs	.+2      	; 0x23d6 <__vector_29+0x164>
    23d4:	d5 c1       	rjmp	.+938    	; 0x2780 <__vector_29+0x50e>
    23d6:	99 23       	and	r25, r25
    23d8:	09 f4       	brne	.+2      	; 0x23dc <__vector_29+0x16a>
    23da:	71 c2       	rjmp	.+1250   	; 0x28be <__vector_29+0x64c>
    23dc:	91 30       	cpi	r25, 0x01	; 1
    23de:	09 f0       	breq	.+2      	; 0x23e2 <__vector_29+0x170>
    23e0:	b0 cf       	rjmp	.-160    	; 0x2342 <__vector_29+0xd0>
				}
				adcSamplingState = 1;
				break;

			case 1:	// left motor
				currentAdChannel = currentMotLeftChannel;
    23e2:	80 91 41 02 	lds	r24, 0x0241
    23e6:	80 93 3f 02 	sts	0x023F, r24
				leftChannelPhase = leftMotorPhase;
    23ea:	80 91 44 02 	lds	r24, 0x0244
    23ee:	80 93 d8 02 	sts	0x02D8, r24
				adcSaveDataTo = SAVE_TO_PROX;
    23f2:	10 92 d5 02 	sts	0x02D5, r1
				adcSamplingState = 2;
    23f6:	82 e0       	ldi	r24, 0x02	; 2
    23f8:	80 93 d6 02 	sts	0x02D6, r24
				if(irCommEnabled==IRCOMM_MODE_RECEIVE && currentProx==23) {					
    23fc:	10 91 f2 04 	lds	r17, 0x04F2
    2400:	11 30       	cpi	r17, 0x01	; 1
    2402:	09 f4       	brne	.+2      	; 0x2406 <__vector_29+0x194>
    2404:	10 c4       	rjmp	.+2080   	; 0x2c26 <__vector_29+0x9b4>
					irCommRxWindowSamples = 0;
					memset(irCommMaxSensorValueAdc, 0x00, 16);
					memset(irCommMinSensorValueAdc, 0xFF, 16);
					irCommMode = IRCOMM_MODE_RECEIVE;					
				}
				if(irCommEnabled==IRCOMM_MODE_TRANSMIT && currentProx==23) {
    2406:	12 30       	cpi	r17, 0x02	; 2
    2408:	09 f0       	breq	.+2      	; 0x240c <__vector_29+0x19a>
    240a:	99 cf       	rjmp	.-206    	; 0x233e <__vector_29+0xcc>
    240c:	80 91 40 02 	lds	r24, 0x0240
    2410:	87 31       	cpi	r24, 0x17	; 23
    2412:	09 f0       	breq	.+2      	; 0x2416 <__vector_29+0x1a4>
    2414:	94 cf       	rjmp	.-216    	; 0x233e <__vector_29+0xcc>
					irCommMode = IRCOMM_MODE_TRANSMIT;
    2416:	10 93 f4 04 	sts	0x04F4, r17
					if(irCommTxByteEnqueued==1) {
    241a:	80 91 46 05 	lds	r24, 0x0546
    241e:	81 30       	cpi	r24, 0x01	; 1
    2420:	09 f4       	brne	.+2      	; 0x2424 <__vector_29+0x1b2>
    2422:	94 c2       	rjmp	.+1320   	; 0x294c <__vector_29+0x6da>
						irCommAdcTxState = IRCOMM_TX_ADC_TURN_OFF_SENSORS;
					} else {
						irCommMode=IRCOMM_MODE_SENSORS_SAMPLING; // no data to be transmitted, restart sensors sampling
    2424:	10 92 f4 04 	sts	0x04F4, r1
    2428:	90 91 d6 02 	lds	r25, 0x02D6
    242c:	8a cf       	rjmp	.-236    	; 0x2342 <__vector_29+0xd0>


	//LED_BLUE_ON;

	if(clockTick == MAX_U32) {
		clockTick = 0;
    242e:	10 92 6c 04 	sts	0x046C, r1
    2432:	10 92 6d 04 	sts	0x046D, r1
    2436:	10 92 6e 04 	sts	0x046E, r1
    243a:	10 92 6f 04 	sts	0x046F, r1
    243e:	49 cf       	rjmp	.-366    	; 0x22d2 <__vector_29+0x60>
			}
			currentProx++;
			break;

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    2440:	60 91 40 02 	lds	r22, 0x0240
    2444:	6e 30       	cpi	r22, 0x0E	; 14
    2446:	09 f4       	brne	.+2      	; 0x244a <__vector_29+0x1d8>
    2448:	d1 c2       	rjmp	.+1442   	; 0x29ec <__vector_29+0x77a>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
				measBattery = 0;
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
			} else {
				proximityValue[currentProx] = value;	// even indexes contain ambient values; odd indexes contains "reflected" values
    244a:	e6 2f       	mov	r30, r22
    244c:	f0 e0       	ldi	r31, 0x00	; 0
    244e:	df 01       	movw	r26, r30
    2450:	aa 0f       	add	r26, r26
    2452:	bb 1f       	adc	r27, r27
    2454:	ab 5b       	subi	r26, 0xBB	; 187
    2456:	bd 4f       	sbci	r27, 0xFD	; 253
    2458:	11 96       	adiw	r26, 0x01	; 1
    245a:	5c 93       	st	X, r21
    245c:	4e 93       	st	-X, r20
			}

			if(currentProx & 0x01) {
    245e:	60 ff       	sbrs	r22, 0
    2460:	72 c0       	rjmp	.+228    	; 0x2546 <__vector_29+0x2d4>
				//if(currentProx < 16) {	// prox
					proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
    2462:	ee 0f       	add	r30, r30
    2464:	ff 1f       	adc	r31, r31
    2466:	ed 5b       	subi	r30, 0xBD	; 189
    2468:	fd 4f       	sbci	r31, 0xFD	; 253
    246a:	40 81       	ld	r20, Z
    246c:	51 81       	ldd	r21, Z+1	; 0x01
    246e:	2d 91       	ld	r18, X+
    2470:	3c 91       	ld	r19, X
    2472:	86 2f       	mov	r24, r22
    2474:	86 95       	lsr	r24
    2476:	a8 2f       	mov	r26, r24
    2478:	b0 e0       	ldi	r27, 0x00	; 0
    247a:	42 1b       	sub	r20, r18
    247c:	53 0b       	sbc	r21, r19
    247e:	aa 0f       	add	r26, r26
    2480:	bb 1f       	adc	r27, r27
    2482:	fd 01       	movw	r30, r26
    2484:	e3 57       	subi	r30, 0x73	; 115
    2486:	fd 4f       	sbci	r31, 0xFD	; 253
    2488:	80 81       	ld	r24, Z
    248a:	91 81       	ldd	r25, Z+1	; 0x01
    248c:	48 1b       	sub	r20, r24
    248e:	59 0b       	sbc	r21, r25
    2490:	fd 01       	movw	r30, r26
    2492:	eb 58       	subi	r30, 0x8B	; 139
    2494:	fd 4f       	sbci	r31, 0xFD	; 253
    2496:	51 83       	std	Z+1, r21	; 0x01
    2498:	40 83       	st	Z, r20
				//} else {	// ground
				//	proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx];
				//}
				if(proximityResult[currentProx>>1] < 0) {
    249a:	57 fd       	sbrc	r21, 7
    249c:	e8 c2       	rjmp	.+1488   	; 0x2a6e <__vector_29+0x7fc>
					proximityResult[currentProx>>1] = 0;
				}
				if(proximityResult[currentProx>>1] > 1024) {
    249e:	41 50       	subi	r20, 0x01	; 1
    24a0:	54 40       	sbci	r21, 0x04	; 4
    24a2:	24 f0       	brlt	.+8      	; 0x24ac <__vector_29+0x23a>
					proximityResult[currentProx>>1] = 1024;
    24a4:	80 e0       	ldi	r24, 0x00	; 0
    24a6:	94 e0       	ldi	r25, 0x04	; 4
    24a8:	91 83       	std	Z+1, r25	; 0x01
    24aa:	80 83       	st	Z, r24
				// 1) from 0 to PHASE1: y = x (where x = proximity value9
				// 2) from PHASE1 to PHASE2: y = x/2 + 30
				// 3) from PHASE2 to PHASE3: y = x/4 + 75
				// 4) from PHASE3 upwards: y = x/8 + 127.5
				// The linearized values are used for the obstacles avoidance.
				if(currentProx < 16) {	// only for proximity (not ground sensors)
    24ac:	60 31       	cpi	r22, 0x10	; 16
    24ae:	70 f4       	brcc	.+28     	; 0x24cc <__vector_29+0x25a>
					
					if(proximityResult[currentProx>>1] < PHASE1) {
    24b0:	fd 01       	movw	r30, r26
    24b2:	eb 58       	subi	r30, 0x8B	; 139
    24b4:	fd 4f       	sbci	r31, 0xFD	; 253
    24b6:	01 90       	ld	r0, Z+
    24b8:	f0 81       	ld	r31, Z
    24ba:	e0 2d       	mov	r30, r0
    24bc:	ec 33       	cpi	r30, 0x3C	; 60
    24be:	f1 05       	cpc	r31, r1
    24c0:	0c f0       	brlt	.+2      	; 0x24c4 <__vector_29+0x252>
    24c2:	f4 c2       	rjmp	.+1512   	; 0x2aac <__vector_29+0x83a>

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];
    24c4:	a3 52       	subi	r26, 0x23	; 35
    24c6:	bd 4f       	sbci	r27, 0xFD	; 253
    24c8:	ed 93       	st	X+, r30
    24ca:	fc 93       	st	X, r31
				}

				// the cliff avoidance behavior is inserted within this interrupt service routine in order to react
				// as fast as possible; the maximum speed usable with cliff avoidance is 30 in all kind of surface 
				// (apart from black ones) after calibration.
				if(cliffAvoidanceEnabled) {
    24cc:	80 91 95 04 	lds	r24, 0x0495
    24d0:	88 23       	and	r24, r24
    24d2:	09 f4       	brne	.+2      	; 0x24d6 <__vector_29+0x264>
    24d4:	06 c2       	rjmp	.+1036   	; 0x28e2 <__vector_29+0x670>
					if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    24d6:	80 91 85 02 	lds	r24, 0x0285
    24da:	90 91 86 02 	lds	r25, 0x0286
    24de:	84 5a       	subi	r24, 0xA4	; 164
    24e0:	91 40       	sbci	r25, 0x01	; 1
    24e2:	b4 f0       	brlt	.+44     	; 0x2510 <__vector_29+0x29e>
    24e4:	80 91 87 02 	lds	r24, 0x0287
    24e8:	90 91 88 02 	lds	r25, 0x0288
    24ec:	84 5a       	subi	r24, 0xA4	; 164
    24ee:	91 40       	sbci	r25, 0x01	; 1
    24f0:	7c f0       	brlt	.+30     	; 0x2510 <__vector_29+0x29e>
    24f2:	80 91 89 02 	lds	r24, 0x0289
    24f6:	90 91 8a 02 	lds	r25, 0x028A
    24fa:	84 5a       	subi	r24, 0xA4	; 164
    24fc:	91 40       	sbci	r25, 0x01	; 1
    24fe:	44 f0       	brlt	.+16     	; 0x2510 <__vector_29+0x29e>
    2500:	80 91 8b 02 	lds	r24, 0x028B
    2504:	90 91 8c 02 	lds	r25, 0x028C
    2508:	84 5a       	subi	r24, 0xA4	; 164
    250a:	91 40       	sbci	r25, 0x01	; 1
    250c:	0c f0       	brlt	.+2      	; 0x2510 <__vector_29+0x29e>
    250e:	e9 c1       	rjmp	.+978    	; 0x28e2 <__vector_29+0x670>
					//if(proximityResult[8]<(proximityOffset[8]>>1) || proximityResult[9]<(proximityOffset[9]>>1) || proximityResult[10]<(proximityOffset[10]>>1) || proximityResult[11]<(proximityOffset[11]>>1)) {
						cliffDetectedFlag = 1;
    2510:	81 e0       	ldi	r24, 0x01	; 1
    2512:	80 93 96 04 	sts	0x0496, r24
						//LED_RED_ON;			
						// set resulting velocity to 0 and change the pwm registers directly to be able
						// to stop as fast as possible (the next pwm cycle)
						// left motor
						pwm_left = 0;
    2516:	10 92 14 03 	sts	0x0314, r1
    251a:	10 92 13 03 	sts	0x0313, r1
						OCR4A = 0;
    251e:	10 92 a9 00 	sts	0x00A9, r1
    2522:	10 92 a8 00 	sts	0x00A8, r1
						OCR4B = 0;
    2526:	10 92 ab 00 	sts	0x00AB, r1
    252a:	10 92 aa 00 	sts	0x00AA, r1
						// right motor
						pwm_right = 0;
    252e:	10 92 12 03 	sts	0x0312, r1
    2532:	10 92 11 03 	sts	0x0311, r1
						OCR3A = 0;
    2536:	10 92 99 00 	sts	0x0099, r1
    253a:	10 92 98 00 	sts	0x0098, r1
						OCR3B = 0;
    253e:	10 92 9b 00 	sts	0x009B, r1
    2542:	10 92 9a 00 	sts	0x009A, r1
				} else {
					cliffDetectedFlag = 0;
				}

			}			
			currentProx++;
    2546:	86 2f       	mov	r24, r22
    2548:	8f 5f       	subi	r24, 0xFF	; 255
    254a:	80 93 40 02 	sts	0x0240, r24
			if(currentProx > 23) {						// in total there are 8 proximity sensors and 4 ground sensors => 12 sensors
    254e:	88 31       	cpi	r24, 0x18	; 24
    2550:	08 f4       	brcc	.+2      	; 0x2554 <__vector_29+0x2e2>
    2552:	2e cf       	rjmp	.-420    	; 0x23b0 <__vector_29+0x13e>
				currentProx = 0;						// for each one there is a passive phase in which the ambient light is sampled,
    2554:	10 92 40 02 	sts	0x0240, r1
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
    2558:	81 e0       	ldi	r24, 0x01	; 1
    255a:	80 93 dc 02 	sts	0x02DC, r24
    255e:	28 cf       	rjmp	.-432    	; 0x23b0 <__vector_29+0x13e>
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    2560:	86 30       	cpi	r24, 0x06	; 6
    2562:	09 f0       	breq	.+2      	; 0x2566 <__vector_29+0x2f4>
    2564:	25 cf       	rjmp	.-438    	; 0x23b0 <__vector_29+0x13e>
		case SAVE_TO_PROX_IRCOMM:
			irCommProxValuesAdc[currentProx+irCommRxWindowSamples*8] = value;
    2566:	80 91 22 05 	lds	r24, 0x0522
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	20 91 40 02 	lds	r18, 0x0240
    2570:	88 0f       	add	r24, r24
    2572:	99 1f       	adc	r25, r25
    2574:	88 0f       	add	r24, r24
    2576:	99 1f       	adc	r25, r25
    2578:	88 0f       	add	r24, r24
    257a:	99 1f       	adc	r25, r25
    257c:	82 0f       	add	r24, r18
    257e:	91 1d       	adc	r25, r1
    2580:	88 0f       	add	r24, r24
    2582:	99 1f       	adc	r25, r25
    2584:	e0 91 97 08 	lds	r30, 0x0897
    2588:	f0 91 98 08 	lds	r31, 0x0898
    258c:	e8 0f       	add	r30, r24
    258e:	f9 1f       	adc	r31, r25
    2590:	51 83       	std	Z+1, r21	; 0x01
    2592:	40 83       	st	Z, r20
			// get the min and max values in the sampling window for all the sensors
			if(irCommMaxSensorValueAdc[currentProx] < value) {
    2594:	20 91 40 02 	lds	r18, 0x0240
    2598:	82 2f       	mov	r24, r18
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	88 0f       	add	r24, r24
    259e:	99 1f       	adc	r25, r25
    25a0:	e0 91 65 0b 	lds	r30, 0x0B65
    25a4:	f0 91 66 0b 	lds	r31, 0x0B66
    25a8:	e8 0f       	add	r30, r24
    25aa:	f9 1f       	adc	r31, r25
    25ac:	80 81       	ld	r24, Z
    25ae:	91 81       	ldd	r25, Z+1	; 0x01
    25b0:	84 17       	cp	r24, r20
    25b2:	95 07       	cpc	r25, r21
    25b4:	20 f4       	brcc	.+8      	; 0x25be <__vector_29+0x34c>
				irCommMaxSensorValueAdc[currentProx] = value;
    25b6:	51 83       	std	Z+1, r21	; 0x01
    25b8:	40 83       	st	Z, r20
    25ba:	20 91 40 02 	lds	r18, 0x0240
			}
			if(irCommMinSensorValueAdc[currentProx] > value) {
    25be:	82 2f       	mov	r24, r18
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	88 0f       	add	r24, r24
    25c4:	99 1f       	adc	r25, r25
    25c6:	e0 91 f5 05 	lds	r30, 0x05F5
    25ca:	f0 91 f6 05 	lds	r31, 0x05F6
    25ce:	e8 0f       	add	r30, r24
    25d0:	f9 1f       	adc	r31, r25
    25d2:	80 81       	ld	r24, Z
    25d4:	91 81       	ldd	r25, Z+1	; 0x01
    25d6:	48 17       	cp	r20, r24
    25d8:	59 07       	cpc	r21, r25
    25da:	20 f4       	brcc	.+8      	; 0x25e4 <__vector_29+0x372>
				irCommMinSensorValueAdc[currentProx] = value;
    25dc:	51 83       	std	Z+1, r21	; 0x01
    25de:	40 83       	st	Z, r20
    25e0:	20 91 40 02 	lds	r18, 0x0240
			}
			currentProx++;
    25e4:	2f 5f       	subi	r18, 0xFF	; 255
    25e6:	20 93 40 02 	sts	0x0240, r18
    25ea:	e2 ce       	rjmp	.-572    	; 0x23b0 <__vector_29+0x13e>
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
		ADCSRB &= ~(1 << MUX5);
		ADMUX = 0x40 + currentAdChannel;
	} else {						// MUX5=1 + ADMUX=0..7 => adc channel=8..15
		ADCSRB |= (1 << MUX5);
    25ec:	80 91 7b 00 	lds	r24, 0x007B
    25f0:	88 60       	ori	r24, 0x08	; 8
    25f2:	80 93 7b 00 	sts	0x007B, r24
		ADMUX = 0x40 + (currentAdChannel-8);
    25f6:	80 91 3f 02 	lds	r24, 0x023F
    25fa:	88 5c       	subi	r24, 0xC8	; 200
    25fc:	80 93 7c 00 	sts	0x007C, r24
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if((adcSamplingState==2) && (irCommMode==IRCOMM_MODE_SENSORS_SAMPLING)) {
    2600:	92 30       	cpi	r25, 0x02	; 2
    2602:	09 f0       	breq	.+2      	; 0x2606 <__vector_29+0x394>
    2604:	b0 ce       	rjmp	.-672    	; 0x2366 <__vector_29+0xf4>
    2606:	80 91 f4 04 	lds	r24, 0x04F4
    260a:	88 23       	and	r24, r24
    260c:	09 f0       	breq	.+2      	; 0x2610 <__vector_29+0x39e>
    260e:	ab ce       	rjmp	.-682    	; 0x2366 <__vector_29+0xf4>

		if(hardwareRevision == HW_REV_3_0) {
    2610:	80 91 73 04 	lds	r24, 0x0473
    2614:	88 23       	and	r24, r24
    2616:	09 f0       	breq	.+2      	; 0x261a <__vector_29+0x3a8>
    2618:	ab c0       	rjmp	.+342    	; 0x2770 <__vector_29+0x4fe>
			PORTJ &= 0xF0;
    261a:	80 91 05 01 	lds	r24, 0x0105
    261e:	80 7f       	andi	r24, 0xF0	; 240
    2620:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    2624:	12 b8       	out	0x02, r1	; 2
    2626:	9f ce       	rjmp	.-706    	; 0x2366 <__vector_29+0xf4>
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
    2628:	20 91 21 05 	lds	r18, 0x0521
    262c:	26 30       	cpi	r18, 0x06	; 6
    262e:	09 f4       	brne	.+2      	; 0x2632 <__vector_29+0x3c0>
    2630:	4e c2       	rjmp	.+1180   	; 0x2ace <__vector_29+0x85c>
    2632:	27 30       	cpi	r18, 0x07	; 7
    2634:	08 f0       	brcs	.+2      	; 0x2638 <__vector_29+0x3c6>
    2636:	d4 c0       	rjmp	.+424    	; 0x27e0 <__vector_29+0x56e>
    2638:	22 30       	cpi	r18, 0x02	; 2
    263a:	09 f4       	brne	.+2      	; 0x263e <__vector_29+0x3cc>
    263c:	55 c2       	rjmp	.+1194   	; 0x2ae8 <__vector_29+0x876>
    263e:	23 30       	cpi	r18, 0x03	; 3
    2640:	08 f4       	brcc	.+2      	; 0x2644 <__vector_29+0x3d2>
    2642:	70 c1       	rjmp	.+736    	; 0x2924 <__vector_29+0x6b2>
    2644:	24 30       	cpi	r18, 0x04	; 4
    2646:	09 f4       	brne	.+2      	; 0x264a <__vector_29+0x3d8>
    2648:	d5 c2       	rjmp	.+1450   	; 0x2bf4 <__vector_29+0x982>
    264a:	25 30       	cpi	r18, 0x05	; 5
    264c:	08 f4       	brcc	.+2      	; 0x2650 <__vector_29+0x3de>
    264e:	c4 c2       	rjmp	.+1416   	; 0x2bd8 <__vector_29+0x966>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 5;
				break;

			case 5:
				currentAdChannel = currentProx+1;
    2650:	80 91 40 02 	lds	r24, 0x0240
    2654:	8f 5f       	subi	r24, 0xFF	; 255
    2656:	80 93 3f 02 	sts	0x023F, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    265a:	86 e0       	ldi	r24, 0x06	; 6
    265c:	80 93 d5 02 	sts	0x02D5, r24
				irCommAdcRxState = 6;
    2660:	80 93 21 05 	sts	0x0521, r24
    2664:	90 91 d6 02 	lds	r25, 0x02D6
    2668:	6c ce       	rjmp	.-808    	; 0x2342 <__vector_29+0xd0>
			right_current_avg += value;
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
			break;

		case SAVE_TO_RIGHT_MOTOR_VEL:
			if(firstSampleRight > 0) {
    266a:	80 91 05 02 	lds	r24, 0x0205
    266e:	88 23       	and	r24, r24
    2670:	09 f4       	brne	.+2      	; 0x2674 <__vector_29+0x402>
    2672:	9e ce       	rjmp	.-708    	; 0x23b0 <__vector_29+0x13e>
			    // sometimes it was noticed that the velocity is sampled even if the pwm
			    // is in its active phase; as a workaround simply skip the samples in these
			    // cases
				if(((PINE & _BV(PE3))>>3) || ((PINE & _BV(PE4))>>4)) {  // if active phase for either forward or backward direction
    2674:	63 99       	sbic	0x0c, 3	; 12
    2676:	9c ce       	rjmp	.-712    	; 0x23b0 <__vector_29+0x13e>
    2678:	64 99       	sbic	0x0c, 4	; 12
    267a:	9a ce       	rjmp	.-716    	; 0x23b0 <__vector_29+0x13e>
					//LED_RED_ON;
					break;
				}
				firstSampleRight++;
    267c:	28 2f       	mov	r18, r24
    267e:	2f 5f       	subi	r18, 0xFF	; 255
    2680:	20 93 05 02 	sts	0x0205, r18
				if(firstSampleRight > 4) {				// to skip undesired samples (3 samples skipped) in which there could be glitches
    2684:	25 30       	cpi	r18, 0x05	; 5
    2686:	08 f4       	brcc	.+2      	; 0x268a <__vector_29+0x418>
    2688:	93 ce       	rjmp	.-730    	; 0x23b0 <__vector_29+0x13e>
					if(pwm_right != 0) {
    268a:	80 91 11 03 	lds	r24, 0x0311
    268e:	90 91 12 03 	lds	r25, 0x0312
    2692:	89 2b       	or	r24, r25
    2694:	51 f0       	breq	.+20     	; 0x26aa <__vector_29+0x438>
						right_vel_sum += value;
    2696:	80 91 0b 03 	lds	r24, 0x030B
    269a:	90 91 0c 03 	lds	r25, 0x030C
    269e:	84 0f       	add	r24, r20
    26a0:	95 1f       	adc	r25, r21
    26a2:	90 93 0c 03 	sts	0x030C, r25
    26a6:	80 93 0b 03 	sts	0x030B, r24
					}
					if(firstSampleRight==8) {			// number of samples to take for the speed computation (average of 4 samples)
    26aa:	28 30       	cpi	r18, 0x08	; 8
    26ac:	09 f0       	breq	.+2      	; 0x26b0 <__vector_29+0x43e>
    26ae:	80 ce       	rjmp	.-768    	; 0x23b0 <__vector_29+0x13e>
						firstSampleRight = 0;
    26b0:	10 92 05 02 	sts	0x0205, r1
						compute_right_vel = 1;
    26b4:	81 e0       	ldi	r24, 0x01	; 1
    26b6:	80 93 04 02 	sts	0x0204, r24
    26ba:	7a ce       	rjmp	.-780    	; 0x23b0 <__vector_29+0x13e>
			left_current_avg += value;
			left_current_avg = left_current_avg >> 1;
			break;

		case SAVE_TO_LEFT_MOTOR_VEL:
			if(firstSampleLeft > 0) {
    26bc:	90 91 06 02 	lds	r25, 0x0206
    26c0:	99 23       	and	r25, r25
    26c2:	09 f4       	brne	.+2      	; 0x26c6 <__vector_29+0x454>
    26c4:	75 ce       	rjmp	.-790    	; 0x23b0 <__vector_29+0x13e>
				if(((PINH & _BV(PH3))>>3) || ((PINH & _BV(PH4))>>4)) {
    26c6:	80 91 00 01 	lds	r24, 0x0100
    26ca:	83 fd       	sbrc	r24, 3
    26cc:	71 ce       	rjmp	.-798    	; 0x23b0 <__vector_29+0x13e>
    26ce:	80 91 00 01 	lds	r24, 0x0100
    26d2:	84 fd       	sbrc	r24, 4
    26d4:	6d ce       	rjmp	.-806    	; 0x23b0 <__vector_29+0x13e>
					//LED_RED_ON;
					break;
				}
				firstSampleLeft++;
    26d6:	29 2f       	mov	r18, r25
    26d8:	2f 5f       	subi	r18, 0xFF	; 255
    26da:	20 93 06 02 	sts	0x0206, r18
				if(firstSampleLeft > 4) {
    26de:	25 30       	cpi	r18, 0x05	; 5
    26e0:	08 f4       	brcc	.+2      	; 0x26e4 <__vector_29+0x472>
    26e2:	66 ce       	rjmp	.-820    	; 0x23b0 <__vector_29+0x13e>
					if(pwm_left != 0) {
    26e4:	80 91 13 03 	lds	r24, 0x0313
    26e8:	90 91 14 03 	lds	r25, 0x0314
    26ec:	89 2b       	or	r24, r25
    26ee:	51 f0       	breq	.+20     	; 0x2704 <__vector_29+0x492>
						left_vel_sum += value;
    26f0:	80 91 09 03 	lds	r24, 0x0309
    26f4:	90 91 0a 03 	lds	r25, 0x030A
    26f8:	84 0f       	add	r24, r20
    26fa:	95 1f       	adc	r25, r21
    26fc:	90 93 0a 03 	sts	0x030A, r25
    2700:	80 93 09 03 	sts	0x0309, r24
					}
					if(firstSampleLeft==8) {
    2704:	28 30       	cpi	r18, 0x08	; 8
    2706:	09 f0       	breq	.+2      	; 0x270a <__vector_29+0x498>
    2708:	53 ce       	rjmp	.-858    	; 0x23b0 <__vector_29+0x13e>
						firstSampleLeft = 0;
    270a:	10 92 06 02 	sts	0x0206, r1
						compute_left_vel = 1;
    270e:	81 e0       	ldi	r24, 0x01	; 1
    2710:	80 93 03 02 	sts	0x0203, r24
    2714:	4d ce       	rjmp	.-870    	; 0x23b0 <__vector_29+0x13e>
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
		switch(irCommAdcTxState) {
    2716:	83 30       	cpi	r24, 0x03	; 3
    2718:	09 f4       	brne	.+2      	; 0x271c <__vector_29+0x4aa>
    271a:	ab c0       	rjmp	.+342    	; 0x2872 <__vector_29+0x600>
    271c:	84 30       	cpi	r24, 0x04	; 4
    271e:	09 f0       	breq	.+2      	; 0x2722 <__vector_29+0x4b0>
    2720:	0e ce       	rjmp	.-996    	; 0x233e <__vector_29+0xcc>
				}
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ2;
				break;

			case IRCOMM_TX_ADC_TRANSMISSION_SEQ2:
				irCommTxDurationCycle++;
    2722:	80 91 52 05 	lds	r24, 0x0552
    2726:	8f 5f       	subi	r24, 0xFF	; 255
    2728:	80 93 52 05 	sts	0x0552, r24
				if(irCommTxDurationCycle == irCommTxDuration) {
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	20 91 4e 05 	lds	r18, 0x054E
    2732:	30 91 4f 05 	lds	r19, 0x054F
    2736:	82 17       	cp	r24, r18
    2738:	93 07       	cpc	r25, r19
    273a:	09 f4       	brne	.+2      	; 0x273e <__vector_29+0x4cc>
    273c:	0c c1       	rjmp	.+536    	; 0x2956 <__vector_29+0x6e4>
						irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;
						adcSaveDataTo = SKIP_SAMPLE;
						break;
					}
				}
				currentAdChannel = currentMotLeftChannel;
    273e:	80 91 41 02 	lds	r24, 0x0241
    2742:	80 93 3f 02 	sts	0x023F, r24
				leftChannelPhase = leftMotorPhase;
    2746:	80 91 44 02 	lds	r24, 0x0244
    274a:	80 93 d8 02 	sts	0x02D8, r24
				if(rightChannelPhase == ACTIVE_PHASE) {
    274e:	80 91 d7 02 	lds	r24, 0x02D7
    2752:	88 23       	and	r24, r24
    2754:	09 f4       	brne	.+2      	; 0x2758 <__vector_29+0x4e6>
    2756:	d3 c0       	rjmp	.+422    	; 0x28fe <__vector_29+0x68c>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    2758:	81 30       	cpi	r24, 0x01	; 1
    275a:	09 f4       	brne	.+2      	; 0x275e <__vector_29+0x4ec>
    275c:	c2 c2       	rjmp	.+1412   	; 0x2ce2 <__vector_29+0xa70>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    275e:	85 e0       	ldi	r24, 0x05	; 5
    2760:	80 93 d5 02 	sts	0x02D5, r24
				}
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ1;
    2764:	83 e0       	ldi	r24, 0x03	; 3
    2766:	80 93 44 05 	sts	0x0544, r24
    276a:	90 91 d6 02 	lds	r25, 0x02D6
    276e:	e9 cd       	rjmp	.-1070   	; 0x2342 <__vector_29+0xd0>
			PORTJ &= 0xF0;
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0)"
		}

		if(hardwareRevision == HW_REV_3_0_1) {
    2770:	81 30       	cpi	r24, 0x01	; 1
    2772:	09 f0       	breq	.+2      	; 0x2776 <__vector_29+0x504>
    2774:	73 c1       	rjmp	.+742    	; 0x2a5c <__vector_29+0x7ea>
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0.1)"
		}

		if(hardwareRevision == HW_REV_3_1) {
			PORTJ = 0xFF;
    2776:	8f ef       	ldi	r24, 0xFF	; 255
    2778:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    277c:	12 b8       	out	0x02, r1	; 2
    277e:	f3 cd       	rjmp	.-1050   	; 0x2366 <__vector_29+0xf4>
				adcSaveDataTo = SKIP_SAMPLE;
				break;

		}
	} else if(irCommMode==IRCOMM_MODE_SENSORS_SAMPLING) {
		switch(adcSamplingState) {
    2780:	93 30       	cpi	r25, 0x03	; 3
    2782:	09 f4       	brne	.+2      	; 0x2786 <__vector_29+0x514>
    2784:	43 c1       	rjmp	.+646    	; 0x2a0c <__vector_29+0x79a>
    2786:	94 30       	cpi	r25, 0x04	; 4
    2788:	09 f0       	breq	.+2      	; 0x278c <__vector_29+0x51a>
    278a:	db cd       	rjmp	.-1098   	; 0x2342 <__vector_29+0xd0>
				}
				adcSamplingState = 4;
				break;

			case 4:	// right motor
				currentAdChannel = currentMotRightChannel;
    278c:	80 91 42 02 	lds	r24, 0x0242
    2790:	80 93 3f 02 	sts	0x023F, r24
				rightChannelPhase = rightMotorPhase;
    2794:	80 91 43 02 	lds	r24, 0x0243
    2798:	80 93 d7 02 	sts	0x02D7, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    279c:	80 91 d8 02 	lds	r24, 0x02D8
    27a0:	88 23       	and	r24, r24
    27a2:	09 f0       	breq	.+2      	; 0x27a6 <__vector_29+0x534>
    27a4:	75 c1       	rjmp	.+746    	; 0x2a90 <__vector_29+0x81e>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    27a6:	83 e0       	ldi	r24, 0x03	; 3
    27a8:	80 93 d5 02 	sts	0x02D5, r24
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 0;
    27ac:	10 92 d6 02 	sts	0x02D6, r1

				if(currentProx==14 && measBattery==1) {
    27b0:	20 91 40 02 	lds	r18, 0x0240
    27b4:	2e 30       	cpi	r18, 0x0E	; 14
    27b6:	09 f4       	brne	.+2      	; 0x27ba <__vector_29+0x548>
    27b8:	2b c2       	rjmp	.+1110   	; 0x2c10 <__vector_29+0x99e>
					measBattery=2;
					SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
				}

				// turn on the IR pulses for the proximities only in their active phases
				if(currentProx & 0x01) {
    27ba:	42 2f       	mov	r20, r18
    27bc:	50 e0       	ldi	r21, 0x00	; 0
    27be:	20 ff       	sbrs	r18, 0
    27c0:	be cd       	rjmp	.-1156   	; 0x233e <__vector_29+0xcc>
					if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
    27c2:	20 31       	cpi	r18, 0x10	; 16
    27c4:	08 f0       	brcs	.+2      	; 0x27c8 <__vector_29+0x556>
    27c6:	58 c2       	rjmp	.+1200   	; 0x2c78 <__vector_29+0xa06>
											// PORTA for proximity sensors, PORTJ for ground sensors
						PORTA = (1 << (currentProx>>1));	// pulse on
    27c8:	26 95       	lsr	r18
    27ca:	81 e0       	ldi	r24, 0x01	; 1
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	02 c0       	rjmp	.+4      	; 0x27d4 <__vector_29+0x562>
    27d0:	88 0f       	add	r24, r24
    27d2:	99 1f       	adc	r25, r25
    27d4:	2a 95       	dec	r18
    27d6:	e2 f7       	brpl	.-8      	; 0x27d0 <__vector_29+0x55e>
    27d8:	82 b9       	out	0x02, r24	; 2
    27da:	90 91 d6 02 	lds	r25, 0x02D6
    27de:	b1 cd       	rjmp	.-1182   	; 0x2342 <__vector_29+0xd0>
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
    27e0:	29 30       	cpi	r18, 0x09	; 9
    27e2:	09 f4       	brne	.+2      	; 0x27e6 <__vector_29+0x574>
    27e4:	8f c1       	rjmp	.+798    	; 0x2b04 <__vector_29+0x892>
    27e6:	2a 30       	cpi	r18, 0x0A	; 10
    27e8:	08 f0       	brcs	.+2      	; 0x27ec <__vector_29+0x57a>
    27ea:	8d c0       	rjmp	.+282    	; 0x2906 <__vector_29+0x694>
    27ec:	27 30       	cpi	r18, 0x07	; 7
    27ee:	09 f4       	brne	.+2      	; 0x27f2 <__vector_29+0x580>
    27f0:	e2 c1       	rjmp	.+964    	; 0x2bb6 <__vector_29+0x944>
    27f2:	28 30       	cpi	r18, 0x08	; 8
    27f4:	09 f0       	breq	.+2      	; 0x27f8 <__vector_29+0x586>
    27f6:	a3 cd       	rjmp	.-1210   	; 0x233e <__vector_29+0xcc>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 8;
				break;

			case 8:
				currentAdChannel = currentMotRightChannel;
    27f8:	80 91 42 02 	lds	r24, 0x0242
    27fc:	80 93 3f 02 	sts	0x023F, r24
				rightChannelPhase = rightMotorPhase;
    2800:	80 91 43 02 	lds	r24, 0x0243
    2804:	80 93 d7 02 	sts	0x02D7, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    2808:	80 91 d8 02 	lds	r24, 0x02D8
    280c:	88 23       	and	r24, r24
    280e:	09 f0       	breq	.+2      	; 0x2812 <__vector_29+0x5a0>
    2810:	7e c2       	rjmp	.+1276   	; 0x2d0e <__vector_29+0xa9c>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    2812:	83 e0       	ldi	r24, 0x03	; 3
    2814:	80 93 d5 02 	sts	0x02D5, r24
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				irCommAdcRxState = 9;
    2818:	89 e0       	ldi	r24, 0x09	; 9
    281a:	80 93 21 05 	sts	0x0521, r24
    281e:	90 91 d6 02 	lds	r25, 0x02D6
    2822:	8f cd       	rjmp	.-1250   	; 0x2342 <__vector_29+0xd0>
	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
		switch(irCommAdcTxState) {
			case IRCOMM_TX_ADC_TURN_OFF_SENSORS:
				// turn off all proximity
				if(hardwareRevision == HW_REV_3_0) {
    2824:	80 91 73 04 	lds	r24, 0x0473
    2828:	88 23       	and	r24, r24
    282a:	09 f4       	brne	.+2      	; 0x282e <__vector_29+0x5bc>
    282c:	5d c0       	rjmp	.+186    	; 0x28e8 <__vector_29+0x676>
					PORTJ &= 0xF0;	// ground
					PORTA = 0x00;	// proximity
				}

				if(hardwareRevision == HW_REV_3_0_1) {
    282e:	81 30       	cpi	r24, 0x01	; 1
    2830:	09 f0       	breq	.+2      	; 0x2834 <__vector_29+0x5c2>
    2832:	1e c2       	rjmp	.+1084   	; 0x2c70 <__vector_29+0x9fe>
					PORTJ = 0xFF;	// ground
					PORTA = 0x00;	// proximity
				}

				if(hardwareRevision == HW_REV_3_1) {
					PORTJ = 0xFF;	// ground
    2834:	8f ef       	ldi	r24, 0xFF	; 255
    2836:	80 93 05 01 	sts	0x0105, r24
					PORTA = 0x00;	// proximtiy
    283a:	12 b8       	out	0x02, r1	; 2
				}
				currentAdChannel = currentMotLeftChannel;
    283c:	80 91 41 02 	lds	r24, 0x0241
    2840:	80 93 3f 02 	sts	0x023F, r24
				leftChannelPhase = leftMotorPhase;
    2844:	80 91 44 02 	lds	r24, 0x0244
    2848:	80 93 d8 02 	sts	0x02D8, r24
				adcSaveDataTo = SKIP_SAMPLE;				
    284c:	85 e0       	ldi	r24, 0x05	; 5
    284e:	80 93 d5 02 	sts	0x02D5, r24
				irCommState = IRCOMM_TX_PREPARE_TRANSMISSION;
    2852:	80 93 f5 04 	sts	0x04F5, r24
				irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;
    2856:	82 e0       	ldi	r24, 0x02	; 2
    2858:	80 93 44 05 	sts	0x0544, r24
				if(irCommTxSensorGroup==0) {
    285c:	80 91 54 05 	lds	r24, 0x0554
    2860:	88 23       	and	r24, r24
    2862:	09 f0       	breq	.+2      	; 0x2866 <__vector_29+0x5f4>
    2864:	ff c0       	rjmp	.+510    	; 0x2a64 <__vector_29+0x7f2>
					irCommTxSensorGroup = 1;
    2866:	81 e0       	ldi	r24, 0x01	; 1
    2868:	80 93 54 05 	sts	0x0554, r24
    286c:	90 91 d6 02 	lds	r25, 0x02D6
    2870:	68 cd       	rjmp	.-1328   	; 0x2342 <__vector_29+0xd0>

			case IRCOMM_TX_ADC_WAIT_PREPARATION:
				break;

			case IRCOMM_TX_ADC_TRANSMISSION_SEQ1:
				irCommTxDurationCycle++;
    2872:	80 91 52 05 	lds	r24, 0x0552
    2876:	8f 5f       	subi	r24, 0xFF	; 255
    2878:	80 93 52 05 	sts	0x0552, r24
				if(irCommTxDurationCycle == irCommTxDuration) {
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	20 91 4e 05 	lds	r18, 0x054E
    2882:	30 91 4f 05 	lds	r19, 0x054F
    2886:	82 17       	cp	r24, r18
    2888:	93 07       	cpc	r25, r19
    288a:	09 f4       	brne	.+2      	; 0x288e <__vector_29+0x61c>
    288c:	93 c0       	rjmp	.+294    	; 0x29b4 <__vector_29+0x742>
						irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;						
						adcSaveDataTo = SKIP_SAMPLE;
						break;
					}
				}	
				currentAdChannel = currentMotRightChannel;
    288e:	80 91 42 02 	lds	r24, 0x0242
    2892:	80 93 3f 02 	sts	0x023F, r24
				rightChannelPhase = rightMotorPhase;
    2896:	80 91 43 02 	lds	r24, 0x0243
    289a:	80 93 d7 02 	sts	0x02D7, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    289e:	80 91 d8 02 	lds	r24, 0x02D8
    28a2:	88 23       	and	r24, r24
    28a4:	41 f1       	breq	.+80     	; 0x28f6 <__vector_29+0x684>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    28a6:	81 30       	cpi	r24, 0x01	; 1
    28a8:	09 f4       	brne	.+2      	; 0x28ac <__vector_29+0x63a>
    28aa:	1f c2       	rjmp	.+1086   	; 0x2cea <__vector_29+0xa78>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    28ac:	85 e0       	ldi	r24, 0x05	; 5
    28ae:	80 93 d5 02 	sts	0x02D5, r24
				}
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ2;
    28b2:	84 e0       	ldi	r24, 0x04	; 4
    28b4:	80 93 44 05 	sts	0x0544, r24
    28b8:	90 91 d6 02 	lds	r25, 0x02D6
    28bc:	42 cd       	rjmp	.-1404   	; 0x2342 <__vector_29+0xd0>
		}
	} else if(irCommMode==IRCOMM_MODE_SENSORS_SAMPLING) {
		switch(adcSamplingState) {

			case 0:	// proximity
				currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
    28be:	80 91 40 02 	lds	r24, 0x0240
    28c2:	86 95       	lsr	r24
    28c4:	80 93 3f 02 	sts	0x023F, r24
																// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
				if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
    28c8:	80 91 d7 02 	lds	r24, 0x02D7
    28cc:	88 23       	and	r24, r24
    28ce:	09 f0       	breq	.+2      	; 0x28d2 <__vector_29+0x660>
    28d0:	e6 c0       	rjmp	.+460    	; 0x2a9e <__vector_29+0x82c>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    28d2:	81 e0       	ldi	r24, 0x01	; 1
    28d4:	80 93 d5 02 	sts	0x02D5, r24
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 1;
    28d8:	81 e0       	ldi	r24, 0x01	; 1
    28da:	80 93 d6 02 	sts	0x02D6, r24
    28de:	91 e0       	ldi	r25, 0x01	; 1
    28e0:	30 cd       	rjmp	.-1440   	; 0x2342 <__vector_29+0xd0>
					} else {
						cliffDetectedFlag = 0;
						//LED_RED_OFF;
					}
				} else {
					cliffDetectedFlag = 0;
    28e2:	10 92 96 04 	sts	0x0496, r1
    28e6:	2f ce       	rjmp	.-930    	; 0x2546 <__vector_29+0x2d4>
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
		switch(irCommAdcTxState) {
			case IRCOMM_TX_ADC_TURN_OFF_SENSORS:
				// turn off all proximity
				if(hardwareRevision == HW_REV_3_0) {
					PORTJ &= 0xF0;	// ground
    28e8:	80 91 05 01 	lds	r24, 0x0105
    28ec:	80 7f       	andi	r24, 0xF0	; 240
    28ee:	80 93 05 01 	sts	0x0105, r24
					PORTA = 0x00;	// proximity
    28f2:	12 b8       	out	0x02, r1	; 2
    28f4:	a3 cf       	rjmp	.-186    	; 0x283c <__vector_29+0x5ca>
					}
				}	
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    28f6:	83 e0       	ldi	r24, 0x03	; 3
    28f8:	80 93 d5 02 	sts	0x02D5, r24
    28fc:	da cf       	rjmp	.-76     	; 0x28b2 <__vector_29+0x640>
					}
				}
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    28fe:	81 e0       	ldi	r24, 0x01	; 1
    2900:	80 93 d5 02 	sts	0x02D5, r24
    2904:	2f cf       	rjmp	.-418    	; 0x2764 <__vector_29+0x4f2>
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
    2906:	2b 30       	cpi	r18, 0x0B	; 11
    2908:	09 f4       	brne	.+2      	; 0x290c <__vector_29+0x69a>
    290a:	47 c1       	rjmp	.+654    	; 0x2b9a <__vector_29+0x928>
    290c:	2b 30       	cpi	r18, 0x0B	; 11
    290e:	08 f4       	brcc	.+2      	; 0x2912 <__vector_29+0x6a0>
    2910:	1a c1       	rjmp	.+564    	; 0x2b46 <__vector_29+0x8d4>
    2912:	2c 30       	cpi	r18, 0x0C	; 12
    2914:	09 f0       	breq	.+2      	; 0x2918 <__vector_29+0x6a6>
    2916:	13 cd       	rjmp	.-1498   	; 0x233e <__vector_29+0xcc>
				}
				irCommAdcRxState = 0;
				break;

			case 12:
				adcSaveDataTo = SKIP_SAMPLE;
    2918:	85 e0       	ldi	r24, 0x05	; 5
    291a:	80 93 d5 02 	sts	0x02D5, r24
    291e:	90 91 d6 02 	lds	r25, 0x02D6
    2922:	0f cd       	rjmp	.-1506   	; 0x2342 <__vector_29+0xd0>
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
    2924:	22 23       	and	r18, r18
    2926:	09 f4       	brne	.+2      	; 0x292a <__vector_29+0x6b8>
    2928:	02 c1       	rjmp	.+516    	; 0x2b2e <__vector_29+0x8bc>
    292a:	21 30       	cpi	r18, 0x01	; 1
    292c:	09 f0       	breq	.+2      	; 0x2930 <__vector_29+0x6be>
    292e:	07 cd       	rjmp	.-1522   	; 0x233e <__vector_29+0xcc>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 1;
				break;

			case 1:
				currentAdChannel = currentProx+1;
    2930:	80 91 40 02 	lds	r24, 0x0240
    2934:	8f 5f       	subi	r24, 0xFF	; 255
    2936:	80 93 3f 02 	sts	0x023F, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    293a:	86 e0       	ldi	r24, 0x06	; 6
    293c:	80 93 d5 02 	sts	0x02D5, r24
				irCommAdcRxState = 2;
    2940:	82 e0       	ldi	r24, 0x02	; 2
    2942:	80 93 21 05 	sts	0x0521, r24
    2946:	90 91 d6 02 	lds	r25, 0x02D6
    294a:	fb cc       	rjmp	.-1546   	; 0x2342 <__vector_29+0xd0>
					irCommMode = IRCOMM_MODE_RECEIVE;					
				}
				if(irCommEnabled==IRCOMM_MODE_TRANSMIT && currentProx==23) {
					irCommMode = IRCOMM_MODE_TRANSMIT;
					if(irCommTxByteEnqueued==1) {
						irCommAdcTxState = IRCOMM_TX_ADC_TURN_OFF_SENSORS;
    294c:	80 93 44 05 	sts	0x0544, r24
    2950:	90 91 d6 02 	lds	r25, 0x02D6
    2954:	f6 cc       	rjmp	.-1556   	; 0x2342 <__vector_29+0xd0>
				break;

			case IRCOMM_TX_ADC_TRANSMISSION_SEQ2:
				irCommTxDurationCycle++;
				if(irCommTxDurationCycle == irCommTxDuration) {
					irCommTxDurationCycle = 0;
    2956:	10 92 52 05 	sts	0x0552, r1
					if(irCommTxPulseState == 0) {
    295a:	80 91 4d 05 	lds	r24, 0x054D
    295e:	88 23       	and	r24, r24
    2960:	09 f0       	breq	.+2      	; 0x2964 <__vector_29+0x6f2>
    2962:	9f c1       	rjmp	.+830    	; 0x2ca2 <__vector_29+0xa30>
						irCommTxPulseState = 1;
    2964:	81 e0       	ldi	r24, 0x01	; 1
    2966:	80 93 4d 05 	sts	0x054D, r24
						//PORTA = 0xFF;
						//PORTA = 0x01;
						//PORTA = irCommTxSensorMask;
						if(irCommTxSensorGroup==0) {
    296a:	80 91 54 05 	lds	r24, 0x0554
    296e:	88 23       	and	r24, r24
    2970:	09 f0       	breq	.+2      	; 0x2974 <__vector_29+0x702>
    2972:	01 c2       	rjmp	.+1026   	; 0x2d76 <__vector_29+0xb04>
							PORTA = 0xAA;
    2974:	8a ea       	ldi	r24, 0xAA	; 170
    2976:	82 b9       	out	0x02, r24	; 2
						}
					} else {
						irCommTxPulseState = 0;
						PORTA = 0x00;
					}
					irCommTxSwitchCounter++;
    2978:	80 91 51 05 	lds	r24, 0x0551
    297c:	8f 5f       	subi	r24, 0xFF	; 255
    297e:	80 93 51 05 	sts	0x0551, r24
					if(irCommTxSwitchCounter == irCommTxSwitchCount) {
    2982:	90 91 50 05 	lds	r25, 0x0550
    2986:	89 17       	cp	r24, r25
    2988:	09 f0       	breq	.+2      	; 0x298c <__vector_29+0x71a>
    298a:	d9 ce       	rjmp	.-590    	; 0x273e <__vector_29+0x4cc>
						irCommTxBitCount++;
    298c:	80 91 4c 05 	lds	r24, 0x054C
    2990:	8f 5f       	subi	r24, 0xFF	; 255
    2992:	80 93 4c 05 	sts	0x054C, r24
						if(irCommTxBitCount==12) {
    2996:	8c 30       	cpi	r24, 0x0C	; 12
    2998:	09 f4       	brne	.+2      	; 0x299c <__vector_29+0x72a>
    299a:	73 c2       	rjmp	.+1254   	; 0x2e82 <__vector_29+0xc10>
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
							irCommInitReceiver();
							PORTA = 0x00;
							irCommTxLastTransmissionTime = getTime100MicroSec();
						} else {
							irCommState = IRCOMM_TX_COMPUTE_TIMINGS;
    299c:	82 e0       	ldi	r24, 0x02	; 2
    299e:	80 93 f5 04 	sts	0x04F5, r24
						}
						irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;
    29a2:	82 e0       	ldi	r24, 0x02	; 2
    29a4:	80 93 44 05 	sts	0x0544, r24
						adcSaveDataTo = SKIP_SAMPLE;
    29a8:	85 e0       	ldi	r24, 0x05	; 5
    29aa:	80 93 d5 02 	sts	0x02D5, r24
    29ae:	90 91 d6 02 	lds	r25, 0x02D6
    29b2:	c7 cc       	rjmp	.-1650   	; 0x2342 <__vector_29+0xd0>
				break;

			case IRCOMM_TX_ADC_TRANSMISSION_SEQ1:
				irCommTxDurationCycle++;
				if(irCommTxDurationCycle == irCommTxDuration) {
					irCommTxDurationCycle = 0;
    29b4:	10 92 52 05 	sts	0x0552, r1
					if(irCommTxPulseState == 0) {
    29b8:	80 91 4d 05 	lds	r24, 0x054D
    29bc:	88 23       	and	r24, r24
    29be:	09 f0       	breq	.+2      	; 0x29c2 <__vector_29+0x750>
    29c0:	74 c1       	rjmp	.+744    	; 0x2caa <__vector_29+0xa38>
						irCommTxPulseState = 1;
    29c2:	81 e0       	ldi	r24, 0x01	; 1
    29c4:	80 93 4d 05 	sts	0x054D, r24
						//PORTA = 0xFF;
						//PORTA = 0x01;
						//PORTA = irCommTxSensorMask;
						if(irCommTxSensorGroup==0) {
    29c8:	80 91 54 05 	lds	r24, 0x0554
    29cc:	88 23       	and	r24, r24
    29ce:	09 f0       	breq	.+2      	; 0x29d2 <__vector_29+0x760>
    29d0:	d5 c1       	rjmp	.+938    	; 0x2d7c <__vector_29+0xb0a>
							PORTA = 0xAA;
    29d2:	8a ea       	ldi	r24, 0xAA	; 170
    29d4:	82 b9       	out	0x02, r24	; 2
						}
					} else {
						irCommTxPulseState = 0;
						PORTA = 0x00;
					}
					irCommTxSwitchCounter++;
    29d6:	80 91 51 05 	lds	r24, 0x0551
    29da:	8f 5f       	subi	r24, 0xFF	; 255
    29dc:	80 93 51 05 	sts	0x0551, r24
					if(irCommTxSwitchCounter == irCommTxSwitchCount) {
    29e0:	90 91 50 05 	lds	r25, 0x0550
    29e4:	89 17       	cp	r24, r25
    29e6:	09 f0       	breq	.+2      	; 0x29ea <__vector_29+0x778>
    29e8:	52 cf       	rjmp	.-348    	; 0x288e <__vector_29+0x61c>
    29ea:	d0 cf       	rjmp	.-96     	; 0x298c <__vector_29+0x71a>
			}
			currentProx++;
			break;

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    29ec:	80 91 db 02 	lds	r24, 0x02DB
    29f0:	82 30       	cpi	r24, 0x02	; 2
    29f2:	09 f0       	breq	.+2      	; 0x29f6 <__vector_29+0x784>
    29f4:	2a cd       	rjmp	.-1452   	; 0x244a <__vector_29+0x1d8>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
    29f6:	50 93 da 02 	sts	0x02DA, r21
    29fa:	40 93 d9 02 	sts	0x02D9, r20
				measBattery = 0;
    29fe:	10 92 db 02 	sts	0x02DB, r1
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
    2a02:	46 98       	cbi	0x08, 6	; 8
				} else {
					cliffDetectedFlag = 0;
				}

			}			
			currentProx++;
    2a04:	8f e0       	ldi	r24, 0x0F	; 15
    2a06:	80 93 40 02 	sts	0x0240, r24
    2a0a:	d2 cc       	rjmp	.-1628   	; 0x23b0 <__vector_29+0x13e>
				}
				adcSamplingState = 3;
				break;

			case 3:	// left motor
				currentAdChannel = currentMotLeftChannel;
    2a0c:	80 91 41 02 	lds	r24, 0x0241
    2a10:	80 93 3f 02 	sts	0x023F, r24
				leftChannelPhase = leftMotorPhase;
    2a14:	80 91 44 02 	lds	r24, 0x0244
    2a18:	80 93 d8 02 	sts	0x02D8, r24
				if(rightChannelPhase == ACTIVE_PHASE) {
    2a1c:	80 91 d7 02 	lds	r24, 0x02D7
    2a20:	88 23       	and	r24, r24
    2a22:	41 f5       	brne	.+80     	; 0x2a74 <__vector_29+0x802>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    2a24:	81 e0       	ldi	r24, 0x01	; 1
    2a26:	80 93 d5 02 	sts	0x02D5, r24
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 4;
    2a2a:	84 e0       	ldi	r24, 0x04	; 4
    2a2c:	80 93 d6 02 	sts	0x02D6, r24
    2a30:	94 e0       	ldi	r25, 0x04	; 4
    2a32:	87 cc       	rjmp	.-1778   	; 0x2342 <__vector_29+0xd0>
					}
				}
				break;

			case 2:	// right motor
				currentAdChannel = currentMotRightChannel;
    2a34:	80 91 42 02 	lds	r24, 0x0242
    2a38:	80 93 3f 02 	sts	0x023F, r24
				rightChannelPhase = rightMotorPhase;
    2a3c:	80 91 43 02 	lds	r24, 0x0243
    2a40:	80 93 d7 02 	sts	0x02D7, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    2a44:	80 91 d8 02 	lds	r24, 0x02D8
    2a48:	88 23       	and	r24, r24
    2a4a:	d9 f4       	brne	.+54     	; 0x2a82 <__vector_29+0x810>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    2a4c:	83 e0       	ldi	r24, 0x03	; 3
    2a4e:	80 93 d5 02 	sts	0x02D5, r24
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 3;
    2a52:	83 e0       	ldi	r24, 0x03	; 3
    2a54:	80 93 d6 02 	sts	0x02D6, r24
    2a58:	93 e0       	ldi	r25, 0x03	; 3
    2a5a:	73 cc       	rjmp	.-1818   	; 0x2342 <__vector_29+0xd0>
			PORTJ = 0xFF;
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0.1)"
		}

		if(hardwareRevision == HW_REV_3_1) {
    2a5c:	82 30       	cpi	r24, 0x02	; 2
    2a5e:	09 f4       	brne	.+2      	; 0x2a62 <__vector_29+0x7f0>
    2a60:	8a ce       	rjmp	.-748    	; 0x2776 <__vector_29+0x504>
    2a62:	81 cc       	rjmp	.-1790   	; 0x2366 <__vector_29+0xf4>
				irCommState = IRCOMM_TX_PREPARE_TRANSMISSION;
				irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;
				if(irCommTxSensorGroup==0) {
					irCommTxSensorGroup = 1;
				} else {
					irCommTxSensorGroup = 0;
    2a64:	10 92 54 05 	sts	0x0554, r1
    2a68:	90 91 d6 02 	lds	r25, 0x02D6
    2a6c:	6a cc       	rjmp	.-1836   	; 0x2342 <__vector_29+0xd0>
					proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
				//} else {	// ground
				//	proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx];
				//}
				if(proximityResult[currentProx>>1] < 0) {
					proximityResult[currentProx>>1] = 0;
    2a6e:	11 82       	std	Z+1, r1	; 0x01
    2a70:	10 82       	st	Z, r1
    2a72:	1c cd       	rjmp	.-1480   	; 0x24ac <__vector_29+0x23a>
			case 3:	// left motor
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    2a74:	81 30       	cpi	r24, 0x01	; 1
    2a76:	09 f4       	brne	.+2      	; 0x2a7a <__vector_29+0x808>
    2a78:	60 c1       	rjmp	.+704    	; 0x2d3a <__vector_29+0xac8>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    2a7a:	85 e0       	ldi	r24, 0x05	; 5
    2a7c:	80 93 d5 02 	sts	0x02D5, r24
    2a80:	d4 cf       	rjmp	.-88     	; 0x2a2a <__vector_29+0x7b8>
			case 2:	// right motor
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    2a82:	81 30       	cpi	r24, 0x01	; 1
    2a84:	09 f4       	brne	.+2      	; 0x2a88 <__vector_29+0x816>
    2a86:	51 c1       	rjmp	.+674    	; 0x2d2a <__vector_29+0xab8>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    2a88:	85 e0       	ldi	r24, 0x05	; 5
    2a8a:	80 93 d5 02 	sts	0x02D5, r24
    2a8e:	e1 cf       	rjmp	.-62     	; 0x2a52 <__vector_29+0x7e0>
			case 4:	// right motor
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    2a90:	81 30       	cpi	r24, 0x01	; 1
    2a92:	09 f4       	brne	.+2      	; 0x2a96 <__vector_29+0x824>
    2a94:	56 c1       	rjmp	.+684    	; 0x2d42 <__vector_29+0xad0>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    2a96:	85 e0       	ldi	r24, 0x05	; 5
    2a98:	80 93 d5 02 	sts	0x02D5, r24
    2a9c:	87 ce       	rjmp	.-754    	; 0x27ac <__vector_29+0x53a>
			case 0:	// proximity
				currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
																// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
				if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    2a9e:	81 30       	cpi	r24, 0x01	; 1
    2aa0:	09 f4       	brne	.+2      	; 0x2aa4 <__vector_29+0x832>
    2aa2:	47 c1       	rjmp	.+654    	; 0x2d32 <__vector_29+0xac0>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    2aa4:	85 e0       	ldi	r24, 0x05	; 5
    2aa6:	80 93 d5 02 	sts	0x02D5, r24
    2aaa:	16 cf       	rjmp	.-468    	; 0x28d8 <__vector_29+0x666>
					
					if(proximityResult[currentProx>>1] < PHASE1) {

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
    2aac:	cf 01       	movw	r24, r30
    2aae:	cc 96       	adiw	r24, 0x3c	; 60
    2ab0:	95 95       	asr	r25
    2ab2:	87 95       	ror	r24
    2ab4:	88 37       	cpi	r24, 0x78	; 120
    2ab6:	91 05       	cpc	r25, r1
    2ab8:	0c f0       	brlt	.+2      	; 0x2abc <__vector_29+0x84a>
    2aba:	fb c0       	rjmp	.+502    	; 0x2cb2 <__vector_29+0xa40>
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;
    2abc:	a3 52       	subi	r26, 0x23	; 35
    2abe:	bd 4f       	sbci	r27, 0xFD	; 253
    2ac0:	fc 97       	sbiw	r30, 0x3c	; 60
    2ac2:	f5 95       	asr	r31
    2ac4:	e7 95       	ror	r30
    2ac6:	fc 96       	adiw	r30, 0x3c	; 60
    2ac8:	ed 93       	st	X+, r30
    2aca:	fc 93       	st	X, r31
    2acc:	ff cc       	rjmp	.-1538   	; 0x24cc <__vector_29+0x25a>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 6;
				break;

			case 6:
				currentAdChannel = currentProx+1;
    2ace:	80 91 40 02 	lds	r24, 0x0240
    2ad2:	8f 5f       	subi	r24, 0xFF	; 255
    2ad4:	80 93 3f 02 	sts	0x023F, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    2ad8:	20 93 d5 02 	sts	0x02D5, r18
				irCommAdcRxState = 7;
    2adc:	87 e0       	ldi	r24, 0x07	; 7
    2ade:	80 93 21 05 	sts	0x0521, r24
    2ae2:	90 91 d6 02 	lds	r25, 0x02D6
    2ae6:	2d cc       	rjmp	.-1958   	; 0x2342 <__vector_29+0xd0>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 2;
				break;

			case 2:
				currentAdChannel = currentProx+1;
    2ae8:	80 91 40 02 	lds	r24, 0x0240
    2aec:	8f 5f       	subi	r24, 0xFF	; 255
    2aee:	80 93 3f 02 	sts	0x023F, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    2af2:	86 e0       	ldi	r24, 0x06	; 6
    2af4:	80 93 d5 02 	sts	0x02D5, r24
				irCommAdcRxState = 3;
    2af8:	83 e0       	ldi	r24, 0x03	; 3
    2afa:	80 93 21 05 	sts	0x0521, r24
    2afe:	90 91 d6 02 	lds	r25, 0x02D6
    2b02:	1f cc       	rjmp	.-1986   	; 0x2342 <__vector_29+0xd0>
				}
				irCommAdcRxState = 9;
				break;

			case 9:
				currentAdChannel = currentMotLeftChannel;
    2b04:	80 91 41 02 	lds	r24, 0x0241
    2b08:	80 93 3f 02 	sts	0x023F, r24
				leftChannelPhase = leftMotorPhase;
    2b0c:	80 91 44 02 	lds	r24, 0x0244
    2b10:	80 93 d8 02 	sts	0x02D8, r24
				if(rightChannelPhase == ACTIVE_PHASE) {
    2b14:	80 91 d7 02 	lds	r24, 0x02D7
    2b18:	88 23       	and	r24, r24
    2b1a:	09 f0       	breq	.+2      	; 0x2b1e <__vector_29+0x8ac>
    2b1c:	f1 c0       	rjmp	.+482    	; 0x2d00 <__vector_29+0xa8e>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    2b1e:	90 93 d5 02 	sts	0x02D5, r25
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				irCommAdcRxState = 10;
    2b22:	8a e0       	ldi	r24, 0x0A	; 10
    2b24:	80 93 21 05 	sts	0x0521, r24
    2b28:	90 91 d6 02 	lds	r25, 0x02D6
    2b2c:	0a cc       	rjmp	.-2028   	; 0x2342 <__vector_29+0xd0>

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
			case 0:				
				currentProx = 0;
    2b2e:	10 92 40 02 	sts	0x0240, r1
				currentAdChannel = currentProx+1;				
    2b32:	90 93 3f 02 	sts	0x023F, r25
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    2b36:	86 e0       	ldi	r24, 0x06	; 6
    2b38:	80 93 d5 02 	sts	0x02D5, r24
				irCommAdcRxState = 1;
    2b3c:	90 93 21 05 	sts	0x0521, r25
    2b40:	90 91 d6 02 	lds	r25, 0x02D6
    2b44:	fe cb       	rjmp	.-2052   	; 0x2342 <__vector_29+0xd0>
				}
				irCommAdcRxState = 10;
				break;

			case 10:
				currentAdChannel = currentMotRightChannel;
    2b46:	80 91 42 02 	lds	r24, 0x0242
    2b4a:	80 93 3f 02 	sts	0x023F, r24
				rightChannelPhase = rightMotorPhase;
    2b4e:	80 91 43 02 	lds	r24, 0x0243
    2b52:	80 93 d7 02 	sts	0x02D7, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    2b56:	80 91 d8 02 	lds	r24, 0x02D8
    2b5a:	88 23       	and	r24, r24
    2b5c:	09 f0       	breq	.+2      	; 0x2b60 <__vector_29+0x8ee>
    2b5e:	c9 c0       	rjmp	.+402    	; 0x2cf2 <__vector_29+0xa80>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    2b60:	83 e0       	ldi	r24, 0x03	; 3
    2b62:	80 93 d5 02 	sts	0x02D5, r24
					}
				} else {
					irCommRxWindowSamples++;
				}
				*/
				if(irCommRxBitSkipped < 254) {	// safety check
    2b66:	80 91 3b 05 	lds	r24, 0x053B
    2b6a:	8e 3f       	cpi	r24, 0xFE	; 254
    2b6c:	18 f4       	brcc	.+6      	; 0x2b74 <__vector_29+0x902>
					irCommRxBitSkipped++;
    2b6e:	8f 5f       	subi	r24, 0xFF	; 255
    2b70:	80 93 3b 05 	sts	0x053B, r24
				}
				irCommRxWindowSamples++;
    2b74:	90 91 22 05 	lds	r25, 0x0522
    2b78:	9f 5f       	subi	r25, 0xFF	; 255
    2b7a:	90 93 22 05 	sts	0x0522, r25
				if(irCommState==IRCOMM_RX_SYNC_SIGNAL) {
    2b7e:	80 91 f5 04 	lds	r24, 0x04F5
    2b82:	84 30       	cpi	r24, 0x04	; 4
    2b84:	09 f4       	brne	.+2      	; 0x2b88 <__vector_29+0x916>
    2b86:	fd c0       	rjmp	.+506    	; 0x2d82 <__vector_29+0xb10>
					if(irCommRxBitSkipped >= irCommShiftCount) {
						irCommState = IRCOMM_RX_WAITING_BIT;
					}
				}

				if(irCommRxWindowSamples == IRCOMM_SAMPLING_WINDOW) {					
    2b88:	94 31       	cpi	r25, 0x14	; 20
    2b8a:	09 f4       	brne	.+2      	; 0x2b8e <__vector_29+0x91c>
    2b8c:	16 c1       	rjmp	.+556    	; 0x2dba <__vector_29+0xb48>
				} else {
					irCommTickCounter = 0;
					updateBlueLed(0);
				}
				*/
				irCommAdcRxState = 11;
    2b8e:	8b e0       	ldi	r24, 0x0B	; 11
    2b90:	80 93 21 05 	sts	0x0521, r24
    2b94:	90 91 d6 02 	lds	r25, 0x02D6
    2b98:	d4 cb       	rjmp	.-2136   	; 0x2342 <__vector_29+0xd0>
				break;

			case 11:
				currentAdChannel = 0;	// prox0
    2b9a:	10 92 3f 02 	sts	0x023F, r1
				if(rightChannelPhase == ACTIVE_PHASE) {
    2b9e:	80 91 d7 02 	lds	r24, 0x02D7
    2ba2:	88 23       	and	r24, r24
    2ba4:	09 f0       	breq	.+2      	; 0x2ba8 <__vector_29+0x936>
    2ba6:	ba c0       	rjmp	.+372    	; 0x2d1c <__vector_29+0xaaa>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    2ba8:	90 93 d5 02 	sts	0x02D5, r25
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				irCommAdcRxState = 0;
    2bac:	10 92 21 05 	sts	0x0521, r1
    2bb0:	90 91 d6 02 	lds	r25, 0x02D6
    2bb4:	c6 cb       	rjmp	.-2164   	; 0x2342 <__vector_29+0xd0>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 7;
				break;

			case 7:
				currentAdChannel = currentMotLeftChannel;
    2bb6:	80 91 41 02 	lds	r24, 0x0241
    2bba:	80 93 3f 02 	sts	0x023F, r24
				leftChannelPhase = leftMotorPhase;
    2bbe:	80 91 44 02 	lds	r24, 0x0244
    2bc2:	80 93 d8 02 	sts	0x02D8, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    2bc6:	86 e0       	ldi	r24, 0x06	; 6
    2bc8:	80 93 d5 02 	sts	0x02D5, r24
				irCommAdcRxState = 8;
    2bcc:	88 e0       	ldi	r24, 0x08	; 8
    2bce:	80 93 21 05 	sts	0x0521, r24
    2bd2:	90 91 d6 02 	lds	r25, 0x02D6
    2bd6:	b5 cb       	rjmp	.-2198   	; 0x2342 <__vector_29+0xd0>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 3;
				break;

			case 3:
				currentAdChannel = currentProx+1;
    2bd8:	80 91 40 02 	lds	r24, 0x0240
    2bdc:	8f 5f       	subi	r24, 0xFF	; 255
    2bde:	80 93 3f 02 	sts	0x023F, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    2be2:	86 e0       	ldi	r24, 0x06	; 6
    2be4:	80 93 d5 02 	sts	0x02D5, r24
				irCommAdcRxState = 4;
    2be8:	84 e0       	ldi	r24, 0x04	; 4
    2bea:	80 93 21 05 	sts	0x0521, r24
    2bee:	90 91 d6 02 	lds	r25, 0x02D6
    2bf2:	a7 cb       	rjmp	.-2226   	; 0x2342 <__vector_29+0xd0>
				break;

			case 4:
				currentAdChannel = currentProx+1;
    2bf4:	80 91 40 02 	lds	r24, 0x0240
    2bf8:	8f 5f       	subi	r24, 0xFF	; 255
    2bfa:	80 93 3f 02 	sts	0x023F, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    2bfe:	86 e0       	ldi	r24, 0x06	; 6
    2c00:	80 93 d5 02 	sts	0x02D5, r24
				irCommAdcRxState = 5;
    2c04:	85 e0       	ldi	r24, 0x05	; 5
    2c06:	80 93 21 05 	sts	0x0521, r24
    2c0a:	90 91 d6 02 	lds	r25, 0x02D6
    2c0e:	99 cb       	rjmp	.-2254   	; 0x2342 <__vector_29+0xd0>
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 0;

				if(currentProx==14 && measBattery==1) {
    2c10:	80 91 db 02 	lds	r24, 0x02DB
    2c14:	81 30       	cpi	r24, 0x01	; 1
    2c16:	09 f0       	breq	.+2      	; 0x2c1a <__vector_29+0x9a8>
    2c18:	d0 cd       	rjmp	.-1120   	; 0x27ba <__vector_29+0x548>
					measBattery=2;
    2c1a:	82 e0       	ldi	r24, 0x02	; 2
    2c1c:	80 93 db 02 	sts	0x02DB, r24
					SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
    2c20:	46 9a       	sbi	0x08, 6	; 8
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	8e cb       	rjmp	.-2276   	; 0x2342 <__vector_29+0xd0>
			case 1:	// left motor
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				adcSaveDataTo = SAVE_TO_PROX;
				adcSamplingState = 2;
				if(irCommEnabled==IRCOMM_MODE_RECEIVE && currentProx==23) {					
    2c26:	80 91 40 02 	lds	r24, 0x0240
    2c2a:	87 31       	cpi	r24, 0x17	; 23
    2c2c:	09 f0       	breq	.+2      	; 0x2c30 <__vector_29+0x9be>
    2c2e:	eb cb       	rjmp	.-2090   	; 0x2406 <__vector_29+0x194>
					currentAdChannel = 0;	// prox0					
    2c30:	10 92 3f 02 	sts	0x023F, r1
					measBattery = 0;
    2c34:	10 92 db 02 	sts	0x02DB, r1
					irCommAdcRxState = 0;					
    2c38:	10 92 21 05 	sts	0x0521, r1
					irCommRxWindowSamples = 0;
    2c3c:	10 92 22 05 	sts	0x0522, r1
					memset(irCommMaxSensorValueAdc, 0x00, 16);
    2c40:	e0 91 65 0b 	lds	r30, 0x0B65
    2c44:	f0 91 66 0b 	lds	r31, 0x0B66
    2c48:	80 e1       	ldi	r24, 0x10	; 16
    2c4a:	df 01       	movw	r26, r30
    2c4c:	1d 92       	st	X+, r1
    2c4e:	8a 95       	dec	r24
    2c50:	e9 f7       	brne	.-6      	; 0x2c4c <__vector_29+0x9da>
					memset(irCommMinSensorValueAdc, 0xFF, 16);
    2c52:	80 91 f5 05 	lds	r24, 0x05F5
    2c56:	90 91 f6 05 	lds	r25, 0x05F6
    2c5a:	6f ef       	ldi	r22, 0xFF	; 255
    2c5c:	70 e0       	ldi	r23, 0x00	; 0
    2c5e:	40 e1       	ldi	r20, 0x10	; 16
    2c60:	50 e0       	ldi	r21, 0x00	; 0
    2c62:	0e 94 77 58 	call	0xb0ee	; 0xb0ee <memset>
					irCommMode = IRCOMM_MODE_RECEIVE;					
    2c66:	10 93 f4 04 	sts	0x04F4, r17
    2c6a:	10 91 f2 04 	lds	r17, 0x04F2
    2c6e:	cb cb       	rjmp	.-2154   	; 0x2406 <__vector_29+0x194>
				if(hardwareRevision == HW_REV_3_0_1) {
					PORTJ = 0xFF;	// ground
					PORTA = 0x00;	// proximity
				}

				if(hardwareRevision == HW_REV_3_1) {
    2c70:	82 30       	cpi	r24, 0x02	; 2
    2c72:	09 f4       	brne	.+2      	; 0x2c76 <__vector_29+0xa04>
    2c74:	df cd       	rjmp	.-1090   	; 0x2834 <__vector_29+0x5c2>
    2c76:	e2 cd       	rjmp	.-1084   	; 0x283c <__vector_29+0x5ca>
				if(currentProx & 0x01) {
					if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
											// PORTA for proximity sensors, PORTJ for ground sensors
						PORTA = (1 << (currentProx>>1));	// pulse on
					} else {
						if(hardwareRevision == HW_REV_3_0) {
    2c78:	80 91 73 04 	lds	r24, 0x0473
    2c7c:	88 23       	and	r24, r24
    2c7e:	09 f0       	breq	.+2      	; 0x2c82 <__vector_29+0xa10>
    2c80:	63 c0       	rjmp	.+198    	; 0x2d48 <__vector_29+0xad6>
							PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
    2c82:	40 51       	subi	r20, 0x10	; 16
    2c84:	50 40       	sbci	r21, 0x00	; 0
    2c86:	55 95       	asr	r21
    2c88:	47 95       	ror	r20
    2c8a:	81 e0       	ldi	r24, 0x01	; 1
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	02 c0       	rjmp	.+4      	; 0x2c94 <__vector_29+0xa22>
    2c90:	88 0f       	add	r24, r24
    2c92:	99 1f       	adc	r25, r25
    2c94:	4a 95       	dec	r20
    2c96:	e2 f7       	brpl	.-8      	; 0x2c90 <__vector_29+0xa1e>
    2c98:	80 93 05 01 	sts	0x0105, r24
    2c9c:	90 91 d6 02 	lds	r25, 0x02D6
    2ca0:	50 cb       	rjmp	.-2400   	; 0x2342 <__vector_29+0xd0>
							PORTA = 0xAA;
						} else {
							PORTA = 0x55;
						}
					} else {
						irCommTxPulseState = 0;
    2ca2:	10 92 4d 05 	sts	0x054D, r1
						PORTA = 0x00;
    2ca6:	12 b8       	out	0x02, r1	; 2
    2ca8:	67 ce       	rjmp	.-818    	; 0x2978 <__vector_29+0x706>
							PORTA = 0xAA;
						} else {
							PORTA = 0x55;
						}
					} else {
						irCommTxPulseState = 0;
    2caa:	10 92 4d 05 	sts	0x054D, r1
						PORTA = 0x00;
    2cae:	12 b8       	out	0x02, r1	; 2
    2cb0:	92 ce       	rjmp	.-732    	; 0x29d6 <__vector_29+0x764>

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;

					} else if(((proximityResult[currentProx>>1]+300)>>2) < PHASE3) {
    2cb2:	cf 01       	movw	r24, r30
    2cb4:	84 5d       	subi	r24, 0xD4	; 212
    2cb6:	9e 4f       	sbci	r25, 0xFE	; 254
    2cb8:	95 95       	asr	r25
    2cba:	87 95       	ror	r24
    2cbc:	95 95       	asr	r25
    2cbe:	87 95       	ror	r24
    2cc0:	84 3b       	cpi	r24, 0xB4	; 180
    2cc2:	91 05       	cpc	r25, r1
    2cc4:	0c f0       	brlt	.+2      	; 0x2cc8 <__vector_29+0xa56>
    2cc6:	6a c0       	rjmp	.+212    	; 0x2d9c <__vector_29+0xb2a>

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-180)>>2) + PHASE2;
    2cc8:	a3 52       	subi	r26, 0x23	; 35
    2cca:	bd 4f       	sbci	r27, 0xFD	; 253
    2ccc:	e4 5b       	subi	r30, 0xB4	; 180
    2cce:	f0 40       	sbci	r31, 0x00	; 0
    2cd0:	f5 95       	asr	r31
    2cd2:	e7 95       	ror	r30
    2cd4:	f5 95       	asr	r31
    2cd6:	e7 95       	ror	r30
    2cd8:	e8 58       	subi	r30, 0x88	; 136
    2cda:	ff 4f       	sbci	r31, 0xFF	; 255
    2cdc:	ed 93       	st	X+, r30
    2cde:	fc 93       	st	X, r31
    2ce0:	f5 cb       	rjmp	.-2070   	; 0x24cc <__vector_29+0x25a>
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    2ce2:	82 e0       	ldi	r24, 0x02	; 2
    2ce4:	80 93 d5 02 	sts	0x02D5, r24
    2ce8:	3d cd       	rjmp	.-1414   	; 0x2764 <__vector_29+0x4f2>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    2cea:	84 e0       	ldi	r24, 0x04	; 4
    2cec:	80 93 d5 02 	sts	0x02D5, r24
    2cf0:	e0 cd       	rjmp	.-1088   	; 0x28b2 <__vector_29+0x640>
			case 10:
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    2cf2:	81 30       	cpi	r24, 0x01	; 1
    2cf4:	09 f4       	brne	.+2      	; 0x2cf8 <__vector_29+0xa86>
    2cf6:	c1 c0       	rjmp	.+386    	; 0x2e7a <__vector_29+0xc08>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    2cf8:	85 e0       	ldi	r24, 0x05	; 5
    2cfa:	80 93 d5 02 	sts	0x02D5, r24
    2cfe:	33 cf       	rjmp	.-410    	; 0x2b66 <__vector_29+0x8f4>
			case 9:
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    2d00:	81 30       	cpi	r24, 0x01	; 1
    2d02:	09 f4       	brne	.+2      	; 0x2d06 <__vector_29+0xa94>
    2d04:	ae c0       	rjmp	.+348    	; 0x2e62 <__vector_29+0xbf0>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    2d06:	85 e0       	ldi	r24, 0x05	; 5
    2d08:	80 93 d5 02 	sts	0x02D5, r24
    2d0c:	0a cf       	rjmp	.-492    	; 0x2b22 <__vector_29+0x8b0>
			case 8:
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    2d0e:	81 30       	cpi	r24, 0x01	; 1
    2d10:	09 f4       	brne	.+2      	; 0x2d14 <__vector_29+0xaa2>
    2d12:	ab c0       	rjmp	.+342    	; 0x2e6a <__vector_29+0xbf8>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    2d14:	85 e0       	ldi	r24, 0x05	; 5
    2d16:	80 93 d5 02 	sts	0x02D5, r24
    2d1a:	7e cd       	rjmp	.-1284   	; 0x2818 <__vector_29+0x5a6>

			case 11:
				currentAdChannel = 0;	// prox0
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    2d1c:	81 30       	cpi	r24, 0x01	; 1
    2d1e:	09 f4       	brne	.+2      	; 0x2d22 <__vector_29+0xab0>
    2d20:	a8 c0       	rjmp	.+336    	; 0x2e72 <__vector_29+0xc00>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    2d22:	85 e0       	ldi	r24, 0x05	; 5
    2d24:	80 93 d5 02 	sts	0x02D5, r24
    2d28:	41 cf       	rjmp	.-382    	; 0x2bac <__vector_29+0x93a>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    2d2a:	84 e0       	ldi	r24, 0x04	; 4
    2d2c:	80 93 d5 02 	sts	0x02D5, r24
    2d30:	90 ce       	rjmp	.-736    	; 0x2a52 <__vector_29+0x7e0>
				currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
																// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
				if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    2d32:	82 e0       	ldi	r24, 0x02	; 2
    2d34:	80 93 d5 02 	sts	0x02D5, r24
    2d38:	cf cd       	rjmp	.-1122   	; 0x28d8 <__vector_29+0x666>
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    2d3a:	82 e0       	ldi	r24, 0x02	; 2
    2d3c:	80 93 d5 02 	sts	0x02D5, r24
    2d40:	74 ce       	rjmp	.-792    	; 0x2a2a <__vector_29+0x7b8>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    2d42:	90 93 d5 02 	sts	0x02D5, r25
    2d46:	32 cd       	rjmp	.-1436   	; 0x27ac <__vector_29+0x53a>
					} else {
						if(hardwareRevision == HW_REV_3_0) {
							PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
						}

						if(hardwareRevision == HW_REV_3_0_1) {
    2d48:	81 30       	cpi	r24, 0x01	; 1
    2d4a:	09 f0       	breq	.+2      	; 0x2d4e <__vector_29+0xadc>
    2d4c:	b1 c0       	rjmp	.+354    	; 0x2eb0 <__vector_29+0xc3e>
							PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
    2d4e:	20 91 05 01 	lds	r18, 0x0105
    2d52:	40 51       	subi	r20, 0x10	; 16
    2d54:	50 40       	sbci	r21, 0x00	; 0
    2d56:	55 95       	asr	r21
    2d58:	47 95       	ror	r20
    2d5a:	81 e0       	ldi	r24, 0x01	; 1
    2d5c:	90 e0       	ldi	r25, 0x00	; 0
    2d5e:	02 c0       	rjmp	.+4      	; 0x2d64 <__vector_29+0xaf2>
    2d60:	88 0f       	add	r24, r24
    2d62:	99 1f       	adc	r25, r25
    2d64:	4a 95       	dec	r20
    2d66:	e2 f7       	brpl	.-8      	; 0x2d60 <__vector_29+0xaee>
    2d68:	80 95       	com	r24
    2d6a:	82 23       	and	r24, r18
    2d6c:	80 93 05 01 	sts	0x0105, r24
    2d70:	90 91 d6 02 	lds	r25, 0x02D6
    2d74:	e6 ca       	rjmp	.-2612   	; 0x2342 <__vector_29+0xd0>
						//PORTA = 0x01;
						//PORTA = irCommTxSensorMask;
						if(irCommTxSensorGroup==0) {
							PORTA = 0xAA;
						} else {
							PORTA = 0x55;
    2d76:	85 e5       	ldi	r24, 0x55	; 85
    2d78:	82 b9       	out	0x02, r24	; 2
    2d7a:	fe cd       	rjmp	.-1028   	; 0x2978 <__vector_29+0x706>
						//PORTA = 0x01;
						//PORTA = irCommTxSensorMask;
						if(irCommTxSensorGroup==0) {
							PORTA = 0xAA;
						} else {
							PORTA = 0x55;
    2d7c:	85 e5       	ldi	r24, 0x55	; 85
    2d7e:	82 b9       	out	0x02, r24	; 2
    2d80:	2a ce       	rjmp	.-940    	; 0x29d6 <__vector_29+0x764>
				if(irCommRxBitSkipped < 254) {	// safety check
					irCommRxBitSkipped++;
				}
				irCommRxWindowSamples++;
				if(irCommState==IRCOMM_RX_SYNC_SIGNAL) {
					irCommRxWindowSamples = 0;
    2d82:	10 92 22 05 	sts	0x0522, r1
					if(irCommRxBitSkipped >= irCommShiftCount) {
    2d86:	90 91 3b 05 	lds	r25, 0x053B
    2d8a:	80 91 2c 05 	lds	r24, 0x052C
    2d8e:	98 17       	cp	r25, r24
    2d90:	08 f4       	brcc	.+2      	; 0x2d94 <__vector_29+0xb22>
    2d92:	fd ce       	rjmp	.-518    	; 0x2b8e <__vector_29+0x91c>
						irCommState = IRCOMM_RX_WAITING_BIT;
    2d94:	85 e0       	ldi	r24, 0x05	; 5
    2d96:	80 93 f5 04 	sts	0x04F5, r24
    2d9a:	f9 ce       	rjmp	.-526    	; 0x2b8e <__vector_29+0x91c>

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-180)>>2) + PHASE2;

					} else {

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-420)>>3) + PHASE3;
    2d9c:	a3 52       	subi	r26, 0x23	; 35
    2d9e:	bd 4f       	sbci	r27, 0xFD	; 253
    2da0:	e4 5a       	subi	r30, 0xA4	; 164
    2da2:	f1 40       	sbci	r31, 0x01	; 1
    2da4:	f5 95       	asr	r31
    2da6:	e7 95       	ror	r30
    2da8:	f5 95       	asr	r31
    2daa:	e7 95       	ror	r30
    2dac:	f5 95       	asr	r31
    2dae:	e7 95       	ror	r30
    2db0:	ec 54       	subi	r30, 0x4C	; 76
    2db2:	ff 4f       	sbci	r31, 0xFF	; 255
    2db4:	ed 93       	st	X+, r30
    2db6:	fc 93       	st	X, r31
    2db8:	89 cb       	rjmp	.-2286   	; 0x24cc <__vector_29+0x25a>
						irCommState = IRCOMM_RX_WAITING_BIT;
					}
				}

				if(irCommRxWindowSamples == IRCOMM_SAMPLING_WINDOW) {					
					irCommRxWindowSamples = 0;
    2dba:	10 92 22 05 	sts	0x0522, r1
					irCommTempPointer = irCommProxValuesCurr;
    2dbe:	20 91 7b 08 	lds	r18, 0x087B
    2dc2:	30 91 7c 08 	lds	r19, 0x087C
					irCommProxValuesCurr = irCommProxValuesAdc;
    2dc6:	80 91 97 08 	lds	r24, 0x0897
    2dca:	90 91 98 08 	lds	r25, 0x0898
    2dce:	90 93 7c 08 	sts	0x087C, r25
    2dd2:	80 93 7b 08 	sts	0x087B, r24
					irCommProxValuesAdc = irCommTempPointer;
    2dd6:	30 93 98 08 	sts	0x0898, r19
    2dda:	20 93 97 08 	sts	0x0897, r18
					irCommTempPointer = irCommMaxSensorValueCurr;
    2dde:	40 91 78 05 	lds	r20, 0x0578
    2de2:	50 91 79 05 	lds	r21, 0x0579
					irCommMaxSensorValueCurr = irCommMaxSensorValueAdc;
    2de6:	80 91 65 0b 	lds	r24, 0x0B65
    2dea:	90 91 66 0b 	lds	r25, 0x0B66
    2dee:	90 93 79 05 	sts	0x0579, r25
    2df2:	80 93 78 05 	sts	0x0578, r24
					irCommMaxSensorValueAdc = irCommTempPointer;
    2df6:	40 93 65 0b 	sts	0x0B65, r20
    2dfa:	50 93 66 0b 	sts	0x0B66, r21
					irCommTempPointer = irCommMinSensorValueCurr;
    2dfe:	20 91 64 05 	lds	r18, 0x0564
    2e02:	30 91 65 05 	lds	r19, 0x0565
    2e06:	30 93 a7 0b 	sts	0x0BA7, r19
    2e0a:	20 93 a6 0b 	sts	0x0BA6, r18
					irCommMinSensorValueCurr = irCommMinSensorValueAdc;
    2e0e:	80 91 f5 05 	lds	r24, 0x05F5
    2e12:	90 91 f6 05 	lds	r25, 0x05F6
    2e16:	90 93 65 05 	sts	0x0565, r25
    2e1a:	80 93 64 05 	sts	0x0564, r24
					irCommMinSensorValueAdc = irCommTempPointer;
    2e1e:	30 93 f6 05 	sts	0x05F6, r19
    2e22:	20 93 f5 05 	sts	0x05F5, r18
					memset(irCommMaxSensorValueAdc, 0x00, 16);
    2e26:	fa 01       	movw	r30, r20
    2e28:	80 e1       	ldi	r24, 0x10	; 16
    2e2a:	df 01       	movw	r26, r30
    2e2c:	1d 92       	st	X+, r1
    2e2e:	8a 95       	dec	r24
    2e30:	e9 f7       	brne	.-6      	; 0x2e2c <__vector_29+0xbba>
					memset(irCommMinSensorValueAdc, 0xFF, 16);
    2e32:	80 91 f5 05 	lds	r24, 0x05F5
    2e36:	90 91 f6 05 	lds	r25, 0x05F6
    2e3a:	6f ef       	ldi	r22, 0xFF	; 255
    2e3c:	70 e0       	ldi	r23, 0x00	; 0
    2e3e:	40 e1       	ldi	r20, 0x10	; 16
    2e40:	50 e0       	ldi	r21, 0x00	; 0
    2e42:	0e 94 77 58 	call	0xb0ee	; 0xb0ee <memset>
					if(irCommState == IRCOMM_RX_IDLE_STATE) {
    2e46:	80 91 f5 04 	lds	r24, 0x04F5
    2e4a:	81 30       	cpi	r24, 0x01	; 1
    2e4c:	09 f4       	brne	.+2      	; 0x2e50 <__vector_29+0xbde>
    2e4e:	45 c0       	rjmp	.+138    	; 0x2eda <__vector_29+0xc68>
						irCommRxBitSkipped = 0;
					}
					//if(irCommState == IRCOMM_RX_SYNC_SIGNAL) {
					//	irCommSecondBitSkipped = 1;	// the second start bit is just sampled, skip it and sync with the received signal						
					//}
					if(irCommState == IRCOMM_RX_WAITING_BIT) {
    2e50:	80 91 f5 04 	lds	r24, 0x04F5
    2e54:	85 30       	cpi	r24, 0x05	; 5
    2e56:	09 f0       	breq	.+2      	; 0x2e5a <__vector_29+0xbe8>
    2e58:	9a ce       	rjmp	.-716    	; 0x2b8e <__vector_29+0x91c>
						irCommState = IRCOMM_RX_READ_BIT;
    2e5a:	86 e0       	ldi	r24, 0x06	; 6
    2e5c:	80 93 f5 04 	sts	0x04F5, r24
    2e60:	96 ce       	rjmp	.-724    	; 0x2b8e <__vector_29+0x91c>
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    2e62:	82 e0       	ldi	r24, 0x02	; 2
    2e64:	80 93 d5 02 	sts	0x02D5, r24
    2e68:	5c ce       	rjmp	.-840    	; 0x2b22 <__vector_29+0x8b0>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    2e6a:	84 e0       	ldi	r24, 0x04	; 4
    2e6c:	80 93 d5 02 	sts	0x02D5, r24
    2e70:	d3 cc       	rjmp	.-1626   	; 0x2818 <__vector_29+0x5a6>
			case 11:
				currentAdChannel = 0;	// prox0
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    2e72:	82 e0       	ldi	r24, 0x02	; 2
    2e74:	80 93 d5 02 	sts	0x02D5, r24
    2e78:	99 ce       	rjmp	.-718    	; 0x2bac <__vector_29+0x93a>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    2e7a:	84 e0       	ldi	r24, 0x04	; 4
    2e7c:	80 93 d5 02 	sts	0x02D5, r24
    2e80:	72 ce       	rjmp	.-796    	; 0x2b66 <__vector_29+0x8f4>
					}
					irCommTxSwitchCounter++;
					if(irCommTxSwitchCounter == irCommTxSwitchCount) {
						irCommTxBitCount++;
						if(irCommTxBitCount==12) {
							irCommState = IRCOMM_TX_IDLE_STATE;
    2e82:	81 e0       	ldi	r24, 0x01	; 1
    2e84:	80 93 f5 04 	sts	0x04F5, r24
							irCommTxByteEnqueued = 0;
    2e88:	10 92 46 05 	sts	0x0546, r1
							adcSamplingState = 0;
    2e8c:	10 92 d6 02 	sts	0x02D6, r1
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    2e90:	10 92 f4 04 	sts	0x04F4, r1
							irCommInitReceiver();
    2e94:	0e 94 20 3f 	call	0x7e40	; 0x7e40 <irCommInitReceiver>
							PORTA = 0x00;
    2e98:	12 b8       	out	0x02, r1	; 2
							irCommTxLastTransmissionTime = getTime100MicroSec();
    2e9a:	0e 94 04 10 	call	0x2008	; 0x2008 <getTime100MicroSec>
    2e9e:	60 93 47 05 	sts	0x0547, r22
    2ea2:	70 93 48 05 	sts	0x0548, r23
    2ea6:	80 93 49 05 	sts	0x0549, r24
    2eaa:	90 93 4a 05 	sts	0x054A, r25
    2eae:	79 cd       	rjmp	.-1294   	; 0x29a2 <__vector_29+0x730>

						if(hardwareRevision == HW_REV_3_0_1) {
							PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
						}

						if(hardwareRevision == HW_REV_3_1) {
    2eb0:	82 30       	cpi	r24, 0x02	; 2
    2eb2:	09 f0       	breq	.+2      	; 0x2eb6 <__vector_29+0xc44>
    2eb4:	44 ca       	rjmp	.-2936   	; 0x233e <__vector_29+0xcc>
							PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
    2eb6:	20 91 05 01 	lds	r18, 0x0105
    2eba:	40 51       	subi	r20, 0x10	; 16
    2ebc:	50 40       	sbci	r21, 0x00	; 0
    2ebe:	55 95       	asr	r21
    2ec0:	47 95       	ror	r20
    2ec2:	81 e0       	ldi	r24, 0x01	; 1
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	02 c0       	rjmp	.+4      	; 0x2ecc <__vector_29+0xc5a>
    2ec8:	88 0f       	add	r24, r24
    2eca:	99 1f       	adc	r25, r25
    2ecc:	4a 95       	dec	r20
    2ece:	e2 f7       	brpl	.-8      	; 0x2ec8 <__vector_29+0xc56>
    2ed0:	80 95       	com	r24
    2ed2:	82 23       	and	r24, r18
    2ed4:	80 93 05 01 	sts	0x0105, r24
    2ed8:	32 ca       	rjmp	.-2972   	; 0x233e <__vector_29+0xcc>
					irCommMinSensorValueCurr = irCommMinSensorValueAdc;
					irCommMinSensorValueAdc = irCommTempPointer;
					memset(irCommMaxSensorValueAdc, 0x00, 16);
					memset(irCommMinSensorValueAdc, 0xFF, 16);
					if(irCommState == IRCOMM_RX_IDLE_STATE) {
						irCommState = IRCOMM_RX_MAX_SENSOR_STATE;
    2eda:	82 e0       	ldi	r24, 0x02	; 2
    2edc:	80 93 f5 04 	sts	0x04F5, r24
						irCommRxBitSkipped = 0;
    2ee0:	10 92 3b 05 	sts	0x053B, r1
    2ee4:	b5 cf       	rjmp	.-150    	; 0x2e50 <__vector_29+0xbde>

00002ee6 <initMotors>:

#include "motors.h"

void initMotors() {
    2ee6:	0f 93       	push	r16
    2ee8:	1f 93       	push	r17
    2eea:	cf 93       	push	r28
    2eec:	df 93       	push	r29
	// Using 10-bit resolution (waveform generation mode 7) we have a period of: 8000000/1024 = 7812.5 Hz
	// We need to apply a prescaler to the timer in such a way to get the desired period:
	// 7812.5/100 = 78.125 => ideal prescaler, the nearest one is 1/64 and we get a period of:
	// 8000000/64/1024 = 122 Hz

	TCCR3A = 0;
    2eee:	e0 e9       	ldi	r30, 0x90	; 144
    2ef0:	f0 e0       	ldi	r31, 0x00	; 0
    2ef2:	10 82       	st	Z, r1
	TCCR3B = 0;
    2ef4:	a1 e9       	ldi	r26, 0x91	; 145
    2ef6:	b0 e0       	ldi	r27, 0x00	; 0
    2ef8:	1c 92       	st	X, r1
	TIMSK3 = 0;
    2efa:	21 e7       	ldi	r18, 0x71	; 113
    2efc:	30 e0       	ldi	r19, 0x00	; 0
    2efe:	e9 01       	movw	r28, r18
    2f00:	18 82       	st	Y, r1
	TCCR4A = 0;
    2f02:	40 ea       	ldi	r20, 0xA0	; 160
    2f04:	50 e0       	ldi	r21, 0x00	; 0
    2f06:	ea 01       	movw	r28, r20
    2f08:	18 82       	st	Y, r1
	TCCR4B = 0;
    2f0a:	61 ea       	ldi	r22, 0xA1	; 161
    2f0c:	70 e0       	ldi	r23, 0x00	; 0
    2f0e:	eb 01       	movw	r28, r22
    2f10:	18 82       	st	Y, r1
	TIMSK4 = 0;
    2f12:	02 e7       	ldi	r16, 0x72	; 114
    2f14:	10 e0       	ldi	r17, 0x00	; 0
    2f16:	e8 01       	movw	r28, r16
    2f18:	18 82       	st	Y, r1

	TCCR3A |= (1 << COM3A1) | (1 << WGM31) | (1 << WGM30); 	// enable OCA; clear on match, set at bottom
    2f1a:	80 81       	ld	r24, Z
    2f1c:	83 68       	ori	r24, 0x83	; 131
    2f1e:	80 83       	st	Z, r24
	TCCR3A |= (1 << WGM31) | (1 << WGM30);
    2f20:	80 81       	ld	r24, Z
    2f22:	83 60       	ori	r24, 0x03	; 3
    2f24:	80 83       	st	Z, r24
	TCCR3B |= (1 << WGM32) | (1 << CS31) | (1 << CS30);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    2f26:	8c 91       	ld	r24, X
    2f28:	8b 60       	ori	r24, 0x0B	; 11
    2f2a:	8c 93       	st	X, r24
	// the values for motors goes from 0 (stopped) to 1023 (max power)
	OCR3A = pwm_right;
    2f2c:	80 91 11 03 	lds	r24, 0x0311
    2f30:	90 91 12 03 	lds	r25, 0x0312
    2f34:	90 93 99 00 	sts	0x0099, r25
    2f38:	80 93 98 00 	sts	0x0098, r24
	OCR3B = 0;
    2f3c:	10 92 9b 00 	sts	0x009B, r1
    2f40:	10 92 9a 00 	sts	0x009A, r1
	TIMSK3 |= (1 << TOIE3);		// Enable timer overflow interrupt
    2f44:	d9 01       	movw	r26, r18
    2f46:	8c 91       	ld	r24, X
    2f48:	81 60       	ori	r24, 0x01	; 1
    2f4a:	8c 93       	st	X, r24

	// stop right motor
	TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    2f4c:	80 81       	ld	r24, Z
    2f4e:	8f 75       	andi	r24, 0x5F	; 95
    2f50:	80 83       	st	Z, r24
	PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    2f52:	8e b1       	in	r24, 0x0e	; 14
    2f54:	87 7e       	andi	r24, 0xE7	; 231
    2f56:	8e b9       	out	0x0e, r24	; 14

	// Motor left timer4/pwm
	// same configuration as timer3
	TCCR4A |= (1 << COM4A1) | (1 << WGM41) | (1 << WGM40); 	// enable OCA; clear on match, set at bottom
    2f58:	ea 01       	movw	r28, r20
    2f5a:	88 81       	ld	r24, Y
    2f5c:	83 68       	ori	r24, 0x83	; 131
    2f5e:	88 83       	st	Y, r24
	TCCR4B |= (1 << WGM42) | (1 << CS41) | (1 << CS40);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    2f60:	fb 01       	movw	r30, r22
    2f62:	80 81       	ld	r24, Z
    2f64:	8b 60       	ori	r24, 0x0B	; 11
    2f66:	80 83       	st	Z, r24
	// the values for motors goes from 0 (stopped) to 1024 (max power)
	OCR4A = pwm_left;
    2f68:	80 91 13 03 	lds	r24, 0x0313
    2f6c:	90 91 14 03 	lds	r25, 0x0314
    2f70:	90 93 a9 00 	sts	0x00A9, r25
    2f74:	80 93 a8 00 	sts	0x00A8, r24
	OCR4B = 0;
    2f78:	10 92 ab 00 	sts	0x00AB, r1
    2f7c:	10 92 aa 00 	sts	0x00AA, r1
	TIMSK4 |= (1 << TOIE4);		// Enable timer overflow interrupt
    2f80:	d8 01       	movw	r26, r16
    2f82:	8c 91       	ld	r24, X
    2f84:	81 60       	ori	r24, 0x01	; 1
    2f86:	8c 93       	st	X, r24
	// stop left motor
	TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    2f88:	88 81       	ld	r24, Y
    2f8a:	8f 75       	andi	r24, 0x5F	; 95
    2f8c:	88 83       	st	Y, r24
	PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    2f8e:	e2 e0       	ldi	r30, 0x02	; 2
    2f90:	f1 e0       	ldi	r31, 0x01	; 1
    2f92:	80 81       	ld	r24, Z
    2f94:	87 7e       	andi	r24, 0xE7	; 231
    2f96:	80 83       	st	Z, r24


}
    2f98:	df 91       	pop	r29
    2f9a:	cf 91       	pop	r28
    2f9c:	1f 91       	pop	r17
    2f9e:	0f 91       	pop	r16
    2fa0:	08 95       	ret

00002fa2 <cast_speed>:

signed int cast_speed(signed int vel) {
    2fa2:	2e ef       	ldi	r18, 0xFE	; 254
    2fa4:	81 30       	cpi	r24, 0x01	; 1
    2fa6:	92 07       	cpc	r25, r18
    2fa8:	14 f4       	brge	.+4      	; 0x2fae <cast_speed+0xc>
    2faa:	81 e0       	ldi	r24, 0x01	; 1
    2fac:	9e ef       	ldi	r25, 0xFE	; 254
    2fae:	9c 01       	movw	r18, r24
    2fb0:	82 e0       	ldi	r24, 0x02	; 2
    2fb2:	20 30       	cpi	r18, 0x00	; 0
    2fb4:	38 07       	cpc	r19, r24
    2fb6:	14 f0       	brlt	.+4      	; 0x2fbc <cast_speed+0x1a>
    2fb8:	2f ef       	ldi	r18, 0xFF	; 255
    2fba:	31 e0       	ldi	r19, 0x01	; 1
        vel = MAX_MOTORS_PWM/2;
    } else if(vel < -(MAX_MOTORS_PWM/2)) {
        vel = -(MAX_MOTORS_PWM/2);
    }
    return vel;
}
    2fbc:	c9 01       	movw	r24, r18
    2fbe:	08 95       	ret

00002fc0 <setLeftSpeed>:
}

// vel expressed in 1/5 of mm/s
void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    2fc0:	28 2f       	mov	r18, r24
    2fc2:	33 27       	eor	r19, r19
    2fc4:	27 fd       	sbrc	r18, 7
    2fc6:	30 95       	com	r19
    2fc8:	37 fd       	sbrc	r19, 7
    2fca:	29 c0       	rjmp	.+82     	; 0x301e <setLeftSpeed+0x5e>
    2fcc:	30 93 2e 03 	sts	0x032E, r19
    2fd0:	20 93 2d 03 	sts	0x032D, r18

    if(vel >= 0) {
    2fd4:	87 fd       	sbrc	r24, 7
    2fd6:	1a c0       	rjmp	.+52     	; 0x300c <setLeftSpeed+0x4c>
        pwm_left_desired = speedl;
    2fd8:	30 93 18 03 	sts	0x0318, r19
    2fdc:	20 93 17 03 	sts	0x0317, r18
    2fe0:	c9 01       	movw	r24, r18
    } else {
        pwm_left_desired = -(speedl);
    }

	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    2fe2:	22 e0       	ldi	r18, 0x02	; 2
    2fe4:	80 30       	cpi	r24, 0x00	; 0
    2fe6:	92 07       	cpc	r25, r18
    2fe8:	3c f0       	brlt	.+14     	; 0x2ff8 <setLeftSpeed+0x38>
    2fea:	8f ef       	ldi	r24, 0xFF	; 255
    2fec:	91 e0       	ldi	r25, 0x01	; 1
    2fee:	90 93 18 03 	sts	0x0318, r25
    2ff2:	80 93 17 03 	sts	0x0317, r24
    2ff6:	08 95       	ret
	if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    2ff8:	81 50       	subi	r24, 0x01	; 1
    2ffa:	9e 4f       	sbci	r25, 0xFE	; 254
    2ffc:	34 f4       	brge	.+12     	; 0x300a <setLeftSpeed+0x4a>
    2ffe:	81 e0       	ldi	r24, 0x01	; 1
    3000:	9e ef       	ldi	r25, 0xFE	; 254
    3002:	90 93 18 03 	sts	0x0318, r25
    3006:	80 93 17 03 	sts	0x0317, r24
    300a:	08 95       	ret
	speedl = abs(vel);

    if(vel >= 0) {
        pwm_left_desired = speedl;
    } else {
        pwm_left_desired = -(speedl);
    300c:	88 27       	eor	r24, r24
    300e:	99 27       	eor	r25, r25
    3010:	82 1b       	sub	r24, r18
    3012:	93 0b       	sbc	r25, r19
    3014:	90 93 18 03 	sts	0x0318, r25
    3018:	80 93 17 03 	sts	0x0317, r24
    301c:	e2 cf       	rjmp	.-60     	; 0x2fe2 <setLeftSpeed+0x22>
}

// vel expressed in 1/5 of mm/s
void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    301e:	30 95       	com	r19
    3020:	21 95       	neg	r18
    3022:	3f 4f       	sbci	r19, 0xFF	; 255
    3024:	d3 cf       	rjmp	.-90     	; 0x2fcc <setLeftSpeed+0xc>

00003026 <setRightSpeed>:

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    3026:	28 2f       	mov	r18, r24
    3028:	33 27       	eor	r19, r19
    302a:	27 fd       	sbrc	r18, 7
    302c:	30 95       	com	r19
    302e:	37 fd       	sbrc	r19, 7
    3030:	29 c0       	rjmp	.+82     	; 0x3084 <setRightSpeed+0x5e>
    3032:	30 93 30 03 	sts	0x0330, r19
    3036:	20 93 2f 03 	sts	0x032F, r18

    if(vel >= 0) {
    303a:	87 fd       	sbrc	r24, 7
    303c:	1a c0       	rjmp	.+52     	; 0x3072 <setRightSpeed+0x4c>
        pwm_right_desired = speedr;
    303e:	30 93 16 03 	sts	0x0316, r19
    3042:	20 93 15 03 	sts	0x0315, r18
    3046:	c9 01       	movw	r24, r18
    } else {
        pwm_right_desired = -(speedr);
    }

	if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    3048:	22 e0       	ldi	r18, 0x02	; 2
    304a:	80 30       	cpi	r24, 0x00	; 0
    304c:	92 07       	cpc	r25, r18
    304e:	3c f0       	brlt	.+14     	; 0x305e <setRightSpeed+0x38>
    3050:	8f ef       	ldi	r24, 0xFF	; 255
    3052:	91 e0       	ldi	r25, 0x01	; 1
    3054:	90 93 16 03 	sts	0x0316, r25
    3058:	80 93 15 03 	sts	0x0315, r24
    305c:	08 95       	ret
	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    305e:	81 50       	subi	r24, 0x01	; 1
    3060:	9e 4f       	sbci	r25, 0xFE	; 254
    3062:	34 f4       	brge	.+12     	; 0x3070 <setRightSpeed+0x4a>
    3064:	81 e0       	ldi	r24, 0x01	; 1
    3066:	9e ef       	ldi	r25, 0xFE	; 254
    3068:	90 93 16 03 	sts	0x0316, r25
    306c:	80 93 15 03 	sts	0x0315, r24
    3070:	08 95       	ret
	speedr = abs(vel);

    if(vel >= 0) {
        pwm_right_desired = speedr;
    } else {
        pwm_right_desired = -(speedr);
    3072:	88 27       	eor	r24, r24
    3074:	99 27       	eor	r25, r25
    3076:	82 1b       	sub	r24, r18
    3078:	93 0b       	sbc	r25, r19
    307a:	90 93 16 03 	sts	0x0316, r25
    307e:	80 93 15 03 	sts	0x0315, r24
    3082:	e2 cf       	rjmp	.-60     	; 0x3048 <setRightSpeed+0x22>

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    3084:	30 95       	com	r19
    3086:	21 95       	neg	r18
    3088:	3f 4f       	sbci	r19, 0xFF	; 255
    308a:	d3 cf       	rjmp	.-90     	; 0x3032 <setRightSpeed+0xc>

0000308c <updateOdomData>:
}


void updateOdomData() {

    if(calibWheel == LEFT_WHEEL_FW_SC) {
    308c:	80 91 81 05 	lds	r24, 0x0581
    3090:	88 23       	and	r24, r24
    3092:	09 f0       	breq	.+2      	; 0x3096 <updateOdomData+0xa>
    3094:	3f c0       	rjmp	.+126    	; 0x3114 <updateOdomData+0x88>
        if(calibVelIndex>1) {
    3096:	e0 91 e9 08 	lds	r30, 0x08E9
    309a:	e2 30       	cpi	r30, 0x02	; 2
    309c:	08 f4       	brcc	.+2      	; 0x30a0 <updateOdomData+0x14>
    309e:	77 c0       	rjmp	.+238    	; 0x318e <updateOdomData+0x102>
            if(calibration[calibVelIndex-2][1] >= tempVel) {  // check that we have always increasing values of speed, otherwise there
    30a0:	4e 2f       	mov	r20, r30
    30a2:	50 e0       	ldi	r21, 0x00	; 0
    30a4:	fa 01       	movw	r30, r20
    30a6:	ee 0f       	add	r30, r30
    30a8:	ff 1f       	adc	r31, r31
    30aa:	ee 0f       	add	r30, r30
    30ac:	ff 1f       	adc	r31, r31
    30ae:	ee 0f       	add	r30, r30
    30b0:	ff 1f       	adc	r31, r31
    30b2:	ee 0f       	add	r30, r30
    30b4:	ff 1f       	adc	r31, r31
    30b6:	ee 50       	subi	r30, 0x0E	; 14
    30b8:	f7 4f       	sbci	r31, 0xF7	; 247
    30ba:	80 81       	ld	r24, Z
    30bc:	91 81       	ldd	r25, Z+1	; 0x01
    30be:	20 91 a4 0b 	lds	r18, 0x0BA4
    30c2:	30 91 a5 0b 	lds	r19, 0x0BA5
    30c6:	82 17       	cp	r24, r18
    30c8:	93 07       	cpc	r25, r19
    30ca:	34 f0       	brlt	.+12     	; 0x30d8 <updateOdomData+0x4c>
                tempVel = calibration[calibVelIndex-2][1]+1; // will be problems when getting data from the lookup table
    30cc:	01 96       	adiw	r24, 0x01	; 1
    30ce:	90 93 a5 0b 	sts	0x0BA5, r25
    30d2:	80 93 a4 0b 	sts	0x0BA4, r24
    30d6:	9c 01       	movw	r18, r24
            }
        }
        calibration[calibVelIndex-1][0] = avgLeftSpeed;
    30d8:	fa 01       	movw	r30, r20
    30da:	31 97       	sbiw	r30, 0x01	; 1
    30dc:	df 01       	movw	r26, r30
    30de:	a2 95       	swap	r26
    30e0:	b2 95       	swap	r27
    30e2:	b0 7f       	andi	r27, 0xF0	; 240
    30e4:	ba 27       	eor	r27, r26
    30e6:	a0 7f       	andi	r26, 0xF0	; 240
    30e8:	ba 27       	eor	r27, r26
    30ea:	a0 5f       	subi	r26, 0xF0	; 240
    30ec:	b6 4f       	sbci	r27, 0xF6	; 246
    30ee:	80 91 dc 04 	lds	r24, 0x04DC
    30f2:	90 91 dd 04 	lds	r25, 0x04DD
    30f6:	8d 93       	st	X+, r24
    30f8:	9c 93       	st	X, r25
        calibration[calibVelIndex-1][1] = tempVel;
    30fa:	ee 0f       	add	r30, r30
    30fc:	ff 1f       	adc	r31, r31
    30fe:	ee 0f       	add	r30, r30
    3100:	ff 1f       	adc	r31, r31
    3102:	ee 0f       	add	r30, r30
    3104:	ff 1f       	adc	r31, r31
    3106:	ee 0f       	add	r30, r30
    3108:	ff 1f       	adc	r31, r31
    310a:	ee 5e       	subi	r30, 0xEE	; 238
    310c:	f6 4f       	sbci	r31, 0xF6	; 246
    310e:	31 83       	std	Z+1, r19	; 0x01
    3110:	20 83       	st	Z, r18
    3112:	08 95       	ret
    } else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    3114:	81 30       	cpi	r24, 0x01	; 1
    3116:	31 f0       	breq	.+12     	; 0x3124 <updateOdomData+0x98>
                tempVel = calibration[calibVelIndex-2][3]+1;
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
        calibration[calibVelIndex-1][3] = tempVel;
    } else if(calibWheel == LEFT_WHEEL_BW_SC) {
    3118:	82 30       	cpi	r24, 0x02	; 2
    311a:	09 f4       	brne	.+2      	; 0x311e <updateOdomData+0x92>
    311c:	70 c0       	rjmp	.+224    	; 0x31fe <updateOdomData+0x172>
                tempVel = calibration[calibVelIndex-2][5]+1;
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
        calibration[calibVelIndex-1][5] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    311e:	83 30       	cpi	r24, 0x03	; 3
    3120:	e9 f1       	breq	.+122    	; 0x319c <updateOdomData+0x110>
    3122:	08 95       	ret
            }
        }
        calibration[calibVelIndex-1][0] = avgLeftSpeed;
        calibration[calibVelIndex-1][1] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_FW_SC) {
        if(calibVelIndex>1) {
    3124:	e0 91 e9 08 	lds	r30, 0x08E9
    3128:	e2 30       	cpi	r30, 0x02	; 2
    312a:	08 f4       	brcc	.+2      	; 0x312e <updateOdomData+0xa2>
    312c:	9e c0       	rjmp	.+316    	; 0x326a <updateOdomData+0x1de>
            if(calibration[calibVelIndex-2][3] >= tempVel) {
    312e:	4e 2f       	mov	r20, r30
    3130:	50 e0       	ldi	r21, 0x00	; 0
    3132:	fa 01       	movw	r30, r20
    3134:	e2 95       	swap	r30
    3136:	f2 95       	swap	r31
    3138:	f0 7f       	andi	r31, 0xF0	; 240
    313a:	fe 27       	eor	r31, r30
    313c:	e0 7f       	andi	r30, 0xF0	; 240
    313e:	fe 27       	eor	r31, r30
    3140:	e0 51       	subi	r30, 0x10	; 16
    3142:	f7 4f       	sbci	r31, 0xF7	; 247
    3144:	86 81       	ldd	r24, Z+6	; 0x06
    3146:	97 81       	ldd	r25, Z+7	; 0x07
    3148:	20 91 a4 0b 	lds	r18, 0x0BA4
    314c:	30 91 a5 0b 	lds	r19, 0x0BA5
    3150:	82 17       	cp	r24, r18
    3152:	93 07       	cpc	r25, r19
    3154:	34 f0       	brlt	.+12     	; 0x3162 <updateOdomData+0xd6>
                tempVel = calibration[calibVelIndex-2][3]+1;
    3156:	01 96       	adiw	r24, 0x01	; 1
    3158:	90 93 a5 0b 	sts	0x0BA5, r25
    315c:	80 93 a4 0b 	sts	0x0BA4, r24
    3160:	9c 01       	movw	r18, r24
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
    3162:	fa 01       	movw	r30, r20
    3164:	31 97       	sbiw	r30, 0x01	; 1
    3166:	e2 95       	swap	r30
    3168:	f2 95       	swap	r31
    316a:	f0 7f       	andi	r31, 0xF0	; 240
    316c:	fe 27       	eor	r31, r30
    316e:	e0 7f       	andi	r30, 0xF0	; 240
    3170:	fe 27       	eor	r31, r30
    3172:	df 01       	movw	r26, r30
    3174:	ac 5e       	subi	r26, 0xEC	; 236
    3176:	b6 4f       	sbci	r27, 0xF6	; 246
    3178:	80 91 de 04 	lds	r24, 0x04DE
    317c:	90 91 df 04 	lds	r25, 0x04DF
    3180:	8d 93       	st	X+, r24
    3182:	9c 93       	st	X, r25
        calibration[calibVelIndex-1][3] = tempVel;
    3184:	e0 5f       	subi	r30, 0xF0	; 240
    3186:	f6 4f       	sbci	r31, 0xF6	; 246
    3188:	37 83       	std	Z+7, r19	; 0x07
    318a:	26 83       	std	Z+6, r18	; 0x06
    318c:	08 95       	ret


void updateOdomData() {

    if(calibWheel == LEFT_WHEEL_FW_SC) {
        if(calibVelIndex>1) {
    318e:	4e 2f       	mov	r20, r30
    3190:	50 e0       	ldi	r21, 0x00	; 0
    3192:	20 91 a4 0b 	lds	r18, 0x0BA4
    3196:	30 91 a5 0b 	lds	r19, 0x0BA5
    319a:	9e cf       	rjmp	.-196    	; 0x30d8 <updateOdomData+0x4c>
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
        calibration[calibVelIndex-1][5] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    319c:	e0 91 e9 08 	lds	r30, 0x08E9
    31a0:	e2 30       	cpi	r30, 0x02	; 2
    31a2:	08 f4       	brcc	.+2      	; 0x31a6 <updateOdomData+0x11a>
    31a4:	70 c0       	rjmp	.+224    	; 0x3286 <updateOdomData+0x1fa>
            if(calibration[calibVelIndex-2][7] >= tempVel) {
    31a6:	4e 2f       	mov	r20, r30
    31a8:	50 e0       	ldi	r21, 0x00	; 0
    31aa:	fa 01       	movw	r30, r20
    31ac:	e2 95       	swap	r30
    31ae:	f2 95       	swap	r31
    31b0:	f0 7f       	andi	r31, 0xF0	; 240
    31b2:	fe 27       	eor	r31, r30
    31b4:	e0 7f       	andi	r30, 0xF0	; 240
    31b6:	fe 27       	eor	r31, r30
    31b8:	e0 51       	subi	r30, 0x10	; 16
    31ba:	f7 4f       	sbci	r31, 0xF7	; 247
    31bc:	86 85       	ldd	r24, Z+14	; 0x0e
    31be:	97 85       	ldd	r25, Z+15	; 0x0f
    31c0:	20 91 a4 0b 	lds	r18, 0x0BA4
    31c4:	30 91 a5 0b 	lds	r19, 0x0BA5
    31c8:	82 17       	cp	r24, r18
    31ca:	93 07       	cpc	r25, r19
    31cc:	34 f0       	brlt	.+12     	; 0x31da <updateOdomData+0x14e>
                tempVel = calibration[calibVelIndex-2][7]+1;
    31ce:	01 96       	adiw	r24, 0x01	; 1
    31d0:	90 93 a5 0b 	sts	0x0BA5, r25
    31d4:	80 93 a4 0b 	sts	0x0BA4, r24
    31d8:	9c 01       	movw	r18, r24
            }
        }
		calibration[calibVelIndex-1][6] = avgRightSpeed;
    31da:	fa 01       	movw	r30, r20
    31dc:	e2 95       	swap	r30
    31de:	f2 95       	swap	r31
    31e0:	f0 7f       	andi	r31, 0xF0	; 240
    31e2:	fe 27       	eor	r31, r30
    31e4:	e0 7f       	andi	r30, 0xF0	; 240
    31e6:	fe 27       	eor	r31, r30
    31e8:	e0 50       	subi	r30, 0x00	; 0
    31ea:	f7 4f       	sbci	r31, 0xF7	; 247
    31ec:	80 91 de 04 	lds	r24, 0x04DE
    31f0:	90 91 df 04 	lds	r25, 0x04DF
    31f4:	95 87       	std	Z+13, r25	; 0x0d
    31f6:	84 87       	std	Z+12, r24	; 0x0c
        calibration[calibVelIndex-1][7] = tempVel;
    31f8:	37 87       	std	Z+15, r19	; 0x0f
    31fa:	26 87       	std	Z+14, r18	; 0x0e
    31fc:	08 95       	ret
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
        calibration[calibVelIndex-1][3] = tempVel;
    } else if(calibWheel == LEFT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    31fe:	e0 91 e9 08 	lds	r30, 0x08E9
    3202:	e2 30       	cpi	r30, 0x02	; 2
    3204:	c8 f1       	brcs	.+114    	; 0x3278 <updateOdomData+0x1ec>
            if(calibration[calibVelIndex-2][5] >= tempVel) {
    3206:	4e 2f       	mov	r20, r30
    3208:	50 e0       	ldi	r21, 0x00	; 0
    320a:	fa 01       	movw	r30, r20
    320c:	e2 95       	swap	r30
    320e:	f2 95       	swap	r31
    3210:	f0 7f       	andi	r31, 0xF0	; 240
    3212:	fe 27       	eor	r31, r30
    3214:	e0 7f       	andi	r30, 0xF0	; 240
    3216:	fe 27       	eor	r31, r30
    3218:	e0 51       	subi	r30, 0x10	; 16
    321a:	f7 4f       	sbci	r31, 0xF7	; 247
    321c:	82 85       	ldd	r24, Z+10	; 0x0a
    321e:	93 85       	ldd	r25, Z+11	; 0x0b
    3220:	20 91 a4 0b 	lds	r18, 0x0BA4
    3224:	30 91 a5 0b 	lds	r19, 0x0BA5
    3228:	82 17       	cp	r24, r18
    322a:	93 07       	cpc	r25, r19
    322c:	34 f0       	brlt	.+12     	; 0x323a <updateOdomData+0x1ae>
                tempVel = calibration[calibVelIndex-2][5]+1;
    322e:	01 96       	adiw	r24, 0x01	; 1
    3230:	90 93 a5 0b 	sts	0x0BA5, r25
    3234:	80 93 a4 0b 	sts	0x0BA4, r24
    3238:	9c 01       	movw	r18, r24
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
    323a:	fa 01       	movw	r30, r20
    323c:	31 97       	sbiw	r30, 0x01	; 1
    323e:	ee 0f       	add	r30, r30
    3240:	ff 1f       	adc	r31, r31
    3242:	ee 0f       	add	r30, r30
    3244:	ff 1f       	adc	r31, r31
    3246:	ee 0f       	add	r30, r30
    3248:	ff 1f       	adc	r31, r31
    324a:	ee 0f       	add	r30, r30
    324c:	ff 1f       	adc	r31, r31
    324e:	df 01       	movw	r26, r30
    3250:	a8 5e       	subi	r26, 0xE8	; 232
    3252:	b6 4f       	sbci	r27, 0xF6	; 246
    3254:	80 91 dc 04 	lds	r24, 0x04DC
    3258:	90 91 dd 04 	lds	r25, 0x04DD
    325c:	8d 93       	st	X+, r24
    325e:	9c 93       	st	X, r25
        calibration[calibVelIndex-1][5] = tempVel;
    3260:	e0 5f       	subi	r30, 0xF0	; 240
    3262:	f6 4f       	sbci	r31, 0xF6	; 246
    3264:	33 87       	std	Z+11, r19	; 0x0b
    3266:	22 87       	std	Z+10, r18	; 0x0a
    3268:	08 95       	ret
            }
        }
        calibration[calibVelIndex-1][0] = avgLeftSpeed;
        calibration[calibVelIndex-1][1] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_FW_SC) {
        if(calibVelIndex>1) {
    326a:	4e 2f       	mov	r20, r30
    326c:	50 e0       	ldi	r21, 0x00	; 0
    326e:	20 91 a4 0b 	lds	r18, 0x0BA4
    3272:	30 91 a5 0b 	lds	r19, 0x0BA5
    3276:	75 cf       	rjmp	.-278    	; 0x3162 <updateOdomData+0xd6>
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
        calibration[calibVelIndex-1][3] = tempVel;
    } else if(calibWheel == LEFT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    3278:	4e 2f       	mov	r20, r30
    327a:	50 e0       	ldi	r21, 0x00	; 0
    327c:	20 91 a4 0b 	lds	r18, 0x0BA4
    3280:	30 91 a5 0b 	lds	r19, 0x0BA5
    3284:	da cf       	rjmp	.-76     	; 0x323a <updateOdomData+0x1ae>
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
        calibration[calibVelIndex-1][5] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    3286:	4e 2f       	mov	r20, r30
    3288:	50 e0       	ldi	r21, 0x00	; 0
    328a:	20 91 a4 0b 	lds	r18, 0x0BA4
    328e:	30 91 a5 0b 	lds	r19, 0x0BA5
    3292:	a3 cf       	rjmp	.-186    	; 0x31da <updateOdomData+0x14e>

00003294 <getInputFromSpeed>:

}

// extract data to pass to speed controller given a desired speed in mm/s
// mode => return a measured speed 0..1023
signed int getInputFromSpeed(signed int s, unsigned char mode) {
    3294:	8f 92       	push	r8
    3296:	9f 92       	push	r9
    3298:	af 92       	push	r10
    329a:	bf 92       	push	r11
    329c:	cf 92       	push	r12
    329e:	df 92       	push	r13
    32a0:	ef 92       	push	r14
    32a2:	ff 92       	push	r15
    32a4:	0f 93       	push	r16
    32a6:	1f 93       	push	r17
    32a8:	cf 93       	push	r28
    32aa:	df 93       	push	r29
    32ac:	46 2f       	mov	r20, r22
    
    int i = 0;
    signed int currVel = s*BYTE_TO_MM_S;
    32ae:	9c 01       	movw	r18, r24
    32b0:	22 0f       	add	r18, r18
    32b2:	33 1f       	adc	r19, r19
    32b4:	22 0f       	add	r18, r18
    32b6:	33 1f       	adc	r19, r19
    32b8:	28 0f       	add	r18, r24
    32ba:	39 1f       	adc	r19, r25
    signed int temp = 0;

    if(currVel == 0) {
    32bc:	21 15       	cp	r18, r1
    32be:	31 05       	cpc	r19, r1
    32c0:	09 f4       	brne	.+2      	; 0x32c4 <getInputFromSpeed+0x30>
    32c2:	92 c0       	rjmp	.+292    	; 0x33e8 <getInputFromSpeed+0x154>
        return 0;
    }

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
    32c4:	86 2f       	mov	r24, r22
    32c6:	82 50       	subi	r24, 0x02	; 2
    32c8:	82 30       	cpi	r24, 0x02	; 2
    32ca:	08 f4       	brcc	.+2      	; 0x32ce <getInputFromSpeed+0x3a>
    32cc:	9d c0       	rjmp	.+314    	; 0x3408 <getInputFromSpeed+0x174>
    32ce:	44 23       	and	r20, r20
    32d0:	09 f0       	breq	.+2      	; 0x32d4 <getInputFromSpeed+0x40>
    32d2:	77 c0       	rjmp	.+238    	; 0x33c2 <getInputFromSpeed+0x12e>
        currVel = -currVel; // consider only positive values
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
    32d4:	60 91 12 09 	lds	r22, 0x0912
    32d8:	70 91 13 09 	lds	r23, 0x0913
    32dc:	62 17       	cp	r22, r18
    32de:	73 07       	cpc	r23, r19
    32e0:	0c f0       	brlt	.+2      	; 0x32e4 <getInputFromSpeed+0x50>
    32e2:	99 c0       	rjmp	.+306    	; 0x3416 <getInputFromSpeed+0x182>
    32e4:	80 91 22 09 	lds	r24, 0x0922
    32e8:	90 91 23 09 	lds	r25, 0x0923
    32ec:	82 17       	cp	r24, r18
    32ee:	93 07       	cpc	r25, r19
    32f0:	0c f0       	brlt	.+2      	; 0x32f4 <getInputFromSpeed+0x60>
    32f2:	1e c2       	rjmp	.+1084   	; 0x3730 <getInputFromSpeed+0x49c>
    32f4:	80 91 32 09 	lds	r24, 0x0932
    32f8:	90 91 33 09 	lds	r25, 0x0933
    32fc:	82 17       	cp	r24, r18
    32fe:	93 07       	cpc	r25, r19
    3300:	0c f0       	brlt	.+2      	; 0x3304 <getInputFromSpeed+0x70>
    3302:	66 c3       	rjmp	.+1740   	; 0x39d0 <getInputFromSpeed+0x73c>
    3304:	80 91 42 09 	lds	r24, 0x0942
    3308:	90 91 43 09 	lds	r25, 0x0943
    330c:	82 17       	cp	r24, r18
    330e:	93 07       	cpc	r25, r19
    3310:	0c f0       	brlt	.+2      	; 0x3314 <getInputFromSpeed+0x80>
    3312:	5b c3       	rjmp	.+1718   	; 0x39ca <getInputFromSpeed+0x736>
    3314:	80 91 52 09 	lds	r24, 0x0952
    3318:	90 91 53 09 	lds	r25, 0x0953
    331c:	82 17       	cp	r24, r18
    331e:	93 07       	cpc	r25, r19
    3320:	0c f0       	brlt	.+2      	; 0x3324 <getInputFromSpeed+0x90>
    3322:	59 c3       	rjmp	.+1714   	; 0x39d6 <getInputFromSpeed+0x742>
    3324:	80 91 62 09 	lds	r24, 0x0962
    3328:	90 91 63 09 	lds	r25, 0x0963
    332c:	82 17       	cp	r24, r18
    332e:	93 07       	cpc	r25, r19
    3330:	0c f0       	brlt	.+2      	; 0x3334 <getInputFromSpeed+0xa0>
    3332:	54 c3       	rjmp	.+1704   	; 0x39dc <getInputFromSpeed+0x748>
    3334:	80 91 72 09 	lds	r24, 0x0972
    3338:	90 91 73 09 	lds	r25, 0x0973
    333c:	82 17       	cp	r24, r18
    333e:	93 07       	cpc	r25, r19
    3340:	0c f0       	brlt	.+2      	; 0x3344 <getInputFromSpeed+0xb0>
    3342:	52 c3       	rjmp	.+1700   	; 0x39e8 <getInputFromSpeed+0x754>
    3344:	80 91 82 09 	lds	r24, 0x0982
    3348:	90 91 83 09 	lds	r25, 0x0983
    334c:	82 17       	cp	r24, r18
    334e:	93 07       	cpc	r25, r19
    3350:	0c f0       	brlt	.+2      	; 0x3354 <getInputFromSpeed+0xc0>
    3352:	47 c3       	rjmp	.+1678   	; 0x39e2 <getInputFromSpeed+0x74e>
    3354:	80 91 92 09 	lds	r24, 0x0992
    3358:	90 91 93 09 	lds	r25, 0x0993
    335c:	82 17       	cp	r24, r18
    335e:	93 07       	cpc	r25, r19
    3360:	0c f0       	brlt	.+2      	; 0x3364 <getInputFromSpeed+0xd0>
    3362:	45 c3       	rjmp	.+1674   	; 0x39ee <getInputFromSpeed+0x75a>
            temp = currVel*calibration[0][6]/calibration[0][7];
            temp = -temp;
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
    3364:	b9 01       	movw	r22, r18
    3366:	88 27       	eor	r24, r24
    3368:	77 fd       	sbrc	r23, 7
    336a:	80 95       	com	r24
    336c:	98 2f       	mov	r25, r24
    336e:	0e 94 e5 55 	call	0xabca	; 0xabca <__floatsisf>
    3372:	7b 01       	movw	r14, r22
    3374:	8c 01       	movw	r16, r24
    3376:	60 91 90 09 	lds	r22, 0x0990
    337a:	70 91 91 09 	lds	r23, 0x0991
    337e:	88 27       	eor	r24, r24
    3380:	77 fd       	sbrc	r23, 7
    3382:	80 95       	com	r24
    3384:	98 2f       	mov	r25, r24
    3386:	0e 94 e5 55 	call	0xabca	; 0xabca <__floatsisf>
    338a:	9b 01       	movw	r18, r22
    338c:	ac 01       	movw	r20, r24
    338e:	c8 01       	movw	r24, r16
    3390:	b7 01       	movw	r22, r14
    3392:	0e 94 fe 56 	call	0xadfc	; 0xadfc <__mulsf3>
    3396:	7b 01       	movw	r14, r22
    3398:	8c 01       	movw	r16, r24
    339a:	60 91 92 09 	lds	r22, 0x0992
    339e:	70 91 93 09 	lds	r23, 0x0993
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
    33a2:	88 27       	eor	r24, r24
    33a4:	77 fd       	sbrc	r23, 7
    33a6:	80 95       	com	r24
    33a8:	98 2f       	mov	r25, r24
    33aa:	0e 94 e5 55 	call	0xabca	; 0xabca <__floatsisf>
    33ae:	9b 01       	movw	r18, r22
    33b0:	ac 01       	movw	r20, r24
    33b2:	c8 01       	movw	r24, r16
    33b4:	b7 01       	movw	r22, r14
    33b6:	0e 94 4a 55 	call	0xaa94	; 0xaa94 <__divsf3>
    33ba:	0e 94 b2 55 	call	0xab64	; 0xab64 <__fixsfsi>
    33be:	9b 01       	movw	r18, r22
    33c0:	15 c0       	rjmp	.+42     	; 0x33ec <getInputFromSpeed+0x158>
    33c2:	43 30       	cpi	r20, 0x03	; 3
    33c4:	c1 f1       	breq	.+112    	; 0x3436 <getInputFromSpeed+0x1a2>
    33c6:	42 30       	cpi	r20, 0x02	; 2
    33c8:	09 f4       	brne	.+2      	; 0x33cc <getInputFromSpeed+0x138>
    33ca:	24 c1       	rjmp	.+584    	; 0x3614 <getInputFromSpeed+0x380>
    33cc:	41 30       	cpi	r20, 0x01	; 1
    33ce:	09 f4       	brne	.+2      	; 0x33d2 <getInputFromSpeed+0x13e>
    33d0:	ac c0       	rjmp	.+344    	; 0x352a <getInputFromSpeed+0x296>
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][6]/calibration[0][7];
            temp = -temp;
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
    33d2:	44 23       	and	r20, r20
    33d4:	39 f2       	breq	.-114    	; 0x3364 <getInputFromSpeed+0xd0>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
    33d6:	41 30       	cpi	r20, 0x01	; 1
    33d8:	09 f4       	brne	.+2      	; 0x33dc <getInputFromSpeed+0x148>
    33da:	ef c0       	rjmp	.+478    	; 0x35ba <getInputFromSpeed+0x326>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
        } else if(mode==LEFT_WHEEL_BW_SC) {
    33dc:	42 30       	cpi	r20, 0x02	; 2
    33de:	09 f4       	brne	.+2      	; 0x33e2 <getInputFromSpeed+0x14e>
    33e0:	61 c1       	rjmp	.+706    	; 0x36a4 <getInputFromSpeed+0x410>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][4]/(float)calibration[CALIBRATION_SAMPLES-1][5]);
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
    33e2:	43 30       	cpi	r20, 0x03	; 3
    33e4:	09 f4       	brne	.+2      	; 0x33e8 <getInputFromSpeed+0x154>
    33e6:	6f c0       	rjmp	.+222    	; 0x34c6 <getInputFromSpeed+0x232>
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = calibration[i-1][4] + (signed int)(((float)(currVel-calibration[i-1][5])*(float)(calibration[i][4]-calibration[i-1][4]))/(float)(calibration[i][5]-calibration[i-1][5]));
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = calibration[i-1][6] + (signed int)(((float)(currVel-calibration[i-1][7])*(float)(calibration[i][6]-calibration[i-1][6]))/(float)(calibration[i][7]-calibration[i-1][7]));
            temp = -temp;
    33e8:	20 e0       	ldi	r18, 0x00	; 0
    33ea:	30 e0       	ldi	r19, 0x00	; 0
        }        
    }
    
    return temp;
}
    33ec:	c9 01       	movw	r24, r18
    33ee:	df 91       	pop	r29
    33f0:	cf 91       	pop	r28
    33f2:	1f 91       	pop	r17
    33f4:	0f 91       	pop	r16
    33f6:	ff 90       	pop	r15
    33f8:	ef 90       	pop	r14
    33fa:	df 90       	pop	r13
    33fc:	cf 90       	pop	r12
    33fe:	bf 90       	pop	r11
    3400:	af 90       	pop	r10
    3402:	9f 90       	pop	r9
    3404:	8f 90       	pop	r8
    3406:	08 95       	ret
    if(currVel == 0) {
        return 0;
    }

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
        currVel = -currVel; // consider only positive values
    3408:	30 95       	com	r19
    340a:	21 95       	neg	r18
    340c:	3f 4f       	sbci	r19, 0xFF	; 255
    340e:	44 23       	and	r20, r20
    3410:	09 f4       	brne	.+2      	; 0x3414 <getInputFromSpeed+0x180>
    3412:	60 cf       	rjmp	.-320    	; 0x32d4 <getInputFromSpeed+0x40>
    3414:	d6 cf       	rjmp	.-84     	; 0x33c2 <getInputFromSpeed+0x12e>
        } 
    }

    if(i==0) {  // the velocity is lower than first saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][0])/calibration[0][1];
    3416:	80 91 10 09 	lds	r24, 0x0910
    341a:	90 91 11 09 	lds	r25, 0x0911
    341e:	ac 01       	movw	r20, r24
    3420:	24 9f       	mul	r18, r20
    3422:	c0 01       	movw	r24, r0
    3424:	25 9f       	mul	r18, r21
    3426:	90 0d       	add	r25, r0
    3428:	34 9f       	mul	r19, r20
    342a:	90 0d       	add	r25, r0
    342c:	11 24       	eor	r1, r1
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][2])/calibration[0][3];
    342e:	0e 94 bc 57 	call	0xaf78	; 0xaf78 <__divmodhi4>
    3432:	9b 01       	movw	r18, r22
    3434:	db cf       	rjmp	.-74     	; 0x33ec <getInputFromSpeed+0x158>
        } else if(mode==LEFT_WHEEL_BW_SC) {
            if(calibration[i][5] >= currVel) {
                break;
            }
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            if(calibration[i][7] >= currVel) {
    3436:	60 91 1e 09 	lds	r22, 0x091E
    343a:	70 91 1f 09 	lds	r23, 0x091F
    343e:	62 17       	cp	r22, r18
    3440:	73 07       	cpc	r23, r19
    3442:	0c f0       	brlt	.+2      	; 0x3446 <getInputFromSpeed+0x1b2>
    3444:	62 c1       	rjmp	.+708    	; 0x370a <getInputFromSpeed+0x476>
    3446:	80 91 2e 09 	lds	r24, 0x092E
    344a:	90 91 2f 09 	lds	r25, 0x092F
    344e:	82 17       	cp	r24, r18
    3450:	93 07       	cpc	r25, r19
    3452:	0c f0       	brlt	.+2      	; 0x3456 <getInputFromSpeed+0x1c2>
    3454:	6d c1       	rjmp	.+730    	; 0x3730 <getInputFromSpeed+0x49c>
    3456:	80 91 3e 09 	lds	r24, 0x093E
    345a:	90 91 3f 09 	lds	r25, 0x093F
    345e:	82 17       	cp	r24, r18
    3460:	93 07       	cpc	r25, r19
    3462:	0c f0       	brlt	.+2      	; 0x3466 <getInputFromSpeed+0x1d2>
    3464:	b5 c2       	rjmp	.+1386   	; 0x39d0 <getInputFromSpeed+0x73c>
    3466:	80 91 4e 09 	lds	r24, 0x094E
    346a:	90 91 4f 09 	lds	r25, 0x094F
    346e:	82 17       	cp	r24, r18
    3470:	93 07       	cpc	r25, r19
    3472:	0c f0       	brlt	.+2      	; 0x3476 <getInputFromSpeed+0x1e2>
    3474:	aa c2       	rjmp	.+1364   	; 0x39ca <getInputFromSpeed+0x736>
    3476:	80 91 5e 09 	lds	r24, 0x095E
    347a:	90 91 5f 09 	lds	r25, 0x095F
    347e:	82 17       	cp	r24, r18
    3480:	93 07       	cpc	r25, r19
    3482:	0c f0       	brlt	.+2      	; 0x3486 <getInputFromSpeed+0x1f2>
    3484:	a8 c2       	rjmp	.+1360   	; 0x39d6 <getInputFromSpeed+0x742>
    3486:	80 91 6e 09 	lds	r24, 0x096E
    348a:	90 91 6f 09 	lds	r25, 0x096F
    348e:	82 17       	cp	r24, r18
    3490:	93 07       	cpc	r25, r19
    3492:	0c f0       	brlt	.+2      	; 0x3496 <getInputFromSpeed+0x202>
    3494:	a3 c2       	rjmp	.+1350   	; 0x39dc <getInputFromSpeed+0x748>
    3496:	80 91 7e 09 	lds	r24, 0x097E
    349a:	90 91 7f 09 	lds	r25, 0x097F
    349e:	82 17       	cp	r24, r18
    34a0:	93 07       	cpc	r25, r19
    34a2:	0c f0       	brlt	.+2      	; 0x34a6 <getInputFromSpeed+0x212>
    34a4:	a1 c2       	rjmp	.+1346   	; 0x39e8 <getInputFromSpeed+0x754>
    34a6:	80 91 8e 09 	lds	r24, 0x098E
    34aa:	90 91 8f 09 	lds	r25, 0x098F
    34ae:	82 17       	cp	r24, r18
    34b0:	93 07       	cpc	r25, r19
    34b2:	0c f0       	brlt	.+2      	; 0x34b6 <getInputFromSpeed+0x222>
    34b4:	96 c2       	rjmp	.+1324   	; 0x39e2 <getInputFromSpeed+0x74e>
    34b6:	80 91 9e 09 	lds	r24, 0x099E
    34ba:	90 91 9f 09 	lds	r25, 0x099F
    34be:	82 17       	cp	r24, r18
    34c0:	93 07       	cpc	r25, r19
    34c2:	0c f0       	brlt	.+2      	; 0x34c6 <getInputFromSpeed+0x232>
    34c4:	94 c2       	rjmp	.+1320   	; 0x39ee <getInputFromSpeed+0x75a>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][4]/(float)calibration[CALIBRATION_SAMPLES-1][5]);
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][6]/(float)calibration[CALIBRATION_SAMPLES-1][7]);
    34c6:	b9 01       	movw	r22, r18
    34c8:	88 27       	eor	r24, r24
    34ca:	77 fd       	sbrc	r23, 7
    34cc:	80 95       	com	r24
    34ce:	98 2f       	mov	r25, r24
    34d0:	0e 94 e5 55 	call	0xabca	; 0xabca <__floatsisf>
    34d4:	7b 01       	movw	r14, r22
    34d6:	8c 01       	movw	r16, r24
    34d8:	60 91 9c 09 	lds	r22, 0x099C
    34dc:	70 91 9d 09 	lds	r23, 0x099D
    34e0:	88 27       	eor	r24, r24
    34e2:	77 fd       	sbrc	r23, 7
    34e4:	80 95       	com	r24
    34e6:	98 2f       	mov	r25, r24
    34e8:	0e 94 e5 55 	call	0xabca	; 0xabca <__floatsisf>
    34ec:	9b 01       	movw	r18, r22
    34ee:	ac 01       	movw	r20, r24
    34f0:	c8 01       	movw	r24, r16
    34f2:	b7 01       	movw	r22, r14
    34f4:	0e 94 fe 56 	call	0xadfc	; 0xadfc <__mulsf3>
    34f8:	7b 01       	movw	r14, r22
    34fa:	8c 01       	movw	r16, r24
    34fc:	60 91 9e 09 	lds	r22, 0x099E
    3500:	70 91 9f 09 	lds	r23, 0x099F
    3504:	88 27       	eor	r24, r24
    3506:	77 fd       	sbrc	r23, 7
    3508:	80 95       	com	r24
    350a:	98 2f       	mov	r25, r24
    350c:	0e 94 e5 55 	call	0xabca	; 0xabca <__floatsisf>
    3510:	9b 01       	movw	r18, r22
    3512:	ac 01       	movw	r20, r24
    3514:	c8 01       	movw	r24, r16
    3516:	b7 01       	movw	r22, r14
    3518:	0e 94 4a 55 	call	0xaa94	; 0xaa94 <__divsf3>
    351c:	0e 94 b2 55 	call	0xab64	; 0xab64 <__fixsfsi>
            temp = -temp;
    3520:	22 27       	eor	r18, r18
    3522:	33 27       	eor	r19, r19
    3524:	26 1b       	sub	r18, r22
    3526:	37 0b       	sbc	r19, r23
    3528:	61 cf       	rjmp	.-318    	; 0x33ec <getInputFromSpeed+0x158>
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
                break;
            }
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            if(calibration[i][3] >= currVel) {
    352a:	60 91 16 09 	lds	r22, 0x0916
    352e:	70 91 17 09 	lds	r23, 0x0917
    3532:	62 17       	cp	r22, r18
    3534:	73 07       	cpc	r23, r19
    3536:	0c f0       	brlt	.+2      	; 0x353a <getInputFromSpeed+0x2a6>
    3538:	60 c0       	rjmp	.+192    	; 0x35fa <getInputFromSpeed+0x366>
    353a:	80 91 26 09 	lds	r24, 0x0926
    353e:	90 91 27 09 	lds	r25, 0x0927
    3542:	82 17       	cp	r24, r18
    3544:	93 07       	cpc	r25, r19
    3546:	0c f0       	brlt	.+2      	; 0x354a <getInputFromSpeed+0x2b6>
    3548:	f3 c0       	rjmp	.+486    	; 0x3730 <getInputFromSpeed+0x49c>
    354a:	80 91 36 09 	lds	r24, 0x0936
    354e:	90 91 37 09 	lds	r25, 0x0937
    3552:	82 17       	cp	r24, r18
    3554:	93 07       	cpc	r25, r19
    3556:	0c f0       	brlt	.+2      	; 0x355a <getInputFromSpeed+0x2c6>
    3558:	3b c2       	rjmp	.+1142   	; 0x39d0 <getInputFromSpeed+0x73c>
    355a:	80 91 46 09 	lds	r24, 0x0946
    355e:	90 91 47 09 	lds	r25, 0x0947
    3562:	82 17       	cp	r24, r18
    3564:	93 07       	cpc	r25, r19
    3566:	0c f0       	brlt	.+2      	; 0x356a <getInputFromSpeed+0x2d6>
    3568:	30 c2       	rjmp	.+1120   	; 0x39ca <getInputFromSpeed+0x736>
    356a:	80 91 56 09 	lds	r24, 0x0956
    356e:	90 91 57 09 	lds	r25, 0x0957
    3572:	82 17       	cp	r24, r18
    3574:	93 07       	cpc	r25, r19
    3576:	0c f0       	brlt	.+2      	; 0x357a <getInputFromSpeed+0x2e6>
    3578:	2e c2       	rjmp	.+1116   	; 0x39d6 <getInputFromSpeed+0x742>
    357a:	80 91 66 09 	lds	r24, 0x0966
    357e:	90 91 67 09 	lds	r25, 0x0967
    3582:	82 17       	cp	r24, r18
    3584:	93 07       	cpc	r25, r19
    3586:	0c f0       	brlt	.+2      	; 0x358a <getInputFromSpeed+0x2f6>
    3588:	29 c2       	rjmp	.+1106   	; 0x39dc <getInputFromSpeed+0x748>
    358a:	80 91 76 09 	lds	r24, 0x0976
    358e:	90 91 77 09 	lds	r25, 0x0977
    3592:	82 17       	cp	r24, r18
    3594:	93 07       	cpc	r25, r19
    3596:	0c f0       	brlt	.+2      	; 0x359a <getInputFromSpeed+0x306>
    3598:	27 c2       	rjmp	.+1102   	; 0x39e8 <getInputFromSpeed+0x754>
    359a:	80 91 86 09 	lds	r24, 0x0986
    359e:	90 91 87 09 	lds	r25, 0x0987
    35a2:	82 17       	cp	r24, r18
    35a4:	93 07       	cpc	r25, r19
    35a6:	0c f0       	brlt	.+2      	; 0x35aa <getInputFromSpeed+0x316>
    35a8:	1c c2       	rjmp	.+1080   	; 0x39e2 <getInputFromSpeed+0x74e>
    35aa:	80 91 96 09 	lds	r24, 0x0996
    35ae:	90 91 97 09 	lds	r25, 0x0997
    35b2:	82 17       	cp	r24, r18
    35b4:	93 07       	cpc	r25, r19
    35b6:	0c f0       	brlt	.+2      	; 0x35ba <getInputFromSpeed+0x326>
    35b8:	1a c2       	rjmp	.+1076   	; 0x39ee <getInputFromSpeed+0x75a>
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
    35ba:	b9 01       	movw	r22, r18
    35bc:	88 27       	eor	r24, r24
    35be:	77 fd       	sbrc	r23, 7
    35c0:	80 95       	com	r24
    35c2:	98 2f       	mov	r25, r24
    35c4:	0e 94 e5 55 	call	0xabca	; 0xabca <__floatsisf>
    35c8:	7b 01       	movw	r14, r22
    35ca:	8c 01       	movw	r16, r24
    35cc:	60 91 94 09 	lds	r22, 0x0994
    35d0:	70 91 95 09 	lds	r23, 0x0995
    35d4:	88 27       	eor	r24, r24
    35d6:	77 fd       	sbrc	r23, 7
    35d8:	80 95       	com	r24
    35da:	98 2f       	mov	r25, r24
    35dc:	0e 94 e5 55 	call	0xabca	; 0xabca <__floatsisf>
    35e0:	9b 01       	movw	r18, r22
    35e2:	ac 01       	movw	r20, r24
    35e4:	c8 01       	movw	r24, r16
    35e6:	b7 01       	movw	r22, r14
    35e8:	0e 94 fe 56 	call	0xadfc	; 0xadfc <__mulsf3>
    35ec:	7b 01       	movw	r14, r22
    35ee:	8c 01       	movw	r16, r24
    35f0:	60 91 96 09 	lds	r22, 0x0996
    35f4:	70 91 97 09 	lds	r23, 0x0997
    35f8:	d4 ce       	rjmp	.-600    	; 0x33a2 <getInputFromSpeed+0x10e>

    if(i==0) {  // the velocity is lower than first saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][0])/calibration[0][1];
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][2])/calibration[0][3];
    35fa:	80 91 14 09 	lds	r24, 0x0914
    35fe:	90 91 15 09 	lds	r25, 0x0915
    3602:	fc 01       	movw	r30, r24
    3604:	2e 9f       	mul	r18, r30
    3606:	c0 01       	movw	r24, r0
    3608:	2f 9f       	mul	r18, r31
    360a:	90 0d       	add	r25, r0
    360c:	3e 9f       	mul	r19, r30
    360e:	90 0d       	add	r25, r0
    3610:	11 24       	eor	r1, r1
    3612:	0d cf       	rjmp	.-486    	; 0x342e <getInputFromSpeed+0x19a>
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            if(calibration[i][3] >= currVel) {
                break;
            }
        } else if(mode==LEFT_WHEEL_BW_SC) {
            if(calibration[i][5] >= currVel) {
    3614:	60 91 1a 09 	lds	r22, 0x091A
    3618:	70 91 1b 09 	lds	r23, 0x091B
    361c:	62 17       	cp	r22, r18
    361e:	73 07       	cpc	r23, r19
    3620:	0c f0       	brlt	.+2      	; 0x3624 <getInputFromSpeed+0x390>
    3622:	60 c0       	rjmp	.+192    	; 0x36e4 <getInputFromSpeed+0x450>
    3624:	80 91 2a 09 	lds	r24, 0x092A
    3628:	90 91 2b 09 	lds	r25, 0x092B
    362c:	82 17       	cp	r24, r18
    362e:	93 07       	cpc	r25, r19
    3630:	0c f0       	brlt	.+2      	; 0x3634 <getInputFromSpeed+0x3a0>
    3632:	7e c0       	rjmp	.+252    	; 0x3730 <getInputFromSpeed+0x49c>
    3634:	80 91 3a 09 	lds	r24, 0x093A
    3638:	90 91 3b 09 	lds	r25, 0x093B
    363c:	82 17       	cp	r24, r18
    363e:	93 07       	cpc	r25, r19
    3640:	0c f0       	brlt	.+2      	; 0x3644 <getInputFromSpeed+0x3b0>
    3642:	c6 c1       	rjmp	.+908    	; 0x39d0 <getInputFromSpeed+0x73c>
    3644:	80 91 4a 09 	lds	r24, 0x094A
    3648:	90 91 4b 09 	lds	r25, 0x094B
    364c:	82 17       	cp	r24, r18
    364e:	93 07       	cpc	r25, r19
    3650:	0c f0       	brlt	.+2      	; 0x3654 <getInputFromSpeed+0x3c0>
    3652:	bb c1       	rjmp	.+886    	; 0x39ca <getInputFromSpeed+0x736>
    3654:	80 91 5a 09 	lds	r24, 0x095A
    3658:	90 91 5b 09 	lds	r25, 0x095B
    365c:	82 17       	cp	r24, r18
    365e:	93 07       	cpc	r25, r19
    3660:	0c f0       	brlt	.+2      	; 0x3664 <getInputFromSpeed+0x3d0>
    3662:	b9 c1       	rjmp	.+882    	; 0x39d6 <getInputFromSpeed+0x742>
    3664:	80 91 6a 09 	lds	r24, 0x096A
    3668:	90 91 6b 09 	lds	r25, 0x096B
    366c:	82 17       	cp	r24, r18
    366e:	93 07       	cpc	r25, r19
    3670:	0c f0       	brlt	.+2      	; 0x3674 <getInputFromSpeed+0x3e0>
    3672:	b4 c1       	rjmp	.+872    	; 0x39dc <getInputFromSpeed+0x748>
    3674:	80 91 7a 09 	lds	r24, 0x097A
    3678:	90 91 7b 09 	lds	r25, 0x097B
    367c:	82 17       	cp	r24, r18
    367e:	93 07       	cpc	r25, r19
    3680:	0c f0       	brlt	.+2      	; 0x3684 <getInputFromSpeed+0x3f0>
    3682:	b2 c1       	rjmp	.+868    	; 0x39e8 <getInputFromSpeed+0x754>
    3684:	80 91 8a 09 	lds	r24, 0x098A
    3688:	90 91 8b 09 	lds	r25, 0x098B
    368c:	82 17       	cp	r24, r18
    368e:	93 07       	cpc	r25, r19
    3690:	0c f0       	brlt	.+2      	; 0x3694 <getInputFromSpeed+0x400>
    3692:	a7 c1       	rjmp	.+846    	; 0x39e2 <getInputFromSpeed+0x74e>
    3694:	80 91 9a 09 	lds	r24, 0x099A
    3698:	90 91 9b 09 	lds	r25, 0x099B
    369c:	82 17       	cp	r24, r18
    369e:	93 07       	cpc	r25, r19
    36a0:	0c f0       	brlt	.+2      	; 0x36a4 <getInputFromSpeed+0x410>
    36a2:	a5 c1       	rjmp	.+842    	; 0x39ee <getInputFromSpeed+0x75a>
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][4]/(float)calibration[CALIBRATION_SAMPLES-1][5]);
    36a4:	b9 01       	movw	r22, r18
    36a6:	88 27       	eor	r24, r24
    36a8:	77 fd       	sbrc	r23, 7
    36aa:	80 95       	com	r24
    36ac:	98 2f       	mov	r25, r24
    36ae:	0e 94 e5 55 	call	0xabca	; 0xabca <__floatsisf>
    36b2:	7b 01       	movw	r14, r22
    36b4:	8c 01       	movw	r16, r24
    36b6:	60 91 98 09 	lds	r22, 0x0998
    36ba:	70 91 99 09 	lds	r23, 0x0999
    36be:	88 27       	eor	r24, r24
    36c0:	77 fd       	sbrc	r23, 7
    36c2:	80 95       	com	r24
    36c4:	98 2f       	mov	r25, r24
    36c6:	0e 94 e5 55 	call	0xabca	; 0xabca <__floatsisf>
    36ca:	9b 01       	movw	r18, r22
    36cc:	ac 01       	movw	r20, r24
    36ce:	c8 01       	movw	r24, r16
    36d0:	b7 01       	movw	r22, r14
    36d2:	0e 94 fe 56 	call	0xadfc	; 0xadfc <__mulsf3>
    36d6:	7b 01       	movw	r14, r22
    36d8:	8c 01       	movw	r16, r24
    36da:	60 91 9a 09 	lds	r22, 0x099A
    36de:	70 91 9b 09 	lds	r23, 0x099B
    36e2:	10 cf       	rjmp	.-480    	; 0x3504 <getInputFromSpeed+0x270>
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][0])/calibration[0][1];
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][2])/calibration[0][3];
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][4]/calibration[0][5];
    36e4:	80 91 18 09 	lds	r24, 0x0918
    36e8:	90 91 19 09 	lds	r25, 0x0919
    36ec:	ac 01       	movw	r20, r24
    36ee:	24 9f       	mul	r18, r20
    36f0:	c0 01       	movw	r24, r0
    36f2:	25 9f       	mul	r18, r21
    36f4:	90 0d       	add	r25, r0
    36f6:	34 9f       	mul	r19, r20
    36f8:	90 0d       	add	r25, r0
    36fa:	11 24       	eor	r1, r1
    36fc:	0e 94 bc 57 	call	0xaf78	; 0xaf78 <__divmodhi4>
            temp = -temp;
    3700:	22 27       	eor	r18, r18
    3702:	33 27       	eor	r19, r19
    3704:	26 1b       	sub	r18, r22
    3706:	37 0b       	sbc	r19, r23
    3708:	71 ce       	rjmp	.-798    	; 0x33ec <getInputFromSpeed+0x158>
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][6]/calibration[0][7];
    370a:	80 91 1c 09 	lds	r24, 0x091C
    370e:	90 91 1d 09 	lds	r25, 0x091D
    3712:	fc 01       	movw	r30, r24
    3714:	2e 9f       	mul	r18, r30
    3716:	c0 01       	movw	r24, r0
    3718:	2f 9f       	mul	r18, r31
    371a:	90 0d       	add	r25, r0
    371c:	3e 9f       	mul	r19, r30
    371e:	90 0d       	add	r25, r0
    3720:	11 24       	eor	r1, r1
    3722:	0e 94 bc 57 	call	0xaf78	; 0xaf78 <__divmodhi4>
            temp = -temp;
    3726:	22 27       	eor	r18, r18
    3728:	33 27       	eor	r19, r19
    372a:	26 1b       	sub	r18, r22
    372c:	37 0b       	sbc	r19, r23
    372e:	5e ce       	rjmp	.-836    	; 0x33ec <getInputFromSpeed+0x158>
        currVel = -currVel; // consider only positive values
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
    3730:	c1 e0       	ldi	r28, 0x01	; 1
    3732:	d0 e0       	ldi	r29, 0x00	; 0
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][6]/calibration[0][7];
            temp = -temp;
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    3734:	c9 30       	cpi	r28, 0x09	; 9
    3736:	d1 05       	cpc	r29, r1
    3738:	09 f4       	brne	.+2      	; 0x373c <getInputFromSpeed+0x4a8>
    373a:	4b ce       	rjmp	.-874    	; 0x33d2 <getInputFromSpeed+0x13e>
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][6]/(float)calibration[CALIBRATION_SAMPLES-1][7]);
            temp = -temp;
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
    373c:	44 23       	and	r20, r20
    373e:	09 f0       	breq	.+2      	; 0x3742 <getInputFromSpeed+0x4ae>
    3740:	59 c0       	rjmp	.+178    	; 0x37f4 <getInputFromSpeed+0x560>
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
    3742:	fe 01       	movw	r30, r28
    3744:	31 97       	sbiw	r30, 0x01	; 1
    3746:	ee 0f       	add	r30, r30
    3748:	ff 1f       	adc	r31, r31
    374a:	ee 0f       	add	r30, r30
    374c:	ff 1f       	adc	r31, r31
    374e:	ee 0f       	add	r30, r30
    3750:	ff 1f       	adc	r31, r31
    3752:	ee 0f       	add	r30, r30
    3754:	ff 1f       	adc	r31, r31
    3756:	df 01       	movw	r26, r30
    3758:	ae 5e       	subi	r26, 0xEE	; 238
    375a:	b6 4f       	sbci	r27, 0xF6	; 246
    375c:	cd 90       	ld	r12, X+
    375e:	dc 90       	ld	r13, X
    3760:	e0 5f       	subi	r30, 0xF0	; 240
    3762:	f6 4f       	sbci	r31, 0xF6	; 246
    3764:	a0 80       	ld	r10, Z
    3766:	b1 80       	ldd	r11, Z+1	; 0x01
    3768:	2c 19       	sub	r18, r12
    376a:	3d 09       	sbc	r19, r13
    376c:	b9 01       	movw	r22, r18
    376e:	88 27       	eor	r24, r24
    3770:	77 fd       	sbrc	r23, 7
    3772:	80 95       	com	r24
    3774:	98 2f       	mov	r25, r24
    3776:	0e 94 e5 55 	call	0xabca	; 0xabca <__floatsisf>
    377a:	7b 01       	movw	r14, r22
    377c:	8c 01       	movw	r16, r24
    377e:	fe 01       	movw	r30, r28
    3780:	e2 95       	swap	r30
    3782:	f2 95       	swap	r31
    3784:	f0 7f       	andi	r31, 0xF0	; 240
    3786:	fe 27       	eor	r31, r30
    3788:	e0 7f       	andi	r30, 0xF0	; 240
    378a:	fe 27       	eor	r31, r30
    378c:	e0 5f       	subi	r30, 0xF0	; 240
    378e:	f6 4f       	sbci	r31, 0xF6	; 246
    3790:	60 81       	ld	r22, Z
    3792:	71 81       	ldd	r23, Z+1	; 0x01
    3794:	6a 19       	sub	r22, r10
    3796:	7b 09       	sbc	r23, r11
    3798:	88 27       	eor	r24, r24
    379a:	77 fd       	sbrc	r23, 7
    379c:	80 95       	com	r24
    379e:	98 2f       	mov	r25, r24
    37a0:	0e 94 e5 55 	call	0xabca	; 0xabca <__floatsisf>
    37a4:	9b 01       	movw	r18, r22
    37a6:	ac 01       	movw	r20, r24
    37a8:	c8 01       	movw	r24, r16
    37aa:	b7 01       	movw	r22, r14
    37ac:	0e 94 fe 56 	call	0xadfc	; 0xadfc <__mulsf3>
    37b0:	7b 01       	movw	r14, r22
    37b2:	8c 01       	movw	r16, r24
    37b4:	cc 0f       	add	r28, r28
    37b6:	dd 1f       	adc	r29, r29
    37b8:	cc 0f       	add	r28, r28
    37ba:	dd 1f       	adc	r29, r29
    37bc:	cc 0f       	add	r28, r28
    37be:	dd 1f       	adc	r29, r29
    37c0:	cc 0f       	add	r28, r28
    37c2:	dd 1f       	adc	r29, r29
    37c4:	ce 5e       	subi	r28, 0xEE	; 238
    37c6:	d6 4f       	sbci	r29, 0xF6	; 246
    37c8:	68 81       	ld	r22, Y
    37ca:	79 81       	ldd	r23, Y+1	; 0x01
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
    37cc:	6c 19       	sub	r22, r12
    37ce:	7d 09       	sbc	r23, r13
    37d0:	88 27       	eor	r24, r24
    37d2:	77 fd       	sbrc	r23, 7
    37d4:	80 95       	com	r24
    37d6:	98 2f       	mov	r25, r24
    37d8:	0e 94 e5 55 	call	0xabca	; 0xabca <__floatsisf>
    37dc:	9b 01       	movw	r18, r22
    37de:	ac 01       	movw	r20, r24
    37e0:	c8 01       	movw	r24, r16
    37e2:	b7 01       	movw	r22, r14
    37e4:	0e 94 4a 55 	call	0xaa94	; 0xaa94 <__divsf3>
    37e8:	0e 94 b2 55 	call	0xab64	; 0xab64 <__fixsfsi>
    37ec:	9b 01       	movw	r18, r22
    37ee:	2a 0d       	add	r18, r10
    37f0:	3b 1d       	adc	r19, r11
    37f2:	fc cd       	rjmp	.-1032   	; 0x33ec <getInputFromSpeed+0x158>
            temp = -temp;
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
        } else if(mode==RIGHT_WHEEL_FW_SC) {
    37f4:	41 30       	cpi	r20, 0x01	; 1
    37f6:	09 f4       	brne	.+2      	; 0x37fa <getInputFromSpeed+0x566>
    37f8:	4e c0       	rjmp	.+156    	; 0x3896 <getInputFromSpeed+0x602>
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
        } else if(mode==LEFT_WHEEL_BW_SC) {
    37fa:	42 30       	cpi	r20, 0x02	; 2
    37fc:	09 f4       	brne	.+2      	; 0x3800 <getInputFromSpeed+0x56c>
    37fe:	89 c0       	rjmp	.+274    	; 0x3912 <getInputFromSpeed+0x67e>
            temp = calibration[i-1][4] + (signed int)(((float)(currVel-calibration[i-1][5])*(float)(calibration[i][4]-calibration[i-1][4]))/(float)(calibration[i][5]-calibration[i-1][5]));
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
    3800:	43 30       	cpi	r20, 0x03	; 3
    3802:	09 f0       	breq	.+2      	; 0x3806 <getInputFromSpeed+0x572>
    3804:	f1 cd       	rjmp	.-1054   	; 0x33e8 <getInputFromSpeed+0x154>
            temp = calibration[i-1][6] + (signed int)(((float)(currVel-calibration[i-1][7])*(float)(calibration[i][6]-calibration[i-1][6]))/(float)(calibration[i][7]-calibration[i-1][7]));
    3806:	c2 95       	swap	r28
    3808:	d2 95       	swap	r29
    380a:	d0 7f       	andi	r29, 0xF0	; 240
    380c:	dc 27       	eor	r29, r28
    380e:	c0 7f       	andi	r28, 0xF0	; 240
    3810:	dc 27       	eor	r29, r28
    3812:	fe 01       	movw	r30, r28
    3814:	e0 50       	subi	r30, 0x00	; 0
    3816:	f7 4f       	sbci	r31, 0xF7	; 247
    3818:	a6 84       	ldd	r10, Z+14	; 0x0e
    381a:	b7 84       	ldd	r11, Z+15	; 0x0f
    381c:	84 84       	ldd	r8, Z+12	; 0x0c
    381e:	95 84       	ldd	r9, Z+13	; 0x0d
    3820:	2a 19       	sub	r18, r10
    3822:	3b 09       	sbc	r19, r11
    3824:	b9 01       	movw	r22, r18
    3826:	88 27       	eor	r24, r24
    3828:	77 fd       	sbrc	r23, 7
    382a:	80 95       	com	r24
    382c:	98 2f       	mov	r25, r24
    382e:	0e 94 e5 55 	call	0xabca	; 0xabca <__floatsisf>
    3832:	6b 01       	movw	r12, r22
    3834:	7c 01       	movw	r14, r24
    3836:	8e 01       	movw	r16, r28
    3838:	00 5f       	subi	r16, 0xF0	; 240
    383a:	16 4f       	sbci	r17, 0xF6	; 246
    383c:	f8 01       	movw	r30, r16
    383e:	64 85       	ldd	r22, Z+12	; 0x0c
    3840:	75 85       	ldd	r23, Z+13	; 0x0d
    3842:	68 19       	sub	r22, r8
    3844:	79 09       	sbc	r23, r9
    3846:	88 27       	eor	r24, r24
    3848:	77 fd       	sbrc	r23, 7
    384a:	80 95       	com	r24
    384c:	98 2f       	mov	r25, r24
    384e:	0e 94 e5 55 	call	0xabca	; 0xabca <__floatsisf>
    3852:	9b 01       	movw	r18, r22
    3854:	ac 01       	movw	r20, r24
    3856:	c7 01       	movw	r24, r14
    3858:	b6 01       	movw	r22, r12
    385a:	0e 94 fe 56 	call	0xadfc	; 0xadfc <__mulsf3>
    385e:	6b 01       	movw	r12, r22
    3860:	7c 01       	movw	r14, r24
    3862:	f8 01       	movw	r30, r16
    3864:	66 85       	ldd	r22, Z+14	; 0x0e
    3866:	77 85       	ldd	r23, Z+15	; 0x0f
    3868:	6a 19       	sub	r22, r10
    386a:	7b 09       	sbc	r23, r11
    386c:	88 27       	eor	r24, r24
    386e:	77 fd       	sbrc	r23, 7
    3870:	80 95       	com	r24
    3872:	98 2f       	mov	r25, r24
    3874:	0e 94 e5 55 	call	0xabca	; 0xabca <__floatsisf>
    3878:	9b 01       	movw	r18, r22
    387a:	ac 01       	movw	r20, r24
    387c:	c7 01       	movw	r24, r14
    387e:	b6 01       	movw	r22, r12
    3880:	0e 94 4a 55 	call	0xaa94	; 0xaa94 <__divsf3>
    3884:	0e 94 b2 55 	call	0xab64	; 0xab64 <__fixsfsi>
    3888:	68 0d       	add	r22, r8
    388a:	79 1d       	adc	r23, r9
            temp = -temp;
    388c:	22 27       	eor	r18, r18
    388e:	33 27       	eor	r19, r19
    3890:	26 1b       	sub	r18, r22
    3892:	37 0b       	sbc	r19, r23
    3894:	ab cd       	rjmp	.-1194   	; 0x33ec <getInputFromSpeed+0x158>
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
    3896:	fe 01       	movw	r30, r28
    3898:	31 97       	sbiw	r30, 0x01	; 1
    389a:	e2 95       	swap	r30
    389c:	f2 95       	swap	r31
    389e:	f0 7f       	andi	r31, 0xF0	; 240
    38a0:	fe 27       	eor	r31, r30
    38a2:	e0 7f       	andi	r30, 0xF0	; 240
    38a4:	fe 27       	eor	r31, r30
    38a6:	df 01       	movw	r26, r30
    38a8:	a0 5f       	subi	r26, 0xF0	; 240
    38aa:	b6 4f       	sbci	r27, 0xF6	; 246
    38ac:	16 96       	adiw	r26, 0x06	; 6
    38ae:	cd 90       	ld	r12, X+
    38b0:	dc 90       	ld	r13, X
    38b2:	17 97       	sbiw	r26, 0x07	; 7
    38b4:	ec 5e       	subi	r30, 0xEC	; 236
    38b6:	f6 4f       	sbci	r31, 0xF6	; 246
    38b8:	a0 80       	ld	r10, Z
    38ba:	b1 80       	ldd	r11, Z+1	; 0x01
    38bc:	2c 19       	sub	r18, r12
    38be:	3d 09       	sbc	r19, r13
    38c0:	b9 01       	movw	r22, r18
    38c2:	88 27       	eor	r24, r24
    38c4:	77 fd       	sbrc	r23, 7
    38c6:	80 95       	com	r24
    38c8:	98 2f       	mov	r25, r24
    38ca:	0e 94 e5 55 	call	0xabca	; 0xabca <__floatsisf>
    38ce:	7b 01       	movw	r14, r22
    38d0:	8c 01       	movw	r16, r24
    38d2:	c2 95       	swap	r28
    38d4:	d2 95       	swap	r29
    38d6:	d0 7f       	andi	r29, 0xF0	; 240
    38d8:	dc 27       	eor	r29, r28
    38da:	c0 7f       	andi	r28, 0xF0	; 240
    38dc:	dc 27       	eor	r29, r28
    38de:	fe 01       	movw	r30, r28
    38e0:	ec 5e       	subi	r30, 0xEC	; 236
    38e2:	f6 4f       	sbci	r31, 0xF6	; 246
    38e4:	60 81       	ld	r22, Z
    38e6:	71 81       	ldd	r23, Z+1	; 0x01
    38e8:	6a 19       	sub	r22, r10
    38ea:	7b 09       	sbc	r23, r11
    38ec:	88 27       	eor	r24, r24
    38ee:	77 fd       	sbrc	r23, 7
    38f0:	80 95       	com	r24
    38f2:	98 2f       	mov	r25, r24
    38f4:	0e 94 e5 55 	call	0xabca	; 0xabca <__floatsisf>
    38f8:	9b 01       	movw	r18, r22
    38fa:	ac 01       	movw	r20, r24
    38fc:	c8 01       	movw	r24, r16
    38fe:	b7 01       	movw	r22, r14
    3900:	0e 94 fe 56 	call	0xadfc	; 0xadfc <__mulsf3>
    3904:	7b 01       	movw	r14, r22
    3906:	8c 01       	movw	r16, r24
    3908:	c0 5f       	subi	r28, 0xF0	; 240
    390a:	d6 4f       	sbci	r29, 0xF6	; 246
    390c:	6e 81       	ldd	r22, Y+6	; 0x06
    390e:	7f 81       	ldd	r23, Y+7	; 0x07
    3910:	5d cf       	rjmp	.-326    	; 0x37cc <getInputFromSpeed+0x538>
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = calibration[i-1][4] + (signed int)(((float)(currVel-calibration[i-1][5])*(float)(calibration[i][4]-calibration[i-1][4]))/(float)(calibration[i][5]-calibration[i-1][5]));
    3912:	de 01       	movw	r26, r28
    3914:	11 97       	sbiw	r26, 0x01	; 1
    3916:	fd 01       	movw	r30, r26
    3918:	e2 95       	swap	r30
    391a:	f2 95       	swap	r31
    391c:	f0 7f       	andi	r31, 0xF0	; 240
    391e:	fe 27       	eor	r31, r30
    3920:	e0 7f       	andi	r30, 0xF0	; 240
    3922:	fe 27       	eor	r31, r30
    3924:	e0 5f       	subi	r30, 0xF0	; 240
    3926:	f6 4f       	sbci	r31, 0xF6	; 246
    3928:	c2 84       	ldd	r12, Z+10	; 0x0a
    392a:	d3 84       	ldd	r13, Z+11	; 0x0b
    392c:	aa 0f       	add	r26, r26
    392e:	bb 1f       	adc	r27, r27
    3930:	aa 0f       	add	r26, r26
    3932:	bb 1f       	adc	r27, r27
    3934:	aa 0f       	add	r26, r26
    3936:	bb 1f       	adc	r27, r27
    3938:	aa 0f       	add	r26, r26
    393a:	bb 1f       	adc	r27, r27
    393c:	a8 5e       	subi	r26, 0xE8	; 232
    393e:	b6 4f       	sbci	r27, 0xF6	; 246
    3940:	ad 90       	ld	r10, X+
    3942:	bc 90       	ld	r11, X
    3944:	2c 19       	sub	r18, r12
    3946:	3d 09       	sbc	r19, r13
    3948:	b9 01       	movw	r22, r18
    394a:	88 27       	eor	r24, r24
    394c:	77 fd       	sbrc	r23, 7
    394e:	80 95       	com	r24
    3950:	98 2f       	mov	r25, r24
    3952:	0e 94 e5 55 	call	0xabca	; 0xabca <__floatsisf>
    3956:	7b 01       	movw	r14, r22
    3958:	8c 01       	movw	r16, r24
    395a:	cc 0f       	add	r28, r28
    395c:	dd 1f       	adc	r29, r29
    395e:	cc 0f       	add	r28, r28
    3960:	dd 1f       	adc	r29, r29
    3962:	cc 0f       	add	r28, r28
    3964:	dd 1f       	adc	r29, r29
    3966:	cc 0f       	add	r28, r28
    3968:	dd 1f       	adc	r29, r29
    396a:	fe 01       	movw	r30, r28
    396c:	e8 5e       	subi	r30, 0xE8	; 232
    396e:	f6 4f       	sbci	r31, 0xF6	; 246
    3970:	60 81       	ld	r22, Z
    3972:	71 81       	ldd	r23, Z+1	; 0x01
    3974:	6a 19       	sub	r22, r10
    3976:	7b 09       	sbc	r23, r11
    3978:	88 27       	eor	r24, r24
    397a:	77 fd       	sbrc	r23, 7
    397c:	80 95       	com	r24
    397e:	98 2f       	mov	r25, r24
    3980:	0e 94 e5 55 	call	0xabca	; 0xabca <__floatsisf>
    3984:	9b 01       	movw	r18, r22
    3986:	ac 01       	movw	r20, r24
    3988:	c8 01       	movw	r24, r16
    398a:	b7 01       	movw	r22, r14
    398c:	0e 94 fe 56 	call	0xadfc	; 0xadfc <__mulsf3>
    3990:	7b 01       	movw	r14, r22
    3992:	8c 01       	movw	r16, r24
    3994:	c0 5f       	subi	r28, 0xF0	; 240
    3996:	d6 4f       	sbci	r29, 0xF6	; 246
    3998:	6a 85       	ldd	r22, Y+10	; 0x0a
    399a:	7b 85       	ldd	r23, Y+11	; 0x0b
    399c:	6c 19       	sub	r22, r12
    399e:	7d 09       	sbc	r23, r13
    39a0:	88 27       	eor	r24, r24
    39a2:	77 fd       	sbrc	r23, 7
    39a4:	80 95       	com	r24
    39a6:	98 2f       	mov	r25, r24
    39a8:	0e 94 e5 55 	call	0xabca	; 0xabca <__floatsisf>
    39ac:	9b 01       	movw	r18, r22
    39ae:	ac 01       	movw	r20, r24
    39b0:	c8 01       	movw	r24, r16
    39b2:	b7 01       	movw	r22, r14
    39b4:	0e 94 4a 55 	call	0xaa94	; 0xaa94 <__divsf3>
    39b8:	0e 94 b2 55 	call	0xab64	; 0xab64 <__fixsfsi>
    39bc:	6a 0d       	add	r22, r10
    39be:	7b 1d       	adc	r23, r11
            temp = -temp;
    39c0:	22 27       	eor	r18, r18
    39c2:	33 27       	eor	r19, r19
    39c4:	26 1b       	sub	r18, r22
    39c6:	37 0b       	sbc	r19, r23
    39c8:	11 cd       	rjmp	.-1502   	; 0x33ec <getInputFromSpeed+0x158>
        currVel = -currVel; // consider only positive values
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
    39ca:	c3 e0       	ldi	r28, 0x03	; 3
    39cc:	d0 e0       	ldi	r29, 0x00	; 0
    39ce:	b2 ce       	rjmp	.-668    	; 0x3734 <getInputFromSpeed+0x4a0>
    39d0:	c2 e0       	ldi	r28, 0x02	; 2
    39d2:	d0 e0       	ldi	r29, 0x00	; 0
    39d4:	af ce       	rjmp	.-674    	; 0x3734 <getInputFromSpeed+0x4a0>
    39d6:	c4 e0       	ldi	r28, 0x04	; 4
    39d8:	d0 e0       	ldi	r29, 0x00	; 0
    39da:	ac ce       	rjmp	.-680    	; 0x3734 <getInputFromSpeed+0x4a0>
    39dc:	c5 e0       	ldi	r28, 0x05	; 5
    39de:	d0 e0       	ldi	r29, 0x00	; 0
    39e0:	a9 ce       	rjmp	.-686    	; 0x3734 <getInputFromSpeed+0x4a0>
    39e2:	c7 e0       	ldi	r28, 0x07	; 7
    39e4:	d0 e0       	ldi	r29, 0x00	; 0
    39e6:	a6 ce       	rjmp	.-692    	; 0x3734 <getInputFromSpeed+0x4a0>
    39e8:	c6 e0       	ldi	r28, 0x06	; 6
    39ea:	d0 e0       	ldi	r29, 0x00	; 0
    39ec:	a3 ce       	rjmp	.-698    	; 0x3734 <getInputFromSpeed+0x4a0>
    39ee:	c8 e0       	ldi	r28, 0x08	; 8
    39f0:	d0 e0       	ldi	r29, 0x00	; 0
    39f2:	a0 ce       	rjmp	.-704    	; 0x3734 <getInputFromSpeed+0x4a0>

000039f4 <getRightSpeedFromInput>:
    
    return temp;
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {
    39f4:	8f 92       	push	r8
    39f6:	9f 92       	push	r9
    39f8:	af 92       	push	r10
    39fa:	bf 92       	push	r11
    39fc:	cf 92       	push	r12
    39fe:	df 92       	push	r13
    3a00:	ef 92       	push	r14
    3a02:	ff 92       	push	r15
    3a04:	0f 93       	push	r16
    3a06:	1f 93       	push	r17
    3a08:	cf 93       	push	r28
    3a0a:	df 93       	push	r29

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    3a0c:	c0 91 0f 03 	lds	r28, 0x030F
    3a10:	d0 91 10 03 	lds	r29, 0x0310
    3a14:	80 91 11 03 	lds	r24, 0x0311
    3a18:	90 91 12 03 	lds	r25, 0x0312
    3a1c:	97 fd       	sbrc	r25, 7
    3a1e:	ea c0       	rjmp	.+468    	; 0x3bf4 <getRightSpeedFromInput+0x200>
    3a20:	60 91 14 09 	lds	r22, 0x0914
    3a24:	70 91 15 09 	lds	r23, 0x0915
    3a28:	6c 17       	cp	r22, r28
    3a2a:	7d 07       	cpc	r23, r29
    3a2c:	0c f0       	brlt	.+2      	; 0x3a30 <getRightSpeedFromInput+0x3c>
    3a2e:	67 c1       	rjmp	.+718    	; 0x3cfe <getRightSpeedFromInput+0x30a>
    3a30:	88 24       	eor	r8, r8
    3a32:	8a 94       	dec	r8
    3a34:	98 2c       	mov	r9, r8
    3a36:	80 91 24 09 	lds	r24, 0x0924
    3a3a:	90 91 25 09 	lds	r25, 0x0925
    3a3e:	8c 17       	cp	r24, r28
    3a40:	9d 07       	cpc	r25, r29
    3a42:	4c f0       	brlt	.+18     	; 0x3a56 <getRightSpeedFromInput+0x62>
    3a44:	80 e0       	ldi	r24, 0x00	; 0
    3a46:	9f ef       	ldi	r25, 0xFF	; 255
    3a48:	89 16       	cp	r8, r25
    3a4a:	9f ef       	ldi	r25, 0xFF	; 255
    3a4c:	99 06       	cpc	r9, r25
    3a4e:	09 f4       	brne	.+2      	; 0x3a52 <getRightSpeedFromInput+0x5e>
    3a50:	75 c1       	rjmp	.+746    	; 0x3d3c <getRightSpeedFromInput+0x348>
    3a52:	88 2e       	mov	r8, r24
    3a54:	99 24       	eor	r9, r9
    3a56:	80 91 34 09 	lds	r24, 0x0934
    3a5a:	90 91 35 09 	lds	r25, 0x0935
    3a5e:	8c 17       	cp	r24, r28
    3a60:	9d 07       	cpc	r25, r29
    3a62:	34 f0       	brlt	.+12     	; 0x3a70 <getRightSpeedFromInput+0x7c>
    3a64:	ef ef       	ldi	r30, 0xFF	; 255
    3a66:	8e 16       	cp	r8, r30
    3a68:	ef ef       	ldi	r30, 0xFF	; 255
    3a6a:	9e 06       	cpc	r9, r30
    3a6c:	09 f4       	brne	.+2      	; 0x3a70 <getRightSpeedFromInput+0x7c>
    3a6e:	62 c1       	rjmp	.+708    	; 0x3d34 <getRightSpeedFromInput+0x340>
    3a70:	80 91 44 09 	lds	r24, 0x0944
    3a74:	90 91 45 09 	lds	r25, 0x0945
    3a78:	8c 17       	cp	r24, r28
    3a7a:	9d 07       	cpc	r25, r29
    3a7c:	34 f0       	brlt	.+12     	; 0x3a8a <getRightSpeedFromInput+0x96>
    3a7e:	ff ef       	ldi	r31, 0xFF	; 255
    3a80:	8f 16       	cp	r8, r31
    3a82:	ff ef       	ldi	r31, 0xFF	; 255
    3a84:	9f 06       	cpc	r9, r31
    3a86:	09 f4       	brne	.+2      	; 0x3a8a <getRightSpeedFromInput+0x96>
    3a88:	51 c1       	rjmp	.+674    	; 0x3d2c <getRightSpeedFromInput+0x338>
    3a8a:	80 91 54 09 	lds	r24, 0x0954
    3a8e:	90 91 55 09 	lds	r25, 0x0955
    3a92:	8c 17       	cp	r24, r28
    3a94:	9d 07       	cpc	r25, r29
    3a96:	34 f0       	brlt	.+12     	; 0x3aa4 <getRightSpeedFromInput+0xb0>
    3a98:	2f ef       	ldi	r18, 0xFF	; 255
    3a9a:	82 16       	cp	r8, r18
    3a9c:	2f ef       	ldi	r18, 0xFF	; 255
    3a9e:	92 06       	cpc	r9, r18
    3aa0:	09 f4       	brne	.+2      	; 0x3aa4 <getRightSpeedFromInput+0xb0>
    3aa2:	40 c1       	rjmp	.+640    	; 0x3d24 <getRightSpeedFromInput+0x330>
    3aa4:	80 91 64 09 	lds	r24, 0x0964
    3aa8:	90 91 65 09 	lds	r25, 0x0965
    3aac:	8c 17       	cp	r24, r28
    3aae:	9d 07       	cpc	r25, r29
    3ab0:	34 f0       	brlt	.+12     	; 0x3abe <getRightSpeedFromInput+0xca>
    3ab2:	3f ef       	ldi	r19, 0xFF	; 255
    3ab4:	83 16       	cp	r8, r19
    3ab6:	3f ef       	ldi	r19, 0xFF	; 255
    3ab8:	93 06       	cpc	r9, r19
    3aba:	09 f4       	brne	.+2      	; 0x3abe <getRightSpeedFromInput+0xca>
    3abc:	2f c1       	rjmp	.+606    	; 0x3d1c <getRightSpeedFromInput+0x328>
    3abe:	80 91 74 09 	lds	r24, 0x0974
    3ac2:	90 91 75 09 	lds	r25, 0x0975
    3ac6:	8c 17       	cp	r24, r28
    3ac8:	9d 07       	cpc	r25, r29
    3aca:	34 f0       	brlt	.+12     	; 0x3ad8 <getRightSpeedFromInput+0xe4>
    3acc:	8f ef       	ldi	r24, 0xFF	; 255
    3ace:	88 16       	cp	r8, r24
    3ad0:	8f ef       	ldi	r24, 0xFF	; 255
    3ad2:	98 06       	cpc	r9, r24
    3ad4:	09 f4       	brne	.+2      	; 0x3ad8 <getRightSpeedFromInput+0xe4>
    3ad6:	1e c1       	rjmp	.+572    	; 0x3d14 <getRightSpeedFromInput+0x320>
    3ad8:	80 91 84 09 	lds	r24, 0x0984
    3adc:	90 91 85 09 	lds	r25, 0x0985
    3ae0:	8c 17       	cp	r24, r28
    3ae2:	9d 07       	cpc	r25, r29
    3ae4:	34 f0       	brlt	.+12     	; 0x3af2 <getRightSpeedFromInput+0xfe>
    3ae6:	9f ef       	ldi	r25, 0xFF	; 255
    3ae8:	89 16       	cp	r8, r25
    3aea:	9f ef       	ldi	r25, 0xFF	; 255
    3aec:	99 06       	cpc	r9, r25
    3aee:	09 f4       	brne	.+2      	; 0x3af2 <getRightSpeedFromInput+0xfe>
    3af0:	0d c1       	rjmp	.+538    	; 0x3d0c <getRightSpeedFromInput+0x318>
    3af2:	c0 90 94 09 	lds	r12, 0x0994
    3af6:	d0 90 95 09 	lds	r13, 0x0995
    3afa:	cc 16       	cp	r12, r28
    3afc:	dd 06       	cpc	r13, r29
    3afe:	34 f0       	brlt	.+12     	; 0x3b0c <getRightSpeedFromInput+0x118>
    3b00:	ef ef       	ldi	r30, 0xFF	; 255
    3b02:	8e 16       	cp	r8, r30
    3b04:	ef ef       	ldi	r30, 0xFF	; 255
    3b06:	9e 06       	cpc	r9, r30
    3b08:	09 f4       	brne	.+2      	; 0x3b0c <getRightSpeedFromInput+0x118>
    3b0a:	fc c0       	rjmp	.+504    	; 0x3d04 <getRightSpeedFromInput+0x310>
			}
		}        
    }

    if(pwm_right >= 0) {
        if(last_right_vel == 0) {
    3b0c:	20 97       	sbiw	r28, 0x00	; 0
    3b0e:	09 f4       	brne	.+2      	; 0x3b12 <getRightSpeedFromInput+0x11e>
    3b10:	60 c0       	rjmp	.+192    	; 0x3bd2 <getRightSpeedFromInput+0x1de>
            speedRightFromEnc = 0;
        } else {
            if(indFwR==0) {  // the velocity is lower than first saved in the matrix
    3b12:	81 14       	cp	r8, r1
    3b14:	91 04       	cpc	r9, r1
    3b16:	09 f4       	brne	.+2      	; 0x3b1a <getRightSpeedFromInput+0x126>
    3b18:	42 c1       	rjmp	.+644    	; 0x3d9e <getRightSpeedFromInput+0x3aa>
                speedRightFromEnc = (last_right_vel*calibration[0][3])/calibration[0][2];
            } else if(indFwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    3b1a:	3f ef       	ldi	r19, 0xFF	; 255
    3b1c:	83 16       	cp	r8, r19
    3b1e:	3f ef       	ldi	r19, 0xFF	; 255
    3b20:	93 06       	cpc	r9, r19
    3b22:	09 f4       	brne	.+2      	; 0x3b26 <getRightSpeedFromInput+0x132>
    3b24:	0d c1       	rjmp	.+538    	; 0x3d40 <getRightSpeedFromInput+0x34c>
                speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][3]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][2]);  // take the max
            } else {
                speedRightFromEnc = calibration[indFwR-1][3] + (signed int)(((float)(last_right_vel-calibration[indFwR-1][2])*(float)(calibration[indFwR][3]-calibration[indFwR-1][3]))/(float)(calibration[indFwR][2]-calibration[indFwR-1][2]));
    3b26:	f4 01       	movw	r30, r8
    3b28:	31 97       	sbiw	r30, 0x01	; 1
    3b2a:	e2 95       	swap	r30
    3b2c:	f2 95       	swap	r31
    3b2e:	f0 7f       	andi	r31, 0xF0	; 240
    3b30:	fe 27       	eor	r31, r30
    3b32:	e0 7f       	andi	r30, 0xF0	; 240
    3b34:	fe 27       	eor	r31, r30
    3b36:	df 01       	movw	r26, r30
    3b38:	ac 5e       	subi	r26, 0xEC	; 236
    3b3a:	b6 4f       	sbci	r27, 0xF6	; 246
    3b3c:	cd 90       	ld	r12, X+
    3b3e:	dc 90       	ld	r13, X
    3b40:	e0 5f       	subi	r30, 0xF0	; 240
    3b42:	f6 4f       	sbci	r31, 0xF6	; 246
    3b44:	a6 80       	ldd	r10, Z+6	; 0x06
    3b46:	b7 80       	ldd	r11, Z+7	; 0x07
    3b48:	cc 19       	sub	r28, r12
    3b4a:	dd 09       	sbc	r29, r13
    3b4c:	be 01       	movw	r22, r28
    3b4e:	88 27       	eor	r24, r24
    3b50:	77 fd       	sbrc	r23, 7
    3b52:	80 95       	com	r24
    3b54:	98 2f       	mov	r25, r24
    3b56:	0e 94 e5 55 	call	0xabca	; 0xabca <__floatsisf>
    3b5a:	7b 01       	movw	r14, r22
    3b5c:	8c 01       	movw	r16, r24
    3b5e:	82 94       	swap	r8
    3b60:	92 94       	swap	r9
    3b62:	b0 ef       	ldi	r27, 0xF0	; 240
    3b64:	9b 22       	and	r9, r27
    3b66:	98 24       	eor	r9, r8
    3b68:	8b 22       	and	r8, r27
    3b6a:	98 24       	eor	r9, r8
    3b6c:	f4 01       	movw	r30, r8
    3b6e:	e0 5f       	subi	r30, 0xF0	; 240
    3b70:	f6 4f       	sbci	r31, 0xF6	; 246
    3b72:	66 81       	ldd	r22, Z+6	; 0x06
    3b74:	77 81       	ldd	r23, Z+7	; 0x07
    3b76:	6a 19       	sub	r22, r10
    3b78:	7b 09       	sbc	r23, r11
    3b7a:	88 27       	eor	r24, r24
    3b7c:	77 fd       	sbrc	r23, 7
    3b7e:	80 95       	com	r24
    3b80:	98 2f       	mov	r25, r24
    3b82:	0e 94 e5 55 	call	0xabca	; 0xabca <__floatsisf>
    3b86:	9b 01       	movw	r18, r22
    3b88:	ac 01       	movw	r20, r24
    3b8a:	c8 01       	movw	r24, r16
    3b8c:	b7 01       	movw	r22, r14
    3b8e:	0e 94 fe 56 	call	0xadfc	; 0xadfc <__mulsf3>
    3b92:	7b 01       	movw	r14, r22
    3b94:	8c 01       	movw	r16, r24
    3b96:	84 e1       	ldi	r24, 0x14	; 20
    3b98:	99 e0       	ldi	r25, 0x09	; 9
    3b9a:	88 0e       	add	r8, r24
    3b9c:	99 1e       	adc	r9, r25
    3b9e:	f4 01       	movw	r30, r8
    3ba0:	60 81       	ld	r22, Z
    3ba2:	71 81       	ldd	r23, Z+1	; 0x01
    3ba4:	6c 19       	sub	r22, r12
    3ba6:	7d 09       	sbc	r23, r13
    3ba8:	88 27       	eor	r24, r24
    3baa:	77 fd       	sbrc	r23, 7
    3bac:	80 95       	com	r24
    3bae:	98 2f       	mov	r25, r24
    3bb0:	0e 94 e5 55 	call	0xabca	; 0xabca <__floatsisf>
    3bb4:	9b 01       	movw	r18, r22
    3bb6:	ac 01       	movw	r20, r24
    3bb8:	c8 01       	movw	r24, r16
    3bba:	b7 01       	movw	r22, r14
    3bbc:	0e 94 4a 55 	call	0xaa94	; 0xaa94 <__divsf3>
    3bc0:	0e 94 b2 55 	call	0xab64	; 0xab64 <__fixsfsi>
    3bc4:	6a 0d       	add	r22, r10
    3bc6:	7b 1d       	adc	r23, r11
    3bc8:	70 93 e3 04 	sts	0x04E3, r23
    3bcc:	60 93 e2 04 	sts	0x04E2, r22
    3bd0:	04 c0       	rjmp	.+8      	; 0x3bda <getRightSpeedFromInput+0x1e6>
		}        
    }

    if(pwm_right >= 0) {
        if(last_right_vel == 0) {
            speedRightFromEnc = 0;
    3bd2:	10 92 e3 04 	sts	0x04E3, r1
    3bd6:	10 92 e2 04 	sts	0x04E2, r1
        	speedRightFromEnc = calibration[indBwR-1][7] + (signed int)(((float)(last_right_vel-calibration[indBwR-1][6])*(float)(calibration[indBwR][7]-calibration[indBwR-1][7]))/(float)(calibration[indBwR][6]-calibration[indBwR-1][6]));
		}
		speedRightFromEnc = -speedRightFromEnc;
    }
    
}
    3bda:	df 91       	pop	r29
    3bdc:	cf 91       	pop	r28
    3bde:	1f 91       	pop	r17
    3be0:	0f 91       	pop	r16
    3be2:	ff 90       	pop	r15
    3be4:	ef 90       	pop	r14
    3be6:	df 90       	pop	r13
    3be8:	cf 90       	pop	r12
    3bea:	bf 90       	pop	r11
    3bec:	af 90       	pop	r10
    3bee:	9f 90       	pop	r9
    3bf0:	8f 90       	pop	r8
    3bf2:	08 95       	ret
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    3bf4:	60 91 1c 09 	lds	r22, 0x091C
    3bf8:	70 91 1d 09 	lds	r23, 0x091D
    3bfc:	6c 17       	cp	r22, r28
    3bfe:	7d 07       	cpc	r23, r29
    3c00:	0c f0       	brlt	.+2      	; 0x3c04 <getRightSpeedFromInput+0x210>
    3c02:	2b c1       	rjmp	.+598    	; 0x3e5a <getRightSpeedFromInput+0x466>
    3c04:	0f ef       	ldi	r16, 0xFF	; 255
    3c06:	1f ef       	ldi	r17, 0xFF	; 255
    3c08:	80 91 2c 09 	lds	r24, 0x092C
    3c0c:	90 91 2d 09 	lds	r25, 0x092D
    3c10:	8c 17       	cp	r24, r28
    3c12:	9d 07       	cpc	r25, r29
    3c14:	2c f0       	brlt	.+10     	; 0x3c20 <getRightSpeedFromInput+0x22c>
    3c16:	2f ef       	ldi	r18, 0xFF	; 255
    3c18:	0f 3f       	cpi	r16, 0xFF	; 255
    3c1a:	12 07       	cpc	r17, r18
    3c1c:	09 f4       	brne	.+2      	; 0x3c20 <getRightSpeedFromInput+0x22c>
    3c1e:	20 c1       	rjmp	.+576    	; 0x3e60 <getRightSpeedFromInput+0x46c>
    3c20:	80 91 3c 09 	lds	r24, 0x093C
    3c24:	90 91 3d 09 	lds	r25, 0x093D
    3c28:	8c 17       	cp	r24, r28
    3c2a:	9d 07       	cpc	r25, r29
    3c2c:	2c f0       	brlt	.+10     	; 0x3c38 <getRightSpeedFromInput+0x244>
    3c2e:	3f ef       	ldi	r19, 0xFF	; 255
    3c30:	0f 3f       	cpi	r16, 0xFF	; 255
    3c32:	13 07       	cpc	r17, r19
    3c34:	09 f4       	brne	.+2      	; 0x3c38 <getRightSpeedFromInput+0x244>
    3c36:	26 c1       	rjmp	.+588    	; 0x3e84 <getRightSpeedFromInput+0x490>
    3c38:	80 91 4c 09 	lds	r24, 0x094C
    3c3c:	90 91 4d 09 	lds	r25, 0x094D
    3c40:	8c 17       	cp	r24, r28
    3c42:	9d 07       	cpc	r25, r29
    3c44:	2c f0       	brlt	.+10     	; 0x3c50 <getRightSpeedFromInput+0x25c>
    3c46:	8f ef       	ldi	r24, 0xFF	; 255
    3c48:	0f 3f       	cpi	r16, 0xFF	; 255
    3c4a:	18 07       	cpc	r17, r24
    3c4c:	09 f4       	brne	.+2      	; 0x3c50 <getRightSpeedFromInput+0x25c>
    3c4e:	17 c1       	rjmp	.+558    	; 0x3e7e <getRightSpeedFromInput+0x48a>
    3c50:	80 91 5c 09 	lds	r24, 0x095C
    3c54:	90 91 5d 09 	lds	r25, 0x095D
    3c58:	8c 17       	cp	r24, r28
    3c5a:	9d 07       	cpc	r25, r29
    3c5c:	2c f0       	brlt	.+10     	; 0x3c68 <getRightSpeedFromInput+0x274>
    3c5e:	9f ef       	ldi	r25, 0xFF	; 255
    3c60:	0f 3f       	cpi	r16, 0xFF	; 255
    3c62:	19 07       	cpc	r17, r25
    3c64:	09 f4       	brne	.+2      	; 0x3c68 <getRightSpeedFromInput+0x274>
    3c66:	08 c1       	rjmp	.+528    	; 0x3e78 <getRightSpeedFromInput+0x484>
    3c68:	80 91 6c 09 	lds	r24, 0x096C
    3c6c:	90 91 6d 09 	lds	r25, 0x096D
    3c70:	8c 17       	cp	r24, r28
    3c72:	9d 07       	cpc	r25, r29
    3c74:	2c f0       	brlt	.+10     	; 0x3c80 <getRightSpeedFromInput+0x28c>
    3c76:	ef ef       	ldi	r30, 0xFF	; 255
    3c78:	0f 3f       	cpi	r16, 0xFF	; 255
    3c7a:	1e 07       	cpc	r17, r30
    3c7c:	09 f4       	brne	.+2      	; 0x3c80 <getRightSpeedFromInput+0x28c>
    3c7e:	f9 c0       	rjmp	.+498    	; 0x3e72 <getRightSpeedFromInput+0x47e>
    3c80:	80 91 7c 09 	lds	r24, 0x097C
    3c84:	90 91 7d 09 	lds	r25, 0x097D
    3c88:	8c 17       	cp	r24, r28
    3c8a:	9d 07       	cpc	r25, r29
    3c8c:	2c f0       	brlt	.+10     	; 0x3c98 <getRightSpeedFromInput+0x2a4>
    3c8e:	ff ef       	ldi	r31, 0xFF	; 255
    3c90:	0f 3f       	cpi	r16, 0xFF	; 255
    3c92:	1f 07       	cpc	r17, r31
    3c94:	09 f4       	brne	.+2      	; 0x3c98 <getRightSpeedFromInput+0x2a4>
    3c96:	ea c0       	rjmp	.+468    	; 0x3e6c <getRightSpeedFromInput+0x478>
    3c98:	80 91 8c 09 	lds	r24, 0x098C
    3c9c:	90 91 8d 09 	lds	r25, 0x098D
    3ca0:	8c 17       	cp	r24, r28
    3ca2:	9d 07       	cpc	r25, r29
    3ca4:	2c f0       	brlt	.+10     	; 0x3cb0 <getRightSpeedFromInput+0x2bc>
    3ca6:	2f ef       	ldi	r18, 0xFF	; 255
    3ca8:	0f 3f       	cpi	r16, 0xFF	; 255
    3caa:	12 07       	cpc	r17, r18
    3cac:	09 f4       	brne	.+2      	; 0x3cb0 <getRightSpeedFromInput+0x2bc>
    3cae:	db c0       	rjmp	.+438    	; 0x3e66 <getRightSpeedFromInput+0x472>
    3cb0:	c0 90 9c 09 	lds	r12, 0x099C
    3cb4:	d0 90 9d 09 	lds	r13, 0x099D
    3cb8:	cc 16       	cp	r12, r28
    3cba:	dd 06       	cpc	r13, r29
    3cbc:	2c f0       	brlt	.+10     	; 0x3cc8 <getRightSpeedFromInput+0x2d4>
    3cbe:	3f ef       	ldi	r19, 0xFF	; 255
    3cc0:	0f 3f       	cpi	r16, 0xFF	; 255
    3cc2:	13 07       	cpc	r17, r19
    3cc4:	09 f4       	brne	.+2      	; 0x3cc8 <getRightSpeedFromInput+0x2d4>
    3cc6:	7e c0       	rjmp	.+252    	; 0x3dc4 <getRightSpeedFromInput+0x3d0>
            } else {
                speedRightFromEnc = calibration[indFwR-1][3] + (signed int)(((float)(last_right_vel-calibration[indFwR-1][2])*(float)(calibration[indFwR][3]-calibration[indFwR-1][3]))/(float)(calibration[indFwR][2]-calibration[indFwR-1][2]));
            }
        }
    } else {
		if(indBwR==0) {  // the velocity is lower than first saved in the matrix
    3cc8:	01 15       	cp	r16, r1
    3cca:	11 05       	cpc	r17, r1
    3ccc:	09 f0       	breq	.+2      	; 0x3cd0 <getRightSpeedFromInput+0x2dc>
    3cce:	7c c0       	rjmp	.+248    	; 0x3dc8 <getRightSpeedFromInput+0x3d4>
        	speedRightFromEnc = (last_right_vel*calibration[0][7])/calibration[0][6];
    3cd0:	80 91 1e 09 	lds	r24, 0x091E
    3cd4:	90 91 1f 09 	lds	r25, 0x091F
    3cd8:	9c 01       	movw	r18, r24
    3cda:	c2 9f       	mul	r28, r18
    3cdc:	c0 01       	movw	r24, r0
    3cde:	c3 9f       	mul	r28, r19
    3ce0:	90 0d       	add	r25, r0
    3ce2:	d2 9f       	mul	r29, r18
    3ce4:	90 0d       	add	r25, r0
    3ce6:	11 24       	eor	r1, r1
    3ce8:	0e 94 bc 57 	call	0xaf78	; 0xaf78 <__divmodhi4>
    3cec:	cb 01       	movw	r24, r22
		} else if(indBwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][7]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][6]);  // take the max
		} else {
        	speedRightFromEnc = calibration[indBwR-1][7] + (signed int)(((float)(last_right_vel-calibration[indBwR-1][6])*(float)(calibration[indBwR][7]-calibration[indBwR-1][7]))/(float)(calibration[indBwR][6]-calibration[indBwR-1][6]));
		}
		speedRightFromEnc = -speedRightFromEnc;
    3cee:	90 95       	com	r25
    3cf0:	81 95       	neg	r24
    3cf2:	9f 4f       	sbci	r25, 0xFF	; 255
    3cf4:	90 93 e3 04 	sts	0x04E3, r25
    3cf8:	80 93 e2 04 	sts	0x04E2, r24
    3cfc:	6e cf       	rjmp	.-292    	; 0x3bda <getRightSpeedFromInput+0x1e6>

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    3cfe:	88 24       	eor	r8, r8
    3d00:	99 24       	eor	r9, r9
    3d02:	99 ce       	rjmp	.-718    	; 0x3a36 <getRightSpeedFromInput+0x42>
    3d04:	88 e0       	ldi	r24, 0x08	; 8
    3d06:	88 2e       	mov	r8, r24
    3d08:	91 2c       	mov	r9, r1
    3d0a:	00 cf       	rjmp	.-512    	; 0x3b0c <getRightSpeedFromInput+0x118>
    3d0c:	97 e0       	ldi	r25, 0x07	; 7
    3d0e:	89 2e       	mov	r8, r25
    3d10:	91 2c       	mov	r9, r1
    3d12:	ef ce       	rjmp	.-546    	; 0x3af2 <getRightSpeedFromInput+0xfe>
    3d14:	26 e0       	ldi	r18, 0x06	; 6
    3d16:	82 2e       	mov	r8, r18
    3d18:	91 2c       	mov	r9, r1
    3d1a:	de ce       	rjmp	.-580    	; 0x3ad8 <getRightSpeedFromInput+0xe4>
    3d1c:	35 e0       	ldi	r19, 0x05	; 5
    3d1e:	83 2e       	mov	r8, r19
    3d20:	91 2c       	mov	r9, r1
    3d22:	cd ce       	rjmp	.-614    	; 0x3abe <getRightSpeedFromInput+0xca>
    3d24:	44 e0       	ldi	r20, 0x04	; 4
    3d26:	84 2e       	mov	r8, r20
    3d28:	91 2c       	mov	r9, r1
    3d2a:	bc ce       	rjmp	.-648    	; 0x3aa4 <getRightSpeedFromInput+0xb0>
    3d2c:	53 e0       	ldi	r21, 0x03	; 3
    3d2e:	85 2e       	mov	r8, r21
    3d30:	91 2c       	mov	r9, r1
    3d32:	ab ce       	rjmp	.-682    	; 0x3a8a <getRightSpeedFromInput+0x96>
    3d34:	e2 e0       	ldi	r30, 0x02	; 2
    3d36:	8e 2e       	mov	r8, r30
    3d38:	91 2c       	mov	r9, r1
    3d3a:	9a ce       	rjmp	.-716    	; 0x3a70 <getRightSpeedFromInput+0x7c>
    3d3c:	81 e0       	ldi	r24, 0x01	; 1
    3d3e:	89 ce       	rjmp	.-750    	; 0x3a52 <getRightSpeedFromInput+0x5e>
            speedRightFromEnc = 0;
        } else {
            if(indFwR==0) {  // the velocity is lower than first saved in the matrix
                speedRightFromEnc = (last_right_vel*calibration[0][3])/calibration[0][2];
            } else if(indFwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
                speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][3]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][2]);  // take the max
    3d40:	60 91 96 09 	lds	r22, 0x0996
    3d44:	70 91 97 09 	lds	r23, 0x0997
    3d48:	88 27       	eor	r24, r24
    3d4a:	77 fd       	sbrc	r23, 7
    3d4c:	80 95       	com	r24
    3d4e:	98 2f       	mov	r25, r24
    3d50:	0e 94 e5 55 	call	0xabca	; 0xabca <__floatsisf>
    3d54:	7b 01       	movw	r14, r22
    3d56:	8c 01       	movw	r16, r24
    3d58:	be 01       	movw	r22, r28
    3d5a:	88 27       	eor	r24, r24
    3d5c:	77 fd       	sbrc	r23, 7
    3d5e:	80 95       	com	r24
    3d60:	98 2f       	mov	r25, r24
    3d62:	0e 94 e5 55 	call	0xabca	; 0xabca <__floatsisf>
    3d66:	9b 01       	movw	r18, r22
    3d68:	ac 01       	movw	r20, r24
    3d6a:	c8 01       	movw	r24, r16
    3d6c:	b7 01       	movw	r22, r14
    3d6e:	0e 94 fe 56 	call	0xadfc	; 0xadfc <__mulsf3>
    3d72:	7b 01       	movw	r14, r22
    3d74:	8c 01       	movw	r16, r24
    3d76:	b6 01       	movw	r22, r12
    3d78:	88 27       	eor	r24, r24
    3d7a:	77 fd       	sbrc	r23, 7
    3d7c:	80 95       	com	r24
    3d7e:	98 2f       	mov	r25, r24
    3d80:	0e 94 e5 55 	call	0xabca	; 0xabca <__floatsisf>
    3d84:	9b 01       	movw	r18, r22
    3d86:	ac 01       	movw	r20, r24
    3d88:	c8 01       	movw	r24, r16
    3d8a:	b7 01       	movw	r22, r14
    3d8c:	0e 94 4a 55 	call	0xaa94	; 0xaa94 <__divsf3>
    3d90:	0e 94 b2 55 	call	0xab64	; 0xab64 <__fixsfsi>
    3d94:	70 93 e3 04 	sts	0x04E3, r23
    3d98:	60 93 e2 04 	sts	0x04E2, r22
    3d9c:	1e cf       	rjmp	.-452    	; 0x3bda <getRightSpeedFromInput+0x1e6>
    if(pwm_right >= 0) {
        if(last_right_vel == 0) {
            speedRightFromEnc = 0;
        } else {
            if(indFwR==0) {  // the velocity is lower than first saved in the matrix
                speedRightFromEnc = (last_right_vel*calibration[0][3])/calibration[0][2];
    3d9e:	80 91 16 09 	lds	r24, 0x0916
    3da2:	90 91 17 09 	lds	r25, 0x0917
    3da6:	9c 01       	movw	r18, r24
    3da8:	c2 9f       	mul	r28, r18
    3daa:	c0 01       	movw	r24, r0
    3dac:	c3 9f       	mul	r28, r19
    3dae:	90 0d       	add	r25, r0
    3db0:	d2 9f       	mul	r29, r18
    3db2:	90 0d       	add	r25, r0
    3db4:	11 24       	eor	r1, r1
    3db6:	0e 94 bc 57 	call	0xaf78	; 0xaf78 <__divmodhi4>
    3dba:	70 93 e3 04 	sts	0x04E3, r23
    3dbe:	60 93 e2 04 	sts	0x04E2, r22
    3dc2:	0b cf       	rjmp	.-490    	; 0x3bda <getRightSpeedFromInput+0x1e6>
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    3dc4:	08 e0       	ldi	r16, 0x08	; 8
    3dc6:	10 e0       	ldi	r17, 0x00	; 0
            }
        }
    } else {
		if(indBwR==0) {  // the velocity is lower than first saved in the matrix
        	speedRightFromEnc = (last_right_vel*calibration[0][7])/calibration[0][6];
		} else if(indBwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    3dc8:	3f ef       	ldi	r19, 0xFF	; 255
    3dca:	0f 3f       	cpi	r16, 0xFF	; 255
    3dcc:	13 07       	cpc	r17, r19
    3dce:	09 f4       	brne	.+2      	; 0x3dd2 <getRightSpeedFromInput+0x3de>
    3dd0:	5c c0       	rjmp	.+184    	; 0x3e8a <getRightSpeedFromInput+0x496>
        	speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][7]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][6]);  // take the max
		} else {
        	speedRightFromEnc = calibration[indBwR-1][7] + (signed int)(((float)(last_right_vel-calibration[indBwR-1][6])*(float)(calibration[indBwR][7]-calibration[indBwR-1][7]))/(float)(calibration[indBwR][6]-calibration[indBwR-1][6]));
    3dd2:	02 95       	swap	r16
    3dd4:	12 95       	swap	r17
    3dd6:	10 7f       	andi	r17, 0xF0	; 240
    3dd8:	10 27       	eor	r17, r16
    3dda:	00 7f       	andi	r16, 0xF0	; 240
    3ddc:	10 27       	eor	r17, r16
    3dde:	f8 01       	movw	r30, r16
    3de0:	e0 50       	subi	r30, 0x00	; 0
    3de2:	f7 4f       	sbci	r31, 0xF7	; 247
    3de4:	a4 84       	ldd	r10, Z+12	; 0x0c
    3de6:	b5 84       	ldd	r11, Z+13	; 0x0d
    3de8:	86 84       	ldd	r8, Z+14	; 0x0e
    3dea:	97 84       	ldd	r9, Z+15	; 0x0f
    3dec:	ca 19       	sub	r28, r10
    3dee:	db 09       	sbc	r29, r11
    3df0:	be 01       	movw	r22, r28
    3df2:	88 27       	eor	r24, r24
    3df4:	77 fd       	sbrc	r23, 7
    3df6:	80 95       	com	r24
    3df8:	98 2f       	mov	r25, r24
    3dfa:	0e 94 e5 55 	call	0xabca	; 0xabca <__floatsisf>
    3dfe:	6b 01       	movw	r12, r22
    3e00:	7c 01       	movw	r14, r24
    3e02:	00 5f       	subi	r16, 0xF0	; 240
    3e04:	16 4f       	sbci	r17, 0xF6	; 246
    3e06:	f8 01       	movw	r30, r16
    3e08:	66 85       	ldd	r22, Z+14	; 0x0e
    3e0a:	77 85       	ldd	r23, Z+15	; 0x0f
    3e0c:	68 19       	sub	r22, r8
    3e0e:	79 09       	sbc	r23, r9
    3e10:	88 27       	eor	r24, r24
    3e12:	77 fd       	sbrc	r23, 7
    3e14:	80 95       	com	r24
    3e16:	98 2f       	mov	r25, r24
    3e18:	0e 94 e5 55 	call	0xabca	; 0xabca <__floatsisf>
    3e1c:	9b 01       	movw	r18, r22
    3e1e:	ac 01       	movw	r20, r24
    3e20:	c7 01       	movw	r24, r14
    3e22:	b6 01       	movw	r22, r12
    3e24:	0e 94 fe 56 	call	0xadfc	; 0xadfc <__mulsf3>
    3e28:	6b 01       	movw	r12, r22
    3e2a:	7c 01       	movw	r14, r24
    3e2c:	f8 01       	movw	r30, r16
    3e2e:	64 85       	ldd	r22, Z+12	; 0x0c
    3e30:	75 85       	ldd	r23, Z+13	; 0x0d
    3e32:	6a 19       	sub	r22, r10
    3e34:	7b 09       	sbc	r23, r11
    3e36:	88 27       	eor	r24, r24
    3e38:	77 fd       	sbrc	r23, 7
    3e3a:	80 95       	com	r24
    3e3c:	98 2f       	mov	r25, r24
    3e3e:	0e 94 e5 55 	call	0xabca	; 0xabca <__floatsisf>
    3e42:	9b 01       	movw	r18, r22
    3e44:	ac 01       	movw	r20, r24
    3e46:	c7 01       	movw	r24, r14
    3e48:	b6 01       	movw	r22, r12
    3e4a:	0e 94 4a 55 	call	0xaa94	; 0xaa94 <__divsf3>
    3e4e:	0e 94 b2 55 	call	0xab64	; 0xab64 <__fixsfsi>
    3e52:	68 0d       	add	r22, r8
    3e54:	79 1d       	adc	r23, r9
    3e56:	cb 01       	movw	r24, r22
    3e58:	4a cf       	rjmp	.-364    	; 0x3cee <getRightSpeedFromInput+0x2fa>
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    3e5a:	00 e0       	ldi	r16, 0x00	; 0
    3e5c:	10 e0       	ldi	r17, 0x00	; 0
    3e5e:	d4 ce       	rjmp	.-600    	; 0x3c08 <getRightSpeedFromInput+0x214>
    3e60:	01 e0       	ldi	r16, 0x01	; 1
    3e62:	10 e0       	ldi	r17, 0x00	; 0
    3e64:	dd ce       	rjmp	.-582    	; 0x3c20 <getRightSpeedFromInput+0x22c>
    3e66:	07 e0       	ldi	r16, 0x07	; 7
    3e68:	10 e0       	ldi	r17, 0x00	; 0
    3e6a:	22 cf       	rjmp	.-444    	; 0x3cb0 <getRightSpeedFromInput+0x2bc>
    3e6c:	06 e0       	ldi	r16, 0x06	; 6
    3e6e:	10 e0       	ldi	r17, 0x00	; 0
    3e70:	13 cf       	rjmp	.-474    	; 0x3c98 <getRightSpeedFromInput+0x2a4>
    3e72:	05 e0       	ldi	r16, 0x05	; 5
    3e74:	10 e0       	ldi	r17, 0x00	; 0
    3e76:	04 cf       	rjmp	.-504    	; 0x3c80 <getRightSpeedFromInput+0x28c>
    3e78:	04 e0       	ldi	r16, 0x04	; 4
    3e7a:	10 e0       	ldi	r17, 0x00	; 0
    3e7c:	f5 ce       	rjmp	.-534    	; 0x3c68 <getRightSpeedFromInput+0x274>
    3e7e:	03 e0       	ldi	r16, 0x03	; 3
    3e80:	10 e0       	ldi	r17, 0x00	; 0
    3e82:	e6 ce       	rjmp	.-564    	; 0x3c50 <getRightSpeedFromInput+0x25c>
    3e84:	02 e0       	ldi	r16, 0x02	; 2
    3e86:	10 e0       	ldi	r17, 0x00	; 0
    3e88:	d7 ce       	rjmp	.-594    	; 0x3c38 <getRightSpeedFromInput+0x244>
        }
    } else {
		if(indBwR==0) {  // the velocity is lower than first saved in the matrix
        	speedRightFromEnc = (last_right_vel*calibration[0][7])/calibration[0][6];
		} else if(indBwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][7]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][6]);  // take the max
    3e8a:	60 91 9e 09 	lds	r22, 0x099E
    3e8e:	70 91 9f 09 	lds	r23, 0x099F
    3e92:	88 27       	eor	r24, r24
    3e94:	77 fd       	sbrc	r23, 7
    3e96:	80 95       	com	r24
    3e98:	98 2f       	mov	r25, r24
    3e9a:	0e 94 e5 55 	call	0xabca	; 0xabca <__floatsisf>
    3e9e:	7b 01       	movw	r14, r22
    3ea0:	8c 01       	movw	r16, r24
    3ea2:	be 01       	movw	r22, r28
    3ea4:	88 27       	eor	r24, r24
    3ea6:	77 fd       	sbrc	r23, 7
    3ea8:	80 95       	com	r24
    3eaa:	98 2f       	mov	r25, r24
    3eac:	0e 94 e5 55 	call	0xabca	; 0xabca <__floatsisf>
    3eb0:	9b 01       	movw	r18, r22
    3eb2:	ac 01       	movw	r20, r24
    3eb4:	c8 01       	movw	r24, r16
    3eb6:	b7 01       	movw	r22, r14
    3eb8:	0e 94 fe 56 	call	0xadfc	; 0xadfc <__mulsf3>
    3ebc:	7b 01       	movw	r14, r22
    3ebe:	8c 01       	movw	r16, r24
    3ec0:	b6 01       	movw	r22, r12
    3ec2:	88 27       	eor	r24, r24
    3ec4:	77 fd       	sbrc	r23, 7
    3ec6:	80 95       	com	r24
    3ec8:	98 2f       	mov	r25, r24
    3eca:	0e 94 e5 55 	call	0xabca	; 0xabca <__floatsisf>
    3ece:	9b 01       	movw	r18, r22
    3ed0:	ac 01       	movw	r20, r24
    3ed2:	c8 01       	movw	r24, r16
    3ed4:	b7 01       	movw	r22, r14
    3ed6:	0e 94 4a 55 	call	0xaa94	; 0xaa94 <__divsf3>
    3eda:	0e 94 b2 55 	call	0xab64	; 0xab64 <__fixsfsi>
    3ede:	cb 01       	movw	r24, r22
    3ee0:	06 cf       	rjmp	.-500    	; 0x3cee <getRightSpeedFromInput+0x2fa>

00003ee2 <getLeftSpeedFromInput>:
    }
    
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {
    3ee2:	8f 92       	push	r8
    3ee4:	9f 92       	push	r9
    3ee6:	af 92       	push	r10
    3ee8:	bf 92       	push	r11
    3eea:	cf 92       	push	r12
    3eec:	df 92       	push	r13
    3eee:	ef 92       	push	r14
    3ef0:	ff 92       	push	r15
    3ef2:	0f 93       	push	r16
    3ef4:	1f 93       	push	r17
    3ef6:	cf 93       	push	r28
    3ef8:	df 93       	push	r29

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    3efa:	c0 91 0d 03 	lds	r28, 0x030D
    3efe:	d0 91 0e 03 	lds	r29, 0x030E
    3f02:	80 91 13 03 	lds	r24, 0x0313
    3f06:	90 91 14 03 	lds	r25, 0x0314
    3f0a:	97 fd       	sbrc	r25, 7
    3f0c:	f3 c0       	rjmp	.+486    	; 0x40f4 <getLeftSpeedFromInput+0x212>
    3f0e:	60 91 10 09 	lds	r22, 0x0910
    3f12:	70 91 11 09 	lds	r23, 0x0911
    3f16:	6c 17       	cp	r22, r28
    3f18:	7d 07       	cpc	r23, r29
    3f1a:	0c f0       	brlt	.+2      	; 0x3f1e <getLeftSpeedFromInput+0x3c>
    3f1c:	79 c1       	rjmp	.+754    	; 0x4210 <getLeftSpeedFromInput+0x32e>
    3f1e:	88 24       	eor	r8, r8
    3f20:	8a 94       	dec	r8
    3f22:	98 2c       	mov	r9, r8
    3f24:	80 91 20 09 	lds	r24, 0x0920
    3f28:	90 91 21 09 	lds	r25, 0x0921
    3f2c:	8c 17       	cp	r24, r28
    3f2e:	9d 07       	cpc	r25, r29
    3f30:	4c f0       	brlt	.+18     	; 0x3f44 <getLeftSpeedFromInput+0x62>
    3f32:	80 e0       	ldi	r24, 0x00	; 0
    3f34:	9f ef       	ldi	r25, 0xFF	; 255
    3f36:	89 16       	cp	r8, r25
    3f38:	9f ef       	ldi	r25, 0xFF	; 255
    3f3a:	99 06       	cpc	r9, r25
    3f3c:	09 f4       	brne	.+2      	; 0x3f40 <getLeftSpeedFromInput+0x5e>
    3f3e:	87 c1       	rjmp	.+782    	; 0x424e <getLeftSpeedFromInput+0x36c>
    3f40:	88 2e       	mov	r8, r24
    3f42:	99 24       	eor	r9, r9
    3f44:	80 91 30 09 	lds	r24, 0x0930
    3f48:	90 91 31 09 	lds	r25, 0x0931
    3f4c:	8c 17       	cp	r24, r28
    3f4e:	9d 07       	cpc	r25, r29
    3f50:	34 f0       	brlt	.+12     	; 0x3f5e <getLeftSpeedFromInput+0x7c>
    3f52:	ef ef       	ldi	r30, 0xFF	; 255
    3f54:	8e 16       	cp	r8, r30
    3f56:	ef ef       	ldi	r30, 0xFF	; 255
    3f58:	9e 06       	cpc	r9, r30
    3f5a:	09 f4       	brne	.+2      	; 0x3f5e <getLeftSpeedFromInput+0x7c>
    3f5c:	74 c1       	rjmp	.+744    	; 0x4246 <getLeftSpeedFromInput+0x364>
    3f5e:	80 91 40 09 	lds	r24, 0x0940
    3f62:	90 91 41 09 	lds	r25, 0x0941
    3f66:	8c 17       	cp	r24, r28
    3f68:	9d 07       	cpc	r25, r29
    3f6a:	34 f0       	brlt	.+12     	; 0x3f78 <getLeftSpeedFromInput+0x96>
    3f6c:	ff ef       	ldi	r31, 0xFF	; 255
    3f6e:	8f 16       	cp	r8, r31
    3f70:	ff ef       	ldi	r31, 0xFF	; 255
    3f72:	9f 06       	cpc	r9, r31
    3f74:	09 f4       	brne	.+2      	; 0x3f78 <getLeftSpeedFromInput+0x96>
    3f76:	63 c1       	rjmp	.+710    	; 0x423e <getLeftSpeedFromInput+0x35c>
    3f78:	80 91 50 09 	lds	r24, 0x0950
    3f7c:	90 91 51 09 	lds	r25, 0x0951
    3f80:	8c 17       	cp	r24, r28
    3f82:	9d 07       	cpc	r25, r29
    3f84:	34 f0       	brlt	.+12     	; 0x3f92 <getLeftSpeedFromInput+0xb0>
    3f86:	2f ef       	ldi	r18, 0xFF	; 255
    3f88:	82 16       	cp	r8, r18
    3f8a:	2f ef       	ldi	r18, 0xFF	; 255
    3f8c:	92 06       	cpc	r9, r18
    3f8e:	09 f4       	brne	.+2      	; 0x3f92 <getLeftSpeedFromInput+0xb0>
    3f90:	52 c1       	rjmp	.+676    	; 0x4236 <getLeftSpeedFromInput+0x354>
    3f92:	80 91 60 09 	lds	r24, 0x0960
    3f96:	90 91 61 09 	lds	r25, 0x0961
    3f9a:	8c 17       	cp	r24, r28
    3f9c:	9d 07       	cpc	r25, r29
    3f9e:	34 f0       	brlt	.+12     	; 0x3fac <getLeftSpeedFromInput+0xca>
    3fa0:	3f ef       	ldi	r19, 0xFF	; 255
    3fa2:	83 16       	cp	r8, r19
    3fa4:	3f ef       	ldi	r19, 0xFF	; 255
    3fa6:	93 06       	cpc	r9, r19
    3fa8:	09 f4       	brne	.+2      	; 0x3fac <getLeftSpeedFromInput+0xca>
    3faa:	41 c1       	rjmp	.+642    	; 0x422e <getLeftSpeedFromInput+0x34c>
    3fac:	80 91 70 09 	lds	r24, 0x0970
    3fb0:	90 91 71 09 	lds	r25, 0x0971
    3fb4:	8c 17       	cp	r24, r28
    3fb6:	9d 07       	cpc	r25, r29
    3fb8:	34 f0       	brlt	.+12     	; 0x3fc6 <getLeftSpeedFromInput+0xe4>
    3fba:	8f ef       	ldi	r24, 0xFF	; 255
    3fbc:	88 16       	cp	r8, r24
    3fbe:	8f ef       	ldi	r24, 0xFF	; 255
    3fc0:	98 06       	cpc	r9, r24
    3fc2:	09 f4       	brne	.+2      	; 0x3fc6 <getLeftSpeedFromInput+0xe4>
    3fc4:	30 c1       	rjmp	.+608    	; 0x4226 <getLeftSpeedFromInput+0x344>
    3fc6:	80 91 80 09 	lds	r24, 0x0980
    3fca:	90 91 81 09 	lds	r25, 0x0981
    3fce:	8c 17       	cp	r24, r28
    3fd0:	9d 07       	cpc	r25, r29
    3fd2:	34 f0       	brlt	.+12     	; 0x3fe0 <getLeftSpeedFromInput+0xfe>
    3fd4:	9f ef       	ldi	r25, 0xFF	; 255
    3fd6:	89 16       	cp	r8, r25
    3fd8:	9f ef       	ldi	r25, 0xFF	; 255
    3fda:	99 06       	cpc	r9, r25
    3fdc:	09 f4       	brne	.+2      	; 0x3fe0 <getLeftSpeedFromInput+0xfe>
    3fde:	1f c1       	rjmp	.+574    	; 0x421e <getLeftSpeedFromInput+0x33c>
    3fe0:	c0 90 90 09 	lds	r12, 0x0990
    3fe4:	d0 90 91 09 	lds	r13, 0x0991
    3fe8:	cc 16       	cp	r12, r28
    3fea:	dd 06       	cpc	r13, r29
    3fec:	34 f0       	brlt	.+12     	; 0x3ffa <getLeftSpeedFromInput+0x118>
    3fee:	ef ef       	ldi	r30, 0xFF	; 255
    3ff0:	8e 16       	cp	r8, r30
    3ff2:	ef ef       	ldi	r30, 0xFF	; 255
    3ff4:	9e 06       	cpc	r9, r30
    3ff6:	09 f4       	brne	.+2      	; 0x3ffa <getLeftSpeedFromInput+0x118>
    3ff8:	0e c1       	rjmp	.+540    	; 0x4216 <getLeftSpeedFromInput+0x334>
			}
		}     
    }

    if(pwm_left >= 0) {
        if(last_left_vel == 0) {
    3ffa:	20 97       	sbiw	r28, 0x00	; 0
    3ffc:	09 f4       	brne	.+2      	; 0x4000 <getLeftSpeedFromInput+0x11e>
    3ffe:	69 c0       	rjmp	.+210    	; 0x40d2 <getLeftSpeedFromInput+0x1f0>
            speedLeftFromEnc = 0;
        } else {
            if(indFwL==0) {  // the velocity is lower than first saved in the matrix
    4000:	81 14       	cp	r8, r1
    4002:	91 04       	cpc	r9, r1
    4004:	09 f4       	brne	.+2      	; 0x4008 <getLeftSpeedFromInput+0x126>
    4006:	54 c1       	rjmp	.+680    	; 0x42b0 <getLeftSpeedFromInput+0x3ce>
                speedLeftFromEnc = (last_left_vel*calibration[0][1])/calibration[0][0];
            } else if(indFwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    4008:	3f ef       	ldi	r19, 0xFF	; 255
    400a:	83 16       	cp	r8, r19
    400c:	3f ef       	ldi	r19, 0xFF	; 255
    400e:	93 06       	cpc	r9, r19
    4010:	09 f4       	brne	.+2      	; 0x4014 <getLeftSpeedFromInput+0x132>
    4012:	1f c1       	rjmp	.+574    	; 0x4252 <getLeftSpeedFromInput+0x370>
                speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][1]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][0]);  // take the max
            } else {
                speedLeftFromEnc = calibration[indFwL-1][1] + (signed int)(((float)(last_left_vel-calibration[indFwL-1][0])*(float)(calibration[indFwL][1]-calibration[indFwL-1][1]))/(float)(calibration[indFwL][0]-calibration[indFwL-1][0]));
    4014:	d4 01       	movw	r26, r8
    4016:	11 97       	sbiw	r26, 0x01	; 1
    4018:	fd 01       	movw	r30, r26
    401a:	e2 95       	swap	r30
    401c:	f2 95       	swap	r31
    401e:	f0 7f       	andi	r31, 0xF0	; 240
    4020:	fe 27       	eor	r31, r30
    4022:	e0 7f       	andi	r30, 0xF0	; 240
    4024:	fe 27       	eor	r31, r30
    4026:	e0 5f       	subi	r30, 0xF0	; 240
    4028:	f6 4f       	sbci	r31, 0xF6	; 246
    402a:	c0 80       	ld	r12, Z
    402c:	d1 80       	ldd	r13, Z+1	; 0x01
    402e:	aa 0f       	add	r26, r26
    4030:	bb 1f       	adc	r27, r27
    4032:	aa 0f       	add	r26, r26
    4034:	bb 1f       	adc	r27, r27
    4036:	aa 0f       	add	r26, r26
    4038:	bb 1f       	adc	r27, r27
    403a:	aa 0f       	add	r26, r26
    403c:	bb 1f       	adc	r27, r27
    403e:	ae 5e       	subi	r26, 0xEE	; 238
    4040:	b6 4f       	sbci	r27, 0xF6	; 246
    4042:	ad 90       	ld	r10, X+
    4044:	bc 90       	ld	r11, X
    4046:	cc 19       	sub	r28, r12
    4048:	dd 09       	sbc	r29, r13
    404a:	be 01       	movw	r22, r28
    404c:	88 27       	eor	r24, r24
    404e:	77 fd       	sbrc	r23, 7
    4050:	80 95       	com	r24
    4052:	98 2f       	mov	r25, r24
    4054:	0e 94 e5 55 	call	0xabca	; 0xabca <__floatsisf>
    4058:	7b 01       	movw	r14, r22
    405a:	8c 01       	movw	r16, r24
    405c:	88 0c       	add	r8, r8
    405e:	99 1c       	adc	r9, r9
    4060:	88 0c       	add	r8, r8
    4062:	99 1c       	adc	r9, r9
    4064:	88 0c       	add	r8, r8
    4066:	99 1c       	adc	r9, r9
    4068:	88 0c       	add	r8, r8
    406a:	99 1c       	adc	r9, r9
    406c:	f4 01       	movw	r30, r8
    406e:	ee 5e       	subi	r30, 0xEE	; 238
    4070:	f6 4f       	sbci	r31, 0xF6	; 246
    4072:	60 81       	ld	r22, Z
    4074:	71 81       	ldd	r23, Z+1	; 0x01
    4076:	6a 19       	sub	r22, r10
    4078:	7b 09       	sbc	r23, r11
    407a:	88 27       	eor	r24, r24
    407c:	77 fd       	sbrc	r23, 7
    407e:	80 95       	com	r24
    4080:	98 2f       	mov	r25, r24
    4082:	0e 94 e5 55 	call	0xabca	; 0xabca <__floatsisf>
    4086:	9b 01       	movw	r18, r22
    4088:	ac 01       	movw	r20, r24
    408a:	c8 01       	movw	r24, r16
    408c:	b7 01       	movw	r22, r14
    408e:	0e 94 fe 56 	call	0xadfc	; 0xadfc <__mulsf3>
    4092:	7b 01       	movw	r14, r22
    4094:	8c 01       	movw	r16, r24
    4096:	80 e1       	ldi	r24, 0x10	; 16
    4098:	99 e0       	ldi	r25, 0x09	; 9
    409a:	88 0e       	add	r8, r24
    409c:	99 1e       	adc	r9, r25
    409e:	f4 01       	movw	r30, r8
    40a0:	60 81       	ld	r22, Z
    40a2:	71 81       	ldd	r23, Z+1	; 0x01
    40a4:	6c 19       	sub	r22, r12
    40a6:	7d 09       	sbc	r23, r13
    40a8:	88 27       	eor	r24, r24
    40aa:	77 fd       	sbrc	r23, 7
    40ac:	80 95       	com	r24
    40ae:	98 2f       	mov	r25, r24
    40b0:	0e 94 e5 55 	call	0xabca	; 0xabca <__floatsisf>
    40b4:	9b 01       	movw	r18, r22
    40b6:	ac 01       	movw	r20, r24
    40b8:	c8 01       	movw	r24, r16
    40ba:	b7 01       	movw	r22, r14
    40bc:	0e 94 4a 55 	call	0xaa94	; 0xaa94 <__divsf3>
    40c0:	0e 94 b2 55 	call	0xab64	; 0xab64 <__fixsfsi>
    40c4:	6a 0d       	add	r22, r10
    40c6:	7b 1d       	adc	r23, r11
    40c8:	70 93 e1 04 	sts	0x04E1, r23
    40cc:	60 93 e0 04 	sts	0x04E0, r22
    40d0:	04 c0       	rjmp	.+8      	; 0x40da <getLeftSpeedFromInput+0x1f8>
		}     
    }

    if(pwm_left >= 0) {
        if(last_left_vel == 0) {
            speedLeftFromEnc = 0;
    40d2:	10 92 e1 04 	sts	0x04E1, r1
    40d6:	10 92 e0 04 	sts	0x04E0, r1
        	speedLeftFromEnc = calibration[indBwL-1][5] + (signed int)(((float)(last_left_vel-calibration[indBwL-1][4])*(float)(calibration[indBwL][5]-calibration[indBwL-1][5]))/(float)(calibration[indBwL][4]-calibration[indBwL-1][4]));
		}
		speedLeftFromEnc = -speedLeftFromEnc;
    }
    
}
    40da:	df 91       	pop	r29
    40dc:	cf 91       	pop	r28
    40de:	1f 91       	pop	r17
    40e0:	0f 91       	pop	r16
    40e2:	ff 90       	pop	r15
    40e4:	ef 90       	pop	r14
    40e6:	df 90       	pop	r13
    40e8:	cf 90       	pop	r12
    40ea:	bf 90       	pop	r11
    40ec:	af 90       	pop	r10
    40ee:	9f 90       	pop	r9
    40f0:	8f 90       	pop	r8
    40f2:	08 95       	ret
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    40f4:	60 91 18 09 	lds	r22, 0x0918
    40f8:	70 91 19 09 	lds	r23, 0x0919
    40fc:	6c 17       	cp	r22, r28
    40fe:	7d 07       	cpc	r23, r29
    4100:	0c f0       	brlt	.+2      	; 0x4104 <getLeftSpeedFromInput+0x222>
    4102:	4e c1       	rjmp	.+668    	; 0x43a0 <getLeftSpeedFromInput+0x4be>
    4104:	88 24       	eor	r8, r8
    4106:	8a 94       	dec	r8
    4108:	98 2c       	mov	r9, r8
    410a:	80 91 28 09 	lds	r24, 0x0928
    410e:	90 91 29 09 	lds	r25, 0x0929
    4112:	8c 17       	cp	r24, r28
    4114:	9d 07       	cpc	r25, r29
    4116:	34 f0       	brlt	.+12     	; 0x4124 <getLeftSpeedFromInput+0x242>
    4118:	2f ef       	ldi	r18, 0xFF	; 255
    411a:	82 16       	cp	r8, r18
    411c:	2f ef       	ldi	r18, 0xFF	; 255
    411e:	92 06       	cpc	r9, r18
    4120:	09 f4       	brne	.+2      	; 0x4124 <getLeftSpeedFromInput+0x242>
    4122:	41 c1       	rjmp	.+642    	; 0x43a6 <getLeftSpeedFromInput+0x4c4>
    4124:	80 91 38 09 	lds	r24, 0x0938
    4128:	90 91 39 09 	lds	r25, 0x0939
    412c:	8c 17       	cp	r24, r28
    412e:	9d 07       	cpc	r25, r29
    4130:	34 f0       	brlt	.+12     	; 0x413e <getLeftSpeedFromInput+0x25c>
    4132:	3f ef       	ldi	r19, 0xFF	; 255
    4134:	83 16       	cp	r8, r19
    4136:	3f ef       	ldi	r19, 0xFF	; 255
    4138:	93 06       	cpc	r9, r19
    413a:	09 f4       	brne	.+2      	; 0x413e <getLeftSpeedFromInput+0x25c>
    413c:	4c c1       	rjmp	.+664    	; 0x43d6 <getLeftSpeedFromInput+0x4f4>
    413e:	80 91 48 09 	lds	r24, 0x0948
    4142:	90 91 49 09 	lds	r25, 0x0949
    4146:	8c 17       	cp	r24, r28
    4148:	9d 07       	cpc	r25, r29
    414a:	34 f0       	brlt	.+12     	; 0x4158 <getLeftSpeedFromInput+0x276>
    414c:	8f ef       	ldi	r24, 0xFF	; 255
    414e:	88 16       	cp	r8, r24
    4150:	8f ef       	ldi	r24, 0xFF	; 255
    4152:	98 06       	cpc	r9, r24
    4154:	09 f4       	brne	.+2      	; 0x4158 <getLeftSpeedFromInput+0x276>
    4156:	3b c1       	rjmp	.+630    	; 0x43ce <getLeftSpeedFromInput+0x4ec>
    4158:	80 91 58 09 	lds	r24, 0x0958
    415c:	90 91 59 09 	lds	r25, 0x0959
    4160:	8c 17       	cp	r24, r28
    4162:	9d 07       	cpc	r25, r29
    4164:	34 f0       	brlt	.+12     	; 0x4172 <getLeftSpeedFromInput+0x290>
    4166:	9f ef       	ldi	r25, 0xFF	; 255
    4168:	89 16       	cp	r8, r25
    416a:	9f ef       	ldi	r25, 0xFF	; 255
    416c:	99 06       	cpc	r9, r25
    416e:	09 f4       	brne	.+2      	; 0x4172 <getLeftSpeedFromInput+0x290>
    4170:	2a c1       	rjmp	.+596    	; 0x43c6 <getLeftSpeedFromInput+0x4e4>
    4172:	80 91 68 09 	lds	r24, 0x0968
    4176:	90 91 69 09 	lds	r25, 0x0969
    417a:	8c 17       	cp	r24, r28
    417c:	9d 07       	cpc	r25, r29
    417e:	34 f0       	brlt	.+12     	; 0x418c <getLeftSpeedFromInput+0x2aa>
    4180:	ef ef       	ldi	r30, 0xFF	; 255
    4182:	8e 16       	cp	r8, r30
    4184:	ef ef       	ldi	r30, 0xFF	; 255
    4186:	9e 06       	cpc	r9, r30
    4188:	09 f4       	brne	.+2      	; 0x418c <getLeftSpeedFromInput+0x2aa>
    418a:	19 c1       	rjmp	.+562    	; 0x43be <getLeftSpeedFromInput+0x4dc>
    418c:	80 91 78 09 	lds	r24, 0x0978
    4190:	90 91 79 09 	lds	r25, 0x0979
    4194:	8c 17       	cp	r24, r28
    4196:	9d 07       	cpc	r25, r29
    4198:	34 f0       	brlt	.+12     	; 0x41a6 <getLeftSpeedFromInput+0x2c4>
    419a:	ff ef       	ldi	r31, 0xFF	; 255
    419c:	8f 16       	cp	r8, r31
    419e:	ff ef       	ldi	r31, 0xFF	; 255
    41a0:	9f 06       	cpc	r9, r31
    41a2:	09 f4       	brne	.+2      	; 0x41a6 <getLeftSpeedFromInput+0x2c4>
    41a4:	08 c1       	rjmp	.+528    	; 0x43b6 <getLeftSpeedFromInput+0x4d4>
    41a6:	80 91 88 09 	lds	r24, 0x0988
    41aa:	90 91 89 09 	lds	r25, 0x0989
    41ae:	8c 17       	cp	r24, r28
    41b0:	9d 07       	cpc	r25, r29
    41b2:	34 f0       	brlt	.+12     	; 0x41c0 <getLeftSpeedFromInput+0x2de>
    41b4:	2f ef       	ldi	r18, 0xFF	; 255
    41b6:	82 16       	cp	r8, r18
    41b8:	2f ef       	ldi	r18, 0xFF	; 255
    41ba:	92 06       	cpc	r9, r18
    41bc:	09 f4       	brne	.+2      	; 0x41c0 <getLeftSpeedFromInput+0x2de>
    41be:	f7 c0       	rjmp	.+494    	; 0x43ae <getLeftSpeedFromInput+0x4cc>
    41c0:	c0 90 98 09 	lds	r12, 0x0998
    41c4:	d0 90 99 09 	lds	r13, 0x0999
    41c8:	cc 16       	cp	r12, r28
    41ca:	dd 06       	cpc	r13, r29
    41cc:	34 f0       	brlt	.+12     	; 0x41da <getLeftSpeedFromInput+0x2f8>
    41ce:	3f ef       	ldi	r19, 0xFF	; 255
    41d0:	83 16       	cp	r8, r19
    41d2:	3f ef       	ldi	r19, 0xFF	; 255
    41d4:	93 06       	cpc	r9, r19
    41d6:	09 f4       	brne	.+2      	; 0x41da <getLeftSpeedFromInput+0x2f8>
    41d8:	7e c0       	rjmp	.+252    	; 0x42d6 <getLeftSpeedFromInput+0x3f4>
            } else {
                speedLeftFromEnc = calibration[indFwL-1][1] + (signed int)(((float)(last_left_vel-calibration[indFwL-1][0])*(float)(calibration[indFwL][1]-calibration[indFwL-1][1]))/(float)(calibration[indFwL][0]-calibration[indFwL-1][0]));
            }
        }
    } else {
		if(indBwL==0) {  // the velocity is lower than first saved in the matrix
    41da:	81 14       	cp	r8, r1
    41dc:	91 04       	cpc	r9, r1
    41de:	09 f0       	breq	.+2      	; 0x41e2 <getLeftSpeedFromInput+0x300>
    41e0:	7d c0       	rjmp	.+250    	; 0x42dc <getLeftSpeedFromInput+0x3fa>
        	speedLeftFromEnc = (last_left_vel*calibration[0][5])/calibration[0][4];
    41e2:	80 91 1a 09 	lds	r24, 0x091A
    41e6:	90 91 1b 09 	lds	r25, 0x091B
    41ea:	9c 01       	movw	r18, r24
    41ec:	c2 9f       	mul	r28, r18
    41ee:	c0 01       	movw	r24, r0
    41f0:	c3 9f       	mul	r28, r19
    41f2:	90 0d       	add	r25, r0
    41f4:	d2 9f       	mul	r29, r18
    41f6:	90 0d       	add	r25, r0
    41f8:	11 24       	eor	r1, r1
    41fa:	0e 94 bc 57 	call	0xaf78	; 0xaf78 <__divmodhi4>
    41fe:	cb 01       	movw	r24, r22
		} else if(indBwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][5]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][4]);  // take the max
		} else {
        	speedLeftFromEnc = calibration[indBwL-1][5] + (signed int)(((float)(last_left_vel-calibration[indBwL-1][4])*(float)(calibration[indBwL][5]-calibration[indBwL-1][5]))/(float)(calibration[indBwL][4]-calibration[indBwL-1][4]));
		}
		speedLeftFromEnc = -speedLeftFromEnc;
    4200:	90 95       	com	r25
    4202:	81 95       	neg	r24
    4204:	9f 4f       	sbci	r25, 0xFF	; 255
    4206:	90 93 e1 04 	sts	0x04E1, r25
    420a:	80 93 e0 04 	sts	0x04E0, r24
    420e:	65 cf       	rjmp	.-310    	; 0x40da <getLeftSpeedFromInput+0x1f8>

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    4210:	88 24       	eor	r8, r8
    4212:	99 24       	eor	r9, r9
    4214:	87 ce       	rjmp	.-754    	; 0x3f24 <getLeftSpeedFromInput+0x42>
    4216:	e8 e0       	ldi	r30, 0x08	; 8
    4218:	8e 2e       	mov	r8, r30
    421a:	91 2c       	mov	r9, r1
    421c:	ee ce       	rjmp	.-548    	; 0x3ffa <getLeftSpeedFromInput+0x118>
    421e:	f7 e0       	ldi	r31, 0x07	; 7
    4220:	8f 2e       	mov	r8, r31
    4222:	91 2c       	mov	r9, r1
    4224:	dd ce       	rjmp	.-582    	; 0x3fe0 <getLeftSpeedFromInput+0xfe>
    4226:	a6 e0       	ldi	r26, 0x06	; 6
    4228:	8a 2e       	mov	r8, r26
    422a:	91 2c       	mov	r9, r1
    422c:	cc ce       	rjmp	.-616    	; 0x3fc6 <getLeftSpeedFromInput+0xe4>
    422e:	b5 e0       	ldi	r27, 0x05	; 5
    4230:	8b 2e       	mov	r8, r27
    4232:	91 2c       	mov	r9, r1
    4234:	bb ce       	rjmp	.-650    	; 0x3fac <getLeftSpeedFromInput+0xca>
    4236:	14 e0       	ldi	r17, 0x04	; 4
    4238:	81 2e       	mov	r8, r17
    423a:	91 2c       	mov	r9, r1
    423c:	aa ce       	rjmp	.-684    	; 0x3f92 <getLeftSpeedFromInput+0xb0>
    423e:	03 e0       	ldi	r16, 0x03	; 3
    4240:	80 2e       	mov	r8, r16
    4242:	91 2c       	mov	r9, r1
    4244:	99 ce       	rjmp	.-718    	; 0x3f78 <getLeftSpeedFromInput+0x96>
    4246:	82 e0       	ldi	r24, 0x02	; 2
    4248:	88 2e       	mov	r8, r24
    424a:	91 2c       	mov	r9, r1
    424c:	88 ce       	rjmp	.-752    	; 0x3f5e <getLeftSpeedFromInput+0x7c>
    424e:	81 e0       	ldi	r24, 0x01	; 1
    4250:	77 ce       	rjmp	.-786    	; 0x3f40 <getLeftSpeedFromInput+0x5e>
            speedLeftFromEnc = 0;
        } else {
            if(indFwL==0) {  // the velocity is lower than first saved in the matrix
                speedLeftFromEnc = (last_left_vel*calibration[0][1])/calibration[0][0];
            } else if(indFwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
                speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][1]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][0]);  // take the max
    4252:	60 91 92 09 	lds	r22, 0x0992
    4256:	70 91 93 09 	lds	r23, 0x0993
    425a:	88 27       	eor	r24, r24
    425c:	77 fd       	sbrc	r23, 7
    425e:	80 95       	com	r24
    4260:	98 2f       	mov	r25, r24
    4262:	0e 94 e5 55 	call	0xabca	; 0xabca <__floatsisf>
    4266:	7b 01       	movw	r14, r22
    4268:	8c 01       	movw	r16, r24
    426a:	be 01       	movw	r22, r28
    426c:	88 27       	eor	r24, r24
    426e:	77 fd       	sbrc	r23, 7
    4270:	80 95       	com	r24
    4272:	98 2f       	mov	r25, r24
    4274:	0e 94 e5 55 	call	0xabca	; 0xabca <__floatsisf>
    4278:	9b 01       	movw	r18, r22
    427a:	ac 01       	movw	r20, r24
    427c:	c8 01       	movw	r24, r16
    427e:	b7 01       	movw	r22, r14
    4280:	0e 94 fe 56 	call	0xadfc	; 0xadfc <__mulsf3>
    4284:	7b 01       	movw	r14, r22
    4286:	8c 01       	movw	r16, r24
    4288:	b6 01       	movw	r22, r12
    428a:	88 27       	eor	r24, r24
    428c:	77 fd       	sbrc	r23, 7
    428e:	80 95       	com	r24
    4290:	98 2f       	mov	r25, r24
    4292:	0e 94 e5 55 	call	0xabca	; 0xabca <__floatsisf>
    4296:	9b 01       	movw	r18, r22
    4298:	ac 01       	movw	r20, r24
    429a:	c8 01       	movw	r24, r16
    429c:	b7 01       	movw	r22, r14
    429e:	0e 94 4a 55 	call	0xaa94	; 0xaa94 <__divsf3>
    42a2:	0e 94 b2 55 	call	0xab64	; 0xab64 <__fixsfsi>
    42a6:	70 93 e1 04 	sts	0x04E1, r23
    42aa:	60 93 e0 04 	sts	0x04E0, r22
    42ae:	15 cf       	rjmp	.-470    	; 0x40da <getLeftSpeedFromInput+0x1f8>
    if(pwm_left >= 0) {
        if(last_left_vel == 0) {
            speedLeftFromEnc = 0;
        } else {
            if(indFwL==0) {  // the velocity is lower than first saved in the matrix
                speedLeftFromEnc = (last_left_vel*calibration[0][1])/calibration[0][0];
    42b0:	80 91 12 09 	lds	r24, 0x0912
    42b4:	90 91 13 09 	lds	r25, 0x0913
    42b8:	9c 01       	movw	r18, r24
    42ba:	c2 9f       	mul	r28, r18
    42bc:	c0 01       	movw	r24, r0
    42be:	c3 9f       	mul	r28, r19
    42c0:	90 0d       	add	r25, r0
    42c2:	d2 9f       	mul	r29, r18
    42c4:	90 0d       	add	r25, r0
    42c6:	11 24       	eor	r1, r1
    42c8:	0e 94 bc 57 	call	0xaf78	; 0xaf78 <__divmodhi4>
    42cc:	70 93 e1 04 	sts	0x04E1, r23
    42d0:	60 93 e0 04 	sts	0x04E0, r22
    42d4:	02 cf       	rjmp	.-508    	; 0x40da <getLeftSpeedFromInput+0x1f8>
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    42d6:	98 e0       	ldi	r25, 0x08	; 8
    42d8:	89 2e       	mov	r8, r25
    42da:	91 2c       	mov	r9, r1
            }
        }
    } else {
		if(indBwL==0) {  // the velocity is lower than first saved in the matrix
        	speedLeftFromEnc = (last_left_vel*calibration[0][5])/calibration[0][4];
		} else if(indBwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    42dc:	3f ef       	ldi	r19, 0xFF	; 255
    42de:	83 16       	cp	r8, r19
    42e0:	3f ef       	ldi	r19, 0xFF	; 255
    42e2:	93 06       	cpc	r9, r19
    42e4:	09 f4       	brne	.+2      	; 0x42e8 <getLeftSpeedFromInput+0x406>
    42e6:	7b c0       	rjmp	.+246    	; 0x43de <getLeftSpeedFromInput+0x4fc>
        	speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][5]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][4]);  // take the max
		} else {
        	speedLeftFromEnc = calibration[indBwL-1][5] + (signed int)(((float)(last_left_vel-calibration[indBwL-1][4])*(float)(calibration[indBwL][5]-calibration[indBwL-1][5]))/(float)(calibration[indBwL][4]-calibration[indBwL-1][4]));
    42e8:	f4 01       	movw	r30, r8
    42ea:	31 97       	sbiw	r30, 0x01	; 1
    42ec:	ee 0f       	add	r30, r30
    42ee:	ff 1f       	adc	r31, r31
    42f0:	ee 0f       	add	r30, r30
    42f2:	ff 1f       	adc	r31, r31
    42f4:	ee 0f       	add	r30, r30
    42f6:	ff 1f       	adc	r31, r31
    42f8:	ee 0f       	add	r30, r30
    42fa:	ff 1f       	adc	r31, r31
    42fc:	df 01       	movw	r26, r30
    42fe:	a8 5e       	subi	r26, 0xE8	; 232
    4300:	b6 4f       	sbci	r27, 0xF6	; 246
    4302:	cd 90       	ld	r12, X+
    4304:	dc 90       	ld	r13, X
    4306:	e0 5f       	subi	r30, 0xF0	; 240
    4308:	f6 4f       	sbci	r31, 0xF6	; 246
    430a:	a2 84       	ldd	r10, Z+10	; 0x0a
    430c:	b3 84       	ldd	r11, Z+11	; 0x0b
    430e:	cc 19       	sub	r28, r12
    4310:	dd 09       	sbc	r29, r13
    4312:	be 01       	movw	r22, r28
    4314:	88 27       	eor	r24, r24
    4316:	77 fd       	sbrc	r23, 7
    4318:	80 95       	com	r24
    431a:	98 2f       	mov	r25, r24
    431c:	0e 94 e5 55 	call	0xabca	; 0xabca <__floatsisf>
    4320:	7b 01       	movw	r14, r22
    4322:	8c 01       	movw	r16, r24
    4324:	f4 01       	movw	r30, r8
    4326:	e2 95       	swap	r30
    4328:	f2 95       	swap	r31
    432a:	f0 7f       	andi	r31, 0xF0	; 240
    432c:	fe 27       	eor	r31, r30
    432e:	e0 7f       	andi	r30, 0xF0	; 240
    4330:	fe 27       	eor	r31, r30
    4332:	e0 5f       	subi	r30, 0xF0	; 240
    4334:	f6 4f       	sbci	r31, 0xF6	; 246
    4336:	62 85       	ldd	r22, Z+10	; 0x0a
    4338:	73 85       	ldd	r23, Z+11	; 0x0b
    433a:	6a 19       	sub	r22, r10
    433c:	7b 09       	sbc	r23, r11
    433e:	88 27       	eor	r24, r24
    4340:	77 fd       	sbrc	r23, 7
    4342:	80 95       	com	r24
    4344:	98 2f       	mov	r25, r24
    4346:	0e 94 e5 55 	call	0xabca	; 0xabca <__floatsisf>
    434a:	9b 01       	movw	r18, r22
    434c:	ac 01       	movw	r20, r24
    434e:	c8 01       	movw	r24, r16
    4350:	b7 01       	movw	r22, r14
    4352:	0e 94 fe 56 	call	0xadfc	; 0xadfc <__mulsf3>
    4356:	7b 01       	movw	r14, r22
    4358:	8c 01       	movw	r16, r24
    435a:	88 0c       	add	r8, r8
    435c:	99 1c       	adc	r9, r9
    435e:	88 0c       	add	r8, r8
    4360:	99 1c       	adc	r9, r9
    4362:	88 0c       	add	r8, r8
    4364:	99 1c       	adc	r9, r9
    4366:	88 0c       	add	r8, r8
    4368:	99 1c       	adc	r9, r9
    436a:	88 e1       	ldi	r24, 0x18	; 24
    436c:	99 e0       	ldi	r25, 0x09	; 9
    436e:	88 0e       	add	r8, r24
    4370:	99 1e       	adc	r9, r25
    4372:	f4 01       	movw	r30, r8
    4374:	60 81       	ld	r22, Z
    4376:	71 81       	ldd	r23, Z+1	; 0x01
    4378:	6c 19       	sub	r22, r12
    437a:	7d 09       	sbc	r23, r13
    437c:	88 27       	eor	r24, r24
    437e:	77 fd       	sbrc	r23, 7
    4380:	80 95       	com	r24
    4382:	98 2f       	mov	r25, r24
    4384:	0e 94 e5 55 	call	0xabca	; 0xabca <__floatsisf>
    4388:	9b 01       	movw	r18, r22
    438a:	ac 01       	movw	r20, r24
    438c:	c8 01       	movw	r24, r16
    438e:	b7 01       	movw	r22, r14
    4390:	0e 94 4a 55 	call	0xaa94	; 0xaa94 <__divsf3>
    4394:	0e 94 b2 55 	call	0xab64	; 0xab64 <__fixsfsi>
    4398:	6a 0d       	add	r22, r10
    439a:	7b 1d       	adc	r23, r11
    439c:	cb 01       	movw	r24, r22
    439e:	30 cf       	rjmp	.-416    	; 0x4200 <getLeftSpeedFromInput+0x31e>
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    43a0:	88 24       	eor	r8, r8
    43a2:	99 24       	eor	r9, r9
    43a4:	b2 ce       	rjmp	.-668    	; 0x410a <getLeftSpeedFromInput+0x228>
    43a6:	a1 e0       	ldi	r26, 0x01	; 1
    43a8:	8a 2e       	mov	r8, r26
    43aa:	91 2c       	mov	r9, r1
    43ac:	bb ce       	rjmp	.-650    	; 0x4124 <getLeftSpeedFromInput+0x242>
    43ae:	27 e0       	ldi	r18, 0x07	; 7
    43b0:	82 2e       	mov	r8, r18
    43b2:	91 2c       	mov	r9, r1
    43b4:	05 cf       	rjmp	.-502    	; 0x41c0 <getLeftSpeedFromInput+0x2de>
    43b6:	36 e0       	ldi	r19, 0x06	; 6
    43b8:	83 2e       	mov	r8, r19
    43ba:	91 2c       	mov	r9, r1
    43bc:	f4 ce       	rjmp	.-536    	; 0x41a6 <getLeftSpeedFromInput+0x2c4>
    43be:	45 e0       	ldi	r20, 0x05	; 5
    43c0:	84 2e       	mov	r8, r20
    43c2:	91 2c       	mov	r9, r1
    43c4:	e3 ce       	rjmp	.-570    	; 0x418c <getLeftSpeedFromInput+0x2aa>
    43c6:	54 e0       	ldi	r21, 0x04	; 4
    43c8:	85 2e       	mov	r8, r21
    43ca:	91 2c       	mov	r9, r1
    43cc:	d2 ce       	rjmp	.-604    	; 0x4172 <getLeftSpeedFromInput+0x290>
    43ce:	e3 e0       	ldi	r30, 0x03	; 3
    43d0:	8e 2e       	mov	r8, r30
    43d2:	91 2c       	mov	r9, r1
    43d4:	c1 ce       	rjmp	.-638    	; 0x4158 <getLeftSpeedFromInput+0x276>
    43d6:	f2 e0       	ldi	r31, 0x02	; 2
    43d8:	8f 2e       	mov	r8, r31
    43da:	91 2c       	mov	r9, r1
    43dc:	b0 ce       	rjmp	.-672    	; 0x413e <getLeftSpeedFromInput+0x25c>
        }
    } else {
		if(indBwL==0) {  // the velocity is lower than first saved in the matrix
        	speedLeftFromEnc = (last_left_vel*calibration[0][5])/calibration[0][4];
		} else if(indBwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][5]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][4]);  // take the max
    43de:	60 91 9a 09 	lds	r22, 0x099A
    43e2:	70 91 9b 09 	lds	r23, 0x099B
    43e6:	88 27       	eor	r24, r24
    43e8:	77 fd       	sbrc	r23, 7
    43ea:	80 95       	com	r24
    43ec:	98 2f       	mov	r25, r24
    43ee:	0e 94 e5 55 	call	0xabca	; 0xabca <__floatsisf>
    43f2:	7b 01       	movw	r14, r22
    43f4:	8c 01       	movw	r16, r24
    43f6:	be 01       	movw	r22, r28
    43f8:	88 27       	eor	r24, r24
    43fa:	77 fd       	sbrc	r23, 7
    43fc:	80 95       	com	r24
    43fe:	98 2f       	mov	r25, r24
    4400:	0e 94 e5 55 	call	0xabca	; 0xabca <__floatsisf>
    4404:	9b 01       	movw	r18, r22
    4406:	ac 01       	movw	r20, r24
    4408:	c8 01       	movw	r24, r16
    440a:	b7 01       	movw	r22, r14
    440c:	0e 94 fe 56 	call	0xadfc	; 0xadfc <__mulsf3>
    4410:	7b 01       	movw	r14, r22
    4412:	8c 01       	movw	r16, r24
    4414:	b6 01       	movw	r22, r12
    4416:	88 27       	eor	r24, r24
    4418:	77 fd       	sbrc	r23, 7
    441a:	80 95       	com	r24
    441c:	98 2f       	mov	r25, r24
    441e:	0e 94 e5 55 	call	0xabca	; 0xabca <__floatsisf>
    4422:	9b 01       	movw	r18, r22
    4424:	ac 01       	movw	r20, r24
    4426:	c8 01       	movw	r24, r16
    4428:	b7 01       	movw	r22, r14
    442a:	0e 94 4a 55 	call	0xaa94	; 0xaa94 <__divsf3>
    442e:	0e 94 b2 55 	call	0xab64	; 0xab64 <__fixsfsi>
    4432:	cb 01       	movw	r24, r22
    4434:	e5 ce       	rjmp	.-566    	; 0x4200 <getLeftSpeedFromInput+0x31e>

00004436 <__vector_45>:

}


// Motor left
ISR(TIMER4_OVF_vect) {
    4436:	1f 92       	push	r1
    4438:	0f 92       	push	r0
    443a:	0f b6       	in	r0, 0x3f	; 63
    443c:	0f 92       	push	r0
    443e:	11 24       	eor	r1, r1
    4440:	8f 93       	push	r24
    4442:	9f 93       	push	r25

//	LED_GREEN_ON;

	if(cliffDetectedFlag) {
    4444:	80 91 96 04 	lds	r24, 0x0496
    4448:	88 23       	and	r24, r24
    444a:	c1 f1       	breq	.+112    	; 0x44bc <__vector_45+0x86>
		pwm_left = 0;
    444c:	10 92 14 03 	sts	0x0314, r1
    4450:	10 92 13 03 	sts	0x0313, r1
		OCR4A = 0;
    4454:	10 92 a9 00 	sts	0x00A9, r1
    4458:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    445c:	10 92 ab 00 	sts	0x00AB, r1
    4460:	10 92 aa 00 	sts	0x00AA, r1
	}

	left_current_avg = 0;
    4464:	10 92 fe 02 	sts	0x02FE, r1
    4468:	10 92 fd 02 	sts	0x02FD, r1


		//leftMotorPhase = NO_PHASE;
		//compute_left_vel = 1;

		if(pwm_left_desired_to_control >= 0) {
    446c:	80 91 07 03 	lds	r24, 0x0307
    4470:	90 91 08 03 	lds	r25, 0x0308
    4474:	97 fd       	sbrc	r25, 7
    4476:	79 c0       	rjmp	.+242    	; 0x456a <__vector_45+0x134>
			leftMotorPhase = PASSIVE_PHASE;
    4478:	81 e0       	ldi	r24, 0x01	; 1
    447a:	80 93 44 02 	sts	0x0244, r24
			currentMotLeftChannel = 14;
    447e:	8e e0       	ldi	r24, 0x0E	; 14
    4480:	80 93 41 02 	sts	0x0241, r24
		} else {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 15;
		}
		firstSampleLeft = 1;
    4484:	81 e0       	ldi	r24, 0x01	; 1
    4486:	80 93 06 02 	sts	0x0206, r24

		// select channel 15 to sample left current
		//currentMotLeftChannel = 15;
		TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    448a:	80 91 a0 00 	lds	r24, 0x00A0
    448e:	8f 75       	andi	r24, 0x5F	; 95
    4490:	80 93 a0 00 	sts	0x00A0, r24
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    4494:	80 91 02 01 	lds	r24, 0x0102
    4498:	87 7e       	andi	r24, 0xE7	; 231
    449a:	80 93 02 01 	sts	0x0102, r24
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
    449e:	80 91 72 00 	lds	r24, 0x0072
    44a2:	89 7f       	andi	r24, 0xF9	; 249
    44a4:	80 93 72 00 	sts	0x0072, r24
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
    44a8:	89 b3       	in	r24, 0x19	; 25
    44aa:	86 60       	ori	r24, 0x06	; 6
    44ac:	89 bb       	out	0x19, r24	; 25
	}
*/

//	LED_GREEN_OFF;

}
    44ae:	9f 91       	pop	r25
    44b0:	8f 91       	pop	r24
    44b2:	0f 90       	pop	r0
    44b4:	0f be       	out	0x3f, r0	; 63
    44b6:	0f 90       	pop	r0
    44b8:	1f 90       	pop	r1
    44ba:	18 95       	reti
		pwm_left = 0;
		OCR4A = 0;
		OCR4B = 0;
	}

	left_current_avg = 0;
    44bc:	10 92 fe 02 	sts	0x02FE, r1
    44c0:	10 92 fd 02 	sts	0x02FD, r1

	// set pins mode based on controller output
	if(pwm_left == 0) {
    44c4:	80 91 13 03 	lds	r24, 0x0313
    44c8:	90 91 14 03 	lds	r25, 0x0314
    44cc:	00 97       	sbiw	r24, 0x00	; 0
    44ce:	71 f2       	breq	.-100    	; 0x446c <__vector_45+0x36>
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
	} else if(pwm_left > 0) {   		// move forward
    44d0:	18 16       	cp	r1, r24
    44d2:	19 06       	cpc	r1, r25
    44d4:	2c f5       	brge	.+74     	; 0x4520 <__vector_45+0xea>
		leftMotorPhase = ACTIVE_PHASE;
    44d6:	10 92 44 02 	sts	0x0244, r1
		// select channel 15 to sample left current
		currentMotLeftChannel = 15;
    44da:	8f e0       	ldi	r24, 0x0F	; 15
    44dc:	80 93 41 02 	sts	0x0241, r24
		TCCR4A  &= ~(1 << COM4B1);		// disable OCB
    44e0:	80 91 a0 00 	lds	r24, 0x00A0
    44e4:	8f 7d       	andi	r24, 0xDF	; 223
    44e6:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
    44ea:	80 91 72 00 	lds	r24, 0x0072
    44ee:	8b 7f       	andi	r24, 0xFB	; 251
    44f0:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 4);				// output to 0
    44f4:	80 91 02 01 	lds	r24, 0x0102
    44f8:	8f 7e       	andi	r24, 0xEF	; 239
    44fa:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4A1);		// enable OCA
    44fe:	80 91 a0 00 	lds	r24, 0x00A0
    4502:	80 68       	ori	r24, 0x80	; 128
    4504:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
    4508:	80 91 72 00 	lds	r24, 0x0072
    450c:	82 60       	ori	r24, 0x02	; 2
    450e:	80 93 72 00 	sts	0x0072, r24
	}
*/

//	LED_GREEN_OFF;

}
    4512:	9f 91       	pop	r25
    4514:	8f 91       	pop	r24
    4516:	0f 90       	pop	r0
    4518:	0f be       	out	0x3f, r0	; 63
    451a:	0f 90       	pop	r0
    451c:	1f 90       	pop	r1
    451e:	18 95       	reti
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
		PORTH &= ~(1 << 4);				// output to 0
		TCCR4A |= (1 << COM4A1);		// enable OCA
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
	} else if(pwm_left < 0) {      		// move backward
		leftMotorPhase = ACTIVE_PHASE;
    4520:	10 92 44 02 	sts	0x0244, r1
		// select channel 14 to sample left current
		currentMotLeftChannel = 14;
    4524:	8e e0       	ldi	r24, 0x0E	; 14
    4526:	80 93 41 02 	sts	0x0241, r24
		TCCR4A  &= ~(1 << COM4A1);		// disable OCA
    452a:	80 91 a0 00 	lds	r24, 0x00A0
    452e:	8f 77       	andi	r24, 0x7F	; 127
    4530:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4A);		// disable OCA interrupt
    4534:	80 91 72 00 	lds	r24, 0x0072
    4538:	8d 7f       	andi	r24, 0xFD	; 253
    453a:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 3);				// output to 0
    453e:	80 91 02 01 	lds	r24, 0x0102
    4542:	87 7f       	andi	r24, 0xF7	; 247
    4544:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4B1);		// enable OCB
    4548:	80 91 a0 00 	lds	r24, 0x00A0
    454c:	80 62       	ori	r24, 0x20	; 32
    454e:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
    4552:	80 91 72 00 	lds	r24, 0x0072
    4556:	84 60       	ori	r24, 0x04	; 4
    4558:	80 93 72 00 	sts	0x0072, r24
	}
*/

//	LED_GREEN_OFF;

}
    455c:	9f 91       	pop	r25
    455e:	8f 91       	pop	r24
    4560:	0f 90       	pop	r0
    4562:	0f be       	out	0x3f, r0	; 63
    4564:	0f 90       	pop	r0
    4566:	1f 90       	pop	r1
    4568:	18 95       	reti

		if(pwm_left_desired_to_control >= 0) {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 14;
		} else {
			leftMotorPhase = PASSIVE_PHASE;
    456a:	81 e0       	ldi	r24, 0x01	; 1
    456c:	80 93 44 02 	sts	0x0244, r24
			currentMotLeftChannel = 15;
    4570:	8f e0       	ldi	r24, 0x0F	; 15
    4572:	80 93 41 02 	sts	0x0241, r24
    4576:	86 cf       	rjmp	.-244    	; 0x4484 <__vector_45+0x4e>

00004578 <__vector_42>:
//	LED_GREEN_OFF;

}

// motor left forward
ISR(TIMER4_COMPA_vect) {
    4578:	1f 92       	push	r1
    457a:	0f 92       	push	r0
    457c:	0f b6       	in	r0, 0x3f	; 63
    457e:	0f 92       	push	r0
    4580:	11 24       	eor	r1, r1
    4582:	8f 93       	push	r24
    4584:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    4586:	91 e0       	ldi	r25, 0x01	; 1
    4588:	90 93 44 02 	sts	0x0244, r25
	// select channel 14 to sample the left velocity
	currentMotLeftChannel = 14;
    458c:	8e e0       	ldi	r24, 0x0E	; 14
    458e:	80 93 41 02 	sts	0x0241, r24

	firstSampleLeft = 1;
    4592:	90 93 06 02 	sts	0x0206, r25

//	LED_GREEN_OFF;

}
    4596:	9f 91       	pop	r25
    4598:	8f 91       	pop	r24
    459a:	0f 90       	pop	r0
    459c:	0f be       	out	0x3f, r0	; 63
    459e:	0f 90       	pop	r0
    45a0:	1f 90       	pop	r1
    45a2:	18 95       	reti

000045a4 <__vector_43>:

// motor left backward
ISR(TIMER4_COMPB_vect) {
    45a4:	1f 92       	push	r1
    45a6:	0f 92       	push	r0
    45a8:	0f b6       	in	r0, 0x3f	; 63
    45aa:	0f 92       	push	r0
    45ac:	11 24       	eor	r1, r1
    45ae:	8f 93       	push	r24
    45b0:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    45b2:	91 e0       	ldi	r25, 0x01	; 1
    45b4:	90 93 44 02 	sts	0x0244, r25
	// select channel 15 to sample the left velocity
	currentMotLeftChannel = 15;
    45b8:	8f e0       	ldi	r24, 0x0F	; 15
    45ba:	80 93 41 02 	sts	0x0241, r24

	firstSampleLeft = 1;
    45be:	90 93 06 02 	sts	0x0206, r25

//	LED_GREEN_OFF;

}
    45c2:	9f 91       	pop	r25
    45c4:	8f 91       	pop	r24
    45c6:	0f 90       	pop	r0
    45c8:	0f be       	out	0x3f, r0	; 63
    45ca:	0f 90       	pop	r0
    45cc:	1f 90       	pop	r1
    45ce:	18 95       	reti

000045d0 <__vector_35>:

// Motor right
ISR(TIMER3_OVF_vect) {
    45d0:	1f 92       	push	r1
    45d2:	0f 92       	push	r0
    45d4:	0f b6       	in	r0, 0x3f	; 63
    45d6:	0f 92       	push	r0
    45d8:	11 24       	eor	r1, r1
    45da:	8f 93       	push	r24
    45dc:	9f 93       	push	r25

//	LED_GREEN_ON;

  	// PORTB ^= (1 << 7); // Toggle the LED

	if(cliffDetectedFlag) {
    45de:	80 91 96 04 	lds	r24, 0x0496
    45e2:	88 23       	and	r24, r24
    45e4:	b1 f1       	breq	.+108    	; 0x4652 <__vector_35+0x82>
		pwm_right = 0;
    45e6:	10 92 12 03 	sts	0x0312, r1
    45ea:	10 92 11 03 	sts	0x0311, r1
		OCR3A = 0;
    45ee:	10 92 99 00 	sts	0x0099, r1
    45f2:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    45f6:	10 92 9b 00 	sts	0x009B, r1
    45fa:	10 92 9a 00 	sts	0x009A, r1
	}

	right_current_avg = 0;
    45fe:	10 92 00 03 	sts	0x0300, r1
    4602:	10 92 ff 02 	sts	0x02FF, r1
		//firstSampleRight = 0;

		//rightMotorPhase = NO_PHASE;
		//compute_right_vel = 1;

		if(pwm_right_desired_to_control >= 0) {
    4606:	80 91 05 03 	lds	r24, 0x0305
    460a:	90 91 06 03 	lds	r25, 0x0306
    460e:	97 fd       	sbrc	r25, 7
    4610:	6f c0       	rjmp	.+222    	; 0x46f0 <__vector_35+0x120>
			rightMotorPhase = PASSIVE_PHASE;
    4612:	81 e0       	ldi	r24, 0x01	; 1
    4614:	80 93 43 02 	sts	0x0243, r24
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
    4618:	8c e0       	ldi	r24, 0x0C	; 12
    461a:	80 93 42 02 	sts	0x0242, r24
		} else {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
		}
		firstSampleRight = 1;
    461e:	81 e0       	ldi	r24, 0x01	; 1
    4620:	80 93 05 02 	sts	0x0205, r24

		// select channel 13 to sample left current
		//currentMotRightChannel = 13;
		TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    4624:	80 91 90 00 	lds	r24, 0x0090
    4628:	8f 75       	andi	r24, 0x5F	; 95
    462a:	80 93 90 00 	sts	0x0090, r24
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    462e:	8e b1       	in	r24, 0x0e	; 14
    4630:	87 7e       	andi	r24, 0xE7	; 231
    4632:	8e b9       	out	0x0e, r24	; 14
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
    4634:	80 91 71 00 	lds	r24, 0x0071
    4638:	89 7f       	andi	r24, 0xF9	; 249
    463a:	80 93 71 00 	sts	0x0071, r24
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
    463e:	88 b3       	in	r24, 0x18	; 24
    4640:	86 60       	ori	r24, 0x06	; 6
    4642:	88 bb       	out	0x18, r24	; 24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    4644:	9f 91       	pop	r25
    4646:	8f 91       	pop	r24
    4648:	0f 90       	pop	r0
    464a:	0f be       	out	0x3f, r0	; 63
    464c:	0f 90       	pop	r0
    464e:	1f 90       	pop	r1
    4650:	18 95       	reti
		pwm_right = 0;
		OCR3A = 0;
		OCR3B = 0;
	}

	right_current_avg = 0;
    4652:	10 92 00 03 	sts	0x0300, r1
    4656:	10 92 ff 02 	sts	0x02FF, r1


	if(pwm_right == 0) {
    465a:	80 91 11 03 	lds	r24, 0x0311
    465e:	90 91 12 03 	lds	r25, 0x0312
    4662:	00 97       	sbiw	r24, 0x00	; 0
    4664:	81 f2       	breq	.-96     	; 0x4606 <__vector_35+0x36>
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
	}else if(pwm_right > 0) {   		// move forward
    4666:	18 16       	cp	r1, r24
    4668:	19 06       	cpc	r1, r25
    466a:	0c f5       	brge	.+66     	; 0x46ae <__vector_35+0xde>
		rightMotorPhase = ACTIVE_PHASE;
    466c:	10 92 43 02 	sts	0x0243, r1
		// select channel 13 to sample left current
		currentMotRightChannel = 13;
    4670:	8d e0       	ldi	r24, 0x0D	; 13
    4672:	80 93 42 02 	sts	0x0242, r24
		TCCR3A  &= ~(1 << COM3B1);		// disable OCB
    4676:	80 91 90 00 	lds	r24, 0x0090
    467a:	8f 7d       	andi	r24, 0xDF	; 223
    467c:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
    4680:	80 91 71 00 	lds	r24, 0x0071
    4684:	8b 7f       	andi	r24, 0xFB	; 251
    4686:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 4);				// output to 0
    468a:	74 98       	cbi	0x0e, 4	; 14
		TCCR3A |= (1 << COM3A1);		// enable OCA
    468c:	80 91 90 00 	lds	r24, 0x0090
    4690:	80 68       	ori	r24, 0x80	; 128
    4692:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
    4696:	80 91 71 00 	lds	r24, 0x0071
    469a:	82 60       	ori	r24, 0x02	; 2
    469c:	80 93 71 00 	sts	0x0071, r24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    46a0:	9f 91       	pop	r25
    46a2:	8f 91       	pop	r24
    46a4:	0f 90       	pop	r0
    46a6:	0f be       	out	0x3f, r0	; 63
    46a8:	0f 90       	pop	r0
    46aa:	1f 90       	pop	r1
    46ac:	18 95       	reti
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
		PORTE &= ~(1 << 4);				// output to 0
		TCCR3A |= (1 << COM3A1);		// enable OCA
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
	} else if(pwm_right < 0) {      	// move backward
		rightMotorPhase = ACTIVE_PHASE;
    46ae:	10 92 43 02 	sts	0x0243, r1
		// select channel 12 to sample left current
		currentMotRightChannel = 12;
    46b2:	8c e0       	ldi	r24, 0x0C	; 12
    46b4:	80 93 42 02 	sts	0x0242, r24
		TCCR3A  &= ~(1 << COM3A1);		// disable OCA
    46b8:	80 91 90 00 	lds	r24, 0x0090
    46bc:	8f 77       	andi	r24, 0x7F	; 127
    46be:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3A);		// disable OCA interrupt
    46c2:	80 91 71 00 	lds	r24, 0x0071
    46c6:	8d 7f       	andi	r24, 0xFD	; 253
    46c8:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 3);				// output to 0
    46cc:	73 98       	cbi	0x0e, 3	; 14
		TCCR3A |= (1 << COM3B1);		// enable OCB
    46ce:	80 91 90 00 	lds	r24, 0x0090
    46d2:	80 62       	ori	r24, 0x20	; 32
    46d4:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3B);		// enable OCB interrupt
    46d8:	80 91 71 00 	lds	r24, 0x0071
    46dc:	84 60       	ori	r24, 0x04	; 4
    46de:	80 93 71 00 	sts	0x0071, r24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    46e2:	9f 91       	pop	r25
    46e4:	8f 91       	pop	r24
    46e6:	0f 90       	pop	r0
    46e8:	0f be       	out	0x3f, r0	; 63
    46ea:	0f 90       	pop	r0
    46ec:	1f 90       	pop	r1
    46ee:	18 95       	reti
		if(pwm_right_desired_to_control >= 0) {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
		} else {
			rightMotorPhase = PASSIVE_PHASE;
    46f0:	81 e0       	ldi	r24, 0x01	; 1
    46f2:	80 93 43 02 	sts	0x0243, r24
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
    46f6:	8d e0       	ldi	r24, 0x0D	; 13
    46f8:	80 93 42 02 	sts	0x0242, r24
    46fc:	90 cf       	rjmp	.-224    	; 0x461e <__vector_35+0x4e>

000046fe <__vector_32>:
//	LED_GREEN_OFF;

}

// motor right forward
ISR(TIMER3_COMPA_vect) {
    46fe:	1f 92       	push	r1
    4700:	0f 92       	push	r0
    4702:	0f b6       	in	r0, 0x3f	; 63
    4704:	0f 92       	push	r0
    4706:	11 24       	eor	r1, r1
    4708:	8f 93       	push	r24
    470a:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    470c:	91 e0       	ldi	r25, 0x01	; 1
    470e:	90 93 43 02 	sts	0x0243, r25
	// select channel 12 to sample the right velocity
	currentMotRightChannel = 12;
    4712:	8c e0       	ldi	r24, 0x0C	; 12
    4714:	80 93 42 02 	sts	0x0242, r24

	firstSampleRight = 1;
    4718:	90 93 05 02 	sts	0x0205, r25

//	LED_RED_OFF;

}
    471c:	9f 91       	pop	r25
    471e:	8f 91       	pop	r24
    4720:	0f 90       	pop	r0
    4722:	0f be       	out	0x3f, r0	; 63
    4724:	0f 90       	pop	r0
    4726:	1f 90       	pop	r1
    4728:	18 95       	reti

0000472a <__vector_33>:

// motor right backward
ISR(TIMER3_COMPB_vect) {
    472a:	1f 92       	push	r1
    472c:	0f 92       	push	r0
    472e:	0f b6       	in	r0, 0x3f	; 63
    4730:	0f 92       	push	r0
    4732:	11 24       	eor	r1, r1
    4734:	8f 93       	push	r24
    4736:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    4738:	91 e0       	ldi	r25, 0x01	; 1
    473a:	90 93 43 02 	sts	0x0243, r25
	// select channel 13 to sample the right velocity
	currentMotRightChannel = 13;
    473e:	8d e0       	ldi	r24, 0x0D	; 13
    4740:	80 93 42 02 	sts	0x0242, r24

	firstSampleRight = 1;
    4744:	90 93 05 02 	sts	0x0205, r25

//	LED_RED_OFF;
}
    4748:	9f 91       	pop	r25
    474a:	8f 91       	pop	r24
    474c:	0f 90       	pop	r0
    474e:	0f be       	out	0x3f, r0	; 63
    4750:	0f 90       	pop	r0
    4752:	1f 90       	pop	r1
    4754:	18 95       	reti

00004756 <handleSoftAcceleration>:

// Handle "soft acceleration" that basically increase or decrease the current speed
// at steps untill raching the new desired speed, resulting in a smooth acceleration).
// At the moment the "soft acceleration" is disabled and can be enabled only in the code 
// by setting the value of "softAccEnabled" to 1 at variable initialization.
void handleSoftAcceleration() {
    4756:	9f 92       	push	r9
    4758:	af 92       	push	r10
    475a:	bf 92       	push	r11
    475c:	cf 92       	push	r12
    475e:	df 92       	push	r13
    4760:	ef 92       	push	r14
    4762:	ff 92       	push	r15
    4764:	0f 93       	push	r16
    4766:	1f 93       	push	r17
		
	if(calibrateOdomFlag==0) {
    4768:	80 91 9c 05 	lds	r24, 0x059C
    476c:	88 23       	and	r24, r24
    476e:	51 f0       	breq	.+20     	; 0x4784 <handleSoftAcceleration+0x2e>
			}

		}
	}

}
    4770:	1f 91       	pop	r17
    4772:	0f 91       	pop	r16
    4774:	ff 90       	pop	r15
    4776:	ef 90       	pop	r14
    4778:	df 90       	pop	r13
    477a:	cf 90       	pop	r12
    477c:	bf 90       	pop	r11
    477e:	af 90       	pop	r10
    4780:	9f 90       	pop	r9
    4782:	08 95       	ret
// At the moment the "soft acceleration" is disabled and can be enabled only in the code 
// by setting the value of "softAccEnabled" to 1 at variable initialization.
void handleSoftAcceleration() {
		
	if(calibrateOdomFlag==0) {
		if((getTime100MicroSec()-speedStepCounter) >= SPEED_STEP_DELAY) {
    4784:	0e 94 04 10 	call	0x2008	; 0x2008 <getTime100MicroSec>
    4788:	8b 01       	movw	r16, r22
    478a:	9c 01       	movw	r18, r24
    478c:	40 e0       	ldi	r20, 0x00	; 0
    478e:	50 e0       	ldi	r21, 0x00	; 0
    4790:	60 e0       	ldi	r22, 0x00	; 0
    4792:	70 e0       	ldi	r23, 0x00	; 0
    4794:	80 91 84 04 	lds	r24, 0x0484
    4798:	90 91 85 04 	lds	r25, 0x0485
    479c:	f0 91 86 04 	lds	r31, 0x0486
    47a0:	b0 91 87 04 	lds	r27, 0x0487
    47a4:	e0 90 88 04 	lds	r14, 0x0488
    47a8:	c0 90 89 04 	lds	r12, 0x0489
    47ac:	a0 90 8a 04 	lds	r10, 0x048A
    47b0:	a0 91 8b 04 	lds	r26, 0x048B
    47b4:	90 2e       	mov	r9, r16
    47b6:	98 1a       	sub	r9, r24
    47b8:	e1 e0       	ldi	r30, 0x01	; 1
    47ba:	09 15       	cp	r16, r9
    47bc:	08 f0       	brcs	.+2      	; 0x47c0 <handleSoftAcceleration+0x6a>
    47be:	08 c1       	rjmp	.+528    	; 0x49d0 <handleSoftAcceleration+0x27a>
    47c0:	81 2f       	mov	r24, r17
    47c2:	89 1b       	sub	r24, r25
    47c4:	91 e0       	ldi	r25, 0x01	; 1
    47c6:	18 17       	cp	r17, r24
    47c8:	08 f0       	brcs	.+2      	; 0x47cc <handleSoftAcceleration+0x76>
    47ca:	fa c0       	rjmp	.+500    	; 0x49c0 <handleSoftAcceleration+0x26a>
    47cc:	f8 2e       	mov	r15, r24
    47ce:	fe 1a       	sub	r15, r30
    47d0:	e1 e0       	ldi	r30, 0x01	; 1
    47d2:	8f 15       	cp	r24, r15
    47d4:	08 f0       	brcs	.+2      	; 0x47d8 <handleSoftAcceleration+0x82>
    47d6:	eb c0       	rjmp	.+470    	; 0x49ae <handleSoftAcceleration+0x258>
    47d8:	9e 2b       	or	r25, r30
    47da:	82 2f       	mov	r24, r18
    47dc:	8f 1b       	sub	r24, r31
    47de:	e1 e0       	ldi	r30, 0x01	; 1
    47e0:	28 17       	cp	r18, r24
    47e2:	08 f0       	brcs	.+2      	; 0x47e6 <handleSoftAcceleration+0x90>
    47e4:	dc c0       	rjmp	.+440    	; 0x499e <handleSoftAcceleration+0x248>
    47e6:	b8 2e       	mov	r11, r24
    47e8:	b9 1a       	sub	r11, r25
    47ea:	91 e0       	ldi	r25, 0x01	; 1
    47ec:	8b 15       	cp	r24, r11
    47ee:	08 f0       	brcs	.+2      	; 0x47f2 <handleSoftAcceleration+0x9c>
    47f0:	cd c0       	rjmp	.+410    	; 0x498c <handleSoftAcceleration+0x236>
    47f2:	e9 2b       	or	r30, r25
    47f4:	83 2f       	mov	r24, r19
    47f6:	8b 1b       	sub	r24, r27
    47f8:	91 e0       	ldi	r25, 0x01	; 1
    47fa:	38 17       	cp	r19, r24
    47fc:	08 f0       	brcs	.+2      	; 0x4800 <handleSoftAcceleration+0xaa>
    47fe:	be c0       	rjmp	.+380    	; 0x497c <handleSoftAcceleration+0x226>
    4800:	d8 2e       	mov	r13, r24
    4802:	de 1a       	sub	r13, r30
    4804:	e1 e0       	ldi	r30, 0x01	; 1
    4806:	8d 15       	cp	r24, r13
    4808:	08 f0       	brcs	.+2      	; 0x480c <handleSoftAcceleration+0xb6>
    480a:	af c0       	rjmp	.+350    	; 0x496a <handleSoftAcceleration+0x214>
    480c:	9e 2b       	or	r25, r30
    480e:	8e 2d       	mov	r24, r14
    4810:	81 95       	neg	r24
    4812:	e1 e0       	ldi	r30, 0x01	; 1
    4814:	48 17       	cp	r20, r24
    4816:	08 f0       	brcs	.+2      	; 0x481a <handleSoftAcceleration+0xc4>
    4818:	a0 c0       	rjmp	.+320    	; 0x495a <handleSoftAcceleration+0x204>
    481a:	b8 2f       	mov	r27, r24
    481c:	b9 1b       	sub	r27, r25
    481e:	91 e0       	ldi	r25, 0x01	; 1
    4820:	8b 17       	cp	r24, r27
    4822:	08 f0       	brcs	.+2      	; 0x4826 <handleSoftAcceleration+0xd0>
    4824:	91 c0       	rjmp	.+290    	; 0x4948 <handleSoftAcceleration+0x1f2>
    4826:	e9 2b       	or	r30, r25
    4828:	8c 2d       	mov	r24, r12
    482a:	81 95       	neg	r24
    482c:	f1 e0       	ldi	r31, 0x01	; 1
    482e:	58 17       	cp	r21, r24
    4830:	08 f0       	brcs	.+2      	; 0x4834 <handleSoftAcceleration+0xde>
    4832:	81 c0       	rjmp	.+258    	; 0x4936 <handleSoftAcceleration+0x1e0>
    4834:	98 2f       	mov	r25, r24
    4836:	9e 1b       	sub	r25, r30
    4838:	e9 2f       	mov	r30, r25
    483a:	91 e0       	ldi	r25, 0x01	; 1
    483c:	8e 17       	cp	r24, r30
    483e:	08 f0       	brcs	.+2      	; 0x4842 <handleSoftAcceleration+0xec>
    4840:	71 c0       	rjmp	.+226    	; 0x4924 <handleSoftAcceleration+0x1ce>
    4842:	f9 2b       	or	r31, r25
    4844:	8a 2d       	mov	r24, r10
    4846:	81 95       	neg	r24
    4848:	91 e0       	ldi	r25, 0x01	; 1
    484a:	68 17       	cp	r22, r24
    484c:	08 f0       	brcs	.+2      	; 0x4850 <handleSoftAcceleration+0xfa>
    484e:	62 c0       	rjmp	.+196    	; 0x4914 <handleSoftAcceleration+0x1be>
    4850:	38 2f       	mov	r19, r24
    4852:	3f 1b       	sub	r19, r31
    4854:	21 e0       	ldi	r18, 0x01	; 1
    4856:	83 17       	cp	r24, r19
    4858:	08 f0       	brcs	.+2      	; 0x485c <handleSoftAcceleration+0x106>
    485a:	55 c0       	rjmp	.+170    	; 0x4906 <handleSoftAcceleration+0x1b0>
    485c:	92 2b       	or	r25, r18
    485e:	a1 95       	neg	r26
    4860:	a9 17       	cp	r26, r25
    4862:	09 f4       	brne	.+2      	; 0x4866 <handleSoftAcceleration+0x110>
    4864:	bd c0       	rjmp	.+378    	; 0x49e0 <handleSoftAcceleration+0x28a>
			speedStepCounter = getTime100MicroSec();
    4866:	0e 94 04 10 	call	0x2008	; 0x2008 <getTime100MicroSec>
    486a:	9b 01       	movw	r18, r22
    486c:	ac 01       	movw	r20, r24
    486e:	60 93 84 04 	sts	0x0484, r22
    4872:	30 93 85 04 	sts	0x0485, r19
    4876:	40 93 86 04 	sts	0x0486, r20
    487a:	50 93 87 04 	sts	0x0487, r21
    487e:	10 92 88 04 	sts	0x0488, r1
    4882:	10 92 89 04 	sts	0x0489, r1
    4886:	10 92 8a 04 	sts	0x048A, r1
    488a:	10 92 8b 04 	sts	0x048B, r1

			if(softAccEnabled) {
    488e:	80 91 8c 04 	lds	r24, 0x048C
    4892:	88 23       	and	r24, r24
    4894:	09 f4       	brne	.+2      	; 0x4898 <handleSoftAcceleration+0x142>
    4896:	bf c0       	rjmp	.+382    	; 0x4a16 <handleSoftAcceleration+0x2c0>
				if(pwm_right_desired == 0) {
    4898:	20 91 15 03 	lds	r18, 0x0315
    489c:	30 91 16 03 	lds	r19, 0x0316
    48a0:	21 15       	cp	r18, r1
    48a2:	31 05       	cpc	r19, r1
    48a4:	09 f0       	breq	.+2      	; 0x48a8 <handleSoftAcceleration+0x152>
    48a6:	c8 c0       	rjmp	.+400    	; 0x4a38 <handleSoftAcceleration+0x2e2>
					pwm_intermediate_right_desired = 0;
				} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
					pwm_intermediate_right_desired = 0;
    48a8:	10 92 1a 03 	sts	0x031A, r1
    48ac:	10 92 19 03 	sts	0x0319, r1
					if(pwm_intermediate_right_desired < pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
					}					
				}
	
				if(pwm_left_desired == 0) {
    48b0:	20 91 17 03 	lds	r18, 0x0317
    48b4:	30 91 18 03 	lds	r19, 0x0318
    48b8:	21 15       	cp	r18, r1
    48ba:	31 05       	cpc	r19, r1
    48bc:	09 f4       	brne	.+2      	; 0x48c0 <handleSoftAcceleration+0x16a>
    48be:	de c0       	rjmp	.+444    	; 0x4a7c <handleSoftAcceleration+0x326>
					pwm_intermediate_left_desired = 0;
				} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
    48c0:	40 91 1b 03 	lds	r20, 0x031B
    48c4:	50 91 1c 03 	lds	r21, 0x031C
    48c8:	42 9f       	mul	r20, r18
    48ca:	c0 01       	movw	r24, r0
    48cc:	43 9f       	mul	r20, r19
    48ce:	90 0d       	add	r25, r0
    48d0:	52 9f       	mul	r21, r18
    48d2:	90 0d       	add	r25, r0
    48d4:	11 24       	eor	r1, r1
    48d6:	97 fd       	sbrc	r25, 7
    48d8:	d1 c0       	rjmp	.+418    	; 0x4a7c <handleSoftAcceleration+0x326>
					pwm_intermediate_left_desired = 0;
				} else if(pwm_left_desired > pwm_intermediate_left_desired) {
    48da:	42 17       	cp	r20, r18
    48dc:	53 07       	cpc	r21, r19
    48de:	0c f0       	brlt	.+2      	; 0x48e2 <handleSoftAcceleration+0x18c>
    48e0:	d2 c0       	rjmp	.+420    	; 0x4a86 <handleSoftAcceleration+0x330>
					pwm_intermediate_left_desired += speedStep;
    48e2:	80 91 13 02 	lds	r24, 0x0213
    48e6:	ba 01       	movw	r22, r20
    48e8:	68 0f       	add	r22, r24
    48ea:	71 1d       	adc	r23, r1
    48ec:	70 93 1c 03 	sts	0x031C, r23
    48f0:	60 93 1b 03 	sts	0x031B, r22
					if(pwm_intermediate_left_desired > pwm_left_desired) {
    48f4:	26 17       	cp	r18, r22
    48f6:	37 07       	cpc	r19, r23
    48f8:	0c f0       	brlt	.+2      	; 0x48fc <handleSoftAcceleration+0x1a6>
    48fa:	3a cf       	rjmp	.-396    	; 0x4770 <handleSoftAcceleration+0x1a>
						pwm_intermediate_left_desired = pwm_left_desired;
					}
				} else if(pwm_left_desired < pwm_intermediate_left_desired) {
					pwm_intermediate_left_desired -= speedStep;
					if(pwm_intermediate_left_desired < pwm_left_desired) {
						pwm_intermediate_left_desired = pwm_left_desired;
    48fc:	30 93 1c 03 	sts	0x031C, r19
    4900:	20 93 1b 03 	sts	0x031B, r18
    4904:	35 cf       	rjmp	.-406    	; 0x4770 <handleSoftAcceleration+0x1a>
// At the moment the "soft acceleration" is disabled and can be enabled only in the code 
// by setting the value of "softAccEnabled" to 1 at variable initialization.
void handleSoftAcceleration() {
		
	if(calibrateOdomFlag==0) {
		if((getTime100MicroSec()-speedStepCounter) >= SPEED_STEP_DELAY) {
    4906:	20 e0       	ldi	r18, 0x00	; 0
    4908:	92 2b       	or	r25, r18
    490a:	a1 95       	neg	r26
    490c:	a9 17       	cp	r26, r25
    490e:	09 f0       	breq	.+2      	; 0x4912 <handleSoftAcceleration+0x1bc>
    4910:	aa cf       	rjmp	.-172    	; 0x4866 <handleSoftAcceleration+0x110>
    4912:	66 c0       	rjmp	.+204    	; 0x49e0 <handleSoftAcceleration+0x28a>
    4914:	90 e0       	ldi	r25, 0x00	; 0
    4916:	38 2f       	mov	r19, r24
    4918:	3f 1b       	sub	r19, r31
    491a:	21 e0       	ldi	r18, 0x01	; 1
    491c:	83 17       	cp	r24, r19
    491e:	08 f4       	brcc	.+2      	; 0x4922 <handleSoftAcceleration+0x1cc>
    4920:	9d cf       	rjmp	.-198    	; 0x485c <handleSoftAcceleration+0x106>
    4922:	f1 cf       	rjmp	.-30     	; 0x4906 <handleSoftAcceleration+0x1b0>
    4924:	90 e0       	ldi	r25, 0x00	; 0
    4926:	f9 2b       	or	r31, r25
    4928:	8a 2d       	mov	r24, r10
    492a:	81 95       	neg	r24
    492c:	91 e0       	ldi	r25, 0x01	; 1
    492e:	68 17       	cp	r22, r24
    4930:	08 f4       	brcc	.+2      	; 0x4934 <handleSoftAcceleration+0x1de>
    4932:	8e cf       	rjmp	.-228    	; 0x4850 <handleSoftAcceleration+0xfa>
    4934:	ef cf       	rjmp	.-34     	; 0x4914 <handleSoftAcceleration+0x1be>
    4936:	f0 e0       	ldi	r31, 0x00	; 0
    4938:	98 2f       	mov	r25, r24
    493a:	9e 1b       	sub	r25, r30
    493c:	e9 2f       	mov	r30, r25
    493e:	91 e0       	ldi	r25, 0x01	; 1
    4940:	8e 17       	cp	r24, r30
    4942:	08 f4       	brcc	.+2      	; 0x4946 <handleSoftAcceleration+0x1f0>
    4944:	7e cf       	rjmp	.-260    	; 0x4842 <handleSoftAcceleration+0xec>
    4946:	ee cf       	rjmp	.-36     	; 0x4924 <handleSoftAcceleration+0x1ce>
    4948:	90 e0       	ldi	r25, 0x00	; 0
    494a:	e9 2b       	or	r30, r25
    494c:	8c 2d       	mov	r24, r12
    494e:	81 95       	neg	r24
    4950:	f1 e0       	ldi	r31, 0x01	; 1
    4952:	58 17       	cp	r21, r24
    4954:	08 f4       	brcc	.+2      	; 0x4958 <handleSoftAcceleration+0x202>
    4956:	6e cf       	rjmp	.-292    	; 0x4834 <handleSoftAcceleration+0xde>
    4958:	ee cf       	rjmp	.-36     	; 0x4936 <handleSoftAcceleration+0x1e0>
    495a:	e0 e0       	ldi	r30, 0x00	; 0
    495c:	b8 2f       	mov	r27, r24
    495e:	b9 1b       	sub	r27, r25
    4960:	91 e0       	ldi	r25, 0x01	; 1
    4962:	8b 17       	cp	r24, r27
    4964:	08 f4       	brcc	.+2      	; 0x4968 <handleSoftAcceleration+0x212>
    4966:	5f cf       	rjmp	.-322    	; 0x4826 <handleSoftAcceleration+0xd0>
    4968:	ef cf       	rjmp	.-34     	; 0x4948 <handleSoftAcceleration+0x1f2>
    496a:	e0 e0       	ldi	r30, 0x00	; 0
    496c:	9e 2b       	or	r25, r30
    496e:	8e 2d       	mov	r24, r14
    4970:	81 95       	neg	r24
    4972:	e1 e0       	ldi	r30, 0x01	; 1
    4974:	48 17       	cp	r20, r24
    4976:	08 f4       	brcc	.+2      	; 0x497a <handleSoftAcceleration+0x224>
    4978:	50 cf       	rjmp	.-352    	; 0x481a <handleSoftAcceleration+0xc4>
    497a:	ef cf       	rjmp	.-34     	; 0x495a <handleSoftAcceleration+0x204>
    497c:	90 e0       	ldi	r25, 0x00	; 0
    497e:	d8 2e       	mov	r13, r24
    4980:	de 1a       	sub	r13, r30
    4982:	e1 e0       	ldi	r30, 0x01	; 1
    4984:	8d 15       	cp	r24, r13
    4986:	08 f4       	brcc	.+2      	; 0x498a <handleSoftAcceleration+0x234>
    4988:	41 cf       	rjmp	.-382    	; 0x480c <handleSoftAcceleration+0xb6>
    498a:	ef cf       	rjmp	.-34     	; 0x496a <handleSoftAcceleration+0x214>
    498c:	90 e0       	ldi	r25, 0x00	; 0
    498e:	e9 2b       	or	r30, r25
    4990:	83 2f       	mov	r24, r19
    4992:	8b 1b       	sub	r24, r27
    4994:	91 e0       	ldi	r25, 0x01	; 1
    4996:	38 17       	cp	r19, r24
    4998:	08 f4       	brcc	.+2      	; 0x499c <handleSoftAcceleration+0x246>
    499a:	32 cf       	rjmp	.-412    	; 0x4800 <handleSoftAcceleration+0xaa>
    499c:	ef cf       	rjmp	.-34     	; 0x497c <handleSoftAcceleration+0x226>
    499e:	e0 e0       	ldi	r30, 0x00	; 0
    49a0:	b8 2e       	mov	r11, r24
    49a2:	b9 1a       	sub	r11, r25
    49a4:	91 e0       	ldi	r25, 0x01	; 1
    49a6:	8b 15       	cp	r24, r11
    49a8:	08 f4       	brcc	.+2      	; 0x49ac <handleSoftAcceleration+0x256>
    49aa:	23 cf       	rjmp	.-442    	; 0x47f2 <handleSoftAcceleration+0x9c>
    49ac:	ef cf       	rjmp	.-34     	; 0x498c <handleSoftAcceleration+0x236>
    49ae:	e0 e0       	ldi	r30, 0x00	; 0
    49b0:	9e 2b       	or	r25, r30
    49b2:	82 2f       	mov	r24, r18
    49b4:	8f 1b       	sub	r24, r31
    49b6:	e1 e0       	ldi	r30, 0x01	; 1
    49b8:	28 17       	cp	r18, r24
    49ba:	08 f4       	brcc	.+2      	; 0x49be <handleSoftAcceleration+0x268>
    49bc:	14 cf       	rjmp	.-472    	; 0x47e6 <handleSoftAcceleration+0x90>
    49be:	ef cf       	rjmp	.-34     	; 0x499e <handleSoftAcceleration+0x248>
    49c0:	90 e0       	ldi	r25, 0x00	; 0
    49c2:	f8 2e       	mov	r15, r24
    49c4:	fe 1a       	sub	r15, r30
    49c6:	e1 e0       	ldi	r30, 0x01	; 1
    49c8:	8f 15       	cp	r24, r15
    49ca:	08 f4       	brcc	.+2      	; 0x49ce <handleSoftAcceleration+0x278>
    49cc:	05 cf       	rjmp	.-502    	; 0x47d8 <handleSoftAcceleration+0x82>
    49ce:	ef cf       	rjmp	.-34     	; 0x49ae <handleSoftAcceleration+0x258>
    49d0:	e0 e0       	ldi	r30, 0x00	; 0
    49d2:	81 2f       	mov	r24, r17
    49d4:	89 1b       	sub	r24, r25
    49d6:	91 e0       	ldi	r25, 0x01	; 1
    49d8:	18 17       	cp	r17, r24
    49da:	08 f4       	brcc	.+2      	; 0x49de <handleSoftAcceleration+0x288>
    49dc:	f7 ce       	rjmp	.-530    	; 0x47cc <handleSoftAcceleration+0x76>
    49de:	f0 cf       	rjmp	.-32     	; 0x49c0 <handleSoftAcceleration+0x26a>
    49e0:	33 23       	and	r19, r19
    49e2:	09 f0       	breq	.+2      	; 0x49e6 <handleSoftAcceleration+0x290>
    49e4:	40 cf       	rjmp	.-384    	; 0x4866 <handleSoftAcceleration+0x110>
    49e6:	ee 23       	and	r30, r30
    49e8:	09 f0       	breq	.+2      	; 0x49ec <handleSoftAcceleration+0x296>
    49ea:	3d cf       	rjmp	.-390    	; 0x4866 <handleSoftAcceleration+0x110>
    49ec:	bb 23       	and	r27, r27
    49ee:	09 f0       	breq	.+2      	; 0x49f2 <handleSoftAcceleration+0x29c>
    49f0:	3a cf       	rjmp	.-396    	; 0x4866 <handleSoftAcceleration+0x110>
    49f2:	dd 20       	and	r13, r13
    49f4:	09 f0       	breq	.+2      	; 0x49f8 <handleSoftAcceleration+0x2a2>
    49f6:	37 cf       	rjmp	.-402    	; 0x4866 <handleSoftAcceleration+0x110>
    49f8:	bb 20       	and	r11, r11
    49fa:	09 f0       	breq	.+2      	; 0x49fe <handleSoftAcceleration+0x2a8>
    49fc:	34 cf       	rjmp	.-408    	; 0x4866 <handleSoftAcceleration+0x110>
    49fe:	61 e0       	ldi	r22, 0x01	; 1
    4a00:	6f 15       	cp	r22, r15
    4a02:	08 f4       	brcc	.+2      	; 0x4a06 <handleSoftAcceleration+0x2b0>
    4a04:	30 cf       	rjmp	.-416    	; 0x4866 <handleSoftAcceleration+0x110>
    4a06:	f6 16       	cp	r15, r22
    4a08:	09 f0       	breq	.+2      	; 0x4a0c <handleSoftAcceleration+0x2b6>
    4a0a:	b2 ce       	rjmp	.-668    	; 0x4770 <handleSoftAcceleration+0x1a>
    4a0c:	7f e8       	ldi	r23, 0x8F	; 143
    4a0e:	79 15       	cp	r23, r9
    4a10:	08 f0       	brcs	.+2      	; 0x4a14 <handleSoftAcceleration+0x2be>
    4a12:	ae ce       	rjmp	.-676    	; 0x4770 <handleSoftAcceleration+0x1a>
    4a14:	28 cf       	rjmp	.-432    	; 0x4866 <handleSoftAcceleration+0x110>
					if(pwm_intermediate_left_desired < pwm_left_desired) {
						pwm_intermediate_left_desired = pwm_left_desired;
					}					
				}
			} else {
				pwm_intermediate_right_desired = pwm_right_desired;
    4a16:	80 91 15 03 	lds	r24, 0x0315
    4a1a:	90 91 16 03 	lds	r25, 0x0316
    4a1e:	90 93 1a 03 	sts	0x031A, r25
    4a22:	80 93 19 03 	sts	0x0319, r24
				pwm_intermediate_left_desired = pwm_left_desired;
    4a26:	80 91 17 03 	lds	r24, 0x0317
    4a2a:	90 91 18 03 	lds	r25, 0x0318
    4a2e:	90 93 1c 03 	sts	0x031C, r25
    4a32:	80 93 1b 03 	sts	0x031B, r24
    4a36:	9c ce       	rjmp	.-712    	; 0x4770 <handleSoftAcceleration+0x1a>
			speedStepCounter = getTime100MicroSec();

			if(softAccEnabled) {
				if(pwm_right_desired == 0) {
					pwm_intermediate_right_desired = 0;
				} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
    4a38:	40 91 19 03 	lds	r20, 0x0319
    4a3c:	50 91 1a 03 	lds	r21, 0x031A
    4a40:	42 9f       	mul	r20, r18
    4a42:	c0 01       	movw	r24, r0
    4a44:	43 9f       	mul	r20, r19
    4a46:	90 0d       	add	r25, r0
    4a48:	52 9f       	mul	r21, r18
    4a4a:	90 0d       	add	r25, r0
    4a4c:	11 24       	eor	r1, r1
    4a4e:	97 fd       	sbrc	r25, 7
    4a50:	2b cf       	rjmp	.-426    	; 0x48a8 <handleSoftAcceleration+0x152>
					pwm_intermediate_right_desired = 0;
				} else if(pwm_right_desired > pwm_intermediate_right_desired) {
    4a52:	42 17       	cp	r20, r18
    4a54:	53 07       	cpc	r21, r19
    4a56:	4c f5       	brge	.+82     	; 0x4aaa <handleSoftAcceleration+0x354>
					pwm_intermediate_right_desired += speedStep;
    4a58:	80 91 13 02 	lds	r24, 0x0213
    4a5c:	ba 01       	movw	r22, r20
    4a5e:	68 0f       	add	r22, r24
    4a60:	71 1d       	adc	r23, r1
    4a62:	70 93 1a 03 	sts	0x031A, r23
    4a66:	60 93 19 03 	sts	0x0319, r22
					if(pwm_intermediate_right_desired > pwm_right_desired) {
    4a6a:	26 17       	cp	r18, r22
    4a6c:	37 07       	cpc	r19, r23
    4a6e:	0c f0       	brlt	.+2      	; 0x4a72 <handleSoftAcceleration+0x31c>
    4a70:	1f cf       	rjmp	.-450    	; 0x48b0 <handleSoftAcceleration+0x15a>
						pwm_intermediate_right_desired = pwm_right_desired;
					}
				} else if(pwm_right_desired < pwm_intermediate_right_desired) {
					pwm_intermediate_right_desired -= speedStep;
					if(pwm_intermediate_right_desired < pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
    4a72:	30 93 1a 03 	sts	0x031A, r19
    4a76:	20 93 19 03 	sts	0x0319, r18
    4a7a:	1a cf       	rjmp	.-460    	; 0x48b0 <handleSoftAcceleration+0x15a>
				}
	
				if(pwm_left_desired == 0) {
					pwm_intermediate_left_desired = 0;
				} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
					pwm_intermediate_left_desired = 0;
    4a7c:	10 92 1c 03 	sts	0x031C, r1
    4a80:	10 92 1b 03 	sts	0x031B, r1
    4a84:	75 ce       	rjmp	.-790    	; 0x4770 <handleSoftAcceleration+0x1a>
				} else if(pwm_left_desired > pwm_intermediate_left_desired) {
					pwm_intermediate_left_desired += speedStep;
					if(pwm_intermediate_left_desired > pwm_left_desired) {
						pwm_intermediate_left_desired = pwm_left_desired;
					}
				} else if(pwm_left_desired < pwm_intermediate_left_desired) {
    4a86:	24 17       	cp	r18, r20
    4a88:	35 07       	cpc	r19, r21
    4a8a:	0c f0       	brlt	.+2      	; 0x4a8e <handleSoftAcceleration+0x338>
    4a8c:	71 ce       	rjmp	.-798    	; 0x4770 <handleSoftAcceleration+0x1a>
					pwm_intermediate_left_desired -= speedStep;
    4a8e:	80 91 13 02 	lds	r24, 0x0213
    4a92:	ba 01       	movw	r22, r20
    4a94:	68 1b       	sub	r22, r24
    4a96:	71 09       	sbc	r23, r1
    4a98:	70 93 1c 03 	sts	0x031C, r23
    4a9c:	60 93 1b 03 	sts	0x031B, r22
					if(pwm_intermediate_left_desired < pwm_left_desired) {
    4aa0:	62 17       	cp	r22, r18
    4aa2:	73 07       	cpc	r23, r19
    4aa4:	0c f0       	brlt	.+2      	; 0x4aa8 <handleSoftAcceleration+0x352>
    4aa6:	64 ce       	rjmp	.-824    	; 0x4770 <handleSoftAcceleration+0x1a>
    4aa8:	29 cf       	rjmp	.-430    	; 0x48fc <handleSoftAcceleration+0x1a6>
				} else if(pwm_right_desired > pwm_intermediate_right_desired) {
					pwm_intermediate_right_desired += speedStep;
					if(pwm_intermediate_right_desired > pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
					}
				} else if(pwm_right_desired < pwm_intermediate_right_desired) {
    4aaa:	24 17       	cp	r18, r20
    4aac:	35 07       	cpc	r19, r21
    4aae:	0c f0       	brlt	.+2      	; 0x4ab2 <handleSoftAcceleration+0x35c>
    4ab0:	ff ce       	rjmp	.-514    	; 0x48b0 <handleSoftAcceleration+0x15a>
					pwm_intermediate_right_desired -= speedStep;
    4ab2:	80 91 13 02 	lds	r24, 0x0213
    4ab6:	ba 01       	movw	r22, r20
    4ab8:	68 1b       	sub	r22, r24
    4aba:	71 09       	sbc	r23, r1
    4abc:	70 93 1a 03 	sts	0x031A, r23
    4ac0:	60 93 19 03 	sts	0x0319, r22
					if(pwm_intermediate_right_desired < pwm_right_desired) {
    4ac4:	62 17       	cp	r22, r18
    4ac6:	73 07       	cpc	r23, r19
    4ac8:	0c f0       	brlt	.+2      	; 0x4acc <handleSoftAcceleration+0x376>
    4aca:	f2 ce       	rjmp	.-540    	; 0x48b0 <handleSoftAcceleration+0x15a>
    4acc:	d2 cf       	rjmp	.-92     	; 0x4a72 <handleSoftAcceleration+0x31c>

00004ace <writeDefaultCalibration>:
		speedLeftFromEnc = -speedLeftFromEnc;
    }
    
}

void writeDefaultCalibration() {
    4ace:	2f 92       	push	r2
    4ad0:	3f 92       	push	r3
    4ad2:	4f 92       	push	r4
    4ad4:	5f 92       	push	r5
    4ad6:	6f 92       	push	r6
    4ad8:	7f 92       	push	r7
    4ada:	8f 92       	push	r8
    4adc:	9f 92       	push	r9
    4ade:	af 92       	push	r10
    4ae0:	bf 92       	push	r11
    4ae2:	cf 92       	push	r12
    4ae4:	df 92       	push	r13
    4ae6:	ef 92       	push	r14
    4ae8:	ff 92       	push	r15
    4aea:	0f 93       	push	r16
    4aec:	1f 93       	push	r17
    4aee:	cf 93       	push	r28
    4af0:	df 93       	push	r29
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    	calibration[i][0] = i+1;
	}
    // the following values are taken from a field test
    // forward left, speed control enabled
    calibration[0][0] = 20;		// measured speed with back EMF (adc 0..1023)
    4af2:	74 e1       	ldi	r23, 0x14	; 20
    4af4:	87 2e       	mov	r8, r23
    4af6:	91 2c       	mov	r9, r1
    4af8:	90 92 11 09 	sts	0x0911, r9
    4afc:	80 92 10 09 	sts	0x0910, r8
    calibration[1][0] = 40;
    4b00:	88 e2       	ldi	r24, 0x28	; 40
    4b02:	90 e0       	ldi	r25, 0x00	; 0
    4b04:	90 93 21 09 	sts	0x0921, r25
    4b08:	80 93 20 09 	sts	0x0920, r24
    calibration[2][0] = 59;
    4b0c:	8b e3       	ldi	r24, 0x3B	; 59
    4b0e:	90 e0       	ldi	r25, 0x00	; 0
    4b10:	90 93 31 09 	sts	0x0931, r25
    4b14:	80 93 30 09 	sts	0x0930, r24
    calibration[3][0] = 79;
    4b18:	8f e4       	ldi	r24, 0x4F	; 79
    4b1a:	90 e0       	ldi	r25, 0x00	; 0
    4b1c:	90 93 41 09 	sts	0x0941, r25
    4b20:	80 93 40 09 	sts	0x0940, r24
    calibration[4][0] = 100;
    4b24:	84 e6       	ldi	r24, 0x64	; 100
    4b26:	90 e0       	ldi	r25, 0x00	; 0
    4b28:	90 93 51 09 	sts	0x0951, r25
    4b2c:	80 93 50 09 	sts	0x0950, r24
    calibration[5][0] = 120;
    4b30:	c8 e7       	ldi	r28, 0x78	; 120
    4b32:	d0 e0       	ldi	r29, 0x00	; 0
    4b34:	d0 93 61 09 	sts	0x0961, r29
    4b38:	c0 93 60 09 	sts	0x0960, r28
    calibration[6][0] = 139;
    4b3c:	6b e8       	ldi	r22, 0x8B	; 139
    4b3e:	e6 2e       	mov	r14, r22
    4b40:	f1 2c       	mov	r15, r1
    4b42:	f0 92 71 09 	sts	0x0971, r15
    4b46:	e0 92 70 09 	sts	0x0970, r14
    calibration[7][0] = 159;
    4b4a:	8f e9       	ldi	r24, 0x9F	; 159
    4b4c:	90 e0       	ldi	r25, 0x00	; 0
    4b4e:	90 93 81 09 	sts	0x0981, r25
    4b52:	80 93 80 09 	sts	0x0980, r24
	calibration[8][0] = 180;
    4b56:	54 eb       	ldi	r21, 0xB4	; 180
    4b58:	a5 2e       	mov	r10, r21
    4b5a:	b1 2c       	mov	r11, r1
    4b5c:	b0 92 91 09 	sts	0x0991, r11
    4b60:	a0 92 90 09 	sts	0x0990, r10
    calibration[0][1] = 19;    	// real speed measured in mm/s
    4b64:	23 e1       	ldi	r18, 0x13	; 19
    4b66:	30 e0       	ldi	r19, 0x00	; 0
    4b68:	30 93 13 09 	sts	0x0913, r19
    4b6c:	20 93 12 09 	sts	0x0912, r18
    calibration[1][1] = 47;
    4b70:	8f e2       	ldi	r24, 0x2F	; 47
    4b72:	90 e0       	ldi	r25, 0x00	; 0
    4b74:	90 93 23 09 	sts	0x0923, r25
    4b78:	80 93 22 09 	sts	0x0922, r24
    calibration[2][1] = 72;
    4b7c:	88 e4       	ldi	r24, 0x48	; 72
    4b7e:	90 e0       	ldi	r25, 0x00	; 0
    4b80:	90 93 33 09 	sts	0x0933, r25
    4b84:	80 93 32 09 	sts	0x0932, r24
    calibration[3][1] = 91;
    4b88:	8b e5       	ldi	r24, 0x5B	; 91
    4b8a:	90 e0       	ldi	r25, 0x00	; 0
    4b8c:	90 93 43 09 	sts	0x0943, r25
    4b90:	80 93 42 09 	sts	0x0942, r24
    calibration[4][1] = 109;
    4b94:	8d e6       	ldi	r24, 0x6D	; 109
    4b96:	90 e0       	ldi	r25, 0x00	; 0
    4b98:	90 93 53 09 	sts	0x0953, r25
    4b9c:	80 93 52 09 	sts	0x0952, r24
    calibration[5][1] = 125;
    4ba0:	4d e7       	ldi	r20, 0x7D	; 125
    4ba2:	c4 2e       	mov	r12, r20
    4ba4:	d1 2c       	mov	r13, r1
    4ba6:	d0 92 63 09 	sts	0x0963, r13
    4baa:	c0 92 62 09 	sts	0x0962, r12
    calibration[6][1] = 143;
    4bae:	8f e8       	ldi	r24, 0x8F	; 143
    4bb0:	90 e0       	ldi	r25, 0x00	; 0
    4bb2:	90 93 73 09 	sts	0x0973, r25
    4bb6:	80 93 72 09 	sts	0x0972, r24
    calibration[7][1] = 160;
    4bba:	40 ea       	ldi	r20, 0xA0	; 160
    4bbc:	50 e0       	ldi	r21, 0x00	; 0
    4bbe:	50 93 83 09 	sts	0x0983, r21
    4bc2:	40 93 82 09 	sts	0x0982, r20
	calibration[8][1] = 174;
    4bc6:	8e ea       	ldi	r24, 0xAE	; 174
    4bc8:	90 e0       	ldi	r25, 0x00	; 0
    4bca:	90 93 93 09 	sts	0x0993, r25
    4bce:	80 93 92 09 	sts	0x0992, r24
    // forward right, speed control enabled
    calibration[0][2] = 19;		// measured speed with back EMF (adc 0..1023)
    4bd2:	30 93 15 09 	sts	0x0915, r19
    4bd6:	20 93 14 09 	sts	0x0914, r18
    calibration[1][2] = 39;
    4bda:	67 e2       	ldi	r22, 0x27	; 39
    4bdc:	70 e0       	ldi	r23, 0x00	; 0
    4bde:	70 93 25 09 	sts	0x0925, r23
    4be2:	60 93 24 09 	sts	0x0924, r22
    calibration[2][2] = 60;
    4be6:	0c e3       	ldi	r16, 0x3C	; 60
    4be8:	10 e0       	ldi	r17, 0x00	; 0
    4bea:	10 93 35 09 	sts	0x0935, r17
    4bee:	00 93 34 09 	sts	0x0934, r16
    calibration[3][2] = 80;
    4bf2:	20 e5       	ldi	r18, 0x50	; 80
    4bf4:	22 2e       	mov	r2, r18
    4bf6:	31 2c       	mov	r3, r1
    4bf8:	30 92 45 09 	sts	0x0945, r3
    4bfc:	20 92 44 09 	sts	0x0944, r2
    calibration[4][2] = 99;
    4c00:	a3 e6       	ldi	r26, 0x63	; 99
    4c02:	b0 e0       	ldi	r27, 0x00	; 0
    4c04:	b0 93 55 09 	sts	0x0955, r27
    4c08:	a0 93 54 09 	sts	0x0954, r26
    calibration[5][2] = 119;
    4c0c:	27 e7       	ldi	r18, 0x77	; 119
    4c0e:	30 e0       	ldi	r19, 0x00	; 0
    4c10:	30 93 65 09 	sts	0x0965, r19
    4c14:	20 93 64 09 	sts	0x0964, r18
    calibration[6][2] = 140;
    4c18:	ec e8       	ldi	r30, 0x8C	; 140
    4c1a:	f0 e0       	ldi	r31, 0x00	; 0
    4c1c:	f0 93 75 09 	sts	0x0975, r31
    4c20:	e0 93 74 09 	sts	0x0974, r30
    calibration[7][2] = 160;
    4c24:	50 93 85 09 	sts	0x0985, r21
    4c28:	40 93 84 09 	sts	0x0984, r20
	calibration[8][2] = 180;
    4c2c:	b0 92 95 09 	sts	0x0995, r11
    4c30:	a0 92 94 09 	sts	0x0994, r10
    calibration[0][3] = 23;    	// real speed measured in mm/s
    4c34:	87 e1       	ldi	r24, 0x17	; 23
    4c36:	90 e0       	ldi	r25, 0x00	; 0
    4c38:	90 93 17 09 	sts	0x0917, r25
    4c3c:	80 93 16 09 	sts	0x0916, r24
    calibration[1][3] = 46;
    4c40:	9e e2       	ldi	r25, 0x2E	; 46
    4c42:	49 2e       	mov	r4, r25
    4c44:	51 2c       	mov	r5, r1
    4c46:	50 92 27 09 	sts	0x0927, r5
    4c4a:	40 92 26 09 	sts	0x0926, r4
    calibration[2][3] = 64;
    4c4e:	80 e4       	ldi	r24, 0x40	; 64
    4c50:	90 e0       	ldi	r25, 0x00	; 0
    4c52:	90 93 37 09 	sts	0x0937, r25
    4c56:	80 93 36 09 	sts	0x0936, r24
    calibration[3][3] = 81;
    4c5a:	81 e5       	ldi	r24, 0x51	; 81
    4c5c:	68 2e       	mov	r6, r24
    4c5e:	71 2c       	mov	r7, r1
    4c60:	70 92 47 09 	sts	0x0947, r7
    4c64:	60 92 46 09 	sts	0x0946, r6
    calibration[4][3] = 97;
    4c68:	81 e6       	ldi	r24, 0x61	; 97
    4c6a:	90 e0       	ldi	r25, 0x00	; 0
    4c6c:	90 93 57 09 	sts	0x0957, r25
    4c70:	80 93 56 09 	sts	0x0956, r24
    calibration[5][3] = 112;
    4c74:	80 e7       	ldi	r24, 0x70	; 112
    4c76:	90 e0       	ldi	r25, 0x00	; 0
    4c78:	90 93 67 09 	sts	0x0967, r25
    4c7c:	80 93 66 09 	sts	0x0966, r24
    calibration[6][3] = 125;
    4c80:	d0 92 77 09 	sts	0x0977, r13
    4c84:	c0 92 76 09 	sts	0x0976, r12
    calibration[7][3] = 139;
    4c88:	f0 92 87 09 	sts	0x0987, r15
    4c8c:	e0 92 86 09 	sts	0x0986, r14
	calibration[8][3] = 152;
    4c90:	88 e9       	ldi	r24, 0x98	; 152
    4c92:	90 e0       	ldi	r25, 0x00	; 0
    4c94:	90 93 97 09 	sts	0x0997, r25
    4c98:	80 93 96 09 	sts	0x0996, r24
    // backward left, speed control enabled
    calibration[0][4] = 20;		// measured speed with back EMF (adc 0..1023)
    4c9c:	90 92 19 09 	sts	0x0919, r9
    4ca0:	80 92 18 09 	sts	0x0918, r8
    calibration[1][4] = 39;
    4ca4:	70 93 29 09 	sts	0x0929, r23
    4ca8:	60 93 28 09 	sts	0x0928, r22
    calibration[2][4] = 60;
    4cac:	10 93 39 09 	sts	0x0939, r17
    4cb0:	00 93 38 09 	sts	0x0938, r16
    calibration[3][4] = 79;
    4cb4:	8f e4       	ldi	r24, 0x4F	; 79
    4cb6:	90 e0       	ldi	r25, 0x00	; 0
    4cb8:	90 93 49 09 	sts	0x0949, r25
    4cbc:	80 93 48 09 	sts	0x0948, r24
    calibration[4][4] = 99;
    4cc0:	b0 93 59 09 	sts	0x0959, r27
    4cc4:	a0 93 58 09 	sts	0x0958, r26
    calibration[5][4] = 120;
    4cc8:	d0 93 69 09 	sts	0x0969, r29
    4ccc:	c0 93 68 09 	sts	0x0968, r28
    calibration[6][4] = 140;
    4cd0:	f0 93 79 09 	sts	0x0979, r31
    4cd4:	e0 93 78 09 	sts	0x0978, r30
    calibration[7][4] = 160;
    4cd8:	50 93 89 09 	sts	0x0989, r21
    4cdc:	40 93 88 09 	sts	0x0988, r20
	calibration[8][4] = 179;
    4ce0:	83 eb       	ldi	r24, 0xB3	; 179
    4ce2:	90 e0       	ldi	r25, 0x00	; 0
    4ce4:	90 93 99 09 	sts	0x0999, r25
    4ce8:	80 93 98 09 	sts	0x0998, r24
    calibration[0][5] = 18;    	// real speed measured in mm/s
    4cec:	82 e1       	ldi	r24, 0x12	; 18
    4cee:	90 e0       	ldi	r25, 0x00	; 0
    4cf0:	90 93 1b 09 	sts	0x091B, r25
    4cf4:	80 93 1a 09 	sts	0x091A, r24
    calibration[1][5] = 45;
    4cf8:	8d e2       	ldi	r24, 0x2D	; 45
    4cfa:	90 e0       	ldi	r25, 0x00	; 0
    4cfc:	90 93 2b 09 	sts	0x092B, r25
    4d00:	80 93 2a 09 	sts	0x092A, r24
    calibration[2][5] = 68;
    4d04:	84 e4       	ldi	r24, 0x44	; 68
    4d06:	90 e0       	ldi	r25, 0x00	; 0
    4d08:	90 93 3b 09 	sts	0x093B, r25
    4d0c:	80 93 3a 09 	sts	0x093A, r24
    calibration[3][5] = 87;
    4d10:	87 e5       	ldi	r24, 0x57	; 87
    4d12:	90 e0       	ldi	r25, 0x00	; 0
    4d14:	90 93 4b 09 	sts	0x094B, r25
    4d18:	80 93 4a 09 	sts	0x094A, r24
    calibration[4][5] = 105;
    4d1c:	89 e6       	ldi	r24, 0x69	; 105
    4d1e:	90 e0       	ldi	r25, 0x00	; 0
    4d20:	90 93 5b 09 	sts	0x095B, r25
    4d24:	80 93 5a 09 	sts	0x095A, r24
    calibration[5][5] = 119;
    4d28:	30 93 6b 09 	sts	0x096B, r19
    4d2c:	20 93 6a 09 	sts	0x096A, r18
    calibration[6][5] = 137;
    4d30:	89 e8       	ldi	r24, 0x89	; 137
    4d32:	90 e0       	ldi	r25, 0x00	; 0
    4d34:	90 93 7b 09 	sts	0x097B, r25
    4d38:	80 93 7a 09 	sts	0x097A, r24
    calibration[7][5] = 151;
    4d3c:	87 e9       	ldi	r24, 0x97	; 151
    4d3e:	90 e0       	ldi	r25, 0x00	; 0
    4d40:	90 93 8b 09 	sts	0x098B, r25
    4d44:	80 93 8a 09 	sts	0x098A, r24
	calibration[8][5] = 168;
    4d48:	88 ea       	ldi	r24, 0xA8	; 168
    4d4a:	90 e0       	ldi	r25, 0x00	; 0
    4d4c:	90 93 9b 09 	sts	0x099B, r25
    4d50:	80 93 9a 09 	sts	0x099A, r24
    // backward right, speed control enabled
    calibration[0][6] = 20;		// measured speed with back EMF (adc 0..1023)
    4d54:	90 92 1d 09 	sts	0x091D, r9
    4d58:	80 92 1c 09 	sts	0x091C, r8
    calibration[1][6] = 39;
    4d5c:	70 93 2d 09 	sts	0x092D, r23
    4d60:	60 93 2c 09 	sts	0x092C, r22
    calibration[2][6] = 59;
    4d64:	8b e3       	ldi	r24, 0x3B	; 59
    4d66:	90 e0       	ldi	r25, 0x00	; 0
    4d68:	90 93 3d 09 	sts	0x093D, r25
    4d6c:	80 93 3c 09 	sts	0x093C, r24
    calibration[3][6] = 80;
    4d70:	30 92 4d 09 	sts	0x094D, r3
    4d74:	20 92 4c 09 	sts	0x094C, r2
    calibration[4][6] = 100;
    4d78:	84 e6       	ldi	r24, 0x64	; 100
    4d7a:	90 e0       	ldi	r25, 0x00	; 0
    4d7c:	90 93 5d 09 	sts	0x095D, r25
    4d80:	80 93 5c 09 	sts	0x095C, r24
    calibration[5][6] = 119;
    4d84:	30 93 6d 09 	sts	0x096D, r19
    4d88:	20 93 6c 09 	sts	0x096C, r18
    calibration[6][6] = 139;
    4d8c:	f0 92 7d 09 	sts	0x097D, r15
    4d90:	e0 92 7c 09 	sts	0x097C, r14
    calibration[7][6] = 160;
    4d94:	50 93 8d 09 	sts	0x098D, r21
    4d98:	40 93 8c 09 	sts	0x098C, r20
	calibration[8][6] = 180;
    4d9c:	b0 92 9d 09 	sts	0x099D, r11
    4da0:	a0 92 9c 09 	sts	0x099C, r10
    calibration[0][7] = 22;    	// real speed measured in mm/s
    4da4:	86 e1       	ldi	r24, 0x16	; 22
    4da6:	90 e0       	ldi	r25, 0x00	; 0
    4da8:	90 93 1f 09 	sts	0x091F, r25
    4dac:	80 93 1e 09 	sts	0x091E, r24
    calibration[1][7] = 46;
    4db0:	50 92 2f 09 	sts	0x092F, r5
    4db4:	40 92 2e 09 	sts	0x092E, r4
    calibration[2][7] = 65;
    4db8:	81 e4       	ldi	r24, 0x41	; 65
    4dba:	90 e0       	ldi	r25, 0x00	; 0
    4dbc:	90 93 3f 09 	sts	0x093F, r25
    4dc0:	80 93 3e 09 	sts	0x093E, r24
    calibration[3][7] = 81;
    4dc4:	70 92 4f 09 	sts	0x094F, r7
    4dc8:	60 92 4e 09 	sts	0x094E, r6
    calibration[4][7] = 96;
    4dcc:	80 e6       	ldi	r24, 0x60	; 96
    4dce:	90 e0       	ldi	r25, 0x00	; 0
    4dd0:	90 93 5f 09 	sts	0x095F, r25
    4dd4:	80 93 5e 09 	sts	0x095E, r24
    calibration[5][7] = 111;
    4dd8:	8f e6       	ldi	r24, 0x6F	; 111
    4dda:	90 e0       	ldi	r25, 0x00	; 0
    4ddc:	90 93 6f 09 	sts	0x096F, r25
    4de0:	80 93 6e 09 	sts	0x096E, r24
    calibration[6][7] = 125;
    4de4:	d0 92 7f 09 	sts	0x097F, r13
    4de8:	c0 92 7e 09 	sts	0x097E, r12
    calibration[7][7] = 139;
    4dec:	f0 92 8f 09 	sts	0x098F, r15
    4df0:	e0 92 8e 09 	sts	0x098E, r14
	calibration[8][7] = 153;
    4df4:	89 e9       	ldi	r24, 0x99	; 153
    4df6:	90 e0       	ldi	r25, 0x00	; 0
    4df8:	90 93 9f 09 	sts	0x099F, r25
    4dfc:	80 93 9e 09 	sts	0x099E, r24

    writeCalibrationToFlash();
    4e00:	0e 94 0a 3f 	call	0x7e14	; 0x7e14 <writeCalibrationToFlash>
}
    4e04:	df 91       	pop	r29
    4e06:	cf 91       	pop	r28
    4e08:	1f 91       	pop	r17
    4e0a:	0f 91       	pop	r16
    4e0c:	ff 90       	pop	r15
    4e0e:	ef 90       	pop	r14
    4e10:	df 90       	pop	r13
    4e12:	cf 90       	pop	r12
    4e14:	bf 90       	pop	r11
    4e16:	af 90       	pop	r10
    4e18:	9f 90       	pop	r9
    4e1a:	8f 90       	pop	r8
    4e1c:	7f 90       	pop	r7
    4e1e:	6f 90       	pop	r6
    4e20:	5f 90       	pop	r5
    4e22:	4f 90       	pop	r4
    4e24:	3f 90       	pop	r3
    4e26:	2f 90       	pop	r2
    4e28:	08 95       	ret

00004e2a <handleCalibration>:

}

void handleCalibration() {

	switch(calibState) {
    4e2a:	80 91 8f 0b 	lds	r24, 0x0B8F
    4e2e:	84 30       	cpi	r24, 0x04	; 4
    4e30:	09 f4       	brne	.+2      	; 0x4e34 <handleCalibration+0xa>
    4e32:	cf c1       	rjmp	.+926    	; 0x51d2 <handleCalibration+0x3a8>
    4e34:	85 30       	cpi	r24, 0x05	; 5
    4e36:	80 f0       	brcs	.+32     	; 0x4e58 <handleCalibration+0x2e>
    4e38:	86 30       	cpi	r24, 0x06	; 6
    4e3a:	09 f4       	brne	.+2      	; 0x4e3e <handleCalibration+0x14>
    4e3c:	60 c2       	rjmp	.+1216   	; 0x52fe <handleCalibration+0x4d4>
    4e3e:	86 30       	cpi	r24, 0x06	; 6
    4e40:	b0 f5       	brcc	.+108    	; 0x4eae <handleCalibration+0x84>
                calibState = CALIBRATION_STATE_NEXT;
			}
            break;

		case CALIBRATION_STATE_NEXT:
        	calibVelIndex++;
    4e42:	80 91 e9 08 	lds	r24, 0x08E9
    4e46:	8f 5f       	subi	r24, 0xFF	; 255
    4e48:	80 93 e9 08 	sts	0x08E9, r24
            if(calibVelIndex == 10) {
    4e4c:	8a 30       	cpi	r24, 0x0A	; 10
    4e4e:	09 f4       	brne	.+2      	; 0x4e52 <handleCalibration+0x28>
    4e50:	b7 c2       	rjmp	.+1390   	; 0x53c0 <handleCalibration+0x596>
					// red off
					writeCalibrationToFlash();
					calibrateOdomFlag = 0;
				}
			}
			calibState = CALIBRATION_STATE_SET_SPEED;
    4e52:	10 92 8f 0b 	sts	0x0B8F, r1
    4e56:	08 95       	ret

}

void handleCalibration() {

	switch(calibState) {
    4e58:	81 30       	cpi	r24, 0x01	; 1
    4e5a:	09 f4       	brne	.+2      	; 0x4e5e <handleCalibration+0x34>
    4e5c:	6b c1       	rjmp	.+726    	; 0x5134 <handleCalibration+0x30a>
    4e5e:	81 30       	cpi	r24, 0x01	; 1
    4e60:	08 f0       	brcs	.+2      	; 0x4e64 <handleCalibration+0x3a>
    4e62:	73 c0       	rjmp	.+230    	; 0x4f4a <handleCalibration+0x120>
			}
			break;


    	case CALIBRATION_STATE_SET_SPEED: // set speed
        	if(calibWheel == LEFT_WHEEL_FW_SC) {
    4e64:	80 91 81 05 	lds	r24, 0x0581
    4e68:	88 23       	and	r24, r24
    4e6a:	09 f0       	breq	.+2      	; 0x4e6e <handleCalibration+0x44>
    4e6c:	56 c2       	rjmp	.+1196   	; 0x531a <handleCalibration+0x4f0>
				pwm_intermediate_right_desired = 0;
    4e6e:	10 92 1a 03 	sts	0x031A, r1
    4e72:	10 92 19 03 	sts	0x0319, r1
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
    4e76:	80 91 e9 08 	lds	r24, 0x08E9
    4e7a:	25 e0       	ldi	r18, 0x05	; 5
    4e7c:	82 9f       	mul	r24, r18
    4e7e:	c0 01       	movw	r24, r0
    4e80:	11 24       	eor	r1, r1
    4e82:	88 0f       	add	r24, r24
    4e84:	99 1f       	adc	r25, r25
    4e86:	88 0f       	add	r24, r24
    4e88:	99 1f       	adc	r25, r25
    4e8a:	90 93 1c 03 	sts	0x031C, r25
    4e8e:	80 93 1b 03 	sts	0x031B, r24
				pwm_intermediate_left_desired = -((INDEX_STEP*calibVelIndex)<<2);
        	} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
				pwm_intermediate_right_desired = -((INDEX_STEP*calibVelIndex)<<2);
				pwm_intermediate_left_desired = 0;
			}               
            calibState = CALIBRATION_STATE_START_MEASURE;
    4e92:	81 e0       	ldi	r24, 0x01	; 1
    4e94:	80 93 8f 0b 	sts	0x0B8F, r24
            timeoutOdometry = getTime100MicroSec();
    4e98:	0e 94 04 10 	call	0x2008	; 0x2008 <getTime100MicroSec>
    4e9c:	60 93 5f 0b 	sts	0x0B5F, r22
    4ea0:	70 93 60 0b 	sts	0x0B60, r23
    4ea4:	80 93 61 0b 	sts	0x0B61, r24
    4ea8:	90 93 62 0b 	sts	0x0B62, r25
    4eac:	08 95       	ret

}

void handleCalibration() {

	switch(calibState) {
    4eae:	87 30       	cpi	r24, 0x07	; 7
    4eb0:	09 f4       	brne	.+2      	; 0x4eb4 <handleCalibration+0x8a>
    4eb2:	f8 c1       	rjmp	.+1008   	; 0x52a4 <handleCalibration+0x47a>
    4eb4:	88 30       	cpi	r24, 0x08	; 8
    4eb6:	79 f6       	brne	.-98     	; 0x4e56 <handleCalibration+0x2c>
	            timeoutOdometry = getTime100MicroSec();
			}
			break;

		case CALIBRATION_STATE_FIND_THRS_2:	// Wait for 5 seconds during which the ground min and max values are saved.
			if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    4eb8:	80 91 81 05 	lds	r24, 0x0581
    4ebc:	88 23       	and	r24, r24
    4ebe:	09 f4       	brne	.+2      	; 0x4ec2 <handleCalibration+0x98>
    4ec0:	d9 c0       	rjmp	.+434    	; 0x5074 <handleCalibration+0x24a>
    4ec2:	82 30       	cpi	r24, 0x02	; 2
    4ec4:	09 f4       	brne	.+2      	; 0x4ec8 <handleCalibration+0x9e>
    4ec6:	d6 c0       	rjmp	.+428    	; 0x5074 <handleCalibration+0x24a>
				}
				if(proximityResult[8] > maxGround) {
					maxGround = proximityResult[8];
				}
			} else {
				if(proximityResult[11] < minGround) {
    4ec8:	20 91 8b 02 	lds	r18, 0x028B
    4ecc:	30 91 8c 02 	lds	r19, 0x028C
    4ed0:	80 91 ec 04 	lds	r24, 0x04EC
    4ed4:	90 91 ed 04 	lds	r25, 0x04ED
    4ed8:	28 17       	cp	r18, r24
    4eda:	39 07       	cpc	r19, r25
    4edc:	24 f4       	brge	.+8      	; 0x4ee6 <handleCalibration+0xbc>
					minGround = proximityResult[11];
    4ede:	30 93 ed 04 	sts	0x04ED, r19
    4ee2:	20 93 ec 04 	sts	0x04EC, r18
				}
				if(proximityResult[11] > maxGround) {
    4ee6:	80 91 ee 04 	lds	r24, 0x04EE
    4eea:	90 91 ef 04 	lds	r25, 0x04EF
    4eee:	82 17       	cp	r24, r18
    4ef0:	93 07       	cpc	r25, r19
    4ef2:	24 f4       	brge	.+8      	; 0x4efc <handleCalibration+0xd2>
					maxGround = proximityResult[11];
    4ef4:	30 93 ef 04 	sts	0x04EF, r19
    4ef8:	20 93 ee 04 	sts	0x04EE, r18
				}
			}
			if((getTime100MicroSec() - timeoutOdometry)>PAUSE_5_SEC) {    // the robot seems to be still, go to next velcoity
    4efc:	0e 94 04 10 	call	0x2008	; 0x2008 <getTime100MicroSec>
    4f00:	20 91 5f 0b 	lds	r18, 0x0B5F
    4f04:	30 91 60 0b 	lds	r19, 0x0B60
    4f08:	40 91 61 0b 	lds	r20, 0x0B61
    4f0c:	50 91 62 0b 	lds	r21, 0x0B62
    4f10:	62 1b       	sub	r22, r18
    4f12:	73 0b       	sbc	r23, r19
    4f14:	84 0b       	sbc	r24, r20
    4f16:	95 0b       	sbc	r25, r21
    4f18:	6e 5c       	subi	r22, 0xCE	; 206
    4f1a:	7b 4b       	sbci	r23, 0xBB	; 187
    4f1c:	80 40       	sbci	r24, 0x00	; 0
    4f1e:	90 40       	sbci	r25, 0x00	; 0
    4f20:	08 f4       	brcc	.+2      	; 0x4f24 <handleCalibration+0xfa>
    4f22:	99 cf       	rjmp	.-206    	; 0x4e56 <handleCalibration+0x2c>
				calibrationThr = (minGround + maxGround)>>1;	// Take the average of the 2 as the reference threshold value.
    4f24:	80 91 ee 04 	lds	r24, 0x04EE
    4f28:	90 91 ef 04 	lds	r25, 0x04EF
    4f2c:	20 91 ec 04 	lds	r18, 0x04EC
    4f30:	30 91 ed 04 	lds	r19, 0x04ED
    4f34:	82 0f       	add	r24, r18
    4f36:	93 1f       	adc	r25, r19
    4f38:	95 95       	asr	r25
    4f3a:	87 95       	ror	r24
    4f3c:	90 93 f1 04 	sts	0x04F1, r25
    4f40:	80 93 f0 04 	sts	0x04F0, r24
				//calibrationThrLow = calibrationThr - ((maxGround-minGround)>>2);	// Use an histeresys between max and min (not needed...).
				//calibrationThrHigh = calibrationThr + ((maxGround-minGround)>>2);
                calibState = CALIBRATION_STATE_SET_SPEED;
    4f44:	10 92 8f 0b 	sts	0x0B8F, r1
    4f48:	08 95       	ret

}

void handleCalibration() {

	switch(calibState) {
    4f4a:	82 30       	cpi	r24, 0x02	; 2
    4f4c:	09 f4       	brne	.+2      	; 0x4f50 <handleCalibration+0x126>
    4f4e:	7d c1       	rjmp	.+762    	; 0x524a <handleCalibration+0x420>
    4f50:	83 30       	cpi	r24, 0x03	; 3
    4f52:	09 f0       	breq	.+2      	; 0x4f56 <handleCalibration+0x12c>
    4f54:	80 cf       	rjmp	.-256    	; 0x4e56 <handleCalibration+0x2c>
                calibState = CALIBRATION_STATE_NEXT;
			}
            break;

		case CALIBRATION_STATE_STOP_MEASURE: // look for black line again, stop time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    4f56:	80 91 81 05 	lds	r24, 0x0581
    4f5a:	88 23       	and	r24, r24
    4f5c:	09 f4       	brne	.+2      	; 0x4f60 <handleCalibration+0x136>
    4f5e:	97 c0       	rjmp	.+302    	; 0x508e <handleCalibration+0x264>
    4f60:	82 30       	cpi	r24, 0x02	; 2
    4f62:	09 f4       	brne	.+2      	; 0x4f66 <handleCalibration+0x13c>
    4f64:	94 c0       	rjmp	.+296    	; 0x508e <handleCalibration+0x264>
                    updateOdomData();
                    calibState = CALIBRATION_STATE_EXIT_BLACK_LINE_2;
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
				if(proximityResult[11] < calibrationThr) {	
    4f66:	20 91 8b 02 	lds	r18, 0x028B
    4f6a:	30 91 8c 02 	lds	r19, 0x028C
    4f6e:	80 91 f0 04 	lds	r24, 0x04F0
    4f72:	90 91 f1 04 	lds	r25, 0x04F1
    4f76:	28 17       	cp	r18, r24
    4f78:	39 07       	cpc	r19, r25
    4f7a:	0c f0       	brlt	.+2      	; 0x4f7e <handleCalibration+0x154>
    4f7c:	55 c0       	rjmp	.+170    	; 0x5028 <handleCalibration+0x1fe>
                	timeOdometry = getTime100MicroSec() - timeOdometry;
    4f7e:	0e 94 04 10 	call	0x2008	; 0x2008 <getTime100MicroSec>
    4f82:	20 91 7a 05 	lds	r18, 0x057A
    4f86:	30 91 7b 05 	lds	r19, 0x057B
    4f8a:	40 91 7c 05 	lds	r20, 0x057C
    4f8e:	50 91 7d 05 	lds	r21, 0x057D
    4f92:	62 1b       	sub	r22, r18
    4f94:	73 0b       	sbc	r23, r19
    4f96:	84 0b       	sbc	r24, r20
    4f98:	95 0b       	sbc	r25, r21
    4f9a:	60 93 7a 05 	sts	0x057A, r22
    4f9e:	70 93 7b 05 	sts	0x057B, r23
    4fa2:	80 93 7c 05 	sts	0x057C, r24
    4fa6:	90 93 7d 05 	sts	0x057D, r25
                    tempVel = (unsigned int)(DISTANCE_MM/((float)timeOdometry*104.0/1000000.0));
    4faa:	0e 94 e3 55 	call	0xabc6	; 0xabc6 <__floatunsisf>
    4fae:	20 e0       	ldi	r18, 0x00	; 0
    4fb0:	30 e0       	ldi	r19, 0x00	; 0
    4fb2:	40 ed       	ldi	r20, 0xD0	; 208
    4fb4:	52 e4       	ldi	r21, 0x42	; 66
    4fb6:	0e 94 fe 56 	call	0xadfc	; 0xadfc <__mulsf3>
    4fba:	20 e0       	ldi	r18, 0x00	; 0
    4fbc:	34 e2       	ldi	r19, 0x24	; 36
    4fbe:	44 e7       	ldi	r20, 0x74	; 116
    4fc0:	59 e4       	ldi	r21, 0x49	; 73
    4fc2:	0e 94 4a 55 	call	0xaa94	; 0xaa94 <__divsf3>
    4fc6:	9b 01       	movw	r18, r22
    4fc8:	ac 01       	movw	r20, r24
    4fca:	64 e1       	ldi	r22, 0x14	; 20
    4fcc:	7e e2       	ldi	r23, 0x2E	; 46
    4fce:	88 e7       	ldi	r24, 0x78	; 120
    4fd0:	93 e4       	ldi	r25, 0x43	; 67
    4fd2:	0e 94 4a 55 	call	0xaa94	; 0xaa94 <__divsf3>
    4fd6:	0e 94 b7 55 	call	0xab6e	; 0xab6e <__fixunssfsi>
    4fda:	70 93 a5 0b 	sts	0x0BA5, r23
    4fde:	60 93 a4 0b 	sts	0x0BA4, r22
                    avgRightSpeed = rightSpeedSumOdom/rightSumCount;
    4fe2:	20 91 da 04 	lds	r18, 0x04DA
    4fe6:	30 91 db 04 	lds	r19, 0x04DB
    4fea:	40 e0       	ldi	r20, 0x00	; 0
    4fec:	50 e0       	ldi	r21, 0x00	; 0
    4fee:	60 91 d4 04 	lds	r22, 0x04D4
    4ff2:	70 91 d5 04 	lds	r23, 0x04D5
    4ff6:	80 91 d6 04 	lds	r24, 0x04D6
    4ffa:	90 91 d7 04 	lds	r25, 0x04D7
    4ffe:	0e 94 cf 57 	call	0xaf9e	; 0xaf9e <__divmodsi4>
    5002:	30 93 df 04 	sts	0x04DF, r19
    5006:	20 93 de 04 	sts	0x04DE, r18
					updateOdomData();
    500a:	0e 94 46 18 	call	0x308c	; 0x308c <updateOdomData>
                    calibState = CALIBRATION_STATE_EXIT_BLACK_LINE_2;
    500e:	84 e0       	ldi	r24, 0x04	; 4
    5010:	80 93 8f 0b 	sts	0x0B8F, r24
                    timeoutOdometry = getTime100MicroSec();;
    5014:	0e 94 04 10 	call	0x2008	; 0x2008 <getTime100MicroSec>
    5018:	60 93 5f 0b 	sts	0x0B5F, r22
    501c:	70 93 60 0b 	sts	0x0B60, r23
    5020:	80 93 61 0b 	sts	0x0B61, r24
    5024:	90 93 62 0b 	sts	0x0B62, r25
				}
			}
			if((getTime100MicroSec() - timeoutOdometry)>PAUSE_60_SEC) {    // the robot seems to be still, go to next velcoity
    5028:	0e 94 04 10 	call	0x2008	; 0x2008 <getTime100MicroSec>
    502c:	20 91 5f 0b 	lds	r18, 0x0B5F
    5030:	30 91 60 0b 	lds	r19, 0x0B60
    5034:	40 91 61 0b 	lds	r20, 0x0B61
    5038:	50 91 62 0b 	lds	r21, 0x0B62
    503c:	62 1b       	sub	r22, r18
    503e:	73 0b       	sbc	r23, r19
    5040:	84 0b       	sbc	r24, r20
    5042:	95 0b       	sbc	r25, r21
    5044:	6c 59       	subi	r22, 0x9C	; 156
    5046:	7d 4c       	sbci	r23, 0xCD	; 205
    5048:	88 40       	sbci	r24, 0x08	; 8
    504a:	90 40       	sbci	r25, 0x00	; 0
    504c:	08 f4       	brcc	.+2      	; 0x5050 <handleCalibration+0x226>
    504e:	03 cf       	rjmp	.-506    	; 0x4e56 <handleCalibration+0x2c>
            	tempVel = 0;
    5050:	10 92 a5 0b 	sts	0x0BA5, r1
    5054:	10 92 a4 0b 	sts	0x0BA4, r1
				avgLeftSpeed = 0;
    5058:	10 92 dd 04 	sts	0x04DD, r1
    505c:	10 92 dc 04 	sts	0x04DC, r1
				avgRightSpeed = 0;
    5060:	10 92 df 04 	sts	0x04DF, r1
    5064:	10 92 de 04 	sts	0x04DE, r1
                updateOdomData();
    5068:	0e 94 46 18 	call	0x308c	; 0x308c <updateOdomData>
                calibState = CALIBRATION_STATE_NEXT;
    506c:	85 e0       	ldi	r24, 0x05	; 5
    506e:	80 93 8f 0b 	sts	0x0B8F, r24
    5072:	08 95       	ret
			}
			break;

		case CALIBRATION_STATE_FIND_THRS_2:	// Wait for 5 seconds during which the ground min and max values are saved.
			if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
				if(proximityResult[8] < minGround) {
    5074:	20 91 85 02 	lds	r18, 0x0285
    5078:	30 91 86 02 	lds	r19, 0x0286
    507c:	80 91 ec 04 	lds	r24, 0x04EC
    5080:	90 91 ed 04 	lds	r25, 0x04ED
    5084:	28 17       	cp	r18, r24
    5086:	39 07       	cpc	r19, r25
    5088:	0c f0       	brlt	.+2      	; 0x508c <handleCalibration+0x262>
    508a:	2d cf       	rjmp	.-422    	; 0x4ee6 <handleCalibration+0xbc>
    508c:	28 cf       	rjmp	.-432    	; 0x4ede <handleCalibration+0xb4>
			}
            break;

		case CALIBRATION_STATE_STOP_MEASURE: // look for black line again, stop time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
				if(proximityResult[8] < calibrationThr) {	
    508e:	20 91 85 02 	lds	r18, 0x0285
    5092:	30 91 86 02 	lds	r19, 0x0286
    5096:	80 91 f0 04 	lds	r24, 0x04F0
    509a:	90 91 f1 04 	lds	r25, 0x04F1
    509e:	28 17       	cp	r18, r24
    50a0:	39 07       	cpc	r19, r25
    50a2:	0c f0       	brlt	.+2      	; 0x50a6 <handleCalibration+0x27c>
    50a4:	c1 cf       	rjmp	.-126    	; 0x5028 <handleCalibration+0x1fe>
                	timeOdometry = getTime100MicroSec() - timeOdometry;
    50a6:	0e 94 04 10 	call	0x2008	; 0x2008 <getTime100MicroSec>
    50aa:	20 91 7a 05 	lds	r18, 0x057A
    50ae:	30 91 7b 05 	lds	r19, 0x057B
    50b2:	40 91 7c 05 	lds	r20, 0x057C
    50b6:	50 91 7d 05 	lds	r21, 0x057D
    50ba:	62 1b       	sub	r22, r18
    50bc:	73 0b       	sbc	r23, r19
    50be:	84 0b       	sbc	r24, r20
    50c0:	95 0b       	sbc	r25, r21
    50c2:	60 93 7a 05 	sts	0x057A, r22
    50c6:	70 93 7b 05 	sts	0x057B, r23
    50ca:	80 93 7c 05 	sts	0x057C, r24
    50ce:	90 93 7d 05 	sts	0x057D, r25
                    tempVel = (unsigned int)(DISTANCE_MM/((float)timeOdometry*104.0/1000000.0));
    50d2:	0e 94 e3 55 	call	0xabc6	; 0xabc6 <__floatunsisf>
    50d6:	20 e0       	ldi	r18, 0x00	; 0
    50d8:	30 e0       	ldi	r19, 0x00	; 0
    50da:	40 ed       	ldi	r20, 0xD0	; 208
    50dc:	52 e4       	ldi	r21, 0x42	; 66
    50de:	0e 94 fe 56 	call	0xadfc	; 0xadfc <__mulsf3>
    50e2:	20 e0       	ldi	r18, 0x00	; 0
    50e4:	34 e2       	ldi	r19, 0x24	; 36
    50e6:	44 e7       	ldi	r20, 0x74	; 116
    50e8:	59 e4       	ldi	r21, 0x49	; 73
    50ea:	0e 94 4a 55 	call	0xaa94	; 0xaa94 <__divsf3>
    50ee:	9b 01       	movw	r18, r22
    50f0:	ac 01       	movw	r20, r24
    50f2:	64 e1       	ldi	r22, 0x14	; 20
    50f4:	7e e2       	ldi	r23, 0x2E	; 46
    50f6:	88 e7       	ldi	r24, 0x78	; 120
    50f8:	93 e4       	ldi	r25, 0x43	; 67
    50fa:	0e 94 4a 55 	call	0xaa94	; 0xaa94 <__divsf3>
    50fe:	0e 94 b7 55 	call	0xab6e	; 0xab6e <__fixunssfsi>
    5102:	70 93 a5 0b 	sts	0x0BA5, r23
    5106:	60 93 a4 0b 	sts	0x0BA4, r22
					avgLeftSpeed = leftSpeedSumOdom/leftSumCount;
    510a:	20 91 d8 04 	lds	r18, 0x04D8
    510e:	30 91 d9 04 	lds	r19, 0x04D9
    5112:	40 e0       	ldi	r20, 0x00	; 0
    5114:	50 e0       	ldi	r21, 0x00	; 0
    5116:	60 91 d0 04 	lds	r22, 0x04D0
    511a:	70 91 d1 04 	lds	r23, 0x04D1
    511e:	80 91 d2 04 	lds	r24, 0x04D2
    5122:	90 91 d3 04 	lds	r25, 0x04D3
    5126:	0e 94 cf 57 	call	0xaf9e	; 0xaf9e <__divmodsi4>
    512a:	30 93 dd 04 	sts	0x04DD, r19
    512e:	20 93 dc 04 	sts	0x04DC, r18
    5132:	6b cf       	rjmp	.-298    	; 0x500a <handleCalibration+0x1e0>
            calibState = CALIBRATION_STATE_START_MEASURE;
            timeoutOdometry = getTime100MicroSec();
            break;

		case CALIBRATION_STATE_START_MEASURE: // look for black line, start time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    5134:	80 91 81 05 	lds	r24, 0x0581
    5138:	88 23       	and	r24, r24
    513a:	91 f1       	breq	.+100    	; 0x51a0 <handleCalibration+0x376>
    513c:	82 30       	cpi	r24, 0x02	; 2
    513e:	81 f1       	breq	.+96     	; 0x51a0 <handleCalibration+0x376>
                    timeOdometry = getTime100MicroSec();;
                    calibState = CALIBRATION_STATE_EXIT_BLACK_LINE_1;
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
				if(proximityResult[11] < calibrationThr) {	
    5140:	20 91 8b 02 	lds	r18, 0x028B
    5144:	30 91 8c 02 	lds	r19, 0x028C
    5148:	80 91 f0 04 	lds	r24, 0x04F0
    514c:	90 91 f1 04 	lds	r25, 0x04F1
    5150:	28 17       	cp	r18, r24
    5152:	39 07       	cpc	r19, r25
    5154:	0c f0       	brlt	.+2      	; 0x5158 <handleCalibration+0x32e>
    5156:	68 cf       	rjmp	.-304    	; 0x5028 <handleCalibration+0x1fe>
					rightSumCount = 0;
    5158:	10 92 db 04 	sts	0x04DB, r1
    515c:	10 92 da 04 	sts	0x04DA, r1
					rightSpeedSumOdom = 0;
    5160:	10 92 d4 04 	sts	0x04D4, r1
    5164:	10 92 d5 04 	sts	0x04D5, r1
    5168:	10 92 d6 04 	sts	0x04D6, r1
    516c:	10 92 d7 04 	sts	0x04D7, r1
                    timeOdometry = getTime100MicroSec();;
    5170:	0e 94 04 10 	call	0x2008	; 0x2008 <getTime100MicroSec>
    5174:	60 93 7a 05 	sts	0x057A, r22
    5178:	70 93 7b 05 	sts	0x057B, r23
    517c:	80 93 7c 05 	sts	0x057C, r24
    5180:	90 93 7d 05 	sts	0x057D, r25
                    calibState = CALIBRATION_STATE_EXIT_BLACK_LINE_1;
    5184:	82 e0       	ldi	r24, 0x02	; 2
    5186:	80 93 8f 0b 	sts	0x0B8F, r24
                    timeoutOdometry = getTime100MicroSec();;
    518a:	0e 94 04 10 	call	0x2008	; 0x2008 <getTime100MicroSec>
    518e:	60 93 5f 0b 	sts	0x0B5F, r22
    5192:	70 93 60 0b 	sts	0x0B60, r23
    5196:	80 93 61 0b 	sts	0x0B61, r24
    519a:	90 93 62 0b 	sts	0x0B62, r25
    519e:	44 cf       	rjmp	.-376    	; 0x5028 <handleCalibration+0x1fe>
            timeoutOdometry = getTime100MicroSec();
            break;

		case CALIBRATION_STATE_START_MEASURE: // look for black line, start time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
				if(proximityResult[8] < calibrationThr) {				
    51a0:	20 91 85 02 	lds	r18, 0x0285
    51a4:	30 91 86 02 	lds	r19, 0x0286
    51a8:	80 91 f0 04 	lds	r24, 0x04F0
    51ac:	90 91 f1 04 	lds	r25, 0x04F1
    51b0:	28 17       	cp	r18, r24
    51b2:	39 07       	cpc	r19, r25
    51b4:	0c f0       	brlt	.+2      	; 0x51b8 <handleCalibration+0x38e>
    51b6:	38 cf       	rjmp	.-400    	; 0x5028 <handleCalibration+0x1fe>
                	leftSumCount = 0;
    51b8:	10 92 d9 04 	sts	0x04D9, r1
    51bc:	10 92 d8 04 	sts	0x04D8, r1
                    leftSpeedSumOdom = 0;
    51c0:	10 92 d0 04 	sts	0x04D0, r1
    51c4:	10 92 d1 04 	sts	0x04D1, r1
    51c8:	10 92 d2 04 	sts	0x04D2, r1
    51cc:	10 92 d3 04 	sts	0x04D3, r1
    51d0:	cf cf       	rjmp	.-98     	; 0x5170 <handleCalibration+0x346>
                calibState = CALIBRATION_STATE_NEXT;
			}
            break;

		case CALIBRATION_STATE_EXIT_BLACK_LINE_2: // exit from black line again
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    51d2:	80 91 81 05 	lds	r24, 0x0581
    51d6:	88 23       	and	r24, r24
    51d8:	61 f1       	breq	.+88     	; 0x5232 <handleCalibration+0x408>
    51da:	82 30       	cpi	r24, 0x02	; 2
    51dc:	51 f1       	breq	.+84     	; 0x5232 <handleCalibration+0x408>
				if(proximityResult[8] > calibrationThr) {	
                	calibState = CALIBRATION_STATE_NEXT;
				}
			} else {
				if(proximityResult[11] > calibrationThr) {	
    51de:	20 91 8b 02 	lds	r18, 0x028B
    51e2:	30 91 8c 02 	lds	r19, 0x028C
    51e6:	80 91 f0 04 	lds	r24, 0x04F0
    51ea:	90 91 f1 04 	lds	r25, 0x04F1
    51ee:	82 17       	cp	r24, r18
    51f0:	93 07       	cpc	r25, r19
    51f2:	1c f4       	brge	.+6      	; 0x51fa <handleCalibration+0x3d0>
					calibState = CALIBRATION_STATE_NEXT;
    51f4:	85 e0       	ldi	r24, 0x05	; 5
    51f6:	80 93 8f 0b 	sts	0x0B8F, r24
				}
			}
            if((getTime100MicroSec() - timeoutOdometry)>PAUSE_60_SEC) {    // the robot seems to be still, go to next velocity
    51fa:	0e 94 04 10 	call	0x2008	; 0x2008 <getTime100MicroSec>
    51fe:	20 91 5f 0b 	lds	r18, 0x0B5F
    5202:	30 91 60 0b 	lds	r19, 0x0B60
    5206:	40 91 61 0b 	lds	r20, 0x0B61
    520a:	50 91 62 0b 	lds	r21, 0x0B62
    520e:	62 1b       	sub	r22, r18
    5210:	73 0b       	sbc	r23, r19
    5212:	84 0b       	sbc	r24, r20
    5214:	95 0b       	sbc	r25, r21
    5216:	6c 59       	subi	r22, 0x9C	; 156
    5218:	7d 4c       	sbci	r23, 0xCD	; 205
    521a:	88 40       	sbci	r24, 0x08	; 8
    521c:	90 40       	sbci	r25, 0x00	; 0
    521e:	08 f4       	brcc	.+2      	; 0x5222 <handleCalibration+0x3f8>
    5220:	1a ce       	rjmp	.-972    	; 0x4e56 <handleCalibration+0x2c>
            	tempVel = 0;
    5222:	10 92 a5 0b 	sts	0x0BA5, r1
    5226:	10 92 a4 0b 	sts	0x0BA4, r1
                //updateOdomData();
                calibState = CALIBRATION_STATE_NEXT;
    522a:	85 e0       	ldi	r24, 0x05	; 5
    522c:	80 93 8f 0b 	sts	0x0B8F, r24
    5230:	08 95       	ret
			}
            break;

		case CALIBRATION_STATE_EXIT_BLACK_LINE_2: // exit from black line again
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
				if(proximityResult[8] > calibrationThr) {	
    5232:	20 91 85 02 	lds	r18, 0x0285
    5236:	30 91 86 02 	lds	r19, 0x0286
    523a:	80 91 f0 04 	lds	r24, 0x04F0
    523e:	90 91 f1 04 	lds	r25, 0x04F1
    5242:	82 17       	cp	r24, r18
    5244:	93 07       	cpc	r25, r19
    5246:	cc f6       	brge	.-78     	; 0x51fa <handleCalibration+0x3d0>
    5248:	d5 cf       	rjmp	.-86     	; 0x51f4 <handleCalibration+0x3ca>
                calibState = CALIBRATION_STATE_NEXT;
			}
			break;

		case CALIBRATION_STATE_EXIT_BLACK_LINE_1: // exit from black line
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    524a:	80 91 81 05 	lds	r24, 0x0581
    524e:	88 23       	and	r24, r24
    5250:	e1 f0       	breq	.+56     	; 0x528a <handleCalibration+0x460>
    5252:	82 30       	cpi	r24, 0x02	; 2
    5254:	d1 f0       	breq	.+52     	; 0x528a <handleCalibration+0x460>
				if(proximityResult[8] > calibrationThr) {	
                	calibState = CALIBRATION_STATE_STOP_MEASURE;
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
				if(proximityResult[11] > calibrationThr) {	
    5256:	20 91 8b 02 	lds	r18, 0x028B
    525a:	30 91 8c 02 	lds	r19, 0x028C
    525e:	80 91 f0 04 	lds	r24, 0x04F0
    5262:	90 91 f1 04 	lds	r25, 0x04F1
    5266:	82 17       	cp	r24, r18
    5268:	93 07       	cpc	r25, r19
    526a:	0c f0       	brlt	.+2      	; 0x526e <handleCalibration+0x444>
    526c:	dd ce       	rjmp	.-582    	; 0x5028 <handleCalibration+0x1fe>
                	calibState = CALIBRATION_STATE_STOP_MEASURE;
    526e:	83 e0       	ldi	r24, 0x03	; 3
    5270:	80 93 8f 0b 	sts	0x0B8F, r24
                    timeoutOdometry = getTime100MicroSec();;
    5274:	0e 94 04 10 	call	0x2008	; 0x2008 <getTime100MicroSec>
    5278:	60 93 5f 0b 	sts	0x0B5F, r22
    527c:	70 93 60 0b 	sts	0x0B60, r23
    5280:	80 93 61 0b 	sts	0x0B61, r24
    5284:	90 93 62 0b 	sts	0x0B62, r25
    5288:	cf ce       	rjmp	.-610    	; 0x5028 <handleCalibration+0x1fe>
			}
			break;

		case CALIBRATION_STATE_EXIT_BLACK_LINE_1: // exit from black line
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
				if(proximityResult[8] > calibrationThr) {	
    528a:	20 91 85 02 	lds	r18, 0x0285
    528e:	30 91 86 02 	lds	r19, 0x0286
    5292:	80 91 f0 04 	lds	r24, 0x04F0
    5296:	90 91 f1 04 	lds	r25, 0x04F1
    529a:	82 17       	cp	r24, r18
    529c:	93 07       	cpc	r25, r19
    529e:	0c f0       	brlt	.+2      	; 0x52a2 <handleCalibration+0x478>
    52a0:	c3 ce       	rjmp	.-634    	; 0x5028 <handleCalibration+0x1fe>
    52a2:	e5 cf       	rjmp	.-54     	; 0x526e <handleCalibration+0x444>
			calibState = CALIBRATION_STATE_FIND_THRS_1;
			break;
		
		case CALIBRATION_STATE_FIND_THRS_1:	// Find the max and min of the ground sensor value in order to get a threshold to detect 
											// the black line securily (the threshold will be the average of the min and max).
			if((getTime100MicroSec() - timeoutOdometry)>PAUSE_1_SEC) { 	// Wait for the current sensor calibration to be terminated 
    52a4:	0e 94 04 10 	call	0x2008	; 0x2008 <getTime100MicroSec>
    52a8:	20 91 5f 0b 	lds	r18, 0x0B5F
    52ac:	30 91 60 0b 	lds	r19, 0x0B60
    52b0:	40 91 61 0b 	lds	r20, 0x0B61
    52b4:	50 91 62 0b 	lds	r21, 0x0B62
    52b8:	62 1b       	sub	r22, r18
    52ba:	73 0b       	sbc	r23, r19
    52bc:	84 0b       	sbc	r24, r20
    52be:	95 0b       	sbc	r25, r21
    52c0:	60 59       	subi	r22, 0x90	; 144
    52c2:	75 42       	sbci	r23, 0x25	; 37
    52c4:	80 40       	sbci	r24, 0x00	; 0
    52c6:	90 40       	sbci	r25, 0x00	; 0
    52c8:	08 f4       	brcc	.+2      	; 0x52cc <handleCalibration+0x4a2>
    52ca:	c5 cd       	rjmp	.-1142   	; 0x4e56 <handleCalibration+0x2c>
																		// (started when calibration is started).
				if(calibWheel == LEFT_WHEEL_FW_SC) {
    52cc:	80 91 81 05 	lds	r24, 0x0581
    52d0:	88 23       	and	r24, r24
    52d2:	09 f4       	brne	.+2      	; 0x52d6 <handleCalibration+0x4ac>
    52d4:	40 c0       	rjmp	.+128    	; 0x5356 <handleCalibration+0x52c>
					pwm_intermediate_right_desired = 0;
					pwm_intermediate_left_desired = (INDEX_STEP*3)<<2;		// Use a moderate speed.
	        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    52d6:	81 30       	cpi	r24, 0x01	; 1
    52d8:	09 f4       	brne	.+2      	; 0x52dc <handleCalibration+0x4b2>
    52da:	a1 c0       	rjmp	.+322    	; 0x541e <handleCalibration+0x5f4>
					pwm_intermediate_right_desired = (INDEX_STEP*3)<<2;
					pwm_intermediate_left_desired = 0;
				} else if(calibWheel == LEFT_WHEEL_BW_SC) {
    52dc:	82 30       	cpi	r24, 0x02	; 2
    52de:	09 f4       	brne	.+2      	; 0x52e2 <handleCalibration+0x4b8>
    52e0:	a9 c0       	rjmp	.+338    	; 0x5434 <handleCalibration+0x60a>
					pwm_intermediate_right_desired = 0;
					pwm_intermediate_left_desired = -((INDEX_STEP*3)<<2);
	        	} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    52e2:	83 30       	cpi	r24, 0x03	; 3
    52e4:	09 f0       	breq	.+2      	; 0x52e8 <handleCalibration+0x4be>
    52e6:	41 c0       	rjmp	.+130    	; 0x536a <handleCalibration+0x540>
					pwm_intermediate_right_desired = -((INDEX_STEP*3)<<2);
    52e8:	84 ec       	ldi	r24, 0xC4	; 196
    52ea:	9f ef       	ldi	r25, 0xFF	; 255
    52ec:	90 93 1a 03 	sts	0x031A, r25
    52f0:	80 93 19 03 	sts	0x0319, r24
					pwm_intermediate_left_desired = 0;
    52f4:	10 92 1c 03 	sts	0x031C, r1
    52f8:	10 92 1b 03 	sts	0x031B, r1
    52fc:	36 c0       	rjmp	.+108    	; 0x536a <handleCalibration+0x540>

void handleCalibration() {

	switch(calibState) {
		case CALIBRATION_STATE_FIND_THRS_0:
			timeoutOdometry = getTime100MicroSec();
    52fe:	0e 94 04 10 	call	0x2008	; 0x2008 <getTime100MicroSec>
    5302:	60 93 5f 0b 	sts	0x0B5F, r22
    5306:	70 93 60 0b 	sts	0x0B60, r23
    530a:	80 93 61 0b 	sts	0x0B61, r24
    530e:	90 93 62 0b 	sts	0x0B62, r25
			calibState = CALIBRATION_STATE_FIND_THRS_1;
    5312:	87 e0       	ldi	r24, 0x07	; 7
    5314:	80 93 8f 0b 	sts	0x0B8F, r24
    5318:	08 95       	ret

    	case CALIBRATION_STATE_SET_SPEED: // set speed
        	if(calibWheel == LEFT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = 0;
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    531a:	81 30       	cpi	r24, 0x01	; 1
    531c:	f1 f1       	breq	.+124    	; 0x539a <handleCalibration+0x570>
				pwm_intermediate_right_desired = (INDEX_STEP*calibVelIndex)<<2;
				pwm_intermediate_left_desired = 0;
			} else if(calibWheel == LEFT_WHEEL_BW_SC) {
    531e:	82 30       	cpi	r24, 0x02	; 2
    5320:	09 f4       	brne	.+2      	; 0x5324 <handleCalibration+0x4fa>
    5322:	67 c0       	rjmp	.+206    	; 0x53f2 <handleCalibration+0x5c8>
				pwm_intermediate_right_desired = 0;
				pwm_intermediate_left_desired = -((INDEX_STEP*calibVelIndex)<<2);
        	} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    5324:	83 30       	cpi	r24, 0x03	; 3
    5326:	09 f0       	breq	.+2      	; 0x532a <handleCalibration+0x500>
    5328:	b4 cd       	rjmp	.-1176   	; 0x4e92 <handleCalibration+0x68>
				pwm_intermediate_right_desired = -((INDEX_STEP*calibVelIndex)<<2);
    532a:	80 91 e9 08 	lds	r24, 0x08E9
    532e:	25 e0       	ldi	r18, 0x05	; 5
    5330:	82 9f       	mul	r24, r18
    5332:	c0 01       	movw	r24, r0
    5334:	11 24       	eor	r1, r1
    5336:	88 0f       	add	r24, r24
    5338:	99 1f       	adc	r25, r25
    533a:	88 0f       	add	r24, r24
    533c:	99 1f       	adc	r25, r25
    533e:	90 95       	com	r25
    5340:	81 95       	neg	r24
    5342:	9f 4f       	sbci	r25, 0xFF	; 255
    5344:	90 93 1a 03 	sts	0x031A, r25
    5348:	80 93 19 03 	sts	0x0319, r24
				pwm_intermediate_left_desired = 0;
    534c:	10 92 1c 03 	sts	0x031C, r1
    5350:	10 92 1b 03 	sts	0x031B, r1
    5354:	9e cd       	rjmp	.-1220   	; 0x4e92 <handleCalibration+0x68>
		case CALIBRATION_STATE_FIND_THRS_1:	// Find the max and min of the ground sensor value in order to get a threshold to detect 
											// the black line securily (the threshold will be the average of the min and max).
			if((getTime100MicroSec() - timeoutOdometry)>PAUSE_1_SEC) { 	// Wait for the current sensor calibration to be terminated 
																		// (started when calibration is started).
				if(calibWheel == LEFT_WHEEL_FW_SC) {
					pwm_intermediate_right_desired = 0;
    5356:	10 92 1a 03 	sts	0x031A, r1
    535a:	10 92 19 03 	sts	0x0319, r1
					pwm_intermediate_left_desired = (INDEX_STEP*3)<<2;		// Use a moderate speed.
    535e:	8c e3       	ldi	r24, 0x3C	; 60
    5360:	90 e0       	ldi	r25, 0x00	; 0
    5362:	90 93 1c 03 	sts	0x031C, r25
    5366:	80 93 1b 03 	sts	0x031B, r24
					pwm_intermediate_left_desired = -((INDEX_STEP*3)<<2);
	        	} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
					pwm_intermediate_right_desired = -((INDEX_STEP*3)<<2);
					pwm_intermediate_left_desired = 0;
				}               
				minGround = 1023;
    536a:	8f ef       	ldi	r24, 0xFF	; 255
    536c:	93 e0       	ldi	r25, 0x03	; 3
    536e:	90 93 ed 04 	sts	0x04ED, r25
    5372:	80 93 ec 04 	sts	0x04EC, r24
				maxGround = 0;
    5376:	10 92 ef 04 	sts	0x04EF, r1
    537a:	10 92 ee 04 	sts	0x04EE, r1
	            calibState = CALIBRATION_STATE_FIND_THRS_2;
    537e:	88 e0       	ldi	r24, 0x08	; 8
    5380:	80 93 8f 0b 	sts	0x0B8F, r24
	            timeoutOdometry = getTime100MicroSec();
    5384:	0e 94 04 10 	call	0x2008	; 0x2008 <getTime100MicroSec>
    5388:	60 93 5f 0b 	sts	0x0B5F, r22
    538c:	70 93 60 0b 	sts	0x0B60, r23
    5390:	80 93 61 0b 	sts	0x0B61, r24
    5394:	90 93 62 0b 	sts	0x0B62, r25
    5398:	08 95       	ret
    	case CALIBRATION_STATE_SET_SPEED: // set speed
        	if(calibWheel == LEFT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = 0;
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = (INDEX_STEP*calibVelIndex)<<2;
    539a:	80 91 e9 08 	lds	r24, 0x08E9
    539e:	25 e0       	ldi	r18, 0x05	; 5
    53a0:	82 9f       	mul	r24, r18
    53a2:	c0 01       	movw	r24, r0
    53a4:	11 24       	eor	r1, r1
    53a6:	88 0f       	add	r24, r24
    53a8:	99 1f       	adc	r25, r25
    53aa:	88 0f       	add	r24, r24
    53ac:	99 1f       	adc	r25, r25
    53ae:	90 93 1a 03 	sts	0x031A, r25
    53b2:	80 93 19 03 	sts	0x0319, r24
				pwm_intermediate_left_desired = 0;
    53b6:	10 92 1c 03 	sts	0x031C, r1
    53ba:	10 92 1b 03 	sts	0x031B, r1
    53be:	69 cd       	rjmp	.-1326   	; 0x4e92 <handleCalibration+0x68>
            break;

		case CALIBRATION_STATE_NEXT:
        	calibVelIndex++;
            if(calibVelIndex == 10) {
            	calibVelIndex = 1;
    53c0:	91 e0       	ldi	r25, 0x01	; 1
    53c2:	90 93 e9 08 	sts	0x08E9, r25
                if(calibWheel == LEFT_WHEEL_FW_SC) {
    53c6:	80 91 81 05 	lds	r24, 0x0581
    53ca:	88 23       	and	r24, r24
    53cc:	21 f4       	brne	.+8      	; 0x53d6 <handleCalibration+0x5ac>
                	calibWheel = LEFT_WHEEL_BW_SC;
    53ce:	82 e0       	ldi	r24, 0x02	; 2
    53d0:	80 93 81 05 	sts	0x0581, r24
    53d4:	3e cd       	rjmp	.-1412   	; 0x4e52 <handleCalibration+0x28>
				} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    53d6:	81 30       	cpi	r24, 0x01	; 1
    53d8:	c1 f1       	breq	.+112    	; 0x544a <handleCalibration+0x620>
                	calibWheel = RIGHT_WHEEL_BW_SC;
				} else if(calibWheel == LEFT_WHEEL_BW_SC) {
    53da:	82 30       	cpi	r24, 0x02	; 2
    53dc:	d1 f1       	breq	.+116    	; 0x5452 <handleCalibration+0x628>
                	calibWheel = RIGHT_WHEEL_FW_SC;
					calibrateOdomFlag = 0;
					calibState = CALIBRATION_STATE_FIND_THRS_0;	// Recompute the thresholds for the right ground.
					break;
					// red on
				} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    53de:	83 30       	cpi	r24, 0x03	; 3
    53e0:	09 f0       	breq	.+2      	; 0x53e4 <handleCalibration+0x5ba>
    53e2:	37 cd       	rjmp	.-1426   	; 0x4e52 <handleCalibration+0x28>
                	calibWheel = LEFT_WHEEL_FW_SC;					
    53e4:	10 92 81 05 	sts	0x0581, r1
					// red off
					writeCalibrationToFlash();
    53e8:	0e 94 0a 3f 	call	0x7e14	; 0x7e14 <writeCalibrationToFlash>
					calibrateOdomFlag = 0;
    53ec:	10 92 9c 05 	sts	0x059C, r1
    53f0:	30 cd       	rjmp	.-1440   	; 0x4e52 <handleCalibration+0x28>
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = (INDEX_STEP*calibVelIndex)<<2;
				pwm_intermediate_left_desired = 0;
			} else if(calibWheel == LEFT_WHEEL_BW_SC) {
				pwm_intermediate_right_desired = 0;
    53f2:	10 92 1a 03 	sts	0x031A, r1
    53f6:	10 92 19 03 	sts	0x0319, r1
				pwm_intermediate_left_desired = -((INDEX_STEP*calibVelIndex)<<2);
    53fa:	80 91 e9 08 	lds	r24, 0x08E9
    53fe:	25 e0       	ldi	r18, 0x05	; 5
    5400:	82 9f       	mul	r24, r18
    5402:	c0 01       	movw	r24, r0
    5404:	11 24       	eor	r1, r1
    5406:	88 0f       	add	r24, r24
    5408:	99 1f       	adc	r25, r25
    540a:	88 0f       	add	r24, r24
    540c:	99 1f       	adc	r25, r25
    540e:	90 95       	com	r25
    5410:	81 95       	neg	r24
    5412:	9f 4f       	sbci	r25, 0xFF	; 255
    5414:	90 93 1c 03 	sts	0x031C, r25
    5418:	80 93 1b 03 	sts	0x031B, r24
    541c:	3a cd       	rjmp	.-1420   	; 0x4e92 <handleCalibration+0x68>
																		// (started when calibration is started).
				if(calibWheel == LEFT_WHEEL_FW_SC) {
					pwm_intermediate_right_desired = 0;
					pwm_intermediate_left_desired = (INDEX_STEP*3)<<2;		// Use a moderate speed.
	        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
					pwm_intermediate_right_desired = (INDEX_STEP*3)<<2;
    541e:	8c e3       	ldi	r24, 0x3C	; 60
    5420:	90 e0       	ldi	r25, 0x00	; 0
    5422:	90 93 1a 03 	sts	0x031A, r25
    5426:	80 93 19 03 	sts	0x0319, r24
					pwm_intermediate_left_desired = 0;
    542a:	10 92 1c 03 	sts	0x031C, r1
    542e:	10 92 1b 03 	sts	0x031B, r1
    5432:	9b cf       	rjmp	.-202    	; 0x536a <handleCalibration+0x540>
				} else if(calibWheel == LEFT_WHEEL_BW_SC) {
					pwm_intermediate_right_desired = 0;
    5434:	10 92 1a 03 	sts	0x031A, r1
    5438:	10 92 19 03 	sts	0x0319, r1
					pwm_intermediate_left_desired = -((INDEX_STEP*3)<<2);
    543c:	84 ec       	ldi	r24, 0xC4	; 196
    543e:	9f ef       	ldi	r25, 0xFF	; 255
    5440:	90 93 1c 03 	sts	0x031C, r25
    5444:	80 93 1b 03 	sts	0x031B, r24
    5448:	90 cf       	rjmp	.-224    	; 0x536a <handleCalibration+0x540>
            if(calibVelIndex == 10) {
            	calibVelIndex = 1;
                if(calibWheel == LEFT_WHEEL_FW_SC) {
                	calibWheel = LEFT_WHEEL_BW_SC;
				} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
                	calibWheel = RIGHT_WHEEL_BW_SC;
    544a:	83 e0       	ldi	r24, 0x03	; 3
    544c:	80 93 81 05 	sts	0x0581, r24
    5450:	00 cd       	rjmp	.-1536   	; 0x4e52 <handleCalibration+0x28>
				} else if(calibWheel == LEFT_WHEEL_BW_SC) {
                	calibWheel = RIGHT_WHEEL_FW_SC;
    5452:	90 93 81 05 	sts	0x0581, r25
					calibrateOdomFlag = 0;
    5456:	10 92 9c 05 	sts	0x059C, r1
					calibState = CALIBRATION_STATE_FIND_THRS_0;	// Recompute the thresholds for the right ground.
    545a:	86 e0       	ldi	r24, 0x06	; 6
    545c:	80 93 8f 0b 	sts	0x0B8F, r24
    5460:	08 95       	ret

00005462 <handleMotorsWithSpeedController>:
		OCR4B = 0;
	}

}

void handleMotorsWithSpeedController() {
    5462:	2f 92       	push	r2
    5464:	3f 92       	push	r3
    5466:	4f 92       	push	r4
    5468:	5f 92       	push	r5
    546a:	6f 92       	push	r6
    546c:	7f 92       	push	r7
    546e:	8f 92       	push	r8
    5470:	9f 92       	push	r9
    5472:	af 92       	push	r10
    5474:	bf 92       	push	r11
    5476:	cf 92       	push	r12
    5478:	df 92       	push	r13
    547a:	ef 92       	push	r14
    547c:	ff 92       	push	r15
    547e:	0f 93       	push	r16
    5480:	1f 93       	push	r17
// at steps untill raching the new desired speed, resulting in a smooth acceleration).
// At the moment the "soft acceleration" is disabled and can be enabled only in the code 
// by setting the value of "softAccEnabled" to 1 at variable initialization.
void handleSoftAcceleration() {
		
	if(calibrateOdomFlag==0) {
    5482:	40 91 9c 05 	lds	r20, 0x059C
    5486:	44 23       	and	r20, r20
    5488:	09 f4       	brne	.+2      	; 0x548c <handleMotorsWithSpeedController+0x2a>
    548a:	4e c2       	rjmp	.+1180   	; 0x5928 <handleMotorsWithSpeedController+0x4c6>
    548c:	20 91 19 03 	lds	r18, 0x0319
    5490:	30 91 1a 03 	lds	r19, 0x031A

void handleMotorsWithSpeedController() {

	handleSoftAcceleration();

	if(calibrateOdomFlag==1) {
    5494:	41 30       	cpi	r20, 0x01	; 1
    5496:	09 f4       	brne	.+2      	; 0x549a <handleMotorsWithSpeedController+0x38>
    5498:	0c c3       	rjmp	.+1560   	; 0x5ab2 <handleMotorsWithSpeedController+0x650>
		pwm_right_working = pwm_intermediate_right_desired;
		pwm_left_working = pwm_intermediate_left_desired;
	} else {
		if(pwm_intermediate_right_desired >= 0) {		// pwm in the range -127..127
    549a:	37 fd       	sbrc	r19, 7
    549c:	81 c1       	rjmp	.+770    	; 0x57a0 <handleMotorsWithSpeedController+0x33e>
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_FW_SC);
    549e:	c9 01       	movw	r24, r18
    54a0:	61 e0       	ldi	r22, 0x01	; 1
    54a2:	0e 94 4a 19 	call	0x3294	; 0x3294 <getInputFromSpeed>
    54a6:	90 93 2a 03 	sts	0x032A, r25
    54aa:	80 93 29 03 	sts	0x0329, r24
		} else {
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_BW_SC);
		}
		if(pwm_intermediate_left_desired >= 0) {		// pwm in the range -127..127
    54ae:	80 91 1b 03 	lds	r24, 0x031B
    54b2:	90 91 1c 03 	lds	r25, 0x031C
    54b6:	97 fd       	sbrc	r25, 7
    54b8:	81 c1       	rjmp	.+770    	; 0x57bc <handleMotorsWithSpeedController+0x35a>
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_FW_SC);
    54ba:	60 e0       	ldi	r22, 0x00	; 0
    54bc:	0e 94 4a 19 	call	0x3294	; 0x3294 <getInputFromSpeed>
    54c0:	90 93 2c 03 	sts	0x032C, r25
    54c4:	80 93 2b 03 	sts	0x032B, r24
		} else {
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_BW_SC);
		}
	}

	if(obstacleAvoidanceEnabled) {
    54c8:	80 91 94 04 	lds	r24, 0x0494
    54cc:	88 23       	and	r24, r24
    54ce:	09 f0       	breq	.+2      	; 0x54d2 <handleMotorsWithSpeedController+0x70>
    54d0:	81 c1       	rjmp	.+770    	; 0x57d4 <handleMotorsWithSpeedController+0x372>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
	}
	pwm_left_desired_to_control = pwm_left_working;
    54d2:	80 91 2b 03 	lds	r24, 0x032B
    54d6:	90 91 2c 03 	lds	r25, 0x032C
    54da:	90 93 08 03 	sts	0x0308, r25
    54de:	80 93 07 03 	sts	0x0307, r24
	pwm_right_desired_to_control = pwm_right_working;
    54e2:	80 91 29 03 	lds	r24, 0x0329
    54e6:	90 91 2a 03 	lds	r25, 0x032A
    54ea:	90 93 06 03 	sts	0x0306, r25
    54ee:	80 93 05 03 	sts	0x0305, r24

	if(compute_left_vel) {
    54f2:	80 91 03 02 	lds	r24, 0x0203
    54f6:	88 23       	and	r24, r24
    54f8:	09 f4       	brne	.+2      	; 0x54fc <handleMotorsWithSpeedController+0x9a>
    54fa:	a2 c0       	rjmp	.+324    	; 0x5640 <handleMotorsWithSpeedController+0x1de>

		last_left_vel = left_vel_sum>>2;
    54fc:	20 91 09 03 	lds	r18, 0x0309
    5500:	30 91 0a 03 	lds	r19, 0x030A
    5504:	36 95       	lsr	r19
    5506:	27 95       	ror	r18
    5508:	36 95       	lsr	r19
    550a:	27 95       	ror	r18
    550c:	30 93 0e 03 	sts	0x030E, r19
    5510:	20 93 0d 03 	sts	0x030D, r18
		compute_left_vel = 0;
    5514:	10 92 03 02 	sts	0x0203, r1
		left_vel_sum = 0;
    5518:	10 92 0a 03 	sts	0x030A, r1
    551c:	10 92 09 03 	sts	0x0309, r1
		
		if(calibrateOdomFlag==1) {
    5520:	80 91 9c 05 	lds	r24, 0x059C
    5524:	81 30       	cpi	r24, 0x01	; 1
    5526:	09 f4       	brne	.+2      	; 0x552a <handleMotorsWithSpeedController+0xc8>
    5528:	95 c3       	rjmp	.+1834   	; 0x5c54 <handleMotorsWithSpeedController+0x7f2>
			leftSpeedSumOdom += last_left_vel;
			leftSumCount++;
		}

		getLeftSpeedFromInput();	// get speed in mm/s
    552a:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <getLeftSpeedFromInput>
		leftDistPrev = leftDist;
    552e:	80 91 bb 04 	lds	r24, 0x04BB
    5532:	90 91 bc 04 	lds	r25, 0x04BC
    5536:	a0 91 bd 04 	lds	r26, 0x04BD
    553a:	b0 91 be 04 	lds	r27, 0x04BE
    553e:	80 93 c3 04 	sts	0x04C3, r24
    5542:	90 93 c4 04 	sts	0x04C4, r25
    5546:	a0 93 c5 04 	sts	0x04C5, r26
    554a:	b0 93 c6 04 	sts	0x04C6, r27
		//timeOdometry = getTime100MicroSec()-timeLeftOdom;
		leftDist += ((float)speedLeftFromEnc*((float)(getTime100MicroSec()-timeLeftOdom)*104.0))/1000000.0;	// distance in mm				
    554e:	60 91 e0 04 	lds	r22, 0x04E0
    5552:	70 91 e1 04 	lds	r23, 0x04E1
    5556:	88 27       	eor	r24, r24
    5558:	77 fd       	sbrc	r23, 7
    555a:	80 95       	com	r24
    555c:	98 2f       	mov	r25, r24
    555e:	0e 94 e5 55 	call	0xabca	; 0xabca <__floatsisf>
    5562:	7b 01       	movw	r14, r22
    5564:	8c 01       	movw	r16, r24
    5566:	0e 94 04 10 	call	0x2008	; 0x2008 <getTime100MicroSec>
    556a:	20 91 e4 04 	lds	r18, 0x04E4
    556e:	30 91 e5 04 	lds	r19, 0x04E5
    5572:	40 91 e6 04 	lds	r20, 0x04E6
    5576:	50 91 e7 04 	lds	r21, 0x04E7
    557a:	62 1b       	sub	r22, r18
    557c:	73 0b       	sbc	r23, r19
    557e:	84 0b       	sbc	r24, r20
    5580:	95 0b       	sbc	r25, r21
    5582:	0e 94 e3 55 	call	0xabc6	; 0xabc6 <__floatunsisf>
    5586:	20 e0       	ldi	r18, 0x00	; 0
    5588:	30 e0       	ldi	r19, 0x00	; 0
    558a:	40 ed       	ldi	r20, 0xD0	; 208
    558c:	52 e4       	ldi	r21, 0x42	; 66
    558e:	0e 94 fe 56 	call	0xadfc	; 0xadfc <__mulsf3>
    5592:	9b 01       	movw	r18, r22
    5594:	ac 01       	movw	r20, r24
    5596:	c8 01       	movw	r24, r16
    5598:	b7 01       	movw	r22, r14
    559a:	0e 94 fe 56 	call	0xadfc	; 0xadfc <__mulsf3>
    559e:	20 e0       	ldi	r18, 0x00	; 0
    55a0:	34 e2       	ldi	r19, 0x24	; 36
    55a2:	44 e7       	ldi	r20, 0x74	; 116
    55a4:	59 e4       	ldi	r21, 0x49	; 73
    55a6:	0e 94 4a 55 	call	0xaa94	; 0xaa94 <__divsf3>
    55aa:	9b 01       	movw	r18, r22
    55ac:	ac 01       	movw	r20, r24
    55ae:	60 91 bb 04 	lds	r22, 0x04BB
    55b2:	70 91 bc 04 	lds	r23, 0x04BC
    55b6:	80 91 bd 04 	lds	r24, 0x04BD
    55ba:	90 91 be 04 	lds	r25, 0x04BE
    55be:	0e 94 7d 54 	call	0xa8fa	; 0xa8fa <__addsf3>
    55c2:	60 93 bb 04 	sts	0x04BB, r22
    55c6:	70 93 bc 04 	sts	0x04BC, r23
    55ca:	80 93 bd 04 	sts	0x04BD, r24
    55ce:	90 93 be 04 	sts	0x04BE, r25
		timeLeftOdom = getTime100MicroSec();
    55d2:	0e 94 04 10 	call	0x2008	; 0x2008 <getTime100MicroSec>
    55d6:	60 93 e4 04 	sts	0x04E4, r22
    55da:	70 93 e5 04 	sts	0x04E5, r23
    55de:	80 93 e6 04 	sts	0x04E6, r24
    55e2:	90 93 e7 04 	sts	0x04E7, r25
		leftMotSteps = (signed long int)leftDist;
    55e6:	60 91 bb 04 	lds	r22, 0x04BB
    55ea:	70 91 bc 04 	lds	r23, 0x04BC
    55ee:	80 91 bd 04 	lds	r24, 0x04BD
    55f2:	90 91 be 04 	lds	r25, 0x04BE
    55f6:	0e 94 b2 55 	call	0xab64	; 0xab64 <__fixsfsi>
    55fa:	0e 94 e5 55 	call	0xabca	; 0xabca <__floatsisf>
    55fe:	60 93 f1 02 	sts	0x02F1, r22
    5602:	70 93 f2 02 	sts	0x02F2, r23
    5606:	80 93 f3 02 	sts	0x02F3, r24
    560a:	90 93 f4 02 	sts	0x02F4, r25
			leftMotSteps -= ((float)(last_left_vel>>3))*(LEFT_ENC_OFFSET-ENC_SLOPE*((float)(last_left_vel>>2)))/1000.0;
		}

*/

		start_speed_control_left(&pwm_left_working);
    560e:	8b e2       	ldi	r24, 0x2B	; 43
    5610:	93 e0       	ldi	r25, 0x03	; 3
    5612:	0e 94 8a 0c 	call	0x1914	; 0x1914 <start_speed_control_left>

		pwm_left = pwm_left_working;
    5616:	20 91 2b 03 	lds	r18, 0x032B
    561a:	30 91 2c 03 	lds	r19, 0x032C
    561e:	30 93 14 03 	sts	0x0314, r19
    5622:	20 93 13 03 	sts	0x0313, r18

		if(pwm_left > 0) {
    5626:	12 16       	cp	r1, r18
    5628:	13 06       	cpc	r1, r19
    562a:	0c f0       	brlt	.+2      	; 0x562e <handleMotorsWithSpeedController+0x1cc>
    562c:	36 c3       	rjmp	.+1644   	; 0x5c9a <handleMotorsWithSpeedController+0x838>
			OCR4A = (unsigned int)pwm_left;
    562e:	30 93 a9 00 	sts	0x00A9, r19
    5632:	20 93 a8 00 	sts	0x00A8, r18
		} else {
			OCR4A = 0;
			OCR4B = 0;
		}

		computeOdometry++;
    5636:	80 91 cb 04 	lds	r24, 0x04CB
    563a:	8f 5f       	subi	r24, 0xFF	; 255
    563c:	80 93 cb 04 	sts	0x04CB, r24

	}

	if(compute_right_vel) {
    5640:	80 91 04 02 	lds	r24, 0x0204
    5644:	88 23       	and	r24, r24
    5646:	09 f0       	breq	.+2      	; 0x564a <handleMotorsWithSpeedController+0x1e8>
    5648:	cc c0       	rjmp	.+408    	; 0x57e2 <handleMotorsWithSpeedController+0x380>
    564a:	80 91 cb 04 	lds	r24, 0x04CB

		computeOdometry++;

	}

	if(computeOdometry>=2) {	// compute odometry when we get the last encoders values for both wheels
    564e:	82 30       	cpi	r24, 0x02	; 2
    5650:	08 f4       	brcc	.+2      	; 0x5654 <handleMotorsWithSpeedController+0x1f2>
    5652:	95 c0       	rjmp	.+298    	; 0x577e <handleMotorsWithSpeedController+0x31c>

		// the odometry computation takes about 1 ms

		computeOdometry = 0;
    5654:	10 92 cb 04 	sts	0x04CB, r1

		deltaDist = ((rightDist-rightDistPrev)+(leftDist-leftDistPrev))/2.0;
    5658:	20 90 bf 04 	lds	r2, 0x04BF
    565c:	30 90 c0 04 	lds	r3, 0x04C0
    5660:	40 90 c1 04 	lds	r4, 0x04C1
    5664:	50 90 c2 04 	lds	r5, 0x04C2
    5668:	60 90 bb 04 	lds	r6, 0x04BB
    566c:	70 90 bc 04 	lds	r7, 0x04BC
    5670:	80 90 bd 04 	lds	r8, 0x04BD
    5674:	90 90 be 04 	lds	r9, 0x04BE
    5678:	c2 01       	movw	r24, r4
    567a:	b1 01       	movw	r22, r2
    567c:	20 91 c7 04 	lds	r18, 0x04C7
    5680:	30 91 c8 04 	lds	r19, 0x04C8
    5684:	40 91 c9 04 	lds	r20, 0x04C9
    5688:	50 91 ca 04 	lds	r21, 0x04CA
    568c:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__subsf3>
    5690:	7b 01       	movw	r14, r22
    5692:	8c 01       	movw	r16, r24
    5694:	c4 01       	movw	r24, r8
    5696:	b3 01       	movw	r22, r6
    5698:	20 91 c3 04 	lds	r18, 0x04C3
    569c:	30 91 c4 04 	lds	r19, 0x04C4
    56a0:	40 91 c5 04 	lds	r20, 0x04C5
    56a4:	50 91 c6 04 	lds	r21, 0x04C6
    56a8:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__subsf3>
    56ac:	9b 01       	movw	r18, r22
    56ae:	ac 01       	movw	r20, r24
    56b0:	c8 01       	movw	r24, r16
    56b2:	b7 01       	movw	r22, r14
    56b4:	0e 94 7d 54 	call	0xa8fa	; 0xa8fa <__addsf3>
    56b8:	20 e0       	ldi	r18, 0x00	; 0
    56ba:	30 e0       	ldi	r19, 0x00	; 0
    56bc:	40 e0       	ldi	r20, 0x00	; 0
    56be:	5f e3       	ldi	r21, 0x3F	; 63
    56c0:	0e 94 fe 56 	call	0xadfc	; 0xadfc <__mulsf3>
    56c4:	5b 01       	movw	r10, r22
    56c6:	6c 01       	movw	r12, r24
    56c8:	60 93 a7 04 	sts	0x04A7, r22
    56cc:	70 93 a8 04 	sts	0x04A8, r23
    56d0:	80 93 a9 04 	sts	0x04A9, r24
    56d4:	90 93 aa 04 	sts	0x04AA, r25

		if(robotPosition == HORIZONTAL_POS) {
    56d8:	80 91 12 02 	lds	r24, 0x0212
    56dc:	81 30       	cpi	r24, 0x01	; 1
    56de:	09 f4       	brne	.+2      	; 0x56e2 <handleMotorsWithSpeedController+0x280>
    56e0:	f5 c1       	rjmp	.+1002   	; 0x5acc <handleMotorsWithSpeedController+0x66a>
			//thetaOld = (rightMotSteps - leftMotSteps)/WHEEL_DIST;	// radians
			theta = (rightDist-leftDist)/WHEEL_DIST;
		} else {
			//thetaOld = thetaAcc;
			theta = thetaAcc;
    56e2:	80 91 cc 04 	lds	r24, 0x04CC
    56e6:	90 91 cd 04 	lds	r25, 0x04CD
    56ea:	a0 91 ce 04 	lds	r26, 0x04CE
    56ee:	b0 91 cf 04 	lds	r27, 0x04CF
    56f2:	80 93 97 04 	sts	0x0497, r24
    56f6:	90 93 98 04 	sts	0x0498, r25
    56fa:	a0 93 99 04 	sts	0x0499, r26
    56fe:	b0 93 9a 04 	sts	0x049A, r27
    5702:	7c 01       	movw	r14, r24
    5704:	8d 01       	movw	r16, r26
		}

		//deltaDistOld = ((rightMotSteps-rightMotStepsOld)+(leftMotSteps-leftMotStepsOld))/2.0;

		xPos = xPos + cos(theta)*deltaDist;				
    5706:	c8 01       	movw	r24, r16
    5708:	b7 01       	movw	r22, r14
    570a:	0e 94 47 55 	call	0xaa8e	; 0xaa8e <cos>
    570e:	9b 01       	movw	r18, r22
    5710:	ac 01       	movw	r20, r24
    5712:	c6 01       	movw	r24, r12
    5714:	b5 01       	movw	r22, r10
    5716:	0e 94 fe 56 	call	0xadfc	; 0xadfc <__mulsf3>
    571a:	9b 01       	movw	r18, r22
    571c:	ac 01       	movw	r20, r24
    571e:	60 91 9f 04 	lds	r22, 0x049F
    5722:	70 91 a0 04 	lds	r23, 0x04A0
    5726:	80 91 a1 04 	lds	r24, 0x04A1
    572a:	90 91 a2 04 	lds	r25, 0x04A2
    572e:	0e 94 7d 54 	call	0xa8fa	; 0xa8fa <__addsf3>
    5732:	60 93 9f 04 	sts	0x049F, r22
    5736:	70 93 a0 04 	sts	0x04A0, r23
    573a:	80 93 a1 04 	sts	0x04A1, r24
    573e:	90 93 a2 04 	sts	0x04A2, r25
		yPos = yPos + sin(theta)*deltaDist;
    5742:	c8 01       	movw	r24, r16
    5744:	b7 01       	movw	r22, r14
    5746:	0e 94 61 57 	call	0xaec2	; 0xaec2 <sin>
    574a:	9b 01       	movw	r18, r22
    574c:	ac 01       	movw	r20, r24
    574e:	c6 01       	movw	r24, r12
    5750:	b5 01       	movw	r22, r10
    5752:	0e 94 fe 56 	call	0xadfc	; 0xadfc <__mulsf3>
    5756:	9b 01       	movw	r18, r22
    5758:	ac 01       	movw	r20, r24
    575a:	60 91 a3 04 	lds	r22, 0x04A3
    575e:	70 91 a4 04 	lds	r23, 0x04A4
    5762:	80 91 a5 04 	lds	r24, 0x04A5
    5766:	90 91 a6 04 	lds	r25, 0x04A6
    576a:	0e 94 7d 54 	call	0xa8fa	; 0xa8fa <__addsf3>
    576e:	60 93 a3 04 	sts	0x04A3, r22
    5772:	70 93 a4 04 	sts	0x04A4, r23
    5776:	80 93 a5 04 	sts	0x04A5, r24
    577a:	90 93 a6 04 	sts	0x04A6, r25
		//xPosOld = xPosOld + cos(thetaOld)*deltaDistOld;				
		//yPosOld = yPosOld + sin(thetaOld)*deltaDistOld;

	}

}
    577e:	1f 91       	pop	r17
    5780:	0f 91       	pop	r16
    5782:	ff 90       	pop	r15
    5784:	ef 90       	pop	r14
    5786:	df 90       	pop	r13
    5788:	cf 90       	pop	r12
    578a:	bf 90       	pop	r11
    578c:	af 90       	pop	r10
    578e:	9f 90       	pop	r9
    5790:	8f 90       	pop	r8
    5792:	7f 90       	pop	r7
    5794:	6f 90       	pop	r6
    5796:	5f 90       	pop	r5
    5798:	4f 90       	pop	r4
    579a:	3f 90       	pop	r3
    579c:	2f 90       	pop	r2
    579e:	08 95       	ret
		pwm_left_working = pwm_intermediate_left_desired;
	} else {
		if(pwm_intermediate_right_desired >= 0) {		// pwm in the range -127..127
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_FW_SC);
		} else {
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_BW_SC);
    57a0:	c9 01       	movw	r24, r18
    57a2:	63 e0       	ldi	r22, 0x03	; 3
    57a4:	0e 94 4a 19 	call	0x3294	; 0x3294 <getInputFromSpeed>
    57a8:	90 93 2a 03 	sts	0x032A, r25
    57ac:	80 93 29 03 	sts	0x0329, r24
		}
		if(pwm_intermediate_left_desired >= 0) {		// pwm in the range -127..127
    57b0:	80 91 1b 03 	lds	r24, 0x031B
    57b4:	90 91 1c 03 	lds	r25, 0x031C
    57b8:	97 ff       	sbrs	r25, 7
    57ba:	7f ce       	rjmp	.-770    	; 0x54ba <handleMotorsWithSpeedController+0x58>
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_FW_SC);
		} else {
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_BW_SC);
    57bc:	62 e0       	ldi	r22, 0x02	; 2
    57be:	0e 94 4a 19 	call	0x3294	; 0x3294 <getInputFromSpeed>
    57c2:	90 93 2c 03 	sts	0x032C, r25
    57c6:	80 93 2b 03 	sts	0x032B, r24
		}
	}

	if(obstacleAvoidanceEnabled) {
    57ca:	80 91 94 04 	lds	r24, 0x0494
    57ce:	88 23       	and	r24, r24
    57d0:	09 f4       	brne	.+2      	; 0x57d4 <handleMotorsWithSpeedController+0x372>
    57d2:	7f ce       	rjmp	.-770    	; 0x54d2 <handleMotorsWithSpeedController+0x70>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
    57d4:	8b e2       	ldi	r24, 0x2B	; 43
    57d6:	93 e0       	ldi	r25, 0x03	; 3
    57d8:	69 e2       	ldi	r22, 0x29	; 41
    57da:	73 e0       	ldi	r23, 0x03	; 3
    57dc:	0e 94 d5 33 	call	0x67aa	; 0x67aa <obstacleAvoidance>
    57e0:	78 ce       	rjmp	.-784    	; 0x54d2 <handleMotorsWithSpeedController+0x70>

	}

	if(compute_right_vel) {

		last_right_vel = right_vel_sum>>2;
    57e2:	20 91 0b 03 	lds	r18, 0x030B
    57e6:	30 91 0c 03 	lds	r19, 0x030C
    57ea:	36 95       	lsr	r19
    57ec:	27 95       	ror	r18
    57ee:	36 95       	lsr	r19
    57f0:	27 95       	ror	r18
    57f2:	30 93 10 03 	sts	0x0310, r19
    57f6:	20 93 0f 03 	sts	0x030F, r18
		compute_right_vel = 0;
    57fa:	10 92 04 02 	sts	0x0204, r1
		right_vel_sum = 0;
    57fe:	10 92 0c 03 	sts	0x030C, r1
    5802:	10 92 0b 03 	sts	0x030B, r1

		if(calibrateOdomFlag==1) {
    5806:	80 91 9c 05 	lds	r24, 0x059C
    580a:	81 30       	cpi	r24, 0x01	; 1
    580c:	09 f4       	brne	.+2      	; 0x5810 <handleMotorsWithSpeedController+0x3ae>
    580e:	ff c1       	rjmp	.+1022   	; 0x5c0e <handleMotorsWithSpeedController+0x7ac>
			rightSpeedSumOdom += last_right_vel;
			rightSumCount++;
		}

		getRightSpeedFromInput();
    5810:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <getRightSpeedFromInput>
		rightDistPrev = rightDist;
    5814:	80 91 bf 04 	lds	r24, 0x04BF
    5818:	90 91 c0 04 	lds	r25, 0x04C0
    581c:	a0 91 c1 04 	lds	r26, 0x04C1
    5820:	b0 91 c2 04 	lds	r27, 0x04C2
    5824:	80 93 c7 04 	sts	0x04C7, r24
    5828:	90 93 c8 04 	sts	0x04C8, r25
    582c:	a0 93 c9 04 	sts	0x04C9, r26
    5830:	b0 93 ca 04 	sts	0x04CA, r27
		rightDist += ((float)speedRightFromEnc*((float)(getTime100MicroSec()-timeRightOdom)*104.0))/1000000.0;	// distance in mm				
    5834:	60 91 e2 04 	lds	r22, 0x04E2
    5838:	70 91 e3 04 	lds	r23, 0x04E3
    583c:	88 27       	eor	r24, r24
    583e:	77 fd       	sbrc	r23, 7
    5840:	80 95       	com	r24
    5842:	98 2f       	mov	r25, r24
    5844:	0e 94 e5 55 	call	0xabca	; 0xabca <__floatsisf>
    5848:	7b 01       	movw	r14, r22
    584a:	8c 01       	movw	r16, r24
    584c:	0e 94 04 10 	call	0x2008	; 0x2008 <getTime100MicroSec>
    5850:	20 91 e8 04 	lds	r18, 0x04E8
    5854:	30 91 e9 04 	lds	r19, 0x04E9
    5858:	40 91 ea 04 	lds	r20, 0x04EA
    585c:	50 91 eb 04 	lds	r21, 0x04EB
    5860:	62 1b       	sub	r22, r18
    5862:	73 0b       	sbc	r23, r19
    5864:	84 0b       	sbc	r24, r20
    5866:	95 0b       	sbc	r25, r21
    5868:	0e 94 e3 55 	call	0xabc6	; 0xabc6 <__floatunsisf>
    586c:	20 e0       	ldi	r18, 0x00	; 0
    586e:	30 e0       	ldi	r19, 0x00	; 0
    5870:	40 ed       	ldi	r20, 0xD0	; 208
    5872:	52 e4       	ldi	r21, 0x42	; 66
    5874:	0e 94 fe 56 	call	0xadfc	; 0xadfc <__mulsf3>
    5878:	9b 01       	movw	r18, r22
    587a:	ac 01       	movw	r20, r24
    587c:	c8 01       	movw	r24, r16
    587e:	b7 01       	movw	r22, r14
    5880:	0e 94 fe 56 	call	0xadfc	; 0xadfc <__mulsf3>
    5884:	20 e0       	ldi	r18, 0x00	; 0
    5886:	34 e2       	ldi	r19, 0x24	; 36
    5888:	44 e7       	ldi	r20, 0x74	; 116
    588a:	59 e4       	ldi	r21, 0x49	; 73
    588c:	0e 94 4a 55 	call	0xaa94	; 0xaa94 <__divsf3>
    5890:	9b 01       	movw	r18, r22
    5892:	ac 01       	movw	r20, r24
    5894:	60 91 bf 04 	lds	r22, 0x04BF
    5898:	70 91 c0 04 	lds	r23, 0x04C0
    589c:	80 91 c1 04 	lds	r24, 0x04C1
    58a0:	90 91 c2 04 	lds	r25, 0x04C2
    58a4:	0e 94 7d 54 	call	0xa8fa	; 0xa8fa <__addsf3>
    58a8:	60 93 bf 04 	sts	0x04BF, r22
    58ac:	70 93 c0 04 	sts	0x04C0, r23
    58b0:	80 93 c1 04 	sts	0x04C1, r24
    58b4:	90 93 c2 04 	sts	0x04C2, r25
		timeRightOdom = getTime100MicroSec();
    58b8:	0e 94 04 10 	call	0x2008	; 0x2008 <getTime100MicroSec>
    58bc:	60 93 e8 04 	sts	0x04E8, r22
    58c0:	70 93 e9 04 	sts	0x04E9, r23
    58c4:	80 93 ea 04 	sts	0x04EA, r24
    58c8:	90 93 eb 04 	sts	0x04EB, r25
		rightMotSteps = (signed long int)rightDist;
    58cc:	60 91 bf 04 	lds	r22, 0x04BF
    58d0:	70 91 c0 04 	lds	r23, 0x04C0
    58d4:	80 91 c1 04 	lds	r24, 0x04C1
    58d8:	90 91 c2 04 	lds	r25, 0x04C2
    58dc:	0e 94 b2 55 	call	0xab64	; 0xab64 <__fixsfsi>
    58e0:	0e 94 e5 55 	call	0xabca	; 0xabca <__floatsisf>
    58e4:	60 93 ed 02 	sts	0x02ED, r22
    58e8:	70 93 ee 02 	sts	0x02EE, r23
    58ec:	80 93 ef 02 	sts	0x02EF, r24
    58f0:	90 93 f0 02 	sts	0x02F0, r25
		} else {
			rightMotSteps -= ((float)(last_right_vel>>3))*(RIGHT_ENC_OFFSET-ENC_SLOPE*((float)(last_right_vel>>2)))/1000.0;
		}
*/

		start_speed_control_right(&pwm_right_working);
    58f4:	89 e2       	ldi	r24, 0x29	; 41
    58f6:	93 e0       	ldi	r25, 0x03	; 3
    58f8:	0e 94 5f 0b 	call	0x16be	; 0x16be <start_speed_control_right>

		pwm_right = pwm_right_working;
    58fc:	20 91 29 03 	lds	r18, 0x0329
    5900:	30 91 2a 03 	lds	r19, 0x032A
    5904:	30 93 12 03 	sts	0x0312, r19
    5908:	20 93 11 03 	sts	0x0311, r18

		if(pwm_right > 0) {
    590c:	12 16       	cp	r1, r18
    590e:	13 06       	cpc	r1, r19
    5910:	0c f0       	brlt	.+2      	; 0x5914 <handleMotorsWithSpeedController+0x4b2>
    5912:	d0 c1       	rjmp	.+928    	; 0x5cb4 <handleMotorsWithSpeedController+0x852>
			OCR3A = (unsigned int)pwm_right;
    5914:	30 93 99 00 	sts	0x0099, r19
    5918:	20 93 98 00 	sts	0x0098, r18
		} else {
			OCR3A = 0;
			OCR3B = 0;
		}

		computeOdometry++;
    591c:	80 91 cb 04 	lds	r24, 0x04CB
    5920:	8f 5f       	subi	r24, 0xFF	; 255
    5922:	80 93 cb 04 	sts	0x04CB, r24
    5926:	93 ce       	rjmp	.-730    	; 0x564e <handleMotorsWithSpeedController+0x1ec>
// At the moment the "soft acceleration" is disabled and can be enabled only in the code 
// by setting the value of "softAccEnabled" to 1 at variable initialization.
void handleSoftAcceleration() {
		
	if(calibrateOdomFlag==0) {
		if((getTime100MicroSec()-speedStepCounter) >= SPEED_STEP_DELAY) {
    5928:	0e 94 04 10 	call	0x2008	; 0x2008 <getTime100MicroSec>
    592c:	8b 01       	movw	r16, r22
    592e:	9c 01       	movw	r18, r24
    5930:	40 e0       	ldi	r20, 0x00	; 0
    5932:	50 e0       	ldi	r21, 0x00	; 0
    5934:	60 e0       	ldi	r22, 0x00	; 0
    5936:	70 e0       	ldi	r23, 0x00	; 0
    5938:	80 91 84 04 	lds	r24, 0x0484
    593c:	90 91 85 04 	lds	r25, 0x0485
    5940:	f0 91 86 04 	lds	r31, 0x0486
    5944:	b0 91 87 04 	lds	r27, 0x0487
    5948:	d0 90 88 04 	lds	r13, 0x0488
    594c:	b0 90 89 04 	lds	r11, 0x0489
    5950:	90 90 8a 04 	lds	r9, 0x048A
    5954:	a0 91 8b 04 	lds	r26, 0x048B
    5958:	80 2e       	mov	r8, r16
    595a:	88 1a       	sub	r8, r24
    595c:	e1 e0       	ldi	r30, 0x01	; 1
    595e:	08 15       	cp	r16, r8
    5960:	08 f0       	brcs	.+2      	; 0x5964 <handleMotorsWithSpeedController+0x502>
    5962:	30 c1       	rjmp	.+608    	; 0x5bc4 <handleMotorsWithSpeedController+0x762>
    5964:	81 2f       	mov	r24, r17
    5966:	89 1b       	sub	r24, r25
    5968:	91 e0       	ldi	r25, 0x01	; 1
    596a:	18 17       	cp	r17, r24
    596c:	08 f0       	brcs	.+2      	; 0x5970 <handleMotorsWithSpeedController+0x50e>
    596e:	22 c1       	rjmp	.+580    	; 0x5bb4 <handleMotorsWithSpeedController+0x752>
    5970:	e8 2e       	mov	r14, r24
    5972:	ee 1a       	sub	r14, r30
    5974:	e1 e0       	ldi	r30, 0x01	; 1
    5976:	8e 15       	cp	r24, r14
    5978:	08 f0       	brcs	.+2      	; 0x597c <handleMotorsWithSpeedController+0x51a>
    597a:	13 c1       	rjmp	.+550    	; 0x5ba2 <handleMotorsWithSpeedController+0x740>
    597c:	9e 2b       	or	r25, r30
    597e:	82 2f       	mov	r24, r18
    5980:	8f 1b       	sub	r24, r31
    5982:	e1 e0       	ldi	r30, 0x01	; 1
    5984:	28 17       	cp	r18, r24
    5986:	08 f0       	brcs	.+2      	; 0x598a <handleMotorsWithSpeedController+0x528>
    5988:	04 c1       	rjmp	.+520    	; 0x5b92 <handleMotorsWithSpeedController+0x730>
    598a:	a8 2e       	mov	r10, r24
    598c:	a9 1a       	sub	r10, r25
    598e:	91 e0       	ldi	r25, 0x01	; 1
    5990:	8a 15       	cp	r24, r10
    5992:	08 f0       	brcs	.+2      	; 0x5996 <handleMotorsWithSpeedController+0x534>
    5994:	f5 c0       	rjmp	.+490    	; 0x5b80 <handleMotorsWithSpeedController+0x71e>
    5996:	e9 2b       	or	r30, r25
    5998:	83 2f       	mov	r24, r19
    599a:	8b 1b       	sub	r24, r27
    599c:	91 e0       	ldi	r25, 0x01	; 1
    599e:	38 17       	cp	r19, r24
    59a0:	08 f0       	brcs	.+2      	; 0x59a4 <handleMotorsWithSpeedController+0x542>
    59a2:	e6 c0       	rjmp	.+460    	; 0x5b70 <handleMotorsWithSpeedController+0x70e>
    59a4:	c8 2e       	mov	r12, r24
    59a6:	ce 1a       	sub	r12, r30
    59a8:	e1 e0       	ldi	r30, 0x01	; 1
    59aa:	8c 15       	cp	r24, r12
    59ac:	08 f0       	brcs	.+2      	; 0x59b0 <handleMotorsWithSpeedController+0x54e>
    59ae:	d7 c0       	rjmp	.+430    	; 0x5b5e <handleMotorsWithSpeedController+0x6fc>
    59b0:	9e 2b       	or	r25, r30
    59b2:	8d 2d       	mov	r24, r13
    59b4:	81 95       	neg	r24
    59b6:	e1 e0       	ldi	r30, 0x01	; 1
    59b8:	48 17       	cp	r20, r24
    59ba:	08 f0       	brcs	.+2      	; 0x59be <handleMotorsWithSpeedController+0x55c>
    59bc:	c8 c0       	rjmp	.+400    	; 0x5b4e <handleMotorsWithSpeedController+0x6ec>
    59be:	b8 2f       	mov	r27, r24
    59c0:	b9 1b       	sub	r27, r25
    59c2:	91 e0       	ldi	r25, 0x01	; 1
    59c4:	8b 17       	cp	r24, r27
    59c6:	08 f0       	brcs	.+2      	; 0x59ca <handleMotorsWithSpeedController+0x568>
    59c8:	b9 c0       	rjmp	.+370    	; 0x5b3c <handleMotorsWithSpeedController+0x6da>
    59ca:	e9 2b       	or	r30, r25
    59cc:	8b 2d       	mov	r24, r11
    59ce:	81 95       	neg	r24
    59d0:	f1 e0       	ldi	r31, 0x01	; 1
    59d2:	58 17       	cp	r21, r24
    59d4:	08 f0       	brcs	.+2      	; 0x59d8 <handleMotorsWithSpeedController+0x576>
    59d6:	a9 c0       	rjmp	.+338    	; 0x5b2a <handleMotorsWithSpeedController+0x6c8>
    59d8:	98 2f       	mov	r25, r24
    59da:	9e 1b       	sub	r25, r30
    59dc:	e9 2f       	mov	r30, r25
    59de:	91 e0       	ldi	r25, 0x01	; 1
    59e0:	8e 17       	cp	r24, r30
    59e2:	08 f0       	brcs	.+2      	; 0x59e6 <handleMotorsWithSpeedController+0x584>
    59e4:	99 c0       	rjmp	.+306    	; 0x5b18 <handleMotorsWithSpeedController+0x6b6>
    59e6:	f9 2b       	or	r31, r25
    59e8:	89 2d       	mov	r24, r9
    59ea:	81 95       	neg	r24
    59ec:	91 e0       	ldi	r25, 0x01	; 1
    59ee:	68 17       	cp	r22, r24
    59f0:	08 f0       	brcs	.+2      	; 0x59f4 <handleMotorsWithSpeedController+0x592>
    59f2:	8a c0       	rjmp	.+276    	; 0x5b08 <handleMotorsWithSpeedController+0x6a6>
    59f4:	38 2f       	mov	r19, r24
    59f6:	3f 1b       	sub	r19, r31
    59f8:	21 e0       	ldi	r18, 0x01	; 1
    59fa:	83 17       	cp	r24, r19
    59fc:	08 f0       	brcs	.+2      	; 0x5a00 <handleMotorsWithSpeedController+0x59e>
    59fe:	7d c0       	rjmp	.+250    	; 0x5afa <handleMotorsWithSpeedController+0x698>
    5a00:	92 2b       	or	r25, r18
    5a02:	a1 95       	neg	r26
    5a04:	a9 17       	cp	r26, r25
    5a06:	09 f4       	brne	.+2      	; 0x5a0a <handleMotorsWithSpeedController+0x5a8>
    5a08:	e5 c0       	rjmp	.+458    	; 0x5bd4 <handleMotorsWithSpeedController+0x772>
			speedStepCounter = getTime100MicroSec();
    5a0a:	0e 94 04 10 	call	0x2008	; 0x2008 <getTime100MicroSec>
    5a0e:	9b 01       	movw	r18, r22
    5a10:	ac 01       	movw	r20, r24
    5a12:	60 93 84 04 	sts	0x0484, r22
    5a16:	30 93 85 04 	sts	0x0485, r19
    5a1a:	40 93 86 04 	sts	0x0486, r20
    5a1e:	50 93 87 04 	sts	0x0487, r21
    5a22:	10 92 88 04 	sts	0x0488, r1
    5a26:	10 92 89 04 	sts	0x0489, r1
    5a2a:	10 92 8a 04 	sts	0x048A, r1
    5a2e:	10 92 8b 04 	sts	0x048B, r1

			if(softAccEnabled) {
    5a32:	80 91 8c 04 	lds	r24, 0x048C
    5a36:	88 23       	and	r24, r24
    5a38:	09 f4       	brne	.+2      	; 0x5a3c <handleMotorsWithSpeedController+0x5da>
    5a3a:	49 c1       	rjmp	.+658    	; 0x5cce <handleMotorsWithSpeedController+0x86c>
				if(pwm_right_desired == 0) {
    5a3c:	40 91 15 03 	lds	r20, 0x0315
    5a40:	50 91 16 03 	lds	r21, 0x0316
    5a44:	41 15       	cp	r20, r1
    5a46:	51 05       	cpc	r21, r1
    5a48:	09 f0       	breq	.+2      	; 0x5a4c <handleMotorsWithSpeedController+0x5ea>
    5a4a:	56 c1       	rjmp	.+684    	; 0x5cf8 <handleMotorsWithSpeedController+0x896>
					pwm_intermediate_right_desired = 0;
				} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
					pwm_intermediate_right_desired = 0;
    5a4c:	10 92 1a 03 	sts	0x031A, r1
    5a50:	10 92 19 03 	sts	0x0319, r1
    5a54:	20 e0       	ldi	r18, 0x00	; 0
    5a56:	30 e0       	ldi	r19, 0x00	; 0
					if(pwm_intermediate_right_desired < pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
					}					
				}
	
				if(pwm_left_desired == 0) {
    5a58:	40 91 17 03 	lds	r20, 0x0317
    5a5c:	50 91 18 03 	lds	r21, 0x0318
    5a60:	41 15       	cp	r20, r1
    5a62:	51 05       	cpc	r21, r1
    5a64:	09 f4       	brne	.+2      	; 0x5a68 <handleMotorsWithSpeedController+0x606>
    5a66:	7f c1       	rjmp	.+766    	; 0x5d66 <handleMotorsWithSpeedController+0x904>
					pwm_intermediate_left_desired = 0;
				} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
    5a68:	60 91 1b 03 	lds	r22, 0x031B
    5a6c:	70 91 1c 03 	lds	r23, 0x031C
    5a70:	64 9f       	mul	r22, r20
    5a72:	c0 01       	movw	r24, r0
    5a74:	65 9f       	mul	r22, r21
    5a76:	90 0d       	add	r25, r0
    5a78:	74 9f       	mul	r23, r20
    5a7a:	90 0d       	add	r25, r0
    5a7c:	11 24       	eor	r1, r1
    5a7e:	97 fd       	sbrc	r25, 7
    5a80:	72 c1       	rjmp	.+740    	; 0x5d66 <handleMotorsWithSpeedController+0x904>
					pwm_intermediate_left_desired = 0;
				} else if(pwm_left_desired > pwm_intermediate_left_desired) {
    5a82:	64 17       	cp	r22, r20
    5a84:	75 07       	cpc	r23, r21
    5a86:	0c f0       	brlt	.+2      	; 0x5a8a <handleMotorsWithSpeedController+0x628>
    5a88:	75 c1       	rjmp	.+746    	; 0x5d74 <handleMotorsWithSpeedController+0x912>
					pwm_intermediate_left_desired += speedStep;
    5a8a:	80 91 13 02 	lds	r24, 0x0213
    5a8e:	fb 01       	movw	r30, r22
    5a90:	e8 0f       	add	r30, r24
    5a92:	f1 1d       	adc	r31, r1
    5a94:	f0 93 1c 03 	sts	0x031C, r31
    5a98:	e0 93 1b 03 	sts	0x031B, r30
					if(pwm_intermediate_left_desired > pwm_left_desired) {
    5a9c:	4e 17       	cp	r20, r30
    5a9e:	5f 07       	cpc	r21, r31
    5aa0:	0c f0       	brlt	.+2      	; 0x5aa4 <handleMotorsWithSpeedController+0x642>
    5aa2:	7b c1       	rjmp	.+758    	; 0x5d9a <handleMotorsWithSpeedController+0x938>
						pwm_intermediate_left_desired = pwm_left_desired;
    5aa4:	50 93 1c 03 	sts	0x031C, r21
    5aa8:	40 93 1b 03 	sts	0x031B, r20
    5aac:	40 91 9c 05 	lds	r20, 0x059C
    5ab0:	f1 cc       	rjmp	.-1566   	; 0x5494 <handleMotorsWithSpeedController+0x32>
void handleMotorsWithSpeedController() {

	handleSoftAcceleration();

	if(calibrateOdomFlag==1) {
		pwm_right_working = pwm_intermediate_right_desired;
    5ab2:	30 93 2a 03 	sts	0x032A, r19
    5ab6:	20 93 29 03 	sts	0x0329, r18
		pwm_left_working = pwm_intermediate_left_desired;
    5aba:	80 91 1b 03 	lds	r24, 0x031B
    5abe:	90 91 1c 03 	lds	r25, 0x031C
    5ac2:	90 93 2c 03 	sts	0x032C, r25
    5ac6:	80 93 2b 03 	sts	0x032B, r24
    5aca:	fe cc       	rjmp	.-1540   	; 0x54c8 <handleMotorsWithSpeedController+0x66>

		deltaDist = ((rightDist-rightDistPrev)+(leftDist-leftDistPrev))/2.0;

		if(robotPosition == HORIZONTAL_POS) {
			//thetaOld = (rightMotSteps - leftMotSteps)/WHEEL_DIST;	// radians
			theta = (rightDist-leftDist)/WHEEL_DIST;
    5acc:	c2 01       	movw	r24, r4
    5ace:	b1 01       	movw	r22, r2
    5ad0:	a4 01       	movw	r20, r8
    5ad2:	93 01       	movw	r18, r6
    5ad4:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__subsf3>
    5ad8:	20 e0       	ldi	r18, 0x00	; 0
    5ada:	30 e0       	ldi	r19, 0x00	; 0
    5adc:	4e e1       	ldi	r20, 0x1E	; 30
    5ade:	52 e4       	ldi	r21, 0x42	; 66
    5ae0:	0e 94 4a 55 	call	0xaa94	; 0xaa94 <__divsf3>
    5ae4:	60 93 97 04 	sts	0x0497, r22
    5ae8:	70 93 98 04 	sts	0x0498, r23
    5aec:	80 93 99 04 	sts	0x0499, r24
    5af0:	90 93 9a 04 	sts	0x049A, r25
    5af4:	7b 01       	movw	r14, r22
    5af6:	8c 01       	movw	r16, r24
    5af8:	06 ce       	rjmp	.-1012   	; 0x5706 <handleMotorsWithSpeedController+0x2a4>
// At the moment the "soft acceleration" is disabled and can be enabled only in the code 
// by setting the value of "softAccEnabled" to 1 at variable initialization.
void handleSoftAcceleration() {
		
	if(calibrateOdomFlag==0) {
		if((getTime100MicroSec()-speedStepCounter) >= SPEED_STEP_DELAY) {
    5afa:	20 e0       	ldi	r18, 0x00	; 0
    5afc:	92 2b       	or	r25, r18
    5afe:	a1 95       	neg	r26
    5b00:	a9 17       	cp	r26, r25
    5b02:	09 f0       	breq	.+2      	; 0x5b06 <handleMotorsWithSpeedController+0x6a4>
    5b04:	82 cf       	rjmp	.-252    	; 0x5a0a <handleMotorsWithSpeedController+0x5a8>
    5b06:	66 c0       	rjmp	.+204    	; 0x5bd4 <handleMotorsWithSpeedController+0x772>
    5b08:	90 e0       	ldi	r25, 0x00	; 0
    5b0a:	38 2f       	mov	r19, r24
    5b0c:	3f 1b       	sub	r19, r31
    5b0e:	21 e0       	ldi	r18, 0x01	; 1
    5b10:	83 17       	cp	r24, r19
    5b12:	08 f4       	brcc	.+2      	; 0x5b16 <handleMotorsWithSpeedController+0x6b4>
    5b14:	75 cf       	rjmp	.-278    	; 0x5a00 <handleMotorsWithSpeedController+0x59e>
    5b16:	f1 cf       	rjmp	.-30     	; 0x5afa <handleMotorsWithSpeedController+0x698>
    5b18:	90 e0       	ldi	r25, 0x00	; 0
    5b1a:	f9 2b       	or	r31, r25
    5b1c:	89 2d       	mov	r24, r9
    5b1e:	81 95       	neg	r24
    5b20:	91 e0       	ldi	r25, 0x01	; 1
    5b22:	68 17       	cp	r22, r24
    5b24:	08 f4       	brcc	.+2      	; 0x5b28 <handleMotorsWithSpeedController+0x6c6>
    5b26:	66 cf       	rjmp	.-308    	; 0x59f4 <handleMotorsWithSpeedController+0x592>
    5b28:	ef cf       	rjmp	.-34     	; 0x5b08 <handleMotorsWithSpeedController+0x6a6>
    5b2a:	f0 e0       	ldi	r31, 0x00	; 0
    5b2c:	98 2f       	mov	r25, r24
    5b2e:	9e 1b       	sub	r25, r30
    5b30:	e9 2f       	mov	r30, r25
    5b32:	91 e0       	ldi	r25, 0x01	; 1
    5b34:	8e 17       	cp	r24, r30
    5b36:	08 f4       	brcc	.+2      	; 0x5b3a <handleMotorsWithSpeedController+0x6d8>
    5b38:	56 cf       	rjmp	.-340    	; 0x59e6 <handleMotorsWithSpeedController+0x584>
    5b3a:	ee cf       	rjmp	.-36     	; 0x5b18 <handleMotorsWithSpeedController+0x6b6>
    5b3c:	90 e0       	ldi	r25, 0x00	; 0
    5b3e:	e9 2b       	or	r30, r25
    5b40:	8b 2d       	mov	r24, r11
    5b42:	81 95       	neg	r24
    5b44:	f1 e0       	ldi	r31, 0x01	; 1
    5b46:	58 17       	cp	r21, r24
    5b48:	08 f4       	brcc	.+2      	; 0x5b4c <handleMotorsWithSpeedController+0x6ea>
    5b4a:	46 cf       	rjmp	.-372    	; 0x59d8 <handleMotorsWithSpeedController+0x576>
    5b4c:	ee cf       	rjmp	.-36     	; 0x5b2a <handleMotorsWithSpeedController+0x6c8>
    5b4e:	e0 e0       	ldi	r30, 0x00	; 0
    5b50:	b8 2f       	mov	r27, r24
    5b52:	b9 1b       	sub	r27, r25
    5b54:	91 e0       	ldi	r25, 0x01	; 1
    5b56:	8b 17       	cp	r24, r27
    5b58:	08 f4       	brcc	.+2      	; 0x5b5c <handleMotorsWithSpeedController+0x6fa>
    5b5a:	37 cf       	rjmp	.-402    	; 0x59ca <handleMotorsWithSpeedController+0x568>
    5b5c:	ef cf       	rjmp	.-34     	; 0x5b3c <handleMotorsWithSpeedController+0x6da>
    5b5e:	e0 e0       	ldi	r30, 0x00	; 0
    5b60:	9e 2b       	or	r25, r30
    5b62:	8d 2d       	mov	r24, r13
    5b64:	81 95       	neg	r24
    5b66:	e1 e0       	ldi	r30, 0x01	; 1
    5b68:	48 17       	cp	r20, r24
    5b6a:	08 f4       	brcc	.+2      	; 0x5b6e <handleMotorsWithSpeedController+0x70c>
    5b6c:	28 cf       	rjmp	.-432    	; 0x59be <handleMotorsWithSpeedController+0x55c>
    5b6e:	ef cf       	rjmp	.-34     	; 0x5b4e <handleMotorsWithSpeedController+0x6ec>
    5b70:	90 e0       	ldi	r25, 0x00	; 0
    5b72:	c8 2e       	mov	r12, r24
    5b74:	ce 1a       	sub	r12, r30
    5b76:	e1 e0       	ldi	r30, 0x01	; 1
    5b78:	8c 15       	cp	r24, r12
    5b7a:	08 f4       	brcc	.+2      	; 0x5b7e <handleMotorsWithSpeedController+0x71c>
    5b7c:	19 cf       	rjmp	.-462    	; 0x59b0 <handleMotorsWithSpeedController+0x54e>
    5b7e:	ef cf       	rjmp	.-34     	; 0x5b5e <handleMotorsWithSpeedController+0x6fc>
    5b80:	90 e0       	ldi	r25, 0x00	; 0
    5b82:	e9 2b       	or	r30, r25
    5b84:	83 2f       	mov	r24, r19
    5b86:	8b 1b       	sub	r24, r27
    5b88:	91 e0       	ldi	r25, 0x01	; 1
    5b8a:	38 17       	cp	r19, r24
    5b8c:	08 f4       	brcc	.+2      	; 0x5b90 <handleMotorsWithSpeedController+0x72e>
    5b8e:	0a cf       	rjmp	.-492    	; 0x59a4 <handleMotorsWithSpeedController+0x542>
    5b90:	ef cf       	rjmp	.-34     	; 0x5b70 <handleMotorsWithSpeedController+0x70e>
    5b92:	e0 e0       	ldi	r30, 0x00	; 0
    5b94:	a8 2e       	mov	r10, r24
    5b96:	a9 1a       	sub	r10, r25
    5b98:	91 e0       	ldi	r25, 0x01	; 1
    5b9a:	8a 15       	cp	r24, r10
    5b9c:	08 f4       	brcc	.+2      	; 0x5ba0 <handleMotorsWithSpeedController+0x73e>
    5b9e:	fb ce       	rjmp	.-522    	; 0x5996 <handleMotorsWithSpeedController+0x534>
    5ba0:	ef cf       	rjmp	.-34     	; 0x5b80 <handleMotorsWithSpeedController+0x71e>
    5ba2:	e0 e0       	ldi	r30, 0x00	; 0
    5ba4:	9e 2b       	or	r25, r30
    5ba6:	82 2f       	mov	r24, r18
    5ba8:	8f 1b       	sub	r24, r31
    5baa:	e1 e0       	ldi	r30, 0x01	; 1
    5bac:	28 17       	cp	r18, r24
    5bae:	08 f4       	brcc	.+2      	; 0x5bb2 <handleMotorsWithSpeedController+0x750>
    5bb0:	ec ce       	rjmp	.-552    	; 0x598a <handleMotorsWithSpeedController+0x528>
    5bb2:	ef cf       	rjmp	.-34     	; 0x5b92 <handleMotorsWithSpeedController+0x730>
    5bb4:	90 e0       	ldi	r25, 0x00	; 0
    5bb6:	e8 2e       	mov	r14, r24
    5bb8:	ee 1a       	sub	r14, r30
    5bba:	e1 e0       	ldi	r30, 0x01	; 1
    5bbc:	8e 15       	cp	r24, r14
    5bbe:	08 f4       	brcc	.+2      	; 0x5bc2 <handleMotorsWithSpeedController+0x760>
    5bc0:	dd ce       	rjmp	.-582    	; 0x597c <handleMotorsWithSpeedController+0x51a>
    5bc2:	ef cf       	rjmp	.-34     	; 0x5ba2 <handleMotorsWithSpeedController+0x740>
    5bc4:	e0 e0       	ldi	r30, 0x00	; 0
    5bc6:	81 2f       	mov	r24, r17
    5bc8:	89 1b       	sub	r24, r25
    5bca:	91 e0       	ldi	r25, 0x01	; 1
    5bcc:	18 17       	cp	r17, r24
    5bce:	08 f4       	brcc	.+2      	; 0x5bd2 <handleMotorsWithSpeedController+0x770>
    5bd0:	cf ce       	rjmp	.-610    	; 0x5970 <handleMotorsWithSpeedController+0x50e>
    5bd2:	f0 cf       	rjmp	.-32     	; 0x5bb4 <handleMotorsWithSpeedController+0x752>
    5bd4:	33 23       	and	r19, r19
    5bd6:	09 f0       	breq	.+2      	; 0x5bda <handleMotorsWithSpeedController+0x778>
    5bd8:	18 cf       	rjmp	.-464    	; 0x5a0a <handleMotorsWithSpeedController+0x5a8>
    5bda:	ee 23       	and	r30, r30
    5bdc:	09 f0       	breq	.+2      	; 0x5be0 <handleMotorsWithSpeedController+0x77e>
    5bde:	15 cf       	rjmp	.-470    	; 0x5a0a <handleMotorsWithSpeedController+0x5a8>
    5be0:	bb 23       	and	r27, r27
    5be2:	09 f0       	breq	.+2      	; 0x5be6 <handleMotorsWithSpeedController+0x784>
    5be4:	12 cf       	rjmp	.-476    	; 0x5a0a <handleMotorsWithSpeedController+0x5a8>
    5be6:	cc 20       	and	r12, r12
    5be8:	09 f0       	breq	.+2      	; 0x5bec <handleMotorsWithSpeedController+0x78a>
    5bea:	0f cf       	rjmp	.-482    	; 0x5a0a <handleMotorsWithSpeedController+0x5a8>
    5bec:	aa 20       	and	r10, r10
    5bee:	09 f0       	breq	.+2      	; 0x5bf2 <handleMotorsWithSpeedController+0x790>
    5bf0:	0c cf       	rjmp	.-488    	; 0x5a0a <handleMotorsWithSpeedController+0x5a8>
    5bf2:	e1 e0       	ldi	r30, 0x01	; 1
    5bf4:	ee 15       	cp	r30, r14
    5bf6:	08 f4       	brcc	.+2      	; 0x5bfa <handleMotorsWithSpeedController+0x798>
    5bf8:	08 cf       	rjmp	.-496    	; 0x5a0a <handleMotorsWithSpeedController+0x5a8>
    5bfa:	ee 16       	cp	r14, r30
    5bfc:	09 f4       	brne	.+2      	; 0x5c00 <handleMotorsWithSpeedController+0x79e>
    5bfe:	e4 c0       	rjmp	.+456    	; 0x5dc8 <handleMotorsWithSpeedController+0x966>
    5c00:	40 91 9c 05 	lds	r20, 0x059C
    5c04:	20 91 19 03 	lds	r18, 0x0319
    5c08:	30 91 1a 03 	lds	r19, 0x031A
    5c0c:	43 cc       	rjmp	.-1914   	; 0x5494 <handleMotorsWithSpeedController+0x32>
		last_right_vel = right_vel_sum>>2;
		compute_right_vel = 0;
		right_vel_sum = 0;

		if(calibrateOdomFlag==1) {
			rightSpeedSumOdom += last_right_vel;
    5c0e:	c9 01       	movw	r24, r18
    5c10:	aa 27       	eor	r26, r26
    5c12:	97 fd       	sbrc	r25, 7
    5c14:	a0 95       	com	r26
    5c16:	ba 2f       	mov	r27, r26
    5c18:	20 91 d4 04 	lds	r18, 0x04D4
    5c1c:	30 91 d5 04 	lds	r19, 0x04D5
    5c20:	40 91 d6 04 	lds	r20, 0x04D6
    5c24:	50 91 d7 04 	lds	r21, 0x04D7
    5c28:	28 0f       	add	r18, r24
    5c2a:	39 1f       	adc	r19, r25
    5c2c:	4a 1f       	adc	r20, r26
    5c2e:	5b 1f       	adc	r21, r27
    5c30:	20 93 d4 04 	sts	0x04D4, r18
    5c34:	30 93 d5 04 	sts	0x04D5, r19
    5c38:	40 93 d6 04 	sts	0x04D6, r20
    5c3c:	50 93 d7 04 	sts	0x04D7, r21
			rightSumCount++;
    5c40:	80 91 da 04 	lds	r24, 0x04DA
    5c44:	90 91 db 04 	lds	r25, 0x04DB
    5c48:	01 96       	adiw	r24, 0x01	; 1
    5c4a:	90 93 db 04 	sts	0x04DB, r25
    5c4e:	80 93 da 04 	sts	0x04DA, r24
    5c52:	de cd       	rjmp	.-1092   	; 0x5810 <handleMotorsWithSpeedController+0x3ae>
		last_left_vel = left_vel_sum>>2;
		compute_left_vel = 0;
		left_vel_sum = 0;
		
		if(calibrateOdomFlag==1) {
			leftSpeedSumOdom += last_left_vel;
    5c54:	c9 01       	movw	r24, r18
    5c56:	aa 27       	eor	r26, r26
    5c58:	97 fd       	sbrc	r25, 7
    5c5a:	a0 95       	com	r26
    5c5c:	ba 2f       	mov	r27, r26
    5c5e:	20 91 d0 04 	lds	r18, 0x04D0
    5c62:	30 91 d1 04 	lds	r19, 0x04D1
    5c66:	40 91 d2 04 	lds	r20, 0x04D2
    5c6a:	50 91 d3 04 	lds	r21, 0x04D3
    5c6e:	28 0f       	add	r18, r24
    5c70:	39 1f       	adc	r19, r25
    5c72:	4a 1f       	adc	r20, r26
    5c74:	5b 1f       	adc	r21, r27
    5c76:	20 93 d0 04 	sts	0x04D0, r18
    5c7a:	30 93 d1 04 	sts	0x04D1, r19
    5c7e:	40 93 d2 04 	sts	0x04D2, r20
    5c82:	50 93 d3 04 	sts	0x04D3, r21
			leftSumCount++;
    5c86:	80 91 d8 04 	lds	r24, 0x04D8
    5c8a:	90 91 d9 04 	lds	r25, 0x04D9
    5c8e:	01 96       	adiw	r24, 0x01	; 1
    5c90:	90 93 d9 04 	sts	0x04D9, r25
    5c94:	80 93 d8 04 	sts	0x04D8, r24
    5c98:	48 cc       	rjmp	.-1904   	; 0x552a <handleMotorsWithSpeedController+0xc8>

		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
    5c9a:	21 15       	cp	r18, r1
    5c9c:	31 05       	cpc	r19, r1
    5c9e:	09 f0       	breq	.+2      	; 0x5ca2 <handleMotorsWithSpeedController+0x840>
    5ca0:	59 c0       	rjmp	.+178    	; 0x5d54 <handleMotorsWithSpeedController+0x8f2>
			OCR4B =(unsigned int)( -pwm_left);
		} else {
			OCR4A = 0;
    5ca2:	10 92 a9 00 	sts	0x00A9, r1
    5ca6:	10 92 a8 00 	sts	0x00A8, r1
			OCR4B = 0;
    5caa:	10 92 ab 00 	sts	0x00AB, r1
    5cae:	10 92 aa 00 	sts	0x00AA, r1
    5cb2:	c1 cc       	rjmp	.-1662   	; 0x5636 <handleMotorsWithSpeedController+0x1d4>

		pwm_right = pwm_right_working;

		if(pwm_right > 0) {
			OCR3A = (unsigned int)pwm_right;
		} else if(pwm_right < 0) {
    5cb4:	21 15       	cp	r18, r1
    5cb6:	31 05       	cpc	r19, r1
    5cb8:	09 f0       	breq	.+2      	; 0x5cbc <handleMotorsWithSpeedController+0x85a>
    5cba:	43 c0       	rjmp	.+134    	; 0x5d42 <handleMotorsWithSpeedController+0x8e0>
			OCR3B = (unsigned int)(-pwm_right);
		} else {
			OCR3A = 0;
    5cbc:	10 92 99 00 	sts	0x0099, r1
    5cc0:	10 92 98 00 	sts	0x0098, r1
			OCR3B = 0;
    5cc4:	10 92 9b 00 	sts	0x009B, r1
    5cc8:	10 92 9a 00 	sts	0x009A, r1
    5ccc:	27 ce       	rjmp	.-946    	; 0x591c <handleMotorsWithSpeedController+0x4ba>
					if(pwm_intermediate_left_desired < pwm_left_desired) {
						pwm_intermediate_left_desired = pwm_left_desired;
					}					
				}
			} else {
				pwm_intermediate_right_desired = pwm_right_desired;
    5cce:	20 91 15 03 	lds	r18, 0x0315
    5cd2:	30 91 16 03 	lds	r19, 0x0316
    5cd6:	20 93 19 03 	sts	0x0319, r18
    5cda:	30 93 1a 03 	sts	0x031A, r19
				pwm_intermediate_left_desired = pwm_left_desired;
    5cde:	80 91 17 03 	lds	r24, 0x0317
    5ce2:	90 91 18 03 	lds	r25, 0x0318
    5ce6:	90 93 1c 03 	sts	0x031C, r25
    5cea:	80 93 1b 03 	sts	0x031B, r24
    5cee:	40 91 9c 05 	lds	r20, 0x059C
    5cf2:	c9 01       	movw	r24, r18
    5cf4:	9c 01       	movw	r18, r24
    5cf6:	ce cb       	rjmp	.-2148   	; 0x5494 <handleMotorsWithSpeedController+0x32>
			speedStepCounter = getTime100MicroSec();

			if(softAccEnabled) {
				if(pwm_right_desired == 0) {
					pwm_intermediate_right_desired = 0;
				} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
    5cf8:	20 91 19 03 	lds	r18, 0x0319
    5cfc:	30 91 1a 03 	lds	r19, 0x031A
    5d00:	24 9f       	mul	r18, r20
    5d02:	c0 01       	movw	r24, r0
    5d04:	25 9f       	mul	r18, r21
    5d06:	90 0d       	add	r25, r0
    5d08:	34 9f       	mul	r19, r20
    5d0a:	90 0d       	add	r25, r0
    5d0c:	11 24       	eor	r1, r1
    5d0e:	97 fd       	sbrc	r25, 7
    5d10:	9d ce       	rjmp	.-710    	; 0x5a4c <handleMotorsWithSpeedController+0x5ea>
					pwm_intermediate_right_desired = 0;
				} else if(pwm_right_desired > pwm_intermediate_right_desired) {
    5d12:	24 17       	cp	r18, r20
    5d14:	35 07       	cpc	r19, r21
    5d16:	0c f0       	brlt	.+2      	; 0x5d1a <handleMotorsWithSpeedController+0x8b8>
    5d18:	43 c0       	rjmp	.+134    	; 0x5da0 <handleMotorsWithSpeedController+0x93e>
					pwm_intermediate_right_desired += speedStep;
    5d1a:	80 91 13 02 	lds	r24, 0x0213
    5d1e:	b9 01       	movw	r22, r18
    5d20:	68 0f       	add	r22, r24
    5d22:	71 1d       	adc	r23, r1
    5d24:	cb 01       	movw	r24, r22
    5d26:	70 93 1a 03 	sts	0x031A, r23
    5d2a:	60 93 19 03 	sts	0x0319, r22
					if(pwm_intermediate_right_desired > pwm_right_desired) {
    5d2e:	46 17       	cp	r20, r22
    5d30:	57 07       	cpc	r21, r23
    5d32:	0c f0       	brlt	.+2      	; 0x5d36 <handleMotorsWithSpeedController+0x8d4>
    5d34:	47 c0       	rjmp	.+142    	; 0x5dc4 <handleMotorsWithSpeedController+0x962>
						pwm_intermediate_right_desired = pwm_right_desired;
					}
				} else if(pwm_right_desired < pwm_intermediate_right_desired) {
					pwm_intermediate_right_desired -= speedStep;
					if(pwm_intermediate_right_desired < pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
    5d36:	50 93 1a 03 	sts	0x031A, r21
    5d3a:	40 93 19 03 	sts	0x0319, r20
    5d3e:	9a 01       	movw	r18, r20
    5d40:	8b ce       	rjmp	.-746    	; 0x5a58 <handleMotorsWithSpeedController+0x5f6>
		pwm_right = pwm_right_working;

		if(pwm_right > 0) {
			OCR3A = (unsigned int)pwm_right;
		} else if(pwm_right < 0) {
			OCR3B = (unsigned int)(-pwm_right);
    5d42:	88 27       	eor	r24, r24
    5d44:	99 27       	eor	r25, r25
    5d46:	82 1b       	sub	r24, r18
    5d48:	93 0b       	sbc	r25, r19
    5d4a:	90 93 9b 00 	sts	0x009B, r25
    5d4e:	80 93 9a 00 	sts	0x009A, r24
    5d52:	e4 cd       	rjmp	.-1080   	; 0x591c <handleMotorsWithSpeedController+0x4ba>
		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
			OCR4B =(unsigned int)( -pwm_left);
    5d54:	88 27       	eor	r24, r24
    5d56:	99 27       	eor	r25, r25
    5d58:	82 1b       	sub	r24, r18
    5d5a:	93 0b       	sbc	r25, r19
    5d5c:	90 93 ab 00 	sts	0x00AB, r25
    5d60:	80 93 aa 00 	sts	0x00AA, r24
    5d64:	68 cc       	rjmp	.-1840   	; 0x5636 <handleMotorsWithSpeedController+0x1d4>
				}
	
				if(pwm_left_desired == 0) {
					pwm_intermediate_left_desired = 0;
				} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
					pwm_intermediate_left_desired = 0;
    5d66:	10 92 1c 03 	sts	0x031C, r1
    5d6a:	10 92 1b 03 	sts	0x031B, r1
    5d6e:	40 91 9c 05 	lds	r20, 0x059C
    5d72:	90 cb       	rjmp	.-2272   	; 0x5494 <handleMotorsWithSpeedController+0x32>
				} else if(pwm_left_desired > pwm_intermediate_left_desired) {
					pwm_intermediate_left_desired += speedStep;
					if(pwm_intermediate_left_desired > pwm_left_desired) {
						pwm_intermediate_left_desired = pwm_left_desired;
					}
				} else if(pwm_left_desired < pwm_intermediate_left_desired) {
    5d74:	46 17       	cp	r20, r22
    5d76:	57 07       	cpc	r21, r23
    5d78:	84 f4       	brge	.+32     	; 0x5d9a <handleMotorsWithSpeedController+0x938>
					pwm_intermediate_left_desired -= speedStep;
    5d7a:	80 91 13 02 	lds	r24, 0x0213
    5d7e:	fb 01       	movw	r30, r22
    5d80:	e8 1b       	sub	r30, r24
    5d82:	f1 09       	sbc	r31, r1
    5d84:	f0 93 1c 03 	sts	0x031C, r31
    5d88:	e0 93 1b 03 	sts	0x031B, r30
					if(pwm_intermediate_left_desired < pwm_left_desired) {
    5d8c:	e4 17       	cp	r30, r20
    5d8e:	f5 07       	cpc	r31, r21
    5d90:	24 f4       	brge	.+8      	; 0x5d9a <handleMotorsWithSpeedController+0x938>
						pwm_intermediate_left_desired = pwm_left_desired;
    5d92:	50 93 1c 03 	sts	0x031C, r21
    5d96:	40 93 1b 03 	sts	0x031B, r20
    5d9a:	40 91 9c 05 	lds	r20, 0x059C
    5d9e:	7a cb       	rjmp	.-2316   	; 0x5494 <handleMotorsWithSpeedController+0x32>
				} else if(pwm_right_desired > pwm_intermediate_right_desired) {
					pwm_intermediate_right_desired += speedStep;
					if(pwm_intermediate_right_desired > pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
					}
				} else if(pwm_right_desired < pwm_intermediate_right_desired) {
    5da0:	42 17       	cp	r20, r18
    5da2:	53 07       	cpc	r21, r19
    5da4:	0c f0       	brlt	.+2      	; 0x5da8 <handleMotorsWithSpeedController+0x946>
    5da6:	58 ce       	rjmp	.-848    	; 0x5a58 <handleMotorsWithSpeedController+0x5f6>
					pwm_intermediate_right_desired -= speedStep;
    5da8:	80 91 13 02 	lds	r24, 0x0213
    5dac:	f9 01       	movw	r30, r18
    5dae:	e8 1b       	sub	r30, r24
    5db0:	f1 09       	sbc	r31, r1
    5db2:	cf 01       	movw	r24, r30
    5db4:	f0 93 1a 03 	sts	0x031A, r31
    5db8:	e0 93 19 03 	sts	0x0319, r30
					if(pwm_intermediate_right_desired < pwm_right_desired) {
    5dbc:	e4 17       	cp	r30, r20
    5dbe:	f5 07       	cpc	r31, r21
    5dc0:	0c f4       	brge	.+2      	; 0x5dc4 <handleMotorsWithSpeedController+0x962>
    5dc2:	b9 cf       	rjmp	.-142    	; 0x5d36 <handleMotorsWithSpeedController+0x8d4>
    5dc4:	9c 01       	movw	r18, r24
    5dc6:	48 ce       	rjmp	.-880    	; 0x5a58 <handleMotorsWithSpeedController+0x5f6>
// At the moment the "soft acceleration" is disabled and can be enabled only in the code 
// by setting the value of "softAccEnabled" to 1 at variable initialization.
void handleSoftAcceleration() {
		
	if(calibrateOdomFlag==0) {
		if((getTime100MicroSec()-speedStepCounter) >= SPEED_STEP_DELAY) {
    5dc8:	ff e8       	ldi	r31, 0x8F	; 143
    5dca:	f8 15       	cp	r31, r8
    5dcc:	08 f4       	brcc	.+2      	; 0x5dd0 <handleMotorsWithSpeedController+0x96e>
    5dce:	1d ce       	rjmp	.-966    	; 0x5a0a <handleMotorsWithSpeedController+0x5a8>
    5dd0:	40 91 9c 05 	lds	r20, 0x059C
    5dd4:	5b cb       	rjmp	.-2378   	; 0x548c <handleMotorsWithSpeedController+0x2a>

00005dd6 <handleMotorsWithNoController>:
        vel = -(MAX_MOTORS_PWM/2);
    }
    return vel;
}

void handleMotorsWithNoController() {
    5dd6:	9f 92       	push	r9
    5dd8:	af 92       	push	r10
    5dda:	bf 92       	push	r11
    5ddc:	cf 92       	push	r12
    5dde:	df 92       	push	r13
    5de0:	ef 92       	push	r14
    5de2:	ff 92       	push	r15
    5de4:	0f 93       	push	r16
    5de6:	1f 93       	push	r17
    5de8:	cf 93       	push	r28
    5dea:	df 93       	push	r29
// at steps untill raching the new desired speed, resulting in a smooth acceleration).
// At the moment the "soft acceleration" is disabled and can be enabled only in the code 
// by setting the value of "softAccEnabled" to 1 at variable initialization.
void handleSoftAcceleration() {
		
	if(calibrateOdomFlag==0) {
    5dec:	80 91 9c 05 	lds	r24, 0x059C
    5df0:	88 23       	and	r24, r24
    5df2:	09 f4       	brne	.+2      	; 0x5df6 <handleMotorsWithNoController+0x20>
    5df4:	c9 c0       	rjmp	.+402    	; 0x5f88 <handleMotorsWithNoController+0x1b2>
    5df6:	c0 91 19 03 	lds	r28, 0x0319
    5dfa:	d0 91 1a 03 	lds	r29, 0x031A
    5dfe:	00 91 1b 03 	lds	r16, 0x031B
    5e02:	10 91 1c 03 	lds	r17, 0x031C
void handleMotorsWithNoController() {

	handleSoftAcceleration();

	// compute velocities even if they aren't used
	if(compute_left_vel) {
    5e06:	80 91 03 02 	lds	r24, 0x0203
    5e0a:	88 23       	and	r24, r24
    5e0c:	c9 f1       	breq	.+114    	; 0x5e80 <handleMotorsWithNoController+0xaa>
		last_left_vel = left_vel_sum>>2;
    5e0e:	20 91 09 03 	lds	r18, 0x0309
    5e12:	30 91 0a 03 	lds	r19, 0x030A
    5e16:	36 95       	lsr	r19
    5e18:	27 95       	ror	r18
    5e1a:	36 95       	lsr	r19
    5e1c:	27 95       	ror	r18
    5e1e:	30 93 0e 03 	sts	0x030E, r19
    5e22:	20 93 0d 03 	sts	0x030D, r18
		compute_left_vel = 0;
    5e26:	10 92 03 02 	sts	0x0203, r1
		left_vel_sum = 0;
    5e2a:	10 92 0a 03 	sts	0x030A, r1
    5e2e:	10 92 09 03 	sts	0x0309, r1

		if(pwm_left_desired >= 0) {
    5e32:	80 91 17 03 	lds	r24, 0x0317
    5e36:	90 91 18 03 	lds	r25, 0x0318
    5e3a:	97 fd       	sbrc	r25, 7
    5e3c:	35 c2       	rjmp	.+1130   	; 0x62a8 <handleMotorsWithNoController+0x4d2>
			leftMotSteps += (last_left_vel>>3);
    5e3e:	35 95       	asr	r19
    5e40:	27 95       	ror	r18
    5e42:	35 95       	asr	r19
    5e44:	27 95       	ror	r18
    5e46:	35 95       	asr	r19
    5e48:	27 95       	ror	r18
    5e4a:	b9 01       	movw	r22, r18
    5e4c:	88 27       	eor	r24, r24
    5e4e:	77 fd       	sbrc	r23, 7
    5e50:	80 95       	com	r24
    5e52:	98 2f       	mov	r25, r24
    5e54:	0e 94 e5 55 	call	0xabca	; 0xabca <__floatsisf>
    5e58:	9b 01       	movw	r18, r22
    5e5a:	ac 01       	movw	r20, r24
    5e5c:	60 91 f1 02 	lds	r22, 0x02F1
    5e60:	70 91 f2 02 	lds	r23, 0x02F2
    5e64:	80 91 f3 02 	lds	r24, 0x02F3
    5e68:	90 91 f4 02 	lds	r25, 0x02F4
    5e6c:	0e 94 7d 54 	call	0xa8fa	; 0xa8fa <__addsf3>
    5e70:	60 93 f1 02 	sts	0x02F1, r22
    5e74:	70 93 f2 02 	sts	0x02F2, r23
    5e78:	80 93 f3 02 	sts	0x02F3, r24
    5e7c:	90 93 f4 02 	sts	0x02F4, r25
		} else {
			leftMotSteps -= (last_left_vel>>3);
		}
	}

	if(compute_right_vel) {
    5e80:	80 91 04 02 	lds	r24, 0x0204
    5e84:	88 23       	and	r24, r24
    5e86:	c9 f1       	breq	.+114    	; 0x5efa <handleMotorsWithNoController+0x124>
		last_right_vel = right_vel_sum>>2;
    5e88:	20 91 0b 03 	lds	r18, 0x030B
    5e8c:	30 91 0c 03 	lds	r19, 0x030C
    5e90:	36 95       	lsr	r19
    5e92:	27 95       	ror	r18
    5e94:	36 95       	lsr	r19
    5e96:	27 95       	ror	r18
    5e98:	30 93 10 03 	sts	0x0310, r19
    5e9c:	20 93 0f 03 	sts	0x030F, r18
		compute_right_vel = 0;
    5ea0:	10 92 04 02 	sts	0x0204, r1
		right_vel_sum = 0;
    5ea4:	10 92 0c 03 	sts	0x030C, r1
    5ea8:	10 92 0b 03 	sts	0x030B, r1

		if(pwm_right_desired >= 0) {
    5eac:	80 91 15 03 	lds	r24, 0x0315
    5eb0:	90 91 16 03 	lds	r25, 0x0316
    5eb4:	97 fd       	sbrc	r25, 7
    5eb6:	d6 c1       	rjmp	.+940    	; 0x6264 <handleMotorsWithNoController+0x48e>
			rightMotSteps += (last_right_vel>>3);
    5eb8:	35 95       	asr	r19
    5eba:	27 95       	ror	r18
    5ebc:	35 95       	asr	r19
    5ebe:	27 95       	ror	r18
    5ec0:	35 95       	asr	r19
    5ec2:	27 95       	ror	r18
    5ec4:	b9 01       	movw	r22, r18
    5ec6:	88 27       	eor	r24, r24
    5ec8:	77 fd       	sbrc	r23, 7
    5eca:	80 95       	com	r24
    5ecc:	98 2f       	mov	r25, r24
    5ece:	0e 94 e5 55 	call	0xabca	; 0xabca <__floatsisf>
    5ed2:	9b 01       	movw	r18, r22
    5ed4:	ac 01       	movw	r20, r24
    5ed6:	60 91 ed 02 	lds	r22, 0x02ED
    5eda:	70 91 ee 02 	lds	r23, 0x02EE
    5ede:	80 91 ef 02 	lds	r24, 0x02EF
    5ee2:	90 91 f0 02 	lds	r25, 0x02F0
    5ee6:	0e 94 7d 54 	call	0xa8fa	; 0xa8fa <__addsf3>
    5eea:	60 93 ed 02 	sts	0x02ED, r22
    5eee:	70 93 ee 02 	sts	0x02EE, r23
    5ef2:	80 93 ef 02 	sts	0x02EF, r24
    5ef6:	90 93 f0 02 	sts	0x02F0, r25
		} else {
			rightMotSteps -= (last_right_vel>>3);
		}
	}

	pwm_right_working = pwm_intermediate_right_desired*BYTE_TO_MM_S;	// pwm in the range -635..635 (127*BYTE_TO_MM_S)
    5efa:	ce 01       	movw	r24, r28
    5efc:	88 0f       	add	r24, r24
    5efe:	99 1f       	adc	r25, r25
    5f00:	88 0f       	add	r24, r24
    5f02:	99 1f       	adc	r25, r25
    5f04:	8c 0f       	add	r24, r28
    5f06:	9d 1f       	adc	r25, r29
    5f08:	90 93 2a 03 	sts	0x032A, r25
    5f0c:	80 93 29 03 	sts	0x0329, r24
	pwm_left_working = pwm_intermediate_left_desired*BYTE_TO_MM_S;	
    5f10:	c8 01       	movw	r24, r16
    5f12:	88 0f       	add	r24, r24
    5f14:	99 1f       	adc	r25, r25
    5f16:	88 0f       	add	r24, r24
    5f18:	99 1f       	adc	r25, r25
    5f1a:	80 0f       	add	r24, r16
    5f1c:	91 1f       	adc	r25, r17
    5f1e:	90 93 2c 03 	sts	0x032C, r25
    5f22:	80 93 2b 03 	sts	0x032B, r24
	if(obstacleAvoidanceEnabled) {
    5f26:	80 91 94 04 	lds	r24, 0x0494
    5f2a:	88 23       	and	r24, r24
    5f2c:	09 f0       	breq	.+2      	; 0x5f30 <handleMotorsWithNoController+0x15a>
    5f2e:	fe c0       	rjmp	.+508    	; 0x612c <handleMotorsWithNoController+0x356>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);		// out is in the range -MAX_MOTORS_PWM/2..MAX_MOTORS_PWM/2
	}
	//pwm_left_desired_to_control = cast_speed(pwm_left_working);		// pwm in the range -MAX_MOTORS_PWM/2..MAX_MOTORS_PWM/2
	//pwm_right_desired_to_control = cast_speed(pwm_right_working);

	pwm_left = pwm_left_working;
    5f30:	40 91 2b 03 	lds	r20, 0x032B
    5f34:	50 91 2c 03 	lds	r21, 0x032C
    5f38:	50 93 14 03 	sts	0x0314, r21
    5f3c:	40 93 13 03 	sts	0x0313, r20
	pwm_right = pwm_right_working;
    5f40:	20 91 29 03 	lds	r18, 0x0329
    5f44:	30 91 2a 03 	lds	r19, 0x032A
    5f48:	30 93 12 03 	sts	0x0312, r19
    5f4c:	20 93 11 03 	sts	0x0311, r18

	if(pwm_right > 0) {
    5f50:	12 16       	cp	r1, r18
    5f52:	13 06       	cpc	r1, r19
    5f54:	0c f0       	brlt	.+2      	; 0x5f58 <handleMotorsWithNoController+0x182>
    5f56:	f1 c0       	rjmp	.+482    	; 0x613a <handleMotorsWithNoController+0x364>
		OCR3A = (unsigned int)pwm_right;
    5f58:	30 93 99 00 	sts	0x0099, r19
    5f5c:	20 93 98 00 	sts	0x0098, r18
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
		OCR3B = 0;
	}
	if(pwm_left > 0) {
    5f60:	14 16       	cp	r1, r20
    5f62:	15 06       	cpc	r1, r21
    5f64:	0c f0       	brlt	.+2      	; 0x5f68 <handleMotorsWithNoController+0x192>
    5f66:	d5 c0       	rjmp	.+426    	; 0x6112 <handleMotorsWithNoController+0x33c>
		OCR4A = (unsigned int)pwm_left;
    5f68:	50 93 a9 00 	sts	0x00A9, r21
    5f6c:	40 93 a8 00 	sts	0x00A8, r20
	} else {
		OCR4A = 0;
		OCR4B = 0;
	}

}
    5f70:	df 91       	pop	r29
    5f72:	cf 91       	pop	r28
    5f74:	1f 91       	pop	r17
    5f76:	0f 91       	pop	r16
    5f78:	ff 90       	pop	r15
    5f7a:	ef 90       	pop	r14
    5f7c:	df 90       	pop	r13
    5f7e:	cf 90       	pop	r12
    5f80:	bf 90       	pop	r11
    5f82:	af 90       	pop	r10
    5f84:	9f 90       	pop	r9
    5f86:	08 95       	ret
// At the moment the "soft acceleration" is disabled and can be enabled only in the code 
// by setting the value of "softAccEnabled" to 1 at variable initialization.
void handleSoftAcceleration() {
		
	if(calibrateOdomFlag==0) {
		if((getTime100MicroSec()-speedStepCounter) >= SPEED_STEP_DELAY) {
    5f88:	0e 94 04 10 	call	0x2008	; 0x2008 <getTime100MicroSec>
    5f8c:	8b 01       	movw	r16, r22
    5f8e:	9c 01       	movw	r18, r24
    5f90:	40 e0       	ldi	r20, 0x00	; 0
    5f92:	50 e0       	ldi	r21, 0x00	; 0
    5f94:	60 e0       	ldi	r22, 0x00	; 0
    5f96:	70 e0       	ldi	r23, 0x00	; 0
    5f98:	80 91 84 04 	lds	r24, 0x0484
    5f9c:	90 91 85 04 	lds	r25, 0x0485
    5fa0:	f0 91 86 04 	lds	r31, 0x0486
    5fa4:	b0 91 87 04 	lds	r27, 0x0487
    5fa8:	e0 90 88 04 	lds	r14, 0x0488
    5fac:	c0 90 89 04 	lds	r12, 0x0489
    5fb0:	a0 90 8a 04 	lds	r10, 0x048A
    5fb4:	a0 91 8b 04 	lds	r26, 0x048B
    5fb8:	90 2e       	mov	r9, r16
    5fba:	98 1a       	sub	r9, r24
    5fbc:	e1 e0       	ldi	r30, 0x01	; 1
    5fbe:	09 15       	cp	r16, r9
    5fc0:	08 f0       	brcs	.+2      	; 0x5fc4 <handleMotorsWithNoController+0x1ee>
    5fc2:	2d c1       	rjmp	.+602    	; 0x621e <handleMotorsWithNoController+0x448>
    5fc4:	81 2f       	mov	r24, r17
    5fc6:	89 1b       	sub	r24, r25
    5fc8:	91 e0       	ldi	r25, 0x01	; 1
    5fca:	18 17       	cp	r17, r24
    5fcc:	08 f0       	brcs	.+2      	; 0x5fd0 <handleMotorsWithNoController+0x1fa>
    5fce:	1f c1       	rjmp	.+574    	; 0x620e <handleMotorsWithNoController+0x438>
    5fd0:	f8 2e       	mov	r15, r24
    5fd2:	fe 1a       	sub	r15, r30
    5fd4:	e1 e0       	ldi	r30, 0x01	; 1
    5fd6:	8f 15       	cp	r24, r15
    5fd8:	08 f0       	brcs	.+2      	; 0x5fdc <handleMotorsWithNoController+0x206>
    5fda:	10 c1       	rjmp	.+544    	; 0x61fc <handleMotorsWithNoController+0x426>
    5fdc:	9e 2b       	or	r25, r30
    5fde:	82 2f       	mov	r24, r18
    5fe0:	8f 1b       	sub	r24, r31
    5fe2:	e1 e0       	ldi	r30, 0x01	; 1
    5fe4:	28 17       	cp	r18, r24
    5fe6:	08 f0       	brcs	.+2      	; 0x5fea <handleMotorsWithNoController+0x214>
    5fe8:	01 c1       	rjmp	.+514    	; 0x61ec <handleMotorsWithNoController+0x416>
    5fea:	b8 2e       	mov	r11, r24
    5fec:	b9 1a       	sub	r11, r25
    5fee:	91 e0       	ldi	r25, 0x01	; 1
    5ff0:	8b 15       	cp	r24, r11
    5ff2:	08 f0       	brcs	.+2      	; 0x5ff6 <handleMotorsWithNoController+0x220>
    5ff4:	f2 c0       	rjmp	.+484    	; 0x61da <handleMotorsWithNoController+0x404>
    5ff6:	e9 2b       	or	r30, r25
    5ff8:	83 2f       	mov	r24, r19
    5ffa:	8b 1b       	sub	r24, r27
    5ffc:	91 e0       	ldi	r25, 0x01	; 1
    5ffe:	38 17       	cp	r19, r24
    6000:	08 f0       	brcs	.+2      	; 0x6004 <handleMotorsWithNoController+0x22e>
    6002:	e3 c0       	rjmp	.+454    	; 0x61ca <handleMotorsWithNoController+0x3f4>
    6004:	d8 2e       	mov	r13, r24
    6006:	de 1a       	sub	r13, r30
    6008:	e1 e0       	ldi	r30, 0x01	; 1
    600a:	8d 15       	cp	r24, r13
    600c:	08 f0       	brcs	.+2      	; 0x6010 <handleMotorsWithNoController+0x23a>
    600e:	d4 c0       	rjmp	.+424    	; 0x61b8 <handleMotorsWithNoController+0x3e2>
    6010:	9e 2b       	or	r25, r30
    6012:	8e 2d       	mov	r24, r14
    6014:	81 95       	neg	r24
    6016:	e1 e0       	ldi	r30, 0x01	; 1
    6018:	48 17       	cp	r20, r24
    601a:	08 f0       	brcs	.+2      	; 0x601e <handleMotorsWithNoController+0x248>
    601c:	c5 c0       	rjmp	.+394    	; 0x61a8 <handleMotorsWithNoController+0x3d2>
    601e:	b8 2f       	mov	r27, r24
    6020:	b9 1b       	sub	r27, r25
    6022:	91 e0       	ldi	r25, 0x01	; 1
    6024:	8b 17       	cp	r24, r27
    6026:	08 f0       	brcs	.+2      	; 0x602a <handleMotorsWithNoController+0x254>
    6028:	b6 c0       	rjmp	.+364    	; 0x6196 <handleMotorsWithNoController+0x3c0>
    602a:	e9 2b       	or	r30, r25
    602c:	8c 2d       	mov	r24, r12
    602e:	81 95       	neg	r24
    6030:	f1 e0       	ldi	r31, 0x01	; 1
    6032:	58 17       	cp	r21, r24
    6034:	08 f0       	brcs	.+2      	; 0x6038 <handleMotorsWithNoController+0x262>
    6036:	a6 c0       	rjmp	.+332    	; 0x6184 <handleMotorsWithNoController+0x3ae>
    6038:	98 2f       	mov	r25, r24
    603a:	9e 1b       	sub	r25, r30
    603c:	e9 2f       	mov	r30, r25
    603e:	91 e0       	ldi	r25, 0x01	; 1
    6040:	8e 17       	cp	r24, r30
    6042:	08 f0       	brcs	.+2      	; 0x6046 <handleMotorsWithNoController+0x270>
    6044:	96 c0       	rjmp	.+300    	; 0x6172 <handleMotorsWithNoController+0x39c>
    6046:	f9 2b       	or	r31, r25
    6048:	8a 2d       	mov	r24, r10
    604a:	81 95       	neg	r24
    604c:	91 e0       	ldi	r25, 0x01	; 1
    604e:	68 17       	cp	r22, r24
    6050:	08 f0       	brcs	.+2      	; 0x6054 <handleMotorsWithNoController+0x27e>
    6052:	87 c0       	rjmp	.+270    	; 0x6162 <handleMotorsWithNoController+0x38c>
    6054:	38 2f       	mov	r19, r24
    6056:	3f 1b       	sub	r19, r31
    6058:	21 e0       	ldi	r18, 0x01	; 1
    605a:	83 17       	cp	r24, r19
    605c:	08 f0       	brcs	.+2      	; 0x6060 <handleMotorsWithNoController+0x28a>
    605e:	7a c0       	rjmp	.+244    	; 0x6154 <handleMotorsWithNoController+0x37e>
    6060:	92 2b       	or	r25, r18
    6062:	a1 95       	neg	r26
    6064:	a9 17       	cp	r26, r25
    6066:	09 f4       	brne	.+2      	; 0x606a <handleMotorsWithNoController+0x294>
    6068:	e2 c0       	rjmp	.+452    	; 0x622e <handleMotorsWithNoController+0x458>
			speedStepCounter = getTime100MicroSec();
    606a:	0e 94 04 10 	call	0x2008	; 0x2008 <getTime100MicroSec>
    606e:	9b 01       	movw	r18, r22
    6070:	ac 01       	movw	r20, r24
    6072:	60 93 84 04 	sts	0x0484, r22
    6076:	30 93 85 04 	sts	0x0485, r19
    607a:	40 93 86 04 	sts	0x0486, r20
    607e:	50 93 87 04 	sts	0x0487, r21
    6082:	10 92 88 04 	sts	0x0488, r1
    6086:	10 92 89 04 	sts	0x0489, r1
    608a:	10 92 8a 04 	sts	0x048A, r1
    608e:	10 92 8b 04 	sts	0x048B, r1

			if(softAccEnabled) {
    6092:	80 91 8c 04 	lds	r24, 0x048C
    6096:	88 23       	and	r24, r24
    6098:	09 f4       	brne	.+2      	; 0x609c <handleMotorsWithNoController+0x2c6>
    609a:	3a c1       	rjmp	.+628    	; 0x6310 <handleMotorsWithNoController+0x53a>
				if(pwm_right_desired == 0) {
    609c:	20 91 15 03 	lds	r18, 0x0315
    60a0:	30 91 16 03 	lds	r19, 0x0316
    60a4:	21 15       	cp	r18, r1
    60a6:	31 05       	cpc	r19, r1
    60a8:	09 f0       	breq	.+2      	; 0x60ac <handleMotorsWithNoController+0x2d6>
    60aa:	47 c1       	rjmp	.+654    	; 0x633a <handleMotorsWithNoController+0x564>
					pwm_intermediate_right_desired = 0;
				} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
					pwm_intermediate_right_desired = 0;
    60ac:	10 92 1a 03 	sts	0x031A, r1
    60b0:	10 92 19 03 	sts	0x0319, r1
    60b4:	c0 e0       	ldi	r28, 0x00	; 0
    60b6:	d0 e0       	ldi	r29, 0x00	; 0
					if(pwm_intermediate_right_desired < pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
					}					
				}
	
				if(pwm_left_desired == 0) {
    60b8:	20 91 17 03 	lds	r18, 0x0317
    60bc:	30 91 18 03 	lds	r19, 0x0318
    60c0:	21 15       	cp	r18, r1
    60c2:	31 05       	cpc	r19, r1
    60c4:	09 f4       	brne	.+2      	; 0x60c8 <handleMotorsWithNoController+0x2f2>
    60c6:	5c c1       	rjmp	.+696    	; 0x6380 <handleMotorsWithNoController+0x5aa>
					pwm_intermediate_left_desired = 0;
				} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
    60c8:	00 91 1b 03 	lds	r16, 0x031B
    60cc:	10 91 1c 03 	lds	r17, 0x031C
    60d0:	02 9f       	mul	r16, r18
    60d2:	c0 01       	movw	r24, r0
    60d4:	03 9f       	mul	r16, r19
    60d6:	90 0d       	add	r25, r0
    60d8:	12 9f       	mul	r17, r18
    60da:	90 0d       	add	r25, r0
    60dc:	11 24       	eor	r1, r1
    60de:	97 fd       	sbrc	r25, 7
    60e0:	4f c1       	rjmp	.+670    	; 0x6380 <handleMotorsWithNoController+0x5aa>
					pwm_intermediate_left_desired = 0;
				} else if(pwm_left_desired > pwm_intermediate_left_desired) {
    60e2:	02 17       	cp	r16, r18
    60e4:	13 07       	cpc	r17, r19
    60e6:	0c f0       	brlt	.+2      	; 0x60ea <handleMotorsWithNoController+0x314>
    60e8:	52 c1       	rjmp	.+676    	; 0x638e <handleMotorsWithNoController+0x5b8>
					pwm_intermediate_left_desired += speedStep;
    60ea:	80 91 13 02 	lds	r24, 0x0213
    60ee:	a8 01       	movw	r20, r16
    60f0:	48 0f       	add	r20, r24
    60f2:	51 1d       	adc	r21, r1
    60f4:	ca 01       	movw	r24, r20
    60f6:	50 93 1c 03 	sts	0x031C, r21
    60fa:	40 93 1b 03 	sts	0x031B, r20
					if(pwm_intermediate_left_desired > pwm_left_desired) {
    60fe:	24 17       	cp	r18, r20
    6100:	35 07       	cpc	r19, r21
    6102:	0c f0       	brlt	.+2      	; 0x6106 <handleMotorsWithNoController+0x330>
    6104:	18 c1       	rjmp	.+560    	; 0x6336 <handleMotorsWithNoController+0x560>
						pwm_intermediate_left_desired = pwm_left_desired;
					}
				} else if(pwm_left_desired < pwm_intermediate_left_desired) {
					pwm_intermediate_left_desired -= speedStep;
					if(pwm_intermediate_left_desired < pwm_left_desired) {
						pwm_intermediate_left_desired = pwm_left_desired;
    6106:	30 93 1c 03 	sts	0x031C, r19
    610a:	20 93 1b 03 	sts	0x031B, r18
    610e:	89 01       	movw	r16, r18
    6110:	7a ce       	rjmp	.-780    	; 0x5e06 <handleMotorsWithNoController+0x30>
		OCR3A = 0;
		OCR3B = 0;
	}
	if(pwm_left > 0) {
		OCR4A = (unsigned int)pwm_left;
	} else if(pwm_left < 0) {
    6112:	41 15       	cp	r20, r1
    6114:	51 05       	cpc	r21, r1
    6116:	09 f0       	breq	.+2      	; 0x611a <handleMotorsWithNoController+0x344>
    6118:	f2 c0       	rjmp	.+484    	; 0x62fe <handleMotorsWithNoController+0x528>
		OCR4B =(unsigned int)( -pwm_left);
	} else {
		OCR4A = 0;
    611a:	10 92 a9 00 	sts	0x00A9, r1
    611e:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    6122:	10 92 ab 00 	sts	0x00AB, r1
    6126:	10 92 aa 00 	sts	0x00AA, r1
    612a:	22 cf       	rjmp	.-444    	; 0x5f70 <handleMotorsWithNoController+0x19a>
	}

	pwm_right_working = pwm_intermediate_right_desired*BYTE_TO_MM_S;	// pwm in the range -635..635 (127*BYTE_TO_MM_S)
	pwm_left_working = pwm_intermediate_left_desired*BYTE_TO_MM_S;	
	if(obstacleAvoidanceEnabled) {
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);		// out is in the range -MAX_MOTORS_PWM/2..MAX_MOTORS_PWM/2
    612c:	8b e2       	ldi	r24, 0x2B	; 43
    612e:	93 e0       	ldi	r25, 0x03	; 3
    6130:	69 e2       	ldi	r22, 0x29	; 41
    6132:	73 e0       	ldi	r23, 0x03	; 3
    6134:	0e 94 d5 33 	call	0x67aa	; 0x67aa <obstacleAvoidance>
    6138:	fb ce       	rjmp	.-522    	; 0x5f30 <handleMotorsWithNoController+0x15a>
	pwm_left = pwm_left_working;
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
    613a:	21 15       	cp	r18, r1
    613c:	31 05       	cpc	r19, r1
    613e:	09 f0       	breq	.+2      	; 0x6142 <handleMotorsWithNoController+0x36c>
    6140:	d5 c0       	rjmp	.+426    	; 0x62ec <handleMotorsWithNoController+0x516>
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
    6142:	10 92 99 00 	sts	0x0099, r1
    6146:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    614a:	10 92 9b 00 	sts	0x009B, r1
    614e:	10 92 9a 00 	sts	0x009A, r1
    6152:	06 cf       	rjmp	.-500    	; 0x5f60 <handleMotorsWithNoController+0x18a>
// At the moment the "soft acceleration" is disabled and can be enabled only in the code 
// by setting the value of "softAccEnabled" to 1 at variable initialization.
void handleSoftAcceleration() {
		
	if(calibrateOdomFlag==0) {
		if((getTime100MicroSec()-speedStepCounter) >= SPEED_STEP_DELAY) {
    6154:	20 e0       	ldi	r18, 0x00	; 0
    6156:	92 2b       	or	r25, r18
    6158:	a1 95       	neg	r26
    615a:	a9 17       	cp	r26, r25
    615c:	09 f0       	breq	.+2      	; 0x6160 <handleMotorsWithNoController+0x38a>
    615e:	85 cf       	rjmp	.-246    	; 0x606a <handleMotorsWithNoController+0x294>
    6160:	66 c0       	rjmp	.+204    	; 0x622e <handleMotorsWithNoController+0x458>
    6162:	90 e0       	ldi	r25, 0x00	; 0
    6164:	38 2f       	mov	r19, r24
    6166:	3f 1b       	sub	r19, r31
    6168:	21 e0       	ldi	r18, 0x01	; 1
    616a:	83 17       	cp	r24, r19
    616c:	08 f4       	brcc	.+2      	; 0x6170 <handleMotorsWithNoController+0x39a>
    616e:	78 cf       	rjmp	.-272    	; 0x6060 <handleMotorsWithNoController+0x28a>
    6170:	f1 cf       	rjmp	.-30     	; 0x6154 <handleMotorsWithNoController+0x37e>
    6172:	90 e0       	ldi	r25, 0x00	; 0
    6174:	f9 2b       	or	r31, r25
    6176:	8a 2d       	mov	r24, r10
    6178:	81 95       	neg	r24
    617a:	91 e0       	ldi	r25, 0x01	; 1
    617c:	68 17       	cp	r22, r24
    617e:	08 f4       	brcc	.+2      	; 0x6182 <handleMotorsWithNoController+0x3ac>
    6180:	69 cf       	rjmp	.-302    	; 0x6054 <handleMotorsWithNoController+0x27e>
    6182:	ef cf       	rjmp	.-34     	; 0x6162 <handleMotorsWithNoController+0x38c>
    6184:	f0 e0       	ldi	r31, 0x00	; 0
    6186:	98 2f       	mov	r25, r24
    6188:	9e 1b       	sub	r25, r30
    618a:	e9 2f       	mov	r30, r25
    618c:	91 e0       	ldi	r25, 0x01	; 1
    618e:	8e 17       	cp	r24, r30
    6190:	08 f4       	brcc	.+2      	; 0x6194 <handleMotorsWithNoController+0x3be>
    6192:	59 cf       	rjmp	.-334    	; 0x6046 <handleMotorsWithNoController+0x270>
    6194:	ee cf       	rjmp	.-36     	; 0x6172 <handleMotorsWithNoController+0x39c>
    6196:	90 e0       	ldi	r25, 0x00	; 0
    6198:	e9 2b       	or	r30, r25
    619a:	8c 2d       	mov	r24, r12
    619c:	81 95       	neg	r24
    619e:	f1 e0       	ldi	r31, 0x01	; 1
    61a0:	58 17       	cp	r21, r24
    61a2:	08 f4       	brcc	.+2      	; 0x61a6 <handleMotorsWithNoController+0x3d0>
    61a4:	49 cf       	rjmp	.-366    	; 0x6038 <handleMotorsWithNoController+0x262>
    61a6:	ee cf       	rjmp	.-36     	; 0x6184 <handleMotorsWithNoController+0x3ae>
    61a8:	e0 e0       	ldi	r30, 0x00	; 0
    61aa:	b8 2f       	mov	r27, r24
    61ac:	b9 1b       	sub	r27, r25
    61ae:	91 e0       	ldi	r25, 0x01	; 1
    61b0:	8b 17       	cp	r24, r27
    61b2:	08 f4       	brcc	.+2      	; 0x61b6 <handleMotorsWithNoController+0x3e0>
    61b4:	3a cf       	rjmp	.-396    	; 0x602a <handleMotorsWithNoController+0x254>
    61b6:	ef cf       	rjmp	.-34     	; 0x6196 <handleMotorsWithNoController+0x3c0>
    61b8:	e0 e0       	ldi	r30, 0x00	; 0
    61ba:	9e 2b       	or	r25, r30
    61bc:	8e 2d       	mov	r24, r14
    61be:	81 95       	neg	r24
    61c0:	e1 e0       	ldi	r30, 0x01	; 1
    61c2:	48 17       	cp	r20, r24
    61c4:	08 f4       	brcc	.+2      	; 0x61c8 <handleMotorsWithNoController+0x3f2>
    61c6:	2b cf       	rjmp	.-426    	; 0x601e <handleMotorsWithNoController+0x248>
    61c8:	ef cf       	rjmp	.-34     	; 0x61a8 <handleMotorsWithNoController+0x3d2>
    61ca:	90 e0       	ldi	r25, 0x00	; 0
    61cc:	d8 2e       	mov	r13, r24
    61ce:	de 1a       	sub	r13, r30
    61d0:	e1 e0       	ldi	r30, 0x01	; 1
    61d2:	8d 15       	cp	r24, r13
    61d4:	08 f4       	brcc	.+2      	; 0x61d8 <handleMotorsWithNoController+0x402>
    61d6:	1c cf       	rjmp	.-456    	; 0x6010 <handleMotorsWithNoController+0x23a>
    61d8:	ef cf       	rjmp	.-34     	; 0x61b8 <handleMotorsWithNoController+0x3e2>
    61da:	90 e0       	ldi	r25, 0x00	; 0
    61dc:	e9 2b       	or	r30, r25
    61de:	83 2f       	mov	r24, r19
    61e0:	8b 1b       	sub	r24, r27
    61e2:	91 e0       	ldi	r25, 0x01	; 1
    61e4:	38 17       	cp	r19, r24
    61e6:	08 f4       	brcc	.+2      	; 0x61ea <handleMotorsWithNoController+0x414>
    61e8:	0d cf       	rjmp	.-486    	; 0x6004 <handleMotorsWithNoController+0x22e>
    61ea:	ef cf       	rjmp	.-34     	; 0x61ca <handleMotorsWithNoController+0x3f4>
    61ec:	e0 e0       	ldi	r30, 0x00	; 0
    61ee:	b8 2e       	mov	r11, r24
    61f0:	b9 1a       	sub	r11, r25
    61f2:	91 e0       	ldi	r25, 0x01	; 1
    61f4:	8b 15       	cp	r24, r11
    61f6:	08 f4       	brcc	.+2      	; 0x61fa <handleMotorsWithNoController+0x424>
    61f8:	fe ce       	rjmp	.-516    	; 0x5ff6 <handleMotorsWithNoController+0x220>
    61fa:	ef cf       	rjmp	.-34     	; 0x61da <handleMotorsWithNoController+0x404>
    61fc:	e0 e0       	ldi	r30, 0x00	; 0
    61fe:	9e 2b       	or	r25, r30
    6200:	82 2f       	mov	r24, r18
    6202:	8f 1b       	sub	r24, r31
    6204:	e1 e0       	ldi	r30, 0x01	; 1
    6206:	28 17       	cp	r18, r24
    6208:	08 f4       	brcc	.+2      	; 0x620c <handleMotorsWithNoController+0x436>
    620a:	ef ce       	rjmp	.-546    	; 0x5fea <handleMotorsWithNoController+0x214>
    620c:	ef cf       	rjmp	.-34     	; 0x61ec <handleMotorsWithNoController+0x416>
    620e:	90 e0       	ldi	r25, 0x00	; 0
    6210:	f8 2e       	mov	r15, r24
    6212:	fe 1a       	sub	r15, r30
    6214:	e1 e0       	ldi	r30, 0x01	; 1
    6216:	8f 15       	cp	r24, r15
    6218:	08 f4       	brcc	.+2      	; 0x621c <handleMotorsWithNoController+0x446>
    621a:	e0 ce       	rjmp	.-576    	; 0x5fdc <handleMotorsWithNoController+0x206>
    621c:	ef cf       	rjmp	.-34     	; 0x61fc <handleMotorsWithNoController+0x426>
    621e:	e0 e0       	ldi	r30, 0x00	; 0
    6220:	81 2f       	mov	r24, r17
    6222:	89 1b       	sub	r24, r25
    6224:	91 e0       	ldi	r25, 0x01	; 1
    6226:	18 17       	cp	r17, r24
    6228:	08 f4       	brcc	.+2      	; 0x622c <handleMotorsWithNoController+0x456>
    622a:	d2 ce       	rjmp	.-604    	; 0x5fd0 <handleMotorsWithNoController+0x1fa>
    622c:	f0 cf       	rjmp	.-32     	; 0x620e <handleMotorsWithNoController+0x438>
    622e:	33 23       	and	r19, r19
    6230:	09 f0       	breq	.+2      	; 0x6234 <handleMotorsWithNoController+0x45e>
    6232:	1b cf       	rjmp	.-458    	; 0x606a <handleMotorsWithNoController+0x294>
    6234:	ee 23       	and	r30, r30
    6236:	09 f0       	breq	.+2      	; 0x623a <handleMotorsWithNoController+0x464>
    6238:	18 cf       	rjmp	.-464    	; 0x606a <handleMotorsWithNoController+0x294>
    623a:	bb 23       	and	r27, r27
    623c:	09 f0       	breq	.+2      	; 0x6240 <handleMotorsWithNoController+0x46a>
    623e:	15 cf       	rjmp	.-470    	; 0x606a <handleMotorsWithNoController+0x294>
    6240:	dd 20       	and	r13, r13
    6242:	09 f0       	breq	.+2      	; 0x6246 <handleMotorsWithNoController+0x470>
    6244:	12 cf       	rjmp	.-476    	; 0x606a <handleMotorsWithNoController+0x294>
    6246:	bb 20       	and	r11, r11
    6248:	09 f0       	breq	.+2      	; 0x624c <handleMotorsWithNoController+0x476>
    624a:	0f cf       	rjmp	.-482    	; 0x606a <handleMotorsWithNoController+0x294>
    624c:	41 e0       	ldi	r20, 0x01	; 1
    624e:	4f 15       	cp	r20, r15
    6250:	08 f4       	brcc	.+2      	; 0x6254 <handleMotorsWithNoController+0x47e>
    6252:	0b cf       	rjmp	.-490    	; 0x606a <handleMotorsWithNoController+0x294>
    6254:	f4 16       	cp	r15, r20
    6256:	09 f0       	breq	.+2      	; 0x625a <handleMotorsWithNoController+0x484>
    6258:	ce cd       	rjmp	.-1124   	; 0x5df6 <handleMotorsWithNoController+0x20>
    625a:	5f e8       	ldi	r21, 0x8F	; 143
    625c:	59 15       	cp	r21, r9
    625e:	08 f4       	brcc	.+2      	; 0x6262 <handleMotorsWithNoController+0x48c>
    6260:	04 cf       	rjmp	.-504    	; 0x606a <handleMotorsWithNoController+0x294>
    6262:	c9 cd       	rjmp	.-1134   	; 0x5df6 <handleMotorsWithNoController+0x20>
		right_vel_sum = 0;

		if(pwm_right_desired >= 0) {
			rightMotSteps += (last_right_vel>>3);
		} else {
			rightMotSteps -= (last_right_vel>>3);
    6264:	35 95       	asr	r19
    6266:	27 95       	ror	r18
    6268:	35 95       	asr	r19
    626a:	27 95       	ror	r18
    626c:	35 95       	asr	r19
    626e:	27 95       	ror	r18
    6270:	b9 01       	movw	r22, r18
    6272:	88 27       	eor	r24, r24
    6274:	77 fd       	sbrc	r23, 7
    6276:	80 95       	com	r24
    6278:	98 2f       	mov	r25, r24
    627a:	0e 94 e5 55 	call	0xabca	; 0xabca <__floatsisf>
    627e:	9b 01       	movw	r18, r22
    6280:	ac 01       	movw	r20, r24
    6282:	60 91 ed 02 	lds	r22, 0x02ED
    6286:	70 91 ee 02 	lds	r23, 0x02EE
    628a:	80 91 ef 02 	lds	r24, 0x02EF
    628e:	90 91 f0 02 	lds	r25, 0x02F0
    6292:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__subsf3>
    6296:	60 93 ed 02 	sts	0x02ED, r22
    629a:	70 93 ee 02 	sts	0x02EE, r23
    629e:	80 93 ef 02 	sts	0x02EF, r24
    62a2:	90 93 f0 02 	sts	0x02F0, r25
    62a6:	29 ce       	rjmp	.-942    	; 0x5efa <handleMotorsWithNoController+0x124>
		left_vel_sum = 0;

		if(pwm_left_desired >= 0) {
			leftMotSteps += (last_left_vel>>3);
		} else {
			leftMotSteps -= (last_left_vel>>3);
    62a8:	35 95       	asr	r19
    62aa:	27 95       	ror	r18
    62ac:	35 95       	asr	r19
    62ae:	27 95       	ror	r18
    62b0:	35 95       	asr	r19
    62b2:	27 95       	ror	r18
    62b4:	b9 01       	movw	r22, r18
    62b6:	88 27       	eor	r24, r24
    62b8:	77 fd       	sbrc	r23, 7
    62ba:	80 95       	com	r24
    62bc:	98 2f       	mov	r25, r24
    62be:	0e 94 e5 55 	call	0xabca	; 0xabca <__floatsisf>
    62c2:	9b 01       	movw	r18, r22
    62c4:	ac 01       	movw	r20, r24
    62c6:	60 91 f1 02 	lds	r22, 0x02F1
    62ca:	70 91 f2 02 	lds	r23, 0x02F2
    62ce:	80 91 f3 02 	lds	r24, 0x02F3
    62d2:	90 91 f4 02 	lds	r25, 0x02F4
    62d6:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <__subsf3>
    62da:	60 93 f1 02 	sts	0x02F1, r22
    62de:	70 93 f2 02 	sts	0x02F2, r23
    62e2:	80 93 f3 02 	sts	0x02F3, r24
    62e6:	90 93 f4 02 	sts	0x02F4, r25
    62ea:	ca cd       	rjmp	.-1132   	; 0x5e80 <handleMotorsWithNoController+0xaa>
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
		OCR3B = (unsigned int)(-pwm_right);
    62ec:	88 27       	eor	r24, r24
    62ee:	99 27       	eor	r25, r25
    62f0:	82 1b       	sub	r24, r18
    62f2:	93 0b       	sbc	r25, r19
    62f4:	90 93 9b 00 	sts	0x009B, r25
    62f8:	80 93 9a 00 	sts	0x009A, r24
    62fc:	31 ce       	rjmp	.-926    	; 0x5f60 <handleMotorsWithNoController+0x18a>
		OCR3B = 0;
	}
	if(pwm_left > 0) {
		OCR4A = (unsigned int)pwm_left;
	} else if(pwm_left < 0) {
		OCR4B =(unsigned int)( -pwm_left);
    62fe:	88 27       	eor	r24, r24
    6300:	99 27       	eor	r25, r25
    6302:	84 1b       	sub	r24, r20
    6304:	95 0b       	sbc	r25, r21
    6306:	90 93 ab 00 	sts	0x00AB, r25
    630a:	80 93 aa 00 	sts	0x00AA, r24
    630e:	30 ce       	rjmp	.-928    	; 0x5f70 <handleMotorsWithNoController+0x19a>
					if(pwm_intermediate_left_desired < pwm_left_desired) {
						pwm_intermediate_left_desired = pwm_left_desired;
					}					
				}
			} else {
				pwm_intermediate_right_desired = pwm_right_desired;
    6310:	20 91 15 03 	lds	r18, 0x0315
    6314:	30 91 16 03 	lds	r19, 0x0316
    6318:	20 93 19 03 	sts	0x0319, r18
    631c:	30 93 1a 03 	sts	0x031A, r19
				pwm_intermediate_left_desired = pwm_left_desired;
    6320:	40 91 17 03 	lds	r20, 0x0317
    6324:	50 91 18 03 	lds	r21, 0x0318
    6328:	40 93 1b 03 	sts	0x031B, r20
    632c:	50 93 1c 03 	sts	0x031C, r21
    6330:	c9 01       	movw	r24, r18
    6332:	ec 01       	movw	r28, r24
    6334:	ca 01       	movw	r24, r20
    6336:	8c 01       	movw	r16, r24
    6338:	66 cd       	rjmp	.-1332   	; 0x5e06 <handleMotorsWithNoController+0x30>
			speedStepCounter = getTime100MicroSec();

			if(softAccEnabled) {
				if(pwm_right_desired == 0) {
					pwm_intermediate_right_desired = 0;
				} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
    633a:	c0 91 19 03 	lds	r28, 0x0319
    633e:	d0 91 1a 03 	lds	r29, 0x031A
    6342:	c2 9f       	mul	r28, r18
    6344:	c0 01       	movw	r24, r0
    6346:	c3 9f       	mul	r28, r19
    6348:	90 0d       	add	r25, r0
    634a:	d2 9f       	mul	r29, r18
    634c:	90 0d       	add	r25, r0
    634e:	11 24       	eor	r1, r1
    6350:	97 fd       	sbrc	r25, 7
    6352:	ac ce       	rjmp	.-680    	; 0x60ac <handleMotorsWithNoController+0x2d6>
					pwm_intermediate_right_desired = 0;
				} else if(pwm_right_desired > pwm_intermediate_right_desired) {
    6354:	c2 17       	cp	r28, r18
    6356:	d3 07       	cpc	r29, r19
    6358:	74 f5       	brge	.+92     	; 0x63b6 <handleMotorsWithNoController+0x5e0>
					pwm_intermediate_right_desired += speedStep;
    635a:	80 91 13 02 	lds	r24, 0x0213
    635e:	ae 01       	movw	r20, r28
    6360:	48 0f       	add	r20, r24
    6362:	51 1d       	adc	r21, r1
    6364:	ca 01       	movw	r24, r20
    6366:	50 93 1a 03 	sts	0x031A, r21
    636a:	40 93 19 03 	sts	0x0319, r20
					if(pwm_intermediate_right_desired > pwm_right_desired) {
    636e:	24 17       	cp	r18, r20
    6370:	35 07       	cpc	r19, r21
    6372:	94 f5       	brge	.+100    	; 0x63d8 <handleMotorsWithNoController+0x602>
						pwm_intermediate_right_desired = pwm_right_desired;
					}
				} else if(pwm_right_desired < pwm_intermediate_right_desired) {
					pwm_intermediate_right_desired -= speedStep;
					if(pwm_intermediate_right_desired < pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
    6374:	30 93 1a 03 	sts	0x031A, r19
    6378:	20 93 19 03 	sts	0x0319, r18
    637c:	e9 01       	movw	r28, r18
    637e:	9c ce       	rjmp	.-712    	; 0x60b8 <handleMotorsWithNoController+0x2e2>
				}
	
				if(pwm_left_desired == 0) {
					pwm_intermediate_left_desired = 0;
				} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
					pwm_intermediate_left_desired = 0;
    6380:	10 92 1c 03 	sts	0x031C, r1
    6384:	10 92 1b 03 	sts	0x031B, r1
    6388:	00 e0       	ldi	r16, 0x00	; 0
    638a:	10 e0       	ldi	r17, 0x00	; 0
    638c:	3c cd       	rjmp	.-1416   	; 0x5e06 <handleMotorsWithNoController+0x30>
				} else if(pwm_left_desired > pwm_intermediate_left_desired) {
					pwm_intermediate_left_desired += speedStep;
					if(pwm_intermediate_left_desired > pwm_left_desired) {
						pwm_intermediate_left_desired = pwm_left_desired;
					}
				} else if(pwm_left_desired < pwm_intermediate_left_desired) {
    638e:	20 17       	cp	r18, r16
    6390:	31 07       	cpc	r19, r17
    6392:	0c f0       	brlt	.+2      	; 0x6396 <handleMotorsWithNoController+0x5c0>
    6394:	38 cd       	rjmp	.-1424   	; 0x5e06 <handleMotorsWithNoController+0x30>
					pwm_intermediate_left_desired -= speedStep;
    6396:	80 91 13 02 	lds	r24, 0x0213
    639a:	a8 01       	movw	r20, r16
    639c:	48 1b       	sub	r20, r24
    639e:	51 09       	sbc	r21, r1
    63a0:	ca 01       	movw	r24, r20
    63a2:	50 93 1c 03 	sts	0x031C, r21
    63a6:	40 93 1b 03 	sts	0x031B, r20
					if(pwm_intermediate_left_desired < pwm_left_desired) {
    63aa:	42 17       	cp	r20, r18
    63ac:	53 07       	cpc	r21, r19
    63ae:	0c f4       	brge	.+2      	; 0x63b2 <handleMotorsWithNoController+0x5dc>
    63b0:	aa ce       	rjmp	.-684    	; 0x6106 <handleMotorsWithNoController+0x330>
    63b2:	8c 01       	movw	r16, r24
    63b4:	28 cd       	rjmp	.-1456   	; 0x5e06 <handleMotorsWithNoController+0x30>
				} else if(pwm_right_desired > pwm_intermediate_right_desired) {
					pwm_intermediate_right_desired += speedStep;
					if(pwm_intermediate_right_desired > pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
					}
				} else if(pwm_right_desired < pwm_intermediate_right_desired) {
    63b6:	2c 17       	cp	r18, r28
    63b8:	3d 07       	cpc	r19, r29
    63ba:	0c f0       	brlt	.+2      	; 0x63be <handleMotorsWithNoController+0x5e8>
    63bc:	7d ce       	rjmp	.-774    	; 0x60b8 <handleMotorsWithNoController+0x2e2>
					pwm_intermediate_right_desired -= speedStep;
    63be:	80 91 13 02 	lds	r24, 0x0213
    63c2:	ae 01       	movw	r20, r28
    63c4:	48 1b       	sub	r20, r24
    63c6:	51 09       	sbc	r21, r1
    63c8:	ca 01       	movw	r24, r20
    63ca:	50 93 1a 03 	sts	0x031A, r21
    63ce:	40 93 19 03 	sts	0x0319, r20
					if(pwm_intermediate_right_desired < pwm_right_desired) {
    63d2:	42 17       	cp	r20, r18
    63d4:	53 07       	cpc	r21, r19
    63d6:	74 f2       	brlt	.-100    	; 0x6374 <handleMotorsWithNoController+0x59e>
    63d8:	ec 01       	movw	r28, r24
    63da:	6e ce       	rjmp	.-804    	; 0x60b8 <handleMotorsWithNoController+0x2e2>

000063dc <initCalibration>:
	calibration[8][7] = 153;

    writeCalibrationToFlash();
}

void initCalibration() {
    63dc:	2f 92       	push	r2
    63de:	3f 92       	push	r3
    63e0:	4f 92       	push	r4
    63e2:	5f 92       	push	r5
    63e4:	6f 92       	push	r6
    63e6:	7f 92       	push	r7
    63e8:	8f 92       	push	r8
    63ea:	9f 92       	push	r9
    63ec:	af 92       	push	r10
    63ee:	bf 92       	push	r11
    63f0:	cf 92       	push	r12
    63f2:	df 92       	push	r13
    63f4:	ef 92       	push	r14
    63f6:	ff 92       	push	r15
    63f8:	0f 93       	push	r16
    63fa:	1f 93       	push	r17
    63fc:	cf 93       	push	r28
    63fe:	df 93       	push	r29

    unsigned int temp=0;
 
 	temp = eeprom_read_word((uint16_t*)CALIB_CHECK_ADDRESS);
    6400:	8a e6       	ldi	r24, 0x6A	; 106
    6402:	9f e0       	ldi	r25, 0x0F	; 15
    6404:	0e 94 96 58 	call	0xb12c	; 0xb12c <__eerd_word_m2560>

    if(temp==0xAA55) {   // valid odometry data saved in flash, read them
    6408:	85 55       	subi	r24, 0x55	; 85
    640a:	9a 4a       	sbci	r25, 0xAA	; 170
    640c:	09 f4       	brne	.+2      	; 0x6410 <initCalibration+0x34>
    640e:	9c c1       	rjmp	.+824    	; 0x6748 <initCalibration+0x36c>
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    	calibration[i][0] = i+1;
	}
    // the following values are taken from a field test
    // forward left, speed control enabled
    calibration[0][0] = 20;		// measured speed with back EMF (adc 0..1023)
    6410:	74 e1       	ldi	r23, 0x14	; 20
    6412:	87 2e       	mov	r8, r23
    6414:	91 2c       	mov	r9, r1
    6416:	90 92 11 09 	sts	0x0911, r9
    641a:	80 92 10 09 	sts	0x0910, r8
    calibration[1][0] = 40;
    641e:	88 e2       	ldi	r24, 0x28	; 40
    6420:	90 e0       	ldi	r25, 0x00	; 0
    6422:	90 93 21 09 	sts	0x0921, r25
    6426:	80 93 20 09 	sts	0x0920, r24
    calibration[2][0] = 59;
    642a:	8b e3       	ldi	r24, 0x3B	; 59
    642c:	90 e0       	ldi	r25, 0x00	; 0
    642e:	90 93 31 09 	sts	0x0931, r25
    6432:	80 93 30 09 	sts	0x0930, r24
    calibration[3][0] = 79;
    6436:	8f e4       	ldi	r24, 0x4F	; 79
    6438:	90 e0       	ldi	r25, 0x00	; 0
    643a:	90 93 41 09 	sts	0x0941, r25
    643e:	80 93 40 09 	sts	0x0940, r24
    calibration[4][0] = 100;
    6442:	84 e6       	ldi	r24, 0x64	; 100
    6444:	90 e0       	ldi	r25, 0x00	; 0
    6446:	90 93 51 09 	sts	0x0951, r25
    644a:	80 93 50 09 	sts	0x0950, r24
    calibration[5][0] = 120;
    644e:	c8 e7       	ldi	r28, 0x78	; 120
    6450:	d0 e0       	ldi	r29, 0x00	; 0
    6452:	d0 93 61 09 	sts	0x0961, r29
    6456:	c0 93 60 09 	sts	0x0960, r28
    calibration[6][0] = 139;
    645a:	6b e8       	ldi	r22, 0x8B	; 139
    645c:	e6 2e       	mov	r14, r22
    645e:	f1 2c       	mov	r15, r1
    6460:	f0 92 71 09 	sts	0x0971, r15
    6464:	e0 92 70 09 	sts	0x0970, r14
    calibration[7][0] = 159;
    6468:	8f e9       	ldi	r24, 0x9F	; 159
    646a:	90 e0       	ldi	r25, 0x00	; 0
    646c:	90 93 81 09 	sts	0x0981, r25
    6470:	80 93 80 09 	sts	0x0980, r24
	calibration[8][0] = 180;
    6474:	54 eb       	ldi	r21, 0xB4	; 180
    6476:	a5 2e       	mov	r10, r21
    6478:	b1 2c       	mov	r11, r1
    647a:	b0 92 91 09 	sts	0x0991, r11
    647e:	a0 92 90 09 	sts	0x0990, r10
    calibration[0][1] = 19;    	// real speed measured in mm/s
    6482:	23 e1       	ldi	r18, 0x13	; 19
    6484:	30 e0       	ldi	r19, 0x00	; 0
    6486:	30 93 13 09 	sts	0x0913, r19
    648a:	20 93 12 09 	sts	0x0912, r18
    calibration[1][1] = 47;
    648e:	8f e2       	ldi	r24, 0x2F	; 47
    6490:	90 e0       	ldi	r25, 0x00	; 0
    6492:	90 93 23 09 	sts	0x0923, r25
    6496:	80 93 22 09 	sts	0x0922, r24
    calibration[2][1] = 72;
    649a:	88 e4       	ldi	r24, 0x48	; 72
    649c:	90 e0       	ldi	r25, 0x00	; 0
    649e:	90 93 33 09 	sts	0x0933, r25
    64a2:	80 93 32 09 	sts	0x0932, r24
    calibration[3][1] = 91;
    64a6:	8b e5       	ldi	r24, 0x5B	; 91
    64a8:	90 e0       	ldi	r25, 0x00	; 0
    64aa:	90 93 43 09 	sts	0x0943, r25
    64ae:	80 93 42 09 	sts	0x0942, r24
    calibration[4][1] = 109;
    64b2:	8d e6       	ldi	r24, 0x6D	; 109
    64b4:	90 e0       	ldi	r25, 0x00	; 0
    64b6:	90 93 53 09 	sts	0x0953, r25
    64ba:	80 93 52 09 	sts	0x0952, r24
    calibration[5][1] = 125;
    64be:	4d e7       	ldi	r20, 0x7D	; 125
    64c0:	c4 2e       	mov	r12, r20
    64c2:	d1 2c       	mov	r13, r1
    64c4:	d0 92 63 09 	sts	0x0963, r13
    64c8:	c0 92 62 09 	sts	0x0962, r12
    calibration[6][1] = 143;
    64cc:	8f e8       	ldi	r24, 0x8F	; 143
    64ce:	90 e0       	ldi	r25, 0x00	; 0
    64d0:	90 93 73 09 	sts	0x0973, r25
    64d4:	80 93 72 09 	sts	0x0972, r24
    calibration[7][1] = 160;
    64d8:	40 ea       	ldi	r20, 0xA0	; 160
    64da:	50 e0       	ldi	r21, 0x00	; 0
    64dc:	50 93 83 09 	sts	0x0983, r21
    64e0:	40 93 82 09 	sts	0x0982, r20
	calibration[8][1] = 174;
    64e4:	8e ea       	ldi	r24, 0xAE	; 174
    64e6:	90 e0       	ldi	r25, 0x00	; 0
    64e8:	90 93 93 09 	sts	0x0993, r25
    64ec:	80 93 92 09 	sts	0x0992, r24
    // forward right, speed control enabled
    calibration[0][2] = 19;		// measured speed with back EMF (adc 0..1023)
    64f0:	30 93 15 09 	sts	0x0915, r19
    64f4:	20 93 14 09 	sts	0x0914, r18
    calibration[1][2] = 39;
    64f8:	67 e2       	ldi	r22, 0x27	; 39
    64fa:	70 e0       	ldi	r23, 0x00	; 0
    64fc:	70 93 25 09 	sts	0x0925, r23
    6500:	60 93 24 09 	sts	0x0924, r22
    calibration[2][2] = 60;
    6504:	0c e3       	ldi	r16, 0x3C	; 60
    6506:	10 e0       	ldi	r17, 0x00	; 0
    6508:	10 93 35 09 	sts	0x0935, r17
    650c:	00 93 34 09 	sts	0x0934, r16
    calibration[3][2] = 80;
    6510:	20 e5       	ldi	r18, 0x50	; 80
    6512:	22 2e       	mov	r2, r18
    6514:	31 2c       	mov	r3, r1
    6516:	30 92 45 09 	sts	0x0945, r3
    651a:	20 92 44 09 	sts	0x0944, r2
    calibration[4][2] = 99;
    651e:	a3 e6       	ldi	r26, 0x63	; 99
    6520:	b0 e0       	ldi	r27, 0x00	; 0
    6522:	b0 93 55 09 	sts	0x0955, r27
    6526:	a0 93 54 09 	sts	0x0954, r26
    calibration[5][2] = 119;
    652a:	27 e7       	ldi	r18, 0x77	; 119
    652c:	30 e0       	ldi	r19, 0x00	; 0
    652e:	30 93 65 09 	sts	0x0965, r19
    6532:	20 93 64 09 	sts	0x0964, r18
    calibration[6][2] = 140;
    6536:	ec e8       	ldi	r30, 0x8C	; 140
    6538:	f0 e0       	ldi	r31, 0x00	; 0
    653a:	f0 93 75 09 	sts	0x0975, r31
    653e:	e0 93 74 09 	sts	0x0974, r30
    calibration[7][2] = 160;
    6542:	50 93 85 09 	sts	0x0985, r21
    6546:	40 93 84 09 	sts	0x0984, r20
	calibration[8][2] = 180;
    654a:	b0 92 95 09 	sts	0x0995, r11
    654e:	a0 92 94 09 	sts	0x0994, r10
    calibration[0][3] = 23;    	// real speed measured in mm/s
    6552:	87 e1       	ldi	r24, 0x17	; 23
    6554:	90 e0       	ldi	r25, 0x00	; 0
    6556:	90 93 17 09 	sts	0x0917, r25
    655a:	80 93 16 09 	sts	0x0916, r24
    calibration[1][3] = 46;
    655e:	9e e2       	ldi	r25, 0x2E	; 46
    6560:	49 2e       	mov	r4, r25
    6562:	51 2c       	mov	r5, r1
    6564:	50 92 27 09 	sts	0x0927, r5
    6568:	40 92 26 09 	sts	0x0926, r4
    calibration[2][3] = 64;
    656c:	80 e4       	ldi	r24, 0x40	; 64
    656e:	90 e0       	ldi	r25, 0x00	; 0
    6570:	90 93 37 09 	sts	0x0937, r25
    6574:	80 93 36 09 	sts	0x0936, r24
    calibration[3][3] = 81;
    6578:	81 e5       	ldi	r24, 0x51	; 81
    657a:	68 2e       	mov	r6, r24
    657c:	71 2c       	mov	r7, r1
    657e:	70 92 47 09 	sts	0x0947, r7
    6582:	60 92 46 09 	sts	0x0946, r6
    calibration[4][3] = 97;
    6586:	81 e6       	ldi	r24, 0x61	; 97
    6588:	90 e0       	ldi	r25, 0x00	; 0
    658a:	90 93 57 09 	sts	0x0957, r25
    658e:	80 93 56 09 	sts	0x0956, r24
    calibration[5][3] = 112;
    6592:	80 e7       	ldi	r24, 0x70	; 112
    6594:	90 e0       	ldi	r25, 0x00	; 0
    6596:	90 93 67 09 	sts	0x0967, r25
    659a:	80 93 66 09 	sts	0x0966, r24
    calibration[6][3] = 125;
    659e:	d0 92 77 09 	sts	0x0977, r13
    65a2:	c0 92 76 09 	sts	0x0976, r12
    calibration[7][3] = 139;
    65a6:	f0 92 87 09 	sts	0x0987, r15
    65aa:	e0 92 86 09 	sts	0x0986, r14
	calibration[8][3] = 152;
    65ae:	88 e9       	ldi	r24, 0x98	; 152
    65b0:	90 e0       	ldi	r25, 0x00	; 0
    65b2:	90 93 97 09 	sts	0x0997, r25
    65b6:	80 93 96 09 	sts	0x0996, r24
    // backward left, speed control enabled
    calibration[0][4] = 20;		// measured speed with back EMF (adc 0..1023)
    65ba:	90 92 19 09 	sts	0x0919, r9
    65be:	80 92 18 09 	sts	0x0918, r8
    calibration[1][4] = 39;
    65c2:	70 93 29 09 	sts	0x0929, r23
    65c6:	60 93 28 09 	sts	0x0928, r22
    calibration[2][4] = 60;
    65ca:	10 93 39 09 	sts	0x0939, r17
    65ce:	00 93 38 09 	sts	0x0938, r16
    calibration[3][4] = 79;
    65d2:	8f e4       	ldi	r24, 0x4F	; 79
    65d4:	90 e0       	ldi	r25, 0x00	; 0
    65d6:	90 93 49 09 	sts	0x0949, r25
    65da:	80 93 48 09 	sts	0x0948, r24
    calibration[4][4] = 99;
    65de:	b0 93 59 09 	sts	0x0959, r27
    65e2:	a0 93 58 09 	sts	0x0958, r26
    calibration[5][4] = 120;
    65e6:	d0 93 69 09 	sts	0x0969, r29
    65ea:	c0 93 68 09 	sts	0x0968, r28
    calibration[6][4] = 140;
    65ee:	f0 93 79 09 	sts	0x0979, r31
    65f2:	e0 93 78 09 	sts	0x0978, r30
    calibration[7][4] = 160;
    65f6:	50 93 89 09 	sts	0x0989, r21
    65fa:	40 93 88 09 	sts	0x0988, r20
	calibration[8][4] = 179;
    65fe:	83 eb       	ldi	r24, 0xB3	; 179
    6600:	90 e0       	ldi	r25, 0x00	; 0
    6602:	90 93 99 09 	sts	0x0999, r25
    6606:	80 93 98 09 	sts	0x0998, r24
    calibration[0][5] = 18;    	// real speed measured in mm/s
    660a:	82 e1       	ldi	r24, 0x12	; 18
    660c:	90 e0       	ldi	r25, 0x00	; 0
    660e:	90 93 1b 09 	sts	0x091B, r25
    6612:	80 93 1a 09 	sts	0x091A, r24
    calibration[1][5] = 45;
    6616:	8d e2       	ldi	r24, 0x2D	; 45
    6618:	90 e0       	ldi	r25, 0x00	; 0
    661a:	90 93 2b 09 	sts	0x092B, r25
    661e:	80 93 2a 09 	sts	0x092A, r24
    calibration[2][5] = 68;
    6622:	84 e4       	ldi	r24, 0x44	; 68
    6624:	90 e0       	ldi	r25, 0x00	; 0
    6626:	90 93 3b 09 	sts	0x093B, r25
    662a:	80 93 3a 09 	sts	0x093A, r24
    calibration[3][5] = 87;
    662e:	87 e5       	ldi	r24, 0x57	; 87
    6630:	90 e0       	ldi	r25, 0x00	; 0
    6632:	90 93 4b 09 	sts	0x094B, r25
    6636:	80 93 4a 09 	sts	0x094A, r24
    calibration[4][5] = 105;
    663a:	89 e6       	ldi	r24, 0x69	; 105
    663c:	90 e0       	ldi	r25, 0x00	; 0
    663e:	90 93 5b 09 	sts	0x095B, r25
    6642:	80 93 5a 09 	sts	0x095A, r24
    calibration[5][5] = 119;
    6646:	30 93 6b 09 	sts	0x096B, r19
    664a:	20 93 6a 09 	sts	0x096A, r18
    calibration[6][5] = 137;
    664e:	89 e8       	ldi	r24, 0x89	; 137
    6650:	90 e0       	ldi	r25, 0x00	; 0
    6652:	90 93 7b 09 	sts	0x097B, r25
    6656:	80 93 7a 09 	sts	0x097A, r24
    calibration[7][5] = 151;
    665a:	87 e9       	ldi	r24, 0x97	; 151
    665c:	90 e0       	ldi	r25, 0x00	; 0
    665e:	90 93 8b 09 	sts	0x098B, r25
    6662:	80 93 8a 09 	sts	0x098A, r24
	calibration[8][5] = 168;
    6666:	88 ea       	ldi	r24, 0xA8	; 168
    6668:	90 e0       	ldi	r25, 0x00	; 0
    666a:	90 93 9b 09 	sts	0x099B, r25
    666e:	80 93 9a 09 	sts	0x099A, r24
    // backward right, speed control enabled
    calibration[0][6] = 20;		// measured speed with back EMF (adc 0..1023)
    6672:	90 92 1d 09 	sts	0x091D, r9
    6676:	80 92 1c 09 	sts	0x091C, r8
    calibration[1][6] = 39;
    667a:	70 93 2d 09 	sts	0x092D, r23
    667e:	60 93 2c 09 	sts	0x092C, r22
    calibration[2][6] = 59;
    6682:	8b e3       	ldi	r24, 0x3B	; 59
    6684:	90 e0       	ldi	r25, 0x00	; 0
    6686:	90 93 3d 09 	sts	0x093D, r25
    668a:	80 93 3c 09 	sts	0x093C, r24
    calibration[3][6] = 80;
    668e:	30 92 4d 09 	sts	0x094D, r3
    6692:	20 92 4c 09 	sts	0x094C, r2
    calibration[4][6] = 100;
    6696:	84 e6       	ldi	r24, 0x64	; 100
    6698:	90 e0       	ldi	r25, 0x00	; 0
    669a:	90 93 5d 09 	sts	0x095D, r25
    669e:	80 93 5c 09 	sts	0x095C, r24
    calibration[5][6] = 119;
    66a2:	30 93 6d 09 	sts	0x096D, r19
    66a6:	20 93 6c 09 	sts	0x096C, r18
    calibration[6][6] = 139;
    66aa:	f0 92 7d 09 	sts	0x097D, r15
    66ae:	e0 92 7c 09 	sts	0x097C, r14
    calibration[7][6] = 160;
    66b2:	50 93 8d 09 	sts	0x098D, r21
    66b6:	40 93 8c 09 	sts	0x098C, r20
	calibration[8][6] = 180;
    66ba:	b0 92 9d 09 	sts	0x099D, r11
    66be:	a0 92 9c 09 	sts	0x099C, r10
    calibration[0][7] = 22;    	// real speed measured in mm/s
    66c2:	86 e1       	ldi	r24, 0x16	; 22
    66c4:	90 e0       	ldi	r25, 0x00	; 0
    66c6:	90 93 1f 09 	sts	0x091F, r25
    66ca:	80 93 1e 09 	sts	0x091E, r24
    calibration[1][7] = 46;
    66ce:	50 92 2f 09 	sts	0x092F, r5
    66d2:	40 92 2e 09 	sts	0x092E, r4
    calibration[2][7] = 65;
    66d6:	81 e4       	ldi	r24, 0x41	; 65
    66d8:	90 e0       	ldi	r25, 0x00	; 0
    66da:	90 93 3f 09 	sts	0x093F, r25
    66de:	80 93 3e 09 	sts	0x093E, r24
    calibration[3][7] = 81;
    66e2:	70 92 4f 09 	sts	0x094F, r7
    66e6:	60 92 4e 09 	sts	0x094E, r6
    calibration[4][7] = 96;
    66ea:	80 e6       	ldi	r24, 0x60	; 96
    66ec:	90 e0       	ldi	r25, 0x00	; 0
    66ee:	90 93 5f 09 	sts	0x095F, r25
    66f2:	80 93 5e 09 	sts	0x095E, r24
    calibration[5][7] = 111;
    66f6:	8f e6       	ldi	r24, 0x6F	; 111
    66f8:	90 e0       	ldi	r25, 0x00	; 0
    66fa:	90 93 6f 09 	sts	0x096F, r25
    66fe:	80 93 6e 09 	sts	0x096E, r24
    calibration[6][7] = 125;
    6702:	d0 92 7f 09 	sts	0x097F, r13
    6706:	c0 92 7e 09 	sts	0x097E, r12
    calibration[7][7] = 139;
    670a:	f0 92 8f 09 	sts	0x098F, r15
    670e:	e0 92 8e 09 	sts	0x098E, r14
	calibration[8][7] = 153;
    6712:	89 e9       	ldi	r24, 0x99	; 153
    6714:	90 e0       	ldi	r25, 0x00	; 0
    6716:	90 93 9f 09 	sts	0x099F, r25
    671a:	80 93 9e 09 	sts	0x099E, r24

    writeCalibrationToFlash();
    671e:	0e 94 0a 3f 	call	0x7e14	; 0x7e14 <writeCalibrationToFlash>
        readCalibrationFromFlash();
    } else {
		writeDefaultCalibration();		
    }

}
    6722:	df 91       	pop	r29
    6724:	cf 91       	pop	r28
    6726:	1f 91       	pop	r17
    6728:	0f 91       	pop	r16
    672a:	ff 90       	pop	r15
    672c:	ef 90       	pop	r14
    672e:	df 90       	pop	r13
    6730:	cf 90       	pop	r12
    6732:	bf 90       	pop	r11
    6734:	af 90       	pop	r10
    6736:	9f 90       	pop	r9
    6738:	8f 90       	pop	r8
    673a:	7f 90       	pop	r7
    673c:	6f 90       	pop	r6
    673e:	5f 90       	pop	r5
    6740:	4f 90       	pop	r4
    6742:	3f 90       	pop	r3
    6744:	2f 90       	pop	r2
    6746:	08 95       	ret
    unsigned int temp=0;
 
 	temp = eeprom_read_word((uint16_t*)CALIB_CHECK_ADDRESS);

    if(temp==0xAA55) {   // valid odometry data saved in flash, read them
        readCalibrationFromFlash();
    6748:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <readCalibrationFromFlash>
    674c:	ea cf       	rjmp	.-44     	; 0x6722 <initCalibration+0x346>

0000674e <cliffDetected>:


char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    674e:	80 91 85 02 	lds	r24, 0x0285
    6752:	90 91 86 02 	lds	r25, 0x0286
    6756:	84 5a       	subi	r24, 0xA4	; 164
    6758:	91 40       	sbci	r25, 0x01	; 1
    675a:	b4 f0       	brlt	.+44     	; 0x6788 <cliffDetected+0x3a>
    675c:	80 91 87 02 	lds	r24, 0x0287
    6760:	90 91 88 02 	lds	r25, 0x0288
    6764:	84 5a       	subi	r24, 0xA4	; 164
    6766:	91 40       	sbci	r25, 0x01	; 1
    6768:	7c f0       	brlt	.+30     	; 0x6788 <cliffDetected+0x3a>
    676a:	80 91 89 02 	lds	r24, 0x0289
    676e:	90 91 8a 02 	lds	r25, 0x028A
    6772:	84 5a       	subi	r24, 0xA4	; 164
    6774:	91 40       	sbci	r25, 0x01	; 1
    6776:	44 f0       	brlt	.+16     	; 0x6788 <cliffDetected+0x3a>
    6778:	20 e0       	ldi	r18, 0x00	; 0
    677a:	80 91 8b 02 	lds	r24, 0x028B
    677e:	90 91 8c 02 	lds	r25, 0x028C
    6782:	84 5a       	subi	r24, 0xA4	; 164
    6784:	91 40       	sbci	r25, 0x01	; 1
    6786:	0c f4       	brge	.+2      	; 0x678a <cliffDetected+0x3c>
    6788:	21 e0       	ldi	r18, 0x01	; 1
	} else {
		return 0;
	}


}
    678a:	82 2f       	mov	r24, r18
    678c:	08 95       	ret

0000678e <enableObstacleAvoidance>:

void enableObstacleAvoidance() {
	obstacleAvoidanceEnabled=1;
    678e:	81 e0       	ldi	r24, 0x01	; 1
    6790:	80 93 94 04 	sts	0x0494, r24
}
    6794:	08 95       	ret

00006796 <disableObstacleAvoidance>:

void disableObstacleAvoidance() {
	obstacleAvoidanceEnabled=0;
    6796:	10 92 94 04 	sts	0x0494, r1
}
    679a:	08 95       	ret

0000679c <enableCliffAvoidance>:

void enableCliffAvoidance() {
	cliffAvoidanceEnabled=1;
    679c:	81 e0       	ldi	r24, 0x01	; 1
    679e:	80 93 95 04 	sts	0x0495, r24
}
    67a2:	08 95       	ret

000067a4 <disableCliffAvoidance>:

void disableCliffAvoidance() {
	cliffAvoidanceEnabled=0;
    67a4:	10 92 95 04 	sts	0x0495, r1
}
    67a8:	08 95       	ret

000067aa <obstacleAvoidance>:

	srand(TCNT3);	// initialize random seed (used in obstacle avoidance)

}

void obstacleAvoidance(signed int *pwmLeft, signed int *pwmRight) {
    67aa:	2f 92       	push	r2
    67ac:	3f 92       	push	r3
    67ae:	4f 92       	push	r4
    67b0:	5f 92       	push	r5
    67b2:	6f 92       	push	r6
    67b4:	7f 92       	push	r7
    67b6:	8f 92       	push	r8
    67b8:	9f 92       	push	r9
    67ba:	af 92       	push	r10
    67bc:	bf 92       	push	r11
    67be:	cf 92       	push	r12
    67c0:	df 92       	push	r13
    67c2:	ef 92       	push	r14
    67c4:	ff 92       	push	r15
    67c6:	0f 93       	push	r16
    67c8:	1f 93       	push	r17
    67ca:	df 93       	push	r29
    67cc:	cf 93       	push	r28
    67ce:	00 d0       	rcall	.+0      	; 0x67d0 <obstacleAvoidance+0x26>
    67d0:	00 d0       	rcall	.+0      	; 0x67d2 <obstacleAvoidance+0x28>
    67d2:	cd b7       	in	r28, 0x3d	; 61
    67d4:	de b7       	in	r29, 0x3e	; 62
    67d6:	2c 01       	movw	r4, r24
    67d8:	1b 01       	movw	r2, r22
	//	y	0		0.5		1		0.5		0		-0.5	-1		-0.5

	unsigned int i=0;
	signed int long res=0;
	signed int sumSensorsX=0, sumSensorsY=0;
	signed int desL=*pwmLeft, desR=*pwmRight;
    67da:	fc 01       	movw	r30, r24
    67dc:	01 90       	ld	r0, Z+
    67de:	f0 81       	ld	r31, Z
    67e0:	e0 2d       	mov	r30, r0
    67e2:	fc 83       	std	Y+4, r31	; 0x04
    67e4:	eb 83       	std	Y+3, r30	; 0x03
    67e6:	fb 01       	movw	r30, r22
    67e8:	01 90       	ld	r0, Z+
    67ea:	f0 81       	ld	r31, Z
    67ec:	e0 2d       	mov	r30, r0
    67ee:	fa 83       	std	Y+2, r31	; 0x02
    67f0:	e9 83       	std	Y+1, r30	; 0x01

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    67f2:	80 91 dd 02 	lds	r24, 0x02DD
    67f6:	90 91 de 02 	lds	r25, 0x02DE
    67fa:	05 97       	sbiw	r24, 0x05	; 5
    67fc:	24 f4       	brge	.+8      	; 0x6806 <obstacleAvoidance+0x5c>
			proximityResultLinear[i] = 0;
    67fe:	10 92 de 02 	sts	0x02DE, r1
    6802:	10 92 dd 02 	sts	0x02DD, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    6806:	80 91 df 02 	lds	r24, 0x02DF
    680a:	90 91 e0 02 	lds	r25, 0x02E0
    680e:	05 97       	sbiw	r24, 0x05	; 5
    6810:	24 f4       	brge	.+8      	; 0x681a <obstacleAvoidance+0x70>
			proximityResultLinear[i] = 0;
    6812:	10 92 e0 02 	sts	0x02E0, r1
    6816:	10 92 df 02 	sts	0x02DF, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    681a:	80 91 e1 02 	lds	r24, 0x02E1
    681e:	90 91 e2 02 	lds	r25, 0x02E2
    6822:	05 97       	sbiw	r24, 0x05	; 5
    6824:	24 f4       	brge	.+8      	; 0x682e <obstacleAvoidance+0x84>
			proximityResultLinear[i] = 0;
    6826:	10 92 e2 02 	sts	0x02E2, r1
    682a:	10 92 e1 02 	sts	0x02E1, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    682e:	80 91 e3 02 	lds	r24, 0x02E3
    6832:	90 91 e4 02 	lds	r25, 0x02E4
    6836:	05 97       	sbiw	r24, 0x05	; 5
    6838:	24 f4       	brge	.+8      	; 0x6842 <obstacleAvoidance+0x98>
			proximityResultLinear[i] = 0;
    683a:	10 92 e4 02 	sts	0x02E4, r1
    683e:	10 92 e3 02 	sts	0x02E3, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    6842:	80 91 e5 02 	lds	r24, 0x02E5
    6846:	90 91 e6 02 	lds	r25, 0x02E6
    684a:	05 97       	sbiw	r24, 0x05	; 5
    684c:	24 f4       	brge	.+8      	; 0x6856 <obstacleAvoidance+0xac>
			proximityResultLinear[i] = 0;
    684e:	10 92 e6 02 	sts	0x02E6, r1
    6852:	10 92 e5 02 	sts	0x02E5, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    6856:	80 91 e7 02 	lds	r24, 0x02E7
    685a:	90 91 e8 02 	lds	r25, 0x02E8
    685e:	05 97       	sbiw	r24, 0x05	; 5
    6860:	24 f4       	brge	.+8      	; 0x686a <obstacleAvoidance+0xc0>
			proximityResultLinear[i] = 0;
    6862:	10 92 e8 02 	sts	0x02E8, r1
    6866:	10 92 e7 02 	sts	0x02E7, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    686a:	80 91 e9 02 	lds	r24, 0x02E9
    686e:	90 91 ea 02 	lds	r25, 0x02EA
    6872:	05 97       	sbiw	r24, 0x05	; 5
    6874:	24 f4       	brge	.+8      	; 0x687e <obstacleAvoidance+0xd4>
			proximityResultLinear[i] = 0;
    6876:	10 92 ea 02 	sts	0x02EA, r1
    687a:	10 92 e9 02 	sts	0x02E9, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    687e:	80 91 eb 02 	lds	r24, 0x02EB
    6882:	90 91 ec 02 	lds	r25, 0x02EC
    6886:	05 97       	sbiw	r24, 0x05	; 5
    6888:	24 f4       	brge	.+8      	; 0x6892 <obstacleAvoidance+0xe8>
			proximityResultLinear[i] = 0;
    688a:	10 92 ec 02 	sts	0x02EC, r1
    688e:	10 92 eb 02 	sts	0x02EB, r1
	}

	// sum the contribution of each sensor (based on the previous weights table);
	// give more weight to prox2 and prox6 (side proximities) in order to get more stability in narrow aisles;
	// add some noise to the sum in order to escape from dead-lock positions
	sumSensorsX = -proximityResultLinear[0] - (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) + proximityResultLinear[4] + (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + ((rand()%60)-30);
    6892:	a0 90 dd 02 	lds	r10, 0x02DD
    6896:	b0 90 de 02 	lds	r11, 0x02DE
    689a:	b0 94       	com	r11
    689c:	a1 94       	neg	r10
    689e:	b1 08       	sbc	r11, r1
    68a0:	b3 94       	inc	r11
    68a2:	80 90 df 02 	lds	r8, 0x02DF
    68a6:	90 90 e0 02 	lds	r9, 0x02E0
    68aa:	95 94       	asr	r9
    68ac:	87 94       	ror	r8
    68ae:	c0 90 e3 02 	lds	r12, 0x02E3
    68b2:	d0 90 e4 02 	lds	r13, 0x02E4
    68b6:	d5 94       	asr	r13
    68b8:	c7 94       	ror	r12
    68ba:	20 91 e5 02 	lds	r18, 0x02E5
    68be:	30 91 e6 02 	lds	r19, 0x02E6
    68c2:	3e 83       	std	Y+6, r19	; 0x06
    68c4:	2d 83       	std	Y+5, r18	; 0x05
    68c6:	00 91 e7 02 	lds	r16, 0x02E7
    68ca:	10 91 e8 02 	lds	r17, 0x02E8
    68ce:	15 95       	asr	r17
    68d0:	07 95       	ror	r16
    68d2:	e0 90 eb 02 	lds	r14, 0x02EB
    68d6:	f0 90 ec 02 	lds	r15, 0x02EC
    68da:	f5 94       	asr	r15
    68dc:	e7 94       	ror	r14
    68de:	0e 94 67 58 	call	0xb0ce	; 0xb0ce <rand>
    68e2:	ed 81       	ldd	r30, Y+5	; 0x05
    68e4:	fe 81       	ldd	r31, Y+6	; 0x06
    68e6:	7e 97       	sbiw	r30, 0x1e	; 30
    68e8:	ea 0d       	add	r30, r10
    68ea:	fb 1d       	adc	r31, r11
    68ec:	ec 0d       	add	r30, r12
    68ee:	fd 1d       	adc	r31, r13
    68f0:	e0 0f       	add	r30, r16
    68f2:	f1 1f       	adc	r31, r17
    68f4:	e8 19       	sub	r30, r8
    68f6:	f9 09       	sbc	r31, r9
    68f8:	ee 19       	sub	r30, r14
    68fa:	ff 09       	sbc	r31, r15
    68fc:	6c e3       	ldi	r22, 0x3C	; 60
    68fe:	70 e0       	ldi	r23, 0x00	; 0
    6900:	0e 94 bc 57 	call	0xaf78	; 0xaf78 <__divmodhi4>
    6904:	e8 0f       	add	r30, r24
    6906:	f9 1f       	adc	r31, r25
    6908:	fe 83       	std	Y+6, r31	; 0x06
    690a:	ed 83       	std	Y+5, r30	; 0x05
	//sumSensorsX = -proximityResultLinear[0]  + proximityResultLinear[4];	
	sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[2]>>2) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[6]>>2) - (proximityResultLinear[7]>>1)+ ((rand()%60)-30);
    690c:	60 90 df 02 	lds	r6, 0x02DF
    6910:	70 90 e0 02 	lds	r7, 0x02E0
    6914:	75 94       	asr	r7
    6916:	67 94       	ror	r6
    6918:	c0 90 e1 02 	lds	r12, 0x02E1
    691c:	d0 90 e2 02 	lds	r13, 0x02E2
    6920:	d5 94       	asr	r13
    6922:	c7 94       	ror	r12
    6924:	d5 94       	asr	r13
    6926:	c7 94       	ror	r12
    6928:	a0 90 e3 02 	lds	r10, 0x02E3
    692c:	b0 90 e4 02 	lds	r11, 0x02E4
    6930:	b5 94       	asr	r11
    6932:	a7 94       	ror	r10
    6934:	80 90 e7 02 	lds	r8, 0x02E7
    6938:	90 90 e8 02 	lds	r9, 0x02E8
    693c:	95 94       	asr	r9
    693e:	87 94       	ror	r8
    6940:	00 91 e9 02 	lds	r16, 0x02E9
    6944:	10 91 ea 02 	lds	r17, 0x02EA
    6948:	15 95       	asr	r17
    694a:	07 95       	ror	r16
    694c:	15 95       	asr	r17
    694e:	07 95       	ror	r16
    6950:	e0 90 eb 02 	lds	r14, 0x02EB
    6954:	f0 90 ec 02 	lds	r15, 0x02EC
    6958:	f5 94       	asr	r15
    695a:	e7 94       	ror	r14
    695c:	0e 94 67 58 	call	0xb0ce	; 0xb0ce <rand>
    6960:	93 01       	movw	r18, r6
    6962:	2c 0d       	add	r18, r12
    6964:	3d 1d       	adc	r19, r13
    6966:	2e 51       	subi	r18, 0x1E	; 30
    6968:	30 40       	sbci	r19, 0x00	; 0
    696a:	2a 0d       	add	r18, r10
    696c:	3b 1d       	adc	r19, r11
    696e:	20 1b       	sub	r18, r16
    6970:	31 0b       	sbc	r19, r17
    6972:	28 19       	sub	r18, r8
    6974:	39 09       	sbc	r19, r9
    6976:	2e 19       	sub	r18, r14
    6978:	3f 09       	sbc	r19, r15
    697a:	6c e3       	ldi	r22, 0x3C	; 60
    697c:	70 e0       	ldi	r23, 0x00	; 0
    697e:	0e 94 bc 57 	call	0xaf78	; 0xaf78 <__divmodhi4>
    6982:	28 0f       	add	r18, r24
    6984:	39 1f       	adc	r19, r25
	//sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + (rand()%30);

	// modify the velocity components based on sensor values
	if(desL >= 0) {
    6986:	8b 81       	ldd	r24, Y+3	; 0x03
    6988:	9c 81       	ldd	r25, Y+4	; 0x04
    698a:	97 fd       	sbrc	r25, 7
    698c:	db c0       	rjmp	.+438    	; 0x6b44 <obstacleAvoidance+0x39a>
		res = (signed long int)desL + (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
    698e:	7c 01       	movw	r14, r24
    6990:	00 27       	eor	r16, r16
    6992:	f7 fc       	sbrc	r15, 7
    6994:	00 95       	com	r16
    6996:	10 2f       	mov	r17, r16
    6998:	ed 81       	ldd	r30, Y+5	; 0x05
    699a:	fe 81       	ldd	r31, Y+6	; 0x06
    699c:	3f 01       	movw	r6, r30
    699e:	88 24       	eor	r8, r8
    69a0:	77 fc       	sbrc	r7, 7
    69a2:	80 94       	com	r8
    69a4:	98 2c       	mov	r9, r8
    69a6:	59 01       	movw	r10, r18
    69a8:	cc 24       	eor	r12, r12
    69aa:	b7 fc       	sbrc	r11, 7
    69ac:	c0 94       	com	r12
    69ae:	dc 2c       	mov	r13, r12
		*pwmLeft = (signed int)res;
    69b0:	c4 01       	movw	r24, r8
    69b2:	b3 01       	movw	r22, r6
    69b4:	6a 19       	sub	r22, r10
    69b6:	7b 09       	sbc	r23, r11
    69b8:	8c 09       	sbc	r24, r12
    69ba:	9d 09       	sbc	r25, r13
    69bc:	a8 01       	movw	r20, r16
    69be:	97 01       	movw	r18, r14
    69c0:	0e 94 89 57 	call	0xaf12	; 0xaf12 <__mulsi3>
    69c4:	56 e0       	ldi	r21, 0x06	; 6
    69c6:	95 95       	asr	r25
    69c8:	87 95       	ror	r24
    69ca:	77 95       	ror	r23
    69cc:	67 95       	ror	r22
    69ce:	5a 95       	dec	r21
    69d0:	d1 f7       	brne	.-12     	; 0x69c6 <obstacleAvoidance+0x21c>
    69d2:	e6 0e       	add	r14, r22
    69d4:	f7 1e       	adc	r15, r23
    69d6:	08 1f       	adc	r16, r24
    69d8:	19 1f       	adc	r17, r25
    69da:	f2 01       	movw	r30, r4
    69dc:	f1 82       	std	Z+1, r15	; 0x01
    69de:	e0 82       	st	Z, r14
	} else {
		res = (signed long int)desL - (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
		*pwmLeft = (signed int)res;
	}
	if(desR >=0) {
    69e0:	29 81       	ldd	r18, Y+1	; 0x01
    69e2:	3a 81       	ldd	r19, Y+2	; 0x02
    69e4:	37 fd       	sbrc	r19, 7
    69e6:	8f c0       	rjmp	.+286    	; 0x6b06 <obstacleAvoidance+0x35c>
		res = (signed long int)desR + (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
    69e8:	79 01       	movw	r14, r18
    69ea:	00 27       	eor	r16, r16
    69ec:	f7 fc       	sbrc	r15, 7
    69ee:	00 95       	com	r16
    69f0:	10 2f       	mov	r17, r16
		*pwmRight = (signed int)res;
    69f2:	a6 0c       	add	r10, r6
    69f4:	b7 1c       	adc	r11, r7
    69f6:	c8 1c       	adc	r12, r8
    69f8:	d9 1c       	adc	r13, r9
    69fa:	c6 01       	movw	r24, r12
    69fc:	b5 01       	movw	r22, r10
    69fe:	a8 01       	movw	r20, r16
    6a00:	97 01       	movw	r18, r14
    6a02:	0e 94 89 57 	call	0xaf12	; 0xaf12 <__mulsi3>
    6a06:	36 e0       	ldi	r19, 0x06	; 6
    6a08:	95 95       	asr	r25
    6a0a:	87 95       	ror	r24
    6a0c:	77 95       	ror	r23
    6a0e:	67 95       	ror	r22
    6a10:	3a 95       	dec	r19
    6a12:	d1 f7       	brne	.-12     	; 0x6a08 <obstacleAvoidance+0x25e>
    6a14:	6e 0d       	add	r22, r14
    6a16:	7f 1d       	adc	r23, r15
    6a18:	80 1f       	adc	r24, r16
    6a1a:	91 1f       	adc	r25, r17
    6a1c:	ab 01       	movw	r20, r22
    6a1e:	f1 01       	movw	r30, r2
    6a20:	71 83       	std	Z+1, r23	; 0x01
    6a22:	60 83       	st	Z, r22
	} else {
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	}

	if(currentSelector == 10) {	// force a little bit the upwards direction in vertical motion
    6a24:	80 91 70 04 	lds	r24, 0x0470
    6a28:	8a 30       	cpi	r24, 0x0A	; 10
    6a2a:	09 f4       	brne	.+2      	; 0x6a2e <obstacleAvoidance+0x284>
    6a2c:	48 c0       	rjmp	.+144    	; 0x6abe <obstacleAvoidance+0x314>
			}
		}
	}

	// force the values to be in the pwm maximum range
	if (*pwmRight>(MAX_MOTORS_PWM/2)) *pwmRight=(MAX_MOTORS_PWM/2);
    6a2e:	f2 e0       	ldi	r31, 0x02	; 2
    6a30:	40 30       	cpi	r20, 0x00	; 0
    6a32:	5f 07       	cpc	r21, r31
    6a34:	3c f0       	brlt	.+14     	; 0x6a44 <obstacleAvoidance+0x29a>
    6a36:	8f ef       	ldi	r24, 0xFF	; 255
    6a38:	91 e0       	ldi	r25, 0x01	; 1
    6a3a:	f1 01       	movw	r30, r2
    6a3c:	91 83       	std	Z+1, r25	; 0x01
    6a3e:	80 83       	st	Z, r24
    6a40:	4f ef       	ldi	r20, 0xFF	; 255
    6a42:	51 e0       	ldi	r21, 0x01	; 1
	if (*pwmLeft>(MAX_MOTORS_PWM/2)) *pwmLeft=(MAX_MOTORS_PWM/2);
    6a44:	f2 01       	movw	r30, r4
    6a46:	20 81       	ld	r18, Z
    6a48:	31 81       	ldd	r19, Z+1	; 0x01
    6a4a:	f2 e0       	ldi	r31, 0x02	; 2
    6a4c:	20 30       	cpi	r18, 0x00	; 0
    6a4e:	3f 07       	cpc	r19, r31
    6a50:	54 f0       	brlt	.+20     	; 0x6a66 <obstacleAvoidance+0x2bc>
    6a52:	8f ef       	ldi	r24, 0xFF	; 255
    6a54:	91 e0       	ldi	r25, 0x01	; 1
    6a56:	f2 01       	movw	r30, r4
    6a58:	91 83       	std	Z+1, r25	; 0x01
    6a5a:	80 83       	st	Z, r24
    6a5c:	f1 01       	movw	r30, r2
    6a5e:	40 81       	ld	r20, Z
    6a60:	51 81       	ldd	r21, Z+1	; 0x01
    6a62:	2f ef       	ldi	r18, 0xFF	; 255
    6a64:	31 e0       	ldi	r19, 0x01	; 1
	if (*pwmRight<-(MAX_MOTORS_PWM/2)) *pwmRight=-(MAX_MOTORS_PWM/2);
    6a66:	41 50       	subi	r20, 0x01	; 1
    6a68:	5e 4f       	sbci	r21, 0xFE	; 254
    6a6a:	44 f4       	brge	.+16     	; 0x6a7c <obstacleAvoidance+0x2d2>
    6a6c:	81 e0       	ldi	r24, 0x01	; 1
    6a6e:	9e ef       	ldi	r25, 0xFE	; 254
    6a70:	f1 01       	movw	r30, r2
    6a72:	91 83       	std	Z+1, r25	; 0x01
    6a74:	80 83       	st	Z, r24
    6a76:	f2 01       	movw	r30, r4
    6a78:	20 81       	ld	r18, Z
    6a7a:	31 81       	ldd	r19, Z+1	; 0x01
	if (*pwmLeft<-(MAX_MOTORS_PWM/2)) *pwmLeft=-(MAX_MOTORS_PWM/2);
    6a7c:	21 50       	subi	r18, 0x01	; 1
    6a7e:	3e 4f       	sbci	r19, 0xFE	; 254
    6a80:	2c f4       	brge	.+10     	; 0x6a8c <obstacleAvoidance+0x2e2>
    6a82:	81 e0       	ldi	r24, 0x01	; 1
    6a84:	9e ef       	ldi	r25, 0xFE	; 254
    6a86:	f2 01       	movw	r30, r4
    6a88:	91 83       	std	Z+1, r25	; 0x01
    6a8a:	80 83       	st	Z, r24

}
    6a8c:	26 96       	adiw	r28, 0x06	; 6
    6a8e:	0f b6       	in	r0, 0x3f	; 63
    6a90:	f8 94       	cli
    6a92:	de bf       	out	0x3e, r29	; 62
    6a94:	0f be       	out	0x3f, r0	; 63
    6a96:	cd bf       	out	0x3d, r28	; 61
    6a98:	cf 91       	pop	r28
    6a9a:	df 91       	pop	r29
    6a9c:	1f 91       	pop	r17
    6a9e:	0f 91       	pop	r16
    6aa0:	ff 90       	pop	r15
    6aa2:	ef 90       	pop	r14
    6aa4:	df 90       	pop	r13
    6aa6:	cf 90       	pop	r12
    6aa8:	bf 90       	pop	r11
    6aaa:	af 90       	pop	r10
    6aac:	9f 90       	pop	r9
    6aae:	8f 90       	pop	r8
    6ab0:	7f 90       	pop	r7
    6ab2:	6f 90       	pop	r6
    6ab4:	5f 90       	pop	r5
    6ab6:	4f 90       	pop	r4
    6ab8:	3f 90       	pop	r3
    6aba:	2f 90       	pop	r2
    6abc:	08 95       	ret
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	}

	if(currentSelector == 10) {	// force a little bit the upwards direction in vertical motion
		if(desL!=0 && desR!=0) {
    6abe:	2b 81       	ldd	r18, Y+3	; 0x03
    6ac0:	3c 81       	ldd	r19, Y+4	; 0x04
    6ac2:	23 2b       	or	r18, r19
    6ac4:	e1 f0       	breq	.+56     	; 0x6afe <obstacleAvoidance+0x354>
    6ac6:	29 81       	ldd	r18, Y+1	; 0x01
    6ac8:	3a 81       	ldd	r19, Y+2	; 0x02
    6aca:	23 2b       	or	r18, r19
    6acc:	c1 f0       	breq	.+48     	; 0x6afe <obstacleAvoidance+0x354>
			if(currentAngle<270 && currentAngle>90) {
    6ace:	80 91 62 04 	lds	r24, 0x0462
    6ad2:	90 91 63 04 	lds	r25, 0x0463
    6ad6:	8b 55       	subi	r24, 0x5B	; 91
    6ad8:	90 40       	sbci	r25, 0x00	; 0
    6ada:	83 3b       	cpi	r24, 0xB3	; 179
    6adc:	91 05       	cpc	r25, r1
    6ade:	08 f0       	brcs	.+2      	; 0x6ae2 <obstacleAvoidance+0x338>
    6ae0:	5b c0       	rjmp	.+182    	; 0x6b98 <obstacleAvoidance+0x3ee>
				*pwmLeft += 10;
    6ae2:	f2 01       	movw	r30, r4
    6ae4:	80 81       	ld	r24, Z
    6ae6:	91 81       	ldd	r25, Z+1	; 0x01
    6ae8:	0a 96       	adiw	r24, 0x0a	; 10
    6aea:	91 83       	std	Z+1, r25	; 0x01
    6aec:	80 83       	st	Z, r24
				*pwmRight -= 10;
    6aee:	f1 01       	movw	r30, r2
    6af0:	40 81       	ld	r20, Z
    6af2:	51 81       	ldd	r21, Z+1	; 0x01
    6af4:	4a 50       	subi	r20, 0x0A	; 10
    6af6:	50 40       	sbci	r21, 0x00	; 0
    6af8:	51 83       	std	Z+1, r21	; 0x01
    6afa:	40 83       	st	Z, r20
    6afc:	98 cf       	rjmp	.-208    	; 0x6a2e <obstacleAvoidance+0x284>
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	}

	if(currentSelector == 10) {	// force a little bit the upwards direction in vertical motion
		if(desL!=0 && desR!=0) {
    6afe:	f1 01       	movw	r30, r2
    6b00:	40 81       	ld	r20, Z
    6b02:	51 81       	ldd	r21, Z+1	; 0x01
    6b04:	94 cf       	rjmp	.-216    	; 0x6a2e <obstacleAvoidance+0x284>
	}
	if(desR >=0) {
		res = (signed long int)desR + (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	} else {
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
    6b06:	79 01       	movw	r14, r18
    6b08:	00 27       	eor	r16, r16
    6b0a:	f7 fc       	sbrc	r15, 7
    6b0c:	00 95       	com	r16
    6b0e:	10 2f       	mov	r17, r16
		*pwmRight = (signed int)res;
    6b10:	6a 18       	sub	r6, r10
    6b12:	7b 08       	sbc	r7, r11
    6b14:	8c 08       	sbc	r8, r12
    6b16:	9d 08       	sbc	r9, r13
    6b18:	c4 01       	movw	r24, r8
    6b1a:	b3 01       	movw	r22, r6
    6b1c:	a8 01       	movw	r20, r16
    6b1e:	97 01       	movw	r18, r14
    6b20:	0e 94 89 57 	call	0xaf12	; 0xaf12 <__mulsi3>
    6b24:	26 e0       	ldi	r18, 0x06	; 6
    6b26:	95 95       	asr	r25
    6b28:	87 95       	ror	r24
    6b2a:	77 95       	ror	r23
    6b2c:	67 95       	ror	r22
    6b2e:	2a 95       	dec	r18
    6b30:	d1 f7       	brne	.-12     	; 0x6b26 <obstacleAvoidance+0x37c>
    6b32:	e6 1a       	sub	r14, r22
    6b34:	f7 0a       	sbc	r15, r23
    6b36:	08 0b       	sbc	r16, r24
    6b38:	19 0b       	sbc	r17, r25
    6b3a:	a7 01       	movw	r20, r14
    6b3c:	f1 01       	movw	r30, r2
    6b3e:	f1 82       	std	Z+1, r15	; 0x01
    6b40:	e0 82       	st	Z, r14
    6b42:	70 cf       	rjmp	.-288    	; 0x6a24 <obstacleAvoidance+0x27a>
	// modify the velocity components based on sensor values
	if(desL >= 0) {
		res = (signed long int)desL + (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmLeft = (signed int)res;
	} else {
		res = (signed long int)desL - (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
    6b44:	7c 01       	movw	r14, r24
    6b46:	00 27       	eor	r16, r16
    6b48:	f7 fc       	sbrc	r15, 7
    6b4a:	00 95       	com	r16
    6b4c:	10 2f       	mov	r17, r16
    6b4e:	ed 81       	ldd	r30, Y+5	; 0x05
    6b50:	fe 81       	ldd	r31, Y+6	; 0x06
    6b52:	3f 01       	movw	r6, r30
    6b54:	88 24       	eor	r8, r8
    6b56:	77 fc       	sbrc	r7, 7
    6b58:	80 94       	com	r8
    6b5a:	98 2c       	mov	r9, r8
    6b5c:	59 01       	movw	r10, r18
    6b5e:	cc 24       	eor	r12, r12
    6b60:	b7 fc       	sbrc	r11, 7
    6b62:	c0 94       	com	r12
    6b64:	dc 2c       	mov	r13, r12
		*pwmLeft = (signed int)res;
    6b66:	c6 01       	movw	r24, r12
    6b68:	b5 01       	movw	r22, r10
    6b6a:	66 0d       	add	r22, r6
    6b6c:	77 1d       	adc	r23, r7
    6b6e:	88 1d       	adc	r24, r8
    6b70:	99 1d       	adc	r25, r9
    6b72:	a8 01       	movw	r20, r16
    6b74:	97 01       	movw	r18, r14
    6b76:	0e 94 89 57 	call	0xaf12	; 0xaf12 <__mulsi3>
    6b7a:	46 e0       	ldi	r20, 0x06	; 6
    6b7c:	95 95       	asr	r25
    6b7e:	87 95       	ror	r24
    6b80:	77 95       	ror	r23
    6b82:	67 95       	ror	r22
    6b84:	4a 95       	dec	r20
    6b86:	d1 f7       	brne	.-12     	; 0x6b7c <obstacleAvoidance+0x3d2>
    6b88:	e6 1a       	sub	r14, r22
    6b8a:	f7 0a       	sbc	r15, r23
    6b8c:	08 0b       	sbc	r16, r24
    6b8e:	19 0b       	sbc	r17, r25
    6b90:	f2 01       	movw	r30, r4
    6b92:	f1 82       	std	Z+1, r15	; 0x01
    6b94:	e0 82       	st	Z, r14
    6b96:	24 cf       	rjmp	.-440    	; 0x69e0 <obstacleAvoidance+0x236>
		if(desL!=0 && desR!=0) {
			if(currentAngle<270 && currentAngle>90) {
				*pwmLeft += 10;
				*pwmRight -= 10;
			} else {
				*pwmLeft -= 10;
    6b98:	f2 01       	movw	r30, r4
    6b9a:	80 81       	ld	r24, Z
    6b9c:	91 81       	ldd	r25, Z+1	; 0x01
    6b9e:	0a 97       	sbiw	r24, 0x0a	; 10
    6ba0:	91 83       	std	Z+1, r25	; 0x01
    6ba2:	80 83       	st	Z, r24
				*pwmRight += 10;
    6ba4:	f1 01       	movw	r30, r2
    6ba6:	40 81       	ld	r20, Z
    6ba8:	51 81       	ldd	r21, Z+1	; 0x01
    6baa:	46 5f       	subi	r20, 0xF6	; 246
    6bac:	5f 4f       	sbci	r21, 0xFF	; 255
    6bae:	51 83       	std	Z+1, r21	; 0x01
    6bb0:	40 83       	st	Z, r20
    6bb2:	3d cf       	rjmp	.-390    	; 0x6a2e <obstacleAvoidance+0x284>

00006bb4 <initBehaviors>:

#include "behaviors.h"

void initBehaviors() {

	srand(TCNT3);	// initialize random seed (used in obstacle avoidance)
    6bb4:	80 91 94 00 	lds	r24, 0x0094
    6bb8:	90 91 95 00 	lds	r25, 0x0095
    6bbc:	0e 94 6c 58 	call	0xb0d8	; 0xb0d8 <srand>

}
    6bc0:	08 95       	ret

00006bc2 <initRGBleds>:
	// Period freq = Fosc/TOP (max timer value) => TOP = Fosc/period freq
	// We need a frequency of about 30 KHz => 8000000/30000 = 266
	// The waveform generation mode let us chose the TOP value to be 256
	// thus we get period freq = 8000000/256 = 31250 Hz

	TCCR1A = 0;
    6bc2:	e0 e8       	ldi	r30, 0x80	; 128
    6bc4:	f0 e0       	ldi	r31, 0x00	; 0
    6bc6:	10 82       	st	Z, r1
	TCCR1B = 0;
    6bc8:	a1 e8       	ldi	r26, 0x81	; 129
    6bca:	b0 e0       	ldi	r27, 0x00	; 0
    6bcc:	1c 92       	st	X, r1

	// enable OCA, OCB, OCC; clear on match, set at bottom
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << COM1C1) | (1 << WGM10); 	
    6bce:	80 81       	ld	r24, Z
    6bd0:	89 6a       	ori	r24, 0xA9	; 169
    6bd2:	80 83       	st	Z, r24
	// mode 5 => fast-pwm 8 bit; no prescaler
	TCCR1B |= (1 << WGM12) | (1 << CS10);										
    6bd4:	8c 91       	ld	r24, X
    6bd6:	89 60       	ori	r24, 0x09	; 9
    6bd8:	8c 93       	st	X, r24
	// the values for the leds pwm goes from 0 (max power on) to 255 (off)
	OCR1A = pwm_red;
    6bda:	80 91 08 02 	lds	r24, 0x0208
    6bde:	90 e0       	ldi	r25, 0x00	; 0
    6be0:	90 93 89 00 	sts	0x0089, r25
    6be4:	80 93 88 00 	sts	0x0088, r24
	OCR1B = pwm_green;
    6be8:	80 91 09 02 	lds	r24, 0x0209
    6bec:	90 e0       	ldi	r25, 0x00	; 0
    6bee:	90 93 8b 00 	sts	0x008B, r25
    6bf2:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = pwm_blue;
    6bf6:	80 91 0a 02 	lds	r24, 0x020A
    6bfa:	90 e0       	ldi	r25, 0x00	; 0
    6bfc:	90 93 8d 00 	sts	0x008D, r25
    6c00:	80 93 8c 00 	sts	0x008C, r24

}
    6c04:	08 95       	ret

00006c06 <toggleBlueLed>:

void toggleBlueLed() {

	blinkState = 1 - blinkState;
    6c06:	81 e0       	ldi	r24, 0x01	; 1
    6c08:	90 91 37 03 	lds	r25, 0x0337
    6c0c:	89 1b       	sub	r24, r25
    6c0e:	80 93 37 03 	sts	0x0337, r24

	if(blinkState) {
    6c12:	88 23       	and	r24, r24
    6c14:	39 f4       	brne	.+14     	; 0x6c24 <toggleBlueLed+0x1e>
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
		OCR1C = 255;
	} else {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC to get the maximum output power; this is due to the fact 
    6c16:	80 91 80 00 	lds	r24, 0x0080
    6c1a:	87 7f       	andi	r24, 0xF7	; 247
    6c1c:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// that the minimum duty cycle when the output compare is enable is 1 
    6c20:	2f 98       	cbi	0x05, 7	; 5
    6c22:	08 95       	ret
void toggleBlueLed() {

	blinkState = 1 - blinkState;

	if(blinkState) {
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
    6c24:	80 91 80 00 	lds	r24, 0x0080
    6c28:	88 60       	ori	r24, 0x08	; 8
    6c2a:	80 93 80 00 	sts	0x0080, r24
		OCR1C = 255;
    6c2e:	8f ef       	ldi	r24, 0xFF	; 255
    6c30:	90 e0       	ldi	r25, 0x00	; 0
    6c32:	90 93 8d 00 	sts	0x008D, r25
    6c36:	80 93 8c 00 	sts	0x008C, r24
    6c3a:	08 95       	ret

00006c3c <updateRedLed>:
									// the pin is configured accordingly (low state).
	}

}

void updateRedLed(unsigned char value) {
    6c3c:	98 2f       	mov	r25, r24

	if(value == 0) {
    6c3e:	88 23       	and	r24, r24
    6c40:	61 f0       	breq	.+24     	; 0x6c5a <updateRedLed+0x1e>
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1A1);	// always enable OCA in case it was disabled
    6c42:	80 91 80 00 	lds	r24, 0x0080
    6c46:	80 68       	ori	r24, 0x80	; 128
    6c48:	80 93 80 00 	sts	0x0080, r24
		OCR1A = value;
    6c4c:	89 2f       	mov	r24, r25
    6c4e:	90 e0       	ldi	r25, 0x00	; 0
    6c50:	90 93 89 00 	sts	0x0089, r25
    6c54:	80 93 88 00 	sts	0x0088, r24
    6c58:	08 95       	ret
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
    6c5a:	80 91 80 00 	lds	r24, 0x0080
    6c5e:	8f 77       	andi	r24, 0x7F	; 127
    6c60:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
    6c64:	2d 98       	cbi	0x05, 5	; 5
    6c66:	08 95       	ret

00006c68 <updateGreenLed>:
		OCR1A = value;
	}

}

void updateGreenLed(unsigned char value) {
    6c68:	98 2f       	mov	r25, r24

	if(value == 0) {
    6c6a:	88 23       	and	r24, r24
    6c6c:	61 f0       	breq	.+24     	; 0x6c86 <updateGreenLed+0x1e>
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
	} else {	
		TCCR1A |= (1 << COM1B1);	// always enable OCA in case it was disabled
    6c6e:	80 91 80 00 	lds	r24, 0x0080
    6c72:	80 62       	ori	r24, 0x20	; 32
    6c74:	80 93 80 00 	sts	0x0080, r24
		OCR1B = value;
    6c78:	89 2f       	mov	r24, r25
    6c7a:	90 e0       	ldi	r25, 0x00	; 0
    6c7c:	90 93 8b 00 	sts	0x008B, r25
    6c80:	80 93 8a 00 	sts	0x008A, r24
    6c84:	08 95       	ret
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
    6c86:	80 91 80 00 	lds	r24, 0x0080
    6c8a:	8f 7d       	andi	r24, 0xDF	; 223
    6c8c:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
    6c90:	2e 98       	cbi	0x05, 6	; 5
    6c92:	08 95       	ret

00006c94 <updateBlueLed>:
		OCR1B = value;
	}

}

void updateBlueLed(unsigned char value) {
    6c94:	98 2f       	mov	r25, r24

	if(value == 0) {
    6c96:	88 23       	and	r24, r24
    6c98:	61 f0       	breq	.+24     	; 0x6cb2 <updateBlueLed+0x1e>
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1C1);	// always enable OCA in case it was disabled
    6c9a:	80 91 80 00 	lds	r24, 0x0080
    6c9e:	88 60       	ori	r24, 0x08	; 8
    6ca0:	80 93 80 00 	sts	0x0080, r24
		OCR1C = value;
    6ca4:	89 2f       	mov	r24, r25
    6ca6:	90 e0       	ldi	r25, 0x00	; 0
    6ca8:	90 93 8d 00 	sts	0x008D, r25
    6cac:	80 93 8c 00 	sts	0x008C, r24
    6cb0:	08 95       	ret
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
    6cb2:	80 91 80 00 	lds	r24, 0x0080
    6cb6:	87 7f       	andi	r24, 0xF7	; 247
    6cb8:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
    6cbc:	2f 98       	cbi	0x05, 7	; 5
    6cbe:	08 95       	ret

00006cc0 <setGreenLed>:

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    6cc0:	83 30       	cpi	r24, 0x03	; 3
    6cc2:	09 f4       	brne	.+2      	; 0x6cc6 <setGreenLed+0x6>
    6cc4:	5a c0       	rjmp	.+180    	; 0x6d7a <setGreenLed+0xba>
    6cc6:	84 30       	cpi	r24, 0x04	; 4
    6cc8:	80 f0       	brcs	.+32     	; 0x6cea <setGreenLed+0x2a>
    6cca:	85 30       	cpi	r24, 0x05	; 5
    6ccc:	09 f4       	brne	.+2      	; 0x6cd0 <setGreenLed+0x10>
    6cce:	41 c0       	rjmp	.+130    	; 0x6d52 <setGreenLed+0x92>
    6cd0:	85 30       	cpi	r24, 0x05	; 5
    6cd2:	d0 f4       	brcc	.+52     	; 0x6d08 <setGreenLed+0x48>
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
    6cd4:	66 23       	and	r22, r22
    6cd6:	09 f4       	brne	.+2      	; 0x6cda <setGreenLed+0x1a>
    6cd8:	68 c0       	rjmp	.+208    	; 0x6daa <setGreenLed+0xea>
    6cda:	80 91 0b 01 	lds	r24, 0x010B
    6cde:	8f 7e       	andi	r24, 0xEF	; 239
    6ce0:	80 93 0b 01 	sts	0x010B, r24
    6ce4:	80 91 0b 01 	lds	r24, 0x010B
    6ce8:	08 95       	ret

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    6cea:	81 30       	cpi	r24, 0x01	; 1
    6cec:	e1 f1       	breq	.+120    	; 0x6d66 <setGreenLed+0xa6>
    6cee:	82 30       	cpi	r24, 0x02	; 2
    6cf0:	80 f0       	brcs	.+32     	; 0x6d12 <setGreenLed+0x52>
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
    6cf2:	66 23       	and	r22, r22
    6cf4:	09 f4       	brne	.+2      	; 0x6cf8 <setGreenLed+0x38>
    6cf6:	46 c0       	rjmp	.+140    	; 0x6d84 <setGreenLed+0xc4>
    6cf8:	80 91 0b 01 	lds	r24, 0x010B
    6cfc:	8b 7f       	andi	r24, 0xFB	; 251
    6cfe:	80 93 0b 01 	sts	0x010B, r24
    6d02:	80 91 0b 01 	lds	r24, 0x010B
    6d06:	08 95       	ret

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    6d08:	86 30       	cpi	r24, 0x06	; 6
    6d0a:	c9 f0       	breq	.+50     	; 0x6d3e <setGreenLed+0x7e>
    6d0c:	87 30       	cpi	r24, 0x07	; 7
    6d0e:	61 f0       	breq	.+24     	; 0x6d28 <setGreenLed+0x68>
    6d10:	08 95       	ret

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
    6d12:	66 23       	and	r22, r22
    6d14:	09 f4       	brne	.+2      	; 0x6d18 <setGreenLed+0x58>
    6d16:	51 c0       	rjmp	.+162    	; 0x6dba <setGreenLed+0xfa>
    6d18:	80 91 0b 01 	lds	r24, 0x010B
    6d1c:	8e 7f       	andi	r24, 0xFE	; 254
    6d1e:	80 93 0b 01 	sts	0x010B, r24
    6d22:	80 91 0b 01 	lds	r24, 0x010B
    6d26:	08 95       	ret
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
				break;

		case 7:	isOn?GREEN_LED7_ON:GREEN_LED7_OFF;
    6d28:	66 23       	and	r22, r22
    6d2a:	09 f0       	breq	.+2      	; 0x6d2e <setGreenLed+0x6e>
    6d2c:	5e c0       	rjmp	.+188    	; 0x6dea <setGreenLed+0x12a>
    6d2e:	80 91 0b 01 	lds	r24, 0x010B
    6d32:	80 68       	ori	r24, 0x80	; 128
    6d34:	80 93 0b 01 	sts	0x010B, r24
    6d38:	80 91 0b 01 	lds	r24, 0x010B
    6d3c:	08 95       	ret
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
    6d3e:	66 23       	and	r22, r22
    6d40:	49 f1       	breq	.+82     	; 0x6d94 <setGreenLed+0xd4>
    6d42:	80 91 0b 01 	lds	r24, 0x010B
    6d46:	8f 7b       	andi	r24, 0xBF	; 191
    6d48:	80 93 0b 01 	sts	0x010B, r24
    6d4c:	80 91 0b 01 	lds	r24, 0x010B
    6d50:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
    6d52:	66 23       	and	r22, r22
    6d54:	d1 f1       	breq	.+116    	; 0x6dca <setGreenLed+0x10a>
    6d56:	80 91 0b 01 	lds	r24, 0x010B
    6d5a:	8f 7d       	andi	r24, 0xDF	; 223
    6d5c:	80 93 0b 01 	sts	0x010B, r24
    6d60:	80 91 0b 01 	lds	r24, 0x010B
    6d64:	08 95       	ret
	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
    6d66:	66 23       	and	r22, r22
    6d68:	c1 f1       	breq	.+112    	; 0x6dda <setGreenLed+0x11a>
    6d6a:	80 91 0b 01 	lds	r24, 0x010B
    6d6e:	8d 7f       	andi	r24, 0xFD	; 253
    6d70:	80 93 0b 01 	sts	0x010B, r24
    6d74:	80 91 0b 01 	lds	r24, 0x010B
    6d78:	08 95       	ret
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
    6d7a:	66 23       	and	r22, r22
    6d7c:	99 f0       	breq	.+38     	; 0x6da4 <setGreenLed+0xe4>
    6d7e:	a3 98       	cbi	0x14, 3	; 20
    6d80:	84 b3       	in	r24, 0x14	; 20
    6d82:	08 95       	ret
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
    6d84:	80 91 0b 01 	lds	r24, 0x010B
    6d88:	84 60       	ori	r24, 0x04	; 4
    6d8a:	80 93 0b 01 	sts	0x010B, r24
    6d8e:	80 91 0b 01 	lds	r24, 0x010B
    6d92:	08 95       	ret
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
    6d94:	80 91 0b 01 	lds	r24, 0x010B
    6d98:	80 64       	ori	r24, 0x40	; 64
    6d9a:	80 93 0b 01 	sts	0x010B, r24
    6d9e:	80 91 0b 01 	lds	r24, 0x010B
    6da2:	08 95       	ret
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
    6da4:	a3 9a       	sbi	0x14, 3	; 20
    6da6:	84 b3       	in	r24, 0x14	; 20
    6da8:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
    6daa:	80 91 0b 01 	lds	r24, 0x010B
    6dae:	80 61       	ori	r24, 0x10	; 16
    6db0:	80 93 0b 01 	sts	0x010B, r24
    6db4:	80 91 0b 01 	lds	r24, 0x010B
    6db8:	08 95       	ret

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
    6dba:	80 91 0b 01 	lds	r24, 0x010B
    6dbe:	81 60       	ori	r24, 0x01	; 1
    6dc0:	80 93 0b 01 	sts	0x010B, r24
    6dc4:	80 91 0b 01 	lds	r24, 0x010B
    6dc8:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
    6dca:	80 91 0b 01 	lds	r24, 0x010B
    6dce:	80 62       	ori	r24, 0x20	; 32
    6dd0:	80 93 0b 01 	sts	0x010B, r24
    6dd4:	80 91 0b 01 	lds	r24, 0x010B
    6dd8:	08 95       	ret
	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
    6dda:	80 91 0b 01 	lds	r24, 0x010B
    6dde:	82 60       	ori	r24, 0x02	; 2
    6de0:	80 93 0b 01 	sts	0x010B, r24
    6de4:	80 91 0b 01 	lds	r24, 0x010B
    6de8:	08 95       	ret
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
				break;

		case 7:	isOn?GREEN_LED7_ON:GREEN_LED7_OFF;
    6dea:	80 91 0b 01 	lds	r24, 0x010B
    6dee:	8f 77       	andi	r24, 0x7F	; 127
    6df0:	80 93 0b 01 	sts	0x010B, r24
    6df4:	80 91 0b 01 	lds	r24, 0x010B
    6df8:	08 95       	ret

00006dfa <turnOffGreenLeds>:

}

void turnOffGreenLeds() {

	GREEN_LED0_OFF;
    6dfa:	eb e0       	ldi	r30, 0x0B	; 11
    6dfc:	f1 e0       	ldi	r31, 0x01	; 1
    6dfe:	80 81       	ld	r24, Z
    6e00:	81 60       	ori	r24, 0x01	; 1
    6e02:	80 83       	st	Z, r24
	GREEN_LED1_OFF;
    6e04:	80 81       	ld	r24, Z
    6e06:	82 60       	ori	r24, 0x02	; 2
    6e08:	80 83       	st	Z, r24
	GREEN_LED2_OFF;
    6e0a:	80 81       	ld	r24, Z
    6e0c:	84 60       	ori	r24, 0x04	; 4
    6e0e:	80 83       	st	Z, r24
	GREEN_LED3_OFF;
    6e10:	a3 9a       	sbi	0x14, 3	; 20
	GREEN_LED4_OFF;
    6e12:	80 81       	ld	r24, Z
    6e14:	80 61       	ori	r24, 0x10	; 16
    6e16:	80 83       	st	Z, r24
	GREEN_LED5_OFF;
    6e18:	80 81       	ld	r24, Z
    6e1a:	80 62       	ori	r24, 0x20	; 32
    6e1c:	80 83       	st	Z, r24
	GREEN_LED6_OFF;
    6e1e:	80 81       	ld	r24, Z
    6e20:	80 64       	ori	r24, 0x40	; 64
    6e22:	80 83       	st	Z, r24
	GREEN_LED7_OFF;
    6e24:	80 81       	ld	r24, Z
    6e26:	80 68       	ori	r24, 0x80	; 128
    6e28:	80 83       	st	Z, r24

}
    6e2a:	08 95       	ret

00006e2c <turnOnGreenLeds>:


void turnOnGreenLeds() {

	GREEN_LED0_ON;
    6e2c:	eb e0       	ldi	r30, 0x0B	; 11
    6e2e:	f1 e0       	ldi	r31, 0x01	; 1
    6e30:	80 81       	ld	r24, Z
    6e32:	8e 7f       	andi	r24, 0xFE	; 254
    6e34:	80 83       	st	Z, r24
	GREEN_LED1_ON;
    6e36:	80 81       	ld	r24, Z
    6e38:	8d 7f       	andi	r24, 0xFD	; 253
    6e3a:	80 83       	st	Z, r24
	GREEN_LED2_ON;
    6e3c:	80 81       	ld	r24, Z
    6e3e:	8b 7f       	andi	r24, 0xFB	; 251
    6e40:	80 83       	st	Z, r24
	GREEN_LED3_ON;
    6e42:	a3 98       	cbi	0x14, 3	; 20
	GREEN_LED4_ON;
    6e44:	80 81       	ld	r24, Z
    6e46:	8f 7e       	andi	r24, 0xEF	; 239
    6e48:	80 83       	st	Z, r24
	GREEN_LED5_ON;
    6e4a:	80 81       	ld	r24, Z
    6e4c:	8f 7d       	andi	r24, 0xDF	; 223
    6e4e:	80 83       	st	Z, r24
	GREEN_LED6_ON;
    6e50:	80 81       	ld	r24, Z
    6e52:	8f 7b       	andi	r24, 0xBF	; 191
    6e54:	80 83       	st	Z, r24
	GREEN_LED7_ON;
    6e56:	80 81       	ld	r24, Z
    6e58:	8f 77       	andi	r24, 0x7F	; 127
    6e5a:	80 83       	st	Z, r24

}
    6e5c:	08 95       	ret

00006e5e <computeAngle>:

	}

}

void computeAngle() {
    6e5e:	ef 92       	push	r14
    6e60:	ff 92       	push	r15
    6e62:	0f 93       	push	r16
    6e64:	1f 93       	push	r17

	// check the robot motion plane (horizontal or vertical) based on the Z axes;
	if(abs(accZ) >= VERTICAL_THRESHOLD) {
    6e66:	80 91 50 04 	lds	r24, 0x0450
    6e6a:	90 91 51 04 	lds	r25, 0x0451
    6e6e:	97 fd       	sbrc	r25, 7
    6e70:	6c c0       	rjmp	.+216    	; 0x6f4a <computeAngle+0xec>
    6e72:	8d 97       	sbiw	r24, 0x2d	; 45
    6e74:	0c f4       	brge	.+2      	; 0x6e78 <computeAngle+0x1a>
    6e76:	54 c0       	rjmp	.+168    	; 0x6f20 <computeAngle+0xc2>
		currPosition = HORIZONTAL_POS;
    6e78:	81 e0       	ldi	r24, 0x01	; 1
    6e7a:	80 93 11 02 	sts	0x0211, r24
    6e7e:	28 2f       	mov	r18, r24
	} else {
		currPosition = VERTICAL_POS;	
	}
	if(currPosition != robotPosition) {			
    6e80:	80 91 12 02 	lds	r24, 0x0212
    6e84:	28 17       	cp	r18, r24
    6e86:	09 f4       	brne	.+2      	; 0x6e8a <computeAngle+0x2c>
    6e88:	54 c0       	rjmp	.+168    	; 0x6f32 <computeAngle+0xd4>
		timesInSamePos++;
    6e8a:	80 91 64 04 	lds	r24, 0x0464
    6e8e:	90 91 65 04 	lds	r25, 0x0465
    6e92:	01 96       	adiw	r24, 0x01	; 1
    6e94:	90 93 65 04 	sts	0x0465, r25
    6e98:	80 93 64 04 	sts	0x0464, r24
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
    6e9c:	88 3c       	cpi	r24, 0xC8	; 200
    6e9e:	91 05       	cpc	r25, r1
    6ea0:	08 f0       	brcs	.+2      	; 0x6ea4 <computeAngle+0x46>
    6ea2:	4c c0       	rjmp	.+152    	; 0x6f3c <computeAngle+0xde>
	} else {
		timesInSamePos = 0;
	}

	// compute the angle using the X and Y axis
	thetaAcc = atan2((float)accX, (float)accY);
    6ea4:	60 91 4c 04 	lds	r22, 0x044C
    6ea8:	70 91 4d 04 	lds	r23, 0x044D
    6eac:	88 27       	eor	r24, r24
    6eae:	77 fd       	sbrc	r23, 7
    6eb0:	80 95       	com	r24
    6eb2:	98 2f       	mov	r25, r24
    6eb4:	0e 94 e5 55 	call	0xabca	; 0xabca <__floatsisf>
    6eb8:	7b 01       	movw	r14, r22
    6eba:	8c 01       	movw	r16, r24
    6ebc:	60 91 4e 04 	lds	r22, 0x044E
    6ec0:	70 91 4f 04 	lds	r23, 0x044F
    6ec4:	88 27       	eor	r24, r24
    6ec6:	77 fd       	sbrc	r23, 7
    6ec8:	80 95       	com	r24
    6eca:	98 2f       	mov	r25, r24
    6ecc:	0e 94 e5 55 	call	0xabca	; 0xabca <__floatsisf>
    6ed0:	9b 01       	movw	r18, r22
    6ed2:	ac 01       	movw	r20, r24
    6ed4:	c8 01       	movw	r24, r16
    6ed6:	b7 01       	movw	r22, r14
    6ed8:	0e 94 f0 54 	call	0xa9e0	; 0xa9e0 <atan2>
    6edc:	60 93 cc 04 	sts	0x04CC, r22
    6ee0:	70 93 cd 04 	sts	0x04CD, r23
    6ee4:	80 93 ce 04 	sts	0x04CE, r24
    6ee8:	90 93 cf 04 	sts	0x04CF, r25
	currentAngle = (signed int)(thetaAcc*RAD_2_DEG);
    6eec:	21 ee       	ldi	r18, 0xE1	; 225
    6eee:	3e e2       	ldi	r19, 0x2E	; 46
    6ef0:	45 e6       	ldi	r20, 0x65	; 101
    6ef2:	52 e4       	ldi	r21, 0x42	; 66
    6ef4:	0e 94 fe 56 	call	0xadfc	; 0xadfc <__mulsf3>
    6ef8:	0e 94 b2 55 	call	0xab64	; 0xab64 <__fixsfsi>
    6efc:	cb 01       	movw	r24, r22
    6efe:	70 93 63 04 	sts	0x0463, r23
    6f02:	60 93 62 04 	sts	0x0462, r22

	if(currentAngle < 0) {
    6f06:	77 ff       	sbrs	r23, 7
    6f08:	06 c0       	rjmp	.+12     	; 0x6f16 <computeAngle+0xb8>
		currentAngle = currentAngle + (signed int)360;	// angles from 0 to 360
    6f0a:	88 59       	subi	r24, 0x98	; 152
    6f0c:	9e 4f       	sbci	r25, 0xFE	; 254
    6f0e:	90 93 63 04 	sts	0x0463, r25
    6f12:	80 93 62 04 	sts	0x0462, r24
	}

}
    6f16:	1f 91       	pop	r17
    6f18:	0f 91       	pop	r16
    6f1a:	ff 90       	pop	r15
    6f1c:	ef 90       	pop	r14
    6f1e:	08 95       	ret

	// check the robot motion plane (horizontal or vertical) based on the Z axes;
	if(abs(accZ) >= VERTICAL_THRESHOLD) {
		currPosition = HORIZONTAL_POS;
	} else {
		currPosition = VERTICAL_POS;	
    6f20:	10 92 11 02 	sts	0x0211, r1
    6f24:	20 91 11 02 	lds	r18, 0x0211
	}
	if(currPosition != robotPosition) {			
    6f28:	80 91 12 02 	lds	r24, 0x0212
    6f2c:	28 17       	cp	r18, r24
    6f2e:	09 f0       	breq	.+2      	; 0x6f32 <computeAngle+0xd4>
    6f30:	ac cf       	rjmp	.-168    	; 0x6e8a <computeAngle+0x2c>
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
			robotPosition = currPosition;
		}
	} else {
		timesInSamePos = 0;
    6f32:	10 92 65 04 	sts	0x0465, r1
    6f36:	10 92 64 04 	sts	0x0464, r1
    6f3a:	b4 cf       	rjmp	.-152    	; 0x6ea4 <computeAngle+0x46>
		currPosition = VERTICAL_POS;	
	}
	if(currPosition != robotPosition) {			
		timesInSamePos++;
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
    6f3c:	10 92 65 04 	sts	0x0465, r1
    6f40:	10 92 64 04 	sts	0x0464, r1
			robotPosition = currPosition;
    6f44:	20 93 12 02 	sts	0x0212, r18
    6f48:	ad cf       	rjmp	.-166    	; 0x6ea4 <computeAngle+0x46>
}

void computeAngle() {

	// check the robot motion plane (horizontal or vertical) based on the Z axes;
	if(abs(accZ) >= VERTICAL_THRESHOLD) {
    6f4a:	90 95       	com	r25
    6f4c:	81 95       	neg	r24
    6f4e:	9f 4f       	sbci	r25, 0xFF	; 255
    6f50:	90 cf       	rjmp	.-224    	; 0x6e72 <computeAngle+0x14>

00006f52 <readAccelXYZ_2>:

void readAccelXYZ_2() {

	int i = 2;

	if(useAccel == USE_MMAX7455L) {
    6f52:	80 91 4b 04 	lds	r24, 0x044B
    6f56:	88 23       	and	r24, r24
    6f58:	09 f0       	breq	.+2      	; 0x6f5c <readAccelXYZ_2+0xa>
    6f5a:	5a c0       	rjmp	.+180    	; 0x7010 <readAccelXYZ_2+0xbe>

		for(i=2; i<5; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    6f5c:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <i2c_readAck>
    6f60:	80 93 68 04 	sts	0x0468, r24
		}

	} else if(useAccel == USE_ADXL345) {							

		for(i=3; i<5; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    6f64:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <i2c_readAck>
    6f68:	80 93 69 04 	sts	0x0469, r24
    6f6c:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <i2c_readAck>
    6f70:	80 93 6a 04 	sts	0x046A, r24
		}
		accBuff[i] = i2c_readNak();									// read last byte sending NACK
    6f74:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <i2c_readNak>
    6f78:	80 93 6b 04 	sts	0x046B, r24
		i2c_stop();													// set stop conditon = release bus
    6f7c:	0e 94 77 0e 	call	0x1cee	; 0x1cee <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    6f80:	80 91 a8 0b 	lds	r24, 0x0BA8
    6f84:	88 23       	and	r24, r24
    6f86:	09 f0       	breq	.+2      	; 0x6f8a <readAccelXYZ_2+0x38>
    6f88:	53 c0       	rjmp	.+166    	; 0x7030 <readAccelXYZ_2+0xde>
			accX = ((signed int)accBuff[1]<<8)|accBuff[0];    			// X axis
			accY = ((signed int)accBuff[3]<<8)|accBuff[2];    			// Y axis
			accZ = ((signed int)accBuff[5]<<8)|accBuff[4];    			// Z axis
		} else {													// else return the calibrated values
			accX = (((signed int)accBuff[1]<<8)|accBuff[0])-accOffsetX;	// X axis
    6f8a:	20 91 67 04 	lds	r18, 0x0467
    6f8e:	33 27       	eor	r19, r19
    6f90:	27 fd       	sbrc	r18, 7
    6f92:	30 95       	com	r19
    6f94:	32 2f       	mov	r19, r18
    6f96:	22 27       	eor	r18, r18
    6f98:	80 91 66 04 	lds	r24, 0x0466
    6f9c:	99 27       	eor	r25, r25
    6f9e:	87 fd       	sbrc	r24, 7
    6fa0:	90 95       	com	r25
    6fa2:	28 2b       	or	r18, r24
    6fa4:	39 2b       	or	r19, r25
    6fa6:	80 91 52 04 	lds	r24, 0x0452
    6faa:	90 91 53 04 	lds	r25, 0x0453
    6fae:	28 1b       	sub	r18, r24
    6fb0:	39 0b       	sbc	r19, r25
    6fb2:	30 93 4d 04 	sts	0x044D, r19
    6fb6:	20 93 4c 04 	sts	0x044C, r18
			accY = (((signed int)accBuff[3]<<8)|accBuff[2])-accOffsetY;	// Y axis
    6fba:	20 91 69 04 	lds	r18, 0x0469
    6fbe:	33 27       	eor	r19, r19
    6fc0:	27 fd       	sbrc	r18, 7
    6fc2:	30 95       	com	r19
    6fc4:	32 2f       	mov	r19, r18
    6fc6:	22 27       	eor	r18, r18
    6fc8:	80 91 68 04 	lds	r24, 0x0468
    6fcc:	99 27       	eor	r25, r25
    6fce:	87 fd       	sbrc	r24, 7
    6fd0:	90 95       	com	r25
    6fd2:	28 2b       	or	r18, r24
    6fd4:	39 2b       	or	r19, r25
    6fd6:	80 91 54 04 	lds	r24, 0x0454
    6fda:	90 91 55 04 	lds	r25, 0x0455
    6fde:	28 1b       	sub	r18, r24
    6fe0:	39 0b       	sbc	r19, r25
    6fe2:	30 93 4f 04 	sts	0x044F, r19
    6fe6:	20 93 4e 04 	sts	0x044E, r18
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4]);			// Z axis
    6fea:	80 91 6b 04 	lds	r24, 0x046B
    6fee:	99 27       	eor	r25, r25
    6ff0:	87 fd       	sbrc	r24, 7
    6ff2:	90 95       	com	r25
    6ff4:	98 2f       	mov	r25, r24
    6ff6:	88 27       	eor	r24, r24
    6ff8:	20 91 6a 04 	lds	r18, 0x046A
    6ffc:	33 27       	eor	r19, r19
    6ffe:	27 fd       	sbrc	r18, 7
    7000:	30 95       	com	r19
    7002:	82 2b       	or	r24, r18
    7004:	93 2b       	or	r25, r19
    7006:	90 93 51 04 	sts	0x0451, r25
    700a:	80 93 50 04 	sts	0x0450, r24
    700e:	08 95       	ret
			accX = (((signed int)accBuff[1]<<8)|accBuff[0])-accOffsetX;	// X axis
			accY = (((signed int)accBuff[3]<<8)|accBuff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4]);			// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    7010:	81 30       	cpi	r24, 0x01	; 1
    7012:	09 f4       	brne	.+2      	; 0x7016 <readAccelXYZ_2+0xc4>
    7014:	a7 cf       	rjmp	.-178    	; 0x6f64 <readAccelXYZ_2+0x12>
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4]);			// Z axis
		}

	} else {

		accX = 0;
    7016:	10 92 4d 04 	sts	0x044D, r1
    701a:	10 92 4c 04 	sts	0x044C, r1
		accY = 0;
    701e:	10 92 4f 04 	sts	0x044F, r1
    7022:	10 92 4e 04 	sts	0x044E, r1
		accZ = 0;
    7026:	10 92 51 04 	sts	0x0451, r1
    702a:	10 92 50 04 	sts	0x0450, r1
    702e:	08 95       	ret
		}
		accBuff[i] = i2c_readNak();									// read last byte sending NACK
		i2c_stop();													// set stop conditon = release bus

		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)accBuff[1]<<8)|accBuff[0];    			// X axis
    7030:	80 91 67 04 	lds	r24, 0x0467
    7034:	99 27       	eor	r25, r25
    7036:	87 fd       	sbrc	r24, 7
    7038:	90 95       	com	r25
    703a:	98 2f       	mov	r25, r24
    703c:	88 27       	eor	r24, r24
    703e:	20 91 66 04 	lds	r18, 0x0466
    7042:	33 27       	eor	r19, r19
    7044:	27 fd       	sbrc	r18, 7
    7046:	30 95       	com	r19
    7048:	82 2b       	or	r24, r18
    704a:	93 2b       	or	r25, r19
    704c:	90 93 4d 04 	sts	0x044D, r25
    7050:	80 93 4c 04 	sts	0x044C, r24
			accY = ((signed int)accBuff[3]<<8)|accBuff[2];    			// Y axis
    7054:	80 91 69 04 	lds	r24, 0x0469
    7058:	99 27       	eor	r25, r25
    705a:	87 fd       	sbrc	r24, 7
    705c:	90 95       	com	r25
    705e:	98 2f       	mov	r25, r24
    7060:	88 27       	eor	r24, r24
    7062:	20 91 68 04 	lds	r18, 0x0468
    7066:	33 27       	eor	r19, r19
    7068:	27 fd       	sbrc	r18, 7
    706a:	30 95       	com	r19
    706c:	82 2b       	or	r24, r18
    706e:	93 2b       	or	r25, r19
    7070:	90 93 4f 04 	sts	0x044F, r25
    7074:	80 93 4e 04 	sts	0x044E, r24
    7078:	b8 cf       	rjmp	.-144    	; 0x6fea <readAccelXYZ_2+0x98>

0000707a <initADXL345>:
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    707a:	80 91 10 02 	lds	r24, 0x0210
    707e:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    7082:	88 23       	and	r24, r24
    7084:	31 f5       	brne	.+76     	; 0x70d2 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    7086:	8d e2       	ldi	r24, 0x2D	; 45
    7088:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <i2c_write>
        i2c_write(0x08);	// measurement mode
    708c:	88 e0       	ldi	r24, 0x08	; 8
    708e:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    7092:	0e 94 77 0e 	call	0x1cee	; 0x1cee <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7096:	80 91 10 02 	lds	r24, 0x0210
    709a:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    709e:	88 23       	and	r24, r24
    70a0:	c1 f4       	brne	.+48     	; 0x70d2 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    70a2:	81 e3       	ldi	r24, 0x31	; 49
    70a4:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    70a8:	80 e0       	ldi	r24, 0x00	; 0
    70aa:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    70ae:	0e 94 77 0e 	call	0x1cee	; 0x1cee <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    70b2:	80 91 10 02 	lds	r24, 0x0210
    70b6:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    70ba:	88 23       	and	r24, r24
    70bc:	51 f4       	brne	.+20     	; 0x70d2 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    70be:	8c e2       	ldi	r24, 0x2C	; 44
    70c0:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    70c4:	89 e0       	ldi	r24, 0x09	; 9
    70c6:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    70ca:	0e 94 77 0e 	call	0x1cee	; 0x1cee <i2c_stop>
    70ce:	80 e0       	ldi	r24, 0x00	; 0
    }

	return 0;

}
    70d0:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    70d2:	0e 94 77 0e 	call	0x1cee	; 0x1cee <i2c_stop>
    70d6:	81 e0       	ldi	r24, 0x01	; 1
    70d8:	08 95       	ret

000070da <initMMA7455L>:
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    70da:	80 91 10 02 	lds	r24, 0x0210
    70de:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    70e2:	88 23       	and	r24, r24
    70e4:	51 f4       	brne	.+20     	; 0x70fa <initMMA7455L+0x20>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    70e6:	86 e1       	ldi	r24, 0x16	; 22
    70e8:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    70ec:	85 e4       	ldi	r24, 0x45	; 69
    70ee:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    70f2:	0e 94 77 0e 	call	0x1cee	; 0x1cee <i2c_stop>
    70f6:	80 e0       	ldi	r24, 0x00	; 0
    }

	return 0;				// configuration ok

}
    70f8:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    70fa:	0e 94 77 0e 	call	0x1cee	; 0x1cee <i2c_stop>
    70fe:	81 e0       	ldi	r24, 0x01	; 1
    7100:	08 95       	ret

00007102 <readAccelXYZ_1>:

void readAccelXYZ_1() {

	int i = 0;

	if(useAccel == USE_MMAX7455L) {
    7102:	80 91 4b 04 	lds	r24, 0x044B
    7106:	88 23       	and	r24, r24
    7108:	79 f0       	breq	.+30     	; 0x7128 <readAccelXYZ_1+0x26>
		for(i=0; i<2; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
		}
		return;

	} else if(useAccel == USE_ADXL345) {							
    710a:	81 30       	cpi	r24, 0x01	; 1
    710c:	11 f1       	breq	.+68     	; 0x7152 <readAccelXYZ_1+0x50>
		}
		return;

	} else {

		accX = 0;
    710e:	10 92 4d 04 	sts	0x044D, r1
    7112:	10 92 4c 04 	sts	0x044C, r1
		accY = 0;
    7116:	10 92 4f 04 	sts	0x044F, r1
    711a:	10 92 4e 04 	sts	0x044E, r1
		accZ = 0;
    711e:	10 92 51 04 	sts	0x0451, r1
    7122:	10 92 50 04 	sts	0x0450, r1
    7126:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    7128:	80 91 10 02 	lds	r24, 0x0210
    712c:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    7130:	80 e0       	ldi	r24, 0x00	; 0
    7132:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    7136:	80 91 10 02 	lds	r24, 0x0210
    713a:	8f 5f       	subi	r24, 0xFF	; 255
    713c:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <i2c_rep_start>

		for(i=0; i<2; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    7140:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <i2c_readAck>
    7144:	80 93 66 04 	sts	0x0466, r24
    7148:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <i2c_readAck>
    714c:	80 93 67 04 	sts	0x0467, r24
    7150:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    7152:	80 91 10 02 	lds	r24, 0x0210
    7156:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    715a:	82 e3       	ldi	r24, 0x32	; 50
    715c:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    7160:	80 91 10 02 	lds	r24, 0x0210
    7164:	8f 5f       	subi	r24, 0xFF	; 255
    7166:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <i2c_rep_start>

		for(i=0; i<3; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    716a:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <i2c_readAck>
    716e:	80 93 66 04 	sts	0x0466, r24
    7172:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <i2c_readAck>
    7176:	80 93 67 04 	sts	0x0467, r24
    717a:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <i2c_readAck>
    717e:	80 93 68 04 	sts	0x0468, r24
    7182:	08 95       	ret

00007184 <readAccelXYZ>:

	}

}

void readAccelXYZ() {
    7184:	1f 93       	push	r17
    7186:	df 93       	push	r29
    7188:	cf 93       	push	r28
    718a:	00 d0       	rcall	.+0      	; 0x718c <readAccelXYZ+0x8>
    718c:	00 d0       	rcall	.+0      	; 0x718e <readAccelXYZ+0xa>
    718e:	cd b7       	in	r28, 0x3d	; 61
    7190:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[6];

	if(useAccel == USE_MMAX7455L) {
    7192:	80 91 4b 04 	lds	r24, 0x044B
    7196:	88 23       	and	r24, r24
    7198:	c9 f0       	breq	.+50     	; 0x71cc <readAccelXYZ+0x48>
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)buff[5]<<8)|buff[4]);				// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    719a:	81 30       	cpi	r24, 0x01	; 1
    719c:	09 f4       	brne	.+2      	; 0x71a0 <readAccelXYZ+0x1c>
    719e:	99 c0       	rjmp	.+306    	; 0x72d2 <readAccelXYZ+0x14e>
			accZ = (((signed int)buff[5]<<8)|buff[4]);				// Z axis
		}

	} else {

		accX = 0;
    71a0:	10 92 4d 04 	sts	0x044D, r1
    71a4:	10 92 4c 04 	sts	0x044C, r1
		accY = 0;
    71a8:	10 92 4f 04 	sts	0x044F, r1
    71ac:	10 92 4e 04 	sts	0x044E, r1
		accZ = 0;
    71b0:	10 92 51 04 	sts	0x0451, r1
    71b4:	10 92 50 04 	sts	0x0450, r1

	}

}
    71b8:	26 96       	adiw	r28, 0x06	; 6
    71ba:	0f b6       	in	r0, 0x3f	; 63
    71bc:	f8 94       	cli
    71be:	de bf       	out	0x3e, r29	; 62
    71c0:	0f be       	out	0x3f, r0	; 63
    71c2:	cd bf       	out	0x3d, r28	; 61
    71c4:	cf 91       	pop	r28
    71c6:	df 91       	pop	r29
    71c8:	1f 91       	pop	r17
    71ca:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    71cc:	80 91 10 02 	lds	r24, 0x0210
    71d0:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    71d4:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
		i2c_write(0x32);											// sends address to read from (X LSB)
    71d6:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    71da:	80 91 10 02 	lds	r24, 0x0210
    71de:	8f 5f       	subi	r24, 0xFF	; 255
    71e0:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <i2c_rep_start>

		for(i=0; i<5; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    71e4:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <i2c_readAck>
    71e8:	89 83       	std	Y+1, r24	; 0x01
    71ea:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <i2c_readAck>
    71ee:	8a 83       	std	Y+2, r24	; 0x02
    71f0:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <i2c_readAck>
    71f4:	8b 83       	std	Y+3, r24	; 0x03
    71f6:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <i2c_readAck>
    71fa:	8c 83       	std	Y+4, r24	; 0x04
    71fc:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <i2c_readAck>
    7200:	8d 83       	std	Y+5, r24	; 0x05
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    7202:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <i2c_readNak>
    7206:	18 2f       	mov	r17, r24
    7208:	8e 83       	std	Y+6, r24	; 0x06
		i2c_stop();													// set stop conditon = release bus
    720a:	0e 94 77 0e 	call	0x1cee	; 0x1cee <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    720e:	80 91 a8 0b 	lds	r24, 0x0BA8
    7212:	88 23       	and	r24, r24
    7214:	89 f1       	breq	.+98     	; 0x7278 <readAccelXYZ+0xf4>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    7216:	8a 81       	ldd	r24, Y+2	; 0x02
    7218:	99 27       	eor	r25, r25
    721a:	87 fd       	sbrc	r24, 7
    721c:	90 95       	com	r25
    721e:	98 2f       	mov	r25, r24
    7220:	88 27       	eor	r24, r24
    7222:	29 81       	ldd	r18, Y+1	; 0x01
    7224:	33 27       	eor	r19, r19
    7226:	27 fd       	sbrc	r18, 7
    7228:	30 95       	com	r19
    722a:	82 2b       	or	r24, r18
    722c:	93 2b       	or	r25, r19
    722e:	90 93 4d 04 	sts	0x044D, r25
    7232:	80 93 4c 04 	sts	0x044C, r24
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    7236:	8c 81       	ldd	r24, Y+4	; 0x04
    7238:	99 27       	eor	r25, r25
    723a:	87 fd       	sbrc	r24, 7
    723c:	90 95       	com	r25
    723e:	98 2f       	mov	r25, r24
    7240:	88 27       	eor	r24, r24
    7242:	2b 81       	ldd	r18, Y+3	; 0x03
    7244:	33 27       	eor	r19, r19
    7246:	27 fd       	sbrc	r18, 7
    7248:	30 95       	com	r19
    724a:	82 2b       	or	r24, r18
    724c:	93 2b       	or	r25, r19
    724e:	90 93 4f 04 	sts	0x044F, r25
    7252:	80 93 4e 04 	sts	0x044E, r24
			accZ = ((signed int)buff[5]<<8)|buff[4];    			// Z axis
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)buff[5]<<8)|buff[4]);				// Z axis
    7256:	21 2f       	mov	r18, r17
    7258:	33 27       	eor	r19, r19
    725a:	27 fd       	sbrc	r18, 7
    725c:	30 95       	com	r19
    725e:	32 2f       	mov	r19, r18
    7260:	22 27       	eor	r18, r18
    7262:	8d 81       	ldd	r24, Y+5	; 0x05
    7264:	99 27       	eor	r25, r25
    7266:	87 fd       	sbrc	r24, 7
    7268:	90 95       	com	r25
    726a:	28 2b       	or	r18, r24
    726c:	39 2b       	or	r19, r25
    726e:	30 93 51 04 	sts	0x0451, r19
    7272:	20 93 50 04 	sts	0x0450, r18
    7276:	a0 cf       	rjmp	.-192    	; 0x71b8 <readAccelXYZ+0x34>
		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
			accZ = ((signed int)buff[5]<<8)|buff[4];    			// Z axis
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    7278:	2a 81       	ldd	r18, Y+2	; 0x02
    727a:	33 27       	eor	r19, r19
    727c:	27 fd       	sbrc	r18, 7
    727e:	30 95       	com	r19
    7280:	32 2f       	mov	r19, r18
    7282:	22 27       	eor	r18, r18
    7284:	89 81       	ldd	r24, Y+1	; 0x01
    7286:	99 27       	eor	r25, r25
    7288:	87 fd       	sbrc	r24, 7
    728a:	90 95       	com	r25
    728c:	28 2b       	or	r18, r24
    728e:	39 2b       	or	r19, r25
    7290:	80 91 52 04 	lds	r24, 0x0452
    7294:	90 91 53 04 	lds	r25, 0x0453
    7298:	28 1b       	sub	r18, r24
    729a:	39 0b       	sbc	r19, r25
    729c:	30 93 4d 04 	sts	0x044D, r19
    72a0:	20 93 4c 04 	sts	0x044C, r18
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    72a4:	2c 81       	ldd	r18, Y+4	; 0x04
    72a6:	33 27       	eor	r19, r19
    72a8:	27 fd       	sbrc	r18, 7
    72aa:	30 95       	com	r19
    72ac:	32 2f       	mov	r19, r18
    72ae:	22 27       	eor	r18, r18
    72b0:	8b 81       	ldd	r24, Y+3	; 0x03
    72b2:	99 27       	eor	r25, r25
    72b4:	87 fd       	sbrc	r24, 7
    72b6:	90 95       	com	r25
    72b8:	28 2b       	or	r18, r24
    72ba:	39 2b       	or	r19, r25
    72bc:	80 91 54 04 	lds	r24, 0x0454
    72c0:	90 91 55 04 	lds	r25, 0x0455
    72c4:	28 1b       	sub	r18, r24
    72c6:	39 0b       	sbc	r19, r25
    72c8:	30 93 4f 04 	sts	0x044F, r19
    72cc:	20 93 4e 04 	sts	0x044E, r18
    72d0:	c2 cf       	rjmp	.-124    	; 0x7256 <readAccelXYZ+0xd2>
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    72d2:	80 91 10 02 	lds	r24, 0x0210
    72d6:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    72da:	82 e3       	ldi	r24, 0x32	; 50
    72dc:	7c cf       	rjmp	.-264    	; 0x71d6 <readAccelXYZ+0x52>

000072de <readAccelXY>:

	return 0;

}

void readAccelXY() {
    72de:	ef 92       	push	r14
    72e0:	ff 92       	push	r15
    72e2:	0f 93       	push	r16
    72e4:	1f 93       	push	r17

	int i = 0;
	signed char buff[4];

	if(useAccel == USE_MMAX7455L) {
    72e6:	80 91 4b 04 	lds	r24, 0x044B
    72ea:	88 23       	and	r24, r24
    72ec:	81 f0       	breq	.+32     	; 0x730e <readAccelXY+0x30>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else if(useAccel == USE_ADXL345) {
    72ee:	81 30       	cpi	r24, 0x01	; 1
    72f0:	09 f4       	brne	.+2      	; 0x72f4 <readAccelXY+0x16>
    72f2:	81 c0       	rjmp	.+258    	; 0x73f6 <readAccelXY+0x118>
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else {

		accX = 0;
    72f4:	10 92 4d 04 	sts	0x044D, r1
    72f8:	10 92 4c 04 	sts	0x044C, r1
		accY = 0;
    72fc:	10 92 4f 04 	sts	0x044F, r1
    7300:	10 92 4e 04 	sts	0x044E, r1

	}

}
    7304:	1f 91       	pop	r17
    7306:	0f 91       	pop	r16
    7308:	ff 90       	pop	r15
    730a:	ef 90       	pop	r14
    730c:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    730e:	80 91 10 02 	lds	r24, 0x0210
    7312:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    7316:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
		i2c_write(0x32);											// sends address to read from (X LSB)
    7318:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    731c:	80 91 10 02 	lds	r24, 0x0210
    7320:	8f 5f       	subi	r24, 0xFF	; 255
    7322:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <i2c_rep_start>

		for(i=0; i<3; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    7326:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <i2c_readAck>
    732a:	08 2f       	mov	r16, r24
    732c:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <i2c_readAck>
    7330:	18 2f       	mov	r17, r24
    7332:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <i2c_readAck>
    7336:	e8 2e       	mov	r14, r24
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    7338:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <i2c_readNak>
    733c:	f8 2e       	mov	r15, r24
		i2c_stop();													// set stop conditon = release bus
    733e:	0e 94 77 0e 	call	0x1cee	; 0x1cee <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    7342:	80 91 a8 0b 	lds	r24, 0x0BA8
    7346:	88 23       	and	r24, r24
    7348:	29 f1       	breq	.+74     	; 0x7394 <readAccelXY+0xb6>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    734a:	81 2f       	mov	r24, r17
    734c:	99 27       	eor	r25, r25
    734e:	87 fd       	sbrc	r24, 7
    7350:	90 95       	com	r25
    7352:	98 2f       	mov	r25, r24
    7354:	88 27       	eor	r24, r24
    7356:	20 2f       	mov	r18, r16
    7358:	33 27       	eor	r19, r19
    735a:	27 fd       	sbrc	r18, 7
    735c:	30 95       	com	r19
    735e:	82 2b       	or	r24, r18
    7360:	93 2b       	or	r25, r19
    7362:	90 93 4d 04 	sts	0x044D, r25
    7366:	80 93 4c 04 	sts	0x044C, r24
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    736a:	8f 2d       	mov	r24, r15
    736c:	99 27       	eor	r25, r25
    736e:	87 fd       	sbrc	r24, 7
    7370:	90 95       	com	r25
    7372:	98 2f       	mov	r25, r24
    7374:	88 27       	eor	r24, r24
    7376:	2e 2d       	mov	r18, r14
    7378:	33 27       	eor	r19, r19
    737a:	27 fd       	sbrc	r18, 7
    737c:	30 95       	com	r19
    737e:	82 2b       	or	r24, r18
    7380:	93 2b       	or	r25, r19
    7382:	90 93 4f 04 	sts	0x044F, r25
    7386:	80 93 4e 04 	sts	0x044E, r24
		accX = 0;
		accY = 0;

	}

}
    738a:	1f 91       	pop	r17
    738c:	0f 91       	pop	r16
    738e:	ff 90       	pop	r15
    7390:	ef 90       	pop	r14
    7392:	08 95       	ret

		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    7394:	81 2f       	mov	r24, r17
    7396:	99 27       	eor	r25, r25
    7398:	87 fd       	sbrc	r24, 7
    739a:	90 95       	com	r25
    739c:	98 2f       	mov	r25, r24
    739e:	88 27       	eor	r24, r24
    73a0:	20 2f       	mov	r18, r16
    73a2:	33 27       	eor	r19, r19
    73a4:	27 fd       	sbrc	r18, 7
    73a6:	30 95       	com	r19
    73a8:	82 2b       	or	r24, r18
    73aa:	93 2b       	or	r25, r19
    73ac:	20 91 52 04 	lds	r18, 0x0452
    73b0:	30 91 53 04 	lds	r19, 0x0453
    73b4:	82 1b       	sub	r24, r18
    73b6:	93 0b       	sbc	r25, r19
    73b8:	90 93 4d 04 	sts	0x044D, r25
    73bc:	80 93 4c 04 	sts	0x044C, r24
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    73c0:	8f 2d       	mov	r24, r15
    73c2:	99 27       	eor	r25, r25
    73c4:	87 fd       	sbrc	r24, 7
    73c6:	90 95       	com	r25
    73c8:	98 2f       	mov	r25, r24
    73ca:	88 27       	eor	r24, r24
    73cc:	2e 2d       	mov	r18, r14
    73ce:	33 27       	eor	r19, r19
    73d0:	27 fd       	sbrc	r18, 7
    73d2:	30 95       	com	r19
    73d4:	82 2b       	or	r24, r18
    73d6:	93 2b       	or	r25, r19
    73d8:	20 91 54 04 	lds	r18, 0x0454
    73dc:	30 91 55 04 	lds	r19, 0x0455
    73e0:	82 1b       	sub	r24, r18
    73e2:	93 0b       	sbc	r25, r19
    73e4:	90 93 4f 04 	sts	0x044F, r25
    73e8:	80 93 4e 04 	sts	0x044E, r24
		accX = 0;
		accY = 0;

	}

}
    73ec:	1f 91       	pop	r17
    73ee:	0f 91       	pop	r16
    73f0:	ff 90       	pop	r15
    73f2:	ef 90       	pop	r14
    73f4:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    73f6:	80 91 10 02 	lds	r24, 0x0210
    73fa:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    73fe:	82 e3       	ldi	r24, 0x32	; 50
    7400:	8b cf       	rjmp	.-234    	; 0x7318 <readAccelXY+0x3a>

00007402 <calibrateSensors>:

#include "sensors.h"


void calibrateSensors() {
    7402:	af 92       	push	r10
    7404:	bf 92       	push	r11
    7406:	cf 92       	push	r12
    7408:	df 92       	push	r13
    740a:	ef 92       	push	r14
    740c:	ff 92       	push	r15
    740e:	0f 93       	push	r16
    7410:	1f 93       	push	r17
    7412:	cf 93       	push	r28
    7414:	df 93       	push	r29

	unsigned int i=0;

	pwm_red = 0;
    7416:	10 92 08 02 	sts	0x0208, r1
	pwm_green = 0;
    741a:	10 92 09 02 	sts	0x0209, r1
	pwm_blue = 0;
    741e:	10 92 0a 02 	sts	0x020A, r1
	updateRedLed(pwm_red);
    7422:	80 e0       	ldi	r24, 0x00	; 0
    7424:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <updateRedLed>
	updateGreenLed(pwm_green);
    7428:	80 91 09 02 	lds	r24, 0x0209
    742c:	0e 94 34 36 	call	0x6c68	; 0x6c68 <updateGreenLed>
	updateBlueLed(pwm_blue);
    7430:	80 91 0a 02 	lds	r24, 0x020A
    7434:	0e 94 4a 36 	call	0x6c94	; 0x6c94 <updateBlueLed>

	calibrationCycle = 0;
    7438:	10 92 72 04 	sts	0x0472, r1
    743c:	10 92 71 04 	sts	0x0471, r1
	startCalibration = 1;
    7440:	81 e0       	ldi	r24, 0x01	; 1
    7442:	80 93 a8 0b 	sts	0x0BA8, r24


	// calibrate accelerometer

	lastTick = getTime100MicroSec();
    7446:	0e 94 04 10 	call	0x2008	; 0x2008 <getTime100MicroSec>
    744a:	60 93 90 04 	sts	0x0490, r22
    744e:	70 93 91 04 	sts	0x0491, r23
    7452:	80 93 92 04 	sts	0x0492, r24
    7456:	90 93 93 04 	sts	0x0493, r25
    745a:	02 c0       	rjmp	.+4      	; 0x7460 <calibrateSensors+0x5e>
	while((getTime100MicroSec() - lastTick) < PAUSE_100_MSEC) {
		readAccelXYZ();	// get a fresh value from the accelerometer
    745c:	0e 94 c2 38 	call	0x7184	; 0x7184 <readAccelXYZ>


	// calibrate accelerometer

	lastTick = getTime100MicroSec();
	while((getTime100MicroSec() - lastTick) < PAUSE_100_MSEC) {
    7460:	0e 94 04 10 	call	0x2008	; 0x2008 <getTime100MicroSec>
    7464:	20 91 90 04 	lds	r18, 0x0490
    7468:	30 91 91 04 	lds	r19, 0x0491
    746c:	40 91 92 04 	lds	r20, 0x0492
    7470:	50 91 93 04 	lds	r21, 0x0493
    7474:	62 1b       	sub	r22, r18
    7476:	73 0b       	sbc	r23, r19
    7478:	84 0b       	sbc	r24, r20
    747a:	95 0b       	sbc	r25, r21
    747c:	61 5c       	subi	r22, 0xC1	; 193
    747e:	73 40       	sbci	r23, 0x03	; 3
    7480:	80 40       	sbci	r24, 0x00	; 0
    7482:	90 40       	sbci	r25, 0x00	; 0
    7484:	58 f3       	brcs	.-42     	; 0x745c <calibrateSensors+0x5a>
		readAccelXYZ();	// get a fresh value from the accelerometer
	}
	
	accXMax = -1023;
    7486:	21 e0       	ldi	r18, 0x01	; 1
    7488:	3c ef       	ldi	r19, 0xFC	; 252
    748a:	30 93 5b 04 	sts	0x045B, r19
    748e:	20 93 5a 04 	sts	0x045A, r18
	accXMin = 1023;
    7492:	8f ef       	ldi	r24, 0xFF	; 255
    7494:	93 e0       	ldi	r25, 0x03	; 3
    7496:	90 93 5d 04 	sts	0x045D, r25
    749a:	80 93 5c 04 	sts	0x045C, r24
	accYMax = -1023;
    749e:	30 93 5f 04 	sts	0x045F, r19
    74a2:	20 93 5e 04 	sts	0x045E, r18
	accYMin = 1023;
    74a6:	90 93 61 04 	sts	0x0461, r25
    74aa:	80 93 60 04 	sts	0x0460, r24
	accOffsetXSum = 0;
    74ae:	10 92 57 04 	sts	0x0457, r1
    74b2:	10 92 56 04 	sts	0x0456, r1
	accOffsetYSum = 0;
    74b6:	10 92 59 04 	sts	0x0459, r1
    74ba:	10 92 58 04 	sts	0x0458, r1

	if(abs(accZ) >= VERTICAL_THRESHOLD) {
    74be:	80 91 50 04 	lds	r24, 0x0450
    74c2:	90 91 51 04 	lds	r25, 0x0451
    74c6:	97 fd       	sbrc	r25, 7
    74c8:	4c c4       	rjmp	.+2200   	; 0x7d62 <calibrateSensors+0x960>
    74ca:	8d 97       	sbiw	r24, 0x2d	; 45
    74cc:	0c f4       	brge	.+2      	; 0x74d0 <calibrateSensors+0xce>
    74ce:	ab c3       	rjmp	.+1878   	; 0x7c26 <calibrateSensors+0x824>

		pwm_red = 0;
    74d0:	10 92 08 02 	sts	0x0208, r1
		pwm_green = 255;
    74d4:	8f ef       	ldi	r24, 0xFF	; 255
    74d6:	80 93 09 02 	sts	0x0209, r24
		pwm_blue = 255;
    74da:	80 93 0a 02 	sts	0x020A, r24
		updateRedLed(pwm_red);
    74de:	80 e0       	ldi	r24, 0x00	; 0
    74e0:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <updateRedLed>
		updateGreenLed(pwm_green);
    74e4:	80 91 09 02 	lds	r24, 0x0209
    74e8:	0e 94 34 36 	call	0x6c68	; 0x6c68 <updateGreenLed>
		updateBlueLed(pwm_blue);
    74ec:	80 91 0a 02 	lds	r24, 0x020A
    74f0:	0e 94 4a 36 	call	0x6c94	; 0x6c94 <updateBlueLed>

		setLeftSpeed(0);
    74f4:	80 e0       	ldi	r24, 0x00	; 0
    74f6:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <setLeftSpeed>
		setRightSpeed(0);
    74fa:	80 e0       	ldi	r24, 0x00	; 0
    74fc:	0e 94 13 18 	call	0x3026	; 0x3026 <setRightSpeed>
    7500:	22 c0       	rjmp	.+68     	; 0x7546 <calibrateSensors+0x144>
			readAccelXYZ();

			handleMotorsWithNoController();

			if(calibrationCycle < CALIBRATION_CYCLES) {
				accOffsetXSum += accX;
    7502:	80 91 56 04 	lds	r24, 0x0456
    7506:	90 91 57 04 	lds	r25, 0x0457
    750a:	20 91 4c 04 	lds	r18, 0x044C
    750e:	30 91 4d 04 	lds	r19, 0x044D
    7512:	82 0f       	add	r24, r18
    7514:	93 1f       	adc	r25, r19
    7516:	90 93 57 04 	sts	0x0457, r25
    751a:	80 93 56 04 	sts	0x0456, r24
				accOffsetYSum += accY;
    751e:	80 91 58 04 	lds	r24, 0x0458
    7522:	90 91 59 04 	lds	r25, 0x0459
    7526:	20 91 4e 04 	lds	r18, 0x044E
    752a:	30 91 4f 04 	lds	r19, 0x044F
    752e:	82 0f       	add	r24, r18
    7530:	93 1f       	adc	r25, r19
    7532:	90 93 59 04 	sts	0x0459, r25
    7536:	80 93 58 04 	sts	0x0458, r24
				calibrationCycle++;
    753a:	4f 5f       	subi	r20, 0xFF	; 255
    753c:	5f 4f       	sbci	r21, 0xFF	; 255
    753e:	50 93 72 04 	sts	0x0472, r21
    7542:	40 93 71 04 	sts	0x0471, r20
		setLeftSpeed(0);
		setRightSpeed(0);

		while(1) {

			readAccelXYZ();
    7546:	0e 94 c2 38 	call	0x7184	; 0x7184 <readAccelXYZ>

			handleMotorsWithNoController();
    754a:	0e 94 eb 2e 	call	0x5dd6	; 0x5dd6 <handleMotorsWithNoController>

			if(calibrationCycle < CALIBRATION_CYCLES) {
    754e:	40 91 71 04 	lds	r20, 0x0471
    7552:	50 91 72 04 	lds	r21, 0x0472
    7556:	40 31       	cpi	r20, 0x10	; 16
    7558:	51 05       	cpc	r21, r1
    755a:	9c f2       	brlt	.-90     	; 0x7502 <calibrateSensors+0x100>
				accOffsetXSum += accX;
				accOffsetYSum += accY;
				calibrationCycle++;
			} else {
				accOffsetX = accOffsetXSum>>4;
    755c:	80 91 56 04 	lds	r24, 0x0456
    7560:	90 91 57 04 	lds	r25, 0x0457
    7564:	95 95       	asr	r25
    7566:	87 95       	ror	r24
    7568:	95 95       	asr	r25
    756a:	87 95       	ror	r24
    756c:	95 95       	asr	r25
    756e:	87 95       	ror	r24
    7570:	95 95       	asr	r25
    7572:	87 95       	ror	r24
    7574:	90 93 53 04 	sts	0x0453, r25
    7578:	80 93 52 04 	sts	0x0452, r24
				accOffsetY = accOffsetYSum>>4;
    757c:	80 91 58 04 	lds	r24, 0x0458
    7580:	90 91 59 04 	lds	r25, 0x0459
    7584:	95 95       	asr	r25
    7586:	87 95       	ror	r24
    7588:	95 95       	asr	r25
    758a:	87 95       	ror	r24
    758c:	95 95       	asr	r25
    758e:	87 95       	ror	r24
    7590:	95 95       	asr	r25
    7592:	87 95       	ror	r24
    7594:	90 93 55 04 	sts	0x0455, r25
    7598:	80 93 54 04 	sts	0x0454, r24
		setLeftSpeed(0);
		setRightSpeed(0);

	}	

	startCalibration = 1;
    759c:	81 e0       	ldi	r24, 0x01	; 1
    759e:	80 93 a8 0b 	sts	0x0BA8, r24
	calibrationCycle = 0;
    75a2:	10 92 72 04 	sts	0x0472, r1
    75a6:	10 92 71 04 	sts	0x0471, r1

		if(calibrationCycle<=CALIBRATION_CYCLES) {

			if(proxUpdated) {

				pwm_red = 255;
    75aa:	1f ef       	ldi	r17, 0xFF	; 255
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
						proximityOffset[i] = 0;
					}				
					
					calibrationCycle++;
    75ac:	c1 e0       	ldi	r28, 0x01	; 1
    75ae:	d0 e0       	ldi	r29, 0x00	; 0
	calibrationCycle = 0;

	// calibrate prox and ground sensors
	while(startCalibration) {

		if(calibrationCycle<=CALIBRATION_CYCLES) {
    75b0:	80 91 71 04 	lds	r24, 0x0471
    75b4:	90 91 72 04 	lds	r25, 0x0472
    75b8:	41 97       	sbiw	r24, 0x11	; 17
    75ba:	84 f4       	brge	.+32     	; 0x75dc <calibrateSensors+0x1da>

			if(proxUpdated) {
    75bc:	80 91 dc 02 	lds	r24, 0x02DC
    75c0:	88 23       	and	r24, r24
    75c2:	09 f0       	breq	.+2      	; 0x75c6 <calibrateSensors+0x1c4>
    75c4:	29 c1       	rjmp	.+594    	; 0x7818 <calibrateSensors+0x416>

	startCalibration = 1;
	calibrationCycle = 0;

	// calibrate prox and ground sensors
	while(startCalibration) {
    75c6:	80 91 a8 0b 	lds	r24, 0x0BA8
    75ca:	88 23       	and	r24, r24
    75cc:	09 f4       	brne	.+2      	; 0x75d0 <calibrateSensors+0x1ce>
    75ce:	08 c1       	rjmp	.+528    	; 0x77e0 <calibrateSensors+0x3de>

		if(calibrationCycle<=CALIBRATION_CYCLES) {
    75d0:	80 91 71 04 	lds	r24, 0x0471
    75d4:	90 91 72 04 	lds	r25, 0x0472
    75d8:	41 97       	sbiw	r24, 0x11	; 17
    75da:	84 f3       	brlt	.-32     	; 0x75bc <calibrateSensors+0x1ba>

			}

		} else {

			pwm_red = 0;
    75dc:	10 92 08 02 	sts	0x0208, r1
			pwm_green = 0;
    75e0:	10 92 09 02 	sts	0x0209, r1
			pwm_blue = 255;
    75e4:	8f ef       	ldi	r24, 0xFF	; 255
    75e6:	80 93 0a 02 	sts	0x020A, r24
			updateRedLed(pwm_red);
    75ea:	80 e0       	ldi	r24, 0x00	; 0
    75ec:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <updateRedLed>
			updateGreenLed(pwm_green);
    75f0:	80 91 09 02 	lds	r24, 0x0209
    75f4:	0e 94 34 36 	call	0x6c68	; 0x6c68 <updateGreenLed>
			updateBlueLed(pwm_blue);
    75f8:	80 91 0a 02 	lds	r24, 0x020A
    75fc:	0e 94 4a 36 	call	0x6c94	; 0x6c94 <updateBlueLed>

			for(i=0;i<12;i++) {
				proximityOffset[i] = proximitySum[i]>>4;
    7600:	80 91 a5 02 	lds	r24, 0x02A5
    7604:	90 91 a6 02 	lds	r25, 0x02A6
    7608:	a0 91 a7 02 	lds	r26, 0x02A7
    760c:	b0 91 a8 02 	lds	r27, 0x02A8
    7610:	e4 e0       	ldi	r30, 0x04	; 4
    7612:	b6 95       	lsr	r27
    7614:	a7 95       	ror	r26
    7616:	97 95       	ror	r25
    7618:	87 95       	ror	r24
    761a:	ea 95       	dec	r30
    761c:	d1 f7       	brne	.-12     	; 0x7612 <calibrateSensors+0x210>
    761e:	90 93 8e 02 	sts	0x028E, r25
    7622:	80 93 8d 02 	sts	0x028D, r24
    7626:	80 91 a9 02 	lds	r24, 0x02A9
    762a:	90 91 aa 02 	lds	r25, 0x02AA
    762e:	a0 91 ab 02 	lds	r26, 0x02AB
    7632:	b0 91 ac 02 	lds	r27, 0x02AC
    7636:	74 e0       	ldi	r23, 0x04	; 4
    7638:	b6 95       	lsr	r27
    763a:	a7 95       	ror	r26
    763c:	97 95       	ror	r25
    763e:	87 95       	ror	r24
    7640:	7a 95       	dec	r23
    7642:	d1 f7       	brne	.-12     	; 0x7638 <calibrateSensors+0x236>
    7644:	90 93 90 02 	sts	0x0290, r25
    7648:	80 93 8f 02 	sts	0x028F, r24
    764c:	80 91 ad 02 	lds	r24, 0x02AD
    7650:	90 91 ae 02 	lds	r25, 0x02AE
    7654:	a0 91 af 02 	lds	r26, 0x02AF
    7658:	b0 91 b0 02 	lds	r27, 0x02B0
    765c:	64 e0       	ldi	r22, 0x04	; 4
    765e:	b6 95       	lsr	r27
    7660:	a7 95       	ror	r26
    7662:	97 95       	ror	r25
    7664:	87 95       	ror	r24
    7666:	6a 95       	dec	r22
    7668:	d1 f7       	brne	.-12     	; 0x765e <calibrateSensors+0x25c>
    766a:	90 93 92 02 	sts	0x0292, r25
    766e:	80 93 91 02 	sts	0x0291, r24
    7672:	80 91 b1 02 	lds	r24, 0x02B1
    7676:	90 91 b2 02 	lds	r25, 0x02B2
    767a:	a0 91 b3 02 	lds	r26, 0x02B3
    767e:	b0 91 b4 02 	lds	r27, 0x02B4
    7682:	54 e0       	ldi	r21, 0x04	; 4
    7684:	b6 95       	lsr	r27
    7686:	a7 95       	ror	r26
    7688:	97 95       	ror	r25
    768a:	87 95       	ror	r24
    768c:	5a 95       	dec	r21
    768e:	d1 f7       	brne	.-12     	; 0x7684 <calibrateSensors+0x282>
    7690:	90 93 94 02 	sts	0x0294, r25
    7694:	80 93 93 02 	sts	0x0293, r24
    7698:	80 91 b5 02 	lds	r24, 0x02B5
    769c:	90 91 b6 02 	lds	r25, 0x02B6
    76a0:	a0 91 b7 02 	lds	r26, 0x02B7
    76a4:	b0 91 b8 02 	lds	r27, 0x02B8
    76a8:	44 e0       	ldi	r20, 0x04	; 4
    76aa:	b6 95       	lsr	r27
    76ac:	a7 95       	ror	r26
    76ae:	97 95       	ror	r25
    76b0:	87 95       	ror	r24
    76b2:	4a 95       	dec	r20
    76b4:	d1 f7       	brne	.-12     	; 0x76aa <calibrateSensors+0x2a8>
    76b6:	90 93 96 02 	sts	0x0296, r25
    76ba:	80 93 95 02 	sts	0x0295, r24
    76be:	80 91 b9 02 	lds	r24, 0x02B9
    76c2:	90 91 ba 02 	lds	r25, 0x02BA
    76c6:	a0 91 bb 02 	lds	r26, 0x02BB
    76ca:	b0 91 bc 02 	lds	r27, 0x02BC
    76ce:	34 e0       	ldi	r19, 0x04	; 4
    76d0:	b6 95       	lsr	r27
    76d2:	a7 95       	ror	r26
    76d4:	97 95       	ror	r25
    76d6:	87 95       	ror	r24
    76d8:	3a 95       	dec	r19
    76da:	d1 f7       	brne	.-12     	; 0x76d0 <calibrateSensors+0x2ce>
    76dc:	90 93 98 02 	sts	0x0298, r25
    76e0:	80 93 97 02 	sts	0x0297, r24
    76e4:	80 91 bd 02 	lds	r24, 0x02BD
    76e8:	90 91 be 02 	lds	r25, 0x02BE
    76ec:	a0 91 bf 02 	lds	r26, 0x02BF
    76f0:	b0 91 c0 02 	lds	r27, 0x02C0
    76f4:	24 e0       	ldi	r18, 0x04	; 4
    76f6:	b6 95       	lsr	r27
    76f8:	a7 95       	ror	r26
    76fa:	97 95       	ror	r25
    76fc:	87 95       	ror	r24
    76fe:	2a 95       	dec	r18
    7700:	d1 f7       	brne	.-12     	; 0x76f6 <calibrateSensors+0x2f4>
    7702:	90 93 9a 02 	sts	0x029A, r25
    7706:	80 93 99 02 	sts	0x0299, r24
    770a:	80 91 c1 02 	lds	r24, 0x02C1
    770e:	90 91 c2 02 	lds	r25, 0x02C2
    7712:	a0 91 c3 02 	lds	r26, 0x02C3
    7716:	b0 91 c4 02 	lds	r27, 0x02C4
    771a:	04 e0       	ldi	r16, 0x04	; 4
    771c:	b6 95       	lsr	r27
    771e:	a7 95       	ror	r26
    7720:	97 95       	ror	r25
    7722:	87 95       	ror	r24
    7724:	0a 95       	dec	r16
    7726:	d1 f7       	brne	.-12     	; 0x771c <calibrateSensors+0x31a>
    7728:	90 93 9c 02 	sts	0x029C, r25
    772c:	80 93 9b 02 	sts	0x029B, r24
    7730:	80 91 c5 02 	lds	r24, 0x02C5
    7734:	90 91 c6 02 	lds	r25, 0x02C6
    7738:	a0 91 c7 02 	lds	r26, 0x02C7
    773c:	b0 91 c8 02 	lds	r27, 0x02C8
    7740:	14 e0       	ldi	r17, 0x04	; 4
    7742:	b6 95       	lsr	r27
    7744:	a7 95       	ror	r26
    7746:	97 95       	ror	r25
    7748:	87 95       	ror	r24
    774a:	1a 95       	dec	r17
    774c:	d1 f7       	brne	.-12     	; 0x7742 <calibrateSensors+0x340>
    774e:	20 91 c9 02 	lds	r18, 0x02C9
    7752:	30 91 ca 02 	lds	r19, 0x02CA
    7756:	40 91 cb 02 	lds	r20, 0x02CB
    775a:	50 91 cc 02 	lds	r21, 0x02CC
    775e:	f4 e0       	ldi	r31, 0x04	; 4
    7760:	56 95       	lsr	r21
    7762:	47 95       	ror	r20
    7764:	37 95       	ror	r19
    7766:	27 95       	ror	r18
    7768:	fa 95       	dec	r31
    776a:	d1 f7       	brne	.-12     	; 0x7760 <calibrateSensors+0x35e>
    776c:	e0 90 cd 02 	lds	r14, 0x02CD
    7770:	f0 90 ce 02 	lds	r15, 0x02CE
    7774:	00 91 cf 02 	lds	r16, 0x02CF
    7778:	10 91 d0 02 	lds	r17, 0x02D0
    777c:	e4 e0       	ldi	r30, 0x04	; 4
    777e:	16 95       	lsr	r17
    7780:	07 95       	ror	r16
    7782:	f7 94       	ror	r15
    7784:	e7 94       	ror	r14
    7786:	ea 95       	dec	r30
    7788:	d1 f7       	brne	.-12     	; 0x777e <calibrateSensors+0x37c>
    778a:	a0 90 d1 02 	lds	r10, 0x02D1
    778e:	b0 90 d2 02 	lds	r11, 0x02D2
    7792:	c0 90 d3 02 	lds	r12, 0x02D3
    7796:	d0 90 d4 02 	lds	r13, 0x02D4
    779a:	74 e0       	ldi	r23, 0x04	; 4
    779c:	d6 94       	lsr	r13
    779e:	c7 94       	ror	r12
    77a0:	b7 94       	ror	r11
    77a2:	a7 94       	ror	r10
    77a4:	7a 95       	dec	r23
    77a6:	d1 f7       	brne	.-12     	; 0x779c <calibrateSensors+0x39a>
			}

			for(i=8; i<12; i++) {
				proximityOffset[i] -= 512;	// move the "0" to 512 (values around 512)
    77a8:	80 50       	subi	r24, 0x00	; 0
    77aa:	92 40       	sbci	r25, 0x02	; 2
    77ac:	90 93 9e 02 	sts	0x029E, r25
    77b0:	80 93 9d 02 	sts	0x029D, r24
    77b4:	20 50       	subi	r18, 0x00	; 0
    77b6:	32 40       	sbci	r19, 0x02	; 2
    77b8:	30 93 a0 02 	sts	0x02A0, r19
    77bc:	20 93 9f 02 	sts	0x029F, r18
    77c0:	80 e0       	ldi	r24, 0x00	; 0
    77c2:	9e ef       	ldi	r25, 0xFE	; 254
    77c4:	e8 0e       	add	r14, r24
    77c6:	f9 1e       	adc	r15, r25
    77c8:	f0 92 a2 02 	sts	0x02A2, r15
    77cc:	e0 92 a1 02 	sts	0x02A1, r14
    77d0:	a8 0e       	add	r10, r24
    77d2:	b9 1e       	adc	r11, r25
    77d4:	b0 92 a4 02 	sts	0x02A4, r11
    77d8:	a0 92 a3 02 	sts	0x02A3, r10
			}

			//proxUpdated = 0;
			//if(proxUpdated) {	
				startCalibration = 0;					
    77dc:	10 92 a8 0b 	sts	0x0BA8, r1

		}

	}

	pwm_red = 255;
    77e0:	8f ef       	ldi	r24, 0xFF	; 255
    77e2:	80 93 08 02 	sts	0x0208, r24
	pwm_green = 255;
    77e6:	80 93 09 02 	sts	0x0209, r24
	pwm_blue = 255;
    77ea:	80 93 0a 02 	sts	0x020A, r24
	updateRedLed(pwm_red);
    77ee:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <updateRedLed>
	updateGreenLed(pwm_green);
    77f2:	80 91 09 02 	lds	r24, 0x0209
    77f6:	0e 94 34 36 	call	0x6c68	; 0x6c68 <updateGreenLed>
	updateBlueLed(pwm_blue);
    77fa:	80 91 0a 02 	lds	r24, 0x020A
    77fe:	0e 94 4a 36 	call	0x6c94	; 0x6c94 <updateBlueLed>

}
    7802:	df 91       	pop	r29
    7804:	cf 91       	pop	r28
    7806:	1f 91       	pop	r17
    7808:	0f 91       	pop	r16
    780a:	ff 90       	pop	r15
    780c:	ef 90       	pop	r14
    780e:	df 90       	pop	r13
    7810:	cf 90       	pop	r12
    7812:	bf 90       	pop	r11
    7814:	af 90       	pop	r10
    7816:	08 95       	ret

		if(calibrationCycle<=CALIBRATION_CYCLES) {

			if(proxUpdated) {

				pwm_red = 255;
    7818:	10 93 08 02 	sts	0x0208, r17
				pwm_green = 255;
    781c:	10 93 09 02 	sts	0x0209, r17
				pwm_blue = 0;
    7820:	10 92 0a 02 	sts	0x020A, r1
				updateRedLed(pwm_red);
    7824:	8f ef       	ldi	r24, 0xFF	; 255
    7826:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <updateRedLed>
				updateGreenLed(pwm_green);
    782a:	80 91 09 02 	lds	r24, 0x0209
    782e:	0e 94 34 36 	call	0x6c68	; 0x6c68 <updateGreenLed>
				updateBlueLed(pwm_blue);
    7832:	80 91 0a 02 	lds	r24, 0x020A
    7836:	0e 94 4a 36 	call	0x6c94	; 0x6c94 <updateBlueLed>

				proxUpdated = 0;
    783a:	10 92 dc 02 	sts	0x02DC, r1

				if(calibrationCycle==0) {		// reset all variables
    783e:	60 91 71 04 	lds	r22, 0x0471
    7842:	70 91 72 04 	lds	r23, 0x0472
    7846:	61 15       	cp	r22, r1
    7848:	71 05       	cpc	r23, r1
    784a:	09 f0       	breq	.+2      	; 0x784e <calibrateSensors+0x44c>
    784c:	95 c0       	rjmp	.+298    	; 0x7978 <calibrateSensors+0x576>

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    784e:	10 92 a5 02 	sts	0x02A5, r1
    7852:	10 92 a6 02 	sts	0x02A6, r1
    7856:	10 92 a7 02 	sts	0x02A7, r1
    785a:	10 92 a8 02 	sts	0x02A8, r1
						proximityOffset[i] = 0;
    785e:	10 92 8e 02 	sts	0x028E, r1
    7862:	10 92 8d 02 	sts	0x028D, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    7866:	10 92 a9 02 	sts	0x02A9, r1
    786a:	10 92 aa 02 	sts	0x02AA, r1
    786e:	10 92 ab 02 	sts	0x02AB, r1
    7872:	10 92 ac 02 	sts	0x02AC, r1
						proximityOffset[i] = 0;
    7876:	10 92 90 02 	sts	0x0290, r1
    787a:	10 92 8f 02 	sts	0x028F, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    787e:	10 92 ad 02 	sts	0x02AD, r1
    7882:	10 92 ae 02 	sts	0x02AE, r1
    7886:	10 92 af 02 	sts	0x02AF, r1
    788a:	10 92 b0 02 	sts	0x02B0, r1
						proximityOffset[i] = 0;
    788e:	10 92 92 02 	sts	0x0292, r1
    7892:	10 92 91 02 	sts	0x0291, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    7896:	10 92 b1 02 	sts	0x02B1, r1
    789a:	10 92 b2 02 	sts	0x02B2, r1
    789e:	10 92 b3 02 	sts	0x02B3, r1
    78a2:	10 92 b4 02 	sts	0x02B4, r1
						proximityOffset[i] = 0;
    78a6:	10 92 94 02 	sts	0x0294, r1
    78aa:	10 92 93 02 	sts	0x0293, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    78ae:	10 92 b5 02 	sts	0x02B5, r1
    78b2:	10 92 b6 02 	sts	0x02B6, r1
    78b6:	10 92 b7 02 	sts	0x02B7, r1
    78ba:	10 92 b8 02 	sts	0x02B8, r1
						proximityOffset[i] = 0;
    78be:	10 92 96 02 	sts	0x0296, r1
    78c2:	10 92 95 02 	sts	0x0295, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    78c6:	10 92 b9 02 	sts	0x02B9, r1
    78ca:	10 92 ba 02 	sts	0x02BA, r1
    78ce:	10 92 bb 02 	sts	0x02BB, r1
    78d2:	10 92 bc 02 	sts	0x02BC, r1
						proximityOffset[i] = 0;
    78d6:	10 92 98 02 	sts	0x0298, r1
    78da:	10 92 97 02 	sts	0x0297, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    78de:	10 92 bd 02 	sts	0x02BD, r1
    78e2:	10 92 be 02 	sts	0x02BE, r1
    78e6:	10 92 bf 02 	sts	0x02BF, r1
    78ea:	10 92 c0 02 	sts	0x02C0, r1
						proximityOffset[i] = 0;
    78ee:	10 92 9a 02 	sts	0x029A, r1
    78f2:	10 92 99 02 	sts	0x0299, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    78f6:	10 92 c1 02 	sts	0x02C1, r1
    78fa:	10 92 c2 02 	sts	0x02C2, r1
    78fe:	10 92 c3 02 	sts	0x02C3, r1
    7902:	10 92 c4 02 	sts	0x02C4, r1
						proximityOffset[i] = 0;
    7906:	10 92 9c 02 	sts	0x029C, r1
    790a:	10 92 9b 02 	sts	0x029B, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    790e:	10 92 c5 02 	sts	0x02C5, r1
    7912:	10 92 c6 02 	sts	0x02C6, r1
    7916:	10 92 c7 02 	sts	0x02C7, r1
    791a:	10 92 c8 02 	sts	0x02C8, r1
						proximityOffset[i] = 0;
    791e:	10 92 9e 02 	sts	0x029E, r1
    7922:	10 92 9d 02 	sts	0x029D, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    7926:	10 92 c9 02 	sts	0x02C9, r1
    792a:	10 92 ca 02 	sts	0x02CA, r1
    792e:	10 92 cb 02 	sts	0x02CB, r1
    7932:	10 92 cc 02 	sts	0x02CC, r1
						proximityOffset[i] = 0;
    7936:	10 92 a0 02 	sts	0x02A0, r1
    793a:	10 92 9f 02 	sts	0x029F, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    793e:	10 92 cd 02 	sts	0x02CD, r1
    7942:	10 92 ce 02 	sts	0x02CE, r1
    7946:	10 92 cf 02 	sts	0x02CF, r1
    794a:	10 92 d0 02 	sts	0x02D0, r1
						proximityOffset[i] = 0;
    794e:	10 92 a2 02 	sts	0x02A2, r1
    7952:	10 92 a1 02 	sts	0x02A1, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    7956:	10 92 d1 02 	sts	0x02D1, r1
    795a:	10 92 d2 02 	sts	0x02D2, r1
    795e:	10 92 d3 02 	sts	0x02D3, r1
    7962:	10 92 d4 02 	sts	0x02D4, r1
						proximityOffset[i] = 0;
    7966:	10 92 a4 02 	sts	0x02A4, r1
    796a:	10 92 a3 02 	sts	0x02A3, r1
					}				
					
					calibrationCycle++;
    796e:	d0 93 72 04 	sts	0x0472, r29
    7972:	c0 93 71 04 	sts	0x0471, r28
    7976:	27 ce       	rjmp	.-946    	; 0x75c6 <calibrateSensors+0x1c4>
												// "proximityResult" hasn't the offset reset to 0. so we start the actual calibration
												// the next time
				}

				for (i=0;i<12;i++) {
					proximitySum[i] += proximityResult[i];
    7978:	80 91 75 02 	lds	r24, 0x0275
    797c:	90 91 76 02 	lds	r25, 0x0276
    7980:	aa 27       	eor	r26, r26
    7982:	97 fd       	sbrc	r25, 7
    7984:	a0 95       	com	r26
    7986:	ba 2f       	mov	r27, r26
    7988:	20 91 a5 02 	lds	r18, 0x02A5
    798c:	30 91 a6 02 	lds	r19, 0x02A6
    7990:	40 91 a7 02 	lds	r20, 0x02A7
    7994:	50 91 a8 02 	lds	r21, 0x02A8
    7998:	82 0f       	add	r24, r18
    799a:	93 1f       	adc	r25, r19
    799c:	a4 1f       	adc	r26, r20
    799e:	b5 1f       	adc	r27, r21
    79a0:	80 93 a5 02 	sts	0x02A5, r24
    79a4:	90 93 a6 02 	sts	0x02A6, r25
    79a8:	a0 93 a7 02 	sts	0x02A7, r26
    79ac:	b0 93 a8 02 	sts	0x02A8, r27
    79b0:	80 91 77 02 	lds	r24, 0x0277
    79b4:	90 91 78 02 	lds	r25, 0x0278
    79b8:	aa 27       	eor	r26, r26
    79ba:	97 fd       	sbrc	r25, 7
    79bc:	a0 95       	com	r26
    79be:	ba 2f       	mov	r27, r26
    79c0:	20 91 a9 02 	lds	r18, 0x02A9
    79c4:	30 91 aa 02 	lds	r19, 0x02AA
    79c8:	40 91 ab 02 	lds	r20, 0x02AB
    79cc:	50 91 ac 02 	lds	r21, 0x02AC
    79d0:	82 0f       	add	r24, r18
    79d2:	93 1f       	adc	r25, r19
    79d4:	a4 1f       	adc	r26, r20
    79d6:	b5 1f       	adc	r27, r21
    79d8:	80 93 a9 02 	sts	0x02A9, r24
    79dc:	90 93 aa 02 	sts	0x02AA, r25
    79e0:	a0 93 ab 02 	sts	0x02AB, r26
    79e4:	b0 93 ac 02 	sts	0x02AC, r27
    79e8:	80 91 79 02 	lds	r24, 0x0279
    79ec:	90 91 7a 02 	lds	r25, 0x027A
    79f0:	aa 27       	eor	r26, r26
    79f2:	97 fd       	sbrc	r25, 7
    79f4:	a0 95       	com	r26
    79f6:	ba 2f       	mov	r27, r26
    79f8:	20 91 ad 02 	lds	r18, 0x02AD
    79fc:	30 91 ae 02 	lds	r19, 0x02AE
    7a00:	40 91 af 02 	lds	r20, 0x02AF
    7a04:	50 91 b0 02 	lds	r21, 0x02B0
    7a08:	82 0f       	add	r24, r18
    7a0a:	93 1f       	adc	r25, r19
    7a0c:	a4 1f       	adc	r26, r20
    7a0e:	b5 1f       	adc	r27, r21
    7a10:	80 93 ad 02 	sts	0x02AD, r24
    7a14:	90 93 ae 02 	sts	0x02AE, r25
    7a18:	a0 93 af 02 	sts	0x02AF, r26
    7a1c:	b0 93 b0 02 	sts	0x02B0, r27
    7a20:	80 91 7b 02 	lds	r24, 0x027B
    7a24:	90 91 7c 02 	lds	r25, 0x027C
    7a28:	aa 27       	eor	r26, r26
    7a2a:	97 fd       	sbrc	r25, 7
    7a2c:	a0 95       	com	r26
    7a2e:	ba 2f       	mov	r27, r26
    7a30:	20 91 b1 02 	lds	r18, 0x02B1
    7a34:	30 91 b2 02 	lds	r19, 0x02B2
    7a38:	40 91 b3 02 	lds	r20, 0x02B3
    7a3c:	50 91 b4 02 	lds	r21, 0x02B4
    7a40:	82 0f       	add	r24, r18
    7a42:	93 1f       	adc	r25, r19
    7a44:	a4 1f       	adc	r26, r20
    7a46:	b5 1f       	adc	r27, r21
    7a48:	80 93 b1 02 	sts	0x02B1, r24
    7a4c:	90 93 b2 02 	sts	0x02B2, r25
    7a50:	a0 93 b3 02 	sts	0x02B3, r26
    7a54:	b0 93 b4 02 	sts	0x02B4, r27
    7a58:	80 91 7d 02 	lds	r24, 0x027D
    7a5c:	90 91 7e 02 	lds	r25, 0x027E
    7a60:	aa 27       	eor	r26, r26
    7a62:	97 fd       	sbrc	r25, 7
    7a64:	a0 95       	com	r26
    7a66:	ba 2f       	mov	r27, r26
    7a68:	20 91 b5 02 	lds	r18, 0x02B5
    7a6c:	30 91 b6 02 	lds	r19, 0x02B6
    7a70:	40 91 b7 02 	lds	r20, 0x02B7
    7a74:	50 91 b8 02 	lds	r21, 0x02B8
    7a78:	82 0f       	add	r24, r18
    7a7a:	93 1f       	adc	r25, r19
    7a7c:	a4 1f       	adc	r26, r20
    7a7e:	b5 1f       	adc	r27, r21
    7a80:	80 93 b5 02 	sts	0x02B5, r24
    7a84:	90 93 b6 02 	sts	0x02B6, r25
    7a88:	a0 93 b7 02 	sts	0x02B7, r26
    7a8c:	b0 93 b8 02 	sts	0x02B8, r27
    7a90:	80 91 7f 02 	lds	r24, 0x027F
    7a94:	90 91 80 02 	lds	r25, 0x0280
    7a98:	aa 27       	eor	r26, r26
    7a9a:	97 fd       	sbrc	r25, 7
    7a9c:	a0 95       	com	r26
    7a9e:	ba 2f       	mov	r27, r26
    7aa0:	20 91 b9 02 	lds	r18, 0x02B9
    7aa4:	30 91 ba 02 	lds	r19, 0x02BA
    7aa8:	40 91 bb 02 	lds	r20, 0x02BB
    7aac:	50 91 bc 02 	lds	r21, 0x02BC
    7ab0:	82 0f       	add	r24, r18
    7ab2:	93 1f       	adc	r25, r19
    7ab4:	a4 1f       	adc	r26, r20
    7ab6:	b5 1f       	adc	r27, r21
    7ab8:	80 93 b9 02 	sts	0x02B9, r24
    7abc:	90 93 ba 02 	sts	0x02BA, r25
    7ac0:	a0 93 bb 02 	sts	0x02BB, r26
    7ac4:	b0 93 bc 02 	sts	0x02BC, r27
    7ac8:	80 91 81 02 	lds	r24, 0x0281
    7acc:	90 91 82 02 	lds	r25, 0x0282
    7ad0:	aa 27       	eor	r26, r26
    7ad2:	97 fd       	sbrc	r25, 7
    7ad4:	a0 95       	com	r26
    7ad6:	ba 2f       	mov	r27, r26
    7ad8:	20 91 bd 02 	lds	r18, 0x02BD
    7adc:	30 91 be 02 	lds	r19, 0x02BE
    7ae0:	40 91 bf 02 	lds	r20, 0x02BF
    7ae4:	50 91 c0 02 	lds	r21, 0x02C0
    7ae8:	82 0f       	add	r24, r18
    7aea:	93 1f       	adc	r25, r19
    7aec:	a4 1f       	adc	r26, r20
    7aee:	b5 1f       	adc	r27, r21
    7af0:	80 93 bd 02 	sts	0x02BD, r24
    7af4:	90 93 be 02 	sts	0x02BE, r25
    7af8:	a0 93 bf 02 	sts	0x02BF, r26
    7afc:	b0 93 c0 02 	sts	0x02C0, r27
    7b00:	80 91 83 02 	lds	r24, 0x0283
    7b04:	90 91 84 02 	lds	r25, 0x0284
    7b08:	aa 27       	eor	r26, r26
    7b0a:	97 fd       	sbrc	r25, 7
    7b0c:	a0 95       	com	r26
    7b0e:	ba 2f       	mov	r27, r26
    7b10:	20 91 c1 02 	lds	r18, 0x02C1
    7b14:	30 91 c2 02 	lds	r19, 0x02C2
    7b18:	40 91 c3 02 	lds	r20, 0x02C3
    7b1c:	50 91 c4 02 	lds	r21, 0x02C4
    7b20:	82 0f       	add	r24, r18
    7b22:	93 1f       	adc	r25, r19
    7b24:	a4 1f       	adc	r26, r20
    7b26:	b5 1f       	adc	r27, r21
    7b28:	80 93 c1 02 	sts	0x02C1, r24
    7b2c:	90 93 c2 02 	sts	0x02C2, r25
    7b30:	a0 93 c3 02 	sts	0x02C3, r26
    7b34:	b0 93 c4 02 	sts	0x02C4, r27
    7b38:	80 91 85 02 	lds	r24, 0x0285
    7b3c:	90 91 86 02 	lds	r25, 0x0286
    7b40:	aa 27       	eor	r26, r26
    7b42:	97 fd       	sbrc	r25, 7
    7b44:	a0 95       	com	r26
    7b46:	ba 2f       	mov	r27, r26
    7b48:	20 91 c5 02 	lds	r18, 0x02C5
    7b4c:	30 91 c6 02 	lds	r19, 0x02C6
    7b50:	40 91 c7 02 	lds	r20, 0x02C7
    7b54:	50 91 c8 02 	lds	r21, 0x02C8
    7b58:	82 0f       	add	r24, r18
    7b5a:	93 1f       	adc	r25, r19
    7b5c:	a4 1f       	adc	r26, r20
    7b5e:	b5 1f       	adc	r27, r21
    7b60:	80 93 c5 02 	sts	0x02C5, r24
    7b64:	90 93 c6 02 	sts	0x02C6, r25
    7b68:	a0 93 c7 02 	sts	0x02C7, r26
    7b6c:	b0 93 c8 02 	sts	0x02C8, r27
    7b70:	80 91 87 02 	lds	r24, 0x0287
    7b74:	90 91 88 02 	lds	r25, 0x0288
    7b78:	aa 27       	eor	r26, r26
    7b7a:	97 fd       	sbrc	r25, 7
    7b7c:	a0 95       	com	r26
    7b7e:	ba 2f       	mov	r27, r26
    7b80:	20 91 c9 02 	lds	r18, 0x02C9
    7b84:	30 91 ca 02 	lds	r19, 0x02CA
    7b88:	40 91 cb 02 	lds	r20, 0x02CB
    7b8c:	50 91 cc 02 	lds	r21, 0x02CC
    7b90:	82 0f       	add	r24, r18
    7b92:	93 1f       	adc	r25, r19
    7b94:	a4 1f       	adc	r26, r20
    7b96:	b5 1f       	adc	r27, r21
    7b98:	80 93 c9 02 	sts	0x02C9, r24
    7b9c:	90 93 ca 02 	sts	0x02CA, r25
    7ba0:	a0 93 cb 02 	sts	0x02CB, r26
    7ba4:	b0 93 cc 02 	sts	0x02CC, r27
    7ba8:	80 91 89 02 	lds	r24, 0x0289
    7bac:	90 91 8a 02 	lds	r25, 0x028A
    7bb0:	aa 27       	eor	r26, r26
    7bb2:	97 fd       	sbrc	r25, 7
    7bb4:	a0 95       	com	r26
    7bb6:	ba 2f       	mov	r27, r26
    7bb8:	20 91 cd 02 	lds	r18, 0x02CD
    7bbc:	30 91 ce 02 	lds	r19, 0x02CE
    7bc0:	40 91 cf 02 	lds	r20, 0x02CF
    7bc4:	50 91 d0 02 	lds	r21, 0x02D0
    7bc8:	82 0f       	add	r24, r18
    7bca:	93 1f       	adc	r25, r19
    7bcc:	a4 1f       	adc	r26, r20
    7bce:	b5 1f       	adc	r27, r21
    7bd0:	80 93 cd 02 	sts	0x02CD, r24
    7bd4:	90 93 ce 02 	sts	0x02CE, r25
    7bd8:	a0 93 cf 02 	sts	0x02CF, r26
    7bdc:	b0 93 d0 02 	sts	0x02D0, r27
    7be0:	80 91 8b 02 	lds	r24, 0x028B
    7be4:	90 91 8c 02 	lds	r25, 0x028C
    7be8:	aa 27       	eor	r26, r26
    7bea:	97 fd       	sbrc	r25, 7
    7bec:	a0 95       	com	r26
    7bee:	ba 2f       	mov	r27, r26
    7bf0:	20 91 d1 02 	lds	r18, 0x02D1
    7bf4:	30 91 d2 02 	lds	r19, 0x02D2
    7bf8:	40 91 d3 02 	lds	r20, 0x02D3
    7bfc:	50 91 d4 02 	lds	r21, 0x02D4
    7c00:	82 0f       	add	r24, r18
    7c02:	93 1f       	adc	r25, r19
    7c04:	a4 1f       	adc	r26, r20
    7c06:	b5 1f       	adc	r27, r21
    7c08:	80 93 d1 02 	sts	0x02D1, r24
    7c0c:	90 93 d2 02 	sts	0x02D2, r25
    7c10:	a0 93 d3 02 	sts	0x02D3, r26
    7c14:	b0 93 d4 02 	sts	0x02D4, r27
				}

				calibrationCycle++;
    7c18:	6f 5f       	subi	r22, 0xFF	; 255
    7c1a:	7f 4f       	sbci	r23, 0xFF	; 255
    7c1c:	70 93 72 04 	sts	0x0472, r23
    7c20:	60 93 71 04 	sts	0x0471, r22
    7c24:	d0 cc       	rjmp	.-1632   	; 0x75c6 <calibrateSensors+0x1c4>

		}

	} else {

		pwm_red = 255;
    7c26:	8f ef       	ldi	r24, 0xFF	; 255
    7c28:	80 93 08 02 	sts	0x0208, r24
		pwm_green = 0;
    7c2c:	10 92 09 02 	sts	0x0209, r1
		pwm_blue = 255;
    7c30:	80 93 0a 02 	sts	0x020A, r24
		updateRedLed(pwm_red);
    7c34:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <updateRedLed>
		updateGreenLed(pwm_green);
    7c38:	80 91 09 02 	lds	r24, 0x0209
    7c3c:	0e 94 34 36 	call	0x6c68	; 0x6c68 <updateGreenLed>
		updateBlueLed(pwm_blue);
    7c40:	80 91 0a 02 	lds	r24, 0x020A
    7c44:	0e 94 4a 36 	call	0x6c94	; 0x6c94 <updateBlueLed>

		setLeftSpeed(-10);
    7c48:	86 ef       	ldi	r24, 0xF6	; 246
    7c4a:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <setLeftSpeed>
		setRightSpeed(10);
    7c4e:	8a e0       	ldi	r24, 0x0A	; 10
    7c50:	0e 94 13 18 	call	0x3026	; 0x3026 <setRightSpeed>

		lastTick = getTime100MicroSec();
    7c54:	0e 94 04 10 	call	0x2008	; 0x2008 <getTime100MicroSec>
    7c58:	60 93 90 04 	sts	0x0490, r22
    7c5c:	70 93 91 04 	sts	0x0491, r23
    7c60:	80 93 92 04 	sts	0x0492, r24
    7c64:	90 93 93 04 	sts	0x0493, r25
    7c68:	3d c0       	rjmp	.+122    	; 0x7ce4 <calibrateSensors+0x8e2>
			readAccelXYZ();

			handleMotorsWithSpeedController();

			if((getTime100MicroSec()-lastTick) < PAUSE_4_SEC) {
				if(accXMax < accX) {
    7c6a:	20 91 4c 04 	lds	r18, 0x044C
    7c6e:	30 91 4d 04 	lds	r19, 0x044D
    7c72:	80 91 5a 04 	lds	r24, 0x045A
    7c76:	90 91 5b 04 	lds	r25, 0x045B
    7c7a:	82 17       	cp	r24, r18
    7c7c:	93 07       	cpc	r25, r19
    7c7e:	24 f4       	brge	.+8      	; 0x7c88 <calibrateSensors+0x886>
					accXMax = accX;
    7c80:	30 93 5b 04 	sts	0x045B, r19
    7c84:	20 93 5a 04 	sts	0x045A, r18
				}
				if(accXMin > accX) {
    7c88:	80 91 5c 04 	lds	r24, 0x045C
    7c8c:	90 91 5d 04 	lds	r25, 0x045D
    7c90:	28 17       	cp	r18, r24
    7c92:	39 07       	cpc	r19, r25
    7c94:	24 f4       	brge	.+8      	; 0x7c9e <calibrateSensors+0x89c>
					accXMin = accX;
    7c96:	30 93 5d 04 	sts	0x045D, r19
    7c9a:	20 93 5c 04 	sts	0x045C, r18
				}
				if(accYMax < accY) {
    7c9e:	20 91 4e 04 	lds	r18, 0x044E
    7ca2:	30 91 4f 04 	lds	r19, 0x044F
    7ca6:	80 91 5e 04 	lds	r24, 0x045E
    7caa:	90 91 5f 04 	lds	r25, 0x045F
    7cae:	82 17       	cp	r24, r18
    7cb0:	93 07       	cpc	r25, r19
    7cb2:	24 f4       	brge	.+8      	; 0x7cbc <calibrateSensors+0x8ba>
					accYMax = accY;
    7cb4:	30 93 5f 04 	sts	0x045F, r19
    7cb8:	20 93 5e 04 	sts	0x045E, r18
				}
				if(accYMin > accY) {
    7cbc:	80 91 60 04 	lds	r24, 0x0460
    7cc0:	90 91 61 04 	lds	r25, 0x0461
    7cc4:	28 17       	cp	r18, r24
    7cc6:	39 07       	cpc	r19, r25
    7cc8:	24 f4       	brge	.+8      	; 0x7cd2 <calibrateSensors+0x8d0>
					accYMin = accY;
    7cca:	30 93 61 04 	sts	0x0461, r19
    7cce:	20 93 60 04 	sts	0x0460, r18
				}
				calibrationCycle++;
    7cd2:	80 91 71 04 	lds	r24, 0x0471
    7cd6:	90 91 72 04 	lds	r25, 0x0472
    7cda:	01 96       	adiw	r24, 0x01	; 1
    7cdc:	90 93 72 04 	sts	0x0472, r25
    7ce0:	80 93 71 04 	sts	0x0471, r24

		lastTick = getTime100MicroSec();

		while(1) {

			readAccelXYZ();
    7ce4:	0e 94 c2 38 	call	0x7184	; 0x7184 <readAccelXYZ>

			handleMotorsWithSpeedController();
    7ce8:	0e 94 31 2a 	call	0x5462	; 0x5462 <handleMotorsWithSpeedController>

			if((getTime100MicroSec()-lastTick) < PAUSE_4_SEC) {
    7cec:	0e 94 04 10 	call	0x2008	; 0x2008 <getTime100MicroSec>
    7cf0:	20 91 90 04 	lds	r18, 0x0490
    7cf4:	30 91 91 04 	lds	r19, 0x0491
    7cf8:	40 91 92 04 	lds	r20, 0x0492
    7cfc:	50 91 93 04 	lds	r21, 0x0493
    7d00:	62 1b       	sub	r22, r18
    7d02:	73 0b       	sbc	r23, r19
    7d04:	84 0b       	sbc	r24, r20
    7d06:	95 0b       	sbc	r25, r21
    7d08:	6e 53       	subi	r22, 0x3E	; 62
    7d0a:	76 49       	sbci	r23, 0x96	; 150
    7d0c:	80 40       	sbci	r24, 0x00	; 0
    7d0e:	90 40       	sbci	r25, 0x00	; 0
    7d10:	08 f4       	brcc	.+2      	; 0x7d14 <calibrateSensors+0x912>
    7d12:	ab cf       	rjmp	.-170    	; 0x7c6a <calibrateSensors+0x868>
				if(accYMin > accY) {
					accYMin = accY;
				}
				calibrationCycle++;
			} else {
				accOffsetX = (accXMax + accXMin)>>1;
    7d14:	80 91 5c 04 	lds	r24, 0x045C
    7d18:	90 91 5d 04 	lds	r25, 0x045D
    7d1c:	20 91 5a 04 	lds	r18, 0x045A
    7d20:	30 91 5b 04 	lds	r19, 0x045B
    7d24:	82 0f       	add	r24, r18
    7d26:	93 1f       	adc	r25, r19
    7d28:	95 95       	asr	r25
    7d2a:	87 95       	ror	r24
    7d2c:	90 93 53 04 	sts	0x0453, r25
    7d30:	80 93 52 04 	sts	0x0452, r24
				accOffsetY = (accYMax + accYMin)>>1;
    7d34:	80 91 60 04 	lds	r24, 0x0460
    7d38:	90 91 61 04 	lds	r25, 0x0461
    7d3c:	20 91 5e 04 	lds	r18, 0x045E
    7d40:	30 91 5f 04 	lds	r19, 0x045F
    7d44:	82 0f       	add	r24, r18
    7d46:	93 1f       	adc	r25, r19
    7d48:	95 95       	asr	r25
    7d4a:	87 95       	ror	r24
    7d4c:	90 93 55 04 	sts	0x0455, r25
    7d50:	80 93 54 04 	sts	0x0454, r24
				break;
			}

		}

		setLeftSpeed(0);
    7d54:	80 e0       	ldi	r24, 0x00	; 0
    7d56:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <setLeftSpeed>
		setRightSpeed(0);
    7d5a:	80 e0       	ldi	r24, 0x00	; 0
    7d5c:	0e 94 13 18 	call	0x3026	; 0x3026 <setRightSpeed>
    7d60:	1d cc       	rjmp	.-1990   	; 0x759c <calibrateSensors+0x19a>
	accYMax = -1023;
	accYMin = 1023;
	accOffsetXSum = 0;
	accOffsetYSum = 0;

	if(abs(accZ) >= VERTICAL_THRESHOLD) {
    7d62:	90 95       	com	r25
    7d64:	81 95       	neg	r24
    7d66:	9f 4f       	sbci	r25, 0xFF	; 255
    7d68:	b0 cb       	rjmp	.-2208   	; 0x74ca <calibrateSensors+0xc8>

00007d6a <initAccelerometer>:

void initAccelerometer() {

	unsigned char ret;

	i2c_init();		// init I2C bus
    7d6a:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <i2c_init>
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7d6e:	80 91 10 02 	lds	r24, 0x0210
    7d72:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    7d76:	88 23       	and	r24, r24
    7d78:	49 f4       	brne	.+18     	; 0x7d8c <initAccelerometer+0x22>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    7d7a:	86 e1       	ldi	r24, 0x16	; 22
    7d7c:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    7d80:	85 e4       	ldi	r24, 0x45	; 69
    7d82:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    7d86:	0e 94 77 0e 	call	0x1cee	; 0x1cee <i2c_stop>
    7d8a:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    7d8c:	0e 94 77 0e 	call	0x1cee	; 0x1cee <i2c_stop>
	i2c_init();		// init I2C bus

	ret = initMMA7455L();

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
    7d90:	86 ea       	ldi	r24, 0xA6	; 166
    7d92:	90 e0       	ldi	r25, 0x00	; 0
    7d94:	90 93 11 02 	sts	0x0211, r25
    7d98:	80 93 10 02 	sts	0x0210, r24
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7d9c:	86 ea       	ldi	r24, 0xA6	; 166
    7d9e:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    7da2:	88 23       	and	r24, r24
    7da4:	41 f5       	brne	.+80     	; 0x7df6 <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    7da6:	8d e2       	ldi	r24, 0x2D	; 45
    7da8:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <i2c_write>
        i2c_write(0x08);	// measurement mode
    7dac:	88 e0       	ldi	r24, 0x08	; 8
    7dae:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    7db2:	0e 94 77 0e 	call	0x1cee	; 0x1cee <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7db6:	80 91 10 02 	lds	r24, 0x0210
    7dba:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    7dbe:	88 23       	and	r24, r24
    7dc0:	d1 f4       	brne	.+52     	; 0x7df6 <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    7dc2:	81 e3       	ldi	r24, 0x31	; 49
    7dc4:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    7dc8:	80 e0       	ldi	r24, 0x00	; 0
    7dca:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    7dce:	0e 94 77 0e 	call	0x1cee	; 0x1cee <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7dd2:	80 91 10 02 	lds	r24, 0x0210
    7dd6:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    7dda:	88 23       	and	r24, r24
    7ddc:	61 f4       	brne	.+24     	; 0x7df6 <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    7dde:	8c e2       	ldi	r24, 0x2C	; 44
    7de0:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    7de4:	89 e0       	ldi	r24, 0x09	; 9
    7de6:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    7dea:	0e 94 77 0e 	call	0x1cee	; 0x1cee <i2c_stop>
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
		} else {
			useAccel = USE_ADXL345;
    7dee:	81 e0       	ldi	r24, 0x01	; 1
    7df0:	80 93 4b 04 	sts	0x044B, r24
    7df4:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    7df6:	0e 94 77 0e 	call	0x1cee	; 0x1cee <i2c_stop>

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
    7dfa:	82 e0       	ldi	r24, 0x02	; 2
    7dfc:	80 93 4b 04 	sts	0x044B, r24
    7e00:	08 95       	ret

00007e02 <readCalibrationFromFlash>:
	eeprom_update_block(calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
	eeprom_update_word ((uint16_t*) CALIB_CHECK_ADDRESS, 0xAA55);   // to let know the calibration data are valid
}

void readCalibrationFromFlash() {
	eeprom_read_block (calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
    7e02:	80 e1       	ldi	r24, 0x10	; 16
    7e04:	99 e0       	ldi	r25, 0x09	; 9
    7e06:	6c e6       	ldi	r22, 0x6C	; 108
    7e08:	7f e0       	ldi	r23, 0x0F	; 15
    7e0a:	40 e9       	ldi	r20, 0x90	; 144
    7e0c:	50 e0       	ldi	r21, 0x00	; 0
    7e0e:	0e 94 7e 58 	call	0xb0fc	; 0xb0fc <__eerd_block_m2560>
}
    7e12:	08 95       	ret

00007e14 <writeCalibrationToFlash>:


#include "eepromIO.h"

void writeCalibrationToFlash() {	
	eeprom_update_block(calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
    7e14:	80 e1       	ldi	r24, 0x10	; 16
    7e16:	99 e0       	ldi	r25, 0x09	; 9
    7e18:	6c e6       	ldi	r22, 0x6C	; 108
    7e1a:	7f e0       	ldi	r23, 0x0F	; 15
    7e1c:	40 e9       	ldi	r20, 0x90	; 144
    7e1e:	50 e0       	ldi	r21, 0x00	; 0
    7e20:	0e 94 9c 58 	call	0xb138	; 0xb138 <__eeupd_block_m2560>
	eeprom_update_word ((uint16_t*) CALIB_CHECK_ADDRESS, 0xAA55);   // to let know the calibration data are valid
    7e24:	8a e6       	ldi	r24, 0x6A	; 106
    7e26:	9f e0       	ldi	r25, 0x0F	; 15
    7e28:	65 e5       	ldi	r22, 0x55	; 85
    7e2a:	7a ea       	ldi	r23, 0xAA	; 170
    7e2c:	0e 94 be 58 	call	0xb17c	; 0xb17c <__eeupd_word_m2560>
}
    7e30:	08 95       	ret

00007e32 <irCommInitTransmitter>:
#include "irCommunication.h"


void irCommInitTransmitter() {
	irCommEnabled = IRCOMM_MODE_TRANSMIT;
    7e32:	82 e0       	ldi	r24, 0x02	; 2
    7e34:	80 93 f2 04 	sts	0x04F2, r24
	irCommState = IRCOMM_TX_IDLE_STATE;
    7e38:	81 e0       	ldi	r24, 0x01	; 1
    7e3a:	80 93 f5 04 	sts	0x04F5, r24
}
    7e3e:	08 95       	ret

00007e40 <irCommInitReceiver>:

void irCommInitReceiver() {
	irCommEnabled = IRCOMM_MODE_RECEIVE;
    7e40:	81 e0       	ldi	r24, 0x01	; 1
    7e42:	80 93 f2 04 	sts	0x04F2, r24
	irCommState = IRCOMM_RX_IDLE_STATE;
    7e46:	80 93 f5 04 	sts	0x04F5, r24
	irCommEnabledNext = IRCOMM_MODE_RECEIVE;
    7e4a:	80 93 f3 04 	sts	0x04F3, r24
}
    7e4e:	08 95       	ret

00007e50 <irCommDeinit>:
	irCommInitVars();
	irCommInitReceiver();
}

void irCommDeinit() {
	irCommEnabled = IRCOMM_MODE_SENSORS_SAMPLING;
    7e50:	10 92 f2 04 	sts	0x04F2, r1
	irCommMode = IRCOMM_MODE_SENSORS_SAMPLING;
    7e54:	10 92 f4 04 	sts	0x04F4, r1
}
    7e58:	08 95       	ret

00007e5a <irCommSendData>:
//	irCommTxSensorMask = sensorMask;
//	irCommEnabledNext = IRCOMM_MODE_TRANSMIT;
//}

void irCommSendData(unsigned char value) {
	irCommTxByte = value;
    7e5a:	80 93 45 05 	sts	0x0545, r24
	irCommTxByteEnqueued = 1;
    7e5e:	81 e0       	ldi	r24, 0x01	; 1
    7e60:	80 93 46 05 	sts	0x0546, r24
	irCommEnabledNext = IRCOMM_MODE_TRANSMIT;
    7e64:	82 e0       	ldi	r24, 0x02	; 2
    7e66:	80 93 f3 04 	sts	0x04F3, r24
}
    7e6a:	08 95       	ret

00007e6c <irCommDataSent>:

unsigned char irCommDataSent() {
    7e6c:	90 e0       	ldi	r25, 0x00	; 0
    7e6e:	80 91 46 05 	lds	r24, 0x0546
    7e72:	81 30       	cpi	r24, 0x01	; 1
    7e74:	09 f0       	breq	.+2      	; 0x7e78 <irCommDataSent+0xc>
    7e76:	91 e0       	ldi	r25, 0x01	; 1
	if(irCommTxByteEnqueued==1) {
		return 0;
	} else {
		return 1;
	}
}
    7e78:	89 2f       	mov	r24, r25
    7e7a:	08 95       	ret

00007e7c <irCommDataAvailable>:

unsigned char irCommDataAvailable() {
	return irCommRxDataAvailable;
}
    7e7c:	80 91 3a 05 	lds	r24, 0x053A
    7e80:	08 95       	ret

00007e82 <irCommReadData>:

unsigned char irCommReadData() {
	irCommRxDataAvailable = 0;
    7e82:	10 92 3a 05 	sts	0x053A, r1
	return irCommRxLastDataReceived;
}
    7e86:	80 91 39 05 	lds	r24, 0x0539
    7e8a:	08 95       	ret

00007e8c <irCommReceivingSensor>:

signed char irCommReceivingSensor() {
	return irCommRxReceivingSensor;
}
    7e8c:	80 91 15 02 	lds	r24, 0x0215
    7e90:	08 95       	ret

00007e92 <getBearing>:

signed int getBearing(unsigned char sensor) {
	switch(sensor) {
    7e92:	83 30       	cpi	r24, 0x03	; 3
    7e94:	71 f1       	breq	.+92     	; 0x7ef2 <getBearing+0x60>
    7e96:	84 30       	cpi	r24, 0x04	; 4
    7e98:	60 f0       	brcs	.+24     	; 0x7eb2 <getBearing+0x20>
    7e9a:	85 30       	cpi	r24, 0x05	; 5
    7e9c:	d1 f0       	breq	.+52     	; 0x7ed2 <getBearing+0x40>
    7e9e:	85 30       	cpi	r24, 0x05	; 5
    7ea0:	80 f0       	brcs	.+32     	; 0x7ec2 <getBearing+0x30>
    7ea2:	86 30       	cpi	r24, 0x06	; 6
    7ea4:	f1 f0       	breq	.+60     	; 0x7ee2 <getBearing+0x50>
    7ea6:	87 30       	cpi	r24, 0x07	; 7
    7ea8:	c1 f0       	breq	.+48     	; 0x7eda <getBearing+0x48>
		case 5:
			return 135;
		case 6:
			return 90;
		case 7:
			return 45;
    7eaa:	2f ef       	ldi	r18, 0xFF	; 255
    7eac:	3f ef       	ldi	r19, 0xFF	; 255
		default:
			return -1;
	}
}
    7eae:	c9 01       	movw	r24, r18
    7eb0:	08 95       	ret
signed char irCommReceivingSensor() {
	return irCommRxReceivingSensor;
}

signed int getBearing(unsigned char sensor) {
	switch(sensor) {
    7eb2:	81 30       	cpi	r24, 0x01	; 1
    7eb4:	d1 f0       	breq	.+52     	; 0x7eea <getBearing+0x58>
    7eb6:	82 30       	cpi	r24, 0x02	; 2
    7eb8:	40 f0       	brcs	.+16     	; 0x7eca <getBearing+0x38>
    7eba:	26 ea       	ldi	r18, 0xA6	; 166
    7ebc:	3f ef       	ldi	r19, 0xFF	; 255
		case 7:
			return 45;
		default:
			return -1;
	}
}
    7ebe:	c9 01       	movw	r24, r18
    7ec0:	08 95       	ret
		case 1:
			return -45;
		case 2:
			return -90;
		case 3:
			return -135;
    7ec2:	24 eb       	ldi	r18, 0xB4	; 180
    7ec4:	30 e0       	ldi	r19, 0x00	; 0
		case 7:
			return 45;
		default:
			return -1;
	}
}
    7ec6:	c9 01       	movw	r24, r18
    7ec8:	08 95       	ret
signed char irCommReceivingSensor() {
	return irCommRxReceivingSensor;
}

signed int getBearing(unsigned char sensor) {
	switch(sensor) {
    7eca:	20 e0       	ldi	r18, 0x00	; 0
    7ecc:	30 e0       	ldi	r19, 0x00	; 0
		case 7:
			return 45;
		default:
			return -1;
	}
}
    7ece:	c9 01       	movw	r24, r18
    7ed0:	08 95       	ret
		case 2:
			return -90;
		case 3:
			return -135;
		case 4:
			return 180;
    7ed2:	27 e8       	ldi	r18, 0x87	; 135
    7ed4:	30 e0       	ldi	r19, 0x00	; 0
		case 7:
			return 45;
		default:
			return -1;
	}
}
    7ed6:	c9 01       	movw	r24, r18
    7ed8:	08 95       	ret
		case 4:
			return 180;
		case 5:
			return 135;
		case 6:
			return 90;
    7eda:	2d e2       	ldi	r18, 0x2D	; 45
    7edc:	30 e0       	ldi	r19, 0x00	; 0
		case 7:
			return 45;
		default:
			return -1;
	}
}
    7ede:	c9 01       	movw	r24, r18
    7ee0:	08 95       	ret
		case 3:
			return -135;
		case 4:
			return 180;
		case 5:
			return 135;
    7ee2:	2a e5       	ldi	r18, 0x5A	; 90
    7ee4:	30 e0       	ldi	r19, 0x00	; 0
		case 7:
			return 45;
		default:
			return -1;
	}
}
    7ee6:	c9 01       	movw	r24, r18
    7ee8:	08 95       	ret
signed char irCommReceivingSensor() {
	return irCommRxReceivingSensor;
}

signed int getBearing(unsigned char sensor) {
	switch(sensor) {
    7eea:	23 ed       	ldi	r18, 0xD3	; 211
    7eec:	3f ef       	ldi	r19, 0xFF	; 255
		case 7:
			return 45;
		default:
			return -1;
	}
}
    7eee:	c9 01       	movw	r24, r18
    7ef0:	08 95       	ret
		case 0:
			return 0;
		case 1:
			return -45;
		case 2:
			return -90;
    7ef2:	29 e7       	ldi	r18, 0x79	; 121
    7ef4:	3f ef       	ldi	r19, 0xFF	; 255
		case 7:
			return 45;
		default:
			return -1;
	}
}
    7ef6:	c9 01       	movw	r24, r18
    7ef8:	08 95       	ret

00007efa <resetDebugVariables>:
void irCommDeinit() {
	irCommEnabled = IRCOMM_MODE_SENSORS_SAMPLING;
	irCommMode = IRCOMM_MODE_SENSORS_SAMPLING;
}

void resetDebugVariables() {
    7efa:	cf 92       	push	r12
    7efc:	df 92       	push	r13
    7efe:	ef 92       	push	r14
    7f00:	ff 92       	push	r15
    7f02:	0f 93       	push	r16
    7f04:	1f 93       	push	r17
	irCommRxMaxSensorIndexTemp=0;
    7f06:	10 92 0f 05 	sts	0x050F, r1
	irCommRxMaxDiffIndexTemp=0;
    7f0a:	10 92 10 05 	sts	0x0510, r1
	irCommMaxSensorValueCurrIndexTemp=0;
    7f0e:	10 92 13 05 	sts	0x0513, r1
	irCommMinSensorValueCurrIndexTemp=0;
    7f12:	10 92 14 05 	sts	0x0514, r1
	memset(irCommRxMaxSensorTemp, 0xFF, 4);
    7f16:	cc 24       	eor	r12, r12
    7f18:	ca 94       	dec	r12
    7f1a:	dc 2c       	mov	r13, r12
    7f1c:	76 01       	movw	r14, r12
    7f1e:	c0 92 57 0b 	sts	0x0B57, r12
    7f22:	d0 92 58 0b 	sts	0x0B58, r13
    7f26:	e0 92 59 0b 	sts	0x0B59, r14
    7f2a:	f0 92 5a 0b 	sts	0x0B5A, r15
	memset(irCommRxMaxDiffTemp, 0xFF, 4);
    7f2e:	c0 92 90 0b 	sts	0x0B90, r12
    7f32:	d0 92 91 0b 	sts	0x0B91, r13
    7f36:	e0 92 92 0b 	sts	0x0B92, r14
    7f3a:	f0 92 93 0b 	sts	0x0B93, r15
	memset(irCommMaxSensorValueCurrTemp, 0xFF, 4);
    7f3e:	c0 92 66 05 	sts	0x0566, r12
    7f42:	d0 92 67 05 	sts	0x0567, r13
    7f46:	e0 92 68 05 	sts	0x0568, r14
    7f4a:	f0 92 69 05 	sts	0x0569, r15
	memset(irCommMinSensorValueCurrTemp, 0xFF, 4);
    7f4e:	c0 92 5b 0b 	sts	0x0B5B, r12
    7f52:	d0 92 5c 0b 	sts	0x0B5C, r13
    7f56:	e0 92 5d 0b 	sts	0x0B5D, r14
    7f5a:	f0 92 5e 0b 	sts	0x0B5E, r15

	irCommStateIndexTemp = 0;					
    7f5e:	10 92 1c 05 	sts	0x051C, r1
	memset(irCommStateTemp, 0xFF, 14);
    7f62:	8a e6       	ldi	r24, 0x6A	; 106
    7f64:	95 e0       	ldi	r25, 0x05	; 5
    7f66:	6f ef       	ldi	r22, 0xFF	; 255
    7f68:	70 e0       	ldi	r23, 0x00	; 0
    7f6a:	4e e0       	ldi	r20, 0x0E	; 14
    7f6c:	50 e0       	ldi	r21, 0x00	; 0
    7f6e:	0e 94 77 58 	call	0xb0ee	; 0xb0ee <memset>

	irCommShiftCountFinalIndexTemp = 0;
    7f72:	10 92 16 05 	sts	0x0516, r1
	memset(irCommShiftCountFinalTemp, 0xFF, 2);
    7f76:	0f ef       	ldi	r16, 0xFF	; 255
    7f78:	1f ef       	ldi	r17, 0xFF	; 255
    7f7a:	10 93 64 0b 	sts	0x0B64, r17
    7f7e:	00 93 63 0b 	sts	0x0B63, r16
	irCommRxStartBitDetectedIndexTemp = 0;
    7f82:	10 92 1b 05 	sts	0x051B, r1
	memset(irCommRxStartBitDetectedTemp, 0xFF, 2);
    7f86:	10 93 a4 05 	sts	0x05A4, r17
    7f8a:	00 93 a3 05 	sts	0x05A3, r16
	irCommSwitchCountIndexTemp = 0;
    7f8e:	10 92 12 05 	sts	0x0512, r1
	memset(irCommSwitchCountTemp, 0xFF, 2);
    7f92:	10 93 80 05 	sts	0x0580, r17
    7f96:	00 93 7f 05 	sts	0x057F, r16
	irCommMaxSensorSignalFiltIndexTemp = 0;
    7f9a:	10 92 0e 05 	sts	0x050E, r1
	memset(irCommMaxSensorSignalFiltTemp, 0xFF, 80);
    7f9e:	85 ea       	ldi	r24, 0xA5	; 165
    7fa0:	95 e0       	ldi	r25, 0x05	; 5
    7fa2:	6f ef       	ldi	r22, 0xFF	; 255
    7fa4:	70 e0       	ldi	r23, 0x00	; 0
    7fa6:	40 e5       	ldi	r20, 0x50	; 80
    7fa8:	50 e0       	ldi	r21, 0x00	; 0
    7faa:	0e 94 77 58 	call	0xb0ee	; 0xb0ee <memset>
	irCommMaxSensorSignalIndexTemp = 0;
    7fae:	10 92 0d 05 	sts	0x050D, r1
	memset(irCommMaxSensorSignalTemp, 0xFF, 80);
    7fb2:	89 e9       	ldi	r24, 0x99	; 153
    7fb4:	98 e0       	ldi	r25, 0x08	; 8
    7fb6:	6f ef       	ldi	r22, 0xFF	; 255
    7fb8:	70 e0       	ldi	r23, 0x00	; 0
    7fba:	40 e5       	ldi	r20, 0x50	; 80
    7fbc:	50 e0       	ldi	r21, 0x00	; 0
    7fbe:	0e 94 77 58 	call	0xb0ee	; 0xb0ee <memset>
	irCommProxMeanIndexTemp = 0;
    7fc2:	10 92 11 05 	sts	0x0511, r1
	memset(irCommProxMeanTemp, 0xFF, 4);
    7fc6:	c0 92 9d 05 	sts	0x059D, r12
    7fca:	d0 92 9e 05 	sts	0x059E, r13
    7fce:	e0 92 9f 05 	sts	0x059F, r14
    7fd2:	f0 92 a0 05 	sts	0x05A0, r15
	irCommComputeShiftIndexTemp = 0;
    7fd6:	10 92 18 05 	sts	0x0518, r1
	memset(irCommComputeShiftTemp, 0xFF, 2);
    7fda:	10 93 9b 05 	sts	0x059B, r17
    7fde:	00 93 9a 05 	sts	0x059A, r16
	irCommShiftCountIndexTemp = 0;
    7fe2:	10 92 15 05 	sts	0x0515, r1
	memset(irCommShiftCountTemp, 0xFF, 2);
    7fe6:	10 93 aa 0b 	sts	0x0BAA, r17
    7fea:	00 93 a9 0b 	sts	0x0BA9, r16
	irCommRxPeakHighToLowIndexTemp = 0;
    7fee:	10 92 19 05 	sts	0x0519, r1
	memset(irCommRxPeakHighToLowTemp, 0xFF, 2);
    7ff2:	10 93 f8 05 	sts	0x05F8, r17
    7ff6:	00 93 f7 05 	sts	0x05F7, r16
	irCommRxStartPeakDurationIndexTemp = 0;
    7ffa:	10 92 1a 05 	sts	0x051A, r1
	memset(irCommRxStartPeakDurationTemp, 0xFF, 2);
    7ffe:	10 93 3a 07 	sts	0x073A, r17
    8002:	00 93 39 07 	sts	0x0739, r16
	irCommStartDiffIndexTemp = 0;
    8006:	10 92 17 05 	sts	0x0517, r1
	memset(irCommSyncStateTemp, 0xFF, 2);
    800a:	10 93 99 05 	sts	0x0599, r17
    800e:	00 93 98 05 	sts	0x0598, r16
	irCommSyncStateIndexTemp = 0;
    8012:	10 92 1d 05 	sts	0x051D, r1
	memset(irCommBitsSignalTemp, 0xFF, 400);
    8016:	85 ec       	ldi	r24, 0xC5	; 197
    8018:	99 e0       	ldi	r25, 0x09	; 9
    801a:	6f ef       	ldi	r22, 0xFF	; 255
    801c:	70 e0       	ldi	r23, 0x00	; 0
    801e:	40 e9       	ldi	r20, 0x90	; 144
    8020:	51 e0       	ldi	r21, 0x01	; 1
    8022:	0e 94 77 58 	call	0xb0ee	; 0xb0ee <memset>
	irCommBitsSignalIndexTemp = 0;
    8026:	10 92 1e 05 	sts	0x051E, r1
	memset(irCommRxBitReceivedTemp, 0xFF, 10);
    802a:	8d e8       	ldi	r24, 0x8D	; 141
    802c:	98 e0       	ldi	r25, 0x08	; 8
    802e:	6f ef       	ldi	r22, 0xFF	; 255
    8030:	70 e0       	ldi	r23, 0x00	; 0
    8032:	4a e0       	ldi	r20, 0x0A	; 10
    8034:	50 e0       	ldi	r21, 0x00	; 0
    8036:	0e 94 77 58 	call	0xb0ee	; 0xb0ee <memset>
	irCommRxBitReceivedIndexTemp = 0;
    803a:	10 92 1f 05 	sts	0x051F, r1
	
	
}
    803e:	1f 91       	pop	r17
    8040:	0f 91       	pop	r16
    8042:	ff 90       	pop	r15
    8044:	ef 90       	pop	r14
    8046:	df 90       	pop	r13
    8048:	cf 90       	pop	r12
    804a:	08 95       	ret

0000804c <irCommTasks>:

void irCommTasks() {
    804c:	2f 92       	push	r2
    804e:	3f 92       	push	r3
    8050:	4f 92       	push	r4
    8052:	5f 92       	push	r5
    8054:	6f 92       	push	r6
    8056:	7f 92       	push	r7
    8058:	8f 92       	push	r8
    805a:	9f 92       	push	r9
    805c:	af 92       	push	r10
    805e:	bf 92       	push	r11
    8060:	cf 92       	push	r12
    8062:	df 92       	push	r13
    8064:	ef 92       	push	r14
    8066:	ff 92       	push	r15
    8068:	0f 93       	push	r16
    806a:	1f 93       	push	r17
    806c:	cf 93       	push	r28
    806e:	df 93       	push	r29
	int i = 0;

	if(irCommMode==IRCOMM_MODE_RECEIVE) {
    8070:	00 91 f4 04 	lds	r16, 0x04F4
    8074:	01 30       	cpi	r16, 0x01	; 1
    8076:	09 f4       	brne	.+2      	; 0x807a <irCommTasks+0x2e>
    8078:	d2 c0       	rjmp	.+420    	; 0x821e <irCommTasks+0x1d2>
			case IRCOMM_RX_STOP:
				break;
					
		}

	} else if(irCommMode==IRCOMM_MODE_TRANSMIT) {
    807a:	02 30       	cpi	r16, 0x02	; 2
    807c:	99 f0       	breq	.+38     	; 0x80a4 <irCommTasks+0x58>

		}

	}

}
    807e:	df 91       	pop	r29
    8080:	cf 91       	pop	r28
    8082:	1f 91       	pop	r17
    8084:	0f 91       	pop	r16
    8086:	ff 90       	pop	r15
    8088:	ef 90       	pop	r14
    808a:	df 90       	pop	r13
    808c:	cf 90       	pop	r12
    808e:	bf 90       	pop	r11
    8090:	af 90       	pop	r10
    8092:	9f 90       	pop	r9
    8094:	8f 90       	pop	r8
    8096:	7f 90       	pop	r7
    8098:	6f 90       	pop	r6
    809a:	5f 90       	pop	r5
    809c:	4f 90       	pop	r4
    809e:	3f 90       	pop	r3
    80a0:	2f 90       	pop	r2
    80a2:	08 95       	ret
					
		}

	} else if(irCommMode==IRCOMM_MODE_TRANSMIT) {

		switch(irCommState) {
    80a4:	80 91 f5 04 	lds	r24, 0x04F5
    80a8:	82 30       	cpi	r24, 0x02	; 2
    80aa:	09 f4       	brne	.+2      	; 0x80ae <irCommTasks+0x62>
    80ac:	68 c3       	rjmp	.+1744   	; 0x877e <irCommTasks+0x732>
    80ae:	85 30       	cpi	r24, 0x05	; 5
    80b0:	31 f7       	brne	.-52     	; 0x807e <irCommTasks+0x32>
				break;

			case IRCOMM_TX_PREPARE_TRANSMISSION:				
				//updateBlueLed(255);
				//updateBlueLed(0);
				irCommTickCounter = getTime100MicroSec()-irCommTickCounter2;
    80b2:	0e 94 04 10 	call	0x2008	; 0x2008 <getTime100MicroSec>
    80b6:	20 91 fd 04 	lds	r18, 0x04FD
    80ba:	30 91 fe 04 	lds	r19, 0x04FE
    80be:	40 91 ff 04 	lds	r20, 0x04FF
    80c2:	50 91 00 05 	lds	r21, 0x0500
    80c6:	62 1b       	sub	r22, r18
    80c8:	73 0b       	sbc	r23, r19
    80ca:	84 0b       	sbc	r24, r20
    80cc:	95 0b       	sbc	r25, r21
    80ce:	60 93 f9 04 	sts	0x04F9, r22
    80d2:	70 93 fa 04 	sts	0x04FA, r23
    80d6:	80 93 fb 04 	sts	0x04FB, r24
    80da:	90 93 fc 04 	sts	0x04FC, r25
				irCommTickCounter2 = getTime100MicroSec();
    80de:	0e 94 04 10 	call	0x2008	; 0x2008 <getTime100MicroSec>
    80e2:	60 93 fd 04 	sts	0x04FD, r22
    80e6:	70 93 fe 04 	sts	0x04FE, r23
    80ea:	80 93 ff 04 	sts	0x04FF, r24
    80ee:	90 93 00 05 	sts	0x0500, r25
				irCommTxBitToTransmit[0] = 2;	// start bit 1
    80f2:	00 93 82 05 	sts	0x0582, r16
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
    80f6:	83 e0       	ldi	r24, 0x03	; 3
    80f8:	80 93 83 05 	sts	0x0583, r24
				irCommTxCrc = 0;
    80fc:	10 92 4b 05 	sts	0x054B, r1
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    8100:	30 91 45 05 	lds	r19, 0x0545
    8104:	83 2f       	mov	r24, r19
    8106:	90 e0       	ldi	r25, 0x00	; 0
    8108:	81 70       	andi	r24, 0x01	; 1
    810a:	90 70       	andi	r25, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    810c:	80 93 8b 05 	sts	0x058B, r24
					if(irCommTempValue==1) {
    8110:	01 97       	sbiw	r24, 0x01	; 1
    8112:	09 f4       	brne	.+2      	; 0x8116 <irCommTasks+0xca>
    8114:	82 c7       	rjmp	.+3844   	; 0x901a <irCommTasks+0xfce>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    8116:	83 2f       	mov	r24, r19
    8118:	90 e0       	ldi	r25, 0x00	; 0
    811a:	95 95       	asr	r25
    811c:	87 95       	ror	r24
    811e:	81 70       	andi	r24, 0x01	; 1
    8120:	90 70       	andi	r25, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    8122:	80 93 8a 05 	sts	0x058A, r24
					if(irCommTempValue==1) {
    8126:	01 97       	sbiw	r24, 0x01	; 1
    8128:	09 f4       	brne	.+2      	; 0x812c <irCommTasks+0xe0>
    812a:	73 c7       	rjmp	.+3814   	; 0x9012 <irCommTasks+0xfc6>
    812c:	20 91 4b 05 	lds	r18, 0x054B
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    8130:	83 2f       	mov	r24, r19
    8132:	90 e0       	ldi	r25, 0x00	; 0
    8134:	95 95       	asr	r25
    8136:	87 95       	ror	r24
    8138:	95 95       	asr	r25
    813a:	87 95       	ror	r24
    813c:	81 70       	andi	r24, 0x01	; 1
    813e:	90 70       	andi	r25, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    8140:	80 93 89 05 	sts	0x0589, r24
					if(irCommTempValue==1) {
    8144:	01 97       	sbiw	r24, 0x01	; 1
    8146:	09 f4       	brne	.+2      	; 0x814a <irCommTasks+0xfe>
    8148:	62 c7       	rjmp	.+3780   	; 0x900e <irCommTasks+0xfc2>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    814a:	83 2f       	mov	r24, r19
    814c:	90 e0       	ldi	r25, 0x00	; 0
    814e:	95 95       	asr	r25
    8150:	87 95       	ror	r24
    8152:	95 95       	asr	r25
    8154:	87 95       	ror	r24
    8156:	95 95       	asr	r25
    8158:	87 95       	ror	r24
    815a:	81 70       	andi	r24, 0x01	; 1
    815c:	90 70       	andi	r25, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    815e:	80 93 88 05 	sts	0x0588, r24
					if(irCommTempValue==1) {
    8162:	01 97       	sbiw	r24, 0x01	; 1
    8164:	09 f4       	brne	.+2      	; 0x8168 <irCommTasks+0x11c>
    8166:	51 c7       	rjmp	.+3746   	; 0x900a <irCommTasks+0xfbe>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    8168:	83 2f       	mov	r24, r19
    816a:	90 e0       	ldi	r25, 0x00	; 0
    816c:	95 95       	asr	r25
    816e:	87 95       	ror	r24
    8170:	95 95       	asr	r25
    8172:	87 95       	ror	r24
    8174:	95 95       	asr	r25
    8176:	87 95       	ror	r24
    8178:	95 95       	asr	r25
    817a:	87 95       	ror	r24
    817c:	81 70       	andi	r24, 0x01	; 1
    817e:	90 70       	andi	r25, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    8180:	80 93 87 05 	sts	0x0587, r24
					if(irCommTempValue==1) {
    8184:	01 97       	sbiw	r24, 0x01	; 1
    8186:	09 f4       	brne	.+2      	; 0x818a <irCommTasks+0x13e>
    8188:	3e c7       	rjmp	.+3708   	; 0x9006 <irCommTasks+0xfba>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    818a:	83 2f       	mov	r24, r19
    818c:	90 e0       	ldi	r25, 0x00	; 0
    818e:	95 95       	asr	r25
    8190:	87 95       	ror	r24
    8192:	95 95       	asr	r25
    8194:	87 95       	ror	r24
    8196:	95 95       	asr	r25
    8198:	87 95       	ror	r24
    819a:	95 95       	asr	r25
    819c:	87 95       	ror	r24
    819e:	95 95       	asr	r25
    81a0:	87 95       	ror	r24
    81a2:	81 70       	andi	r24, 0x01	; 1
    81a4:	90 70       	andi	r25, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    81a6:	80 93 86 05 	sts	0x0586, r24
					if(irCommTempValue==1) {
    81aa:	01 97       	sbiw	r24, 0x01	; 1
    81ac:	09 f4       	brne	.+2      	; 0x81b0 <irCommTasks+0x164>
    81ae:	29 c7       	rjmp	.+3666   	; 0x9002 <irCommTasks+0xfb6>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    81b0:	83 2f       	mov	r24, r19
    81b2:	90 e0       	ldi	r25, 0x00	; 0
    81b4:	08 2e       	mov	r0, r24
    81b6:	89 2f       	mov	r24, r25
    81b8:	00 0c       	add	r0, r0
    81ba:	88 1f       	adc	r24, r24
    81bc:	99 0b       	sbc	r25, r25
    81be:	00 0c       	add	r0, r0
    81c0:	88 1f       	adc	r24, r24
    81c2:	99 1f       	adc	r25, r25
    81c4:	81 70       	andi	r24, 0x01	; 1
    81c6:	90 70       	andi	r25, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    81c8:	80 93 85 05 	sts	0x0585, r24
					if(irCommTempValue==1) {
    81cc:	01 97       	sbiw	r24, 0x01	; 1
    81ce:	09 f4       	brne	.+2      	; 0x81d2 <irCommTasks+0x186>
    81d0:	16 c7       	rjmp	.+3628   	; 0x8ffe <irCommTasks+0xfb2>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    81d2:	83 2f       	mov	r24, r19
    81d4:	90 e0       	ldi	r25, 0x00	; 0
    81d6:	88 0f       	add	r24, r24
    81d8:	89 2f       	mov	r24, r25
    81da:	88 1f       	adc	r24, r24
    81dc:	99 0b       	sbc	r25, r25
    81de:	91 95       	neg	r25
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    81e0:	80 93 84 05 	sts	0x0584, r24
					if(irCommTempValue==1) {
    81e4:	81 30       	cpi	r24, 0x01	; 1
    81e6:	91 05       	cpc	r25, r1
    81e8:	09 f4       	brne	.+2      	; 0x81ec <irCommTasks+0x1a0>
    81ea:	07 c7       	rjmp	.+3598   	; 0x8ffa <irCommTasks+0xfae>
						irCommTxCrc++;
    81ec:	90 93 f7 04 	sts	0x04F7, r25
    81f0:	80 93 f6 04 	sts	0x04F6, r24
					}
					//irCommTxBitToTransmit[9-i] = 2;
				}
				irCommTxCrc = irCommTxCrc % 4;
				irCommTxCrc = 4 - irCommTxCrc;
    81f4:	23 70       	andi	r18, 0x03	; 3
    81f6:	84 e0       	ldi	r24, 0x04	; 4
    81f8:	82 1b       	sub	r24, r18
    81fa:	80 93 4b 05 	sts	0x054B, r24
				irCommTxBitToTransmit[10] = (irCommTxCrc>>1)&0x01;
    81fe:	98 2f       	mov	r25, r24
    8200:	96 95       	lsr	r25
    8202:	91 70       	andi	r25, 0x01	; 1
    8204:	90 93 8c 05 	sts	0x058C, r25
				irCommTxBitToTransmit[11] = irCommTxCrc&0x01;	
    8208:	81 70       	andi	r24, 0x01	; 1
    820a:	80 93 8d 05 	sts	0x058D, r24
				irCommTxBitCount = 0;							
    820e:	10 92 4c 05 	sts	0x054C, r1
				irCommTxPulseState = 0;	
    8212:	10 92 4d 05 	sts	0x054D, r1
				irCommState = IRCOMM_TX_COMPUTE_TIMINGS;				
    8216:	82 e0       	ldi	r24, 0x02	; 2
    8218:	80 93 f5 04 	sts	0x04F5, r24
    821c:	30 cf       	rjmp	.-416    	; 0x807e <irCommTasks+0x32>
void irCommTasks() {
	int i = 0;

	if(irCommMode==IRCOMM_MODE_RECEIVE) {

		switch(irCommState) {
    821e:	10 91 f5 04 	lds	r17, 0x04F5
    8222:	13 30       	cpi	r17, 0x03	; 3
    8224:	09 f4       	brne	.+2      	; 0x8228 <irCommTasks+0x1dc>
    8226:	ca c4       	rjmp	.+2452   	; 0x8bbc <irCommTasks+0xb70>
    8228:	14 30       	cpi	r17, 0x04	; 4
    822a:	08 f4       	brcc	.+2      	; 0x822e <irCommTasks+0x1e2>
    822c:	af c0       	rjmp	.+350    	; 0x838c <irCommTasks+0x340>
    822e:	17 30       	cpi	r17, 0x07	; 7
    8230:	09 f4       	brne	.+2      	; 0x8234 <irCommTasks+0x1e8>
    8232:	74 c4       	rjmp	.+2280   	; 0x8b1c <irCommTasks+0xad0>
    8234:	18 30       	cpi	r17, 0x08	; 8
    8236:	09 f4       	brne	.+2      	; 0x823a <irCommTasks+0x1ee>
    8238:	dc c2       	rjmp	.+1464   	; 0x87f2 <irCommTasks+0x7a6>
    823a:	16 30       	cpi	r17, 0x06	; 6
    823c:	09 f0       	breq	.+2      	; 0x8240 <irCommTasks+0x1f4>
    823e:	1f cf       	rjmp	.-450    	; 0x807e <irCommTasks+0x32>
				break;

			case IRCOMM_RX_READ_BIT:
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
				irCommTempMin = 1024;
    8240:	80 e0       	ldi	r24, 0x00	; 0
    8242:	94 e0       	ldi	r25, 0x04	; 4
    8244:	90 93 2b 05 	sts	0x052B, r25
    8248:	80 93 2a 05 	sts	0x052A, r24
				irCommTempMax = 0;
    824c:	10 92 29 05 	sts	0x0529, r1
    8250:	10 92 28 05 	sts	0x0528, r1
    8254:	80 91 41 05 	lds	r24, 0x0541
    8258:	90 91 42 05 	lds	r25, 0x0542
    825c:	88 0f       	add	r24, r24
    825e:	99 1f       	adc	r25, r25
    8260:	c0 91 7b 08 	lds	r28, 0x087B
    8264:	d0 91 7c 08 	lds	r29, 0x087C
    8268:	c8 0f       	add	r28, r24
    826a:	d9 1f       	adc	r29, r25
    826c:	b7 e6       	ldi	r27, 0x67	; 103
    826e:	cb 2e       	mov	r12, r27
    8270:	bb e0       	ldi	r27, 0x0B	; 11
    8272:	db 2e       	mov	r13, r27
    8274:	f6 01       	movw	r30, r12
    8276:	ee 24       	eor	r14, r14
    8278:	ff 24       	eor	r15, r15
    827a:	87 01       	movw	r16, r14
    827c:	60 e0       	ldi	r22, 0x00	; 0
    827e:	74 e0       	ldi	r23, 0x04	; 4
    8280:	40 e0       	ldi	r20, 0x00	; 0
    8282:	50 e0       	ldi	r21, 0x00	; 0
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
					irCommMaxSensorSignal[i] = irCommProxValuesCurr[irCommRxMaxSensor+i*8];
    8284:	28 81       	ld	r18, Y
    8286:	39 81       	ldd	r19, Y+1	; 0x01
    8288:	31 83       	std	Z+1, r19	; 0x01
    828a:	20 83       	st	Z, r18
					irCommProxSum += irCommMaxSensorSignal[i];
    828c:	c9 01       	movw	r24, r18
    828e:	aa 27       	eor	r26, r26
    8290:	97 fd       	sbrc	r25, 7
    8292:	a0 95       	com	r26
    8294:	ba 2f       	mov	r27, r26
    8296:	e8 0e       	add	r14, r24
    8298:	f9 1e       	adc	r15, r25
    829a:	0a 1f       	adc	r16, r26
    829c:	1b 1f       	adc	r17, r27
					if(irCommTempMin > irCommMaxSensorSignal[i]) {
    829e:	26 17       	cp	r18, r22
    82a0:	37 07       	cpc	r19, r23
    82a2:	2c f4       	brge	.+10     	; 0x82ae <irCommTasks+0x262>
						irCommTempMin = irCommMaxSensorSignal[i];
    82a4:	30 93 2b 05 	sts	0x052B, r19
    82a8:	20 93 2a 05 	sts	0x052A, r18
    82ac:	b9 01       	movw	r22, r18
					}
					if(irCommTempMax < irCommMaxSensorSignal[i]) {
    82ae:	42 17       	cp	r20, r18
    82b0:	53 07       	cpc	r21, r19
    82b2:	2c f4       	brge	.+10     	; 0x82be <irCommTasks+0x272>
						irCommTempMax = irCommMaxSensorSignal[i];
    82b4:	30 93 29 05 	sts	0x0529, r19
    82b8:	20 93 28 05 	sts	0x0528, r18
    82bc:	a9 01       	movw	r20, r18
    82be:	60 96       	adiw	r28, 0x10	; 16
    82c0:	32 96       	adiw	r30, 0x02	; 2
			case IRCOMM_RX_READ_BIT:
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
				irCommTempMin = 1024;
				irCommTempMax = 0;
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    82c2:	9b e0       	ldi	r25, 0x0B	; 11
    82c4:	ef 38       	cpi	r30, 0x8F	; 143
    82c6:	f9 07       	cpc	r31, r25
    82c8:	e9 f6       	brne	.-70     	; 0x8284 <irCommTasks+0x238>
    82ca:	e0 92 24 05 	sts	0x0524, r14
    82ce:	f0 92 25 05 	sts	0x0525, r15
    82d2:	00 93 26 05 	sts	0x0526, r16
    82d6:	10 93 27 05 	sts	0x0527, r17
					if(irCommTempMax < irCommMaxSensorSignal[i]) {
						irCommTempMax = irCommMaxSensorSignal[i];
					}
				}

				if((irCommTempMax-irCommTempMin) < IRCOMM_DETECTION_AMPLITUDE_THR) {	// error...no significant signal perceived					
    82da:	46 1b       	sub	r20, r22
    82dc:	57 0b       	sbc	r21, r23
    82de:	40 35       	cpi	r20, 0x50	; 80
    82e0:	51 05       	cpc	r21, r1
    82e2:	0c f4       	brge	.+2      	; 0x82e6 <irCommTasks+0x29a>
    82e4:	38 c6       	rjmp	.+3184   	; 0x8f56 <irCommTasks+0xf0a>

					resetDebugVariables();
					break;
				}

				irCommProxMean = (int)(irCommProxSum / IRCOMM_SAMPLING_WINDOW);
    82e6:	b7 01       	movw	r22, r14
    82e8:	c8 01       	movw	r24, r16
    82ea:	24 e1       	ldi	r18, 0x14	; 20
    82ec:	30 e0       	ldi	r19, 0x00	; 0
    82ee:	40 e0       	ldi	r20, 0x00	; 0
    82f0:	50 e0       	ldi	r21, 0x00	; 0
    82f2:	0e 94 cf 57 	call	0xaf9e	; 0xaf9e <__divmodsi4>
    82f6:	a9 01       	movw	r20, r18
    82f8:	30 93 2f 05 	sts	0x052F, r19
    82fc:	20 93 2e 05 	sts	0x052E, r18
    8300:	30 91 1e 05 	lds	r19, 0x051E

				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
					irCommMaxSensorSignal[i] -= irCommProxMean;
    8304:	67 ec       	ldi	r22, 0xC7	; 199
    8306:	d6 01       	movw	r26, r12
    8308:	8d 91       	ld	r24, X+
    830a:	9c 91       	ld	r25, X
    830c:	11 97       	sbiw	r26, 0x01	; 1
    830e:	84 1b       	sub	r24, r20
    8310:	95 0b       	sbc	r25, r21
    8312:	8d 93       	st	X+, r24
    8314:	9c 93       	st	X, r25
    8316:	27 ec       	ldi	r18, 0xC7	; 199
    8318:	36 17       	cp	r19, r22
    831a:	08 f4       	brcc	.+2      	; 0x831e <irCommTasks+0x2d2>
    831c:	23 2f       	mov	r18, r19

					if(irCommBitsSignalIndexTemp>199) {
						irCommBitsSignalIndexTemp = 199;
						//updateRedLed(0);
					}
					irCommBitsSignalTemp[irCommBitsSignalIndexTemp] = irCommMaxSensorSignal[i];
    831e:	e2 2f       	mov	r30, r18
    8320:	f0 e0       	ldi	r31, 0x00	; 0
    8322:	ee 0f       	add	r30, r30
    8324:	ff 1f       	adc	r31, r31
    8326:	eb 53       	subi	r30, 0x3B	; 59
    8328:	f6 4f       	sbci	r31, 0xF6	; 246
    832a:	91 83       	std	Z+1, r25	; 0x01
    832c:	80 83       	st	Z, r24
					irCommBitsSignalIndexTemp++;
    832e:	32 2f       	mov	r19, r18
    8330:	3f 5f       	subi	r19, 0xFF	; 255
    8332:	e2 e0       	ldi	r30, 0x02	; 2
    8334:	f0 e0       	ldi	r31, 0x00	; 0
    8336:	ce 0e       	add	r12, r30
    8338:	df 1e       	adc	r13, r31
				}

				irCommProxMean = (int)(irCommProxSum / IRCOMM_SAMPLING_WINDOW);

				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    833a:	ff e8       	ldi	r31, 0x8F	; 143
    833c:	cf 16       	cp	r12, r31
    833e:	fb e0       	ldi	r31, 0x0B	; 11
    8340:	df 06       	cpc	r13, r31
    8342:	09 f7       	brne	.-62     	; 0x8306 <irCommTasks+0x2ba>
    8344:	30 93 1e 05 	sts	0x051E, r19
					irCommBitsSignalTemp[irCommBitsSignalIndexTemp] = irCommMaxSensorSignal[i];
					irCommBitsSignalIndexTemp++;
				}
						
				// start counting number of switch around mean signal
				if(irCommMaxSensorSignal[0] > 0) {
    8348:	80 91 67 0b 	lds	r24, 0x0B67
    834c:	90 91 68 0b 	lds	r25, 0x0B68
    8350:	18 16       	cp	r1, r24
    8352:	19 06       	cpc	r1, r25
    8354:	0c f0       	brlt	.+2      	; 0x8358 <irCommTasks+0x30c>
    8356:	07 c7       	rjmp	.+3598   	; 0x9166 <irCommTasks+0x111a>
					irCommSignalState = 1;
    8358:	81 e0       	ldi	r24, 0x01	; 1
    835a:	80 93 30 05 	sts	0x0530, r24
    835e:	28 2f       	mov	r18, r24
				} else {
					irCommSignalState = -1;
    8360:	e9 e6       	ldi	r30, 0x69	; 105
    8362:	fb e0       	ldi	r31, 0x0B	; 11
    8364:	30 e0       	ldi	r19, 0x00	; 0
    8366:	08 c0       	rjmp	.+16     	; 0x8378 <irCommTasks+0x32c>
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
    8368:	27 fd       	sbrc	r18, 7
    836a:	40 c2       	rjmp	.+1152   	; 0x87ec <irCommTasks+0x7a0>
							irCommSwitchCount++;
						}
					} else {
						if(irCommSignalState > 0) {
							irCommSignalState = -1;
							irCommSwitchCount++;
    836c:	32 96       	adiw	r30, 0x02	; 2
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
    836e:	8b e0       	ldi	r24, 0x0B	; 11
    8370:	ef 38       	cpi	r30, 0x8F	; 143
    8372:	f8 07       	cpc	r31, r24
    8374:	09 f4       	brne	.+2      	; 0x8378 <irCommTasks+0x32c>
    8376:	fe c5       	rjmp	.+3068   	; 0x8f74 <irCommTasks+0xf28>
					if(irCommMaxSensorSignal[i] > 0) {
    8378:	80 81       	ld	r24, Z
    837a:	91 81       	ldd	r25, Z+1	; 0x01
    837c:	18 16       	cp	r1, r24
    837e:	19 06       	cpc	r1, r25
    8380:	9c f3       	brlt	.-26     	; 0x8368 <irCommTasks+0x31c>
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
							irCommSwitchCount++;
						}
					} else {
						if(irCommSignalState > 0) {
    8382:	12 16       	cp	r1, r18
    8384:	9c f7       	brge	.-26     	; 0x836c <irCommTasks+0x320>
							irCommSignalState = -1;
							irCommSwitchCount++;
    8386:	3f 5f       	subi	r19, 0xFF	; 255
    8388:	2f ef       	ldi	r18, 0xFF	; 255
    838a:	f0 cf       	rjmp	.-32     	; 0x836c <irCommTasks+0x320>
void irCommTasks() {
	int i = 0;

	if(irCommMode==IRCOMM_MODE_RECEIVE) {

		switch(irCommState) {
    838c:	11 30       	cpi	r17, 0x01	; 1
    838e:	09 f4       	brne	.+2      	; 0x8392 <irCommTasks+0x346>
    8390:	ef c3       	rjmp	.+2014   	; 0x8b70 <irCommTasks+0xb24>
    8392:	12 30       	cpi	r17, 0x02	; 2
    8394:	09 f0       	breq	.+2      	; 0x8398 <irCommTasks+0x34c>
    8396:	73 ce       	rjmp	.-794    	; 0x807e <irCommTasks+0x32>
				break;

			case IRCOMM_RX_MAX_SENSOR_STATE:
				// check from how many sensors the robot is receiving a possible message
				for(i=0; i<8; i++) {
					if((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    8398:	c0 91 78 05 	lds	r28, 0x0578
    839c:	d0 91 79 05 	lds	r29, 0x0579
    83a0:	60 91 64 05 	lds	r22, 0x0564
    83a4:	70 91 65 05 	lds	r23, 0x0565
    83a8:	88 81       	ld	r24, Y
    83aa:	99 81       	ldd	r25, Y+1	; 0x01
    83ac:	db 01       	movw	r26, r22
    83ae:	2d 91       	ld	r18, X+
    83b0:	3c 91       	ld	r19, X
    83b2:	82 1b       	sub	r24, r18
    83b4:	93 0b       	sbc	r25, r19
    83b6:	80 35       	cpi	r24, 0x50	; 80
    83b8:	91 05       	cpc	r25, r1
    83ba:	0c f0       	brlt	.+2      	; 0x83be <irCommTasks+0x372>
    83bc:	3c c6       	rjmp	.+3192   	; 0x9036 <irCommTasks+0xfea>
    83be:	40 91 43 05 	lds	r20, 0x0543
    83c2:	8a 81       	ldd	r24, Y+2	; 0x02
    83c4:	9b 81       	ldd	r25, Y+3	; 0x03
    83c6:	fb 01       	movw	r30, r22
    83c8:	22 81       	ldd	r18, Z+2	; 0x02
    83ca:	33 81       	ldd	r19, Z+3	; 0x03
    83cc:	82 1b       	sub	r24, r18
    83ce:	93 0b       	sbc	r25, r19
    83d0:	80 35       	cpi	r24, 0x50	; 80
    83d2:	91 05       	cpc	r25, r1
    83d4:	1c f0       	brlt	.+6      	; 0x83dc <irCommTasks+0x390>
						irCommRxNumReceivingSensors++;
    83d6:	4f 5f       	subi	r20, 0xFF	; 255
    83d8:	40 93 43 05 	sts	0x0543, r20
				break;

			case IRCOMM_RX_MAX_SENSOR_STATE:
				// check from how many sensors the robot is receiving a possible message
				for(i=0; i<8; i++) {
					if((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    83dc:	8c 81       	ldd	r24, Y+4	; 0x04
    83de:	9d 81       	ldd	r25, Y+5	; 0x05
    83e0:	db 01       	movw	r26, r22
    83e2:	14 96       	adiw	r26, 0x04	; 4
    83e4:	2d 91       	ld	r18, X+
    83e6:	3c 91       	ld	r19, X
    83e8:	15 97       	sbiw	r26, 0x05	; 5
    83ea:	82 1b       	sub	r24, r18
    83ec:	93 0b       	sbc	r25, r19
    83ee:	80 35       	cpi	r24, 0x50	; 80
    83f0:	91 05       	cpc	r25, r1
    83f2:	1c f0       	brlt	.+6      	; 0x83fa <irCommTasks+0x3ae>
						irCommRxNumReceivingSensors++;
    83f4:	4f 5f       	subi	r20, 0xFF	; 255
    83f6:	40 93 43 05 	sts	0x0543, r20
				break;

			case IRCOMM_RX_MAX_SENSOR_STATE:
				// check from how many sensors the robot is receiving a possible message
				for(i=0; i<8; i++) {
					if((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    83fa:	8e 81       	ldd	r24, Y+6	; 0x06
    83fc:	9f 81       	ldd	r25, Y+7	; 0x07
    83fe:	fb 01       	movw	r30, r22
    8400:	26 81       	ldd	r18, Z+6	; 0x06
    8402:	37 81       	ldd	r19, Z+7	; 0x07
    8404:	82 1b       	sub	r24, r18
    8406:	93 0b       	sbc	r25, r19
    8408:	80 35       	cpi	r24, 0x50	; 80
    840a:	91 05       	cpc	r25, r1
    840c:	1c f0       	brlt	.+6      	; 0x8414 <irCommTasks+0x3c8>
						irCommRxNumReceivingSensors++;
    840e:	4f 5f       	subi	r20, 0xFF	; 255
    8410:	40 93 43 05 	sts	0x0543, r20
				break;

			case IRCOMM_RX_MAX_SENSOR_STATE:
				// check from how many sensors the robot is receiving a possible message
				for(i=0; i<8; i++) {
					if((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    8414:	88 85       	ldd	r24, Y+8	; 0x08
    8416:	99 85       	ldd	r25, Y+9	; 0x09
    8418:	db 01       	movw	r26, r22
    841a:	18 96       	adiw	r26, 0x08	; 8
    841c:	2d 91       	ld	r18, X+
    841e:	3c 91       	ld	r19, X
    8420:	19 97       	sbiw	r26, 0x09	; 9
    8422:	82 1b       	sub	r24, r18
    8424:	93 0b       	sbc	r25, r19
    8426:	80 35       	cpi	r24, 0x50	; 80
    8428:	91 05       	cpc	r25, r1
    842a:	1c f0       	brlt	.+6      	; 0x8432 <irCommTasks+0x3e6>
						irCommRxNumReceivingSensors++;
    842c:	4f 5f       	subi	r20, 0xFF	; 255
    842e:	40 93 43 05 	sts	0x0543, r20
				break;

			case IRCOMM_RX_MAX_SENSOR_STATE:
				// check from how many sensors the robot is receiving a possible message
				for(i=0; i<8; i++) {
					if((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    8432:	8a 85       	ldd	r24, Y+10	; 0x0a
    8434:	9b 85       	ldd	r25, Y+11	; 0x0b
    8436:	fb 01       	movw	r30, r22
    8438:	22 85       	ldd	r18, Z+10	; 0x0a
    843a:	33 85       	ldd	r19, Z+11	; 0x0b
    843c:	82 1b       	sub	r24, r18
    843e:	93 0b       	sbc	r25, r19
    8440:	80 35       	cpi	r24, 0x50	; 80
    8442:	91 05       	cpc	r25, r1
    8444:	1c f0       	brlt	.+6      	; 0x844c <irCommTasks+0x400>
						irCommRxNumReceivingSensors++;
    8446:	4f 5f       	subi	r20, 0xFF	; 255
    8448:	40 93 43 05 	sts	0x0543, r20
				break;

			case IRCOMM_RX_MAX_SENSOR_STATE:
				// check from how many sensors the robot is receiving a possible message
				for(i=0; i<8; i++) {
					if((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    844c:	8c 85       	ldd	r24, Y+12	; 0x0c
    844e:	9d 85       	ldd	r25, Y+13	; 0x0d
    8450:	db 01       	movw	r26, r22
    8452:	1c 96       	adiw	r26, 0x0c	; 12
    8454:	2d 91       	ld	r18, X+
    8456:	3c 91       	ld	r19, X
    8458:	1d 97       	sbiw	r26, 0x0d	; 13
    845a:	82 1b       	sub	r24, r18
    845c:	93 0b       	sbc	r25, r19
    845e:	80 35       	cpi	r24, 0x50	; 80
    8460:	91 05       	cpc	r25, r1
    8462:	1c f0       	brlt	.+6      	; 0x846a <irCommTasks+0x41e>
						irCommRxNumReceivingSensors++;
    8464:	4f 5f       	subi	r20, 0xFF	; 255
    8466:	40 93 43 05 	sts	0x0543, r20
				break;

			case IRCOMM_RX_MAX_SENSOR_STATE:
				// check from how many sensors the robot is receiving a possible message
				for(i=0; i<8; i++) {
					if((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    846a:	8e 85       	ldd	r24, Y+14	; 0x0e
    846c:	9f 85       	ldd	r25, Y+15	; 0x0f
    846e:	fb 01       	movw	r30, r22
    8470:	26 85       	ldd	r18, Z+14	; 0x0e
    8472:	37 85       	ldd	r19, Z+15	; 0x0f
    8474:	82 1b       	sub	r24, r18
    8476:	93 0b       	sbc	r25, r19
    8478:	80 35       	cpi	r24, 0x50	; 80
    847a:	91 05       	cpc	r25, r1
    847c:	1c f0       	brlt	.+6      	; 0x8484 <irCommTasks+0x438>
						irCommRxNumReceivingSensors++;
    847e:	4f 5f       	subi	r20, 0xFF	; 255
    8480:	40 93 43 05 	sts	0x0543, r20
					}					
				}
				if(irCommRxNumReceivingSensors==0) {
    8484:	44 23       	and	r20, r20
    8486:	09 f4       	brne	.+2      	; 0x848a <irCommTasks+0x43e>
    8488:	10 c6       	rjmp	.+3104   	; 0x90aa <irCommTasks+0x105e>
						irCommRxMaxSensor++;
					} else {
						irCommRxMaxSensor = 0;
					}
				} else {
					if(irCommRxStartBitDetected==0) {
    848a:	80 91 3c 05 	lds	r24, 0x053C
    848e:	88 23       	and	r24, r24
    8490:	09 f0       	breq	.+2      	; 0x8494 <irCommTasks+0x448>
    8492:	f4 c5       	rjmp	.+3048   	; 0x907c <irCommTasks+0x1030>
						// start listening from the next sensor
						if(irCommRxMaxSensor < 7) {
    8494:	80 91 41 05 	lds	r24, 0x0541
    8498:	90 91 42 05 	lds	r25, 0x0542
    849c:	87 30       	cpi	r24, 0x07	; 7
    849e:	91 05       	cpc	r25, r1
    84a0:	0c f0       	brlt	.+2      	; 0x84a4 <irCommTasks+0x458>
    84a2:	9f c6       	rjmp	.+3390   	; 0x91e2 <irCommTasks+0x1196>
							irCommRxMaxSensor++;
    84a4:	01 96       	adiw	r24, 0x01	; 1
    84a6:	90 93 42 05 	sts	0x0542, r25
    84aa:	80 93 41 05 	sts	0x0541, r24
    84ae:	ac 01       	movw	r20, r24
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    84b0:	fa 01       	movw	r30, r20
    84b2:	ee 0f       	add	r30, r30
    84b4:	ff 1f       	adc	r31, r31
    84b6:	de 01       	movw	r26, r28
    84b8:	ae 0f       	add	r26, r30
    84ba:	bf 1f       	adc	r27, r31
    84bc:	e6 0f       	add	r30, r22
    84be:	f7 1f       	adc	r31, r23
    84c0:	0d 90       	ld	r0, X+
    84c2:	bc 91       	ld	r27, X
    84c4:	a0 2d       	mov	r26, r0
    84c6:	80 81       	ld	r24, Z
    84c8:	91 81       	ldd	r25, Z+1	; 0x01
    84ca:	a8 1b       	sub	r26, r24
    84cc:	b9 0b       	sbc	r27, r25
    84ce:	a0 35       	cpi	r26, 0x50	; 80
    84d0:	b1 05       	cpc	r27, r1
    84d2:	0c f0       	brlt	.+2      	; 0x84d6 <irCommTasks+0x48a>
    84d4:	6f c7       	rjmp	.+3806   	; 0x93b4 <irCommTasks+0x1368>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    84d6:	47 30       	cpi	r20, 0x07	; 7
    84d8:	51 05       	cpc	r21, r1
    84da:	0c f4       	brge	.+2      	; 0x84de <irCommTasks+0x492>
    84dc:	a1 c6       	rjmp	.+3394   	; 0x9220 <irCommTasks+0x11d4>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
    84de:	10 92 42 05 	sts	0x0542, r1
    84e2:	10 92 41 05 	sts	0x0541, r1
    84e6:	40 91 41 05 	lds	r20, 0x0541
    84ea:	50 91 42 05 	lds	r21, 0x0542
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    84ee:	fa 01       	movw	r30, r20
    84f0:	ee 0f       	add	r30, r30
    84f2:	ff 1f       	adc	r31, r31
    84f4:	de 01       	movw	r26, r28
    84f6:	ae 0f       	add	r26, r30
    84f8:	bf 1f       	adc	r27, r31
    84fa:	e6 0f       	add	r30, r22
    84fc:	f7 1f       	adc	r31, r23
    84fe:	0d 90       	ld	r0, X+
    8500:	bc 91       	ld	r27, X
    8502:	a0 2d       	mov	r26, r0
    8504:	80 81       	ld	r24, Z
    8506:	91 81       	ldd	r25, Z+1	; 0x01
    8508:	a8 1b       	sub	r26, r24
    850a:	b9 0b       	sbc	r27, r25
    850c:	a0 35       	cpi	r26, 0x50	; 80
    850e:	b1 05       	cpc	r27, r1
    8510:	0c f0       	brlt	.+2      	; 0x8514 <irCommTasks+0x4c8>
    8512:	50 c7       	rjmp	.+3744   	; 0x93b4 <irCommTasks+0x1368>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    8514:	47 30       	cpi	r20, 0x07	; 7
    8516:	51 05       	cpc	r21, r1
    8518:	0c f4       	brge	.+2      	; 0x851c <irCommTasks+0x4d0>
    851a:	7b c6       	rjmp	.+3318   	; 0x9212 <irCommTasks+0x11c6>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
    851c:	10 92 42 05 	sts	0x0542, r1
    8520:	10 92 41 05 	sts	0x0541, r1
    8524:	40 91 41 05 	lds	r20, 0x0541
    8528:	50 91 42 05 	lds	r21, 0x0542
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    852c:	fa 01       	movw	r30, r20
    852e:	ee 0f       	add	r30, r30
    8530:	ff 1f       	adc	r31, r31
    8532:	de 01       	movw	r26, r28
    8534:	ae 0f       	add	r26, r30
    8536:	bf 1f       	adc	r27, r31
    8538:	e6 0f       	add	r30, r22
    853a:	f7 1f       	adc	r31, r23
    853c:	0d 90       	ld	r0, X+
    853e:	bc 91       	ld	r27, X
    8540:	a0 2d       	mov	r26, r0
    8542:	80 81       	ld	r24, Z
    8544:	91 81       	ldd	r25, Z+1	; 0x01
    8546:	a8 1b       	sub	r26, r24
    8548:	b9 0b       	sbc	r27, r25
    854a:	a0 35       	cpi	r26, 0x50	; 80
    854c:	b1 05       	cpc	r27, r1
    854e:	0c f0       	brlt	.+2      	; 0x8552 <irCommTasks+0x506>
    8550:	31 c7       	rjmp	.+3682   	; 0x93b4 <irCommTasks+0x1368>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    8552:	47 30       	cpi	r20, 0x07	; 7
    8554:	51 05       	cpc	r21, r1
    8556:	0c f4       	brge	.+2      	; 0x855a <irCommTasks+0x50e>
    8558:	be c6       	rjmp	.+3452   	; 0x92d6 <irCommTasks+0x128a>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
    855a:	10 92 42 05 	sts	0x0542, r1
    855e:	10 92 41 05 	sts	0x0541, r1
    8562:	40 91 41 05 	lds	r20, 0x0541
    8566:	50 91 42 05 	lds	r21, 0x0542
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    856a:	fa 01       	movw	r30, r20
    856c:	ee 0f       	add	r30, r30
    856e:	ff 1f       	adc	r31, r31
    8570:	de 01       	movw	r26, r28
    8572:	ae 0f       	add	r26, r30
    8574:	bf 1f       	adc	r27, r31
    8576:	e6 0f       	add	r30, r22
    8578:	f7 1f       	adc	r31, r23
    857a:	0d 90       	ld	r0, X+
    857c:	bc 91       	ld	r27, X
    857e:	a0 2d       	mov	r26, r0
    8580:	80 81       	ld	r24, Z
    8582:	91 81       	ldd	r25, Z+1	; 0x01
    8584:	a8 1b       	sub	r26, r24
    8586:	b9 0b       	sbc	r27, r25
    8588:	a0 35       	cpi	r26, 0x50	; 80
    858a:	b1 05       	cpc	r27, r1
    858c:	0c f0       	brlt	.+2      	; 0x8590 <irCommTasks+0x544>
    858e:	12 c7       	rjmp	.+3620   	; 0x93b4 <irCommTasks+0x1368>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    8590:	47 30       	cpi	r20, 0x07	; 7
    8592:	51 05       	cpc	r21, r1
    8594:	0c f4       	brge	.+2      	; 0x8598 <irCommTasks+0x54c>
    8596:	a6 c6       	rjmp	.+3404   	; 0x92e4 <irCommTasks+0x1298>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
    8598:	10 92 42 05 	sts	0x0542, r1
    859c:	10 92 41 05 	sts	0x0541, r1
    85a0:	40 91 41 05 	lds	r20, 0x0541
    85a4:	50 91 42 05 	lds	r21, 0x0542
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    85a8:	fa 01       	movw	r30, r20
    85aa:	ee 0f       	add	r30, r30
    85ac:	ff 1f       	adc	r31, r31
    85ae:	de 01       	movw	r26, r28
    85b0:	ae 0f       	add	r26, r30
    85b2:	bf 1f       	adc	r27, r31
    85b4:	e6 0f       	add	r30, r22
    85b6:	f7 1f       	adc	r31, r23
    85b8:	0d 90       	ld	r0, X+
    85ba:	bc 91       	ld	r27, X
    85bc:	a0 2d       	mov	r26, r0
    85be:	80 81       	ld	r24, Z
    85c0:	91 81       	ldd	r25, Z+1	; 0x01
    85c2:	a8 1b       	sub	r26, r24
    85c4:	b9 0b       	sbc	r27, r25
    85c6:	a0 35       	cpi	r26, 0x50	; 80
    85c8:	b1 05       	cpc	r27, r1
    85ca:	0c f0       	brlt	.+2      	; 0x85ce <irCommTasks+0x582>
    85cc:	f3 c6       	rjmp	.+3558   	; 0x93b4 <irCommTasks+0x1368>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    85ce:	47 30       	cpi	r20, 0x07	; 7
    85d0:	51 05       	cpc	r21, r1
    85d2:	0c f4       	brge	.+2      	; 0x85d6 <irCommTasks+0x58a>
    85d4:	8e c6       	rjmp	.+3356   	; 0x92f2 <irCommTasks+0x12a6>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
    85d6:	10 92 42 05 	sts	0x0542, r1
    85da:	10 92 41 05 	sts	0x0541, r1
    85de:	40 91 41 05 	lds	r20, 0x0541
    85e2:	50 91 42 05 	lds	r21, 0x0542
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    85e6:	fa 01       	movw	r30, r20
    85e8:	ee 0f       	add	r30, r30
    85ea:	ff 1f       	adc	r31, r31
    85ec:	de 01       	movw	r26, r28
    85ee:	ae 0f       	add	r26, r30
    85f0:	bf 1f       	adc	r27, r31
    85f2:	e6 0f       	add	r30, r22
    85f4:	f7 1f       	adc	r31, r23
    85f6:	0d 90       	ld	r0, X+
    85f8:	bc 91       	ld	r27, X
    85fa:	a0 2d       	mov	r26, r0
    85fc:	80 81       	ld	r24, Z
    85fe:	91 81       	ldd	r25, Z+1	; 0x01
    8600:	a8 1b       	sub	r26, r24
    8602:	b9 0b       	sbc	r27, r25
    8604:	a0 35       	cpi	r26, 0x50	; 80
    8606:	b1 05       	cpc	r27, r1
    8608:	0c f0       	brlt	.+2      	; 0x860c <irCommTasks+0x5c0>
    860a:	d4 c6       	rjmp	.+3496   	; 0x93b4 <irCommTasks+0x1368>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    860c:	47 30       	cpi	r20, 0x07	; 7
    860e:	51 05       	cpc	r21, r1
    8610:	0c f4       	brge	.+2      	; 0x8614 <irCommTasks+0x5c8>
    8612:	76 c6       	rjmp	.+3308   	; 0x9300 <irCommTasks+0x12b4>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
    8614:	10 92 42 05 	sts	0x0542, r1
    8618:	10 92 41 05 	sts	0x0541, r1
    861c:	40 91 41 05 	lds	r20, 0x0541
    8620:	50 91 42 05 	lds	r21, 0x0542
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    8624:	fa 01       	movw	r30, r20
    8626:	ee 0f       	add	r30, r30
    8628:	ff 1f       	adc	r31, r31
    862a:	de 01       	movw	r26, r28
    862c:	ae 0f       	add	r26, r30
    862e:	bf 1f       	adc	r27, r31
    8630:	e6 0f       	add	r30, r22
    8632:	f7 1f       	adc	r31, r23
    8634:	0d 90       	ld	r0, X+
    8636:	bc 91       	ld	r27, X
    8638:	a0 2d       	mov	r26, r0
    863a:	80 81       	ld	r24, Z
    863c:	91 81       	ldd	r25, Z+1	; 0x01
    863e:	a8 1b       	sub	r26, r24
    8640:	b9 0b       	sbc	r27, r25
    8642:	a0 35       	cpi	r26, 0x50	; 80
    8644:	b1 05       	cpc	r27, r1
    8646:	0c f0       	brlt	.+2      	; 0x864a <irCommTasks+0x5fe>
    8648:	b5 c6       	rjmp	.+3434   	; 0x93b4 <irCommTasks+0x1368>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    864a:	47 30       	cpi	r20, 0x07	; 7
    864c:	51 05       	cpc	r21, r1
    864e:	0c f4       	brge	.+2      	; 0x8652 <irCommTasks+0x606>
    8650:	65 c6       	rjmp	.+3274   	; 0x931c <irCommTasks+0x12d0>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
    8652:	10 92 42 05 	sts	0x0542, r1
    8656:	10 92 41 05 	sts	0x0541, r1
    865a:	40 91 41 05 	lds	r20, 0x0541
    865e:	50 91 42 05 	lds	r21, 0x0542
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    8662:	fa 01       	movw	r30, r20
    8664:	ee 0f       	add	r30, r30
    8666:	ff 1f       	adc	r31, r31
    8668:	de 01       	movw	r26, r28
    866a:	ae 0f       	add	r26, r30
    866c:	bf 1f       	adc	r27, r31
    866e:	e6 0f       	add	r30, r22
    8670:	f7 1f       	adc	r31, r23
    8672:	0d 90       	ld	r0, X+
    8674:	bc 91       	ld	r27, X
    8676:	a0 2d       	mov	r26, r0
    8678:	80 81       	ld	r24, Z
    867a:	91 81       	ldd	r25, Z+1	; 0x01
    867c:	a8 1b       	sub	r26, r24
    867e:	b9 0b       	sbc	r27, r25
    8680:	a0 35       	cpi	r26, 0x50	; 80
    8682:	b1 05       	cpc	r27, r1
    8684:	0c f0       	brlt	.+2      	; 0x8688 <irCommTasks+0x63c>
    8686:	96 c6       	rjmp	.+3372   	; 0x93b4 <irCommTasks+0x1368>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    8688:	47 30       	cpi	r20, 0x07	; 7
    868a:	51 05       	cpc	r21, r1
    868c:	0c f0       	brlt	.+2      	; 0x8690 <irCommTasks+0x644>
    868e:	3f c6       	rjmp	.+3198   	; 0x930e <irCommTasks+0x12c2>
								irCommRxMaxSensor++;
    8690:	ca 01       	movw	r24, r20
    8692:	01 96       	adiw	r24, 0x01	; 1
    8694:	90 93 42 05 	sts	0x0542, r25
    8698:	80 93 41 05 	sts	0x0541, r24
    869c:	ac 01       	movw	r20, r24
					}
				}
				//turnOffGreenLeds();
				//setGreenLed(irCommRxMaxSensor, 1);			

				if(irCommRxMaxSensorIndexTemp>1) {
    869e:	80 91 0f 05 	lds	r24, 0x050F
    86a2:	82 30       	cpi	r24, 0x02	; 2
    86a4:	08 f0       	brcs	.+2      	; 0x86a8 <irCommTasks+0x65c>
    86a6:	81 e0       	ldi	r24, 0x01	; 1
					irCommRxMaxSensorIndexTemp = 1;
					//updateBlueLed(0);
				}
				irCommRxMaxSensorTemp[irCommRxMaxSensorIndexTemp] = irCommRxMaxSensor;
    86a8:	e8 2f       	mov	r30, r24
    86aa:	f0 e0       	ldi	r31, 0x00	; 0
    86ac:	ee 0f       	add	r30, r30
    86ae:	ff 1f       	adc	r31, r31
    86b0:	e9 5a       	subi	r30, 0xA9	; 169
    86b2:	f4 4f       	sbci	r31, 0xF4	; 244
    86b4:	51 83       	std	Z+1, r21	; 0x01
    86b6:	40 83       	st	Z, r20
				irCommRxMaxSensorIndexTemp++;
    86b8:	8f 5f       	subi	r24, 0xFF	; 255
    86ba:	80 93 0f 05 	sts	0x050F, r24
					
				if(irCommRxMaxDiffIndexTemp>1) {
    86be:	80 91 10 05 	lds	r24, 0x0510
    86c2:	82 30       	cpi	r24, 0x02	; 2
    86c4:	08 f0       	brcs	.+2      	; 0x86c8 <irCommTasks+0x67c>
    86c6:	81 e0       	ldi	r24, 0x01	; 1
					irCommRxMaxDiffIndexTemp = 1;
					//updateBlueLed(0);
				}
				irCommRxMaxDiffTemp[irCommRxMaxDiffIndexTemp] = irCommRxMaxDiff;
    86c8:	e8 2f       	mov	r30, r24
    86ca:	f0 e0       	ldi	r31, 0x00	; 0
    86cc:	ee 0f       	add	r30, r30
    86ce:	ff 1f       	adc	r31, r31
    86d0:	e0 57       	subi	r30, 0x70	; 112
    86d2:	f4 4f       	sbci	r31, 0xF4	; 244
    86d4:	00 91 3f 05 	lds	r16, 0x053F
    86d8:	10 91 40 05 	lds	r17, 0x0540
    86dc:	11 83       	std	Z+1, r17	; 0x01
    86de:	00 83       	st	Z, r16
				irCommRxMaxDiffIndexTemp++;
    86e0:	8f 5f       	subi	r24, 0xFF	; 255
    86e2:	80 93 10 05 	sts	0x0510, r24
				
				if(irCommMaxSensorValueCurrIndexTemp>1) {
    86e6:	20 91 13 05 	lds	r18, 0x0513
    86ea:	22 30       	cpi	r18, 0x02	; 2
    86ec:	20 f0       	brcs	.+8      	; 0x86f6 <irCommTasks+0x6aa>
					irCommMaxSensorValueCurrIndexTemp = 1;
    86ee:	81 e0       	ldi	r24, 0x01	; 1
    86f0:	80 93 13 05 	sts	0x0513, r24
    86f4:	21 e0       	ldi	r18, 0x01	; 1
					//updateBlueLed(0);
				}
				irCommMaxSensorValueCurrTemp[irCommMaxSensorValueCurrIndexTemp] = irCommMaxSensorValueCurr[irCommRxMaxSensor];
    86f6:	da 01       	movw	r26, r20
    86f8:	aa 0f       	add	r26, r26
    86fa:	bb 1f       	adc	r27, r27
    86fc:	e2 2f       	mov	r30, r18
    86fe:	f0 e0       	ldi	r31, 0x00	; 0
    8700:	ee 0f       	add	r30, r30
    8702:	ff 1f       	adc	r31, r31
    8704:	ea 59       	subi	r30, 0x9A	; 154
    8706:	fa 4f       	sbci	r31, 0xFA	; 250
    8708:	ca 0f       	add	r28, r26
    870a:	db 1f       	adc	r29, r27
    870c:	88 81       	ld	r24, Y
    870e:	99 81       	ldd	r25, Y+1	; 0x01
    8710:	91 83       	std	Z+1, r25	; 0x01
    8712:	80 83       	st	Z, r24
				irCommMaxSensorValueCurrIndexTemp++;
    8714:	2f 5f       	subi	r18, 0xFF	; 255
    8716:	20 93 13 05 	sts	0x0513, r18
				
				if(irCommMinSensorValueCurrIndexTemp>1) {
    871a:	20 91 14 05 	lds	r18, 0x0514
    871e:	22 30       	cpi	r18, 0x02	; 2
    8720:	20 f0       	brcs	.+8      	; 0x872a <irCommTasks+0x6de>
					irCommMinSensorValueCurrIndexTemp = 1;
    8722:	81 e0       	ldi	r24, 0x01	; 1
    8724:	80 93 14 05 	sts	0x0514, r24
    8728:	21 e0       	ldi	r18, 0x01	; 1
					//updateBlueLed(0);
				}
				irCommMinSensorValueCurrTemp[irCommMinSensorValueCurrIndexTemp] = irCommMinSensorValueCurr[irCommRxMaxSensor];
    872a:	e2 2f       	mov	r30, r18
    872c:	f0 e0       	ldi	r31, 0x00	; 0
    872e:	ee 0f       	add	r30, r30
    8730:	ff 1f       	adc	r31, r31
    8732:	e5 5a       	subi	r30, 0xA5	; 165
    8734:	f4 4f       	sbci	r31, 0xF4	; 244
    8736:	6a 0f       	add	r22, r26
    8738:	7b 1f       	adc	r23, r27
    873a:	db 01       	movw	r26, r22
    873c:	8d 91       	ld	r24, X+
    873e:	9c 91       	ld	r25, X
    8740:	91 83       	std	Z+1, r25	; 0x01
    8742:	80 83       	st	Z, r24
				irCommMinSensorValueCurrIndexTemp++;			
    8744:	2f 5f       	subi	r18, 0xFF	; 255
    8746:	20 93 14 05 	sts	0x0514, r18


				//if(irCommRxMaxSensor == -1) {
				//	updateRedLed(0);
				//}
				if(irCommRxMaxDiff >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    874a:	00 35       	cpi	r16, 0x50	; 80
    874c:	11 05       	cpc	r17, r1
    874e:	0c f4       	brge	.+2      	; 0x8752 <irCommTasks+0x706>
    8750:	fb c3       	rjmp	.+2038   	; 0x8f48 <irCommTasks+0xefc>
					irCommState = IRCOMM_RX_DETECT_START_BIT_STATE;	
    8752:	83 e0       	ldi	r24, 0x03	; 3
    8754:	80 93 f5 04 	sts	0x04F5, r24
					
					if(irCommStateIndexTemp>13) {
    8758:	90 91 1c 05 	lds	r25, 0x051C
    875c:	9e 30       	cpi	r25, 0x0E	; 14
    875e:	20 f0       	brcs	.+8      	; 0x8768 <irCommTasks+0x71c>

				} else {
					irCommState = IRCOMM_RX_WAITING_BIT;

					if(irCommStateIndexTemp>13) {
						irCommStateIndexTemp = 13;
    8760:	8d e0       	ldi	r24, 0x0D	; 13
    8762:	80 93 1c 05 	sts	0x051C, r24
    8766:	9d e0       	ldi	r25, 0x0D	; 13
						//updateRedLed(0);
					}
					irCommStateTemp[irCommStateIndexTemp] = irCommState;
    8768:	80 91 f5 04 	lds	r24, 0x04F5
    876c:	e9 2f       	mov	r30, r25
    876e:	f0 e0       	ldi	r31, 0x00	; 0
    8770:	e6 59       	subi	r30, 0x96	; 150
    8772:	fa 4f       	sbci	r31, 0xFA	; 250
    8774:	80 83       	st	Z, r24
					irCommStateIndexTemp++;
    8776:	9f 5f       	subi	r25, 0xFF	; 255
    8778:	90 93 1c 05 	sts	0x051C, r25
    877c:	80 cc       	rjmp	.-1792   	; 0x807e <irCommTasks+0x32>
				irCommState = IRCOMM_TX_COMPUTE_TIMINGS;				
				break;

			case IRCOMM_TX_COMPUTE_TIMINGS:
				//updateBlueLed(255);
				if(irCommTxBitToTransmit[irCommTxBitCount] == 3) {
    877e:	20 91 4c 05 	lds	r18, 0x054C
    8782:	e2 2f       	mov	r30, r18
    8784:	f0 e0       	ldi	r31, 0x00	; 0
    8786:	ee 57       	subi	r30, 0x7E	; 126
    8788:	fa 4f       	sbci	r31, 0xFA	; 250
    878a:	e0 81       	ld	r30, Z
    878c:	e3 30       	cpi	r30, 0x03	; 3
    878e:	09 f4       	brne	.+2      	; 0x8792 <irCommTasks+0x746>
    8790:	48 c4       	rjmp	.+2192   	; 0x9022 <irCommTasks+0xfd6>
					//updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START2_DURATION;					
					irCommTxSwitchCount = IRCOMM_BIT_START2_SWITCH_COUNT;
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 2) {
    8792:	e2 30       	cpi	r30, 0x02	; 2
    8794:	11 f1       	breq	.+68     	; 0x87da <irCommTasks+0x78e>
					//updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START1_DURATION;					
					irCommTxSwitchCount = IRCOMM_BIT_START1_SWITCH_COUNT;
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 1) {
    8796:	e1 30       	cpi	r30, 0x01	; 1
    8798:	09 f4       	brne	.+2      	; 0x879c <irCommTasks+0x750>
    879a:	db c4       	rjmp	.+2486   	; 0x9152 <irCommTasks+0x1106>
					irCommTxDuration = IRCOMM_BIT1_DURATOIN;					
					irCommTxSwitchCount = IRCOMM_BIT1_SWITCH_COUNT;
				} else {
					irCommTxDuration = IRCOMM_BIT0_DURATION;						
    879c:	8e e1       	ldi	r24, 0x1E	; 30
    879e:	90 e0       	ldi	r25, 0x00	; 0
    87a0:	90 93 4f 05 	sts	0x054F, r25
    87a4:	80 93 4e 05 	sts	0x054E, r24
					irCommTxSwitchCount = IRCOMM_BIT0_SWITCH_COUNT;
    87a8:	88 e0       	ldi	r24, 0x08	; 8
    87aa:	80 93 50 05 	sts	0x0550, r24
				}
				if(irCommTxBitCount == 0) {
    87ae:	22 23       	and	r18, r18
    87b0:	51 f4       	brne	.+20     	; 0x87c6 <irCommTasks+0x77a>
					//PORTA = irCommTxSensorMask;
					if(irCommTxSensorGroup==0) {
    87b2:	80 91 54 05 	lds	r24, 0x0554
    87b6:	88 23       	and	r24, r24
    87b8:	09 f0       	breq	.+2      	; 0x87bc <irCommTasks+0x770>
    87ba:	43 c4       	rjmp	.+2182   	; 0x9042 <irCommTasks+0xff6>
						PORTA = 0xAA;
    87bc:	8a ea       	ldi	r24, 0xAA	; 170
    87be:	82 b9       	out	0x02, r24	; 2
					} else {
						PORTA = 0x55;
					}					
					irCommTxPulseState = 1;
    87c0:	81 e0       	ldi	r24, 0x01	; 1
    87c2:	80 93 4d 05 	sts	0x054D, r24
				}
				irCommTxDurationCycle = 0;
    87c6:	10 92 52 05 	sts	0x0552, r1
				irCommTxSwitchCounter = 0;						
    87ca:	10 92 51 05 	sts	0x0551, r1
				irCommState = IRCOMM_TX_TRANSMIT_BIT;
    87ce:	83 e0       	ldi	r24, 0x03	; 3
    87d0:	80 93 f5 04 	sts	0x04F5, r24
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ1;
    87d4:	80 93 44 05 	sts	0x0544, r24
    87d8:	52 cc       	rjmp	.-1884   	; 0x807e <irCommTasks+0x32>
					//updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START2_DURATION;					
					irCommTxSwitchCount = IRCOMM_BIT_START2_SWITCH_COUNT;
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 2) {
					//updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START1_DURATION;					
    87da:	88 e7       	ldi	r24, 0x78	; 120
    87dc:	90 e0       	ldi	r25, 0x00	; 0
    87de:	90 93 4f 05 	sts	0x054F, r25
    87e2:	80 93 4e 05 	sts	0x054E, r24
					irCommTxSwitchCount = IRCOMM_BIT_START1_SWITCH_COUNT;
    87e6:	e0 93 50 05 	sts	0x0550, r30
    87ea:	e1 cf       	rjmp	.-62     	; 0x87ae <irCommTasks+0x762>
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
							irCommSwitchCount++;
    87ec:	3f 5f       	subi	r19, 0xFF	; 255
    87ee:	21 e0       	ldi	r18, 0x01	; 1
    87f0:	bd cd       	rjmp	.-1158   	; 0x836c <irCommTasks+0x320>
				irCommState = IRCOMM_RX_IDLE_STATE;

				break;

			case IRCOMM_RX_DEBUG:								
				irCommSendValues = 0;						
    87f2:	10 92 f8 04 	sts	0x04F8, r1
				while(irCommSendValues==0);	// wait for the start from the uart (computer)
    87f6:	80 91 f8 04 	lds	r24, 0x04F8
    87fa:	88 23       	and	r24, r24
    87fc:	e1 f3       	breq	.-8      	; 0x87f6 <irCommTasks+0x7aa>
				usart0Transmit(0xFF, 1);
    87fe:	8f ef       	ldi	r24, 0xFF	; 255
    8800:	61 e0       	ldi	r22, 0x01	; 1
    8802:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
				usart0Transmit(irCommRxMaxSensorTemp[0],1);
    8806:	80 91 57 0b 	lds	r24, 0x0B57
    880a:	61 e0       	ldi	r22, 0x01	; 1
    880c:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
				usart0Transmit(irCommRxMaxSensorTemp[1],1);
    8810:	80 91 59 0b 	lds	r24, 0x0B59
    8814:	61 e0       	ldi	r22, 0x01	; 1
    8816:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
				usart0Transmit(irCommRxMaxDiffTemp[0]&0xFF,1);
    881a:	80 91 90 0b 	lds	r24, 0x0B90
    881e:	61 e0       	ldi	r22, 0x01	; 1
    8820:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
				usart0Transmit(irCommRxMaxDiffTemp[0]>>8,1);
    8824:	80 91 91 0b 	lds	r24, 0x0B91
    8828:	61 e0       	ldi	r22, 0x01	; 1
    882a:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
				usart0Transmit(irCommRxMaxDiffTemp[1]&0xFF,1);
    882e:	80 91 92 0b 	lds	r24, 0x0B92
    8832:	61 e0       	ldi	r22, 0x01	; 1
    8834:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
				usart0Transmit(irCommRxMaxDiffTemp[1]>>8,1);
    8838:	80 91 93 0b 	lds	r24, 0x0B93
    883c:	61 e0       	ldi	r22, 0x01	; 1
    883e:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
				usart0Transmit(irCommProxMeanTemp[0]&0xFF,1);
    8842:	80 91 9d 05 	lds	r24, 0x059D
    8846:	61 e0       	ldi	r22, 0x01	; 1
    8848:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
				usart0Transmit(irCommProxMeanTemp[0]>>8,1);
    884c:	80 91 9e 05 	lds	r24, 0x059E
    8850:	61 e0       	ldi	r22, 0x01	; 1
    8852:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
				usart0Transmit(irCommProxMeanTemp[1]&0xFF,1);
    8856:	80 91 9f 05 	lds	r24, 0x059F
    885a:	61 e0       	ldi	r22, 0x01	; 1
    885c:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
				usart0Transmit(irCommProxMeanTemp[1]>>8,1);
    8860:	80 91 a0 05 	lds	r24, 0x05A0
    8864:	61 e0       	ldi	r22, 0x01	; 1
    8866:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
				usart0Transmit(irCommSwitchCountTemp[0],1);
    886a:	80 91 7f 05 	lds	r24, 0x057F
    886e:	61 e0       	ldi	r22, 0x01	; 1
    8870:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
				usart0Transmit(irCommSwitchCountTemp[1],1);
    8874:	80 91 80 05 	lds	r24, 0x0580
    8878:	61 e0       	ldi	r22, 0x01	; 1
    887a:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
    887e:	c0 e0       	ldi	r28, 0x00	; 0
    8880:	d0 e0       	ldi	r29, 0x00	; 0
				for(i=0; i<IRCOMM_SAMPLING_WINDOW*2; i++) {
					irCommTempValue = irCommMaxSensorSignalTemp[i];
    8882:	fe 01       	movw	r30, r28
    8884:	e7 56       	subi	r30, 0x67	; 103
    8886:	f7 4f       	sbci	r31, 0xF7	; 247
    8888:	80 81       	ld	r24, Z
    888a:	91 81       	ldd	r25, Z+1	; 0x01
    888c:	80 93 f6 04 	sts	0x04F6, r24
    8890:	90 93 f7 04 	sts	0x04F7, r25
					usart0Transmit(irCommTempValue&0xFF,1);
    8894:	61 e0       	ldi	r22, 0x01	; 1
    8896:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
					usart0Transmit(irCommTempValue>>8,1);
    889a:	80 91 f7 04 	lds	r24, 0x04F7
    889e:	61 e0       	ldi	r22, 0x01	; 1
    88a0:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
					irCommTempValue = irCommMaxSensorSignalFiltTemp[i];
    88a4:	fe 01       	movw	r30, r28
    88a6:	eb 55       	subi	r30, 0x5B	; 91
    88a8:	fa 4f       	sbci	r31, 0xFA	; 250
    88aa:	80 81       	ld	r24, Z
    88ac:	91 81       	ldd	r25, Z+1	; 0x01
    88ae:	80 93 f6 04 	sts	0x04F6, r24
    88b2:	90 93 f7 04 	sts	0x04F7, r25
					usart0Transmit(irCommTempValue&0xFF,1);
    88b6:	61 e0       	ldi	r22, 0x01	; 1
    88b8:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
					usart0Transmit(irCommTempValue>>8,1);
    88bc:	80 91 f7 04 	lds	r24, 0x04F7
    88c0:	61 e0       	ldi	r22, 0x01	; 1
    88c2:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
    88c6:	22 96       	adiw	r28, 0x02	; 2
				usart0Transmit(irCommProxMeanTemp[0]>>8,1);
				usart0Transmit(irCommProxMeanTemp[1]&0xFF,1);
				usart0Transmit(irCommProxMeanTemp[1]>>8,1);
				usart0Transmit(irCommSwitchCountTemp[0],1);
				usart0Transmit(irCommSwitchCountTemp[1],1);
				for(i=0; i<IRCOMM_SAMPLING_WINDOW*2; i++) {
    88c8:	c0 35       	cpi	r28, 0x50	; 80
    88ca:	d1 05       	cpc	r29, r1
    88cc:	d1 f6       	brne	.-76     	; 0x8882 <irCommTasks+0x836>
					usart0Transmit(irCommTempValue>>8,1);
					irCommTempValue = irCommMaxSensorSignalFiltTemp[i];
					usart0Transmit(irCommTempValue&0xFF,1);
					usart0Transmit(irCommTempValue>>8,1);
				}
				usart0Transmit(irCommMaxSensorValueCurrTemp[0]&0xFF,1);
    88ce:	80 91 66 05 	lds	r24, 0x0566
    88d2:	61 e0       	ldi	r22, 0x01	; 1
    88d4:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
				usart0Transmit(irCommMaxSensorValueCurrTemp[0]>>8,1);
    88d8:	80 91 67 05 	lds	r24, 0x0567
    88dc:	61 e0       	ldi	r22, 0x01	; 1
    88de:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
				usart0Transmit(irCommMaxSensorValueCurrTemp[1]&0xFF,1);
    88e2:	80 91 68 05 	lds	r24, 0x0568
    88e6:	61 e0       	ldi	r22, 0x01	; 1
    88e8:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
				usart0Transmit(irCommMaxSensorValueCurrTemp[1]>>8,1);
    88ec:	80 91 69 05 	lds	r24, 0x0569
    88f0:	61 e0       	ldi	r22, 0x01	; 1
    88f2:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
				usart0Transmit(irCommMinSensorValueCurrTemp[0]&0xFF,1);
    88f6:	80 91 5b 0b 	lds	r24, 0x0B5B
    88fa:	61 e0       	ldi	r22, 0x01	; 1
    88fc:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
				usart0Transmit(irCommMinSensorValueCurrTemp[0]>>8,1);
    8900:	80 91 5c 0b 	lds	r24, 0x0B5C
    8904:	61 e0       	ldi	r22, 0x01	; 1
    8906:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
				usart0Transmit(irCommMinSensorValueCurrTemp[1]&0xFF,1);
    890a:	80 91 5d 0b 	lds	r24, 0x0B5D
    890e:	61 e0       	ldi	r22, 0x01	; 1
    8910:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
				usart0Transmit(irCommMinSensorValueCurrTemp[1]>>8,1);
    8914:	80 91 5e 0b 	lds	r24, 0x0B5E
    8918:	61 e0       	ldi	r22, 0x01	; 1
    891a:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
				usart0Transmit(irCommShiftCountTemp[0],1);
    891e:	80 91 a9 0b 	lds	r24, 0x0BA9
    8922:	61 e0       	ldi	r22, 0x01	; 1
    8924:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
				usart0Transmit(irCommShiftCountTemp[1],1);
    8928:	80 91 aa 0b 	lds	r24, 0x0BAA
    892c:	61 e0       	ldi	r22, 0x01	; 1
    892e:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
				usart0Transmit(irCommShiftCountFinalTemp[0],1);
    8932:	80 91 63 0b 	lds	r24, 0x0B63
    8936:	61 e0       	ldi	r22, 0x01	; 1
    8938:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
				usart0Transmit(irCommShiftCountFinalTemp[1],1);
    893c:	80 91 64 0b 	lds	r24, 0x0B64
    8940:	61 e0       	ldi	r22, 0x01	; 1
    8942:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
				usart0Transmit(irCommStartDiffTemp[0]&0xFF,1);
    8946:	80 91 ea 08 	lds	r24, 0x08EA
    894a:	61 e0       	ldi	r22, 0x01	; 1
    894c:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
				usart0Transmit(irCommStartDiffTemp[0]>>8,1);
    8950:	80 91 eb 08 	lds	r24, 0x08EB
    8954:	61 e0       	ldi	r22, 0x01	; 1
    8956:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
				usart0Transmit(irCommStartDiffTemp[1]&0xFF,1);
    895a:	80 91 ec 08 	lds	r24, 0x08EC
    895e:	61 e0       	ldi	r22, 0x01	; 1
    8960:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
				usart0Transmit(irCommStartDiffTemp[1]>>8,1);
    8964:	80 91 ed 08 	lds	r24, 0x08ED
    8968:	61 e0       	ldi	r22, 0x01	; 1
    896a:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
				usart0Transmit(irCommComputeShiftTemp[0],1);
    896e:	80 91 9a 05 	lds	r24, 0x059A
    8972:	61 e0       	ldi	r22, 0x01	; 1
    8974:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
				usart0Transmit(irCommComputeShiftTemp[1],1);
    8978:	80 91 9b 05 	lds	r24, 0x059B
    897c:	61 e0       	ldi	r22, 0x01	; 1
    897e:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
				usart0Transmit(irCommRxPeakHighToLowTemp[0],1);
    8982:	80 91 f7 05 	lds	r24, 0x05F7
    8986:	61 e0       	ldi	r22, 0x01	; 1
    8988:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
				usart0Transmit(irCommRxPeakHighToLowTemp[1],1);
    898c:	80 91 f8 05 	lds	r24, 0x05F8
    8990:	61 e0       	ldi	r22, 0x01	; 1
    8992:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
				usart0Transmit(irCommRxStartPeakDurationTemp[0],1);
    8996:	80 91 39 07 	lds	r24, 0x0739
    899a:	61 e0       	ldi	r22, 0x01	; 1
    899c:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
				usart0Transmit(irCommRxStartPeakDurationTemp[1],1);
    89a0:	80 91 3a 07 	lds	r24, 0x073A
    89a4:	61 e0       	ldi	r22, 0x01	; 1
    89a6:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
				usart0Transmit(irCommRxStartBitDetectedTemp[0],1);
    89aa:	80 91 a3 05 	lds	r24, 0x05A3
    89ae:	61 e0       	ldi	r22, 0x01	; 1
    89b0:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
				usart0Transmit(irCommRxStartBitDetectedTemp[1],1);
    89b4:	80 91 a4 05 	lds	r24, 0x05A4
    89b8:	61 e0       	ldi	r22, 0x01	; 1
    89ba:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
				usart0Transmit(irCommSyncStateTemp[0],1);
    89be:	80 91 98 05 	lds	r24, 0x0598
    89c2:	61 e0       	ldi	r22, 0x01	; 1
    89c4:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
				usart0Transmit(irCommSyncStateTemp[1],1);
    89c8:	80 91 99 05 	lds	r24, 0x0599
    89cc:	61 e0       	ldi	r22, 0x01	; 1
    89ce:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
				for(i=0; i<14; i++) {
					usart0Transmit(irCommStateTemp[i],1);
    89d2:	80 91 6a 05 	lds	r24, 0x056A
    89d6:	61 e0       	ldi	r22, 0x01	; 1
    89d8:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
    89dc:	80 91 6b 05 	lds	r24, 0x056B
    89e0:	61 e0       	ldi	r22, 0x01	; 1
    89e2:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
    89e6:	80 91 6c 05 	lds	r24, 0x056C
    89ea:	61 e0       	ldi	r22, 0x01	; 1
    89ec:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
    89f0:	80 91 6d 05 	lds	r24, 0x056D
    89f4:	61 e0       	ldi	r22, 0x01	; 1
    89f6:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
    89fa:	80 91 6e 05 	lds	r24, 0x056E
    89fe:	61 e0       	ldi	r22, 0x01	; 1
    8a00:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
    8a04:	80 91 6f 05 	lds	r24, 0x056F
    8a08:	61 e0       	ldi	r22, 0x01	; 1
    8a0a:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
    8a0e:	80 91 70 05 	lds	r24, 0x0570
    8a12:	61 e0       	ldi	r22, 0x01	; 1
    8a14:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
    8a18:	80 91 71 05 	lds	r24, 0x0571
    8a1c:	61 e0       	ldi	r22, 0x01	; 1
    8a1e:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
    8a22:	80 91 72 05 	lds	r24, 0x0572
    8a26:	61 e0       	ldi	r22, 0x01	; 1
    8a28:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
    8a2c:	80 91 73 05 	lds	r24, 0x0573
    8a30:	61 e0       	ldi	r22, 0x01	; 1
    8a32:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
    8a36:	80 91 74 05 	lds	r24, 0x0574
    8a3a:	61 e0       	ldi	r22, 0x01	; 1
    8a3c:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
    8a40:	80 91 75 05 	lds	r24, 0x0575
    8a44:	61 e0       	ldi	r22, 0x01	; 1
    8a46:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
    8a4a:	80 91 76 05 	lds	r24, 0x0576
    8a4e:	61 e0       	ldi	r22, 0x01	; 1
    8a50:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
    8a54:	80 91 77 05 	lds	r24, 0x0577
    8a58:	61 e0       	ldi	r22, 0x01	; 1
    8a5a:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
    8a5e:	c5 ec       	ldi	r28, 0xC5	; 197
    8a60:	d9 e0       	ldi	r29, 0x09	; 9
				}
				for(i=0; i<200; i++) {
					irCommTempValue = irCommBitsSignalTemp[i];
    8a62:	88 81       	ld	r24, Y
    8a64:	99 81       	ldd	r25, Y+1	; 0x01
    8a66:	80 93 f6 04 	sts	0x04F6, r24
    8a6a:	90 93 f7 04 	sts	0x04F7, r25
					usart0Transmit(irCommTempValue&0xFF,1);
    8a6e:	61 e0       	ldi	r22, 0x01	; 1
    8a70:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
					usart0Transmit(irCommTempValue>>8,1);
    8a74:	80 91 f7 04 	lds	r24, 0x04F7
    8a78:	61 e0       	ldi	r22, 0x01	; 1
    8a7a:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
    8a7e:	22 96       	adiw	r28, 0x02	; 2
				usart0Transmit(irCommSyncStateTemp[0],1);
				usart0Transmit(irCommSyncStateTemp[1],1);
				for(i=0; i<14; i++) {
					usart0Transmit(irCommStateTemp[i],1);
				}
				for(i=0; i<200; i++) {
    8a80:	9b e0       	ldi	r25, 0x0B	; 11
    8a82:	c5 35       	cpi	r28, 0x55	; 85
    8a84:	d9 07       	cpc	r29, r25
    8a86:	69 f7       	brne	.-38     	; 0x8a62 <irCommTasks+0xa16>
					irCommTempValue = irCommBitsSignalTemp[i];
					usart0Transmit(irCommTempValue&0xFF,1);
					usart0Transmit(irCommTempValue>>8,1);
				}
				for(i=0; i<10; i++) {
					usart0Transmit(irCommRxBitReceivedTemp[i],1);
    8a88:	80 91 8d 08 	lds	r24, 0x088D
    8a8c:	61 e0       	ldi	r22, 0x01	; 1
    8a8e:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
    8a92:	80 91 8e 08 	lds	r24, 0x088E
    8a96:	61 e0       	ldi	r22, 0x01	; 1
    8a98:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
    8a9c:	80 91 8f 08 	lds	r24, 0x088F
    8aa0:	61 e0       	ldi	r22, 0x01	; 1
    8aa2:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
    8aa6:	80 91 90 08 	lds	r24, 0x0890
    8aaa:	61 e0       	ldi	r22, 0x01	; 1
    8aac:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
    8ab0:	80 91 91 08 	lds	r24, 0x0891
    8ab4:	61 e0       	ldi	r22, 0x01	; 1
    8ab6:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
    8aba:	80 91 92 08 	lds	r24, 0x0892
    8abe:	61 e0       	ldi	r22, 0x01	; 1
    8ac0:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
    8ac4:	80 91 93 08 	lds	r24, 0x0893
    8ac8:	61 e0       	ldi	r22, 0x01	; 1
    8aca:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
    8ace:	80 91 94 08 	lds	r24, 0x0894
    8ad2:	61 e0       	ldi	r22, 0x01	; 1
    8ad4:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
    8ad8:	80 91 95 08 	lds	r24, 0x0895
    8adc:	61 e0       	ldi	r22, 0x01	; 1
    8ade:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
    8ae2:	80 91 96 08 	lds	r24, 0x0896
    8ae6:	61 e0       	ldi	r22, 0x01	; 1
    8ae8:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
				}
				usart0Transmit(irCommRxCrc,1);
    8aec:	80 91 23 05 	lds	r24, 0x0523
    8af0:	61 e0       	ldi	r22, 0x01	; 1
    8af2:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
				usart0Transmit(irCommRxCrcError,1);
    8af6:	80 91 33 05 	lds	r24, 0x0533
    8afa:	61 e0       	ldi	r22, 0x01	; 1
    8afc:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
				usart0Transmit(irCommRxByte,1);
    8b00:	80 91 34 05 	lds	r24, 0x0534
    8b04:	61 e0       	ldi	r22, 0x01	; 1
    8b06:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
				usart0Transmit(irCommRxByteExpected,1);				
    8b0a:	80 91 37 05 	lds	r24, 0x0537
    8b0e:	61 e0       	ldi	r22, 0x01	; 1
    8b10:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>

				irCommState = IRCOMM_RX_STOP;
    8b14:	89 e0       	ldi	r24, 0x09	; 9
    8b16:	80 93 f5 04 	sts	0x04F5, r24
    8b1a:	b1 ca       	rjmp	.-2718   	; 0x807e <irCommTasks+0x32>

				}							
				break;

			case IRCOMM_RX_CHECK_CRC:
				irCommRxCrcError = (irCommRxCrc + (irCommRxBitReceived[8]<<1) + irCommRxBitReceived[9])&0x03;
    8b1c:	80 91 97 05 	lds	r24, 0x0597
    8b20:	90 91 23 05 	lds	r25, 0x0523
    8b24:	89 0f       	add	r24, r25
    8b26:	90 91 96 05 	lds	r25, 0x0596
    8b2a:	99 0f       	add	r25, r25
    8b2c:	89 0f       	add	r24, r25
    8b2e:	83 70       	andi	r24, 0x03	; 3
    8b30:	80 93 33 05 	sts	0x0533, r24
				if(irCommRxCrcError==0) {
    8b34:	88 23       	and	r24, r24
    8b36:	69 f4       	brne	.+26     	; 0x8b52 <irCommTasks+0xb06>
					irCommRxLastDataReceived = irCommRxByte;
    8b38:	80 91 34 05 	lds	r24, 0x0534
    8b3c:	80 93 39 05 	sts	0x0539, r24
					irCommRxReceivingSensor = irCommRxMaxSensor;
    8b40:	90 91 41 05 	lds	r25, 0x0541
    8b44:	90 93 15 02 	sts	0x0215, r25
					irCommRxDataAvailable = 1;
    8b48:	00 93 3a 05 	sts	0x053A, r16
					//updateBlueLed(0);
					usart0Transmit(irCommRxByte,1);		
    8b4c:	61 e0       	ldi	r22, 0x01	; 1
    8b4e:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <usart0Transmit>
					//updateBlueLed(255);			
				}
												
				currentProx = 0;
    8b52:	10 92 40 02 	sts	0x0240, r1
				adcSaveDataTo = SKIP_SAMPLE;
    8b56:	85 e0       	ldi	r24, 0x05	; 5
    8b58:	80 93 d5 02 	sts	0x02D5, r24
				adcSamplingState = 0;
    8b5c:	10 92 d6 02 	sts	0x02D6, r1
				irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;				
    8b60:	10 92 f4 04 	sts	0x04F4, r1
				} else {
					irCommRxPrevDataReceived = irCommRxLastDataReceived;
				}
				*/

				resetDebugVariables();
    8b64:	0e 94 7d 3f 	call	0x7efa	; 0x7efa <resetDebugVariables>

				irCommState = IRCOMM_RX_IDLE_STATE;
    8b68:	81 e0       	ldi	r24, 0x01	; 1
    8b6a:	80 93 f5 04 	sts	0x04F5, r24
    8b6e:	87 ca       	rjmp	.-2802   	; 0x807e <irCommTasks+0x32>

	if(irCommMode==IRCOMM_MODE_RECEIVE) {

		switch(irCommState) {
			case IRCOMM_RX_IDLE_STATE:				
				if((irCommRxStartBitDetected==0) && (irCommEnabled!=irCommEnabledNext)) {
    8b70:	80 91 3c 05 	lds	r24, 0x053C
    8b74:	88 23       	and	r24, r24
    8b76:	09 f0       	breq	.+2      	; 0x8b7a <irCommTasks+0xb2e>
    8b78:	82 ca       	rjmp	.-2812   	; 0x807e <irCommTasks+0x32>
    8b7a:	90 91 f2 04 	lds	r25, 0x04F2
    8b7e:	80 91 f3 04 	lds	r24, 0x04F3
    8b82:	98 17       	cp	r25, r24
    8b84:	09 f4       	brne	.+2      	; 0x8b88 <irCommTasks+0xb3c>
    8b86:	7b ca       	rjmp	.-2826   	; 0x807e <irCommTasks+0x32>
					if((getTime100MicroSec() - irCommTxLastTransmissionTime) > PAUSE_200_MSEC) {
    8b88:	0e 94 04 10 	call	0x2008	; 0x2008 <getTime100MicroSec>
    8b8c:	20 91 47 05 	lds	r18, 0x0547
    8b90:	30 91 48 05 	lds	r19, 0x0548
    8b94:	40 91 49 05 	lds	r20, 0x0549
    8b98:	50 91 4a 05 	lds	r21, 0x054A
    8b9c:	62 1b       	sub	r22, r18
    8b9e:	73 0b       	sbc	r23, r19
    8ba0:	84 0b       	sbc	r24, r20
    8ba2:	95 0b       	sbc	r25, r21
    8ba4:	64 58       	subi	r22, 0x84	; 132
    8ba6:	77 40       	sbci	r23, 0x07	; 7
    8ba8:	80 40       	sbci	r24, 0x00	; 0
    8baa:	90 40       	sbci	r25, 0x00	; 0
    8bac:	08 f4       	brcc	.+2      	; 0x8bb0 <irCommTasks+0xb64>
    8bae:	67 ca       	rjmp	.-2866   	; 0x807e <irCommTasks+0x32>
#include "irCommunication.h"


void irCommInitTransmitter() {
	irCommEnabled = IRCOMM_MODE_TRANSMIT;
    8bb0:	82 e0       	ldi	r24, 0x02	; 2
    8bb2:	80 93 f2 04 	sts	0x04F2, r24
	irCommState = IRCOMM_TX_IDLE_STATE;
    8bb6:	10 93 f5 04 	sts	0x04F5, r17
    8bba:	61 ca       	rjmp	.-2878   	; 0x807e <irCommTasks+0x32>
				break;

			case IRCOMM_RX_DETECT_START_BIT_STATE:
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
				irCommTempMin = 1024;
    8bbc:	80 e0       	ldi	r24, 0x00	; 0
    8bbe:	94 e0       	ldi	r25, 0x04	; 4
    8bc0:	90 93 2b 05 	sts	0x052B, r25
    8bc4:	80 93 2a 05 	sts	0x052A, r24
				irCommTempMax = 0;
    8bc8:	10 92 29 05 	sts	0x0529, r1
    8bcc:	10 92 28 05 	sts	0x0528, r1
				irCommShiftCount = 0;
    8bd0:	10 92 2c 05 	sts	0x052C, r1
				irCommComputeShift = 1;												
    8bd4:	00 93 2d 05 	sts	0x052D, r16
    8bd8:	c0 90 41 05 	lds	r12, 0x0541
    8bdc:	d0 90 42 05 	lds	r13, 0x0542
    8be0:	cc 0c       	add	r12, r12
    8be2:	dd 1c       	adc	r13, r13
    8be4:	77 e6       	ldi	r23, 0x67	; 103
    8be6:	a7 2e       	mov	r10, r23
    8be8:	7b e0       	ldi	r23, 0x0B	; 11
    8bea:	b7 2e       	mov	r11, r23
    8bec:	e5 01       	movw	r28, r10
    8bee:	ee 24       	eor	r14, r14
    8bf0:	ff 24       	eor	r15, r15
    8bf2:	87 01       	movw	r16, r14
    8bf4:	60 90 7b 08 	lds	r6, 0x087B
    8bf8:	70 90 7c 08 	lds	r7, 0x087C
    8bfc:	90 90 0d 05 	lds	r9, 0x050D
    8c00:	88 24       	eor	r8, r8
    8c02:	83 94       	inc	r8
    8c04:	55 24       	eor	r5, r5
							} else {
								//updateGreenLed(0);
							}
							irCommTempMin = irCommMaxSensorSignal[i];	// otherwise I cannot detect spike of one sample (peakDuration=1), related to sensors sampling
							irCommTempMax = irCommMaxSensorSignal[i];
							irCommComputeShift = 2;
    8c06:	62 e0       	ldi	r22, 0x02	; 2
    8c08:	36 2e       	mov	r3, r22
							

							if(irCommMaxSensorSignal[i] == irCommTempMax) {
								irCommRxPeakHighToLow = 0;
							} else if(irCommMaxSensorSignal[i] == irCommTempMin) {
								irCommRxPeakHighToLow = 1;
    8c0a:	22 24       	eor	r2, r2
    8c0c:	23 94       	inc	r2
    8c0e:	0e c0       	rjmp	.+28     	; 0x8c2c <irCommTasks+0xbe0>
							irCommTempMax = irCommMaxSensorSignal[i];
							irCommComputeShift = 2;
							irCommShiftCount--;	// the current sample is already part of the signal start thus do not skip it
							irCommRxStartPeakDuration = 0;
						}
					 } else if(irCommComputeShift == 2) {		
    8c10:	f2 e0       	ldi	r31, 0x02	; 2
    8c12:	8f 16       	cp	r8, r31
    8c14:	09 f4       	brne	.+2      	; 0x8c18 <irCommTasks+0xbcc>
    8c16:	7f c0       	rjmp	.+254    	; 0x8d16 <irCommTasks+0xcca>
						}	
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
							if((irCommMaxSensorSignal[i]==irCommTempMax) && (irCommRxPeakHighToLow==1)) {
								irCommComputeShift = 0;
							} else if((irCommMaxSensorSignal[i]==irCommTempMin) && (irCommRxPeakHighToLow==0)) {
								irCommComputeShift = 0;
    8c18:	80 e1       	ldi	r24, 0x10	; 16
    8c1a:	90 e0       	ldi	r25, 0x00	; 0
    8c1c:	c8 0e       	add	r12, r24
    8c1e:	d9 1e       	adc	r13, r25
    8c20:	22 96       	adiw	r28, 0x02	; 2
				irCommProxSum = 0;
				irCommTempMin = 1024;
				irCommTempMax = 0;
				irCommShiftCount = 0;
				irCommComputeShift = 1;												
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    8c22:	9b e0       	ldi	r25, 0x0B	; 11
    8c24:	cf 38       	cpi	r28, 0x8F	; 143
    8c26:	d9 07       	cpc	r29, r25
    8c28:	09 f4       	brne	.+2      	; 0x8c2c <irCommTasks+0xbe0>
    8c2a:	aa c0       	rjmp	.+340    	; 0x8d80 <irCommTasks+0xd34>
					irCommMaxSensorSignal[i] = irCommProxValuesCurr[irCommRxMaxSensor+i*8];
    8c2c:	f3 01       	movw	r30, r6
    8c2e:	ec 0d       	add	r30, r12
    8c30:	fd 1d       	adc	r31, r13
    8c32:	20 81       	ld	r18, Z
    8c34:	31 81       	ldd	r19, Z+1	; 0x01
    8c36:	39 83       	std	Y+1, r19	; 0x01
    8c38:	28 83       	st	Y, r18

					if(irCommMaxSensorSignalIndexTemp>39) {
    8c3a:	b7 e2       	ldi	r27, 0x27	; 39
    8c3c:	b9 15       	cp	r27, r9
    8c3e:	10 f4       	brcc	.+4      	; 0x8c44 <irCommTasks+0xbf8>
    8c40:	57 e2       	ldi	r21, 0x27	; 39
    8c42:	95 2e       	mov	r9, r21
						irCommMaxSensorSignalIndexTemp = 39;
						//updateRedLed(0);
					}
					irCommMaxSensorSignalTemp[irCommMaxSensorSignalIndexTemp] = irCommMaxSensorSignal[i];
    8c44:	e9 2d       	mov	r30, r9
    8c46:	f0 e0       	ldi	r31, 0x00	; 0
    8c48:	ee 0f       	add	r30, r30
    8c4a:	ff 1f       	adc	r31, r31
    8c4c:	e7 56       	subi	r30, 0x67	; 103
    8c4e:	f7 4f       	sbci	r31, 0xF7	; 247
    8c50:	31 83       	std	Z+1, r19	; 0x01
    8c52:	20 83       	st	Z, r18
					irCommMaxSensorSignalIndexTemp++;					
    8c54:	93 94       	inc	r9
    8c56:	90 92 0d 05 	sts	0x050D, r9

					irCommProxSum += irCommMaxSensorSignal[i];
    8c5a:	c9 01       	movw	r24, r18
    8c5c:	aa 27       	eor	r26, r26
    8c5e:	97 fd       	sbrc	r25, 7
    8c60:	a0 95       	com	r26
    8c62:	ba 2f       	mov	r27, r26
    8c64:	e8 0e       	add	r14, r24
    8c66:	f9 1e       	adc	r15, r25
    8c68:	0a 1f       	adc	r16, r26
    8c6a:	1b 1f       	adc	r17, r27
					if(irCommComputeShift == 1) {	// compute the shift between the rx sampling and tx signal
    8c6c:	e1 e0       	ldi	r30, 0x01	; 1
    8c6e:	8e 16       	cp	r8, r30
    8c70:	79 f6       	brne	.-98     	; 0x8c10 <irCommTasks+0xbc4>
						irCommShiftCount++;								
    8c72:	45 2c       	mov	r4, r5
    8c74:	53 94       	inc	r5
    8c76:	50 92 2c 05 	sts	0x052C, r5
						if(irCommTempMin > irCommMaxSensorSignal[i]) {
    8c7a:	60 91 2a 05 	lds	r22, 0x052A
    8c7e:	70 91 2b 05 	lds	r23, 0x052B
    8c82:	26 17       	cp	r18, r22
    8c84:	37 07       	cpc	r19, r23
    8c86:	2c f4       	brge	.+10     	; 0x8c92 <irCommTasks+0xc46>
							irCommTempMin = irCommMaxSensorSignal[i];
    8c88:	30 93 2b 05 	sts	0x052B, r19
    8c8c:	20 93 2a 05 	sts	0x052A, r18
    8c90:	b9 01       	movw	r22, r18
						}
						if(irCommTempMax < irCommMaxSensorSignal[i]) {
    8c92:	40 91 28 05 	lds	r20, 0x0528
    8c96:	50 91 29 05 	lds	r21, 0x0529
    8c9a:	42 17       	cp	r20, r18
    8c9c:	53 07       	cpc	r21, r19
    8c9e:	2c f4       	brge	.+10     	; 0x8caa <irCommTasks+0xc5e>
							irCommTempMax = irCommMaxSensorSignal[i];
    8ca0:	30 93 29 05 	sts	0x0529, r19
    8ca4:	20 93 28 05 	sts	0x0528, r18
    8ca8:	a9 01       	movw	r20, r18
						}
						irCommTempValue = (irCommTempMax - irCommTempMin);						
    8caa:	ca 01       	movw	r24, r20
    8cac:	86 1b       	sub	r24, r22
    8cae:	97 0b       	sbc	r25, r23
    8cb0:	dc 01       	movw	r26, r24
    8cb2:	80 93 f6 04 	sts	0x04F6, r24
    8cb6:	90 93 f7 04 	sts	0x04F7, r25
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    8cba:	80 35       	cpi	r24, 0x50	; 80
    8cbc:	91 05       	cpc	r25, r1
    8cbe:	0c f4       	brge	.+2      	; 0x8cc2 <irCommTasks+0xc76>
    8cc0:	ab cf       	rjmp	.-170    	; 0x8c18 <irCommTasks+0xbcc>

							if(irCommStartDiffIndexTemp>1) {
    8cc2:	80 91 17 05 	lds	r24, 0x0517
    8cc6:	82 30       	cpi	r24, 0x02	; 2
    8cc8:	08 f0       	brcs	.+2      	; 0x8ccc <irCommTasks+0xc80>
    8cca:	81 e0       	ldi	r24, 0x01	; 1
								irCommStartDiffIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommStartDiffTemp[irCommStartDiffIndexTemp] = irCommTempValue;
    8ccc:	e8 2f       	mov	r30, r24
    8cce:	f0 e0       	ldi	r31, 0x00	; 0
    8cd0:	ee 0f       	add	r30, r30
    8cd2:	ff 1f       	adc	r31, r31
    8cd4:	e6 51       	subi	r30, 0x16	; 22
    8cd6:	f7 4f       	sbci	r31, 0xF7	; 247
    8cd8:	a0 83       	st	Z, r26
    8cda:	b1 83       	std	Z+1, r27	; 0x01
							irCommStartDiffIndexTemp++;
    8cdc:	8f 5f       	subi	r24, 0xFF	; 255
    8cde:	80 93 17 05 	sts	0x0517, r24
							

							if(irCommMaxSensorSignal[i] == irCommTempMax) {
    8ce2:	24 17       	cp	r18, r20
    8ce4:	35 07       	cpc	r19, r21
    8ce6:	09 f4       	brne	.+2      	; 0x8cea <irCommTasks+0xc9e>
    8ce8:	2c c1       	rjmp	.+600    	; 0x8f42 <irCommTasks+0xef6>
								irCommRxPeakHighToLow = 0;
							} else if(irCommMaxSensorSignal[i] == irCommTempMin) {
    8cea:	26 17       	cp	r18, r22
    8cec:	37 07       	cpc	r19, r23
    8cee:	09 f4       	brne	.+2      	; 0x8cf2 <irCommTasks+0xca6>
    8cf0:	81 c1       	rjmp	.+770    	; 0x8ff4 <irCommTasks+0xfa8>
								irCommRxPeakHighToLow = 1;
							} else {
								//updateGreenLed(0);
							}
							irCommTempMin = irCommMaxSensorSignal[i];	// otherwise I cannot detect spike of one sample (peakDuration=1), related to sensors sampling
    8cf2:	30 93 2b 05 	sts	0x052B, r19
    8cf6:	20 93 2a 05 	sts	0x052A, r18
							irCommTempMax = irCommMaxSensorSignal[i];
    8cfa:	30 93 29 05 	sts	0x0529, r19
    8cfe:	20 93 28 05 	sts	0x0528, r18
							irCommComputeShift = 2;
    8d02:	30 92 2d 05 	sts	0x052D, r3
							irCommShiftCount--;	// the current sample is already part of the signal start thus do not skip it
    8d06:	40 92 2c 05 	sts	0x052C, r4
							irCommRxStartPeakDuration = 0;
    8d0a:	10 92 3e 05 	sts	0x053E, r1
    8d0e:	72 e0       	ldi	r23, 0x02	; 2
    8d10:	87 2e       	mov	r8, r23
    8d12:	54 2c       	mov	r5, r4
    8d14:	81 cf       	rjmp	.-254    	; 0x8c18 <irCommTasks+0xbcc>
						}
					 } else if(irCommComputeShift == 2) {		
					 	irCommRxStartPeakDuration++;					
    8d16:	80 91 3e 05 	lds	r24, 0x053E
    8d1a:	8f 5f       	subi	r24, 0xFF	; 255
    8d1c:	80 93 3e 05 	sts	0x053E, r24
						if(irCommTempMin > irCommMaxSensorSignal[i]) {
    8d20:	60 91 2a 05 	lds	r22, 0x052A
    8d24:	70 91 2b 05 	lds	r23, 0x052B
    8d28:	26 17       	cp	r18, r22
    8d2a:	37 07       	cpc	r19, r23
    8d2c:	2c f4       	brge	.+10     	; 0x8d38 <irCommTasks+0xcec>
							irCommTempMin = irCommMaxSensorSignal[i];
    8d2e:	30 93 2b 05 	sts	0x052B, r19
    8d32:	20 93 2a 05 	sts	0x052A, r18
    8d36:	b9 01       	movw	r22, r18
						}
						if(irCommTempMax < irCommMaxSensorSignal[i]) {
    8d38:	40 91 28 05 	lds	r20, 0x0528
    8d3c:	50 91 29 05 	lds	r21, 0x0529
    8d40:	42 17       	cp	r20, r18
    8d42:	53 07       	cpc	r21, r19
    8d44:	2c f4       	brge	.+10     	; 0x8d50 <irCommTasks+0xd04>
							irCommTempMax = irCommMaxSensorSignal[i];
    8d46:	30 93 29 05 	sts	0x0529, r19
    8d4a:	20 93 28 05 	sts	0x0528, r18
    8d4e:	a9 01       	movw	r20, r18
						}	
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    8d50:	ca 01       	movw	r24, r20
    8d52:	86 1b       	sub	r24, r22
    8d54:	97 0b       	sbc	r25, r23
    8d56:	80 35       	cpi	r24, 0x50	; 80
    8d58:	91 05       	cpc	r25, r1
    8d5a:	0c f4       	brge	.+2      	; 0x8d5e <irCommTasks+0xd12>
    8d5c:	5d cf       	rjmp	.-326    	; 0x8c18 <irCommTasks+0xbcc>
							if((irCommMaxSensorSignal[i]==irCommTempMax) && (irCommRxPeakHighToLow==1)) {
    8d5e:	24 17       	cp	r18, r20
    8d60:	35 07       	cpc	r19, r21
    8d62:	09 f4       	brne	.+2      	; 0x8d66 <irCommTasks+0xd1a>
    8d64:	41 c1       	rjmp	.+642    	; 0x8fe8 <irCommTasks+0xf9c>
								irCommComputeShift = 0;
							} else if((irCommMaxSensorSignal[i]==irCommTempMin) && (irCommRxPeakHighToLow==0)) {
    8d66:	26 17       	cp	r18, r22
    8d68:	37 07       	cpc	r19, r23
    8d6a:	09 f0       	breq	.+2      	; 0x8d6e <irCommTasks+0xd22>
    8d6c:	55 cf       	rjmp	.-342    	; 0x8c18 <irCommTasks+0xbcc>
    8d6e:	80 91 3d 05 	lds	r24, 0x053D
    8d72:	88 23       	and	r24, r24
    8d74:	09 f0       	breq	.+2      	; 0x8d78 <irCommTasks+0xd2c>
    8d76:	50 cf       	rjmp	.-352    	; 0x8c18 <irCommTasks+0xbcc>
								irCommComputeShift = 0;
    8d78:	10 92 2d 05 	sts	0x052D, r1
    8d7c:	88 24       	eor	r8, r8
    8d7e:	4c cf       	rjmp	.-360    	; 0x8c18 <irCommTasks+0xbcc>
				irCommProxSum = 0;
				irCommTempMin = 1024;
				irCommTempMax = 0;
				irCommShiftCount = 0;
				irCommComputeShift = 1;												
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    8d80:	b7 01       	movw	r22, r14
    8d82:	c8 01       	movw	r24, r16
    8d84:	e0 92 24 05 	sts	0x0524, r14
    8d88:	f0 92 25 05 	sts	0x0525, r15
    8d8c:	00 93 26 05 	sts	0x0526, r16
    8d90:	10 93 27 05 	sts	0x0527, r17
						}											
					 }

				}

				if(irCommComputeShiftIndexTemp>1) {
    8d94:	20 91 18 05 	lds	r18, 0x0518
    8d98:	22 30       	cpi	r18, 0x02	; 2
    8d9a:	08 f0       	brcs	.+2      	; 0x8d9e <irCommTasks+0xd52>
    8d9c:	21 e0       	ldi	r18, 0x01	; 1
					irCommComputeShiftIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommComputeShiftTemp[irCommComputeShiftIndexTemp] = irCommComputeShift;
    8d9e:	e2 2f       	mov	r30, r18
    8da0:	f0 e0       	ldi	r31, 0x00	; 0
    8da2:	e6 56       	subi	r30, 0x66	; 102
    8da4:	fa 4f       	sbci	r31, 0xFA	; 250
    8da6:	80 82       	st	Z, r8
				irCommComputeShiftIndexTemp++;
    8da8:	2f 5f       	subi	r18, 0xFF	; 255
    8daa:	20 93 18 05 	sts	0x0518, r18
				
				if(irCommShiftCountIndexTemp>1) {
    8dae:	20 91 15 05 	lds	r18, 0x0515
    8db2:	22 30       	cpi	r18, 0x02	; 2
    8db4:	08 f0       	brcs	.+2      	; 0x8db8 <irCommTasks+0xd6c>
    8db6:	21 e0       	ldi	r18, 0x01	; 1
					irCommShiftCountIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommShiftCountTemp[irCommShiftCountIndexTemp] = irCommShiftCount;
    8db8:	e2 2f       	mov	r30, r18
    8dba:	f0 e0       	ldi	r31, 0x00	; 0
    8dbc:	e7 55       	subi	r30, 0x57	; 87
    8dbe:	f4 4f       	sbci	r31, 0xF4	; 244
    8dc0:	50 82       	st	Z, r5
				irCommShiftCountIndexTemp++;
    8dc2:	2f 5f       	subi	r18, 0xFF	; 255
    8dc4:	20 93 15 05 	sts	0x0515, r18
				
				if(irCommRxPeakHighToLowIndexTemp>1) {
    8dc8:	20 91 19 05 	lds	r18, 0x0519
    8dcc:	22 30       	cpi	r18, 0x02	; 2
    8dce:	08 f0       	brcs	.+2      	; 0x8dd2 <irCommTasks+0xd86>
    8dd0:	21 e0       	ldi	r18, 0x01	; 1
					irCommRxPeakHighToLowIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommRxPeakHighToLowTemp[irCommRxPeakHighToLowIndexTemp] = irCommRxPeakHighToLow;
    8dd2:	e2 2f       	mov	r30, r18
    8dd4:	f0 e0       	ldi	r31, 0x00	; 0
    8dd6:	e9 50       	subi	r30, 0x09	; 9
    8dd8:	fa 4f       	sbci	r31, 0xFA	; 250
    8dda:	10 91 3d 05 	lds	r17, 0x053D
    8dde:	10 83       	st	Z, r17
				irCommRxPeakHighToLowIndexTemp++;
    8de0:	2f 5f       	subi	r18, 0xFF	; 255
    8de2:	20 93 19 05 	sts	0x0519, r18
				
				if(irCommRxStartPeakDurationIndexTemp>1) {
    8de6:	20 91 1a 05 	lds	r18, 0x051A
    8dea:	22 30       	cpi	r18, 0x02	; 2
    8dec:	08 f0       	brcs	.+2      	; 0x8df0 <irCommTasks+0xda4>
    8dee:	21 e0       	ldi	r18, 0x01	; 1
					irCommRxStartPeakDurationIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommRxStartPeakDurationTemp[irCommRxStartPeakDurationIndexTemp] = irCommRxStartPeakDuration;
    8df0:	e2 2f       	mov	r30, r18
    8df2:	f0 e0       	ldi	r31, 0x00	; 0
    8df4:	e7 5c       	subi	r30, 0xC7	; 199
    8df6:	f8 4f       	sbci	r31, 0xF8	; 248
    8df8:	00 91 3e 05 	lds	r16, 0x053E
    8dfc:	00 83       	st	Z, r16
				irCommRxStartPeakDurationIndexTemp++;
    8dfe:	2f 5f       	subi	r18, 0xFF	; 255
    8e00:	20 93 1a 05 	sts	0x051A, r18
					
				
				//if(irCommComputeShift != 0) {	// it should not be never 1 because the difference between min and max in the current signal
					//updateRedLed(0);			// is at least IRCOMM_DETECTION_AMPLITUDE_THR (checked in the previous state)
				//}
				irCommProxMean = (int)(irCommProxSum / IRCOMM_SAMPLING_WINDOW);
    8e04:	24 e1       	ldi	r18, 0x14	; 20
    8e06:	30 e0       	ldi	r19, 0x00	; 0
    8e08:	40 e0       	ldi	r20, 0x00	; 0
    8e0a:	50 e0       	ldi	r21, 0x00	; 0
    8e0c:	0e 94 cf 57 	call	0xaf9e	; 0xaf9e <__divmodsi4>
    8e10:	a9 01       	movw	r20, r18
    8e12:	30 93 2f 05 	sts	0x052F, r19
    8e16:	20 93 2e 05 	sts	0x052E, r18

				if(irCommProxMeanIndexTemp>1) {
    8e1a:	80 91 11 05 	lds	r24, 0x0511
    8e1e:	82 30       	cpi	r24, 0x02	; 2
    8e20:	08 f0       	brcs	.+2      	; 0x8e24 <irCommTasks+0xdd8>
    8e22:	81 e0       	ldi	r24, 0x01	; 1
					irCommProxMeanIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommProxMeanTemp[irCommProxMeanIndexTemp] = irCommProxMean;
    8e24:	e8 2f       	mov	r30, r24
    8e26:	f0 e0       	ldi	r31, 0x00	; 0
    8e28:	ee 0f       	add	r30, r30
    8e2a:	ff 1f       	adc	r31, r31
    8e2c:	e3 56       	subi	r30, 0x63	; 99
    8e2e:	fa 4f       	sbci	r31, 0xFA	; 250
    8e30:	51 83       	std	Z+1, r21	; 0x01
    8e32:	40 83       	st	Z, r20
				irCommProxMeanIndexTemp++;
    8e34:	8f 5f       	subi	r24, 0xFF	; 255
    8e36:	80 93 11 05 	sts	0x0511, r24
    8e3a:	30 91 0e 05 	lds	r19, 0x050E
				

				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
					irCommMaxSensorSignal[i] -= irCommProxMean;
    8e3e:	67 e2       	ldi	r22, 0x27	; 39
    8e40:	d5 01       	movw	r26, r10
    8e42:	8d 91       	ld	r24, X+
    8e44:	9c 91       	ld	r25, X
    8e46:	11 97       	sbiw	r26, 0x01	; 1
    8e48:	84 1b       	sub	r24, r20
    8e4a:	95 0b       	sbc	r25, r21
    8e4c:	8d 93       	st	X+, r24
    8e4e:	9c 93       	st	X, r25
    8e50:	27 e2       	ldi	r18, 0x27	; 39
    8e52:	36 17       	cp	r19, r22
    8e54:	08 f4       	brcc	.+2      	; 0x8e58 <irCommTasks+0xe0c>
    8e56:	23 2f       	mov	r18, r19

					if(irCommMaxSensorSignalFiltIndexTemp>39) {
						irCommMaxSensorSignalFiltIndexTemp = 39;
						//updateRedLed(0);
					}
					irCommMaxSensorSignalFiltTemp[irCommMaxSensorSignalFiltIndexTemp] = irCommMaxSensorSignal[i];
    8e58:	e2 2f       	mov	r30, r18
    8e5a:	f0 e0       	ldi	r31, 0x00	; 0
    8e5c:	ee 0f       	add	r30, r30
    8e5e:	ff 1f       	adc	r31, r31
    8e60:	eb 55       	subi	r30, 0x5B	; 91
    8e62:	fa 4f       	sbci	r31, 0xFA	; 250
    8e64:	91 83       	std	Z+1, r25	; 0x01
    8e66:	80 83       	st	Z, r24
					irCommMaxSensorSignalFiltIndexTemp++;
    8e68:	32 2f       	mov	r19, r18
    8e6a:	3f 5f       	subi	r19, 0xFF	; 255
    8e6c:	e2 e0       	ldi	r30, 0x02	; 2
    8e6e:	f0 e0       	ldi	r31, 0x00	; 0
    8e70:	ae 0e       	add	r10, r30
    8e72:	bf 1e       	adc	r11, r31
				irCommProxMeanTemp[irCommProxMeanIndexTemp] = irCommProxMean;
				irCommProxMeanIndexTemp++;
				

				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    8e74:	ff e8       	ldi	r31, 0x8F	; 143
    8e76:	af 16       	cp	r10, r31
    8e78:	fb e0       	ldi	r31, 0x0B	; 11
    8e7a:	bf 06       	cpc	r11, r31
    8e7c:	09 f7       	brne	.-62     	; 0x8e40 <irCommTasks+0xdf4>
    8e7e:	30 93 0e 05 	sts	0x050E, r19
					irCommMaxSensorSignalFiltIndexTemp++;
					
				}
						
				// start counting number of switch around mean signal
				if(irCommMaxSensorSignal[0] > 0) {
    8e82:	80 91 67 0b 	lds	r24, 0x0B67
    8e86:	90 91 68 0b 	lds	r25, 0x0B68
    8e8a:	18 16       	cp	r1, r24
    8e8c:	19 06       	cpc	r1, r25
    8e8e:	0c f0       	brlt	.+2      	; 0x8e92 <irCommTasks+0xe46>
    8e90:	5b c1       	rjmp	.+694    	; 0x9148 <irCommTasks+0x10fc>
					irCommSignalState = 1;
    8e92:	81 e0       	ldi	r24, 0x01	; 1
    8e94:	80 93 30 05 	sts	0x0530, r24
    8e98:	28 2f       	mov	r18, r24
				} else {
					irCommSignalState = -1;
    8e9a:	e9 e6       	ldi	r30, 0x69	; 105
    8e9c:	fb e0       	ldi	r31, 0x0B	; 11
    8e9e:	30 e0       	ldi	r19, 0x00	; 0
    8ea0:	07 c0       	rjmp	.+14     	; 0x8eb0 <irCommTasks+0xe64>
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
    8ea2:	27 fd       	sbrc	r18, 7
    8ea4:	0f c0       	rjmp	.+30     	; 0x8ec4 <irCommTasks+0xe78>
							irCommSwitchCount++;
						}
					} else {
						if(irCommSignalState > 0) {
							irCommSignalState = -1;
							irCommSwitchCount++;
    8ea6:	32 96       	adiw	r30, 0x02	; 2
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
    8ea8:	8b e0       	ldi	r24, 0x0B	; 11
    8eaa:	ef 38       	cpi	r30, 0x8F	; 143
    8eac:	f8 07       	cpc	r31, r24
    8eae:	69 f0       	breq	.+26     	; 0x8eca <irCommTasks+0xe7e>
					if(irCommMaxSensorSignal[i] > 0) {
    8eb0:	80 81       	ld	r24, Z
    8eb2:	91 81       	ldd	r25, Z+1	; 0x01
    8eb4:	18 16       	cp	r1, r24
    8eb6:	19 06       	cpc	r1, r25
    8eb8:	a4 f3       	brlt	.-24     	; 0x8ea2 <irCommTasks+0xe56>
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
							irCommSwitchCount++;
						}
					} else {
						if(irCommSignalState > 0) {
    8eba:	12 16       	cp	r1, r18
    8ebc:	a4 f7       	brge	.-24     	; 0x8ea6 <irCommTasks+0xe5a>
							irCommSignalState = -1;
							irCommSwitchCount++;
    8ebe:	3f 5f       	subi	r19, 0xFF	; 255
    8ec0:	2f ef       	ldi	r18, 0xFF	; 255
    8ec2:	f1 cf       	rjmp	.-30     	; 0x8ea6 <irCommTasks+0xe5a>
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
							irCommSwitchCount++;
    8ec4:	3f 5f       	subi	r19, 0xFF	; 255
    8ec6:	21 e0       	ldi	r18, 0x01	; 1
    8ec8:	ee cf       	rjmp	.-36     	; 0x8ea6 <irCommTasks+0xe5a>
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
    8eca:	30 93 31 05 	sts	0x0531, r19
    8ece:	20 93 30 05 	sts	0x0530, r18
							irCommSwitchCount++;
						}
					}
				}

				if(irCommSwitchCountIndexTemp>1) {
    8ed2:	80 91 12 05 	lds	r24, 0x0512
    8ed6:	82 30       	cpi	r24, 0x02	; 2
    8ed8:	08 f0       	brcs	.+2      	; 0x8edc <irCommTasks+0xe90>
    8eda:	81 e0       	ldi	r24, 0x01	; 1
					irCommSwitchCountIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommSwitchCountTemp[irCommSwitchCountIndexTemp] = irCommSwitchCount;
    8edc:	e8 2f       	mov	r30, r24
    8ede:	f0 e0       	ldi	r31, 0x00	; 0
    8ee0:	e1 58       	subi	r30, 0x81	; 129
    8ee2:	fa 4f       	sbci	r31, 0xFA	; 250
    8ee4:	30 83       	st	Z, r19
				irCommSwitchCountIndexTemp++;
    8ee6:	8f 5f       	subi	r24, 0xFF	; 255
    8ee8:	80 93 12 05 	sts	0x0512, r24
				

				//turnOffGreenLeds();
				if(irCommRxPeakHighToLow==1) {
    8eec:	11 30       	cpi	r17, 0x01	; 1
    8eee:	09 f4       	brne	.+2      	; 0x8ef2 <irCommTasks+0xea6>
    8ef0:	03 c1       	rjmp	.+518    	; 0x90f8 <irCommTasks+0x10ac>
							resetDebugVariables();				
							break;
						}
					}
				} else {
					if(irCommRxStartBitDetected==1) {
    8ef2:	90 91 3c 05 	lds	r25, 0x053C
    8ef6:	91 30       	cpi	r25, 0x01	; 1
    8ef8:	09 f4       	brne	.+2      	; 0x8efc <irCommTasks+0xeb0>
    8efa:	3a c1       	rjmp	.+628    	; 0x9170 <irCommTasks+0x1124>

							resetDebugVariables();				
							break;
						}
					} else {
						if(irCommSwitchCount==2) {
    8efc:	32 30       	cpi	r19, 0x02	; 2
    8efe:	09 f4       	brne	.+2      	; 0x8f02 <irCommTasks+0xeb6>
    8f00:	96 c1       	rjmp	.+812    	; 0x922e <irCommTasks+0x11e2>
							irCommShiftCounter = 0;
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else if(irCommSwitchCount==1) {
    8f02:	31 30       	cpi	r19, 0x01	; 1
    8f04:	09 f4       	brne	.+2      	; 0x8f08 <irCommTasks+0xebc>
    8f06:	36 c2       	rjmp	.+1132   	; 0x9374 <irCommTasks+0x1328>
								irCommRxCrc = 0;	
								irCommRxByte = 0;
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
							}
						} else {
							currentProx = 0;
    8f08:	10 92 40 02 	sts	0x0240, r1
							adcSaveDataTo = SKIP_SAMPLE;
    8f0c:	85 e0       	ldi	r24, 0x05	; 5
    8f0e:	80 93 d5 02 	sts	0x02D5, r24
							adcSamplingState = 0;
    8f12:	10 92 d6 02 	sts	0x02D6, r1
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;							
    8f16:	10 92 f4 04 	sts	0x04F4, r1
							irCommState = IRCOMM_RX_IDLE_STATE;
    8f1a:	81 e0       	ldi	r24, 0x01	; 1
    8f1c:	80 93 f5 04 	sts	0x04F5, r24

							if(irCommSyncStateIndexTemp>1) {
    8f20:	90 91 1d 05 	lds	r25, 0x051D
    8f24:	92 30       	cpi	r25, 0x02	; 2
    8f26:	08 f0       	brcs	.+2      	; 0x8f2a <irCommTasks+0xede>
    8f28:	91 e0       	ldi	r25, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 15;
    8f2a:	e9 2f       	mov	r30, r25
    8f2c:	f0 e0       	ldi	r31, 0x00	; 0
    8f2e:	e8 56       	subi	r30, 0x68	; 104
    8f30:	fa 4f       	sbci	r31, 0xFA	; 250
    8f32:	8f e0       	ldi	r24, 0x0F	; 15
    8f34:	80 83       	st	Z, r24
							irCommSyncStateIndexTemp++;
    8f36:	9f 5f       	subi	r25, 0xFF	; 255
    8f38:	90 93 1d 05 	sts	0x051D, r25
							//irCommState = IRCOMM_RX_DEBUG;
							//irCommAdcRxState = 12;
							//updateRedLed(0);
							//break;

							resetDebugVariables();				
    8f3c:	0e 94 7d 3f 	call	0x7efa	; 0x7efa <resetDebugVariables>
    8f40:	9e c8       	rjmp	.-3780   	; 0x807e <irCommTasks+0x32>
							irCommStartDiffTemp[irCommStartDiffIndexTemp] = irCommTempValue;
							irCommStartDiffIndexTemp++;
							

							if(irCommMaxSensorSignal[i] == irCommTempMax) {
								irCommRxPeakHighToLow = 0;
    8f42:	10 92 3d 05 	sts	0x053D, r1
    8f46:	d5 ce       	rjmp	.-598    	; 0x8cf2 <irCommTasks+0xca6>
						}
					}
				} else {
					// cannot get a reliable signal from the sensor from which the start bit was detected the previous time,
					// thus restart listening from the next sensor
					if(irCommRxStartBitDetected == 1) {
    8f48:	80 91 3c 05 	lds	r24, 0x053C
    8f4c:	81 30       	cpi	r24, 0x01	; 1
    8f4e:	09 f4       	brne	.+2      	; 0x8f52 <irCommTasks+0xf06>
    8f50:	3d c1       	rjmp	.+634    	; 0x91cc <irCommTasks+0x1180>
					//if(irCommRxStartBitDetected == 1) {	// signal becomes too low to be reliable...or something else happened				
					//	irCommState = IRCOMM_RX_DEBUG;
					//	irCommAdcRxState = 12;
					//	updateGreenLed(0);
					//} else {
						irCommRxStartBitDetected = 0;
    8f52:	10 92 3c 05 	sts	0x053C, r1
						irCommRxByte += 1;
					}
				} else {	// error...no significant signal perceived
					//irCommRxBitReceived[irCommRxBitCount] = 0xFF;
					//updateRedLed(0);
					currentProx = 0;
    8f56:	10 92 40 02 	sts	0x0240, r1
					adcSaveDataTo = SKIP_SAMPLE;
    8f5a:	85 e0       	ldi	r24, 0x05	; 5
    8f5c:	80 93 d5 02 	sts	0x02D5, r24
					adcSamplingState = 0;
    8f60:	10 92 d6 02 	sts	0x02D6, r1
					irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;					
    8f64:	10 92 f4 04 	sts	0x04F4, r1
					irCommState = IRCOMM_RX_IDLE_STATE;
    8f68:	81 e0       	ldi	r24, 0x01	; 1
    8f6a:	80 93 f5 04 	sts	0x04F5, r24

					//irCommState = IRCOMM_RX_DEBUG;
					//irCommAdcRxState = 12;
					//break;

					resetDebugVariables();
    8f6e:	0e 94 7d 3f 	call	0x7efa	; 0x7efa <resetDebugVariables>
    8f72:	85 c8       	rjmp	.-3830   	; 0x807e <irCommTasks+0x32>
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
    8f74:	30 93 31 05 	sts	0x0531, r19
    8f78:	20 93 30 05 	sts	0x0530, r18
							irCommSwitchCount++;
						}
					}
				}
				// check whether we received either a "0" or a "1"
				if(irCommSwitchCount >= (IRCOMM_BIT0_SWITCH_COUNT-2)) {
    8f7c:	36 30       	cpi	r19, 0x06	; 6
    8f7e:	08 f4       	brcc	.+2      	; 0x8f82 <irCommTasks+0xf36>
    8f80:	63 c0       	rjmp	.+198    	; 0x9048 <irCommTasks+0xffc>
					irCommRxBitReceived[irCommRxBitCount] = 0;
    8f82:	20 91 32 05 	lds	r18, 0x0532
    8f86:	e2 2f       	mov	r30, r18
    8f88:	f0 e0       	ldi	r31, 0x00	; 0
    8f8a:	e2 57       	subi	r30, 0x72	; 114
    8f8c:	fa 4f       	sbci	r31, 0xFA	; 250
    8f8e:	10 82       	st	Z, r1
					if(irCommRxBitCount<8) {	// do not consider the crc for byte interpretation
    8f90:	28 30       	cpi	r18, 0x08	; 8
    8f92:	28 f4       	brcc	.+10     	; 0x8f9e <irCommTasks+0xf52>
						irCommRxByte = irCommRxByte<<1;	// bit0, only shift
    8f94:	80 91 34 05 	lds	r24, 0x0534
    8f98:	88 0f       	add	r24, r24
    8f9a:	80 93 34 05 	sts	0x0534, r24
					resetDebugVariables();
					break;

				}

				if(irCommRxBitReceivedIndexTemp>9) {
    8f9e:	90 91 1f 05 	lds	r25, 0x051F
    8fa2:	9a 30       	cpi	r25, 0x0A	; 10
    8fa4:	20 f0       	brcs	.+8      	; 0x8fae <irCommTasks+0xf62>
					irCommRxBitReceivedIndexTemp = 9;
    8fa6:	89 e0       	ldi	r24, 0x09	; 9
    8fa8:	80 93 1f 05 	sts	0x051F, r24
    8fac:	99 e0       	ldi	r25, 0x09	; 9
					//updateRedLed(0);
				}
				irCommRxBitReceivedTemp[irCommRxBitReceivedIndexTemp] = irCommRxBitReceived[irCommRxBitCount];
    8fae:	a9 2f       	mov	r26, r25
    8fb0:	b0 e0       	ldi	r27, 0x00	; 0
    8fb2:	a3 57       	subi	r26, 0x73	; 115
    8fb4:	b7 4f       	sbci	r27, 0xF7	; 247
    8fb6:	e2 2f       	mov	r30, r18
    8fb8:	f0 e0       	ldi	r31, 0x00	; 0
    8fba:	e2 57       	subi	r30, 0x72	; 114
    8fbc:	fa 4f       	sbci	r31, 0xFA	; 250
    8fbe:	80 81       	ld	r24, Z
    8fc0:	8c 93       	st	X, r24
				irCommRxBitReceivedIndexTemp++;
    8fc2:	9f 5f       	subi	r25, 0xFF	; 255
    8fc4:	90 93 1f 05 	sts	0x051F, r25

				//setGreenLed(irCommRxBitCount, 1);

				irCommRxBitCount++;
    8fc8:	82 2f       	mov	r24, r18
    8fca:	8f 5f       	subi	r24, 0xFF	; 255
    8fcc:	80 93 32 05 	sts	0x0532, r24
				if(irCommRxBitCount == 10) {	// received 8 bit of data + 2 bit of crc
    8fd0:	8a 30       	cpi	r24, 0x0A	; 10
    8fd2:	09 f4       	brne	.+2      	; 0x8fd6 <irCommTasks+0xf8a>
    8fd4:	f2 c0       	rjmp	.+484    	; 0x91ba <irCommTasks+0x116e>
					}
					irCommStateTemp[irCommStateIndexTemp] = irCommState;
					irCommStateIndexTemp++;

				} else {
					irCommState = IRCOMM_RX_WAITING_BIT;
    8fd6:	85 e0       	ldi	r24, 0x05	; 5
    8fd8:	80 93 f5 04 	sts	0x04F5, r24

					if(irCommStateIndexTemp>13) {
    8fdc:	90 91 1c 05 	lds	r25, 0x051C
    8fe0:	9e 30       	cpi	r25, 0x0E	; 14
    8fe2:	08 f0       	brcs	.+2      	; 0x8fe6 <irCommTasks+0xf9a>
    8fe4:	bd cb       	rjmp	.-2182   	; 0x8760 <irCommTasks+0x714>
    8fe6:	c0 cb       	rjmp	.-2176   	; 0x8768 <irCommTasks+0x71c>
						}
						if(irCommTempMax < irCommMaxSensorSignal[i]) {
							irCommTempMax = irCommMaxSensorSignal[i];
						}	
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
							if((irCommMaxSensorSignal[i]==irCommTempMax) && (irCommRxPeakHighToLow==1)) {
    8fe8:	80 91 3d 05 	lds	r24, 0x053D
    8fec:	81 30       	cpi	r24, 0x01	; 1
    8fee:	09 f0       	breq	.+2      	; 0x8ff2 <irCommTasks+0xfa6>
    8ff0:	ba ce       	rjmp	.-652    	; 0x8d66 <irCommTasks+0xd1a>
    8ff2:	c2 ce       	rjmp	.-636    	; 0x8d78 <irCommTasks+0xd2c>
							

							if(irCommMaxSensorSignal[i] == irCommTempMax) {
								irCommRxPeakHighToLow = 0;
							} else if(irCommMaxSensorSignal[i] == irCommTempMin) {
								irCommRxPeakHighToLow = 1;
    8ff4:	20 92 3d 05 	sts	0x053D, r2
    8ff8:	7c ce       	rjmp	.-776    	; 0x8cf2 <irCommTasks+0xca6>
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
					irCommTxBitToTransmit[9-i] = irCommTempValue;
					if(irCommTempValue==1) {
						irCommTxCrc++;
    8ffa:	2f 5f       	subi	r18, 0xFF	; 255
    8ffc:	f7 c8       	rjmp	.-3602   	; 0x81ec <irCommTasks+0x1a0>
    8ffe:	2f 5f       	subi	r18, 0xFF	; 255
    9000:	e8 c8       	rjmp	.-3632   	; 0x81d2 <irCommTasks+0x186>
    9002:	2f 5f       	subi	r18, 0xFF	; 255
    9004:	d5 c8       	rjmp	.-3670   	; 0x81b0 <irCommTasks+0x164>
    9006:	2f 5f       	subi	r18, 0xFF	; 255
    9008:	c0 c8       	rjmp	.-3712   	; 0x818a <irCommTasks+0x13e>
    900a:	2f 5f       	subi	r18, 0xFF	; 255
    900c:	ad c8       	rjmp	.-3750   	; 0x8168 <irCommTasks+0x11c>
    900e:	2f 5f       	subi	r18, 0xFF	; 255
    9010:	9c c8       	rjmp	.-3784   	; 0x814a <irCommTasks+0xfe>
    9012:	20 91 4b 05 	lds	r18, 0x054B
    9016:	2f 5f       	subi	r18, 0xFF	; 255
    9018:	8b c8       	rjmp	.-3818   	; 0x8130 <irCommTasks+0xe4>
    901a:	81 e0       	ldi	r24, 0x01	; 1
    901c:	80 93 4b 05 	sts	0x054B, r24
    9020:	7a c8       	rjmp	.-3852   	; 0x8116 <irCommTasks+0xca>

			case IRCOMM_TX_COMPUTE_TIMINGS:
				//updateBlueLed(255);
				if(irCommTxBitToTransmit[irCommTxBitCount] == 3) {
					//updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START2_DURATION;					
    9022:	80 ef       	ldi	r24, 0xF0	; 240
    9024:	90 e0       	ldi	r25, 0x00	; 0
    9026:	90 93 4f 05 	sts	0x054F, r25
    902a:	80 93 4e 05 	sts	0x054E, r24
					irCommTxSwitchCount = IRCOMM_BIT_START2_SWITCH_COUNT;
    902e:	81 e0       	ldi	r24, 0x01	; 1
    9030:	80 93 50 05 	sts	0x0550, r24
    9034:	bc cb       	rjmp	.-2184   	; 0x87ae <irCommTasks+0x762>

			case IRCOMM_RX_MAX_SENSOR_STATE:
				// check from how many sensors the robot is receiving a possible message
				for(i=0; i<8; i++) {
					if((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
						irCommRxNumReceivingSensors++;
    9036:	40 91 43 05 	lds	r20, 0x0543
    903a:	4f 5f       	subi	r20, 0xFF	; 255
    903c:	40 93 43 05 	sts	0x0543, r20
    9040:	c0 c9       	rjmp	.-3200   	; 0x83c2 <irCommTasks+0x376>
				if(irCommTxBitCount == 0) {
					//PORTA = irCommTxSensorMask;
					if(irCommTxSensorGroup==0) {
						PORTA = 0xAA;
					} else {
						PORTA = 0x55;
    9042:	85 e5       	ldi	r24, 0x55	; 85
    9044:	82 b9       	out	0x02, r24	; 2
    9046:	bc cb       	rjmp	.-2184   	; 0x87c0 <irCommTasks+0x774>
				if(irCommSwitchCount >= (IRCOMM_BIT0_SWITCH_COUNT-2)) {
					irCommRxBitReceived[irCommRxBitCount] = 0;
					if(irCommRxBitCount<8) {	// do not consider the crc for byte interpretation
						irCommRxByte = irCommRxByte<<1;	// bit0, only shift
					}
				} else if(irCommSwitchCount >= (IRCOMM_BIT1_SWITCH_COUNT-1)) {
    9048:	33 30       	cpi	r19, 0x03	; 3
    904a:	08 f4       	brcc	.+2      	; 0x904e <irCommTasks+0x1002>
    904c:	84 cf       	rjmp	.-248    	; 0x8f56 <irCommTasks+0xf0a>
					irCommRxBitReceived[irCommRxBitCount] = 1;
    904e:	20 91 32 05 	lds	r18, 0x0532
    9052:	e2 2f       	mov	r30, r18
    9054:	f0 e0       	ldi	r31, 0x00	; 0
    9056:	e2 57       	subi	r30, 0x72	; 114
    9058:	fa 4f       	sbci	r31, 0xFA	; 250
    905a:	81 e0       	ldi	r24, 0x01	; 1
    905c:	80 83       	st	Z, r24
					if(irCommRxBitCount<8) {	// do not consider the crc for byte interpretation
    905e:	28 30       	cpi	r18, 0x08	; 8
    9060:	08 f0       	brcs	.+2      	; 0x9064 <irCommTasks+0x1018>
    9062:	9d cf       	rjmp	.-198    	; 0x8f9e <irCommTasks+0xf52>
						irCommRxCrc++;
    9064:	80 91 23 05 	lds	r24, 0x0523
    9068:	8f 5f       	subi	r24, 0xFF	; 255
    906a:	80 93 23 05 	sts	0x0523, r24
						irCommRxByte = irCommRxByte<<1;	// bit1, shift and add 1
    906e:	80 91 34 05 	lds	r24, 0x0534
    9072:	88 0f       	add	r24, r24
						irCommRxByte += 1;
    9074:	8f 5f       	subi	r24, 0xFF	; 255
    9076:	80 93 34 05 	sts	0x0534, r24
    907a:	91 cf       	rjmp	.-222    	; 0x8f9e <irCommTasks+0xf52>
								irCommRxMaxSensor = 0;
							}
							i++;
						}
					} else {	// listen from the same sensor when a start bit is detected
						irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
    907c:	40 91 41 05 	lds	r20, 0x0541
    9080:	50 91 42 05 	lds	r21, 0x0542
    9084:	fa 01       	movw	r30, r20
    9086:	ee 0f       	add	r30, r30
    9088:	ff 1f       	adc	r31, r31
    908a:	de 01       	movw	r26, r28
    908c:	ae 0f       	add	r26, r30
    908e:	bf 1f       	adc	r27, r31
    9090:	e6 0f       	add	r30, r22
    9092:	f7 1f       	adc	r31, r23
    9094:	8d 91       	ld	r24, X+
    9096:	9c 91       	ld	r25, X
    9098:	20 81       	ld	r18, Z
    909a:	31 81       	ldd	r19, Z+1	; 0x01
    909c:	82 1b       	sub	r24, r18
    909e:	93 0b       	sbc	r25, r19
    90a0:	90 93 40 05 	sts	0x0540, r25
    90a4:	80 93 3f 05 	sts	0x053F, r24
    90a8:	fa ca       	rjmp	.-2572   	; 0x869e <irCommTasks+0x652>
					//if(irCommRxStartBitDetected == 1) {	// signal becomes too low to be reliable...or something else happened				
					//	irCommState = IRCOMM_RX_DEBUG;
					//	irCommAdcRxState = 12;
					//	updateGreenLed(0);
					//} else {
						irCommRxStartBitDetected = 0;
    90aa:	10 92 3c 05 	sts	0x053C, r1
						currentProx = 0;
    90ae:	10 92 40 02 	sts	0x0240, r1
						adcSaveDataTo = SKIP_SAMPLE;
    90b2:	85 e0       	ldi	r24, 0x05	; 5
    90b4:	80 93 d5 02 	sts	0x02D5, r24
						adcSamplingState = 0;
    90b8:	10 92 d6 02 	sts	0x02D6, r1
						irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    90bc:	10 92 f4 04 	sts	0x04F4, r1
						irCommState = IRCOMM_RX_IDLE_STATE;
    90c0:	81 e0       	ldi	r24, 0x01	; 1
    90c2:	80 93 f5 04 	sts	0x04F5, r24
						resetDebugVariables();
    90c6:	0e 94 7d 3f 	call	0x7efa	; 0x7efa <resetDebugVariables>
					//}			
					// start listening from the next sensor the next time I check for a start bit in order to get the same chance 
					// to all sensors, instead of always listening from the sensor that has the best signal
					if(irCommRxMaxSensor < 7) {
    90ca:	80 91 41 05 	lds	r24, 0x0541
    90ce:	90 91 42 05 	lds	r25, 0x0542
    90d2:	87 30       	cpi	r24, 0x07	; 7
    90d4:	91 05       	cpc	r25, r1
    90d6:	0c f0       	brlt	.+2      	; 0x90da <irCommTasks+0x108e>
    90d8:	8d c0       	rjmp	.+282    	; 0x91f4 <irCommTasks+0x11a8>
						irCommRxMaxSensor++;
    90da:	01 96       	adiw	r24, 0x01	; 1
    90dc:	90 93 42 05 	sts	0x0542, r25
    90e0:	80 93 41 05 	sts	0x0541, r24
    90e4:	c0 91 78 05 	lds	r28, 0x0578
    90e8:	d0 91 79 05 	lds	r29, 0x0579
    90ec:	60 91 64 05 	lds	r22, 0x0564
    90f0:	70 91 65 05 	lds	r23, 0x0565
    90f4:	ac 01       	movw	r20, r24
    90f6:	d3 ca       	rjmp	.-2650   	; 0x869e <irCommTasks+0x652>
				irCommSwitchCountIndexTemp++;
				

				//turnOffGreenLeds();
				if(irCommRxPeakHighToLow==1) {
					if(irCommRxStartBitDetected==1) {
    90f8:	80 91 3c 05 	lds	r24, 0x053C
    90fc:	81 30       	cpi	r24, 0x01	; 1
    90fe:	09 f4       	brne	.+2      	; 0x9102 <irCommTasks+0x10b6>
    9100:	14 c1       	rjmp	.+552    	; 0x932a <irCommTasks+0x12de>

							resetDebugVariables();				
							break;
						}
					} else {
						if(irCommSwitchCount==2) {
    9102:	32 30       	cpi	r19, 0x02	; 2
    9104:	09 f4       	brne	.+2      	; 0x9108 <irCommTasks+0x10bc>
    9106:	6b c1       	rjmp	.+726    	; 0x93de <irCommTasks+0x1392>
								irCommRxBitCount = 0;	
								irCommRxCrc = 0;	
								irCommRxByte = 0;
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
							}
						} else if(irCommSwitchCount==1) {		
    9108:	31 30       	cpi	r19, 0x01	; 1
    910a:	09 f4       	brne	.+2      	; 0x910e <irCommTasks+0x10c2>
    910c:	88 c1       	rjmp	.+784    	; 0x941e <irCommTasks+0x13d2>
								irCommState = IRCOMM_RX_IDLE_STATE;

								irCommSyncStateIndexTemp++;
							}							
						} else {							
							currentProx = 0;
    910e:	10 92 40 02 	sts	0x0240, r1
							adcSaveDataTo = SKIP_SAMPLE;
    9112:	85 e0       	ldi	r24, 0x05	; 5
    9114:	80 93 d5 02 	sts	0x02D5, r24
							adcSamplingState = 0;
    9118:	10 92 d6 02 	sts	0x02D6, r1
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;							
    911c:	10 92 f4 04 	sts	0x04F4, r1
							irCommState = IRCOMM_RX_IDLE_STATE;	
    9120:	10 93 f5 04 	sts	0x04F5, r17

							if(irCommSyncStateIndexTemp>1) {
    9124:	90 91 1d 05 	lds	r25, 0x051D
    9128:	92 30       	cpi	r25, 0x02	; 2
    912a:	08 f0       	brcs	.+2      	; 0x912e <irCommTasks+0x10e2>
    912c:	91 e0       	ldi	r25, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 11;
    912e:	e9 2f       	mov	r30, r25
    9130:	f0 e0       	ldi	r31, 0x00	; 0
    9132:	e8 56       	subi	r30, 0x68	; 104
    9134:	fa 4f       	sbci	r31, 0xFA	; 250
    9136:	8b e0       	ldi	r24, 0x0B	; 11
    9138:	80 83       	st	Z, r24
							irCommSyncStateIndexTemp++;
    913a:	9f 5f       	subi	r25, 0xFF	; 255
    913c:	90 93 1d 05 	sts	0x051D, r25
							//irCommState = IRCOMM_RX_DEBUG;
							//irCommAdcRxState = 12;
							//updateRedLed(0);
							//break;

							resetDebugVariables();				
    9140:	0e 94 7d 3f 	call	0x7efa	; 0x7efa <resetDebugVariables>
    9144:	0c 94 3f 40 	jmp	0x807e	; 0x807e <irCommTasks+0x32>
						
				// start counting number of switch around mean signal
				if(irCommMaxSensorSignal[0] > 0) {
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
    9148:	8f ef       	ldi	r24, 0xFF	; 255
    914a:	80 93 30 05 	sts	0x0530, r24
    914e:	28 2f       	mov	r18, r24
    9150:	a4 ce       	rjmp	.-696    	; 0x8e9a <irCommTasks+0xe4e>
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 2) {
					//updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START1_DURATION;					
					irCommTxSwitchCount = IRCOMM_BIT_START1_SWITCH_COUNT;
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 1) {
					irCommTxDuration = IRCOMM_BIT1_DURATOIN;					
    9152:	8c e3       	ldi	r24, 0x3C	; 60
    9154:	90 e0       	ldi	r25, 0x00	; 0
    9156:	90 93 4f 05 	sts	0x054F, r25
    915a:	80 93 4e 05 	sts	0x054E, r24
					irCommTxSwitchCount = IRCOMM_BIT1_SWITCH_COUNT;
    915e:	84 e0       	ldi	r24, 0x04	; 4
    9160:	80 93 50 05 	sts	0x0550, r24
    9164:	24 cb       	rjmp	.-2488   	; 0x87ae <irCommTasks+0x762>
						
				// start counting number of switch around mean signal
				if(irCommMaxSensorSignal[0] > 0) {
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
    9166:	8f ef       	ldi	r24, 0xFF	; 255
    9168:	80 93 30 05 	sts	0x0530, r24
    916c:	28 2f       	mov	r18, r24
    916e:	f8 c8       	rjmp	.-3600   	; 0x8360 <irCommTasks+0x314>
							break;
						}
					}
				} else {
					if(irCommRxStartBitDetected==1) {
						if(irCommSwitchCount==2) {
    9170:	32 30       	cpi	r19, 0x02	; 2
    9172:	09 f4       	brne	.+2      	; 0x9176 <irCommTasks+0x112a>
    9174:	29 c1       	rjmp	.+594    	; 0x93c8 <irCommTasks+0x137c>
							irCommShiftCounter = 0;
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else if(irCommSwitchCount==1) {
    9176:	31 30       	cpi	r19, 0x01	; 1
    9178:	09 f4       	brne	.+2      	; 0x917c <irCommTasks+0x1130>
    917a:	9a c1       	rjmp	.+820    	; 0x94b0 <irCommTasks+0x1464>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_WAITING_BIT;
						} else {
							irCommRxStartBitDetected = 0;
    917c:	10 92 3c 05 	sts	0x053C, r1
							currentProx = 0;
    9180:	10 92 40 02 	sts	0x0240, r1
							adcSaveDataTo = SKIP_SAMPLE;
    9184:	85 e0       	ldi	r24, 0x05	; 5
    9186:	80 93 d5 02 	sts	0x02D5, r24
							adcSamplingState = 0;
    918a:	10 92 d6 02 	sts	0x02D6, r1
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    918e:	10 92 f4 04 	sts	0x04F4, r1
							irCommState = IRCOMM_RX_IDLE_STATE;	
    9192:	90 93 f5 04 	sts	0x04F5, r25

							if(irCommSyncStateIndexTemp>1) {
    9196:	90 91 1d 05 	lds	r25, 0x051D
    919a:	92 30       	cpi	r25, 0x02	; 2
    919c:	08 f0       	brcs	.+2      	; 0x91a0 <irCommTasks+0x1154>
    919e:	91 e0       	ldi	r25, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 13;
    91a0:	e9 2f       	mov	r30, r25
    91a2:	f0 e0       	ldi	r31, 0x00	; 0
    91a4:	e8 56       	subi	r30, 0x68	; 104
    91a6:	fa 4f       	sbci	r31, 0xFA	; 250
    91a8:	8d e0       	ldi	r24, 0x0D	; 13
    91aa:	80 83       	st	Z, r24
							irCommSyncStateIndexTemp++;
    91ac:	9f 5f       	subi	r25, 0xFF	; 255
    91ae:	90 93 1d 05 	sts	0x051D, r25
							//irCommState = IRCOMM_RX_DEBUG;
							//irCommAdcRxState = 12;
							//updateRedLed(0);
							//break;

							resetDebugVariables();				
    91b2:	0e 94 7d 3f 	call	0x7efa	; 0x7efa <resetDebugVariables>
    91b6:	0c 94 3f 40 	jmp	0x807e	; 0x807e <irCommTasks+0x32>

				//setGreenLed(irCommRxBitCount, 1);

				irCommRxBitCount++;
				if(irCommRxBitCount == 10) {	// received 8 bit of data + 2 bit of crc
					irCommState = IRCOMM_RX_CHECK_CRC;
    91ba:	87 e0       	ldi	r24, 0x07	; 7
    91bc:	80 93 f5 04 	sts	0x04F5, r24

					if(irCommStateIndexTemp>13) {
    91c0:	90 91 1c 05 	lds	r25, 0x051C
    91c4:	9e 30       	cpi	r25, 0x0E	; 14
    91c6:	08 f0       	brcs	.+2      	; 0x91ca <irCommTasks+0x117e>
    91c8:	cb ca       	rjmp	.-2666   	; 0x8760 <irCommTasks+0x714>
    91ca:	ce ca       	rjmp	.-2660   	; 0x8768 <irCommTasks+0x71c>
					}
				} else {
					// cannot get a reliable signal from the sensor from which the start bit was detected the previous time,
					// thus restart listening from the next sensor
					if(irCommRxStartBitDetected == 1) {
						if(irCommRxMaxSensor < 7) {
    91cc:	47 30       	cpi	r20, 0x07	; 7
    91ce:	51 05       	cpc	r21, r1
    91d0:	0c f0       	brlt	.+2      	; 0x91d4 <irCommTasks+0x1188>
    91d2:	f5 c0       	rjmp	.+490    	; 0x93be <irCommTasks+0x1372>
							irCommRxMaxSensor++;
    91d4:	4f 5f       	subi	r20, 0xFF	; 255
    91d6:	5f 4f       	sbci	r21, 0xFF	; 255
    91d8:	50 93 42 05 	sts	0x0542, r21
    91dc:	40 93 41 05 	sts	0x0541, r20
    91e0:	b8 ce       	rjmp	.-656    	; 0x8f52 <irCommTasks+0xf06>
					if(irCommRxStartBitDetected==0) {
						// start listening from the next sensor
						if(irCommRxMaxSensor < 7) {
							irCommRxMaxSensor++;
						} else {
							irCommRxMaxSensor = 0;
    91e2:	10 92 42 05 	sts	0x0542, r1
    91e6:	10 92 41 05 	sts	0x0541, r1
    91ea:	40 91 41 05 	lds	r20, 0x0541
    91ee:	50 91 42 05 	lds	r21, 0x0542
    91f2:	5e c9       	rjmp	.-3396   	; 0x84b0 <irCommTasks+0x464>
					// start listening from the next sensor the next time I check for a start bit in order to get the same chance 
					// to all sensors, instead of always listening from the sensor that has the best signal
					if(irCommRxMaxSensor < 7) {
						irCommRxMaxSensor++;
					} else {
						irCommRxMaxSensor = 0;
    91f4:	10 92 42 05 	sts	0x0542, r1
    91f8:	10 92 41 05 	sts	0x0541, r1
    91fc:	c0 91 78 05 	lds	r28, 0x0578
    9200:	d0 91 79 05 	lds	r29, 0x0579
    9204:	60 91 64 05 	lds	r22, 0x0564
    9208:	70 91 65 05 	lds	r23, 0x0565
    920c:	40 e0       	ldi	r20, 0x00	; 0
    920e:	50 e0       	ldi	r21, 0x00	; 0
    9210:	46 ca       	rjmp	.-2932   	; 0x869e <irCommTasks+0x652>
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
								irCommRxMaxSensor++;
    9212:	4f 5f       	subi	r20, 0xFF	; 255
    9214:	5f 4f       	sbci	r21, 0xFF	; 255
    9216:	50 93 42 05 	sts	0x0542, r21
    921a:	40 93 41 05 	sts	0x0541, r20
    921e:	86 c9       	rjmp	.-3316   	; 0x852c <irCommTasks+0x4e0>
    9220:	4f 5f       	subi	r20, 0xFF	; 255
    9222:	5f 4f       	sbci	r21, 0xFF	; 255
    9224:	50 93 42 05 	sts	0x0542, r21
    9228:	40 93 41 05 	sts	0x0541, r20
    922c:	60 c9       	rjmp	.-3392   	; 0x84ee <irCommTasks+0x4a2>
							resetDebugVariables();				
							break;
						}
					} else {
						if(irCommSwitchCount==2) {
							if(irCommSyncStateIndexTemp>1) {
    922e:	90 91 1d 05 	lds	r25, 0x051D
    9232:	92 30       	cpi	r25, 0x02	; 2
    9234:	08 f0       	brcs	.+2      	; 0x9238 <irCommTasks+0x11ec>
    9236:	91 e0       	ldi	r25, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 1;
    9238:	e9 2f       	mov	r30, r25
    923a:	f0 e0       	ldi	r31, 0x00	; 0
    923c:	e8 56       	subi	r30, 0x68	; 104
    923e:	fa 4f       	sbci	r31, 0xFA	; 250
    9240:	81 e0       	ldi	r24, 0x01	; 1
    9242:	80 83       	st	Z, r24
							irCommSyncStateIndexTemp++;
    9244:	9f 5f       	subi	r25, 0xFF	; 255
    9246:	90 93 1d 05 	sts	0x051D, r25

							irCommShiftCount = IRCOMM_SAMPLING_WINDOW/2 + irCommShiftCount;
    924a:	95 2d       	mov	r25, r5
    924c:	96 5f       	subi	r25, 0xF6	; 246
    924e:	90 93 2c 05 	sts	0x052C, r25
							irCommRxPeakHighToLow = 0;
    9252:	10 92 3d 05 	sts	0x053D, r1
							irCommRxStartBitDetected = 0;
    9256:	10 92 3c 05 	sts	0x053C, r1
							irCommSecondBitSkipped = 0;
    925a:	10 92 35 05 	sts	0x0535, r1
							irCommShiftCounter = 0;
    925e:	10 92 36 05 	sts	0x0536, r1
							irCommRxBitCount = 0;	
    9262:	10 92 32 05 	sts	0x0532, r1
							irCommRxCrc = 0;	
    9266:	10 92 23 05 	sts	0x0523, r1
							irCommRxByte = 0;
    926a:	10 92 34 05 	sts	0x0534, r1
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
    926e:	84 e0       	ldi	r24, 0x04	; 4
    9270:	80 93 f5 04 	sts	0x04F5, r24
    9274:	59 2e       	mov	r5, r25
							break;				
						}
					}
				}
	
				if(irCommStateIndexTemp>13) {
    9276:	90 91 1c 05 	lds	r25, 0x051C
    927a:	9e 30       	cpi	r25, 0x0E	; 14
    927c:	20 f0       	brcs	.+8      	; 0x9286 <irCommTasks+0x123a>
					irCommStateIndexTemp = 13;
    927e:	8d e0       	ldi	r24, 0x0D	; 13
    9280:	80 93 1c 05 	sts	0x051C, r24
    9284:	9d e0       	ldi	r25, 0x0D	; 13
					//updateRedLed(0);
				}
				irCommStateTemp[irCommStateIndexTemp] = irCommState;
    9286:	80 91 f5 04 	lds	r24, 0x04F5
    928a:	e9 2f       	mov	r30, r25
    928c:	f0 e0       	ldi	r31, 0x00	; 0
    928e:	e6 59       	subi	r30, 0x96	; 150
    9290:	fa 4f       	sbci	r31, 0xFA	; 250
    9292:	80 83       	st	Z, r24
				irCommStateIndexTemp++;
    9294:	9f 5f       	subi	r25, 0xFF	; 255
    9296:	90 93 1c 05 	sts	0x051C, r25
				
				if(irCommShiftCountFinalIndexTemp>1) {
    929a:	80 91 16 05 	lds	r24, 0x0516
    929e:	82 30       	cpi	r24, 0x02	; 2
    92a0:	08 f0       	brcs	.+2      	; 0x92a4 <irCommTasks+0x1258>
    92a2:	81 e0       	ldi	r24, 0x01	; 1
					irCommShiftCountFinalIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommShiftCountFinalTemp[irCommShiftCountFinalIndexTemp] = irCommShiftCount;
    92a4:	e8 2f       	mov	r30, r24
    92a6:	f0 e0       	ldi	r31, 0x00	; 0
    92a8:	ed 59       	subi	r30, 0x9D	; 157
    92aa:	f4 4f       	sbci	r31, 0xF4	; 244
    92ac:	50 82       	st	Z, r5
				irCommShiftCountFinalIndexTemp++;
    92ae:	8f 5f       	subi	r24, 0xFF	; 255
    92b0:	80 93 16 05 	sts	0x0516, r24
				
				if(irCommRxStartBitDetectedIndexTemp>1) {
    92b4:	90 91 1b 05 	lds	r25, 0x051B
    92b8:	92 30       	cpi	r25, 0x02	; 2
    92ba:	08 f0       	brcs	.+2      	; 0x92be <irCommTasks+0x1272>
    92bc:	91 e0       	ldi	r25, 0x01	; 1
					irCommRxStartBitDetectedIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommRxStartBitDetectedTemp[irCommRxStartBitDetectedIndexTemp] = irCommRxStartBitDetected;
    92be:	e9 2f       	mov	r30, r25
    92c0:	f0 e0       	ldi	r31, 0x00	; 0
    92c2:	ed 55       	subi	r30, 0x5D	; 93
    92c4:	fa 4f       	sbci	r31, 0xFA	; 250
    92c6:	80 91 3c 05 	lds	r24, 0x053C
    92ca:	80 83       	st	Z, r24
				irCommRxStartBitDetectedIndexTemp++;			
    92cc:	9f 5f       	subi	r25, 0xFF	; 255
    92ce:	90 93 1b 05 	sts	0x051B, r25
    92d2:	0c 94 3f 40 	jmp	0x807e	; 0x807e <irCommTasks+0x32>
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
								irCommRxMaxSensor++;
    92d6:	4f 5f       	subi	r20, 0xFF	; 255
    92d8:	5f 4f       	sbci	r21, 0xFF	; 255
    92da:	50 93 42 05 	sts	0x0542, r21
    92de:	40 93 41 05 	sts	0x0541, r20
    92e2:	43 c9       	rjmp	.-3450   	; 0x856a <irCommTasks+0x51e>
    92e4:	4f 5f       	subi	r20, 0xFF	; 255
    92e6:	5f 4f       	sbci	r21, 0xFF	; 255
    92e8:	50 93 42 05 	sts	0x0542, r21
    92ec:	40 93 41 05 	sts	0x0541, r20
    92f0:	5b c9       	rjmp	.-3402   	; 0x85a8 <irCommTasks+0x55c>
    92f2:	4f 5f       	subi	r20, 0xFF	; 255
    92f4:	5f 4f       	sbci	r21, 0xFF	; 255
    92f6:	50 93 42 05 	sts	0x0542, r21
    92fa:	40 93 41 05 	sts	0x0541, r20
    92fe:	73 c9       	rjmp	.-3354   	; 0x85e6 <irCommTasks+0x59a>
    9300:	4f 5f       	subi	r20, 0xFF	; 255
    9302:	5f 4f       	sbci	r21, 0xFF	; 255
    9304:	50 93 42 05 	sts	0x0542, r21
    9308:	40 93 41 05 	sts	0x0541, r20
    930c:	8b c9       	rjmp	.-3306   	; 0x8624 <irCommTasks+0x5d8>
							} else {
								irCommRxMaxSensor = 0;
    930e:	10 92 42 05 	sts	0x0542, r1
    9312:	10 92 41 05 	sts	0x0541, r1
    9316:	40 e0       	ldi	r20, 0x00	; 0
    9318:	50 e0       	ldi	r21, 0x00	; 0
    931a:	c1 c9       	rjmp	.-3198   	; 0x869e <irCommTasks+0x652>
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
								irCommRxMaxSensor++;
    931c:	4f 5f       	subi	r20, 0xFF	; 255
    931e:	5f 4f       	sbci	r21, 0xFF	; 255
    9320:	50 93 42 05 	sts	0x0542, r21
    9324:	40 93 41 05 	sts	0x0541, r20
    9328:	9c c9       	rjmp	.-3272   	; 0x8662 <irCommTasks+0x616>
				

				//turnOffGreenLeds();
				if(irCommRxPeakHighToLow==1) {
					if(irCommRxStartBitDetected==1) {
						if(irCommSwitchCount==2) {
    932a:	32 30       	cpi	r19, 0x02	; 2
    932c:	09 f4       	brne	.+2      	; 0x9330 <irCommTasks+0x12e4>
    932e:	f4 c0       	rjmp	.+488    	; 0x9518 <irCommTasks+0x14cc>
							irCommShiftCounter = 0;
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_WAITING_BIT;
						} else if(irCommSwitchCount==1) {
    9330:	31 30       	cpi	r19, 0x01	; 1
    9332:	09 f4       	brne	.+2      	; 0x9336 <irCommTasks+0x12ea>
    9334:	0d c1       	rjmp	.+538    	; 0x9550 <irCommTasks+0x1504>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else {
							irCommRxStartBitDetected = 0;
    9336:	10 92 3c 05 	sts	0x053C, r1
							currentProx = 0;
    933a:	10 92 40 02 	sts	0x0240, r1
							adcSaveDataTo = SKIP_SAMPLE;
    933e:	85 e0       	ldi	r24, 0x05	; 5
    9340:	80 93 d5 02 	sts	0x02D5, r24
							adcSamplingState = 0;
    9344:	10 92 d6 02 	sts	0x02D6, r1
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    9348:	10 92 f4 04 	sts	0x04F4, r1
							irCommState = IRCOMM_RX_IDLE_STATE;	
    934c:	10 93 f5 04 	sts	0x04F5, r17

							if(irCommSyncStateIndexTemp>1) {
    9350:	90 91 1d 05 	lds	r25, 0x051D
    9354:	92 30       	cpi	r25, 0x02	; 2
    9356:	08 f0       	brcs	.+2      	; 0x935a <irCommTasks+0x130e>
    9358:	91 e0       	ldi	r25, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 12;
    935a:	e9 2f       	mov	r30, r25
    935c:	f0 e0       	ldi	r31, 0x00	; 0
    935e:	e8 56       	subi	r30, 0x68	; 104
    9360:	fa 4f       	sbci	r31, 0xFA	; 250
    9362:	8c e0       	ldi	r24, 0x0C	; 12
    9364:	80 83       	st	Z, r24
							irCommSyncStateIndexTemp++;
    9366:	9f 5f       	subi	r25, 0xFF	; 255
    9368:	90 93 1d 05 	sts	0x051D, r25
							//irCommState = IRCOMM_RX_DEBUG;
							//irCommAdcRxState = 12;
							//updateRedLed(0);
							//break;

							resetDebugVariables();				
    936c:	0e 94 7d 3f 	call	0x7efa	; 0x7efa <resetDebugVariables>
    9370:	0c 94 3f 40 	jmp	0x807e	; 0x807e <irCommTasks+0x32>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else if(irCommSwitchCount==1) {
							if(irCommRxStartPeakDuration > IRCOMM_SAMPLING_WINDOW/2) {
    9374:	0b 30       	cpi	r16, 0x0B	; 11
    9376:	08 f4       	brcc	.+2      	; 0x937a <irCommTasks+0x132e>
    9378:	76 c0       	rjmp	.+236    	; 0x9466 <irCommTasks+0x141a>
								currentProx = 0;
    937a:	10 92 40 02 	sts	0x0240, r1
								adcSaveDataTo = SKIP_SAMPLE;
    937e:	85 e0       	ldi	r24, 0x05	; 5
    9380:	80 93 d5 02 	sts	0x02D5, r24
								adcSamplingState = 0;
    9384:	10 92 d6 02 	sts	0x02D6, r1
								irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;								
    9388:	10 92 f4 04 	sts	0x04F4, r1
								irCommState = IRCOMM_RX_IDLE_STATE;
    938c:	30 93 f5 04 	sts	0x04F5, r19

								if(irCommSyncStateIndexTemp>1) {
    9390:	90 91 1d 05 	lds	r25, 0x051D
    9394:	92 30       	cpi	r25, 0x02	; 2
    9396:	08 f0       	brcs	.+2      	; 0x939a <irCommTasks+0x134e>
    9398:	91 e0       	ldi	r25, 0x01	; 1
									irCommSyncStateIndexTemp = 1;
									//updateRedLed(0);
								}
								irCommSyncStateTemp[irCommSyncStateIndexTemp] = 14;
    939a:	e9 2f       	mov	r30, r25
    939c:	f0 e0       	ldi	r31, 0x00	; 0
    939e:	e8 56       	subi	r30, 0x68	; 104
    93a0:	fa 4f       	sbci	r31, 0xFA	; 250
    93a2:	8e e0       	ldi	r24, 0x0E	; 14
    93a4:	80 83       	st	Z, r24
								irCommSyncStateIndexTemp++;
    93a6:	9f 5f       	subi	r25, 0xFF	; 255
    93a8:	90 93 1d 05 	sts	0x051D, r25
								//irCommState = IRCOMM_RX_DEBUG;
								//irCommAdcRxState = 12;
								//updateRedLed(0);
								//break;

								resetDebugVariables();				
    93ac:	0e 94 7d 3f 	call	0x7efa	; 0x7efa <resetDebugVariables>
    93b0:	0c 94 3f 40 	jmp	0x807e	; 0x807e <irCommTasks+0x32>
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
    93b4:	b0 93 40 05 	sts	0x0540, r27
    93b8:	a0 93 3f 05 	sts	0x053F, r26
    93bc:	70 c9       	rjmp	.-3360   	; 0x869e <irCommTasks+0x652>
					// thus restart listening from the next sensor
					if(irCommRxStartBitDetected == 1) {
						if(irCommRxMaxSensor < 7) {
							irCommRxMaxSensor++;
						} else {
							irCommRxMaxSensor = 0;
    93be:	10 92 42 05 	sts	0x0542, r1
    93c2:	10 92 41 05 	sts	0x0541, r1
    93c6:	c5 cd       	rjmp	.-1142   	; 0x8f52 <irCommTasks+0xf06>
						}
					}
				} else {
					if(irCommRxStartBitDetected==1) {
						if(irCommSwitchCount==2) {
							if(irCommSyncStateIndexTemp>1) {
    93c8:	90 91 1d 05 	lds	r25, 0x051D
    93cc:	92 30       	cpi	r25, 0x02	; 2
    93ce:	08 f0       	brcs	.+2      	; 0x93d2 <irCommTasks+0x1386>
    93d0:	91 e0       	ldi	r25, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 5;
    93d2:	e9 2f       	mov	r30, r25
    93d4:	f0 e0       	ldi	r31, 0x00	; 0
    93d6:	e8 56       	subi	r30, 0x68	; 104
    93d8:	fa 4f       	sbci	r31, 0xFA	; 250
    93da:	85 e0       	ldi	r24, 0x05	; 5
    93dc:	32 cf       	rjmp	.-412    	; 0x9242 <irCommTasks+0x11f6>
							resetDebugVariables();				
							break;
						}
					} else {
						if(irCommSwitchCount==2) {
							if(irCommRxStartPeakDuration<=3) {	// peak due to sensors sampling detected
    93de:	04 30       	cpi	r16, 0x04	; 4
    93e0:	08 f0       	brcs	.+2      	; 0x93e4 <irCommTasks+0x1398>
    93e2:	89 c0       	rjmp	.+274    	; 0x94f6 <irCommTasks+0x14aa>
								currentProx = 0;
    93e4:	10 92 40 02 	sts	0x0240, r1
								adcSaveDataTo = SKIP_SAMPLE;
    93e8:	85 e0       	ldi	r24, 0x05	; 5
    93ea:	80 93 d5 02 	sts	0x02D5, r24
								adcSamplingState = 0;
    93ee:	10 92 d6 02 	sts	0x02D6, r1
								irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;							
    93f2:	10 92 f4 04 	sts	0x04F4, r1
								irCommState = IRCOMM_RX_IDLE_STATE;
    93f6:	10 93 f5 04 	sts	0x04F5, r17

								if(irCommSyncStateIndexTemp>1) {
    93fa:	90 91 1d 05 	lds	r25, 0x051D
    93fe:	92 30       	cpi	r25, 0x02	; 2
    9400:	08 f0       	brcs	.+2      	; 0x9404 <irCommTasks+0x13b8>
    9402:	91 e0       	ldi	r25, 0x01	; 1
									irCommSyncStateIndexTemp = 1;
									//updateRedLed(0);
								}
								irCommSyncStateTemp[irCommSyncStateIndexTemp] = 16;
    9404:	e9 2f       	mov	r30, r25
    9406:	f0 e0       	ldi	r31, 0x00	; 0
    9408:	e8 56       	subi	r30, 0x68	; 104
    940a:	fa 4f       	sbci	r31, 0xFA	; 250
    940c:	80 e1       	ldi	r24, 0x10	; 16
    940e:	80 83       	st	Z, r24
								irCommSyncStateIndexTemp++;
    9410:	9f 5f       	subi	r25, 0xFF	; 255
    9412:	90 93 1d 05 	sts	0x051D, r25
								//irCommState = IRCOMM_RX_DEBUG;
								//irCommAdcRxState = 12;
								//updateGreenLed(0);
								//break;

								resetDebugVariables();
    9416:	0e 94 7d 3f 	call	0x7efa	; 0x7efa <resetDebugVariables>
    941a:	0c 94 3f 40 	jmp	0x807e	; 0x807e <irCommTasks+0x32>
								irCommRxCrc = 0;	
								irCommRxByte = 0;
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
							}
						} else if(irCommSwitchCount==1) {		
							irCommRxStartBitDetected = 1;					
    941e:	30 93 3c 05 	sts	0x053C, r19
							if(irCommRxStartPeakDuration > IRCOMM_SAMPLING_WINDOW/2) {
    9422:	0b 30       	cpi	r16, 0x0B	; 11
    9424:	08 f4       	brcc	.+2      	; 0x9428 <irCommTasks+0x13dc>
    9426:	83 c0       	rjmp	.+262    	; 0x952e <irCommTasks+0x14e2>
								if(irCommSyncStateIndexTemp>1) {
    9428:	90 91 1d 05 	lds	r25, 0x051D
    942c:	92 30       	cpi	r25, 0x02	; 2
    942e:	08 f0       	brcs	.+2      	; 0x9432 <irCommTasks+0x13e6>
    9430:	91 e0       	ldi	r25, 0x01	; 1
									irCommSyncStateIndexTemp = 1;
									//updateRedLed(0);
								}
								irCommSyncStateTemp[irCommSyncStateIndexTemp] = 4;
    9432:	e9 2f       	mov	r30, r25
    9434:	f0 e0       	ldi	r31, 0x00	; 0
    9436:	e8 56       	subi	r30, 0x68	; 104
    9438:	fa 4f       	sbci	r31, 0xFA	; 250
    943a:	84 e0       	ldi	r24, 0x04	; 4
    943c:	80 83       	st	Z, r24
								irCommSyncStateIndexTemp++;
    943e:	9f 5f       	subi	r25, 0xFF	; 255
    9440:	90 93 1d 05 	sts	0x051D, r25

								//irCommShiftCount = irCommShiftCount;
								irCommRxPeakHighToLow = 0;
    9444:	10 92 3d 05 	sts	0x053D, r1
								irCommRxStartBitDetected = 0;
    9448:	10 92 3c 05 	sts	0x053C, r1
								irCommSecondBitSkipped = 0;
    944c:	10 92 35 05 	sts	0x0535, r1
								irCommShiftCounter = 0;
    9450:	10 92 36 05 	sts	0x0536, r1
								irCommRxBitCount = 0;	
    9454:	10 92 32 05 	sts	0x0532, r1
								irCommRxCrc = 0;	
    9458:	10 92 23 05 	sts	0x0523, r1
								irCommRxByte = 0;
    945c:	10 92 34 05 	sts	0x0534, r1
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
    9460:	80 93 f5 04 	sts	0x04F5, r24
    9464:	08 cf       	rjmp	.-496    	; 0x9276 <irCommTasks+0x122a>
								//break;

								resetDebugVariables();				
								break;
							} else {
								if(irCommSyncStateIndexTemp>1) {
    9466:	90 91 1d 05 	lds	r25, 0x051D
    946a:	92 30       	cpi	r25, 0x02	; 2
    946c:	08 f0       	brcs	.+2      	; 0x9470 <irCommTasks+0x1424>
    946e:	91 e0       	ldi	r25, 0x01	; 1
									irCommSyncStateIndexTemp = 1;
									//updateRedLed(0);
								}
								irCommSyncStateTemp[irCommSyncStateIndexTemp] = 7;
    9470:	e9 2f       	mov	r30, r25
    9472:	f0 e0       	ldi	r31, 0x00	; 0
    9474:	e8 56       	subi	r30, 0x68	; 104
    9476:	fa 4f       	sbci	r31, 0xFA	; 250
    9478:	87 e0       	ldi	r24, 0x07	; 7
    947a:	80 83       	st	Z, r24
								irCommSyncStateIndexTemp++;
    947c:	9f 5f       	subi	r25, 0xFF	; 255
    947e:	90 93 1d 05 	sts	0x051D, r25

								irCommShiftCount = IRCOMM_SAMPLING_WINDOW;
    9482:	84 e1       	ldi	r24, 0x14	; 20
    9484:	80 93 2c 05 	sts	0x052C, r24
								irCommRxPeakHighToLow = 0;
    9488:	10 92 3d 05 	sts	0x053D, r1
								irCommRxStartBitDetected = 0;
    948c:	10 92 3c 05 	sts	0x053C, r1
								irCommSecondBitSkipped = 0;
    9490:	10 92 35 05 	sts	0x0535, r1
								irCommShiftCounter = 0;
    9494:	10 92 36 05 	sts	0x0536, r1
								irCommRxBitCount = 0;	
    9498:	10 92 32 05 	sts	0x0532, r1
								irCommRxCrc = 0;	
    949c:	10 92 23 05 	sts	0x0523, r1
								irCommRxByte = 0;
    94a0:	10 92 34 05 	sts	0x0534, r1
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
    94a4:	84 e0       	ldi	r24, 0x04	; 4
    94a6:	80 93 f5 04 	sts	0x04F5, r24
    94aa:	04 e1       	ldi	r16, 0x14	; 20
    94ac:	50 2e       	mov	r5, r16
    94ae:	e3 ce       	rjmp	.-570    	; 0x9276 <irCommTasks+0x122a>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else if(irCommSwitchCount==1) {
							if(irCommSyncStateIndexTemp>1) {
    94b0:	90 91 1d 05 	lds	r25, 0x051D
    94b4:	92 30       	cpi	r25, 0x02	; 2
    94b6:	08 f0       	brcs	.+2      	; 0x94ba <irCommTasks+0x146e>
    94b8:	91 e0       	ldi	r25, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 8;
    94ba:	e9 2f       	mov	r30, r25
    94bc:	f0 e0       	ldi	r31, 0x00	; 0
    94be:	e8 56       	subi	r30, 0x68	; 104
    94c0:	fa 4f       	sbci	r31, 0xFA	; 250
    94c2:	88 e0       	ldi	r24, 0x08	; 8
    94c4:	80 83       	st	Z, r24
							irCommSyncStateIndexTemp++;
    94c6:	9f 5f       	subi	r25, 0xFF	; 255
    94c8:	90 93 1d 05 	sts	0x051D, r25

							irCommShiftCount = 0;
    94cc:	10 92 2c 05 	sts	0x052C, r1
							irCommRxPeakHighToLow = 0;
    94d0:	10 92 3d 05 	sts	0x053D, r1
							irCommRxStartBitDetected = 0;
    94d4:	10 92 3c 05 	sts	0x053C, r1
							irCommSecondBitSkipped = 0;
    94d8:	10 92 35 05 	sts	0x0535, r1
							irCommShiftCounter = 0;
    94dc:	10 92 36 05 	sts	0x0536, r1
							irCommRxBitCount = 0;	
    94e0:	10 92 32 05 	sts	0x0532, r1
							irCommRxCrc = 0;	
    94e4:	10 92 23 05 	sts	0x0523, r1
							irCommRxByte = 0;
    94e8:	10 92 34 05 	sts	0x0534, r1
							irCommState = IRCOMM_RX_WAITING_BIT;
    94ec:	85 e0       	ldi	r24, 0x05	; 5
    94ee:	80 93 f5 04 	sts	0x04F5, r24
    94f2:	55 24       	eor	r5, r5
    94f4:	c0 ce       	rjmp	.-640    	; 0x9276 <irCommTasks+0x122a>
								//break;

								resetDebugVariables();
								break;
							} else {
								if(irCommSyncStateIndexTemp>1) {
    94f6:	90 91 1d 05 	lds	r25, 0x051D
    94fa:	92 30       	cpi	r25, 0x02	; 2
    94fc:	08 f0       	brcs	.+2      	; 0x9500 <irCommTasks+0x14b4>
    94fe:	91 e0       	ldi	r25, 0x01	; 1
									irCommSyncStateIndexTemp = 1;
									//updateRedLed(0);
								}
								irCommSyncStateTemp[irCommSyncStateIndexTemp] = 3;
    9500:	e9 2f       	mov	r30, r25
    9502:	f0 e0       	ldi	r31, 0x00	; 0
    9504:	e8 56       	subi	r30, 0x68	; 104
    9506:	fa 4f       	sbci	r31, 0xFA	; 250
    9508:	83 e0       	ldi	r24, 0x03	; 3
    950a:	80 83       	st	Z, r24
								irCommSyncStateIndexTemp++;
    950c:	9f 5f       	subi	r25, 0xFF	; 255
    950e:	90 93 1d 05 	sts	0x051D, r25

								irCommShiftCount = IRCOMM_SAMPLING_WINDOW + irCommShiftCount;
    9512:	95 2d       	mov	r25, r5
    9514:	9c 5e       	subi	r25, 0xEC	; 236
    9516:	9b ce       	rjmp	.-714    	; 0x924e <irCommTasks+0x1202>

				//turnOffGreenLeds();
				if(irCommRxPeakHighToLow==1) {
					if(irCommRxStartBitDetected==1) {
						if(irCommSwitchCount==2) {
							if(irCommSyncStateIndexTemp>1) {
    9518:	90 91 1d 05 	lds	r25, 0x051D
    951c:	92 30       	cpi	r25, 0x02	; 2
    951e:	08 f0       	brcs	.+2      	; 0x9522 <irCommTasks+0x14d6>
    9520:	91 e0       	ldi	r25, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 6;
    9522:	e9 2f       	mov	r30, r25
    9524:	f0 e0       	ldi	r31, 0x00	; 0
    9526:	e8 56       	subi	r30, 0x68	; 104
    9528:	fa 4f       	sbci	r31, 0xFA	; 250
    952a:	86 e0       	ldi	r24, 0x06	; 6
    952c:	cb cf       	rjmp	.-106    	; 0x94c4 <irCommTasks+0x1478>
								irCommRxBitCount = 0;	
								irCommRxCrc = 0;	
								irCommRxByte = 0;
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
							} else {
								currentProx = 0;
    952e:	10 92 40 02 	sts	0x0240, r1
								adcSaveDataTo = SKIP_SAMPLE;
    9532:	85 e0       	ldi	r24, 0x05	; 5
    9534:	80 93 d5 02 	sts	0x02D5, r24
								adcSamplingState = 0;
    9538:	10 92 d6 02 	sts	0x02D6, r1
								irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;								
    953c:	10 92 f4 04 	sts	0x04F4, r1
								irCommState = IRCOMM_RX_IDLE_STATE;
    9540:	30 93 f5 04 	sts	0x04F5, r19

								irCommSyncStateIndexTemp++;
    9544:	80 91 1d 05 	lds	r24, 0x051D
    9548:	8f 5f       	subi	r24, 0xFF	; 255
    954a:	80 93 1d 05 	sts	0x051D, r24
    954e:	93 ce       	rjmp	.-730    	; 0x9276 <irCommTasks+0x122a>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_WAITING_BIT;
						} else if(irCommSwitchCount==1) {
							if(irCommSyncStateIndexTemp>1) {
    9550:	90 91 1d 05 	lds	r25, 0x051D
    9554:	92 30       	cpi	r25, 0x02	; 2
    9556:	08 f0       	brcs	.+2      	; 0x955a <irCommTasks+0x150e>
    9558:	91 e0       	ldi	r25, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 2;
    955a:	e9 2f       	mov	r30, r25
    955c:	f0 e0       	ldi	r31, 0x00	; 0
    955e:	e8 56       	subi	r30, 0x68	; 104
    9560:	fa 4f       	sbci	r31, 0xFA	; 250
    9562:	82 e0       	ldi	r24, 0x02	; 2
    9564:	80 83       	st	Z, r24
							irCommSyncStateIndexTemp++;
    9566:	9f 5f       	subi	r25, 0xFF	; 255
    9568:	90 93 1d 05 	sts	0x051D, r25

							//irCommShiftCount = irCommShiftCount;
							irCommRxPeakHighToLow = 0;
    956c:	10 92 3d 05 	sts	0x053D, r1
							irCommRxStartBitDetected = 0;
    9570:	10 92 3c 05 	sts	0x053C, r1
							irCommSecondBitSkipped = 0;
    9574:	10 92 35 05 	sts	0x0535, r1
							irCommShiftCounter = 0;
    9578:	10 92 36 05 	sts	0x0536, r1
							irCommRxBitCount = 0;	
    957c:	10 92 32 05 	sts	0x0532, r1
							irCommRxCrc = 0;	
    9580:	10 92 23 05 	sts	0x0523, r1
							irCommRxByte = 0;
    9584:	10 92 34 05 	sts	0x0534, r1
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
    9588:	84 e0       	ldi	r24, 0x04	; 4
    958a:	80 93 f5 04 	sts	0x04F5, r24
    958e:	73 ce       	rjmp	.-794    	; 0x9276 <irCommTasks+0x122a>

00009590 <irCommInitVars>:
	irCommState = IRCOMM_RX_IDLE_STATE;
	irCommEnabledNext = IRCOMM_MODE_RECEIVE;
}

void irCommInitVars() {
	memset(irCommMaxSensorValueAdc, 0x00, 16);
    9590:	e0 91 65 0b 	lds	r30, 0x0B65
    9594:	f0 91 66 0b 	lds	r31, 0x0B66
    9598:	80 e1       	ldi	r24, 0x10	; 16
    959a:	df 01       	movw	r26, r30
    959c:	1d 92       	st	X+, r1
    959e:	8a 95       	dec	r24
    95a0:	e9 f7       	brne	.-6      	; 0x959c <irCommInitVars+0xc>
	memset(irCommMinSensorValueAdc, 0xFF, 16);
    95a2:	80 91 f5 05 	lds	r24, 0x05F5
    95a6:	90 91 f6 05 	lds	r25, 0x05F6
    95aa:	6f ef       	ldi	r22, 0xFF	; 255
    95ac:	70 e0       	ldi	r23, 0x00	; 0
    95ae:	40 e1       	ldi	r20, 0x10	; 16
    95b0:	50 e0       	ldi	r21, 0x00	; 0
    95b2:	0e 94 77 58 	call	0xb0ee	; 0xb0ee <memset>
	irCommMode = IRCOMM_MODE_SENSORS_SAMPLING;
    95b6:	10 92 f4 04 	sts	0x04F4, r1
}
    95ba:	08 95       	ret

000095bc <irCommInit>:

void irCommInit() {
	irCommProxValuesAdc = irCommProxValuesBuff1;
    95bc:	89 ef       	ldi	r24, 0xF9	; 249
    95be:	95 e0       	ldi	r25, 0x05	; 5
    95c0:	90 93 98 08 	sts	0x0898, r25
    95c4:	80 93 97 08 	sts	0x0897, r24
	irCommProxValuesCurr = irCommProxValuesBuff2;
    95c8:	8b e3       	ldi	r24, 0x3B	; 59
    95ca:	97 e0       	ldi	r25, 0x07	; 7
    95cc:	90 93 7c 08 	sts	0x087C, r25
    95d0:	80 93 7b 08 	sts	0x087B, r24
	irCommMaxSensorValueAdc = irCommMaxSensorValueBuff1;
    95d4:	e6 ea       	ldi	r30, 0xA6	; 166
    95d6:	f9 e0       	ldi	r31, 0x09	; 9
    95d8:	f0 93 66 0b 	sts	0x0B66, r31
    95dc:	e0 93 65 0b 	sts	0x0B65, r30
	irCommMaxSensorValueCurr = irCommMaxSensorValueBuff2;
    95e0:	84 e9       	ldi	r24, 0x94	; 148
    95e2:	9b e0       	ldi	r25, 0x0B	; 11
    95e4:	90 93 79 05 	sts	0x0579, r25
    95e8:	80 93 78 05 	sts	0x0578, r24
	irCommMinSensorValueAdc = irCommMinSensorValueBuff1;
    95ec:	8d e7       	ldi	r24, 0x7D	; 125
    95ee:	98 e0       	ldi	r25, 0x08	; 8
    95f0:	90 93 f6 05 	sts	0x05F6, r25
    95f4:	80 93 f5 05 	sts	0x05F5, r24
	irCommMinSensorValueCurr = irCommMinSensorValueBuff2;
    95f8:	20 e0       	ldi	r18, 0x00	; 0
    95fa:	39 e0       	ldi	r19, 0x09	; 9
    95fc:	30 93 65 05 	sts	0x0565, r19
    9600:	20 93 64 05 	sts	0x0564, r18
	irCommState = IRCOMM_RX_IDLE_STATE;
	irCommEnabledNext = IRCOMM_MODE_RECEIVE;
}

void irCommInitVars() {
	memset(irCommMaxSensorValueAdc, 0x00, 16);
    9604:	20 e1       	ldi	r18, 0x10	; 16
    9606:	df 01       	movw	r26, r30
    9608:	1d 92       	st	X+, r1
    960a:	2a 95       	dec	r18
    960c:	e9 f7       	brne	.-6      	; 0x9608 <irCommInit+0x4c>
	memset(irCommMinSensorValueAdc, 0xFF, 16);
    960e:	6f ef       	ldi	r22, 0xFF	; 255
    9610:	70 e0       	ldi	r23, 0x00	; 0
    9612:	40 e1       	ldi	r20, 0x10	; 16
    9614:	50 e0       	ldi	r21, 0x00	; 0
    9616:	0e 94 77 58 	call	0xb0ee	; 0xb0ee <memset>
	irCommMode = IRCOMM_MODE_SENSORS_SAMPLING;
    961a:	10 92 f4 04 	sts	0x04F4, r1
	irCommEnabled = IRCOMM_MODE_TRANSMIT;
	irCommState = IRCOMM_TX_IDLE_STATE;
}

void irCommInitReceiver() {
	irCommEnabled = IRCOMM_MODE_RECEIVE;
    961e:	81 e0       	ldi	r24, 0x01	; 1
    9620:	80 93 f2 04 	sts	0x04F2, r24
	irCommState = IRCOMM_RX_IDLE_STATE;
    9624:	80 93 f5 04 	sts	0x04F5, r24
	irCommEnabledNext = IRCOMM_MODE_RECEIVE;
    9628:	80 93 f3 04 	sts	0x04F3, r24
	irCommMaxSensorValueCurr = irCommMaxSensorValueBuff2;
	irCommMinSensorValueAdc = irCommMinSensorValueBuff1;
	irCommMinSensorValueCurr = irCommMinSensorValueBuff2;
	irCommInitVars();
	irCommInitReceiver();
}
    962c:	08 95       	ret

0000962e <elisa_communication>:
#include "elisaComm.h"
#include "irCommunication.h"
#include "variables.h"
#include "utility.h"
		
void elisa_communication(){	
    962e:	7f 92       	push	r7
    9630:	8f 92       	push	r8
    9632:	9f 92       	push	r9
    9634:	af 92       	push	r10
    9636:	bf 92       	push	r11
    9638:	cf 92       	push	r12
    963a:	df 92       	push	r13
    963c:	ef 92       	push	r14
    963e:	ff 92       	push	r15
    9640:	0f 93       	push	r16
    9642:	1f 93       	push	r17
    9644:	cf 93       	push	r28
    9646:	df 93       	push	r29
	unsigned char prevSelector=0;
	unsigned int i=0;
	unsigned int currRand=0, currRand2=0;
	float targetAngle=0;

	initPeripherals();
    9648:	0e 94 4e 10 	call	0x209c	; 0x209c <initPeripherals>

	initBehaviors();
    964c:	0e 94 da 35 	call	0x6bb4	; 0x6bb4 <initBehaviors>

	speedStepCounter = getTime100MicroSec();
    9650:	0e 94 04 10 	call	0x2008	; 0x2008 <getTime100MicroSec>
    9654:	9b 01       	movw	r18, r22
    9656:	ac 01       	movw	r20, r24
    9658:	60 93 84 04 	sts	0x0484, r22
    965c:	30 93 85 04 	sts	0x0485, r19
    9660:	40 93 86 04 	sts	0x0486, r20
    9664:	50 93 87 04 	sts	0x0487, r21
    9668:	10 92 88 04 	sts	0x0488, r1
    966c:	10 92 89 04 	sts	0x0489, r1
    9670:	10 92 8a 04 	sts	0x048A, r1
    9674:	10 92 8b 04 	sts	0x048B, r1

	startTime = getTime100MicroSec();
    9678:	0e 94 04 10 	call	0x2008	; 0x2008 <getTime100MicroSec>
    967c:	7b 01       	movw	r14, r22
    967e:	8c 01       	movw	r16, r24
	while((getTime100MicroSec() - startTime) < PAUSE_300_MSEC);
    9680:	0e 94 04 10 	call	0x2008	; 0x2008 <getTime100MicroSec>
    9684:	6e 19       	sub	r22, r14
    9686:	7f 09       	sbc	r23, r15
    9688:	80 0b       	sbc	r24, r16
    968a:	91 0b       	sbc	r25, r17
    968c:	65 54       	subi	r22, 0x45	; 69
    968e:	7b 40       	sbci	r23, 0x0B	; 11
    9690:	80 40       	sbci	r24, 0x00	; 0
    9692:	90 40       	sbci	r25, 0x00	; 0
    9694:	a8 f3       	brcs	.-22     	; 0x9680 <elisa_communication+0x52>
	calibrateSensors();
    9696:	0e 94 01 3a 	call	0x7402	; 0x7402 <calibrateSensors>

	startTime = getTime100MicroSec();
    969a:	0e 94 04 10 	call	0x2008	; 0x2008 <getTime100MicroSec>
    969e:	10 e0       	ldi	r17, 0x00	; 0
    96a0:	c0 e0       	ldi	r28, 0x00	; 0
    96a2:	d0 e0       	ldi	r29, 0x00	; 0
    96a4:	0f 2e       	mov	r0, r31
    96a6:	f0 e0       	ldi	r31, 0x00	; 0
    96a8:	af 2e       	mov	r10, r31
    96aa:	f0 e0       	ldi	r31, 0x00	; 0
    96ac:	bf 2e       	mov	r11, r31
    96ae:	f0 e0       	ldi	r31, 0x00	; 0
    96b0:	cf 2e       	mov	r12, r31
    96b2:	f0 e0       	ldi	r31, 0x00	; 0
    96b4:	df 2e       	mov	r13, r31
    96b6:	f0 2d       	mov	r31, r0
								updateRedLed(255);
								updateGreenLed(235);
							}
							i = irCommReadData();
							if(i == 0xFF) {
								demoState = 2;
    96b8:	22 e0       	ldi	r18, 0x02	; 2
    96ba:	92 2e       	mov	r9, r18

			case 12:	// IR local communication: 2 or more robots pass information between them in sequence
				switch(demoState) {
					case 0:
						irCommInit();
						irCommRobotsNum = 4;	// total number of robots that exchange data
    96bc:	94 e0       	ldi	r25, 0x04	; 4
    96be:	89 2e       	mov	r8, r25
						irCommRobotId = 3;		// choose the id of the robot (a different id for each robot), from 0 to 254 (255 is reserved)
    96c0:	83 e0       	ldi	r24, 0x03	; 3
    96c2:	78 2e       	mov	r7, r24
									} else {
										irCommSendData(0xFF);
									}
								} else {
									if(i == (unsigned int)(irCommRobotId-1)) {
										demoState = 1;
    96c4:	01 e0       	ldi	r16, 0x01	; 1

	startTime = getTime100MicroSec();

	while(1) {

		currentSelector = getSelector();	// update selector position
    96c6:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <getSelector>
    96ca:	80 93 70 04 	sts	0x0470, r24

		readAccelXYZ();						// update accelerometer values to compute the angle
    96ce:	0e 94 c2 38 	call	0x7184	; 0x7184 <readAccelXYZ>

		computeAngle();
    96d2:	0e 94 2f 37 	call	0x6e5e	; 0x6e5e <computeAngle>
        handleIRRemoteCommands();
    96d6:	0e 94 f5 08 	call	0x11ea	; 0x11ea <handleIRRemoteCommands>
	    handleRFCommands();
    96da:	0e 94 40 03 	call	0x680	; 0x680 <handleRFCommands>
	
  
		
		switch(currentSelector) {
    96de:	80 91 70 04 	lds	r24, 0x0470
    96e2:	8c 30       	cpi	r24, 0x0C	; 12
    96e4:	09 f4       	brne	.+2      	; 0x96e8 <elisa_communication+0xba>
    96e6:	8c c0       	rjmp	.+280    	; 0x9800 <elisa_communication+0x1d2>
    96e8:	8d 30       	cpi	r24, 0x0D	; 13
    96ea:	08 f0       	brcs	.+2      	; 0x96ee <elisa_communication+0xc0>
    96ec:	54 c0       	rjmp	.+168    	; 0x9796 <elisa_communication+0x168>
    96ee:	8b 30       	cpi	r24, 0x0B	; 11
    96f0:	09 f4       	brne	.+2      	; 0x96f4 <elisa_communication+0xc6>
    96f2:	99 c0       	rjmp	.+306    	; 0x9826 <elisa_communication+0x1f8>
					//usart0Transmit(currentOsccal,1);
					break;

		}

			if(currentSelector!=0) {
    96f4:	88 23       	and	r24, r24
    96f6:	09 f0       	breq	.+2      	; 0x96fa <elisa_communication+0xcc>
    96f8:	65 c0       	rjmp	.+202    	; 0x97c4 <elisa_communication+0x196>
			handleMotorsWithSpeedController();  
		}

		if(prevSelector != currentSelector) {	// in case the selector is changed, reset the robot state
    96fa:	18 17       	cp	r17, r24
    96fc:	09 f4       	brne	.+2      	; 0x9700 <elisa_communication+0xd2>
    96fe:	49 c0       	rjmp	.+146    	; 0x9792 <elisa_communication+0x164>
			disableObstacleAvoidance();
    9700:	0e 94 cb 33 	call	0x6796	; 0x6796 <disableObstacleAvoidance>
			disableCliffAvoidance();
    9704:	0e 94 d2 33 	call	0x67a4	; 0x67a4 <disableCliffAvoidance>
			GREEN_LED0_OFF;
    9708:	80 91 0b 01 	lds	r24, 0x010B
    970c:	81 60       	ori	r24, 0x01	; 1
    970e:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED1_OFF;
    9712:	80 91 0b 01 	lds	r24, 0x010B
    9716:	82 60       	ori	r24, 0x02	; 2
    9718:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED2_OFF;
    971c:	80 91 0b 01 	lds	r24, 0x010B
    9720:	84 60       	ori	r24, 0x04	; 4
    9722:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED3_OFF;
    9726:	a3 9a       	sbi	0x14, 3	; 20
			GREEN_LED4_OFF;
    9728:	80 91 0b 01 	lds	r24, 0x010B
    972c:	80 61       	ori	r24, 0x10	; 16
    972e:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED5_OFF;
    9732:	80 91 0b 01 	lds	r24, 0x010B
    9736:	80 62       	ori	r24, 0x20	; 32
    9738:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED6_OFF;
    973c:	80 91 0b 01 	lds	r24, 0x010B
    9740:	80 64       	ori	r24, 0x40	; 64
    9742:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED7_OFF;
    9746:	80 91 0b 01 	lds	r24, 0x010B
    974a:	80 68       	ori	r24, 0x80	; 128
    974c:	80 93 0b 01 	sts	0x010B, r24
			pwm_red = 255;
    9750:	8f ef       	ldi	r24, 0xFF	; 255
    9752:	80 93 08 02 	sts	0x0208, r24
			pwm_green = 255;
    9756:	80 93 09 02 	sts	0x0209, r24
			pwm_blue = 255;
    975a:	80 93 0a 02 	sts	0x020A, r24
			updateRedLed(pwm_red);
    975e:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <updateRedLed>
			updateGreenLed(pwm_green);
    9762:	80 91 09 02 	lds	r24, 0x0209
    9766:	0e 94 34 36 	call	0x6c68	; 0x6c68 <updateGreenLed>
			updateBlueLed(pwm_blue);
    976a:	80 91 0a 02 	lds	r24, 0x020A
    976e:	0e 94 4a 36 	call	0x6c94	; 0x6c94 <updateBlueLed>
			setRightSpeed(0);
    9772:	80 e0       	ldi	r24, 0x00	; 0
    9774:	0e 94 13 18 	call	0x3026	; 0x3026 <setRightSpeed>
			setLeftSpeed(0);
    9778:	80 e0       	ldi	r24, 0x00	; 0
    977a:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <setLeftSpeed>
			rgbState = 0;
    977e:	10 92 38 03 	sts	0x0338, r1
			calibrationWritten = 0;
    9782:	10 92 8d 04 	sts	0x048D, r1
			demoState = 0;
    9786:	10 92 74 04 	sts	0x0474, r1

			irCommState = 0;
    978a:	10 92 f5 04 	sts	0x04F5, r1
    978e:	80 91 70 04 	lds	r24, 0x0470
		}
		prevSelector = currentSelector;
    9792:	18 2f       	mov	r17, r24
    9794:	98 cf       	rjmp	.-208    	; 0x96c6 <elisa_communication+0x98>
        handleIRRemoteCommands();
	    handleRFCommands();
	
  
		
		switch(currentSelector) {
    9796:	8d 30       	cpi	r24, 0x0D	; 13
    9798:	d1 f0       	breq	.+52     	; 0x97ce <elisa_communication+0x1a0>
    979a:	8e 30       	cpi	r24, 0x0E	; 14
    979c:	09 f0       	breq	.+2      	; 0x97a0 <elisa_communication+0x172>
    979e:	aa cf       	rjmp	.-172    	; 0x96f4 <elisa_communication+0xc6>
						break;
				}
				break;
			
			case 14: // Multirobots communication: continuously change current color and make it change also for other robots
				switch(demoState) {
    97a0:	80 91 74 04 	lds	r24, 0x0474
    97a4:	88 23       	and	r24, r24
    97a6:	09 f0       	breq	.+2      	; 0x97aa <elisa_communication+0x17c>
    97a8:	61 c0       	rjmp	.+194    	; 0x986c <elisa_communication+0x23e>
					case 0:
						irCommInit();
    97aa:	0e 94 de 4a 	call	0x95bc	; 0x95bc <irCommInit>
						demoState = 1;
    97ae:	00 93 74 04 	sts	0x0474, r16
						irCommRxByteExpected = 1;
    97b2:	00 93 37 05 	sts	0x0537, r16
						irCommMsgCount = 0;
    97b6:	10 92 0c 05 	sts	0x050C, r1
    97ba:	80 91 70 04 	lds	r24, 0x0470
					//usart0Transmit(currentOsccal,1);
					break;

		}

			if(currentSelector!=0) {
    97be:	88 23       	and	r24, r24
    97c0:	09 f4       	brne	.+2      	; 0x97c4 <elisa_communication+0x196>
    97c2:	9b cf       	rjmp	.-202    	; 0x96fa <elisa_communication+0xcc>
			handleMotorsWithSpeedController();  
    97c4:	0e 94 31 2a 	call	0x5462	; 0x5462 <handleMotorsWithSpeedController>
    97c8:	80 91 70 04 	lds	r24, 0x0470
    97cc:	96 cf       	rjmp	.-212    	; 0x96fa <elisa_communication+0xcc>

				}
				break;

			case 13: // IR local communication: listen and transmit continuously
				switch(demoState) {
    97ce:	80 91 74 04 	lds	r24, 0x0474
    97d2:	81 30       	cpi	r24, 0x01	; 1
    97d4:	09 f4       	brne	.+2      	; 0x97d8 <elisa_communication+0x1aa>
    97d6:	d4 c0       	rjmp	.+424    	; 0x9980 <elisa_communication+0x352>
    97d8:	81 30       	cpi	r24, 0x01	; 1
    97da:	08 f0       	brcs	.+2      	; 0x97de <elisa_communication+0x1b0>
    97dc:	74 c0       	rjmp	.+232    	; 0x98c6 <elisa_communication+0x298>
					case 0:
						irCommInit();
    97de:	0e 94 de 4a 	call	0x95bc	; 0x95bc <irCommInit>
						enableObstacleAvoidance();
    97e2:	0e 94 c7 33 	call	0x678e	; 0x678e <enableObstacleAvoidance>
						setLeftSpeed(10);
    97e6:	8a e0       	ldi	r24, 0x0A	; 10
    97e8:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <setLeftSpeed>
						setRightSpeed(10);
    97ec:	8a e0       	ldi	r24, 0x0A	; 10
    97ee:	0e 94 13 18 	call	0x3026	; 0x3026 <setRightSpeed>
						demoState = 1;
    97f2:	00 93 74 04 	sts	0x0474, r16
    97f6:	c0 e0       	ldi	r28, 0x00	; 0
    97f8:	d0 e0       	ldi	r29, 0x00	; 0
    97fa:	80 91 70 04 	lds	r24, 0x0470
    97fe:	7a cf       	rjmp	.-268    	; 0x96f4 <elisa_communication+0xc6>
						break;
				}
				break;

			case 12:	// IR local communication: 2 or more robots pass information between them in sequence
				switch(demoState) {
    9800:	80 91 74 04 	lds	r24, 0x0474
    9804:	81 30       	cpi	r24, 0x01	; 1
    9806:	09 f4       	brne	.+2      	; 0x980a <elisa_communication+0x1dc>
    9808:	eb c0       	rjmp	.+470    	; 0x99e0 <elisa_communication+0x3b2>
    980a:	81 30       	cpi	r24, 0x01	; 1
    980c:	08 f0       	brcs	.+2      	; 0x9810 <elisa_communication+0x1e2>
    980e:	7d c0       	rjmp	.+250    	; 0x990a <elisa_communication+0x2dc>
					case 0:
						irCommInit();
    9810:	0e 94 de 4a 	call	0x95bc	; 0x95bc <irCommInit>
						irCommRobotsNum = 4;	// total number of robots that exchange data
    9814:	80 92 0a 05 	sts	0x050A, r8
						irCommRobotId = 3;		// choose the id of the robot (a different id for each robot), from 0 to 254 (255 is reserved)
    9818:	70 92 09 05 	sts	0x0509, r7
							updateBlueLed(255);
							updateRedLed(255);
							updateGreenLed(128);
							demoState = 1;
						} else {
							demoState = 2;
    981c:	90 92 74 04 	sts	0x0474, r9
    9820:	80 91 70 04 	lds	r24, 0x0470
    9824:	67 cf       	rjmp	.-306    	; 0x96f4 <elisa_communication+0xc6>
    


			case 11: 	// sync-react demo using the IR local communication (2 robots only): the robots move around with obstacle avoidance
						// enabled and when they detect each other they try to align towards the same direction rotating in place
				switch(demoState) {
    9826:	80 91 74 04 	lds	r24, 0x0474
    982a:	82 30       	cpi	r24, 0x02	; 2
    982c:	09 f4       	brne	.+2      	; 0x9830 <elisa_communication+0x202>
    982e:	0b c1       	rjmp	.+534    	; 0x9a46 <elisa_communication+0x418>
    9830:	83 30       	cpi	r24, 0x03	; 3
    9832:	70 f5       	brcc	.+92     	; 0x9890 <elisa_communication+0x262>
    9834:	88 23       	and	r24, r24
    9836:	09 f4       	brne	.+2      	; 0x983a <elisa_communication+0x20c>
    9838:	2b c1       	rjmp	.+598    	; 0x9a90 <elisa_communication+0x462>
    983a:	81 30       	cpi	r24, 0x01	; 1
    983c:	19 f6       	brne	.-122    	; 0x97c4 <elisa_communication+0x196>
						irCommInit();
						demoState = 1;
						break;

					case 1:						
						enableObstacleAvoidance();
    983e:	0e 94 c7 33 	call	0x678e	; 0x678e <enableObstacleAvoidance>
						setLeftSpeed(10);
    9842:	8a e0       	ldi	r24, 0x0A	; 10
    9844:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <setLeftSpeed>
						setRightSpeed(10);
    9848:	8a e0       	ldi	r24, 0x0A	; 10

					case 4:	// rotate left
						irCommTasks();
						if(theta >= targetAngle) {
							setLeftSpeed(0);
							setRightSpeed(0);
    984a:	0e 94 13 18 	call	0x3026	; 0x3026 <setRightSpeed>
							demoState = 2;
    984e:	90 92 74 04 	sts	0x0474, r9
							demoStartTime = getTime100MicroSec();
    9852:	0e 94 04 10 	call	0x2008	; 0x2008 <getTime100MicroSec>
    9856:	60 93 78 04 	sts	0x0478, r22
    985a:	70 93 79 04 	sts	0x0479, r23
    985e:	80 93 7a 04 	sts	0x047A, r24
    9862:	90 93 7b 04 	sts	0x047B, r25
    9866:	80 91 70 04 	lds	r24, 0x0470
    986a:	44 cf       	rjmp	.-376    	; 0x96f4 <elisa_communication+0xc6>
						break;
				}
				break;
			
			case 14: // Multirobots communication: continuously change current color and make it change also for other robots
				switch(demoState) {
    986c:	81 30       	cpi	r24, 0x01	; 1
    986e:	09 f0       	breq	.+2      	; 0x9872 <elisa_communication+0x244>
    9870:	a9 cf       	rjmp	.-174    	; 0x97c4 <elisa_communication+0x196>
						irCommRxByteExpected = 1;
						irCommMsgCount = 0;
						break;

					case 1:	
						irCommTasks();
    9872:	0e 94 26 40 	call	0x804c	; 0x804c <irCommTasks>
						if(irCommDataSent()==1) {	
    9876:	0e 94 36 3f 	call	0x7e6c	; 0x7e6c <irCommDataSent>
    987a:	81 30       	cpi	r24, 0x01	; 1
    987c:	09 f4       	brne	.+2      	; 0x9880 <elisa_communication+0x252>
    987e:	6e c1       	rjmp	.+732    	; 0x9b5c <elisa_communication+0x52e>
							irCommSendData(irCommRxByteExpected);					
						}
						if(irCommDataAvailable()==1) {							
    9880:	0e 94 3e 3f 	call	0x7e7c	; 0x7e7c <irCommDataAvailable>
    9884:	81 30       	cpi	r24, 0x01	; 1
    9886:	09 f4       	brne	.+2      	; 0x988a <elisa_communication+0x25c>
    9888:	3b c1       	rjmp	.+630    	; 0x9b00 <elisa_communication+0x4d2>
    988a:	80 91 70 04 	lds	r24, 0x0470
    988e:	32 cf       	rjmp	.-412    	; 0x96f4 <elisa_communication+0xc6>
    


			case 11: 	// sync-react demo using the IR local communication (2 robots only): the robots move around with obstacle avoidance
						// enabled and when they detect each other they try to align towards the same direction rotating in place
				switch(demoState) {
    9890:	83 30       	cpi	r24, 0x03	; 3
    9892:	09 f4       	brne	.+2      	; 0x9896 <elisa_communication+0x268>
    9894:	04 c1       	rjmp	.+520    	; 0x9a9e <elisa_communication+0x470>
    9896:	84 30       	cpi	r24, 0x04	; 4
    9898:	09 f0       	breq	.+2      	; 0x989c <elisa_communication+0x26e>
    989a:	94 cf       	rjmp	.-216    	; 0x97c4 <elisa_communication+0x196>
							demoStartTime = getTime100MicroSec();
						}
						break;

					case 4:	// rotate left
						irCommTasks();
    989c:	0e 94 26 40 	call	0x804c	; 0x804c <irCommTasks>
						if(theta >= targetAngle) {
    98a0:	c6 01       	movw	r24, r12
    98a2:	b5 01       	movw	r22, r10
    98a4:	20 91 97 04 	lds	r18, 0x0497
    98a8:	30 91 98 04 	lds	r19, 0x0498
    98ac:	40 91 99 04 	lds	r20, 0x0499
    98b0:	50 91 9a 04 	lds	r21, 0x049A
    98b4:	0e 94 43 55 	call	0xaa86	; 0xaa86 <__cmpsf2>
    98b8:	18 16       	cp	r1, r24
    98ba:	3c f3       	brlt	.-50     	; 0x988a <elisa_communication+0x25c>
							setLeftSpeed(0);
    98bc:	80 e0       	ldi	r24, 0x00	; 0
    98be:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <setLeftSpeed>
							setRightSpeed(0);
    98c2:	80 e0       	ldi	r24, 0x00	; 0
    98c4:	c2 cf       	rjmp	.-124    	; 0x984a <elisa_communication+0x21c>

				}
				break;

			case 13: // IR local communication: listen and transmit continuously
				switch(demoState) {
    98c6:	82 30       	cpi	r24, 0x02	; 2
    98c8:	09 f0       	breq	.+2      	; 0x98cc <elisa_communication+0x29e>
    98ca:	7c cf       	rjmp	.-264    	; 0x97c4 <elisa_communication+0x196>
						irCommSendData(irCommRxByteExpected);													
						demoState = 2;
						break;

					case 2:
						irCommTasks();
    98cc:	0e 94 26 40 	call	0x804c	; 0x804c <irCommTasks>
						if(irCommDataSent()==1) {							
    98d0:	0e 94 36 3f 	call	0x7e6c	; 0x7e6c <irCommDataSent>
    98d4:	81 30       	cpi	r24, 0x01	; 1
    98d6:	09 f4       	brne	.+2      	; 0x98da <elisa_communication+0x2ac>
    98d8:	f7 c0       	rjmp	.+494    	; 0x9ac8 <elisa_communication+0x49a>
								irCommRxByteExpected++;
							} else {
								irCommRxByteExpected = 0;
							}
						}
						if(irCommDataAvailable()==1) {
    98da:	0e 94 3e 3f 	call	0x7e7c	; 0x7e7c <irCommDataAvailable>
    98de:	81 30       	cpi	r24, 0x01	; 1
    98e0:	a1 f6       	brne	.-88     	; 0x988a <elisa_communication+0x25c>
							irCommReadData();
    98e2:	0e 94 41 3f 	call	0x7e82	; 0x7e82 <irCommReadData>
							if(i<7) {
    98e6:	c7 30       	cpi	r28, 0x07	; 7
    98e8:	d1 05       	cpc	r29, r1
    98ea:	08 f4       	brcc	.+2      	; 0x98ee <elisa_communication+0x2c0>
    98ec:	d6 c1       	rjmp	.+940    	; 0x9c9a <elisa_communication+0x66c>
							} else {
								i = 0;
							}
							switch(i) {
								case 0: 
									updateRedLed(255);
    98ee:	8f ef       	ldi	r24, 0xFF	; 255
    98f0:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <updateRedLed>
									updateGreenLed(255);
    98f4:	8f ef       	ldi	r24, 0xFF	; 255
    98f6:	0e 94 34 36 	call	0x6c68	; 0x6c68 <updateGreenLed>
									updateBlueLed(255);
    98fa:	8f ef       	ldi	r24, 0xFF	; 255
    98fc:	0e 94 4a 36 	call	0x6c94	; 0x6c94 <updateBlueLed>
    9900:	c0 e0       	ldi	r28, 0x00	; 0
    9902:	d0 e0       	ldi	r29, 0x00	; 0
    9904:	80 91 70 04 	lds	r24, 0x0470
    9908:	f5 ce       	rjmp	.-534    	; 0x96f4 <elisa_communication+0xc6>
						break;
				}
				break;

			case 12:	// IR local communication: 2 or more robots pass information between them in sequence
				switch(demoState) {
    990a:	82 30       	cpi	r24, 0x02	; 2
    990c:	09 f4       	brne	.+2      	; 0x9910 <elisa_communication+0x2e2>
    990e:	41 c0       	rjmp	.+130    	; 0x9992 <elisa_communication+0x364>
    9910:	83 30       	cpi	r24, 0x03	; 3
    9912:	09 f0       	breq	.+2      	; 0x9916 <elisa_communication+0x2e8>
    9914:	57 cf       	rjmp	.-338    	; 0x97c4 <elisa_communication+0x196>
						break;

					case 3:	// led is on
							// transmission: send 0xFF untill the previous robot is turned off
							// reception: I know that it is turned off when I receive the previous robot id 
						irCommTasks();
    9916:	0e 94 26 40 	call	0x804c	; 0x804c <irCommTasks>
						if(irCommDataSent()==1) {
    991a:	0e 94 36 3f 	call	0x7e6c	; 0x7e6c <irCommDataSent>
    991e:	81 30       	cpi	r24, 0x01	; 1
    9920:	09 f0       	breq	.+2      	; 0x9924 <elisa_communication+0x2f6>
    9922:	b3 cf       	rjmp	.-154    	; 0x988a <elisa_communication+0x25c>
							if(irCommDataAvailable()==1) {
    9924:	0e 94 3e 3f 	call	0x7e7c	; 0x7e7c <irCommDataAvailable>
    9928:	98 2f       	mov	r25, r24
    992a:	81 30       	cpi	r24, 0x01	; 1
    992c:	09 f0       	breq	.+2      	; 0x9930 <elisa_communication+0x302>
    992e:	ad cf       	rjmp	.-166    	; 0x988a <elisa_communication+0x25c>
								if(irCommLedToggle==0) {
    9930:	80 91 0b 05 	lds	r24, 0x050B
    9934:	88 23       	and	r24, r24
    9936:	09 f0       	breq	.+2      	; 0x993a <elisa_communication+0x30c>
    9938:	73 c2       	rjmp	.+1254   	; 0x9e20 <elisa_communication+0x7f2>
									irCommLedToggle = 1;
    993a:	90 93 0b 05 	sts	0x050B, r25
									updateBlueLed(255);
    993e:	8f ef       	ldi	r24, 0xFF	; 255
    9940:	0e 94 4a 36 	call	0x6c94	; 0x6c94 <updateBlueLed>
									updateRedLed(255);
    9944:	8f ef       	ldi	r24, 0xFF	; 255
    9946:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <updateRedLed>
									updateGreenLed(128);
    994a:	80 e8       	ldi	r24, 0x80	; 128
    994c:	0e 94 34 36 	call	0x6c68	; 0x6c68 <updateGreenLed>
									irCommLedToggle = 0;
									updateBlueLed(255);
									updateRedLed(255);
									updateGreenLed(235);
								}
								i = irCommReadData();
    9950:	0e 94 41 3f 	call	0x7e82	; 0x7e82 <irCommReadData>
    9954:	e8 2e       	mov	r14, r24
    9956:	ff 24       	eor	r15, r15
								if(irCommRobotId == 0) {
    9958:	80 91 09 05 	lds	r24, 0x0509
    995c:	88 23       	and	r24, r24
    995e:	11 f4       	brne	.+4      	; 0x9964 <elisa_communication+0x336>
									if(i == (unsigned int)(irCommRobotsNum-1)) {
    9960:	80 91 0a 05 	lds	r24, 0x050A
										demoState = 1;
									} else {
										irCommSendData(0xFF);
									}
								} else {
									if(i == (unsigned int)(irCommRobotId-1)) {
    9964:	c8 2f       	mov	r28, r24
    9966:	d0 e0       	ldi	r29, 0x00	; 0
    9968:	21 97       	sbiw	r28, 0x01	; 1
    996a:	ce 15       	cp	r28, r14
    996c:	df 05       	cpc	r29, r15
    996e:	09 f4       	brne	.+2      	; 0x9972 <elisa_communication+0x344>
    9970:	8a c0       	rjmp	.+276    	; 0x9a86 <elisa_communication+0x458>
										demoState = 1;
									} else {
										irCommSendData(0xFF);
    9972:	8f ef       	ldi	r24, 0xFF	; 255
    9974:	0e 94 2d 3f 	call	0x7e5a	; 0x7e5a <irCommSendData>
    9978:	e7 01       	movw	r28, r14
    997a:	80 91 70 04 	lds	r24, 0x0470
    997e:	ba ce       	rjmp	.-652    	; 0x96f4 <elisa_communication+0xc6>
						demoState = 1;
						i = 0;
						break;

					case 1:						
						irCommSendData(irCommRxByteExpected);													
    9980:	80 91 37 05 	lds	r24, 0x0537
    9984:	0e 94 2d 3f 	call	0x7e5a	; 0x7e5a <irCommSendData>
						demoState = 2;
    9988:	90 92 74 04 	sts	0x0474, r9
    998c:	80 91 70 04 	lds	r24, 0x0470
    9990:	b1 ce       	rjmp	.-670    	; 0x96f4 <elisa_communication+0xc6>
						break;

					case 2: // led is off
							// transmission: continuously send my robot id to tell the next robot I turned off the led
							// reception: listen for my robot id and then turn on the led				
						irCommTasks();
    9992:	0e 94 26 40 	call	0x804c	; 0x804c <irCommTasks>
						if(irCommDataSent()==1) {
    9996:	0e 94 36 3f 	call	0x7e6c	; 0x7e6c <irCommDataSent>
    999a:	81 30       	cpi	r24, 0x01	; 1
    999c:	09 f4       	brne	.+2      	; 0x99a0 <elisa_communication+0x372>
    999e:	e3 c0       	rjmp	.+454    	; 0x9b66 <elisa_communication+0x538>
							irCommSendData(irCommRobotId);							
						}
						if(irCommDataAvailable()==1) {
    99a0:	0e 94 3e 3f 	call	0x7e7c	; 0x7e7c <irCommDataAvailable>
    99a4:	98 2f       	mov	r25, r24
    99a6:	81 30       	cpi	r24, 0x01	; 1
    99a8:	09 f0       	breq	.+2      	; 0x99ac <elisa_communication+0x37e>
    99aa:	6f cf       	rjmp	.-290    	; 0x988a <elisa_communication+0x25c>
							if(irCommLedToggle==0) {
    99ac:	80 91 0b 05 	lds	r24, 0x050B
    99b0:	88 23       	and	r24, r24
    99b2:	09 f0       	breq	.+2      	; 0x99b6 <elisa_communication+0x388>
    99b4:	e9 c0       	rjmp	.+466    	; 0x9b88 <elisa_communication+0x55a>
								irCommLedToggle = 1;
    99b6:	90 93 0b 05 	sts	0x050B, r25
								updateRedLed(255);
    99ba:	8f ef       	ldi	r24, 0xFF	; 255
    99bc:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <updateRedLed>
							} else {
								irCommLedToggle = 0;
								updateRedLed(235);
							}
							i = irCommReadData();
    99c0:	0e 94 41 3f 	call	0x7e82	; 0x7e82 <irCommReadData>
    99c4:	28 2f       	mov	r18, r24
    99c6:	30 e0       	ldi	r19, 0x00	; 0
							if(i == irCommRobotId) {
    99c8:	80 91 09 05 	lds	r24, 0x0509
    99cc:	c8 2f       	mov	r28, r24
    99ce:	d0 e0       	ldi	r29, 0x00	; 0
    99d0:	c2 17       	cp	r28, r18
    99d2:	d3 07       	cpc	r29, r19
    99d4:	09 f4       	brne	.+2      	; 0x99d8 <elisa_communication+0x3aa>
    99d6:	e4 c1       	rjmp	.+968    	; 0x9da0 <elisa_communication+0x772>
    99d8:	e9 01       	movw	r28, r18
    99da:	80 91 70 04 	lds	r24, 0x0470
    99de:	8a ce       	rjmp	.-748    	; 0x96f4 <elisa_communication+0xc6>

					case 1: // led is on
							// transmission: continuously send the next robot id to tell him to turn on the led
							// reception: listen for 0xFF and then turn off the led; when I receive 0xFF it means the next robot has
							// received its id, thus it has turned on its led
						irCommTasks();
    99e0:	0e 94 26 40 	call	0x804c	; 0x804c <irCommTasks>
						if(irCommDataSent()==1) {
    99e4:	0e 94 36 3f 	call	0x7e6c	; 0x7e6c <irCommDataSent>
    99e8:	81 30       	cpi	r24, 0x01	; 1
    99ea:	09 f4       	brne	.+2      	; 0x99ee <elisa_communication+0x3c0>
    99ec:	78 c0       	rjmp	.+240    	; 0x9ade <elisa_communication+0x4b0>
								irCommSendData(irCommRobotId+1);
							} else {
								irCommSendData(0x00);
							}							
						}
						if(irCommDataAvailable()==1) {
    99ee:	0e 94 3e 3f 	call	0x7e7c	; 0x7e7c <irCommDataAvailable>
    99f2:	98 2f       	mov	r25, r24
    99f4:	81 30       	cpi	r24, 0x01	; 1
    99f6:	09 f0       	breq	.+2      	; 0x99fa <elisa_communication+0x3cc>
    99f8:	48 cf       	rjmp	.-368    	; 0x988a <elisa_communication+0x25c>
							if(irCommLedToggle==0) {
    99fa:	80 91 0b 05 	lds	r24, 0x050B
    99fe:	88 23       	and	r24, r24
    9a00:	09 f0       	breq	.+2      	; 0x9a04 <elisa_communication+0x3d6>
    9a02:	b6 c0       	rjmp	.+364    	; 0x9b70 <elisa_communication+0x542>
								irCommLedToggle = 1;
    9a04:	90 93 0b 05 	sts	0x050B, r25
								updateBlueLed(255);
    9a08:	8f ef       	ldi	r24, 0xFF	; 255
    9a0a:	0e 94 4a 36 	call	0x6c94	; 0x6c94 <updateBlueLed>
								updateRedLed(255);
    9a0e:	8f ef       	ldi	r24, 0xFF	; 255
    9a10:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <updateRedLed>
								updateGreenLed(128);
    9a14:	80 e8       	ldi	r24, 0x80	; 128
    9a16:	0e 94 34 36 	call	0x6c68	; 0x6c68 <updateGreenLed>
								irCommLedToggle = 0;
								updateBlueLed(255);
								updateRedLed(255);
								updateGreenLed(235);
							}
							i = irCommReadData();
    9a1a:	0e 94 41 3f 	call	0x7e82	; 0x7e82 <irCommReadData>
    9a1e:	c8 2f       	mov	r28, r24
    9a20:	d0 e0       	ldi	r29, 0x00	; 0
							if(i == 0xFF) {
    9a22:	cf 3f       	cpi	r28, 0xFF	; 255
    9a24:	d1 05       	cpc	r29, r1
    9a26:	09 f0       	breq	.+2      	; 0x9a2a <elisa_communication+0x3fc>
    9a28:	30 cf       	rjmp	.-416    	; 0x988a <elisa_communication+0x25c>
								demoState = 2;
    9a2a:	90 92 74 04 	sts	0x0474, r9
								updateBlueLed(255);		
    9a2e:	8f ef       	ldi	r24, 0xFF	; 255
    9a30:	0e 94 4a 36 	call	0x6c94	; 0x6c94 <updateBlueLed>
								updateRedLed(255);
    9a34:	8f ef       	ldi	r24, 0xFF	; 255
    9a36:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <updateRedLed>
								updateGreenLed(255);		
    9a3a:	8f ef       	ldi	r24, 0xFF	; 255
    9a3c:	0e 94 34 36 	call	0x6c68	; 0x6c68 <updateGreenLed>
    9a40:	80 91 70 04 	lds	r24, 0x0470
    9a44:	57 ce       	rjmp	.-850    	; 0x96f4 <elisa_communication+0xc6>
						demoState = 2;
						demoStartTime = getTime100MicroSec();
						break;

					case 2:
						irCommTasks();
    9a46:	0e 94 26 40 	call	0x804c	; 0x804c <irCommTasks>
						if(irCommDataSent()==1) {
    9a4a:	0e 94 36 3f 	call	0x7e6c	; 0x7e6c <irCommDataSent>
    9a4e:	81 30       	cpi	r24, 0x01	; 1
    9a50:	09 f4       	brne	.+2      	; 0x9a54 <elisa_communication+0x426>
    9a52:	07 c1       	rjmp	.+526    	; 0x9c62 <elisa_communication+0x634>
							angleDegEncode = (unsigned char)((float)angleDeg*0.7084);
							irCommSendData(angleDegEncode);
						}
						if(irCommDataAvailable()==1) {
    9a54:	0e 94 3e 3f 	call	0x7e7c	; 0x7e7c <irCommDataAvailable>
    9a58:	81 30       	cpi	r24, 0x01	; 1
    9a5a:	09 f4       	brne	.+2      	; 0x9a5e <elisa_communication+0x430>
    9a5c:	9f c0       	rjmp	.+318    	; 0x9b9c <elisa_communication+0x56e>
									demoState = 3;
								}								
							}

						}
						if((getTime100MicroSec()-demoStartTime) >= (PAUSE_5_SEC)) {
    9a5e:	0e 94 04 10 	call	0x2008	; 0x2008 <getTime100MicroSec>
    9a62:	20 91 78 04 	lds	r18, 0x0478
    9a66:	30 91 79 04 	lds	r19, 0x0479
    9a6a:	40 91 7a 04 	lds	r20, 0x047A
    9a6e:	50 91 7b 04 	lds	r21, 0x047B
    9a72:	62 1b       	sub	r22, r18
    9a74:	73 0b       	sbc	r23, r19
    9a76:	84 0b       	sbc	r24, r20
    9a78:	95 0b       	sbc	r25, r21
    9a7a:	6d 5c       	subi	r22, 0xCD	; 205
    9a7c:	7b 4b       	sbci	r23, 0xBB	; 187
    9a7e:	80 40       	sbci	r24, 0x00	; 0
    9a80:	90 40       	sbci	r25, 0x00	; 0
    9a82:	08 f4       	brcc	.+2      	; 0x9a86 <elisa_communication+0x458>
    9a84:	02 cf       	rjmp	.-508    	; 0x988a <elisa_communication+0x25c>
									} else {
										irCommSendData(0xFF);
									}
								} else {
									if(i == (unsigned int)(irCommRobotId-1)) {
										demoState = 1;
    9a86:	00 93 74 04 	sts	0x0474, r16
    9a8a:	80 91 70 04 	lds	r24, 0x0470
    9a8e:	32 ce       	rjmp	.-924    	; 0x96f4 <elisa_communication+0xc6>

			case 11: 	// sync-react demo using the IR local communication (2 robots only): the robots move around with obstacle avoidance
						// enabled and when they detect each other they try to align towards the same direction rotating in place
				switch(demoState) {
					case 0:
						irCommInit();
    9a90:	0e 94 de 4a 	call	0x95bc	; 0x95bc <irCommInit>
						demoState = 1;
    9a94:	00 93 74 04 	sts	0x0474, r16
    9a98:	80 91 70 04 	lds	r24, 0x0470
    9a9c:	2b ce       	rjmp	.-938    	; 0x96f4 <elisa_communication+0xc6>
							demoState = 1;
						}
						break;

					case 3:	// rotate right
						irCommTasks();
    9a9e:	0e 94 26 40 	call	0x804c	; 0x804c <irCommTasks>
						if(theta <= targetAngle) {
    9aa2:	c6 01       	movw	r24, r12
    9aa4:	b5 01       	movw	r22, r10
    9aa6:	20 91 97 04 	lds	r18, 0x0497
    9aaa:	30 91 98 04 	lds	r19, 0x0498
    9aae:	40 91 99 04 	lds	r20, 0x0499
    9ab2:	50 91 9a 04 	lds	r21, 0x049A
    9ab6:	0e 94 f3 56 	call	0xade6	; 0xade6 <__gesf2>
    9aba:	87 fd       	sbrc	r24, 7
    9abc:	e6 ce       	rjmp	.-564    	; 0x988a <elisa_communication+0x25c>
						break;

					case 4:	// rotate left
						irCommTasks();
						if(theta >= targetAngle) {
							setLeftSpeed(0);
    9abe:	80 e0       	ldi	r24, 0x00	; 0
    9ac0:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <setLeftSpeed>
							setRightSpeed(0);
    9ac4:	80 e0       	ldi	r24, 0x00	; 0
    9ac6:	c1 ce       	rjmp	.-638    	; 0x984a <elisa_communication+0x21c>
						break;

					case 2:
						irCommTasks();
						if(irCommDataSent()==1) {							
							demoState = 1;
    9ac8:	80 93 74 04 	sts	0x0474, r24
							if(irCommRxByteExpected<255) {
    9acc:	80 91 37 05 	lds	r24, 0x0537
    9ad0:	8f 3f       	cpi	r24, 0xFF	; 255
    9ad2:	09 f4       	brne	.+2      	; 0x9ad6 <elisa_communication+0x4a8>
    9ad4:	df c0       	rjmp	.+446    	; 0x9c94 <elisa_communication+0x666>
								irCommRxByteExpected++;
    9ad6:	8f 5f       	subi	r24, 0xFF	; 255
    9ad8:	80 93 37 05 	sts	0x0537, r24
    9adc:	fe ce       	rjmp	.-516    	; 0x98da <elisa_communication+0x2ac>
							// transmission: continuously send the next robot id to tell him to turn on the led
							// reception: listen for 0xFF and then turn off the led; when I receive 0xFF it means the next robot has
							// received its id, thus it has turned on its led
						irCommTasks();
						if(irCommDataSent()==1) {
							if(irCommRobotId < (irCommRobotsNum-1)) {
    9ade:	40 91 09 05 	lds	r20, 0x0509
    9ae2:	24 2f       	mov	r18, r20
    9ae4:	30 e0       	ldi	r19, 0x00	; 0
    9ae6:	80 91 0a 05 	lds	r24, 0x050A
    9aea:	90 e0       	ldi	r25, 0x00	; 0
    9aec:	01 97       	sbiw	r24, 0x01	; 1
    9aee:	28 17       	cp	r18, r24
    9af0:	39 07       	cpc	r19, r25
    9af2:	0c f0       	brlt	.+2      	; 0x9af6 <elisa_communication+0x4c8>
    9af4:	4f c0       	rjmp	.+158    	; 0x9b94 <elisa_communication+0x566>
								irCommSendData(irCommRobotId+1);
    9af6:	84 2f       	mov	r24, r20
    9af8:	8f 5f       	subi	r24, 0xFF	; 255
    9afa:	0e 94 2d 3f 	call	0x7e5a	; 0x7e5a <irCommSendData>
    9afe:	77 cf       	rjmp	.-274    	; 0x99ee <elisa_communication+0x3c0>
						irCommTasks();
						if(irCommDataSent()==1) {	
							irCommSendData(irCommRxByteExpected);					
						}
						if(irCommDataAvailable()==1) {							
							i = irCommReadData();
    9b00:	0e 94 41 3f 	call	0x7e82	; 0x7e82 <irCommReadData>
    9b04:	58 2f       	mov	r21, r24
    9b06:	c8 2f       	mov	r28, r24
    9b08:	d0 e0       	ldi	r29, 0x00	; 0
							if(i == irCommRxByteExpected) {
    9b0a:	40 91 37 05 	lds	r20, 0x0537
    9b0e:	24 2f       	mov	r18, r20
    9b10:	30 e0       	ldi	r19, 0x00	; 0
    9b12:	2c 17       	cp	r18, r28
    9b14:	3d 07       	cpc	r19, r29
    9b16:	09 f4       	brne	.+2      	; 0x9b1a <elisa_communication+0x4ec>
    9b18:	dd c0       	rjmp	.+442    	; 0x9cd4 <elisa_communication+0x6a6>
									} else {
										irCommRxByteExpected = 0;
									}
								}
							} else {
								if(irCommRxByteExpected==7) {
    9b1a:	47 30       	cpi	r20, 0x07	; 7
    9b1c:	09 f4       	brne	.+2      	; 0x9b20 <elisa_communication+0x4f2>
    9b1e:	2e c1       	rjmp	.+604    	; 0x9d7c <elisa_communication+0x74e>
									if(i==0) {
										irCommRxByteExpected = 0;
										irCommMsgCount = 0;
									}
								} else {
									if(irCommRxByteExpected==(i-1)) {
    9b20:	ce 01       	movw	r24, r28
    9b22:	01 97       	sbiw	r24, 0x01	; 1
    9b24:	28 17       	cp	r18, r24
    9b26:	39 07       	cpc	r19, r25
    9b28:	09 f4       	brne	.+2      	; 0x9b2c <elisa_communication+0x4fe>
    9b2a:	52 c1       	rjmp	.+676    	; 0x9dd0 <elisa_communication+0x7a2>
										irCommRxByteExpected = i;
										irCommMsgCount = 0;
									}
								}
							}
							switch(irCommRxByteExpected) {
    9b2c:	43 30       	cpi	r20, 0x03	; 3
    9b2e:	09 f4       	brne	.+2      	; 0x9b32 <elisa_communication+0x504>
    9b30:	e6 c0       	rjmp	.+460    	; 0x9cfe <elisa_communication+0x6d0>
    9b32:	44 30       	cpi	r20, 0x04	; 4
    9b34:	08 f0       	brcs	.+2      	; 0x9b38 <elisa_communication+0x50a>
    9b36:	ef c0       	rjmp	.+478    	; 0x9d16 <elisa_communication+0x6e8>
    9b38:	41 30       	cpi	r20, 0x01	; 1
    9b3a:	09 f4       	brne	.+2      	; 0x9b3e <elisa_communication+0x510>
    9b3c:	69 c1       	rjmp	.+722    	; 0x9e10 <elisa_communication+0x7e2>
    9b3e:	42 30       	cpi	r20, 0x02	; 2
    9b40:	08 f4       	brcc	.+2      	; 0x9b44 <elisa_communication+0x516>
    9b42:	22 c1       	rjmp	.+580    	; 0x9d88 <elisa_communication+0x75a>
									updateRedLed(235);
									updateGreenLed(255);
									updateBlueLed(255);
									break;	
								case 2: 
									updateRedLed(255);
    9b44:	8f ef       	ldi	r24, 0xFF	; 255
									updateRedLed(255);
									updateGreenLed(255);
									updateBlueLed(235);
									break;
								case 4: 
									updateRedLed(235);
    9b46:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <updateRedLed>
									updateGreenLed(235);
    9b4a:	8b ee       	ldi	r24, 0xEB	; 235
    9b4c:	0e 94 34 36 	call	0x6c68	; 0x6c68 <updateGreenLed>
									updateBlueLed(255);
    9b50:	8f ef       	ldi	r24, 0xFF	; 255
    9b52:	0e 94 4a 36 	call	0x6c94	; 0x6c94 <updateBlueLed>
    9b56:	80 91 70 04 	lds	r24, 0x0470
    9b5a:	cc cd       	rjmp	.-1128   	; 0x96f4 <elisa_communication+0xc6>
						break;

					case 1:	
						irCommTasks();
						if(irCommDataSent()==1) {	
							irCommSendData(irCommRxByteExpected);					
    9b5c:	80 91 37 05 	lds	r24, 0x0537
    9b60:	0e 94 2d 3f 	call	0x7e5a	; 0x7e5a <irCommSendData>
    9b64:	8d ce       	rjmp	.-742    	; 0x9880 <elisa_communication+0x252>
					case 2: // led is off
							// transmission: continuously send my robot id to tell the next robot I turned off the led
							// reception: listen for my robot id and then turn on the led				
						irCommTasks();
						if(irCommDataSent()==1) {
							irCommSendData(irCommRobotId);							
    9b66:	80 91 09 05 	lds	r24, 0x0509
    9b6a:	0e 94 2d 3f 	call	0x7e5a	; 0x7e5a <irCommSendData>
    9b6e:	18 cf       	rjmp	.-464    	; 0x99a0 <elisa_communication+0x372>
								irCommLedToggle = 1;
								updateBlueLed(255);
								updateRedLed(255);
								updateGreenLed(128);
							} else {
								irCommLedToggle = 0;
    9b70:	10 92 0b 05 	sts	0x050B, r1
								updateBlueLed(255);
    9b74:	8f ef       	ldi	r24, 0xFF	; 255
    9b76:	0e 94 4a 36 	call	0x6c94	; 0x6c94 <updateBlueLed>
								updateRedLed(255);
    9b7a:	8f ef       	ldi	r24, 0xFF	; 255
    9b7c:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <updateRedLed>
								updateGreenLed(235);
    9b80:	8b ee       	ldi	r24, 0xEB	; 235
    9b82:	0e 94 34 36 	call	0x6c68	; 0x6c68 <updateGreenLed>
    9b86:	49 cf       	rjmp	.-366    	; 0x9a1a <elisa_communication+0x3ec>
						if(irCommDataAvailable()==1) {
							if(irCommLedToggle==0) {
								irCommLedToggle = 1;
								updateRedLed(255);
							} else {
								irCommLedToggle = 0;
    9b88:	10 92 0b 05 	sts	0x050B, r1
								updateRedLed(235);
    9b8c:	8b ee       	ldi	r24, 0xEB	; 235
    9b8e:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <updateRedLed>
    9b92:	16 cf       	rjmp	.-468    	; 0x99c0 <elisa_communication+0x392>
						irCommTasks();
						if(irCommDataSent()==1) {
							if(irCommRobotId < (irCommRobotsNum-1)) {
								irCommSendData(irCommRobotId+1);
							} else {
								irCommSendData(0x00);
    9b94:	80 e0       	ldi	r24, 0x00	; 0
    9b96:	0e 94 2d 3f 	call	0x7e5a	; 0x7e5a <irCommSendData>
    9b9a:	29 cf       	rjmp	.-430    	; 0x99ee <elisa_communication+0x3c0>
						if(irCommDataSent()==1) {
							angleDegEncode = (unsigned char)((float)angleDeg*0.7084);
							irCommSendData(angleDegEncode);
						}
						if(irCommDataAvailable()==1) {
							demoStartTime = getTime100MicroSec();
    9b9c:	0e 94 04 10 	call	0x2008	; 0x2008 <getTime100MicroSec>
    9ba0:	60 93 78 04 	sts	0x0478, r22
    9ba4:	70 93 79 04 	sts	0x0479, r23
    9ba8:	80 93 7a 04 	sts	0x047A, r24
    9bac:	90 93 7b 04 	sts	0x047B, r25
							irCommLastData = irCommReadData();
    9bb0:	0e 94 41 3f 	call	0x7e82	; 0x7e82 <irCommReadData>
							irCommLastData = (int)((float)irCommLastData*1.411);
    9bb4:	90 e0       	ldi	r25, 0x00	; 0
    9bb6:	aa 27       	eor	r26, r26
    9bb8:	97 fd       	sbrc	r25, 7
    9bba:	a0 95       	com	r26
    9bbc:	ba 2f       	mov	r27, r26
    9bbe:	bc 01       	movw	r22, r24
    9bc0:	cd 01       	movw	r24, r26
    9bc2:	0e 94 e5 55 	call	0xabca	; 0xabca <__floatsisf>
    9bc6:	26 ea       	ldi	r18, 0xA6	; 166
    9bc8:	3b e9       	ldi	r19, 0x9B	; 155
    9bca:	44 eb       	ldi	r20, 0xB4	; 180
    9bcc:	5f e3       	ldi	r21, 0x3F	; 63
    9bce:	0e 94 fe 56 	call	0xadfc	; 0xadfc <__mulsf3>
    9bd2:	0e 94 b2 55 	call	0xab64	; 0xab64 <__fixsfsi>
    9bd6:	70 93 03 05 	sts	0x0503, r23
    9bda:	60 93 02 05 	sts	0x0502, r22
							irCommLastSensor = irCommReceivingSensor();	
    9bde:	0e 94 46 3f 	call	0x7e8c	; 0x7e8c <irCommReceivingSensor>
    9be2:	80 93 14 02 	sts	0x0214, r24
							disableObstacleAvoidance();										
    9be6:	0e 94 cb 33 	call	0x6796	; 0x6796 <disableObstacleAvoidance>
							angleDeg = getBearing(irCommLastSensor);
    9bea:	80 91 14 02 	lds	r24, 0x0214
    9bee:	0e 94 49 3f 	call	0x7e92	; 0x7e92 <getBearing>
    9bf2:	90 93 05 05 	sts	0x0505, r25
    9bf6:	80 93 04 05 	sts	0x0504, r24
							if(angleDeg < 0) {
    9bfa:	97 fd       	sbrc	r25, 7
    9bfc:	e2 c0       	rjmp	.+452    	; 0x9dc2 <elisa_communication+0x794>
								angleDeg += 360;
							}
							angleError = angleDeg - irCommLastData;
							angleError += 180;
    9bfe:	20 91 04 05 	lds	r18, 0x0504
    9c02:	30 91 05 05 	lds	r19, 0x0505
    9c06:	2c 54       	subi	r18, 0x4C	; 76
    9c08:	3f 4f       	sbci	r19, 0xFF	; 255
    9c0a:	80 91 02 05 	lds	r24, 0x0502
    9c0e:	90 91 03 05 	lds	r25, 0x0503
    9c12:	28 1b       	sub	r18, r24
    9c14:	39 0b       	sbc	r19, r25
    9c16:	30 93 07 05 	sts	0x0507, r19
    9c1a:	20 93 06 05 	sts	0x0506, r18
							if(angleError > 180) {
    9c1e:	25 3b       	cpi	r18, 0xB5	; 181
    9c20:	31 05       	cpc	r19, r1
    9c22:	34 f0       	brlt	.+12     	; 0x9c30 <elisa_communication+0x602>
								angleError -= 360;
    9c24:	28 56       	subi	r18, 0x68	; 104
    9c26:	31 40       	sbci	r19, 0x01	; 1
    9c28:	30 93 07 05 	sts	0x0507, r19
    9c2c:	20 93 06 05 	sts	0x0506, r18
							}
							if(angleError < -180) {
    9c30:	80 91 06 05 	lds	r24, 0x0506
    9c34:	90 91 07 05 	lds	r25, 0x0507
    9c38:	2f ef       	ldi	r18, 0xFF	; 255
    9c3a:	8c 34       	cpi	r24, 0x4C	; 76
    9c3c:	92 07       	cpc	r25, r18
    9c3e:	34 f4       	brge	.+12     	; 0x9c4c <elisa_communication+0x61e>
								angleError += 360;
    9c40:	88 59       	subi	r24, 0x98	; 152
    9c42:	9e 4f       	sbci	r25, 0xFE	; 254
    9c44:	90 93 07 05 	sts	0x0507, r25
    9c48:	80 93 06 05 	sts	0x0506, r24
							}
							if(abs(angleError) < 10) {
    9c4c:	09 96       	adiw	r24, 0x09	; 9
    9c4e:	43 97       	sbiw	r24, 0x13	; 19
    9c50:	08 f0       	brcs	.+2      	; 0x9c54 <elisa_communication+0x626>
    9c52:	77 c0       	rjmp	.+238    	; 0x9d42 <elisa_communication+0x714>
								setLeftSpeed(0);
    9c54:	80 e0       	ldi	r24, 0x00	; 0
    9c56:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <setLeftSpeed>
								setRightSpeed(0);
    9c5a:	80 e0       	ldi	r24, 0x00	; 0
    9c5c:	0e 94 13 18 	call	0x3026	; 0x3026 <setRightSpeed>
    9c60:	fe ce       	rjmp	.-516    	; 0x9a5e <elisa_communication+0x430>
						break;

					case 2:
						irCommTasks();
						if(irCommDataSent()==1) {
							angleDegEncode = (unsigned char)((float)angleDeg*0.7084);
    9c62:	60 91 04 05 	lds	r22, 0x0504
    9c66:	70 91 05 05 	lds	r23, 0x0505
    9c6a:	88 27       	eor	r24, r24
    9c6c:	77 fd       	sbrc	r23, 7
    9c6e:	80 95       	com	r24
    9c70:	98 2f       	mov	r25, r24
    9c72:	0e 94 e5 55 	call	0xabca	; 0xabca <__floatsisf>
    9c76:	24 eb       	ldi	r18, 0xB4	; 180
    9c78:	39 e5       	ldi	r19, 0x59	; 89
    9c7a:	45 e3       	ldi	r20, 0x35	; 53
    9c7c:	5f e3       	ldi	r21, 0x3F	; 63
    9c7e:	0e 94 fe 56 	call	0xadfc	; 0xadfc <__mulsf3>
    9c82:	0e 94 b7 55 	call	0xab6e	; 0xab6e <__fixunssfsi>
    9c86:	dc 01       	movw	r26, r24
    9c88:	cb 01       	movw	r24, r22
    9c8a:	80 93 08 05 	sts	0x0508, r24
							irCommSendData(angleDegEncode);
    9c8e:	0e 94 2d 3f 	call	0x7e5a	; 0x7e5a <irCommSendData>
    9c92:	e0 ce       	rjmp	.-576    	; 0x9a54 <elisa_communication+0x426>
						if(irCommDataSent()==1) {							
							demoState = 1;
							if(irCommRxByteExpected<255) {
								irCommRxByteExpected++;
							} else {
								irCommRxByteExpected = 0;
    9c94:	10 92 37 05 	sts	0x0537, r1
    9c98:	20 ce       	rjmp	.-960    	; 0x98da <elisa_communication+0x2ac>
							}
						}
						if(irCommDataAvailable()==1) {
							irCommReadData();
							if(i<7) {
								i++;
    9c9a:	21 96       	adiw	r28, 0x01	; 1
							} else {
								i = 0;
							}
							switch(i) {
    9c9c:	c3 30       	cpi	r28, 0x03	; 3
    9c9e:	d1 05       	cpc	r29, r1
    9ca0:	09 f4       	brne	.+2      	; 0x9ca4 <elisa_communication+0x676>
    9ca2:	ca c0       	rjmp	.+404    	; 0x9e38 <elisa_communication+0x80a>
    9ca4:	c4 30       	cpi	r28, 0x04	; 4
    9ca6:	d1 05       	cpc	r29, r1
    9ca8:	08 f0       	brcs	.+2      	; 0x9cac <elisa_communication+0x67e>
    9caa:	98 c0       	rjmp	.+304    	; 0x9ddc <elisa_communication+0x7ae>
    9cac:	c1 30       	cpi	r28, 0x01	; 1
    9cae:	d1 05       	cpc	r29, r1
    9cb0:	09 f4       	brne	.+2      	; 0x9cb4 <elisa_communication+0x686>
    9cb2:	ce c0       	rjmp	.+412    	; 0x9e50 <elisa_communication+0x822>
    9cb4:	c2 30       	cpi	r28, 0x02	; 2
    9cb6:	d1 05       	cpc	r29, r1
    9cb8:	08 f4       	brcc	.+2      	; 0x9cbc <elisa_communication+0x68e>
    9cba:	19 ce       	rjmp	.-974    	; 0x98ee <elisa_communication+0x2c0>
									updateRedLed(0);
									updateGreenLed(255);
									updateBlueLed(255);
									break;	
								case 2: 
									updateRedLed(255);
    9cbc:	8f ef       	ldi	r24, 0xFF	; 255
									updateRedLed(255);
									updateGreenLed(255);
									updateBlueLed(0);
									break;
								case 4: 
									updateRedLed(0);
    9cbe:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <updateRedLed>
									updateGreenLed(0);
    9cc2:	80 e0       	ldi	r24, 0x00	; 0
    9cc4:	0e 94 34 36 	call	0x6c68	; 0x6c68 <updateGreenLed>
									updateBlueLed(255);
    9cc8:	8f ef       	ldi	r24, 0xFF	; 255
    9cca:	0e 94 4a 36 	call	0x6c94	; 0x6c94 <updateBlueLed>
    9cce:	80 91 70 04 	lds	r24, 0x0470
    9cd2:	10 cd       	rjmp	.-1504   	; 0x96f4 <elisa_communication+0xc6>
							irCommSendData(irCommRxByteExpected);					
						}
						if(irCommDataAvailable()==1) {							
							i = irCommReadData();
							if(i == irCommRxByteExpected) {
								irCommMsgCount++;
    9cd4:	80 91 0c 05 	lds	r24, 0x050C
    9cd8:	8f 5f       	subi	r24, 0xFF	; 255
    9cda:	80 93 0c 05 	sts	0x050C, r24
								if(irCommMsgCount >= 4) {
    9cde:	84 30       	cpi	r24, 0x04	; 4
    9ce0:	08 f4       	brcc	.+2      	; 0x9ce4 <elisa_communication+0x6b6>
    9ce2:	24 cf       	rjmp	.-440    	; 0x9b2c <elisa_communication+0x4fe>
									irCommMsgCount = 0;
    9ce4:	10 92 0c 05 	sts	0x050C, r1
									if(irCommRxByteExpected < 7) {
    9ce8:	47 30       	cpi	r20, 0x07	; 7
    9cea:	08 f0       	brcs	.+2      	; 0x9cee <elisa_communication+0x6c0>
    9cec:	b5 c0       	rjmp	.+362    	; 0x9e58 <elisa_communication+0x82a>
										irCommRxByteExpected++;
    9cee:	84 2f       	mov	r24, r20
    9cf0:	8f 5f       	subi	r24, 0xFF	; 255
    9cf2:	80 93 37 05 	sts	0x0537, r24
    9cf6:	48 2f       	mov	r20, r24
										irCommRxByteExpected = i;
										irCommMsgCount = 0;
									}
								}
							}
							switch(irCommRxByteExpected) {
    9cf8:	43 30       	cpi	r20, 0x03	; 3
    9cfa:	09 f0       	breq	.+2      	; 0x9cfe <elisa_communication+0x6d0>
    9cfc:	1a cf       	rjmp	.-460    	; 0x9b32 <elisa_communication+0x504>
									updateRedLed(255);
									updateGreenLed(235);
									updateBlueLed(255);
									break;
								case 3: 
									updateRedLed(255);
    9cfe:	8f ef       	ldi	r24, 0xFF	; 255
									updateRedLed(235);
									updateGreenLed(235);
									updateBlueLed(255);
									break;
								case 5: 
									updateRedLed(235);
    9d00:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <updateRedLed>
									updateGreenLed(255);
    9d04:	8f ef       	ldi	r24, 0xFF	; 255
    9d06:	0e 94 34 36 	call	0x6c68	; 0x6c68 <updateGreenLed>
									updateBlueLed(235);
    9d0a:	8b ee       	ldi	r24, 0xEB	; 235
    9d0c:	0e 94 4a 36 	call	0x6c94	; 0x6c94 <updateBlueLed>
    9d10:	80 91 70 04 	lds	r24, 0x0470
    9d14:	ef cc       	rjmp	.-1570   	; 0x96f4 <elisa_communication+0xc6>
										irCommRxByteExpected = i;
										irCommMsgCount = 0;
									}
								}
							}
							switch(irCommRxByteExpected) {
    9d16:	45 30       	cpi	r20, 0x05	; 5
    9d18:	09 f4       	brne	.+2      	; 0x9d1c <elisa_communication+0x6ee>
    9d1a:	80 c0       	rjmp	.+256    	; 0x9e1c <elisa_communication+0x7ee>
    9d1c:	45 30       	cpi	r20, 0x05	; 5
    9d1e:	08 f4       	brcc	.+2      	; 0x9d22 <elisa_communication+0x6f4>
    9d20:	7b c0       	rjmp	.+246    	; 0x9e18 <elisa_communication+0x7ea>
    9d22:	46 30       	cpi	r20, 0x06	; 6
    9d24:	09 f4       	brne	.+2      	; 0x9d28 <elisa_communication+0x6fa>
    9d26:	76 c0       	rjmp	.+236    	; 0x9e14 <elisa_communication+0x7e6>
    9d28:	47 30       	cpi	r20, 0x07	; 7
    9d2a:	09 f0       	breq	.+2      	; 0x9d2e <elisa_communication+0x700>
    9d2c:	ae cd       	rjmp	.-1188   	; 0x988a <elisa_communication+0x25c>
									updateRedLed(255);
									updateGreenLed(235);
									updateBlueLed(235);
									break;
								case 7: 
									updateRedLed(235);
    9d2e:	8b ee       	ldi	r24, 0xEB	; 235
    9d30:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <updateRedLed>
									updateGreenLed(235);
    9d34:	8b ee       	ldi	r24, 0xEB	; 235
    9d36:	0e 94 34 36 	call	0x6c68	; 0x6c68 <updateGreenLed>
									updateBlueLed(235);
    9d3a:	8b ee       	ldi	r24, 0xEB	; 235
    9d3c:	0e 94 4a 36 	call	0x6c94	; 0x6c94 <updateBlueLed>
    9d40:	a4 cd       	rjmp	.-1208   	; 0x988a <elisa_communication+0x25c>
							}
							if(abs(angleError) < 10) {
								setLeftSpeed(0);
								setRightSpeed(0);
							} else {
								resetOdometry();
    9d42:	0e 94 11 10 	call	0x2022	; 0x2022 <resetOdometry>
								if(angleError > 0) {	// turn left
    9d46:	80 91 06 05 	lds	r24, 0x0506
    9d4a:	90 91 07 05 	lds	r25, 0x0507
    9d4e:	18 16       	cp	r1, r24
    9d50:	19 06       	cpc	r1, r25
    9d52:	0c f0       	brlt	.+2      	; 0x9d56 <elisa_communication+0x728>
    9d54:	88 c0       	rjmp	.+272    	; 0x9e66 <elisa_communication+0x838>
									setLeftSpeed(-7);
    9d56:	89 ef       	ldi	r24, 0xF9	; 249
    9d58:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <setLeftSpeed>
									setRightSpeed(7);
    9d5c:	87 e0       	ldi	r24, 0x07	; 7
    9d5e:	0e 94 13 18 	call	0x3026	; 0x3026 <setRightSpeed>
									targetAngle = 0.09;	// about -10 degrees
									demoState = 4;
    9d62:	80 92 74 04 	sts	0x0474, r8
    9d66:	0f 2e       	mov	r0, r31
    9d68:	fc ee       	ldi	r31, 0xEC	; 236
    9d6a:	af 2e       	mov	r10, r31
    9d6c:	f1 e5       	ldi	r31, 0x51	; 81
    9d6e:	bf 2e       	mov	r11, r31
    9d70:	f8 eb       	ldi	r31, 0xB8	; 184
    9d72:	cf 2e       	mov	r12, r31
    9d74:	fd e3       	ldi	r31, 0x3D	; 61
    9d76:	df 2e       	mov	r13, r31
    9d78:	f0 2d       	mov	r31, r0
    9d7a:	71 ce       	rjmp	.-798    	; 0x9a5e <elisa_communication+0x430>
										irCommRxByteExpected = 0;
									}
								}
							} else {
								if(irCommRxByteExpected==7) {
									if(i==0) {
    9d7c:	20 97       	sbiw	r28, 0x00	; 0
    9d7e:	b9 f6       	brne	.-82     	; 0x9d2e <elisa_communication+0x700>
										irCommRxByteExpected = 0;
    9d80:	10 92 37 05 	sts	0x0537, r1
										irCommMsgCount = 0;
    9d84:	10 92 0c 05 	sts	0x050C, r1
									}
								}
							}
							switch(irCommRxByteExpected) {
								case 0: 
									updateRedLed(255);
    9d88:	8f ef       	ldi	r24, 0xFF	; 255
    9d8a:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <updateRedLed>
									updateGreenLed(255);
    9d8e:	8f ef       	ldi	r24, 0xFF	; 255
    9d90:	0e 94 34 36 	call	0x6c68	; 0x6c68 <updateGreenLed>
									updateBlueLed(255);
    9d94:	8f ef       	ldi	r24, 0xFF	; 255
    9d96:	0e 94 4a 36 	call	0x6c94	; 0x6c94 <updateBlueLed>
    9d9a:	80 91 70 04 	lds	r24, 0x0470
    9d9e:	aa cc       	rjmp	.-1708   	; 0x96f4 <elisa_communication+0xc6>
								irCommLedToggle = 0;
								updateRedLed(235);
							}
							i = irCommReadData();
							if(i == irCommRobotId) {
								updateBlueLed(255);
    9da0:	8f ef       	ldi	r24, 0xFF	; 255
    9da2:	0e 94 4a 36 	call	0x6c94	; 0x6c94 <updateBlueLed>
								updateRedLed(255);
    9da6:	8f ef       	ldi	r24, 0xFF	; 255
    9da8:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <updateRedLed>
								updateGreenLed(128);
    9dac:	80 e8       	ldi	r24, 0x80	; 128
    9dae:	0e 94 34 36 	call	0x6c68	; 0x6c68 <updateGreenLed>
								irCommSendData(0xFF);
    9db2:	8f ef       	ldi	r24, 0xFF	; 255
    9db4:	0e 94 2d 3f 	call	0x7e5a	; 0x7e5a <irCommSendData>
								demoState = 3;					
    9db8:	70 92 74 04 	sts	0x0474, r7
    9dbc:	80 91 70 04 	lds	r24, 0x0470
    9dc0:	99 cc       	rjmp	.-1742   	; 0x96f4 <elisa_communication+0xc6>
							irCommLastData = (int)((float)irCommLastData*1.411);
							irCommLastSensor = irCommReceivingSensor();	
							disableObstacleAvoidance();										
							angleDeg = getBearing(irCommLastSensor);
							if(angleDeg < 0) {
								angleDeg += 360;
    9dc2:	88 59       	subi	r24, 0x98	; 152
    9dc4:	9e 4f       	sbci	r25, 0xFE	; 254
    9dc6:	90 93 05 05 	sts	0x0505, r25
    9dca:	80 93 04 05 	sts	0x0504, r24
    9dce:	17 cf       	rjmp	.-466    	; 0x9bfe <elisa_communication+0x5d0>
										irCommRxByteExpected = 0;
										irCommMsgCount = 0;
									}
								} else {
									if(irCommRxByteExpected==(i-1)) {
										irCommRxByteExpected = i;
    9dd0:	50 93 37 05 	sts	0x0537, r21
										irCommMsgCount = 0;
    9dd4:	10 92 0c 05 	sts	0x050C, r1
    9dd8:	45 2f       	mov	r20, r21
    9dda:	a8 ce       	rjmp	.-688    	; 0x9b2c <elisa_communication+0x4fe>
							if(i<7) {
								i++;
							} else {
								i = 0;
							}
							switch(i) {
    9ddc:	c5 30       	cpi	r28, 0x05	; 5
    9dde:	d1 05       	cpc	r29, r1
    9de0:	09 f4       	brne	.+2      	; 0x9de4 <elisa_communication+0x7b6>
    9de2:	3f c0       	rjmp	.+126    	; 0x9e62 <elisa_communication+0x834>
    9de4:	c5 30       	cpi	r28, 0x05	; 5
    9de6:	d1 05       	cpc	r29, r1
    9de8:	d0 f1       	brcs	.+116    	; 0x9e5e <elisa_communication+0x830>
    9dea:	c6 30       	cpi	r28, 0x06	; 6
    9dec:	d1 05       	cpc	r29, r1
    9dee:	91 f1       	breq	.+100    	; 0x9e54 <elisa_communication+0x826>
    9df0:	c7 30       	cpi	r28, 0x07	; 7
    9df2:	d1 05       	cpc	r29, r1
    9df4:	09 f0       	breq	.+2      	; 0x9df8 <elisa_communication+0x7ca>
    9df6:	49 cd       	rjmp	.-1390   	; 0x988a <elisa_communication+0x25c>
									updateRedLed(255);
									updateGreenLed(0);
									updateBlueLed(0);
									break;
								case 7: 
									updateRedLed(0);
    9df8:	80 e0       	ldi	r24, 0x00	; 0
    9dfa:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <updateRedLed>
									updateGreenLed(0);
    9dfe:	80 e0       	ldi	r24, 0x00	; 0
    9e00:	0e 94 34 36 	call	0x6c68	; 0x6c68 <updateGreenLed>
									updateBlueLed(0);
    9e04:	80 e0       	ldi	r24, 0x00	; 0
    9e06:	0e 94 4a 36 	call	0x6c94	; 0x6c94 <updateBlueLed>
    9e0a:	80 91 70 04 	lds	r24, 0x0470
    9e0e:	72 cc       	rjmp	.-1820   	; 0x96f4 <elisa_communication+0xc6>
									updateRedLed(255);
									updateGreenLed(255);
									updateBlueLed(255);
									break;
								case 1: 
									updateRedLed(235);
    9e10:	8b ee       	ldi	r24, 0xEB	; 235
    9e12:	bb cf       	rjmp	.-138    	; 0x9d8a <elisa_communication+0x75c>
									updateRedLed(235);
									updateGreenLed(255);
									updateBlueLed(235);
									break;
								case 6: 
									updateRedLed(255);
    9e14:	8f ef       	ldi	r24, 0xFF	; 255
    9e16:	8c cf       	rjmp	.-232    	; 0x9d30 <elisa_communication+0x702>
									updateRedLed(255);
									updateGreenLed(255);
									updateBlueLed(235);
									break;
								case 4: 
									updateRedLed(235);
    9e18:	8b ee       	ldi	r24, 0xEB	; 235
    9e1a:	95 ce       	rjmp	.-726    	; 0x9b46 <elisa_communication+0x518>
									updateGreenLed(235);
									updateBlueLed(255);
									break;
								case 5: 
									updateRedLed(235);
    9e1c:	8b ee       	ldi	r24, 0xEB	; 235
    9e1e:	70 cf       	rjmp	.-288    	; 0x9d00 <elisa_communication+0x6d2>
									irCommLedToggle = 1;
									updateBlueLed(255);
									updateRedLed(255);
									updateGreenLed(128);
								} else {
									irCommLedToggle = 0;
    9e20:	10 92 0b 05 	sts	0x050B, r1
									updateBlueLed(255);
    9e24:	8f ef       	ldi	r24, 0xFF	; 255
    9e26:	0e 94 4a 36 	call	0x6c94	; 0x6c94 <updateBlueLed>
									updateRedLed(255);
    9e2a:	8f ef       	ldi	r24, 0xFF	; 255
    9e2c:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <updateRedLed>
									updateGreenLed(235);
    9e30:	8b ee       	ldi	r24, 0xEB	; 235
    9e32:	0e 94 34 36 	call	0x6c68	; 0x6c68 <updateGreenLed>
    9e36:	8c cd       	rjmp	.-1256   	; 0x9950 <elisa_communication+0x322>
									updateRedLed(255);
									updateGreenLed(0);
									updateBlueLed(255);
									break;
								case 3: 
									updateRedLed(255);
    9e38:	8f ef       	ldi	r24, 0xFF	; 255
									updateRedLed(0);
									updateGreenLed(0);
									updateBlueLed(255);
									break;
								case 5: 
									updateRedLed(0);
    9e3a:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <updateRedLed>
									updateGreenLed(255);
    9e3e:	8f ef       	ldi	r24, 0xFF	; 255
    9e40:	0e 94 34 36 	call	0x6c68	; 0x6c68 <updateGreenLed>
									updateBlueLed(0);
    9e44:	80 e0       	ldi	r24, 0x00	; 0
    9e46:	0e 94 4a 36 	call	0x6c94	; 0x6c94 <updateBlueLed>
    9e4a:	80 91 70 04 	lds	r24, 0x0470
    9e4e:	52 cc       	rjmp	.-1884   	; 0x96f4 <elisa_communication+0xc6>
									updateRedLed(255);
									updateGreenLed(255);
									updateBlueLed(255);
									break;
								case 1: 
									updateRedLed(0);
    9e50:	80 e0       	ldi	r24, 0x00	; 0
    9e52:	9b cf       	rjmp	.-202    	; 0x9d8a <elisa_communication+0x75c>
									updateRedLed(0);
									updateGreenLed(255);
									updateBlueLed(0);
									break;
								case 6: 
									updateRedLed(255);
    9e54:	8f ef       	ldi	r24, 0xFF	; 255
    9e56:	d1 cf       	rjmp	.-94     	; 0x9dfa <elisa_communication+0x7cc>
								if(irCommMsgCount >= 4) {
									irCommMsgCount = 0;
									if(irCommRxByteExpected < 7) {
										irCommRxByteExpected++;
									} else {
										irCommRxByteExpected = 0;
    9e58:	10 92 37 05 	sts	0x0537, r1
    9e5c:	95 cf       	rjmp	.-214    	; 0x9d88 <elisa_communication+0x75a>
									updateRedLed(255);
									updateGreenLed(255);
									updateBlueLed(0);
									break;
								case 4: 
									updateRedLed(0);
    9e5e:	80 e0       	ldi	r24, 0x00	; 0
    9e60:	2e cf       	rjmp	.-420    	; 0x9cbe <elisa_communication+0x690>
									updateGreenLed(0);
									updateBlueLed(255);
									break;
								case 5: 
									updateRedLed(0);
    9e62:	80 e0       	ldi	r24, 0x00	; 0
    9e64:	ea cf       	rjmp	.-44     	; 0x9e3a <elisa_communication+0x80c>
									setLeftSpeed(-7);
									setRightSpeed(7);
									targetAngle = 0.09;	// about -10 degrees
									demoState = 4;
								} else {	// turn right
									setLeftSpeed(7);
    9e66:	87 e0       	ldi	r24, 0x07	; 7
    9e68:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <setLeftSpeed>
									setRightSpeed(-7);
    9e6c:	89 ef       	ldi	r24, 0xF9	; 249
    9e6e:	0e 94 13 18 	call	0x3026	; 0x3026 <setRightSpeed>
									targetAngle = -0.09;	// about 10 degrees
									demoState = 3;
    9e72:	70 92 74 04 	sts	0x0474, r7
    9e76:	0f 2e       	mov	r0, r31
    9e78:	fc ee       	ldi	r31, 0xEC	; 236
    9e7a:	af 2e       	mov	r10, r31
    9e7c:	f1 e5       	ldi	r31, 0x51	; 81
    9e7e:	bf 2e       	mov	r11, r31
    9e80:	f8 eb       	ldi	r31, 0xB8	; 184
    9e82:	cf 2e       	mov	r12, r31
    9e84:	fd eb       	ldi	r31, 0xBD	; 189
    9e86:	df 2e       	mov	r13, r31
    9e88:	f0 2d       	mov	r31, r0
    9e8a:	e9 cd       	rjmp	.-1070   	; 0x9a5e <elisa_communication+0x430>

00009e8c <demoComm>:
#include "motors.h"
#include "movement.h"
#include "pathing.h"

void demoComm() {
	readAccelXYZ();						
    9e8c:	0e 94 c2 38 	call	0x7184	; 0x7184 <readAccelXYZ>
    computeAngle();
    9e90:	0e 94 2f 37 	call	0x6e5e	; 0x6e5e <computeAngle>
    handleIRRemoteCommands();
    9e94:	0e 94 f5 08 	call	0x11ea	; 0x11ea <handleIRRemoteCommands>
    handleRFCommands();
    9e98:	0e 94 40 03 	call	0x680	; 0x680 <handleRFCommands>
	unsigned int currRand=0, currRand2=0;
    //float targetAngle=0;

	while (1) {

	switch(demoState) {
    9e9c:	80 91 74 04 	lds	r24, 0x0474
    9ea0:	81 30       	cpi	r24, 0x01	; 1
    9ea2:	b9 f0       	breq	.+46     	; 0x9ed2 <demoComm+0x46>
    9ea4:	81 30       	cpi	r24, 0x01	; 1
    9ea6:	28 f0       	brcs	.+10     	; 0x9eb2 <demoComm+0x26>
    9ea8:	82 30       	cpi	r24, 0x02	; 2
    9eaa:	e9 f0       	breq	.+58     	; 0x9ee6 <demoComm+0x5a>
			calibrationWritten = 0;
			demoState = 0;

			irCommState = 0;
}
	handleMotorsWithSpeedController();  
    9eac:	0e 94 31 2a 	call	0x5462	; 0x5462 <handleMotorsWithSpeedController>
}
    9eb0:	08 95       	ret

	while (1) {

	switch(demoState) {
					case 0:
						irCommInit();
    9eb2:	0e 94 de 4a 	call	0x95bc	; 0x95bc <irCommInit>
						enableObstacleAvoidance();
    9eb6:	0e 94 c7 33 	call	0x678e	; 0x678e <enableObstacleAvoidance>
						setLeftSpeed(10);
    9eba:	8a e0       	ldi	r24, 0x0A	; 10
    9ebc:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <setLeftSpeed>
						setRightSpeed(10);
    9ec0:	8a e0       	ldi	r24, 0x0A	; 10
    9ec2:	0e 94 13 18 	call	0x3026	; 0x3026 <setRightSpeed>
						demoState = 1;
    9ec6:	81 e0       	ldi	r24, 0x01	; 1
    9ec8:	80 93 74 04 	sts	0x0474, r24
			calibrationWritten = 0;
			demoState = 0;

			irCommState = 0;
}
	handleMotorsWithSpeedController();  
    9ecc:	0e 94 31 2a 	call	0x5462	; 0x5462 <handleMotorsWithSpeedController>
}
    9ed0:	08 95       	ret
						demoState = 1;
						i = 0;
						break;

					case 1:						
						irCommSendData(irCommRxByteExpected);
    9ed2:	80 91 37 05 	lds	r24, 0x0537
    9ed6:	0e 94 2d 3f 	call	0x7e5a	; 0x7e5a <irCommSendData>
																		
						demoState = 2;
    9eda:	82 e0       	ldi	r24, 0x02	; 2
    9edc:	80 93 74 04 	sts	0x0474, r24
			calibrationWritten = 0;
			demoState = 0;

			irCommState = 0;
}
	handleMotorsWithSpeedController();  
    9ee0:	0e 94 31 2a 	call	0x5462	; 0x5462 <handleMotorsWithSpeedController>
}
    9ee4:	08 95       	ret
																		
						demoState = 2;
						break;

					case 2:
						irCommTasks();
    9ee6:	0e 94 26 40 	call	0x804c	; 0x804c <irCommTasks>
						if(irCommDataSent()==1) {							
    9eea:	0e 94 36 3f 	call	0x7e6c	; 0x7e6c <irCommDataSent>
    9eee:	81 30       	cpi	r24, 0x01	; 1
    9ef0:	81 f0       	breq	.+32     	; 0x9f12 <demoComm+0x86>
								irCommRxByteExpected++;
							} else {
								irCommRxByteExpected = 0;
							}
						}
						if(irCommDataAvailable()==1) {
    9ef2:	0e 94 3e 3f 	call	0x7e7c	; 0x7e7c <irCommDataAvailable>
    9ef6:	81 30       	cpi	r24, 0x01	; 1
    9ef8:	c9 f6       	brne	.-78     	; 0x9eac <demoComm+0x20>
							irCommReadData();
    9efa:	0e 94 41 3f 	call	0x7e82	; 0x7e82 <irCommReadData>
									updateRedLed(255);
									updateGreenLed(255);
									updateBlueLed(255);
									break;
								case 1: 
									updateRedLed(0);
    9efe:	80 e0       	ldi	r24, 0x00	; 0
    9f00:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <updateRedLed>
									updateGreenLed(255);
    9f04:	8f ef       	ldi	r24, 0xFF	; 255
    9f06:	0e 94 34 36 	call	0x6c68	; 0x6c68 <updateGreenLed>
									updateBlueLed(255);
    9f0a:	8f ef       	ldi	r24, 0xFF	; 255
    9f0c:	0e 94 4a 36 	call	0x6c94	; 0x6c94 <updateBlueLed>
    9f10:	cd cf       	rjmp	.-102    	; 0x9eac <demoComm+0x20>
						break;

					case 2:
						irCommTasks();
						if(irCommDataSent()==1) {							
							demoState = 1;
    9f12:	80 93 74 04 	sts	0x0474, r24
							if(irCommRxByteExpected<255) {
    9f16:	80 91 37 05 	lds	r24, 0x0537
    9f1a:	8f 3f       	cpi	r24, 0xFF	; 255
    9f1c:	21 f0       	breq	.+8      	; 0x9f26 <demoComm+0x9a>
								irCommRxByteExpected++;
    9f1e:	8f 5f       	subi	r24, 0xFF	; 255
    9f20:	80 93 37 05 	sts	0x0537, r24
    9f24:	e6 cf       	rjmp	.-52     	; 0x9ef2 <demoComm+0x66>
							} else {
								irCommRxByteExpected = 0;
    9f26:	10 92 37 05 	sts	0x0537, r1
    9f2a:	e3 cf       	rjmp	.-58     	; 0x9ef2 <demoComm+0x66>

00009f2c <blackToWhiteEdgeDetect>:

}

unsigned char blackToWhiteEdgeDetect() {

	switch(groundColor){//0 is black and 1 is white
    9f2c:	80 91 61 05 	lds	r24, 0x0561
    9f30:	90 91 62 05 	lds	r25, 0x0562
    9f34:	00 97       	sbiw	r24, 0x00	; 0
    9f36:	d1 f4       	brne	.+52     	; 0x9f6c <blackToWhiteEdgeDetect+0x40>
		
		case 0: //groundColor is black
			if (proximityResult[9] > gridEdgeThresh && proximityResult[10] > gridEdgeThresh) {//if current values are white
    9f38:	80 91 87 02 	lds	r24, 0x0287
    9f3c:	90 91 88 02 	lds	r25, 0x0288
    9f40:	8d 51       	subi	r24, 0x1D	; 29
    9f42:	92 40       	sbci	r25, 0x02	; 2
    9f44:	70 f1       	brcs	.+92     	; 0x9fa2 <blackToWhiteEdgeDetect+0x76>
    9f46:	80 91 89 02 	lds	r24, 0x0289
    9f4a:	90 91 8a 02 	lds	r25, 0x028A
    9f4e:	8d 51       	subi	r24, 0x1D	; 29
    9f50:	92 40       	sbci	r25, 0x02	; 2
    9f52:	38 f1       	brcs	.+78     	; 0x9fa2 <blackToWhiteEdgeDetect+0x76>
				groundColor = 1;
    9f54:	81 e0       	ldi	r24, 0x01	; 1
    9f56:	90 e0       	ldi	r25, 0x00	; 0
    9f58:	90 93 62 05 	sts	0x0562, r25
    9f5c:	80 93 61 05 	sts	0x0561, r24
				colorEdge = 1; 
    9f60:	81 e0       	ldi	r24, 0x01	; 1
    9f62:	80 93 60 05 	sts	0x0560, r24
			}
			break;
			
	}

	return colorEdge; 
    9f66:	80 91 60 05 	lds	r24, 0x0560

}
    9f6a:	08 95       	ret

}

unsigned char blackToWhiteEdgeDetect() {

	switch(groundColor){//0 is black and 1 is white
    9f6c:	01 97       	sbiw	r24, 0x01	; 1
    9f6e:	d9 f7       	brne	.-10     	; 0x9f66 <blackToWhiteEdgeDetect+0x3a>
				colorEdge = 0; 
			}
			break;

		case 1: //groundColor is white
			if (proximityResult[9] < gridEdgeThresh && proximityResult[10] < gridEdgeThresh) {//if current values are black
    9f70:	80 91 87 02 	lds	r24, 0x0287
    9f74:	90 91 88 02 	lds	r25, 0x0288
    9f78:	8c 51       	subi	r24, 0x1C	; 28
    9f7a:	92 40       	sbci	r25, 0x02	; 2
    9f7c:	58 f0       	brcs	.+22     	; 0x9f94 <blackToWhiteEdgeDetect+0x68>
				groundColor = 0;
				colorEdge = 0; 
			}
			else {
				groundColor = 1;
    9f7e:	81 e0       	ldi	r24, 0x01	; 1
    9f80:	90 e0       	ldi	r25, 0x00	; 0
    9f82:	90 93 62 05 	sts	0x0562, r25
    9f86:	80 93 61 05 	sts	0x0561, r24
				colorEdge = 0; 
    9f8a:	10 92 60 05 	sts	0x0560, r1
			}
			break;
			
	}

	return colorEdge; 
    9f8e:	80 91 60 05 	lds	r24, 0x0560

}
    9f92:	08 95       	ret
				colorEdge = 0; 
			}
			break;

		case 1: //groundColor is white
			if (proximityResult[9] < gridEdgeThresh && proximityResult[10] < gridEdgeThresh) {//if current values are black
    9f94:	80 91 89 02 	lds	r24, 0x0289
    9f98:	90 91 8a 02 	lds	r25, 0x028A
    9f9c:	8c 51       	subi	r24, 0x1C	; 28
    9f9e:	92 40       	sbci	r25, 0x02	; 2
    9fa0:	70 f7       	brcc	.-36     	; 0x9f7e <blackToWhiteEdgeDetect+0x52>
				groundColor = 0;
    9fa2:	10 92 62 05 	sts	0x0562, r1
    9fa6:	10 92 61 05 	sts	0x0561, r1
				colorEdge = 0; 
    9faa:	10 92 60 05 	sts	0x0560, r1
			}
			break;
			
	}

	return colorEdge; 
    9fae:	80 91 60 05 	lds	r24, 0x0560

}
    9fb2:	08 95       	ret

00009fb4 <stopWait>:


/*stop where robot is and set motor speed to 0, wait if stop = 1
*/
void stopWait(char stop) {
	if(stop) {
    9fb4:	88 23       	and	r24, r24
    9fb6:	09 f4       	brne	.+2      	; 0x9fba <stopWait+0x6>
    9fb8:	08 95       	ret
			setLeftSpeed(0);
    9fba:	80 e0       	ldi	r24, 0x00	; 0
    9fbc:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <setLeftSpeed>
			setRightSpeed(0);
    9fc0:	80 e0       	ldi	r24, 0x00	; 0
    9fc2:	0e 94 13 18 	call	0x3026	; 0x3026 <setRightSpeed>
			handleMotorsWithSpeedController();
    9fc6:	0e 94 31 2a 	call	0x5462	; 0x5462 <handleMotorsWithSpeedController>
    9fca:	08 95       	ret

00009fcc <turn180>:

/*
turn 180 degrees and face the direction it came from
*/
void turn180() {
		GREEN_LED3_ON;
    9fcc:	a3 98       	cbi	0x14, 3	; 20
		GREEN_LED5_ON;
    9fce:	80 91 0b 01 	lds	r24, 0x010B
    9fd2:	8f 7d       	andi	r24, 0xDF	; 223
    9fd4:	80 93 0b 01 	sts	0x010B, r24
		//spin for 90 degrees
		for (turnCounter = 0; turnCounter<turn90count*2; 	turnCounter++) {
    9fd8:	10 92 55 05 	sts	0x0555, r1
    9fdc:	10 92 56 05 	sts	0x0556, r1
    9fe0:	10 92 57 05 	sts	0x0557, r1
    9fe4:	10 92 58 05 	sts	0x0558, r1
    9fe8:	80 91 55 05 	lds	r24, 0x0555
    9fec:	90 91 56 05 	lds	r25, 0x0556
    9ff0:	a0 91 57 05 	lds	r26, 0x0557
    9ff4:	b0 91 58 05 	lds	r27, 0x0558
    9ff8:	80 50       	subi	r24, 0x00	; 0
    9ffa:	9a 40       	sbci	r25, 0x0A	; 10
    9ffc:	a0 40       	sbci	r26, 0x00	; 0
    9ffe:	b0 40       	sbci	r27, 0x00	; 0
    a000:	40 f5       	brcc	.+80     	; 0xa052 <turn180+0x86>
			setLeftSpeed(10);
    a002:	8a e0       	ldi	r24, 0x0A	; 10
    a004:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <setLeftSpeed>
			setRightSpeed(-10);
    a008:	86 ef       	ldi	r24, 0xF6	; 246
    a00a:	0e 94 13 18 	call	0x3026	; 0x3026 <setRightSpeed>
			handleMotorsWithSpeedController();  
    a00e:	0e 94 31 2a 	call	0x5462	; 0x5462 <handleMotorsWithSpeedController>
*/
void turn180() {
		GREEN_LED3_ON;
		GREEN_LED5_ON;
		//spin for 90 degrees
		for (turnCounter = 0; turnCounter<turn90count*2; 	turnCounter++) {
    a012:	80 91 55 05 	lds	r24, 0x0555
    a016:	90 91 56 05 	lds	r25, 0x0556
    a01a:	a0 91 57 05 	lds	r26, 0x0557
    a01e:	b0 91 58 05 	lds	r27, 0x0558
    a022:	01 96       	adiw	r24, 0x01	; 1
    a024:	a1 1d       	adc	r26, r1
    a026:	b1 1d       	adc	r27, r1
    a028:	80 93 55 05 	sts	0x0555, r24
    a02c:	90 93 56 05 	sts	0x0556, r25
    a030:	a0 93 57 05 	sts	0x0557, r26
    a034:	b0 93 58 05 	sts	0x0558, r27
    a038:	80 91 55 05 	lds	r24, 0x0555
    a03c:	90 91 56 05 	lds	r25, 0x0556
    a040:	a0 91 57 05 	lds	r26, 0x0557
    a044:	b0 91 58 05 	lds	r27, 0x0558
    a048:	80 50       	subi	r24, 0x00	; 0
    a04a:	9a 40       	sbci	r25, 0x0A	; 10
    a04c:	a0 40       	sbci	r26, 0x00	; 0
    a04e:	b0 40       	sbci	r27, 0x00	; 0
    a050:	c0 f2       	brcs	.-80     	; 0xa002 <turn180+0x36>
			setLeftSpeed(10);
			setRightSpeed(-10);
			handleMotorsWithSpeedController();  
		}		
		GREEN_LED3_OFF;
    a052:	a3 9a       	sbi	0x14, 3	; 20
		GREEN_LED5_OFF;
    a054:	80 91 0b 01 	lds	r24, 0x010B
    a058:	80 62       	ori	r24, 0x20	; 32
    a05a:	80 93 0b 01 	sts	0x010B, r24

}
    a05e:	08 95       	ret

0000a060 <turnRight>:
}

/*turns 90 degrees to the right
*/
void turnRight() {
		GREEN_LED1_ON;
    a060:	80 91 0b 01 	lds	r24, 0x010B
    a064:	8d 7f       	andi	r24, 0xFD	; 253
    a066:	80 93 0b 01 	sts	0x010B, r24
		//spin for 90 degrees
		for (turnCounter = 0; turnCounter<turn90count; 	turnCounter++) {
    a06a:	10 92 55 05 	sts	0x0555, r1
    a06e:	10 92 56 05 	sts	0x0556, r1
    a072:	10 92 57 05 	sts	0x0557, r1
    a076:	10 92 58 05 	sts	0x0558, r1
    a07a:	80 91 55 05 	lds	r24, 0x0555
    a07e:	90 91 56 05 	lds	r25, 0x0556
    a082:	a0 91 57 05 	lds	r26, 0x0557
    a086:	b0 91 58 05 	lds	r27, 0x0558
    a08a:	80 50       	subi	r24, 0x00	; 0
    a08c:	95 40       	sbci	r25, 0x05	; 5
    a08e:	a0 40       	sbci	r26, 0x00	; 0
    a090:	b0 40       	sbci	r27, 0x00	; 0
    a092:	40 f5       	brcc	.+80     	; 0xa0e4 <turnRight+0x84>
			setLeftSpeed(10);
    a094:	8a e0       	ldi	r24, 0x0A	; 10
    a096:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <setLeftSpeed>
			setRightSpeed(-10);
    a09a:	86 ef       	ldi	r24, 0xF6	; 246
    a09c:	0e 94 13 18 	call	0x3026	; 0x3026 <setRightSpeed>
			handleMotorsWithSpeedController();  
    a0a0:	0e 94 31 2a 	call	0x5462	; 0x5462 <handleMotorsWithSpeedController>
/*turns 90 degrees to the right
*/
void turnRight() {
		GREEN_LED1_ON;
		//spin for 90 degrees
		for (turnCounter = 0; turnCounter<turn90count; 	turnCounter++) {
    a0a4:	80 91 55 05 	lds	r24, 0x0555
    a0a8:	90 91 56 05 	lds	r25, 0x0556
    a0ac:	a0 91 57 05 	lds	r26, 0x0557
    a0b0:	b0 91 58 05 	lds	r27, 0x0558
    a0b4:	01 96       	adiw	r24, 0x01	; 1
    a0b6:	a1 1d       	adc	r26, r1
    a0b8:	b1 1d       	adc	r27, r1
    a0ba:	80 93 55 05 	sts	0x0555, r24
    a0be:	90 93 56 05 	sts	0x0556, r25
    a0c2:	a0 93 57 05 	sts	0x0557, r26
    a0c6:	b0 93 58 05 	sts	0x0558, r27
    a0ca:	80 91 55 05 	lds	r24, 0x0555
    a0ce:	90 91 56 05 	lds	r25, 0x0556
    a0d2:	a0 91 57 05 	lds	r26, 0x0557
    a0d6:	b0 91 58 05 	lds	r27, 0x0558
    a0da:	80 50       	subi	r24, 0x00	; 0
    a0dc:	95 40       	sbci	r25, 0x05	; 5
    a0de:	a0 40       	sbci	r26, 0x00	; 0
    a0e0:	b0 40       	sbci	r27, 0x00	; 0
    a0e2:	c0 f2       	brcs	.-80     	; 0xa094 <turnRight+0x34>
			setLeftSpeed(10);
			setRightSpeed(-10);
			handleMotorsWithSpeedController();  
		}
		GREEN_LED1_OFF;
    a0e4:	80 91 0b 01 	lds	r24, 0x010B
    a0e8:	82 60       	ori	r24, 0x02	; 2
    a0ea:	80 93 0b 01 	sts	0x010B, r24
}
    a0ee:	08 95       	ret

0000a0f0 <turnLeft>:
volatile int groundColor = 0; 

/*turns 90 degrees to the left
*/
void turnLeft() {
		GREEN_LED7_ON;
    a0f0:	80 91 0b 01 	lds	r24, 0x010B
    a0f4:	8f 77       	andi	r24, 0x7F	; 127
    a0f6:	80 93 0b 01 	sts	0x010B, r24
		//spin for 90 degrees
		for (turnCounter = 0; turnCounter<turn90count; 	turnCounter++) {
    a0fa:	10 92 55 05 	sts	0x0555, r1
    a0fe:	10 92 56 05 	sts	0x0556, r1
    a102:	10 92 57 05 	sts	0x0557, r1
    a106:	10 92 58 05 	sts	0x0558, r1
    a10a:	80 91 55 05 	lds	r24, 0x0555
    a10e:	90 91 56 05 	lds	r25, 0x0556
    a112:	a0 91 57 05 	lds	r26, 0x0557
    a116:	b0 91 58 05 	lds	r27, 0x0558
    a11a:	80 50       	subi	r24, 0x00	; 0
    a11c:	95 40       	sbci	r25, 0x05	; 5
    a11e:	a0 40       	sbci	r26, 0x00	; 0
    a120:	b0 40       	sbci	r27, 0x00	; 0
    a122:	40 f5       	brcc	.+80     	; 0xa174 <turnLeft+0x84>
			setLeftSpeed(-10);
    a124:	86 ef       	ldi	r24, 0xF6	; 246
    a126:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <setLeftSpeed>
			setRightSpeed(10);
    a12a:	8a e0       	ldi	r24, 0x0A	; 10
    a12c:	0e 94 13 18 	call	0x3026	; 0x3026 <setRightSpeed>
			handleMotorsWithSpeedController();  
    a130:	0e 94 31 2a 	call	0x5462	; 0x5462 <handleMotorsWithSpeedController>
/*turns 90 degrees to the left
*/
void turnLeft() {
		GREEN_LED7_ON;
		//spin for 90 degrees
		for (turnCounter = 0; turnCounter<turn90count; 	turnCounter++) {
    a134:	80 91 55 05 	lds	r24, 0x0555
    a138:	90 91 56 05 	lds	r25, 0x0556
    a13c:	a0 91 57 05 	lds	r26, 0x0557
    a140:	b0 91 58 05 	lds	r27, 0x0558
    a144:	01 96       	adiw	r24, 0x01	; 1
    a146:	a1 1d       	adc	r26, r1
    a148:	b1 1d       	adc	r27, r1
    a14a:	80 93 55 05 	sts	0x0555, r24
    a14e:	90 93 56 05 	sts	0x0556, r25
    a152:	a0 93 57 05 	sts	0x0557, r26
    a156:	b0 93 58 05 	sts	0x0558, r27
    a15a:	80 91 55 05 	lds	r24, 0x0555
    a15e:	90 91 56 05 	lds	r25, 0x0556
    a162:	a0 91 57 05 	lds	r26, 0x0557
    a166:	b0 91 58 05 	lds	r27, 0x0558
    a16a:	80 50       	subi	r24, 0x00	; 0
    a16c:	95 40       	sbci	r25, 0x05	; 5
    a16e:	a0 40       	sbci	r26, 0x00	; 0
    a170:	b0 40       	sbci	r27, 0x00	; 0
    a172:	c0 f2       	brcs	.-80     	; 0xa124 <turnLeft+0x34>
			setLeftSpeed(-10);
			setRightSpeed(10);
			handleMotorsWithSpeedController();  
		}
		GREEN_LED7_OFF;
    a174:	80 91 0b 01 	lds	r24, 0x010B
    a178:	80 68       	ori	r24, 0x80	; 128
    a17a:	80 93 0b 01 	sts	0x010B, r24
}
    a17e:	08 95       	ret

0000a180 <gridEdgeCount>:

}

unsigned char blackToWhiteEdgeDetect() {

	switch(groundColor){//0 is black and 1 is white
    a180:	80 91 61 05 	lds	r24, 0x0561
    a184:	90 91 62 05 	lds	r25, 0x0562
    a188:	00 97       	sbiw	r24, 0x00	; 0
    a18a:	d9 f5       	brne	.+118    	; 0xa202 <gridEdgeCount+0x82>
		
		case 0: //groundColor is black
			if (proximityResult[9] > gridEdgeThresh && proximityResult[10] > gridEdgeThresh) {//if current values are white
    a18c:	80 91 87 02 	lds	r24, 0x0287
    a190:	90 91 88 02 	lds	r25, 0x0288
    a194:	8d 51       	subi	r24, 0x1D	; 29
    a196:	92 40       	sbci	r25, 0x02	; 2
    a198:	08 f4       	brcc	.+2      	; 0xa19c <gridEdgeCount+0x1c>
    a19a:	4c c0       	rjmp	.+152    	; 0xa234 <gridEdgeCount+0xb4>
    a19c:	80 91 89 02 	lds	r24, 0x0289
    a1a0:	90 91 8a 02 	lds	r25, 0x028A
    a1a4:	8d 51       	subi	r24, 0x1D	; 29
    a1a6:	92 40       	sbci	r25, 0x02	; 2
    a1a8:	08 f4       	brcc	.+2      	; 0xa1ac <gridEdgeCount+0x2c>
    a1aa:	44 c0       	rjmp	.+136    	; 0xa234 <gridEdgeCount+0xb4>
				groundColor = 1;
    a1ac:	81 e0       	ldi	r24, 0x01	; 1
    a1ae:	90 e0       	ldi	r25, 0x00	; 0
    a1b0:	90 93 62 05 	sts	0x0562, r25
    a1b4:	80 93 61 05 	sts	0x0561, r24
				colorEdge = 1; 
    a1b8:	81 e0       	ldi	r24, 0x01	; 1
    a1ba:	80 93 60 05 	sts	0x0560, r24
			}
			break;
			
	}

	return colorEdge; 
    a1be:	80 91 60 05 	lds	r24, 0x0560

/* Counts the number of edges the robot passes over. This is used to know when the Robot 
moves fully into the next grid square. The Robot needs to cross 2 edges.
*/
int gridEdgeCount() {
	blackToWhiteEdge = blackToWhiteEdgeDetect();
    a1c2:	80 93 5e 05 	sts	0x055E, r24
	
	switch(edgeCount) {
    a1c6:	20 91 5a 05 	lds	r18, 0x055A
    a1ca:	30 91 5b 05 	lds	r19, 0x055B
    a1ce:	21 30       	cpi	r18, 0x01	; 1
    a1d0:	31 05       	cpc	r19, r1
    a1d2:	09 f4       	brne	.+2      	; 0xa1d6 <gridEdgeCount+0x56>
    a1d4:	51 c0       	rjmp	.+162    	; 0xa278 <gridEdgeCount+0xf8>
    a1d6:	22 30       	cpi	r18, 0x02	; 2
    a1d8:	31 05       	cpc	r19, r1
    a1da:	99 f1       	breq	.+102    	; 0xa242 <gridEdgeCount+0xc2>
    a1dc:	23 2b       	or	r18, r19
    a1de:	59 f4       	brne	.+22     	; 0xa1f6 <gridEdgeCount+0x76>
		
		case 0: 
			if(blackToWhiteEdge) {
    a1e0:	80 91 5e 05 	lds	r24, 0x055E
    a1e4:	88 23       	and	r24, r24
    a1e6:	09 f4       	brne	.+2      	; 0xa1ea <gridEdgeCount+0x6a>
    a1e8:	3d c0       	rjmp	.+122    	; 0xa264 <gridEdgeCount+0xe4>
				edgeCount = 1;
    a1ea:	81 e0       	ldi	r24, 0x01	; 1
    a1ec:	90 e0       	ldi	r25, 0x00	; 0
    a1ee:	90 93 5b 05 	sts	0x055B, r25
    a1f2:	80 93 5a 05 	sts	0x055A, r24
			}
			break;
		
	}

	return edgeCount;
    a1f6:	20 91 5a 05 	lds	r18, 0x055A
    a1fa:	30 91 5b 05 	lds	r19, 0x055B


}
    a1fe:	c9 01       	movw	r24, r18
    a200:	08 95       	ret

unsigned char blackToWhiteEdgeDetect() {

	switch(groundColor){//0 is black and 1 is white
    a202:	01 97       	sbiw	r24, 0x01	; 1
    a204:	e1 f6       	brne	.-72     	; 0xa1be <gridEdgeCount+0x3e>
				colorEdge = 0; 
			}
			break;

		case 1: //groundColor is white
			if (proximityResult[9] < gridEdgeThresh && proximityResult[10] < gridEdgeThresh) {//if current values are black
    a206:	80 91 87 02 	lds	r24, 0x0287
    a20a:	90 91 88 02 	lds	r25, 0x0288
    a20e:	8c 51       	subi	r24, 0x1C	; 28
    a210:	92 40       	sbci	r25, 0x02	; 2
    a212:	48 f0       	brcs	.+18     	; 0xa226 <gridEdgeCount+0xa6>
				groundColor = 0;
				colorEdge = 0; 
			}
			else {
				groundColor = 1;
    a214:	81 e0       	ldi	r24, 0x01	; 1
    a216:	90 e0       	ldi	r25, 0x00	; 0
    a218:	90 93 62 05 	sts	0x0562, r25
    a21c:	80 93 61 05 	sts	0x0561, r24
				colorEdge = 0; 
    a220:	10 92 60 05 	sts	0x0560, r1
    a224:	cc cf       	rjmp	.-104    	; 0xa1be <gridEdgeCount+0x3e>
				colorEdge = 0; 
			}
			break;

		case 1: //groundColor is white
			if (proximityResult[9] < gridEdgeThresh && proximityResult[10] < gridEdgeThresh) {//if current values are black
    a226:	80 91 89 02 	lds	r24, 0x0289
    a22a:	90 91 8a 02 	lds	r25, 0x028A
    a22e:	8c 51       	subi	r24, 0x1C	; 28
    a230:	92 40       	sbci	r25, 0x02	; 2
    a232:	80 f7       	brcc	.-32     	; 0xa214 <gridEdgeCount+0x94>
				groundColor = 0;
    a234:	10 92 62 05 	sts	0x0562, r1
    a238:	10 92 61 05 	sts	0x0561, r1
				colorEdge = 0; 
    a23c:	10 92 60 05 	sts	0x0560, r1
    a240:	be cf       	rjmp	.-132    	; 0xa1be <gridEdgeCount+0x3e>
				edgeCount = 1;
			}
			break;

		case 2:
			whiteToBlackEdge = (proximityResult[9] < gridEdgeThresh && proximityResult[10] < gridEdgeThresh);
    a242:	80 91 87 02 	lds	r24, 0x0287
    a246:	90 91 88 02 	lds	r25, 0x0288
    a24a:	8c 51       	subi	r24, 0x1C	; 28
    a24c:	92 40       	sbci	r25, 0x02	; 2
    a24e:	20 f5       	brcc	.+72     	; 0xa298 <gridEdgeCount+0x118>
    a250:	80 91 89 02 	lds	r24, 0x0289
    a254:	90 91 8a 02 	lds	r25, 0x028A
    a258:	8c 51       	subi	r24, 0x1C	; 28
    a25a:	92 40       	sbci	r25, 0x02	; 2
    a25c:	e8 f4       	brcc	.+58     	; 0xa298 <gridEdgeCount+0x118>
    a25e:	81 e0       	ldi	r24, 0x01	; 1
    a260:	80 93 5f 05 	sts	0x055F, r24
			if(whiteToBlackEdge) {
				edgeCount = 0;
    a264:	10 92 5b 05 	sts	0x055B, r1
    a268:	10 92 5a 05 	sts	0x055A, r1
			}
			break;
		
	}

	return edgeCount;
    a26c:	20 91 5a 05 	lds	r18, 0x055A
    a270:	30 91 5b 05 	lds	r19, 0x055B


}
    a274:	c9 01       	movw	r24, r18
    a276:	08 95       	ret
				edgeCount = 0;
			}
			break;

		case 1: 
			if(blackToWhiteEdge) {
    a278:	80 91 5e 05 	lds	r24, 0x055E
    a27c:	88 23       	and	r24, r24
    a27e:	a9 f0       	breq	.+42     	; 0xa2aa <gridEdgeCount+0x12a>
			whiteToBlackEdge = (proximityResult[9] < gridEdgeThresh && proximityResult[10] < gridEdgeThresh);
			if(whiteToBlackEdge) {
				edgeCount = 0;
			}
			else{
				edgeCount = 2;
    a280:	82 e0       	ldi	r24, 0x02	; 2
    a282:	90 e0       	ldi	r25, 0x00	; 0
    a284:	90 93 5b 05 	sts	0x055B, r25
    a288:	80 93 5a 05 	sts	0x055A, r24
			}
			break;
		
	}

	return edgeCount;
    a28c:	20 91 5a 05 	lds	r18, 0x055A
    a290:	30 91 5b 05 	lds	r19, 0x055B


}
    a294:	c9 01       	movw	r24, r18
    a296:	08 95       	ret
				edgeCount = 1;
			}
			break;

		case 2:
			whiteToBlackEdge = (proximityResult[9] < gridEdgeThresh && proximityResult[10] < gridEdgeThresh);
    a298:	10 92 5f 05 	sts	0x055F, r1
			if(whiteToBlackEdge) {
				edgeCount = 0;
			}
			else{
				edgeCount = 2;
    a29c:	82 e0       	ldi	r24, 0x02	; 2
    a29e:	90 e0       	ldi	r25, 0x00	; 0
    a2a0:	90 93 5b 05 	sts	0x055B, r25
    a2a4:	80 93 5a 05 	sts	0x055A, r24
    a2a8:	f1 cf       	rjmp	.-30     	; 0xa28c <gridEdgeCount+0x10c>
		case 1: 
			if(blackToWhiteEdge) {
				edgeCount = 2;
			}
			else{
				edgeCount = 1;
    a2aa:	30 93 5b 05 	sts	0x055B, r19
    a2ae:	20 93 5a 05 	sts	0x055A, r18
			}
			break;
		
	}

	return edgeCount;
    a2b2:	20 91 5a 05 	lds	r18, 0x055A
    a2b6:	30 91 5b 05 	lds	r19, 0x055B


}
    a2ba:	c9 01       	movw	r24, r18
    a2bc:	08 95       	ret

0000a2be <gridEdgeDetected>:

unsigned char blackToWhiteEdgeDetect() {

	switch(groundColor){//0 is black and 1 is white
    a2be:	80 91 61 05 	lds	r24, 0x0561
    a2c2:	90 91 62 05 	lds	r25, 0x0562
    a2c6:	00 97       	sbiw	r24, 0x00	; 0
    a2c8:	09 f0       	breq	.+2      	; 0xa2cc <gridEdgeDetected+0xe>
    a2ca:	3c c0       	rjmp	.+120    	; 0xa344 <gridEdgeDetected+0x86>
		
		case 0: //groundColor is black
			if (proximityResult[9] > gridEdgeThresh && proximityResult[10] > gridEdgeThresh) {//if current values are white
    a2cc:	80 91 87 02 	lds	r24, 0x0287
    a2d0:	90 91 88 02 	lds	r25, 0x0288
    a2d4:	8d 51       	subi	r24, 0x1D	; 29
    a2d6:	92 40       	sbci	r25, 0x02	; 2
    a2d8:	08 f4       	brcc	.+2      	; 0xa2dc <gridEdgeDetected+0x1e>
    a2da:	58 c0       	rjmp	.+176    	; 0xa38c <gridEdgeDetected+0xce>
    a2dc:	80 91 89 02 	lds	r24, 0x0289
    a2e0:	90 91 8a 02 	lds	r25, 0x028A
    a2e4:	8d 51       	subi	r24, 0x1D	; 29
    a2e6:	92 40       	sbci	r25, 0x02	; 2
    a2e8:	08 f4       	brcc	.+2      	; 0xa2ec <gridEdgeDetected+0x2e>
    a2ea:	50 c0       	rjmp	.+160    	; 0xa38c <gridEdgeDetected+0xce>
				groundColor = 1;
    a2ec:	81 e0       	ldi	r24, 0x01	; 1
    a2ee:	90 e0       	ldi	r25, 0x00	; 0
    a2f0:	90 93 62 05 	sts	0x0562, r25
    a2f4:	80 93 61 05 	sts	0x0561, r24
				colorEdge = 1; 
    a2f8:	81 e0       	ldi	r24, 0x01	; 1
    a2fa:	80 93 60 05 	sts	0x0560, r24
			}
			break;
			
	}

	return colorEdge; 
    a2fe:	80 91 60 05 	lds	r24, 0x0560

/* Counts the number of edges the robot passes over. This is used to know when the Robot 
moves fully into the next grid square. The Robot needs to cross 2 edges.
*/
int gridEdgeCount() {
	blackToWhiteEdge = blackToWhiteEdgeDetect();
    a302:	80 93 5e 05 	sts	0x055E, r24
	
	switch(edgeCount) {
    a306:	20 91 5a 05 	lds	r18, 0x055A
    a30a:	30 91 5b 05 	lds	r19, 0x055B
    a30e:	21 30       	cpi	r18, 0x01	; 1
    a310:	31 05       	cpc	r19, r1
    a312:	09 f4       	brne	.+2      	; 0xa316 <gridEdgeDetected+0x58>
    a314:	5b c0       	rjmp	.+182    	; 0xa3cc <gridEdgeDetected+0x10e>
    a316:	22 30       	cpi	r18, 0x02	; 2
    a318:	31 05       	cpc	r19, r1
    a31a:	09 f4       	brne	.+2      	; 0xa31e <gridEdgeDetected+0x60>
    a31c:	41 c0       	rjmp	.+130    	; 0xa3a0 <gridEdgeDetected+0xe2>
    a31e:	23 2b       	or	r18, r19
    a320:	19 f1       	breq	.+70     	; 0xa368 <gridEdgeDetected+0xaa>
			}
			break;
		
	}

	return edgeCount;
    a322:	80 91 5a 05 	lds	r24, 0x055A
    a326:	90 91 5b 05 	lds	r25, 0x055B
/* tell if the front ground sensors detect the edge of the grid. 
Returns 1 if and edge is detected and returns 0 if no edge detected.
*/

char gridEdgeDetected() {
	numEdge = gridEdgeCount(); 
    a32a:	90 93 5d 05 	sts	0x055D, r25
    a32e:	80 93 5c 05 	sts	0x055C, r24
	// tell whether a gridEdge is detected or not
	if(numEdge==2) {
    a332:	80 91 5c 05 	lds	r24, 0x055C
    a336:	90 91 5d 05 	lds	r25, 0x055D
    a33a:	20 e0       	ldi	r18, 0x00	; 0
    a33c:	02 97       	sbiw	r24, 0x02	; 2
    a33e:	69 f1       	breq	.+90     	; 0xa39a <gridEdgeDetected+0xdc>
		return 1; //it sees the white line
	} else {
		return 0;
	}
}
    a340:	82 2f       	mov	r24, r18
    a342:	08 95       	ret

}

unsigned char blackToWhiteEdgeDetect() {

	switch(groundColor){//0 is black and 1 is white
    a344:	01 97       	sbiw	r24, 0x01	; 1
    a346:	d9 f6       	brne	.-74     	; 0xa2fe <gridEdgeDetected+0x40>
				colorEdge = 0; 
			}
			break;

		case 1: //groundColor is white
			if (proximityResult[9] < gridEdgeThresh && proximityResult[10] < gridEdgeThresh) {//if current values are black
    a348:	80 91 87 02 	lds	r24, 0x0287
    a34c:	90 91 88 02 	lds	r25, 0x0288
    a350:	8c 51       	subi	r24, 0x1C	; 28
    a352:	92 40       	sbci	r25, 0x02	; 2
    a354:	a0 f0       	brcs	.+40     	; 0xa37e <gridEdgeDetected+0xc0>
				groundColor = 0;
				colorEdge = 0; 
			}
			else {
				groundColor = 1;
    a356:	81 e0       	ldi	r24, 0x01	; 1
    a358:	90 e0       	ldi	r25, 0x00	; 0
    a35a:	90 93 62 05 	sts	0x0562, r25
    a35e:	80 93 61 05 	sts	0x0561, r24
				colorEdge = 0; 
    a362:	10 92 60 05 	sts	0x0560, r1
    a366:	cb cf       	rjmp	.-106    	; 0xa2fe <gridEdgeDetected+0x40>
	blackToWhiteEdge = blackToWhiteEdgeDetect();
	
	switch(edgeCount) {
		
		case 0: 
			if(blackToWhiteEdge) {
    a368:	80 91 5e 05 	lds	r24, 0x055E
    a36c:	88 23       	and	r24, r24
    a36e:	49 f1       	breq	.+82     	; 0xa3c2 <gridEdgeDetected+0x104>
				edgeCount = 1;
    a370:	81 e0       	ldi	r24, 0x01	; 1
    a372:	90 e0       	ldi	r25, 0x00	; 0
    a374:	90 93 5b 05 	sts	0x055B, r25
    a378:	80 93 5a 05 	sts	0x055A, r24
    a37c:	d2 cf       	rjmp	.-92     	; 0xa322 <gridEdgeDetected+0x64>
				colorEdge = 0; 
			}
			break;

		case 1: //groundColor is white
			if (proximityResult[9] < gridEdgeThresh && proximityResult[10] < gridEdgeThresh) {//if current values are black
    a37e:	80 91 89 02 	lds	r24, 0x0289
    a382:	90 91 8a 02 	lds	r25, 0x028A
    a386:	8c 51       	subi	r24, 0x1C	; 28
    a388:	92 40       	sbci	r25, 0x02	; 2
    a38a:	28 f7       	brcc	.-54     	; 0xa356 <gridEdgeDetected+0x98>
				groundColor = 0;
    a38c:	10 92 62 05 	sts	0x0562, r1
    a390:	10 92 61 05 	sts	0x0561, r1
				colorEdge = 0; 
    a394:	10 92 60 05 	sts	0x0560, r1
    a398:	b2 cf       	rjmp	.-156    	; 0xa2fe <gridEdgeDetected+0x40>
*/

char gridEdgeDetected() {
	numEdge = gridEdgeCount(); 
	// tell whether a gridEdge is detected or not
	if(numEdge==2) {
    a39a:	21 e0       	ldi	r18, 0x01	; 1
		return 1; //it sees the white line
	} else {
		return 0;
	}
}
    a39c:	82 2f       	mov	r24, r18
    a39e:	08 95       	ret
				edgeCount = 1;
			}
			break;

		case 2:
			whiteToBlackEdge = (proximityResult[9] < gridEdgeThresh && proximityResult[10] < gridEdgeThresh);
    a3a0:	80 91 87 02 	lds	r24, 0x0287
    a3a4:	90 91 88 02 	lds	r25, 0x0288
    a3a8:	8c 51       	subi	r24, 0x1C	; 28
    a3aa:	92 40       	sbci	r25, 0x02	; 2
    a3ac:	d0 f4       	brcc	.+52     	; 0xa3e2 <gridEdgeDetected+0x124>
    a3ae:	80 91 89 02 	lds	r24, 0x0289
    a3b2:	90 91 8a 02 	lds	r25, 0x028A
    a3b6:	8c 51       	subi	r24, 0x1C	; 28
    a3b8:	92 40       	sbci	r25, 0x02	; 2
    a3ba:	98 f4       	brcc	.+38     	; 0xa3e2 <gridEdgeDetected+0x124>
    a3bc:	81 e0       	ldi	r24, 0x01	; 1
    a3be:	80 93 5f 05 	sts	0x055F, r24
			if(whiteToBlackEdge) {
				edgeCount = 0;
    a3c2:	10 92 5b 05 	sts	0x055B, r1
    a3c6:	10 92 5a 05 	sts	0x055A, r1
    a3ca:	ab cf       	rjmp	.-170    	; 0xa322 <gridEdgeDetected+0x64>
				edgeCount = 0;
			}
			break;

		case 1: 
			if(blackToWhiteEdge) {
    a3cc:	80 91 5e 05 	lds	r24, 0x055E
    a3d0:	88 23       	and	r24, r24
    a3d2:	81 f0       	breq	.+32     	; 0xa3f4 <gridEdgeDetected+0x136>
			whiteToBlackEdge = (proximityResult[9] < gridEdgeThresh && proximityResult[10] < gridEdgeThresh);
			if(whiteToBlackEdge) {
				edgeCount = 0;
			}
			else{
				edgeCount = 2;
    a3d4:	82 e0       	ldi	r24, 0x02	; 2
    a3d6:	90 e0       	ldi	r25, 0x00	; 0
    a3d8:	90 93 5b 05 	sts	0x055B, r25
    a3dc:	80 93 5a 05 	sts	0x055A, r24
    a3e0:	a0 cf       	rjmp	.-192    	; 0xa322 <gridEdgeDetected+0x64>
				edgeCount = 1;
			}
			break;

		case 2:
			whiteToBlackEdge = (proximityResult[9] < gridEdgeThresh && proximityResult[10] < gridEdgeThresh);
    a3e2:	10 92 5f 05 	sts	0x055F, r1
			if(whiteToBlackEdge) {
				edgeCount = 0;
			}
			else{
				edgeCount = 2;
    a3e6:	82 e0       	ldi	r24, 0x02	; 2
    a3e8:	90 e0       	ldi	r25, 0x00	; 0
    a3ea:	90 93 5b 05 	sts	0x055B, r25
    a3ee:	80 93 5a 05 	sts	0x055A, r24
    a3f2:	97 cf       	rjmp	.-210    	; 0xa322 <gridEdgeDetected+0x64>
		case 1: 
			if(blackToWhiteEdge) {
				edgeCount = 2;
			}
			else{
				edgeCount = 1;
    a3f4:	30 93 5b 05 	sts	0x055B, r19
    a3f8:	20 93 5a 05 	sts	0x055A, r18
    a3fc:	92 cf       	rjmp	.-220    	; 0xa322 <gridEdgeDetected+0x64>

0000a3fe <moveForwardOne>:



/*move forwared 1 grid step
*/
void moveForwardOne(){
    a3fe:	ff 92       	push	r15
    a400:	0f 93       	push	r16
    a402:	1f 93       	push	r17
    a404:	cf 93       	push	r28
    a406:	df 93       	push	r29
	reachedNextGrid = 0;
    a408:	10 92 ab 0b 	sts	0x0BAB, r1
	while(reachedNextGrid==0) {
    a40c:	80 91 ab 0b 	lds	r24, 0x0BAB
    a410:	88 23       	and	r24, r24
    a412:	09 f0       	breq	.+2      	; 0xa416 <moveForwardOne+0x18>
    a414:	82 c0       	rjmp	.+260    	; 0xa51a <moveForwardOne+0x11c>
			if (proximityResult[9] < gridEdgeThresh && proximityResult[10] < gridEdgeThresh) {//if current values are black
				groundColor = 0;
				colorEdge = 0; 
			}
			else {
				groundColor = 1;
    a416:	c1 e0       	ldi	r28, 0x01	; 1
    a418:	d0 e0       	ldi	r29, 0x00	; 0
	switch(groundColor){//0 is black and 1 is white
		
		case 0: //groundColor is black
			if (proximityResult[9] > gridEdgeThresh && proximityResult[10] > gridEdgeThresh) {//if current values are white
				groundColor = 1;
				colorEdge = 1; 
    a41a:	ff 24       	eor	r15, r15
    a41c:	f3 94       	inc	r15
			}
			break;

		case 1: 
			if(blackToWhiteEdge) {
				edgeCount = 2;
    a41e:	02 e0       	ldi	r16, 0x02	; 2
    a420:	10 e0       	ldi	r17, 0x00	; 0
    a422:	46 c0       	rjmp	.+140    	; 0xa4b0 <moveForwardOne+0xb2>
unsigned char blackToWhiteEdgeDetect() {

	switch(groundColor){//0 is black and 1 is white
		
		case 0: //groundColor is black
			if (proximityResult[9] > gridEdgeThresh && proximityResult[10] > gridEdgeThresh) {//if current values are white
    a424:	80 91 87 02 	lds	r24, 0x0287
    a428:	90 91 88 02 	lds	r25, 0x0288
    a42c:	8d 51       	subi	r24, 0x1D	; 29
    a42e:	92 40       	sbci	r25, 0x02	; 2
    a430:	08 f4       	brcc	.+2      	; 0xa434 <moveForwardOne+0x36>
    a432:	65 c0       	rjmp	.+202    	; 0xa4fe <moveForwardOne+0x100>
    a434:	80 91 89 02 	lds	r24, 0x0289
    a438:	90 91 8a 02 	lds	r25, 0x028A
    a43c:	8d 51       	subi	r24, 0x1D	; 29
    a43e:	92 40       	sbci	r25, 0x02	; 2
    a440:	08 f4       	brcc	.+2      	; 0xa444 <moveForwardOne+0x46>
    a442:	5d c0       	rjmp	.+186    	; 0xa4fe <moveForwardOne+0x100>
				groundColor = 1;
    a444:	d0 93 62 05 	sts	0x0562, r29
    a448:	c0 93 61 05 	sts	0x0561, r28
				colorEdge = 1; 
    a44c:	f0 92 60 05 	sts	0x0560, r15
			}
			break;
			
	}

	return colorEdge; 
    a450:	80 91 60 05 	lds	r24, 0x0560

/* Counts the number of edges the robot passes over. This is used to know when the Robot 
moves fully into the next grid square. The Robot needs to cross 2 edges.
*/
int gridEdgeCount() {
	blackToWhiteEdge = blackToWhiteEdgeDetect();
    a454:	80 93 5e 05 	sts	0x055E, r24
	
	switch(edgeCount) {
    a458:	20 91 5a 05 	lds	r18, 0x055A
    a45c:	30 91 5b 05 	lds	r19, 0x055B
    a460:	21 30       	cpi	r18, 0x01	; 1
    a462:	31 05       	cpc	r19, r1
    a464:	09 f4       	brne	.+2      	; 0xa468 <moveForwardOne+0x6a>
    a466:	e9 c0       	rjmp	.+466    	; 0xa63a <moveForwardOne+0x23c>
    a468:	22 30       	cpi	r18, 0x02	; 2
    a46a:	31 05       	cpc	r19, r1
    a46c:	09 f4       	brne	.+2      	; 0xa470 <moveForwardOne+0x72>
    a46e:	d0 c0       	rjmp	.+416    	; 0xa610 <moveForwardOne+0x212>
    a470:	23 2b       	or	r18, r19
    a472:	49 f4       	brne	.+18     	; 0xa486 <moveForwardOne+0x88>
		
		case 0: 
			if(blackToWhiteEdge) {
    a474:	80 91 5e 05 	lds	r24, 0x055E
    a478:	88 23       	and	r24, r24
    a47a:	09 f4       	brne	.+2      	; 0xa47e <moveForwardOne+0x80>
    a47c:	d9 c0       	rjmp	.+434    	; 0xa630 <moveForwardOne+0x232>
				edgeCount = 1;
    a47e:	d0 93 5b 05 	sts	0x055B, r29
    a482:	c0 93 5a 05 	sts	0x055A, r28
			}
			break;
		
	}

	return edgeCount;
    a486:	80 91 5a 05 	lds	r24, 0x055A
    a48a:	90 91 5b 05 	lds	r25, 0x055B
/* tell if the front ground sensors detect the edge of the grid. 
Returns 1 if and edge is detected and returns 0 if no edge detected.
*/

char gridEdgeDetected() {
	numEdge = gridEdgeCount(); 
    a48e:	90 93 5d 05 	sts	0x055D, r25
    a492:	80 93 5c 05 	sts	0x055C, r24
	// tell whether a gridEdge is detected or not
	if(numEdge==2) {
    a496:	80 91 5c 05 	lds	r24, 0x055C
    a49a:	90 91 5d 05 	lds	r25, 0x055D
    a49e:	20 e0       	ldi	r18, 0x00	; 0
    a4a0:	02 97       	sbiw	r24, 0x02	; 2
    a4a2:	a1 f1       	breq	.+104    	; 0xa50c <moveForwardOne+0x10e>
	while(reachedNextGrid==0) {
	//for (uint16_t gridMoveCounter = 0; gridMoveCounter < gridMoveCount; gridMoveCounter ++ ){
			setLeftSpeed(15);
			setRightSpeed(15);
			handleMotorsWithSpeedController();
			reachedNextGrid = gridEdgeDetected();
    a4a4:	20 93 ab 0b 	sts	0x0BAB, r18

/*move forwared 1 grid step
*/
void moveForwardOne(){
	reachedNextGrid = 0;
	while(reachedNextGrid==0) {
    a4a8:	80 91 ab 0b 	lds	r24, 0x0BAB
    a4ac:	88 23       	and	r24, r24
    a4ae:	a9 f5       	brne	.+106    	; 0xa51a <moveForwardOne+0x11c>
	//for (uint16_t gridMoveCounter = 0; gridMoveCounter < gridMoveCount; gridMoveCounter ++ ){
			setLeftSpeed(15);
    a4b0:	8f e0       	ldi	r24, 0x0F	; 15
    a4b2:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <setLeftSpeed>
			setRightSpeed(15);
    a4b6:	8f e0       	ldi	r24, 0x0F	; 15
    a4b8:	0e 94 13 18 	call	0x3026	; 0x3026 <setRightSpeed>
			handleMotorsWithSpeedController();
    a4bc:	0e 94 31 2a 	call	0x5462	; 0x5462 <handleMotorsWithSpeedController>

}

unsigned char blackToWhiteEdgeDetect() {

	switch(groundColor){//0 is black and 1 is white
    a4c0:	80 91 61 05 	lds	r24, 0x0561
    a4c4:	90 91 62 05 	lds	r25, 0x0562
    a4c8:	00 97       	sbiw	r24, 0x00	; 0
    a4ca:	09 f4       	brne	.+2      	; 0xa4ce <moveForwardOne+0xd0>
    a4cc:	ab cf       	rjmp	.-170    	; 0xa424 <moveForwardOne+0x26>
    a4ce:	01 97       	sbiw	r24, 0x01	; 1
    a4d0:	09 f0       	breq	.+2      	; 0xa4d4 <moveForwardOne+0xd6>
    a4d2:	be cf       	rjmp	.-132    	; 0xa450 <moveForwardOne+0x52>
				colorEdge = 0; 
			}
			break;

		case 1: //groundColor is white
			if (proximityResult[9] < gridEdgeThresh && proximityResult[10] < gridEdgeThresh) {//if current values are black
    a4d4:	80 91 87 02 	lds	r24, 0x0287
    a4d8:	90 91 88 02 	lds	r25, 0x0288
    a4dc:	8c 51       	subi	r24, 0x1C	; 28
    a4de:	92 40       	sbci	r25, 0x02	; 2
    a4e0:	38 f4       	brcc	.+14     	; 0xa4f0 <moveForwardOne+0xf2>
    a4e2:	80 91 89 02 	lds	r24, 0x0289
    a4e6:	90 91 8a 02 	lds	r25, 0x028A
    a4ea:	8c 51       	subi	r24, 0x1C	; 28
    a4ec:	92 40       	sbci	r25, 0x02	; 2
    a4ee:	38 f0       	brcs	.+14     	; 0xa4fe <moveForwardOne+0x100>
				groundColor = 0;
				colorEdge = 0; 
			}
			else {
				groundColor = 1;
    a4f0:	d0 93 62 05 	sts	0x0562, r29
    a4f4:	c0 93 61 05 	sts	0x0561, r28
				colorEdge = 0; 
    a4f8:	10 92 60 05 	sts	0x0560, r1
    a4fc:	a9 cf       	rjmp	.-174    	; 0xa450 <moveForwardOne+0x52>
			}
			break;

		case 1: //groundColor is white
			if (proximityResult[9] < gridEdgeThresh && proximityResult[10] < gridEdgeThresh) {//if current values are black
				groundColor = 0;
    a4fe:	10 92 62 05 	sts	0x0562, r1
    a502:	10 92 61 05 	sts	0x0561, r1
				colorEdge = 0; 
    a506:	10 92 60 05 	sts	0x0560, r1
    a50a:	a2 cf       	rjmp	.-188    	; 0xa450 <moveForwardOne+0x52>
*/

char gridEdgeDetected() {
	numEdge = gridEdgeCount(); 
	// tell whether a gridEdge is detected or not
	if(numEdge==2) {
    a50c:	21 e0       	ldi	r18, 0x01	; 1
	while(reachedNextGrid==0) {
	//for (uint16_t gridMoveCounter = 0; gridMoveCounter < gridMoveCount; gridMoveCounter ++ ){
			setLeftSpeed(15);
			setRightSpeed(15);
			handleMotorsWithSpeedController();
			reachedNextGrid = gridEdgeDetected();
    a50e:	20 93 ab 0b 	sts	0x0BAB, r18

/*move forwared 1 grid step
*/
void moveForwardOne(){
	reachedNextGrid = 0;
	while(reachedNextGrid==0) {
    a512:	80 91 ab 0b 	lds	r24, 0x0BAB
    a516:	88 23       	and	r24, r24
    a518:	59 f2       	breq	.-106    	; 0xa4b0 <moveForwardOne+0xb2>
			handleMotorsWithSpeedController();
			reachedNextGrid = gridEdgeDetected();
	}

	//backup into the grid itself so the Robot doesn't stop on the line
	while(reachedNextGrid == 1) {
    a51a:	80 91 ab 0b 	lds	r24, 0x0BAB
    a51e:	81 30       	cpi	r24, 0x01	; 1
    a520:	09 f0       	breq	.+2      	; 0xa524 <moveForwardOne+0x126>
    a522:	aa c0       	rjmp	.+340    	; 0xa678 <moveForwardOne+0x27a>
			if (proximityResult[9] < gridEdgeThresh && proximityResult[10] < gridEdgeThresh) {//if current values are black
				groundColor = 0;
				colorEdge = 0; 
			}
			else {
				groundColor = 1;
    a524:	c1 e0       	ldi	r28, 0x01	; 1
    a526:	d0 e0       	ldi	r29, 0x00	; 0
	switch(groundColor){//0 is black and 1 is white
		
		case 0: //groundColor is black
			if (proximityResult[9] > gridEdgeThresh && proximityResult[10] > gridEdgeThresh) {//if current values are white
				groundColor = 1;
				colorEdge = 1; 
    a528:	ff 24       	eor	r15, r15
    a52a:	f3 94       	inc	r15
			}
			break;

		case 1: 
			if(blackToWhiteEdge) {
				edgeCount = 2;
    a52c:	02 e0       	ldi	r16, 0x02	; 2
    a52e:	10 e0       	ldi	r17, 0x00	; 0
    a530:	48 c0       	rjmp	.+144    	; 0xa5c2 <moveForwardOne+0x1c4>
unsigned char blackToWhiteEdgeDetect() {

	switch(groundColor){//0 is black and 1 is white
		
		case 0: //groundColor is black
			if (proximityResult[9] > gridEdgeThresh && proximityResult[10] > gridEdgeThresh) {//if current values are white
    a532:	80 91 87 02 	lds	r24, 0x0287
    a536:	90 91 88 02 	lds	r25, 0x0288
    a53a:	8d 51       	subi	r24, 0x1D	; 29
    a53c:	92 40       	sbci	r25, 0x02	; 2
    a53e:	08 f4       	brcc	.+2      	; 0xa542 <moveForwardOne+0x144>
    a540:	8c c0       	rjmp	.+280    	; 0xa65a <moveForwardOne+0x25c>
    a542:	80 91 89 02 	lds	r24, 0x0289
    a546:	90 91 8a 02 	lds	r25, 0x028A
    a54a:	8d 51       	subi	r24, 0x1D	; 29
    a54c:	92 40       	sbci	r25, 0x02	; 2
    a54e:	08 f4       	brcc	.+2      	; 0xa552 <moveForwardOne+0x154>
    a550:	84 c0       	rjmp	.+264    	; 0xa65a <moveForwardOne+0x25c>
				groundColor = 1;
    a552:	d0 93 62 05 	sts	0x0562, r29
    a556:	c0 93 61 05 	sts	0x0561, r28
				colorEdge = 1; 
    a55a:	f0 92 60 05 	sts	0x0560, r15
			}
			break;
			
	}

	return colorEdge; 
    a55e:	80 91 60 05 	lds	r24, 0x0560

/* Counts the number of edges the robot passes over. This is used to know when the Robot 
moves fully into the next grid square. The Robot needs to cross 2 edges.
*/
int gridEdgeCount() {
	blackToWhiteEdge = blackToWhiteEdgeDetect();
    a562:	80 93 5e 05 	sts	0x055E, r24
	
	switch(edgeCount) {
    a566:	20 91 5a 05 	lds	r18, 0x055A
    a56a:	30 91 5b 05 	lds	r19, 0x055B
    a56e:	21 30       	cpi	r18, 0x01	; 1
    a570:	31 05       	cpc	r19, r1
    a572:	09 f4       	brne	.+2      	; 0xa576 <moveForwardOne+0x178>
    a574:	9c c0       	rjmp	.+312    	; 0xa6ae <moveForwardOne+0x2b0>
    a576:	22 30       	cpi	r18, 0x02	; 2
    a578:	31 05       	cpc	r19, r1
    a57a:	09 f4       	brne	.+2      	; 0xa57e <moveForwardOne+0x180>
    a57c:	83 c0       	rjmp	.+262    	; 0xa684 <moveForwardOne+0x286>
    a57e:	23 2b       	or	r18, r19
    a580:	49 f4       	brne	.+18     	; 0xa594 <moveForwardOne+0x196>
		
		case 0: 
			if(blackToWhiteEdge) {
    a582:	80 91 5e 05 	lds	r24, 0x055E
    a586:	88 23       	and	r24, r24
    a588:	09 f4       	brne	.+2      	; 0xa58c <moveForwardOne+0x18e>
    a58a:	8c c0       	rjmp	.+280    	; 0xa6a4 <moveForwardOne+0x2a6>
				edgeCount = 1;
    a58c:	d0 93 5b 05 	sts	0x055B, r29
    a590:	c0 93 5a 05 	sts	0x055A, r28
			}
			break;
		
	}

	return edgeCount;
    a594:	80 91 5a 05 	lds	r24, 0x055A
    a598:	90 91 5b 05 	lds	r25, 0x055B
/* tell if the front ground sensors detect the edge of the grid. 
Returns 1 if and edge is detected and returns 0 if no edge detected.
*/

char gridEdgeDetected() {
	numEdge = gridEdgeCount(); 
    a59c:	90 93 5d 05 	sts	0x055D, r25
    a5a0:	80 93 5c 05 	sts	0x055C, r24
	// tell whether a gridEdge is detected or not
	if(numEdge==2) {
    a5a4:	80 91 5c 05 	lds	r24, 0x055C
    a5a8:	90 91 5d 05 	lds	r25, 0x055D
    a5ac:	20 e0       	ldi	r18, 0x00	; 0
    a5ae:	02 97       	sbiw	r24, 0x02	; 2
    a5b0:	09 f4       	brne	.+2      	; 0xa5b4 <moveForwardOne+0x1b6>
    a5b2:	5a c0       	rjmp	.+180    	; 0xa668 <moveForwardOne+0x26a>
	while(reachedNextGrid == 1) {
//	while(proximityResult[9] > gridEdgeThresh && proximityResult[10] > gridEdgeThresh && reachedNextGrid == 1) { //backup until prox sensors see Black
			setLeftSpeed(-15);
			setRightSpeed(-15);
			handleMotorsWithSpeedController();
			reachedNextGrid = gridEdgeDetected();
    a5b4:	20 93 ab 0b 	sts	0x0BAB, r18
			handleMotorsWithSpeedController();
			reachedNextGrid = gridEdgeDetected();
	}

	//backup into the grid itself so the Robot doesn't stop on the line
	while(reachedNextGrid == 1) {
    a5b8:	80 91 ab 0b 	lds	r24, 0x0BAB
    a5bc:	81 30       	cpi	r24, 0x01	; 1
    a5be:	09 f0       	breq	.+2      	; 0xa5c2 <moveForwardOne+0x1c4>
    a5c0:	5b c0       	rjmp	.+182    	; 0xa678 <moveForwardOne+0x27a>
//	while(proximityResult[9] > gridEdgeThresh && proximityResult[10] > gridEdgeThresh && reachedNextGrid == 1) { //backup until prox sensors see Black
			setLeftSpeed(-15);
    a5c2:	81 ef       	ldi	r24, 0xF1	; 241
    a5c4:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <setLeftSpeed>
			setRightSpeed(-15);
    a5c8:	81 ef       	ldi	r24, 0xF1	; 241
    a5ca:	0e 94 13 18 	call	0x3026	; 0x3026 <setRightSpeed>
			handleMotorsWithSpeedController();
    a5ce:	0e 94 31 2a 	call	0x5462	; 0x5462 <handleMotorsWithSpeedController>

}

unsigned char blackToWhiteEdgeDetect() {

	switch(groundColor){//0 is black and 1 is white
    a5d2:	80 91 61 05 	lds	r24, 0x0561
    a5d6:	90 91 62 05 	lds	r25, 0x0562
    a5da:	00 97       	sbiw	r24, 0x00	; 0
    a5dc:	09 f4       	brne	.+2      	; 0xa5e0 <moveForwardOne+0x1e2>
    a5de:	a9 cf       	rjmp	.-174    	; 0xa532 <moveForwardOne+0x134>
    a5e0:	01 97       	sbiw	r24, 0x01	; 1
    a5e2:	09 f0       	breq	.+2      	; 0xa5e6 <moveForwardOne+0x1e8>
    a5e4:	bc cf       	rjmp	.-136    	; 0xa55e <moveForwardOne+0x160>
				colorEdge = 0; 
			}
			break;

		case 1: //groundColor is white
			if (proximityResult[9] < gridEdgeThresh && proximityResult[10] < gridEdgeThresh) {//if current values are black
    a5e6:	80 91 87 02 	lds	r24, 0x0287
    a5ea:	90 91 88 02 	lds	r25, 0x0288
    a5ee:	8c 51       	subi	r24, 0x1C	; 28
    a5f0:	92 40       	sbci	r25, 0x02	; 2
    a5f2:	38 f4       	brcc	.+14     	; 0xa602 <moveForwardOne+0x204>
    a5f4:	80 91 89 02 	lds	r24, 0x0289
    a5f8:	90 91 8a 02 	lds	r25, 0x028A
    a5fc:	8c 51       	subi	r24, 0x1C	; 28
    a5fe:	92 40       	sbci	r25, 0x02	; 2
    a600:	60 f1       	brcs	.+88     	; 0xa65a <moveForwardOne+0x25c>
				groundColor = 0;
				colorEdge = 0; 
			}
			else {
				groundColor = 1;
    a602:	d0 93 62 05 	sts	0x0562, r29
    a606:	c0 93 61 05 	sts	0x0561, r28
				colorEdge = 0; 
    a60a:	10 92 60 05 	sts	0x0560, r1
    a60e:	a7 cf       	rjmp	.-178    	; 0xa55e <moveForwardOne+0x160>
				edgeCount = 1;
			}
			break;

		case 2:
			whiteToBlackEdge = (proximityResult[9] < gridEdgeThresh && proximityResult[10] < gridEdgeThresh);
    a610:	80 91 87 02 	lds	r24, 0x0287
    a614:	90 91 88 02 	lds	r25, 0x0288
    a618:	8c 51       	subi	r24, 0x1C	; 28
    a61a:	92 40       	sbci	r25, 0x02	; 2
    a61c:	b8 f4       	brcc	.+46     	; 0xa64c <moveForwardOne+0x24e>
    a61e:	80 91 89 02 	lds	r24, 0x0289
    a622:	90 91 8a 02 	lds	r25, 0x028A
    a626:	8c 51       	subi	r24, 0x1C	; 28
    a628:	92 40       	sbci	r25, 0x02	; 2
    a62a:	80 f4       	brcc	.+32     	; 0xa64c <moveForwardOne+0x24e>
    a62c:	f0 92 5f 05 	sts	0x055F, r15
			if(whiteToBlackEdge) {
				edgeCount = 0;
    a630:	10 92 5b 05 	sts	0x055B, r1
    a634:	10 92 5a 05 	sts	0x055A, r1
    a638:	26 cf       	rjmp	.-436    	; 0xa486 <moveForwardOne+0x88>
				edgeCount = 0;
			}
			break;

		case 1: 
			if(blackToWhiteEdge) {
    a63a:	80 91 5e 05 	lds	r24, 0x055E
    a63e:	88 23       	and	r24, r24
    a640:	39 f4       	brne	.+14     	; 0xa650 <moveForwardOne+0x252>
				edgeCount = 2;
			}
			else{
				edgeCount = 1;
    a642:	30 93 5b 05 	sts	0x055B, r19
    a646:	20 93 5a 05 	sts	0x055A, r18
    a64a:	1d cf       	rjmp	.-454    	; 0xa486 <moveForwardOne+0x88>
			}
			break;

		case 2:
			whiteToBlackEdge = (proximityResult[9] < gridEdgeThresh && proximityResult[10] < gridEdgeThresh);
    a64c:	10 92 5f 05 	sts	0x055F, r1
			if(whiteToBlackEdge) {
				edgeCount = 0;
			}
			else{
				edgeCount = 2;
    a650:	10 93 5b 05 	sts	0x055B, r17
    a654:	00 93 5a 05 	sts	0x055A, r16
    a658:	16 cf       	rjmp	.-468    	; 0xa486 <moveForwardOne+0x88>
			}
			break;

		case 1: //groundColor is white
			if (proximityResult[9] < gridEdgeThresh && proximityResult[10] < gridEdgeThresh) {//if current values are black
				groundColor = 0;
    a65a:	10 92 62 05 	sts	0x0562, r1
    a65e:	10 92 61 05 	sts	0x0561, r1
				colorEdge = 0; 
    a662:	10 92 60 05 	sts	0x0560, r1
    a666:	7b cf       	rjmp	.-266    	; 0xa55e <moveForwardOne+0x160>
*/

char gridEdgeDetected() {
	numEdge = gridEdgeCount(); 
	// tell whether a gridEdge is detected or not
	if(numEdge==2) {
    a668:	21 e0       	ldi	r18, 0x01	; 1
	while(reachedNextGrid == 1) {
//	while(proximityResult[9] > gridEdgeThresh && proximityResult[10] > gridEdgeThresh && reachedNextGrid == 1) { //backup until prox sensors see Black
			setLeftSpeed(-15);
			setRightSpeed(-15);
			handleMotorsWithSpeedController();
			reachedNextGrid = gridEdgeDetected();
    a66a:	20 93 ab 0b 	sts	0x0BAB, r18
			handleMotorsWithSpeedController();
			reachedNextGrid = gridEdgeDetected();
	}

	//backup into the grid itself so the Robot doesn't stop on the line
	while(reachedNextGrid == 1) {
    a66e:	80 91 ab 0b 	lds	r24, 0x0BAB
    a672:	81 30       	cpi	r24, 0x01	; 1
    a674:	09 f4       	brne	.+2      	; 0xa678 <moveForwardOne+0x27a>
    a676:	a5 cf       	rjmp	.-182    	; 0xa5c2 <moveForwardOne+0x1c4>
			handleMotorsWithSpeedController();
			reachedNextGrid = gridEdgeDetected();

	}

}
    a678:	df 91       	pop	r29
    a67a:	cf 91       	pop	r28
    a67c:	1f 91       	pop	r17
    a67e:	0f 91       	pop	r16
    a680:	ff 90       	pop	r15
    a682:	08 95       	ret
				edgeCount = 1;
			}
			break;

		case 2:
			whiteToBlackEdge = (proximityResult[9] < gridEdgeThresh && proximityResult[10] < gridEdgeThresh);
    a684:	80 91 87 02 	lds	r24, 0x0287
    a688:	90 91 88 02 	lds	r25, 0x0288
    a68c:	8c 51       	subi	r24, 0x1C	; 28
    a68e:	92 40       	sbci	r25, 0x02	; 2
    a690:	b8 f4       	brcc	.+46     	; 0xa6c0 <moveForwardOne+0x2c2>
    a692:	80 91 89 02 	lds	r24, 0x0289
    a696:	90 91 8a 02 	lds	r25, 0x028A
    a69a:	8c 51       	subi	r24, 0x1C	; 28
    a69c:	92 40       	sbci	r25, 0x02	; 2
    a69e:	80 f4       	brcc	.+32     	; 0xa6c0 <moveForwardOne+0x2c2>
    a6a0:	f0 92 5f 05 	sts	0x055F, r15
			if(whiteToBlackEdge) {
				edgeCount = 0;
    a6a4:	10 92 5b 05 	sts	0x055B, r1
    a6a8:	10 92 5a 05 	sts	0x055A, r1
    a6ac:	73 cf       	rjmp	.-282    	; 0xa594 <moveForwardOne+0x196>
				edgeCount = 0;
			}
			break;

		case 1: 
			if(blackToWhiteEdge) {
    a6ae:	80 91 5e 05 	lds	r24, 0x055E
    a6b2:	88 23       	and	r24, r24
    a6b4:	39 f4       	brne	.+14     	; 0xa6c4 <moveForwardOne+0x2c6>
				edgeCount = 2;
			}
			else{
				edgeCount = 1;
    a6b6:	30 93 5b 05 	sts	0x055B, r19
    a6ba:	20 93 5a 05 	sts	0x055A, r18
    a6be:	6a cf       	rjmp	.-300    	; 0xa594 <moveForwardOne+0x196>
			}
			break;

		case 2:
			whiteToBlackEdge = (proximityResult[9] < gridEdgeThresh && proximityResult[10] < gridEdgeThresh);
    a6c0:	10 92 5f 05 	sts	0x055F, r1
			if(whiteToBlackEdge) {
				edgeCount = 0;
			}
			else{
				edgeCount = 2;
    a6c4:	10 93 5b 05 	sts	0x055B, r17
    a6c8:	00 93 5a 05 	sts	0x055A, r16
    a6cc:	63 cf       	rjmp	.-314    	; 0xa594 <moveForwardOne+0x196>

0000a6ce <moveForward>:
}


/*move forward x amount grid step
*/
void moveForward(int gridSteps) {
    a6ce:	cf 93       	push	r28
    a6d0:	df 93       	push	r29
    a6d2:	ec 01       	movw	r28, r24
	for (gridStepCounter = 0; gridStepCounter < gridSteps; gridStepCounter++) {
    a6d4:	10 92 59 05 	sts	0x0559, r1
    a6d8:	80 91 59 05 	lds	r24, 0x0559
    a6dc:	90 e0       	ldi	r25, 0x00	; 0
    a6de:	8c 17       	cp	r24, r28
    a6e0:	9d 07       	cpc	r25, r29
    a6e2:	6c f4       	brge	.+26     	; 0xa6fe <moveForward+0x30>
		moveForwardOne();
    a6e4:	0e 94 ff 51 	call	0xa3fe	; 0xa3fe <moveForwardOne>


/*move forward x amount grid step
*/
void moveForward(int gridSteps) {
	for (gridStepCounter = 0; gridStepCounter < gridSteps; gridStepCounter++) {
    a6e8:	80 91 59 05 	lds	r24, 0x0559
    a6ec:	8f 5f       	subi	r24, 0xFF	; 255
    a6ee:	80 93 59 05 	sts	0x0559, r24
    a6f2:	80 91 59 05 	lds	r24, 0x0559
    a6f6:	90 e0       	ldi	r25, 0x00	; 0
    a6f8:	8c 17       	cp	r24, r28
    a6fa:	9d 07       	cpc	r25, r29
    a6fc:	9c f3       	brlt	.-26     	; 0xa6e4 <moveForward+0x16>
		moveForwardOne();
	}
}
    a6fe:	df 91       	pop	r29
    a700:	cf 91       	pop	r28
    a702:	08 95       	ret

0000a704 <getMap>:
int myArray[cols][rows] = { 	{0, 0, 0, 2},
                        		{0, 0, 0, 0},
                        		{0, 0, 0, 0},
                        		{0, 0, 0, 3}  };							

void getMap() {
    a704:	cf 93       	push	r28
    a706:	df 93       	push	r29
    a708:	c6 e1       	ldi	r28, 0x16	; 22
    a70a:	d2 e0       	ldi	r29, 0x02	; 2
    

   for (int i = 0; i < cols; i++) {
    	for (int j = 0; j < rows; j++) {
	      	   
    		if (myArray[i][j] == 0)
    a70c:	88 81       	ld	r24, Y
    a70e:	99 81       	ldd	r25, Y+1	; 0x01
    a710:	00 97       	sbiw	r24, 0x00	; 0
    a712:	09 f4       	brne	.+2      	; 0xa716 <getMap+0x12>
    a714:	63 c0       	rjmp	.+198    	; 0xa7dc <getMap+0xd8>
					moveForward(1);
					GREEN_LED1_ON;
								
							
	 			}                 
    		else  if (myArray[i][j] == 1)
    a716:	81 30       	cpi	r24, 0x01	; 1
    a718:	91 05       	cpc	r25, r1
    a71a:	09 f4       	brne	.+2      	; 0xa71e <getMap+0x1a>
    a71c:	95 c0       	rjmp	.+298    	; 0xa848 <getMap+0x144>
			        turnRight();
					moveForward(1);
					GREEN_LED2_ON;										
								
	 			}
            else if (myArray[i][j] == 2)
    a71e:	02 97       	sbiw	r24, 0x02	; 2
    a720:	09 f0       	breq	.+2      	; 0xa724 <getMap+0x20>
    a722:	53 c0       	rjmp	.+166    	; 0xa7ca <getMap+0xc6>
				{
	    			
							    
			        turn180();
    a724:	0e 94 e6 4f 	call	0x9fcc	; 0x9fcc <turn180>
					moveForward(1);
    a728:	81 e0       	ldi	r24, 0x01	; 1
    a72a:	90 e0       	ldi	r25, 0x00	; 0
    a72c:	0e 94 67 53 	call	0xa6ce	; 0xa6ce <moveForward>
					GREEN_LED3_ON;										
    a730:	a3 98       	cbi	0x14, 3	; 20
					stopWait(1);
		            }

			   }

			stopWait(1); 	 		
    a732:	81 e0       	ldi	r24, 0x01	; 1
    a734:	0e 94 da 4f 	call	0x9fb4	; 0x9fb4 <stopWait>
    

   for (int i = 0; i < cols; i++) {
    	for (int j = 0; j < rows; j++) {
	      	   
    		if (myArray[i][j] == 0)
    a738:	8a 81       	ldd	r24, Y+2	; 0x02
    a73a:	9b 81       	ldd	r25, Y+3	; 0x03
    a73c:	00 97       	sbiw	r24, 0x00	; 0
    a73e:	09 f4       	brne	.+2      	; 0xa742 <getMap+0x3e>
    a740:	5e c0       	rjmp	.+188    	; 0xa7fe <getMap+0xfa>
					moveForward(1);
					GREEN_LED1_ON;
								
							
	 			}                 
    		else  if (myArray[i][j] == 1)
    a742:	81 30       	cpi	r24, 0x01	; 1
    a744:	91 05       	cpc	r25, r1
    a746:	09 f4       	brne	.+2      	; 0xa74a <getMap+0x46>
    a748:	a3 c0       	rjmp	.+326    	; 0xa890 <getMap+0x18c>
			        turnRight();
					moveForward(1);
					GREEN_LED2_ON;										
								
	 			}
            else if (myArray[i][j] == 2)
    a74a:	02 97       	sbiw	r24, 0x02	; 2
    a74c:	09 f0       	breq	.+2      	; 0xa750 <getMap+0x4c>
    a74e:	3d c0       	rjmp	.+122    	; 0xa7ca <getMap+0xc6>
				{
	    			
							    
			        turn180();
    a750:	0e 94 e6 4f 	call	0x9fcc	; 0x9fcc <turn180>
					moveForward(1);
    a754:	81 e0       	ldi	r24, 0x01	; 1
    a756:	90 e0       	ldi	r25, 0x00	; 0
    a758:	0e 94 67 53 	call	0xa6ce	; 0xa6ce <moveForward>
					GREEN_LED3_ON;										
    a75c:	a3 98       	cbi	0x14, 3	; 20
					stopWait(1);
		            }

			   }

			stopWait(1); 	 		
    a75e:	81 e0       	ldi	r24, 0x01	; 1
    a760:	0e 94 da 4f 	call	0x9fb4	; 0x9fb4 <stopWait>
    

   for (int i = 0; i < cols; i++) {
    	for (int j = 0; j < rows; j++) {
	      	   
    		if (myArray[i][j] == 0)
    a764:	8c 81       	ldd	r24, Y+4	; 0x04
    a766:	9d 81       	ldd	r25, Y+5	; 0x05
    a768:	00 97       	sbiw	r24, 0x00	; 0
    a76a:	09 f4       	brne	.+2      	; 0xa76e <getMap+0x6a>
    a76c:	59 c0       	rjmp	.+178    	; 0xa820 <getMap+0x11c>
					moveForward(1);
					GREEN_LED1_ON;
								
							
	 			}                 
    		else  if (myArray[i][j] == 1)
    a76e:	81 30       	cpi	r24, 0x01	; 1
    a770:	91 05       	cpc	r25, r1
    a772:	09 f4       	brne	.+2      	; 0xa776 <getMap+0x72>
    a774:	81 c0       	rjmp	.+258    	; 0xa878 <getMap+0x174>
			        turnRight();
					moveForward(1);
					GREEN_LED2_ON;										
								
	 			}
            else if (myArray[i][j] == 2)
    a776:	02 97       	sbiw	r24, 0x02	; 2
    a778:	41 f5       	brne	.+80     	; 0xa7ca <getMap+0xc6>
				{
	    			
							    
			        turn180();
    a77a:	0e 94 e6 4f 	call	0x9fcc	; 0x9fcc <turn180>
					moveForward(1);
    a77e:	81 e0       	ldi	r24, 0x01	; 1
    a780:	90 e0       	ldi	r25, 0x00	; 0
    a782:	0e 94 67 53 	call	0xa6ce	; 0xa6ce <moveForward>
					GREEN_LED3_ON;										
    a786:	a3 98       	cbi	0x14, 3	; 20
					stopWait(1);
		            }

			   }

			stopWait(1); 	 		
    a788:	81 e0       	ldi	r24, 0x01	; 1
    a78a:	0e 94 da 4f 	call	0x9fb4	; 0x9fb4 <stopWait>
    

   for (int i = 0; i < cols; i++) {
    	for (int j = 0; j < rows; j++) {
	      	   
    		if (myArray[i][j] == 0)
    a78e:	8e 81       	ldd	r24, Y+6	; 0x06
    a790:	9f 81       	ldd	r25, Y+7	; 0x07
    a792:	00 97       	sbiw	r24, 0x00	; 0
    a794:	09 f4       	brne	.+2      	; 0xa798 <getMap+0x94>
    a796:	4e c0       	rjmp	.+156    	; 0xa834 <getMap+0x130>
					moveForward(1);
					GREEN_LED1_ON;
								
							
	 			}                 
    		else  if (myArray[i][j] == 1)
    a798:	81 30       	cpi	r24, 0x01	; 1
    a79a:	91 05       	cpc	r25, r1
    a79c:	09 f4       	brne	.+2      	; 0xa7a0 <getMap+0x9c>
    a79e:	60 c0       	rjmp	.+192    	; 0xa860 <getMap+0x15c>
			        turnRight();
					moveForward(1);
					GREEN_LED2_ON;										
								
	 			}
            else if (myArray[i][j] == 2)
    a7a0:	02 97       	sbiw	r24, 0x02	; 2
    a7a2:	99 f4       	brne	.+38     	; 0xa7ca <getMap+0xc6>
				{
	    			
							    
			        turn180();
    a7a4:	0e 94 e6 4f 	call	0x9fcc	; 0x9fcc <turn180>
					moveForward(1);
    a7a8:	81 e0       	ldi	r24, 0x01	; 1
    a7aa:	90 e0       	ldi	r25, 0x00	; 0
    a7ac:	0e 94 67 53 	call	0xa6ce	; 0xa6ce <moveForward>
					GREEN_LED3_ON;										
    a7b0:	a3 98       	cbi	0x14, 3	; 20
					stopWait(1);
		            }

			   }

			stopWait(1); 	 		
    a7b2:	81 e0       	ldi	r24, 0x01	; 1
    a7b4:	0e 94 da 4f 	call	0x9fb4	; 0x9fb4 <stopWait>
    a7b8:	28 96       	adiw	r28, 0x08	; 8
                        		{0, 0, 0, 3}  };							

void getMap() {
    

   for (int i = 0; i < cols; i++) {
    a7ba:	82 e0       	ldi	r24, 0x02	; 2
    a7bc:	c6 33       	cpi	r28, 0x36	; 54
    a7be:	d8 07       	cpc	r29, r24
    a7c0:	09 f0       	breq	.+2      	; 0xa7c4 <getMap+0xc0>
    a7c2:	a4 cf       	rjmp	.-184    	; 0xa70c <getMap+0x8>
	

      }
	  	 
    
}
    a7c4:	df 91       	pop	r29
    a7c6:	cf 91       	pop	r28
    a7c8:	08 95       	ret
								
	 			}
             else // if 3
			  {
			  	    while(1){
					GREEN_LED3_ON;
    a7ca:	a3 98       	cbi	0x14, 3	; 20
					stopWait(1);
    a7cc:	81 e0       	ldi	r24, 0x01	; 1
    a7ce:	0e 94 da 4f 	call	0x9fb4	; 0x9fb4 <stopWait>
								
	 			}
             else // if 3
			  {
			  	    while(1){
					GREEN_LED3_ON;
    a7d2:	a3 98       	cbi	0x14, 3	; 20
					stopWait(1);
    a7d4:	81 e0       	ldi	r24, 0x01	; 1
    a7d6:	0e 94 da 4f 	call	0x9fb4	; 0x9fb4 <stopWait>
    a7da:	f7 cf       	rjmp	.-18     	; 0xa7ca <getMap+0xc6>
    	for (int j = 0; j < rows; j++) {
	      	   
    		if (myArray[i][j] == 0)
				{
       			    	
					moveForward(1);
    a7dc:	81 e0       	ldi	r24, 0x01	; 1
    a7de:	90 e0       	ldi	r25, 0x00	; 0
    a7e0:	0e 94 67 53 	call	0xa6ce	; 0xa6ce <moveForward>
					GREEN_LED1_ON;
    a7e4:	80 91 0b 01 	lds	r24, 0x010B
    a7e8:	8d 7f       	andi	r24, 0xFD	; 253
    a7ea:	80 93 0b 01 	sts	0x010B, r24
					stopWait(1);
		            }

			   }

			stopWait(1); 	 		
    a7ee:	81 e0       	ldi	r24, 0x01	; 1
    a7f0:	0e 94 da 4f 	call	0x9fb4	; 0x9fb4 <stopWait>
    

   for (int i = 0; i < cols; i++) {
    	for (int j = 0; j < rows; j++) {
	      	   
    		if (myArray[i][j] == 0)
    a7f4:	8a 81       	ldd	r24, Y+2	; 0x02
    a7f6:	9b 81       	ldd	r25, Y+3	; 0x03
    a7f8:	00 97       	sbiw	r24, 0x00	; 0
    a7fa:	09 f0       	breq	.+2      	; 0xa7fe <getMap+0xfa>
    a7fc:	a2 cf       	rjmp	.-188    	; 0xa742 <getMap+0x3e>
				{
       			    	
					moveForward(1);
    a7fe:	81 e0       	ldi	r24, 0x01	; 1
    a800:	90 e0       	ldi	r25, 0x00	; 0
    a802:	0e 94 67 53 	call	0xa6ce	; 0xa6ce <moveForward>
					GREEN_LED1_ON;
    a806:	80 91 0b 01 	lds	r24, 0x010B
    a80a:	8d 7f       	andi	r24, 0xFD	; 253
    a80c:	80 93 0b 01 	sts	0x010B, r24
					stopWait(1);
		            }

			   }

			stopWait(1); 	 		
    a810:	81 e0       	ldi	r24, 0x01	; 1
    a812:	0e 94 da 4f 	call	0x9fb4	; 0x9fb4 <stopWait>
    

   for (int i = 0; i < cols; i++) {
    	for (int j = 0; j < rows; j++) {
	      	   
    		if (myArray[i][j] == 0)
    a816:	8c 81       	ldd	r24, Y+4	; 0x04
    a818:	9d 81       	ldd	r25, Y+5	; 0x05
    a81a:	00 97       	sbiw	r24, 0x00	; 0
    a81c:	09 f0       	breq	.+2      	; 0xa820 <getMap+0x11c>
    a81e:	a7 cf       	rjmp	.-178    	; 0xa76e <getMap+0x6a>
				{
       			    	
					moveForward(1);
    a820:	81 e0       	ldi	r24, 0x01	; 1
    a822:	90 e0       	ldi	r25, 0x00	; 0
    a824:	0e 94 67 53 	call	0xa6ce	; 0xa6ce <moveForward>
					GREEN_LED1_ON;
    a828:	80 91 0b 01 	lds	r24, 0x010B
    a82c:	8d 7f       	andi	r24, 0xFD	; 253
    a82e:	80 93 0b 01 	sts	0x010B, r24
    a832:	aa cf       	rjmp	.-172    	; 0xa788 <getMap+0x84>
    	for (int j = 0; j < rows; j++) {
	      	   
    		if (myArray[i][j] == 0)
				{
       			    	
					moveForward(1);
    a834:	81 e0       	ldi	r24, 0x01	; 1
    a836:	90 e0       	ldi	r25, 0x00	; 0
    a838:	0e 94 67 53 	call	0xa6ce	; 0xa6ce <moveForward>
					GREEN_LED1_ON;
    a83c:	80 91 0b 01 	lds	r24, 0x010B
    a840:	8d 7f       	andi	r24, 0xFD	; 253
    a842:	80 93 0b 01 	sts	0x010B, r24
    a846:	b5 cf       	rjmp	.-150    	; 0xa7b2 <getMap+0xae>
	 			}                 
    		else  if (myArray[i][j] == 1)
				{
	    			
							    
			        turnRight();
    a848:	0e 94 30 50 	call	0xa060	; 0xa060 <turnRight>
					moveForward(1);
    a84c:	81 e0       	ldi	r24, 0x01	; 1
    a84e:	90 e0       	ldi	r25, 0x00	; 0
    a850:	0e 94 67 53 	call	0xa6ce	; 0xa6ce <moveForward>
					GREEN_LED2_ON;										
    a854:	80 91 0b 01 	lds	r24, 0x010B
    a858:	8b 7f       	andi	r24, 0xFB	; 251
    a85a:	80 93 0b 01 	sts	0x010B, r24
    a85e:	69 cf       	rjmp	.-302    	; 0xa732 <getMap+0x2e>
	 			}                 
    		else  if (myArray[i][j] == 1)
				{
	    			
							    
			        turnRight();
    a860:	0e 94 30 50 	call	0xa060	; 0xa060 <turnRight>
					moveForward(1);
    a864:	81 e0       	ldi	r24, 0x01	; 1
    a866:	90 e0       	ldi	r25, 0x00	; 0
    a868:	0e 94 67 53 	call	0xa6ce	; 0xa6ce <moveForward>
					GREEN_LED2_ON;										
    a86c:	80 91 0b 01 	lds	r24, 0x010B
    a870:	8b 7f       	andi	r24, 0xFB	; 251
    a872:	80 93 0b 01 	sts	0x010B, r24
    a876:	9d cf       	rjmp	.-198    	; 0xa7b2 <getMap+0xae>
	 			}                 
    		else  if (myArray[i][j] == 1)
				{
	    			
							    
			        turnRight();
    a878:	0e 94 30 50 	call	0xa060	; 0xa060 <turnRight>
					moveForward(1);
    a87c:	81 e0       	ldi	r24, 0x01	; 1
    a87e:	90 e0       	ldi	r25, 0x00	; 0
    a880:	0e 94 67 53 	call	0xa6ce	; 0xa6ce <moveForward>
					GREEN_LED2_ON;										
    a884:	80 91 0b 01 	lds	r24, 0x010B
    a888:	8b 7f       	andi	r24, 0xFB	; 251
    a88a:	80 93 0b 01 	sts	0x010B, r24
    a88e:	7c cf       	rjmp	.-264    	; 0xa788 <getMap+0x84>
	 			}                 
    		else  if (myArray[i][j] == 1)
				{
	    			
							    
			        turnRight();
    a890:	0e 94 30 50 	call	0xa060	; 0xa060 <turnRight>
					moveForward(1);
    a894:	81 e0       	ldi	r24, 0x01	; 1
    a896:	90 e0       	ldi	r25, 0x00	; 0
    a898:	0e 94 67 53 	call	0xa6ce	; 0xa6ce <moveForward>
					GREEN_LED2_ON;										
    a89c:	80 91 0b 01 	lds	r24, 0x010B
    a8a0:	8b 7f       	andi	r24, 0xFB	; 251
    a8a2:	80 93 0b 01 	sts	0x010B, r24
    a8a6:	5b cf       	rjmp	.-330    	; 0xa75e <getMap+0x5a>

0000a8a8 <gridNavigation>:
#include "movement.h"
#include "gridNavigation.h"

void gridNavigation() {
    a8a8:	cf 93       	push	r28
    a8aa:	df 93       	push	r29

		turnLeft();
    a8ac:	0e 94 78 50 	call	0xa0f0	; 0xa0f0 <turnLeft>
		moveForward(1);
    a8b0:	81 e0       	ldi	r24, 0x01	; 1
    a8b2:	90 e0       	ldi	r25, 0x00	; 0
    a8b4:	0e 94 67 53 	call	0xa6ce	; 0xa6ce <moveForward>
		turnRight();
    a8b8:	0e 94 30 50 	call	0xa060	; 0xa060 <turnRight>
		moveForward(1);
    a8bc:	81 e0       	ldi	r24, 0x01	; 1
    a8be:	90 e0       	ldi	r25, 0x00	; 0
    a8c0:	0e 94 67 53 	call	0xa6ce	; 0xa6ce <moveForward>
		turn180(); 
    a8c4:	0e 94 e6 4f 	call	0x9fcc	; 0x9fcc <turn180>
		moveForward(1);
    a8c8:	81 e0       	ldi	r24, 0x01	; 1
    a8ca:	90 e0       	ldi	r25, 0x00	; 0
    a8cc:	0e 94 67 53 	call	0xa6ce	; 0xa6ce <moveForward>
		turn180();
    a8d0:	0e 94 e6 4f 	call	0x9fcc	; 0x9fcc <turn180>
    a8d4:	c0 e0       	ldi	r28, 0x00	; 0
    a8d6:	d0 e0       	ldi	r29, 0x00	; 0
		for(int temp = 0 ; temp<1000; temp++){
			stopWait(1);
    a8d8:	81 e0       	ldi	r24, 0x01	; 1
    a8da:	0e 94 da 4f 	call	0x9fb4	; 0x9fb4 <stopWait>
    a8de:	21 96       	adiw	r28, 0x01	; 1
		turnRight();
		moveForward(1);
		turn180(); 
		moveForward(1);
		turn180();
		for(int temp = 0 ; temp<1000; temp++){
    a8e0:	83 e0       	ldi	r24, 0x03	; 3
    a8e2:	c8 3e       	cpi	r28, 0xE8	; 232
    a8e4:	d8 07       	cpc	r29, r24
    a8e6:	c1 f7       	brne	.-16     	; 0xa8d8 <gridNavigation+0x30>
			stopWait(1);
		}
		moveForward(3);
    a8e8:	83 e0       	ldi	r24, 0x03	; 3
    a8ea:	90 e0       	ldi	r25, 0x00	; 0
    a8ec:	0e 94 67 53 	call	0xa6ce	; 0xa6ce <moveForward>

		while(1){
			stopWait(1);
    a8f0:	81 e0       	ldi	r24, 0x01	; 1
    a8f2:	0e 94 da 4f 	call	0x9fb4	; 0x9fb4 <stopWait>
    a8f6:	fc cf       	rjmp	.-8      	; 0xa8f0 <gridNavigation+0x48>

0000a8f8 <__subsf3>:
    a8f8:	50 58       	subi	r21, 0x80	; 128

0000a8fa <__addsf3>:
    a8fa:	bb 27       	eor	r27, r27
    a8fc:	aa 27       	eor	r26, r26
    a8fe:	0e d0       	rcall	.+28     	; 0xa91c <__addsf3x>
    a900:	27 c2       	rjmp	.+1102   	; 0xad50 <__fp_round>
    a902:	f0 d1       	rcall	.+992    	; 0xace4 <__fp_pscA>
    a904:	30 f0       	brcs	.+12     	; 0xa912 <__addsf3+0x18>
    a906:	f5 d1       	rcall	.+1002   	; 0xacf2 <__fp_pscB>
    a908:	20 f0       	brcs	.+8      	; 0xa912 <__addsf3+0x18>
    a90a:	31 f4       	brne	.+12     	; 0xa918 <__addsf3+0x1e>
    a90c:	9f 3f       	cpi	r25, 0xFF	; 255
    a90e:	11 f4       	brne	.+4      	; 0xa914 <__addsf3+0x1a>
    a910:	1e f4       	brtc	.+6      	; 0xa918 <__addsf3+0x1e>
    a912:	c0 c1       	rjmp	.+896    	; 0xac94 <__fp_nan>
    a914:	0e f4       	brtc	.+2      	; 0xa918 <__addsf3+0x1e>
    a916:	e0 95       	com	r30
    a918:	e7 fb       	bst	r30, 7
    a91a:	b6 c1       	rjmp	.+876    	; 0xac88 <__fp_inf>

0000a91c <__addsf3x>:
    a91c:	e9 2f       	mov	r30, r25
    a91e:	3a d2       	rcall	.+1140   	; 0xad94 <__fp_split3>
    a920:	80 f3       	brcs	.-32     	; 0xa902 <__addsf3+0x8>
    a922:	ba 17       	cp	r27, r26
    a924:	62 07       	cpc	r22, r18
    a926:	73 07       	cpc	r23, r19
    a928:	84 07       	cpc	r24, r20
    a92a:	95 07       	cpc	r25, r21
    a92c:	18 f0       	brcs	.+6      	; 0xa934 <__addsf3x+0x18>
    a92e:	71 f4       	brne	.+28     	; 0xa94c <__addsf3x+0x30>
    a930:	9e f5       	brtc	.+102    	; 0xa998 <__addsf3x+0x7c>
    a932:	52 c2       	rjmp	.+1188   	; 0xadd8 <__fp_zero>
    a934:	0e f4       	brtc	.+2      	; 0xa938 <__addsf3x+0x1c>
    a936:	e0 95       	com	r30
    a938:	0b 2e       	mov	r0, r27
    a93a:	ba 2f       	mov	r27, r26
    a93c:	a0 2d       	mov	r26, r0
    a93e:	0b 01       	movw	r0, r22
    a940:	b9 01       	movw	r22, r18
    a942:	90 01       	movw	r18, r0
    a944:	0c 01       	movw	r0, r24
    a946:	ca 01       	movw	r24, r20
    a948:	a0 01       	movw	r20, r0
    a94a:	11 24       	eor	r1, r1
    a94c:	ff 27       	eor	r31, r31
    a94e:	59 1b       	sub	r21, r25
    a950:	99 f0       	breq	.+38     	; 0xa978 <__addsf3x+0x5c>
    a952:	59 3f       	cpi	r21, 0xF9	; 249
    a954:	50 f4       	brcc	.+20     	; 0xa96a <__addsf3x+0x4e>
    a956:	50 3e       	cpi	r21, 0xE0	; 224
    a958:	68 f1       	brcs	.+90     	; 0xa9b4 <__addsf3x+0x98>
    a95a:	1a 16       	cp	r1, r26
    a95c:	f0 40       	sbci	r31, 0x00	; 0
    a95e:	a2 2f       	mov	r26, r18
    a960:	23 2f       	mov	r18, r19
    a962:	34 2f       	mov	r19, r20
    a964:	44 27       	eor	r20, r20
    a966:	58 5f       	subi	r21, 0xF8	; 248
    a968:	f3 cf       	rjmp	.-26     	; 0xa950 <__addsf3x+0x34>
    a96a:	46 95       	lsr	r20
    a96c:	37 95       	ror	r19
    a96e:	27 95       	ror	r18
    a970:	a7 95       	ror	r26
    a972:	f0 40       	sbci	r31, 0x00	; 0
    a974:	53 95       	inc	r21
    a976:	c9 f7       	brne	.-14     	; 0xa96a <__addsf3x+0x4e>
    a978:	7e f4       	brtc	.+30     	; 0xa998 <__addsf3x+0x7c>
    a97a:	1f 16       	cp	r1, r31
    a97c:	ba 0b       	sbc	r27, r26
    a97e:	62 0b       	sbc	r22, r18
    a980:	73 0b       	sbc	r23, r19
    a982:	84 0b       	sbc	r24, r20
    a984:	ba f0       	brmi	.+46     	; 0xa9b4 <__addsf3x+0x98>
    a986:	91 50       	subi	r25, 0x01	; 1
    a988:	a1 f0       	breq	.+40     	; 0xa9b2 <__addsf3x+0x96>
    a98a:	ff 0f       	add	r31, r31
    a98c:	bb 1f       	adc	r27, r27
    a98e:	66 1f       	adc	r22, r22
    a990:	77 1f       	adc	r23, r23
    a992:	88 1f       	adc	r24, r24
    a994:	c2 f7       	brpl	.-16     	; 0xa986 <__addsf3x+0x6a>
    a996:	0e c0       	rjmp	.+28     	; 0xa9b4 <__addsf3x+0x98>
    a998:	ba 0f       	add	r27, r26
    a99a:	62 1f       	adc	r22, r18
    a99c:	73 1f       	adc	r23, r19
    a99e:	84 1f       	adc	r24, r20
    a9a0:	48 f4       	brcc	.+18     	; 0xa9b4 <__addsf3x+0x98>
    a9a2:	87 95       	ror	r24
    a9a4:	77 95       	ror	r23
    a9a6:	67 95       	ror	r22
    a9a8:	b7 95       	ror	r27
    a9aa:	f7 95       	ror	r31
    a9ac:	9e 3f       	cpi	r25, 0xFE	; 254
    a9ae:	08 f0       	brcs	.+2      	; 0xa9b2 <__addsf3x+0x96>
    a9b0:	b3 cf       	rjmp	.-154    	; 0xa918 <__addsf3+0x1e>
    a9b2:	93 95       	inc	r25
    a9b4:	88 0f       	add	r24, r24
    a9b6:	08 f0       	brcs	.+2      	; 0xa9ba <__addsf3x+0x9e>
    a9b8:	99 27       	eor	r25, r25
    a9ba:	ee 0f       	add	r30, r30
    a9bc:	97 95       	ror	r25
    a9be:	87 95       	ror	r24
    a9c0:	08 95       	ret
    a9c2:	90 d1       	rcall	.+800    	; 0xace4 <__fp_pscA>
    a9c4:	58 f0       	brcs	.+22     	; 0xa9dc <__addsf3x+0xc0>
    a9c6:	80 e8       	ldi	r24, 0x80	; 128
    a9c8:	91 e0       	ldi	r25, 0x01	; 1
    a9ca:	09 f4       	brne	.+2      	; 0xa9ce <__addsf3x+0xb2>
    a9cc:	9e ef       	ldi	r25, 0xFE	; 254
    a9ce:	91 d1       	rcall	.+802    	; 0xacf2 <__fp_pscB>
    a9d0:	28 f0       	brcs	.+10     	; 0xa9dc <__addsf3x+0xc0>
    a9d2:	40 e8       	ldi	r20, 0x80	; 128
    a9d4:	51 e0       	ldi	r21, 0x01	; 1
    a9d6:	59 f4       	brne	.+22     	; 0xa9ee <atan2+0xe>
    a9d8:	5e ef       	ldi	r21, 0xFE	; 254
    a9da:	09 c0       	rjmp	.+18     	; 0xa9ee <atan2+0xe>
    a9dc:	5b c1       	rjmp	.+694    	; 0xac94 <__fp_nan>
    a9de:	fc c1       	rjmp	.+1016   	; 0xadd8 <__fp_zero>

0000a9e0 <atan2>:
    a9e0:	e9 2f       	mov	r30, r25
    a9e2:	e0 78       	andi	r30, 0x80	; 128
    a9e4:	d7 d1       	rcall	.+942    	; 0xad94 <__fp_split3>
    a9e6:	68 f3       	brcs	.-38     	; 0xa9c2 <__addsf3x+0xa6>
    a9e8:	09 2e       	mov	r0, r25
    a9ea:	05 2a       	or	r0, r21
    a9ec:	c1 f3       	breq	.-16     	; 0xa9de <__addsf3x+0xc2>
    a9ee:	26 17       	cp	r18, r22
    a9f0:	37 07       	cpc	r19, r23
    a9f2:	48 07       	cpc	r20, r24
    a9f4:	59 07       	cpc	r21, r25
    a9f6:	38 f0       	brcs	.+14     	; 0xaa06 <atan2+0x26>
    a9f8:	0e 2e       	mov	r0, r30
    a9fa:	07 f8       	bld	r0, 7
    a9fc:	e0 25       	eor	r30, r0
    a9fe:	69 f0       	breq	.+26     	; 0xaa1a <atan2+0x3a>
    aa00:	e0 25       	eor	r30, r0
    aa02:	e0 64       	ori	r30, 0x40	; 64
    aa04:	0a c0       	rjmp	.+20     	; 0xaa1a <atan2+0x3a>
    aa06:	ef 63       	ori	r30, 0x3F	; 63
    aa08:	07 f8       	bld	r0, 7
    aa0a:	00 94       	com	r0
    aa0c:	07 fa       	bst	r0, 7
    aa0e:	db 01       	movw	r26, r22
    aa10:	b9 01       	movw	r22, r18
    aa12:	9d 01       	movw	r18, r26
    aa14:	dc 01       	movw	r26, r24
    aa16:	ca 01       	movw	r24, r20
    aa18:	ad 01       	movw	r20, r26
    aa1a:	ef 93       	push	r30
    aa1c:	4a d0       	rcall	.+148    	; 0xaab2 <__divsf3_pse>
    aa1e:	98 d1       	rcall	.+816    	; 0xad50 <__fp_round>
    aa20:	0a d0       	rcall	.+20     	; 0xaa36 <atan>
    aa22:	5f 91       	pop	r21
    aa24:	55 23       	and	r21, r21
    aa26:	31 f0       	breq	.+12     	; 0xaa34 <atan2+0x54>
    aa28:	2b ed       	ldi	r18, 0xDB	; 219
    aa2a:	3f e0       	ldi	r19, 0x0F	; 15
    aa2c:	49 e4       	ldi	r20, 0x49	; 73
    aa2e:	50 fd       	sbrc	r21, 0
    aa30:	49 ec       	ldi	r20, 0xC9	; 201
    aa32:	63 cf       	rjmp	.-314    	; 0xa8fa <__addsf3>
    aa34:	08 95       	ret

0000aa36 <atan>:
    aa36:	df 93       	push	r29
    aa38:	dd 27       	eor	r29, r29
    aa3a:	b9 2f       	mov	r27, r25
    aa3c:	bf 77       	andi	r27, 0x7F	; 127
    aa3e:	40 e8       	ldi	r20, 0x80	; 128
    aa40:	5f e3       	ldi	r21, 0x3F	; 63
    aa42:	16 16       	cp	r1, r22
    aa44:	17 06       	cpc	r1, r23
    aa46:	48 07       	cpc	r20, r24
    aa48:	5b 07       	cpc	r21, r27
    aa4a:	10 f4       	brcc	.+4      	; 0xaa50 <atan+0x1a>
    aa4c:	d9 2f       	mov	r29, r25
    aa4e:	cf d1       	rcall	.+926    	; 0xadee <inverse>
    aa50:	9f 93       	push	r25
    aa52:	8f 93       	push	r24
    aa54:	7f 93       	push	r23
    aa56:	6f 93       	push	r22
    aa58:	3a d2       	rcall	.+1140   	; 0xaece <square>
    aa5a:	ee e4       	ldi	r30, 0x4E	; 78
    aa5c:	f1 e0       	ldi	r31, 0x01	; 1
    aa5e:	1d d1       	rcall	.+570    	; 0xac9a <__fp_powser>
    aa60:	77 d1       	rcall	.+750    	; 0xad50 <__fp_round>
    aa62:	2f 91       	pop	r18
    aa64:	3f 91       	pop	r19
    aa66:	4f 91       	pop	r20
    aa68:	5f 91       	pop	r21
    aa6a:	d4 d1       	rcall	.+936    	; 0xae14 <__mulsf3x>
    aa6c:	dd 23       	and	r29, r29
    aa6e:	49 f0       	breq	.+18     	; 0xaa82 <atan+0x4c>
    aa70:	90 58       	subi	r25, 0x80	; 128
    aa72:	a2 ea       	ldi	r26, 0xA2	; 162
    aa74:	2a ed       	ldi	r18, 0xDA	; 218
    aa76:	3f e0       	ldi	r19, 0x0F	; 15
    aa78:	49 ec       	ldi	r20, 0xC9	; 201
    aa7a:	5f e3       	ldi	r21, 0x3F	; 63
    aa7c:	d0 78       	andi	r29, 0x80	; 128
    aa7e:	5d 27       	eor	r21, r29
    aa80:	4d df       	rcall	.-358    	; 0xa91c <__addsf3x>
    aa82:	df 91       	pop	r29
    aa84:	65 c1       	rjmp	.+714    	; 0xad50 <__fp_round>

0000aa86 <__cmpsf2>:
    aa86:	dc d0       	rcall	.+440    	; 0xac40 <__fp_cmp>
    aa88:	08 f4       	brcc	.+2      	; 0xaa8c <__cmpsf2+0x6>
    aa8a:	81 e0       	ldi	r24, 0x01	; 1
    aa8c:	08 95       	ret

0000aa8e <cos>:
    aa8e:	39 d1       	rcall	.+626    	; 0xad02 <__fp_rempio2>
    aa90:	e3 95       	inc	r30
    aa92:	6f c1       	rjmp	.+734    	; 0xad72 <__fp_sinus>

0000aa94 <__divsf3>:
    aa94:	0c d0       	rcall	.+24     	; 0xaaae <__divsf3x>
    aa96:	5c c1       	rjmp	.+696    	; 0xad50 <__fp_round>
    aa98:	2c d1       	rcall	.+600    	; 0xacf2 <__fp_pscB>
    aa9a:	40 f0       	brcs	.+16     	; 0xaaac <__divsf3+0x18>
    aa9c:	23 d1       	rcall	.+582    	; 0xace4 <__fp_pscA>
    aa9e:	30 f0       	brcs	.+12     	; 0xaaac <__divsf3+0x18>
    aaa0:	21 f4       	brne	.+8      	; 0xaaaa <__divsf3+0x16>
    aaa2:	5f 3f       	cpi	r21, 0xFF	; 255
    aaa4:	19 f0       	breq	.+6      	; 0xaaac <__divsf3+0x18>
    aaa6:	f0 c0       	rjmp	.+480    	; 0xac88 <__fp_inf>
    aaa8:	51 11       	cpse	r21, r1
    aaaa:	97 c1       	rjmp	.+814    	; 0xadda <__fp_szero>
    aaac:	f3 c0       	rjmp	.+486    	; 0xac94 <__fp_nan>

0000aaae <__divsf3x>:
    aaae:	72 d1       	rcall	.+740    	; 0xad94 <__fp_split3>
    aab0:	98 f3       	brcs	.-26     	; 0xaa98 <__divsf3+0x4>

0000aab2 <__divsf3_pse>:
    aab2:	99 23       	and	r25, r25
    aab4:	c9 f3       	breq	.-14     	; 0xaaa8 <__divsf3+0x14>
    aab6:	55 23       	and	r21, r21
    aab8:	b1 f3       	breq	.-20     	; 0xaaa6 <__divsf3+0x12>
    aaba:	95 1b       	sub	r25, r21
    aabc:	55 0b       	sbc	r21, r21
    aabe:	bb 27       	eor	r27, r27
    aac0:	aa 27       	eor	r26, r26
    aac2:	62 17       	cp	r22, r18
    aac4:	73 07       	cpc	r23, r19
    aac6:	84 07       	cpc	r24, r20
    aac8:	38 f0       	brcs	.+14     	; 0xaad8 <__divsf3_pse+0x26>
    aaca:	9f 5f       	subi	r25, 0xFF	; 255
    aacc:	5f 4f       	sbci	r21, 0xFF	; 255
    aace:	22 0f       	add	r18, r18
    aad0:	33 1f       	adc	r19, r19
    aad2:	44 1f       	adc	r20, r20
    aad4:	aa 1f       	adc	r26, r26
    aad6:	a9 f3       	breq	.-22     	; 0xaac2 <__divsf3_pse+0x10>
    aad8:	33 d0       	rcall	.+102    	; 0xab40 <__divsf3_pse+0x8e>
    aada:	0e 2e       	mov	r0, r30
    aadc:	3a f0       	brmi	.+14     	; 0xaaec <__divsf3_pse+0x3a>
    aade:	e0 e8       	ldi	r30, 0x80	; 128
    aae0:	30 d0       	rcall	.+96     	; 0xab42 <__divsf3_pse+0x90>
    aae2:	91 50       	subi	r25, 0x01	; 1
    aae4:	50 40       	sbci	r21, 0x00	; 0
    aae6:	e6 95       	lsr	r30
    aae8:	00 1c       	adc	r0, r0
    aaea:	ca f7       	brpl	.-14     	; 0xaade <__divsf3_pse+0x2c>
    aaec:	29 d0       	rcall	.+82     	; 0xab40 <__divsf3_pse+0x8e>
    aaee:	fe 2f       	mov	r31, r30
    aaf0:	27 d0       	rcall	.+78     	; 0xab40 <__divsf3_pse+0x8e>
    aaf2:	66 0f       	add	r22, r22
    aaf4:	77 1f       	adc	r23, r23
    aaf6:	88 1f       	adc	r24, r24
    aaf8:	bb 1f       	adc	r27, r27
    aafa:	26 17       	cp	r18, r22
    aafc:	37 07       	cpc	r19, r23
    aafe:	48 07       	cpc	r20, r24
    ab00:	ab 07       	cpc	r26, r27
    ab02:	b0 e8       	ldi	r27, 0x80	; 128
    ab04:	09 f0       	breq	.+2      	; 0xab08 <__divsf3_pse+0x56>
    ab06:	bb 0b       	sbc	r27, r27
    ab08:	80 2d       	mov	r24, r0
    ab0a:	bf 01       	movw	r22, r30
    ab0c:	ff 27       	eor	r31, r31
    ab0e:	93 58       	subi	r25, 0x83	; 131
    ab10:	5f 4f       	sbci	r21, 0xFF	; 255
    ab12:	2a f0       	brmi	.+10     	; 0xab1e <__divsf3_pse+0x6c>
    ab14:	9e 3f       	cpi	r25, 0xFE	; 254
    ab16:	51 05       	cpc	r21, r1
    ab18:	68 f0       	brcs	.+26     	; 0xab34 <__divsf3_pse+0x82>
    ab1a:	b6 c0       	rjmp	.+364    	; 0xac88 <__fp_inf>
    ab1c:	5e c1       	rjmp	.+700    	; 0xadda <__fp_szero>
    ab1e:	5f 3f       	cpi	r21, 0xFF	; 255
    ab20:	ec f3       	brlt	.-6      	; 0xab1c <__divsf3_pse+0x6a>
    ab22:	98 3e       	cpi	r25, 0xE8	; 232
    ab24:	dc f3       	brlt	.-10     	; 0xab1c <__divsf3_pse+0x6a>
    ab26:	86 95       	lsr	r24
    ab28:	77 95       	ror	r23
    ab2a:	67 95       	ror	r22
    ab2c:	b7 95       	ror	r27
    ab2e:	f7 95       	ror	r31
    ab30:	9f 5f       	subi	r25, 0xFF	; 255
    ab32:	c9 f7       	brne	.-14     	; 0xab26 <__divsf3_pse+0x74>
    ab34:	88 0f       	add	r24, r24
    ab36:	91 1d       	adc	r25, r1
    ab38:	96 95       	lsr	r25
    ab3a:	87 95       	ror	r24
    ab3c:	97 f9       	bld	r25, 7
    ab3e:	08 95       	ret
    ab40:	e1 e0       	ldi	r30, 0x01	; 1
    ab42:	66 0f       	add	r22, r22
    ab44:	77 1f       	adc	r23, r23
    ab46:	88 1f       	adc	r24, r24
    ab48:	bb 1f       	adc	r27, r27
    ab4a:	62 17       	cp	r22, r18
    ab4c:	73 07       	cpc	r23, r19
    ab4e:	84 07       	cpc	r24, r20
    ab50:	ba 07       	cpc	r27, r26
    ab52:	20 f0       	brcs	.+8      	; 0xab5c <__divsf3_pse+0xaa>
    ab54:	62 1b       	sub	r22, r18
    ab56:	73 0b       	sbc	r23, r19
    ab58:	84 0b       	sbc	r24, r20
    ab5a:	ba 0b       	sbc	r27, r26
    ab5c:	ee 1f       	adc	r30, r30
    ab5e:	88 f7       	brcc	.-30     	; 0xab42 <__divsf3_pse+0x90>
    ab60:	e0 95       	com	r30
    ab62:	08 95       	ret

0000ab64 <__fixsfsi>:
    ab64:	04 d0       	rcall	.+8      	; 0xab6e <__fixunssfsi>
    ab66:	68 94       	set
    ab68:	b1 11       	cpse	r27, r1
    ab6a:	37 c1       	rjmp	.+622    	; 0xadda <__fp_szero>
    ab6c:	08 95       	ret

0000ab6e <__fixunssfsi>:
    ab6e:	1a d1       	rcall	.+564    	; 0xada4 <__fp_splitA>
    ab70:	88 f0       	brcs	.+34     	; 0xab94 <__fixunssfsi+0x26>
    ab72:	9f 57       	subi	r25, 0x7F	; 127
    ab74:	90 f0       	brcs	.+36     	; 0xab9a <__fixunssfsi+0x2c>
    ab76:	b9 2f       	mov	r27, r25
    ab78:	99 27       	eor	r25, r25
    ab7a:	b7 51       	subi	r27, 0x17	; 23
    ab7c:	a0 f0       	brcs	.+40     	; 0xaba6 <__fixunssfsi+0x38>
    ab7e:	d1 f0       	breq	.+52     	; 0xabb4 <__fixunssfsi+0x46>
    ab80:	66 0f       	add	r22, r22
    ab82:	77 1f       	adc	r23, r23
    ab84:	88 1f       	adc	r24, r24
    ab86:	99 1f       	adc	r25, r25
    ab88:	1a f0       	brmi	.+6      	; 0xab90 <__fixunssfsi+0x22>
    ab8a:	ba 95       	dec	r27
    ab8c:	c9 f7       	brne	.-14     	; 0xab80 <__fixunssfsi+0x12>
    ab8e:	12 c0       	rjmp	.+36     	; 0xabb4 <__fixunssfsi+0x46>
    ab90:	b1 30       	cpi	r27, 0x01	; 1
    ab92:	81 f0       	breq	.+32     	; 0xabb4 <__fixunssfsi+0x46>
    ab94:	21 d1       	rcall	.+578    	; 0xadd8 <__fp_zero>
    ab96:	b1 e0       	ldi	r27, 0x01	; 1
    ab98:	08 95       	ret
    ab9a:	1e c1       	rjmp	.+572    	; 0xadd8 <__fp_zero>
    ab9c:	67 2f       	mov	r22, r23
    ab9e:	78 2f       	mov	r23, r24
    aba0:	88 27       	eor	r24, r24
    aba2:	b8 5f       	subi	r27, 0xF8	; 248
    aba4:	39 f0       	breq	.+14     	; 0xabb4 <__fixunssfsi+0x46>
    aba6:	b9 3f       	cpi	r27, 0xF9	; 249
    aba8:	cc f3       	brlt	.-14     	; 0xab9c <__fixunssfsi+0x2e>
    abaa:	86 95       	lsr	r24
    abac:	77 95       	ror	r23
    abae:	67 95       	ror	r22
    abb0:	b3 95       	inc	r27
    abb2:	d9 f7       	brne	.-10     	; 0xabaa <__fixunssfsi+0x3c>
    abb4:	3e f4       	brtc	.+14     	; 0xabc4 <__fixunssfsi+0x56>
    abb6:	90 95       	com	r25
    abb8:	80 95       	com	r24
    abba:	70 95       	com	r23
    abbc:	61 95       	neg	r22
    abbe:	7f 4f       	sbci	r23, 0xFF	; 255
    abc0:	8f 4f       	sbci	r24, 0xFF	; 255
    abc2:	9f 4f       	sbci	r25, 0xFF	; 255
    abc4:	08 95       	ret

0000abc6 <__floatunsisf>:
    abc6:	e8 94       	clt
    abc8:	09 c0       	rjmp	.+18     	; 0xabdc <__floatsisf+0x12>

0000abca <__floatsisf>:
    abca:	97 fb       	bst	r25, 7
    abcc:	3e f4       	brtc	.+14     	; 0xabdc <__floatsisf+0x12>
    abce:	90 95       	com	r25
    abd0:	80 95       	com	r24
    abd2:	70 95       	com	r23
    abd4:	61 95       	neg	r22
    abd6:	7f 4f       	sbci	r23, 0xFF	; 255
    abd8:	8f 4f       	sbci	r24, 0xFF	; 255
    abda:	9f 4f       	sbci	r25, 0xFF	; 255
    abdc:	99 23       	and	r25, r25
    abde:	a9 f0       	breq	.+42     	; 0xac0a <__floatsisf+0x40>
    abe0:	f9 2f       	mov	r31, r25
    abe2:	96 e9       	ldi	r25, 0x96	; 150
    abe4:	bb 27       	eor	r27, r27
    abe6:	93 95       	inc	r25
    abe8:	f6 95       	lsr	r31
    abea:	87 95       	ror	r24
    abec:	77 95       	ror	r23
    abee:	67 95       	ror	r22
    abf0:	b7 95       	ror	r27
    abf2:	f1 11       	cpse	r31, r1
    abf4:	f8 cf       	rjmp	.-16     	; 0xabe6 <__floatsisf+0x1c>
    abf6:	fa f4       	brpl	.+62     	; 0xac36 <__floatsisf+0x6c>
    abf8:	bb 0f       	add	r27, r27
    abfa:	11 f4       	brne	.+4      	; 0xac00 <__floatsisf+0x36>
    abfc:	60 ff       	sbrs	r22, 0
    abfe:	1b c0       	rjmp	.+54     	; 0xac36 <__floatsisf+0x6c>
    ac00:	6f 5f       	subi	r22, 0xFF	; 255
    ac02:	7f 4f       	sbci	r23, 0xFF	; 255
    ac04:	8f 4f       	sbci	r24, 0xFF	; 255
    ac06:	9f 4f       	sbci	r25, 0xFF	; 255
    ac08:	16 c0       	rjmp	.+44     	; 0xac36 <__floatsisf+0x6c>
    ac0a:	88 23       	and	r24, r24
    ac0c:	11 f0       	breq	.+4      	; 0xac12 <__floatsisf+0x48>
    ac0e:	96 e9       	ldi	r25, 0x96	; 150
    ac10:	11 c0       	rjmp	.+34     	; 0xac34 <__floatsisf+0x6a>
    ac12:	77 23       	and	r23, r23
    ac14:	21 f0       	breq	.+8      	; 0xac1e <__floatsisf+0x54>
    ac16:	9e e8       	ldi	r25, 0x8E	; 142
    ac18:	87 2f       	mov	r24, r23
    ac1a:	76 2f       	mov	r23, r22
    ac1c:	05 c0       	rjmp	.+10     	; 0xac28 <__floatsisf+0x5e>
    ac1e:	66 23       	and	r22, r22
    ac20:	71 f0       	breq	.+28     	; 0xac3e <__floatsisf+0x74>
    ac22:	96 e8       	ldi	r25, 0x86	; 134
    ac24:	86 2f       	mov	r24, r22
    ac26:	70 e0       	ldi	r23, 0x00	; 0
    ac28:	60 e0       	ldi	r22, 0x00	; 0
    ac2a:	2a f0       	brmi	.+10     	; 0xac36 <__floatsisf+0x6c>
    ac2c:	9a 95       	dec	r25
    ac2e:	66 0f       	add	r22, r22
    ac30:	77 1f       	adc	r23, r23
    ac32:	88 1f       	adc	r24, r24
    ac34:	da f7       	brpl	.-10     	; 0xac2c <__floatsisf+0x62>
    ac36:	88 0f       	add	r24, r24
    ac38:	96 95       	lsr	r25
    ac3a:	87 95       	ror	r24
    ac3c:	97 f9       	bld	r25, 7
    ac3e:	08 95       	ret

0000ac40 <__fp_cmp>:
    ac40:	99 0f       	add	r25, r25
    ac42:	00 08       	sbc	r0, r0
    ac44:	55 0f       	add	r21, r21
    ac46:	aa 0b       	sbc	r26, r26
    ac48:	e0 e8       	ldi	r30, 0x80	; 128
    ac4a:	fe ef       	ldi	r31, 0xFE	; 254
    ac4c:	16 16       	cp	r1, r22
    ac4e:	17 06       	cpc	r1, r23
    ac50:	e8 07       	cpc	r30, r24
    ac52:	f9 07       	cpc	r31, r25
    ac54:	c0 f0       	brcs	.+48     	; 0xac86 <__fp_cmp+0x46>
    ac56:	12 16       	cp	r1, r18
    ac58:	13 06       	cpc	r1, r19
    ac5a:	e4 07       	cpc	r30, r20
    ac5c:	f5 07       	cpc	r31, r21
    ac5e:	98 f0       	brcs	.+38     	; 0xac86 <__fp_cmp+0x46>
    ac60:	62 1b       	sub	r22, r18
    ac62:	73 0b       	sbc	r23, r19
    ac64:	84 0b       	sbc	r24, r20
    ac66:	95 0b       	sbc	r25, r21
    ac68:	39 f4       	brne	.+14     	; 0xac78 <__fp_cmp+0x38>
    ac6a:	0a 26       	eor	r0, r26
    ac6c:	61 f0       	breq	.+24     	; 0xac86 <__fp_cmp+0x46>
    ac6e:	23 2b       	or	r18, r19
    ac70:	24 2b       	or	r18, r20
    ac72:	25 2b       	or	r18, r21
    ac74:	21 f4       	brne	.+8      	; 0xac7e <__fp_cmp+0x3e>
    ac76:	08 95       	ret
    ac78:	0a 26       	eor	r0, r26
    ac7a:	09 f4       	brne	.+2      	; 0xac7e <__fp_cmp+0x3e>
    ac7c:	a1 40       	sbci	r26, 0x01	; 1
    ac7e:	a6 95       	lsr	r26
    ac80:	8f ef       	ldi	r24, 0xFF	; 255
    ac82:	81 1d       	adc	r24, r1
    ac84:	81 1d       	adc	r24, r1
    ac86:	08 95       	ret

0000ac88 <__fp_inf>:
    ac88:	97 f9       	bld	r25, 7
    ac8a:	9f 67       	ori	r25, 0x7F	; 127
    ac8c:	80 e8       	ldi	r24, 0x80	; 128
    ac8e:	70 e0       	ldi	r23, 0x00	; 0
    ac90:	60 e0       	ldi	r22, 0x00	; 0
    ac92:	08 95       	ret

0000ac94 <__fp_nan>:
    ac94:	9f ef       	ldi	r25, 0xFF	; 255
    ac96:	80 ec       	ldi	r24, 0xC0	; 192
    ac98:	08 95       	ret

0000ac9a <__fp_powser>:
    ac9a:	df 93       	push	r29
    ac9c:	cf 93       	push	r28
    ac9e:	1f 93       	push	r17
    aca0:	0f 93       	push	r16
    aca2:	ff 92       	push	r15
    aca4:	ef 92       	push	r14
    aca6:	df 92       	push	r13
    aca8:	7b 01       	movw	r14, r22
    acaa:	8c 01       	movw	r16, r24
    acac:	68 94       	set
    acae:	05 c0       	rjmp	.+10     	; 0xacba <__fp_powser+0x20>
    acb0:	da 2e       	mov	r13, r26
    acb2:	ef 01       	movw	r28, r30
    acb4:	af d0       	rcall	.+350    	; 0xae14 <__mulsf3x>
    acb6:	fe 01       	movw	r30, r28
    acb8:	e8 94       	clt
    acba:	a5 91       	lpm	r26, Z+
    acbc:	25 91       	lpm	r18, Z+
    acbe:	35 91       	lpm	r19, Z+
    acc0:	45 91       	lpm	r20, Z+
    acc2:	55 91       	lpm	r21, Z+
    acc4:	ae f3       	brts	.-22     	; 0xacb0 <__fp_powser+0x16>
    acc6:	ef 01       	movw	r28, r30
    acc8:	29 de       	rcall	.-942    	; 0xa91c <__addsf3x>
    acca:	fe 01       	movw	r30, r28
    accc:	97 01       	movw	r18, r14
    acce:	a8 01       	movw	r20, r16
    acd0:	da 94       	dec	r13
    acd2:	79 f7       	brne	.-34     	; 0xacb2 <__fp_powser+0x18>
    acd4:	df 90       	pop	r13
    acd6:	ef 90       	pop	r14
    acd8:	ff 90       	pop	r15
    acda:	0f 91       	pop	r16
    acdc:	1f 91       	pop	r17
    acde:	cf 91       	pop	r28
    ace0:	df 91       	pop	r29
    ace2:	08 95       	ret

0000ace4 <__fp_pscA>:
    ace4:	00 24       	eor	r0, r0
    ace6:	0a 94       	dec	r0
    ace8:	16 16       	cp	r1, r22
    acea:	17 06       	cpc	r1, r23
    acec:	18 06       	cpc	r1, r24
    acee:	09 06       	cpc	r0, r25
    acf0:	08 95       	ret

0000acf2 <__fp_pscB>:
    acf2:	00 24       	eor	r0, r0
    acf4:	0a 94       	dec	r0
    acf6:	12 16       	cp	r1, r18
    acf8:	13 06       	cpc	r1, r19
    acfa:	14 06       	cpc	r1, r20
    acfc:	05 06       	cpc	r0, r21
    acfe:	08 95       	ret
    ad00:	c9 cf       	rjmp	.-110    	; 0xac94 <__fp_nan>

0000ad02 <__fp_rempio2>:
    ad02:	50 d0       	rcall	.+160    	; 0xada4 <__fp_splitA>
    ad04:	e8 f3       	brcs	.-6      	; 0xad00 <__fp_pscB+0xe>
    ad06:	e8 94       	clt
    ad08:	e0 e0       	ldi	r30, 0x00	; 0
    ad0a:	bb 27       	eor	r27, r27
    ad0c:	9f 57       	subi	r25, 0x7F	; 127
    ad0e:	f0 f0       	brcs	.+60     	; 0xad4c <__fp_rempio2+0x4a>
    ad10:	2a ed       	ldi	r18, 0xDA	; 218
    ad12:	3f e0       	ldi	r19, 0x0F	; 15
    ad14:	49 ec       	ldi	r20, 0xC9	; 201
    ad16:	06 c0       	rjmp	.+12     	; 0xad24 <__fp_rempio2+0x22>
    ad18:	ee 0f       	add	r30, r30
    ad1a:	bb 0f       	add	r27, r27
    ad1c:	66 1f       	adc	r22, r22
    ad1e:	77 1f       	adc	r23, r23
    ad20:	88 1f       	adc	r24, r24
    ad22:	28 f0       	brcs	.+10     	; 0xad2e <__fp_rempio2+0x2c>
    ad24:	b2 3a       	cpi	r27, 0xA2	; 162
    ad26:	62 07       	cpc	r22, r18
    ad28:	73 07       	cpc	r23, r19
    ad2a:	84 07       	cpc	r24, r20
    ad2c:	28 f0       	brcs	.+10     	; 0xad38 <__fp_rempio2+0x36>
    ad2e:	b2 5a       	subi	r27, 0xA2	; 162
    ad30:	62 0b       	sbc	r22, r18
    ad32:	73 0b       	sbc	r23, r19
    ad34:	84 0b       	sbc	r24, r20
    ad36:	e3 95       	inc	r30
    ad38:	9a 95       	dec	r25
    ad3a:	72 f7       	brpl	.-36     	; 0xad18 <__fp_rempio2+0x16>
    ad3c:	80 38       	cpi	r24, 0x80	; 128
    ad3e:	30 f4       	brcc	.+12     	; 0xad4c <__fp_rempio2+0x4a>
    ad40:	9a 95       	dec	r25
    ad42:	bb 0f       	add	r27, r27
    ad44:	66 1f       	adc	r22, r22
    ad46:	77 1f       	adc	r23, r23
    ad48:	88 1f       	adc	r24, r24
    ad4a:	d2 f7       	brpl	.-12     	; 0xad40 <__fp_rempio2+0x3e>
    ad4c:	90 48       	sbci	r25, 0x80	; 128
    ad4e:	c4 c0       	rjmp	.+392    	; 0xaed8 <__fp_mpack_finite>

0000ad50 <__fp_round>:
    ad50:	09 2e       	mov	r0, r25
    ad52:	03 94       	inc	r0
    ad54:	00 0c       	add	r0, r0
    ad56:	11 f4       	brne	.+4      	; 0xad5c <__fp_round+0xc>
    ad58:	88 23       	and	r24, r24
    ad5a:	52 f0       	brmi	.+20     	; 0xad70 <__fp_round+0x20>
    ad5c:	bb 0f       	add	r27, r27
    ad5e:	40 f4       	brcc	.+16     	; 0xad70 <__fp_round+0x20>
    ad60:	bf 2b       	or	r27, r31
    ad62:	11 f4       	brne	.+4      	; 0xad68 <__fp_round+0x18>
    ad64:	60 ff       	sbrs	r22, 0
    ad66:	04 c0       	rjmp	.+8      	; 0xad70 <__fp_round+0x20>
    ad68:	6f 5f       	subi	r22, 0xFF	; 255
    ad6a:	7f 4f       	sbci	r23, 0xFF	; 255
    ad6c:	8f 4f       	sbci	r24, 0xFF	; 255
    ad6e:	9f 4f       	sbci	r25, 0xFF	; 255
    ad70:	08 95       	ret

0000ad72 <__fp_sinus>:
    ad72:	ef 93       	push	r30
    ad74:	e0 ff       	sbrs	r30, 0
    ad76:	06 c0       	rjmp	.+12     	; 0xad84 <__fp_sinus+0x12>
    ad78:	a2 ea       	ldi	r26, 0xA2	; 162
    ad7a:	2a ed       	ldi	r18, 0xDA	; 218
    ad7c:	3f e0       	ldi	r19, 0x0F	; 15
    ad7e:	49 ec       	ldi	r20, 0xC9	; 201
    ad80:	5f eb       	ldi	r21, 0xBF	; 191
    ad82:	cc dd       	rcall	.-1128   	; 0xa91c <__addsf3x>
    ad84:	e5 df       	rcall	.-54     	; 0xad50 <__fp_round>
    ad86:	0f 90       	pop	r0
    ad88:	03 94       	inc	r0
    ad8a:	01 fc       	sbrc	r0, 1
    ad8c:	90 58       	subi	r25, 0x80	; 128
    ad8e:	eb e7       	ldi	r30, 0x7B	; 123
    ad90:	f1 e0       	ldi	r31, 0x01	; 1
    ad92:	ae c0       	rjmp	.+348    	; 0xaef0 <__fp_powsodd>

0000ad94 <__fp_split3>:
    ad94:	57 fd       	sbrc	r21, 7
    ad96:	90 58       	subi	r25, 0x80	; 128
    ad98:	44 0f       	add	r20, r20
    ad9a:	55 1f       	adc	r21, r21
    ad9c:	59 f0       	breq	.+22     	; 0xadb4 <__fp_splitA+0x10>
    ad9e:	5f 3f       	cpi	r21, 0xFF	; 255
    ada0:	71 f0       	breq	.+28     	; 0xadbe <__fp_splitA+0x1a>
    ada2:	47 95       	ror	r20

0000ada4 <__fp_splitA>:
    ada4:	88 0f       	add	r24, r24
    ada6:	97 fb       	bst	r25, 7
    ada8:	99 1f       	adc	r25, r25
    adaa:	61 f0       	breq	.+24     	; 0xadc4 <__fp_splitA+0x20>
    adac:	9f 3f       	cpi	r25, 0xFF	; 255
    adae:	79 f0       	breq	.+30     	; 0xadce <__fp_splitA+0x2a>
    adb0:	87 95       	ror	r24
    adb2:	08 95       	ret
    adb4:	12 16       	cp	r1, r18
    adb6:	13 06       	cpc	r1, r19
    adb8:	14 06       	cpc	r1, r20
    adba:	55 1f       	adc	r21, r21
    adbc:	f2 cf       	rjmp	.-28     	; 0xada2 <__fp_split3+0xe>
    adbe:	46 95       	lsr	r20
    adc0:	f1 df       	rcall	.-30     	; 0xada4 <__fp_splitA>
    adc2:	08 c0       	rjmp	.+16     	; 0xadd4 <__fp_splitA+0x30>
    adc4:	16 16       	cp	r1, r22
    adc6:	17 06       	cpc	r1, r23
    adc8:	18 06       	cpc	r1, r24
    adca:	99 1f       	adc	r25, r25
    adcc:	f1 cf       	rjmp	.-30     	; 0xadb0 <__fp_splitA+0xc>
    adce:	86 95       	lsr	r24
    add0:	71 05       	cpc	r23, r1
    add2:	61 05       	cpc	r22, r1
    add4:	08 94       	sec
    add6:	08 95       	ret

0000add8 <__fp_zero>:
    add8:	e8 94       	clt

0000adda <__fp_szero>:
    adda:	bb 27       	eor	r27, r27
    addc:	66 27       	eor	r22, r22
    adde:	77 27       	eor	r23, r23
    ade0:	cb 01       	movw	r24, r22
    ade2:	97 f9       	bld	r25, 7
    ade4:	08 95       	ret

0000ade6 <__gesf2>:
    ade6:	2c df       	rcall	.-424    	; 0xac40 <__fp_cmp>
    ade8:	08 f4       	brcc	.+2      	; 0xadec <__gesf2+0x6>
    adea:	8f ef       	ldi	r24, 0xFF	; 255
    adec:	08 95       	ret

0000adee <inverse>:
    adee:	9b 01       	movw	r18, r22
    adf0:	ac 01       	movw	r20, r24
    adf2:	60 e0       	ldi	r22, 0x00	; 0
    adf4:	70 e0       	ldi	r23, 0x00	; 0
    adf6:	80 e8       	ldi	r24, 0x80	; 128
    adf8:	9f e3       	ldi	r25, 0x3F	; 63
    adfa:	4c ce       	rjmp	.-872    	; 0xaa94 <__divsf3>

0000adfc <__mulsf3>:
    adfc:	0b d0       	rcall	.+22     	; 0xae14 <__mulsf3x>
    adfe:	a8 cf       	rjmp	.-176    	; 0xad50 <__fp_round>
    ae00:	71 df       	rcall	.-286    	; 0xace4 <__fp_pscA>
    ae02:	28 f0       	brcs	.+10     	; 0xae0e <__mulsf3+0x12>
    ae04:	76 df       	rcall	.-276    	; 0xacf2 <__fp_pscB>
    ae06:	18 f0       	brcs	.+6      	; 0xae0e <__mulsf3+0x12>
    ae08:	95 23       	and	r25, r21
    ae0a:	09 f0       	breq	.+2      	; 0xae0e <__mulsf3+0x12>
    ae0c:	3d cf       	rjmp	.-390    	; 0xac88 <__fp_inf>
    ae0e:	42 cf       	rjmp	.-380    	; 0xac94 <__fp_nan>
    ae10:	11 24       	eor	r1, r1
    ae12:	e3 cf       	rjmp	.-58     	; 0xadda <__fp_szero>

0000ae14 <__mulsf3x>:
    ae14:	bf df       	rcall	.-130    	; 0xad94 <__fp_split3>
    ae16:	a0 f3       	brcs	.-24     	; 0xae00 <__mulsf3+0x4>

0000ae18 <__mulsf3_pse>:
    ae18:	95 9f       	mul	r25, r21
    ae1a:	d1 f3       	breq	.-12     	; 0xae10 <__mulsf3+0x14>
    ae1c:	95 0f       	add	r25, r21
    ae1e:	50 e0       	ldi	r21, 0x00	; 0
    ae20:	55 1f       	adc	r21, r21
    ae22:	62 9f       	mul	r22, r18
    ae24:	f0 01       	movw	r30, r0
    ae26:	72 9f       	mul	r23, r18
    ae28:	bb 27       	eor	r27, r27
    ae2a:	f0 0d       	add	r31, r0
    ae2c:	b1 1d       	adc	r27, r1
    ae2e:	63 9f       	mul	r22, r19
    ae30:	aa 27       	eor	r26, r26
    ae32:	f0 0d       	add	r31, r0
    ae34:	b1 1d       	adc	r27, r1
    ae36:	aa 1f       	adc	r26, r26
    ae38:	64 9f       	mul	r22, r20
    ae3a:	66 27       	eor	r22, r22
    ae3c:	b0 0d       	add	r27, r0
    ae3e:	a1 1d       	adc	r26, r1
    ae40:	66 1f       	adc	r22, r22
    ae42:	82 9f       	mul	r24, r18
    ae44:	22 27       	eor	r18, r18
    ae46:	b0 0d       	add	r27, r0
    ae48:	a1 1d       	adc	r26, r1
    ae4a:	62 1f       	adc	r22, r18
    ae4c:	73 9f       	mul	r23, r19
    ae4e:	b0 0d       	add	r27, r0
    ae50:	a1 1d       	adc	r26, r1
    ae52:	62 1f       	adc	r22, r18
    ae54:	83 9f       	mul	r24, r19
    ae56:	a0 0d       	add	r26, r0
    ae58:	61 1d       	adc	r22, r1
    ae5a:	22 1f       	adc	r18, r18
    ae5c:	74 9f       	mul	r23, r20
    ae5e:	33 27       	eor	r19, r19
    ae60:	a0 0d       	add	r26, r0
    ae62:	61 1d       	adc	r22, r1
    ae64:	23 1f       	adc	r18, r19
    ae66:	84 9f       	mul	r24, r20
    ae68:	60 0d       	add	r22, r0
    ae6a:	21 1d       	adc	r18, r1
    ae6c:	82 2f       	mov	r24, r18
    ae6e:	76 2f       	mov	r23, r22
    ae70:	6a 2f       	mov	r22, r26
    ae72:	11 24       	eor	r1, r1
    ae74:	9f 57       	subi	r25, 0x7F	; 127
    ae76:	50 40       	sbci	r21, 0x00	; 0
    ae78:	8a f0       	brmi	.+34     	; 0xae9c <__mulsf3_pse+0x84>
    ae7a:	e1 f0       	breq	.+56     	; 0xaeb4 <__mulsf3_pse+0x9c>
    ae7c:	88 23       	and	r24, r24
    ae7e:	4a f0       	brmi	.+18     	; 0xae92 <__mulsf3_pse+0x7a>
    ae80:	ee 0f       	add	r30, r30
    ae82:	ff 1f       	adc	r31, r31
    ae84:	bb 1f       	adc	r27, r27
    ae86:	66 1f       	adc	r22, r22
    ae88:	77 1f       	adc	r23, r23
    ae8a:	88 1f       	adc	r24, r24
    ae8c:	91 50       	subi	r25, 0x01	; 1
    ae8e:	50 40       	sbci	r21, 0x00	; 0
    ae90:	a9 f7       	brne	.-22     	; 0xae7c <__mulsf3_pse+0x64>
    ae92:	9e 3f       	cpi	r25, 0xFE	; 254
    ae94:	51 05       	cpc	r21, r1
    ae96:	70 f0       	brcs	.+28     	; 0xaeb4 <__mulsf3_pse+0x9c>
    ae98:	f7 ce       	rjmp	.-530    	; 0xac88 <__fp_inf>
    ae9a:	9f cf       	rjmp	.-194    	; 0xadda <__fp_szero>
    ae9c:	5f 3f       	cpi	r21, 0xFF	; 255
    ae9e:	ec f3       	brlt	.-6      	; 0xae9a <__mulsf3_pse+0x82>
    aea0:	98 3e       	cpi	r25, 0xE8	; 232
    aea2:	dc f3       	brlt	.-10     	; 0xae9a <__mulsf3_pse+0x82>
    aea4:	86 95       	lsr	r24
    aea6:	77 95       	ror	r23
    aea8:	67 95       	ror	r22
    aeaa:	b7 95       	ror	r27
    aeac:	f7 95       	ror	r31
    aeae:	e7 95       	ror	r30
    aeb0:	9f 5f       	subi	r25, 0xFF	; 255
    aeb2:	c1 f7       	brne	.-16     	; 0xaea4 <__mulsf3_pse+0x8c>
    aeb4:	fe 2b       	or	r31, r30
    aeb6:	88 0f       	add	r24, r24
    aeb8:	91 1d       	adc	r25, r1
    aeba:	96 95       	lsr	r25
    aebc:	87 95       	ror	r24
    aebe:	97 f9       	bld	r25, 7
    aec0:	08 95       	ret

0000aec2 <sin>:
    aec2:	9f 93       	push	r25
    aec4:	1e df       	rcall	.-452    	; 0xad02 <__fp_rempio2>
    aec6:	0f 90       	pop	r0
    aec8:	07 fc       	sbrc	r0, 7
    aeca:	ee 5f       	subi	r30, 0xFE	; 254
    aecc:	52 cf       	rjmp	.-348    	; 0xad72 <__fp_sinus>

0000aece <square>:
    aece:	9b 01       	movw	r18, r22
    aed0:	ac 01       	movw	r20, r24
    aed2:	94 cf       	rjmp	.-216    	; 0xadfc <__mulsf3>

0000aed4 <__fp_mpack>:
    aed4:	9f 3f       	cpi	r25, 0xFF	; 255
    aed6:	31 f0       	breq	.+12     	; 0xaee4 <__fp_mpack_finite+0xc>

0000aed8 <__fp_mpack_finite>:
    aed8:	91 50       	subi	r25, 0x01	; 1
    aeda:	20 f4       	brcc	.+8      	; 0xaee4 <__fp_mpack_finite+0xc>
    aedc:	87 95       	ror	r24
    aede:	77 95       	ror	r23
    aee0:	67 95       	ror	r22
    aee2:	b7 95       	ror	r27
    aee4:	88 0f       	add	r24, r24
    aee6:	91 1d       	adc	r25, r1
    aee8:	96 95       	lsr	r25
    aeea:	87 95       	ror	r24
    aeec:	97 f9       	bld	r25, 7
    aeee:	08 95       	ret

0000aef0 <__fp_powsodd>:
    aef0:	9f 93       	push	r25
    aef2:	8f 93       	push	r24
    aef4:	7f 93       	push	r23
    aef6:	6f 93       	push	r22
    aef8:	ff 93       	push	r31
    aefa:	ef 93       	push	r30
    aefc:	9b 01       	movw	r18, r22
    aefe:	ac 01       	movw	r20, r24
    af00:	7d df       	rcall	.-262    	; 0xadfc <__mulsf3>
    af02:	ef 91       	pop	r30
    af04:	ff 91       	pop	r31
    af06:	c9 de       	rcall	.-622    	; 0xac9a <__fp_powser>
    af08:	2f 91       	pop	r18
    af0a:	3f 91       	pop	r19
    af0c:	4f 91       	pop	r20
    af0e:	5f 91       	pop	r21
    af10:	75 cf       	rjmp	.-278    	; 0xadfc <__mulsf3>

0000af12 <__mulsi3>:
    af12:	62 9f       	mul	r22, r18
    af14:	d0 01       	movw	r26, r0
    af16:	73 9f       	mul	r23, r19
    af18:	f0 01       	movw	r30, r0
    af1a:	82 9f       	mul	r24, r18
    af1c:	e0 0d       	add	r30, r0
    af1e:	f1 1d       	adc	r31, r1
    af20:	64 9f       	mul	r22, r20
    af22:	e0 0d       	add	r30, r0
    af24:	f1 1d       	adc	r31, r1
    af26:	92 9f       	mul	r25, r18
    af28:	f0 0d       	add	r31, r0
    af2a:	83 9f       	mul	r24, r19
    af2c:	f0 0d       	add	r31, r0
    af2e:	74 9f       	mul	r23, r20
    af30:	f0 0d       	add	r31, r0
    af32:	65 9f       	mul	r22, r21
    af34:	f0 0d       	add	r31, r0
    af36:	99 27       	eor	r25, r25
    af38:	72 9f       	mul	r23, r18
    af3a:	b0 0d       	add	r27, r0
    af3c:	e1 1d       	adc	r30, r1
    af3e:	f9 1f       	adc	r31, r25
    af40:	63 9f       	mul	r22, r19
    af42:	b0 0d       	add	r27, r0
    af44:	e1 1d       	adc	r30, r1
    af46:	f9 1f       	adc	r31, r25
    af48:	bd 01       	movw	r22, r26
    af4a:	cf 01       	movw	r24, r30
    af4c:	11 24       	eor	r1, r1
    af4e:	08 95       	ret

0000af50 <__udivmodhi4>:
    af50:	aa 1b       	sub	r26, r26
    af52:	bb 1b       	sub	r27, r27
    af54:	51 e1       	ldi	r21, 0x11	; 17
    af56:	07 c0       	rjmp	.+14     	; 0xaf66 <__udivmodhi4_ep>

0000af58 <__udivmodhi4_loop>:
    af58:	aa 1f       	adc	r26, r26
    af5a:	bb 1f       	adc	r27, r27
    af5c:	a6 17       	cp	r26, r22
    af5e:	b7 07       	cpc	r27, r23
    af60:	10 f0       	brcs	.+4      	; 0xaf66 <__udivmodhi4_ep>
    af62:	a6 1b       	sub	r26, r22
    af64:	b7 0b       	sbc	r27, r23

0000af66 <__udivmodhi4_ep>:
    af66:	88 1f       	adc	r24, r24
    af68:	99 1f       	adc	r25, r25
    af6a:	5a 95       	dec	r21
    af6c:	a9 f7       	brne	.-22     	; 0xaf58 <__udivmodhi4_loop>
    af6e:	80 95       	com	r24
    af70:	90 95       	com	r25
    af72:	bc 01       	movw	r22, r24
    af74:	cd 01       	movw	r24, r26
    af76:	08 95       	ret

0000af78 <__divmodhi4>:
    af78:	97 fb       	bst	r25, 7
    af7a:	09 2e       	mov	r0, r25
    af7c:	07 26       	eor	r0, r23
    af7e:	0a d0       	rcall	.+20     	; 0xaf94 <__divmodhi4_neg1>
    af80:	77 fd       	sbrc	r23, 7
    af82:	04 d0       	rcall	.+8      	; 0xaf8c <__divmodhi4_neg2>
    af84:	e5 df       	rcall	.-54     	; 0xaf50 <__udivmodhi4>
    af86:	06 d0       	rcall	.+12     	; 0xaf94 <__divmodhi4_neg1>
    af88:	00 20       	and	r0, r0
    af8a:	1a f4       	brpl	.+6      	; 0xaf92 <__divmodhi4_exit>

0000af8c <__divmodhi4_neg2>:
    af8c:	70 95       	com	r23
    af8e:	61 95       	neg	r22
    af90:	7f 4f       	sbci	r23, 0xFF	; 255

0000af92 <__divmodhi4_exit>:
    af92:	08 95       	ret

0000af94 <__divmodhi4_neg1>:
    af94:	f6 f7       	brtc	.-4      	; 0xaf92 <__divmodhi4_exit>
    af96:	90 95       	com	r25
    af98:	81 95       	neg	r24
    af9a:	9f 4f       	sbci	r25, 0xFF	; 255
    af9c:	08 95       	ret

0000af9e <__divmodsi4>:
    af9e:	97 fb       	bst	r25, 7
    afa0:	09 2e       	mov	r0, r25
    afa2:	05 26       	eor	r0, r21
    afa4:	0e d0       	rcall	.+28     	; 0xafc2 <__divmodsi4_neg1>
    afa6:	57 fd       	sbrc	r21, 7
    afa8:	04 d0       	rcall	.+8      	; 0xafb2 <__divmodsi4_neg2>
    afaa:	14 d0       	rcall	.+40     	; 0xafd4 <__udivmodsi4>
    afac:	0a d0       	rcall	.+20     	; 0xafc2 <__divmodsi4_neg1>
    afae:	00 1c       	adc	r0, r0
    afb0:	38 f4       	brcc	.+14     	; 0xafc0 <__divmodsi4_exit>

0000afb2 <__divmodsi4_neg2>:
    afb2:	50 95       	com	r21
    afb4:	40 95       	com	r20
    afb6:	30 95       	com	r19
    afb8:	21 95       	neg	r18
    afba:	3f 4f       	sbci	r19, 0xFF	; 255
    afbc:	4f 4f       	sbci	r20, 0xFF	; 255
    afbe:	5f 4f       	sbci	r21, 0xFF	; 255

0000afc0 <__divmodsi4_exit>:
    afc0:	08 95       	ret

0000afc2 <__divmodsi4_neg1>:
    afc2:	f6 f7       	brtc	.-4      	; 0xafc0 <__divmodsi4_exit>
    afc4:	90 95       	com	r25
    afc6:	80 95       	com	r24
    afc8:	70 95       	com	r23
    afca:	61 95       	neg	r22
    afcc:	7f 4f       	sbci	r23, 0xFF	; 255
    afce:	8f 4f       	sbci	r24, 0xFF	; 255
    afd0:	9f 4f       	sbci	r25, 0xFF	; 255
    afd2:	08 95       	ret

0000afd4 <__udivmodsi4>:
    afd4:	a1 e2       	ldi	r26, 0x21	; 33
    afd6:	1a 2e       	mov	r1, r26
    afd8:	aa 1b       	sub	r26, r26
    afda:	bb 1b       	sub	r27, r27
    afdc:	fd 01       	movw	r30, r26
    afde:	0d c0       	rjmp	.+26     	; 0xaffa <__udivmodsi4_ep>

0000afe0 <__udivmodsi4_loop>:
    afe0:	aa 1f       	adc	r26, r26
    afe2:	bb 1f       	adc	r27, r27
    afe4:	ee 1f       	adc	r30, r30
    afe6:	ff 1f       	adc	r31, r31
    afe8:	a2 17       	cp	r26, r18
    afea:	b3 07       	cpc	r27, r19
    afec:	e4 07       	cpc	r30, r20
    afee:	f5 07       	cpc	r31, r21
    aff0:	20 f0       	brcs	.+8      	; 0xaffa <__udivmodsi4_ep>
    aff2:	a2 1b       	sub	r26, r18
    aff4:	b3 0b       	sbc	r27, r19
    aff6:	e4 0b       	sbc	r30, r20
    aff8:	f5 0b       	sbc	r31, r21

0000affa <__udivmodsi4_ep>:
    affa:	66 1f       	adc	r22, r22
    affc:	77 1f       	adc	r23, r23
    affe:	88 1f       	adc	r24, r24
    b000:	99 1f       	adc	r25, r25
    b002:	1a 94       	dec	r1
    b004:	69 f7       	brne	.-38     	; 0xafe0 <__udivmodsi4_loop>
    b006:	60 95       	com	r22
    b008:	70 95       	com	r23
    b00a:	80 95       	com	r24
    b00c:	90 95       	com	r25
    b00e:	9b 01       	movw	r18, r22
    b010:	ac 01       	movw	r20, r24
    b012:	bd 01       	movw	r22, r26
    b014:	cf 01       	movw	r24, r30
    b016:	08 95       	ret

0000b018 <do_rand>:
    b018:	af 92       	push	r10
    b01a:	bf 92       	push	r11
    b01c:	cf 92       	push	r12
    b01e:	df 92       	push	r13
    b020:	ef 92       	push	r14
    b022:	ff 92       	push	r15
    b024:	0f 93       	push	r16
    b026:	1f 93       	push	r17
    b028:	cf 93       	push	r28
    b02a:	df 93       	push	r29
    b02c:	ec 01       	movw	r28, r24
    b02e:	a8 80       	ld	r10, Y
    b030:	b9 80       	ldd	r11, Y+1	; 0x01
    b032:	ca 80       	ldd	r12, Y+2	; 0x02
    b034:	db 80       	ldd	r13, Y+3	; 0x03
    b036:	a1 14       	cp	r10, r1
    b038:	b1 04       	cpc	r11, r1
    b03a:	c1 04       	cpc	r12, r1
    b03c:	d1 04       	cpc	r13, r1
    b03e:	41 f4       	brne	.+16     	; 0xb050 <do_rand+0x38>
    b040:	84 e2       	ldi	r24, 0x24	; 36
    b042:	a8 2e       	mov	r10, r24
    b044:	89 ed       	ldi	r24, 0xD9	; 217
    b046:	b8 2e       	mov	r11, r24
    b048:	8b e5       	ldi	r24, 0x5B	; 91
    b04a:	c8 2e       	mov	r12, r24
    b04c:	87 e0       	ldi	r24, 0x07	; 7
    b04e:	d8 2e       	mov	r13, r24
    b050:	c6 01       	movw	r24, r12
    b052:	b5 01       	movw	r22, r10
    b054:	2d e1       	ldi	r18, 0x1D	; 29
    b056:	33 ef       	ldi	r19, 0xF3	; 243
    b058:	41 e0       	ldi	r20, 0x01	; 1
    b05a:	50 e0       	ldi	r21, 0x00	; 0
    b05c:	0e 94 cf 57 	call	0xaf9e	; 0xaf9e <__divmodsi4>
    b060:	27 ea       	ldi	r18, 0xA7	; 167
    b062:	31 e4       	ldi	r19, 0x41	; 65
    b064:	40 e0       	ldi	r20, 0x00	; 0
    b066:	50 e0       	ldi	r21, 0x00	; 0
    b068:	0e 94 89 57 	call	0xaf12	; 0xaf12 <__mulsi3>
    b06c:	7b 01       	movw	r14, r22
    b06e:	8c 01       	movw	r16, r24
    b070:	c6 01       	movw	r24, r12
    b072:	b5 01       	movw	r22, r10
    b074:	2d e1       	ldi	r18, 0x1D	; 29
    b076:	33 ef       	ldi	r19, 0xF3	; 243
    b078:	41 e0       	ldi	r20, 0x01	; 1
    b07a:	50 e0       	ldi	r21, 0x00	; 0
    b07c:	0e 94 cf 57 	call	0xaf9e	; 0xaf9e <__divmodsi4>
    b080:	ca 01       	movw	r24, r20
    b082:	b9 01       	movw	r22, r18
    b084:	2c ee       	ldi	r18, 0xEC	; 236
    b086:	34 ef       	ldi	r19, 0xF4	; 244
    b088:	4f ef       	ldi	r20, 0xFF	; 255
    b08a:	5f ef       	ldi	r21, 0xFF	; 255
    b08c:	0e 94 89 57 	call	0xaf12	; 0xaf12 <__mulsi3>
    b090:	6e 0d       	add	r22, r14
    b092:	7f 1d       	adc	r23, r15
    b094:	80 1f       	adc	r24, r16
    b096:	91 1f       	adc	r25, r17
    b098:	97 ff       	sbrs	r25, 7
    b09a:	04 c0       	rjmp	.+8      	; 0xb0a4 <do_rand+0x8c>
    b09c:	61 50       	subi	r22, 0x01	; 1
    b09e:	70 40       	sbci	r23, 0x00	; 0
    b0a0:	80 40       	sbci	r24, 0x00	; 0
    b0a2:	90 48       	sbci	r25, 0x80	; 128
    b0a4:	68 83       	st	Y, r22
    b0a6:	79 83       	std	Y+1, r23	; 0x01
    b0a8:	8a 83       	std	Y+2, r24	; 0x02
    b0aa:	9b 83       	std	Y+3, r25	; 0x03
    b0ac:	9b 01       	movw	r18, r22
    b0ae:	3f 77       	andi	r19, 0x7F	; 127
    b0b0:	c9 01       	movw	r24, r18
    b0b2:	df 91       	pop	r29
    b0b4:	cf 91       	pop	r28
    b0b6:	1f 91       	pop	r17
    b0b8:	0f 91       	pop	r16
    b0ba:	ff 90       	pop	r15
    b0bc:	ef 90       	pop	r14
    b0be:	df 90       	pop	r13
    b0c0:	cf 90       	pop	r12
    b0c2:	bf 90       	pop	r11
    b0c4:	af 90       	pop	r10
    b0c6:	08 95       	ret

0000b0c8 <rand_r>:
    b0c8:	0e 94 0c 58 	call	0xb018	; 0xb018 <do_rand>
    b0cc:	08 95       	ret

0000b0ce <rand>:
    b0ce:	86 e3       	ldi	r24, 0x36	; 54
    b0d0:	92 e0       	ldi	r25, 0x02	; 2
    b0d2:	0e 94 0c 58 	call	0xb018	; 0xb018 <do_rand>
    b0d6:	08 95       	ret

0000b0d8 <srand>:
    b0d8:	a0 e0       	ldi	r26, 0x00	; 0
    b0da:	b0 e0       	ldi	r27, 0x00	; 0
    b0dc:	80 93 36 02 	sts	0x0236, r24
    b0e0:	90 93 37 02 	sts	0x0237, r25
    b0e4:	a0 93 38 02 	sts	0x0238, r26
    b0e8:	b0 93 39 02 	sts	0x0239, r27
    b0ec:	08 95       	ret

0000b0ee <memset>:
    b0ee:	dc 01       	movw	r26, r24
    b0f0:	01 c0       	rjmp	.+2      	; 0xb0f4 <memset+0x6>
    b0f2:	6d 93       	st	X+, r22
    b0f4:	41 50       	subi	r20, 0x01	; 1
    b0f6:	50 40       	sbci	r21, 0x00	; 0
    b0f8:	e0 f7       	brcc	.-8      	; 0xb0f2 <memset+0x4>
    b0fa:	08 95       	ret

0000b0fc <__eerd_block_m2560>:
    b0fc:	dc 01       	movw	r26, r24
    b0fe:	cb 01       	movw	r24, r22

0000b100 <__eerd_blraw_m2560>:
    b100:	fc 01       	movw	r30, r24
    b102:	f9 99       	sbic	0x1f, 1	; 31
    b104:	fe cf       	rjmp	.-4      	; 0xb102 <__eerd_blraw_m2560+0x2>
    b106:	06 c0       	rjmp	.+12     	; 0xb114 <__eerd_blraw_m2560+0x14>
    b108:	f2 bd       	out	0x22, r31	; 34
    b10a:	e1 bd       	out	0x21, r30	; 33
    b10c:	f8 9a       	sbi	0x1f, 0	; 31
    b10e:	31 96       	adiw	r30, 0x01	; 1
    b110:	00 b4       	in	r0, 0x20	; 32
    b112:	0d 92       	st	X+, r0
    b114:	41 50       	subi	r20, 0x01	; 1
    b116:	50 40       	sbci	r21, 0x00	; 0
    b118:	b8 f7       	brcc	.-18     	; 0xb108 <__eerd_blraw_m2560+0x8>
    b11a:	08 95       	ret

0000b11c <__eerd_byte_m2560>:
    b11c:	f9 99       	sbic	0x1f, 1	; 31
    b11e:	fe cf       	rjmp	.-4      	; 0xb11c <__eerd_byte_m2560>
    b120:	92 bd       	out	0x22, r25	; 34
    b122:	81 bd       	out	0x21, r24	; 33
    b124:	f8 9a       	sbi	0x1f, 0	; 31
    b126:	99 27       	eor	r25, r25
    b128:	80 b5       	in	r24, 0x20	; 32
    b12a:	08 95       	ret

0000b12c <__eerd_word_m2560>:
    b12c:	a8 e1       	ldi	r26, 0x18	; 24
    b12e:	b0 e0       	ldi	r27, 0x00	; 0
    b130:	42 e0       	ldi	r20, 0x02	; 2
    b132:	50 e0       	ldi	r21, 0x00	; 0
    b134:	0c 94 80 58 	jmp	0xb100	; 0xb100 <__eerd_blraw_m2560>

0000b138 <__eeupd_block_m2560>:
    b138:	dc 01       	movw	r26, r24
    b13a:	a4 0f       	add	r26, r20
    b13c:	b5 1f       	adc	r27, r21
    b13e:	41 50       	subi	r20, 0x01	; 1
    b140:	50 40       	sbci	r21, 0x00	; 0
    b142:	48 f0       	brcs	.+18     	; 0xb156 <__eeupd_block_m2560+0x1e>
    b144:	cb 01       	movw	r24, r22
    b146:	84 0f       	add	r24, r20
    b148:	95 1f       	adc	r25, r21
    b14a:	2e 91       	ld	r18, -X
    b14c:	0e 94 ad 58 	call	0xb15a	; 0xb15a <__eeupd_r18_m2560>
    b150:	41 50       	subi	r20, 0x01	; 1
    b152:	50 40       	sbci	r21, 0x00	; 0
    b154:	d0 f7       	brcc	.-12     	; 0xb14a <__eeupd_block_m2560+0x12>
    b156:	08 95       	ret

0000b158 <__eeupd_byte_m2560>:
    b158:	26 2f       	mov	r18, r22

0000b15a <__eeupd_r18_m2560>:
    b15a:	f9 99       	sbic	0x1f, 1	; 31
    b15c:	fe cf       	rjmp	.-4      	; 0xb15a <__eeupd_r18_m2560>
    b15e:	92 bd       	out	0x22, r25	; 34
    b160:	81 bd       	out	0x21, r24	; 33
    b162:	f8 9a       	sbi	0x1f, 0	; 31
    b164:	01 97       	sbiw	r24, 0x01	; 1
    b166:	00 b4       	in	r0, 0x20	; 32
    b168:	02 16       	cp	r0, r18
    b16a:	39 f0       	breq	.+14     	; 0xb17a <__eeupd_r18_m2560+0x20>
    b16c:	1f ba       	out	0x1f, r1	; 31
    b16e:	20 bd       	out	0x20, r18	; 32
    b170:	0f b6       	in	r0, 0x3f	; 63
    b172:	f8 94       	cli
    b174:	fa 9a       	sbi	0x1f, 2	; 31
    b176:	f9 9a       	sbi	0x1f, 1	; 31
    b178:	0f be       	out	0x3f, r0	; 63
    b17a:	08 95       	ret

0000b17c <__eeupd_word_m2560>:
    b17c:	01 96       	adiw	r24, 0x01	; 1
    b17e:	27 2f       	mov	r18, r23
    b180:	0e 94 ad 58 	call	0xb15a	; 0xb15a <__eeupd_r18_m2560>
    b184:	0c 94 ac 58 	jmp	0xb158	; 0xb158 <__eeupd_byte_m2560>

0000b188 <__eewr_byte_m2560>:
    b188:	26 2f       	mov	r18, r22

0000b18a <__eewr_r18_m2560>:
    b18a:	f9 99       	sbic	0x1f, 1	; 31
    b18c:	fe cf       	rjmp	.-4      	; 0xb18a <__eewr_r18_m2560>
    b18e:	1f ba       	out	0x1f, r1	; 31
    b190:	92 bd       	out	0x22, r25	; 34
    b192:	81 bd       	out	0x21, r24	; 33
    b194:	20 bd       	out	0x20, r18	; 32
    b196:	0f b6       	in	r0, 0x3f	; 63
    b198:	f8 94       	cli
    b19a:	fa 9a       	sbi	0x1f, 2	; 31
    b19c:	f9 9a       	sbi	0x1f, 1	; 31
    b19e:	0f be       	out	0x3f, r0	; 63
    b1a0:	01 96       	adiw	r24, 0x01	; 1
    b1a2:	08 95       	ret

0000b1a4 <_exit>:
    b1a4:	f8 94       	cli

0000b1a6 <__stop_program>:
    b1a6:	ff cf       	rjmp	.-2      	; 0xb1a6 <__stop_program>
