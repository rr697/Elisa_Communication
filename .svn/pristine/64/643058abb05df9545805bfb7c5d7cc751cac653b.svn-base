
Elisa3-avr-studio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800200  000086ea  0000877e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000086ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000370  0080021c  0080021c  0000879a  2**0
                  ALLOC
  3 .stab         00003714  00000000  00000000  0000879c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000eb9  00000000  00000000  0000beb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000218  00000000  00000000  0000cd69  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000019ba  00000000  00000000  0000cf81  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004bba  00000000  00000000  0000e93b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000010e1  00000000  00000000  000134f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00006116  00000000  00000000  000145d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000800  00000000  00000000  0001a6ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000012e3  00000000  00000000  0001aeec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002374  00000000  00000000  0001c1cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000278  00000000  00000000  0001e543  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000128  00000000  00000000  0001e7bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__ctors_end>
       4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
       8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
       c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      10:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      14:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      18:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      1c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      20:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      24:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      28:	0c 94 e2 11 	jmp	0x23c4	; 0x23c4 <__vector_10>
      2c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      30:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      34:	0c 94 16 12 	jmp	0x242c	; 0x242c <__vector_13>
      38:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      3c:	0c 94 c7 1d 	jmp	0x3b8e	; 0x3b8e <__vector_15>
      40:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      44:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      48:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      4c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      50:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      54:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      58:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      5c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      60:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      64:	0c 94 92 1c 	jmp	0x3924	; 0x3924 <__vector_25>
      68:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      6c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      70:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      74:	0c 94 99 1e 	jmp	0x3d32	; 0x3d32 <__vector_29>
      78:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      7c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      80:	0c 94 71 34 	jmp	0x68e2	; 0x68e2 <__vector_32>
      84:	0c 94 87 34 	jmp	0x690e	; 0x690e <__vector_33>
      88:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      8c:	0c 94 e4 33 	jmp	0x67c8	; 0x67c8 <__vector_35>
      90:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      94:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      98:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      9c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      a0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      a4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      a8:	0c 94 b8 33 	jmp	0x6770	; 0x6770 <__vector_42>
      ac:	0c 94 ce 33 	jmp	0x679c	; 0x679c <__vector_43>
      b0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      b4:	0c 94 21 33 	jmp	0x6642	; 0x6642 <__vector_45>
      b8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      bc:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      c0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      c4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      c8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      cc:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      d0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      d4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      d8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      dc:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      e0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      e4:	f3 14       	cp	r15, r3
      e6:	d7 14       	cp	r13, r7
      e8:	a5 14       	cp	r10, r5
      ea:	90 14       	cp	r9, r0
      ec:	67 14       	cp	r6, r7
      ee:	55 14       	cp	r5, r5
      f0:	2c 14       	cp	r2, r12
      f2:	10 14       	cp	r1, r0
      f4:	d7 13       	cpse	r29, r23
      f6:	bf 13       	cpse	r27, r31
      f8:	58 13       	cpse	r21, r24
      fa:	58 13       	cpse	r21, r24
      fc:	58 13       	cpse	r21, r24
      fe:	58 13       	cpse	r21, r24
     100:	58 13       	cpse	r21, r24
     102:	58 13       	cpse	r21, r24
     104:	04 14       	cp	r0, r4
     106:	b4 13       	cpse	r27, r20
     108:	58 13       	cpse	r21, r24
     10a:	58 13       	cpse	r21, r24
     10c:	58 13       	cpse	r21, r24
     10e:	58 13       	cpse	r21, r24
     110:	58 13       	cpse	r21, r24
     112:	58 13       	cpse	r21, r24
     114:	58 13       	cpse	r21, r24
     116:	58 13       	cpse	r21, r24
     118:	58 13       	cpse	r21, r24
     11a:	58 13       	cpse	r21, r24
     11c:	58 13       	cpse	r21, r24
     11e:	58 13       	cpse	r21, r24
     120:	d7 13       	cpse	r29, r23
     122:	a5 14       	cp	r10, r5
     124:	8c 13       	cpse	r24, r28
     126:	7f 13       	cpse	r23, r31
     128:	58 13       	cpse	r21, r24
     12a:	58 13       	cpse	r21, r24
     12c:	58 13       	cpse	r21, r24
     12e:	58 13       	cpse	r21, r24
     130:	58 13       	cpse	r21, r24
     132:	58 13       	cpse	r21, r24
     134:	58 13       	cpse	r21, r24
     136:	58 13       	cpse	r21, r24
     138:	58 13       	cpse	r21, r24
     13a:	58 13       	cpse	r21, r24
     13c:	58 13       	cpse	r21, r24
     13e:	58 13       	cpse	r21, r24
     140:	67 14       	cp	r6, r7
     142:	2c 14       	cp	r2, r12
     144:	58 13       	cpse	r21, r24
     146:	58 13       	cpse	r21, r24
     148:	f3 14       	cp	r15, r3
     14a:	55 14       	cp	r5, r5
     14c:	98 13       	cpse	r25, r24
     14e:	08 4a       	sbci	r16, 0xA8	; 168
     150:	d7 3b       	cpi	r29, 0xB7	; 183
     152:	3b ce       	rjmp	.-906    	; 0xfffffdca <__eeprom_end+0xff7efdca>
     154:	01 6e       	ori	r16, 0xE1	; 225
     156:	84 bc       	out	0x24, r8	; 36
     158:	bf fd       	.word	0xfdbf	; ????
     15a:	c1 2f       	mov	r28, r17
     15c:	3d 6c       	ori	r19, 0xCD	; 205
     15e:	74 31       	cpi	r23, 0x14	; 20
     160:	9a bd       	out	0x2a, r25	; 42
     162:	56 83       	std	Z+6, r21	; 0x06
     164:	3d da       	rcall	.-2950   	; 0xfffff5e0 <__eeprom_end+0xff7ef5e0>
     166:	3d 00       	.word	0x003d	; ????
     168:	c7 7f       	andi	r28, 0xF7	; 247
     16a:	11 be       	out	0x31, r1	; 49
     16c:	d9 e4       	ldi	r29, 0x49	; 73
     16e:	bb 4c       	sbci	r27, 0xCB	; 203
     170:	3e 91       	ld	r19, -X
     172:	6b aa       	std	Y+51, r6	; 0x33
     174:	aa be       	out	0x3a, r10	; 58
     176:	00 00       	nop
     178:	00 80       	ld	r0, Z
     17a:	3f 05       	cpc	r19, r15
     17c:	a8 4c       	sbci	r26, 0xC8	; 200
     17e:	cd b2       	in	r12, 0x1d	; 29
     180:	d4 4e       	sbci	r29, 0xE4	; 228
     182:	b9 38       	cpi	r27, 0x89	; 137
     184:	36 a9       	ldd	r19, Z+54	; 0x36
     186:	02 0c       	add	r0, r2
     188:	50 b9       	out	0x00, r21	; 0
     18a:	91 86       	std	Z+9, r9	; 0x09
     18c:	88 08       	sbc	r8, r8
     18e:	3c a6       	std	Y+44, r3	; 0x2c
     190:	aa aa       	std	Y+50, r10	; 0x32
     192:	2a be       	out	0x3a, r2	; 58
     194:	00 00       	nop
     196:	00 80       	ld	r0, Z
     198:	3f 00       	.word	0x003f	; ????

0000019a <__ctors_end>:
     19a:	11 24       	eor	r1, r1
     19c:	1f be       	out	0x3f, r1	; 63
     19e:	cf ef       	ldi	r28, 0xFF	; 255
     1a0:	d1 e2       	ldi	r29, 0x21	; 33
     1a2:	de bf       	out	0x3e, r29	; 62
     1a4:	cd bf       	out	0x3d, r28	; 61
     1a6:	00 e0       	ldi	r16, 0x00	; 0
     1a8:	0c bf       	out	0x3c, r16	; 60

000001aa <__do_copy_data>:
     1aa:	12 e0       	ldi	r17, 0x02	; 2
     1ac:	a0 e0       	ldi	r26, 0x00	; 0
     1ae:	b2 e0       	ldi	r27, 0x02	; 2
     1b0:	ea ee       	ldi	r30, 0xEA	; 234
     1b2:	f6 e8       	ldi	r31, 0x86	; 134
     1b4:	02 c0       	rjmp	.+4      	; 0x1ba <.do_copy_data_start>

000001b6 <.do_copy_data_loop>:
     1b6:	05 90       	lpm	r0, Z+
     1b8:	0d 92       	st	X+, r0

000001ba <.do_copy_data_start>:
     1ba:	ac 31       	cpi	r26, 0x1C	; 28
     1bc:	b1 07       	cpc	r27, r17
     1be:	d9 f7       	brne	.-10     	; 0x1b6 <.do_copy_data_loop>

000001c0 <__do_clear_bss>:
     1c0:	15 e0       	ldi	r17, 0x05	; 5
     1c2:	ac e1       	ldi	r26, 0x1C	; 28
     1c4:	b2 e0       	ldi	r27, 0x02	; 2
     1c6:	01 c0       	rjmp	.+2      	; 0x1ca <.do_clear_bss_start>

000001c8 <.do_clear_bss_loop>:
     1c8:	1d 92       	st	X+, r1

000001ca <.do_clear_bss_start>:
     1ca:	ac 38       	cpi	r26, 0x8C	; 140
     1cc:	b1 07       	cpc	r27, r17
     1ce:	e1 f7       	brne	.-8      	; 0x1c8 <.do_clear_bss_loop>
     1d0:	0e 94 ee 00 	call	0x1dc	; 0x1dc <main>
     1d4:	0c 94 74 43 	jmp	0x86e8	; 0x86e8 <_exit>

000001d8 <__bad_interrupt>:
     1d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001dc <main>:
#include "nRF24L01.h"
#include "behaviors.h"
#include "sensors.h"


int main(void) {
     1dc:	2f 92       	push	r2
     1de:	3f 92       	push	r3
     1e0:	4f 92       	push	r4
     1e2:	5f 92       	push	r5
     1e4:	6f 92       	push	r6
     1e6:	7f 92       	push	r7
     1e8:	8f 92       	push	r8
     1ea:	9f 92       	push	r9
     1ec:	af 92       	push	r10
     1ee:	bf 92       	push	r11
     1f0:	cf 92       	push	r12
     1f2:	df 92       	push	r13
     1f4:	ef 92       	push	r14
     1f6:	ff 92       	push	r15
     1f8:	0f 93       	push	r16
     1fa:	1f 93       	push	r17
     1fc:	df 93       	push	r29
     1fe:	cf 93       	push	r28
     200:	00 d0       	rcall	.+0      	; 0x202 <main+0x26>
     202:	0f 92       	push	r0
     204:	cd b7       	in	r28, 0x3d	; 61
     206:	de b7       	in	r29, 0x3e	; 62
	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
	unsigned char prevSelector=0;
	unsigned int i=0;
	unsigned int currRand=0, currRand2=0;

	initPeripherals();
     208:	0e 94 66 1d 	call	0x3acc	; 0x3acc <initPeripherals>

	calibrateSensors();
     20c:	0e 94 23 3a 	call	0x7446	; 0x7446 <calibrateSensors>

	initBehaviors();
     210:	0e 94 9d 34 	call	0x693a	; 0x693a <initBehaviors>

	startTime = getTime100MicroSec();
     214:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <getTime100MicroSec>
     218:	6b 01       	movw	r12, r22
     21a:	7c 01       	movw	r14, r24

	speedStepCounter = getTime100MicroSec();
     21c:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <getTime100MicroSec>
     220:	9b 01       	movw	r18, r22
     222:	ac 01       	movw	r20, r24
     224:	60 93 5c 04 	sts	0x045C, r22
     228:	30 93 5d 04 	sts	0x045D, r19
     22c:	40 93 5e 04 	sts	0x045E, r20
     230:	50 93 5f 04 	sts	0x045F, r21
     234:	10 92 60 04 	sts	0x0460, r1
     238:	10 92 61 04 	sts	0x0461, r1
     23c:	10 92 62 04 	sts	0x0462, r1
     240:	10 92 63 04 	sts	0x0463, r1
int main(void) {

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
	unsigned char prevSelector=0;
	unsigned int i=0;
	unsigned int currRand=0, currRand2=0;
     244:	aa 24       	eor	r10, r10
     246:	bb 24       	eor	r11, r11


int main(void) {

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
	unsigned char prevSelector=0;
     248:	00 e0       	ldi	r16, 0x00	; 0
#include "sensors.h"


int main(void) {

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
     24a:	19 82       	std	Y+1, r1	; 0x01
     24c:	1a 82       	std	Y+2, r1	; 0x02
     24e:	1b 82       	std	Y+3, r1	; 0x03
     250:	1c 82       	std	Y+4, r1	; 0x04
		computeAngle();

		// turn off the rgb leds after one half second in the "charger demo"
		if(currentSelector==7) {
			if((getTime100MicroSec()-turnOffLedsTime) > PAUSE_500_MSEC) {
				pwm_red = 255;
     252:	1f ef       	ldi	r17, 0xFF	; 255
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption

				switch(rgbState) {
					case 0:
						pwm_red = 255 - currRand;	
						rgbState = 1;
     254:	22 24       	eor	r2, r2
     256:	23 94       	inc	r2
	eeprom_update_block(calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
*/

	while(1) {

		currentSelector = getSelector();	// update selector position
     258:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <getSelector>
     25c:	80 93 48 04 	sts	0x0448, r24

		readAccelXYZ();						// update accelerometer values to compute the angle
     260:	0e 94 63 39 	call	0x72c6	; 0x72c6 <readAccelXYZ>

		computeAngle();
     264:	0e 94 9f 3e 	call	0x7d3e	; 0x7d3e <computeAngle>

		// turn off the rgb leds after one half second in the "charger demo"
		if(currentSelector==7) {
     268:	80 91 48 04 	lds	r24, 0x0448
     26c:	87 30       	cpi	r24, 0x07	; 7
     26e:	09 f4       	brne	.+2      	; 0x272 <main+0x96>
     270:	b9 c1       	rjmp	.+882    	; 0x5e4 <main+0x408>
				pwm_green = 255;
				pwm_blue = 255;			
			}
		}

		endTime = getTime100MicroSec();
     272:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <getTime100MicroSec>
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
     276:	6c 19       	sub	r22, r12
     278:	7d 09       	sbc	r23, r13
     27a:	8e 09       	sbc	r24, r14
     27c:	9f 09       	sbc	r25, r15
     27e:	6e 31       	cpi	r22, 0x1E	; 30
     280:	4b e4       	ldi	r20, 0x4B	; 75
     282:	74 07       	cpc	r23, r20
     284:	40 e0       	ldi	r20, 0x00	; 0
     286:	84 07       	cpc	r24, r20
     288:	40 e0       	ldi	r20, 0x00	; 0
     28a:	94 07       	cpc	r25, r20
     28c:	08 f0       	brcs	.+2      	; 0x290 <main+0xb4>
     28e:	96 c1       	rjmp	.+812    	; 0x5bc <main+0x3e0>
			startTime = getTime100MicroSec();
		}

		
		//if(calibrateOdomFlag==0) {
			handleIRRemoteCommands();
     290:	0e 94 46 13 	call	0x268c	; 0x268c <handleIRRemoteCommands>
		//}


		//if(calibrateOdomFlag==0) {
			handleRFCommands();
     294:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <handleRFCommands>
		//}


		if(calibrateOdomFlag==0) {
     298:	80 91 c7 04 	lds	r24, 0x04C7
     29c:	88 23       	and	r24, r24
     29e:	09 f4       	brne	.+2      	; 0x2a2 <main+0xc6>
     2a0:	76 c0       	rjmp	.+236    	; 0x38e <main+0x1b2>
				}

			}
		}

		if(currentSelector!=6 && currentSelector!=15) {
     2a2:	80 91 48 04 	lds	r24, 0x0448
     2a6:	86 30       	cpi	r24, 0x06	; 6
     2a8:	09 f4       	brne	.+2      	; 0x2ac <main+0xd0>
     2aa:	62 c1       	rjmp	.+708    	; 0x570 <main+0x394>
     2ac:	8f 30       	cpi	r24, 0x0F	; 15
     2ae:	09 f0       	breq	.+2      	; 0x2b2 <main+0xd6>
     2b0:	4e c0       	rjmp	.+156    	; 0x34e <main+0x172>
					break;

		}

		if(currentSelector!=0) {
			handleMotorsWithSpeedController();  
     2b2:	0e 94 6f 2e 	call	0x5cde	; 0x5cde <handleMotorsWithSpeedController>
     2b6:	80 91 48 04 	lds	r24, 0x0448
		}

		if(prevSelector != currentSelector) {	// in case the selector is changed, reset the robot state
     2ba:	08 17       	cp	r16, r24
     2bc:	69 f2       	breq	.-102    	; 0x258 <main+0x7c>
			disableObstacleAvoidance();
     2be:	0e 94 e4 36 	call	0x6dc8	; 0x6dc8 <disableObstacleAvoidance>
			disableCliffAvoidance();
     2c2:	0e 94 eb 36 	call	0x6dd6	; 0x6dd6 <disableCliffAvoidance>
			GREEN_LED0_OFF;
     2c6:	80 91 0b 01 	lds	r24, 0x010B
     2ca:	81 60       	ori	r24, 0x01	; 1
     2cc:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED1_OFF;
     2d0:	80 91 0b 01 	lds	r24, 0x010B
     2d4:	82 60       	ori	r24, 0x02	; 2
     2d6:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED2_OFF;
     2da:	80 91 0b 01 	lds	r24, 0x010B
     2de:	84 60       	ori	r24, 0x04	; 4
     2e0:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED3_OFF;
     2e4:	a3 9a       	sbi	0x14, 3	; 20
			GREEN_LED4_OFF;
     2e6:	80 91 0b 01 	lds	r24, 0x010B
     2ea:	80 61       	ori	r24, 0x10	; 16
     2ec:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED5_OFF;
     2f0:	80 91 0b 01 	lds	r24, 0x010B
     2f4:	80 62       	ori	r24, 0x20	; 32
     2f6:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED6_OFF;
     2fa:	80 91 0b 01 	lds	r24, 0x010B
     2fe:	80 64       	ori	r24, 0x40	; 64
     300:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED7_OFF;
     304:	80 91 0b 01 	lds	r24, 0x010B
     308:	80 68       	ori	r24, 0x80	; 128
     30a:	80 93 0b 01 	sts	0x010B, r24
			pwm_red = 255;
     30e:	10 93 0c 02 	sts	0x020C, r17
			pwm_green = 255;
     312:	10 93 0d 02 	sts	0x020D, r17
			pwm_blue = 255;
     316:	10 93 0e 02 	sts	0x020E, r17
			updateRedLed(pwm_red);
     31a:	8f ef       	ldi	r24, 0xFF	; 255
     31c:	0e 94 2b 37 	call	0x6e56	; 0x6e56 <updateRedLed>
			updateGreenLed(pwm_green);
     320:	80 91 0d 02 	lds	r24, 0x020D
     324:	0e 94 3f 37 	call	0x6e7e	; 0x6e7e <updateGreenLed>
			updateBlueLed(pwm_blue);
     328:	80 91 0e 02 	lds	r24, 0x020E
     32c:	0e 94 53 37 	call	0x6ea6	; 0x6ea6 <updateBlueLed>
			setRightSpeed(0);
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	0e 94 12 23 	call	0x4624	; 0x4624 <setRightSpeed>
			setLeftSpeed(0);
     336:	80 e0       	ldi	r24, 0x00	; 0
     338:	0e 94 f5 22 	call	0x45ea	; 0x45ea <setLeftSpeed>
			rgbState = 0;
     33c:	10 92 18 03 	sts	0x0318, r1
			calibrationWritten = 0;
     340:	10 92 65 04 	sts	0x0465, r1
			demoState = 0;
     344:	10 92 4c 04 	sts	0x044C, r1
     348:	00 91 48 04 	lds	r16, 0x0448
     34c:	85 cf       	rjmp	.-246    	; 0x258 <main+0x7c>

			}
		}

		if(currentSelector!=6 && currentSelector!=15) {
			usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
     34e:	60 e0       	ldi	r22, 0x00	; 0
     350:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
		}

		switch(currentSelector) {
     354:	90 91 48 04 	lds	r25, 0x0448
     358:	89 2f       	mov	r24, r25
     35a:	96 30       	cpi	r25, 0x06	; 6
     35c:	09 f4       	brne	.+2      	; 0x360 <main+0x184>
     35e:	08 c1       	rjmp	.+528    	; 0x570 <main+0x394>
     360:	97 30       	cpi	r25, 0x07	; 7
     362:	08 f0       	brcs	.+2      	; 0x366 <main+0x18a>
     364:	60 c1       	rjmp	.+704    	; 0x626 <main+0x44a>
     366:	92 30       	cpi	r25, 0x02	; 2
     368:	09 f4       	brne	.+2      	; 0x36c <main+0x190>
     36a:	58 c1       	rjmp	.+688    	; 0x61c <main+0x440>
     36c:	93 30       	cpi	r25, 0x03	; 3
     36e:	08 f0       	brcs	.+2      	; 0x372 <main+0x196>
     370:	70 c2       	rjmp	.+1248   	; 0x852 <main+0x676>
     372:	99 23       	and	r25, r25
     374:	09 f4       	brne	.+2      	; 0x378 <main+0x19c>
     376:	79 c1       	rjmp	.+754    	; 0x66a <main+0x48e>
     378:	91 30       	cpi	r25, 0x01	; 1
     37a:	21 f4       	brne	.+8      	; 0x384 <main+0x1a8>
					handleMotorsWithNoController();
					break;
             
			case 1:	// obstacle avoidance enabled (the robot does not move untill commands are 
					// received from the radio or tv remote)
             		enableObstacleAvoidance();
     37c:	0e 94 e0 36 	call	0x6dc0	; 0x6dc0 <enableObstacleAvoidance>
     380:	90 91 48 04 	lds	r25, 0x0448
					//usart0Transmit(currentOsccal,1);
					break;

		}

		if(currentSelector!=0) {
     384:	99 23       	and	r25, r25
     386:	09 f0       	breq	.+2      	; 0x38a <main+0x1ae>
     388:	94 cf       	rjmp	.-216    	; 0x2b2 <main+0xd6>
     38a:	80 e0       	ldi	r24, 0x00	; 0
     38c:	96 cf       	rjmp	.-212    	; 0x2ba <main+0xde>
			handleRFCommands();
		//}


		if(calibrateOdomFlag==0) {
			if((getTime100MicroSec()-speedStepCounter) >= SPEED_STEP_DELAY) {
     38e:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <getTime100MicroSec>
     392:	9b 01       	movw	r18, r22
     394:	ac 01       	movw	r20, r24
     396:	60 e0       	ldi	r22, 0x00	; 0
     398:	70 e0       	ldi	r23, 0x00	; 0
     39a:	cb 01       	movw	r24, r22
     39c:	f0 91 5c 04 	lds	r31, 0x045C
     3a0:	e0 91 5d 04 	lds	r30, 0x045D
     3a4:	80 90 5e 04 	lds	r8, 0x045E
     3a8:	40 90 5f 04 	lds	r4, 0x045F
     3ac:	30 90 60 04 	lds	r3, 0x0460
     3b0:	50 90 61 04 	lds	r5, 0x0461
     3b4:	60 90 62 04 	lds	r6, 0x0462
     3b8:	70 90 63 04 	lds	r7, 0x0463
     3bc:	b2 2f       	mov	r27, r18
     3be:	bf 1b       	sub	r27, r31
     3c0:	a1 e0       	ldi	r26, 0x01	; 1
     3c2:	2b 17       	cp	r18, r27
     3c4:	08 f0       	brcs	.+2      	; 0x3c8 <main+0x1ec>
     3c6:	a0 e0       	ldi	r26, 0x00	; 0
     3c8:	f3 2f       	mov	r31, r19
     3ca:	fe 1b       	sub	r31, r30
     3cc:	ef 2f       	mov	r30, r31
     3ce:	f1 e0       	ldi	r31, 0x01	; 1
     3d0:	3e 17       	cp	r19, r30
     3d2:	08 f0       	brcs	.+2      	; 0x3d6 <main+0x1fa>
     3d4:	f0 e0       	ldi	r31, 0x00	; 0
     3d6:	9e 2e       	mov	r9, r30
     3d8:	9a 1a       	sub	r9, r26
     3da:	a9 2d       	mov	r26, r9
     3dc:	99 24       	eor	r9, r9
     3de:	93 94       	inc	r9
     3e0:	ea 17       	cp	r30, r26
     3e2:	08 f0       	brcs	.+2      	; 0x3e6 <main+0x20a>
     3e4:	99 24       	eor	r9, r9
     3e6:	f9 29       	or	r31, r9
     3e8:	e4 2f       	mov	r30, r20
     3ea:	e8 19       	sub	r30, r8
     3ec:	8e 2e       	mov	r8, r30
     3ee:	e1 e0       	ldi	r30, 0x01	; 1
     3f0:	48 15       	cp	r20, r8
     3f2:	08 f0       	brcs	.+2      	; 0x3f6 <main+0x21a>
     3f4:	e0 e0       	ldi	r30, 0x00	; 0
     3f6:	98 2c       	mov	r9, r8
     3f8:	9f 1a       	sub	r9, r31
     3fa:	f1 e0       	ldi	r31, 0x01	; 1
     3fc:	89 14       	cp	r8, r9
     3fe:	08 f0       	brcs	.+2      	; 0x402 <main+0x226>
     400:	f0 e0       	ldi	r31, 0x00	; 0
     402:	ef 2b       	or	r30, r31
     404:	f5 2f       	mov	r31, r21
     406:	f4 19       	sub	r31, r4
     408:	4f 2e       	mov	r4, r31
     40a:	f1 e0       	ldi	r31, 0x01	; 1
     40c:	54 15       	cp	r21, r4
     40e:	08 f0       	brcs	.+2      	; 0x412 <main+0x236>
     410:	f0 e0       	ldi	r31, 0x00	; 0
     412:	84 2c       	mov	r8, r4
     414:	8e 1a       	sub	r8, r30
     416:	e1 e0       	ldi	r30, 0x01	; 1
     418:	48 14       	cp	r4, r8
     41a:	08 f0       	brcs	.+2      	; 0x41e <main+0x242>
     41c:	e0 e0       	ldi	r30, 0x00	; 0
     41e:	fe 2b       	or	r31, r30
     420:	31 94       	neg	r3
     422:	e1 e0       	ldi	r30, 0x01	; 1
     424:	63 15       	cp	r22, r3
     426:	08 f0       	brcs	.+2      	; 0x42a <main+0x24e>
     428:	e0 e0       	ldi	r30, 0x00	; 0
     42a:	43 2c       	mov	r4, r3
     42c:	4f 1a       	sub	r4, r31
     42e:	f1 e0       	ldi	r31, 0x01	; 1
     430:	34 14       	cp	r3, r4
     432:	08 f0       	brcs	.+2      	; 0x436 <main+0x25a>
     434:	f0 e0       	ldi	r31, 0x00	; 0
     436:	ef 2b       	or	r30, r31
     438:	51 94       	neg	r5
     43a:	f1 e0       	ldi	r31, 0x01	; 1
     43c:	75 15       	cp	r23, r5
     43e:	08 f0       	brcs	.+2      	; 0x442 <main+0x266>
     440:	f0 e0       	ldi	r31, 0x00	; 0
     442:	35 2c       	mov	r3, r5
     444:	3e 1a       	sub	r3, r30
     446:	e1 e0       	ldi	r30, 0x01	; 1
     448:	53 14       	cp	r5, r3
     44a:	08 f0       	brcs	.+2      	; 0x44e <main+0x272>
     44c:	e0 e0       	ldi	r30, 0x00	; 0
     44e:	fe 2b       	or	r31, r30
     450:	61 94       	neg	r6
     452:	e1 e0       	ldi	r30, 0x01	; 1
     454:	86 15       	cp	r24, r6
     456:	08 f0       	brcs	.+2      	; 0x45a <main+0x27e>
     458:	e0 e0       	ldi	r30, 0x00	; 0
     45a:	96 2d       	mov	r25, r6
     45c:	9f 1b       	sub	r25, r31
     45e:	81 e0       	ldi	r24, 0x01	; 1
     460:	69 16       	cp	r6, r25
     462:	08 f0       	brcs	.+2      	; 0x466 <main+0x28a>
     464:	80 e0       	ldi	r24, 0x00	; 0
     466:	e8 2b       	or	r30, r24
     468:	71 94       	neg	r7
     46a:	7e 16       	cp	r7, r30
     46c:	91 f4       	brne	.+36     	; 0x492 <main+0x2b6>
     46e:	99 23       	and	r25, r25
     470:	81 f4       	brne	.+32     	; 0x492 <main+0x2b6>
     472:	33 20       	and	r3, r3
     474:	71 f4       	brne	.+28     	; 0x492 <main+0x2b6>
     476:	44 20       	and	r4, r4
     478:	61 f4       	brne	.+24     	; 0x492 <main+0x2b6>
     47a:	88 20       	and	r8, r8
     47c:	51 f4       	brne	.+20     	; 0x492 <main+0x2b6>
     47e:	99 20       	and	r9, r9
     480:	41 f4       	brne	.+16     	; 0x492 <main+0x2b6>
     482:	a2 30       	cpi	r26, 0x02	; 2
     484:	30 f4       	brcc	.+12     	; 0x492 <main+0x2b6>
     486:	a1 30       	cpi	r26, 0x01	; 1
     488:	09 f0       	breq	.+2      	; 0x48c <main+0x2b0>
     48a:	0b cf       	rjmp	.-490    	; 0x2a2 <main+0xc6>
     48c:	b0 39       	cpi	r27, 0x90	; 144
     48e:	08 f4       	brcc	.+2      	; 0x492 <main+0x2b6>
     490:	08 cf       	rjmp	.-496    	; 0x2a2 <main+0xc6>
				speedStepCounter = getTime100MicroSec();
     492:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <getTime100MicroSec>
     496:	9b 01       	movw	r18, r22
     498:	ac 01       	movw	r20, r24
     49a:	60 93 5c 04 	sts	0x045C, r22
     49e:	30 93 5d 04 	sts	0x045D, r19
     4a2:	40 93 5e 04 	sts	0x045E, r20
     4a6:	50 93 5f 04 	sts	0x045F, r21
     4aa:	10 92 60 04 	sts	0x0460, r1
     4ae:	10 92 61 04 	sts	0x0461, r1
     4b2:	10 92 62 04 	sts	0x0462, r1
     4b6:	10 92 63 04 	sts	0x0463, r1

				if(softAccEnabled) {
     4ba:	80 91 64 04 	lds	r24, 0x0464
     4be:	88 23       	and	r24, r24
     4c0:	09 f4       	brne	.+2      	; 0x4c4 <main+0x2e8>
     4c2:	5a c2       	rjmp	.+1204   	; 0x978 <main+0x79c>
					if(pwm_right_desired == 0) {
     4c4:	80 91 f7 02 	lds	r24, 0x02F7
     4c8:	90 91 f8 02 	lds	r25, 0x02F8
     4cc:	00 97       	sbiw	r24, 0x00	; 0
     4ce:	09 f4       	brne	.+2      	; 0x4d2 <main+0x2f6>
     4d0:	eb c2       	rjmp	.+1494   	; 0xaa8 <main+0x8cc>
						pwm_intermediate_right_desired = 0;
					} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
     4d2:	20 91 fb 02 	lds	r18, 0x02FB
     4d6:	30 91 fc 02 	lds	r19, 0x02FC
     4da:	28 9f       	mul	r18, r24
     4dc:	a0 01       	movw	r20, r0
     4de:	29 9f       	mul	r18, r25
     4e0:	50 0d       	add	r21, r0
     4e2:	38 9f       	mul	r19, r24
     4e4:	50 0d       	add	r21, r0
     4e6:	11 24       	eor	r1, r1
     4e8:	57 fd       	sbrc	r21, 7
     4ea:	de c2       	rjmp	.+1468   	; 0xaa8 <main+0x8cc>
						pwm_intermediate_right_desired = 0;
					} else if(pwm_right_desired > pwm_intermediate_right_desired) {
     4ec:	28 17       	cp	r18, r24
     4ee:	39 07       	cpc	r19, r25
     4f0:	14 f0       	brlt	.+4      	; 0x4f6 <main+0x31a>
     4f2:	0c 94 de 0a 	jmp	0x15bc	; 0x15bc <main+0x13e0>
						pwm_intermediate_right_desired += speedStep;
     4f6:	40 91 17 02 	lds	r20, 0x0217
     4fa:	24 0f       	add	r18, r20
     4fc:	31 1d       	adc	r19, r1
     4fe:	30 93 fc 02 	sts	0x02FC, r19
     502:	20 93 fb 02 	sts	0x02FB, r18
						if(pwm_intermediate_right_desired > pwm_right_desired) {
     506:	82 17       	cp	r24, r18
     508:	93 07       	cpc	r25, r19
     50a:	24 f4       	brge	.+8      	; 0x514 <main+0x338>
							pwm_intermediate_right_desired = pwm_right_desired;
						}
					} else if(pwm_right_desired < pwm_intermediate_right_desired) {
						pwm_intermediate_right_desired -= speedStep;
						if(pwm_intermediate_right_desired < pwm_right_desired) {
							pwm_intermediate_right_desired = pwm_right_desired;
     50c:	90 93 fc 02 	sts	0x02FC, r25
     510:	80 93 fb 02 	sts	0x02FB, r24
						}					
					}
	
					if(pwm_left_desired == 0) {
     514:	80 91 f9 02 	lds	r24, 0x02F9
     518:	90 91 fa 02 	lds	r25, 0x02FA
     51c:	00 97       	sbiw	r24, 0x00	; 0
     51e:	09 f4       	brne	.+2      	; 0x522 <main+0x346>
     520:	be c2       	rjmp	.+1404   	; 0xa9e <main+0x8c2>
						pwm_intermediate_left_desired = 0;
					} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
     522:	20 91 fd 02 	lds	r18, 0x02FD
     526:	30 91 fe 02 	lds	r19, 0x02FE
     52a:	28 9f       	mul	r18, r24
     52c:	a0 01       	movw	r20, r0
     52e:	29 9f       	mul	r18, r25
     530:	50 0d       	add	r21, r0
     532:	38 9f       	mul	r19, r24
     534:	50 0d       	add	r21, r0
     536:	11 24       	eor	r1, r1
     538:	57 fd       	sbrc	r21, 7
     53a:	b1 c2       	rjmp	.+1378   	; 0xa9e <main+0x8c2>
						pwm_intermediate_left_desired = 0;
					} else if(pwm_left_desired > pwm_intermediate_left_desired) {
     53c:	28 17       	cp	r18, r24
     53e:	39 07       	cpc	r19, r25
     540:	14 f0       	brlt	.+4      	; 0x546 <main+0x36a>
     542:	0c 94 f2 0a 	jmp	0x15e4	; 0x15e4 <main+0x1408>
						pwm_intermediate_left_desired += speedStep;
     546:	40 91 17 02 	lds	r20, 0x0217
     54a:	24 0f       	add	r18, r20
     54c:	31 1d       	adc	r19, r1
     54e:	30 93 fe 02 	sts	0x02FE, r19
     552:	20 93 fd 02 	sts	0x02FD, r18
						if(pwm_intermediate_left_desired > pwm_left_desired) {
     556:	82 17       	cp	r24, r18
     558:	93 07       	cpc	r25, r19
     55a:	0c f0       	brlt	.+2      	; 0x55e <main+0x382>
     55c:	a2 ce       	rjmp	.-700    	; 0x2a2 <main+0xc6>
							pwm_intermediate_left_desired = pwm_left_desired;
						}					
					}
				} else {
					pwm_intermediate_right_desired = pwm_right_desired;
					pwm_intermediate_left_desired = pwm_left_desired;
     55e:	90 93 fe 02 	sts	0x02FE, r25
     562:	80 93 fd 02 	sts	0x02FD, r24
				}

			}
		}

		if(currentSelector!=6 && currentSelector!=15) {
     566:	80 91 48 04 	lds	r24, 0x0448
     56a:	86 30       	cpi	r24, 0x06	; 6
     56c:	09 f0       	breq	.+2      	; 0x570 <main+0x394>
     56e:	9e ce       	rjmp	.-708    	; 0x2ac <main+0xd0>
					setLeftSpeed(25);
					setRightSpeed(25);
					break;

			case 6:	// robot testing
					switch(menuChoice) {
     570:	90 91 1f 04 	lds	r25, 0x041F
     574:	91 30       	cpi	r25, 0x01	; 1
     576:	09 f4       	brne	.+2      	; 0x57a <main+0x39e>
     578:	d8 c3       	rjmp	.+1968   	; 0xd2a <main+0xb4e>
     57a:	91 30       	cpi	r25, 0x01	; 1
     57c:	08 f0       	brcs	.+2      	; 0x580 <main+0x3a4>
     57e:	9d c3       	rjmp	.+1850   	; 0xcba <main+0xade>
						case 0:
							setRightSpeed(0);
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	0e 94 12 23 	call	0x4624	; 0x4624 <setRightSpeed>
							setLeftSpeed(0);
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	0e 94 f5 22 	call	0x45ea	; 0x45ea <setLeftSpeed>
							turnOffGreenLeds();
     58c:	0e 94 04 38 	call	0x7008	; 0x7008 <turnOffGreenLeds>
							pwm_red=255;
     590:	10 93 0c 02 	sts	0x020C, r17
							pwm_green=255;
     594:	10 93 0d 02 	sts	0x020D, r17
							pwm_blue=255;
     598:	10 93 0e 02 	sts	0x020E, r17
							updateRedLed(pwm_red);
     59c:	8f ef       	ldi	r24, 0xFF	; 255
     59e:	0e 94 2b 37 	call	0x6e56	; 0x6e56 <updateRedLed>
							updateGreenLed(pwm_green);
     5a2:	80 91 0d 02 	lds	r24, 0x020D
     5a6:	0e 94 3f 37 	call	0x6e7e	; 0x6e7e <updateGreenLed>
							updateBlueLed(pwm_blue);
     5aa:	80 91 0e 02 	lds	r24, 0x020E
     5ae:	0e 94 53 37 	call	0x6ea6	; 0x6ea6 <updateBlueLed>
							LED_IR1_HIGH;
     5b2:	44 9a       	sbi	0x08, 4	; 8
							LED_IR2_HIGH;
     5b4:	45 9a       	sbi	0x08, 5	; 8
     5b6:	90 91 48 04 	lds	r25, 0x0448
							break;
     5ba:	e4 ce       	rjmp	.-568    	; 0x384 <main+0x1a8>
			}
		}

		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
     5bc:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <readBatteryLevel>
             		
			if(currentSelector==4 || currentSelector==5) {
     5c0:	80 91 48 04 	lds	r24, 0x0448
     5c4:	98 2f       	mov	r25, r24
     5c6:	94 50       	subi	r25, 0x04	; 4
     5c8:	92 30       	cpi	r25, 0x02	; 2
     5ca:	08 f4       	brcc	.+2      	; 0x5ce <main+0x3f2>
     5cc:	e2 c1       	rjmp	.+964    	; 0x992 <main+0x7b6>
					}
				} else {	// do nothing => all 3 leds turned on

				}

			} else if(currentSelector==7) {
     5ce:	87 30       	cpi	r24, 0x07	; 7
     5d0:	09 f4       	brne	.+2      	; 0x5d4 <main+0x3f8>
     5d2:	0a c2       	rjmp	.+1044   	; 0x9e8 <main+0x80c>

				}

				turnOffLedsTime = getTime100MicroSec();

			} else if(currentSelector==6) {
     5d4:	86 30       	cpi	r24, 0x06	; 6
     5d6:	09 f4       	brne	.+2      	; 0x5da <main+0x3fe>
     5d8:	23 c1       	rjmp	.+582    	; 0x820 <main+0x644>
						rgbState = 0;
					}
				}
			}

			startTime = getTime100MicroSec();
     5da:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <getTime100MicroSec>
     5de:	6b 01       	movw	r12, r22
     5e0:	7c 01       	movw	r14, r24
     5e2:	56 ce       	rjmp	.-852    	; 0x290 <main+0xb4>

		computeAngle();

		// turn off the rgb leds after one half second in the "charger demo"
		if(currentSelector==7) {
			if((getTime100MicroSec()-turnOffLedsTime) > PAUSE_500_MSEC) {
     5e4:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <getTime100MicroSec>
     5e8:	29 81       	ldd	r18, Y+1	; 0x01
     5ea:	3a 81       	ldd	r19, Y+2	; 0x02
     5ec:	4b 81       	ldd	r20, Y+3	; 0x03
     5ee:	5c 81       	ldd	r21, Y+4	; 0x04
     5f0:	62 1b       	sub	r22, r18
     5f2:	73 0b       	sbc	r23, r19
     5f4:	84 0b       	sbc	r24, r20
     5f6:	95 0b       	sbc	r25, r21
     5f8:	68 3c       	cpi	r22, 0xC8	; 200
     5fa:	32 e1       	ldi	r19, 0x12	; 18
     5fc:	73 07       	cpc	r23, r19
     5fe:	30 e0       	ldi	r19, 0x00	; 0
     600:	83 07       	cpc	r24, r19
     602:	30 e0       	ldi	r19, 0x00	; 0
     604:	93 07       	cpc	r25, r19
     606:	08 f4       	brcc	.+2      	; 0x60a <main+0x42e>
     608:	34 ce       	rjmp	.-920    	; 0x272 <main+0x96>
				pwm_red = 255;
     60a:	10 93 0c 02 	sts	0x020C, r17
				pwm_green = 255;
     60e:	10 93 0d 02 	sts	0x020D, r17
				pwm_blue = 255;			
     612:	10 93 0e 02 	sts	0x020E, r17
     616:	2d ce       	rjmp	.-934    	; 0x272 <main+0x96>
             		enableCliffAvoidance();
					break;
    
			case 3:	// both obstacle and cliff avoidance enabled (the robot does not move untill commands are
					// received from the radio or tv remote)
            		enableObstacleAvoidance();
     618:	0e 94 e0 36 	call	0x6dc0	; 0x6dc0 <enableObstacleAvoidance>
					enableCliffAvoidance();
     61c:	0e 94 e7 36 	call	0x6dce	; 0x6dce <enableCliffAvoidance>
     620:	90 91 48 04 	lds	r25, 0x0448
					break;
     624:	af ce       	rjmp	.-674    	; 0x384 <main+0x1a8>

		if(currentSelector!=6 && currentSelector!=15) {
			usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		}

		switch(currentSelector) {
     626:	9a 30       	cpi	r25, 0x0A	; 10
     628:	09 f4       	brne	.+2      	; 0x62c <main+0x450>
     62a:	7d c0       	rjmp	.+250    	; 0x726 <main+0x54a>
     62c:	9b 30       	cpi	r25, 0x0B	; 11
     62e:	08 f0       	brcs	.+2      	; 0x632 <main+0x456>
     630:	51 c1       	rjmp	.+674    	; 0x8d4 <main+0x6f8>
     632:	98 30       	cpi	r25, 0x08	; 8
     634:	09 f4       	brne	.+2      	; 0x638 <main+0x45c>
     636:	6b c0       	rjmp	.+214    	; 0x70e <main+0x532>
     638:	99 30       	cpi	r25, 0x09	; 9
     63a:	e0 f0       	brcs	.+56     	; 0x674 <main+0x498>
					break;

			case 9:	// write default calibration values; wait 2 seconds before start writing the calibration values
					// in eeprom in order to avoid rewriting the data involuntarily when moving the selector and passing 
					// through selector position 9
					switch(demoState) {
     63c:	80 91 4c 04 	lds	r24, 0x044C
     640:	81 30       	cpi	r24, 0x01	; 1
     642:	09 f4       	brne	.+2      	; 0x646 <main+0x46a>
     644:	08 c6       	rjmp	.+3088   	; 0x1256 <main+0x107a>
     646:	81 30       	cpi	r24, 0x01	; 1
     648:	08 f0       	brcs	.+2      	; 0x64c <main+0x470>
     64a:	28 c3       	rjmp	.+1616   	; 0xc9c <main+0xac0>
						case 0:
							demoStartTime = getTime100MicroSec();
     64c:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <getTime100MicroSec>
     650:	60 93 50 04 	sts	0x0450, r22
     654:	70 93 51 04 	sts	0x0451, r23
     658:	80 93 52 04 	sts	0x0452, r24
     65c:	90 93 53 04 	sts	0x0453, r25
							demoState = 1;
     660:	20 92 4c 04 	sts	0x044C, r2
     664:	90 91 48 04 	lds	r25, 0x0448
							break;
     668:	8d ce       	rjmp	.-742    	; 0x384 <main+0x1a8>
		}

		switch(currentSelector) {
    
			case 0:	// motors in direct power control (no speed control)
					handleMotorsWithNoController();
     66a:	0e 94 c5 21 	call	0x438a	; 0x438a <handleMotorsWithNoController>
     66e:	90 91 48 04 	lds	r25, 0x0448
					break;
     672:	88 ce       	rjmp	.-752    	; 0x384 <main+0x1a8>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
     674:	80 91 4c 04 	lds	r24, 0x044C
     678:	82 30       	cpi	r24, 0x02	; 2
     67a:	09 f4       	brne	.+2      	; 0x67e <main+0x4a2>
     67c:	d6 c6       	rjmp	.+3500   	; 0x142a <main+0x124e>
     67e:	83 30       	cpi	r24, 0x03	; 3
     680:	08 f0       	brcs	.+2      	; 0x684 <main+0x4a8>
     682:	8e c2       	rjmp	.+1308   	; 0xba0 <main+0x9c4>
     684:	88 23       	and	r24, r24
     686:	09 f0       	breq	.+2      	; 0x68a <main+0x4ae>
     688:	0f c6       	rjmp	.+3102   	; 0x12a8 <main+0x10cc>
						case 0:	// move around
							turnOffGreenLeds();
     68a:	0e 94 04 38 	call	0x7008	; 0x7008 <turnOffGreenLeds>
							GREEN_LED0_ON;
     68e:	80 91 0b 01 	lds	r24, 0x010B
     692:	8e 7f       	andi	r24, 0xFE	; 254
     694:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED1_ON;
							lineFound = 0;
     698:	10 92 4d 04 	sts	0x044D, r1
							enableObstacleAvoidance();
     69c:	0e 94 e0 36 	call	0x6dc0	; 0x6dc0 <enableObstacleAvoidance>
							setRightSpeed(20);
     6a0:	84 e1       	ldi	r24, 0x14	; 20
     6a2:	0e 94 12 23 	call	0x4624	; 0x4624 <setRightSpeed>
							setLeftSpeed(20);
     6a6:	84 e1       	ldi	r24, 0x14	; 20
     6a8:	0e 94 f5 22 	call	0x45ea	; 0x45ea <setLeftSpeed>
							demoEndTime = getTime100MicroSec();
     6ac:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <getTime100MicroSec>
     6b0:	9b 01       	movw	r18, r22
     6b2:	ac 01       	movw	r20, r24
     6b4:	60 93 58 04 	sts	0x0458, r22
     6b8:	70 93 59 04 	sts	0x0459, r23
     6bc:	80 93 5a 04 	sts	0x045A, r24
     6c0:	90 93 5b 04 	sts	0x045B, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {
     6c4:	80 91 50 04 	lds	r24, 0x0450
     6c8:	90 91 51 04 	lds	r25, 0x0451
     6cc:	a0 91 52 04 	lds	r26, 0x0452
     6d0:	b0 91 53 04 	lds	r27, 0x0453
     6d4:	28 1b       	sub	r18, r24
     6d6:	39 0b       	sbc	r19, r25
     6d8:	4a 0b       	sbc	r20, r26
     6da:	5b 0b       	sbc	r21, r27
     6dc:	23 33       	cpi	r18, 0x33	; 51
     6de:	6f ee       	ldi	r22, 0xEF	; 239
     6e0:	36 07       	cpc	r19, r22
     6e2:	62 e0       	ldi	r22, 0x02	; 2
     6e4:	46 07       	cpc	r20, r22
     6e6:	60 e0       	ldi	r22, 0x00	; 0
     6e8:	56 07       	cpc	r21, r22
     6ea:	10 f0       	brcs	.+4      	; 0x6f0 <main+0x514>

								if(proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {
									outOfLine++;
									if(outOfLine > 250) {
										chargeContact = 0;
										demoState = 1;
     6ec:	20 92 4c 04 	sts	0x044C, r2
							}
							if((getTime100MicroSec()-demoStartTime2) >= (PAUSE_2_SEC)) {
								rgbLedState = 1;
								demoStartTime2 = getTime100MicroSec();
							}
							updateRedLed(pwm_red);
     6f0:	80 91 0c 02 	lds	r24, 0x020C
     6f4:	0e 94 2b 37 	call	0x6e56	; 0x6e56 <updateRedLed>
							updateGreenLed(pwm_green);
     6f8:	80 91 0d 02 	lds	r24, 0x020D
     6fc:	0e 94 3f 37 	call	0x6e7e	; 0x6e7e <updateGreenLed>
							updateBlueLed(pwm_blue);
     700:	80 91 0e 02 	lds	r24, 0x020E
     704:	0e 94 53 37 	call	0x6ea6	; 0x6ea6 <updateBlueLed>
     708:	90 91 48 04 	lds	r25, 0x0448
							break;
     70c:	3b ce       	rjmp	.-906    	; 0x384 <main+0x1a8>
					updateBlueLed(pwm_blue);

					break;
  
			case 8:	// motors calibration
					irEnabled = 1;
     70e:	20 92 12 02 	sts	0x0212, r2
					if(calibrateOdomFlag==1) {
     712:	80 91 c7 04 	lds	r24, 0x04C7
     716:	81 30       	cpi	r24, 0x01	; 1
     718:	09 f0       	breq	.+2      	; 0x71c <main+0x540>
     71a:	cb cd       	rjmp	.-1130   	; 0x2b2 <main+0xd6>
						handleCalibration();
     71c:	0e 94 16 24 	call	0x482c	; 0x482c <handleCalibration>
     720:	90 91 48 04 	lds	r25, 0x0448
     724:	2f ce       	rjmp	.-930    	; 0x384 <main+0x1a8>
							break;
					}
					break;

			case 10:// obstacle avoidance with random colors; 4 seconds motion and 10 seconds pause					
					switch(demoState) {
     726:	80 91 4c 04 	lds	r24, 0x044C
     72a:	81 30       	cpi	r24, 0x01	; 1
     72c:	09 f4       	brne	.+2      	; 0x730 <main+0x554>
     72e:	66 c5       	rjmp	.+2764   	; 0x11fc <main+0x1020>
     730:	81 30       	cpi	r24, 0x01	; 1
     732:	08 f0       	brcs	.+2      	; 0x736 <main+0x55a>
     734:	be c1       	rjmp	.+892    	; 0xab2 <main+0x8d6>
						case 0: // get first clock tick and start moving the robot with obstacle avoidance enabled
							demoStartTime = getTime100MicroSec();
     736:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <getTime100MicroSec>
     73a:	60 93 50 04 	sts	0x0450, r22
     73e:	70 93 51 04 	sts	0x0451, r23
     742:	80 93 52 04 	sts	0x0452, r24
     746:	90 93 53 04 	sts	0x0453, r25
							demoEndTime = getTime100MicroSec();							
     74a:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <getTime100MicroSec>
     74e:	60 93 58 04 	sts	0x0458, r22
     752:	70 93 59 04 	sts	0x0459, r23
     756:	80 93 5a 04 	sts	0x045A, r24
     75a:	90 93 5b 04 	sts	0x045B, r25
							demoStartTime2 = getTime100MicroSec();
     75e:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <getTime100MicroSec>
     762:	60 93 54 04 	sts	0x0454, r22
     766:	70 93 55 04 	sts	0x0455, r23
     76a:	80 93 56 04 	sts	0x0456, r24
     76e:	90 93 57 04 	sts	0x0457, r25
							enableObstacleAvoidance();
     772:	0e 94 e0 36 	call	0x6dc0	; 0x6dc0 <enableObstacleAvoidance>
							setLeftSpeed(20);
     776:	84 e1       	ldi	r24, 0x14	; 20
     778:	0e 94 f5 22 	call	0x45ea	; 0x45ea <setLeftSpeed>
							setRightSpeed(20);
     77c:	84 e1       	ldi	r24, 0x14	; 20
     77e:	0e 94 12 23 	call	0x4624	; 0x4624 <setRightSpeed>
							demoState = 1;
     782:	20 92 4c 04 	sts	0x044C, r2
								demoState = 1;							
							}
							break;
					}	
					
					switch(rgbLedState) {
     786:	80 91 67 04 	lds	r24, 0x0467
     78a:	81 30       	cpi	r24, 0x01	; 1
     78c:	09 f4       	brne	.+2      	; 0x790 <main+0x5b4>
     78e:	c4 c1       	rjmp	.+904    	; 0xb18 <main+0x93c>
     790:	81 30       	cpi	r24, 0x01	; 1
     792:	08 f0       	brcs	.+2      	; 0x796 <main+0x5ba>
     794:	48 c2       	rjmp	.+1168   	; 0xc26 <main+0xa4a>
						case 0:							
							pwm_red = 255;
     796:	10 93 0c 02 	sts	0x020C, r17
							pwm_green = 255;
     79a:	10 93 0d 02 	sts	0x020D, r17
							pwm_blue = 255;
     79e:	10 93 0e 02 	sts	0x020E, r17
							if((getTime100MicroSec()-demoEndTime) >= (PAUSE_100_MSEC)) {
     7a2:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <getTime100MicroSec>
     7a6:	9b 01       	movw	r18, r22
     7a8:	ac 01       	movw	r20, r24
     7aa:	80 91 58 04 	lds	r24, 0x0458
     7ae:	90 91 59 04 	lds	r25, 0x0459
     7b2:	a0 91 5a 04 	lds	r26, 0x045A
     7b6:	b0 91 5b 04 	lds	r27, 0x045B
     7ba:	28 1b       	sub	r18, r24
     7bc:	39 0b       	sbc	r19, r25
     7be:	4a 0b       	sbc	r20, r26
     7c0:	5b 0b       	sbc	r21, r27
     7c2:	21 3c       	cpi	r18, 0xC1	; 193
     7c4:	e3 e0       	ldi	r30, 0x03	; 3
     7c6:	3e 07       	cpc	r19, r30
     7c8:	e0 e0       	ldi	r30, 0x00	; 0
     7ca:	4e 07       	cpc	r20, r30
     7cc:	e0 e0       	ldi	r30, 0x00	; 0
     7ce:	5e 07       	cpc	r21, r30
     7d0:	08 f0       	brcs	.+2      	; 0x7d4 <main+0x5f8>
     7d2:	33 c7       	rjmp	.+3686   	; 0x163a <main+0x145e>
									greenLedState = 0;
								}
								setGreenLed(greenLedState, 1);
								demoEndTime = getTime100MicroSec();											
							}
							if((getTime100MicroSec()-demoStartTime2) >= (PAUSE_2_SEC)) {
     7d4:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <getTime100MicroSec>
     7d8:	9b 01       	movw	r18, r22
     7da:	ac 01       	movw	r20, r24
     7dc:	80 91 54 04 	lds	r24, 0x0454
     7e0:	90 91 55 04 	lds	r25, 0x0455
     7e4:	a0 91 56 04 	lds	r26, 0x0456
     7e8:	b0 91 57 04 	lds	r27, 0x0457
     7ec:	28 1b       	sub	r18, r24
     7ee:	39 0b       	sbc	r19, r25
     7f0:	4a 0b       	sbc	r20, r26
     7f2:	5b 0b       	sbc	r21, r27
     7f4:	2e 31       	cpi	r18, 0x1E	; 30
     7f6:	fb e4       	ldi	r31, 0x4B	; 75
     7f8:	3f 07       	cpc	r19, r31
     7fa:	f0 e0       	ldi	r31, 0x00	; 0
     7fc:	4f 07       	cpc	r20, r31
     7fe:	f0 e0       	ldi	r31, 0x00	; 0
     800:	5f 07       	cpc	r21, r31
     802:	08 f4       	brcc	.+2      	; 0x806 <main+0x62a>
     804:	75 cf       	rjmp	.-278    	; 0x6f0 <main+0x514>
								rgbLedState = 1;
     806:	20 92 67 04 	sts	0x0467, r2
								demoStartTime2 = getTime100MicroSec();
     80a:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <getTime100MicroSec>
     80e:	60 93 54 04 	sts	0x0454, r22
     812:	70 93 55 04 	sts	0x0455, r23
     816:	80 93 56 04 	sts	0x0456, r24
     81a:	90 93 57 04 	sts	0x0457, r25
     81e:	68 cf       	rjmp	.-304    	; 0x6f0 <main+0x514>
				}

				turnOffLedsTime = getTime100MicroSec();

			} else if(currentSelector==6) {
				if(menuChoice==1 && rfFlags<=1) {
     820:	80 91 1f 04 	lds	r24, 0x041F
     824:	81 30       	cpi	r24, 0x01	; 1
     826:	09 f0       	breq	.+2      	; 0x82a <main+0x64e>
     828:	d8 ce       	rjmp	.-592    	; 0x5da <main+0x3fe>
     82a:	90 91 15 03 	lds	r25, 0x0315
     82e:	92 30       	cpi	r25, 0x02	; 2
     830:	08 f0       	brcs	.+2      	; 0x834 <main+0x658>
     832:	d3 ce       	rjmp	.-602    	; 0x5da <main+0x3fe>
					if(rgbState == 0) {
     834:	90 91 18 03 	lds	r25, 0x0318
     838:	99 23       	and	r25, r25
     83a:	09 f0       	breq	.+2      	; 0x83e <main+0x662>
     83c:	6b c7       	rjmp	.+3798   	; 0x1714 <main+0x1538>
						pwm_red = 254;
     83e:	4e ef       	ldi	r20, 0xFE	; 254
     840:	40 93 0c 02 	sts	0x020C, r20
						pwm_green = 255;
     844:	10 93 0d 02 	sts	0x020D, r17
						pwm_blue = 255;
     848:	10 93 0e 02 	sts	0x020E, r17
						rgbState = 1;
     84c:	80 93 18 03 	sts	0x0318, r24
     850:	c4 ce       	rjmp	.-632    	; 0x5da <main+0x3fe>

		if(currentSelector!=6 && currentSelector!=15) {
			usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		}

		switch(currentSelector) {
     852:	94 30       	cpi	r25, 0x04	; 4
     854:	d1 f0       	breq	.+52     	; 0x88a <main+0x6ae>
     856:	95 30       	cpi	r25, 0x05	; 5
     858:	08 f4       	brcc	.+2      	; 0x85c <main+0x680>
     85a:	de ce       	rjmp	.-580    	; 0x618 <main+0x43c>
					updateBlueLed(pwm_blue);
					break;
             
			case 5:	// random colors on RGB leds; obstacle avoidance enabled; robot start moving automatically
					// (motors speed setting)
					updateRedLed(pwm_red);
     85c:	80 91 0c 02 	lds	r24, 0x020C
     860:	0e 94 2b 37 	call	0x6e56	; 0x6e56 <updateRedLed>
					updateGreenLed(pwm_green);
     864:	80 91 0d 02 	lds	r24, 0x020D
     868:	0e 94 3f 37 	call	0x6e7e	; 0x6e7e <updateGreenLed>
					updateBlueLed(pwm_blue);
     86c:	80 91 0e 02 	lds	r24, 0x020E
     870:	0e 94 53 37 	call	0x6ea6	; 0x6ea6 <updateBlueLed>
					enableObstacleAvoidance();
     874:	0e 94 e0 36 	call	0x6dc0	; 0x6dc0 <enableObstacleAvoidance>
					setLeftSpeed(25);
     878:	89 e1       	ldi	r24, 0x19	; 25
     87a:	0e 94 f5 22 	call	0x45ea	; 0x45ea <setLeftSpeed>
					setRightSpeed(25);
     87e:	89 e1       	ldi	r24, 0x19	; 25
     880:	0e 94 12 23 	call	0x4624	; 0x4624 <setRightSpeed>
     884:	90 91 48 04 	lds	r25, 0x0448
					break;
     888:	7d cd       	rjmp	.-1286   	; 0x384 <main+0x1a8>
            		enableObstacleAvoidance();
					enableCliffAvoidance();
					break;
            
			case 4:	// random colors on RGB leds; small green leds turned on
					GREEN_LED0_ON;
     88a:	80 91 0b 01 	lds	r24, 0x010B
     88e:	8e 7f       	andi	r24, 0xFE	; 254
     890:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED1_ON;
     894:	80 91 0b 01 	lds	r24, 0x010B
     898:	8d 7f       	andi	r24, 0xFD	; 253
     89a:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED2_ON;
     89e:	80 91 0b 01 	lds	r24, 0x010B
     8a2:	8b 7f       	andi	r24, 0xFB	; 251
     8a4:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED3_ON;
     8a8:	a3 98       	cbi	0x14, 3	; 20
					GREEN_LED4_ON;
     8aa:	80 91 0b 01 	lds	r24, 0x010B
     8ae:	8f 7e       	andi	r24, 0xEF	; 239
     8b0:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED5_ON;
     8b4:	80 91 0b 01 	lds	r24, 0x010B
     8b8:	8f 7d       	andi	r24, 0xDF	; 223
     8ba:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED6_ON;
     8be:	80 91 0b 01 	lds	r24, 0x010B
     8c2:	8f 7b       	andi	r24, 0xBF	; 191
     8c4:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED7_ON;
     8c8:	80 91 0b 01 	lds	r24, 0x010B
     8cc:	8f 77       	andi	r24, 0x7F	; 127
     8ce:	80 93 0b 01 	sts	0x010B, r24
     8d2:	0e cf       	rjmp	.-484    	; 0x6f0 <main+0x514>

		if(currentSelector!=6 && currentSelector!=15) {
			usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		}

		switch(currentSelector) {
     8d4:	9c 30       	cpi	r25, 0x0C	; 12
     8d6:	f1 f0       	breq	.+60     	; 0x914 <main+0x738>
     8d8:	9c 30       	cpi	r25, 0x0C	; 12
     8da:	a8 f1       	brcs	.+106    	; 0x946 <main+0x76a>
     8dc:	9d 30       	cpi	r25, 0x0D	; 13
     8de:	09 f0       	breq	.+2      	; 0x8e2 <main+0x706>
     8e0:	51 cd       	rjmp	.-1374   	; 0x384 <main+0x1a8>
						setLeftSpeed(0);
						setRightSpeed(0);
					}
					break;

			case 13:if(leftMotSteps <= 7000) {
     8e2:	60 91 d3 02 	lds	r22, 0x02D3
     8e6:	70 91 d4 02 	lds	r23, 0x02D4
     8ea:	80 91 d5 02 	lds	r24, 0x02D5
     8ee:	90 91 d6 02 	lds	r25, 0x02D6
     8f2:	20 e0       	ldi	r18, 0x00	; 0
     8f4:	30 ec       	ldi	r19, 0xC0	; 192
     8f6:	4a ed       	ldi	r20, 0xDA	; 218
     8f8:	55 e4       	ldi	r21, 0x45	; 69
     8fa:	0e 94 f8 3f 	call	0x7ff0	; 0x7ff0 <__cmpsf2>
     8fe:	18 16       	cp	r1, r24
     900:	cc f4       	brge	.+50     	; 0x934 <main+0x758>
						setLeftSpeed(40);
						setRightSpeed(40);
					} else {
						setLeftSpeed(0);
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	0e 94 f5 22 	call	0x45ea	; 0x45ea <setLeftSpeed>
						setRightSpeed(0);
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	0e 94 12 23 	call	0x4624	; 0x4624 <setRightSpeed>
     90e:	90 91 48 04 	lds	r25, 0x0448
     912:	38 cd       	rjmp	.-1424   	; 0x384 <main+0x1a8>
						setLeftSpeed(0);
						setRightSpeed(0);
					}
					break;

			case 12:if(leftMotSteps <= 6000) {
     914:	60 91 d3 02 	lds	r22, 0x02D3
     918:	70 91 d4 02 	lds	r23, 0x02D4
     91c:	80 91 d5 02 	lds	r24, 0x02D5
     920:	90 91 d6 02 	lds	r25, 0x02D6
     924:	20 e0       	ldi	r18, 0x00	; 0
     926:	30 e8       	ldi	r19, 0x80	; 128
     928:	4b eb       	ldi	r20, 0xBB	; 187
     92a:	55 e4       	ldi	r21, 0x45	; 69
     92c:	0e 94 f8 3f 	call	0x7ff0	; 0x7ff0 <__cmpsf2>
     930:	18 16       	cp	r1, r24
     932:	cc f0       	brlt	.+50     	; 0x966 <main+0x78a>
						setRightSpeed(0);
					}
					break;

			case 13:if(leftMotSteps <= 7000) {
						setLeftSpeed(40);
     934:	88 e2       	ldi	r24, 0x28	; 40
     936:	0e 94 f5 22 	call	0x45ea	; 0x45ea <setLeftSpeed>
						setRightSpeed(40);
     93a:	88 e2       	ldi	r24, 0x28	; 40
     93c:	0e 94 12 23 	call	0x4624	; 0x4624 <setRightSpeed>
     940:	90 91 48 04 	lds	r25, 0x0448
     944:	1f cd       	rjmp	.-1474   	; 0x384 <main+0x1a8>
					}
					

					break;

			case 11:if(leftMotSteps <= 5000) {
     946:	60 91 d3 02 	lds	r22, 0x02D3
     94a:	70 91 d4 02 	lds	r23, 0x02D4
     94e:	80 91 d5 02 	lds	r24, 0x02D5
     952:	90 91 d6 02 	lds	r25, 0x02D6
     956:	20 e0       	ldi	r18, 0x00	; 0
     958:	30 e4       	ldi	r19, 0x40	; 64
     95a:	4c e9       	ldi	r20, 0x9C	; 156
     95c:	55 e4       	ldi	r21, 0x45	; 69
     95e:	0e 94 f8 3f 	call	0x7ff0	; 0x7ff0 <__cmpsf2>
     962:	18 16       	cp	r1, r24
     964:	3c f7       	brge	.-50     	; 0x934 <main+0x758>

			case 12:if(leftMotSteps <= 6000) {
						setLeftSpeed(40);
						setRightSpeed(40);
					} else {
						setLeftSpeed(0);
     966:	80 e0       	ldi	r24, 0x00	; 0
     968:	0e 94 f5 22 	call	0x45ea	; 0x45ea <setLeftSpeed>
						setRightSpeed(0);
     96c:	80 e0       	ldi	r24, 0x00	; 0
     96e:	0e 94 12 23 	call	0x4624	; 0x4624 <setRightSpeed>
     972:	90 91 48 04 	lds	r25, 0x0448
     976:	06 cd       	rjmp	.-1524   	; 0x384 <main+0x1a8>
						if(pwm_intermediate_left_desired < pwm_left_desired) {
							pwm_intermediate_left_desired = pwm_left_desired;
						}					
					}
				} else {
					pwm_intermediate_right_desired = pwm_right_desired;
     978:	80 91 f7 02 	lds	r24, 0x02F7
     97c:	90 91 f8 02 	lds	r25, 0x02F8
     980:	90 93 fc 02 	sts	0x02FC, r25
     984:	80 93 fb 02 	sts	0x02FB, r24
					pwm_intermediate_left_desired = pwm_left_desired;
     988:	80 91 f9 02 	lds	r24, 0x02F9
     98c:	90 91 fa 02 	lds	r25, 0x02FA
     990:	e6 cd       	rjmp	.-1076   	; 0x55e <main+0x382>
		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
             		
			if(currentSelector==4 || currentSelector==5) {
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption
     992:	0e 94 0b 43 	call	0x8616	; 0x8616 <rand>
     996:	6e e1       	ldi	r22, 0x1E	; 30
     998:	70 e0       	ldi	r23, 0x00	; 0
     99a:	0e 94 6d 42 	call	0x84da	; 0x84da <__divmodhi4>
     99e:	a8 0e       	add	r10, r24
     9a0:	b9 1e       	adc	r11, r25
     9a2:	5f e7       	ldi	r21, 0x7F	; 127
     9a4:	a5 22       	and	r10, r21
     9a6:	bb 24       	eor	r11, r11

				switch(rgbState) {
     9a8:	80 91 18 03 	lds	r24, 0x0318
     9ac:	81 30       	cpi	r24, 0x01	; 1
     9ae:	09 f4       	brne	.+2      	; 0x9b2 <main+0x7d6>
     9b0:	b8 c5       	rjmp	.+2928   	; 0x1522 <main+0x1346>
     9b2:	81 30       	cpi	r24, 0x01	; 1
     9b4:	08 f0       	brcs	.+2      	; 0x9b8 <main+0x7dc>
     9b6:	6e c4       	rjmp	.+2268   	; 0x1294 <main+0x10b8>
					case 0:
						pwm_red = 255 - currRand;	
     9b8:	8a 2d       	mov	r24, r10
     9ba:	80 95       	com	r24
     9bc:	80 93 0c 02 	sts	0x020C, r24
						rgbState = 1;
     9c0:	20 92 18 03 	sts	0x0318, r2
						pwm_blue = 255 - currRand;
						rgbState = 0;
						break;
				}
				
				if(currRand<32) {
     9c4:	80 e2       	ldi	r24, 0x20	; 32
     9c6:	a8 16       	cp	r10, r24
     9c8:	b1 04       	cpc	r11, r1
     9ca:	08 f0       	brcs	.+2      	; 0x9ce <main+0x7f2>
     9cc:	95 c1       	rjmp	.+810    	; 0xcf8 <main+0xb1c>
					if(pwm_green!=255 && pwm_blue!=255) {	// do not turn on all leds
     9ce:	80 91 0d 02 	lds	r24, 0x020D
     9d2:	8f 3f       	cpi	r24, 0xFF	; 255
     9d4:	09 f4       	brne	.+2      	; 0x9d8 <main+0x7fc>
     9d6:	01 ce       	rjmp	.-1022   	; 0x5da <main+0x3fe>
     9d8:	80 91 0e 02 	lds	r24, 0x020E
     9dc:	8f 3f       	cpi	r24, 0xFF	; 255
     9de:	09 f4       	brne	.+2      	; 0x9e2 <main+0x806>
     9e0:	fc cd       	rjmp	.-1032   	; 0x5da <main+0x3fe>
						pwm_red = 255;
     9e2:	10 93 0c 02 	sts	0x020C, r17
     9e6:	f9 cd       	rjmp	.-1038   	; 0x5da <main+0x3fe>

				}

			} else if(currentSelector==7) {

				srand(TCNT3);
     9e8:	80 91 94 00 	lds	r24, 0x0094
     9ec:	90 91 95 00 	lds	r25, 0x0095
     9f0:	0e 94 10 43 	call	0x8620	; 0x8620 <srand>
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption
     9f4:	0e 94 0b 43 	call	0x8616	; 0x8616 <rand>
     9f8:	6e e1       	ldi	r22, 0x1E	; 30
     9fa:	70 e0       	ldi	r23, 0x00	; 0
     9fc:	0e 94 6d 42 	call	0x84da	; 0x84da <__divmodhi4>
     a00:	4c 01       	movw	r8, r24
     a02:	8a 0c       	add	r8, r10
     a04:	9b 1c       	adc	r9, r11
     a06:	ff e7       	ldi	r31, 0x7F	; 127
     a08:	8f 22       	and	r8, r31
     a0a:	99 24       	eor	r9, r9

				pwm_red = 255 - currRand;
     a0c:	88 2d       	mov	r24, r8
     a0e:	80 95       	com	r24
     a10:	80 93 0c 02 	sts	0x020C, r24
				
				srand(TCNT3);
     a14:	80 91 94 00 	lds	r24, 0x0094
     a18:	90 91 95 00 	lds	r25, 0x0095
     a1c:	0e 94 10 43 	call	0x8620	; 0x8620 <srand>
				currRand = (currRand + rand()%30) % 128;	
     a20:	0e 94 0b 43 	call	0x8616	; 0x8616 <rand>
     a24:	6e e1       	ldi	r22, 0x1E	; 30
     a26:	70 e0       	ldi	r23, 0x00	; 0
     a28:	0e 94 6d 42 	call	0x84da	; 0x84da <__divmodhi4>
     a2c:	6c 01       	movw	r12, r24
     a2e:	c8 0c       	add	r12, r8
     a30:	d9 1c       	adc	r13, r9
     a32:	2f e7       	ldi	r18, 0x7F	; 127
     a34:	c2 22       	and	r12, r18
     a36:	dd 24       	eor	r13, r13
				pwm_green = 255 - currRand;
     a38:	8c 2d       	mov	r24, r12
     a3a:	80 95       	com	r24
     a3c:	80 93 0d 02 	sts	0x020D, r24

				srand(TCNT3);
     a40:	80 91 94 00 	lds	r24, 0x0094
     a44:	90 91 95 00 	lds	r25, 0x0095
     a48:	0e 94 10 43 	call	0x8620	; 0x8620 <srand>
				currRand = (currRand + rand()%30) % 128;
     a4c:	0e 94 0b 43 	call	0x8616	; 0x8616 <rand>
     a50:	6e e1       	ldi	r22, 0x1E	; 30
     a52:	70 e0       	ldi	r23, 0x00	; 0
     a54:	0e 94 6d 42 	call	0x84da	; 0x84da <__divmodhi4>
     a58:	5c 01       	movw	r10, r24
     a5a:	ac 0c       	add	r10, r12
     a5c:	bd 1c       	adc	r11, r13
     a5e:	3f e7       	ldi	r19, 0x7F	; 127
     a60:	a3 22       	and	r10, r19
     a62:	bb 24       	eor	r11, r11
				pwm_blue = 255 - currRand;
     a64:	8a 2d       	mov	r24, r10
     a66:	80 95       	com	r24
     a68:	80 93 0e 02 	sts	0x020E, r24

			
				srand(TCNT3);
     a6c:	80 91 94 00 	lds	r24, 0x0094
     a70:	90 91 95 00 	lds	r25, 0x0095
     a74:	0e 94 10 43 	call	0x8620	; 0x8620 <srand>
				currRand2 = rand()%128;
     a78:	0e 94 0b 43 	call	0x8616	; 0x8616 <rand>
     a7c:	60 e8       	ldi	r22, 0x80	; 128
     a7e:	70 e0       	ldi	r23, 0x00	; 0
     a80:	0e 94 6d 42 	call	0x84da	; 0x84da <__divmodhi4>
				if(currRand2<32) {
     a84:	80 32       	cpi	r24, 0x20	; 32
     a86:	91 05       	cpc	r25, r1
     a88:	08 f0       	brcs	.+2      	; 0xa8c <main+0x8b0>
     a8a:	48 c1       	rjmp	.+656    	; 0xd1c <main+0xb40>
					pwm_red = 255;
     a8c:	10 93 0c 02 	sts	0x020C, r17
					pwm_blue = 255;
				} else {	// do nothing => all 3 leds turned on

				}

				turnOffLedsTime = getTime100MicroSec();
     a90:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <getTime100MicroSec>
     a94:	69 83       	std	Y+1, r22	; 0x01
     a96:	7a 83       	std	Y+2, r23	; 0x02
     a98:	8b 83       	std	Y+3, r24	; 0x03
     a9a:	9c 83       	std	Y+4, r25	; 0x04
     a9c:	9e cd       	rjmp	.-1220   	; 0x5da <main+0x3fe>
					}
	
					if(pwm_left_desired == 0) {
						pwm_intermediate_left_desired = 0;
					} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
						pwm_intermediate_left_desired = 0;
     a9e:	10 92 fe 02 	sts	0x02FE, r1
     aa2:	10 92 fd 02 	sts	0x02FD, r1
     aa6:	fd cb       	rjmp	.-2054   	; 0x2a2 <main+0xc6>

				if(softAccEnabled) {
					if(pwm_right_desired == 0) {
						pwm_intermediate_right_desired = 0;
					} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
						pwm_intermediate_right_desired = 0;
     aa8:	10 92 fc 02 	sts	0x02FC, r1
     aac:	10 92 fb 02 	sts	0x02FB, r1
     ab0:	31 cd       	rjmp	.-1438   	; 0x514 <main+0x338>
							break;
					}
					break;

			case 10:// obstacle avoidance with random colors; 4 seconds motion and 10 seconds pause					
					switch(demoState) {
     ab2:	82 30       	cpi	r24, 0x02	; 2
     ab4:	09 f0       	breq	.+2      	; 0xab8 <main+0x8dc>
     ab6:	67 ce       	rjmp	.-818    	; 0x786 <main+0x5aa>
								demoState = 2;							
							}
							break;

						case 2: // pause							
							if((getTime100MicroSec()-demoStartTime) >= (PAUSE_10_SEC)) {
     ab8:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <getTime100MicroSec>
     abc:	9b 01       	movw	r18, r22
     abe:	ac 01       	movw	r20, r24
     ac0:	80 91 50 04 	lds	r24, 0x0450
     ac4:	90 91 51 04 	lds	r25, 0x0451
     ac8:	a0 91 52 04 	lds	r26, 0x0452
     acc:	b0 91 53 04 	lds	r27, 0x0453
     ad0:	28 1b       	sub	r18, r24
     ad2:	39 0b       	sbc	r19, r25
     ad4:	4a 0b       	sbc	r20, r26
     ad6:	5b 0b       	sbc	r21, r27
     ad8:	2a 39       	cpi	r18, 0x9A	; 154
     ada:	97 e7       	ldi	r25, 0x77	; 119
     adc:	39 07       	cpc	r19, r25
     ade:	91 e0       	ldi	r25, 0x01	; 1
     ae0:	49 07       	cpc	r20, r25
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	59 07       	cpc	r21, r25
     ae6:	08 f4       	brcc	.+2      	; 0xaea <main+0x90e>
     ae8:	4e ce       	rjmp	.-868    	; 0x786 <main+0x5aa>
								setRightSpeed(20);
     aea:	84 e1       	ldi	r24, 0x14	; 20
     aec:	0e 94 12 23 	call	0x4624	; 0x4624 <setRightSpeed>
								setLeftSpeed(20);								
     af0:	84 e1       	ldi	r24, 0x14	; 20
     af2:	0e 94 f5 22 	call	0x45ea	; 0x45ea <setLeftSpeed>
								demoStartTime = getTime100MicroSec();								
     af6:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <getTime100MicroSec>
     afa:	60 93 50 04 	sts	0x0450, r22
     afe:	70 93 51 04 	sts	0x0451, r23
     b02:	80 93 52 04 	sts	0x0452, r24
     b06:	90 93 53 04 	sts	0x0453, r25
								demoState = 1;							
     b0a:	20 92 4c 04 	sts	0x044C, r2
							}
							break;
					}	
					
					switch(rgbLedState) {
     b0e:	80 91 67 04 	lds	r24, 0x0467
     b12:	81 30       	cpi	r24, 0x01	; 1
     b14:	09 f0       	breq	.+2      	; 0xb18 <main+0x93c>
     b16:	3c ce       	rjmp	.-904    	; 0x790 <main+0x5b4>
							updateGreenLed(pwm_green);
							updateBlueLed(pwm_blue);
							break;

						case 1:		
							turnOffGreenLeds();					
     b18:	0e 94 04 38 	call	0x7008	; 0x7008 <turnOffGreenLeds>
							currRand = rand()% 128;	// 0 to 255 is the maximum, we use 0 to 127 to get brighter colors
     b1c:	0e 94 0b 43 	call	0x8616	; 0x8616 <rand>
     b20:	60 e8       	ldi	r22, 0x80	; 128
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	0e 94 6d 42 	call	0x84da	; 0x84da <__divmodhi4>
							if(currRand > 95) {
     b28:	80 36       	cpi	r24, 0x60	; 96
     b2a:	91 05       	cpc	r25, r1
     b2c:	08 f4       	brcc	.+2      	; 0xb30 <main+0x954>
     b2e:	43 c5       	rjmp	.+2694   	; 0x15b6 <main+0x13da>
								pwm_red = 255;
     b30:	10 93 0c 02 	sts	0x020C, r17
							} else {
								pwm_red = currRand;
							}

							currRand = rand()% 128;
     b34:	0e 94 0b 43 	call	0x8616	; 0x8616 <rand>
     b38:	60 e8       	ldi	r22, 0x80	; 128
     b3a:	70 e0       	ldi	r23, 0x00	; 0
     b3c:	0e 94 6d 42 	call	0x84da	; 0x84da <__divmodhi4>
							if(currRand > 95) {
     b40:	80 36       	cpi	r24, 0x60	; 96
     b42:	91 05       	cpc	r25, r1
     b44:	08 f4       	brcc	.+2      	; 0xb48 <main+0x96c>
     b46:	34 c5       	rjmp	.+2664   	; 0x15b0 <main+0x13d4>
								pwm_green = 255;
     b48:	10 93 0d 02 	sts	0x020D, r17
							} else {
								pwm_green = currRand;
							}

							currRand = rand()% 128;
     b4c:	0e 94 0b 43 	call	0x8616	; 0x8616 <rand>
     b50:	60 e8       	ldi	r22, 0x80	; 128
     b52:	70 e0       	ldi	r23, 0x00	; 0
     b54:	0e 94 6d 42 	call	0x84da	; 0x84da <__divmodhi4>
							if(currRand > 95) {
     b58:	80 36       	cpi	r24, 0x60	; 96
     b5a:	91 05       	cpc	r25, r1
     b5c:	08 f4       	brcc	.+2      	; 0xb60 <main+0x984>
     b5e:	25 c5       	rjmp	.+2634   	; 0x15aa <main+0x13ce>
								pwm_blue = 255;
     b60:	10 93 0e 02 	sts	0x020E, r17
							} else {
								pwm_blue = currRand;
							}

							currRand = rand()% 200;
     b64:	0e 94 0b 43 	call	0x8616	; 0x8616 <rand>
     b68:	68 ec       	ldi	r22, 0xC8	; 200
     b6a:	70 e0       	ldi	r23, 0x00	; 0
     b6c:	0e 94 6d 42 	call	0x84da	; 0x84da <__divmodhi4>
     b70:	5c 01       	movw	r10, r24
							if(currRand<50) {
     b72:	82 33       	cpi	r24, 0x32	; 50
     b74:	91 05       	cpc	r25, r1
     b76:	08 f0       	brcs	.+2      	; 0xb7a <main+0x99e>
     b78:	0f c5       	rjmp	.+2590   	; 0x1598 <main+0x13bc>
								pwm_red = 255;
     b7a:	10 93 0c 02 	sts	0x020C, r17
     b7e:	8f ef       	ldi	r24, 0xFF	; 255
							} else if(currRand<100) {
								pwm_green = 255;
							} else if (currRand<150) {	
								pwm_blue = 255;
							}
							updateRedLed(pwm_red);
     b80:	0e 94 2b 37 	call	0x6e56	; 0x6e56 <updateRedLed>
							updateGreenLed(pwm_green);
     b84:	80 91 0d 02 	lds	r24, 0x020D
     b88:	0e 94 3f 37 	call	0x6e7e	; 0x6e7e <updateGreenLed>
							updateBlueLed(pwm_blue);
     b8c:	80 91 0e 02 	lds	r24, 0x020E
     b90:	0e 94 53 37 	call	0x6ea6	; 0x6ea6 <updateBlueLed>
							rgbLedState = 2;
     b94:	52 e0       	ldi	r21, 0x02	; 2
     b96:	50 93 67 04 	sts	0x0467, r21
     b9a:	90 91 48 04 	lds	r25, 0x0448
							break;
     b9e:	f2 cb       	rjmp	.-2076   	; 0x384 <main+0x1a8>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
     ba0:	84 30       	cpi	r24, 0x04	; 4
     ba2:	09 f4       	brne	.+2      	; 0xba6 <main+0x9ca>
     ba4:	01 c4       	rjmp	.+2050   	; 0x13a8 <main+0x11cc>
     ba6:	84 30       	cpi	r24, 0x04	; 4
     ba8:	08 f4       	brcc	.+2      	; 0xbac <main+0x9d0>
     baa:	b9 c3       	rjmp	.+1906   	; 0x131e <main+0x1142>
     bac:	85 30       	cpi	r24, 0x05	; 5
     bae:	09 f0       	breq	.+2      	; 0xbb2 <main+0x9d6>
     bb0:	9f cd       	rjmp	.-1218   	; 0x6f0 <main+0x514>
							//pwm_green = 0;
							//pwm_blue = 255;													
							break;

						case 5:	// turn around
							turnOffGreenLeds();
     bb2:	0e 94 04 38 	call	0x7008	; 0x7008 <turnOffGreenLeds>
							GREEN_LED6_ON;
     bb6:	80 91 0b 01 	lds	r24, 0x010B
     bba:	8f 7b       	andi	r24, 0xBF	; 191
     bbc:	80 93 0b 01 	sts	0x010B, r24
							GREEN_LED7_ON;
     bc0:	80 91 0b 01 	lds	r24, 0x010B
     bc4:	8f 77       	andi	r24, 0x7F	; 127
     bc6:	80 93 0b 01 	sts	0x010B, r24
							demoEndTime = getTime100MicroSec();
     bca:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <getTime100MicroSec>
     bce:	9b 01       	movw	r18, r22
     bd0:	ac 01       	movw	r20, r24
     bd2:	60 93 58 04 	sts	0x0458, r22
     bd6:	70 93 59 04 	sts	0x0459, r23
     bda:	80 93 5a 04 	sts	0x045A, r24
     bde:	90 93 5b 04 	sts	0x045B, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_750_MSEC)) {
     be2:	80 91 50 04 	lds	r24, 0x0450
     be6:	90 91 51 04 	lds	r25, 0x0451
     bea:	a0 91 52 04 	lds	r26, 0x0452
     bee:	b0 91 53 04 	lds	r27, 0x0453
     bf2:	28 1b       	sub	r18, r24
     bf4:	39 0b       	sbc	r19, r25
     bf6:	4a 0b       	sbc	r20, r26
     bf8:	5b 0b       	sbc	r21, r27
     bfa:	2b 32       	cpi	r18, 0x2B	; 43
     bfc:	9c e1       	ldi	r25, 0x1C	; 28
     bfe:	39 07       	cpc	r19, r25
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	49 07       	cpc	r20, r25
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	59 07       	cpc	r21, r25
     c08:	08 f4       	brcc	.+2      	; 0xc0c <main+0xa30>
     c0a:	72 cd       	rjmp	.-1308   	; 0x6f0 <main+0x514>
								demoStartTime = getTime100MicroSec();
     c0c:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <getTime100MicroSec>
     c10:	60 93 50 04 	sts	0x0450, r22
     c14:	70 93 51 04 	sts	0x0451, r23
     c18:	80 93 52 04 	sts	0x0452, r24
     c1c:	90 93 53 04 	sts	0x0453, r25
								demoState = 0;							
     c20:	10 92 4c 04 	sts	0x044C, r1
     c24:	65 cd       	rjmp	.-1334   	; 0x6f0 <main+0x514>
								demoState = 1;							
							}
							break;
					}	
					
					switch(rgbLedState) {
     c26:	82 30       	cpi	r24, 0x02	; 2
     c28:	09 f0       	breq	.+2      	; 0xc2c <main+0xa50>
     c2a:	71 ce       	rjmp	.-798    	; 0x90e <main+0x732>
							updateBlueLed(pwm_blue);
							rgbLedState = 2;
							break;

						case 2:
							if((getTime100MicroSec()-demoStartTime2) >= (PAUSE_500_MSEC)) {
     c2c:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <getTime100MicroSec>
     c30:	9b 01       	movw	r18, r22
     c32:	ac 01       	movw	r20, r24
     c34:	80 91 54 04 	lds	r24, 0x0454
     c38:	90 91 55 04 	lds	r25, 0x0455
     c3c:	a0 91 56 04 	lds	r26, 0x0456
     c40:	b0 91 57 04 	lds	r27, 0x0457
     c44:	28 1b       	sub	r18, r24
     c46:	39 0b       	sbc	r19, r25
     c48:	4a 0b       	sbc	r20, r26
     c4a:	5b 0b       	sbc	r21, r27
     c4c:	27 3c       	cpi	r18, 0xC7	; 199
     c4e:	62 e1       	ldi	r22, 0x12	; 18
     c50:	36 07       	cpc	r19, r22
     c52:	60 e0       	ldi	r22, 0x00	; 0
     c54:	46 07       	cpc	r20, r22
     c56:	60 e0       	ldi	r22, 0x00	; 0
     c58:	56 07       	cpc	r21, r22
     c5a:	08 f4       	brcc	.+2      	; 0xc5e <main+0xa82>
     c5c:	58 ce       	rjmp	.-848    	; 0x90e <main+0x732>
								rgbLedState = 0;
     c5e:	10 92 67 04 	sts	0x0467, r1
								demoStartTime2 = getTime100MicroSec();
     c62:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <getTime100MicroSec>
     c66:	60 93 54 04 	sts	0x0454, r22
     c6a:	70 93 55 04 	sts	0x0455, r23
     c6e:	80 93 56 04 	sts	0x0456, r24
     c72:	90 93 57 04 	sts	0x0457, r25
								demoEndTime = getTime100MicroSec();
     c76:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <getTime100MicroSec>
     c7a:	60 93 58 04 	sts	0x0458, r22
     c7e:	70 93 59 04 	sts	0x0459, r23
     c82:	80 93 5a 04 	sts	0x045A, r24
     c86:	90 93 5b 04 	sts	0x045B, r25
								greenLedState = 0;
     c8a:	10 92 66 04 	sts	0x0466, r1
								setGreenLed(greenLedState, 1);
     c8e:	80 e0       	ldi	r24, 0x00	; 0
     c90:	61 e0       	ldi	r22, 0x01	; 1
     c92:	0e 94 67 37 	call	0x6ece	; 0x6ece <setGreenLed>
     c96:	90 91 48 04 	lds	r25, 0x0448
     c9a:	74 cb       	rjmp	.-2328   	; 0x384 <main+0x1a8>
					break;

			case 9:	// write default calibration values; wait 2 seconds before start writing the calibration values
					// in eeprom in order to avoid rewriting the data involuntarily when moving the selector and passing 
					// through selector position 9
					switch(demoState) {
     c9c:	82 30       	cpi	r24, 0x02	; 2
     c9e:	09 f0       	breq	.+2      	; 0xca2 <main+0xac6>
     ca0:	08 cb       	rjmp	.-2544   	; 0x2b2 <main+0xd6>
								demoState = 2;
							}
							break;						

						case 2:
							if(!calibrationWritten) {
     ca2:	80 91 65 04 	lds	r24, 0x0465
     ca6:	88 23       	and	r24, r24
     ca8:	09 f0       	breq	.+2      	; 0xcac <main+0xad0>
     caa:	03 cb       	rjmp	.-2554   	; 0x2b2 <main+0xd6>
								calibrationWritten = 1;
     cac:	20 92 65 04 	sts	0x0465, r2
								writeDefaultCalibration();
     cb0:	0e 94 52 31 	call	0x62a4	; 0x62a4 <writeDefaultCalibration>
     cb4:	90 91 48 04 	lds	r25, 0x0448
     cb8:	65 cb       	rjmp	.-2358   	; 0x384 <main+0x1a8>
					setLeftSpeed(25);
					setRightSpeed(25);
					break;

			case 6:	// robot testing
					switch(menuChoice) {
     cba:	92 30       	cpi	r25, 0x02	; 2
     cbc:	11 f0       	breq	.+4      	; 0xcc2 <main+0xae6>
							}

							break;

						case 2:	// address writing in eeprom
							if(addressReceived) {
     cbe:	98 2f       	mov	r25, r24
     cc0:	61 cb       	rjmp	.-2366   	; 0x384 <main+0x1a8>
     cc2:	90 91 20 04 	lds	r25, 0x0420
     cc6:	99 23       	and	r25, r25
     cc8:	d1 f3       	breq	.-12     	; 0xcbe <main+0xae2>
								turnOnGreenLeds();
     cca:	0e 94 1d 38 	call	0x703a	; 0x703a <turnOnGreenLeds>
								eeprom_write_word((uint16_t*)4094, rfAddress);
     cce:	60 91 13 03 	lds	r22, 0x0313
     cd2:	70 91 14 03 	lds	r23, 0x0314
     cd6:	8e ef       	ldi	r24, 0xFE	; 254
     cd8:	9f e0       	ldi	r25, 0x0F	; 15
     cda:	0e 94 6f 43 	call	0x86de	; 0x86de <__eewr_word_m2560>
								turnOffGreenLeds();
     cde:	0e 94 04 38 	call	0x7008	; 0x7008 <turnOffGreenLeds>
								usart0Transmit(0xAA, 1);	// successfully written
     ce2:	8a ea       	ldi	r24, 0xAA	; 170
     ce4:	61 e0       	ldi	r22, 0x01	; 1
     ce6:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
								addressReceived = 0;
     cea:	10 92 20 04 	sts	0x0420, r1
								menuChoice = 0;
     cee:	10 92 1f 04 	sts	0x041F, r1
     cf2:	90 91 48 04 	lds	r25, 0x0448
     cf6:	46 cb       	rjmp	.-2420   	; 0x384 <main+0x1a8>
				
				if(currRand<32) {
					if(pwm_green!=255 && pwm_blue!=255) {	// do not turn on all leds
						pwm_red = 255;
					}
				} else if(currRand<64) {
     cf8:	90 e4       	ldi	r25, 0x40	; 64
     cfa:	a9 16       	cp	r10, r25
     cfc:	b1 04       	cpc	r11, r1
     cfe:	08 f0       	brcs	.+2      	; 0xd02 <main+0xb26>
     d00:	18 c4       	rjmp	.+2096   	; 0x1532 <main+0x1356>
					if(pwm_red!=255 && pwm_blue!=255) {
     d02:	80 91 0c 02 	lds	r24, 0x020C
     d06:	8f 3f       	cpi	r24, 0xFF	; 255
     d08:	09 f4       	brne	.+2      	; 0xd0c <main+0xb30>
     d0a:	67 cc       	rjmp	.-1842   	; 0x5da <main+0x3fe>
     d0c:	80 91 0e 02 	lds	r24, 0x020E
     d10:	8f 3f       	cpi	r24, 0xFF	; 255
     d12:	09 f4       	brne	.+2      	; 0xd16 <main+0xb3a>
     d14:	62 cc       	rjmp	.-1852   	; 0x5da <main+0x3fe>
						pwm_green = 255;
     d16:	10 93 0d 02 	sts	0x020D, r17
     d1a:	5f cc       	rjmp	.-1858   	; 0x5da <main+0x3fe>
			
				srand(TCNT3);
				currRand2 = rand()%128;
				if(currRand2<32) {
					pwm_red = 255;
				} else if(currRand2<64) {
     d1c:	80 34       	cpi	r24, 0x40	; 64
     d1e:	91 05       	cpc	r25, r1
     d20:	08 f0       	brcs	.+2      	; 0xd24 <main+0xb48>
     d22:	33 c4       	rjmp	.+2150   	; 0x158a <main+0x13ae>
					pwm_green = 255;
     d24:	10 93 0d 02 	sts	0x020D, r17
     d28:	b3 ce       	rjmp	.-666    	; 0xa90 <main+0x8b4>
							break;

						case 1:	// send sensors data and activate actuators
							//setRightSpeed(20);
							//setLeftSpeed(20);
							turnOnGreenLeds();
     d2a:	0e 94 1d 38 	call	0x703a	; 0x703a <turnOnGreenLeds>
							updateRedLed(pwm_red);
     d2e:	80 91 0c 02 	lds	r24, 0x020C
     d32:	0e 94 2b 37 	call	0x6e56	; 0x6e56 <updateRedLed>
							updateGreenLed(pwm_green);
     d36:	80 91 0d 02 	lds	r24, 0x020D
     d3a:	0e 94 3f 37 	call	0x6e7e	; 0x6e7e <updateGreenLed>
							updateBlueLed(pwm_blue);
     d3e:	80 91 0e 02 	lds	r24, 0x020E
     d42:	0e 94 53 37 	call	0x6ea6	; 0x6ea6 <updateBlueLed>
							LED_IR1_LOW;
     d46:	44 98       	cbi	0x08, 4	; 8
							LED_IR2_LOW;
     d48:	45 98       	cbi	0x08, 5	; 8
							
							if(getDataNow) {
     d4a:	80 91 22 04 	lds	r24, 0x0422
     d4e:	88 23       	and	r24, r24
     d50:	09 f4       	brne	.+2      	; 0xd54 <main+0xb78>
     d52:	dd cd       	rjmp	.-1094   	; 0x90e <main+0x732>
								getDataNow = 0;	
     d54:	10 92 22 04 	sts	0x0422, r1
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     d58:	80 91 57 02 	lds	r24, 0x0257
     d5c:	61 e0       	ldi	r22, 0x01	; 1
     d5e:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     d62:	80 91 58 02 	lds	r24, 0x0258
     d66:	61 e0       	ldi	r22, 0x01	; 1
     d68:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     d6c:	80 91 27 02 	lds	r24, 0x0227
     d70:	90 91 28 02 	lds	r25, 0x0228
     d74:	61 e0       	ldi	r22, 0x01	; 1
     d76:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     d7a:	80 91 27 02 	lds	r24, 0x0227
     d7e:	90 91 28 02 	lds	r25, 0x0228
     d82:	89 2f       	mov	r24, r25
     d84:	61 e0       	ldi	r22, 0x01	; 1
     d86:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     d8a:	80 91 59 02 	lds	r24, 0x0259
     d8e:	61 e0       	ldi	r22, 0x01	; 1
     d90:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     d94:	80 91 5a 02 	lds	r24, 0x025A
     d98:	61 e0       	ldi	r22, 0x01	; 1
     d9a:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     d9e:	80 91 2b 02 	lds	r24, 0x022B
     da2:	90 91 2c 02 	lds	r25, 0x022C
     da6:	61 e0       	ldi	r22, 0x01	; 1
     da8:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     dac:	80 91 2b 02 	lds	r24, 0x022B
     db0:	90 91 2c 02 	lds	r25, 0x022C
     db4:	89 2f       	mov	r24, r25
     db6:	61 e0       	ldi	r22, 0x01	; 1
     db8:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     dbc:	80 91 5b 02 	lds	r24, 0x025B
     dc0:	61 e0       	ldi	r22, 0x01	; 1
     dc2:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     dc6:	80 91 5c 02 	lds	r24, 0x025C
     dca:	61 e0       	ldi	r22, 0x01	; 1
     dcc:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     dd0:	80 91 2f 02 	lds	r24, 0x022F
     dd4:	90 91 30 02 	lds	r25, 0x0230
     dd8:	61 e0       	ldi	r22, 0x01	; 1
     dda:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     dde:	80 91 2f 02 	lds	r24, 0x022F
     de2:	90 91 30 02 	lds	r25, 0x0230
     de6:	89 2f       	mov	r24, r25
     de8:	61 e0       	ldi	r22, 0x01	; 1
     dea:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     dee:	80 91 5d 02 	lds	r24, 0x025D
     df2:	61 e0       	ldi	r22, 0x01	; 1
     df4:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     df8:	80 91 5e 02 	lds	r24, 0x025E
     dfc:	61 e0       	ldi	r22, 0x01	; 1
     dfe:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     e02:	80 91 33 02 	lds	r24, 0x0233
     e06:	90 91 34 02 	lds	r25, 0x0234
     e0a:	61 e0       	ldi	r22, 0x01	; 1
     e0c:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     e10:	80 91 33 02 	lds	r24, 0x0233
     e14:	90 91 34 02 	lds	r25, 0x0234
     e18:	89 2f       	mov	r24, r25
     e1a:	61 e0       	ldi	r22, 0x01	; 1
     e1c:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     e20:	80 91 5f 02 	lds	r24, 0x025F
     e24:	61 e0       	ldi	r22, 0x01	; 1
     e26:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     e2a:	80 91 60 02 	lds	r24, 0x0260
     e2e:	61 e0       	ldi	r22, 0x01	; 1
     e30:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     e34:	80 91 37 02 	lds	r24, 0x0237
     e38:	90 91 38 02 	lds	r25, 0x0238
     e3c:	61 e0       	ldi	r22, 0x01	; 1
     e3e:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     e42:	80 91 37 02 	lds	r24, 0x0237
     e46:	90 91 38 02 	lds	r25, 0x0238
     e4a:	89 2f       	mov	r24, r25
     e4c:	61 e0       	ldi	r22, 0x01	; 1
     e4e:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     e52:	80 91 61 02 	lds	r24, 0x0261
     e56:	61 e0       	ldi	r22, 0x01	; 1
     e58:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     e5c:	80 91 62 02 	lds	r24, 0x0262
     e60:	61 e0       	ldi	r22, 0x01	; 1
     e62:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     e66:	80 91 3b 02 	lds	r24, 0x023B
     e6a:	90 91 3c 02 	lds	r25, 0x023C
     e6e:	61 e0       	ldi	r22, 0x01	; 1
     e70:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     e74:	80 91 3b 02 	lds	r24, 0x023B
     e78:	90 91 3c 02 	lds	r25, 0x023C
     e7c:	89 2f       	mov	r24, r25
     e7e:	61 e0       	ldi	r22, 0x01	; 1
     e80:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     e84:	80 91 63 02 	lds	r24, 0x0263
     e88:	61 e0       	ldi	r22, 0x01	; 1
     e8a:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     e8e:	80 91 64 02 	lds	r24, 0x0264
     e92:	61 e0       	ldi	r22, 0x01	; 1
     e94:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     e98:	80 91 3f 02 	lds	r24, 0x023F
     e9c:	90 91 40 02 	lds	r25, 0x0240
     ea0:	61 e0       	ldi	r22, 0x01	; 1
     ea2:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     ea6:	80 91 3f 02 	lds	r24, 0x023F
     eaa:	90 91 40 02 	lds	r25, 0x0240
     eae:	89 2f       	mov	r24, r25
     eb0:	61 e0       	ldi	r22, 0x01	; 1
     eb2:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     eb6:	80 91 65 02 	lds	r24, 0x0265
     eba:	61 e0       	ldi	r22, 0x01	; 1
     ebc:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     ec0:	80 91 66 02 	lds	r24, 0x0266
     ec4:	61 e0       	ldi	r22, 0x01	; 1
     ec6:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     eca:	80 91 43 02 	lds	r24, 0x0243
     ece:	90 91 44 02 	lds	r25, 0x0244
     ed2:	61 e0       	ldi	r22, 0x01	; 1
     ed4:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     ed8:	80 91 43 02 	lds	r24, 0x0243
     edc:	90 91 44 02 	lds	r25, 0x0244
     ee0:	89 2f       	mov	r24, r25
     ee2:	61 e0       	ldi	r22, 0x01	; 1
     ee4:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     ee8:	80 91 67 02 	lds	r24, 0x0267
     eec:	61 e0       	ldi	r22, 0x01	; 1
     eee:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     ef2:	80 91 68 02 	lds	r24, 0x0268
     ef6:	61 e0       	ldi	r22, 0x01	; 1
     ef8:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     efc:	80 91 47 02 	lds	r24, 0x0247
     f00:	90 91 48 02 	lds	r25, 0x0248
     f04:	61 e0       	ldi	r22, 0x01	; 1
     f06:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     f0a:	80 91 47 02 	lds	r24, 0x0247
     f0e:	90 91 48 02 	lds	r25, 0x0248
     f12:	89 2f       	mov	r24, r25
     f14:	61 e0       	ldi	r22, 0x01	; 1
     f16:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     f1a:	80 91 69 02 	lds	r24, 0x0269
     f1e:	61 e0       	ldi	r22, 0x01	; 1
     f20:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     f24:	80 91 6a 02 	lds	r24, 0x026A
     f28:	61 e0       	ldi	r22, 0x01	; 1
     f2a:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     f2e:	80 91 4b 02 	lds	r24, 0x024B
     f32:	90 91 4c 02 	lds	r25, 0x024C
     f36:	61 e0       	ldi	r22, 0x01	; 1
     f38:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     f3c:	80 91 4b 02 	lds	r24, 0x024B
     f40:	90 91 4c 02 	lds	r25, 0x024C
     f44:	89 2f       	mov	r24, r25
     f46:	61 e0       	ldi	r22, 0x01	; 1
     f48:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     f4c:	80 91 6b 02 	lds	r24, 0x026B
     f50:	61 e0       	ldi	r22, 0x01	; 1
     f52:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     f56:	80 91 6c 02 	lds	r24, 0x026C
     f5a:	61 e0       	ldi	r22, 0x01	; 1
     f5c:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     f60:	80 91 4f 02 	lds	r24, 0x024F
     f64:	90 91 50 02 	lds	r25, 0x0250
     f68:	61 e0       	ldi	r22, 0x01	; 1
     f6a:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     f6e:	80 91 4f 02 	lds	r24, 0x024F
     f72:	90 91 50 02 	lds	r25, 0x0250
     f76:	89 2f       	mov	r24, r25
     f78:	61 e0       	ldi	r22, 0x01	; 1
     f7a:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     f7e:	80 91 6d 02 	lds	r24, 0x026D
     f82:	61 e0       	ldi	r22, 0x01	; 1
     f84:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     f88:	80 91 6e 02 	lds	r24, 0x026E
     f8c:	61 e0       	ldi	r22, 0x01	; 1
     f8e:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     f92:	80 91 53 02 	lds	r24, 0x0253
     f96:	90 91 54 02 	lds	r25, 0x0254
     f9a:	61 e0       	ldi	r22, 0x01	; 1
     f9c:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     fa0:	80 91 53 02 	lds	r24, 0x0253
     fa4:	90 91 54 02 	lds	r25, 0x0254
     fa8:	89 2f       	mov	r24, r25
     faa:	61 e0       	ldi	r22, 0x01	; 1
     fac:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
								}
								usart0Transmit(accX&0xFF,1);
     fb0:	80 91 28 04 	lds	r24, 0x0428
     fb4:	61 e0       	ldi	r22, 0x01	; 1
     fb6:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
								usart0Transmit(accX>>8,1);
     fba:	80 91 29 04 	lds	r24, 0x0429
     fbe:	61 e0       	ldi	r22, 0x01	; 1
     fc0:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
								usart0Transmit(accY&0xFF,1);
     fc4:	80 91 2a 04 	lds	r24, 0x042A
     fc8:	61 e0       	ldi	r22, 0x01	; 1
     fca:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
								usart0Transmit(accY>>8,1);
     fce:	80 91 2b 04 	lds	r24, 0x042B
     fd2:	61 e0       	ldi	r22, 0x01	; 1
     fd4:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
								usart0Transmit(accZ&0xFF,1);
     fd8:	80 91 2c 04 	lds	r24, 0x042C
     fdc:	61 e0       	ldi	r22, 0x01	; 1
     fde:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
								usart0Transmit(accZ>>8,1);
     fe2:	80 91 2d 04 	lds	r24, 0x042D
     fe6:	61 e0       	ldi	r22, 0x01	; 1
     fe8:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
								usart0Transmit(irCommand,1);
     fec:	80 91 23 04 	lds	r24, 0x0423
     ff0:	61 e0       	ldi	r22, 0x01	; 1
     ff2:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
								usart0Transmit(currentSelector,1);
     ff6:	80 91 48 04 	lds	r24, 0x0448
     ffa:	61 e0       	ldi	r22, 0x01	; 1
     ffc:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
								usart0Transmit(BUTTON0,1);
    1000:	80 91 03 01 	lds	r24, 0x0103
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	80 72       	andi	r24, 0x20	; 32
    1008:	90 70       	andi	r25, 0x00	; 0
    100a:	95 95       	asr	r25
    100c:	87 95       	ror	r24
    100e:	95 95       	asr	r25
    1010:	87 95       	ror	r24
    1012:	95 95       	asr	r25
    1014:	87 95       	ror	r24
    1016:	95 95       	asr	r25
    1018:	87 95       	ror	r24
    101a:	95 95       	asr	r25
    101c:	87 95       	ror	r24
    101e:	61 e0       	ldi	r22, 0x01	; 1
    1020:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
								usart0Transmit(rfFlags,1);
    1024:	80 91 15 03 	lds	r24, 0x0315
    1028:	61 e0       	ldi	r22, 0x01	; 1
    102a:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
								usart0Transmit(((unsigned int)(theta*573.0))&0xFF,1);	// radians to degrees => 573 = 1800/PI
    102e:	60 91 6b 04 	lds	r22, 0x046B
    1032:	70 91 6c 04 	lds	r23, 0x046C
    1036:	80 91 6d 04 	lds	r24, 0x046D
    103a:	90 91 6e 04 	lds	r25, 0x046E
    103e:	20 e0       	ldi	r18, 0x00	; 0
    1040:	30 e4       	ldi	r19, 0x40	; 64
    1042:	4f e0       	ldi	r20, 0x0F	; 15
    1044:	54 e4       	ldi	r21, 0x44	; 68
    1046:	0e 94 af 41 	call	0x835e	; 0x835e <__mulsf3>
    104a:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <__fixunssfsi>
    104e:	86 2f       	mov	r24, r22
    1050:	61 e0       	ldi	r22, 0x01	; 1
    1052:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
								usart0Transmit(((unsigned int)(theta*573.0))>>8,1);
    1056:	60 91 6b 04 	lds	r22, 0x046B
    105a:	70 91 6c 04 	lds	r23, 0x046C
    105e:	80 91 6d 04 	lds	r24, 0x046D
    1062:	90 91 6e 04 	lds	r25, 0x046E
    1066:	20 e0       	ldi	r18, 0x00	; 0
    1068:	30 e4       	ldi	r19, 0x40	; 64
    106a:	4f e0       	ldi	r20, 0x0F	; 15
    106c:	54 e4       	ldi	r21, 0x44	; 68
    106e:	0e 94 af 41 	call	0x835e	; 0x835e <__mulsf3>
    1072:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <__fixunssfsi>
    1076:	87 2f       	mov	r24, r23
    1078:	61 e0       	ldi	r22, 0x01	; 1
    107a:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
								usart0Transmit(((unsigned int)xPos)&0xFF,1);
    107e:	60 91 73 04 	lds	r22, 0x0473
    1082:	70 91 74 04 	lds	r23, 0x0474
    1086:	80 91 75 04 	lds	r24, 0x0475
    108a:	90 91 76 04 	lds	r25, 0x0476
    108e:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <__fixunssfsi>
    1092:	86 2f       	mov	r24, r22
    1094:	61 e0       	ldi	r22, 0x01	; 1
    1096:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
								usart0Transmit(((unsigned int)xPos)>>8,1);
    109a:	60 91 73 04 	lds	r22, 0x0473
    109e:	70 91 74 04 	lds	r23, 0x0474
    10a2:	80 91 75 04 	lds	r24, 0x0475
    10a6:	90 91 76 04 	lds	r25, 0x0476
    10aa:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <__fixunssfsi>
    10ae:	87 2f       	mov	r24, r23
    10b0:	61 e0       	ldi	r22, 0x01	; 1
    10b2:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
								usart0Transmit(((unsigned int)yPos)&0xFF,1);
    10b6:	60 91 77 04 	lds	r22, 0x0477
    10ba:	70 91 78 04 	lds	r23, 0x0478
    10be:	80 91 79 04 	lds	r24, 0x0479
    10c2:	90 91 7a 04 	lds	r25, 0x047A
    10c6:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <__fixunssfsi>
    10ca:	86 2f       	mov	r24, r22
    10cc:	61 e0       	ldi	r22, 0x01	; 1
    10ce:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
								usart0Transmit(((unsigned int)yPos)>>8,1);
    10d2:	60 91 77 04 	lds	r22, 0x0477
    10d6:	70 91 78 04 	lds	r23, 0x0478
    10da:	80 91 79 04 	lds	r24, 0x0479
    10de:	90 91 7a 04 	lds	r25, 0x047A
    10e2:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <__fixunssfsi>
    10e6:	87 2f       	mov	r24, r23
    10e8:	61 e0       	ldi	r22, 0x01	; 1
    10ea:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)&0xFF,1);
    10ee:	60 91 d3 02 	lds	r22, 0x02D3
    10f2:	70 91 d4 02 	lds	r23, 0x02D4
    10f6:	80 91 d5 02 	lds	r24, 0x02D5
    10fa:	90 91 d6 02 	lds	r25, 0x02D6
    10fe:	0e 94 67 40 	call	0x80ce	; 0x80ce <__fixsfsi>
    1102:	86 2f       	mov	r24, r22
    1104:	61 e0       	ldi	r22, 0x01	; 1
    1106:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)>>8,1);
    110a:	60 91 d3 02 	lds	r22, 0x02D3
    110e:	70 91 d4 02 	lds	r23, 0x02D4
    1112:	80 91 d5 02 	lds	r24, 0x02D5
    1116:	90 91 d6 02 	lds	r25, 0x02D6
    111a:	0e 94 67 40 	call	0x80ce	; 0x80ce <__fixsfsi>
    111e:	87 2f       	mov	r24, r23
    1120:	61 e0       	ldi	r22, 0x01	; 1
    1122:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)>>16,1);
    1126:	60 91 d3 02 	lds	r22, 0x02D3
    112a:	70 91 d4 02 	lds	r23, 0x02D4
    112e:	80 91 d5 02 	lds	r24, 0x02D5
    1132:	90 91 d6 02 	lds	r25, 0x02D6
    1136:	0e 94 67 40 	call	0x80ce	; 0x80ce <__fixsfsi>
    113a:	61 e0       	ldi	r22, 0x01	; 1
    113c:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)>>24,1);
    1140:	60 91 d3 02 	lds	r22, 0x02D3
    1144:	70 91 d4 02 	lds	r23, 0x02D4
    1148:	80 91 d5 02 	lds	r24, 0x02D5
    114c:	90 91 d6 02 	lds	r25, 0x02D6
    1150:	0e 94 67 40 	call	0x80ce	; 0x80ce <__fixsfsi>
    1154:	89 2f       	mov	r24, r25
    1156:	61 e0       	ldi	r22, 0x01	; 1
    1158:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)&0xFF,1);
    115c:	60 91 cf 02 	lds	r22, 0x02CF
    1160:	70 91 d0 02 	lds	r23, 0x02D0
    1164:	80 91 d1 02 	lds	r24, 0x02D1
    1168:	90 91 d2 02 	lds	r25, 0x02D2
    116c:	0e 94 67 40 	call	0x80ce	; 0x80ce <__fixsfsi>
    1170:	86 2f       	mov	r24, r22
    1172:	61 e0       	ldi	r22, 0x01	; 1
    1174:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)>>8,1);
    1178:	60 91 cf 02 	lds	r22, 0x02CF
    117c:	70 91 d0 02 	lds	r23, 0x02D0
    1180:	80 91 d1 02 	lds	r24, 0x02D1
    1184:	90 91 d2 02 	lds	r25, 0x02D2
    1188:	0e 94 67 40 	call	0x80ce	; 0x80ce <__fixsfsi>
    118c:	87 2f       	mov	r24, r23
    118e:	61 e0       	ldi	r22, 0x01	; 1
    1190:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)>>16,1);
    1194:	60 91 cf 02 	lds	r22, 0x02CF
    1198:	70 91 d0 02 	lds	r23, 0x02D0
    119c:	80 91 d1 02 	lds	r24, 0x02D1
    11a0:	90 91 d2 02 	lds	r25, 0x02D2
    11a4:	0e 94 67 40 	call	0x80ce	; 0x80ce <__fixsfsi>
    11a8:	61 e0       	ldi	r22, 0x01	; 1
    11aa:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)>>24,1);
    11ae:	60 91 cf 02 	lds	r22, 0x02CF
    11b2:	70 91 d0 02 	lds	r23, 0x02D0
    11b6:	80 91 d1 02 	lds	r24, 0x02D1
    11ba:	90 91 d2 02 	lds	r25, 0x02D2
    11be:	0e 94 67 40 	call	0x80ce	; 0x80ce <__fixsfsi>
    11c2:	89 2f       	mov	r24, r25
    11c4:	61 e0       	ldi	r22, 0x01	; 1
    11c6:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
								usart0Transmit(pwm_left_desired>>2, 1);
    11ca:	80 91 f9 02 	lds	r24, 0x02F9
    11ce:	90 91 fa 02 	lds	r25, 0x02FA
    11d2:	95 95       	asr	r25
    11d4:	87 95       	ror	r24
    11d6:	95 95       	asr	r25
    11d8:	87 95       	ror	r24
    11da:	61 e0       	ldi	r22, 0x01	; 1
    11dc:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
								usart0Transmit(pwm_right_desired>>2, 1);
    11e0:	80 91 f7 02 	lds	r24, 0x02F7
    11e4:	90 91 f8 02 	lds	r25, 0x02F8
    11e8:	95 95       	asr	r25
    11ea:	87 95       	ror	r24
    11ec:	95 95       	asr	r25
    11ee:	87 95       	ror	r24
    11f0:	61 e0       	ldi	r22, 0x01	; 1
    11f2:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <usart0Transmit>
    11f6:	90 91 48 04 	lds	r25, 0x0448
    11fa:	c4 c8       	rjmp	.-3704   	; 0x384 <main+0x1a8>
							setLeftSpeed(20);
							setRightSpeed(20);
							demoState = 1;
							break;
						case 1: // motion					
							if((getTime100MicroSec()-demoStartTime) >= (PAUSE_4_SEC)) {
    11fc:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <getTime100MicroSec>
    1200:	9b 01       	movw	r18, r22
    1202:	ac 01       	movw	r20, r24
    1204:	80 91 50 04 	lds	r24, 0x0450
    1208:	90 91 51 04 	lds	r25, 0x0451
    120c:	a0 91 52 04 	lds	r26, 0x0452
    1210:	b0 91 53 04 	lds	r27, 0x0453
    1214:	28 1b       	sub	r18, r24
    1216:	39 0b       	sbc	r19, r25
    1218:	4a 0b       	sbc	r20, r26
    121a:	5b 0b       	sbc	r21, r27
    121c:	2e 33       	cpi	r18, 0x3E	; 62
    121e:	66 e9       	ldi	r22, 0x96	; 150
    1220:	36 07       	cpc	r19, r22
    1222:	60 e0       	ldi	r22, 0x00	; 0
    1224:	46 07       	cpc	r20, r22
    1226:	60 e0       	ldi	r22, 0x00	; 0
    1228:	56 07       	cpc	r21, r22
    122a:	08 f4       	brcc	.+2      	; 0x122e <main+0x1052>
    122c:	ac ca       	rjmp	.-2728   	; 0x786 <main+0x5aa>
								setRightSpeed(0);
    122e:	80 e0       	ldi	r24, 0x00	; 0
    1230:	0e 94 12 23 	call	0x4624	; 0x4624 <setRightSpeed>
								setLeftSpeed(0);								
    1234:	80 e0       	ldi	r24, 0x00	; 0
    1236:	0e 94 f5 22 	call	0x45ea	; 0x45ea <setLeftSpeed>
								demoStartTime = getTime100MicroSec();
    123a:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <getTime100MicroSec>
    123e:	60 93 50 04 	sts	0x0450, r22
    1242:	70 93 51 04 	sts	0x0451, r23
    1246:	80 93 52 04 	sts	0x0452, r24
    124a:	90 93 53 04 	sts	0x0453, r25
								demoState = 2;							
    124e:	82 e0       	ldi	r24, 0x02	; 2
    1250:	80 93 4c 04 	sts	0x044C, r24
    1254:	98 ca       	rjmp	.-2768   	; 0x786 <main+0x5aa>
							demoStartTime = getTime100MicroSec();
							demoState = 1;
							break;

						case 1:
							if((getTime100MicroSec()-demoStartTime) >= (PAUSE_2_SEC)) {
    1256:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <getTime100MicroSec>
    125a:	9b 01       	movw	r18, r22
    125c:	ac 01       	movw	r20, r24
    125e:	80 91 50 04 	lds	r24, 0x0450
    1262:	90 91 51 04 	lds	r25, 0x0451
    1266:	a0 91 52 04 	lds	r26, 0x0452
    126a:	b0 91 53 04 	lds	r27, 0x0453
    126e:	28 1b       	sub	r18, r24
    1270:	39 0b       	sbc	r19, r25
    1272:	4a 0b       	sbc	r20, r26
    1274:	5b 0b       	sbc	r21, r27
    1276:	2e 31       	cpi	r18, 0x1E	; 30
    1278:	eb e4       	ldi	r30, 0x4B	; 75
    127a:	3e 07       	cpc	r19, r30
    127c:	e0 e0       	ldi	r30, 0x00	; 0
    127e:	4e 07       	cpc	r20, r30
    1280:	e0 e0       	ldi	r30, 0x00	; 0
    1282:	5e 07       	cpc	r21, r30
    1284:	08 f4       	brcc	.+2      	; 0x1288 <main+0x10ac>
    1286:	43 cb       	rjmp	.-2426   	; 0x90e <main+0x732>
								demoState = 2;
    1288:	f2 e0       	ldi	r31, 0x02	; 2
    128a:	f0 93 4c 04 	sts	0x044C, r31
    128e:	90 91 48 04 	lds	r25, 0x0448
    1292:	78 c8       	rjmp	.-3856   	; 0x384 <main+0x1a8>
			readBatteryLevel();				// the battery level is updated every two seconds
             		
			if(currentSelector==4 || currentSelector==5) {
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption

				switch(rgbState) {
    1294:	82 30       	cpi	r24, 0x02	; 2
    1296:	09 f0       	breq	.+2      	; 0x129a <main+0x10be>
    1298:	95 cb       	rjmp	.-2262   	; 0x9c4 <main+0x7e8>
						pwm_green = 255 - currRand;
						rgbState = 2;
						break;

					case 2:
						pwm_blue = 255 - currRand;
    129a:	8a 2d       	mov	r24, r10
    129c:	80 95       	com	r24
    129e:	80 93 0e 02 	sts	0x020E, r24
						rgbState = 0;
    12a2:	10 92 18 03 	sts	0x0318, r1
						break;
    12a6:	8e cb       	rjmp	.-2276   	; 0x9c4 <main+0x7e8>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
    12a8:	81 30       	cpi	r24, 0x01	; 1
    12aa:	09 f0       	breq	.+2      	; 0x12ae <main+0x10d2>
    12ac:	21 ca       	rjmp	.-3006   	; 0x6f0 <main+0x514>
							//pwm_green = 255;
							//pwm_blue = 255;
							break;

						case 1:	// search for a line
							turnOffGreenLeds();
    12ae:	0e 94 04 38 	call	0x7008	; 0x7008 <turnOffGreenLeds>
							GREEN_LED2_ON;
    12b2:	80 91 0b 01 	lds	r24, 0x010B
    12b6:	8b 7f       	andi	r24, 0xFB	; 251
    12b8:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED3_ON;
							outOfLine = 0;
    12bc:	10 92 4e 04 	sts	0x044E, r1
							enableObstacleAvoidance();
    12c0:	0e 94 e0 36 	call	0x6dc0	; 0x6dc0 <enableObstacleAvoidance>
							setRightSpeed(15);
    12c4:	8f e0       	ldi	r24, 0x0F	; 15
    12c6:	0e 94 12 23 	call	0x4624	; 0x4624 <setRightSpeed>
							setLeftSpeed(15);
    12ca:	8f e0       	ldi	r24, 0x0F	; 15
    12cc:	0e 94 f5 22 	call	0x45ea	; 0x45ea <setLeftSpeed>
							if(proximityResult[9]<LINE_IN_THR || proximityResult[10]<LINE_IN_THR || proximityResult[8]<LINE_IN_THR || proximityResult[11]<LINE_IN_THR) {
    12d0:	80 91 69 02 	lds	r24, 0x0269
    12d4:	90 91 6a 02 	lds	r25, 0x026A
    12d8:	e1 e0       	ldi	r30, 0x01	; 1
    12da:	80 39       	cpi	r24, 0x90	; 144
    12dc:	9e 07       	cpc	r25, r30
    12de:	0c f4       	brge	.+2      	; 0x12e2 <main+0x1106>
    12e0:	3a c1       	rjmp	.+628    	; 0x1556 <main+0x137a>
    12e2:	80 91 6b 02 	lds	r24, 0x026B
    12e6:	90 91 6c 02 	lds	r25, 0x026C
    12ea:	f1 e0       	ldi	r31, 0x01	; 1
    12ec:	80 39       	cpi	r24, 0x90	; 144
    12ee:	9f 07       	cpc	r25, r31
    12f0:	0c f4       	brge	.+2      	; 0x12f4 <main+0x1118>
    12f2:	31 c1       	rjmp	.+610    	; 0x1556 <main+0x137a>
    12f4:	80 91 67 02 	lds	r24, 0x0267
    12f8:	90 91 68 02 	lds	r25, 0x0268
    12fc:	21 e0       	ldi	r18, 0x01	; 1
    12fe:	80 39       	cpi	r24, 0x90	; 144
    1300:	92 07       	cpc	r25, r18
    1302:	0c f4       	brge	.+2      	; 0x1306 <main+0x112a>
    1304:	28 c1       	rjmp	.+592    	; 0x1556 <main+0x137a>
    1306:	80 91 6d 02 	lds	r24, 0x026D
    130a:	90 91 6e 02 	lds	r25, 0x026E
    130e:	31 e0       	ldi	r19, 0x01	; 1
    1310:	80 39       	cpi	r24, 0x90	; 144
    1312:	93 07       	cpc	r25, r19
    1314:	0c f4       	brge	.+2      	; 0x1318 <main+0x113c>
    1316:	1f c1       	rjmp	.+574    	; 0x1556 <main+0x137a>
									demoStartTime = getTime100MicroSec();
									demoState = 2;
									break;
								}
							} else {
								lineFound = 0;
    1318:	10 92 4d 04 	sts	0x044D, r1
    131c:	e9 c9       	rjmp	.-3118   	; 0x6f0 <main+0x514>
							//pwm_green = 255;
							//pwm_blue = 0;
							break;

						case 3:	// charge for some time
							turnOffGreenLeds();
    131e:	0e 94 04 38 	call	0x7008	; 0x7008 <turnOffGreenLeds>
							GREEN_LED6_ON;
    1322:	80 91 0b 01 	lds	r24, 0x010B
    1326:	8f 7b       	andi	r24, 0xBF	; 191
    1328:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED7_ON;
							demoEndTime = getTime100MicroSec();
    132c:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <getTime100MicroSec>
    1330:	9b 01       	movw	r18, r22
    1332:	ac 01       	movw	r20, r24
    1334:	60 93 58 04 	sts	0x0458, r22
    1338:	70 93 59 04 	sts	0x0459, r23
    133c:	80 93 5a 04 	sts	0x045A, r24
    1340:	90 93 5b 04 	sts	0x045B, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_30_SEC)) {
    1344:	80 91 50 04 	lds	r24, 0x0450
    1348:	90 91 51 04 	lds	r25, 0x0451
    134c:	a0 91 52 04 	lds	r26, 0x0452
    1350:	b0 91 53 04 	lds	r27, 0x0453
    1354:	28 1b       	sub	r18, r24
    1356:	39 0b       	sbc	r19, r25
    1358:	4a 0b       	sbc	r20, r26
    135a:	5b 0b       	sbc	r21, r27
    135c:	2d 3c       	cpi	r18, 0xCD	; 205
    135e:	66 e6       	ldi	r22, 0x66	; 102
    1360:	36 07       	cpc	r19, r22
    1362:	64 e0       	ldi	r22, 0x04	; 4
    1364:	46 07       	cpc	r20, r22
    1366:	60 e0       	ldi	r22, 0x00	; 0
    1368:	56 07       	cpc	r21, r22
    136a:	08 f4       	brcc	.+2      	; 0x136e <main+0x1192>
    136c:	4f c1       	rjmp	.+670    	; 0x160c <main+0x1430>
								if(batteryLevel<890) {//860) {	// stay in charge if too much discharged (consider the fact that the robot
    136e:	80 91 bb 02 	lds	r24, 0x02BB
    1372:	90 91 bc 02 	lds	r25, 0x02BC
    1376:	e3 e0       	ldi	r30, 0x03	; 3
    1378:	8a 37       	cpi	r24, 0x7A	; 122
    137a:	9e 07       	cpc	r25, r30
    137c:	08 f4       	brcc	.+2      	; 0x1380 <main+0x11a4>
    137e:	52 c1       	rjmp	.+676    	; 0x1624 <main+0x1448>
														// is still in charge thus the battery value measured is higher)
									demoStartTime = getTime100MicroSec();
									break;
								} else {
									setRightSpeed(-13);
    1380:	83 ef       	ldi	r24, 0xF3	; 243
    1382:	0e 94 12 23 	call	0x4624	; 0x4624 <setRightSpeed>
									setLeftSpeed(-13);
    1386:	83 ef       	ldi	r24, 0xF3	; 243
    1388:	0e 94 f5 22 	call	0x45ea	; 0x45ea <setLeftSpeed>
									demoStartTime = getTime100MicroSec();
    138c:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <getTime100MicroSec>
    1390:	60 93 50 04 	sts	0x0450, r22
    1394:	70 93 51 04 	sts	0x0451, r23
    1398:	80 93 52 04 	sts	0x0452, r24
    139c:	90 93 53 04 	sts	0x0453, r25
									demoState = 4;
    13a0:	f4 e0       	ldi	r31, 0x04	; 4
    13a2:	f0 93 4c 04 	sts	0x044C, r31
									break;
    13a6:	a4 c9       	rjmp	.-3256   	; 0x6f0 <main+0x514>
							//pwm_green = 255;
							//pwm_blue = 0;
							break;
						
						case 4: // go back from charger
							turnOffGreenLeds();
    13a8:	0e 94 04 38 	call	0x7008	; 0x7008 <turnOffGreenLeds>
							GREEN_LED6_ON;
    13ac:	80 91 0b 01 	lds	r24, 0x010B
    13b0:	8f 7b       	andi	r24, 0xBF	; 191
    13b2:	80 93 0b 01 	sts	0x010B, r24
							GREEN_LED7_ON;
    13b6:	80 91 0b 01 	lds	r24, 0x010B
    13ba:	8f 77       	andi	r24, 0x7F	; 127
    13bc:	80 93 0b 01 	sts	0x010B, r24
							demoEndTime = getTime100MicroSec();
    13c0:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <getTime100MicroSec>
    13c4:	9b 01       	movw	r18, r22
    13c6:	ac 01       	movw	r20, r24
    13c8:	60 93 58 04 	sts	0x0458, r22
    13cc:	70 93 59 04 	sts	0x0459, r23
    13d0:	80 93 5a 04 	sts	0x045A, r24
    13d4:	90 93 5b 04 	sts	0x045B, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_1_SEC)) {
    13d8:	80 91 50 04 	lds	r24, 0x0450
    13dc:	90 91 51 04 	lds	r25, 0x0451
    13e0:	a0 91 52 04 	lds	r26, 0x0452
    13e4:	b0 91 53 04 	lds	r27, 0x0453
    13e8:	28 1b       	sub	r18, r24
    13ea:	39 0b       	sbc	r19, r25
    13ec:	4a 0b       	sbc	r20, r26
    13ee:	5b 0b       	sbc	r21, r27
    13f0:	2f 38       	cpi	r18, 0x8F	; 143
    13f2:	65 e2       	ldi	r22, 0x25	; 37
    13f4:	36 07       	cpc	r19, r22
    13f6:	60 e0       	ldi	r22, 0x00	; 0
    13f8:	46 07       	cpc	r20, r22
    13fa:	60 e0       	ldi	r22, 0x00	; 0
    13fc:	56 07       	cpc	r21, r22
    13fe:	08 f4       	brcc	.+2      	; 0x1402 <main+0x1226>
    1400:	77 c9       	rjmp	.-3346   	; 0x6f0 <main+0x514>
								setRightSpeed(20);
    1402:	84 e1       	ldi	r24, 0x14	; 20
    1404:	0e 94 12 23 	call	0x4624	; 0x4624 <setRightSpeed>
								setLeftSpeed(-20);								
    1408:	8c ee       	ldi	r24, 0xEC	; 236
    140a:	0e 94 f5 22 	call	0x45ea	; 0x45ea <setLeftSpeed>
								demoStartTime = getTime100MicroSec();
    140e:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <getTime100MicroSec>
    1412:	60 93 50 04 	sts	0x0450, r22
    1416:	70 93 51 04 	sts	0x0451, r23
    141a:	80 93 52 04 	sts	0x0452, r24
    141e:	90 93 53 04 	sts	0x0453, r25
								demoState = 5;							
    1422:	85 e0       	ldi	r24, 0x05	; 5
    1424:	80 93 4c 04 	sts	0x044C, r24
    1428:	63 c9       	rjmp	.-3386   	; 0x6f0 <main+0x514>
							//pwm_green = 0;
							//pwm_blue = 255;
							break;

						case 2:	// line found, follow it
							turnOffGreenLeds();
    142a:	0e 94 04 38 	call	0x7008	; 0x7008 <turnOffGreenLeds>
							GREEN_LED4_ON;
    142e:	80 91 0b 01 	lds	r24, 0x010B
    1432:	8f 7e       	andi	r24, 0xEF	; 239
    1434:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED5_ON;
							disableObstacleAvoidance();
    1438:	0e 94 e4 36 	call	0x6dc8	; 0x6dc8 <disableObstacleAvoidance>

							demoEndTime = getTime100MicroSec();
    143c:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <getTime100MicroSec>
    1440:	9b 01       	movw	r18, r22
    1442:	ac 01       	movw	r20, r24
    1444:	60 93 58 04 	sts	0x0458, r22
    1448:	70 93 59 04 	sts	0x0459, r23
    144c:	80 93 5a 04 	sts	0x045A, r24
    1450:	90 93 5b 04 	sts	0x045B, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {	// the robot seems to be blocked somehow
    1454:	80 91 50 04 	lds	r24, 0x0450
    1458:	90 91 51 04 	lds	r25, 0x0451
    145c:	a0 91 52 04 	lds	r26, 0x0452
    1460:	b0 91 53 04 	lds	r27, 0x0453
    1464:	28 1b       	sub	r18, r24
    1466:	39 0b       	sbc	r19, r25
    1468:	4a 0b       	sbc	r20, r26
    146a:	5b 0b       	sbc	r21, r27
    146c:	23 33       	cpi	r18, 0x33	; 51
    146e:	6f ee       	ldi	r22, 0xEF	; 239
    1470:	36 07       	cpc	r19, r22
    1472:	62 e0       	ldi	r22, 0x02	; 2
    1474:	46 07       	cpc	r20, r22
    1476:	60 e0       	ldi	r22, 0x00	; 0
    1478:	56 07       	cpc	r21, r22
    147a:	08 f0       	brcs	.+2      	; 0x147e <main+0x12a2>
    147c:	33 c1       	rjmp	.+614    	; 0x16e4 <main+0x1508>
								demoStartTime = getTime100MicroSec();
								demoState = 4;
								break;
							}

							if(CHARGE_ON) {
    147e:	80 91 03 01 	lds	r24, 0x0103
    1482:	84 ff       	sbrs	r24, 4
    1484:	14 c1       	rjmp	.+552    	; 0x16ae <main+0x14d2>
								outOfLine = 0;
    1486:	10 92 4e 04 	sts	0x044E, r1
								chargeContact++;
    148a:	80 91 4f 04 	lds	r24, 0x044F
    148e:	8f 5f       	subi	r24, 0xFF	; 255
    1490:	80 93 4f 04 	sts	0x044F, r24
								if(chargeContact > 20) {
    1494:	85 31       	cpi	r24, 0x15	; 21
    1496:	08 f0       	brcs	.+2      	; 0x149a <main+0x12be>
    1498:	56 c1       	rjmp	.+684    	; 0x1746 <main+0x156a>
    149a:	80 91 69 02 	lds	r24, 0x0269
    149e:	90 91 6a 02 	lds	r25, 0x026A
								} else {
									outOfLine = 0;
								}
							}
							
							if(proximityResult[8]<LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR && proximityResult[11]>LINE_OUT_THR) {	// left ground is the only within the black line => turn left
    14a2:	20 91 67 02 	lds	r18, 0x0267
    14a6:	30 91 68 02 	lds	r19, 0x0268
    14aa:	41 e0       	ldi	r20, 0x01	; 1
    14ac:	22 3c       	cpi	r18, 0xC2	; 194
    14ae:	34 07       	cpc	r19, r20
    14b0:	ac f4       	brge	.+42     	; 0x14dc <main+0x1300>
    14b2:	51 e0       	ldi	r21, 0x01	; 1
    14b4:	83 3c       	cpi	r24, 0xC3	; 195
    14b6:	95 07       	cpc	r25, r21
    14b8:	8c f0       	brlt	.+34     	; 0x14dc <main+0x1300>
    14ba:	40 91 6b 02 	lds	r20, 0x026B
    14be:	50 91 6c 02 	lds	r21, 0x026C
    14c2:	61 e0       	ldi	r22, 0x01	; 1
    14c4:	43 3c       	cpi	r20, 0xC3	; 195
    14c6:	56 07       	cpc	r21, r22
    14c8:	4c f0       	brlt	.+18     	; 0x14dc <main+0x1300>
    14ca:	40 91 6d 02 	lds	r20, 0x026D
    14ce:	50 91 6e 02 	lds	r21, 0x026E
    14d2:	e1 e0       	ldi	r30, 0x01	; 1
    14d4:	43 3c       	cpi	r20, 0xC3	; 195
    14d6:	5e 07       	cpc	r21, r30
    14d8:	0c f0       	brlt	.+2      	; 0x14dc <main+0x1300>
    14da:	5e c1       	rjmp	.+700    	; 0x1798 <main+0x15bc>
								setLeftSpeed(-10);
								setRightSpeed(15);
							} else if(proximityResult[11]<LINE_OUT_THR && proximityResult[8]>LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {	// right ground is the only within the black line => turn right
    14dc:	40 91 6d 02 	lds	r20, 0x026D
    14e0:	50 91 6e 02 	lds	r21, 0x026E
    14e4:	f1 e0       	ldi	r31, 0x01	; 1
    14e6:	42 3c       	cpi	r20, 0xC2	; 194
    14e8:	5f 07       	cpc	r21, r31
    14ea:	0c f0       	brlt	.+2      	; 0x14ee <main+0x1312>
    14ec:	cb c0       	rjmp	.+406    	; 0x1684 <main+0x14a8>
    14ee:	41 e0       	ldi	r20, 0x01	; 1
    14f0:	23 3c       	cpi	r18, 0xC3	; 195
    14f2:	34 07       	cpc	r19, r20
    14f4:	0c f4       	brge	.+2      	; 0x14f8 <main+0x131c>
    14f6:	c6 c0       	rjmp	.+396    	; 0x1684 <main+0x14a8>
    14f8:	51 e0       	ldi	r21, 0x01	; 1
    14fa:	83 3c       	cpi	r24, 0xC3	; 195
    14fc:	95 07       	cpc	r25, r21
    14fe:	0c f4       	brge	.+2      	; 0x1502 <main+0x1326>
    1500:	c6 c0       	rjmp	.+396    	; 0x168e <main+0x14b2>
    1502:	80 91 6b 02 	lds	r24, 0x026B
    1506:	90 91 6c 02 	lds	r25, 0x026C
    150a:	61 e0       	ldi	r22, 0x01	; 1
    150c:	83 3c       	cpi	r24, 0xC3	; 195
    150e:	96 07       	cpc	r25, r22
    1510:	0c f0       	brlt	.+2      	; 0x1514 <main+0x1338>
    1512:	3a c1       	rjmp	.+628    	; 0x1788 <main+0x15ac>
								setLeftSpeed(15);
								setRightSpeed(-10);
							} else if(proximityResult[9]>LINE_OUT_THR) {	// center left is leaving the line => turn right
								setLeftSpeed(15);
    1514:	8f e0       	ldi	r24, 0x0F	; 15
    1516:	0e 94 f5 22 	call	0x45ea	; 0x45ea <setLeftSpeed>
								setRightSpeed(-5);
    151a:	8b ef       	ldi	r24, 0xFB	; 251
    151c:	0e 94 12 23 	call	0x4624	; 0x4624 <setRightSpeed>
    1520:	e7 c8       	rjmp	.-3634   	; 0x6f0 <main+0x514>
						pwm_red = 255 - currRand;	
						rgbState = 1;
						break;

					case 1:
						pwm_green = 255 - currRand;
    1522:	8a 2d       	mov	r24, r10
    1524:	80 95       	com	r24
    1526:	80 93 0d 02 	sts	0x020D, r24
						rgbState = 2;
    152a:	62 e0       	ldi	r22, 0x02	; 2
    152c:	60 93 18 03 	sts	0x0318, r22
						break;
    1530:	49 ca       	rjmp	.-2926   	; 0x9c4 <main+0x7e8>
					}
				} else if(currRand<64) {
					if(pwm_red!=255 && pwm_blue!=255) {
						pwm_green = 255;
					}
				} else if (currRand<96) {
    1532:	e0 e6       	ldi	r30, 0x60	; 96
    1534:	ae 16       	cp	r10, r30
    1536:	b1 04       	cpc	r11, r1
    1538:	08 f0       	brcs	.+2      	; 0x153c <main+0x1360>
    153a:	4f c8       	rjmp	.-3938   	; 0x5da <main+0x3fe>
					if(pwm_red!=255 && pwm_green!=255) {
    153c:	80 91 0c 02 	lds	r24, 0x020C
    1540:	8f 3f       	cpi	r24, 0xFF	; 255
    1542:	09 f4       	brne	.+2      	; 0x1546 <main+0x136a>
    1544:	4a c8       	rjmp	.-3948   	; 0x5da <main+0x3fe>
    1546:	80 91 0d 02 	lds	r24, 0x020D
    154a:	8f 3f       	cpi	r24, 0xFF	; 255
    154c:	09 f4       	brne	.+2      	; 0x1550 <main+0x1374>
    154e:	45 c8       	rjmp	.-3958   	; 0x5da <main+0x3fe>
						pwm_blue = 255;
    1550:	10 93 0e 02 	sts	0x020E, r17
    1554:	42 c8       	rjmp	.-3964   	; 0x5da <main+0x3fe>
							outOfLine = 0;
							enableObstacleAvoidance();
							setRightSpeed(15);
							setLeftSpeed(15);
							if(proximityResult[9]<LINE_IN_THR || proximityResult[10]<LINE_IN_THR || proximityResult[8]<LINE_IN_THR || proximityResult[11]<LINE_IN_THR) {
								lineFound++;
    1556:	80 91 4d 04 	lds	r24, 0x044D
    155a:	8f 5f       	subi	r24, 0xFF	; 255
    155c:	80 93 4d 04 	sts	0x044D, r24
								if(lineFound > 10) {
    1560:	8b 30       	cpi	r24, 0x0B	; 11
    1562:	08 f4       	brcc	.+2      	; 0x1566 <main+0x138a>
    1564:	c5 c8       	rjmp	.-3702   	; 0x6f0 <main+0x514>
									outOfLine = 0;
    1566:	10 92 4e 04 	sts	0x044E, r1
									chargeContact = 0;
    156a:	10 92 4f 04 	sts	0x044F, r1
									demoStartTime = getTime100MicroSec();
    156e:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <getTime100MicroSec>
    1572:	60 93 50 04 	sts	0x0450, r22
    1576:	70 93 51 04 	sts	0x0451, r23
    157a:	80 93 52 04 	sts	0x0452, r24
    157e:	90 93 53 04 	sts	0x0453, r25
									demoState = 2;
    1582:	42 e0       	ldi	r20, 0x02	; 2
    1584:	40 93 4c 04 	sts	0x044C, r20
									break;
    1588:	b3 c8       	rjmp	.-3738   	; 0x6f0 <main+0x514>
				currRand2 = rand()%128;
				if(currRand2<32) {
					pwm_red = 255;
				} else if(currRand2<64) {
					pwm_green = 255;
				} else if (currRand2<96) {
    158a:	80 36       	cpi	r24, 0x60	; 96
    158c:	91 05       	cpc	r25, r1
    158e:	08 f0       	brcs	.+2      	; 0x1592 <main+0x13b6>
    1590:	7f ca       	rjmp	.-2818   	; 0xa90 <main+0x8b4>
					pwm_blue = 255;
    1592:	10 93 0e 02 	sts	0x020E, r17
    1596:	7c ca       	rjmp	.-2824   	; 0xa90 <main+0x8b4>
							}

							currRand = rand()% 200;
							if(currRand<50) {
								pwm_red = 255;
							} else if(currRand<100) {
    1598:	84 36       	cpi	r24, 0x64	; 100
    159a:	91 05       	cpc	r25, r1
    159c:	08 f0       	brcs	.+2      	; 0x15a0 <main+0x13c4>
    159e:	6a c0       	rjmp	.+212    	; 0x1674 <main+0x1498>
								pwm_green = 255;
    15a0:	10 93 0d 02 	sts	0x020D, r17
    15a4:	80 91 0c 02 	lds	r24, 0x020C
    15a8:	eb ca       	rjmp	.-2602   	; 0xb80 <main+0x9a4>

							currRand = rand()% 128;
							if(currRand > 95) {
								pwm_blue = 255;
							} else {
								pwm_blue = currRand;
    15aa:	80 93 0e 02 	sts	0x020E, r24
    15ae:	da ca       	rjmp	.-2636   	; 0xb64 <main+0x988>

							currRand = rand()% 128;
							if(currRand > 95) {
								pwm_green = 255;
							} else {
								pwm_green = currRand;
    15b0:	80 93 0d 02 	sts	0x020D, r24
    15b4:	cb ca       	rjmp	.-2666   	; 0xb4c <main+0x970>
							turnOffGreenLeds();					
							currRand = rand()% 128;	// 0 to 255 is the maximum, we use 0 to 127 to get brighter colors
							if(currRand > 95) {
								pwm_red = 255;
							} else {
								pwm_red = currRand;
    15b6:	80 93 0c 02 	sts	0x020C, r24
    15ba:	bc ca       	rjmp	.-2696   	; 0xb34 <main+0x958>
					} else if(pwm_right_desired > pwm_intermediate_right_desired) {
						pwm_intermediate_right_desired += speedStep;
						if(pwm_intermediate_right_desired > pwm_right_desired) {
							pwm_intermediate_right_desired = pwm_right_desired;
						}
					} else if(pwm_right_desired < pwm_intermediate_right_desired) {
    15bc:	82 17       	cp	r24, r18
    15be:	93 07       	cpc	r25, r19
    15c0:	14 f0       	brlt	.+4      	; 0x15c6 <main+0x13ea>
    15c2:	0c 94 8a 02 	jmp	0x514	; 0x514 <main+0x338>
						pwm_intermediate_right_desired -= speedStep;
    15c6:	40 91 17 02 	lds	r20, 0x0217
    15ca:	24 1b       	sub	r18, r20
    15cc:	31 09       	sbc	r19, r1
    15ce:	30 93 fc 02 	sts	0x02FC, r19
    15d2:	20 93 fb 02 	sts	0x02FB, r18
						if(pwm_intermediate_right_desired < pwm_right_desired) {
    15d6:	28 17       	cp	r18, r24
    15d8:	39 07       	cpc	r19, r25
    15da:	14 f0       	brlt	.+4      	; 0x15e0 <main+0x1404>
    15dc:	0c 94 8a 02 	jmp	0x514	; 0x514 <main+0x338>
    15e0:	0c 94 86 02 	jmp	0x50c	; 0x50c <main+0x330>
					} else if(pwm_left_desired > pwm_intermediate_left_desired) {
						pwm_intermediate_left_desired += speedStep;
						if(pwm_intermediate_left_desired > pwm_left_desired) {
							pwm_intermediate_left_desired = pwm_left_desired;
						}
					} else if(pwm_left_desired < pwm_intermediate_left_desired) {
    15e4:	82 17       	cp	r24, r18
    15e6:	93 07       	cpc	r25, r19
    15e8:	14 f0       	brlt	.+4      	; 0x15ee <main+0x1412>
    15ea:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <main+0xc6>
						pwm_intermediate_left_desired -= speedStep;
    15ee:	40 91 17 02 	lds	r20, 0x0217
    15f2:	24 1b       	sub	r18, r20
    15f4:	31 09       	sbc	r19, r1
    15f6:	30 93 fe 02 	sts	0x02FE, r19
    15fa:	20 93 fd 02 	sts	0x02FD, r18
						if(pwm_intermediate_left_desired < pwm_left_desired) {
    15fe:	28 17       	cp	r18, r24
    1600:	39 07       	cpc	r19, r25
    1602:	14 f0       	brlt	.+4      	; 0x1608 <main+0x142c>
    1604:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <main+0xc6>
    1608:	0c 94 af 02 	jmp	0x55e	; 0x55e <main+0x382>
									demoStartTime = getTime100MicroSec();
									demoState = 4;
									break;
								}
							}
							if(!CHARGE_ON) {
    160c:	80 91 03 01 	lds	r24, 0x0103
    1610:	84 fd       	sbrc	r24, 4
    1612:	6e c8       	rjmp	.-3876   	; 0x6f0 <main+0x514>
								chargeContact = 0;
    1614:	10 92 4f 04 	sts	0x044F, r1
								outOfLine = 0;
    1618:	10 92 4e 04 	sts	0x044E, r1
								demoState = 2;
    161c:	82 e0       	ldi	r24, 0x02	; 2
    161e:	98 2e       	mov	r9, r24
    1620:	90 92 4c 04 	sts	0x044C, r9
								demoStartTime = getTime100MicroSec();
    1624:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <getTime100MicroSec>
    1628:	60 93 50 04 	sts	0x0450, r22
    162c:	70 93 51 04 	sts	0x0451, r23
    1630:	80 93 52 04 	sts	0x0452, r24
    1634:	90 93 53 04 	sts	0x0453, r25
								break;						
    1638:	5b c8       	rjmp	.-3914   	; 0x6f0 <main+0x514>
						case 0:							
							pwm_red = 255;
							pwm_green = 255;
							pwm_blue = 255;
							if((getTime100MicroSec()-demoEndTime) >= (PAUSE_100_MSEC)) {
								setGreenLed(greenLedState, 0);
    163a:	80 91 66 04 	lds	r24, 0x0466
    163e:	60 e0       	ldi	r22, 0x00	; 0
    1640:	0e 94 67 37 	call	0x6ece	; 0x6ece <setGreenLed>
								greenLedState++;
    1644:	80 91 66 04 	lds	r24, 0x0466
    1648:	8f 5f       	subi	r24, 0xFF	; 255
    164a:	80 93 66 04 	sts	0x0466, r24
								if(greenLedState > 7) {
    164e:	88 30       	cpi	r24, 0x08	; 8
    1650:	18 f0       	brcs	.+6      	; 0x1658 <main+0x147c>
									greenLedState = 0;
    1652:	10 92 66 04 	sts	0x0466, r1
    1656:	80 e0       	ldi	r24, 0x00	; 0
								}
								setGreenLed(greenLedState, 1);
    1658:	61 e0       	ldi	r22, 0x01	; 1
    165a:	0e 94 67 37 	call	0x6ece	; 0x6ece <setGreenLed>
								demoEndTime = getTime100MicroSec();											
    165e:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <getTime100MicroSec>
    1662:	60 93 58 04 	sts	0x0458, r22
    1666:	70 93 59 04 	sts	0x0459, r23
    166a:	80 93 5a 04 	sts	0x045A, r24
    166e:	90 93 5b 04 	sts	0x045B, r25
    1672:	b0 c8       	rjmp	.-3744   	; 0x7d4 <main+0x5f8>
							currRand = rand()% 200;
							if(currRand<50) {
								pwm_red = 255;
							} else if(currRand<100) {
								pwm_green = 255;
							} else if (currRand<150) {	
    1674:	86 39       	cpi	r24, 0x96	; 150
    1676:	91 05       	cpc	r25, r1
    1678:	10 f4       	brcc	.+4      	; 0x167e <main+0x14a2>
								pwm_blue = 255;
    167a:	10 93 0e 02 	sts	0x020E, r17
    167e:	80 91 0c 02 	lds	r24, 0x020C
    1682:	7e ca       	rjmp	.-2820   	; 0xb80 <main+0x9a4>
								setLeftSpeed(-10);
								setRightSpeed(15);
							} else if(proximityResult[11]<LINE_OUT_THR && proximityResult[8]>LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {	// right ground is the only within the black line => turn right
								setLeftSpeed(15);
								setRightSpeed(-10);
							} else if(proximityResult[9]>LINE_OUT_THR) {	// center left is leaving the line => turn right
    1684:	e1 e0       	ldi	r30, 0x01	; 1
    1686:	83 3c       	cpi	r24, 0xC3	; 195
    1688:	9e 07       	cpc	r25, r30
    168a:	0c f0       	brlt	.+2      	; 0x168e <main+0x14b2>
    168c:	43 cf       	rjmp	.-378    	; 0x1514 <main+0x1338>
								setRightSpeed(-5);
								//outOfLine++;
								//if(outOfLine > 250) {
								//	demoState = 1;
								//}
							} else if(proximityResult[10]>LINE_OUT_THR) {	// center right is leaving the lnie => turn left
    168e:	80 91 6b 02 	lds	r24, 0x026B
    1692:	90 91 6c 02 	lds	r25, 0x026C
    1696:	f1 e0       	ldi	r31, 0x01	; 1
    1698:	83 3c       	cpi	r24, 0xC3	; 195
    169a:	9f 07       	cpc	r25, r31
    169c:	0c f4       	brge	.+2      	; 0x16a0 <main+0x14c4>
    169e:	4b c0       	rjmp	.+150    	; 0x1736 <main+0x155a>
								setLeftSpeed(-5);
    16a0:	8b ef       	ldi	r24, 0xFB	; 251
    16a2:	0e 94 f5 22 	call	0x45ea	; 0x45ea <setLeftSpeed>
								setRightSpeed(15);
    16a6:	8f e0       	ldi	r24, 0x0F	; 15
    16a8:	0e 94 12 23 	call	0x4624	; 0x4624 <setRightSpeed>
    16ac:	21 c8       	rjmp	.-4030   	; 0x6f0 <main+0x514>
									demoStartTime = getTime100MicroSec();
									demoState = 3;
									break;
								}
							} else {
								chargeContact = 0;
    16ae:	10 92 4f 04 	sts	0x044F, r1

								if(proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {
    16b2:	80 91 69 02 	lds	r24, 0x0269
    16b6:	90 91 6a 02 	lds	r25, 0x026A
    16ba:	e1 e0       	ldi	r30, 0x01	; 1
    16bc:	83 3c       	cpi	r24, 0xC3	; 195
    16be:	9e 07       	cpc	r25, r30
    16c0:	34 f1       	brlt	.+76     	; 0x170e <main+0x1532>
    16c2:	20 91 6b 02 	lds	r18, 0x026B
    16c6:	30 91 6c 02 	lds	r19, 0x026C
    16ca:	f1 e0       	ldi	r31, 0x01	; 1
    16cc:	23 3c       	cpi	r18, 0xC3	; 195
    16ce:	3f 07       	cpc	r19, r31
    16d0:	f4 f0       	brlt	.+60     	; 0x170e <main+0x1532>
									outOfLine++;
    16d2:	20 91 4e 04 	lds	r18, 0x044E
    16d6:	2f 5f       	subi	r18, 0xFF	; 255
    16d8:	20 93 4e 04 	sts	0x044E, r18
									if(outOfLine > 250) {
    16dc:	2b 3f       	cpi	r18, 0xFB	; 251
    16de:	08 f4       	brcc	.+2      	; 0x16e2 <main+0x1506>
    16e0:	e0 ce       	rjmp	.-576    	; 0x14a2 <main+0x12c6>
    16e2:	04 c8       	rjmp	.-4088   	; 0x6ec <main+0x510>
							disableObstacleAvoidance();

							demoEndTime = getTime100MicroSec();
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {	// the robot seems to be blocked somehow
								// go back for a while
								setRightSpeed(-20);
    16e4:	8c ee       	ldi	r24, 0xEC	; 236
    16e6:	0e 94 12 23 	call	0x4624	; 0x4624 <setRightSpeed>
								setLeftSpeed(-20);
    16ea:	8c ee       	ldi	r24, 0xEC	; 236
    16ec:	0e 94 f5 22 	call	0x45ea	; 0x45ea <setLeftSpeed>
								demoStartTime = getTime100MicroSec();
    16f0:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <getTime100MicroSec>
    16f4:	60 93 50 04 	sts	0x0450, r22
    16f8:	70 93 51 04 	sts	0x0451, r23
    16fc:	80 93 52 04 	sts	0x0452, r24
    1700:	90 93 53 04 	sts	0x0453, r25
								demoState = 4;
    1704:	84 e0       	ldi	r24, 0x04	; 4
    1706:	80 93 4c 04 	sts	0x044C, r24
								break;
    170a:	0c 94 78 03 	jmp	0x6f0	; 0x6f0 <main+0x514>
										chargeContact = 0;
										demoState = 1;
										break;
									}
								} else {
									outOfLine = 0;
    170e:	10 92 4e 04 	sts	0x044E, r1
    1712:	c7 ce       	rjmp	.-626    	; 0x14a2 <main+0x12c6>
					if(rgbState == 0) {
						pwm_red = 254;
						pwm_green = 255;
						pwm_blue = 255;
						rgbState = 1;
					} else if(rgbState == 1) {
    1714:	91 30       	cpi	r25, 0x01	; 1
    1716:	61 f1       	breq	.+88     	; 0x1770 <main+0x1594>
						pwm_red = 255;
						pwm_green = 254;
						pwm_blue = 255;
						rgbState = 2;
					} else if(rgbState == 2) {
    1718:	92 30       	cpi	r25, 0x02	; 2
    171a:	11 f0       	breq	.+4      	; 0x1720 <main+0x1544>
    171c:	0c 94 ed 02 	jmp	0x5da	; 0x5da <main+0x3fe>
						pwm_red = 255;
    1720:	10 93 0c 02 	sts	0x020C, r17
						pwm_green = 255;
    1724:	10 93 0d 02 	sts	0x020D, r17
						pwm_blue = 254;
    1728:	8e ef       	ldi	r24, 0xFE	; 254
    172a:	80 93 0e 02 	sts	0x020E, r24
						rgbState = 0;
    172e:	10 92 18 03 	sts	0x0318, r1
    1732:	0c 94 ed 02 	jmp	0x5da	; 0x5da <main+0x3fe>
								//outOfLine++;
								//if(outOfLine > 250) {
								//	demoState = 1;
								//}
							} else {
								setRightSpeed(15);
    1736:	8f e0       	ldi	r24, 0x0F	; 15
    1738:	0e 94 12 23 	call	0x4624	; 0x4624 <setRightSpeed>
								setLeftSpeed(15);
    173c:	8f e0       	ldi	r24, 0x0F	; 15
    173e:	0e 94 f5 22 	call	0x45ea	; 0x45ea <setLeftSpeed>
    1742:	0c 94 78 03 	jmp	0x6f0	; 0x6f0 <main+0x514>

							if(CHARGE_ON) {
								outOfLine = 0;
								chargeContact++;
								if(chargeContact > 20) {
									setLeftSpeed(0);
    1746:	80 e0       	ldi	r24, 0x00	; 0
    1748:	0e 94 f5 22 	call	0x45ea	; 0x45ea <setLeftSpeed>
									setRightSpeed(0);
    174c:	80 e0       	ldi	r24, 0x00	; 0
    174e:	0e 94 12 23 	call	0x4624	; 0x4624 <setRightSpeed>
									demoStartTime = getTime100MicroSec();
    1752:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <getTime100MicroSec>
    1756:	60 93 50 04 	sts	0x0450, r22
    175a:	70 93 51 04 	sts	0x0451, r23
    175e:	80 93 52 04 	sts	0x0452, r24
    1762:	90 93 53 04 	sts	0x0453, r25
									demoState = 3;
    1766:	93 e0       	ldi	r25, 0x03	; 3
    1768:	90 93 4c 04 	sts	0x044C, r25
									break;
    176c:	0c 94 78 03 	jmp	0x6f0	; 0x6f0 <main+0x514>
						pwm_red = 254;
						pwm_green = 255;
						pwm_blue = 255;
						rgbState = 1;
					} else if(rgbState == 1) {
						pwm_red = 255;
    1770:	10 93 0c 02 	sts	0x020C, r17
						pwm_green = 254;
    1774:	5e ef       	ldi	r21, 0xFE	; 254
    1776:	50 93 0d 02 	sts	0x020D, r21
						pwm_blue = 255;
    177a:	10 93 0e 02 	sts	0x020E, r17
						rgbState = 2;
    177e:	62 e0       	ldi	r22, 0x02	; 2
    1780:	60 93 18 03 	sts	0x0318, r22
    1784:	0c 94 ed 02 	jmp	0x5da	; 0x5da <main+0x3fe>
							
							if(proximityResult[8]<LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR && proximityResult[11]>LINE_OUT_THR) {	// left ground is the only within the black line => turn left
								setLeftSpeed(-10);
								setRightSpeed(15);
							} else if(proximityResult[11]<LINE_OUT_THR && proximityResult[8]>LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {	// right ground is the only within the black line => turn right
								setLeftSpeed(15);
    1788:	8f e0       	ldi	r24, 0x0F	; 15
    178a:	0e 94 f5 22 	call	0x45ea	; 0x45ea <setLeftSpeed>
								setRightSpeed(-10);
    178e:	86 ef       	ldi	r24, 0xF6	; 246
    1790:	0e 94 12 23 	call	0x4624	; 0x4624 <setRightSpeed>
    1794:	0c 94 78 03 	jmp	0x6f0	; 0x6f0 <main+0x514>
									outOfLine = 0;
								}
							}
							
							if(proximityResult[8]<LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR && proximityResult[11]>LINE_OUT_THR) {	// left ground is the only within the black line => turn left
								setLeftSpeed(-10);
    1798:	86 ef       	ldi	r24, 0xF6	; 246
    179a:	0e 94 f5 22 	call	0x45ea	; 0x45ea <setLeftSpeed>
								setRightSpeed(15);
    179e:	8f e0       	ldi	r24, 0x0F	; 15
    17a0:	0e 94 12 23 	call	0x4624	; 0x4624 <setRightSpeed>
    17a4:	0c 94 78 03 	jmp	0x6f0	; 0x6f0 <main+0x514>

000017a8 <SPI_WAIT>:
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	90 e0       	ldi	r25, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
    17ac:	21 e0       	ldi	r18, 0x01	; 1
		}
	
		if(SPSR & _BV(SPIF)) {
    17ae:	0d b4       	in	r0, 0x2d	; 45
    17b0:	07 fc       	sbrc	r0, 7
    17b2:	0a c0       	rjmp	.+20     	; 0x17c8 <SPI_WAIT+0x20>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    17b4:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
    17b6:	37 e2       	ldi	r19, 0x27	; 39
    17b8:	80 31       	cpi	r24, 0x10	; 16
    17ba:	93 07       	cpc	r25, r19
    17bc:	c0 f3       	brcs	.-16     	; 0x17ae <SPI_WAIT+0x6>
			spiCommError = 1;
    17be:	20 93 16 03 	sts	0x0316, r18
		}
	
		if(SPSR & _BV(SPIF)) {
    17c2:	0d b4       	in	r0, 0x2d	; 45
    17c4:	07 fe       	sbrs	r0, 7
    17c6:	f6 cf       	rjmp	.-20     	; 0x17b4 <SPI_WAIT+0xc>
			return;
		}
	}
}
    17c8:	08 95       	ret

000017ca <initSPI>:

void initSPI() {

    SPI_DDR &= ~((1<<SPI_MOSI)|(1<<SPI_MISO)|(1<<SPI_SS)|(1<<SPI_SCK));
    17ca:	84 b1       	in	r24, 0x04	; 4
    17cc:	80 7f       	andi	r24, 0xF0	; 240
    17ce:	84 b9       	out	0x04, r24	; 4
    // Define the following pins as output
    SPI_DDR |= ((1<<SPI_MOSI)|(1<<SPI_SS)|(1<<SPI_SCK));
    17d0:	84 b1       	in	r24, 0x04	; 4
    17d2:	87 60       	ori	r24, 0x07	; 7
    17d4:	84 b9       	out	0x04, r24	; 4

    
    SPCR = ((1<<SPE)|               // SPI Enable
    17d6:	80 e5       	ldi	r24, 0x50	; 80
    17d8:	8c bd       	out	0x2c, r24	; 44
            (1<<MSTR)|              // 1:Master/ 0:Slave
            (0<<SPR1)|(0<<SPR0)|    // SPI Clock Rate => default 1/4 => 2 MHz
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR |= (1<<SPI2X);              // Double Clock Rate
    17da:	8d b5       	in	r24, 0x2d	; 45
    17dc:	81 60       	ori	r24, 0x01	; 1
    17de:	8d bd       	out	0x2d, r24	; 45

}
    17e0:	08 95       	ret

000017e2 <closeSPI>:

void closeSPI() {

	SPCR = 0x00;
    17e2:	1c bc       	out	0x2c, r1	; 44
	SPSR = 0x00;
    17e4:	1d bc       	out	0x2d, r1	; 45
}
    17e6:	08 95       	ret

000017e8 <SPI_ReadWrite_Block>:

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    17e8:	44 23       	and	r20, r20
    17ea:	09 f1       	breq	.+66     	; 0x182e <SPI_ReadWrite_Block+0x46>
    17ec:	a6 2f       	mov	r26, r22
    17ee:	b7 2f       	mov	r27, r23
    17f0:	e8 2f       	mov	r30, r24
    17f2:	f9 2f       	mov	r31, r25
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
    17f4:	91 e0       	ldi	r25, 0x01	; 1
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
    17f6:	21 91       	ld	r18, Z+
    17f8:	2e bd       	out	0x2e, r18	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    17fa:	21 e0       	ldi	r18, 0x01	; 1
    17fc:	30 e0       	ldi	r19, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
    17fe:	0d b4       	in	r0, 0x2d	; 45
    1800:	07 fc       	sbrc	r0, 7
    1802:	0b c0       	rjmp	.+22     	; 0x181a <SPI_ReadWrite_Block+0x32>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1804:	2f 5f       	subi	r18, 0xFF	; 255
    1806:	3f 4f       	sbci	r19, 0xFF	; 255
		if(timeout>=10000) {
    1808:	57 e2       	ldi	r21, 0x27	; 39
    180a:	20 31       	cpi	r18, 0x10	; 16
    180c:	35 07       	cpc	r19, r21
    180e:	b8 f3       	brcs	.-18     	; 0x17fe <SPI_ReadWrite_Block+0x16>
			spiCommError = 1;
    1810:	90 93 16 03 	sts	0x0316, r25
		}
	
		if(SPSR & _BV(SPIF)) {
    1814:	0d b4       	in	r0, 0x2d	; 45
    1816:	07 fe       	sbrs	r0, 7
    1818:	f5 cf       	rjmp	.-22     	; 0x1804 <SPI_ReadWrite_Block+0x1c>
void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
          SPI_WAIT();
		  if(spiCommError) {
    181a:	20 91 16 03 	lds	r18, 0x0316
    181e:	22 23       	and	r18, r18
    1820:	31 f4       	brne	.+12     	; 0x182e <SPI_ReadWrite_Block+0x46>
			return;
		  }
          buffer[i] = SPDR;
    1822:	2e b5       	in	r18, 0x2e	; 46
    1824:	2d 93       	st	X+, r18
	SPSR = 0x00;
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1826:	2e 2f       	mov	r18, r30
    1828:	28 1b       	sub	r18, r24
    182a:	24 17       	cp	r18, r20
    182c:	20 f3       	brcs	.-56     	; 0x17f6 <SPI_ReadWrite_Block+0xe>
    182e:	08 95       	ret

00001830 <SPI_Write_Block>:
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1830:	66 23       	and	r22, r22
    1832:	e9 f0       	breq	.+58     	; 0x186e <SPI_Write_Block+0x3e>
    1834:	e8 2f       	mov	r30, r24
    1836:	f9 2f       	mov	r31, r25
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
    1838:	91 e0       	ldi	r25, 0x01	; 1
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
    183a:	21 91       	ld	r18, Z+
    183c:	2e bd       	out	0x2e, r18	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    183e:	21 e0       	ldi	r18, 0x01	; 1
    1840:	30 e0       	ldi	r19, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
    1842:	0d b4       	in	r0, 0x2d	; 45
    1844:	07 fc       	sbrc	r0, 7
    1846:	0b c0       	rjmp	.+22     	; 0x185e <SPI_Write_Block+0x2e>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1848:	2f 5f       	subi	r18, 0xFF	; 255
    184a:	3f 4f       	sbci	r19, 0xFF	; 255
		if(timeout>=10000) {
    184c:	47 e2       	ldi	r20, 0x27	; 39
    184e:	20 31       	cpi	r18, 0x10	; 16
    1850:	34 07       	cpc	r19, r20
    1852:	b8 f3       	brcs	.-18     	; 0x1842 <SPI_Write_Block+0x12>
			spiCommError = 1;
    1854:	90 93 16 03 	sts	0x0316, r25
		}
	
		if(SPSR & _BV(SPIF)) {
    1858:	0d b4       	in	r0, 0x2d	; 45
    185a:	07 fe       	sbrs	r0, 7
    185c:	f5 cf       	rjmp	.-22     	; 0x1848 <SPI_Write_Block+0x18>
void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
          SPI_WAIT();
		  if(spiCommError) {
    185e:	20 91 16 03 	lds	r18, 0x0316
    1862:	22 23       	and	r18, r18
    1864:	21 f4       	brne	.+8      	; 0x186e <SPI_Write_Block+0x3e>
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1866:	2e 2f       	mov	r18, r30
    1868:	28 1b       	sub	r18, r24
    186a:	26 17       	cp	r18, r22
    186c:	30 f3       	brcs	.-52     	; 0x183a <SPI_Write_Block+0xa>
    186e:	08 95       	ret

00001870 <SPI_Write_Byte>:
    }

}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    1870:	8e bd       	out	0x2e, r24	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	90 e0       	ldi	r25, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
    1876:	21 e0       	ldi	r18, 0x01	; 1
		}
	
		if(SPSR & _BV(SPIF)) {
    1878:	0d b4       	in	r0, 0x2d	; 45
    187a:	07 fc       	sbrc	r0, 7
    187c:	0a c0       	rjmp	.+20     	; 0x1892 <SPI_Write_Byte+0x22>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    187e:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
    1880:	37 e2       	ldi	r19, 0x27	; 39
    1882:	80 31       	cpi	r24, 0x10	; 16
    1884:	93 07       	cpc	r25, r19
    1886:	c0 f3       	brcs	.-16     	; 0x1878 <SPI_Write_Byte+0x8>
			spiCommError = 1;
    1888:	20 93 16 03 	sts	0x0316, r18
		}
	
		if(SPSR & _BV(SPIF)) {
    188c:	0d b4       	in	r0, 0x2d	; 45
    188e:	07 fe       	sbrs	r0, 7
    1890:	f6 cf       	rjmp	.-20     	; 0x187e <SPI_Write_Byte+0xe>
}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    SPI_WAIT();
    return SPDR;
    1892:	8e b5       	in	r24, 0x2e	; 46
}
    1894:	08 95       	ret

00001896 <mirf_config>:


void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
    1896:	0f 93       	push	r16
    1898:	1f 93       	push	r17
    189a:	df 93       	push	r29
    189c:	cf 93       	push	r28
    189e:	00 d0       	rcall	.+0      	; 0x18a0 <mirf_config+0xa>
    18a0:	cd b7       	in	r28, 0x3d	; 61
    18a2:	de b7       	in	r29, 0x3e	; 62
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    18a4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    18a6:	80 e2       	ldi	r24, 0x20	; 32
    18a8:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    18ac:	8d e0       	ldi	r24, 0x0D	; 13
    18ae:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    mirf_CSN_hi;
    18b2:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    18b4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    18b6:	83 e2       	ldi	r24, 0x23	; 35
    18b8:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    mirf_CSN_hi;
    18c2:	28 9a       	sbi	0x05, 0	; 5

	// address width
	mirf_config_register(SETUP_AW, 0x01);

	// tx address
	temp[0] = (rfAddress>>8)&0xFF;
    18c4:	80 91 13 03 	lds	r24, 0x0313
    18c8:	90 91 14 03 	lds	r25, 0x0314
    18cc:	99 83       	std	Y+1, r25	; 0x01
	temp[1] = rfAddress & 0xFF;
    18ce:	8a 83       	std	Y+2, r24	; 0x02
	temp[2] = 0x00;
    18d0:	1b 82       	std	Y+3, r1	; 0x03
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    18d2:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    18d4:	80 e3       	ldi	r24, 0x30	; 48
    18d6:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    18da:	8e 01       	movw	r16, r28
    18dc:	0f 5f       	subi	r16, 0xFF	; 255
    18de:	1f 4f       	sbci	r17, 0xFF	; 255
    18e0:	c8 01       	movw	r24, r16
    18e2:	63 e0       	ldi	r22, 0x03	; 3
    18e4:	0e 94 18 0c 	call	0x1830	; 0x1830 <SPI_Write_Block>
    mirf_CSN_hi;
    18e8:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    18ea:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    18ec:	8a e2       	ldi	r24, 0x2A	; 42
    18ee:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    18f2:	c8 01       	movw	r24, r16
    18f4:	63 e0       	ldi	r22, 0x03	; 3
    18f6:	0e 94 18 0c 	call	0x1830	; 0x1830 <SPI_Write_Block>
    mirf_CSN_hi;
    18fa:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    18fc:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    18fe:	81 e2       	ldi	r24, 0x21	; 33
    1900:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    mirf_CSN_hi;
    190a:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    190c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    190e:	82 e2       	ldi	r24, 0x22	; 34
    1910:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    mirf_CSN_hi;
    191a:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    191c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    191e:	84 e2       	ldi	r24, 0x24	; 36
    1920:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1924:	82 e1       	ldi	r24, 0x12	; 18
    1926:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    mirf_CSN_hi;
    192a:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    192c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    192e:	85 e2       	ldi	r24, 0x25	; 37
    1930:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1934:	88 e2       	ldi	r24, 0x28	; 40
    1936:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    mirf_CSN_hi;
    193a:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    193c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    193e:	81 e3       	ldi	r24, 0x31	; 49
    1940:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1944:	8d e0       	ldi	r24, 0x0D	; 13
    1946:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    mirf_CSN_hi;
    194a:	28 9a       	sbi	0x05, 0	; 5

	// RX payload size; it isn't needed because the dynamic payload length is activated for ACK+PAYLOAD feature
    mirf_config_register(RX_PW_P0, PAYLOAD_SIZE);

	// enable extra features
    mirf_CSN_lo;
    194c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_ACTIVATE);
    194e:	80 e5       	ldi	r24, 0x50	; 80
    1950:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    SPI_Write_Byte(0x73);
    1954:	83 e7       	ldi	r24, 0x73	; 115
    1956:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    mirf_CSN_hi;
    195a:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    195c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    195e:	8c e3       	ldi	r24, 0x3C	; 60
    1960:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1964:	81 e0       	ldi	r24, 0x01	; 1
    1966:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    mirf_CSN_hi;
    196a:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    196c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    196e:	8d e3       	ldi	r24, 0x3D	; 61
    1970:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1974:	86 e0       	ldi	r24, 0x06	; 6
    1976:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    mirf_CSN_hi;
    197a:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    197c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    197e:	80 e2       	ldi	r24, 0x20	; 32
    1980:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1984:	8f e0       	ldi	r24, 0x0F	; 15
    1986:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    mirf_CSN_hi;
    198a:	28 9a       	sbi	0x05, 0	; 5

    // Start receiver 
    //PTX = 0;        // Start in receiving mode
    //RX_POWERUP;     // Power up in receiving mode
    //mirf_CE_hi;     // Listening for pakets
}
    198c:	0f 90       	pop	r0
    198e:	0f 90       	pop	r0
    1990:	0f 90       	pop	r0
    1992:	cf 91       	pop	r28
    1994:	df 91       	pop	r29
    1996:	1f 91       	pop	r17
    1998:	0f 91       	pop	r16
    199a:	08 95       	ret

0000199c <mirf_init>:
// Initializes pins as interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    //DDRB |= ((1<<CSN)|(1<<CE));
    mirf_CE_hi;
    199c:	2c 9a       	sbi	0x05, 4	; 5
    mirf_CSN_hi;
    199e:	28 9a       	sbi	0x05, 0	; 5

	mirf_config();
    19a0:	0e 94 4b 0c 	call	0x1896	; 0x1896 <mirf_config>
}
    19a4:	08 95       	ret

000019a6 <mirf_set_RADDR>:
    //mirf_CE_hi;     // Listening for pakets
}

void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    19a6:	cf 93       	push	r28
    19a8:	df 93       	push	r29
    19aa:	ec 01       	movw	r28, r24
    mirf_CE_lo;
    19ac:	2c 98       	cbi	0x05, 4	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    19ae:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    19b0:	8a e2       	ldi	r24, 0x2A	; 42
    19b2:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    19b6:	ce 01       	movw	r24, r28
    19b8:	65 e0       	ldi	r22, 0x05	; 5
    19ba:	0e 94 18 0c 	call	0x1830	; 0x1830 <SPI_Write_Block>
    mirf_CSN_hi;
    19be:	28 9a       	sbi	0x05, 0	; 5
void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    mirf_CE_lo;
    mirf_write_register(RX_ADDR_P0,adr,5);
    mirf_CE_hi;
    19c0:	2c 9a       	sbi	0x05, 4	; 5
}
    19c2:	df 91       	pop	r29
    19c4:	cf 91       	pop	r28
    19c6:	08 95       	ret

000019c8 <mirf_set_TADDR>:

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
    19c8:	cf 93       	push	r28
    19ca:	df 93       	push	r29
    19cc:	ec 01       	movw	r28, r24
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    19ce:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    19d0:	80 e3       	ldi	r24, 0x30	; 48
    19d2:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    19d6:	ce 01       	movw	r24, r28
    19d8:	65 e0       	ldi	r22, 0x05	; 5
    19da:	0e 94 18 0c 	call	0x1830	; 0x1830 <SPI_Write_Block>
    mirf_CSN_hi;
    19de:	28 9a       	sbi	0x05, 0	; 5

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
	mirf_write_register(TX_ADDR, adr,5);
}
    19e0:	df 91       	pop	r29
    19e2:	cf 91       	pop	r28
    19e4:	08 95       	ret

000019e6 <mirf_data_ready>:
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
    19e6:	80 91 c0 04 	lds	r24, 0x04C0
    19ea:	88 23       	and	r24, r24
    19ec:	11 f0       	breq	.+4      	; 0x19f2 <mirf_data_ready+0xc>
    19ee:	80 e0       	ldi	r24, 0x00	; 0
    mirf_CSN_lo;                                // Pull down chip select
    status = SPI_Write_Byte(NOP);               // Read status register
    mirf_CSN_hi;                                // Pull up chip select
    return status & (1<<RX_DR);

}
    19f0:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    19f2:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
    19f4:	8f ef       	ldi	r24, 0xFF	; 255
    19f6:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
    19fa:	28 9a       	sbi	0x05, 0	; 5
    return status & (1<<RX_DR);
    19fc:	80 74       	andi	r24, 0x40	; 64
    19fe:	08 95       	ret

00001a00 <rx_fifo_is_empty>:

}

uint8_t rx_fifo_is_empty() {
    1a00:	df 93       	push	r29
    1a02:	cf 93       	push	r28
    1a04:	0f 92       	push	r0
    1a06:	cd b7       	in	r28, 0x3d	; 61
    1a08:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t fifo_status = 0;
    1a0a:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
    1a0c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    1a0e:	87 e1       	ldi	r24, 0x17	; 23
    1a10:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    1a14:	be 01       	movw	r22, r28
    1a16:	6f 5f       	subi	r22, 0xFF	; 255
    1a18:	7f 4f       	sbci	r23, 0xFF	; 255
    1a1a:	cb 01       	movw	r24, r22
    1a1c:	41 e0       	ldi	r20, 0x01	; 1
    1a1e:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    1a22:	28 9a       	sbi	0x05, 0	; 5
	
	uint8_t fifo_status = 0;

	mirf_read_register(FIFO_STATUS, &fifo_status, 1);
	
	return (uint8_t)(fifo_status&0x01);
    1a24:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a26:	81 70       	andi	r24, 0x01	; 1
    1a28:	0f 90       	pop	r0
    1a2a:	cf 91       	pop	r28
    1a2c:	df 91       	pop	r29
    1a2e:	08 95       	ret

00001a30 <flush_rx_fifo>:

void flush_rx_fifo() {

    mirf_CSN_lo;
    1a30:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
    1a32:	82 ee       	ldi	r24, 0xE2	; 226
    1a34:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    mirf_CSN_hi;
    1a38:	28 9a       	sbi	0x05, 0	; 5

}
    1a3a:	08 95       	ret

00001a3c <mirf_get_data>:

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    1a3c:	cf 93       	push	r28
    1a3e:	df 93       	push	r29
    1a40:	ec 01       	movw	r28, r24
    mirf_CSN_lo;                               		// Pull down chip select
    1a42:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    1a44:	81 e6       	ldi	r24, 0x61	; 97
    1a46:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    1a4a:	ce 01       	movw	r24, r28
    1a4c:	be 01       	movw	r22, r28
    1a4e:	4d e0       	ldi	r20, 0x0D	; 13
    1a50:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
    1a54:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1a56:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1a58:	87 e2       	ldi	r24, 0x27	; 39
    1a5a:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1a5e:	80 e4       	ldi	r24, 0x40	; 64
    1a60:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    mirf_CSN_hi;
    1a64:	28 9a       	sbi	0x05, 0	; 5
    mirf_CSN_lo;                               		// Pull down chip select
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    mirf_CSN_hi;                               		// Pull up chip select
    mirf_config_register(STATUS,(1<<RX_DR));   		// Reset status register
}
    1a66:	df 91       	pop	r29
    1a68:	cf 91       	pop	r28
    1a6a:	08 95       	ret

00001a6c <mirf_config_register>:

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    1a6c:	df 93       	push	r29
    1a6e:	cf 93       	push	r28
    1a70:	0f 92       	push	r0
    1a72:	cd b7       	in	r28, 0x3d	; 61
    1a74:	de b7       	in	r29, 0x3e	; 62
    mirf_CSN_lo;
    1a76:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1a78:	8f 71       	andi	r24, 0x1F	; 31
    1a7a:	80 62       	ori	r24, 0x20	; 32
    1a7c:	69 83       	std	Y+1, r22	; 0x01
    1a7e:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1a82:	69 81       	ldd	r22, Y+1	; 0x01
    1a84:	86 2f       	mov	r24, r22
    1a86:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    mirf_CSN_hi;
    1a8a:	28 9a       	sbi	0x05, 0	; 5
}
    1a8c:	0f 90       	pop	r0
    1a8e:	cf 91       	pop	r28
    1a90:	df 91       	pop	r29
    1a92:	08 95       	ret

00001a94 <mirf_read_register>:

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    1a94:	0f 93       	push	r16
    1a96:	1f 93       	push	r17
    1a98:	df 93       	push	r29
    1a9a:	cf 93       	push	r28
    1a9c:	0f 92       	push	r0
    1a9e:	cd b7       	in	r28, 0x3d	; 61
    1aa0:	de b7       	in	r29, 0x3e	; 62
    1aa2:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    1aa4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    1aa6:	8f 71       	andi	r24, 0x1F	; 31
    1aa8:	49 83       	std	Y+1, r20	; 0x01
    1aaa:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    1aae:	c8 01       	movw	r24, r16
    1ab0:	b8 01       	movw	r22, r16
    1ab2:	49 81       	ldd	r20, Y+1	; 0x01
    1ab4:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    1ab8:	28 9a       	sbi	0x05, 0	; 5
}
    1aba:	0f 90       	pop	r0
    1abc:	cf 91       	pop	r28
    1abe:	df 91       	pop	r29
    1ac0:	1f 91       	pop	r17
    1ac2:	0f 91       	pop	r16
    1ac4:	08 95       	ret

00001ac6 <mirf_write_register>:

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    1ac6:	0f 93       	push	r16
    1ac8:	1f 93       	push	r17
    1aca:	df 93       	push	r29
    1acc:	cf 93       	push	r28
    1ace:	0f 92       	push	r0
    1ad0:	cd b7       	in	r28, 0x3d	; 61
    1ad2:	de b7       	in	r29, 0x3e	; 62
    1ad4:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    1ad6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1ad8:	8f 71       	andi	r24, 0x1F	; 31
    1ada:	80 62       	ori	r24, 0x20	; 32
    1adc:	49 83       	std	Y+1, r20	; 0x01
    1ade:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1ae2:	c8 01       	movw	r24, r16
    1ae4:	49 81       	ldd	r20, Y+1	; 0x01
    1ae6:	64 2f       	mov	r22, r20
    1ae8:	0e 94 18 0c 	call	0x1830	; 0x1830 <SPI_Write_Block>
    mirf_CSN_hi;
    1aec:	28 9a       	sbi	0x05, 0	; 5
}
    1aee:	0f 90       	pop	r0
    1af0:	cf 91       	pop	r28
    1af2:	df 91       	pop	r29
    1af4:	1f 91       	pop	r17
    1af6:	0f 91       	pop	r16
    1af8:	08 95       	ret

00001afa <mirf_send>:


void mirf_send(uint8_t * value, uint8_t len) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
    1afa:	0f 93       	push	r16
    1afc:	1f 93       	push	r17
    1afe:	df 93       	push	r29
    1b00:	cf 93       	push	r28
    1b02:	0f 92       	push	r0
    1b04:	cd b7       	in	r28, 0x3d	; 61
    1b06:	de b7       	in	r29, 0x3e	; 62
    1b08:	8c 01       	movw	r16, r24
    while (PTX) {}                  // Wait until last paket is send
    1b0a:	80 91 c0 04 	lds	r24, 0x04C0
    1b0e:	88 23       	and	r24, r24
    1b10:	e1 f7       	brne	.-8      	; 0x1b0a <mirf_send+0x10>

    mirf_CE_lo;
    1b12:	2c 98       	cbi	0x05, 4	; 5

    PTX = 1;                        // Set to transmitter mode
    1b14:	81 e0       	ldi	r24, 0x01	; 1
    1b16:	80 93 c0 04 	sts	0x04C0, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1b1a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1b1c:	80 e2       	ldi	r24, 0x20	; 32
    1b1e:	69 83       	std	Y+1, r22	; 0x01
    1b20:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1b24:	8a e4       	ldi	r24, 0x4A	; 74
    1b26:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    mirf_CSN_hi;
    1b2a:	28 9a       	sbi	0x05, 0	; 5
    mirf_CE_lo;

    PTX = 1;                        // Set to transmitter mode
    TX_POWERUP;                     // Power up
    
    mirf_CSN_lo;                    // Pull down chip select
    1b2c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( FLUSH_TX );     // Write cmd to flush tx fifo
    1b2e:	81 ee       	ldi	r24, 0xE1	; 225
    1b30:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    mirf_CSN_hi;                    // Pull up chip select
    1b34:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CSN_lo;                    // Pull down chip select
    1b36:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( W_TX_PAYLOAD ); // Write cmd to write payload
    1b38:	80 ea       	ldi	r24, 0xA0	; 160
    1b3a:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    SPI_Write_Block(value,len);   // Write payload
    1b3e:	c8 01       	movw	r24, r16
    1b40:	69 81       	ldd	r22, Y+1	; 0x01
    1b42:	0e 94 18 0c 	call	0x1830	; 0x1830 <SPI_Write_Block>
    mirf_CSN_hi;                    // Pull up chip select
    1b46:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CE_hi;                     // Start transmission
    1b48:	2c 9a       	sbi	0x05, 4	; 5
}
    1b4a:	0f 90       	pop	r0
    1b4c:	cf 91       	pop	r28
    1b4e:	df 91       	pop	r29
    1b50:	1f 91       	pop	r17
    1b52:	0f 91       	pop	r16
    1b54:	08 95       	ret

00001b56 <writeAckPayload>:

void writeAckPayload(unsigned char *data, unsigned char size) {
    1b56:	ef 92       	push	r14
    1b58:	ff 92       	push	r15
    1b5a:	0f 93       	push	r16
    1b5c:	1f 93       	push	r17
    1b5e:	df 93       	push	r29
    1b60:	cf 93       	push	r28
    1b62:	0f 92       	push	r0
    1b64:	cd b7       	in	r28, 0x3d	; 61
    1b66:	de b7       	in	r29, 0x3e	; 62
    1b68:	18 2f       	mov	r17, r24
    1b6a:	06 2f       	mov	r16, r22
	return pWidth;
}

void flushTxFifo() {

    mirf_CSN_lo;
    1b6c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    1b6e:	81 ee       	ldi	r24, 0xE1	; 225
    1b70:	99 83       	std	Y+1, r25	; 0x01
    1b72:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    mirf_CSN_hi;
    1b76:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
    1b78:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
    1b7a:	88 ea       	ldi	r24, 0xA8	; 168
    1b7c:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>

	for(k=0; k<size; k++) {
    1b80:	99 81       	ldd	r25, Y+1	; 0x01
    1b82:	00 23       	and	r16, r16
    1b84:	61 f0       	breq	.+24     	; 0x1b9e <writeAckPayload+0x48>
    1b86:	61 2f       	mov	r22, r17
    1b88:	79 2f       	mov	r23, r25
    1b8a:	7b 01       	movw	r14, r22
		SPI_Write_Byte(data[k]);
    1b8c:	f7 01       	movw	r30, r14
    1b8e:	81 91       	ld	r24, Z+
    1b90:	7f 01       	movw	r14, r30
    1b92:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>

    mirf_CSN_lo;

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);

	for(k=0; k<size; k++) {
    1b96:	8e 2d       	mov	r24, r14
    1b98:	81 1b       	sub	r24, r17
    1b9a:	80 17       	cp	r24, r16
    1b9c:	b8 f3       	brcs	.-18     	; 0x1b8c <writeAckPayload+0x36>
		SPI_Write_Byte(data[k]);
	}	

    mirf_CSN_hi;
    1b9e:	28 9a       	sbi	0x05, 0	; 5


}
    1ba0:	0f 90       	pop	r0
    1ba2:	cf 91       	pop	r28
    1ba4:	df 91       	pop	r29
    1ba6:	1f 91       	pop	r17
    1ba8:	0f 91       	pop	r16
    1baa:	ff 90       	pop	r15
    1bac:	ef 90       	pop	r14
    1bae:	08 95       	ret

00001bb0 <readPayloadWidthFromTopFifo>:

uint8_t readPayloadWidthFromTopFifo() {
	uint8_t pWidth = 0;

    mirf_CSN_lo;
    1bb0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_R_RX_PL_WID);
    1bb2:	80 e6       	ldi	r24, 0x60	; 96
    1bb4:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
	pWidth = SPI_Write_Byte(NOP); 	// not specified in the datasheet but the "NRF_R_RX_PL_WID" has a parameter,
    1bb8:	8f ef       	ldi	r24, 0xFF	; 255
    1bba:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
									// we need to send a NOP to receive the actual payload size
    mirf_CSN_hi;
    1bbe:	28 9a       	sbi	0x05, 0	; 5
	
	return pWidth;
}
    1bc0:	08 95       	ret

00001bc2 <readPayloadWidthFromPipe0>:

uint8_t readPayloadWidthFromPipe0() {
    1bc2:	df 93       	push	r29
    1bc4:	cf 93       	push	r28
    1bc6:	0f 92       	push	r0
    1bc8:	cd b7       	in	r28, 0x3d	; 61
    1bca:	de b7       	in	r29, 0x3e	; 62
	uint8_t pWidth = 0;
    1bcc:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
    1bce:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    1bd0:	81 e1       	ldi	r24, 0x11	; 17
    1bd2:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    1bd6:	be 01       	movw	r22, r28
    1bd8:	6f 5f       	subi	r22, 0xFF	; 255
    1bda:	7f 4f       	sbci	r23, 0xFF	; 255
    1bdc:	cb 01       	movw	r24, r22
    1bde:	41 e0       	ldi	r20, 0x01	; 1
    1be0:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    1be4:	28 9a       	sbi	0x05, 0	; 5
	uint8_t pWidth = 0;

	mirf_read_register(RX_PW_P0, &pWidth, 1);
	
	return pWidth;
}
    1be6:	89 81       	ldd	r24, Y+1	; 0x01
    1be8:	0f 90       	pop	r0
    1bea:	cf 91       	pop	r28
    1bec:	df 91       	pop	r29
    1bee:	08 95       	ret

00001bf0 <flushTxFifo>:

void flushTxFifo() {

    mirf_CSN_lo;
    1bf0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    1bf2:	81 ee       	ldi	r24, 0xE1	; 225
    1bf4:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    mirf_CSN_hi;
    1bf8:	28 9a       	sbi	0x05, 0	; 5

}
    1bfa:	08 95       	ret

00001bfc <handleRFCommands>:

void handleRFCommands() {
    1bfc:	ff 92       	push	r15
    1bfe:	0f 93       	push	r16
    1c00:	1f 93       	push	r17
    1c02:	df 93       	push	r29
    1c04:	cf 93       	push	r28
    1c06:	0f 92       	push	r0
    1c08:	cd b7       	in	r28, 0x3d	; 61
    1c0a:	de b7       	in	r29, 0x3e	; 62
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
    1c0c:	80 91 c0 04 	lds	r24, 0x04C0
    1c10:	88 23       	and	r24, r24
    1c12:	39 f0       	breq	.+14     	; 0x1c22 <handleRFCommands+0x26>

		writeAckPayload(ackPayload, 16);

	}

}
    1c14:	0f 90       	pop	r0
    1c16:	cf 91       	pop	r28
    1c18:	df 91       	pop	r29
    1c1a:	1f 91       	pop	r17
    1c1c:	0f 91       	pop	r16
    1c1e:	ff 90       	pop	r15
    1c20:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    1c22:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
    1c24:	8f ef       	ldi	r24, 0xFF	; 255
    1c26:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
    1c2a:	28 9a       	sbi	0x05, 0	; 5

	unsigned int i=0;
	//uint8_t pWidth = 0;
	//uint8_t pWidthP0 = 0;

	if(mirf_data_ready()) {
    1c2c:	86 ff       	sbrs	r24, 6
    1c2e:	f2 cf       	rjmp	.-28     	; 0x1c14 <handleRFCommands+0x18>
		//if(spiCommError) {
		//	usart0Transmit(0xFE,1);
		//	return;
		//}

		rfFlags |= 0x02;
    1c30:	80 91 15 03 	lds	r24, 0x0315
    1c34:	82 60       	ori	r24, 0x02	; 2
    1c36:	80 93 15 03 	sts	0x0315, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1c3a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1c3c:	87 e2       	ldi	r24, 0x27	; 39
    1c3e:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1c42:	80 e7       	ldi	r24, 0x70	; 112
    1c44:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    mirf_CSN_hi;
    1c48:	28 9a       	sbi	0x05, 0	; 5

}

uint8_t rx_fifo_is_empty() {
	
	uint8_t fifo_status = 0;
    1c4a:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
    1c4c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    1c4e:	87 e1       	ldi	r24, 0x17	; 23
    1c50:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    1c54:	be 01       	movw	r22, r28
    1c56:	6f 5f       	subi	r22, 0xFF	; 255
    1c58:	7f 4f       	sbci	r23, 0xFF	; 255
    1c5a:	cb 01       	movw	r24, r22
    1c5c:	41 e0       	ldi	r20, 0x01	; 1
    1c5e:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    1c62:	28 9a       	sbi	0x05, 0	; 5
	
	uint8_t fifo_status = 0;

	mirf_read_register(FIFO_STATUS, &fifo_status, 1);
	
	return (uint8_t)(fifo_status&0x01);
    1c64:	89 81       	ldd	r24, Y+1	; 0x01
		// aren't present in the fifo with consequent wrong data read and wrong behavior of the robot.
		// To avoid this situtation we add this check before actually reading from the fifo to be 
		// sure there are correct data to be read.
		// We don't know why the IRQ for data reception is raised, maybe is not correctly reset sometimes
		// or it is raised when it shouldn't...
		if(rx_fifo_is_empty()) {
    1c66:	80 fd       	sbrc	r24, 0
    1c68:	d5 cf       	rjmp	.-86     	; 0x1c14 <handleRFCommands+0x18>
}

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    mirf_CSN_lo;                               		// Pull down chip select
    1c6a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    1c6c:	81 e6       	ldi	r24, 0x61	; 97
    1c6e:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    1c72:	85 e7       	ldi	r24, 0x75	; 117
    1c74:	95 e0       	ldi	r25, 0x05	; 5
    1c76:	bc 01       	movw	r22, r24
    1c78:	4d e0       	ldi	r20, 0x0D	; 13
    1c7a:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
    1c7e:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1c80:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1c82:	87 e2       	ldi	r24, 0x27	; 39
    1c84:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1c88:	80 e4       	ldi	r24, 0x40	; 64
    1c8a:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    mirf_CSN_hi;
    1c8e:	28 9a       	sbi	0x05, 0	; 5
	return (uint8_t)(fifo_status&0x01);
}

void flush_rx_fifo() {

    mirf_CSN_lo;
    1c90:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
    1c92:	82 ee       	ldi	r24, 0xE2	; 226
    1c94:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    mirf_CSN_hi;
    1c98:	28 9a       	sbi	0x05, 0	; 5

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    1c9a:	40 91 75 05 	lds	r20, 0x0575
    1c9e:	24 2f       	mov	r18, r20
    1ca0:	44 23       	and	r20, r20
    1ca2:	09 f0       	breq	.+2      	; 0x1ca6 <handleRFCommands+0xaa>
    1ca4:	29 c1       	rjmp	.+594    	; 0x1ef8 <handleRFCommands+0x2fc>
    1ca6:	50 91 76 05 	lds	r21, 0x0576
    1caa:	e5 2f       	mov	r30, r21
    1cac:	55 23       	and	r21, r21
    1cae:	09 f4       	brne	.+2      	; 0x1cb2 <handleRFCommands+0xb6>
    1cb0:	10 c2       	rjmp	.+1056   	; 0x20d2 <handleRFCommands+0x4d6>

			sleep(60);
    1cb2:	00 91 77 05 	lds	r16, 0x0577

		}

		if(calibrateOdomFlag==0) { 
    1cb6:	80 91 c7 04 	lds	r24, 0x04C7
    1cba:	88 23       	and	r24, r24
    1cbc:	41 f5       	brne	.+80     	; 0x1d0e <handleRFCommands+0x112>
			speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    1cbe:	70 91 79 05 	lds	r23, 0x0579
    1cc2:	27 2f       	mov	r18, r23
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	2f 77       	andi	r18, 0x7F	; 127
    1cc8:	30 70       	andi	r19, 0x00	; 0
    1cca:	30 93 12 03 	sts	0x0312, r19
    1cce:	20 93 11 03 	sts	0x0311, r18
			speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
    1cd2:	60 91 7a 05 	lds	r22, 0x057A
    1cd6:	86 2f       	mov	r24, r22
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	8f 77       	andi	r24, 0x7F	; 127
    1cdc:	90 70       	andi	r25, 0x00	; 0
    1cde:	90 93 10 03 	sts	0x0310, r25
    1ce2:	80 93 0f 03 	sts	0x030F, r24
										// in the same range of the measured speed that is 0..800.
										// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
										// this means that the range is more or less 0..400.


			if((rfData[4]&0x80)==0x80) {			// motor right forward
    1ce6:	77 fd       	sbrc	r23, 7
    1ce8:	03 c0       	rjmp	.+6      	; 0x1cf0 <handleRFCommands+0xf4>
				pwm_right_desired = speedr; 		// speed received (0..127) is expressed in 1/5 of mm/s (0..635 mm/s)
			} else {								// backward
				pwm_right_desired = -(speedr);
    1cea:	30 95       	com	r19
    1cec:	21 95       	neg	r18
    1cee:	3f 4f       	sbci	r19, 0xFF	; 255
    1cf0:	30 93 f8 02 	sts	0x02F8, r19
    1cf4:	20 93 f7 02 	sts	0x02F7, r18
			}

			if((rfData[5]&0x80)==0x80) {			// motor left forward
    1cf8:	67 fd       	sbrc	r22, 7
    1cfa:	03 c0       	rjmp	.+6      	; 0x1d02 <handleRFCommands+0x106>
				pwm_left_desired = speedl;
			} else {								// backward
				pwm_left_desired = -(speedl);
    1cfc:	90 95       	com	r25
    1cfe:	81 95       	neg	r24
    1d00:	9f 4f       	sbci	r25, 0xFF	; 255
    1d02:	90 93 fa 02 	sts	0x02FA, r25
    1d06:	80 93 f9 02 	sts	0x02F9, r24
    1d0a:	24 2f       	mov	r18, r20
    1d0c:	e5 2f       	mov	r30, r21

		}


		for(i=0; i<3; i++) {
			dataLED[i]=rfData[i]&0xFF;
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	30 93 6e 05 	sts	0x056E, r19
    1d14:	20 93 6d 05 	sts	0x056D, r18
    1d18:	f0 e0       	ldi	r31, 0x00	; 0
    1d1a:	f0 93 70 05 	sts	0x0570, r31
    1d1e:	e0 93 6f 05 	sts	0x056F, r30
    1d22:	10 e0       	ldi	r17, 0x00	; 0
    1d24:	10 93 72 05 	sts	0x0572, r17
    1d28:	00 93 71 05 	sts	0x0571, r16
		}
		pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
    1d2c:	92 2f       	mov	r25, r18
    1d2e:	88 27       	eor	r24, r24
    1d30:	82 1b       	sub	r24, r18
    1d32:	93 0b       	sbc	r25, r19
    1d34:	24 e6       	ldi	r18, 0x64	; 100
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	b9 01       	movw	r22, r18
    1d3a:	0e 94 59 42 	call	0x84b2	; 0x84b2 <__udivmodhi4>
    1d3e:	f6 2e       	mov	r15, r22
    1d40:	f0 94       	com	r15
    1d42:	f0 92 0c 02 	sts	0x020C, r15
		pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
    1d46:	5e 2f       	mov	r21, r30
    1d48:	44 27       	eor	r20, r20
    1d4a:	4e 1b       	sub	r20, r30
    1d4c:	5f 0b       	sbc	r21, r31
    1d4e:	ca 01       	movw	r24, r20
    1d50:	b9 01       	movw	r22, r18
    1d52:	0e 94 59 42 	call	0x84b2	; 0x84b2 <__udivmodhi4>
    1d56:	60 95       	com	r22
    1d58:	60 93 0e 02 	sts	0x020E, r22
		pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
    1d5c:	50 2f       	mov	r21, r16
    1d5e:	44 27       	eor	r20, r20
    1d60:	40 1b       	sub	r20, r16
    1d62:	51 0b       	sbc	r21, r17
    1d64:	ca 01       	movw	r24, r20
    1d66:	b9 01       	movw	r22, r18
    1d68:	0e 94 59 42 	call	0x84b2	; 0x84b2 <__udivmodhi4>
    1d6c:	60 95       	com	r22
    1d6e:	60 93 0d 02 	sts	0x020D, r22
		updateRedLed(pwm_red);
    1d72:	8f 2d       	mov	r24, r15
    1d74:	0e 94 2b 37 	call	0x6e56	; 0x6e56 <updateRedLed>
		updateGreenLed(pwm_green);
    1d78:	80 91 0d 02 	lds	r24, 0x020D
    1d7c:	0e 94 3f 37 	call	0x6e7e	; 0x6e7e <updateGreenLed>
		updateBlueLed(pwm_blue);
    1d80:	80 91 0e 02 	lds	r24, 0x020E
    1d84:	0e 94 53 37 	call	0x6ea6	; 0x6ea6 <updateBlueLed>


		if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
    1d88:	80 91 78 05 	lds	r24, 0x0578
    1d8c:	80 ff       	sbrs	r24, 0
    1d8e:	e6 c0       	rjmp	.+460    	; 0x1f5c <handleRFCommands+0x360>
			LED_IR1_LOW;
    1d90:	44 98       	cbi	0x08, 4	; 8
		} else {
			LED_IR1_HIGH;
		}

		if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
    1d92:	81 ff       	sbrs	r24, 1
    1d94:	e1 c0       	rjmp	.+450    	; 0x1f58 <handleRFCommands+0x35c>
			LED_IR2_LOW;
    1d96:	45 98       	cbi	0x08, 5	; 8
		} else {
			LED_IR2_HIGH;
		}

		if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
    1d98:	98 2f       	mov	r25, r24
    1d9a:	82 ff       	sbrs	r24, 2
    1d9c:	da c0       	rjmp	.+436    	; 0x1f52 <handleRFCommands+0x356>
			irEnabled = 1;
    1d9e:	21 e0       	ldi	r18, 0x01	; 1
    1da0:	20 93 12 02 	sts	0x0212, r18
		} else {
			irEnabled = 0;
		}

		if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
    1da4:	84 fd       	sbrc	r24, 4
    1da6:	5a c2       	rjmp	.+1204   	; 0x225c <__stack+0x5d>
			calibrateSensors();
			resetOdometry();
		}

		if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
    1da8:	86 ff       	sbrs	r24, 6
    1daa:	d0 c0       	rjmp	.+416    	; 0x1f4c <handleRFCommands+0x350>
			obstacleAvoidanceEnabled = 1;
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	80 93 68 04 	sts	0x0468, r24
		} else {
			obstacleAvoidanceEnabled = 0;
		}

		if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
    1db2:	97 fd       	sbrc	r25, 7
    1db4:	7e c2       	rjmp	.+1276   	; 0x22b2 <__stack+0xb3>
			cliffAvoidanceEnabled = 1;
		} else {
			cliffAvoidanceEnabled = 0;
    1db6:	10 92 69 04 	sts	0x0469, r1
		}

		// handle small green leds
		#ifdef HW_REV_3_1			

			if(bit_is_set(rfData[6], 0) ) {
    1dba:	80 91 7b 05 	lds	r24, 0x057B
    1dbe:	80 ff       	sbrs	r24, 0
    1dc0:	bf c0       	rjmp	.+382    	; 0x1f40 <handleRFCommands+0x344>
				GREEN_LED0_ON;
    1dc2:	80 91 0b 01 	lds	r24, 0x010B
    1dc6:	8e 7f       	andi	r24, 0xFE	; 254
    1dc8:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED0_OFF;
			}
				
			if(bit_is_set(rfData[6], 1) ) {
    1dcc:	80 91 7b 05 	lds	r24, 0x057B
    1dd0:	81 ff       	sbrs	r24, 1
    1dd2:	b0 c0       	rjmp	.+352    	; 0x1f34 <handleRFCommands+0x338>
				GREEN_LED1_ON;
    1dd4:	80 91 0b 01 	lds	r24, 0x010B
    1dd8:	8d 7f       	andi	r24, 0xFD	; 253
    1dda:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED1_OFF;
			}
				
			if(bit_is_set(rfData[6], 2) ) {
    1dde:	80 91 7b 05 	lds	r24, 0x057B
    1de2:	82 ff       	sbrs	r24, 2
    1de4:	a1 c0       	rjmp	.+322    	; 0x1f28 <handleRFCommands+0x32c>
				GREEN_LED2_ON;
    1de6:	80 91 0b 01 	lds	r24, 0x010B
    1dea:	8b 7f       	andi	r24, 0xFB	; 251
    1dec:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED2_OFF;
			}												

			if(bit_is_set(rfData[6], 3) ) {
    1df0:	80 91 7b 05 	lds	r24, 0x057B
    1df4:	83 ff       	sbrs	r24, 3
    1df6:	96 c0       	rjmp	.+300    	; 0x1f24 <handleRFCommands+0x328>
				GREEN_LED3_ON;
    1df8:	a3 98       	cbi	0x14, 3	; 20
			} else {
				GREEN_LED3_OFF;
			}

			if(bit_is_set(rfData[6], 4) ) {
    1dfa:	80 91 7b 05 	lds	r24, 0x057B
    1dfe:	84 ff       	sbrs	r24, 4
    1e00:	8b c0       	rjmp	.+278    	; 0x1f18 <handleRFCommands+0x31c>
				GREEN_LED4_ON;
    1e02:	80 91 0b 01 	lds	r24, 0x010B
    1e06:	8f 7e       	andi	r24, 0xEF	; 239
    1e08:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED4_OFF;
			}

			if(bit_is_set(rfData[6], 5) ) {
    1e0c:	80 91 7b 05 	lds	r24, 0x057B
    1e10:	85 ff       	sbrs	r24, 5
    1e12:	7c c0       	rjmp	.+248    	; 0x1f0c <handleRFCommands+0x310>
				GREEN_LED5_ON;
    1e14:	80 91 0b 01 	lds	r24, 0x010B
    1e18:	8f 7d       	andi	r24, 0xDF	; 223
    1e1a:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED5_OFF;
			}

			if(bit_is_set(rfData[6], 6) ) {
    1e1e:	80 91 7b 05 	lds	r24, 0x057B
    1e22:	86 ff       	sbrs	r24, 6
    1e24:	6d c0       	rjmp	.+218    	; 0x1f00 <handleRFCommands+0x304>
				GREEN_LED6_ON;
    1e26:	80 91 0b 01 	lds	r24, 0x010B
    1e2a:	8f 7b       	andi	r24, 0xBF	; 191
    1e2c:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED6_OFF;
			}

			if(bit_is_set(rfData[6], 7) ) {
    1e30:	80 91 7b 05 	lds	r24, 0x057B
    1e34:	87 fd       	sbrc	r24, 7
    1e36:	37 c2       	rjmp	.+1134   	; 0x22a6 <__stack+0xa7>
				GREEN_LED7_ON;
			} else {
				GREEN_LED7_OFF;
    1e38:	80 91 0b 01 	lds	r24, 0x010B
    1e3c:	80 68       	ori	r24, 0x80	; 128
    1e3e:	80 93 0b 01 	sts	0x010B, r24
			}

		#endif
		
		if(currentSelector == 8) {
    1e42:	80 91 48 04 	lds	r24, 0x0448
    1e46:	88 30       	cpi	r24, 0x08	; 8
    1e48:	09 f4       	brne	.+2      	; 0x1e4c <handleRFCommands+0x250>
    1e4a:	10 c2       	rjmp	.+1056   	; 0x226c <__stack+0x6d>
		}

		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;
    1e4c:	80 91 0b 02 	lds	r24, 0x020B
    1e50:	80 93 cd 04 	sts	0x04CD, r24

		switch(packetId) {
    1e54:	85 30       	cpi	r24, 0x05	; 5
    1e56:	09 f4       	brne	.+2      	; 0x1e5a <handleRFCommands+0x25e>
    1e58:	30 c2       	rjmp	.+1120   	; 0x22ba <__stack+0xbb>
    1e5a:	86 30       	cpi	r24, 0x06	; 6
    1e5c:	08 f0       	brcs	.+2      	; 0x1e60 <handleRFCommands+0x264>
    1e5e:	80 c0       	rjmp	.+256    	; 0x1f60 <handleRFCommands+0x364>
    1e60:	83 30       	cpi	r24, 0x03	; 3
    1e62:	09 f4       	brne	.+2      	; 0x1e66 <handleRFCommands+0x26a>
    1e64:	95 c1       	rjmp	.+810    	; 0x2190 <handleRFCommands+0x594>
    1e66:	84 30       	cpi	r24, 0x04	; 4
    1e68:	09 f0       	breq	.+2      	; 0x1e6c <handleRFCommands+0x270>
    1e6a:	e2 c0       	rjmp	.+452    	; 0x2030 <handleRFCommands+0x434>
				#endif
				packetId = 4;
				break;

			case 4:
				ackPayload[1] = proximityResult[4]&0xFF;
    1e6c:	90 91 5f 02 	lds	r25, 0x025F
    1e70:	80 91 60 02 	lds	r24, 0x0260
    1e74:	90 93 ce 04 	sts	0x04CE, r25
				ackPayload[2] = proximityResult[4]>>8;
    1e78:	80 93 cf 04 	sts	0x04CF, r24
				ackPayload[3] = proximityResult[8]&0xFF;
    1e7c:	90 91 67 02 	lds	r25, 0x0267
    1e80:	80 91 68 02 	lds	r24, 0x0268
    1e84:	90 93 d0 04 	sts	0x04D0, r25
				ackPayload[4] = proximityResult[8]>>8;
    1e88:	80 93 d1 04 	sts	0x04D1, r24
				ackPayload[5] = proximityResult[9]&0xFF;
    1e8c:	90 91 69 02 	lds	r25, 0x0269
    1e90:	80 91 6a 02 	lds	r24, 0x026A
    1e94:	90 93 d2 04 	sts	0x04D2, r25
				ackPayload[6] = proximityResult[9]>>8;
    1e98:	80 93 d3 04 	sts	0x04D3, r24
				ackPayload[7] = proximityResult[10]&0xFF;
    1e9c:	90 91 6b 02 	lds	r25, 0x026B
    1ea0:	80 91 6c 02 	lds	r24, 0x026C
    1ea4:	90 93 d4 04 	sts	0x04D4, r25
				ackPayload[8] = proximityResult[10]>>8;
    1ea8:	80 93 d5 04 	sts	0x04D5, r24
				ackPayload[9] = proximityResult[11]&0xFF;
    1eac:	90 91 6d 02 	lds	r25, 0x026D
    1eb0:	80 91 6e 02 	lds	r24, 0x026E
    1eb4:	90 93 d6 04 	sts	0x04D6, r25
				ackPayload[10] = proximityResult[11]>>8;
    1eb8:	80 93 d7 04 	sts	0x04D7, r24
				ackPayload[11] = accX&0xFF;
    1ebc:	90 91 28 04 	lds	r25, 0x0428
    1ec0:	80 91 29 04 	lds	r24, 0x0429
    1ec4:	90 93 d8 04 	sts	0x04D8, r25
				ackPayload[12] = accX>>8;
    1ec8:	80 93 d9 04 	sts	0x04D9, r24
				ackPayload[13] = accY&0xFF;
    1ecc:	90 91 2a 04 	lds	r25, 0x042A
    1ed0:	80 91 2b 04 	lds	r24, 0x042B
    1ed4:	90 93 da 04 	sts	0x04DA, r25
				ackPayload[14] = accY>>8;
    1ed8:	80 93 db 04 	sts	0x04DB, r24
				ackPayload[15] = irCommand;
    1edc:	80 91 23 04 	lds	r24, 0x0423
    1ee0:	80 93 dc 04 	sts	0x04DC, r24
				packetId = 5;
    1ee4:	85 e0       	ldi	r24, 0x05	; 5
    1ee6:	80 93 0b 02 	sts	0x020B, r24
				break;
    1eea:	a2 c0       	rjmp	.+324    	; 0x2030 <handleRFCommands+0x434>
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {

			sleep(60);
    1eec:	8c e3       	ldi	r24, 0x3C	; 60
    1eee:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <sleep>
    1ef2:	40 91 75 05 	lds	r20, 0x0575
    1ef6:	24 2f       	mov	r18, r20
    1ef8:	50 91 76 05 	lds	r21, 0x0576
    1efc:	e5 2f       	mov	r30, r21
    1efe:	d9 ce       	rjmp	.-590    	; 0x1cb2 <handleRFCommands+0xb6>
			}

			if(bit_is_set(rfData[6], 6) ) {
				GREEN_LED6_ON;
			} else {
				GREEN_LED6_OFF;
    1f00:	80 91 0b 01 	lds	r24, 0x010B
    1f04:	80 64       	ori	r24, 0x40	; 64
    1f06:	80 93 0b 01 	sts	0x010B, r24
    1f0a:	92 cf       	rjmp	.-220    	; 0x1e30 <handleRFCommands+0x234>
			}

			if(bit_is_set(rfData[6], 5) ) {
				GREEN_LED5_ON;
			} else {
				GREEN_LED5_OFF;
    1f0c:	80 91 0b 01 	lds	r24, 0x010B
    1f10:	80 62       	ori	r24, 0x20	; 32
    1f12:	80 93 0b 01 	sts	0x010B, r24
    1f16:	83 cf       	rjmp	.-250    	; 0x1e1e <handleRFCommands+0x222>
			}

			if(bit_is_set(rfData[6], 4) ) {
				GREEN_LED4_ON;
			} else {
				GREEN_LED4_OFF;
    1f18:	80 91 0b 01 	lds	r24, 0x010B
    1f1c:	80 61       	ori	r24, 0x10	; 16
    1f1e:	80 93 0b 01 	sts	0x010B, r24
    1f22:	74 cf       	rjmp	.-280    	; 0x1e0c <handleRFCommands+0x210>
			}												

			if(bit_is_set(rfData[6], 3) ) {
				GREEN_LED3_ON;
			} else {
				GREEN_LED3_OFF;
    1f24:	a3 9a       	sbi	0x14, 3	; 20
    1f26:	69 cf       	rjmp	.-302    	; 0x1dfa <handleRFCommands+0x1fe>
			}
				
			if(bit_is_set(rfData[6], 2) ) {
				GREEN_LED2_ON;
			} else {
				GREEN_LED2_OFF;
    1f28:	80 91 0b 01 	lds	r24, 0x010B
    1f2c:	84 60       	ori	r24, 0x04	; 4
    1f2e:	80 93 0b 01 	sts	0x010B, r24
    1f32:	5e cf       	rjmp	.-324    	; 0x1df0 <handleRFCommands+0x1f4>
			}
				
			if(bit_is_set(rfData[6], 1) ) {
				GREEN_LED1_ON;
			} else {
				GREEN_LED1_OFF;
    1f34:	80 91 0b 01 	lds	r24, 0x010B
    1f38:	82 60       	ori	r24, 0x02	; 2
    1f3a:	80 93 0b 01 	sts	0x010B, r24
    1f3e:	4f cf       	rjmp	.-354    	; 0x1dde <handleRFCommands+0x1e2>
		#ifdef HW_REV_3_1			

			if(bit_is_set(rfData[6], 0) ) {
				GREEN_LED0_ON;
			} else {
				GREEN_LED0_OFF;
    1f40:	80 91 0b 01 	lds	r24, 0x010B
    1f44:	81 60       	ori	r24, 0x01	; 1
    1f46:	80 93 0b 01 	sts	0x010B, r24
    1f4a:	40 cf       	rjmp	.-384    	; 0x1dcc <handleRFCommands+0x1d0>
		}

		if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
			obstacleAvoidanceEnabled = 1;
		} else {
			obstacleAvoidanceEnabled = 0;
    1f4c:	10 92 68 04 	sts	0x0468, r1
    1f50:	30 cf       	rjmp	.-416    	; 0x1db2 <handleRFCommands+0x1b6>
		}

		if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
			irEnabled = 1;
		} else {
			irEnabled = 0;
    1f52:	10 92 12 02 	sts	0x0212, r1
    1f56:	26 cf       	rjmp	.-436    	; 0x1da4 <handleRFCommands+0x1a8>
		}

		if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
			LED_IR2_LOW;
		} else {
			LED_IR2_HIGH;
    1f58:	45 9a       	sbi	0x08, 5	; 8
    1f5a:	1e cf       	rjmp	.-452    	; 0x1d98 <handleRFCommands+0x19c>


		if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
			LED_IR1_LOW;
		} else {
			LED_IR1_HIGH;
    1f5c:	44 9a       	sbi	0x08, 4	; 8
    1f5e:	19 cf       	rjmp	.-462    	; 0x1d92 <handleRFCommands+0x196>
		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;

		switch(packetId) {
    1f60:	86 30       	cpi	r24, 0x06	; 6
    1f62:	09 f4       	brne	.+2      	; 0x1f66 <handleRFCommands+0x36a>
    1f64:	c3 c0       	rjmp	.+390    	; 0x20ec <handleRFCommands+0x4f0>
    1f66:	87 30       	cpi	r24, 0x07	; 7
    1f68:	09 f0       	breq	.+2      	; 0x1f6c <handleRFCommands+0x370>
    1f6a:	62 c0       	rjmp	.+196    	; 0x2030 <handleRFCommands+0x434>
				packetId = 7;
				break;


			case 7:
				ackPayload[1] = ((signed long int)leftMotSteps)&0xFF;
    1f6c:	60 91 d3 02 	lds	r22, 0x02D3
    1f70:	70 91 d4 02 	lds	r23, 0x02D4
    1f74:	80 91 d5 02 	lds	r24, 0x02D5
    1f78:	90 91 d6 02 	lds	r25, 0x02D6
    1f7c:	0e 94 67 40 	call	0x80ce	; 0x80ce <__fixsfsi>
    1f80:	60 93 ce 04 	sts	0x04CE, r22
				ackPayload[2] = ((signed long int)leftMotSteps)>>8;
    1f84:	70 93 cf 04 	sts	0x04CF, r23
				ackPayload[3] = ((signed long int)leftMotSteps)>>16;
    1f88:	80 93 d0 04 	sts	0x04D0, r24
				ackPayload[4] = ((signed long int)leftMotSteps)>>24;
    1f8c:	90 93 d1 04 	sts	0x04D1, r25
				ackPayload[5] = ((signed long int)rightMotSteps)&0xFF;
    1f90:	60 91 cf 02 	lds	r22, 0x02CF
    1f94:	70 91 d0 02 	lds	r23, 0x02D0
    1f98:	80 91 d1 02 	lds	r24, 0x02D1
    1f9c:	90 91 d2 02 	lds	r25, 0x02D2
    1fa0:	0e 94 67 40 	call	0x80ce	; 0x80ce <__fixsfsi>
    1fa4:	60 93 d2 04 	sts	0x04D2, r22
				ackPayload[6] = ((signed long int)rightMotSteps)>>8;
    1fa8:	70 93 d3 04 	sts	0x04D3, r23
				ackPayload[7] = ((signed long int)rightMotSteps)>>16;
    1fac:	80 93 d4 04 	sts	0x04D4, r24
				ackPayload[8] = ((signed long int)rightMotSteps)>>24;
    1fb0:	90 93 d5 04 	sts	0x04D5, r25
				lastTheta = theta;
    1fb4:	60 91 6b 04 	lds	r22, 0x046B
    1fb8:	70 91 6c 04 	lds	r23, 0x046C
    1fbc:	80 91 6d 04 	lds	r24, 0x046D
    1fc0:	90 91 6e 04 	lds	r25, 0x046E
    1fc4:	60 93 6f 04 	sts	0x046F, r22
    1fc8:	70 93 70 04 	sts	0x0470, r23
    1fcc:	80 93 71 04 	sts	0x0471, r24
    1fd0:	90 93 72 04 	sts	0x0472, r25
				ackPayload[9] = ((signed int)(lastTheta*573.0))&0xFF;	// radians to degrees => 573 = 1800/PI
    1fd4:	20 e0       	ldi	r18, 0x00	; 0
    1fd6:	30 e4       	ldi	r19, 0x40	; 64
    1fd8:	4f e0       	ldi	r20, 0x0F	; 15
    1fda:	54 e4       	ldi	r21, 0x44	; 68
    1fdc:	0e 94 af 41 	call	0x835e	; 0x835e <__mulsf3>
    1fe0:	0e 94 67 40 	call	0x80ce	; 0x80ce <__fixsfsi>
    1fe4:	26 2f       	mov	r18, r22
    1fe6:	20 93 d6 04 	sts	0x04D6, r18
				ackPayload[10] = ((signed int)(lastTheta*573.0))>>8;				
    1fea:	70 93 d7 04 	sts	0x04D7, r23
				ackPayload[11] = ((unsigned int)xPos)&0xFF;
    1fee:	60 91 73 04 	lds	r22, 0x0473
    1ff2:	70 91 74 04 	lds	r23, 0x0474
    1ff6:	80 91 75 04 	lds	r24, 0x0475
    1ffa:	90 91 76 04 	lds	r25, 0x0476
    1ffe:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <__fixunssfsi>
    2002:	60 93 d8 04 	sts	0x04D8, r22
				ackPayload[12] = ((unsigned int)xPos)>>8;
    2006:	70 93 d9 04 	sts	0x04D9, r23
				ackPayload[13] = ((unsigned int)yPos)&0xFF;
    200a:	60 91 77 04 	lds	r22, 0x0477
    200e:	70 91 78 04 	lds	r23, 0x0478
    2012:	80 91 79 04 	lds	r24, 0x0479
    2016:	90 91 7a 04 	lds	r25, 0x047A
    201a:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <__fixunssfsi>
    201e:	60 93 da 04 	sts	0x04DA, r22
				ackPayload[14] = ((unsigned int)yPos)>>8;
    2022:	70 93 db 04 	sts	0x04DB, r23
				//ackPayload[10] = ((unsigned int)(thetaOld*573.0))>>8;
				//ackPayload[11] = ((unsigned int)xPosOld)&0xFF;
				//ackPayload[12] = ((unsigned int)xPosOld)>>8;
				//ackPayload[13] = ((unsigned int)yPosOld)&0xFF;
				//ackPayload[14] = ((unsigned int)yPosOld)>>8;
				ackPayload[15] = 0;
    2026:	10 92 dc 04 	sts	0x04DC, r1
				packetId = 3;
    202a:	83 e0       	ldi	r24, 0x03	; 3
    202c:	80 93 0b 02 	sts	0x020B, r24
	return pWidth;
}

void flushTxFifo() {

    mirf_CSN_lo;
    2030:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    2032:	81 ee       	ldi	r24, 0xE1	; 225
    2034:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    mirf_CSN_hi;
    2038:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
    203a:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
    203c:	88 ea       	ldi	r24, 0xA8	; 168
    203e:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>

	for(k=0; k<size; k++) {
		SPI_Write_Byte(data[k]);
    2042:	80 91 cd 04 	lds	r24, 0x04CD
    2046:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    204a:	80 91 ce 04 	lds	r24, 0x04CE
    204e:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    2052:	80 91 cf 04 	lds	r24, 0x04CF
    2056:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    205a:	80 91 d0 04 	lds	r24, 0x04D0
    205e:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    2062:	80 91 d1 04 	lds	r24, 0x04D1
    2066:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    206a:	80 91 d2 04 	lds	r24, 0x04D2
    206e:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    2072:	80 91 d3 04 	lds	r24, 0x04D3
    2076:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    207a:	80 91 d4 04 	lds	r24, 0x04D4
    207e:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    2082:	80 91 d5 04 	lds	r24, 0x04D5
    2086:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    208a:	80 91 d6 04 	lds	r24, 0x04D6
    208e:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    2092:	80 91 d7 04 	lds	r24, 0x04D7
    2096:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    209a:	80 91 d8 04 	lds	r24, 0x04D8
    209e:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    20a2:	80 91 d9 04 	lds	r24, 0x04D9
    20a6:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    20aa:	80 91 da 04 	lds	r24, 0x04DA
    20ae:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    20b2:	80 91 db 04 	lds	r24, 0x04DB
    20b6:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
    20ba:	80 91 dc 04 	lds	r24, 0x04DC
    20be:	0e 94 38 0c 	call	0x1870	; 0x1870 <SPI_Write_Byte>
	}	

    mirf_CSN_hi;
    20c2:	28 9a       	sbi	0x05, 0	; 5

		writeAckPayload(ackPayload, 16);

	}

}
    20c4:	0f 90       	pop	r0
    20c6:	cf 91       	pop	r28
    20c8:	df 91       	pop	r29
    20ca:	1f 91       	pop	r17
    20cc:	0f 91       	pop	r16
    20ce:	ff 90       	pop	r15
    20d0:	08 95       	ret

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    20d2:	00 91 77 05 	lds	r16, 0x0577
    20d6:	00 23       	and	r16, r16
    20d8:	09 f0       	breq	.+2      	; 0x20dc <handleRFCommands+0x4e0>
    20da:	4b c1       	rjmp	.+662    	; 0x2372 <__stack+0x173>
    20dc:	80 91 78 05 	lds	r24, 0x0578
    20e0:	88 30       	cpi	r24, 0x08	; 8
    20e2:	09 f4       	brne	.+2      	; 0x20e6 <handleRFCommands+0x4ea>
    20e4:	48 c1       	rjmp	.+656    	; 0x2376 <__stack+0x177>
    20e6:	e0 2f       	mov	r30, r16
    20e8:	20 2f       	mov	r18, r16
    20ea:	e5 cd       	rjmp	.-1078   	; 0x1cb6 <handleRFCommands+0xba>
				ackPayload[15] = currentSelector;
				packetId = 6;
				break;

			case 6:
				ackPayload[1] = proximityValue[8]&0xFF;
    20ec:	80 91 37 02 	lds	r24, 0x0237
    20f0:	90 91 38 02 	lds	r25, 0x0238
    20f4:	80 93 ce 04 	sts	0x04CE, r24
				ackPayload[2] = proximityValue[8]>>8;
    20f8:	80 91 37 02 	lds	r24, 0x0237
    20fc:	90 91 38 02 	lds	r25, 0x0238
    2100:	90 93 cf 04 	sts	0x04CF, r25
				ackPayload[3] = proximityValue[16]&0xFF;
    2104:	80 91 47 02 	lds	r24, 0x0247
    2108:	90 91 48 02 	lds	r25, 0x0248
    210c:	80 93 d0 04 	sts	0x04D0, r24
				ackPayload[4] = proximityValue[16]>>8;
    2110:	80 91 47 02 	lds	r24, 0x0247
    2114:	90 91 48 02 	lds	r25, 0x0248
    2118:	90 93 d1 04 	sts	0x04D1, r25
				ackPayload[5] = proximityValue[18]&0xFF;
    211c:	80 91 4b 02 	lds	r24, 0x024B
    2120:	90 91 4c 02 	lds	r25, 0x024C
    2124:	80 93 d2 04 	sts	0x04D2, r24
				ackPayload[6] = proximityValue[18]>>8;
    2128:	80 91 4b 02 	lds	r24, 0x024B
    212c:	90 91 4c 02 	lds	r25, 0x024C
    2130:	90 93 d3 04 	sts	0x04D3, r25
				ackPayload[7] = proximityValue[20]&0xFF;
    2134:	80 91 4f 02 	lds	r24, 0x024F
    2138:	90 91 50 02 	lds	r25, 0x0250
    213c:	80 93 d4 04 	sts	0x04D4, r24
				ackPayload[8] = proximityValue[20]>>8;
    2140:	80 91 4f 02 	lds	r24, 0x024F
    2144:	90 91 50 02 	lds	r25, 0x0250
    2148:	90 93 d5 04 	sts	0x04D5, r25
				ackPayload[9] = proximityValue[22]&0xFF;
    214c:	80 91 53 02 	lds	r24, 0x0253
    2150:	90 91 54 02 	lds	r25, 0x0254
    2154:	80 93 d6 04 	sts	0x04D6, r24
				ackPayload[10] = proximityValue[22]>>8;
    2158:	80 91 53 02 	lds	r24, 0x0253
    215c:	90 91 54 02 	lds	r25, 0x0254
    2160:	90 93 d7 04 	sts	0x04D7, r25
				ackPayload[11] = accZ&0xFF;
    2164:	90 91 2c 04 	lds	r25, 0x042C
    2168:	80 91 2d 04 	lds	r24, 0x042D
    216c:	90 93 d8 04 	sts	0x04D8, r25
				ackPayload[12] = accZ>>8;	
    2170:	80 93 d9 04 	sts	0x04D9, r24
				ackPayload[13] = batteryLevel&0xFF;
    2174:	90 91 bb 02 	lds	r25, 0x02BB
    2178:	80 91 bc 02 	lds	r24, 0x02BC
    217c:	90 93 da 04 	sts	0x04DA, r25
				ackPayload[14] = batteryLevel>>8;
    2180:	80 93 db 04 	sts	0x04DB, r24
				ackPayload[15] = 0;
    2184:	10 92 dc 04 	sts	0x04DC, r1
				packetId = 7;
    2188:	87 e0       	ldi	r24, 0x07	; 7
    218a:	80 93 0b 02 	sts	0x020B, r24
				break;
    218e:	50 cf       	rjmp	.-352    	; 0x2030 <handleRFCommands+0x434>
		// write back the ack payload
		ackPayload[0] = packetId&0xFF;

		switch(packetId) {
			case 3:
				ackPayload[1] = proximityResult[0]&0xFF;
    2190:	90 91 57 02 	lds	r25, 0x0257
    2194:	80 91 58 02 	lds	r24, 0x0258
    2198:	90 93 ce 04 	sts	0x04CE, r25
				ackPayload[2] = proximityResult[0]>>8;
    219c:	80 93 cf 04 	sts	0x04CF, r24
				ackPayload[3] = proximityResult[1]&0xFF;
    21a0:	90 91 59 02 	lds	r25, 0x0259
    21a4:	80 91 5a 02 	lds	r24, 0x025A
    21a8:	90 93 d0 04 	sts	0x04D0, r25
				ackPayload[4] = proximityResult[1]>>8;
    21ac:	80 93 d1 04 	sts	0x04D1, r24
				ackPayload[5] = proximityResult[2]&0xFF;
    21b0:	90 91 5b 02 	lds	r25, 0x025B
    21b4:	80 91 5c 02 	lds	r24, 0x025C
    21b8:	90 93 d2 04 	sts	0x04D2, r25
				ackPayload[6] = proximityResult[2]>>8;
    21bc:	80 93 d3 04 	sts	0x04D3, r24
				ackPayload[7] = proximityResult[3]&0xFF;
    21c0:	90 91 5d 02 	lds	r25, 0x025D
    21c4:	80 91 5e 02 	lds	r24, 0x025E
    21c8:	90 93 d4 04 	sts	0x04D4, r25
				ackPayload[8] = proximityResult[3]>>8;
    21cc:	80 93 d5 04 	sts	0x04D5, r24
				ackPayload[9] = proximityResult[5]&0xFF;
    21d0:	90 91 61 02 	lds	r25, 0x0261
    21d4:	80 91 62 02 	lds	r24, 0x0262
    21d8:	90 93 d6 04 	sts	0x04D6, r25
				ackPayload[10] = proximityResult[5]>>8;
    21dc:	80 93 d7 04 	sts	0x04D7, r24
				ackPayload[11] = proximityResult[6]&0xFF;
    21e0:	90 91 63 02 	lds	r25, 0x0263
    21e4:	80 91 64 02 	lds	r24, 0x0264
    21e8:	90 93 d8 04 	sts	0x04D8, r25
				ackPayload[12] = proximityResult[6]>>8;
    21ec:	80 93 d9 04 	sts	0x04D9, r24
				ackPayload[13] = proximityResult[7]&0xFF;
    21f0:	90 91 65 02 	lds	r25, 0x0265
    21f4:	80 91 66 02 	lds	r24, 0x0266
    21f8:	90 93 da 04 	sts	0x04DA, r25
				ackPayload[14] = proximityResult[7]>>8;
    21fc:	80 93 db 04 	sts	0x04DB, r24
				#ifdef HW_REV_3_1
					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1) | (CHARGE_STAT << 2);
    2200:	30 91 03 01 	lds	r19, 0x0103
    2204:	80 91 03 01 	lds	r24, 0x0103
    2208:	20 91 03 01 	lds	r18, 0x0103
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	80 72       	andi	r24, 0x20	; 32
    2210:	90 70       	andi	r25, 0x00	; 0
    2212:	95 95       	asr	r25
    2214:	87 95       	ror	r24
    2216:	95 95       	asr	r25
    2218:	87 95       	ror	r24
    221a:	95 95       	asr	r25
    221c:	87 95       	ror	r24
    221e:	95 95       	asr	r25
    2220:	87 95       	ror	r24
    2222:	95 95       	asr	r25
    2224:	87 95       	ror	r24
    2226:	88 0f       	add	r24, r24
    2228:	99 1f       	adc	r25, r25
    222a:	22 1f       	adc	r18, r18
    222c:	22 27       	eor	r18, r18
    222e:	22 1f       	adc	r18, r18
    2230:	22 0f       	add	r18, r18
    2232:	22 0f       	add	r18, r18
    2234:	28 2b       	or	r18, r24
    2236:	83 2f       	mov	r24, r19
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	80 71       	andi	r24, 0x10	; 16
    223c:	90 70       	andi	r25, 0x00	; 0
    223e:	95 95       	asr	r25
    2240:	87 95       	ror	r24
    2242:	95 95       	asr	r25
    2244:	87 95       	ror	r24
    2246:	95 95       	asr	r25
    2248:	87 95       	ror	r24
    224a:	95 95       	asr	r25
    224c:	87 95       	ror	r24
    224e:	28 2b       	or	r18, r24
    2250:	20 93 dc 04 	sts	0x04DC, r18
				#else
					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1);
				#endif
				packetId = 4;
    2254:	84 e0       	ldi	r24, 0x04	; 4
    2256:	80 93 0b 02 	sts	0x020B, r24
				break;
    225a:	ea ce       	rjmp	.-556    	; 0x2030 <handleRFCommands+0x434>
		} else {
			irEnabled = 0;
		}

		if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
			calibrateSensors();
    225c:	0e 94 23 3a 	call	0x7446	; 0x7446 <calibrateSensors>
			resetOdometry();
    2260:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <resetOdometry>
    2264:	90 91 78 05 	lds	r25, 0x0578
    2268:	89 2f       	mov	r24, r25
    226a:	9e cd       	rjmp	.-1220   	; 0x1da8 <handleRFCommands+0x1ac>
			}

		#endif
		
		if(currentSelector == 8) {
			if(calibrateOdomFlag==0) {
    226c:	80 91 c7 04 	lds	r24, 0x04C7
    2270:	88 23       	and	r24, r24
    2272:	09 f0       	breq	.+2      	; 0x2276 <__stack+0x77>
    2274:	eb cd       	rjmp	.-1066   	; 0x1e4c <handleRFCommands+0x250>
				if((rfData[7]&0b00000001)==0b00000001) {
    2276:	80 91 7c 05 	lds	r24, 0x057C
    227a:	80 ff       	sbrs	r24, 0
    227c:	e7 cd       	rjmp	.-1074   	; 0x1e4c <handleRFCommands+0x250>
					calibrateSensors();
    227e:	0e 94 23 3a 	call	0x7446	; 0x7446 <calibrateSensors>
					proximityResult[8] = 1023;	// because the first time this value could be low after calibration
    2282:	8f ef       	ldi	r24, 0xFF	; 255
    2284:	93 e0       	ldi	r25, 0x03	; 3
    2286:	90 93 68 02 	sts	0x0268, r25
    228a:	80 93 67 02 	sts	0x0267, r24
					proximityResult[11] = 1023;	// and in that case a false black line will be detected
    228e:	90 93 6e 02 	sts	0x026E, r25
    2292:	80 93 6d 02 	sts	0x026D, r24
					calibState = 0;
    2296:	10 92 88 05 	sts	0x0588, r1
					calibVelIndex = 1;
    229a:	81 e0       	ldi	r24, 0x01	; 1
    229c:	80 93 ca 04 	sts	0x04CA, r24
					calibrateOdomFlag = 1;
    22a0:	80 93 c7 04 	sts	0x04C7, r24
    22a4:	d3 cd       	rjmp	.-1114   	; 0x1e4c <handleRFCommands+0x250>
			} else {
				GREEN_LED6_OFF;
			}

			if(bit_is_set(rfData[6], 7) ) {
				GREEN_LED7_ON;
    22a6:	80 91 0b 01 	lds	r24, 0x010B
    22aa:	8f 77       	andi	r24, 0x7F	; 127
    22ac:	80 93 0b 01 	sts	0x010B, r24
    22b0:	c8 cd       	rjmp	.-1136   	; 0x1e42 <handleRFCommands+0x246>
		} else {
			obstacleAvoidanceEnabled = 0;
		}

		if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
			cliffAvoidanceEnabled = 1;
    22b2:	81 e0       	ldi	r24, 0x01	; 1
    22b4:	80 93 69 04 	sts	0x0469, r24
    22b8:	80 cd       	rjmp	.-1280   	; 0x1dba <handleRFCommands+0x1be>
				ackPayload[15] = irCommand;
				packetId = 5;
				break;

			case 5:
				ackPayload[1] = proximityValue[0]&0xFF;
    22ba:	80 91 27 02 	lds	r24, 0x0227
    22be:	90 91 28 02 	lds	r25, 0x0228
    22c2:	80 93 ce 04 	sts	0x04CE, r24
				ackPayload[2] = proximityValue[0]>>8;
    22c6:	80 91 27 02 	lds	r24, 0x0227
    22ca:	90 91 28 02 	lds	r25, 0x0228
    22ce:	90 93 cf 04 	sts	0x04CF, r25
				ackPayload[3] = proximityValue[2]&0xFF;
    22d2:	80 91 2b 02 	lds	r24, 0x022B
    22d6:	90 91 2c 02 	lds	r25, 0x022C
    22da:	80 93 d0 04 	sts	0x04D0, r24
				ackPayload[4] = proximityValue[2]>>8;
    22de:	80 91 2b 02 	lds	r24, 0x022B
    22e2:	90 91 2c 02 	lds	r25, 0x022C
    22e6:	90 93 d1 04 	sts	0x04D1, r25
				ackPayload[5] = proximityValue[4]&0xFF;
    22ea:	80 91 2f 02 	lds	r24, 0x022F
    22ee:	90 91 30 02 	lds	r25, 0x0230
    22f2:	80 93 d2 04 	sts	0x04D2, r24
				ackPayload[6] = proximityValue[4]>>8;
    22f6:	80 91 2f 02 	lds	r24, 0x022F
    22fa:	90 91 30 02 	lds	r25, 0x0230
    22fe:	90 93 d3 04 	sts	0x04D3, r25
				ackPayload[7] = proximityValue[6]&0xFF;
    2302:	80 91 33 02 	lds	r24, 0x0233
    2306:	90 91 34 02 	lds	r25, 0x0234
    230a:	80 93 d4 04 	sts	0x04D4, r24
				ackPayload[8] = proximityValue[6]>>8;
    230e:	80 91 33 02 	lds	r24, 0x0233
    2312:	90 91 34 02 	lds	r25, 0x0234
    2316:	90 93 d5 04 	sts	0x04D5, r25
				ackPayload[9] = proximityValue[10]&0xFF;
    231a:	80 91 3b 02 	lds	r24, 0x023B
    231e:	90 91 3c 02 	lds	r25, 0x023C
    2322:	80 93 d6 04 	sts	0x04D6, r24
				ackPayload[10] = proximityValue[10]>>8;
    2326:	80 91 3b 02 	lds	r24, 0x023B
    232a:	90 91 3c 02 	lds	r25, 0x023C
    232e:	90 93 d7 04 	sts	0x04D7, r25
				ackPayload[11] = proximityValue[12]&0xFF;
    2332:	80 91 3f 02 	lds	r24, 0x023F
    2336:	90 91 40 02 	lds	r25, 0x0240
    233a:	80 93 d8 04 	sts	0x04D8, r24
				ackPayload[12] = proximityValue[12]>>8;
    233e:	80 91 3f 02 	lds	r24, 0x023F
    2342:	90 91 40 02 	lds	r25, 0x0240
    2346:	90 93 d9 04 	sts	0x04D9, r25
				ackPayload[13] = proximityValue[14]&0xFF;
    234a:	80 91 43 02 	lds	r24, 0x0243
    234e:	90 91 44 02 	lds	r25, 0x0244
    2352:	80 93 da 04 	sts	0x04DA, r24
				ackPayload[14] = proximityValue[14]>>8;
    2356:	80 91 43 02 	lds	r24, 0x0243
    235a:	90 91 44 02 	lds	r25, 0x0244
    235e:	90 93 db 04 	sts	0x04DB, r25
				ackPayload[15] = currentSelector;
    2362:	80 91 48 04 	lds	r24, 0x0448
    2366:	80 93 dc 04 	sts	0x04DC, r24
				packetId = 6;
    236a:	86 e0       	ldi	r24, 0x06	; 6
    236c:	80 93 0b 02 	sts	0x020B, r24
				break;
    2370:	5f ce       	rjmp	.-834    	; 0x2030 <handleRFCommands+0x434>

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    2372:	25 2f       	mov	r18, r21
    2374:	a0 cc       	rjmp	.-1728   	; 0x1cb6 <handleRFCommands+0xba>
    2376:	80 91 79 05 	lds	r24, 0x0579
    237a:	88 23       	and	r24, r24
    237c:	09 f0       	breq	.+2      	; 0x2380 <__stack+0x181>
    237e:	b3 ce       	rjmp	.-666    	; 0x20e6 <handleRFCommands+0x4ea>
    2380:	80 91 7a 05 	lds	r24, 0x057A
    2384:	88 23       	and	r24, r24
    2386:	09 f4       	brne	.+2      	; 0x238a <__stack+0x18b>
    2388:	b1 cd       	rjmp	.-1182   	; 0x1eec <handleRFCommands+0x2f0>
    238a:	25 2f       	mov	r18, r21
    238c:	94 cc       	rjmp	.-1752   	; 0x1cb6 <handleRFCommands+0xba>

0000238e <init_ir_remote_control>:
static unsigned char check_temp = 0;
unsigned char address = 0;
unsigned char data_ir = 0;
unsigned char check = 2;

void init_ir_remote_control(void) { 	
    238e:	cf 93       	push	r28
    2390:	df 93       	push	r29

	PCICR = 0;
    2392:	c8 e6       	ldi	r28, 0x68	; 104
    2394:	d0 e0       	ldi	r29, 0x00	; 0
    2396:	18 82       	st	Y, r1
	PCMSK1 = 0;
    2398:	ac e6       	ldi	r26, 0x6C	; 108
    239a:	b0 e0       	ldi	r27, 0x00	; 0
    239c:	1c 92       	st	X, r1
	TCCR2A = 0;
    239e:	e0 eb       	ldi	r30, 0xB0	; 176
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	10 82       	st	Z, r1
	TCCR2B = 0;
    23a4:	10 92 b1 00 	sts	0x00B1, r1
	TIMSK2 = 0;
    23a8:	10 92 70 00 	sts	0x0070, r1

	PCICR |= (1 << PCIE1);			// enable interrupt on change of PCINT15:8 pins
    23ac:	88 81       	ld	r24, Y
    23ae:	82 60       	ori	r24, 0x02	; 2
    23b0:	88 83       	st	Y, r24
	PCMSK1 |= (1 << PCINT15);		// enable PCINT15
    23b2:	8c 91       	ld	r24, X
    23b4:	80 68       	ori	r24, 0x80	; 128
    23b6:	8c 93       	st	X, r24
	TCCR2A |= (1 << WGM21); 		// mode 2 => CTC mode
    23b8:	80 81       	ld	r24, Z
    23ba:	82 60       	ori	r24, 0x02	; 2
    23bc:	80 83       	st	Z, r24

}
    23be:	df 91       	pop	r29
    23c0:	cf 91       	pop	r28
    23c2:	08 95       	ret

000023c4 <__vector_10>:

// external interrupt service routine
ISR(PCINT1_vect) {
    23c4:	1f 92       	push	r1
    23c6:	0f 92       	push	r0
    23c8:	0f b6       	in	r0, 0x3f	; 63
    23ca:	0f 92       	push	r0
    23cc:	11 24       	eor	r1, r1
    23ce:	8f 93       	push	r24

	if(irEnabled) {						// if the robot is configured to accept TV remote commands
    23d0:	80 91 12 02 	lds	r24, 0x0212
    23d4:	88 23       	and	r24, r24
    23d6:	21 f1       	breq	.+72     	; 0x2420 <__vector_10+0x5c>

		if(bit_is_clear(PINJ, 6)) {		// the interrupt is generated at every pin state change; we only look
    23d8:	80 91 03 01 	lds	r24, 0x0103
    23dc:	86 fd       	sbrc	r24, 6
    23de:	20 c0       	rjmp	.+64     	; 0x2420 <__vector_10+0x5c>
										// for the falling edge
			PCICR &= ~(1 << PCIE1);		// disable external interrupt
    23e0:	80 91 68 00 	lds	r24, 0x0068
    23e4:	8d 7f       	andi	r24, 0xFD	; 253
    23e6:	80 93 68 00 	sts	0x0068, r24
			PCMSK1 &= ~(1 << PCINT15);
    23ea:	80 91 6c 00 	lds	r24, 0x006C
    23ee:	8f 77       	andi	r24, 0x7F	; 127
    23f0:	80 93 6c 00 	sts	0x006C, r24
		
			// check the pin change isn't due to a glitch; to check this verify that
			// the pin remain low for at least 400 us (the giltches last about 200 us)
			// 0.4 / 0.032 = 13 => 0.416 us
			checkGlitch = 1;							// we're checking if this is a glitch
    23f4:	81 e0       	ldi	r24, 0x01	; 1
    23f6:	80 93 13 02 	sts	0x0213, r24
			OCR2A = 13;									// output compare register
    23fa:	8d e0       	ldi	r24, 0x0D	; 13
    23fc:	80 93 b3 00 	sts	0x00B3, r24
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    2400:	80 91 b1 00 	lds	r24, 0x00B1
    2404:	86 60       	ori	r24, 0x06	; 6
    2406:	80 93 b1 00 	sts	0x00B1, r24
			TIMSK2 |= (1 << OCIE2A);					// enable output compare interrupt
    240a:	80 91 70 00 	lds	r24, 0x0070
    240e:	82 60       	ori	r24, 0x02	; 2
    2410:	80 93 70 00 	sts	0x0070, r24

			check_temp = address_temp = data_temp = 0;
    2414:	10 92 1e 02 	sts	0x021E, r1
    2418:	10 92 1f 02 	sts	0x021F, r1
    241c:	10 92 20 02 	sts	0x0220, r1

		}

	}
	
}
    2420:	8f 91       	pop	r24
    2422:	0f 90       	pop	r0
    2424:	0f be       	out	0x3f, r0	; 63
    2426:	0f 90       	pop	r0
    2428:	1f 90       	pop	r1
    242a:	18 95       	reti

0000242c <__vector_13>:

ISR(TIMER2_COMPA_vect) {
    242c:	1f 92       	push	r1
    242e:	0f 92       	push	r0
    2430:	0f b6       	in	r0, 0x3f	; 63
    2432:	0f 92       	push	r0
    2434:	11 24       	eor	r1, r1
    2436:	2f 93       	push	r18
    2438:	3f 93       	push	r19
    243a:	4f 93       	push	r20
    243c:	5f 93       	push	r21
    243e:	8f 93       	push	r24
    2440:	9f 93       	push	r25

	static int i = -1;

	//PORTB ^= (1 << 5);	// toggle red led

	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);		// stop timer2
    2442:	80 91 b1 00 	lds	r24, 0x00B1
    2446:	88 7f       	andi	r24, 0xF8	; 248
    2448:	80 93 b1 00 	sts	0x00B1, r24
	
		if(checkGlitch) {					// if checking this is a glitch
    244c:	80 91 13 02 	lds	r24, 0x0213
    2450:	88 23       	and	r24, r24
    2452:	a9 f0       	breq	.+42     	; 0x247e <__vector_13+0x52>

			if(REMOTE) {					// if high it is a glitch
    2454:	80 91 03 01 	lds	r24, 0x0103
    2458:	86 ff       	sbrs	r24, 6
    245a:	65 c0       	rjmp	.+202    	; 0x2526 <__vector_13+0xfa>

				PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    245c:	80 91 68 00 	lds	r24, 0x0068
    2460:	82 60       	ori	r24, 0x02	; 2
    2462:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    2466:	80 91 6c 00 	lds	r24, 0x006C
    246a:	80 68       	ori	r24, 0x80	; 128
    246c:	80 93 6c 00 	sts	0x006C, r24
				i = -1;			
    2470:	8f ef       	ldi	r24, 0xFF	; 255
    2472:	9f ef       	ldi	r25, 0xFF	; 255
    2474:	90 93 02 02 	sts	0x0202, r25
    2478:	80 93 01 02 	sts	0x0201, r24
    247c:	49 c0       	rjmp	.+146    	; 0x2510 <__vector_13+0xe4>
			}

		} else {


			if (i == -1) { 						// start bit confirmed
    247e:	80 91 01 02 	lds	r24, 0x0201
    2482:	90 91 02 02 	lds	r25, 0x0202
    2486:	2f ef       	ldi	r18, 0xFF	; 255
    2488:	8f 3f       	cpi	r24, 0xFF	; 255
    248a:	92 07       	cpc	r25, r18
    248c:	09 f4       	brne	.+2      	; 0x2490 <__vector_13+0x64>
    248e:	63 c0       	rjmp	.+198    	; 0x2556 <__vector_13+0x12a>
					check_temp = address_temp = data_temp = 0;
					i=0;

				}

			} else if (i == 1)	{ 						// check bit read and change timer period
    2490:	81 30       	cpi	r24, 0x01	; 1
    2492:	91 05       	cpc	r25, r1
    2494:	09 f4       	brne	.+2      	; 0x2498 <__vector_13+0x6c>
    2496:	98 c0       	rjmp	.+304    	; 0x25c8 <__vector_13+0x19c>
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
    2498:	9c 01       	movw	r18, r24
    249a:	22 50       	subi	r18, 0x02	; 2
    249c:	30 40       	sbci	r19, 0x00	; 0
    249e:	25 30       	cpi	r18, 0x05	; 5
    24a0:	31 05       	cpc	r19, r1
    24a2:	08 f4       	brcc	.+2      	; 0x24a6 <__vector_13+0x7a>
    24a4:	67 c0       	rjmp	.+206    	; 0x2574 <__vector_13+0x148>

				unsigned char temp = REMOTE;
				temp <<= 6-i;
				address_temp += temp;

			} else if ((i > 6) && (i < 13 )) { 			// we read data
    24a6:	9c 01       	movw	r18, r24
    24a8:	27 50       	subi	r18, 0x07	; 7
    24aa:	30 40       	sbci	r19, 0x00	; 0
    24ac:	26 30       	cpi	r18, 0x06	; 6
    24ae:	31 05       	cpc	r19, r1
    24b0:	08 f0       	brcs	.+2      	; 0x24b4 <__vector_13+0x88>
    24b2:	bd c0       	rjmp	.+378    	; 0x262e <__vector_13+0x202>

				OCR2A = 54;
    24b4:	26 e3       	ldi	r18, 0x36	; 54
    24b6:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    24ba:	20 91 b1 00 	lds	r18, 0x00B1
    24be:	26 60       	ori	r18, 0x06	; 6
    24c0:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    24c4:	20 91 70 00 	lds	r18, 0x0070
    24c8:	22 60       	ori	r18, 0x02	; 2
    24ca:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    24ce:	20 91 03 01 	lds	r18, 0x0103
    24d2:	30 e0       	ldi	r19, 0x00	; 0
    24d4:	20 74       	andi	r18, 0x40	; 64
    24d6:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6+6-i;
    24d8:	00 24       	eor	r0, r0
    24da:	22 0f       	add	r18, r18
    24dc:	33 1f       	adc	r19, r19
    24de:	00 1c       	adc	r0, r0
    24e0:	22 0f       	add	r18, r18
    24e2:	33 1f       	adc	r19, r19
    24e4:	00 1c       	adc	r0, r0
    24e6:	23 2f       	mov	r18, r19
    24e8:	30 2d       	mov	r19, r0
    24ea:	4c e0       	ldi	r20, 0x0C	; 12
    24ec:	50 e0       	ldi	r21, 0x00	; 0
    24ee:	48 1b       	sub	r20, r24
    24f0:	59 0b       	sbc	r21, r25
    24f2:	02 c0       	rjmp	.+4      	; 0x24f8 <__vector_13+0xcc>
    24f4:	22 0f       	add	r18, r18
    24f6:	33 1f       	adc	r19, r19
    24f8:	4a 95       	dec	r20
    24fa:	e2 f7       	brpl	.-8      	; 0x24f4 <__vector_13+0xc8>
				data_temp += temp;
    24fc:	40 91 1e 02 	lds	r20, 0x021E
    2500:	42 0f       	add	r20, r18
    2502:	40 93 1e 02 	sts	0x021E, r20

				i = -1;
				check = check_temp;
				address = address_temp;
				data_ir = data_temp;
				command_received=1;
    2506:	01 96       	adiw	r24, 0x01	; 1

		}
	
		if(i!=-1) {

			i++;
    2508:	90 93 02 02 	sts	0x0202, r25
    250c:	80 93 01 02 	sts	0x0201, r24

		}

}
    2510:	9f 91       	pop	r25
    2512:	8f 91       	pop	r24
    2514:	5f 91       	pop	r21
    2516:	4f 91       	pop	r20
    2518:	3f 91       	pop	r19
    251a:	2f 91       	pop	r18
    251c:	0f 90       	pop	r0
    251e:	0f be       	out	0x3f, r0	; 63
    2520:	0f 90       	pop	r0
    2522:	1f 90       	pop	r1
    2524:	18 95       	reti
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
				i = -1;			

			} else {						// not a glitch => real command received

				checkGlitch = 0;
    2526:	10 92 13 02 	sts	0x0213, r1

				// activate the IR Receiver with a 2.1 ms cycle value
				// we set the resolution of the timer to be 0.032 ms (prescaler 1/256) so:
				// 2.1 / 0.032 = 64 to be set in the output compare register (=> 2.048 ms)
				// but we already wait 0.416 us => 13, so 64-13=51
				OCR2A = 51;								// output compare register
    252a:	83 e3       	ldi	r24, 0x33	; 51
    252c:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    2530:	80 91 b1 00 	lds	r24, 0x00B1
    2534:	86 60       	ori	r24, 0x06	; 6
    2536:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    253a:	80 91 70 00 	lds	r24, 0x0070
    253e:	82 60       	ori	r24, 0x02	; 2
    2540:	80 93 70 00 	sts	0x0070, r24
    2544:	80 91 01 02 	lds	r24, 0x0201
    2548:	90 91 02 02 	lds	r25, 0x0202

			} 

		}
	
		if(i!=-1) {
    254c:	2f ef       	ldi	r18, 0xFF	; 255
    254e:	8f 3f       	cpi	r24, 0xFF	; 255
    2550:	92 07       	cpc	r25, r18
    2552:	c9 f6       	brne	.-78     	; 0x2506 <__vector_13+0xda>
    2554:	dd cf       	rjmp	.-70     	; 0x2510 <__vector_13+0xe4>
		} else {


			if (i == -1) { 						// start bit confirmed

				if(REMOTE) {					// double check => if high it is only a noise
    2556:	20 91 03 01 	lds	r18, 0x0103
    255a:	26 ff       	sbrs	r18, 6
    255c:	52 c0       	rjmp	.+164    	; 0x2602 <__vector_13+0x1d6>

					PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    255e:	20 91 68 00 	lds	r18, 0x0068
    2562:	22 60       	ori	r18, 0x02	; 2
    2564:	20 93 68 00 	sts	0x0068, r18
					PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    2568:	20 91 6c 00 	lds	r18, 0x006C
    256c:	20 68       	ori	r18, 0x80	; 128
    256e:	20 93 6c 00 	sts	0x006C, r18
    2572:	ce cf       	rjmp	.-100    	; 0x2510 <__vector_13+0xe4>
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
		
				OCR2A = 54;
    2574:	26 e3       	ldi	r18, 0x36	; 54
    2576:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    257a:	20 91 b1 00 	lds	r18, 0x00B1
    257e:	26 60       	ori	r18, 0x06	; 6
    2580:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    2584:	20 91 70 00 	lds	r18, 0x0070
    2588:	22 60       	ori	r18, 0x02	; 2
    258a:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    258e:	20 91 03 01 	lds	r18, 0x0103
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	20 74       	andi	r18, 0x40	; 64
    2596:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6-i;
    2598:	00 24       	eor	r0, r0
    259a:	22 0f       	add	r18, r18
    259c:	33 1f       	adc	r19, r19
    259e:	00 1c       	adc	r0, r0
    25a0:	22 0f       	add	r18, r18
    25a2:	33 1f       	adc	r19, r19
    25a4:	00 1c       	adc	r0, r0
    25a6:	23 2f       	mov	r18, r19
    25a8:	30 2d       	mov	r19, r0
    25aa:	46 e0       	ldi	r20, 0x06	; 6
    25ac:	50 e0       	ldi	r21, 0x00	; 0
    25ae:	48 1b       	sub	r20, r24
    25b0:	59 0b       	sbc	r21, r25
    25b2:	02 c0       	rjmp	.+4      	; 0x25b8 <__vector_13+0x18c>
    25b4:	22 0f       	add	r18, r18
    25b6:	33 1f       	adc	r19, r19
    25b8:	4a 95       	dec	r20
    25ba:	e2 f7       	brpl	.-8      	; 0x25b4 <__vector_13+0x188>
				address_temp += temp;
    25bc:	40 91 1f 02 	lds	r20, 0x021F
    25c0:	42 0f       	add	r20, r18
    25c2:	40 93 1f 02 	sts	0x021F, r20
    25c6:	9f cf       	rjmp	.-194    	; 0x2506 <__vector_13+0xda>

				}

			} else if (i == 1)	{ 						// check bit read and change timer period

				check_temp = REMOTE;	   				// read the check bit
    25c8:	20 91 03 01 	lds	r18, 0x0103
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	20 74       	andi	r18, 0x40	; 64
    25d0:	30 70       	andi	r19, 0x00	; 0
    25d2:	02 2e       	mov	r0, r18
    25d4:	23 2f       	mov	r18, r19
    25d6:	00 0c       	add	r0, r0
    25d8:	22 1f       	adc	r18, r18
    25da:	33 0b       	sbc	r19, r19
    25dc:	00 0c       	add	r0, r0
    25de:	22 1f       	adc	r18, r18
    25e0:	33 1f       	adc	r19, r19
    25e2:	20 93 20 02 	sts	0x0220, r18
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
    25e6:	26 e3       	ldi	r18, 0x36	; 54
    25e8:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    25ec:	20 91 b1 00 	lds	r18, 0x00B1
    25f0:	26 60       	ori	r18, 0x06	; 6
    25f2:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    25f6:	20 91 70 00 	lds	r18, 0x0070
    25fa:	22 60       	ori	r18, 0x02	; 2
    25fc:	20 93 70 00 	sts	0x0070, r18
    2600:	82 cf       	rjmp	.-252    	; 0x2506 <__vector_13+0xda>

				} else {	// read the check bit
			
					//cycle value is 0.9 ms to go to check bit so:
					// 0.9 / 0.032 = 28 => 0.896
					OCR2A = 28;								// output compare register
    2602:	8c e1       	ldi	r24, 0x1C	; 28
    2604:	80 93 b3 00 	sts	0x00B3, r24
					TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    2608:	80 91 b1 00 	lds	r24, 0x00B1
    260c:	86 60       	ori	r24, 0x06	; 6
    260e:	80 93 b1 00 	sts	0x00B1, r24
					TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt					
    2612:	80 91 70 00 	lds	r24, 0x0070
    2616:	82 60       	ori	r24, 0x02	; 2
    2618:	80 93 70 00 	sts	0x0070, r24

					check_temp = address_temp = data_temp = 0;
    261c:	10 92 1e 02 	sts	0x021E, r1
    2620:	10 92 1f 02 	sts	0x021F, r1
    2624:	10 92 20 02 	sts	0x0220, r1
    2628:	81 e0       	ldi	r24, 0x01	; 1
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	6d cf       	rjmp	.-294    	; 0x2508 <__vector_13+0xdc>

				unsigned char temp = REMOTE;
				temp <<= 6+6-i;
				data_temp += temp;

			} else if (i == 13) { 						// last bit read
    262e:	8d 30       	cpi	r24, 0x0D	; 13
    2630:	91 05       	cpc	r25, r1
    2632:	09 f0       	breq	.+2      	; 0x2636 <__vector_13+0x20a>
    2634:	68 cf       	rjmp	.-304    	; 0x2506 <__vector_13+0xda>
				
				TIMSK2 = 0;								// disable all interrupt for timer2
    2636:	10 92 70 00 	sts	0x0070, r1
				PCICR |= (1 << PCIE1);					// enable external interrupt to receive next command
    263a:	80 91 68 00 	lds	r24, 0x0068
    263e:	82 60       	ori	r24, 0x02	; 2
    2640:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);				// clear interrupt flag
    2644:	80 91 6c 00 	lds	r24, 0x006C
    2648:	80 68       	ori	r24, 0x80	; 128
    264a:	80 93 6c 00 	sts	0x006C, r24

				i = -1;
    264e:	8f ef       	ldi	r24, 0xFF	; 255
    2650:	9f ef       	ldi	r25, 0xFF	; 255
    2652:	90 93 02 02 	sts	0x0202, r25
    2656:	80 93 01 02 	sts	0x0201, r24
				check = check_temp;
    265a:	80 91 20 02 	lds	r24, 0x0220
    265e:	80 93 00 02 	sts	0x0200, r24
				address = address_temp;
    2662:	80 91 1f 02 	lds	r24, 0x021F
    2666:	80 93 1c 02 	sts	0x021C, r24
				data_ir = data_temp;
    266a:	80 91 1e 02 	lds	r24, 0x021E
    266e:	80 93 1d 02 	sts	0x021D, r24
				command_received=1;
    2672:	81 e0       	ldi	r24, 0x01	; 1
    2674:	80 93 24 04 	sts	0x0424, r24
    2678:	4b cf       	rjmp	.-362    	; 0x2510 <__vector_13+0xe4>

0000267a <ir_remote_get_check>:

}

unsigned char ir_remote_get_check(void) {
	return check;
}
    267a:	80 91 00 02 	lds	r24, 0x0200
    267e:	08 95       	ret

00002680 <ir_remote_get_address>:

unsigned char ir_remote_get_address(void) {
	return address;
}
    2680:	80 91 1c 02 	lds	r24, 0x021C
    2684:	08 95       	ret

00002686 <ir_remote_get_data>:

unsigned char ir_remote_get_data(void) {
	return data_ir;
}
    2686:	80 91 1d 02 	lds	r24, 0x021D
    268a:	08 95       	ret

0000268c <handleIRRemoteCommands>:

void handleIRRemoteCommands() {

	if(irEnabled) {
    268c:	80 91 12 02 	lds	r24, 0x0212
    2690:	88 23       	and	r24, r24
    2692:	51 f1       	breq	.+84     	; 0x26e8 <handleIRRemoteCommands+0x5c>

		if(command_received) {
    2694:	80 91 24 04 	lds	r24, 0x0424
    2698:	88 23       	and	r24, r24
    269a:	31 f1       	breq	.+76     	; 0x26e8 <handleIRRemoteCommands+0x5c>
unsigned char ir_remote_get_address(void) {
	return address;
}

unsigned char ir_remote_get_data(void) {
	return data_ir;
    269c:	e0 91 1d 02 	lds	r30, 0x021D

	if(irEnabled) {

		if(command_received) {

            irCommand = ir_remote_get_data();
    26a0:	e0 93 23 04 	sts	0x0423, r30

		    //usartTransmit(irCommand);

			command_received = 0;
    26a4:	10 92 24 04 	sts	0x0424, r1

			switch(irCommand) {
    26a8:	f0 e0       	ldi	r31, 0x00	; 0
    26aa:	e5 33       	cpi	r30, 0x35	; 53
    26ac:	f1 05       	cpc	r31, r1
    26ae:	e8 f0       	brcs	.+58     	; 0x26ea <handleIRRemoteCommands+0x5e>
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 1;
							break;
						case 3:
							obstacleAvoidanceEnabled = 1;
							cliffAvoidanceEnabled = 1;
    26b0:	20 91 f7 02 	lds	r18, 0x02F7
    26b4:	30 91 f8 02 	lds	r19, 0x02F8
    26b8:	80 91 f9 02 	lds	r24, 0x02F9
    26bc:	90 91 fa 02 	lds	r25, 0x02FA
	               	break;

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
    26c0:	37 fd       	sbrc	r19, 7
    26c2:	b9 c1       	rjmp	.+882    	; 0x2a36 <handleIRRemoteCommands+0x3aa>
				speedr = pwm_right_desired;
			} else {
				speedr = (-pwm_right_desired);
    26c4:	30 93 12 03 	sts	0x0312, r19
    26c8:	20 93 11 03 	sts	0x0311, r18
			}
			if(pwm_left_desired >= 0) {
    26cc:	97 fd       	sbrc	r25, 7
    26ce:	05 c0       	rjmp	.+10     	; 0x26da <handleIRRemoteCommands+0x4e>
				speedl = pwm_left_desired;
    26d0:	90 93 10 03 	sts	0x0310, r25
    26d4:	80 93 0f 03 	sts	0x030F, r24
    26d8:	08 95       	ret
			} else {
				speedl = (-pwm_left_desired);
    26da:	90 95       	com	r25
    26dc:	81 95       	neg	r24
    26de:	9f 4f       	sbci	r25, 0xFF	; 255
    26e0:	90 93 10 03 	sts	0x0310, r25
    26e4:	80 93 0f 03 	sts	0x030F, r24
    26e8:	08 95       	ret

		    //usartTransmit(irCommand);

			command_received = 0;

			switch(irCommand) {
    26ea:	ee 58       	subi	r30, 0x8E	; 142
    26ec:	ff 4f       	sbci	r31, 0xFF	; 255
    26ee:	ee 0f       	add	r30, r30
    26f0:	ff 1f       	adc	r31, r31
    26f2:	05 90       	lpm	r0, Z+
    26f4:	f4 91       	lpm	r31, Z+
    26f6:	e0 2d       	mov	r30, r0
    26f8:	19 94       	eijmp
						case 0:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 0;
							break;
						case 1:
							obstacleAvoidanceEnabled = 1;
    26fa:	80 93 68 04 	sts	0x0468, r24
							cliffAvoidanceEnabled = 0;
    26fe:	10 92 69 04 	sts	0x0469, r1
    2702:	20 91 f7 02 	lds	r18, 0x02F7
    2706:	30 91 f8 02 	lds	r19, 0x02F8
    270a:	80 91 f9 02 	lds	r24, 0x02F9
    270e:	90 91 fa 02 	lds	r25, 0x02FA
							break;
    2712:	d6 cf       	rjmp	.-84     	; 0x26c0 <handleIRRemoteCommands+0x34>
						case 2:
							obstacleAvoidanceEnabled = 0;
    2714:	10 92 68 04 	sts	0x0468, r1
							cliffAvoidanceEnabled = 1;
    2718:	81 e0       	ldi	r24, 0x01	; 1
    271a:	80 93 69 04 	sts	0x0469, r24
    271e:	20 91 f7 02 	lds	r18, 0x02F7
    2722:	30 91 f8 02 	lds	r19, 0x02F8
    2726:	80 91 f9 02 	lds	r24, 0x02F9
    272a:	90 91 fa 02 	lds	r25, 0x02FA
							break;
    272e:	c8 cf       	rjmp	.-112    	; 0x26c0 <handleIRRemoteCommands+0x34>
				case 33:	// program -
					cliffAvoidanceEnabled = 0;
					break;

				case 52:	// av/tv button
					behaviorState = (behaviorState+1)%4;
    2730:	80 91 26 04 	lds	r24, 0x0426
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	01 96       	adiw	r24, 0x01	; 1
    2738:	83 70       	andi	r24, 0x03	; 3
    273a:	90 70       	andi	r25, 0x00	; 0
    273c:	80 93 26 04 	sts	0x0426, r24
					switch(behaviorState) {
    2740:	82 30       	cpi	r24, 0x02	; 2
    2742:	41 f3       	breq	.-48     	; 0x2714 <handleIRRemoteCommands+0x88>
    2744:	83 30       	cpi	r24, 0x03	; 3
    2746:	09 f4       	brne	.+2      	; 0x274a <handleIRRemoteCommands+0xbe>
    2748:	8a c1       	rjmp	.+788    	; 0x2a5e <handleIRRemoteCommands+0x3d2>
    274a:	81 30       	cpi	r24, 0x01	; 1
    274c:	b1 f2       	breq	.-84     	; 0x26fa <handleIRRemoteCommands+0x6e>
						case 0:
							obstacleAvoidanceEnabled = 0;
    274e:	10 92 68 04 	sts	0x0468, r1
							cliffAvoidanceEnabled = 0;
    2752:	10 92 69 04 	sts	0x0469, r1
    2756:	20 91 f7 02 	lds	r18, 0x02F7
    275a:	30 91 f8 02 	lds	r19, 0x02F8
    275e:	80 91 f9 02 	lds	r24, 0x02F9
    2762:	90 91 fa 02 	lds	r25, 0x02FA
							break;
    2766:	ac cf       	rjmp	.-168    	; 0x26c0 <handleIRRemoteCommands+0x34>
				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
					break;

				case 17:	// volume -
					obstacleAvoidanceEnabled = 0;
    2768:	10 92 68 04 	sts	0x0468, r1
    276c:	20 91 f7 02 	lds	r18, 0x02F7
    2770:	30 91 f8 02 	lds	r19, 0x02F8
    2774:	80 91 f9 02 	lds	r24, 0x02F9
    2778:	90 91 fa 02 	lds	r25, 0x02FA
					break;
    277c:	a1 cf       	rjmp	.-190    	; 0x26c0 <handleIRRemoteCommands+0x34>
					pwm_right_desired += STEP_MOTORS;
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
					break;

				case 9:	// left motor backward
					pwm_left_desired -= STEP_MOTORS;
    277e:	80 91 f9 02 	lds	r24, 0x02F9
    2782:	90 91 fa 02 	lds	r25, 0x02FA
    2786:	02 97       	sbiw	r24, 0x02	; 2
    2788:	90 93 fa 02 	sts	0x02FA, r25
    278c:	80 93 f9 02 	sts	0x02F9, r24
	           	    if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    2790:	2e ef       	ldi	r18, 0xFE	; 254
    2792:	80 30       	cpi	r24, 0x00	; 0
    2794:	92 07       	cpc	r25, r18
    2796:	9c f5       	brge	.+102    	; 0x27fe <handleIRRemoteCommands+0x172>
    2798:	80 e0       	ldi	r24, 0x00	; 0
    279a:	9e ef       	ldi	r25, 0xFE	; 254
    279c:	90 93 fa 02 	sts	0x02FA, r25
    27a0:	80 93 f9 02 	sts	0x02F9, r24
    27a4:	20 91 f7 02 	lds	r18, 0x02F7
    27a8:	30 91 f8 02 	lds	r19, 0x02F8
    27ac:	89 cf       	rjmp	.-238    	; 0x26c0 <handleIRRemoteCommands+0x34>
    	            if (pwm_left_desired > (MAX_MOTORS_PWM/2)) pwm_left_desired = (MAX_MOTORS_PWM/2);
               		break;

				case 8:	// both motors backward
				case 30:
					if(pwm_right_desired < pwm_left) {
    27ae:	20 91 f7 02 	lds	r18, 0x02F7
    27b2:	30 91 f8 02 	lds	r19, 0x02F8
    27b6:	80 91 f5 02 	lds	r24, 0x02F5
    27ba:	90 91 f6 02 	lds	r25, 0x02F6
    27be:	28 17       	cp	r18, r24
    27c0:	39 07       	cpc	r19, r25
    27c2:	24 f0       	brlt	.+8      	; 0x27cc <handleIRRemoteCommands+0x140>
						pwm_left_desired  = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
    27c4:	20 91 f9 02 	lds	r18, 0x02F9
    27c8:	30 91 fa 02 	lds	r19, 0x02FA
					}
					pwm_right_desired -= STEP_MOTORS;
    27cc:	22 50       	subi	r18, 0x02	; 2
    27ce:	30 40       	sbci	r19, 0x00	; 0
    27d0:	30 93 f8 02 	sts	0x02F8, r19
    27d4:	20 93 f7 02 	sts	0x02F7, r18
					pwm_left_desired -= STEP_MOTORS;
    27d8:	c9 01       	movw	r24, r18
    27da:	30 93 fa 02 	sts	0x02FA, r19
    27de:	20 93 f9 02 	sts	0x02F9, r18
	                if (pwm_right_desired < -(MAX_MOTORS_PWM/2)) pwm_right_desired = -(MAX_MOTORS_PWM/2);
    27e2:	4e ef       	ldi	r20, 0xFE	; 254
    27e4:	20 30       	cpi	r18, 0x00	; 0
    27e6:	34 07       	cpc	r19, r20
    27e8:	34 f4       	brge	.+12     	; 0x27f6 <handleIRRemoteCommands+0x16a>
    27ea:	40 e0       	ldi	r20, 0x00	; 0
    27ec:	5e ef       	ldi	r21, 0xFE	; 254
    27ee:	50 93 f8 02 	sts	0x02F8, r21
    27f2:	40 93 f7 02 	sts	0x02F7, r20
    	            if (pwm_left_desired < -(MAX_MOTORS_PWM/2)) pwm_left_desired = -(MAX_MOTORS_PWM/2);
    27f6:	4e ef       	ldi	r20, 0xFE	; 254
    27f8:	20 30       	cpi	r18, 0x00	; 0
    27fa:	34 07       	cpc	r19, r20
    27fc:	6c f2       	brlt	.-102    	; 0x2798 <handleIRRemoteCommands+0x10c>
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    27fe:	20 91 f7 02 	lds	r18, 0x02F7
    2802:	30 91 f8 02 	lds	r19, 0x02F8
    2806:	5c cf       	rjmp	.-328    	; 0x26c0 <handleIRRemoteCommands+0x34>
					updateBlueLed(pwm_blue);

	               	break;

				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
    2808:	81 e0       	ldi	r24, 0x01	; 1
    280a:	80 93 68 04 	sts	0x0468, r24
    280e:	20 91 f7 02 	lds	r18, 0x02F7
    2812:	30 91 f8 02 	lds	r19, 0x02F8
    2816:	80 91 f9 02 	lds	r24, 0x02F9
    281a:	90 91 fa 02 	lds	r25, 0x02FA
					break;
    281e:	50 cf       	rjmp	.-352    	; 0x26c0 <handleIRRemoteCommands+0x34>
					pwm_left_desired -= STEP_MOTORS;
	           	    if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 7:	// right motor backward
					pwm_right_desired -= STEP_MOTORS;
    2820:	20 91 f7 02 	lds	r18, 0x02F7
    2824:	30 91 f8 02 	lds	r19, 0x02F8
    2828:	22 50       	subi	r18, 0x02	; 2
    282a:	30 40       	sbci	r19, 0x00	; 0
    282c:	30 93 f8 02 	sts	0x02F8, r19
    2830:	20 93 f7 02 	sts	0x02F7, r18
	               	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    2834:	4e ef       	ldi	r20, 0xFE	; 254
    2836:	20 30       	cpi	r18, 0x00	; 0
    2838:	34 07       	cpc	r19, r20
    283a:	0c f0       	brlt	.+2      	; 0x283e <handleIRRemoteCommands+0x1b2>
    283c:	3d cf       	rjmp	.-390    	; 0x26b8 <handleIRRemoteCommands+0x2c>
    283e:	80 e0       	ldi	r24, 0x00	; 0
    2840:	9e ef       	ldi	r25, 0xFE	; 254
    2842:	90 93 f8 02 	sts	0x02F8, r25
    2846:	80 93 f7 02 	sts	0x02F7, r24
    284a:	80 91 f9 02 	lds	r24, 0x02F9
    284e:	90 91 fa 02 	lds	r25, 0x02FA
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	32 e0       	ldi	r19, 0x02	; 2
    2856:	36 cf       	rjmp	.-404    	; 0x26c4 <handleIRRemoteCommands+0x38>
    	            if (pwm_left_desired < -(MAX_MOTORS_PWM/2)) pwm_left_desired = -(MAX_MOTORS_PWM/2);
                  	break;

				case 6:	// both motors right
				case 47:
					pwm_right_desired -= STEP_MOTORS;
    2858:	20 91 f7 02 	lds	r18, 0x02F7
    285c:	30 91 f8 02 	lds	r19, 0x02F8
    2860:	22 50       	subi	r18, 0x02	; 2
    2862:	30 40       	sbci	r19, 0x00	; 0
    2864:	30 93 f8 02 	sts	0x02F8, r19
    2868:	20 93 f7 02 	sts	0x02F7, r18
					pwm_left_desired += STEP_MOTORS;
    286c:	80 91 f9 02 	lds	r24, 0x02F9
    2870:	90 91 fa 02 	lds	r25, 0x02FA
    2874:	02 96       	adiw	r24, 0x02	; 2
    2876:	90 93 fa 02 	sts	0x02FA, r25
    287a:	80 93 f9 02 	sts	0x02F9, r24
                	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    287e:	4e ef       	ldi	r20, 0xFE	; 254
    2880:	20 30       	cpi	r18, 0x00	; 0
    2882:	34 07       	cpc	r19, r20
    2884:	34 f4       	brge	.+12     	; 0x2892 <handleIRRemoteCommands+0x206>
    2886:	20 e0       	ldi	r18, 0x00	; 0
    2888:	3e ef       	ldi	r19, 0xFE	; 254
    288a:	30 93 f8 02 	sts	0x02F8, r19
    288e:	20 93 f7 02 	sts	0x02F7, r18
                	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    2892:	42 e0       	ldi	r20, 0x02	; 2
    2894:	81 30       	cpi	r24, 0x01	; 1
    2896:	94 07       	cpc	r25, r20
    2898:	0c f4       	brge	.+2      	; 0x289c <handleIRRemoteCommands+0x210>
    289a:	12 cf       	rjmp	.-476    	; 0x26c0 <handleIRRemoteCommands+0x34>
    289c:	80 e0       	ldi	r24, 0x00	; 0
    289e:	92 e0       	ldi	r25, 0x02	; 2
    28a0:	90 93 fa 02 	sts	0x02FA, r25
    28a4:	80 93 f9 02 	sts	0x02F9, r24
    28a8:	0b cf       	rjmp	.-490    	; 0x26c0 <handleIRRemoteCommands+0x34>
			switch(irCommand) {
				// sometimes there are two cases for the same command because two different
				// remote controls are used; one of this do not contain "numbers"
				case 5:	// stop motors
				case 51:
					pwm_right_desired = 0;
    28aa:	10 92 f8 02 	sts	0x02F8, r1
    28ae:	10 92 f7 02 	sts	0x02F7, r1
					pwm_left_desired = 0;
    28b2:	10 92 fa 02 	sts	0x02FA, r1
    28b6:	10 92 f9 02 	sts	0x02F9, r1
					if(currentSelector == 8) {
    28ba:	80 91 48 04 	lds	r24, 0x0448
    28be:	88 30       	cpi	r24, 0x08	; 8
    28c0:	09 f4       	brne	.+2      	; 0x28c4 <handleIRRemoteCommands+0x238>
    28c2:	db c0       	rjmp	.+438    	; 0x2a7a <handleIRRemoteCommands+0x3ee>
    28c4:	80 e0       	ldi	r24, 0x00	; 0
    28c6:	90 e0       	ldi	r25, 0x00	; 0
    28c8:	20 e0       	ldi	r18, 0x00	; 0
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	fb ce       	rjmp	.-522    	; 0x26c4 <handleIRRemoteCommands+0x38>
                	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
					break;

				case 4:	// both motors left
				case 46:
					pwm_right_desired += STEP_MOTORS;
    28ce:	20 91 f7 02 	lds	r18, 0x02F7
    28d2:	30 91 f8 02 	lds	r19, 0x02F8
    28d6:	2e 5f       	subi	r18, 0xFE	; 254
    28d8:	3f 4f       	sbci	r19, 0xFF	; 255
    28da:	30 93 f8 02 	sts	0x02F8, r19
    28de:	20 93 f7 02 	sts	0x02F7, r18
					pwm_left_desired -= STEP_MOTORS;
    28e2:	80 91 f9 02 	lds	r24, 0x02F9
    28e6:	90 91 fa 02 	lds	r25, 0x02FA
    28ea:	02 97       	sbiw	r24, 0x02	; 2
    28ec:	90 93 fa 02 	sts	0x02FA, r25
    28f0:	80 93 f9 02 	sts	0x02F9, r24
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    28f4:	42 e0       	ldi	r20, 0x02	; 2
    28f6:	21 30       	cpi	r18, 0x01	; 1
    28f8:	34 07       	cpc	r19, r20
    28fa:	34 f0       	brlt	.+12     	; 0x2908 <handleIRRemoteCommands+0x27c>
    28fc:	20 e0       	ldi	r18, 0x00	; 0
    28fe:	32 e0       	ldi	r19, 0x02	; 2
    2900:	30 93 f8 02 	sts	0x02F8, r19
    2904:	20 93 f7 02 	sts	0x02F7, r18
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    2908:	4e ef       	ldi	r20, 0xFE	; 254
    290a:	80 30       	cpi	r24, 0x00	; 0
    290c:	94 07       	cpc	r25, r20
    290e:	0c f0       	brlt	.+2      	; 0x2912 <handleIRRemoteCommands+0x286>
    2910:	d7 ce       	rjmp	.-594    	; 0x26c0 <handleIRRemoteCommands+0x34>
    2912:	80 e0       	ldi	r24, 0x00	; 0
    2914:	9e ef       	ldi	r25, 0xFE	; 254
    2916:	90 93 fa 02 	sts	0x02FA, r25
    291a:	80 93 f9 02 	sts	0x02F9, r24
    291e:	d0 ce       	rjmp	.-608    	; 0x26c0 <handleIRRemoteCommands+0x34>
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
    2920:	80 91 f9 02 	lds	r24, 0x02F9
    2924:	90 91 fa 02 	lds	r25, 0x02FA
    2928:	02 96       	adiw	r24, 0x02	; 2
    292a:	90 93 fa 02 	sts	0x02FA, r25
    292e:	80 93 f9 02 	sts	0x02F9, r24
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    2932:	22 e0       	ldi	r18, 0x02	; 2
    2934:	81 30       	cpi	r24, 0x01	; 1
    2936:	92 07       	cpc	r25, r18
    2938:	0c f4       	brge	.+2      	; 0x293c <handleIRRemoteCommands+0x2b0>
    293a:	61 cf       	rjmp	.-318    	; 0x27fe <handleIRRemoteCommands+0x172>
    293c:	80 e0       	ldi	r24, 0x00	; 0
    293e:	92 e0       	ldi	r25, 0x02	; 2
    2940:	90 93 fa 02 	sts	0x02FA, r25
    2944:	80 93 f9 02 	sts	0x02F9, r24
    2948:	5a cf       	rjmp	.-332    	; 0x27fe <handleIRRemoteCommands+0x172>
					}
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    294a:	20 91 f7 02 	lds	r18, 0x02F7
    294e:	30 91 f8 02 	lds	r19, 0x02F8
    2952:	80 91 f9 02 	lds	r24, 0x02F9
    2956:	90 91 fa 02 	lds	r25, 0x02FA
    295a:	82 17       	cp	r24, r18
    295c:	93 07       	cpc	r25, r19
    295e:	0c f4       	brge	.+2      	; 0x2962 <handleIRRemoteCommands+0x2d6>
    2960:	6e c0       	rjmp	.+220    	; 0x2a3e <handleIRRemoteCommands+0x3b2>
    2962:	9c 01       	movw	r18, r24
						pwm_left_desired = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
					}
					pwm_right_desired += STEP_MOTORS;
    2964:	2e 5f       	subi	r18, 0xFE	; 254
    2966:	3f 4f       	sbci	r19, 0xFF	; 255
    2968:	30 93 f8 02 	sts	0x02F8, r19
    296c:	20 93 f7 02 	sts	0x02F7, r18
					pwm_left_desired += STEP_MOTORS;
    2970:	02 96       	adiw	r24, 0x02	; 2
    2972:	90 93 fa 02 	sts	0x02FA, r25
    2976:	80 93 f9 02 	sts	0x02F9, r24
	                if (pwm_right_desired > (MAX_MOTORS_PWM/2)) pwm_right_desired = (MAX_MOTORS_PWM/2);
    297a:	42 e0       	ldi	r20, 0x02	; 2
    297c:	21 30       	cpi	r18, 0x01	; 1
    297e:	34 07       	cpc	r19, r20
    2980:	34 f0       	brlt	.+12     	; 0x298e <handleIRRemoteCommands+0x302>
    2982:	20 e0       	ldi	r18, 0x00	; 0
    2984:	32 e0       	ldi	r19, 0x02	; 2
    2986:	30 93 f8 02 	sts	0x02F8, r19
    298a:	20 93 f7 02 	sts	0x02F7, r18
    	            if (pwm_left_desired > (MAX_MOTORS_PWM/2)) pwm_left_desired = (MAX_MOTORS_PWM/2);
    298e:	22 e0       	ldi	r18, 0x02	; 2
    2990:	81 30       	cpi	r24, 0x01	; 1
    2992:	92 07       	cpc	r25, r18
    2994:	0c f4       	brge	.+2      	; 0x2998 <handleIRRemoteCommands+0x30c>
    2996:	33 cf       	rjmp	.-410    	; 0x27fe <handleIRRemoteCommands+0x172>
    2998:	80 e0       	ldi	r24, 0x00	; 0
    299a:	92 e0       	ldi	r25, 0x02	; 2
    299c:	90 93 fa 02 	sts	0x02FA, r25
    29a0:	80 93 f9 02 	sts	0x02F9, r24
    29a4:	20 91 f7 02 	lds	r18, 0x02F7
    29a8:	30 91 f8 02 	lds	r19, 0x02F8
    29ac:	89 ce       	rjmp	.-750    	; 0x26c0 <handleIRRemoteCommands+0x34>
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
					break;

				case 1:	// right motor forward
					pwm_right_desired += STEP_MOTORS;
    29ae:	20 91 f7 02 	lds	r18, 0x02F7
    29b2:	30 91 f8 02 	lds	r19, 0x02F8
    29b6:	2e 5f       	subi	r18, 0xFE	; 254
    29b8:	3f 4f       	sbci	r19, 0xFF	; 255
    29ba:	30 93 f8 02 	sts	0x02F8, r19
    29be:	20 93 f7 02 	sts	0x02F7, r18
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    29c2:	42 e0       	ldi	r20, 0x02	; 2
    29c4:	21 30       	cpi	r18, 0x01	; 1
    29c6:	34 07       	cpc	r19, r20
    29c8:	0c f4       	brge	.+2      	; 0x29cc <handleIRRemoteCommands+0x340>
    29ca:	76 ce       	rjmp	.-788    	; 0x26b8 <handleIRRemoteCommands+0x2c>
    29cc:	80 e0       	ldi	r24, 0x00	; 0
    29ce:	92 e0       	ldi	r25, 0x02	; 2
    29d0:	90 93 f8 02 	sts	0x02F8, r25
    29d4:	80 93 f7 02 	sts	0x02F7, r24
    29d8:	80 91 f9 02 	lds	r24, 0x02F9
    29dc:	90 91 fa 02 	lds	r25, 0x02FA
	               	break;

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
    29e0:	20 e0       	ldi	r18, 0x00	; 0
    29e2:	32 e0       	ldi	r19, 0x02	; 2
    29e4:	6f ce       	rjmp	.-802    	; 0x26c4 <handleIRRemoteCommands+0x38>
	               	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
					break;

	           	case 0:	// colors
				case 50:
					colorState = (colorState+1)%5;
    29e6:	80 91 25 04 	lds	r24, 0x0425
    29ea:	90 e0       	ldi	r25, 0x00	; 0
    29ec:	01 96       	adiw	r24, 0x01	; 1
    29ee:	65 e0       	ldi	r22, 0x05	; 5
    29f0:	70 e0       	ldi	r23, 0x00	; 0
    29f2:	0e 94 6d 42 	call	0x84da	; 0x84da <__divmodhi4>
    29f6:	80 93 25 04 	sts	0x0425, r24

					if(colorState==0) {			// turn on blue and off all IRs
    29fa:	88 23       	and	r24, r24
    29fc:	11 f5       	brne	.+68     	; 0x2a42 <handleIRRemoteCommands+0x3b6>
						LED_IR1_HIGH;
    29fe:	44 9a       	sbi	0x08, 4	; 8
						LED_IR2_HIGH;
    2a00:	45 9a       	sbi	0x08, 5	; 8
						pwm_blue = 0;
    2a02:	10 92 0e 02 	sts	0x020E, r1
						pwm_green = MAX_LEDS_PWM;
    2a06:	8f ef       	ldi	r24, 0xFF	; 255
    2a08:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = MAX_LEDS_PWM;
    2a0c:	80 93 0c 02 	sts	0x020C, r24
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					}

					updateRedLed(pwm_red);
    2a10:	0e 94 2b 37 	call	0x6e56	; 0x6e56 <updateRedLed>
					updateGreenLed(pwm_green);
    2a14:	80 91 0d 02 	lds	r24, 0x020D
    2a18:	0e 94 3f 37 	call	0x6e7e	; 0x6e7e <updateGreenLed>
					updateBlueLed(pwm_blue);
    2a1c:	80 91 0e 02 	lds	r24, 0x020E
    2a20:	0e 94 53 37 	call	0x6ea6	; 0x6ea6 <updateBlueLed>
    2a24:	20 91 f7 02 	lds	r18, 0x02F7
    2a28:	30 91 f8 02 	lds	r19, 0x02F8
    2a2c:	80 91 f9 02 	lds	r24, 0x02F9
    2a30:	90 91 fa 02 	lds	r25, 0x02FA

	               	break;
    2a34:	45 ce       	rjmp	.-886    	; 0x26c0 <handleIRRemoteCommands+0x34>

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
				speedr = pwm_right_desired;
    2a36:	30 95       	com	r19
    2a38:	21 95       	neg	r18
    2a3a:	3f 4f       	sbci	r19, 0xFF	; 255
    2a3c:	43 ce       	rjmp	.-890    	; 0x26c4 <handleIRRemoteCommands+0x38>
					}
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    2a3e:	c9 01       	movw	r24, r18
    2a40:	91 cf       	rjmp	.-222    	; 0x2964 <handleIRRemoteCommands+0x2d8>
						LED_IR1_HIGH;
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
    2a42:	81 30       	cpi	r24, 0x01	; 1
    2a44:	91 f0       	breq	.+36     	; 0x2a6a <handleIRRemoteCommands+0x3de>
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = 0;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==2) {	// turn on red and on all IRs
    2a46:	82 30       	cpi	r24, 0x02	; 2
    2a48:	a1 f1       	breq	.+104    	; 0x2ab2 <handleIRRemoteCommands+0x426>
						LED_IR1_LOW;
						LED_IR2_LOW;
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = 0;
					} else if(colorState==3) {	// turn on white
    2a4a:	83 30       	cpi	r24, 0x03	; 3
    2a4c:	e9 f1       	breq	.+122    	; 0x2ac8 <handleIRRemoteCommands+0x43c>
						pwm_blue = 0;
						pwm_green = 0;
						pwm_red = 0;
					} else if(colorState==4) {	// turn off all leds
						pwm_blue = MAX_LEDS_PWM;
    2a4e:	8f ef       	ldi	r24, 0xFF	; 255
    2a50:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = MAX_LEDS_PWM;
    2a54:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = MAX_LEDS_PWM;
    2a58:	80 93 0c 02 	sts	0x020C, r24
    2a5c:	d9 cf       	rjmp	.-78     	; 0x2a10 <handleIRRemoteCommands+0x384>
						case 2:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 1;
							break;
						case 3:
							obstacleAvoidanceEnabled = 1;
    2a5e:	81 e0       	ldi	r24, 0x01	; 1
    2a60:	80 93 68 04 	sts	0x0468, r24
							cliffAvoidanceEnabled = 1;
    2a64:	80 93 69 04 	sts	0x0469, r24
    2a68:	23 ce       	rjmp	.-954    	; 0x26b0 <handleIRRemoteCommands+0x24>
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
						pwm_blue = MAX_LEDS_PWM;
    2a6a:	8f ef       	ldi	r24, 0xFF	; 255
    2a6c:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = 0;
    2a70:	10 92 0d 02 	sts	0x020D, r1
						pwm_red = MAX_LEDS_PWM;
    2a74:	80 93 0c 02 	sts	0x020C, r24
    2a78:	cb cf       	rjmp	.-106    	; 0x2a10 <handleIRRemoteCommands+0x384>
				case 5:	// stop motors
				case 51:
					pwm_right_desired = 0;
					pwm_left_desired = 0;
					if(currentSelector == 8) {
						calibrateSensors();
    2a7a:	0e 94 23 3a 	call	0x7446	; 0x7446 <calibrateSensors>
						proximityResult[8] = 1023;	// because the first time this value could be low after calibration
    2a7e:	8f ef       	ldi	r24, 0xFF	; 255
    2a80:	93 e0       	ldi	r25, 0x03	; 3
    2a82:	90 93 68 02 	sts	0x0268, r25
    2a86:	80 93 67 02 	sts	0x0267, r24
						proximityResult[11] = 1023;	// and in that case a false black line will be detected
    2a8a:	90 93 6e 02 	sts	0x026E, r25
    2a8e:	80 93 6d 02 	sts	0x026D, r24
						calibState = 0;
    2a92:	10 92 88 05 	sts	0x0588, r1
						calibVelIndex = 1;
    2a96:	81 e0       	ldi	r24, 0x01	; 1
    2a98:	80 93 ca 04 	sts	0x04CA, r24
						calibrateOdomFlag = 1;
    2a9c:	80 93 c7 04 	sts	0x04C7, r24
    2aa0:	20 91 f7 02 	lds	r18, 0x02F7
    2aa4:	30 91 f8 02 	lds	r19, 0x02F8
    2aa8:	80 91 f9 02 	lds	r24, 0x02F9
    2aac:	90 91 fa 02 	lds	r25, 0x02FA
    2ab0:	07 ce       	rjmp	.-1010   	; 0x26c0 <handleIRRemoteCommands+0x34>
					} else if(colorState==1) {	// turn on green
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = 0;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==2) {	// turn on red and on all IRs
						LED_IR1_LOW;
    2ab2:	44 98       	cbi	0x08, 4	; 8
						LED_IR2_LOW;
    2ab4:	45 98       	cbi	0x08, 5	; 8
						pwm_blue = MAX_LEDS_PWM;
    2ab6:	8f ef       	ldi	r24, 0xFF	; 255
    2ab8:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = MAX_LEDS_PWM;
    2abc:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = 0;
    2ac0:	10 92 0c 02 	sts	0x020C, r1
    2ac4:	80 e0       	ldi	r24, 0x00	; 0
    2ac6:	a4 cf       	rjmp	.-184    	; 0x2a10 <handleIRRemoteCommands+0x384>
					} else if(colorState==3) {	// turn on white
						pwm_blue = 0;
    2ac8:	10 92 0e 02 	sts	0x020E, r1
						pwm_green = 0;
    2acc:	10 92 0d 02 	sts	0x020D, r1
						pwm_red = 0;
    2ad0:	10 92 0c 02 	sts	0x020C, r1
    2ad4:	80 e0       	ldi	r24, 0x00	; 0
    2ad6:	9c cf       	rjmp	.-200    	; 0x2a10 <handleIRRemoteCommands+0x384>

00002ad8 <init_speed_control>:
	//d_speed_control = 5;
	//i_speed_control = 10;
	//i_limit_speed_control = 3200;
	//k_ff_speed_control_left = INIT_KFF;
	//k_ff_speed_control_right = INIT_KFF;
}
    2ad8:	08 95       	ret

00002ada <start_vertical_speed_control_left>:

void start_vertical_speed_control_left(signed int *pwm_left) {
    2ada:	cf 92       	push	r12
    2adc:	df 92       	push	r13
    2ade:	ef 92       	push	r14
    2ae0:	ff 92       	push	r15
    2ae2:	0f 93       	push	r16
    2ae4:	1f 93       	push	r17
    2ae6:	cf 93       	push	r28
    2ae8:	df 93       	push	r29
    2aea:	fc 01       	movw	r30, r24
	
	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).
	
	if(*pwm_left==0) {
    2aec:	80 81       	ld	r24, Z
    2aee:	91 81       	ldd	r25, Z+1	; 0x01
    2af0:	00 97       	sbiw	r24, 0x00	; 0
    2af2:	09 f4       	brne	.+2      	; 0x2af6 <start_vertical_speed_control_left+0x1c>
    2af4:	f7 c0       	rjmp	.+494    	; 0x2ce4 <start_vertical_speed_control_left+0x20a>
		delta_left_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    2af6:	20 91 3a 04 	lds	r18, 0x043A
    2afa:	30 91 3b 04 	lds	r19, 0x043B
    2afe:	41 e0       	ldi	r20, 0x01	; 1
    2b00:	2e 30       	cpi	r18, 0x0E	; 14
    2b02:	34 07       	cpc	r19, r20
    2b04:	0c f4       	brge	.+2      	; 0x2b08 <start_vertical_speed_control_left+0x2e>
    2b06:	c7 c0       	rjmp	.+398    	; 0x2c96 <start_vertical_speed_control_left+0x1bc>
		if(*pwm_left > 0) {
    2b08:	18 16       	cp	r1, r24
    2b0a:	19 06       	cpc	r1, r25
    2b0c:	0c f0       	brlt	.+2      	; 0x2b10 <start_vertical_speed_control_left+0x36>
    2b0e:	68 c1       	rjmp	.+720    	; 0x2de0 <start_vertical_speed_control_left+0x306>
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
    2b10:	88 e6       	ldi	r24, 0x68	; 104
    2b12:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    2b14:	82 1b       	sub	r24, r18
    2b16:	93 0b       	sbc	r25, r19
    2b18:	95 95       	asr	r25
    2b1a:	87 95       	ror	r24
    2b1c:	95 95       	asr	r25
    2b1e:	87 95       	ror	r24
    2b20:	29 e1       	ldi	r18, 0x19	; 25
    2b22:	30 e0       	ldi	r19, 0x00	; 0
    2b24:	28 1b       	sub	r18, r24
    2b26:	39 0b       	sbc	r19, r25
    2b28:	30 93 04 02 	sts	0x0204, r19
    2b2c:	20 93 03 02 	sts	0x0203, r18
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
		}
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    2b30:	c0 91 c8 04 	lds	r28, 0x04C8
    2b34:	d0 91 c9 04 	lds	r29, 0x04C9
    2b38:	d0 93 74 05 	sts	0x0574, r29
    2b3c:	c0 93 73 05 	sts	0x0573, r28
	if(*pwm_left >= 0) {
    2b40:	80 81       	ld	r24, Z
    2b42:	91 81       	ldd	r25, Z+1	; 0x01
    2b44:	97 fd       	sbrc	r25, 7
    2b46:	2e c1       	rjmp	.+604    	; 0x2da4 <start_vertical_speed_control_left+0x2ca>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    2b48:	20 91 ef 02 	lds	r18, 0x02EF
    2b4c:	30 91 f0 02 	lds	r19, 0x02F0
    2b50:	dc 01       	movw	r26, r24
    2b52:	a2 1b       	sub	r26, r18
    2b54:	b3 0b       	sbc	r27, r19
    2b56:	b0 93 c9 04 	sts	0x04C9, r27
    2b5a:	a0 93 c8 04 	sts	0x04C8, r26
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;
    2b5e:	80 91 07 03 	lds	r24, 0x0307
    2b62:	90 91 08 03 	lds	r25, 0x0308
    2b66:	8a 0f       	add	r24, r26
    2b68:	9b 1f       	adc	r25, r27
    2b6a:	90 93 08 03 	sts	0x0308, r25
    2b6e:	80 93 07 03 	sts	0x0307, r24

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
    2b72:	66 e0       	ldi	r22, 0x06	; 6
    2b74:	81 34       	cpi	r24, 0x41	; 65
    2b76:	96 07       	cpc	r25, r22
    2b78:	0c f4       	brge	.+2      	; 0x2b7c <start_vertical_speed_control_left+0xa2>
    2b7a:	cb c0       	rjmp	.+406    	; 0x2d12 <start_vertical_speed_control_left+0x238>
		delta_left_speed_sum = I_LIMIT_VERTICAL;
    2b7c:	80 e4       	ldi	r24, 0x40	; 64
    2b7e:	96 e0       	ldi	r25, 0x06	; 6
    2b80:	90 93 08 03 	sts	0x0308, r25
    2b84:	80 93 07 03 	sts	0x0307, r24
    2b88:	10 ec       	ldi	r17, 0xC0	; 192
    2b8a:	c1 2e       	mov	r12, r17
    2b8c:	12 e1       	ldi	r17, 0x12	; 18
    2b8e:	d1 2e       	mov	r13, r17
    2b90:	e1 2c       	mov	r14, r1
    2b92:	f1 2c       	mov	r15, r1
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_left_speed_controller = (signed long int)(k_ff_speed_control_left*(*pwm_left));
    2b94:	00 81       	ld	r16, Z
    2b96:	11 81       	ldd	r17, Z+1	; 0x01
	pwm_left_speed_controller += (signed long int)(P_VERTICAL * delta_left_speed_current);
    2b98:	9d 01       	movw	r18, r26
    2b9a:	22 0f       	add	r18, r18
    2b9c:	33 1f       	adc	r19, r19
    2b9e:	2a 0f       	add	r18, r26
    2ba0:	3b 1f       	adc	r19, r27
    2ba2:	22 0f       	add	r18, r18
    2ba4:	33 1f       	adc	r19, r19
    2ba6:	22 0f       	add	r18, r18
    2ba8:	33 1f       	adc	r19, r19
    2baa:	22 0f       	add	r18, r18
    2bac:	33 1f       	adc	r19, r19
    2bae:	2a 0f       	add	r18, r26
    2bb0:	3b 1f       	adc	r19, r27
    2bb2:	44 27       	eor	r20, r20
    2bb4:	37 fd       	sbrc	r19, 7
    2bb6:	40 95       	com	r20
    2bb8:	54 2f       	mov	r21, r20
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_left_speed_controller = (signed long int)(k_ff_speed_control_left*(*pwm_left));
    2bba:	80 91 03 02 	lds	r24, 0x0203
    2bbe:	90 91 04 02 	lds	r25, 0x0204
    2bc2:	08 9f       	mul	r16, r24
    2bc4:	b0 01       	movw	r22, r0
    2bc6:	09 9f       	mul	r16, r25
    2bc8:	70 0d       	add	r23, r0
    2bca:	18 9f       	mul	r17, r24
    2bcc:	70 0d       	add	r23, r0
    2bce:	11 24       	eor	r1, r1
    2bd0:	88 27       	eor	r24, r24
    2bd2:	77 fd       	sbrc	r23, 7
    2bd4:	80 95       	com	r24
    2bd6:	98 2f       	mov	r25, r24
	pwm_left_speed_controller += (signed long int)(P_VERTICAL * delta_left_speed_current);
    2bd8:	26 0f       	add	r18, r22
    2bda:	37 1f       	adc	r19, r23
    2bdc:	48 1f       	adc	r20, r24
    2bde:	59 1f       	adc	r21, r25
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
    2be0:	ac 1b       	sub	r26, r28
    2be2:	bd 0b       	sbc	r27, r29
    2be4:	aa 0f       	add	r26, r26
    2be6:	bb 1f       	adc	r27, r27
    2be8:	bd 01       	movw	r22, r26
    2bea:	cb 01       	movw	r24, r22
    2bec:	aa 27       	eor	r26, r26
    2bee:	97 fd       	sbrc	r25, 7
    2bf0:	a0 95       	com	r26
    2bf2:	ba 2f       	mov	r27, r26
    2bf4:	28 0f       	add	r18, r24
    2bf6:	39 1f       	adc	r19, r25
    2bf8:	4a 1f       	adc	r20, r26
    2bfa:	5b 1f       	adc	r21, r27
	pwm_left_speed_controller += (signed long int)(I_VERTICAL*delta_left_speed_sum);
    2bfc:	2c 0d       	add	r18, r12
    2bfe:	3d 1d       	adc	r19, r13
    2c00:	4e 1d       	adc	r20, r14
    2c02:	5f 1d       	adc	r21, r15
    2c04:	20 93 03 03 	sts	0x0303, r18
    2c08:	30 93 04 03 	sts	0x0304, r19
    2c0c:	40 93 05 03 	sts	0x0305, r20
    2c10:	50 93 06 03 	sts	0x0306, r21

	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    2c14:	57 fd       	sbrc	r21, 7
    2c16:	9d c0       	rjmp	.+314    	; 0x2d52 <start_vertical_speed_control_left+0x278>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    2c18:	12 16       	cp	r1, r18
    2c1a:	13 06       	cpc	r1, r19
    2c1c:	14 06       	cpc	r1, r20
    2c1e:	15 06       	cpc	r1, r21
    2c20:	0c f0       	brlt	.+2      	; 0x2c24 <start_vertical_speed_control_left+0x14a>
    2c22:	a4 c0       	rjmp	.+328    	; 0x2d6c <start_vertical_speed_control_left+0x292>
    2c24:	17 fd       	sbrc	r17, 7
    2c26:	c9 c0       	rjmp	.+402    	; 0x2dba <start_vertical_speed_control_left+0x2e0>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    2c28:	21 3c       	cpi	r18, 0xC1	; 193
    2c2a:	7d e5       	ldi	r23, 0x5D	; 93
    2c2c:	37 07       	cpc	r19, r23
    2c2e:	70 e0       	ldi	r23, 0x00	; 0
    2c30:	47 07       	cpc	r20, r23
    2c32:	70 e0       	ldi	r23, 0x00	; 0
    2c34:	57 07       	cpc	r21, r23
    2c36:	0c f4       	brge	.+2      	; 0x2c3a <start_vertical_speed_control_left+0x160>
    2c38:	99 c0       	rjmp	.+306    	; 0x2d6c <start_vertical_speed_control_left+0x292>
    2c3a:	80 ec       	ldi	r24, 0xC0	; 192
    2c3c:	9d e5       	ldi	r25, 0x5D	; 93
    2c3e:	a0 e0       	ldi	r26, 0x00	; 0
    2c40:	b0 e0       	ldi	r27, 0x00	; 0
    2c42:	80 93 03 03 	sts	0x0303, r24
    2c46:	90 93 04 03 	sts	0x0304, r25
    2c4a:	a0 93 05 03 	sts	0x0305, r26
    2c4e:	b0 93 06 03 	sts	0x0306, r27
    2c52:	2c ed       	ldi	r18, 0xDC	; 220
    2c54:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = (signed int)(pwm_left_speed_controller>>4);
    2c56:	31 83       	std	Z+1, r19	; 0x01
    2c58:	20 83       	st	Z, r18

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
    2c5a:	80 91 e9 02 	lds	r24, 0x02E9
    2c5e:	90 91 ea 02 	lds	r25, 0x02EA
    2c62:	18 16       	cp	r1, r24
    2c64:	19 06       	cpc	r1, r25
    2c66:	0c f0       	brlt	.+2      	; 0x2c6a <start_vertical_speed_control_left+0x190>
    2c68:	98 c0       	rjmp	.+304    	; 0x2d9a <start_vertical_speed_control_left+0x2c0>
		*pwm_left += 1;
    2c6a:	2f 5f       	subi	r18, 0xFF	; 255
    2c6c:	3f 4f       	sbci	r19, 0xFF	; 255
    2c6e:	31 83       	std	Z+1, r19	; 0x01
    2c70:	20 83       	st	Z, r18
	} else {
		*pwm_left -= 1;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    2c72:	42 e0       	ldi	r20, 0x02	; 2
    2c74:	21 30       	cpi	r18, 0x01	; 1
    2c76:	34 07       	cpc	r19, r20
    2c78:	0c f4       	brge	.+2      	; 0x2c7c <start_vertical_speed_control_left+0x1a2>
    2c7a:	41 c0       	rjmp	.+130    	; 0x2cfe <start_vertical_speed_control_left+0x224>
    2c7c:	80 e0       	ldi	r24, 0x00	; 0
    2c7e:	92 e0       	ldi	r25, 0x02	; 2
    2c80:	91 83       	std	Z+1, r25	; 0x01
    2c82:	80 83       	st	Z, r24
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);


}
    2c84:	df 91       	pop	r29
    2c86:	cf 91       	pop	r28
    2c88:	1f 91       	pop	r17
    2c8a:	0f 91       	pop	r16
    2c8c:	ff 90       	pop	r15
    2c8e:	ef 90       	pop	r14
    2c90:	df 90       	pop	r13
    2c92:	cf 90       	pop	r12
    2c94:	08 95       	ret
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    2c96:	24 3b       	cpi	r18, 0xB4	; 180
    2c98:	31 05       	cpc	r19, r1
    2c9a:	94 f4       	brge	.+36     	; 0x2cc0 <start_vertical_speed_control_left+0x1e6>
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
    2c9c:	2a 35       	cpi	r18, 0x5A	; 90
    2c9e:	31 05       	cpc	r19, r1
    2ca0:	7c f4       	brge	.+30     	; 0x2cc0 <start_vertical_speed_control_left+0x1e6>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
    2ca2:	18 16       	cp	r1, r24
    2ca4:	19 06       	cpc	r1, r25
    2ca6:	0c f0       	brlt	.+2      	; 0x2caa <start_vertical_speed_control_left+0x1d0>
    2ca8:	a9 c0       	rjmp	.+338    	; 0x2dfc <start_vertical_speed_control_left+0x322>
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
    2caa:	35 95       	asr	r19
    2cac:	27 95       	ror	r18
    2cae:	35 95       	asr	r19
    2cb0:	27 95       	ror	r18
    2cb2:	27 5e       	subi	r18, 0xE7	; 231
    2cb4:	3f 4f       	sbci	r19, 0xFF	; 255
    2cb6:	30 93 04 02 	sts	0x0204, r19
    2cba:	20 93 03 02 	sts	0x0203, r18
    2cbe:	38 cf       	rjmp	.-400    	; 0x2b30 <start_vertical_speed_control_left+0x56>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
    2cc0:	18 16       	cp	r1, r24
    2cc2:	19 06       	cpc	r1, r25
    2cc4:	0c f0       	brlt	.+2      	; 0x2cc8 <start_vertical_speed_control_left+0x1ee>
    2cc6:	42 c0       	rjmp	.+132    	; 0x2d4c <start_vertical_speed_control_left+0x272>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
    2cc8:	84 eb       	ldi	r24, 0xB4	; 180
    2cca:	90 e0       	ldi	r25, 0x00	; 0
    2ccc:	82 1b       	sub	r24, r18
    2cce:	93 0b       	sbc	r25, r19
    2cd0:	95 95       	asr	r25
    2cd2:	87 95       	ror	r24
    2cd4:	95 95       	asr	r25
    2cd6:	87 95       	ror	r24
    2cd8:	49 96       	adiw	r24, 0x19	; 25
    2cda:	90 93 04 02 	sts	0x0204, r25
    2cde:	80 93 03 02 	sts	0x0203, r24
    2ce2:	26 cf       	rjmp	.-436    	; 0x2b30 <start_vertical_speed_control_left+0x56>
void start_vertical_speed_control_left(signed int *pwm_left) {
	
	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).
	
	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    2ce4:	10 92 08 03 	sts	0x0308, r1
    2ce8:	10 92 07 03 	sts	0x0307, r1
		delta_left_speed_current = 0;
    2cec:	10 92 c9 04 	sts	0x04C9, r1
    2cf0:	10 92 c8 04 	sts	0x04C8, r1
		delta_left_speed_prev = 0;
    2cf4:	10 92 74 05 	sts	0x0574, r1
    2cf8:	10 92 73 05 	sts	0x0573, r1
		return;
    2cfc:	c3 cf       	rjmp	.-122    	; 0x2c84 <start_vertical_speed_control_left+0x1aa>
	} else {
		*pwm_left -= 1;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    2cfe:	6e ef       	ldi	r22, 0xFE	; 254
    2d00:	20 30       	cpi	r18, 0x00	; 0
    2d02:	36 07       	cpc	r19, r22
    2d04:	0c f0       	brlt	.+2      	; 0x2d08 <start_vertical_speed_control_left+0x22e>
    2d06:	be cf       	rjmp	.-132    	; 0x2c84 <start_vertical_speed_control_left+0x1aa>
    2d08:	80 e0       	ldi	r24, 0x00	; 0
    2d0a:	9e ef       	ldi	r25, 0xFE	; 254
    2d0c:	91 83       	std	Z+1, r25	; 0x01
    2d0e:	80 83       	st	Z, r24
    2d10:	b9 cf       	rjmp	.-142    	; 0x2c84 <start_vertical_speed_control_left+0x1aa>
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    2d12:	79 ef       	ldi	r23, 0xF9	; 249
    2d14:	80 3c       	cpi	r24, 0xC0	; 192
    2d16:	97 07       	cpc	r25, r23
    2d18:	7c f4       	brge	.+30     	; 0x2d38 <start_vertical_speed_control_left+0x25e>
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
    2d1a:	80 ec       	ldi	r24, 0xC0	; 192
    2d1c:	99 ef       	ldi	r25, 0xF9	; 249
    2d1e:	90 93 08 03 	sts	0x0308, r25
    2d22:	80 93 07 03 	sts	0x0307, r24
    2d26:	60 e4       	ldi	r22, 0x40	; 64
    2d28:	c6 2e       	mov	r12, r22
    2d2a:	6d ee       	ldi	r22, 0xED	; 237
    2d2c:	d6 2e       	mov	r13, r22
    2d2e:	6f ef       	ldi	r22, 0xFF	; 255
    2d30:	e6 2e       	mov	r14, r22
    2d32:	6f ef       	ldi	r22, 0xFF	; 255
    2d34:	f6 2e       	mov	r15, r22
    2d36:	2e cf       	rjmp	.-420    	; 0x2b94 <start_vertical_speed_control_left+0xba>
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    2d38:	6c 01       	movw	r12, r24
    2d3a:	cc 0c       	add	r12, r12
    2d3c:	dd 1c       	adc	r13, r13
    2d3e:	c8 0e       	add	r12, r24
    2d40:	d9 1e       	adc	r13, r25
    2d42:	ee 24       	eor	r14, r14
    2d44:	d7 fc       	sbrc	r13, 7
    2d46:	e0 94       	com	r14
    2d48:	fe 2c       	mov	r15, r14
    2d4a:	24 cf       	rjmp	.-440    	; 0x2b94 <start_vertical_speed_control_left+0xba>
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    2d4c:	84 eb       	ldi	r24, 0xB4	; 180
    2d4e:	90 e0       	ldi	r25, 0x00	; 0
    2d50:	e1 ce       	rjmp	.-574    	; 0x2b14 <start_vertical_speed_control_left+0x3a>
	pwm_left_speed_controller += (signed long int)(P_VERTICAL * delta_left_speed_current);
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
	pwm_left_speed_controller += (signed long int)(I_VERTICAL*delta_left_speed_sum);

	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    2d52:	17 fd       	sbrc	r17, 7
    2d54:	0b c0       	rjmp	.+22     	; 0x2d6c <start_vertical_speed_control_left+0x292>
		pwm_left_speed_controller = 0;
    2d56:	10 92 03 03 	sts	0x0303, r1
    2d5a:	10 92 04 03 	sts	0x0304, r1
    2d5e:	10 92 05 03 	sts	0x0305, r1
    2d62:	10 92 06 03 	sts	0x0306, r1
    2d66:	20 e0       	ldi	r18, 0x00	; 0
    2d68:	30 e0       	ldi	r19, 0x00	; 0
    2d6a:	a9 01       	movw	r20, r18
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    2d6c:	20 34       	cpi	r18, 0x40	; 64
    2d6e:	82 ea       	ldi	r24, 0xA2	; 162
    2d70:	38 07       	cpc	r19, r24
    2d72:	8f ef       	ldi	r24, 0xFF	; 255
    2d74:	48 07       	cpc	r20, r24
    2d76:	8f ef       	ldi	r24, 0xFF	; 255
    2d78:	58 07       	cpc	r21, r24
    2d7a:	54 f5       	brge	.+84     	; 0x2dd0 <start_vertical_speed_control_left+0x2f6>
    2d7c:	80 e4       	ldi	r24, 0x40	; 64
    2d7e:	92 ea       	ldi	r25, 0xA2	; 162
    2d80:	af ef       	ldi	r26, 0xFF	; 255
    2d82:	bf ef       	ldi	r27, 0xFF	; 255
    2d84:	80 93 03 03 	sts	0x0303, r24
    2d88:	90 93 04 03 	sts	0x0304, r25
    2d8c:	a0 93 05 03 	sts	0x0305, r26
    2d90:	b0 93 06 03 	sts	0x0306, r27
    2d94:	24 e2       	ldi	r18, 0x24	; 36
    2d96:	3a ef       	ldi	r19, 0xFA	; 250
    2d98:	5e cf       	rjmp	.-324    	; 0x2c56 <start_vertical_speed_control_left+0x17c>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
		*pwm_left += 1;
	} else {
		*pwm_left -= 1;
    2d9a:	21 50       	subi	r18, 0x01	; 1
    2d9c:	30 40       	sbci	r19, 0x00	; 0
    2d9e:	31 83       	std	Z+1, r19	; 0x01
    2da0:	20 83       	st	Z, r18
    2da2:	67 cf       	rjmp	.-306    	; 0x2c72 <start_vertical_speed_control_left+0x198>
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    2da4:	a0 91 ef 02 	lds	r26, 0x02EF
    2da8:	b0 91 f0 02 	lds	r27, 0x02F0
    2dac:	a8 0f       	add	r26, r24
    2dae:	b9 1f       	adc	r27, r25
    2db0:	b0 93 c9 04 	sts	0x04C9, r27
    2db4:	a0 93 c8 04 	sts	0x04C8, r26
    2db8:	d2 ce       	rjmp	.-604    	; 0x2b5e <start_vertical_speed_control_left+0x84>
	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    2dba:	10 92 03 03 	sts	0x0303, r1
    2dbe:	10 92 04 03 	sts	0x0304, r1
    2dc2:	10 92 05 03 	sts	0x0305, r1
    2dc6:	10 92 06 03 	sts	0x0306, r1
    2dca:	20 e0       	ldi	r18, 0x00	; 0
    2dcc:	30 e0       	ldi	r19, 0x00	; 0
    2dce:	a9 01       	movw	r20, r18
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    2dd0:	84 e0       	ldi	r24, 0x04	; 4
    2dd2:	55 95       	asr	r21
    2dd4:	47 95       	ror	r20
    2dd6:	37 95       	ror	r19
    2dd8:	27 95       	ror	r18
    2dda:	8a 95       	dec	r24
    2ddc:	d1 f7       	brne	.-12     	; 0x2dd2 <start_vertical_speed_control_left+0x2f8>
    2dde:	3b cf       	rjmp	.-394    	; 0x2c56 <start_vertical_speed_control_left+0x17c>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
    2de0:	88 e6       	ldi	r24, 0x68	; 104
    2de2:	91 e0       	ldi	r25, 0x01	; 1
    2de4:	82 1b       	sub	r24, r18
    2de6:	93 0b       	sbc	r25, r19
    2de8:	95 95       	asr	r25
    2dea:	87 95       	ror	r24
    2dec:	95 95       	asr	r25
    2dee:	87 95       	ror	r24
    2df0:	49 96       	adiw	r24, 0x19	; 25
    2df2:	90 93 04 02 	sts	0x0204, r25
    2df6:	80 93 03 02 	sts	0x0203, r24
    2dfa:	9a ce       	rjmp	.-716    	; 0x2b30 <start_vertical_speed_control_left+0x56>
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
    2dfc:	35 95       	asr	r19
    2dfe:	27 95       	ror	r18
    2e00:	35 95       	asr	r19
    2e02:	27 95       	ror	r18
    2e04:	89 e1       	ldi	r24, 0x19	; 25
    2e06:	90 e0       	ldi	r25, 0x00	; 0
    2e08:	82 1b       	sub	r24, r18
    2e0a:	93 0b       	sbc	r25, r19
    2e0c:	90 93 04 02 	sts	0x0204, r25
    2e10:	80 93 03 02 	sts	0x0203, r24
    2e14:	8d ce       	rjmp	.-742    	; 0x2b30 <start_vertical_speed_control_left+0x56>

00002e16 <start_vertical_speed_control_right>:


}


void start_vertical_speed_control_right(signed int *pwm_right) {
    2e16:	cf 92       	push	r12
    2e18:	df 92       	push	r13
    2e1a:	ef 92       	push	r14
    2e1c:	ff 92       	push	r15
    2e1e:	0f 93       	push	r16
    2e20:	1f 93       	push	r17
    2e22:	cf 93       	push	r28
    2e24:	df 93       	push	r29
    2e26:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    2e28:	80 81       	ld	r24, Z
    2e2a:	91 81       	ldd	r25, Z+1	; 0x01
    2e2c:	00 97       	sbiw	r24, 0x00	; 0
    2e2e:	09 f4       	brne	.+2      	; 0x2e32 <start_vertical_speed_control_right+0x1c>
    2e30:	f7 c0       	rjmp	.+494    	; 0x3020 <start_vertical_speed_control_right+0x20a>
		delta_right_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    2e32:	20 91 3a 04 	lds	r18, 0x043A
    2e36:	30 91 3b 04 	lds	r19, 0x043B
    2e3a:	41 e0       	ldi	r20, 0x01	; 1
    2e3c:	2e 30       	cpi	r18, 0x0E	; 14
    2e3e:	34 07       	cpc	r19, r20
    2e40:	0c f4       	brge	.+2      	; 0x2e44 <start_vertical_speed_control_right+0x2e>
    2e42:	c7 c0       	rjmp	.+398    	; 0x2fd2 <start_vertical_speed_control_right+0x1bc>
		if(*pwm_right > 0) {
    2e44:	18 16       	cp	r1, r24
    2e46:	19 06       	cpc	r1, r25
    2e48:	0c f0       	brlt	.+2      	; 0x2e4c <start_vertical_speed_control_right+0x36>
    2e4a:	68 c1       	rjmp	.+720    	; 0x311c <start_vertical_speed_control_right+0x306>
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
    2e4c:	88 e6       	ldi	r24, 0x68	; 104
    2e4e:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    2e50:	82 1b       	sub	r24, r18
    2e52:	93 0b       	sbc	r25, r19
    2e54:	95 95       	asr	r25
    2e56:	87 95       	ror	r24
    2e58:	95 95       	asr	r25
    2e5a:	87 95       	ror	r24
    2e5c:	29 e1       	ldi	r18, 0x19	; 25
    2e5e:	30 e0       	ldi	r19, 0x00	; 0
    2e60:	28 1b       	sub	r18, r24
    2e62:	39 0b       	sbc	r19, r25
    2e64:	30 93 06 02 	sts	0x0206, r19
    2e68:	20 93 05 02 	sts	0x0205, r18
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
		}
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    2e6c:	c0 91 82 05 	lds	r28, 0x0582
    2e70:	d0 91 83 05 	lds	r29, 0x0583
    2e74:	d0 93 cc 04 	sts	0x04CC, r29
    2e78:	c0 93 cb 04 	sts	0x04CB, r28
	if(*pwm_right >= 0) {
    2e7c:	80 81       	ld	r24, Z
    2e7e:	91 81       	ldd	r25, Z+1	; 0x01
    2e80:	97 fd       	sbrc	r25, 7
    2e82:	2e c1       	rjmp	.+604    	; 0x30e0 <start_vertical_speed_control_right+0x2ca>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    2e84:	20 91 f1 02 	lds	r18, 0x02F1
    2e88:	30 91 f2 02 	lds	r19, 0x02F2
    2e8c:	dc 01       	movw	r26, r24
    2e8e:	a2 1b       	sub	r26, r18
    2e90:	b3 0b       	sbc	r27, r19
    2e92:	b0 93 83 05 	sts	0x0583, r27
    2e96:	a0 93 82 05 	sts	0x0582, r26
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    2e9a:	80 91 09 03 	lds	r24, 0x0309
    2e9e:	90 91 0a 03 	lds	r25, 0x030A
    2ea2:	8a 0f       	add	r24, r26
    2ea4:	9b 1f       	adc	r25, r27
    2ea6:	90 93 0a 03 	sts	0x030A, r25
    2eaa:	80 93 09 03 	sts	0x0309, r24

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
    2eae:	66 e0       	ldi	r22, 0x06	; 6
    2eb0:	81 34       	cpi	r24, 0x41	; 65
    2eb2:	96 07       	cpc	r25, r22
    2eb4:	0c f4       	brge	.+2      	; 0x2eb8 <start_vertical_speed_control_right+0xa2>
    2eb6:	cb c0       	rjmp	.+406    	; 0x304e <start_vertical_speed_control_right+0x238>
		delta_right_speed_sum = I_LIMIT_VERTICAL;
    2eb8:	80 e4       	ldi	r24, 0x40	; 64
    2eba:	96 e0       	ldi	r25, 0x06	; 6
    2ebc:	90 93 0a 03 	sts	0x030A, r25
    2ec0:	80 93 09 03 	sts	0x0309, r24
    2ec4:	40 ec       	ldi	r20, 0xC0	; 192
    2ec6:	c4 2e       	mov	r12, r20
    2ec8:	42 e1       	ldi	r20, 0x12	; 18
    2eca:	d4 2e       	mov	r13, r20
    2ecc:	e1 2c       	mov	r14, r1
    2ece:	f1 2c       	mov	r15, r1
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_right_speed_controller = (signed long int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
    2ed0:	00 81       	ld	r16, Z
    2ed2:	11 81       	ldd	r17, Z+1	; 0x01
	pwm_right_speed_controller += (signed long int)(P_VERTICAL * delta_right_speed_current);
    2ed4:	9d 01       	movw	r18, r26
    2ed6:	22 0f       	add	r18, r18
    2ed8:	33 1f       	adc	r19, r19
    2eda:	2a 0f       	add	r18, r26
    2edc:	3b 1f       	adc	r19, r27
    2ede:	22 0f       	add	r18, r18
    2ee0:	33 1f       	adc	r19, r19
    2ee2:	22 0f       	add	r18, r18
    2ee4:	33 1f       	adc	r19, r19
    2ee6:	22 0f       	add	r18, r18
    2ee8:	33 1f       	adc	r19, r19
    2eea:	2a 0f       	add	r18, r26
    2eec:	3b 1f       	adc	r19, r27
    2eee:	44 27       	eor	r20, r20
    2ef0:	37 fd       	sbrc	r19, 7
    2ef2:	40 95       	com	r20
    2ef4:	54 2f       	mov	r21, r20
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_right_speed_controller = (signed long int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
    2ef6:	80 91 05 02 	lds	r24, 0x0205
    2efa:	90 91 06 02 	lds	r25, 0x0206
    2efe:	08 9f       	mul	r16, r24
    2f00:	b0 01       	movw	r22, r0
    2f02:	09 9f       	mul	r16, r25
    2f04:	70 0d       	add	r23, r0
    2f06:	18 9f       	mul	r17, r24
    2f08:	70 0d       	add	r23, r0
    2f0a:	11 24       	eor	r1, r1
    2f0c:	88 27       	eor	r24, r24
    2f0e:	77 fd       	sbrc	r23, 7
    2f10:	80 95       	com	r24
    2f12:	98 2f       	mov	r25, r24
	pwm_right_speed_controller += (signed long int)(P_VERTICAL * delta_right_speed_current);
    2f14:	26 0f       	add	r18, r22
    2f16:	37 1f       	adc	r19, r23
    2f18:	48 1f       	adc	r20, r24
    2f1a:	59 1f       	adc	r21, r25
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
    2f1c:	ac 1b       	sub	r26, r28
    2f1e:	bd 0b       	sbc	r27, r29
    2f20:	aa 0f       	add	r26, r26
    2f22:	bb 1f       	adc	r27, r27
    2f24:	bd 01       	movw	r22, r26
    2f26:	cb 01       	movw	r24, r22
    2f28:	aa 27       	eor	r26, r26
    2f2a:	97 fd       	sbrc	r25, 7
    2f2c:	a0 95       	com	r26
    2f2e:	ba 2f       	mov	r27, r26
    2f30:	28 0f       	add	r18, r24
    2f32:	39 1f       	adc	r19, r25
    2f34:	4a 1f       	adc	r20, r26
    2f36:	5b 1f       	adc	r21, r27
	pwm_right_speed_controller += (signed long int)(I_VERTICAL*delta_right_speed_sum);
    2f38:	2c 0d       	add	r18, r12
    2f3a:	3d 1d       	adc	r19, r13
    2f3c:	4e 1d       	adc	r20, r14
    2f3e:	5f 1d       	adc	r21, r15
    2f40:	20 93 ff 02 	sts	0x02FF, r18
    2f44:	30 93 00 03 	sts	0x0300, r19
    2f48:	40 93 01 03 	sts	0x0301, r20
    2f4c:	50 93 02 03 	sts	0x0302, r21

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    2f50:	57 fd       	sbrc	r21, 7
    2f52:	9d c0       	rjmp	.+314    	; 0x308e <start_vertical_speed_control_right+0x278>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    2f54:	12 16       	cp	r1, r18
    2f56:	13 06       	cpc	r1, r19
    2f58:	14 06       	cpc	r1, r20
    2f5a:	15 06       	cpc	r1, r21
    2f5c:	0c f0       	brlt	.+2      	; 0x2f60 <start_vertical_speed_control_right+0x14a>
    2f5e:	a4 c0       	rjmp	.+328    	; 0x30a8 <start_vertical_speed_control_right+0x292>
    2f60:	17 fd       	sbrc	r17, 7
    2f62:	c9 c0       	rjmp	.+402    	; 0x30f6 <start_vertical_speed_control_right+0x2e0>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    2f64:	21 3c       	cpi	r18, 0xC1	; 193
    2f66:	7d e5       	ldi	r23, 0x5D	; 93
    2f68:	37 07       	cpc	r19, r23
    2f6a:	70 e0       	ldi	r23, 0x00	; 0
    2f6c:	47 07       	cpc	r20, r23
    2f6e:	70 e0       	ldi	r23, 0x00	; 0
    2f70:	57 07       	cpc	r21, r23
    2f72:	0c f4       	brge	.+2      	; 0x2f76 <start_vertical_speed_control_right+0x160>
    2f74:	99 c0       	rjmp	.+306    	; 0x30a8 <start_vertical_speed_control_right+0x292>
    2f76:	80 ec       	ldi	r24, 0xC0	; 192
    2f78:	9d e5       	ldi	r25, 0x5D	; 93
    2f7a:	a0 e0       	ldi	r26, 0x00	; 0
    2f7c:	b0 e0       	ldi	r27, 0x00	; 0
    2f7e:	80 93 ff 02 	sts	0x02FF, r24
    2f82:	90 93 00 03 	sts	0x0300, r25
    2f86:	a0 93 01 03 	sts	0x0301, r26
    2f8a:	b0 93 02 03 	sts	0x0302, r27
    2f8e:	2c ed       	ldi	r18, 0xDC	; 220
    2f90:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = (signed int)(pwm_right_speed_controller>>4);
    2f92:	31 83       	std	Z+1, r19	; 0x01
    2f94:	20 83       	st	Z, r18

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
    2f96:	80 91 e7 02 	lds	r24, 0x02E7
    2f9a:	90 91 e8 02 	lds	r25, 0x02E8
    2f9e:	18 16       	cp	r1, r24
    2fa0:	19 06       	cpc	r1, r25
    2fa2:	0c f0       	brlt	.+2      	; 0x2fa6 <start_vertical_speed_control_right+0x190>
    2fa4:	98 c0       	rjmp	.+304    	; 0x30d6 <start_vertical_speed_control_right+0x2c0>
		*pwm_right += 1;
    2fa6:	2f 5f       	subi	r18, 0xFF	; 255
    2fa8:	3f 4f       	sbci	r19, 0xFF	; 255
    2faa:	31 83       	std	Z+1, r19	; 0x01
    2fac:	20 83       	st	Z, r18
	} else {
		*pwm_right -= 1;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    2fae:	42 e0       	ldi	r20, 0x02	; 2
    2fb0:	21 30       	cpi	r18, 0x01	; 1
    2fb2:	34 07       	cpc	r19, r20
    2fb4:	0c f4       	brge	.+2      	; 0x2fb8 <start_vertical_speed_control_right+0x1a2>
    2fb6:	41 c0       	rjmp	.+130    	; 0x303a <start_vertical_speed_control_right+0x224>
    2fb8:	80 e0       	ldi	r24, 0x00	; 0
    2fba:	92 e0       	ldi	r25, 0x02	; 2
    2fbc:	91 83       	std	Z+1, r25	; 0x01
    2fbe:	80 83       	st	Z, r24
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    2fc0:	df 91       	pop	r29
    2fc2:	cf 91       	pop	r28
    2fc4:	1f 91       	pop	r17
    2fc6:	0f 91       	pop	r16
    2fc8:	ff 90       	pop	r15
    2fca:	ef 90       	pop	r14
    2fcc:	df 90       	pop	r13
    2fce:	cf 90       	pop	r12
    2fd0:	08 95       	ret
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    2fd2:	24 3b       	cpi	r18, 0xB4	; 180
    2fd4:	31 05       	cpc	r19, r1
    2fd6:	94 f4       	brge	.+36     	; 0x2ffc <start_vertical_speed_control_right+0x1e6>
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
    2fd8:	2a 35       	cpi	r18, 0x5A	; 90
    2fda:	31 05       	cpc	r19, r1
    2fdc:	7c f4       	brge	.+30     	; 0x2ffc <start_vertical_speed_control_right+0x1e6>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
    2fde:	18 16       	cp	r1, r24
    2fe0:	19 06       	cpc	r1, r25
    2fe2:	0c f0       	brlt	.+2      	; 0x2fe6 <start_vertical_speed_control_right+0x1d0>
    2fe4:	a9 c0       	rjmp	.+338    	; 0x3138 <start_vertical_speed_control_right+0x322>
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
    2fe6:	35 95       	asr	r19
    2fe8:	27 95       	ror	r18
    2fea:	35 95       	asr	r19
    2fec:	27 95       	ror	r18
    2fee:	27 5e       	subi	r18, 0xE7	; 231
    2ff0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ff2:	30 93 06 02 	sts	0x0206, r19
    2ff6:	20 93 05 02 	sts	0x0205, r18
    2ffa:	38 cf       	rjmp	.-400    	; 0x2e6c <start_vertical_speed_control_right+0x56>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
    2ffc:	18 16       	cp	r1, r24
    2ffe:	19 06       	cpc	r1, r25
    3000:	0c f0       	brlt	.+2      	; 0x3004 <start_vertical_speed_control_right+0x1ee>
    3002:	42 c0       	rjmp	.+132    	; 0x3088 <start_vertical_speed_control_right+0x272>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
    3004:	84 eb       	ldi	r24, 0xB4	; 180
    3006:	90 e0       	ldi	r25, 0x00	; 0
    3008:	82 1b       	sub	r24, r18
    300a:	93 0b       	sbc	r25, r19
    300c:	95 95       	asr	r25
    300e:	87 95       	ror	r24
    3010:	95 95       	asr	r25
    3012:	87 95       	ror	r24
    3014:	49 96       	adiw	r24, 0x19	; 25
    3016:	90 93 06 02 	sts	0x0206, r25
    301a:	80 93 05 02 	sts	0x0205, r24
    301e:	26 cf       	rjmp	.-436    	; 0x2e6c <start_vertical_speed_control_right+0x56>
void start_vertical_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    3020:	10 92 0a 03 	sts	0x030A, r1
    3024:	10 92 09 03 	sts	0x0309, r1
		delta_right_speed_current = 0;
    3028:	10 92 83 05 	sts	0x0583, r1
    302c:	10 92 82 05 	sts	0x0582, r1
		delta_right_speed_prev = 0;
    3030:	10 92 cc 04 	sts	0x04CC, r1
    3034:	10 92 cb 04 	sts	0x04CB, r1
		return;
    3038:	c3 cf       	rjmp	.-122    	; 0x2fc0 <start_vertical_speed_control_right+0x1aa>
	} else {
		*pwm_right -= 1;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    303a:	6e ef       	ldi	r22, 0xFE	; 254
    303c:	20 30       	cpi	r18, 0x00	; 0
    303e:	36 07       	cpc	r19, r22
    3040:	0c f0       	brlt	.+2      	; 0x3044 <start_vertical_speed_control_right+0x22e>
    3042:	be cf       	rjmp	.-132    	; 0x2fc0 <start_vertical_speed_control_right+0x1aa>
    3044:	80 e0       	ldi	r24, 0x00	; 0
    3046:	9e ef       	ldi	r25, 0xFE	; 254
    3048:	91 83       	std	Z+1, r25	; 0x01
    304a:	80 83       	st	Z, r24
    304c:	b9 cf       	rjmp	.-142    	; 0x2fc0 <start_vertical_speed_control_right+0x1aa>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    304e:	79 ef       	ldi	r23, 0xF9	; 249
    3050:	80 3c       	cpi	r24, 0xC0	; 192
    3052:	97 07       	cpc	r25, r23
    3054:	7c f4       	brge	.+30     	; 0x3074 <start_vertical_speed_control_right+0x25e>
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
    3056:	80 ec       	ldi	r24, 0xC0	; 192
    3058:	99 ef       	ldi	r25, 0xF9	; 249
    305a:	90 93 0a 03 	sts	0x030A, r25
    305e:	80 93 09 03 	sts	0x0309, r24
    3062:	20 e4       	ldi	r18, 0x40	; 64
    3064:	c2 2e       	mov	r12, r18
    3066:	2d ee       	ldi	r18, 0xED	; 237
    3068:	d2 2e       	mov	r13, r18
    306a:	2f ef       	ldi	r18, 0xFF	; 255
    306c:	e2 2e       	mov	r14, r18
    306e:	2f ef       	ldi	r18, 0xFF	; 255
    3070:	f2 2e       	mov	r15, r18
    3072:	2e cf       	rjmp	.-420    	; 0x2ed0 <start_vertical_speed_control_right+0xba>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    3074:	6c 01       	movw	r12, r24
    3076:	cc 0c       	add	r12, r12
    3078:	dd 1c       	adc	r13, r13
    307a:	c8 0e       	add	r12, r24
    307c:	d9 1e       	adc	r13, r25
    307e:	ee 24       	eor	r14, r14
    3080:	d7 fc       	sbrc	r13, 7
    3082:	e0 94       	com	r14
    3084:	fe 2c       	mov	r15, r14
    3086:	24 cf       	rjmp	.-440    	; 0x2ed0 <start_vertical_speed_control_right+0xba>
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    3088:	84 eb       	ldi	r24, 0xB4	; 180
    308a:	90 e0       	ldi	r25, 0x00	; 0
    308c:	e1 ce       	rjmp	.-574    	; 0x2e50 <start_vertical_speed_control_right+0x3a>
	pwm_right_speed_controller += (signed long int)(P_VERTICAL * delta_right_speed_current);
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
	pwm_right_speed_controller += (signed long int)(I_VERTICAL*delta_right_speed_sum);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    308e:	17 fd       	sbrc	r17, 7
    3090:	0b c0       	rjmp	.+22     	; 0x30a8 <start_vertical_speed_control_right+0x292>
		pwm_right_speed_controller = 0;
    3092:	10 92 ff 02 	sts	0x02FF, r1
    3096:	10 92 00 03 	sts	0x0300, r1
    309a:	10 92 01 03 	sts	0x0301, r1
    309e:	10 92 02 03 	sts	0x0302, r1
    30a2:	20 e0       	ldi	r18, 0x00	; 0
    30a4:	30 e0       	ldi	r19, 0x00	; 0
    30a6:	a9 01       	movw	r20, r18
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    30a8:	20 34       	cpi	r18, 0x40	; 64
    30aa:	82 ea       	ldi	r24, 0xA2	; 162
    30ac:	38 07       	cpc	r19, r24
    30ae:	8f ef       	ldi	r24, 0xFF	; 255
    30b0:	48 07       	cpc	r20, r24
    30b2:	8f ef       	ldi	r24, 0xFF	; 255
    30b4:	58 07       	cpc	r21, r24
    30b6:	54 f5       	brge	.+84     	; 0x310c <start_vertical_speed_control_right+0x2f6>
    30b8:	80 e4       	ldi	r24, 0x40	; 64
    30ba:	92 ea       	ldi	r25, 0xA2	; 162
    30bc:	af ef       	ldi	r26, 0xFF	; 255
    30be:	bf ef       	ldi	r27, 0xFF	; 255
    30c0:	80 93 ff 02 	sts	0x02FF, r24
    30c4:	90 93 00 03 	sts	0x0300, r25
    30c8:	a0 93 01 03 	sts	0x0301, r26
    30cc:	b0 93 02 03 	sts	0x0302, r27
    30d0:	24 e2       	ldi	r18, 0x24	; 36
    30d2:	3a ef       	ldi	r19, 0xFA	; 250
    30d4:	5e cf       	rjmp	.-324    	; 0x2f92 <start_vertical_speed_control_right+0x17c>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
		*pwm_right += 1;
	} else {
		*pwm_right -= 1;
    30d6:	21 50       	subi	r18, 0x01	; 1
    30d8:	30 40       	sbci	r19, 0x00	; 0
    30da:	31 83       	std	Z+1, r19	; 0x01
    30dc:	20 83       	st	Z, r18
    30de:	67 cf       	rjmp	.-306    	; 0x2fae <start_vertical_speed_control_right+0x198>
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    30e0:	a0 91 f1 02 	lds	r26, 0x02F1
    30e4:	b0 91 f2 02 	lds	r27, 0x02F2
    30e8:	a8 0f       	add	r26, r24
    30ea:	b9 1f       	adc	r27, r25
    30ec:	b0 93 83 05 	sts	0x0583, r27
    30f0:	a0 93 82 05 	sts	0x0582, r26
    30f4:	d2 ce       	rjmp	.-604    	; 0x2e9a <start_vertical_speed_control_right+0x84>
	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    30f6:	10 92 ff 02 	sts	0x02FF, r1
    30fa:	10 92 00 03 	sts	0x0300, r1
    30fe:	10 92 01 03 	sts	0x0301, r1
    3102:	10 92 02 03 	sts	0x0302, r1
    3106:	20 e0       	ldi	r18, 0x00	; 0
    3108:	30 e0       	ldi	r19, 0x00	; 0
    310a:	a9 01       	movw	r20, r18
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    310c:	64 e0       	ldi	r22, 0x04	; 4
    310e:	55 95       	asr	r21
    3110:	47 95       	ror	r20
    3112:	37 95       	ror	r19
    3114:	27 95       	ror	r18
    3116:	6a 95       	dec	r22
    3118:	d1 f7       	brne	.-12     	; 0x310e <start_vertical_speed_control_right+0x2f8>
    311a:	3b cf       	rjmp	.-394    	; 0x2f92 <start_vertical_speed_control_right+0x17c>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
    311c:	88 e6       	ldi	r24, 0x68	; 104
    311e:	91 e0       	ldi	r25, 0x01	; 1
    3120:	82 1b       	sub	r24, r18
    3122:	93 0b       	sbc	r25, r19
    3124:	95 95       	asr	r25
    3126:	87 95       	ror	r24
    3128:	95 95       	asr	r25
    312a:	87 95       	ror	r24
    312c:	49 96       	adiw	r24, 0x19	; 25
    312e:	90 93 06 02 	sts	0x0206, r25
    3132:	80 93 05 02 	sts	0x0205, r24
    3136:	9a ce       	rjmp	.-716    	; 0x2e6c <start_vertical_speed_control_right+0x56>
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
    3138:	35 95       	asr	r19
    313a:	27 95       	ror	r18
    313c:	35 95       	asr	r19
    313e:	27 95       	ror	r18
    3140:	89 e1       	ldi	r24, 0x19	; 25
    3142:	90 e0       	ldi	r25, 0x00	; 0
    3144:	82 1b       	sub	r24, r18
    3146:	93 0b       	sbc	r25, r19
    3148:	90 93 06 02 	sts	0x0206, r25
    314c:	80 93 05 02 	sts	0x0205, r24
    3150:	8d ce       	rjmp	.-742    	; 0x2e6c <start_vertical_speed_control_right+0x56>

00003152 <start_horizontal_speed_control_right>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_right(signed int *pwm_right) {
    3152:	cf 92       	push	r12
    3154:	df 92       	push	r13
    3156:	ef 92       	push	r14
    3158:	ff 92       	push	r15
    315a:	0f 93       	push	r16
    315c:	1f 93       	push	r17
    315e:	cf 93       	push	r28
    3160:	df 93       	push	r29
    3162:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    3164:	80 81       	ld	r24, Z
    3166:	91 81       	ldd	r25, Z+1	; 0x01
    3168:	00 97       	sbiw	r24, 0x00	; 0
    316a:	09 f4       	brne	.+2      	; 0x316e <start_horizontal_speed_control_right+0x1c>
    316c:	b8 c0       	rjmp	.+368    	; 0x32de <start_horizontal_speed_control_right+0x18c>
		delta_right_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    316e:	c0 91 82 05 	lds	r28, 0x0582
    3172:	d0 91 83 05 	lds	r29, 0x0583
    3176:	d0 93 cc 04 	sts	0x04CC, r29
    317a:	c0 93 cb 04 	sts	0x04CB, r28
	if(*pwm_right >= 0) {
    317e:	80 81       	ld	r24, Z
    3180:	91 81       	ldd	r25, Z+1	; 0x01
    3182:	97 fd       	sbrc	r25, 7
    3184:	cd c0       	rjmp	.+410    	; 0x3320 <start_horizontal_speed_control_right+0x1ce>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    3186:	20 91 f1 02 	lds	r18, 0x02F1
    318a:	30 91 f2 02 	lds	r19, 0x02F2
    318e:	dc 01       	movw	r26, r24
    3190:	a2 1b       	sub	r26, r18
    3192:	b3 0b       	sbc	r27, r19
    3194:	b0 93 83 05 	sts	0x0583, r27
    3198:	a0 93 82 05 	sts	0x0582, r26
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}

	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    319c:	c0 90 09 03 	lds	r12, 0x0309
    31a0:	d0 90 0a 03 	lds	r13, 0x030A
    31a4:	ca 0e       	add	r12, r26
    31a6:	db 1e       	adc	r13, r27
    31a8:	d0 92 0a 03 	sts	0x030A, r13
    31ac:	c0 92 09 03 	sts	0x0309, r12

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
    31b0:	81 e4       	ldi	r24, 0x41	; 65
    31b2:	c8 16       	cp	r12, r24
    31b4:	86 e0       	ldi	r24, 0x06	; 6
    31b6:	d8 06       	cpc	r13, r24
    31b8:	0c f4       	brge	.+2      	; 0x31bc <start_horizontal_speed_control_right+0x6a>
    31ba:	9e c0       	rjmp	.+316    	; 0x32f8 <start_horizontal_speed_control_right+0x1a6>
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
    31bc:	80 e4       	ldi	r24, 0x40	; 64
    31be:	96 e0       	ldi	r25, 0x06	; 6
    31c0:	90 93 0a 03 	sts	0x030A, r25
    31c4:	80 93 09 03 	sts	0x0309, r24
    31c8:	10 e8       	ldi	r17, 0x80	; 128
    31ca:	c1 2e       	mov	r12, r17
    31cc:	1c e0       	ldi	r17, 0x0C	; 12
    31ce:	d1 2e       	mov	r13, r17
    31d0:	e1 2c       	mov	r14, r1
    31d2:	f1 2c       	mov	r15, r1
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
	}		

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed long int)((*pwm_right) << 3);
    31d4:	00 81       	ld	r16, Z
    31d6:	11 81       	ldd	r17, Z+1	; 0x01
	pwm_right_speed_controller += (signed long int)(delta_right_speed_current*P_HORIZONTAL);
    31d8:	cd 01       	movw	r24, r26
    31da:	88 0f       	add	r24, r24
    31dc:	99 1f       	adc	r25, r25
    31de:	8a 0f       	add	r24, r26
    31e0:	9b 1f       	adc	r25, r27
    31e2:	9c 01       	movw	r18, r24
    31e4:	22 0f       	add	r18, r18
    31e6:	33 1f       	adc	r19, r19
    31e8:	22 0f       	add	r18, r18
    31ea:	33 1f       	adc	r19, r19
    31ec:	28 0f       	add	r18, r24
    31ee:	39 1f       	adc	r19, r25
    31f0:	44 27       	eor	r20, r20
    31f2:	37 fd       	sbrc	r19, 7
    31f4:	40 95       	com	r20
    31f6:	54 2f       	mov	r21, r20
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
	}		

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed long int)((*pwm_right) << 3);
    31f8:	b8 01       	movw	r22, r16
    31fa:	66 0f       	add	r22, r22
    31fc:	77 1f       	adc	r23, r23
    31fe:	66 0f       	add	r22, r22
    3200:	77 1f       	adc	r23, r23
    3202:	66 0f       	add	r22, r22
    3204:	77 1f       	adc	r23, r23
    3206:	88 27       	eor	r24, r24
    3208:	77 fd       	sbrc	r23, 7
    320a:	80 95       	com	r24
    320c:	98 2f       	mov	r25, r24
	pwm_right_speed_controller += (signed long int)(delta_right_speed_current*P_HORIZONTAL);
    320e:	26 0f       	add	r18, r22
    3210:	37 1f       	adc	r19, r23
    3212:	48 1f       	adc	r20, r24
    3214:	59 1f       	adc	r21, r25
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
    3216:	ac 1b       	sub	r26, r28
    3218:	bd 0b       	sbc	r27, r29
    321a:	cd 01       	movw	r24, r26
    321c:	88 0f       	add	r24, r24
    321e:	99 1f       	adc	r25, r25
    3220:	8a 0f       	add	r24, r26
    3222:	9b 1f       	adc	r25, r27
    3224:	aa 27       	eor	r26, r26
    3226:	97 fd       	sbrc	r25, 7
    3228:	a0 95       	com	r26
    322a:	ba 2f       	mov	r27, r26
    322c:	28 0f       	add	r18, r24
    322e:	39 1f       	adc	r19, r25
    3230:	4a 1f       	adc	r20, r26
    3232:	5b 1f       	adc	r21, r27
	pwm_right_speed_controller += (signed long int)(delta_right_speed_sum*I_HORIZONTAL);
    3234:	2c 0d       	add	r18, r12
    3236:	3d 1d       	adc	r19, r13
    3238:	4e 1d       	adc	r20, r14
    323a:	5f 1d       	adc	r21, r15
    323c:	20 93 ff 02 	sts	0x02FF, r18
    3240:	30 93 00 03 	sts	0x0300, r19
    3244:	40 93 01 03 	sts	0x0301, r20
    3248:	50 93 02 03 	sts	0x0302, r21

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    324c:	57 fd       	sbrc	r21, 7
    324e:	7a c0       	rjmp	.+244    	; 0x3344 <start_horizontal_speed_control_right+0x1f2>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    3250:	12 16       	cp	r1, r18
    3252:	13 06       	cpc	r1, r19
    3254:	14 06       	cpc	r1, r20
    3256:	15 06       	cpc	r1, r21
    3258:	0c f0       	brlt	.+2      	; 0x325c <start_horizontal_speed_control_right+0x10a>
    325a:	81 c0       	rjmp	.+258    	; 0x335e <start_horizontal_speed_control_right+0x20c>
    325c:	17 fd       	sbrc	r17, 7
    325e:	ad c0       	rjmp	.+346    	; 0x33ba <start_horizontal_speed_control_right+0x268>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    3260:	21 3c       	cpi	r18, 0xC1	; 193
    3262:	8d e5       	ldi	r24, 0x5D	; 93
    3264:	38 07       	cpc	r19, r24
    3266:	80 e0       	ldi	r24, 0x00	; 0
    3268:	48 07       	cpc	r20, r24
    326a:	80 e0       	ldi	r24, 0x00	; 0
    326c:	58 07       	cpc	r21, r24
    326e:	0c f4       	brge	.+2      	; 0x3272 <start_horizontal_speed_control_right+0x120>
    3270:	76 c0       	rjmp	.+236    	; 0x335e <start_horizontal_speed_control_right+0x20c>
    3272:	80 ec       	ldi	r24, 0xC0	; 192
    3274:	9d e5       	ldi	r25, 0x5D	; 93
    3276:	a0 e0       	ldi	r26, 0x00	; 0
    3278:	b0 e0       	ldi	r27, 0x00	; 0
    327a:	80 93 ff 02 	sts	0x02FF, r24
    327e:	90 93 00 03 	sts	0x0300, r25
    3282:	a0 93 01 03 	sts	0x0301, r26
    3286:	b0 93 02 03 	sts	0x0302, r27
    328a:	2c ed       	ldi	r18, 0xDC	; 220
    328c:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = (signed int)(pwm_right_speed_controller>>4);
    328e:	31 83       	std	Z+1, r19	; 0x01
    3290:	20 83       	st	Z, r18

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
    3292:	80 91 e7 02 	lds	r24, 0x02E7
    3296:	90 91 e8 02 	lds	r25, 0x02E8
    329a:	18 16       	cp	r1, r24
    329c:	19 06       	cpc	r1, r25
    329e:	0c f0       	brlt	.+2      	; 0x32a2 <start_horizontal_speed_control_right+0x150>
    32a0:	87 c0       	rjmp	.+270    	; 0x33b0 <start_horizontal_speed_control_right+0x25e>
		*pwm_right += 1;
    32a2:	2f 5f       	subi	r18, 0xFF	; 255
    32a4:	3f 4f       	sbci	r19, 0xFF	; 255
    32a6:	31 83       	std	Z+1, r19	; 0x01
    32a8:	20 83       	st	Z, r18
	} else {
		*pwm_right -= 1;
	}

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
    32aa:	12 16       	cp	r1, r18
    32ac:	13 06       	cpc	r1, r19
    32ae:	0c f0       	brlt	.+2      	; 0x32b2 <start_horizontal_speed_control_right+0x160>
    32b0:	6d c0       	rjmp	.+218    	; 0x338c <start_horizontal_speed_control_right+0x23a>
		*pwm_right += 30;
    32b2:	22 5e       	subi	r18, 0xE2	; 226
    32b4:	3f 4f       	sbci	r19, 0xFF	; 255
    32b6:	31 83       	std	Z+1, r19	; 0x01
    32b8:	20 83       	st	Z, r18
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    32ba:	82 e0       	ldi	r24, 0x02	; 2
    32bc:	21 30       	cpi	r18, 0x01	; 1
    32be:	38 07       	cpc	r19, r24
    32c0:	0c f4       	brge	.+2      	; 0x32c4 <start_horizontal_speed_control_right+0x172>
    32c2:	6c c0       	rjmp	.+216    	; 0x339c <start_horizontal_speed_control_right+0x24a>
    32c4:	80 e0       	ldi	r24, 0x00	; 0
    32c6:	92 e0       	ldi	r25, 0x02	; 2
    32c8:	91 83       	std	Z+1, r25	; 0x01
    32ca:	80 83       	st	Z, r24
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    32cc:	df 91       	pop	r29
    32ce:	cf 91       	pop	r28
    32d0:	1f 91       	pop	r17
    32d2:	0f 91       	pop	r16
    32d4:	ff 90       	pop	r15
    32d6:	ef 90       	pop	r14
    32d8:	df 90       	pop	r13
    32da:	cf 90       	pop	r12
    32dc:	08 95       	ret
void start_horizontal_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    32de:	10 92 0a 03 	sts	0x030A, r1
    32e2:	10 92 09 03 	sts	0x0309, r1
		delta_right_speed_current = 0;
    32e6:	10 92 83 05 	sts	0x0583, r1
    32ea:	10 92 82 05 	sts	0x0582, r1
		delta_right_speed_prev = 0;
    32ee:	10 92 cc 04 	sts	0x04CC, r1
    32f2:	10 92 cb 04 	sts	0x04CB, r1
		return;
    32f6:	ea cf       	rjmp	.-44     	; 0x32cc <start_horizontal_speed_control_right+0x17a>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    32f8:	80 ec       	ldi	r24, 0xC0	; 192
    32fa:	c8 16       	cp	r12, r24
    32fc:	89 ef       	ldi	r24, 0xF9	; 249
    32fe:	d8 06       	cpc	r13, r24
    3300:	d4 f4       	brge	.+52     	; 0x3336 <start_horizontal_speed_control_right+0x1e4>
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
    3302:	80 ec       	ldi	r24, 0xC0	; 192
    3304:	99 ef       	ldi	r25, 0xF9	; 249
    3306:	90 93 0a 03 	sts	0x030A, r25
    330a:	80 93 09 03 	sts	0x0309, r24
    330e:	60 e8       	ldi	r22, 0x80	; 128
    3310:	c6 2e       	mov	r12, r22
    3312:	63 ef       	ldi	r22, 0xF3	; 243
    3314:	d6 2e       	mov	r13, r22
    3316:	6f ef       	ldi	r22, 0xFF	; 255
    3318:	e6 2e       	mov	r14, r22
    331a:	6f ef       	ldi	r22, 0xFF	; 255
    331c:	f6 2e       	mov	r15, r22
    331e:	5a cf       	rjmp	.-332    	; 0x31d4 <start_horizontal_speed_control_right+0x82>
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    3320:	a0 91 f1 02 	lds	r26, 0x02F1
    3324:	b0 91 f2 02 	lds	r27, 0x02F2
    3328:	a8 0f       	add	r26, r24
    332a:	b9 1f       	adc	r27, r25
    332c:	b0 93 83 05 	sts	0x0583, r27
    3330:	a0 93 82 05 	sts	0x0582, r26
    3334:	33 cf       	rjmp	.-410    	; 0x319c <start_horizontal_speed_control_right+0x4a>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    3336:	cc 0c       	add	r12, r12
    3338:	dd 1c       	adc	r13, r13
    333a:	ee 24       	eor	r14, r14
    333c:	d7 fc       	sbrc	r13, 7
    333e:	e0 94       	com	r14
    3340:	fe 2c       	mov	r15, r14
    3342:	48 cf       	rjmp	.-368    	; 0x31d4 <start_horizontal_speed_control_right+0x82>
	pwm_right_speed_controller += (signed long int)(delta_right_speed_current*P_HORIZONTAL);
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
	pwm_right_speed_controller += (signed long int)(delta_right_speed_sum*I_HORIZONTAL);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    3344:	17 fd       	sbrc	r17, 7
    3346:	0b c0       	rjmp	.+22     	; 0x335e <start_horizontal_speed_control_right+0x20c>
		pwm_right_speed_controller = 0;
    3348:	10 92 ff 02 	sts	0x02FF, r1
    334c:	10 92 00 03 	sts	0x0300, r1
    3350:	10 92 01 03 	sts	0x0301, r1
    3354:	10 92 02 03 	sts	0x0302, r1
    3358:	20 e0       	ldi	r18, 0x00	; 0
    335a:	30 e0       	ldi	r19, 0x00	; 0
    335c:	a9 01       	movw	r20, r18
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    335e:	20 34       	cpi	r18, 0x40	; 64
    3360:	82 ea       	ldi	r24, 0xA2	; 162
    3362:	38 07       	cpc	r19, r24
    3364:	8f ef       	ldi	r24, 0xFF	; 255
    3366:	48 07       	cpc	r20, r24
    3368:	8f ef       	ldi	r24, 0xFF	; 255
    336a:	58 07       	cpc	r21, r24
    336c:	8c f5       	brge	.+98     	; 0x33d0 <start_horizontal_speed_control_right+0x27e>
    336e:	80 e4       	ldi	r24, 0x40	; 64
    3370:	92 ea       	ldi	r25, 0xA2	; 162
    3372:	af ef       	ldi	r26, 0xFF	; 255
    3374:	bf ef       	ldi	r27, 0xFF	; 255
    3376:	80 93 ff 02 	sts	0x02FF, r24
    337a:	90 93 00 03 	sts	0x0300, r25
    337e:	a0 93 01 03 	sts	0x0301, r26
    3382:	b0 93 02 03 	sts	0x0302, r27
    3386:	24 e2       	ldi	r18, 0x24	; 36
    3388:	3a ef       	ldi	r19, 0xFA	; 250
    338a:	81 cf       	rjmp	.-254    	; 0x328e <start_horizontal_speed_control_right+0x13c>
	}

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
		*pwm_right += 30;
	} else if(*pwm_right < 0) {
    338c:	21 15       	cp	r18, r1
    338e:	31 05       	cpc	r19, r1
    3390:	09 f4       	brne	.+2      	; 0x3394 <start_horizontal_speed_control_right+0x242>
    3392:	9c cf       	rjmp	.-200    	; 0x32cc <start_horizontal_speed_control_right+0x17a>
		*pwm_right -= 30;
    3394:	2e 51       	subi	r18, 0x1E	; 30
    3396:	30 40       	sbci	r19, 0x00	; 0
    3398:	31 83       	std	Z+1, r19	; 0x01
    339a:	20 83       	st	Z, r18
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    339c:	8e ef       	ldi	r24, 0xFE	; 254
    339e:	20 30       	cpi	r18, 0x00	; 0
    33a0:	38 07       	cpc	r19, r24
    33a2:	0c f0       	brlt	.+2      	; 0x33a6 <start_horizontal_speed_control_right+0x254>
    33a4:	93 cf       	rjmp	.-218    	; 0x32cc <start_horizontal_speed_control_right+0x17a>
    33a6:	80 e0       	ldi	r24, 0x00	; 0
    33a8:	9e ef       	ldi	r25, 0xFE	; 254
    33aa:	91 83       	std	Z+1, r25	; 0x01
    33ac:	80 83       	st	Z, r24
    33ae:	8e cf       	rjmp	.-228    	; 0x32cc <start_horizontal_speed_control_right+0x17a>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
		*pwm_right += 1;
	} else {
		*pwm_right -= 1;
    33b0:	21 50       	subi	r18, 0x01	; 1
    33b2:	30 40       	sbci	r19, 0x00	; 0
    33b4:	31 83       	std	Z+1, r19	; 0x01
    33b6:	20 83       	st	Z, r18
    33b8:	78 cf       	rjmp	.-272    	; 0x32aa <start_horizontal_speed_control_right+0x158>
	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    33ba:	10 92 ff 02 	sts	0x02FF, r1
    33be:	10 92 00 03 	sts	0x0300, r1
    33c2:	10 92 01 03 	sts	0x0301, r1
    33c6:	10 92 02 03 	sts	0x0302, r1
    33ca:	20 e0       	ldi	r18, 0x00	; 0
    33cc:	30 e0       	ldi	r19, 0x00	; 0
    33ce:	a9 01       	movw	r20, r18
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    33d0:	14 e0       	ldi	r17, 0x04	; 4
    33d2:	55 95       	asr	r21
    33d4:	47 95       	ror	r20
    33d6:	37 95       	ror	r19
    33d8:	27 95       	ror	r18
    33da:	1a 95       	dec	r17
    33dc:	d1 f7       	brne	.-12     	; 0x33d2 <start_horizontal_speed_control_right+0x280>
    33de:	57 cf       	rjmp	.-338    	; 0x328e <start_horizontal_speed_control_right+0x13c>

000033e0 <start_horizontal_speed_control_left>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_left(signed int *pwm_left) {
    33e0:	cf 92       	push	r12
    33e2:	df 92       	push	r13
    33e4:	ef 92       	push	r14
    33e6:	ff 92       	push	r15
    33e8:	0f 93       	push	r16
    33ea:	1f 93       	push	r17
    33ec:	cf 93       	push	r28
    33ee:	df 93       	push	r29
    33f0:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
    33f2:	80 81       	ld	r24, Z
    33f4:	91 81       	ldd	r25, Z+1	; 0x01
    33f6:	00 97       	sbiw	r24, 0x00	; 0
    33f8:	09 f4       	brne	.+2      	; 0x33fc <start_horizontal_speed_control_left+0x1c>
    33fa:	b8 c0       	rjmp	.+368    	; 0x356c <start_horizontal_speed_control_left+0x18c>
		delta_left_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    33fc:	c0 91 c8 04 	lds	r28, 0x04C8
    3400:	d0 91 c9 04 	lds	r29, 0x04C9
    3404:	d0 93 74 05 	sts	0x0574, r29
    3408:	c0 93 73 05 	sts	0x0573, r28
	if(*pwm_left >= 0) {
    340c:	80 81       	ld	r24, Z
    340e:	91 81       	ldd	r25, Z+1	; 0x01
    3410:	97 fd       	sbrc	r25, 7
    3412:	cd c0       	rjmp	.+410    	; 0x35ae <start_horizontal_speed_control_left+0x1ce>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    3414:	20 91 ef 02 	lds	r18, 0x02EF
    3418:	30 91 f0 02 	lds	r19, 0x02F0
    341c:	dc 01       	movw	r26, r24
    341e:	a2 1b       	sub	r26, r18
    3420:	b3 0b       	sbc	r27, r19
    3422:	b0 93 c9 04 	sts	0x04C9, r27
    3426:	a0 93 c8 04 	sts	0x04C8, r26
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;
    342a:	c0 90 07 03 	lds	r12, 0x0307
    342e:	d0 90 08 03 	lds	r13, 0x0308
    3432:	ca 0e       	add	r12, r26
    3434:	db 1e       	adc	r13, r27
    3436:	d0 92 08 03 	sts	0x0308, r13
    343a:	c0 92 07 03 	sts	0x0307, r12

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
    343e:	81 e4       	ldi	r24, 0x41	; 65
    3440:	c8 16       	cp	r12, r24
    3442:	86 e0       	ldi	r24, 0x06	; 6
    3444:	d8 06       	cpc	r13, r24
    3446:	0c f4       	brge	.+2      	; 0x344a <start_horizontal_speed_control_left+0x6a>
    3448:	9e c0       	rjmp	.+316    	; 0x3586 <start_horizontal_speed_control_left+0x1a6>
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
    344a:	80 e4       	ldi	r24, 0x40	; 64
    344c:	96 e0       	ldi	r25, 0x06	; 6
    344e:	90 93 08 03 	sts	0x0308, r25
    3452:	80 93 07 03 	sts	0x0307, r24
    3456:	10 e8       	ldi	r17, 0x80	; 128
    3458:	c1 2e       	mov	r12, r17
    345a:	1c e0       	ldi	r17, 0x0C	; 12
    345c:	d1 2e       	mov	r13, r17
    345e:	e1 2c       	mov	r14, r1
    3460:	f1 2c       	mov	r15, r1
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed long int)((*pwm_left) << 3);
    3462:	00 81       	ld	r16, Z
    3464:	11 81       	ldd	r17, Z+1	; 0x01
	pwm_left_speed_controller += (signed long int)(delta_left_speed_current*P_HORIZONTAL);
    3466:	cd 01       	movw	r24, r26
    3468:	88 0f       	add	r24, r24
    346a:	99 1f       	adc	r25, r25
    346c:	8a 0f       	add	r24, r26
    346e:	9b 1f       	adc	r25, r27
    3470:	9c 01       	movw	r18, r24
    3472:	22 0f       	add	r18, r18
    3474:	33 1f       	adc	r19, r19
    3476:	22 0f       	add	r18, r18
    3478:	33 1f       	adc	r19, r19
    347a:	28 0f       	add	r18, r24
    347c:	39 1f       	adc	r19, r25
    347e:	44 27       	eor	r20, r20
    3480:	37 fd       	sbrc	r19, 7
    3482:	40 95       	com	r20
    3484:	54 2f       	mov	r21, r20
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed long int)((*pwm_left) << 3);
    3486:	b8 01       	movw	r22, r16
    3488:	66 0f       	add	r22, r22
    348a:	77 1f       	adc	r23, r23
    348c:	66 0f       	add	r22, r22
    348e:	77 1f       	adc	r23, r23
    3490:	66 0f       	add	r22, r22
    3492:	77 1f       	adc	r23, r23
    3494:	88 27       	eor	r24, r24
    3496:	77 fd       	sbrc	r23, 7
    3498:	80 95       	com	r24
    349a:	98 2f       	mov	r25, r24
	pwm_left_speed_controller += (signed long int)(delta_left_speed_current*P_HORIZONTAL);
    349c:	26 0f       	add	r18, r22
    349e:	37 1f       	adc	r19, r23
    34a0:	48 1f       	adc	r20, r24
    34a2:	59 1f       	adc	r21, r25
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
    34a4:	ac 1b       	sub	r26, r28
    34a6:	bd 0b       	sbc	r27, r29
    34a8:	cd 01       	movw	r24, r26
    34aa:	88 0f       	add	r24, r24
    34ac:	99 1f       	adc	r25, r25
    34ae:	8a 0f       	add	r24, r26
    34b0:	9b 1f       	adc	r25, r27
    34b2:	aa 27       	eor	r26, r26
    34b4:	97 fd       	sbrc	r25, 7
    34b6:	a0 95       	com	r26
    34b8:	ba 2f       	mov	r27, r26
    34ba:	28 0f       	add	r18, r24
    34bc:	39 1f       	adc	r19, r25
    34be:	4a 1f       	adc	r20, r26
    34c0:	5b 1f       	adc	r21, r27
	pwm_left_speed_controller += (signed long int)(delta_left_speed_sum*I_HORIZONTAL);
    34c2:	2c 0d       	add	r18, r12
    34c4:	3d 1d       	adc	r19, r13
    34c6:	4e 1d       	adc	r20, r14
    34c8:	5f 1d       	adc	r21, r15
    34ca:	20 93 03 03 	sts	0x0303, r18
    34ce:	30 93 04 03 	sts	0x0304, r19
    34d2:	40 93 05 03 	sts	0x0305, r20
    34d6:	50 93 06 03 	sts	0x0306, r21

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    34da:	57 fd       	sbrc	r21, 7
    34dc:	7a c0       	rjmp	.+244    	; 0x35d2 <start_horizontal_speed_control_left+0x1f2>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    34de:	12 16       	cp	r1, r18
    34e0:	13 06       	cpc	r1, r19
    34e2:	14 06       	cpc	r1, r20
    34e4:	15 06       	cpc	r1, r21
    34e6:	0c f0       	brlt	.+2      	; 0x34ea <start_horizontal_speed_control_left+0x10a>
    34e8:	81 c0       	rjmp	.+258    	; 0x35ec <start_horizontal_speed_control_left+0x20c>
    34ea:	17 fd       	sbrc	r17, 7
    34ec:	ad c0       	rjmp	.+346    	; 0x3648 <start_horizontal_speed_control_left+0x268>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    34ee:	21 3c       	cpi	r18, 0xC1	; 193
    34f0:	8d e5       	ldi	r24, 0x5D	; 93
    34f2:	38 07       	cpc	r19, r24
    34f4:	80 e0       	ldi	r24, 0x00	; 0
    34f6:	48 07       	cpc	r20, r24
    34f8:	80 e0       	ldi	r24, 0x00	; 0
    34fa:	58 07       	cpc	r21, r24
    34fc:	0c f4       	brge	.+2      	; 0x3500 <start_horizontal_speed_control_left+0x120>
    34fe:	76 c0       	rjmp	.+236    	; 0x35ec <start_horizontal_speed_control_left+0x20c>
    3500:	80 ec       	ldi	r24, 0xC0	; 192
    3502:	9d e5       	ldi	r25, 0x5D	; 93
    3504:	a0 e0       	ldi	r26, 0x00	; 0
    3506:	b0 e0       	ldi	r27, 0x00	; 0
    3508:	80 93 03 03 	sts	0x0303, r24
    350c:	90 93 04 03 	sts	0x0304, r25
    3510:	a0 93 05 03 	sts	0x0305, r26
    3514:	b0 93 06 03 	sts	0x0306, r27
    3518:	2c ed       	ldi	r18, 0xDC	; 220
    351a:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = (signed int)(pwm_left_speed_controller>>4);
    351c:	31 83       	std	Z+1, r19	; 0x01
    351e:	20 83       	st	Z, r18

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
    3520:	80 91 e9 02 	lds	r24, 0x02E9
    3524:	90 91 ea 02 	lds	r25, 0x02EA
    3528:	18 16       	cp	r1, r24
    352a:	19 06       	cpc	r1, r25
    352c:	0c f0       	brlt	.+2      	; 0x3530 <start_horizontal_speed_control_left+0x150>
    352e:	87 c0       	rjmp	.+270    	; 0x363e <start_horizontal_speed_control_left+0x25e>
		*pwm_left += 1;
    3530:	2f 5f       	subi	r18, 0xFF	; 255
    3532:	3f 4f       	sbci	r19, 0xFF	; 255
    3534:	31 83       	std	Z+1, r19	; 0x01
    3536:	20 83       	st	Z, r18
	} else {
		*pwm_left -= 1;
	}

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
    3538:	12 16       	cp	r1, r18
    353a:	13 06       	cpc	r1, r19
    353c:	0c f0       	brlt	.+2      	; 0x3540 <start_horizontal_speed_control_left+0x160>
    353e:	6d c0       	rjmp	.+218    	; 0x361a <start_horizontal_speed_control_left+0x23a>
		*pwm_left += 30;
    3540:	22 5e       	subi	r18, 0xE2	; 226
    3542:	3f 4f       	sbci	r19, 0xFF	; 255
    3544:	31 83       	std	Z+1, r19	; 0x01
    3546:	20 83       	st	Z, r18
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    3548:	82 e0       	ldi	r24, 0x02	; 2
    354a:	21 30       	cpi	r18, 0x01	; 1
    354c:	38 07       	cpc	r19, r24
    354e:	0c f4       	brge	.+2      	; 0x3552 <start_horizontal_speed_control_left+0x172>
    3550:	6c c0       	rjmp	.+216    	; 0x362a <start_horizontal_speed_control_left+0x24a>
    3552:	80 e0       	ldi	r24, 0x00	; 0
    3554:	92 e0       	ldi	r25, 0x02	; 2
    3556:	91 83       	std	Z+1, r25	; 0x01
    3558:	80 83       	st	Z, r24
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);

}
    355a:	df 91       	pop	r29
    355c:	cf 91       	pop	r28
    355e:	1f 91       	pop	r17
    3560:	0f 91       	pop	r16
    3562:	ff 90       	pop	r15
    3564:	ef 90       	pop	r14
    3566:	df 90       	pop	r13
    3568:	cf 90       	pop	r12
    356a:	08 95       	ret
void start_horizontal_speed_control_left(signed int *pwm_left) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    356c:	10 92 08 03 	sts	0x0308, r1
    3570:	10 92 07 03 	sts	0x0307, r1
		delta_left_speed_current = 0;
    3574:	10 92 c9 04 	sts	0x04C9, r1
    3578:	10 92 c8 04 	sts	0x04C8, r1
		delta_left_speed_prev = 0;
    357c:	10 92 74 05 	sts	0x0574, r1
    3580:	10 92 73 05 	sts	0x0573, r1
		return;
    3584:	ea cf       	rjmp	.-44     	; 0x355a <start_horizontal_speed_control_left+0x17a>
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    3586:	80 ec       	ldi	r24, 0xC0	; 192
    3588:	c8 16       	cp	r12, r24
    358a:	89 ef       	ldi	r24, 0xF9	; 249
    358c:	d8 06       	cpc	r13, r24
    358e:	d4 f4       	brge	.+52     	; 0x35c4 <start_horizontal_speed_control_left+0x1e4>
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
    3590:	80 ec       	ldi	r24, 0xC0	; 192
    3592:	99 ef       	ldi	r25, 0xF9	; 249
    3594:	90 93 08 03 	sts	0x0308, r25
    3598:	80 93 07 03 	sts	0x0307, r24
    359c:	60 e8       	ldi	r22, 0x80	; 128
    359e:	c6 2e       	mov	r12, r22
    35a0:	63 ef       	ldi	r22, 0xF3	; 243
    35a2:	d6 2e       	mov	r13, r22
    35a4:	6f ef       	ldi	r22, 0xFF	; 255
    35a6:	e6 2e       	mov	r14, r22
    35a8:	6f ef       	ldi	r22, 0xFF	; 255
    35aa:	f6 2e       	mov	r15, r22
    35ac:	5a cf       	rjmp	.-332    	; 0x3462 <start_horizontal_speed_control_left+0x82>
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    35ae:	a0 91 ef 02 	lds	r26, 0x02EF
    35b2:	b0 91 f0 02 	lds	r27, 0x02F0
    35b6:	a8 0f       	add	r26, r24
    35b8:	b9 1f       	adc	r27, r25
    35ba:	b0 93 c9 04 	sts	0x04C9, r27
    35be:	a0 93 c8 04 	sts	0x04C8, r26
    35c2:	33 cf       	rjmp	.-410    	; 0x342a <start_horizontal_speed_control_left+0x4a>
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    35c4:	cc 0c       	add	r12, r12
    35c6:	dd 1c       	adc	r13, r13
    35c8:	ee 24       	eor	r14, r14
    35ca:	d7 fc       	sbrc	r13, 7
    35cc:	e0 94       	com	r14
    35ce:	fe 2c       	mov	r15, r14
    35d0:	48 cf       	rjmp	.-368    	; 0x3462 <start_horizontal_speed_control_left+0x82>
	pwm_left_speed_controller += (signed long int)(delta_left_speed_current*P_HORIZONTAL);
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
	pwm_left_speed_controller += (signed long int)(delta_left_speed_sum*I_HORIZONTAL);

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    35d2:	17 fd       	sbrc	r17, 7
    35d4:	0b c0       	rjmp	.+22     	; 0x35ec <start_horizontal_speed_control_left+0x20c>
		pwm_left_speed_controller = 0;
    35d6:	10 92 03 03 	sts	0x0303, r1
    35da:	10 92 04 03 	sts	0x0304, r1
    35de:	10 92 05 03 	sts	0x0305, r1
    35e2:	10 92 06 03 	sts	0x0306, r1
    35e6:	20 e0       	ldi	r18, 0x00	; 0
    35e8:	30 e0       	ldi	r19, 0x00	; 0
    35ea:	a9 01       	movw	r20, r18
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    35ec:	20 34       	cpi	r18, 0x40	; 64
    35ee:	82 ea       	ldi	r24, 0xA2	; 162
    35f0:	38 07       	cpc	r19, r24
    35f2:	8f ef       	ldi	r24, 0xFF	; 255
    35f4:	48 07       	cpc	r20, r24
    35f6:	8f ef       	ldi	r24, 0xFF	; 255
    35f8:	58 07       	cpc	r21, r24
    35fa:	8c f5       	brge	.+98     	; 0x365e <start_horizontal_speed_control_left+0x27e>
    35fc:	80 e4       	ldi	r24, 0x40	; 64
    35fe:	92 ea       	ldi	r25, 0xA2	; 162
    3600:	af ef       	ldi	r26, 0xFF	; 255
    3602:	bf ef       	ldi	r27, 0xFF	; 255
    3604:	80 93 03 03 	sts	0x0303, r24
    3608:	90 93 04 03 	sts	0x0304, r25
    360c:	a0 93 05 03 	sts	0x0305, r26
    3610:	b0 93 06 03 	sts	0x0306, r27
    3614:	24 e2       	ldi	r18, 0x24	; 36
    3616:	3a ef       	ldi	r19, 0xFA	; 250
    3618:	81 cf       	rjmp	.-254    	; 0x351c <start_horizontal_speed_control_left+0x13c>
	}

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
		*pwm_left += 30;
	} else if(*pwm_left < 0) {
    361a:	21 15       	cp	r18, r1
    361c:	31 05       	cpc	r19, r1
    361e:	09 f4       	brne	.+2      	; 0x3622 <start_horizontal_speed_control_left+0x242>
    3620:	9c cf       	rjmp	.-200    	; 0x355a <start_horizontal_speed_control_left+0x17a>
		*pwm_left -= 30;
    3622:	2e 51       	subi	r18, 0x1E	; 30
    3624:	30 40       	sbci	r19, 0x00	; 0
    3626:	31 83       	std	Z+1, r19	; 0x01
    3628:	20 83       	st	Z, r18
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    362a:	8e ef       	ldi	r24, 0xFE	; 254
    362c:	20 30       	cpi	r18, 0x00	; 0
    362e:	38 07       	cpc	r19, r24
    3630:	0c f0       	brlt	.+2      	; 0x3634 <start_horizontal_speed_control_left+0x254>
    3632:	93 cf       	rjmp	.-218    	; 0x355a <start_horizontal_speed_control_left+0x17a>
    3634:	80 e0       	ldi	r24, 0x00	; 0
    3636:	9e ef       	ldi	r25, 0xFE	; 254
    3638:	91 83       	std	Z+1, r25	; 0x01
    363a:	80 83       	st	Z, r24
    363c:	8e cf       	rjmp	.-228    	; 0x355a <start_horizontal_speed_control_left+0x17a>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
		*pwm_left += 1;
	} else {
		*pwm_left -= 1;
    363e:	21 50       	subi	r18, 0x01	; 1
    3640:	30 40       	sbci	r19, 0x00	; 0
    3642:	31 83       	std	Z+1, r19	; 0x01
    3644:	20 83       	st	Z, r18
    3646:	78 cf       	rjmp	.-272    	; 0x3538 <start_horizontal_speed_control_left+0x158>
	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    3648:	10 92 03 03 	sts	0x0303, r1
    364c:	10 92 04 03 	sts	0x0304, r1
    3650:	10 92 05 03 	sts	0x0305, r1
    3654:	10 92 06 03 	sts	0x0306, r1
    3658:	20 e0       	ldi	r18, 0x00	; 0
    365a:	30 e0       	ldi	r19, 0x00	; 0
    365c:	a9 01       	movw	r20, r18
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    365e:	04 e0       	ldi	r16, 0x04	; 4
    3660:	55 95       	asr	r21
    3662:	47 95       	ror	r20
    3664:	37 95       	ror	r19
    3666:	27 95       	ror	r18
    3668:	0a 95       	dec	r16
    366a:	d1 f7       	brne	.-12     	; 0x3660 <start_horizontal_speed_control_left+0x280>
    366c:	57 cf       	rjmp	.-338    	; 0x351c <start_horizontal_speed_control_left+0x13c>

0000366e <initPortsIO>:
#include "ports_io.h"


void initPortsIO(void) {

	MCUCR |= (1 << PUD);	// pull-up disable for all ports
    366e:	85 b7       	in	r24, 0x35	; 53
    3670:	80 61       	ori	r24, 0x10	; 16
    3672:	85 bf       	out	0x35, r24	; 53

	DDRA = 0xFF;			// proximity pulses as output
    3674:	8f ef       	ldi	r24, 0xFF	; 255
    3676:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;			// proximity pulses turned off
    3678:	12 b8       	out	0x02, r1	; 2
	
	DDRB = 0xF7;			// pwm for led r/g/b as output; CE, MOSI, SCK, SS as output (master) 
    367a:	97 ef       	ldi	r25, 0xF7	; 247
    367c:	94 b9       	out	0x04, r25	; 4
	PORTB = 0xE0;			// r,g,b leds turned off on high state
    367e:	90 ee       	ldi	r25, 0xE0	; 224
    3680:	95 b9       	out	0x05, r25	; 5

	DDRC = 0xF0;			// selector as input; IR leds as output; sens-enable, sleep as output
    3682:	90 ef       	ldi	r25, 0xF0	; 240
    3684:	97 b9       	out	0x07, r25	; 7
	PORTC = 0xB0;			// sleep = 1 (no sleep), sense_enable=0, IR leds = 1
    3686:	90 eb       	ldi	r25, 0xB0	; 176
    3688:	98 b9       	out	0x08, r25	; 8

	DDRD = 0xFC;			// all pins to output; when usart and i2c peripherals are activated they change the pins direction accordingly
    368a:	9c ef       	ldi	r25, 0xFC	; 252
    368c:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0x03;			// default for unused pins is 0
    368e:	93 e0       	ldi	r25, 0x03	; 3
    3690:	9b b9       	out	0x0b, r25	; 11

	DDRE = 0xFF;			// all pins to output (pwm and dir for motor right as output; when usart is activated it changes the pins direction accordingly)
    3692:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    3694:	1e b8       	out	0x0e, r1	; 14

	DDRF = 0x00;			// adc channel pins as input		
    3696:	10 ba       	out	0x10, r1	; 16

	DDRG = 0xFF;			// unused pins as output
    3698:	83 bb       	out	0x13, r24	; 19
	if(hardwareRevision == HW_REV_3_0) {
    369a:	80 91 4b 04 	lds	r24, 0x044B
    369e:	88 23       	and	r24, r24
    36a0:	e1 f0       	breq	.+56     	; 0x36da <initPortsIO+0x6c>
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    36a2:	81 30       	cpi	r24, 0x01	; 1
    36a4:	d1 f0       	breq	.+52     	; 0x36da <initPortsIO+0x6c>
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    36a6:	82 30       	cpi	r24, 0x02	; 2
    36a8:	51 f1       	breq	.+84     	; 0x36fe <initPortsIO+0x90>
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
	}	

	DDRH = 0xFF;			// all pins to output; when usart is activated it changes the pins direction accordingly
    36aa:	9f ef       	ldi	r25, 0xFF	; 255
    36ac:	90 93 01 01 	sts	0x0101, r25
	PORTH = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    36b0:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
    36b4:	9f e0       	ldi	r25, 0x0F	; 15
    36b6:	90 93 04 01 	sts	0x0104, r25
	if(hardwareRevision == HW_REV_3_0) {
    36ba:	88 23       	and	r24, r24
    36bc:	a9 f4       	brne	.+42     	; 0x36e8 <initPortsIO+0x7a>
		PORTJ &= 0x00;		// cliff pulse turned off
    36be:	90 91 05 01 	lds	r25, 0x0105
    36c2:	10 92 05 01 	sts	0x0105, r1
	if(hardwareRevision == HW_REV_3_1) {
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.1)"
	}	

	DDRK = 0x00;			// adc channel pins as input
    36c6:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;			// all pins to output
    36ca:	9f ef       	ldi	r25, 0xFF	; 255
    36cc:	90 93 0a 01 	sts	0x010A, r25
	if(hardwareRevision == HW_REV_3_0) {
    36d0:	88 23       	and	r24, r24
    36d2:	29 f4       	brne	.+10     	; 0x36de <initPortsIO+0x70>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
    36d4:	10 92 0b 01 	sts	0x010B, r1
    36d8:	08 95       	ret
	DDRG = 0xFF;			// unused pins as output
	if(hardwareRevision == HW_REV_3_0) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
    36da:	14 ba       	out	0x14, r1	; 20
    36dc:	e6 cf       	rjmp	.-52     	; 0x36aa <initPortsIO+0x3c>

	DDRL = 0xFF;			// all pins to output
	if(hardwareRevision == HW_REV_3_0) {
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
    36de:	81 30       	cpi	r24, 0x01	; 1
    36e0:	c9 f3       	breq	.-14     	; 0x36d4 <initPortsIO+0x66>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    36e2:	82 30       	cpi	r24, 0x02	; 2
    36e4:	41 f0       	breq	.+16     	; 0x36f6 <initPortsIO+0x88>
    36e6:	08 95       	ret
	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
	if(hardwareRevision == HW_REV_3_0) {
		PORTJ &= 0x00;		// cliff pulse turned off
		//#warning "Normal logic for ground sensors (hw rev 3.0)"
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    36e8:	81 30       	cpi	r24, 0x01	; 1
    36ea:	11 f0       	breq	.+4      	; 0x36f0 <initPortsIO+0x82>
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.0.1)"
	}
	if(hardwareRevision == HW_REV_3_1) {
    36ec:	82 30       	cpi	r24, 0x02	; 2
    36ee:	59 f7       	brne	.-42     	; 0x36c6 <initPortsIO+0x58>
		PORTJ = 0x0F;
    36f0:	90 93 05 01 	sts	0x0105, r25
    36f4:	e8 cf       	rjmp	.-48     	; 0x36c6 <initPortsIO+0x58>
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTL = 0xF7;		// pwm (unused) to 0, leds turned off on high state
    36f6:	87 ef       	ldi	r24, 0xF7	; 247
    36f8:	80 93 0b 01 	sts	0x010B, r24
    36fc:	08 95       	ret
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
    36fe:	98 e0       	ldi	r25, 0x08	; 8
    3700:	94 bb       	out	0x14, r25	; 20
    3702:	d3 cf       	rjmp	.-90     	; 0x36aa <initPortsIO+0x3c>

00003704 <i2c_close>:

/* I2C clock in Hz */
#define SCL_CLOCK  440000L

void i2c_close() {
	TWBR = 0x00;
    3704:	10 92 b8 00 	sts	0x00B8, r1
	TWCR = 0x00;
    3708:	10 92 bc 00 	sts	0x00BC, r1
}
    370c:	08 95       	ret

0000370e <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
    sbi(PORTD, 0);
    370e:	58 9a       	sbi	0x0b, 0	; 11
    sbi(PORTD, 1);
    3710:	59 9a       	sbi	0x0b, 1	; 11

  TWSR = 0;                         /* no prescaler */
    3712:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    3716:	81 e0       	ldi	r24, 0x01	; 1
    3718:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
    371c:	08 95       	ret

0000371e <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    371e:	94 ea       	ldi	r25, 0xA4	; 164
    3720:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    3724:	90 91 bc 00 	lds	r25, 0x00BC
    3728:	97 ff       	sbrs	r25, 7
    372a:	fc cf       	rjmp	.-8      	; 0x3724 <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    372c:	90 91 b9 00 	lds	r25, 0x00B9
    3730:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    3732:	98 30       	cpi	r25, 0x08	; 8
    3734:	21 f0       	breq	.+8      	; 0x373e <i2c_start+0x20>
    3736:	90 31       	cpi	r25, 0x10	; 16
    3738:	11 f0       	breq	.+4      	; 0x373e <i2c_start+0x20>
		//usartTransmit(twst);
		return 1;
    373a:	81 e0       	ldi	r24, 0x01	; 1
    373c:	08 95       	ret
	}

	// send device address
	TWDR = address;
    373e:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    3742:	84 e8       	ldi	r24, 0x84	; 132
    3744:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    3748:	80 91 bc 00 	lds	r24, 0x00BC
    374c:	87 ff       	sbrs	r24, 7
    374e:	fc cf       	rjmp	.-8      	; 0x3748 <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    3750:	90 91 b9 00 	lds	r25, 0x00B9
    3754:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    3756:	98 31       	cpi	r25, 0x18	; 24
    3758:	21 f0       	breq	.+8      	; 0x3762 <i2c_start+0x44>

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    375a:	81 e0       	ldi	r24, 0x01	; 1
    375c:	90 34       	cpi	r25, 0x40	; 64
    375e:	19 f0       	breq	.+6      	; 0x3766 <i2c_start+0x48>
		return 1;
	}

	return 0;

}/* i2c_start */
    3760:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    3762:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    3764:	08 95       	ret

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    3766:	80 e0       	ldi	r24, 0x00	; 0
    3768:	08 95       	ret

0000376a <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    376a:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    376c:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    376e:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    3770:	20 93 bc 00 	sts	0x00BC, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    3774:	90 91 bc 00 	lds	r25, 0x00BC
    3778:	97 ff       	sbrs	r25, 7
    377a:	fc cf       	rjmp	.-8      	; 0x3774 <i2c_start_wait+0xa>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    377c:	90 91 b9 00 	lds	r25, 0x00B9
    3780:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    3782:	98 30       	cpi	r25, 0x08	; 8
    3784:	11 f0       	breq	.+4      	; 0x378a <i2c_start_wait+0x20>
    3786:	90 31       	cpi	r25, 0x10	; 16
    3788:	99 f7       	brne	.-26     	; 0x3770 <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    378a:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    378e:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    3792:	90 91 bc 00 	lds	r25, 0x00BC
    3796:	97 ff       	sbrs	r25, 7
    3798:	fc cf       	rjmp	.-8      	; 0x3792 <i2c_start_wait+0x28>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    379a:	90 91 b9 00 	lds	r25, 0x00B9
    379e:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    37a0:	90 32       	cpi	r25, 0x20	; 32
    37a2:	19 f0       	breq	.+6      	; 0x37aa <i2c_start_wait+0x40>
    37a4:	98 35       	cpi	r25, 0x58	; 88
    37a6:	09 f0       	breq	.+2      	; 0x37aa <i2c_start_wait+0x40>
    37a8:	08 95       	ret
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    37aa:	40 93 bc 00 	sts	0x00BC, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    37ae:	90 91 bc 00 	lds	r25, 0x00BC
    37b2:	94 fd       	sbrc	r25, 4
    37b4:	fc cf       	rjmp	.-8      	; 0x37ae <i2c_start_wait+0x44>
    37b6:	dc cf       	rjmp	.-72     	; 0x3770 <i2c_start_wait+0x6>

000037b8 <i2c_rep_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    37b8:	94 ea       	ldi	r25, 0xA4	; 164
    37ba:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    37be:	90 91 bc 00 	lds	r25, 0x00BC
    37c2:	97 ff       	sbrs	r25, 7
    37c4:	fc cf       	rjmp	.-8      	; 0x37be <i2c_rep_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    37c6:	90 91 b9 00 	lds	r25, 0x00B9
    37ca:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    37cc:	98 30       	cpi	r25, 0x08	; 8
    37ce:	21 f0       	breq	.+8      	; 0x37d8 <i2c_rep_start+0x20>
    37d0:	90 31       	cpi	r25, 0x10	; 16
    37d2:	11 f0       	breq	.+4      	; 0x37d8 <i2c_rep_start+0x20>
		//usartTransmit(twst);
		return 1;
    37d4:	81 e0       	ldi	r24, 0x01	; 1
    37d6:	08 95       	ret
	}

	// send device address
	TWDR = address;
    37d8:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    37dc:	84 e8       	ldi	r24, 0x84	; 132
    37de:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    37e2:	80 91 bc 00 	lds	r24, 0x00BC
    37e6:	87 ff       	sbrs	r24, 7
    37e8:	fc cf       	rjmp	.-8      	; 0x37e2 <i2c_rep_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    37ea:	90 91 b9 00 	lds	r25, 0x00B9
    37ee:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    37f0:	98 31       	cpi	r25, 0x18	; 24
    37f2:	21 f0       	breq	.+8      	; 0x37fc <i2c_rep_start+0x44>
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    37f4:	81 e0       	ldi	r24, 0x01	; 1
    37f6:	90 34       	cpi	r25, 0x40	; 64
    37f8:	19 f0       	breq	.+6      	; 0x3800 <i2c_rep_start+0x48>
{
    return i2c_start( address );

}/* i2c_rep_start */
    37fa:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    37fc:	80 e0       	ldi	r24, 0x00	; 0
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    37fe:	08 95       	ret
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    3800:	80 e0       	ldi	r24, 0x00	; 0
    3802:	08 95       	ret

00003804 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    3804:	84 e9       	ldi	r24, 0x94	; 148
    3806:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    380a:	80 91 bc 00 	lds	r24, 0x00BC
    380e:	84 fd       	sbrc	r24, 4
    3810:	fc cf       	rjmp	.-8      	; 0x380a <i2c_stop+0x6>

}/* i2c_stop */
    3812:	08 95       	ret

00003814 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    3814:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    3818:	84 e8       	ldi	r24, 0x84	; 132
    381a:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    381e:	80 91 bc 00 	lds	r24, 0x00BC
    3822:	87 ff       	sbrs	r24, 7
    3824:	fc cf       	rjmp	.-8      	; 0x381e <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    3826:	90 91 b9 00 	lds	r25, 0x00B9
    382a:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    382c:	81 e0       	ldi	r24, 0x01	; 1
    382e:	98 32       	cpi	r25, 0x28	; 40
    3830:	09 f0       	breq	.+2      	; 0x3834 <i2c_write+0x20>
	return 0;

}/* i2c_write */
    3832:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
    3834:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
    3836:	08 95       	ret

00003838 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    3838:	84 ec       	ldi	r24, 0xC4	; 196
    383a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    383e:	80 91 bc 00 	lds	r24, 0x00BC
    3842:	87 ff       	sbrs	r24, 7
    3844:	fc cf       	rjmp	.-8      	; 0x383e <i2c_readAck+0x6>

    return TWDR;
    3846:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    384a:	08 95       	ret

0000384c <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    384c:	84 e8       	ldi	r24, 0x84	; 132
    384e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    3852:	80 91 bc 00 	lds	r24, 0x00BC
    3856:	87 ff       	sbrs	r24, 7
    3858:	fc cf       	rjmp	.-8      	; 0x3852 <i2c_readNak+0x6>
	
    return TWDR;
    385a:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    385e:	08 95       	ret

00003860 <initUsart0>:
	// @38400 baud: 8000000/16/38400-1 = 12 => 8000000/16/13 = 38461 => 100-(38400/38461*100)=0.15% of error
	// Double speed mode:
	// @57600 baud: 8000000/8/57600-1 = 16 => 8000000/8/17 = 58823 => 100-(57600/58823*100)=2.08% of error	


	UBRR0H = 0;												// set baudrate
    3860:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 16;
    3864:	80 e1       	ldi	r24, 0x10	; 16
    3866:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0A  |= (1 << U2X0);									// enable double speed
    386a:	e0 ec       	ldi	r30, 0xC0	; 192
    386c:	f0 e0       	ldi	r31, 0x00	; 0
    386e:	80 81       	ld	r24, Z
    3870:	82 60       	ori	r24, 0x02	; 2
    3872:	80 83       	st	Z, r24
	//UCSR0A &= ~(1 << U2X0);
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);	// enable uart0 transmitter and receiver; enable rx interrupt for use with aseba
    3874:	e1 ec       	ldi	r30, 0xC1	; 193
    3876:	f0 e0       	ldi	r31, 0x00	; 0
    3878:	80 81       	ld	r24, Z
    387a:	88 69       	ori	r24, 0x98	; 152
    387c:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);					// set frame format: 8-bit data, no parity, 1 stop bit
    387e:	e2 ec       	ldi	r30, 0xC2	; 194
    3880:	f0 e0       	ldi	r31, 0x00	; 0
    3882:	80 81       	ld	r24, Z
    3884:	86 60       	ori	r24, 0x06	; 6
    3886:	80 83       	st	Z, r24



}
    3888:	08 95       	ret

0000388a <initUsart1>:

void initUsart1() {

	UBRR1H = 0;												// set baudrate
    388a:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = 16;
    388e:	80 e1       	ldi	r24, 0x10	; 16
    3890:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1A  |= (1 << U2X1);									// enable double speed
    3894:	e8 ec       	ldi	r30, 0xC8	; 200
    3896:	f0 e0       	ldi	r31, 0x00	; 0
    3898:	80 81       	ld	r24, Z
    389a:	82 60       	ori	r24, 0x02	; 2
    389c:	80 83       	st	Z, r24
	//UCSR0A &= ~(1 << U2X1);
	UCSR1B |= (1 << TXEN1) | (1 << RXEN1);					// enable uart0 transmitter and receiver
    389e:	e9 ec       	ldi	r30, 0xC9	; 201
    38a0:	f0 e0       	ldi	r31, 0x00	; 0
    38a2:	80 81       	ld	r24, Z
    38a4:	88 61       	ori	r24, 0x18	; 24
    38a6:	80 83       	st	Z, r24
	UCSR1C |= (1<<UCSZ11) | (1<<UCSZ10);					// set frame format: 8-bit data, no parity, 1 stop bit
    38a8:	ea ec       	ldi	r30, 0xCA	; 202
    38aa:	f0 e0       	ldi	r31, 0x00	; 0
    38ac:	80 81       	ld	r24, Z
    38ae:	86 60       	ori	r24, 0x06	; 6
    38b0:	80 83       	st	Z, r24

}
    38b2:	08 95       	ret

000038b4 <closeUsart>:

void closeUsart() {

	UCSR0A = 0x00;	// clear all usart registers
    38b4:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0x00;
    38b8:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 0x00;
    38bc:	10 92 c2 00 	sts	0x00C2, r1

}
    38c0:	08 95       	ret

000038c2 <usart0Transmit>:

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    38c2:	90 91 c0 00 	lds	r25, 0x00C0
    38c6:	95 ff       	sbrs	r25, 5
    38c8:	fc cf       	rjmp	.-8      	; 0x38c2 <usart0Transmit>
	UDR0 = data;						// put data into buffer, sends the data
    38ca:	80 93 c6 00 	sts	0x00C6, r24
	if(isBlocking) {
    38ce:	66 23       	and	r22, r22
    38d0:	21 f0       	breq	.+8      	; 0x38da <usart0Transmit+0x18>
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    38d2:	80 91 c0 00 	lds	r24, 0x00C0
    38d6:	86 ff       	sbrs	r24, 6
    38d8:	fc cf       	rjmp	.-8      	; 0x38d2 <usart0Transmit+0x10>
    38da:	08 95       	ret

000038dc <usart1Transmit>:
	}
}

void usart1Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR1A & (1<<UDRE1)));		// wait for empty transmit buffer
    38dc:	90 91 c8 00 	lds	r25, 0x00C8
    38e0:	95 ff       	sbrs	r25, 5
    38e2:	fc cf       	rjmp	.-8      	; 0x38dc <usart1Transmit>
	UDR1 = data;						// put data into buffer, sends the data
    38e4:	80 93 ce 00 	sts	0x00CE, r24
	if(isBlocking) {
    38e8:	66 23       	and	r22, r22
    38ea:	21 f0       	breq	.+8      	; 0x38f4 <usart1Transmit+0x18>
		while (!(UCSR1A & (1<<TXC1)));	// wait transmission complete
    38ec:	80 91 c8 00 	lds	r24, 0x00C8
    38f0:	86 ff       	sbrs	r24, 6
    38f2:	fc cf       	rjmp	.-8      	; 0x38ec <usart1Transmit+0x10>
    38f4:	08 95       	ret

000038f6 <usart0InputBufferEmpty>:

}

char usart0InputBufferEmpty() {

	if(UCSR0A & (1<<RXC0)) {	// something received
    38f6:	80 91 c0 00 	lds	r24, 0x00C0
		return 0;
    38fa:	80 95       	com	r24
	} else {
		return 1;
	}

}
    38fc:	88 1f       	adc	r24, r24
    38fe:	88 27       	eor	r24, r24
    3900:	88 1f       	adc	r24, r24
    3902:	08 95       	ret

00003904 <usart0Receive>:

unsigned char usart0Receive() {

	unsigned int i=0;

	while(usart0InputBufferEmpty()) {
    3904:	87 e9       	ldi	r24, 0x97	; 151
    3906:	90 e0       	ldi	r25, 0x00	; 0

}

char usart0InputBufferEmpty() {

	if(UCSR0A & (1<<RXC0)) {	// something received
    3908:	20 91 c0 00 	lds	r18, 0x00C0
    390c:	27 fd       	sbrc	r18, 7
    390e:	07 c0       	rjmp	.+14     	; 0x391e <usart0Receive+0x1a>
			commError = 1;
			return 0;				// timeout
		}
	}								// wait for data to be received

	return UDR0;					// get and return received data from buffer
    3910:	01 97       	sbiw	r24, 0x01	; 1

	unsigned int i=0;

	while(usart0InputBufferEmpty()) {
		i++;
		if(i>150) {
    3912:	d1 f7       	brne	.-12     	; 0x3908 <usart0Receive+0x4>
			/*
			if(UCSR0A & (1<<3)) {	// overflow flag
			}
			*/
			commError = 1;
    3914:	81 e0       	ldi	r24, 0x01	; 1
    3916:	80 93 1a 03 	sts	0x031A, r24
			return 0;				// timeout
    391a:	80 e0       	ldi	r24, 0x00	; 0
    391c:	08 95       	ret
		}
	}								// wait for data to be received

	return UDR0;					// get and return received data from buffer
    391e:	80 91 c6 00 	lds	r24, 0x00C6

}
    3922:	08 95       	ret

00003924 <__vector_25>:
		}
	}
}
*/

ISR(USART0_RX_vect) {
    3924:	1f 92       	push	r1
    3926:	0f 92       	push	r0
    3928:	0f b6       	in	r0, 0x3f	; 63
    392a:	0f 92       	push	r0
    392c:	0b b6       	in	r0, 0x3b	; 59
    392e:	0f 92       	push	r0
    3930:	11 24       	eor	r1, r1
    3932:	2f 93       	push	r18
    3934:	3f 93       	push	r19
    3936:	4f 93       	push	r20
    3938:	5f 93       	push	r21
    393a:	6f 93       	push	r22
    393c:	7f 93       	push	r23
    393e:	8f 93       	push	r24
    3940:	9f 93       	push	r25
    3942:	af 93       	push	r26
    3944:	bf 93       	push	r27
    3946:	ef 93       	push	r30
    3948:	ff 93       	push	r31

	char receivedByte = UDR0;
    394a:	80 91 c6 00 	lds	r24, 0x00C6

	if(currentSelector==15) {
    394e:	90 91 48 04 	lds	r25, 0x0448
    3952:	9f 30       	cpi	r25, 0x0F	; 15
    3954:	21 f1       	breq	.+72     	; 0x399e <__vector_25+0x7a>
			eeprom_write_byte((uint8_t*) 4093, currentOsccal); 
		}

	} else {

		if(chooseMenu) {
    3956:	90 91 11 02 	lds	r25, 0x0211
    395a:	99 23       	and	r25, r25
    395c:	d9 f4       	brne	.+54     	; 0x3994 <__vector_25+0x70>
			chooseMenu = 0;
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
    395e:	90 91 1f 04 	lds	r25, 0x041F
    3962:	91 30       	cpi	r25, 0x01	; 1
    3964:	09 f4       	brne	.+2      	; 0x3968 <__vector_25+0x44>
    3966:	60 c0       	rjmp	.+192    	; 0x3a28 <__vector_25+0x104>
    3968:	92 30       	cpi	r25, 0x02	; 2
    396a:	09 f4       	brne	.+2      	; 0x396e <__vector_25+0x4a>
    396c:	43 c0       	rjmp	.+134    	; 0x39f4 <__vector_25+0xd0>
			}
		}

	}

}
    396e:	ff 91       	pop	r31
    3970:	ef 91       	pop	r30
    3972:	bf 91       	pop	r27
    3974:	af 91       	pop	r26
    3976:	9f 91       	pop	r25
    3978:	8f 91       	pop	r24
    397a:	7f 91       	pop	r23
    397c:	6f 91       	pop	r22
    397e:	5f 91       	pop	r21
    3980:	4f 91       	pop	r20
    3982:	3f 91       	pop	r19
    3984:	2f 91       	pop	r18
    3986:	0f 90       	pop	r0
    3988:	0b be       	out	0x3b, r0	; 59
    398a:	0f 90       	pop	r0
    398c:	0f be       	out	0x3f, r0	; 63
    398e:	0f 90       	pop	r0
    3990:	1f 90       	pop	r1
    3992:	18 95       	reti
		}

	} else {

		if(chooseMenu) {
			chooseMenu = 0;
    3994:	10 92 11 02 	sts	0x0211, r1
			menuChoice = receivedByte;
    3998:	80 93 1f 04 	sts	0x041F, r24
    399c:	e8 cf       	rjmp	.-48     	; 0x396e <__vector_25+0x4a>

	char receivedByte = UDR0;

	if(currentSelector==15) {

		if(receivedByte == '+') {
    399e:	8b 32       	cpi	r24, 0x2B	; 43
    39a0:	09 f4       	brne	.+2      	; 0x39a4 <__vector_25+0x80>
    39a2:	4c c0       	rjmp	.+152    	; 0x3a3c <__vector_25+0x118>
				currentOsccal++;
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
    39a4:	8d 32       	cpi	r24, 0x2D	; 45
    39a6:	f1 f0       	breq	.+60     	; 0x39e4 <__vector_25+0xc0>
				currentOsccal--;	
			}
			OSCCAL = currentOsccal;;
		}

		if(receivedByte == 'g') {
    39a8:	87 36       	cpi	r24, 0x67	; 103
    39aa:	09 f0       	breq	.+2      	; 0x39ae <__vector_25+0x8a>
    39ac:	5b c0       	rjmp	.+182    	; 0x3a64 <__vector_25+0x140>
			usart0Transmit(irCommand,1);
    39ae:	90 91 23 04 	lds	r25, 0x0423

}

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    39b2:	80 91 c0 00 	lds	r24, 0x00C0
    39b6:	85 ff       	sbrs	r24, 5
    39b8:	fc cf       	rjmp	.-8      	; 0x39b2 <__vector_25+0x8e>
	UDR0 = data;						// put data into buffer, sends the data
    39ba:	90 93 c6 00 	sts	0x00C6, r25
	if(isBlocking) {
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    39be:	80 91 c0 00 	lds	r24, 0x00C0
    39c2:	86 ff       	sbrs	r24, 6
    39c4:	fc cf       	rjmp	.-8      	; 0x39be <__vector_25+0x9a>
			OSCCAL = currentOsccal;;
		}

		if(receivedByte == 'g') {
			usart0Transmit(irCommand,1);
			currentOsccal = OSCCAL;
    39c6:	90 91 66 00 	lds	r25, 0x0066
    39ca:	90 93 c5 04 	sts	0x04C5, r25

}

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    39ce:	80 91 c0 00 	lds	r24, 0x00C0
    39d2:	85 ff       	sbrs	r24, 5
    39d4:	fc cf       	rjmp	.-8      	; 0x39ce <__vector_25+0xaa>
	UDR0 = data;						// put data into buffer, sends the data
    39d6:	90 93 c6 00 	sts	0x00C6, r25
	if(isBlocking) {
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    39da:	80 91 c0 00 	lds	r24, 0x00C0
    39de:	86 ff       	sbrs	r24, 6
    39e0:	fc cf       	rjmp	.-8      	; 0x39da <__vector_25+0xb6>
    39e2:	c5 cf       	rjmp	.-118    	; 0x396e <__vector_25+0x4a>
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
			if(currentOsccal>0) {
    39e4:	80 91 c5 04 	lds	r24, 0x04C5
    39e8:	88 23       	and	r24, r24
    39ea:	d1 f1       	breq	.+116    	; 0x3a60 <__vector_25+0x13c>
				currentOsccal--;	
    39ec:	81 50       	subi	r24, 0x01	; 1
    39ee:	80 93 c5 04 	sts	0x04C5, r24
    39f2:	2b c0       	rjmp	.+86     	; 0x3a4a <__vector_25+0x126>
						menuChoice = 0;
					}
					break;

				case 2:	// address writing in eeprom
					if(menuState == 0) { // receive rf address LSB:
    39f4:	40 91 21 04 	lds	r20, 0x0421
    39f8:	44 23       	and	r20, r20
    39fa:	51 f1       	breq	.+84     	; 0x3a50 <__vector_25+0x12c>
						rfAddress = (unsigned int)receivedByte&0x00FF;
						menuState = 1;
					} else if(menuState == 1) { // receive rf address MSB
    39fc:	41 30       	cpi	r20, 0x01	; 1
    39fe:	09 f0       	breq	.+2      	; 0x3a02 <__vector_25+0xde>
    3a00:	b6 cf       	rjmp	.-148    	; 0x396e <__vector_25+0x4a>
						rfAddress |= ((unsigned int)receivedByte<<8);
    3a02:	38 2f       	mov	r19, r24
    3a04:	20 e0       	ldi	r18, 0x00	; 0
    3a06:	80 91 13 03 	lds	r24, 0x0313
    3a0a:	90 91 14 03 	lds	r25, 0x0314
    3a0e:	82 2b       	or	r24, r18
    3a10:	93 2b       	or	r25, r19
    3a12:	90 93 14 03 	sts	0x0314, r25
    3a16:	80 93 13 03 	sts	0x0313, r24
						addressReceived = 1;
    3a1a:	40 93 20 04 	sts	0x0420, r20
						menuState = 0;
    3a1e:	10 92 21 04 	sts	0x0421, r1
						chooseMenu = 1;
    3a22:	40 93 11 02 	sts	0x0211, r20
    3a26:	a3 cf       	rjmp	.-186    	; 0x396e <__vector_25+0x4a>
			chooseMenu = 0;
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
				case 1: // send sensors data and activate actuators
					if(receivedByte == 0xAA) {
    3a28:	8a 3a       	cpi	r24, 0xAA	; 170
    3a2a:	31 f1       	breq	.+76     	; 0x3a78 <__vector_25+0x154>
						getDataNow = 1;
					} else if(receivedByte == 0x55) {
    3a2c:	85 35       	cpi	r24, 0x55	; 85
    3a2e:	09 f0       	breq	.+2      	; 0x3a32 <__vector_25+0x10e>
    3a30:	9e cf       	rjmp	.-196    	; 0x396e <__vector_25+0x4a>
						chooseMenu = 1;
    3a32:	90 93 11 02 	sts	0x0211, r25
						menuChoice = 0;
    3a36:	10 92 1f 04 	sts	0x041F, r1
    3a3a:	99 cf       	rjmp	.-206    	; 0x396e <__vector_25+0x4a>
	char receivedByte = UDR0;

	if(currentSelector==15) {

		if(receivedByte == '+') {
			if(currentOsccal<255) {
    3a3c:	80 91 c5 04 	lds	r24, 0x04C5
    3a40:	8f 3f       	cpi	r24, 0xFF	; 255
    3a42:	e9 f0       	breq	.+58     	; 0x3a7e <__vector_25+0x15a>
				currentOsccal++;
    3a44:	8f 5f       	subi	r24, 0xFF	; 255
    3a46:	80 93 c5 04 	sts	0x04C5, r24

		if(receivedByte == '-') {
			if(currentOsccal>0) {
				currentOsccal--;	
			}
			OSCCAL = currentOsccal;;
    3a4a:	80 93 66 00 	sts	0x0066, r24
    3a4e:	8f cf       	rjmp	.-226    	; 0x396e <__vector_25+0x4a>
					}
					break;

				case 2:	// address writing in eeprom
					if(menuState == 0) { // receive rf address LSB:
						rfAddress = (unsigned int)receivedByte&0x00FF;
    3a50:	80 93 13 03 	sts	0x0313, r24
    3a54:	10 92 14 03 	sts	0x0314, r1
						menuState = 1;
    3a58:	81 e0       	ldi	r24, 0x01	; 1
    3a5a:	80 93 21 04 	sts	0x0421, r24
    3a5e:	87 cf       	rjmp	.-242    	; 0x396e <__vector_25+0x4a>
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
			if(currentOsccal>0) {
    3a60:	80 e0       	ldi	r24, 0x00	; 0
    3a62:	f3 cf       	rjmp	.-26     	; 0x3a4a <__vector_25+0x126>
			usart0Transmit(irCommand,1);
			currentOsccal = OSCCAL;
			usart0Transmit(currentOsccal,1);
		}

		if(receivedByte == 's') {
    3a64:	83 37       	cpi	r24, 0x73	; 115
    3a66:	09 f0       	breq	.+2      	; 0x3a6a <__vector_25+0x146>
    3a68:	82 cf       	rjmp	.-252    	; 0x396e <__vector_25+0x4a>
			eeprom_write_byte((uint8_t*) 4093, currentOsccal); 
    3a6a:	8d ef       	ldi	r24, 0xFD	; 253
    3a6c:	9f e0       	ldi	r25, 0x0F	; 15
    3a6e:	60 91 c5 04 	lds	r22, 0x04C5
    3a72:	0e 94 61 43 	call	0x86c2	; 0x86c2 <__eewr_byte_m2560>
    3a76:	7b cf       	rjmp	.-266    	; 0x396e <__vector_25+0x4a>
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
				case 1: // send sensors data and activate actuators
					if(receivedByte == 0xAA) {
						getDataNow = 1;
    3a78:	90 93 22 04 	sts	0x0422, r25
    3a7c:	78 cf       	rjmp	.-272    	; 0x396e <__vector_25+0x4a>
	char receivedByte = UDR0;

	if(currentSelector==15) {

		if(receivedByte == '+') {
			if(currentOsccal<255) {
    3a7e:	8f ef       	ldi	r24, 0xFF	; 255
    3a80:	e4 cf       	rjmp	.-56     	; 0x3a4a <__vector_25+0x126>

00003a82 <getSelector>:

#include "utility.h"

unsigned char getSelector() {
   return (SEL0) + 2*(SEL1) + 4*(SEL2) + 8*(SEL3);
    3a82:	86 b1       	in	r24, 0x06	; 6
    3a84:	66 b1       	in	r22, 0x06	; 6
    3a86:	26 b1       	in	r18, 0x06	; 6
    3a88:	46 b1       	in	r20, 0x06	; 6
    3a8a:	30 e0       	ldi	r19, 0x00	; 0
    3a8c:	28 70       	andi	r18, 0x08	; 8
    3a8e:	30 70       	andi	r19, 0x00	; 0
    3a90:	35 95       	asr	r19
    3a92:	27 95       	ror	r18
    3a94:	35 95       	asr	r19
    3a96:	27 95       	ror	r18
    3a98:	35 95       	asr	r19
    3a9a:	27 95       	ror	r18
    3a9c:	22 0f       	add	r18, r18
    3a9e:	33 1f       	adc	r19, r19
    3aa0:	70 e0       	ldi	r23, 0x00	; 0
    3aa2:	64 70       	andi	r22, 0x04	; 4
    3aa4:	70 70       	andi	r23, 0x00	; 0
    3aa6:	75 95       	asr	r23
    3aa8:	67 95       	ror	r22
    3aaa:	75 95       	asr	r23
    3aac:	67 95       	ror	r22
    3aae:	26 0f       	add	r18, r22
    3ab0:	37 1f       	adc	r19, r23
    3ab2:	22 0f       	add	r18, r18
    3ab4:	33 1f       	adc	r19, r19
    3ab6:	50 e0       	ldi	r21, 0x00	; 0
    3ab8:	42 70       	andi	r20, 0x02	; 2
    3aba:	50 70       	andi	r21, 0x00	; 0
    3abc:	55 95       	asr	r21
    3abe:	47 95       	ror	r20
    3ac0:	24 0f       	add	r18, r20
    3ac2:	35 1f       	adc	r19, r21
    3ac4:	22 0f       	add	r18, r18
    3ac6:	81 70       	andi	r24, 0x01	; 1
}
    3ac8:	82 0f       	add	r24, r18
    3aca:	08 95       	ret

00003acc <initPeripherals>:
    

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
    3acc:	f8 94       	cli
	
	// reset all registers touched by arduino in the "init()" functions (wiring.c) not used by the robot
	TCCR0A = 0;
    3ace:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
    3ad0:	15 bc       	out	0x25, r1	; 37
	TIMSK0 = 0;
    3ad2:	10 92 6e 00 	sts	0x006E, r1
	TCCR5A = 0;
    3ad6:	10 92 20 01 	sts	0x0120, r1
	TCCR5B = 0;
    3ada:	10 92 21 01 	sts	0x0121, r1

	rfAddress = eeprom_read_word((uint16_t*)4094);
    3ade:	8e ef       	ldi	r24, 0xFE	; 254
    3ae0:	9f e0       	ldi	r25, 0x0F	; 15
    3ae2:	0e 94 33 43 	call	0x8666	; 0x8666 <__eerd_word_m2560>
    3ae6:	90 93 14 03 	sts	0x0314, r25
    3aea:	80 93 13 03 	sts	0x0313, r24
	currentOsccal = eeprom_read_byte((uint8_t*)4093);
    3aee:	8d ef       	ldi	r24, 0xFD	; 253
    3af0:	9f e0       	ldi	r25, 0x0F	; 15
    3af2:	0e 94 2b 43 	call	0x8656	; 0x8656 <__eerd_byte_m2560>
    3af6:	80 93 c5 04 	sts	0x04C5, r24
	if(currentOsccal!=0 && currentOsccal!=255) { // clear memory
    3afa:	98 2f       	mov	r25, r24
    3afc:	91 50       	subi	r25, 0x01	; 1
    3afe:	9e 3f       	cpi	r25, 0xFE	; 254
    3b00:	e8 f5       	brcc	.+122    	; 0x3b7c <initPeripherals+0xb0>
		OSCCAL = currentOsccal;
    3b02:	80 93 66 00 	sts	0x0066, r24
		currentOsccal = OSCCAL;
		eeprom_write_byte((uint8_t*) 4093, currentOsccal);
	}
	
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
    3b06:	80 91 13 03 	lds	r24, 0x0313
    3b0a:	90 91 14 03 	lds	r25, 0x0314
    3b0e:	9c 01       	movw	r18, r24
    3b10:	21 58       	subi	r18, 0x81	; 129
    3b12:	3c 40       	sbci	r19, 0x0C	; 12
    3b14:	23 30       	cpi	r18, 0x03	; 3
    3b16:	31 05       	cpc	r19, r1
    3b18:	08 f5       	brcc	.+66     	; 0x3b5c <initPeripherals+0x90>
		hardwareRevision = HW_REV_3_0;
    3b1a:	10 92 4b 04 	sts	0x044B, r1

	if(rfAddress > 3203) {
		hardwareRevision = HW_REV_3_1;
	}

	initCalibration();
    3b1e:	0e 94 13 33 	call	0x6626	; 0x6626 <initCalibration>
	initPortsIO();
    3b22:	0e 94 37 1b 	call	0x366e	; 0x366e <initPortsIO>
	initAdc();
    3b26:	0e 94 76 1e 	call	0x3cec	; 0x3cec <initAdc>
	initMotors();
    3b2a:	0e 94 57 21 	call	0x42ae	; 0x42ae <initMotors>
	initRGBleds();
    3b2e:	0e 94 ee 36 	call	0x6ddc	; 0x6ddc <initRGBleds>
	initSPI();
    3b32:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <initSPI>
	mirf_init();
    3b36:	0e 94 ce 0c 	call	0x199c	; 0x199c <mirf_init>
	if(spiCommError==0) {
    3b3a:	80 91 16 03 	lds	r24, 0x0316
    3b3e:	88 23       	and	r24, r24
    3b40:	29 f4       	brne	.+10     	; 0x3b4c <initPeripherals+0x80>
		rfFlags |= 1;
    3b42:	80 91 15 03 	lds	r24, 0x0315
    3b46:	81 60       	ori	r24, 0x01	; 1
    3b48:	80 93 15 03 	sts	0x0315, r24
	}
	initUsart0();
    3b4c:	0e 94 30 1c 	call	0x3860	; 0x3860 <initUsart0>
	initAccelerometer();
    3b50:	0e 94 36 38 	call	0x706c	; 0x706c <initAccelerometer>
	init_ir_remote_control();
    3b54:	0e 94 c7 11 	call	0x238e	; 0x238e <init_ir_remote_control>

	sei();			// enable global interrupts
    3b58:	78 94       	sei

	
}
    3b5a:	08 95       	ret
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
		hardwareRevision = HW_REV_3_0;
	}

	if(rfAddress == 3200) {
    3b5c:	2c e0       	ldi	r18, 0x0C	; 12
    3b5e:	80 38       	cpi	r24, 0x80	; 128
    3b60:	92 07       	cpc	r25, r18
    3b62:	21 f4       	brne	.+8      	; 0x3b6c <initPeripherals+0xa0>
		hardwareRevision = HW_REV_3_0_1;
    3b64:	81 e0       	ldi	r24, 0x01	; 1
    3b66:	80 93 4b 04 	sts	0x044B, r24
    3b6a:	d9 cf       	rjmp	.-78     	; 0x3b1e <initPeripherals+0x52>
	}

	if(rfAddress > 3203) {
    3b6c:	2c e0       	ldi	r18, 0x0C	; 12
    3b6e:	84 38       	cpi	r24, 0x84	; 132
    3b70:	92 07       	cpc	r25, r18
    3b72:	a8 f2       	brcs	.-86     	; 0x3b1e <initPeripherals+0x52>
		hardwareRevision = HW_REV_3_1;
    3b74:	82 e0       	ldi	r24, 0x02	; 2
    3b76:	80 93 4b 04 	sts	0x044B, r24
    3b7a:	d1 cf       	rjmp	.-94     	; 0x3b1e <initPeripherals+0x52>
	rfAddress = eeprom_read_word((uint16_t*)4094);
	currentOsccal = eeprom_read_byte((uint8_t*)4093);
	if(currentOsccal!=0 && currentOsccal!=255) { // clear memory
		OSCCAL = currentOsccal;
	} else {
		currentOsccal = OSCCAL;
    3b7c:	60 91 66 00 	lds	r22, 0x0066
    3b80:	60 93 c5 04 	sts	0x04C5, r22
		eeprom_write_byte((uint8_t*) 4093, currentOsccal);
    3b84:	8d ef       	ldi	r24, 0xFD	; 253
    3b86:	9f e0       	ldi	r25, 0x0F	; 15
    3b88:	0e 94 61 43 	call	0x86c2	; 0x86c2 <__eewr_byte_m2560>
    3b8c:	bc cf       	rjmp	.-136    	; 0x3b06 <initPeripherals+0x3a>

00003b8e <__vector_15>:

	
}

// used only for wake-up from sleep
ISR(TIMER2_OVF_vect) {
    3b8e:	1f 92       	push	r1
    3b90:	0f 92       	push	r0
    3b92:	0f b6       	in	r0, 0x3f	; 63
    3b94:	0f 92       	push	r0
    3b96:	11 24       	eor	r1, r1

}
    3b98:	0f 90       	pop	r0
    3b9a:	0f be       	out	0x3f, r0	; 63
    3b9c:	0f 90       	pop	r0
    3b9e:	1f 90       	pop	r1
    3ba0:	18 95       	reti

00003ba2 <sleep>:

void sleep(unsigned char seconds) {
    3ba2:	cf 93       	push	r28
    3ba4:	df 93       	push	r29

	unsigned int pause = seconds*30;	// the timer2 used to wake-up from sleep is configured to run at 30 Hz
    3ba6:	9e e1       	ldi	r25, 0x1E	; 30
    3ba8:	89 9f       	mul	r24, r25
    3baa:	e0 01       	movw	r28, r0
    3bac:	11 24       	eor	r1, r1

	// disable external interrupt because it uses the timer2 to interpret the tv
	// remote signal and the timer2 must be free in order to be used for wake-up from sleep
	PCICR &= ~(1 << PCIE1);			// disable interrupt from falling edge
    3bae:	80 91 68 00 	lds	r24, 0x0068
    3bb2:	8d 7f       	andi	r24, 0xFD	; 253
    3bb4:	80 93 68 00 	sts	0x0068, r24
	PCMSK1 &= ~(1 << PCINT15);		
    3bb8:	80 91 6c 00 	lds	r24, 0x006C
    3bbc:	8f 77       	andi	r24, 0x7F	; 127
    3bbe:	80 93 6c 00 	sts	0x006C, r24
	PCIFR |= (1 << PCIF1);			// clear interrupt flag
    3bc2:	d9 9a       	sbi	0x1b, 1	; 27

	// disable adc
	ADCSRA = 0x00;					// disable interrupt and turn off adc
    3bc4:	10 92 7a 00 	sts	0x007A, r1
	ADCSRA |= (1 << ADIF);			// clear interrupt flag
    3bc8:	80 91 7a 00 	lds	r24, 0x007A
    3bcc:	80 61       	ori	r24, 0x10	; 16
    3bce:	80 93 7a 00 	sts	0x007A, r24

	// disable motors pwm
	TCCR3A = 0x00;	// turn off timer
    3bd2:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0x00;
    3bd6:	10 92 91 00 	sts	0x0091, r1
	TIMSK3 = 0x00;	// disable interrupt
    3bda:	10 92 71 00 	sts	0x0071, r1
	TIFR3 |= (1 << OCF3A) | (1 << OCF3B) | (1 << TOV3);	// clear output compares and timer overflow interrupt flags
    3bde:	88 b3       	in	r24, 0x18	; 24
    3be0:	87 60       	ori	r24, 0x07	; 7
    3be2:	88 bb       	out	0x18, r24	; 24
	TCCR4A = 0x00;
    3be4:	10 92 a0 00 	sts	0x00A0, r1
	TCCR4B = 0x00;
    3be8:	10 92 a1 00 	sts	0x00A1, r1
	TIMSK4 = 0x00;
    3bec:	10 92 72 00 	sts	0x0072, r1
	TIFR4 |= (1 << OCF4A) | (1 << OCF4B) | (1 << TOV4);	// clear output compares and timer overflow interrupt flags
    3bf0:	89 b3       	in	r24, 0x19	; 25
    3bf2:	87 60       	ori	r24, 0x07	; 7
    3bf4:	89 bb       	out	0x19, r24	; 25

	// disable leds pwm
	TCCR1A = 0x00;	// turn off timer
    3bf6:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x00;
    3bfa:	10 92 81 00 	sts	0x0081, r1

	// close communication channels
	closeUsart();
    3bfe:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <closeUsart>
	closeSPI();
    3c02:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <closeSPI>
	i2c_close();
    3c06:	0e 94 82 1b 	call	0x3704	; 0x3704 <i2c_close>

	// set port pins
	initPortsIO();
    3c0a:	0e 94 37 1b 	call	0x366e	; 0x366e <initPortsIO>
	//PORTB &= ~(1 << 4);	// radio CE pin
	//DDRD = 0xFF;
	//PORTD = 0x00;	// I2C and uart pins to 0

	// set extendend standby mode and enable it
	SMCR |= (1 << SM2) | (1 << SM1) | (1 << SM0) | (1 << SE);	// extended standby
    3c0e:	83 b7       	in	r24, 0x33	; 51
    3c10:	8f 60       	ori	r24, 0x0F	; 15
    3c12:	83 bf       	out	0x33, r24	; 51

	// set timer2 for wake-up: 
	// source clock = 8 MHz
	// prescaler = 1/1024 => 7812.5 Hz
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
    3c14:	81 e0       	ldi	r24, 0x01	; 1
    3c16:	80 93 70 00 	sts	0x0070, r24
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
    3c1a:	80 91 b0 00 	lds	r24, 0x00B0
    3c1e:	8d 7f       	andi	r24, 0xFD	; 253
    3c20:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler
    3c24:	80 91 b1 00 	lds	r24, 0x00B1
    3c28:	87 60       	ori	r24, 0x07	; 7
    3c2a:	80 93 b1 00 	sts	0x00B1, r24

	while(pause > 0) {	
    3c2e:	20 97       	sbiw	r28, 0x00	; 0
    3c30:	19 f0       	breq	.+6      	; 0x3c38 <sleep+0x96>
		// enter extended standby mode
		//sleep_cpu();
		__asm__("sleep");
    3c32:	88 95       	sleep
		pause--;
    3c34:	21 97       	sbiw	r28, 0x01	; 1
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler

	while(pause > 0) {	
    3c36:	e9 f7       	brne	.-6      	; 0x3c32 <sleep+0x90>
//		PORTB ^= (1 << 6);
	}

	// disable power mode
	//SMCR &= ~(1 << SE);
	SMCR = 0x00;
    3c38:	13 be       	out	0x33, r1	; 51

	// disable timer2 and its timer overflow interrupt
	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);	// disable timer2
    3c3a:	80 91 b1 00 	lds	r24, 0x00B1
    3c3e:	88 7f       	andi	r24, 0xF8	; 248
    3c40:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;					// disable all interrupt for timer2
    3c44:	10 92 70 00 	sts	0x0070, r1
	TCCR2A |= (1 << WGM21); 	// mode 2 => CTC mode
    3c48:	80 91 b0 00 	lds	r24, 0x00B0
    3c4c:	82 60       	ori	r24, 0x02	; 2
    3c4e:	80 93 b0 00 	sts	0x00B0, r24

	pwm_red = 255;
    3c52:	8f ef       	ldi	r24, 0xFF	; 255
    3c54:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    3c58:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    3c5c:	80 93 0e 02 	sts	0x020E, r24
	pwm_right = 0;
    3c60:	10 92 f4 02 	sts	0x02F4, r1
    3c64:	10 92 f3 02 	sts	0x02F3, r1
	pwm_left = 0;
    3c68:	10 92 f6 02 	sts	0x02F6, r1
    3c6c:	10 92 f5 02 	sts	0x02F5, r1
	initPeripherals();
    3c70:	0e 94 66 1d 	call	0x3acc	; 0x3acc <initPeripherals>

}
    3c74:	df 91       	pop	r29
    3c76:	cf 91       	pop	r28
    3c78:	08 95       	ret

00003c7a <getTime100MicroSec>:

unsigned long int getTime100MicroSec() {
    3c7a:	60 91 44 04 	lds	r22, 0x0444
    3c7e:	70 91 45 04 	lds	r23, 0x0445
	return clockTick;
}
    3c82:	80 91 46 04 	lds	r24, 0x0446
    3c86:	90 91 47 04 	lds	r25, 0x0447
    3c8a:	08 95       	ret

00003c8c <readBatteryLevel>:

void readBatteryLevel() {
	measBattery = 1;
    3c8c:	81 e0       	ldi	r24, 0x01	; 1
    3c8e:	80 93 bd 02 	sts	0x02BD, r24
}
    3c92:	08 95       	ret

00003c94 <resetOdometry>:

void resetOdometry() {
	leftMotSteps = 0;
    3c94:	80 e0       	ldi	r24, 0x00	; 0
    3c96:	90 e0       	ldi	r25, 0x00	; 0
    3c98:	dc 01       	movw	r26, r24
    3c9a:	80 93 d3 02 	sts	0x02D3, r24
    3c9e:	90 93 d4 02 	sts	0x02D4, r25
    3ca2:	a0 93 d5 02 	sts	0x02D5, r26
    3ca6:	b0 93 d6 02 	sts	0x02D6, r27
	rightMotSteps = 0;
    3caa:	80 93 cf 02 	sts	0x02CF, r24
    3cae:	90 93 d0 02 	sts	0x02D0, r25
    3cb2:	a0 93 d1 02 	sts	0x02D1, r26
    3cb6:	b0 93 d2 02 	sts	0x02D2, r27
	theta = 0;
    3cba:	80 93 6b 04 	sts	0x046B, r24
    3cbe:	90 93 6c 04 	sts	0x046C, r25
    3cc2:	a0 93 6d 04 	sts	0x046D, r26
    3cc6:	b0 93 6e 04 	sts	0x046E, r27
	xPos = 0;
    3cca:	80 93 73 04 	sts	0x0473, r24
    3cce:	90 93 74 04 	sts	0x0474, r25
    3cd2:	a0 93 75 04 	sts	0x0475, r26
    3cd6:	b0 93 76 04 	sts	0x0476, r27
	yPos = 0;
    3cda:	80 93 77 04 	sts	0x0477, r24
    3cde:	90 93 78 04 	sts	0x0478, r25
    3ce2:	a0 93 79 04 	sts	0x0479, r26
    3ce6:	b0 93 7a 04 	sts	0x047A, r27
}
    3cea:	08 95       	ret

00003cec <initAdc>:

#include "adc.h"


void initAdc(void) {
    3cec:	cf 93       	push	r28
    3cee:	df 93       	push	r29
	// ADMUX  -----> REFS1	REFS0	 ADLAR	MUX4	MUX3 	 MUX2	MUX1	MUX0
	// default		 0		0		 0		0		0		 0		0		0
	// ADCSRB -----> -		ACME	 - 		- 		MUX5 	 ADTS2 	ADTS1 	ADTS0
	// default		 0		0		 0		0		0		 0		0		0

	ADCSRA = 0;
    3cf0:	ea e7       	ldi	r30, 0x7A	; 122
    3cf2:	f0 e0       	ldi	r31, 0x00	; 0
    3cf4:	10 82       	st	Z, r1
	ADCSRB = 0;
    3cf6:	ab e7       	ldi	r26, 0x7B	; 123
    3cf8:	b0 e0       	ldi	r27, 0x00	; 0
    3cfa:	1c 92       	st	X, r1
	ADMUX = 0;
    3cfc:	cc e7       	ldi	r28, 0x7C	; 124
    3cfe:	d0 e0       	ldi	r29, 0x00	; 0
    3d00:	18 82       	st	Y, r1

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// 1/64 prescaler => 8 MHz/64=125 KHz => Tad (adc clock)
    3d02:	80 81       	ld	r24, Z
    3d04:	86 60       	ori	r24, 0x06	; 6
    3d06:	80 83       	st	Z, r24
											// one sample need 13 Tad in free running mode, so interrupt 
											// frequency is 125/13=9.6 KHz (104 us between adc interrupts)
	ADMUX |= (1 << REFS0); 	// voltage reference to AVCC (external)
    3d08:	88 81       	ld	r24, Y
    3d0a:	80 64       	ori	r24, 0x40	; 64
    3d0c:	88 83       	st	Y, r24
	ADCSRA |= (1 << ADATE); // auto-trigger mode: the new sampling is started just after the last one is completed
    3d0e:	80 81       	ld	r24, Z
    3d10:	80 62       	ori	r24, 0x20	; 32
    3d12:	80 83       	st	Z, r24
	ADCSRB &= 0xF8;			// for safety...ADTS2:0 in ADCSRB should be already set to free running by default (0b000)
    3d14:	8c 91       	ld	r24, X
    3d16:	88 7f       	andi	r24, 0xF8	; 248
    3d18:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADIE);	// enable interrupt on conversion completion
    3d1a:	80 81       	ld	r24, Z
    3d1c:	88 60       	ori	r24, 0x08	; 8
    3d1e:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	// enable ADC
    3d20:	80 81       	ld	r24, Z
    3d22:	80 68       	ori	r24, 0x80	; 128
    3d24:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);	// start first conversion (start from channel 0)
    3d26:	80 81       	ld	r24, Z
    3d28:	80 64       	ori	r24, 0x40	; 64
    3d2a:	80 83       	st	Z, r24

}
    3d2c:	df 91       	pop	r29
    3d2e:	cf 91       	pop	r28
    3d30:	08 95       	ret

00003d32 <__vector_29>:

ISR(ADC_vect) {
    3d32:	1f 92       	push	r1
    3d34:	0f 92       	push	r0
    3d36:	0f b6       	in	r0, 0x3f	; 63
    3d38:	0f 92       	push	r0
    3d3a:	0b b6       	in	r0, 0x3b	; 59
    3d3c:	0f 92       	push	r0
    3d3e:	11 24       	eor	r1, r1
    3d40:	2f 93       	push	r18
    3d42:	3f 93       	push	r19
    3d44:	4f 93       	push	r20
    3d46:	5f 93       	push	r21
    3d48:	6f 93       	push	r22
    3d4a:	8f 93       	push	r24
    3d4c:	9f 93       	push	r25
    3d4e:	af 93       	push	r26
    3d50:	bf 93       	push	r27
    3d52:	ef 93       	push	r30
    3d54:	ff 93       	push	r31
	// channel 15:    active phase when going forward: motor left current; passive phase when going backward: motor left velocity


	//LED_BLUE_ON;

	clockTick++;				// this variable is used as base time for timed processes/functions (e,g, delay); 
    3d56:	80 91 44 04 	lds	r24, 0x0444
    3d5a:	90 91 45 04 	lds	r25, 0x0445
    3d5e:	a0 91 46 04 	lds	r26, 0x0446
    3d62:	b0 91 47 04 	lds	r27, 0x0447
    3d66:	01 96       	adiw	r24, 0x01	; 1
    3d68:	a1 1d       	adc	r26, r1
    3d6a:	b1 1d       	adc	r27, r1
    3d6c:	80 93 44 04 	sts	0x0444, r24
    3d70:	90 93 45 04 	sts	0x0445, r25
    3d74:	a0 93 46 04 	sts	0x0446, r26
    3d78:	b0 93 47 04 	sts	0x0447, r27
								// resolution of 104 us based on adc interrupts

	int value = ADCL;			// get the sample; low byte must be read first!!
    3d7c:	20 91 78 00 	lds	r18, 0x0078
    3d80:	30 e0       	ldi	r19, 0x00	; 0
	value = (ADCH<<8) | value;
    3d82:	40 91 79 00 	lds	r20, 0x0079
    3d86:	94 2f       	mov	r25, r20
    3d88:	80 e0       	ldi	r24, 0x00	; 0
    3d8a:	28 2b       	or	r18, r24
    3d8c:	39 2b       	or	r19, r25
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    3d8e:	80 91 b7 02 	lds	r24, 0x02B7
    3d92:	82 30       	cpi	r24, 0x02	; 2
    3d94:	09 f4       	brne	.+2      	; 0x3d98 <__vector_29+0x66>
    3d96:	b2 c1       	rjmp	.+868    	; 0x40fc <__vector_29+0x3ca>
    3d98:	83 30       	cpi	r24, 0x03	; 3
    3d9a:	08 f4       	brcc	.+2      	; 0x3d9e <__vector_29+0x6c>
    3d9c:	45 c0       	rjmp	.+138    	; 0x3e28 <__vector_29+0xf6>
    3d9e:	83 30       	cpi	r24, 0x03	; 3
    3da0:	09 f4       	brne	.+2      	; 0x3da4 <__vector_29+0x72>
    3da2:	d5 c1       	rjmp	.+938    	; 0x414e <__vector_29+0x41c>
    3da4:	84 30       	cpi	r24, 0x04	; 4
    3da6:	09 f4       	brne	.+2      	; 0x3daa <__vector_29+0x78>
    3da8:	68 c1       	rjmp	.+720    	; 0x407a <__vector_29+0x348>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    3daa:	80 91 b8 02 	lds	r24, 0x02B8
    3dae:	82 30       	cpi	r24, 0x02	; 2
    3db0:	09 f4       	brne	.+2      	; 0x3db4 <__vector_29+0x82>
    3db2:	4f c1       	rjmp	.+670    	; 0x4052 <__vector_29+0x320>
    3db4:	83 30       	cpi	r24, 0x03	; 3
    3db6:	08 f0       	brcs	.+2      	; 0x3dba <__vector_29+0x88>
    3db8:	cd c0       	rjmp	.+410    	; 0x3f54 <__vector_29+0x222>
    3dba:	88 23       	and	r24, r24
    3dbc:	09 f0       	breq	.+2      	; 0x3dc0 <__vector_29+0x8e>
    3dbe:	24 c1       	rjmp	.+584    	; 0x4008 <__vector_29+0x2d6>

		case 0:	// proximity
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
    3dc0:	80 91 22 02 	lds	r24, 0x0222
    3dc4:	86 95       	lsr	r24
    3dc6:	80 93 21 02 	sts	0x0221, r24
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
    3dca:	80 91 b9 02 	lds	r24, 0x02B9
    3dce:	88 23       	and	r24, r24
    3dd0:	09 f0       	breq	.+2      	; 0x3dd4 <__vector_29+0xa2>
    3dd2:	ed c1       	rjmp	.+986    	; 0x41ae <__vector_29+0x47c>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    3dd4:	81 e0       	ldi	r24, 0x01	; 1
    3dd6:	80 93 b7 02 	sts	0x02B7, r24
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 1;
    3dda:	81 e0       	ldi	r24, 0x01	; 1
    3ddc:	80 93 b8 02 	sts	0x02B8, r24

	}

	// channel selection in the adc register; continuously manually change the channel 
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
    3de0:	90 91 21 02 	lds	r25, 0x0221
    3de4:	98 30       	cpi	r25, 0x08	; 8
    3de6:	08 f0       	brcs	.+2      	; 0x3dea <__vector_29+0xb8>
    3de8:	ed c0       	rjmp	.+474    	; 0x3fc4 <__vector_29+0x292>
		ADCSRB &= ~(1 << MUX5);
    3dea:	90 91 7b 00 	lds	r25, 0x007B
    3dee:	97 7f       	andi	r25, 0xF7	; 247
    3df0:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + currentAdChannel;
    3df4:	90 91 21 02 	lds	r25, 0x0221
    3df8:	90 5c       	subi	r25, 0xC0	; 192
    3dfa:	90 93 7c 00 	sts	0x007C, r25
		ADCSRB |= (1 << MUX5);
		ADMUX = 0x40 + (currentAdChannel-8);
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {
    3dfe:	82 30       	cpi	r24, 0x02	; 2
    3e00:	09 f4       	brne	.+2      	; 0x3e04 <__vector_29+0xd2>
    3e02:	ed c0       	rjmp	.+474    	; 0x3fde <__vector_29+0x2ac>

	}

	//LED_BLUE_OFF;

}
    3e04:	ff 91       	pop	r31
    3e06:	ef 91       	pop	r30
    3e08:	bf 91       	pop	r27
    3e0a:	af 91       	pop	r26
    3e0c:	9f 91       	pop	r25
    3e0e:	8f 91       	pop	r24
    3e10:	6f 91       	pop	r22
    3e12:	5f 91       	pop	r21
    3e14:	4f 91       	pop	r20
    3e16:	3f 91       	pop	r19
    3e18:	2f 91       	pop	r18
    3e1a:	0f 90       	pop	r0
    3e1c:	0b be       	out	0x3b, r0	; 59
    3e1e:	0f 90       	pop	r0
    3e20:	0f be       	out	0x3f, r0	; 63
    3e22:	0f 90       	pop	r0
    3e24:	1f 90       	pop	r1
    3e26:	18 95       	reti
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    3e28:	88 23       	and	r24, r24
    3e2a:	09 f0       	breq	.+2      	; 0x3e2e <__vector_29+0xfc>
    3e2c:	fe c0       	rjmp	.+508    	; 0x402a <__vector_29+0x2f8>

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    3e2e:	60 91 22 02 	lds	r22, 0x0222
    3e32:	6e 30       	cpi	r22, 0x0E	; 14
    3e34:	09 f4       	brne	.+2      	; 0x3e38 <__vector_29+0x106>
    3e36:	dc c1       	rjmp	.+952    	; 0x41f0 <__vector_29+0x4be>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
				measBattery = 0;
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
			} else {
				proximityValue[currentProx] = value;	// even indexes contain ambient values; odd indexes contains "reflected" values
    3e38:	46 2f       	mov	r20, r22
    3e3a:	50 e0       	ldi	r21, 0x00	; 0
    3e3c:	fa 01       	movw	r30, r20
    3e3e:	ee 0f       	add	r30, r30
    3e40:	ff 1f       	adc	r31, r31
    3e42:	e9 5d       	subi	r30, 0xD9	; 217
    3e44:	fd 4f       	sbci	r31, 0xFD	; 253
    3e46:	31 83       	std	Z+1, r19	; 0x01
    3e48:	20 83       	st	Z, r18
			}

			if(currentProx & 0x01) {
    3e4a:	40 ff       	sbrs	r20, 0
    3e4c:	77 c0       	rjmp	.+238    	; 0x3f3c <__vector_29+0x20a>
				//if(currentProx < 16) {	// prox
					proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
    3e4e:	fa 01       	movw	r30, r20
    3e50:	ee 0f       	add	r30, r30
    3e52:	ff 1f       	adc	r31, r31
    3e54:	eb 5d       	subi	r30, 0xDB	; 219
    3e56:	fd 4f       	sbci	r31, 0xFD	; 253
    3e58:	80 81       	ld	r24, Z
    3e5a:	91 81       	ldd	r25, Z+1	; 0x01
    3e5c:	fa 01       	movw	r30, r20
    3e5e:	ee 0f       	add	r30, r30
    3e60:	ff 1f       	adc	r31, r31
    3e62:	e9 5d       	subi	r30, 0xD9	; 217
    3e64:	fd 4f       	sbci	r31, 0xFD	; 253
    3e66:	40 81       	ld	r20, Z
    3e68:	51 81       	ldd	r21, Z+1	; 0x01
    3e6a:	26 2f       	mov	r18, r22
    3e6c:	26 95       	lsr	r18
    3e6e:	30 e0       	ldi	r19, 0x00	; 0
    3e70:	84 1b       	sub	r24, r20
    3e72:	95 0b       	sbc	r25, r21
    3e74:	22 0f       	add	r18, r18
    3e76:	33 1f       	adc	r19, r19
    3e78:	f9 01       	movw	r30, r18
    3e7a:	e1 59       	subi	r30, 0x91	; 145
    3e7c:	fd 4f       	sbci	r31, 0xFD	; 253
    3e7e:	40 81       	ld	r20, Z
    3e80:	51 81       	ldd	r21, Z+1	; 0x01
    3e82:	84 1b       	sub	r24, r20
    3e84:	95 0b       	sbc	r25, r21
    3e86:	f9 01       	movw	r30, r18
    3e88:	e9 5a       	subi	r30, 0xA9	; 169
    3e8a:	fd 4f       	sbci	r31, 0xFD	; 253
    3e8c:	91 83       	std	Z+1, r25	; 0x01
    3e8e:	80 83       	st	Z, r24
				//} else {	// ground
				//	proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx];
				//}
				if(proximityResult[currentProx>>1] < 0) {
    3e90:	97 fd       	sbrc	r25, 7
    3e92:	c9 c1       	rjmp	.+914    	; 0x4226 <__vector_29+0x4f4>
					proximityResult[currentProx>>1] = 0;
				}
				if(proximityResult[currentProx>>1] > 1024) {
    3e94:	44 e0       	ldi	r20, 0x04	; 4
    3e96:	81 30       	cpi	r24, 0x01	; 1
    3e98:	94 07       	cpc	r25, r20
    3e9a:	24 f0       	brlt	.+8      	; 0x3ea4 <__vector_29+0x172>
					proximityResult[currentProx>>1] = 1024;
    3e9c:	80 e0       	ldi	r24, 0x00	; 0
    3e9e:	94 e0       	ldi	r25, 0x04	; 4
    3ea0:	91 83       	std	Z+1, r25	; 0x01
    3ea2:	80 83       	st	Z, r24
				// 1) from 0 to PHASE1: y = x (where x = proximity value9
				// 2) from PHASE1 to PHASE2: y = x/2 + 30
				// 3) from PHASE2 to PHASE3: y = x/4 + 75
				// 4) from PHASE3 upwards: y = x/8 + 127.5
				// The linearized values are used for the obstacles avoidance.
				if(currentProx < 16) {	// only for proximity (not ground sensors)
    3ea4:	60 31       	cpi	r22, 0x10	; 16
    3ea6:	48 f4       	brcc	.+18     	; 0x3eba <__vector_29+0x188>
					
					if(proximityResult[currentProx>>1] < PHASE1) {
    3ea8:	8c 33       	cpi	r24, 0x3C	; 60
    3eaa:	91 05       	cpc	r25, r1
    3eac:	0c f0       	brlt	.+2      	; 0x3eb0 <__vector_29+0x17e>
    3eae:	c0 c1       	rjmp	.+896    	; 0x4230 <__vector_29+0x4fe>

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];
    3eb0:	21 54       	subi	r18, 0x41	; 65
    3eb2:	3d 4f       	sbci	r19, 0xFD	; 253
    3eb4:	f9 01       	movw	r30, r18
    3eb6:	91 83       	std	Z+1, r25	; 0x01
    3eb8:	80 83       	st	Z, r24
				}

				// the cliff avoidance behavior is inserted within this interrupt service routine in order to react
				// as fast as possible; the maximum speed usable with cliff avoidance is 30 in all kind of surface 
				// (apart from black ones) after calibration.
				if(cliffAvoidanceEnabled) {
    3eba:	80 91 69 04 	lds	r24, 0x0469
    3ebe:	88 23       	and	r24, r24
    3ec0:	09 f4       	brne	.+2      	; 0x3ec4 <__vector_29+0x192>
    3ec2:	81 c1       	rjmp	.+770    	; 0x41c6 <__vector_29+0x494>
					if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    3ec4:	80 91 67 02 	lds	r24, 0x0267
    3ec8:	90 91 68 02 	lds	r25, 0x0268
    3ecc:	f1 e0       	ldi	r31, 0x01	; 1
    3ece:	84 3a       	cpi	r24, 0xA4	; 164
    3ed0:	9f 07       	cpc	r25, r31
    3ed2:	cc f0       	brlt	.+50     	; 0x3f06 <__vector_29+0x1d4>
    3ed4:	80 91 69 02 	lds	r24, 0x0269
    3ed8:	90 91 6a 02 	lds	r25, 0x026A
    3edc:	21 e0       	ldi	r18, 0x01	; 1
    3ede:	84 3a       	cpi	r24, 0xA4	; 164
    3ee0:	92 07       	cpc	r25, r18
    3ee2:	8c f0       	brlt	.+34     	; 0x3f06 <__vector_29+0x1d4>
    3ee4:	80 91 6b 02 	lds	r24, 0x026B
    3ee8:	90 91 6c 02 	lds	r25, 0x026C
    3eec:	41 e0       	ldi	r20, 0x01	; 1
    3eee:	84 3a       	cpi	r24, 0xA4	; 164
    3ef0:	94 07       	cpc	r25, r20
    3ef2:	4c f0       	brlt	.+18     	; 0x3f06 <__vector_29+0x1d4>
    3ef4:	80 91 6d 02 	lds	r24, 0x026D
    3ef8:	90 91 6e 02 	lds	r25, 0x026E
    3efc:	e1 e0       	ldi	r30, 0x01	; 1
    3efe:	84 3a       	cpi	r24, 0xA4	; 164
    3f00:	9e 07       	cpc	r25, r30
    3f02:	0c f0       	brlt	.+2      	; 0x3f06 <__vector_29+0x1d4>
    3f04:	60 c1       	rjmp	.+704    	; 0x41c6 <__vector_29+0x494>
					//if(proximityResult[8]<(proximityOffset[8]>>1) || proximityResult[9]<(proximityOffset[9]>>1) || proximityResult[10]<(proximityOffset[10]>>1) || proximityResult[11]<(proximityOffset[11]>>1)) {
						cliffDetectedFlag = 1;
    3f06:	81 e0       	ldi	r24, 0x01	; 1
    3f08:	80 93 6a 04 	sts	0x046A, r24
						//LED_RED_ON;			
						// set resulting velocity to 0 and change the pwm registers directly to be able
						// to stop as fast as possible (the next pwm cycle)
						// left motor
						pwm_left = 0;
    3f0c:	10 92 f6 02 	sts	0x02F6, r1
    3f10:	10 92 f5 02 	sts	0x02F5, r1
						OCR4A = 0;
    3f14:	10 92 a9 00 	sts	0x00A9, r1
    3f18:	10 92 a8 00 	sts	0x00A8, r1
						OCR4B = 0;
    3f1c:	10 92 ab 00 	sts	0x00AB, r1
    3f20:	10 92 aa 00 	sts	0x00AA, r1
						// right motor
						pwm_right = 0;
    3f24:	10 92 f4 02 	sts	0x02F4, r1
    3f28:	10 92 f3 02 	sts	0x02F3, r1
						OCR3A = 0;
    3f2c:	10 92 99 00 	sts	0x0099, r1
    3f30:	10 92 98 00 	sts	0x0098, r1
						OCR3B = 0;
    3f34:	10 92 9b 00 	sts	0x009B, r1
    3f38:	10 92 9a 00 	sts	0x009A, r1
					cliffDetectedFlag = 0;
				}

			}

			currentProx++;
    3f3c:	6f 5f       	subi	r22, 0xFF	; 255
    3f3e:	60 93 22 02 	sts	0x0222, r22
			if(currentProx > 23) {						// in total there are 8 proximity sensors and 4 ground sensors => 12 sensors
    3f42:	68 31       	cpi	r22, 0x18	; 24
    3f44:	08 f4       	brcc	.+2      	; 0x3f48 <__vector_29+0x216>
    3f46:	31 cf       	rjmp	.-414    	; 0x3daa <__vector_29+0x78>
				currentProx = 0;						// for each one there is a passive phase in which the ambient light is sampled,
    3f48:	10 92 22 02 	sts	0x0222, r1
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
    3f4c:	81 e0       	ldi	r24, 0x01	; 1
    3f4e:	80 93 be 02 	sts	0x02BE, r24
    3f52:	2b cf       	rjmp	.-426    	; 0x3daa <__vector_29+0x78>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    3f54:	83 30       	cpi	r24, 0x03	; 3
    3f56:	09 f4       	brne	.+2      	; 0x3f5a <__vector_29+0x228>
    3f58:	bd c0       	rjmp	.+378    	; 0x40d4 <__vector_29+0x3a2>
    3f5a:	84 30       	cpi	r24, 0x04	; 4
    3f5c:	09 f0       	breq	.+2      	; 0x3f60 <__vector_29+0x22e>
    3f5e:	40 cf       	rjmp	.-384    	; 0x3de0 <__vector_29+0xae>
			}
			adcSamplingState = 4;
			break;

		case 4:	// right motor
			currentAdChannel = currentMotRightChannel;
    3f60:	90 91 24 02 	lds	r25, 0x0224
    3f64:	90 93 21 02 	sts	0x0221, r25
			rightChannelPhase = rightMotorPhase;
    3f68:	90 91 25 02 	lds	r25, 0x0225
    3f6c:	90 93 b9 02 	sts	0x02B9, r25
			if(leftChannelPhase == ACTIVE_PHASE) {
    3f70:	90 91 ba 02 	lds	r25, 0x02BA
    3f74:	99 23       	and	r25, r25
    3f76:	09 f0       	breq	.+2      	; 0x3f7a <__vector_29+0x248>
    3f78:	14 c1       	rjmp	.+552    	; 0x41a2 <__vector_29+0x470>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    3f7a:	83 e0       	ldi	r24, 0x03	; 3
    3f7c:	80 93 b7 02 	sts	0x02B7, r24
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;
    3f80:	10 92 b8 02 	sts	0x02B8, r1

			if(currentProx==14 && measBattery==1) {
    3f84:	60 91 22 02 	lds	r22, 0x0222
    3f88:	6e 30       	cpi	r22, 0x0E	; 14
    3f8a:	09 f4       	brne	.+2      	; 0x3f8e <__vector_29+0x25c>
    3f8c:	2b c1       	rjmp	.+598    	; 0x41e4 <__vector_29+0x4b2>
				measBattery=2;
				SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
			}

			// turn on the IR pulses for the proximities only in their active phases
			if(currentProx & 0x01) {
    3f8e:	86 2f       	mov	r24, r22
    3f90:	90 e0       	ldi	r25, 0x00	; 0
    3f92:	60 ff       	sbrs	r22, 0
    3f94:	fd c0       	rjmp	.+506    	; 0x4190 <__vector_29+0x45e>
				if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
    3f96:	60 31       	cpi	r22, 0x10	; 16
    3f98:	08 f4       	brcc	.+2      	; 0x3f9c <__vector_29+0x26a>
    3f9a:	18 c1       	rjmp	.+560    	; 0x41cc <__vector_29+0x49a>
										// PORTA for proximity sensors, PORTJ for ground sensors
					PORTA = (1 << (currentProx>>1));	// pulse on
				} else {
					if(hardwareRevision == HW_REV_3_0) {
    3f9c:	20 91 4b 04 	lds	r18, 0x044B
    3fa0:	22 23       	and	r18, r18
    3fa2:	09 f0       	breq	.+2      	; 0x3fa6 <__vector_29+0x274>
    3fa4:	e1 c0       	rjmp	.+450    	; 0x4168 <__vector_29+0x436>
						PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
    3fa6:	40 97       	sbiw	r24, 0x10	; 16
    3fa8:	95 95       	asr	r25
    3faa:	87 95       	ror	r24
    3fac:	21 e0       	ldi	r18, 0x01	; 1
    3fae:	30 e0       	ldi	r19, 0x00	; 0
    3fb0:	02 c0       	rjmp	.+4      	; 0x3fb6 <__vector_29+0x284>
    3fb2:	22 0f       	add	r18, r18
    3fb4:	33 1f       	adc	r19, r19
    3fb6:	8a 95       	dec	r24
    3fb8:	e2 f7       	brpl	.-8      	; 0x3fb2 <__vector_29+0x280>
    3fba:	20 93 05 01 	sts	0x0105, r18
    3fbe:	80 91 b8 02 	lds	r24, 0x02B8
    3fc2:	0e cf       	rjmp	.-484    	; 0x3de0 <__vector_29+0xae>
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
		ADCSRB &= ~(1 << MUX5);
		ADMUX = 0x40 + currentAdChannel;
	} else {						// MUX5=1 + ADMUX=0..7 => adc channel=8..15
		ADCSRB |= (1 << MUX5);
    3fc4:	90 91 7b 00 	lds	r25, 0x007B
    3fc8:	98 60       	ori	r25, 0x08	; 8
    3fca:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + (currentAdChannel-8);
    3fce:	90 91 21 02 	lds	r25, 0x0221
    3fd2:	98 5c       	subi	r25, 0xC8	; 200
    3fd4:	90 93 7c 00 	sts	0x007C, r25
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {
    3fd8:	82 30       	cpi	r24, 0x02	; 2
    3fda:	09 f0       	breq	.+2      	; 0x3fde <__vector_29+0x2ac>
    3fdc:	13 cf       	rjmp	.-474    	; 0x3e04 <__vector_29+0xd2>

		if(hardwareRevision == HW_REV_3_0) {
    3fde:	20 91 4b 04 	lds	r18, 0x044B
    3fe2:	22 23       	and	r18, r18
    3fe4:	51 f0       	breq	.+20     	; 0x3ffa <__vector_29+0x2c8>
			PORTJ &= 0xF0;
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0)"
		}

		if(hardwareRevision == HW_REV_3_0_1) {
    3fe6:	21 30       	cpi	r18, 0x01	; 1
    3fe8:	19 f0       	breq	.+6      	; 0x3ff0 <__vector_29+0x2be>
			PORTJ = 0xFF;
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0.1)"
		}

		if(hardwareRevision == HW_REV_3_1) {
    3fea:	22 30       	cpi	r18, 0x02	; 2
    3fec:	09 f0       	breq	.+2      	; 0x3ff0 <__vector_29+0x2be>
    3fee:	0a cf       	rjmp	.-492    	; 0x3e04 <__vector_29+0xd2>
			PORTJ = 0xFF;
    3ff0:	8f ef       	ldi	r24, 0xFF	; 255
    3ff2:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    3ff6:	12 b8       	out	0x02, r1	; 2
    3ff8:	05 cf       	rjmp	.-502    	; 0x3e04 <__vector_29+0xd2>

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {

		if(hardwareRevision == HW_REV_3_0) {
			PORTJ &= 0xF0;
    3ffa:	80 91 05 01 	lds	r24, 0x0105
    3ffe:	80 7f       	andi	r24, 0xF0	; 240
    4000:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    4004:	12 b8       	out	0x02, r1	; 2
    4006:	fe ce       	rjmp	.-516    	; 0x3e04 <__vector_29+0xd2>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    4008:	81 30       	cpi	r24, 0x01	; 1
    400a:	09 f0       	breq	.+2      	; 0x400e <__vector_29+0x2dc>
    400c:	e9 ce       	rjmp	.-558    	; 0x3de0 <__vector_29+0xae>
			}
			adcSamplingState = 1;
			break;

		case 1:	// left motor
			currentAdChannel = currentMotLeftChannel;
    400e:	80 91 23 02 	lds	r24, 0x0223
    4012:	80 93 21 02 	sts	0x0221, r24
			leftChannelPhase = leftMotorPhase;
    4016:	80 91 26 02 	lds	r24, 0x0226
    401a:	80 93 ba 02 	sts	0x02BA, r24
			adcSaveDataTo = SAVE_TO_PROX;
    401e:	10 92 b7 02 	sts	0x02B7, r1
			adcSamplingState = 2;
    4022:	82 e0       	ldi	r24, 0x02	; 2
    4024:	80 93 b8 02 	sts	0x02B8, r24
			break;
    4028:	db ce       	rjmp	.-586    	; 0x3de0 <__vector_29+0xae>
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    402a:	81 30       	cpi	r24, 0x01	; 1
    402c:	09 f0       	breq	.+2      	; 0x4030 <__vector_29+0x2fe>
    402e:	bd ce       	rjmp	.-646    	; 0x3daa <__vector_29+0x78>
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
			}											// is sampled; thus 12 sensors x 2 phases = 24 samples
			break;

		case SAVE_TO_RIGHT_MOTOR_CURRENT:
			right_current_avg += value;
    4030:	80 91 e1 02 	lds	r24, 0x02E1
    4034:	90 91 e2 02 	lds	r25, 0x02E2
    4038:	82 0f       	add	r24, r18
    403a:	93 1f       	adc	r25, r19
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
    403c:	96 95       	lsr	r25
    403e:	87 95       	ror	r24
    4040:	90 93 e2 02 	sts	0x02E2, r25
    4044:	80 93 e1 02 	sts	0x02E1, r24
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    4048:	80 91 b8 02 	lds	r24, 0x02B8
    404c:	82 30       	cpi	r24, 0x02	; 2
    404e:	09 f0       	breq	.+2      	; 0x4052 <__vector_29+0x320>
    4050:	b1 ce       	rjmp	.-670    	; 0x3db4 <__vector_29+0x82>
			adcSaveDataTo = SAVE_TO_PROX;
			adcSamplingState = 2;
			break;

		case 2:	// right motor
			currentAdChannel = currentMotRightChannel;
    4052:	80 91 24 02 	lds	r24, 0x0224
    4056:	80 93 21 02 	sts	0x0221, r24
			rightChannelPhase = rightMotorPhase;
    405a:	80 91 25 02 	lds	r24, 0x0225
    405e:	80 93 b9 02 	sts	0x02B9, r24
			if(leftChannelPhase == ACTIVE_PHASE) {
    4062:	80 91 ba 02 	lds	r24, 0x02BA
    4066:	88 23       	and	r24, r24
    4068:	09 f0       	breq	.+2      	; 0x406c <__vector_29+0x33a>
    406a:	a7 c0       	rjmp	.+334    	; 0x41ba <__vector_29+0x488>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    406c:	83 e0       	ldi	r24, 0x03	; 3
    406e:	80 93 b7 02 	sts	0x02B7, r24
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 3;
    4072:	83 e0       	ldi	r24, 0x03	; 3
    4074:	80 93 b8 02 	sts	0x02B8, r24
			break;
    4078:	b3 ce       	rjmp	.-666    	; 0x3de0 <__vector_29+0xae>
			left_current_avg += value;
			left_current_avg = left_current_avg >> 1;
			break;

		case SAVE_TO_LEFT_MOTOR_VEL:
			if(firstSampleLeft > 0) {
    407a:	80 91 0a 02 	lds	r24, 0x020A
    407e:	88 23       	and	r24, r24
    4080:	09 f4       	brne	.+2      	; 0x4084 <__vector_29+0x352>
    4082:	93 ce       	rjmp	.-730    	; 0x3daa <__vector_29+0x78>
				if(((PINH & _BV(PH3))>>3) || ((PINH & _BV(PH4))>>4)) {
    4084:	90 91 00 01 	lds	r25, 0x0100
    4088:	93 fd       	sbrc	r25, 3
    408a:	8f ce       	rjmp	.-738    	; 0x3daa <__vector_29+0x78>
    408c:	90 91 00 01 	lds	r25, 0x0100
    4090:	94 fd       	sbrc	r25, 4
    4092:	8b ce       	rjmp	.-746    	; 0x3daa <__vector_29+0x78>
					//LED_RED_ON;
					break;
				}
				firstSampleLeft++;
    4094:	48 2f       	mov	r20, r24
    4096:	4f 5f       	subi	r20, 0xFF	; 255
    4098:	40 93 0a 02 	sts	0x020A, r20
				if(firstSampleLeft > 4) {
    409c:	45 30       	cpi	r20, 0x05	; 5
    409e:	08 f4       	brcc	.+2      	; 0x40a2 <__vector_29+0x370>
    40a0:	84 ce       	rjmp	.-760    	; 0x3daa <__vector_29+0x78>
					if(pwm_left != 0) {
    40a2:	80 91 f5 02 	lds	r24, 0x02F5
    40a6:	90 91 f6 02 	lds	r25, 0x02F6
    40aa:	00 97       	sbiw	r24, 0x00	; 0
    40ac:	51 f0       	breq	.+20     	; 0x40c2 <__vector_29+0x390>
						left_vel_sum += value;
    40ae:	80 91 eb 02 	lds	r24, 0x02EB
    40b2:	90 91 ec 02 	lds	r25, 0x02EC
    40b6:	82 0f       	add	r24, r18
    40b8:	93 1f       	adc	r25, r19
    40ba:	90 93 ec 02 	sts	0x02EC, r25
    40be:	80 93 eb 02 	sts	0x02EB, r24
					}
					if(firstSampleLeft==8) {
    40c2:	48 30       	cpi	r20, 0x08	; 8
    40c4:	09 f0       	breq	.+2      	; 0x40c8 <__vector_29+0x396>
    40c6:	71 ce       	rjmp	.-798    	; 0x3daa <__vector_29+0x78>
						firstSampleLeft = 0;
    40c8:	10 92 0a 02 	sts	0x020A, r1
						compute_left_vel = 1;
    40cc:	81 e0       	ldi	r24, 0x01	; 1
    40ce:	80 93 07 02 	sts	0x0207, r24
    40d2:	6b ce       	rjmp	.-810    	; 0x3daa <__vector_29+0x78>
			}
			adcSamplingState = 3;
			break;

		case 3:	// left motor
			currentAdChannel = currentMotLeftChannel;
    40d4:	80 91 23 02 	lds	r24, 0x0223
    40d8:	80 93 21 02 	sts	0x0221, r24
			leftChannelPhase = leftMotorPhase;
    40dc:	80 91 26 02 	lds	r24, 0x0226
    40e0:	80 93 ba 02 	sts	0x02BA, r24
			if(rightChannelPhase == ACTIVE_PHASE) {
    40e4:	80 91 b9 02 	lds	r24, 0x02B9
    40e8:	88 23       	and	r24, r24
    40ea:	09 f0       	breq	.+2      	; 0x40ee <__vector_29+0x3bc>
    40ec:	54 c0       	rjmp	.+168    	; 0x4196 <__vector_29+0x464>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    40ee:	81 e0       	ldi	r24, 0x01	; 1
    40f0:	80 93 b7 02 	sts	0x02B7, r24
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 4;
    40f4:	84 e0       	ldi	r24, 0x04	; 4
    40f6:	80 93 b8 02 	sts	0x02B8, r24
			break;
    40fa:	72 ce       	rjmp	.-796    	; 0x3de0 <__vector_29+0xae>
			right_current_avg += value;
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
			break;

		case SAVE_TO_RIGHT_MOTOR_VEL:
			if(firstSampleRight > 0) {
    40fc:	80 91 09 02 	lds	r24, 0x0209
    4100:	88 23       	and	r24, r24
    4102:	09 f4       	brne	.+2      	; 0x4106 <__vector_29+0x3d4>
    4104:	52 ce       	rjmp	.-860    	; 0x3daa <__vector_29+0x78>
			    // sometimes it was noticed that the velocity is sampled even if the pwm
			    // is in its active phase; as a workaround simply skip the samples in these
			    // cases
				if(((PINE & _BV(PE3))>>3) || ((PINE & _BV(PE4))>>4)) {  // if active phase for either forward or backward direction
    4106:	63 99       	sbic	0x0c, 3	; 12
    4108:	50 ce       	rjmp	.-864    	; 0x3daa <__vector_29+0x78>
    410a:	64 99       	sbic	0x0c, 4	; 12
    410c:	4e ce       	rjmp	.-868    	; 0x3daa <__vector_29+0x78>
					//LED_RED_ON;
					break;
				}
				firstSampleRight++;
    410e:	48 2f       	mov	r20, r24
    4110:	4f 5f       	subi	r20, 0xFF	; 255
    4112:	40 93 09 02 	sts	0x0209, r20
				if(firstSampleRight > 4) {				// to skip undesired samples (3 samples skipped) in which there could be glitches
    4116:	45 30       	cpi	r20, 0x05	; 5
    4118:	08 f4       	brcc	.+2      	; 0x411c <__vector_29+0x3ea>
    411a:	47 ce       	rjmp	.-882    	; 0x3daa <__vector_29+0x78>
					if(pwm_right != 0) {
    411c:	80 91 f3 02 	lds	r24, 0x02F3
    4120:	90 91 f4 02 	lds	r25, 0x02F4
    4124:	00 97       	sbiw	r24, 0x00	; 0
    4126:	51 f0       	breq	.+20     	; 0x413c <__vector_29+0x40a>
						right_vel_sum += value;
    4128:	80 91 ed 02 	lds	r24, 0x02ED
    412c:	90 91 ee 02 	lds	r25, 0x02EE
    4130:	82 0f       	add	r24, r18
    4132:	93 1f       	adc	r25, r19
    4134:	90 93 ee 02 	sts	0x02EE, r25
    4138:	80 93 ed 02 	sts	0x02ED, r24
					}
					if(firstSampleRight==8) {			// number of samples to take for the speed computation (average of 4 samples)
    413c:	48 30       	cpi	r20, 0x08	; 8
    413e:	09 f0       	breq	.+2      	; 0x4142 <__vector_29+0x410>
    4140:	34 ce       	rjmp	.-920    	; 0x3daa <__vector_29+0x78>
						firstSampleRight = 0;
    4142:	10 92 09 02 	sts	0x0209, r1
						compute_right_vel = 1;
    4146:	81 e0       	ldi	r24, 0x01	; 1
    4148:	80 93 08 02 	sts	0x0208, r24
    414c:	2e ce       	rjmp	.-932    	; 0x3daa <__vector_29+0x78>
				}
			}
			break;

		case SAVE_TO_LEFT_MOTOR_CURRENT:
			left_current_avg += value;
    414e:	80 91 df 02 	lds	r24, 0x02DF
    4152:	90 91 e0 02 	lds	r25, 0x02E0
    4156:	82 0f       	add	r24, r18
    4158:	93 1f       	adc	r25, r19
			left_current_avg = left_current_avg >> 1;
    415a:	96 95       	lsr	r25
    415c:	87 95       	ror	r24
    415e:	90 93 e0 02 	sts	0x02E0, r25
    4162:	80 93 df 02 	sts	0x02DF, r24
			break;
    4166:	21 ce       	rjmp	.-958    	; 0x3daa <__vector_29+0x78>
				} else {
					if(hardwareRevision == HW_REV_3_0) {
						PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
					}

					if(hardwareRevision == HW_REV_3_0_1) {
    4168:	21 30       	cpi	r18, 0x01	; 1
    416a:	11 f0       	breq	.+4      	; 0x4170 <__vector_29+0x43e>
						PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
					}

					if(hardwareRevision == HW_REV_3_1) {
    416c:	22 30       	cpi	r18, 0x02	; 2
    416e:	81 f4       	brne	.+32     	; 0x4190 <__vector_29+0x45e>
						PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
    4170:	40 91 05 01 	lds	r20, 0x0105
    4174:	40 97       	sbiw	r24, 0x10	; 16
    4176:	95 95       	asr	r25
    4178:	87 95       	ror	r24
    417a:	21 e0       	ldi	r18, 0x01	; 1
    417c:	30 e0       	ldi	r19, 0x00	; 0
    417e:	02 c0       	rjmp	.+4      	; 0x4184 <__vector_29+0x452>
    4180:	22 0f       	add	r18, r18
    4182:	33 1f       	adc	r19, r19
    4184:	8a 95       	dec	r24
    4186:	e2 f7       	brpl	.-8      	; 0x4180 <__vector_29+0x44e>
    4188:	20 95       	com	r18
    418a:	24 23       	and	r18, r20
    418c:	20 93 05 01 	sts	0x0105, r18
    4190:	80 91 b8 02 	lds	r24, 0x02B8
    4194:	25 ce       	rjmp	.-950    	; 0x3de0 <__vector_29+0xae>
		case 3:	// left motor
			currentAdChannel = currentMotLeftChannel;
			leftChannelPhase = leftMotorPhase;
			if(rightChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
    4196:	81 30       	cpi	r24, 0x01	; 1
    4198:	d1 f1       	breq	.+116    	; 0x420e <__vector_29+0x4dc>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    419a:	85 e0       	ldi	r24, 0x05	; 5
    419c:	80 93 b7 02 	sts	0x02B7, r24
    41a0:	a9 cf       	rjmp	.-174    	; 0x40f4 <__vector_29+0x3c2>
		case 4:	// right motor
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
    41a2:	91 30       	cpi	r25, 0x01	; 1
    41a4:	09 f0       	breq	.+2      	; 0x41a8 <__vector_29+0x476>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    41a6:	85 e0       	ldi	r24, 0x05	; 5
    41a8:	80 93 b7 02 	sts	0x02B7, r24
    41ac:	e9 ce       	rjmp	.-558    	; 0x3f80 <__vector_29+0x24e>
		case 0:	// proximity
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
    41ae:	81 30       	cpi	r24, 0x01	; 1
    41b0:	b1 f1       	breq	.+108    	; 0x421e <__vector_29+0x4ec>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    41b2:	85 e0       	ldi	r24, 0x05	; 5
    41b4:	80 93 b7 02 	sts	0x02B7, r24
    41b8:	10 ce       	rjmp	.-992    	; 0x3dda <__vector_29+0xa8>
		case 2:	// right motor
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
    41ba:	81 30       	cpi	r24, 0x01	; 1
    41bc:	61 f1       	breq	.+88     	; 0x4216 <__vector_29+0x4e4>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    41be:	85 e0       	ldi	r24, 0x05	; 5
    41c0:	80 93 b7 02 	sts	0x02B7, r24
    41c4:	56 cf       	rjmp	.-340    	; 0x4072 <__vector_29+0x340>
					} else {
						cliffDetectedFlag = 0;
						//LED_RED_OFF;
					}
				} else {
					cliffDetectedFlag = 0;
    41c6:	10 92 6a 04 	sts	0x046A, r1
    41ca:	b8 ce       	rjmp	.-656    	; 0x3f3c <__vector_29+0x20a>

			// turn on the IR pulses for the proximities only in their active phases
			if(currentProx & 0x01) {
				if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
										// PORTA for proximity sensors, PORTJ for ground sensors
					PORTA = (1 << (currentProx>>1));	// pulse on
    41cc:	66 95       	lsr	r22
    41ce:	81 e0       	ldi	r24, 0x01	; 1
    41d0:	90 e0       	ldi	r25, 0x00	; 0
    41d2:	02 c0       	rjmp	.+4      	; 0x41d8 <__vector_29+0x4a6>
    41d4:	88 0f       	add	r24, r24
    41d6:	99 1f       	adc	r25, r25
    41d8:	6a 95       	dec	r22
    41da:	e2 f7       	brpl	.-8      	; 0x41d4 <__vector_29+0x4a2>
    41dc:	82 b9       	out	0x02, r24	; 2
    41de:	80 91 b8 02 	lds	r24, 0x02B8
    41e2:	fe cd       	rjmp	.-1028   	; 0x3de0 <__vector_29+0xae>
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;

			if(currentProx==14 && measBattery==1) {
    41e4:	80 91 bd 02 	lds	r24, 0x02BD
    41e8:	81 30       	cpi	r24, 0x01	; 1
    41ea:	a1 f1       	breq	.+104    	; 0x4254 <__vector_29+0x522>
    41ec:	80 e0       	ldi	r24, 0x00	; 0
    41ee:	f8 cd       	rjmp	.-1040   	; 0x3de0 <__vector_29+0xae>
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    41f0:	80 91 bd 02 	lds	r24, 0x02BD
    41f4:	82 30       	cpi	r24, 0x02	; 2
    41f6:	09 f0       	breq	.+2      	; 0x41fa <__vector_29+0x4c8>
    41f8:	1f ce       	rjmp	.-962    	; 0x3e38 <__vector_29+0x106>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
    41fa:	30 93 bc 02 	sts	0x02BC, r19
    41fe:	20 93 bb 02 	sts	0x02BB, r18
				measBattery = 0;
    4202:	10 92 bd 02 	sts	0x02BD, r1
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
    4206:	46 98       	cbi	0x08, 6	; 8
    4208:	4e e0       	ldi	r20, 0x0E	; 14
    420a:	50 e0       	ldi	r21, 0x00	; 0
    420c:	1e ce       	rjmp	.-964    	; 0x3e4a <__vector_29+0x118>
			currentAdChannel = currentMotLeftChannel;
			leftChannelPhase = leftMotorPhase;
			if(rightChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    420e:	82 e0       	ldi	r24, 0x02	; 2
    4210:	80 93 b7 02 	sts	0x02B7, r24
    4214:	6f cf       	rjmp	.-290    	; 0x40f4 <__vector_29+0x3c2>
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    4216:	84 e0       	ldi	r24, 0x04	; 4
    4218:	80 93 b7 02 	sts	0x02B7, r24
    421c:	2a cf       	rjmp	.-428    	; 0x4072 <__vector_29+0x340>
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    421e:	82 e0       	ldi	r24, 0x02	; 2
    4220:	80 93 b7 02 	sts	0x02B7, r24
    4224:	da cd       	rjmp	.-1100   	; 0x3dda <__vector_29+0xa8>
					proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
				//} else {	// ground
				//	proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx];
				//}
				if(proximityResult[currentProx>>1] < 0) {
					proximityResult[currentProx>>1] = 0;
    4226:	11 82       	std	Z+1, r1	; 0x01
    4228:	10 82       	st	Z, r1
    422a:	80 e0       	ldi	r24, 0x00	; 0
    422c:	90 e0       	ldi	r25, 0x00	; 0
    422e:	3a ce       	rjmp	.-908    	; 0x3ea4 <__vector_29+0x172>
					
					if(proximityResult[currentProx>>1] < PHASE1) {

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
    4230:	ac 01       	movw	r20, r24
    4232:	44 5c       	subi	r20, 0xC4	; 196
    4234:	5f 4f       	sbci	r21, 0xFF	; 255
    4236:	55 95       	asr	r21
    4238:	47 95       	ror	r20
    423a:	48 37       	cpi	r20, 0x78	; 120
    423c:	51 05       	cpc	r21, r1
    423e:	7c f4       	brge	.+30     	; 0x425e <__vector_29+0x52c>
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;
    4240:	21 54       	subi	r18, 0x41	; 65
    4242:	3d 4f       	sbci	r19, 0xFD	; 253
    4244:	cc 97       	sbiw	r24, 0x3c	; 60
    4246:	95 95       	asr	r25
    4248:	87 95       	ror	r24
    424a:	cc 96       	adiw	r24, 0x3c	; 60
    424c:	f9 01       	movw	r30, r18
    424e:	91 83       	std	Z+1, r25	; 0x01
    4250:	80 83       	st	Z, r24
    4252:	33 ce       	rjmp	.-922    	; 0x3eba <__vector_29+0x188>
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;

			if(currentProx==14 && measBattery==1) {
				measBattery=2;
    4254:	82 e0       	ldi	r24, 0x02	; 2
    4256:	80 93 bd 02 	sts	0x02BD, r24
				SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
    425a:	46 9a       	sbi	0x08, 6	; 8
    425c:	98 ce       	rjmp	.-720    	; 0x3f8e <__vector_29+0x25c>

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;

					} else if(((proximityResult[currentProx>>1]+300)>>2) < PHASE3) {
    425e:	ac 01       	movw	r20, r24
    4260:	44 5d       	subi	r20, 0xD4	; 212
    4262:	5e 4f       	sbci	r21, 0xFE	; 254
    4264:	55 95       	asr	r21
    4266:	47 95       	ror	r20
    4268:	55 95       	asr	r21
    426a:	47 95       	ror	r20
    426c:	44 3b       	cpi	r20, 0xB4	; 180
    426e:	51 05       	cpc	r21, r1
    4270:	74 f4       	brge	.+28     	; 0x428e <__vector_29+0x55c>

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-180)>>2) + PHASE2;
    4272:	21 54       	subi	r18, 0x41	; 65
    4274:	3d 4f       	sbci	r19, 0xFD	; 253
    4276:	84 5b       	subi	r24, 0xB4	; 180
    4278:	90 40       	sbci	r25, 0x00	; 0
    427a:	95 95       	asr	r25
    427c:	87 95       	ror	r24
    427e:	95 95       	asr	r25
    4280:	87 95       	ror	r24
    4282:	88 58       	subi	r24, 0x88	; 136
    4284:	9f 4f       	sbci	r25, 0xFF	; 255
    4286:	f9 01       	movw	r30, r18
    4288:	91 83       	std	Z+1, r25	; 0x01
    428a:	80 83       	st	Z, r24
    428c:	16 ce       	rjmp	.-980    	; 0x3eba <__vector_29+0x188>

					} else {

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-420)>>3) + PHASE3;
    428e:	21 54       	subi	r18, 0x41	; 65
    4290:	3d 4f       	sbci	r19, 0xFD	; 253
    4292:	84 5a       	subi	r24, 0xA4	; 164
    4294:	91 40       	sbci	r25, 0x01	; 1
    4296:	95 95       	asr	r25
    4298:	87 95       	ror	r24
    429a:	95 95       	asr	r25
    429c:	87 95       	ror	r24
    429e:	95 95       	asr	r25
    42a0:	87 95       	ror	r24
    42a2:	8c 54       	subi	r24, 0x4C	; 76
    42a4:	9f 4f       	sbci	r25, 0xFF	; 255
    42a6:	f9 01       	movw	r30, r18
    42a8:	91 83       	std	Z+1, r25	; 0x01
    42aa:	80 83       	st	Z, r24
    42ac:	06 ce       	rjmp	.-1012   	; 0x3eba <__vector_29+0x188>

000042ae <initMotors>:

#include "motors.h"

void initMotors() {
    42ae:	0f 93       	push	r16
    42b0:	1f 93       	push	r17
    42b2:	cf 93       	push	r28
    42b4:	df 93       	push	r29
	// Using 10-bit resolution (waveform generation mode 7) we have a period of: 8000000/1024 = 7812.5 Hz
	// We need to apply a prescaler to the timer in such a way to get the desired period:
	// 7812.5/100 = 78.125 => ideal prescaler, the nearest one is 1/64 and we get a period of:
	// 8000000/64/1024 = 122 Hz

	TCCR3A = 0;
    42b6:	e0 e9       	ldi	r30, 0x90	; 144
    42b8:	f0 e0       	ldi	r31, 0x00	; 0
    42ba:	10 82       	st	Z, r1
	TCCR3B = 0;
    42bc:	41 e9       	ldi	r20, 0x91	; 145
    42be:	50 e0       	ldi	r21, 0x00	; 0
    42c0:	da 01       	movw	r26, r20
    42c2:	1c 92       	st	X, r1
	TIMSK3 = 0;
    42c4:	21 e7       	ldi	r18, 0x71	; 113
    42c6:	30 e0       	ldi	r19, 0x00	; 0
    42c8:	e9 01       	movw	r28, r18
    42ca:	18 82       	st	Y, r1
	TCCR4A = 0;
    42cc:	a0 ea       	ldi	r26, 0xA0	; 160
    42ce:	b0 e0       	ldi	r27, 0x00	; 0
    42d0:	1c 92       	st	X, r1
	TCCR4B = 0;
    42d2:	81 ea       	ldi	r24, 0xA1	; 161
    42d4:	90 e0       	ldi	r25, 0x00	; 0
    42d6:	ec 01       	movw	r28, r24
    42d8:	18 82       	st	Y, r1
	TIMSK4 = 0;
    42da:	02 e7       	ldi	r16, 0x72	; 114
    42dc:	10 e0       	ldi	r17, 0x00	; 0
    42de:	e8 01       	movw	r28, r16
    42e0:	18 82       	st	Y, r1

	TCCR3A |= (1 << COM3A1) | (1 << WGM31) | (1 << WGM30); 	// enable OCA; clear on match, set at bottom
    42e2:	60 81       	ld	r22, Z
    42e4:	63 68       	ori	r22, 0x83	; 131
    42e6:	60 83       	st	Z, r22
	TCCR3A |= (1 << WGM31) | (1 << WGM30);
    42e8:	60 81       	ld	r22, Z
    42ea:	63 60       	ori	r22, 0x03	; 3
    42ec:	60 83       	st	Z, r22
	TCCR3B |= (1 << WGM32) | (1 << CS31) | (1 << CS30);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    42ee:	ea 01       	movw	r28, r20
    42f0:	68 81       	ld	r22, Y
    42f2:	6b 60       	ori	r22, 0x0B	; 11
    42f4:	68 83       	st	Y, r22
	// the values for motors goes from 0 (stopped) to 1023 (max power)
	OCR3A = pwm_right;
    42f6:	40 91 f3 02 	lds	r20, 0x02F3
    42fa:	50 91 f4 02 	lds	r21, 0x02F4
    42fe:	50 93 99 00 	sts	0x0099, r21
    4302:	40 93 98 00 	sts	0x0098, r20
	OCR3B = 0;
    4306:	10 92 9b 00 	sts	0x009B, r1
    430a:	10 92 9a 00 	sts	0x009A, r1
	TIMSK3 |= (1 << TOIE3);		// Enable timer overflow interrupt
    430e:	e9 01       	movw	r28, r18
    4310:	48 81       	ld	r20, Y
    4312:	41 60       	ori	r20, 0x01	; 1
    4314:	48 83       	st	Y, r20

	// stop right motor
	TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    4316:	20 81       	ld	r18, Z
    4318:	2f 75       	andi	r18, 0x5F	; 95
    431a:	20 83       	st	Z, r18
	PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    431c:	2e b1       	in	r18, 0x0e	; 14
    431e:	27 7e       	andi	r18, 0xE7	; 231
    4320:	2e b9       	out	0x0e, r18	; 14

	// Motor left timer4/pwm
	// same configuration as timer3
	TCCR4A |= (1 << COM4A1) | (1 << WGM41) | (1 << WGM40); 	// enable OCA; clear on match, set at bottom
    4322:	2c 91       	ld	r18, X
    4324:	23 68       	ori	r18, 0x83	; 131
    4326:	2c 93       	st	X, r18
	TCCR4B |= (1 << WGM42) | (1 << CS41) | (1 << CS40);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    4328:	fc 01       	movw	r30, r24
    432a:	20 81       	ld	r18, Z
    432c:	2b 60       	ori	r18, 0x0B	; 11
    432e:	20 83       	st	Z, r18
	// the values for motors goes from 0 (stopped) to 1024 (max power)
	OCR4A = pwm_left;
    4330:	80 91 f5 02 	lds	r24, 0x02F5
    4334:	90 91 f6 02 	lds	r25, 0x02F6
    4338:	90 93 a9 00 	sts	0x00A9, r25
    433c:	80 93 a8 00 	sts	0x00A8, r24
	OCR4B = 0;
    4340:	10 92 ab 00 	sts	0x00AB, r1
    4344:	10 92 aa 00 	sts	0x00AA, r1
	TIMSK4 |= (1 << TOIE4);		// Enable timer overflow interrupt
    4348:	e8 01       	movw	r28, r16
    434a:	88 81       	ld	r24, Y
    434c:	81 60       	ori	r24, 0x01	; 1
    434e:	88 83       	st	Y, r24
	// stop left motor
	TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    4350:	8c 91       	ld	r24, X
    4352:	8f 75       	andi	r24, 0x5F	; 95
    4354:	8c 93       	st	X, r24
	PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    4356:	e2 e0       	ldi	r30, 0x02	; 2
    4358:	f1 e0       	ldi	r31, 0x01	; 1
    435a:	80 81       	ld	r24, Z
    435c:	87 7e       	andi	r24, 0xE7	; 231
    435e:	80 83       	st	Z, r24


}
    4360:	df 91       	pop	r29
    4362:	cf 91       	pop	r28
    4364:	1f 91       	pop	r17
    4366:	0f 91       	pop	r16
    4368:	08 95       	ret

0000436a <cast_speed>:

signed int cast_speed(signed int vel) {
    436a:	28 2f       	mov	r18, r24
    436c:	39 2f       	mov	r19, r25
    436e:	8e ef       	ldi	r24, 0xFE	; 254
    4370:	20 30       	cpi	r18, 0x00	; 0
    4372:	38 07       	cpc	r19, r24
    4374:	14 f4       	brge	.+4      	; 0x437a <cast_speed+0x10>
    4376:	20 e0       	ldi	r18, 0x00	; 0
    4378:	3e ef       	ldi	r19, 0xFE	; 254
    437a:	82 e0       	ldi	r24, 0x02	; 2
    437c:	21 30       	cpi	r18, 0x01	; 1
    437e:	38 07       	cpc	r19, r24
    4380:	14 f0       	brlt	.+4      	; 0x4386 <cast_speed+0x1c>
    4382:	20 e0       	ldi	r18, 0x00	; 0
    4384:	32 e0       	ldi	r19, 0x02	; 2
        vel = MAX_MOTORS_PWM/2;
    } else if(vel < -(MAX_MOTORS_PWM/2)) {
        vel = -(MAX_MOTORS_PWM/2);
    }
    return vel;
}
    4386:	c9 01       	movw	r24, r18
    4388:	08 95       	ret

0000438a <handleMotorsWithNoController>:

void handleMotorsWithNoController() {

	// compute velocities even if they aren't used
	if(compute_left_vel) {
    438a:	80 91 07 02 	lds	r24, 0x0207
    438e:	88 23       	and	r24, r24
    4390:	c1 f1       	breq	.+112    	; 0x4402 <handleMotorsWithNoController+0x78>
		last_left_vel = left_vel_sum>>2;
    4392:	60 91 eb 02 	lds	r22, 0x02EB
    4396:	70 91 ec 02 	lds	r23, 0x02EC
    439a:	76 95       	lsr	r23
    439c:	67 95       	ror	r22
    439e:	76 95       	lsr	r23
    43a0:	67 95       	ror	r22
    43a2:	70 93 f0 02 	sts	0x02F0, r23
    43a6:	60 93 ef 02 	sts	0x02EF, r22
		compute_left_vel = 0;
    43aa:	10 92 07 02 	sts	0x0207, r1
		left_vel_sum = 0;
    43ae:	10 92 ec 02 	sts	0x02EC, r1
    43b2:	10 92 eb 02 	sts	0x02EB, r1

		if(pwm_left_desired >= 0) {
    43b6:	80 91 f9 02 	lds	r24, 0x02F9
    43ba:	90 91 fa 02 	lds	r25, 0x02FA
    43be:	97 fd       	sbrc	r25, 7
    43c0:	e3 c0       	rjmp	.+454    	; 0x4588 <handleMotorsWithNoController+0x1fe>
			leftMotSteps += (last_left_vel>>3);
    43c2:	75 95       	asr	r23
    43c4:	67 95       	ror	r22
    43c6:	75 95       	asr	r23
    43c8:	67 95       	ror	r22
    43ca:	75 95       	asr	r23
    43cc:	67 95       	ror	r22
    43ce:	88 27       	eor	r24, r24
    43d0:	77 fd       	sbrc	r23, 7
    43d2:	80 95       	com	r24
    43d4:	98 2f       	mov	r25, r24
    43d6:	0e 94 9a 40 	call	0x8134	; 0x8134 <__floatsisf>
    43da:	9b 01       	movw	r18, r22
    43dc:	ac 01       	movw	r20, r24
    43de:	60 91 d3 02 	lds	r22, 0x02D3
    43e2:	70 91 d4 02 	lds	r23, 0x02D4
    43e6:	80 91 d5 02 	lds	r24, 0x02D5
    43ea:	90 91 d6 02 	lds	r25, 0x02D6
    43ee:	0e 94 32 3f 	call	0x7e64	; 0x7e64 <__addsf3>
    43f2:	60 93 d3 02 	sts	0x02D3, r22
    43f6:	70 93 d4 02 	sts	0x02D4, r23
    43fa:	80 93 d5 02 	sts	0x02D5, r24
    43fe:	90 93 d6 02 	sts	0x02D6, r25
		} else {
			leftMotSteps -= (last_left_vel>>3);
		}
	}

	if(compute_right_vel) {
    4402:	80 91 08 02 	lds	r24, 0x0208
    4406:	88 23       	and	r24, r24
    4408:	c1 f1       	breq	.+112    	; 0x447a <handleMotorsWithNoController+0xf0>
		last_right_vel = right_vel_sum>>2;
    440a:	60 91 ed 02 	lds	r22, 0x02ED
    440e:	70 91 ee 02 	lds	r23, 0x02EE
    4412:	76 95       	lsr	r23
    4414:	67 95       	ror	r22
    4416:	76 95       	lsr	r23
    4418:	67 95       	ror	r22
    441a:	70 93 f2 02 	sts	0x02F2, r23
    441e:	60 93 f1 02 	sts	0x02F1, r22
		compute_right_vel = 0;
    4422:	10 92 08 02 	sts	0x0208, r1
		right_vel_sum = 0;
    4426:	10 92 ee 02 	sts	0x02EE, r1
    442a:	10 92 ed 02 	sts	0x02ED, r1

		if(pwm_right_desired >= 0) {
    442e:	80 91 f7 02 	lds	r24, 0x02F7
    4432:	90 91 f8 02 	lds	r25, 0x02F8
    4436:	97 fd       	sbrc	r25, 7
    4438:	86 c0       	rjmp	.+268    	; 0x4546 <handleMotorsWithNoController+0x1bc>
			rightMotSteps += (last_right_vel>>3);
    443a:	75 95       	asr	r23
    443c:	67 95       	ror	r22
    443e:	75 95       	asr	r23
    4440:	67 95       	ror	r22
    4442:	75 95       	asr	r23
    4444:	67 95       	ror	r22
    4446:	88 27       	eor	r24, r24
    4448:	77 fd       	sbrc	r23, 7
    444a:	80 95       	com	r24
    444c:	98 2f       	mov	r25, r24
    444e:	0e 94 9a 40 	call	0x8134	; 0x8134 <__floatsisf>
    4452:	9b 01       	movw	r18, r22
    4454:	ac 01       	movw	r20, r24
    4456:	60 91 cf 02 	lds	r22, 0x02CF
    445a:	70 91 d0 02 	lds	r23, 0x02D0
    445e:	80 91 d1 02 	lds	r24, 0x02D1
    4462:	90 91 d2 02 	lds	r25, 0x02D2
    4466:	0e 94 32 3f 	call	0x7e64	; 0x7e64 <__addsf3>
    446a:	60 93 cf 02 	sts	0x02CF, r22
    446e:	70 93 d0 02 	sts	0x02D0, r23
    4472:	80 93 d1 02 	sts	0x02D1, r24
    4476:	90 93 d2 02 	sts	0x02D2, r25
		} else {
			rightMotSteps -= (last_right_vel>>3);
		}
	}

	pwm_right_working = pwm_intermediate_right_desired*BYTE_TO_MM_S;	// pwm in the range -635..635 (127*BYTE_TO_MM_S)
    447a:	20 91 fb 02 	lds	r18, 0x02FB
    447e:	30 91 fc 02 	lds	r19, 0x02FC
    4482:	c9 01       	movw	r24, r18
    4484:	88 0f       	add	r24, r24
    4486:	99 1f       	adc	r25, r25
    4488:	88 0f       	add	r24, r24
    448a:	99 1f       	adc	r25, r25
    448c:	82 0f       	add	r24, r18
    448e:	93 1f       	adc	r25, r19
    4490:	90 93 0c 03 	sts	0x030C, r25
    4494:	80 93 0b 03 	sts	0x030B, r24
	pwm_left_working = pwm_intermediate_left_desired*BYTE_TO_MM_S;	
    4498:	40 91 fd 02 	lds	r20, 0x02FD
    449c:	50 91 fe 02 	lds	r21, 0x02FE
    44a0:	9a 01       	movw	r18, r20
    44a2:	22 0f       	add	r18, r18
    44a4:	33 1f       	adc	r19, r19
    44a6:	22 0f       	add	r18, r18
    44a8:	33 1f       	adc	r19, r19
    44aa:	24 0f       	add	r18, r20
    44ac:	35 1f       	adc	r19, r21
    44ae:	52 2f       	mov	r21, r18
    44b0:	43 2f       	mov	r20, r19
    44b2:	20 93 0d 03 	sts	0x030D, r18
    44b6:	30 93 0e 03 	sts	0x030E, r19
	if(obstacleAvoidanceEnabled) {
    44ba:	20 91 68 04 	lds	r18, 0x0468
    44be:	22 23       	and	r18, r18
    44c0:	39 f5       	brne	.+78     	; 0x4510 <handleMotorsWithNoController+0x186>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);		// out is in the range -MAX_MOTORS_PWM/2..MAX_MOTORS_PWM/2
	}
	//pwm_left_desired_to_control = cast_speed(pwm_left_working);		// pwm in the range -MAX_MOTORS_PWM/2..MAX_MOTORS_PWM/2
	//pwm_right_desired_to_control = cast_speed(pwm_right_working);

	pwm_left = pwm_left_working;
    44c2:	50 93 f5 02 	sts	0x02F5, r21
    44c6:	40 93 f6 02 	sts	0x02F6, r20
	pwm_right = pwm_right_working;
    44ca:	90 93 f4 02 	sts	0x02F4, r25
    44ce:	80 93 f3 02 	sts	0x02F3, r24

	if(pwm_right > 0) {
    44d2:	18 16       	cp	r1, r24
    44d4:	19 06       	cpc	r1, r25
    44d6:	5c f5       	brge	.+86     	; 0x452e <handleMotorsWithNoController+0x1a4>
		OCR3A = (unsigned int)pwm_right;
    44d8:	90 93 99 00 	sts	0x0099, r25
    44dc:	80 93 98 00 	sts	0x0098, r24
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
		OCR3B = 0;
	}
	if(pwm_left > 0) {
    44e0:	80 91 f5 02 	lds	r24, 0x02F5
    44e4:	90 91 f6 02 	lds	r25, 0x02F6
    44e8:	18 16       	cp	r1, r24
    44ea:	19 06       	cpc	r1, r25
    44ec:	2c f4       	brge	.+10     	; 0x44f8 <handleMotorsWithNoController+0x16e>
		OCR4A = (unsigned int)pwm_left;
    44ee:	90 93 a9 00 	sts	0x00A9, r25
    44f2:	80 93 a8 00 	sts	0x00A8, r24
    44f6:	08 95       	ret
	} else if(pwm_left < 0) {
    44f8:	00 97       	sbiw	r24, 0x00	; 0
    44fa:	09 f0       	breq	.+2      	; 0x44fe <handleMotorsWithNoController+0x174>
    44fc:	6e c0       	rjmp	.+220    	; 0x45da <handleMotorsWithNoController+0x250>
		OCR4B =(unsigned int)( -pwm_left);
	} else {
		OCR4A = 0;
    44fe:	10 92 a9 00 	sts	0x00A9, r1
    4502:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    4506:	10 92 ab 00 	sts	0x00AB, r1
    450a:	10 92 aa 00 	sts	0x00AA, r1
    450e:	08 95       	ret
	}

	pwm_right_working = pwm_intermediate_right_desired*BYTE_TO_MM_S;	// pwm in the range -635..635 (127*BYTE_TO_MM_S)
	pwm_left_working = pwm_intermediate_left_desired*BYTE_TO_MM_S;	
	if(obstacleAvoidanceEnabled) {
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);		// out is in the range -MAX_MOTORS_PWM/2..MAX_MOTORS_PWM/2
    4510:	8d e0       	ldi	r24, 0x0D	; 13
    4512:	93 e0       	ldi	r25, 0x03	; 3
    4514:	6b e0       	ldi	r22, 0x0B	; 11
    4516:	73 e0       	ldi	r23, 0x03	; 3
    4518:	0e 94 a4 34 	call	0x6948	; 0x6948 <obstacleAvoidance>
    451c:	50 91 0d 03 	lds	r21, 0x030D
    4520:	40 91 0e 03 	lds	r20, 0x030E
    4524:	80 91 0b 03 	lds	r24, 0x030B
    4528:	90 91 0c 03 	lds	r25, 0x030C
    452c:	ca cf       	rjmp	.-108    	; 0x44c2 <handleMotorsWithNoController+0x138>
	pwm_left = pwm_left_working;
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
    452e:	00 97       	sbiw	r24, 0x00	; 0
    4530:	09 f0       	breq	.+2      	; 0x4534 <handleMotorsWithNoController+0x1aa>
    4532:	4b c0       	rjmp	.+150    	; 0x45ca <handleMotorsWithNoController+0x240>
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
    4534:	10 92 99 00 	sts	0x0099, r1
    4538:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    453c:	10 92 9b 00 	sts	0x009B, r1
    4540:	10 92 9a 00 	sts	0x009A, r1
    4544:	cd cf       	rjmp	.-102    	; 0x44e0 <handleMotorsWithNoController+0x156>
		right_vel_sum = 0;

		if(pwm_right_desired >= 0) {
			rightMotSteps += (last_right_vel>>3);
		} else {
			rightMotSteps -= (last_right_vel>>3);
    4546:	75 95       	asr	r23
    4548:	67 95       	ror	r22
    454a:	75 95       	asr	r23
    454c:	67 95       	ror	r22
    454e:	75 95       	asr	r23
    4550:	67 95       	ror	r22
    4552:	88 27       	eor	r24, r24
    4554:	77 fd       	sbrc	r23, 7
    4556:	80 95       	com	r24
    4558:	98 2f       	mov	r25, r24
    455a:	0e 94 9a 40 	call	0x8134	; 0x8134 <__floatsisf>
    455e:	9b 01       	movw	r18, r22
    4560:	ac 01       	movw	r20, r24
    4562:	60 91 cf 02 	lds	r22, 0x02CF
    4566:	70 91 d0 02 	lds	r23, 0x02D0
    456a:	80 91 d1 02 	lds	r24, 0x02D1
    456e:	90 91 d2 02 	lds	r25, 0x02D2
    4572:	0e 94 31 3f 	call	0x7e62	; 0x7e62 <__subsf3>
    4576:	60 93 cf 02 	sts	0x02CF, r22
    457a:	70 93 d0 02 	sts	0x02D0, r23
    457e:	80 93 d1 02 	sts	0x02D1, r24
    4582:	90 93 d2 02 	sts	0x02D2, r25
    4586:	79 cf       	rjmp	.-270    	; 0x447a <handleMotorsWithNoController+0xf0>
		left_vel_sum = 0;

		if(pwm_left_desired >= 0) {
			leftMotSteps += (last_left_vel>>3);
		} else {
			leftMotSteps -= (last_left_vel>>3);
    4588:	75 95       	asr	r23
    458a:	67 95       	ror	r22
    458c:	75 95       	asr	r23
    458e:	67 95       	ror	r22
    4590:	75 95       	asr	r23
    4592:	67 95       	ror	r22
    4594:	88 27       	eor	r24, r24
    4596:	77 fd       	sbrc	r23, 7
    4598:	80 95       	com	r24
    459a:	98 2f       	mov	r25, r24
    459c:	0e 94 9a 40 	call	0x8134	; 0x8134 <__floatsisf>
    45a0:	9b 01       	movw	r18, r22
    45a2:	ac 01       	movw	r20, r24
    45a4:	60 91 d3 02 	lds	r22, 0x02D3
    45a8:	70 91 d4 02 	lds	r23, 0x02D4
    45ac:	80 91 d5 02 	lds	r24, 0x02D5
    45b0:	90 91 d6 02 	lds	r25, 0x02D6
    45b4:	0e 94 31 3f 	call	0x7e62	; 0x7e62 <__subsf3>
    45b8:	60 93 d3 02 	sts	0x02D3, r22
    45bc:	70 93 d4 02 	sts	0x02D4, r23
    45c0:	80 93 d5 02 	sts	0x02D5, r24
    45c4:	90 93 d6 02 	sts	0x02D6, r25
    45c8:	1c cf       	rjmp	.-456    	; 0x4402 <handleMotorsWithNoController+0x78>
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
		OCR3B = (unsigned int)(-pwm_right);
    45ca:	90 95       	com	r25
    45cc:	81 95       	neg	r24
    45ce:	9f 4f       	sbci	r25, 0xFF	; 255
    45d0:	90 93 9b 00 	sts	0x009B, r25
    45d4:	80 93 9a 00 	sts	0x009A, r24
    45d8:	83 cf       	rjmp	.-250    	; 0x44e0 <handleMotorsWithNoController+0x156>
		OCR3B = 0;
	}
	if(pwm_left > 0) {
		OCR4A = (unsigned int)pwm_left;
	} else if(pwm_left < 0) {
		OCR4B =(unsigned int)( -pwm_left);
    45da:	90 95       	com	r25
    45dc:	81 95       	neg	r24
    45de:	9f 4f       	sbci	r25, 0xFF	; 255
    45e0:	90 93 ab 00 	sts	0x00AB, r25
    45e4:	80 93 aa 00 	sts	0x00AA, r24
    45e8:	08 95       	ret

000045ea <setLeftSpeed>:
}

// vel expressed in 1/5 of mm/s
void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    45ea:	28 2f       	mov	r18, r24
    45ec:	33 27       	eor	r19, r19
    45ee:	27 fd       	sbrc	r18, 7
    45f0:	30 95       	com	r19
    45f2:	37 fd       	sbrc	r19, 7
    45f4:	13 c0       	rjmp	.+38     	; 0x461c <setLeftSpeed+0x32>
    45f6:	30 93 10 03 	sts	0x0310, r19
    45fa:	20 93 0f 03 	sts	0x030F, r18

    if(vel >= 0) {
    45fe:	87 fd       	sbrc	r24, 7
    4600:	05 c0       	rjmp	.+10     	; 0x460c <setLeftSpeed+0x22>
        pwm_left_desired = speedl;
    } else {
        pwm_left_desired = -(speedl);
    4602:	30 93 fa 02 	sts	0x02FA, r19
    4606:	20 93 f9 02 	sts	0x02F9, r18
    460a:	08 95       	ret
    460c:	30 95       	com	r19
    460e:	21 95       	neg	r18
    4610:	3f 4f       	sbci	r19, 0xFF	; 255
    4612:	30 93 fa 02 	sts	0x02FA, r19
    4616:	20 93 f9 02 	sts	0x02F9, r18
    461a:	08 95       	ret
}

// vel expressed in 1/5 of mm/s
void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    461c:	30 95       	com	r19
    461e:	21 95       	neg	r18
    4620:	3f 4f       	sbci	r19, 0xFF	; 255
    4622:	e9 cf       	rjmp	.-46     	; 0x45f6 <setLeftSpeed+0xc>

00004624 <setRightSpeed>:

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    4624:	28 2f       	mov	r18, r24
    4626:	33 27       	eor	r19, r19
    4628:	27 fd       	sbrc	r18, 7
    462a:	30 95       	com	r19
    462c:	37 fd       	sbrc	r19, 7
    462e:	13 c0       	rjmp	.+38     	; 0x4656 <setRightSpeed+0x32>
    4630:	30 93 12 03 	sts	0x0312, r19
    4634:	20 93 11 03 	sts	0x0311, r18

    if(vel >= 0) {
    4638:	87 fd       	sbrc	r24, 7
    463a:	05 c0       	rjmp	.+10     	; 0x4646 <setRightSpeed+0x22>
        pwm_right_desired = speedr;
    } else {
        pwm_right_desired = -(speedr);
    463c:	30 93 f8 02 	sts	0x02F8, r19
    4640:	20 93 f7 02 	sts	0x02F7, r18
    4644:	08 95       	ret
    4646:	30 95       	com	r19
    4648:	21 95       	neg	r18
    464a:	3f 4f       	sbci	r19, 0xFF	; 255
    464c:	30 93 f8 02 	sts	0x02F8, r19
    4650:	20 93 f7 02 	sts	0x02F7, r18
    4654:	08 95       	ret

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    4656:	30 95       	com	r19
    4658:	21 95       	neg	r18
    465a:	3f 4f       	sbci	r19, 0xFF	; 255
    465c:	e9 cf       	rjmp	.-46     	; 0x4630 <setRightSpeed+0xc>

0000465e <updateOdomData>:
}


void updateOdomData() {

    if(calibWheel == LEFT_WHEEL_FW_SC) {
    465e:	80 91 c6 04 	lds	r24, 0x04C6
    4662:	88 23       	and	r24, r24
    4664:	89 f5       	brne	.+98     	; 0x46c8 <updateOdomData+0x6a>
        if(calibVelIndex>1) {
    4666:	e0 91 ca 04 	lds	r30, 0x04CA
    466a:	e2 30       	cpi	r30, 0x02	; 2
    466c:	08 f4       	brcc	.+2      	; 0x4670 <updateOdomData+0x12>
    466e:	96 c0       	rjmp	.+300    	; 0x479c <updateOdomData+0x13e>
            if(calibration[calibVelIndex-2][1] >= tempVel) {  // check that we have always increasing values of speed, otherwise there
    4670:	f0 e0       	ldi	r31, 0x00	; 0
    4672:	df 01       	movw	r26, r30
    4674:	a2 95       	swap	r26
    4676:	b2 95       	swap	r27
    4678:	b0 7f       	andi	r27, 0xF0	; 240
    467a:	ba 27       	eor	r27, r26
    467c:	a0 7f       	andi	r26, 0xF0	; 240
    467e:	ba 27       	eor	r27, r26
    4680:	a3 54       	subi	r26, 0x43	; 67
    4682:	bb 4f       	sbci	r27, 0xFB	; 251
    4684:	12 96       	adiw	r26, 0x02	; 2
    4686:	2d 91       	ld	r18, X+
    4688:	3c 91       	ld	r19, X
    468a:	13 97       	sbiw	r26, 0x03	; 3
    468c:	80 91 89 05 	lds	r24, 0x0589
    4690:	90 91 8a 05 	lds	r25, 0x058A
    4694:	28 17       	cp	r18, r24
    4696:	39 07       	cpc	r19, r25
    4698:	34 f0       	brlt	.+12     	; 0x46a6 <updateOdomData+0x48>
                tempVel = calibration[calibVelIndex-2][1]+1; // will be problems when getting data from the lookup table
    469a:	c9 01       	movw	r24, r18
    469c:	01 96       	adiw	r24, 0x01	; 1
    469e:	90 93 8a 05 	sts	0x058A, r25
    46a2:	80 93 89 05 	sts	0x0589, r24
            }
        }
        calibration[calibVelIndex-1][0] = avgLeftSpeed;
    46a6:	e2 95       	swap	r30
    46a8:	f2 95       	swap	r31
    46aa:	f0 7f       	andi	r31, 0xF0	; 240
    46ac:	fe 27       	eor	r31, r30
    46ae:	e0 7f       	andi	r30, 0xF0	; 240
    46b0:	fe 27       	eor	r31, r30
    46b2:	e3 53       	subi	r30, 0x33	; 51
    46b4:	fb 4f       	sbci	r31, 0xFB	; 251
    46b6:	20 91 b0 04 	lds	r18, 0x04B0
    46ba:	30 91 b1 04 	lds	r19, 0x04B1
    46be:	31 83       	std	Z+1, r19	; 0x01
    46c0:	20 83       	st	Z, r18
        calibration[calibVelIndex-1][1] = tempVel;
    46c2:	93 83       	std	Z+3, r25	; 0x03
    46c4:	82 83       	std	Z+2, r24	; 0x02
    46c6:	08 95       	ret
    } else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    46c8:	81 30       	cpi	r24, 0x01	; 1
    46ca:	31 f0       	breq	.+12     	; 0x46d8 <updateOdomData+0x7a>
                tempVel = calibration[calibVelIndex-2][3]+1;
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
        calibration[calibVelIndex-1][3] = tempVel;
    } else if(calibWheel == LEFT_WHEEL_BW_SC) {
    46cc:	82 30       	cpi	r24, 0x02	; 2
    46ce:	09 f4       	brne	.+2      	; 0x46d2 <updateOdomData+0x74>
    46d0:	6b c0       	rjmp	.+214    	; 0x47a8 <updateOdomData+0x14a>
                tempVel = calibration[calibVelIndex-2][5]+1;
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
        calibration[calibVelIndex-1][5] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    46d2:	83 30       	cpi	r24, 0x03	; 3
    46d4:	91 f1       	breq	.+100    	; 0x473a <updateOdomData+0xdc>
    46d6:	08 95       	ret
            }
        }
        calibration[calibVelIndex-1][0] = avgLeftSpeed;
        calibration[calibVelIndex-1][1] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_FW_SC) {
        if(calibVelIndex>1) {
    46d8:	e0 91 ca 04 	lds	r30, 0x04CA
    46dc:	e2 30       	cpi	r30, 0x02	; 2
    46de:	08 f4       	brcc	.+2      	; 0x46e2 <updateOdomData+0x84>
    46e0:	93 c0       	rjmp	.+294    	; 0x4808 <updateOdomData+0x1aa>
            if(calibration[calibVelIndex-2][3] >= tempVel) {
    46e2:	f0 e0       	ldi	r31, 0x00	; 0
    46e4:	df 01       	movw	r26, r30
    46e6:	a2 95       	swap	r26
    46e8:	b2 95       	swap	r27
    46ea:	b0 7f       	andi	r27, 0xF0	; 240
    46ec:	ba 27       	eor	r27, r26
    46ee:	a0 7f       	andi	r26, 0xF0	; 240
    46f0:	ba 27       	eor	r27, r26
    46f2:	a3 54       	subi	r26, 0x43	; 67
    46f4:	bb 4f       	sbci	r27, 0xFB	; 251
    46f6:	16 96       	adiw	r26, 0x06	; 6
    46f8:	2d 91       	ld	r18, X+
    46fa:	3c 91       	ld	r19, X
    46fc:	17 97       	sbiw	r26, 0x07	; 7
    46fe:	80 91 89 05 	lds	r24, 0x0589
    4702:	90 91 8a 05 	lds	r25, 0x058A
    4706:	28 17       	cp	r18, r24
    4708:	39 07       	cpc	r19, r25
    470a:	34 f0       	brlt	.+12     	; 0x4718 <updateOdomData+0xba>
                tempVel = calibration[calibVelIndex-2][3]+1;
    470c:	c9 01       	movw	r24, r18
    470e:	01 96       	adiw	r24, 0x01	; 1
    4710:	90 93 8a 05 	sts	0x058A, r25
    4714:	80 93 89 05 	sts	0x0589, r24
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
    4718:	e2 95       	swap	r30
    471a:	f2 95       	swap	r31
    471c:	f0 7f       	andi	r31, 0xF0	; 240
    471e:	fe 27       	eor	r31, r30
    4720:	e0 7f       	andi	r30, 0xF0	; 240
    4722:	fe 27       	eor	r31, r30
    4724:	e3 53       	subi	r30, 0x33	; 51
    4726:	fb 4f       	sbci	r31, 0xFB	; 251
    4728:	20 91 b2 04 	lds	r18, 0x04B2
    472c:	30 91 b3 04 	lds	r19, 0x04B3
    4730:	35 83       	std	Z+5, r19	; 0x05
    4732:	24 83       	std	Z+4, r18	; 0x04
        calibration[calibVelIndex-1][3] = tempVel;
    4734:	97 83       	std	Z+7, r25	; 0x07
    4736:	86 83       	std	Z+6, r24	; 0x06
    4738:	08 95       	ret
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
        calibration[calibVelIndex-1][5] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    473a:	e0 91 ca 04 	lds	r30, 0x04CA
    473e:	e2 30       	cpi	r30, 0x02	; 2
    4740:	08 f4       	brcc	.+2      	; 0x4744 <updateOdomData+0xe6>
    4742:	68 c0       	rjmp	.+208    	; 0x4814 <updateOdomData+0x1b6>
            if(calibration[calibVelIndex-2][7] >= tempVel) {
    4744:	f0 e0       	ldi	r31, 0x00	; 0
    4746:	df 01       	movw	r26, r30
    4748:	a2 95       	swap	r26
    474a:	b2 95       	swap	r27
    474c:	b0 7f       	andi	r27, 0xF0	; 240
    474e:	ba 27       	eor	r27, r26
    4750:	a0 7f       	andi	r26, 0xF0	; 240
    4752:	ba 27       	eor	r27, r26
    4754:	a3 54       	subi	r26, 0x43	; 67
    4756:	bb 4f       	sbci	r27, 0xFB	; 251
    4758:	1e 96       	adiw	r26, 0x0e	; 14
    475a:	2d 91       	ld	r18, X+
    475c:	3c 91       	ld	r19, X
    475e:	1f 97       	sbiw	r26, 0x0f	; 15
    4760:	80 91 89 05 	lds	r24, 0x0589
    4764:	90 91 8a 05 	lds	r25, 0x058A
    4768:	28 17       	cp	r18, r24
    476a:	39 07       	cpc	r19, r25
    476c:	34 f0       	brlt	.+12     	; 0x477a <updateOdomData+0x11c>
                tempVel = calibration[calibVelIndex-2][7]+1;
    476e:	c9 01       	movw	r24, r18
    4770:	01 96       	adiw	r24, 0x01	; 1
    4772:	90 93 8a 05 	sts	0x058A, r25
    4776:	80 93 89 05 	sts	0x0589, r24
            }
        }
		calibration[calibVelIndex-1][6] = avgRightSpeed;
    477a:	e2 95       	swap	r30
    477c:	f2 95       	swap	r31
    477e:	f0 7f       	andi	r31, 0xF0	; 240
    4780:	fe 27       	eor	r31, r30
    4782:	e0 7f       	andi	r30, 0xF0	; 240
    4784:	fe 27       	eor	r31, r30
    4786:	e3 53       	subi	r30, 0x33	; 51
    4788:	fb 4f       	sbci	r31, 0xFB	; 251
    478a:	20 91 b2 04 	lds	r18, 0x04B2
    478e:	30 91 b3 04 	lds	r19, 0x04B3
    4792:	35 87       	std	Z+13, r19	; 0x0d
    4794:	24 87       	std	Z+12, r18	; 0x0c
        calibration[calibVelIndex-1][7] = tempVel;
    4796:	97 87       	std	Z+15, r25	; 0x0f
    4798:	86 87       	std	Z+14, r24	; 0x0e
    479a:	08 95       	ret


void updateOdomData() {

    if(calibWheel == LEFT_WHEEL_FW_SC) {
        if(calibVelIndex>1) {
    479c:	f0 e0       	ldi	r31, 0x00	; 0
    479e:	80 91 89 05 	lds	r24, 0x0589
    47a2:	90 91 8a 05 	lds	r25, 0x058A
    47a6:	7f cf       	rjmp	.-258    	; 0x46a6 <updateOdomData+0x48>
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
        calibration[calibVelIndex-1][3] = tempVel;
    } else if(calibWheel == LEFT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    47a8:	e0 91 ca 04 	lds	r30, 0x04CA
    47ac:	e2 30       	cpi	r30, 0x02	; 2
    47ae:	c0 f1       	brcs	.+112    	; 0x4820 <updateOdomData+0x1c2>
            if(calibration[calibVelIndex-2][5] >= tempVel) {
    47b0:	f0 e0       	ldi	r31, 0x00	; 0
    47b2:	df 01       	movw	r26, r30
    47b4:	a2 95       	swap	r26
    47b6:	b2 95       	swap	r27
    47b8:	b0 7f       	andi	r27, 0xF0	; 240
    47ba:	ba 27       	eor	r27, r26
    47bc:	a0 7f       	andi	r26, 0xF0	; 240
    47be:	ba 27       	eor	r27, r26
    47c0:	a3 54       	subi	r26, 0x43	; 67
    47c2:	bb 4f       	sbci	r27, 0xFB	; 251
    47c4:	1a 96       	adiw	r26, 0x0a	; 10
    47c6:	2d 91       	ld	r18, X+
    47c8:	3c 91       	ld	r19, X
    47ca:	1b 97       	sbiw	r26, 0x0b	; 11
    47cc:	80 91 89 05 	lds	r24, 0x0589
    47d0:	90 91 8a 05 	lds	r25, 0x058A
    47d4:	28 17       	cp	r18, r24
    47d6:	39 07       	cpc	r19, r25
    47d8:	34 f0       	brlt	.+12     	; 0x47e6 <updateOdomData+0x188>
                tempVel = calibration[calibVelIndex-2][5]+1;
    47da:	c9 01       	movw	r24, r18
    47dc:	01 96       	adiw	r24, 0x01	; 1
    47de:	90 93 8a 05 	sts	0x058A, r25
    47e2:	80 93 89 05 	sts	0x0589, r24
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
    47e6:	e2 95       	swap	r30
    47e8:	f2 95       	swap	r31
    47ea:	f0 7f       	andi	r31, 0xF0	; 240
    47ec:	fe 27       	eor	r31, r30
    47ee:	e0 7f       	andi	r30, 0xF0	; 240
    47f0:	fe 27       	eor	r31, r30
    47f2:	e3 53       	subi	r30, 0x33	; 51
    47f4:	fb 4f       	sbci	r31, 0xFB	; 251
    47f6:	20 91 b0 04 	lds	r18, 0x04B0
    47fa:	30 91 b1 04 	lds	r19, 0x04B1
    47fe:	31 87       	std	Z+9, r19	; 0x09
    4800:	20 87       	std	Z+8, r18	; 0x08
        calibration[calibVelIndex-1][5] = tempVel;
    4802:	93 87       	std	Z+11, r25	; 0x0b
    4804:	82 87       	std	Z+10, r24	; 0x0a
    4806:	08 95       	ret
            }
        }
        calibration[calibVelIndex-1][0] = avgLeftSpeed;
        calibration[calibVelIndex-1][1] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_FW_SC) {
        if(calibVelIndex>1) {
    4808:	f0 e0       	ldi	r31, 0x00	; 0
    480a:	80 91 89 05 	lds	r24, 0x0589
    480e:	90 91 8a 05 	lds	r25, 0x058A
    4812:	82 cf       	rjmp	.-252    	; 0x4718 <updateOdomData+0xba>
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
        calibration[calibVelIndex-1][5] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    4814:	f0 e0       	ldi	r31, 0x00	; 0
    4816:	80 91 89 05 	lds	r24, 0x0589
    481a:	90 91 8a 05 	lds	r25, 0x058A
    481e:	ad cf       	rjmp	.-166    	; 0x477a <updateOdomData+0x11c>
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
        calibration[calibVelIndex-1][3] = tempVel;
    } else if(calibWheel == LEFT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    4820:	f0 e0       	ldi	r31, 0x00	; 0
    4822:	80 91 89 05 	lds	r24, 0x0589
    4826:	90 91 8a 05 	lds	r25, 0x058A
    482a:	dd cf       	rjmp	.-70     	; 0x47e6 <updateOdomData+0x188>

0000482c <handleCalibration>:

}

void handleCalibration() {

	switch(calibState) {
    482c:	80 91 88 05 	lds	r24, 0x0588
    4830:	82 30       	cpi	r24, 0x02	; 2
    4832:	09 f4       	brne	.+2      	; 0x4836 <handleCalibration+0xa>
    4834:	d0 c0       	rjmp	.+416    	; 0x49d6 <handleCalibration+0x1aa>
    4836:	83 30       	cpi	r24, 0x03	; 3
    4838:	08 f4       	brcc	.+2      	; 0x483c <handleCalibration+0x10>
    483a:	3f c0       	rjmp	.+126    	; 0x48ba <handleCalibration+0x8e>
    483c:	84 30       	cpi	r24, 0x04	; 4
    483e:	09 f4       	brne	.+2      	; 0x4842 <handleCalibration+0x16>
    4840:	91 c0       	rjmp	.+290    	; 0x4964 <handleCalibration+0x138>
    4842:	84 30       	cpi	r24, 0x04	; 4
    4844:	08 f0       	brcs	.+2      	; 0x4848 <handleCalibration+0x1c>
    4846:	63 c0       	rjmp	.+198    	; 0x490e <handleCalibration+0xe2>
                calibState = 5;
			}
            break;

		case 3: // look for black line again, stop time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    4848:	80 91 c6 04 	lds	r24, 0x04C6
    484c:	88 23       	and	r24, r24
    484e:	09 f4       	brne	.+2      	; 0x4852 <handleCalibration+0x26>
    4850:	e1 c0       	rjmp	.+450    	; 0x4a14 <handleCalibration+0x1e8>
    4852:	82 30       	cpi	r24, 0x02	; 2
    4854:	09 f4       	brne	.+2      	; 0x4858 <handleCalibration+0x2c>
    4856:	de c0       	rjmp	.+444    	; 0x4a14 <handleCalibration+0x1e8>
                    updateOdomData();
                    calibState = 4;
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
            	if(proximityResult[11]<(512-2*HYSTERESIS_THR)) {
    4858:	80 91 6d 02 	lds	r24, 0x026D
    485c:	90 91 6e 02 	lds	r25, 0x026E
    4860:	21 e0       	ldi	r18, 0x01	; 1
    4862:	8a 36       	cpi	r24, 0x6A	; 106
    4864:	92 07       	cpc	r25, r18
    4866:	0c f4       	brge	.+2      	; 0x486a <handleCalibration+0x3e>
    4868:	8a c1       	rjmp	.+788    	; 0x4b7e <handleCalibration+0x352>
					updateOdomData();
                    calibState = 4;
                    timeoutOdometry = getTime100MicroSec();;
				}
			}
			if((getTime100MicroSec() - timeoutOdometry)>PAUSE_60_SEC) {    // the robot seems to be still, go to next velcoity
    486a:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <getTime100MicroSec>
    486e:	20 91 84 05 	lds	r18, 0x0584
    4872:	30 91 85 05 	lds	r19, 0x0585
    4876:	40 91 86 05 	lds	r20, 0x0586
    487a:	50 91 87 05 	lds	r21, 0x0587
    487e:	62 1b       	sub	r22, r18
    4880:	73 0b       	sbc	r23, r19
    4882:	84 0b       	sbc	r24, r20
    4884:	95 0b       	sbc	r25, r21
    4886:	6c 39       	cpi	r22, 0x9C	; 156
    4888:	2d ec       	ldi	r18, 0xCD	; 205
    488a:	72 07       	cpc	r23, r18
    488c:	28 e0       	ldi	r18, 0x08	; 8
    488e:	82 07       	cpc	r24, r18
    4890:	20 e0       	ldi	r18, 0x00	; 0
    4892:	92 07       	cpc	r25, r18
    4894:	d8 f1       	brcs	.+118    	; 0x490c <handleCalibration+0xe0>
            	tempVel = 0;
    4896:	10 92 8a 05 	sts	0x058A, r1
    489a:	10 92 89 05 	sts	0x0589, r1
				avgLeftSpeed = 0;
    489e:	10 92 b1 04 	sts	0x04B1, r1
    48a2:	10 92 b0 04 	sts	0x04B0, r1
				avgRightSpeed = 0;
    48a6:	10 92 b3 04 	sts	0x04B3, r1
    48aa:	10 92 b2 04 	sts	0x04B2, r1
                updateOdomData();
    48ae:	0e 94 2f 23 	call	0x465e	; 0x465e <updateOdomData>
                calibState = 5;
    48b2:	85 e0       	ldi	r24, 0x05	; 5
    48b4:	80 93 88 05 	sts	0x0588, r24
    48b8:	08 95       	ret

}

void handleCalibration() {

	switch(calibState) {
    48ba:	88 23       	and	r24, r24
    48bc:	29 f5       	brne	.+74     	; 0x4908 <handleCalibration+0xdc>

    	case 0: // set speed
        	if(calibWheel == LEFT_WHEEL_FW_SC) {
    48be:	80 91 c6 04 	lds	r24, 0x04C6
    48c2:	88 23       	and	r24, r24
    48c4:	09 f0       	breq	.+2      	; 0x48c8 <handleCalibration+0x9c>
    48c6:	3c c1       	rjmp	.+632    	; 0x4b40 <handleCalibration+0x314>
				pwm_intermediate_right_desired = 0;
    48c8:	10 92 fc 02 	sts	0x02FC, r1
    48cc:	10 92 fb 02 	sts	0x02FB, r1
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
    48d0:	90 91 ca 04 	lds	r25, 0x04CA
    48d4:	85 e0       	ldi	r24, 0x05	; 5
    48d6:	98 9f       	mul	r25, r24
    48d8:	c0 01       	movw	r24, r0
    48da:	11 24       	eor	r1, r1
    48dc:	88 0f       	add	r24, r24
    48de:	99 1f       	adc	r25, r25
    48e0:	88 0f       	add	r24, r24
    48e2:	99 1f       	adc	r25, r25
    48e4:	90 93 fe 02 	sts	0x02FE, r25
    48e8:	80 93 fd 02 	sts	0x02FD, r24
				pwm_intermediate_left_desired = -((INDEX_STEP*calibVelIndex)<<2);
        	} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
				pwm_intermediate_right_desired = -((INDEX_STEP*calibVelIndex)<<2);
				pwm_intermediate_left_desired = 0;
			}               
            calibState = 1;
    48ec:	81 e0       	ldi	r24, 0x01	; 1
    48ee:	80 93 88 05 	sts	0x0588, r24
            timeoutOdometry = getTime100MicroSec();
    48f2:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <getTime100MicroSec>
    48f6:	60 93 84 05 	sts	0x0584, r22
    48fa:	70 93 85 05 	sts	0x0585, r23
    48fe:	80 93 86 05 	sts	0x0586, r24
    4902:	90 93 87 05 	sts	0x0587, r25
            break;
    4906:	08 95       	ret

}

void handleCalibration() {

	switch(calibState) {
    4908:	81 30       	cpi	r24, 0x01	; 1
    490a:	71 f0       	breq	.+28     	; 0x4928 <handleCalibration+0xfc>
    490c:	08 95       	ret
    490e:	85 30       	cpi	r24, 0x05	; 5
    4910:	e9 f7       	brne	.-6      	; 0x490c <handleCalibration+0xe0>
                calibState = 5;
			}
            break;

		case 5:
        	calibVelIndex++;
    4912:	80 91 ca 04 	lds	r24, 0x04CA
    4916:	8f 5f       	subi	r24, 0xFF	; 255
    4918:	80 93 ca 04 	sts	0x04CA, r24
            if(calibVelIndex == 10) {
    491c:	8a 30       	cpi	r24, 0x0A	; 10
    491e:	09 f4       	brne	.+2      	; 0x4922 <handleCalibration+0xf6>
    4920:	8b c1       	rjmp	.+790    	; 0x4c38 <handleCalibration+0x40c>
					// red off
					writeCalibrationToFlash();
					calibrateOdomFlag = 0;
				}
			}
			calibState = 0;
    4922:	10 92 88 05 	sts	0x0588, r1
    4926:	08 95       	ret
            calibState = 1;
            timeoutOdometry = getTime100MicroSec();
            break;

		case 1: // look for black line, start time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    4928:	80 91 c6 04 	lds	r24, 0x04C6
    492c:	88 23       	and	r24, r24
    492e:	09 f4       	brne	.+2      	; 0x4932 <handleCalibration+0x106>
    4930:	d0 c0       	rjmp	.+416    	; 0x4ad2 <handleCalibration+0x2a6>
    4932:	82 30       	cpi	r24, 0x02	; 2
    4934:	09 f4       	brne	.+2      	; 0x4938 <handleCalibration+0x10c>
    4936:	cd c0       	rjmp	.+410    	; 0x4ad2 <handleCalibration+0x2a6>
                    timeOdometry = getTime100MicroSec();;
                    calibState = 2;
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
            	if(proximityResult[11]<(512-2*HYSTERESIS_THR)) {
    4938:	80 91 6d 02 	lds	r24, 0x026D
    493c:	90 91 6e 02 	lds	r25, 0x026E
    4940:	21 e0       	ldi	r18, 0x01	; 1
    4942:	8a 36       	cpi	r24, 0x6A	; 106
    4944:	92 07       	cpc	r25, r18
    4946:	0c f0       	brlt	.+2      	; 0x494a <handleCalibration+0x11e>
    4948:	90 cf       	rjmp	.-224    	; 0x486a <handleCalibration+0x3e>
				//if((proximityResult[11])<(proximityOffset[11]>>1)) {	
					rightSumCount = 0;
    494a:	10 92 af 04 	sts	0x04AF, r1
    494e:	10 92 ae 04 	sts	0x04AE, r1
					rightSpeedSumOdom = 0;
    4952:	10 92 a8 04 	sts	0x04A8, r1
    4956:	10 92 a9 04 	sts	0x04A9, r1
    495a:	10 92 aa 04 	sts	0x04AA, r1
    495e:	10 92 ab 04 	sts	0x04AB, r1
    4962:	cc c0       	rjmp	.+408    	; 0x4afc <handleCalibration+0x2d0>
                calibState = 5;
			}
            break;

		case 4: // exit from black line again
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    4964:	80 91 c6 04 	lds	r24, 0x04C6
    4968:	88 23       	and	r24, r24
    496a:	49 f1       	breq	.+82     	; 0x49be <handleCalibration+0x192>
    496c:	82 30       	cpi	r24, 0x02	; 2
    496e:	39 f1       	breq	.+78     	; 0x49be <handleCalibration+0x192>
            	if(proximityResult[8]>(512-HYSTERESIS_THR)) {
				//if((proximityResult[8])>(proximityOffset[8]>>1)) {	
                	calibState = 5;
				}
			} else {
            	if(proximityResult[11]>(512-HYSTERESIS_THR)) {
    4970:	80 91 6d 02 	lds	r24, 0x026D
    4974:	90 91 6e 02 	lds	r25, 0x026E
    4978:	21 e0       	ldi	r18, 0x01	; 1
    497a:	86 3b       	cpi	r24, 0xB6	; 182
    497c:	92 07       	cpc	r25, r18
    497e:	3c f5       	brge	.+78     	; 0x49ce <handleCalibration+0x1a2>
				//if((proximityResult[11])>(proximityOffset[11]>>1)) {	
					calibState = 5;
				}
			}
            if((getTime100MicroSec() - timeoutOdometry)>PAUSE_60_SEC) {    // the robot seems to be still, go to next velocity
    4980:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <getTime100MicroSec>
    4984:	20 91 84 05 	lds	r18, 0x0584
    4988:	30 91 85 05 	lds	r19, 0x0585
    498c:	40 91 86 05 	lds	r20, 0x0586
    4990:	50 91 87 05 	lds	r21, 0x0587
    4994:	62 1b       	sub	r22, r18
    4996:	73 0b       	sbc	r23, r19
    4998:	84 0b       	sbc	r24, r20
    499a:	95 0b       	sbc	r25, r21
    499c:	6c 39       	cpi	r22, 0x9C	; 156
    499e:	2d ec       	ldi	r18, 0xCD	; 205
    49a0:	72 07       	cpc	r23, r18
    49a2:	28 e0       	ldi	r18, 0x08	; 8
    49a4:	82 07       	cpc	r24, r18
    49a6:	20 e0       	ldi	r18, 0x00	; 0
    49a8:	92 07       	cpc	r25, r18
    49aa:	08 f4       	brcc	.+2      	; 0x49ae <handleCalibration+0x182>
    49ac:	af cf       	rjmp	.-162    	; 0x490c <handleCalibration+0xe0>
            	tempVel = 0;
    49ae:	10 92 8a 05 	sts	0x058A, r1
    49b2:	10 92 89 05 	sts	0x0589, r1
                //updateOdomData();
                calibState = 5;
    49b6:	85 e0       	ldi	r24, 0x05	; 5
    49b8:	80 93 88 05 	sts	0x0588, r24
    49bc:	08 95       	ret
			}
            break;

		case 4: // exit from black line again
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
            	if(proximityResult[8]>(512-HYSTERESIS_THR)) {
    49be:	80 91 67 02 	lds	r24, 0x0267
    49c2:	90 91 68 02 	lds	r25, 0x0268
    49c6:	21 e0       	ldi	r18, 0x01	; 1
    49c8:	86 3b       	cpi	r24, 0xB6	; 182
    49ca:	92 07       	cpc	r25, r18
    49cc:	cc f2       	brlt	.-78     	; 0x4980 <handleCalibration+0x154>
                	calibState = 5;
				}
			} else {
            	if(proximityResult[11]>(512-HYSTERESIS_THR)) {
				//if((proximityResult[11])>(proximityOffset[11]>>1)) {	
					calibState = 5;
    49ce:	85 e0       	ldi	r24, 0x05	; 5
    49d0:	80 93 88 05 	sts	0x0588, r24
    49d4:	d5 cf       	rjmp	.-86     	; 0x4980 <handleCalibration+0x154>
                calibState = 5;
			}
			break;

		case 2: // exit from black line
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    49d6:	80 91 c6 04 	lds	r24, 0x04C6
    49da:	88 23       	and	r24, r24
    49dc:	09 f4       	brne	.+2      	; 0x49e0 <handleCalibration+0x1b4>
    49de:	a6 c0       	rjmp	.+332    	; 0x4b2c <handleCalibration+0x300>
    49e0:	82 30       	cpi	r24, 0x02	; 2
    49e2:	09 f4       	brne	.+2      	; 0x49e6 <handleCalibration+0x1ba>
    49e4:	a3 c0       	rjmp	.+326    	; 0x4b2c <handleCalibration+0x300>
				//if((proximityResult[8])>(proximityOffset[8]>>1)) {	
                	calibState = 3;
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
            	if(proximityResult[11]>(512-HYSTERESIS_THR)) {
    49e6:	80 91 6d 02 	lds	r24, 0x026D
    49ea:	90 91 6e 02 	lds	r25, 0x026E
    49ee:	21 e0       	ldi	r18, 0x01	; 1
    49f0:	86 3b       	cpi	r24, 0xB6	; 182
    49f2:	92 07       	cpc	r25, r18
    49f4:	0c f4       	brge	.+2      	; 0x49f8 <handleCalibration+0x1cc>
    49f6:	39 cf       	rjmp	.-398    	; 0x486a <handleCalibration+0x3e>
				//if((proximityResult[11])>(proximityOffset[11]>>1)) {	
                	calibState = 3;
    49f8:	83 e0       	ldi	r24, 0x03	; 3
    49fa:	80 93 88 05 	sts	0x0588, r24
                    timeoutOdometry = getTime100MicroSec();;
    49fe:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <getTime100MicroSec>
    4a02:	60 93 84 05 	sts	0x0584, r22
    4a06:	70 93 85 05 	sts	0x0585, r23
    4a0a:	80 93 86 05 	sts	0x0586, r24
    4a0e:	90 93 87 05 	sts	0x0587, r25
    4a12:	2b cf       	rjmp	.-426    	; 0x486a <handleCalibration+0x3e>
			}
            break;

		case 3: // look for black line again, stop time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
            	if(proximityResult[8]<(512-2*HYSTERESIS_THR)) {
    4a14:	80 91 67 02 	lds	r24, 0x0267
    4a18:	90 91 68 02 	lds	r25, 0x0268
    4a1c:	21 e0       	ldi	r18, 0x01	; 1
    4a1e:	8a 36       	cpi	r24, 0x6A	; 106
    4a20:	92 07       	cpc	r25, r18
    4a22:	0c f0       	brlt	.+2      	; 0x4a26 <handleCalibration+0x1fa>
    4a24:	22 cf       	rjmp	.-444    	; 0x486a <handleCalibration+0x3e>
				//if((proximityResult[8])<(proximityOffset[8]>>1)) {	
                	timeOdometry = getTime100MicroSec() - timeOdometry;
    4a26:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <getTime100MicroSec>
    4a2a:	20 91 c1 04 	lds	r18, 0x04C1
    4a2e:	30 91 c2 04 	lds	r19, 0x04C2
    4a32:	40 91 c3 04 	lds	r20, 0x04C3
    4a36:	50 91 c4 04 	lds	r21, 0x04C4
    4a3a:	62 1b       	sub	r22, r18
    4a3c:	73 0b       	sbc	r23, r19
    4a3e:	84 0b       	sbc	r24, r20
    4a40:	95 0b       	sbc	r25, r21
    4a42:	60 93 c1 04 	sts	0x04C1, r22
    4a46:	70 93 c2 04 	sts	0x04C2, r23
    4a4a:	80 93 c3 04 	sts	0x04C3, r24
    4a4e:	90 93 c4 04 	sts	0x04C4, r25
                    tempVel = (unsigned int)(DISTANCE_MM/((float)timeOdometry*104.0/1000000.0));
    4a52:	0e 94 98 40 	call	0x8130	; 0x8130 <__floatunsisf>
    4a56:	20 e0       	ldi	r18, 0x00	; 0
    4a58:	30 e0       	ldi	r19, 0x00	; 0
    4a5a:	40 ed       	ldi	r20, 0xD0	; 208
    4a5c:	52 e4       	ldi	r21, 0x42	; 66
    4a5e:	0e 94 af 41 	call	0x835e	; 0x835e <__mulsf3>
    4a62:	20 e0       	ldi	r18, 0x00	; 0
    4a64:	34 e2       	ldi	r19, 0x24	; 36
    4a66:	44 e7       	ldi	r20, 0x74	; 116
    4a68:	59 e4       	ldi	r21, 0x49	; 73
    4a6a:	0e 94 ff 3f 	call	0x7ffe	; 0x7ffe <__divsf3>
    4a6e:	9b 01       	movw	r18, r22
    4a70:	ac 01       	movw	r20, r24
    4a72:	64 e1       	ldi	r22, 0x14	; 20
    4a74:	7e e2       	ldi	r23, 0x2E	; 46
    4a76:	88 e7       	ldi	r24, 0x78	; 120
    4a78:	93 e4       	ldi	r25, 0x43	; 67
    4a7a:	0e 94 ff 3f 	call	0x7ffe	; 0x7ffe <__divsf3>
    4a7e:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <__fixunssfsi>
    4a82:	70 93 8a 05 	sts	0x058A, r23
    4a86:	60 93 89 05 	sts	0x0589, r22
					avgLeftSpeed = leftSpeedSumOdom/leftSumCount;
    4a8a:	20 91 ac 04 	lds	r18, 0x04AC
    4a8e:	30 91 ad 04 	lds	r19, 0x04AD
    4a92:	40 e0       	ldi	r20, 0x00	; 0
    4a94:	50 e0       	ldi	r21, 0x00	; 0
    4a96:	60 91 a4 04 	lds	r22, 0x04A4
    4a9a:	70 91 a5 04 	lds	r23, 0x04A5
    4a9e:	80 91 a6 04 	lds	r24, 0x04A6
    4aa2:	90 91 a7 04 	lds	r25, 0x04A7
    4aa6:	0e 94 80 42 	call	0x8500	; 0x8500 <__divmodsi4>
    4aaa:	30 93 b1 04 	sts	0x04B1, r19
    4aae:	20 93 b0 04 	sts	0x04B0, r18
            	if(proximityResult[11]<(512-2*HYSTERESIS_THR)) {
				//if((proximityResult[11])<(proximityOffset[11]>>1)) {	
                	timeOdometry = getTime100MicroSec() - timeOdometry;
                    tempVel = (unsigned int)(DISTANCE_MM/((float)timeOdometry*104.0/1000000.0));
                    avgRightSpeed = rightSpeedSumOdom/rightSumCount;
					updateOdomData();
    4ab2:	0e 94 2f 23 	call	0x465e	; 0x465e <updateOdomData>
                    calibState = 4;
    4ab6:	84 e0       	ldi	r24, 0x04	; 4
    4ab8:	80 93 88 05 	sts	0x0588, r24
                    timeoutOdometry = getTime100MicroSec();;
    4abc:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <getTime100MicroSec>
    4ac0:	60 93 84 05 	sts	0x0584, r22
    4ac4:	70 93 85 05 	sts	0x0585, r23
    4ac8:	80 93 86 05 	sts	0x0586, r24
    4acc:	90 93 87 05 	sts	0x0587, r25
    4ad0:	cc ce       	rjmp	.-616    	; 0x486a <handleCalibration+0x3e>
            timeoutOdometry = getTime100MicroSec();
            break;

		case 1: // look for black line, start time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
            	if(proximityResult[8]<(512-2*HYSTERESIS_THR)) {
    4ad2:	80 91 67 02 	lds	r24, 0x0267
    4ad6:	90 91 68 02 	lds	r25, 0x0268
    4ada:	21 e0       	ldi	r18, 0x01	; 1
    4adc:	8a 36       	cpi	r24, 0x6A	; 106
    4ade:	92 07       	cpc	r25, r18
    4ae0:	0c f0       	brlt	.+2      	; 0x4ae4 <handleCalibration+0x2b8>
    4ae2:	c3 ce       	rjmp	.-634    	; 0x486a <handleCalibration+0x3e>
				//if((proximityResult[8])<(proximityOffset[8]>>1)) {				
                	leftSumCount = 0;
    4ae4:	10 92 ad 04 	sts	0x04AD, r1
    4ae8:	10 92 ac 04 	sts	0x04AC, r1
                    leftSpeedSumOdom = 0;
    4aec:	10 92 a4 04 	sts	0x04A4, r1
    4af0:	10 92 a5 04 	sts	0x04A5, r1
    4af4:	10 92 a6 04 	sts	0x04A6, r1
    4af8:	10 92 a7 04 	sts	0x04A7, r1
			} else {
            	if(proximityResult[11]<(512-2*HYSTERESIS_THR)) {
				//if((proximityResult[11])<(proximityOffset[11]>>1)) {	
					rightSumCount = 0;
					rightSpeedSumOdom = 0;
                    timeOdometry = getTime100MicroSec();;
    4afc:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <getTime100MicroSec>
    4b00:	60 93 c1 04 	sts	0x04C1, r22
    4b04:	70 93 c2 04 	sts	0x04C2, r23
    4b08:	80 93 c3 04 	sts	0x04C3, r24
    4b0c:	90 93 c4 04 	sts	0x04C4, r25
                    calibState = 2;
    4b10:	82 e0       	ldi	r24, 0x02	; 2
    4b12:	80 93 88 05 	sts	0x0588, r24
                    timeoutOdometry = getTime100MicroSec();;
    4b16:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <getTime100MicroSec>
    4b1a:	60 93 84 05 	sts	0x0584, r22
    4b1e:	70 93 85 05 	sts	0x0585, r23
    4b22:	80 93 86 05 	sts	0x0586, r24
    4b26:	90 93 87 05 	sts	0x0587, r25
    4b2a:	9f ce       	rjmp	.-706    	; 0x486a <handleCalibration+0x3e>
			}
			break;

		case 2: // exit from black line
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
            	if(proximityResult[8]>(512-HYSTERESIS_THR)) {
    4b2c:	80 91 67 02 	lds	r24, 0x0267
    4b30:	90 91 68 02 	lds	r25, 0x0268
    4b34:	21 e0       	ldi	r18, 0x01	; 1
    4b36:	86 3b       	cpi	r24, 0xB6	; 182
    4b38:	92 07       	cpc	r25, r18
    4b3a:	0c f4       	brge	.+2      	; 0x4b3e <handleCalibration+0x312>
    4b3c:	96 ce       	rjmp	.-724    	; 0x486a <handleCalibration+0x3e>
    4b3e:	5c cf       	rjmp	.-328    	; 0x49f8 <handleCalibration+0x1cc>

    	case 0: // set speed
        	if(calibWheel == LEFT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = 0;
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    4b40:	81 30       	cpi	r24, 0x01	; 1
    4b42:	09 f4       	brne	.+2      	; 0x4b46 <handleCalibration+0x31a>
    4b44:	84 c0       	rjmp	.+264    	; 0x4c4e <handleCalibration+0x422>
				pwm_intermediate_right_desired = (INDEX_STEP*calibVelIndex)<<2;
				pwm_intermediate_left_desired = 0;
			} else if(calibWheel == LEFT_WHEEL_BW_SC) {
    4b46:	82 30       	cpi	r24, 0x02	; 2
    4b48:	09 f4       	brne	.+2      	; 0x4b4c <handleCalibration+0x320>
    4b4a:	60 c0       	rjmp	.+192    	; 0x4c0c <handleCalibration+0x3e0>
				pwm_intermediate_right_desired = 0;
				pwm_intermediate_left_desired = -((INDEX_STEP*calibVelIndex)<<2);
        	} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    4b4c:	83 30       	cpi	r24, 0x03	; 3
    4b4e:	09 f0       	breq	.+2      	; 0x4b52 <handleCalibration+0x326>
    4b50:	cd ce       	rjmp	.-614    	; 0x48ec <handleCalibration+0xc0>
				pwm_intermediate_right_desired = -((INDEX_STEP*calibVelIndex)<<2);
    4b52:	90 91 ca 04 	lds	r25, 0x04CA
    4b56:	85 e0       	ldi	r24, 0x05	; 5
    4b58:	98 9f       	mul	r25, r24
    4b5a:	c0 01       	movw	r24, r0
    4b5c:	11 24       	eor	r1, r1
    4b5e:	88 0f       	add	r24, r24
    4b60:	99 1f       	adc	r25, r25
    4b62:	88 0f       	add	r24, r24
    4b64:	99 1f       	adc	r25, r25
    4b66:	90 95       	com	r25
    4b68:	81 95       	neg	r24
    4b6a:	9f 4f       	sbci	r25, 0xFF	; 255
    4b6c:	90 93 fc 02 	sts	0x02FC, r25
    4b70:	80 93 fb 02 	sts	0x02FB, r24
				pwm_intermediate_left_desired = 0;
    4b74:	10 92 fe 02 	sts	0x02FE, r1
    4b78:	10 92 fd 02 	sts	0x02FD, r1
    4b7c:	b7 ce       	rjmp	.-658    	; 0x48ec <handleCalibration+0xc0>
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
            	if(proximityResult[11]<(512-2*HYSTERESIS_THR)) {
				//if((proximityResult[11])<(proximityOffset[11]>>1)) {	
                	timeOdometry = getTime100MicroSec() - timeOdometry;
    4b7e:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <getTime100MicroSec>
    4b82:	20 91 c1 04 	lds	r18, 0x04C1
    4b86:	30 91 c2 04 	lds	r19, 0x04C2
    4b8a:	40 91 c3 04 	lds	r20, 0x04C3
    4b8e:	50 91 c4 04 	lds	r21, 0x04C4
    4b92:	62 1b       	sub	r22, r18
    4b94:	73 0b       	sbc	r23, r19
    4b96:	84 0b       	sbc	r24, r20
    4b98:	95 0b       	sbc	r25, r21
    4b9a:	60 93 c1 04 	sts	0x04C1, r22
    4b9e:	70 93 c2 04 	sts	0x04C2, r23
    4ba2:	80 93 c3 04 	sts	0x04C3, r24
    4ba6:	90 93 c4 04 	sts	0x04C4, r25
                    tempVel = (unsigned int)(DISTANCE_MM/((float)timeOdometry*104.0/1000000.0));
    4baa:	0e 94 98 40 	call	0x8130	; 0x8130 <__floatunsisf>
    4bae:	20 e0       	ldi	r18, 0x00	; 0
    4bb0:	30 e0       	ldi	r19, 0x00	; 0
    4bb2:	40 ed       	ldi	r20, 0xD0	; 208
    4bb4:	52 e4       	ldi	r21, 0x42	; 66
    4bb6:	0e 94 af 41 	call	0x835e	; 0x835e <__mulsf3>
    4bba:	20 e0       	ldi	r18, 0x00	; 0
    4bbc:	34 e2       	ldi	r19, 0x24	; 36
    4bbe:	44 e7       	ldi	r20, 0x74	; 116
    4bc0:	59 e4       	ldi	r21, 0x49	; 73
    4bc2:	0e 94 ff 3f 	call	0x7ffe	; 0x7ffe <__divsf3>
    4bc6:	9b 01       	movw	r18, r22
    4bc8:	ac 01       	movw	r20, r24
    4bca:	64 e1       	ldi	r22, 0x14	; 20
    4bcc:	7e e2       	ldi	r23, 0x2E	; 46
    4bce:	88 e7       	ldi	r24, 0x78	; 120
    4bd0:	93 e4       	ldi	r25, 0x43	; 67
    4bd2:	0e 94 ff 3f 	call	0x7ffe	; 0x7ffe <__divsf3>
    4bd6:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <__fixunssfsi>
    4bda:	70 93 8a 05 	sts	0x058A, r23
    4bde:	60 93 89 05 	sts	0x0589, r22
                    avgRightSpeed = rightSpeedSumOdom/rightSumCount;
    4be2:	20 91 ae 04 	lds	r18, 0x04AE
    4be6:	30 91 af 04 	lds	r19, 0x04AF
    4bea:	40 e0       	ldi	r20, 0x00	; 0
    4bec:	50 e0       	ldi	r21, 0x00	; 0
    4bee:	60 91 a8 04 	lds	r22, 0x04A8
    4bf2:	70 91 a9 04 	lds	r23, 0x04A9
    4bf6:	80 91 aa 04 	lds	r24, 0x04AA
    4bfa:	90 91 ab 04 	lds	r25, 0x04AB
    4bfe:	0e 94 80 42 	call	0x8500	; 0x8500 <__divmodsi4>
    4c02:	30 93 b3 04 	sts	0x04B3, r19
    4c06:	20 93 b2 04 	sts	0x04B2, r18
    4c0a:	53 cf       	rjmp	.-346    	; 0x4ab2 <handleCalibration+0x286>
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = (INDEX_STEP*calibVelIndex)<<2;
				pwm_intermediate_left_desired = 0;
			} else if(calibWheel == LEFT_WHEEL_BW_SC) {
				pwm_intermediate_right_desired = 0;
    4c0c:	10 92 fc 02 	sts	0x02FC, r1
    4c10:	10 92 fb 02 	sts	0x02FB, r1
				pwm_intermediate_left_desired = -((INDEX_STEP*calibVelIndex)<<2);
    4c14:	90 91 ca 04 	lds	r25, 0x04CA
    4c18:	85 e0       	ldi	r24, 0x05	; 5
    4c1a:	98 9f       	mul	r25, r24
    4c1c:	c0 01       	movw	r24, r0
    4c1e:	11 24       	eor	r1, r1
    4c20:	88 0f       	add	r24, r24
    4c22:	99 1f       	adc	r25, r25
    4c24:	88 0f       	add	r24, r24
    4c26:	99 1f       	adc	r25, r25
    4c28:	90 95       	com	r25
    4c2a:	81 95       	neg	r24
    4c2c:	9f 4f       	sbci	r25, 0xFF	; 255
    4c2e:	90 93 fe 02 	sts	0x02FE, r25
    4c32:	80 93 fd 02 	sts	0x02FD, r24
    4c36:	5a ce       	rjmp	.-844    	; 0x48ec <handleCalibration+0xc0>
            break;

		case 5:
        	calibVelIndex++;
            if(calibVelIndex == 10) {
            	calibVelIndex = 1;
    4c38:	91 e0       	ldi	r25, 0x01	; 1
    4c3a:	90 93 ca 04 	sts	0x04CA, r25
                if(calibWheel == LEFT_WHEEL_FW_SC) {
    4c3e:	80 91 c6 04 	lds	r24, 0x04C6
    4c42:	88 23       	and	r24, r24
    4c44:	b9 f4       	brne	.+46     	; 0x4c74 <handleCalibration+0x448>
                	calibWheel = LEFT_WHEEL_BW_SC;
    4c46:	82 e0       	ldi	r24, 0x02	; 2
    4c48:	80 93 c6 04 	sts	0x04C6, r24
    4c4c:	6a ce       	rjmp	.-812    	; 0x4922 <handleCalibration+0xf6>
    	case 0: // set speed
        	if(calibWheel == LEFT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = 0;
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = (INDEX_STEP*calibVelIndex)<<2;
    4c4e:	90 91 ca 04 	lds	r25, 0x04CA
    4c52:	85 e0       	ldi	r24, 0x05	; 5
    4c54:	98 9f       	mul	r25, r24
    4c56:	c0 01       	movw	r24, r0
    4c58:	11 24       	eor	r1, r1
    4c5a:	88 0f       	add	r24, r24
    4c5c:	99 1f       	adc	r25, r25
    4c5e:	88 0f       	add	r24, r24
    4c60:	99 1f       	adc	r25, r25
    4c62:	90 93 fc 02 	sts	0x02FC, r25
    4c66:	80 93 fb 02 	sts	0x02FB, r24
				pwm_intermediate_left_desired = 0;
    4c6a:	10 92 fe 02 	sts	0x02FE, r1
    4c6e:	10 92 fd 02 	sts	0x02FD, r1
    4c72:	3c ce       	rjmp	.-904    	; 0x48ec <handleCalibration+0xc0>
        	calibVelIndex++;
            if(calibVelIndex == 10) {
            	calibVelIndex = 1;
                if(calibWheel == LEFT_WHEEL_FW_SC) {
                	calibWheel = LEFT_WHEEL_BW_SC;
				} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    4c74:	81 30       	cpi	r24, 0x01	; 1
    4c76:	61 f0       	breq	.+24     	; 0x4c90 <handleCalibration+0x464>
                	calibWheel = RIGHT_WHEEL_BW_SC;
				} else if(calibWheel == LEFT_WHEEL_BW_SC) {
    4c78:	82 30       	cpi	r24, 0x02	; 2
    4c7a:	71 f0       	breq	.+28     	; 0x4c98 <handleCalibration+0x46c>
                	calibWheel = RIGHT_WHEEL_FW_SC;
					calibrateOdomFlag = 0;
					// red on
				} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    4c7c:	83 30       	cpi	r24, 0x03	; 3
    4c7e:	09 f0       	breq	.+2      	; 0x4c82 <handleCalibration+0x456>
    4c80:	50 ce       	rjmp	.-864    	; 0x4922 <handleCalibration+0xf6>
                	calibWheel = LEFT_WHEEL_FW_SC;					
    4c82:	10 92 c6 04 	sts	0x04C6, r1
					// red off
					writeCalibrationToFlash();
    4c86:	0e 94 19 3f 	call	0x7e32	; 0x7e32 <writeCalibrationToFlash>
					calibrateOdomFlag = 0;
    4c8a:	10 92 c7 04 	sts	0x04C7, r1
    4c8e:	49 ce       	rjmp	.-878    	; 0x4922 <handleCalibration+0xf6>
            if(calibVelIndex == 10) {
            	calibVelIndex = 1;
                if(calibWheel == LEFT_WHEEL_FW_SC) {
                	calibWheel = LEFT_WHEEL_BW_SC;
				} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
                	calibWheel = RIGHT_WHEEL_BW_SC;
    4c90:	83 e0       	ldi	r24, 0x03	; 3
    4c92:	80 93 c6 04 	sts	0x04C6, r24
    4c96:	45 ce       	rjmp	.-886    	; 0x4922 <handleCalibration+0xf6>
				} else if(calibWheel == LEFT_WHEEL_BW_SC) {
                	calibWheel = RIGHT_WHEEL_FW_SC;
    4c98:	90 93 c6 04 	sts	0x04C6, r25
					calibrateOdomFlag = 0;
    4c9c:	10 92 c7 04 	sts	0x04C7, r1
    4ca0:	40 ce       	rjmp	.-896    	; 0x4922 <handleCalibration+0xf6>

00004ca2 <getInputFromSpeed>:

}

// extract data to pass to speed controller given a desired speed in mm/s
// mode => return a measured speed 0..1023
signed int getInputFromSpeed(signed int s, unsigned char mode) {
    4ca2:	af 92       	push	r10
    4ca4:	bf 92       	push	r11
    4ca6:	cf 92       	push	r12
    4ca8:	df 92       	push	r13
    4caa:	ef 92       	push	r14
    4cac:	ff 92       	push	r15
    4cae:	0f 93       	push	r16
    4cb0:	1f 93       	push	r17
    4cb2:	cf 93       	push	r28
    4cb4:	df 93       	push	r29
    
    int i = 0;
    signed int currVel = s*BYTE_TO_MM_S;
    4cb6:	9c 01       	movw	r18, r24
    4cb8:	22 0f       	add	r18, r18
    4cba:	33 1f       	adc	r19, r19
    4cbc:	22 0f       	add	r18, r18
    4cbe:	33 1f       	adc	r19, r19
    4cc0:	28 0f       	add	r18, r24
    4cc2:	39 1f       	adc	r19, r25
    signed int temp = 0;

    if(currVel == 0) {
    4cc4:	21 15       	cp	r18, r1
    4cc6:	31 05       	cpc	r19, r1
    4cc8:	09 f4       	brne	.+2      	; 0x4ccc <getInputFromSpeed+0x2a>
    4cca:	7b c0       	rjmp	.+246    	; 0x4dc2 <getInputFromSpeed+0x120>
        return 0;
    }

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
    4ccc:	86 2f       	mov	r24, r22
    4cce:	82 50       	subi	r24, 0x02	; 2
    4cd0:	82 30       	cpi	r24, 0x02	; 2
    4cd2:	08 f4       	brcc	.+2      	; 0x4cd6 <getInputFromSpeed+0x34>
    4cd4:	84 c0       	rjmp	.+264    	; 0x4dde <getInputFromSpeed+0x13c>
        currVel = -currVel; // consider only positive values
    4cd6:	66 23       	and	r22, r22
    4cd8:	09 f0       	breq	.+2      	; 0x4cdc <getInputFromSpeed+0x3a>
    4cda:	84 c0       	rjmp	.+264    	; 0x4de4 <getInputFromSpeed+0x142>
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
    4cdc:	80 91 df 04 	lds	r24, 0x04DF
    4ce0:	90 91 e0 04 	lds	r25, 0x04E0
    4ce4:	82 17       	cp	r24, r18
    4ce6:	93 07       	cpc	r25, r19
    4ce8:	0c f0       	brlt	.+2      	; 0x4cec <getInputFromSpeed+0x4a>
    4cea:	1b c2       	rjmp	.+1078   	; 0x5122 <getInputFromSpeed+0x480>
    4cec:	80 91 ef 04 	lds	r24, 0x04EF
    4cf0:	90 91 f0 04 	lds	r25, 0x04F0
    4cf4:	82 17       	cp	r24, r18
    4cf6:	93 07       	cpc	r25, r19
    4cf8:	0c f0       	brlt	.+2      	; 0x4cfc <getInputFromSpeed+0x5a>
    4cfa:	1c c2       	rjmp	.+1080   	; 0x5134 <getInputFromSpeed+0x492>
    4cfc:	80 91 ff 04 	lds	r24, 0x04FF
    4d00:	90 91 00 05 	lds	r25, 0x0500
    4d04:	82 17       	cp	r24, r18
    4d06:	93 07       	cpc	r25, r19
    4d08:	0c f0       	brlt	.+2      	; 0x4d0c <getInputFromSpeed+0x6a>
    4d0a:	17 c2       	rjmp	.+1070   	; 0x513a <getInputFromSpeed+0x498>
    4d0c:	80 91 0f 05 	lds	r24, 0x050F
    4d10:	90 91 10 05 	lds	r25, 0x0510
    4d14:	82 17       	cp	r24, r18
    4d16:	93 07       	cpc	r25, r19
    4d18:	0c f0       	brlt	.+2      	; 0x4d1c <getInputFromSpeed+0x7a>
    4d1a:	12 c2       	rjmp	.+1060   	; 0x5140 <getInputFromSpeed+0x49e>
    4d1c:	80 91 1f 05 	lds	r24, 0x051F
    4d20:	90 91 20 05 	lds	r25, 0x0520
    4d24:	82 17       	cp	r24, r18
    4d26:	93 07       	cpc	r25, r19
    4d28:	0c f0       	brlt	.+2      	; 0x4d2c <getInputFromSpeed+0x8a>
    4d2a:	fe c1       	rjmp	.+1020   	; 0x5128 <getInputFromSpeed+0x486>
    4d2c:	80 91 2f 05 	lds	r24, 0x052F
    4d30:	90 91 30 05 	lds	r25, 0x0530
    4d34:	82 17       	cp	r24, r18
    4d36:	93 07       	cpc	r25, r19
    4d38:	0c f0       	brlt	.+2      	; 0x4d3c <getInputFromSpeed+0x9a>
    4d3a:	f9 c1       	rjmp	.+1010   	; 0x512e <getInputFromSpeed+0x48c>
    4d3c:	80 91 3f 05 	lds	r24, 0x053F
    4d40:	90 91 40 05 	lds	r25, 0x0540
    4d44:	82 17       	cp	r24, r18
    4d46:	93 07       	cpc	r25, r19
    4d48:	0c f0       	brlt	.+2      	; 0x4d4c <getInputFromSpeed+0xaa>
    4d4a:	02 c2       	rjmp	.+1028   	; 0x5150 <getInputFromSpeed+0x4ae>
    4d4c:	80 91 4f 05 	lds	r24, 0x054F
    4d50:	90 91 50 05 	lds	r25, 0x0550
    4d54:	82 17       	cp	r24, r18
    4d56:	93 07       	cpc	r25, r19
    4d58:	0c f0       	brlt	.+2      	; 0x4d5c <getInputFromSpeed+0xba>
    4d5a:	fd c1       	rjmp	.+1018   	; 0x5156 <getInputFromSpeed+0x4b4>
    4d5c:	c0 91 5f 05 	lds	r28, 0x055F
    4d60:	d0 91 60 05 	lds	r29, 0x0560
    4d64:	c2 17       	cp	r28, r18
    4d66:	d3 07       	cpc	r29, r19
    4d68:	0c f0       	brlt	.+2      	; 0x4d6c <getInputFromSpeed+0xca>
    4d6a:	7a c1       	rjmp	.+756    	; 0x5060 <getInputFromSpeed+0x3be>
            temp = currVel*calibration[0][6]/calibration[0][7];
            temp = -temp;
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
    4d6c:	b9 01       	movw	r22, r18
    4d6e:	88 27       	eor	r24, r24
    4d70:	77 fd       	sbrc	r23, 7
    4d72:	80 95       	com	r24
    4d74:	98 2f       	mov	r25, r24
    4d76:	0e 94 9a 40 	call	0x8134	; 0x8134 <__floatsisf>
    4d7a:	7b 01       	movw	r14, r22
    4d7c:	8c 01       	movw	r16, r24
    4d7e:	60 91 5d 05 	lds	r22, 0x055D
    4d82:	70 91 5e 05 	lds	r23, 0x055E
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
    4d86:	88 27       	eor	r24, r24
    4d88:	77 fd       	sbrc	r23, 7
    4d8a:	80 95       	com	r24
    4d8c:	98 2f       	mov	r25, r24
    4d8e:	0e 94 9a 40 	call	0x8134	; 0x8134 <__floatsisf>
    4d92:	9b 01       	movw	r18, r22
    4d94:	ac 01       	movw	r20, r24
    4d96:	c8 01       	movw	r24, r16
    4d98:	b7 01       	movw	r22, r14
    4d9a:	0e 94 af 41 	call	0x835e	; 0x835e <__mulsf3>
    4d9e:	7b 01       	movw	r14, r22
    4da0:	8c 01       	movw	r16, r24
    4da2:	be 01       	movw	r22, r28
    4da4:	88 27       	eor	r24, r24
    4da6:	77 fd       	sbrc	r23, 7
    4da8:	80 95       	com	r24
    4daa:	98 2f       	mov	r25, r24
    4dac:	0e 94 9a 40 	call	0x8134	; 0x8134 <__floatsisf>
    4db0:	9b 01       	movw	r18, r22
    4db2:	ac 01       	movw	r20, r24
    4db4:	c8 01       	movw	r24, r16
    4db6:	b7 01       	movw	r22, r14
    4db8:	0e 94 ff 3f 	call	0x7ffe	; 0x7ffe <__divsf3>
    4dbc:	0e 94 67 40 	call	0x80ce	; 0x80ce <__fixsfsi>
    4dc0:	02 c0       	rjmp	.+4      	; 0x4dc6 <getInputFromSpeed+0x124>
// mode => return a measured speed 0..1023
signed int getInputFromSpeed(signed int s, unsigned char mode) {
    
    int i = 0;
    signed int currVel = s*BYTE_TO_MM_S;
    signed int temp = 0;
    4dc2:	60 e0       	ldi	r22, 0x00	; 0
    4dc4:	70 e0       	ldi	r23, 0x00	; 0
            temp = -temp;
        }        
    }
    
    return temp;
}
    4dc6:	cb 01       	movw	r24, r22
    4dc8:	df 91       	pop	r29
    4dca:	cf 91       	pop	r28
    4dcc:	1f 91       	pop	r17
    4dce:	0f 91       	pop	r16
    4dd0:	ff 90       	pop	r15
    4dd2:	ef 90       	pop	r14
    4dd4:	df 90       	pop	r13
    4dd6:	cf 90       	pop	r12
    4dd8:	bf 90       	pop	r11
    4dda:	af 90       	pop	r10
    4ddc:	08 95       	ret
    if(currVel == 0) {
        return 0;
    }

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
        currVel = -currVel; // consider only positive values
    4dde:	30 95       	com	r19
    4de0:	21 95       	neg	r18
    4de2:	3f 4f       	sbci	r19, 0xFF	; 255
    4de4:	63 30       	cpi	r22, 0x03	; 3
    4de6:	09 f4       	brne	.+2      	; 0x4dea <getInputFromSpeed+0x148>
    4de8:	f3 c0       	rjmp	.+486    	; 0x4fd0 <getInputFromSpeed+0x32e>
    4dea:	62 30       	cpi	r22, 0x02	; 2
    4dec:	01 f1       	breq	.+64     	; 0x4e2e <getInputFromSpeed+0x18c>
    4dee:	61 30       	cpi	r22, 0x01	; 1
    4df0:	09 f4       	brne	.+2      	; 0x4df4 <getInputFromSpeed+0x152>
    4df2:	98 c0       	rjmp	.+304    	; 0x4f24 <getInputFromSpeed+0x282>
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][6]/calibration[0][7];
            temp = -temp;
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
    4df4:	66 23       	and	r22, r22
    4df6:	09 f4       	brne	.+2      	; 0x4dfa <getInputFromSpeed+0x158>
    4df8:	90 c0       	rjmp	.+288    	; 0x4f1a <getInputFromSpeed+0x278>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
    4dfa:	61 30       	cpi	r22, 0x01	; 1
    4dfc:	09 f4       	brne	.+2      	; 0x4e00 <getInputFromSpeed+0x15e>
    4dfe:	8c c1       	rjmp	.+792    	; 0x5118 <getInputFromSpeed+0x476>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
        } else if(mode==LEFT_WHEEL_BW_SC) {
    4e00:	62 30       	cpi	r22, 0x02	; 2
    4e02:	09 f4       	brne	.+2      	; 0x4e06 <getInputFromSpeed+0x164>
    4e04:	a0 c1       	rjmp	.+832    	; 0x5146 <getInputFromSpeed+0x4a4>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][4]/(float)calibration[CALIBRATION_SAMPLES-1][5]);
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
    4e06:	63 30       	cpi	r22, 0x03	; 3
    4e08:	e1 f6       	brne	.-72     	; 0x4dc2 <getInputFromSpeed+0x120>
    4e0a:	c0 91 6b 05 	lds	r28, 0x056B
    4e0e:	d0 91 6c 05 	lds	r29, 0x056C
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][6]/(float)calibration[CALIBRATION_SAMPLES-1][7]);
    4e12:	b9 01       	movw	r22, r18
    4e14:	88 27       	eor	r24, r24
    4e16:	77 fd       	sbrc	r23, 7
    4e18:	80 95       	com	r24
    4e1a:	98 2f       	mov	r25, r24
    4e1c:	0e 94 9a 40 	call	0x8134	; 0x8134 <__floatsisf>
    4e20:	7b 01       	movw	r14, r22
    4e22:	8c 01       	movw	r16, r24
    4e24:	60 91 69 05 	lds	r22, 0x0569
    4e28:	70 91 6a 05 	lds	r23, 0x056A
    4e2c:	55 c0       	rjmp	.+170    	; 0x4ed8 <getInputFromSpeed+0x236>
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            if(calibration[i][3] >= currVel) {
                break;
            }
        } else if(mode==LEFT_WHEEL_BW_SC) {
            if(calibration[i][5] >= currVel) {
    4e2e:	80 91 e7 04 	lds	r24, 0x04E7
    4e32:	90 91 e8 04 	lds	r25, 0x04E8
    4e36:	82 17       	cp	r24, r18
    4e38:	93 07       	cpc	r25, r19
    4e3a:	0c f0       	brlt	.+2      	; 0x4e3e <getInputFromSpeed+0x19c>
    4e3c:	72 c1       	rjmp	.+740    	; 0x5122 <getInputFromSpeed+0x480>
    4e3e:	80 91 f7 04 	lds	r24, 0x04F7
    4e42:	90 91 f8 04 	lds	r25, 0x04F8
    4e46:	82 17       	cp	r24, r18
    4e48:	93 07       	cpc	r25, r19
    4e4a:	0c f0       	brlt	.+2      	; 0x4e4e <getInputFromSpeed+0x1ac>
    4e4c:	73 c1       	rjmp	.+742    	; 0x5134 <getInputFromSpeed+0x492>
    4e4e:	80 91 07 05 	lds	r24, 0x0507
    4e52:	90 91 08 05 	lds	r25, 0x0508
    4e56:	82 17       	cp	r24, r18
    4e58:	93 07       	cpc	r25, r19
    4e5a:	0c f0       	brlt	.+2      	; 0x4e5e <getInputFromSpeed+0x1bc>
    4e5c:	6e c1       	rjmp	.+732    	; 0x513a <getInputFromSpeed+0x498>
    4e5e:	80 91 17 05 	lds	r24, 0x0517
    4e62:	90 91 18 05 	lds	r25, 0x0518
    4e66:	82 17       	cp	r24, r18
    4e68:	93 07       	cpc	r25, r19
    4e6a:	0c f0       	brlt	.+2      	; 0x4e6e <getInputFromSpeed+0x1cc>
    4e6c:	69 c1       	rjmp	.+722    	; 0x5140 <getInputFromSpeed+0x49e>
    4e6e:	80 91 27 05 	lds	r24, 0x0527
    4e72:	90 91 28 05 	lds	r25, 0x0528
    4e76:	82 17       	cp	r24, r18
    4e78:	93 07       	cpc	r25, r19
    4e7a:	0c f0       	brlt	.+2      	; 0x4e7e <getInputFromSpeed+0x1dc>
    4e7c:	55 c1       	rjmp	.+682    	; 0x5128 <getInputFromSpeed+0x486>
    4e7e:	80 91 37 05 	lds	r24, 0x0537
    4e82:	90 91 38 05 	lds	r25, 0x0538
    4e86:	82 17       	cp	r24, r18
    4e88:	93 07       	cpc	r25, r19
    4e8a:	0c f0       	brlt	.+2      	; 0x4e8e <getInputFromSpeed+0x1ec>
    4e8c:	50 c1       	rjmp	.+672    	; 0x512e <getInputFromSpeed+0x48c>
    4e8e:	80 91 47 05 	lds	r24, 0x0547
    4e92:	90 91 48 05 	lds	r25, 0x0548
    4e96:	82 17       	cp	r24, r18
    4e98:	93 07       	cpc	r25, r19
    4e9a:	0c f0       	brlt	.+2      	; 0x4e9e <getInputFromSpeed+0x1fc>
    4e9c:	59 c1       	rjmp	.+690    	; 0x5150 <getInputFromSpeed+0x4ae>
    4e9e:	80 91 57 05 	lds	r24, 0x0557
    4ea2:	90 91 58 05 	lds	r25, 0x0558
    4ea6:	82 17       	cp	r24, r18
    4ea8:	93 07       	cpc	r25, r19
    4eaa:	0c f0       	brlt	.+2      	; 0x4eae <getInputFromSpeed+0x20c>
    4eac:	54 c1       	rjmp	.+680    	; 0x5156 <getInputFromSpeed+0x4b4>
    4eae:	c0 91 67 05 	lds	r28, 0x0567
    4eb2:	d0 91 68 05 	lds	r29, 0x0568
    4eb6:	c2 17       	cp	r28, r18
    4eb8:	d3 07       	cpc	r29, r19
    4eba:	0c f0       	brlt	.+2      	; 0x4ebe <getInputFromSpeed+0x21c>
    4ebc:	d1 c0       	rjmp	.+418    	; 0x5060 <getInputFromSpeed+0x3be>
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][4]/(float)calibration[CALIBRATION_SAMPLES-1][5]);
    4ebe:	b9 01       	movw	r22, r18
    4ec0:	88 27       	eor	r24, r24
    4ec2:	77 fd       	sbrc	r23, 7
    4ec4:	80 95       	com	r24
    4ec6:	98 2f       	mov	r25, r24
    4ec8:	0e 94 9a 40 	call	0x8134	; 0x8134 <__floatsisf>
    4ecc:	7b 01       	movw	r14, r22
    4ece:	8c 01       	movw	r16, r24
    4ed0:	60 91 65 05 	lds	r22, 0x0565
    4ed4:	70 91 66 05 	lds	r23, 0x0566
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][6]/(float)calibration[CALIBRATION_SAMPLES-1][7]);
    4ed8:	88 27       	eor	r24, r24
    4eda:	77 fd       	sbrc	r23, 7
    4edc:	80 95       	com	r24
    4ede:	98 2f       	mov	r25, r24
    4ee0:	0e 94 9a 40 	call	0x8134	; 0x8134 <__floatsisf>
    4ee4:	9b 01       	movw	r18, r22
    4ee6:	ac 01       	movw	r20, r24
    4ee8:	c8 01       	movw	r24, r16
    4eea:	b7 01       	movw	r22, r14
    4eec:	0e 94 af 41 	call	0x835e	; 0x835e <__mulsf3>
    4ef0:	7b 01       	movw	r14, r22
    4ef2:	8c 01       	movw	r16, r24
    4ef4:	be 01       	movw	r22, r28
    4ef6:	88 27       	eor	r24, r24
    4ef8:	77 fd       	sbrc	r23, 7
    4efa:	80 95       	com	r24
    4efc:	98 2f       	mov	r25, r24
    4efe:	0e 94 9a 40 	call	0x8134	; 0x8134 <__floatsisf>
    4f02:	9b 01       	movw	r18, r22
    4f04:	ac 01       	movw	r20, r24
    4f06:	c8 01       	movw	r24, r16
    4f08:	b7 01       	movw	r22, r14
    4f0a:	0e 94 ff 3f 	call	0x7ffe	; 0x7ffe <__divsf3>
    4f0e:	0e 94 67 40 	call	0x80ce	; 0x80ce <__fixsfsi>
            temp = -temp;
    4f12:	70 95       	com	r23
    4f14:	61 95       	neg	r22
    4f16:	7f 4f       	sbci	r23, 0xFF	; 255
    4f18:	56 cf       	rjmp	.-340    	; 0x4dc6 <getInputFromSpeed+0x124>
    4f1a:	c0 91 5f 05 	lds	r28, 0x055F
    4f1e:	d0 91 60 05 	lds	r29, 0x0560
    4f22:	24 cf       	rjmp	.-440    	; 0x4d6c <getInputFromSpeed+0xca>
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
                break;
            }
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            if(calibration[i][3] >= currVel) {
    4f24:	80 91 e3 04 	lds	r24, 0x04E3
    4f28:	90 91 e4 04 	lds	r25, 0x04E4
    4f2c:	82 17       	cp	r24, r18
    4f2e:	93 07       	cpc	r25, r19
    4f30:	0c f0       	brlt	.+2      	; 0x4f34 <getInputFromSpeed+0x292>
    4f32:	f7 c0       	rjmp	.+494    	; 0x5122 <getInputFromSpeed+0x480>
    4f34:	80 91 f3 04 	lds	r24, 0x04F3
    4f38:	90 91 f4 04 	lds	r25, 0x04F4
    4f3c:	82 17       	cp	r24, r18
    4f3e:	93 07       	cpc	r25, r19
    4f40:	0c f0       	brlt	.+2      	; 0x4f44 <getInputFromSpeed+0x2a2>
    4f42:	f8 c0       	rjmp	.+496    	; 0x5134 <getInputFromSpeed+0x492>
    4f44:	80 91 03 05 	lds	r24, 0x0503
    4f48:	90 91 04 05 	lds	r25, 0x0504
    4f4c:	82 17       	cp	r24, r18
    4f4e:	93 07       	cpc	r25, r19
    4f50:	0c f0       	brlt	.+2      	; 0x4f54 <getInputFromSpeed+0x2b2>
    4f52:	f3 c0       	rjmp	.+486    	; 0x513a <getInputFromSpeed+0x498>
    4f54:	80 91 13 05 	lds	r24, 0x0513
    4f58:	90 91 14 05 	lds	r25, 0x0514
    4f5c:	82 17       	cp	r24, r18
    4f5e:	93 07       	cpc	r25, r19
    4f60:	0c f0       	brlt	.+2      	; 0x4f64 <getInputFromSpeed+0x2c2>
    4f62:	ee c0       	rjmp	.+476    	; 0x5140 <getInputFromSpeed+0x49e>
    4f64:	80 91 23 05 	lds	r24, 0x0523
    4f68:	90 91 24 05 	lds	r25, 0x0524
    4f6c:	82 17       	cp	r24, r18
    4f6e:	93 07       	cpc	r25, r19
    4f70:	0c f0       	brlt	.+2      	; 0x4f74 <getInputFromSpeed+0x2d2>
    4f72:	da c0       	rjmp	.+436    	; 0x5128 <getInputFromSpeed+0x486>
    4f74:	80 91 33 05 	lds	r24, 0x0533
    4f78:	90 91 34 05 	lds	r25, 0x0534
    4f7c:	82 17       	cp	r24, r18
    4f7e:	93 07       	cpc	r25, r19
    4f80:	0c f0       	brlt	.+2      	; 0x4f84 <getInputFromSpeed+0x2e2>
    4f82:	d5 c0       	rjmp	.+426    	; 0x512e <getInputFromSpeed+0x48c>
    4f84:	80 91 43 05 	lds	r24, 0x0543
    4f88:	90 91 44 05 	lds	r25, 0x0544
    4f8c:	82 17       	cp	r24, r18
    4f8e:	93 07       	cpc	r25, r19
    4f90:	0c f0       	brlt	.+2      	; 0x4f94 <getInputFromSpeed+0x2f2>
    4f92:	de c0       	rjmp	.+444    	; 0x5150 <getInputFromSpeed+0x4ae>
    4f94:	80 91 53 05 	lds	r24, 0x0553
    4f98:	90 91 54 05 	lds	r25, 0x0554
    4f9c:	82 17       	cp	r24, r18
    4f9e:	93 07       	cpc	r25, r19
    4fa0:	0c f0       	brlt	.+2      	; 0x4fa4 <getInputFromSpeed+0x302>
    4fa2:	d9 c0       	rjmp	.+434    	; 0x5156 <getInputFromSpeed+0x4b4>
    4fa4:	c0 91 63 05 	lds	r28, 0x0563
    4fa8:	d0 91 64 05 	lds	r29, 0x0564
    4fac:	c2 17       	cp	r28, r18
    4fae:	d3 07       	cpc	r29, r19
    4fb0:	0c f0       	brlt	.+2      	; 0x4fb4 <getInputFromSpeed+0x312>
    4fb2:	56 c0       	rjmp	.+172    	; 0x5060 <getInputFromSpeed+0x3be>
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
    4fb4:	b9 01       	movw	r22, r18
    4fb6:	88 27       	eor	r24, r24
    4fb8:	77 fd       	sbrc	r23, 7
    4fba:	80 95       	com	r24
    4fbc:	98 2f       	mov	r25, r24
    4fbe:	0e 94 9a 40 	call	0x8134	; 0x8134 <__floatsisf>
    4fc2:	7b 01       	movw	r14, r22
    4fc4:	8c 01       	movw	r16, r24
    4fc6:	60 91 61 05 	lds	r22, 0x0561
    4fca:	70 91 62 05 	lds	r23, 0x0562
    4fce:	db ce       	rjmp	.-586    	; 0x4d86 <getInputFromSpeed+0xe4>
        } else if(mode==LEFT_WHEEL_BW_SC) {
            if(calibration[i][5] >= currVel) {
                break;
            }
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            if(calibration[i][7] >= currVel) {
    4fd0:	80 91 eb 04 	lds	r24, 0x04EB
    4fd4:	90 91 ec 04 	lds	r25, 0x04EC
    4fd8:	82 17       	cp	r24, r18
    4fda:	93 07       	cpc	r25, r19
    4fdc:	0c f0       	brlt	.+2      	; 0x4fe0 <getInputFromSpeed+0x33e>
    4fde:	a1 c0       	rjmp	.+322    	; 0x5122 <getInputFromSpeed+0x480>
    4fe0:	80 91 fb 04 	lds	r24, 0x04FB
    4fe4:	90 91 fc 04 	lds	r25, 0x04FC
    4fe8:	82 17       	cp	r24, r18
    4fea:	93 07       	cpc	r25, r19
    4fec:	0c f0       	brlt	.+2      	; 0x4ff0 <getInputFromSpeed+0x34e>
    4fee:	a2 c0       	rjmp	.+324    	; 0x5134 <getInputFromSpeed+0x492>
    4ff0:	80 91 0b 05 	lds	r24, 0x050B
    4ff4:	90 91 0c 05 	lds	r25, 0x050C
    4ff8:	82 17       	cp	r24, r18
    4ffa:	93 07       	cpc	r25, r19
    4ffc:	0c f0       	brlt	.+2      	; 0x5000 <getInputFromSpeed+0x35e>
    4ffe:	9d c0       	rjmp	.+314    	; 0x513a <getInputFromSpeed+0x498>
    5000:	80 91 1b 05 	lds	r24, 0x051B
    5004:	90 91 1c 05 	lds	r25, 0x051C
    5008:	82 17       	cp	r24, r18
    500a:	93 07       	cpc	r25, r19
    500c:	0c f0       	brlt	.+2      	; 0x5010 <getInputFromSpeed+0x36e>
    500e:	98 c0       	rjmp	.+304    	; 0x5140 <getInputFromSpeed+0x49e>
    5010:	80 91 2b 05 	lds	r24, 0x052B
    5014:	90 91 2c 05 	lds	r25, 0x052C
    5018:	82 17       	cp	r24, r18
    501a:	93 07       	cpc	r25, r19
    501c:	0c f0       	brlt	.+2      	; 0x5020 <getInputFromSpeed+0x37e>
    501e:	84 c0       	rjmp	.+264    	; 0x5128 <getInputFromSpeed+0x486>
    5020:	80 91 3b 05 	lds	r24, 0x053B
    5024:	90 91 3c 05 	lds	r25, 0x053C
    5028:	82 17       	cp	r24, r18
    502a:	93 07       	cpc	r25, r19
    502c:	0c f0       	brlt	.+2      	; 0x5030 <getInputFromSpeed+0x38e>
    502e:	7f c0       	rjmp	.+254    	; 0x512e <getInputFromSpeed+0x48c>
    5030:	80 91 4b 05 	lds	r24, 0x054B
    5034:	90 91 4c 05 	lds	r25, 0x054C
    5038:	82 17       	cp	r24, r18
    503a:	93 07       	cpc	r25, r19
    503c:	0c f0       	brlt	.+2      	; 0x5040 <getInputFromSpeed+0x39e>
    503e:	88 c0       	rjmp	.+272    	; 0x5150 <getInputFromSpeed+0x4ae>
    5040:	80 91 5b 05 	lds	r24, 0x055B
    5044:	90 91 5c 05 	lds	r25, 0x055C
    5048:	82 17       	cp	r24, r18
    504a:	93 07       	cpc	r25, r19
    504c:	0c f0       	brlt	.+2      	; 0x5050 <getInputFromSpeed+0x3ae>
    504e:	83 c0       	rjmp	.+262    	; 0x5156 <getInputFromSpeed+0x4b4>
    5050:	c0 91 6b 05 	lds	r28, 0x056B
    5054:	d0 91 6c 05 	lds	r29, 0x056C
    5058:	c2 17       	cp	r28, r18
    505a:	d3 07       	cpc	r29, r19
    505c:	0c f4       	brge	.+2      	; 0x5060 <getInputFromSpeed+0x3be>
    505e:	d9 ce       	rjmp	.-590    	; 0x4e12 <getInputFromSpeed+0x170>
        currVel = -currVel; // consider only positive values
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
    5060:	c8 e0       	ldi	r28, 0x08	; 8
    5062:	d0 e0       	ldi	r29, 0x00	; 0
                break;
            }
        } 
    }

    if(i==0) {  // the velocity is lower than first saved in the matrix
    5064:	20 97       	sbiw	r28, 0x00	; 0
    5066:	09 f0       	breq	.+2      	; 0x506a <getInputFromSpeed+0x3c8>
    5068:	79 c0       	rjmp	.+242    	; 0x515c <getInputFromSpeed+0x4ba>
        if(mode==LEFT_WHEEL_FW_SC) {
    506a:	66 23       	and	r22, r22
    506c:	91 f4       	brne	.+36     	; 0x5092 <getInputFromSpeed+0x3f0>
            temp = (currVel*calibration[0][0])/calibration[0][1];
    506e:	40 91 dd 04 	lds	r20, 0x04DD
    5072:	50 91 de 04 	lds	r21, 0x04DE
    5076:	24 9f       	mul	r18, r20
    5078:	c0 01       	movw	r24, r0
    507a:	25 9f       	mul	r18, r21
    507c:	90 0d       	add	r25, r0
    507e:	34 9f       	mul	r19, r20
    5080:	90 0d       	add	r25, r0
    5082:	11 24       	eor	r1, r1
    5084:	60 91 df 04 	lds	r22, 0x04DF
    5088:	70 91 e0 04 	lds	r23, 0x04E0
    508c:	0e 94 6d 42 	call	0x84da	; 0x84da <__divmodhi4>
    5090:	9a ce       	rjmp	.-716    	; 0x4dc6 <getInputFromSpeed+0x124>
        } else if(mode==RIGHT_WHEEL_FW_SC) {
    5092:	61 30       	cpi	r22, 0x01	; 1
    5094:	d1 f0       	breq	.+52     	; 0x50ca <getInputFromSpeed+0x428>
            temp = (currVel*calibration[0][2])/calibration[0][3];
        } else if(mode==LEFT_WHEEL_BW_SC) {
    5096:	62 30       	cpi	r22, 0x02	; 2
    5098:	51 f1       	breq	.+84     	; 0x50ee <getInputFromSpeed+0x44c>
            temp = currVel*calibration[0][4]/calibration[0][5];
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
    509a:	63 30       	cpi	r22, 0x03	; 3
    509c:	09 f0       	breq	.+2      	; 0x50a0 <getInputFromSpeed+0x3fe>
    509e:	91 ce       	rjmp	.-734    	; 0x4dc2 <getInputFromSpeed+0x120>
            temp = currVel*calibration[0][6]/calibration[0][7];
    50a0:	40 91 e9 04 	lds	r20, 0x04E9
    50a4:	50 91 ea 04 	lds	r21, 0x04EA
    50a8:	24 9f       	mul	r18, r20
    50aa:	c0 01       	movw	r24, r0
    50ac:	25 9f       	mul	r18, r21
    50ae:	90 0d       	add	r25, r0
    50b0:	34 9f       	mul	r19, r20
    50b2:	90 0d       	add	r25, r0
    50b4:	11 24       	eor	r1, r1
    50b6:	60 91 eb 04 	lds	r22, 0x04EB
    50ba:	70 91 ec 04 	lds	r23, 0x04EC
    50be:	0e 94 6d 42 	call	0x84da	; 0x84da <__divmodhi4>
            temp = -temp;
    50c2:	70 95       	com	r23
    50c4:	61 95       	neg	r22
    50c6:	7f 4f       	sbci	r23, 0xFF	; 255
    50c8:	7e ce       	rjmp	.-772    	; 0x4dc6 <getInputFromSpeed+0x124>

    if(i==0) {  // the velocity is lower than first saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][0])/calibration[0][1];
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][2])/calibration[0][3];
    50ca:	40 91 e1 04 	lds	r20, 0x04E1
    50ce:	50 91 e2 04 	lds	r21, 0x04E2
    50d2:	24 9f       	mul	r18, r20
    50d4:	c0 01       	movw	r24, r0
    50d6:	25 9f       	mul	r18, r21
    50d8:	90 0d       	add	r25, r0
    50da:	34 9f       	mul	r19, r20
    50dc:	90 0d       	add	r25, r0
    50de:	11 24       	eor	r1, r1
    50e0:	60 91 e3 04 	lds	r22, 0x04E3
    50e4:	70 91 e4 04 	lds	r23, 0x04E4
    50e8:	0e 94 6d 42 	call	0x84da	; 0x84da <__divmodhi4>
    50ec:	6c ce       	rjmp	.-808    	; 0x4dc6 <getInputFromSpeed+0x124>
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][4]/calibration[0][5];
    50ee:	40 91 e5 04 	lds	r20, 0x04E5
    50f2:	50 91 e6 04 	lds	r21, 0x04E6
    50f6:	24 9f       	mul	r18, r20
    50f8:	c0 01       	movw	r24, r0
    50fa:	25 9f       	mul	r18, r21
    50fc:	90 0d       	add	r25, r0
    50fe:	34 9f       	mul	r19, r20
    5100:	90 0d       	add	r25, r0
    5102:	11 24       	eor	r1, r1
    5104:	60 91 e7 04 	lds	r22, 0x04E7
    5108:	70 91 e8 04 	lds	r23, 0x04E8
    510c:	0e 94 6d 42 	call	0x84da	; 0x84da <__divmodhi4>
            temp = -temp;
    5110:	70 95       	com	r23
    5112:	61 95       	neg	r22
    5114:	7f 4f       	sbci	r23, 0xFF	; 255
    5116:	57 ce       	rjmp	.-850    	; 0x4dc6 <getInputFromSpeed+0x124>
    5118:	c0 91 63 05 	lds	r28, 0x0563
    511c:	d0 91 64 05 	lds	r29, 0x0564
    5120:	49 cf       	rjmp	.-366    	; 0x4fb4 <getInputFromSpeed+0x312>

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
        currVel = -currVel; // consider only positive values
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    5122:	c0 e0       	ldi	r28, 0x00	; 0
    5124:	d0 e0       	ldi	r29, 0x00	; 0
    5126:	9e cf       	rjmp	.-196    	; 0x5064 <getInputFromSpeed+0x3c2>
    5128:	c4 e0       	ldi	r28, 0x04	; 4
    512a:	d0 e0       	ldi	r29, 0x00	; 0
    512c:	9b cf       	rjmp	.-202    	; 0x5064 <getInputFromSpeed+0x3c2>
    512e:	c5 e0       	ldi	r28, 0x05	; 5
    5130:	d0 e0       	ldi	r29, 0x00	; 0
    5132:	98 cf       	rjmp	.-208    	; 0x5064 <getInputFromSpeed+0x3c2>
    5134:	c1 e0       	ldi	r28, 0x01	; 1
    5136:	d0 e0       	ldi	r29, 0x00	; 0
    5138:	95 cf       	rjmp	.-214    	; 0x5064 <getInputFromSpeed+0x3c2>
    513a:	c2 e0       	ldi	r28, 0x02	; 2
    513c:	d0 e0       	ldi	r29, 0x00	; 0
    513e:	92 cf       	rjmp	.-220    	; 0x5064 <getInputFromSpeed+0x3c2>
    5140:	c3 e0       	ldi	r28, 0x03	; 3
    5142:	d0 e0       	ldi	r29, 0x00	; 0
    5144:	8f cf       	rjmp	.-226    	; 0x5064 <getInputFromSpeed+0x3c2>
    5146:	c0 91 67 05 	lds	r28, 0x0567
    514a:	d0 91 68 05 	lds	r29, 0x0568
    514e:	b7 ce       	rjmp	.-658    	; 0x4ebe <getInputFromSpeed+0x21c>
    5150:	c6 e0       	ldi	r28, 0x06	; 6
    5152:	d0 e0       	ldi	r29, 0x00	; 0
    5154:	87 cf       	rjmp	.-242    	; 0x5064 <getInputFromSpeed+0x3c2>
    5156:	c7 e0       	ldi	r28, 0x07	; 7
    5158:	d0 e0       	ldi	r29, 0x00	; 0
    515a:	84 cf       	rjmp	.-248    	; 0x5064 <getInputFromSpeed+0x3c2>
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][6]/calibration[0][7];
            temp = -temp;
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    515c:	c9 30       	cpi	r28, 0x09	; 9
    515e:	d1 05       	cpc	r29, r1
    5160:	09 f4       	brne	.+2      	; 0x5164 <getInputFromSpeed+0x4c2>
    5162:	48 ce       	rjmp	.-880    	; 0x4df4 <getInputFromSpeed+0x152>
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][6]/(float)calibration[CALIBRATION_SAMPLES-1][7]);
            temp = -temp;
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
    5164:	66 23       	and	r22, r22
    5166:	09 f0       	breq	.+2      	; 0x516a <getInputFromSpeed+0x4c8>
    5168:	47 c0       	rjmp	.+142    	; 0x51f8 <getInputFromSpeed+0x556>
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
    516a:	fe 01       	movw	r30, r28
    516c:	e2 95       	swap	r30
    516e:	f2 95       	swap	r31
    5170:	f0 7f       	andi	r31, 0xF0	; 240
    5172:	fe 27       	eor	r31, r30
    5174:	e0 7f       	andi	r30, 0xF0	; 240
    5176:	fe 27       	eor	r31, r30
    5178:	e3 53       	subi	r30, 0x33	; 51
    517a:	fb 4f       	sbci	r31, 0xFB	; 251
    517c:	c2 80       	ldd	r12, Z+2	; 0x02
    517e:	d3 80       	ldd	r13, Z+3	; 0x03
    5180:	a0 80       	ld	r10, Z
    5182:	b1 80       	ldd	r11, Z+1	; 0x01
    5184:	2c 19       	sub	r18, r12
    5186:	3d 09       	sbc	r19, r13
    5188:	b9 01       	movw	r22, r18
    518a:	88 27       	eor	r24, r24
    518c:	77 fd       	sbrc	r23, 7
    518e:	80 95       	com	r24
    5190:	98 2f       	mov	r25, r24
    5192:	0e 94 9a 40 	call	0x8134	; 0x8134 <__floatsisf>
    5196:	7b 01       	movw	r14, r22
    5198:	8c 01       	movw	r16, r24
    519a:	c2 95       	swap	r28
    519c:	d2 95       	swap	r29
    519e:	d0 7f       	andi	r29, 0xF0	; 240
    51a0:	dc 27       	eor	r29, r28
    51a2:	c0 7f       	andi	r28, 0xF0	; 240
    51a4:	dc 27       	eor	r29, r28
    51a6:	c3 52       	subi	r28, 0x23	; 35
    51a8:	db 4f       	sbci	r29, 0xFB	; 251
    51aa:	68 81       	ld	r22, Y
    51ac:	79 81       	ldd	r23, Y+1	; 0x01
    51ae:	6a 19       	sub	r22, r10
    51b0:	7b 09       	sbc	r23, r11
    51b2:	88 27       	eor	r24, r24
    51b4:	77 fd       	sbrc	r23, 7
    51b6:	80 95       	com	r24
    51b8:	98 2f       	mov	r25, r24
    51ba:	0e 94 9a 40 	call	0x8134	; 0x8134 <__floatsisf>
    51be:	9b 01       	movw	r18, r22
    51c0:	ac 01       	movw	r20, r24
    51c2:	c8 01       	movw	r24, r16
    51c4:	b7 01       	movw	r22, r14
    51c6:	0e 94 af 41 	call	0x835e	; 0x835e <__mulsf3>
    51ca:	7b 01       	movw	r14, r22
    51cc:	8c 01       	movw	r16, r24
    51ce:	6a 81       	ldd	r22, Y+2	; 0x02
    51d0:	7b 81       	ldd	r23, Y+3	; 0x03
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
    51d2:	6c 19       	sub	r22, r12
    51d4:	7d 09       	sbc	r23, r13
    51d6:	88 27       	eor	r24, r24
    51d8:	77 fd       	sbrc	r23, 7
    51da:	80 95       	com	r24
    51dc:	98 2f       	mov	r25, r24
    51de:	0e 94 9a 40 	call	0x8134	; 0x8134 <__floatsisf>
    51e2:	9b 01       	movw	r18, r22
    51e4:	ac 01       	movw	r20, r24
    51e6:	c8 01       	movw	r24, r16
    51e8:	b7 01       	movw	r22, r14
    51ea:	0e 94 ff 3f 	call	0x7ffe	; 0x7ffe <__divsf3>
    51ee:	0e 94 67 40 	call	0x80ce	; 0x80ce <__fixsfsi>
    51f2:	6a 0d       	add	r22, r10
    51f4:	7b 1d       	adc	r23, r11
    51f6:	e7 cd       	rjmp	.-1074   	; 0x4dc6 <getInputFromSpeed+0x124>
            temp = -temp;
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
        } else if(mode==RIGHT_WHEEL_FW_SC) {
    51f8:	61 30       	cpi	r22, 0x01	; 1
    51fa:	09 f4       	brne	.+2      	; 0x51fe <getInputFromSpeed+0x55c>
    51fc:	50 c0       	rjmp	.+160    	; 0x529e <getInputFromSpeed+0x5fc>
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
        } else if(mode==LEFT_WHEEL_BW_SC) {
    51fe:	62 30       	cpi	r22, 0x02	; 2
    5200:	09 f4       	brne	.+2      	; 0x5204 <getInputFromSpeed+0x562>
    5202:	82 c0       	rjmp	.+260    	; 0x5308 <getInputFromSpeed+0x666>
            temp = calibration[i-1][4] + (signed int)(((float)(currVel-calibration[i-1][5])*(float)(calibration[i][4]-calibration[i-1][4]))/(float)(calibration[i][5]-calibration[i-1][5]));
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
    5204:	63 30       	cpi	r22, 0x03	; 3
    5206:	09 f0       	breq	.+2      	; 0x520a <getInputFromSpeed+0x568>
    5208:	dc cd       	rjmp	.-1096   	; 0x4dc2 <getInputFromSpeed+0x120>
            temp = calibration[i-1][6] + (signed int)(((float)(currVel-calibration[i-1][7])*(float)(calibration[i][6]-calibration[i-1][6]))/(float)(calibration[i][7]-calibration[i-1][7]));
    520a:	fe 01       	movw	r30, r28
    520c:	e2 95       	swap	r30
    520e:	f2 95       	swap	r31
    5210:	f0 7f       	andi	r31, 0xF0	; 240
    5212:	fe 27       	eor	r31, r30
    5214:	e0 7f       	andi	r30, 0xF0	; 240
    5216:	fe 27       	eor	r31, r30
    5218:	e3 53       	subi	r30, 0x33	; 51
    521a:	fb 4f       	sbci	r31, 0xFB	; 251
    521c:	c6 84       	ldd	r12, Z+14	; 0x0e
    521e:	d7 84       	ldd	r13, Z+15	; 0x0f
    5220:	a4 84       	ldd	r10, Z+12	; 0x0c
    5222:	b5 84       	ldd	r11, Z+13	; 0x0d
    5224:	2c 19       	sub	r18, r12
    5226:	3d 09       	sbc	r19, r13
    5228:	b9 01       	movw	r22, r18
    522a:	88 27       	eor	r24, r24
    522c:	77 fd       	sbrc	r23, 7
    522e:	80 95       	com	r24
    5230:	98 2f       	mov	r25, r24
    5232:	0e 94 9a 40 	call	0x8134	; 0x8134 <__floatsisf>
    5236:	7b 01       	movw	r14, r22
    5238:	8c 01       	movw	r16, r24
    523a:	c2 95       	swap	r28
    523c:	d2 95       	swap	r29
    523e:	d0 7f       	andi	r29, 0xF0	; 240
    5240:	dc 27       	eor	r29, r28
    5242:	c0 7f       	andi	r28, 0xF0	; 240
    5244:	dc 27       	eor	r29, r28
    5246:	c3 52       	subi	r28, 0x23	; 35
    5248:	db 4f       	sbci	r29, 0xFB	; 251
    524a:	6c 85       	ldd	r22, Y+12	; 0x0c
    524c:	7d 85       	ldd	r23, Y+13	; 0x0d
    524e:	6a 19       	sub	r22, r10
    5250:	7b 09       	sbc	r23, r11
    5252:	88 27       	eor	r24, r24
    5254:	77 fd       	sbrc	r23, 7
    5256:	80 95       	com	r24
    5258:	98 2f       	mov	r25, r24
    525a:	0e 94 9a 40 	call	0x8134	; 0x8134 <__floatsisf>
    525e:	9b 01       	movw	r18, r22
    5260:	ac 01       	movw	r20, r24
    5262:	c8 01       	movw	r24, r16
    5264:	b7 01       	movw	r22, r14
    5266:	0e 94 af 41 	call	0x835e	; 0x835e <__mulsf3>
    526a:	7b 01       	movw	r14, r22
    526c:	8c 01       	movw	r16, r24
    526e:	6e 85       	ldd	r22, Y+14	; 0x0e
    5270:	7f 85       	ldd	r23, Y+15	; 0x0f
    5272:	6c 19       	sub	r22, r12
    5274:	7d 09       	sbc	r23, r13
    5276:	88 27       	eor	r24, r24
    5278:	77 fd       	sbrc	r23, 7
    527a:	80 95       	com	r24
    527c:	98 2f       	mov	r25, r24
    527e:	0e 94 9a 40 	call	0x8134	; 0x8134 <__floatsisf>
    5282:	9b 01       	movw	r18, r22
    5284:	ac 01       	movw	r20, r24
    5286:	c8 01       	movw	r24, r16
    5288:	b7 01       	movw	r22, r14
    528a:	0e 94 ff 3f 	call	0x7ffe	; 0x7ffe <__divsf3>
    528e:	0e 94 67 40 	call	0x80ce	; 0x80ce <__fixsfsi>
    5292:	6a 0d       	add	r22, r10
    5294:	7b 1d       	adc	r23, r11
            temp = -temp;
    5296:	70 95       	com	r23
    5298:	61 95       	neg	r22
    529a:	7f 4f       	sbci	r23, 0xFF	; 255
    529c:	94 cd       	rjmp	.-1240   	; 0x4dc6 <getInputFromSpeed+0x124>
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
    529e:	fe 01       	movw	r30, r28
    52a0:	e2 95       	swap	r30
    52a2:	f2 95       	swap	r31
    52a4:	f0 7f       	andi	r31, 0xF0	; 240
    52a6:	fe 27       	eor	r31, r30
    52a8:	e0 7f       	andi	r30, 0xF0	; 240
    52aa:	fe 27       	eor	r31, r30
    52ac:	e3 53       	subi	r30, 0x33	; 51
    52ae:	fb 4f       	sbci	r31, 0xFB	; 251
    52b0:	c6 80       	ldd	r12, Z+6	; 0x06
    52b2:	d7 80       	ldd	r13, Z+7	; 0x07
    52b4:	a4 80       	ldd	r10, Z+4	; 0x04
    52b6:	b5 80       	ldd	r11, Z+5	; 0x05
    52b8:	2c 19       	sub	r18, r12
    52ba:	3d 09       	sbc	r19, r13
    52bc:	b9 01       	movw	r22, r18
    52be:	88 27       	eor	r24, r24
    52c0:	77 fd       	sbrc	r23, 7
    52c2:	80 95       	com	r24
    52c4:	98 2f       	mov	r25, r24
    52c6:	0e 94 9a 40 	call	0x8134	; 0x8134 <__floatsisf>
    52ca:	7b 01       	movw	r14, r22
    52cc:	8c 01       	movw	r16, r24
    52ce:	c2 95       	swap	r28
    52d0:	d2 95       	swap	r29
    52d2:	d0 7f       	andi	r29, 0xF0	; 240
    52d4:	dc 27       	eor	r29, r28
    52d6:	c0 7f       	andi	r28, 0xF0	; 240
    52d8:	dc 27       	eor	r29, r28
    52da:	c3 52       	subi	r28, 0x23	; 35
    52dc:	db 4f       	sbci	r29, 0xFB	; 251
    52de:	6c 81       	ldd	r22, Y+4	; 0x04
    52e0:	7d 81       	ldd	r23, Y+5	; 0x05
    52e2:	6a 19       	sub	r22, r10
    52e4:	7b 09       	sbc	r23, r11
    52e6:	88 27       	eor	r24, r24
    52e8:	77 fd       	sbrc	r23, 7
    52ea:	80 95       	com	r24
    52ec:	98 2f       	mov	r25, r24
    52ee:	0e 94 9a 40 	call	0x8134	; 0x8134 <__floatsisf>
    52f2:	9b 01       	movw	r18, r22
    52f4:	ac 01       	movw	r20, r24
    52f6:	c8 01       	movw	r24, r16
    52f8:	b7 01       	movw	r22, r14
    52fa:	0e 94 af 41 	call	0x835e	; 0x835e <__mulsf3>
    52fe:	7b 01       	movw	r14, r22
    5300:	8c 01       	movw	r16, r24
    5302:	6e 81       	ldd	r22, Y+6	; 0x06
    5304:	7f 81       	ldd	r23, Y+7	; 0x07
    5306:	65 cf       	rjmp	.-310    	; 0x51d2 <getInputFromSpeed+0x530>
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = calibration[i-1][4] + (signed int)(((float)(currVel-calibration[i-1][5])*(float)(calibration[i][4]-calibration[i-1][4]))/(float)(calibration[i][5]-calibration[i-1][5]));
    5308:	fe 01       	movw	r30, r28
    530a:	e2 95       	swap	r30
    530c:	f2 95       	swap	r31
    530e:	f0 7f       	andi	r31, 0xF0	; 240
    5310:	fe 27       	eor	r31, r30
    5312:	e0 7f       	andi	r30, 0xF0	; 240
    5314:	fe 27       	eor	r31, r30
    5316:	e3 53       	subi	r30, 0x33	; 51
    5318:	fb 4f       	sbci	r31, 0xFB	; 251
    531a:	c2 84       	ldd	r12, Z+10	; 0x0a
    531c:	d3 84       	ldd	r13, Z+11	; 0x0b
    531e:	a0 84       	ldd	r10, Z+8	; 0x08
    5320:	b1 84       	ldd	r11, Z+9	; 0x09
    5322:	2c 19       	sub	r18, r12
    5324:	3d 09       	sbc	r19, r13
    5326:	b9 01       	movw	r22, r18
    5328:	88 27       	eor	r24, r24
    532a:	77 fd       	sbrc	r23, 7
    532c:	80 95       	com	r24
    532e:	98 2f       	mov	r25, r24
    5330:	0e 94 9a 40 	call	0x8134	; 0x8134 <__floatsisf>
    5334:	7b 01       	movw	r14, r22
    5336:	8c 01       	movw	r16, r24
    5338:	c2 95       	swap	r28
    533a:	d2 95       	swap	r29
    533c:	d0 7f       	andi	r29, 0xF0	; 240
    533e:	dc 27       	eor	r29, r28
    5340:	c0 7f       	andi	r28, 0xF0	; 240
    5342:	dc 27       	eor	r29, r28
    5344:	c3 52       	subi	r28, 0x23	; 35
    5346:	db 4f       	sbci	r29, 0xFB	; 251
    5348:	68 85       	ldd	r22, Y+8	; 0x08
    534a:	79 85       	ldd	r23, Y+9	; 0x09
    534c:	6a 19       	sub	r22, r10
    534e:	7b 09       	sbc	r23, r11
    5350:	88 27       	eor	r24, r24
    5352:	77 fd       	sbrc	r23, 7
    5354:	80 95       	com	r24
    5356:	98 2f       	mov	r25, r24
    5358:	0e 94 9a 40 	call	0x8134	; 0x8134 <__floatsisf>
    535c:	9b 01       	movw	r18, r22
    535e:	ac 01       	movw	r20, r24
    5360:	c8 01       	movw	r24, r16
    5362:	b7 01       	movw	r22, r14
    5364:	0e 94 af 41 	call	0x835e	; 0x835e <__mulsf3>
    5368:	7b 01       	movw	r14, r22
    536a:	8c 01       	movw	r16, r24
    536c:	6a 85       	ldd	r22, Y+10	; 0x0a
    536e:	7b 85       	ldd	r23, Y+11	; 0x0b
    5370:	80 cf       	rjmp	.-256    	; 0x5272 <getInputFromSpeed+0x5d0>

00005372 <getRightSpeedFromInput>:
    
    return temp;
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {
    5372:	8f 92       	push	r8
    5374:	9f 92       	push	r9
    5376:	af 92       	push	r10
    5378:	bf 92       	push	r11
    537a:	cf 92       	push	r12
    537c:	df 92       	push	r13
    537e:	ef 92       	push	r14
    5380:	ff 92       	push	r15
    5382:	0f 93       	push	r16
    5384:	1f 93       	push	r17
    5386:	cf 93       	push	r28
    5388:	df 93       	push	r29

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    538a:	c0 91 f1 02 	lds	r28, 0x02F1
    538e:	d0 91 f2 02 	lds	r29, 0x02F2
    5392:	80 91 f3 02 	lds	r24, 0x02F3
    5396:	90 91 f4 02 	lds	r25, 0x02F4
    539a:	97 fd       	sbrc	r25, 7
    539c:	d9 c0       	rjmp	.+434    	; 0x5550 <getRightSpeedFromInput+0x1de>
    539e:	60 91 e1 04 	lds	r22, 0x04E1
    53a2:	70 91 e2 04 	lds	r23, 0x04E2
    53a6:	6c 17       	cp	r22, r28
    53a8:	7d 07       	cpc	r23, r29
    53aa:	0c f0       	brlt	.+2      	; 0x53ae <getRightSpeedFromInput+0x3c>
    53ac:	bd c0       	rjmp	.+378    	; 0x5528 <getRightSpeedFromInput+0x1b6>
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    53ae:	0f ef       	ldi	r16, 0xFF	; 255
    53b0:	1f ef       	ldi	r17, 0xFF	; 255
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    53b2:	80 91 f1 04 	lds	r24, 0x04F1
    53b6:	90 91 f2 04 	lds	r25, 0x04F2
    53ba:	8c 17       	cp	r24, r28
    53bc:	9d 07       	cpc	r25, r29
    53be:	44 f0       	brlt	.+16     	; 0x53d0 <getRightSpeedFromInput+0x5e>
    
    return temp;
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {
    53c0:	81 e0       	ldi	r24, 0x01	; 1
    53c2:	9f ef       	ldi	r25, 0xFF	; 255
    53c4:	0f 3f       	cpi	r16, 0xFF	; 255
    53c6:	19 07       	cpc	r17, r25
    53c8:	09 f0       	breq	.+2      	; 0x53cc <getRightSpeedFromInput+0x5a>
    53ca:	80 e0       	ldi	r24, 0x00	; 0
    53cc:	08 2f       	mov	r16, r24
    53ce:	10 e0       	ldi	r17, 0x00	; 0

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    53d0:	80 91 01 05 	lds	r24, 0x0501
    53d4:	90 91 02 05 	lds	r25, 0x0502
    53d8:	8c 17       	cp	r24, r28
    53da:	9d 07       	cpc	r25, r29
    53dc:	2c f0       	brlt	.+10     	; 0x53e8 <getRightSpeedFromInput+0x76>
    53de:	8f ef       	ldi	r24, 0xFF	; 255
    53e0:	0f 3f       	cpi	r16, 0xFF	; 255
    53e2:	18 07       	cpc	r17, r24
    53e4:	09 f4       	brne	.+2      	; 0x53e8 <getRightSpeedFromInput+0x76>
    53e6:	6c c1       	rjmp	.+728    	; 0x56c0 <getRightSpeedFromInput+0x34e>
    53e8:	80 91 11 05 	lds	r24, 0x0511
    53ec:	90 91 12 05 	lds	r25, 0x0512
    53f0:	8c 17       	cp	r24, r28
    53f2:	9d 07       	cpc	r25, r29
    53f4:	2c f0       	brlt	.+10     	; 0x5400 <getRightSpeedFromInput+0x8e>
    53f6:	9f ef       	ldi	r25, 0xFF	; 255
    53f8:	0f 3f       	cpi	r16, 0xFF	; 255
    53fa:	19 07       	cpc	r17, r25
    53fc:	09 f4       	brne	.+2      	; 0x5400 <getRightSpeedFromInput+0x8e>
    53fe:	72 c1       	rjmp	.+740    	; 0x56e4 <getRightSpeedFromInput+0x372>
    5400:	80 91 21 05 	lds	r24, 0x0521
    5404:	90 91 22 05 	lds	r25, 0x0522
    5408:	8c 17       	cp	r24, r28
    540a:	9d 07       	cpc	r25, r29
    540c:	2c f0       	brlt	.+10     	; 0x5418 <getRightSpeedFromInput+0xa6>
    540e:	8f ef       	ldi	r24, 0xFF	; 255
    5410:	0f 3f       	cpi	r16, 0xFF	; 255
    5412:	18 07       	cpc	r17, r24
    5414:	09 f4       	brne	.+2      	; 0x5418 <getRightSpeedFromInput+0xa6>
    5416:	63 c1       	rjmp	.+710    	; 0x56de <getRightSpeedFromInput+0x36c>
    5418:	80 91 31 05 	lds	r24, 0x0531
    541c:	90 91 32 05 	lds	r25, 0x0532
    5420:	8c 17       	cp	r24, r28
    5422:	9d 07       	cpc	r25, r29
    5424:	2c f0       	brlt	.+10     	; 0x5430 <getRightSpeedFromInput+0xbe>
    5426:	9f ef       	ldi	r25, 0xFF	; 255
    5428:	0f 3f       	cpi	r16, 0xFF	; 255
    542a:	19 07       	cpc	r17, r25
    542c:	09 f4       	brne	.+2      	; 0x5430 <getRightSpeedFromInput+0xbe>
    542e:	54 c1       	rjmp	.+680    	; 0x56d8 <getRightSpeedFromInput+0x366>
    5430:	80 91 41 05 	lds	r24, 0x0541
    5434:	90 91 42 05 	lds	r25, 0x0542
    5438:	8c 17       	cp	r24, r28
    543a:	9d 07       	cpc	r25, r29
    543c:	2c f0       	brlt	.+10     	; 0x5448 <getRightSpeedFromInput+0xd6>
    543e:	8f ef       	ldi	r24, 0xFF	; 255
    5440:	0f 3f       	cpi	r16, 0xFF	; 255
    5442:	18 07       	cpc	r17, r24
    5444:	09 f4       	brne	.+2      	; 0x5448 <getRightSpeedFromInput+0xd6>
    5446:	45 c1       	rjmp	.+650    	; 0x56d2 <getRightSpeedFromInput+0x360>
    5448:	80 91 51 05 	lds	r24, 0x0551
    544c:	90 91 52 05 	lds	r25, 0x0552
    5450:	8c 17       	cp	r24, r28
    5452:	9d 07       	cpc	r25, r29
    5454:	2c f0       	brlt	.+10     	; 0x5460 <getRightSpeedFromInput+0xee>
    5456:	9f ef       	ldi	r25, 0xFF	; 255
    5458:	0f 3f       	cpi	r16, 0xFF	; 255
    545a:	19 07       	cpc	r17, r25
    545c:	09 f4       	brne	.+2      	; 0x5460 <getRightSpeedFromInput+0xee>
    545e:	36 c1       	rjmp	.+620    	; 0x56cc <getRightSpeedFromInput+0x35a>
    5460:	e0 90 61 05 	lds	r14, 0x0561
    5464:	f0 90 62 05 	lds	r15, 0x0562
    5468:	ec 16       	cp	r14, r28
    546a:	fd 06       	cpc	r15, r29
    546c:	2c f0       	brlt	.+10     	; 0x5478 <getRightSpeedFromInput+0x106>
    546e:	8f ef       	ldi	r24, 0xFF	; 255
    5470:	0f 3f       	cpi	r16, 0xFF	; 255
    5472:	18 07       	cpc	r17, r24
    5474:	09 f4       	brne	.+2      	; 0x5478 <getRightSpeedFromInput+0x106>
    5476:	27 c1       	rjmp	.+590    	; 0x56c6 <getRightSpeedFromInput+0x354>
			}
		}        
    }

    if(pwm_right >= 0) {
        if(last_right_vel == 0) {
    5478:	20 97       	sbiw	r28, 0x00	; 0
    547a:	09 f4       	brne	.+2      	; 0x547e <getRightSpeedFromInput+0x10c>
    547c:	58 c0       	rjmp	.+176    	; 0x552e <getRightSpeedFromInput+0x1bc>
            speedRightFromEnc = 0;
        } else {
            if(indFwR==0) {  // the velocity is lower than first saved in the matrix
    547e:	01 15       	cp	r16, r1
    5480:	11 05       	cpc	r17, r1
    5482:	09 f4       	brne	.+2      	; 0x5486 <getRightSpeedFromInput+0x114>
    5484:	32 c1       	rjmp	.+612    	; 0x56ea <getRightSpeedFromInput+0x378>
                speedRightFromEnc = (last_right_vel*calibration[0][3])/calibration[0][2];
            } else if(indFwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    5486:	9f ef       	ldi	r25, 0xFF	; 255
    5488:	0f 3f       	cpi	r16, 0xFF	; 255
    548a:	19 07       	cpc	r17, r25
    548c:	09 f4       	brne	.+2      	; 0x5490 <getRightSpeedFromInput+0x11e>
    548e:	e9 c0       	rjmp	.+466    	; 0x5662 <getRightSpeedFromInput+0x2f0>
                speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][3]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][2]);  // take the max
            } else {
                speedRightFromEnc = calibration[indFwR-1][3] + (signed int)(((float)(last_right_vel-calibration[indFwR-1][2])*(float)(calibration[indFwR][3]-calibration[indFwR-1][3]))/(float)(calibration[indFwR][2]-calibration[indFwR-1][2]));
    5490:	f8 01       	movw	r30, r16
    5492:	e2 95       	swap	r30
    5494:	f2 95       	swap	r31
    5496:	f0 7f       	andi	r31, 0xF0	; 240
    5498:	fe 27       	eor	r31, r30
    549a:	e0 7f       	andi	r30, 0xF0	; 240
    549c:	fe 27       	eor	r31, r30
    549e:	e3 53       	subi	r30, 0x33	; 51
    54a0:	fb 4f       	sbci	r31, 0xFB	; 251
    54a2:	a4 80       	ldd	r10, Z+4	; 0x04
    54a4:	b5 80       	ldd	r11, Z+5	; 0x05
    54a6:	86 80       	ldd	r8, Z+6	; 0x06
    54a8:	97 80       	ldd	r9, Z+7	; 0x07
    54aa:	ca 19       	sub	r28, r10
    54ac:	db 09       	sbc	r29, r11
    54ae:	be 01       	movw	r22, r28
    54b0:	88 27       	eor	r24, r24
    54b2:	77 fd       	sbrc	r23, 7
    54b4:	80 95       	com	r24
    54b6:	98 2f       	mov	r25, r24
    54b8:	0e 94 9a 40 	call	0x8134	; 0x8134 <__floatsisf>
    54bc:	6b 01       	movw	r12, r22
    54be:	7c 01       	movw	r14, r24
    54c0:	e8 01       	movw	r28, r16
    54c2:	c2 95       	swap	r28
    54c4:	d2 95       	swap	r29
    54c6:	d0 7f       	andi	r29, 0xF0	; 240
    54c8:	dc 27       	eor	r29, r28
    54ca:	c0 7f       	andi	r28, 0xF0	; 240
    54cc:	dc 27       	eor	r29, r28
    54ce:	c3 52       	subi	r28, 0x23	; 35
    54d0:	db 4f       	sbci	r29, 0xFB	; 251
    54d2:	6e 81       	ldd	r22, Y+6	; 0x06
    54d4:	7f 81       	ldd	r23, Y+7	; 0x07
    54d6:	68 19       	sub	r22, r8
    54d8:	79 09       	sbc	r23, r9
    54da:	88 27       	eor	r24, r24
    54dc:	77 fd       	sbrc	r23, 7
    54de:	80 95       	com	r24
    54e0:	98 2f       	mov	r25, r24
    54e2:	0e 94 9a 40 	call	0x8134	; 0x8134 <__floatsisf>
    54e6:	9b 01       	movw	r18, r22
    54e8:	ac 01       	movw	r20, r24
    54ea:	c7 01       	movw	r24, r14
    54ec:	b6 01       	movw	r22, r12
    54ee:	0e 94 af 41 	call	0x835e	; 0x835e <__mulsf3>
    54f2:	7b 01       	movw	r14, r22
    54f4:	8c 01       	movw	r16, r24
    54f6:	6c 81       	ldd	r22, Y+4	; 0x04
    54f8:	7d 81       	ldd	r23, Y+5	; 0x05
    54fa:	6a 19       	sub	r22, r10
    54fc:	7b 09       	sbc	r23, r11
    54fe:	88 27       	eor	r24, r24
    5500:	77 fd       	sbrc	r23, 7
    5502:	80 95       	com	r24
    5504:	98 2f       	mov	r25, r24
    5506:	0e 94 9a 40 	call	0x8134	; 0x8134 <__floatsisf>
    550a:	9b 01       	movw	r18, r22
    550c:	ac 01       	movw	r20, r24
    550e:	c8 01       	movw	r24, r16
    5510:	b7 01       	movw	r22, r14
    5512:	0e 94 ff 3f 	call	0x7ffe	; 0x7ffe <__divsf3>
    5516:	0e 94 67 40 	call	0x80ce	; 0x80ce <__fixsfsi>
    551a:	68 0d       	add	r22, r8
    551c:	79 1d       	adc	r23, r9
    551e:	70 93 b7 04 	sts	0x04B7, r23
    5522:	60 93 b6 04 	sts	0x04B6, r22
    5526:	07 c0       	rjmp	.+14     	; 0x5536 <getRightSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    5528:	00 e0       	ldi	r16, 0x00	; 0
    552a:	10 e0       	ldi	r17, 0x00	; 0
    552c:	42 cf       	rjmp	.-380    	; 0x53b2 <getRightSpeedFromInput+0x40>
		}        
    }

    if(pwm_right >= 0) {
        if(last_right_vel == 0) {
            speedRightFromEnc = 0;
    552e:	10 92 b7 04 	sts	0x04B7, r1
    5532:	10 92 b6 04 	sts	0x04B6, r1
        	speedRightFromEnc = calibration[indBwR-1][7] + (signed int)(((float)(last_right_vel-calibration[indBwR-1][6])*(float)(calibration[indBwR][7]-calibration[indBwR-1][7]))/(float)(calibration[indBwR][6]-calibration[indBwR-1][6]));
		}
		speedRightFromEnc = -speedRightFromEnc;
    }
    
}
    5536:	df 91       	pop	r29
    5538:	cf 91       	pop	r28
    553a:	1f 91       	pop	r17
    553c:	0f 91       	pop	r16
    553e:	ff 90       	pop	r15
    5540:	ef 90       	pop	r14
    5542:	df 90       	pop	r13
    5544:	cf 90       	pop	r12
    5546:	bf 90       	pop	r11
    5548:	af 90       	pop	r10
    554a:	9f 90       	pop	r9
    554c:	8f 90       	pop	r8
    554e:	08 95       	ret
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    5550:	60 91 e9 04 	lds	r22, 0x04E9
    5554:	70 91 ea 04 	lds	r23, 0x04EA
    5558:	6c 17       	cp	r22, r28
    555a:	7d 07       	cpc	r23, r29
    555c:	0c f0       	brlt	.+2      	; 0x5560 <getRightSpeedFromInput+0x1ee>
    555e:	7e c0       	rjmp	.+252    	; 0x565c <getRightSpeedFromInput+0x2ea>
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    5560:	0f ef       	ldi	r16, 0xFF	; 255
    5562:	1f ef       	ldi	r17, 0xFF	; 255
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    5564:	80 91 f9 04 	lds	r24, 0x04F9
    5568:	90 91 fa 04 	lds	r25, 0x04FA
    556c:	8c 17       	cp	r24, r28
    556e:	9d 07       	cpc	r25, r29
    5570:	44 f0       	brlt	.+16     	; 0x5582 <getRightSpeedFromInput+0x210>
    
    return temp;
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {
    5572:	81 e0       	ldi	r24, 0x01	; 1
    5574:	9f ef       	ldi	r25, 0xFF	; 255
    5576:	0f 3f       	cpi	r16, 0xFF	; 255
    5578:	19 07       	cpc	r17, r25
    557a:	09 f0       	breq	.+2      	; 0x557e <getRightSpeedFromInput+0x20c>
    557c:	80 e0       	ldi	r24, 0x00	; 0
    557e:	08 2f       	mov	r16, r24
    5580:	10 e0       	ldi	r17, 0x00	; 0
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    5582:	80 91 09 05 	lds	r24, 0x0509
    5586:	90 91 0a 05 	lds	r25, 0x050A
    558a:	8c 17       	cp	r24, r28
    558c:	9d 07       	cpc	r25, r29
    558e:	2c f0       	brlt	.+10     	; 0x559a <getRightSpeedFromInput+0x228>
    5590:	8f ef       	ldi	r24, 0xFF	; 255
    5592:	0f 3f       	cpi	r16, 0xFF	; 255
    5594:	18 07       	cpc	r17, r24
    5596:	09 f4       	brne	.+2      	; 0x559a <getRightSpeedFromInput+0x228>
    5598:	19 c1       	rjmp	.+562    	; 0x57cc <getRightSpeedFromInput+0x45a>
    559a:	80 91 19 05 	lds	r24, 0x0519
    559e:	90 91 1a 05 	lds	r25, 0x051A
    55a2:	8c 17       	cp	r24, r28
    55a4:	9d 07       	cpc	r25, r29
    55a6:	2c f0       	brlt	.+10     	; 0x55b2 <getRightSpeedFromInput+0x240>
    55a8:	9f ef       	ldi	r25, 0xFF	; 255
    55aa:	0f 3f       	cpi	r16, 0xFF	; 255
    55ac:	19 07       	cpc	r17, r25
    55ae:	09 f4       	brne	.+2      	; 0x55b2 <getRightSpeedFromInput+0x240>
    55b0:	0a c1       	rjmp	.+532    	; 0x57c6 <getRightSpeedFromInput+0x454>
    55b2:	80 91 29 05 	lds	r24, 0x0529
    55b6:	90 91 2a 05 	lds	r25, 0x052A
    55ba:	8c 17       	cp	r24, r28
    55bc:	9d 07       	cpc	r25, r29
    55be:	2c f0       	brlt	.+10     	; 0x55ca <getRightSpeedFromInput+0x258>
    55c0:	8f ef       	ldi	r24, 0xFF	; 255
    55c2:	0f 3f       	cpi	r16, 0xFF	; 255
    55c4:	18 07       	cpc	r17, r24
    55c6:	09 f4       	brne	.+2      	; 0x55ca <getRightSpeedFromInput+0x258>
    55c8:	fb c0       	rjmp	.+502    	; 0x57c0 <getRightSpeedFromInput+0x44e>
    55ca:	80 91 39 05 	lds	r24, 0x0539
    55ce:	90 91 3a 05 	lds	r25, 0x053A
    55d2:	8c 17       	cp	r24, r28
    55d4:	9d 07       	cpc	r25, r29
    55d6:	2c f0       	brlt	.+10     	; 0x55e2 <getRightSpeedFromInput+0x270>
    55d8:	9f ef       	ldi	r25, 0xFF	; 255
    55da:	0f 3f       	cpi	r16, 0xFF	; 255
    55dc:	19 07       	cpc	r17, r25
    55de:	09 f4       	brne	.+2      	; 0x55e2 <getRightSpeedFromInput+0x270>
    55e0:	ec c0       	rjmp	.+472    	; 0x57ba <getRightSpeedFromInput+0x448>
    55e2:	80 91 49 05 	lds	r24, 0x0549
    55e6:	90 91 4a 05 	lds	r25, 0x054A
    55ea:	8c 17       	cp	r24, r28
    55ec:	9d 07       	cpc	r25, r29
    55ee:	2c f0       	brlt	.+10     	; 0x55fa <getRightSpeedFromInput+0x288>
    55f0:	8f ef       	ldi	r24, 0xFF	; 255
    55f2:	0f 3f       	cpi	r16, 0xFF	; 255
    55f4:	18 07       	cpc	r17, r24
    55f6:	09 f4       	brne	.+2      	; 0x55fa <getRightSpeedFromInput+0x288>
    55f8:	dd c0       	rjmp	.+442    	; 0x57b4 <getRightSpeedFromInput+0x442>
    55fa:	80 91 59 05 	lds	r24, 0x0559
    55fe:	90 91 5a 05 	lds	r25, 0x055A
    5602:	8c 17       	cp	r24, r28
    5604:	9d 07       	cpc	r25, r29
    5606:	2c f0       	brlt	.+10     	; 0x5612 <getRightSpeedFromInput+0x2a0>
    5608:	9f ef       	ldi	r25, 0xFF	; 255
    560a:	0f 3f       	cpi	r16, 0xFF	; 255
    560c:	19 07       	cpc	r17, r25
    560e:	09 f4       	brne	.+2      	; 0x5612 <getRightSpeedFromInput+0x2a0>
    5610:	ce c0       	rjmp	.+412    	; 0x57ae <getRightSpeedFromInput+0x43c>
    5612:	e0 90 69 05 	lds	r14, 0x0569
    5616:	f0 90 6a 05 	lds	r15, 0x056A
    561a:	ec 16       	cp	r14, r28
    561c:	fd 06       	cpc	r15, r29
    561e:	2c f0       	brlt	.+10     	; 0x562a <getRightSpeedFromInput+0x2b8>
    5620:	8f ef       	ldi	r24, 0xFF	; 255
    5622:	0f 3f       	cpi	r16, 0xFF	; 255
    5624:	18 07       	cpc	r17, r24
    5626:	09 f4       	brne	.+2      	; 0x562a <getRightSpeedFromInput+0x2b8>
    5628:	bf c0       	rjmp	.+382    	; 0x57a8 <getRightSpeedFromInput+0x436>
            } else {
                speedRightFromEnc = calibration[indFwR-1][3] + (signed int)(((float)(last_right_vel-calibration[indFwR-1][2])*(float)(calibration[indFwR][3]-calibration[indFwR-1][3]))/(float)(calibration[indFwR][2]-calibration[indFwR-1][2]));
            }
        }
    } else {
		if(indBwR==0) {  // the velocity is lower than first saved in the matrix
    562a:	01 15       	cp	r16, r1
    562c:	11 05       	cpc	r17, r1
    562e:	09 f0       	breq	.+2      	; 0x5632 <getRightSpeedFromInput+0x2c0>
    5630:	6e c0       	rjmp	.+220    	; 0x570e <getRightSpeedFromInput+0x39c>
        	speedRightFromEnc = (last_right_vel*calibration[0][7])/calibration[0][6];
    5632:	20 91 eb 04 	lds	r18, 0x04EB
    5636:	30 91 ec 04 	lds	r19, 0x04EC
    563a:	c2 9f       	mul	r28, r18
    563c:	c0 01       	movw	r24, r0
    563e:	c3 9f       	mul	r28, r19
    5640:	90 0d       	add	r25, r0
    5642:	d2 9f       	mul	r29, r18
    5644:	90 0d       	add	r25, r0
    5646:	11 24       	eor	r1, r1
    5648:	0e 94 6d 42 	call	0x84da	; 0x84da <__divmodhi4>
		} else if(indBwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][7]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][6]);  // take the max
		} else {
        	speedRightFromEnc = calibration[indBwR-1][7] + (signed int)(((float)(last_right_vel-calibration[indBwR-1][6])*(float)(calibration[indBwR][7]-calibration[indBwR-1][7]))/(float)(calibration[indBwR][6]-calibration[indBwR-1][6]));
		}
		speedRightFromEnc = -speedRightFromEnc;
    564c:	70 95       	com	r23
    564e:	61 95       	neg	r22
    5650:	7f 4f       	sbci	r23, 0xFF	; 255
    5652:	70 93 b7 04 	sts	0x04B7, r23
    5656:	60 93 b6 04 	sts	0x04B6, r22
    565a:	6d cf       	rjmp	.-294    	; 0x5536 <getRightSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    565c:	00 e0       	ldi	r16, 0x00	; 0
    565e:	10 e0       	ldi	r17, 0x00	; 0
    5660:	81 cf       	rjmp	.-254    	; 0x5564 <getRightSpeedFromInput+0x1f2>
            speedRightFromEnc = 0;
        } else {
            if(indFwR==0) {  // the velocity is lower than first saved in the matrix
                speedRightFromEnc = (last_right_vel*calibration[0][3])/calibration[0][2];
            } else if(indFwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
                speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][3]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][2]);  // take the max
    5662:	60 91 63 05 	lds	r22, 0x0563
    5666:	70 91 64 05 	lds	r23, 0x0564
    566a:	88 27       	eor	r24, r24
    566c:	77 fd       	sbrc	r23, 7
    566e:	80 95       	com	r24
    5670:	98 2f       	mov	r25, r24
    5672:	0e 94 9a 40 	call	0x8134	; 0x8134 <__floatsisf>
    5676:	5b 01       	movw	r10, r22
    5678:	6c 01       	movw	r12, r24
    567a:	be 01       	movw	r22, r28
    567c:	88 27       	eor	r24, r24
    567e:	77 fd       	sbrc	r23, 7
    5680:	80 95       	com	r24
    5682:	98 2f       	mov	r25, r24
    5684:	0e 94 9a 40 	call	0x8134	; 0x8134 <__floatsisf>
    5688:	9b 01       	movw	r18, r22
    568a:	ac 01       	movw	r20, r24
    568c:	c6 01       	movw	r24, r12
    568e:	b5 01       	movw	r22, r10
    5690:	0e 94 af 41 	call	0x835e	; 0x835e <__mulsf3>
    5694:	5b 01       	movw	r10, r22
    5696:	6c 01       	movw	r12, r24
    5698:	b7 01       	movw	r22, r14
    569a:	88 27       	eor	r24, r24
    569c:	77 fd       	sbrc	r23, 7
    569e:	80 95       	com	r24
    56a0:	98 2f       	mov	r25, r24
    56a2:	0e 94 9a 40 	call	0x8134	; 0x8134 <__floatsisf>
    56a6:	9b 01       	movw	r18, r22
    56a8:	ac 01       	movw	r20, r24
    56aa:	c6 01       	movw	r24, r12
    56ac:	b5 01       	movw	r22, r10
    56ae:	0e 94 ff 3f 	call	0x7ffe	; 0x7ffe <__divsf3>
    56b2:	0e 94 67 40 	call	0x80ce	; 0x80ce <__fixsfsi>
    56b6:	70 93 b7 04 	sts	0x04B7, r23
    56ba:	60 93 b6 04 	sts	0x04B6, r22
    56be:	3b cf       	rjmp	.-394    	; 0x5536 <getRightSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    56c0:	02 e0       	ldi	r16, 0x02	; 2
    56c2:	10 e0       	ldi	r17, 0x00	; 0
    56c4:	91 ce       	rjmp	.-734    	; 0x53e8 <getRightSpeedFromInput+0x76>
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    56c6:	08 e0       	ldi	r16, 0x08	; 8
    56c8:	10 e0       	ldi	r17, 0x00	; 0
    56ca:	d6 ce       	rjmp	.-596    	; 0x5478 <getRightSpeedFromInput+0x106>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    56cc:	07 e0       	ldi	r16, 0x07	; 7
    56ce:	10 e0       	ldi	r17, 0x00	; 0
    56d0:	c7 ce       	rjmp	.-626    	; 0x5460 <getRightSpeedFromInput+0xee>
    56d2:	06 e0       	ldi	r16, 0x06	; 6
    56d4:	10 e0       	ldi	r17, 0x00	; 0
    56d6:	b8 ce       	rjmp	.-656    	; 0x5448 <getRightSpeedFromInput+0xd6>
    56d8:	05 e0       	ldi	r16, 0x05	; 5
    56da:	10 e0       	ldi	r17, 0x00	; 0
    56dc:	a9 ce       	rjmp	.-686    	; 0x5430 <getRightSpeedFromInput+0xbe>
    56de:	04 e0       	ldi	r16, 0x04	; 4
    56e0:	10 e0       	ldi	r17, 0x00	; 0
    56e2:	9a ce       	rjmp	.-716    	; 0x5418 <getRightSpeedFromInput+0xa6>
    56e4:	03 e0       	ldi	r16, 0x03	; 3
    56e6:	10 e0       	ldi	r17, 0x00	; 0
    56e8:	8b ce       	rjmp	.-746    	; 0x5400 <getRightSpeedFromInput+0x8e>
    if(pwm_right >= 0) {
        if(last_right_vel == 0) {
            speedRightFromEnc = 0;
        } else {
            if(indFwR==0) {  // the velocity is lower than first saved in the matrix
                speedRightFromEnc = (last_right_vel*calibration[0][3])/calibration[0][2];
    56ea:	20 91 e3 04 	lds	r18, 0x04E3
    56ee:	30 91 e4 04 	lds	r19, 0x04E4
    56f2:	c2 9f       	mul	r28, r18
    56f4:	c0 01       	movw	r24, r0
    56f6:	c3 9f       	mul	r28, r19
    56f8:	90 0d       	add	r25, r0
    56fa:	d2 9f       	mul	r29, r18
    56fc:	90 0d       	add	r25, r0
    56fe:	11 24       	eor	r1, r1
    5700:	0e 94 6d 42 	call	0x84da	; 0x84da <__divmodhi4>
    5704:	70 93 b7 04 	sts	0x04B7, r23
    5708:	60 93 b6 04 	sts	0x04B6, r22
    570c:	14 cf       	rjmp	.-472    	; 0x5536 <getRightSpeedFromInput+0x1c4>
            }
        }
    } else {
		if(indBwR==0) {  // the velocity is lower than first saved in the matrix
        	speedRightFromEnc = (last_right_vel*calibration[0][7])/calibration[0][6];
		} else if(indBwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    570e:	8f ef       	ldi	r24, 0xFF	; 255
    5710:	0f 3f       	cpi	r16, 0xFF	; 255
    5712:	18 07       	cpc	r17, r24
    5714:	09 f4       	brne	.+2      	; 0x5718 <getRightSpeedFromInput+0x3a6>
    5716:	5d c0       	rjmp	.+186    	; 0x57d2 <getRightSpeedFromInput+0x460>
        	speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][7]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][6]);  // take the max
		} else {
        	speedRightFromEnc = calibration[indBwR-1][7] + (signed int)(((float)(last_right_vel-calibration[indBwR-1][6])*(float)(calibration[indBwR][7]-calibration[indBwR-1][7]))/(float)(calibration[indBwR][6]-calibration[indBwR-1][6]));
    5718:	f8 01       	movw	r30, r16
    571a:	e2 95       	swap	r30
    571c:	f2 95       	swap	r31
    571e:	f0 7f       	andi	r31, 0xF0	; 240
    5720:	fe 27       	eor	r31, r30
    5722:	e0 7f       	andi	r30, 0xF0	; 240
    5724:	fe 27       	eor	r31, r30
    5726:	e3 53       	subi	r30, 0x33	; 51
    5728:	fb 4f       	sbci	r31, 0xFB	; 251
    572a:	a4 84       	ldd	r10, Z+12	; 0x0c
    572c:	b5 84       	ldd	r11, Z+13	; 0x0d
    572e:	86 84       	ldd	r8, Z+14	; 0x0e
    5730:	97 84       	ldd	r9, Z+15	; 0x0f
    5732:	ca 19       	sub	r28, r10
    5734:	db 09       	sbc	r29, r11
    5736:	be 01       	movw	r22, r28
    5738:	88 27       	eor	r24, r24
    573a:	77 fd       	sbrc	r23, 7
    573c:	80 95       	com	r24
    573e:	98 2f       	mov	r25, r24
    5740:	0e 94 9a 40 	call	0x8134	; 0x8134 <__floatsisf>
    5744:	6b 01       	movw	r12, r22
    5746:	7c 01       	movw	r14, r24
    5748:	e8 01       	movw	r28, r16
    574a:	c2 95       	swap	r28
    574c:	d2 95       	swap	r29
    574e:	d0 7f       	andi	r29, 0xF0	; 240
    5750:	dc 27       	eor	r29, r28
    5752:	c0 7f       	andi	r28, 0xF0	; 240
    5754:	dc 27       	eor	r29, r28
    5756:	c3 52       	subi	r28, 0x23	; 35
    5758:	db 4f       	sbci	r29, 0xFB	; 251
    575a:	6e 85       	ldd	r22, Y+14	; 0x0e
    575c:	7f 85       	ldd	r23, Y+15	; 0x0f
    575e:	68 19       	sub	r22, r8
    5760:	79 09       	sbc	r23, r9
    5762:	88 27       	eor	r24, r24
    5764:	77 fd       	sbrc	r23, 7
    5766:	80 95       	com	r24
    5768:	98 2f       	mov	r25, r24
    576a:	0e 94 9a 40 	call	0x8134	; 0x8134 <__floatsisf>
    576e:	9b 01       	movw	r18, r22
    5770:	ac 01       	movw	r20, r24
    5772:	c7 01       	movw	r24, r14
    5774:	b6 01       	movw	r22, r12
    5776:	0e 94 af 41 	call	0x835e	; 0x835e <__mulsf3>
    577a:	7b 01       	movw	r14, r22
    577c:	8c 01       	movw	r16, r24
    577e:	6c 85       	ldd	r22, Y+12	; 0x0c
    5780:	7d 85       	ldd	r23, Y+13	; 0x0d
    5782:	6a 19       	sub	r22, r10
    5784:	7b 09       	sbc	r23, r11
    5786:	88 27       	eor	r24, r24
    5788:	77 fd       	sbrc	r23, 7
    578a:	80 95       	com	r24
    578c:	98 2f       	mov	r25, r24
    578e:	0e 94 9a 40 	call	0x8134	; 0x8134 <__floatsisf>
    5792:	9b 01       	movw	r18, r22
    5794:	ac 01       	movw	r20, r24
    5796:	c8 01       	movw	r24, r16
    5798:	b7 01       	movw	r22, r14
    579a:	0e 94 ff 3f 	call	0x7ffe	; 0x7ffe <__divsf3>
    579e:	0e 94 67 40 	call	0x80ce	; 0x80ce <__fixsfsi>
    57a2:	68 0d       	add	r22, r8
    57a4:	79 1d       	adc	r23, r9
    57a6:	52 cf       	rjmp	.-348    	; 0x564c <getRightSpeedFromInput+0x2da>
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    57a8:	08 e0       	ldi	r16, 0x08	; 8
    57aa:	10 e0       	ldi	r17, 0x00	; 0
    57ac:	3e cf       	rjmp	.-388    	; 0x562a <getRightSpeedFromInput+0x2b8>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    57ae:	07 e0       	ldi	r16, 0x07	; 7
    57b0:	10 e0       	ldi	r17, 0x00	; 0
    57b2:	2f cf       	rjmp	.-418    	; 0x5612 <getRightSpeedFromInput+0x2a0>
    57b4:	06 e0       	ldi	r16, 0x06	; 6
    57b6:	10 e0       	ldi	r17, 0x00	; 0
    57b8:	20 cf       	rjmp	.-448    	; 0x55fa <getRightSpeedFromInput+0x288>
    57ba:	05 e0       	ldi	r16, 0x05	; 5
    57bc:	10 e0       	ldi	r17, 0x00	; 0
    57be:	11 cf       	rjmp	.-478    	; 0x55e2 <getRightSpeedFromInput+0x270>
    57c0:	04 e0       	ldi	r16, 0x04	; 4
    57c2:	10 e0       	ldi	r17, 0x00	; 0
    57c4:	02 cf       	rjmp	.-508    	; 0x55ca <getRightSpeedFromInput+0x258>
    57c6:	03 e0       	ldi	r16, 0x03	; 3
    57c8:	10 e0       	ldi	r17, 0x00	; 0
    57ca:	f3 ce       	rjmp	.-538    	; 0x55b2 <getRightSpeedFromInput+0x240>
    57cc:	02 e0       	ldi	r16, 0x02	; 2
    57ce:	10 e0       	ldi	r17, 0x00	; 0
    57d0:	e4 ce       	rjmp	.-568    	; 0x559a <getRightSpeedFromInput+0x228>
        }
    } else {
		if(indBwR==0) {  // the velocity is lower than first saved in the matrix
        	speedRightFromEnc = (last_right_vel*calibration[0][7])/calibration[0][6];
		} else if(indBwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][7]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][6]);  // take the max
    57d2:	60 91 6b 05 	lds	r22, 0x056B
    57d6:	70 91 6c 05 	lds	r23, 0x056C
    57da:	88 27       	eor	r24, r24
    57dc:	77 fd       	sbrc	r23, 7
    57de:	80 95       	com	r24
    57e0:	98 2f       	mov	r25, r24
    57e2:	0e 94 9a 40 	call	0x8134	; 0x8134 <__floatsisf>
    57e6:	5b 01       	movw	r10, r22
    57e8:	6c 01       	movw	r12, r24
    57ea:	be 01       	movw	r22, r28
    57ec:	88 27       	eor	r24, r24
    57ee:	77 fd       	sbrc	r23, 7
    57f0:	80 95       	com	r24
    57f2:	98 2f       	mov	r25, r24
    57f4:	0e 94 9a 40 	call	0x8134	; 0x8134 <__floatsisf>
    57f8:	9b 01       	movw	r18, r22
    57fa:	ac 01       	movw	r20, r24
    57fc:	c6 01       	movw	r24, r12
    57fe:	b5 01       	movw	r22, r10
    5800:	0e 94 af 41 	call	0x835e	; 0x835e <__mulsf3>
    5804:	5b 01       	movw	r10, r22
    5806:	6c 01       	movw	r12, r24
    5808:	b7 01       	movw	r22, r14
    580a:	88 27       	eor	r24, r24
    580c:	77 fd       	sbrc	r23, 7
    580e:	80 95       	com	r24
    5810:	98 2f       	mov	r25, r24
    5812:	0e 94 9a 40 	call	0x8134	; 0x8134 <__floatsisf>
    5816:	9b 01       	movw	r18, r22
    5818:	ac 01       	movw	r20, r24
    581a:	c6 01       	movw	r24, r12
    581c:	b5 01       	movw	r22, r10
    581e:	0e 94 ff 3f 	call	0x7ffe	; 0x7ffe <__divsf3>
    5822:	0e 94 67 40 	call	0x80ce	; 0x80ce <__fixsfsi>
    5826:	12 cf       	rjmp	.-476    	; 0x564c <getRightSpeedFromInput+0x2da>

00005828 <getLeftSpeedFromInput>:
    }
    
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {
    5828:	8f 92       	push	r8
    582a:	9f 92       	push	r9
    582c:	af 92       	push	r10
    582e:	bf 92       	push	r11
    5830:	cf 92       	push	r12
    5832:	df 92       	push	r13
    5834:	ef 92       	push	r14
    5836:	ff 92       	push	r15
    5838:	0f 93       	push	r16
    583a:	1f 93       	push	r17
    583c:	cf 93       	push	r28
    583e:	df 93       	push	r29

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    5840:	c0 91 ef 02 	lds	r28, 0x02EF
    5844:	d0 91 f0 02 	lds	r29, 0x02F0
    5848:	80 91 f5 02 	lds	r24, 0x02F5
    584c:	90 91 f6 02 	lds	r25, 0x02F6
    5850:	97 fd       	sbrc	r25, 7
    5852:	d9 c0       	rjmp	.+434    	; 0x5a06 <getLeftSpeedFromInput+0x1de>
    5854:	60 91 dd 04 	lds	r22, 0x04DD
    5858:	70 91 de 04 	lds	r23, 0x04DE
    585c:	6c 17       	cp	r22, r28
    585e:	7d 07       	cpc	r23, r29
    5860:	0c f0       	brlt	.+2      	; 0x5864 <getLeftSpeedFromInput+0x3c>
    5862:	bd c0       	rjmp	.+378    	; 0x59de <getLeftSpeedFromInput+0x1b6>
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    5864:	0f ef       	ldi	r16, 0xFF	; 255
    5866:	1f ef       	ldi	r17, 0xFF	; 255
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    5868:	80 91 ed 04 	lds	r24, 0x04ED
    586c:	90 91 ee 04 	lds	r25, 0x04EE
    5870:	8c 17       	cp	r24, r28
    5872:	9d 07       	cpc	r25, r29
    5874:	44 f0       	brlt	.+16     	; 0x5886 <getLeftSpeedFromInput+0x5e>
    }
    
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {
    5876:	81 e0       	ldi	r24, 0x01	; 1
    5878:	9f ef       	ldi	r25, 0xFF	; 255
    587a:	0f 3f       	cpi	r16, 0xFF	; 255
    587c:	19 07       	cpc	r17, r25
    587e:	09 f0       	breq	.+2      	; 0x5882 <getLeftSpeedFromInput+0x5a>
    5880:	80 e0       	ldi	r24, 0x00	; 0
    5882:	08 2f       	mov	r16, r24
    5884:	10 e0       	ldi	r17, 0x00	; 0

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    5886:	80 91 fd 04 	lds	r24, 0x04FD
    588a:	90 91 fe 04 	lds	r25, 0x04FE
    588e:	8c 17       	cp	r24, r28
    5890:	9d 07       	cpc	r25, r29
    5892:	2c f0       	brlt	.+10     	; 0x589e <getLeftSpeedFromInput+0x76>
    5894:	8f ef       	ldi	r24, 0xFF	; 255
    5896:	0f 3f       	cpi	r16, 0xFF	; 255
    5898:	18 07       	cpc	r17, r24
    589a:	09 f4       	brne	.+2      	; 0x589e <getLeftSpeedFromInput+0x76>
    589c:	6c c1       	rjmp	.+728    	; 0x5b76 <getLeftSpeedFromInput+0x34e>
    589e:	80 91 0d 05 	lds	r24, 0x050D
    58a2:	90 91 0e 05 	lds	r25, 0x050E
    58a6:	8c 17       	cp	r24, r28
    58a8:	9d 07       	cpc	r25, r29
    58aa:	2c f0       	brlt	.+10     	; 0x58b6 <getLeftSpeedFromInput+0x8e>
    58ac:	9f ef       	ldi	r25, 0xFF	; 255
    58ae:	0f 3f       	cpi	r16, 0xFF	; 255
    58b0:	19 07       	cpc	r17, r25
    58b2:	09 f4       	brne	.+2      	; 0x58b6 <getLeftSpeedFromInput+0x8e>
    58b4:	72 c1       	rjmp	.+740    	; 0x5b9a <getLeftSpeedFromInput+0x372>
    58b6:	80 91 1d 05 	lds	r24, 0x051D
    58ba:	90 91 1e 05 	lds	r25, 0x051E
    58be:	8c 17       	cp	r24, r28
    58c0:	9d 07       	cpc	r25, r29
    58c2:	2c f0       	brlt	.+10     	; 0x58ce <getLeftSpeedFromInput+0xa6>
    58c4:	8f ef       	ldi	r24, 0xFF	; 255
    58c6:	0f 3f       	cpi	r16, 0xFF	; 255
    58c8:	18 07       	cpc	r17, r24
    58ca:	09 f4       	brne	.+2      	; 0x58ce <getLeftSpeedFromInput+0xa6>
    58cc:	63 c1       	rjmp	.+710    	; 0x5b94 <getLeftSpeedFromInput+0x36c>
    58ce:	80 91 2d 05 	lds	r24, 0x052D
    58d2:	90 91 2e 05 	lds	r25, 0x052E
    58d6:	8c 17       	cp	r24, r28
    58d8:	9d 07       	cpc	r25, r29
    58da:	2c f0       	brlt	.+10     	; 0x58e6 <getLeftSpeedFromInput+0xbe>
    58dc:	9f ef       	ldi	r25, 0xFF	; 255
    58de:	0f 3f       	cpi	r16, 0xFF	; 255
    58e0:	19 07       	cpc	r17, r25
    58e2:	09 f4       	brne	.+2      	; 0x58e6 <getLeftSpeedFromInput+0xbe>
    58e4:	54 c1       	rjmp	.+680    	; 0x5b8e <getLeftSpeedFromInput+0x366>
    58e6:	80 91 3d 05 	lds	r24, 0x053D
    58ea:	90 91 3e 05 	lds	r25, 0x053E
    58ee:	8c 17       	cp	r24, r28
    58f0:	9d 07       	cpc	r25, r29
    58f2:	2c f0       	brlt	.+10     	; 0x58fe <getLeftSpeedFromInput+0xd6>
    58f4:	8f ef       	ldi	r24, 0xFF	; 255
    58f6:	0f 3f       	cpi	r16, 0xFF	; 255
    58f8:	18 07       	cpc	r17, r24
    58fa:	09 f4       	brne	.+2      	; 0x58fe <getLeftSpeedFromInput+0xd6>
    58fc:	45 c1       	rjmp	.+650    	; 0x5b88 <getLeftSpeedFromInput+0x360>
    58fe:	80 91 4d 05 	lds	r24, 0x054D
    5902:	90 91 4e 05 	lds	r25, 0x054E
    5906:	8c 17       	cp	r24, r28
    5908:	9d 07       	cpc	r25, r29
    590a:	2c f0       	brlt	.+10     	; 0x5916 <getLeftSpeedFromInput+0xee>
    590c:	9f ef       	ldi	r25, 0xFF	; 255
    590e:	0f 3f       	cpi	r16, 0xFF	; 255
    5910:	19 07       	cpc	r17, r25
    5912:	09 f4       	brne	.+2      	; 0x5916 <getLeftSpeedFromInput+0xee>
    5914:	36 c1       	rjmp	.+620    	; 0x5b82 <getLeftSpeedFromInput+0x35a>
    5916:	e0 90 5d 05 	lds	r14, 0x055D
    591a:	f0 90 5e 05 	lds	r15, 0x055E
    591e:	ec 16       	cp	r14, r28
    5920:	fd 06       	cpc	r15, r29
    5922:	2c f0       	brlt	.+10     	; 0x592e <getLeftSpeedFromInput+0x106>
    5924:	8f ef       	ldi	r24, 0xFF	; 255
    5926:	0f 3f       	cpi	r16, 0xFF	; 255
    5928:	18 07       	cpc	r17, r24
    592a:	09 f4       	brne	.+2      	; 0x592e <getLeftSpeedFromInput+0x106>
    592c:	27 c1       	rjmp	.+590    	; 0x5b7c <getLeftSpeedFromInput+0x354>
			}
		}     
    }

    if(pwm_left >= 0) {
        if(last_left_vel == 0) {
    592e:	20 97       	sbiw	r28, 0x00	; 0
    5930:	09 f4       	brne	.+2      	; 0x5934 <getLeftSpeedFromInput+0x10c>
    5932:	58 c0       	rjmp	.+176    	; 0x59e4 <getLeftSpeedFromInput+0x1bc>
            speedLeftFromEnc = 0;
        } else {
            if(indFwL==0) {  // the velocity is lower than first saved in the matrix
    5934:	01 15       	cp	r16, r1
    5936:	11 05       	cpc	r17, r1
    5938:	09 f4       	brne	.+2      	; 0x593c <getLeftSpeedFromInput+0x114>
    593a:	32 c1       	rjmp	.+612    	; 0x5ba0 <getLeftSpeedFromInput+0x378>
                speedLeftFromEnc = (last_left_vel*calibration[0][1])/calibration[0][0];
            } else if(indFwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    593c:	9f ef       	ldi	r25, 0xFF	; 255
    593e:	0f 3f       	cpi	r16, 0xFF	; 255
    5940:	19 07       	cpc	r17, r25
    5942:	09 f4       	brne	.+2      	; 0x5946 <getLeftSpeedFromInput+0x11e>
    5944:	e9 c0       	rjmp	.+466    	; 0x5b18 <getLeftSpeedFromInput+0x2f0>
                speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][1]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][0]);  // take the max
            } else {
                speedLeftFromEnc = calibration[indFwL-1][1] + (signed int)(((float)(last_left_vel-calibration[indFwL-1][0])*(float)(calibration[indFwL][1]-calibration[indFwL-1][1]))/(float)(calibration[indFwL][0]-calibration[indFwL-1][0]));
    5946:	f8 01       	movw	r30, r16
    5948:	e2 95       	swap	r30
    594a:	f2 95       	swap	r31
    594c:	f0 7f       	andi	r31, 0xF0	; 240
    594e:	fe 27       	eor	r31, r30
    5950:	e0 7f       	andi	r30, 0xF0	; 240
    5952:	fe 27       	eor	r31, r30
    5954:	e3 53       	subi	r30, 0x33	; 51
    5956:	fb 4f       	sbci	r31, 0xFB	; 251
    5958:	a0 80       	ld	r10, Z
    595a:	b1 80       	ldd	r11, Z+1	; 0x01
    595c:	82 80       	ldd	r8, Z+2	; 0x02
    595e:	93 80       	ldd	r9, Z+3	; 0x03
    5960:	ca 19       	sub	r28, r10
    5962:	db 09       	sbc	r29, r11
    5964:	be 01       	movw	r22, r28
    5966:	88 27       	eor	r24, r24
    5968:	77 fd       	sbrc	r23, 7
    596a:	80 95       	com	r24
    596c:	98 2f       	mov	r25, r24
    596e:	0e 94 9a 40 	call	0x8134	; 0x8134 <__floatsisf>
    5972:	6b 01       	movw	r12, r22
    5974:	7c 01       	movw	r14, r24
    5976:	e8 01       	movw	r28, r16
    5978:	c2 95       	swap	r28
    597a:	d2 95       	swap	r29
    597c:	d0 7f       	andi	r29, 0xF0	; 240
    597e:	dc 27       	eor	r29, r28
    5980:	c0 7f       	andi	r28, 0xF0	; 240
    5982:	dc 27       	eor	r29, r28
    5984:	c3 52       	subi	r28, 0x23	; 35
    5986:	db 4f       	sbci	r29, 0xFB	; 251
    5988:	6a 81       	ldd	r22, Y+2	; 0x02
    598a:	7b 81       	ldd	r23, Y+3	; 0x03
    598c:	68 19       	sub	r22, r8
    598e:	79 09       	sbc	r23, r9
    5990:	88 27       	eor	r24, r24
    5992:	77 fd       	sbrc	r23, 7
    5994:	80 95       	com	r24
    5996:	98 2f       	mov	r25, r24
    5998:	0e 94 9a 40 	call	0x8134	; 0x8134 <__floatsisf>
    599c:	9b 01       	movw	r18, r22
    599e:	ac 01       	movw	r20, r24
    59a0:	c7 01       	movw	r24, r14
    59a2:	b6 01       	movw	r22, r12
    59a4:	0e 94 af 41 	call	0x835e	; 0x835e <__mulsf3>
    59a8:	7b 01       	movw	r14, r22
    59aa:	8c 01       	movw	r16, r24
    59ac:	68 81       	ld	r22, Y
    59ae:	79 81       	ldd	r23, Y+1	; 0x01
    59b0:	6a 19       	sub	r22, r10
    59b2:	7b 09       	sbc	r23, r11
    59b4:	88 27       	eor	r24, r24
    59b6:	77 fd       	sbrc	r23, 7
    59b8:	80 95       	com	r24
    59ba:	98 2f       	mov	r25, r24
    59bc:	0e 94 9a 40 	call	0x8134	; 0x8134 <__floatsisf>
    59c0:	9b 01       	movw	r18, r22
    59c2:	ac 01       	movw	r20, r24
    59c4:	c8 01       	movw	r24, r16
    59c6:	b7 01       	movw	r22, r14
    59c8:	0e 94 ff 3f 	call	0x7ffe	; 0x7ffe <__divsf3>
    59cc:	0e 94 67 40 	call	0x80ce	; 0x80ce <__fixsfsi>
    59d0:	68 0d       	add	r22, r8
    59d2:	79 1d       	adc	r23, r9
    59d4:	70 93 b5 04 	sts	0x04B5, r23
    59d8:	60 93 b4 04 	sts	0x04B4, r22
    59dc:	07 c0       	rjmp	.+14     	; 0x59ec <getLeftSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    59de:	00 e0       	ldi	r16, 0x00	; 0
    59e0:	10 e0       	ldi	r17, 0x00	; 0
    59e2:	42 cf       	rjmp	.-380    	; 0x5868 <getLeftSpeedFromInput+0x40>
		}     
    }

    if(pwm_left >= 0) {
        if(last_left_vel == 0) {
            speedLeftFromEnc = 0;
    59e4:	10 92 b5 04 	sts	0x04B5, r1
    59e8:	10 92 b4 04 	sts	0x04B4, r1
        	speedLeftFromEnc = calibration[indBwL-1][5] + (signed int)(((float)(last_left_vel-calibration[indBwL-1][4])*(float)(calibration[indBwL][5]-calibration[indBwL-1][5]))/(float)(calibration[indBwL][4]-calibration[indBwL-1][4]));
		}
		speedLeftFromEnc = -speedLeftFromEnc;
    }
    
}
    59ec:	df 91       	pop	r29
    59ee:	cf 91       	pop	r28
    59f0:	1f 91       	pop	r17
    59f2:	0f 91       	pop	r16
    59f4:	ff 90       	pop	r15
    59f6:	ef 90       	pop	r14
    59f8:	df 90       	pop	r13
    59fa:	cf 90       	pop	r12
    59fc:	bf 90       	pop	r11
    59fe:	af 90       	pop	r10
    5a00:	9f 90       	pop	r9
    5a02:	8f 90       	pop	r8
    5a04:	08 95       	ret
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    5a06:	60 91 e5 04 	lds	r22, 0x04E5
    5a0a:	70 91 e6 04 	lds	r23, 0x04E6
    5a0e:	6c 17       	cp	r22, r28
    5a10:	7d 07       	cpc	r23, r29
    5a12:	0c f0       	brlt	.+2      	; 0x5a16 <getLeftSpeedFromInput+0x1ee>
    5a14:	7e c0       	rjmp	.+252    	; 0x5b12 <getLeftSpeedFromInput+0x2ea>
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    5a16:	0f ef       	ldi	r16, 0xFF	; 255
    5a18:	1f ef       	ldi	r17, 0xFF	; 255
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    5a1a:	80 91 f5 04 	lds	r24, 0x04F5
    5a1e:	90 91 f6 04 	lds	r25, 0x04F6
    5a22:	8c 17       	cp	r24, r28
    5a24:	9d 07       	cpc	r25, r29
    5a26:	44 f0       	brlt	.+16     	; 0x5a38 <getLeftSpeedFromInput+0x210>
    }
    
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {
    5a28:	81 e0       	ldi	r24, 0x01	; 1
    5a2a:	9f ef       	ldi	r25, 0xFF	; 255
    5a2c:	0f 3f       	cpi	r16, 0xFF	; 255
    5a2e:	19 07       	cpc	r17, r25
    5a30:	09 f0       	breq	.+2      	; 0x5a34 <getLeftSpeedFromInput+0x20c>
    5a32:	80 e0       	ldi	r24, 0x00	; 0
    5a34:	08 2f       	mov	r16, r24
    5a36:	10 e0       	ldi	r17, 0x00	; 0
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    5a38:	80 91 05 05 	lds	r24, 0x0505
    5a3c:	90 91 06 05 	lds	r25, 0x0506
    5a40:	8c 17       	cp	r24, r28
    5a42:	9d 07       	cpc	r25, r29
    5a44:	2c f0       	brlt	.+10     	; 0x5a50 <getLeftSpeedFromInput+0x228>
    5a46:	8f ef       	ldi	r24, 0xFF	; 255
    5a48:	0f 3f       	cpi	r16, 0xFF	; 255
    5a4a:	18 07       	cpc	r17, r24
    5a4c:	09 f4       	brne	.+2      	; 0x5a50 <getLeftSpeedFromInput+0x228>
    5a4e:	19 c1       	rjmp	.+562    	; 0x5c82 <getLeftSpeedFromInput+0x45a>
    5a50:	80 91 15 05 	lds	r24, 0x0515
    5a54:	90 91 16 05 	lds	r25, 0x0516
    5a58:	8c 17       	cp	r24, r28
    5a5a:	9d 07       	cpc	r25, r29
    5a5c:	2c f0       	brlt	.+10     	; 0x5a68 <getLeftSpeedFromInput+0x240>
    5a5e:	9f ef       	ldi	r25, 0xFF	; 255
    5a60:	0f 3f       	cpi	r16, 0xFF	; 255
    5a62:	19 07       	cpc	r17, r25
    5a64:	09 f4       	brne	.+2      	; 0x5a68 <getLeftSpeedFromInput+0x240>
    5a66:	0a c1       	rjmp	.+532    	; 0x5c7c <getLeftSpeedFromInput+0x454>
    5a68:	80 91 25 05 	lds	r24, 0x0525
    5a6c:	90 91 26 05 	lds	r25, 0x0526
    5a70:	8c 17       	cp	r24, r28
    5a72:	9d 07       	cpc	r25, r29
    5a74:	2c f0       	brlt	.+10     	; 0x5a80 <getLeftSpeedFromInput+0x258>
    5a76:	8f ef       	ldi	r24, 0xFF	; 255
    5a78:	0f 3f       	cpi	r16, 0xFF	; 255
    5a7a:	18 07       	cpc	r17, r24
    5a7c:	09 f4       	brne	.+2      	; 0x5a80 <getLeftSpeedFromInput+0x258>
    5a7e:	fb c0       	rjmp	.+502    	; 0x5c76 <getLeftSpeedFromInput+0x44e>
    5a80:	80 91 35 05 	lds	r24, 0x0535
    5a84:	90 91 36 05 	lds	r25, 0x0536
    5a88:	8c 17       	cp	r24, r28
    5a8a:	9d 07       	cpc	r25, r29
    5a8c:	2c f0       	brlt	.+10     	; 0x5a98 <getLeftSpeedFromInput+0x270>
    5a8e:	9f ef       	ldi	r25, 0xFF	; 255
    5a90:	0f 3f       	cpi	r16, 0xFF	; 255
    5a92:	19 07       	cpc	r17, r25
    5a94:	09 f4       	brne	.+2      	; 0x5a98 <getLeftSpeedFromInput+0x270>
    5a96:	ec c0       	rjmp	.+472    	; 0x5c70 <getLeftSpeedFromInput+0x448>
    5a98:	80 91 45 05 	lds	r24, 0x0545
    5a9c:	90 91 46 05 	lds	r25, 0x0546
    5aa0:	8c 17       	cp	r24, r28
    5aa2:	9d 07       	cpc	r25, r29
    5aa4:	2c f0       	brlt	.+10     	; 0x5ab0 <getLeftSpeedFromInput+0x288>
    5aa6:	8f ef       	ldi	r24, 0xFF	; 255
    5aa8:	0f 3f       	cpi	r16, 0xFF	; 255
    5aaa:	18 07       	cpc	r17, r24
    5aac:	09 f4       	brne	.+2      	; 0x5ab0 <getLeftSpeedFromInput+0x288>
    5aae:	dd c0       	rjmp	.+442    	; 0x5c6a <getLeftSpeedFromInput+0x442>
    5ab0:	80 91 55 05 	lds	r24, 0x0555
    5ab4:	90 91 56 05 	lds	r25, 0x0556
    5ab8:	8c 17       	cp	r24, r28
    5aba:	9d 07       	cpc	r25, r29
    5abc:	2c f0       	brlt	.+10     	; 0x5ac8 <getLeftSpeedFromInput+0x2a0>
    5abe:	9f ef       	ldi	r25, 0xFF	; 255
    5ac0:	0f 3f       	cpi	r16, 0xFF	; 255
    5ac2:	19 07       	cpc	r17, r25
    5ac4:	09 f4       	brne	.+2      	; 0x5ac8 <getLeftSpeedFromInput+0x2a0>
    5ac6:	ce c0       	rjmp	.+412    	; 0x5c64 <getLeftSpeedFromInput+0x43c>
    5ac8:	e0 90 65 05 	lds	r14, 0x0565
    5acc:	f0 90 66 05 	lds	r15, 0x0566
    5ad0:	ec 16       	cp	r14, r28
    5ad2:	fd 06       	cpc	r15, r29
    5ad4:	2c f0       	brlt	.+10     	; 0x5ae0 <getLeftSpeedFromInput+0x2b8>
    5ad6:	8f ef       	ldi	r24, 0xFF	; 255
    5ad8:	0f 3f       	cpi	r16, 0xFF	; 255
    5ada:	18 07       	cpc	r17, r24
    5adc:	09 f4       	brne	.+2      	; 0x5ae0 <getLeftSpeedFromInput+0x2b8>
    5ade:	bf c0       	rjmp	.+382    	; 0x5c5e <getLeftSpeedFromInput+0x436>
            } else {
                speedLeftFromEnc = calibration[indFwL-1][1] + (signed int)(((float)(last_left_vel-calibration[indFwL-1][0])*(float)(calibration[indFwL][1]-calibration[indFwL-1][1]))/(float)(calibration[indFwL][0]-calibration[indFwL-1][0]));
            }
        }
    } else {
		if(indBwL==0) {  // the velocity is lower than first saved in the matrix
    5ae0:	01 15       	cp	r16, r1
    5ae2:	11 05       	cpc	r17, r1
    5ae4:	09 f0       	breq	.+2      	; 0x5ae8 <getLeftSpeedFromInput+0x2c0>
    5ae6:	6e c0       	rjmp	.+220    	; 0x5bc4 <getLeftSpeedFromInput+0x39c>
        	speedLeftFromEnc = (last_left_vel*calibration[0][5])/calibration[0][4];
    5ae8:	20 91 e7 04 	lds	r18, 0x04E7
    5aec:	30 91 e8 04 	lds	r19, 0x04E8
    5af0:	c2 9f       	mul	r28, r18
    5af2:	c0 01       	movw	r24, r0
    5af4:	c3 9f       	mul	r28, r19
    5af6:	90 0d       	add	r25, r0
    5af8:	d2 9f       	mul	r29, r18
    5afa:	90 0d       	add	r25, r0
    5afc:	11 24       	eor	r1, r1
    5afe:	0e 94 6d 42 	call	0x84da	; 0x84da <__divmodhi4>
		} else if(indBwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][5]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][4]);  // take the max
		} else {
        	speedLeftFromEnc = calibration[indBwL-1][5] + (signed int)(((float)(last_left_vel-calibration[indBwL-1][4])*(float)(calibration[indBwL][5]-calibration[indBwL-1][5]))/(float)(calibration[indBwL][4]-calibration[indBwL-1][4]));
		}
		speedLeftFromEnc = -speedLeftFromEnc;
    5b02:	70 95       	com	r23
    5b04:	61 95       	neg	r22
    5b06:	7f 4f       	sbci	r23, 0xFF	; 255
    5b08:	70 93 b5 04 	sts	0x04B5, r23
    5b0c:	60 93 b4 04 	sts	0x04B4, r22
    5b10:	6d cf       	rjmp	.-294    	; 0x59ec <getLeftSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    5b12:	00 e0       	ldi	r16, 0x00	; 0
    5b14:	10 e0       	ldi	r17, 0x00	; 0
    5b16:	81 cf       	rjmp	.-254    	; 0x5a1a <getLeftSpeedFromInput+0x1f2>
            speedLeftFromEnc = 0;
        } else {
            if(indFwL==0) {  // the velocity is lower than first saved in the matrix
                speedLeftFromEnc = (last_left_vel*calibration[0][1])/calibration[0][0];
            } else if(indFwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
                speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][1]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][0]);  // take the max
    5b18:	60 91 5f 05 	lds	r22, 0x055F
    5b1c:	70 91 60 05 	lds	r23, 0x0560
    5b20:	88 27       	eor	r24, r24
    5b22:	77 fd       	sbrc	r23, 7
    5b24:	80 95       	com	r24
    5b26:	98 2f       	mov	r25, r24
    5b28:	0e 94 9a 40 	call	0x8134	; 0x8134 <__floatsisf>
    5b2c:	5b 01       	movw	r10, r22
    5b2e:	6c 01       	movw	r12, r24
    5b30:	be 01       	movw	r22, r28
    5b32:	88 27       	eor	r24, r24
    5b34:	77 fd       	sbrc	r23, 7
    5b36:	80 95       	com	r24
    5b38:	98 2f       	mov	r25, r24
    5b3a:	0e 94 9a 40 	call	0x8134	; 0x8134 <__floatsisf>
    5b3e:	9b 01       	movw	r18, r22
    5b40:	ac 01       	movw	r20, r24
    5b42:	c6 01       	movw	r24, r12
    5b44:	b5 01       	movw	r22, r10
    5b46:	0e 94 af 41 	call	0x835e	; 0x835e <__mulsf3>
    5b4a:	5b 01       	movw	r10, r22
    5b4c:	6c 01       	movw	r12, r24
    5b4e:	b7 01       	movw	r22, r14
    5b50:	88 27       	eor	r24, r24
    5b52:	77 fd       	sbrc	r23, 7
    5b54:	80 95       	com	r24
    5b56:	98 2f       	mov	r25, r24
    5b58:	0e 94 9a 40 	call	0x8134	; 0x8134 <__floatsisf>
    5b5c:	9b 01       	movw	r18, r22
    5b5e:	ac 01       	movw	r20, r24
    5b60:	c6 01       	movw	r24, r12
    5b62:	b5 01       	movw	r22, r10
    5b64:	0e 94 ff 3f 	call	0x7ffe	; 0x7ffe <__divsf3>
    5b68:	0e 94 67 40 	call	0x80ce	; 0x80ce <__fixsfsi>
    5b6c:	70 93 b5 04 	sts	0x04B5, r23
    5b70:	60 93 b4 04 	sts	0x04B4, r22
    5b74:	3b cf       	rjmp	.-394    	; 0x59ec <getLeftSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    5b76:	02 e0       	ldi	r16, 0x02	; 2
    5b78:	10 e0       	ldi	r17, 0x00	; 0
    5b7a:	91 ce       	rjmp	.-734    	; 0x589e <getLeftSpeedFromInput+0x76>
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    5b7c:	08 e0       	ldi	r16, 0x08	; 8
    5b7e:	10 e0       	ldi	r17, 0x00	; 0
    5b80:	d6 ce       	rjmp	.-596    	; 0x592e <getLeftSpeedFromInput+0x106>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    5b82:	07 e0       	ldi	r16, 0x07	; 7
    5b84:	10 e0       	ldi	r17, 0x00	; 0
    5b86:	c7 ce       	rjmp	.-626    	; 0x5916 <getLeftSpeedFromInput+0xee>
    5b88:	06 e0       	ldi	r16, 0x06	; 6
    5b8a:	10 e0       	ldi	r17, 0x00	; 0
    5b8c:	b8 ce       	rjmp	.-656    	; 0x58fe <getLeftSpeedFromInput+0xd6>
    5b8e:	05 e0       	ldi	r16, 0x05	; 5
    5b90:	10 e0       	ldi	r17, 0x00	; 0
    5b92:	a9 ce       	rjmp	.-686    	; 0x58e6 <getLeftSpeedFromInput+0xbe>
    5b94:	04 e0       	ldi	r16, 0x04	; 4
    5b96:	10 e0       	ldi	r17, 0x00	; 0
    5b98:	9a ce       	rjmp	.-716    	; 0x58ce <getLeftSpeedFromInput+0xa6>
    5b9a:	03 e0       	ldi	r16, 0x03	; 3
    5b9c:	10 e0       	ldi	r17, 0x00	; 0
    5b9e:	8b ce       	rjmp	.-746    	; 0x58b6 <getLeftSpeedFromInput+0x8e>
    if(pwm_left >= 0) {
        if(last_left_vel == 0) {
            speedLeftFromEnc = 0;
        } else {
            if(indFwL==0) {  // the velocity is lower than first saved in the matrix
                speedLeftFromEnc = (last_left_vel*calibration[0][1])/calibration[0][0];
    5ba0:	20 91 df 04 	lds	r18, 0x04DF
    5ba4:	30 91 e0 04 	lds	r19, 0x04E0
    5ba8:	c2 9f       	mul	r28, r18
    5baa:	c0 01       	movw	r24, r0
    5bac:	c3 9f       	mul	r28, r19
    5bae:	90 0d       	add	r25, r0
    5bb0:	d2 9f       	mul	r29, r18
    5bb2:	90 0d       	add	r25, r0
    5bb4:	11 24       	eor	r1, r1
    5bb6:	0e 94 6d 42 	call	0x84da	; 0x84da <__divmodhi4>
    5bba:	70 93 b5 04 	sts	0x04B5, r23
    5bbe:	60 93 b4 04 	sts	0x04B4, r22
    5bc2:	14 cf       	rjmp	.-472    	; 0x59ec <getLeftSpeedFromInput+0x1c4>
            }
        }
    } else {
		if(indBwL==0) {  // the velocity is lower than first saved in the matrix
        	speedLeftFromEnc = (last_left_vel*calibration[0][5])/calibration[0][4];
		} else if(indBwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    5bc4:	8f ef       	ldi	r24, 0xFF	; 255
    5bc6:	0f 3f       	cpi	r16, 0xFF	; 255
    5bc8:	18 07       	cpc	r17, r24
    5bca:	09 f4       	brne	.+2      	; 0x5bce <getLeftSpeedFromInput+0x3a6>
    5bcc:	5d c0       	rjmp	.+186    	; 0x5c88 <getLeftSpeedFromInput+0x460>
        	speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][5]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][4]);  // take the max
		} else {
        	speedLeftFromEnc = calibration[indBwL-1][5] + (signed int)(((float)(last_left_vel-calibration[indBwL-1][4])*(float)(calibration[indBwL][5]-calibration[indBwL-1][5]))/(float)(calibration[indBwL][4]-calibration[indBwL-1][4]));
    5bce:	f8 01       	movw	r30, r16
    5bd0:	e2 95       	swap	r30
    5bd2:	f2 95       	swap	r31
    5bd4:	f0 7f       	andi	r31, 0xF0	; 240
    5bd6:	fe 27       	eor	r31, r30
    5bd8:	e0 7f       	andi	r30, 0xF0	; 240
    5bda:	fe 27       	eor	r31, r30
    5bdc:	e3 53       	subi	r30, 0x33	; 51
    5bde:	fb 4f       	sbci	r31, 0xFB	; 251
    5be0:	a0 84       	ldd	r10, Z+8	; 0x08
    5be2:	b1 84       	ldd	r11, Z+9	; 0x09
    5be4:	82 84       	ldd	r8, Z+10	; 0x0a
    5be6:	93 84       	ldd	r9, Z+11	; 0x0b
    5be8:	ca 19       	sub	r28, r10
    5bea:	db 09       	sbc	r29, r11
    5bec:	be 01       	movw	r22, r28
    5bee:	88 27       	eor	r24, r24
    5bf0:	77 fd       	sbrc	r23, 7
    5bf2:	80 95       	com	r24
    5bf4:	98 2f       	mov	r25, r24
    5bf6:	0e 94 9a 40 	call	0x8134	; 0x8134 <__floatsisf>
    5bfa:	6b 01       	movw	r12, r22
    5bfc:	7c 01       	movw	r14, r24
    5bfe:	e8 01       	movw	r28, r16
    5c00:	c2 95       	swap	r28
    5c02:	d2 95       	swap	r29
    5c04:	d0 7f       	andi	r29, 0xF0	; 240
    5c06:	dc 27       	eor	r29, r28
    5c08:	c0 7f       	andi	r28, 0xF0	; 240
    5c0a:	dc 27       	eor	r29, r28
    5c0c:	c3 52       	subi	r28, 0x23	; 35
    5c0e:	db 4f       	sbci	r29, 0xFB	; 251
    5c10:	6a 85       	ldd	r22, Y+10	; 0x0a
    5c12:	7b 85       	ldd	r23, Y+11	; 0x0b
    5c14:	68 19       	sub	r22, r8
    5c16:	79 09       	sbc	r23, r9
    5c18:	88 27       	eor	r24, r24
    5c1a:	77 fd       	sbrc	r23, 7
    5c1c:	80 95       	com	r24
    5c1e:	98 2f       	mov	r25, r24
    5c20:	0e 94 9a 40 	call	0x8134	; 0x8134 <__floatsisf>
    5c24:	9b 01       	movw	r18, r22
    5c26:	ac 01       	movw	r20, r24
    5c28:	c7 01       	movw	r24, r14
    5c2a:	b6 01       	movw	r22, r12
    5c2c:	0e 94 af 41 	call	0x835e	; 0x835e <__mulsf3>
    5c30:	7b 01       	movw	r14, r22
    5c32:	8c 01       	movw	r16, r24
    5c34:	68 85       	ldd	r22, Y+8	; 0x08
    5c36:	79 85       	ldd	r23, Y+9	; 0x09
    5c38:	6a 19       	sub	r22, r10
    5c3a:	7b 09       	sbc	r23, r11
    5c3c:	88 27       	eor	r24, r24
    5c3e:	77 fd       	sbrc	r23, 7
    5c40:	80 95       	com	r24
    5c42:	98 2f       	mov	r25, r24
    5c44:	0e 94 9a 40 	call	0x8134	; 0x8134 <__floatsisf>
    5c48:	9b 01       	movw	r18, r22
    5c4a:	ac 01       	movw	r20, r24
    5c4c:	c8 01       	movw	r24, r16
    5c4e:	b7 01       	movw	r22, r14
    5c50:	0e 94 ff 3f 	call	0x7ffe	; 0x7ffe <__divsf3>
    5c54:	0e 94 67 40 	call	0x80ce	; 0x80ce <__fixsfsi>
    5c58:	68 0d       	add	r22, r8
    5c5a:	79 1d       	adc	r23, r9
    5c5c:	52 cf       	rjmp	.-348    	; 0x5b02 <getLeftSpeedFromInput+0x2da>
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    5c5e:	08 e0       	ldi	r16, 0x08	; 8
    5c60:	10 e0       	ldi	r17, 0x00	; 0
    5c62:	3e cf       	rjmp	.-388    	; 0x5ae0 <getLeftSpeedFromInput+0x2b8>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    5c64:	07 e0       	ldi	r16, 0x07	; 7
    5c66:	10 e0       	ldi	r17, 0x00	; 0
    5c68:	2f cf       	rjmp	.-418    	; 0x5ac8 <getLeftSpeedFromInput+0x2a0>
    5c6a:	06 e0       	ldi	r16, 0x06	; 6
    5c6c:	10 e0       	ldi	r17, 0x00	; 0
    5c6e:	20 cf       	rjmp	.-448    	; 0x5ab0 <getLeftSpeedFromInput+0x288>
    5c70:	05 e0       	ldi	r16, 0x05	; 5
    5c72:	10 e0       	ldi	r17, 0x00	; 0
    5c74:	11 cf       	rjmp	.-478    	; 0x5a98 <getLeftSpeedFromInput+0x270>
    5c76:	04 e0       	ldi	r16, 0x04	; 4
    5c78:	10 e0       	ldi	r17, 0x00	; 0
    5c7a:	02 cf       	rjmp	.-508    	; 0x5a80 <getLeftSpeedFromInput+0x258>
    5c7c:	03 e0       	ldi	r16, 0x03	; 3
    5c7e:	10 e0       	ldi	r17, 0x00	; 0
    5c80:	f3 ce       	rjmp	.-538    	; 0x5a68 <getLeftSpeedFromInput+0x240>
    5c82:	02 e0       	ldi	r16, 0x02	; 2
    5c84:	10 e0       	ldi	r17, 0x00	; 0
    5c86:	e4 ce       	rjmp	.-568    	; 0x5a50 <getLeftSpeedFromInput+0x228>
        }
    } else {
		if(indBwL==0) {  // the velocity is lower than first saved in the matrix
        	speedLeftFromEnc = (last_left_vel*calibration[0][5])/calibration[0][4];
		} else if(indBwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][5]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][4]);  // take the max
    5c88:	60 91 67 05 	lds	r22, 0x0567
    5c8c:	70 91 68 05 	lds	r23, 0x0568
    5c90:	88 27       	eor	r24, r24
    5c92:	77 fd       	sbrc	r23, 7
    5c94:	80 95       	com	r24
    5c96:	98 2f       	mov	r25, r24
    5c98:	0e 94 9a 40 	call	0x8134	; 0x8134 <__floatsisf>
    5c9c:	5b 01       	movw	r10, r22
    5c9e:	6c 01       	movw	r12, r24
    5ca0:	be 01       	movw	r22, r28
    5ca2:	88 27       	eor	r24, r24
    5ca4:	77 fd       	sbrc	r23, 7
    5ca6:	80 95       	com	r24
    5ca8:	98 2f       	mov	r25, r24
    5caa:	0e 94 9a 40 	call	0x8134	; 0x8134 <__floatsisf>
    5cae:	9b 01       	movw	r18, r22
    5cb0:	ac 01       	movw	r20, r24
    5cb2:	c6 01       	movw	r24, r12
    5cb4:	b5 01       	movw	r22, r10
    5cb6:	0e 94 af 41 	call	0x835e	; 0x835e <__mulsf3>
    5cba:	5b 01       	movw	r10, r22
    5cbc:	6c 01       	movw	r12, r24
    5cbe:	b7 01       	movw	r22, r14
    5cc0:	88 27       	eor	r24, r24
    5cc2:	77 fd       	sbrc	r23, 7
    5cc4:	80 95       	com	r24
    5cc6:	98 2f       	mov	r25, r24
    5cc8:	0e 94 9a 40 	call	0x8134	; 0x8134 <__floatsisf>
    5ccc:	9b 01       	movw	r18, r22
    5cce:	ac 01       	movw	r20, r24
    5cd0:	c6 01       	movw	r24, r12
    5cd2:	b5 01       	movw	r22, r10
    5cd4:	0e 94 ff 3f 	call	0x7ffe	; 0x7ffe <__divsf3>
    5cd8:	0e 94 67 40 	call	0x80ce	; 0x80ce <__fixsfsi>
    5cdc:	12 cf       	rjmp	.-476    	; 0x5b02 <getLeftSpeedFromInput+0x2da>

00005cde <handleMotorsWithSpeedController>:
		OCR4B = 0;
	}

}

void handleMotorsWithSpeedController() {
    5cde:	2f 92       	push	r2
    5ce0:	3f 92       	push	r3
    5ce2:	4f 92       	push	r4
    5ce4:	5f 92       	push	r5
    5ce6:	6f 92       	push	r6
    5ce8:	7f 92       	push	r7
    5cea:	8f 92       	push	r8
    5cec:	9f 92       	push	r9
    5cee:	af 92       	push	r10
    5cf0:	bf 92       	push	r11
    5cf2:	cf 92       	push	r12
    5cf4:	df 92       	push	r13
    5cf6:	ef 92       	push	r14
    5cf8:	ff 92       	push	r15
    5cfa:	0f 93       	push	r16
    5cfc:	1f 93       	push	r17

	if(calibrateOdomFlag==1) {
    5cfe:	80 91 c7 04 	lds	r24, 0x04C7
    5d02:	81 30       	cpi	r24, 0x01	; 1
    5d04:	09 f4       	brne	.+2      	; 0x5d08 <handleMotorsWithSpeedController+0x2a>
    5d06:	28 c2       	rjmp	.+1104   	; 0x6158 <handleMotorsWithSpeedController+0x47a>
		pwm_right_working = pwm_intermediate_right_desired;
		pwm_left_working = pwm_intermediate_left_desired;
	} else {
		if(pwm_intermediate_right_desired >= 0) {		// pwm in the range -127..127
    5d08:	80 91 fb 02 	lds	r24, 0x02FB
    5d0c:	90 91 fc 02 	lds	r25, 0x02FC
    5d10:	97 fd       	sbrc	r25, 7
    5d12:	9a c2       	rjmp	.+1332   	; 0x6248 <handleMotorsWithSpeedController+0x56a>
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_FW_SC);
    5d14:	61 e0       	ldi	r22, 0x01	; 1
    5d16:	0e 94 51 26 	call	0x4ca2	; 0x4ca2 <getInputFromSpeed>
    5d1a:	90 93 0c 03 	sts	0x030C, r25
    5d1e:	80 93 0b 03 	sts	0x030B, r24
		} else {
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_BW_SC);
		}
		if(pwm_intermediate_left_desired >= 0) {		// pwm in the range -127..127
    5d22:	80 91 fd 02 	lds	r24, 0x02FD
    5d26:	90 91 fe 02 	lds	r25, 0x02FE
    5d2a:	97 fd       	sbrc	r25, 7
    5d2c:	85 c2       	rjmp	.+1290   	; 0x6238 <handleMotorsWithSpeedController+0x55a>
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_FW_SC);
    5d2e:	60 e0       	ldi	r22, 0x00	; 0
    5d30:	0e 94 51 26 	call	0x4ca2	; 0x4ca2 <getInputFromSpeed>
    5d34:	90 93 0e 03 	sts	0x030E, r25
    5d38:	80 93 0d 03 	sts	0x030D, r24
		} else {
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_BW_SC);
		}
	}

	if(obstacleAvoidanceEnabled) {
    5d3c:	20 91 68 04 	lds	r18, 0x0468
    5d40:	22 23       	and	r18, r18
    5d42:	09 f0       	breq	.+2      	; 0x5d46 <handleMotorsWithSpeedController+0x68>
    5d44:	fe c1       	rjmp	.+1020   	; 0x6142 <handleMotorsWithSpeedController+0x464>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
	}
	pwm_left_desired_to_control = pwm_left_working;
    5d46:	90 93 ea 02 	sts	0x02EA, r25
    5d4a:	80 93 e9 02 	sts	0x02E9, r24
	pwm_right_desired_to_control = pwm_right_working;
    5d4e:	80 91 0b 03 	lds	r24, 0x030B
    5d52:	90 91 0c 03 	lds	r25, 0x030C
    5d56:	90 93 e8 02 	sts	0x02E8, r25
    5d5a:	80 93 e7 02 	sts	0x02E7, r24

	if(compute_left_vel) {
    5d5e:	80 91 07 02 	lds	r24, 0x0207
    5d62:	88 23       	and	r24, r24
    5d64:	09 f4       	brne	.+2      	; 0x5d68 <handleMotorsWithSpeedController+0x8a>
    5d66:	93 c0       	rjmp	.+294    	; 0x5e8e <handleMotorsWithSpeedController+0x1b0>

		last_left_vel = left_vel_sum>>2;
    5d68:	20 91 eb 02 	lds	r18, 0x02EB
    5d6c:	30 91 ec 02 	lds	r19, 0x02EC
    5d70:	36 95       	lsr	r19
    5d72:	27 95       	ror	r18
    5d74:	36 95       	lsr	r19
    5d76:	27 95       	ror	r18
    5d78:	30 93 f0 02 	sts	0x02F0, r19
    5d7c:	20 93 ef 02 	sts	0x02EF, r18
		compute_left_vel = 0;
    5d80:	10 92 07 02 	sts	0x0207, r1
		left_vel_sum = 0;
    5d84:	10 92 ec 02 	sts	0x02EC, r1
    5d88:	10 92 eb 02 	sts	0x02EB, r1
		
		if(calibrateOdomFlag==1) {
    5d8c:	80 91 c7 04 	lds	r24, 0x04C7
    5d90:	81 30       	cpi	r24, 0x01	; 1
    5d92:	09 f4       	brne	.+2      	; 0x5d96 <handleMotorsWithSpeedController+0xb8>
    5d94:	08 c2       	rjmp	.+1040   	; 0x61a6 <handleMotorsWithSpeedController+0x4c8>
			leftSpeedSumOdom += last_left_vel;
			leftSumCount++;
		}

		getLeftSpeedFromInput();	// get speed in mm/s
    5d96:	0e 94 14 2c 	call	0x5828	; 0x5828 <getLeftSpeedFromInput>
		leftDistPrev = leftDist;
    5d9a:	80 91 8f 04 	lds	r24, 0x048F
    5d9e:	90 91 90 04 	lds	r25, 0x0490
    5da2:	a0 91 91 04 	lds	r26, 0x0491
    5da6:	b0 91 92 04 	lds	r27, 0x0492
    5daa:	80 93 97 04 	sts	0x0497, r24
    5dae:	90 93 98 04 	sts	0x0498, r25
    5db2:	a0 93 99 04 	sts	0x0499, r26
    5db6:	b0 93 9a 04 	sts	0x049A, r27
		//timeOdometry = getTime100MicroSec()-timeLeftOdom;
		leftDist += ((float)speedLeftFromEnc*((float)(getTime100MicroSec()-timeLeftOdom)*104.0))/1000000.0;	// distance in mm				
    5dba:	60 91 b4 04 	lds	r22, 0x04B4
    5dbe:	70 91 b5 04 	lds	r23, 0x04B5
    5dc2:	88 27       	eor	r24, r24
    5dc4:	77 fd       	sbrc	r23, 7
    5dc6:	80 95       	com	r24
    5dc8:	98 2f       	mov	r25, r24
    5dca:	0e 94 9a 40 	call	0x8134	; 0x8134 <__floatsisf>
    5dce:	7b 01       	movw	r14, r22
    5dd0:	8c 01       	movw	r16, r24
    5dd2:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <getTime100MicroSec>
    5dd6:	20 91 b8 04 	lds	r18, 0x04B8
    5dda:	30 91 b9 04 	lds	r19, 0x04B9
    5dde:	40 91 ba 04 	lds	r20, 0x04BA
    5de2:	50 91 bb 04 	lds	r21, 0x04BB
    5de6:	62 1b       	sub	r22, r18
    5de8:	73 0b       	sbc	r23, r19
    5dea:	84 0b       	sbc	r24, r20
    5dec:	95 0b       	sbc	r25, r21
    5dee:	0e 94 98 40 	call	0x8130	; 0x8130 <__floatunsisf>
    5df2:	20 e0       	ldi	r18, 0x00	; 0
    5df4:	30 e0       	ldi	r19, 0x00	; 0
    5df6:	40 ed       	ldi	r20, 0xD0	; 208
    5df8:	52 e4       	ldi	r21, 0x42	; 66
    5dfa:	0e 94 af 41 	call	0x835e	; 0x835e <__mulsf3>
    5dfe:	9b 01       	movw	r18, r22
    5e00:	ac 01       	movw	r20, r24
    5e02:	c8 01       	movw	r24, r16
    5e04:	b7 01       	movw	r22, r14
    5e06:	0e 94 af 41 	call	0x835e	; 0x835e <__mulsf3>
    5e0a:	20 e0       	ldi	r18, 0x00	; 0
    5e0c:	34 e2       	ldi	r19, 0x24	; 36
    5e0e:	44 e7       	ldi	r20, 0x74	; 116
    5e10:	59 e4       	ldi	r21, 0x49	; 73
    5e12:	0e 94 ff 3f 	call	0x7ffe	; 0x7ffe <__divsf3>
    5e16:	9b 01       	movw	r18, r22
    5e18:	ac 01       	movw	r20, r24
    5e1a:	60 91 8f 04 	lds	r22, 0x048F
    5e1e:	70 91 90 04 	lds	r23, 0x0490
    5e22:	80 91 91 04 	lds	r24, 0x0491
    5e26:	90 91 92 04 	lds	r25, 0x0492
    5e2a:	0e 94 32 3f 	call	0x7e64	; 0x7e64 <__addsf3>
    5e2e:	60 93 8f 04 	sts	0x048F, r22
    5e32:	70 93 90 04 	sts	0x0490, r23
    5e36:	80 93 91 04 	sts	0x0491, r24
    5e3a:	90 93 92 04 	sts	0x0492, r25
		timeLeftOdom = getTime100MicroSec();
    5e3e:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <getTime100MicroSec>
    5e42:	60 93 b8 04 	sts	0x04B8, r22
    5e46:	70 93 b9 04 	sts	0x04B9, r23
    5e4a:	80 93 ba 04 	sts	0x04BA, r24
    5e4e:	90 93 bb 04 	sts	0x04BB, r25
		} else {
			leftMotSteps -= ((float)(last_left_vel>>3))*(LEFT_ENC_OFFSET-ENC_SLOPE*((float)(last_left_vel>>2)))/1000.0;
		}

*/
		if(robotPosition == HORIZONTAL_POS) {
    5e52:	80 91 16 02 	lds	r24, 0x0216
    5e56:	81 30       	cpi	r24, 0x01	; 1
    5e58:	09 f4       	brne	.+2      	; 0x5e5c <handleMotorsWithSpeedController+0x17e>
    5e5a:	c7 c1       	rjmp	.+910    	; 0x61ea <handleMotorsWithSpeedController+0x50c>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_left(&pwm_left_working);
			//PORTB |= (1 << 5);
		} else {
			//PORTB &= ~(1 << 6);
			start_vertical_speed_control_left(&pwm_left_working);
    5e5c:	8d e0       	ldi	r24, 0x0D	; 13
    5e5e:	93 e0       	ldi	r25, 0x03	; 3
    5e60:	0e 94 6d 15 	call	0x2ada	; 0x2ada <start_vertical_speed_control_left>
			//PORTB |= (1 << 6);
		}

		pwm_left = pwm_left_working;
    5e64:	80 91 0d 03 	lds	r24, 0x030D
    5e68:	90 91 0e 03 	lds	r25, 0x030E
    5e6c:	90 93 f6 02 	sts	0x02F6, r25
    5e70:	80 93 f5 02 	sts	0x02F5, r24

		if(pwm_left > 0) {
    5e74:	18 16       	cp	r1, r24
    5e76:	19 06       	cpc	r1, r25
    5e78:	0c f0       	brlt	.+2      	; 0x5e7c <handleMotorsWithSpeedController+0x19e>
    5e7a:	f9 c1       	rjmp	.+1010   	; 0x626e <handleMotorsWithSpeedController+0x590>
			OCR4A = (unsigned int)pwm_left;
    5e7c:	90 93 a9 00 	sts	0x00A9, r25
    5e80:	80 93 a8 00 	sts	0x00A8, r24
		} else {
			OCR4A = 0;
			OCR4B = 0;
		}

		computeOdometry++;
    5e84:	80 91 9f 04 	lds	r24, 0x049F
    5e88:	8f 5f       	subi	r24, 0xFF	; 255
    5e8a:	80 93 9f 04 	sts	0x049F, r24

	}

	if(compute_right_vel) {
    5e8e:	80 91 08 02 	lds	r24, 0x0208
    5e92:	88 23       	and	r24, r24
    5e94:	09 f0       	breq	.+2      	; 0x5e98 <handleMotorsWithSpeedController+0x1ba>
    5e96:	c1 c0       	rjmp	.+386    	; 0x601a <handleMotorsWithSpeedController+0x33c>
    5e98:	80 91 9f 04 	lds	r24, 0x049F

		computeOdometry++;

	}

	if(computeOdometry>=2) {	// compute odometry when we get the last encoders values for both wheels
    5e9c:	82 30       	cpi	r24, 0x02	; 2
    5e9e:	08 f4       	brcc	.+2      	; 0x5ea2 <handleMotorsWithSpeedController+0x1c4>
    5ea0:	ab c0       	rjmp	.+342    	; 0x5ff8 <handleMotorsWithSpeedController+0x31a>

		// the odometry computation takes about 1 ms

		computeOdometry = 0;
    5ea2:	10 92 9f 04 	sts	0x049F, r1

		deltaDist = ((rightDist-rightDistPrev)+(leftDist-leftDistPrev))/2.0;
    5ea6:	60 90 93 04 	lds	r6, 0x0493
    5eaa:	70 90 94 04 	lds	r7, 0x0494
    5eae:	80 90 95 04 	lds	r8, 0x0495
    5eb2:	90 90 96 04 	lds	r9, 0x0496
    5eb6:	20 90 8f 04 	lds	r2, 0x048F
    5eba:	30 90 90 04 	lds	r3, 0x0490
    5ebe:	40 90 91 04 	lds	r4, 0x0491
    5ec2:	50 90 92 04 	lds	r5, 0x0492
    5ec6:	c4 01       	movw	r24, r8
    5ec8:	b3 01       	movw	r22, r6
    5eca:	20 91 9b 04 	lds	r18, 0x049B
    5ece:	30 91 9c 04 	lds	r19, 0x049C
    5ed2:	40 91 9d 04 	lds	r20, 0x049D
    5ed6:	50 91 9e 04 	lds	r21, 0x049E
    5eda:	0e 94 31 3f 	call	0x7e62	; 0x7e62 <__subsf3>
    5ede:	7b 01       	movw	r14, r22
    5ee0:	8c 01       	movw	r16, r24
    5ee2:	c2 01       	movw	r24, r4
    5ee4:	b1 01       	movw	r22, r2
    5ee6:	20 91 97 04 	lds	r18, 0x0497
    5eea:	30 91 98 04 	lds	r19, 0x0498
    5eee:	40 91 99 04 	lds	r20, 0x0499
    5ef2:	50 91 9a 04 	lds	r21, 0x049A
    5ef6:	0e 94 31 3f 	call	0x7e62	; 0x7e62 <__subsf3>
    5efa:	9b 01       	movw	r18, r22
    5efc:	ac 01       	movw	r20, r24
    5efe:	c8 01       	movw	r24, r16
    5f00:	b7 01       	movw	r22, r14
    5f02:	0e 94 32 3f 	call	0x7e64	; 0x7e64 <__addsf3>
    5f06:	20 e0       	ldi	r18, 0x00	; 0
    5f08:	30 e0       	ldi	r19, 0x00	; 0
    5f0a:	40 e0       	ldi	r20, 0x00	; 0
    5f0c:	5f e3       	ldi	r21, 0x3F	; 63
    5f0e:	0e 94 af 41 	call	0x835e	; 0x835e <__mulsf3>
    5f12:	d6 2e       	mov	r13, r22
    5f14:	c7 2e       	mov	r12, r23
    5f16:	b8 2e       	mov	r11, r24
    5f18:	a9 2e       	mov	r10, r25
    5f1a:	a6 01       	movw	r20, r12
    5f1c:	95 01       	movw	r18, r10
    5f1e:	85 2f       	mov	r24, r21
    5f20:	94 2f       	mov	r25, r20
    5f22:	a3 2f       	mov	r26, r19
    5f24:	b2 2f       	mov	r27, r18
    5f26:	80 93 7b 04 	sts	0x047B, r24
    5f2a:	90 93 7c 04 	sts	0x047C, r25
    5f2e:	a0 93 7d 04 	sts	0x047D, r26
    5f32:	b0 93 7e 04 	sts	0x047E, r27

		if(robotPosition == HORIZONTAL_POS) {
    5f36:	80 91 16 02 	lds	r24, 0x0216
    5f3a:	81 30       	cpi	r24, 0x01	; 1
    5f3c:	09 f4       	brne	.+2      	; 0x5f40 <handleMotorsWithSpeedController+0x262>
    5f3e:	1d c1       	rjmp	.+570    	; 0x617a <handleMotorsWithSpeedController+0x49c>
			//thetaOld = (rightMotSteps - leftMotSteps)/WHEEL_DIST;	// radians
			theta = (rightDist-leftDist)/WHEEL_DIST;
		} else {
			//thetaOld = thetaAcc;
			theta = thetaAcc;
    5f40:	f0 90 a0 04 	lds	r15, 0x04A0
    5f44:	00 91 a1 04 	lds	r16, 0x04A1
    5f48:	10 91 a2 04 	lds	r17, 0x04A2
    5f4c:	e0 90 a3 04 	lds	r14, 0x04A3
    5f50:	8f 2d       	mov	r24, r15
    5f52:	90 2f       	mov	r25, r16
    5f54:	a1 2f       	mov	r26, r17
    5f56:	be 2d       	mov	r27, r14
    5f58:	80 93 6b 04 	sts	0x046B, r24
    5f5c:	90 93 6c 04 	sts	0x046C, r25
    5f60:	a0 93 6d 04 	sts	0x046D, r26
    5f64:	b0 93 6e 04 	sts	0x046E, r27
		}

		//deltaDistOld = ((rightMotSteps-rightMotStepsOld)+(leftMotSteps-leftMotStepsOld))/2.0;

		xPos = xPos + cos(theta)*deltaDist;				
    5f68:	6f 2d       	mov	r22, r15
    5f6a:	70 2f       	mov	r23, r16
    5f6c:	81 2f       	mov	r24, r17
    5f6e:	9e 2d       	mov	r25, r14
    5f70:	0e 94 fc 3f 	call	0x7ff8	; 0x7ff8 <cos>
    5f74:	9b 01       	movw	r18, r22
    5f76:	ac 01       	movw	r20, r24
    5f78:	d6 01       	movw	r26, r12
    5f7a:	f5 01       	movw	r30, r10
    5f7c:	6b 2f       	mov	r22, r27
    5f7e:	7c 2d       	mov	r23, r12
    5f80:	8f 2f       	mov	r24, r31
    5f82:	9a 2d       	mov	r25, r10
    5f84:	0e 94 af 41 	call	0x835e	; 0x835e <__mulsf3>
    5f88:	9b 01       	movw	r18, r22
    5f8a:	ac 01       	movw	r20, r24
    5f8c:	60 91 73 04 	lds	r22, 0x0473
    5f90:	70 91 74 04 	lds	r23, 0x0474
    5f94:	80 91 75 04 	lds	r24, 0x0475
    5f98:	90 91 76 04 	lds	r25, 0x0476
    5f9c:	0e 94 32 3f 	call	0x7e64	; 0x7e64 <__addsf3>
    5fa0:	60 93 73 04 	sts	0x0473, r22
    5fa4:	70 93 74 04 	sts	0x0474, r23
    5fa8:	80 93 75 04 	sts	0x0475, r24
    5fac:	90 93 76 04 	sts	0x0476, r25
		yPos = yPos + sin(theta)*deltaDist;
    5fb0:	6f 2d       	mov	r22, r15
    5fb2:	70 2f       	mov	r23, r16
    5fb4:	81 2f       	mov	r24, r17
    5fb6:	9e 2d       	mov	r25, r14
    5fb8:	0e 94 12 42 	call	0x8424	; 0x8424 <sin>
    5fbc:	9b 01       	movw	r18, r22
    5fbe:	ac 01       	movw	r20, r24
    5fc0:	d6 01       	movw	r26, r12
    5fc2:	f5 01       	movw	r30, r10
    5fc4:	6b 2f       	mov	r22, r27
    5fc6:	7c 2d       	mov	r23, r12
    5fc8:	8f 2f       	mov	r24, r31
    5fca:	9a 2d       	mov	r25, r10
    5fcc:	0e 94 af 41 	call	0x835e	; 0x835e <__mulsf3>
    5fd0:	9b 01       	movw	r18, r22
    5fd2:	ac 01       	movw	r20, r24
    5fd4:	60 91 77 04 	lds	r22, 0x0477
    5fd8:	70 91 78 04 	lds	r23, 0x0478
    5fdc:	80 91 79 04 	lds	r24, 0x0479
    5fe0:	90 91 7a 04 	lds	r25, 0x047A
    5fe4:	0e 94 32 3f 	call	0x7e64	; 0x7e64 <__addsf3>
    5fe8:	60 93 77 04 	sts	0x0477, r22
    5fec:	70 93 78 04 	sts	0x0478, r23
    5ff0:	80 93 79 04 	sts	0x0479, r24
    5ff4:	90 93 7a 04 	sts	0x047A, r25
		//xPosOld = xPosOld + cos(thetaOld)*deltaDistOld;				
		//yPosOld = yPosOld + sin(thetaOld)*deltaDistOld;

	}

}
    5ff8:	1f 91       	pop	r17
    5ffa:	0f 91       	pop	r16
    5ffc:	ff 90       	pop	r15
    5ffe:	ef 90       	pop	r14
    6000:	df 90       	pop	r13
    6002:	cf 90       	pop	r12
    6004:	bf 90       	pop	r11
    6006:	af 90       	pop	r10
    6008:	9f 90       	pop	r9
    600a:	8f 90       	pop	r8
    600c:	7f 90       	pop	r7
    600e:	6f 90       	pop	r6
    6010:	5f 90       	pop	r5
    6012:	4f 90       	pop	r4
    6014:	3f 90       	pop	r3
    6016:	2f 90       	pop	r2
    6018:	08 95       	ret

	}

	if(compute_right_vel) {

		last_right_vel = right_vel_sum>>2;
    601a:	20 91 ed 02 	lds	r18, 0x02ED
    601e:	30 91 ee 02 	lds	r19, 0x02EE
    6022:	36 95       	lsr	r19
    6024:	27 95       	ror	r18
    6026:	36 95       	lsr	r19
    6028:	27 95       	ror	r18
    602a:	30 93 f2 02 	sts	0x02F2, r19
    602e:	20 93 f1 02 	sts	0x02F1, r18
		compute_right_vel = 0;
    6032:	10 92 08 02 	sts	0x0208, r1
		right_vel_sum = 0;
    6036:	10 92 ee 02 	sts	0x02EE, r1
    603a:	10 92 ed 02 	sts	0x02ED, r1

		if(calibrateOdomFlag==1) {
    603e:	80 91 c7 04 	lds	r24, 0x04C7
    6042:	81 30       	cpi	r24, 0x01	; 1
    6044:	09 f4       	brne	.+2      	; 0x6048 <handleMotorsWithSpeedController+0x36a>
    6046:	d6 c0       	rjmp	.+428    	; 0x61f4 <handleMotorsWithSpeedController+0x516>
			rightSpeedSumOdom += last_right_vel;
			rightSumCount++;
		}

		getRightSpeedFromInput();
    6048:	0e 94 b9 29 	call	0x5372	; 0x5372 <getRightSpeedFromInput>
		rightDistPrev = rightDist;
    604c:	80 91 93 04 	lds	r24, 0x0493
    6050:	90 91 94 04 	lds	r25, 0x0494
    6054:	a0 91 95 04 	lds	r26, 0x0495
    6058:	b0 91 96 04 	lds	r27, 0x0496
    605c:	80 93 9b 04 	sts	0x049B, r24
    6060:	90 93 9c 04 	sts	0x049C, r25
    6064:	a0 93 9d 04 	sts	0x049D, r26
    6068:	b0 93 9e 04 	sts	0x049E, r27
		rightDist += ((float)speedRightFromEnc*((float)(getTime100MicroSec()-timeRightOdom)*104.0))/1000000.0;	// distance in mm				
    606c:	60 91 b6 04 	lds	r22, 0x04B6
    6070:	70 91 b7 04 	lds	r23, 0x04B7
    6074:	88 27       	eor	r24, r24
    6076:	77 fd       	sbrc	r23, 7
    6078:	80 95       	com	r24
    607a:	98 2f       	mov	r25, r24
    607c:	0e 94 9a 40 	call	0x8134	; 0x8134 <__floatsisf>
    6080:	7b 01       	movw	r14, r22
    6082:	8c 01       	movw	r16, r24
    6084:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <getTime100MicroSec>
    6088:	20 91 bc 04 	lds	r18, 0x04BC
    608c:	30 91 bd 04 	lds	r19, 0x04BD
    6090:	40 91 be 04 	lds	r20, 0x04BE
    6094:	50 91 bf 04 	lds	r21, 0x04BF
    6098:	62 1b       	sub	r22, r18
    609a:	73 0b       	sbc	r23, r19
    609c:	84 0b       	sbc	r24, r20
    609e:	95 0b       	sbc	r25, r21
    60a0:	0e 94 98 40 	call	0x8130	; 0x8130 <__floatunsisf>
    60a4:	20 e0       	ldi	r18, 0x00	; 0
    60a6:	30 e0       	ldi	r19, 0x00	; 0
    60a8:	40 ed       	ldi	r20, 0xD0	; 208
    60aa:	52 e4       	ldi	r21, 0x42	; 66
    60ac:	0e 94 af 41 	call	0x835e	; 0x835e <__mulsf3>
    60b0:	9b 01       	movw	r18, r22
    60b2:	ac 01       	movw	r20, r24
    60b4:	c8 01       	movw	r24, r16
    60b6:	b7 01       	movw	r22, r14
    60b8:	0e 94 af 41 	call	0x835e	; 0x835e <__mulsf3>
    60bc:	20 e0       	ldi	r18, 0x00	; 0
    60be:	34 e2       	ldi	r19, 0x24	; 36
    60c0:	44 e7       	ldi	r20, 0x74	; 116
    60c2:	59 e4       	ldi	r21, 0x49	; 73
    60c4:	0e 94 ff 3f 	call	0x7ffe	; 0x7ffe <__divsf3>
    60c8:	9b 01       	movw	r18, r22
    60ca:	ac 01       	movw	r20, r24
    60cc:	60 91 93 04 	lds	r22, 0x0493
    60d0:	70 91 94 04 	lds	r23, 0x0494
    60d4:	80 91 95 04 	lds	r24, 0x0495
    60d8:	90 91 96 04 	lds	r25, 0x0496
    60dc:	0e 94 32 3f 	call	0x7e64	; 0x7e64 <__addsf3>
    60e0:	60 93 93 04 	sts	0x0493, r22
    60e4:	70 93 94 04 	sts	0x0494, r23
    60e8:	80 93 95 04 	sts	0x0495, r24
    60ec:	90 93 96 04 	sts	0x0496, r25
		timeRightOdom = getTime100MicroSec();
    60f0:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <getTime100MicroSec>
    60f4:	60 93 bc 04 	sts	0x04BC, r22
    60f8:	70 93 bd 04 	sts	0x04BD, r23
    60fc:	80 93 be 04 	sts	0x04BE, r24
    6100:	90 93 bf 04 	sts	0x04BF, r25
		} else {
			rightMotSteps -= ((float)(last_right_vel>>3))*(RIGHT_ENC_OFFSET-ENC_SLOPE*((float)(last_right_vel>>2)))/1000.0;
		}
*/

		if(robotPosition == HORIZONTAL_POS) {
    6104:	80 91 16 02 	lds	r24, 0x0216
    6108:	81 30       	cpi	r24, 0x01	; 1
    610a:	09 f4       	brne	.+2      	; 0x610e <handleMotorsWithSpeedController+0x430>
    610c:	47 c0       	rjmp	.+142    	; 0x619c <handleMotorsWithSpeedController+0x4be>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_right(&pwm_right_working);
			//PORTB |= (1 << 5);
		} else {
			//PORTB &= ~(1 << 6);
			start_vertical_speed_control_right(&pwm_right_working);
    610e:	8b e0       	ldi	r24, 0x0B	; 11
    6110:	93 e0       	ldi	r25, 0x03	; 3
    6112:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <start_vertical_speed_control_right>
			//PORTB |= (1 << 6);
		}

		pwm_right = pwm_right_working;
    6116:	80 91 0b 03 	lds	r24, 0x030B
    611a:	90 91 0c 03 	lds	r25, 0x030C
    611e:	90 93 f4 02 	sts	0x02F4, r25
    6122:	80 93 f3 02 	sts	0x02F3, r24

		if(pwm_right > 0) {
    6126:	18 16       	cp	r1, r24
    6128:	19 06       	cpc	r1, r25
    612a:	0c f0       	brlt	.+2      	; 0x612e <handleMotorsWithSpeedController+0x450>
    612c:	95 c0       	rjmp	.+298    	; 0x6258 <handleMotorsWithSpeedController+0x57a>
			OCR3A = (unsigned int)pwm_right;
    612e:	90 93 99 00 	sts	0x0099, r25
    6132:	80 93 98 00 	sts	0x0098, r24
		} else {
			OCR3A = 0;
			OCR3B = 0;
		}

		computeOdometry++;
    6136:	80 91 9f 04 	lds	r24, 0x049F
    613a:	8f 5f       	subi	r24, 0xFF	; 255
    613c:	80 93 9f 04 	sts	0x049F, r24
    6140:	ad ce       	rjmp	.-678    	; 0x5e9c <handleMotorsWithSpeedController+0x1be>
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_BW_SC);
		}
	}

	if(obstacleAvoidanceEnabled) {
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
    6142:	8d e0       	ldi	r24, 0x0D	; 13
    6144:	93 e0       	ldi	r25, 0x03	; 3
    6146:	6b e0       	ldi	r22, 0x0B	; 11
    6148:	73 e0       	ldi	r23, 0x03	; 3
    614a:	0e 94 a4 34 	call	0x6948	; 0x6948 <obstacleAvoidance>
    614e:	80 91 0d 03 	lds	r24, 0x030D
    6152:	90 91 0e 03 	lds	r25, 0x030E
    6156:	f7 cd       	rjmp	.-1042   	; 0x5d46 <handleMotorsWithSpeedController+0x68>
}

void handleMotorsWithSpeedController() {

	if(calibrateOdomFlag==1) {
		pwm_right_working = pwm_intermediate_right_desired;
    6158:	80 91 fb 02 	lds	r24, 0x02FB
    615c:	90 91 fc 02 	lds	r25, 0x02FC
    6160:	90 93 0c 03 	sts	0x030C, r25
    6164:	80 93 0b 03 	sts	0x030B, r24
		pwm_left_working = pwm_intermediate_left_desired;
    6168:	80 91 fd 02 	lds	r24, 0x02FD
    616c:	90 91 fe 02 	lds	r25, 0x02FE
    6170:	90 93 0e 03 	sts	0x030E, r25
    6174:	80 93 0d 03 	sts	0x030D, r24
    6178:	e1 cd       	rjmp	.-1086   	; 0x5d3c <handleMotorsWithSpeedController+0x5e>

		deltaDist = ((rightDist-rightDistPrev)+(leftDist-leftDistPrev))/2.0;

		if(robotPosition == HORIZONTAL_POS) {
			//thetaOld = (rightMotSteps - leftMotSteps)/WHEEL_DIST;	// radians
			theta = (rightDist-leftDist)/WHEEL_DIST;
    617a:	c4 01       	movw	r24, r8
    617c:	b3 01       	movw	r22, r6
    617e:	a2 01       	movw	r20, r4
    6180:	91 01       	movw	r18, r2
    6182:	0e 94 31 3f 	call	0x7e62	; 0x7e62 <__subsf3>
    6186:	20 e0       	ldi	r18, 0x00	; 0
    6188:	30 e0       	ldi	r19, 0x00	; 0
    618a:	4e e1       	ldi	r20, 0x1E	; 30
    618c:	52 e4       	ldi	r21, 0x42	; 66
    618e:	0e 94 ff 3f 	call	0x7ffe	; 0x7ffe <__divsf3>
    6192:	f6 2e       	mov	r15, r22
    6194:	07 2f       	mov	r16, r23
    6196:	18 2f       	mov	r17, r24
    6198:	e9 2e       	mov	r14, r25
    619a:	da ce       	rjmp	.-588    	; 0x5f50 <handleMotorsWithSpeedController+0x272>
		}
*/

		if(robotPosition == HORIZONTAL_POS) {
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_right(&pwm_right_working);
    619c:	8b e0       	ldi	r24, 0x0B	; 11
    619e:	93 e0       	ldi	r25, 0x03	; 3
    61a0:	0e 94 a9 18 	call	0x3152	; 0x3152 <start_horizontal_speed_control_right>
    61a4:	b8 cf       	rjmp	.-144    	; 0x6116 <handleMotorsWithSpeedController+0x438>
		last_left_vel = left_vel_sum>>2;
		compute_left_vel = 0;
		left_vel_sum = 0;
		
		if(calibrateOdomFlag==1) {
			leftSpeedSumOdom += last_left_vel;
    61a6:	44 27       	eor	r20, r20
    61a8:	37 fd       	sbrc	r19, 7
    61aa:	40 95       	com	r20
    61ac:	54 2f       	mov	r21, r20
    61ae:	80 91 a4 04 	lds	r24, 0x04A4
    61b2:	90 91 a5 04 	lds	r25, 0x04A5
    61b6:	a0 91 a6 04 	lds	r26, 0x04A6
    61ba:	b0 91 a7 04 	lds	r27, 0x04A7
    61be:	82 0f       	add	r24, r18
    61c0:	93 1f       	adc	r25, r19
    61c2:	a4 1f       	adc	r26, r20
    61c4:	b5 1f       	adc	r27, r21
    61c6:	80 93 a4 04 	sts	0x04A4, r24
    61ca:	90 93 a5 04 	sts	0x04A5, r25
    61ce:	a0 93 a6 04 	sts	0x04A6, r26
    61d2:	b0 93 a7 04 	sts	0x04A7, r27
			leftSumCount++;
    61d6:	80 91 ac 04 	lds	r24, 0x04AC
    61da:	90 91 ad 04 	lds	r25, 0x04AD
    61de:	01 96       	adiw	r24, 0x01	; 1
    61e0:	90 93 ad 04 	sts	0x04AD, r25
    61e4:	80 93 ac 04 	sts	0x04AC, r24
    61e8:	d6 cd       	rjmp	.-1108   	; 0x5d96 <handleMotorsWithSpeedController+0xb8>
		}

*/
		if(robotPosition == HORIZONTAL_POS) {
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_left(&pwm_left_working);
    61ea:	8d e0       	ldi	r24, 0x0D	; 13
    61ec:	93 e0       	ldi	r25, 0x03	; 3
    61ee:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <start_horizontal_speed_control_left>
    61f2:	38 ce       	rjmp	.-912    	; 0x5e64 <handleMotorsWithSpeedController+0x186>
		last_right_vel = right_vel_sum>>2;
		compute_right_vel = 0;
		right_vel_sum = 0;

		if(calibrateOdomFlag==1) {
			rightSpeedSumOdom += last_right_vel;
    61f4:	44 27       	eor	r20, r20
    61f6:	37 fd       	sbrc	r19, 7
    61f8:	40 95       	com	r20
    61fa:	54 2f       	mov	r21, r20
    61fc:	80 91 a8 04 	lds	r24, 0x04A8
    6200:	90 91 a9 04 	lds	r25, 0x04A9
    6204:	a0 91 aa 04 	lds	r26, 0x04AA
    6208:	b0 91 ab 04 	lds	r27, 0x04AB
    620c:	82 0f       	add	r24, r18
    620e:	93 1f       	adc	r25, r19
    6210:	a4 1f       	adc	r26, r20
    6212:	b5 1f       	adc	r27, r21
    6214:	80 93 a8 04 	sts	0x04A8, r24
    6218:	90 93 a9 04 	sts	0x04A9, r25
    621c:	a0 93 aa 04 	sts	0x04AA, r26
    6220:	b0 93 ab 04 	sts	0x04AB, r27
			rightSumCount++;
    6224:	80 91 ae 04 	lds	r24, 0x04AE
    6228:	90 91 af 04 	lds	r25, 0x04AF
    622c:	01 96       	adiw	r24, 0x01	; 1
    622e:	90 93 af 04 	sts	0x04AF, r25
    6232:	80 93 ae 04 	sts	0x04AE, r24
    6236:	08 cf       	rjmp	.-496    	; 0x6048 <handleMotorsWithSpeedController+0x36a>
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_BW_SC);
		}
		if(pwm_intermediate_left_desired >= 0) {		// pwm in the range -127..127
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_FW_SC);
		} else {
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_BW_SC);
    6238:	62 e0       	ldi	r22, 0x02	; 2
    623a:	0e 94 51 26 	call	0x4ca2	; 0x4ca2 <getInputFromSpeed>
    623e:	90 93 0e 03 	sts	0x030E, r25
    6242:	80 93 0d 03 	sts	0x030D, r24
    6246:	7a cd       	rjmp	.-1292   	; 0x5d3c <handleMotorsWithSpeedController+0x5e>
		pwm_left_working = pwm_intermediate_left_desired;
	} else {
		if(pwm_intermediate_right_desired >= 0) {		// pwm in the range -127..127
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_FW_SC);
		} else {
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_BW_SC);
    6248:	63 e0       	ldi	r22, 0x03	; 3
    624a:	0e 94 51 26 	call	0x4ca2	; 0x4ca2 <getInputFromSpeed>
    624e:	90 93 0c 03 	sts	0x030C, r25
    6252:	80 93 0b 03 	sts	0x030B, r24
    6256:	65 cd       	rjmp	.-1334   	; 0x5d22 <handleMotorsWithSpeedController+0x44>

		pwm_right = pwm_right_working;

		if(pwm_right > 0) {
			OCR3A = (unsigned int)pwm_right;
		} else if(pwm_right < 0) {
    6258:	00 97       	sbiw	r24, 0x00	; 0
    625a:	a1 f4       	brne	.+40     	; 0x6284 <handleMotorsWithSpeedController+0x5a6>
			OCR3B = (unsigned int)(-pwm_right);
		} else {
			OCR3A = 0;
    625c:	10 92 99 00 	sts	0x0099, r1
    6260:	10 92 98 00 	sts	0x0098, r1
			OCR3B = 0;
    6264:	10 92 9b 00 	sts	0x009B, r1
    6268:	10 92 9a 00 	sts	0x009A, r1
    626c:	64 cf       	rjmp	.-312    	; 0x6136 <handleMotorsWithSpeedController+0x458>

		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
    626e:	00 97       	sbiw	r24, 0x00	; 0
    6270:	89 f4       	brne	.+34     	; 0x6294 <handleMotorsWithSpeedController+0x5b6>
			OCR4B =(unsigned int)( -pwm_left);
		} else {
			OCR4A = 0;
    6272:	10 92 a9 00 	sts	0x00A9, r1
    6276:	10 92 a8 00 	sts	0x00A8, r1
			OCR4B = 0;
    627a:	10 92 ab 00 	sts	0x00AB, r1
    627e:	10 92 aa 00 	sts	0x00AA, r1
    6282:	00 ce       	rjmp	.-1024   	; 0x5e84 <handleMotorsWithSpeedController+0x1a6>
		pwm_right = pwm_right_working;

		if(pwm_right > 0) {
			OCR3A = (unsigned int)pwm_right;
		} else if(pwm_right < 0) {
			OCR3B = (unsigned int)(-pwm_right);
    6284:	90 95       	com	r25
    6286:	81 95       	neg	r24
    6288:	9f 4f       	sbci	r25, 0xFF	; 255
    628a:	90 93 9b 00 	sts	0x009B, r25
    628e:	80 93 9a 00 	sts	0x009A, r24
    6292:	51 cf       	rjmp	.-350    	; 0x6136 <handleMotorsWithSpeedController+0x458>
		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
			OCR4B =(unsigned int)( -pwm_left);
    6294:	90 95       	com	r25
    6296:	81 95       	neg	r24
    6298:	9f 4f       	sbci	r25, 0xFF	; 255
    629a:	90 93 ab 00 	sts	0x00AB, r25
    629e:	80 93 aa 00 	sts	0x00AA, r24
    62a2:	f0 cd       	rjmp	.-1056   	; 0x5e84 <handleMotorsWithSpeedController+0x1a6>

000062a4 <writeDefaultCalibration>:
		speedLeftFromEnc = -speedLeftFromEnc;
    }
    
}

void writeDefaultCalibration() {
    62a4:	2f 92       	push	r2
    62a6:	3f 92       	push	r3
    62a8:	4f 92       	push	r4
    62aa:	5f 92       	push	r5
    62ac:	6f 92       	push	r6
    62ae:	7f 92       	push	r7
    62b0:	8f 92       	push	r8
    62b2:	9f 92       	push	r9
    62b4:	af 92       	push	r10
    62b6:	bf 92       	push	r11
    62b8:	cf 92       	push	r12
    62ba:	df 92       	push	r13
    62bc:	ef 92       	push	r14
    62be:	ff 92       	push	r15
    62c0:	0f 93       	push	r16
    62c2:	1f 93       	push	r17
    62c4:	cf 93       	push	r28
    62c6:	df 93       	push	r29
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    	calibration[i][0] = i+1;
	}
    // the following values are taken from a field test
    // forward left, speed control enabled
    calibration[0][0] = 20;		// measured speed with back EMF (adc 0..1023)
    62c8:	a4 e1       	ldi	r26, 0x14	; 20
    62ca:	b0 e0       	ldi	r27, 0x00	; 0
    62cc:	b0 93 de 04 	sts	0x04DE, r27
    62d0:	a0 93 dd 04 	sts	0x04DD, r26
    calibration[1][0] = 40;
    62d4:	88 e2       	ldi	r24, 0x28	; 40
    62d6:	90 e0       	ldi	r25, 0x00	; 0
    62d8:	90 93 ee 04 	sts	0x04EE, r25
    62dc:	80 93 ed 04 	sts	0x04ED, r24
    calibration[2][0] = 59;
    62e0:	6b e3       	ldi	r22, 0x3B	; 59
    62e2:	70 e0       	ldi	r23, 0x00	; 0
    62e4:	70 93 fe 04 	sts	0x04FE, r23
    62e8:	60 93 fd 04 	sts	0x04FD, r22
    calibration[3][0] = 79;
    62ec:	0f e4       	ldi	r16, 0x4F	; 79
    62ee:	10 e0       	ldi	r17, 0x00	; 0
    62f0:	10 93 0e 05 	sts	0x050E, r17
    62f4:	00 93 0d 05 	sts	0x050D, r16
    calibration[4][0] = 100;
    62f8:	84 e6       	ldi	r24, 0x64	; 100
    62fa:	90 e0       	ldi	r25, 0x00	; 0
    62fc:	90 93 1e 05 	sts	0x051E, r25
    6300:	80 93 1d 05 	sts	0x051D, r24
    calibration[5][0] = 120;
    6304:	f8 e7       	ldi	r31, 0x78	; 120
    6306:	af 2e       	mov	r10, r31
    6308:	b1 2c       	mov	r11, r1
    630a:	b0 92 2e 05 	sts	0x052E, r11
    630e:	a0 92 2d 05 	sts	0x052D, r10
    calibration[6][0] = 139;
    6312:	8b e8       	ldi	r24, 0x8B	; 139
    6314:	90 e0       	ldi	r25, 0x00	; 0
    6316:	90 93 3e 05 	sts	0x053E, r25
    631a:	80 93 3d 05 	sts	0x053D, r24
    calibration[7][0] = 159;
    631e:	2f e9       	ldi	r18, 0x9F	; 159
    6320:	30 e0       	ldi	r19, 0x00	; 0
    6322:	30 93 4e 05 	sts	0x054E, r19
    6326:	20 93 4d 05 	sts	0x054D, r18
	calibration[8][0] = 180;
    632a:	44 eb       	ldi	r20, 0xB4	; 180
    632c:	50 e0       	ldi	r21, 0x00	; 0
    632e:	50 93 5e 05 	sts	0x055E, r21
    6332:	40 93 5d 05 	sts	0x055D, r20
    calibration[0][1] = 19;    	// real speed measured in mm/s
    6336:	63 e1       	ldi	r22, 0x13	; 19
    6338:	70 e0       	ldi	r23, 0x00	; 0
    633a:	70 93 e0 04 	sts	0x04E0, r23
    633e:	60 93 df 04 	sts	0x04DF, r22
    calibration[1][1] = 47;
    6342:	2f e2       	ldi	r18, 0x2F	; 47
    6344:	30 e0       	ldi	r19, 0x00	; 0
    6346:	30 93 f0 04 	sts	0x04F0, r19
    634a:	20 93 ef 04 	sts	0x04EF, r18
    calibration[2][1] = 72;
    634e:	28 e4       	ldi	r18, 0x48	; 72
    6350:	30 e0       	ldi	r19, 0x00	; 0
    6352:	30 93 00 05 	sts	0x0500, r19
    6356:	20 93 ff 04 	sts	0x04FF, r18
    calibration[3][1] = 91;
    635a:	2b e5       	ldi	r18, 0x5B	; 91
    635c:	30 e0       	ldi	r19, 0x00	; 0
    635e:	30 93 10 05 	sts	0x0510, r19
    6362:	20 93 0f 05 	sts	0x050F, r18
    calibration[4][1] = 109;
    6366:	2d e6       	ldi	r18, 0x6D	; 109
    6368:	30 e0       	ldi	r19, 0x00	; 0
    636a:	30 93 20 05 	sts	0x0520, r19
    636e:	20 93 1f 05 	sts	0x051F, r18
    calibration[5][1] = 125;
    6372:	ed e7       	ldi	r30, 0x7D	; 125
    6374:	6e 2e       	mov	r6, r30
    6376:	71 2c       	mov	r7, r1
    6378:	70 92 30 05 	sts	0x0530, r7
    637c:	60 92 2f 05 	sts	0x052F, r6
    calibration[6][1] = 143;
    6380:	2f e8       	ldi	r18, 0x8F	; 143
    6382:	30 e0       	ldi	r19, 0x00	; 0
    6384:	30 93 40 05 	sts	0x0540, r19
    6388:	20 93 3f 05 	sts	0x053F, r18
    calibration[7][1] = 160;
    638c:	20 ea       	ldi	r18, 0xA0	; 160
    638e:	30 e0       	ldi	r19, 0x00	; 0
    6390:	30 93 50 05 	sts	0x0550, r19
    6394:	20 93 4f 05 	sts	0x054F, r18
	calibration[8][1] = 174;
    6398:	ee ea       	ldi	r30, 0xAE	; 174
    639a:	f0 e0       	ldi	r31, 0x00	; 0
    639c:	f0 93 60 05 	sts	0x0560, r31
    63a0:	e0 93 5f 05 	sts	0x055F, r30
    // forward right, speed control enabled
    calibration[0][2] = 19;		// measured speed with back EMF (adc 0..1023)
    63a4:	70 93 e2 04 	sts	0x04E2, r23
    63a8:	60 93 e1 04 	sts	0x04E1, r22
    calibration[1][2] = 39;
    63ac:	e7 e2       	ldi	r30, 0x27	; 39
    63ae:	f0 e0       	ldi	r31, 0x00	; 0
    63b0:	f0 93 f2 04 	sts	0x04F2, r31
    63b4:	e0 93 f1 04 	sts	0x04F1, r30
    calibration[2][2] = 60;
    63b8:	cc e3       	ldi	r28, 0x3C	; 60
    63ba:	d0 e0       	ldi	r29, 0x00	; 0
    63bc:	d0 93 02 05 	sts	0x0502, r29
    63c0:	c0 93 01 05 	sts	0x0501, r28
    calibration[3][2] = 80;
    63c4:	60 e5       	ldi	r22, 0x50	; 80
    63c6:	70 e0       	ldi	r23, 0x00	; 0
    63c8:	70 93 12 05 	sts	0x0512, r23
    63cc:	60 93 11 05 	sts	0x0511, r22
    calibration[4][2] = 99;
    63d0:	63 e6       	ldi	r22, 0x63	; 99
    63d2:	e6 2e       	mov	r14, r22
    63d4:	f1 2c       	mov	r15, r1
    63d6:	f0 92 22 05 	sts	0x0522, r15
    63da:	e0 92 21 05 	sts	0x0521, r14
    calibration[5][2] = 119;
    63de:	67 e7       	ldi	r22, 0x77	; 119
    63e0:	70 e0       	ldi	r23, 0x00	; 0
    63e2:	70 93 32 05 	sts	0x0532, r23
    63e6:	60 93 31 05 	sts	0x0531, r22
    calibration[6][2] = 140;
    63ea:	0f 2e       	mov	r0, r31
    63ec:	fc e8       	ldi	r31, 0x8C	; 140
    63ee:	cf 2e       	mov	r12, r31
    63f0:	dd 24       	eor	r13, r13
    63f2:	f0 2d       	mov	r31, r0
    63f4:	d0 92 42 05 	sts	0x0542, r13
    63f8:	c0 92 41 05 	sts	0x0541, r12
    calibration[7][2] = 160;
    63fc:	30 93 52 05 	sts	0x0552, r19
    6400:	20 93 51 05 	sts	0x0551, r18
	calibration[8][2] = 180;
    6404:	50 93 62 05 	sts	0x0562, r21
    6408:	40 93 61 05 	sts	0x0561, r20
    calibration[0][3] = 23;    	// real speed measured in mm/s
    640c:	0f 2e       	mov	r0, r31
    640e:	f7 e1       	ldi	r31, 0x17	; 23
    6410:	8f 2e       	mov	r8, r31
    6412:	99 24       	eor	r9, r9
    6414:	f0 2d       	mov	r31, r0
    6416:	90 92 e4 04 	sts	0x04E4, r9
    641a:	80 92 e3 04 	sts	0x04E3, r8
    calibration[1][3] = 46;
    641e:	0f 2e       	mov	r0, r31
    6420:	fe e2       	ldi	r31, 0x2E	; 46
    6422:	4f 2e       	mov	r4, r31
    6424:	55 24       	eor	r5, r5
    6426:	f0 2d       	mov	r31, r0
    6428:	50 92 f4 04 	sts	0x04F4, r5
    642c:	40 92 f3 04 	sts	0x04F3, r4
    calibration[2][3] = 64;
    6430:	88 24       	eor	r8, r8
    6432:	99 24       	eor	r9, r9
    6434:	68 94       	set
    6436:	86 f8       	bld	r8, 6
    6438:	90 92 04 05 	sts	0x0504, r9
    643c:	80 92 03 05 	sts	0x0503, r8
    calibration[3][3] = 81;
    6440:	0f 2e       	mov	r0, r31
    6442:	f1 e5       	ldi	r31, 0x51	; 81
    6444:	2f 2e       	mov	r2, r31
    6446:	33 24       	eor	r3, r3
    6448:	f0 2d       	mov	r31, r0
    644a:	30 92 14 05 	sts	0x0514, r3
    644e:	20 92 13 05 	sts	0x0513, r2
    calibration[4][3] = 97;
    6452:	0f 2e       	mov	r0, r31
    6454:	f1 e6       	ldi	r31, 0x61	; 97
    6456:	8f 2e       	mov	r8, r31
    6458:	99 24       	eor	r9, r9
    645a:	f0 2d       	mov	r31, r0
    645c:	90 92 24 05 	sts	0x0524, r9
    6460:	80 92 23 05 	sts	0x0523, r8
    calibration[5][3] = 112;
    6464:	0f 2e       	mov	r0, r31
    6466:	f0 e7       	ldi	r31, 0x70	; 112
    6468:	8f 2e       	mov	r8, r31
    646a:	99 24       	eor	r9, r9
    646c:	f0 2d       	mov	r31, r0
    646e:	90 92 34 05 	sts	0x0534, r9
    6472:	80 92 33 05 	sts	0x0533, r8
    calibration[6][3] = 125;
    6476:	70 92 44 05 	sts	0x0544, r7
    647a:	60 92 43 05 	sts	0x0543, r6
    calibration[7][3] = 139;
    647e:	90 93 54 05 	sts	0x0554, r25
    6482:	80 93 53 05 	sts	0x0553, r24
	calibration[8][3] = 152;
    6486:	0f 2e       	mov	r0, r31
    6488:	f8 e9       	ldi	r31, 0x98	; 152
    648a:	8f 2e       	mov	r8, r31
    648c:	99 24       	eor	r9, r9
    648e:	f0 2d       	mov	r31, r0
    6490:	90 92 64 05 	sts	0x0564, r9
    6494:	80 92 63 05 	sts	0x0563, r8
    // backward left, speed control enabled
    calibration[0][4] = 20;		// measured speed with back EMF (adc 0..1023)
    6498:	b0 93 e6 04 	sts	0x04E6, r27
    649c:	a0 93 e5 04 	sts	0x04E5, r26
    calibration[1][4] = 39;
    64a0:	f0 93 f6 04 	sts	0x04F6, r31
    64a4:	e0 93 f5 04 	sts	0x04F5, r30
    calibration[2][4] = 60;
    64a8:	d0 93 06 05 	sts	0x0506, r29
    64ac:	c0 93 05 05 	sts	0x0505, r28
    calibration[3][4] = 79;
    64b0:	10 93 16 05 	sts	0x0516, r17
    64b4:	00 93 15 05 	sts	0x0515, r16
    calibration[4][4] = 99;
    64b8:	f0 92 26 05 	sts	0x0526, r15
    64bc:	e0 92 25 05 	sts	0x0525, r14
    calibration[5][4] = 120;
    64c0:	b0 92 36 05 	sts	0x0536, r11
    64c4:	a0 92 35 05 	sts	0x0535, r10
    calibration[6][4] = 140;
    64c8:	d0 92 46 05 	sts	0x0546, r13
    64cc:	c0 92 45 05 	sts	0x0545, r12
    calibration[7][4] = 160;
    64d0:	30 93 56 05 	sts	0x0556, r19
    64d4:	20 93 55 05 	sts	0x0555, r18
	calibration[8][4] = 179;
    64d8:	c3 eb       	ldi	r28, 0xB3	; 179
    64da:	d0 e0       	ldi	r29, 0x00	; 0
    64dc:	d0 93 66 05 	sts	0x0566, r29
    64e0:	c0 93 65 05 	sts	0x0565, r28
    calibration[0][5] = 18;    	// real speed measured in mm/s
    64e4:	c2 e1       	ldi	r28, 0x12	; 18
    64e6:	d0 e0       	ldi	r29, 0x00	; 0
    64e8:	d0 93 e8 04 	sts	0x04E8, r29
    64ec:	c0 93 e7 04 	sts	0x04E7, r28
    calibration[1][5] = 45;
    64f0:	cd e2       	ldi	r28, 0x2D	; 45
    64f2:	d0 e0       	ldi	r29, 0x00	; 0
    64f4:	d0 93 f8 04 	sts	0x04F8, r29
    64f8:	c0 93 f7 04 	sts	0x04F7, r28
    calibration[2][5] = 68;
    64fc:	c4 e4       	ldi	r28, 0x44	; 68
    64fe:	d0 e0       	ldi	r29, 0x00	; 0
    6500:	d0 93 08 05 	sts	0x0508, r29
    6504:	c0 93 07 05 	sts	0x0507, r28
    calibration[3][5] = 87;
    6508:	c7 e5       	ldi	r28, 0x57	; 87
    650a:	d0 e0       	ldi	r29, 0x00	; 0
    650c:	d0 93 18 05 	sts	0x0518, r29
    6510:	c0 93 17 05 	sts	0x0517, r28
    calibration[4][5] = 105;
    6514:	c9 e6       	ldi	r28, 0x69	; 105
    6516:	d0 e0       	ldi	r29, 0x00	; 0
    6518:	d0 93 28 05 	sts	0x0528, r29
    651c:	c0 93 27 05 	sts	0x0527, r28
    calibration[5][5] = 119;
    6520:	70 93 38 05 	sts	0x0538, r23
    6524:	60 93 37 05 	sts	0x0537, r22
    calibration[6][5] = 137;
    6528:	c9 e8       	ldi	r28, 0x89	; 137
    652a:	d0 e0       	ldi	r29, 0x00	; 0
    652c:	d0 93 48 05 	sts	0x0548, r29
    6530:	c0 93 47 05 	sts	0x0547, r28
    calibration[7][5] = 151;
    6534:	c7 e9       	ldi	r28, 0x97	; 151
    6536:	d0 e0       	ldi	r29, 0x00	; 0
    6538:	d0 93 58 05 	sts	0x0558, r29
    653c:	c0 93 57 05 	sts	0x0557, r28
	calibration[8][5] = 168;
    6540:	c8 ea       	ldi	r28, 0xA8	; 168
    6542:	d0 e0       	ldi	r29, 0x00	; 0
    6544:	d0 93 68 05 	sts	0x0568, r29
    6548:	c0 93 67 05 	sts	0x0567, r28
    // backward right, speed control enabled
    calibration[0][6] = 20;		// measured speed with back EMF (adc 0..1023)
    654c:	b0 93 ea 04 	sts	0x04EA, r27
    6550:	a0 93 e9 04 	sts	0x04E9, r26
    calibration[1][6] = 39;
    6554:	f0 93 fa 04 	sts	0x04FA, r31
    6558:	e0 93 f9 04 	sts	0x04F9, r30
    calibration[2][6] = 59;
    655c:	eb e3       	ldi	r30, 0x3B	; 59
    655e:	f0 e0       	ldi	r31, 0x00	; 0
    6560:	f0 93 0a 05 	sts	0x050A, r31
    6564:	e0 93 09 05 	sts	0x0509, r30
    calibration[3][6] = 80;
    6568:	e0 e5       	ldi	r30, 0x50	; 80
    656a:	f0 e0       	ldi	r31, 0x00	; 0
    656c:	f0 93 1a 05 	sts	0x051A, r31
    6570:	e0 93 19 05 	sts	0x0519, r30
    calibration[4][6] = 100;
    6574:	e4 e6       	ldi	r30, 0x64	; 100
    6576:	f0 e0       	ldi	r31, 0x00	; 0
    6578:	f0 93 2a 05 	sts	0x052A, r31
    657c:	e0 93 29 05 	sts	0x0529, r30
    calibration[5][6] = 119;
    6580:	70 93 3a 05 	sts	0x053A, r23
    6584:	60 93 39 05 	sts	0x0539, r22
    calibration[6][6] = 139;
    6588:	90 93 4a 05 	sts	0x054A, r25
    658c:	80 93 49 05 	sts	0x0549, r24
    calibration[7][6] = 160;
    6590:	30 93 5a 05 	sts	0x055A, r19
    6594:	20 93 59 05 	sts	0x0559, r18
	calibration[8][6] = 180;
    6598:	50 93 6a 05 	sts	0x056A, r21
    659c:	40 93 69 05 	sts	0x0569, r20
    calibration[0][7] = 22;    	// real speed measured in mm/s
    65a0:	26 e1       	ldi	r18, 0x16	; 22
    65a2:	30 e0       	ldi	r19, 0x00	; 0
    65a4:	30 93 ec 04 	sts	0x04EC, r19
    65a8:	20 93 eb 04 	sts	0x04EB, r18
    calibration[1][7] = 46;
    65ac:	50 92 fc 04 	sts	0x04FC, r5
    65b0:	40 92 fb 04 	sts	0x04FB, r4
    calibration[2][7] = 65;
    65b4:	21 e4       	ldi	r18, 0x41	; 65
    65b6:	30 e0       	ldi	r19, 0x00	; 0
    65b8:	30 93 0c 05 	sts	0x050C, r19
    65bc:	20 93 0b 05 	sts	0x050B, r18
    calibration[3][7] = 81;
    65c0:	30 92 1c 05 	sts	0x051C, r3
    65c4:	20 92 1b 05 	sts	0x051B, r2
    calibration[4][7] = 96;
    65c8:	20 e6       	ldi	r18, 0x60	; 96
    65ca:	30 e0       	ldi	r19, 0x00	; 0
    65cc:	30 93 2c 05 	sts	0x052C, r19
    65d0:	20 93 2b 05 	sts	0x052B, r18
    calibration[5][7] = 111;
    65d4:	2f e6       	ldi	r18, 0x6F	; 111
    65d6:	30 e0       	ldi	r19, 0x00	; 0
    65d8:	30 93 3c 05 	sts	0x053C, r19
    65dc:	20 93 3b 05 	sts	0x053B, r18
    calibration[6][7] = 125;
    65e0:	70 92 4c 05 	sts	0x054C, r7
    65e4:	60 92 4b 05 	sts	0x054B, r6
    calibration[7][7] = 139;
    65e8:	90 93 5c 05 	sts	0x055C, r25
    65ec:	80 93 5b 05 	sts	0x055B, r24
	calibration[8][7] = 153;
    65f0:	89 e9       	ldi	r24, 0x99	; 153
    65f2:	90 e0       	ldi	r25, 0x00	; 0
    65f4:	90 93 6c 05 	sts	0x056C, r25
    65f8:	80 93 6b 05 	sts	0x056B, r24

    writeCalibrationToFlash();
    65fc:	0e 94 19 3f 	call	0x7e32	; 0x7e32 <writeCalibrationToFlash>
}
    6600:	df 91       	pop	r29
    6602:	cf 91       	pop	r28
    6604:	1f 91       	pop	r17
    6606:	0f 91       	pop	r16
    6608:	ff 90       	pop	r15
    660a:	ef 90       	pop	r14
    660c:	df 90       	pop	r13
    660e:	cf 90       	pop	r12
    6610:	bf 90       	pop	r11
    6612:	af 90       	pop	r10
    6614:	9f 90       	pop	r9
    6616:	8f 90       	pop	r8
    6618:	7f 90       	pop	r7
    661a:	6f 90       	pop	r6
    661c:	5f 90       	pop	r5
    661e:	4f 90       	pop	r4
    6620:	3f 90       	pop	r3
    6622:	2f 90       	pop	r2
    6624:	08 95       	ret

00006626 <initCalibration>:

void initCalibration() {

    unsigned int temp=0;
 
 	temp = eeprom_read_word((uint16_t*)CALIB_CHECK_ADDRESS);
    6626:	8a e6       	ldi	r24, 0x6A	; 106
    6628:	9f e0       	ldi	r25, 0x0F	; 15
    662a:	0e 94 33 43 	call	0x8666	; 0x8666 <__eerd_word_m2560>

    if(temp==0xAA55) {   // valid odometry data saved in flash, read them
    662e:	2a ea       	ldi	r18, 0xAA	; 170
    6630:	85 35       	cpi	r24, 0x55	; 85
    6632:	92 07       	cpc	r25, r18
    6634:	19 f0       	breq	.+6      	; 0x663c <initCalibration+0x16>
        readCalibrationFromFlash();
    } else {
		writeDefaultCalibration();		
    6636:	0e 94 52 31 	call	0x62a4	; 0x62a4 <writeDefaultCalibration>
    663a:	08 95       	ret
    unsigned int temp=0;
 
 	temp = eeprom_read_word((uint16_t*)CALIB_CHECK_ADDRESS);

    if(temp==0xAA55) {   // valid odometry data saved in flash, read them
        readCalibrationFromFlash();
    663c:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <readCalibrationFromFlash>
    6640:	08 95       	ret

00006642 <__vector_45>:
    }

}

// Motor left
ISR(TIMER4_OVF_vect) {
    6642:	1f 92       	push	r1
    6644:	0f 92       	push	r0
    6646:	0f b6       	in	r0, 0x3f	; 63
    6648:	0f 92       	push	r0
    664a:	11 24       	eor	r1, r1
    664c:	8f 93       	push	r24
    664e:	9f 93       	push	r25

//	LED_GREEN_ON;

	if(cliffDetectedFlag) {
    6650:	80 91 6a 04 	lds	r24, 0x046A
    6654:	88 23       	and	r24, r24
    6656:	61 f0       	breq	.+24     	; 0x6670 <__vector_45+0x2e>
		pwm_left = 0;
    6658:	10 92 f6 02 	sts	0x02F6, r1
    665c:	10 92 f5 02 	sts	0x02F5, r1
		OCR4A = 0;
    6660:	10 92 a9 00 	sts	0x00A9, r1
    6664:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    6668:	10 92 ab 00 	sts	0x00AB, r1
    666c:	10 92 aa 00 	sts	0x00AA, r1
	}

	left_current_avg = 0;
    6670:	10 92 e0 02 	sts	0x02E0, r1
    6674:	10 92 df 02 	sts	0x02DF, r1

	// set pins mode based on controller output
	if(pwm_left == 0) {
    6678:	80 91 f5 02 	lds	r24, 0x02F5
    667c:	90 91 f6 02 	lds	r25, 0x02F6
    6680:	00 97       	sbiw	r24, 0x00	; 0
    6682:	41 f5       	brne	.+80     	; 0x66d4 <__vector_45+0x92>


		//leftMotorPhase = NO_PHASE;
		//compute_left_vel = 1;

		if(pwm_left_desired_to_control >= 0) {
    6684:	80 91 e9 02 	lds	r24, 0x02E9
    6688:	90 91 ea 02 	lds	r25, 0x02EA
    668c:	97 fd       	sbrc	r25, 7
    668e:	69 c0       	rjmp	.+210    	; 0x6762 <__vector_45+0x120>
			leftMotorPhase = PASSIVE_PHASE;
    6690:	81 e0       	ldi	r24, 0x01	; 1
    6692:	80 93 26 02 	sts	0x0226, r24
			currentMotLeftChannel = 14;
    6696:	8e e0       	ldi	r24, 0x0E	; 14
    6698:	80 93 23 02 	sts	0x0223, r24
		} else {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 15;
		}
		firstSampleLeft = 1;
    669c:	81 e0       	ldi	r24, 0x01	; 1
    669e:	80 93 0a 02 	sts	0x020A, r24

		// select channel 15 to sample left current
		//currentMotLeftChannel = 15;
		TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    66a2:	80 91 a0 00 	lds	r24, 0x00A0
    66a6:	8f 75       	andi	r24, 0x5F	; 95
    66a8:	80 93 a0 00 	sts	0x00A0, r24
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    66ac:	80 91 02 01 	lds	r24, 0x0102
    66b0:	87 7e       	andi	r24, 0xE7	; 231
    66b2:	80 93 02 01 	sts	0x0102, r24
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
    66b6:	80 91 72 00 	lds	r24, 0x0072
    66ba:	89 7f       	andi	r24, 0xF9	; 249
    66bc:	80 93 72 00 	sts	0x0072, r24
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
    66c0:	89 b3       	in	r24, 0x19	; 25
    66c2:	86 60       	ori	r24, 0x06	; 6
    66c4:	89 bb       	out	0x19, r24	; 25
	}
*/

//	LED_GREEN_OFF;

}
    66c6:	9f 91       	pop	r25
    66c8:	8f 91       	pop	r24
    66ca:	0f 90       	pop	r0
    66cc:	0f be       	out	0x3f, r0	; 63
    66ce:	0f 90       	pop	r0
    66d0:	1f 90       	pop	r1
    66d2:	18 95       	reti
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
	} else if(pwm_left > 0) {   		// move forward
    66d4:	18 16       	cp	r1, r24
    66d6:	19 06       	cpc	r1, r25
    66d8:	2c f5       	brge	.+74     	; 0x6724 <__vector_45+0xe2>
		leftMotorPhase = ACTIVE_PHASE;
    66da:	10 92 26 02 	sts	0x0226, r1
		// select channel 15 to sample left current
		currentMotLeftChannel = 15;
    66de:	8f e0       	ldi	r24, 0x0F	; 15
    66e0:	80 93 23 02 	sts	0x0223, r24
		TCCR4A  &= ~(1 << COM4B1);		// disable OCB
    66e4:	80 91 a0 00 	lds	r24, 0x00A0
    66e8:	8f 7d       	andi	r24, 0xDF	; 223
    66ea:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
    66ee:	80 91 72 00 	lds	r24, 0x0072
    66f2:	8b 7f       	andi	r24, 0xFB	; 251
    66f4:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 4);				// output to 0
    66f8:	80 91 02 01 	lds	r24, 0x0102
    66fc:	8f 7e       	andi	r24, 0xEF	; 239
    66fe:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4A1);		// enable OCA
    6702:	80 91 a0 00 	lds	r24, 0x00A0
    6706:	80 68       	ori	r24, 0x80	; 128
    6708:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
    670c:	80 91 72 00 	lds	r24, 0x0072
    6710:	82 60       	ori	r24, 0x02	; 2
    6712:	80 93 72 00 	sts	0x0072, r24
	}
*/

//	LED_GREEN_OFF;

}
    6716:	9f 91       	pop	r25
    6718:	8f 91       	pop	r24
    671a:	0f 90       	pop	r0
    671c:	0f be       	out	0x3f, r0	; 63
    671e:	0f 90       	pop	r0
    6720:	1f 90       	pop	r1
    6722:	18 95       	reti
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
		PORTH &= ~(1 << 4);				// output to 0
		TCCR4A |= (1 << COM4A1);		// enable OCA
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
	} else if(pwm_left < 0) {      		// move backward
		leftMotorPhase = ACTIVE_PHASE;
    6724:	10 92 26 02 	sts	0x0226, r1
		// select channel 14 to sample left current
		currentMotLeftChannel = 14;
    6728:	8e e0       	ldi	r24, 0x0E	; 14
    672a:	80 93 23 02 	sts	0x0223, r24
		TCCR4A  &= ~(1 << COM4A1);		// disable OCA
    672e:	80 91 a0 00 	lds	r24, 0x00A0
    6732:	8f 77       	andi	r24, 0x7F	; 127
    6734:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4A);		// disable OCA interrupt
    6738:	80 91 72 00 	lds	r24, 0x0072
    673c:	8d 7f       	andi	r24, 0xFD	; 253
    673e:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 3);				// output to 0
    6742:	80 91 02 01 	lds	r24, 0x0102
    6746:	87 7f       	andi	r24, 0xF7	; 247
    6748:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4B1);		// enable OCB
    674c:	80 91 a0 00 	lds	r24, 0x00A0
    6750:	80 62       	ori	r24, 0x20	; 32
    6752:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
    6756:	80 91 72 00 	lds	r24, 0x0072
    675a:	84 60       	ori	r24, 0x04	; 4
    675c:	80 93 72 00 	sts	0x0072, r24
    6760:	b2 cf       	rjmp	.-156    	; 0x66c6 <__vector_45+0x84>

		if(pwm_left_desired_to_control >= 0) {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 14;
		} else {
			leftMotorPhase = PASSIVE_PHASE;
    6762:	81 e0       	ldi	r24, 0x01	; 1
    6764:	80 93 26 02 	sts	0x0226, r24
			currentMotLeftChannel = 15;
    6768:	8f e0       	ldi	r24, 0x0F	; 15
    676a:	80 93 23 02 	sts	0x0223, r24
    676e:	96 cf       	rjmp	.-212    	; 0x669c <__vector_45+0x5a>

00006770 <__vector_42>:
//	LED_GREEN_OFF;

}

// motor left forward
ISR(TIMER4_COMPA_vect) {
    6770:	1f 92       	push	r1
    6772:	0f 92       	push	r0
    6774:	0f b6       	in	r0, 0x3f	; 63
    6776:	0f 92       	push	r0
    6778:	11 24       	eor	r1, r1
    677a:	8f 93       	push	r24
    677c:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    677e:	81 e0       	ldi	r24, 0x01	; 1
    6780:	80 93 26 02 	sts	0x0226, r24
	// select channel 14 to sample the left velocity
	currentMotLeftChannel = 14;
    6784:	9e e0       	ldi	r25, 0x0E	; 14
    6786:	90 93 23 02 	sts	0x0223, r25

	firstSampleLeft = 1;
    678a:	80 93 0a 02 	sts	0x020A, r24

//	LED_GREEN_OFF;

}
    678e:	9f 91       	pop	r25
    6790:	8f 91       	pop	r24
    6792:	0f 90       	pop	r0
    6794:	0f be       	out	0x3f, r0	; 63
    6796:	0f 90       	pop	r0
    6798:	1f 90       	pop	r1
    679a:	18 95       	reti

0000679c <__vector_43>:

// motor left backward
ISR(TIMER4_COMPB_vect) {
    679c:	1f 92       	push	r1
    679e:	0f 92       	push	r0
    67a0:	0f b6       	in	r0, 0x3f	; 63
    67a2:	0f 92       	push	r0
    67a4:	11 24       	eor	r1, r1
    67a6:	8f 93       	push	r24
    67a8:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    67aa:	81 e0       	ldi	r24, 0x01	; 1
    67ac:	80 93 26 02 	sts	0x0226, r24
	// select channel 15 to sample the left velocity
	currentMotLeftChannel = 15;
    67b0:	9f e0       	ldi	r25, 0x0F	; 15
    67b2:	90 93 23 02 	sts	0x0223, r25

	firstSampleLeft = 1;
    67b6:	80 93 0a 02 	sts	0x020A, r24

//	LED_GREEN_OFF;

}
    67ba:	9f 91       	pop	r25
    67bc:	8f 91       	pop	r24
    67be:	0f 90       	pop	r0
    67c0:	0f be       	out	0x3f, r0	; 63
    67c2:	0f 90       	pop	r0
    67c4:	1f 90       	pop	r1
    67c6:	18 95       	reti

000067c8 <__vector_35>:

// Motor right
ISR(TIMER3_OVF_vect) {
    67c8:	1f 92       	push	r1
    67ca:	0f 92       	push	r0
    67cc:	0f b6       	in	r0, 0x3f	; 63
    67ce:	0f 92       	push	r0
    67d0:	11 24       	eor	r1, r1
    67d2:	8f 93       	push	r24
    67d4:	9f 93       	push	r25

//	LED_GREEN_ON;

  	// PORTB ^= (1 << 7); // Toggle the LED

	if(cliffDetectedFlag) {
    67d6:	80 91 6a 04 	lds	r24, 0x046A
    67da:	88 23       	and	r24, r24
    67dc:	61 f0       	breq	.+24     	; 0x67f6 <__vector_35+0x2e>
		pwm_right = 0;
    67de:	10 92 f4 02 	sts	0x02F4, r1
    67e2:	10 92 f3 02 	sts	0x02F3, r1
		OCR3A = 0;
    67e6:	10 92 99 00 	sts	0x0099, r1
    67ea:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    67ee:	10 92 9b 00 	sts	0x009B, r1
    67f2:	10 92 9a 00 	sts	0x009A, r1
	}

	right_current_avg = 0;
    67f6:	10 92 e2 02 	sts	0x02E2, r1
    67fa:	10 92 e1 02 	sts	0x02E1, r1


	if(pwm_right == 0) {
    67fe:	80 91 f3 02 	lds	r24, 0x02F3
    6802:	90 91 f4 02 	lds	r25, 0x02F4
    6806:	00 97       	sbiw	r24, 0x00	; 0
    6808:	31 f5       	brne	.+76     	; 0x6856 <__vector_35+0x8e>
		//firstSampleRight = 0;

		//rightMotorPhase = NO_PHASE;
		//compute_right_vel = 1;

		if(pwm_right_desired_to_control >= 0) {
    680a:	80 91 e7 02 	lds	r24, 0x02E7
    680e:	90 91 e8 02 	lds	r25, 0x02E8
    6812:	97 fd       	sbrc	r25, 7
    6814:	5f c0       	rjmp	.+190    	; 0x68d4 <__vector_35+0x10c>
			rightMotorPhase = PASSIVE_PHASE;
    6816:	81 e0       	ldi	r24, 0x01	; 1
    6818:	80 93 25 02 	sts	0x0225, r24
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
    681c:	8c e0       	ldi	r24, 0x0C	; 12
    681e:	80 93 24 02 	sts	0x0224, r24
		} else {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
		}
		firstSampleRight = 1;
    6822:	81 e0       	ldi	r24, 0x01	; 1
    6824:	80 93 09 02 	sts	0x0209, r24

		// select channel 13 to sample left current
		//currentMotRightChannel = 13;
		TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    6828:	80 91 90 00 	lds	r24, 0x0090
    682c:	8f 75       	andi	r24, 0x5F	; 95
    682e:	80 93 90 00 	sts	0x0090, r24
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    6832:	8e b1       	in	r24, 0x0e	; 14
    6834:	87 7e       	andi	r24, 0xE7	; 231
    6836:	8e b9       	out	0x0e, r24	; 14
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
    6838:	80 91 71 00 	lds	r24, 0x0071
    683c:	89 7f       	andi	r24, 0xF9	; 249
    683e:	80 93 71 00 	sts	0x0071, r24
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
    6842:	88 b3       	in	r24, 0x18	; 24
    6844:	86 60       	ori	r24, 0x06	; 6
    6846:	88 bb       	out	0x18, r24	; 24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    6848:	9f 91       	pop	r25
    684a:	8f 91       	pop	r24
    684c:	0f 90       	pop	r0
    684e:	0f be       	out	0x3f, r0	; 63
    6850:	0f 90       	pop	r0
    6852:	1f 90       	pop	r1
    6854:	18 95       	reti
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
	}else if(pwm_right > 0) {   		// move forward
    6856:	18 16       	cp	r1, r24
    6858:	19 06       	cpc	r1, r25
    685a:	0c f5       	brge	.+66     	; 0x689e <__vector_35+0xd6>
		rightMotorPhase = ACTIVE_PHASE;
    685c:	10 92 25 02 	sts	0x0225, r1
		// select channel 13 to sample left current
		currentMotRightChannel = 13;
    6860:	8d e0       	ldi	r24, 0x0D	; 13
    6862:	80 93 24 02 	sts	0x0224, r24
		TCCR3A  &= ~(1 << COM3B1);		// disable OCB
    6866:	80 91 90 00 	lds	r24, 0x0090
    686a:	8f 7d       	andi	r24, 0xDF	; 223
    686c:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
    6870:	80 91 71 00 	lds	r24, 0x0071
    6874:	8b 7f       	andi	r24, 0xFB	; 251
    6876:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 4);				// output to 0
    687a:	74 98       	cbi	0x0e, 4	; 14
		TCCR3A |= (1 << COM3A1);		// enable OCA
    687c:	80 91 90 00 	lds	r24, 0x0090
    6880:	80 68       	ori	r24, 0x80	; 128
    6882:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
    6886:	80 91 71 00 	lds	r24, 0x0071
    688a:	82 60       	ori	r24, 0x02	; 2
    688c:	80 93 71 00 	sts	0x0071, r24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    6890:	9f 91       	pop	r25
    6892:	8f 91       	pop	r24
    6894:	0f 90       	pop	r0
    6896:	0f be       	out	0x3f, r0	; 63
    6898:	0f 90       	pop	r0
    689a:	1f 90       	pop	r1
    689c:	18 95       	reti
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
		PORTE &= ~(1 << 4);				// output to 0
		TCCR3A |= (1 << COM3A1);		// enable OCA
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
	} else if(pwm_right < 0) {      	// move backward
		rightMotorPhase = ACTIVE_PHASE;
    689e:	10 92 25 02 	sts	0x0225, r1
		// select channel 12 to sample left current
		currentMotRightChannel = 12;
    68a2:	8c e0       	ldi	r24, 0x0C	; 12
    68a4:	80 93 24 02 	sts	0x0224, r24
		TCCR3A  &= ~(1 << COM3A1);		// disable OCA
    68a8:	80 91 90 00 	lds	r24, 0x0090
    68ac:	8f 77       	andi	r24, 0x7F	; 127
    68ae:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3A);		// disable OCA interrupt
    68b2:	80 91 71 00 	lds	r24, 0x0071
    68b6:	8d 7f       	andi	r24, 0xFD	; 253
    68b8:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 3);				// output to 0
    68bc:	73 98       	cbi	0x0e, 3	; 14
		TCCR3A |= (1 << COM3B1);		// enable OCB
    68be:	80 91 90 00 	lds	r24, 0x0090
    68c2:	80 62       	ori	r24, 0x20	; 32
    68c4:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3B);		// enable OCB interrupt
    68c8:	80 91 71 00 	lds	r24, 0x0071
    68cc:	84 60       	ori	r24, 0x04	; 4
    68ce:	80 93 71 00 	sts	0x0071, r24
    68d2:	ba cf       	rjmp	.-140    	; 0x6848 <__vector_35+0x80>
		if(pwm_right_desired_to_control >= 0) {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
		} else {
			rightMotorPhase = PASSIVE_PHASE;
    68d4:	81 e0       	ldi	r24, 0x01	; 1
    68d6:	80 93 25 02 	sts	0x0225, r24
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
    68da:	8d e0       	ldi	r24, 0x0D	; 13
    68dc:	80 93 24 02 	sts	0x0224, r24
    68e0:	a0 cf       	rjmp	.-192    	; 0x6822 <__vector_35+0x5a>

000068e2 <__vector_32>:
//	LED_GREEN_OFF;

}

// motor right forward
ISR(TIMER3_COMPA_vect) {
    68e2:	1f 92       	push	r1
    68e4:	0f 92       	push	r0
    68e6:	0f b6       	in	r0, 0x3f	; 63
    68e8:	0f 92       	push	r0
    68ea:	11 24       	eor	r1, r1
    68ec:	8f 93       	push	r24
    68ee:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    68f0:	81 e0       	ldi	r24, 0x01	; 1
    68f2:	80 93 25 02 	sts	0x0225, r24
	// select channel 12 to sample the right velocity
	currentMotRightChannel = 12;
    68f6:	9c e0       	ldi	r25, 0x0C	; 12
    68f8:	90 93 24 02 	sts	0x0224, r25

	firstSampleRight = 1;
    68fc:	80 93 09 02 	sts	0x0209, r24

//	LED_RED_OFF;

}
    6900:	9f 91       	pop	r25
    6902:	8f 91       	pop	r24
    6904:	0f 90       	pop	r0
    6906:	0f be       	out	0x3f, r0	; 63
    6908:	0f 90       	pop	r0
    690a:	1f 90       	pop	r1
    690c:	18 95       	reti

0000690e <__vector_33>:

// motor right backward
ISR(TIMER3_COMPB_vect) {
    690e:	1f 92       	push	r1
    6910:	0f 92       	push	r0
    6912:	0f b6       	in	r0, 0x3f	; 63
    6914:	0f 92       	push	r0
    6916:	11 24       	eor	r1, r1
    6918:	8f 93       	push	r24
    691a:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    691c:	81 e0       	ldi	r24, 0x01	; 1
    691e:	80 93 25 02 	sts	0x0225, r24
	// select channel 13 to sample the right velocity
	currentMotRightChannel = 13;
    6922:	9d e0       	ldi	r25, 0x0D	; 13
    6924:	90 93 24 02 	sts	0x0224, r25

	firstSampleRight = 1;
    6928:	80 93 09 02 	sts	0x0209, r24

//	LED_RED_OFF;
}
    692c:	9f 91       	pop	r25
    692e:	8f 91       	pop	r24
    6930:	0f 90       	pop	r0
    6932:	0f be       	out	0x3f, r0	; 63
    6934:	0f 90       	pop	r0
    6936:	1f 90       	pop	r1
    6938:	18 95       	reti

0000693a <initBehaviors>:

#include "behaviors.h"

void initBehaviors() {

	srand(TCNT3);	// initialize random seed (used in obstacle avoidance)
    693a:	80 91 94 00 	lds	r24, 0x0094
    693e:	90 91 95 00 	lds	r25, 0x0095
    6942:	0e 94 10 43 	call	0x8620	; 0x8620 <srand>

}
    6946:	08 95       	ret

00006948 <obstacleAvoidance>:

void obstacleAvoidance(signed int *pwmLeft, signed int *pwmRight) {
    6948:	2f 92       	push	r2
    694a:	3f 92       	push	r3
    694c:	4f 92       	push	r4
    694e:	5f 92       	push	r5
    6950:	6f 92       	push	r6
    6952:	7f 92       	push	r7
    6954:	8f 92       	push	r8
    6956:	9f 92       	push	r9
    6958:	af 92       	push	r10
    695a:	bf 92       	push	r11
    695c:	cf 92       	push	r12
    695e:	df 92       	push	r13
    6960:	ef 92       	push	r14
    6962:	ff 92       	push	r15
    6964:	0f 93       	push	r16
    6966:	1f 93       	push	r17
    6968:	df 93       	push	r29
    696a:	cf 93       	push	r28
    696c:	cd b7       	in	r28, 0x3d	; 61
    696e:	de b7       	in	r29, 0x3e	; 62
    6970:	28 97       	sbiw	r28, 0x08	; 8
    6972:	0f b6       	in	r0, 0x3f	; 63
    6974:	f8 94       	cli
    6976:	de bf       	out	0x3e, r29	; 62
    6978:	0f be       	out	0x3f, r0	; 63
    697a:	cd bf       	out	0x3d, r28	; 61
    697c:	3c 01       	movw	r6, r24
    697e:	7a 83       	std	Y+2, r23	; 0x02
    6980:	69 83       	std	Y+1, r22	; 0x01
	//	y	0		0.5		1		0.5		0		-0.5	-1		-0.5

	unsigned int i=0;
	signed int long res=0;
	signed int sumSensorsX=0, sumSensorsY=0;
	signed int desL=*pwmLeft, desR=*pwmRight;
    6982:	fc 01       	movw	r30, r24
    6984:	01 90       	ld	r0, Z+
    6986:	f0 81       	ld	r31, Z
    6988:	e0 2d       	mov	r30, r0
    698a:	fc 83       	std	Y+4, r31	; 0x04
    698c:	eb 83       	std	Y+3, r30	; 0x03
    698e:	fb 01       	movw	r30, r22
    6990:	01 90       	ld	r0, Z+
    6992:	f0 81       	ld	r31, Z
    6994:	e0 2d       	mov	r30, r0
    6996:	fe 83       	std	Y+6, r31	; 0x06
    6998:	ed 83       	std	Y+5, r30	; 0x05

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    699a:	00 91 bf 02 	lds	r16, 0x02BF
    699e:	10 91 c0 02 	lds	r17, 0x02C0
    69a2:	05 30       	cpi	r16, 0x05	; 5
    69a4:	11 05       	cpc	r17, r1
    69a6:	34 f4       	brge	.+12     	; 0x69b4 <obstacleAvoidance+0x6c>
			proximityResultLinear[i] = 0;
    69a8:	10 92 c0 02 	sts	0x02C0, r1
    69ac:	10 92 bf 02 	sts	0x02BF, r1
    69b0:	00 e0       	ldi	r16, 0x00	; 0
    69b2:	10 e0       	ldi	r17, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    69b4:	60 91 c1 02 	lds	r22, 0x02C1
    69b8:	70 91 c2 02 	lds	r23, 0x02C2
    69bc:	65 30       	cpi	r22, 0x05	; 5
    69be:	71 05       	cpc	r23, r1
    69c0:	34 f4       	brge	.+12     	; 0x69ce <obstacleAvoidance+0x86>
			proximityResultLinear[i] = 0;
    69c2:	10 92 c2 02 	sts	0x02C2, r1
    69c6:	10 92 c1 02 	sts	0x02C1, r1
    69ca:	60 e0       	ldi	r22, 0x00	; 0
    69cc:	70 e0       	ldi	r23, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    69ce:	80 91 c3 02 	lds	r24, 0x02C3
    69d2:	90 91 c4 02 	lds	r25, 0x02C4
    69d6:	85 30       	cpi	r24, 0x05	; 5
    69d8:	91 05       	cpc	r25, r1
    69da:	24 f4       	brge	.+8      	; 0x69e4 <obstacleAvoidance+0x9c>
			proximityResultLinear[i] = 0;
    69dc:	10 92 c4 02 	sts	0x02C4, r1
    69e0:	10 92 c3 02 	sts	0x02C3, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    69e4:	40 91 c5 02 	lds	r20, 0x02C5
    69e8:	50 91 c6 02 	lds	r21, 0x02C6
    69ec:	45 30       	cpi	r20, 0x05	; 5
    69ee:	51 05       	cpc	r21, r1
    69f0:	34 f4       	brge	.+12     	; 0x69fe <obstacleAvoidance+0xb6>
			proximityResultLinear[i] = 0;
    69f2:	10 92 c6 02 	sts	0x02C6, r1
    69f6:	10 92 c5 02 	sts	0x02C5, r1
    69fa:	40 e0       	ldi	r20, 0x00	; 0
    69fc:	50 e0       	ldi	r21, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    69fe:	40 90 c7 02 	lds	r4, 0x02C7
    6a02:	50 90 c8 02 	lds	r5, 0x02C8
    6a06:	f5 e0       	ldi	r31, 0x05	; 5
    6a08:	4f 16       	cp	r4, r31
    6a0a:	51 04       	cpc	r5, r1
    6a0c:	34 f4       	brge	.+12     	; 0x6a1a <obstacleAvoidance+0xd2>
			proximityResultLinear[i] = 0;
    6a0e:	10 92 c8 02 	sts	0x02C8, r1
    6a12:	10 92 c7 02 	sts	0x02C7, r1
    6a16:	44 24       	eor	r4, r4
    6a18:	55 24       	eor	r5, r5
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    6a1a:	20 91 c9 02 	lds	r18, 0x02C9
    6a1e:	30 91 ca 02 	lds	r19, 0x02CA
    6a22:	25 30       	cpi	r18, 0x05	; 5
    6a24:	31 05       	cpc	r19, r1
    6a26:	34 f4       	brge	.+12     	; 0x6a34 <obstacleAvoidance+0xec>
			proximityResultLinear[i] = 0;
    6a28:	10 92 ca 02 	sts	0x02CA, r1
    6a2c:	10 92 c9 02 	sts	0x02C9, r1
    6a30:	20 e0       	ldi	r18, 0x00	; 0
    6a32:	30 e0       	ldi	r19, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    6a34:	80 91 cb 02 	lds	r24, 0x02CB
    6a38:	90 91 cc 02 	lds	r25, 0x02CC
    6a3c:	85 30       	cpi	r24, 0x05	; 5
    6a3e:	91 05       	cpc	r25, r1
    6a40:	24 f4       	brge	.+8      	; 0x6a4a <obstacleAvoidance+0x102>
			proximityResultLinear[i] = 0;
    6a42:	10 92 cc 02 	sts	0x02CC, r1
    6a46:	10 92 cb 02 	sts	0x02CB, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    6a4a:	80 91 cd 02 	lds	r24, 0x02CD
    6a4e:	90 91 ce 02 	lds	r25, 0x02CE
    6a52:	85 30       	cpi	r24, 0x05	; 5
    6a54:	91 05       	cpc	r25, r1
    6a56:	34 f4       	brge	.+12     	; 0x6a64 <obstacleAvoidance+0x11c>
			proximityResultLinear[i] = 0;
    6a58:	10 92 ce 02 	sts	0x02CE, r1
    6a5c:	10 92 cd 02 	sts	0x02CD, r1
    6a60:	80 e0       	ldi	r24, 0x00	; 0
    6a62:	90 e0       	ldi	r25, 0x00	; 0
	}

	// sum the contribution of each sensor (based on the previous weights table);
	// give more weight to prox2 and prox6 (side proximities) in order to get more stability in narrow aisles;
	// add some noise to the sum in order to escape from dead-lock positions
	sumSensorsX = -proximityResultLinear[0] - (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) + proximityResultLinear[4] + (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + ((rand()%60)-30);
    6a64:	10 95       	com	r17
    6a66:	01 95       	neg	r16
    6a68:	1f 4f       	sbci	r17, 0xFF	; 255
    6a6a:	5b 01       	movw	r10, r22
    6a6c:	b5 94       	asr	r11
    6a6e:	a7 94       	ror	r10
    6a70:	7a 01       	movw	r14, r20
    6a72:	f5 94       	asr	r15
    6a74:	e7 94       	ror	r14
    6a76:	69 01       	movw	r12, r18
    6a78:	d5 94       	asr	r13
    6a7a:	c7 94       	ror	r12
    6a7c:	4c 01       	movw	r8, r24
    6a7e:	95 94       	asr	r9
    6a80:	87 94       	ror	r8
    6a82:	0e 94 0b 43 	call	0x8616	; 0x8616 <rand>
    6a86:	92 01       	movw	r18, r4
    6a88:	2e 51       	subi	r18, 0x1E	; 30
    6a8a:	30 40       	sbci	r19, 0x00	; 0
    6a8c:	20 0f       	add	r18, r16
    6a8e:	31 1f       	adc	r19, r17
    6a90:	2e 0d       	add	r18, r14
    6a92:	3f 1d       	adc	r19, r15
    6a94:	2c 0d       	add	r18, r12
    6a96:	3d 1d       	adc	r19, r13
    6a98:	2a 19       	sub	r18, r10
    6a9a:	3b 09       	sbc	r19, r11
    6a9c:	28 19       	sub	r18, r8
    6a9e:	39 09       	sbc	r19, r9
    6aa0:	6c e3       	ldi	r22, 0x3C	; 60
    6aa2:	26 2e       	mov	r2, r22
    6aa4:	31 2c       	mov	r3, r1
    6aa6:	b1 01       	movw	r22, r2
    6aa8:	0e 94 6d 42 	call	0x84da	; 0x84da <__divmodhi4>
    6aac:	28 0f       	add	r18, r24
    6aae:	39 1f       	adc	r19, r25
    6ab0:	38 87       	std	Y+8, r19	; 0x08
    6ab2:	2f 83       	std	Y+7, r18	; 0x07
	//sumSensorsX = -proximityResultLinear[0]  + proximityResultLinear[4];	
	sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[2]>>2) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[6]>>2) - (proximityResultLinear[7]>>1)+ ((rand()%60)-30);
    6ab4:	e0 90 c1 02 	lds	r14, 0x02C1
    6ab8:	f0 90 c2 02 	lds	r15, 0x02C2
    6abc:	f5 94       	asr	r15
    6abe:	e7 94       	ror	r14
    6ac0:	00 91 c3 02 	lds	r16, 0x02C3
    6ac4:	10 91 c4 02 	lds	r17, 0x02C4
    6ac8:	15 95       	asr	r17
    6aca:	07 95       	ror	r16
    6acc:	15 95       	asr	r17
    6ace:	07 95       	ror	r16
    6ad0:	c0 90 c5 02 	lds	r12, 0x02C5
    6ad4:	d0 90 c6 02 	lds	r13, 0x02C6
    6ad8:	d5 94       	asr	r13
    6ada:	c7 94       	ror	r12
    6adc:	a0 90 c9 02 	lds	r10, 0x02C9
    6ae0:	b0 90 ca 02 	lds	r11, 0x02CA
    6ae4:	b5 94       	asr	r11
    6ae6:	a7 94       	ror	r10
    6ae8:	40 90 cb 02 	lds	r4, 0x02CB
    6aec:	50 90 cc 02 	lds	r5, 0x02CC
    6af0:	55 94       	asr	r5
    6af2:	47 94       	ror	r4
    6af4:	55 94       	asr	r5
    6af6:	47 94       	ror	r4
    6af8:	80 90 cd 02 	lds	r8, 0x02CD
    6afc:	90 90 ce 02 	lds	r9, 0x02CE
    6b00:	95 94       	asr	r9
    6b02:	87 94       	ror	r8
    6b04:	0e 94 0b 43 	call	0x8616	; 0x8616 <rand>
    6b08:	97 01       	movw	r18, r14
    6b0a:	20 0f       	add	r18, r16
    6b0c:	31 1f       	adc	r19, r17
    6b0e:	2e 51       	subi	r18, 0x1E	; 30
    6b10:	30 40       	sbci	r19, 0x00	; 0
    6b12:	2c 0d       	add	r18, r12
    6b14:	3d 1d       	adc	r19, r13
    6b16:	2a 19       	sub	r18, r10
    6b18:	3b 09       	sbc	r19, r11
    6b1a:	28 19       	sub	r18, r8
    6b1c:	39 09       	sbc	r19, r9
    6b1e:	24 19       	sub	r18, r4
    6b20:	35 09       	sbc	r19, r5
    6b22:	b1 01       	movw	r22, r2
    6b24:	0e 94 6d 42 	call	0x84da	; 0x84da <__divmodhi4>
    6b28:	28 0f       	add	r18, r24
    6b2a:	39 1f       	adc	r19, r25
	//sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + (rand()%30);

	// modify the velocity components based on sensor values
	if(desL >= 0) {
    6b2c:	4b 81       	ldd	r20, Y+3	; 0x03
    6b2e:	5c 81       	ldd	r21, Y+4	; 0x04
    6b30:	57 fd       	sbrc	r21, 7
    6b32:	e5 c0       	rjmp	.+458    	; 0x6cfe <obstacleAvoidance+0x3b6>
		res = (signed long int)desL + (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
    6b34:	5a 01       	movw	r10, r20
    6b36:	cc 24       	eor	r12, r12
    6b38:	b7 fc       	sbrc	r11, 7
    6b3a:	c0 94       	com	r12
    6b3c:	dc 2c       	mov	r13, r12
    6b3e:	8f 81       	ldd	r24, Y+7	; 0x07
    6b40:	98 85       	ldd	r25, Y+8	; 0x08
    6b42:	1c 01       	movw	r2, r24
    6b44:	44 24       	eor	r4, r4
    6b46:	37 fc       	sbrc	r3, 7
    6b48:	40 94       	com	r4
    6b4a:	54 2c       	mov	r5, r4
    6b4c:	79 01       	movw	r14, r18
    6b4e:	00 27       	eor	r16, r16
    6b50:	f7 fc       	sbrc	r15, 7
    6b52:	00 95       	com	r16
    6b54:	10 2f       	mov	r17, r16
    6b56:	c2 01       	movw	r24, r4
    6b58:	b1 01       	movw	r22, r2
    6b5a:	6e 19       	sub	r22, r14
    6b5c:	7f 09       	sbc	r23, r15
    6b5e:	80 0b       	sbc	r24, r16
    6b60:	91 0b       	sbc	r25, r17
    6b62:	a6 01       	movw	r20, r12
    6b64:	95 01       	movw	r18, r10
    6b66:	0e 94 3a 42 	call	0x8474	; 0x8474 <__mulsi3>
    6b6a:	b6 e0       	ldi	r27, 0x06	; 6
    6b6c:	95 95       	asr	r25
    6b6e:	87 95       	ror	r24
    6b70:	77 95       	ror	r23
    6b72:	67 95       	ror	r22
    6b74:	ba 95       	dec	r27
    6b76:	d1 f7       	brne	.-12     	; 0x6b6c <obstacleAvoidance+0x224>
    6b78:	6a 0d       	add	r22, r10
    6b7a:	7b 1d       	adc	r23, r11
    6b7c:	8c 1d       	adc	r24, r12
    6b7e:	9d 1d       	adc	r25, r13
		*pwmLeft = (signed int)res;
    6b80:	f3 01       	movw	r30, r6
    6b82:	71 83       	std	Z+1, r23	; 0x01
    6b84:	60 83       	st	Z, r22
	} else {
		res = (signed long int)desL - (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
		*pwmLeft = (signed int)res;
	}
	if(desR >=0) {
    6b86:	2d 81       	ldd	r18, Y+5	; 0x05
    6b88:	3e 81       	ldd	r19, Y+6	; 0x06
    6b8a:	37 fd       	sbrc	r19, 7
    6b8c:	97 c0       	rjmp	.+302    	; 0x6cbc <obstacleAvoidance+0x374>
		res = (signed long int)desR + (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
    6b8e:	59 01       	movw	r10, r18
    6b90:	cc 24       	eor	r12, r12
    6b92:	b7 fc       	sbrc	r11, 7
    6b94:	c0 94       	com	r12
    6b96:	dc 2c       	mov	r13, r12
    6b98:	c8 01       	movw	r24, r16
    6b9a:	b7 01       	movw	r22, r14
    6b9c:	62 0d       	add	r22, r2
    6b9e:	73 1d       	adc	r23, r3
    6ba0:	84 1d       	adc	r24, r4
    6ba2:	95 1d       	adc	r25, r5
    6ba4:	a6 01       	movw	r20, r12
    6ba6:	95 01       	movw	r18, r10
    6ba8:	0e 94 3a 42 	call	0x8474	; 0x8474 <__mulsi3>
    6bac:	f6 e0       	ldi	r31, 0x06	; 6
    6bae:	95 95       	asr	r25
    6bb0:	87 95       	ror	r24
    6bb2:	77 95       	ror	r23
    6bb4:	67 95       	ror	r22
    6bb6:	fa 95       	dec	r31
    6bb8:	d1 f7       	brne	.-12     	; 0x6bae <obstacleAvoidance+0x266>
    6bba:	6a 0d       	add	r22, r10
    6bbc:	7b 1d       	adc	r23, r11
    6bbe:	8c 1d       	adc	r24, r12
    6bc0:	9d 1d       	adc	r25, r13
		*pwmRight = (signed int)res;
    6bc2:	9b 01       	movw	r18, r22
    6bc4:	e9 81       	ldd	r30, Y+1	; 0x01
    6bc6:	fa 81       	ldd	r31, Y+2	; 0x02
    6bc8:	71 83       	std	Z+1, r23	; 0x01
    6bca:	60 83       	st	Z, r22
	} else {
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	}

	if(currentSelector == 10) {	// force a little bit the upwards direction in vertical motion
    6bcc:	80 91 48 04 	lds	r24, 0x0448
    6bd0:	8a 30       	cpi	r24, 0x0A	; 10
    6bd2:	09 f4       	brne	.+2      	; 0x6bd6 <obstacleAvoidance+0x28e>
    6bd4:	4b c0       	rjmp	.+150    	; 0x6c6c <obstacleAvoidance+0x324>
			}
		}
	}

	// force the values to be in the pwm maximum range
	if (*pwmRight>(MAX_MOTORS_PWM/2)) *pwmRight=(MAX_MOTORS_PWM/2);
    6bd6:	f2 e0       	ldi	r31, 0x02	; 2
    6bd8:	21 30       	cpi	r18, 0x01	; 1
    6bda:	3f 07       	cpc	r19, r31
    6bdc:	44 f0       	brlt	.+16     	; 0x6bee <obstacleAvoidance+0x2a6>
    6bde:	80 e0       	ldi	r24, 0x00	; 0
    6be0:	92 e0       	ldi	r25, 0x02	; 2
    6be2:	e9 81       	ldd	r30, Y+1	; 0x01
    6be4:	fa 81       	ldd	r31, Y+2	; 0x02
    6be6:	91 83       	std	Z+1, r25	; 0x01
    6be8:	80 83       	st	Z, r24
    6bea:	20 e0       	ldi	r18, 0x00	; 0
    6bec:	32 e0       	ldi	r19, 0x02	; 2
	if (*pwmLeft>(MAX_MOTORS_PWM/2)) *pwmLeft=(MAX_MOTORS_PWM/2);
    6bee:	f3 01       	movw	r30, r6
    6bf0:	80 81       	ld	r24, Z
    6bf2:	91 81       	ldd	r25, Z+1	; 0x01
    6bf4:	f2 e0       	ldi	r31, 0x02	; 2
    6bf6:	81 30       	cpi	r24, 0x01	; 1
    6bf8:	9f 07       	cpc	r25, r31
    6bfa:	4c f0       	brlt	.+18     	; 0x6c0e <obstacleAvoidance+0x2c6>
    6bfc:	80 e0       	ldi	r24, 0x00	; 0
    6bfe:	92 e0       	ldi	r25, 0x02	; 2
    6c00:	f3 01       	movw	r30, r6
    6c02:	91 83       	std	Z+1, r25	; 0x01
    6c04:	80 83       	st	Z, r24
    6c06:	e9 81       	ldd	r30, Y+1	; 0x01
    6c08:	fa 81       	ldd	r31, Y+2	; 0x02
    6c0a:	20 81       	ld	r18, Z
    6c0c:	31 81       	ldd	r19, Z+1	; 0x01
	if (*pwmRight<-(MAX_MOTORS_PWM/2)) *pwmRight=-(MAX_MOTORS_PWM/2);
    6c0e:	fe ef       	ldi	r31, 0xFE	; 254
    6c10:	20 30       	cpi	r18, 0x00	; 0
    6c12:	3f 07       	cpc	r19, r31
    6c14:	4c f4       	brge	.+18     	; 0x6c28 <obstacleAvoidance+0x2e0>
    6c16:	80 e0       	ldi	r24, 0x00	; 0
    6c18:	9e ef       	ldi	r25, 0xFE	; 254
    6c1a:	e9 81       	ldd	r30, Y+1	; 0x01
    6c1c:	fa 81       	ldd	r31, Y+2	; 0x02
    6c1e:	91 83       	std	Z+1, r25	; 0x01
    6c20:	80 83       	st	Z, r24
    6c22:	f3 01       	movw	r30, r6
    6c24:	80 81       	ld	r24, Z
    6c26:	91 81       	ldd	r25, Z+1	; 0x01
	if (*pwmLeft<-(MAX_MOTORS_PWM/2)) *pwmLeft=-(MAX_MOTORS_PWM/2);
    6c28:	fe ef       	ldi	r31, 0xFE	; 254
    6c2a:	80 30       	cpi	r24, 0x00	; 0
    6c2c:	9f 07       	cpc	r25, r31
    6c2e:	2c f4       	brge	.+10     	; 0x6c3a <obstacleAvoidance+0x2f2>
    6c30:	80 e0       	ldi	r24, 0x00	; 0
    6c32:	9e ef       	ldi	r25, 0xFE	; 254
    6c34:	f3 01       	movw	r30, r6
    6c36:	91 83       	std	Z+1, r25	; 0x01
    6c38:	80 83       	st	Z, r24

}
    6c3a:	28 96       	adiw	r28, 0x08	; 8
    6c3c:	0f b6       	in	r0, 0x3f	; 63
    6c3e:	f8 94       	cli
    6c40:	de bf       	out	0x3e, r29	; 62
    6c42:	0f be       	out	0x3f, r0	; 63
    6c44:	cd bf       	out	0x3d, r28	; 61
    6c46:	cf 91       	pop	r28
    6c48:	df 91       	pop	r29
    6c4a:	1f 91       	pop	r17
    6c4c:	0f 91       	pop	r16
    6c4e:	ff 90       	pop	r15
    6c50:	ef 90       	pop	r14
    6c52:	df 90       	pop	r13
    6c54:	cf 90       	pop	r12
    6c56:	bf 90       	pop	r11
    6c58:	af 90       	pop	r10
    6c5a:	9f 90       	pop	r9
    6c5c:	8f 90       	pop	r8
    6c5e:	7f 90       	pop	r7
    6c60:	6f 90       	pop	r6
    6c62:	5f 90       	pop	r5
    6c64:	4f 90       	pop	r4
    6c66:	3f 90       	pop	r3
    6c68:	2f 90       	pop	r2
    6c6a:	08 95       	ret
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	}

	if(currentSelector == 10) {	// force a little bit the upwards direction in vertical motion
		if(desL!=0 && desR!=0) {
    6c6c:	2b 81       	ldd	r18, Y+3	; 0x03
    6c6e:	3c 81       	ldd	r19, Y+4	; 0x04
    6c70:	21 15       	cp	r18, r1
    6c72:	31 05       	cpc	r19, r1
    6c74:	f1 f0       	breq	.+60     	; 0x6cb2 <obstacleAvoidance+0x36a>
    6c76:	2d 81       	ldd	r18, Y+5	; 0x05
    6c78:	3e 81       	ldd	r19, Y+6	; 0x06
    6c7a:	21 15       	cp	r18, r1
    6c7c:	31 05       	cpc	r19, r1
    6c7e:	c9 f0       	breq	.+50     	; 0x6cb2 <obstacleAvoidance+0x36a>
			if(currentAngle<270 && currentAngle>90) {
    6c80:	80 91 3a 04 	lds	r24, 0x043A
    6c84:	90 91 3b 04 	lds	r25, 0x043B
    6c88:	8b 55       	subi	r24, 0x5B	; 91
    6c8a:	90 40       	sbci	r25, 0x00	; 0
    6c8c:	83 3b       	cpi	r24, 0xB3	; 179
    6c8e:	91 05       	cpc	r25, r1
    6c90:	08 f0       	brcs	.+2      	; 0x6c94 <obstacleAvoidance+0x34c>
    6c92:	5f c0       	rjmp	.+190    	; 0x6d52 <obstacleAvoidance+0x40a>
				*pwmLeft += 10;
    6c94:	f3 01       	movw	r30, r6
    6c96:	80 81       	ld	r24, Z
    6c98:	91 81       	ldd	r25, Z+1	; 0x01
    6c9a:	0a 96       	adiw	r24, 0x0a	; 10
    6c9c:	91 83       	std	Z+1, r25	; 0x01
    6c9e:	80 83       	st	Z, r24
				*pwmRight -= 10;
    6ca0:	e9 81       	ldd	r30, Y+1	; 0x01
    6ca2:	fa 81       	ldd	r31, Y+2	; 0x02
    6ca4:	20 81       	ld	r18, Z
    6ca6:	31 81       	ldd	r19, Z+1	; 0x01
    6ca8:	2a 50       	subi	r18, 0x0A	; 10
    6caa:	30 40       	sbci	r19, 0x00	; 0
    6cac:	31 83       	std	Z+1, r19	; 0x01
    6cae:	20 83       	st	Z, r18
    6cb0:	92 cf       	rjmp	.-220    	; 0x6bd6 <obstacleAvoidance+0x28e>
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	}

	if(currentSelector == 10) {	// force a little bit the upwards direction in vertical motion
		if(desL!=0 && desR!=0) {
    6cb2:	e9 81       	ldd	r30, Y+1	; 0x01
    6cb4:	fa 81       	ldd	r31, Y+2	; 0x02
    6cb6:	20 81       	ld	r18, Z
    6cb8:	31 81       	ldd	r19, Z+1	; 0x01
    6cba:	8d cf       	rjmp	.-230    	; 0x6bd6 <obstacleAvoidance+0x28e>
	}
	if(desR >=0) {
		res = (signed long int)desR + (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	} else {
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
    6cbc:	59 01       	movw	r10, r18
    6cbe:	cc 24       	eor	r12, r12
    6cc0:	b7 fc       	sbrc	r11, 7
    6cc2:	c0 94       	com	r12
    6cc4:	dc 2c       	mov	r13, r12
    6cc6:	c2 01       	movw	r24, r4
    6cc8:	b1 01       	movw	r22, r2
    6cca:	6e 19       	sub	r22, r14
    6ccc:	7f 09       	sbc	r23, r15
    6cce:	80 0b       	sbc	r24, r16
    6cd0:	91 0b       	sbc	r25, r17
    6cd2:	a6 01       	movw	r20, r12
    6cd4:	95 01       	movw	r18, r10
    6cd6:	0e 94 3a 42 	call	0x8474	; 0x8474 <__mulsi3>
    6cda:	e6 e0       	ldi	r30, 0x06	; 6
    6cdc:	95 95       	asr	r25
    6cde:	87 95       	ror	r24
    6ce0:	77 95       	ror	r23
    6ce2:	67 95       	ror	r22
    6ce4:	ea 95       	dec	r30
    6ce6:	d1 f7       	brne	.-12     	; 0x6cdc <obstacleAvoidance+0x394>
    6ce8:	26 1b       	sub	r18, r22
    6cea:	37 0b       	sbc	r19, r23
    6cec:	48 0b       	sbc	r20, r24
    6cee:	59 0b       	sbc	r21, r25
    6cf0:	da 01       	movw	r26, r20
    6cf2:	c9 01       	movw	r24, r18
		*pwmRight = (signed int)res;
    6cf4:	e9 81       	ldd	r30, Y+1	; 0x01
    6cf6:	fa 81       	ldd	r31, Y+2	; 0x02
    6cf8:	91 83       	std	Z+1, r25	; 0x01
    6cfa:	80 83       	st	Z, r24
    6cfc:	67 cf       	rjmp	.-306    	; 0x6bcc <obstacleAvoidance+0x284>
	// modify the velocity components based on sensor values
	if(desL >= 0) {
		res = (signed long int)desL + (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmLeft = (signed int)res;
	} else {
		res = (signed long int)desL - (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
    6cfe:	5a 01       	movw	r10, r20
    6d00:	cc 24       	eor	r12, r12
    6d02:	b7 fc       	sbrc	r11, 7
    6d04:	c0 94       	com	r12
    6d06:	dc 2c       	mov	r13, r12
    6d08:	8f 81       	ldd	r24, Y+7	; 0x07
    6d0a:	98 85       	ldd	r25, Y+8	; 0x08
    6d0c:	1c 01       	movw	r2, r24
    6d0e:	44 24       	eor	r4, r4
    6d10:	37 fc       	sbrc	r3, 7
    6d12:	40 94       	com	r4
    6d14:	54 2c       	mov	r5, r4
    6d16:	79 01       	movw	r14, r18
    6d18:	00 27       	eor	r16, r16
    6d1a:	f7 fc       	sbrc	r15, 7
    6d1c:	00 95       	com	r16
    6d1e:	10 2f       	mov	r17, r16
    6d20:	c8 01       	movw	r24, r16
    6d22:	b7 01       	movw	r22, r14
    6d24:	62 0d       	add	r22, r2
    6d26:	73 1d       	adc	r23, r3
    6d28:	84 1d       	adc	r24, r4
    6d2a:	95 1d       	adc	r25, r5
    6d2c:	a6 01       	movw	r20, r12
    6d2e:	95 01       	movw	r18, r10
    6d30:	0e 94 3a 42 	call	0x8474	; 0x8474 <__mulsi3>
    6d34:	a6 e0       	ldi	r26, 0x06	; 6
    6d36:	95 95       	asr	r25
    6d38:	87 95       	ror	r24
    6d3a:	77 95       	ror	r23
    6d3c:	67 95       	ror	r22
    6d3e:	aa 95       	dec	r26
    6d40:	d1 f7       	brne	.-12     	; 0x6d36 <obstacleAvoidance+0x3ee>
    6d42:	26 1b       	sub	r18, r22
    6d44:	37 0b       	sbc	r19, r23
    6d46:	48 0b       	sbc	r20, r24
    6d48:	59 0b       	sbc	r21, r25
		*pwmLeft = (signed int)res;
    6d4a:	f3 01       	movw	r30, r6
    6d4c:	31 83       	std	Z+1, r19	; 0x01
    6d4e:	20 83       	st	Z, r18
    6d50:	1a cf       	rjmp	.-460    	; 0x6b86 <obstacleAvoidance+0x23e>
		if(desL!=0 && desR!=0) {
			if(currentAngle<270 && currentAngle>90) {
				*pwmLeft += 10;
				*pwmRight -= 10;
			} else {
				*pwmLeft -= 10;
    6d52:	f3 01       	movw	r30, r6
    6d54:	80 81       	ld	r24, Z
    6d56:	91 81       	ldd	r25, Z+1	; 0x01
    6d58:	0a 97       	sbiw	r24, 0x0a	; 10
    6d5a:	91 83       	std	Z+1, r25	; 0x01
    6d5c:	80 83       	st	Z, r24
				*pwmRight += 10;
    6d5e:	e9 81       	ldd	r30, Y+1	; 0x01
    6d60:	fa 81       	ldd	r31, Y+2	; 0x02
    6d62:	20 81       	ld	r18, Z
    6d64:	31 81       	ldd	r19, Z+1	; 0x01
    6d66:	26 5f       	subi	r18, 0xF6	; 246
    6d68:	3f 4f       	sbci	r19, 0xFF	; 255
    6d6a:	31 83       	std	Z+1, r19	; 0x01
    6d6c:	20 83       	st	Z, r18
    6d6e:	33 cf       	rjmp	.-410    	; 0x6bd6 <obstacleAvoidance+0x28e>

00006d70 <cliffDetected>:


char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    6d70:	80 91 67 02 	lds	r24, 0x0267
    6d74:	90 91 68 02 	lds	r25, 0x0268
    6d78:	21 e0       	ldi	r18, 0x01	; 1
    6d7a:	84 3a       	cpi	r24, 0xA4	; 164
    6d7c:	92 07       	cpc	r25, r18
    6d7e:	d4 f0       	brlt	.+52     	; 0x6db4 <cliffDetected+0x44>
    6d80:	80 91 69 02 	lds	r24, 0x0269
    6d84:	90 91 6a 02 	lds	r25, 0x026A
    6d88:	21 e0       	ldi	r18, 0x01	; 1
    6d8a:	84 3a       	cpi	r24, 0xA4	; 164
    6d8c:	92 07       	cpc	r25, r18
    6d8e:	94 f0       	brlt	.+36     	; 0x6db4 <cliffDetected+0x44>
    6d90:	80 91 6b 02 	lds	r24, 0x026B
    6d94:	90 91 6c 02 	lds	r25, 0x026C
    6d98:	21 e0       	ldi	r18, 0x01	; 1
    6d9a:	84 3a       	cpi	r24, 0xA4	; 164
    6d9c:	92 07       	cpc	r25, r18
    6d9e:	74 f0       	brlt	.+28     	; 0x6dbc <cliffDetected+0x4c>
	//if(proximityResult[8]<(proximityOffset[8]>>1) || proximityResult[9]<(proximityOffset[9]>>1) || proximityResult[10]<(proximityOffset[10]>>1) || proximityResult[11]<(proximityOffset[11]>>1)) {
		return 1;
    6da0:	81 e0       	ldi	r24, 0x01	; 1
    6da2:	20 91 6d 02 	lds	r18, 0x026D
    6da6:	30 91 6e 02 	lds	r19, 0x026E
    6daa:	91 e0       	ldi	r25, 0x01	; 1
    6dac:	24 3a       	cpi	r18, 0xA4	; 164
    6dae:	39 07       	cpc	r19, r25
    6db0:	1c f4       	brge	.+6      	; 0x6db8 <cliffDetected+0x48>
	} else {
		return 0;
	}


}
    6db2:	08 95       	ret
char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
	//if(proximityResult[8]<(proximityOffset[8]>>1) || proximityResult[9]<(proximityOffset[9]>>1) || proximityResult[10]<(proximityOffset[10]>>1) || proximityResult[11]<(proximityOffset[11]>>1)) {
		return 1;
    6db4:	81 e0       	ldi	r24, 0x01	; 1
    6db6:	08 95       	ret
    6db8:	80 e0       	ldi	r24, 0x00	; 0
    6dba:	08 95       	ret
    6dbc:	81 e0       	ldi	r24, 0x01	; 1
	} else {
		return 0;
	}


}
    6dbe:	08 95       	ret

00006dc0 <enableObstacleAvoidance>:

void enableObstacleAvoidance() {
	obstacleAvoidanceEnabled=1;
    6dc0:	81 e0       	ldi	r24, 0x01	; 1
    6dc2:	80 93 68 04 	sts	0x0468, r24
}
    6dc6:	08 95       	ret

00006dc8 <disableObstacleAvoidance>:

void disableObstacleAvoidance() {
	obstacleAvoidanceEnabled=0;
    6dc8:	10 92 68 04 	sts	0x0468, r1
}
    6dcc:	08 95       	ret

00006dce <enableCliffAvoidance>:

void enableCliffAvoidance() {
	cliffAvoidanceEnabled=1;
    6dce:	81 e0       	ldi	r24, 0x01	; 1
    6dd0:	80 93 69 04 	sts	0x0469, r24
}
    6dd4:	08 95       	ret

00006dd6 <disableCliffAvoidance>:

void disableCliffAvoidance() {
	cliffAvoidanceEnabled=0;
    6dd6:	10 92 69 04 	sts	0x0469, r1
}
    6dda:	08 95       	ret

00006ddc <initRGBleds>:
	// Period freq = Fosc/TOP (max timer value) => TOP = Fosc/period freq
	// We need a frequency of about 30 KHz => 8000000/30000 = 266
	// The waveform generation mode let us chose the TOP value to be 256
	// thus we get period freq = 8000000/256 = 31250 Hz

	TCCR1A = 0;
    6ddc:	a0 e8       	ldi	r26, 0x80	; 128
    6dde:	b0 e0       	ldi	r27, 0x00	; 0
    6de0:	1c 92       	st	X, r1
	TCCR1B = 0;
    6de2:	e1 e8       	ldi	r30, 0x81	; 129
    6de4:	f0 e0       	ldi	r31, 0x00	; 0
    6de6:	10 82       	st	Z, r1

	// enable OCA, OCB, OCC; clear on match, set at bottom
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << COM1C1) | (1 << WGM10); 	
    6de8:	8c 91       	ld	r24, X
    6dea:	89 6a       	ori	r24, 0xA9	; 169
    6dec:	8c 93       	st	X, r24
	// mode 5 => fast-pwm 8 bit; no prescaler
	TCCR1B |= (1 << WGM12) | (1 << CS10);										
    6dee:	80 81       	ld	r24, Z
    6df0:	89 60       	ori	r24, 0x09	; 9
    6df2:	80 83       	st	Z, r24
	// the values for the leds pwm goes from 0 (max power on) to 255 (off)
	OCR1A = pwm_red;
    6df4:	80 91 0c 02 	lds	r24, 0x020C
    6df8:	90 e0       	ldi	r25, 0x00	; 0
    6dfa:	90 93 89 00 	sts	0x0089, r25
    6dfe:	80 93 88 00 	sts	0x0088, r24
	OCR1B = pwm_green;
    6e02:	80 91 0d 02 	lds	r24, 0x020D
    6e06:	90 e0       	ldi	r25, 0x00	; 0
    6e08:	90 93 8b 00 	sts	0x008B, r25
    6e0c:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = pwm_blue;
    6e10:	80 91 0e 02 	lds	r24, 0x020E
    6e14:	90 e0       	ldi	r25, 0x00	; 0
    6e16:	90 93 8d 00 	sts	0x008D, r25
    6e1a:	80 93 8c 00 	sts	0x008C, r24

}
    6e1e:	08 95       	ret

00006e20 <toggleBlueLed>:

void toggleBlueLed() {

	blinkState = 1 - blinkState;
    6e20:	81 e0       	ldi	r24, 0x01	; 1
    6e22:	90 91 17 03 	lds	r25, 0x0317
    6e26:	89 1b       	sub	r24, r25
    6e28:	80 93 17 03 	sts	0x0317, r24

	if(blinkState) {
    6e2c:	88 23       	and	r24, r24
    6e2e:	39 f4       	brne	.+14     	; 0x6e3e <toggleBlueLed+0x1e>
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
		OCR1C = 255;
	} else {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC to get the maximum output power; this is due to the fact 
    6e30:	80 91 80 00 	lds	r24, 0x0080
    6e34:	87 7f       	andi	r24, 0xF7	; 247
    6e36:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// that the minimum duty cycle when the output compare is enable is 1 
    6e3a:	2f 98       	cbi	0x05, 7	; 5
    6e3c:	08 95       	ret
void toggleBlueLed() {

	blinkState = 1 - blinkState;

	if(blinkState) {
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
    6e3e:	80 91 80 00 	lds	r24, 0x0080
    6e42:	88 60       	ori	r24, 0x08	; 8
    6e44:	80 93 80 00 	sts	0x0080, r24
		OCR1C = 255;
    6e48:	8f ef       	ldi	r24, 0xFF	; 255
    6e4a:	90 e0       	ldi	r25, 0x00	; 0
    6e4c:	90 93 8d 00 	sts	0x008D, r25
    6e50:	80 93 8c 00 	sts	0x008C, r24
    6e54:	08 95       	ret

00006e56 <updateRedLed>:

}

void updateRedLed(unsigned char value) {

	if(value == 0) {
    6e56:	88 23       	and	r24, r24
    6e58:	59 f0       	breq	.+22     	; 0x6e70 <updateRedLed+0x1a>
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1A1);	// always enable OCA in case it was disabled
    6e5a:	90 91 80 00 	lds	r25, 0x0080
    6e5e:	90 68       	ori	r25, 0x80	; 128
    6e60:	90 93 80 00 	sts	0x0080, r25
		OCR1A = value;
    6e64:	90 e0       	ldi	r25, 0x00	; 0
    6e66:	90 93 89 00 	sts	0x0089, r25
    6e6a:	80 93 88 00 	sts	0x0088, r24
    6e6e:	08 95       	ret
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
    6e70:	80 91 80 00 	lds	r24, 0x0080
    6e74:	8f 77       	andi	r24, 0x7F	; 127
    6e76:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
    6e7a:	2d 98       	cbi	0x05, 5	; 5
    6e7c:	08 95       	ret

00006e7e <updateGreenLed>:

}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
    6e7e:	88 23       	and	r24, r24
    6e80:	59 f0       	breq	.+22     	; 0x6e98 <updateGreenLed+0x1a>
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
	} else {	
		TCCR1A |= (1 << COM1B1);	// always enable OCA in case it was disabled
    6e82:	90 91 80 00 	lds	r25, 0x0080
    6e86:	90 62       	ori	r25, 0x20	; 32
    6e88:	90 93 80 00 	sts	0x0080, r25
		OCR1B = value;
    6e8c:	90 e0       	ldi	r25, 0x00	; 0
    6e8e:	90 93 8b 00 	sts	0x008B, r25
    6e92:	80 93 8a 00 	sts	0x008A, r24
    6e96:	08 95       	ret
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
    6e98:	80 91 80 00 	lds	r24, 0x0080
    6e9c:	8f 7d       	andi	r24, 0xDF	; 223
    6e9e:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
    6ea2:	2e 98       	cbi	0x05, 6	; 5
    6ea4:	08 95       	ret

00006ea6 <updateBlueLed>:

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
    6ea6:	88 23       	and	r24, r24
    6ea8:	59 f0       	breq	.+22     	; 0x6ec0 <updateBlueLed+0x1a>
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1C1);	// always enable OCA in case it was disabled
    6eaa:	90 91 80 00 	lds	r25, 0x0080
    6eae:	98 60       	ori	r25, 0x08	; 8
    6eb0:	90 93 80 00 	sts	0x0080, r25
		OCR1C = value;
    6eb4:	90 e0       	ldi	r25, 0x00	; 0
    6eb6:	90 93 8d 00 	sts	0x008D, r25
    6eba:	80 93 8c 00 	sts	0x008C, r24
    6ebe:	08 95       	ret
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
    6ec0:	80 91 80 00 	lds	r24, 0x0080
    6ec4:	87 7f       	andi	r24, 0xF7	; 247
    6ec6:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
    6eca:	2f 98       	cbi	0x05, 7	; 5
    6ecc:	08 95       	ret

00006ece <setGreenLed>:

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    6ece:	83 30       	cpi	r24, 0x03	; 3
    6ed0:	09 f4       	brne	.+2      	; 0x6ed4 <setGreenLed+0x6>
    6ed2:	5a c0       	rjmp	.+180    	; 0x6f88 <setGreenLed+0xba>
    6ed4:	84 30       	cpi	r24, 0x04	; 4
    6ed6:	80 f0       	brcs	.+32     	; 0x6ef8 <setGreenLed+0x2a>
    6ed8:	85 30       	cpi	r24, 0x05	; 5
    6eda:	09 f4       	brne	.+2      	; 0x6ede <setGreenLed+0x10>
    6edc:	41 c0       	rjmp	.+130    	; 0x6f60 <setGreenLed+0x92>
    6ede:	85 30       	cpi	r24, 0x05	; 5
    6ee0:	d0 f4       	brcc	.+52     	; 0x6f16 <setGreenLed+0x48>
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
    6ee2:	66 23       	and	r22, r22
    6ee4:	09 f4       	brne	.+2      	; 0x6ee8 <setGreenLed+0x1a>
    6ee6:	68 c0       	rjmp	.+208    	; 0x6fb8 <setGreenLed+0xea>
    6ee8:	80 91 0b 01 	lds	r24, 0x010B
    6eec:	8f 7e       	andi	r24, 0xEF	; 239
    6eee:	80 93 0b 01 	sts	0x010B, r24
    6ef2:	80 91 0b 01 	lds	r24, 0x010B
    6ef6:	08 95       	ret

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    6ef8:	81 30       	cpi	r24, 0x01	; 1
    6efa:	e1 f1       	breq	.+120    	; 0x6f74 <setGreenLed+0xa6>
    6efc:	82 30       	cpi	r24, 0x02	; 2
    6efe:	80 f0       	brcs	.+32     	; 0x6f20 <setGreenLed+0x52>
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
    6f00:	66 23       	and	r22, r22
    6f02:	09 f4       	brne	.+2      	; 0x6f06 <setGreenLed+0x38>
    6f04:	46 c0       	rjmp	.+140    	; 0x6f92 <setGreenLed+0xc4>
    6f06:	80 91 0b 01 	lds	r24, 0x010B
    6f0a:	8b 7f       	andi	r24, 0xFB	; 251
    6f0c:	80 93 0b 01 	sts	0x010B, r24
    6f10:	80 91 0b 01 	lds	r24, 0x010B
    6f14:	08 95       	ret

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    6f16:	86 30       	cpi	r24, 0x06	; 6
    6f18:	c9 f0       	breq	.+50     	; 0x6f4c <setGreenLed+0x7e>
    6f1a:	87 30       	cpi	r24, 0x07	; 7
    6f1c:	61 f0       	breq	.+24     	; 0x6f36 <setGreenLed+0x68>
    6f1e:	08 95       	ret

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
    6f20:	66 23       	and	r22, r22
    6f22:	09 f4       	brne	.+2      	; 0x6f26 <setGreenLed+0x58>
    6f24:	51 c0       	rjmp	.+162    	; 0x6fc8 <setGreenLed+0xfa>
    6f26:	80 91 0b 01 	lds	r24, 0x010B
    6f2a:	8e 7f       	andi	r24, 0xFE	; 254
    6f2c:	80 93 0b 01 	sts	0x010B, r24
    6f30:	80 91 0b 01 	lds	r24, 0x010B
    6f34:	08 95       	ret
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
				break;

		case 7:	isOn?GREEN_LED7_ON:GREEN_LED7_OFF;
    6f36:	66 23       	and	r22, r22
    6f38:	09 f0       	breq	.+2      	; 0x6f3c <setGreenLed+0x6e>
    6f3a:	5e c0       	rjmp	.+188    	; 0x6ff8 <setGreenLed+0x12a>
    6f3c:	80 91 0b 01 	lds	r24, 0x010B
    6f40:	80 68       	ori	r24, 0x80	; 128
    6f42:	80 93 0b 01 	sts	0x010B, r24
    6f46:	80 91 0b 01 	lds	r24, 0x010B
    6f4a:	08 95       	ret
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
    6f4c:	66 23       	and	r22, r22
    6f4e:	49 f1       	breq	.+82     	; 0x6fa2 <setGreenLed+0xd4>
    6f50:	80 91 0b 01 	lds	r24, 0x010B
    6f54:	8f 7b       	andi	r24, 0xBF	; 191
    6f56:	80 93 0b 01 	sts	0x010B, r24
    6f5a:	80 91 0b 01 	lds	r24, 0x010B
    6f5e:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
    6f60:	66 23       	and	r22, r22
    6f62:	d1 f1       	breq	.+116    	; 0x6fd8 <setGreenLed+0x10a>
    6f64:	80 91 0b 01 	lds	r24, 0x010B
    6f68:	8f 7d       	andi	r24, 0xDF	; 223
    6f6a:	80 93 0b 01 	sts	0x010B, r24
    6f6e:	80 91 0b 01 	lds	r24, 0x010B
    6f72:	08 95       	ret
	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
    6f74:	66 23       	and	r22, r22
    6f76:	c1 f1       	breq	.+112    	; 0x6fe8 <setGreenLed+0x11a>
    6f78:	80 91 0b 01 	lds	r24, 0x010B
    6f7c:	8d 7f       	andi	r24, 0xFD	; 253
    6f7e:	80 93 0b 01 	sts	0x010B, r24
    6f82:	80 91 0b 01 	lds	r24, 0x010B
    6f86:	08 95       	ret
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
    6f88:	66 23       	and	r22, r22
    6f8a:	99 f0       	breq	.+38     	; 0x6fb2 <setGreenLed+0xe4>
    6f8c:	a3 98       	cbi	0x14, 3	; 20
    6f8e:	84 b3       	in	r24, 0x14	; 20
    6f90:	08 95       	ret
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
    6f92:	80 91 0b 01 	lds	r24, 0x010B
    6f96:	84 60       	ori	r24, 0x04	; 4
    6f98:	80 93 0b 01 	sts	0x010B, r24
    6f9c:	80 91 0b 01 	lds	r24, 0x010B
    6fa0:	08 95       	ret
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
    6fa2:	80 91 0b 01 	lds	r24, 0x010B
    6fa6:	80 64       	ori	r24, 0x40	; 64
    6fa8:	80 93 0b 01 	sts	0x010B, r24
    6fac:	80 91 0b 01 	lds	r24, 0x010B
    6fb0:	08 95       	ret
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
    6fb2:	a3 9a       	sbi	0x14, 3	; 20
    6fb4:	84 b3       	in	r24, 0x14	; 20
    6fb6:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
    6fb8:	80 91 0b 01 	lds	r24, 0x010B
    6fbc:	80 61       	ori	r24, 0x10	; 16
    6fbe:	80 93 0b 01 	sts	0x010B, r24
    6fc2:	80 91 0b 01 	lds	r24, 0x010B
    6fc6:	08 95       	ret

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
    6fc8:	80 91 0b 01 	lds	r24, 0x010B
    6fcc:	81 60       	ori	r24, 0x01	; 1
    6fce:	80 93 0b 01 	sts	0x010B, r24
    6fd2:	80 91 0b 01 	lds	r24, 0x010B
    6fd6:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
    6fd8:	80 91 0b 01 	lds	r24, 0x010B
    6fdc:	80 62       	ori	r24, 0x20	; 32
    6fde:	80 93 0b 01 	sts	0x010B, r24
    6fe2:	80 91 0b 01 	lds	r24, 0x010B
    6fe6:	08 95       	ret
	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
    6fe8:	80 91 0b 01 	lds	r24, 0x010B
    6fec:	82 60       	ori	r24, 0x02	; 2
    6fee:	80 93 0b 01 	sts	0x010B, r24
    6ff2:	80 91 0b 01 	lds	r24, 0x010B
    6ff6:	08 95       	ret
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
				break;

		case 7:	isOn?GREEN_LED7_ON:GREEN_LED7_OFF;
    6ff8:	80 91 0b 01 	lds	r24, 0x010B
    6ffc:	8f 77       	andi	r24, 0x7F	; 127
    6ffe:	80 93 0b 01 	sts	0x010B, r24
    7002:	80 91 0b 01 	lds	r24, 0x010B
    7006:	08 95       	ret

00007008 <turnOffGreenLeds>:

}

void turnOffGreenLeds() {

	GREEN_LED0_OFF;
    7008:	eb e0       	ldi	r30, 0x0B	; 11
    700a:	f1 e0       	ldi	r31, 0x01	; 1
    700c:	80 81       	ld	r24, Z
    700e:	81 60       	ori	r24, 0x01	; 1
    7010:	80 83       	st	Z, r24
	GREEN_LED1_OFF;
    7012:	80 81       	ld	r24, Z
    7014:	82 60       	ori	r24, 0x02	; 2
    7016:	80 83       	st	Z, r24
	GREEN_LED2_OFF;
    7018:	80 81       	ld	r24, Z
    701a:	84 60       	ori	r24, 0x04	; 4
    701c:	80 83       	st	Z, r24
	GREEN_LED3_OFF;
    701e:	a3 9a       	sbi	0x14, 3	; 20
	GREEN_LED4_OFF;
    7020:	80 81       	ld	r24, Z
    7022:	80 61       	ori	r24, 0x10	; 16
    7024:	80 83       	st	Z, r24
	GREEN_LED5_OFF;
    7026:	80 81       	ld	r24, Z
    7028:	80 62       	ori	r24, 0x20	; 32
    702a:	80 83       	st	Z, r24
	GREEN_LED6_OFF;
    702c:	80 81       	ld	r24, Z
    702e:	80 64       	ori	r24, 0x40	; 64
    7030:	80 83       	st	Z, r24
	GREEN_LED7_OFF;
    7032:	80 81       	ld	r24, Z
    7034:	80 68       	ori	r24, 0x80	; 128
    7036:	80 83       	st	Z, r24

}
    7038:	08 95       	ret

0000703a <turnOnGreenLeds>:


void turnOnGreenLeds() {

	GREEN_LED0_ON;
    703a:	eb e0       	ldi	r30, 0x0B	; 11
    703c:	f1 e0       	ldi	r31, 0x01	; 1
    703e:	80 81       	ld	r24, Z
    7040:	8e 7f       	andi	r24, 0xFE	; 254
    7042:	80 83       	st	Z, r24
	GREEN_LED1_ON;
    7044:	80 81       	ld	r24, Z
    7046:	8d 7f       	andi	r24, 0xFD	; 253
    7048:	80 83       	st	Z, r24
	GREEN_LED2_ON;
    704a:	80 81       	ld	r24, Z
    704c:	8b 7f       	andi	r24, 0xFB	; 251
    704e:	80 83       	st	Z, r24
	GREEN_LED3_ON;
    7050:	a3 98       	cbi	0x14, 3	; 20
	GREEN_LED4_ON;
    7052:	80 81       	ld	r24, Z
    7054:	8f 7e       	andi	r24, 0xEF	; 239
    7056:	80 83       	st	Z, r24
	GREEN_LED5_ON;
    7058:	80 81       	ld	r24, Z
    705a:	8f 7d       	andi	r24, 0xDF	; 223
    705c:	80 83       	st	Z, r24
	GREEN_LED6_ON;
    705e:	80 81       	ld	r24, Z
    7060:	8f 7b       	andi	r24, 0xBF	; 191
    7062:	80 83       	st	Z, r24
	GREEN_LED7_ON;
    7064:	80 81       	ld	r24, Z
    7066:	8f 77       	andi	r24, 0x7F	; 127
    7068:	80 83       	st	Z, r24

}
    706a:	08 95       	ret

0000706c <initAccelerometer>:

void initAccelerometer() {

	unsigned char ret;

	i2c_init();		// init I2C bus
    706c:	0e 94 87 1b 	call	0x370e	; 0x370e <i2c_init>
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7070:	80 91 14 02 	lds	r24, 0x0214
    7074:	0e 94 8f 1b 	call	0x371e	; 0x371e <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    7078:	88 23       	and	r24, r24
    707a:	49 f4       	brne	.+18     	; 0x708e <initAccelerometer+0x22>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    707c:	86 e1       	ldi	r24, 0x16	; 22
    707e:	0e 94 0a 1c 	call	0x3814	; 0x3814 <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    7082:	85 e4       	ldi	r24, 0x45	; 69
    7084:	0e 94 0a 1c 	call	0x3814	; 0x3814 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    7088:	0e 94 02 1c 	call	0x3804	; 0x3804 <i2c_stop>
    708c:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    708e:	0e 94 02 1c 	call	0x3804	; 0x3804 <i2c_stop>
	i2c_init();		// init I2C bus

	ret = initMMA7455L();

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
    7092:	86 ea       	ldi	r24, 0xA6	; 166
    7094:	90 e0       	ldi	r25, 0x00	; 0
    7096:	90 93 15 02 	sts	0x0215, r25
    709a:	80 93 14 02 	sts	0x0214, r24
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    709e:	86 ea       	ldi	r24, 0xA6	; 166
    70a0:	0e 94 8f 1b 	call	0x371e	; 0x371e <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    70a4:	88 23       	and	r24, r24
    70a6:	41 f5       	brne	.+80     	; 0x70f8 <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    70a8:	8d e2       	ldi	r24, 0x2D	; 45
    70aa:	0e 94 0a 1c 	call	0x3814	; 0x3814 <i2c_write>
        i2c_write(0x08);	// measurement mode
    70ae:	88 e0       	ldi	r24, 0x08	; 8
    70b0:	0e 94 0a 1c 	call	0x3814	; 0x3814 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    70b4:	0e 94 02 1c 	call	0x3804	; 0x3804 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    70b8:	80 91 14 02 	lds	r24, 0x0214
    70bc:	0e 94 8f 1b 	call	0x371e	; 0x371e <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    70c0:	88 23       	and	r24, r24
    70c2:	d1 f4       	brne	.+52     	; 0x70f8 <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    70c4:	81 e3       	ldi	r24, 0x31	; 49
    70c6:	0e 94 0a 1c 	call	0x3814	; 0x3814 <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    70ca:	80 e0       	ldi	r24, 0x00	; 0
    70cc:	0e 94 0a 1c 	call	0x3814	; 0x3814 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    70d0:	0e 94 02 1c 	call	0x3804	; 0x3804 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    70d4:	80 91 14 02 	lds	r24, 0x0214
    70d8:	0e 94 8f 1b 	call	0x371e	; 0x371e <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    70dc:	88 23       	and	r24, r24
    70de:	61 f4       	brne	.+24     	; 0x70f8 <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    70e0:	8c e2       	ldi	r24, 0x2C	; 44
    70e2:	0e 94 0a 1c 	call	0x3814	; 0x3814 <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    70e6:	89 e0       	ldi	r24, 0x09	; 9
    70e8:	0e 94 0a 1c 	call	0x3814	; 0x3814 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    70ec:	0e 94 02 1c 	call	0x3804	; 0x3804 <i2c_stop>
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
		} else {
			useAccel = USE_ADXL345;
    70f0:	81 e0       	ldi	r24, 0x01	; 1
    70f2:	80 93 27 04 	sts	0x0427, r24
    70f6:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    70f8:	0e 94 02 1c 	call	0x3804	; 0x3804 <i2c_stop>

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
    70fc:	82 e0       	ldi	r24, 0x02	; 2
    70fe:	80 93 27 04 	sts	0x0427, r24
    7102:	08 95       	ret

00007104 <initMMA7455L>:
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7104:	80 91 14 02 	lds	r24, 0x0214
    7108:	0e 94 8f 1b 	call	0x371e	; 0x371e <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    710c:	88 23       	and	r24, r24
    710e:	51 f4       	brne	.+20     	; 0x7124 <initMMA7455L+0x20>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    7110:	86 e1       	ldi	r24, 0x16	; 22
    7112:	0e 94 0a 1c 	call	0x3814	; 0x3814 <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    7116:	85 e4       	ldi	r24, 0x45	; 69
    7118:	0e 94 0a 1c 	call	0x3814	; 0x3814 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    711c:	0e 94 02 1c 	call	0x3804	; 0x3804 <i2c_stop>
    }

	return 0;				// configuration ok
    7120:	80 e0       	ldi	r24, 0x00	; 0

}
    7122:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    7124:	0e 94 02 1c 	call	0x3804	; 0x3804 <i2c_stop>
		return 1;
    7128:	81 e0       	ldi	r24, 0x01	; 1
    712a:	08 95       	ret

0000712c <initADXL345>:
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    712c:	80 91 14 02 	lds	r24, 0x0214
    7130:	0e 94 8f 1b 	call	0x371e	; 0x371e <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    7134:	88 23       	and	r24, r24
    7136:	31 f5       	brne	.+76     	; 0x7184 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    7138:	8d e2       	ldi	r24, 0x2D	; 45
    713a:	0e 94 0a 1c 	call	0x3814	; 0x3814 <i2c_write>
        i2c_write(0x08);	// measurement mode
    713e:	88 e0       	ldi	r24, 0x08	; 8
    7140:	0e 94 0a 1c 	call	0x3814	; 0x3814 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    7144:	0e 94 02 1c 	call	0x3804	; 0x3804 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7148:	80 91 14 02 	lds	r24, 0x0214
    714c:	0e 94 8f 1b 	call	0x371e	; 0x371e <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    7150:	88 23       	and	r24, r24
    7152:	c1 f4       	brne	.+48     	; 0x7184 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    7154:	81 e3       	ldi	r24, 0x31	; 49
    7156:	0e 94 0a 1c 	call	0x3814	; 0x3814 <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    715a:	80 e0       	ldi	r24, 0x00	; 0
    715c:	0e 94 0a 1c 	call	0x3814	; 0x3814 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    7160:	0e 94 02 1c 	call	0x3804	; 0x3804 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7164:	80 91 14 02 	lds	r24, 0x0214
    7168:	0e 94 8f 1b 	call	0x371e	; 0x371e <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    716c:	88 23       	and	r24, r24
    716e:	51 f4       	brne	.+20     	; 0x7184 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    7170:	8c e2       	ldi	r24, 0x2C	; 44
    7172:	0e 94 0a 1c 	call	0x3814	; 0x3814 <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    7176:	89 e0       	ldi	r24, 0x09	; 9
    7178:	0e 94 0a 1c 	call	0x3814	; 0x3814 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    717c:	0e 94 02 1c 	call	0x3804	; 0x3804 <i2c_stop>
    }

	return 0;
    7180:	80 e0       	ldi	r24, 0x00	; 0

}
    7182:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    7184:	0e 94 02 1c 	call	0x3804	; 0x3804 <i2c_stop>
		return 1;
    7188:	81 e0       	ldi	r24, 0x01	; 1
    718a:	08 95       	ret

0000718c <readAccelXY>:

	return 0;

}

void readAccelXY() {
    718c:	ff 92       	push	r15
    718e:	0f 93       	push	r16
    7190:	1f 93       	push	r17
    7192:	df 93       	push	r29
    7194:	cf 93       	push	r28
    7196:	0f 92       	push	r0
    7198:	cd b7       	in	r28, 0x3d	; 61
    719a:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[4];

	if(useAccel == USE_MMAX7455L) {
    719c:	80 91 27 04 	lds	r24, 0x0427
    71a0:	88 23       	and	r24, r24
    71a2:	91 f0       	breq	.+36     	; 0x71c8 <readAccelXY+0x3c>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else if(useAccel == USE_ADXL345) {
    71a4:	81 30       	cpi	r24, 0x01	; 1
    71a6:	09 f4       	brne	.+2      	; 0x71aa <readAccelXY+0x1e>
    71a8:	88 c0       	rjmp	.+272    	; 0x72ba <readAccelXY+0x12e>
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else {

		accX = 0;
    71aa:	10 92 29 04 	sts	0x0429, r1
    71ae:	10 92 28 04 	sts	0x0428, r1
		accY = 0;
    71b2:	10 92 2b 04 	sts	0x042B, r1
    71b6:	10 92 2a 04 	sts	0x042A, r1

	}

}
    71ba:	0f 90       	pop	r0
    71bc:	cf 91       	pop	r28
    71be:	df 91       	pop	r29
    71c0:	1f 91       	pop	r17
    71c2:	0f 91       	pop	r16
    71c4:	ff 90       	pop	r15
    71c6:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    71c8:	80 91 14 02 	lds	r24, 0x0214
    71cc:	0e 94 8f 1b 	call	0x371e	; 0x371e <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    71d0:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
		i2c_write(0x32);											// sends address to read from (X LSB)
    71d2:	0e 94 0a 1c 	call	0x3814	; 0x3814 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    71d6:	80 91 14 02 	lds	r24, 0x0214
    71da:	8f 5f       	subi	r24, 0xFF	; 255
    71dc:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <i2c_rep_start>

		for(i=0; i<3; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    71e0:	0e 94 1c 1c 	call	0x3838	; 0x3838 <i2c_readAck>
    71e4:	08 2f       	mov	r16, r24
    71e6:	0e 94 1c 1c 	call	0x3838	; 0x3838 <i2c_readAck>
    71ea:	f8 2e       	mov	r15, r24
    71ec:	0e 94 1c 1c 	call	0x3838	; 0x3838 <i2c_readAck>
    71f0:	18 2f       	mov	r17, r24
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    71f2:	0e 94 26 1c 	call	0x384c	; 0x384c <i2c_readNak>
		i2c_stop();													// set stop conditon = release bus
    71f6:	89 83       	std	Y+1, r24	; 0x01
    71f8:	0e 94 02 1c 	call	0x3804	; 0x3804 <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    71fc:	90 91 8b 05 	lds	r25, 0x058B
    7200:	89 81       	ldd	r24, Y+1	; 0x01
    7202:	99 23       	and	r25, r25
    7204:	39 f1       	breq	.+78     	; 0x7254 <readAccelXY+0xc8>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    7206:	4f 2d       	mov	r20, r15
    7208:	55 27       	eor	r21, r21
    720a:	47 fd       	sbrc	r20, 7
    720c:	50 95       	com	r21
    720e:	54 2f       	mov	r21, r20
    7210:	44 27       	eor	r20, r20
    7212:	60 2f       	mov	r22, r16
    7214:	77 27       	eor	r23, r23
    7216:	67 fd       	sbrc	r22, 7
    7218:	70 95       	com	r23
    721a:	46 2b       	or	r20, r22
    721c:	57 2b       	or	r21, r23
    721e:	50 93 29 04 	sts	0x0429, r21
    7222:	40 93 28 04 	sts	0x0428, r20
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    7226:	28 2f       	mov	r18, r24
    7228:	33 27       	eor	r19, r19
    722a:	27 fd       	sbrc	r18, 7
    722c:	30 95       	com	r19
    722e:	32 2f       	mov	r19, r18
    7230:	22 27       	eor	r18, r18
    7232:	81 2f       	mov	r24, r17
    7234:	99 27       	eor	r25, r25
    7236:	87 fd       	sbrc	r24, 7
    7238:	90 95       	com	r25
    723a:	28 2b       	or	r18, r24
    723c:	39 2b       	or	r19, r25
    723e:	30 93 2b 04 	sts	0x042B, r19
    7242:	20 93 2a 04 	sts	0x042A, r18
		accX = 0;
		accY = 0;

	}

}
    7246:	0f 90       	pop	r0
    7248:	cf 91       	pop	r28
    724a:	df 91       	pop	r29
    724c:	1f 91       	pop	r17
    724e:	0f 91       	pop	r16
    7250:	ff 90       	pop	r15
    7252:	08 95       	ret

		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    7254:	4f 2d       	mov	r20, r15
    7256:	55 27       	eor	r21, r21
    7258:	47 fd       	sbrc	r20, 7
    725a:	50 95       	com	r21
    725c:	54 2f       	mov	r21, r20
    725e:	44 27       	eor	r20, r20
    7260:	60 2f       	mov	r22, r16
    7262:	77 27       	eor	r23, r23
    7264:	67 fd       	sbrc	r22, 7
    7266:	70 95       	com	r23
    7268:	46 2b       	or	r20, r22
    726a:	57 2b       	or	r21, r23
    726c:	60 91 2e 04 	lds	r22, 0x042E
    7270:	70 91 2f 04 	lds	r23, 0x042F
    7274:	46 1b       	sub	r20, r22
    7276:	57 0b       	sbc	r21, r23
    7278:	50 93 29 04 	sts	0x0429, r21
    727c:	40 93 28 04 	sts	0x0428, r20
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    7280:	28 2f       	mov	r18, r24
    7282:	33 27       	eor	r19, r19
    7284:	27 fd       	sbrc	r18, 7
    7286:	30 95       	com	r19
    7288:	32 2f       	mov	r19, r18
    728a:	22 27       	eor	r18, r18
    728c:	81 2f       	mov	r24, r17
    728e:	99 27       	eor	r25, r25
    7290:	87 fd       	sbrc	r24, 7
    7292:	90 95       	com	r25
    7294:	28 2b       	or	r18, r24
    7296:	39 2b       	or	r19, r25
    7298:	80 91 30 04 	lds	r24, 0x0430
    729c:	90 91 31 04 	lds	r25, 0x0431
    72a0:	28 1b       	sub	r18, r24
    72a2:	39 0b       	sbc	r19, r25
    72a4:	30 93 2b 04 	sts	0x042B, r19
    72a8:	20 93 2a 04 	sts	0x042A, r18
		accX = 0;
		accY = 0;

	}

}
    72ac:	0f 90       	pop	r0
    72ae:	cf 91       	pop	r28
    72b0:	df 91       	pop	r29
    72b2:	1f 91       	pop	r17
    72b4:	0f 91       	pop	r16
    72b6:	ff 90       	pop	r15
    72b8:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    72ba:	80 91 14 02 	lds	r24, 0x0214
    72be:	0e 94 8f 1b 	call	0x371e	; 0x371e <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    72c2:	82 e3       	ldi	r24, 0x32	; 50
    72c4:	86 cf       	rjmp	.-244    	; 0x71d2 <readAccelXY+0x46>

000072c6 <readAccelXYZ>:

	}

}

void readAccelXYZ() {
    72c6:	df 93       	push	r29
    72c8:	cf 93       	push	r28
    72ca:	00 d0       	rcall	.+0      	; 0x72cc <readAccelXYZ+0x6>
    72cc:	00 d0       	rcall	.+0      	; 0x72ce <readAccelXYZ+0x8>
    72ce:	cd b7       	in	r28, 0x3d	; 61
    72d0:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[6];

	if(useAccel == USE_MMAX7455L) {
    72d2:	80 91 27 04 	lds	r24, 0x0427
    72d6:	88 23       	and	r24, r24
    72d8:	c1 f0       	breq	.+48     	; 0x730a <readAccelXYZ+0x44>
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    72da:	81 30       	cpi	r24, 0x01	; 1
    72dc:	09 f4       	brne	.+2      	; 0x72e0 <readAccelXYZ+0x1a>
    72de:	ad c0       	rjmp	.+346    	; 0x743a <readAccelXYZ+0x174>
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else {

		accX = 0;
    72e0:	10 92 29 04 	sts	0x0429, r1
    72e4:	10 92 28 04 	sts	0x0428, r1
		accY = 0;
    72e8:	10 92 2b 04 	sts	0x042B, r1
    72ec:	10 92 2a 04 	sts	0x042A, r1
		accZ = 0;
    72f0:	10 92 2d 04 	sts	0x042D, r1
    72f4:	10 92 2c 04 	sts	0x042C, r1

	}

}
    72f8:	26 96       	adiw	r28, 0x06	; 6
    72fa:	0f b6       	in	r0, 0x3f	; 63
    72fc:	f8 94       	cli
    72fe:	de bf       	out	0x3e, r29	; 62
    7300:	0f be       	out	0x3f, r0	; 63
    7302:	cd bf       	out	0x3d, r28	; 61
    7304:	cf 91       	pop	r28
    7306:	df 91       	pop	r29
    7308:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    730a:	80 91 14 02 	lds	r24, 0x0214
    730e:	0e 94 8f 1b 	call	0x371e	; 0x371e <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    7312:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
		i2c_write(0x32);											// sends address to read from (X LSB)
    7314:	0e 94 0a 1c 	call	0x3814	; 0x3814 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    7318:	80 91 14 02 	lds	r24, 0x0214
    731c:	8f 5f       	subi	r24, 0xFF	; 255
    731e:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <i2c_rep_start>

		for(i=0; i<5; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    7322:	0e 94 1c 1c 	call	0x3838	; 0x3838 <i2c_readAck>
    7326:	89 83       	std	Y+1, r24	; 0x01
    7328:	0e 94 1c 1c 	call	0x3838	; 0x3838 <i2c_readAck>
    732c:	8a 83       	std	Y+2, r24	; 0x02
    732e:	0e 94 1c 1c 	call	0x3838	; 0x3838 <i2c_readAck>
    7332:	8b 83       	std	Y+3, r24	; 0x03
    7334:	0e 94 1c 1c 	call	0x3838	; 0x3838 <i2c_readAck>
    7338:	8c 83       	std	Y+4, r24	; 0x04
    733a:	0e 94 1c 1c 	call	0x3838	; 0x3838 <i2c_readAck>
    733e:	8d 83       	std	Y+5, r24	; 0x05
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    7340:	0e 94 26 1c 	call	0x384c	; 0x384c <i2c_readNak>
    7344:	8e 83       	std	Y+6, r24	; 0x06
		i2c_stop();													// set stop conditon = release bus
    7346:	0e 94 02 1c 	call	0x3804	; 0x3804 <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    734a:	80 91 8b 05 	lds	r24, 0x058B
    734e:	88 23       	and	r24, r24
    7350:	89 f1       	breq	.+98     	; 0x73b4 <readAccelXYZ+0xee>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    7352:	8a 81       	ldd	r24, Y+2	; 0x02
    7354:	99 27       	eor	r25, r25
    7356:	87 fd       	sbrc	r24, 7
    7358:	90 95       	com	r25
    735a:	98 2f       	mov	r25, r24
    735c:	88 27       	eor	r24, r24
    735e:	29 81       	ldd	r18, Y+1	; 0x01
    7360:	33 27       	eor	r19, r19
    7362:	27 fd       	sbrc	r18, 7
    7364:	30 95       	com	r19
    7366:	82 2b       	or	r24, r18
    7368:	93 2b       	or	r25, r19
    736a:	90 93 29 04 	sts	0x0429, r25
    736e:	80 93 28 04 	sts	0x0428, r24
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    7372:	8c 81       	ldd	r24, Y+4	; 0x04
    7374:	99 27       	eor	r25, r25
    7376:	87 fd       	sbrc	r24, 7
    7378:	90 95       	com	r25
    737a:	98 2f       	mov	r25, r24
    737c:	88 27       	eor	r24, r24
    737e:	2b 81       	ldd	r18, Y+3	; 0x03
    7380:	33 27       	eor	r19, r19
    7382:	27 fd       	sbrc	r18, 7
    7384:	30 95       	com	r19
    7386:	82 2b       	or	r24, r18
    7388:	93 2b       	or	r25, r19
    738a:	90 93 2b 04 	sts	0x042B, r25
    738e:	80 93 2a 04 	sts	0x042A, r24
			accZ = ((signed int)buff[5]<<8)|buff[4];    			// Z axis
    7392:	8e 81       	ldd	r24, Y+6	; 0x06
    7394:	99 27       	eor	r25, r25
    7396:	87 fd       	sbrc	r24, 7
    7398:	90 95       	com	r25
    739a:	98 2f       	mov	r25, r24
    739c:	88 27       	eor	r24, r24
    739e:	2d 81       	ldd	r18, Y+5	; 0x05
    73a0:	33 27       	eor	r19, r19
    73a2:	27 fd       	sbrc	r18, 7
    73a4:	30 95       	com	r19
    73a6:	82 2b       	or	r24, r18
    73a8:	93 2b       	or	r25, r19
    73aa:	90 93 2d 04 	sts	0x042D, r25
    73ae:	80 93 2c 04 	sts	0x042C, r24
    73b2:	a2 cf       	rjmp	.-188    	; 0x72f8 <readAccelXYZ+0x32>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    73b4:	8a 81       	ldd	r24, Y+2	; 0x02
    73b6:	99 27       	eor	r25, r25
    73b8:	87 fd       	sbrc	r24, 7
    73ba:	90 95       	com	r25
    73bc:	98 2f       	mov	r25, r24
    73be:	88 27       	eor	r24, r24
    73c0:	29 81       	ldd	r18, Y+1	; 0x01
    73c2:	33 27       	eor	r19, r19
    73c4:	27 fd       	sbrc	r18, 7
    73c6:	30 95       	com	r19
    73c8:	82 2b       	or	r24, r18
    73ca:	93 2b       	or	r25, r19
    73cc:	20 91 2e 04 	lds	r18, 0x042E
    73d0:	30 91 2f 04 	lds	r19, 0x042F
    73d4:	82 1b       	sub	r24, r18
    73d6:	93 0b       	sbc	r25, r19
    73d8:	90 93 29 04 	sts	0x0429, r25
    73dc:	80 93 28 04 	sts	0x0428, r24
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    73e0:	8c 81       	ldd	r24, Y+4	; 0x04
    73e2:	99 27       	eor	r25, r25
    73e4:	87 fd       	sbrc	r24, 7
    73e6:	90 95       	com	r25
    73e8:	98 2f       	mov	r25, r24
    73ea:	88 27       	eor	r24, r24
    73ec:	2b 81       	ldd	r18, Y+3	; 0x03
    73ee:	33 27       	eor	r19, r19
    73f0:	27 fd       	sbrc	r18, 7
    73f2:	30 95       	com	r19
    73f4:	82 2b       	or	r24, r18
    73f6:	93 2b       	or	r25, r19
    73f8:	20 91 30 04 	lds	r18, 0x0430
    73fc:	30 91 31 04 	lds	r19, 0x0431
    7400:	82 1b       	sub	r24, r18
    7402:	93 0b       	sbc	r25, r19
    7404:	90 93 2b 04 	sts	0x042B, r25
    7408:	80 93 2a 04 	sts	0x042A, r24
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
    740c:	8e 81       	ldd	r24, Y+6	; 0x06
    740e:	99 27       	eor	r25, r25
    7410:	87 fd       	sbrc	r24, 7
    7412:	90 95       	com	r25
    7414:	98 2f       	mov	r25, r24
    7416:	88 27       	eor	r24, r24
    7418:	2d 81       	ldd	r18, Y+5	; 0x05
    741a:	33 27       	eor	r19, r19
    741c:	27 fd       	sbrc	r18, 7
    741e:	30 95       	com	r19
    7420:	82 2b       	or	r24, r18
    7422:	93 2b       	or	r25, r19
    7424:	20 91 32 04 	lds	r18, 0x0432
    7428:	30 91 33 04 	lds	r19, 0x0433
    742c:	82 1b       	sub	r24, r18
    742e:	93 0b       	sbc	r25, r19
    7430:	90 93 2d 04 	sts	0x042D, r25
    7434:	80 93 2c 04 	sts	0x042C, r24
    7438:	5f cf       	rjmp	.-322    	; 0x72f8 <readAccelXYZ+0x32>
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    743a:	80 91 14 02 	lds	r24, 0x0214
    743e:	0e 94 8f 1b 	call	0x371e	; 0x371e <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    7442:	82 e3       	ldi	r24, 0x32	; 50
    7444:	67 cf       	rjmp	.-306    	; 0x7314 <readAccelXYZ+0x4e>

00007446 <calibrateSensors>:

#include "sensors.h"


void calibrateSensors() {
    7446:	cf 93       	push	r28
    7448:	df 93       	push	r29

	unsigned int i=0;

	pwm_red = 0;
    744a:	10 92 0c 02 	sts	0x020C, r1
	pwm_green = 0;
    744e:	10 92 0d 02 	sts	0x020D, r1
	pwm_blue = 0;
    7452:	10 92 0e 02 	sts	0x020E, r1
	updateRedLed(pwm_red);
    7456:	80 e0       	ldi	r24, 0x00	; 0
    7458:	0e 94 2b 37 	call	0x6e56	; 0x6e56 <updateRedLed>
	updateGreenLed(pwm_green);
    745c:	80 91 0d 02 	lds	r24, 0x020D
    7460:	0e 94 3f 37 	call	0x6e7e	; 0x6e7e <updateGreenLed>
	updateBlueLed(pwm_blue);
    7464:	80 91 0e 02 	lds	r24, 0x020E
    7468:	0e 94 53 37 	call	0x6ea6	; 0x6ea6 <updateBlueLed>

	calibrationCycle = 0;
    746c:	10 92 4a 04 	sts	0x044A, r1
    7470:	10 92 49 04 	sts	0x0449, r1
	startCalibration = 1;
    7474:	81 e0       	ldi	r24, 0x01	; 1
    7476:	80 93 8b 05 	sts	0x058B, r24
					}
					accOffsetXSum = 0;
					accOffsetYSum = 0;
					accOffsetZSum = 0;

					calibrationCycle++;
    747a:	c1 e0       	ldi	r28, 0x01	; 1
    747c:	d0 e0       	ldi	r29, 0x00	; 0
	calibrationCycle = 0;
	startCalibration = 1;

	while(startCalibration) {

		readAccelXYZ();
    747e:	0e 94 63 39 	call	0x72c6	; 0x72c6 <readAccelXYZ>

		if(calibrationCycle<=CALIBRATION_CYCLES) {
    7482:	20 91 49 04 	lds	r18, 0x0449
    7486:	30 91 4a 04 	lds	r19, 0x044A
    748a:	21 31       	cpi	r18, 0x11	; 17
    748c:	31 05       	cpc	r19, r1
    748e:	0c f4       	brge	.+2      	; 0x7492 <calibrateSensors+0x4c>
    7490:	35 c1       	rjmp	.+618    	; 0x76fc <calibrateSensors+0x2b6>
			continue;

		} else if(calibrationCycle > CALIBRATION_CYCLES) {

			for(i=0;i<12;i++) {
				proximityOffset[i] = proximitySum[i]>>4;
    7492:	80 91 87 02 	lds	r24, 0x0287
    7496:	90 91 88 02 	lds	r25, 0x0288
    749a:	a0 91 89 02 	lds	r26, 0x0289
    749e:	b0 91 8a 02 	lds	r27, 0x028A
    74a2:	54 e0       	ldi	r21, 0x04	; 4
    74a4:	b6 95       	lsr	r27
    74a6:	a7 95       	ror	r26
    74a8:	97 95       	ror	r25
    74aa:	87 95       	ror	r24
    74ac:	5a 95       	dec	r21
    74ae:	d1 f7       	brne	.-12     	; 0x74a4 <calibrateSensors+0x5e>
    74b0:	90 93 70 02 	sts	0x0270, r25
    74b4:	80 93 6f 02 	sts	0x026F, r24
    74b8:	80 91 8b 02 	lds	r24, 0x028B
    74bc:	90 91 8c 02 	lds	r25, 0x028C
    74c0:	a0 91 8d 02 	lds	r26, 0x028D
    74c4:	b0 91 8e 02 	lds	r27, 0x028E
    74c8:	44 e0       	ldi	r20, 0x04	; 4
    74ca:	b6 95       	lsr	r27
    74cc:	a7 95       	ror	r26
    74ce:	97 95       	ror	r25
    74d0:	87 95       	ror	r24
    74d2:	4a 95       	dec	r20
    74d4:	d1 f7       	brne	.-12     	; 0x74ca <calibrateSensors+0x84>
    74d6:	90 93 72 02 	sts	0x0272, r25
    74da:	80 93 71 02 	sts	0x0271, r24
    74de:	80 91 8f 02 	lds	r24, 0x028F
    74e2:	90 91 90 02 	lds	r25, 0x0290
    74e6:	a0 91 91 02 	lds	r26, 0x0291
    74ea:	b0 91 92 02 	lds	r27, 0x0292
    74ee:	34 e0       	ldi	r19, 0x04	; 4
    74f0:	b6 95       	lsr	r27
    74f2:	a7 95       	ror	r26
    74f4:	97 95       	ror	r25
    74f6:	87 95       	ror	r24
    74f8:	3a 95       	dec	r19
    74fa:	d1 f7       	brne	.-12     	; 0x74f0 <calibrateSensors+0xaa>
    74fc:	90 93 74 02 	sts	0x0274, r25
    7500:	80 93 73 02 	sts	0x0273, r24
    7504:	80 91 93 02 	lds	r24, 0x0293
    7508:	90 91 94 02 	lds	r25, 0x0294
    750c:	a0 91 95 02 	lds	r26, 0x0295
    7510:	b0 91 96 02 	lds	r27, 0x0296
    7514:	24 e0       	ldi	r18, 0x04	; 4
    7516:	b6 95       	lsr	r27
    7518:	a7 95       	ror	r26
    751a:	97 95       	ror	r25
    751c:	87 95       	ror	r24
    751e:	2a 95       	dec	r18
    7520:	d1 f7       	brne	.-12     	; 0x7516 <calibrateSensors+0xd0>
    7522:	90 93 76 02 	sts	0x0276, r25
    7526:	80 93 75 02 	sts	0x0275, r24
    752a:	80 91 97 02 	lds	r24, 0x0297
    752e:	90 91 98 02 	lds	r25, 0x0298
    7532:	a0 91 99 02 	lds	r26, 0x0299
    7536:	b0 91 9a 02 	lds	r27, 0x029A
    753a:	f4 e0       	ldi	r31, 0x04	; 4
    753c:	b6 95       	lsr	r27
    753e:	a7 95       	ror	r26
    7540:	97 95       	ror	r25
    7542:	87 95       	ror	r24
    7544:	fa 95       	dec	r31
    7546:	d1 f7       	brne	.-12     	; 0x753c <calibrateSensors+0xf6>
    7548:	90 93 78 02 	sts	0x0278, r25
    754c:	80 93 77 02 	sts	0x0277, r24
    7550:	80 91 9b 02 	lds	r24, 0x029B
    7554:	90 91 9c 02 	lds	r25, 0x029C
    7558:	a0 91 9d 02 	lds	r26, 0x029D
    755c:	b0 91 9e 02 	lds	r27, 0x029E
    7560:	e4 e0       	ldi	r30, 0x04	; 4
    7562:	b6 95       	lsr	r27
    7564:	a7 95       	ror	r26
    7566:	97 95       	ror	r25
    7568:	87 95       	ror	r24
    756a:	ea 95       	dec	r30
    756c:	d1 f7       	brne	.-12     	; 0x7562 <calibrateSensors+0x11c>
    756e:	90 93 7a 02 	sts	0x027A, r25
    7572:	80 93 79 02 	sts	0x0279, r24
    7576:	80 91 9f 02 	lds	r24, 0x029F
    757a:	90 91 a0 02 	lds	r25, 0x02A0
    757e:	a0 91 a1 02 	lds	r26, 0x02A1
    7582:	b0 91 a2 02 	lds	r27, 0x02A2
    7586:	74 e0       	ldi	r23, 0x04	; 4
    7588:	b6 95       	lsr	r27
    758a:	a7 95       	ror	r26
    758c:	97 95       	ror	r25
    758e:	87 95       	ror	r24
    7590:	7a 95       	dec	r23
    7592:	d1 f7       	brne	.-12     	; 0x7588 <calibrateSensors+0x142>
    7594:	90 93 7c 02 	sts	0x027C, r25
    7598:	80 93 7b 02 	sts	0x027B, r24
    759c:	80 91 a3 02 	lds	r24, 0x02A3
    75a0:	90 91 a4 02 	lds	r25, 0x02A4
    75a4:	a0 91 a5 02 	lds	r26, 0x02A5
    75a8:	b0 91 a6 02 	lds	r27, 0x02A6
    75ac:	64 e0       	ldi	r22, 0x04	; 4
    75ae:	b6 95       	lsr	r27
    75b0:	a7 95       	ror	r26
    75b2:	97 95       	ror	r25
    75b4:	87 95       	ror	r24
    75b6:	6a 95       	dec	r22
    75b8:	d1 f7       	brne	.-12     	; 0x75ae <calibrateSensors+0x168>
    75ba:	90 93 7e 02 	sts	0x027E, r25
    75be:	80 93 7d 02 	sts	0x027D, r24
    75c2:	80 91 ab 02 	lds	r24, 0x02AB
    75c6:	90 91 ac 02 	lds	r25, 0x02AC
    75ca:	a0 91 ad 02 	lds	r26, 0x02AD
    75ce:	b0 91 ae 02 	lds	r27, 0x02AE
    75d2:	54 e0       	ldi	r21, 0x04	; 4
    75d4:	b6 95       	lsr	r27
    75d6:	a7 95       	ror	r26
    75d8:	97 95       	ror	r25
    75da:	87 95       	ror	r24
    75dc:	5a 95       	dec	r21
    75de:	d1 f7       	brne	.-12     	; 0x75d4 <calibrateSensors+0x18e>
    75e0:	9c 01       	movw	r18, r24
    75e2:	80 91 af 02 	lds	r24, 0x02AF
    75e6:	90 91 b0 02 	lds	r25, 0x02B0
    75ea:	a0 91 b1 02 	lds	r26, 0x02B1
    75ee:	b0 91 b2 02 	lds	r27, 0x02B2
    75f2:	44 e0       	ldi	r20, 0x04	; 4
    75f4:	b6 95       	lsr	r27
    75f6:	a7 95       	ror	r26
    75f8:	97 95       	ror	r25
    75fa:	87 95       	ror	r24
    75fc:	4a 95       	dec	r20
    75fe:	d1 f7       	brne	.-12     	; 0x75f4 <calibrateSensors+0x1ae>
    7600:	bc 01       	movw	r22, r24
    7602:	80 91 b3 02 	lds	r24, 0x02B3
    7606:	90 91 b4 02 	lds	r25, 0x02B4
    760a:	a0 91 b5 02 	lds	r26, 0x02B5
    760e:	b0 91 b6 02 	lds	r27, 0x02B6
    7612:	f4 e0       	ldi	r31, 0x04	; 4
    7614:	b6 95       	lsr	r27
    7616:	a7 95       	ror	r26
    7618:	97 95       	ror	r25
    761a:	87 95       	ror	r24
    761c:	fa 95       	dec	r31
    761e:	d1 f7       	brne	.-12     	; 0x7614 <calibrateSensors+0x1ce>
    7620:	ac 01       	movw	r20, r24
    7622:	80 91 a7 02 	lds	r24, 0x02A7
    7626:	90 91 a8 02 	lds	r25, 0x02A8
    762a:	a0 91 a9 02 	lds	r26, 0x02A9
    762e:	b0 91 aa 02 	lds	r27, 0x02AA
    7632:	e4 e0       	ldi	r30, 0x04	; 4
    7634:	b6 95       	lsr	r27
    7636:	a7 95       	ror	r26
    7638:	97 95       	ror	r25
    763a:	87 95       	ror	r24
    763c:	ea 95       	dec	r30
    763e:	d1 f7       	brne	.-12     	; 0x7634 <calibrateSensors+0x1ee>
			}

			for(i=8; i<12; i++) {
				proximityOffset[i] -= 512;	// move the "0" to 512 (values around 512)
    7640:	80 50       	subi	r24, 0x00	; 0
    7642:	92 40       	sbci	r25, 0x02	; 2
    7644:	90 93 80 02 	sts	0x0280, r25
    7648:	80 93 7f 02 	sts	0x027F, r24
    764c:	20 50       	subi	r18, 0x00	; 0
    764e:	32 40       	sbci	r19, 0x02	; 2
    7650:	30 93 82 02 	sts	0x0282, r19
    7654:	20 93 81 02 	sts	0x0281, r18
    7658:	60 50       	subi	r22, 0x00	; 0
    765a:	72 40       	sbci	r23, 0x02	; 2
    765c:	70 93 84 02 	sts	0x0284, r23
    7660:	60 93 83 02 	sts	0x0283, r22
    7664:	40 50       	subi	r20, 0x00	; 0
    7666:	52 40       	sbci	r21, 0x02	; 2
    7668:	50 93 86 02 	sts	0x0286, r21
    766c:	40 93 85 02 	sts	0x0285, r20
			}

			accOffsetX = accOffsetXSum>>4;
    7670:	80 91 34 04 	lds	r24, 0x0434
    7674:	90 91 35 04 	lds	r25, 0x0435
    7678:	95 95       	asr	r25
    767a:	87 95       	ror	r24
    767c:	95 95       	asr	r25
    767e:	87 95       	ror	r24
    7680:	95 95       	asr	r25
    7682:	87 95       	ror	r24
    7684:	95 95       	asr	r25
    7686:	87 95       	ror	r24
    7688:	90 93 2f 04 	sts	0x042F, r25
    768c:	80 93 2e 04 	sts	0x042E, r24
			accOffsetY = accOffsetYSum>>4;
    7690:	80 91 36 04 	lds	r24, 0x0436
    7694:	90 91 37 04 	lds	r25, 0x0437
    7698:	95 95       	asr	r25
    769a:	87 95       	ror	r24
    769c:	95 95       	asr	r25
    769e:	87 95       	ror	r24
    76a0:	95 95       	asr	r25
    76a2:	87 95       	ror	r24
    76a4:	95 95       	asr	r25
    76a6:	87 95       	ror	r24
    76a8:	90 93 31 04 	sts	0x0431, r25
    76ac:	80 93 30 04 	sts	0x0430, r24
			accOffsetZ = accOffsetZSum>>4;
    76b0:	80 91 38 04 	lds	r24, 0x0438
    76b4:	90 91 39 04 	lds	r25, 0x0439
    76b8:	95 95       	asr	r25
    76ba:	87 95       	ror	r24
    76bc:	95 95       	asr	r25
    76be:	87 95       	ror	r24
    76c0:	95 95       	asr	r25
    76c2:	87 95       	ror	r24
    76c4:	95 95       	asr	r25
    76c6:	87 95       	ror	r24
    76c8:	90 93 33 04 	sts	0x0433, r25
    76cc:	80 93 32 04 	sts	0x0432, r24

			//proxUpdated = 0;
			//if(proxUpdated) {	
				startCalibration = 0;					
    76d0:	10 92 8b 05 	sts	0x058B, r1

		}

	}

	pwm_red = 255;
    76d4:	8f ef       	ldi	r24, 0xFF	; 255
    76d6:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    76da:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    76de:	80 93 0e 02 	sts	0x020E, r24
	updateRedLed(pwm_red);
    76e2:	0e 94 2b 37 	call	0x6e56	; 0x6e56 <updateRedLed>
	updateGreenLed(pwm_green);
    76e6:	80 91 0d 02 	lds	r24, 0x020D
    76ea:	0e 94 3f 37 	call	0x6e7e	; 0x6e7e <updateGreenLed>
	updateBlueLed(pwm_blue);
    76ee:	80 91 0e 02 	lds	r24, 0x020E
    76f2:	0e 94 53 37 	call	0x6ea6	; 0x6ea6 <updateBlueLed>

}
    76f6:	df 91       	pop	r29
    76f8:	cf 91       	pop	r28
    76fa:	08 95       	ret

		readAccelXYZ();

		if(calibrationCycle<=CALIBRATION_CYCLES) {

			if(proxUpdated) {
    76fc:	80 91 be 02 	lds	r24, 0x02BE
    7700:	88 23       	and	r24, r24
    7702:	09 f4       	brne	.+2      	; 0x7706 <calibrateSensors+0x2c0>
    7704:	86 c1       	rjmp	.+780    	; 0x7a12 <calibrateSensors+0x5cc>

				proxUpdated = 0;
    7706:	10 92 be 02 	sts	0x02BE, r1

				if(calibrationCycle==0) {		// reset all variables
    770a:	21 15       	cp	r18, r1
    770c:	31 05       	cpc	r19, r1
    770e:	09 f4       	brne	.+2      	; 0x7712 <calibrateSensors+0x2cc>
    7710:	86 c1       	rjmp	.+780    	; 0x7a1e <calibrateSensors+0x5d8>
												// "proximityResult" hasn't the offset reset to 0. so we start the actual calibration
												// the next time
				}

				for (i=0;i<12;i++) {
					proximitySum[i] += proximityResult[i];
    7712:	80 91 57 02 	lds	r24, 0x0257
    7716:	90 91 58 02 	lds	r25, 0x0258
    771a:	aa 27       	eor	r26, r26
    771c:	97 fd       	sbrc	r25, 7
    771e:	a0 95       	com	r26
    7720:	ba 2f       	mov	r27, r26
    7722:	40 91 87 02 	lds	r20, 0x0287
    7726:	50 91 88 02 	lds	r21, 0x0288
    772a:	60 91 89 02 	lds	r22, 0x0289
    772e:	70 91 8a 02 	lds	r23, 0x028A
    7732:	84 0f       	add	r24, r20
    7734:	95 1f       	adc	r25, r21
    7736:	a6 1f       	adc	r26, r22
    7738:	b7 1f       	adc	r27, r23
    773a:	80 93 87 02 	sts	0x0287, r24
    773e:	90 93 88 02 	sts	0x0288, r25
    7742:	a0 93 89 02 	sts	0x0289, r26
    7746:	b0 93 8a 02 	sts	0x028A, r27
    774a:	80 91 59 02 	lds	r24, 0x0259
    774e:	90 91 5a 02 	lds	r25, 0x025A
    7752:	aa 27       	eor	r26, r26
    7754:	97 fd       	sbrc	r25, 7
    7756:	a0 95       	com	r26
    7758:	ba 2f       	mov	r27, r26
    775a:	40 91 8b 02 	lds	r20, 0x028B
    775e:	50 91 8c 02 	lds	r21, 0x028C
    7762:	60 91 8d 02 	lds	r22, 0x028D
    7766:	70 91 8e 02 	lds	r23, 0x028E
    776a:	84 0f       	add	r24, r20
    776c:	95 1f       	adc	r25, r21
    776e:	a6 1f       	adc	r26, r22
    7770:	b7 1f       	adc	r27, r23
    7772:	80 93 8b 02 	sts	0x028B, r24
    7776:	90 93 8c 02 	sts	0x028C, r25
    777a:	a0 93 8d 02 	sts	0x028D, r26
    777e:	b0 93 8e 02 	sts	0x028E, r27
    7782:	80 91 5b 02 	lds	r24, 0x025B
    7786:	90 91 5c 02 	lds	r25, 0x025C
    778a:	aa 27       	eor	r26, r26
    778c:	97 fd       	sbrc	r25, 7
    778e:	a0 95       	com	r26
    7790:	ba 2f       	mov	r27, r26
    7792:	40 91 8f 02 	lds	r20, 0x028F
    7796:	50 91 90 02 	lds	r21, 0x0290
    779a:	60 91 91 02 	lds	r22, 0x0291
    779e:	70 91 92 02 	lds	r23, 0x0292
    77a2:	84 0f       	add	r24, r20
    77a4:	95 1f       	adc	r25, r21
    77a6:	a6 1f       	adc	r26, r22
    77a8:	b7 1f       	adc	r27, r23
    77aa:	80 93 8f 02 	sts	0x028F, r24
    77ae:	90 93 90 02 	sts	0x0290, r25
    77b2:	a0 93 91 02 	sts	0x0291, r26
    77b6:	b0 93 92 02 	sts	0x0292, r27
    77ba:	80 91 5d 02 	lds	r24, 0x025D
    77be:	90 91 5e 02 	lds	r25, 0x025E
    77c2:	aa 27       	eor	r26, r26
    77c4:	97 fd       	sbrc	r25, 7
    77c6:	a0 95       	com	r26
    77c8:	ba 2f       	mov	r27, r26
    77ca:	40 91 93 02 	lds	r20, 0x0293
    77ce:	50 91 94 02 	lds	r21, 0x0294
    77d2:	60 91 95 02 	lds	r22, 0x0295
    77d6:	70 91 96 02 	lds	r23, 0x0296
    77da:	84 0f       	add	r24, r20
    77dc:	95 1f       	adc	r25, r21
    77de:	a6 1f       	adc	r26, r22
    77e0:	b7 1f       	adc	r27, r23
    77e2:	80 93 93 02 	sts	0x0293, r24
    77e6:	90 93 94 02 	sts	0x0294, r25
    77ea:	a0 93 95 02 	sts	0x0295, r26
    77ee:	b0 93 96 02 	sts	0x0296, r27
    77f2:	80 91 5f 02 	lds	r24, 0x025F
    77f6:	90 91 60 02 	lds	r25, 0x0260
    77fa:	aa 27       	eor	r26, r26
    77fc:	97 fd       	sbrc	r25, 7
    77fe:	a0 95       	com	r26
    7800:	ba 2f       	mov	r27, r26
    7802:	40 91 97 02 	lds	r20, 0x0297
    7806:	50 91 98 02 	lds	r21, 0x0298
    780a:	60 91 99 02 	lds	r22, 0x0299
    780e:	70 91 9a 02 	lds	r23, 0x029A
    7812:	84 0f       	add	r24, r20
    7814:	95 1f       	adc	r25, r21
    7816:	a6 1f       	adc	r26, r22
    7818:	b7 1f       	adc	r27, r23
    781a:	80 93 97 02 	sts	0x0297, r24
    781e:	90 93 98 02 	sts	0x0298, r25
    7822:	a0 93 99 02 	sts	0x0299, r26
    7826:	b0 93 9a 02 	sts	0x029A, r27
    782a:	80 91 61 02 	lds	r24, 0x0261
    782e:	90 91 62 02 	lds	r25, 0x0262
    7832:	aa 27       	eor	r26, r26
    7834:	97 fd       	sbrc	r25, 7
    7836:	a0 95       	com	r26
    7838:	ba 2f       	mov	r27, r26
    783a:	40 91 9b 02 	lds	r20, 0x029B
    783e:	50 91 9c 02 	lds	r21, 0x029C
    7842:	60 91 9d 02 	lds	r22, 0x029D
    7846:	70 91 9e 02 	lds	r23, 0x029E
    784a:	84 0f       	add	r24, r20
    784c:	95 1f       	adc	r25, r21
    784e:	a6 1f       	adc	r26, r22
    7850:	b7 1f       	adc	r27, r23
    7852:	80 93 9b 02 	sts	0x029B, r24
    7856:	90 93 9c 02 	sts	0x029C, r25
    785a:	a0 93 9d 02 	sts	0x029D, r26
    785e:	b0 93 9e 02 	sts	0x029E, r27
    7862:	80 91 63 02 	lds	r24, 0x0263
    7866:	90 91 64 02 	lds	r25, 0x0264
    786a:	aa 27       	eor	r26, r26
    786c:	97 fd       	sbrc	r25, 7
    786e:	a0 95       	com	r26
    7870:	ba 2f       	mov	r27, r26
    7872:	40 91 9f 02 	lds	r20, 0x029F
    7876:	50 91 a0 02 	lds	r21, 0x02A0
    787a:	60 91 a1 02 	lds	r22, 0x02A1
    787e:	70 91 a2 02 	lds	r23, 0x02A2
    7882:	84 0f       	add	r24, r20
    7884:	95 1f       	adc	r25, r21
    7886:	a6 1f       	adc	r26, r22
    7888:	b7 1f       	adc	r27, r23
    788a:	80 93 9f 02 	sts	0x029F, r24
    788e:	90 93 a0 02 	sts	0x02A0, r25
    7892:	a0 93 a1 02 	sts	0x02A1, r26
    7896:	b0 93 a2 02 	sts	0x02A2, r27
    789a:	80 91 65 02 	lds	r24, 0x0265
    789e:	90 91 66 02 	lds	r25, 0x0266
    78a2:	aa 27       	eor	r26, r26
    78a4:	97 fd       	sbrc	r25, 7
    78a6:	a0 95       	com	r26
    78a8:	ba 2f       	mov	r27, r26
    78aa:	40 91 a3 02 	lds	r20, 0x02A3
    78ae:	50 91 a4 02 	lds	r21, 0x02A4
    78b2:	60 91 a5 02 	lds	r22, 0x02A5
    78b6:	70 91 a6 02 	lds	r23, 0x02A6
    78ba:	84 0f       	add	r24, r20
    78bc:	95 1f       	adc	r25, r21
    78be:	a6 1f       	adc	r26, r22
    78c0:	b7 1f       	adc	r27, r23
    78c2:	80 93 a3 02 	sts	0x02A3, r24
    78c6:	90 93 a4 02 	sts	0x02A4, r25
    78ca:	a0 93 a5 02 	sts	0x02A5, r26
    78ce:	b0 93 a6 02 	sts	0x02A6, r27
    78d2:	80 91 67 02 	lds	r24, 0x0267
    78d6:	90 91 68 02 	lds	r25, 0x0268
    78da:	aa 27       	eor	r26, r26
    78dc:	97 fd       	sbrc	r25, 7
    78de:	a0 95       	com	r26
    78e0:	ba 2f       	mov	r27, r26
    78e2:	40 91 a7 02 	lds	r20, 0x02A7
    78e6:	50 91 a8 02 	lds	r21, 0x02A8
    78ea:	60 91 a9 02 	lds	r22, 0x02A9
    78ee:	70 91 aa 02 	lds	r23, 0x02AA
    78f2:	84 0f       	add	r24, r20
    78f4:	95 1f       	adc	r25, r21
    78f6:	a6 1f       	adc	r26, r22
    78f8:	b7 1f       	adc	r27, r23
    78fa:	80 93 a7 02 	sts	0x02A7, r24
    78fe:	90 93 a8 02 	sts	0x02A8, r25
    7902:	a0 93 a9 02 	sts	0x02A9, r26
    7906:	b0 93 aa 02 	sts	0x02AA, r27
    790a:	80 91 69 02 	lds	r24, 0x0269
    790e:	90 91 6a 02 	lds	r25, 0x026A
    7912:	aa 27       	eor	r26, r26
    7914:	97 fd       	sbrc	r25, 7
    7916:	a0 95       	com	r26
    7918:	ba 2f       	mov	r27, r26
    791a:	40 91 ab 02 	lds	r20, 0x02AB
    791e:	50 91 ac 02 	lds	r21, 0x02AC
    7922:	60 91 ad 02 	lds	r22, 0x02AD
    7926:	70 91 ae 02 	lds	r23, 0x02AE
    792a:	84 0f       	add	r24, r20
    792c:	95 1f       	adc	r25, r21
    792e:	a6 1f       	adc	r26, r22
    7930:	b7 1f       	adc	r27, r23
    7932:	80 93 ab 02 	sts	0x02AB, r24
    7936:	90 93 ac 02 	sts	0x02AC, r25
    793a:	a0 93 ad 02 	sts	0x02AD, r26
    793e:	b0 93 ae 02 	sts	0x02AE, r27
    7942:	80 91 6b 02 	lds	r24, 0x026B
    7946:	90 91 6c 02 	lds	r25, 0x026C
    794a:	aa 27       	eor	r26, r26
    794c:	97 fd       	sbrc	r25, 7
    794e:	a0 95       	com	r26
    7950:	ba 2f       	mov	r27, r26
    7952:	40 91 af 02 	lds	r20, 0x02AF
    7956:	50 91 b0 02 	lds	r21, 0x02B0
    795a:	60 91 b1 02 	lds	r22, 0x02B1
    795e:	70 91 b2 02 	lds	r23, 0x02B2
    7962:	84 0f       	add	r24, r20
    7964:	95 1f       	adc	r25, r21
    7966:	a6 1f       	adc	r26, r22
    7968:	b7 1f       	adc	r27, r23
    796a:	80 93 af 02 	sts	0x02AF, r24
    796e:	90 93 b0 02 	sts	0x02B0, r25
    7972:	a0 93 b1 02 	sts	0x02B1, r26
    7976:	b0 93 b2 02 	sts	0x02B2, r27
    797a:	80 91 6d 02 	lds	r24, 0x026D
    797e:	90 91 6e 02 	lds	r25, 0x026E
    7982:	aa 27       	eor	r26, r26
    7984:	97 fd       	sbrc	r25, 7
    7986:	a0 95       	com	r26
    7988:	ba 2f       	mov	r27, r26
    798a:	40 91 b3 02 	lds	r20, 0x02B3
    798e:	50 91 b4 02 	lds	r21, 0x02B4
    7992:	60 91 b5 02 	lds	r22, 0x02B5
    7996:	70 91 b6 02 	lds	r23, 0x02B6
    799a:	84 0f       	add	r24, r20
    799c:	95 1f       	adc	r25, r21
    799e:	a6 1f       	adc	r26, r22
    79a0:	b7 1f       	adc	r27, r23
    79a2:	80 93 b3 02 	sts	0x02B3, r24
    79a6:	90 93 b4 02 	sts	0x02B4, r25
    79aa:	a0 93 b5 02 	sts	0x02B5, r26
    79ae:	b0 93 b6 02 	sts	0x02B6, r27
				}

				accOffsetXSum += accX;
    79b2:	80 91 34 04 	lds	r24, 0x0434
    79b6:	90 91 35 04 	lds	r25, 0x0435
    79ba:	40 91 28 04 	lds	r20, 0x0428
    79be:	50 91 29 04 	lds	r21, 0x0429
    79c2:	84 0f       	add	r24, r20
    79c4:	95 1f       	adc	r25, r21
    79c6:	90 93 35 04 	sts	0x0435, r25
    79ca:	80 93 34 04 	sts	0x0434, r24
				accOffsetYSum += accY;
    79ce:	80 91 36 04 	lds	r24, 0x0436
    79d2:	90 91 37 04 	lds	r25, 0x0437
    79d6:	40 91 2a 04 	lds	r20, 0x042A
    79da:	50 91 2b 04 	lds	r21, 0x042B
    79de:	84 0f       	add	r24, r20
    79e0:	95 1f       	adc	r25, r21
    79e2:	90 93 37 04 	sts	0x0437, r25
    79e6:	80 93 36 04 	sts	0x0436, r24
				accOffsetZSum += accZ;
    79ea:	80 91 38 04 	lds	r24, 0x0438
    79ee:	90 91 39 04 	lds	r25, 0x0439
    79f2:	40 91 2c 04 	lds	r20, 0x042C
    79f6:	50 91 2d 04 	lds	r21, 0x042D
    79fa:	84 0f       	add	r24, r20
    79fc:	95 1f       	adc	r25, r21
    79fe:	90 93 39 04 	sts	0x0439, r25
    7a02:	80 93 38 04 	sts	0x0438, r24

				calibrationCycle++;
    7a06:	2f 5f       	subi	r18, 0xFF	; 255
    7a08:	3f 4f       	sbci	r19, 0xFF	; 255
    7a0a:	30 93 4a 04 	sts	0x044A, r19
    7a0e:	20 93 49 04 	sts	0x0449, r18
    7a12:	80 91 8b 05 	lds	r24, 0x058B
	updateBlueLed(pwm_blue);

	calibrationCycle = 0;
	startCalibration = 1;

	while(startCalibration) {
    7a16:	88 23       	and	r24, r24
    7a18:	09 f0       	breq	.+2      	; 0x7a1c <calibrateSensors+0x5d6>
    7a1a:	31 cd       	rjmp	.-1438   	; 0x747e <calibrateSensors+0x38>
    7a1c:	5b ce       	rjmp	.-842    	; 0x76d4 <calibrateSensors+0x28e>

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    7a1e:	10 92 87 02 	sts	0x0287, r1
    7a22:	10 92 88 02 	sts	0x0288, r1
    7a26:	10 92 89 02 	sts	0x0289, r1
    7a2a:	10 92 8a 02 	sts	0x028A, r1
						proximityOffset[i] = 0;
    7a2e:	10 92 70 02 	sts	0x0270, r1
    7a32:	10 92 6f 02 	sts	0x026F, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    7a36:	10 92 8b 02 	sts	0x028B, r1
    7a3a:	10 92 8c 02 	sts	0x028C, r1
    7a3e:	10 92 8d 02 	sts	0x028D, r1
    7a42:	10 92 8e 02 	sts	0x028E, r1
						proximityOffset[i] = 0;
    7a46:	10 92 72 02 	sts	0x0272, r1
    7a4a:	10 92 71 02 	sts	0x0271, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    7a4e:	10 92 8f 02 	sts	0x028F, r1
    7a52:	10 92 90 02 	sts	0x0290, r1
    7a56:	10 92 91 02 	sts	0x0291, r1
    7a5a:	10 92 92 02 	sts	0x0292, r1
						proximityOffset[i] = 0;
    7a5e:	10 92 74 02 	sts	0x0274, r1
    7a62:	10 92 73 02 	sts	0x0273, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    7a66:	10 92 93 02 	sts	0x0293, r1
    7a6a:	10 92 94 02 	sts	0x0294, r1
    7a6e:	10 92 95 02 	sts	0x0295, r1
    7a72:	10 92 96 02 	sts	0x0296, r1
						proximityOffset[i] = 0;
    7a76:	10 92 76 02 	sts	0x0276, r1
    7a7a:	10 92 75 02 	sts	0x0275, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    7a7e:	10 92 97 02 	sts	0x0297, r1
    7a82:	10 92 98 02 	sts	0x0298, r1
    7a86:	10 92 99 02 	sts	0x0299, r1
    7a8a:	10 92 9a 02 	sts	0x029A, r1
						proximityOffset[i] = 0;
    7a8e:	10 92 78 02 	sts	0x0278, r1
    7a92:	10 92 77 02 	sts	0x0277, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    7a96:	10 92 9b 02 	sts	0x029B, r1
    7a9a:	10 92 9c 02 	sts	0x029C, r1
    7a9e:	10 92 9d 02 	sts	0x029D, r1
    7aa2:	10 92 9e 02 	sts	0x029E, r1
						proximityOffset[i] = 0;
    7aa6:	10 92 7a 02 	sts	0x027A, r1
    7aaa:	10 92 79 02 	sts	0x0279, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    7aae:	10 92 9f 02 	sts	0x029F, r1
    7ab2:	10 92 a0 02 	sts	0x02A0, r1
    7ab6:	10 92 a1 02 	sts	0x02A1, r1
    7aba:	10 92 a2 02 	sts	0x02A2, r1
						proximityOffset[i] = 0;
    7abe:	10 92 7c 02 	sts	0x027C, r1
    7ac2:	10 92 7b 02 	sts	0x027B, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    7ac6:	10 92 a3 02 	sts	0x02A3, r1
    7aca:	10 92 a4 02 	sts	0x02A4, r1
    7ace:	10 92 a5 02 	sts	0x02A5, r1
    7ad2:	10 92 a6 02 	sts	0x02A6, r1
						proximityOffset[i] = 0;
    7ad6:	10 92 7e 02 	sts	0x027E, r1
    7ada:	10 92 7d 02 	sts	0x027D, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    7ade:	10 92 a7 02 	sts	0x02A7, r1
    7ae2:	10 92 a8 02 	sts	0x02A8, r1
    7ae6:	10 92 a9 02 	sts	0x02A9, r1
    7aea:	10 92 aa 02 	sts	0x02AA, r1
						proximityOffset[i] = 0;
    7aee:	10 92 80 02 	sts	0x0280, r1
    7af2:	10 92 7f 02 	sts	0x027F, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    7af6:	10 92 ab 02 	sts	0x02AB, r1
    7afa:	10 92 ac 02 	sts	0x02AC, r1
    7afe:	10 92 ad 02 	sts	0x02AD, r1
    7b02:	10 92 ae 02 	sts	0x02AE, r1
						proximityOffset[i] = 0;
    7b06:	10 92 82 02 	sts	0x0282, r1
    7b0a:	10 92 81 02 	sts	0x0281, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    7b0e:	10 92 af 02 	sts	0x02AF, r1
    7b12:	10 92 b0 02 	sts	0x02B0, r1
    7b16:	10 92 b1 02 	sts	0x02B1, r1
    7b1a:	10 92 b2 02 	sts	0x02B2, r1
						proximityOffset[i] = 0;
    7b1e:	10 92 84 02 	sts	0x0284, r1
    7b22:	10 92 83 02 	sts	0x0283, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    7b26:	10 92 b3 02 	sts	0x02B3, r1
    7b2a:	10 92 b4 02 	sts	0x02B4, r1
    7b2e:	10 92 b5 02 	sts	0x02B5, r1
    7b32:	10 92 b6 02 	sts	0x02B6, r1
						proximityOffset[i] = 0;
    7b36:	10 92 86 02 	sts	0x0286, r1
    7b3a:	10 92 85 02 	sts	0x0285, r1
					}
					accOffsetXSum = 0;
    7b3e:	10 92 35 04 	sts	0x0435, r1
    7b42:	10 92 34 04 	sts	0x0434, r1
					accOffsetYSum = 0;
    7b46:	10 92 37 04 	sts	0x0437, r1
    7b4a:	10 92 36 04 	sts	0x0436, r1
					accOffsetZSum = 0;
    7b4e:	10 92 39 04 	sts	0x0439, r1
    7b52:	10 92 38 04 	sts	0x0438, r1

					calibrationCycle++;
    7b56:	d0 93 4a 04 	sts	0x044A, r29
    7b5a:	c0 93 49 04 	sts	0x0449, r28
    7b5e:	80 91 8b 05 	lds	r24, 0x058B

					continue;					// the first time "proxUpdated" is set, all the proximity values saved in the array 
    7b62:	59 cf       	rjmp	.-334    	; 0x7a16 <calibrateSensors+0x5d0>

00007b64 <readAccelXYZ_1>:

void readAccelXYZ_1() {

	int i = 0;

	if(useAccel == USE_MMAX7455L) {
    7b64:	80 91 27 04 	lds	r24, 0x0427
    7b68:	88 23       	and	r24, r24
    7b6a:	79 f0       	breq	.+30     	; 0x7b8a <readAccelXYZ_1+0x26>
		for(i=0; i<2; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
		}
		return;

	} else if(useAccel == USE_ADXL345) {							
    7b6c:	81 30       	cpi	r24, 0x01	; 1
    7b6e:	11 f1       	breq	.+68     	; 0x7bb4 <readAccelXYZ_1+0x50>
		}
		return;

	} else {

		accX = 0;
    7b70:	10 92 29 04 	sts	0x0429, r1
    7b74:	10 92 28 04 	sts	0x0428, r1
		accY = 0;
    7b78:	10 92 2b 04 	sts	0x042B, r1
    7b7c:	10 92 2a 04 	sts	0x042A, r1
		accZ = 0;
    7b80:	10 92 2d 04 	sts	0x042D, r1
    7b84:	10 92 2c 04 	sts	0x042C, r1
    7b88:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    7b8a:	80 91 14 02 	lds	r24, 0x0214
    7b8e:	0e 94 8f 1b 	call	0x371e	; 0x371e <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    7b92:	80 e0       	ldi	r24, 0x00	; 0
    7b94:	0e 94 0a 1c 	call	0x3814	; 0x3814 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    7b98:	80 91 14 02 	lds	r24, 0x0214
    7b9c:	8f 5f       	subi	r24, 0xFF	; 255
    7b9e:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <i2c_rep_start>

		for(i=0; i<2; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    7ba2:	0e 94 1c 1c 	call	0x3838	; 0x3838 <i2c_readAck>
    7ba6:	80 93 3e 04 	sts	0x043E, r24
    7baa:	0e 94 1c 1c 	call	0x3838	; 0x3838 <i2c_readAck>
    7bae:	80 93 3f 04 	sts	0x043F, r24
    7bb2:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    7bb4:	80 91 14 02 	lds	r24, 0x0214
    7bb8:	0e 94 8f 1b 	call	0x371e	; 0x371e <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    7bbc:	82 e3       	ldi	r24, 0x32	; 50
    7bbe:	0e 94 0a 1c 	call	0x3814	; 0x3814 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    7bc2:	80 91 14 02 	lds	r24, 0x0214
    7bc6:	8f 5f       	subi	r24, 0xFF	; 255
    7bc8:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <i2c_rep_start>

		for(i=0; i<3; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    7bcc:	0e 94 1c 1c 	call	0x3838	; 0x3838 <i2c_readAck>
    7bd0:	80 93 3e 04 	sts	0x043E, r24
    7bd4:	0e 94 1c 1c 	call	0x3838	; 0x3838 <i2c_readAck>
    7bd8:	80 93 3f 04 	sts	0x043F, r24
    7bdc:	0e 94 1c 1c 	call	0x3838	; 0x3838 <i2c_readAck>
    7be0:	80 93 40 04 	sts	0x0440, r24
    7be4:	08 95       	ret

00007be6 <readAccelXYZ_2>:

void readAccelXYZ_2() {

	int i = 2;

	if(useAccel == USE_MMAX7455L) {
    7be6:	80 91 27 04 	lds	r24, 0x0427
    7bea:	88 23       	and	r24, r24
    7bec:	09 f0       	breq	.+2      	; 0x7bf0 <readAccelXYZ_2+0xa>
    7bee:	4e c0       	rjmp	.+156    	; 0x7c8c <readAccelXYZ_2+0xa6>

		for(i=2; i<5; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    7bf0:	0e 94 1c 1c 	call	0x3838	; 0x3838 <i2c_readAck>
    7bf4:	80 93 40 04 	sts	0x0440, r24
		}

	} else if(useAccel == USE_ADXL345) {							

		for(i=3; i<5; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    7bf8:	0e 94 1c 1c 	call	0x3838	; 0x3838 <i2c_readAck>
    7bfc:	80 93 41 04 	sts	0x0441, r24
    7c00:	0e 94 1c 1c 	call	0x3838	; 0x3838 <i2c_readAck>
    7c04:	80 93 42 04 	sts	0x0442, r24
		}
		accBuff[i] = i2c_readNak();									// read last byte sending NACK
    7c08:	0e 94 26 1c 	call	0x384c	; 0x384c <i2c_readNak>
    7c0c:	80 93 43 04 	sts	0x0443, r24
		i2c_stop();													// set stop conditon = release bus
    7c10:	0e 94 02 1c 	call	0x3804	; 0x3804 <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    7c14:	80 91 8b 05 	lds	r24, 0x058B
    7c18:	88 23       	and	r24, r24
    7c1a:	09 f4       	brne	.+2      	; 0x7c1e <readAccelXYZ_2+0x38>
    7c1c:	47 c0       	rjmp	.+142    	; 0x7cac <readAccelXYZ_2+0xc6>
			accX = ((signed int)accBuff[1]<<8)|accBuff[0];    			// X axis
    7c1e:	80 91 3f 04 	lds	r24, 0x043F
    7c22:	99 27       	eor	r25, r25
    7c24:	87 fd       	sbrc	r24, 7
    7c26:	90 95       	com	r25
    7c28:	98 2f       	mov	r25, r24
    7c2a:	88 27       	eor	r24, r24
    7c2c:	20 91 3e 04 	lds	r18, 0x043E
    7c30:	33 27       	eor	r19, r19
    7c32:	27 fd       	sbrc	r18, 7
    7c34:	30 95       	com	r19
    7c36:	82 2b       	or	r24, r18
    7c38:	93 2b       	or	r25, r19
    7c3a:	90 93 29 04 	sts	0x0429, r25
    7c3e:	80 93 28 04 	sts	0x0428, r24
			accY = ((signed int)accBuff[3]<<8)|accBuff[2];    			// Y axis
    7c42:	80 91 41 04 	lds	r24, 0x0441
    7c46:	99 27       	eor	r25, r25
    7c48:	87 fd       	sbrc	r24, 7
    7c4a:	90 95       	com	r25
    7c4c:	98 2f       	mov	r25, r24
    7c4e:	88 27       	eor	r24, r24
    7c50:	20 91 40 04 	lds	r18, 0x0440
    7c54:	33 27       	eor	r19, r19
    7c56:	27 fd       	sbrc	r18, 7
    7c58:	30 95       	com	r19
    7c5a:	82 2b       	or	r24, r18
    7c5c:	93 2b       	or	r25, r19
    7c5e:	90 93 2b 04 	sts	0x042B, r25
    7c62:	80 93 2a 04 	sts	0x042A, r24
			accZ = ((signed int)accBuff[5]<<8)|accBuff[4];    			// Z axis
    7c66:	80 91 43 04 	lds	r24, 0x0443
    7c6a:	99 27       	eor	r25, r25
    7c6c:	87 fd       	sbrc	r24, 7
    7c6e:	90 95       	com	r25
    7c70:	98 2f       	mov	r25, r24
    7c72:	88 27       	eor	r24, r24
    7c74:	20 91 42 04 	lds	r18, 0x0442
    7c78:	33 27       	eor	r19, r19
    7c7a:	27 fd       	sbrc	r18, 7
    7c7c:	30 95       	com	r19
    7c7e:	82 2b       	or	r24, r18
    7c80:	93 2b       	or	r25, r19
    7c82:	90 93 2d 04 	sts	0x042D, r25
    7c86:	80 93 2c 04 	sts	0x042C, r24
    7c8a:	08 95       	ret
			accX = (((signed int)accBuff[1]<<8)|accBuff[0])-accOffsetX;	// X axis
			accY = (((signed int)accBuff[3]<<8)|accBuff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    7c8c:	81 30       	cpi	r24, 0x01	; 1
    7c8e:	09 f4       	brne	.+2      	; 0x7c92 <readAccelXYZ_2+0xac>
    7c90:	b3 cf       	rjmp	.-154    	; 0x7bf8 <readAccelXYZ_2+0x12>
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
		}

	} else {

		accX = 0;
    7c92:	10 92 29 04 	sts	0x0429, r1
    7c96:	10 92 28 04 	sts	0x0428, r1
		accY = 0;
    7c9a:	10 92 2b 04 	sts	0x042B, r1
    7c9e:	10 92 2a 04 	sts	0x042A, r1
		accZ = 0;
    7ca2:	10 92 2d 04 	sts	0x042D, r1
    7ca6:	10 92 2c 04 	sts	0x042C, r1
    7caa:	08 95       	ret
		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)accBuff[1]<<8)|accBuff[0];    			// X axis
			accY = ((signed int)accBuff[3]<<8)|accBuff[2];    			// Y axis
			accZ = ((signed int)accBuff[5]<<8)|accBuff[4];    			// Z axis
		} else {													// else return the calibrated values
			accX = (((signed int)accBuff[1]<<8)|accBuff[0])-accOffsetX;	// X axis
    7cac:	80 91 3f 04 	lds	r24, 0x043F
    7cb0:	99 27       	eor	r25, r25
    7cb2:	87 fd       	sbrc	r24, 7
    7cb4:	90 95       	com	r25
    7cb6:	98 2f       	mov	r25, r24
    7cb8:	88 27       	eor	r24, r24
    7cba:	20 91 3e 04 	lds	r18, 0x043E
    7cbe:	33 27       	eor	r19, r19
    7cc0:	27 fd       	sbrc	r18, 7
    7cc2:	30 95       	com	r19
    7cc4:	82 2b       	or	r24, r18
    7cc6:	93 2b       	or	r25, r19
    7cc8:	20 91 2e 04 	lds	r18, 0x042E
    7ccc:	30 91 2f 04 	lds	r19, 0x042F
    7cd0:	82 1b       	sub	r24, r18
    7cd2:	93 0b       	sbc	r25, r19
    7cd4:	90 93 29 04 	sts	0x0429, r25
    7cd8:	80 93 28 04 	sts	0x0428, r24
			accY = (((signed int)accBuff[3]<<8)|accBuff[2])-accOffsetY;	// Y axis
    7cdc:	80 91 41 04 	lds	r24, 0x0441
    7ce0:	99 27       	eor	r25, r25
    7ce2:	87 fd       	sbrc	r24, 7
    7ce4:	90 95       	com	r25
    7ce6:	98 2f       	mov	r25, r24
    7ce8:	88 27       	eor	r24, r24
    7cea:	20 91 40 04 	lds	r18, 0x0440
    7cee:	33 27       	eor	r19, r19
    7cf0:	27 fd       	sbrc	r18, 7
    7cf2:	30 95       	com	r19
    7cf4:	82 2b       	or	r24, r18
    7cf6:	93 2b       	or	r25, r19
    7cf8:	20 91 30 04 	lds	r18, 0x0430
    7cfc:	30 91 31 04 	lds	r19, 0x0431
    7d00:	82 1b       	sub	r24, r18
    7d02:	93 0b       	sbc	r25, r19
    7d04:	90 93 2b 04 	sts	0x042B, r25
    7d08:	80 93 2a 04 	sts	0x042A, r24
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
    7d0c:	80 91 43 04 	lds	r24, 0x0443
    7d10:	99 27       	eor	r25, r25
    7d12:	87 fd       	sbrc	r24, 7
    7d14:	90 95       	com	r25
    7d16:	98 2f       	mov	r25, r24
    7d18:	88 27       	eor	r24, r24
    7d1a:	20 91 42 04 	lds	r18, 0x0442
    7d1e:	33 27       	eor	r19, r19
    7d20:	27 fd       	sbrc	r18, 7
    7d22:	30 95       	com	r19
    7d24:	82 2b       	or	r24, r18
    7d26:	93 2b       	or	r25, r19
    7d28:	20 91 32 04 	lds	r18, 0x0432
    7d2c:	30 91 33 04 	lds	r19, 0x0433
    7d30:	82 1b       	sub	r24, r18
    7d32:	93 0b       	sbc	r25, r19
    7d34:	90 93 2d 04 	sts	0x042D, r25
    7d38:	80 93 2c 04 	sts	0x042C, r24
    7d3c:	08 95       	ret

00007d3e <computeAngle>:

	}

}

void computeAngle() {
    7d3e:	ef 92       	push	r14
    7d40:	ff 92       	push	r15
    7d42:	0f 93       	push	r16
    7d44:	1f 93       	push	r17

	unsigned int abs_acc_z=abs(accZ);
    7d46:	80 91 2c 04 	lds	r24, 0x042C
    7d4a:	90 91 2d 04 	lds	r25, 0x042D
    7d4e:	97 fd       	sbrc	r25, 7
    7d50:	6c c0       	rjmp	.+216    	; 0x7e2a <computeAngle+0xec>

	// check the robot motion plane (horizontal or vertical) based on the Z axes;
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
    7d52:	85 31       	cpi	r24, 0x15	; 21
    7d54:	91 05       	cpc	r25, r1
    7d56:	08 f0       	brcs	.+2      	; 0x7d5a <computeAngle+0x1c>
    7d58:	54 c0       	rjmp	.+168    	; 0x7e02 <computeAngle+0xc4>
		currPosition = HORIZONTAL_POS;
    7d5a:	81 e0       	ldi	r24, 0x01	; 1
    7d5c:	80 93 15 02 	sts	0x0215, r24
    7d60:	21 e0       	ldi	r18, 0x01	; 1
	} else {
		currPosition = VERTICAL_POS;	
	}
	if(currPosition != robotPosition) {			
    7d62:	80 91 16 02 	lds	r24, 0x0216
    7d66:	82 17       	cp	r24, r18
    7d68:	09 f4       	brne	.+2      	; 0x7d6c <computeAngle+0x2e>
    7d6a:	53 c0       	rjmp	.+166    	; 0x7e12 <computeAngle+0xd4>
		timesInSamePos++;
    7d6c:	80 91 3c 04 	lds	r24, 0x043C
    7d70:	90 91 3d 04 	lds	r25, 0x043D
    7d74:	01 96       	adiw	r24, 0x01	; 1
    7d76:	90 93 3d 04 	sts	0x043D, r25
    7d7a:	80 93 3c 04 	sts	0x043C, r24
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
    7d7e:	88 3c       	cpi	r24, 0xC8	; 200
    7d80:	91 05       	cpc	r25, r1
    7d82:	08 f0       	brcs	.+2      	; 0x7d86 <computeAngle+0x48>
    7d84:	4b c0       	rjmp	.+150    	; 0x7e1c <computeAngle+0xde>
	} else {
		timesInSamePos = 0;
	}

	// compute the angle using the X and Y axis
	thetaAcc = atan2((float)accX, (float)accY);
    7d86:	60 91 28 04 	lds	r22, 0x0428
    7d8a:	70 91 29 04 	lds	r23, 0x0429
    7d8e:	88 27       	eor	r24, r24
    7d90:	77 fd       	sbrc	r23, 7
    7d92:	80 95       	com	r24
    7d94:	98 2f       	mov	r25, r24
    7d96:	0e 94 9a 40 	call	0x8134	; 0x8134 <__floatsisf>
    7d9a:	7b 01       	movw	r14, r22
    7d9c:	8c 01       	movw	r16, r24
    7d9e:	60 91 2a 04 	lds	r22, 0x042A
    7da2:	70 91 2b 04 	lds	r23, 0x042B
    7da6:	88 27       	eor	r24, r24
    7da8:	77 fd       	sbrc	r23, 7
    7daa:	80 95       	com	r24
    7dac:	98 2f       	mov	r25, r24
    7dae:	0e 94 9a 40 	call	0x8134	; 0x8134 <__floatsisf>
    7db2:	9b 01       	movw	r18, r22
    7db4:	ac 01       	movw	r20, r24
    7db6:	c8 01       	movw	r24, r16
    7db8:	b7 01       	movw	r22, r14
    7dba:	0e 94 a5 3f 	call	0x7f4a	; 0x7f4a <atan2>
    7dbe:	60 93 a0 04 	sts	0x04A0, r22
    7dc2:	70 93 a1 04 	sts	0x04A1, r23
    7dc6:	80 93 a2 04 	sts	0x04A2, r24
    7dca:	90 93 a3 04 	sts	0x04A3, r25
	currentAngle = (signed int)(thetaAcc*RAD_2_DEG);
    7dce:	21 ee       	ldi	r18, 0xE1	; 225
    7dd0:	3e e2       	ldi	r19, 0x2E	; 46
    7dd2:	45 e6       	ldi	r20, 0x65	; 101
    7dd4:	52 e4       	ldi	r21, 0x42	; 66
    7dd6:	0e 94 af 41 	call	0x835e	; 0x835e <__mulsf3>
    7dda:	0e 94 67 40 	call	0x80ce	; 0x80ce <__fixsfsi>
    7dde:	9b 01       	movw	r18, r22
    7de0:	70 93 3b 04 	sts	0x043B, r23
    7de4:	60 93 3a 04 	sts	0x043A, r22

	if(currentAngle < 0) {
    7de8:	77 ff       	sbrs	r23, 7
    7dea:	06 c0       	rjmp	.+12     	; 0x7df8 <computeAngle+0xba>
		currentAngle = currentAngle + (signed int)360;	// angles from 0 to 360
    7dec:	28 59       	subi	r18, 0x98	; 152
    7dee:	3e 4f       	sbci	r19, 0xFE	; 254
    7df0:	30 93 3b 04 	sts	0x043B, r19
    7df4:	20 93 3a 04 	sts	0x043A, r18
	}

}
    7df8:	1f 91       	pop	r17
    7dfa:	0f 91       	pop	r16
    7dfc:	ff 90       	pop	r15
    7dfe:	ef 90       	pop	r14
    7e00:	08 95       	ret
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
		currPosition = HORIZONTAL_POS;
	} else {
		currPosition = VERTICAL_POS;	
    7e02:	10 92 15 02 	sts	0x0215, r1
    7e06:	20 e0       	ldi	r18, 0x00	; 0
	}
	if(currPosition != robotPosition) {			
    7e08:	80 91 16 02 	lds	r24, 0x0216
    7e0c:	82 17       	cp	r24, r18
    7e0e:	09 f0       	breq	.+2      	; 0x7e12 <computeAngle+0xd4>
    7e10:	ad cf       	rjmp	.-166    	; 0x7d6c <computeAngle+0x2e>
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
			robotPosition = currPosition;
		}
	} else {
		timesInSamePos = 0;
    7e12:	10 92 3d 04 	sts	0x043D, r1
    7e16:	10 92 3c 04 	sts	0x043C, r1
    7e1a:	b5 cf       	rjmp	.-150    	; 0x7d86 <computeAngle+0x48>
		currPosition = VERTICAL_POS;	
	}
	if(currPosition != robotPosition) {			
		timesInSamePos++;
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
    7e1c:	10 92 3d 04 	sts	0x043D, r1
    7e20:	10 92 3c 04 	sts	0x043C, r1
			robotPosition = currPosition;
    7e24:	20 93 16 02 	sts	0x0216, r18
    7e28:	ae cf       	rjmp	.-164    	; 0x7d86 <computeAngle+0x48>

}

void computeAngle() {

	unsigned int abs_acc_z=abs(accZ);
    7e2a:	90 95       	com	r25
    7e2c:	81 95       	neg	r24
    7e2e:	9f 4f       	sbci	r25, 0xFF	; 255
    7e30:	90 cf       	rjmp	.-224    	; 0x7d52 <computeAngle+0x14>

00007e32 <writeCalibrationToFlash>:


#include "eepromIO.h"

void writeCalibrationToFlash() {	
	eeprom_update_block(calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
    7e32:	8d ed       	ldi	r24, 0xDD	; 221
    7e34:	94 e0       	ldi	r25, 0x04	; 4
    7e36:	6c e6       	ldi	r22, 0x6C	; 108
    7e38:	7f e0       	ldi	r23, 0x0F	; 15
    7e3a:	40 e9       	ldi	r20, 0x90	; 144
    7e3c:	50 e0       	ldi	r21, 0x00	; 0
    7e3e:	0e 94 39 43 	call	0x8672	; 0x8672 <__eeupd_block_m2560>
	eeprom_update_word ((uint16_t*) CALIB_CHECK_ADDRESS, 0xAA55);   // to let know the calibration data are valid
    7e42:	8a e6       	ldi	r24, 0x6A	; 106
    7e44:	9f e0       	ldi	r25, 0x0F	; 15
    7e46:	65 e5       	ldi	r22, 0x55	; 85
    7e48:	7a ea       	ldi	r23, 0xAA	; 170
    7e4a:	0e 94 5b 43 	call	0x86b6	; 0x86b6 <__eeupd_word_m2560>
}
    7e4e:	08 95       	ret

00007e50 <readCalibrationFromFlash>:

void readCalibrationFromFlash() {
	eeprom_read_block (calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
    7e50:	8d ed       	ldi	r24, 0xDD	; 221
    7e52:	94 e0       	ldi	r25, 0x04	; 4
    7e54:	6c e6       	ldi	r22, 0x6C	; 108
    7e56:	7f e0       	ldi	r23, 0x0F	; 15
    7e58:	40 e9       	ldi	r20, 0x90	; 144
    7e5a:	50 e0       	ldi	r21, 0x00	; 0
    7e5c:	0e 94 1b 43 	call	0x8636	; 0x8636 <__eerd_block_m2560>
}
    7e60:	08 95       	ret

00007e62 <__subsf3>:
    7e62:	50 58       	subi	r21, 0x80	; 128

00007e64 <__addsf3>:
    7e64:	bb 27       	eor	r27, r27
    7e66:	aa 27       	eor	r26, r26
    7e68:	0e d0       	rcall	.+28     	; 0x7e86 <__addsf3x>
    7e6a:	27 c2       	rjmp	.+1102   	; 0x82ba <__fp_round>
    7e6c:	f0 d1       	rcall	.+992    	; 0x824e <__fp_pscA>
    7e6e:	30 f0       	brcs	.+12     	; 0x7e7c <__addsf3+0x18>
    7e70:	f5 d1       	rcall	.+1002   	; 0x825c <__fp_pscB>
    7e72:	20 f0       	brcs	.+8      	; 0x7e7c <__addsf3+0x18>
    7e74:	31 f4       	brne	.+12     	; 0x7e82 <__addsf3+0x1e>
    7e76:	9f 3f       	cpi	r25, 0xFF	; 255
    7e78:	11 f4       	brne	.+4      	; 0x7e7e <__addsf3+0x1a>
    7e7a:	1e f4       	brtc	.+6      	; 0x7e82 <__addsf3+0x1e>
    7e7c:	c0 c1       	rjmp	.+896    	; 0x81fe <__fp_nan>
    7e7e:	0e f4       	brtc	.+2      	; 0x7e82 <__addsf3+0x1e>
    7e80:	e0 95       	com	r30
    7e82:	e7 fb       	bst	r30, 7
    7e84:	b6 c1       	rjmp	.+876    	; 0x81f2 <__fp_inf>

00007e86 <__addsf3x>:
    7e86:	e9 2f       	mov	r30, r25
    7e88:	3a d2       	rcall	.+1140   	; 0x82fe <__fp_split3>
    7e8a:	80 f3       	brcs	.-32     	; 0x7e6c <__addsf3+0x8>
    7e8c:	ba 17       	cp	r27, r26
    7e8e:	62 07       	cpc	r22, r18
    7e90:	73 07       	cpc	r23, r19
    7e92:	84 07       	cpc	r24, r20
    7e94:	95 07       	cpc	r25, r21
    7e96:	18 f0       	brcs	.+6      	; 0x7e9e <__addsf3x+0x18>
    7e98:	71 f4       	brne	.+28     	; 0x7eb6 <__addsf3x+0x30>
    7e9a:	9e f5       	brtc	.+102    	; 0x7f02 <__addsf3x+0x7c>
    7e9c:	52 c2       	rjmp	.+1188   	; 0x8342 <__fp_zero>
    7e9e:	0e f4       	brtc	.+2      	; 0x7ea2 <__addsf3x+0x1c>
    7ea0:	e0 95       	com	r30
    7ea2:	0b 2e       	mov	r0, r27
    7ea4:	ba 2f       	mov	r27, r26
    7ea6:	a0 2d       	mov	r26, r0
    7ea8:	0b 01       	movw	r0, r22
    7eaa:	b9 01       	movw	r22, r18
    7eac:	90 01       	movw	r18, r0
    7eae:	0c 01       	movw	r0, r24
    7eb0:	ca 01       	movw	r24, r20
    7eb2:	a0 01       	movw	r20, r0
    7eb4:	11 24       	eor	r1, r1
    7eb6:	ff 27       	eor	r31, r31
    7eb8:	59 1b       	sub	r21, r25
    7eba:	99 f0       	breq	.+38     	; 0x7ee2 <__addsf3x+0x5c>
    7ebc:	59 3f       	cpi	r21, 0xF9	; 249
    7ebe:	50 f4       	brcc	.+20     	; 0x7ed4 <__addsf3x+0x4e>
    7ec0:	50 3e       	cpi	r21, 0xE0	; 224
    7ec2:	68 f1       	brcs	.+90     	; 0x7f1e <__addsf3x+0x98>
    7ec4:	1a 16       	cp	r1, r26
    7ec6:	f0 40       	sbci	r31, 0x00	; 0
    7ec8:	a2 2f       	mov	r26, r18
    7eca:	23 2f       	mov	r18, r19
    7ecc:	34 2f       	mov	r19, r20
    7ece:	44 27       	eor	r20, r20
    7ed0:	58 5f       	subi	r21, 0xF8	; 248
    7ed2:	f3 cf       	rjmp	.-26     	; 0x7eba <__addsf3x+0x34>
    7ed4:	46 95       	lsr	r20
    7ed6:	37 95       	ror	r19
    7ed8:	27 95       	ror	r18
    7eda:	a7 95       	ror	r26
    7edc:	f0 40       	sbci	r31, 0x00	; 0
    7ede:	53 95       	inc	r21
    7ee0:	c9 f7       	brne	.-14     	; 0x7ed4 <__addsf3x+0x4e>
    7ee2:	7e f4       	brtc	.+30     	; 0x7f02 <__addsf3x+0x7c>
    7ee4:	1f 16       	cp	r1, r31
    7ee6:	ba 0b       	sbc	r27, r26
    7ee8:	62 0b       	sbc	r22, r18
    7eea:	73 0b       	sbc	r23, r19
    7eec:	84 0b       	sbc	r24, r20
    7eee:	ba f0       	brmi	.+46     	; 0x7f1e <__addsf3x+0x98>
    7ef0:	91 50       	subi	r25, 0x01	; 1
    7ef2:	a1 f0       	breq	.+40     	; 0x7f1c <__addsf3x+0x96>
    7ef4:	ff 0f       	add	r31, r31
    7ef6:	bb 1f       	adc	r27, r27
    7ef8:	66 1f       	adc	r22, r22
    7efa:	77 1f       	adc	r23, r23
    7efc:	88 1f       	adc	r24, r24
    7efe:	c2 f7       	brpl	.-16     	; 0x7ef0 <__addsf3x+0x6a>
    7f00:	0e c0       	rjmp	.+28     	; 0x7f1e <__addsf3x+0x98>
    7f02:	ba 0f       	add	r27, r26
    7f04:	62 1f       	adc	r22, r18
    7f06:	73 1f       	adc	r23, r19
    7f08:	84 1f       	adc	r24, r20
    7f0a:	48 f4       	brcc	.+18     	; 0x7f1e <__addsf3x+0x98>
    7f0c:	87 95       	ror	r24
    7f0e:	77 95       	ror	r23
    7f10:	67 95       	ror	r22
    7f12:	b7 95       	ror	r27
    7f14:	f7 95       	ror	r31
    7f16:	9e 3f       	cpi	r25, 0xFE	; 254
    7f18:	08 f0       	brcs	.+2      	; 0x7f1c <__addsf3x+0x96>
    7f1a:	b3 cf       	rjmp	.-154    	; 0x7e82 <__addsf3+0x1e>
    7f1c:	93 95       	inc	r25
    7f1e:	88 0f       	add	r24, r24
    7f20:	08 f0       	brcs	.+2      	; 0x7f24 <__addsf3x+0x9e>
    7f22:	99 27       	eor	r25, r25
    7f24:	ee 0f       	add	r30, r30
    7f26:	97 95       	ror	r25
    7f28:	87 95       	ror	r24
    7f2a:	08 95       	ret
    7f2c:	90 d1       	rcall	.+800    	; 0x824e <__fp_pscA>
    7f2e:	58 f0       	brcs	.+22     	; 0x7f46 <__addsf3x+0xc0>
    7f30:	80 e8       	ldi	r24, 0x80	; 128
    7f32:	91 e0       	ldi	r25, 0x01	; 1
    7f34:	09 f4       	brne	.+2      	; 0x7f38 <__addsf3x+0xb2>
    7f36:	9e ef       	ldi	r25, 0xFE	; 254
    7f38:	91 d1       	rcall	.+802    	; 0x825c <__fp_pscB>
    7f3a:	28 f0       	brcs	.+10     	; 0x7f46 <__addsf3x+0xc0>
    7f3c:	40 e8       	ldi	r20, 0x80	; 128
    7f3e:	51 e0       	ldi	r21, 0x01	; 1
    7f40:	59 f4       	brne	.+22     	; 0x7f58 <atan2+0xe>
    7f42:	5e ef       	ldi	r21, 0xFE	; 254
    7f44:	09 c0       	rjmp	.+18     	; 0x7f58 <atan2+0xe>
    7f46:	5b c1       	rjmp	.+694    	; 0x81fe <__fp_nan>
    7f48:	fc c1       	rjmp	.+1016   	; 0x8342 <__fp_zero>

00007f4a <atan2>:
    7f4a:	e9 2f       	mov	r30, r25
    7f4c:	e0 78       	andi	r30, 0x80	; 128
    7f4e:	d7 d1       	rcall	.+942    	; 0x82fe <__fp_split3>
    7f50:	68 f3       	brcs	.-38     	; 0x7f2c <__addsf3x+0xa6>
    7f52:	09 2e       	mov	r0, r25
    7f54:	05 2a       	or	r0, r21
    7f56:	c1 f3       	breq	.-16     	; 0x7f48 <__addsf3x+0xc2>
    7f58:	26 17       	cp	r18, r22
    7f5a:	37 07       	cpc	r19, r23
    7f5c:	48 07       	cpc	r20, r24
    7f5e:	59 07       	cpc	r21, r25
    7f60:	38 f0       	brcs	.+14     	; 0x7f70 <atan2+0x26>
    7f62:	0e 2e       	mov	r0, r30
    7f64:	07 f8       	bld	r0, 7
    7f66:	e0 25       	eor	r30, r0
    7f68:	69 f0       	breq	.+26     	; 0x7f84 <atan2+0x3a>
    7f6a:	e0 25       	eor	r30, r0
    7f6c:	e0 64       	ori	r30, 0x40	; 64
    7f6e:	0a c0       	rjmp	.+20     	; 0x7f84 <atan2+0x3a>
    7f70:	ef 63       	ori	r30, 0x3F	; 63
    7f72:	07 f8       	bld	r0, 7
    7f74:	00 94       	com	r0
    7f76:	07 fa       	bst	r0, 7
    7f78:	db 01       	movw	r26, r22
    7f7a:	b9 01       	movw	r22, r18
    7f7c:	9d 01       	movw	r18, r26
    7f7e:	dc 01       	movw	r26, r24
    7f80:	ca 01       	movw	r24, r20
    7f82:	ad 01       	movw	r20, r26
    7f84:	ef 93       	push	r30
    7f86:	4a d0       	rcall	.+148    	; 0x801c <__divsf3_pse>
    7f88:	98 d1       	rcall	.+816    	; 0x82ba <__fp_round>
    7f8a:	0a d0       	rcall	.+20     	; 0x7fa0 <atan>
    7f8c:	5f 91       	pop	r21
    7f8e:	55 23       	and	r21, r21
    7f90:	31 f0       	breq	.+12     	; 0x7f9e <atan2+0x54>
    7f92:	2b ed       	ldi	r18, 0xDB	; 219
    7f94:	3f e0       	ldi	r19, 0x0F	; 15
    7f96:	49 e4       	ldi	r20, 0x49	; 73
    7f98:	50 fd       	sbrc	r21, 0
    7f9a:	49 ec       	ldi	r20, 0xC9	; 201
    7f9c:	63 cf       	rjmp	.-314    	; 0x7e64 <__addsf3>
    7f9e:	08 95       	ret

00007fa0 <atan>:
    7fa0:	df 93       	push	r29
    7fa2:	dd 27       	eor	r29, r29
    7fa4:	b9 2f       	mov	r27, r25
    7fa6:	bf 77       	andi	r27, 0x7F	; 127
    7fa8:	40 e8       	ldi	r20, 0x80	; 128
    7faa:	5f e3       	ldi	r21, 0x3F	; 63
    7fac:	16 16       	cp	r1, r22
    7fae:	17 06       	cpc	r1, r23
    7fb0:	48 07       	cpc	r20, r24
    7fb2:	5b 07       	cpc	r21, r27
    7fb4:	10 f4       	brcc	.+4      	; 0x7fba <atan+0x1a>
    7fb6:	d9 2f       	mov	r29, r25
    7fb8:	cb d1       	rcall	.+918    	; 0x8350 <inverse>
    7fba:	9f 93       	push	r25
    7fbc:	8f 93       	push	r24
    7fbe:	7f 93       	push	r23
    7fc0:	6f 93       	push	r22
    7fc2:	36 d2       	rcall	.+1132   	; 0x8430 <square>
    7fc4:	ee e4       	ldi	r30, 0x4E	; 78
    7fc6:	f1 e0       	ldi	r31, 0x01	; 1
    7fc8:	1d d1       	rcall	.+570    	; 0x8204 <__fp_powser>
    7fca:	77 d1       	rcall	.+750    	; 0x82ba <__fp_round>
    7fcc:	2f 91       	pop	r18
    7fce:	3f 91       	pop	r19
    7fd0:	4f 91       	pop	r20
    7fd2:	5f 91       	pop	r21
    7fd4:	d0 d1       	rcall	.+928    	; 0x8376 <__mulsf3x>
    7fd6:	dd 23       	and	r29, r29
    7fd8:	49 f0       	breq	.+18     	; 0x7fec <atan+0x4c>
    7fda:	90 58       	subi	r25, 0x80	; 128
    7fdc:	a2 ea       	ldi	r26, 0xA2	; 162
    7fde:	2a ed       	ldi	r18, 0xDA	; 218
    7fe0:	3f e0       	ldi	r19, 0x0F	; 15
    7fe2:	49 ec       	ldi	r20, 0xC9	; 201
    7fe4:	5f e3       	ldi	r21, 0x3F	; 63
    7fe6:	d0 78       	andi	r29, 0x80	; 128
    7fe8:	5d 27       	eor	r21, r29
    7fea:	4d df       	rcall	.-358    	; 0x7e86 <__addsf3x>
    7fec:	df 91       	pop	r29
    7fee:	65 c1       	rjmp	.+714    	; 0x82ba <__fp_round>

00007ff0 <__cmpsf2>:
    7ff0:	dc d0       	rcall	.+440    	; 0x81aa <__fp_cmp>
    7ff2:	08 f4       	brcc	.+2      	; 0x7ff6 <__cmpsf2+0x6>
    7ff4:	81 e0       	ldi	r24, 0x01	; 1
    7ff6:	08 95       	ret

00007ff8 <cos>:
    7ff8:	39 d1       	rcall	.+626    	; 0x826c <__fp_rempio2>
    7ffa:	e3 95       	inc	r30
    7ffc:	6f c1       	rjmp	.+734    	; 0x82dc <__fp_sinus>

00007ffe <__divsf3>:
    7ffe:	0c d0       	rcall	.+24     	; 0x8018 <__divsf3x>
    8000:	5c c1       	rjmp	.+696    	; 0x82ba <__fp_round>
    8002:	2c d1       	rcall	.+600    	; 0x825c <__fp_pscB>
    8004:	40 f0       	brcs	.+16     	; 0x8016 <__divsf3+0x18>
    8006:	23 d1       	rcall	.+582    	; 0x824e <__fp_pscA>
    8008:	30 f0       	brcs	.+12     	; 0x8016 <__divsf3+0x18>
    800a:	21 f4       	brne	.+8      	; 0x8014 <__divsf3+0x16>
    800c:	5f 3f       	cpi	r21, 0xFF	; 255
    800e:	19 f0       	breq	.+6      	; 0x8016 <__divsf3+0x18>
    8010:	f0 c0       	rjmp	.+480    	; 0x81f2 <__fp_inf>
    8012:	51 11       	cpse	r21, r1
    8014:	97 c1       	rjmp	.+814    	; 0x8344 <__fp_szero>
    8016:	f3 c0       	rjmp	.+486    	; 0x81fe <__fp_nan>

00008018 <__divsf3x>:
    8018:	72 d1       	rcall	.+740    	; 0x82fe <__fp_split3>
    801a:	98 f3       	brcs	.-26     	; 0x8002 <__divsf3+0x4>

0000801c <__divsf3_pse>:
    801c:	99 23       	and	r25, r25
    801e:	c9 f3       	breq	.-14     	; 0x8012 <__divsf3+0x14>
    8020:	55 23       	and	r21, r21
    8022:	b1 f3       	breq	.-20     	; 0x8010 <__divsf3+0x12>
    8024:	95 1b       	sub	r25, r21
    8026:	55 0b       	sbc	r21, r21
    8028:	bb 27       	eor	r27, r27
    802a:	aa 27       	eor	r26, r26
    802c:	62 17       	cp	r22, r18
    802e:	73 07       	cpc	r23, r19
    8030:	84 07       	cpc	r24, r20
    8032:	38 f0       	brcs	.+14     	; 0x8042 <__divsf3_pse+0x26>
    8034:	9f 5f       	subi	r25, 0xFF	; 255
    8036:	5f 4f       	sbci	r21, 0xFF	; 255
    8038:	22 0f       	add	r18, r18
    803a:	33 1f       	adc	r19, r19
    803c:	44 1f       	adc	r20, r20
    803e:	aa 1f       	adc	r26, r26
    8040:	a9 f3       	breq	.-22     	; 0x802c <__divsf3_pse+0x10>
    8042:	33 d0       	rcall	.+102    	; 0x80aa <__divsf3_pse+0x8e>
    8044:	0e 2e       	mov	r0, r30
    8046:	3a f0       	brmi	.+14     	; 0x8056 <__divsf3_pse+0x3a>
    8048:	e0 e8       	ldi	r30, 0x80	; 128
    804a:	30 d0       	rcall	.+96     	; 0x80ac <__divsf3_pse+0x90>
    804c:	91 50       	subi	r25, 0x01	; 1
    804e:	50 40       	sbci	r21, 0x00	; 0
    8050:	e6 95       	lsr	r30
    8052:	00 1c       	adc	r0, r0
    8054:	ca f7       	brpl	.-14     	; 0x8048 <__divsf3_pse+0x2c>
    8056:	29 d0       	rcall	.+82     	; 0x80aa <__divsf3_pse+0x8e>
    8058:	fe 2f       	mov	r31, r30
    805a:	27 d0       	rcall	.+78     	; 0x80aa <__divsf3_pse+0x8e>
    805c:	66 0f       	add	r22, r22
    805e:	77 1f       	adc	r23, r23
    8060:	88 1f       	adc	r24, r24
    8062:	bb 1f       	adc	r27, r27
    8064:	26 17       	cp	r18, r22
    8066:	37 07       	cpc	r19, r23
    8068:	48 07       	cpc	r20, r24
    806a:	ab 07       	cpc	r26, r27
    806c:	b0 e8       	ldi	r27, 0x80	; 128
    806e:	09 f0       	breq	.+2      	; 0x8072 <__divsf3_pse+0x56>
    8070:	bb 0b       	sbc	r27, r27
    8072:	80 2d       	mov	r24, r0
    8074:	bf 01       	movw	r22, r30
    8076:	ff 27       	eor	r31, r31
    8078:	93 58       	subi	r25, 0x83	; 131
    807a:	5f 4f       	sbci	r21, 0xFF	; 255
    807c:	2a f0       	brmi	.+10     	; 0x8088 <__divsf3_pse+0x6c>
    807e:	9e 3f       	cpi	r25, 0xFE	; 254
    8080:	51 05       	cpc	r21, r1
    8082:	68 f0       	brcs	.+26     	; 0x809e <__divsf3_pse+0x82>
    8084:	b6 c0       	rjmp	.+364    	; 0x81f2 <__fp_inf>
    8086:	5e c1       	rjmp	.+700    	; 0x8344 <__fp_szero>
    8088:	5f 3f       	cpi	r21, 0xFF	; 255
    808a:	ec f3       	brlt	.-6      	; 0x8086 <__divsf3_pse+0x6a>
    808c:	98 3e       	cpi	r25, 0xE8	; 232
    808e:	dc f3       	brlt	.-10     	; 0x8086 <__divsf3_pse+0x6a>
    8090:	86 95       	lsr	r24
    8092:	77 95       	ror	r23
    8094:	67 95       	ror	r22
    8096:	b7 95       	ror	r27
    8098:	f7 95       	ror	r31
    809a:	9f 5f       	subi	r25, 0xFF	; 255
    809c:	c9 f7       	brne	.-14     	; 0x8090 <__divsf3_pse+0x74>
    809e:	88 0f       	add	r24, r24
    80a0:	91 1d       	adc	r25, r1
    80a2:	96 95       	lsr	r25
    80a4:	87 95       	ror	r24
    80a6:	97 f9       	bld	r25, 7
    80a8:	08 95       	ret
    80aa:	e1 e0       	ldi	r30, 0x01	; 1
    80ac:	66 0f       	add	r22, r22
    80ae:	77 1f       	adc	r23, r23
    80b0:	88 1f       	adc	r24, r24
    80b2:	bb 1f       	adc	r27, r27
    80b4:	62 17       	cp	r22, r18
    80b6:	73 07       	cpc	r23, r19
    80b8:	84 07       	cpc	r24, r20
    80ba:	ba 07       	cpc	r27, r26
    80bc:	20 f0       	brcs	.+8      	; 0x80c6 <__divsf3_pse+0xaa>
    80be:	62 1b       	sub	r22, r18
    80c0:	73 0b       	sbc	r23, r19
    80c2:	84 0b       	sbc	r24, r20
    80c4:	ba 0b       	sbc	r27, r26
    80c6:	ee 1f       	adc	r30, r30
    80c8:	88 f7       	brcc	.-30     	; 0x80ac <__divsf3_pse+0x90>
    80ca:	e0 95       	com	r30
    80cc:	08 95       	ret

000080ce <__fixsfsi>:
    80ce:	04 d0       	rcall	.+8      	; 0x80d8 <__fixunssfsi>
    80d0:	68 94       	set
    80d2:	b1 11       	cpse	r27, r1
    80d4:	37 c1       	rjmp	.+622    	; 0x8344 <__fp_szero>
    80d6:	08 95       	ret

000080d8 <__fixunssfsi>:
    80d8:	1a d1       	rcall	.+564    	; 0x830e <__fp_splitA>
    80da:	88 f0       	brcs	.+34     	; 0x80fe <__fixunssfsi+0x26>
    80dc:	9f 57       	subi	r25, 0x7F	; 127
    80de:	90 f0       	brcs	.+36     	; 0x8104 <__fixunssfsi+0x2c>
    80e0:	b9 2f       	mov	r27, r25
    80e2:	99 27       	eor	r25, r25
    80e4:	b7 51       	subi	r27, 0x17	; 23
    80e6:	a0 f0       	brcs	.+40     	; 0x8110 <__fixunssfsi+0x38>
    80e8:	d1 f0       	breq	.+52     	; 0x811e <__fixunssfsi+0x46>
    80ea:	66 0f       	add	r22, r22
    80ec:	77 1f       	adc	r23, r23
    80ee:	88 1f       	adc	r24, r24
    80f0:	99 1f       	adc	r25, r25
    80f2:	1a f0       	brmi	.+6      	; 0x80fa <__fixunssfsi+0x22>
    80f4:	ba 95       	dec	r27
    80f6:	c9 f7       	brne	.-14     	; 0x80ea <__fixunssfsi+0x12>
    80f8:	12 c0       	rjmp	.+36     	; 0x811e <__fixunssfsi+0x46>
    80fa:	b1 30       	cpi	r27, 0x01	; 1
    80fc:	81 f0       	breq	.+32     	; 0x811e <__fixunssfsi+0x46>
    80fe:	21 d1       	rcall	.+578    	; 0x8342 <__fp_zero>
    8100:	b1 e0       	ldi	r27, 0x01	; 1
    8102:	08 95       	ret
    8104:	1e c1       	rjmp	.+572    	; 0x8342 <__fp_zero>
    8106:	67 2f       	mov	r22, r23
    8108:	78 2f       	mov	r23, r24
    810a:	88 27       	eor	r24, r24
    810c:	b8 5f       	subi	r27, 0xF8	; 248
    810e:	39 f0       	breq	.+14     	; 0x811e <__fixunssfsi+0x46>
    8110:	b9 3f       	cpi	r27, 0xF9	; 249
    8112:	cc f3       	brlt	.-14     	; 0x8106 <__fixunssfsi+0x2e>
    8114:	86 95       	lsr	r24
    8116:	77 95       	ror	r23
    8118:	67 95       	ror	r22
    811a:	b3 95       	inc	r27
    811c:	d9 f7       	brne	.-10     	; 0x8114 <__fixunssfsi+0x3c>
    811e:	3e f4       	brtc	.+14     	; 0x812e <__fixunssfsi+0x56>
    8120:	90 95       	com	r25
    8122:	80 95       	com	r24
    8124:	70 95       	com	r23
    8126:	61 95       	neg	r22
    8128:	7f 4f       	sbci	r23, 0xFF	; 255
    812a:	8f 4f       	sbci	r24, 0xFF	; 255
    812c:	9f 4f       	sbci	r25, 0xFF	; 255
    812e:	08 95       	ret

00008130 <__floatunsisf>:
    8130:	e8 94       	clt
    8132:	09 c0       	rjmp	.+18     	; 0x8146 <__floatsisf+0x12>

00008134 <__floatsisf>:
    8134:	97 fb       	bst	r25, 7
    8136:	3e f4       	brtc	.+14     	; 0x8146 <__floatsisf+0x12>
    8138:	90 95       	com	r25
    813a:	80 95       	com	r24
    813c:	70 95       	com	r23
    813e:	61 95       	neg	r22
    8140:	7f 4f       	sbci	r23, 0xFF	; 255
    8142:	8f 4f       	sbci	r24, 0xFF	; 255
    8144:	9f 4f       	sbci	r25, 0xFF	; 255
    8146:	99 23       	and	r25, r25
    8148:	a9 f0       	breq	.+42     	; 0x8174 <__floatsisf+0x40>
    814a:	f9 2f       	mov	r31, r25
    814c:	96 e9       	ldi	r25, 0x96	; 150
    814e:	bb 27       	eor	r27, r27
    8150:	93 95       	inc	r25
    8152:	f6 95       	lsr	r31
    8154:	87 95       	ror	r24
    8156:	77 95       	ror	r23
    8158:	67 95       	ror	r22
    815a:	b7 95       	ror	r27
    815c:	f1 11       	cpse	r31, r1
    815e:	f8 cf       	rjmp	.-16     	; 0x8150 <__floatsisf+0x1c>
    8160:	fa f4       	brpl	.+62     	; 0x81a0 <__floatsisf+0x6c>
    8162:	bb 0f       	add	r27, r27
    8164:	11 f4       	brne	.+4      	; 0x816a <__floatsisf+0x36>
    8166:	60 ff       	sbrs	r22, 0
    8168:	1b c0       	rjmp	.+54     	; 0x81a0 <__floatsisf+0x6c>
    816a:	6f 5f       	subi	r22, 0xFF	; 255
    816c:	7f 4f       	sbci	r23, 0xFF	; 255
    816e:	8f 4f       	sbci	r24, 0xFF	; 255
    8170:	9f 4f       	sbci	r25, 0xFF	; 255
    8172:	16 c0       	rjmp	.+44     	; 0x81a0 <__floatsisf+0x6c>
    8174:	88 23       	and	r24, r24
    8176:	11 f0       	breq	.+4      	; 0x817c <__floatsisf+0x48>
    8178:	96 e9       	ldi	r25, 0x96	; 150
    817a:	11 c0       	rjmp	.+34     	; 0x819e <__floatsisf+0x6a>
    817c:	77 23       	and	r23, r23
    817e:	21 f0       	breq	.+8      	; 0x8188 <__floatsisf+0x54>
    8180:	9e e8       	ldi	r25, 0x8E	; 142
    8182:	87 2f       	mov	r24, r23
    8184:	76 2f       	mov	r23, r22
    8186:	05 c0       	rjmp	.+10     	; 0x8192 <__floatsisf+0x5e>
    8188:	66 23       	and	r22, r22
    818a:	71 f0       	breq	.+28     	; 0x81a8 <__floatsisf+0x74>
    818c:	96 e8       	ldi	r25, 0x86	; 134
    818e:	86 2f       	mov	r24, r22
    8190:	70 e0       	ldi	r23, 0x00	; 0
    8192:	60 e0       	ldi	r22, 0x00	; 0
    8194:	2a f0       	brmi	.+10     	; 0x81a0 <__floatsisf+0x6c>
    8196:	9a 95       	dec	r25
    8198:	66 0f       	add	r22, r22
    819a:	77 1f       	adc	r23, r23
    819c:	88 1f       	adc	r24, r24
    819e:	da f7       	brpl	.-10     	; 0x8196 <__floatsisf+0x62>
    81a0:	88 0f       	add	r24, r24
    81a2:	96 95       	lsr	r25
    81a4:	87 95       	ror	r24
    81a6:	97 f9       	bld	r25, 7
    81a8:	08 95       	ret

000081aa <__fp_cmp>:
    81aa:	99 0f       	add	r25, r25
    81ac:	00 08       	sbc	r0, r0
    81ae:	55 0f       	add	r21, r21
    81b0:	aa 0b       	sbc	r26, r26
    81b2:	e0 e8       	ldi	r30, 0x80	; 128
    81b4:	fe ef       	ldi	r31, 0xFE	; 254
    81b6:	16 16       	cp	r1, r22
    81b8:	17 06       	cpc	r1, r23
    81ba:	e8 07       	cpc	r30, r24
    81bc:	f9 07       	cpc	r31, r25
    81be:	c0 f0       	brcs	.+48     	; 0x81f0 <__fp_cmp+0x46>
    81c0:	12 16       	cp	r1, r18
    81c2:	13 06       	cpc	r1, r19
    81c4:	e4 07       	cpc	r30, r20
    81c6:	f5 07       	cpc	r31, r21
    81c8:	98 f0       	brcs	.+38     	; 0x81f0 <__fp_cmp+0x46>
    81ca:	62 1b       	sub	r22, r18
    81cc:	73 0b       	sbc	r23, r19
    81ce:	84 0b       	sbc	r24, r20
    81d0:	95 0b       	sbc	r25, r21
    81d2:	39 f4       	brne	.+14     	; 0x81e2 <__fp_cmp+0x38>
    81d4:	0a 26       	eor	r0, r26
    81d6:	61 f0       	breq	.+24     	; 0x81f0 <__fp_cmp+0x46>
    81d8:	23 2b       	or	r18, r19
    81da:	24 2b       	or	r18, r20
    81dc:	25 2b       	or	r18, r21
    81de:	21 f4       	brne	.+8      	; 0x81e8 <__fp_cmp+0x3e>
    81e0:	08 95       	ret
    81e2:	0a 26       	eor	r0, r26
    81e4:	09 f4       	brne	.+2      	; 0x81e8 <__fp_cmp+0x3e>
    81e6:	a1 40       	sbci	r26, 0x01	; 1
    81e8:	a6 95       	lsr	r26
    81ea:	8f ef       	ldi	r24, 0xFF	; 255
    81ec:	81 1d       	adc	r24, r1
    81ee:	81 1d       	adc	r24, r1
    81f0:	08 95       	ret

000081f2 <__fp_inf>:
    81f2:	97 f9       	bld	r25, 7
    81f4:	9f 67       	ori	r25, 0x7F	; 127
    81f6:	80 e8       	ldi	r24, 0x80	; 128
    81f8:	70 e0       	ldi	r23, 0x00	; 0
    81fa:	60 e0       	ldi	r22, 0x00	; 0
    81fc:	08 95       	ret

000081fe <__fp_nan>:
    81fe:	9f ef       	ldi	r25, 0xFF	; 255
    8200:	80 ec       	ldi	r24, 0xC0	; 192
    8202:	08 95       	ret

00008204 <__fp_powser>:
    8204:	df 93       	push	r29
    8206:	cf 93       	push	r28
    8208:	1f 93       	push	r17
    820a:	0f 93       	push	r16
    820c:	ff 92       	push	r15
    820e:	ef 92       	push	r14
    8210:	df 92       	push	r13
    8212:	7b 01       	movw	r14, r22
    8214:	8c 01       	movw	r16, r24
    8216:	68 94       	set
    8218:	05 c0       	rjmp	.+10     	; 0x8224 <__fp_powser+0x20>
    821a:	da 2e       	mov	r13, r26
    821c:	ef 01       	movw	r28, r30
    821e:	ab d0       	rcall	.+342    	; 0x8376 <__mulsf3x>
    8220:	fe 01       	movw	r30, r28
    8222:	e8 94       	clt
    8224:	a5 91       	lpm	r26, Z+
    8226:	25 91       	lpm	r18, Z+
    8228:	35 91       	lpm	r19, Z+
    822a:	45 91       	lpm	r20, Z+
    822c:	55 91       	lpm	r21, Z+
    822e:	ae f3       	brts	.-22     	; 0x821a <__fp_powser+0x16>
    8230:	ef 01       	movw	r28, r30
    8232:	29 de       	rcall	.-942    	; 0x7e86 <__addsf3x>
    8234:	fe 01       	movw	r30, r28
    8236:	97 01       	movw	r18, r14
    8238:	a8 01       	movw	r20, r16
    823a:	da 94       	dec	r13
    823c:	79 f7       	brne	.-34     	; 0x821c <__fp_powser+0x18>
    823e:	df 90       	pop	r13
    8240:	ef 90       	pop	r14
    8242:	ff 90       	pop	r15
    8244:	0f 91       	pop	r16
    8246:	1f 91       	pop	r17
    8248:	cf 91       	pop	r28
    824a:	df 91       	pop	r29
    824c:	08 95       	ret

0000824e <__fp_pscA>:
    824e:	00 24       	eor	r0, r0
    8250:	0a 94       	dec	r0
    8252:	16 16       	cp	r1, r22
    8254:	17 06       	cpc	r1, r23
    8256:	18 06       	cpc	r1, r24
    8258:	09 06       	cpc	r0, r25
    825a:	08 95       	ret

0000825c <__fp_pscB>:
    825c:	00 24       	eor	r0, r0
    825e:	0a 94       	dec	r0
    8260:	12 16       	cp	r1, r18
    8262:	13 06       	cpc	r1, r19
    8264:	14 06       	cpc	r1, r20
    8266:	05 06       	cpc	r0, r21
    8268:	08 95       	ret
    826a:	c9 cf       	rjmp	.-110    	; 0x81fe <__fp_nan>

0000826c <__fp_rempio2>:
    826c:	50 d0       	rcall	.+160    	; 0x830e <__fp_splitA>
    826e:	e8 f3       	brcs	.-6      	; 0x826a <__fp_pscB+0xe>
    8270:	e8 94       	clt
    8272:	e0 e0       	ldi	r30, 0x00	; 0
    8274:	bb 27       	eor	r27, r27
    8276:	9f 57       	subi	r25, 0x7F	; 127
    8278:	f0 f0       	brcs	.+60     	; 0x82b6 <__fp_rempio2+0x4a>
    827a:	2a ed       	ldi	r18, 0xDA	; 218
    827c:	3f e0       	ldi	r19, 0x0F	; 15
    827e:	49 ec       	ldi	r20, 0xC9	; 201
    8280:	06 c0       	rjmp	.+12     	; 0x828e <__fp_rempio2+0x22>
    8282:	ee 0f       	add	r30, r30
    8284:	bb 0f       	add	r27, r27
    8286:	66 1f       	adc	r22, r22
    8288:	77 1f       	adc	r23, r23
    828a:	88 1f       	adc	r24, r24
    828c:	28 f0       	brcs	.+10     	; 0x8298 <__fp_rempio2+0x2c>
    828e:	b2 3a       	cpi	r27, 0xA2	; 162
    8290:	62 07       	cpc	r22, r18
    8292:	73 07       	cpc	r23, r19
    8294:	84 07       	cpc	r24, r20
    8296:	28 f0       	brcs	.+10     	; 0x82a2 <__fp_rempio2+0x36>
    8298:	b2 5a       	subi	r27, 0xA2	; 162
    829a:	62 0b       	sbc	r22, r18
    829c:	73 0b       	sbc	r23, r19
    829e:	84 0b       	sbc	r24, r20
    82a0:	e3 95       	inc	r30
    82a2:	9a 95       	dec	r25
    82a4:	72 f7       	brpl	.-36     	; 0x8282 <__fp_rempio2+0x16>
    82a6:	80 38       	cpi	r24, 0x80	; 128
    82a8:	30 f4       	brcc	.+12     	; 0x82b6 <__fp_rempio2+0x4a>
    82aa:	9a 95       	dec	r25
    82ac:	bb 0f       	add	r27, r27
    82ae:	66 1f       	adc	r22, r22
    82b0:	77 1f       	adc	r23, r23
    82b2:	88 1f       	adc	r24, r24
    82b4:	d2 f7       	brpl	.-12     	; 0x82aa <__fp_rempio2+0x3e>
    82b6:	90 48       	sbci	r25, 0x80	; 128
    82b8:	c0 c0       	rjmp	.+384    	; 0x843a <__fp_mpack_finite>

000082ba <__fp_round>:
    82ba:	09 2e       	mov	r0, r25
    82bc:	03 94       	inc	r0
    82be:	00 0c       	add	r0, r0
    82c0:	11 f4       	brne	.+4      	; 0x82c6 <__fp_round+0xc>
    82c2:	88 23       	and	r24, r24
    82c4:	52 f0       	brmi	.+20     	; 0x82da <__fp_round+0x20>
    82c6:	bb 0f       	add	r27, r27
    82c8:	40 f4       	brcc	.+16     	; 0x82da <__fp_round+0x20>
    82ca:	bf 2b       	or	r27, r31
    82cc:	11 f4       	brne	.+4      	; 0x82d2 <__fp_round+0x18>
    82ce:	60 ff       	sbrs	r22, 0
    82d0:	04 c0       	rjmp	.+8      	; 0x82da <__fp_round+0x20>
    82d2:	6f 5f       	subi	r22, 0xFF	; 255
    82d4:	7f 4f       	sbci	r23, 0xFF	; 255
    82d6:	8f 4f       	sbci	r24, 0xFF	; 255
    82d8:	9f 4f       	sbci	r25, 0xFF	; 255
    82da:	08 95       	ret

000082dc <__fp_sinus>:
    82dc:	ef 93       	push	r30
    82de:	e0 ff       	sbrs	r30, 0
    82e0:	06 c0       	rjmp	.+12     	; 0x82ee <__fp_sinus+0x12>
    82e2:	a2 ea       	ldi	r26, 0xA2	; 162
    82e4:	2a ed       	ldi	r18, 0xDA	; 218
    82e6:	3f e0       	ldi	r19, 0x0F	; 15
    82e8:	49 ec       	ldi	r20, 0xC9	; 201
    82ea:	5f eb       	ldi	r21, 0xBF	; 191
    82ec:	cc dd       	rcall	.-1128   	; 0x7e86 <__addsf3x>
    82ee:	e5 df       	rcall	.-54     	; 0x82ba <__fp_round>
    82f0:	0f 90       	pop	r0
    82f2:	03 94       	inc	r0
    82f4:	01 fc       	sbrc	r0, 1
    82f6:	90 58       	subi	r25, 0x80	; 128
    82f8:	eb e7       	ldi	r30, 0x7B	; 123
    82fa:	f1 e0       	ldi	r31, 0x01	; 1
    82fc:	aa c0       	rjmp	.+340    	; 0x8452 <__fp_powsodd>

000082fe <__fp_split3>:
    82fe:	57 fd       	sbrc	r21, 7
    8300:	90 58       	subi	r25, 0x80	; 128
    8302:	44 0f       	add	r20, r20
    8304:	55 1f       	adc	r21, r21
    8306:	59 f0       	breq	.+22     	; 0x831e <__fp_splitA+0x10>
    8308:	5f 3f       	cpi	r21, 0xFF	; 255
    830a:	71 f0       	breq	.+28     	; 0x8328 <__fp_splitA+0x1a>
    830c:	47 95       	ror	r20

0000830e <__fp_splitA>:
    830e:	88 0f       	add	r24, r24
    8310:	97 fb       	bst	r25, 7
    8312:	99 1f       	adc	r25, r25
    8314:	61 f0       	breq	.+24     	; 0x832e <__fp_splitA+0x20>
    8316:	9f 3f       	cpi	r25, 0xFF	; 255
    8318:	79 f0       	breq	.+30     	; 0x8338 <__fp_splitA+0x2a>
    831a:	87 95       	ror	r24
    831c:	08 95       	ret
    831e:	12 16       	cp	r1, r18
    8320:	13 06       	cpc	r1, r19
    8322:	14 06       	cpc	r1, r20
    8324:	55 1f       	adc	r21, r21
    8326:	f2 cf       	rjmp	.-28     	; 0x830c <__fp_split3+0xe>
    8328:	46 95       	lsr	r20
    832a:	f1 df       	rcall	.-30     	; 0x830e <__fp_splitA>
    832c:	08 c0       	rjmp	.+16     	; 0x833e <__fp_splitA+0x30>
    832e:	16 16       	cp	r1, r22
    8330:	17 06       	cpc	r1, r23
    8332:	18 06       	cpc	r1, r24
    8334:	99 1f       	adc	r25, r25
    8336:	f1 cf       	rjmp	.-30     	; 0x831a <__fp_splitA+0xc>
    8338:	86 95       	lsr	r24
    833a:	71 05       	cpc	r23, r1
    833c:	61 05       	cpc	r22, r1
    833e:	08 94       	sec
    8340:	08 95       	ret

00008342 <__fp_zero>:
    8342:	e8 94       	clt

00008344 <__fp_szero>:
    8344:	bb 27       	eor	r27, r27
    8346:	66 27       	eor	r22, r22
    8348:	77 27       	eor	r23, r23
    834a:	cb 01       	movw	r24, r22
    834c:	97 f9       	bld	r25, 7
    834e:	08 95       	ret

00008350 <inverse>:
    8350:	9b 01       	movw	r18, r22
    8352:	ac 01       	movw	r20, r24
    8354:	60 e0       	ldi	r22, 0x00	; 0
    8356:	70 e0       	ldi	r23, 0x00	; 0
    8358:	80 e8       	ldi	r24, 0x80	; 128
    835a:	9f e3       	ldi	r25, 0x3F	; 63
    835c:	50 ce       	rjmp	.-864    	; 0x7ffe <__divsf3>

0000835e <__mulsf3>:
    835e:	0b d0       	rcall	.+22     	; 0x8376 <__mulsf3x>
    8360:	ac cf       	rjmp	.-168    	; 0x82ba <__fp_round>
    8362:	75 df       	rcall	.-278    	; 0x824e <__fp_pscA>
    8364:	28 f0       	brcs	.+10     	; 0x8370 <__mulsf3+0x12>
    8366:	7a df       	rcall	.-268    	; 0x825c <__fp_pscB>
    8368:	18 f0       	brcs	.+6      	; 0x8370 <__mulsf3+0x12>
    836a:	95 23       	and	r25, r21
    836c:	09 f0       	breq	.+2      	; 0x8370 <__mulsf3+0x12>
    836e:	41 cf       	rjmp	.-382    	; 0x81f2 <__fp_inf>
    8370:	46 cf       	rjmp	.-372    	; 0x81fe <__fp_nan>
    8372:	11 24       	eor	r1, r1
    8374:	e7 cf       	rjmp	.-50     	; 0x8344 <__fp_szero>

00008376 <__mulsf3x>:
    8376:	c3 df       	rcall	.-122    	; 0x82fe <__fp_split3>
    8378:	a0 f3       	brcs	.-24     	; 0x8362 <__mulsf3+0x4>

0000837a <__mulsf3_pse>:
    837a:	95 9f       	mul	r25, r21
    837c:	d1 f3       	breq	.-12     	; 0x8372 <__mulsf3+0x14>
    837e:	95 0f       	add	r25, r21
    8380:	50 e0       	ldi	r21, 0x00	; 0
    8382:	55 1f       	adc	r21, r21
    8384:	62 9f       	mul	r22, r18
    8386:	f0 01       	movw	r30, r0
    8388:	72 9f       	mul	r23, r18
    838a:	bb 27       	eor	r27, r27
    838c:	f0 0d       	add	r31, r0
    838e:	b1 1d       	adc	r27, r1
    8390:	63 9f       	mul	r22, r19
    8392:	aa 27       	eor	r26, r26
    8394:	f0 0d       	add	r31, r0
    8396:	b1 1d       	adc	r27, r1
    8398:	aa 1f       	adc	r26, r26
    839a:	64 9f       	mul	r22, r20
    839c:	66 27       	eor	r22, r22
    839e:	b0 0d       	add	r27, r0
    83a0:	a1 1d       	adc	r26, r1
    83a2:	66 1f       	adc	r22, r22
    83a4:	82 9f       	mul	r24, r18
    83a6:	22 27       	eor	r18, r18
    83a8:	b0 0d       	add	r27, r0
    83aa:	a1 1d       	adc	r26, r1
    83ac:	62 1f       	adc	r22, r18
    83ae:	73 9f       	mul	r23, r19
    83b0:	b0 0d       	add	r27, r0
    83b2:	a1 1d       	adc	r26, r1
    83b4:	62 1f       	adc	r22, r18
    83b6:	83 9f       	mul	r24, r19
    83b8:	a0 0d       	add	r26, r0
    83ba:	61 1d       	adc	r22, r1
    83bc:	22 1f       	adc	r18, r18
    83be:	74 9f       	mul	r23, r20
    83c0:	33 27       	eor	r19, r19
    83c2:	a0 0d       	add	r26, r0
    83c4:	61 1d       	adc	r22, r1
    83c6:	23 1f       	adc	r18, r19
    83c8:	84 9f       	mul	r24, r20
    83ca:	60 0d       	add	r22, r0
    83cc:	21 1d       	adc	r18, r1
    83ce:	82 2f       	mov	r24, r18
    83d0:	76 2f       	mov	r23, r22
    83d2:	6a 2f       	mov	r22, r26
    83d4:	11 24       	eor	r1, r1
    83d6:	9f 57       	subi	r25, 0x7F	; 127
    83d8:	50 40       	sbci	r21, 0x00	; 0
    83da:	8a f0       	brmi	.+34     	; 0x83fe <__mulsf3_pse+0x84>
    83dc:	e1 f0       	breq	.+56     	; 0x8416 <__mulsf3_pse+0x9c>
    83de:	88 23       	and	r24, r24
    83e0:	4a f0       	brmi	.+18     	; 0x83f4 <__mulsf3_pse+0x7a>
    83e2:	ee 0f       	add	r30, r30
    83e4:	ff 1f       	adc	r31, r31
    83e6:	bb 1f       	adc	r27, r27
    83e8:	66 1f       	adc	r22, r22
    83ea:	77 1f       	adc	r23, r23
    83ec:	88 1f       	adc	r24, r24
    83ee:	91 50       	subi	r25, 0x01	; 1
    83f0:	50 40       	sbci	r21, 0x00	; 0
    83f2:	a9 f7       	brne	.-22     	; 0x83de <__mulsf3_pse+0x64>
    83f4:	9e 3f       	cpi	r25, 0xFE	; 254
    83f6:	51 05       	cpc	r21, r1
    83f8:	70 f0       	brcs	.+28     	; 0x8416 <__mulsf3_pse+0x9c>
    83fa:	fb ce       	rjmp	.-522    	; 0x81f2 <__fp_inf>
    83fc:	a3 cf       	rjmp	.-186    	; 0x8344 <__fp_szero>
    83fe:	5f 3f       	cpi	r21, 0xFF	; 255
    8400:	ec f3       	brlt	.-6      	; 0x83fc <__mulsf3_pse+0x82>
    8402:	98 3e       	cpi	r25, 0xE8	; 232
    8404:	dc f3       	brlt	.-10     	; 0x83fc <__mulsf3_pse+0x82>
    8406:	86 95       	lsr	r24
    8408:	77 95       	ror	r23
    840a:	67 95       	ror	r22
    840c:	b7 95       	ror	r27
    840e:	f7 95       	ror	r31
    8410:	e7 95       	ror	r30
    8412:	9f 5f       	subi	r25, 0xFF	; 255
    8414:	c1 f7       	brne	.-16     	; 0x8406 <__mulsf3_pse+0x8c>
    8416:	fe 2b       	or	r31, r30
    8418:	88 0f       	add	r24, r24
    841a:	91 1d       	adc	r25, r1
    841c:	96 95       	lsr	r25
    841e:	87 95       	ror	r24
    8420:	97 f9       	bld	r25, 7
    8422:	08 95       	ret

00008424 <sin>:
    8424:	9f 93       	push	r25
    8426:	22 df       	rcall	.-444    	; 0x826c <__fp_rempio2>
    8428:	0f 90       	pop	r0
    842a:	07 fc       	sbrc	r0, 7
    842c:	ee 5f       	subi	r30, 0xFE	; 254
    842e:	56 cf       	rjmp	.-340    	; 0x82dc <__fp_sinus>

00008430 <square>:
    8430:	9b 01       	movw	r18, r22
    8432:	ac 01       	movw	r20, r24
    8434:	94 cf       	rjmp	.-216    	; 0x835e <__mulsf3>

00008436 <__fp_mpack>:
    8436:	9f 3f       	cpi	r25, 0xFF	; 255
    8438:	31 f0       	breq	.+12     	; 0x8446 <__fp_mpack_finite+0xc>

0000843a <__fp_mpack_finite>:
    843a:	91 50       	subi	r25, 0x01	; 1
    843c:	20 f4       	brcc	.+8      	; 0x8446 <__fp_mpack_finite+0xc>
    843e:	87 95       	ror	r24
    8440:	77 95       	ror	r23
    8442:	67 95       	ror	r22
    8444:	b7 95       	ror	r27
    8446:	88 0f       	add	r24, r24
    8448:	91 1d       	adc	r25, r1
    844a:	96 95       	lsr	r25
    844c:	87 95       	ror	r24
    844e:	97 f9       	bld	r25, 7
    8450:	08 95       	ret

00008452 <__fp_powsodd>:
    8452:	9f 93       	push	r25
    8454:	8f 93       	push	r24
    8456:	7f 93       	push	r23
    8458:	6f 93       	push	r22
    845a:	ff 93       	push	r31
    845c:	ef 93       	push	r30
    845e:	9b 01       	movw	r18, r22
    8460:	ac 01       	movw	r20, r24
    8462:	7d df       	rcall	.-262    	; 0x835e <__mulsf3>
    8464:	ef 91       	pop	r30
    8466:	ff 91       	pop	r31
    8468:	cd de       	rcall	.-614    	; 0x8204 <__fp_powser>
    846a:	2f 91       	pop	r18
    846c:	3f 91       	pop	r19
    846e:	4f 91       	pop	r20
    8470:	5f 91       	pop	r21
    8472:	75 cf       	rjmp	.-278    	; 0x835e <__mulsf3>

00008474 <__mulsi3>:
    8474:	62 9f       	mul	r22, r18
    8476:	d0 01       	movw	r26, r0
    8478:	73 9f       	mul	r23, r19
    847a:	f0 01       	movw	r30, r0
    847c:	82 9f       	mul	r24, r18
    847e:	e0 0d       	add	r30, r0
    8480:	f1 1d       	adc	r31, r1
    8482:	64 9f       	mul	r22, r20
    8484:	e0 0d       	add	r30, r0
    8486:	f1 1d       	adc	r31, r1
    8488:	92 9f       	mul	r25, r18
    848a:	f0 0d       	add	r31, r0
    848c:	83 9f       	mul	r24, r19
    848e:	f0 0d       	add	r31, r0
    8490:	74 9f       	mul	r23, r20
    8492:	f0 0d       	add	r31, r0
    8494:	65 9f       	mul	r22, r21
    8496:	f0 0d       	add	r31, r0
    8498:	99 27       	eor	r25, r25
    849a:	72 9f       	mul	r23, r18
    849c:	b0 0d       	add	r27, r0
    849e:	e1 1d       	adc	r30, r1
    84a0:	f9 1f       	adc	r31, r25
    84a2:	63 9f       	mul	r22, r19
    84a4:	b0 0d       	add	r27, r0
    84a6:	e1 1d       	adc	r30, r1
    84a8:	f9 1f       	adc	r31, r25
    84aa:	bd 01       	movw	r22, r26
    84ac:	cf 01       	movw	r24, r30
    84ae:	11 24       	eor	r1, r1
    84b0:	08 95       	ret

000084b2 <__udivmodhi4>:
    84b2:	aa 1b       	sub	r26, r26
    84b4:	bb 1b       	sub	r27, r27
    84b6:	51 e1       	ldi	r21, 0x11	; 17
    84b8:	07 c0       	rjmp	.+14     	; 0x84c8 <__udivmodhi4_ep>

000084ba <__udivmodhi4_loop>:
    84ba:	aa 1f       	adc	r26, r26
    84bc:	bb 1f       	adc	r27, r27
    84be:	a6 17       	cp	r26, r22
    84c0:	b7 07       	cpc	r27, r23
    84c2:	10 f0       	brcs	.+4      	; 0x84c8 <__udivmodhi4_ep>
    84c4:	a6 1b       	sub	r26, r22
    84c6:	b7 0b       	sbc	r27, r23

000084c8 <__udivmodhi4_ep>:
    84c8:	88 1f       	adc	r24, r24
    84ca:	99 1f       	adc	r25, r25
    84cc:	5a 95       	dec	r21
    84ce:	a9 f7       	brne	.-22     	; 0x84ba <__udivmodhi4_loop>
    84d0:	80 95       	com	r24
    84d2:	90 95       	com	r25
    84d4:	bc 01       	movw	r22, r24
    84d6:	cd 01       	movw	r24, r26
    84d8:	08 95       	ret

000084da <__divmodhi4>:
    84da:	97 fb       	bst	r25, 7
    84dc:	09 2e       	mov	r0, r25
    84de:	07 26       	eor	r0, r23
    84e0:	0a d0       	rcall	.+20     	; 0x84f6 <__divmodhi4_neg1>
    84e2:	77 fd       	sbrc	r23, 7
    84e4:	04 d0       	rcall	.+8      	; 0x84ee <__divmodhi4_neg2>
    84e6:	e5 df       	rcall	.-54     	; 0x84b2 <__udivmodhi4>
    84e8:	06 d0       	rcall	.+12     	; 0x84f6 <__divmodhi4_neg1>
    84ea:	00 20       	and	r0, r0
    84ec:	1a f4       	brpl	.+6      	; 0x84f4 <__divmodhi4_exit>

000084ee <__divmodhi4_neg2>:
    84ee:	70 95       	com	r23
    84f0:	61 95       	neg	r22
    84f2:	7f 4f       	sbci	r23, 0xFF	; 255

000084f4 <__divmodhi4_exit>:
    84f4:	08 95       	ret

000084f6 <__divmodhi4_neg1>:
    84f6:	f6 f7       	brtc	.-4      	; 0x84f4 <__divmodhi4_exit>
    84f8:	90 95       	com	r25
    84fa:	81 95       	neg	r24
    84fc:	9f 4f       	sbci	r25, 0xFF	; 255
    84fe:	08 95       	ret

00008500 <__divmodsi4>:
    8500:	97 fb       	bst	r25, 7
    8502:	09 2e       	mov	r0, r25
    8504:	05 26       	eor	r0, r21
    8506:	0e d0       	rcall	.+28     	; 0x8524 <__divmodsi4_neg1>
    8508:	57 fd       	sbrc	r21, 7
    850a:	04 d0       	rcall	.+8      	; 0x8514 <__divmodsi4_neg2>
    850c:	14 d0       	rcall	.+40     	; 0x8536 <__udivmodsi4>
    850e:	0a d0       	rcall	.+20     	; 0x8524 <__divmodsi4_neg1>
    8510:	00 1c       	adc	r0, r0
    8512:	38 f4       	brcc	.+14     	; 0x8522 <__divmodsi4_exit>

00008514 <__divmodsi4_neg2>:
    8514:	50 95       	com	r21
    8516:	40 95       	com	r20
    8518:	30 95       	com	r19
    851a:	21 95       	neg	r18
    851c:	3f 4f       	sbci	r19, 0xFF	; 255
    851e:	4f 4f       	sbci	r20, 0xFF	; 255
    8520:	5f 4f       	sbci	r21, 0xFF	; 255

00008522 <__divmodsi4_exit>:
    8522:	08 95       	ret

00008524 <__divmodsi4_neg1>:
    8524:	f6 f7       	brtc	.-4      	; 0x8522 <__divmodsi4_exit>
    8526:	90 95       	com	r25
    8528:	80 95       	com	r24
    852a:	70 95       	com	r23
    852c:	61 95       	neg	r22
    852e:	7f 4f       	sbci	r23, 0xFF	; 255
    8530:	8f 4f       	sbci	r24, 0xFF	; 255
    8532:	9f 4f       	sbci	r25, 0xFF	; 255
    8534:	08 95       	ret

00008536 <__udivmodsi4>:
    8536:	a1 e2       	ldi	r26, 0x21	; 33
    8538:	1a 2e       	mov	r1, r26
    853a:	aa 1b       	sub	r26, r26
    853c:	bb 1b       	sub	r27, r27
    853e:	fd 01       	movw	r30, r26
    8540:	0d c0       	rjmp	.+26     	; 0x855c <__udivmodsi4_ep>

00008542 <__udivmodsi4_loop>:
    8542:	aa 1f       	adc	r26, r26
    8544:	bb 1f       	adc	r27, r27
    8546:	ee 1f       	adc	r30, r30
    8548:	ff 1f       	adc	r31, r31
    854a:	a2 17       	cp	r26, r18
    854c:	b3 07       	cpc	r27, r19
    854e:	e4 07       	cpc	r30, r20
    8550:	f5 07       	cpc	r31, r21
    8552:	20 f0       	brcs	.+8      	; 0x855c <__udivmodsi4_ep>
    8554:	a2 1b       	sub	r26, r18
    8556:	b3 0b       	sbc	r27, r19
    8558:	e4 0b       	sbc	r30, r20
    855a:	f5 0b       	sbc	r31, r21

0000855c <__udivmodsi4_ep>:
    855c:	66 1f       	adc	r22, r22
    855e:	77 1f       	adc	r23, r23
    8560:	88 1f       	adc	r24, r24
    8562:	99 1f       	adc	r25, r25
    8564:	1a 94       	dec	r1
    8566:	69 f7       	brne	.-38     	; 0x8542 <__udivmodsi4_loop>
    8568:	60 95       	com	r22
    856a:	70 95       	com	r23
    856c:	80 95       	com	r24
    856e:	90 95       	com	r25
    8570:	9b 01       	movw	r18, r22
    8572:	ac 01       	movw	r20, r24
    8574:	bd 01       	movw	r22, r26
    8576:	cf 01       	movw	r24, r30
    8578:	08 95       	ret

0000857a <do_rand>:
    857a:	af 92       	push	r10
    857c:	bf 92       	push	r11
    857e:	cf 92       	push	r12
    8580:	df 92       	push	r13
    8582:	ef 92       	push	r14
    8584:	ff 92       	push	r15
    8586:	0f 93       	push	r16
    8588:	1f 93       	push	r17
    858a:	cf 93       	push	r28
    858c:	df 93       	push	r29
    858e:	ec 01       	movw	r28, r24
    8590:	68 81       	ld	r22, Y
    8592:	79 81       	ldd	r23, Y+1	; 0x01
    8594:	8a 81       	ldd	r24, Y+2	; 0x02
    8596:	9b 81       	ldd	r25, Y+3	; 0x03
    8598:	61 15       	cp	r22, r1
    859a:	71 05       	cpc	r23, r1
    859c:	81 05       	cpc	r24, r1
    859e:	91 05       	cpc	r25, r1
    85a0:	21 f4       	brne	.+8      	; 0x85aa <do_rand+0x30>
    85a2:	64 e2       	ldi	r22, 0x24	; 36
    85a4:	79 ed       	ldi	r23, 0xD9	; 217
    85a6:	8b e5       	ldi	r24, 0x5B	; 91
    85a8:	97 e0       	ldi	r25, 0x07	; 7
    85aa:	2d e1       	ldi	r18, 0x1D	; 29
    85ac:	33 ef       	ldi	r19, 0xF3	; 243
    85ae:	41 e0       	ldi	r20, 0x01	; 1
    85b0:	50 e0       	ldi	r21, 0x00	; 0
    85b2:	0e 94 80 42 	call	0x8500	; 0x8500 <__divmodsi4>
    85b6:	79 01       	movw	r14, r18
    85b8:	8a 01       	movw	r16, r20
    85ba:	27 ea       	ldi	r18, 0xA7	; 167
    85bc:	31 e4       	ldi	r19, 0x41	; 65
    85be:	40 e0       	ldi	r20, 0x00	; 0
    85c0:	50 e0       	ldi	r21, 0x00	; 0
    85c2:	0e 94 3a 42 	call	0x8474	; 0x8474 <__mulsi3>
    85c6:	5b 01       	movw	r10, r22
    85c8:	6c 01       	movw	r12, r24
    85ca:	c8 01       	movw	r24, r16
    85cc:	b7 01       	movw	r22, r14
    85ce:	2c ee       	ldi	r18, 0xEC	; 236
    85d0:	34 ef       	ldi	r19, 0xF4	; 244
    85d2:	4f ef       	ldi	r20, 0xFF	; 255
    85d4:	5f ef       	ldi	r21, 0xFF	; 255
    85d6:	0e 94 3a 42 	call	0x8474	; 0x8474 <__mulsi3>
    85da:	6a 0d       	add	r22, r10
    85dc:	7b 1d       	adc	r23, r11
    85de:	8c 1d       	adc	r24, r12
    85e0:	9d 1d       	adc	r25, r13
    85e2:	97 ff       	sbrs	r25, 7
    85e4:	04 c0       	rjmp	.+8      	; 0x85ee <do_rand+0x74>
    85e6:	61 50       	subi	r22, 0x01	; 1
    85e8:	70 40       	sbci	r23, 0x00	; 0
    85ea:	80 40       	sbci	r24, 0x00	; 0
    85ec:	90 48       	sbci	r25, 0x80	; 128
    85ee:	68 83       	st	Y, r22
    85f0:	79 83       	std	Y+1, r23	; 0x01
    85f2:	8a 83       	std	Y+2, r24	; 0x02
    85f4:	9b 83       	std	Y+3, r25	; 0x03
    85f6:	7f 77       	andi	r23, 0x7F	; 127
    85f8:	cb 01       	movw	r24, r22
    85fa:	df 91       	pop	r29
    85fc:	cf 91       	pop	r28
    85fe:	1f 91       	pop	r17
    8600:	0f 91       	pop	r16
    8602:	ff 90       	pop	r15
    8604:	ef 90       	pop	r14
    8606:	df 90       	pop	r13
    8608:	cf 90       	pop	r12
    860a:	bf 90       	pop	r11
    860c:	af 90       	pop	r10
    860e:	08 95       	ret

00008610 <rand_r>:
    8610:	0e 94 bd 42 	call	0x857a	; 0x857a <do_rand>
    8614:	08 95       	ret

00008616 <rand>:
    8616:	88 e1       	ldi	r24, 0x18	; 24
    8618:	92 e0       	ldi	r25, 0x02	; 2
    861a:	0e 94 bd 42 	call	0x857a	; 0x857a <do_rand>
    861e:	08 95       	ret

00008620 <srand>:
    8620:	a0 e0       	ldi	r26, 0x00	; 0
    8622:	b0 e0       	ldi	r27, 0x00	; 0
    8624:	80 93 18 02 	sts	0x0218, r24
    8628:	90 93 19 02 	sts	0x0219, r25
    862c:	a0 93 1a 02 	sts	0x021A, r26
    8630:	b0 93 1b 02 	sts	0x021B, r27
    8634:	08 95       	ret

00008636 <__eerd_block_m2560>:
    8636:	dc 01       	movw	r26, r24
    8638:	cb 01       	movw	r24, r22

0000863a <__eerd_blraw_m2560>:
    863a:	fc 01       	movw	r30, r24
    863c:	f9 99       	sbic	0x1f, 1	; 31
    863e:	fe cf       	rjmp	.-4      	; 0x863c <__eerd_blraw_m2560+0x2>
    8640:	06 c0       	rjmp	.+12     	; 0x864e <__eerd_blraw_m2560+0x14>
    8642:	f2 bd       	out	0x22, r31	; 34
    8644:	e1 bd       	out	0x21, r30	; 33
    8646:	f8 9a       	sbi	0x1f, 0	; 31
    8648:	31 96       	adiw	r30, 0x01	; 1
    864a:	00 b4       	in	r0, 0x20	; 32
    864c:	0d 92       	st	X+, r0
    864e:	41 50       	subi	r20, 0x01	; 1
    8650:	50 40       	sbci	r21, 0x00	; 0
    8652:	b8 f7       	brcc	.-18     	; 0x8642 <__eerd_blraw_m2560+0x8>
    8654:	08 95       	ret

00008656 <__eerd_byte_m2560>:
    8656:	f9 99       	sbic	0x1f, 1	; 31
    8658:	fe cf       	rjmp	.-4      	; 0x8656 <__eerd_byte_m2560>
    865a:	92 bd       	out	0x22, r25	; 34
    865c:	81 bd       	out	0x21, r24	; 33
    865e:	f8 9a       	sbi	0x1f, 0	; 31
    8660:	99 27       	eor	r25, r25
    8662:	80 b5       	in	r24, 0x20	; 32
    8664:	08 95       	ret

00008666 <__eerd_word_m2560>:
    8666:	a8 e1       	ldi	r26, 0x18	; 24
    8668:	b0 e0       	ldi	r27, 0x00	; 0
    866a:	42 e0       	ldi	r20, 0x02	; 2
    866c:	50 e0       	ldi	r21, 0x00	; 0
    866e:	0c 94 1d 43 	jmp	0x863a	; 0x863a <__eerd_blraw_m2560>

00008672 <__eeupd_block_m2560>:
    8672:	dc 01       	movw	r26, r24
    8674:	a4 0f       	add	r26, r20
    8676:	b5 1f       	adc	r27, r21
    8678:	41 50       	subi	r20, 0x01	; 1
    867a:	50 40       	sbci	r21, 0x00	; 0
    867c:	48 f0       	brcs	.+18     	; 0x8690 <__eeupd_block_m2560+0x1e>
    867e:	cb 01       	movw	r24, r22
    8680:	84 0f       	add	r24, r20
    8682:	95 1f       	adc	r25, r21
    8684:	2e 91       	ld	r18, -X
    8686:	0e 94 4a 43 	call	0x8694	; 0x8694 <__eeupd_r18_m2560>
    868a:	41 50       	subi	r20, 0x01	; 1
    868c:	50 40       	sbci	r21, 0x00	; 0
    868e:	d0 f7       	brcc	.-12     	; 0x8684 <__eeupd_block_m2560+0x12>
    8690:	08 95       	ret

00008692 <__eeupd_byte_m2560>:
    8692:	26 2f       	mov	r18, r22

00008694 <__eeupd_r18_m2560>:
    8694:	f9 99       	sbic	0x1f, 1	; 31
    8696:	fe cf       	rjmp	.-4      	; 0x8694 <__eeupd_r18_m2560>
    8698:	92 bd       	out	0x22, r25	; 34
    869a:	81 bd       	out	0x21, r24	; 33
    869c:	f8 9a       	sbi	0x1f, 0	; 31
    869e:	01 97       	sbiw	r24, 0x01	; 1
    86a0:	00 b4       	in	r0, 0x20	; 32
    86a2:	02 16       	cp	r0, r18
    86a4:	39 f0       	breq	.+14     	; 0x86b4 <__eeupd_r18_m2560+0x20>
    86a6:	1f ba       	out	0x1f, r1	; 31
    86a8:	20 bd       	out	0x20, r18	; 32
    86aa:	0f b6       	in	r0, 0x3f	; 63
    86ac:	f8 94       	cli
    86ae:	fa 9a       	sbi	0x1f, 2	; 31
    86b0:	f9 9a       	sbi	0x1f, 1	; 31
    86b2:	0f be       	out	0x3f, r0	; 63
    86b4:	08 95       	ret

000086b6 <__eeupd_word_m2560>:
    86b6:	01 96       	adiw	r24, 0x01	; 1
    86b8:	27 2f       	mov	r18, r23
    86ba:	0e 94 4a 43 	call	0x8694	; 0x8694 <__eeupd_r18_m2560>
    86be:	0c 94 49 43 	jmp	0x8692	; 0x8692 <__eeupd_byte_m2560>

000086c2 <__eewr_byte_m2560>:
    86c2:	26 2f       	mov	r18, r22

000086c4 <__eewr_r18_m2560>:
    86c4:	f9 99       	sbic	0x1f, 1	; 31
    86c6:	fe cf       	rjmp	.-4      	; 0x86c4 <__eewr_r18_m2560>
    86c8:	1f ba       	out	0x1f, r1	; 31
    86ca:	92 bd       	out	0x22, r25	; 34
    86cc:	81 bd       	out	0x21, r24	; 33
    86ce:	20 bd       	out	0x20, r18	; 32
    86d0:	0f b6       	in	r0, 0x3f	; 63
    86d2:	f8 94       	cli
    86d4:	fa 9a       	sbi	0x1f, 2	; 31
    86d6:	f9 9a       	sbi	0x1f, 1	; 31
    86d8:	0f be       	out	0x3f, r0	; 63
    86da:	01 96       	adiw	r24, 0x01	; 1
    86dc:	08 95       	ret

000086de <__eewr_word_m2560>:
    86de:	0e 94 61 43 	call	0x86c2	; 0x86c2 <__eewr_byte_m2560>
    86e2:	27 2f       	mov	r18, r23
    86e4:	0c 94 62 43 	jmp	0x86c4	; 0x86c4 <__eewr_r18_m2560>

000086e8 <_exit>:
    86e8:	ff cf       	rjmp	.-2      	; 0x86e8 <_exit>
