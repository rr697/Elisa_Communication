
Elisa3-avr-studio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800200  000099a0  00009a34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000099a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000006ef  0080021e  0080021e  00009a52  2**0
                  ALLOC
  3 .stab         00003780  00000000  00000000  00009a54  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f1b  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000238  00000000  00000000  0000e0ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00002129  00000000  00000000  0000e327  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005d10  00000000  00000000  00010450  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001242  00000000  00000000  00016160  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000072c3  00000000  00000000  000173a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000890  00000000  00000000  0001e668  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000018e0  00000000  00000000  0001eef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002557  00000000  00000000  000207d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000028a  00000000  00000000  00022d2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000128  00000000  00000000  00022fb9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__ctors_end>
       4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
       8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
       c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      10:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      14:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      18:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      1c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      20:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      24:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      28:	0c 94 40 12 	jmp	0x2480	; 0x2480 <__vector_10>
      2c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      30:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      34:	0c 94 74 12 	jmp	0x24e8	; 0x24e8 <__vector_13>
      38:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      3c:	0c 94 2c 1e 	jmp	0x3c58	; 0x3c58 <__vector_15>
      40:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      44:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      48:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      4c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      50:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      54:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      58:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      5c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      60:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      64:	0c 94 f0 1c 	jmp	0x39e0	; 0x39e0 <__vector_25>
      68:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      6c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      70:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      74:	0c 94 fe 1e 	jmp	0x3dfc	; 0x3dfc <__vector_29>
      78:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      7c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      80:	0c 94 4d 38 	jmp	0x709a	; 0x709a <__vector_32>
      84:	0c 94 63 38 	jmp	0x70c6	; 0x70c6 <__vector_33>
      88:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      8c:	0c 94 c0 37 	jmp	0x6f80	; 0x6f80 <__vector_35>
      90:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      94:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      98:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      9c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      a0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      a4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      a8:	0c 94 94 37 	jmp	0x6f28	; 0x6f28 <__vector_42>
      ac:	0c 94 aa 37 	jmp	0x6f54	; 0x6f54 <__vector_43>
      b0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      b4:	0c 94 fd 36 	jmp	0x6dfa	; 0x6dfa <__vector_45>
      b8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      bc:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      c0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      c4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      c8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      cc:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      d0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      d4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      d8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      dc:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      e0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      e4:	51 15       	cp	r21, r1
      e6:	35 15       	cp	r19, r5
      e8:	03 15       	cp	r16, r3
      ea:	ee 14       	cp	r14, r14
      ec:	c5 14       	cp	r12, r5
      ee:	b3 14       	cp	r11, r3
      f0:	8a 14       	cp	r8, r10
      f2:	6e 14       	cp	r6, r14
      f4:	35 14       	cp	r3, r5
      f6:	1d 14       	cp	r1, r13
      f8:	b6 13       	cpse	r27, r22
      fa:	b6 13       	cpse	r27, r22
      fc:	b6 13       	cpse	r27, r22
      fe:	b6 13       	cpse	r27, r22
     100:	b6 13       	cpse	r27, r22
     102:	b6 13       	cpse	r27, r22
     104:	62 14       	cp	r6, r2
     106:	12 14       	cp	r1, r2
     108:	b6 13       	cpse	r27, r22
     10a:	b6 13       	cpse	r27, r22
     10c:	b6 13       	cpse	r27, r22
     10e:	b6 13       	cpse	r27, r22
     110:	b6 13       	cpse	r27, r22
     112:	b6 13       	cpse	r27, r22
     114:	b6 13       	cpse	r27, r22
     116:	b6 13       	cpse	r27, r22
     118:	b6 13       	cpse	r27, r22
     11a:	b6 13       	cpse	r27, r22
     11c:	b6 13       	cpse	r27, r22
     11e:	b6 13       	cpse	r27, r22
     120:	35 14       	cp	r3, r5
     122:	03 15       	cp	r16, r3
     124:	ea 13       	cpse	r30, r26
     126:	dd 13       	cpse	r29, r29
     128:	b6 13       	cpse	r27, r22
     12a:	b6 13       	cpse	r27, r22
     12c:	b6 13       	cpse	r27, r22
     12e:	b6 13       	cpse	r27, r22
     130:	b6 13       	cpse	r27, r22
     132:	b6 13       	cpse	r27, r22
     134:	b6 13       	cpse	r27, r22
     136:	b6 13       	cpse	r27, r22
     138:	b6 13       	cpse	r27, r22
     13a:	b6 13       	cpse	r27, r22
     13c:	b6 13       	cpse	r27, r22
     13e:	b6 13       	cpse	r27, r22
     140:	c5 14       	cp	r12, r5
     142:	8a 14       	cp	r8, r10
     144:	b6 13       	cpse	r27, r22
     146:	b6 13       	cpse	r27, r22
     148:	51 15       	cp	r21, r1
     14a:	b3 14       	cp	r11, r3
     14c:	f6 13       	cpse	r31, r22
     14e:	08 4a       	sbci	r16, 0xA8	; 168
     150:	d7 3b       	cpi	r29, 0xB7	; 183
     152:	3b ce       	rjmp	.-906    	; 0xfffffdca <__eeprom_end+0xff7efdca>
     154:	01 6e       	ori	r16, 0xE1	; 225
     156:	84 bc       	out	0x24, r8	; 36
     158:	bf fd       	.word	0xfdbf	; ????
     15a:	c1 2f       	mov	r28, r17
     15c:	3d 6c       	ori	r19, 0xCD	; 205
     15e:	74 31       	cpi	r23, 0x14	; 20
     160:	9a bd       	out	0x2a, r25	; 42
     162:	56 83       	std	Z+6, r21	; 0x06
     164:	3d da       	rcall	.-2950   	; 0xfffff5e0 <__eeprom_end+0xff7ef5e0>
     166:	3d 00       	.word	0x003d	; ????
     168:	c7 7f       	andi	r28, 0xF7	; 247
     16a:	11 be       	out	0x31, r1	; 49
     16c:	d9 e4       	ldi	r29, 0x49	; 73
     16e:	bb 4c       	sbci	r27, 0xCB	; 203
     170:	3e 91       	ld	r19, -X
     172:	6b aa       	std	Y+51, r6	; 0x33
     174:	aa be       	out	0x3a, r10	; 58
     176:	00 00       	nop
     178:	00 80       	ld	r0, Z
     17a:	3f 05       	cpc	r19, r15
     17c:	a8 4c       	sbci	r26, 0xC8	; 200
     17e:	cd b2       	in	r12, 0x1d	; 29
     180:	d4 4e       	sbci	r29, 0xE4	; 228
     182:	b9 38       	cpi	r27, 0x89	; 137
     184:	36 a9       	ldd	r19, Z+54	; 0x36
     186:	02 0c       	add	r0, r2
     188:	50 b9       	out	0x00, r21	; 0
     18a:	91 86       	std	Z+9, r9	; 0x09
     18c:	88 08       	sbc	r8, r8
     18e:	3c a6       	std	Y+44, r3	; 0x2c
     190:	aa aa       	std	Y+50, r10	; 0x32
     192:	2a be       	out	0x3a, r2	; 58
     194:	00 00       	nop
     196:	00 80       	ld	r0, Z
     198:	3f 00       	.word	0x003f	; ????

0000019a <__ctors_end>:
     19a:	11 24       	eor	r1, r1
     19c:	1f be       	out	0x3f, r1	; 63
     19e:	cf ef       	ldi	r28, 0xFF	; 255
     1a0:	d1 e2       	ldi	r29, 0x21	; 33
     1a2:	de bf       	out	0x3e, r29	; 62
     1a4:	cd bf       	out	0x3d, r28	; 61
     1a6:	00 e0       	ldi	r16, 0x00	; 0
     1a8:	0c bf       	out	0x3c, r16	; 60

000001aa <__do_copy_data>:
     1aa:	12 e0       	ldi	r17, 0x02	; 2
     1ac:	a0 e0       	ldi	r26, 0x00	; 0
     1ae:	b2 e0       	ldi	r27, 0x02	; 2
     1b0:	e0 ea       	ldi	r30, 0xA0	; 160
     1b2:	f9 e9       	ldi	r31, 0x99	; 153
     1b4:	02 c0       	rjmp	.+4      	; 0x1ba <.do_copy_data_start>

000001b6 <.do_copy_data_loop>:
     1b6:	05 90       	lpm	r0, Z+
     1b8:	0d 92       	st	X+, r0

000001ba <.do_copy_data_start>:
     1ba:	ae 31       	cpi	r26, 0x1E	; 30
     1bc:	b1 07       	cpc	r27, r17
     1be:	d9 f7       	brne	.-10     	; 0x1b6 <.do_copy_data_loop>

000001c0 <__do_clear_bss>:
     1c0:	19 e0       	ldi	r17, 0x09	; 9
     1c2:	ae e1       	ldi	r26, 0x1E	; 30
     1c4:	b2 e0       	ldi	r27, 0x02	; 2
     1c6:	01 c0       	rjmp	.+2      	; 0x1ca <.do_clear_bss_start>

000001c8 <.do_clear_bss_loop>:
     1c8:	1d 92       	st	X+, r1

000001ca <.do_clear_bss_start>:
     1ca:	ad 30       	cpi	r26, 0x0D	; 13
     1cc:	b1 07       	cpc	r27, r17
     1ce:	e1 f7       	brne	.-8      	; 0x1c8 <.do_clear_bss_loop>
     1d0:	0e 94 ee 00 	call	0x1dc	; 0x1dc <main>
     1d4:	0c 94 cf 4c 	jmp	0x999e	; 0x999e <_exit>

000001d8 <__bad_interrupt>:
     1d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001dc <main>:
#include "nRF24L01.h"
#include "behaviors.h"
#include "sensors.h"
#include "irCommunication.h"

int main(void) {
     1dc:	2f 92       	push	r2
     1de:	3f 92       	push	r3
     1e0:	4f 92       	push	r4
     1e2:	5f 92       	push	r5
     1e4:	6f 92       	push	r6
     1e6:	7f 92       	push	r7
     1e8:	8f 92       	push	r8
     1ea:	9f 92       	push	r9
     1ec:	af 92       	push	r10
     1ee:	bf 92       	push	r11
     1f0:	cf 92       	push	r12
     1f2:	df 92       	push	r13
     1f4:	ef 92       	push	r14
     1f6:	ff 92       	push	r15
     1f8:	0f 93       	push	r16
     1fa:	1f 93       	push	r17
     1fc:	df 93       	push	r29
     1fe:	cf 93       	push	r28
     200:	00 d0       	rcall	.+0      	; 0x202 <main+0x26>
     202:	0f 92       	push	r0
     204:	0f 92       	push	r0
     206:	cd b7       	in	r28, 0x3d	; 61
     208:	de b7       	in	r29, 0x3e	; 62
	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
	unsigned char prevSelector=0;
	unsigned int i=0;
	unsigned int currRand=0, currRand2=0;

	initPeripherals();
     20a:	0e 94 cb 1d 	call	0x3b96	; 0x3b96 <initPeripherals>

	calibrateSensors();
     20e:	0e 94 ff 3d 	call	0x7bfe	; 0x7bfe <calibrateSensors>

	initBehaviors();
     212:	0e 94 79 38 	call	0x70f2	; 0x70f2 <initBehaviors>

	startTime = getTime100MicroSec();
     216:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <getTime100MicroSec>
     21a:	6b 01       	movw	r12, r22
     21c:	7c 01       	movw	r14, r24

	speedStepCounter = getTime100MicroSec();
     21e:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <getTime100MicroSec>
     222:	9b 01       	movw	r18, r22
     224:	ac 01       	movw	r20, r24
     226:	60 93 5e 04 	sts	0x045E, r22
     22a:	30 93 5f 04 	sts	0x045F, r19
     22e:	40 93 60 04 	sts	0x0460, r20
     232:	50 93 61 04 	sts	0x0461, r21
     236:	10 92 62 04 	sts	0x0462, r1
     23a:	10 92 63 04 	sts	0x0463, r1
     23e:	10 92 64 04 	sts	0x0464, r1
     242:	10 92 65 04 	sts	0x0465, r1
int main(void) {

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
	unsigned char prevSelector=0;
	unsigned int i=0;
	unsigned int currRand=0, currRand2=0;
     246:	aa 24       	eor	r10, r10
     248:	bb 24       	eor	r11, r11
#include "irCommunication.h"

int main(void) {

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
	unsigned char prevSelector=0;
     24a:	00 e0       	ldi	r16, 0x00	; 0
#include "sensors.h"
#include "irCommunication.h"

int main(void) {

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
     24c:	19 82       	std	Y+1, r1	; 0x01
     24e:	1a 82       	std	Y+2, r1	; 0x02
     250:	1b 82       	std	Y+3, r1	; 0x03
     252:	1c 82       	std	Y+4, r1	; 0x04
		computeAngle();

		// turn off the rgb leds after one half second in the "charger demo"
		if(currentSelector==7) {
			if((getTime100MicroSec()-turnOffLedsTime) > PAUSE_500_MSEC) {
				pwm_red = 255;
     254:	1f ef       	ldi	r17, 0xFF	; 255
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption

				switch(rgbState) {
					case 0:
						pwm_red = 255 - currRand;	
						rgbState = 1;
     256:	22 24       	eor	r2, r2
     258:	23 94       	inc	r2
	eeprom_update_block(calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
*/

	while(1) {

		currentSelector = getSelector();	// update selector position
     25a:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <getSelector>
     25e:	80 93 4a 04 	sts	0x044A, r24

		readAccelXYZ();						// update accelerometer values to compute the angle
     262:	0e 94 3f 3d 	call	0x7a7e	; 0x7a7e <readAccelXYZ>

		computeAngle();
     266:	0e 94 7b 42 	call	0x84f6	; 0x84f6 <computeAngle>

		// turn off the rgb leds after one half second in the "charger demo"
		if(currentSelector==7) {
     26a:	80 91 4a 04 	lds	r24, 0x044A
     26e:	87 30       	cpi	r24, 0x07	; 7
     270:	09 f4       	brne	.+2      	; 0x274 <main+0x98>
     272:	59 c2       	rjmp	.+1202   	; 0x726 <main+0x54a>
				pwm_green = 255;
				pwm_blue = 255;			
			}
		}

		endTime = getTime100MicroSec();
     274:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <getTime100MicroSec>
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
     278:	6c 19       	sub	r22, r12
     27a:	7d 09       	sbc	r23, r13
     27c:	8e 09       	sbc	r24, r14
     27e:	9f 09       	sbc	r25, r15
     280:	6e 31       	cpi	r22, 0x1E	; 30
     282:	4b e4       	ldi	r20, 0x4B	; 75
     284:	74 07       	cpc	r23, r20
     286:	40 e0       	ldi	r20, 0x00	; 0
     288:	84 07       	cpc	r24, r20
     28a:	40 e0       	ldi	r20, 0x00	; 0
     28c:	94 07       	cpc	r25, r20
     28e:	08 f0       	brcs	.+2      	; 0x292 <main+0xb6>
     290:	36 c2       	rjmp	.+1132   	; 0x6fe <main+0x522>
			startTime = getTime100MicroSec();
		}

		
		//if(calibrateOdomFlag==0) {
			handleIRRemoteCommands();
     292:	0e 94 a4 13 	call	0x2748	; 0x2748 <handleIRRemoteCommands>
		//}


		//if(calibrateOdomFlag==0) {
			handleRFCommands();
     296:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <handleRFCommands>
		//}


		if(calibrateOdomFlag==0) {
     29a:	80 91 23 05 	lds	r24, 0x0523
     29e:	88 23       	and	r24, r24
     2a0:	09 f4       	brne	.+2      	; 0x2a4 <main+0xc8>
     2a2:	fd c0       	rjmp	.+506    	; 0x49e <main+0x2c2>

		//if(currentSelector!=6 && currentSelector!=15) {
		//	usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		//}

		switch(currentSelector) {
     2a4:	80 91 4a 04 	lds	r24, 0x044A
     2a8:	87 30       	cpi	r24, 0x07	; 7
     2aa:	09 f4       	brne	.+2      	; 0x2ae <main+0xd2>
     2ac:	e8 c1       	rjmp	.+976    	; 0x67e <main+0x4a2>
     2ae:	88 30       	cpi	r24, 0x08	; 8
     2b0:	08 f0       	brcs	.+2      	; 0x2b4 <main+0xd8>
     2b2:	61 c0       	rjmp	.+194    	; 0x376 <main+0x19a>
     2b4:	83 30       	cpi	r24, 0x03	; 3
     2b6:	09 f4       	brne	.+2      	; 0x2ba <main+0xde>
     2b8:	92 c2       	rjmp	.+1316   	; 0x7de <main+0x602>
     2ba:	84 30       	cpi	r24, 0x04	; 4
     2bc:	08 f0       	brcs	.+2      	; 0x2c0 <main+0xe4>
     2be:	4d c2       	rjmp	.+1178   	; 0x75a <main+0x57e>
     2c0:	81 30       	cpi	r24, 0x01	; 1
     2c2:	09 f4       	brne	.+2      	; 0x2c6 <main+0xea>
     2c4:	34 c3       	rjmp	.+1640   	; 0x92e <main+0x752>
     2c6:	82 30       	cpi	r24, 0x02	; 2
     2c8:	08 f0       	brcs	.+2      	; 0x2cc <main+0xf0>
     2ca:	8b c2       	rjmp	.+1302   	; 0x7e2 <main+0x606>
    
			case 0:	// motors in direct power control (no speed control)
					handleMotorsWithNoController();
     2cc:	0e 94 a1 25 	call	0x4b42	; 0x4b42 <handleMotorsWithNoController>
     2d0:	80 91 4a 04 	lds	r24, 0x044A
					//usart0Transmit(currentOsccal,1);
					break;

		}

		if(currentSelector!=0) {
     2d4:	88 23       	and	r24, r24
     2d6:	09 f0       	breq	.+2      	; 0x2da <main+0xfe>
     2d8:	dd c0       	rjmp	.+442    	; 0x494 <main+0x2b8>
     2da:	80 e0       	ldi	r24, 0x00	; 0
			handleMotorsWithSpeedController();  
		}

		if(prevSelector != currentSelector) {	// in case the selector is changed, reset the robot state
     2dc:	08 17       	cp	r16, r24
     2de:	09 f4       	brne	.+2      	; 0x2e2 <main+0x106>
     2e0:	bc cf       	rjmp	.-136    	; 0x25a <main+0x7e>
			disableObstacleAvoidance();
     2e2:	0e 94 c0 3a 	call	0x7580	; 0x7580 <disableObstacleAvoidance>
			disableCliffAvoidance();
     2e6:	0e 94 c7 3a 	call	0x758e	; 0x758e <disableCliffAvoidance>
			GREEN_LED0_OFF;
     2ea:	80 91 0b 01 	lds	r24, 0x010B
     2ee:	81 60       	ori	r24, 0x01	; 1
     2f0:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED1_OFF;
     2f4:	80 91 0b 01 	lds	r24, 0x010B
     2f8:	82 60       	ori	r24, 0x02	; 2
     2fa:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED2_OFF;
     2fe:	80 91 0b 01 	lds	r24, 0x010B
     302:	84 60       	ori	r24, 0x04	; 4
     304:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED3_OFF;
     308:	a3 9a       	sbi	0x14, 3	; 20
			GREEN_LED4_OFF;
     30a:	80 91 0b 01 	lds	r24, 0x010B
     30e:	80 61       	ori	r24, 0x10	; 16
     310:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED5_OFF;
     314:	80 91 0b 01 	lds	r24, 0x010B
     318:	80 62       	ori	r24, 0x20	; 32
     31a:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED6_OFF;
     31e:	80 91 0b 01 	lds	r24, 0x010B
     322:	80 64       	ori	r24, 0x40	; 64
     324:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED7_OFF;
     328:	80 91 0b 01 	lds	r24, 0x010B
     32c:	80 68       	ori	r24, 0x80	; 128
     32e:	80 93 0b 01 	sts	0x010B, r24
			pwm_red = 255;
     332:	10 93 0c 02 	sts	0x020C, r17
			pwm_green = 255;
     336:	10 93 0d 02 	sts	0x020D, r17
			pwm_blue = 255;
     33a:	10 93 0e 02 	sts	0x020E, r17
			updateRedLed(pwm_red);
     33e:	8f ef       	ldi	r24, 0xFF	; 255
     340:	0e 94 07 3b 	call	0x760e	; 0x760e <updateRedLed>
			updateGreenLed(pwm_green);
     344:	80 91 0d 02 	lds	r24, 0x020D
     348:	0e 94 1b 3b 	call	0x7636	; 0x7636 <updateGreenLed>
			updateBlueLed(pwm_blue);
     34c:	80 91 0e 02 	lds	r24, 0x020E
     350:	0e 94 2f 3b 	call	0x765e	; 0x765e <updateBlueLed>
			setRightSpeed(0);
     354:	80 e0       	ldi	r24, 0x00	; 0
     356:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <setRightSpeed>
			setLeftSpeed(0);
     35a:	80 e0       	ldi	r24, 0x00	; 0
     35c:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <setLeftSpeed>
			rgbState = 0;
     360:	10 92 1a 03 	sts	0x031A, r1
			calibrationWritten = 0;
     364:	10 92 67 04 	sts	0x0467, r1
			demoState = 0;
     368:	10 92 4e 04 	sts	0x044E, r1

			irCommState = 0;
     36c:	10 92 c4 04 	sts	0x04C4, r1
     370:	00 91 4a 04 	lds	r16, 0x044A
     374:	72 cf       	rjmp	.-284    	; 0x25a <main+0x7e>

		//if(currentSelector!=6 && currentSelector!=15) {
		//	usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		//}

		switch(currentSelector) {
     376:	8b 30       	cpi	r24, 0x0B	; 11
     378:	09 f4       	brne	.+2      	; 0x37c <main+0x1a0>
     37a:	c0 c2       	rjmp	.+1408   	; 0x8fc <main+0x720>
     37c:	8c 30       	cpi	r24, 0x0C	; 12
     37e:	08 f0       	brcs	.+2      	; 0x382 <main+0x1a6>
     380:	18 c2       	rjmp	.+1072   	; 0x7b2 <main+0x5d6>
     382:	89 30       	cpi	r24, 0x09	; 9
     384:	09 f4       	brne	.+2      	; 0x388 <main+0x1ac>
     386:	3e c2       	rjmp	.+1148   	; 0x804 <main+0x628>
     388:	8a 30       	cpi	r24, 0x0A	; 10
     38a:	08 f4       	brcc	.+2      	; 0x38e <main+0x1b2>
     38c:	2f c2       	rjmp	.+1118   	; 0x7ec <main+0x610>
							break;
					}
					break;

			case 10:// obstacle avoidance with random colors; 4 seconds motion and 10 seconds pause					
					switch(demoState) {
     38e:	80 91 4e 04 	lds	r24, 0x044E
     392:	81 30       	cpi	r24, 0x01	; 1
     394:	09 f4       	brne	.+2      	; 0x398 <main+0x1bc>
     396:	79 c7       	rjmp	.+3826   	; 0x128a <main+0x10ae>
     398:	81 30       	cpi	r24, 0x01	; 1
     39a:	08 f0       	brcs	.+2      	; 0x39e <main+0x1c2>
     39c:	1d c4       	rjmp	.+2106   	; 0xbd8 <main+0x9fc>
						case 0: // get first clock tick and start moving the robot with obstacle avoidance enabled
							demoStartTime = getTime100MicroSec();
     39e:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <getTime100MicroSec>
     3a2:	60 93 52 04 	sts	0x0452, r22
     3a6:	70 93 53 04 	sts	0x0453, r23
     3aa:	80 93 54 04 	sts	0x0454, r24
     3ae:	90 93 55 04 	sts	0x0455, r25
							demoEndTime = getTime100MicroSec();							
     3b2:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <getTime100MicroSec>
     3b6:	60 93 5a 04 	sts	0x045A, r22
     3ba:	70 93 5b 04 	sts	0x045B, r23
     3be:	80 93 5c 04 	sts	0x045C, r24
     3c2:	90 93 5d 04 	sts	0x045D, r25
							demoStartTime2 = getTime100MicroSec();
     3c6:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <getTime100MicroSec>
     3ca:	60 93 56 04 	sts	0x0456, r22
     3ce:	70 93 57 04 	sts	0x0457, r23
     3d2:	80 93 58 04 	sts	0x0458, r24
     3d6:	90 93 59 04 	sts	0x0459, r25
							enableObstacleAvoidance();
     3da:	0e 94 bc 3a 	call	0x7578	; 0x7578 <enableObstacleAvoidance>
							setLeftSpeed(20);
     3de:	84 e1       	ldi	r24, 0x14	; 20
     3e0:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <setLeftSpeed>
							setRightSpeed(20);
     3e4:	84 e1       	ldi	r24, 0x14	; 20
     3e6:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <setRightSpeed>
							demoState = 1;
     3ea:	20 92 4e 04 	sts	0x044E, r2
								demoState = 1;							
							}
							break;
					}	
					
					switch(rgbLedState) {
     3ee:	80 91 69 04 	lds	r24, 0x0469
     3f2:	81 30       	cpi	r24, 0x01	; 1
     3f4:	09 f4       	brne	.+2      	; 0x3f8 <main+0x21c>
     3f6:	23 c4       	rjmp	.+2118   	; 0xc3e <main+0xa62>
     3f8:	81 30       	cpi	r24, 0x01	; 1
     3fa:	08 f0       	brcs	.+2      	; 0x3fe <main+0x222>
     3fc:	b2 c3       	rjmp	.+1892   	; 0xb62 <main+0x986>
						case 0:							
							pwm_red = 255;
     3fe:	10 93 0c 02 	sts	0x020C, r17
							pwm_green = 255;
     402:	10 93 0d 02 	sts	0x020D, r17
							pwm_blue = 255;
     406:	10 93 0e 02 	sts	0x020E, r17
							if((getTime100MicroSec()-demoEndTime) >= (PAUSE_100_MSEC)) {
     40a:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <getTime100MicroSec>
     40e:	9b 01       	movw	r18, r22
     410:	ac 01       	movw	r20, r24
     412:	80 91 5a 04 	lds	r24, 0x045A
     416:	90 91 5b 04 	lds	r25, 0x045B
     41a:	a0 91 5c 04 	lds	r26, 0x045C
     41e:	b0 91 5d 04 	lds	r27, 0x045D
     422:	28 1b       	sub	r18, r24
     424:	39 0b       	sbc	r19, r25
     426:	4a 0b       	sbc	r20, r26
     428:	5b 0b       	sbc	r21, r27
     42a:	21 3c       	cpi	r18, 0xC1	; 193
     42c:	e3 e0       	ldi	r30, 0x03	; 3
     42e:	3e 07       	cpc	r19, r30
     430:	e0 e0       	ldi	r30, 0x00	; 0
     432:	4e 07       	cpc	r20, r30
     434:	e0 e0       	ldi	r30, 0x00	; 0
     436:	5e 07       	cpc	r21, r30
     438:	10 f0       	brcs	.+4      	; 0x43e <main+0x262>
     43a:	0c 94 59 0b 	jmp	0x16b2	; 0x16b2 <main+0x14d6>
									greenLedState = 0;
								}
								setGreenLed(greenLedState, 1);
								demoEndTime = getTime100MicroSec();											
							}
							if((getTime100MicroSec()-demoStartTime2) >= (PAUSE_2_SEC)) {
     43e:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <getTime100MicroSec>
     442:	9b 01       	movw	r18, r22
     444:	ac 01       	movw	r20, r24
     446:	80 91 56 04 	lds	r24, 0x0456
     44a:	90 91 57 04 	lds	r25, 0x0457
     44e:	a0 91 58 04 	lds	r26, 0x0458
     452:	b0 91 59 04 	lds	r27, 0x0459
     456:	28 1b       	sub	r18, r24
     458:	39 0b       	sbc	r19, r25
     45a:	4a 0b       	sbc	r20, r26
     45c:	5b 0b       	sbc	r21, r27
     45e:	2e 31       	cpi	r18, 0x1E	; 30
     460:	fb e4       	ldi	r31, 0x4B	; 75
     462:	3f 07       	cpc	r19, r31
     464:	f0 e0       	ldi	r31, 0x00	; 0
     466:	4f 07       	cpc	r20, r31
     468:	f0 e0       	ldi	r31, 0x00	; 0
     46a:	5f 07       	cpc	r21, r31
     46c:	10 f0       	brcs	.+4      	; 0x472 <main+0x296>
     46e:	0c 94 4b 0b 	jmp	0x1696	; 0x1696 <main+0x14ba>
								rgbLedState = 1;
								demoStartTime2 = getTime100MicroSec();
							}
							updateRedLed(pwm_red);
     472:	80 91 0c 02 	lds	r24, 0x020C
     476:	0e 94 07 3b 	call	0x760e	; 0x760e <updateRedLed>
							updateGreenLed(pwm_green);
     47a:	80 91 0d 02 	lds	r24, 0x020D
     47e:	0e 94 1b 3b 	call	0x7636	; 0x7636 <updateGreenLed>
							updateBlueLed(pwm_blue);
     482:	80 91 0e 02 	lds	r24, 0x020E
     486:	0e 94 2f 3b 	call	0x765e	; 0x765e <updateBlueLed>
     48a:	80 91 4a 04 	lds	r24, 0x044A
					//usart0Transmit(currentOsccal,1);
					break;

		}

		if(currentSelector!=0) {
     48e:	88 23       	and	r24, r24
     490:	09 f4       	brne	.+2      	; 0x494 <main+0x2b8>
     492:	23 cf       	rjmp	.-442    	; 0x2da <main+0xfe>
			handleMotorsWithSpeedController();  
     494:	0e 94 4b 32 	call	0x6496	; 0x6496 <handleMotorsWithSpeedController>
     498:	80 91 4a 04 	lds	r24, 0x044A
     49c:	1f cf       	rjmp	.-450    	; 0x2dc <main+0x100>
			handleRFCommands();
		//}


		if(calibrateOdomFlag==0) {
			if((getTime100MicroSec()-speedStepCounter) >= SPEED_STEP_DELAY) {
     49e:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <getTime100MicroSec>
     4a2:	9b 01       	movw	r18, r22
     4a4:	ac 01       	movw	r20, r24
     4a6:	60 e0       	ldi	r22, 0x00	; 0
     4a8:	70 e0       	ldi	r23, 0x00	; 0
     4aa:	cb 01       	movw	r24, r22
     4ac:	f0 91 5e 04 	lds	r31, 0x045E
     4b0:	e0 91 5f 04 	lds	r30, 0x045F
     4b4:	80 90 60 04 	lds	r8, 0x0460
     4b8:	40 90 61 04 	lds	r4, 0x0461
     4bc:	30 90 62 04 	lds	r3, 0x0462
     4c0:	50 90 63 04 	lds	r5, 0x0463
     4c4:	60 90 64 04 	lds	r6, 0x0464
     4c8:	70 90 65 04 	lds	r7, 0x0465
     4cc:	b2 2f       	mov	r27, r18
     4ce:	bf 1b       	sub	r27, r31
     4d0:	a1 e0       	ldi	r26, 0x01	; 1
     4d2:	2b 17       	cp	r18, r27
     4d4:	08 f0       	brcs	.+2      	; 0x4d8 <main+0x2fc>
     4d6:	a0 e0       	ldi	r26, 0x00	; 0
     4d8:	f3 2f       	mov	r31, r19
     4da:	fe 1b       	sub	r31, r30
     4dc:	ef 2f       	mov	r30, r31
     4de:	f1 e0       	ldi	r31, 0x01	; 1
     4e0:	3e 17       	cp	r19, r30
     4e2:	08 f0       	brcs	.+2      	; 0x4e6 <main+0x30a>
     4e4:	f0 e0       	ldi	r31, 0x00	; 0
     4e6:	9e 2e       	mov	r9, r30
     4e8:	9a 1a       	sub	r9, r26
     4ea:	a9 2d       	mov	r26, r9
     4ec:	99 24       	eor	r9, r9
     4ee:	93 94       	inc	r9
     4f0:	ea 17       	cp	r30, r26
     4f2:	08 f0       	brcs	.+2      	; 0x4f6 <main+0x31a>
     4f4:	99 24       	eor	r9, r9
     4f6:	f9 29       	or	r31, r9
     4f8:	e4 2f       	mov	r30, r20
     4fa:	e8 19       	sub	r30, r8
     4fc:	8e 2e       	mov	r8, r30
     4fe:	e1 e0       	ldi	r30, 0x01	; 1
     500:	48 15       	cp	r20, r8
     502:	08 f0       	brcs	.+2      	; 0x506 <main+0x32a>
     504:	e0 e0       	ldi	r30, 0x00	; 0
     506:	98 2c       	mov	r9, r8
     508:	9f 1a       	sub	r9, r31
     50a:	f1 e0       	ldi	r31, 0x01	; 1
     50c:	89 14       	cp	r8, r9
     50e:	08 f0       	brcs	.+2      	; 0x512 <main+0x336>
     510:	f0 e0       	ldi	r31, 0x00	; 0
     512:	ef 2b       	or	r30, r31
     514:	f5 2f       	mov	r31, r21
     516:	f4 19       	sub	r31, r4
     518:	4f 2e       	mov	r4, r31
     51a:	f1 e0       	ldi	r31, 0x01	; 1
     51c:	54 15       	cp	r21, r4
     51e:	08 f0       	brcs	.+2      	; 0x522 <main+0x346>
     520:	f0 e0       	ldi	r31, 0x00	; 0
     522:	84 2c       	mov	r8, r4
     524:	8e 1a       	sub	r8, r30
     526:	e1 e0       	ldi	r30, 0x01	; 1
     528:	48 14       	cp	r4, r8
     52a:	08 f0       	brcs	.+2      	; 0x52e <main+0x352>
     52c:	e0 e0       	ldi	r30, 0x00	; 0
     52e:	fe 2b       	or	r31, r30
     530:	31 94       	neg	r3
     532:	e1 e0       	ldi	r30, 0x01	; 1
     534:	63 15       	cp	r22, r3
     536:	08 f0       	brcs	.+2      	; 0x53a <main+0x35e>
     538:	e0 e0       	ldi	r30, 0x00	; 0
     53a:	43 2c       	mov	r4, r3
     53c:	4f 1a       	sub	r4, r31
     53e:	f1 e0       	ldi	r31, 0x01	; 1
     540:	34 14       	cp	r3, r4
     542:	08 f0       	brcs	.+2      	; 0x546 <main+0x36a>
     544:	f0 e0       	ldi	r31, 0x00	; 0
     546:	ef 2b       	or	r30, r31
     548:	51 94       	neg	r5
     54a:	f1 e0       	ldi	r31, 0x01	; 1
     54c:	75 15       	cp	r23, r5
     54e:	08 f0       	brcs	.+2      	; 0x552 <main+0x376>
     550:	f0 e0       	ldi	r31, 0x00	; 0
     552:	35 2c       	mov	r3, r5
     554:	3e 1a       	sub	r3, r30
     556:	e1 e0       	ldi	r30, 0x01	; 1
     558:	53 14       	cp	r5, r3
     55a:	08 f0       	brcs	.+2      	; 0x55e <main+0x382>
     55c:	e0 e0       	ldi	r30, 0x00	; 0
     55e:	fe 2b       	or	r31, r30
     560:	61 94       	neg	r6
     562:	e1 e0       	ldi	r30, 0x01	; 1
     564:	86 15       	cp	r24, r6
     566:	08 f0       	brcs	.+2      	; 0x56a <main+0x38e>
     568:	e0 e0       	ldi	r30, 0x00	; 0
     56a:	96 2d       	mov	r25, r6
     56c:	9f 1b       	sub	r25, r31
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	69 16       	cp	r6, r25
     572:	08 f0       	brcs	.+2      	; 0x576 <main+0x39a>
     574:	80 e0       	ldi	r24, 0x00	; 0
     576:	e8 2b       	or	r30, r24
     578:	71 94       	neg	r7
     57a:	7e 16       	cp	r7, r30
     57c:	91 f4       	brne	.+36     	; 0x5a2 <main+0x3c6>
     57e:	99 23       	and	r25, r25
     580:	81 f4       	brne	.+32     	; 0x5a2 <main+0x3c6>
     582:	33 20       	and	r3, r3
     584:	71 f4       	brne	.+28     	; 0x5a2 <main+0x3c6>
     586:	44 20       	and	r4, r4
     588:	61 f4       	brne	.+24     	; 0x5a2 <main+0x3c6>
     58a:	88 20       	and	r8, r8
     58c:	51 f4       	brne	.+20     	; 0x5a2 <main+0x3c6>
     58e:	99 20       	and	r9, r9
     590:	41 f4       	brne	.+16     	; 0x5a2 <main+0x3c6>
     592:	a2 30       	cpi	r26, 0x02	; 2
     594:	30 f4       	brcc	.+12     	; 0x5a2 <main+0x3c6>
     596:	a1 30       	cpi	r26, 0x01	; 1
     598:	09 f0       	breq	.+2      	; 0x59c <main+0x3c0>
     59a:	84 ce       	rjmp	.-760    	; 0x2a4 <main+0xc8>
     59c:	b0 39       	cpi	r27, 0x90	; 144
     59e:	08 f4       	brcc	.+2      	; 0x5a2 <main+0x3c6>
     5a0:	81 ce       	rjmp	.-766    	; 0x2a4 <main+0xc8>
				speedStepCounter = getTime100MicroSec();
     5a2:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <getTime100MicroSec>
     5a6:	9b 01       	movw	r18, r22
     5a8:	ac 01       	movw	r20, r24
     5aa:	60 93 5e 04 	sts	0x045E, r22
     5ae:	30 93 5f 04 	sts	0x045F, r19
     5b2:	40 93 60 04 	sts	0x0460, r20
     5b6:	50 93 61 04 	sts	0x0461, r21
     5ba:	10 92 62 04 	sts	0x0462, r1
     5be:	10 92 63 04 	sts	0x0463, r1
     5c2:	10 92 64 04 	sts	0x0464, r1
     5c6:	10 92 65 04 	sts	0x0465, r1

				if(softAccEnabled) {
     5ca:	80 91 66 04 	lds	r24, 0x0466
     5ce:	88 23       	and	r24, r24
     5d0:	09 f4       	brne	.+2      	; 0x5d4 <main+0x3f8>
     5d2:	cb c1       	rjmp	.+918    	; 0x96a <main+0x78e>
					if(pwm_right_desired == 0) {
     5d4:	80 91 f9 02 	lds	r24, 0x02F9
     5d8:	90 91 fa 02 	lds	r25, 0x02FA
     5dc:	00 97       	sbiw	r24, 0x00	; 0
     5de:	09 f4       	brne	.+2      	; 0x5e2 <main+0x406>
     5e0:	69 c2       	rjmp	.+1234   	; 0xab4 <main+0x8d8>
						pwm_intermediate_right_desired = 0;
					} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
     5e2:	20 91 fd 02 	lds	r18, 0x02FD
     5e6:	30 91 fe 02 	lds	r19, 0x02FE
     5ea:	28 9f       	mul	r18, r24
     5ec:	a0 01       	movw	r20, r0
     5ee:	29 9f       	mul	r18, r25
     5f0:	50 0d       	add	r21, r0
     5f2:	38 9f       	mul	r19, r24
     5f4:	50 0d       	add	r21, r0
     5f6:	11 24       	eor	r1, r1
     5f8:	57 fd       	sbrc	r21, 7
     5fa:	5c c2       	rjmp	.+1208   	; 0xab4 <main+0x8d8>
						pwm_intermediate_right_desired = 0;
					} else if(pwm_right_desired > pwm_intermediate_right_desired) {
     5fc:	28 17       	cp	r18, r24
     5fe:	39 07       	cpc	r19, r25
     600:	14 f0       	brlt	.+4      	; 0x606 <main+0x42a>
     602:	0c 94 0b 0b 	jmp	0x1616	; 0x1616 <main+0x143a>
						pwm_intermediate_right_desired += speedStep;
     606:	40 91 17 02 	lds	r20, 0x0217
     60a:	24 0f       	add	r18, r20
     60c:	31 1d       	adc	r19, r1
     60e:	30 93 fe 02 	sts	0x02FE, r19
     612:	20 93 fd 02 	sts	0x02FD, r18
						if(pwm_intermediate_right_desired > pwm_right_desired) {
     616:	82 17       	cp	r24, r18
     618:	93 07       	cpc	r25, r19
     61a:	24 f4       	brge	.+8      	; 0x624 <main+0x448>
							pwm_intermediate_right_desired = pwm_right_desired;
						}
					} else if(pwm_right_desired < pwm_intermediate_right_desired) {
						pwm_intermediate_right_desired -= speedStep;
						if(pwm_intermediate_right_desired < pwm_right_desired) {
							pwm_intermediate_right_desired = pwm_right_desired;
     61c:	90 93 fe 02 	sts	0x02FE, r25
     620:	80 93 fd 02 	sts	0x02FD, r24
						}					
					}
	
					if(pwm_left_desired == 0) {
     624:	80 91 fb 02 	lds	r24, 0x02FB
     628:	90 91 fc 02 	lds	r25, 0x02FC
     62c:	00 97       	sbiw	r24, 0x00	; 0
     62e:	09 f4       	brne	.+2      	; 0x632 <main+0x456>
     630:	3c c2       	rjmp	.+1144   	; 0xaaa <main+0x8ce>
						pwm_intermediate_left_desired = 0;
					} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
     632:	20 91 ff 02 	lds	r18, 0x02FF
     636:	30 91 00 03 	lds	r19, 0x0300
     63a:	28 9f       	mul	r18, r24
     63c:	a0 01       	movw	r20, r0
     63e:	29 9f       	mul	r18, r25
     640:	50 0d       	add	r21, r0
     642:	38 9f       	mul	r19, r24
     644:	50 0d       	add	r21, r0
     646:	11 24       	eor	r1, r1
     648:	57 fd       	sbrc	r21, 7
     64a:	2f c2       	rjmp	.+1118   	; 0xaaa <main+0x8ce>
						pwm_intermediate_left_desired = 0;
					} else if(pwm_left_desired > pwm_intermediate_left_desired) {
     64c:	28 17       	cp	r18, r24
     64e:	39 07       	cpc	r19, r25
     650:	0c f0       	brlt	.+2      	; 0x654 <main+0x478>
     652:	f4 c7       	rjmp	.+4072   	; 0x163c <main+0x1460>
						pwm_intermediate_left_desired += speedStep;
     654:	40 91 17 02 	lds	r20, 0x0217
     658:	24 0f       	add	r18, r20
     65a:	31 1d       	adc	r19, r1
     65c:	30 93 00 03 	sts	0x0300, r19
     660:	20 93 ff 02 	sts	0x02FF, r18
						if(pwm_intermediate_left_desired > pwm_left_desired) {
     664:	82 17       	cp	r24, r18
     666:	93 07       	cpc	r25, r19
     668:	0c f0       	brlt	.+2      	; 0x66c <main+0x490>
     66a:	1c ce       	rjmp	.-968    	; 0x2a4 <main+0xc8>
							pwm_intermediate_left_desired = pwm_left_desired;
						}					
					}
				} else {
					pwm_intermediate_right_desired = pwm_right_desired;
					pwm_intermediate_left_desired = pwm_left_desired;
     66c:	90 93 00 03 	sts	0x0300, r25
     670:	80 93 ff 02 	sts	0x02FF, r24

		//if(currentSelector!=6 && currentSelector!=15) {
		//	usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		//}

		switch(currentSelector) {
     674:	80 91 4a 04 	lds	r24, 0x044A
     678:	87 30       	cpi	r24, 0x07	; 7
     67a:	09 f0       	breq	.+2      	; 0x67e <main+0x4a2>
     67c:	18 ce       	rjmp	.-976    	; 0x2ae <main+0xd2>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
     67e:	80 91 4e 04 	lds	r24, 0x044E
     682:	82 30       	cpi	r24, 0x02	; 2
     684:	09 f4       	brne	.+2      	; 0x688 <main+0x4ac>
     686:	15 c7       	rjmp	.+3626   	; 0x14b2 <main+0x12d6>
     688:	83 30       	cpi	r24, 0x03	; 3
     68a:	08 f0       	brcs	.+2      	; 0x68e <main+0x4b2>
     68c:	18 c2       	rjmp	.+1072   	; 0xabe <main+0x8e2>
     68e:	88 23       	and	r24, r24
     690:	09 f0       	breq	.+2      	; 0x694 <main+0x4b8>
     692:	32 c6       	rjmp	.+3172   	; 0x12f8 <main+0x111c>
						case 0:	// move around
							turnOffGreenLeds();
     694:	0e 94 e0 3b 	call	0x77c0	; 0x77c0 <turnOffGreenLeds>
							GREEN_LED0_ON;
     698:	80 91 0b 01 	lds	r24, 0x010B
     69c:	8e 7f       	andi	r24, 0xFE	; 254
     69e:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED1_ON;
							lineFound = 0;
     6a2:	10 92 4f 04 	sts	0x044F, r1
							enableObstacleAvoidance();
     6a6:	0e 94 bc 3a 	call	0x7578	; 0x7578 <enableObstacleAvoidance>
							setRightSpeed(20);
     6aa:	84 e1       	ldi	r24, 0x14	; 20
     6ac:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <setRightSpeed>
							setLeftSpeed(20);
     6b0:	84 e1       	ldi	r24, 0x14	; 20
     6b2:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <setLeftSpeed>
							demoEndTime = getTime100MicroSec();
     6b6:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <getTime100MicroSec>
     6ba:	9b 01       	movw	r18, r22
     6bc:	ac 01       	movw	r20, r24
     6be:	60 93 5a 04 	sts	0x045A, r22
     6c2:	70 93 5b 04 	sts	0x045B, r23
     6c6:	80 93 5c 04 	sts	0x045C, r24
     6ca:	90 93 5d 04 	sts	0x045D, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {
     6ce:	80 91 52 04 	lds	r24, 0x0452
     6d2:	90 91 53 04 	lds	r25, 0x0453
     6d6:	a0 91 54 04 	lds	r26, 0x0454
     6da:	b0 91 55 04 	lds	r27, 0x0455
     6de:	28 1b       	sub	r18, r24
     6e0:	39 0b       	sbc	r19, r25
     6e2:	4a 0b       	sbc	r20, r26
     6e4:	5b 0b       	sbc	r21, r27
     6e6:	23 33       	cpi	r18, 0x33	; 51
     6e8:	6f ee       	ldi	r22, 0xEF	; 239
     6ea:	36 07       	cpc	r19, r22
     6ec:	62 e0       	ldi	r22, 0x02	; 2
     6ee:	46 07       	cpc	r20, r22
     6f0:	60 e0       	ldi	r22, 0x00	; 0
     6f2:	56 07       	cpc	r21, r22
     6f4:	08 f4       	brcc	.+2      	; 0x6f8 <main+0x51c>
     6f6:	bd ce       	rjmp	.-646    	; 0x472 <main+0x296>

								if(proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {
									outOfLine++;
									if(outOfLine > 250) {
										chargeContact = 0;
										demoState = 1;
     6f8:	20 92 4e 04 	sts	0x044E, r2
										break;
     6fc:	ba ce       	rjmp	.-652    	; 0x472 <main+0x296>
			}
		}

		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
     6fe:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <readBatteryLevel>
             		
			if(currentSelector==4 || currentSelector==5) {
     702:	80 91 4a 04 	lds	r24, 0x044A
     706:	98 2f       	mov	r25, r24
     708:	94 50       	subi	r25, 0x04	; 4
     70a:	92 30       	cpi	r25, 0x02	; 2
     70c:	08 f4       	brcc	.+2      	; 0x710 <main+0x534>
     70e:	3a c1       	rjmp	.+628    	; 0x984 <main+0x7a8>
					}
				} else {	// do nothing => all 3 leds turned on

				}

			} else if(currentSelector==7) {
     710:	87 30       	cpi	r24, 0x07	; 7
     712:	09 f4       	brne	.+2      	; 0x716 <main+0x53a>
     714:	62 c1       	rjmp	.+708    	; 0x9da <main+0x7fe>

				}

				turnOffLedsTime = getTime100MicroSec();

			} else if(currentSelector==6) {
     716:	86 30       	cpi	r24, 0x06	; 6
     718:	09 f4       	brne	.+2      	; 0x71c <main+0x540>
     71a:	0e c1       	rjmp	.+540    	; 0x938 <main+0x75c>
						rgbState = 0;
					}
				}
			}

			startTime = getTime100MicroSec();
     71c:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <getTime100MicroSec>
     720:	6b 01       	movw	r12, r22
     722:	7c 01       	movw	r14, r24
     724:	b6 cd       	rjmp	.-1172   	; 0x292 <main+0xb6>

		computeAngle();

		// turn off the rgb leds after one half second in the "charger demo"
		if(currentSelector==7) {
			if((getTime100MicroSec()-turnOffLedsTime) > PAUSE_500_MSEC) {
     726:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <getTime100MicroSec>
     72a:	29 81       	ldd	r18, Y+1	; 0x01
     72c:	3a 81       	ldd	r19, Y+2	; 0x02
     72e:	4b 81       	ldd	r20, Y+3	; 0x03
     730:	5c 81       	ldd	r21, Y+4	; 0x04
     732:	62 1b       	sub	r22, r18
     734:	73 0b       	sbc	r23, r19
     736:	84 0b       	sbc	r24, r20
     738:	95 0b       	sbc	r25, r21
     73a:	68 3c       	cpi	r22, 0xC8	; 200
     73c:	32 e1       	ldi	r19, 0x12	; 18
     73e:	73 07       	cpc	r23, r19
     740:	30 e0       	ldi	r19, 0x00	; 0
     742:	83 07       	cpc	r24, r19
     744:	30 e0       	ldi	r19, 0x00	; 0
     746:	93 07       	cpc	r25, r19
     748:	08 f4       	brcc	.+2      	; 0x74c <main+0x570>
     74a:	94 cd       	rjmp	.-1240   	; 0x274 <main+0x98>
				pwm_red = 255;
     74c:	10 93 0c 02 	sts	0x020C, r17
				pwm_green = 255;
     750:	10 93 0d 02 	sts	0x020D, r17
				pwm_blue = 255;			
     754:	10 93 0e 02 	sts	0x020E, r17
     758:	8d cd       	rjmp	.-1254   	; 0x274 <main+0x98>

		//if(currentSelector!=6 && currentSelector!=15) {
		//	usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		//}

		switch(currentSelector) {
     75a:	85 30       	cpi	r24, 0x05	; 5
     75c:	09 f4       	brne	.+2      	; 0x760 <main+0x584>
     75e:	8e c0       	rjmp	.+284    	; 0x87c <main+0x6a0>
     760:	86 30       	cpi	r24, 0x06	; 6
     762:	08 f4       	brcc	.+2      	; 0x766 <main+0x58a>
     764:	66 c0       	rjmp	.+204    	; 0x832 <main+0x656>
					setLeftSpeed(25);
					setRightSpeed(25);
					break;

			case 6:	// robot testing
					switch(menuChoice) {
     766:	80 91 21 04 	lds	r24, 0x0421
     76a:	81 30       	cpi	r24, 0x01	; 1
     76c:	09 f4       	brne	.+2      	; 0x770 <main+0x594>
     76e:	f2 c2       	rjmp	.+1508   	; 0xd54 <main+0xb78>
     770:	81 30       	cpi	r24, 0x01	; 1
     772:	08 f0       	brcs	.+2      	; 0x776 <main+0x59a>
     774:	a8 c2       	rjmp	.+1360   	; 0xcc6 <main+0xaea>
						case 0:
							setRightSpeed(0);
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <setRightSpeed>
							setLeftSpeed(0);
     77c:	80 e0       	ldi	r24, 0x00	; 0
     77e:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <setLeftSpeed>
							turnOffGreenLeds();
     782:	0e 94 e0 3b 	call	0x77c0	; 0x77c0 <turnOffGreenLeds>
							pwm_red=255;
     786:	10 93 0c 02 	sts	0x020C, r17
							pwm_green=255;
     78a:	10 93 0d 02 	sts	0x020D, r17
							pwm_blue=255;
     78e:	10 93 0e 02 	sts	0x020E, r17
							updateRedLed(pwm_red);
     792:	8f ef       	ldi	r24, 0xFF	; 255
     794:	0e 94 07 3b 	call	0x760e	; 0x760e <updateRedLed>
							updateGreenLed(pwm_green);
     798:	80 91 0d 02 	lds	r24, 0x020D
     79c:	0e 94 1b 3b 	call	0x7636	; 0x7636 <updateGreenLed>
							updateBlueLed(pwm_blue);
     7a0:	80 91 0e 02 	lds	r24, 0x020E
     7a4:	0e 94 2f 3b 	call	0x765e	; 0x765e <updateBlueLed>
							LED_IR1_HIGH;
     7a8:	44 9a       	sbi	0x08, 4	; 8
							LED_IR2_HIGH;
     7aa:	45 9a       	sbi	0x08, 5	; 8
     7ac:	80 91 4a 04 	lds	r24, 0x044A
							break;
     7b0:	91 cd       	rjmp	.-1246   	; 0x2d4 <main+0xf8>

		//if(currentSelector!=6 && currentSelector!=15) {
		//	usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		//}

		switch(currentSelector) {
     7b2:	8d 30       	cpi	r24, 0x0D	; 13
     7b4:	09 f4       	brne	.+2      	; 0x7b8 <main+0x5dc>
     7b6:	92 c0       	rjmp	.+292    	; 0x8dc <main+0x700>
     7b8:	8d 30       	cpi	r24, 0x0D	; 13
     7ba:	08 f4       	brcc	.+2      	; 0x7be <main+0x5e2>
     7bc:	76 c0       	rjmp	.+236    	; 0x8aa <main+0x6ce>
     7be:	8e 30       	cpi	r24, 0x0E	; 14
     7c0:	09 f0       	breq	.+2      	; 0x7c4 <main+0x5e8>
     7c2:	88 cd       	rjmp	.-1264   	; 0x2d4 <main+0xf8>
						break;
				}
				break;
			
			case 14: // IR comm receiver
				switch(demoState) {
     7c4:	80 91 4e 04 	lds	r24, 0x044E
     7c8:	88 23       	and	r24, r24
     7ca:	09 f0       	breq	.+2      	; 0x7ce <main+0x5f2>
     7cc:	61 c1       	rjmp	.+706    	; 0xa90 <main+0x8b4>
					case 0:
						irCommInit(IRCOMM_MODE_RECEIVE_ONLY);
     7ce:	83 e0       	ldi	r24, 0x03	; 3
     7d0:	0e 94 0d 43 	call	0x861a	; 0x861a <irCommInit>
						//enableObstacleAvoidance();
						//setLeftSpeed(25);
						//setRightSpeed(25);
						demoState = 1;
     7d4:	20 92 4e 04 	sts	0x044E, r2
     7d8:	80 91 4a 04 	lds	r24, 0x044A
						break;
     7dc:	7b cd       	rjmp	.-1290   	; 0x2d4 <main+0xf8>
             		enableCliffAvoidance();
					break;
    
			case 3:	// both obstacle and cliff avoidance enabled (the robot does not move untill commands are
					// received from the radio or tv remote)
            		enableObstacleAvoidance();
     7de:	0e 94 bc 3a 	call	0x7578	; 0x7578 <enableObstacleAvoidance>
					enableCliffAvoidance();
     7e2:	0e 94 c3 3a 	call	0x7586	; 0x7586 <enableCliffAvoidance>
     7e6:	80 91 4a 04 	lds	r24, 0x044A
					break;
     7ea:	74 cd       	rjmp	.-1304   	; 0x2d4 <main+0xf8>
					updateBlueLed(pwm_blue);

					break;
  
			case 8:	// motors calibration
					irEnabled = 1;
     7ec:	20 92 12 02 	sts	0x0212, r2
					if(calibrateOdomFlag==1) {
     7f0:	80 91 23 05 	lds	r24, 0x0523
     7f4:	81 30       	cpi	r24, 0x01	; 1
     7f6:	09 f0       	breq	.+2      	; 0x7fa <main+0x61e>
     7f8:	4d ce       	rjmp	.-870    	; 0x494 <main+0x2b8>
						handleCalibration();
     7fa:	0e 94 f2 27 	call	0x4fe4	; 0x4fe4 <handleCalibration>
     7fe:	80 91 4a 04 	lds	r24, 0x044A
     802:	68 cd       	rjmp	.-1328   	; 0x2d4 <main+0xf8>
					break;

			case 9:	// write default calibration values; wait 2 seconds before start writing the calibration values
					// in eeprom in order to avoid rewriting the data involuntarily when moving the selector and passing 
					// through selector position 9
					switch(demoState) {
     804:	80 91 4e 04 	lds	r24, 0x044E
     808:	81 30       	cpi	r24, 0x01	; 1
     80a:	09 f4       	brne	.+2      	; 0x80e <main+0x632>
     80c:	1f c5       	rjmp	.+2622   	; 0x124c <main+0x1070>
     80e:	81 30       	cpi	r24, 0x01	; 1
     810:	08 f0       	brcs	.+2      	; 0x814 <main+0x638>
     812:	78 c2       	rjmp	.+1264   	; 0xd04 <main+0xb28>
						case 0:
							demoStartTime = getTime100MicroSec();
     814:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <getTime100MicroSec>
     818:	60 93 52 04 	sts	0x0452, r22
     81c:	70 93 53 04 	sts	0x0453, r23
     820:	80 93 54 04 	sts	0x0454, r24
     824:	90 93 55 04 	sts	0x0455, r25
							demoState = 1;
     828:	20 92 4e 04 	sts	0x044E, r2
     82c:	80 91 4a 04 	lds	r24, 0x044A
							break;
     830:	51 cd       	rjmp	.-1374   	; 0x2d4 <main+0xf8>
            		enableObstacleAvoidance();
					enableCliffAvoidance();
					break;
            
			case 4:	// random colors on RGB leds; small green leds turned on
					GREEN_LED0_ON;
     832:	80 91 0b 01 	lds	r24, 0x010B
     836:	8e 7f       	andi	r24, 0xFE	; 254
     838:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED1_ON;
     83c:	80 91 0b 01 	lds	r24, 0x010B
     840:	8d 7f       	andi	r24, 0xFD	; 253
     842:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED2_ON;
     846:	80 91 0b 01 	lds	r24, 0x010B
     84a:	8b 7f       	andi	r24, 0xFB	; 251
     84c:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED3_ON;
     850:	a3 98       	cbi	0x14, 3	; 20
					GREEN_LED4_ON;
     852:	80 91 0b 01 	lds	r24, 0x010B
     856:	8f 7e       	andi	r24, 0xEF	; 239
     858:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED5_ON;
     85c:	80 91 0b 01 	lds	r24, 0x010B
     860:	8f 7d       	andi	r24, 0xDF	; 223
     862:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED6_ON;
     866:	80 91 0b 01 	lds	r24, 0x010B
     86a:	8f 7b       	andi	r24, 0xBF	; 191
     86c:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED7_ON;
     870:	80 91 0b 01 	lds	r24, 0x010B
     874:	8f 77       	andi	r24, 0x7F	; 127
     876:	80 93 0b 01 	sts	0x010B, r24
     87a:	fb cd       	rjmp	.-1034   	; 0x472 <main+0x296>
					updateBlueLed(pwm_blue);
					break;
             
			case 5:	// random colors on RGB leds; obstacle avoidance enabled; robot start moving automatically
					// (motors speed setting)
					updateRedLed(pwm_red);
     87c:	80 91 0c 02 	lds	r24, 0x020C
     880:	0e 94 07 3b 	call	0x760e	; 0x760e <updateRedLed>
					updateGreenLed(pwm_green);
     884:	80 91 0d 02 	lds	r24, 0x020D
     888:	0e 94 1b 3b 	call	0x7636	; 0x7636 <updateGreenLed>
					updateBlueLed(pwm_blue);
     88c:	80 91 0e 02 	lds	r24, 0x020E
     890:	0e 94 2f 3b 	call	0x765e	; 0x765e <updateBlueLed>
					enableObstacleAvoidance();
     894:	0e 94 bc 3a 	call	0x7578	; 0x7578 <enableObstacleAvoidance>
					setLeftSpeed(25);
     898:	89 e1       	ldi	r24, 0x19	; 25
     89a:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <setLeftSpeed>
					setRightSpeed(25);
     89e:	89 e1       	ldi	r24, 0x19	; 25
     8a0:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <setRightSpeed>
     8a4:	80 91 4a 04 	lds	r24, 0x044A
					break;
     8a8:	15 cd       	rjmp	.-1494   	; 0x2d4 <main+0xf8>
						setLeftSpeed(0);
						setRightSpeed(0);
					}
					break;

			case 12:if(leftMotSteps <= 6000) {
     8aa:	60 91 d5 02 	lds	r22, 0x02D5
     8ae:	70 91 d6 02 	lds	r23, 0x02D6
     8b2:	80 91 d7 02 	lds	r24, 0x02D7
     8b6:	90 91 d8 02 	lds	r25, 0x02D8
     8ba:	20 e0       	ldi	r18, 0x00	; 0
     8bc:	30 e8       	ldi	r19, 0x80	; 128
     8be:	4b eb       	ldi	r20, 0xBB	; 187
     8c0:	55 e4       	ldi	r21, 0x45	; 69
     8c2:	0e 94 4c 49 	call	0x9298	; 0x9298 <__cmpsf2>
     8c6:	18 16       	cp	r1, r24
     8c8:	4c f1       	brlt	.+82     	; 0x91c <main+0x740>
						setLeftSpeed(40);
     8ca:	88 e2       	ldi	r24, 0x28	; 40
     8cc:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <setLeftSpeed>
						setRightSpeed(40);
     8d0:	88 e2       	ldi	r24, 0x28	; 40
     8d2:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <setRightSpeed>
     8d6:	80 91 4a 04 	lds	r24, 0x044A
     8da:	fc cc       	rjmp	.-1544   	; 0x2d4 <main+0xf8>
						setRightSpeed(0);
					}
					break;

			case 13: // IR comm transmitter
				switch(demoState) {
     8dc:	80 91 4e 04 	lds	r24, 0x044E
     8e0:	81 30       	cpi	r24, 0x01	; 1
     8e2:	09 f4       	brne	.+2      	; 0x8e6 <main+0x70a>
     8e4:	a0 c4       	rjmp	.+2368   	; 0x1226 <main+0x104a>
     8e6:	81 30       	cpi	r24, 0x01	; 1
     8e8:	08 f0       	brcs	.+2      	; 0x8ec <main+0x710>
     8ea:	2c c1       	rjmp	.+600    	; 0xb44 <main+0x968>
					case 0:
						irCommInit(IRCOMM_MODE_TRANSMIT_ONLY);
     8ec:	84 e0       	ldi	r24, 0x04	; 4
     8ee:	0e 94 0d 43 	call	0x861a	; 0x861a <irCommInit>
						//enableObstacleAvoidance();
						//setLeftSpeed(25);
						//setRightSpeed(25);
						demoState = 1;
     8f2:	20 92 4e 04 	sts	0x044E, r2
     8f6:	80 91 4a 04 	lds	r24, 0x044A
						break;
     8fa:	ec cc       	rjmp	.-1576   	; 0x2d4 <main+0xf8>
					}
					

					break;

			case 11:if(leftMotSteps <= 5000) {
     8fc:	60 91 d5 02 	lds	r22, 0x02D5
     900:	70 91 d6 02 	lds	r23, 0x02D6
     904:	80 91 d7 02 	lds	r24, 0x02D7
     908:	90 91 d8 02 	lds	r25, 0x02D8
     90c:	20 e0       	ldi	r18, 0x00	; 0
     90e:	30 e4       	ldi	r19, 0x40	; 64
     910:	4c e9       	ldi	r20, 0x9C	; 156
     912:	55 e4       	ldi	r21, 0x45	; 69
     914:	0e 94 4c 49 	call	0x9298	; 0x9298 <__cmpsf2>
     918:	18 16       	cp	r1, r24
     91a:	bc f6       	brge	.-82     	; 0x8ca <main+0x6ee>

			case 12:if(leftMotSteps <= 6000) {
						setLeftSpeed(40);
						setRightSpeed(40);
					} else {
						setLeftSpeed(0);
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <setLeftSpeed>
						setRightSpeed(0);
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <setRightSpeed>
     928:	80 91 4a 04 	lds	r24, 0x044A
     92c:	d3 cc       	rjmp	.-1626   	; 0x2d4 <main+0xf8>
					handleMotorsWithNoController();
					break;
             
			case 1:	// obstacle avoidance enabled (the robot does not move untill commands are 
					// received from the radio or tv remote)
             		enableObstacleAvoidance();
     92e:	0e 94 bc 3a 	call	0x7578	; 0x7578 <enableObstacleAvoidance>
     932:	80 91 4a 04 	lds	r24, 0x044A
					break;
     936:	ce cc       	rjmp	.-1636   	; 0x2d4 <main+0xf8>
				}

				turnOffLedsTime = getTime100MicroSec();

			} else if(currentSelector==6) {
				if(menuChoice==1 && rfFlags<=1) {
     938:	80 91 21 04 	lds	r24, 0x0421
     93c:	81 30       	cpi	r24, 0x01	; 1
     93e:	09 f0       	breq	.+2      	; 0x942 <main+0x766>
     940:	ed ce       	rjmp	.-550    	; 0x71c <main+0x540>
     942:	90 91 17 03 	lds	r25, 0x0317
     946:	92 30       	cpi	r25, 0x02	; 2
     948:	08 f0       	brcs	.+2      	; 0x94c <main+0x770>
     94a:	e8 ce       	rjmp	.-560    	; 0x71c <main+0x540>
					if(rgbState == 0) {
     94c:	90 91 1a 03 	lds	r25, 0x031A
     950:	99 23       	and	r25, r25
     952:	09 f0       	breq	.+2      	; 0x956 <main+0x77a>
     954:	4b c7       	rjmp	.+3734   	; 0x17ec <main+0x1610>
						pwm_red = 254;
     956:	4e ef       	ldi	r20, 0xFE	; 254
     958:	40 93 0c 02 	sts	0x020C, r20
						pwm_green = 255;
     95c:	10 93 0d 02 	sts	0x020D, r17
						pwm_blue = 255;
     960:	10 93 0e 02 	sts	0x020E, r17
						rgbState = 1;
     964:	80 93 1a 03 	sts	0x031A, r24
     968:	d9 ce       	rjmp	.-590    	; 0x71c <main+0x540>
						if(pwm_intermediate_left_desired < pwm_left_desired) {
							pwm_intermediate_left_desired = pwm_left_desired;
						}					
					}
				} else {
					pwm_intermediate_right_desired = pwm_right_desired;
     96a:	80 91 f9 02 	lds	r24, 0x02F9
     96e:	90 91 fa 02 	lds	r25, 0x02FA
     972:	90 93 fe 02 	sts	0x02FE, r25
     976:	80 93 fd 02 	sts	0x02FD, r24
					pwm_intermediate_left_desired = pwm_left_desired;
     97a:	80 91 fb 02 	lds	r24, 0x02FB
     97e:	90 91 fc 02 	lds	r25, 0x02FC
     982:	74 ce       	rjmp	.-792    	; 0x66c <main+0x490>
		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
             		
			if(currentSelector==4 || currentSelector==5) {
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption
     984:	0e 94 5f 4c 	call	0x98be	; 0x98be <rand>
     988:	6e e1       	ldi	r22, 0x1E	; 30
     98a:	70 e0       	ldi	r23, 0x00	; 0
     98c:	0e 94 c1 4b 	call	0x9782	; 0x9782 <__divmodhi4>
     990:	a8 0e       	add	r10, r24
     992:	b9 1e       	adc	r11, r25
     994:	5f e7       	ldi	r21, 0x7F	; 127
     996:	a5 22       	and	r10, r21
     998:	bb 24       	eor	r11, r11

				switch(rgbState) {
     99a:	80 91 1a 03 	lds	r24, 0x031A
     99e:	81 30       	cpi	r24, 0x01	; 1
     9a0:	09 f4       	brne	.+2      	; 0x9a4 <main+0x7c8>
     9a2:	e5 c4       	rjmp	.+2506   	; 0x136e <main+0x1192>
     9a4:	81 30       	cpi	r24, 0x01	; 1
     9a6:	08 f0       	brcs	.+2      	; 0x9aa <main+0x7ce>
     9a8:	9d c4       	rjmp	.+2362   	; 0x12e4 <main+0x1108>
					case 0:
						pwm_red = 255 - currRand;	
     9aa:	8a 2d       	mov	r24, r10
     9ac:	80 95       	com	r24
     9ae:	80 93 0c 02 	sts	0x020C, r24
						rgbState = 1;
     9b2:	20 92 1a 03 	sts	0x031A, r2
						pwm_blue = 255 - currRand;
						rgbState = 0;
						break;
				}
				
				if(currRand<32) {
     9b6:	80 e2       	ldi	r24, 0x20	; 32
     9b8:	a8 16       	cp	r10, r24
     9ba:	b1 04       	cpc	r11, r1
     9bc:	08 f0       	brcs	.+2      	; 0x9c0 <main+0x7e4>
     9be:	b1 c1       	rjmp	.+866    	; 0xd22 <main+0xb46>
					if(pwm_green!=255 && pwm_blue!=255) {	// do not turn on all leds
     9c0:	80 91 0d 02 	lds	r24, 0x020D
     9c4:	8f 3f       	cpi	r24, 0xFF	; 255
     9c6:	09 f4       	brne	.+2      	; 0x9ca <main+0x7ee>
     9c8:	a9 ce       	rjmp	.-686    	; 0x71c <main+0x540>
     9ca:	80 91 0e 02 	lds	r24, 0x020E
     9ce:	8f 3f       	cpi	r24, 0xFF	; 255
     9d0:	09 f4       	brne	.+2      	; 0x9d4 <main+0x7f8>
     9d2:	a4 ce       	rjmp	.-696    	; 0x71c <main+0x540>
						pwm_red = 255;
     9d4:	10 93 0c 02 	sts	0x020C, r17
     9d8:	a1 ce       	rjmp	.-702    	; 0x71c <main+0x540>

				}

			} else if(currentSelector==7) {

				srand(TCNT3);
     9da:	80 91 94 00 	lds	r24, 0x0094
     9de:	90 91 95 00 	lds	r25, 0x0095
     9e2:	0e 94 64 4c 	call	0x98c8	; 0x98c8 <srand>
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption
     9e6:	0e 94 5f 4c 	call	0x98be	; 0x98be <rand>
     9ea:	6e e1       	ldi	r22, 0x1E	; 30
     9ec:	70 e0       	ldi	r23, 0x00	; 0
     9ee:	0e 94 c1 4b 	call	0x9782	; 0x9782 <__divmodhi4>
     9f2:	4c 01       	movw	r8, r24
     9f4:	8a 0c       	add	r8, r10
     9f6:	9b 1c       	adc	r9, r11
     9f8:	ff e7       	ldi	r31, 0x7F	; 127
     9fa:	8f 22       	and	r8, r31
     9fc:	99 24       	eor	r9, r9

				pwm_red = 255 - currRand;
     9fe:	88 2d       	mov	r24, r8
     a00:	80 95       	com	r24
     a02:	80 93 0c 02 	sts	0x020C, r24
				
				srand(TCNT3);
     a06:	80 91 94 00 	lds	r24, 0x0094
     a0a:	90 91 95 00 	lds	r25, 0x0095
     a0e:	0e 94 64 4c 	call	0x98c8	; 0x98c8 <srand>
				currRand = (currRand + rand()%30) % 128;	
     a12:	0e 94 5f 4c 	call	0x98be	; 0x98be <rand>
     a16:	6e e1       	ldi	r22, 0x1E	; 30
     a18:	70 e0       	ldi	r23, 0x00	; 0
     a1a:	0e 94 c1 4b 	call	0x9782	; 0x9782 <__divmodhi4>
     a1e:	6c 01       	movw	r12, r24
     a20:	c8 0c       	add	r12, r8
     a22:	d9 1c       	adc	r13, r9
     a24:	2f e7       	ldi	r18, 0x7F	; 127
     a26:	c2 22       	and	r12, r18
     a28:	dd 24       	eor	r13, r13
				pwm_green = 255 - currRand;
     a2a:	8c 2d       	mov	r24, r12
     a2c:	80 95       	com	r24
     a2e:	80 93 0d 02 	sts	0x020D, r24

				srand(TCNT3);
     a32:	80 91 94 00 	lds	r24, 0x0094
     a36:	90 91 95 00 	lds	r25, 0x0095
     a3a:	0e 94 64 4c 	call	0x98c8	; 0x98c8 <srand>
				currRand = (currRand + rand()%30) % 128;
     a3e:	0e 94 5f 4c 	call	0x98be	; 0x98be <rand>
     a42:	6e e1       	ldi	r22, 0x1E	; 30
     a44:	70 e0       	ldi	r23, 0x00	; 0
     a46:	0e 94 c1 4b 	call	0x9782	; 0x9782 <__divmodhi4>
     a4a:	5c 01       	movw	r10, r24
     a4c:	ac 0c       	add	r10, r12
     a4e:	bd 1c       	adc	r11, r13
     a50:	3f e7       	ldi	r19, 0x7F	; 127
     a52:	a3 22       	and	r10, r19
     a54:	bb 24       	eor	r11, r11
				pwm_blue = 255 - currRand;
     a56:	8a 2d       	mov	r24, r10
     a58:	80 95       	com	r24
     a5a:	80 93 0e 02 	sts	0x020E, r24

			
				srand(TCNT3);
     a5e:	80 91 94 00 	lds	r24, 0x0094
     a62:	90 91 95 00 	lds	r25, 0x0095
     a66:	0e 94 64 4c 	call	0x98c8	; 0x98c8 <srand>
				currRand2 = rand()%128;
     a6a:	0e 94 5f 4c 	call	0x98be	; 0x98be <rand>
     a6e:	60 e8       	ldi	r22, 0x80	; 128
     a70:	70 e0       	ldi	r23, 0x00	; 0
     a72:	0e 94 c1 4b 	call	0x9782	; 0x9782 <__divmodhi4>
				if(currRand2<32) {
     a76:	80 32       	cpi	r24, 0x20	; 32
     a78:	91 05       	cpc	r25, r1
     a7a:	08 f0       	brcs	.+2      	; 0xa7e <main+0x8a2>
     a7c:	64 c1       	rjmp	.+712    	; 0xd46 <main+0xb6a>
					pwm_red = 255;
     a7e:	10 93 0c 02 	sts	0x020C, r17
					pwm_blue = 255;
				} else {	// do nothing => all 3 leds turned on

				}

				turnOffLedsTime = getTime100MicroSec();
     a82:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <getTime100MicroSec>
     a86:	69 83       	std	Y+1, r22	; 0x01
     a88:	7a 83       	std	Y+2, r23	; 0x02
     a8a:	8b 83       	std	Y+3, r24	; 0x03
     a8c:	9c 83       	std	Y+4, r25	; 0x04
     a8e:	46 ce       	rjmp	.-884    	; 0x71c <main+0x540>
						break;
				}
				break;
			
			case 14: // IR comm receiver
				switch(demoState) {
     a90:	81 30       	cpi	r24, 0x01	; 1
     a92:	09 f0       	breq	.+2      	; 0xa96 <main+0x8ba>
     a94:	ff cc       	rjmp	.-1538   	; 0x494 <main+0x2b8>
						//setRightSpeed(25);
						demoState = 1;
						break;

					case 1:
						irCommTasks();
     a96:	0e 94 91 43 	call	0x8722	; 0x8722 <irCommTasks>
						if(irCommDataAvailable()==1) {
     a9a:	0e 94 7a 48 	call	0x90f4	; 0x90f4 <irCommDataAvailable>
     a9e:	81 30       	cpi	r24, 0x01	; 1
     aa0:	09 f4       	brne	.+2      	; 0xaa4 <main+0x8c8>
     aa2:	64 c6       	rjmp	.+3272   	; 0x176c <main+0x1590>
									updateBlueLed(0);
									break;
								case 7: 
									updateRedLed(0);
									updateGreenLed(0);
									updateBlueLed(0);
     aa4:	80 91 4a 04 	lds	r24, 0x044A
									break;
     aa8:	15 cc       	rjmp	.-2006   	; 0x2d4 <main+0xf8>
					}
	
					if(pwm_left_desired == 0) {
						pwm_intermediate_left_desired = 0;
					} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
						pwm_intermediate_left_desired = 0;
     aaa:	10 92 00 03 	sts	0x0300, r1
     aae:	10 92 ff 02 	sts	0x02FF, r1
     ab2:	f8 cb       	rjmp	.-2064   	; 0x2a4 <main+0xc8>

				if(softAccEnabled) {
					if(pwm_right_desired == 0) {
						pwm_intermediate_right_desired = 0;
					} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
						pwm_intermediate_right_desired = 0;
     ab4:	10 92 fe 02 	sts	0x02FE, r1
     ab8:	10 92 fd 02 	sts	0x02FD, r1
     abc:	b3 cd       	rjmp	.-1178   	; 0x624 <main+0x448>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
     abe:	84 30       	cpi	r24, 0x04	; 4
     ac0:	09 f4       	brne	.+2      	; 0xac4 <main+0x8e8>
     ac2:	b4 c4       	rjmp	.+2408   	; 0x142c <main+0x1250>
     ac4:	84 30       	cpi	r24, 0x04	; 4
     ac6:	08 f4       	brcc	.+2      	; 0xaca <main+0x8ee>
     ac8:	6c c4       	rjmp	.+2264   	; 0x13a2 <main+0x11c6>
     aca:	85 30       	cpi	r24, 0x05	; 5
     acc:	09 f0       	breq	.+2      	; 0xad0 <main+0x8f4>
     ace:	d1 cc       	rjmp	.-1630   	; 0x472 <main+0x296>
							//pwm_green = 0;
							//pwm_blue = 255;													
							break;

						case 5:	// turn around
							turnOffGreenLeds();
     ad0:	0e 94 e0 3b 	call	0x77c0	; 0x77c0 <turnOffGreenLeds>
							GREEN_LED6_ON;
     ad4:	80 91 0b 01 	lds	r24, 0x010B
     ad8:	8f 7b       	andi	r24, 0xBF	; 191
     ada:	80 93 0b 01 	sts	0x010B, r24
							GREEN_LED7_ON;
     ade:	80 91 0b 01 	lds	r24, 0x010B
     ae2:	8f 77       	andi	r24, 0x7F	; 127
     ae4:	80 93 0b 01 	sts	0x010B, r24
							demoEndTime = getTime100MicroSec();
     ae8:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <getTime100MicroSec>
     aec:	9b 01       	movw	r18, r22
     aee:	ac 01       	movw	r20, r24
     af0:	60 93 5a 04 	sts	0x045A, r22
     af4:	70 93 5b 04 	sts	0x045B, r23
     af8:	80 93 5c 04 	sts	0x045C, r24
     afc:	90 93 5d 04 	sts	0x045D, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_750_MSEC)) {
     b00:	80 91 52 04 	lds	r24, 0x0452
     b04:	90 91 53 04 	lds	r25, 0x0453
     b08:	a0 91 54 04 	lds	r26, 0x0454
     b0c:	b0 91 55 04 	lds	r27, 0x0455
     b10:	28 1b       	sub	r18, r24
     b12:	39 0b       	sbc	r19, r25
     b14:	4a 0b       	sbc	r20, r26
     b16:	5b 0b       	sbc	r21, r27
     b18:	2b 32       	cpi	r18, 0x2B	; 43
     b1a:	9c e1       	ldi	r25, 0x1C	; 28
     b1c:	39 07       	cpc	r19, r25
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	49 07       	cpc	r20, r25
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	59 07       	cpc	r21, r25
     b26:	08 f4       	brcc	.+2      	; 0xb2a <main+0x94e>
     b28:	a4 cc       	rjmp	.-1720   	; 0x472 <main+0x296>
								demoStartTime = getTime100MicroSec();
     b2a:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <getTime100MicroSec>
     b2e:	60 93 52 04 	sts	0x0452, r22
     b32:	70 93 53 04 	sts	0x0453, r23
     b36:	80 93 54 04 	sts	0x0454, r24
     b3a:	90 93 55 04 	sts	0x0455, r25
								demoState = 0;							
     b3e:	10 92 4e 04 	sts	0x044E, r1
     b42:	97 cc       	rjmp	.-1746   	; 0x472 <main+0x296>
						setRightSpeed(0);
					}
					break;

			case 13: // IR comm transmitter
				switch(demoState) {
     b44:	82 30       	cpi	r24, 0x02	; 2
     b46:	09 f0       	breq	.+2      	; 0xb4a <main+0x96e>
     b48:	a5 cc       	rjmp	.-1718   	; 0x494 <main+0x2b8>
						}
						demoState = 2;
						break;

					case 2:
						irCommTasks();
     b4a:	0e 94 91 43 	call	0x8722	; 0x8722 <irCommTasks>
						if(irCommDataSent()==1) {
     b4e:	0e 94 72 48 	call	0x90e4	; 0x90e4 <irCommDataSent>
     b52:	81 30       	cpi	r24, 0x01	; 1
     b54:	09 f0       	breq	.+2      	; 0xb58 <main+0x97c>
     b56:	a6 cf       	rjmp	.-180    	; 0xaa4 <main+0x8c8>
							demoState = 1;
     b58:	80 93 4e 04 	sts	0x044E, r24
     b5c:	80 91 4a 04 	lds	r24, 0x044A
     b60:	b9 cb       	rjmp	.-2190   	; 0x2d4 <main+0xf8>
								demoState = 1;							
							}
							break;
					}	
					
					switch(rgbLedState) {
     b62:	82 30       	cpi	r24, 0x02	; 2
     b64:	09 f0       	breq	.+2      	; 0xb68 <main+0x98c>
     b66:	9e cf       	rjmp	.-196    	; 0xaa4 <main+0x8c8>
							updateBlueLed(pwm_blue);
							rgbLedState = 2;
							break;

						case 2:
							if((getTime100MicroSec()-demoStartTime2) >= (PAUSE_500_MSEC)) {
     b68:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <getTime100MicroSec>
     b6c:	9b 01       	movw	r18, r22
     b6e:	ac 01       	movw	r20, r24
     b70:	80 91 56 04 	lds	r24, 0x0456
     b74:	90 91 57 04 	lds	r25, 0x0457
     b78:	a0 91 58 04 	lds	r26, 0x0458
     b7c:	b0 91 59 04 	lds	r27, 0x0459
     b80:	28 1b       	sub	r18, r24
     b82:	39 0b       	sbc	r19, r25
     b84:	4a 0b       	sbc	r20, r26
     b86:	5b 0b       	sbc	r21, r27
     b88:	27 3c       	cpi	r18, 0xC7	; 199
     b8a:	62 e1       	ldi	r22, 0x12	; 18
     b8c:	36 07       	cpc	r19, r22
     b8e:	60 e0       	ldi	r22, 0x00	; 0
     b90:	46 07       	cpc	r20, r22
     b92:	60 e0       	ldi	r22, 0x00	; 0
     b94:	56 07       	cpc	r21, r22
     b96:	08 f4       	brcc	.+2      	; 0xb9a <main+0x9be>
     b98:	85 cf       	rjmp	.-246    	; 0xaa4 <main+0x8c8>
								rgbLedState = 0;
     b9a:	10 92 69 04 	sts	0x0469, r1
								demoStartTime2 = getTime100MicroSec();
     b9e:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <getTime100MicroSec>
     ba2:	60 93 56 04 	sts	0x0456, r22
     ba6:	70 93 57 04 	sts	0x0457, r23
     baa:	80 93 58 04 	sts	0x0458, r24
     bae:	90 93 59 04 	sts	0x0459, r25
								demoEndTime = getTime100MicroSec();
     bb2:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <getTime100MicroSec>
     bb6:	60 93 5a 04 	sts	0x045A, r22
     bba:	70 93 5b 04 	sts	0x045B, r23
     bbe:	80 93 5c 04 	sts	0x045C, r24
     bc2:	90 93 5d 04 	sts	0x045D, r25
								greenLedState = 0;
     bc6:	10 92 68 04 	sts	0x0468, r1
								setGreenLed(greenLedState, 1);
     bca:	80 e0       	ldi	r24, 0x00	; 0
     bcc:	61 e0       	ldi	r22, 0x01	; 1
     bce:	0e 94 43 3b 	call	0x7686	; 0x7686 <setGreenLed>
     bd2:	80 91 4a 04 	lds	r24, 0x044A
     bd6:	7e cb       	rjmp	.-2308   	; 0x2d4 <main+0xf8>
							break;
					}
					break;

			case 10:// obstacle avoidance with random colors; 4 seconds motion and 10 seconds pause					
					switch(demoState) {
     bd8:	82 30       	cpi	r24, 0x02	; 2
     bda:	09 f0       	breq	.+2      	; 0xbde <main+0xa02>
     bdc:	08 cc       	rjmp	.-2032   	; 0x3ee <main+0x212>
								demoState = 2;							
							}
							break;

						case 2: // pause							
							if((getTime100MicroSec()-demoStartTime) >= (PAUSE_10_SEC)) {
     bde:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <getTime100MicroSec>
     be2:	9b 01       	movw	r18, r22
     be4:	ac 01       	movw	r20, r24
     be6:	80 91 52 04 	lds	r24, 0x0452
     bea:	90 91 53 04 	lds	r25, 0x0453
     bee:	a0 91 54 04 	lds	r26, 0x0454
     bf2:	b0 91 55 04 	lds	r27, 0x0455
     bf6:	28 1b       	sub	r18, r24
     bf8:	39 0b       	sbc	r19, r25
     bfa:	4a 0b       	sbc	r20, r26
     bfc:	5b 0b       	sbc	r21, r27
     bfe:	2a 39       	cpi	r18, 0x9A	; 154
     c00:	97 e7       	ldi	r25, 0x77	; 119
     c02:	39 07       	cpc	r19, r25
     c04:	91 e0       	ldi	r25, 0x01	; 1
     c06:	49 07       	cpc	r20, r25
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	59 07       	cpc	r21, r25
     c0c:	08 f4       	brcc	.+2      	; 0xc10 <main+0xa34>
     c0e:	ef cb       	rjmp	.-2082   	; 0x3ee <main+0x212>
								setRightSpeed(20);
     c10:	84 e1       	ldi	r24, 0x14	; 20
     c12:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <setRightSpeed>
								setLeftSpeed(20);								
     c16:	84 e1       	ldi	r24, 0x14	; 20
     c18:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <setLeftSpeed>
								demoStartTime = getTime100MicroSec();								
     c1c:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <getTime100MicroSec>
     c20:	60 93 52 04 	sts	0x0452, r22
     c24:	70 93 53 04 	sts	0x0453, r23
     c28:	80 93 54 04 	sts	0x0454, r24
     c2c:	90 93 55 04 	sts	0x0455, r25
								demoState = 1;							
     c30:	20 92 4e 04 	sts	0x044E, r2
							}
							break;
					}	
					
					switch(rgbLedState) {
     c34:	80 91 69 04 	lds	r24, 0x0469
     c38:	81 30       	cpi	r24, 0x01	; 1
     c3a:	09 f0       	breq	.+2      	; 0xc3e <main+0xa62>
     c3c:	dd cb       	rjmp	.-2118   	; 0x3f8 <main+0x21c>
							updateGreenLed(pwm_green);
							updateBlueLed(pwm_blue);
							break;

						case 1:		
							turnOffGreenLeds();					
     c3e:	0e 94 e0 3b 	call	0x77c0	; 0x77c0 <turnOffGreenLeds>
							currRand = rand()% 128;	// 0 to 255 is the maximum, we use 0 to 127 to get brighter colors
     c42:	0e 94 5f 4c 	call	0x98be	; 0x98be <rand>
     c46:	60 e8       	ldi	r22, 0x80	; 128
     c48:	70 e0       	ldi	r23, 0x00	; 0
     c4a:	0e 94 c1 4b 	call	0x9782	; 0x9782 <__divmodhi4>
							if(currRand > 95) {
     c4e:	80 36       	cpi	r24, 0x60	; 96
     c50:	91 05       	cpc	r25, r1
     c52:	08 f4       	brcc	.+2      	; 0xc56 <main+0xa7a>
     c54:	dd c4       	rjmp	.+2490   	; 0x1610 <main+0x1434>
								pwm_red = 255;
     c56:	10 93 0c 02 	sts	0x020C, r17
							} else {
								pwm_red = currRand;
							}

							currRand = rand()% 128;
     c5a:	0e 94 5f 4c 	call	0x98be	; 0x98be <rand>
     c5e:	60 e8       	ldi	r22, 0x80	; 128
     c60:	70 e0       	ldi	r23, 0x00	; 0
     c62:	0e 94 c1 4b 	call	0x9782	; 0x9782 <__divmodhi4>
							if(currRand > 95) {
     c66:	80 36       	cpi	r24, 0x60	; 96
     c68:	91 05       	cpc	r25, r1
     c6a:	08 f4       	brcc	.+2      	; 0xc6e <main+0xa92>
     c6c:	ce c4       	rjmp	.+2460   	; 0x160a <main+0x142e>
								pwm_green = 255;
     c6e:	10 93 0d 02 	sts	0x020D, r17
							} else {
								pwm_green = currRand;
							}

							currRand = rand()% 128;
     c72:	0e 94 5f 4c 	call	0x98be	; 0x98be <rand>
     c76:	60 e8       	ldi	r22, 0x80	; 128
     c78:	70 e0       	ldi	r23, 0x00	; 0
     c7a:	0e 94 c1 4b 	call	0x9782	; 0x9782 <__divmodhi4>
							if(currRand > 95) {
     c7e:	80 36       	cpi	r24, 0x60	; 96
     c80:	91 05       	cpc	r25, r1
     c82:	08 f4       	brcc	.+2      	; 0xc86 <main+0xaaa>
     c84:	bf c4       	rjmp	.+2430   	; 0x1604 <main+0x1428>
								pwm_blue = 255;
     c86:	10 93 0e 02 	sts	0x020E, r17
							} else {
								pwm_blue = currRand;
							}

							currRand = rand()% 200;
     c8a:	0e 94 5f 4c 	call	0x98be	; 0x98be <rand>
     c8e:	68 ec       	ldi	r22, 0xC8	; 200
     c90:	70 e0       	ldi	r23, 0x00	; 0
     c92:	0e 94 c1 4b 	call	0x9782	; 0x9782 <__divmodhi4>
     c96:	5c 01       	movw	r10, r24
							if(currRand<50) {
     c98:	82 33       	cpi	r24, 0x32	; 50
     c9a:	91 05       	cpc	r25, r1
     c9c:	08 f0       	brcs	.+2      	; 0xca0 <main+0xac4>
     c9e:	a9 c4       	rjmp	.+2386   	; 0x15f2 <main+0x1416>
								pwm_red = 255;
     ca0:	10 93 0c 02 	sts	0x020C, r17
     ca4:	8f ef       	ldi	r24, 0xFF	; 255
							} else if(currRand<100) {
								pwm_green = 255;
							} else if (currRand<150) {	
								pwm_blue = 255;
							}
							updateRedLed(pwm_red);
     ca6:	0e 94 07 3b 	call	0x760e	; 0x760e <updateRedLed>
							updateGreenLed(pwm_green);
     caa:	80 91 0d 02 	lds	r24, 0x020D
     cae:	0e 94 1b 3b 	call	0x7636	; 0x7636 <updateGreenLed>
							updateBlueLed(pwm_blue);
     cb2:	80 91 0e 02 	lds	r24, 0x020E
     cb6:	0e 94 2f 3b 	call	0x765e	; 0x765e <updateBlueLed>
							rgbLedState = 2;
     cba:	52 e0       	ldi	r21, 0x02	; 2
     cbc:	50 93 69 04 	sts	0x0469, r21
     cc0:	80 91 4a 04 	lds	r24, 0x044A
							break;
     cc4:	07 cb       	rjmp	.-2546   	; 0x2d4 <main+0xf8>
					setLeftSpeed(25);
					setRightSpeed(25);
					break;

			case 6:	// robot testing
					switch(menuChoice) {
     cc6:	82 30       	cpi	r24, 0x02	; 2
     cc8:	09 f0       	breq	.+2      	; 0xccc <main+0xaf0>
     cca:	e4 cb       	rjmp	.-2104   	; 0x494 <main+0x2b8>
							}

							break;

						case 2:	// address writing in eeprom
							if(addressReceived) {
     ccc:	80 91 22 04 	lds	r24, 0x0422
     cd0:	88 23       	and	r24, r24
     cd2:	09 f4       	brne	.+2      	; 0xcd6 <main+0xafa>
     cd4:	df cb       	rjmp	.-2114   	; 0x494 <main+0x2b8>
								turnOnGreenLeds();
     cd6:	0e 94 f9 3b 	call	0x77f2	; 0x77f2 <turnOnGreenLeds>
								eeprom_write_word((uint16_t*)4094, rfAddress);
     cda:	60 91 15 03 	lds	r22, 0x0315
     cde:	70 91 16 03 	lds	r23, 0x0316
     ce2:	8e ef       	ldi	r24, 0xFE	; 254
     ce4:	9f e0       	ldi	r25, 0x0F	; 15
     ce6:	0e 94 ca 4c 	call	0x9994	; 0x9994 <__eewr_word_m2560>
								turnOffGreenLeds();
     cea:	0e 94 e0 3b 	call	0x77c0	; 0x77c0 <turnOffGreenLeds>
								usart0Transmit(0xAA, 1);	// successfully written
     cee:	8a ea       	ldi	r24, 0xAA	; 170
     cf0:	61 e0       	ldi	r22, 0x01	; 1
     cf2:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
								addressReceived = 0;
     cf6:	10 92 22 04 	sts	0x0422, r1
								menuChoice = 0;
     cfa:	10 92 21 04 	sts	0x0421, r1
     cfe:	80 91 4a 04 	lds	r24, 0x044A
     d02:	e8 ca       	rjmp	.-2608   	; 0x2d4 <main+0xf8>
					break;

			case 9:	// write default calibration values; wait 2 seconds before start writing the calibration values
					// in eeprom in order to avoid rewriting the data involuntarily when moving the selector and passing 
					// through selector position 9
					switch(demoState) {
     d04:	82 30       	cpi	r24, 0x02	; 2
     d06:	09 f0       	breq	.+2      	; 0xd0a <main+0xb2e>
     d08:	c5 cb       	rjmp	.-2166   	; 0x494 <main+0x2b8>
								demoState = 2;
							}
							break;						

						case 2:
							if(!calibrationWritten) {
     d0a:	80 91 67 04 	lds	r24, 0x0467
     d0e:	88 23       	and	r24, r24
     d10:	09 f0       	breq	.+2      	; 0xd14 <main+0xb38>
     d12:	c0 cb       	rjmp	.-2176   	; 0x494 <main+0x2b8>
								calibrationWritten = 1;
     d14:	20 92 67 04 	sts	0x0467, r2
								writeDefaultCalibration();
     d18:	0e 94 2e 35 	call	0x6a5c	; 0x6a5c <writeDefaultCalibration>
     d1c:	80 91 4a 04 	lds	r24, 0x044A
     d20:	d9 ca       	rjmp	.-2638   	; 0x2d4 <main+0xf8>
				
				if(currRand<32) {
					if(pwm_green!=255 && pwm_blue!=255) {	// do not turn on all leds
						pwm_red = 255;
					}
				} else if(currRand<64) {
     d22:	90 e4       	ldi	r25, 0x40	; 64
     d24:	a9 16       	cp	r10, r25
     d26:	b1 04       	cpc	r11, r1
     d28:	08 f0       	brcs	.+2      	; 0xd2c <main+0xb50>
     d2a:	29 c3       	rjmp	.+1618   	; 0x137e <main+0x11a2>
					if(pwm_red!=255 && pwm_blue!=255) {
     d2c:	80 91 0c 02 	lds	r24, 0x020C
     d30:	8f 3f       	cpi	r24, 0xFF	; 255
     d32:	09 f4       	brne	.+2      	; 0xd36 <main+0xb5a>
     d34:	f3 cc       	rjmp	.-1562   	; 0x71c <main+0x540>
     d36:	80 91 0e 02 	lds	r24, 0x020E
     d3a:	8f 3f       	cpi	r24, 0xFF	; 255
     d3c:	09 f4       	brne	.+2      	; 0xd40 <main+0xb64>
     d3e:	ee cc       	rjmp	.-1572   	; 0x71c <main+0x540>
						pwm_green = 255;
     d40:	10 93 0d 02 	sts	0x020D, r17
     d44:	eb cc       	rjmp	.-1578   	; 0x71c <main+0x540>
			
				srand(TCNT3);
				currRand2 = rand()%128;
				if(currRand2<32) {
					pwm_red = 255;
				} else if(currRand2<64) {
     d46:	80 34       	cpi	r24, 0x40	; 64
     d48:	91 05       	cpc	r25, r1
     d4a:	08 f0       	brcs	.+2      	; 0xd4e <main+0xb72>
     d4c:	2f c4       	rjmp	.+2142   	; 0x15ac <main+0x13d0>
					pwm_green = 255;
     d4e:	10 93 0d 02 	sts	0x020D, r17
     d52:	97 ce       	rjmp	.-722    	; 0xa82 <main+0x8a6>
							break;

						case 1:	// send sensors data and activate actuators
							//setRightSpeed(20);
							//setLeftSpeed(20);
							turnOnGreenLeds();
     d54:	0e 94 f9 3b 	call	0x77f2	; 0x77f2 <turnOnGreenLeds>
							updateRedLed(pwm_red);
     d58:	80 91 0c 02 	lds	r24, 0x020C
     d5c:	0e 94 07 3b 	call	0x760e	; 0x760e <updateRedLed>
							updateGreenLed(pwm_green);
     d60:	80 91 0d 02 	lds	r24, 0x020D
     d64:	0e 94 1b 3b 	call	0x7636	; 0x7636 <updateGreenLed>
							updateBlueLed(pwm_blue);
     d68:	80 91 0e 02 	lds	r24, 0x020E
     d6c:	0e 94 2f 3b 	call	0x765e	; 0x765e <updateBlueLed>
							LED_IR1_LOW;
     d70:	44 98       	cbi	0x08, 4	; 8
							LED_IR2_LOW;
     d72:	45 98       	cbi	0x08, 5	; 8
							
							if(getDataNow) {
     d74:	80 91 24 04 	lds	r24, 0x0424
     d78:	88 23       	and	r24, r24
     d7a:	09 f4       	brne	.+2      	; 0xd7e <main+0xba2>
     d7c:	93 ce       	rjmp	.-730    	; 0xaa4 <main+0x8c8>
								getDataNow = 0;	
     d7e:	10 92 24 04 	sts	0x0424, r1
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     d82:	80 91 59 02 	lds	r24, 0x0259
     d86:	61 e0       	ldi	r22, 0x01	; 1
     d88:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     d8c:	80 91 5a 02 	lds	r24, 0x025A
     d90:	61 e0       	ldi	r22, 0x01	; 1
     d92:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     d96:	80 91 29 02 	lds	r24, 0x0229
     d9a:	90 91 2a 02 	lds	r25, 0x022A
     d9e:	61 e0       	ldi	r22, 0x01	; 1
     da0:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     da4:	80 91 29 02 	lds	r24, 0x0229
     da8:	90 91 2a 02 	lds	r25, 0x022A
     dac:	89 2f       	mov	r24, r25
     dae:	61 e0       	ldi	r22, 0x01	; 1
     db0:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     db4:	80 91 5b 02 	lds	r24, 0x025B
     db8:	61 e0       	ldi	r22, 0x01	; 1
     dba:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     dbe:	80 91 5c 02 	lds	r24, 0x025C
     dc2:	61 e0       	ldi	r22, 0x01	; 1
     dc4:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     dc8:	80 91 2d 02 	lds	r24, 0x022D
     dcc:	90 91 2e 02 	lds	r25, 0x022E
     dd0:	61 e0       	ldi	r22, 0x01	; 1
     dd2:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     dd6:	80 91 2d 02 	lds	r24, 0x022D
     dda:	90 91 2e 02 	lds	r25, 0x022E
     dde:	89 2f       	mov	r24, r25
     de0:	61 e0       	ldi	r22, 0x01	; 1
     de2:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     de6:	80 91 5d 02 	lds	r24, 0x025D
     dea:	61 e0       	ldi	r22, 0x01	; 1
     dec:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     df0:	80 91 5e 02 	lds	r24, 0x025E
     df4:	61 e0       	ldi	r22, 0x01	; 1
     df6:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     dfa:	80 91 31 02 	lds	r24, 0x0231
     dfe:	90 91 32 02 	lds	r25, 0x0232
     e02:	61 e0       	ldi	r22, 0x01	; 1
     e04:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     e08:	80 91 31 02 	lds	r24, 0x0231
     e0c:	90 91 32 02 	lds	r25, 0x0232
     e10:	89 2f       	mov	r24, r25
     e12:	61 e0       	ldi	r22, 0x01	; 1
     e14:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     e18:	80 91 5f 02 	lds	r24, 0x025F
     e1c:	61 e0       	ldi	r22, 0x01	; 1
     e1e:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     e22:	80 91 60 02 	lds	r24, 0x0260
     e26:	61 e0       	ldi	r22, 0x01	; 1
     e28:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     e2c:	80 91 35 02 	lds	r24, 0x0235
     e30:	90 91 36 02 	lds	r25, 0x0236
     e34:	61 e0       	ldi	r22, 0x01	; 1
     e36:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     e3a:	80 91 35 02 	lds	r24, 0x0235
     e3e:	90 91 36 02 	lds	r25, 0x0236
     e42:	89 2f       	mov	r24, r25
     e44:	61 e0       	ldi	r22, 0x01	; 1
     e46:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     e4a:	80 91 61 02 	lds	r24, 0x0261
     e4e:	61 e0       	ldi	r22, 0x01	; 1
     e50:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     e54:	80 91 62 02 	lds	r24, 0x0262
     e58:	61 e0       	ldi	r22, 0x01	; 1
     e5a:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     e5e:	80 91 39 02 	lds	r24, 0x0239
     e62:	90 91 3a 02 	lds	r25, 0x023A
     e66:	61 e0       	ldi	r22, 0x01	; 1
     e68:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     e6c:	80 91 39 02 	lds	r24, 0x0239
     e70:	90 91 3a 02 	lds	r25, 0x023A
     e74:	89 2f       	mov	r24, r25
     e76:	61 e0       	ldi	r22, 0x01	; 1
     e78:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     e7c:	80 91 63 02 	lds	r24, 0x0263
     e80:	61 e0       	ldi	r22, 0x01	; 1
     e82:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     e86:	80 91 64 02 	lds	r24, 0x0264
     e8a:	61 e0       	ldi	r22, 0x01	; 1
     e8c:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     e90:	80 91 3d 02 	lds	r24, 0x023D
     e94:	90 91 3e 02 	lds	r25, 0x023E
     e98:	61 e0       	ldi	r22, 0x01	; 1
     e9a:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     e9e:	80 91 3d 02 	lds	r24, 0x023D
     ea2:	90 91 3e 02 	lds	r25, 0x023E
     ea6:	89 2f       	mov	r24, r25
     ea8:	61 e0       	ldi	r22, 0x01	; 1
     eaa:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     eae:	80 91 65 02 	lds	r24, 0x0265
     eb2:	61 e0       	ldi	r22, 0x01	; 1
     eb4:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     eb8:	80 91 66 02 	lds	r24, 0x0266
     ebc:	61 e0       	ldi	r22, 0x01	; 1
     ebe:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     ec2:	80 91 41 02 	lds	r24, 0x0241
     ec6:	90 91 42 02 	lds	r25, 0x0242
     eca:	61 e0       	ldi	r22, 0x01	; 1
     ecc:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     ed0:	80 91 41 02 	lds	r24, 0x0241
     ed4:	90 91 42 02 	lds	r25, 0x0242
     ed8:	89 2f       	mov	r24, r25
     eda:	61 e0       	ldi	r22, 0x01	; 1
     edc:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     ee0:	80 91 67 02 	lds	r24, 0x0267
     ee4:	61 e0       	ldi	r22, 0x01	; 1
     ee6:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     eea:	80 91 68 02 	lds	r24, 0x0268
     eee:	61 e0       	ldi	r22, 0x01	; 1
     ef0:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     ef4:	80 91 45 02 	lds	r24, 0x0245
     ef8:	90 91 46 02 	lds	r25, 0x0246
     efc:	61 e0       	ldi	r22, 0x01	; 1
     efe:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     f02:	80 91 45 02 	lds	r24, 0x0245
     f06:	90 91 46 02 	lds	r25, 0x0246
     f0a:	89 2f       	mov	r24, r25
     f0c:	61 e0       	ldi	r22, 0x01	; 1
     f0e:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     f12:	80 91 69 02 	lds	r24, 0x0269
     f16:	61 e0       	ldi	r22, 0x01	; 1
     f18:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     f1c:	80 91 6a 02 	lds	r24, 0x026A
     f20:	61 e0       	ldi	r22, 0x01	; 1
     f22:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     f26:	80 91 49 02 	lds	r24, 0x0249
     f2a:	90 91 4a 02 	lds	r25, 0x024A
     f2e:	61 e0       	ldi	r22, 0x01	; 1
     f30:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     f34:	80 91 49 02 	lds	r24, 0x0249
     f38:	90 91 4a 02 	lds	r25, 0x024A
     f3c:	89 2f       	mov	r24, r25
     f3e:	61 e0       	ldi	r22, 0x01	; 1
     f40:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     f44:	80 91 6b 02 	lds	r24, 0x026B
     f48:	61 e0       	ldi	r22, 0x01	; 1
     f4a:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     f4e:	80 91 6c 02 	lds	r24, 0x026C
     f52:	61 e0       	ldi	r22, 0x01	; 1
     f54:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     f58:	80 91 4d 02 	lds	r24, 0x024D
     f5c:	90 91 4e 02 	lds	r25, 0x024E
     f60:	61 e0       	ldi	r22, 0x01	; 1
     f62:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     f66:	80 91 4d 02 	lds	r24, 0x024D
     f6a:	90 91 4e 02 	lds	r25, 0x024E
     f6e:	89 2f       	mov	r24, r25
     f70:	61 e0       	ldi	r22, 0x01	; 1
     f72:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     f76:	80 91 6d 02 	lds	r24, 0x026D
     f7a:	61 e0       	ldi	r22, 0x01	; 1
     f7c:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     f80:	80 91 6e 02 	lds	r24, 0x026E
     f84:	61 e0       	ldi	r22, 0x01	; 1
     f86:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     f8a:	80 91 51 02 	lds	r24, 0x0251
     f8e:	90 91 52 02 	lds	r25, 0x0252
     f92:	61 e0       	ldi	r22, 0x01	; 1
     f94:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     f98:	80 91 51 02 	lds	r24, 0x0251
     f9c:	90 91 52 02 	lds	r25, 0x0252
     fa0:	89 2f       	mov	r24, r25
     fa2:	61 e0       	ldi	r22, 0x01	; 1
     fa4:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     fa8:	80 91 6f 02 	lds	r24, 0x026F
     fac:	61 e0       	ldi	r22, 0x01	; 1
     fae:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     fb2:	80 91 70 02 	lds	r24, 0x0270
     fb6:	61 e0       	ldi	r22, 0x01	; 1
     fb8:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     fbc:	80 91 55 02 	lds	r24, 0x0255
     fc0:	90 91 56 02 	lds	r25, 0x0256
     fc4:	61 e0       	ldi	r22, 0x01	; 1
     fc6:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     fca:	80 91 55 02 	lds	r24, 0x0255
     fce:	90 91 56 02 	lds	r25, 0x0256
     fd2:	89 2f       	mov	r24, r25
     fd4:	61 e0       	ldi	r22, 0x01	; 1
     fd6:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
								}
								usart0Transmit(accX&0xFF,1);
     fda:	80 91 2a 04 	lds	r24, 0x042A
     fde:	61 e0       	ldi	r22, 0x01	; 1
     fe0:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
								usart0Transmit(accX>>8,1);
     fe4:	80 91 2b 04 	lds	r24, 0x042B
     fe8:	61 e0       	ldi	r22, 0x01	; 1
     fea:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
								usart0Transmit(accY&0xFF,1);
     fee:	80 91 2c 04 	lds	r24, 0x042C
     ff2:	61 e0       	ldi	r22, 0x01	; 1
     ff4:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
								usart0Transmit(accY>>8,1);
     ff8:	80 91 2d 04 	lds	r24, 0x042D
     ffc:	61 e0       	ldi	r22, 0x01	; 1
     ffe:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
								usart0Transmit(accZ&0xFF,1);
    1002:	80 91 2e 04 	lds	r24, 0x042E
    1006:	61 e0       	ldi	r22, 0x01	; 1
    1008:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
								usart0Transmit(accZ>>8,1);
    100c:	80 91 2f 04 	lds	r24, 0x042F
    1010:	61 e0       	ldi	r22, 0x01	; 1
    1012:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
								usart0Transmit(irCommand,1);
    1016:	80 91 25 04 	lds	r24, 0x0425
    101a:	61 e0       	ldi	r22, 0x01	; 1
    101c:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
								usart0Transmit(currentSelector,1);
    1020:	80 91 4a 04 	lds	r24, 0x044A
    1024:	61 e0       	ldi	r22, 0x01	; 1
    1026:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
								usart0Transmit(BUTTON0,1);
    102a:	80 91 03 01 	lds	r24, 0x0103
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	80 72       	andi	r24, 0x20	; 32
    1032:	90 70       	andi	r25, 0x00	; 0
    1034:	95 95       	asr	r25
    1036:	87 95       	ror	r24
    1038:	95 95       	asr	r25
    103a:	87 95       	ror	r24
    103c:	95 95       	asr	r25
    103e:	87 95       	ror	r24
    1040:	95 95       	asr	r25
    1042:	87 95       	ror	r24
    1044:	95 95       	asr	r25
    1046:	87 95       	ror	r24
    1048:	61 e0       	ldi	r22, 0x01	; 1
    104a:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
								usart0Transmit(rfFlags,1);
    104e:	80 91 17 03 	lds	r24, 0x0317
    1052:	61 e0       	ldi	r22, 0x01	; 1
    1054:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
								usart0Transmit(((unsigned int)(theta*573.0))&0xFF,1);	// radians to degrees => 573 = 1800/PI
    1058:	60 91 6d 04 	lds	r22, 0x046D
    105c:	70 91 6e 04 	lds	r23, 0x046E
    1060:	80 91 6f 04 	lds	r24, 0x046F
    1064:	90 91 70 04 	lds	r25, 0x0470
    1068:	20 e0       	ldi	r18, 0x00	; 0
    106a:	30 e4       	ldi	r19, 0x40	; 64
    106c:	4f e0       	ldi	r20, 0x0F	; 15
    106e:	54 e4       	ldi	r21, 0x44	; 68
    1070:	0e 94 03 4b 	call	0x9606	; 0x9606 <__mulsf3>
    1074:	0e 94 c0 49 	call	0x9380	; 0x9380 <__fixunssfsi>
    1078:	86 2f       	mov	r24, r22
    107a:	61 e0       	ldi	r22, 0x01	; 1
    107c:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
								usart0Transmit(((unsigned int)(theta*573.0))>>8,1);
    1080:	60 91 6d 04 	lds	r22, 0x046D
    1084:	70 91 6e 04 	lds	r23, 0x046E
    1088:	80 91 6f 04 	lds	r24, 0x046F
    108c:	90 91 70 04 	lds	r25, 0x0470
    1090:	20 e0       	ldi	r18, 0x00	; 0
    1092:	30 e4       	ldi	r19, 0x40	; 64
    1094:	4f e0       	ldi	r20, 0x0F	; 15
    1096:	54 e4       	ldi	r21, 0x44	; 68
    1098:	0e 94 03 4b 	call	0x9606	; 0x9606 <__mulsf3>
    109c:	0e 94 c0 49 	call	0x9380	; 0x9380 <__fixunssfsi>
    10a0:	87 2f       	mov	r24, r23
    10a2:	61 e0       	ldi	r22, 0x01	; 1
    10a4:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
								usart0Transmit(((unsigned int)xPos)&0xFF,1);
    10a8:	60 91 75 04 	lds	r22, 0x0475
    10ac:	70 91 76 04 	lds	r23, 0x0476
    10b0:	80 91 77 04 	lds	r24, 0x0477
    10b4:	90 91 78 04 	lds	r25, 0x0478
    10b8:	0e 94 c0 49 	call	0x9380	; 0x9380 <__fixunssfsi>
    10bc:	86 2f       	mov	r24, r22
    10be:	61 e0       	ldi	r22, 0x01	; 1
    10c0:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
								usart0Transmit(((unsigned int)xPos)>>8,1);
    10c4:	60 91 75 04 	lds	r22, 0x0475
    10c8:	70 91 76 04 	lds	r23, 0x0476
    10cc:	80 91 77 04 	lds	r24, 0x0477
    10d0:	90 91 78 04 	lds	r25, 0x0478
    10d4:	0e 94 c0 49 	call	0x9380	; 0x9380 <__fixunssfsi>
    10d8:	87 2f       	mov	r24, r23
    10da:	61 e0       	ldi	r22, 0x01	; 1
    10dc:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
								usart0Transmit(((unsigned int)yPos)&0xFF,1);
    10e0:	60 91 79 04 	lds	r22, 0x0479
    10e4:	70 91 7a 04 	lds	r23, 0x047A
    10e8:	80 91 7b 04 	lds	r24, 0x047B
    10ec:	90 91 7c 04 	lds	r25, 0x047C
    10f0:	0e 94 c0 49 	call	0x9380	; 0x9380 <__fixunssfsi>
    10f4:	86 2f       	mov	r24, r22
    10f6:	61 e0       	ldi	r22, 0x01	; 1
    10f8:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
								usart0Transmit(((unsigned int)yPos)>>8,1);
    10fc:	60 91 79 04 	lds	r22, 0x0479
    1100:	70 91 7a 04 	lds	r23, 0x047A
    1104:	80 91 7b 04 	lds	r24, 0x047B
    1108:	90 91 7c 04 	lds	r25, 0x047C
    110c:	0e 94 c0 49 	call	0x9380	; 0x9380 <__fixunssfsi>
    1110:	87 2f       	mov	r24, r23
    1112:	61 e0       	ldi	r22, 0x01	; 1
    1114:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)&0xFF,1);
    1118:	60 91 d5 02 	lds	r22, 0x02D5
    111c:	70 91 d6 02 	lds	r23, 0x02D6
    1120:	80 91 d7 02 	lds	r24, 0x02D7
    1124:	90 91 d8 02 	lds	r25, 0x02D8
    1128:	0e 94 bb 49 	call	0x9376	; 0x9376 <__fixsfsi>
    112c:	86 2f       	mov	r24, r22
    112e:	61 e0       	ldi	r22, 0x01	; 1
    1130:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)>>8,1);
    1134:	60 91 d5 02 	lds	r22, 0x02D5
    1138:	70 91 d6 02 	lds	r23, 0x02D6
    113c:	80 91 d7 02 	lds	r24, 0x02D7
    1140:	90 91 d8 02 	lds	r25, 0x02D8
    1144:	0e 94 bb 49 	call	0x9376	; 0x9376 <__fixsfsi>
    1148:	87 2f       	mov	r24, r23
    114a:	61 e0       	ldi	r22, 0x01	; 1
    114c:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)>>16,1);
    1150:	60 91 d5 02 	lds	r22, 0x02D5
    1154:	70 91 d6 02 	lds	r23, 0x02D6
    1158:	80 91 d7 02 	lds	r24, 0x02D7
    115c:	90 91 d8 02 	lds	r25, 0x02D8
    1160:	0e 94 bb 49 	call	0x9376	; 0x9376 <__fixsfsi>
    1164:	61 e0       	ldi	r22, 0x01	; 1
    1166:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)>>24,1);
    116a:	60 91 d5 02 	lds	r22, 0x02D5
    116e:	70 91 d6 02 	lds	r23, 0x02D6
    1172:	80 91 d7 02 	lds	r24, 0x02D7
    1176:	90 91 d8 02 	lds	r25, 0x02D8
    117a:	0e 94 bb 49 	call	0x9376	; 0x9376 <__fixsfsi>
    117e:	89 2f       	mov	r24, r25
    1180:	61 e0       	ldi	r22, 0x01	; 1
    1182:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)&0xFF,1);
    1186:	60 91 d1 02 	lds	r22, 0x02D1
    118a:	70 91 d2 02 	lds	r23, 0x02D2
    118e:	80 91 d3 02 	lds	r24, 0x02D3
    1192:	90 91 d4 02 	lds	r25, 0x02D4
    1196:	0e 94 bb 49 	call	0x9376	; 0x9376 <__fixsfsi>
    119a:	86 2f       	mov	r24, r22
    119c:	61 e0       	ldi	r22, 0x01	; 1
    119e:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)>>8,1);
    11a2:	60 91 d1 02 	lds	r22, 0x02D1
    11a6:	70 91 d2 02 	lds	r23, 0x02D2
    11aa:	80 91 d3 02 	lds	r24, 0x02D3
    11ae:	90 91 d4 02 	lds	r25, 0x02D4
    11b2:	0e 94 bb 49 	call	0x9376	; 0x9376 <__fixsfsi>
    11b6:	87 2f       	mov	r24, r23
    11b8:	61 e0       	ldi	r22, 0x01	; 1
    11ba:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)>>16,1);
    11be:	60 91 d1 02 	lds	r22, 0x02D1
    11c2:	70 91 d2 02 	lds	r23, 0x02D2
    11c6:	80 91 d3 02 	lds	r24, 0x02D3
    11ca:	90 91 d4 02 	lds	r25, 0x02D4
    11ce:	0e 94 bb 49 	call	0x9376	; 0x9376 <__fixsfsi>
    11d2:	61 e0       	ldi	r22, 0x01	; 1
    11d4:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)>>24,1);
    11d8:	60 91 d1 02 	lds	r22, 0x02D1
    11dc:	70 91 d2 02 	lds	r23, 0x02D2
    11e0:	80 91 d3 02 	lds	r24, 0x02D3
    11e4:	90 91 d4 02 	lds	r25, 0x02D4
    11e8:	0e 94 bb 49 	call	0x9376	; 0x9376 <__fixsfsi>
    11ec:	89 2f       	mov	r24, r25
    11ee:	61 e0       	ldi	r22, 0x01	; 1
    11f0:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
								usart0Transmit(pwm_left_desired>>2, 1);
    11f4:	80 91 fb 02 	lds	r24, 0x02FB
    11f8:	90 91 fc 02 	lds	r25, 0x02FC
    11fc:	95 95       	asr	r25
    11fe:	87 95       	ror	r24
    1200:	95 95       	asr	r25
    1202:	87 95       	ror	r24
    1204:	61 e0       	ldi	r22, 0x01	; 1
    1206:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
								usart0Transmit(pwm_right_desired>>2, 1);
    120a:	80 91 f9 02 	lds	r24, 0x02F9
    120e:	90 91 fa 02 	lds	r25, 0x02FA
    1212:	95 95       	asr	r25
    1214:	87 95       	ror	r24
    1216:	95 95       	asr	r25
    1218:	87 95       	ror	r24
    121a:	61 e0       	ldi	r22, 0x01	; 1
    121c:	0e 94 bf 1c 	call	0x397e	; 0x397e <usart0Transmit>
    1220:	80 91 4a 04 	lds	r24, 0x044A
    1224:	57 c8       	rjmp	.-3922   	; 0x2d4 <main+0xf8>
						//setRightSpeed(25);
						demoState = 1;
						break;

					case 1:
						irCommSendData(irCommRxByteExpected, 0x01);
    1226:	80 91 e8 04 	lds	r24, 0x04E8
    122a:	61 e0       	ldi	r22, 0x01	; 1
    122c:	0e 94 6a 48 	call	0x90d4	; 0x90d4 <irCommSendData>
						// send commands to turn on green leds
						irCommRxByteExpected++;
    1230:	80 91 e8 04 	lds	r24, 0x04E8
    1234:	8f 5f       	subi	r24, 0xFF	; 255
    1236:	80 93 e8 04 	sts	0x04E8, r24
						if(irCommRxByteExpected==8) {
    123a:	88 30       	cpi	r24, 0x08	; 8
    123c:	09 f4       	brne	.+2      	; 0x1240 <main+0x1064>
    123e:	57 c2       	rjmp	.+1198   	; 0x16ee <main+0x1512>
							irCommRxByteExpected=0;
						}
						demoState = 2;
    1240:	82 e0       	ldi	r24, 0x02	; 2
    1242:	80 93 4e 04 	sts	0x044E, r24
    1246:	80 91 4a 04 	lds	r24, 0x044A
						break;
    124a:	44 c8       	rjmp	.-3960   	; 0x2d4 <main+0xf8>
							demoStartTime = getTime100MicroSec();
							demoState = 1;
							break;

						case 1:
							if((getTime100MicroSec()-demoStartTime) >= (PAUSE_2_SEC)) {
    124c:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <getTime100MicroSec>
    1250:	9b 01       	movw	r18, r22
    1252:	ac 01       	movw	r20, r24
    1254:	80 91 52 04 	lds	r24, 0x0452
    1258:	90 91 53 04 	lds	r25, 0x0453
    125c:	a0 91 54 04 	lds	r26, 0x0454
    1260:	b0 91 55 04 	lds	r27, 0x0455
    1264:	28 1b       	sub	r18, r24
    1266:	39 0b       	sbc	r19, r25
    1268:	4a 0b       	sbc	r20, r26
    126a:	5b 0b       	sbc	r21, r27
    126c:	2e 31       	cpi	r18, 0x1E	; 30
    126e:	eb e4       	ldi	r30, 0x4B	; 75
    1270:	3e 07       	cpc	r19, r30
    1272:	e0 e0       	ldi	r30, 0x00	; 0
    1274:	4e 07       	cpc	r20, r30
    1276:	e0 e0       	ldi	r30, 0x00	; 0
    1278:	5e 07       	cpc	r21, r30
    127a:	08 f4       	brcc	.+2      	; 0x127e <main+0x10a2>
    127c:	13 cc       	rjmp	.-2010   	; 0xaa4 <main+0x8c8>
								demoState = 2;
    127e:	f2 e0       	ldi	r31, 0x02	; 2
    1280:	f0 93 4e 04 	sts	0x044E, r31
    1284:	80 91 4a 04 	lds	r24, 0x044A
    1288:	25 c8       	rjmp	.-4022   	; 0x2d4 <main+0xf8>
							setLeftSpeed(20);
							setRightSpeed(20);
							demoState = 1;
							break;
						case 1: // motion					
							if((getTime100MicroSec()-demoStartTime) >= (PAUSE_4_SEC)) {
    128a:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <getTime100MicroSec>
    128e:	9b 01       	movw	r18, r22
    1290:	ac 01       	movw	r20, r24
    1292:	80 91 52 04 	lds	r24, 0x0452
    1296:	90 91 53 04 	lds	r25, 0x0453
    129a:	a0 91 54 04 	lds	r26, 0x0454
    129e:	b0 91 55 04 	lds	r27, 0x0455
    12a2:	28 1b       	sub	r18, r24
    12a4:	39 0b       	sbc	r19, r25
    12a6:	4a 0b       	sbc	r20, r26
    12a8:	5b 0b       	sbc	r21, r27
    12aa:	2e 33       	cpi	r18, 0x3E	; 62
    12ac:	66 e9       	ldi	r22, 0x96	; 150
    12ae:	36 07       	cpc	r19, r22
    12b0:	60 e0       	ldi	r22, 0x00	; 0
    12b2:	46 07       	cpc	r20, r22
    12b4:	60 e0       	ldi	r22, 0x00	; 0
    12b6:	56 07       	cpc	r21, r22
    12b8:	08 f4       	brcc	.+2      	; 0x12bc <main+0x10e0>
    12ba:	99 c8       	rjmp	.-3790   	; 0x3ee <main+0x212>
								setRightSpeed(0);
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <setRightSpeed>
								setLeftSpeed(0);								
    12c2:	80 e0       	ldi	r24, 0x00	; 0
    12c4:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <setLeftSpeed>
								demoStartTime = getTime100MicroSec();
    12c8:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <getTime100MicroSec>
    12cc:	60 93 52 04 	sts	0x0452, r22
    12d0:	70 93 53 04 	sts	0x0453, r23
    12d4:	80 93 54 04 	sts	0x0454, r24
    12d8:	90 93 55 04 	sts	0x0455, r25
								demoState = 2;							
    12dc:	82 e0       	ldi	r24, 0x02	; 2
    12de:	80 93 4e 04 	sts	0x044E, r24
    12e2:	85 c8       	rjmp	.-3830   	; 0x3ee <main+0x212>
			readBatteryLevel();				// the battery level is updated every two seconds
             		
			if(currentSelector==4 || currentSelector==5) {
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption

				switch(rgbState) {
    12e4:	82 30       	cpi	r24, 0x02	; 2
    12e6:	09 f0       	breq	.+2      	; 0x12ea <main+0x110e>
    12e8:	66 cb       	rjmp	.-2356   	; 0x9b6 <main+0x7da>
						pwm_green = 255 - currRand;
						rgbState = 2;
						break;

					case 2:
						pwm_blue = 255 - currRand;
    12ea:	8a 2d       	mov	r24, r10
    12ec:	80 95       	com	r24
    12ee:	80 93 0e 02 	sts	0x020E, r24
						rgbState = 0;
    12f2:	10 92 1a 03 	sts	0x031A, r1
						break;
    12f6:	5f cb       	rjmp	.-2370   	; 0x9b6 <main+0x7da>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
    12f8:	81 30       	cpi	r24, 0x01	; 1
    12fa:	09 f0       	breq	.+2      	; 0x12fe <main+0x1122>
    12fc:	ba c8       	rjmp	.-3724   	; 0x472 <main+0x296>
							//pwm_green = 255;
							//pwm_blue = 255;
							break;

						case 1:	// search for a line
							turnOffGreenLeds();
    12fe:	0e 94 e0 3b 	call	0x77c0	; 0x77c0 <turnOffGreenLeds>
							GREEN_LED2_ON;
    1302:	80 91 0b 01 	lds	r24, 0x010B
    1306:	8b 7f       	andi	r24, 0xFB	; 251
    1308:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED3_ON;
							outOfLine = 0;
    130c:	10 92 50 04 	sts	0x0450, r1
							enableObstacleAvoidance();
    1310:	0e 94 bc 3a 	call	0x7578	; 0x7578 <enableObstacleAvoidance>
							setRightSpeed(15);
    1314:	8f e0       	ldi	r24, 0x0F	; 15
    1316:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <setRightSpeed>
							setLeftSpeed(15);
    131a:	8f e0       	ldi	r24, 0x0F	; 15
    131c:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <setLeftSpeed>
							if(proximityResult[9]<LINE_IN_THR || proximityResult[10]<LINE_IN_THR || proximityResult[8]<LINE_IN_THR || proximityResult[11]<LINE_IN_THR) {
    1320:	80 91 6b 02 	lds	r24, 0x026B
    1324:	90 91 6c 02 	lds	r25, 0x026C
    1328:	e1 e0       	ldi	r30, 0x01	; 1
    132a:	80 39       	cpi	r24, 0x90	; 144
    132c:	9e 07       	cpc	r25, r30
    132e:	0c f4       	brge	.+2      	; 0x1332 <main+0x1156>
    1330:	44 c1       	rjmp	.+648    	; 0x15ba <main+0x13de>
    1332:	80 91 6d 02 	lds	r24, 0x026D
    1336:	90 91 6e 02 	lds	r25, 0x026E
    133a:	f1 e0       	ldi	r31, 0x01	; 1
    133c:	80 39       	cpi	r24, 0x90	; 144
    133e:	9f 07       	cpc	r25, r31
    1340:	0c f4       	brge	.+2      	; 0x1344 <main+0x1168>
    1342:	3b c1       	rjmp	.+630    	; 0x15ba <main+0x13de>
    1344:	80 91 69 02 	lds	r24, 0x0269
    1348:	90 91 6a 02 	lds	r25, 0x026A
    134c:	21 e0       	ldi	r18, 0x01	; 1
    134e:	80 39       	cpi	r24, 0x90	; 144
    1350:	92 07       	cpc	r25, r18
    1352:	0c f4       	brge	.+2      	; 0x1356 <main+0x117a>
    1354:	32 c1       	rjmp	.+612    	; 0x15ba <main+0x13de>
    1356:	80 91 6f 02 	lds	r24, 0x026F
    135a:	90 91 70 02 	lds	r25, 0x0270
    135e:	31 e0       	ldi	r19, 0x01	; 1
    1360:	80 39       	cpi	r24, 0x90	; 144
    1362:	93 07       	cpc	r25, r19
    1364:	0c f4       	brge	.+2      	; 0x1368 <main+0x118c>
    1366:	29 c1       	rjmp	.+594    	; 0x15ba <main+0x13de>
									demoStartTime = getTime100MicroSec();
									demoState = 2;
									break;
								}
							} else {
								lineFound = 0;
    1368:	10 92 4f 04 	sts	0x044F, r1
    136c:	82 c8       	rjmp	.-3836   	; 0x472 <main+0x296>
						pwm_red = 255 - currRand;	
						rgbState = 1;
						break;

					case 1:
						pwm_green = 255 - currRand;
    136e:	8a 2d       	mov	r24, r10
    1370:	80 95       	com	r24
    1372:	80 93 0d 02 	sts	0x020D, r24
						rgbState = 2;
    1376:	62 e0       	ldi	r22, 0x02	; 2
    1378:	60 93 1a 03 	sts	0x031A, r22
						break;
    137c:	1c cb       	rjmp	.-2504   	; 0x9b6 <main+0x7da>
					}
				} else if(currRand<64) {
					if(pwm_red!=255 && pwm_blue!=255) {
						pwm_green = 255;
					}
				} else if (currRand<96) {
    137e:	e0 e6       	ldi	r30, 0x60	; 96
    1380:	ae 16       	cp	r10, r30
    1382:	b1 04       	cpc	r11, r1
    1384:	08 f0       	brcs	.+2      	; 0x1388 <main+0x11ac>
    1386:	ca c9       	rjmp	.-3180   	; 0x71c <main+0x540>
					if(pwm_red!=255 && pwm_green!=255) {
    1388:	80 91 0c 02 	lds	r24, 0x020C
    138c:	8f 3f       	cpi	r24, 0xFF	; 255
    138e:	09 f4       	brne	.+2      	; 0x1392 <main+0x11b6>
    1390:	c5 c9       	rjmp	.-3190   	; 0x71c <main+0x540>
    1392:	80 91 0d 02 	lds	r24, 0x020D
    1396:	8f 3f       	cpi	r24, 0xFF	; 255
    1398:	09 f4       	brne	.+2      	; 0x139c <main+0x11c0>
    139a:	c0 c9       	rjmp	.-3200   	; 0x71c <main+0x540>
						pwm_blue = 255;
    139c:	10 93 0e 02 	sts	0x020E, r17
    13a0:	bd c9       	rjmp	.-3206   	; 0x71c <main+0x540>
							//pwm_green = 255;
							//pwm_blue = 0;
							break;

						case 3:	// charge for some time
							turnOffGreenLeds();
    13a2:	0e 94 e0 3b 	call	0x77c0	; 0x77c0 <turnOffGreenLeds>
							GREEN_LED6_ON;
    13a6:	80 91 0b 01 	lds	r24, 0x010B
    13aa:	8f 7b       	andi	r24, 0xBF	; 191
    13ac:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED7_ON;
							demoEndTime = getTime100MicroSec();
    13b0:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <getTime100MicroSec>
    13b4:	9b 01       	movw	r18, r22
    13b6:	ac 01       	movw	r20, r24
    13b8:	60 93 5a 04 	sts	0x045A, r22
    13bc:	70 93 5b 04 	sts	0x045B, r23
    13c0:	80 93 5c 04 	sts	0x045C, r24
    13c4:	90 93 5d 04 	sts	0x045D, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_30_SEC)) {
    13c8:	80 91 52 04 	lds	r24, 0x0452
    13cc:	90 91 53 04 	lds	r25, 0x0453
    13d0:	a0 91 54 04 	lds	r26, 0x0454
    13d4:	b0 91 55 04 	lds	r27, 0x0455
    13d8:	28 1b       	sub	r18, r24
    13da:	39 0b       	sbc	r19, r25
    13dc:	4a 0b       	sbc	r20, r26
    13de:	5b 0b       	sbc	r21, r27
    13e0:	2d 3c       	cpi	r18, 0xCD	; 205
    13e2:	66 e6       	ldi	r22, 0x66	; 102
    13e4:	36 07       	cpc	r19, r22
    13e6:	64 e0       	ldi	r22, 0x04	; 4
    13e8:	46 07       	cpc	r20, r22
    13ea:	60 e0       	ldi	r22, 0x00	; 0
    13ec:	56 07       	cpc	r21, r22
    13ee:	08 f4       	brcc	.+2      	; 0x13f2 <main+0x1216>
    13f0:	38 c1       	rjmp	.+624    	; 0x1662 <main+0x1486>
								if(batteryLevel<890) {//860) {	// stay in charge if too much discharged (consider the fact that the robot
    13f2:	80 91 bd 02 	lds	r24, 0x02BD
    13f6:	90 91 be 02 	lds	r25, 0x02BE
    13fa:	e3 e0       	ldi	r30, 0x03	; 3
    13fc:	8a 37       	cpi	r24, 0x7A	; 122
    13fe:	9e 07       	cpc	r25, r30
    1400:	08 f4       	brcc	.+2      	; 0x1404 <main+0x1228>
    1402:	3d c1       	rjmp	.+634    	; 0x167e <main+0x14a2>
														// is still in charge thus the battery value measured is higher)
									demoStartTime = getTime100MicroSec();
									break;
								} else {
									setRightSpeed(-13);
    1404:	83 ef       	ldi	r24, 0xF3	; 243
    1406:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <setRightSpeed>
									setLeftSpeed(-13);
    140a:	83 ef       	ldi	r24, 0xF3	; 243
    140c:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <setLeftSpeed>
									demoStartTime = getTime100MicroSec();
    1410:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <getTime100MicroSec>
    1414:	60 93 52 04 	sts	0x0452, r22
    1418:	70 93 53 04 	sts	0x0453, r23
    141c:	80 93 54 04 	sts	0x0454, r24
    1420:	90 93 55 04 	sts	0x0455, r25
									demoState = 4;
    1424:	f4 e0       	ldi	r31, 0x04	; 4
    1426:	f0 93 4e 04 	sts	0x044E, r31
									break;
    142a:	23 c8       	rjmp	.-4026   	; 0x472 <main+0x296>
							//pwm_green = 255;
							//pwm_blue = 0;
							break;
						
						case 4: // go back from charger
							turnOffGreenLeds();
    142c:	0e 94 e0 3b 	call	0x77c0	; 0x77c0 <turnOffGreenLeds>
							GREEN_LED6_ON;
    1430:	80 91 0b 01 	lds	r24, 0x010B
    1434:	8f 7b       	andi	r24, 0xBF	; 191
    1436:	80 93 0b 01 	sts	0x010B, r24
							GREEN_LED7_ON;
    143a:	80 91 0b 01 	lds	r24, 0x010B
    143e:	8f 77       	andi	r24, 0x7F	; 127
    1440:	80 93 0b 01 	sts	0x010B, r24
							demoEndTime = getTime100MicroSec();
    1444:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <getTime100MicroSec>
    1448:	9b 01       	movw	r18, r22
    144a:	ac 01       	movw	r20, r24
    144c:	60 93 5a 04 	sts	0x045A, r22
    1450:	70 93 5b 04 	sts	0x045B, r23
    1454:	80 93 5c 04 	sts	0x045C, r24
    1458:	90 93 5d 04 	sts	0x045D, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_1_SEC)) {
    145c:	80 91 52 04 	lds	r24, 0x0452
    1460:	90 91 53 04 	lds	r25, 0x0453
    1464:	a0 91 54 04 	lds	r26, 0x0454
    1468:	b0 91 55 04 	lds	r27, 0x0455
    146c:	28 1b       	sub	r18, r24
    146e:	39 0b       	sbc	r19, r25
    1470:	4a 0b       	sbc	r20, r26
    1472:	5b 0b       	sbc	r21, r27
    1474:	2f 38       	cpi	r18, 0x8F	; 143
    1476:	65 e2       	ldi	r22, 0x25	; 37
    1478:	36 07       	cpc	r19, r22
    147a:	60 e0       	ldi	r22, 0x00	; 0
    147c:	46 07       	cpc	r20, r22
    147e:	60 e0       	ldi	r22, 0x00	; 0
    1480:	56 07       	cpc	r21, r22
    1482:	10 f4       	brcc	.+4      	; 0x1488 <main+0x12ac>
    1484:	0c 94 39 02 	jmp	0x472	; 0x472 <main+0x296>
								setRightSpeed(20);
    1488:	84 e1       	ldi	r24, 0x14	; 20
    148a:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <setRightSpeed>
								setLeftSpeed(-20);								
    148e:	8c ee       	ldi	r24, 0xEC	; 236
    1490:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <setLeftSpeed>
								demoStartTime = getTime100MicroSec();
    1494:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <getTime100MicroSec>
    1498:	60 93 52 04 	sts	0x0452, r22
    149c:	70 93 53 04 	sts	0x0453, r23
    14a0:	80 93 54 04 	sts	0x0454, r24
    14a4:	90 93 55 04 	sts	0x0455, r25
								demoState = 5;							
    14a8:	85 e0       	ldi	r24, 0x05	; 5
    14aa:	80 93 4e 04 	sts	0x044E, r24
    14ae:	0c 94 39 02 	jmp	0x472	; 0x472 <main+0x296>
							//pwm_green = 0;
							//pwm_blue = 255;
							break;

						case 2:	// line found, follow it
							turnOffGreenLeds();
    14b2:	0e 94 e0 3b 	call	0x77c0	; 0x77c0 <turnOffGreenLeds>
							GREEN_LED4_ON;
    14b6:	80 91 0b 01 	lds	r24, 0x010B
    14ba:	8f 7e       	andi	r24, 0xEF	; 239
    14bc:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED5_ON;
							disableObstacleAvoidance();
    14c0:	0e 94 c0 3a 	call	0x7580	; 0x7580 <disableObstacleAvoidance>

							demoEndTime = getTime100MicroSec();
    14c4:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <getTime100MicroSec>
    14c8:	9b 01       	movw	r18, r22
    14ca:	ac 01       	movw	r20, r24
    14cc:	60 93 5a 04 	sts	0x045A, r22
    14d0:	70 93 5b 04 	sts	0x045B, r23
    14d4:	80 93 5c 04 	sts	0x045C, r24
    14d8:	90 93 5d 04 	sts	0x045D, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {	// the robot seems to be blocked somehow
    14dc:	80 91 52 04 	lds	r24, 0x0452
    14e0:	90 91 53 04 	lds	r25, 0x0453
    14e4:	a0 91 54 04 	lds	r26, 0x0454
    14e8:	b0 91 55 04 	lds	r27, 0x0455
    14ec:	28 1b       	sub	r18, r24
    14ee:	39 0b       	sbc	r19, r25
    14f0:	4a 0b       	sbc	r20, r26
    14f2:	5b 0b       	sbc	r21, r27
    14f4:	23 33       	cpi	r18, 0x33	; 51
    14f6:	6f ee       	ldi	r22, 0xEF	; 239
    14f8:	36 07       	cpc	r19, r22
    14fa:	62 e0       	ldi	r22, 0x02	; 2
    14fc:	46 07       	cpc	r20, r22
    14fe:	60 e0       	ldi	r22, 0x00	; 0
    1500:	56 07       	cpc	r21, r22
    1502:	08 f0       	brcs	.+2      	; 0x1506 <main+0x132a>
    1504:	5b c1       	rjmp	.+694    	; 0x17bc <main+0x15e0>
								demoStartTime = getTime100MicroSec();
								demoState = 4;
								break;
							}

							if(CHARGE_ON) {
    1506:	80 91 03 01 	lds	r24, 0x0103
    150a:	84 ff       	sbrs	r24, 4
    150c:	11 c1       	rjmp	.+546    	; 0x1730 <main+0x1554>
								outOfLine = 0;
    150e:	10 92 50 04 	sts	0x0450, r1
								chargeContact++;
    1512:	80 91 51 04 	lds	r24, 0x0451
    1516:	8f 5f       	subi	r24, 0xFF	; 255
    1518:	80 93 51 04 	sts	0x0451, r24
								if(chargeContact > 20) {
    151c:	85 31       	cpi	r24, 0x15	; 21
    151e:	08 f0       	brcs	.+2      	; 0x1522 <main+0x1346>
    1520:	84 c1       	rjmp	.+776    	; 0x182a <main+0x164e>
    1522:	80 91 6b 02 	lds	r24, 0x026B
    1526:	90 91 6c 02 	lds	r25, 0x026C
								} else {
									outOfLine = 0;
								}
							}
							
							if(proximityResult[8]<LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR && proximityResult[11]>LINE_OUT_THR) {	// left ground is the only within the black line => turn left
    152a:	20 91 69 02 	lds	r18, 0x0269
    152e:	30 91 6a 02 	lds	r19, 0x026A
    1532:	41 e0       	ldi	r20, 0x01	; 1
    1534:	22 3c       	cpi	r18, 0xC2	; 194
    1536:	34 07       	cpc	r19, r20
    1538:	ac f4       	brge	.+42     	; 0x1564 <main+0x1388>
    153a:	51 e0       	ldi	r21, 0x01	; 1
    153c:	83 3c       	cpi	r24, 0xC3	; 195
    153e:	95 07       	cpc	r25, r21
    1540:	8c f0       	brlt	.+34     	; 0x1564 <main+0x1388>
    1542:	40 91 6d 02 	lds	r20, 0x026D
    1546:	50 91 6e 02 	lds	r21, 0x026E
    154a:	61 e0       	ldi	r22, 0x01	; 1
    154c:	43 3c       	cpi	r20, 0xC3	; 195
    154e:	56 07       	cpc	r21, r22
    1550:	4c f0       	brlt	.+18     	; 0x1564 <main+0x1388>
    1552:	40 91 6f 02 	lds	r20, 0x026F
    1556:	50 91 70 02 	lds	r21, 0x0270
    155a:	e1 e0       	ldi	r30, 0x01	; 1
    155c:	43 3c       	cpi	r20, 0xC3	; 195
    155e:	5e 07       	cpc	r21, r30
    1560:	0c f0       	brlt	.+2      	; 0x1564 <main+0x1388>
    1562:	b3 c1       	rjmp	.+870    	; 0x18ca <main+0x16ee>
								setLeftSpeed(-10);
								setRightSpeed(15);
							} else if(proximityResult[11]<LINE_OUT_THR && proximityResult[8]>LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {	// right ground is the only within the black line => turn right
    1564:	40 91 6f 02 	lds	r20, 0x026F
    1568:	50 91 70 02 	lds	r21, 0x0270
    156c:	f1 e0       	ldi	r31, 0x01	; 1
    156e:	42 3c       	cpi	r20, 0xC2	; 194
    1570:	5f 07       	cpc	r21, r31
    1572:	0c f0       	brlt	.+2      	; 0x1576 <main+0x139a>
    1574:	c7 c0       	rjmp	.+398    	; 0x1704 <main+0x1528>
    1576:	41 e0       	ldi	r20, 0x01	; 1
    1578:	23 3c       	cpi	r18, 0xC3	; 195
    157a:	34 07       	cpc	r19, r20
    157c:	0c f4       	brge	.+2      	; 0x1580 <main+0x13a4>
    157e:	c2 c0       	rjmp	.+388    	; 0x1704 <main+0x1528>
    1580:	51 e0       	ldi	r21, 0x01	; 1
    1582:	83 3c       	cpi	r24, 0xC3	; 195
    1584:	95 07       	cpc	r25, r21
    1586:	0c f4       	brge	.+2      	; 0x158a <main+0x13ae>
    1588:	c2 c0       	rjmp	.+388    	; 0x170e <main+0x1532>
    158a:	80 91 6d 02 	lds	r24, 0x026D
    158e:	90 91 6e 02 	lds	r25, 0x026E
    1592:	61 e0       	ldi	r22, 0x01	; 1
    1594:	83 3c       	cpi	r24, 0xC3	; 195
    1596:	96 07       	cpc	r25, r22
    1598:	0c f0       	brlt	.+2      	; 0x159c <main+0x13c0>
    159a:	9f c1       	rjmp	.+830    	; 0x18da <main+0x16fe>
								setLeftSpeed(15);
								setRightSpeed(-10);
							} else if(proximityResult[9]>LINE_OUT_THR) {	// center left is leaving the line => turn right
								setLeftSpeed(15);
    159c:	8f e0       	ldi	r24, 0x0F	; 15
    159e:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <setLeftSpeed>
								setRightSpeed(-5);
    15a2:	8b ef       	ldi	r24, 0xFB	; 251
    15a4:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <setRightSpeed>
    15a8:	0c 94 39 02 	jmp	0x472	; 0x472 <main+0x296>
				currRand2 = rand()%128;
				if(currRand2<32) {
					pwm_red = 255;
				} else if(currRand2<64) {
					pwm_green = 255;
				} else if (currRand2<96) {
    15ac:	80 36       	cpi	r24, 0x60	; 96
    15ae:	91 05       	cpc	r25, r1
    15b0:	08 f0       	brcs	.+2      	; 0x15b4 <main+0x13d8>
    15b2:	67 ca       	rjmp	.-2866   	; 0xa82 <main+0x8a6>
					pwm_blue = 255;
    15b4:	10 93 0e 02 	sts	0x020E, r17
    15b8:	64 ca       	rjmp	.-2872   	; 0xa82 <main+0x8a6>
							outOfLine = 0;
							enableObstacleAvoidance();
							setRightSpeed(15);
							setLeftSpeed(15);
							if(proximityResult[9]<LINE_IN_THR || proximityResult[10]<LINE_IN_THR || proximityResult[8]<LINE_IN_THR || proximityResult[11]<LINE_IN_THR) {
								lineFound++;
    15ba:	80 91 4f 04 	lds	r24, 0x044F
    15be:	8f 5f       	subi	r24, 0xFF	; 255
    15c0:	80 93 4f 04 	sts	0x044F, r24
								if(lineFound > 10) {
    15c4:	8b 30       	cpi	r24, 0x0B	; 11
    15c6:	10 f4       	brcc	.+4      	; 0x15cc <main+0x13f0>
    15c8:	0c 94 39 02 	jmp	0x472	; 0x472 <main+0x296>
									outOfLine = 0;
    15cc:	10 92 50 04 	sts	0x0450, r1
									chargeContact = 0;
    15d0:	10 92 51 04 	sts	0x0451, r1
									demoStartTime = getTime100MicroSec();
    15d4:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <getTime100MicroSec>
    15d8:	60 93 52 04 	sts	0x0452, r22
    15dc:	70 93 53 04 	sts	0x0453, r23
    15e0:	80 93 54 04 	sts	0x0454, r24
    15e4:	90 93 55 04 	sts	0x0455, r25
									demoState = 2;
    15e8:	42 e0       	ldi	r20, 0x02	; 2
    15ea:	40 93 4e 04 	sts	0x044E, r20
									break;
    15ee:	0c 94 39 02 	jmp	0x472	; 0x472 <main+0x296>
							}

							currRand = rand()% 200;
							if(currRand<50) {
								pwm_red = 255;
							} else if(currRand<100) {
    15f2:	84 36       	cpi	r24, 0x64	; 100
    15f4:	91 05       	cpc	r25, r1
    15f6:	08 f0       	brcs	.+2      	; 0x15fa <main+0x141e>
    15f8:	7d c0       	rjmp	.+250    	; 0x16f4 <main+0x1518>
								pwm_green = 255;
    15fa:	10 93 0d 02 	sts	0x020D, r17
    15fe:	80 91 0c 02 	lds	r24, 0x020C
    1602:	51 cb       	rjmp	.-2398   	; 0xca6 <main+0xaca>

							currRand = rand()% 128;
							if(currRand > 95) {
								pwm_blue = 255;
							} else {
								pwm_blue = currRand;
    1604:	80 93 0e 02 	sts	0x020E, r24
    1608:	40 cb       	rjmp	.-2432   	; 0xc8a <main+0xaae>

							currRand = rand()% 128;
							if(currRand > 95) {
								pwm_green = 255;
							} else {
								pwm_green = currRand;
    160a:	80 93 0d 02 	sts	0x020D, r24
    160e:	31 cb       	rjmp	.-2462   	; 0xc72 <main+0xa96>
							turnOffGreenLeds();					
							currRand = rand()% 128;	// 0 to 255 is the maximum, we use 0 to 127 to get brighter colors
							if(currRand > 95) {
								pwm_red = 255;
							} else {
								pwm_red = currRand;
    1610:	80 93 0c 02 	sts	0x020C, r24
    1614:	22 cb       	rjmp	.-2492   	; 0xc5a <main+0xa7e>
					} else if(pwm_right_desired > pwm_intermediate_right_desired) {
						pwm_intermediate_right_desired += speedStep;
						if(pwm_intermediate_right_desired > pwm_right_desired) {
							pwm_intermediate_right_desired = pwm_right_desired;
						}
					} else if(pwm_right_desired < pwm_intermediate_right_desired) {
    1616:	82 17       	cp	r24, r18
    1618:	93 07       	cpc	r25, r19
    161a:	0c f0       	brlt	.+2      	; 0x161e <main+0x1442>
    161c:	03 c8       	rjmp	.-4090   	; 0x624 <main+0x448>
						pwm_intermediate_right_desired -= speedStep;
    161e:	40 91 17 02 	lds	r20, 0x0217
    1622:	24 1b       	sub	r18, r20
    1624:	31 09       	sbc	r19, r1
    1626:	30 93 fe 02 	sts	0x02FE, r19
    162a:	20 93 fd 02 	sts	0x02FD, r18
						if(pwm_intermediate_right_desired < pwm_right_desired) {
    162e:	28 17       	cp	r18, r24
    1630:	39 07       	cpc	r19, r25
    1632:	14 f0       	brlt	.+4      	; 0x1638 <main+0x145c>
    1634:	0c 94 12 03 	jmp	0x624	; 0x624 <main+0x448>
    1638:	0c 94 0e 03 	jmp	0x61c	; 0x61c <main+0x440>
					} else if(pwm_left_desired > pwm_intermediate_left_desired) {
						pwm_intermediate_left_desired += speedStep;
						if(pwm_intermediate_left_desired > pwm_left_desired) {
							pwm_intermediate_left_desired = pwm_left_desired;
						}
					} else if(pwm_left_desired < pwm_intermediate_left_desired) {
    163c:	82 17       	cp	r24, r18
    163e:	93 07       	cpc	r25, r19
    1640:	14 f0       	brlt	.+4      	; 0x1646 <main+0x146a>
    1642:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <main+0xc8>
						pwm_intermediate_left_desired -= speedStep;
    1646:	40 91 17 02 	lds	r20, 0x0217
    164a:	24 1b       	sub	r18, r20
    164c:	31 09       	sbc	r19, r1
    164e:	30 93 00 03 	sts	0x0300, r19
    1652:	20 93 ff 02 	sts	0x02FF, r18
						if(pwm_intermediate_left_desired < pwm_left_desired) {
    1656:	28 17       	cp	r18, r24
    1658:	39 07       	cpc	r19, r25
    165a:	14 f0       	brlt	.+4      	; 0x1660 <main+0x1484>
    165c:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <main+0xc8>
    1660:	05 c8       	rjmp	.-4086   	; 0x66c <main+0x490>
									demoStartTime = getTime100MicroSec();
									demoState = 4;
									break;
								}
							}
							if(!CHARGE_ON) {
    1662:	80 91 03 01 	lds	r24, 0x0103
    1666:	84 ff       	sbrs	r24, 4
    1668:	02 c0       	rjmp	.+4      	; 0x166e <main+0x1492>
    166a:	0c 94 39 02 	jmp	0x472	; 0x472 <main+0x296>
								chargeContact = 0;
    166e:	10 92 51 04 	sts	0x0451, r1
								outOfLine = 0;
    1672:	10 92 50 04 	sts	0x0450, r1
								demoState = 2;
    1676:	82 e0       	ldi	r24, 0x02	; 2
    1678:	98 2e       	mov	r9, r24
    167a:	90 92 4e 04 	sts	0x044E, r9
								demoStartTime = getTime100MicroSec();
    167e:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <getTime100MicroSec>
    1682:	60 93 52 04 	sts	0x0452, r22
    1686:	70 93 53 04 	sts	0x0453, r23
    168a:	80 93 54 04 	sts	0x0454, r24
    168e:	90 93 55 04 	sts	0x0455, r25
								break;						
    1692:	0c 94 39 02 	jmp	0x472	; 0x472 <main+0x296>
								}
								setGreenLed(greenLedState, 1);
								demoEndTime = getTime100MicroSec();											
							}
							if((getTime100MicroSec()-demoStartTime2) >= (PAUSE_2_SEC)) {
								rgbLedState = 1;
    1696:	20 92 69 04 	sts	0x0469, r2
								demoStartTime2 = getTime100MicroSec();
    169a:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <getTime100MicroSec>
    169e:	60 93 56 04 	sts	0x0456, r22
    16a2:	70 93 57 04 	sts	0x0457, r23
    16a6:	80 93 58 04 	sts	0x0458, r24
    16aa:	90 93 59 04 	sts	0x0459, r25
    16ae:	0c 94 39 02 	jmp	0x472	; 0x472 <main+0x296>
						case 0:							
							pwm_red = 255;
							pwm_green = 255;
							pwm_blue = 255;
							if((getTime100MicroSec()-demoEndTime) >= (PAUSE_100_MSEC)) {
								setGreenLed(greenLedState, 0);
    16b2:	80 91 68 04 	lds	r24, 0x0468
    16b6:	60 e0       	ldi	r22, 0x00	; 0
    16b8:	0e 94 43 3b 	call	0x7686	; 0x7686 <setGreenLed>
								greenLedState++;
    16bc:	80 91 68 04 	lds	r24, 0x0468
    16c0:	8f 5f       	subi	r24, 0xFF	; 255
    16c2:	80 93 68 04 	sts	0x0468, r24
								if(greenLedState > 7) {
    16c6:	88 30       	cpi	r24, 0x08	; 8
    16c8:	18 f0       	brcs	.+6      	; 0x16d0 <main+0x14f4>
									greenLedState = 0;
    16ca:	10 92 68 04 	sts	0x0468, r1
    16ce:	80 e0       	ldi	r24, 0x00	; 0
								}
								setGreenLed(greenLedState, 1);
    16d0:	61 e0       	ldi	r22, 0x01	; 1
    16d2:	0e 94 43 3b 	call	0x7686	; 0x7686 <setGreenLed>
								demoEndTime = getTime100MicroSec();											
    16d6:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <getTime100MicroSec>
    16da:	60 93 5a 04 	sts	0x045A, r22
    16de:	70 93 5b 04 	sts	0x045B, r23
    16e2:	80 93 5c 04 	sts	0x045C, r24
    16e6:	90 93 5d 04 	sts	0x045D, r25
    16ea:	0c 94 1f 02 	jmp	0x43e	; 0x43e <main+0x262>
					case 1:
						irCommSendData(irCommRxByteExpected, 0x01);
						// send commands to turn on green leds
						irCommRxByteExpected++;
						if(irCommRxByteExpected==8) {
							irCommRxByteExpected=0;
    16ee:	10 92 e8 04 	sts	0x04E8, r1
    16f2:	a6 cd       	rjmp	.-1204   	; 0x1240 <main+0x1064>
							currRand = rand()% 200;
							if(currRand<50) {
								pwm_red = 255;
							} else if(currRand<100) {
								pwm_green = 255;
							} else if (currRand<150) {	
    16f4:	86 39       	cpi	r24, 0x96	; 150
    16f6:	91 05       	cpc	r25, r1
    16f8:	10 f4       	brcc	.+4      	; 0x16fe <main+0x1522>
								pwm_blue = 255;
    16fa:	10 93 0e 02 	sts	0x020E, r17
    16fe:	80 91 0c 02 	lds	r24, 0x020C
    1702:	d1 ca       	rjmp	.-2654   	; 0xca6 <main+0xaca>
								setLeftSpeed(-10);
								setRightSpeed(15);
							} else if(proximityResult[11]<LINE_OUT_THR && proximityResult[8]>LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {	// right ground is the only within the black line => turn right
								setLeftSpeed(15);
								setRightSpeed(-10);
							} else if(proximityResult[9]>LINE_OUT_THR) {	// center left is leaving the line => turn right
    1704:	e1 e0       	ldi	r30, 0x01	; 1
    1706:	83 3c       	cpi	r24, 0xC3	; 195
    1708:	9e 07       	cpc	r25, r30
    170a:	0c f0       	brlt	.+2      	; 0x170e <main+0x1532>
    170c:	47 cf       	rjmp	.-370    	; 0x159c <main+0x13c0>
								setRightSpeed(-5);
								//outOfLine++;
								//if(outOfLine > 250) {
								//	demoState = 1;
								//}
							} else if(proximityResult[10]>LINE_OUT_THR) {	// center right is leaving the lnie => turn left
    170e:	80 91 6d 02 	lds	r24, 0x026D
    1712:	90 91 6e 02 	lds	r25, 0x026E
    1716:	f1 e0       	ldi	r31, 0x01	; 1
    1718:	83 3c       	cpi	r24, 0xC3	; 195
    171a:	9f 07       	cpc	r25, r31
    171c:	0c f4       	brge	.+2      	; 0x1720 <main+0x1544>
    171e:	77 c0       	rjmp	.+238    	; 0x180e <main+0x1632>
								setLeftSpeed(-5);
    1720:	8b ef       	ldi	r24, 0xFB	; 251
    1722:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <setLeftSpeed>
								setRightSpeed(15);
    1726:	8f e0       	ldi	r24, 0x0F	; 15
    1728:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <setRightSpeed>
    172c:	0c 94 39 02 	jmp	0x472	; 0x472 <main+0x296>
									demoStartTime = getTime100MicroSec();
									demoState = 3;
									break;
								}
							} else {
								chargeContact = 0;
    1730:	10 92 51 04 	sts	0x0451, r1

								if(proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {
    1734:	80 91 6b 02 	lds	r24, 0x026B
    1738:	90 91 6c 02 	lds	r25, 0x026C
    173c:	e1 e0       	ldi	r30, 0x01	; 1
    173e:	83 3c       	cpi	r24, 0xC3	; 195
    1740:	9e 07       	cpc	r25, r30
    1742:	0c f4       	brge	.+2      	; 0x1746 <main+0x156a>
    1744:	50 c0       	rjmp	.+160    	; 0x17e6 <main+0x160a>
    1746:	20 91 6d 02 	lds	r18, 0x026D
    174a:	30 91 6e 02 	lds	r19, 0x026E
    174e:	f1 e0       	ldi	r31, 0x01	; 1
    1750:	23 3c       	cpi	r18, 0xC3	; 195
    1752:	3f 07       	cpc	r19, r31
    1754:	0c f4       	brge	.+2      	; 0x1758 <main+0x157c>
    1756:	47 c0       	rjmp	.+142    	; 0x17e6 <main+0x160a>
									outOfLine++;
    1758:	20 91 50 04 	lds	r18, 0x0450
    175c:	2f 5f       	subi	r18, 0xFF	; 255
    175e:	20 93 50 04 	sts	0x0450, r18
									if(outOfLine > 250) {
    1762:	2b 3f       	cpi	r18, 0xFB	; 251
    1764:	08 f4       	brcc	.+2      	; 0x1768 <main+0x158c>
    1766:	e1 ce       	rjmp	.-574    	; 0x152a <main+0x134e>
    1768:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <main+0x51c>
						break;

					case 1:
						irCommTasks();
						if(irCommDataAvailable()==1) {
							irCommRxByteExpected = irCommReadData();
    176c:	0e 94 7d 48 	call	0x90fa	; 0x90fa <irCommReadData>
    1770:	80 93 e8 04 	sts	0x04E8, r24
							i = irCommReceivingSensor();
    1774:	0e 94 82 48 	call	0x9104	; 0x9104 <irCommReceivingSensor>
							turnOffGreenLeds();
    1778:	8d 83       	std	Y+5, r24	; 0x05
    177a:	0e 94 e0 3b 	call	0x77c0	; 0x77c0 <turnOffGreenLeds>
							setGreenLed(i, 1);
    177e:	8d 81       	ldd	r24, Y+5	; 0x05
    1780:	61 e0       	ldi	r22, 0x01	; 1
    1782:	0e 94 43 3b 	call	0x7686	; 0x7686 <setGreenLed>
							switch(irCommRxByteExpected) {
    1786:	80 91 e8 04 	lds	r24, 0x04E8
    178a:	83 30       	cpi	r24, 0x03	; 3
    178c:	09 f4       	brne	.+2      	; 0x1790 <main+0x15b4>
    178e:	9b c0       	rjmp	.+310    	; 0x18c6 <main+0x16ea>
    1790:	84 30       	cpi	r24, 0x04	; 4
    1792:	08 f0       	brcs	.+2      	; 0x1796 <main+0x15ba>
    1794:	44 c0       	rjmp	.+136    	; 0x181e <main+0x1642>
    1796:	81 30       	cpi	r24, 0x01	; 1
    1798:	09 f4       	brne	.+2      	; 0x179c <main+0x15c0>
    179a:	93 c0       	rjmp	.+294    	; 0x18c2 <main+0x16e6>
    179c:	82 30       	cpi	r24, 0x02	; 2
    179e:	08 f4       	brcc	.+2      	; 0x17a2 <main+0x15c6>
    17a0:	83 c0       	rjmp	.+262    	; 0x18a8 <main+0x16cc>
									updateRedLed(0);
									updateGreenLed(255);
									updateBlueLed(255);
									break;	
								case 2: 
									updateRedLed(255);
    17a2:	8f ef       	ldi	r24, 0xFF	; 255
									updateRedLed(255);
									updateGreenLed(255);
									updateBlueLed(0);
									break;
								case 4: 
									updateRedLed(0);
    17a4:	0e 94 07 3b 	call	0x760e	; 0x760e <updateRedLed>
									updateGreenLed(0);
    17a8:	80 e0       	ldi	r24, 0x00	; 0
    17aa:	0e 94 1b 3b 	call	0x7636	; 0x7636 <updateGreenLed>
									updateBlueLed(255);
    17ae:	8f ef       	ldi	r24, 0xFF	; 255
    17b0:	0e 94 2f 3b 	call	0x765e	; 0x765e <updateBlueLed>
    17b4:	80 91 4a 04 	lds	r24, 0x044A
									break;
    17b8:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <main+0xf8>
							disableObstacleAvoidance();

							demoEndTime = getTime100MicroSec();
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {	// the robot seems to be blocked somehow
								// go back for a while
								setRightSpeed(-20);
    17bc:	8c ee       	ldi	r24, 0xEC	; 236
    17be:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <setRightSpeed>
								setLeftSpeed(-20);
    17c2:	8c ee       	ldi	r24, 0xEC	; 236
    17c4:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <setLeftSpeed>
								demoStartTime = getTime100MicroSec();
    17c8:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <getTime100MicroSec>
    17cc:	60 93 52 04 	sts	0x0452, r22
    17d0:	70 93 53 04 	sts	0x0453, r23
    17d4:	80 93 54 04 	sts	0x0454, r24
    17d8:	90 93 55 04 	sts	0x0455, r25
								demoState = 4;
    17dc:	84 e0       	ldi	r24, 0x04	; 4
    17de:	80 93 4e 04 	sts	0x044E, r24
								break;
    17e2:	0c 94 39 02 	jmp	0x472	; 0x472 <main+0x296>
										chargeContact = 0;
										demoState = 1;
										break;
									}
								} else {
									outOfLine = 0;
    17e6:	10 92 50 04 	sts	0x0450, r1
    17ea:	9f ce       	rjmp	.-706    	; 0x152a <main+0x134e>
					if(rgbState == 0) {
						pwm_red = 254;
						pwm_green = 255;
						pwm_blue = 255;
						rgbState = 1;
					} else if(rgbState == 1) {
    17ec:	91 30       	cpi	r25, 0x01	; 1
    17ee:	91 f1       	breq	.+100    	; 0x1854 <main+0x1678>
						pwm_red = 255;
						pwm_green = 254;
						pwm_blue = 255;
						rgbState = 2;
					} else if(rgbState == 2) {
    17f0:	92 30       	cpi	r25, 0x02	; 2
    17f2:	11 f0       	breq	.+4      	; 0x17f8 <main+0x161c>
    17f4:	0c 94 8e 03 	jmp	0x71c	; 0x71c <main+0x540>
						pwm_red = 255;
    17f8:	10 93 0c 02 	sts	0x020C, r17
						pwm_green = 255;
    17fc:	10 93 0d 02 	sts	0x020D, r17
						pwm_blue = 254;
    1800:	8e ef       	ldi	r24, 0xFE	; 254
    1802:	80 93 0e 02 	sts	0x020E, r24
						rgbState = 0;
    1806:	10 92 1a 03 	sts	0x031A, r1
    180a:	0c 94 8e 03 	jmp	0x71c	; 0x71c <main+0x540>
								//outOfLine++;
								//if(outOfLine > 250) {
								//	demoState = 1;
								//}
							} else {
								setRightSpeed(15);
    180e:	8f e0       	ldi	r24, 0x0F	; 15
    1810:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <setRightSpeed>
								setLeftSpeed(15);
    1814:	8f e0       	ldi	r24, 0x0F	; 15
    1816:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <setLeftSpeed>
    181a:	0c 94 39 02 	jmp	0x472	; 0x472 <main+0x296>
						if(irCommDataAvailable()==1) {
							irCommRxByteExpected = irCommReadData();
							i = irCommReceivingSensor();
							turnOffGreenLeds();
							setGreenLed(i, 1);
							switch(irCommRxByteExpected) {
    181e:	85 30       	cpi	r24, 0x05	; 5
    1820:	b1 f1       	breq	.+108    	; 0x188e <main+0x16b2>
    1822:	85 30       	cpi	r24, 0x05	; 5
    1824:	18 f5       	brcc	.+70     	; 0x186c <main+0x1690>
									updateRedLed(255);
									updateGreenLed(255);
									updateBlueLed(0);
									break;
								case 4: 
									updateRedLed(0);
    1826:	80 e0       	ldi	r24, 0x00	; 0
    1828:	bd cf       	rjmp	.-134    	; 0x17a4 <main+0x15c8>

							if(CHARGE_ON) {
								outOfLine = 0;
								chargeContact++;
								if(chargeContact > 20) {
									setLeftSpeed(0);
    182a:	80 e0       	ldi	r24, 0x00	; 0
    182c:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <setLeftSpeed>
									setRightSpeed(0);
    1830:	80 e0       	ldi	r24, 0x00	; 0
    1832:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <setRightSpeed>
									demoStartTime = getTime100MicroSec();
    1836:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <getTime100MicroSec>
    183a:	60 93 52 04 	sts	0x0452, r22
    183e:	70 93 53 04 	sts	0x0453, r23
    1842:	80 93 54 04 	sts	0x0454, r24
    1846:	90 93 55 04 	sts	0x0455, r25
									demoState = 3;
    184a:	93 e0       	ldi	r25, 0x03	; 3
    184c:	90 93 4e 04 	sts	0x044E, r25
									break;
    1850:	0c 94 39 02 	jmp	0x472	; 0x472 <main+0x296>
						pwm_red = 254;
						pwm_green = 255;
						pwm_blue = 255;
						rgbState = 1;
					} else if(rgbState == 1) {
						pwm_red = 255;
    1854:	10 93 0c 02 	sts	0x020C, r17
						pwm_green = 254;
    1858:	5e ef       	ldi	r21, 0xFE	; 254
    185a:	50 93 0d 02 	sts	0x020D, r21
						pwm_blue = 255;
    185e:	10 93 0e 02 	sts	0x020E, r17
						rgbState = 2;
    1862:	62 e0       	ldi	r22, 0x02	; 2
    1864:	60 93 1a 03 	sts	0x031A, r22
    1868:	0c 94 8e 03 	jmp	0x71c	; 0x71c <main+0x540>
						if(irCommDataAvailable()==1) {
							irCommRxByteExpected = irCommReadData();
							i = irCommReceivingSensor();
							turnOffGreenLeds();
							setGreenLed(i, 1);
							switch(irCommRxByteExpected) {
    186c:	86 30       	cpi	r24, 0x06	; 6
    186e:	69 f0       	breq	.+26     	; 0x188a <main+0x16ae>
    1870:	87 30       	cpi	r24, 0x07	; 7
    1872:	09 f0       	breq	.+2      	; 0x1876 <main+0x169a>
    1874:	17 c9       	rjmp	.-3538   	; 0xaa4 <main+0x8c8>
									updateRedLed(255);
									updateGreenLed(0);
									updateBlueLed(0);
									break;
								case 7: 
									updateRedLed(0);
    1876:	80 e0       	ldi	r24, 0x00	; 0
    1878:	0e 94 07 3b 	call	0x760e	; 0x760e <updateRedLed>
									updateGreenLed(0);
    187c:	80 e0       	ldi	r24, 0x00	; 0
    187e:	0e 94 1b 3b 	call	0x7636	; 0x7636 <updateGreenLed>
									updateBlueLed(0);
    1882:	80 e0       	ldi	r24, 0x00	; 0
    1884:	0e 94 2f 3b 	call	0x765e	; 0x765e <updateBlueLed>
    1888:	0d c9       	rjmp	.-3558   	; 0xaa4 <main+0x8c8>
									updateRedLed(0);
									updateGreenLed(255);
									updateBlueLed(0);
									break;
								case 6: 
									updateRedLed(255);
    188a:	8f ef       	ldi	r24, 0xFF	; 255
    188c:	f5 cf       	rjmp	.-22     	; 0x1878 <main+0x169c>
									updateRedLed(0);
									updateGreenLed(0);
									updateBlueLed(255);
									break;
								case 5: 
									updateRedLed(0);
    188e:	80 e0       	ldi	r24, 0x00	; 0
    1890:	0e 94 07 3b 	call	0x760e	; 0x760e <updateRedLed>
									updateGreenLed(255);
    1894:	8f ef       	ldi	r24, 0xFF	; 255
    1896:	0e 94 1b 3b 	call	0x7636	; 0x7636 <updateGreenLed>
									updateBlueLed(0);
    189a:	80 e0       	ldi	r24, 0x00	; 0
    189c:	0e 94 2f 3b 	call	0x765e	; 0x765e <updateBlueLed>
    18a0:	80 91 4a 04 	lds	r24, 0x044A
									break;
    18a4:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <main+0xf8>
							i = irCommReceivingSensor();
							turnOffGreenLeds();
							setGreenLed(i, 1);
							switch(irCommRxByteExpected) {
								case 0: 
									updateRedLed(255);
    18a8:	8f ef       	ldi	r24, 0xFF	; 255
									updateGreenLed(255);
									updateBlueLed(255);
									break;
								case 1: 
									updateRedLed(0);
    18aa:	0e 94 07 3b 	call	0x760e	; 0x760e <updateRedLed>
									updateGreenLed(255);
    18ae:	8f ef       	ldi	r24, 0xFF	; 255
    18b0:	0e 94 1b 3b 	call	0x7636	; 0x7636 <updateGreenLed>
									updateBlueLed(255);
    18b4:	8f ef       	ldi	r24, 0xFF	; 255
    18b6:	0e 94 2f 3b 	call	0x765e	; 0x765e <updateBlueLed>
    18ba:	80 91 4a 04 	lds	r24, 0x044A
									break;	
    18be:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <main+0xf8>
									updateRedLed(255);
									updateGreenLed(255);
									updateBlueLed(255);
									break;
								case 1: 
									updateRedLed(0);
    18c2:	80 e0       	ldi	r24, 0x00	; 0
    18c4:	f2 cf       	rjmp	.-28     	; 0x18aa <main+0x16ce>
									updateRedLed(255);
									updateGreenLed(0);
									updateBlueLed(255);
									break;
								case 3: 
									updateRedLed(255);
    18c6:	8f ef       	ldi	r24, 0xFF	; 255
    18c8:	e3 cf       	rjmp	.-58     	; 0x1890 <main+0x16b4>
									outOfLine = 0;
								}
							}
							
							if(proximityResult[8]<LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR && proximityResult[11]>LINE_OUT_THR) {	// left ground is the only within the black line => turn left
								setLeftSpeed(-10);
    18ca:	86 ef       	ldi	r24, 0xF6	; 246
    18cc:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <setLeftSpeed>
								setRightSpeed(15);
    18d0:	8f e0       	ldi	r24, 0x0F	; 15
    18d2:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <setRightSpeed>
    18d6:	0c 94 39 02 	jmp	0x472	; 0x472 <main+0x296>
							} else if(proximityResult[11]<LINE_OUT_THR && proximityResult[8]>LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {	// right ground is the only within the black line => turn right
								setLeftSpeed(15);
    18da:	8f e0       	ldi	r24, 0x0F	; 15
    18dc:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <setLeftSpeed>
								setRightSpeed(-10);
    18e0:	86 ef       	ldi	r24, 0xF6	; 246
    18e2:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <setRightSpeed>
    18e6:	0c 94 39 02 	jmp	0x472	; 0x472 <main+0x296>

000018ea <SPI_WAIT>:
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	90 e0       	ldi	r25, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
    18ee:	21 e0       	ldi	r18, 0x01	; 1
		}
	
		if(SPSR & _BV(SPIF)) {
    18f0:	0d b4       	in	r0, 0x2d	; 45
    18f2:	07 fc       	sbrc	r0, 7
    18f4:	0a c0       	rjmp	.+20     	; 0x190a <SPI_WAIT+0x20>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    18f6:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
    18f8:	37 e2       	ldi	r19, 0x27	; 39
    18fa:	80 31       	cpi	r24, 0x10	; 16
    18fc:	93 07       	cpc	r25, r19
    18fe:	c0 f3       	brcs	.-16     	; 0x18f0 <SPI_WAIT+0x6>
			spiCommError = 1;
    1900:	20 93 18 03 	sts	0x0318, r18
		}
	
		if(SPSR & _BV(SPIF)) {
    1904:	0d b4       	in	r0, 0x2d	; 45
    1906:	07 fe       	sbrs	r0, 7
    1908:	f6 cf       	rjmp	.-20     	; 0x18f6 <SPI_WAIT+0xc>
			return;
		}
	}
}
    190a:	08 95       	ret

0000190c <initSPI>:

void initSPI() {

    SPI_DDR &= ~((1<<SPI_MOSI)|(1<<SPI_MISO)|(1<<SPI_SS)|(1<<SPI_SCK));
    190c:	84 b1       	in	r24, 0x04	; 4
    190e:	80 7f       	andi	r24, 0xF0	; 240
    1910:	84 b9       	out	0x04, r24	; 4
    // Define the following pins as output
    SPI_DDR |= ((1<<SPI_MOSI)|(1<<SPI_SS)|(1<<SPI_SCK));
    1912:	84 b1       	in	r24, 0x04	; 4
    1914:	87 60       	ori	r24, 0x07	; 7
    1916:	84 b9       	out	0x04, r24	; 4

    
    SPCR = ((1<<SPE)|               // SPI Enable
    1918:	80 e5       	ldi	r24, 0x50	; 80
    191a:	8c bd       	out	0x2c, r24	; 44
            (1<<MSTR)|              // 1:Master/ 0:Slave
            (0<<SPR1)|(0<<SPR0)|    // SPI Clock Rate => default 1/4 => 2 MHz
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR |= (1<<SPI2X);              // Double Clock Rate
    191c:	8d b5       	in	r24, 0x2d	; 45
    191e:	81 60       	ori	r24, 0x01	; 1
    1920:	8d bd       	out	0x2d, r24	; 45

}
    1922:	08 95       	ret

00001924 <closeSPI>:

void closeSPI() {

	SPCR = 0x00;
    1924:	1c bc       	out	0x2c, r1	; 44
	SPSR = 0x00;
    1926:	1d bc       	out	0x2d, r1	; 45
}
    1928:	08 95       	ret

0000192a <SPI_ReadWrite_Block>:

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    192a:	44 23       	and	r20, r20
    192c:	09 f1       	breq	.+66     	; 0x1970 <SPI_ReadWrite_Block+0x46>
    192e:	a6 2f       	mov	r26, r22
    1930:	b7 2f       	mov	r27, r23
    1932:	e8 2f       	mov	r30, r24
    1934:	f9 2f       	mov	r31, r25
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
    1936:	91 e0       	ldi	r25, 0x01	; 1
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
    1938:	21 91       	ld	r18, Z+
    193a:	2e bd       	out	0x2e, r18	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    193c:	21 e0       	ldi	r18, 0x01	; 1
    193e:	30 e0       	ldi	r19, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
    1940:	0d b4       	in	r0, 0x2d	; 45
    1942:	07 fc       	sbrc	r0, 7
    1944:	0b c0       	rjmp	.+22     	; 0x195c <SPI_ReadWrite_Block+0x32>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1946:	2f 5f       	subi	r18, 0xFF	; 255
    1948:	3f 4f       	sbci	r19, 0xFF	; 255
		if(timeout>=10000) {
    194a:	57 e2       	ldi	r21, 0x27	; 39
    194c:	20 31       	cpi	r18, 0x10	; 16
    194e:	35 07       	cpc	r19, r21
    1950:	b8 f3       	brcs	.-18     	; 0x1940 <SPI_ReadWrite_Block+0x16>
			spiCommError = 1;
    1952:	90 93 18 03 	sts	0x0318, r25
		}
	
		if(SPSR & _BV(SPIF)) {
    1956:	0d b4       	in	r0, 0x2d	; 45
    1958:	07 fe       	sbrs	r0, 7
    195a:	f5 cf       	rjmp	.-22     	; 0x1946 <SPI_ReadWrite_Block+0x1c>
void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
          SPI_WAIT();
		  if(spiCommError) {
    195c:	20 91 18 03 	lds	r18, 0x0318
    1960:	22 23       	and	r18, r18
    1962:	31 f4       	brne	.+12     	; 0x1970 <SPI_ReadWrite_Block+0x46>
			return;
		  }
          buffer[i] = SPDR;
    1964:	2e b5       	in	r18, 0x2e	; 46
    1966:	2d 93       	st	X+, r18
	SPSR = 0x00;
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1968:	2e 2f       	mov	r18, r30
    196a:	28 1b       	sub	r18, r24
    196c:	24 17       	cp	r18, r20
    196e:	20 f3       	brcs	.-56     	; 0x1938 <SPI_ReadWrite_Block+0xe>
    1970:	08 95       	ret

00001972 <SPI_Write_Block>:
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1972:	66 23       	and	r22, r22
    1974:	e9 f0       	breq	.+58     	; 0x19b0 <SPI_Write_Block+0x3e>
    1976:	e8 2f       	mov	r30, r24
    1978:	f9 2f       	mov	r31, r25
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
    197a:	91 e0       	ldi	r25, 0x01	; 1
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
    197c:	21 91       	ld	r18, Z+
    197e:	2e bd       	out	0x2e, r18	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1980:	21 e0       	ldi	r18, 0x01	; 1
    1982:	30 e0       	ldi	r19, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
    1984:	0d b4       	in	r0, 0x2d	; 45
    1986:	07 fc       	sbrc	r0, 7
    1988:	0b c0       	rjmp	.+22     	; 0x19a0 <SPI_Write_Block+0x2e>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    198a:	2f 5f       	subi	r18, 0xFF	; 255
    198c:	3f 4f       	sbci	r19, 0xFF	; 255
		if(timeout>=10000) {
    198e:	47 e2       	ldi	r20, 0x27	; 39
    1990:	20 31       	cpi	r18, 0x10	; 16
    1992:	34 07       	cpc	r19, r20
    1994:	b8 f3       	brcs	.-18     	; 0x1984 <SPI_Write_Block+0x12>
			spiCommError = 1;
    1996:	90 93 18 03 	sts	0x0318, r25
		}
	
		if(SPSR & _BV(SPIF)) {
    199a:	0d b4       	in	r0, 0x2d	; 45
    199c:	07 fe       	sbrs	r0, 7
    199e:	f5 cf       	rjmp	.-22     	; 0x198a <SPI_Write_Block+0x18>
void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
          SPI_WAIT();
		  if(spiCommError) {
    19a0:	20 91 18 03 	lds	r18, 0x0318
    19a4:	22 23       	and	r18, r18
    19a6:	21 f4       	brne	.+8      	; 0x19b0 <SPI_Write_Block+0x3e>
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    19a8:	2e 2f       	mov	r18, r30
    19aa:	28 1b       	sub	r18, r24
    19ac:	26 17       	cp	r18, r22
    19ae:	30 f3       	brcs	.-52     	; 0x197c <SPI_Write_Block+0xa>
    19b0:	08 95       	ret

000019b2 <SPI_Write_Byte>:
    }

}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    19b2:	8e bd       	out	0x2e, r24	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	90 e0       	ldi	r25, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
    19b8:	21 e0       	ldi	r18, 0x01	; 1
		}
	
		if(SPSR & _BV(SPIF)) {
    19ba:	0d b4       	in	r0, 0x2d	; 45
    19bc:	07 fc       	sbrc	r0, 7
    19be:	0a c0       	rjmp	.+20     	; 0x19d4 <SPI_Write_Byte+0x22>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    19c0:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
    19c2:	37 e2       	ldi	r19, 0x27	; 39
    19c4:	80 31       	cpi	r24, 0x10	; 16
    19c6:	93 07       	cpc	r25, r19
    19c8:	c0 f3       	brcs	.-16     	; 0x19ba <SPI_Write_Byte+0x8>
			spiCommError = 1;
    19ca:	20 93 18 03 	sts	0x0318, r18
		}
	
		if(SPSR & _BV(SPIF)) {
    19ce:	0d b4       	in	r0, 0x2d	; 45
    19d0:	07 fe       	sbrs	r0, 7
    19d2:	f6 cf       	rjmp	.-20     	; 0x19c0 <SPI_Write_Byte+0xe>
}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    SPI_WAIT();
    return SPDR;
    19d4:	8e b5       	in	r24, 0x2e	; 46
}
    19d6:	08 95       	ret

000019d8 <mirf_config>:


void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
    19d8:	0f 93       	push	r16
    19da:	1f 93       	push	r17
    19dc:	df 93       	push	r29
    19de:	cf 93       	push	r28
    19e0:	00 d0       	rcall	.+0      	; 0x19e2 <mirf_config+0xa>
    19e2:	cd b7       	in	r28, 0x3d	; 61
    19e4:	de b7       	in	r29, 0x3e	; 62
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    19e6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    19e8:	80 e2       	ldi	r24, 0x20	; 32
    19ea:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    19ee:	8d e0       	ldi	r24, 0x0D	; 13
    19f0:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    mirf_CSN_hi;
    19f4:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    19f6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    19f8:	83 e2       	ldi	r24, 0x23	; 35
    19fa:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    mirf_CSN_hi;
    1a04:	28 9a       	sbi	0x05, 0	; 5

	// address width
	mirf_config_register(SETUP_AW, 0x01);

	// tx address
	temp[0] = (rfAddress>>8)&0xFF;
    1a06:	80 91 15 03 	lds	r24, 0x0315
    1a0a:	90 91 16 03 	lds	r25, 0x0316
    1a0e:	99 83       	std	Y+1, r25	; 0x01
	temp[1] = rfAddress & 0xFF;
    1a10:	8a 83       	std	Y+2, r24	; 0x02
	temp[2] = 0x00;
    1a12:	1b 82       	std	Y+3, r1	; 0x03
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1a14:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1a16:	80 e3       	ldi	r24, 0x30	; 48
    1a18:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1a1c:	8e 01       	movw	r16, r28
    1a1e:	0f 5f       	subi	r16, 0xFF	; 255
    1a20:	1f 4f       	sbci	r17, 0xFF	; 255
    1a22:	c8 01       	movw	r24, r16
    1a24:	63 e0       	ldi	r22, 0x03	; 3
    1a26:	0e 94 b9 0c 	call	0x1972	; 0x1972 <SPI_Write_Block>
    mirf_CSN_hi;
    1a2a:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1a2c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1a2e:	8a e2       	ldi	r24, 0x2A	; 42
    1a30:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1a34:	c8 01       	movw	r24, r16
    1a36:	63 e0       	ldi	r22, 0x03	; 3
    1a38:	0e 94 b9 0c 	call	0x1972	; 0x1972 <SPI_Write_Block>
    mirf_CSN_hi;
    1a3c:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1a3e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1a40:	81 e2       	ldi	r24, 0x21	; 33
    1a42:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    mirf_CSN_hi;
    1a4c:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1a4e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1a50:	82 e2       	ldi	r24, 0x22	; 34
    1a52:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    mirf_CSN_hi;
    1a5c:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1a5e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1a60:	84 e2       	ldi	r24, 0x24	; 36
    1a62:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1a66:	82 e1       	ldi	r24, 0x12	; 18
    1a68:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    mirf_CSN_hi;
    1a6c:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1a6e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1a70:	85 e2       	ldi	r24, 0x25	; 37
    1a72:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1a76:	88 e2       	ldi	r24, 0x28	; 40
    1a78:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    mirf_CSN_hi;
    1a7c:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1a7e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1a80:	81 e3       	ldi	r24, 0x31	; 49
    1a82:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1a86:	8d e0       	ldi	r24, 0x0D	; 13
    1a88:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    mirf_CSN_hi;
    1a8c:	28 9a       	sbi	0x05, 0	; 5

	// RX payload size; it isn't needed because the dynamic payload length is activated for ACK+PAYLOAD feature
    mirf_config_register(RX_PW_P0, PAYLOAD_SIZE);

	// enable extra features
    mirf_CSN_lo;
    1a8e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_ACTIVATE);
    1a90:	80 e5       	ldi	r24, 0x50	; 80
    1a92:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    SPI_Write_Byte(0x73);
    1a96:	83 e7       	ldi	r24, 0x73	; 115
    1a98:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    mirf_CSN_hi;
    1a9c:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1a9e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1aa0:	8c e3       	ldi	r24, 0x3C	; 60
    1aa2:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    mirf_CSN_hi;
    1aac:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1aae:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1ab0:	8d e3       	ldi	r24, 0x3D	; 61
    1ab2:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1ab6:	86 e0       	ldi	r24, 0x06	; 6
    1ab8:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    mirf_CSN_hi;
    1abc:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1abe:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1ac0:	80 e2       	ldi	r24, 0x20	; 32
    1ac2:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1ac6:	8f e0       	ldi	r24, 0x0F	; 15
    1ac8:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    mirf_CSN_hi;
    1acc:	28 9a       	sbi	0x05, 0	; 5

    // Start receiver 
    //PTX = 0;        // Start in receiving mode
    //RX_POWERUP;     // Power up in receiving mode
    //mirf_CE_hi;     // Listening for pakets
}
    1ace:	0f 90       	pop	r0
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	cf 91       	pop	r28
    1ad6:	df 91       	pop	r29
    1ad8:	1f 91       	pop	r17
    1ada:	0f 91       	pop	r16
    1adc:	08 95       	ret

00001ade <mirf_init>:
// Initializes pins as interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    //DDRB |= ((1<<CSN)|(1<<CE));
    mirf_CE_hi;
    1ade:	2c 9a       	sbi	0x05, 4	; 5
    mirf_CSN_hi;
    1ae0:	28 9a       	sbi	0x05, 0	; 5

	mirf_config();
    1ae2:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <mirf_config>
}
    1ae6:	08 95       	ret

00001ae8 <mirf_set_RADDR>:
    //mirf_CE_hi;     // Listening for pakets
}

void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    1ae8:	cf 93       	push	r28
    1aea:	df 93       	push	r29
    1aec:	ec 01       	movw	r28, r24
    mirf_CE_lo;
    1aee:	2c 98       	cbi	0x05, 4	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1af0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1af2:	8a e2       	ldi	r24, 0x2A	; 42
    1af4:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1af8:	ce 01       	movw	r24, r28
    1afa:	65 e0       	ldi	r22, 0x05	; 5
    1afc:	0e 94 b9 0c 	call	0x1972	; 0x1972 <SPI_Write_Block>
    mirf_CSN_hi;
    1b00:	28 9a       	sbi	0x05, 0	; 5
void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    mirf_CE_lo;
    mirf_write_register(RX_ADDR_P0,adr,5);
    mirf_CE_hi;
    1b02:	2c 9a       	sbi	0x05, 4	; 5
}
    1b04:	df 91       	pop	r29
    1b06:	cf 91       	pop	r28
    1b08:	08 95       	ret

00001b0a <mirf_set_TADDR>:

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
    1b0a:	cf 93       	push	r28
    1b0c:	df 93       	push	r29
    1b0e:	ec 01       	movw	r28, r24
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1b10:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1b12:	80 e3       	ldi	r24, 0x30	; 48
    1b14:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1b18:	ce 01       	movw	r24, r28
    1b1a:	65 e0       	ldi	r22, 0x05	; 5
    1b1c:	0e 94 b9 0c 	call	0x1972	; 0x1972 <SPI_Write_Block>
    mirf_CSN_hi;
    1b20:	28 9a       	sbi	0x05, 0	; 5

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
	mirf_write_register(TX_ADDR, adr,5);
}
    1b22:	df 91       	pop	r29
    1b24:	cf 91       	pop	r28
    1b26:	08 95       	ret

00001b28 <mirf_data_ready>:
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
    1b28:	80 91 00 05 	lds	r24, 0x0500
    1b2c:	88 23       	and	r24, r24
    1b2e:	11 f0       	breq	.+4      	; 0x1b34 <mirf_data_ready+0xc>
    1b30:	80 e0       	ldi	r24, 0x00	; 0
    mirf_CSN_lo;                                // Pull down chip select
    status = SPI_Write_Byte(NOP);               // Read status register
    mirf_CSN_hi;                                // Pull up chip select
    return status & (1<<RX_DR);

}
    1b32:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    1b34:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
    1b36:	8f ef       	ldi	r24, 0xFF	; 255
    1b38:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
    1b3c:	28 9a       	sbi	0x05, 0	; 5
    return status & (1<<RX_DR);
    1b3e:	80 74       	andi	r24, 0x40	; 64
    1b40:	08 95       	ret

00001b42 <rx_fifo_is_empty>:

}

uint8_t rx_fifo_is_empty() {
    1b42:	df 93       	push	r29
    1b44:	cf 93       	push	r28
    1b46:	0f 92       	push	r0
    1b48:	cd b7       	in	r28, 0x3d	; 61
    1b4a:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t fifo_status = 0;
    1b4c:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
    1b4e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    1b50:	87 e1       	ldi	r24, 0x17	; 23
    1b52:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    1b56:	be 01       	movw	r22, r28
    1b58:	6f 5f       	subi	r22, 0xFF	; 255
    1b5a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b5c:	cb 01       	movw	r24, r22
    1b5e:	41 e0       	ldi	r20, 0x01	; 1
    1b60:	0e 94 95 0c 	call	0x192a	; 0x192a <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    1b64:	28 9a       	sbi	0x05, 0	; 5
	
	uint8_t fifo_status = 0;

	mirf_read_register(FIFO_STATUS, &fifo_status, 1);
	
	return (uint8_t)(fifo_status&0x01);
    1b66:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b68:	81 70       	andi	r24, 0x01	; 1
    1b6a:	0f 90       	pop	r0
    1b6c:	cf 91       	pop	r28
    1b6e:	df 91       	pop	r29
    1b70:	08 95       	ret

00001b72 <flush_rx_fifo>:

void flush_rx_fifo() {

    mirf_CSN_lo;
    1b72:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
    1b74:	82 ee       	ldi	r24, 0xE2	; 226
    1b76:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    mirf_CSN_hi;
    1b7a:	28 9a       	sbi	0x05, 0	; 5

}
    1b7c:	08 95       	ret

00001b7e <mirf_get_data>:

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    1b7e:	cf 93       	push	r28
    1b80:	df 93       	push	r29
    1b82:	ec 01       	movw	r28, r24
    mirf_CSN_lo;                               		// Pull down chip select
    1b84:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    1b86:	81 e6       	ldi	r24, 0x61	; 97
    1b88:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    1b8c:	ce 01       	movw	r24, r28
    1b8e:	be 01       	movw	r22, r28
    1b90:	4d e0       	ldi	r20, 0x0D	; 13
    1b92:	0e 94 95 0c 	call	0x192a	; 0x192a <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
    1b96:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1b98:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1b9a:	87 e2       	ldi	r24, 0x27	; 39
    1b9c:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1ba0:	80 e4       	ldi	r24, 0x40	; 64
    1ba2:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    mirf_CSN_hi;
    1ba6:	28 9a       	sbi	0x05, 0	; 5
    mirf_CSN_lo;                               		// Pull down chip select
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    mirf_CSN_hi;                               		// Pull up chip select
    mirf_config_register(STATUS,(1<<RX_DR));   		// Reset status register
}
    1ba8:	df 91       	pop	r29
    1baa:	cf 91       	pop	r28
    1bac:	08 95       	ret

00001bae <mirf_config_register>:

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    1bae:	df 93       	push	r29
    1bb0:	cf 93       	push	r28
    1bb2:	0f 92       	push	r0
    1bb4:	cd b7       	in	r28, 0x3d	; 61
    1bb6:	de b7       	in	r29, 0x3e	; 62
    mirf_CSN_lo;
    1bb8:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1bba:	8f 71       	andi	r24, 0x1F	; 31
    1bbc:	80 62       	ori	r24, 0x20	; 32
    1bbe:	69 83       	std	Y+1, r22	; 0x01
    1bc0:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1bc4:	69 81       	ldd	r22, Y+1	; 0x01
    1bc6:	86 2f       	mov	r24, r22
    1bc8:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    mirf_CSN_hi;
    1bcc:	28 9a       	sbi	0x05, 0	; 5
}
    1bce:	0f 90       	pop	r0
    1bd0:	cf 91       	pop	r28
    1bd2:	df 91       	pop	r29
    1bd4:	08 95       	ret

00001bd6 <mirf_read_register>:

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    1bd6:	0f 93       	push	r16
    1bd8:	1f 93       	push	r17
    1bda:	df 93       	push	r29
    1bdc:	cf 93       	push	r28
    1bde:	0f 92       	push	r0
    1be0:	cd b7       	in	r28, 0x3d	; 61
    1be2:	de b7       	in	r29, 0x3e	; 62
    1be4:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    1be6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    1be8:	8f 71       	andi	r24, 0x1F	; 31
    1bea:	49 83       	std	Y+1, r20	; 0x01
    1bec:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    1bf0:	c8 01       	movw	r24, r16
    1bf2:	b8 01       	movw	r22, r16
    1bf4:	49 81       	ldd	r20, Y+1	; 0x01
    1bf6:	0e 94 95 0c 	call	0x192a	; 0x192a <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    1bfa:	28 9a       	sbi	0x05, 0	; 5
}
    1bfc:	0f 90       	pop	r0
    1bfe:	cf 91       	pop	r28
    1c00:	df 91       	pop	r29
    1c02:	1f 91       	pop	r17
    1c04:	0f 91       	pop	r16
    1c06:	08 95       	ret

00001c08 <mirf_write_register>:

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    1c08:	0f 93       	push	r16
    1c0a:	1f 93       	push	r17
    1c0c:	df 93       	push	r29
    1c0e:	cf 93       	push	r28
    1c10:	0f 92       	push	r0
    1c12:	cd b7       	in	r28, 0x3d	; 61
    1c14:	de b7       	in	r29, 0x3e	; 62
    1c16:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    1c18:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1c1a:	8f 71       	andi	r24, 0x1F	; 31
    1c1c:	80 62       	ori	r24, 0x20	; 32
    1c1e:	49 83       	std	Y+1, r20	; 0x01
    1c20:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1c24:	c8 01       	movw	r24, r16
    1c26:	49 81       	ldd	r20, Y+1	; 0x01
    1c28:	64 2f       	mov	r22, r20
    1c2a:	0e 94 b9 0c 	call	0x1972	; 0x1972 <SPI_Write_Block>
    mirf_CSN_hi;
    1c2e:	28 9a       	sbi	0x05, 0	; 5
}
    1c30:	0f 90       	pop	r0
    1c32:	cf 91       	pop	r28
    1c34:	df 91       	pop	r29
    1c36:	1f 91       	pop	r17
    1c38:	0f 91       	pop	r16
    1c3a:	08 95       	ret

00001c3c <mirf_send>:


void mirf_send(uint8_t * value, uint8_t len) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
    1c3c:	0f 93       	push	r16
    1c3e:	1f 93       	push	r17
    1c40:	df 93       	push	r29
    1c42:	cf 93       	push	r28
    1c44:	0f 92       	push	r0
    1c46:	cd b7       	in	r28, 0x3d	; 61
    1c48:	de b7       	in	r29, 0x3e	; 62
    1c4a:	8c 01       	movw	r16, r24
    while (PTX) {}                  // Wait until last paket is send
    1c4c:	80 91 00 05 	lds	r24, 0x0500
    1c50:	88 23       	and	r24, r24
    1c52:	e1 f7       	brne	.-8      	; 0x1c4c <mirf_send+0x10>

    mirf_CE_lo;
    1c54:	2c 98       	cbi	0x05, 4	; 5

    PTX = 1;                        // Set to transmitter mode
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	80 93 00 05 	sts	0x0500, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1c5c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1c5e:	80 e2       	ldi	r24, 0x20	; 32
    1c60:	69 83       	std	Y+1, r22	; 0x01
    1c62:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1c66:	8a e4       	ldi	r24, 0x4A	; 74
    1c68:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    mirf_CSN_hi;
    1c6c:	28 9a       	sbi	0x05, 0	; 5
    mirf_CE_lo;

    PTX = 1;                        // Set to transmitter mode
    TX_POWERUP;                     // Power up
    
    mirf_CSN_lo;                    // Pull down chip select
    1c6e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( FLUSH_TX );     // Write cmd to flush tx fifo
    1c70:	81 ee       	ldi	r24, 0xE1	; 225
    1c72:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    mirf_CSN_hi;                    // Pull up chip select
    1c76:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CSN_lo;                    // Pull down chip select
    1c78:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( W_TX_PAYLOAD ); // Write cmd to write payload
    1c7a:	80 ea       	ldi	r24, 0xA0	; 160
    1c7c:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    SPI_Write_Block(value,len);   // Write payload
    1c80:	c8 01       	movw	r24, r16
    1c82:	69 81       	ldd	r22, Y+1	; 0x01
    1c84:	0e 94 b9 0c 	call	0x1972	; 0x1972 <SPI_Write_Block>
    mirf_CSN_hi;                    // Pull up chip select
    1c88:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CE_hi;                     // Start transmission
    1c8a:	2c 9a       	sbi	0x05, 4	; 5
}
    1c8c:	0f 90       	pop	r0
    1c8e:	cf 91       	pop	r28
    1c90:	df 91       	pop	r29
    1c92:	1f 91       	pop	r17
    1c94:	0f 91       	pop	r16
    1c96:	08 95       	ret

00001c98 <writeAckPayload>:

void writeAckPayload(unsigned char *data, unsigned char size) {
    1c98:	ef 92       	push	r14
    1c9a:	ff 92       	push	r15
    1c9c:	0f 93       	push	r16
    1c9e:	1f 93       	push	r17
    1ca0:	df 93       	push	r29
    1ca2:	cf 93       	push	r28
    1ca4:	0f 92       	push	r0
    1ca6:	cd b7       	in	r28, 0x3d	; 61
    1ca8:	de b7       	in	r29, 0x3e	; 62
    1caa:	18 2f       	mov	r17, r24
    1cac:	06 2f       	mov	r16, r22
	return pWidth;
}

void flushTxFifo() {

    mirf_CSN_lo;
    1cae:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    1cb0:	81 ee       	ldi	r24, 0xE1	; 225
    1cb2:	99 83       	std	Y+1, r25	; 0x01
    1cb4:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    mirf_CSN_hi;
    1cb8:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
    1cba:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
    1cbc:	88 ea       	ldi	r24, 0xA8	; 168
    1cbe:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>

	for(k=0; k<size; k++) {
    1cc2:	99 81       	ldd	r25, Y+1	; 0x01
    1cc4:	00 23       	and	r16, r16
    1cc6:	61 f0       	breq	.+24     	; 0x1ce0 <writeAckPayload+0x48>
    1cc8:	61 2f       	mov	r22, r17
    1cca:	79 2f       	mov	r23, r25
    1ccc:	7b 01       	movw	r14, r22
		SPI_Write_Byte(data[k]);
    1cce:	f7 01       	movw	r30, r14
    1cd0:	81 91       	ld	r24, Z+
    1cd2:	7f 01       	movw	r14, r30
    1cd4:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>

    mirf_CSN_lo;

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);

	for(k=0; k<size; k++) {
    1cd8:	8e 2d       	mov	r24, r14
    1cda:	81 1b       	sub	r24, r17
    1cdc:	80 17       	cp	r24, r16
    1cde:	b8 f3       	brcs	.-18     	; 0x1cce <writeAckPayload+0x36>
		SPI_Write_Byte(data[k]);
	}	

    mirf_CSN_hi;
    1ce0:	28 9a       	sbi	0x05, 0	; 5


}
    1ce2:	0f 90       	pop	r0
    1ce4:	cf 91       	pop	r28
    1ce6:	df 91       	pop	r29
    1ce8:	1f 91       	pop	r17
    1cea:	0f 91       	pop	r16
    1cec:	ff 90       	pop	r15
    1cee:	ef 90       	pop	r14
    1cf0:	08 95       	ret

00001cf2 <readPayloadWidthFromTopFifo>:

uint8_t readPayloadWidthFromTopFifo() {
	uint8_t pWidth = 0;

    mirf_CSN_lo;
    1cf2:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_R_RX_PL_WID);
    1cf4:	80 e6       	ldi	r24, 0x60	; 96
    1cf6:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
	pWidth = SPI_Write_Byte(NOP); 	// not specified in the datasheet but the "NRF_R_RX_PL_WID" has a parameter,
    1cfa:	8f ef       	ldi	r24, 0xFF	; 255
    1cfc:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
									// we need to send a NOP to receive the actual payload size
    mirf_CSN_hi;
    1d00:	28 9a       	sbi	0x05, 0	; 5
	
	return pWidth;
}
    1d02:	08 95       	ret

00001d04 <readPayloadWidthFromPipe0>:

uint8_t readPayloadWidthFromPipe0() {
    1d04:	df 93       	push	r29
    1d06:	cf 93       	push	r28
    1d08:	0f 92       	push	r0
    1d0a:	cd b7       	in	r28, 0x3d	; 61
    1d0c:	de b7       	in	r29, 0x3e	; 62
	uint8_t pWidth = 0;
    1d0e:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
    1d10:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    1d12:	81 e1       	ldi	r24, 0x11	; 17
    1d14:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    1d18:	be 01       	movw	r22, r28
    1d1a:	6f 5f       	subi	r22, 0xFF	; 255
    1d1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d1e:	cb 01       	movw	r24, r22
    1d20:	41 e0       	ldi	r20, 0x01	; 1
    1d22:	0e 94 95 0c 	call	0x192a	; 0x192a <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    1d26:	28 9a       	sbi	0x05, 0	; 5
	uint8_t pWidth = 0;

	mirf_read_register(RX_PW_P0, &pWidth, 1);
	
	return pWidth;
}
    1d28:	89 81       	ldd	r24, Y+1	; 0x01
    1d2a:	0f 90       	pop	r0
    1d2c:	cf 91       	pop	r28
    1d2e:	df 91       	pop	r29
    1d30:	08 95       	ret

00001d32 <flushTxFifo>:

void flushTxFifo() {

    mirf_CSN_lo;
    1d32:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    1d34:	81 ee       	ldi	r24, 0xE1	; 225
    1d36:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    mirf_CSN_hi;
    1d3a:	28 9a       	sbi	0x05, 0	; 5

}
    1d3c:	08 95       	ret

00001d3e <handleRFCommands>:

void handleRFCommands() {
    1d3e:	ff 92       	push	r15
    1d40:	0f 93       	push	r16
    1d42:	1f 93       	push	r17
    1d44:	df 93       	push	r29
    1d46:	cf 93       	push	r28
    1d48:	0f 92       	push	r0
    1d4a:	cd b7       	in	r28, 0x3d	; 61
    1d4c:	de b7       	in	r29, 0x3e	; 62
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
    1d4e:	80 91 00 05 	lds	r24, 0x0500
    1d52:	88 23       	and	r24, r24
    1d54:	39 f0       	breq	.+14     	; 0x1d64 <handleRFCommands+0x26>

		writeAckPayload(ackPayload, 16);

	}

}
    1d56:	0f 90       	pop	r0
    1d58:	cf 91       	pop	r28
    1d5a:	df 91       	pop	r29
    1d5c:	1f 91       	pop	r17
    1d5e:	0f 91       	pop	r16
    1d60:	ff 90       	pop	r15
    1d62:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    1d64:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
    1d66:	8f ef       	ldi	r24, 0xFF	; 255
    1d68:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
    1d6c:	28 9a       	sbi	0x05, 0	; 5

	unsigned int i=0;
	//uint8_t pWidth = 0;
	//uint8_t pWidthP0 = 0;

	if(mirf_data_ready()) {
    1d6e:	86 ff       	sbrs	r24, 6
    1d70:	f2 cf       	rjmp	.-28     	; 0x1d56 <handleRFCommands+0x18>
		//if(spiCommError) {
		//	usart0Transmit(0xFE,1);
		//	return;
		//}

		rfFlags |= 0x02;
    1d72:	80 91 17 03 	lds	r24, 0x0317
    1d76:	82 60       	ori	r24, 0x02	; 2
    1d78:	80 93 17 03 	sts	0x0317, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1d7c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1d7e:	87 e2       	ldi	r24, 0x27	; 39
    1d80:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1d84:	80 e7       	ldi	r24, 0x70	; 112
    1d86:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    mirf_CSN_hi;
    1d8a:	28 9a       	sbi	0x05, 0	; 5

}

uint8_t rx_fifo_is_empty() {
	
	uint8_t fifo_status = 0;
    1d8c:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
    1d8e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    1d90:	87 e1       	ldi	r24, 0x17	; 23
    1d92:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    1d96:	be 01       	movw	r22, r28
    1d98:	6f 5f       	subi	r22, 0xFF	; 255
    1d9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d9c:	cb 01       	movw	r24, r22
    1d9e:	41 e0       	ldi	r20, 0x01	; 1
    1da0:	0e 94 95 0c 	call	0x192a	; 0x192a <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    1da4:	28 9a       	sbi	0x05, 0	; 5
	
	uint8_t fifo_status = 0;

	mirf_read_register(FIFO_STATUS, &fifo_status, 1);
	
	return (uint8_t)(fifo_status&0x01);
    1da6:	89 81       	ldd	r24, Y+1	; 0x01
		// aren't present in the fifo with consequent wrong data read and wrong behavior of the robot.
		// To avoid this situtation we add this check before actually reading from the fifo to be 
		// sure there are correct data to be read.
		// We don't know why the IRQ for data reception is raised, maybe is not correctly reset sometimes
		// or it is raised when it shouldn't...
		if(rx_fifo_is_empty()) {
    1da8:	80 fd       	sbrc	r24, 0
    1daa:	d5 cf       	rjmp	.-86     	; 0x1d56 <handleRFCommands+0x18>
}

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    mirf_CSN_lo;                               		// Pull down chip select
    1dac:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    1dae:	81 e6       	ldi	r24, 0x61	; 97
    1db0:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    1db4:	81 eb       	ldi	r24, 0xB1	; 177
    1db6:	98 e0       	ldi	r25, 0x08	; 8
    1db8:	bc 01       	movw	r22, r24
    1dba:	4d e0       	ldi	r20, 0x0D	; 13
    1dbc:	0e 94 95 0c 	call	0x192a	; 0x192a <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
    1dc0:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1dc2:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1dc4:	87 e2       	ldi	r24, 0x27	; 39
    1dc6:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1dca:	80 e4       	ldi	r24, 0x40	; 64
    1dcc:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    mirf_CSN_hi;
    1dd0:	28 9a       	sbi	0x05, 0	; 5
	return (uint8_t)(fifo_status&0x01);
}

void flush_rx_fifo() {

    mirf_CSN_lo;
    1dd2:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
    1dd4:	82 ee       	ldi	r24, 0xE2	; 226
    1dd6:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    mirf_CSN_hi;
    1dda:	28 9a       	sbi	0x05, 0	; 5

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    1ddc:	40 91 b1 08 	lds	r20, 0x08B1
    1de0:	24 2f       	mov	r18, r20
    1de2:	44 23       	and	r20, r20
    1de4:	09 f0       	breq	.+2      	; 0x1de8 <handleRFCommands+0xaa>
    1de6:	29 c1       	rjmp	.+594    	; 0x203a <handleRFCommands+0x2fc>
    1de8:	50 91 b2 08 	lds	r21, 0x08B2
    1dec:	e5 2f       	mov	r30, r21
    1dee:	55 23       	and	r21, r21
    1df0:	09 f4       	brne	.+2      	; 0x1df4 <handleRFCommands+0xb6>
    1df2:	ff c1       	rjmp	.+1022   	; 0x21f2 <handleRFCommands+0x4b4>

			sleep(60);
    1df4:	00 91 b3 08 	lds	r16, 0x08B3

		}

		if(calibrateOdomFlag==0) { 
    1df8:	80 91 23 05 	lds	r24, 0x0523
    1dfc:	88 23       	and	r24, r24
    1dfe:	41 f5       	brne	.+80     	; 0x1e50 <handleRFCommands+0x112>
			speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    1e00:	70 91 b5 08 	lds	r23, 0x08B5
    1e04:	27 2f       	mov	r18, r23
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	2f 77       	andi	r18, 0x7F	; 127
    1e0a:	30 70       	andi	r19, 0x00	; 0
    1e0c:	30 93 14 03 	sts	0x0314, r19
    1e10:	20 93 13 03 	sts	0x0313, r18
			speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
    1e14:	60 91 b6 08 	lds	r22, 0x08B6
    1e18:	86 2f       	mov	r24, r22
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	8f 77       	andi	r24, 0x7F	; 127
    1e1e:	90 70       	andi	r25, 0x00	; 0
    1e20:	90 93 12 03 	sts	0x0312, r25
    1e24:	80 93 11 03 	sts	0x0311, r24
										// in the same range of the measured speed that is 0..800.
										// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
										// this means that the range is more or less 0..400.


			if((rfData[4]&0x80)==0x80) {			// motor right forward
    1e28:	77 fd       	sbrc	r23, 7
    1e2a:	03 c0       	rjmp	.+6      	; 0x1e32 <handleRFCommands+0xf4>
				pwm_right_desired = speedr; 		// speed received (0..127) is expressed in 1/5 of mm/s (0..635 mm/s)
			} else {								// backward
				pwm_right_desired = -(speedr);
    1e2c:	30 95       	com	r19
    1e2e:	21 95       	neg	r18
    1e30:	3f 4f       	sbci	r19, 0xFF	; 255
    1e32:	30 93 fa 02 	sts	0x02FA, r19
    1e36:	20 93 f9 02 	sts	0x02F9, r18
			}

			if((rfData[5]&0x80)==0x80) {			// motor left forward
    1e3a:	67 fd       	sbrc	r22, 7
    1e3c:	03 c0       	rjmp	.+6      	; 0x1e44 <handleRFCommands+0x106>
				pwm_left_desired = speedl;
			} else {								// backward
				pwm_left_desired = -(speedl);
    1e3e:	90 95       	com	r25
    1e40:	81 95       	neg	r24
    1e42:	9f 4f       	sbci	r25, 0xFF	; 255
    1e44:	90 93 fc 02 	sts	0x02FC, r25
    1e48:	80 93 fb 02 	sts	0x02FB, r24
    1e4c:	24 2f       	mov	r18, r20
    1e4e:	e5 2f       	mov	r30, r21

		}


		for(i=0; i<3; i++) {
			dataLED[i]=rfData[i]&0xFF;
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	30 93 9a 08 	sts	0x089A, r19
    1e56:	20 93 99 08 	sts	0x0899, r18
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	f0 93 9c 08 	sts	0x089C, r31
    1e60:	e0 93 9b 08 	sts	0x089B, r30
    1e64:	10 e0       	ldi	r17, 0x00	; 0
    1e66:	10 93 9e 08 	sts	0x089E, r17
    1e6a:	00 93 9d 08 	sts	0x089D, r16
		}
		pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
    1e6e:	92 2f       	mov	r25, r18
    1e70:	88 27       	eor	r24, r24
    1e72:	82 1b       	sub	r24, r18
    1e74:	93 0b       	sbc	r25, r19
    1e76:	24 e6       	ldi	r18, 0x64	; 100
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	b9 01       	movw	r22, r18
    1e7c:	0e 94 ad 4b 	call	0x975a	; 0x975a <__udivmodhi4>
    1e80:	f6 2e       	mov	r15, r22
    1e82:	f0 94       	com	r15
    1e84:	f0 92 0c 02 	sts	0x020C, r15
		pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
    1e88:	5e 2f       	mov	r21, r30
    1e8a:	44 27       	eor	r20, r20
    1e8c:	4e 1b       	sub	r20, r30
    1e8e:	5f 0b       	sbc	r21, r31
    1e90:	ca 01       	movw	r24, r20
    1e92:	b9 01       	movw	r22, r18
    1e94:	0e 94 ad 4b 	call	0x975a	; 0x975a <__udivmodhi4>
    1e98:	60 95       	com	r22
    1e9a:	60 93 0e 02 	sts	0x020E, r22
		pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
    1e9e:	50 2f       	mov	r21, r16
    1ea0:	44 27       	eor	r20, r20
    1ea2:	40 1b       	sub	r20, r16
    1ea4:	51 0b       	sbc	r21, r17
    1ea6:	ca 01       	movw	r24, r20
    1ea8:	b9 01       	movw	r22, r18
    1eaa:	0e 94 ad 4b 	call	0x975a	; 0x975a <__udivmodhi4>
    1eae:	60 95       	com	r22
    1eb0:	60 93 0d 02 	sts	0x020D, r22
		updateRedLed(pwm_red);
    1eb4:	8f 2d       	mov	r24, r15
    1eb6:	0e 94 07 3b 	call	0x760e	; 0x760e <updateRedLed>
		updateGreenLed(pwm_green);
    1eba:	80 91 0d 02 	lds	r24, 0x020D
    1ebe:	0e 94 1b 3b 	call	0x7636	; 0x7636 <updateGreenLed>
		updateBlueLed(pwm_blue);
    1ec2:	80 91 0e 02 	lds	r24, 0x020E
    1ec6:	0e 94 2f 3b 	call	0x765e	; 0x765e <updateBlueLed>


		if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
    1eca:	80 91 b4 08 	lds	r24, 0x08B4
    1ece:	80 ff       	sbrs	r24, 0
    1ed0:	e6 c0       	rjmp	.+460    	; 0x209e <handleRFCommands+0x360>
			LED_IR1_LOW;
    1ed2:	44 98       	cbi	0x08, 4	; 8
		} else {
			LED_IR1_HIGH;
		}

		if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
    1ed4:	81 ff       	sbrs	r24, 1
    1ed6:	e1 c0       	rjmp	.+450    	; 0x209a <handleRFCommands+0x35c>
			LED_IR2_LOW;
    1ed8:	45 98       	cbi	0x08, 5	; 8
		} else {
			LED_IR2_HIGH;
		}

		if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
    1eda:	98 2f       	mov	r25, r24
    1edc:	82 ff       	sbrs	r24, 2
    1ede:	da c0       	rjmp	.+436    	; 0x2094 <handleRFCommands+0x356>
			irEnabled = 1;
    1ee0:	21 e0       	ldi	r18, 0x01	; 1
    1ee2:	20 93 12 02 	sts	0x0212, r18
		} else {
			irEnabled = 0;
		}

		if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
    1ee6:	84 fd       	sbrc	r24, 4
    1ee8:	33 c2       	rjmp	.+1126   	; 0x2350 <__stack+0x151>
			calibrateSensors();
			resetOdometry();
		}

		if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
    1eea:	86 ff       	sbrs	r24, 6
    1eec:	d0 c0       	rjmp	.+416    	; 0x208e <handleRFCommands+0x350>
			obstacleAvoidanceEnabled = 1;
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	80 93 6a 04 	sts	0x046A, r24
		} else {
			obstacleAvoidanceEnabled = 0;
		}

		if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
    1ef4:	97 fd       	sbrc	r25, 7
    1ef6:	57 c2       	rjmp	.+1198   	; 0x23a6 <__stack+0x1a7>
			cliffAvoidanceEnabled = 1;
		} else {
			cliffAvoidanceEnabled = 0;
    1ef8:	10 92 6b 04 	sts	0x046B, r1
		}

		// handle small green leds
		#ifdef HW_REV_3_1			

			if(bit_is_set(rfData[6], 0) ) {
    1efc:	80 91 b7 08 	lds	r24, 0x08B7
    1f00:	80 ff       	sbrs	r24, 0
    1f02:	bf c0       	rjmp	.+382    	; 0x2082 <handleRFCommands+0x344>
				GREEN_LED0_ON;
    1f04:	80 91 0b 01 	lds	r24, 0x010B
    1f08:	8e 7f       	andi	r24, 0xFE	; 254
    1f0a:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED0_OFF;
			}
				
			if(bit_is_set(rfData[6], 1) ) {
    1f0e:	80 91 b7 08 	lds	r24, 0x08B7
    1f12:	81 ff       	sbrs	r24, 1
    1f14:	b0 c0       	rjmp	.+352    	; 0x2076 <handleRFCommands+0x338>
				GREEN_LED1_ON;
    1f16:	80 91 0b 01 	lds	r24, 0x010B
    1f1a:	8d 7f       	andi	r24, 0xFD	; 253
    1f1c:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED1_OFF;
			}
				
			if(bit_is_set(rfData[6], 2) ) {
    1f20:	80 91 b7 08 	lds	r24, 0x08B7
    1f24:	82 ff       	sbrs	r24, 2
    1f26:	a1 c0       	rjmp	.+322    	; 0x206a <handleRFCommands+0x32c>
				GREEN_LED2_ON;
    1f28:	80 91 0b 01 	lds	r24, 0x010B
    1f2c:	8b 7f       	andi	r24, 0xFB	; 251
    1f2e:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED2_OFF;
			}												

			if(bit_is_set(rfData[6], 3) ) {
    1f32:	80 91 b7 08 	lds	r24, 0x08B7
    1f36:	83 ff       	sbrs	r24, 3
    1f38:	96 c0       	rjmp	.+300    	; 0x2066 <handleRFCommands+0x328>
				GREEN_LED3_ON;
    1f3a:	a3 98       	cbi	0x14, 3	; 20
			} else {
				GREEN_LED3_OFF;
			}

			if(bit_is_set(rfData[6], 4) ) {
    1f3c:	80 91 b7 08 	lds	r24, 0x08B7
    1f40:	84 ff       	sbrs	r24, 4
    1f42:	8b c0       	rjmp	.+278    	; 0x205a <handleRFCommands+0x31c>
				GREEN_LED4_ON;
    1f44:	80 91 0b 01 	lds	r24, 0x010B
    1f48:	8f 7e       	andi	r24, 0xEF	; 239
    1f4a:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED4_OFF;
			}

			if(bit_is_set(rfData[6], 5) ) {
    1f4e:	80 91 b7 08 	lds	r24, 0x08B7
    1f52:	85 ff       	sbrs	r24, 5
    1f54:	7c c0       	rjmp	.+248    	; 0x204e <handleRFCommands+0x310>
				GREEN_LED5_ON;
    1f56:	80 91 0b 01 	lds	r24, 0x010B
    1f5a:	8f 7d       	andi	r24, 0xDF	; 223
    1f5c:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED5_OFF;
			}

			if(bit_is_set(rfData[6], 6) ) {
    1f60:	80 91 b7 08 	lds	r24, 0x08B7
    1f64:	86 ff       	sbrs	r24, 6
    1f66:	6d c0       	rjmp	.+218    	; 0x2042 <handleRFCommands+0x304>
				GREEN_LED6_ON;
    1f68:	80 91 0b 01 	lds	r24, 0x010B
    1f6c:	8f 7b       	andi	r24, 0xBF	; 191
    1f6e:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED6_OFF;
			}

			if(bit_is_set(rfData[6], 7) ) {
    1f72:	80 91 b7 08 	lds	r24, 0x08B7
    1f76:	87 fd       	sbrc	r24, 7
    1f78:	10 c2       	rjmp	.+1056   	; 0x239a <__stack+0x19b>
				GREEN_LED7_ON;
			} else {
				GREEN_LED7_OFF;
    1f7a:	80 91 0b 01 	lds	r24, 0x010B
    1f7e:	80 68       	ori	r24, 0x80	; 128
    1f80:	80 93 0b 01 	sts	0x010B, r24
			}

		#endif
		
		if(currentSelector == 8) {
    1f84:	80 91 4a 04 	lds	r24, 0x044A
    1f88:	88 30       	cpi	r24, 0x08	; 8
    1f8a:	09 f4       	brne	.+2      	; 0x1f8e <handleRFCommands+0x250>
    1f8c:	e9 c1       	rjmp	.+978    	; 0x2360 <__stack+0x161>
		}

		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;
    1f8e:	80 91 0b 02 	lds	r24, 0x020B
    1f92:	80 93 e9 07 	sts	0x07E9, r24

		switch(packetId) {
    1f96:	85 30       	cpi	r24, 0x05	; 5
    1f98:	09 f4       	brne	.+2      	; 0x1f9c <handleRFCommands+0x25e>
    1f9a:	09 c2       	rjmp	.+1042   	; 0x23ae <__stack+0x1af>
    1f9c:	86 30       	cpi	r24, 0x06	; 6
    1f9e:	08 f0       	brcs	.+2      	; 0x1fa2 <handleRFCommands+0x264>
    1fa0:	80 c0       	rjmp	.+256    	; 0x20a2 <handleRFCommands+0x364>
    1fa2:	83 30       	cpi	r24, 0x03	; 3
    1fa4:	09 f4       	brne	.+2      	; 0x1fa8 <handleRFCommands+0x26a>
    1fa6:	70 c1       	rjmp	.+736    	; 0x2288 <__stack+0x89>
    1fa8:	84 30       	cpi	r24, 0x04	; 4
    1faa:	09 f0       	breq	.+2      	; 0x1fae <handleRFCommands+0x270>
    1fac:	d1 c0       	rjmp	.+418    	; 0x2150 <handleRFCommands+0x412>
				#endif
				packetId = 4;
				break;

			case 4:
				ackPayload[1] = proximityResult[4]&0xFF;
    1fae:	90 91 61 02 	lds	r25, 0x0261
    1fb2:	80 91 62 02 	lds	r24, 0x0262
    1fb6:	90 93 ea 07 	sts	0x07EA, r25
				ackPayload[2] = proximityResult[4]>>8;
    1fba:	80 93 eb 07 	sts	0x07EB, r24
				ackPayload[3] = irCommMaxSensorSignalTemp[12]&0xFF; //proximityResult[8]&0xFF;
    1fbe:	90 91 d6 07 	lds	r25, 0x07D6
    1fc2:	80 91 d7 07 	lds	r24, 0x07D7
    1fc6:	90 93 ec 07 	sts	0x07EC, r25
				ackPayload[4] = irCommMaxSensorSignalTemp[12]>>8; //proximityResult[8]>>8;
    1fca:	80 93 ed 07 	sts	0x07ED, r24
				ackPayload[5] = irCommMaxSensorSignalTemp[13]&0xFF; //proximityResult[9]&0xFF;
    1fce:	90 91 d8 07 	lds	r25, 0x07D8
    1fd2:	80 91 d9 07 	lds	r24, 0x07D9
    1fd6:	90 93 ee 07 	sts	0x07EE, r25
				ackPayload[6] = irCommMaxSensorSignalTemp[13]>>8; //proximityResult[9]>>8;
    1fda:	80 93 ef 07 	sts	0x07EF, r24
				ackPayload[7] = irCommMaxSensorSignalTemp[14]&0xFF; //proximityResult[10]&0xFF;
    1fde:	90 91 da 07 	lds	r25, 0x07DA
    1fe2:	80 91 db 07 	lds	r24, 0x07DB
    1fe6:	90 93 f0 07 	sts	0x07F0, r25
				ackPayload[8] = irCommMaxSensorSignalTemp[14]>>8; //proximityResult[10]>>8;
    1fea:	80 93 f1 07 	sts	0x07F1, r24
				ackPayload[9] = irCommMaxSensorSignalTemp[15]&0xFF; //proximityResult[11]&0xFF;
    1fee:	90 91 dc 07 	lds	r25, 0x07DC
    1ff2:	80 91 dd 07 	lds	r24, 0x07DD
    1ff6:	90 93 f2 07 	sts	0x07F2, r25
				ackPayload[10] = irCommMaxSensorSignalTemp[15]>>8; //proximityResult[11]>>8;
    1ffa:	80 93 f3 07 	sts	0x07F3, r24
				ackPayload[11] = accX&0xFF;
    1ffe:	90 91 2a 04 	lds	r25, 0x042A
    2002:	80 91 2b 04 	lds	r24, 0x042B
    2006:	90 93 f4 07 	sts	0x07F4, r25
				ackPayload[12] = accX>>8;
    200a:	80 93 f5 07 	sts	0x07F5, r24
				ackPayload[13] = accY&0xFF;
    200e:	90 91 2c 04 	lds	r25, 0x042C
    2012:	80 91 2d 04 	lds	r24, 0x042D
    2016:	90 93 f6 07 	sts	0x07F6, r25
				ackPayload[14] = accY>>8;
    201a:	80 93 f7 07 	sts	0x07F7, r24
				ackPayload[15] = irCommShiftCountTemp; //irCommand;
    201e:	80 91 0c 09 	lds	r24, 0x090C
    2022:	80 93 f8 07 	sts	0x07F8, r24
				packetId = 5;
    2026:	85 e0       	ldi	r24, 0x05	; 5
    2028:	80 93 0b 02 	sts	0x020B, r24
				break;
    202c:	91 c0       	rjmp	.+290    	; 0x2150 <handleRFCommands+0x412>
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {

			sleep(60);
    202e:	8c e3       	ldi	r24, 0x3C	; 60
    2030:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <sleep>
    2034:	40 91 b1 08 	lds	r20, 0x08B1
    2038:	24 2f       	mov	r18, r20
    203a:	50 91 b2 08 	lds	r21, 0x08B2
    203e:	e5 2f       	mov	r30, r21
    2040:	d9 ce       	rjmp	.-590    	; 0x1df4 <handleRFCommands+0xb6>
			}

			if(bit_is_set(rfData[6], 6) ) {
				GREEN_LED6_ON;
			} else {
				GREEN_LED6_OFF;
    2042:	80 91 0b 01 	lds	r24, 0x010B
    2046:	80 64       	ori	r24, 0x40	; 64
    2048:	80 93 0b 01 	sts	0x010B, r24
    204c:	92 cf       	rjmp	.-220    	; 0x1f72 <handleRFCommands+0x234>
			}

			if(bit_is_set(rfData[6], 5) ) {
				GREEN_LED5_ON;
			} else {
				GREEN_LED5_OFF;
    204e:	80 91 0b 01 	lds	r24, 0x010B
    2052:	80 62       	ori	r24, 0x20	; 32
    2054:	80 93 0b 01 	sts	0x010B, r24
    2058:	83 cf       	rjmp	.-250    	; 0x1f60 <handleRFCommands+0x222>
			}

			if(bit_is_set(rfData[6], 4) ) {
				GREEN_LED4_ON;
			} else {
				GREEN_LED4_OFF;
    205a:	80 91 0b 01 	lds	r24, 0x010B
    205e:	80 61       	ori	r24, 0x10	; 16
    2060:	80 93 0b 01 	sts	0x010B, r24
    2064:	74 cf       	rjmp	.-280    	; 0x1f4e <handleRFCommands+0x210>
			}												

			if(bit_is_set(rfData[6], 3) ) {
				GREEN_LED3_ON;
			} else {
				GREEN_LED3_OFF;
    2066:	a3 9a       	sbi	0x14, 3	; 20
    2068:	69 cf       	rjmp	.-302    	; 0x1f3c <handleRFCommands+0x1fe>
			}
				
			if(bit_is_set(rfData[6], 2) ) {
				GREEN_LED2_ON;
			} else {
				GREEN_LED2_OFF;
    206a:	80 91 0b 01 	lds	r24, 0x010B
    206e:	84 60       	ori	r24, 0x04	; 4
    2070:	80 93 0b 01 	sts	0x010B, r24
    2074:	5e cf       	rjmp	.-324    	; 0x1f32 <handleRFCommands+0x1f4>
			}
				
			if(bit_is_set(rfData[6], 1) ) {
				GREEN_LED1_ON;
			} else {
				GREEN_LED1_OFF;
    2076:	80 91 0b 01 	lds	r24, 0x010B
    207a:	82 60       	ori	r24, 0x02	; 2
    207c:	80 93 0b 01 	sts	0x010B, r24
    2080:	4f cf       	rjmp	.-354    	; 0x1f20 <handleRFCommands+0x1e2>
		#ifdef HW_REV_3_1			

			if(bit_is_set(rfData[6], 0) ) {
				GREEN_LED0_ON;
			} else {
				GREEN_LED0_OFF;
    2082:	80 91 0b 01 	lds	r24, 0x010B
    2086:	81 60       	ori	r24, 0x01	; 1
    2088:	80 93 0b 01 	sts	0x010B, r24
    208c:	40 cf       	rjmp	.-384    	; 0x1f0e <handleRFCommands+0x1d0>
		}

		if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
			obstacleAvoidanceEnabled = 1;
		} else {
			obstacleAvoidanceEnabled = 0;
    208e:	10 92 6a 04 	sts	0x046A, r1
    2092:	30 cf       	rjmp	.-416    	; 0x1ef4 <handleRFCommands+0x1b6>
		}

		if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
			irEnabled = 1;
		} else {
			irEnabled = 0;
    2094:	10 92 12 02 	sts	0x0212, r1
    2098:	26 cf       	rjmp	.-436    	; 0x1ee6 <handleRFCommands+0x1a8>
		}

		if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
			LED_IR2_LOW;
		} else {
			LED_IR2_HIGH;
    209a:	45 9a       	sbi	0x08, 5	; 8
    209c:	1e cf       	rjmp	.-452    	; 0x1eda <handleRFCommands+0x19c>


		if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
			LED_IR1_LOW;
		} else {
			LED_IR1_HIGH;
    209e:	44 9a       	sbi	0x08, 4	; 8
    20a0:	19 cf       	rjmp	.-462    	; 0x1ed4 <handleRFCommands+0x196>
		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;

		switch(packetId) {
    20a2:	86 30       	cpi	r24, 0x06	; 6
    20a4:	09 f4       	brne	.+2      	; 0x20a8 <handleRFCommands+0x36a>
    20a6:	b2 c0       	rjmp	.+356    	; 0x220c <__stack+0xd>
    20a8:	87 30       	cpi	r24, 0x07	; 7
    20aa:	09 f0       	breq	.+2      	; 0x20ae <handleRFCommands+0x370>
    20ac:	51 c0       	rjmp	.+162    	; 0x2150 <handleRFCommands+0x412>
				packetId = 7;
				break;


			case 7:
				ackPayload[1] = ((signed long int)leftMotSteps)&0xFF;
    20ae:	60 91 d5 02 	lds	r22, 0x02D5
    20b2:	70 91 d6 02 	lds	r23, 0x02D6
    20b6:	80 91 d7 02 	lds	r24, 0x02D7
    20ba:	90 91 d8 02 	lds	r25, 0x02D8
    20be:	0e 94 bb 49 	call	0x9376	; 0x9376 <__fixsfsi>
    20c2:	60 93 ea 07 	sts	0x07EA, r22
				ackPayload[2] = ((signed long int)leftMotSteps)>>8;
    20c6:	70 93 eb 07 	sts	0x07EB, r23
				ackPayload[3] = ((signed long int)leftMotSteps)>>16;
    20ca:	80 93 ec 07 	sts	0x07EC, r24
				ackPayload[4] = ((signed long int)leftMotSteps)>>24;
    20ce:	90 93 ed 07 	sts	0x07ED, r25
				ackPayload[5] = ((signed long int)rightMotSteps)&0xFF;
    20d2:	60 91 d1 02 	lds	r22, 0x02D1
    20d6:	70 91 d2 02 	lds	r23, 0x02D2
    20da:	80 91 d3 02 	lds	r24, 0x02D3
    20de:	90 91 d4 02 	lds	r25, 0x02D4
    20e2:	0e 94 bb 49 	call	0x9376	; 0x9376 <__fixsfsi>
    20e6:	60 93 ee 07 	sts	0x07EE, r22
				ackPayload[6] = ((signed long int)rightMotSteps)>>8;
    20ea:	70 93 ef 07 	sts	0x07EF, r23
				ackPayload[7] = ((signed long int)rightMotSteps)>>16;
    20ee:	80 93 f0 07 	sts	0x07F0, r24
				ackPayload[8] = ((signed long int)rightMotSteps)>>24;
    20f2:	90 93 f1 07 	sts	0x07F1, r25
				lastTheta = theta;
    20f6:	80 91 6d 04 	lds	r24, 0x046D
    20fa:	90 91 6e 04 	lds	r25, 0x046E
    20fe:	a0 91 6f 04 	lds	r26, 0x046F
    2102:	b0 91 70 04 	lds	r27, 0x0470
    2106:	80 93 71 04 	sts	0x0471, r24
    210a:	90 93 72 04 	sts	0x0472, r25
    210e:	a0 93 73 04 	sts	0x0473, r26
    2112:	b0 93 74 04 	sts	0x0474, r27
				ackPayload[9] = irCommMaxSensorSignalTemp[16]&0xFF; //((signed int)(lastTheta*573.0))&0xFF;	// radians to degrees => 573 = 1800/PI
    2116:	90 91 de 07 	lds	r25, 0x07DE
    211a:	80 91 df 07 	lds	r24, 0x07DF
    211e:	90 93 f2 07 	sts	0x07F2, r25
				ackPayload[10] = irCommMaxSensorSignalTemp[16]>>8; //((signed int)(lastTheta*573.0))>>8;				
    2122:	80 93 f3 07 	sts	0x07F3, r24
				ackPayload[11] = irCommMaxSensorSignalTemp[17]&0xFF; //((unsigned int)xPos)&0xFF;
    2126:	90 91 e0 07 	lds	r25, 0x07E0
    212a:	80 91 e1 07 	lds	r24, 0x07E1
    212e:	90 93 f4 07 	sts	0x07F4, r25
				ackPayload[12] = irCommMaxSensorSignalTemp[17]>>8; //((unsigned int)xPos)>>8;
    2132:	80 93 f5 07 	sts	0x07F5, r24
				ackPayload[13] = irCommMaxSensorSignalTemp[18]&0xFF; //((unsigned int)yPos)&0xFF;
    2136:	90 91 e2 07 	lds	r25, 0x07E2
    213a:	80 91 e3 07 	lds	r24, 0x07E3
    213e:	90 93 f6 07 	sts	0x07F6, r25
				ackPayload[14] = irCommMaxSensorSignalTemp[18]>>8; //((unsigned int)yPos)>>8;
    2142:	80 93 f7 07 	sts	0x07F7, r24
				//ackPayload[10] = ((unsigned int)(thetaOld*573.0))>>8;
				//ackPayload[11] = ((unsigned int)xPosOld)&0xFF;
				//ackPayload[12] = ((unsigned int)xPosOld)>>8;
				//ackPayload[13] = ((unsigned int)yPosOld)&0xFF;
				//ackPayload[14] = ((unsigned int)yPosOld)>>8;
				ackPayload[15] = 0;
    2146:	10 92 f8 07 	sts	0x07F8, r1
				packetId = 3;
    214a:	83 e0       	ldi	r24, 0x03	; 3
    214c:	80 93 0b 02 	sts	0x020B, r24
	return pWidth;
}

void flushTxFifo() {

    mirf_CSN_lo;
    2150:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    2152:	81 ee       	ldi	r24, 0xE1	; 225
    2154:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    mirf_CSN_hi;
    2158:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
    215a:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
    215c:	88 ea       	ldi	r24, 0xA8	; 168
    215e:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>

	for(k=0; k<size; k++) {
		SPI_Write_Byte(data[k]);
    2162:	80 91 e9 07 	lds	r24, 0x07E9
    2166:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    216a:	80 91 ea 07 	lds	r24, 0x07EA
    216e:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    2172:	80 91 eb 07 	lds	r24, 0x07EB
    2176:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    217a:	80 91 ec 07 	lds	r24, 0x07EC
    217e:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    2182:	80 91 ed 07 	lds	r24, 0x07ED
    2186:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    218a:	80 91 ee 07 	lds	r24, 0x07EE
    218e:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    2192:	80 91 ef 07 	lds	r24, 0x07EF
    2196:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    219a:	80 91 f0 07 	lds	r24, 0x07F0
    219e:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    21a2:	80 91 f1 07 	lds	r24, 0x07F1
    21a6:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    21aa:	80 91 f2 07 	lds	r24, 0x07F2
    21ae:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    21b2:	80 91 f3 07 	lds	r24, 0x07F3
    21b6:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    21ba:	80 91 f4 07 	lds	r24, 0x07F4
    21be:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    21c2:	80 91 f5 07 	lds	r24, 0x07F5
    21c6:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    21ca:	80 91 f6 07 	lds	r24, 0x07F6
    21ce:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    21d2:	80 91 f7 07 	lds	r24, 0x07F7
    21d6:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
    21da:	80 91 f8 07 	lds	r24, 0x07F8
    21de:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SPI_Write_Byte>
	}	

    mirf_CSN_hi;
    21e2:	28 9a       	sbi	0x05, 0	; 5

		writeAckPayload(ackPayload, 16);

	}

}
    21e4:	0f 90       	pop	r0
    21e6:	cf 91       	pop	r28
    21e8:	df 91       	pop	r29
    21ea:	1f 91       	pop	r17
    21ec:	0f 91       	pop	r16
    21ee:	ff 90       	pop	r15
    21f0:	08 95       	ret

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    21f2:	00 91 b3 08 	lds	r16, 0x08B3
    21f6:	00 23       	and	r16, r16
    21f8:	09 f0       	breq	.+2      	; 0x21fc <handleRFCommands+0x4be>
    21fa:	19 c1       	rjmp	.+562    	; 0x242e <__stack+0x22f>
    21fc:	80 91 b4 08 	lds	r24, 0x08B4
    2200:	88 30       	cpi	r24, 0x08	; 8
    2202:	09 f4       	brne	.+2      	; 0x2206 <__stack+0x7>
    2204:	16 c1       	rjmp	.+556    	; 0x2432 <__stack+0x233>
    2206:	e0 2f       	mov	r30, r16
    2208:	20 2f       	mov	r18, r16
    220a:	f6 cd       	rjmp	.-1044   	; 0x1df8 <handleRFCommands+0xba>
				ackPayload[15] = currentSelector;
				packetId = 6;
				break;

			case 6:
				ackPayload[1] = irCommMaxSensorSignalTemp[4]&0xFF; //proximityValue[8]&0xFF;
    220c:	90 91 c6 07 	lds	r25, 0x07C6
    2210:	80 91 c7 07 	lds	r24, 0x07C7
    2214:	90 93 ea 07 	sts	0x07EA, r25
				ackPayload[2] = irCommMaxSensorSignalTemp[4]>>8; //proximityValue[8]>>8;
    2218:	80 93 eb 07 	sts	0x07EB, r24
				ackPayload[3] = irCommMaxSensorSignalTemp[8]&0xFF; //proximityValue[16]&0xFF;
    221c:	90 91 ce 07 	lds	r25, 0x07CE
    2220:	80 91 cf 07 	lds	r24, 0x07CF
    2224:	90 93 ec 07 	sts	0x07EC, r25
				ackPayload[4] = irCommMaxSensorSignalTemp[8]>>8; //proximityValue[16]>>8;
    2228:	80 93 ed 07 	sts	0x07ED, r24
				ackPayload[5] = irCommMaxSensorSignalTemp[9]&0xFF; //proximityValue[18]&0xFF;
    222c:	90 91 d0 07 	lds	r25, 0x07D0
    2230:	80 91 d1 07 	lds	r24, 0x07D1
    2234:	90 93 ee 07 	sts	0x07EE, r25
				ackPayload[6] = irCommMaxSensorSignalTemp[9]>>8; //proximityValue[18]>>8;
    2238:	80 93 ef 07 	sts	0x07EF, r24
				ackPayload[7] = irCommMaxSensorSignalTemp[10]&0xFF; //proximityValue[20]&0xFF;
    223c:	90 91 d2 07 	lds	r25, 0x07D2
    2240:	80 91 d3 07 	lds	r24, 0x07D3
    2244:	90 93 f0 07 	sts	0x07F0, r25
				ackPayload[8] = irCommMaxSensorSignalTemp[10]>>8; //proximityValue[20]>>8;
    2248:	80 93 f1 07 	sts	0x07F1, r24
				ackPayload[9] = irCommMaxSensorSignalTemp[11]&0xFF; //proximityValue[22]&0xFF;
    224c:	90 91 d4 07 	lds	r25, 0x07D4
    2250:	80 91 d5 07 	lds	r24, 0x07D5
    2254:	90 93 f2 07 	sts	0x07F2, r25
				ackPayload[10] = irCommMaxSensorSignalTemp[11]>>8; //proximityValue[22]>>8;
    2258:	80 93 f3 07 	sts	0x07F3, r24
				ackPayload[11] = accZ&0xFF;
    225c:	90 91 2e 04 	lds	r25, 0x042E
    2260:	80 91 2f 04 	lds	r24, 0x042F
    2264:	90 93 f4 07 	sts	0x07F4, r25
				ackPayload[12] = accZ>>8;	
    2268:	80 93 f5 07 	sts	0x07F5, r24
				ackPayload[13] = irCommMaxSensorSignalTemp[19]&0xFF; //batteryLevel&0xFF;
    226c:	90 91 e4 07 	lds	r25, 0x07E4
    2270:	80 91 e5 07 	lds	r24, 0x07E5
    2274:	90 93 f6 07 	sts	0x07F6, r25
				ackPayload[14] = irCommMaxSensorSignalTemp[19]>>8; //batteryLevel>>8;
    2278:	80 93 f7 07 	sts	0x07F7, r24
				ackPayload[15] = 0;
    227c:	10 92 f8 07 	sts	0x07F8, r1
				packetId = 7;
    2280:	87 e0       	ldi	r24, 0x07	; 7
    2282:	80 93 0b 02 	sts	0x020B, r24
				break;
    2286:	64 cf       	rjmp	.-312    	; 0x2150 <handleRFCommands+0x412>
		// write back the ack payload
		ackPayload[0] = packetId&0xFF;

		switch(packetId) {
			case 3:
				ackPayload[1] = irCommRxMaxDiffTemp&0xFF; //proximityResult[0]&0xFF;
    2288:	90 91 f3 08 	lds	r25, 0x08F3
    228c:	80 91 f4 08 	lds	r24, 0x08F4
    2290:	90 93 ea 07 	sts	0x07EA, r25
				ackPayload[2] = irCommRxMaxDiffTemp>>8; //proximityResult[0]>>8;
    2294:	80 93 eb 07 	sts	0x07EB, r24
				ackPayload[3] = irCommTempValue&0xFF; //proximityResult[1]&0xFF;
    2298:	90 91 c5 04 	lds	r25, 0x04C5
    229c:	80 91 c6 04 	lds	r24, 0x04C6
    22a0:	90 93 ec 07 	sts	0x07EC, r25
				ackPayload[4] = irCommTempValue>>8; //proximityResult[1]>>8;
    22a4:	80 93 ed 07 	sts	0x07ED, r24
				ackPayload[5] = irCommComputeShift&0xFF; //proximityResult[2]&0xFF;
    22a8:	80 91 dd 04 	lds	r24, 0x04DD
    22ac:	80 93 ee 07 	sts	0x07EE, r24
				ackPayload[6] = irCommComputeShift>>8; //proximityResult[2]>>8;
    22b0:	10 92 ef 07 	sts	0x07EF, r1
				ackPayload[7] = irCommState&0xFF; //proximityResult[3]&0xFF;
    22b4:	80 91 c4 04 	lds	r24, 0x04C4
    22b8:	80 93 f0 07 	sts	0x07F0, r24
				ackPayload[8] = irCommState>>8; //proximityResult[3]>>8;
    22bc:	80 91 c4 04 	lds	r24, 0x04C4
    22c0:	10 92 f1 07 	sts	0x07F1, r1
				ackPayload[9] = irCommTickCounter&0xFF; //proximityResult[5]&0xFF;
    22c4:	90 91 c8 04 	lds	r25, 0x04C8
    22c8:	80 91 c9 04 	lds	r24, 0x04C9
    22cc:	90 93 f2 07 	sts	0x07F2, r25
				ackPayload[10] = irCommTickCounter>>8; //proximityResult[5]>>8;
    22d0:	80 93 f3 07 	sts	0x07F3, r24
				ackPayload[11] = irCommMaxSensorValueCurrTemp&0xFF; //proximityResult[6]&0xFF;
    22d4:	90 91 03 05 	lds	r25, 0x0503
    22d8:	80 91 04 05 	lds	r24, 0x0504
    22dc:	90 93 f4 07 	sts	0x07F4, r25
				ackPayload[12] = irCommMaxSensorValueCurrTemp>>8; //proximityResult[6]>>8;
    22e0:	80 93 f5 07 	sts	0x07F5, r24
				ackPayload[13] = irCommMinSensorValueCurrTemp&0xFF; //proximityResult[7]&0xFF;
    22e4:	90 91 c2 08 	lds	r25, 0x08C2
    22e8:	80 91 c3 08 	lds	r24, 0x08C3
    22ec:	90 93 f6 07 	sts	0x07F6, r25
				ackPayload[14] = irCommMinSensorValueCurrTemp>>8; //proximityResult[7]>>8;
    22f0:	80 93 f7 07 	sts	0x07F7, r24
				#ifdef HW_REV_3_1
					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1) | (CHARGE_STAT << 2);
    22f4:	30 91 03 01 	lds	r19, 0x0103
    22f8:	80 91 03 01 	lds	r24, 0x0103
    22fc:	20 91 03 01 	lds	r18, 0x0103
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	80 72       	andi	r24, 0x20	; 32
    2304:	90 70       	andi	r25, 0x00	; 0
    2306:	95 95       	asr	r25
    2308:	87 95       	ror	r24
    230a:	95 95       	asr	r25
    230c:	87 95       	ror	r24
    230e:	95 95       	asr	r25
    2310:	87 95       	ror	r24
    2312:	95 95       	asr	r25
    2314:	87 95       	ror	r24
    2316:	95 95       	asr	r25
    2318:	87 95       	ror	r24
    231a:	88 0f       	add	r24, r24
    231c:	99 1f       	adc	r25, r25
    231e:	22 1f       	adc	r18, r18
    2320:	22 27       	eor	r18, r18
    2322:	22 1f       	adc	r18, r18
    2324:	22 0f       	add	r18, r18
    2326:	22 0f       	add	r18, r18
    2328:	28 2b       	or	r18, r24
    232a:	83 2f       	mov	r24, r19
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	80 71       	andi	r24, 0x10	; 16
    2330:	90 70       	andi	r25, 0x00	; 0
    2332:	95 95       	asr	r25
    2334:	87 95       	ror	r24
    2336:	95 95       	asr	r25
    2338:	87 95       	ror	r24
    233a:	95 95       	asr	r25
    233c:	87 95       	ror	r24
    233e:	95 95       	asr	r25
    2340:	87 95       	ror	r24
    2342:	28 2b       	or	r18, r24
    2344:	20 93 f8 07 	sts	0x07F8, r18
				#else
					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1);
				#endif
				packetId = 4;
    2348:	84 e0       	ldi	r24, 0x04	; 4
    234a:	80 93 0b 02 	sts	0x020B, r24
				break;
    234e:	00 cf       	rjmp	.-512    	; 0x2150 <handleRFCommands+0x412>
		} else {
			irEnabled = 0;
		}

		if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
			calibrateSensors();
    2350:	0e 94 ff 3d 	call	0x7bfe	; 0x7bfe <calibrateSensors>
			resetOdometry();
    2354:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <resetOdometry>
    2358:	90 91 b4 08 	lds	r25, 0x08B4
    235c:	89 2f       	mov	r24, r25
    235e:	c5 cd       	rjmp	.-1142   	; 0x1eea <handleRFCommands+0x1ac>
			}

		#endif
		
		if(currentSelector == 8) {
			if(calibrateOdomFlag==0) {
    2360:	80 91 23 05 	lds	r24, 0x0523
    2364:	88 23       	and	r24, r24
    2366:	09 f0       	breq	.+2      	; 0x236a <__stack+0x16b>
    2368:	12 ce       	rjmp	.-988    	; 0x1f8e <handleRFCommands+0x250>
				if((rfData[7]&0b00000001)==0b00000001) {
    236a:	80 91 b8 08 	lds	r24, 0x08B8
    236e:	80 ff       	sbrs	r24, 0
    2370:	0e ce       	rjmp	.-996    	; 0x1f8e <handleRFCommands+0x250>
					calibrateSensors();
    2372:	0e 94 ff 3d 	call	0x7bfe	; 0x7bfe <calibrateSensors>
					proximityResult[8] = 1023;	// because the first time this value could be low after calibration
    2376:	8f ef       	ldi	r24, 0xFF	; 255
    2378:	93 e0       	ldi	r25, 0x03	; 3
    237a:	90 93 6a 02 	sts	0x026A, r25
    237e:	80 93 69 02 	sts	0x0269, r24
					proximityResult[11] = 1023;	// and in that case a false black line will be detected
    2382:	90 93 70 02 	sts	0x0270, r25
    2386:	80 93 6f 02 	sts	0x026F, r24
					calibState = 0;
    238a:	10 92 f2 08 	sts	0x08F2, r1
					calibVelIndex = 1;
    238e:	81 e0       	ldi	r24, 0x01	; 1
    2390:	80 93 e6 07 	sts	0x07E6, r24
					calibrateOdomFlag = 1;
    2394:	80 93 23 05 	sts	0x0523, r24
    2398:	fa cd       	rjmp	.-1036   	; 0x1f8e <handleRFCommands+0x250>
			} else {
				GREEN_LED6_OFF;
			}

			if(bit_is_set(rfData[6], 7) ) {
				GREEN_LED7_ON;
    239a:	80 91 0b 01 	lds	r24, 0x010B
    239e:	8f 77       	andi	r24, 0x7F	; 127
    23a0:	80 93 0b 01 	sts	0x010B, r24
    23a4:	ef cd       	rjmp	.-1058   	; 0x1f84 <handleRFCommands+0x246>
		} else {
			obstacleAvoidanceEnabled = 0;
		}

		if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
			cliffAvoidanceEnabled = 1;
    23a6:	81 e0       	ldi	r24, 0x01	; 1
    23a8:	80 93 6b 04 	sts	0x046B, r24
    23ac:	a7 cd       	rjmp	.-1202   	; 0x1efc <handleRFCommands+0x1be>
				ackPayload[15] = irCommShiftCountTemp; //irCommand;
				packetId = 5;
				break;

			case 5:
				ackPayload[1] = irCommMaxSensorSignalTemp[0]&0xFF; //proximityValue[0]&0xFF;
    23ae:	90 91 be 07 	lds	r25, 0x07BE
    23b2:	80 91 bf 07 	lds	r24, 0x07BF
    23b6:	90 93 ea 07 	sts	0x07EA, r25
				ackPayload[2] = irCommMaxSensorSignalTemp[0]>>8; //proximityValue[0]>>8;
    23ba:	80 93 eb 07 	sts	0x07EB, r24
				ackPayload[3] = irCommMaxSensorSignalTemp[1]&0xFF; //proximityValue[2]&0xFF;
    23be:	90 91 c0 07 	lds	r25, 0x07C0
    23c2:	80 91 c1 07 	lds	r24, 0x07C1
    23c6:	90 93 ec 07 	sts	0x07EC, r25
				ackPayload[4] = irCommMaxSensorSignalTemp[1]>>8; //proximityValue[2]>>8;
    23ca:	80 93 ed 07 	sts	0x07ED, r24
				ackPayload[5] = irCommMaxSensorSignalTemp[2]&0xFF; //proximityValue[4]&0xFF;
    23ce:	90 91 c2 07 	lds	r25, 0x07C2
    23d2:	80 91 c3 07 	lds	r24, 0x07C3
    23d6:	90 93 ee 07 	sts	0x07EE, r25
				ackPayload[6] = irCommMaxSensorSignalTemp[2]>>8; //proximityValue[4]>>8;
    23da:	80 93 ef 07 	sts	0x07EF, r24
				ackPayload[7] = irCommMaxSensorSignalTemp[3]&0xFF; //proximityValue[6]&0xFF;
    23de:	90 91 c4 07 	lds	r25, 0x07C4
    23e2:	80 91 c5 07 	lds	r24, 0x07C5
    23e6:	90 93 f0 07 	sts	0x07F0, r25
				ackPayload[8] = irCommMaxSensorSignalTemp[3]>>8; //proximityValue[6]>>8;
    23ea:	80 93 f1 07 	sts	0x07F1, r24
				ackPayload[9] = irCommMaxSensorSignalTemp[5]&0xFF; //proximityValue[10]&0xFF;
    23ee:	90 91 c8 07 	lds	r25, 0x07C8
    23f2:	80 91 c9 07 	lds	r24, 0x07C9
    23f6:	90 93 f2 07 	sts	0x07F2, r25
				ackPayload[10] = irCommMaxSensorSignalTemp[5]>>8; //proximityValue[10]>>8;
    23fa:	80 93 f3 07 	sts	0x07F3, r24
				ackPayload[11] = irCommMaxSensorSignalTemp[6]&0xFF; //proximityValue[12]&0xFF;
    23fe:	90 91 ca 07 	lds	r25, 0x07CA
    2402:	80 91 cb 07 	lds	r24, 0x07CB
    2406:	90 93 f4 07 	sts	0x07F4, r25
				ackPayload[12] = irCommMaxSensorSignalTemp[6]>>8; //proximityValue[12]>>8;
    240a:	80 93 f5 07 	sts	0x07F5, r24
				ackPayload[13] = irCommMaxSensorSignalTemp[7]&0xFF; //proximityValue[14]&0xFF;
    240e:	90 91 cc 07 	lds	r25, 0x07CC
    2412:	80 91 cd 07 	lds	r24, 0x07CD
    2416:	90 93 f6 07 	sts	0x07F6, r25
				ackPayload[14] = irCommMaxSensorSignalTemp[7]>>8; //proximityValue[14]>>8;
    241a:	80 93 f7 07 	sts	0x07F7, r24
				ackPayload[15] = currentSelector;
    241e:	80 91 4a 04 	lds	r24, 0x044A
    2422:	80 93 f8 07 	sts	0x07F8, r24
				packetId = 6;
    2426:	86 e0       	ldi	r24, 0x06	; 6
    2428:	80 93 0b 02 	sts	0x020B, r24
				break;
    242c:	91 ce       	rjmp	.-734    	; 0x2150 <handleRFCommands+0x412>

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    242e:	25 2f       	mov	r18, r21
    2430:	e3 cc       	rjmp	.-1594   	; 0x1df8 <handleRFCommands+0xba>
    2432:	80 91 b5 08 	lds	r24, 0x08B5
    2436:	88 23       	and	r24, r24
    2438:	09 f0       	breq	.+2      	; 0x243c <__stack+0x23d>
    243a:	e5 ce       	rjmp	.-566    	; 0x2206 <__stack+0x7>
    243c:	80 91 b6 08 	lds	r24, 0x08B6
    2440:	88 23       	and	r24, r24
    2442:	09 f4       	brne	.+2      	; 0x2446 <__stack+0x247>
    2444:	f4 cd       	rjmp	.-1048   	; 0x202e <handleRFCommands+0x2f0>
    2446:	25 2f       	mov	r18, r21
    2448:	d7 cc       	rjmp	.-1618   	; 0x1df8 <handleRFCommands+0xba>

0000244a <init_ir_remote_control>:
static unsigned char check_temp = 0;
unsigned char address = 0;
unsigned char data_ir = 0;
unsigned char check = 2;

void init_ir_remote_control(void) { 	
    244a:	cf 93       	push	r28
    244c:	df 93       	push	r29

	PCICR = 0;
    244e:	c8 e6       	ldi	r28, 0x68	; 104
    2450:	d0 e0       	ldi	r29, 0x00	; 0
    2452:	18 82       	st	Y, r1
	PCMSK1 = 0;
    2454:	ac e6       	ldi	r26, 0x6C	; 108
    2456:	b0 e0       	ldi	r27, 0x00	; 0
    2458:	1c 92       	st	X, r1
	TCCR2A = 0;
    245a:	e0 eb       	ldi	r30, 0xB0	; 176
    245c:	f0 e0       	ldi	r31, 0x00	; 0
    245e:	10 82       	st	Z, r1
	TCCR2B = 0;
    2460:	10 92 b1 00 	sts	0x00B1, r1
	TIMSK2 = 0;
    2464:	10 92 70 00 	sts	0x0070, r1

	PCICR |= (1 << PCIE1);			// enable interrupt on change of PCINT15:8 pins
    2468:	88 81       	ld	r24, Y
    246a:	82 60       	ori	r24, 0x02	; 2
    246c:	88 83       	st	Y, r24
	PCMSK1 |= (1 << PCINT15);		// enable PCINT15
    246e:	8c 91       	ld	r24, X
    2470:	80 68       	ori	r24, 0x80	; 128
    2472:	8c 93       	st	X, r24
	TCCR2A |= (1 << WGM21); 		// mode 2 => CTC mode
    2474:	80 81       	ld	r24, Z
    2476:	82 60       	ori	r24, 0x02	; 2
    2478:	80 83       	st	Z, r24

}
    247a:	df 91       	pop	r29
    247c:	cf 91       	pop	r28
    247e:	08 95       	ret

00002480 <__vector_10>:

// external interrupt service routine
ISR(PCINT1_vect) {
    2480:	1f 92       	push	r1
    2482:	0f 92       	push	r0
    2484:	0f b6       	in	r0, 0x3f	; 63
    2486:	0f 92       	push	r0
    2488:	11 24       	eor	r1, r1
    248a:	8f 93       	push	r24

	if(irEnabled) {						// if the robot is configured to accept TV remote commands
    248c:	80 91 12 02 	lds	r24, 0x0212
    2490:	88 23       	and	r24, r24
    2492:	21 f1       	breq	.+72     	; 0x24dc <__vector_10+0x5c>

		if(bit_is_clear(PINJ, 6)) {		// the interrupt is generated at every pin state change; we only look
    2494:	80 91 03 01 	lds	r24, 0x0103
    2498:	86 fd       	sbrc	r24, 6
    249a:	20 c0       	rjmp	.+64     	; 0x24dc <__vector_10+0x5c>
										// for the falling edge
			PCICR &= ~(1 << PCIE1);		// disable external interrupt
    249c:	80 91 68 00 	lds	r24, 0x0068
    24a0:	8d 7f       	andi	r24, 0xFD	; 253
    24a2:	80 93 68 00 	sts	0x0068, r24
			PCMSK1 &= ~(1 << PCINT15);
    24a6:	80 91 6c 00 	lds	r24, 0x006C
    24aa:	8f 77       	andi	r24, 0x7F	; 127
    24ac:	80 93 6c 00 	sts	0x006C, r24
		
			// check the pin change isn't due to a glitch; to check this verify that
			// the pin remain low for at least 400 us (the giltches last about 200 us)
			// 0.4 / 0.032 = 13 => 0.416 us
			checkGlitch = 1;							// we're checking if this is a glitch
    24b0:	81 e0       	ldi	r24, 0x01	; 1
    24b2:	80 93 13 02 	sts	0x0213, r24
			OCR2A = 13;									// output compare register
    24b6:	8d e0       	ldi	r24, 0x0D	; 13
    24b8:	80 93 b3 00 	sts	0x00B3, r24
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    24bc:	80 91 b1 00 	lds	r24, 0x00B1
    24c0:	86 60       	ori	r24, 0x06	; 6
    24c2:	80 93 b1 00 	sts	0x00B1, r24
			TIMSK2 |= (1 << OCIE2A);					// enable output compare interrupt
    24c6:	80 91 70 00 	lds	r24, 0x0070
    24ca:	82 60       	ori	r24, 0x02	; 2
    24cc:	80 93 70 00 	sts	0x0070, r24

			check_temp = address_temp = data_temp = 0;
    24d0:	10 92 20 02 	sts	0x0220, r1
    24d4:	10 92 21 02 	sts	0x0221, r1
    24d8:	10 92 22 02 	sts	0x0222, r1

		}

	}
	
}
    24dc:	8f 91       	pop	r24
    24de:	0f 90       	pop	r0
    24e0:	0f be       	out	0x3f, r0	; 63
    24e2:	0f 90       	pop	r0
    24e4:	1f 90       	pop	r1
    24e6:	18 95       	reti

000024e8 <__vector_13>:

ISR(TIMER2_COMPA_vect) {
    24e8:	1f 92       	push	r1
    24ea:	0f 92       	push	r0
    24ec:	0f b6       	in	r0, 0x3f	; 63
    24ee:	0f 92       	push	r0
    24f0:	11 24       	eor	r1, r1
    24f2:	2f 93       	push	r18
    24f4:	3f 93       	push	r19
    24f6:	4f 93       	push	r20
    24f8:	5f 93       	push	r21
    24fa:	8f 93       	push	r24
    24fc:	9f 93       	push	r25

	static int i = -1;

	//PORTB ^= (1 << 5);	// toggle red led

	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);		// stop timer2
    24fe:	80 91 b1 00 	lds	r24, 0x00B1
    2502:	88 7f       	andi	r24, 0xF8	; 248
    2504:	80 93 b1 00 	sts	0x00B1, r24
	
		if(checkGlitch) {					// if checking this is a glitch
    2508:	80 91 13 02 	lds	r24, 0x0213
    250c:	88 23       	and	r24, r24
    250e:	a9 f0       	breq	.+42     	; 0x253a <__vector_13+0x52>

			if(REMOTE) {					// if high it is a glitch
    2510:	80 91 03 01 	lds	r24, 0x0103
    2514:	86 ff       	sbrs	r24, 6
    2516:	65 c0       	rjmp	.+202    	; 0x25e2 <__vector_13+0xfa>

				PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    2518:	80 91 68 00 	lds	r24, 0x0068
    251c:	82 60       	ori	r24, 0x02	; 2
    251e:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    2522:	80 91 6c 00 	lds	r24, 0x006C
    2526:	80 68       	ori	r24, 0x80	; 128
    2528:	80 93 6c 00 	sts	0x006C, r24
				i = -1;			
    252c:	8f ef       	ldi	r24, 0xFF	; 255
    252e:	9f ef       	ldi	r25, 0xFF	; 255
    2530:	90 93 02 02 	sts	0x0202, r25
    2534:	80 93 01 02 	sts	0x0201, r24
    2538:	49 c0       	rjmp	.+146    	; 0x25cc <__vector_13+0xe4>
			}

		} else {


			if (i == -1) { 						// start bit confirmed
    253a:	80 91 01 02 	lds	r24, 0x0201
    253e:	90 91 02 02 	lds	r25, 0x0202
    2542:	2f ef       	ldi	r18, 0xFF	; 255
    2544:	8f 3f       	cpi	r24, 0xFF	; 255
    2546:	92 07       	cpc	r25, r18
    2548:	09 f4       	brne	.+2      	; 0x254c <__vector_13+0x64>
    254a:	63 c0       	rjmp	.+198    	; 0x2612 <__vector_13+0x12a>
					check_temp = address_temp = data_temp = 0;
					i=0;

				}

			} else if (i == 1)	{ 						// check bit read and change timer period
    254c:	81 30       	cpi	r24, 0x01	; 1
    254e:	91 05       	cpc	r25, r1
    2550:	09 f4       	brne	.+2      	; 0x2554 <__vector_13+0x6c>
    2552:	98 c0       	rjmp	.+304    	; 0x2684 <__vector_13+0x19c>
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
    2554:	9c 01       	movw	r18, r24
    2556:	22 50       	subi	r18, 0x02	; 2
    2558:	30 40       	sbci	r19, 0x00	; 0
    255a:	25 30       	cpi	r18, 0x05	; 5
    255c:	31 05       	cpc	r19, r1
    255e:	08 f4       	brcc	.+2      	; 0x2562 <__vector_13+0x7a>
    2560:	67 c0       	rjmp	.+206    	; 0x2630 <__vector_13+0x148>

				unsigned char temp = REMOTE;
				temp <<= 6-i;
				address_temp += temp;

			} else if ((i > 6) && (i < 13 )) { 			// we read data
    2562:	9c 01       	movw	r18, r24
    2564:	27 50       	subi	r18, 0x07	; 7
    2566:	30 40       	sbci	r19, 0x00	; 0
    2568:	26 30       	cpi	r18, 0x06	; 6
    256a:	31 05       	cpc	r19, r1
    256c:	08 f0       	brcs	.+2      	; 0x2570 <__vector_13+0x88>
    256e:	bd c0       	rjmp	.+378    	; 0x26ea <__vector_13+0x202>

				OCR2A = 54;
    2570:	26 e3       	ldi	r18, 0x36	; 54
    2572:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    2576:	20 91 b1 00 	lds	r18, 0x00B1
    257a:	26 60       	ori	r18, 0x06	; 6
    257c:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    2580:	20 91 70 00 	lds	r18, 0x0070
    2584:	22 60       	ori	r18, 0x02	; 2
    2586:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    258a:	20 91 03 01 	lds	r18, 0x0103
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	20 74       	andi	r18, 0x40	; 64
    2592:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6+6-i;
    2594:	00 24       	eor	r0, r0
    2596:	22 0f       	add	r18, r18
    2598:	33 1f       	adc	r19, r19
    259a:	00 1c       	adc	r0, r0
    259c:	22 0f       	add	r18, r18
    259e:	33 1f       	adc	r19, r19
    25a0:	00 1c       	adc	r0, r0
    25a2:	23 2f       	mov	r18, r19
    25a4:	30 2d       	mov	r19, r0
    25a6:	4c e0       	ldi	r20, 0x0C	; 12
    25a8:	50 e0       	ldi	r21, 0x00	; 0
    25aa:	48 1b       	sub	r20, r24
    25ac:	59 0b       	sbc	r21, r25
    25ae:	02 c0       	rjmp	.+4      	; 0x25b4 <__vector_13+0xcc>
    25b0:	22 0f       	add	r18, r18
    25b2:	33 1f       	adc	r19, r19
    25b4:	4a 95       	dec	r20
    25b6:	e2 f7       	brpl	.-8      	; 0x25b0 <__vector_13+0xc8>
				data_temp += temp;
    25b8:	40 91 20 02 	lds	r20, 0x0220
    25bc:	42 0f       	add	r20, r18
    25be:	40 93 20 02 	sts	0x0220, r20

				i = -1;
				check = check_temp;
				address = address_temp;
				data_ir = data_temp;
				command_received=1;
    25c2:	01 96       	adiw	r24, 0x01	; 1

		}
	
		if(i!=-1) {

			i++;
    25c4:	90 93 02 02 	sts	0x0202, r25
    25c8:	80 93 01 02 	sts	0x0201, r24

		}

}
    25cc:	9f 91       	pop	r25
    25ce:	8f 91       	pop	r24
    25d0:	5f 91       	pop	r21
    25d2:	4f 91       	pop	r20
    25d4:	3f 91       	pop	r19
    25d6:	2f 91       	pop	r18
    25d8:	0f 90       	pop	r0
    25da:	0f be       	out	0x3f, r0	; 63
    25dc:	0f 90       	pop	r0
    25de:	1f 90       	pop	r1
    25e0:	18 95       	reti
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
				i = -1;			

			} else {						// not a glitch => real command received

				checkGlitch = 0;
    25e2:	10 92 13 02 	sts	0x0213, r1

				// activate the IR Receiver with a 2.1 ms cycle value
				// we set the resolution of the timer to be 0.032 ms (prescaler 1/256) so:
				// 2.1 / 0.032 = 64 to be set in the output compare register (=> 2.048 ms)
				// but we already wait 0.416 us => 13, so 64-13=51
				OCR2A = 51;								// output compare register
    25e6:	83 e3       	ldi	r24, 0x33	; 51
    25e8:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    25ec:	80 91 b1 00 	lds	r24, 0x00B1
    25f0:	86 60       	ori	r24, 0x06	; 6
    25f2:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    25f6:	80 91 70 00 	lds	r24, 0x0070
    25fa:	82 60       	ori	r24, 0x02	; 2
    25fc:	80 93 70 00 	sts	0x0070, r24
    2600:	80 91 01 02 	lds	r24, 0x0201
    2604:	90 91 02 02 	lds	r25, 0x0202

			} 

		}
	
		if(i!=-1) {
    2608:	2f ef       	ldi	r18, 0xFF	; 255
    260a:	8f 3f       	cpi	r24, 0xFF	; 255
    260c:	92 07       	cpc	r25, r18
    260e:	c9 f6       	brne	.-78     	; 0x25c2 <__vector_13+0xda>
    2610:	dd cf       	rjmp	.-70     	; 0x25cc <__vector_13+0xe4>
		} else {


			if (i == -1) { 						// start bit confirmed

				if(REMOTE) {					// double check => if high it is only a noise
    2612:	20 91 03 01 	lds	r18, 0x0103
    2616:	26 ff       	sbrs	r18, 6
    2618:	52 c0       	rjmp	.+164    	; 0x26be <__vector_13+0x1d6>

					PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    261a:	20 91 68 00 	lds	r18, 0x0068
    261e:	22 60       	ori	r18, 0x02	; 2
    2620:	20 93 68 00 	sts	0x0068, r18
					PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    2624:	20 91 6c 00 	lds	r18, 0x006C
    2628:	20 68       	ori	r18, 0x80	; 128
    262a:	20 93 6c 00 	sts	0x006C, r18
    262e:	ce cf       	rjmp	.-100    	; 0x25cc <__vector_13+0xe4>
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
		
				OCR2A = 54;
    2630:	26 e3       	ldi	r18, 0x36	; 54
    2632:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    2636:	20 91 b1 00 	lds	r18, 0x00B1
    263a:	26 60       	ori	r18, 0x06	; 6
    263c:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    2640:	20 91 70 00 	lds	r18, 0x0070
    2644:	22 60       	ori	r18, 0x02	; 2
    2646:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    264a:	20 91 03 01 	lds	r18, 0x0103
    264e:	30 e0       	ldi	r19, 0x00	; 0
    2650:	20 74       	andi	r18, 0x40	; 64
    2652:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6-i;
    2654:	00 24       	eor	r0, r0
    2656:	22 0f       	add	r18, r18
    2658:	33 1f       	adc	r19, r19
    265a:	00 1c       	adc	r0, r0
    265c:	22 0f       	add	r18, r18
    265e:	33 1f       	adc	r19, r19
    2660:	00 1c       	adc	r0, r0
    2662:	23 2f       	mov	r18, r19
    2664:	30 2d       	mov	r19, r0
    2666:	46 e0       	ldi	r20, 0x06	; 6
    2668:	50 e0       	ldi	r21, 0x00	; 0
    266a:	48 1b       	sub	r20, r24
    266c:	59 0b       	sbc	r21, r25
    266e:	02 c0       	rjmp	.+4      	; 0x2674 <__vector_13+0x18c>
    2670:	22 0f       	add	r18, r18
    2672:	33 1f       	adc	r19, r19
    2674:	4a 95       	dec	r20
    2676:	e2 f7       	brpl	.-8      	; 0x2670 <__vector_13+0x188>
				address_temp += temp;
    2678:	40 91 21 02 	lds	r20, 0x0221
    267c:	42 0f       	add	r20, r18
    267e:	40 93 21 02 	sts	0x0221, r20
    2682:	9f cf       	rjmp	.-194    	; 0x25c2 <__vector_13+0xda>

				}

			} else if (i == 1)	{ 						// check bit read and change timer period

				check_temp = REMOTE;	   				// read the check bit
    2684:	20 91 03 01 	lds	r18, 0x0103
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	20 74       	andi	r18, 0x40	; 64
    268c:	30 70       	andi	r19, 0x00	; 0
    268e:	02 2e       	mov	r0, r18
    2690:	23 2f       	mov	r18, r19
    2692:	00 0c       	add	r0, r0
    2694:	22 1f       	adc	r18, r18
    2696:	33 0b       	sbc	r19, r19
    2698:	00 0c       	add	r0, r0
    269a:	22 1f       	adc	r18, r18
    269c:	33 1f       	adc	r19, r19
    269e:	20 93 22 02 	sts	0x0222, r18
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
    26a2:	26 e3       	ldi	r18, 0x36	; 54
    26a4:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    26a8:	20 91 b1 00 	lds	r18, 0x00B1
    26ac:	26 60       	ori	r18, 0x06	; 6
    26ae:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    26b2:	20 91 70 00 	lds	r18, 0x0070
    26b6:	22 60       	ori	r18, 0x02	; 2
    26b8:	20 93 70 00 	sts	0x0070, r18
    26bc:	82 cf       	rjmp	.-252    	; 0x25c2 <__vector_13+0xda>

				} else {	// read the check bit
			
					//cycle value is 0.9 ms to go to check bit so:
					// 0.9 / 0.032 = 28 => 0.896
					OCR2A = 28;								// output compare register
    26be:	8c e1       	ldi	r24, 0x1C	; 28
    26c0:	80 93 b3 00 	sts	0x00B3, r24
					TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    26c4:	80 91 b1 00 	lds	r24, 0x00B1
    26c8:	86 60       	ori	r24, 0x06	; 6
    26ca:	80 93 b1 00 	sts	0x00B1, r24
					TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt					
    26ce:	80 91 70 00 	lds	r24, 0x0070
    26d2:	82 60       	ori	r24, 0x02	; 2
    26d4:	80 93 70 00 	sts	0x0070, r24

					check_temp = address_temp = data_temp = 0;
    26d8:	10 92 20 02 	sts	0x0220, r1
    26dc:	10 92 21 02 	sts	0x0221, r1
    26e0:	10 92 22 02 	sts	0x0222, r1
    26e4:	81 e0       	ldi	r24, 0x01	; 1
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	6d cf       	rjmp	.-294    	; 0x25c4 <__vector_13+0xdc>

				unsigned char temp = REMOTE;
				temp <<= 6+6-i;
				data_temp += temp;

			} else if (i == 13) { 						// last bit read
    26ea:	8d 30       	cpi	r24, 0x0D	; 13
    26ec:	91 05       	cpc	r25, r1
    26ee:	09 f0       	breq	.+2      	; 0x26f2 <__vector_13+0x20a>
    26f0:	68 cf       	rjmp	.-304    	; 0x25c2 <__vector_13+0xda>
				
				TIMSK2 = 0;								// disable all interrupt for timer2
    26f2:	10 92 70 00 	sts	0x0070, r1
				PCICR |= (1 << PCIE1);					// enable external interrupt to receive next command
    26f6:	80 91 68 00 	lds	r24, 0x0068
    26fa:	82 60       	ori	r24, 0x02	; 2
    26fc:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);				// clear interrupt flag
    2700:	80 91 6c 00 	lds	r24, 0x006C
    2704:	80 68       	ori	r24, 0x80	; 128
    2706:	80 93 6c 00 	sts	0x006C, r24

				i = -1;
    270a:	8f ef       	ldi	r24, 0xFF	; 255
    270c:	9f ef       	ldi	r25, 0xFF	; 255
    270e:	90 93 02 02 	sts	0x0202, r25
    2712:	80 93 01 02 	sts	0x0201, r24
				check = check_temp;
    2716:	80 91 22 02 	lds	r24, 0x0222
    271a:	80 93 00 02 	sts	0x0200, r24
				address = address_temp;
    271e:	80 91 21 02 	lds	r24, 0x0221
    2722:	80 93 1e 02 	sts	0x021E, r24
				data_ir = data_temp;
    2726:	80 91 20 02 	lds	r24, 0x0220
    272a:	80 93 1f 02 	sts	0x021F, r24
				command_received=1;
    272e:	81 e0       	ldi	r24, 0x01	; 1
    2730:	80 93 26 04 	sts	0x0426, r24
    2734:	4b cf       	rjmp	.-362    	; 0x25cc <__vector_13+0xe4>

00002736 <ir_remote_get_check>:

}

unsigned char ir_remote_get_check(void) {
	return check;
}
    2736:	80 91 00 02 	lds	r24, 0x0200
    273a:	08 95       	ret

0000273c <ir_remote_get_address>:

unsigned char ir_remote_get_address(void) {
	return address;
}
    273c:	80 91 1e 02 	lds	r24, 0x021E
    2740:	08 95       	ret

00002742 <ir_remote_get_data>:

unsigned char ir_remote_get_data(void) {
	return data_ir;
}
    2742:	80 91 1f 02 	lds	r24, 0x021F
    2746:	08 95       	ret

00002748 <handleIRRemoteCommands>:

void handleIRRemoteCommands() {

	if(irEnabled) {
    2748:	80 91 12 02 	lds	r24, 0x0212
    274c:	88 23       	and	r24, r24
    274e:	51 f1       	breq	.+84     	; 0x27a4 <handleIRRemoteCommands+0x5c>

		if(command_received) {
    2750:	80 91 26 04 	lds	r24, 0x0426
    2754:	88 23       	and	r24, r24
    2756:	31 f1       	breq	.+76     	; 0x27a4 <handleIRRemoteCommands+0x5c>
unsigned char ir_remote_get_address(void) {
	return address;
}

unsigned char ir_remote_get_data(void) {
	return data_ir;
    2758:	e0 91 1f 02 	lds	r30, 0x021F

	if(irEnabled) {

		if(command_received) {

            irCommand = ir_remote_get_data();
    275c:	e0 93 25 04 	sts	0x0425, r30

		    //usartTransmit(irCommand);

			command_received = 0;
    2760:	10 92 26 04 	sts	0x0426, r1

			switch(irCommand) {
    2764:	f0 e0       	ldi	r31, 0x00	; 0
    2766:	e5 33       	cpi	r30, 0x35	; 53
    2768:	f1 05       	cpc	r31, r1
    276a:	e8 f0       	brcs	.+58     	; 0x27a6 <handleIRRemoteCommands+0x5e>
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 1;
							break;
						case 3:
							obstacleAvoidanceEnabled = 1;
							cliffAvoidanceEnabled = 1;
    276c:	20 91 f9 02 	lds	r18, 0x02F9
    2770:	30 91 fa 02 	lds	r19, 0x02FA
    2774:	80 91 fb 02 	lds	r24, 0x02FB
    2778:	90 91 fc 02 	lds	r25, 0x02FC
	               	break;

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
    277c:	37 fd       	sbrc	r19, 7
    277e:	b9 c1       	rjmp	.+882    	; 0x2af2 <handleIRRemoteCommands+0x3aa>
				speedr = pwm_right_desired;
			} else {
				speedr = (-pwm_right_desired);
    2780:	30 93 14 03 	sts	0x0314, r19
    2784:	20 93 13 03 	sts	0x0313, r18
			}
			if(pwm_left_desired >= 0) {
    2788:	97 fd       	sbrc	r25, 7
    278a:	05 c0       	rjmp	.+10     	; 0x2796 <handleIRRemoteCommands+0x4e>
				speedl = pwm_left_desired;
    278c:	90 93 12 03 	sts	0x0312, r25
    2790:	80 93 11 03 	sts	0x0311, r24
    2794:	08 95       	ret
			} else {
				speedl = (-pwm_left_desired);
    2796:	90 95       	com	r25
    2798:	81 95       	neg	r24
    279a:	9f 4f       	sbci	r25, 0xFF	; 255
    279c:	90 93 12 03 	sts	0x0312, r25
    27a0:	80 93 11 03 	sts	0x0311, r24
    27a4:	08 95       	ret

		    //usartTransmit(irCommand);

			command_received = 0;

			switch(irCommand) {
    27a6:	ee 58       	subi	r30, 0x8E	; 142
    27a8:	ff 4f       	sbci	r31, 0xFF	; 255
    27aa:	ee 0f       	add	r30, r30
    27ac:	ff 1f       	adc	r31, r31
    27ae:	05 90       	lpm	r0, Z+
    27b0:	f4 91       	lpm	r31, Z+
    27b2:	e0 2d       	mov	r30, r0
    27b4:	19 94       	eijmp
						case 0:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 0;
							break;
						case 1:
							obstacleAvoidanceEnabled = 1;
    27b6:	80 93 6a 04 	sts	0x046A, r24
							cliffAvoidanceEnabled = 0;
    27ba:	10 92 6b 04 	sts	0x046B, r1
    27be:	20 91 f9 02 	lds	r18, 0x02F9
    27c2:	30 91 fa 02 	lds	r19, 0x02FA
    27c6:	80 91 fb 02 	lds	r24, 0x02FB
    27ca:	90 91 fc 02 	lds	r25, 0x02FC
							break;
    27ce:	d6 cf       	rjmp	.-84     	; 0x277c <handleIRRemoteCommands+0x34>
						case 2:
							obstacleAvoidanceEnabled = 0;
    27d0:	10 92 6a 04 	sts	0x046A, r1
							cliffAvoidanceEnabled = 1;
    27d4:	81 e0       	ldi	r24, 0x01	; 1
    27d6:	80 93 6b 04 	sts	0x046B, r24
    27da:	20 91 f9 02 	lds	r18, 0x02F9
    27de:	30 91 fa 02 	lds	r19, 0x02FA
    27e2:	80 91 fb 02 	lds	r24, 0x02FB
    27e6:	90 91 fc 02 	lds	r25, 0x02FC
							break;
    27ea:	c8 cf       	rjmp	.-112    	; 0x277c <handleIRRemoteCommands+0x34>
				case 33:	// program -
					cliffAvoidanceEnabled = 0;
					break;

				case 52:	// av/tv button
					behaviorState = (behaviorState+1)%4;
    27ec:	80 91 28 04 	lds	r24, 0x0428
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	01 96       	adiw	r24, 0x01	; 1
    27f4:	83 70       	andi	r24, 0x03	; 3
    27f6:	90 70       	andi	r25, 0x00	; 0
    27f8:	80 93 28 04 	sts	0x0428, r24
					switch(behaviorState) {
    27fc:	82 30       	cpi	r24, 0x02	; 2
    27fe:	41 f3       	breq	.-48     	; 0x27d0 <handleIRRemoteCommands+0x88>
    2800:	83 30       	cpi	r24, 0x03	; 3
    2802:	09 f4       	brne	.+2      	; 0x2806 <handleIRRemoteCommands+0xbe>
    2804:	8a c1       	rjmp	.+788    	; 0x2b1a <handleIRRemoteCommands+0x3d2>
    2806:	81 30       	cpi	r24, 0x01	; 1
    2808:	b1 f2       	breq	.-84     	; 0x27b6 <handleIRRemoteCommands+0x6e>
						case 0:
							obstacleAvoidanceEnabled = 0;
    280a:	10 92 6a 04 	sts	0x046A, r1
							cliffAvoidanceEnabled = 0;
    280e:	10 92 6b 04 	sts	0x046B, r1
    2812:	20 91 f9 02 	lds	r18, 0x02F9
    2816:	30 91 fa 02 	lds	r19, 0x02FA
    281a:	80 91 fb 02 	lds	r24, 0x02FB
    281e:	90 91 fc 02 	lds	r25, 0x02FC
							break;
    2822:	ac cf       	rjmp	.-168    	; 0x277c <handleIRRemoteCommands+0x34>
				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
					break;

				case 17:	// volume -
					obstacleAvoidanceEnabled = 0;
    2824:	10 92 6a 04 	sts	0x046A, r1
    2828:	20 91 f9 02 	lds	r18, 0x02F9
    282c:	30 91 fa 02 	lds	r19, 0x02FA
    2830:	80 91 fb 02 	lds	r24, 0x02FB
    2834:	90 91 fc 02 	lds	r25, 0x02FC
					break;
    2838:	a1 cf       	rjmp	.-190    	; 0x277c <handleIRRemoteCommands+0x34>
					pwm_right_desired += STEP_MOTORS;
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
					break;

				case 9:	// left motor backward
					pwm_left_desired -= STEP_MOTORS;
    283a:	80 91 fb 02 	lds	r24, 0x02FB
    283e:	90 91 fc 02 	lds	r25, 0x02FC
    2842:	02 97       	sbiw	r24, 0x02	; 2
    2844:	90 93 fc 02 	sts	0x02FC, r25
    2848:	80 93 fb 02 	sts	0x02FB, r24
	           	    if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    284c:	2e ef       	ldi	r18, 0xFE	; 254
    284e:	80 30       	cpi	r24, 0x00	; 0
    2850:	92 07       	cpc	r25, r18
    2852:	9c f5       	brge	.+102    	; 0x28ba <handleIRRemoteCommands+0x172>
    2854:	80 e0       	ldi	r24, 0x00	; 0
    2856:	9e ef       	ldi	r25, 0xFE	; 254
    2858:	90 93 fc 02 	sts	0x02FC, r25
    285c:	80 93 fb 02 	sts	0x02FB, r24
    2860:	20 91 f9 02 	lds	r18, 0x02F9
    2864:	30 91 fa 02 	lds	r19, 0x02FA
    2868:	89 cf       	rjmp	.-238    	; 0x277c <handleIRRemoteCommands+0x34>
    	            if (pwm_left_desired > (MAX_MOTORS_PWM/2)) pwm_left_desired = (MAX_MOTORS_PWM/2);
               		break;

				case 8:	// both motors backward
				case 30:
					if(pwm_right_desired < pwm_left) {
    286a:	20 91 f9 02 	lds	r18, 0x02F9
    286e:	30 91 fa 02 	lds	r19, 0x02FA
    2872:	80 91 f7 02 	lds	r24, 0x02F7
    2876:	90 91 f8 02 	lds	r25, 0x02F8
    287a:	28 17       	cp	r18, r24
    287c:	39 07       	cpc	r19, r25
    287e:	24 f0       	brlt	.+8      	; 0x2888 <handleIRRemoteCommands+0x140>
						pwm_left_desired  = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
    2880:	20 91 fb 02 	lds	r18, 0x02FB
    2884:	30 91 fc 02 	lds	r19, 0x02FC
					}
					pwm_right_desired -= STEP_MOTORS;
    2888:	22 50       	subi	r18, 0x02	; 2
    288a:	30 40       	sbci	r19, 0x00	; 0
    288c:	30 93 fa 02 	sts	0x02FA, r19
    2890:	20 93 f9 02 	sts	0x02F9, r18
					pwm_left_desired -= STEP_MOTORS;
    2894:	c9 01       	movw	r24, r18
    2896:	30 93 fc 02 	sts	0x02FC, r19
    289a:	20 93 fb 02 	sts	0x02FB, r18
	                if (pwm_right_desired < -(MAX_MOTORS_PWM/2)) pwm_right_desired = -(MAX_MOTORS_PWM/2);
    289e:	4e ef       	ldi	r20, 0xFE	; 254
    28a0:	20 30       	cpi	r18, 0x00	; 0
    28a2:	34 07       	cpc	r19, r20
    28a4:	34 f4       	brge	.+12     	; 0x28b2 <handleIRRemoteCommands+0x16a>
    28a6:	40 e0       	ldi	r20, 0x00	; 0
    28a8:	5e ef       	ldi	r21, 0xFE	; 254
    28aa:	50 93 fa 02 	sts	0x02FA, r21
    28ae:	40 93 f9 02 	sts	0x02F9, r20
    	            if (pwm_left_desired < -(MAX_MOTORS_PWM/2)) pwm_left_desired = -(MAX_MOTORS_PWM/2);
    28b2:	4e ef       	ldi	r20, 0xFE	; 254
    28b4:	20 30       	cpi	r18, 0x00	; 0
    28b6:	34 07       	cpc	r19, r20
    28b8:	6c f2       	brlt	.-102    	; 0x2854 <handleIRRemoteCommands+0x10c>
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    28ba:	20 91 f9 02 	lds	r18, 0x02F9
    28be:	30 91 fa 02 	lds	r19, 0x02FA
    28c2:	5c cf       	rjmp	.-328    	; 0x277c <handleIRRemoteCommands+0x34>
					updateBlueLed(pwm_blue);

	               	break;

				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
    28c4:	81 e0       	ldi	r24, 0x01	; 1
    28c6:	80 93 6a 04 	sts	0x046A, r24
    28ca:	20 91 f9 02 	lds	r18, 0x02F9
    28ce:	30 91 fa 02 	lds	r19, 0x02FA
    28d2:	80 91 fb 02 	lds	r24, 0x02FB
    28d6:	90 91 fc 02 	lds	r25, 0x02FC
					break;
    28da:	50 cf       	rjmp	.-352    	; 0x277c <handleIRRemoteCommands+0x34>
					pwm_left_desired -= STEP_MOTORS;
	           	    if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 7:	// right motor backward
					pwm_right_desired -= STEP_MOTORS;
    28dc:	20 91 f9 02 	lds	r18, 0x02F9
    28e0:	30 91 fa 02 	lds	r19, 0x02FA
    28e4:	22 50       	subi	r18, 0x02	; 2
    28e6:	30 40       	sbci	r19, 0x00	; 0
    28e8:	30 93 fa 02 	sts	0x02FA, r19
    28ec:	20 93 f9 02 	sts	0x02F9, r18
	               	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    28f0:	4e ef       	ldi	r20, 0xFE	; 254
    28f2:	20 30       	cpi	r18, 0x00	; 0
    28f4:	34 07       	cpc	r19, r20
    28f6:	0c f0       	brlt	.+2      	; 0x28fa <handleIRRemoteCommands+0x1b2>
    28f8:	3d cf       	rjmp	.-390    	; 0x2774 <handleIRRemoteCommands+0x2c>
    28fa:	80 e0       	ldi	r24, 0x00	; 0
    28fc:	9e ef       	ldi	r25, 0xFE	; 254
    28fe:	90 93 fa 02 	sts	0x02FA, r25
    2902:	80 93 f9 02 	sts	0x02F9, r24
    2906:	80 91 fb 02 	lds	r24, 0x02FB
    290a:	90 91 fc 02 	lds	r25, 0x02FC
    290e:	20 e0       	ldi	r18, 0x00	; 0
    2910:	32 e0       	ldi	r19, 0x02	; 2
    2912:	36 cf       	rjmp	.-404    	; 0x2780 <handleIRRemoteCommands+0x38>
    	            if (pwm_left_desired < -(MAX_MOTORS_PWM/2)) pwm_left_desired = -(MAX_MOTORS_PWM/2);
                  	break;

				case 6:	// both motors right
				case 47:
					pwm_right_desired -= STEP_MOTORS;
    2914:	20 91 f9 02 	lds	r18, 0x02F9
    2918:	30 91 fa 02 	lds	r19, 0x02FA
    291c:	22 50       	subi	r18, 0x02	; 2
    291e:	30 40       	sbci	r19, 0x00	; 0
    2920:	30 93 fa 02 	sts	0x02FA, r19
    2924:	20 93 f9 02 	sts	0x02F9, r18
					pwm_left_desired += STEP_MOTORS;
    2928:	80 91 fb 02 	lds	r24, 0x02FB
    292c:	90 91 fc 02 	lds	r25, 0x02FC
    2930:	02 96       	adiw	r24, 0x02	; 2
    2932:	90 93 fc 02 	sts	0x02FC, r25
    2936:	80 93 fb 02 	sts	0x02FB, r24
                	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    293a:	4e ef       	ldi	r20, 0xFE	; 254
    293c:	20 30       	cpi	r18, 0x00	; 0
    293e:	34 07       	cpc	r19, r20
    2940:	34 f4       	brge	.+12     	; 0x294e <handleIRRemoteCommands+0x206>
    2942:	20 e0       	ldi	r18, 0x00	; 0
    2944:	3e ef       	ldi	r19, 0xFE	; 254
    2946:	30 93 fa 02 	sts	0x02FA, r19
    294a:	20 93 f9 02 	sts	0x02F9, r18
                	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    294e:	42 e0       	ldi	r20, 0x02	; 2
    2950:	81 30       	cpi	r24, 0x01	; 1
    2952:	94 07       	cpc	r25, r20
    2954:	0c f4       	brge	.+2      	; 0x2958 <handleIRRemoteCommands+0x210>
    2956:	12 cf       	rjmp	.-476    	; 0x277c <handleIRRemoteCommands+0x34>
    2958:	80 e0       	ldi	r24, 0x00	; 0
    295a:	92 e0       	ldi	r25, 0x02	; 2
    295c:	90 93 fc 02 	sts	0x02FC, r25
    2960:	80 93 fb 02 	sts	0x02FB, r24
    2964:	0b cf       	rjmp	.-490    	; 0x277c <handleIRRemoteCommands+0x34>
			switch(irCommand) {
				// sometimes there are two cases for the same command because two different
				// remote controls are used; one of this do not contain "numbers"
				case 5:	// stop motors
				case 51:
					pwm_right_desired = 0;
    2966:	10 92 fa 02 	sts	0x02FA, r1
    296a:	10 92 f9 02 	sts	0x02F9, r1
					pwm_left_desired = 0;
    296e:	10 92 fc 02 	sts	0x02FC, r1
    2972:	10 92 fb 02 	sts	0x02FB, r1
					if(currentSelector == 8) {
    2976:	80 91 4a 04 	lds	r24, 0x044A
    297a:	88 30       	cpi	r24, 0x08	; 8
    297c:	09 f4       	brne	.+2      	; 0x2980 <handleIRRemoteCommands+0x238>
    297e:	db c0       	rjmp	.+438    	; 0x2b36 <handleIRRemoteCommands+0x3ee>
    2980:	80 e0       	ldi	r24, 0x00	; 0
    2982:	90 e0       	ldi	r25, 0x00	; 0
    2984:	20 e0       	ldi	r18, 0x00	; 0
    2986:	30 e0       	ldi	r19, 0x00	; 0
    2988:	fb ce       	rjmp	.-522    	; 0x2780 <handleIRRemoteCommands+0x38>
                	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
					break;

				case 4:	// both motors left
				case 46:
					pwm_right_desired += STEP_MOTORS;
    298a:	20 91 f9 02 	lds	r18, 0x02F9
    298e:	30 91 fa 02 	lds	r19, 0x02FA
    2992:	2e 5f       	subi	r18, 0xFE	; 254
    2994:	3f 4f       	sbci	r19, 0xFF	; 255
    2996:	30 93 fa 02 	sts	0x02FA, r19
    299a:	20 93 f9 02 	sts	0x02F9, r18
					pwm_left_desired -= STEP_MOTORS;
    299e:	80 91 fb 02 	lds	r24, 0x02FB
    29a2:	90 91 fc 02 	lds	r25, 0x02FC
    29a6:	02 97       	sbiw	r24, 0x02	; 2
    29a8:	90 93 fc 02 	sts	0x02FC, r25
    29ac:	80 93 fb 02 	sts	0x02FB, r24
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    29b0:	42 e0       	ldi	r20, 0x02	; 2
    29b2:	21 30       	cpi	r18, 0x01	; 1
    29b4:	34 07       	cpc	r19, r20
    29b6:	34 f0       	brlt	.+12     	; 0x29c4 <handleIRRemoteCommands+0x27c>
    29b8:	20 e0       	ldi	r18, 0x00	; 0
    29ba:	32 e0       	ldi	r19, 0x02	; 2
    29bc:	30 93 fa 02 	sts	0x02FA, r19
    29c0:	20 93 f9 02 	sts	0x02F9, r18
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    29c4:	4e ef       	ldi	r20, 0xFE	; 254
    29c6:	80 30       	cpi	r24, 0x00	; 0
    29c8:	94 07       	cpc	r25, r20
    29ca:	0c f0       	brlt	.+2      	; 0x29ce <handleIRRemoteCommands+0x286>
    29cc:	d7 ce       	rjmp	.-594    	; 0x277c <handleIRRemoteCommands+0x34>
    29ce:	80 e0       	ldi	r24, 0x00	; 0
    29d0:	9e ef       	ldi	r25, 0xFE	; 254
    29d2:	90 93 fc 02 	sts	0x02FC, r25
    29d6:	80 93 fb 02 	sts	0x02FB, r24
    29da:	d0 ce       	rjmp	.-608    	; 0x277c <handleIRRemoteCommands+0x34>
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
    29dc:	80 91 fb 02 	lds	r24, 0x02FB
    29e0:	90 91 fc 02 	lds	r25, 0x02FC
    29e4:	02 96       	adiw	r24, 0x02	; 2
    29e6:	90 93 fc 02 	sts	0x02FC, r25
    29ea:	80 93 fb 02 	sts	0x02FB, r24
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    29ee:	22 e0       	ldi	r18, 0x02	; 2
    29f0:	81 30       	cpi	r24, 0x01	; 1
    29f2:	92 07       	cpc	r25, r18
    29f4:	0c f4       	brge	.+2      	; 0x29f8 <handleIRRemoteCommands+0x2b0>
    29f6:	61 cf       	rjmp	.-318    	; 0x28ba <handleIRRemoteCommands+0x172>
    29f8:	80 e0       	ldi	r24, 0x00	; 0
    29fa:	92 e0       	ldi	r25, 0x02	; 2
    29fc:	90 93 fc 02 	sts	0x02FC, r25
    2a00:	80 93 fb 02 	sts	0x02FB, r24
    2a04:	5a cf       	rjmp	.-332    	; 0x28ba <handleIRRemoteCommands+0x172>
					}
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    2a06:	20 91 f9 02 	lds	r18, 0x02F9
    2a0a:	30 91 fa 02 	lds	r19, 0x02FA
    2a0e:	80 91 fb 02 	lds	r24, 0x02FB
    2a12:	90 91 fc 02 	lds	r25, 0x02FC
    2a16:	82 17       	cp	r24, r18
    2a18:	93 07       	cpc	r25, r19
    2a1a:	0c f4       	brge	.+2      	; 0x2a1e <handleIRRemoteCommands+0x2d6>
    2a1c:	6e c0       	rjmp	.+220    	; 0x2afa <handleIRRemoteCommands+0x3b2>
    2a1e:	9c 01       	movw	r18, r24
						pwm_left_desired = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
					}
					pwm_right_desired += STEP_MOTORS;
    2a20:	2e 5f       	subi	r18, 0xFE	; 254
    2a22:	3f 4f       	sbci	r19, 0xFF	; 255
    2a24:	30 93 fa 02 	sts	0x02FA, r19
    2a28:	20 93 f9 02 	sts	0x02F9, r18
					pwm_left_desired += STEP_MOTORS;
    2a2c:	02 96       	adiw	r24, 0x02	; 2
    2a2e:	90 93 fc 02 	sts	0x02FC, r25
    2a32:	80 93 fb 02 	sts	0x02FB, r24
	                if (pwm_right_desired > (MAX_MOTORS_PWM/2)) pwm_right_desired = (MAX_MOTORS_PWM/2);
    2a36:	42 e0       	ldi	r20, 0x02	; 2
    2a38:	21 30       	cpi	r18, 0x01	; 1
    2a3a:	34 07       	cpc	r19, r20
    2a3c:	34 f0       	brlt	.+12     	; 0x2a4a <handleIRRemoteCommands+0x302>
    2a3e:	20 e0       	ldi	r18, 0x00	; 0
    2a40:	32 e0       	ldi	r19, 0x02	; 2
    2a42:	30 93 fa 02 	sts	0x02FA, r19
    2a46:	20 93 f9 02 	sts	0x02F9, r18
    	            if (pwm_left_desired > (MAX_MOTORS_PWM/2)) pwm_left_desired = (MAX_MOTORS_PWM/2);
    2a4a:	22 e0       	ldi	r18, 0x02	; 2
    2a4c:	81 30       	cpi	r24, 0x01	; 1
    2a4e:	92 07       	cpc	r25, r18
    2a50:	0c f4       	brge	.+2      	; 0x2a54 <handleIRRemoteCommands+0x30c>
    2a52:	33 cf       	rjmp	.-410    	; 0x28ba <handleIRRemoteCommands+0x172>
    2a54:	80 e0       	ldi	r24, 0x00	; 0
    2a56:	92 e0       	ldi	r25, 0x02	; 2
    2a58:	90 93 fc 02 	sts	0x02FC, r25
    2a5c:	80 93 fb 02 	sts	0x02FB, r24
    2a60:	20 91 f9 02 	lds	r18, 0x02F9
    2a64:	30 91 fa 02 	lds	r19, 0x02FA
    2a68:	89 ce       	rjmp	.-750    	; 0x277c <handleIRRemoteCommands+0x34>
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
					break;

				case 1:	// right motor forward
					pwm_right_desired += STEP_MOTORS;
    2a6a:	20 91 f9 02 	lds	r18, 0x02F9
    2a6e:	30 91 fa 02 	lds	r19, 0x02FA
    2a72:	2e 5f       	subi	r18, 0xFE	; 254
    2a74:	3f 4f       	sbci	r19, 0xFF	; 255
    2a76:	30 93 fa 02 	sts	0x02FA, r19
    2a7a:	20 93 f9 02 	sts	0x02F9, r18
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    2a7e:	42 e0       	ldi	r20, 0x02	; 2
    2a80:	21 30       	cpi	r18, 0x01	; 1
    2a82:	34 07       	cpc	r19, r20
    2a84:	0c f4       	brge	.+2      	; 0x2a88 <handleIRRemoteCommands+0x340>
    2a86:	76 ce       	rjmp	.-788    	; 0x2774 <handleIRRemoteCommands+0x2c>
    2a88:	80 e0       	ldi	r24, 0x00	; 0
    2a8a:	92 e0       	ldi	r25, 0x02	; 2
    2a8c:	90 93 fa 02 	sts	0x02FA, r25
    2a90:	80 93 f9 02 	sts	0x02F9, r24
    2a94:	80 91 fb 02 	lds	r24, 0x02FB
    2a98:	90 91 fc 02 	lds	r25, 0x02FC
	               	break;

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
    2a9c:	20 e0       	ldi	r18, 0x00	; 0
    2a9e:	32 e0       	ldi	r19, 0x02	; 2
    2aa0:	6f ce       	rjmp	.-802    	; 0x2780 <handleIRRemoteCommands+0x38>
	               	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
					break;

	           	case 0:	// colors
				case 50:
					colorState = (colorState+1)%5;
    2aa2:	80 91 27 04 	lds	r24, 0x0427
    2aa6:	90 e0       	ldi	r25, 0x00	; 0
    2aa8:	01 96       	adiw	r24, 0x01	; 1
    2aaa:	65 e0       	ldi	r22, 0x05	; 5
    2aac:	70 e0       	ldi	r23, 0x00	; 0
    2aae:	0e 94 c1 4b 	call	0x9782	; 0x9782 <__divmodhi4>
    2ab2:	80 93 27 04 	sts	0x0427, r24

					if(colorState==0) {			// turn on blue and off all IRs
    2ab6:	88 23       	and	r24, r24
    2ab8:	11 f5       	brne	.+68     	; 0x2afe <handleIRRemoteCommands+0x3b6>
						LED_IR1_HIGH;
    2aba:	44 9a       	sbi	0x08, 4	; 8
						LED_IR2_HIGH;
    2abc:	45 9a       	sbi	0x08, 5	; 8
						pwm_blue = 0;
    2abe:	10 92 0e 02 	sts	0x020E, r1
						pwm_green = MAX_LEDS_PWM;
    2ac2:	8f ef       	ldi	r24, 0xFF	; 255
    2ac4:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = MAX_LEDS_PWM;
    2ac8:	80 93 0c 02 	sts	0x020C, r24
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					}

					updateRedLed(pwm_red);
    2acc:	0e 94 07 3b 	call	0x760e	; 0x760e <updateRedLed>
					updateGreenLed(pwm_green);
    2ad0:	80 91 0d 02 	lds	r24, 0x020D
    2ad4:	0e 94 1b 3b 	call	0x7636	; 0x7636 <updateGreenLed>
					updateBlueLed(pwm_blue);
    2ad8:	80 91 0e 02 	lds	r24, 0x020E
    2adc:	0e 94 2f 3b 	call	0x765e	; 0x765e <updateBlueLed>
    2ae0:	20 91 f9 02 	lds	r18, 0x02F9
    2ae4:	30 91 fa 02 	lds	r19, 0x02FA
    2ae8:	80 91 fb 02 	lds	r24, 0x02FB
    2aec:	90 91 fc 02 	lds	r25, 0x02FC

	               	break;
    2af0:	45 ce       	rjmp	.-886    	; 0x277c <handleIRRemoteCommands+0x34>

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
				speedr = pwm_right_desired;
    2af2:	30 95       	com	r19
    2af4:	21 95       	neg	r18
    2af6:	3f 4f       	sbci	r19, 0xFF	; 255
    2af8:	43 ce       	rjmp	.-890    	; 0x2780 <handleIRRemoteCommands+0x38>
					}
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    2afa:	c9 01       	movw	r24, r18
    2afc:	91 cf       	rjmp	.-222    	; 0x2a20 <handleIRRemoteCommands+0x2d8>
						LED_IR1_HIGH;
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
    2afe:	81 30       	cpi	r24, 0x01	; 1
    2b00:	91 f0       	breq	.+36     	; 0x2b26 <handleIRRemoteCommands+0x3de>
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = 0;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==2) {	// turn on red and on all IRs
    2b02:	82 30       	cpi	r24, 0x02	; 2
    2b04:	a1 f1       	breq	.+104    	; 0x2b6e <handleIRRemoteCommands+0x426>
						LED_IR1_LOW;
						LED_IR2_LOW;
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = 0;
					} else if(colorState==3) {	// turn on white
    2b06:	83 30       	cpi	r24, 0x03	; 3
    2b08:	e9 f1       	breq	.+122    	; 0x2b84 <handleIRRemoteCommands+0x43c>
						pwm_blue = 0;
						pwm_green = 0;
						pwm_red = 0;
					} else if(colorState==4) {	// turn off all leds
						pwm_blue = MAX_LEDS_PWM;
    2b0a:	8f ef       	ldi	r24, 0xFF	; 255
    2b0c:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = MAX_LEDS_PWM;
    2b10:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = MAX_LEDS_PWM;
    2b14:	80 93 0c 02 	sts	0x020C, r24
    2b18:	d9 cf       	rjmp	.-78     	; 0x2acc <handleIRRemoteCommands+0x384>
						case 2:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 1;
							break;
						case 3:
							obstacleAvoidanceEnabled = 1;
    2b1a:	81 e0       	ldi	r24, 0x01	; 1
    2b1c:	80 93 6a 04 	sts	0x046A, r24
							cliffAvoidanceEnabled = 1;
    2b20:	80 93 6b 04 	sts	0x046B, r24
    2b24:	23 ce       	rjmp	.-954    	; 0x276c <handleIRRemoteCommands+0x24>
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
						pwm_blue = MAX_LEDS_PWM;
    2b26:	8f ef       	ldi	r24, 0xFF	; 255
    2b28:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = 0;
    2b2c:	10 92 0d 02 	sts	0x020D, r1
						pwm_red = MAX_LEDS_PWM;
    2b30:	80 93 0c 02 	sts	0x020C, r24
    2b34:	cb cf       	rjmp	.-106    	; 0x2acc <handleIRRemoteCommands+0x384>
				case 5:	// stop motors
				case 51:
					pwm_right_desired = 0;
					pwm_left_desired = 0;
					if(currentSelector == 8) {
						calibrateSensors();
    2b36:	0e 94 ff 3d 	call	0x7bfe	; 0x7bfe <calibrateSensors>
						proximityResult[8] = 1023;	// because the first time this value could be low after calibration
    2b3a:	8f ef       	ldi	r24, 0xFF	; 255
    2b3c:	93 e0       	ldi	r25, 0x03	; 3
    2b3e:	90 93 6a 02 	sts	0x026A, r25
    2b42:	80 93 69 02 	sts	0x0269, r24
						proximityResult[11] = 1023;	// and in that case a false black line will be detected
    2b46:	90 93 70 02 	sts	0x0270, r25
    2b4a:	80 93 6f 02 	sts	0x026F, r24
						calibState = 0;
    2b4e:	10 92 f2 08 	sts	0x08F2, r1
						calibVelIndex = 1;
    2b52:	81 e0       	ldi	r24, 0x01	; 1
    2b54:	80 93 e6 07 	sts	0x07E6, r24
						calibrateOdomFlag = 1;
    2b58:	80 93 23 05 	sts	0x0523, r24
    2b5c:	20 91 f9 02 	lds	r18, 0x02F9
    2b60:	30 91 fa 02 	lds	r19, 0x02FA
    2b64:	80 91 fb 02 	lds	r24, 0x02FB
    2b68:	90 91 fc 02 	lds	r25, 0x02FC
    2b6c:	07 ce       	rjmp	.-1010   	; 0x277c <handleIRRemoteCommands+0x34>
					} else if(colorState==1) {	// turn on green
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = 0;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==2) {	// turn on red and on all IRs
						LED_IR1_LOW;
    2b6e:	44 98       	cbi	0x08, 4	; 8
						LED_IR2_LOW;
    2b70:	45 98       	cbi	0x08, 5	; 8
						pwm_blue = MAX_LEDS_PWM;
    2b72:	8f ef       	ldi	r24, 0xFF	; 255
    2b74:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = MAX_LEDS_PWM;
    2b78:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = 0;
    2b7c:	10 92 0c 02 	sts	0x020C, r1
    2b80:	80 e0       	ldi	r24, 0x00	; 0
    2b82:	a4 cf       	rjmp	.-184    	; 0x2acc <handleIRRemoteCommands+0x384>
					} else if(colorState==3) {	// turn on white
						pwm_blue = 0;
    2b84:	10 92 0e 02 	sts	0x020E, r1
						pwm_green = 0;
    2b88:	10 92 0d 02 	sts	0x020D, r1
						pwm_red = 0;
    2b8c:	10 92 0c 02 	sts	0x020C, r1
    2b90:	80 e0       	ldi	r24, 0x00	; 0
    2b92:	9c cf       	rjmp	.-200    	; 0x2acc <handleIRRemoteCommands+0x384>

00002b94 <init_speed_control>:
	//d_speed_control = 5;
	//i_speed_control = 10;
	//i_limit_speed_control = 3200;
	//k_ff_speed_control_left = INIT_KFF;
	//k_ff_speed_control_right = INIT_KFF;
}
    2b94:	08 95       	ret

00002b96 <start_vertical_speed_control_left>:

void start_vertical_speed_control_left(signed int *pwm_left) {
    2b96:	cf 92       	push	r12
    2b98:	df 92       	push	r13
    2b9a:	ef 92       	push	r14
    2b9c:	ff 92       	push	r15
    2b9e:	0f 93       	push	r16
    2ba0:	1f 93       	push	r17
    2ba2:	cf 93       	push	r28
    2ba4:	df 93       	push	r29
    2ba6:	fc 01       	movw	r30, r24
	
	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).
	
	if(*pwm_left==0) {
    2ba8:	80 81       	ld	r24, Z
    2baa:	91 81       	ldd	r25, Z+1	; 0x01
    2bac:	00 97       	sbiw	r24, 0x00	; 0
    2bae:	09 f4       	brne	.+2      	; 0x2bb2 <start_vertical_speed_control_left+0x1c>
    2bb0:	f7 c0       	rjmp	.+494    	; 0x2da0 <start_vertical_speed_control_left+0x20a>
		delta_left_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    2bb2:	20 91 3c 04 	lds	r18, 0x043C
    2bb6:	30 91 3d 04 	lds	r19, 0x043D
    2bba:	41 e0       	ldi	r20, 0x01	; 1
    2bbc:	2e 30       	cpi	r18, 0x0E	; 14
    2bbe:	34 07       	cpc	r19, r20
    2bc0:	0c f4       	brge	.+2      	; 0x2bc4 <start_vertical_speed_control_left+0x2e>
    2bc2:	c7 c0       	rjmp	.+398    	; 0x2d52 <start_vertical_speed_control_left+0x1bc>
		if(*pwm_left > 0) {
    2bc4:	18 16       	cp	r1, r24
    2bc6:	19 06       	cpc	r1, r25
    2bc8:	0c f0       	brlt	.+2      	; 0x2bcc <start_vertical_speed_control_left+0x36>
    2bca:	68 c1       	rjmp	.+720    	; 0x2e9c <start_vertical_speed_control_left+0x306>
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
    2bcc:	88 e6       	ldi	r24, 0x68	; 104
    2bce:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    2bd0:	82 1b       	sub	r24, r18
    2bd2:	93 0b       	sbc	r25, r19
    2bd4:	95 95       	asr	r25
    2bd6:	87 95       	ror	r24
    2bd8:	95 95       	asr	r25
    2bda:	87 95       	ror	r24
    2bdc:	29 e1       	ldi	r18, 0x19	; 25
    2bde:	30 e0       	ldi	r19, 0x00	; 0
    2be0:	28 1b       	sub	r18, r24
    2be2:	39 0b       	sbc	r19, r25
    2be4:	30 93 04 02 	sts	0x0204, r19
    2be8:	20 93 03 02 	sts	0x0203, r18
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
		}
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    2bec:	c0 91 24 05 	lds	r28, 0x0524
    2bf0:	d0 91 25 05 	lds	r29, 0x0525
    2bf4:	d0 93 b0 08 	sts	0x08B0, r29
    2bf8:	c0 93 af 08 	sts	0x08AF, r28
	if(*pwm_left >= 0) {
    2bfc:	80 81       	ld	r24, Z
    2bfe:	91 81       	ldd	r25, Z+1	; 0x01
    2c00:	97 fd       	sbrc	r25, 7
    2c02:	2e c1       	rjmp	.+604    	; 0x2e60 <start_vertical_speed_control_left+0x2ca>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    2c04:	20 91 f1 02 	lds	r18, 0x02F1
    2c08:	30 91 f2 02 	lds	r19, 0x02F2
    2c0c:	dc 01       	movw	r26, r24
    2c0e:	a2 1b       	sub	r26, r18
    2c10:	b3 0b       	sbc	r27, r19
    2c12:	b0 93 25 05 	sts	0x0525, r27
    2c16:	a0 93 24 05 	sts	0x0524, r26
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;
    2c1a:	80 91 09 03 	lds	r24, 0x0309
    2c1e:	90 91 0a 03 	lds	r25, 0x030A
    2c22:	8a 0f       	add	r24, r26
    2c24:	9b 1f       	adc	r25, r27
    2c26:	90 93 0a 03 	sts	0x030A, r25
    2c2a:	80 93 09 03 	sts	0x0309, r24

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
    2c2e:	66 e0       	ldi	r22, 0x06	; 6
    2c30:	81 34       	cpi	r24, 0x41	; 65
    2c32:	96 07       	cpc	r25, r22
    2c34:	0c f4       	brge	.+2      	; 0x2c38 <start_vertical_speed_control_left+0xa2>
    2c36:	cb c0       	rjmp	.+406    	; 0x2dce <start_vertical_speed_control_left+0x238>
		delta_left_speed_sum = I_LIMIT_VERTICAL;
    2c38:	80 e4       	ldi	r24, 0x40	; 64
    2c3a:	96 e0       	ldi	r25, 0x06	; 6
    2c3c:	90 93 0a 03 	sts	0x030A, r25
    2c40:	80 93 09 03 	sts	0x0309, r24
    2c44:	10 ec       	ldi	r17, 0xC0	; 192
    2c46:	c1 2e       	mov	r12, r17
    2c48:	12 e1       	ldi	r17, 0x12	; 18
    2c4a:	d1 2e       	mov	r13, r17
    2c4c:	e1 2c       	mov	r14, r1
    2c4e:	f1 2c       	mov	r15, r1
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_left_speed_controller = (signed long int)(k_ff_speed_control_left*(*pwm_left));
    2c50:	00 81       	ld	r16, Z
    2c52:	11 81       	ldd	r17, Z+1	; 0x01
	pwm_left_speed_controller += (signed long int)(P_VERTICAL * delta_left_speed_current);
    2c54:	9d 01       	movw	r18, r26
    2c56:	22 0f       	add	r18, r18
    2c58:	33 1f       	adc	r19, r19
    2c5a:	2a 0f       	add	r18, r26
    2c5c:	3b 1f       	adc	r19, r27
    2c5e:	22 0f       	add	r18, r18
    2c60:	33 1f       	adc	r19, r19
    2c62:	22 0f       	add	r18, r18
    2c64:	33 1f       	adc	r19, r19
    2c66:	22 0f       	add	r18, r18
    2c68:	33 1f       	adc	r19, r19
    2c6a:	2a 0f       	add	r18, r26
    2c6c:	3b 1f       	adc	r19, r27
    2c6e:	44 27       	eor	r20, r20
    2c70:	37 fd       	sbrc	r19, 7
    2c72:	40 95       	com	r20
    2c74:	54 2f       	mov	r21, r20
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_left_speed_controller = (signed long int)(k_ff_speed_control_left*(*pwm_left));
    2c76:	80 91 03 02 	lds	r24, 0x0203
    2c7a:	90 91 04 02 	lds	r25, 0x0204
    2c7e:	08 9f       	mul	r16, r24
    2c80:	b0 01       	movw	r22, r0
    2c82:	09 9f       	mul	r16, r25
    2c84:	70 0d       	add	r23, r0
    2c86:	18 9f       	mul	r17, r24
    2c88:	70 0d       	add	r23, r0
    2c8a:	11 24       	eor	r1, r1
    2c8c:	88 27       	eor	r24, r24
    2c8e:	77 fd       	sbrc	r23, 7
    2c90:	80 95       	com	r24
    2c92:	98 2f       	mov	r25, r24
	pwm_left_speed_controller += (signed long int)(P_VERTICAL * delta_left_speed_current);
    2c94:	26 0f       	add	r18, r22
    2c96:	37 1f       	adc	r19, r23
    2c98:	48 1f       	adc	r20, r24
    2c9a:	59 1f       	adc	r21, r25
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
    2c9c:	ac 1b       	sub	r26, r28
    2c9e:	bd 0b       	sbc	r27, r29
    2ca0:	aa 0f       	add	r26, r26
    2ca2:	bb 1f       	adc	r27, r27
    2ca4:	bd 01       	movw	r22, r26
    2ca6:	cb 01       	movw	r24, r22
    2ca8:	aa 27       	eor	r26, r26
    2caa:	97 fd       	sbrc	r25, 7
    2cac:	a0 95       	com	r26
    2cae:	ba 2f       	mov	r27, r26
    2cb0:	28 0f       	add	r18, r24
    2cb2:	39 1f       	adc	r19, r25
    2cb4:	4a 1f       	adc	r20, r26
    2cb6:	5b 1f       	adc	r21, r27
	pwm_left_speed_controller += (signed long int)(I_VERTICAL*delta_left_speed_sum);
    2cb8:	2c 0d       	add	r18, r12
    2cba:	3d 1d       	adc	r19, r13
    2cbc:	4e 1d       	adc	r20, r14
    2cbe:	5f 1d       	adc	r21, r15
    2cc0:	20 93 05 03 	sts	0x0305, r18
    2cc4:	30 93 06 03 	sts	0x0306, r19
    2cc8:	40 93 07 03 	sts	0x0307, r20
    2ccc:	50 93 08 03 	sts	0x0308, r21

	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    2cd0:	57 fd       	sbrc	r21, 7
    2cd2:	9d c0       	rjmp	.+314    	; 0x2e0e <start_vertical_speed_control_left+0x278>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    2cd4:	12 16       	cp	r1, r18
    2cd6:	13 06       	cpc	r1, r19
    2cd8:	14 06       	cpc	r1, r20
    2cda:	15 06       	cpc	r1, r21
    2cdc:	0c f0       	brlt	.+2      	; 0x2ce0 <start_vertical_speed_control_left+0x14a>
    2cde:	a4 c0       	rjmp	.+328    	; 0x2e28 <start_vertical_speed_control_left+0x292>
    2ce0:	17 fd       	sbrc	r17, 7
    2ce2:	c9 c0       	rjmp	.+402    	; 0x2e76 <start_vertical_speed_control_left+0x2e0>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    2ce4:	21 3c       	cpi	r18, 0xC1	; 193
    2ce6:	7d e5       	ldi	r23, 0x5D	; 93
    2ce8:	37 07       	cpc	r19, r23
    2cea:	70 e0       	ldi	r23, 0x00	; 0
    2cec:	47 07       	cpc	r20, r23
    2cee:	70 e0       	ldi	r23, 0x00	; 0
    2cf0:	57 07       	cpc	r21, r23
    2cf2:	0c f4       	brge	.+2      	; 0x2cf6 <start_vertical_speed_control_left+0x160>
    2cf4:	99 c0       	rjmp	.+306    	; 0x2e28 <start_vertical_speed_control_left+0x292>
    2cf6:	80 ec       	ldi	r24, 0xC0	; 192
    2cf8:	9d e5       	ldi	r25, 0x5D	; 93
    2cfa:	a0 e0       	ldi	r26, 0x00	; 0
    2cfc:	b0 e0       	ldi	r27, 0x00	; 0
    2cfe:	80 93 05 03 	sts	0x0305, r24
    2d02:	90 93 06 03 	sts	0x0306, r25
    2d06:	a0 93 07 03 	sts	0x0307, r26
    2d0a:	b0 93 08 03 	sts	0x0308, r27
    2d0e:	2c ed       	ldi	r18, 0xDC	; 220
    2d10:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = (signed int)(pwm_left_speed_controller>>4);
    2d12:	31 83       	std	Z+1, r19	; 0x01
    2d14:	20 83       	st	Z, r18

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
    2d16:	80 91 eb 02 	lds	r24, 0x02EB
    2d1a:	90 91 ec 02 	lds	r25, 0x02EC
    2d1e:	18 16       	cp	r1, r24
    2d20:	19 06       	cpc	r1, r25
    2d22:	0c f0       	brlt	.+2      	; 0x2d26 <start_vertical_speed_control_left+0x190>
    2d24:	98 c0       	rjmp	.+304    	; 0x2e56 <start_vertical_speed_control_left+0x2c0>
		*pwm_left += 1;
    2d26:	2f 5f       	subi	r18, 0xFF	; 255
    2d28:	3f 4f       	sbci	r19, 0xFF	; 255
    2d2a:	31 83       	std	Z+1, r19	; 0x01
    2d2c:	20 83       	st	Z, r18
	} else {
		*pwm_left -= 1;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    2d2e:	42 e0       	ldi	r20, 0x02	; 2
    2d30:	21 30       	cpi	r18, 0x01	; 1
    2d32:	34 07       	cpc	r19, r20
    2d34:	0c f4       	brge	.+2      	; 0x2d38 <start_vertical_speed_control_left+0x1a2>
    2d36:	41 c0       	rjmp	.+130    	; 0x2dba <start_vertical_speed_control_left+0x224>
    2d38:	80 e0       	ldi	r24, 0x00	; 0
    2d3a:	92 e0       	ldi	r25, 0x02	; 2
    2d3c:	91 83       	std	Z+1, r25	; 0x01
    2d3e:	80 83       	st	Z, r24
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);


}
    2d40:	df 91       	pop	r29
    2d42:	cf 91       	pop	r28
    2d44:	1f 91       	pop	r17
    2d46:	0f 91       	pop	r16
    2d48:	ff 90       	pop	r15
    2d4a:	ef 90       	pop	r14
    2d4c:	df 90       	pop	r13
    2d4e:	cf 90       	pop	r12
    2d50:	08 95       	ret
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    2d52:	24 3b       	cpi	r18, 0xB4	; 180
    2d54:	31 05       	cpc	r19, r1
    2d56:	94 f4       	brge	.+36     	; 0x2d7c <start_vertical_speed_control_left+0x1e6>
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
    2d58:	2a 35       	cpi	r18, 0x5A	; 90
    2d5a:	31 05       	cpc	r19, r1
    2d5c:	7c f4       	brge	.+30     	; 0x2d7c <start_vertical_speed_control_left+0x1e6>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
    2d5e:	18 16       	cp	r1, r24
    2d60:	19 06       	cpc	r1, r25
    2d62:	0c f0       	brlt	.+2      	; 0x2d66 <start_vertical_speed_control_left+0x1d0>
    2d64:	a9 c0       	rjmp	.+338    	; 0x2eb8 <start_vertical_speed_control_left+0x322>
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
    2d66:	35 95       	asr	r19
    2d68:	27 95       	ror	r18
    2d6a:	35 95       	asr	r19
    2d6c:	27 95       	ror	r18
    2d6e:	27 5e       	subi	r18, 0xE7	; 231
    2d70:	3f 4f       	sbci	r19, 0xFF	; 255
    2d72:	30 93 04 02 	sts	0x0204, r19
    2d76:	20 93 03 02 	sts	0x0203, r18
    2d7a:	38 cf       	rjmp	.-400    	; 0x2bec <start_vertical_speed_control_left+0x56>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
    2d7c:	18 16       	cp	r1, r24
    2d7e:	19 06       	cpc	r1, r25
    2d80:	0c f0       	brlt	.+2      	; 0x2d84 <start_vertical_speed_control_left+0x1ee>
    2d82:	42 c0       	rjmp	.+132    	; 0x2e08 <start_vertical_speed_control_left+0x272>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
    2d84:	84 eb       	ldi	r24, 0xB4	; 180
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	82 1b       	sub	r24, r18
    2d8a:	93 0b       	sbc	r25, r19
    2d8c:	95 95       	asr	r25
    2d8e:	87 95       	ror	r24
    2d90:	95 95       	asr	r25
    2d92:	87 95       	ror	r24
    2d94:	49 96       	adiw	r24, 0x19	; 25
    2d96:	90 93 04 02 	sts	0x0204, r25
    2d9a:	80 93 03 02 	sts	0x0203, r24
    2d9e:	26 cf       	rjmp	.-436    	; 0x2bec <start_vertical_speed_control_left+0x56>
void start_vertical_speed_control_left(signed int *pwm_left) {
	
	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).
	
	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    2da0:	10 92 0a 03 	sts	0x030A, r1
    2da4:	10 92 09 03 	sts	0x0309, r1
		delta_left_speed_current = 0;
    2da8:	10 92 25 05 	sts	0x0525, r1
    2dac:	10 92 24 05 	sts	0x0524, r1
		delta_left_speed_prev = 0;
    2db0:	10 92 b0 08 	sts	0x08B0, r1
    2db4:	10 92 af 08 	sts	0x08AF, r1
		return;
    2db8:	c3 cf       	rjmp	.-122    	; 0x2d40 <start_vertical_speed_control_left+0x1aa>
	} else {
		*pwm_left -= 1;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    2dba:	6e ef       	ldi	r22, 0xFE	; 254
    2dbc:	20 30       	cpi	r18, 0x00	; 0
    2dbe:	36 07       	cpc	r19, r22
    2dc0:	0c f0       	brlt	.+2      	; 0x2dc4 <start_vertical_speed_control_left+0x22e>
    2dc2:	be cf       	rjmp	.-132    	; 0x2d40 <start_vertical_speed_control_left+0x1aa>
    2dc4:	80 e0       	ldi	r24, 0x00	; 0
    2dc6:	9e ef       	ldi	r25, 0xFE	; 254
    2dc8:	91 83       	std	Z+1, r25	; 0x01
    2dca:	80 83       	st	Z, r24
    2dcc:	b9 cf       	rjmp	.-142    	; 0x2d40 <start_vertical_speed_control_left+0x1aa>
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    2dce:	79 ef       	ldi	r23, 0xF9	; 249
    2dd0:	80 3c       	cpi	r24, 0xC0	; 192
    2dd2:	97 07       	cpc	r25, r23
    2dd4:	7c f4       	brge	.+30     	; 0x2df4 <start_vertical_speed_control_left+0x25e>
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
    2dd6:	80 ec       	ldi	r24, 0xC0	; 192
    2dd8:	99 ef       	ldi	r25, 0xF9	; 249
    2dda:	90 93 0a 03 	sts	0x030A, r25
    2dde:	80 93 09 03 	sts	0x0309, r24
    2de2:	60 e4       	ldi	r22, 0x40	; 64
    2de4:	c6 2e       	mov	r12, r22
    2de6:	6d ee       	ldi	r22, 0xED	; 237
    2de8:	d6 2e       	mov	r13, r22
    2dea:	6f ef       	ldi	r22, 0xFF	; 255
    2dec:	e6 2e       	mov	r14, r22
    2dee:	6f ef       	ldi	r22, 0xFF	; 255
    2df0:	f6 2e       	mov	r15, r22
    2df2:	2e cf       	rjmp	.-420    	; 0x2c50 <start_vertical_speed_control_left+0xba>
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    2df4:	6c 01       	movw	r12, r24
    2df6:	cc 0c       	add	r12, r12
    2df8:	dd 1c       	adc	r13, r13
    2dfa:	c8 0e       	add	r12, r24
    2dfc:	d9 1e       	adc	r13, r25
    2dfe:	ee 24       	eor	r14, r14
    2e00:	d7 fc       	sbrc	r13, 7
    2e02:	e0 94       	com	r14
    2e04:	fe 2c       	mov	r15, r14
    2e06:	24 cf       	rjmp	.-440    	; 0x2c50 <start_vertical_speed_control_left+0xba>
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    2e08:	84 eb       	ldi	r24, 0xB4	; 180
    2e0a:	90 e0       	ldi	r25, 0x00	; 0
    2e0c:	e1 ce       	rjmp	.-574    	; 0x2bd0 <start_vertical_speed_control_left+0x3a>
	pwm_left_speed_controller += (signed long int)(P_VERTICAL * delta_left_speed_current);
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
	pwm_left_speed_controller += (signed long int)(I_VERTICAL*delta_left_speed_sum);

	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    2e0e:	17 fd       	sbrc	r17, 7
    2e10:	0b c0       	rjmp	.+22     	; 0x2e28 <start_vertical_speed_control_left+0x292>
		pwm_left_speed_controller = 0;
    2e12:	10 92 05 03 	sts	0x0305, r1
    2e16:	10 92 06 03 	sts	0x0306, r1
    2e1a:	10 92 07 03 	sts	0x0307, r1
    2e1e:	10 92 08 03 	sts	0x0308, r1
    2e22:	20 e0       	ldi	r18, 0x00	; 0
    2e24:	30 e0       	ldi	r19, 0x00	; 0
    2e26:	a9 01       	movw	r20, r18
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    2e28:	20 34       	cpi	r18, 0x40	; 64
    2e2a:	82 ea       	ldi	r24, 0xA2	; 162
    2e2c:	38 07       	cpc	r19, r24
    2e2e:	8f ef       	ldi	r24, 0xFF	; 255
    2e30:	48 07       	cpc	r20, r24
    2e32:	8f ef       	ldi	r24, 0xFF	; 255
    2e34:	58 07       	cpc	r21, r24
    2e36:	54 f5       	brge	.+84     	; 0x2e8c <start_vertical_speed_control_left+0x2f6>
    2e38:	80 e4       	ldi	r24, 0x40	; 64
    2e3a:	92 ea       	ldi	r25, 0xA2	; 162
    2e3c:	af ef       	ldi	r26, 0xFF	; 255
    2e3e:	bf ef       	ldi	r27, 0xFF	; 255
    2e40:	80 93 05 03 	sts	0x0305, r24
    2e44:	90 93 06 03 	sts	0x0306, r25
    2e48:	a0 93 07 03 	sts	0x0307, r26
    2e4c:	b0 93 08 03 	sts	0x0308, r27
    2e50:	24 e2       	ldi	r18, 0x24	; 36
    2e52:	3a ef       	ldi	r19, 0xFA	; 250
    2e54:	5e cf       	rjmp	.-324    	; 0x2d12 <start_vertical_speed_control_left+0x17c>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
		*pwm_left += 1;
	} else {
		*pwm_left -= 1;
    2e56:	21 50       	subi	r18, 0x01	; 1
    2e58:	30 40       	sbci	r19, 0x00	; 0
    2e5a:	31 83       	std	Z+1, r19	; 0x01
    2e5c:	20 83       	st	Z, r18
    2e5e:	67 cf       	rjmp	.-306    	; 0x2d2e <start_vertical_speed_control_left+0x198>
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    2e60:	a0 91 f1 02 	lds	r26, 0x02F1
    2e64:	b0 91 f2 02 	lds	r27, 0x02F2
    2e68:	a8 0f       	add	r26, r24
    2e6a:	b9 1f       	adc	r27, r25
    2e6c:	b0 93 25 05 	sts	0x0525, r27
    2e70:	a0 93 24 05 	sts	0x0524, r26
    2e74:	d2 ce       	rjmp	.-604    	; 0x2c1a <start_vertical_speed_control_left+0x84>
	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    2e76:	10 92 05 03 	sts	0x0305, r1
    2e7a:	10 92 06 03 	sts	0x0306, r1
    2e7e:	10 92 07 03 	sts	0x0307, r1
    2e82:	10 92 08 03 	sts	0x0308, r1
    2e86:	20 e0       	ldi	r18, 0x00	; 0
    2e88:	30 e0       	ldi	r19, 0x00	; 0
    2e8a:	a9 01       	movw	r20, r18
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    2e8c:	84 e0       	ldi	r24, 0x04	; 4
    2e8e:	55 95       	asr	r21
    2e90:	47 95       	ror	r20
    2e92:	37 95       	ror	r19
    2e94:	27 95       	ror	r18
    2e96:	8a 95       	dec	r24
    2e98:	d1 f7       	brne	.-12     	; 0x2e8e <start_vertical_speed_control_left+0x2f8>
    2e9a:	3b cf       	rjmp	.-394    	; 0x2d12 <start_vertical_speed_control_left+0x17c>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
    2e9c:	88 e6       	ldi	r24, 0x68	; 104
    2e9e:	91 e0       	ldi	r25, 0x01	; 1
    2ea0:	82 1b       	sub	r24, r18
    2ea2:	93 0b       	sbc	r25, r19
    2ea4:	95 95       	asr	r25
    2ea6:	87 95       	ror	r24
    2ea8:	95 95       	asr	r25
    2eaa:	87 95       	ror	r24
    2eac:	49 96       	adiw	r24, 0x19	; 25
    2eae:	90 93 04 02 	sts	0x0204, r25
    2eb2:	80 93 03 02 	sts	0x0203, r24
    2eb6:	9a ce       	rjmp	.-716    	; 0x2bec <start_vertical_speed_control_left+0x56>
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
    2eb8:	35 95       	asr	r19
    2eba:	27 95       	ror	r18
    2ebc:	35 95       	asr	r19
    2ebe:	27 95       	ror	r18
    2ec0:	89 e1       	ldi	r24, 0x19	; 25
    2ec2:	90 e0       	ldi	r25, 0x00	; 0
    2ec4:	82 1b       	sub	r24, r18
    2ec6:	93 0b       	sbc	r25, r19
    2ec8:	90 93 04 02 	sts	0x0204, r25
    2ecc:	80 93 03 02 	sts	0x0203, r24
    2ed0:	8d ce       	rjmp	.-742    	; 0x2bec <start_vertical_speed_control_left+0x56>

00002ed2 <start_vertical_speed_control_right>:


}


void start_vertical_speed_control_right(signed int *pwm_right) {
    2ed2:	cf 92       	push	r12
    2ed4:	df 92       	push	r13
    2ed6:	ef 92       	push	r14
    2ed8:	ff 92       	push	r15
    2eda:	0f 93       	push	r16
    2edc:	1f 93       	push	r17
    2ede:	cf 93       	push	r28
    2ee0:	df 93       	push	r29
    2ee2:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    2ee4:	80 81       	ld	r24, Z
    2ee6:	91 81       	ldd	r25, Z+1	; 0x01
    2ee8:	00 97       	sbiw	r24, 0x00	; 0
    2eea:	09 f4       	brne	.+2      	; 0x2eee <start_vertical_speed_control_right+0x1c>
    2eec:	f7 c0       	rjmp	.+494    	; 0x30dc <start_vertical_speed_control_right+0x20a>
		delta_right_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    2eee:	20 91 3c 04 	lds	r18, 0x043C
    2ef2:	30 91 3d 04 	lds	r19, 0x043D
    2ef6:	41 e0       	ldi	r20, 0x01	; 1
    2ef8:	2e 30       	cpi	r18, 0x0E	; 14
    2efa:	34 07       	cpc	r19, r20
    2efc:	0c f4       	brge	.+2      	; 0x2f00 <start_vertical_speed_control_right+0x2e>
    2efe:	c7 c0       	rjmp	.+398    	; 0x308e <start_vertical_speed_control_right+0x1bc>
		if(*pwm_right > 0) {
    2f00:	18 16       	cp	r1, r24
    2f02:	19 06       	cpc	r1, r25
    2f04:	0c f0       	brlt	.+2      	; 0x2f08 <start_vertical_speed_control_right+0x36>
    2f06:	68 c1       	rjmp	.+720    	; 0x31d8 <start_vertical_speed_control_right+0x306>
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
    2f08:	88 e6       	ldi	r24, 0x68	; 104
    2f0a:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    2f0c:	82 1b       	sub	r24, r18
    2f0e:	93 0b       	sbc	r25, r19
    2f10:	95 95       	asr	r25
    2f12:	87 95       	ror	r24
    2f14:	95 95       	asr	r25
    2f16:	87 95       	ror	r24
    2f18:	29 e1       	ldi	r18, 0x19	; 25
    2f1a:	30 e0       	ldi	r19, 0x00	; 0
    2f1c:	28 1b       	sub	r18, r24
    2f1e:	39 0b       	sbc	r19, r25
    2f20:	30 93 06 02 	sts	0x0206, r19
    2f24:	20 93 05 02 	sts	0x0205, r18
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
		}
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    2f28:	c0 91 be 08 	lds	r28, 0x08BE
    2f2c:	d0 91 bf 08 	lds	r29, 0x08BF
    2f30:	d0 93 e8 07 	sts	0x07E8, r29
    2f34:	c0 93 e7 07 	sts	0x07E7, r28
	if(*pwm_right >= 0) {
    2f38:	80 81       	ld	r24, Z
    2f3a:	91 81       	ldd	r25, Z+1	; 0x01
    2f3c:	97 fd       	sbrc	r25, 7
    2f3e:	2e c1       	rjmp	.+604    	; 0x319c <start_vertical_speed_control_right+0x2ca>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    2f40:	20 91 f3 02 	lds	r18, 0x02F3
    2f44:	30 91 f4 02 	lds	r19, 0x02F4
    2f48:	dc 01       	movw	r26, r24
    2f4a:	a2 1b       	sub	r26, r18
    2f4c:	b3 0b       	sbc	r27, r19
    2f4e:	b0 93 bf 08 	sts	0x08BF, r27
    2f52:	a0 93 be 08 	sts	0x08BE, r26
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    2f56:	80 91 0b 03 	lds	r24, 0x030B
    2f5a:	90 91 0c 03 	lds	r25, 0x030C
    2f5e:	8a 0f       	add	r24, r26
    2f60:	9b 1f       	adc	r25, r27
    2f62:	90 93 0c 03 	sts	0x030C, r25
    2f66:	80 93 0b 03 	sts	0x030B, r24

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
    2f6a:	66 e0       	ldi	r22, 0x06	; 6
    2f6c:	81 34       	cpi	r24, 0x41	; 65
    2f6e:	96 07       	cpc	r25, r22
    2f70:	0c f4       	brge	.+2      	; 0x2f74 <start_vertical_speed_control_right+0xa2>
    2f72:	cb c0       	rjmp	.+406    	; 0x310a <start_vertical_speed_control_right+0x238>
		delta_right_speed_sum = I_LIMIT_VERTICAL;
    2f74:	80 e4       	ldi	r24, 0x40	; 64
    2f76:	96 e0       	ldi	r25, 0x06	; 6
    2f78:	90 93 0c 03 	sts	0x030C, r25
    2f7c:	80 93 0b 03 	sts	0x030B, r24
    2f80:	40 ec       	ldi	r20, 0xC0	; 192
    2f82:	c4 2e       	mov	r12, r20
    2f84:	42 e1       	ldi	r20, 0x12	; 18
    2f86:	d4 2e       	mov	r13, r20
    2f88:	e1 2c       	mov	r14, r1
    2f8a:	f1 2c       	mov	r15, r1
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_right_speed_controller = (signed long int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
    2f8c:	00 81       	ld	r16, Z
    2f8e:	11 81       	ldd	r17, Z+1	; 0x01
	pwm_right_speed_controller += (signed long int)(P_VERTICAL * delta_right_speed_current);
    2f90:	9d 01       	movw	r18, r26
    2f92:	22 0f       	add	r18, r18
    2f94:	33 1f       	adc	r19, r19
    2f96:	2a 0f       	add	r18, r26
    2f98:	3b 1f       	adc	r19, r27
    2f9a:	22 0f       	add	r18, r18
    2f9c:	33 1f       	adc	r19, r19
    2f9e:	22 0f       	add	r18, r18
    2fa0:	33 1f       	adc	r19, r19
    2fa2:	22 0f       	add	r18, r18
    2fa4:	33 1f       	adc	r19, r19
    2fa6:	2a 0f       	add	r18, r26
    2fa8:	3b 1f       	adc	r19, r27
    2faa:	44 27       	eor	r20, r20
    2fac:	37 fd       	sbrc	r19, 7
    2fae:	40 95       	com	r20
    2fb0:	54 2f       	mov	r21, r20
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_right_speed_controller = (signed long int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
    2fb2:	80 91 05 02 	lds	r24, 0x0205
    2fb6:	90 91 06 02 	lds	r25, 0x0206
    2fba:	08 9f       	mul	r16, r24
    2fbc:	b0 01       	movw	r22, r0
    2fbe:	09 9f       	mul	r16, r25
    2fc0:	70 0d       	add	r23, r0
    2fc2:	18 9f       	mul	r17, r24
    2fc4:	70 0d       	add	r23, r0
    2fc6:	11 24       	eor	r1, r1
    2fc8:	88 27       	eor	r24, r24
    2fca:	77 fd       	sbrc	r23, 7
    2fcc:	80 95       	com	r24
    2fce:	98 2f       	mov	r25, r24
	pwm_right_speed_controller += (signed long int)(P_VERTICAL * delta_right_speed_current);
    2fd0:	26 0f       	add	r18, r22
    2fd2:	37 1f       	adc	r19, r23
    2fd4:	48 1f       	adc	r20, r24
    2fd6:	59 1f       	adc	r21, r25
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
    2fd8:	ac 1b       	sub	r26, r28
    2fda:	bd 0b       	sbc	r27, r29
    2fdc:	aa 0f       	add	r26, r26
    2fde:	bb 1f       	adc	r27, r27
    2fe0:	bd 01       	movw	r22, r26
    2fe2:	cb 01       	movw	r24, r22
    2fe4:	aa 27       	eor	r26, r26
    2fe6:	97 fd       	sbrc	r25, 7
    2fe8:	a0 95       	com	r26
    2fea:	ba 2f       	mov	r27, r26
    2fec:	28 0f       	add	r18, r24
    2fee:	39 1f       	adc	r19, r25
    2ff0:	4a 1f       	adc	r20, r26
    2ff2:	5b 1f       	adc	r21, r27
	pwm_right_speed_controller += (signed long int)(I_VERTICAL*delta_right_speed_sum);
    2ff4:	2c 0d       	add	r18, r12
    2ff6:	3d 1d       	adc	r19, r13
    2ff8:	4e 1d       	adc	r20, r14
    2ffa:	5f 1d       	adc	r21, r15
    2ffc:	20 93 01 03 	sts	0x0301, r18
    3000:	30 93 02 03 	sts	0x0302, r19
    3004:	40 93 03 03 	sts	0x0303, r20
    3008:	50 93 04 03 	sts	0x0304, r21

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    300c:	57 fd       	sbrc	r21, 7
    300e:	9d c0       	rjmp	.+314    	; 0x314a <start_vertical_speed_control_right+0x278>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    3010:	12 16       	cp	r1, r18
    3012:	13 06       	cpc	r1, r19
    3014:	14 06       	cpc	r1, r20
    3016:	15 06       	cpc	r1, r21
    3018:	0c f0       	brlt	.+2      	; 0x301c <start_vertical_speed_control_right+0x14a>
    301a:	a4 c0       	rjmp	.+328    	; 0x3164 <start_vertical_speed_control_right+0x292>
    301c:	17 fd       	sbrc	r17, 7
    301e:	c9 c0       	rjmp	.+402    	; 0x31b2 <start_vertical_speed_control_right+0x2e0>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    3020:	21 3c       	cpi	r18, 0xC1	; 193
    3022:	7d e5       	ldi	r23, 0x5D	; 93
    3024:	37 07       	cpc	r19, r23
    3026:	70 e0       	ldi	r23, 0x00	; 0
    3028:	47 07       	cpc	r20, r23
    302a:	70 e0       	ldi	r23, 0x00	; 0
    302c:	57 07       	cpc	r21, r23
    302e:	0c f4       	brge	.+2      	; 0x3032 <start_vertical_speed_control_right+0x160>
    3030:	99 c0       	rjmp	.+306    	; 0x3164 <start_vertical_speed_control_right+0x292>
    3032:	80 ec       	ldi	r24, 0xC0	; 192
    3034:	9d e5       	ldi	r25, 0x5D	; 93
    3036:	a0 e0       	ldi	r26, 0x00	; 0
    3038:	b0 e0       	ldi	r27, 0x00	; 0
    303a:	80 93 01 03 	sts	0x0301, r24
    303e:	90 93 02 03 	sts	0x0302, r25
    3042:	a0 93 03 03 	sts	0x0303, r26
    3046:	b0 93 04 03 	sts	0x0304, r27
    304a:	2c ed       	ldi	r18, 0xDC	; 220
    304c:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = (signed int)(pwm_right_speed_controller>>4);
    304e:	31 83       	std	Z+1, r19	; 0x01
    3050:	20 83       	st	Z, r18

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
    3052:	80 91 e9 02 	lds	r24, 0x02E9
    3056:	90 91 ea 02 	lds	r25, 0x02EA
    305a:	18 16       	cp	r1, r24
    305c:	19 06       	cpc	r1, r25
    305e:	0c f0       	brlt	.+2      	; 0x3062 <start_vertical_speed_control_right+0x190>
    3060:	98 c0       	rjmp	.+304    	; 0x3192 <start_vertical_speed_control_right+0x2c0>
		*pwm_right += 1;
    3062:	2f 5f       	subi	r18, 0xFF	; 255
    3064:	3f 4f       	sbci	r19, 0xFF	; 255
    3066:	31 83       	std	Z+1, r19	; 0x01
    3068:	20 83       	st	Z, r18
	} else {
		*pwm_right -= 1;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    306a:	42 e0       	ldi	r20, 0x02	; 2
    306c:	21 30       	cpi	r18, 0x01	; 1
    306e:	34 07       	cpc	r19, r20
    3070:	0c f4       	brge	.+2      	; 0x3074 <start_vertical_speed_control_right+0x1a2>
    3072:	41 c0       	rjmp	.+130    	; 0x30f6 <start_vertical_speed_control_right+0x224>
    3074:	80 e0       	ldi	r24, 0x00	; 0
    3076:	92 e0       	ldi	r25, 0x02	; 2
    3078:	91 83       	std	Z+1, r25	; 0x01
    307a:	80 83       	st	Z, r24
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    307c:	df 91       	pop	r29
    307e:	cf 91       	pop	r28
    3080:	1f 91       	pop	r17
    3082:	0f 91       	pop	r16
    3084:	ff 90       	pop	r15
    3086:	ef 90       	pop	r14
    3088:	df 90       	pop	r13
    308a:	cf 90       	pop	r12
    308c:	08 95       	ret
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    308e:	24 3b       	cpi	r18, 0xB4	; 180
    3090:	31 05       	cpc	r19, r1
    3092:	94 f4       	brge	.+36     	; 0x30b8 <start_vertical_speed_control_right+0x1e6>
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
    3094:	2a 35       	cpi	r18, 0x5A	; 90
    3096:	31 05       	cpc	r19, r1
    3098:	7c f4       	brge	.+30     	; 0x30b8 <start_vertical_speed_control_right+0x1e6>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
    309a:	18 16       	cp	r1, r24
    309c:	19 06       	cpc	r1, r25
    309e:	0c f0       	brlt	.+2      	; 0x30a2 <start_vertical_speed_control_right+0x1d0>
    30a0:	a9 c0       	rjmp	.+338    	; 0x31f4 <start_vertical_speed_control_right+0x322>
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
    30a2:	35 95       	asr	r19
    30a4:	27 95       	ror	r18
    30a6:	35 95       	asr	r19
    30a8:	27 95       	ror	r18
    30aa:	27 5e       	subi	r18, 0xE7	; 231
    30ac:	3f 4f       	sbci	r19, 0xFF	; 255
    30ae:	30 93 06 02 	sts	0x0206, r19
    30b2:	20 93 05 02 	sts	0x0205, r18
    30b6:	38 cf       	rjmp	.-400    	; 0x2f28 <start_vertical_speed_control_right+0x56>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
    30b8:	18 16       	cp	r1, r24
    30ba:	19 06       	cpc	r1, r25
    30bc:	0c f0       	brlt	.+2      	; 0x30c0 <start_vertical_speed_control_right+0x1ee>
    30be:	42 c0       	rjmp	.+132    	; 0x3144 <start_vertical_speed_control_right+0x272>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
    30c0:	84 eb       	ldi	r24, 0xB4	; 180
    30c2:	90 e0       	ldi	r25, 0x00	; 0
    30c4:	82 1b       	sub	r24, r18
    30c6:	93 0b       	sbc	r25, r19
    30c8:	95 95       	asr	r25
    30ca:	87 95       	ror	r24
    30cc:	95 95       	asr	r25
    30ce:	87 95       	ror	r24
    30d0:	49 96       	adiw	r24, 0x19	; 25
    30d2:	90 93 06 02 	sts	0x0206, r25
    30d6:	80 93 05 02 	sts	0x0205, r24
    30da:	26 cf       	rjmp	.-436    	; 0x2f28 <start_vertical_speed_control_right+0x56>
void start_vertical_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    30dc:	10 92 0c 03 	sts	0x030C, r1
    30e0:	10 92 0b 03 	sts	0x030B, r1
		delta_right_speed_current = 0;
    30e4:	10 92 bf 08 	sts	0x08BF, r1
    30e8:	10 92 be 08 	sts	0x08BE, r1
		delta_right_speed_prev = 0;
    30ec:	10 92 e8 07 	sts	0x07E8, r1
    30f0:	10 92 e7 07 	sts	0x07E7, r1
		return;
    30f4:	c3 cf       	rjmp	.-122    	; 0x307c <start_vertical_speed_control_right+0x1aa>
	} else {
		*pwm_right -= 1;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    30f6:	6e ef       	ldi	r22, 0xFE	; 254
    30f8:	20 30       	cpi	r18, 0x00	; 0
    30fa:	36 07       	cpc	r19, r22
    30fc:	0c f0       	brlt	.+2      	; 0x3100 <start_vertical_speed_control_right+0x22e>
    30fe:	be cf       	rjmp	.-132    	; 0x307c <start_vertical_speed_control_right+0x1aa>
    3100:	80 e0       	ldi	r24, 0x00	; 0
    3102:	9e ef       	ldi	r25, 0xFE	; 254
    3104:	91 83       	std	Z+1, r25	; 0x01
    3106:	80 83       	st	Z, r24
    3108:	b9 cf       	rjmp	.-142    	; 0x307c <start_vertical_speed_control_right+0x1aa>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    310a:	79 ef       	ldi	r23, 0xF9	; 249
    310c:	80 3c       	cpi	r24, 0xC0	; 192
    310e:	97 07       	cpc	r25, r23
    3110:	7c f4       	brge	.+30     	; 0x3130 <start_vertical_speed_control_right+0x25e>
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
    3112:	80 ec       	ldi	r24, 0xC0	; 192
    3114:	99 ef       	ldi	r25, 0xF9	; 249
    3116:	90 93 0c 03 	sts	0x030C, r25
    311a:	80 93 0b 03 	sts	0x030B, r24
    311e:	20 e4       	ldi	r18, 0x40	; 64
    3120:	c2 2e       	mov	r12, r18
    3122:	2d ee       	ldi	r18, 0xED	; 237
    3124:	d2 2e       	mov	r13, r18
    3126:	2f ef       	ldi	r18, 0xFF	; 255
    3128:	e2 2e       	mov	r14, r18
    312a:	2f ef       	ldi	r18, 0xFF	; 255
    312c:	f2 2e       	mov	r15, r18
    312e:	2e cf       	rjmp	.-420    	; 0x2f8c <start_vertical_speed_control_right+0xba>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    3130:	6c 01       	movw	r12, r24
    3132:	cc 0c       	add	r12, r12
    3134:	dd 1c       	adc	r13, r13
    3136:	c8 0e       	add	r12, r24
    3138:	d9 1e       	adc	r13, r25
    313a:	ee 24       	eor	r14, r14
    313c:	d7 fc       	sbrc	r13, 7
    313e:	e0 94       	com	r14
    3140:	fe 2c       	mov	r15, r14
    3142:	24 cf       	rjmp	.-440    	; 0x2f8c <start_vertical_speed_control_right+0xba>
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    3144:	84 eb       	ldi	r24, 0xB4	; 180
    3146:	90 e0       	ldi	r25, 0x00	; 0
    3148:	e1 ce       	rjmp	.-574    	; 0x2f0c <start_vertical_speed_control_right+0x3a>
	pwm_right_speed_controller += (signed long int)(P_VERTICAL * delta_right_speed_current);
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
	pwm_right_speed_controller += (signed long int)(I_VERTICAL*delta_right_speed_sum);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    314a:	17 fd       	sbrc	r17, 7
    314c:	0b c0       	rjmp	.+22     	; 0x3164 <start_vertical_speed_control_right+0x292>
		pwm_right_speed_controller = 0;
    314e:	10 92 01 03 	sts	0x0301, r1
    3152:	10 92 02 03 	sts	0x0302, r1
    3156:	10 92 03 03 	sts	0x0303, r1
    315a:	10 92 04 03 	sts	0x0304, r1
    315e:	20 e0       	ldi	r18, 0x00	; 0
    3160:	30 e0       	ldi	r19, 0x00	; 0
    3162:	a9 01       	movw	r20, r18
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    3164:	20 34       	cpi	r18, 0x40	; 64
    3166:	82 ea       	ldi	r24, 0xA2	; 162
    3168:	38 07       	cpc	r19, r24
    316a:	8f ef       	ldi	r24, 0xFF	; 255
    316c:	48 07       	cpc	r20, r24
    316e:	8f ef       	ldi	r24, 0xFF	; 255
    3170:	58 07       	cpc	r21, r24
    3172:	54 f5       	brge	.+84     	; 0x31c8 <start_vertical_speed_control_right+0x2f6>
    3174:	80 e4       	ldi	r24, 0x40	; 64
    3176:	92 ea       	ldi	r25, 0xA2	; 162
    3178:	af ef       	ldi	r26, 0xFF	; 255
    317a:	bf ef       	ldi	r27, 0xFF	; 255
    317c:	80 93 01 03 	sts	0x0301, r24
    3180:	90 93 02 03 	sts	0x0302, r25
    3184:	a0 93 03 03 	sts	0x0303, r26
    3188:	b0 93 04 03 	sts	0x0304, r27
    318c:	24 e2       	ldi	r18, 0x24	; 36
    318e:	3a ef       	ldi	r19, 0xFA	; 250
    3190:	5e cf       	rjmp	.-324    	; 0x304e <start_vertical_speed_control_right+0x17c>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
		*pwm_right += 1;
	} else {
		*pwm_right -= 1;
    3192:	21 50       	subi	r18, 0x01	; 1
    3194:	30 40       	sbci	r19, 0x00	; 0
    3196:	31 83       	std	Z+1, r19	; 0x01
    3198:	20 83       	st	Z, r18
    319a:	67 cf       	rjmp	.-306    	; 0x306a <start_vertical_speed_control_right+0x198>
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    319c:	a0 91 f3 02 	lds	r26, 0x02F3
    31a0:	b0 91 f4 02 	lds	r27, 0x02F4
    31a4:	a8 0f       	add	r26, r24
    31a6:	b9 1f       	adc	r27, r25
    31a8:	b0 93 bf 08 	sts	0x08BF, r27
    31ac:	a0 93 be 08 	sts	0x08BE, r26
    31b0:	d2 ce       	rjmp	.-604    	; 0x2f56 <start_vertical_speed_control_right+0x84>
	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    31b2:	10 92 01 03 	sts	0x0301, r1
    31b6:	10 92 02 03 	sts	0x0302, r1
    31ba:	10 92 03 03 	sts	0x0303, r1
    31be:	10 92 04 03 	sts	0x0304, r1
    31c2:	20 e0       	ldi	r18, 0x00	; 0
    31c4:	30 e0       	ldi	r19, 0x00	; 0
    31c6:	a9 01       	movw	r20, r18
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    31c8:	64 e0       	ldi	r22, 0x04	; 4
    31ca:	55 95       	asr	r21
    31cc:	47 95       	ror	r20
    31ce:	37 95       	ror	r19
    31d0:	27 95       	ror	r18
    31d2:	6a 95       	dec	r22
    31d4:	d1 f7       	brne	.-12     	; 0x31ca <start_vertical_speed_control_right+0x2f8>
    31d6:	3b cf       	rjmp	.-394    	; 0x304e <start_vertical_speed_control_right+0x17c>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
    31d8:	88 e6       	ldi	r24, 0x68	; 104
    31da:	91 e0       	ldi	r25, 0x01	; 1
    31dc:	82 1b       	sub	r24, r18
    31de:	93 0b       	sbc	r25, r19
    31e0:	95 95       	asr	r25
    31e2:	87 95       	ror	r24
    31e4:	95 95       	asr	r25
    31e6:	87 95       	ror	r24
    31e8:	49 96       	adiw	r24, 0x19	; 25
    31ea:	90 93 06 02 	sts	0x0206, r25
    31ee:	80 93 05 02 	sts	0x0205, r24
    31f2:	9a ce       	rjmp	.-716    	; 0x2f28 <start_vertical_speed_control_right+0x56>
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
    31f4:	35 95       	asr	r19
    31f6:	27 95       	ror	r18
    31f8:	35 95       	asr	r19
    31fa:	27 95       	ror	r18
    31fc:	89 e1       	ldi	r24, 0x19	; 25
    31fe:	90 e0       	ldi	r25, 0x00	; 0
    3200:	82 1b       	sub	r24, r18
    3202:	93 0b       	sbc	r25, r19
    3204:	90 93 06 02 	sts	0x0206, r25
    3208:	80 93 05 02 	sts	0x0205, r24
    320c:	8d ce       	rjmp	.-742    	; 0x2f28 <start_vertical_speed_control_right+0x56>

0000320e <start_horizontal_speed_control_right>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_right(signed int *pwm_right) {
    320e:	cf 92       	push	r12
    3210:	df 92       	push	r13
    3212:	ef 92       	push	r14
    3214:	ff 92       	push	r15
    3216:	0f 93       	push	r16
    3218:	1f 93       	push	r17
    321a:	cf 93       	push	r28
    321c:	df 93       	push	r29
    321e:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    3220:	80 81       	ld	r24, Z
    3222:	91 81       	ldd	r25, Z+1	; 0x01
    3224:	00 97       	sbiw	r24, 0x00	; 0
    3226:	09 f4       	brne	.+2      	; 0x322a <start_horizontal_speed_control_right+0x1c>
    3228:	b8 c0       	rjmp	.+368    	; 0x339a <start_horizontal_speed_control_right+0x18c>
		delta_right_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    322a:	c0 91 be 08 	lds	r28, 0x08BE
    322e:	d0 91 bf 08 	lds	r29, 0x08BF
    3232:	d0 93 e8 07 	sts	0x07E8, r29
    3236:	c0 93 e7 07 	sts	0x07E7, r28
	if(*pwm_right >= 0) {
    323a:	80 81       	ld	r24, Z
    323c:	91 81       	ldd	r25, Z+1	; 0x01
    323e:	97 fd       	sbrc	r25, 7
    3240:	cd c0       	rjmp	.+410    	; 0x33dc <start_horizontal_speed_control_right+0x1ce>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    3242:	20 91 f3 02 	lds	r18, 0x02F3
    3246:	30 91 f4 02 	lds	r19, 0x02F4
    324a:	dc 01       	movw	r26, r24
    324c:	a2 1b       	sub	r26, r18
    324e:	b3 0b       	sbc	r27, r19
    3250:	b0 93 bf 08 	sts	0x08BF, r27
    3254:	a0 93 be 08 	sts	0x08BE, r26
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}

	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    3258:	c0 90 0b 03 	lds	r12, 0x030B
    325c:	d0 90 0c 03 	lds	r13, 0x030C
    3260:	ca 0e       	add	r12, r26
    3262:	db 1e       	adc	r13, r27
    3264:	d0 92 0c 03 	sts	0x030C, r13
    3268:	c0 92 0b 03 	sts	0x030B, r12

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
    326c:	81 e4       	ldi	r24, 0x41	; 65
    326e:	c8 16       	cp	r12, r24
    3270:	86 e0       	ldi	r24, 0x06	; 6
    3272:	d8 06       	cpc	r13, r24
    3274:	0c f4       	brge	.+2      	; 0x3278 <start_horizontal_speed_control_right+0x6a>
    3276:	9e c0       	rjmp	.+316    	; 0x33b4 <start_horizontal_speed_control_right+0x1a6>
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
    3278:	80 e4       	ldi	r24, 0x40	; 64
    327a:	96 e0       	ldi	r25, 0x06	; 6
    327c:	90 93 0c 03 	sts	0x030C, r25
    3280:	80 93 0b 03 	sts	0x030B, r24
    3284:	10 e8       	ldi	r17, 0x80	; 128
    3286:	c1 2e       	mov	r12, r17
    3288:	1c e0       	ldi	r17, 0x0C	; 12
    328a:	d1 2e       	mov	r13, r17
    328c:	e1 2c       	mov	r14, r1
    328e:	f1 2c       	mov	r15, r1
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
	}		

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed long int)((*pwm_right) << 3);
    3290:	00 81       	ld	r16, Z
    3292:	11 81       	ldd	r17, Z+1	; 0x01
	pwm_right_speed_controller += (signed long int)(delta_right_speed_current*P_HORIZONTAL);
    3294:	cd 01       	movw	r24, r26
    3296:	88 0f       	add	r24, r24
    3298:	99 1f       	adc	r25, r25
    329a:	8a 0f       	add	r24, r26
    329c:	9b 1f       	adc	r25, r27
    329e:	9c 01       	movw	r18, r24
    32a0:	22 0f       	add	r18, r18
    32a2:	33 1f       	adc	r19, r19
    32a4:	22 0f       	add	r18, r18
    32a6:	33 1f       	adc	r19, r19
    32a8:	28 0f       	add	r18, r24
    32aa:	39 1f       	adc	r19, r25
    32ac:	44 27       	eor	r20, r20
    32ae:	37 fd       	sbrc	r19, 7
    32b0:	40 95       	com	r20
    32b2:	54 2f       	mov	r21, r20
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
	}		

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed long int)((*pwm_right) << 3);
    32b4:	b8 01       	movw	r22, r16
    32b6:	66 0f       	add	r22, r22
    32b8:	77 1f       	adc	r23, r23
    32ba:	66 0f       	add	r22, r22
    32bc:	77 1f       	adc	r23, r23
    32be:	66 0f       	add	r22, r22
    32c0:	77 1f       	adc	r23, r23
    32c2:	88 27       	eor	r24, r24
    32c4:	77 fd       	sbrc	r23, 7
    32c6:	80 95       	com	r24
    32c8:	98 2f       	mov	r25, r24
	pwm_right_speed_controller += (signed long int)(delta_right_speed_current*P_HORIZONTAL);
    32ca:	26 0f       	add	r18, r22
    32cc:	37 1f       	adc	r19, r23
    32ce:	48 1f       	adc	r20, r24
    32d0:	59 1f       	adc	r21, r25
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
    32d2:	ac 1b       	sub	r26, r28
    32d4:	bd 0b       	sbc	r27, r29
    32d6:	cd 01       	movw	r24, r26
    32d8:	88 0f       	add	r24, r24
    32da:	99 1f       	adc	r25, r25
    32dc:	8a 0f       	add	r24, r26
    32de:	9b 1f       	adc	r25, r27
    32e0:	aa 27       	eor	r26, r26
    32e2:	97 fd       	sbrc	r25, 7
    32e4:	a0 95       	com	r26
    32e6:	ba 2f       	mov	r27, r26
    32e8:	28 0f       	add	r18, r24
    32ea:	39 1f       	adc	r19, r25
    32ec:	4a 1f       	adc	r20, r26
    32ee:	5b 1f       	adc	r21, r27
	pwm_right_speed_controller += (signed long int)(delta_right_speed_sum*I_HORIZONTAL);
    32f0:	2c 0d       	add	r18, r12
    32f2:	3d 1d       	adc	r19, r13
    32f4:	4e 1d       	adc	r20, r14
    32f6:	5f 1d       	adc	r21, r15
    32f8:	20 93 01 03 	sts	0x0301, r18
    32fc:	30 93 02 03 	sts	0x0302, r19
    3300:	40 93 03 03 	sts	0x0303, r20
    3304:	50 93 04 03 	sts	0x0304, r21

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    3308:	57 fd       	sbrc	r21, 7
    330a:	7a c0       	rjmp	.+244    	; 0x3400 <start_horizontal_speed_control_right+0x1f2>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    330c:	12 16       	cp	r1, r18
    330e:	13 06       	cpc	r1, r19
    3310:	14 06       	cpc	r1, r20
    3312:	15 06       	cpc	r1, r21
    3314:	0c f0       	brlt	.+2      	; 0x3318 <start_horizontal_speed_control_right+0x10a>
    3316:	81 c0       	rjmp	.+258    	; 0x341a <start_horizontal_speed_control_right+0x20c>
    3318:	17 fd       	sbrc	r17, 7
    331a:	ad c0       	rjmp	.+346    	; 0x3476 <start_horizontal_speed_control_right+0x268>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    331c:	21 3c       	cpi	r18, 0xC1	; 193
    331e:	8d e5       	ldi	r24, 0x5D	; 93
    3320:	38 07       	cpc	r19, r24
    3322:	80 e0       	ldi	r24, 0x00	; 0
    3324:	48 07       	cpc	r20, r24
    3326:	80 e0       	ldi	r24, 0x00	; 0
    3328:	58 07       	cpc	r21, r24
    332a:	0c f4       	brge	.+2      	; 0x332e <start_horizontal_speed_control_right+0x120>
    332c:	76 c0       	rjmp	.+236    	; 0x341a <start_horizontal_speed_control_right+0x20c>
    332e:	80 ec       	ldi	r24, 0xC0	; 192
    3330:	9d e5       	ldi	r25, 0x5D	; 93
    3332:	a0 e0       	ldi	r26, 0x00	; 0
    3334:	b0 e0       	ldi	r27, 0x00	; 0
    3336:	80 93 01 03 	sts	0x0301, r24
    333a:	90 93 02 03 	sts	0x0302, r25
    333e:	a0 93 03 03 	sts	0x0303, r26
    3342:	b0 93 04 03 	sts	0x0304, r27
    3346:	2c ed       	ldi	r18, 0xDC	; 220
    3348:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = (signed int)(pwm_right_speed_controller>>4);
    334a:	31 83       	std	Z+1, r19	; 0x01
    334c:	20 83       	st	Z, r18

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
    334e:	80 91 e9 02 	lds	r24, 0x02E9
    3352:	90 91 ea 02 	lds	r25, 0x02EA
    3356:	18 16       	cp	r1, r24
    3358:	19 06       	cpc	r1, r25
    335a:	0c f0       	brlt	.+2      	; 0x335e <start_horizontal_speed_control_right+0x150>
    335c:	87 c0       	rjmp	.+270    	; 0x346c <start_horizontal_speed_control_right+0x25e>
		*pwm_right += 1;
    335e:	2f 5f       	subi	r18, 0xFF	; 255
    3360:	3f 4f       	sbci	r19, 0xFF	; 255
    3362:	31 83       	std	Z+1, r19	; 0x01
    3364:	20 83       	st	Z, r18
	} else {
		*pwm_right -= 1;
	}

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
    3366:	12 16       	cp	r1, r18
    3368:	13 06       	cpc	r1, r19
    336a:	0c f0       	brlt	.+2      	; 0x336e <start_horizontal_speed_control_right+0x160>
    336c:	6d c0       	rjmp	.+218    	; 0x3448 <start_horizontal_speed_control_right+0x23a>
		*pwm_right += 30;
    336e:	22 5e       	subi	r18, 0xE2	; 226
    3370:	3f 4f       	sbci	r19, 0xFF	; 255
    3372:	31 83       	std	Z+1, r19	; 0x01
    3374:	20 83       	st	Z, r18
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    3376:	82 e0       	ldi	r24, 0x02	; 2
    3378:	21 30       	cpi	r18, 0x01	; 1
    337a:	38 07       	cpc	r19, r24
    337c:	0c f4       	brge	.+2      	; 0x3380 <start_horizontal_speed_control_right+0x172>
    337e:	6c c0       	rjmp	.+216    	; 0x3458 <start_horizontal_speed_control_right+0x24a>
    3380:	80 e0       	ldi	r24, 0x00	; 0
    3382:	92 e0       	ldi	r25, 0x02	; 2
    3384:	91 83       	std	Z+1, r25	; 0x01
    3386:	80 83       	st	Z, r24
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    3388:	df 91       	pop	r29
    338a:	cf 91       	pop	r28
    338c:	1f 91       	pop	r17
    338e:	0f 91       	pop	r16
    3390:	ff 90       	pop	r15
    3392:	ef 90       	pop	r14
    3394:	df 90       	pop	r13
    3396:	cf 90       	pop	r12
    3398:	08 95       	ret
void start_horizontal_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    339a:	10 92 0c 03 	sts	0x030C, r1
    339e:	10 92 0b 03 	sts	0x030B, r1
		delta_right_speed_current = 0;
    33a2:	10 92 bf 08 	sts	0x08BF, r1
    33a6:	10 92 be 08 	sts	0x08BE, r1
		delta_right_speed_prev = 0;
    33aa:	10 92 e8 07 	sts	0x07E8, r1
    33ae:	10 92 e7 07 	sts	0x07E7, r1
		return;
    33b2:	ea cf       	rjmp	.-44     	; 0x3388 <start_horizontal_speed_control_right+0x17a>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    33b4:	80 ec       	ldi	r24, 0xC0	; 192
    33b6:	c8 16       	cp	r12, r24
    33b8:	89 ef       	ldi	r24, 0xF9	; 249
    33ba:	d8 06       	cpc	r13, r24
    33bc:	d4 f4       	brge	.+52     	; 0x33f2 <start_horizontal_speed_control_right+0x1e4>
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
    33be:	80 ec       	ldi	r24, 0xC0	; 192
    33c0:	99 ef       	ldi	r25, 0xF9	; 249
    33c2:	90 93 0c 03 	sts	0x030C, r25
    33c6:	80 93 0b 03 	sts	0x030B, r24
    33ca:	60 e8       	ldi	r22, 0x80	; 128
    33cc:	c6 2e       	mov	r12, r22
    33ce:	63 ef       	ldi	r22, 0xF3	; 243
    33d0:	d6 2e       	mov	r13, r22
    33d2:	6f ef       	ldi	r22, 0xFF	; 255
    33d4:	e6 2e       	mov	r14, r22
    33d6:	6f ef       	ldi	r22, 0xFF	; 255
    33d8:	f6 2e       	mov	r15, r22
    33da:	5a cf       	rjmp	.-332    	; 0x3290 <start_horizontal_speed_control_right+0x82>
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    33dc:	a0 91 f3 02 	lds	r26, 0x02F3
    33e0:	b0 91 f4 02 	lds	r27, 0x02F4
    33e4:	a8 0f       	add	r26, r24
    33e6:	b9 1f       	adc	r27, r25
    33e8:	b0 93 bf 08 	sts	0x08BF, r27
    33ec:	a0 93 be 08 	sts	0x08BE, r26
    33f0:	33 cf       	rjmp	.-410    	; 0x3258 <start_horizontal_speed_control_right+0x4a>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    33f2:	cc 0c       	add	r12, r12
    33f4:	dd 1c       	adc	r13, r13
    33f6:	ee 24       	eor	r14, r14
    33f8:	d7 fc       	sbrc	r13, 7
    33fa:	e0 94       	com	r14
    33fc:	fe 2c       	mov	r15, r14
    33fe:	48 cf       	rjmp	.-368    	; 0x3290 <start_horizontal_speed_control_right+0x82>
	pwm_right_speed_controller += (signed long int)(delta_right_speed_current*P_HORIZONTAL);
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
	pwm_right_speed_controller += (signed long int)(delta_right_speed_sum*I_HORIZONTAL);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    3400:	17 fd       	sbrc	r17, 7
    3402:	0b c0       	rjmp	.+22     	; 0x341a <start_horizontal_speed_control_right+0x20c>
		pwm_right_speed_controller = 0;
    3404:	10 92 01 03 	sts	0x0301, r1
    3408:	10 92 02 03 	sts	0x0302, r1
    340c:	10 92 03 03 	sts	0x0303, r1
    3410:	10 92 04 03 	sts	0x0304, r1
    3414:	20 e0       	ldi	r18, 0x00	; 0
    3416:	30 e0       	ldi	r19, 0x00	; 0
    3418:	a9 01       	movw	r20, r18
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    341a:	20 34       	cpi	r18, 0x40	; 64
    341c:	82 ea       	ldi	r24, 0xA2	; 162
    341e:	38 07       	cpc	r19, r24
    3420:	8f ef       	ldi	r24, 0xFF	; 255
    3422:	48 07       	cpc	r20, r24
    3424:	8f ef       	ldi	r24, 0xFF	; 255
    3426:	58 07       	cpc	r21, r24
    3428:	8c f5       	brge	.+98     	; 0x348c <start_horizontal_speed_control_right+0x27e>
    342a:	80 e4       	ldi	r24, 0x40	; 64
    342c:	92 ea       	ldi	r25, 0xA2	; 162
    342e:	af ef       	ldi	r26, 0xFF	; 255
    3430:	bf ef       	ldi	r27, 0xFF	; 255
    3432:	80 93 01 03 	sts	0x0301, r24
    3436:	90 93 02 03 	sts	0x0302, r25
    343a:	a0 93 03 03 	sts	0x0303, r26
    343e:	b0 93 04 03 	sts	0x0304, r27
    3442:	24 e2       	ldi	r18, 0x24	; 36
    3444:	3a ef       	ldi	r19, 0xFA	; 250
    3446:	81 cf       	rjmp	.-254    	; 0x334a <start_horizontal_speed_control_right+0x13c>
	}

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
		*pwm_right += 30;
	} else if(*pwm_right < 0) {
    3448:	21 15       	cp	r18, r1
    344a:	31 05       	cpc	r19, r1
    344c:	09 f4       	brne	.+2      	; 0x3450 <start_horizontal_speed_control_right+0x242>
    344e:	9c cf       	rjmp	.-200    	; 0x3388 <start_horizontal_speed_control_right+0x17a>
		*pwm_right -= 30;
    3450:	2e 51       	subi	r18, 0x1E	; 30
    3452:	30 40       	sbci	r19, 0x00	; 0
    3454:	31 83       	std	Z+1, r19	; 0x01
    3456:	20 83       	st	Z, r18
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    3458:	8e ef       	ldi	r24, 0xFE	; 254
    345a:	20 30       	cpi	r18, 0x00	; 0
    345c:	38 07       	cpc	r19, r24
    345e:	0c f0       	brlt	.+2      	; 0x3462 <start_horizontal_speed_control_right+0x254>
    3460:	93 cf       	rjmp	.-218    	; 0x3388 <start_horizontal_speed_control_right+0x17a>
    3462:	80 e0       	ldi	r24, 0x00	; 0
    3464:	9e ef       	ldi	r25, 0xFE	; 254
    3466:	91 83       	std	Z+1, r25	; 0x01
    3468:	80 83       	st	Z, r24
    346a:	8e cf       	rjmp	.-228    	; 0x3388 <start_horizontal_speed_control_right+0x17a>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
		*pwm_right += 1;
	} else {
		*pwm_right -= 1;
    346c:	21 50       	subi	r18, 0x01	; 1
    346e:	30 40       	sbci	r19, 0x00	; 0
    3470:	31 83       	std	Z+1, r19	; 0x01
    3472:	20 83       	st	Z, r18
    3474:	78 cf       	rjmp	.-272    	; 0x3366 <start_horizontal_speed_control_right+0x158>
	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    3476:	10 92 01 03 	sts	0x0301, r1
    347a:	10 92 02 03 	sts	0x0302, r1
    347e:	10 92 03 03 	sts	0x0303, r1
    3482:	10 92 04 03 	sts	0x0304, r1
    3486:	20 e0       	ldi	r18, 0x00	; 0
    3488:	30 e0       	ldi	r19, 0x00	; 0
    348a:	a9 01       	movw	r20, r18
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    348c:	14 e0       	ldi	r17, 0x04	; 4
    348e:	55 95       	asr	r21
    3490:	47 95       	ror	r20
    3492:	37 95       	ror	r19
    3494:	27 95       	ror	r18
    3496:	1a 95       	dec	r17
    3498:	d1 f7       	brne	.-12     	; 0x348e <start_horizontal_speed_control_right+0x280>
    349a:	57 cf       	rjmp	.-338    	; 0x334a <start_horizontal_speed_control_right+0x13c>

0000349c <start_horizontal_speed_control_left>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_left(signed int *pwm_left) {
    349c:	cf 92       	push	r12
    349e:	df 92       	push	r13
    34a0:	ef 92       	push	r14
    34a2:	ff 92       	push	r15
    34a4:	0f 93       	push	r16
    34a6:	1f 93       	push	r17
    34a8:	cf 93       	push	r28
    34aa:	df 93       	push	r29
    34ac:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
    34ae:	80 81       	ld	r24, Z
    34b0:	91 81       	ldd	r25, Z+1	; 0x01
    34b2:	00 97       	sbiw	r24, 0x00	; 0
    34b4:	09 f4       	brne	.+2      	; 0x34b8 <start_horizontal_speed_control_left+0x1c>
    34b6:	b8 c0       	rjmp	.+368    	; 0x3628 <start_horizontal_speed_control_left+0x18c>
		delta_left_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    34b8:	c0 91 24 05 	lds	r28, 0x0524
    34bc:	d0 91 25 05 	lds	r29, 0x0525
    34c0:	d0 93 b0 08 	sts	0x08B0, r29
    34c4:	c0 93 af 08 	sts	0x08AF, r28
	if(*pwm_left >= 0) {
    34c8:	80 81       	ld	r24, Z
    34ca:	91 81       	ldd	r25, Z+1	; 0x01
    34cc:	97 fd       	sbrc	r25, 7
    34ce:	cd c0       	rjmp	.+410    	; 0x366a <start_horizontal_speed_control_left+0x1ce>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    34d0:	20 91 f1 02 	lds	r18, 0x02F1
    34d4:	30 91 f2 02 	lds	r19, 0x02F2
    34d8:	dc 01       	movw	r26, r24
    34da:	a2 1b       	sub	r26, r18
    34dc:	b3 0b       	sbc	r27, r19
    34de:	b0 93 25 05 	sts	0x0525, r27
    34e2:	a0 93 24 05 	sts	0x0524, r26
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;
    34e6:	c0 90 09 03 	lds	r12, 0x0309
    34ea:	d0 90 0a 03 	lds	r13, 0x030A
    34ee:	ca 0e       	add	r12, r26
    34f0:	db 1e       	adc	r13, r27
    34f2:	d0 92 0a 03 	sts	0x030A, r13
    34f6:	c0 92 09 03 	sts	0x0309, r12

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
    34fa:	81 e4       	ldi	r24, 0x41	; 65
    34fc:	c8 16       	cp	r12, r24
    34fe:	86 e0       	ldi	r24, 0x06	; 6
    3500:	d8 06       	cpc	r13, r24
    3502:	0c f4       	brge	.+2      	; 0x3506 <start_horizontal_speed_control_left+0x6a>
    3504:	9e c0       	rjmp	.+316    	; 0x3642 <start_horizontal_speed_control_left+0x1a6>
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
    3506:	80 e4       	ldi	r24, 0x40	; 64
    3508:	96 e0       	ldi	r25, 0x06	; 6
    350a:	90 93 0a 03 	sts	0x030A, r25
    350e:	80 93 09 03 	sts	0x0309, r24
    3512:	10 e8       	ldi	r17, 0x80	; 128
    3514:	c1 2e       	mov	r12, r17
    3516:	1c e0       	ldi	r17, 0x0C	; 12
    3518:	d1 2e       	mov	r13, r17
    351a:	e1 2c       	mov	r14, r1
    351c:	f1 2c       	mov	r15, r1
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed long int)((*pwm_left) << 3);
    351e:	00 81       	ld	r16, Z
    3520:	11 81       	ldd	r17, Z+1	; 0x01
	pwm_left_speed_controller += (signed long int)(delta_left_speed_current*P_HORIZONTAL);
    3522:	cd 01       	movw	r24, r26
    3524:	88 0f       	add	r24, r24
    3526:	99 1f       	adc	r25, r25
    3528:	8a 0f       	add	r24, r26
    352a:	9b 1f       	adc	r25, r27
    352c:	9c 01       	movw	r18, r24
    352e:	22 0f       	add	r18, r18
    3530:	33 1f       	adc	r19, r19
    3532:	22 0f       	add	r18, r18
    3534:	33 1f       	adc	r19, r19
    3536:	28 0f       	add	r18, r24
    3538:	39 1f       	adc	r19, r25
    353a:	44 27       	eor	r20, r20
    353c:	37 fd       	sbrc	r19, 7
    353e:	40 95       	com	r20
    3540:	54 2f       	mov	r21, r20
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed long int)((*pwm_left) << 3);
    3542:	b8 01       	movw	r22, r16
    3544:	66 0f       	add	r22, r22
    3546:	77 1f       	adc	r23, r23
    3548:	66 0f       	add	r22, r22
    354a:	77 1f       	adc	r23, r23
    354c:	66 0f       	add	r22, r22
    354e:	77 1f       	adc	r23, r23
    3550:	88 27       	eor	r24, r24
    3552:	77 fd       	sbrc	r23, 7
    3554:	80 95       	com	r24
    3556:	98 2f       	mov	r25, r24
	pwm_left_speed_controller += (signed long int)(delta_left_speed_current*P_HORIZONTAL);
    3558:	26 0f       	add	r18, r22
    355a:	37 1f       	adc	r19, r23
    355c:	48 1f       	adc	r20, r24
    355e:	59 1f       	adc	r21, r25
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
    3560:	ac 1b       	sub	r26, r28
    3562:	bd 0b       	sbc	r27, r29
    3564:	cd 01       	movw	r24, r26
    3566:	88 0f       	add	r24, r24
    3568:	99 1f       	adc	r25, r25
    356a:	8a 0f       	add	r24, r26
    356c:	9b 1f       	adc	r25, r27
    356e:	aa 27       	eor	r26, r26
    3570:	97 fd       	sbrc	r25, 7
    3572:	a0 95       	com	r26
    3574:	ba 2f       	mov	r27, r26
    3576:	28 0f       	add	r18, r24
    3578:	39 1f       	adc	r19, r25
    357a:	4a 1f       	adc	r20, r26
    357c:	5b 1f       	adc	r21, r27
	pwm_left_speed_controller += (signed long int)(delta_left_speed_sum*I_HORIZONTAL);
    357e:	2c 0d       	add	r18, r12
    3580:	3d 1d       	adc	r19, r13
    3582:	4e 1d       	adc	r20, r14
    3584:	5f 1d       	adc	r21, r15
    3586:	20 93 05 03 	sts	0x0305, r18
    358a:	30 93 06 03 	sts	0x0306, r19
    358e:	40 93 07 03 	sts	0x0307, r20
    3592:	50 93 08 03 	sts	0x0308, r21

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    3596:	57 fd       	sbrc	r21, 7
    3598:	7a c0       	rjmp	.+244    	; 0x368e <start_horizontal_speed_control_left+0x1f2>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    359a:	12 16       	cp	r1, r18
    359c:	13 06       	cpc	r1, r19
    359e:	14 06       	cpc	r1, r20
    35a0:	15 06       	cpc	r1, r21
    35a2:	0c f0       	brlt	.+2      	; 0x35a6 <start_horizontal_speed_control_left+0x10a>
    35a4:	81 c0       	rjmp	.+258    	; 0x36a8 <start_horizontal_speed_control_left+0x20c>
    35a6:	17 fd       	sbrc	r17, 7
    35a8:	ad c0       	rjmp	.+346    	; 0x3704 <start_horizontal_speed_control_left+0x268>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    35aa:	21 3c       	cpi	r18, 0xC1	; 193
    35ac:	8d e5       	ldi	r24, 0x5D	; 93
    35ae:	38 07       	cpc	r19, r24
    35b0:	80 e0       	ldi	r24, 0x00	; 0
    35b2:	48 07       	cpc	r20, r24
    35b4:	80 e0       	ldi	r24, 0x00	; 0
    35b6:	58 07       	cpc	r21, r24
    35b8:	0c f4       	brge	.+2      	; 0x35bc <start_horizontal_speed_control_left+0x120>
    35ba:	76 c0       	rjmp	.+236    	; 0x36a8 <start_horizontal_speed_control_left+0x20c>
    35bc:	80 ec       	ldi	r24, 0xC0	; 192
    35be:	9d e5       	ldi	r25, 0x5D	; 93
    35c0:	a0 e0       	ldi	r26, 0x00	; 0
    35c2:	b0 e0       	ldi	r27, 0x00	; 0
    35c4:	80 93 05 03 	sts	0x0305, r24
    35c8:	90 93 06 03 	sts	0x0306, r25
    35cc:	a0 93 07 03 	sts	0x0307, r26
    35d0:	b0 93 08 03 	sts	0x0308, r27
    35d4:	2c ed       	ldi	r18, 0xDC	; 220
    35d6:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = (signed int)(pwm_left_speed_controller>>4);
    35d8:	31 83       	std	Z+1, r19	; 0x01
    35da:	20 83       	st	Z, r18

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
    35dc:	80 91 eb 02 	lds	r24, 0x02EB
    35e0:	90 91 ec 02 	lds	r25, 0x02EC
    35e4:	18 16       	cp	r1, r24
    35e6:	19 06       	cpc	r1, r25
    35e8:	0c f0       	brlt	.+2      	; 0x35ec <start_horizontal_speed_control_left+0x150>
    35ea:	87 c0       	rjmp	.+270    	; 0x36fa <start_horizontal_speed_control_left+0x25e>
		*pwm_left += 1;
    35ec:	2f 5f       	subi	r18, 0xFF	; 255
    35ee:	3f 4f       	sbci	r19, 0xFF	; 255
    35f0:	31 83       	std	Z+1, r19	; 0x01
    35f2:	20 83       	st	Z, r18
	} else {
		*pwm_left -= 1;
	}

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
    35f4:	12 16       	cp	r1, r18
    35f6:	13 06       	cpc	r1, r19
    35f8:	0c f0       	brlt	.+2      	; 0x35fc <start_horizontal_speed_control_left+0x160>
    35fa:	6d c0       	rjmp	.+218    	; 0x36d6 <start_horizontal_speed_control_left+0x23a>
		*pwm_left += 30;
    35fc:	22 5e       	subi	r18, 0xE2	; 226
    35fe:	3f 4f       	sbci	r19, 0xFF	; 255
    3600:	31 83       	std	Z+1, r19	; 0x01
    3602:	20 83       	st	Z, r18
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    3604:	82 e0       	ldi	r24, 0x02	; 2
    3606:	21 30       	cpi	r18, 0x01	; 1
    3608:	38 07       	cpc	r19, r24
    360a:	0c f4       	brge	.+2      	; 0x360e <start_horizontal_speed_control_left+0x172>
    360c:	6c c0       	rjmp	.+216    	; 0x36e6 <start_horizontal_speed_control_left+0x24a>
    360e:	80 e0       	ldi	r24, 0x00	; 0
    3610:	92 e0       	ldi	r25, 0x02	; 2
    3612:	91 83       	std	Z+1, r25	; 0x01
    3614:	80 83       	st	Z, r24
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);

}
    3616:	df 91       	pop	r29
    3618:	cf 91       	pop	r28
    361a:	1f 91       	pop	r17
    361c:	0f 91       	pop	r16
    361e:	ff 90       	pop	r15
    3620:	ef 90       	pop	r14
    3622:	df 90       	pop	r13
    3624:	cf 90       	pop	r12
    3626:	08 95       	ret
void start_horizontal_speed_control_left(signed int *pwm_left) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    3628:	10 92 0a 03 	sts	0x030A, r1
    362c:	10 92 09 03 	sts	0x0309, r1
		delta_left_speed_current = 0;
    3630:	10 92 25 05 	sts	0x0525, r1
    3634:	10 92 24 05 	sts	0x0524, r1
		delta_left_speed_prev = 0;
    3638:	10 92 b0 08 	sts	0x08B0, r1
    363c:	10 92 af 08 	sts	0x08AF, r1
		return;
    3640:	ea cf       	rjmp	.-44     	; 0x3616 <start_horizontal_speed_control_left+0x17a>
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    3642:	80 ec       	ldi	r24, 0xC0	; 192
    3644:	c8 16       	cp	r12, r24
    3646:	89 ef       	ldi	r24, 0xF9	; 249
    3648:	d8 06       	cpc	r13, r24
    364a:	d4 f4       	brge	.+52     	; 0x3680 <start_horizontal_speed_control_left+0x1e4>
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
    364c:	80 ec       	ldi	r24, 0xC0	; 192
    364e:	99 ef       	ldi	r25, 0xF9	; 249
    3650:	90 93 0a 03 	sts	0x030A, r25
    3654:	80 93 09 03 	sts	0x0309, r24
    3658:	60 e8       	ldi	r22, 0x80	; 128
    365a:	c6 2e       	mov	r12, r22
    365c:	63 ef       	ldi	r22, 0xF3	; 243
    365e:	d6 2e       	mov	r13, r22
    3660:	6f ef       	ldi	r22, 0xFF	; 255
    3662:	e6 2e       	mov	r14, r22
    3664:	6f ef       	ldi	r22, 0xFF	; 255
    3666:	f6 2e       	mov	r15, r22
    3668:	5a cf       	rjmp	.-332    	; 0x351e <start_horizontal_speed_control_left+0x82>
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    366a:	a0 91 f1 02 	lds	r26, 0x02F1
    366e:	b0 91 f2 02 	lds	r27, 0x02F2
    3672:	a8 0f       	add	r26, r24
    3674:	b9 1f       	adc	r27, r25
    3676:	b0 93 25 05 	sts	0x0525, r27
    367a:	a0 93 24 05 	sts	0x0524, r26
    367e:	33 cf       	rjmp	.-410    	; 0x34e6 <start_horizontal_speed_control_left+0x4a>
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    3680:	cc 0c       	add	r12, r12
    3682:	dd 1c       	adc	r13, r13
    3684:	ee 24       	eor	r14, r14
    3686:	d7 fc       	sbrc	r13, 7
    3688:	e0 94       	com	r14
    368a:	fe 2c       	mov	r15, r14
    368c:	48 cf       	rjmp	.-368    	; 0x351e <start_horizontal_speed_control_left+0x82>
	pwm_left_speed_controller += (signed long int)(delta_left_speed_current*P_HORIZONTAL);
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
	pwm_left_speed_controller += (signed long int)(delta_left_speed_sum*I_HORIZONTAL);

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    368e:	17 fd       	sbrc	r17, 7
    3690:	0b c0       	rjmp	.+22     	; 0x36a8 <start_horizontal_speed_control_left+0x20c>
		pwm_left_speed_controller = 0;
    3692:	10 92 05 03 	sts	0x0305, r1
    3696:	10 92 06 03 	sts	0x0306, r1
    369a:	10 92 07 03 	sts	0x0307, r1
    369e:	10 92 08 03 	sts	0x0308, r1
    36a2:	20 e0       	ldi	r18, 0x00	; 0
    36a4:	30 e0       	ldi	r19, 0x00	; 0
    36a6:	a9 01       	movw	r20, r18
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    36a8:	20 34       	cpi	r18, 0x40	; 64
    36aa:	82 ea       	ldi	r24, 0xA2	; 162
    36ac:	38 07       	cpc	r19, r24
    36ae:	8f ef       	ldi	r24, 0xFF	; 255
    36b0:	48 07       	cpc	r20, r24
    36b2:	8f ef       	ldi	r24, 0xFF	; 255
    36b4:	58 07       	cpc	r21, r24
    36b6:	8c f5       	brge	.+98     	; 0x371a <start_horizontal_speed_control_left+0x27e>
    36b8:	80 e4       	ldi	r24, 0x40	; 64
    36ba:	92 ea       	ldi	r25, 0xA2	; 162
    36bc:	af ef       	ldi	r26, 0xFF	; 255
    36be:	bf ef       	ldi	r27, 0xFF	; 255
    36c0:	80 93 05 03 	sts	0x0305, r24
    36c4:	90 93 06 03 	sts	0x0306, r25
    36c8:	a0 93 07 03 	sts	0x0307, r26
    36cc:	b0 93 08 03 	sts	0x0308, r27
    36d0:	24 e2       	ldi	r18, 0x24	; 36
    36d2:	3a ef       	ldi	r19, 0xFA	; 250
    36d4:	81 cf       	rjmp	.-254    	; 0x35d8 <start_horizontal_speed_control_left+0x13c>
	}

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
		*pwm_left += 30;
	} else if(*pwm_left < 0) {
    36d6:	21 15       	cp	r18, r1
    36d8:	31 05       	cpc	r19, r1
    36da:	09 f4       	brne	.+2      	; 0x36de <start_horizontal_speed_control_left+0x242>
    36dc:	9c cf       	rjmp	.-200    	; 0x3616 <start_horizontal_speed_control_left+0x17a>
		*pwm_left -= 30;
    36de:	2e 51       	subi	r18, 0x1E	; 30
    36e0:	30 40       	sbci	r19, 0x00	; 0
    36e2:	31 83       	std	Z+1, r19	; 0x01
    36e4:	20 83       	st	Z, r18
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    36e6:	8e ef       	ldi	r24, 0xFE	; 254
    36e8:	20 30       	cpi	r18, 0x00	; 0
    36ea:	38 07       	cpc	r19, r24
    36ec:	0c f0       	brlt	.+2      	; 0x36f0 <start_horizontal_speed_control_left+0x254>
    36ee:	93 cf       	rjmp	.-218    	; 0x3616 <start_horizontal_speed_control_left+0x17a>
    36f0:	80 e0       	ldi	r24, 0x00	; 0
    36f2:	9e ef       	ldi	r25, 0xFE	; 254
    36f4:	91 83       	std	Z+1, r25	; 0x01
    36f6:	80 83       	st	Z, r24
    36f8:	8e cf       	rjmp	.-228    	; 0x3616 <start_horizontal_speed_control_left+0x17a>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
		*pwm_left += 1;
	} else {
		*pwm_left -= 1;
    36fa:	21 50       	subi	r18, 0x01	; 1
    36fc:	30 40       	sbci	r19, 0x00	; 0
    36fe:	31 83       	std	Z+1, r19	; 0x01
    3700:	20 83       	st	Z, r18
    3702:	78 cf       	rjmp	.-272    	; 0x35f4 <start_horizontal_speed_control_left+0x158>
	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    3704:	10 92 05 03 	sts	0x0305, r1
    3708:	10 92 06 03 	sts	0x0306, r1
    370c:	10 92 07 03 	sts	0x0307, r1
    3710:	10 92 08 03 	sts	0x0308, r1
    3714:	20 e0       	ldi	r18, 0x00	; 0
    3716:	30 e0       	ldi	r19, 0x00	; 0
    3718:	a9 01       	movw	r20, r18
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    371a:	04 e0       	ldi	r16, 0x04	; 4
    371c:	55 95       	asr	r21
    371e:	47 95       	ror	r20
    3720:	37 95       	ror	r19
    3722:	27 95       	ror	r18
    3724:	0a 95       	dec	r16
    3726:	d1 f7       	brne	.-12     	; 0x371c <start_horizontal_speed_control_left+0x280>
    3728:	57 cf       	rjmp	.-338    	; 0x35d8 <start_horizontal_speed_control_left+0x13c>

0000372a <initPortsIO>:
#include "ports_io.h"


void initPortsIO(void) {

	MCUCR |= (1 << PUD);	// pull-up disable for all ports
    372a:	85 b7       	in	r24, 0x35	; 53
    372c:	80 61       	ori	r24, 0x10	; 16
    372e:	85 bf       	out	0x35, r24	; 53

	DDRA = 0xFF;			// proximity pulses as output
    3730:	8f ef       	ldi	r24, 0xFF	; 255
    3732:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;			// proximity pulses turned off
    3734:	12 b8       	out	0x02, r1	; 2
	
	DDRB = 0xF7;			// pwm for led r/g/b as output; CE, MOSI, SCK, SS as output (master) 
    3736:	97 ef       	ldi	r25, 0xF7	; 247
    3738:	94 b9       	out	0x04, r25	; 4
	PORTB = 0xE0;			// r,g,b leds turned off on high state
    373a:	90 ee       	ldi	r25, 0xE0	; 224
    373c:	95 b9       	out	0x05, r25	; 5

	DDRC = 0xF0;			// selector as input; IR leds as output; sens-enable, sleep as output
    373e:	90 ef       	ldi	r25, 0xF0	; 240
    3740:	97 b9       	out	0x07, r25	; 7
	PORTC = 0xB0;			// sleep = 1 (no sleep), sense_enable=0, IR leds = 1
    3742:	90 eb       	ldi	r25, 0xB0	; 176
    3744:	98 b9       	out	0x08, r25	; 8

	DDRD = 0xFC;			// all pins to output; when usart and i2c peripherals are activated they change the pins direction accordingly
    3746:	9c ef       	ldi	r25, 0xFC	; 252
    3748:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0x03;			// default for unused pins is 0
    374a:	93 e0       	ldi	r25, 0x03	; 3
    374c:	9b b9       	out	0x0b, r25	; 11

	DDRE = 0xFF;			// all pins to output (pwm and dir for motor right as output; when usart is activated it changes the pins direction accordingly)
    374e:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    3750:	1e b8       	out	0x0e, r1	; 14

	DDRF = 0x00;			// adc channel pins as input		
    3752:	10 ba       	out	0x10, r1	; 16

	DDRG = 0xFF;			// unused pins as output
    3754:	83 bb       	out	0x13, r24	; 19
	if(hardwareRevision == HW_REV_3_0) {
    3756:	80 91 4d 04 	lds	r24, 0x044D
    375a:	88 23       	and	r24, r24
    375c:	e1 f0       	breq	.+56     	; 0x3796 <initPortsIO+0x6c>
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    375e:	81 30       	cpi	r24, 0x01	; 1
    3760:	d1 f0       	breq	.+52     	; 0x3796 <initPortsIO+0x6c>
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    3762:	82 30       	cpi	r24, 0x02	; 2
    3764:	51 f1       	breq	.+84     	; 0x37ba <initPortsIO+0x90>
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
	}	

	DDRH = 0xFF;			// all pins to output; when usart is activated it changes the pins direction accordingly
    3766:	9f ef       	ldi	r25, 0xFF	; 255
    3768:	90 93 01 01 	sts	0x0101, r25
	PORTH = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    376c:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
    3770:	9f e0       	ldi	r25, 0x0F	; 15
    3772:	90 93 04 01 	sts	0x0104, r25
	if(hardwareRevision == HW_REV_3_0) {
    3776:	88 23       	and	r24, r24
    3778:	a9 f4       	brne	.+42     	; 0x37a4 <initPortsIO+0x7a>
		PORTJ &= 0x00;		// cliff pulse turned off
    377a:	90 91 05 01 	lds	r25, 0x0105
    377e:	10 92 05 01 	sts	0x0105, r1
	if(hardwareRevision == HW_REV_3_1) {
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.1)"
	}	

	DDRK = 0x00;			// adc channel pins as input
    3782:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;			// all pins to output
    3786:	9f ef       	ldi	r25, 0xFF	; 255
    3788:	90 93 0a 01 	sts	0x010A, r25
	if(hardwareRevision == HW_REV_3_0) {
    378c:	88 23       	and	r24, r24
    378e:	29 f4       	brne	.+10     	; 0x379a <initPortsIO+0x70>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
    3790:	10 92 0b 01 	sts	0x010B, r1
    3794:	08 95       	ret
	DDRG = 0xFF;			// unused pins as output
	if(hardwareRevision == HW_REV_3_0) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
    3796:	14 ba       	out	0x14, r1	; 20
    3798:	e6 cf       	rjmp	.-52     	; 0x3766 <initPortsIO+0x3c>

	DDRL = 0xFF;			// all pins to output
	if(hardwareRevision == HW_REV_3_0) {
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
    379a:	81 30       	cpi	r24, 0x01	; 1
    379c:	c9 f3       	breq	.-14     	; 0x3790 <initPortsIO+0x66>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    379e:	82 30       	cpi	r24, 0x02	; 2
    37a0:	41 f0       	breq	.+16     	; 0x37b2 <initPortsIO+0x88>
    37a2:	08 95       	ret
	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
	if(hardwareRevision == HW_REV_3_0) {
		PORTJ &= 0x00;		// cliff pulse turned off
		//#warning "Normal logic for ground sensors (hw rev 3.0)"
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    37a4:	81 30       	cpi	r24, 0x01	; 1
    37a6:	11 f0       	breq	.+4      	; 0x37ac <initPortsIO+0x82>
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.0.1)"
	}
	if(hardwareRevision == HW_REV_3_1) {
    37a8:	82 30       	cpi	r24, 0x02	; 2
    37aa:	59 f7       	brne	.-42     	; 0x3782 <initPortsIO+0x58>
		PORTJ = 0x0F;
    37ac:	90 93 05 01 	sts	0x0105, r25
    37b0:	e8 cf       	rjmp	.-48     	; 0x3782 <initPortsIO+0x58>
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTL = 0xF7;		// pwm (unused) to 0, leds turned off on high state
    37b2:	87 ef       	ldi	r24, 0xF7	; 247
    37b4:	80 93 0b 01 	sts	0x010B, r24
    37b8:	08 95       	ret
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
    37ba:	98 e0       	ldi	r25, 0x08	; 8
    37bc:	94 bb       	out	0x14, r25	; 20
    37be:	d3 cf       	rjmp	.-90     	; 0x3766 <initPortsIO+0x3c>

000037c0 <i2c_close>:

/* I2C clock in Hz */
#define SCL_CLOCK  440000L

void i2c_close() {
	TWBR = 0x00;
    37c0:	10 92 b8 00 	sts	0x00B8, r1
	TWCR = 0x00;
    37c4:	10 92 bc 00 	sts	0x00BC, r1
}
    37c8:	08 95       	ret

000037ca <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
    sbi(PORTD, 0);
    37ca:	58 9a       	sbi	0x0b, 0	; 11
    sbi(PORTD, 1);
    37cc:	59 9a       	sbi	0x0b, 1	; 11

  TWSR = 0;                         /* no prescaler */
    37ce:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    37d2:	81 e0       	ldi	r24, 0x01	; 1
    37d4:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
    37d8:	08 95       	ret

000037da <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    37da:	94 ea       	ldi	r25, 0xA4	; 164
    37dc:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    37e0:	90 91 bc 00 	lds	r25, 0x00BC
    37e4:	97 ff       	sbrs	r25, 7
    37e6:	fc cf       	rjmp	.-8      	; 0x37e0 <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    37e8:	90 91 b9 00 	lds	r25, 0x00B9
    37ec:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    37ee:	98 30       	cpi	r25, 0x08	; 8
    37f0:	21 f0       	breq	.+8      	; 0x37fa <i2c_start+0x20>
    37f2:	90 31       	cpi	r25, 0x10	; 16
    37f4:	11 f0       	breq	.+4      	; 0x37fa <i2c_start+0x20>
		//usartTransmit(twst);
		return 1;
    37f6:	81 e0       	ldi	r24, 0x01	; 1
    37f8:	08 95       	ret
	}

	// send device address
	TWDR = address;
    37fa:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    37fe:	84 e8       	ldi	r24, 0x84	; 132
    3800:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    3804:	80 91 bc 00 	lds	r24, 0x00BC
    3808:	87 ff       	sbrs	r24, 7
    380a:	fc cf       	rjmp	.-8      	; 0x3804 <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    380c:	90 91 b9 00 	lds	r25, 0x00B9
    3810:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    3812:	98 31       	cpi	r25, 0x18	; 24
    3814:	21 f0       	breq	.+8      	; 0x381e <i2c_start+0x44>

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    3816:	81 e0       	ldi	r24, 0x01	; 1
    3818:	90 34       	cpi	r25, 0x40	; 64
    381a:	19 f0       	breq	.+6      	; 0x3822 <i2c_start+0x48>
		return 1;
	}

	return 0;

}/* i2c_start */
    381c:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    381e:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    3820:	08 95       	ret

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    3822:	80 e0       	ldi	r24, 0x00	; 0
    3824:	08 95       	ret

00003826 <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    3826:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    3828:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    382a:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    382c:	20 93 bc 00 	sts	0x00BC, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    3830:	90 91 bc 00 	lds	r25, 0x00BC
    3834:	97 ff       	sbrs	r25, 7
    3836:	fc cf       	rjmp	.-8      	; 0x3830 <i2c_start_wait+0xa>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    3838:	90 91 b9 00 	lds	r25, 0x00B9
    383c:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    383e:	98 30       	cpi	r25, 0x08	; 8
    3840:	11 f0       	breq	.+4      	; 0x3846 <i2c_start_wait+0x20>
    3842:	90 31       	cpi	r25, 0x10	; 16
    3844:	99 f7       	brne	.-26     	; 0x382c <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    3846:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    384a:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    384e:	90 91 bc 00 	lds	r25, 0x00BC
    3852:	97 ff       	sbrs	r25, 7
    3854:	fc cf       	rjmp	.-8      	; 0x384e <i2c_start_wait+0x28>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    3856:	90 91 b9 00 	lds	r25, 0x00B9
    385a:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    385c:	90 32       	cpi	r25, 0x20	; 32
    385e:	19 f0       	breq	.+6      	; 0x3866 <i2c_start_wait+0x40>
    3860:	98 35       	cpi	r25, 0x58	; 88
    3862:	09 f0       	breq	.+2      	; 0x3866 <i2c_start_wait+0x40>
    3864:	08 95       	ret
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    3866:	40 93 bc 00 	sts	0x00BC, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    386a:	90 91 bc 00 	lds	r25, 0x00BC
    386e:	94 fd       	sbrc	r25, 4
    3870:	fc cf       	rjmp	.-8      	; 0x386a <i2c_start_wait+0x44>
    3872:	dc cf       	rjmp	.-72     	; 0x382c <i2c_start_wait+0x6>

00003874 <i2c_rep_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    3874:	94 ea       	ldi	r25, 0xA4	; 164
    3876:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    387a:	90 91 bc 00 	lds	r25, 0x00BC
    387e:	97 ff       	sbrs	r25, 7
    3880:	fc cf       	rjmp	.-8      	; 0x387a <i2c_rep_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    3882:	90 91 b9 00 	lds	r25, 0x00B9
    3886:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    3888:	98 30       	cpi	r25, 0x08	; 8
    388a:	21 f0       	breq	.+8      	; 0x3894 <i2c_rep_start+0x20>
    388c:	90 31       	cpi	r25, 0x10	; 16
    388e:	11 f0       	breq	.+4      	; 0x3894 <i2c_rep_start+0x20>
		//usartTransmit(twst);
		return 1;
    3890:	81 e0       	ldi	r24, 0x01	; 1
    3892:	08 95       	ret
	}

	// send device address
	TWDR = address;
    3894:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    3898:	84 e8       	ldi	r24, 0x84	; 132
    389a:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    389e:	80 91 bc 00 	lds	r24, 0x00BC
    38a2:	87 ff       	sbrs	r24, 7
    38a4:	fc cf       	rjmp	.-8      	; 0x389e <i2c_rep_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    38a6:	90 91 b9 00 	lds	r25, 0x00B9
    38aa:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    38ac:	98 31       	cpi	r25, 0x18	; 24
    38ae:	21 f0       	breq	.+8      	; 0x38b8 <i2c_rep_start+0x44>
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    38b0:	81 e0       	ldi	r24, 0x01	; 1
    38b2:	90 34       	cpi	r25, 0x40	; 64
    38b4:	19 f0       	breq	.+6      	; 0x38bc <i2c_rep_start+0x48>
{
    return i2c_start( address );

}/* i2c_rep_start */
    38b6:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    38b8:	80 e0       	ldi	r24, 0x00	; 0
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    38ba:	08 95       	ret
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    38bc:	80 e0       	ldi	r24, 0x00	; 0
    38be:	08 95       	ret

000038c0 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    38c0:	84 e9       	ldi	r24, 0x94	; 148
    38c2:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    38c6:	80 91 bc 00 	lds	r24, 0x00BC
    38ca:	84 fd       	sbrc	r24, 4
    38cc:	fc cf       	rjmp	.-8      	; 0x38c6 <i2c_stop+0x6>

}/* i2c_stop */
    38ce:	08 95       	ret

000038d0 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    38d0:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    38d4:	84 e8       	ldi	r24, 0x84	; 132
    38d6:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    38da:	80 91 bc 00 	lds	r24, 0x00BC
    38de:	87 ff       	sbrs	r24, 7
    38e0:	fc cf       	rjmp	.-8      	; 0x38da <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    38e2:	90 91 b9 00 	lds	r25, 0x00B9
    38e6:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    38e8:	81 e0       	ldi	r24, 0x01	; 1
    38ea:	98 32       	cpi	r25, 0x28	; 40
    38ec:	09 f0       	breq	.+2      	; 0x38f0 <i2c_write+0x20>
	return 0;

}/* i2c_write */
    38ee:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
    38f0:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
    38f2:	08 95       	ret

000038f4 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    38f4:	84 ec       	ldi	r24, 0xC4	; 196
    38f6:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    38fa:	80 91 bc 00 	lds	r24, 0x00BC
    38fe:	87 ff       	sbrs	r24, 7
    3900:	fc cf       	rjmp	.-8      	; 0x38fa <i2c_readAck+0x6>

    return TWDR;
    3902:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    3906:	08 95       	ret

00003908 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    3908:	84 e8       	ldi	r24, 0x84	; 132
    390a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    390e:	80 91 bc 00 	lds	r24, 0x00BC
    3912:	87 ff       	sbrs	r24, 7
    3914:	fc cf       	rjmp	.-8      	; 0x390e <i2c_readNak+0x6>
	
    return TWDR;
    3916:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    391a:	08 95       	ret

0000391c <initUsart0>:
	// @38400 baud: 8000000/16/38400-1 = 12 => 8000000/16/13 = 38461 => 100-(38400/38461*100)=0.15% of error
	// Double speed mode:
	// @57600 baud: 8000000/8/57600-1 = 16 => 8000000/8/17 = 58823 => 100-(57600/58823*100)=2.08% of error	


	UBRR0H = 0;												// set baudrate
    391c:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 16;
    3920:	80 e1       	ldi	r24, 0x10	; 16
    3922:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0A  |= (1 << U2X0);									// enable double speed
    3926:	e0 ec       	ldi	r30, 0xC0	; 192
    3928:	f0 e0       	ldi	r31, 0x00	; 0
    392a:	80 81       	ld	r24, Z
    392c:	82 60       	ori	r24, 0x02	; 2
    392e:	80 83       	st	Z, r24
	//UCSR0A &= ~(1 << U2X0);
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);	// enable uart0 transmitter and receiver; enable rx interrupt for use with aseba
    3930:	e1 ec       	ldi	r30, 0xC1	; 193
    3932:	f0 e0       	ldi	r31, 0x00	; 0
    3934:	80 81       	ld	r24, Z
    3936:	88 69       	ori	r24, 0x98	; 152
    3938:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);					// set frame format: 8-bit data, no parity, 1 stop bit
    393a:	e2 ec       	ldi	r30, 0xC2	; 194
    393c:	f0 e0       	ldi	r31, 0x00	; 0
    393e:	80 81       	ld	r24, Z
    3940:	86 60       	ori	r24, 0x06	; 6
    3942:	80 83       	st	Z, r24



}
    3944:	08 95       	ret

00003946 <initUsart1>:

void initUsart1() {

	UBRR1H = 0;												// set baudrate
    3946:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = 16;
    394a:	80 e1       	ldi	r24, 0x10	; 16
    394c:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1A  |= (1 << U2X1);									// enable double speed
    3950:	e8 ec       	ldi	r30, 0xC8	; 200
    3952:	f0 e0       	ldi	r31, 0x00	; 0
    3954:	80 81       	ld	r24, Z
    3956:	82 60       	ori	r24, 0x02	; 2
    3958:	80 83       	st	Z, r24
	//UCSR0A &= ~(1 << U2X1);
	UCSR1B |= (1 << TXEN1) | (1 << RXEN1);					// enable uart0 transmitter and receiver
    395a:	e9 ec       	ldi	r30, 0xC9	; 201
    395c:	f0 e0       	ldi	r31, 0x00	; 0
    395e:	80 81       	ld	r24, Z
    3960:	88 61       	ori	r24, 0x18	; 24
    3962:	80 83       	st	Z, r24
	UCSR1C |= (1<<UCSZ11) | (1<<UCSZ10);					// set frame format: 8-bit data, no parity, 1 stop bit
    3964:	ea ec       	ldi	r30, 0xCA	; 202
    3966:	f0 e0       	ldi	r31, 0x00	; 0
    3968:	80 81       	ld	r24, Z
    396a:	86 60       	ori	r24, 0x06	; 6
    396c:	80 83       	st	Z, r24

}
    396e:	08 95       	ret

00003970 <closeUsart>:

void closeUsart() {

	UCSR0A = 0x00;	// clear all usart registers
    3970:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0x00;
    3974:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 0x00;
    3978:	10 92 c2 00 	sts	0x00C2, r1

}
    397c:	08 95       	ret

0000397e <usart0Transmit>:

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    397e:	90 91 c0 00 	lds	r25, 0x00C0
    3982:	95 ff       	sbrs	r25, 5
    3984:	fc cf       	rjmp	.-8      	; 0x397e <usart0Transmit>
	UDR0 = data;						// put data into buffer, sends the data
    3986:	80 93 c6 00 	sts	0x00C6, r24
	if(isBlocking) {
    398a:	66 23       	and	r22, r22
    398c:	21 f0       	breq	.+8      	; 0x3996 <usart0Transmit+0x18>
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    398e:	80 91 c0 00 	lds	r24, 0x00C0
    3992:	86 ff       	sbrs	r24, 6
    3994:	fc cf       	rjmp	.-8      	; 0x398e <usart0Transmit+0x10>
    3996:	08 95       	ret

00003998 <usart1Transmit>:
	}
}

void usart1Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR1A & (1<<UDRE1)));		// wait for empty transmit buffer
    3998:	90 91 c8 00 	lds	r25, 0x00C8
    399c:	95 ff       	sbrs	r25, 5
    399e:	fc cf       	rjmp	.-8      	; 0x3998 <usart1Transmit>
	UDR1 = data;						// put data into buffer, sends the data
    39a0:	80 93 ce 00 	sts	0x00CE, r24
	if(isBlocking) {
    39a4:	66 23       	and	r22, r22
    39a6:	21 f0       	breq	.+8      	; 0x39b0 <usart1Transmit+0x18>
		while (!(UCSR1A & (1<<TXC1)));	// wait transmission complete
    39a8:	80 91 c8 00 	lds	r24, 0x00C8
    39ac:	86 ff       	sbrs	r24, 6
    39ae:	fc cf       	rjmp	.-8      	; 0x39a8 <usart1Transmit+0x10>
    39b0:	08 95       	ret

000039b2 <usart0InputBufferEmpty>:

}

char usart0InputBufferEmpty() {

	if(UCSR0A & (1<<RXC0)) {	// something received
    39b2:	80 91 c0 00 	lds	r24, 0x00C0
		return 0;
    39b6:	80 95       	com	r24
	} else {
		return 1;
	}

}
    39b8:	88 1f       	adc	r24, r24
    39ba:	88 27       	eor	r24, r24
    39bc:	88 1f       	adc	r24, r24
    39be:	08 95       	ret

000039c0 <usart0Receive>:

unsigned char usart0Receive() {

	unsigned int i=0;

	while(usart0InputBufferEmpty()) {
    39c0:	87 e9       	ldi	r24, 0x97	; 151
    39c2:	90 e0       	ldi	r25, 0x00	; 0

}

char usart0InputBufferEmpty() {

	if(UCSR0A & (1<<RXC0)) {	// something received
    39c4:	20 91 c0 00 	lds	r18, 0x00C0
    39c8:	27 fd       	sbrc	r18, 7
    39ca:	07 c0       	rjmp	.+14     	; 0x39da <usart0Receive+0x1a>
			commError = 1;
			return 0;				// timeout
		}
	}								// wait for data to be received

	return UDR0;					// get and return received data from buffer
    39cc:	01 97       	sbiw	r24, 0x01	; 1

	unsigned int i=0;

	while(usart0InputBufferEmpty()) {
		i++;
		if(i>150) {
    39ce:	d1 f7       	brne	.-12     	; 0x39c4 <usart0Receive+0x4>
			/*
			if(UCSR0A & (1<<3)) {	// overflow flag
			}
			*/
			commError = 1;
    39d0:	81 e0       	ldi	r24, 0x01	; 1
    39d2:	80 93 1c 03 	sts	0x031C, r24
			return 0;				// timeout
    39d6:	80 e0       	ldi	r24, 0x00	; 0
    39d8:	08 95       	ret
		}
	}								// wait for data to be received

	return UDR0;					// get and return received data from buffer
    39da:	80 91 c6 00 	lds	r24, 0x00C6

}
    39de:	08 95       	ret

000039e0 <__vector_25>:
		}
	}
}
*/

ISR(USART0_RX_vect) {
    39e0:	1f 92       	push	r1
    39e2:	0f 92       	push	r0
    39e4:	0f b6       	in	r0, 0x3f	; 63
    39e6:	0f 92       	push	r0
    39e8:	0b b6       	in	r0, 0x3b	; 59
    39ea:	0f 92       	push	r0
    39ec:	11 24       	eor	r1, r1
    39ee:	2f 93       	push	r18
    39f0:	3f 93       	push	r19
    39f2:	4f 93       	push	r20
    39f4:	5f 93       	push	r21
    39f6:	6f 93       	push	r22
    39f8:	7f 93       	push	r23
    39fa:	8f 93       	push	r24
    39fc:	9f 93       	push	r25
    39fe:	af 93       	push	r26
    3a00:	bf 93       	push	r27
    3a02:	ef 93       	push	r30
    3a04:	ff 93       	push	r31

	char receivedByte = UDR0;
    3a06:	90 91 c6 00 	lds	r25, 0x00C6


	if(currentSelector==14) {
    3a0a:	80 91 4a 04 	lds	r24, 0x044A
    3a0e:	8e 30       	cpi	r24, 0x0E	; 14
    3a10:	09 f4       	brne	.+2      	; 0x3a14 <__vector_25+0x34>
    3a12:	3f c0       	rjmp	.+126    	; 0x3a92 <__vector_25+0xb2>
		if(receivedByte == 0xAA) {
			irCommSendValues = 1;
		}
	} else if(currentSelector==15) {
    3a14:	8f 30       	cpi	r24, 0x0F	; 15
    3a16:	09 f4       	brne	.+2      	; 0x3a1a <__vector_25+0x3a>
    3a18:	42 c0       	rjmp	.+132    	; 0x3a9e <__vector_25+0xbe>
			eeprom_write_byte((uint8_t*) 4093, currentOsccal); 
		}

	} else {

		if(chooseMenu) {
    3a1a:	80 91 11 02 	lds	r24, 0x0211
    3a1e:	88 23       	and	r24, r24
    3a20:	09 f5       	brne	.+66     	; 0x3a64 <__vector_25+0x84>
			chooseMenu = 0;
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
    3a22:	80 91 21 04 	lds	r24, 0x0421
    3a26:	81 30       	cpi	r24, 0x01	; 1
    3a28:	09 f4       	brne	.+2      	; 0x3a2c <__vector_25+0x4c>
    3a2a:	65 c0       	rjmp	.+202    	; 0x3af6 <__vector_25+0x116>
    3a2c:	82 30       	cpi	r24, 0x02	; 2
    3a2e:	f1 f4       	brne	.+60     	; 0x3a6c <__vector_25+0x8c>
						menuChoice = 0;
					}
					break;

				case 2:	// address writing in eeprom
					if(menuState == 0) { // receive rf address LSB:
    3a30:	40 91 23 04 	lds	r20, 0x0423
    3a34:	44 23       	and	r20, r20
    3a36:	09 f4       	brne	.+2      	; 0x3a3a <__vector_25+0x5a>
    3a38:	74 c0       	rjmp	.+232    	; 0x3b22 <__vector_25+0x142>
						rfAddress = (unsigned int)receivedByte&0x00FF;
						menuState = 1;
					} else if(menuState == 1) { // receive rf address MSB
    3a3a:	41 30       	cpi	r20, 0x01	; 1
    3a3c:	b9 f4       	brne	.+46     	; 0x3a6c <__vector_25+0x8c>
						rfAddress |= ((unsigned int)receivedByte<<8);
    3a3e:	39 2f       	mov	r19, r25
    3a40:	20 e0       	ldi	r18, 0x00	; 0
    3a42:	80 91 15 03 	lds	r24, 0x0315
    3a46:	90 91 16 03 	lds	r25, 0x0316
    3a4a:	82 2b       	or	r24, r18
    3a4c:	93 2b       	or	r25, r19
    3a4e:	90 93 16 03 	sts	0x0316, r25
    3a52:	80 93 15 03 	sts	0x0315, r24
						addressReceived = 1;
    3a56:	40 93 22 04 	sts	0x0422, r20
						menuState = 0;
    3a5a:	10 92 23 04 	sts	0x0423, r1
						chooseMenu = 1;
    3a5e:	40 93 11 02 	sts	0x0211, r20
    3a62:	04 c0       	rjmp	.+8      	; 0x3a6c <__vector_25+0x8c>
		}

	} else {

		if(chooseMenu) {
			chooseMenu = 0;
    3a64:	10 92 11 02 	sts	0x0211, r1
			menuChoice = receivedByte;
    3a68:	90 93 21 04 	sts	0x0421, r25
			}
		}

	}

}
    3a6c:	ff 91       	pop	r31
    3a6e:	ef 91       	pop	r30
    3a70:	bf 91       	pop	r27
    3a72:	af 91       	pop	r26
    3a74:	9f 91       	pop	r25
    3a76:	8f 91       	pop	r24
    3a78:	7f 91       	pop	r23
    3a7a:	6f 91       	pop	r22
    3a7c:	5f 91       	pop	r21
    3a7e:	4f 91       	pop	r20
    3a80:	3f 91       	pop	r19
    3a82:	2f 91       	pop	r18
    3a84:	0f 90       	pop	r0
    3a86:	0b be       	out	0x3b, r0	; 59
    3a88:	0f 90       	pop	r0
    3a8a:	0f be       	out	0x3f, r0	; 63
    3a8c:	0f 90       	pop	r0
    3a8e:	1f 90       	pop	r1
    3a90:	18 95       	reti

	char receivedByte = UDR0;


	if(currentSelector==14) {
		if(receivedByte == 0xAA) {
    3a92:	9a 3a       	cpi	r25, 0xAA	; 170
    3a94:	59 f7       	brne	.-42     	; 0x3a6c <__vector_25+0x8c>
			irCommSendValues = 1;
    3a96:	81 e0       	ldi	r24, 0x01	; 1
    3a98:	80 93 c7 04 	sts	0x04C7, r24
    3a9c:	e7 cf       	rjmp	.-50     	; 0x3a6c <__vector_25+0x8c>
		}
	} else if(currentSelector==15) {

		if(receivedByte == '+') {
    3a9e:	9b 32       	cpi	r25, 0x2B	; 43
    3aa0:	01 f1       	breq	.+64     	; 0x3ae2 <__vector_25+0x102>
				currentOsccal++;
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
    3aa2:	9d 32       	cpi	r25, 0x2D	; 45
    3aa4:	91 f1       	breq	.+100    	; 0x3b0a <__vector_25+0x12a>
				currentOsccal--;	
			}
			OSCCAL = currentOsccal;;
		}

		if(receivedByte == 'g') {
    3aa6:	97 36       	cpi	r25, 0x67	; 103
    3aa8:	09 f0       	breq	.+2      	; 0x3aac <__vector_25+0xcc>
    3aaa:	43 c0       	rjmp	.+134    	; 0x3b32 <__vector_25+0x152>
			usart0Transmit(irCommand,1);
    3aac:	90 91 25 04 	lds	r25, 0x0425

}

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    3ab0:	80 91 c0 00 	lds	r24, 0x00C0
    3ab4:	85 ff       	sbrs	r24, 5
    3ab6:	fc cf       	rjmp	.-8      	; 0x3ab0 <__vector_25+0xd0>
	UDR0 = data;						// put data into buffer, sends the data
    3ab8:	90 93 c6 00 	sts	0x00C6, r25
	if(isBlocking) {
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    3abc:	80 91 c0 00 	lds	r24, 0x00C0
    3ac0:	86 ff       	sbrs	r24, 6
    3ac2:	fc cf       	rjmp	.-8      	; 0x3abc <__vector_25+0xdc>
			OSCCAL = currentOsccal;;
		}

		if(receivedByte == 'g') {
			usart0Transmit(irCommand,1);
			currentOsccal = OSCCAL;
    3ac4:	90 91 66 00 	lds	r25, 0x0066
    3ac8:	90 93 0b 05 	sts	0x050B, r25

}

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    3acc:	80 91 c0 00 	lds	r24, 0x00C0
    3ad0:	85 ff       	sbrs	r24, 5
    3ad2:	fc cf       	rjmp	.-8      	; 0x3acc <__vector_25+0xec>
	UDR0 = data;						// put data into buffer, sends the data
    3ad4:	90 93 c6 00 	sts	0x00C6, r25
	if(isBlocking) {
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    3ad8:	80 91 c0 00 	lds	r24, 0x00C0
    3adc:	86 ff       	sbrs	r24, 6
    3ade:	fc cf       	rjmp	.-8      	; 0x3ad8 <__vector_25+0xf8>
    3ae0:	c5 cf       	rjmp	.-118    	; 0x3a6c <__vector_25+0x8c>
			irCommSendValues = 1;
		}
	} else if(currentSelector==15) {

		if(receivedByte == '+') {
			if(currentOsccal<255) {
    3ae2:	80 91 0b 05 	lds	r24, 0x050B
    3ae6:	8f 3f       	cpi	r24, 0xFF	; 255
    3ae8:	d1 f0       	breq	.+52     	; 0x3b1e <__vector_25+0x13e>
				currentOsccal++;
    3aea:	8f 5f       	subi	r24, 0xFF	; 255
    3aec:	80 93 0b 05 	sts	0x050B, r24

		if(receivedByte == '-') {
			if(currentOsccal>0) {
				currentOsccal--;	
			}
			OSCCAL = currentOsccal;;
    3af0:	80 93 66 00 	sts	0x0066, r24
    3af4:	bb cf       	rjmp	.-138    	; 0x3a6c <__vector_25+0x8c>
			chooseMenu = 0;
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
				case 1: // send sensors data and activate actuators
					if(receivedByte == 0xAA) {
    3af6:	9a 3a       	cpi	r25, 0xAA	; 170
    3af8:	31 f1       	breq	.+76     	; 0x3b46 <__vector_25+0x166>
						getDataNow = 1;
					} else if(receivedByte == 0x55) {
    3afa:	95 35       	cpi	r25, 0x55	; 85
    3afc:	09 f0       	breq	.+2      	; 0x3b00 <__vector_25+0x120>
    3afe:	b6 cf       	rjmp	.-148    	; 0x3a6c <__vector_25+0x8c>
						chooseMenu = 1;
    3b00:	80 93 11 02 	sts	0x0211, r24
						menuChoice = 0;
    3b04:	10 92 21 04 	sts	0x0421, r1
    3b08:	b1 cf       	rjmp	.-158    	; 0x3a6c <__vector_25+0x8c>
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
			if(currentOsccal>0) {
    3b0a:	80 91 0b 05 	lds	r24, 0x050B
    3b0e:	88 23       	and	r24, r24
    3b10:	21 f0       	breq	.+8      	; 0x3b1a <__vector_25+0x13a>
				currentOsccal--;	
    3b12:	81 50       	subi	r24, 0x01	; 1
    3b14:	80 93 0b 05 	sts	0x050B, r24
    3b18:	eb cf       	rjmp	.-42     	; 0x3af0 <__vector_25+0x110>
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
			if(currentOsccal>0) {
    3b1a:	80 e0       	ldi	r24, 0x00	; 0
    3b1c:	e9 cf       	rjmp	.-46     	; 0x3af0 <__vector_25+0x110>
			irCommSendValues = 1;
		}
	} else if(currentSelector==15) {

		if(receivedByte == '+') {
			if(currentOsccal<255) {
    3b1e:	8f ef       	ldi	r24, 0xFF	; 255
    3b20:	e7 cf       	rjmp	.-50     	; 0x3af0 <__vector_25+0x110>
					}
					break;

				case 2:	// address writing in eeprom
					if(menuState == 0) { // receive rf address LSB:
						rfAddress = (unsigned int)receivedByte&0x00FF;
    3b22:	90 93 15 03 	sts	0x0315, r25
    3b26:	10 92 16 03 	sts	0x0316, r1
						menuState = 1;
    3b2a:	81 e0       	ldi	r24, 0x01	; 1
    3b2c:	80 93 23 04 	sts	0x0423, r24
    3b30:	9d cf       	rjmp	.-198    	; 0x3a6c <__vector_25+0x8c>
			usart0Transmit(irCommand,1);
			currentOsccal = OSCCAL;
			usart0Transmit(currentOsccal,1);
		}

		if(receivedByte == 's') {
    3b32:	93 37       	cpi	r25, 0x73	; 115
    3b34:	09 f0       	breq	.+2      	; 0x3b38 <__vector_25+0x158>
    3b36:	9a cf       	rjmp	.-204    	; 0x3a6c <__vector_25+0x8c>
			eeprom_write_byte((uint8_t*) 4093, currentOsccal); 
    3b38:	8d ef       	ldi	r24, 0xFD	; 253
    3b3a:	9f e0       	ldi	r25, 0x0F	; 15
    3b3c:	60 91 0b 05 	lds	r22, 0x050B
    3b40:	0e 94 bc 4c 	call	0x9978	; 0x9978 <__eewr_byte_m2560>
    3b44:	93 cf       	rjmp	.-218    	; 0x3a6c <__vector_25+0x8c>
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
				case 1: // send sensors data and activate actuators
					if(receivedByte == 0xAA) {
						getDataNow = 1;
    3b46:	80 93 24 04 	sts	0x0424, r24
    3b4a:	90 cf       	rjmp	.-224    	; 0x3a6c <__vector_25+0x8c>

00003b4c <getSelector>:

#include "utility.h"

unsigned char getSelector() {
   return (SEL0) + 2*(SEL1) + 4*(SEL2) + 8*(SEL3);
    3b4c:	86 b1       	in	r24, 0x06	; 6
    3b4e:	66 b1       	in	r22, 0x06	; 6
    3b50:	26 b1       	in	r18, 0x06	; 6
    3b52:	46 b1       	in	r20, 0x06	; 6
    3b54:	30 e0       	ldi	r19, 0x00	; 0
    3b56:	28 70       	andi	r18, 0x08	; 8
    3b58:	30 70       	andi	r19, 0x00	; 0
    3b5a:	35 95       	asr	r19
    3b5c:	27 95       	ror	r18
    3b5e:	35 95       	asr	r19
    3b60:	27 95       	ror	r18
    3b62:	35 95       	asr	r19
    3b64:	27 95       	ror	r18
    3b66:	22 0f       	add	r18, r18
    3b68:	33 1f       	adc	r19, r19
    3b6a:	70 e0       	ldi	r23, 0x00	; 0
    3b6c:	64 70       	andi	r22, 0x04	; 4
    3b6e:	70 70       	andi	r23, 0x00	; 0
    3b70:	75 95       	asr	r23
    3b72:	67 95       	ror	r22
    3b74:	75 95       	asr	r23
    3b76:	67 95       	ror	r22
    3b78:	26 0f       	add	r18, r22
    3b7a:	37 1f       	adc	r19, r23
    3b7c:	22 0f       	add	r18, r18
    3b7e:	33 1f       	adc	r19, r19
    3b80:	50 e0       	ldi	r21, 0x00	; 0
    3b82:	42 70       	andi	r20, 0x02	; 2
    3b84:	50 70       	andi	r21, 0x00	; 0
    3b86:	55 95       	asr	r21
    3b88:	47 95       	ror	r20
    3b8a:	24 0f       	add	r18, r20
    3b8c:	35 1f       	adc	r19, r21
    3b8e:	22 0f       	add	r18, r18
    3b90:	81 70       	andi	r24, 0x01	; 1
}
    3b92:	82 0f       	add	r24, r18
    3b94:	08 95       	ret

00003b96 <initPeripherals>:
    

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
    3b96:	f8 94       	cli
	
	// reset all registers touched by arduino in the "init()" functions (wiring.c) not used by the robot
	TCCR0A = 0;
    3b98:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
    3b9a:	15 bc       	out	0x25, r1	; 37
	TIMSK0 = 0;
    3b9c:	10 92 6e 00 	sts	0x006E, r1
	TCCR5A = 0;
    3ba0:	10 92 20 01 	sts	0x0120, r1
	TCCR5B = 0;
    3ba4:	10 92 21 01 	sts	0x0121, r1

	rfAddress = eeprom_read_word((uint16_t*)4094);
    3ba8:	8e ef       	ldi	r24, 0xFE	; 254
    3baa:	9f e0       	ldi	r25, 0x0F	; 15
    3bac:	0e 94 8e 4c 	call	0x991c	; 0x991c <__eerd_word_m2560>
    3bb0:	90 93 16 03 	sts	0x0316, r25
    3bb4:	80 93 15 03 	sts	0x0315, r24
	currentOsccal = eeprom_read_byte((uint8_t*)4093);
    3bb8:	8d ef       	ldi	r24, 0xFD	; 253
    3bba:	9f e0       	ldi	r25, 0x0F	; 15
    3bbc:	0e 94 86 4c 	call	0x990c	; 0x990c <__eerd_byte_m2560>
    3bc0:	80 93 0b 05 	sts	0x050B, r24
	if(currentOsccal!=0 && currentOsccal!=255) { // clear memory
    3bc4:	98 2f       	mov	r25, r24
    3bc6:	91 50       	subi	r25, 0x01	; 1
    3bc8:	9e 3f       	cpi	r25, 0xFE	; 254
    3bca:	e8 f5       	brcc	.+122    	; 0x3c46 <initPeripherals+0xb0>
		OSCCAL = currentOsccal;
    3bcc:	80 93 66 00 	sts	0x0066, r24
		currentOsccal = OSCCAL;
		eeprom_write_byte((uint8_t*) 4093, currentOsccal);
	}
	
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
    3bd0:	80 91 15 03 	lds	r24, 0x0315
    3bd4:	90 91 16 03 	lds	r25, 0x0316
    3bd8:	9c 01       	movw	r18, r24
    3bda:	21 58       	subi	r18, 0x81	; 129
    3bdc:	3c 40       	sbci	r19, 0x0C	; 12
    3bde:	23 30       	cpi	r18, 0x03	; 3
    3be0:	31 05       	cpc	r19, r1
    3be2:	08 f5       	brcc	.+66     	; 0x3c26 <initPeripherals+0x90>
		hardwareRevision = HW_REV_3_0;
    3be4:	10 92 4d 04 	sts	0x044D, r1

	if(rfAddress > 3203) {
		hardwareRevision = HW_REV_3_1;
	}

	initCalibration();
    3be8:	0e 94 ef 36 	call	0x6dde	; 0x6dde <initCalibration>
	initPortsIO();
    3bec:	0e 94 95 1b 	call	0x372a	; 0x372a <initPortsIO>
	initAdc();
    3bf0:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <initAdc>
	initMotors();
    3bf4:	0e 94 33 25 	call	0x4a66	; 0x4a66 <initMotors>
	initRGBleds();
    3bf8:	0e 94 ca 3a 	call	0x7594	; 0x7594 <initRGBleds>
	initSPI();
    3bfc:	0e 94 86 0c 	call	0x190c	; 0x190c <initSPI>
	mirf_init();
    3c00:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <mirf_init>
	if(spiCommError==0) {
    3c04:	80 91 18 03 	lds	r24, 0x0318
    3c08:	88 23       	and	r24, r24
    3c0a:	29 f4       	brne	.+10     	; 0x3c16 <initPeripherals+0x80>
		rfFlags |= 1;
    3c0c:	80 91 17 03 	lds	r24, 0x0317
    3c10:	81 60       	ori	r24, 0x01	; 1
    3c12:	80 93 17 03 	sts	0x0317, r24
	}
	initUsart0();
    3c16:	0e 94 8e 1c 	call	0x391c	; 0x391c <initUsart0>
	initAccelerometer();
    3c1a:	0e 94 12 3c 	call	0x7824	; 0x7824 <initAccelerometer>
	init_ir_remote_control();
    3c1e:	0e 94 25 12 	call	0x244a	; 0x244a <init_ir_remote_control>

	sei();			// enable global interrupts
    3c22:	78 94       	sei

	
}
    3c24:	08 95       	ret
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
		hardwareRevision = HW_REV_3_0;
	}

	if(rfAddress == 3200) {
    3c26:	2c e0       	ldi	r18, 0x0C	; 12
    3c28:	80 38       	cpi	r24, 0x80	; 128
    3c2a:	92 07       	cpc	r25, r18
    3c2c:	21 f4       	brne	.+8      	; 0x3c36 <initPeripherals+0xa0>
		hardwareRevision = HW_REV_3_0_1;
    3c2e:	81 e0       	ldi	r24, 0x01	; 1
    3c30:	80 93 4d 04 	sts	0x044D, r24
    3c34:	d9 cf       	rjmp	.-78     	; 0x3be8 <initPeripherals+0x52>
	}

	if(rfAddress > 3203) {
    3c36:	2c e0       	ldi	r18, 0x0C	; 12
    3c38:	84 38       	cpi	r24, 0x84	; 132
    3c3a:	92 07       	cpc	r25, r18
    3c3c:	a8 f2       	brcs	.-86     	; 0x3be8 <initPeripherals+0x52>
		hardwareRevision = HW_REV_3_1;
    3c3e:	82 e0       	ldi	r24, 0x02	; 2
    3c40:	80 93 4d 04 	sts	0x044D, r24
    3c44:	d1 cf       	rjmp	.-94     	; 0x3be8 <initPeripherals+0x52>
	rfAddress = eeprom_read_word((uint16_t*)4094);
	currentOsccal = eeprom_read_byte((uint8_t*)4093);
	if(currentOsccal!=0 && currentOsccal!=255) { // clear memory
		OSCCAL = currentOsccal;
	} else {
		currentOsccal = OSCCAL;
    3c46:	60 91 66 00 	lds	r22, 0x0066
    3c4a:	60 93 0b 05 	sts	0x050B, r22
		eeprom_write_byte((uint8_t*) 4093, currentOsccal);
    3c4e:	8d ef       	ldi	r24, 0xFD	; 253
    3c50:	9f e0       	ldi	r25, 0x0F	; 15
    3c52:	0e 94 bc 4c 	call	0x9978	; 0x9978 <__eewr_byte_m2560>
    3c56:	bc cf       	rjmp	.-136    	; 0x3bd0 <initPeripherals+0x3a>

00003c58 <__vector_15>:

	
}

// used only for wake-up from sleep
ISR(TIMER2_OVF_vect) {
    3c58:	1f 92       	push	r1
    3c5a:	0f 92       	push	r0
    3c5c:	0f b6       	in	r0, 0x3f	; 63
    3c5e:	0f 92       	push	r0
    3c60:	11 24       	eor	r1, r1

}
    3c62:	0f 90       	pop	r0
    3c64:	0f be       	out	0x3f, r0	; 63
    3c66:	0f 90       	pop	r0
    3c68:	1f 90       	pop	r1
    3c6a:	18 95       	reti

00003c6c <sleep>:

void sleep(unsigned char seconds) {
    3c6c:	cf 93       	push	r28
    3c6e:	df 93       	push	r29

	unsigned int pause = seconds*30;	// the timer2 used to wake-up from sleep is configured to run at 30 Hz
    3c70:	9e e1       	ldi	r25, 0x1E	; 30
    3c72:	89 9f       	mul	r24, r25
    3c74:	e0 01       	movw	r28, r0
    3c76:	11 24       	eor	r1, r1

	// disable external interrupt because it uses the timer2 to interpret the tv
	// remote signal and the timer2 must be free in order to be used for wake-up from sleep
	PCICR &= ~(1 << PCIE1);			// disable interrupt from falling edge
    3c78:	80 91 68 00 	lds	r24, 0x0068
    3c7c:	8d 7f       	andi	r24, 0xFD	; 253
    3c7e:	80 93 68 00 	sts	0x0068, r24
	PCMSK1 &= ~(1 << PCINT15);		
    3c82:	80 91 6c 00 	lds	r24, 0x006C
    3c86:	8f 77       	andi	r24, 0x7F	; 127
    3c88:	80 93 6c 00 	sts	0x006C, r24
	PCIFR |= (1 << PCIF1);			// clear interrupt flag
    3c8c:	d9 9a       	sbi	0x1b, 1	; 27

	// disable adc
	ADCSRA = 0x00;					// disable interrupt and turn off adc
    3c8e:	10 92 7a 00 	sts	0x007A, r1
	ADCSRA |= (1 << ADIF);			// clear interrupt flag
    3c92:	80 91 7a 00 	lds	r24, 0x007A
    3c96:	80 61       	ori	r24, 0x10	; 16
    3c98:	80 93 7a 00 	sts	0x007A, r24

	// disable motors pwm
	TCCR3A = 0x00;	// turn off timer
    3c9c:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0x00;
    3ca0:	10 92 91 00 	sts	0x0091, r1
	TIMSK3 = 0x00;	// disable interrupt
    3ca4:	10 92 71 00 	sts	0x0071, r1
	TIFR3 |= (1 << OCF3A) | (1 << OCF3B) | (1 << TOV3);	// clear output compares and timer overflow interrupt flags
    3ca8:	88 b3       	in	r24, 0x18	; 24
    3caa:	87 60       	ori	r24, 0x07	; 7
    3cac:	88 bb       	out	0x18, r24	; 24
	TCCR4A = 0x00;
    3cae:	10 92 a0 00 	sts	0x00A0, r1
	TCCR4B = 0x00;
    3cb2:	10 92 a1 00 	sts	0x00A1, r1
	TIMSK4 = 0x00;
    3cb6:	10 92 72 00 	sts	0x0072, r1
	TIFR4 |= (1 << OCF4A) | (1 << OCF4B) | (1 << TOV4);	// clear output compares and timer overflow interrupt flags
    3cba:	89 b3       	in	r24, 0x19	; 25
    3cbc:	87 60       	ori	r24, 0x07	; 7
    3cbe:	89 bb       	out	0x19, r24	; 25

	// disable leds pwm
	TCCR1A = 0x00;	// turn off timer
    3cc0:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x00;
    3cc4:	10 92 81 00 	sts	0x0081, r1

	// close communication channels
	closeUsart();
    3cc8:	0e 94 b8 1c 	call	0x3970	; 0x3970 <closeUsart>
	closeSPI();
    3ccc:	0e 94 92 0c 	call	0x1924	; 0x1924 <closeSPI>
	i2c_close();
    3cd0:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <i2c_close>

	// set port pins
	initPortsIO();
    3cd4:	0e 94 95 1b 	call	0x372a	; 0x372a <initPortsIO>
	//PORTB &= ~(1 << 4);	// radio CE pin
	//DDRD = 0xFF;
	//PORTD = 0x00;	// I2C and uart pins to 0

	// set extendend standby mode and enable it
	SMCR |= (1 << SM2) | (1 << SM1) | (1 << SM0) | (1 << SE);	// extended standby
    3cd8:	83 b7       	in	r24, 0x33	; 51
    3cda:	8f 60       	ori	r24, 0x0F	; 15
    3cdc:	83 bf       	out	0x33, r24	; 51

	// set timer2 for wake-up: 
	// source clock = 8 MHz
	// prescaler = 1/1024 => 7812.5 Hz
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
    3cde:	81 e0       	ldi	r24, 0x01	; 1
    3ce0:	80 93 70 00 	sts	0x0070, r24
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
    3ce4:	80 91 b0 00 	lds	r24, 0x00B0
    3ce8:	8d 7f       	andi	r24, 0xFD	; 253
    3cea:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler
    3cee:	80 91 b1 00 	lds	r24, 0x00B1
    3cf2:	87 60       	ori	r24, 0x07	; 7
    3cf4:	80 93 b1 00 	sts	0x00B1, r24

	while(pause > 0) {	
    3cf8:	20 97       	sbiw	r28, 0x00	; 0
    3cfa:	19 f0       	breq	.+6      	; 0x3d02 <sleep+0x96>
		// enter extended standby mode
		//sleep_cpu();
		__asm__("sleep");
    3cfc:	88 95       	sleep
		pause--;
    3cfe:	21 97       	sbiw	r28, 0x01	; 1
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler

	while(pause > 0) {	
    3d00:	e9 f7       	brne	.-6      	; 0x3cfc <sleep+0x90>
//		PORTB ^= (1 << 6);
	}

	// disable power mode
	//SMCR &= ~(1 << SE);
	SMCR = 0x00;
    3d02:	13 be       	out	0x33, r1	; 51

	// disable timer2 and its timer overflow interrupt
	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);	// disable timer2
    3d04:	80 91 b1 00 	lds	r24, 0x00B1
    3d08:	88 7f       	andi	r24, 0xF8	; 248
    3d0a:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;					// disable all interrupt for timer2
    3d0e:	10 92 70 00 	sts	0x0070, r1
	TCCR2A |= (1 << WGM21); 	// mode 2 => CTC mode
    3d12:	80 91 b0 00 	lds	r24, 0x00B0
    3d16:	82 60       	ori	r24, 0x02	; 2
    3d18:	80 93 b0 00 	sts	0x00B0, r24

	pwm_red = 255;
    3d1c:	8f ef       	ldi	r24, 0xFF	; 255
    3d1e:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    3d22:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    3d26:	80 93 0e 02 	sts	0x020E, r24
	pwm_right = 0;
    3d2a:	10 92 f6 02 	sts	0x02F6, r1
    3d2e:	10 92 f5 02 	sts	0x02F5, r1
	pwm_left = 0;
    3d32:	10 92 f8 02 	sts	0x02F8, r1
    3d36:	10 92 f7 02 	sts	0x02F7, r1
	initPeripherals();
    3d3a:	0e 94 cb 1d 	call	0x3b96	; 0x3b96 <initPeripherals>

}
    3d3e:	df 91       	pop	r29
    3d40:	cf 91       	pop	r28
    3d42:	08 95       	ret

00003d44 <getTime100MicroSec>:

unsigned long int getTime100MicroSec() {
    3d44:	60 91 46 04 	lds	r22, 0x0446
    3d48:	70 91 47 04 	lds	r23, 0x0447
	return clockTick;
}
    3d4c:	80 91 48 04 	lds	r24, 0x0448
    3d50:	90 91 49 04 	lds	r25, 0x0449
    3d54:	08 95       	ret

00003d56 <readBatteryLevel>:

void readBatteryLevel() {
	measBattery = 1;
    3d56:	81 e0       	ldi	r24, 0x01	; 1
    3d58:	80 93 bf 02 	sts	0x02BF, r24
}
    3d5c:	08 95       	ret

00003d5e <resetOdometry>:

void resetOdometry() {
	leftMotSteps = 0;
    3d5e:	80 e0       	ldi	r24, 0x00	; 0
    3d60:	90 e0       	ldi	r25, 0x00	; 0
    3d62:	dc 01       	movw	r26, r24
    3d64:	80 93 d5 02 	sts	0x02D5, r24
    3d68:	90 93 d6 02 	sts	0x02D6, r25
    3d6c:	a0 93 d7 02 	sts	0x02D7, r26
    3d70:	b0 93 d8 02 	sts	0x02D8, r27
	rightMotSteps = 0;
    3d74:	80 93 d1 02 	sts	0x02D1, r24
    3d78:	90 93 d2 02 	sts	0x02D2, r25
    3d7c:	a0 93 d3 02 	sts	0x02D3, r26
    3d80:	b0 93 d4 02 	sts	0x02D4, r27
	theta = 0;
    3d84:	80 93 6d 04 	sts	0x046D, r24
    3d88:	90 93 6e 04 	sts	0x046E, r25
    3d8c:	a0 93 6f 04 	sts	0x046F, r26
    3d90:	b0 93 70 04 	sts	0x0470, r27
	xPos = 0;
    3d94:	80 93 75 04 	sts	0x0475, r24
    3d98:	90 93 76 04 	sts	0x0476, r25
    3d9c:	a0 93 77 04 	sts	0x0477, r26
    3da0:	b0 93 78 04 	sts	0x0478, r27
	yPos = 0;
    3da4:	80 93 79 04 	sts	0x0479, r24
    3da8:	90 93 7a 04 	sts	0x047A, r25
    3dac:	a0 93 7b 04 	sts	0x047B, r26
    3db0:	b0 93 7c 04 	sts	0x047C, r27
}
    3db4:	08 95       	ret

00003db6 <initAdc>:

#include "adc.h"


void initAdc(void) {
    3db6:	cf 93       	push	r28
    3db8:	df 93       	push	r29
	// ADMUX  -----> REFS1	REFS0	 ADLAR	MUX4	MUX3 	 MUX2	MUX1	MUX0
	// default		 0		0		 0		0		0		 0		0		0
	// ADCSRB -----> -		ACME	 - 		- 		MUX5 	 ADTS2 	ADTS1 	ADTS0
	// default		 0		0		 0		0		0		 0		0		0

	ADCSRA = 0;
    3dba:	ea e7       	ldi	r30, 0x7A	; 122
    3dbc:	f0 e0       	ldi	r31, 0x00	; 0
    3dbe:	10 82       	st	Z, r1
	ADCSRB = 0;
    3dc0:	ab e7       	ldi	r26, 0x7B	; 123
    3dc2:	b0 e0       	ldi	r27, 0x00	; 0
    3dc4:	1c 92       	st	X, r1
	ADMUX = 0;
    3dc6:	cc e7       	ldi	r28, 0x7C	; 124
    3dc8:	d0 e0       	ldi	r29, 0x00	; 0
    3dca:	18 82       	st	Y, r1

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// 1/64 prescaler => 8 MHz/64=125 KHz => Tad (adc clock)
    3dcc:	80 81       	ld	r24, Z
    3dce:	86 60       	ori	r24, 0x06	; 6
    3dd0:	80 83       	st	Z, r24
											// one sample need 13 Tad in free running mode, so interrupt 
											// frequency is 125/13=9.6 KHz (104 us between adc interrupts)
	ADMUX |= (1 << REFS0); 	// voltage reference to AVCC (external)
    3dd2:	88 81       	ld	r24, Y
    3dd4:	80 64       	ori	r24, 0x40	; 64
    3dd6:	88 83       	st	Y, r24
	ADCSRA |= (1 << ADATE); // auto-trigger mode: the new sampling is started just after the last one is completed
    3dd8:	80 81       	ld	r24, Z
    3dda:	80 62       	ori	r24, 0x20	; 32
    3ddc:	80 83       	st	Z, r24
	ADCSRB &= 0xF8;			// for safety...ADTS2:0 in ADCSRB should be already set to free running by default (0b000)
    3dde:	8c 91       	ld	r24, X
    3de0:	88 7f       	andi	r24, 0xF8	; 248
    3de2:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADIE);	// enable interrupt on conversion completion
    3de4:	80 81       	ld	r24, Z
    3de6:	88 60       	ori	r24, 0x08	; 8
    3de8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	// enable ADC
    3dea:	80 81       	ld	r24, Z
    3dec:	80 68       	ori	r24, 0x80	; 128
    3dee:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);	// start first conversion (start from channel 0)
    3df0:	80 81       	ld	r24, Z
    3df2:	80 64       	ori	r24, 0x40	; 64
    3df4:	80 83       	st	Z, r24

}
    3df6:	df 91       	pop	r29
    3df8:	cf 91       	pop	r28
    3dfa:	08 95       	ret

00003dfc <__vector_29>:

ISR(ADC_vect) {
    3dfc:	1f 92       	push	r1
    3dfe:	0f 92       	push	r0
    3e00:	0f b6       	in	r0, 0x3f	; 63
    3e02:	0f 92       	push	r0
    3e04:	0b b6       	in	r0, 0x3b	; 59
    3e06:	0f 92       	push	r0
    3e08:	11 24       	eor	r1, r1
    3e0a:	1f 93       	push	r17
    3e0c:	2f 93       	push	r18
    3e0e:	3f 93       	push	r19
    3e10:	4f 93       	push	r20
    3e12:	5f 93       	push	r21
    3e14:	6f 93       	push	r22
    3e16:	7f 93       	push	r23
    3e18:	8f 93       	push	r24
    3e1a:	9f 93       	push	r25
    3e1c:	af 93       	push	r26
    3e1e:	bf 93       	push	r27
    3e20:	ef 93       	push	r30
    3e22:	ff 93       	push	r31
	// channel 15:    active phase when going forward: motor left current; passive phase when going backward: motor left velocity


	//LED_BLUE_ON;

	clockTick++;				// this variable is used as base time for timed processes/functions (e,g, delay); 
    3e24:	80 91 46 04 	lds	r24, 0x0446
    3e28:	90 91 47 04 	lds	r25, 0x0447
    3e2c:	a0 91 48 04 	lds	r26, 0x0448
    3e30:	b0 91 49 04 	lds	r27, 0x0449
    3e34:	01 96       	adiw	r24, 0x01	; 1
    3e36:	a1 1d       	adc	r26, r1
    3e38:	b1 1d       	adc	r27, r1
    3e3a:	80 93 46 04 	sts	0x0446, r24
    3e3e:	90 93 47 04 	sts	0x0447, r25
    3e42:	a0 93 48 04 	sts	0x0448, r26
    3e46:	b0 93 49 04 	sts	0x0449, r27
								// resolution of 104 us based on adc interrupts

	unsigned int value = ADCL;			// get the sample; low byte must be read first!!
    3e4a:	80 91 78 00 	lds	r24, 0x0078
    3e4e:	90 e0       	ldi	r25, 0x00	; 0
	value = (ADCH<<8) | value;
    3e50:	40 91 79 00 	lds	r20, 0x0079
    3e54:	34 2f       	mov	r19, r20
    3e56:	20 e0       	ldi	r18, 0x00	; 0
    3e58:	82 2b       	or	r24, r18
    3e5a:	93 2b       	or	r25, r19
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    3e5c:	20 91 b9 02 	lds	r18, 0x02B9
    3e60:	22 30       	cpi	r18, 0x02	; 2
    3e62:	09 f4       	brne	.+2      	; 0x3e66 <__vector_29+0x6a>
    3e64:	ed c1       	rjmp	.+986    	; 0x4240 <__vector_29+0x444>
    3e66:	23 30       	cpi	r18, 0x03	; 3
    3e68:	08 f4       	brcc	.+2      	; 0x3e6c <__vector_29+0x70>
    3e6a:	4c c0       	rjmp	.+152    	; 0x3f04 <__vector_29+0x108>
    3e6c:	24 30       	cpi	r18, 0x04	; 4
    3e6e:	09 f4       	brne	.+2      	; 0x3e72 <__vector_29+0x76>
    3e70:	11 c2       	rjmp	.+1058   	; 0x4294 <__vector_29+0x498>
    3e72:	24 30       	cpi	r18, 0x04	; 4
    3e74:	08 f0       	brcs	.+2      	; 0x3e78 <__vector_29+0x7c>
    3e76:	55 c1       	rjmp	.+682    	; 0x4122 <__vector_29+0x326>
				}
			}
			break;

		case SAVE_TO_LEFT_MOTOR_CURRENT:
			left_current_avg += value;
    3e78:	20 91 e1 02 	lds	r18, 0x02E1
    3e7c:	30 91 e2 02 	lds	r19, 0x02E2
    3e80:	28 0f       	add	r18, r24
    3e82:	39 1f       	adc	r19, r25
			left_current_avg = left_current_avg >> 1;
    3e84:	36 95       	lsr	r19
    3e86:	27 95       	ror	r18
    3e88:	30 93 e2 02 	sts	0x02E2, r19
    3e8c:	20 93 e1 02 	sts	0x02E1, r18
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
    3e90:	80 91 c3 04 	lds	r24, 0x04C3
    3e94:	82 30       	cpi	r24, 0x02	; 2
    3e96:	09 f0       	breq	.+2      	; 0x3e9a <__vector_29+0x9e>
    3e98:	4b c0       	rjmp	.+150    	; 0x3f30 <__vector_29+0x134>
		switch(irCommAdcTxState) {
    3e9a:	80 91 f0 04 	lds	r24, 0x04F0
    3e9e:	81 30       	cpi	r24, 0x01	; 1
    3ea0:	09 f4       	brne	.+2      	; 0x3ea4 <__vector_29+0xa8>
    3ea2:	c8 c2       	rjmp	.+1424   	; 0x4434 <__vector_29+0x638>
    3ea4:	81 30       	cpi	r24, 0x01	; 1
    3ea6:	08 f0       	brcs	.+2      	; 0x3eaa <__vector_29+0xae>
    3ea8:	23 c2       	rjmp	.+1094   	; 0x42f0 <__vector_29+0x4f4>
				}
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ1;
				break;

			case IRCOMM_TX_ADC_IDLE:
				if(irCommTxByteEnqueued==1) {					
    3eaa:	80 91 f2 04 	lds	r24, 0x04F2
    3eae:	81 30       	cpi	r24, 0x01	; 1
    3eb0:	09 f4       	brne	.+2      	; 0x3eb4 <__vector_29+0xb8>
    3eb2:	37 c3       	rjmp	.+1646   	; 0x4522 <__vector_29+0x726>
    3eb4:	80 91 ba 02 	lds	r24, 0x02BA
	
	}

	// channel selection in the adc register; continuously manually change the channel 
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
    3eb8:	90 91 23 02 	lds	r25, 0x0223
    3ebc:	98 30       	cpi	r25, 0x08	; 8
    3ebe:	08 f0       	brcs	.+2      	; 0x3ec2 <__vector_29+0xc6>
    3ec0:	76 c1       	rjmp	.+748    	; 0x41ae <__vector_29+0x3b2>
		ADCSRB &= ~(1 << MUX5);
    3ec2:	90 91 7b 00 	lds	r25, 0x007B
    3ec6:	97 7f       	andi	r25, 0xF7	; 247
    3ec8:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + currentAdChannel;
    3ecc:	90 91 23 02 	lds	r25, 0x0223
    3ed0:	90 5c       	subi	r25, 0xC0	; 192
    3ed2:	90 93 7c 00 	sts	0x007C, r25
		ADCSRB |= (1 << MUX5);
		ADMUX = 0x40 + (currentAdChannel-8);
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if((adcSamplingState==2) && (irCommMode==IRCOMM_MODE_SENSORS_SAMPLING)) {
    3ed6:	82 30       	cpi	r24, 0x02	; 2
    3ed8:	09 f4       	brne	.+2      	; 0x3edc <__vector_29+0xe0>
    3eda:	76 c1       	rjmp	.+748    	; 0x41c8 <__vector_29+0x3cc>

	}

	//LED_BLUE_OFF;

}
    3edc:	ff 91       	pop	r31
    3ede:	ef 91       	pop	r30
    3ee0:	bf 91       	pop	r27
    3ee2:	af 91       	pop	r26
    3ee4:	9f 91       	pop	r25
    3ee6:	8f 91       	pop	r24
    3ee8:	7f 91       	pop	r23
    3eea:	6f 91       	pop	r22
    3eec:	5f 91       	pop	r21
    3eee:	4f 91       	pop	r20
    3ef0:	3f 91       	pop	r19
    3ef2:	2f 91       	pop	r18
    3ef4:	1f 91       	pop	r17
    3ef6:	0f 90       	pop	r0
    3ef8:	0b be       	out	0x3b, r0	; 59
    3efa:	0f 90       	pop	r0
    3efc:	0f be       	out	0x3f, r0	; 63
    3efe:	0f 90       	pop	r0
    3f00:	1f 90       	pop	r1
    3f02:	18 95       	reti
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    3f04:	22 23       	and	r18, r18
    3f06:	09 f4       	brne	.+2      	; 0x3f0a <__vector_29+0x10e>
    3f08:	78 c0       	rjmp	.+240    	; 0x3ffa <__vector_29+0x1fe>
    3f0a:	21 30       	cpi	r18, 0x01	; 1
    3f0c:	61 f4       	brne	.+24     	; 0x3f26 <__vector_29+0x12a>
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
			}											// is sampled; thus 12 sensors x 2 phases = 24 samples
			break;

		case SAVE_TO_RIGHT_MOTOR_CURRENT:
			right_current_avg += value;
    3f0e:	20 91 e3 02 	lds	r18, 0x02E3
    3f12:	30 91 e4 02 	lds	r19, 0x02E4
    3f16:	28 0f       	add	r18, r24
    3f18:	39 1f       	adc	r19, r25
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
    3f1a:	36 95       	lsr	r19
    3f1c:	27 95       	ror	r18
    3f1e:	30 93 e4 02 	sts	0x02E4, r19
    3f22:	20 93 e3 02 	sts	0x02E3, r18
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
    3f26:	80 91 c3 04 	lds	r24, 0x04C3
    3f2a:	82 30       	cpi	r24, 0x02	; 2
    3f2c:	09 f4       	brne	.+2      	; 0x3f30 <__vector_29+0x134>
    3f2e:	b5 cf       	rjmp	.-150    	; 0x3e9a <__vector_29+0x9e>
					irCommAdcTxState = IRCOMM_TX_ADC_TURN_OFF_SENSORS;
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
    3f30:	81 30       	cpi	r24, 0x01	; 1
    3f32:	09 f4       	brne	.+2      	; 0x3f36 <__vector_29+0x13a>
    3f34:	63 c1       	rjmp	.+710    	; 0x41fc <__vector_29+0x400>
				}
				irCommAdcRxState = 0;
				break;

		}
	} else if(irCommMode==IRCOMM_MODE_SENSORS_SAMPLING) {
    3f36:	88 23       	and	r24, r24
    3f38:	09 f0       	breq	.+2      	; 0x3f3c <__vector_29+0x140>
    3f3a:	bc cf       	rjmp	.-136    	; 0x3eb4 <__vector_29+0xb8>
		switch(adcSamplingState) {
    3f3c:	80 91 ba 02 	lds	r24, 0x02BA
    3f40:	82 30       	cpi	r24, 0x02	; 2
    3f42:	09 f4       	brne	.+2      	; 0x3f46 <__vector_29+0x14a>
    3f44:	36 c3       	rjmp	.+1644   	; 0x45b2 <__vector_29+0x7b6>
    3f46:	83 30       	cpi	r24, 0x03	; 3
    3f48:	08 f0       	brcs	.+2      	; 0x3f4c <__vector_29+0x150>
    3f4a:	ff c1       	rjmp	.+1022   	; 0x434a <__vector_29+0x54e>
    3f4c:	88 23       	and	r24, r24
    3f4e:	09 f4       	brne	.+2      	; 0x3f52 <__vector_29+0x156>
    3f50:	a1 c2       	rjmp	.+1346   	; 0x4494 <__vector_29+0x698>
    3f52:	81 30       	cpi	r24, 0x01	; 1
    3f54:	09 f0       	breq	.+2      	; 0x3f58 <__vector_29+0x15c>
    3f56:	b0 cf       	rjmp	.-160    	; 0x3eb8 <__vector_29+0xbc>
				}
				adcSamplingState = 1;
				break;

			case 1:	// left motor
				currentAdChannel = currentMotLeftChannel;
    3f58:	80 91 25 02 	lds	r24, 0x0225
    3f5c:	80 93 23 02 	sts	0x0223, r24
				leftChannelPhase = leftMotorPhase;
    3f60:	80 91 28 02 	lds	r24, 0x0228
    3f64:	80 93 bc 02 	sts	0x02BC, r24
				adcSaveDataTo = SAVE_TO_PROX;
    3f68:	10 92 b9 02 	sts	0x02B9, r1
				adcSamplingState = 2;
    3f6c:	82 e0       	ldi	r24, 0x02	; 2
    3f6e:	80 93 ba 02 	sts	0x02BA, r24
				if(irCommEnabled==IRCOMM_MODE_RECEIVE && currentProx==23) {					
    3f72:	10 91 c2 04 	lds	r17, 0x04C2
    3f76:	11 30       	cpi	r17, 0x01	; 1
    3f78:	09 f4       	brne	.+2      	; 0x3f7c <__vector_29+0x180>
    3f7a:	35 c4       	rjmp	.+2154   	; 0x47e6 <__vector_29+0x9ea>
					irCommRxWindowSamples = 0;
					memset(irCommMaxSensorValueAdc, 0x00, 16);
					memset(irCommMinSensorValueAdc, 0xFF, 16);
					irCommMode = IRCOMM_MODE_RECEIVE;
				}
				if(irCommEnabled==IRCOMM_MODE_TRANSMIT && currentProx==23) {
    3f7c:	12 30       	cpi	r17, 0x02	; 2
    3f7e:	09 f4       	brne	.+2      	; 0x3f82 <__vector_29+0x186>
    3f80:	21 c4       	rjmp	.+2114   	; 0x47c4 <__vector_29+0x9c8>
						irCommAdcTxState = IRCOMM_TX_ADC_TURN_OFF_SENSORS;
					} else {
						irCommMode=IRCOMM_MODE_SENSORS_SAMPLING; // no data to be transmitted, restart sensors sampling
					}
				}
				if(irCommEnabled==IRCOMM_MODE_RECEIVE_ONLY && currentProx==23) {					
    3f82:	13 30       	cpi	r17, 0x03	; 3
    3f84:	29 f5       	brne	.+74     	; 0x3fd0 <__vector_29+0x1d4>
    3f86:	80 91 24 02 	lds	r24, 0x0224
    3f8a:	87 31       	cpi	r24, 0x17	; 23
    3f8c:	09 f0       	breq	.+2      	; 0x3f90 <__vector_29+0x194>
    3f8e:	92 cf       	rjmp	.-220    	; 0x3eb4 <__vector_29+0xb8>
					currentAdChannel = 0;	// prox0					
    3f90:	10 92 23 02 	sts	0x0223, r1
					measBattery = 0;
    3f94:	10 92 bf 02 	sts	0x02BF, r1
					irCommAdcRxState = 0;					
    3f98:	10 92 d1 04 	sts	0x04D1, r1
					irCommRxWindowSamples = 0;
    3f9c:	10 92 d2 04 	sts	0x04D2, r1
					memset(irCommMaxSensorValueAdc, 0x00, 16);
    3fa0:	e0 91 c8 08 	lds	r30, 0x08C8
    3fa4:	f0 91 c9 08 	lds	r31, 0x08C9
    3fa8:	80 e1       	ldi	r24, 0x10	; 16
    3faa:	df 01       	movw	r26, r30
    3fac:	1d 92       	st	X+, r1
    3fae:	8a 95       	dec	r24
    3fb0:	e9 f7       	brne	.-6      	; 0x3fac <__vector_29+0x1b0>
					memset(irCommMinSensorValueAdc, 0xFF, 16);
    3fb2:	80 91 26 05 	lds	r24, 0x0526
    3fb6:	90 91 27 05 	lds	r25, 0x0527
    3fba:	6f ef       	ldi	r22, 0xFF	; 255
    3fbc:	70 e0       	ldi	r23, 0x00	; 0
    3fbe:	40 e1       	ldi	r20, 0x10	; 16
    3fc0:	50 e0       	ldi	r21, 0x00	; 0
    3fc2:	0e 94 6f 4c 	call	0x98de	; 0x98de <memset>
					irCommMode = IRCOMM_MODE_RECEIVE;
    3fc6:	81 e0       	ldi	r24, 0x01	; 1
    3fc8:	80 93 c3 04 	sts	0x04C3, r24
    3fcc:	10 91 c2 04 	lds	r17, 0x04C2
				}
				if(irCommEnabled==IRCOMM_MODE_TRANSMIT_ONLY && currentProx==23) {
    3fd0:	14 30       	cpi	r17, 0x04	; 4
    3fd2:	09 f0       	breq	.+2      	; 0x3fd6 <__vector_29+0x1da>
    3fd4:	6f cf       	rjmp	.-290    	; 0x3eb4 <__vector_29+0xb8>
    3fd6:	80 91 24 02 	lds	r24, 0x0224
    3fda:	87 31       	cpi	r24, 0x17	; 23
    3fdc:	09 f0       	breq	.+2      	; 0x3fe0 <__vector_29+0x1e4>
    3fde:	6a cf       	rjmp	.-300    	; 0x3eb4 <__vector_29+0xb8>
					irCommMode = IRCOMM_MODE_TRANSMIT;
    3fe0:	82 e0       	ldi	r24, 0x02	; 2
    3fe2:	80 93 c3 04 	sts	0x04C3, r24
					if(irCommTxByteEnqueued==1) {
    3fe6:	80 91 f2 04 	lds	r24, 0x04F2
    3fea:	81 30       	cpi	r24, 0x01	; 1
    3fec:	09 f4       	brne	.+2      	; 0x3ff0 <__vector_29+0x1f4>
    3fee:	99 c2       	rjmp	.+1330   	; 0x4522 <__vector_29+0x726>
						irCommAdcTxState = IRCOMM_TX_ADC_TURN_OFF_SENSORS;
					} else {
						irCommAdcTxState = IRCOMM_TX_ADC_IDLE;
    3ff0:	10 92 f0 04 	sts	0x04F0, r1
    3ff4:	80 91 ba 02 	lds	r24, 0x02BA
    3ff8:	5f cf       	rjmp	.-322    	; 0x3eb8 <__vector_29+0xbc>
			}
			currentProx++;
			break;

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    3ffa:	60 91 24 02 	lds	r22, 0x0224
    3ffe:	6e 30       	cpi	r22, 0x0E	; 14
    4000:	09 f4       	brne	.+2      	; 0x4004 <__vector_29+0x208>
    4002:	fd c2       	rjmp	.+1530   	; 0x45fe <__vector_29+0x802>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
				measBattery = 0;
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
			} else {
				proximityValue[currentProx] = value;	// even indexes contain ambient values; odd indexes contains "reflected" values
    4004:	26 2f       	mov	r18, r22
    4006:	30 e0       	ldi	r19, 0x00	; 0
    4008:	f9 01       	movw	r30, r18
    400a:	ee 0f       	add	r30, r30
    400c:	ff 1f       	adc	r31, r31
    400e:	e7 5d       	subi	r30, 0xD7	; 215
    4010:	fd 4f       	sbci	r31, 0xFD	; 253
    4012:	91 83       	std	Z+1, r25	; 0x01
    4014:	80 83       	st	Z, r24
			}

			if(currentProx & 0x01) {
    4016:	20 ff       	sbrs	r18, 0
    4018:	78 c0       	rjmp	.+240    	; 0x410a <__vector_29+0x30e>
				//if(currentProx < 16) {	// prox
					proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
    401a:	f9 01       	movw	r30, r18
    401c:	ee 0f       	add	r30, r30
    401e:	ff 1f       	adc	r31, r31
    4020:	e9 5d       	subi	r30, 0xD9	; 217
    4022:	fd 4f       	sbci	r31, 0xFD	; 253
    4024:	80 81       	ld	r24, Z
    4026:	91 81       	ldd	r25, Z+1	; 0x01
    4028:	f9 01       	movw	r30, r18
    402a:	ee 0f       	add	r30, r30
    402c:	ff 1f       	adc	r31, r31
    402e:	e7 5d       	subi	r30, 0xD7	; 215
    4030:	fd 4f       	sbci	r31, 0xFD	; 253
    4032:	40 81       	ld	r20, Z
    4034:	51 81       	ldd	r21, Z+1	; 0x01
    4036:	26 2f       	mov	r18, r22
    4038:	26 95       	lsr	r18
    403a:	30 e0       	ldi	r19, 0x00	; 0
    403c:	84 1b       	sub	r24, r20
    403e:	95 0b       	sbc	r25, r21
    4040:	22 0f       	add	r18, r18
    4042:	33 1f       	adc	r19, r19
    4044:	f9 01       	movw	r30, r18
    4046:	ef 58       	subi	r30, 0x8F	; 143
    4048:	fd 4f       	sbci	r31, 0xFD	; 253
    404a:	40 81       	ld	r20, Z
    404c:	51 81       	ldd	r21, Z+1	; 0x01
    404e:	84 1b       	sub	r24, r20
    4050:	95 0b       	sbc	r25, r21
    4052:	f9 01       	movw	r30, r18
    4054:	e7 5a       	subi	r30, 0xA7	; 167
    4056:	fd 4f       	sbci	r31, 0xFD	; 253
    4058:	91 83       	std	Z+1, r25	; 0x01
    405a:	80 83       	st	Z, r24
				//} else {	// ground
				//	proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx];
				//}
				if(proximityResult[currentProx>>1] < 0) {
    405c:	97 fd       	sbrc	r25, 7
    405e:	f9 c2       	rjmp	.+1522   	; 0x4652 <__vector_29+0x856>
					proximityResult[currentProx>>1] = 0;
				}
				if(proximityResult[currentProx>>1] > 1024) {
    4060:	44 e0       	ldi	r20, 0x04	; 4
    4062:	81 30       	cpi	r24, 0x01	; 1
    4064:	94 07       	cpc	r25, r20
    4066:	24 f0       	brlt	.+8      	; 0x4070 <__vector_29+0x274>
					proximityResult[currentProx>>1] = 1024;
    4068:	80 e0       	ldi	r24, 0x00	; 0
    406a:	94 e0       	ldi	r25, 0x04	; 4
    406c:	91 83       	std	Z+1, r25	; 0x01
    406e:	80 83       	st	Z, r24
				// 1) from 0 to PHASE1: y = x (where x = proximity value9
				// 2) from PHASE1 to PHASE2: y = x/2 + 30
				// 3) from PHASE2 to PHASE3: y = x/4 + 75
				// 4) from PHASE3 upwards: y = x/8 + 127.5
				// The linearized values are used for the obstacles avoidance.
				if(currentProx < 16) {	// only for proximity (not ground sensors)
    4070:	60 31       	cpi	r22, 0x10	; 16
    4072:	50 f4       	brcc	.+20     	; 0x4088 <__vector_29+0x28c>
					
					if(proximityResult[currentProx>>1] < PHASE1) {
    4074:	8c 33       	cpi	r24, 0x3C	; 60
    4076:	91 05       	cpc	r25, r1
    4078:	0c f0       	brlt	.+2      	; 0x407c <__vector_29+0x280>
    407a:	f0 c2       	rjmp	.+1504   	; 0x465c <__vector_29+0x860>

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];
    407c:	2f 53       	subi	r18, 0x3F	; 63
    407e:	3d 4f       	sbci	r19, 0xFD	; 253
    4080:	d9 01       	movw	r26, r18
    4082:	11 96       	adiw	r26, 0x01	; 1
    4084:	9c 93       	st	X, r25
    4086:	8e 93       	st	-X, r24
				}

				// the cliff avoidance behavior is inserted within this interrupt service routine in order to react
				// as fast as possible; the maximum speed usable with cliff avoidance is 30 in all kind of surface 
				// (apart from black ones) after calibration.
				if(cliffAvoidanceEnabled) {
    4088:	80 91 6b 04 	lds	r24, 0x046B
    408c:	88 23       	and	r24, r24
    408e:	09 f4       	brne	.+2      	; 0x4092 <__vector_29+0x296>
    4090:	12 c2       	rjmp	.+1060   	; 0x44b6 <__vector_29+0x6ba>
					if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    4092:	80 91 69 02 	lds	r24, 0x0269
    4096:	90 91 6a 02 	lds	r25, 0x026A
    409a:	f1 e0       	ldi	r31, 0x01	; 1
    409c:	84 3a       	cpi	r24, 0xA4	; 164
    409e:	9f 07       	cpc	r25, r31
    40a0:	cc f0       	brlt	.+50     	; 0x40d4 <__vector_29+0x2d8>
    40a2:	80 91 6b 02 	lds	r24, 0x026B
    40a6:	90 91 6c 02 	lds	r25, 0x026C
    40aa:	21 e0       	ldi	r18, 0x01	; 1
    40ac:	84 3a       	cpi	r24, 0xA4	; 164
    40ae:	92 07       	cpc	r25, r18
    40b0:	8c f0       	brlt	.+34     	; 0x40d4 <__vector_29+0x2d8>
    40b2:	80 91 6d 02 	lds	r24, 0x026D
    40b6:	90 91 6e 02 	lds	r25, 0x026E
    40ba:	41 e0       	ldi	r20, 0x01	; 1
    40bc:	84 3a       	cpi	r24, 0xA4	; 164
    40be:	94 07       	cpc	r25, r20
    40c0:	4c f0       	brlt	.+18     	; 0x40d4 <__vector_29+0x2d8>
    40c2:	80 91 6f 02 	lds	r24, 0x026F
    40c6:	90 91 70 02 	lds	r25, 0x0270
    40ca:	a1 e0       	ldi	r26, 0x01	; 1
    40cc:	84 3a       	cpi	r24, 0xA4	; 164
    40ce:	9a 07       	cpc	r25, r26
    40d0:	0c f0       	brlt	.+2      	; 0x40d4 <__vector_29+0x2d8>
    40d2:	f1 c1       	rjmp	.+994    	; 0x44b6 <__vector_29+0x6ba>
					//if(proximityResult[8]<(proximityOffset[8]>>1) || proximityResult[9]<(proximityOffset[9]>>1) || proximityResult[10]<(proximityOffset[10]>>1) || proximityResult[11]<(proximityOffset[11]>>1)) {
						cliffDetectedFlag = 1;
    40d4:	81 e0       	ldi	r24, 0x01	; 1
    40d6:	80 93 6c 04 	sts	0x046C, r24
						//LED_RED_ON;			
						// set resulting velocity to 0 and change the pwm registers directly to be able
						// to stop as fast as possible (the next pwm cycle)
						// left motor
						pwm_left = 0;
    40da:	10 92 f8 02 	sts	0x02F8, r1
    40de:	10 92 f7 02 	sts	0x02F7, r1
						OCR4A = 0;
    40e2:	10 92 a9 00 	sts	0x00A9, r1
    40e6:	10 92 a8 00 	sts	0x00A8, r1
						OCR4B = 0;
    40ea:	10 92 ab 00 	sts	0x00AB, r1
    40ee:	10 92 aa 00 	sts	0x00AA, r1
						// right motor
						pwm_right = 0;
    40f2:	10 92 f6 02 	sts	0x02F6, r1
    40f6:	10 92 f5 02 	sts	0x02F5, r1
						OCR3A = 0;
    40fa:	10 92 99 00 	sts	0x0099, r1
    40fe:	10 92 98 00 	sts	0x0098, r1
						OCR3B = 0;
    4102:	10 92 9b 00 	sts	0x009B, r1
    4106:	10 92 9a 00 	sts	0x009A, r1
				} else {
					cliffDetectedFlag = 0;
				}

			}			
			currentProx++;
    410a:	6f 5f       	subi	r22, 0xFF	; 255
    410c:	60 93 24 02 	sts	0x0224, r22
			if(currentProx > 23) {						// in total there are 8 proximity sensors and 4 ground sensors => 12 sensors
    4110:	68 31       	cpi	r22, 0x18	; 24
    4112:	08 f4       	brcc	.+2      	; 0x4116 <__vector_29+0x31a>
    4114:	08 cf       	rjmp	.-496    	; 0x3f26 <__vector_29+0x12a>
				currentProx = 0;						// for each one there is a passive phase in which the ambient light is sampled,
    4116:	10 92 24 02 	sts	0x0224, r1
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
    411a:	81 e0       	ldi	r24, 0x01	; 1
    411c:	80 93 c0 02 	sts	0x02C0, r24
    4120:	02 cf       	rjmp	.-508    	; 0x3f26 <__vector_29+0x12a>
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    4122:	26 30       	cpi	r18, 0x06	; 6
    4124:	09 f0       	breq	.+2      	; 0x4128 <__vector_29+0x32c>
    4126:	ff ce       	rjmp	.-514    	; 0x3f26 <__vector_29+0x12a>
		case SAVE_TO_PROX_IRCOMM:
			irCommProxValuesAdc[currentProx+irCommRxWindowSamples*8] = value;
    4128:	20 91 d2 04 	lds	r18, 0x04D2
    412c:	30 e0       	ldi	r19, 0x00	; 0
    412e:	40 91 24 02 	lds	r20, 0x0224
    4132:	22 0f       	add	r18, r18
    4134:	33 1f       	adc	r19, r19
    4136:	22 0f       	add	r18, r18
    4138:	33 1f       	adc	r19, r19
    413a:	22 0f       	add	r18, r18
    413c:	33 1f       	adc	r19, r19
    413e:	24 0f       	add	r18, r20
    4140:	31 1d       	adc	r19, r1
    4142:	22 0f       	add	r18, r18
    4144:	33 1f       	adc	r19, r19
    4146:	e0 91 bc 07 	lds	r30, 0x07BC
    414a:	f0 91 bd 07 	lds	r31, 0x07BD
    414e:	e2 0f       	add	r30, r18
    4150:	f3 1f       	adc	r31, r19
    4152:	91 83       	std	Z+1, r25	; 0x01
    4154:	80 83       	st	Z, r24
			// get the min and max values in the sampling window for all the sensors
			if(irCommMaxSensorValueAdc[currentProx] < value) {
    4156:	60 91 24 02 	lds	r22, 0x0224
    415a:	26 2f       	mov	r18, r22
    415c:	30 e0       	ldi	r19, 0x00	; 0
    415e:	22 0f       	add	r18, r18
    4160:	33 1f       	adc	r19, r19
    4162:	e0 91 c8 08 	lds	r30, 0x08C8
    4166:	f0 91 c9 08 	lds	r31, 0x08C9
    416a:	e2 0f       	add	r30, r18
    416c:	f3 1f       	adc	r31, r19
    416e:	40 81       	ld	r20, Z
    4170:	51 81       	ldd	r21, Z+1	; 0x01
    4172:	48 17       	cp	r20, r24
    4174:	59 07       	cpc	r21, r25
    4176:	40 f4       	brcc	.+16     	; 0x4188 <__vector_29+0x38c>
				irCommMaxSensorValueAdc[currentProx] = value;
    4178:	91 83       	std	Z+1, r25	; 0x01
    417a:	80 83       	st	Z, r24
    417c:	60 91 24 02 	lds	r22, 0x0224
    4180:	26 2f       	mov	r18, r22
    4182:	30 e0       	ldi	r19, 0x00	; 0
    4184:	22 0f       	add	r18, r18
    4186:	33 1f       	adc	r19, r19
			}
			if(irCommMinSensorValueAdc[currentProx] > value) {
    4188:	e0 91 26 05 	lds	r30, 0x0526
    418c:	f0 91 27 05 	lds	r31, 0x0527
    4190:	e2 0f       	add	r30, r18
    4192:	f3 1f       	adc	r31, r19
    4194:	20 81       	ld	r18, Z
    4196:	31 81       	ldd	r19, Z+1	; 0x01
    4198:	82 17       	cp	r24, r18
    419a:	93 07       	cpc	r25, r19
    419c:	20 f4       	brcc	.+8      	; 0x41a6 <__vector_29+0x3aa>
				irCommMinSensorValueAdc[currentProx] = value;
    419e:	91 83       	std	Z+1, r25	; 0x01
    41a0:	80 83       	st	Z, r24
    41a2:	60 91 24 02 	lds	r22, 0x0224
			}
			currentProx++;
    41a6:	6f 5f       	subi	r22, 0xFF	; 255
    41a8:	60 93 24 02 	sts	0x0224, r22
			break;
    41ac:	bc ce       	rjmp	.-648    	; 0x3f26 <__vector_29+0x12a>
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
		ADCSRB &= ~(1 << MUX5);
		ADMUX = 0x40 + currentAdChannel;
	} else {						// MUX5=1 + ADMUX=0..7 => adc channel=8..15
		ADCSRB |= (1 << MUX5);
    41ae:	90 91 7b 00 	lds	r25, 0x007B
    41b2:	98 60       	ori	r25, 0x08	; 8
    41b4:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + (currentAdChannel-8);
    41b8:	90 91 23 02 	lds	r25, 0x0223
    41bc:	98 5c       	subi	r25, 0xC8	; 200
    41be:	90 93 7c 00 	sts	0x007C, r25
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if((adcSamplingState==2) && (irCommMode==IRCOMM_MODE_SENSORS_SAMPLING)) {
    41c2:	82 30       	cpi	r24, 0x02	; 2
    41c4:	09 f0       	breq	.+2      	; 0x41c8 <__vector_29+0x3cc>
    41c6:	8a ce       	rjmp	.-748    	; 0x3edc <__vector_29+0xe0>
    41c8:	80 91 c3 04 	lds	r24, 0x04C3
    41cc:	88 23       	and	r24, r24
    41ce:	09 f0       	breq	.+2      	; 0x41d2 <__vector_29+0x3d6>
    41d0:	85 ce       	rjmp	.-758    	; 0x3edc <__vector_29+0xe0>

		if(hardwareRevision == HW_REV_3_0) {
    41d2:	20 91 4d 04 	lds	r18, 0x044D
    41d6:	22 23       	and	r18, r18
    41d8:	39 f4       	brne	.+14     	; 0x41e8 <__vector_29+0x3ec>
			PORTJ &= 0xF0;
    41da:	80 91 05 01 	lds	r24, 0x0105
    41de:	80 7f       	andi	r24, 0xF0	; 240
    41e0:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    41e4:	12 b8       	out	0x02, r1	; 2
    41e6:	7a ce       	rjmp	.-780    	; 0x3edc <__vector_29+0xe0>
			//#warning "turn off pulse with 0 (hw rev 3.0)"
		}

		if(hardwareRevision == HW_REV_3_0_1) {
    41e8:	21 30       	cpi	r18, 0x01	; 1
    41ea:	19 f0       	breq	.+6      	; 0x41f2 <__vector_29+0x3f6>
			PORTJ = 0xFF;
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0.1)"
		}

		if(hardwareRevision == HW_REV_3_1) {
    41ec:	22 30       	cpi	r18, 0x02	; 2
    41ee:	09 f0       	breq	.+2      	; 0x41f2 <__vector_29+0x3f6>
    41f0:	75 ce       	rjmp	.-790    	; 0x3edc <__vector_29+0xe0>
			PORTJ = 0xFF;
    41f2:	8f ef       	ldi	r24, 0xFF	; 255
    41f4:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    41f8:	12 b8       	out	0x02, r1	; 2
    41fa:	70 ce       	rjmp	.-800    	; 0x3edc <__vector_29+0xe0>
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
    41fc:	90 91 d1 04 	lds	r25, 0x04D1
    4200:	95 30       	cpi	r25, 0x05	; 5
    4202:	09 f4       	brne	.+2      	; 0x4206 <__vector_29+0x40a>
    4204:	3e c2       	rjmp	.+1148   	; 0x4682 <__vector_29+0x886>
    4206:	96 30       	cpi	r25, 0x06	; 6
    4208:	08 f0       	brcs	.+2      	; 0x420c <__vector_29+0x410>
    420a:	cf c0       	rjmp	.+414    	; 0x43aa <__vector_29+0x5ae>
    420c:	92 30       	cpi	r25, 0x02	; 2
    420e:	09 f4       	brne	.+2      	; 0x4212 <__vector_29+0x416>
    4210:	a0 c2       	rjmp	.+1344   	; 0x4752 <__vector_29+0x956>
    4212:	93 30       	cpi	r25, 0x03	; 3
    4214:	08 f4       	brcc	.+2      	; 0x4218 <__vector_29+0x41c>
    4216:	71 c1       	rjmp	.+738    	; 0x44fa <__vector_29+0x6fe>
    4218:	93 30       	cpi	r25, 0x03	; 3
    421a:	09 f4       	brne	.+2      	; 0x421e <__vector_29+0x422>
    421c:	be c2       	rjmp	.+1404   	; 0x479a <__vector_29+0x99e>
    421e:	94 30       	cpi	r25, 0x04	; 4
    4220:	09 f0       	breq	.+2      	; 0x4224 <__vector_29+0x428>
    4222:	48 ce       	rjmp	.-880    	; 0x3eb4 <__vector_29+0xb8>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 4;
				break;

			case 4:
				currentAdChannel = currentProx+1;
    4224:	80 91 24 02 	lds	r24, 0x0224
    4228:	8f 5f       	subi	r24, 0xFF	; 255
    422a:	80 93 23 02 	sts	0x0223, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    422e:	86 e0       	ldi	r24, 0x06	; 6
    4230:	80 93 b9 02 	sts	0x02B9, r24
				irCommAdcRxState = 5;
    4234:	85 e0       	ldi	r24, 0x05	; 5
    4236:	80 93 d1 04 	sts	0x04D1, r24
    423a:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    423e:	3c ce       	rjmp	.-904    	; 0x3eb8 <__vector_29+0xbc>
			right_current_avg += value;
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
			break;

		case SAVE_TO_RIGHT_MOTOR_VEL:
			if(firstSampleRight > 0) {
    4240:	20 91 09 02 	lds	r18, 0x0209
    4244:	22 23       	and	r18, r18
    4246:	09 f4       	brne	.+2      	; 0x424a <__vector_29+0x44e>
    4248:	6e ce       	rjmp	.-804    	; 0x3f26 <__vector_29+0x12a>
			    // sometimes it was noticed that the velocity is sampled even if the pwm
			    // is in its active phase; as a workaround simply skip the samples in these
			    // cases
				if(((PINE & _BV(PE3))>>3) || ((PINE & _BV(PE4))>>4)) {  // if active phase for either forward or backward direction
    424a:	63 99       	sbic	0x0c, 3	; 12
    424c:	6c ce       	rjmp	.-808    	; 0x3f26 <__vector_29+0x12a>
    424e:	64 99       	sbic	0x0c, 4	; 12
    4250:	6a ce       	rjmp	.-812    	; 0x3f26 <__vector_29+0x12a>
					//LED_RED_ON;
					break;
				}
				firstSampleRight++;
    4252:	42 2f       	mov	r20, r18
    4254:	4f 5f       	subi	r20, 0xFF	; 255
    4256:	40 93 09 02 	sts	0x0209, r20
				if(firstSampleRight > 4) {				// to skip undesired samples (3 samples skipped) in which there could be glitches
    425a:	45 30       	cpi	r20, 0x05	; 5
    425c:	08 f4       	brcc	.+2      	; 0x4260 <__vector_29+0x464>
    425e:	63 ce       	rjmp	.-826    	; 0x3f26 <__vector_29+0x12a>
					if(pwm_right != 0) {
    4260:	20 91 f5 02 	lds	r18, 0x02F5
    4264:	30 91 f6 02 	lds	r19, 0x02F6
    4268:	21 15       	cp	r18, r1
    426a:	31 05       	cpc	r19, r1
    426c:	51 f0       	breq	.+20     	; 0x4282 <__vector_29+0x486>
						right_vel_sum += value;
    426e:	20 91 ef 02 	lds	r18, 0x02EF
    4272:	30 91 f0 02 	lds	r19, 0x02F0
    4276:	28 0f       	add	r18, r24
    4278:	39 1f       	adc	r19, r25
    427a:	30 93 f0 02 	sts	0x02F0, r19
    427e:	20 93 ef 02 	sts	0x02EF, r18
					}
					if(firstSampleRight==8) {			// number of samples to take for the speed computation (average of 4 samples)
    4282:	48 30       	cpi	r20, 0x08	; 8
    4284:	09 f0       	breq	.+2      	; 0x4288 <__vector_29+0x48c>
    4286:	4f ce       	rjmp	.-866    	; 0x3f26 <__vector_29+0x12a>
						firstSampleRight = 0;
    4288:	10 92 09 02 	sts	0x0209, r1
						compute_right_vel = 1;
    428c:	81 e0       	ldi	r24, 0x01	; 1
    428e:	80 93 08 02 	sts	0x0208, r24
    4292:	49 ce       	rjmp	.-878    	; 0x3f26 <__vector_29+0x12a>
			left_current_avg += value;
			left_current_avg = left_current_avg >> 1;
			break;

		case SAVE_TO_LEFT_MOTOR_VEL:
			if(firstSampleLeft > 0) {
    4294:	20 91 0a 02 	lds	r18, 0x020A
    4298:	22 23       	and	r18, r18
    429a:	09 f4       	brne	.+2      	; 0x429e <__vector_29+0x4a2>
    429c:	44 ce       	rjmp	.-888    	; 0x3f26 <__vector_29+0x12a>
				if(((PINH & _BV(PH3))>>3) || ((PINH & _BV(PH4))>>4)) {
    429e:	30 91 00 01 	lds	r19, 0x0100
    42a2:	33 fd       	sbrc	r19, 3
    42a4:	40 ce       	rjmp	.-896    	; 0x3f26 <__vector_29+0x12a>
    42a6:	30 91 00 01 	lds	r19, 0x0100
    42aa:	34 fd       	sbrc	r19, 4
    42ac:	3c ce       	rjmp	.-904    	; 0x3f26 <__vector_29+0x12a>
					//LED_RED_ON;
					break;
				}
				firstSampleLeft++;
    42ae:	42 2f       	mov	r20, r18
    42b0:	4f 5f       	subi	r20, 0xFF	; 255
    42b2:	40 93 0a 02 	sts	0x020A, r20
				if(firstSampleLeft > 4) {
    42b6:	45 30       	cpi	r20, 0x05	; 5
    42b8:	08 f4       	brcc	.+2      	; 0x42bc <__vector_29+0x4c0>
    42ba:	35 ce       	rjmp	.-918    	; 0x3f26 <__vector_29+0x12a>
					if(pwm_left != 0) {
    42bc:	20 91 f7 02 	lds	r18, 0x02F7
    42c0:	30 91 f8 02 	lds	r19, 0x02F8
    42c4:	21 15       	cp	r18, r1
    42c6:	31 05       	cpc	r19, r1
    42c8:	51 f0       	breq	.+20     	; 0x42de <__vector_29+0x4e2>
						left_vel_sum += value;
    42ca:	20 91 ed 02 	lds	r18, 0x02ED
    42ce:	30 91 ee 02 	lds	r19, 0x02EE
    42d2:	28 0f       	add	r18, r24
    42d4:	39 1f       	adc	r19, r25
    42d6:	30 93 ee 02 	sts	0x02EE, r19
    42da:	20 93 ed 02 	sts	0x02ED, r18
					}
					if(firstSampleLeft==8) {
    42de:	48 30       	cpi	r20, 0x08	; 8
    42e0:	09 f0       	breq	.+2      	; 0x42e4 <__vector_29+0x4e8>
    42e2:	21 ce       	rjmp	.-958    	; 0x3f26 <__vector_29+0x12a>
						firstSampleLeft = 0;
    42e4:	10 92 0a 02 	sts	0x020A, r1
						compute_left_vel = 1;
    42e8:	81 e0       	ldi	r24, 0x01	; 1
    42ea:	80 93 07 02 	sts	0x0207, r24
    42ee:	1b ce       	rjmp	.-970    	; 0x3f26 <__vector_29+0x12a>
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
		switch(irCommAdcTxState) {
    42f0:	83 30       	cpi	r24, 0x03	; 3
    42f2:	09 f4       	brne	.+2      	; 0x42f6 <__vector_29+0x4fa>
    42f4:	78 c0       	rjmp	.+240    	; 0x43e6 <__vector_29+0x5ea>
    42f6:	84 30       	cpi	r24, 0x04	; 4
    42f8:	09 f0       	breq	.+2      	; 0x42fc <__vector_29+0x500>
    42fa:	dc cd       	rjmp	.-1096   	; 0x3eb4 <__vector_29+0xb8>
				}
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ2;
				break;

			case IRCOMM_TX_ADC_TRANSMISSION_SEQ2:
				irCommTxDurationCycle++;
    42fc:	20 91 fe 04 	lds	r18, 0x04FE
    4300:	2f 5f       	subi	r18, 0xFF	; 255
    4302:	20 93 fe 04 	sts	0x04FE, r18
				if(irCommTxDurationCycle == irCommTxDuration) {
    4306:	30 e0       	ldi	r19, 0x00	; 0
    4308:	80 91 fa 04 	lds	r24, 0x04FA
    430c:	90 91 fb 04 	lds	r25, 0x04FB
    4310:	28 17       	cp	r18, r24
    4312:	39 07       	cpc	r19, r25
    4314:	09 f4       	brne	.+2      	; 0x4318 <__vector_29+0x51c>
    4316:	35 c1       	rjmp	.+618    	; 0x4582 <__vector_29+0x786>
						PORTA = 0x00;
						adcSaveDataTo = SKIP_SAMPLE;
						break;
					}
				}
				currentAdChannel = currentMotLeftChannel;
    4318:	80 91 25 02 	lds	r24, 0x0225
    431c:	80 93 23 02 	sts	0x0223, r24
				leftChannelPhase = leftMotorPhase;
    4320:	80 91 28 02 	lds	r24, 0x0228
    4324:	80 93 bc 02 	sts	0x02BC, r24
				if(rightChannelPhase == ACTIVE_PHASE) {
    4328:	80 91 bb 02 	lds	r24, 0x02BB
    432c:	88 23       	and	r24, r24
    432e:	09 f4       	brne	.+2      	; 0x4332 <__vector_29+0x536>
    4330:	c9 c0       	rjmp	.+402    	; 0x44c4 <__vector_29+0x6c8>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    4332:	81 30       	cpi	r24, 0x01	; 1
    4334:	09 f4       	brne	.+2      	; 0x4338 <__vector_29+0x53c>
    4336:	c2 c2       	rjmp	.+1412   	; 0x48bc <__vector_29+0xac0>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4338:	85 e0       	ldi	r24, 0x05	; 5
    433a:	80 93 b9 02 	sts	0x02B9, r24
				}
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ1;
    433e:	83 e0       	ldi	r24, 0x03	; 3
    4340:	80 93 f0 04 	sts	0x04F0, r24
    4344:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    4348:	b7 cd       	rjmp	.-1170   	; 0x3eb8 <__vector_29+0xbc>
				irCommAdcRxState = 0;
				break;

		}
	} else if(irCommMode==IRCOMM_MODE_SENSORS_SAMPLING) {
		switch(adcSamplingState) {
    434a:	83 30       	cpi	r24, 0x03	; 3
    434c:	09 f4       	brne	.+2      	; 0x4350 <__vector_29+0x554>
    434e:	44 c1       	rjmp	.+648    	; 0x45d8 <__vector_29+0x7dc>
    4350:	84 30       	cpi	r24, 0x04	; 4
    4352:	09 f0       	breq	.+2      	; 0x4356 <__vector_29+0x55a>
    4354:	b1 cd       	rjmp	.-1182   	; 0x3eb8 <__vector_29+0xbc>
				}
				adcSamplingState = 4;
				break;

			case 4:	// right motor
				currentAdChannel = currentMotRightChannel;
    4356:	90 91 26 02 	lds	r25, 0x0226
    435a:	90 93 23 02 	sts	0x0223, r25
				rightChannelPhase = rightMotorPhase;
    435e:	90 91 27 02 	lds	r25, 0x0227
    4362:	90 93 bb 02 	sts	0x02BB, r25
				if(leftChannelPhase == ACTIVE_PHASE) {
    4366:	90 91 bc 02 	lds	r25, 0x02BC
    436a:	99 23       	and	r25, r25
    436c:	09 f0       	breq	.+2      	; 0x4370 <__vector_29+0x574>
    436e:	56 c1       	rjmp	.+684    	; 0x461c <__vector_29+0x820>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    4370:	83 e0       	ldi	r24, 0x03	; 3
    4372:	80 93 b9 02 	sts	0x02B9, r24
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 0;
    4376:	10 92 ba 02 	sts	0x02BA, r1

				if(currentProx==14 && measBattery==1) {
    437a:	60 91 24 02 	lds	r22, 0x0224
    437e:	6e 30       	cpi	r22, 0x0E	; 14
    4380:	09 f4       	brne	.+2      	; 0x4384 <__vector_29+0x588>
    4382:	19 c2       	rjmp	.+1074   	; 0x47b6 <__vector_29+0x9ba>
					measBattery=2;
					SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
				}

				// turn on the IR pulses for the proximities only in their active phases
				if(currentProx & 0x01) {
    4384:	86 2f       	mov	r24, r22
    4386:	90 e0       	ldi	r25, 0x00	; 0
    4388:	60 ff       	sbrs	r22, 0
    438a:	94 cd       	rjmp	.-1240   	; 0x3eb4 <__vector_29+0xb8>
					if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
    438c:	60 31       	cpi	r22, 0x10	; 16
    438e:	08 f0       	brcs	.+2      	; 0x4392 <__vector_29+0x596>
    4390:	31 c2       	rjmp	.+1122   	; 0x47f4 <__vector_29+0x9f8>
											// PORTA for proximity sensors, PORTJ for ground sensors
						PORTA = (1 << (currentProx>>1));	// pulse on
    4392:	66 95       	lsr	r22
    4394:	81 e0       	ldi	r24, 0x01	; 1
    4396:	90 e0       	ldi	r25, 0x00	; 0
    4398:	02 c0       	rjmp	.+4      	; 0x439e <__vector_29+0x5a2>
    439a:	88 0f       	add	r24, r24
    439c:	99 1f       	adc	r25, r25
    439e:	6a 95       	dec	r22
    43a0:	e2 f7       	brpl	.-8      	; 0x439a <__vector_29+0x59e>
    43a2:	82 b9       	out	0x02, r24	; 2
    43a4:	80 91 ba 02 	lds	r24, 0x02BA
    43a8:	87 cd       	rjmp	.-1266   	; 0x3eb8 <__vector_29+0xbc>
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
    43aa:	98 30       	cpi	r25, 0x08	; 8
    43ac:	09 f4       	brne	.+2      	; 0x43b0 <__vector_29+0x5b4>
    43ae:	df c1       	rjmp	.+958    	; 0x476e <__vector_29+0x972>
    43b0:	99 30       	cpi	r25, 0x09	; 9
    43b2:	08 f4       	brcc	.+2      	; 0x43b6 <__vector_29+0x5ba>
    43b4:	8b c0       	rjmp	.+278    	; 0x44cc <__vector_29+0x6d0>
    43b6:	9a 30       	cpi	r25, 0x0A	; 10
    43b8:	09 f4       	brne	.+2      	; 0x43bc <__vector_29+0x5c0>
    43ba:	88 c1       	rjmp	.+784    	; 0x46cc <__vector_29+0x8d0>
    43bc:	9a 30       	cpi	r25, 0x0A	; 10
    43be:	08 f4       	brcc	.+2      	; 0x43c2 <__vector_29+0x5c6>
    43c0:	6d c1       	rjmp	.+730    	; 0x469c <__vector_29+0x8a0>
    43c2:	9b 30       	cpi	r25, 0x0B	; 11
    43c4:	09 f0       	breq	.+2      	; 0x43c8 <__vector_29+0x5cc>
    43c6:	76 cd       	rjmp	.-1300   	; 0x3eb4 <__vector_29+0xb8>
				}
				irCommAdcRxState = 11;
				break;

			case 11:
				currentAdChannel = 0;	// prox0
    43c8:	10 92 23 02 	sts	0x0223, r1
				if(rightChannelPhase == ACTIVE_PHASE) {
    43cc:	80 91 bb 02 	lds	r24, 0x02BB
    43d0:	88 23       	and	r24, r24
    43d2:	09 f0       	breq	.+2      	; 0x43d6 <__vector_29+0x5da>
    43d4:	5d c2       	rjmp	.+1210   	; 0x4890 <__vector_29+0xa94>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    43d6:	81 e0       	ldi	r24, 0x01	; 1
    43d8:	80 93 b9 02 	sts	0x02B9, r24
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				irCommAdcRxState = 0;
    43dc:	10 92 d1 04 	sts	0x04D1, r1
    43e0:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    43e4:	69 cd       	rjmp	.-1326   	; 0x3eb8 <__vector_29+0xbc>

			case IRCOMM_TX_ADC_WAIT_PREPARATION:
				break;

			case IRCOMM_TX_ADC_TRANSMISSION_SEQ1:
				irCommTxDurationCycle++;
    43e6:	20 91 fe 04 	lds	r18, 0x04FE
    43ea:	2f 5f       	subi	r18, 0xFF	; 255
    43ec:	20 93 fe 04 	sts	0x04FE, r18
				if(irCommTxDurationCycle == irCommTxDuration) {
    43f0:	30 e0       	ldi	r19, 0x00	; 0
    43f2:	80 91 fa 04 	lds	r24, 0x04FA
    43f6:	90 91 fb 04 	lds	r25, 0x04FB
    43fa:	28 17       	cp	r18, r24
    43fc:	39 07       	cpc	r19, r25
    43fe:	09 f4       	brne	.+2      	; 0x4402 <__vector_29+0x606>
    4400:	95 c0       	rjmp	.+298    	; 0x452c <__vector_29+0x730>
						PORTA = 0x00;
						adcSaveDataTo = SKIP_SAMPLE;
						break;
					}
				}	
				currentAdChannel = currentMotRightChannel;
    4402:	80 91 26 02 	lds	r24, 0x0226
    4406:	80 93 23 02 	sts	0x0223, r24
				rightChannelPhase = rightMotorPhase;
    440a:	80 91 27 02 	lds	r24, 0x0227
    440e:	80 93 bb 02 	sts	0x02BB, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    4412:	80 91 bc 02 	lds	r24, 0x02BC
    4416:	88 23       	and	r24, r24
    4418:	09 f4       	brne	.+2      	; 0x441c <__vector_29+0x620>
    441a:	50 c0       	rjmp	.+160    	; 0x44bc <__vector_29+0x6c0>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    441c:	81 30       	cpi	r24, 0x01	; 1
    441e:	09 f4       	brne	.+2      	; 0x4422 <__vector_29+0x626>
    4420:	49 c2       	rjmp	.+1170   	; 0x48b4 <__vector_29+0xab8>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4422:	85 e0       	ldi	r24, 0x05	; 5
    4424:	80 93 b9 02 	sts	0x02B9, r24
				}
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ2;
    4428:	84 e0       	ldi	r24, 0x04	; 4
    442a:	80 93 f0 04 	sts	0x04F0, r24
    442e:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    4432:	42 cd       	rjmp	.-1404   	; 0x3eb8 <__vector_29+0xbc>
	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
		switch(irCommAdcTxState) {
			case IRCOMM_TX_ADC_TURN_OFF_SENSORS:
				// turn off all proximity
				if(hardwareRevision == HW_REV_3_0) {
    4434:	20 91 4d 04 	lds	r18, 0x044D
    4438:	22 23       	and	r18, r18
    443a:	19 f5       	brne	.+70     	; 0x4482 <__vector_29+0x686>
					PORTJ &= 0xF0;	// ground
    443c:	80 91 05 01 	lds	r24, 0x0105
    4440:	80 7f       	andi	r24, 0xF0	; 240
    4442:	80 93 05 01 	sts	0x0105, r24
					PORTA = 0x00;	// proximity
    4446:	12 b8       	out	0x02, r1	; 2

				if(hardwareRevision == HW_REV_3_1) {
					PORTJ = 0xFF;	// ground
					PORTA = 0x00;	// proximtiy
				}
				currentAdChannel = currentMotLeftChannel;
    4448:	80 91 25 02 	lds	r24, 0x0225
    444c:	80 93 23 02 	sts	0x0223, r24
				leftChannelPhase = leftMotorPhase;
    4450:	80 91 28 02 	lds	r24, 0x0228
    4454:	80 93 bc 02 	sts	0x02BC, r24
				adcSaveDataTo = SKIP_SAMPLE;				
    4458:	85 e0       	ldi	r24, 0x05	; 5
    445a:	80 93 b9 02 	sts	0x02B9, r24
				irCommState = IRCOMM_TX_PREPARE_TRANSMISSION;
    445e:	80 93 c4 04 	sts	0x04C4, r24
				irCommTxWaitStartTime = getTime100MicroSec();
    4462:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <getTime100MicroSec>
    4466:	60 93 f3 04 	sts	0x04F3, r22
    446a:	70 93 f4 04 	sts	0x04F4, r23
    446e:	80 93 f5 04 	sts	0x04F5, r24
    4472:	90 93 f6 04 	sts	0x04F6, r25
				irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;
    4476:	82 e0       	ldi	r24, 0x02	; 2
    4478:	80 93 f0 04 	sts	0x04F0, r24
    447c:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    4480:	1b cd       	rjmp	.-1482   	; 0x3eb8 <__vector_29+0xbc>
				if(hardwareRevision == HW_REV_3_0) {
					PORTJ &= 0xF0;	// ground
					PORTA = 0x00;	// proximity
				}

				if(hardwareRevision == HW_REV_3_0_1) {
    4482:	21 30       	cpi	r18, 0x01	; 1
    4484:	11 f0       	breq	.+4      	; 0x448a <__vector_29+0x68e>
					PORTJ = 0xFF;	// ground
					PORTA = 0x00;	// proximity
				}

				if(hardwareRevision == HW_REV_3_1) {
    4486:	22 30       	cpi	r18, 0x02	; 2
    4488:	f9 f6       	brne	.-66     	; 0x4448 <__vector_29+0x64c>
					PORTJ = 0xFF;	// ground
    448a:	8f ef       	ldi	r24, 0xFF	; 255
    448c:	80 93 05 01 	sts	0x0105, r24
					PORTA = 0x00;	// proximtiy
    4490:	12 b8       	out	0x02, r1	; 2
    4492:	da cf       	rjmp	.-76     	; 0x4448 <__vector_29+0x64c>
		}
	} else if(irCommMode==IRCOMM_MODE_SENSORS_SAMPLING) {
		switch(adcSamplingState) {

			case 0:	// proximity
				currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
    4494:	80 91 24 02 	lds	r24, 0x0224
    4498:	86 95       	lsr	r24
    449a:	80 93 23 02 	sts	0x0223, r24
																// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
				if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
    449e:	80 91 bb 02 	lds	r24, 0x02BB
    44a2:	88 23       	and	r24, r24
    44a4:	09 f0       	breq	.+2      	; 0x44a8 <__vector_29+0x6ac>
    44a6:	c0 c0       	rjmp	.+384    	; 0x4628 <__vector_29+0x82c>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    44a8:	81 e0       	ldi	r24, 0x01	; 1
    44aa:	80 93 b9 02 	sts	0x02B9, r24
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 1;
    44ae:	81 e0       	ldi	r24, 0x01	; 1
    44b0:	80 93 ba 02 	sts	0x02BA, r24
				break;
    44b4:	01 cd       	rjmp	.-1534   	; 0x3eb8 <__vector_29+0xbc>
					} else {
						cliffDetectedFlag = 0;
						//LED_RED_OFF;
					}
				} else {
					cliffDetectedFlag = 0;
    44b6:	10 92 6c 04 	sts	0x046C, r1
    44ba:	27 ce       	rjmp	.-946    	; 0x410a <__vector_29+0x30e>
					}
				}	
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    44bc:	83 e0       	ldi	r24, 0x03	; 3
    44be:	80 93 b9 02 	sts	0x02B9, r24
    44c2:	b2 cf       	rjmp	.-156    	; 0x4428 <__vector_29+0x62c>
					}
				}
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    44c4:	81 e0       	ldi	r24, 0x01	; 1
    44c6:	80 93 b9 02 	sts	0x02B9, r24
    44ca:	39 cf       	rjmp	.-398    	; 0x433e <__vector_29+0x542>
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
    44cc:	96 30       	cpi	r25, 0x06	; 6
    44ce:	09 f4       	brne	.+2      	; 0x44d2 <__vector_29+0x6d6>
    44d0:	33 c1       	rjmp	.+614    	; 0x4738 <__vector_29+0x93c>
    44d2:	97 30       	cpi	r25, 0x07	; 7
    44d4:	09 f0       	breq	.+2      	; 0x44d8 <__vector_29+0x6dc>
    44d6:	ee cc       	rjmp	.-1572   	; 0x3eb4 <__vector_29+0xb8>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 7;
				break;

			case 7:
				currentAdChannel = currentMotLeftChannel;
    44d8:	80 91 25 02 	lds	r24, 0x0225
    44dc:	80 93 23 02 	sts	0x0223, r24
				leftChannelPhase = leftMotorPhase;
    44e0:	80 91 28 02 	lds	r24, 0x0228
    44e4:	80 93 bc 02 	sts	0x02BC, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    44e8:	86 e0       	ldi	r24, 0x06	; 6
    44ea:	80 93 b9 02 	sts	0x02B9, r24
				irCommAdcRxState = 8;
    44ee:	88 e0       	ldi	r24, 0x08	; 8
    44f0:	80 93 d1 04 	sts	0x04D1, r24
    44f4:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    44f8:	df cc       	rjmp	.-1602   	; 0x3eb8 <__vector_29+0xbc>
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
    44fa:	99 23       	and	r25, r25
    44fc:	09 f4       	brne	.+2      	; 0x4500 <__vector_29+0x704>
    44fe:	10 c1       	rjmp	.+544    	; 0x4720 <__vector_29+0x924>
    4500:	91 30       	cpi	r25, 0x01	; 1
    4502:	09 f0       	breq	.+2      	; 0x4506 <__vector_29+0x70a>
    4504:	d7 cc       	rjmp	.-1618   	; 0x3eb4 <__vector_29+0xb8>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 1;
				break;

			case 1:
				currentAdChannel = currentProx+1;
    4506:	80 91 24 02 	lds	r24, 0x0224
    450a:	8f 5f       	subi	r24, 0xFF	; 255
    450c:	80 93 23 02 	sts	0x0223, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    4510:	86 e0       	ldi	r24, 0x06	; 6
    4512:	80 93 b9 02 	sts	0x02B9, r24
				irCommAdcRxState = 2;
    4516:	82 e0       	ldi	r24, 0x02	; 2
    4518:	80 93 d1 04 	sts	0x04D1, r24
    451c:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    4520:	cb cc       	rjmp	.-1642   	; 0x3eb8 <__vector_29+0xbc>
					irCommMode = IRCOMM_MODE_RECEIVE;
				}
				if(irCommEnabled==IRCOMM_MODE_TRANSMIT_ONLY && currentProx==23) {
					irCommMode = IRCOMM_MODE_TRANSMIT;
					if(irCommTxByteEnqueued==1) {
						irCommAdcTxState = IRCOMM_TX_ADC_TURN_OFF_SENSORS;
    4522:	80 93 f0 04 	sts	0x04F0, r24
    4526:	80 91 ba 02 	lds	r24, 0x02BA
    452a:	c6 cc       	rjmp	.-1652   	; 0x3eb8 <__vector_29+0xbc>
				break;

			case IRCOMM_TX_ADC_TRANSMISSION_SEQ1:
				irCommTxDurationCycle++;
				if(irCommTxDurationCycle == irCommTxDuration) {
					irCommTxDurationCycle = 0;
    452c:	10 92 fe 04 	sts	0x04FE, r1
					if(irCommTxPulseState == 0) {
    4530:	80 91 f9 04 	lds	r24, 0x04F9
    4534:	88 23       	and	r24, r24
    4536:	09 f0       	breq	.+2      	; 0x453a <__vector_29+0x73e>
    4538:	b9 c1       	rjmp	.+882    	; 0x48ac <__vector_29+0xab0>
						irCommTxPulseState = 1;
    453a:	81 e0       	ldi	r24, 0x01	; 1
    453c:	80 93 f9 04 	sts	0x04F9, r24
						//PORTA = 0xFF;
						//PORTA = 0x01;
						PORTA = irCommTxSensorMask;
    4540:	80 91 ff 04 	lds	r24, 0x04FF
    4544:	82 b9       	out	0x02, r24	; 2
					} else {
						irCommTxPulseState = 0;
						PORTA = 0x00;
					}
					irCommTxSwitchCounter++;
    4546:	80 91 fd 04 	lds	r24, 0x04FD
    454a:	8f 5f       	subi	r24, 0xFF	; 255
    454c:	80 93 fd 04 	sts	0x04FD, r24
					if(irCommTxSwitchCounter == irCommTxSwitchCount) {
    4550:	90 91 fc 04 	lds	r25, 0x04FC
    4554:	89 17       	cp	r24, r25
    4556:	09 f0       	breq	.+2      	; 0x455a <__vector_29+0x75e>
    4558:	54 cf       	rjmp	.-344    	; 0x4402 <__vector_29+0x606>
						irCommTxPulseState = 0;
						PORTA = 0x00;
					}
					irCommTxSwitchCounter++;
					if(irCommTxSwitchCounter == irCommTxSwitchCount) {
						irCommTxBitCount++;
    455a:	80 91 f8 04 	lds	r24, 0x04F8
    455e:	8f 5f       	subi	r24, 0xFF	; 255
    4560:	80 93 f8 04 	sts	0x04F8, r24
						if(irCommTxBitCount==12) {
    4564:	8c 30       	cpi	r24, 0x0C	; 12
    4566:	09 f4       	brne	.+2      	; 0x456a <__vector_29+0x76e>
    4568:	d9 c1       	rjmp	.+946    	; 0x491c <__vector_29+0xb20>
							if(irCommEnabled == IRCOMM_MODE_TRANSMIT) {
								adcSamplingState = 0;
								irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
							}
						} else {
							irCommState = IRCOMM_TX_COMPUTE_TIMINGS;
    456a:	82 e0       	ldi	r24, 0x02	; 2
    456c:	80 93 c4 04 	sts	0x04C4, r24
						}
						irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;
    4570:	80 93 f0 04 	sts	0x04F0, r24
						if((irCommTxBitCount==12) && (irCommEnabled==IRCOMM_MODE_TRANSMIT_ONLY)) {
							irCommAdcTxState = IRCOMM_TX_ADC_IDLE;
							updateBlueLed(255);
						}
						PORTA = 0x00;
    4574:	12 b8       	out	0x02, r1	; 2
						adcSaveDataTo = SKIP_SAMPLE;
    4576:	85 e0       	ldi	r24, 0x05	; 5
    4578:	80 93 b9 02 	sts	0x02B9, r24
    457c:	80 91 ba 02 	lds	r24, 0x02BA
						break;
    4580:	9b cc       	rjmp	.-1738   	; 0x3eb8 <__vector_29+0xbc>
				break;

			case IRCOMM_TX_ADC_TRANSMISSION_SEQ2:
				irCommTxDurationCycle++;
				if(irCommTxDurationCycle == irCommTxDuration) {
					irCommTxDurationCycle = 0;
    4582:	10 92 fe 04 	sts	0x04FE, r1
					if(irCommTxPulseState == 0) {
    4586:	80 91 f9 04 	lds	r24, 0x04F9
    458a:	88 23       	and	r24, r24
    458c:	09 f0       	breq	.+2      	; 0x4590 <__vector_29+0x794>
    458e:	75 c1       	rjmp	.+746    	; 0x487a <__vector_29+0xa7e>
						irCommTxPulseState = 1;
    4590:	81 e0       	ldi	r24, 0x01	; 1
    4592:	80 93 f9 04 	sts	0x04F9, r24
						//PORTA = 0xFF;
						//PORTA = 0x01;
						PORTA = irCommTxSensorMask;
    4596:	80 91 ff 04 	lds	r24, 0x04FF
    459a:	82 b9       	out	0x02, r24	; 2
					} else {
						irCommTxPulseState = 0;
						PORTA = 0x00;
					}
					irCommTxSwitchCounter++;
    459c:	80 91 fd 04 	lds	r24, 0x04FD
    45a0:	8f 5f       	subi	r24, 0xFF	; 255
    45a2:	80 93 fd 04 	sts	0x04FD, r24
					if(irCommTxSwitchCounter == irCommTxSwitchCount) {
    45a6:	90 91 fc 04 	lds	r25, 0x04FC
    45aa:	89 17       	cp	r24, r25
    45ac:	09 f0       	breq	.+2      	; 0x45b0 <__vector_29+0x7b4>
    45ae:	b4 ce       	rjmp	.-664    	; 0x4318 <__vector_29+0x51c>
    45b0:	d4 cf       	rjmp	.-88     	; 0x455a <__vector_29+0x75e>
					}					
				}
				break;

			case 2:	// right motor
				currentAdChannel = currentMotRightChannel;
    45b2:	80 91 26 02 	lds	r24, 0x0226
    45b6:	80 93 23 02 	sts	0x0223, r24
				rightChannelPhase = rightMotorPhase;
    45ba:	80 91 27 02 	lds	r24, 0x0227
    45be:	80 93 bb 02 	sts	0x02BB, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    45c2:	80 91 bc 02 	lds	r24, 0x02BC
    45c6:	88 23       	and	r24, r24
    45c8:	b1 f5       	brne	.+108    	; 0x4636 <__vector_29+0x83a>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    45ca:	83 e0       	ldi	r24, 0x03	; 3
    45cc:	80 93 b9 02 	sts	0x02B9, r24
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 3;
    45d0:	83 e0       	ldi	r24, 0x03	; 3
    45d2:	80 93 ba 02 	sts	0x02BA, r24
				break;
    45d6:	70 cc       	rjmp	.-1824   	; 0x3eb8 <__vector_29+0xbc>

			case 3:	// left motor
				currentAdChannel = currentMotLeftChannel;
    45d8:	80 91 25 02 	lds	r24, 0x0225
    45dc:	80 93 23 02 	sts	0x0223, r24
				leftChannelPhase = leftMotorPhase;
    45e0:	80 91 28 02 	lds	r24, 0x0228
    45e4:	80 93 bc 02 	sts	0x02BC, r24
				if(rightChannelPhase == ACTIVE_PHASE) {
    45e8:	80 91 bb 02 	lds	r24, 0x02BB
    45ec:	88 23       	and	r24, r24
    45ee:	51 f5       	brne	.+84     	; 0x4644 <__vector_29+0x848>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    45f0:	81 e0       	ldi	r24, 0x01	; 1
    45f2:	80 93 b9 02 	sts	0x02B9, r24
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 4;
    45f6:	84 e0       	ldi	r24, 0x04	; 4
    45f8:	80 93 ba 02 	sts	0x02BA, r24
				break;
    45fc:	5d cc       	rjmp	.-1862   	; 0x3eb8 <__vector_29+0xbc>
			}
			currentProx++;
			break;

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    45fe:	20 91 bf 02 	lds	r18, 0x02BF
    4602:	22 30       	cpi	r18, 0x02	; 2
    4604:	09 f0       	breq	.+2      	; 0x4608 <__vector_29+0x80c>
    4606:	fe cc       	rjmp	.-1540   	; 0x4004 <__vector_29+0x208>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
    4608:	90 93 be 02 	sts	0x02BE, r25
    460c:	80 93 bd 02 	sts	0x02BD, r24
				measBattery = 0;
    4610:	10 92 bf 02 	sts	0x02BF, r1
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
    4614:	46 98       	cbi	0x08, 6	; 8
    4616:	2e e0       	ldi	r18, 0x0E	; 14
    4618:	30 e0       	ldi	r19, 0x00	; 0
    461a:	fd cc       	rjmp	.-1542   	; 0x4016 <__vector_29+0x21a>
			case 4:	// right motor
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    461c:	91 30       	cpi	r25, 0x01	; 1
    461e:	09 f0       	breq	.+2      	; 0x4622 <__vector_29+0x826>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4620:	85 e0       	ldi	r24, 0x05	; 5
    4622:	80 93 b9 02 	sts	0x02B9, r24
    4626:	a7 ce       	rjmp	.-690    	; 0x4376 <__vector_29+0x57a>
			case 0:	// proximity
				currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
																// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
				if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    4628:	81 30       	cpi	r24, 0x01	; 1
    462a:	09 f4       	brne	.+2      	; 0x462e <__vector_29+0x832>
    462c:	4b c1       	rjmp	.+662    	; 0x48c4 <__vector_29+0xac8>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    462e:	85 e0       	ldi	r24, 0x05	; 5
    4630:	80 93 b9 02 	sts	0x02B9, r24
    4634:	3c cf       	rjmp	.-392    	; 0x44ae <__vector_29+0x6b2>
			case 2:	// right motor
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    4636:	81 30       	cpi	r24, 0x01	; 1
    4638:	09 f4       	brne	.+2      	; 0x463c <__vector_29+0x840>
    463a:	48 c1       	rjmp	.+656    	; 0x48cc <__vector_29+0xad0>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    463c:	85 e0       	ldi	r24, 0x05	; 5
    463e:	80 93 b9 02 	sts	0x02B9, r24
    4642:	c6 cf       	rjmp	.-116    	; 0x45d0 <__vector_29+0x7d4>
			case 3:	// left motor
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    4644:	81 30       	cpi	r24, 0x01	; 1
    4646:	09 f4       	brne	.+2      	; 0x464a <__vector_29+0x84e>
    4648:	45 c1       	rjmp	.+650    	; 0x48d4 <__vector_29+0xad8>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    464a:	85 e0       	ldi	r24, 0x05	; 5
    464c:	80 93 b9 02 	sts	0x02B9, r24
    4650:	d2 cf       	rjmp	.-92     	; 0x45f6 <__vector_29+0x7fa>
					proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
				//} else {	// ground
				//	proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx];
				//}
				if(proximityResult[currentProx>>1] < 0) {
					proximityResult[currentProx>>1] = 0;
    4652:	11 82       	std	Z+1, r1	; 0x01
    4654:	10 82       	st	Z, r1
    4656:	80 e0       	ldi	r24, 0x00	; 0
    4658:	90 e0       	ldi	r25, 0x00	; 0
    465a:	0a cd       	rjmp	.-1516   	; 0x4070 <__vector_29+0x274>
					
					if(proximityResult[currentProx>>1] < PHASE1) {

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
    465c:	ac 01       	movw	r20, r24
    465e:	44 5c       	subi	r20, 0xC4	; 196
    4660:	5f 4f       	sbci	r21, 0xFF	; 255
    4662:	55 95       	asr	r21
    4664:	47 95       	ror	r20
    4666:	48 37       	cpi	r20, 0x78	; 120
    4668:	51 05       	cpc	r21, r1
    466a:	0c f0       	brlt	.+2      	; 0x466e <__vector_29+0x872>
    466c:	ec c0       	rjmp	.+472    	; 0x4846 <__vector_29+0xa4a>
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;
    466e:	2f 53       	subi	r18, 0x3F	; 63
    4670:	3d 4f       	sbci	r19, 0xFD	; 253
    4672:	cc 97       	sbiw	r24, 0x3c	; 60
    4674:	95 95       	asr	r25
    4676:	87 95       	ror	r24
    4678:	cc 96       	adiw	r24, 0x3c	; 60
    467a:	f9 01       	movw	r30, r18
    467c:	91 83       	std	Z+1, r25	; 0x01
    467e:	80 83       	st	Z, r24
    4680:	03 cd       	rjmp	.-1530   	; 0x4088 <__vector_29+0x28c>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 5;
				break;

			case 5:
				currentAdChannel = currentProx+1;
    4682:	80 91 24 02 	lds	r24, 0x0224
    4686:	8f 5f       	subi	r24, 0xFF	; 255
    4688:	80 93 23 02 	sts	0x0223, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    468c:	86 e0       	ldi	r24, 0x06	; 6
    468e:	80 93 b9 02 	sts	0x02B9, r24
				irCommAdcRxState = 6;
    4692:	80 93 d1 04 	sts	0x04D1, r24
    4696:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    469a:	0e cc       	rjmp	.-2020   	; 0x3eb8 <__vector_29+0xbc>
				}
				irCommAdcRxState = 9;
				break;

			case 9:
				currentAdChannel = currentMotLeftChannel;
    469c:	90 91 25 02 	lds	r25, 0x0225
    46a0:	90 93 23 02 	sts	0x0223, r25
				leftChannelPhase = leftMotorPhase;
    46a4:	90 91 28 02 	lds	r25, 0x0228
    46a8:	90 93 bc 02 	sts	0x02BC, r25
				if(rightChannelPhase == ACTIVE_PHASE) {
    46ac:	90 91 bb 02 	lds	r25, 0x02BB
    46b0:	99 23       	and	r25, r25
    46b2:	21 f0       	breq	.+8      	; 0x46bc <__vector_29+0x8c0>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    46b4:	91 30       	cpi	r25, 0x01	; 1
    46b6:	09 f4       	brne	.+2      	; 0x46ba <__vector_29+0x8be>
    46b8:	47 c1       	rjmp	.+654    	; 0x4948 <__vector_29+0xb4c>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    46ba:	85 e0       	ldi	r24, 0x05	; 5
    46bc:	80 93 b9 02 	sts	0x02B9, r24
				}
				irCommAdcRxState = 10;
    46c0:	8a e0       	ldi	r24, 0x0A	; 10
    46c2:	80 93 d1 04 	sts	0x04D1, r24
    46c6:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    46ca:	f6 cb       	rjmp	.-2068   	; 0x3eb8 <__vector_29+0xbc>

			case 10:
				currentAdChannel = currentMotRightChannel;
    46cc:	80 91 26 02 	lds	r24, 0x0226
    46d0:	80 93 23 02 	sts	0x0223, r24
				rightChannelPhase = rightMotorPhase;
    46d4:	80 91 27 02 	lds	r24, 0x0227
    46d8:	80 93 bb 02 	sts	0x02BB, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    46dc:	80 91 bc 02 	lds	r24, 0x02BC
    46e0:	88 23       	and	r24, r24
    46e2:	09 f0       	breq	.+2      	; 0x46e6 <__vector_29+0x8ea>
    46e4:	ce c0       	rjmp	.+412    	; 0x4882 <__vector_29+0xa86>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    46e6:	83 e0       	ldi	r24, 0x03	; 3
    46e8:	80 93 b9 02 	sts	0x02B9, r24
					}
				} else {
					irCommRxWindowSamples++;
				}
				*/
				if(irCommRxBitSkipped < 254) {	// safety check
    46ec:	90 91 ec 04 	lds	r25, 0x04EC
    46f0:	9e 3f       	cpi	r25, 0xFE	; 254
    46f2:	18 f4       	brcc	.+6      	; 0x46fa <__vector_29+0x8fe>
					irCommRxBitSkipped++;
    46f4:	9f 5f       	subi	r25, 0xFF	; 255
    46f6:	90 93 ec 04 	sts	0x04EC, r25
				}
				irCommRxWindowSamples++;
    46fa:	80 91 d2 04 	lds	r24, 0x04D2
    46fe:	8f 5f       	subi	r24, 0xFF	; 255
    4700:	80 93 d2 04 	sts	0x04D2, r24
				if(irCommState==IRCOMM_RX_SYNC_SIGNAL) {
    4704:	20 91 c4 04 	lds	r18, 0x04C4
    4708:	24 30       	cpi	r18, 0x04	; 4
    470a:	09 f4       	brne	.+2      	; 0x470e <__vector_29+0x912>
    470c:	f7 c0       	rjmp	.+494    	; 0x48fc <__vector_29+0xb00>
					if(irCommRxBitSkipped >= irCommShiftCount) {
						irCommState = IRCOMM_RX_WAITING_BIT;
					}
				}

				if(irCommRxWindowSamples == IRCOMM_SAMPLING_WINDOW) {					
    470e:	84 31       	cpi	r24, 0x14	; 20
    4710:	09 f4       	brne	.+2      	; 0x4714 <__vector_29+0x918>
    4712:	2a c1       	rjmp	.+596    	; 0x4968 <__vector_29+0xb6c>
					//}
					if(irCommState == IRCOMM_RX_WAITING_BIT) {
						irCommState = IRCOMM_RX_READ_BIT;
					}
				}
				irCommAdcRxState = 11;
    4714:	8b e0       	ldi	r24, 0x0B	; 11
    4716:	80 93 d1 04 	sts	0x04D1, r24
    471a:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    471e:	cc cb       	rjmp	.-2152   	; 0x3eb8 <__vector_29+0xbc>

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
			case 0:				
				currentProx = 0;
    4720:	10 92 24 02 	sts	0x0224, r1
				currentAdChannel = currentProx+1;				
    4724:	80 93 23 02 	sts	0x0223, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    4728:	96 e0       	ldi	r25, 0x06	; 6
    472a:	90 93 b9 02 	sts	0x02B9, r25
				irCommAdcRxState = 1;
    472e:	80 93 d1 04 	sts	0x04D1, r24
    4732:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    4736:	c0 cb       	rjmp	.-2176   	; 0x3eb8 <__vector_29+0xbc>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 6;
				break;

			case 6:
				currentAdChannel = currentProx+1;
    4738:	80 91 24 02 	lds	r24, 0x0224
    473c:	8f 5f       	subi	r24, 0xFF	; 255
    473e:	80 93 23 02 	sts	0x0223, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    4742:	90 93 b9 02 	sts	0x02B9, r25
				irCommAdcRxState = 7;
    4746:	87 e0       	ldi	r24, 0x07	; 7
    4748:	80 93 d1 04 	sts	0x04D1, r24
    474c:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    4750:	b3 cb       	rjmp	.-2202   	; 0x3eb8 <__vector_29+0xbc>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 2;
				break;

			case 2:
				currentAdChannel = currentProx+1;
    4752:	80 91 24 02 	lds	r24, 0x0224
    4756:	8f 5f       	subi	r24, 0xFF	; 255
    4758:	80 93 23 02 	sts	0x0223, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    475c:	86 e0       	ldi	r24, 0x06	; 6
    475e:	80 93 b9 02 	sts	0x02B9, r24
				irCommAdcRxState = 3;
    4762:	83 e0       	ldi	r24, 0x03	; 3
    4764:	80 93 d1 04 	sts	0x04D1, r24
    4768:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    476c:	a5 cb       	rjmp	.-2230   	; 0x3eb8 <__vector_29+0xbc>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 8;
				break;

			case 8:
				currentAdChannel = currentMotRightChannel;
    476e:	80 91 26 02 	lds	r24, 0x0226
    4772:	80 93 23 02 	sts	0x0223, r24
				rightChannelPhase = rightMotorPhase;
    4776:	80 91 27 02 	lds	r24, 0x0227
    477a:	80 93 bb 02 	sts	0x02BB, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    477e:	80 91 bc 02 	lds	r24, 0x02BC
    4782:	88 23       	and	r24, r24
    4784:	09 f0       	breq	.+2      	; 0x4788 <__vector_29+0x98c>
    4786:	8b c0       	rjmp	.+278    	; 0x489e <__vector_29+0xaa2>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    4788:	83 e0       	ldi	r24, 0x03	; 3
    478a:	80 93 b9 02 	sts	0x02B9, r24
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				irCommAdcRxState = 9;
    478e:	89 e0       	ldi	r24, 0x09	; 9
    4790:	80 93 d1 04 	sts	0x04D1, r24
    4794:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    4798:	8f cb       	rjmp	.-2274   	; 0x3eb8 <__vector_29+0xbc>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 3;
				break;

			case 3:
				currentAdChannel = currentProx+1;
    479a:	80 91 24 02 	lds	r24, 0x0224
    479e:	8f 5f       	subi	r24, 0xFF	; 255
    47a0:	80 93 23 02 	sts	0x0223, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    47a4:	86 e0       	ldi	r24, 0x06	; 6
    47a6:	80 93 b9 02 	sts	0x02B9, r24
				irCommAdcRxState = 4;
    47aa:	84 e0       	ldi	r24, 0x04	; 4
    47ac:	80 93 d1 04 	sts	0x04D1, r24
    47b0:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    47b4:	81 cb       	rjmp	.-2302   	; 0x3eb8 <__vector_29+0xbc>
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 0;

				if(currentProx==14 && measBattery==1) {
    47b6:	80 91 bf 02 	lds	r24, 0x02BF
    47ba:	81 30       	cpi	r24, 0x01	; 1
    47bc:	09 f4       	brne	.+2      	; 0x47c0 <__vector_29+0x9c4>
    47be:	a9 c0       	rjmp	.+338    	; 0x4912 <__vector_29+0xb16>
    47c0:	80 e0       	ldi	r24, 0x00	; 0
    47c2:	7a cb       	rjmp	.-2316   	; 0x3eb8 <__vector_29+0xbc>
					irCommRxWindowSamples = 0;
					memset(irCommMaxSensorValueAdc, 0x00, 16);
					memset(irCommMinSensorValueAdc, 0xFF, 16);
					irCommMode = IRCOMM_MODE_RECEIVE;
				}
				if(irCommEnabled==IRCOMM_MODE_TRANSMIT && currentProx==23) {
    47c4:	80 91 24 02 	lds	r24, 0x0224
    47c8:	87 31       	cpi	r24, 0x17	; 23
    47ca:	09 f0       	breq	.+2      	; 0x47ce <__vector_29+0x9d2>
    47cc:	73 cb       	rjmp	.-2330   	; 0x3eb4 <__vector_29+0xb8>
					irCommMode = IRCOMM_MODE_TRANSMIT;
    47ce:	10 93 c3 04 	sts	0x04C3, r17
					if(irCommTxByteEnqueued==1) {
    47d2:	80 91 f2 04 	lds	r24, 0x04F2
    47d6:	81 30       	cpi	r24, 0x01	; 1
    47d8:	09 f4       	brne	.+2      	; 0x47dc <__vector_29+0x9e0>
    47da:	a3 ce       	rjmp	.-698    	; 0x4522 <__vector_29+0x726>
						irCommAdcTxState = IRCOMM_TX_ADC_TURN_OFF_SENSORS;
					} else {
						irCommMode=IRCOMM_MODE_SENSORS_SAMPLING; // no data to be transmitted, restart sensors sampling
    47dc:	10 92 c3 04 	sts	0x04C3, r1
    47e0:	80 91 ba 02 	lds	r24, 0x02BA
    47e4:	69 cb       	rjmp	.-2350   	; 0x3eb8 <__vector_29+0xbc>
			case 1:	// left motor
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				adcSaveDataTo = SAVE_TO_PROX;
				adcSamplingState = 2;
				if(irCommEnabled==IRCOMM_MODE_RECEIVE && currentProx==23) {					
    47e6:	80 91 24 02 	lds	r24, 0x0224
    47ea:	87 31       	cpi	r24, 0x17	; 23
    47ec:	09 f4       	brne	.+2      	; 0x47f0 <__vector_29+0x9f4>
    47ee:	10 c1       	rjmp	.+544    	; 0x4a10 <__vector_29+0xc14>
    47f0:	82 e0       	ldi	r24, 0x02	; 2
    47f2:	62 cb       	rjmp	.-2364   	; 0x3eb8 <__vector_29+0xbc>
				if(currentProx & 0x01) {
					if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
											// PORTA for proximity sensors, PORTJ for ground sensors
						PORTA = (1 << (currentProx>>1));	// pulse on
					} else {
						if(hardwareRevision == HW_REV_3_0) {
    47f4:	20 91 4d 04 	lds	r18, 0x044D
    47f8:	22 23       	and	r18, r18
    47fa:	79 f4       	brne	.+30     	; 0x481a <__vector_29+0xa1e>
							PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
    47fc:	40 97       	sbiw	r24, 0x10	; 16
    47fe:	95 95       	asr	r25
    4800:	87 95       	ror	r24
    4802:	21 e0       	ldi	r18, 0x01	; 1
    4804:	30 e0       	ldi	r19, 0x00	; 0
    4806:	02 c0       	rjmp	.+4      	; 0x480c <__vector_29+0xa10>
    4808:	22 0f       	add	r18, r18
    480a:	33 1f       	adc	r19, r19
    480c:	8a 95       	dec	r24
    480e:	e2 f7       	brpl	.-8      	; 0x4808 <__vector_29+0xa0c>
    4810:	20 93 05 01 	sts	0x0105, r18
    4814:	80 91 ba 02 	lds	r24, 0x02BA
    4818:	4f cb       	rjmp	.-2402   	; 0x3eb8 <__vector_29+0xbc>
						}

						if(hardwareRevision == HW_REV_3_0_1) {
    481a:	21 30       	cpi	r18, 0x01	; 1
    481c:	19 f0       	breq	.+6      	; 0x4824 <__vector_29+0xa28>
							PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
						}

						if(hardwareRevision == HW_REV_3_1) {
    481e:	22 30       	cpi	r18, 0x02	; 2
    4820:	09 f0       	breq	.+2      	; 0x4824 <__vector_29+0xa28>
    4822:	48 cb       	rjmp	.-2416   	; 0x3eb4 <__vector_29+0xb8>
							PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
    4824:	40 91 05 01 	lds	r20, 0x0105
    4828:	40 97       	sbiw	r24, 0x10	; 16
    482a:	95 95       	asr	r25
    482c:	87 95       	ror	r24
    482e:	21 e0       	ldi	r18, 0x01	; 1
    4830:	30 e0       	ldi	r19, 0x00	; 0
    4832:	02 c0       	rjmp	.+4      	; 0x4838 <__vector_29+0xa3c>
    4834:	22 0f       	add	r18, r18
    4836:	33 1f       	adc	r19, r19
    4838:	8a 95       	dec	r24
    483a:	e2 f7       	brpl	.-8      	; 0x4834 <__vector_29+0xa38>
    483c:	20 95       	com	r18
    483e:	24 23       	and	r18, r20
    4840:	20 93 05 01 	sts	0x0105, r18
    4844:	37 cb       	rjmp	.-2450   	; 0x3eb4 <__vector_29+0xb8>

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;

					} else if(((proximityResult[currentProx>>1]+300)>>2) < PHASE3) {
    4846:	ac 01       	movw	r20, r24
    4848:	44 5d       	subi	r20, 0xD4	; 212
    484a:	5e 4f       	sbci	r21, 0xFE	; 254
    484c:	55 95       	asr	r21
    484e:	47 95       	ror	r20
    4850:	55 95       	asr	r21
    4852:	47 95       	ror	r20
    4854:	44 3b       	cpi	r20, 0xB4	; 180
    4856:	51 05       	cpc	r21, r1
    4858:	0c f0       	brlt	.+2      	; 0x485c <__vector_29+0xa60>
    485a:	40 c0       	rjmp	.+128    	; 0x48dc <__vector_29+0xae0>

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-180)>>2) + PHASE2;
    485c:	2f 53       	subi	r18, 0x3F	; 63
    485e:	3d 4f       	sbci	r19, 0xFD	; 253
    4860:	84 5b       	subi	r24, 0xB4	; 180
    4862:	90 40       	sbci	r25, 0x00	; 0
    4864:	95 95       	asr	r25
    4866:	87 95       	ror	r24
    4868:	95 95       	asr	r25
    486a:	87 95       	ror	r24
    486c:	88 58       	subi	r24, 0x88	; 136
    486e:	9f 4f       	sbci	r25, 0xFF	; 255
    4870:	d9 01       	movw	r26, r18
    4872:	11 96       	adiw	r26, 0x01	; 1
    4874:	9c 93       	st	X, r25
    4876:	8e 93       	st	-X, r24
    4878:	07 cc       	rjmp	.-2034   	; 0x4088 <__vector_29+0x28c>
						irCommTxPulseState = 1;
						//PORTA = 0xFF;
						//PORTA = 0x01;
						PORTA = irCommTxSensorMask;
					} else {
						irCommTxPulseState = 0;
    487a:	10 92 f9 04 	sts	0x04F9, r1
						PORTA = 0x00;
    487e:	12 b8       	out	0x02, r1	; 2
    4880:	8d ce       	rjmp	.-742    	; 0x459c <__vector_29+0x7a0>
			case 10:
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    4882:	81 30       	cpi	r24, 0x01	; 1
    4884:	09 f4       	brne	.+2      	; 0x4888 <__vector_29+0xa8c>
    4886:	64 c0       	rjmp	.+200    	; 0x4950 <__vector_29+0xb54>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4888:	85 e0       	ldi	r24, 0x05	; 5
    488a:	80 93 b9 02 	sts	0x02B9, r24
    488e:	2e cf       	rjmp	.-420    	; 0x46ec <__vector_29+0x8f0>

			case 11:
				currentAdChannel = 0;	// prox0
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    4890:	81 30       	cpi	r24, 0x01	; 1
    4892:	09 f4       	brne	.+2      	; 0x4896 <__vector_29+0xa9a>
    4894:	61 c0       	rjmp	.+194    	; 0x4958 <__vector_29+0xb5c>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4896:	85 e0       	ldi	r24, 0x05	; 5
    4898:	80 93 b9 02 	sts	0x02B9, r24
    489c:	9f cd       	rjmp	.-1218   	; 0x43dc <__vector_29+0x5e0>
			case 8:
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    489e:	81 30       	cpi	r24, 0x01	; 1
    48a0:	09 f4       	brne	.+2      	; 0x48a4 <__vector_29+0xaa8>
    48a2:	5e c0       	rjmp	.+188    	; 0x4960 <__vector_29+0xb64>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    48a4:	85 e0       	ldi	r24, 0x05	; 5
    48a6:	80 93 b9 02 	sts	0x02B9, r24
    48aa:	71 cf       	rjmp	.-286    	; 0x478e <__vector_29+0x992>
						irCommTxPulseState = 1;
						//PORTA = 0xFF;
						//PORTA = 0x01;
						PORTA = irCommTxSensorMask;
					} else {
						irCommTxPulseState = 0;
    48ac:	10 92 f9 04 	sts	0x04F9, r1
						PORTA = 0x00;
    48b0:	12 b8       	out	0x02, r1	; 2
    48b2:	49 ce       	rjmp	.-878    	; 0x4546 <__vector_29+0x74a>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    48b4:	84 e0       	ldi	r24, 0x04	; 4
    48b6:	80 93 b9 02 	sts	0x02B9, r24
    48ba:	b6 cd       	rjmp	.-1172   	; 0x4428 <__vector_29+0x62c>
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    48bc:	82 e0       	ldi	r24, 0x02	; 2
    48be:	80 93 b9 02 	sts	0x02B9, r24
    48c2:	3d cd       	rjmp	.-1414   	; 0x433e <__vector_29+0x542>
				currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
																// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
				if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    48c4:	82 e0       	ldi	r24, 0x02	; 2
    48c6:	80 93 b9 02 	sts	0x02B9, r24
    48ca:	f1 cd       	rjmp	.-1054   	; 0x44ae <__vector_29+0x6b2>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    48cc:	84 e0       	ldi	r24, 0x04	; 4
    48ce:	80 93 b9 02 	sts	0x02B9, r24
    48d2:	7e ce       	rjmp	.-772    	; 0x45d0 <__vector_29+0x7d4>
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    48d4:	82 e0       	ldi	r24, 0x02	; 2
    48d6:	80 93 b9 02 	sts	0x02B9, r24
    48da:	8d ce       	rjmp	.-742    	; 0x45f6 <__vector_29+0x7fa>

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-180)>>2) + PHASE2;

					} else {

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-420)>>3) + PHASE3;
    48dc:	2f 53       	subi	r18, 0x3F	; 63
    48de:	3d 4f       	sbci	r19, 0xFD	; 253
    48e0:	84 5a       	subi	r24, 0xA4	; 164
    48e2:	91 40       	sbci	r25, 0x01	; 1
    48e4:	95 95       	asr	r25
    48e6:	87 95       	ror	r24
    48e8:	95 95       	asr	r25
    48ea:	87 95       	ror	r24
    48ec:	95 95       	asr	r25
    48ee:	87 95       	ror	r24
    48f0:	8c 54       	subi	r24, 0x4C	; 76
    48f2:	9f 4f       	sbci	r25, 0xFF	; 255
    48f4:	f9 01       	movw	r30, r18
    48f6:	91 83       	std	Z+1, r25	; 0x01
    48f8:	80 83       	st	Z, r24
    48fa:	c6 cb       	rjmp	.-2164   	; 0x4088 <__vector_29+0x28c>
				if(irCommRxBitSkipped < 254) {	// safety check
					irCommRxBitSkipped++;
				}
				irCommRxWindowSamples++;
				if(irCommState==IRCOMM_RX_SYNC_SIGNAL) {
					irCommRxWindowSamples = 0;
    48fc:	10 92 d2 04 	sts	0x04D2, r1
					if(irCommRxBitSkipped >= irCommShiftCount) {
    4900:	80 91 dc 04 	lds	r24, 0x04DC
    4904:	98 17       	cp	r25, r24
    4906:	08 f4       	brcc	.+2      	; 0x490a <__vector_29+0xb0e>
    4908:	05 cf       	rjmp	.-502    	; 0x4714 <__vector_29+0x918>
						irCommState = IRCOMM_RX_WAITING_BIT;
    490a:	85 e0       	ldi	r24, 0x05	; 5
    490c:	80 93 c4 04 	sts	0x04C4, r24
    4910:	01 cf       	rjmp	.-510    	; 0x4714 <__vector_29+0x918>
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 0;

				if(currentProx==14 && measBattery==1) {
					measBattery=2;
    4912:	82 e0       	ldi	r24, 0x02	; 2
    4914:	80 93 bf 02 	sts	0x02BF, r24
					SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
    4918:	46 9a       	sbi	0x08, 6	; 8
    491a:	34 cd       	rjmp	.-1432   	; 0x4384 <__vector_29+0x588>
					}
					irCommTxSwitchCounter++;
					if(irCommTxSwitchCounter == irCommTxSwitchCount) {
						irCommTxBitCount++;
						if(irCommTxBitCount==12) {
							irCommState = IRCOMM_TX_IDLE_STATE;
    491c:	81 e0       	ldi	r24, 0x01	; 1
    491e:	80 93 c4 04 	sts	0x04C4, r24
							irCommTxByteEnqueued = 0;
    4922:	10 92 f2 04 	sts	0x04F2, r1
							if(irCommEnabled == IRCOMM_MODE_TRANSMIT) {
    4926:	80 91 c2 04 	lds	r24, 0x04C2
    492a:	82 30       	cpi	r24, 0x02	; 2
    492c:	09 f4       	brne	.+2      	; 0x4930 <__vector_29+0xb34>
    492e:	90 c0       	rjmp	.+288    	; 0x4a50 <__vector_29+0xc54>
								irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
							}
						} else {
							irCommState = IRCOMM_TX_COMPUTE_TIMINGS;
						}
						irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;
    4930:	92 e0       	ldi	r25, 0x02	; 2
    4932:	90 93 f0 04 	sts	0x04F0, r25
						if((irCommTxBitCount==12) && (irCommEnabled==IRCOMM_MODE_TRANSMIT_ONLY)) {
    4936:	84 30       	cpi	r24, 0x04	; 4
    4938:	09 f0       	breq	.+2      	; 0x493c <__vector_29+0xb40>
    493a:	1c ce       	rjmp	.-968    	; 0x4574 <__vector_29+0x778>
							irCommAdcTxState = IRCOMM_TX_ADC_IDLE;
    493c:	10 92 f0 04 	sts	0x04F0, r1
							updateBlueLed(255);
    4940:	8f ef       	ldi	r24, 0xFF	; 255
    4942:	0e 94 2f 3b 	call	0x765e	; 0x765e <updateBlueLed>
    4946:	16 ce       	rjmp	.-980    	; 0x4574 <__vector_29+0x778>
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    4948:	82 e0       	ldi	r24, 0x02	; 2
    494a:	80 93 b9 02 	sts	0x02B9, r24
    494e:	b8 ce       	rjmp	.-656    	; 0x46c0 <__vector_29+0x8c4>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    4950:	84 e0       	ldi	r24, 0x04	; 4
    4952:	80 93 b9 02 	sts	0x02B9, r24
    4956:	ca ce       	rjmp	.-620    	; 0x46ec <__vector_29+0x8f0>
			case 11:
				currentAdChannel = 0;	// prox0
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    4958:	82 e0       	ldi	r24, 0x02	; 2
    495a:	80 93 b9 02 	sts	0x02B9, r24
    495e:	3e cd       	rjmp	.-1412   	; 0x43dc <__vector_29+0x5e0>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    4960:	84 e0       	ldi	r24, 0x04	; 4
    4962:	80 93 b9 02 	sts	0x02B9, r24
    4966:	13 cf       	rjmp	.-474    	; 0x478e <__vector_29+0x992>
						irCommState = IRCOMM_RX_WAITING_BIT;
					}
				}

				if(irCommRxWindowSamples == IRCOMM_SAMPLING_WINDOW) {					
					irCommRxWindowSamples = 0;
    4968:	10 92 d2 04 	sts	0x04D2, r1
					irCommTempPointer = irCommProxValuesCurr;
    496c:	80 91 a8 07 	lds	r24, 0x07A8
    4970:	90 91 a9 07 	lds	r25, 0x07A9
					irCommProxValuesCurr = irCommProxValuesAdc;
    4974:	20 91 bc 07 	lds	r18, 0x07BC
    4978:	30 91 bd 07 	lds	r19, 0x07BD
    497c:	30 93 a9 07 	sts	0x07A9, r19
    4980:	20 93 a8 07 	sts	0x07A8, r18
					irCommProxValuesAdc = irCommTempPointer;
    4984:	90 93 bd 07 	sts	0x07BD, r25
    4988:	80 93 bc 07 	sts	0x07BC, r24
					irCommTempPointer = irCommMaxSensorValueCurr;
    498c:	50 91 05 05 	lds	r21, 0x0505
    4990:	40 91 06 05 	lds	r20, 0x0506
					irCommMaxSensorValueCurr = irCommMaxSensorValueAdc;
    4994:	80 91 c8 08 	lds	r24, 0x08C8
    4998:	90 91 c9 08 	lds	r25, 0x08C9
    499c:	90 93 06 05 	sts	0x0506, r25
    49a0:	80 93 05 05 	sts	0x0505, r24
					irCommMaxSensorValueAdc = irCommTempPointer;
    49a4:	50 93 c8 08 	sts	0x08C8, r21
    49a8:	40 93 c9 08 	sts	0x08C9, r20
					irCommTempPointer = irCommMinSensorValueCurr;
    49ac:	80 91 01 05 	lds	r24, 0x0501
    49b0:	90 91 02 05 	lds	r25, 0x0502
    49b4:	90 93 08 09 	sts	0x0908, r25
    49b8:	80 93 07 09 	sts	0x0907, r24
					irCommMinSensorValueCurr = irCommMinSensorValueAdc;
    49bc:	20 91 26 05 	lds	r18, 0x0526
    49c0:	30 91 27 05 	lds	r19, 0x0527
    49c4:	30 93 02 05 	sts	0x0502, r19
    49c8:	20 93 01 05 	sts	0x0501, r18
					irCommMinSensorValueAdc = irCommTempPointer;
    49cc:	90 93 27 05 	sts	0x0527, r25
    49d0:	80 93 26 05 	sts	0x0526, r24
					memset(irCommMaxSensorValueAdc, 0x00, 16);
    49d4:	e5 2f       	mov	r30, r21
    49d6:	f4 2f       	mov	r31, r20
    49d8:	80 e1       	ldi	r24, 0x10	; 16
    49da:	df 01       	movw	r26, r30
    49dc:	1d 92       	st	X+, r1
    49de:	8a 95       	dec	r24
    49e0:	e9 f7       	brne	.-6      	; 0x49dc <__vector_29+0xbe0>
					memset(irCommMinSensorValueAdc, 0xFF, 16);
    49e2:	80 91 26 05 	lds	r24, 0x0526
    49e6:	90 91 27 05 	lds	r25, 0x0527
    49ea:	6f ef       	ldi	r22, 0xFF	; 255
    49ec:	70 e0       	ldi	r23, 0x00	; 0
    49ee:	40 e1       	ldi	r20, 0x10	; 16
    49f0:	50 e0       	ldi	r21, 0x00	; 0
    49f2:	0e 94 6f 4c 	call	0x98de	; 0x98de <memset>
					if(irCommState == IRCOMM_RX_IDLE_STATE) {
    49f6:	80 91 c4 04 	lds	r24, 0x04C4
    49fa:	81 30       	cpi	r24, 0x01	; 1
    49fc:	71 f1       	breq	.+92     	; 0x4a5a <__vector_29+0xc5e>
						irCommRxBitSkipped = 0;
					}
					//if(irCommState == IRCOMM_RX_SYNC_SIGNAL) {
					//	irCommSecondBitSkipped = 1;	// the second start bit is just sampled, skip it and sync with the received signal						
					//}
					if(irCommState == IRCOMM_RX_WAITING_BIT) {
    49fe:	80 91 c4 04 	lds	r24, 0x04C4
    4a02:	85 30       	cpi	r24, 0x05	; 5
    4a04:	09 f0       	breq	.+2      	; 0x4a08 <__vector_29+0xc0c>
    4a06:	86 ce       	rjmp	.-756    	; 0x4714 <__vector_29+0x918>
						irCommState = IRCOMM_RX_READ_BIT;
    4a08:	86 e0       	ldi	r24, 0x06	; 6
    4a0a:	80 93 c4 04 	sts	0x04C4, r24
    4a0e:	82 ce       	rjmp	.-764    	; 0x4714 <__vector_29+0x918>
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				adcSaveDataTo = SAVE_TO_PROX;
				adcSamplingState = 2;
				if(irCommEnabled==IRCOMM_MODE_RECEIVE && currentProx==23) {					
					currentAdChannel = 0;	// prox0					
    4a10:	10 92 23 02 	sts	0x0223, r1
					measBattery = 0;
    4a14:	10 92 bf 02 	sts	0x02BF, r1
					irCommAdcRxState = 0;					
    4a18:	10 92 d1 04 	sts	0x04D1, r1
					irCommRxWindowSamples = 0;
    4a1c:	10 92 d2 04 	sts	0x04D2, r1
					memset(irCommMaxSensorValueAdc, 0x00, 16);
    4a20:	e0 91 c8 08 	lds	r30, 0x08C8
    4a24:	f0 91 c9 08 	lds	r31, 0x08C9
    4a28:	80 e1       	ldi	r24, 0x10	; 16
    4a2a:	df 01       	movw	r26, r30
    4a2c:	1d 92       	st	X+, r1
    4a2e:	8a 95       	dec	r24
    4a30:	e9 f7       	brne	.-6      	; 0x4a2c <__vector_29+0xc30>
					memset(irCommMinSensorValueAdc, 0xFF, 16);
    4a32:	80 91 26 05 	lds	r24, 0x0526
    4a36:	90 91 27 05 	lds	r25, 0x0527
    4a3a:	6f ef       	ldi	r22, 0xFF	; 255
    4a3c:	70 e0       	ldi	r23, 0x00	; 0
    4a3e:	40 e1       	ldi	r20, 0x10	; 16
    4a40:	50 e0       	ldi	r21, 0x00	; 0
    4a42:	0e 94 6f 4c 	call	0x98de	; 0x98de <memset>
					irCommMode = IRCOMM_MODE_RECEIVE;
    4a46:	10 93 c3 04 	sts	0x04C3, r17
    4a4a:	10 91 c2 04 	lds	r17, 0x04C2
    4a4e:	96 ca       	rjmp	.-2772   	; 0x3f7c <__vector_29+0x180>
						irCommTxBitCount++;
						if(irCommTxBitCount==12) {
							irCommState = IRCOMM_TX_IDLE_STATE;
							irCommTxByteEnqueued = 0;
							if(irCommEnabled == IRCOMM_MODE_TRANSMIT) {
								adcSamplingState = 0;
    4a50:	10 92 ba 02 	sts	0x02BA, r1
								irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    4a54:	10 92 c3 04 	sts	0x04C3, r1
    4a58:	6b cf       	rjmp	.-298    	; 0x4930 <__vector_29+0xb34>
					irCommMinSensorValueCurr = irCommMinSensorValueAdc;
					irCommMinSensorValueAdc = irCommTempPointer;
					memset(irCommMaxSensorValueAdc, 0x00, 16);
					memset(irCommMinSensorValueAdc, 0xFF, 16);
					if(irCommState == IRCOMM_RX_IDLE_STATE) {
						irCommState = IRCOMM_RX_MAX_SENSOR_STATE;
    4a5a:	82 e0       	ldi	r24, 0x02	; 2
    4a5c:	80 93 c4 04 	sts	0x04C4, r24
						irCommRxBitSkipped = 0;
    4a60:	10 92 ec 04 	sts	0x04EC, r1
    4a64:	cc cf       	rjmp	.-104    	; 0x49fe <__vector_29+0xc02>

00004a66 <initMotors>:

#include "motors.h"

void initMotors() {
    4a66:	0f 93       	push	r16
    4a68:	1f 93       	push	r17
    4a6a:	cf 93       	push	r28
    4a6c:	df 93       	push	r29
	// Using 10-bit resolution (waveform generation mode 7) we have a period of: 8000000/1024 = 7812.5 Hz
	// We need to apply a prescaler to the timer in such a way to get the desired period:
	// 7812.5/100 = 78.125 => ideal prescaler, the nearest one is 1/64 and we get a period of:
	// 8000000/64/1024 = 122 Hz

	TCCR3A = 0;
    4a6e:	e0 e9       	ldi	r30, 0x90	; 144
    4a70:	f0 e0       	ldi	r31, 0x00	; 0
    4a72:	10 82       	st	Z, r1
	TCCR3B = 0;
    4a74:	41 e9       	ldi	r20, 0x91	; 145
    4a76:	50 e0       	ldi	r21, 0x00	; 0
    4a78:	da 01       	movw	r26, r20
    4a7a:	1c 92       	st	X, r1
	TIMSK3 = 0;
    4a7c:	21 e7       	ldi	r18, 0x71	; 113
    4a7e:	30 e0       	ldi	r19, 0x00	; 0
    4a80:	e9 01       	movw	r28, r18
    4a82:	18 82       	st	Y, r1
	TCCR4A = 0;
    4a84:	a0 ea       	ldi	r26, 0xA0	; 160
    4a86:	b0 e0       	ldi	r27, 0x00	; 0
    4a88:	1c 92       	st	X, r1
	TCCR4B = 0;
    4a8a:	81 ea       	ldi	r24, 0xA1	; 161
    4a8c:	90 e0       	ldi	r25, 0x00	; 0
    4a8e:	ec 01       	movw	r28, r24
    4a90:	18 82       	st	Y, r1
	TIMSK4 = 0;
    4a92:	02 e7       	ldi	r16, 0x72	; 114
    4a94:	10 e0       	ldi	r17, 0x00	; 0
    4a96:	e8 01       	movw	r28, r16
    4a98:	18 82       	st	Y, r1

	TCCR3A |= (1 << COM3A1) | (1 << WGM31) | (1 << WGM30); 	// enable OCA; clear on match, set at bottom
    4a9a:	60 81       	ld	r22, Z
    4a9c:	63 68       	ori	r22, 0x83	; 131
    4a9e:	60 83       	st	Z, r22
	TCCR3A |= (1 << WGM31) | (1 << WGM30);
    4aa0:	60 81       	ld	r22, Z
    4aa2:	63 60       	ori	r22, 0x03	; 3
    4aa4:	60 83       	st	Z, r22
	TCCR3B |= (1 << WGM32) | (1 << CS31) | (1 << CS30);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    4aa6:	ea 01       	movw	r28, r20
    4aa8:	68 81       	ld	r22, Y
    4aaa:	6b 60       	ori	r22, 0x0B	; 11
    4aac:	68 83       	st	Y, r22
	// the values for motors goes from 0 (stopped) to 1023 (max power)
	OCR3A = pwm_right;
    4aae:	40 91 f5 02 	lds	r20, 0x02F5
    4ab2:	50 91 f6 02 	lds	r21, 0x02F6
    4ab6:	50 93 99 00 	sts	0x0099, r21
    4aba:	40 93 98 00 	sts	0x0098, r20
	OCR3B = 0;
    4abe:	10 92 9b 00 	sts	0x009B, r1
    4ac2:	10 92 9a 00 	sts	0x009A, r1
	TIMSK3 |= (1 << TOIE3);		// Enable timer overflow interrupt
    4ac6:	e9 01       	movw	r28, r18
    4ac8:	48 81       	ld	r20, Y
    4aca:	41 60       	ori	r20, 0x01	; 1
    4acc:	48 83       	st	Y, r20

	// stop right motor
	TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    4ace:	20 81       	ld	r18, Z
    4ad0:	2f 75       	andi	r18, 0x5F	; 95
    4ad2:	20 83       	st	Z, r18
	PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    4ad4:	2e b1       	in	r18, 0x0e	; 14
    4ad6:	27 7e       	andi	r18, 0xE7	; 231
    4ad8:	2e b9       	out	0x0e, r18	; 14

	// Motor left timer4/pwm
	// same configuration as timer3
	TCCR4A |= (1 << COM4A1) | (1 << WGM41) | (1 << WGM40); 	// enable OCA; clear on match, set at bottom
    4ada:	2c 91       	ld	r18, X
    4adc:	23 68       	ori	r18, 0x83	; 131
    4ade:	2c 93       	st	X, r18
	TCCR4B |= (1 << WGM42) | (1 << CS41) | (1 << CS40);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    4ae0:	fc 01       	movw	r30, r24
    4ae2:	20 81       	ld	r18, Z
    4ae4:	2b 60       	ori	r18, 0x0B	; 11
    4ae6:	20 83       	st	Z, r18
	// the values for motors goes from 0 (stopped) to 1024 (max power)
	OCR4A = pwm_left;
    4ae8:	80 91 f7 02 	lds	r24, 0x02F7
    4aec:	90 91 f8 02 	lds	r25, 0x02F8
    4af0:	90 93 a9 00 	sts	0x00A9, r25
    4af4:	80 93 a8 00 	sts	0x00A8, r24
	OCR4B = 0;
    4af8:	10 92 ab 00 	sts	0x00AB, r1
    4afc:	10 92 aa 00 	sts	0x00AA, r1
	TIMSK4 |= (1 << TOIE4);		// Enable timer overflow interrupt
    4b00:	e8 01       	movw	r28, r16
    4b02:	88 81       	ld	r24, Y
    4b04:	81 60       	ori	r24, 0x01	; 1
    4b06:	88 83       	st	Y, r24
	// stop left motor
	TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    4b08:	8c 91       	ld	r24, X
    4b0a:	8f 75       	andi	r24, 0x5F	; 95
    4b0c:	8c 93       	st	X, r24
	PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    4b0e:	e2 e0       	ldi	r30, 0x02	; 2
    4b10:	f1 e0       	ldi	r31, 0x01	; 1
    4b12:	80 81       	ld	r24, Z
    4b14:	87 7e       	andi	r24, 0xE7	; 231
    4b16:	80 83       	st	Z, r24


}
    4b18:	df 91       	pop	r29
    4b1a:	cf 91       	pop	r28
    4b1c:	1f 91       	pop	r17
    4b1e:	0f 91       	pop	r16
    4b20:	08 95       	ret

00004b22 <cast_speed>:

signed int cast_speed(signed int vel) {
    4b22:	28 2f       	mov	r18, r24
    4b24:	39 2f       	mov	r19, r25
    4b26:	8e ef       	ldi	r24, 0xFE	; 254
    4b28:	20 30       	cpi	r18, 0x00	; 0
    4b2a:	38 07       	cpc	r19, r24
    4b2c:	14 f4       	brge	.+4      	; 0x4b32 <cast_speed+0x10>
    4b2e:	20 e0       	ldi	r18, 0x00	; 0
    4b30:	3e ef       	ldi	r19, 0xFE	; 254
    4b32:	82 e0       	ldi	r24, 0x02	; 2
    4b34:	21 30       	cpi	r18, 0x01	; 1
    4b36:	38 07       	cpc	r19, r24
    4b38:	14 f0       	brlt	.+4      	; 0x4b3e <cast_speed+0x1c>
    4b3a:	20 e0       	ldi	r18, 0x00	; 0
    4b3c:	32 e0       	ldi	r19, 0x02	; 2
        vel = MAX_MOTORS_PWM/2;
    } else if(vel < -(MAX_MOTORS_PWM/2)) {
        vel = -(MAX_MOTORS_PWM/2);
    }
    return vel;
}
    4b3e:	c9 01       	movw	r24, r18
    4b40:	08 95       	ret

00004b42 <handleMotorsWithNoController>:

void handleMotorsWithNoController() {

	// compute velocities even if they aren't used
	if(compute_left_vel) {
    4b42:	80 91 07 02 	lds	r24, 0x0207
    4b46:	88 23       	and	r24, r24
    4b48:	c1 f1       	breq	.+112    	; 0x4bba <handleMotorsWithNoController+0x78>
		last_left_vel = left_vel_sum>>2;
    4b4a:	60 91 ed 02 	lds	r22, 0x02ED
    4b4e:	70 91 ee 02 	lds	r23, 0x02EE
    4b52:	76 95       	lsr	r23
    4b54:	67 95       	ror	r22
    4b56:	76 95       	lsr	r23
    4b58:	67 95       	ror	r22
    4b5a:	70 93 f2 02 	sts	0x02F2, r23
    4b5e:	60 93 f1 02 	sts	0x02F1, r22
		compute_left_vel = 0;
    4b62:	10 92 07 02 	sts	0x0207, r1
		left_vel_sum = 0;
    4b66:	10 92 ee 02 	sts	0x02EE, r1
    4b6a:	10 92 ed 02 	sts	0x02ED, r1

		if(pwm_left_desired >= 0) {
    4b6e:	80 91 fb 02 	lds	r24, 0x02FB
    4b72:	90 91 fc 02 	lds	r25, 0x02FC
    4b76:	97 fd       	sbrc	r25, 7
    4b78:	e3 c0       	rjmp	.+454    	; 0x4d40 <handleMotorsWithNoController+0x1fe>
			leftMotSteps += (last_left_vel>>3);
    4b7a:	75 95       	asr	r23
    4b7c:	67 95       	ror	r22
    4b7e:	75 95       	asr	r23
    4b80:	67 95       	ror	r22
    4b82:	75 95       	asr	r23
    4b84:	67 95       	ror	r22
    4b86:	88 27       	eor	r24, r24
    4b88:	77 fd       	sbrc	r23, 7
    4b8a:	80 95       	com	r24
    4b8c:	98 2f       	mov	r25, r24
    4b8e:	0e 94 ee 49 	call	0x93dc	; 0x93dc <__floatsisf>
    4b92:	9b 01       	movw	r18, r22
    4b94:	ac 01       	movw	r20, r24
    4b96:	60 91 d5 02 	lds	r22, 0x02D5
    4b9a:	70 91 d6 02 	lds	r23, 0x02D6
    4b9e:	80 91 d7 02 	lds	r24, 0x02D7
    4ba2:	90 91 d8 02 	lds	r25, 0x02D8
    4ba6:	0e 94 86 48 	call	0x910c	; 0x910c <__addsf3>
    4baa:	60 93 d5 02 	sts	0x02D5, r22
    4bae:	70 93 d6 02 	sts	0x02D6, r23
    4bb2:	80 93 d7 02 	sts	0x02D7, r24
    4bb6:	90 93 d8 02 	sts	0x02D8, r25
		} else {
			leftMotSteps -= (last_left_vel>>3);
		}
	}

	if(compute_right_vel) {
    4bba:	80 91 08 02 	lds	r24, 0x0208
    4bbe:	88 23       	and	r24, r24
    4bc0:	c1 f1       	breq	.+112    	; 0x4c32 <handleMotorsWithNoController+0xf0>
		last_right_vel = right_vel_sum>>2;
    4bc2:	60 91 ef 02 	lds	r22, 0x02EF
    4bc6:	70 91 f0 02 	lds	r23, 0x02F0
    4bca:	76 95       	lsr	r23
    4bcc:	67 95       	ror	r22
    4bce:	76 95       	lsr	r23
    4bd0:	67 95       	ror	r22
    4bd2:	70 93 f4 02 	sts	0x02F4, r23
    4bd6:	60 93 f3 02 	sts	0x02F3, r22
		compute_right_vel = 0;
    4bda:	10 92 08 02 	sts	0x0208, r1
		right_vel_sum = 0;
    4bde:	10 92 f0 02 	sts	0x02F0, r1
    4be2:	10 92 ef 02 	sts	0x02EF, r1

		if(pwm_right_desired >= 0) {
    4be6:	80 91 f9 02 	lds	r24, 0x02F9
    4bea:	90 91 fa 02 	lds	r25, 0x02FA
    4bee:	97 fd       	sbrc	r25, 7
    4bf0:	86 c0       	rjmp	.+268    	; 0x4cfe <handleMotorsWithNoController+0x1bc>
			rightMotSteps += (last_right_vel>>3);
    4bf2:	75 95       	asr	r23
    4bf4:	67 95       	ror	r22
    4bf6:	75 95       	asr	r23
    4bf8:	67 95       	ror	r22
    4bfa:	75 95       	asr	r23
    4bfc:	67 95       	ror	r22
    4bfe:	88 27       	eor	r24, r24
    4c00:	77 fd       	sbrc	r23, 7
    4c02:	80 95       	com	r24
    4c04:	98 2f       	mov	r25, r24
    4c06:	0e 94 ee 49 	call	0x93dc	; 0x93dc <__floatsisf>
    4c0a:	9b 01       	movw	r18, r22
    4c0c:	ac 01       	movw	r20, r24
    4c0e:	60 91 d1 02 	lds	r22, 0x02D1
    4c12:	70 91 d2 02 	lds	r23, 0x02D2
    4c16:	80 91 d3 02 	lds	r24, 0x02D3
    4c1a:	90 91 d4 02 	lds	r25, 0x02D4
    4c1e:	0e 94 86 48 	call	0x910c	; 0x910c <__addsf3>
    4c22:	60 93 d1 02 	sts	0x02D1, r22
    4c26:	70 93 d2 02 	sts	0x02D2, r23
    4c2a:	80 93 d3 02 	sts	0x02D3, r24
    4c2e:	90 93 d4 02 	sts	0x02D4, r25
		} else {
			rightMotSteps -= (last_right_vel>>3);
		}
	}

	pwm_right_working = pwm_intermediate_right_desired*BYTE_TO_MM_S;	// pwm in the range -635..635 (127*BYTE_TO_MM_S)
    4c32:	20 91 fd 02 	lds	r18, 0x02FD
    4c36:	30 91 fe 02 	lds	r19, 0x02FE
    4c3a:	c9 01       	movw	r24, r18
    4c3c:	88 0f       	add	r24, r24
    4c3e:	99 1f       	adc	r25, r25
    4c40:	88 0f       	add	r24, r24
    4c42:	99 1f       	adc	r25, r25
    4c44:	82 0f       	add	r24, r18
    4c46:	93 1f       	adc	r25, r19
    4c48:	90 93 0e 03 	sts	0x030E, r25
    4c4c:	80 93 0d 03 	sts	0x030D, r24
	pwm_left_working = pwm_intermediate_left_desired*BYTE_TO_MM_S;	
    4c50:	40 91 ff 02 	lds	r20, 0x02FF
    4c54:	50 91 00 03 	lds	r21, 0x0300
    4c58:	9a 01       	movw	r18, r20
    4c5a:	22 0f       	add	r18, r18
    4c5c:	33 1f       	adc	r19, r19
    4c5e:	22 0f       	add	r18, r18
    4c60:	33 1f       	adc	r19, r19
    4c62:	24 0f       	add	r18, r20
    4c64:	35 1f       	adc	r19, r21
    4c66:	52 2f       	mov	r21, r18
    4c68:	43 2f       	mov	r20, r19
    4c6a:	20 93 0f 03 	sts	0x030F, r18
    4c6e:	30 93 10 03 	sts	0x0310, r19
	if(obstacleAvoidanceEnabled) {
    4c72:	20 91 6a 04 	lds	r18, 0x046A
    4c76:	22 23       	and	r18, r18
    4c78:	39 f5       	brne	.+78     	; 0x4cc8 <handleMotorsWithNoController+0x186>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);		// out is in the range -MAX_MOTORS_PWM/2..MAX_MOTORS_PWM/2
	}
	//pwm_left_desired_to_control = cast_speed(pwm_left_working);		// pwm in the range -MAX_MOTORS_PWM/2..MAX_MOTORS_PWM/2
	//pwm_right_desired_to_control = cast_speed(pwm_right_working);

	pwm_left = pwm_left_working;
    4c7a:	50 93 f7 02 	sts	0x02F7, r21
    4c7e:	40 93 f8 02 	sts	0x02F8, r20
	pwm_right = pwm_right_working;
    4c82:	90 93 f6 02 	sts	0x02F6, r25
    4c86:	80 93 f5 02 	sts	0x02F5, r24

	if(pwm_right > 0) {
    4c8a:	18 16       	cp	r1, r24
    4c8c:	19 06       	cpc	r1, r25
    4c8e:	5c f5       	brge	.+86     	; 0x4ce6 <handleMotorsWithNoController+0x1a4>
		OCR3A = (unsigned int)pwm_right;
    4c90:	90 93 99 00 	sts	0x0099, r25
    4c94:	80 93 98 00 	sts	0x0098, r24
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
		OCR3B = 0;
	}
	if(pwm_left > 0) {
    4c98:	80 91 f7 02 	lds	r24, 0x02F7
    4c9c:	90 91 f8 02 	lds	r25, 0x02F8
    4ca0:	18 16       	cp	r1, r24
    4ca2:	19 06       	cpc	r1, r25
    4ca4:	2c f4       	brge	.+10     	; 0x4cb0 <handleMotorsWithNoController+0x16e>
		OCR4A = (unsigned int)pwm_left;
    4ca6:	90 93 a9 00 	sts	0x00A9, r25
    4caa:	80 93 a8 00 	sts	0x00A8, r24
    4cae:	08 95       	ret
	} else if(pwm_left < 0) {
    4cb0:	00 97       	sbiw	r24, 0x00	; 0
    4cb2:	09 f0       	breq	.+2      	; 0x4cb6 <handleMotorsWithNoController+0x174>
    4cb4:	6e c0       	rjmp	.+220    	; 0x4d92 <handleMotorsWithNoController+0x250>
		OCR4B =(unsigned int)( -pwm_left);
	} else {
		OCR4A = 0;
    4cb6:	10 92 a9 00 	sts	0x00A9, r1
    4cba:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    4cbe:	10 92 ab 00 	sts	0x00AB, r1
    4cc2:	10 92 aa 00 	sts	0x00AA, r1
    4cc6:	08 95       	ret
	}

	pwm_right_working = pwm_intermediate_right_desired*BYTE_TO_MM_S;	// pwm in the range -635..635 (127*BYTE_TO_MM_S)
	pwm_left_working = pwm_intermediate_left_desired*BYTE_TO_MM_S;	
	if(obstacleAvoidanceEnabled) {
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);		// out is in the range -MAX_MOTORS_PWM/2..MAX_MOTORS_PWM/2
    4cc8:	8f e0       	ldi	r24, 0x0F	; 15
    4cca:	93 e0       	ldi	r25, 0x03	; 3
    4ccc:	6d e0       	ldi	r22, 0x0D	; 13
    4cce:	73 e0       	ldi	r23, 0x03	; 3
    4cd0:	0e 94 80 38 	call	0x7100	; 0x7100 <obstacleAvoidance>
    4cd4:	50 91 0f 03 	lds	r21, 0x030F
    4cd8:	40 91 10 03 	lds	r20, 0x0310
    4cdc:	80 91 0d 03 	lds	r24, 0x030D
    4ce0:	90 91 0e 03 	lds	r25, 0x030E
    4ce4:	ca cf       	rjmp	.-108    	; 0x4c7a <handleMotorsWithNoController+0x138>
	pwm_left = pwm_left_working;
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
    4ce6:	00 97       	sbiw	r24, 0x00	; 0
    4ce8:	09 f0       	breq	.+2      	; 0x4cec <handleMotorsWithNoController+0x1aa>
    4cea:	4b c0       	rjmp	.+150    	; 0x4d82 <handleMotorsWithNoController+0x240>
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
    4cec:	10 92 99 00 	sts	0x0099, r1
    4cf0:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    4cf4:	10 92 9b 00 	sts	0x009B, r1
    4cf8:	10 92 9a 00 	sts	0x009A, r1
    4cfc:	cd cf       	rjmp	.-102    	; 0x4c98 <handleMotorsWithNoController+0x156>
		right_vel_sum = 0;

		if(pwm_right_desired >= 0) {
			rightMotSteps += (last_right_vel>>3);
		} else {
			rightMotSteps -= (last_right_vel>>3);
    4cfe:	75 95       	asr	r23
    4d00:	67 95       	ror	r22
    4d02:	75 95       	asr	r23
    4d04:	67 95       	ror	r22
    4d06:	75 95       	asr	r23
    4d08:	67 95       	ror	r22
    4d0a:	88 27       	eor	r24, r24
    4d0c:	77 fd       	sbrc	r23, 7
    4d0e:	80 95       	com	r24
    4d10:	98 2f       	mov	r25, r24
    4d12:	0e 94 ee 49 	call	0x93dc	; 0x93dc <__floatsisf>
    4d16:	9b 01       	movw	r18, r22
    4d18:	ac 01       	movw	r20, r24
    4d1a:	60 91 d1 02 	lds	r22, 0x02D1
    4d1e:	70 91 d2 02 	lds	r23, 0x02D2
    4d22:	80 91 d3 02 	lds	r24, 0x02D3
    4d26:	90 91 d4 02 	lds	r25, 0x02D4
    4d2a:	0e 94 85 48 	call	0x910a	; 0x910a <__subsf3>
    4d2e:	60 93 d1 02 	sts	0x02D1, r22
    4d32:	70 93 d2 02 	sts	0x02D2, r23
    4d36:	80 93 d3 02 	sts	0x02D3, r24
    4d3a:	90 93 d4 02 	sts	0x02D4, r25
    4d3e:	79 cf       	rjmp	.-270    	; 0x4c32 <handleMotorsWithNoController+0xf0>
		left_vel_sum = 0;

		if(pwm_left_desired >= 0) {
			leftMotSteps += (last_left_vel>>3);
		} else {
			leftMotSteps -= (last_left_vel>>3);
    4d40:	75 95       	asr	r23
    4d42:	67 95       	ror	r22
    4d44:	75 95       	asr	r23
    4d46:	67 95       	ror	r22
    4d48:	75 95       	asr	r23
    4d4a:	67 95       	ror	r22
    4d4c:	88 27       	eor	r24, r24
    4d4e:	77 fd       	sbrc	r23, 7
    4d50:	80 95       	com	r24
    4d52:	98 2f       	mov	r25, r24
    4d54:	0e 94 ee 49 	call	0x93dc	; 0x93dc <__floatsisf>
    4d58:	9b 01       	movw	r18, r22
    4d5a:	ac 01       	movw	r20, r24
    4d5c:	60 91 d5 02 	lds	r22, 0x02D5
    4d60:	70 91 d6 02 	lds	r23, 0x02D6
    4d64:	80 91 d7 02 	lds	r24, 0x02D7
    4d68:	90 91 d8 02 	lds	r25, 0x02D8
    4d6c:	0e 94 85 48 	call	0x910a	; 0x910a <__subsf3>
    4d70:	60 93 d5 02 	sts	0x02D5, r22
    4d74:	70 93 d6 02 	sts	0x02D6, r23
    4d78:	80 93 d7 02 	sts	0x02D7, r24
    4d7c:	90 93 d8 02 	sts	0x02D8, r25
    4d80:	1c cf       	rjmp	.-456    	; 0x4bba <handleMotorsWithNoController+0x78>
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
		OCR3B = (unsigned int)(-pwm_right);
    4d82:	90 95       	com	r25
    4d84:	81 95       	neg	r24
    4d86:	9f 4f       	sbci	r25, 0xFF	; 255
    4d88:	90 93 9b 00 	sts	0x009B, r25
    4d8c:	80 93 9a 00 	sts	0x009A, r24
    4d90:	83 cf       	rjmp	.-250    	; 0x4c98 <handleMotorsWithNoController+0x156>
		OCR3B = 0;
	}
	if(pwm_left > 0) {
		OCR4A = (unsigned int)pwm_left;
	} else if(pwm_left < 0) {
		OCR4B =(unsigned int)( -pwm_left);
    4d92:	90 95       	com	r25
    4d94:	81 95       	neg	r24
    4d96:	9f 4f       	sbci	r25, 0xFF	; 255
    4d98:	90 93 ab 00 	sts	0x00AB, r25
    4d9c:	80 93 aa 00 	sts	0x00AA, r24
    4da0:	08 95       	ret

00004da2 <setLeftSpeed>:
}

// vel expressed in 1/5 of mm/s
void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    4da2:	28 2f       	mov	r18, r24
    4da4:	33 27       	eor	r19, r19
    4da6:	27 fd       	sbrc	r18, 7
    4da8:	30 95       	com	r19
    4daa:	37 fd       	sbrc	r19, 7
    4dac:	13 c0       	rjmp	.+38     	; 0x4dd4 <setLeftSpeed+0x32>
    4dae:	30 93 12 03 	sts	0x0312, r19
    4db2:	20 93 11 03 	sts	0x0311, r18

    if(vel >= 0) {
    4db6:	87 fd       	sbrc	r24, 7
    4db8:	05 c0       	rjmp	.+10     	; 0x4dc4 <setLeftSpeed+0x22>
        pwm_left_desired = speedl;
    } else {
        pwm_left_desired = -(speedl);
    4dba:	30 93 fc 02 	sts	0x02FC, r19
    4dbe:	20 93 fb 02 	sts	0x02FB, r18
    4dc2:	08 95       	ret
    4dc4:	30 95       	com	r19
    4dc6:	21 95       	neg	r18
    4dc8:	3f 4f       	sbci	r19, 0xFF	; 255
    4dca:	30 93 fc 02 	sts	0x02FC, r19
    4dce:	20 93 fb 02 	sts	0x02FB, r18
    4dd2:	08 95       	ret
}

// vel expressed in 1/5 of mm/s
void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    4dd4:	30 95       	com	r19
    4dd6:	21 95       	neg	r18
    4dd8:	3f 4f       	sbci	r19, 0xFF	; 255
    4dda:	e9 cf       	rjmp	.-46     	; 0x4dae <setLeftSpeed+0xc>

00004ddc <setRightSpeed>:

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    4ddc:	28 2f       	mov	r18, r24
    4dde:	33 27       	eor	r19, r19
    4de0:	27 fd       	sbrc	r18, 7
    4de2:	30 95       	com	r19
    4de4:	37 fd       	sbrc	r19, 7
    4de6:	13 c0       	rjmp	.+38     	; 0x4e0e <setRightSpeed+0x32>
    4de8:	30 93 14 03 	sts	0x0314, r19
    4dec:	20 93 13 03 	sts	0x0313, r18

    if(vel >= 0) {
    4df0:	87 fd       	sbrc	r24, 7
    4df2:	05 c0       	rjmp	.+10     	; 0x4dfe <setRightSpeed+0x22>
        pwm_right_desired = speedr;
    } else {
        pwm_right_desired = -(speedr);
    4df4:	30 93 fa 02 	sts	0x02FA, r19
    4df8:	20 93 f9 02 	sts	0x02F9, r18
    4dfc:	08 95       	ret
    4dfe:	30 95       	com	r19
    4e00:	21 95       	neg	r18
    4e02:	3f 4f       	sbci	r19, 0xFF	; 255
    4e04:	30 93 fa 02 	sts	0x02FA, r19
    4e08:	20 93 f9 02 	sts	0x02F9, r18
    4e0c:	08 95       	ret

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    4e0e:	30 95       	com	r19
    4e10:	21 95       	neg	r18
    4e12:	3f 4f       	sbci	r19, 0xFF	; 255
    4e14:	e9 cf       	rjmp	.-46     	; 0x4de8 <setRightSpeed+0xc>

00004e16 <updateOdomData>:
}


void updateOdomData() {

    if(calibWheel == LEFT_WHEEL_FW_SC) {
    4e16:	80 91 0c 05 	lds	r24, 0x050C
    4e1a:	88 23       	and	r24, r24
    4e1c:	89 f5       	brne	.+98     	; 0x4e80 <updateOdomData+0x6a>
        if(calibVelIndex>1) {
    4e1e:	e0 91 e6 07 	lds	r30, 0x07E6
    4e22:	e2 30       	cpi	r30, 0x02	; 2
    4e24:	08 f4       	brcc	.+2      	; 0x4e28 <updateOdomData+0x12>
    4e26:	96 c0       	rjmp	.+300    	; 0x4f54 <updateOdomData+0x13e>
            if(calibration[calibVelIndex-2][1] >= tempVel) {  // check that we have always increasing values of speed, otherwise there
    4e28:	f0 e0       	ldi	r31, 0x00	; 0
    4e2a:	df 01       	movw	r26, r30
    4e2c:	a2 95       	swap	r26
    4e2e:	b2 95       	swap	r27
    4e30:	b0 7f       	andi	r27, 0xF0	; 240
    4e32:	ba 27       	eor	r27, r26
    4e34:	a0 7f       	andi	r26, 0xF0	; 240
    4e36:	ba 27       	eor	r27, r26
    4e38:	a7 51       	subi	r26, 0x17	; 23
    4e3a:	b8 4f       	sbci	r27, 0xF8	; 248
    4e3c:	12 96       	adiw	r26, 0x02	; 2
    4e3e:	2d 91       	ld	r18, X+
    4e40:	3c 91       	ld	r19, X
    4e42:	13 97       	sbiw	r26, 0x03	; 3
    4e44:	80 91 05 09 	lds	r24, 0x0905
    4e48:	90 91 06 09 	lds	r25, 0x0906
    4e4c:	28 17       	cp	r18, r24
    4e4e:	39 07       	cpc	r19, r25
    4e50:	34 f0       	brlt	.+12     	; 0x4e5e <updateOdomData+0x48>
                tempVel = calibration[calibVelIndex-2][1]+1; // will be problems when getting data from the lookup table
    4e52:	c9 01       	movw	r24, r18
    4e54:	01 96       	adiw	r24, 0x01	; 1
    4e56:	90 93 06 09 	sts	0x0906, r25
    4e5a:	80 93 05 09 	sts	0x0905, r24
            }
        }
        calibration[calibVelIndex-1][0] = avgLeftSpeed;
    4e5e:	e2 95       	swap	r30
    4e60:	f2 95       	swap	r31
    4e62:	f0 7f       	andi	r31, 0xF0	; 240
    4e64:	fe 27       	eor	r31, r30
    4e66:	e0 7f       	andi	r30, 0xF0	; 240
    4e68:	fe 27       	eor	r31, r30
    4e6a:	e7 50       	subi	r30, 0x07	; 7
    4e6c:	f8 4f       	sbci	r31, 0xF8	; 248
    4e6e:	20 91 b2 04 	lds	r18, 0x04B2
    4e72:	30 91 b3 04 	lds	r19, 0x04B3
    4e76:	31 83       	std	Z+1, r19	; 0x01
    4e78:	20 83       	st	Z, r18
        calibration[calibVelIndex-1][1] = tempVel;
    4e7a:	93 83       	std	Z+3, r25	; 0x03
    4e7c:	82 83       	std	Z+2, r24	; 0x02
    4e7e:	08 95       	ret
    } else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    4e80:	81 30       	cpi	r24, 0x01	; 1
    4e82:	31 f0       	breq	.+12     	; 0x4e90 <updateOdomData+0x7a>
                tempVel = calibration[calibVelIndex-2][3]+1;
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
        calibration[calibVelIndex-1][3] = tempVel;
    } else if(calibWheel == LEFT_WHEEL_BW_SC) {
    4e84:	82 30       	cpi	r24, 0x02	; 2
    4e86:	09 f4       	brne	.+2      	; 0x4e8a <updateOdomData+0x74>
    4e88:	6b c0       	rjmp	.+214    	; 0x4f60 <updateOdomData+0x14a>
                tempVel = calibration[calibVelIndex-2][5]+1;
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
        calibration[calibVelIndex-1][5] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    4e8a:	83 30       	cpi	r24, 0x03	; 3
    4e8c:	91 f1       	breq	.+100    	; 0x4ef2 <updateOdomData+0xdc>
    4e8e:	08 95       	ret
            }
        }
        calibration[calibVelIndex-1][0] = avgLeftSpeed;
        calibration[calibVelIndex-1][1] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_FW_SC) {
        if(calibVelIndex>1) {
    4e90:	e0 91 e6 07 	lds	r30, 0x07E6
    4e94:	e2 30       	cpi	r30, 0x02	; 2
    4e96:	08 f4       	brcc	.+2      	; 0x4e9a <updateOdomData+0x84>
    4e98:	93 c0       	rjmp	.+294    	; 0x4fc0 <updateOdomData+0x1aa>
            if(calibration[calibVelIndex-2][3] >= tempVel) {
    4e9a:	f0 e0       	ldi	r31, 0x00	; 0
    4e9c:	df 01       	movw	r26, r30
    4e9e:	a2 95       	swap	r26
    4ea0:	b2 95       	swap	r27
    4ea2:	b0 7f       	andi	r27, 0xF0	; 240
    4ea4:	ba 27       	eor	r27, r26
    4ea6:	a0 7f       	andi	r26, 0xF0	; 240
    4ea8:	ba 27       	eor	r27, r26
    4eaa:	a7 51       	subi	r26, 0x17	; 23
    4eac:	b8 4f       	sbci	r27, 0xF8	; 248
    4eae:	16 96       	adiw	r26, 0x06	; 6
    4eb0:	2d 91       	ld	r18, X+
    4eb2:	3c 91       	ld	r19, X
    4eb4:	17 97       	sbiw	r26, 0x07	; 7
    4eb6:	80 91 05 09 	lds	r24, 0x0905
    4eba:	90 91 06 09 	lds	r25, 0x0906
    4ebe:	28 17       	cp	r18, r24
    4ec0:	39 07       	cpc	r19, r25
    4ec2:	34 f0       	brlt	.+12     	; 0x4ed0 <updateOdomData+0xba>
                tempVel = calibration[calibVelIndex-2][3]+1;
    4ec4:	c9 01       	movw	r24, r18
    4ec6:	01 96       	adiw	r24, 0x01	; 1
    4ec8:	90 93 06 09 	sts	0x0906, r25
    4ecc:	80 93 05 09 	sts	0x0905, r24
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
    4ed0:	e2 95       	swap	r30
    4ed2:	f2 95       	swap	r31
    4ed4:	f0 7f       	andi	r31, 0xF0	; 240
    4ed6:	fe 27       	eor	r31, r30
    4ed8:	e0 7f       	andi	r30, 0xF0	; 240
    4eda:	fe 27       	eor	r31, r30
    4edc:	e7 50       	subi	r30, 0x07	; 7
    4ede:	f8 4f       	sbci	r31, 0xF8	; 248
    4ee0:	20 91 b4 04 	lds	r18, 0x04B4
    4ee4:	30 91 b5 04 	lds	r19, 0x04B5
    4ee8:	35 83       	std	Z+5, r19	; 0x05
    4eea:	24 83       	std	Z+4, r18	; 0x04
        calibration[calibVelIndex-1][3] = tempVel;
    4eec:	97 83       	std	Z+7, r25	; 0x07
    4eee:	86 83       	std	Z+6, r24	; 0x06
    4ef0:	08 95       	ret
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
        calibration[calibVelIndex-1][5] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    4ef2:	e0 91 e6 07 	lds	r30, 0x07E6
    4ef6:	e2 30       	cpi	r30, 0x02	; 2
    4ef8:	08 f4       	brcc	.+2      	; 0x4efc <updateOdomData+0xe6>
    4efa:	68 c0       	rjmp	.+208    	; 0x4fcc <updateOdomData+0x1b6>
            if(calibration[calibVelIndex-2][7] >= tempVel) {
    4efc:	f0 e0       	ldi	r31, 0x00	; 0
    4efe:	df 01       	movw	r26, r30
    4f00:	a2 95       	swap	r26
    4f02:	b2 95       	swap	r27
    4f04:	b0 7f       	andi	r27, 0xF0	; 240
    4f06:	ba 27       	eor	r27, r26
    4f08:	a0 7f       	andi	r26, 0xF0	; 240
    4f0a:	ba 27       	eor	r27, r26
    4f0c:	a7 51       	subi	r26, 0x17	; 23
    4f0e:	b8 4f       	sbci	r27, 0xF8	; 248
    4f10:	1e 96       	adiw	r26, 0x0e	; 14
    4f12:	2d 91       	ld	r18, X+
    4f14:	3c 91       	ld	r19, X
    4f16:	1f 97       	sbiw	r26, 0x0f	; 15
    4f18:	80 91 05 09 	lds	r24, 0x0905
    4f1c:	90 91 06 09 	lds	r25, 0x0906
    4f20:	28 17       	cp	r18, r24
    4f22:	39 07       	cpc	r19, r25
    4f24:	34 f0       	brlt	.+12     	; 0x4f32 <updateOdomData+0x11c>
                tempVel = calibration[calibVelIndex-2][7]+1;
    4f26:	c9 01       	movw	r24, r18
    4f28:	01 96       	adiw	r24, 0x01	; 1
    4f2a:	90 93 06 09 	sts	0x0906, r25
    4f2e:	80 93 05 09 	sts	0x0905, r24
            }
        }
		calibration[calibVelIndex-1][6] = avgRightSpeed;
    4f32:	e2 95       	swap	r30
    4f34:	f2 95       	swap	r31
    4f36:	f0 7f       	andi	r31, 0xF0	; 240
    4f38:	fe 27       	eor	r31, r30
    4f3a:	e0 7f       	andi	r30, 0xF0	; 240
    4f3c:	fe 27       	eor	r31, r30
    4f3e:	e7 50       	subi	r30, 0x07	; 7
    4f40:	f8 4f       	sbci	r31, 0xF8	; 248
    4f42:	20 91 b4 04 	lds	r18, 0x04B4
    4f46:	30 91 b5 04 	lds	r19, 0x04B5
    4f4a:	35 87       	std	Z+13, r19	; 0x0d
    4f4c:	24 87       	std	Z+12, r18	; 0x0c
        calibration[calibVelIndex-1][7] = tempVel;
    4f4e:	97 87       	std	Z+15, r25	; 0x0f
    4f50:	86 87       	std	Z+14, r24	; 0x0e
    4f52:	08 95       	ret


void updateOdomData() {

    if(calibWheel == LEFT_WHEEL_FW_SC) {
        if(calibVelIndex>1) {
    4f54:	f0 e0       	ldi	r31, 0x00	; 0
    4f56:	80 91 05 09 	lds	r24, 0x0905
    4f5a:	90 91 06 09 	lds	r25, 0x0906
    4f5e:	7f cf       	rjmp	.-258    	; 0x4e5e <updateOdomData+0x48>
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
        calibration[calibVelIndex-1][3] = tempVel;
    } else if(calibWheel == LEFT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    4f60:	e0 91 e6 07 	lds	r30, 0x07E6
    4f64:	e2 30       	cpi	r30, 0x02	; 2
    4f66:	c0 f1       	brcs	.+112    	; 0x4fd8 <updateOdomData+0x1c2>
            if(calibration[calibVelIndex-2][5] >= tempVel) {
    4f68:	f0 e0       	ldi	r31, 0x00	; 0
    4f6a:	df 01       	movw	r26, r30
    4f6c:	a2 95       	swap	r26
    4f6e:	b2 95       	swap	r27
    4f70:	b0 7f       	andi	r27, 0xF0	; 240
    4f72:	ba 27       	eor	r27, r26
    4f74:	a0 7f       	andi	r26, 0xF0	; 240
    4f76:	ba 27       	eor	r27, r26
    4f78:	a7 51       	subi	r26, 0x17	; 23
    4f7a:	b8 4f       	sbci	r27, 0xF8	; 248
    4f7c:	1a 96       	adiw	r26, 0x0a	; 10
    4f7e:	2d 91       	ld	r18, X+
    4f80:	3c 91       	ld	r19, X
    4f82:	1b 97       	sbiw	r26, 0x0b	; 11
    4f84:	80 91 05 09 	lds	r24, 0x0905
    4f88:	90 91 06 09 	lds	r25, 0x0906
    4f8c:	28 17       	cp	r18, r24
    4f8e:	39 07       	cpc	r19, r25
    4f90:	34 f0       	brlt	.+12     	; 0x4f9e <updateOdomData+0x188>
                tempVel = calibration[calibVelIndex-2][5]+1;
    4f92:	c9 01       	movw	r24, r18
    4f94:	01 96       	adiw	r24, 0x01	; 1
    4f96:	90 93 06 09 	sts	0x0906, r25
    4f9a:	80 93 05 09 	sts	0x0905, r24
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
    4f9e:	e2 95       	swap	r30
    4fa0:	f2 95       	swap	r31
    4fa2:	f0 7f       	andi	r31, 0xF0	; 240
    4fa4:	fe 27       	eor	r31, r30
    4fa6:	e0 7f       	andi	r30, 0xF0	; 240
    4fa8:	fe 27       	eor	r31, r30
    4faa:	e7 50       	subi	r30, 0x07	; 7
    4fac:	f8 4f       	sbci	r31, 0xF8	; 248
    4fae:	20 91 b2 04 	lds	r18, 0x04B2
    4fb2:	30 91 b3 04 	lds	r19, 0x04B3
    4fb6:	31 87       	std	Z+9, r19	; 0x09
    4fb8:	20 87       	std	Z+8, r18	; 0x08
        calibration[calibVelIndex-1][5] = tempVel;
    4fba:	93 87       	std	Z+11, r25	; 0x0b
    4fbc:	82 87       	std	Z+10, r24	; 0x0a
    4fbe:	08 95       	ret
            }
        }
        calibration[calibVelIndex-1][0] = avgLeftSpeed;
        calibration[calibVelIndex-1][1] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_FW_SC) {
        if(calibVelIndex>1) {
    4fc0:	f0 e0       	ldi	r31, 0x00	; 0
    4fc2:	80 91 05 09 	lds	r24, 0x0905
    4fc6:	90 91 06 09 	lds	r25, 0x0906
    4fca:	82 cf       	rjmp	.-252    	; 0x4ed0 <updateOdomData+0xba>
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
        calibration[calibVelIndex-1][5] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    4fcc:	f0 e0       	ldi	r31, 0x00	; 0
    4fce:	80 91 05 09 	lds	r24, 0x0905
    4fd2:	90 91 06 09 	lds	r25, 0x0906
    4fd6:	ad cf       	rjmp	.-166    	; 0x4f32 <updateOdomData+0x11c>
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
        calibration[calibVelIndex-1][3] = tempVel;
    } else if(calibWheel == LEFT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    4fd8:	f0 e0       	ldi	r31, 0x00	; 0
    4fda:	80 91 05 09 	lds	r24, 0x0905
    4fde:	90 91 06 09 	lds	r25, 0x0906
    4fe2:	dd cf       	rjmp	.-70     	; 0x4f9e <updateOdomData+0x188>

00004fe4 <handleCalibration>:

}

void handleCalibration() {

	switch(calibState) {
    4fe4:	80 91 f2 08 	lds	r24, 0x08F2
    4fe8:	82 30       	cpi	r24, 0x02	; 2
    4fea:	09 f4       	brne	.+2      	; 0x4fee <handleCalibration+0xa>
    4fec:	d0 c0       	rjmp	.+416    	; 0x518e <handleCalibration+0x1aa>
    4fee:	83 30       	cpi	r24, 0x03	; 3
    4ff0:	08 f4       	brcc	.+2      	; 0x4ff4 <handleCalibration+0x10>
    4ff2:	3f c0       	rjmp	.+126    	; 0x5072 <handleCalibration+0x8e>
    4ff4:	84 30       	cpi	r24, 0x04	; 4
    4ff6:	09 f4       	brne	.+2      	; 0x4ffa <handleCalibration+0x16>
    4ff8:	91 c0       	rjmp	.+290    	; 0x511c <handleCalibration+0x138>
    4ffa:	84 30       	cpi	r24, 0x04	; 4
    4ffc:	08 f0       	brcs	.+2      	; 0x5000 <handleCalibration+0x1c>
    4ffe:	63 c0       	rjmp	.+198    	; 0x50c6 <handleCalibration+0xe2>
                calibState = 5;
			}
            break;

		case 3: // look for black line again, stop time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    5000:	80 91 0c 05 	lds	r24, 0x050C
    5004:	88 23       	and	r24, r24
    5006:	09 f4       	brne	.+2      	; 0x500a <handleCalibration+0x26>
    5008:	e1 c0       	rjmp	.+450    	; 0x51cc <handleCalibration+0x1e8>
    500a:	82 30       	cpi	r24, 0x02	; 2
    500c:	09 f4       	brne	.+2      	; 0x5010 <handleCalibration+0x2c>
    500e:	de c0       	rjmp	.+444    	; 0x51cc <handleCalibration+0x1e8>
                    updateOdomData();
                    calibState = 4;
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
            	if(proximityResult[11]<(512-2*HYSTERESIS_THR)) {
    5010:	80 91 6f 02 	lds	r24, 0x026F
    5014:	90 91 70 02 	lds	r25, 0x0270
    5018:	21 e0       	ldi	r18, 0x01	; 1
    501a:	8a 36       	cpi	r24, 0x6A	; 106
    501c:	92 07       	cpc	r25, r18
    501e:	0c f4       	brge	.+2      	; 0x5022 <handleCalibration+0x3e>
    5020:	8a c1       	rjmp	.+788    	; 0x5336 <handleCalibration+0x352>
					updateOdomData();
                    calibState = 4;
                    timeoutOdometry = getTime100MicroSec();;
				}
			}
			if((getTime100MicroSec() - timeoutOdometry)>PAUSE_60_SEC) {    // the robot seems to be still, go to next velcoity
    5022:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <getTime100MicroSec>
    5026:	20 91 c4 08 	lds	r18, 0x08C4
    502a:	30 91 c5 08 	lds	r19, 0x08C5
    502e:	40 91 c6 08 	lds	r20, 0x08C6
    5032:	50 91 c7 08 	lds	r21, 0x08C7
    5036:	62 1b       	sub	r22, r18
    5038:	73 0b       	sbc	r23, r19
    503a:	84 0b       	sbc	r24, r20
    503c:	95 0b       	sbc	r25, r21
    503e:	6c 39       	cpi	r22, 0x9C	; 156
    5040:	2d ec       	ldi	r18, 0xCD	; 205
    5042:	72 07       	cpc	r23, r18
    5044:	28 e0       	ldi	r18, 0x08	; 8
    5046:	82 07       	cpc	r24, r18
    5048:	20 e0       	ldi	r18, 0x00	; 0
    504a:	92 07       	cpc	r25, r18
    504c:	d8 f1       	brcs	.+118    	; 0x50c4 <handleCalibration+0xe0>
            	tempVel = 0;
    504e:	10 92 06 09 	sts	0x0906, r1
    5052:	10 92 05 09 	sts	0x0905, r1
				avgLeftSpeed = 0;
    5056:	10 92 b3 04 	sts	0x04B3, r1
    505a:	10 92 b2 04 	sts	0x04B2, r1
				avgRightSpeed = 0;
    505e:	10 92 b5 04 	sts	0x04B5, r1
    5062:	10 92 b4 04 	sts	0x04B4, r1
                updateOdomData();
    5066:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <updateOdomData>
                calibState = 5;
    506a:	85 e0       	ldi	r24, 0x05	; 5
    506c:	80 93 f2 08 	sts	0x08F2, r24
    5070:	08 95       	ret

}

void handleCalibration() {

	switch(calibState) {
    5072:	88 23       	and	r24, r24
    5074:	29 f5       	brne	.+74     	; 0x50c0 <handleCalibration+0xdc>

    	case 0: // set speed
        	if(calibWheel == LEFT_WHEEL_FW_SC) {
    5076:	80 91 0c 05 	lds	r24, 0x050C
    507a:	88 23       	and	r24, r24
    507c:	09 f0       	breq	.+2      	; 0x5080 <handleCalibration+0x9c>
    507e:	3c c1       	rjmp	.+632    	; 0x52f8 <handleCalibration+0x314>
				pwm_intermediate_right_desired = 0;
    5080:	10 92 fe 02 	sts	0x02FE, r1
    5084:	10 92 fd 02 	sts	0x02FD, r1
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
    5088:	90 91 e6 07 	lds	r25, 0x07E6
    508c:	85 e0       	ldi	r24, 0x05	; 5
    508e:	98 9f       	mul	r25, r24
    5090:	c0 01       	movw	r24, r0
    5092:	11 24       	eor	r1, r1
    5094:	88 0f       	add	r24, r24
    5096:	99 1f       	adc	r25, r25
    5098:	88 0f       	add	r24, r24
    509a:	99 1f       	adc	r25, r25
    509c:	90 93 00 03 	sts	0x0300, r25
    50a0:	80 93 ff 02 	sts	0x02FF, r24
				pwm_intermediate_left_desired = -((INDEX_STEP*calibVelIndex)<<2);
        	} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
				pwm_intermediate_right_desired = -((INDEX_STEP*calibVelIndex)<<2);
				pwm_intermediate_left_desired = 0;
			}               
            calibState = 1;
    50a4:	81 e0       	ldi	r24, 0x01	; 1
    50a6:	80 93 f2 08 	sts	0x08F2, r24
            timeoutOdometry = getTime100MicroSec();
    50aa:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <getTime100MicroSec>
    50ae:	60 93 c4 08 	sts	0x08C4, r22
    50b2:	70 93 c5 08 	sts	0x08C5, r23
    50b6:	80 93 c6 08 	sts	0x08C6, r24
    50ba:	90 93 c7 08 	sts	0x08C7, r25
            break;
    50be:	08 95       	ret

}

void handleCalibration() {

	switch(calibState) {
    50c0:	81 30       	cpi	r24, 0x01	; 1
    50c2:	71 f0       	breq	.+28     	; 0x50e0 <handleCalibration+0xfc>
    50c4:	08 95       	ret
    50c6:	85 30       	cpi	r24, 0x05	; 5
    50c8:	e9 f7       	brne	.-6      	; 0x50c4 <handleCalibration+0xe0>
                calibState = 5;
			}
            break;

		case 5:
        	calibVelIndex++;
    50ca:	80 91 e6 07 	lds	r24, 0x07E6
    50ce:	8f 5f       	subi	r24, 0xFF	; 255
    50d0:	80 93 e6 07 	sts	0x07E6, r24
            if(calibVelIndex == 10) {
    50d4:	8a 30       	cpi	r24, 0x0A	; 10
    50d6:	09 f4       	brne	.+2      	; 0x50da <handleCalibration+0xf6>
    50d8:	8b c1       	rjmp	.+790    	; 0x53f0 <handleCalibration+0x40c>
					// red off
					writeCalibrationToFlash();
					calibrateOdomFlag = 0;
				}
			}
			calibState = 0;
    50da:	10 92 f2 08 	sts	0x08F2, r1
    50de:	08 95       	ret
            calibState = 1;
            timeoutOdometry = getTime100MicroSec();
            break;

		case 1: // look for black line, start time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    50e0:	80 91 0c 05 	lds	r24, 0x050C
    50e4:	88 23       	and	r24, r24
    50e6:	09 f4       	brne	.+2      	; 0x50ea <handleCalibration+0x106>
    50e8:	d0 c0       	rjmp	.+416    	; 0x528a <handleCalibration+0x2a6>
    50ea:	82 30       	cpi	r24, 0x02	; 2
    50ec:	09 f4       	brne	.+2      	; 0x50f0 <handleCalibration+0x10c>
    50ee:	cd c0       	rjmp	.+410    	; 0x528a <handleCalibration+0x2a6>
                    timeOdometry = getTime100MicroSec();;
                    calibState = 2;
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
            	if(proximityResult[11]<(512-2*HYSTERESIS_THR)) {
    50f0:	80 91 6f 02 	lds	r24, 0x026F
    50f4:	90 91 70 02 	lds	r25, 0x0270
    50f8:	21 e0       	ldi	r18, 0x01	; 1
    50fa:	8a 36       	cpi	r24, 0x6A	; 106
    50fc:	92 07       	cpc	r25, r18
    50fe:	0c f0       	brlt	.+2      	; 0x5102 <handleCalibration+0x11e>
    5100:	90 cf       	rjmp	.-224    	; 0x5022 <handleCalibration+0x3e>
				//if((proximityResult[11])<(proximityOffset[11]>>1)) {	
					rightSumCount = 0;
    5102:	10 92 b1 04 	sts	0x04B1, r1
    5106:	10 92 b0 04 	sts	0x04B0, r1
					rightSpeedSumOdom = 0;
    510a:	10 92 aa 04 	sts	0x04AA, r1
    510e:	10 92 ab 04 	sts	0x04AB, r1
    5112:	10 92 ac 04 	sts	0x04AC, r1
    5116:	10 92 ad 04 	sts	0x04AD, r1
    511a:	cc c0       	rjmp	.+408    	; 0x52b4 <handleCalibration+0x2d0>
                calibState = 5;
			}
            break;

		case 4: // exit from black line again
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    511c:	80 91 0c 05 	lds	r24, 0x050C
    5120:	88 23       	and	r24, r24
    5122:	49 f1       	breq	.+82     	; 0x5176 <handleCalibration+0x192>
    5124:	82 30       	cpi	r24, 0x02	; 2
    5126:	39 f1       	breq	.+78     	; 0x5176 <handleCalibration+0x192>
            	if(proximityResult[8]>(512-HYSTERESIS_THR)) {
				//if((proximityResult[8])>(proximityOffset[8]>>1)) {	
                	calibState = 5;
				}
			} else {
            	if(proximityResult[11]>(512-HYSTERESIS_THR)) {
    5128:	80 91 6f 02 	lds	r24, 0x026F
    512c:	90 91 70 02 	lds	r25, 0x0270
    5130:	21 e0       	ldi	r18, 0x01	; 1
    5132:	86 3b       	cpi	r24, 0xB6	; 182
    5134:	92 07       	cpc	r25, r18
    5136:	3c f5       	brge	.+78     	; 0x5186 <handleCalibration+0x1a2>
				//if((proximityResult[11])>(proximityOffset[11]>>1)) {	
					calibState = 5;
				}
			}
            if((getTime100MicroSec() - timeoutOdometry)>PAUSE_60_SEC) {    // the robot seems to be still, go to next velocity
    5138:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <getTime100MicroSec>
    513c:	20 91 c4 08 	lds	r18, 0x08C4
    5140:	30 91 c5 08 	lds	r19, 0x08C5
    5144:	40 91 c6 08 	lds	r20, 0x08C6
    5148:	50 91 c7 08 	lds	r21, 0x08C7
    514c:	62 1b       	sub	r22, r18
    514e:	73 0b       	sbc	r23, r19
    5150:	84 0b       	sbc	r24, r20
    5152:	95 0b       	sbc	r25, r21
    5154:	6c 39       	cpi	r22, 0x9C	; 156
    5156:	2d ec       	ldi	r18, 0xCD	; 205
    5158:	72 07       	cpc	r23, r18
    515a:	28 e0       	ldi	r18, 0x08	; 8
    515c:	82 07       	cpc	r24, r18
    515e:	20 e0       	ldi	r18, 0x00	; 0
    5160:	92 07       	cpc	r25, r18
    5162:	08 f4       	brcc	.+2      	; 0x5166 <handleCalibration+0x182>
    5164:	af cf       	rjmp	.-162    	; 0x50c4 <handleCalibration+0xe0>
            	tempVel = 0;
    5166:	10 92 06 09 	sts	0x0906, r1
    516a:	10 92 05 09 	sts	0x0905, r1
                //updateOdomData();
                calibState = 5;
    516e:	85 e0       	ldi	r24, 0x05	; 5
    5170:	80 93 f2 08 	sts	0x08F2, r24
    5174:	08 95       	ret
			}
            break;

		case 4: // exit from black line again
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
            	if(proximityResult[8]>(512-HYSTERESIS_THR)) {
    5176:	80 91 69 02 	lds	r24, 0x0269
    517a:	90 91 6a 02 	lds	r25, 0x026A
    517e:	21 e0       	ldi	r18, 0x01	; 1
    5180:	86 3b       	cpi	r24, 0xB6	; 182
    5182:	92 07       	cpc	r25, r18
    5184:	cc f2       	brlt	.-78     	; 0x5138 <handleCalibration+0x154>
                	calibState = 5;
				}
			} else {
            	if(proximityResult[11]>(512-HYSTERESIS_THR)) {
				//if((proximityResult[11])>(proximityOffset[11]>>1)) {	
					calibState = 5;
    5186:	85 e0       	ldi	r24, 0x05	; 5
    5188:	80 93 f2 08 	sts	0x08F2, r24
    518c:	d5 cf       	rjmp	.-86     	; 0x5138 <handleCalibration+0x154>
                calibState = 5;
			}
			break;

		case 2: // exit from black line
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    518e:	80 91 0c 05 	lds	r24, 0x050C
    5192:	88 23       	and	r24, r24
    5194:	09 f4       	brne	.+2      	; 0x5198 <handleCalibration+0x1b4>
    5196:	a6 c0       	rjmp	.+332    	; 0x52e4 <handleCalibration+0x300>
    5198:	82 30       	cpi	r24, 0x02	; 2
    519a:	09 f4       	brne	.+2      	; 0x519e <handleCalibration+0x1ba>
    519c:	a3 c0       	rjmp	.+326    	; 0x52e4 <handleCalibration+0x300>
				//if((proximityResult[8])>(proximityOffset[8]>>1)) {	
                	calibState = 3;
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
            	if(proximityResult[11]>(512-HYSTERESIS_THR)) {
    519e:	80 91 6f 02 	lds	r24, 0x026F
    51a2:	90 91 70 02 	lds	r25, 0x0270
    51a6:	21 e0       	ldi	r18, 0x01	; 1
    51a8:	86 3b       	cpi	r24, 0xB6	; 182
    51aa:	92 07       	cpc	r25, r18
    51ac:	0c f4       	brge	.+2      	; 0x51b0 <handleCalibration+0x1cc>
    51ae:	39 cf       	rjmp	.-398    	; 0x5022 <handleCalibration+0x3e>
				//if((proximityResult[11])>(proximityOffset[11]>>1)) {	
                	calibState = 3;
    51b0:	83 e0       	ldi	r24, 0x03	; 3
    51b2:	80 93 f2 08 	sts	0x08F2, r24
                    timeoutOdometry = getTime100MicroSec();;
    51b6:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <getTime100MicroSec>
    51ba:	60 93 c4 08 	sts	0x08C4, r22
    51be:	70 93 c5 08 	sts	0x08C5, r23
    51c2:	80 93 c6 08 	sts	0x08C6, r24
    51c6:	90 93 c7 08 	sts	0x08C7, r25
    51ca:	2b cf       	rjmp	.-426    	; 0x5022 <handleCalibration+0x3e>
			}
            break;

		case 3: // look for black line again, stop time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
            	if(proximityResult[8]<(512-2*HYSTERESIS_THR)) {
    51cc:	80 91 69 02 	lds	r24, 0x0269
    51d0:	90 91 6a 02 	lds	r25, 0x026A
    51d4:	21 e0       	ldi	r18, 0x01	; 1
    51d6:	8a 36       	cpi	r24, 0x6A	; 106
    51d8:	92 07       	cpc	r25, r18
    51da:	0c f0       	brlt	.+2      	; 0x51de <handleCalibration+0x1fa>
    51dc:	22 cf       	rjmp	.-444    	; 0x5022 <handleCalibration+0x3e>
				//if((proximityResult[8])<(proximityOffset[8]>>1)) {	
                	timeOdometry = getTime100MicroSec() - timeOdometry;
    51de:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <getTime100MicroSec>
    51e2:	20 91 07 05 	lds	r18, 0x0507
    51e6:	30 91 08 05 	lds	r19, 0x0508
    51ea:	40 91 09 05 	lds	r20, 0x0509
    51ee:	50 91 0a 05 	lds	r21, 0x050A
    51f2:	62 1b       	sub	r22, r18
    51f4:	73 0b       	sbc	r23, r19
    51f6:	84 0b       	sbc	r24, r20
    51f8:	95 0b       	sbc	r25, r21
    51fa:	60 93 07 05 	sts	0x0507, r22
    51fe:	70 93 08 05 	sts	0x0508, r23
    5202:	80 93 09 05 	sts	0x0509, r24
    5206:	90 93 0a 05 	sts	0x050A, r25
                    tempVel = (unsigned int)(DISTANCE_MM/((float)timeOdometry*104.0/1000000.0));
    520a:	0e 94 ec 49 	call	0x93d8	; 0x93d8 <__floatunsisf>
    520e:	20 e0       	ldi	r18, 0x00	; 0
    5210:	30 e0       	ldi	r19, 0x00	; 0
    5212:	40 ed       	ldi	r20, 0xD0	; 208
    5214:	52 e4       	ldi	r21, 0x42	; 66
    5216:	0e 94 03 4b 	call	0x9606	; 0x9606 <__mulsf3>
    521a:	20 e0       	ldi	r18, 0x00	; 0
    521c:	34 e2       	ldi	r19, 0x24	; 36
    521e:	44 e7       	ldi	r20, 0x74	; 116
    5220:	59 e4       	ldi	r21, 0x49	; 73
    5222:	0e 94 53 49 	call	0x92a6	; 0x92a6 <__divsf3>
    5226:	9b 01       	movw	r18, r22
    5228:	ac 01       	movw	r20, r24
    522a:	64 e1       	ldi	r22, 0x14	; 20
    522c:	7e e2       	ldi	r23, 0x2E	; 46
    522e:	88 e7       	ldi	r24, 0x78	; 120
    5230:	93 e4       	ldi	r25, 0x43	; 67
    5232:	0e 94 53 49 	call	0x92a6	; 0x92a6 <__divsf3>
    5236:	0e 94 c0 49 	call	0x9380	; 0x9380 <__fixunssfsi>
    523a:	70 93 06 09 	sts	0x0906, r23
    523e:	60 93 05 09 	sts	0x0905, r22
					avgLeftSpeed = leftSpeedSumOdom/leftSumCount;
    5242:	20 91 ae 04 	lds	r18, 0x04AE
    5246:	30 91 af 04 	lds	r19, 0x04AF
    524a:	40 e0       	ldi	r20, 0x00	; 0
    524c:	50 e0       	ldi	r21, 0x00	; 0
    524e:	60 91 a6 04 	lds	r22, 0x04A6
    5252:	70 91 a7 04 	lds	r23, 0x04A7
    5256:	80 91 a8 04 	lds	r24, 0x04A8
    525a:	90 91 a9 04 	lds	r25, 0x04A9
    525e:	0e 94 d4 4b 	call	0x97a8	; 0x97a8 <__divmodsi4>
    5262:	30 93 b3 04 	sts	0x04B3, r19
    5266:	20 93 b2 04 	sts	0x04B2, r18
            	if(proximityResult[11]<(512-2*HYSTERESIS_THR)) {
				//if((proximityResult[11])<(proximityOffset[11]>>1)) {	
                	timeOdometry = getTime100MicroSec() - timeOdometry;
                    tempVel = (unsigned int)(DISTANCE_MM/((float)timeOdometry*104.0/1000000.0));
                    avgRightSpeed = rightSpeedSumOdom/rightSumCount;
					updateOdomData();
    526a:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <updateOdomData>
                    calibState = 4;
    526e:	84 e0       	ldi	r24, 0x04	; 4
    5270:	80 93 f2 08 	sts	0x08F2, r24
                    timeoutOdometry = getTime100MicroSec();;
    5274:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <getTime100MicroSec>
    5278:	60 93 c4 08 	sts	0x08C4, r22
    527c:	70 93 c5 08 	sts	0x08C5, r23
    5280:	80 93 c6 08 	sts	0x08C6, r24
    5284:	90 93 c7 08 	sts	0x08C7, r25
    5288:	cc ce       	rjmp	.-616    	; 0x5022 <handleCalibration+0x3e>
            timeoutOdometry = getTime100MicroSec();
            break;

		case 1: // look for black line, start time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
            	if(proximityResult[8]<(512-2*HYSTERESIS_THR)) {
    528a:	80 91 69 02 	lds	r24, 0x0269
    528e:	90 91 6a 02 	lds	r25, 0x026A
    5292:	21 e0       	ldi	r18, 0x01	; 1
    5294:	8a 36       	cpi	r24, 0x6A	; 106
    5296:	92 07       	cpc	r25, r18
    5298:	0c f0       	brlt	.+2      	; 0x529c <handleCalibration+0x2b8>
    529a:	c3 ce       	rjmp	.-634    	; 0x5022 <handleCalibration+0x3e>
				//if((proximityResult[8])<(proximityOffset[8]>>1)) {				
                	leftSumCount = 0;
    529c:	10 92 af 04 	sts	0x04AF, r1
    52a0:	10 92 ae 04 	sts	0x04AE, r1
                    leftSpeedSumOdom = 0;
    52a4:	10 92 a6 04 	sts	0x04A6, r1
    52a8:	10 92 a7 04 	sts	0x04A7, r1
    52ac:	10 92 a8 04 	sts	0x04A8, r1
    52b0:	10 92 a9 04 	sts	0x04A9, r1
			} else {
            	if(proximityResult[11]<(512-2*HYSTERESIS_THR)) {
				//if((proximityResult[11])<(proximityOffset[11]>>1)) {	
					rightSumCount = 0;
					rightSpeedSumOdom = 0;
                    timeOdometry = getTime100MicroSec();;
    52b4:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <getTime100MicroSec>
    52b8:	60 93 07 05 	sts	0x0507, r22
    52bc:	70 93 08 05 	sts	0x0508, r23
    52c0:	80 93 09 05 	sts	0x0509, r24
    52c4:	90 93 0a 05 	sts	0x050A, r25
                    calibState = 2;
    52c8:	82 e0       	ldi	r24, 0x02	; 2
    52ca:	80 93 f2 08 	sts	0x08F2, r24
                    timeoutOdometry = getTime100MicroSec();;
    52ce:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <getTime100MicroSec>
    52d2:	60 93 c4 08 	sts	0x08C4, r22
    52d6:	70 93 c5 08 	sts	0x08C5, r23
    52da:	80 93 c6 08 	sts	0x08C6, r24
    52de:	90 93 c7 08 	sts	0x08C7, r25
    52e2:	9f ce       	rjmp	.-706    	; 0x5022 <handleCalibration+0x3e>
			}
			break;

		case 2: // exit from black line
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
            	if(proximityResult[8]>(512-HYSTERESIS_THR)) {
    52e4:	80 91 69 02 	lds	r24, 0x0269
    52e8:	90 91 6a 02 	lds	r25, 0x026A
    52ec:	21 e0       	ldi	r18, 0x01	; 1
    52ee:	86 3b       	cpi	r24, 0xB6	; 182
    52f0:	92 07       	cpc	r25, r18
    52f2:	0c f4       	brge	.+2      	; 0x52f6 <handleCalibration+0x312>
    52f4:	96 ce       	rjmp	.-724    	; 0x5022 <handleCalibration+0x3e>
    52f6:	5c cf       	rjmp	.-328    	; 0x51b0 <handleCalibration+0x1cc>

    	case 0: // set speed
        	if(calibWheel == LEFT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = 0;
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    52f8:	81 30       	cpi	r24, 0x01	; 1
    52fa:	09 f4       	brne	.+2      	; 0x52fe <handleCalibration+0x31a>
    52fc:	84 c0       	rjmp	.+264    	; 0x5406 <handleCalibration+0x422>
				pwm_intermediate_right_desired = (INDEX_STEP*calibVelIndex)<<2;
				pwm_intermediate_left_desired = 0;
			} else if(calibWheel == LEFT_WHEEL_BW_SC) {
    52fe:	82 30       	cpi	r24, 0x02	; 2
    5300:	09 f4       	brne	.+2      	; 0x5304 <handleCalibration+0x320>
    5302:	60 c0       	rjmp	.+192    	; 0x53c4 <handleCalibration+0x3e0>
				pwm_intermediate_right_desired = 0;
				pwm_intermediate_left_desired = -((INDEX_STEP*calibVelIndex)<<2);
        	} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    5304:	83 30       	cpi	r24, 0x03	; 3
    5306:	09 f0       	breq	.+2      	; 0x530a <handleCalibration+0x326>
    5308:	cd ce       	rjmp	.-614    	; 0x50a4 <handleCalibration+0xc0>
				pwm_intermediate_right_desired = -((INDEX_STEP*calibVelIndex)<<2);
    530a:	90 91 e6 07 	lds	r25, 0x07E6
    530e:	85 e0       	ldi	r24, 0x05	; 5
    5310:	98 9f       	mul	r25, r24
    5312:	c0 01       	movw	r24, r0
    5314:	11 24       	eor	r1, r1
    5316:	88 0f       	add	r24, r24
    5318:	99 1f       	adc	r25, r25
    531a:	88 0f       	add	r24, r24
    531c:	99 1f       	adc	r25, r25
    531e:	90 95       	com	r25
    5320:	81 95       	neg	r24
    5322:	9f 4f       	sbci	r25, 0xFF	; 255
    5324:	90 93 fe 02 	sts	0x02FE, r25
    5328:	80 93 fd 02 	sts	0x02FD, r24
				pwm_intermediate_left_desired = 0;
    532c:	10 92 00 03 	sts	0x0300, r1
    5330:	10 92 ff 02 	sts	0x02FF, r1
    5334:	b7 ce       	rjmp	.-658    	; 0x50a4 <handleCalibration+0xc0>
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
            	if(proximityResult[11]<(512-2*HYSTERESIS_THR)) {
				//if((proximityResult[11])<(proximityOffset[11]>>1)) {	
                	timeOdometry = getTime100MicroSec() - timeOdometry;
    5336:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <getTime100MicroSec>
    533a:	20 91 07 05 	lds	r18, 0x0507
    533e:	30 91 08 05 	lds	r19, 0x0508
    5342:	40 91 09 05 	lds	r20, 0x0509
    5346:	50 91 0a 05 	lds	r21, 0x050A
    534a:	62 1b       	sub	r22, r18
    534c:	73 0b       	sbc	r23, r19
    534e:	84 0b       	sbc	r24, r20
    5350:	95 0b       	sbc	r25, r21
    5352:	60 93 07 05 	sts	0x0507, r22
    5356:	70 93 08 05 	sts	0x0508, r23
    535a:	80 93 09 05 	sts	0x0509, r24
    535e:	90 93 0a 05 	sts	0x050A, r25
                    tempVel = (unsigned int)(DISTANCE_MM/((float)timeOdometry*104.0/1000000.0));
    5362:	0e 94 ec 49 	call	0x93d8	; 0x93d8 <__floatunsisf>
    5366:	20 e0       	ldi	r18, 0x00	; 0
    5368:	30 e0       	ldi	r19, 0x00	; 0
    536a:	40 ed       	ldi	r20, 0xD0	; 208
    536c:	52 e4       	ldi	r21, 0x42	; 66
    536e:	0e 94 03 4b 	call	0x9606	; 0x9606 <__mulsf3>
    5372:	20 e0       	ldi	r18, 0x00	; 0
    5374:	34 e2       	ldi	r19, 0x24	; 36
    5376:	44 e7       	ldi	r20, 0x74	; 116
    5378:	59 e4       	ldi	r21, 0x49	; 73
    537a:	0e 94 53 49 	call	0x92a6	; 0x92a6 <__divsf3>
    537e:	9b 01       	movw	r18, r22
    5380:	ac 01       	movw	r20, r24
    5382:	64 e1       	ldi	r22, 0x14	; 20
    5384:	7e e2       	ldi	r23, 0x2E	; 46
    5386:	88 e7       	ldi	r24, 0x78	; 120
    5388:	93 e4       	ldi	r25, 0x43	; 67
    538a:	0e 94 53 49 	call	0x92a6	; 0x92a6 <__divsf3>
    538e:	0e 94 c0 49 	call	0x9380	; 0x9380 <__fixunssfsi>
    5392:	70 93 06 09 	sts	0x0906, r23
    5396:	60 93 05 09 	sts	0x0905, r22
                    avgRightSpeed = rightSpeedSumOdom/rightSumCount;
    539a:	20 91 b0 04 	lds	r18, 0x04B0
    539e:	30 91 b1 04 	lds	r19, 0x04B1
    53a2:	40 e0       	ldi	r20, 0x00	; 0
    53a4:	50 e0       	ldi	r21, 0x00	; 0
    53a6:	60 91 aa 04 	lds	r22, 0x04AA
    53aa:	70 91 ab 04 	lds	r23, 0x04AB
    53ae:	80 91 ac 04 	lds	r24, 0x04AC
    53b2:	90 91 ad 04 	lds	r25, 0x04AD
    53b6:	0e 94 d4 4b 	call	0x97a8	; 0x97a8 <__divmodsi4>
    53ba:	30 93 b5 04 	sts	0x04B5, r19
    53be:	20 93 b4 04 	sts	0x04B4, r18
    53c2:	53 cf       	rjmp	.-346    	; 0x526a <handleCalibration+0x286>
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = (INDEX_STEP*calibVelIndex)<<2;
				pwm_intermediate_left_desired = 0;
			} else if(calibWheel == LEFT_WHEEL_BW_SC) {
				pwm_intermediate_right_desired = 0;
    53c4:	10 92 fe 02 	sts	0x02FE, r1
    53c8:	10 92 fd 02 	sts	0x02FD, r1
				pwm_intermediate_left_desired = -((INDEX_STEP*calibVelIndex)<<2);
    53cc:	90 91 e6 07 	lds	r25, 0x07E6
    53d0:	85 e0       	ldi	r24, 0x05	; 5
    53d2:	98 9f       	mul	r25, r24
    53d4:	c0 01       	movw	r24, r0
    53d6:	11 24       	eor	r1, r1
    53d8:	88 0f       	add	r24, r24
    53da:	99 1f       	adc	r25, r25
    53dc:	88 0f       	add	r24, r24
    53de:	99 1f       	adc	r25, r25
    53e0:	90 95       	com	r25
    53e2:	81 95       	neg	r24
    53e4:	9f 4f       	sbci	r25, 0xFF	; 255
    53e6:	90 93 00 03 	sts	0x0300, r25
    53ea:	80 93 ff 02 	sts	0x02FF, r24
    53ee:	5a ce       	rjmp	.-844    	; 0x50a4 <handleCalibration+0xc0>
            break;

		case 5:
        	calibVelIndex++;
            if(calibVelIndex == 10) {
            	calibVelIndex = 1;
    53f0:	91 e0       	ldi	r25, 0x01	; 1
    53f2:	90 93 e6 07 	sts	0x07E6, r25
                if(calibWheel == LEFT_WHEEL_FW_SC) {
    53f6:	80 91 0c 05 	lds	r24, 0x050C
    53fa:	88 23       	and	r24, r24
    53fc:	b9 f4       	brne	.+46     	; 0x542c <handleCalibration+0x448>
                	calibWheel = LEFT_WHEEL_BW_SC;
    53fe:	82 e0       	ldi	r24, 0x02	; 2
    5400:	80 93 0c 05 	sts	0x050C, r24
    5404:	6a ce       	rjmp	.-812    	; 0x50da <handleCalibration+0xf6>
    	case 0: // set speed
        	if(calibWheel == LEFT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = 0;
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = (INDEX_STEP*calibVelIndex)<<2;
    5406:	90 91 e6 07 	lds	r25, 0x07E6
    540a:	85 e0       	ldi	r24, 0x05	; 5
    540c:	98 9f       	mul	r25, r24
    540e:	c0 01       	movw	r24, r0
    5410:	11 24       	eor	r1, r1
    5412:	88 0f       	add	r24, r24
    5414:	99 1f       	adc	r25, r25
    5416:	88 0f       	add	r24, r24
    5418:	99 1f       	adc	r25, r25
    541a:	90 93 fe 02 	sts	0x02FE, r25
    541e:	80 93 fd 02 	sts	0x02FD, r24
				pwm_intermediate_left_desired = 0;
    5422:	10 92 00 03 	sts	0x0300, r1
    5426:	10 92 ff 02 	sts	0x02FF, r1
    542a:	3c ce       	rjmp	.-904    	; 0x50a4 <handleCalibration+0xc0>
        	calibVelIndex++;
            if(calibVelIndex == 10) {
            	calibVelIndex = 1;
                if(calibWheel == LEFT_WHEEL_FW_SC) {
                	calibWheel = LEFT_WHEEL_BW_SC;
				} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    542c:	81 30       	cpi	r24, 0x01	; 1
    542e:	61 f0       	breq	.+24     	; 0x5448 <handleCalibration+0x464>
                	calibWheel = RIGHT_WHEEL_BW_SC;
				} else if(calibWheel == LEFT_WHEEL_BW_SC) {
    5430:	82 30       	cpi	r24, 0x02	; 2
    5432:	71 f0       	breq	.+28     	; 0x5450 <handleCalibration+0x46c>
                	calibWheel = RIGHT_WHEEL_FW_SC;
					calibrateOdomFlag = 0;
					// red on
				} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    5434:	83 30       	cpi	r24, 0x03	; 3
    5436:	09 f0       	breq	.+2      	; 0x543a <handleCalibration+0x456>
    5438:	50 ce       	rjmp	.-864    	; 0x50da <handleCalibration+0xf6>
                	calibWheel = LEFT_WHEEL_FW_SC;					
    543a:	10 92 0c 05 	sts	0x050C, r1
					// red off
					writeCalibrationToFlash();
    543e:	0e 94 f5 42 	call	0x85ea	; 0x85ea <writeCalibrationToFlash>
					calibrateOdomFlag = 0;
    5442:	10 92 23 05 	sts	0x0523, r1
    5446:	49 ce       	rjmp	.-878    	; 0x50da <handleCalibration+0xf6>
            if(calibVelIndex == 10) {
            	calibVelIndex = 1;
                if(calibWheel == LEFT_WHEEL_FW_SC) {
                	calibWheel = LEFT_WHEEL_BW_SC;
				} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
                	calibWheel = RIGHT_WHEEL_BW_SC;
    5448:	83 e0       	ldi	r24, 0x03	; 3
    544a:	80 93 0c 05 	sts	0x050C, r24
    544e:	45 ce       	rjmp	.-886    	; 0x50da <handleCalibration+0xf6>
				} else if(calibWheel == LEFT_WHEEL_BW_SC) {
                	calibWheel = RIGHT_WHEEL_FW_SC;
    5450:	90 93 0c 05 	sts	0x050C, r25
					calibrateOdomFlag = 0;
    5454:	10 92 23 05 	sts	0x0523, r1
    5458:	40 ce       	rjmp	.-896    	; 0x50da <handleCalibration+0xf6>

0000545a <getInputFromSpeed>:

}

// extract data to pass to speed controller given a desired speed in mm/s
// mode => return a measured speed 0..1023
signed int getInputFromSpeed(signed int s, unsigned char mode) {
    545a:	af 92       	push	r10
    545c:	bf 92       	push	r11
    545e:	cf 92       	push	r12
    5460:	df 92       	push	r13
    5462:	ef 92       	push	r14
    5464:	ff 92       	push	r15
    5466:	0f 93       	push	r16
    5468:	1f 93       	push	r17
    546a:	cf 93       	push	r28
    546c:	df 93       	push	r29
    
    int i = 0;
    signed int currVel = s*BYTE_TO_MM_S;
    546e:	9c 01       	movw	r18, r24
    5470:	22 0f       	add	r18, r18
    5472:	33 1f       	adc	r19, r19
    5474:	22 0f       	add	r18, r18
    5476:	33 1f       	adc	r19, r19
    5478:	28 0f       	add	r18, r24
    547a:	39 1f       	adc	r19, r25
    signed int temp = 0;

    if(currVel == 0) {
    547c:	21 15       	cp	r18, r1
    547e:	31 05       	cpc	r19, r1
    5480:	09 f4       	brne	.+2      	; 0x5484 <getInputFromSpeed+0x2a>
    5482:	7b c0       	rjmp	.+246    	; 0x557a <getInputFromSpeed+0x120>
        return 0;
    }

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
    5484:	86 2f       	mov	r24, r22
    5486:	82 50       	subi	r24, 0x02	; 2
    5488:	82 30       	cpi	r24, 0x02	; 2
    548a:	08 f4       	brcc	.+2      	; 0x548e <getInputFromSpeed+0x34>
    548c:	84 c0       	rjmp	.+264    	; 0x5596 <getInputFromSpeed+0x13c>
        currVel = -currVel; // consider only positive values
    548e:	66 23       	and	r22, r22
    5490:	09 f0       	breq	.+2      	; 0x5494 <getInputFromSpeed+0x3a>
    5492:	84 c0       	rjmp	.+264    	; 0x559c <getInputFromSpeed+0x142>
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
    5494:	80 91 0b 08 	lds	r24, 0x080B
    5498:	90 91 0c 08 	lds	r25, 0x080C
    549c:	82 17       	cp	r24, r18
    549e:	93 07       	cpc	r25, r19
    54a0:	0c f0       	brlt	.+2      	; 0x54a4 <getInputFromSpeed+0x4a>
    54a2:	1b c2       	rjmp	.+1078   	; 0x58da <getInputFromSpeed+0x480>
    54a4:	80 91 1b 08 	lds	r24, 0x081B
    54a8:	90 91 1c 08 	lds	r25, 0x081C
    54ac:	82 17       	cp	r24, r18
    54ae:	93 07       	cpc	r25, r19
    54b0:	0c f0       	brlt	.+2      	; 0x54b4 <getInputFromSpeed+0x5a>
    54b2:	1c c2       	rjmp	.+1080   	; 0x58ec <getInputFromSpeed+0x492>
    54b4:	80 91 2b 08 	lds	r24, 0x082B
    54b8:	90 91 2c 08 	lds	r25, 0x082C
    54bc:	82 17       	cp	r24, r18
    54be:	93 07       	cpc	r25, r19
    54c0:	0c f0       	brlt	.+2      	; 0x54c4 <getInputFromSpeed+0x6a>
    54c2:	17 c2       	rjmp	.+1070   	; 0x58f2 <getInputFromSpeed+0x498>
    54c4:	80 91 3b 08 	lds	r24, 0x083B
    54c8:	90 91 3c 08 	lds	r25, 0x083C
    54cc:	82 17       	cp	r24, r18
    54ce:	93 07       	cpc	r25, r19
    54d0:	0c f0       	brlt	.+2      	; 0x54d4 <getInputFromSpeed+0x7a>
    54d2:	12 c2       	rjmp	.+1060   	; 0x58f8 <getInputFromSpeed+0x49e>
    54d4:	80 91 4b 08 	lds	r24, 0x084B
    54d8:	90 91 4c 08 	lds	r25, 0x084C
    54dc:	82 17       	cp	r24, r18
    54de:	93 07       	cpc	r25, r19
    54e0:	0c f0       	brlt	.+2      	; 0x54e4 <getInputFromSpeed+0x8a>
    54e2:	fe c1       	rjmp	.+1020   	; 0x58e0 <getInputFromSpeed+0x486>
    54e4:	80 91 5b 08 	lds	r24, 0x085B
    54e8:	90 91 5c 08 	lds	r25, 0x085C
    54ec:	82 17       	cp	r24, r18
    54ee:	93 07       	cpc	r25, r19
    54f0:	0c f0       	brlt	.+2      	; 0x54f4 <getInputFromSpeed+0x9a>
    54f2:	f9 c1       	rjmp	.+1010   	; 0x58e6 <getInputFromSpeed+0x48c>
    54f4:	80 91 6b 08 	lds	r24, 0x086B
    54f8:	90 91 6c 08 	lds	r25, 0x086C
    54fc:	82 17       	cp	r24, r18
    54fe:	93 07       	cpc	r25, r19
    5500:	0c f0       	brlt	.+2      	; 0x5504 <getInputFromSpeed+0xaa>
    5502:	02 c2       	rjmp	.+1028   	; 0x5908 <getInputFromSpeed+0x4ae>
    5504:	80 91 7b 08 	lds	r24, 0x087B
    5508:	90 91 7c 08 	lds	r25, 0x087C
    550c:	82 17       	cp	r24, r18
    550e:	93 07       	cpc	r25, r19
    5510:	0c f0       	brlt	.+2      	; 0x5514 <getInputFromSpeed+0xba>
    5512:	fd c1       	rjmp	.+1018   	; 0x590e <getInputFromSpeed+0x4b4>
    5514:	c0 91 8b 08 	lds	r28, 0x088B
    5518:	d0 91 8c 08 	lds	r29, 0x088C
    551c:	c2 17       	cp	r28, r18
    551e:	d3 07       	cpc	r29, r19
    5520:	0c f0       	brlt	.+2      	; 0x5524 <getInputFromSpeed+0xca>
    5522:	7a c1       	rjmp	.+756    	; 0x5818 <getInputFromSpeed+0x3be>
            temp = currVel*calibration[0][6]/calibration[0][7];
            temp = -temp;
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
    5524:	b9 01       	movw	r22, r18
    5526:	88 27       	eor	r24, r24
    5528:	77 fd       	sbrc	r23, 7
    552a:	80 95       	com	r24
    552c:	98 2f       	mov	r25, r24
    552e:	0e 94 ee 49 	call	0x93dc	; 0x93dc <__floatsisf>
    5532:	7b 01       	movw	r14, r22
    5534:	8c 01       	movw	r16, r24
    5536:	60 91 89 08 	lds	r22, 0x0889
    553a:	70 91 8a 08 	lds	r23, 0x088A
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
    553e:	88 27       	eor	r24, r24
    5540:	77 fd       	sbrc	r23, 7
    5542:	80 95       	com	r24
    5544:	98 2f       	mov	r25, r24
    5546:	0e 94 ee 49 	call	0x93dc	; 0x93dc <__floatsisf>
    554a:	9b 01       	movw	r18, r22
    554c:	ac 01       	movw	r20, r24
    554e:	c8 01       	movw	r24, r16
    5550:	b7 01       	movw	r22, r14
    5552:	0e 94 03 4b 	call	0x9606	; 0x9606 <__mulsf3>
    5556:	7b 01       	movw	r14, r22
    5558:	8c 01       	movw	r16, r24
    555a:	be 01       	movw	r22, r28
    555c:	88 27       	eor	r24, r24
    555e:	77 fd       	sbrc	r23, 7
    5560:	80 95       	com	r24
    5562:	98 2f       	mov	r25, r24
    5564:	0e 94 ee 49 	call	0x93dc	; 0x93dc <__floatsisf>
    5568:	9b 01       	movw	r18, r22
    556a:	ac 01       	movw	r20, r24
    556c:	c8 01       	movw	r24, r16
    556e:	b7 01       	movw	r22, r14
    5570:	0e 94 53 49 	call	0x92a6	; 0x92a6 <__divsf3>
    5574:	0e 94 bb 49 	call	0x9376	; 0x9376 <__fixsfsi>
    5578:	02 c0       	rjmp	.+4      	; 0x557e <getInputFromSpeed+0x124>
// mode => return a measured speed 0..1023
signed int getInputFromSpeed(signed int s, unsigned char mode) {
    
    int i = 0;
    signed int currVel = s*BYTE_TO_MM_S;
    signed int temp = 0;
    557a:	60 e0       	ldi	r22, 0x00	; 0
    557c:	70 e0       	ldi	r23, 0x00	; 0
            temp = -temp;
        }        
    }
    
    return temp;
}
    557e:	cb 01       	movw	r24, r22
    5580:	df 91       	pop	r29
    5582:	cf 91       	pop	r28
    5584:	1f 91       	pop	r17
    5586:	0f 91       	pop	r16
    5588:	ff 90       	pop	r15
    558a:	ef 90       	pop	r14
    558c:	df 90       	pop	r13
    558e:	cf 90       	pop	r12
    5590:	bf 90       	pop	r11
    5592:	af 90       	pop	r10
    5594:	08 95       	ret
    if(currVel == 0) {
        return 0;
    }

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
        currVel = -currVel; // consider only positive values
    5596:	30 95       	com	r19
    5598:	21 95       	neg	r18
    559a:	3f 4f       	sbci	r19, 0xFF	; 255
    559c:	63 30       	cpi	r22, 0x03	; 3
    559e:	09 f4       	brne	.+2      	; 0x55a2 <getInputFromSpeed+0x148>
    55a0:	f3 c0       	rjmp	.+486    	; 0x5788 <getInputFromSpeed+0x32e>
    55a2:	62 30       	cpi	r22, 0x02	; 2
    55a4:	01 f1       	breq	.+64     	; 0x55e6 <getInputFromSpeed+0x18c>
    55a6:	61 30       	cpi	r22, 0x01	; 1
    55a8:	09 f4       	brne	.+2      	; 0x55ac <getInputFromSpeed+0x152>
    55aa:	98 c0       	rjmp	.+304    	; 0x56dc <getInputFromSpeed+0x282>
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][6]/calibration[0][7];
            temp = -temp;
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
    55ac:	66 23       	and	r22, r22
    55ae:	09 f4       	brne	.+2      	; 0x55b2 <getInputFromSpeed+0x158>
    55b0:	90 c0       	rjmp	.+288    	; 0x56d2 <getInputFromSpeed+0x278>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
    55b2:	61 30       	cpi	r22, 0x01	; 1
    55b4:	09 f4       	brne	.+2      	; 0x55b8 <getInputFromSpeed+0x15e>
    55b6:	8c c1       	rjmp	.+792    	; 0x58d0 <getInputFromSpeed+0x476>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
        } else if(mode==LEFT_WHEEL_BW_SC) {
    55b8:	62 30       	cpi	r22, 0x02	; 2
    55ba:	09 f4       	brne	.+2      	; 0x55be <getInputFromSpeed+0x164>
    55bc:	a0 c1       	rjmp	.+832    	; 0x58fe <getInputFromSpeed+0x4a4>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][4]/(float)calibration[CALIBRATION_SAMPLES-1][5]);
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
    55be:	63 30       	cpi	r22, 0x03	; 3
    55c0:	e1 f6       	brne	.-72     	; 0x557a <getInputFromSpeed+0x120>
    55c2:	c0 91 97 08 	lds	r28, 0x0897
    55c6:	d0 91 98 08 	lds	r29, 0x0898
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][6]/(float)calibration[CALIBRATION_SAMPLES-1][7]);
    55ca:	b9 01       	movw	r22, r18
    55cc:	88 27       	eor	r24, r24
    55ce:	77 fd       	sbrc	r23, 7
    55d0:	80 95       	com	r24
    55d2:	98 2f       	mov	r25, r24
    55d4:	0e 94 ee 49 	call	0x93dc	; 0x93dc <__floatsisf>
    55d8:	7b 01       	movw	r14, r22
    55da:	8c 01       	movw	r16, r24
    55dc:	60 91 95 08 	lds	r22, 0x0895
    55e0:	70 91 96 08 	lds	r23, 0x0896
    55e4:	55 c0       	rjmp	.+170    	; 0x5690 <getInputFromSpeed+0x236>
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            if(calibration[i][3] >= currVel) {
                break;
            }
        } else if(mode==LEFT_WHEEL_BW_SC) {
            if(calibration[i][5] >= currVel) {
    55e6:	80 91 13 08 	lds	r24, 0x0813
    55ea:	90 91 14 08 	lds	r25, 0x0814
    55ee:	82 17       	cp	r24, r18
    55f0:	93 07       	cpc	r25, r19
    55f2:	0c f0       	brlt	.+2      	; 0x55f6 <getInputFromSpeed+0x19c>
    55f4:	72 c1       	rjmp	.+740    	; 0x58da <getInputFromSpeed+0x480>
    55f6:	80 91 23 08 	lds	r24, 0x0823
    55fa:	90 91 24 08 	lds	r25, 0x0824
    55fe:	82 17       	cp	r24, r18
    5600:	93 07       	cpc	r25, r19
    5602:	0c f0       	brlt	.+2      	; 0x5606 <getInputFromSpeed+0x1ac>
    5604:	73 c1       	rjmp	.+742    	; 0x58ec <getInputFromSpeed+0x492>
    5606:	80 91 33 08 	lds	r24, 0x0833
    560a:	90 91 34 08 	lds	r25, 0x0834
    560e:	82 17       	cp	r24, r18
    5610:	93 07       	cpc	r25, r19
    5612:	0c f0       	brlt	.+2      	; 0x5616 <getInputFromSpeed+0x1bc>
    5614:	6e c1       	rjmp	.+732    	; 0x58f2 <getInputFromSpeed+0x498>
    5616:	80 91 43 08 	lds	r24, 0x0843
    561a:	90 91 44 08 	lds	r25, 0x0844
    561e:	82 17       	cp	r24, r18
    5620:	93 07       	cpc	r25, r19
    5622:	0c f0       	brlt	.+2      	; 0x5626 <getInputFromSpeed+0x1cc>
    5624:	69 c1       	rjmp	.+722    	; 0x58f8 <getInputFromSpeed+0x49e>
    5626:	80 91 53 08 	lds	r24, 0x0853
    562a:	90 91 54 08 	lds	r25, 0x0854
    562e:	82 17       	cp	r24, r18
    5630:	93 07       	cpc	r25, r19
    5632:	0c f0       	brlt	.+2      	; 0x5636 <getInputFromSpeed+0x1dc>
    5634:	55 c1       	rjmp	.+682    	; 0x58e0 <getInputFromSpeed+0x486>
    5636:	80 91 63 08 	lds	r24, 0x0863
    563a:	90 91 64 08 	lds	r25, 0x0864
    563e:	82 17       	cp	r24, r18
    5640:	93 07       	cpc	r25, r19
    5642:	0c f0       	brlt	.+2      	; 0x5646 <getInputFromSpeed+0x1ec>
    5644:	50 c1       	rjmp	.+672    	; 0x58e6 <getInputFromSpeed+0x48c>
    5646:	80 91 73 08 	lds	r24, 0x0873
    564a:	90 91 74 08 	lds	r25, 0x0874
    564e:	82 17       	cp	r24, r18
    5650:	93 07       	cpc	r25, r19
    5652:	0c f0       	brlt	.+2      	; 0x5656 <getInputFromSpeed+0x1fc>
    5654:	59 c1       	rjmp	.+690    	; 0x5908 <getInputFromSpeed+0x4ae>
    5656:	80 91 83 08 	lds	r24, 0x0883
    565a:	90 91 84 08 	lds	r25, 0x0884
    565e:	82 17       	cp	r24, r18
    5660:	93 07       	cpc	r25, r19
    5662:	0c f0       	brlt	.+2      	; 0x5666 <getInputFromSpeed+0x20c>
    5664:	54 c1       	rjmp	.+680    	; 0x590e <getInputFromSpeed+0x4b4>
    5666:	c0 91 93 08 	lds	r28, 0x0893
    566a:	d0 91 94 08 	lds	r29, 0x0894
    566e:	c2 17       	cp	r28, r18
    5670:	d3 07       	cpc	r29, r19
    5672:	0c f0       	brlt	.+2      	; 0x5676 <getInputFromSpeed+0x21c>
    5674:	d1 c0       	rjmp	.+418    	; 0x5818 <getInputFromSpeed+0x3be>
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][4]/(float)calibration[CALIBRATION_SAMPLES-1][5]);
    5676:	b9 01       	movw	r22, r18
    5678:	88 27       	eor	r24, r24
    567a:	77 fd       	sbrc	r23, 7
    567c:	80 95       	com	r24
    567e:	98 2f       	mov	r25, r24
    5680:	0e 94 ee 49 	call	0x93dc	; 0x93dc <__floatsisf>
    5684:	7b 01       	movw	r14, r22
    5686:	8c 01       	movw	r16, r24
    5688:	60 91 91 08 	lds	r22, 0x0891
    568c:	70 91 92 08 	lds	r23, 0x0892
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][6]/(float)calibration[CALIBRATION_SAMPLES-1][7]);
    5690:	88 27       	eor	r24, r24
    5692:	77 fd       	sbrc	r23, 7
    5694:	80 95       	com	r24
    5696:	98 2f       	mov	r25, r24
    5698:	0e 94 ee 49 	call	0x93dc	; 0x93dc <__floatsisf>
    569c:	9b 01       	movw	r18, r22
    569e:	ac 01       	movw	r20, r24
    56a0:	c8 01       	movw	r24, r16
    56a2:	b7 01       	movw	r22, r14
    56a4:	0e 94 03 4b 	call	0x9606	; 0x9606 <__mulsf3>
    56a8:	7b 01       	movw	r14, r22
    56aa:	8c 01       	movw	r16, r24
    56ac:	be 01       	movw	r22, r28
    56ae:	88 27       	eor	r24, r24
    56b0:	77 fd       	sbrc	r23, 7
    56b2:	80 95       	com	r24
    56b4:	98 2f       	mov	r25, r24
    56b6:	0e 94 ee 49 	call	0x93dc	; 0x93dc <__floatsisf>
    56ba:	9b 01       	movw	r18, r22
    56bc:	ac 01       	movw	r20, r24
    56be:	c8 01       	movw	r24, r16
    56c0:	b7 01       	movw	r22, r14
    56c2:	0e 94 53 49 	call	0x92a6	; 0x92a6 <__divsf3>
    56c6:	0e 94 bb 49 	call	0x9376	; 0x9376 <__fixsfsi>
            temp = -temp;
    56ca:	70 95       	com	r23
    56cc:	61 95       	neg	r22
    56ce:	7f 4f       	sbci	r23, 0xFF	; 255
    56d0:	56 cf       	rjmp	.-340    	; 0x557e <getInputFromSpeed+0x124>
    56d2:	c0 91 8b 08 	lds	r28, 0x088B
    56d6:	d0 91 8c 08 	lds	r29, 0x088C
    56da:	24 cf       	rjmp	.-440    	; 0x5524 <getInputFromSpeed+0xca>
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
                break;
            }
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            if(calibration[i][3] >= currVel) {
    56dc:	80 91 0f 08 	lds	r24, 0x080F
    56e0:	90 91 10 08 	lds	r25, 0x0810
    56e4:	82 17       	cp	r24, r18
    56e6:	93 07       	cpc	r25, r19
    56e8:	0c f0       	brlt	.+2      	; 0x56ec <getInputFromSpeed+0x292>
    56ea:	f7 c0       	rjmp	.+494    	; 0x58da <getInputFromSpeed+0x480>
    56ec:	80 91 1f 08 	lds	r24, 0x081F
    56f0:	90 91 20 08 	lds	r25, 0x0820
    56f4:	82 17       	cp	r24, r18
    56f6:	93 07       	cpc	r25, r19
    56f8:	0c f0       	brlt	.+2      	; 0x56fc <getInputFromSpeed+0x2a2>
    56fa:	f8 c0       	rjmp	.+496    	; 0x58ec <getInputFromSpeed+0x492>
    56fc:	80 91 2f 08 	lds	r24, 0x082F
    5700:	90 91 30 08 	lds	r25, 0x0830
    5704:	82 17       	cp	r24, r18
    5706:	93 07       	cpc	r25, r19
    5708:	0c f0       	brlt	.+2      	; 0x570c <getInputFromSpeed+0x2b2>
    570a:	f3 c0       	rjmp	.+486    	; 0x58f2 <getInputFromSpeed+0x498>
    570c:	80 91 3f 08 	lds	r24, 0x083F
    5710:	90 91 40 08 	lds	r25, 0x0840
    5714:	82 17       	cp	r24, r18
    5716:	93 07       	cpc	r25, r19
    5718:	0c f0       	brlt	.+2      	; 0x571c <getInputFromSpeed+0x2c2>
    571a:	ee c0       	rjmp	.+476    	; 0x58f8 <getInputFromSpeed+0x49e>
    571c:	80 91 4f 08 	lds	r24, 0x084F
    5720:	90 91 50 08 	lds	r25, 0x0850
    5724:	82 17       	cp	r24, r18
    5726:	93 07       	cpc	r25, r19
    5728:	0c f0       	brlt	.+2      	; 0x572c <getInputFromSpeed+0x2d2>
    572a:	da c0       	rjmp	.+436    	; 0x58e0 <getInputFromSpeed+0x486>
    572c:	80 91 5f 08 	lds	r24, 0x085F
    5730:	90 91 60 08 	lds	r25, 0x0860
    5734:	82 17       	cp	r24, r18
    5736:	93 07       	cpc	r25, r19
    5738:	0c f0       	brlt	.+2      	; 0x573c <getInputFromSpeed+0x2e2>
    573a:	d5 c0       	rjmp	.+426    	; 0x58e6 <getInputFromSpeed+0x48c>
    573c:	80 91 6f 08 	lds	r24, 0x086F
    5740:	90 91 70 08 	lds	r25, 0x0870
    5744:	82 17       	cp	r24, r18
    5746:	93 07       	cpc	r25, r19
    5748:	0c f0       	brlt	.+2      	; 0x574c <getInputFromSpeed+0x2f2>
    574a:	de c0       	rjmp	.+444    	; 0x5908 <getInputFromSpeed+0x4ae>
    574c:	80 91 7f 08 	lds	r24, 0x087F
    5750:	90 91 80 08 	lds	r25, 0x0880
    5754:	82 17       	cp	r24, r18
    5756:	93 07       	cpc	r25, r19
    5758:	0c f0       	brlt	.+2      	; 0x575c <getInputFromSpeed+0x302>
    575a:	d9 c0       	rjmp	.+434    	; 0x590e <getInputFromSpeed+0x4b4>
    575c:	c0 91 8f 08 	lds	r28, 0x088F
    5760:	d0 91 90 08 	lds	r29, 0x0890
    5764:	c2 17       	cp	r28, r18
    5766:	d3 07       	cpc	r29, r19
    5768:	0c f0       	brlt	.+2      	; 0x576c <getInputFromSpeed+0x312>
    576a:	56 c0       	rjmp	.+172    	; 0x5818 <getInputFromSpeed+0x3be>
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
    576c:	b9 01       	movw	r22, r18
    576e:	88 27       	eor	r24, r24
    5770:	77 fd       	sbrc	r23, 7
    5772:	80 95       	com	r24
    5774:	98 2f       	mov	r25, r24
    5776:	0e 94 ee 49 	call	0x93dc	; 0x93dc <__floatsisf>
    577a:	7b 01       	movw	r14, r22
    577c:	8c 01       	movw	r16, r24
    577e:	60 91 8d 08 	lds	r22, 0x088D
    5782:	70 91 8e 08 	lds	r23, 0x088E
    5786:	db ce       	rjmp	.-586    	; 0x553e <getInputFromSpeed+0xe4>
        } else if(mode==LEFT_WHEEL_BW_SC) {
            if(calibration[i][5] >= currVel) {
                break;
            }
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            if(calibration[i][7] >= currVel) {
    5788:	80 91 17 08 	lds	r24, 0x0817
    578c:	90 91 18 08 	lds	r25, 0x0818
    5790:	82 17       	cp	r24, r18
    5792:	93 07       	cpc	r25, r19
    5794:	0c f0       	brlt	.+2      	; 0x5798 <getInputFromSpeed+0x33e>
    5796:	a1 c0       	rjmp	.+322    	; 0x58da <getInputFromSpeed+0x480>
    5798:	80 91 27 08 	lds	r24, 0x0827
    579c:	90 91 28 08 	lds	r25, 0x0828
    57a0:	82 17       	cp	r24, r18
    57a2:	93 07       	cpc	r25, r19
    57a4:	0c f0       	brlt	.+2      	; 0x57a8 <getInputFromSpeed+0x34e>
    57a6:	a2 c0       	rjmp	.+324    	; 0x58ec <getInputFromSpeed+0x492>
    57a8:	80 91 37 08 	lds	r24, 0x0837
    57ac:	90 91 38 08 	lds	r25, 0x0838
    57b0:	82 17       	cp	r24, r18
    57b2:	93 07       	cpc	r25, r19
    57b4:	0c f0       	brlt	.+2      	; 0x57b8 <getInputFromSpeed+0x35e>
    57b6:	9d c0       	rjmp	.+314    	; 0x58f2 <getInputFromSpeed+0x498>
    57b8:	80 91 47 08 	lds	r24, 0x0847
    57bc:	90 91 48 08 	lds	r25, 0x0848
    57c0:	82 17       	cp	r24, r18
    57c2:	93 07       	cpc	r25, r19
    57c4:	0c f0       	brlt	.+2      	; 0x57c8 <getInputFromSpeed+0x36e>
    57c6:	98 c0       	rjmp	.+304    	; 0x58f8 <getInputFromSpeed+0x49e>
    57c8:	80 91 57 08 	lds	r24, 0x0857
    57cc:	90 91 58 08 	lds	r25, 0x0858
    57d0:	82 17       	cp	r24, r18
    57d2:	93 07       	cpc	r25, r19
    57d4:	0c f0       	brlt	.+2      	; 0x57d8 <getInputFromSpeed+0x37e>
    57d6:	84 c0       	rjmp	.+264    	; 0x58e0 <getInputFromSpeed+0x486>
    57d8:	80 91 67 08 	lds	r24, 0x0867
    57dc:	90 91 68 08 	lds	r25, 0x0868
    57e0:	82 17       	cp	r24, r18
    57e2:	93 07       	cpc	r25, r19
    57e4:	0c f0       	brlt	.+2      	; 0x57e8 <getInputFromSpeed+0x38e>
    57e6:	7f c0       	rjmp	.+254    	; 0x58e6 <getInputFromSpeed+0x48c>
    57e8:	80 91 77 08 	lds	r24, 0x0877
    57ec:	90 91 78 08 	lds	r25, 0x0878
    57f0:	82 17       	cp	r24, r18
    57f2:	93 07       	cpc	r25, r19
    57f4:	0c f0       	brlt	.+2      	; 0x57f8 <getInputFromSpeed+0x39e>
    57f6:	88 c0       	rjmp	.+272    	; 0x5908 <getInputFromSpeed+0x4ae>
    57f8:	80 91 87 08 	lds	r24, 0x0887
    57fc:	90 91 88 08 	lds	r25, 0x0888
    5800:	82 17       	cp	r24, r18
    5802:	93 07       	cpc	r25, r19
    5804:	0c f0       	brlt	.+2      	; 0x5808 <getInputFromSpeed+0x3ae>
    5806:	83 c0       	rjmp	.+262    	; 0x590e <getInputFromSpeed+0x4b4>
    5808:	c0 91 97 08 	lds	r28, 0x0897
    580c:	d0 91 98 08 	lds	r29, 0x0898
    5810:	c2 17       	cp	r28, r18
    5812:	d3 07       	cpc	r29, r19
    5814:	0c f4       	brge	.+2      	; 0x5818 <getInputFromSpeed+0x3be>
    5816:	d9 ce       	rjmp	.-590    	; 0x55ca <getInputFromSpeed+0x170>
        currVel = -currVel; // consider only positive values
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
    5818:	c8 e0       	ldi	r28, 0x08	; 8
    581a:	d0 e0       	ldi	r29, 0x00	; 0
                break;
            }
        } 
    }

    if(i==0) {  // the velocity is lower than first saved in the matrix
    581c:	20 97       	sbiw	r28, 0x00	; 0
    581e:	09 f0       	breq	.+2      	; 0x5822 <getInputFromSpeed+0x3c8>
    5820:	79 c0       	rjmp	.+242    	; 0x5914 <getInputFromSpeed+0x4ba>
        if(mode==LEFT_WHEEL_FW_SC) {
    5822:	66 23       	and	r22, r22
    5824:	91 f4       	brne	.+36     	; 0x584a <getInputFromSpeed+0x3f0>
            temp = (currVel*calibration[0][0])/calibration[0][1];
    5826:	40 91 09 08 	lds	r20, 0x0809
    582a:	50 91 0a 08 	lds	r21, 0x080A
    582e:	24 9f       	mul	r18, r20
    5830:	c0 01       	movw	r24, r0
    5832:	25 9f       	mul	r18, r21
    5834:	90 0d       	add	r25, r0
    5836:	34 9f       	mul	r19, r20
    5838:	90 0d       	add	r25, r0
    583a:	11 24       	eor	r1, r1
    583c:	60 91 0b 08 	lds	r22, 0x080B
    5840:	70 91 0c 08 	lds	r23, 0x080C
    5844:	0e 94 c1 4b 	call	0x9782	; 0x9782 <__divmodhi4>
    5848:	9a ce       	rjmp	.-716    	; 0x557e <getInputFromSpeed+0x124>
        } else if(mode==RIGHT_WHEEL_FW_SC) {
    584a:	61 30       	cpi	r22, 0x01	; 1
    584c:	d1 f0       	breq	.+52     	; 0x5882 <getInputFromSpeed+0x428>
            temp = (currVel*calibration[0][2])/calibration[0][3];
        } else if(mode==LEFT_WHEEL_BW_SC) {
    584e:	62 30       	cpi	r22, 0x02	; 2
    5850:	51 f1       	breq	.+84     	; 0x58a6 <getInputFromSpeed+0x44c>
            temp = currVel*calibration[0][4]/calibration[0][5];
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
    5852:	63 30       	cpi	r22, 0x03	; 3
    5854:	09 f0       	breq	.+2      	; 0x5858 <getInputFromSpeed+0x3fe>
    5856:	91 ce       	rjmp	.-734    	; 0x557a <getInputFromSpeed+0x120>
            temp = currVel*calibration[0][6]/calibration[0][7];
    5858:	40 91 15 08 	lds	r20, 0x0815
    585c:	50 91 16 08 	lds	r21, 0x0816
    5860:	24 9f       	mul	r18, r20
    5862:	c0 01       	movw	r24, r0
    5864:	25 9f       	mul	r18, r21
    5866:	90 0d       	add	r25, r0
    5868:	34 9f       	mul	r19, r20
    586a:	90 0d       	add	r25, r0
    586c:	11 24       	eor	r1, r1
    586e:	60 91 17 08 	lds	r22, 0x0817
    5872:	70 91 18 08 	lds	r23, 0x0818
    5876:	0e 94 c1 4b 	call	0x9782	; 0x9782 <__divmodhi4>
            temp = -temp;
    587a:	70 95       	com	r23
    587c:	61 95       	neg	r22
    587e:	7f 4f       	sbci	r23, 0xFF	; 255
    5880:	7e ce       	rjmp	.-772    	; 0x557e <getInputFromSpeed+0x124>

    if(i==0) {  // the velocity is lower than first saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][0])/calibration[0][1];
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][2])/calibration[0][3];
    5882:	40 91 0d 08 	lds	r20, 0x080D
    5886:	50 91 0e 08 	lds	r21, 0x080E
    588a:	24 9f       	mul	r18, r20
    588c:	c0 01       	movw	r24, r0
    588e:	25 9f       	mul	r18, r21
    5890:	90 0d       	add	r25, r0
    5892:	34 9f       	mul	r19, r20
    5894:	90 0d       	add	r25, r0
    5896:	11 24       	eor	r1, r1
    5898:	60 91 0f 08 	lds	r22, 0x080F
    589c:	70 91 10 08 	lds	r23, 0x0810
    58a0:	0e 94 c1 4b 	call	0x9782	; 0x9782 <__divmodhi4>
    58a4:	6c ce       	rjmp	.-808    	; 0x557e <getInputFromSpeed+0x124>
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][4]/calibration[0][5];
    58a6:	40 91 11 08 	lds	r20, 0x0811
    58aa:	50 91 12 08 	lds	r21, 0x0812
    58ae:	24 9f       	mul	r18, r20
    58b0:	c0 01       	movw	r24, r0
    58b2:	25 9f       	mul	r18, r21
    58b4:	90 0d       	add	r25, r0
    58b6:	34 9f       	mul	r19, r20
    58b8:	90 0d       	add	r25, r0
    58ba:	11 24       	eor	r1, r1
    58bc:	60 91 13 08 	lds	r22, 0x0813
    58c0:	70 91 14 08 	lds	r23, 0x0814
    58c4:	0e 94 c1 4b 	call	0x9782	; 0x9782 <__divmodhi4>
            temp = -temp;
    58c8:	70 95       	com	r23
    58ca:	61 95       	neg	r22
    58cc:	7f 4f       	sbci	r23, 0xFF	; 255
    58ce:	57 ce       	rjmp	.-850    	; 0x557e <getInputFromSpeed+0x124>
    58d0:	c0 91 8f 08 	lds	r28, 0x088F
    58d4:	d0 91 90 08 	lds	r29, 0x0890
    58d8:	49 cf       	rjmp	.-366    	; 0x576c <getInputFromSpeed+0x312>

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
        currVel = -currVel; // consider only positive values
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    58da:	c0 e0       	ldi	r28, 0x00	; 0
    58dc:	d0 e0       	ldi	r29, 0x00	; 0
    58de:	9e cf       	rjmp	.-196    	; 0x581c <getInputFromSpeed+0x3c2>
    58e0:	c4 e0       	ldi	r28, 0x04	; 4
    58e2:	d0 e0       	ldi	r29, 0x00	; 0
    58e4:	9b cf       	rjmp	.-202    	; 0x581c <getInputFromSpeed+0x3c2>
    58e6:	c5 e0       	ldi	r28, 0x05	; 5
    58e8:	d0 e0       	ldi	r29, 0x00	; 0
    58ea:	98 cf       	rjmp	.-208    	; 0x581c <getInputFromSpeed+0x3c2>
    58ec:	c1 e0       	ldi	r28, 0x01	; 1
    58ee:	d0 e0       	ldi	r29, 0x00	; 0
    58f0:	95 cf       	rjmp	.-214    	; 0x581c <getInputFromSpeed+0x3c2>
    58f2:	c2 e0       	ldi	r28, 0x02	; 2
    58f4:	d0 e0       	ldi	r29, 0x00	; 0
    58f6:	92 cf       	rjmp	.-220    	; 0x581c <getInputFromSpeed+0x3c2>
    58f8:	c3 e0       	ldi	r28, 0x03	; 3
    58fa:	d0 e0       	ldi	r29, 0x00	; 0
    58fc:	8f cf       	rjmp	.-226    	; 0x581c <getInputFromSpeed+0x3c2>
    58fe:	c0 91 93 08 	lds	r28, 0x0893
    5902:	d0 91 94 08 	lds	r29, 0x0894
    5906:	b7 ce       	rjmp	.-658    	; 0x5676 <getInputFromSpeed+0x21c>
    5908:	c6 e0       	ldi	r28, 0x06	; 6
    590a:	d0 e0       	ldi	r29, 0x00	; 0
    590c:	87 cf       	rjmp	.-242    	; 0x581c <getInputFromSpeed+0x3c2>
    590e:	c7 e0       	ldi	r28, 0x07	; 7
    5910:	d0 e0       	ldi	r29, 0x00	; 0
    5912:	84 cf       	rjmp	.-248    	; 0x581c <getInputFromSpeed+0x3c2>
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][6]/calibration[0][7];
            temp = -temp;
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    5914:	c9 30       	cpi	r28, 0x09	; 9
    5916:	d1 05       	cpc	r29, r1
    5918:	09 f4       	brne	.+2      	; 0x591c <getInputFromSpeed+0x4c2>
    591a:	48 ce       	rjmp	.-880    	; 0x55ac <getInputFromSpeed+0x152>
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][6]/(float)calibration[CALIBRATION_SAMPLES-1][7]);
            temp = -temp;
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
    591c:	66 23       	and	r22, r22
    591e:	09 f0       	breq	.+2      	; 0x5922 <getInputFromSpeed+0x4c8>
    5920:	47 c0       	rjmp	.+142    	; 0x59b0 <getInputFromSpeed+0x556>
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
    5922:	fe 01       	movw	r30, r28
    5924:	e2 95       	swap	r30
    5926:	f2 95       	swap	r31
    5928:	f0 7f       	andi	r31, 0xF0	; 240
    592a:	fe 27       	eor	r31, r30
    592c:	e0 7f       	andi	r30, 0xF0	; 240
    592e:	fe 27       	eor	r31, r30
    5930:	e7 50       	subi	r30, 0x07	; 7
    5932:	f8 4f       	sbci	r31, 0xF8	; 248
    5934:	c2 80       	ldd	r12, Z+2	; 0x02
    5936:	d3 80       	ldd	r13, Z+3	; 0x03
    5938:	a0 80       	ld	r10, Z
    593a:	b1 80       	ldd	r11, Z+1	; 0x01
    593c:	2c 19       	sub	r18, r12
    593e:	3d 09       	sbc	r19, r13
    5940:	b9 01       	movw	r22, r18
    5942:	88 27       	eor	r24, r24
    5944:	77 fd       	sbrc	r23, 7
    5946:	80 95       	com	r24
    5948:	98 2f       	mov	r25, r24
    594a:	0e 94 ee 49 	call	0x93dc	; 0x93dc <__floatsisf>
    594e:	7b 01       	movw	r14, r22
    5950:	8c 01       	movw	r16, r24
    5952:	c2 95       	swap	r28
    5954:	d2 95       	swap	r29
    5956:	d0 7f       	andi	r29, 0xF0	; 240
    5958:	dc 27       	eor	r29, r28
    595a:	c0 7f       	andi	r28, 0xF0	; 240
    595c:	dc 27       	eor	r29, r28
    595e:	c7 5f       	subi	r28, 0xF7	; 247
    5960:	d7 4f       	sbci	r29, 0xF7	; 247
    5962:	68 81       	ld	r22, Y
    5964:	79 81       	ldd	r23, Y+1	; 0x01
    5966:	6a 19       	sub	r22, r10
    5968:	7b 09       	sbc	r23, r11
    596a:	88 27       	eor	r24, r24
    596c:	77 fd       	sbrc	r23, 7
    596e:	80 95       	com	r24
    5970:	98 2f       	mov	r25, r24
    5972:	0e 94 ee 49 	call	0x93dc	; 0x93dc <__floatsisf>
    5976:	9b 01       	movw	r18, r22
    5978:	ac 01       	movw	r20, r24
    597a:	c8 01       	movw	r24, r16
    597c:	b7 01       	movw	r22, r14
    597e:	0e 94 03 4b 	call	0x9606	; 0x9606 <__mulsf3>
    5982:	7b 01       	movw	r14, r22
    5984:	8c 01       	movw	r16, r24
    5986:	6a 81       	ldd	r22, Y+2	; 0x02
    5988:	7b 81       	ldd	r23, Y+3	; 0x03
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
    598a:	6c 19       	sub	r22, r12
    598c:	7d 09       	sbc	r23, r13
    598e:	88 27       	eor	r24, r24
    5990:	77 fd       	sbrc	r23, 7
    5992:	80 95       	com	r24
    5994:	98 2f       	mov	r25, r24
    5996:	0e 94 ee 49 	call	0x93dc	; 0x93dc <__floatsisf>
    599a:	9b 01       	movw	r18, r22
    599c:	ac 01       	movw	r20, r24
    599e:	c8 01       	movw	r24, r16
    59a0:	b7 01       	movw	r22, r14
    59a2:	0e 94 53 49 	call	0x92a6	; 0x92a6 <__divsf3>
    59a6:	0e 94 bb 49 	call	0x9376	; 0x9376 <__fixsfsi>
    59aa:	6a 0d       	add	r22, r10
    59ac:	7b 1d       	adc	r23, r11
    59ae:	e7 cd       	rjmp	.-1074   	; 0x557e <getInputFromSpeed+0x124>
            temp = -temp;
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
        } else if(mode==RIGHT_WHEEL_FW_SC) {
    59b0:	61 30       	cpi	r22, 0x01	; 1
    59b2:	09 f4       	brne	.+2      	; 0x59b6 <getInputFromSpeed+0x55c>
    59b4:	50 c0       	rjmp	.+160    	; 0x5a56 <getInputFromSpeed+0x5fc>
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
        } else if(mode==LEFT_WHEEL_BW_SC) {
    59b6:	62 30       	cpi	r22, 0x02	; 2
    59b8:	09 f4       	brne	.+2      	; 0x59bc <getInputFromSpeed+0x562>
    59ba:	82 c0       	rjmp	.+260    	; 0x5ac0 <getInputFromSpeed+0x666>
            temp = calibration[i-1][4] + (signed int)(((float)(currVel-calibration[i-1][5])*(float)(calibration[i][4]-calibration[i-1][4]))/(float)(calibration[i][5]-calibration[i-1][5]));
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
    59bc:	63 30       	cpi	r22, 0x03	; 3
    59be:	09 f0       	breq	.+2      	; 0x59c2 <getInputFromSpeed+0x568>
    59c0:	dc cd       	rjmp	.-1096   	; 0x557a <getInputFromSpeed+0x120>
            temp = calibration[i-1][6] + (signed int)(((float)(currVel-calibration[i-1][7])*(float)(calibration[i][6]-calibration[i-1][6]))/(float)(calibration[i][7]-calibration[i-1][7]));
    59c2:	fe 01       	movw	r30, r28
    59c4:	e2 95       	swap	r30
    59c6:	f2 95       	swap	r31
    59c8:	f0 7f       	andi	r31, 0xF0	; 240
    59ca:	fe 27       	eor	r31, r30
    59cc:	e0 7f       	andi	r30, 0xF0	; 240
    59ce:	fe 27       	eor	r31, r30
    59d0:	e7 50       	subi	r30, 0x07	; 7
    59d2:	f8 4f       	sbci	r31, 0xF8	; 248
    59d4:	c6 84       	ldd	r12, Z+14	; 0x0e
    59d6:	d7 84       	ldd	r13, Z+15	; 0x0f
    59d8:	a4 84       	ldd	r10, Z+12	; 0x0c
    59da:	b5 84       	ldd	r11, Z+13	; 0x0d
    59dc:	2c 19       	sub	r18, r12
    59de:	3d 09       	sbc	r19, r13
    59e0:	b9 01       	movw	r22, r18
    59e2:	88 27       	eor	r24, r24
    59e4:	77 fd       	sbrc	r23, 7
    59e6:	80 95       	com	r24
    59e8:	98 2f       	mov	r25, r24
    59ea:	0e 94 ee 49 	call	0x93dc	; 0x93dc <__floatsisf>
    59ee:	7b 01       	movw	r14, r22
    59f0:	8c 01       	movw	r16, r24
    59f2:	c2 95       	swap	r28
    59f4:	d2 95       	swap	r29
    59f6:	d0 7f       	andi	r29, 0xF0	; 240
    59f8:	dc 27       	eor	r29, r28
    59fa:	c0 7f       	andi	r28, 0xF0	; 240
    59fc:	dc 27       	eor	r29, r28
    59fe:	c7 5f       	subi	r28, 0xF7	; 247
    5a00:	d7 4f       	sbci	r29, 0xF7	; 247
    5a02:	6c 85       	ldd	r22, Y+12	; 0x0c
    5a04:	7d 85       	ldd	r23, Y+13	; 0x0d
    5a06:	6a 19       	sub	r22, r10
    5a08:	7b 09       	sbc	r23, r11
    5a0a:	88 27       	eor	r24, r24
    5a0c:	77 fd       	sbrc	r23, 7
    5a0e:	80 95       	com	r24
    5a10:	98 2f       	mov	r25, r24
    5a12:	0e 94 ee 49 	call	0x93dc	; 0x93dc <__floatsisf>
    5a16:	9b 01       	movw	r18, r22
    5a18:	ac 01       	movw	r20, r24
    5a1a:	c8 01       	movw	r24, r16
    5a1c:	b7 01       	movw	r22, r14
    5a1e:	0e 94 03 4b 	call	0x9606	; 0x9606 <__mulsf3>
    5a22:	7b 01       	movw	r14, r22
    5a24:	8c 01       	movw	r16, r24
    5a26:	6e 85       	ldd	r22, Y+14	; 0x0e
    5a28:	7f 85       	ldd	r23, Y+15	; 0x0f
    5a2a:	6c 19       	sub	r22, r12
    5a2c:	7d 09       	sbc	r23, r13
    5a2e:	88 27       	eor	r24, r24
    5a30:	77 fd       	sbrc	r23, 7
    5a32:	80 95       	com	r24
    5a34:	98 2f       	mov	r25, r24
    5a36:	0e 94 ee 49 	call	0x93dc	; 0x93dc <__floatsisf>
    5a3a:	9b 01       	movw	r18, r22
    5a3c:	ac 01       	movw	r20, r24
    5a3e:	c8 01       	movw	r24, r16
    5a40:	b7 01       	movw	r22, r14
    5a42:	0e 94 53 49 	call	0x92a6	; 0x92a6 <__divsf3>
    5a46:	0e 94 bb 49 	call	0x9376	; 0x9376 <__fixsfsi>
    5a4a:	6a 0d       	add	r22, r10
    5a4c:	7b 1d       	adc	r23, r11
            temp = -temp;
    5a4e:	70 95       	com	r23
    5a50:	61 95       	neg	r22
    5a52:	7f 4f       	sbci	r23, 0xFF	; 255
    5a54:	94 cd       	rjmp	.-1240   	; 0x557e <getInputFromSpeed+0x124>
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
    5a56:	fe 01       	movw	r30, r28
    5a58:	e2 95       	swap	r30
    5a5a:	f2 95       	swap	r31
    5a5c:	f0 7f       	andi	r31, 0xF0	; 240
    5a5e:	fe 27       	eor	r31, r30
    5a60:	e0 7f       	andi	r30, 0xF0	; 240
    5a62:	fe 27       	eor	r31, r30
    5a64:	e7 50       	subi	r30, 0x07	; 7
    5a66:	f8 4f       	sbci	r31, 0xF8	; 248
    5a68:	c6 80       	ldd	r12, Z+6	; 0x06
    5a6a:	d7 80       	ldd	r13, Z+7	; 0x07
    5a6c:	a4 80       	ldd	r10, Z+4	; 0x04
    5a6e:	b5 80       	ldd	r11, Z+5	; 0x05
    5a70:	2c 19       	sub	r18, r12
    5a72:	3d 09       	sbc	r19, r13
    5a74:	b9 01       	movw	r22, r18
    5a76:	88 27       	eor	r24, r24
    5a78:	77 fd       	sbrc	r23, 7
    5a7a:	80 95       	com	r24
    5a7c:	98 2f       	mov	r25, r24
    5a7e:	0e 94 ee 49 	call	0x93dc	; 0x93dc <__floatsisf>
    5a82:	7b 01       	movw	r14, r22
    5a84:	8c 01       	movw	r16, r24
    5a86:	c2 95       	swap	r28
    5a88:	d2 95       	swap	r29
    5a8a:	d0 7f       	andi	r29, 0xF0	; 240
    5a8c:	dc 27       	eor	r29, r28
    5a8e:	c0 7f       	andi	r28, 0xF0	; 240
    5a90:	dc 27       	eor	r29, r28
    5a92:	c7 5f       	subi	r28, 0xF7	; 247
    5a94:	d7 4f       	sbci	r29, 0xF7	; 247
    5a96:	6c 81       	ldd	r22, Y+4	; 0x04
    5a98:	7d 81       	ldd	r23, Y+5	; 0x05
    5a9a:	6a 19       	sub	r22, r10
    5a9c:	7b 09       	sbc	r23, r11
    5a9e:	88 27       	eor	r24, r24
    5aa0:	77 fd       	sbrc	r23, 7
    5aa2:	80 95       	com	r24
    5aa4:	98 2f       	mov	r25, r24
    5aa6:	0e 94 ee 49 	call	0x93dc	; 0x93dc <__floatsisf>
    5aaa:	9b 01       	movw	r18, r22
    5aac:	ac 01       	movw	r20, r24
    5aae:	c8 01       	movw	r24, r16
    5ab0:	b7 01       	movw	r22, r14
    5ab2:	0e 94 03 4b 	call	0x9606	; 0x9606 <__mulsf3>
    5ab6:	7b 01       	movw	r14, r22
    5ab8:	8c 01       	movw	r16, r24
    5aba:	6e 81       	ldd	r22, Y+6	; 0x06
    5abc:	7f 81       	ldd	r23, Y+7	; 0x07
    5abe:	65 cf       	rjmp	.-310    	; 0x598a <getInputFromSpeed+0x530>
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = calibration[i-1][4] + (signed int)(((float)(currVel-calibration[i-1][5])*(float)(calibration[i][4]-calibration[i-1][4]))/(float)(calibration[i][5]-calibration[i-1][5]));
    5ac0:	fe 01       	movw	r30, r28
    5ac2:	e2 95       	swap	r30
    5ac4:	f2 95       	swap	r31
    5ac6:	f0 7f       	andi	r31, 0xF0	; 240
    5ac8:	fe 27       	eor	r31, r30
    5aca:	e0 7f       	andi	r30, 0xF0	; 240
    5acc:	fe 27       	eor	r31, r30
    5ace:	e7 50       	subi	r30, 0x07	; 7
    5ad0:	f8 4f       	sbci	r31, 0xF8	; 248
    5ad2:	c2 84       	ldd	r12, Z+10	; 0x0a
    5ad4:	d3 84       	ldd	r13, Z+11	; 0x0b
    5ad6:	a0 84       	ldd	r10, Z+8	; 0x08
    5ad8:	b1 84       	ldd	r11, Z+9	; 0x09
    5ada:	2c 19       	sub	r18, r12
    5adc:	3d 09       	sbc	r19, r13
    5ade:	b9 01       	movw	r22, r18
    5ae0:	88 27       	eor	r24, r24
    5ae2:	77 fd       	sbrc	r23, 7
    5ae4:	80 95       	com	r24
    5ae6:	98 2f       	mov	r25, r24
    5ae8:	0e 94 ee 49 	call	0x93dc	; 0x93dc <__floatsisf>
    5aec:	7b 01       	movw	r14, r22
    5aee:	8c 01       	movw	r16, r24
    5af0:	c2 95       	swap	r28
    5af2:	d2 95       	swap	r29
    5af4:	d0 7f       	andi	r29, 0xF0	; 240
    5af6:	dc 27       	eor	r29, r28
    5af8:	c0 7f       	andi	r28, 0xF0	; 240
    5afa:	dc 27       	eor	r29, r28
    5afc:	c7 5f       	subi	r28, 0xF7	; 247
    5afe:	d7 4f       	sbci	r29, 0xF7	; 247
    5b00:	68 85       	ldd	r22, Y+8	; 0x08
    5b02:	79 85       	ldd	r23, Y+9	; 0x09
    5b04:	6a 19       	sub	r22, r10
    5b06:	7b 09       	sbc	r23, r11
    5b08:	88 27       	eor	r24, r24
    5b0a:	77 fd       	sbrc	r23, 7
    5b0c:	80 95       	com	r24
    5b0e:	98 2f       	mov	r25, r24
    5b10:	0e 94 ee 49 	call	0x93dc	; 0x93dc <__floatsisf>
    5b14:	9b 01       	movw	r18, r22
    5b16:	ac 01       	movw	r20, r24
    5b18:	c8 01       	movw	r24, r16
    5b1a:	b7 01       	movw	r22, r14
    5b1c:	0e 94 03 4b 	call	0x9606	; 0x9606 <__mulsf3>
    5b20:	7b 01       	movw	r14, r22
    5b22:	8c 01       	movw	r16, r24
    5b24:	6a 85       	ldd	r22, Y+10	; 0x0a
    5b26:	7b 85       	ldd	r23, Y+11	; 0x0b
    5b28:	80 cf       	rjmp	.-256    	; 0x5a2a <getInputFromSpeed+0x5d0>

00005b2a <getRightSpeedFromInput>:
    
    return temp;
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {
    5b2a:	8f 92       	push	r8
    5b2c:	9f 92       	push	r9
    5b2e:	af 92       	push	r10
    5b30:	bf 92       	push	r11
    5b32:	cf 92       	push	r12
    5b34:	df 92       	push	r13
    5b36:	ef 92       	push	r14
    5b38:	ff 92       	push	r15
    5b3a:	0f 93       	push	r16
    5b3c:	1f 93       	push	r17
    5b3e:	cf 93       	push	r28
    5b40:	df 93       	push	r29

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    5b42:	c0 91 f3 02 	lds	r28, 0x02F3
    5b46:	d0 91 f4 02 	lds	r29, 0x02F4
    5b4a:	80 91 f5 02 	lds	r24, 0x02F5
    5b4e:	90 91 f6 02 	lds	r25, 0x02F6
    5b52:	97 fd       	sbrc	r25, 7
    5b54:	d9 c0       	rjmp	.+434    	; 0x5d08 <getRightSpeedFromInput+0x1de>
    5b56:	60 91 0d 08 	lds	r22, 0x080D
    5b5a:	70 91 0e 08 	lds	r23, 0x080E
    5b5e:	6c 17       	cp	r22, r28
    5b60:	7d 07       	cpc	r23, r29
    5b62:	0c f0       	brlt	.+2      	; 0x5b66 <getRightSpeedFromInput+0x3c>
    5b64:	bd c0       	rjmp	.+378    	; 0x5ce0 <getRightSpeedFromInput+0x1b6>
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    5b66:	0f ef       	ldi	r16, 0xFF	; 255
    5b68:	1f ef       	ldi	r17, 0xFF	; 255
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    5b6a:	80 91 1d 08 	lds	r24, 0x081D
    5b6e:	90 91 1e 08 	lds	r25, 0x081E
    5b72:	8c 17       	cp	r24, r28
    5b74:	9d 07       	cpc	r25, r29
    5b76:	44 f0       	brlt	.+16     	; 0x5b88 <getRightSpeedFromInput+0x5e>
    
    return temp;
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {
    5b78:	81 e0       	ldi	r24, 0x01	; 1
    5b7a:	9f ef       	ldi	r25, 0xFF	; 255
    5b7c:	0f 3f       	cpi	r16, 0xFF	; 255
    5b7e:	19 07       	cpc	r17, r25
    5b80:	09 f0       	breq	.+2      	; 0x5b84 <getRightSpeedFromInput+0x5a>
    5b82:	80 e0       	ldi	r24, 0x00	; 0
    5b84:	08 2f       	mov	r16, r24
    5b86:	10 e0       	ldi	r17, 0x00	; 0

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    5b88:	80 91 2d 08 	lds	r24, 0x082D
    5b8c:	90 91 2e 08 	lds	r25, 0x082E
    5b90:	8c 17       	cp	r24, r28
    5b92:	9d 07       	cpc	r25, r29
    5b94:	2c f0       	brlt	.+10     	; 0x5ba0 <getRightSpeedFromInput+0x76>
    5b96:	8f ef       	ldi	r24, 0xFF	; 255
    5b98:	0f 3f       	cpi	r16, 0xFF	; 255
    5b9a:	18 07       	cpc	r17, r24
    5b9c:	09 f4       	brne	.+2      	; 0x5ba0 <getRightSpeedFromInput+0x76>
    5b9e:	6c c1       	rjmp	.+728    	; 0x5e78 <getRightSpeedFromInput+0x34e>
    5ba0:	80 91 3d 08 	lds	r24, 0x083D
    5ba4:	90 91 3e 08 	lds	r25, 0x083E
    5ba8:	8c 17       	cp	r24, r28
    5baa:	9d 07       	cpc	r25, r29
    5bac:	2c f0       	brlt	.+10     	; 0x5bb8 <getRightSpeedFromInput+0x8e>
    5bae:	9f ef       	ldi	r25, 0xFF	; 255
    5bb0:	0f 3f       	cpi	r16, 0xFF	; 255
    5bb2:	19 07       	cpc	r17, r25
    5bb4:	09 f4       	brne	.+2      	; 0x5bb8 <getRightSpeedFromInput+0x8e>
    5bb6:	72 c1       	rjmp	.+740    	; 0x5e9c <getRightSpeedFromInput+0x372>
    5bb8:	80 91 4d 08 	lds	r24, 0x084D
    5bbc:	90 91 4e 08 	lds	r25, 0x084E
    5bc0:	8c 17       	cp	r24, r28
    5bc2:	9d 07       	cpc	r25, r29
    5bc4:	2c f0       	brlt	.+10     	; 0x5bd0 <getRightSpeedFromInput+0xa6>
    5bc6:	8f ef       	ldi	r24, 0xFF	; 255
    5bc8:	0f 3f       	cpi	r16, 0xFF	; 255
    5bca:	18 07       	cpc	r17, r24
    5bcc:	09 f4       	brne	.+2      	; 0x5bd0 <getRightSpeedFromInput+0xa6>
    5bce:	63 c1       	rjmp	.+710    	; 0x5e96 <getRightSpeedFromInput+0x36c>
    5bd0:	80 91 5d 08 	lds	r24, 0x085D
    5bd4:	90 91 5e 08 	lds	r25, 0x085E
    5bd8:	8c 17       	cp	r24, r28
    5bda:	9d 07       	cpc	r25, r29
    5bdc:	2c f0       	brlt	.+10     	; 0x5be8 <getRightSpeedFromInput+0xbe>
    5bde:	9f ef       	ldi	r25, 0xFF	; 255
    5be0:	0f 3f       	cpi	r16, 0xFF	; 255
    5be2:	19 07       	cpc	r17, r25
    5be4:	09 f4       	brne	.+2      	; 0x5be8 <getRightSpeedFromInput+0xbe>
    5be6:	54 c1       	rjmp	.+680    	; 0x5e90 <getRightSpeedFromInput+0x366>
    5be8:	80 91 6d 08 	lds	r24, 0x086D
    5bec:	90 91 6e 08 	lds	r25, 0x086E
    5bf0:	8c 17       	cp	r24, r28
    5bf2:	9d 07       	cpc	r25, r29
    5bf4:	2c f0       	brlt	.+10     	; 0x5c00 <getRightSpeedFromInput+0xd6>
    5bf6:	8f ef       	ldi	r24, 0xFF	; 255
    5bf8:	0f 3f       	cpi	r16, 0xFF	; 255
    5bfa:	18 07       	cpc	r17, r24
    5bfc:	09 f4       	brne	.+2      	; 0x5c00 <getRightSpeedFromInput+0xd6>
    5bfe:	45 c1       	rjmp	.+650    	; 0x5e8a <getRightSpeedFromInput+0x360>
    5c00:	80 91 7d 08 	lds	r24, 0x087D
    5c04:	90 91 7e 08 	lds	r25, 0x087E
    5c08:	8c 17       	cp	r24, r28
    5c0a:	9d 07       	cpc	r25, r29
    5c0c:	2c f0       	brlt	.+10     	; 0x5c18 <getRightSpeedFromInput+0xee>
    5c0e:	9f ef       	ldi	r25, 0xFF	; 255
    5c10:	0f 3f       	cpi	r16, 0xFF	; 255
    5c12:	19 07       	cpc	r17, r25
    5c14:	09 f4       	brne	.+2      	; 0x5c18 <getRightSpeedFromInput+0xee>
    5c16:	36 c1       	rjmp	.+620    	; 0x5e84 <getRightSpeedFromInput+0x35a>
    5c18:	e0 90 8d 08 	lds	r14, 0x088D
    5c1c:	f0 90 8e 08 	lds	r15, 0x088E
    5c20:	ec 16       	cp	r14, r28
    5c22:	fd 06       	cpc	r15, r29
    5c24:	2c f0       	brlt	.+10     	; 0x5c30 <getRightSpeedFromInput+0x106>
    5c26:	8f ef       	ldi	r24, 0xFF	; 255
    5c28:	0f 3f       	cpi	r16, 0xFF	; 255
    5c2a:	18 07       	cpc	r17, r24
    5c2c:	09 f4       	brne	.+2      	; 0x5c30 <getRightSpeedFromInput+0x106>
    5c2e:	27 c1       	rjmp	.+590    	; 0x5e7e <getRightSpeedFromInput+0x354>
			}
		}        
    }

    if(pwm_right >= 0) {
        if(last_right_vel == 0) {
    5c30:	20 97       	sbiw	r28, 0x00	; 0
    5c32:	09 f4       	brne	.+2      	; 0x5c36 <getRightSpeedFromInput+0x10c>
    5c34:	58 c0       	rjmp	.+176    	; 0x5ce6 <getRightSpeedFromInput+0x1bc>
            speedRightFromEnc = 0;
        } else {
            if(indFwR==0) {  // the velocity is lower than first saved in the matrix
    5c36:	01 15       	cp	r16, r1
    5c38:	11 05       	cpc	r17, r1
    5c3a:	09 f4       	brne	.+2      	; 0x5c3e <getRightSpeedFromInput+0x114>
    5c3c:	32 c1       	rjmp	.+612    	; 0x5ea2 <getRightSpeedFromInput+0x378>
                speedRightFromEnc = (last_right_vel*calibration[0][3])/calibration[0][2];
            } else if(indFwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    5c3e:	9f ef       	ldi	r25, 0xFF	; 255
    5c40:	0f 3f       	cpi	r16, 0xFF	; 255
    5c42:	19 07       	cpc	r17, r25
    5c44:	09 f4       	brne	.+2      	; 0x5c48 <getRightSpeedFromInput+0x11e>
    5c46:	e9 c0       	rjmp	.+466    	; 0x5e1a <getRightSpeedFromInput+0x2f0>
                speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][3]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][2]);  // take the max
            } else {
                speedRightFromEnc = calibration[indFwR-1][3] + (signed int)(((float)(last_right_vel-calibration[indFwR-1][2])*(float)(calibration[indFwR][3]-calibration[indFwR-1][3]))/(float)(calibration[indFwR][2]-calibration[indFwR-1][2]));
    5c48:	f8 01       	movw	r30, r16
    5c4a:	e2 95       	swap	r30
    5c4c:	f2 95       	swap	r31
    5c4e:	f0 7f       	andi	r31, 0xF0	; 240
    5c50:	fe 27       	eor	r31, r30
    5c52:	e0 7f       	andi	r30, 0xF0	; 240
    5c54:	fe 27       	eor	r31, r30
    5c56:	e7 50       	subi	r30, 0x07	; 7
    5c58:	f8 4f       	sbci	r31, 0xF8	; 248
    5c5a:	a4 80       	ldd	r10, Z+4	; 0x04
    5c5c:	b5 80       	ldd	r11, Z+5	; 0x05
    5c5e:	86 80       	ldd	r8, Z+6	; 0x06
    5c60:	97 80       	ldd	r9, Z+7	; 0x07
    5c62:	ca 19       	sub	r28, r10
    5c64:	db 09       	sbc	r29, r11
    5c66:	be 01       	movw	r22, r28
    5c68:	88 27       	eor	r24, r24
    5c6a:	77 fd       	sbrc	r23, 7
    5c6c:	80 95       	com	r24
    5c6e:	98 2f       	mov	r25, r24
    5c70:	0e 94 ee 49 	call	0x93dc	; 0x93dc <__floatsisf>
    5c74:	6b 01       	movw	r12, r22
    5c76:	7c 01       	movw	r14, r24
    5c78:	e8 01       	movw	r28, r16
    5c7a:	c2 95       	swap	r28
    5c7c:	d2 95       	swap	r29
    5c7e:	d0 7f       	andi	r29, 0xF0	; 240
    5c80:	dc 27       	eor	r29, r28
    5c82:	c0 7f       	andi	r28, 0xF0	; 240
    5c84:	dc 27       	eor	r29, r28
    5c86:	c7 5f       	subi	r28, 0xF7	; 247
    5c88:	d7 4f       	sbci	r29, 0xF7	; 247
    5c8a:	6e 81       	ldd	r22, Y+6	; 0x06
    5c8c:	7f 81       	ldd	r23, Y+7	; 0x07
    5c8e:	68 19       	sub	r22, r8
    5c90:	79 09       	sbc	r23, r9
    5c92:	88 27       	eor	r24, r24
    5c94:	77 fd       	sbrc	r23, 7
    5c96:	80 95       	com	r24
    5c98:	98 2f       	mov	r25, r24
    5c9a:	0e 94 ee 49 	call	0x93dc	; 0x93dc <__floatsisf>
    5c9e:	9b 01       	movw	r18, r22
    5ca0:	ac 01       	movw	r20, r24
    5ca2:	c7 01       	movw	r24, r14
    5ca4:	b6 01       	movw	r22, r12
    5ca6:	0e 94 03 4b 	call	0x9606	; 0x9606 <__mulsf3>
    5caa:	7b 01       	movw	r14, r22
    5cac:	8c 01       	movw	r16, r24
    5cae:	6c 81       	ldd	r22, Y+4	; 0x04
    5cb0:	7d 81       	ldd	r23, Y+5	; 0x05
    5cb2:	6a 19       	sub	r22, r10
    5cb4:	7b 09       	sbc	r23, r11
    5cb6:	88 27       	eor	r24, r24
    5cb8:	77 fd       	sbrc	r23, 7
    5cba:	80 95       	com	r24
    5cbc:	98 2f       	mov	r25, r24
    5cbe:	0e 94 ee 49 	call	0x93dc	; 0x93dc <__floatsisf>
    5cc2:	9b 01       	movw	r18, r22
    5cc4:	ac 01       	movw	r20, r24
    5cc6:	c8 01       	movw	r24, r16
    5cc8:	b7 01       	movw	r22, r14
    5cca:	0e 94 53 49 	call	0x92a6	; 0x92a6 <__divsf3>
    5cce:	0e 94 bb 49 	call	0x9376	; 0x9376 <__fixsfsi>
    5cd2:	68 0d       	add	r22, r8
    5cd4:	79 1d       	adc	r23, r9
    5cd6:	70 93 b9 04 	sts	0x04B9, r23
    5cda:	60 93 b8 04 	sts	0x04B8, r22
    5cde:	07 c0       	rjmp	.+14     	; 0x5cee <getRightSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    5ce0:	00 e0       	ldi	r16, 0x00	; 0
    5ce2:	10 e0       	ldi	r17, 0x00	; 0
    5ce4:	42 cf       	rjmp	.-380    	; 0x5b6a <getRightSpeedFromInput+0x40>
		}        
    }

    if(pwm_right >= 0) {
        if(last_right_vel == 0) {
            speedRightFromEnc = 0;
    5ce6:	10 92 b9 04 	sts	0x04B9, r1
    5cea:	10 92 b8 04 	sts	0x04B8, r1
        	speedRightFromEnc = calibration[indBwR-1][7] + (signed int)(((float)(last_right_vel-calibration[indBwR-1][6])*(float)(calibration[indBwR][7]-calibration[indBwR-1][7]))/(float)(calibration[indBwR][6]-calibration[indBwR-1][6]));
		}
		speedRightFromEnc = -speedRightFromEnc;
    }
    
}
    5cee:	df 91       	pop	r29
    5cf0:	cf 91       	pop	r28
    5cf2:	1f 91       	pop	r17
    5cf4:	0f 91       	pop	r16
    5cf6:	ff 90       	pop	r15
    5cf8:	ef 90       	pop	r14
    5cfa:	df 90       	pop	r13
    5cfc:	cf 90       	pop	r12
    5cfe:	bf 90       	pop	r11
    5d00:	af 90       	pop	r10
    5d02:	9f 90       	pop	r9
    5d04:	8f 90       	pop	r8
    5d06:	08 95       	ret
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    5d08:	60 91 15 08 	lds	r22, 0x0815
    5d0c:	70 91 16 08 	lds	r23, 0x0816
    5d10:	6c 17       	cp	r22, r28
    5d12:	7d 07       	cpc	r23, r29
    5d14:	0c f0       	brlt	.+2      	; 0x5d18 <getRightSpeedFromInput+0x1ee>
    5d16:	7e c0       	rjmp	.+252    	; 0x5e14 <getRightSpeedFromInput+0x2ea>
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    5d18:	0f ef       	ldi	r16, 0xFF	; 255
    5d1a:	1f ef       	ldi	r17, 0xFF	; 255
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    5d1c:	80 91 25 08 	lds	r24, 0x0825
    5d20:	90 91 26 08 	lds	r25, 0x0826
    5d24:	8c 17       	cp	r24, r28
    5d26:	9d 07       	cpc	r25, r29
    5d28:	44 f0       	brlt	.+16     	; 0x5d3a <getRightSpeedFromInput+0x210>
    
    return temp;
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {
    5d2a:	81 e0       	ldi	r24, 0x01	; 1
    5d2c:	9f ef       	ldi	r25, 0xFF	; 255
    5d2e:	0f 3f       	cpi	r16, 0xFF	; 255
    5d30:	19 07       	cpc	r17, r25
    5d32:	09 f0       	breq	.+2      	; 0x5d36 <getRightSpeedFromInput+0x20c>
    5d34:	80 e0       	ldi	r24, 0x00	; 0
    5d36:	08 2f       	mov	r16, r24
    5d38:	10 e0       	ldi	r17, 0x00	; 0
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    5d3a:	80 91 35 08 	lds	r24, 0x0835
    5d3e:	90 91 36 08 	lds	r25, 0x0836
    5d42:	8c 17       	cp	r24, r28
    5d44:	9d 07       	cpc	r25, r29
    5d46:	2c f0       	brlt	.+10     	; 0x5d52 <getRightSpeedFromInput+0x228>
    5d48:	8f ef       	ldi	r24, 0xFF	; 255
    5d4a:	0f 3f       	cpi	r16, 0xFF	; 255
    5d4c:	18 07       	cpc	r17, r24
    5d4e:	09 f4       	brne	.+2      	; 0x5d52 <getRightSpeedFromInput+0x228>
    5d50:	19 c1       	rjmp	.+562    	; 0x5f84 <getRightSpeedFromInput+0x45a>
    5d52:	80 91 45 08 	lds	r24, 0x0845
    5d56:	90 91 46 08 	lds	r25, 0x0846
    5d5a:	8c 17       	cp	r24, r28
    5d5c:	9d 07       	cpc	r25, r29
    5d5e:	2c f0       	brlt	.+10     	; 0x5d6a <getRightSpeedFromInput+0x240>
    5d60:	9f ef       	ldi	r25, 0xFF	; 255
    5d62:	0f 3f       	cpi	r16, 0xFF	; 255
    5d64:	19 07       	cpc	r17, r25
    5d66:	09 f4       	brne	.+2      	; 0x5d6a <getRightSpeedFromInput+0x240>
    5d68:	0a c1       	rjmp	.+532    	; 0x5f7e <getRightSpeedFromInput+0x454>
    5d6a:	80 91 55 08 	lds	r24, 0x0855
    5d6e:	90 91 56 08 	lds	r25, 0x0856
    5d72:	8c 17       	cp	r24, r28
    5d74:	9d 07       	cpc	r25, r29
    5d76:	2c f0       	brlt	.+10     	; 0x5d82 <getRightSpeedFromInput+0x258>
    5d78:	8f ef       	ldi	r24, 0xFF	; 255
    5d7a:	0f 3f       	cpi	r16, 0xFF	; 255
    5d7c:	18 07       	cpc	r17, r24
    5d7e:	09 f4       	brne	.+2      	; 0x5d82 <getRightSpeedFromInput+0x258>
    5d80:	fb c0       	rjmp	.+502    	; 0x5f78 <getRightSpeedFromInput+0x44e>
    5d82:	80 91 65 08 	lds	r24, 0x0865
    5d86:	90 91 66 08 	lds	r25, 0x0866
    5d8a:	8c 17       	cp	r24, r28
    5d8c:	9d 07       	cpc	r25, r29
    5d8e:	2c f0       	brlt	.+10     	; 0x5d9a <getRightSpeedFromInput+0x270>
    5d90:	9f ef       	ldi	r25, 0xFF	; 255
    5d92:	0f 3f       	cpi	r16, 0xFF	; 255
    5d94:	19 07       	cpc	r17, r25
    5d96:	09 f4       	brne	.+2      	; 0x5d9a <getRightSpeedFromInput+0x270>
    5d98:	ec c0       	rjmp	.+472    	; 0x5f72 <getRightSpeedFromInput+0x448>
    5d9a:	80 91 75 08 	lds	r24, 0x0875
    5d9e:	90 91 76 08 	lds	r25, 0x0876
    5da2:	8c 17       	cp	r24, r28
    5da4:	9d 07       	cpc	r25, r29
    5da6:	2c f0       	brlt	.+10     	; 0x5db2 <getRightSpeedFromInput+0x288>
    5da8:	8f ef       	ldi	r24, 0xFF	; 255
    5daa:	0f 3f       	cpi	r16, 0xFF	; 255
    5dac:	18 07       	cpc	r17, r24
    5dae:	09 f4       	brne	.+2      	; 0x5db2 <getRightSpeedFromInput+0x288>
    5db0:	dd c0       	rjmp	.+442    	; 0x5f6c <getRightSpeedFromInput+0x442>
    5db2:	80 91 85 08 	lds	r24, 0x0885
    5db6:	90 91 86 08 	lds	r25, 0x0886
    5dba:	8c 17       	cp	r24, r28
    5dbc:	9d 07       	cpc	r25, r29
    5dbe:	2c f0       	brlt	.+10     	; 0x5dca <getRightSpeedFromInput+0x2a0>
    5dc0:	9f ef       	ldi	r25, 0xFF	; 255
    5dc2:	0f 3f       	cpi	r16, 0xFF	; 255
    5dc4:	19 07       	cpc	r17, r25
    5dc6:	09 f4       	brne	.+2      	; 0x5dca <getRightSpeedFromInput+0x2a0>
    5dc8:	ce c0       	rjmp	.+412    	; 0x5f66 <getRightSpeedFromInput+0x43c>
    5dca:	e0 90 95 08 	lds	r14, 0x0895
    5dce:	f0 90 96 08 	lds	r15, 0x0896
    5dd2:	ec 16       	cp	r14, r28
    5dd4:	fd 06       	cpc	r15, r29
    5dd6:	2c f0       	brlt	.+10     	; 0x5de2 <getRightSpeedFromInput+0x2b8>
    5dd8:	8f ef       	ldi	r24, 0xFF	; 255
    5dda:	0f 3f       	cpi	r16, 0xFF	; 255
    5ddc:	18 07       	cpc	r17, r24
    5dde:	09 f4       	brne	.+2      	; 0x5de2 <getRightSpeedFromInput+0x2b8>
    5de0:	bf c0       	rjmp	.+382    	; 0x5f60 <getRightSpeedFromInput+0x436>
            } else {
                speedRightFromEnc = calibration[indFwR-1][3] + (signed int)(((float)(last_right_vel-calibration[indFwR-1][2])*(float)(calibration[indFwR][3]-calibration[indFwR-1][3]))/(float)(calibration[indFwR][2]-calibration[indFwR-1][2]));
            }
        }
    } else {
		if(indBwR==0) {  // the velocity is lower than first saved in the matrix
    5de2:	01 15       	cp	r16, r1
    5de4:	11 05       	cpc	r17, r1
    5de6:	09 f0       	breq	.+2      	; 0x5dea <getRightSpeedFromInput+0x2c0>
    5de8:	6e c0       	rjmp	.+220    	; 0x5ec6 <getRightSpeedFromInput+0x39c>
        	speedRightFromEnc = (last_right_vel*calibration[0][7])/calibration[0][6];
    5dea:	20 91 17 08 	lds	r18, 0x0817
    5dee:	30 91 18 08 	lds	r19, 0x0818
    5df2:	c2 9f       	mul	r28, r18
    5df4:	c0 01       	movw	r24, r0
    5df6:	c3 9f       	mul	r28, r19
    5df8:	90 0d       	add	r25, r0
    5dfa:	d2 9f       	mul	r29, r18
    5dfc:	90 0d       	add	r25, r0
    5dfe:	11 24       	eor	r1, r1
    5e00:	0e 94 c1 4b 	call	0x9782	; 0x9782 <__divmodhi4>
		} else if(indBwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][7]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][6]);  // take the max
		} else {
        	speedRightFromEnc = calibration[indBwR-1][7] + (signed int)(((float)(last_right_vel-calibration[indBwR-1][6])*(float)(calibration[indBwR][7]-calibration[indBwR-1][7]))/(float)(calibration[indBwR][6]-calibration[indBwR-1][6]));
		}
		speedRightFromEnc = -speedRightFromEnc;
    5e04:	70 95       	com	r23
    5e06:	61 95       	neg	r22
    5e08:	7f 4f       	sbci	r23, 0xFF	; 255
    5e0a:	70 93 b9 04 	sts	0x04B9, r23
    5e0e:	60 93 b8 04 	sts	0x04B8, r22
    5e12:	6d cf       	rjmp	.-294    	; 0x5cee <getRightSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    5e14:	00 e0       	ldi	r16, 0x00	; 0
    5e16:	10 e0       	ldi	r17, 0x00	; 0
    5e18:	81 cf       	rjmp	.-254    	; 0x5d1c <getRightSpeedFromInput+0x1f2>
            speedRightFromEnc = 0;
        } else {
            if(indFwR==0) {  // the velocity is lower than first saved in the matrix
                speedRightFromEnc = (last_right_vel*calibration[0][3])/calibration[0][2];
            } else if(indFwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
                speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][3]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][2]);  // take the max
    5e1a:	60 91 8f 08 	lds	r22, 0x088F
    5e1e:	70 91 90 08 	lds	r23, 0x0890
    5e22:	88 27       	eor	r24, r24
    5e24:	77 fd       	sbrc	r23, 7
    5e26:	80 95       	com	r24
    5e28:	98 2f       	mov	r25, r24
    5e2a:	0e 94 ee 49 	call	0x93dc	; 0x93dc <__floatsisf>
    5e2e:	5b 01       	movw	r10, r22
    5e30:	6c 01       	movw	r12, r24
    5e32:	be 01       	movw	r22, r28
    5e34:	88 27       	eor	r24, r24
    5e36:	77 fd       	sbrc	r23, 7
    5e38:	80 95       	com	r24
    5e3a:	98 2f       	mov	r25, r24
    5e3c:	0e 94 ee 49 	call	0x93dc	; 0x93dc <__floatsisf>
    5e40:	9b 01       	movw	r18, r22
    5e42:	ac 01       	movw	r20, r24
    5e44:	c6 01       	movw	r24, r12
    5e46:	b5 01       	movw	r22, r10
    5e48:	0e 94 03 4b 	call	0x9606	; 0x9606 <__mulsf3>
    5e4c:	5b 01       	movw	r10, r22
    5e4e:	6c 01       	movw	r12, r24
    5e50:	b7 01       	movw	r22, r14
    5e52:	88 27       	eor	r24, r24
    5e54:	77 fd       	sbrc	r23, 7
    5e56:	80 95       	com	r24
    5e58:	98 2f       	mov	r25, r24
    5e5a:	0e 94 ee 49 	call	0x93dc	; 0x93dc <__floatsisf>
    5e5e:	9b 01       	movw	r18, r22
    5e60:	ac 01       	movw	r20, r24
    5e62:	c6 01       	movw	r24, r12
    5e64:	b5 01       	movw	r22, r10
    5e66:	0e 94 53 49 	call	0x92a6	; 0x92a6 <__divsf3>
    5e6a:	0e 94 bb 49 	call	0x9376	; 0x9376 <__fixsfsi>
    5e6e:	70 93 b9 04 	sts	0x04B9, r23
    5e72:	60 93 b8 04 	sts	0x04B8, r22
    5e76:	3b cf       	rjmp	.-394    	; 0x5cee <getRightSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    5e78:	02 e0       	ldi	r16, 0x02	; 2
    5e7a:	10 e0       	ldi	r17, 0x00	; 0
    5e7c:	91 ce       	rjmp	.-734    	; 0x5ba0 <getRightSpeedFromInput+0x76>
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    5e7e:	08 e0       	ldi	r16, 0x08	; 8
    5e80:	10 e0       	ldi	r17, 0x00	; 0
    5e82:	d6 ce       	rjmp	.-596    	; 0x5c30 <getRightSpeedFromInput+0x106>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    5e84:	07 e0       	ldi	r16, 0x07	; 7
    5e86:	10 e0       	ldi	r17, 0x00	; 0
    5e88:	c7 ce       	rjmp	.-626    	; 0x5c18 <getRightSpeedFromInput+0xee>
    5e8a:	06 e0       	ldi	r16, 0x06	; 6
    5e8c:	10 e0       	ldi	r17, 0x00	; 0
    5e8e:	b8 ce       	rjmp	.-656    	; 0x5c00 <getRightSpeedFromInput+0xd6>
    5e90:	05 e0       	ldi	r16, 0x05	; 5
    5e92:	10 e0       	ldi	r17, 0x00	; 0
    5e94:	a9 ce       	rjmp	.-686    	; 0x5be8 <getRightSpeedFromInput+0xbe>
    5e96:	04 e0       	ldi	r16, 0x04	; 4
    5e98:	10 e0       	ldi	r17, 0x00	; 0
    5e9a:	9a ce       	rjmp	.-716    	; 0x5bd0 <getRightSpeedFromInput+0xa6>
    5e9c:	03 e0       	ldi	r16, 0x03	; 3
    5e9e:	10 e0       	ldi	r17, 0x00	; 0
    5ea0:	8b ce       	rjmp	.-746    	; 0x5bb8 <getRightSpeedFromInput+0x8e>
    if(pwm_right >= 0) {
        if(last_right_vel == 0) {
            speedRightFromEnc = 0;
        } else {
            if(indFwR==0) {  // the velocity is lower than first saved in the matrix
                speedRightFromEnc = (last_right_vel*calibration[0][3])/calibration[0][2];
    5ea2:	20 91 0f 08 	lds	r18, 0x080F
    5ea6:	30 91 10 08 	lds	r19, 0x0810
    5eaa:	c2 9f       	mul	r28, r18
    5eac:	c0 01       	movw	r24, r0
    5eae:	c3 9f       	mul	r28, r19
    5eb0:	90 0d       	add	r25, r0
    5eb2:	d2 9f       	mul	r29, r18
    5eb4:	90 0d       	add	r25, r0
    5eb6:	11 24       	eor	r1, r1
    5eb8:	0e 94 c1 4b 	call	0x9782	; 0x9782 <__divmodhi4>
    5ebc:	70 93 b9 04 	sts	0x04B9, r23
    5ec0:	60 93 b8 04 	sts	0x04B8, r22
    5ec4:	14 cf       	rjmp	.-472    	; 0x5cee <getRightSpeedFromInput+0x1c4>
            }
        }
    } else {
		if(indBwR==0) {  // the velocity is lower than first saved in the matrix
        	speedRightFromEnc = (last_right_vel*calibration[0][7])/calibration[0][6];
		} else if(indBwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    5ec6:	8f ef       	ldi	r24, 0xFF	; 255
    5ec8:	0f 3f       	cpi	r16, 0xFF	; 255
    5eca:	18 07       	cpc	r17, r24
    5ecc:	09 f4       	brne	.+2      	; 0x5ed0 <getRightSpeedFromInput+0x3a6>
    5ece:	5d c0       	rjmp	.+186    	; 0x5f8a <getRightSpeedFromInput+0x460>
        	speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][7]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][6]);  // take the max
		} else {
        	speedRightFromEnc = calibration[indBwR-1][7] + (signed int)(((float)(last_right_vel-calibration[indBwR-1][6])*(float)(calibration[indBwR][7]-calibration[indBwR-1][7]))/(float)(calibration[indBwR][6]-calibration[indBwR-1][6]));
    5ed0:	f8 01       	movw	r30, r16
    5ed2:	e2 95       	swap	r30
    5ed4:	f2 95       	swap	r31
    5ed6:	f0 7f       	andi	r31, 0xF0	; 240
    5ed8:	fe 27       	eor	r31, r30
    5eda:	e0 7f       	andi	r30, 0xF0	; 240
    5edc:	fe 27       	eor	r31, r30
    5ede:	e7 50       	subi	r30, 0x07	; 7
    5ee0:	f8 4f       	sbci	r31, 0xF8	; 248
    5ee2:	a4 84       	ldd	r10, Z+12	; 0x0c
    5ee4:	b5 84       	ldd	r11, Z+13	; 0x0d
    5ee6:	86 84       	ldd	r8, Z+14	; 0x0e
    5ee8:	97 84       	ldd	r9, Z+15	; 0x0f
    5eea:	ca 19       	sub	r28, r10
    5eec:	db 09       	sbc	r29, r11
    5eee:	be 01       	movw	r22, r28
    5ef0:	88 27       	eor	r24, r24
    5ef2:	77 fd       	sbrc	r23, 7
    5ef4:	80 95       	com	r24
    5ef6:	98 2f       	mov	r25, r24
    5ef8:	0e 94 ee 49 	call	0x93dc	; 0x93dc <__floatsisf>
    5efc:	6b 01       	movw	r12, r22
    5efe:	7c 01       	movw	r14, r24
    5f00:	e8 01       	movw	r28, r16
    5f02:	c2 95       	swap	r28
    5f04:	d2 95       	swap	r29
    5f06:	d0 7f       	andi	r29, 0xF0	; 240
    5f08:	dc 27       	eor	r29, r28
    5f0a:	c0 7f       	andi	r28, 0xF0	; 240
    5f0c:	dc 27       	eor	r29, r28
    5f0e:	c7 5f       	subi	r28, 0xF7	; 247
    5f10:	d7 4f       	sbci	r29, 0xF7	; 247
    5f12:	6e 85       	ldd	r22, Y+14	; 0x0e
    5f14:	7f 85       	ldd	r23, Y+15	; 0x0f
    5f16:	68 19       	sub	r22, r8
    5f18:	79 09       	sbc	r23, r9
    5f1a:	88 27       	eor	r24, r24
    5f1c:	77 fd       	sbrc	r23, 7
    5f1e:	80 95       	com	r24
    5f20:	98 2f       	mov	r25, r24
    5f22:	0e 94 ee 49 	call	0x93dc	; 0x93dc <__floatsisf>
    5f26:	9b 01       	movw	r18, r22
    5f28:	ac 01       	movw	r20, r24
    5f2a:	c7 01       	movw	r24, r14
    5f2c:	b6 01       	movw	r22, r12
    5f2e:	0e 94 03 4b 	call	0x9606	; 0x9606 <__mulsf3>
    5f32:	7b 01       	movw	r14, r22
    5f34:	8c 01       	movw	r16, r24
    5f36:	6c 85       	ldd	r22, Y+12	; 0x0c
    5f38:	7d 85       	ldd	r23, Y+13	; 0x0d
    5f3a:	6a 19       	sub	r22, r10
    5f3c:	7b 09       	sbc	r23, r11
    5f3e:	88 27       	eor	r24, r24
    5f40:	77 fd       	sbrc	r23, 7
    5f42:	80 95       	com	r24
    5f44:	98 2f       	mov	r25, r24
    5f46:	0e 94 ee 49 	call	0x93dc	; 0x93dc <__floatsisf>
    5f4a:	9b 01       	movw	r18, r22
    5f4c:	ac 01       	movw	r20, r24
    5f4e:	c8 01       	movw	r24, r16
    5f50:	b7 01       	movw	r22, r14
    5f52:	0e 94 53 49 	call	0x92a6	; 0x92a6 <__divsf3>
    5f56:	0e 94 bb 49 	call	0x9376	; 0x9376 <__fixsfsi>
    5f5a:	68 0d       	add	r22, r8
    5f5c:	79 1d       	adc	r23, r9
    5f5e:	52 cf       	rjmp	.-348    	; 0x5e04 <getRightSpeedFromInput+0x2da>
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    5f60:	08 e0       	ldi	r16, 0x08	; 8
    5f62:	10 e0       	ldi	r17, 0x00	; 0
    5f64:	3e cf       	rjmp	.-388    	; 0x5de2 <getRightSpeedFromInput+0x2b8>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    5f66:	07 e0       	ldi	r16, 0x07	; 7
    5f68:	10 e0       	ldi	r17, 0x00	; 0
    5f6a:	2f cf       	rjmp	.-418    	; 0x5dca <getRightSpeedFromInput+0x2a0>
    5f6c:	06 e0       	ldi	r16, 0x06	; 6
    5f6e:	10 e0       	ldi	r17, 0x00	; 0
    5f70:	20 cf       	rjmp	.-448    	; 0x5db2 <getRightSpeedFromInput+0x288>
    5f72:	05 e0       	ldi	r16, 0x05	; 5
    5f74:	10 e0       	ldi	r17, 0x00	; 0
    5f76:	11 cf       	rjmp	.-478    	; 0x5d9a <getRightSpeedFromInput+0x270>
    5f78:	04 e0       	ldi	r16, 0x04	; 4
    5f7a:	10 e0       	ldi	r17, 0x00	; 0
    5f7c:	02 cf       	rjmp	.-508    	; 0x5d82 <getRightSpeedFromInput+0x258>
    5f7e:	03 e0       	ldi	r16, 0x03	; 3
    5f80:	10 e0       	ldi	r17, 0x00	; 0
    5f82:	f3 ce       	rjmp	.-538    	; 0x5d6a <getRightSpeedFromInput+0x240>
    5f84:	02 e0       	ldi	r16, 0x02	; 2
    5f86:	10 e0       	ldi	r17, 0x00	; 0
    5f88:	e4 ce       	rjmp	.-568    	; 0x5d52 <getRightSpeedFromInput+0x228>
        }
    } else {
		if(indBwR==0) {  // the velocity is lower than first saved in the matrix
        	speedRightFromEnc = (last_right_vel*calibration[0][7])/calibration[0][6];
		} else if(indBwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][7]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][6]);  // take the max
    5f8a:	60 91 97 08 	lds	r22, 0x0897
    5f8e:	70 91 98 08 	lds	r23, 0x0898
    5f92:	88 27       	eor	r24, r24
    5f94:	77 fd       	sbrc	r23, 7
    5f96:	80 95       	com	r24
    5f98:	98 2f       	mov	r25, r24
    5f9a:	0e 94 ee 49 	call	0x93dc	; 0x93dc <__floatsisf>
    5f9e:	5b 01       	movw	r10, r22
    5fa0:	6c 01       	movw	r12, r24
    5fa2:	be 01       	movw	r22, r28
    5fa4:	88 27       	eor	r24, r24
    5fa6:	77 fd       	sbrc	r23, 7
    5fa8:	80 95       	com	r24
    5faa:	98 2f       	mov	r25, r24
    5fac:	0e 94 ee 49 	call	0x93dc	; 0x93dc <__floatsisf>
    5fb0:	9b 01       	movw	r18, r22
    5fb2:	ac 01       	movw	r20, r24
    5fb4:	c6 01       	movw	r24, r12
    5fb6:	b5 01       	movw	r22, r10
    5fb8:	0e 94 03 4b 	call	0x9606	; 0x9606 <__mulsf3>
    5fbc:	5b 01       	movw	r10, r22
    5fbe:	6c 01       	movw	r12, r24
    5fc0:	b7 01       	movw	r22, r14
    5fc2:	88 27       	eor	r24, r24
    5fc4:	77 fd       	sbrc	r23, 7
    5fc6:	80 95       	com	r24
    5fc8:	98 2f       	mov	r25, r24
    5fca:	0e 94 ee 49 	call	0x93dc	; 0x93dc <__floatsisf>
    5fce:	9b 01       	movw	r18, r22
    5fd0:	ac 01       	movw	r20, r24
    5fd2:	c6 01       	movw	r24, r12
    5fd4:	b5 01       	movw	r22, r10
    5fd6:	0e 94 53 49 	call	0x92a6	; 0x92a6 <__divsf3>
    5fda:	0e 94 bb 49 	call	0x9376	; 0x9376 <__fixsfsi>
    5fde:	12 cf       	rjmp	.-476    	; 0x5e04 <getRightSpeedFromInput+0x2da>

00005fe0 <getLeftSpeedFromInput>:
    }
    
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {
    5fe0:	8f 92       	push	r8
    5fe2:	9f 92       	push	r9
    5fe4:	af 92       	push	r10
    5fe6:	bf 92       	push	r11
    5fe8:	cf 92       	push	r12
    5fea:	df 92       	push	r13
    5fec:	ef 92       	push	r14
    5fee:	ff 92       	push	r15
    5ff0:	0f 93       	push	r16
    5ff2:	1f 93       	push	r17
    5ff4:	cf 93       	push	r28
    5ff6:	df 93       	push	r29

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    5ff8:	c0 91 f1 02 	lds	r28, 0x02F1
    5ffc:	d0 91 f2 02 	lds	r29, 0x02F2
    6000:	80 91 f7 02 	lds	r24, 0x02F7
    6004:	90 91 f8 02 	lds	r25, 0x02F8
    6008:	97 fd       	sbrc	r25, 7
    600a:	d9 c0       	rjmp	.+434    	; 0x61be <getLeftSpeedFromInput+0x1de>
    600c:	60 91 09 08 	lds	r22, 0x0809
    6010:	70 91 0a 08 	lds	r23, 0x080A
    6014:	6c 17       	cp	r22, r28
    6016:	7d 07       	cpc	r23, r29
    6018:	0c f0       	brlt	.+2      	; 0x601c <getLeftSpeedFromInput+0x3c>
    601a:	bd c0       	rjmp	.+378    	; 0x6196 <getLeftSpeedFromInput+0x1b6>
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    601c:	0f ef       	ldi	r16, 0xFF	; 255
    601e:	1f ef       	ldi	r17, 0xFF	; 255
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    6020:	80 91 19 08 	lds	r24, 0x0819
    6024:	90 91 1a 08 	lds	r25, 0x081A
    6028:	8c 17       	cp	r24, r28
    602a:	9d 07       	cpc	r25, r29
    602c:	44 f0       	brlt	.+16     	; 0x603e <getLeftSpeedFromInput+0x5e>
    }
    
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {
    602e:	81 e0       	ldi	r24, 0x01	; 1
    6030:	9f ef       	ldi	r25, 0xFF	; 255
    6032:	0f 3f       	cpi	r16, 0xFF	; 255
    6034:	19 07       	cpc	r17, r25
    6036:	09 f0       	breq	.+2      	; 0x603a <getLeftSpeedFromInput+0x5a>
    6038:	80 e0       	ldi	r24, 0x00	; 0
    603a:	08 2f       	mov	r16, r24
    603c:	10 e0       	ldi	r17, 0x00	; 0

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    603e:	80 91 29 08 	lds	r24, 0x0829
    6042:	90 91 2a 08 	lds	r25, 0x082A
    6046:	8c 17       	cp	r24, r28
    6048:	9d 07       	cpc	r25, r29
    604a:	2c f0       	brlt	.+10     	; 0x6056 <getLeftSpeedFromInput+0x76>
    604c:	8f ef       	ldi	r24, 0xFF	; 255
    604e:	0f 3f       	cpi	r16, 0xFF	; 255
    6050:	18 07       	cpc	r17, r24
    6052:	09 f4       	brne	.+2      	; 0x6056 <getLeftSpeedFromInput+0x76>
    6054:	6c c1       	rjmp	.+728    	; 0x632e <getLeftSpeedFromInput+0x34e>
    6056:	80 91 39 08 	lds	r24, 0x0839
    605a:	90 91 3a 08 	lds	r25, 0x083A
    605e:	8c 17       	cp	r24, r28
    6060:	9d 07       	cpc	r25, r29
    6062:	2c f0       	brlt	.+10     	; 0x606e <getLeftSpeedFromInput+0x8e>
    6064:	9f ef       	ldi	r25, 0xFF	; 255
    6066:	0f 3f       	cpi	r16, 0xFF	; 255
    6068:	19 07       	cpc	r17, r25
    606a:	09 f4       	brne	.+2      	; 0x606e <getLeftSpeedFromInput+0x8e>
    606c:	72 c1       	rjmp	.+740    	; 0x6352 <getLeftSpeedFromInput+0x372>
    606e:	80 91 49 08 	lds	r24, 0x0849
    6072:	90 91 4a 08 	lds	r25, 0x084A
    6076:	8c 17       	cp	r24, r28
    6078:	9d 07       	cpc	r25, r29
    607a:	2c f0       	brlt	.+10     	; 0x6086 <getLeftSpeedFromInput+0xa6>
    607c:	8f ef       	ldi	r24, 0xFF	; 255
    607e:	0f 3f       	cpi	r16, 0xFF	; 255
    6080:	18 07       	cpc	r17, r24
    6082:	09 f4       	brne	.+2      	; 0x6086 <getLeftSpeedFromInput+0xa6>
    6084:	63 c1       	rjmp	.+710    	; 0x634c <getLeftSpeedFromInput+0x36c>
    6086:	80 91 59 08 	lds	r24, 0x0859
    608a:	90 91 5a 08 	lds	r25, 0x085A
    608e:	8c 17       	cp	r24, r28
    6090:	9d 07       	cpc	r25, r29
    6092:	2c f0       	brlt	.+10     	; 0x609e <getLeftSpeedFromInput+0xbe>
    6094:	9f ef       	ldi	r25, 0xFF	; 255
    6096:	0f 3f       	cpi	r16, 0xFF	; 255
    6098:	19 07       	cpc	r17, r25
    609a:	09 f4       	brne	.+2      	; 0x609e <getLeftSpeedFromInput+0xbe>
    609c:	54 c1       	rjmp	.+680    	; 0x6346 <getLeftSpeedFromInput+0x366>
    609e:	80 91 69 08 	lds	r24, 0x0869
    60a2:	90 91 6a 08 	lds	r25, 0x086A
    60a6:	8c 17       	cp	r24, r28
    60a8:	9d 07       	cpc	r25, r29
    60aa:	2c f0       	brlt	.+10     	; 0x60b6 <getLeftSpeedFromInput+0xd6>
    60ac:	8f ef       	ldi	r24, 0xFF	; 255
    60ae:	0f 3f       	cpi	r16, 0xFF	; 255
    60b0:	18 07       	cpc	r17, r24
    60b2:	09 f4       	brne	.+2      	; 0x60b6 <getLeftSpeedFromInput+0xd6>
    60b4:	45 c1       	rjmp	.+650    	; 0x6340 <getLeftSpeedFromInput+0x360>
    60b6:	80 91 79 08 	lds	r24, 0x0879
    60ba:	90 91 7a 08 	lds	r25, 0x087A
    60be:	8c 17       	cp	r24, r28
    60c0:	9d 07       	cpc	r25, r29
    60c2:	2c f0       	brlt	.+10     	; 0x60ce <getLeftSpeedFromInput+0xee>
    60c4:	9f ef       	ldi	r25, 0xFF	; 255
    60c6:	0f 3f       	cpi	r16, 0xFF	; 255
    60c8:	19 07       	cpc	r17, r25
    60ca:	09 f4       	brne	.+2      	; 0x60ce <getLeftSpeedFromInput+0xee>
    60cc:	36 c1       	rjmp	.+620    	; 0x633a <getLeftSpeedFromInput+0x35a>
    60ce:	e0 90 89 08 	lds	r14, 0x0889
    60d2:	f0 90 8a 08 	lds	r15, 0x088A
    60d6:	ec 16       	cp	r14, r28
    60d8:	fd 06       	cpc	r15, r29
    60da:	2c f0       	brlt	.+10     	; 0x60e6 <getLeftSpeedFromInput+0x106>
    60dc:	8f ef       	ldi	r24, 0xFF	; 255
    60de:	0f 3f       	cpi	r16, 0xFF	; 255
    60e0:	18 07       	cpc	r17, r24
    60e2:	09 f4       	brne	.+2      	; 0x60e6 <getLeftSpeedFromInput+0x106>
    60e4:	27 c1       	rjmp	.+590    	; 0x6334 <getLeftSpeedFromInput+0x354>
			}
		}     
    }

    if(pwm_left >= 0) {
        if(last_left_vel == 0) {
    60e6:	20 97       	sbiw	r28, 0x00	; 0
    60e8:	09 f4       	brne	.+2      	; 0x60ec <getLeftSpeedFromInput+0x10c>
    60ea:	58 c0       	rjmp	.+176    	; 0x619c <getLeftSpeedFromInput+0x1bc>
            speedLeftFromEnc = 0;
        } else {
            if(indFwL==0) {  // the velocity is lower than first saved in the matrix
    60ec:	01 15       	cp	r16, r1
    60ee:	11 05       	cpc	r17, r1
    60f0:	09 f4       	brne	.+2      	; 0x60f4 <getLeftSpeedFromInput+0x114>
    60f2:	32 c1       	rjmp	.+612    	; 0x6358 <getLeftSpeedFromInput+0x378>
                speedLeftFromEnc = (last_left_vel*calibration[0][1])/calibration[0][0];
            } else if(indFwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    60f4:	9f ef       	ldi	r25, 0xFF	; 255
    60f6:	0f 3f       	cpi	r16, 0xFF	; 255
    60f8:	19 07       	cpc	r17, r25
    60fa:	09 f4       	brne	.+2      	; 0x60fe <getLeftSpeedFromInput+0x11e>
    60fc:	e9 c0       	rjmp	.+466    	; 0x62d0 <getLeftSpeedFromInput+0x2f0>
                speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][1]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][0]);  // take the max
            } else {
                speedLeftFromEnc = calibration[indFwL-1][1] + (signed int)(((float)(last_left_vel-calibration[indFwL-1][0])*(float)(calibration[indFwL][1]-calibration[indFwL-1][1]))/(float)(calibration[indFwL][0]-calibration[indFwL-1][0]));
    60fe:	f8 01       	movw	r30, r16
    6100:	e2 95       	swap	r30
    6102:	f2 95       	swap	r31
    6104:	f0 7f       	andi	r31, 0xF0	; 240
    6106:	fe 27       	eor	r31, r30
    6108:	e0 7f       	andi	r30, 0xF0	; 240
    610a:	fe 27       	eor	r31, r30
    610c:	e7 50       	subi	r30, 0x07	; 7
    610e:	f8 4f       	sbci	r31, 0xF8	; 248
    6110:	a0 80       	ld	r10, Z
    6112:	b1 80       	ldd	r11, Z+1	; 0x01
    6114:	82 80       	ldd	r8, Z+2	; 0x02
    6116:	93 80       	ldd	r9, Z+3	; 0x03
    6118:	ca 19       	sub	r28, r10
    611a:	db 09       	sbc	r29, r11
    611c:	be 01       	movw	r22, r28
    611e:	88 27       	eor	r24, r24
    6120:	77 fd       	sbrc	r23, 7
    6122:	80 95       	com	r24
    6124:	98 2f       	mov	r25, r24
    6126:	0e 94 ee 49 	call	0x93dc	; 0x93dc <__floatsisf>
    612a:	6b 01       	movw	r12, r22
    612c:	7c 01       	movw	r14, r24
    612e:	e8 01       	movw	r28, r16
    6130:	c2 95       	swap	r28
    6132:	d2 95       	swap	r29
    6134:	d0 7f       	andi	r29, 0xF0	; 240
    6136:	dc 27       	eor	r29, r28
    6138:	c0 7f       	andi	r28, 0xF0	; 240
    613a:	dc 27       	eor	r29, r28
    613c:	c7 5f       	subi	r28, 0xF7	; 247
    613e:	d7 4f       	sbci	r29, 0xF7	; 247
    6140:	6a 81       	ldd	r22, Y+2	; 0x02
    6142:	7b 81       	ldd	r23, Y+3	; 0x03
    6144:	68 19       	sub	r22, r8
    6146:	79 09       	sbc	r23, r9
    6148:	88 27       	eor	r24, r24
    614a:	77 fd       	sbrc	r23, 7
    614c:	80 95       	com	r24
    614e:	98 2f       	mov	r25, r24
    6150:	0e 94 ee 49 	call	0x93dc	; 0x93dc <__floatsisf>
    6154:	9b 01       	movw	r18, r22
    6156:	ac 01       	movw	r20, r24
    6158:	c7 01       	movw	r24, r14
    615a:	b6 01       	movw	r22, r12
    615c:	0e 94 03 4b 	call	0x9606	; 0x9606 <__mulsf3>
    6160:	7b 01       	movw	r14, r22
    6162:	8c 01       	movw	r16, r24
    6164:	68 81       	ld	r22, Y
    6166:	79 81       	ldd	r23, Y+1	; 0x01
    6168:	6a 19       	sub	r22, r10
    616a:	7b 09       	sbc	r23, r11
    616c:	88 27       	eor	r24, r24
    616e:	77 fd       	sbrc	r23, 7
    6170:	80 95       	com	r24
    6172:	98 2f       	mov	r25, r24
    6174:	0e 94 ee 49 	call	0x93dc	; 0x93dc <__floatsisf>
    6178:	9b 01       	movw	r18, r22
    617a:	ac 01       	movw	r20, r24
    617c:	c8 01       	movw	r24, r16
    617e:	b7 01       	movw	r22, r14
    6180:	0e 94 53 49 	call	0x92a6	; 0x92a6 <__divsf3>
    6184:	0e 94 bb 49 	call	0x9376	; 0x9376 <__fixsfsi>
    6188:	68 0d       	add	r22, r8
    618a:	79 1d       	adc	r23, r9
    618c:	70 93 b7 04 	sts	0x04B7, r23
    6190:	60 93 b6 04 	sts	0x04B6, r22
    6194:	07 c0       	rjmp	.+14     	; 0x61a4 <getLeftSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    6196:	00 e0       	ldi	r16, 0x00	; 0
    6198:	10 e0       	ldi	r17, 0x00	; 0
    619a:	42 cf       	rjmp	.-380    	; 0x6020 <getLeftSpeedFromInput+0x40>
		}     
    }

    if(pwm_left >= 0) {
        if(last_left_vel == 0) {
            speedLeftFromEnc = 0;
    619c:	10 92 b7 04 	sts	0x04B7, r1
    61a0:	10 92 b6 04 	sts	0x04B6, r1
        	speedLeftFromEnc = calibration[indBwL-1][5] + (signed int)(((float)(last_left_vel-calibration[indBwL-1][4])*(float)(calibration[indBwL][5]-calibration[indBwL-1][5]))/(float)(calibration[indBwL][4]-calibration[indBwL-1][4]));
		}
		speedLeftFromEnc = -speedLeftFromEnc;
    }
    
}
    61a4:	df 91       	pop	r29
    61a6:	cf 91       	pop	r28
    61a8:	1f 91       	pop	r17
    61aa:	0f 91       	pop	r16
    61ac:	ff 90       	pop	r15
    61ae:	ef 90       	pop	r14
    61b0:	df 90       	pop	r13
    61b2:	cf 90       	pop	r12
    61b4:	bf 90       	pop	r11
    61b6:	af 90       	pop	r10
    61b8:	9f 90       	pop	r9
    61ba:	8f 90       	pop	r8
    61bc:	08 95       	ret
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    61be:	60 91 11 08 	lds	r22, 0x0811
    61c2:	70 91 12 08 	lds	r23, 0x0812
    61c6:	6c 17       	cp	r22, r28
    61c8:	7d 07       	cpc	r23, r29
    61ca:	0c f0       	brlt	.+2      	; 0x61ce <getLeftSpeedFromInput+0x1ee>
    61cc:	7e c0       	rjmp	.+252    	; 0x62ca <getLeftSpeedFromInput+0x2ea>
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    61ce:	0f ef       	ldi	r16, 0xFF	; 255
    61d0:	1f ef       	ldi	r17, 0xFF	; 255
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    61d2:	80 91 21 08 	lds	r24, 0x0821
    61d6:	90 91 22 08 	lds	r25, 0x0822
    61da:	8c 17       	cp	r24, r28
    61dc:	9d 07       	cpc	r25, r29
    61de:	44 f0       	brlt	.+16     	; 0x61f0 <getLeftSpeedFromInput+0x210>
    }
    
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {
    61e0:	81 e0       	ldi	r24, 0x01	; 1
    61e2:	9f ef       	ldi	r25, 0xFF	; 255
    61e4:	0f 3f       	cpi	r16, 0xFF	; 255
    61e6:	19 07       	cpc	r17, r25
    61e8:	09 f0       	breq	.+2      	; 0x61ec <getLeftSpeedFromInput+0x20c>
    61ea:	80 e0       	ldi	r24, 0x00	; 0
    61ec:	08 2f       	mov	r16, r24
    61ee:	10 e0       	ldi	r17, 0x00	; 0
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    61f0:	80 91 31 08 	lds	r24, 0x0831
    61f4:	90 91 32 08 	lds	r25, 0x0832
    61f8:	8c 17       	cp	r24, r28
    61fa:	9d 07       	cpc	r25, r29
    61fc:	2c f0       	brlt	.+10     	; 0x6208 <getLeftSpeedFromInput+0x228>
    61fe:	8f ef       	ldi	r24, 0xFF	; 255
    6200:	0f 3f       	cpi	r16, 0xFF	; 255
    6202:	18 07       	cpc	r17, r24
    6204:	09 f4       	brne	.+2      	; 0x6208 <getLeftSpeedFromInput+0x228>
    6206:	19 c1       	rjmp	.+562    	; 0x643a <getLeftSpeedFromInput+0x45a>
    6208:	80 91 41 08 	lds	r24, 0x0841
    620c:	90 91 42 08 	lds	r25, 0x0842
    6210:	8c 17       	cp	r24, r28
    6212:	9d 07       	cpc	r25, r29
    6214:	2c f0       	brlt	.+10     	; 0x6220 <getLeftSpeedFromInput+0x240>
    6216:	9f ef       	ldi	r25, 0xFF	; 255
    6218:	0f 3f       	cpi	r16, 0xFF	; 255
    621a:	19 07       	cpc	r17, r25
    621c:	09 f4       	brne	.+2      	; 0x6220 <getLeftSpeedFromInput+0x240>
    621e:	0a c1       	rjmp	.+532    	; 0x6434 <getLeftSpeedFromInput+0x454>
    6220:	80 91 51 08 	lds	r24, 0x0851
    6224:	90 91 52 08 	lds	r25, 0x0852
    6228:	8c 17       	cp	r24, r28
    622a:	9d 07       	cpc	r25, r29
    622c:	2c f0       	brlt	.+10     	; 0x6238 <getLeftSpeedFromInput+0x258>
    622e:	8f ef       	ldi	r24, 0xFF	; 255
    6230:	0f 3f       	cpi	r16, 0xFF	; 255
    6232:	18 07       	cpc	r17, r24
    6234:	09 f4       	brne	.+2      	; 0x6238 <getLeftSpeedFromInput+0x258>
    6236:	fb c0       	rjmp	.+502    	; 0x642e <getLeftSpeedFromInput+0x44e>
    6238:	80 91 61 08 	lds	r24, 0x0861
    623c:	90 91 62 08 	lds	r25, 0x0862
    6240:	8c 17       	cp	r24, r28
    6242:	9d 07       	cpc	r25, r29
    6244:	2c f0       	brlt	.+10     	; 0x6250 <getLeftSpeedFromInput+0x270>
    6246:	9f ef       	ldi	r25, 0xFF	; 255
    6248:	0f 3f       	cpi	r16, 0xFF	; 255
    624a:	19 07       	cpc	r17, r25
    624c:	09 f4       	brne	.+2      	; 0x6250 <getLeftSpeedFromInput+0x270>
    624e:	ec c0       	rjmp	.+472    	; 0x6428 <getLeftSpeedFromInput+0x448>
    6250:	80 91 71 08 	lds	r24, 0x0871
    6254:	90 91 72 08 	lds	r25, 0x0872
    6258:	8c 17       	cp	r24, r28
    625a:	9d 07       	cpc	r25, r29
    625c:	2c f0       	brlt	.+10     	; 0x6268 <getLeftSpeedFromInput+0x288>
    625e:	8f ef       	ldi	r24, 0xFF	; 255
    6260:	0f 3f       	cpi	r16, 0xFF	; 255
    6262:	18 07       	cpc	r17, r24
    6264:	09 f4       	brne	.+2      	; 0x6268 <getLeftSpeedFromInput+0x288>
    6266:	dd c0       	rjmp	.+442    	; 0x6422 <getLeftSpeedFromInput+0x442>
    6268:	80 91 81 08 	lds	r24, 0x0881
    626c:	90 91 82 08 	lds	r25, 0x0882
    6270:	8c 17       	cp	r24, r28
    6272:	9d 07       	cpc	r25, r29
    6274:	2c f0       	brlt	.+10     	; 0x6280 <getLeftSpeedFromInput+0x2a0>
    6276:	9f ef       	ldi	r25, 0xFF	; 255
    6278:	0f 3f       	cpi	r16, 0xFF	; 255
    627a:	19 07       	cpc	r17, r25
    627c:	09 f4       	brne	.+2      	; 0x6280 <getLeftSpeedFromInput+0x2a0>
    627e:	ce c0       	rjmp	.+412    	; 0x641c <getLeftSpeedFromInput+0x43c>
    6280:	e0 90 91 08 	lds	r14, 0x0891
    6284:	f0 90 92 08 	lds	r15, 0x0892
    6288:	ec 16       	cp	r14, r28
    628a:	fd 06       	cpc	r15, r29
    628c:	2c f0       	brlt	.+10     	; 0x6298 <getLeftSpeedFromInput+0x2b8>
    628e:	8f ef       	ldi	r24, 0xFF	; 255
    6290:	0f 3f       	cpi	r16, 0xFF	; 255
    6292:	18 07       	cpc	r17, r24
    6294:	09 f4       	brne	.+2      	; 0x6298 <getLeftSpeedFromInput+0x2b8>
    6296:	bf c0       	rjmp	.+382    	; 0x6416 <getLeftSpeedFromInput+0x436>
            } else {
                speedLeftFromEnc = calibration[indFwL-1][1] + (signed int)(((float)(last_left_vel-calibration[indFwL-1][0])*(float)(calibration[indFwL][1]-calibration[indFwL-1][1]))/(float)(calibration[indFwL][0]-calibration[indFwL-1][0]));
            }
        }
    } else {
		if(indBwL==0) {  // the velocity is lower than first saved in the matrix
    6298:	01 15       	cp	r16, r1
    629a:	11 05       	cpc	r17, r1
    629c:	09 f0       	breq	.+2      	; 0x62a0 <getLeftSpeedFromInput+0x2c0>
    629e:	6e c0       	rjmp	.+220    	; 0x637c <getLeftSpeedFromInput+0x39c>
        	speedLeftFromEnc = (last_left_vel*calibration[0][5])/calibration[0][4];
    62a0:	20 91 13 08 	lds	r18, 0x0813
    62a4:	30 91 14 08 	lds	r19, 0x0814
    62a8:	c2 9f       	mul	r28, r18
    62aa:	c0 01       	movw	r24, r0
    62ac:	c3 9f       	mul	r28, r19
    62ae:	90 0d       	add	r25, r0
    62b0:	d2 9f       	mul	r29, r18
    62b2:	90 0d       	add	r25, r0
    62b4:	11 24       	eor	r1, r1
    62b6:	0e 94 c1 4b 	call	0x9782	; 0x9782 <__divmodhi4>
		} else if(indBwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][5]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][4]);  // take the max
		} else {
        	speedLeftFromEnc = calibration[indBwL-1][5] + (signed int)(((float)(last_left_vel-calibration[indBwL-1][4])*(float)(calibration[indBwL][5]-calibration[indBwL-1][5]))/(float)(calibration[indBwL][4]-calibration[indBwL-1][4]));
		}
		speedLeftFromEnc = -speedLeftFromEnc;
    62ba:	70 95       	com	r23
    62bc:	61 95       	neg	r22
    62be:	7f 4f       	sbci	r23, 0xFF	; 255
    62c0:	70 93 b7 04 	sts	0x04B7, r23
    62c4:	60 93 b6 04 	sts	0x04B6, r22
    62c8:	6d cf       	rjmp	.-294    	; 0x61a4 <getLeftSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    62ca:	00 e0       	ldi	r16, 0x00	; 0
    62cc:	10 e0       	ldi	r17, 0x00	; 0
    62ce:	81 cf       	rjmp	.-254    	; 0x61d2 <getLeftSpeedFromInput+0x1f2>
            speedLeftFromEnc = 0;
        } else {
            if(indFwL==0) {  // the velocity is lower than first saved in the matrix
                speedLeftFromEnc = (last_left_vel*calibration[0][1])/calibration[0][0];
            } else if(indFwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
                speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][1]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][0]);  // take the max
    62d0:	60 91 8b 08 	lds	r22, 0x088B
    62d4:	70 91 8c 08 	lds	r23, 0x088C
    62d8:	88 27       	eor	r24, r24
    62da:	77 fd       	sbrc	r23, 7
    62dc:	80 95       	com	r24
    62de:	98 2f       	mov	r25, r24
    62e0:	0e 94 ee 49 	call	0x93dc	; 0x93dc <__floatsisf>
    62e4:	5b 01       	movw	r10, r22
    62e6:	6c 01       	movw	r12, r24
    62e8:	be 01       	movw	r22, r28
    62ea:	88 27       	eor	r24, r24
    62ec:	77 fd       	sbrc	r23, 7
    62ee:	80 95       	com	r24
    62f0:	98 2f       	mov	r25, r24
    62f2:	0e 94 ee 49 	call	0x93dc	; 0x93dc <__floatsisf>
    62f6:	9b 01       	movw	r18, r22
    62f8:	ac 01       	movw	r20, r24
    62fa:	c6 01       	movw	r24, r12
    62fc:	b5 01       	movw	r22, r10
    62fe:	0e 94 03 4b 	call	0x9606	; 0x9606 <__mulsf3>
    6302:	5b 01       	movw	r10, r22
    6304:	6c 01       	movw	r12, r24
    6306:	b7 01       	movw	r22, r14
    6308:	88 27       	eor	r24, r24
    630a:	77 fd       	sbrc	r23, 7
    630c:	80 95       	com	r24
    630e:	98 2f       	mov	r25, r24
    6310:	0e 94 ee 49 	call	0x93dc	; 0x93dc <__floatsisf>
    6314:	9b 01       	movw	r18, r22
    6316:	ac 01       	movw	r20, r24
    6318:	c6 01       	movw	r24, r12
    631a:	b5 01       	movw	r22, r10
    631c:	0e 94 53 49 	call	0x92a6	; 0x92a6 <__divsf3>
    6320:	0e 94 bb 49 	call	0x9376	; 0x9376 <__fixsfsi>
    6324:	70 93 b7 04 	sts	0x04B7, r23
    6328:	60 93 b6 04 	sts	0x04B6, r22
    632c:	3b cf       	rjmp	.-394    	; 0x61a4 <getLeftSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    632e:	02 e0       	ldi	r16, 0x02	; 2
    6330:	10 e0       	ldi	r17, 0x00	; 0
    6332:	91 ce       	rjmp	.-734    	; 0x6056 <getLeftSpeedFromInput+0x76>
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    6334:	08 e0       	ldi	r16, 0x08	; 8
    6336:	10 e0       	ldi	r17, 0x00	; 0
    6338:	d6 ce       	rjmp	.-596    	; 0x60e6 <getLeftSpeedFromInput+0x106>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    633a:	07 e0       	ldi	r16, 0x07	; 7
    633c:	10 e0       	ldi	r17, 0x00	; 0
    633e:	c7 ce       	rjmp	.-626    	; 0x60ce <getLeftSpeedFromInput+0xee>
    6340:	06 e0       	ldi	r16, 0x06	; 6
    6342:	10 e0       	ldi	r17, 0x00	; 0
    6344:	b8 ce       	rjmp	.-656    	; 0x60b6 <getLeftSpeedFromInput+0xd6>
    6346:	05 e0       	ldi	r16, 0x05	; 5
    6348:	10 e0       	ldi	r17, 0x00	; 0
    634a:	a9 ce       	rjmp	.-686    	; 0x609e <getLeftSpeedFromInput+0xbe>
    634c:	04 e0       	ldi	r16, 0x04	; 4
    634e:	10 e0       	ldi	r17, 0x00	; 0
    6350:	9a ce       	rjmp	.-716    	; 0x6086 <getLeftSpeedFromInput+0xa6>
    6352:	03 e0       	ldi	r16, 0x03	; 3
    6354:	10 e0       	ldi	r17, 0x00	; 0
    6356:	8b ce       	rjmp	.-746    	; 0x606e <getLeftSpeedFromInput+0x8e>
    if(pwm_left >= 0) {
        if(last_left_vel == 0) {
            speedLeftFromEnc = 0;
        } else {
            if(indFwL==0) {  // the velocity is lower than first saved in the matrix
                speedLeftFromEnc = (last_left_vel*calibration[0][1])/calibration[0][0];
    6358:	20 91 0b 08 	lds	r18, 0x080B
    635c:	30 91 0c 08 	lds	r19, 0x080C
    6360:	c2 9f       	mul	r28, r18
    6362:	c0 01       	movw	r24, r0
    6364:	c3 9f       	mul	r28, r19
    6366:	90 0d       	add	r25, r0
    6368:	d2 9f       	mul	r29, r18
    636a:	90 0d       	add	r25, r0
    636c:	11 24       	eor	r1, r1
    636e:	0e 94 c1 4b 	call	0x9782	; 0x9782 <__divmodhi4>
    6372:	70 93 b7 04 	sts	0x04B7, r23
    6376:	60 93 b6 04 	sts	0x04B6, r22
    637a:	14 cf       	rjmp	.-472    	; 0x61a4 <getLeftSpeedFromInput+0x1c4>
            }
        }
    } else {
		if(indBwL==0) {  // the velocity is lower than first saved in the matrix
        	speedLeftFromEnc = (last_left_vel*calibration[0][5])/calibration[0][4];
		} else if(indBwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    637c:	8f ef       	ldi	r24, 0xFF	; 255
    637e:	0f 3f       	cpi	r16, 0xFF	; 255
    6380:	18 07       	cpc	r17, r24
    6382:	09 f4       	brne	.+2      	; 0x6386 <getLeftSpeedFromInput+0x3a6>
    6384:	5d c0       	rjmp	.+186    	; 0x6440 <getLeftSpeedFromInput+0x460>
        	speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][5]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][4]);  // take the max
		} else {
        	speedLeftFromEnc = calibration[indBwL-1][5] + (signed int)(((float)(last_left_vel-calibration[indBwL-1][4])*(float)(calibration[indBwL][5]-calibration[indBwL-1][5]))/(float)(calibration[indBwL][4]-calibration[indBwL-1][4]));
    6386:	f8 01       	movw	r30, r16
    6388:	e2 95       	swap	r30
    638a:	f2 95       	swap	r31
    638c:	f0 7f       	andi	r31, 0xF0	; 240
    638e:	fe 27       	eor	r31, r30
    6390:	e0 7f       	andi	r30, 0xF0	; 240
    6392:	fe 27       	eor	r31, r30
    6394:	e7 50       	subi	r30, 0x07	; 7
    6396:	f8 4f       	sbci	r31, 0xF8	; 248
    6398:	a0 84       	ldd	r10, Z+8	; 0x08
    639a:	b1 84       	ldd	r11, Z+9	; 0x09
    639c:	82 84       	ldd	r8, Z+10	; 0x0a
    639e:	93 84       	ldd	r9, Z+11	; 0x0b
    63a0:	ca 19       	sub	r28, r10
    63a2:	db 09       	sbc	r29, r11
    63a4:	be 01       	movw	r22, r28
    63a6:	88 27       	eor	r24, r24
    63a8:	77 fd       	sbrc	r23, 7
    63aa:	80 95       	com	r24
    63ac:	98 2f       	mov	r25, r24
    63ae:	0e 94 ee 49 	call	0x93dc	; 0x93dc <__floatsisf>
    63b2:	6b 01       	movw	r12, r22
    63b4:	7c 01       	movw	r14, r24
    63b6:	e8 01       	movw	r28, r16
    63b8:	c2 95       	swap	r28
    63ba:	d2 95       	swap	r29
    63bc:	d0 7f       	andi	r29, 0xF0	; 240
    63be:	dc 27       	eor	r29, r28
    63c0:	c0 7f       	andi	r28, 0xF0	; 240
    63c2:	dc 27       	eor	r29, r28
    63c4:	c7 5f       	subi	r28, 0xF7	; 247
    63c6:	d7 4f       	sbci	r29, 0xF7	; 247
    63c8:	6a 85       	ldd	r22, Y+10	; 0x0a
    63ca:	7b 85       	ldd	r23, Y+11	; 0x0b
    63cc:	68 19       	sub	r22, r8
    63ce:	79 09       	sbc	r23, r9
    63d0:	88 27       	eor	r24, r24
    63d2:	77 fd       	sbrc	r23, 7
    63d4:	80 95       	com	r24
    63d6:	98 2f       	mov	r25, r24
    63d8:	0e 94 ee 49 	call	0x93dc	; 0x93dc <__floatsisf>
    63dc:	9b 01       	movw	r18, r22
    63de:	ac 01       	movw	r20, r24
    63e0:	c7 01       	movw	r24, r14
    63e2:	b6 01       	movw	r22, r12
    63e4:	0e 94 03 4b 	call	0x9606	; 0x9606 <__mulsf3>
    63e8:	7b 01       	movw	r14, r22
    63ea:	8c 01       	movw	r16, r24
    63ec:	68 85       	ldd	r22, Y+8	; 0x08
    63ee:	79 85       	ldd	r23, Y+9	; 0x09
    63f0:	6a 19       	sub	r22, r10
    63f2:	7b 09       	sbc	r23, r11
    63f4:	88 27       	eor	r24, r24
    63f6:	77 fd       	sbrc	r23, 7
    63f8:	80 95       	com	r24
    63fa:	98 2f       	mov	r25, r24
    63fc:	0e 94 ee 49 	call	0x93dc	; 0x93dc <__floatsisf>
    6400:	9b 01       	movw	r18, r22
    6402:	ac 01       	movw	r20, r24
    6404:	c8 01       	movw	r24, r16
    6406:	b7 01       	movw	r22, r14
    6408:	0e 94 53 49 	call	0x92a6	; 0x92a6 <__divsf3>
    640c:	0e 94 bb 49 	call	0x9376	; 0x9376 <__fixsfsi>
    6410:	68 0d       	add	r22, r8
    6412:	79 1d       	adc	r23, r9
    6414:	52 cf       	rjmp	.-348    	; 0x62ba <getLeftSpeedFromInput+0x2da>
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    6416:	08 e0       	ldi	r16, 0x08	; 8
    6418:	10 e0       	ldi	r17, 0x00	; 0
    641a:	3e cf       	rjmp	.-388    	; 0x6298 <getLeftSpeedFromInput+0x2b8>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    641c:	07 e0       	ldi	r16, 0x07	; 7
    641e:	10 e0       	ldi	r17, 0x00	; 0
    6420:	2f cf       	rjmp	.-418    	; 0x6280 <getLeftSpeedFromInput+0x2a0>
    6422:	06 e0       	ldi	r16, 0x06	; 6
    6424:	10 e0       	ldi	r17, 0x00	; 0
    6426:	20 cf       	rjmp	.-448    	; 0x6268 <getLeftSpeedFromInput+0x288>
    6428:	05 e0       	ldi	r16, 0x05	; 5
    642a:	10 e0       	ldi	r17, 0x00	; 0
    642c:	11 cf       	rjmp	.-478    	; 0x6250 <getLeftSpeedFromInput+0x270>
    642e:	04 e0       	ldi	r16, 0x04	; 4
    6430:	10 e0       	ldi	r17, 0x00	; 0
    6432:	02 cf       	rjmp	.-508    	; 0x6238 <getLeftSpeedFromInput+0x258>
    6434:	03 e0       	ldi	r16, 0x03	; 3
    6436:	10 e0       	ldi	r17, 0x00	; 0
    6438:	f3 ce       	rjmp	.-538    	; 0x6220 <getLeftSpeedFromInput+0x240>
    643a:	02 e0       	ldi	r16, 0x02	; 2
    643c:	10 e0       	ldi	r17, 0x00	; 0
    643e:	e4 ce       	rjmp	.-568    	; 0x6208 <getLeftSpeedFromInput+0x228>
        }
    } else {
		if(indBwL==0) {  // the velocity is lower than first saved in the matrix
        	speedLeftFromEnc = (last_left_vel*calibration[0][5])/calibration[0][4];
		} else if(indBwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][5]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][4]);  // take the max
    6440:	60 91 93 08 	lds	r22, 0x0893
    6444:	70 91 94 08 	lds	r23, 0x0894
    6448:	88 27       	eor	r24, r24
    644a:	77 fd       	sbrc	r23, 7
    644c:	80 95       	com	r24
    644e:	98 2f       	mov	r25, r24
    6450:	0e 94 ee 49 	call	0x93dc	; 0x93dc <__floatsisf>
    6454:	5b 01       	movw	r10, r22
    6456:	6c 01       	movw	r12, r24
    6458:	be 01       	movw	r22, r28
    645a:	88 27       	eor	r24, r24
    645c:	77 fd       	sbrc	r23, 7
    645e:	80 95       	com	r24
    6460:	98 2f       	mov	r25, r24
    6462:	0e 94 ee 49 	call	0x93dc	; 0x93dc <__floatsisf>
    6466:	9b 01       	movw	r18, r22
    6468:	ac 01       	movw	r20, r24
    646a:	c6 01       	movw	r24, r12
    646c:	b5 01       	movw	r22, r10
    646e:	0e 94 03 4b 	call	0x9606	; 0x9606 <__mulsf3>
    6472:	5b 01       	movw	r10, r22
    6474:	6c 01       	movw	r12, r24
    6476:	b7 01       	movw	r22, r14
    6478:	88 27       	eor	r24, r24
    647a:	77 fd       	sbrc	r23, 7
    647c:	80 95       	com	r24
    647e:	98 2f       	mov	r25, r24
    6480:	0e 94 ee 49 	call	0x93dc	; 0x93dc <__floatsisf>
    6484:	9b 01       	movw	r18, r22
    6486:	ac 01       	movw	r20, r24
    6488:	c6 01       	movw	r24, r12
    648a:	b5 01       	movw	r22, r10
    648c:	0e 94 53 49 	call	0x92a6	; 0x92a6 <__divsf3>
    6490:	0e 94 bb 49 	call	0x9376	; 0x9376 <__fixsfsi>
    6494:	12 cf       	rjmp	.-476    	; 0x62ba <getLeftSpeedFromInput+0x2da>

00006496 <handleMotorsWithSpeedController>:
		OCR4B = 0;
	}

}

void handleMotorsWithSpeedController() {
    6496:	2f 92       	push	r2
    6498:	3f 92       	push	r3
    649a:	4f 92       	push	r4
    649c:	5f 92       	push	r5
    649e:	6f 92       	push	r6
    64a0:	7f 92       	push	r7
    64a2:	8f 92       	push	r8
    64a4:	9f 92       	push	r9
    64a6:	af 92       	push	r10
    64a8:	bf 92       	push	r11
    64aa:	cf 92       	push	r12
    64ac:	df 92       	push	r13
    64ae:	ef 92       	push	r14
    64b0:	ff 92       	push	r15
    64b2:	0f 93       	push	r16
    64b4:	1f 93       	push	r17

	if(calibrateOdomFlag==1) {
    64b6:	80 91 23 05 	lds	r24, 0x0523
    64ba:	81 30       	cpi	r24, 0x01	; 1
    64bc:	09 f4       	brne	.+2      	; 0x64c0 <handleMotorsWithSpeedController+0x2a>
    64be:	28 c2       	rjmp	.+1104   	; 0x6910 <handleMotorsWithSpeedController+0x47a>
		pwm_right_working = pwm_intermediate_right_desired;
		pwm_left_working = pwm_intermediate_left_desired;
	} else {
		if(pwm_intermediate_right_desired >= 0) {		// pwm in the range -127..127
    64c0:	80 91 fd 02 	lds	r24, 0x02FD
    64c4:	90 91 fe 02 	lds	r25, 0x02FE
    64c8:	97 fd       	sbrc	r25, 7
    64ca:	9a c2       	rjmp	.+1332   	; 0x6a00 <handleMotorsWithSpeedController+0x56a>
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_FW_SC);
    64cc:	61 e0       	ldi	r22, 0x01	; 1
    64ce:	0e 94 2d 2a 	call	0x545a	; 0x545a <getInputFromSpeed>
    64d2:	90 93 0e 03 	sts	0x030E, r25
    64d6:	80 93 0d 03 	sts	0x030D, r24
		} else {
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_BW_SC);
		}
		if(pwm_intermediate_left_desired >= 0) {		// pwm in the range -127..127
    64da:	80 91 ff 02 	lds	r24, 0x02FF
    64de:	90 91 00 03 	lds	r25, 0x0300
    64e2:	97 fd       	sbrc	r25, 7
    64e4:	85 c2       	rjmp	.+1290   	; 0x69f0 <handleMotorsWithSpeedController+0x55a>
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_FW_SC);
    64e6:	60 e0       	ldi	r22, 0x00	; 0
    64e8:	0e 94 2d 2a 	call	0x545a	; 0x545a <getInputFromSpeed>
    64ec:	90 93 10 03 	sts	0x0310, r25
    64f0:	80 93 0f 03 	sts	0x030F, r24
		} else {
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_BW_SC);
		}
	}

	if(obstacleAvoidanceEnabled) {
    64f4:	20 91 6a 04 	lds	r18, 0x046A
    64f8:	22 23       	and	r18, r18
    64fa:	09 f0       	breq	.+2      	; 0x64fe <handleMotorsWithSpeedController+0x68>
    64fc:	fe c1       	rjmp	.+1020   	; 0x68fa <handleMotorsWithSpeedController+0x464>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
	}
	pwm_left_desired_to_control = pwm_left_working;
    64fe:	90 93 ec 02 	sts	0x02EC, r25
    6502:	80 93 eb 02 	sts	0x02EB, r24
	pwm_right_desired_to_control = pwm_right_working;
    6506:	80 91 0d 03 	lds	r24, 0x030D
    650a:	90 91 0e 03 	lds	r25, 0x030E
    650e:	90 93 ea 02 	sts	0x02EA, r25
    6512:	80 93 e9 02 	sts	0x02E9, r24

	if(compute_left_vel) {
    6516:	80 91 07 02 	lds	r24, 0x0207
    651a:	88 23       	and	r24, r24
    651c:	09 f4       	brne	.+2      	; 0x6520 <handleMotorsWithSpeedController+0x8a>
    651e:	93 c0       	rjmp	.+294    	; 0x6646 <handleMotorsWithSpeedController+0x1b0>

		last_left_vel = left_vel_sum>>2;
    6520:	20 91 ed 02 	lds	r18, 0x02ED
    6524:	30 91 ee 02 	lds	r19, 0x02EE
    6528:	36 95       	lsr	r19
    652a:	27 95       	ror	r18
    652c:	36 95       	lsr	r19
    652e:	27 95       	ror	r18
    6530:	30 93 f2 02 	sts	0x02F2, r19
    6534:	20 93 f1 02 	sts	0x02F1, r18
		compute_left_vel = 0;
    6538:	10 92 07 02 	sts	0x0207, r1
		left_vel_sum = 0;
    653c:	10 92 ee 02 	sts	0x02EE, r1
    6540:	10 92 ed 02 	sts	0x02ED, r1
		
		if(calibrateOdomFlag==1) {
    6544:	80 91 23 05 	lds	r24, 0x0523
    6548:	81 30       	cpi	r24, 0x01	; 1
    654a:	09 f4       	brne	.+2      	; 0x654e <handleMotorsWithSpeedController+0xb8>
    654c:	08 c2       	rjmp	.+1040   	; 0x695e <handleMotorsWithSpeedController+0x4c8>
			leftSpeedSumOdom += last_left_vel;
			leftSumCount++;
		}

		getLeftSpeedFromInput();	// get speed in mm/s
    654e:	0e 94 f0 2f 	call	0x5fe0	; 0x5fe0 <getLeftSpeedFromInput>
		leftDistPrev = leftDist;
    6552:	80 91 91 04 	lds	r24, 0x0491
    6556:	90 91 92 04 	lds	r25, 0x0492
    655a:	a0 91 93 04 	lds	r26, 0x0493
    655e:	b0 91 94 04 	lds	r27, 0x0494
    6562:	80 93 99 04 	sts	0x0499, r24
    6566:	90 93 9a 04 	sts	0x049A, r25
    656a:	a0 93 9b 04 	sts	0x049B, r26
    656e:	b0 93 9c 04 	sts	0x049C, r27
		//timeOdometry = getTime100MicroSec()-timeLeftOdom;
		leftDist += ((float)speedLeftFromEnc*((float)(getTime100MicroSec()-timeLeftOdom)*104.0))/1000000.0;	// distance in mm				
    6572:	60 91 b6 04 	lds	r22, 0x04B6
    6576:	70 91 b7 04 	lds	r23, 0x04B7
    657a:	88 27       	eor	r24, r24
    657c:	77 fd       	sbrc	r23, 7
    657e:	80 95       	com	r24
    6580:	98 2f       	mov	r25, r24
    6582:	0e 94 ee 49 	call	0x93dc	; 0x93dc <__floatsisf>
    6586:	7b 01       	movw	r14, r22
    6588:	8c 01       	movw	r16, r24
    658a:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <getTime100MicroSec>
    658e:	20 91 ba 04 	lds	r18, 0x04BA
    6592:	30 91 bb 04 	lds	r19, 0x04BB
    6596:	40 91 bc 04 	lds	r20, 0x04BC
    659a:	50 91 bd 04 	lds	r21, 0x04BD
    659e:	62 1b       	sub	r22, r18
    65a0:	73 0b       	sbc	r23, r19
    65a2:	84 0b       	sbc	r24, r20
    65a4:	95 0b       	sbc	r25, r21
    65a6:	0e 94 ec 49 	call	0x93d8	; 0x93d8 <__floatunsisf>
    65aa:	20 e0       	ldi	r18, 0x00	; 0
    65ac:	30 e0       	ldi	r19, 0x00	; 0
    65ae:	40 ed       	ldi	r20, 0xD0	; 208
    65b0:	52 e4       	ldi	r21, 0x42	; 66
    65b2:	0e 94 03 4b 	call	0x9606	; 0x9606 <__mulsf3>
    65b6:	9b 01       	movw	r18, r22
    65b8:	ac 01       	movw	r20, r24
    65ba:	c8 01       	movw	r24, r16
    65bc:	b7 01       	movw	r22, r14
    65be:	0e 94 03 4b 	call	0x9606	; 0x9606 <__mulsf3>
    65c2:	20 e0       	ldi	r18, 0x00	; 0
    65c4:	34 e2       	ldi	r19, 0x24	; 36
    65c6:	44 e7       	ldi	r20, 0x74	; 116
    65c8:	59 e4       	ldi	r21, 0x49	; 73
    65ca:	0e 94 53 49 	call	0x92a6	; 0x92a6 <__divsf3>
    65ce:	9b 01       	movw	r18, r22
    65d0:	ac 01       	movw	r20, r24
    65d2:	60 91 91 04 	lds	r22, 0x0491
    65d6:	70 91 92 04 	lds	r23, 0x0492
    65da:	80 91 93 04 	lds	r24, 0x0493
    65de:	90 91 94 04 	lds	r25, 0x0494
    65e2:	0e 94 86 48 	call	0x910c	; 0x910c <__addsf3>
    65e6:	60 93 91 04 	sts	0x0491, r22
    65ea:	70 93 92 04 	sts	0x0492, r23
    65ee:	80 93 93 04 	sts	0x0493, r24
    65f2:	90 93 94 04 	sts	0x0494, r25
		timeLeftOdom = getTime100MicroSec();
    65f6:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <getTime100MicroSec>
    65fa:	60 93 ba 04 	sts	0x04BA, r22
    65fe:	70 93 bb 04 	sts	0x04BB, r23
    6602:	80 93 bc 04 	sts	0x04BC, r24
    6606:	90 93 bd 04 	sts	0x04BD, r25
		} else {
			leftMotSteps -= ((float)(last_left_vel>>3))*(LEFT_ENC_OFFSET-ENC_SLOPE*((float)(last_left_vel>>2)))/1000.0;
		}

*/
		if(robotPosition == HORIZONTAL_POS) {
    660a:	80 91 16 02 	lds	r24, 0x0216
    660e:	81 30       	cpi	r24, 0x01	; 1
    6610:	09 f4       	brne	.+2      	; 0x6614 <handleMotorsWithSpeedController+0x17e>
    6612:	c7 c1       	rjmp	.+910    	; 0x69a2 <handleMotorsWithSpeedController+0x50c>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_left(&pwm_left_working);
			//PORTB |= (1 << 5);
		} else {
			//PORTB &= ~(1 << 6);
			start_vertical_speed_control_left(&pwm_left_working);
    6614:	8f e0       	ldi	r24, 0x0F	; 15
    6616:	93 e0       	ldi	r25, 0x03	; 3
    6618:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <start_vertical_speed_control_left>
			//PORTB |= (1 << 6);
		}

		pwm_left = pwm_left_working;
    661c:	80 91 0f 03 	lds	r24, 0x030F
    6620:	90 91 10 03 	lds	r25, 0x0310
    6624:	90 93 f8 02 	sts	0x02F8, r25
    6628:	80 93 f7 02 	sts	0x02F7, r24

		if(pwm_left > 0) {
    662c:	18 16       	cp	r1, r24
    662e:	19 06       	cpc	r1, r25
    6630:	0c f0       	brlt	.+2      	; 0x6634 <handleMotorsWithSpeedController+0x19e>
    6632:	f9 c1       	rjmp	.+1010   	; 0x6a26 <handleMotorsWithSpeedController+0x590>
			OCR4A = (unsigned int)pwm_left;
    6634:	90 93 a9 00 	sts	0x00A9, r25
    6638:	80 93 a8 00 	sts	0x00A8, r24
		} else {
			OCR4A = 0;
			OCR4B = 0;
		}

		computeOdometry++;
    663c:	80 91 a1 04 	lds	r24, 0x04A1
    6640:	8f 5f       	subi	r24, 0xFF	; 255
    6642:	80 93 a1 04 	sts	0x04A1, r24

	}

	if(compute_right_vel) {
    6646:	80 91 08 02 	lds	r24, 0x0208
    664a:	88 23       	and	r24, r24
    664c:	09 f0       	breq	.+2      	; 0x6650 <handleMotorsWithSpeedController+0x1ba>
    664e:	c1 c0       	rjmp	.+386    	; 0x67d2 <handleMotorsWithSpeedController+0x33c>
    6650:	80 91 a1 04 	lds	r24, 0x04A1

		computeOdometry++;

	}

	if(computeOdometry>=2) {	// compute odometry when we get the last encoders values for both wheels
    6654:	82 30       	cpi	r24, 0x02	; 2
    6656:	08 f4       	brcc	.+2      	; 0x665a <handleMotorsWithSpeedController+0x1c4>
    6658:	ab c0       	rjmp	.+342    	; 0x67b0 <handleMotorsWithSpeedController+0x31a>

		// the odometry computation takes about 1 ms

		computeOdometry = 0;
    665a:	10 92 a1 04 	sts	0x04A1, r1

		deltaDist = ((rightDist-rightDistPrev)+(leftDist-leftDistPrev))/2.0;
    665e:	60 90 95 04 	lds	r6, 0x0495
    6662:	70 90 96 04 	lds	r7, 0x0496
    6666:	80 90 97 04 	lds	r8, 0x0497
    666a:	90 90 98 04 	lds	r9, 0x0498
    666e:	20 90 91 04 	lds	r2, 0x0491
    6672:	30 90 92 04 	lds	r3, 0x0492
    6676:	40 90 93 04 	lds	r4, 0x0493
    667a:	50 90 94 04 	lds	r5, 0x0494
    667e:	c4 01       	movw	r24, r8
    6680:	b3 01       	movw	r22, r6
    6682:	20 91 9d 04 	lds	r18, 0x049D
    6686:	30 91 9e 04 	lds	r19, 0x049E
    668a:	40 91 9f 04 	lds	r20, 0x049F
    668e:	50 91 a0 04 	lds	r21, 0x04A0
    6692:	0e 94 85 48 	call	0x910a	; 0x910a <__subsf3>
    6696:	7b 01       	movw	r14, r22
    6698:	8c 01       	movw	r16, r24
    669a:	c2 01       	movw	r24, r4
    669c:	b1 01       	movw	r22, r2
    669e:	20 91 99 04 	lds	r18, 0x0499
    66a2:	30 91 9a 04 	lds	r19, 0x049A
    66a6:	40 91 9b 04 	lds	r20, 0x049B
    66aa:	50 91 9c 04 	lds	r21, 0x049C
    66ae:	0e 94 85 48 	call	0x910a	; 0x910a <__subsf3>
    66b2:	9b 01       	movw	r18, r22
    66b4:	ac 01       	movw	r20, r24
    66b6:	c8 01       	movw	r24, r16
    66b8:	b7 01       	movw	r22, r14
    66ba:	0e 94 86 48 	call	0x910c	; 0x910c <__addsf3>
    66be:	20 e0       	ldi	r18, 0x00	; 0
    66c0:	30 e0       	ldi	r19, 0x00	; 0
    66c2:	40 e0       	ldi	r20, 0x00	; 0
    66c4:	5f e3       	ldi	r21, 0x3F	; 63
    66c6:	0e 94 03 4b 	call	0x9606	; 0x9606 <__mulsf3>
    66ca:	d6 2e       	mov	r13, r22
    66cc:	c7 2e       	mov	r12, r23
    66ce:	b8 2e       	mov	r11, r24
    66d0:	a9 2e       	mov	r10, r25
    66d2:	a6 01       	movw	r20, r12
    66d4:	95 01       	movw	r18, r10
    66d6:	85 2f       	mov	r24, r21
    66d8:	94 2f       	mov	r25, r20
    66da:	a3 2f       	mov	r26, r19
    66dc:	b2 2f       	mov	r27, r18
    66de:	80 93 7d 04 	sts	0x047D, r24
    66e2:	90 93 7e 04 	sts	0x047E, r25
    66e6:	a0 93 7f 04 	sts	0x047F, r26
    66ea:	b0 93 80 04 	sts	0x0480, r27

		if(robotPosition == HORIZONTAL_POS) {
    66ee:	80 91 16 02 	lds	r24, 0x0216
    66f2:	81 30       	cpi	r24, 0x01	; 1
    66f4:	09 f4       	brne	.+2      	; 0x66f8 <handleMotorsWithSpeedController+0x262>
    66f6:	1d c1       	rjmp	.+570    	; 0x6932 <handleMotorsWithSpeedController+0x49c>
			//thetaOld = (rightMotSteps - leftMotSteps)/WHEEL_DIST;	// radians
			theta = (rightDist-leftDist)/WHEEL_DIST;
		} else {
			//thetaOld = thetaAcc;
			theta = thetaAcc;
    66f8:	f0 90 a2 04 	lds	r15, 0x04A2
    66fc:	00 91 a3 04 	lds	r16, 0x04A3
    6700:	10 91 a4 04 	lds	r17, 0x04A4
    6704:	e0 90 a5 04 	lds	r14, 0x04A5
    6708:	8f 2d       	mov	r24, r15
    670a:	90 2f       	mov	r25, r16
    670c:	a1 2f       	mov	r26, r17
    670e:	be 2d       	mov	r27, r14
    6710:	80 93 6d 04 	sts	0x046D, r24
    6714:	90 93 6e 04 	sts	0x046E, r25
    6718:	a0 93 6f 04 	sts	0x046F, r26
    671c:	b0 93 70 04 	sts	0x0470, r27
		}

		//deltaDistOld = ((rightMotSteps-rightMotStepsOld)+(leftMotSteps-leftMotStepsOld))/2.0;

		xPos = xPos + cos(theta)*deltaDist;				
    6720:	6f 2d       	mov	r22, r15
    6722:	70 2f       	mov	r23, r16
    6724:	81 2f       	mov	r24, r17
    6726:	9e 2d       	mov	r25, r14
    6728:	0e 94 50 49 	call	0x92a0	; 0x92a0 <cos>
    672c:	9b 01       	movw	r18, r22
    672e:	ac 01       	movw	r20, r24
    6730:	d6 01       	movw	r26, r12
    6732:	f5 01       	movw	r30, r10
    6734:	6b 2f       	mov	r22, r27
    6736:	7c 2d       	mov	r23, r12
    6738:	8f 2f       	mov	r24, r31
    673a:	9a 2d       	mov	r25, r10
    673c:	0e 94 03 4b 	call	0x9606	; 0x9606 <__mulsf3>
    6740:	9b 01       	movw	r18, r22
    6742:	ac 01       	movw	r20, r24
    6744:	60 91 75 04 	lds	r22, 0x0475
    6748:	70 91 76 04 	lds	r23, 0x0476
    674c:	80 91 77 04 	lds	r24, 0x0477
    6750:	90 91 78 04 	lds	r25, 0x0478
    6754:	0e 94 86 48 	call	0x910c	; 0x910c <__addsf3>
    6758:	60 93 75 04 	sts	0x0475, r22
    675c:	70 93 76 04 	sts	0x0476, r23
    6760:	80 93 77 04 	sts	0x0477, r24
    6764:	90 93 78 04 	sts	0x0478, r25
		yPos = yPos + sin(theta)*deltaDist;
    6768:	6f 2d       	mov	r22, r15
    676a:	70 2f       	mov	r23, r16
    676c:	81 2f       	mov	r24, r17
    676e:	9e 2d       	mov	r25, r14
    6770:	0e 94 66 4b 	call	0x96cc	; 0x96cc <sin>
    6774:	9b 01       	movw	r18, r22
    6776:	ac 01       	movw	r20, r24
    6778:	d6 01       	movw	r26, r12
    677a:	f5 01       	movw	r30, r10
    677c:	6b 2f       	mov	r22, r27
    677e:	7c 2d       	mov	r23, r12
    6780:	8f 2f       	mov	r24, r31
    6782:	9a 2d       	mov	r25, r10
    6784:	0e 94 03 4b 	call	0x9606	; 0x9606 <__mulsf3>
    6788:	9b 01       	movw	r18, r22
    678a:	ac 01       	movw	r20, r24
    678c:	60 91 79 04 	lds	r22, 0x0479
    6790:	70 91 7a 04 	lds	r23, 0x047A
    6794:	80 91 7b 04 	lds	r24, 0x047B
    6798:	90 91 7c 04 	lds	r25, 0x047C
    679c:	0e 94 86 48 	call	0x910c	; 0x910c <__addsf3>
    67a0:	60 93 79 04 	sts	0x0479, r22
    67a4:	70 93 7a 04 	sts	0x047A, r23
    67a8:	80 93 7b 04 	sts	0x047B, r24
    67ac:	90 93 7c 04 	sts	0x047C, r25
		//xPosOld = xPosOld + cos(thetaOld)*deltaDistOld;				
		//yPosOld = yPosOld + sin(thetaOld)*deltaDistOld;

	}

}
    67b0:	1f 91       	pop	r17
    67b2:	0f 91       	pop	r16
    67b4:	ff 90       	pop	r15
    67b6:	ef 90       	pop	r14
    67b8:	df 90       	pop	r13
    67ba:	cf 90       	pop	r12
    67bc:	bf 90       	pop	r11
    67be:	af 90       	pop	r10
    67c0:	9f 90       	pop	r9
    67c2:	8f 90       	pop	r8
    67c4:	7f 90       	pop	r7
    67c6:	6f 90       	pop	r6
    67c8:	5f 90       	pop	r5
    67ca:	4f 90       	pop	r4
    67cc:	3f 90       	pop	r3
    67ce:	2f 90       	pop	r2
    67d0:	08 95       	ret

	}

	if(compute_right_vel) {

		last_right_vel = right_vel_sum>>2;
    67d2:	20 91 ef 02 	lds	r18, 0x02EF
    67d6:	30 91 f0 02 	lds	r19, 0x02F0
    67da:	36 95       	lsr	r19
    67dc:	27 95       	ror	r18
    67de:	36 95       	lsr	r19
    67e0:	27 95       	ror	r18
    67e2:	30 93 f4 02 	sts	0x02F4, r19
    67e6:	20 93 f3 02 	sts	0x02F3, r18
		compute_right_vel = 0;
    67ea:	10 92 08 02 	sts	0x0208, r1
		right_vel_sum = 0;
    67ee:	10 92 f0 02 	sts	0x02F0, r1
    67f2:	10 92 ef 02 	sts	0x02EF, r1

		if(calibrateOdomFlag==1) {
    67f6:	80 91 23 05 	lds	r24, 0x0523
    67fa:	81 30       	cpi	r24, 0x01	; 1
    67fc:	09 f4       	brne	.+2      	; 0x6800 <handleMotorsWithSpeedController+0x36a>
    67fe:	d6 c0       	rjmp	.+428    	; 0x69ac <handleMotorsWithSpeedController+0x516>
			rightSpeedSumOdom += last_right_vel;
			rightSumCount++;
		}

		getRightSpeedFromInput();
    6800:	0e 94 95 2d 	call	0x5b2a	; 0x5b2a <getRightSpeedFromInput>
		rightDistPrev = rightDist;
    6804:	80 91 95 04 	lds	r24, 0x0495
    6808:	90 91 96 04 	lds	r25, 0x0496
    680c:	a0 91 97 04 	lds	r26, 0x0497
    6810:	b0 91 98 04 	lds	r27, 0x0498
    6814:	80 93 9d 04 	sts	0x049D, r24
    6818:	90 93 9e 04 	sts	0x049E, r25
    681c:	a0 93 9f 04 	sts	0x049F, r26
    6820:	b0 93 a0 04 	sts	0x04A0, r27
		rightDist += ((float)speedRightFromEnc*((float)(getTime100MicroSec()-timeRightOdom)*104.0))/1000000.0;	// distance in mm				
    6824:	60 91 b8 04 	lds	r22, 0x04B8
    6828:	70 91 b9 04 	lds	r23, 0x04B9
    682c:	88 27       	eor	r24, r24
    682e:	77 fd       	sbrc	r23, 7
    6830:	80 95       	com	r24
    6832:	98 2f       	mov	r25, r24
    6834:	0e 94 ee 49 	call	0x93dc	; 0x93dc <__floatsisf>
    6838:	7b 01       	movw	r14, r22
    683a:	8c 01       	movw	r16, r24
    683c:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <getTime100MicroSec>
    6840:	20 91 be 04 	lds	r18, 0x04BE
    6844:	30 91 bf 04 	lds	r19, 0x04BF
    6848:	40 91 c0 04 	lds	r20, 0x04C0
    684c:	50 91 c1 04 	lds	r21, 0x04C1
    6850:	62 1b       	sub	r22, r18
    6852:	73 0b       	sbc	r23, r19
    6854:	84 0b       	sbc	r24, r20
    6856:	95 0b       	sbc	r25, r21
    6858:	0e 94 ec 49 	call	0x93d8	; 0x93d8 <__floatunsisf>
    685c:	20 e0       	ldi	r18, 0x00	; 0
    685e:	30 e0       	ldi	r19, 0x00	; 0
    6860:	40 ed       	ldi	r20, 0xD0	; 208
    6862:	52 e4       	ldi	r21, 0x42	; 66
    6864:	0e 94 03 4b 	call	0x9606	; 0x9606 <__mulsf3>
    6868:	9b 01       	movw	r18, r22
    686a:	ac 01       	movw	r20, r24
    686c:	c8 01       	movw	r24, r16
    686e:	b7 01       	movw	r22, r14
    6870:	0e 94 03 4b 	call	0x9606	; 0x9606 <__mulsf3>
    6874:	20 e0       	ldi	r18, 0x00	; 0
    6876:	34 e2       	ldi	r19, 0x24	; 36
    6878:	44 e7       	ldi	r20, 0x74	; 116
    687a:	59 e4       	ldi	r21, 0x49	; 73
    687c:	0e 94 53 49 	call	0x92a6	; 0x92a6 <__divsf3>
    6880:	9b 01       	movw	r18, r22
    6882:	ac 01       	movw	r20, r24
    6884:	60 91 95 04 	lds	r22, 0x0495
    6888:	70 91 96 04 	lds	r23, 0x0496
    688c:	80 91 97 04 	lds	r24, 0x0497
    6890:	90 91 98 04 	lds	r25, 0x0498
    6894:	0e 94 86 48 	call	0x910c	; 0x910c <__addsf3>
    6898:	60 93 95 04 	sts	0x0495, r22
    689c:	70 93 96 04 	sts	0x0496, r23
    68a0:	80 93 97 04 	sts	0x0497, r24
    68a4:	90 93 98 04 	sts	0x0498, r25
		timeRightOdom = getTime100MicroSec();
    68a8:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <getTime100MicroSec>
    68ac:	60 93 be 04 	sts	0x04BE, r22
    68b0:	70 93 bf 04 	sts	0x04BF, r23
    68b4:	80 93 c0 04 	sts	0x04C0, r24
    68b8:	90 93 c1 04 	sts	0x04C1, r25
		} else {
			rightMotSteps -= ((float)(last_right_vel>>3))*(RIGHT_ENC_OFFSET-ENC_SLOPE*((float)(last_right_vel>>2)))/1000.0;
		}
*/

		if(robotPosition == HORIZONTAL_POS) {
    68bc:	80 91 16 02 	lds	r24, 0x0216
    68c0:	81 30       	cpi	r24, 0x01	; 1
    68c2:	09 f4       	brne	.+2      	; 0x68c6 <handleMotorsWithSpeedController+0x430>
    68c4:	47 c0       	rjmp	.+142    	; 0x6954 <handleMotorsWithSpeedController+0x4be>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_right(&pwm_right_working);
			//PORTB |= (1 << 5);
		} else {
			//PORTB &= ~(1 << 6);
			start_vertical_speed_control_right(&pwm_right_working);
    68c6:	8d e0       	ldi	r24, 0x0D	; 13
    68c8:	93 e0       	ldi	r25, 0x03	; 3
    68ca:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <start_vertical_speed_control_right>
			//PORTB |= (1 << 6);
		}

		pwm_right = pwm_right_working;
    68ce:	80 91 0d 03 	lds	r24, 0x030D
    68d2:	90 91 0e 03 	lds	r25, 0x030E
    68d6:	90 93 f6 02 	sts	0x02F6, r25
    68da:	80 93 f5 02 	sts	0x02F5, r24

		if(pwm_right > 0) {
    68de:	18 16       	cp	r1, r24
    68e0:	19 06       	cpc	r1, r25
    68e2:	0c f0       	brlt	.+2      	; 0x68e6 <handleMotorsWithSpeedController+0x450>
    68e4:	95 c0       	rjmp	.+298    	; 0x6a10 <handleMotorsWithSpeedController+0x57a>
			OCR3A = (unsigned int)pwm_right;
    68e6:	90 93 99 00 	sts	0x0099, r25
    68ea:	80 93 98 00 	sts	0x0098, r24
		} else {
			OCR3A = 0;
			OCR3B = 0;
		}

		computeOdometry++;
    68ee:	80 91 a1 04 	lds	r24, 0x04A1
    68f2:	8f 5f       	subi	r24, 0xFF	; 255
    68f4:	80 93 a1 04 	sts	0x04A1, r24
    68f8:	ad ce       	rjmp	.-678    	; 0x6654 <handleMotorsWithSpeedController+0x1be>
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_BW_SC);
		}
	}

	if(obstacleAvoidanceEnabled) {
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
    68fa:	8f e0       	ldi	r24, 0x0F	; 15
    68fc:	93 e0       	ldi	r25, 0x03	; 3
    68fe:	6d e0       	ldi	r22, 0x0D	; 13
    6900:	73 e0       	ldi	r23, 0x03	; 3
    6902:	0e 94 80 38 	call	0x7100	; 0x7100 <obstacleAvoidance>
    6906:	80 91 0f 03 	lds	r24, 0x030F
    690a:	90 91 10 03 	lds	r25, 0x0310
    690e:	f7 cd       	rjmp	.-1042   	; 0x64fe <handleMotorsWithSpeedController+0x68>
}

void handleMotorsWithSpeedController() {

	if(calibrateOdomFlag==1) {
		pwm_right_working = pwm_intermediate_right_desired;
    6910:	80 91 fd 02 	lds	r24, 0x02FD
    6914:	90 91 fe 02 	lds	r25, 0x02FE
    6918:	90 93 0e 03 	sts	0x030E, r25
    691c:	80 93 0d 03 	sts	0x030D, r24
		pwm_left_working = pwm_intermediate_left_desired;
    6920:	80 91 ff 02 	lds	r24, 0x02FF
    6924:	90 91 00 03 	lds	r25, 0x0300
    6928:	90 93 10 03 	sts	0x0310, r25
    692c:	80 93 0f 03 	sts	0x030F, r24
    6930:	e1 cd       	rjmp	.-1086   	; 0x64f4 <handleMotorsWithSpeedController+0x5e>

		deltaDist = ((rightDist-rightDistPrev)+(leftDist-leftDistPrev))/2.0;

		if(robotPosition == HORIZONTAL_POS) {
			//thetaOld = (rightMotSteps - leftMotSteps)/WHEEL_DIST;	// radians
			theta = (rightDist-leftDist)/WHEEL_DIST;
    6932:	c4 01       	movw	r24, r8
    6934:	b3 01       	movw	r22, r6
    6936:	a2 01       	movw	r20, r4
    6938:	91 01       	movw	r18, r2
    693a:	0e 94 85 48 	call	0x910a	; 0x910a <__subsf3>
    693e:	20 e0       	ldi	r18, 0x00	; 0
    6940:	30 e0       	ldi	r19, 0x00	; 0
    6942:	4e e1       	ldi	r20, 0x1E	; 30
    6944:	52 e4       	ldi	r21, 0x42	; 66
    6946:	0e 94 53 49 	call	0x92a6	; 0x92a6 <__divsf3>
    694a:	f6 2e       	mov	r15, r22
    694c:	07 2f       	mov	r16, r23
    694e:	18 2f       	mov	r17, r24
    6950:	e9 2e       	mov	r14, r25
    6952:	da ce       	rjmp	.-588    	; 0x6708 <handleMotorsWithSpeedController+0x272>
		}
*/

		if(robotPosition == HORIZONTAL_POS) {
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_right(&pwm_right_working);
    6954:	8d e0       	ldi	r24, 0x0D	; 13
    6956:	93 e0       	ldi	r25, 0x03	; 3
    6958:	0e 94 07 19 	call	0x320e	; 0x320e <start_horizontal_speed_control_right>
    695c:	b8 cf       	rjmp	.-144    	; 0x68ce <handleMotorsWithSpeedController+0x438>
		last_left_vel = left_vel_sum>>2;
		compute_left_vel = 0;
		left_vel_sum = 0;
		
		if(calibrateOdomFlag==1) {
			leftSpeedSumOdom += last_left_vel;
    695e:	44 27       	eor	r20, r20
    6960:	37 fd       	sbrc	r19, 7
    6962:	40 95       	com	r20
    6964:	54 2f       	mov	r21, r20
    6966:	80 91 a6 04 	lds	r24, 0x04A6
    696a:	90 91 a7 04 	lds	r25, 0x04A7
    696e:	a0 91 a8 04 	lds	r26, 0x04A8
    6972:	b0 91 a9 04 	lds	r27, 0x04A9
    6976:	82 0f       	add	r24, r18
    6978:	93 1f       	adc	r25, r19
    697a:	a4 1f       	adc	r26, r20
    697c:	b5 1f       	adc	r27, r21
    697e:	80 93 a6 04 	sts	0x04A6, r24
    6982:	90 93 a7 04 	sts	0x04A7, r25
    6986:	a0 93 a8 04 	sts	0x04A8, r26
    698a:	b0 93 a9 04 	sts	0x04A9, r27
			leftSumCount++;
    698e:	80 91 ae 04 	lds	r24, 0x04AE
    6992:	90 91 af 04 	lds	r25, 0x04AF
    6996:	01 96       	adiw	r24, 0x01	; 1
    6998:	90 93 af 04 	sts	0x04AF, r25
    699c:	80 93 ae 04 	sts	0x04AE, r24
    69a0:	d6 cd       	rjmp	.-1108   	; 0x654e <handleMotorsWithSpeedController+0xb8>
		}

*/
		if(robotPosition == HORIZONTAL_POS) {
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_left(&pwm_left_working);
    69a2:	8f e0       	ldi	r24, 0x0F	; 15
    69a4:	93 e0       	ldi	r25, 0x03	; 3
    69a6:	0e 94 4e 1a 	call	0x349c	; 0x349c <start_horizontal_speed_control_left>
    69aa:	38 ce       	rjmp	.-912    	; 0x661c <handleMotorsWithSpeedController+0x186>
		last_right_vel = right_vel_sum>>2;
		compute_right_vel = 0;
		right_vel_sum = 0;

		if(calibrateOdomFlag==1) {
			rightSpeedSumOdom += last_right_vel;
    69ac:	44 27       	eor	r20, r20
    69ae:	37 fd       	sbrc	r19, 7
    69b0:	40 95       	com	r20
    69b2:	54 2f       	mov	r21, r20
    69b4:	80 91 aa 04 	lds	r24, 0x04AA
    69b8:	90 91 ab 04 	lds	r25, 0x04AB
    69bc:	a0 91 ac 04 	lds	r26, 0x04AC
    69c0:	b0 91 ad 04 	lds	r27, 0x04AD
    69c4:	82 0f       	add	r24, r18
    69c6:	93 1f       	adc	r25, r19
    69c8:	a4 1f       	adc	r26, r20
    69ca:	b5 1f       	adc	r27, r21
    69cc:	80 93 aa 04 	sts	0x04AA, r24
    69d0:	90 93 ab 04 	sts	0x04AB, r25
    69d4:	a0 93 ac 04 	sts	0x04AC, r26
    69d8:	b0 93 ad 04 	sts	0x04AD, r27
			rightSumCount++;
    69dc:	80 91 b0 04 	lds	r24, 0x04B0
    69e0:	90 91 b1 04 	lds	r25, 0x04B1
    69e4:	01 96       	adiw	r24, 0x01	; 1
    69e6:	90 93 b1 04 	sts	0x04B1, r25
    69ea:	80 93 b0 04 	sts	0x04B0, r24
    69ee:	08 cf       	rjmp	.-496    	; 0x6800 <handleMotorsWithSpeedController+0x36a>
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_BW_SC);
		}
		if(pwm_intermediate_left_desired >= 0) {		// pwm in the range -127..127
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_FW_SC);
		} else {
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_BW_SC);
    69f0:	62 e0       	ldi	r22, 0x02	; 2
    69f2:	0e 94 2d 2a 	call	0x545a	; 0x545a <getInputFromSpeed>
    69f6:	90 93 10 03 	sts	0x0310, r25
    69fa:	80 93 0f 03 	sts	0x030F, r24
    69fe:	7a cd       	rjmp	.-1292   	; 0x64f4 <handleMotorsWithSpeedController+0x5e>
		pwm_left_working = pwm_intermediate_left_desired;
	} else {
		if(pwm_intermediate_right_desired >= 0) {		// pwm in the range -127..127
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_FW_SC);
		} else {
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_BW_SC);
    6a00:	63 e0       	ldi	r22, 0x03	; 3
    6a02:	0e 94 2d 2a 	call	0x545a	; 0x545a <getInputFromSpeed>
    6a06:	90 93 0e 03 	sts	0x030E, r25
    6a0a:	80 93 0d 03 	sts	0x030D, r24
    6a0e:	65 cd       	rjmp	.-1334   	; 0x64da <handleMotorsWithSpeedController+0x44>

		pwm_right = pwm_right_working;

		if(pwm_right > 0) {
			OCR3A = (unsigned int)pwm_right;
		} else if(pwm_right < 0) {
    6a10:	00 97       	sbiw	r24, 0x00	; 0
    6a12:	a1 f4       	brne	.+40     	; 0x6a3c <handleMotorsWithSpeedController+0x5a6>
			OCR3B = (unsigned int)(-pwm_right);
		} else {
			OCR3A = 0;
    6a14:	10 92 99 00 	sts	0x0099, r1
    6a18:	10 92 98 00 	sts	0x0098, r1
			OCR3B = 0;
    6a1c:	10 92 9b 00 	sts	0x009B, r1
    6a20:	10 92 9a 00 	sts	0x009A, r1
    6a24:	64 cf       	rjmp	.-312    	; 0x68ee <handleMotorsWithSpeedController+0x458>

		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
    6a26:	00 97       	sbiw	r24, 0x00	; 0
    6a28:	89 f4       	brne	.+34     	; 0x6a4c <handleMotorsWithSpeedController+0x5b6>
			OCR4B =(unsigned int)( -pwm_left);
		} else {
			OCR4A = 0;
    6a2a:	10 92 a9 00 	sts	0x00A9, r1
    6a2e:	10 92 a8 00 	sts	0x00A8, r1
			OCR4B = 0;
    6a32:	10 92 ab 00 	sts	0x00AB, r1
    6a36:	10 92 aa 00 	sts	0x00AA, r1
    6a3a:	00 ce       	rjmp	.-1024   	; 0x663c <handleMotorsWithSpeedController+0x1a6>
		pwm_right = pwm_right_working;

		if(pwm_right > 0) {
			OCR3A = (unsigned int)pwm_right;
		} else if(pwm_right < 0) {
			OCR3B = (unsigned int)(-pwm_right);
    6a3c:	90 95       	com	r25
    6a3e:	81 95       	neg	r24
    6a40:	9f 4f       	sbci	r25, 0xFF	; 255
    6a42:	90 93 9b 00 	sts	0x009B, r25
    6a46:	80 93 9a 00 	sts	0x009A, r24
    6a4a:	51 cf       	rjmp	.-350    	; 0x68ee <handleMotorsWithSpeedController+0x458>
		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
			OCR4B =(unsigned int)( -pwm_left);
    6a4c:	90 95       	com	r25
    6a4e:	81 95       	neg	r24
    6a50:	9f 4f       	sbci	r25, 0xFF	; 255
    6a52:	90 93 ab 00 	sts	0x00AB, r25
    6a56:	80 93 aa 00 	sts	0x00AA, r24
    6a5a:	f0 cd       	rjmp	.-1056   	; 0x663c <handleMotorsWithSpeedController+0x1a6>

00006a5c <writeDefaultCalibration>:
		speedLeftFromEnc = -speedLeftFromEnc;
    }
    
}

void writeDefaultCalibration() {
    6a5c:	2f 92       	push	r2
    6a5e:	3f 92       	push	r3
    6a60:	4f 92       	push	r4
    6a62:	5f 92       	push	r5
    6a64:	6f 92       	push	r6
    6a66:	7f 92       	push	r7
    6a68:	8f 92       	push	r8
    6a6a:	9f 92       	push	r9
    6a6c:	af 92       	push	r10
    6a6e:	bf 92       	push	r11
    6a70:	cf 92       	push	r12
    6a72:	df 92       	push	r13
    6a74:	ef 92       	push	r14
    6a76:	ff 92       	push	r15
    6a78:	0f 93       	push	r16
    6a7a:	1f 93       	push	r17
    6a7c:	cf 93       	push	r28
    6a7e:	df 93       	push	r29
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    	calibration[i][0] = i+1;
	}
    // the following values are taken from a field test
    // forward left, speed control enabled
    calibration[0][0] = 20;		// measured speed with back EMF (adc 0..1023)
    6a80:	a4 e1       	ldi	r26, 0x14	; 20
    6a82:	b0 e0       	ldi	r27, 0x00	; 0
    6a84:	b0 93 0a 08 	sts	0x080A, r27
    6a88:	a0 93 09 08 	sts	0x0809, r26
    calibration[1][0] = 40;
    6a8c:	88 e2       	ldi	r24, 0x28	; 40
    6a8e:	90 e0       	ldi	r25, 0x00	; 0
    6a90:	90 93 1a 08 	sts	0x081A, r25
    6a94:	80 93 19 08 	sts	0x0819, r24
    calibration[2][0] = 59;
    6a98:	6b e3       	ldi	r22, 0x3B	; 59
    6a9a:	70 e0       	ldi	r23, 0x00	; 0
    6a9c:	70 93 2a 08 	sts	0x082A, r23
    6aa0:	60 93 29 08 	sts	0x0829, r22
    calibration[3][0] = 79;
    6aa4:	0f e4       	ldi	r16, 0x4F	; 79
    6aa6:	10 e0       	ldi	r17, 0x00	; 0
    6aa8:	10 93 3a 08 	sts	0x083A, r17
    6aac:	00 93 39 08 	sts	0x0839, r16
    calibration[4][0] = 100;
    6ab0:	84 e6       	ldi	r24, 0x64	; 100
    6ab2:	90 e0       	ldi	r25, 0x00	; 0
    6ab4:	90 93 4a 08 	sts	0x084A, r25
    6ab8:	80 93 49 08 	sts	0x0849, r24
    calibration[5][0] = 120;
    6abc:	f8 e7       	ldi	r31, 0x78	; 120
    6abe:	af 2e       	mov	r10, r31
    6ac0:	b1 2c       	mov	r11, r1
    6ac2:	b0 92 5a 08 	sts	0x085A, r11
    6ac6:	a0 92 59 08 	sts	0x0859, r10
    calibration[6][0] = 139;
    6aca:	8b e8       	ldi	r24, 0x8B	; 139
    6acc:	90 e0       	ldi	r25, 0x00	; 0
    6ace:	90 93 6a 08 	sts	0x086A, r25
    6ad2:	80 93 69 08 	sts	0x0869, r24
    calibration[7][0] = 159;
    6ad6:	2f e9       	ldi	r18, 0x9F	; 159
    6ad8:	30 e0       	ldi	r19, 0x00	; 0
    6ada:	30 93 7a 08 	sts	0x087A, r19
    6ade:	20 93 79 08 	sts	0x0879, r18
	calibration[8][0] = 180;
    6ae2:	44 eb       	ldi	r20, 0xB4	; 180
    6ae4:	50 e0       	ldi	r21, 0x00	; 0
    6ae6:	50 93 8a 08 	sts	0x088A, r21
    6aea:	40 93 89 08 	sts	0x0889, r20
    calibration[0][1] = 19;    	// real speed measured in mm/s
    6aee:	63 e1       	ldi	r22, 0x13	; 19
    6af0:	70 e0       	ldi	r23, 0x00	; 0
    6af2:	70 93 0c 08 	sts	0x080C, r23
    6af6:	60 93 0b 08 	sts	0x080B, r22
    calibration[1][1] = 47;
    6afa:	2f e2       	ldi	r18, 0x2F	; 47
    6afc:	30 e0       	ldi	r19, 0x00	; 0
    6afe:	30 93 1c 08 	sts	0x081C, r19
    6b02:	20 93 1b 08 	sts	0x081B, r18
    calibration[2][1] = 72;
    6b06:	28 e4       	ldi	r18, 0x48	; 72
    6b08:	30 e0       	ldi	r19, 0x00	; 0
    6b0a:	30 93 2c 08 	sts	0x082C, r19
    6b0e:	20 93 2b 08 	sts	0x082B, r18
    calibration[3][1] = 91;
    6b12:	2b e5       	ldi	r18, 0x5B	; 91
    6b14:	30 e0       	ldi	r19, 0x00	; 0
    6b16:	30 93 3c 08 	sts	0x083C, r19
    6b1a:	20 93 3b 08 	sts	0x083B, r18
    calibration[4][1] = 109;
    6b1e:	2d e6       	ldi	r18, 0x6D	; 109
    6b20:	30 e0       	ldi	r19, 0x00	; 0
    6b22:	30 93 4c 08 	sts	0x084C, r19
    6b26:	20 93 4b 08 	sts	0x084B, r18
    calibration[5][1] = 125;
    6b2a:	ed e7       	ldi	r30, 0x7D	; 125
    6b2c:	6e 2e       	mov	r6, r30
    6b2e:	71 2c       	mov	r7, r1
    6b30:	70 92 5c 08 	sts	0x085C, r7
    6b34:	60 92 5b 08 	sts	0x085B, r6
    calibration[6][1] = 143;
    6b38:	2f e8       	ldi	r18, 0x8F	; 143
    6b3a:	30 e0       	ldi	r19, 0x00	; 0
    6b3c:	30 93 6c 08 	sts	0x086C, r19
    6b40:	20 93 6b 08 	sts	0x086B, r18
    calibration[7][1] = 160;
    6b44:	20 ea       	ldi	r18, 0xA0	; 160
    6b46:	30 e0       	ldi	r19, 0x00	; 0
    6b48:	30 93 7c 08 	sts	0x087C, r19
    6b4c:	20 93 7b 08 	sts	0x087B, r18
	calibration[8][1] = 174;
    6b50:	ee ea       	ldi	r30, 0xAE	; 174
    6b52:	f0 e0       	ldi	r31, 0x00	; 0
    6b54:	f0 93 8c 08 	sts	0x088C, r31
    6b58:	e0 93 8b 08 	sts	0x088B, r30
    // forward right, speed control enabled
    calibration[0][2] = 19;		// measured speed with back EMF (adc 0..1023)
    6b5c:	70 93 0e 08 	sts	0x080E, r23
    6b60:	60 93 0d 08 	sts	0x080D, r22
    calibration[1][2] = 39;
    6b64:	e7 e2       	ldi	r30, 0x27	; 39
    6b66:	f0 e0       	ldi	r31, 0x00	; 0
    6b68:	f0 93 1e 08 	sts	0x081E, r31
    6b6c:	e0 93 1d 08 	sts	0x081D, r30
    calibration[2][2] = 60;
    6b70:	cc e3       	ldi	r28, 0x3C	; 60
    6b72:	d0 e0       	ldi	r29, 0x00	; 0
    6b74:	d0 93 2e 08 	sts	0x082E, r29
    6b78:	c0 93 2d 08 	sts	0x082D, r28
    calibration[3][2] = 80;
    6b7c:	60 e5       	ldi	r22, 0x50	; 80
    6b7e:	70 e0       	ldi	r23, 0x00	; 0
    6b80:	70 93 3e 08 	sts	0x083E, r23
    6b84:	60 93 3d 08 	sts	0x083D, r22
    calibration[4][2] = 99;
    6b88:	63 e6       	ldi	r22, 0x63	; 99
    6b8a:	e6 2e       	mov	r14, r22
    6b8c:	f1 2c       	mov	r15, r1
    6b8e:	f0 92 4e 08 	sts	0x084E, r15
    6b92:	e0 92 4d 08 	sts	0x084D, r14
    calibration[5][2] = 119;
    6b96:	67 e7       	ldi	r22, 0x77	; 119
    6b98:	70 e0       	ldi	r23, 0x00	; 0
    6b9a:	70 93 5e 08 	sts	0x085E, r23
    6b9e:	60 93 5d 08 	sts	0x085D, r22
    calibration[6][2] = 140;
    6ba2:	0f 2e       	mov	r0, r31
    6ba4:	fc e8       	ldi	r31, 0x8C	; 140
    6ba6:	cf 2e       	mov	r12, r31
    6ba8:	dd 24       	eor	r13, r13
    6baa:	f0 2d       	mov	r31, r0
    6bac:	d0 92 6e 08 	sts	0x086E, r13
    6bb0:	c0 92 6d 08 	sts	0x086D, r12
    calibration[7][2] = 160;
    6bb4:	30 93 7e 08 	sts	0x087E, r19
    6bb8:	20 93 7d 08 	sts	0x087D, r18
	calibration[8][2] = 180;
    6bbc:	50 93 8e 08 	sts	0x088E, r21
    6bc0:	40 93 8d 08 	sts	0x088D, r20
    calibration[0][3] = 23;    	// real speed measured in mm/s
    6bc4:	0f 2e       	mov	r0, r31
    6bc6:	f7 e1       	ldi	r31, 0x17	; 23
    6bc8:	8f 2e       	mov	r8, r31
    6bca:	99 24       	eor	r9, r9
    6bcc:	f0 2d       	mov	r31, r0
    6bce:	90 92 10 08 	sts	0x0810, r9
    6bd2:	80 92 0f 08 	sts	0x080F, r8
    calibration[1][3] = 46;
    6bd6:	0f 2e       	mov	r0, r31
    6bd8:	fe e2       	ldi	r31, 0x2E	; 46
    6bda:	4f 2e       	mov	r4, r31
    6bdc:	55 24       	eor	r5, r5
    6bde:	f0 2d       	mov	r31, r0
    6be0:	50 92 20 08 	sts	0x0820, r5
    6be4:	40 92 1f 08 	sts	0x081F, r4
    calibration[2][3] = 64;
    6be8:	88 24       	eor	r8, r8
    6bea:	99 24       	eor	r9, r9
    6bec:	68 94       	set
    6bee:	86 f8       	bld	r8, 6
    6bf0:	90 92 30 08 	sts	0x0830, r9
    6bf4:	80 92 2f 08 	sts	0x082F, r8
    calibration[3][3] = 81;
    6bf8:	0f 2e       	mov	r0, r31
    6bfa:	f1 e5       	ldi	r31, 0x51	; 81
    6bfc:	2f 2e       	mov	r2, r31
    6bfe:	33 24       	eor	r3, r3
    6c00:	f0 2d       	mov	r31, r0
    6c02:	30 92 40 08 	sts	0x0840, r3
    6c06:	20 92 3f 08 	sts	0x083F, r2
    calibration[4][3] = 97;
    6c0a:	0f 2e       	mov	r0, r31
    6c0c:	f1 e6       	ldi	r31, 0x61	; 97
    6c0e:	8f 2e       	mov	r8, r31
    6c10:	99 24       	eor	r9, r9
    6c12:	f0 2d       	mov	r31, r0
    6c14:	90 92 50 08 	sts	0x0850, r9
    6c18:	80 92 4f 08 	sts	0x084F, r8
    calibration[5][3] = 112;
    6c1c:	0f 2e       	mov	r0, r31
    6c1e:	f0 e7       	ldi	r31, 0x70	; 112
    6c20:	8f 2e       	mov	r8, r31
    6c22:	99 24       	eor	r9, r9
    6c24:	f0 2d       	mov	r31, r0
    6c26:	90 92 60 08 	sts	0x0860, r9
    6c2a:	80 92 5f 08 	sts	0x085F, r8
    calibration[6][3] = 125;
    6c2e:	70 92 70 08 	sts	0x0870, r7
    6c32:	60 92 6f 08 	sts	0x086F, r6
    calibration[7][3] = 139;
    6c36:	90 93 80 08 	sts	0x0880, r25
    6c3a:	80 93 7f 08 	sts	0x087F, r24
	calibration[8][3] = 152;
    6c3e:	0f 2e       	mov	r0, r31
    6c40:	f8 e9       	ldi	r31, 0x98	; 152
    6c42:	8f 2e       	mov	r8, r31
    6c44:	99 24       	eor	r9, r9
    6c46:	f0 2d       	mov	r31, r0
    6c48:	90 92 90 08 	sts	0x0890, r9
    6c4c:	80 92 8f 08 	sts	0x088F, r8
    // backward left, speed control enabled
    calibration[0][4] = 20;		// measured speed with back EMF (adc 0..1023)
    6c50:	b0 93 12 08 	sts	0x0812, r27
    6c54:	a0 93 11 08 	sts	0x0811, r26
    calibration[1][4] = 39;
    6c58:	f0 93 22 08 	sts	0x0822, r31
    6c5c:	e0 93 21 08 	sts	0x0821, r30
    calibration[2][4] = 60;
    6c60:	d0 93 32 08 	sts	0x0832, r29
    6c64:	c0 93 31 08 	sts	0x0831, r28
    calibration[3][4] = 79;
    6c68:	10 93 42 08 	sts	0x0842, r17
    6c6c:	00 93 41 08 	sts	0x0841, r16
    calibration[4][4] = 99;
    6c70:	f0 92 52 08 	sts	0x0852, r15
    6c74:	e0 92 51 08 	sts	0x0851, r14
    calibration[5][4] = 120;
    6c78:	b0 92 62 08 	sts	0x0862, r11
    6c7c:	a0 92 61 08 	sts	0x0861, r10
    calibration[6][4] = 140;
    6c80:	d0 92 72 08 	sts	0x0872, r13
    6c84:	c0 92 71 08 	sts	0x0871, r12
    calibration[7][4] = 160;
    6c88:	30 93 82 08 	sts	0x0882, r19
    6c8c:	20 93 81 08 	sts	0x0881, r18
	calibration[8][4] = 179;
    6c90:	c3 eb       	ldi	r28, 0xB3	; 179
    6c92:	d0 e0       	ldi	r29, 0x00	; 0
    6c94:	d0 93 92 08 	sts	0x0892, r29
    6c98:	c0 93 91 08 	sts	0x0891, r28
    calibration[0][5] = 18;    	// real speed measured in mm/s
    6c9c:	c2 e1       	ldi	r28, 0x12	; 18
    6c9e:	d0 e0       	ldi	r29, 0x00	; 0
    6ca0:	d0 93 14 08 	sts	0x0814, r29
    6ca4:	c0 93 13 08 	sts	0x0813, r28
    calibration[1][5] = 45;
    6ca8:	cd e2       	ldi	r28, 0x2D	; 45
    6caa:	d0 e0       	ldi	r29, 0x00	; 0
    6cac:	d0 93 24 08 	sts	0x0824, r29
    6cb0:	c0 93 23 08 	sts	0x0823, r28
    calibration[2][5] = 68;
    6cb4:	c4 e4       	ldi	r28, 0x44	; 68
    6cb6:	d0 e0       	ldi	r29, 0x00	; 0
    6cb8:	d0 93 34 08 	sts	0x0834, r29
    6cbc:	c0 93 33 08 	sts	0x0833, r28
    calibration[3][5] = 87;
    6cc0:	c7 e5       	ldi	r28, 0x57	; 87
    6cc2:	d0 e0       	ldi	r29, 0x00	; 0
    6cc4:	d0 93 44 08 	sts	0x0844, r29
    6cc8:	c0 93 43 08 	sts	0x0843, r28
    calibration[4][5] = 105;
    6ccc:	c9 e6       	ldi	r28, 0x69	; 105
    6cce:	d0 e0       	ldi	r29, 0x00	; 0
    6cd0:	d0 93 54 08 	sts	0x0854, r29
    6cd4:	c0 93 53 08 	sts	0x0853, r28
    calibration[5][5] = 119;
    6cd8:	70 93 64 08 	sts	0x0864, r23
    6cdc:	60 93 63 08 	sts	0x0863, r22
    calibration[6][5] = 137;
    6ce0:	c9 e8       	ldi	r28, 0x89	; 137
    6ce2:	d0 e0       	ldi	r29, 0x00	; 0
    6ce4:	d0 93 74 08 	sts	0x0874, r29
    6ce8:	c0 93 73 08 	sts	0x0873, r28
    calibration[7][5] = 151;
    6cec:	c7 e9       	ldi	r28, 0x97	; 151
    6cee:	d0 e0       	ldi	r29, 0x00	; 0
    6cf0:	d0 93 84 08 	sts	0x0884, r29
    6cf4:	c0 93 83 08 	sts	0x0883, r28
	calibration[8][5] = 168;
    6cf8:	c8 ea       	ldi	r28, 0xA8	; 168
    6cfa:	d0 e0       	ldi	r29, 0x00	; 0
    6cfc:	d0 93 94 08 	sts	0x0894, r29
    6d00:	c0 93 93 08 	sts	0x0893, r28
    // backward right, speed control enabled
    calibration[0][6] = 20;		// measured speed with back EMF (adc 0..1023)
    6d04:	b0 93 16 08 	sts	0x0816, r27
    6d08:	a0 93 15 08 	sts	0x0815, r26
    calibration[1][6] = 39;
    6d0c:	f0 93 26 08 	sts	0x0826, r31
    6d10:	e0 93 25 08 	sts	0x0825, r30
    calibration[2][6] = 59;
    6d14:	eb e3       	ldi	r30, 0x3B	; 59
    6d16:	f0 e0       	ldi	r31, 0x00	; 0
    6d18:	f0 93 36 08 	sts	0x0836, r31
    6d1c:	e0 93 35 08 	sts	0x0835, r30
    calibration[3][6] = 80;
    6d20:	e0 e5       	ldi	r30, 0x50	; 80
    6d22:	f0 e0       	ldi	r31, 0x00	; 0
    6d24:	f0 93 46 08 	sts	0x0846, r31
    6d28:	e0 93 45 08 	sts	0x0845, r30
    calibration[4][6] = 100;
    6d2c:	e4 e6       	ldi	r30, 0x64	; 100
    6d2e:	f0 e0       	ldi	r31, 0x00	; 0
    6d30:	f0 93 56 08 	sts	0x0856, r31
    6d34:	e0 93 55 08 	sts	0x0855, r30
    calibration[5][6] = 119;
    6d38:	70 93 66 08 	sts	0x0866, r23
    6d3c:	60 93 65 08 	sts	0x0865, r22
    calibration[6][6] = 139;
    6d40:	90 93 76 08 	sts	0x0876, r25
    6d44:	80 93 75 08 	sts	0x0875, r24
    calibration[7][6] = 160;
    6d48:	30 93 86 08 	sts	0x0886, r19
    6d4c:	20 93 85 08 	sts	0x0885, r18
	calibration[8][6] = 180;
    6d50:	50 93 96 08 	sts	0x0896, r21
    6d54:	40 93 95 08 	sts	0x0895, r20
    calibration[0][7] = 22;    	// real speed measured in mm/s
    6d58:	26 e1       	ldi	r18, 0x16	; 22
    6d5a:	30 e0       	ldi	r19, 0x00	; 0
    6d5c:	30 93 18 08 	sts	0x0818, r19
    6d60:	20 93 17 08 	sts	0x0817, r18
    calibration[1][7] = 46;
    6d64:	50 92 28 08 	sts	0x0828, r5
    6d68:	40 92 27 08 	sts	0x0827, r4
    calibration[2][7] = 65;
    6d6c:	21 e4       	ldi	r18, 0x41	; 65
    6d6e:	30 e0       	ldi	r19, 0x00	; 0
    6d70:	30 93 38 08 	sts	0x0838, r19
    6d74:	20 93 37 08 	sts	0x0837, r18
    calibration[3][7] = 81;
    6d78:	30 92 48 08 	sts	0x0848, r3
    6d7c:	20 92 47 08 	sts	0x0847, r2
    calibration[4][7] = 96;
    6d80:	20 e6       	ldi	r18, 0x60	; 96
    6d82:	30 e0       	ldi	r19, 0x00	; 0
    6d84:	30 93 58 08 	sts	0x0858, r19
    6d88:	20 93 57 08 	sts	0x0857, r18
    calibration[5][7] = 111;
    6d8c:	2f e6       	ldi	r18, 0x6F	; 111
    6d8e:	30 e0       	ldi	r19, 0x00	; 0
    6d90:	30 93 68 08 	sts	0x0868, r19
    6d94:	20 93 67 08 	sts	0x0867, r18
    calibration[6][7] = 125;
    6d98:	70 92 78 08 	sts	0x0878, r7
    6d9c:	60 92 77 08 	sts	0x0877, r6
    calibration[7][7] = 139;
    6da0:	90 93 88 08 	sts	0x0888, r25
    6da4:	80 93 87 08 	sts	0x0887, r24
	calibration[8][7] = 153;
    6da8:	89 e9       	ldi	r24, 0x99	; 153
    6daa:	90 e0       	ldi	r25, 0x00	; 0
    6dac:	90 93 98 08 	sts	0x0898, r25
    6db0:	80 93 97 08 	sts	0x0897, r24

    writeCalibrationToFlash();
    6db4:	0e 94 f5 42 	call	0x85ea	; 0x85ea <writeCalibrationToFlash>
}
    6db8:	df 91       	pop	r29
    6dba:	cf 91       	pop	r28
    6dbc:	1f 91       	pop	r17
    6dbe:	0f 91       	pop	r16
    6dc0:	ff 90       	pop	r15
    6dc2:	ef 90       	pop	r14
    6dc4:	df 90       	pop	r13
    6dc6:	cf 90       	pop	r12
    6dc8:	bf 90       	pop	r11
    6dca:	af 90       	pop	r10
    6dcc:	9f 90       	pop	r9
    6dce:	8f 90       	pop	r8
    6dd0:	7f 90       	pop	r7
    6dd2:	6f 90       	pop	r6
    6dd4:	5f 90       	pop	r5
    6dd6:	4f 90       	pop	r4
    6dd8:	3f 90       	pop	r3
    6dda:	2f 90       	pop	r2
    6ddc:	08 95       	ret

00006dde <initCalibration>:

void initCalibration() {

    unsigned int temp=0;
 
 	temp = eeprom_read_word((uint16_t*)CALIB_CHECK_ADDRESS);
    6dde:	8a e6       	ldi	r24, 0x6A	; 106
    6de0:	9f e0       	ldi	r25, 0x0F	; 15
    6de2:	0e 94 8e 4c 	call	0x991c	; 0x991c <__eerd_word_m2560>

    if(temp==0xAA55) {   // valid odometry data saved in flash, read them
    6de6:	2a ea       	ldi	r18, 0xAA	; 170
    6de8:	85 35       	cpi	r24, 0x55	; 85
    6dea:	92 07       	cpc	r25, r18
    6dec:	19 f0       	breq	.+6      	; 0x6df4 <initCalibration+0x16>
        readCalibrationFromFlash();
    } else {
		writeDefaultCalibration();		
    6dee:	0e 94 2e 35 	call	0x6a5c	; 0x6a5c <writeDefaultCalibration>
    6df2:	08 95       	ret
    unsigned int temp=0;
 
 	temp = eeprom_read_word((uint16_t*)CALIB_CHECK_ADDRESS);

    if(temp==0xAA55) {   // valid odometry data saved in flash, read them
        readCalibrationFromFlash();
    6df4:	0e 94 04 43 	call	0x8608	; 0x8608 <readCalibrationFromFlash>
    6df8:	08 95       	ret

00006dfa <__vector_45>:
    }

}

// Motor left
ISR(TIMER4_OVF_vect) {
    6dfa:	1f 92       	push	r1
    6dfc:	0f 92       	push	r0
    6dfe:	0f b6       	in	r0, 0x3f	; 63
    6e00:	0f 92       	push	r0
    6e02:	11 24       	eor	r1, r1
    6e04:	8f 93       	push	r24
    6e06:	9f 93       	push	r25

//	LED_GREEN_ON;

	if(cliffDetectedFlag) {
    6e08:	80 91 6c 04 	lds	r24, 0x046C
    6e0c:	88 23       	and	r24, r24
    6e0e:	61 f0       	breq	.+24     	; 0x6e28 <__vector_45+0x2e>
		pwm_left = 0;
    6e10:	10 92 f8 02 	sts	0x02F8, r1
    6e14:	10 92 f7 02 	sts	0x02F7, r1
		OCR4A = 0;
    6e18:	10 92 a9 00 	sts	0x00A9, r1
    6e1c:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    6e20:	10 92 ab 00 	sts	0x00AB, r1
    6e24:	10 92 aa 00 	sts	0x00AA, r1
	}

	left_current_avg = 0;
    6e28:	10 92 e2 02 	sts	0x02E2, r1
    6e2c:	10 92 e1 02 	sts	0x02E1, r1

	// set pins mode based on controller output
	if(pwm_left == 0) {
    6e30:	80 91 f7 02 	lds	r24, 0x02F7
    6e34:	90 91 f8 02 	lds	r25, 0x02F8
    6e38:	00 97       	sbiw	r24, 0x00	; 0
    6e3a:	41 f5       	brne	.+80     	; 0x6e8c <__vector_45+0x92>


		//leftMotorPhase = NO_PHASE;
		//compute_left_vel = 1;

		if(pwm_left_desired_to_control >= 0) {
    6e3c:	80 91 eb 02 	lds	r24, 0x02EB
    6e40:	90 91 ec 02 	lds	r25, 0x02EC
    6e44:	97 fd       	sbrc	r25, 7
    6e46:	69 c0       	rjmp	.+210    	; 0x6f1a <__vector_45+0x120>
			leftMotorPhase = PASSIVE_PHASE;
    6e48:	81 e0       	ldi	r24, 0x01	; 1
    6e4a:	80 93 28 02 	sts	0x0228, r24
			currentMotLeftChannel = 14;
    6e4e:	8e e0       	ldi	r24, 0x0E	; 14
    6e50:	80 93 25 02 	sts	0x0225, r24
		} else {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 15;
		}
		firstSampleLeft = 1;
    6e54:	81 e0       	ldi	r24, 0x01	; 1
    6e56:	80 93 0a 02 	sts	0x020A, r24

		// select channel 15 to sample left current
		//currentMotLeftChannel = 15;
		TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    6e5a:	80 91 a0 00 	lds	r24, 0x00A0
    6e5e:	8f 75       	andi	r24, 0x5F	; 95
    6e60:	80 93 a0 00 	sts	0x00A0, r24
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    6e64:	80 91 02 01 	lds	r24, 0x0102
    6e68:	87 7e       	andi	r24, 0xE7	; 231
    6e6a:	80 93 02 01 	sts	0x0102, r24
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
    6e6e:	80 91 72 00 	lds	r24, 0x0072
    6e72:	89 7f       	andi	r24, 0xF9	; 249
    6e74:	80 93 72 00 	sts	0x0072, r24
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
    6e78:	89 b3       	in	r24, 0x19	; 25
    6e7a:	86 60       	ori	r24, 0x06	; 6
    6e7c:	89 bb       	out	0x19, r24	; 25
	}
*/

//	LED_GREEN_OFF;

}
    6e7e:	9f 91       	pop	r25
    6e80:	8f 91       	pop	r24
    6e82:	0f 90       	pop	r0
    6e84:	0f be       	out	0x3f, r0	; 63
    6e86:	0f 90       	pop	r0
    6e88:	1f 90       	pop	r1
    6e8a:	18 95       	reti
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
	} else if(pwm_left > 0) {   		// move forward
    6e8c:	18 16       	cp	r1, r24
    6e8e:	19 06       	cpc	r1, r25
    6e90:	2c f5       	brge	.+74     	; 0x6edc <__vector_45+0xe2>
		leftMotorPhase = ACTIVE_PHASE;
    6e92:	10 92 28 02 	sts	0x0228, r1
		// select channel 15 to sample left current
		currentMotLeftChannel = 15;
    6e96:	8f e0       	ldi	r24, 0x0F	; 15
    6e98:	80 93 25 02 	sts	0x0225, r24
		TCCR4A  &= ~(1 << COM4B1);		// disable OCB
    6e9c:	80 91 a0 00 	lds	r24, 0x00A0
    6ea0:	8f 7d       	andi	r24, 0xDF	; 223
    6ea2:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
    6ea6:	80 91 72 00 	lds	r24, 0x0072
    6eaa:	8b 7f       	andi	r24, 0xFB	; 251
    6eac:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 4);				// output to 0
    6eb0:	80 91 02 01 	lds	r24, 0x0102
    6eb4:	8f 7e       	andi	r24, 0xEF	; 239
    6eb6:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4A1);		// enable OCA
    6eba:	80 91 a0 00 	lds	r24, 0x00A0
    6ebe:	80 68       	ori	r24, 0x80	; 128
    6ec0:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
    6ec4:	80 91 72 00 	lds	r24, 0x0072
    6ec8:	82 60       	ori	r24, 0x02	; 2
    6eca:	80 93 72 00 	sts	0x0072, r24
	}
*/

//	LED_GREEN_OFF;

}
    6ece:	9f 91       	pop	r25
    6ed0:	8f 91       	pop	r24
    6ed2:	0f 90       	pop	r0
    6ed4:	0f be       	out	0x3f, r0	; 63
    6ed6:	0f 90       	pop	r0
    6ed8:	1f 90       	pop	r1
    6eda:	18 95       	reti
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
		PORTH &= ~(1 << 4);				// output to 0
		TCCR4A |= (1 << COM4A1);		// enable OCA
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
	} else if(pwm_left < 0) {      		// move backward
		leftMotorPhase = ACTIVE_PHASE;
    6edc:	10 92 28 02 	sts	0x0228, r1
		// select channel 14 to sample left current
		currentMotLeftChannel = 14;
    6ee0:	8e e0       	ldi	r24, 0x0E	; 14
    6ee2:	80 93 25 02 	sts	0x0225, r24
		TCCR4A  &= ~(1 << COM4A1);		// disable OCA
    6ee6:	80 91 a0 00 	lds	r24, 0x00A0
    6eea:	8f 77       	andi	r24, 0x7F	; 127
    6eec:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4A);		// disable OCA interrupt
    6ef0:	80 91 72 00 	lds	r24, 0x0072
    6ef4:	8d 7f       	andi	r24, 0xFD	; 253
    6ef6:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 3);				// output to 0
    6efa:	80 91 02 01 	lds	r24, 0x0102
    6efe:	87 7f       	andi	r24, 0xF7	; 247
    6f00:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4B1);		// enable OCB
    6f04:	80 91 a0 00 	lds	r24, 0x00A0
    6f08:	80 62       	ori	r24, 0x20	; 32
    6f0a:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
    6f0e:	80 91 72 00 	lds	r24, 0x0072
    6f12:	84 60       	ori	r24, 0x04	; 4
    6f14:	80 93 72 00 	sts	0x0072, r24
    6f18:	b2 cf       	rjmp	.-156    	; 0x6e7e <__vector_45+0x84>

		if(pwm_left_desired_to_control >= 0) {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 14;
		} else {
			leftMotorPhase = PASSIVE_PHASE;
    6f1a:	81 e0       	ldi	r24, 0x01	; 1
    6f1c:	80 93 28 02 	sts	0x0228, r24
			currentMotLeftChannel = 15;
    6f20:	8f e0       	ldi	r24, 0x0F	; 15
    6f22:	80 93 25 02 	sts	0x0225, r24
    6f26:	96 cf       	rjmp	.-212    	; 0x6e54 <__vector_45+0x5a>

00006f28 <__vector_42>:
//	LED_GREEN_OFF;

}

// motor left forward
ISR(TIMER4_COMPA_vect) {
    6f28:	1f 92       	push	r1
    6f2a:	0f 92       	push	r0
    6f2c:	0f b6       	in	r0, 0x3f	; 63
    6f2e:	0f 92       	push	r0
    6f30:	11 24       	eor	r1, r1
    6f32:	8f 93       	push	r24
    6f34:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    6f36:	81 e0       	ldi	r24, 0x01	; 1
    6f38:	80 93 28 02 	sts	0x0228, r24
	// select channel 14 to sample the left velocity
	currentMotLeftChannel = 14;
    6f3c:	9e e0       	ldi	r25, 0x0E	; 14
    6f3e:	90 93 25 02 	sts	0x0225, r25

	firstSampleLeft = 1;
    6f42:	80 93 0a 02 	sts	0x020A, r24

//	LED_GREEN_OFF;

}
    6f46:	9f 91       	pop	r25
    6f48:	8f 91       	pop	r24
    6f4a:	0f 90       	pop	r0
    6f4c:	0f be       	out	0x3f, r0	; 63
    6f4e:	0f 90       	pop	r0
    6f50:	1f 90       	pop	r1
    6f52:	18 95       	reti

00006f54 <__vector_43>:

// motor left backward
ISR(TIMER4_COMPB_vect) {
    6f54:	1f 92       	push	r1
    6f56:	0f 92       	push	r0
    6f58:	0f b6       	in	r0, 0x3f	; 63
    6f5a:	0f 92       	push	r0
    6f5c:	11 24       	eor	r1, r1
    6f5e:	8f 93       	push	r24
    6f60:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    6f62:	81 e0       	ldi	r24, 0x01	; 1
    6f64:	80 93 28 02 	sts	0x0228, r24
	// select channel 15 to sample the left velocity
	currentMotLeftChannel = 15;
    6f68:	9f e0       	ldi	r25, 0x0F	; 15
    6f6a:	90 93 25 02 	sts	0x0225, r25

	firstSampleLeft = 1;
    6f6e:	80 93 0a 02 	sts	0x020A, r24

//	LED_GREEN_OFF;

}
    6f72:	9f 91       	pop	r25
    6f74:	8f 91       	pop	r24
    6f76:	0f 90       	pop	r0
    6f78:	0f be       	out	0x3f, r0	; 63
    6f7a:	0f 90       	pop	r0
    6f7c:	1f 90       	pop	r1
    6f7e:	18 95       	reti

00006f80 <__vector_35>:

// Motor right
ISR(TIMER3_OVF_vect) {
    6f80:	1f 92       	push	r1
    6f82:	0f 92       	push	r0
    6f84:	0f b6       	in	r0, 0x3f	; 63
    6f86:	0f 92       	push	r0
    6f88:	11 24       	eor	r1, r1
    6f8a:	8f 93       	push	r24
    6f8c:	9f 93       	push	r25

//	LED_GREEN_ON;

  	// PORTB ^= (1 << 7); // Toggle the LED

	if(cliffDetectedFlag) {
    6f8e:	80 91 6c 04 	lds	r24, 0x046C
    6f92:	88 23       	and	r24, r24
    6f94:	61 f0       	breq	.+24     	; 0x6fae <__vector_35+0x2e>
		pwm_right = 0;
    6f96:	10 92 f6 02 	sts	0x02F6, r1
    6f9a:	10 92 f5 02 	sts	0x02F5, r1
		OCR3A = 0;
    6f9e:	10 92 99 00 	sts	0x0099, r1
    6fa2:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    6fa6:	10 92 9b 00 	sts	0x009B, r1
    6faa:	10 92 9a 00 	sts	0x009A, r1
	}

	right_current_avg = 0;
    6fae:	10 92 e4 02 	sts	0x02E4, r1
    6fb2:	10 92 e3 02 	sts	0x02E3, r1


	if(pwm_right == 0) {
    6fb6:	80 91 f5 02 	lds	r24, 0x02F5
    6fba:	90 91 f6 02 	lds	r25, 0x02F6
    6fbe:	00 97       	sbiw	r24, 0x00	; 0
    6fc0:	31 f5       	brne	.+76     	; 0x700e <__vector_35+0x8e>
		//firstSampleRight = 0;

		//rightMotorPhase = NO_PHASE;
		//compute_right_vel = 1;

		if(pwm_right_desired_to_control >= 0) {
    6fc2:	80 91 e9 02 	lds	r24, 0x02E9
    6fc6:	90 91 ea 02 	lds	r25, 0x02EA
    6fca:	97 fd       	sbrc	r25, 7
    6fcc:	5f c0       	rjmp	.+190    	; 0x708c <__vector_35+0x10c>
			rightMotorPhase = PASSIVE_PHASE;
    6fce:	81 e0       	ldi	r24, 0x01	; 1
    6fd0:	80 93 27 02 	sts	0x0227, r24
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
    6fd4:	8c e0       	ldi	r24, 0x0C	; 12
    6fd6:	80 93 26 02 	sts	0x0226, r24
		} else {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
		}
		firstSampleRight = 1;
    6fda:	81 e0       	ldi	r24, 0x01	; 1
    6fdc:	80 93 09 02 	sts	0x0209, r24

		// select channel 13 to sample left current
		//currentMotRightChannel = 13;
		TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    6fe0:	80 91 90 00 	lds	r24, 0x0090
    6fe4:	8f 75       	andi	r24, 0x5F	; 95
    6fe6:	80 93 90 00 	sts	0x0090, r24
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    6fea:	8e b1       	in	r24, 0x0e	; 14
    6fec:	87 7e       	andi	r24, 0xE7	; 231
    6fee:	8e b9       	out	0x0e, r24	; 14
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
    6ff0:	80 91 71 00 	lds	r24, 0x0071
    6ff4:	89 7f       	andi	r24, 0xF9	; 249
    6ff6:	80 93 71 00 	sts	0x0071, r24
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
    6ffa:	88 b3       	in	r24, 0x18	; 24
    6ffc:	86 60       	ori	r24, 0x06	; 6
    6ffe:	88 bb       	out	0x18, r24	; 24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    7000:	9f 91       	pop	r25
    7002:	8f 91       	pop	r24
    7004:	0f 90       	pop	r0
    7006:	0f be       	out	0x3f, r0	; 63
    7008:	0f 90       	pop	r0
    700a:	1f 90       	pop	r1
    700c:	18 95       	reti
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
	}else if(pwm_right > 0) {   		// move forward
    700e:	18 16       	cp	r1, r24
    7010:	19 06       	cpc	r1, r25
    7012:	0c f5       	brge	.+66     	; 0x7056 <__vector_35+0xd6>
		rightMotorPhase = ACTIVE_PHASE;
    7014:	10 92 27 02 	sts	0x0227, r1
		// select channel 13 to sample left current
		currentMotRightChannel = 13;
    7018:	8d e0       	ldi	r24, 0x0D	; 13
    701a:	80 93 26 02 	sts	0x0226, r24
		TCCR3A  &= ~(1 << COM3B1);		// disable OCB
    701e:	80 91 90 00 	lds	r24, 0x0090
    7022:	8f 7d       	andi	r24, 0xDF	; 223
    7024:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
    7028:	80 91 71 00 	lds	r24, 0x0071
    702c:	8b 7f       	andi	r24, 0xFB	; 251
    702e:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 4);				// output to 0
    7032:	74 98       	cbi	0x0e, 4	; 14
		TCCR3A |= (1 << COM3A1);		// enable OCA
    7034:	80 91 90 00 	lds	r24, 0x0090
    7038:	80 68       	ori	r24, 0x80	; 128
    703a:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
    703e:	80 91 71 00 	lds	r24, 0x0071
    7042:	82 60       	ori	r24, 0x02	; 2
    7044:	80 93 71 00 	sts	0x0071, r24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    7048:	9f 91       	pop	r25
    704a:	8f 91       	pop	r24
    704c:	0f 90       	pop	r0
    704e:	0f be       	out	0x3f, r0	; 63
    7050:	0f 90       	pop	r0
    7052:	1f 90       	pop	r1
    7054:	18 95       	reti
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
		PORTE &= ~(1 << 4);				// output to 0
		TCCR3A |= (1 << COM3A1);		// enable OCA
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
	} else if(pwm_right < 0) {      	// move backward
		rightMotorPhase = ACTIVE_PHASE;
    7056:	10 92 27 02 	sts	0x0227, r1
		// select channel 12 to sample left current
		currentMotRightChannel = 12;
    705a:	8c e0       	ldi	r24, 0x0C	; 12
    705c:	80 93 26 02 	sts	0x0226, r24
		TCCR3A  &= ~(1 << COM3A1);		// disable OCA
    7060:	80 91 90 00 	lds	r24, 0x0090
    7064:	8f 77       	andi	r24, 0x7F	; 127
    7066:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3A);		// disable OCA interrupt
    706a:	80 91 71 00 	lds	r24, 0x0071
    706e:	8d 7f       	andi	r24, 0xFD	; 253
    7070:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 3);				// output to 0
    7074:	73 98       	cbi	0x0e, 3	; 14
		TCCR3A |= (1 << COM3B1);		// enable OCB
    7076:	80 91 90 00 	lds	r24, 0x0090
    707a:	80 62       	ori	r24, 0x20	; 32
    707c:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3B);		// enable OCB interrupt
    7080:	80 91 71 00 	lds	r24, 0x0071
    7084:	84 60       	ori	r24, 0x04	; 4
    7086:	80 93 71 00 	sts	0x0071, r24
    708a:	ba cf       	rjmp	.-140    	; 0x7000 <__vector_35+0x80>
		if(pwm_right_desired_to_control >= 0) {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
		} else {
			rightMotorPhase = PASSIVE_PHASE;
    708c:	81 e0       	ldi	r24, 0x01	; 1
    708e:	80 93 27 02 	sts	0x0227, r24
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
    7092:	8d e0       	ldi	r24, 0x0D	; 13
    7094:	80 93 26 02 	sts	0x0226, r24
    7098:	a0 cf       	rjmp	.-192    	; 0x6fda <__vector_35+0x5a>

0000709a <__vector_32>:
//	LED_GREEN_OFF;

}

// motor right forward
ISR(TIMER3_COMPA_vect) {
    709a:	1f 92       	push	r1
    709c:	0f 92       	push	r0
    709e:	0f b6       	in	r0, 0x3f	; 63
    70a0:	0f 92       	push	r0
    70a2:	11 24       	eor	r1, r1
    70a4:	8f 93       	push	r24
    70a6:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    70a8:	81 e0       	ldi	r24, 0x01	; 1
    70aa:	80 93 27 02 	sts	0x0227, r24
	// select channel 12 to sample the right velocity
	currentMotRightChannel = 12;
    70ae:	9c e0       	ldi	r25, 0x0C	; 12
    70b0:	90 93 26 02 	sts	0x0226, r25

	firstSampleRight = 1;
    70b4:	80 93 09 02 	sts	0x0209, r24

//	LED_RED_OFF;

}
    70b8:	9f 91       	pop	r25
    70ba:	8f 91       	pop	r24
    70bc:	0f 90       	pop	r0
    70be:	0f be       	out	0x3f, r0	; 63
    70c0:	0f 90       	pop	r0
    70c2:	1f 90       	pop	r1
    70c4:	18 95       	reti

000070c6 <__vector_33>:

// motor right backward
ISR(TIMER3_COMPB_vect) {
    70c6:	1f 92       	push	r1
    70c8:	0f 92       	push	r0
    70ca:	0f b6       	in	r0, 0x3f	; 63
    70cc:	0f 92       	push	r0
    70ce:	11 24       	eor	r1, r1
    70d0:	8f 93       	push	r24
    70d2:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    70d4:	81 e0       	ldi	r24, 0x01	; 1
    70d6:	80 93 27 02 	sts	0x0227, r24
	// select channel 13 to sample the right velocity
	currentMotRightChannel = 13;
    70da:	9d e0       	ldi	r25, 0x0D	; 13
    70dc:	90 93 26 02 	sts	0x0226, r25

	firstSampleRight = 1;
    70e0:	80 93 09 02 	sts	0x0209, r24

//	LED_RED_OFF;
}
    70e4:	9f 91       	pop	r25
    70e6:	8f 91       	pop	r24
    70e8:	0f 90       	pop	r0
    70ea:	0f be       	out	0x3f, r0	; 63
    70ec:	0f 90       	pop	r0
    70ee:	1f 90       	pop	r1
    70f0:	18 95       	reti

000070f2 <initBehaviors>:

#include "behaviors.h"

void initBehaviors() {

	srand(TCNT3);	// initialize random seed (used in obstacle avoidance)
    70f2:	80 91 94 00 	lds	r24, 0x0094
    70f6:	90 91 95 00 	lds	r25, 0x0095
    70fa:	0e 94 64 4c 	call	0x98c8	; 0x98c8 <srand>

}
    70fe:	08 95       	ret

00007100 <obstacleAvoidance>:

void obstacleAvoidance(signed int *pwmLeft, signed int *pwmRight) {
    7100:	2f 92       	push	r2
    7102:	3f 92       	push	r3
    7104:	4f 92       	push	r4
    7106:	5f 92       	push	r5
    7108:	6f 92       	push	r6
    710a:	7f 92       	push	r7
    710c:	8f 92       	push	r8
    710e:	9f 92       	push	r9
    7110:	af 92       	push	r10
    7112:	bf 92       	push	r11
    7114:	cf 92       	push	r12
    7116:	df 92       	push	r13
    7118:	ef 92       	push	r14
    711a:	ff 92       	push	r15
    711c:	0f 93       	push	r16
    711e:	1f 93       	push	r17
    7120:	df 93       	push	r29
    7122:	cf 93       	push	r28
    7124:	cd b7       	in	r28, 0x3d	; 61
    7126:	de b7       	in	r29, 0x3e	; 62
    7128:	28 97       	sbiw	r28, 0x08	; 8
    712a:	0f b6       	in	r0, 0x3f	; 63
    712c:	f8 94       	cli
    712e:	de bf       	out	0x3e, r29	; 62
    7130:	0f be       	out	0x3f, r0	; 63
    7132:	cd bf       	out	0x3d, r28	; 61
    7134:	3c 01       	movw	r6, r24
    7136:	7a 83       	std	Y+2, r23	; 0x02
    7138:	69 83       	std	Y+1, r22	; 0x01
	//	y	0		0.5		1		0.5		0		-0.5	-1		-0.5

	unsigned int i=0;
	signed int long res=0;
	signed int sumSensorsX=0, sumSensorsY=0;
	signed int desL=*pwmLeft, desR=*pwmRight;
    713a:	fc 01       	movw	r30, r24
    713c:	01 90       	ld	r0, Z+
    713e:	f0 81       	ld	r31, Z
    7140:	e0 2d       	mov	r30, r0
    7142:	fc 83       	std	Y+4, r31	; 0x04
    7144:	eb 83       	std	Y+3, r30	; 0x03
    7146:	fb 01       	movw	r30, r22
    7148:	01 90       	ld	r0, Z+
    714a:	f0 81       	ld	r31, Z
    714c:	e0 2d       	mov	r30, r0
    714e:	fe 83       	std	Y+6, r31	; 0x06
    7150:	ed 83       	std	Y+5, r30	; 0x05

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    7152:	00 91 c1 02 	lds	r16, 0x02C1
    7156:	10 91 c2 02 	lds	r17, 0x02C2
    715a:	05 30       	cpi	r16, 0x05	; 5
    715c:	11 05       	cpc	r17, r1
    715e:	34 f4       	brge	.+12     	; 0x716c <obstacleAvoidance+0x6c>
			proximityResultLinear[i] = 0;
    7160:	10 92 c2 02 	sts	0x02C2, r1
    7164:	10 92 c1 02 	sts	0x02C1, r1
    7168:	00 e0       	ldi	r16, 0x00	; 0
    716a:	10 e0       	ldi	r17, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    716c:	60 91 c3 02 	lds	r22, 0x02C3
    7170:	70 91 c4 02 	lds	r23, 0x02C4
    7174:	65 30       	cpi	r22, 0x05	; 5
    7176:	71 05       	cpc	r23, r1
    7178:	34 f4       	brge	.+12     	; 0x7186 <obstacleAvoidance+0x86>
			proximityResultLinear[i] = 0;
    717a:	10 92 c4 02 	sts	0x02C4, r1
    717e:	10 92 c3 02 	sts	0x02C3, r1
    7182:	60 e0       	ldi	r22, 0x00	; 0
    7184:	70 e0       	ldi	r23, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    7186:	80 91 c5 02 	lds	r24, 0x02C5
    718a:	90 91 c6 02 	lds	r25, 0x02C6
    718e:	85 30       	cpi	r24, 0x05	; 5
    7190:	91 05       	cpc	r25, r1
    7192:	24 f4       	brge	.+8      	; 0x719c <obstacleAvoidance+0x9c>
			proximityResultLinear[i] = 0;
    7194:	10 92 c6 02 	sts	0x02C6, r1
    7198:	10 92 c5 02 	sts	0x02C5, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    719c:	40 91 c7 02 	lds	r20, 0x02C7
    71a0:	50 91 c8 02 	lds	r21, 0x02C8
    71a4:	45 30       	cpi	r20, 0x05	; 5
    71a6:	51 05       	cpc	r21, r1
    71a8:	34 f4       	brge	.+12     	; 0x71b6 <obstacleAvoidance+0xb6>
			proximityResultLinear[i] = 0;
    71aa:	10 92 c8 02 	sts	0x02C8, r1
    71ae:	10 92 c7 02 	sts	0x02C7, r1
    71b2:	40 e0       	ldi	r20, 0x00	; 0
    71b4:	50 e0       	ldi	r21, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    71b6:	40 90 c9 02 	lds	r4, 0x02C9
    71ba:	50 90 ca 02 	lds	r5, 0x02CA
    71be:	f5 e0       	ldi	r31, 0x05	; 5
    71c0:	4f 16       	cp	r4, r31
    71c2:	51 04       	cpc	r5, r1
    71c4:	34 f4       	brge	.+12     	; 0x71d2 <obstacleAvoidance+0xd2>
			proximityResultLinear[i] = 0;
    71c6:	10 92 ca 02 	sts	0x02CA, r1
    71ca:	10 92 c9 02 	sts	0x02C9, r1
    71ce:	44 24       	eor	r4, r4
    71d0:	55 24       	eor	r5, r5
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    71d2:	20 91 cb 02 	lds	r18, 0x02CB
    71d6:	30 91 cc 02 	lds	r19, 0x02CC
    71da:	25 30       	cpi	r18, 0x05	; 5
    71dc:	31 05       	cpc	r19, r1
    71de:	34 f4       	brge	.+12     	; 0x71ec <obstacleAvoidance+0xec>
			proximityResultLinear[i] = 0;
    71e0:	10 92 cc 02 	sts	0x02CC, r1
    71e4:	10 92 cb 02 	sts	0x02CB, r1
    71e8:	20 e0       	ldi	r18, 0x00	; 0
    71ea:	30 e0       	ldi	r19, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    71ec:	80 91 cd 02 	lds	r24, 0x02CD
    71f0:	90 91 ce 02 	lds	r25, 0x02CE
    71f4:	85 30       	cpi	r24, 0x05	; 5
    71f6:	91 05       	cpc	r25, r1
    71f8:	24 f4       	brge	.+8      	; 0x7202 <obstacleAvoidance+0x102>
			proximityResultLinear[i] = 0;
    71fa:	10 92 ce 02 	sts	0x02CE, r1
    71fe:	10 92 cd 02 	sts	0x02CD, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    7202:	80 91 cf 02 	lds	r24, 0x02CF
    7206:	90 91 d0 02 	lds	r25, 0x02D0
    720a:	85 30       	cpi	r24, 0x05	; 5
    720c:	91 05       	cpc	r25, r1
    720e:	34 f4       	brge	.+12     	; 0x721c <obstacleAvoidance+0x11c>
			proximityResultLinear[i] = 0;
    7210:	10 92 d0 02 	sts	0x02D0, r1
    7214:	10 92 cf 02 	sts	0x02CF, r1
    7218:	80 e0       	ldi	r24, 0x00	; 0
    721a:	90 e0       	ldi	r25, 0x00	; 0
	}

	// sum the contribution of each sensor (based on the previous weights table);
	// give more weight to prox2 and prox6 (side proximities) in order to get more stability in narrow aisles;
	// add some noise to the sum in order to escape from dead-lock positions
	sumSensorsX = -proximityResultLinear[0] - (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) + proximityResultLinear[4] + (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + ((rand()%60)-30);
    721c:	10 95       	com	r17
    721e:	01 95       	neg	r16
    7220:	1f 4f       	sbci	r17, 0xFF	; 255
    7222:	5b 01       	movw	r10, r22
    7224:	b5 94       	asr	r11
    7226:	a7 94       	ror	r10
    7228:	7a 01       	movw	r14, r20
    722a:	f5 94       	asr	r15
    722c:	e7 94       	ror	r14
    722e:	69 01       	movw	r12, r18
    7230:	d5 94       	asr	r13
    7232:	c7 94       	ror	r12
    7234:	4c 01       	movw	r8, r24
    7236:	95 94       	asr	r9
    7238:	87 94       	ror	r8
    723a:	0e 94 5f 4c 	call	0x98be	; 0x98be <rand>
    723e:	92 01       	movw	r18, r4
    7240:	2e 51       	subi	r18, 0x1E	; 30
    7242:	30 40       	sbci	r19, 0x00	; 0
    7244:	20 0f       	add	r18, r16
    7246:	31 1f       	adc	r19, r17
    7248:	2e 0d       	add	r18, r14
    724a:	3f 1d       	adc	r19, r15
    724c:	2c 0d       	add	r18, r12
    724e:	3d 1d       	adc	r19, r13
    7250:	2a 19       	sub	r18, r10
    7252:	3b 09       	sbc	r19, r11
    7254:	28 19       	sub	r18, r8
    7256:	39 09       	sbc	r19, r9
    7258:	6c e3       	ldi	r22, 0x3C	; 60
    725a:	26 2e       	mov	r2, r22
    725c:	31 2c       	mov	r3, r1
    725e:	b1 01       	movw	r22, r2
    7260:	0e 94 c1 4b 	call	0x9782	; 0x9782 <__divmodhi4>
    7264:	28 0f       	add	r18, r24
    7266:	39 1f       	adc	r19, r25
    7268:	38 87       	std	Y+8, r19	; 0x08
    726a:	2f 83       	std	Y+7, r18	; 0x07
	//sumSensorsX = -proximityResultLinear[0]  + proximityResultLinear[4];	
	sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[2]>>2) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[6]>>2) - (proximityResultLinear[7]>>1)+ ((rand()%60)-30);
    726c:	e0 90 c3 02 	lds	r14, 0x02C3
    7270:	f0 90 c4 02 	lds	r15, 0x02C4
    7274:	f5 94       	asr	r15
    7276:	e7 94       	ror	r14
    7278:	00 91 c5 02 	lds	r16, 0x02C5
    727c:	10 91 c6 02 	lds	r17, 0x02C6
    7280:	15 95       	asr	r17
    7282:	07 95       	ror	r16
    7284:	15 95       	asr	r17
    7286:	07 95       	ror	r16
    7288:	c0 90 c7 02 	lds	r12, 0x02C7
    728c:	d0 90 c8 02 	lds	r13, 0x02C8
    7290:	d5 94       	asr	r13
    7292:	c7 94       	ror	r12
    7294:	a0 90 cb 02 	lds	r10, 0x02CB
    7298:	b0 90 cc 02 	lds	r11, 0x02CC
    729c:	b5 94       	asr	r11
    729e:	a7 94       	ror	r10
    72a0:	40 90 cd 02 	lds	r4, 0x02CD
    72a4:	50 90 ce 02 	lds	r5, 0x02CE
    72a8:	55 94       	asr	r5
    72aa:	47 94       	ror	r4
    72ac:	55 94       	asr	r5
    72ae:	47 94       	ror	r4
    72b0:	80 90 cf 02 	lds	r8, 0x02CF
    72b4:	90 90 d0 02 	lds	r9, 0x02D0
    72b8:	95 94       	asr	r9
    72ba:	87 94       	ror	r8
    72bc:	0e 94 5f 4c 	call	0x98be	; 0x98be <rand>
    72c0:	97 01       	movw	r18, r14
    72c2:	20 0f       	add	r18, r16
    72c4:	31 1f       	adc	r19, r17
    72c6:	2e 51       	subi	r18, 0x1E	; 30
    72c8:	30 40       	sbci	r19, 0x00	; 0
    72ca:	2c 0d       	add	r18, r12
    72cc:	3d 1d       	adc	r19, r13
    72ce:	2a 19       	sub	r18, r10
    72d0:	3b 09       	sbc	r19, r11
    72d2:	28 19       	sub	r18, r8
    72d4:	39 09       	sbc	r19, r9
    72d6:	24 19       	sub	r18, r4
    72d8:	35 09       	sbc	r19, r5
    72da:	b1 01       	movw	r22, r2
    72dc:	0e 94 c1 4b 	call	0x9782	; 0x9782 <__divmodhi4>
    72e0:	28 0f       	add	r18, r24
    72e2:	39 1f       	adc	r19, r25
	//sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + (rand()%30);

	// modify the velocity components based on sensor values
	if(desL >= 0) {
    72e4:	4b 81       	ldd	r20, Y+3	; 0x03
    72e6:	5c 81       	ldd	r21, Y+4	; 0x04
    72e8:	57 fd       	sbrc	r21, 7
    72ea:	e5 c0       	rjmp	.+458    	; 0x74b6 <obstacleAvoidance+0x3b6>
		res = (signed long int)desL + (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
    72ec:	5a 01       	movw	r10, r20
    72ee:	cc 24       	eor	r12, r12
    72f0:	b7 fc       	sbrc	r11, 7
    72f2:	c0 94       	com	r12
    72f4:	dc 2c       	mov	r13, r12
    72f6:	8f 81       	ldd	r24, Y+7	; 0x07
    72f8:	98 85       	ldd	r25, Y+8	; 0x08
    72fa:	1c 01       	movw	r2, r24
    72fc:	44 24       	eor	r4, r4
    72fe:	37 fc       	sbrc	r3, 7
    7300:	40 94       	com	r4
    7302:	54 2c       	mov	r5, r4
    7304:	79 01       	movw	r14, r18
    7306:	00 27       	eor	r16, r16
    7308:	f7 fc       	sbrc	r15, 7
    730a:	00 95       	com	r16
    730c:	10 2f       	mov	r17, r16
    730e:	c2 01       	movw	r24, r4
    7310:	b1 01       	movw	r22, r2
    7312:	6e 19       	sub	r22, r14
    7314:	7f 09       	sbc	r23, r15
    7316:	80 0b       	sbc	r24, r16
    7318:	91 0b       	sbc	r25, r17
    731a:	a6 01       	movw	r20, r12
    731c:	95 01       	movw	r18, r10
    731e:	0e 94 8e 4b 	call	0x971c	; 0x971c <__mulsi3>
    7322:	b6 e0       	ldi	r27, 0x06	; 6
    7324:	95 95       	asr	r25
    7326:	87 95       	ror	r24
    7328:	77 95       	ror	r23
    732a:	67 95       	ror	r22
    732c:	ba 95       	dec	r27
    732e:	d1 f7       	brne	.-12     	; 0x7324 <obstacleAvoidance+0x224>
    7330:	6a 0d       	add	r22, r10
    7332:	7b 1d       	adc	r23, r11
    7334:	8c 1d       	adc	r24, r12
    7336:	9d 1d       	adc	r25, r13
		*pwmLeft = (signed int)res;
    7338:	f3 01       	movw	r30, r6
    733a:	71 83       	std	Z+1, r23	; 0x01
    733c:	60 83       	st	Z, r22
	} else {
		res = (signed long int)desL - (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
		*pwmLeft = (signed int)res;
	}
	if(desR >=0) {
    733e:	2d 81       	ldd	r18, Y+5	; 0x05
    7340:	3e 81       	ldd	r19, Y+6	; 0x06
    7342:	37 fd       	sbrc	r19, 7
    7344:	97 c0       	rjmp	.+302    	; 0x7474 <obstacleAvoidance+0x374>
		res = (signed long int)desR + (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
    7346:	59 01       	movw	r10, r18
    7348:	cc 24       	eor	r12, r12
    734a:	b7 fc       	sbrc	r11, 7
    734c:	c0 94       	com	r12
    734e:	dc 2c       	mov	r13, r12
    7350:	c8 01       	movw	r24, r16
    7352:	b7 01       	movw	r22, r14
    7354:	62 0d       	add	r22, r2
    7356:	73 1d       	adc	r23, r3
    7358:	84 1d       	adc	r24, r4
    735a:	95 1d       	adc	r25, r5
    735c:	a6 01       	movw	r20, r12
    735e:	95 01       	movw	r18, r10
    7360:	0e 94 8e 4b 	call	0x971c	; 0x971c <__mulsi3>
    7364:	f6 e0       	ldi	r31, 0x06	; 6
    7366:	95 95       	asr	r25
    7368:	87 95       	ror	r24
    736a:	77 95       	ror	r23
    736c:	67 95       	ror	r22
    736e:	fa 95       	dec	r31
    7370:	d1 f7       	brne	.-12     	; 0x7366 <obstacleAvoidance+0x266>
    7372:	6a 0d       	add	r22, r10
    7374:	7b 1d       	adc	r23, r11
    7376:	8c 1d       	adc	r24, r12
    7378:	9d 1d       	adc	r25, r13
		*pwmRight = (signed int)res;
    737a:	9b 01       	movw	r18, r22
    737c:	e9 81       	ldd	r30, Y+1	; 0x01
    737e:	fa 81       	ldd	r31, Y+2	; 0x02
    7380:	71 83       	std	Z+1, r23	; 0x01
    7382:	60 83       	st	Z, r22
	} else {
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	}

	if(currentSelector == 10) {	// force a little bit the upwards direction in vertical motion
    7384:	80 91 4a 04 	lds	r24, 0x044A
    7388:	8a 30       	cpi	r24, 0x0A	; 10
    738a:	09 f4       	brne	.+2      	; 0x738e <obstacleAvoidance+0x28e>
    738c:	4b c0       	rjmp	.+150    	; 0x7424 <obstacleAvoidance+0x324>
			}
		}
	}

	// force the values to be in the pwm maximum range
	if (*pwmRight>(MAX_MOTORS_PWM/2)) *pwmRight=(MAX_MOTORS_PWM/2);
    738e:	f2 e0       	ldi	r31, 0x02	; 2
    7390:	21 30       	cpi	r18, 0x01	; 1
    7392:	3f 07       	cpc	r19, r31
    7394:	44 f0       	brlt	.+16     	; 0x73a6 <obstacleAvoidance+0x2a6>
    7396:	80 e0       	ldi	r24, 0x00	; 0
    7398:	92 e0       	ldi	r25, 0x02	; 2
    739a:	e9 81       	ldd	r30, Y+1	; 0x01
    739c:	fa 81       	ldd	r31, Y+2	; 0x02
    739e:	91 83       	std	Z+1, r25	; 0x01
    73a0:	80 83       	st	Z, r24
    73a2:	20 e0       	ldi	r18, 0x00	; 0
    73a4:	32 e0       	ldi	r19, 0x02	; 2
	if (*pwmLeft>(MAX_MOTORS_PWM/2)) *pwmLeft=(MAX_MOTORS_PWM/2);
    73a6:	f3 01       	movw	r30, r6
    73a8:	80 81       	ld	r24, Z
    73aa:	91 81       	ldd	r25, Z+1	; 0x01
    73ac:	f2 e0       	ldi	r31, 0x02	; 2
    73ae:	81 30       	cpi	r24, 0x01	; 1
    73b0:	9f 07       	cpc	r25, r31
    73b2:	4c f0       	brlt	.+18     	; 0x73c6 <obstacleAvoidance+0x2c6>
    73b4:	80 e0       	ldi	r24, 0x00	; 0
    73b6:	92 e0       	ldi	r25, 0x02	; 2
    73b8:	f3 01       	movw	r30, r6
    73ba:	91 83       	std	Z+1, r25	; 0x01
    73bc:	80 83       	st	Z, r24
    73be:	e9 81       	ldd	r30, Y+1	; 0x01
    73c0:	fa 81       	ldd	r31, Y+2	; 0x02
    73c2:	20 81       	ld	r18, Z
    73c4:	31 81       	ldd	r19, Z+1	; 0x01
	if (*pwmRight<-(MAX_MOTORS_PWM/2)) *pwmRight=-(MAX_MOTORS_PWM/2);
    73c6:	fe ef       	ldi	r31, 0xFE	; 254
    73c8:	20 30       	cpi	r18, 0x00	; 0
    73ca:	3f 07       	cpc	r19, r31
    73cc:	4c f4       	brge	.+18     	; 0x73e0 <obstacleAvoidance+0x2e0>
    73ce:	80 e0       	ldi	r24, 0x00	; 0
    73d0:	9e ef       	ldi	r25, 0xFE	; 254
    73d2:	e9 81       	ldd	r30, Y+1	; 0x01
    73d4:	fa 81       	ldd	r31, Y+2	; 0x02
    73d6:	91 83       	std	Z+1, r25	; 0x01
    73d8:	80 83       	st	Z, r24
    73da:	f3 01       	movw	r30, r6
    73dc:	80 81       	ld	r24, Z
    73de:	91 81       	ldd	r25, Z+1	; 0x01
	if (*pwmLeft<-(MAX_MOTORS_PWM/2)) *pwmLeft=-(MAX_MOTORS_PWM/2);
    73e0:	fe ef       	ldi	r31, 0xFE	; 254
    73e2:	80 30       	cpi	r24, 0x00	; 0
    73e4:	9f 07       	cpc	r25, r31
    73e6:	2c f4       	brge	.+10     	; 0x73f2 <obstacleAvoidance+0x2f2>
    73e8:	80 e0       	ldi	r24, 0x00	; 0
    73ea:	9e ef       	ldi	r25, 0xFE	; 254
    73ec:	f3 01       	movw	r30, r6
    73ee:	91 83       	std	Z+1, r25	; 0x01
    73f0:	80 83       	st	Z, r24

}
    73f2:	28 96       	adiw	r28, 0x08	; 8
    73f4:	0f b6       	in	r0, 0x3f	; 63
    73f6:	f8 94       	cli
    73f8:	de bf       	out	0x3e, r29	; 62
    73fa:	0f be       	out	0x3f, r0	; 63
    73fc:	cd bf       	out	0x3d, r28	; 61
    73fe:	cf 91       	pop	r28
    7400:	df 91       	pop	r29
    7402:	1f 91       	pop	r17
    7404:	0f 91       	pop	r16
    7406:	ff 90       	pop	r15
    7408:	ef 90       	pop	r14
    740a:	df 90       	pop	r13
    740c:	cf 90       	pop	r12
    740e:	bf 90       	pop	r11
    7410:	af 90       	pop	r10
    7412:	9f 90       	pop	r9
    7414:	8f 90       	pop	r8
    7416:	7f 90       	pop	r7
    7418:	6f 90       	pop	r6
    741a:	5f 90       	pop	r5
    741c:	4f 90       	pop	r4
    741e:	3f 90       	pop	r3
    7420:	2f 90       	pop	r2
    7422:	08 95       	ret
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	}

	if(currentSelector == 10) {	// force a little bit the upwards direction in vertical motion
		if(desL!=0 && desR!=0) {
    7424:	2b 81       	ldd	r18, Y+3	; 0x03
    7426:	3c 81       	ldd	r19, Y+4	; 0x04
    7428:	21 15       	cp	r18, r1
    742a:	31 05       	cpc	r19, r1
    742c:	f1 f0       	breq	.+60     	; 0x746a <obstacleAvoidance+0x36a>
    742e:	2d 81       	ldd	r18, Y+5	; 0x05
    7430:	3e 81       	ldd	r19, Y+6	; 0x06
    7432:	21 15       	cp	r18, r1
    7434:	31 05       	cpc	r19, r1
    7436:	c9 f0       	breq	.+50     	; 0x746a <obstacleAvoidance+0x36a>
			if(currentAngle<270 && currentAngle>90) {
    7438:	80 91 3c 04 	lds	r24, 0x043C
    743c:	90 91 3d 04 	lds	r25, 0x043D
    7440:	8b 55       	subi	r24, 0x5B	; 91
    7442:	90 40       	sbci	r25, 0x00	; 0
    7444:	83 3b       	cpi	r24, 0xB3	; 179
    7446:	91 05       	cpc	r25, r1
    7448:	08 f0       	brcs	.+2      	; 0x744c <obstacleAvoidance+0x34c>
    744a:	5f c0       	rjmp	.+190    	; 0x750a <obstacleAvoidance+0x40a>
				*pwmLeft += 10;
    744c:	f3 01       	movw	r30, r6
    744e:	80 81       	ld	r24, Z
    7450:	91 81       	ldd	r25, Z+1	; 0x01
    7452:	0a 96       	adiw	r24, 0x0a	; 10
    7454:	91 83       	std	Z+1, r25	; 0x01
    7456:	80 83       	st	Z, r24
				*pwmRight -= 10;
    7458:	e9 81       	ldd	r30, Y+1	; 0x01
    745a:	fa 81       	ldd	r31, Y+2	; 0x02
    745c:	20 81       	ld	r18, Z
    745e:	31 81       	ldd	r19, Z+1	; 0x01
    7460:	2a 50       	subi	r18, 0x0A	; 10
    7462:	30 40       	sbci	r19, 0x00	; 0
    7464:	31 83       	std	Z+1, r19	; 0x01
    7466:	20 83       	st	Z, r18
    7468:	92 cf       	rjmp	.-220    	; 0x738e <obstacleAvoidance+0x28e>
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	}

	if(currentSelector == 10) {	// force a little bit the upwards direction in vertical motion
		if(desL!=0 && desR!=0) {
    746a:	e9 81       	ldd	r30, Y+1	; 0x01
    746c:	fa 81       	ldd	r31, Y+2	; 0x02
    746e:	20 81       	ld	r18, Z
    7470:	31 81       	ldd	r19, Z+1	; 0x01
    7472:	8d cf       	rjmp	.-230    	; 0x738e <obstacleAvoidance+0x28e>
	}
	if(desR >=0) {
		res = (signed long int)desR + (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	} else {
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
    7474:	59 01       	movw	r10, r18
    7476:	cc 24       	eor	r12, r12
    7478:	b7 fc       	sbrc	r11, 7
    747a:	c0 94       	com	r12
    747c:	dc 2c       	mov	r13, r12
    747e:	c2 01       	movw	r24, r4
    7480:	b1 01       	movw	r22, r2
    7482:	6e 19       	sub	r22, r14
    7484:	7f 09       	sbc	r23, r15
    7486:	80 0b       	sbc	r24, r16
    7488:	91 0b       	sbc	r25, r17
    748a:	a6 01       	movw	r20, r12
    748c:	95 01       	movw	r18, r10
    748e:	0e 94 8e 4b 	call	0x971c	; 0x971c <__mulsi3>
    7492:	e6 e0       	ldi	r30, 0x06	; 6
    7494:	95 95       	asr	r25
    7496:	87 95       	ror	r24
    7498:	77 95       	ror	r23
    749a:	67 95       	ror	r22
    749c:	ea 95       	dec	r30
    749e:	d1 f7       	brne	.-12     	; 0x7494 <obstacleAvoidance+0x394>
    74a0:	26 1b       	sub	r18, r22
    74a2:	37 0b       	sbc	r19, r23
    74a4:	48 0b       	sbc	r20, r24
    74a6:	59 0b       	sbc	r21, r25
    74a8:	da 01       	movw	r26, r20
    74aa:	c9 01       	movw	r24, r18
		*pwmRight = (signed int)res;
    74ac:	e9 81       	ldd	r30, Y+1	; 0x01
    74ae:	fa 81       	ldd	r31, Y+2	; 0x02
    74b0:	91 83       	std	Z+1, r25	; 0x01
    74b2:	80 83       	st	Z, r24
    74b4:	67 cf       	rjmp	.-306    	; 0x7384 <obstacleAvoidance+0x284>
	// modify the velocity components based on sensor values
	if(desL >= 0) {
		res = (signed long int)desL + (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmLeft = (signed int)res;
	} else {
		res = (signed long int)desL - (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
    74b6:	5a 01       	movw	r10, r20
    74b8:	cc 24       	eor	r12, r12
    74ba:	b7 fc       	sbrc	r11, 7
    74bc:	c0 94       	com	r12
    74be:	dc 2c       	mov	r13, r12
    74c0:	8f 81       	ldd	r24, Y+7	; 0x07
    74c2:	98 85       	ldd	r25, Y+8	; 0x08
    74c4:	1c 01       	movw	r2, r24
    74c6:	44 24       	eor	r4, r4
    74c8:	37 fc       	sbrc	r3, 7
    74ca:	40 94       	com	r4
    74cc:	54 2c       	mov	r5, r4
    74ce:	79 01       	movw	r14, r18
    74d0:	00 27       	eor	r16, r16
    74d2:	f7 fc       	sbrc	r15, 7
    74d4:	00 95       	com	r16
    74d6:	10 2f       	mov	r17, r16
    74d8:	c8 01       	movw	r24, r16
    74da:	b7 01       	movw	r22, r14
    74dc:	62 0d       	add	r22, r2
    74de:	73 1d       	adc	r23, r3
    74e0:	84 1d       	adc	r24, r4
    74e2:	95 1d       	adc	r25, r5
    74e4:	a6 01       	movw	r20, r12
    74e6:	95 01       	movw	r18, r10
    74e8:	0e 94 8e 4b 	call	0x971c	; 0x971c <__mulsi3>
    74ec:	a6 e0       	ldi	r26, 0x06	; 6
    74ee:	95 95       	asr	r25
    74f0:	87 95       	ror	r24
    74f2:	77 95       	ror	r23
    74f4:	67 95       	ror	r22
    74f6:	aa 95       	dec	r26
    74f8:	d1 f7       	brne	.-12     	; 0x74ee <obstacleAvoidance+0x3ee>
    74fa:	26 1b       	sub	r18, r22
    74fc:	37 0b       	sbc	r19, r23
    74fe:	48 0b       	sbc	r20, r24
    7500:	59 0b       	sbc	r21, r25
		*pwmLeft = (signed int)res;
    7502:	f3 01       	movw	r30, r6
    7504:	31 83       	std	Z+1, r19	; 0x01
    7506:	20 83       	st	Z, r18
    7508:	1a cf       	rjmp	.-460    	; 0x733e <obstacleAvoidance+0x23e>
		if(desL!=0 && desR!=0) {
			if(currentAngle<270 && currentAngle>90) {
				*pwmLeft += 10;
				*pwmRight -= 10;
			} else {
				*pwmLeft -= 10;
    750a:	f3 01       	movw	r30, r6
    750c:	80 81       	ld	r24, Z
    750e:	91 81       	ldd	r25, Z+1	; 0x01
    7510:	0a 97       	sbiw	r24, 0x0a	; 10
    7512:	91 83       	std	Z+1, r25	; 0x01
    7514:	80 83       	st	Z, r24
				*pwmRight += 10;
    7516:	e9 81       	ldd	r30, Y+1	; 0x01
    7518:	fa 81       	ldd	r31, Y+2	; 0x02
    751a:	20 81       	ld	r18, Z
    751c:	31 81       	ldd	r19, Z+1	; 0x01
    751e:	26 5f       	subi	r18, 0xF6	; 246
    7520:	3f 4f       	sbci	r19, 0xFF	; 255
    7522:	31 83       	std	Z+1, r19	; 0x01
    7524:	20 83       	st	Z, r18
    7526:	33 cf       	rjmp	.-410    	; 0x738e <obstacleAvoidance+0x28e>

00007528 <cliffDetected>:


char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    7528:	80 91 69 02 	lds	r24, 0x0269
    752c:	90 91 6a 02 	lds	r25, 0x026A
    7530:	21 e0       	ldi	r18, 0x01	; 1
    7532:	84 3a       	cpi	r24, 0xA4	; 164
    7534:	92 07       	cpc	r25, r18
    7536:	d4 f0       	brlt	.+52     	; 0x756c <cliffDetected+0x44>
    7538:	80 91 6b 02 	lds	r24, 0x026B
    753c:	90 91 6c 02 	lds	r25, 0x026C
    7540:	21 e0       	ldi	r18, 0x01	; 1
    7542:	84 3a       	cpi	r24, 0xA4	; 164
    7544:	92 07       	cpc	r25, r18
    7546:	94 f0       	brlt	.+36     	; 0x756c <cliffDetected+0x44>
    7548:	80 91 6d 02 	lds	r24, 0x026D
    754c:	90 91 6e 02 	lds	r25, 0x026E
    7550:	21 e0       	ldi	r18, 0x01	; 1
    7552:	84 3a       	cpi	r24, 0xA4	; 164
    7554:	92 07       	cpc	r25, r18
    7556:	74 f0       	brlt	.+28     	; 0x7574 <cliffDetected+0x4c>
	//if(proximityResult[8]<(proximityOffset[8]>>1) || proximityResult[9]<(proximityOffset[9]>>1) || proximityResult[10]<(proximityOffset[10]>>1) || proximityResult[11]<(proximityOffset[11]>>1)) {
		return 1;
    7558:	81 e0       	ldi	r24, 0x01	; 1
    755a:	20 91 6f 02 	lds	r18, 0x026F
    755e:	30 91 70 02 	lds	r19, 0x0270
    7562:	91 e0       	ldi	r25, 0x01	; 1
    7564:	24 3a       	cpi	r18, 0xA4	; 164
    7566:	39 07       	cpc	r19, r25
    7568:	1c f4       	brge	.+6      	; 0x7570 <cliffDetected+0x48>
	} else {
		return 0;
	}


}
    756a:	08 95       	ret
char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
	//if(proximityResult[8]<(proximityOffset[8]>>1) || proximityResult[9]<(proximityOffset[9]>>1) || proximityResult[10]<(proximityOffset[10]>>1) || proximityResult[11]<(proximityOffset[11]>>1)) {
		return 1;
    756c:	81 e0       	ldi	r24, 0x01	; 1
    756e:	08 95       	ret
    7570:	80 e0       	ldi	r24, 0x00	; 0
    7572:	08 95       	ret
    7574:	81 e0       	ldi	r24, 0x01	; 1
	} else {
		return 0;
	}


}
    7576:	08 95       	ret

00007578 <enableObstacleAvoidance>:

void enableObstacleAvoidance() {
	obstacleAvoidanceEnabled=1;
    7578:	81 e0       	ldi	r24, 0x01	; 1
    757a:	80 93 6a 04 	sts	0x046A, r24
}
    757e:	08 95       	ret

00007580 <disableObstacleAvoidance>:

void disableObstacleAvoidance() {
	obstacleAvoidanceEnabled=0;
    7580:	10 92 6a 04 	sts	0x046A, r1
}
    7584:	08 95       	ret

00007586 <enableCliffAvoidance>:

void enableCliffAvoidance() {
	cliffAvoidanceEnabled=1;
    7586:	81 e0       	ldi	r24, 0x01	; 1
    7588:	80 93 6b 04 	sts	0x046B, r24
}
    758c:	08 95       	ret

0000758e <disableCliffAvoidance>:

void disableCliffAvoidance() {
	cliffAvoidanceEnabled=0;
    758e:	10 92 6b 04 	sts	0x046B, r1
}
    7592:	08 95       	ret

00007594 <initRGBleds>:
	// Period freq = Fosc/TOP (max timer value) => TOP = Fosc/period freq
	// We need a frequency of about 30 KHz => 8000000/30000 = 266
	// The waveform generation mode let us chose the TOP value to be 256
	// thus we get period freq = 8000000/256 = 31250 Hz

	TCCR1A = 0;
    7594:	a0 e8       	ldi	r26, 0x80	; 128
    7596:	b0 e0       	ldi	r27, 0x00	; 0
    7598:	1c 92       	st	X, r1
	TCCR1B = 0;
    759a:	e1 e8       	ldi	r30, 0x81	; 129
    759c:	f0 e0       	ldi	r31, 0x00	; 0
    759e:	10 82       	st	Z, r1

	// enable OCA, OCB, OCC; clear on match, set at bottom
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << COM1C1) | (1 << WGM10); 	
    75a0:	8c 91       	ld	r24, X
    75a2:	89 6a       	ori	r24, 0xA9	; 169
    75a4:	8c 93       	st	X, r24
	// mode 5 => fast-pwm 8 bit; no prescaler
	TCCR1B |= (1 << WGM12) | (1 << CS10);										
    75a6:	80 81       	ld	r24, Z
    75a8:	89 60       	ori	r24, 0x09	; 9
    75aa:	80 83       	st	Z, r24
	// the values for the leds pwm goes from 0 (max power on) to 255 (off)
	OCR1A = pwm_red;
    75ac:	80 91 0c 02 	lds	r24, 0x020C
    75b0:	90 e0       	ldi	r25, 0x00	; 0
    75b2:	90 93 89 00 	sts	0x0089, r25
    75b6:	80 93 88 00 	sts	0x0088, r24
	OCR1B = pwm_green;
    75ba:	80 91 0d 02 	lds	r24, 0x020D
    75be:	90 e0       	ldi	r25, 0x00	; 0
    75c0:	90 93 8b 00 	sts	0x008B, r25
    75c4:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = pwm_blue;
    75c8:	80 91 0e 02 	lds	r24, 0x020E
    75cc:	90 e0       	ldi	r25, 0x00	; 0
    75ce:	90 93 8d 00 	sts	0x008D, r25
    75d2:	80 93 8c 00 	sts	0x008C, r24

}
    75d6:	08 95       	ret

000075d8 <toggleBlueLed>:

void toggleBlueLed() {

	blinkState = 1 - blinkState;
    75d8:	81 e0       	ldi	r24, 0x01	; 1
    75da:	90 91 19 03 	lds	r25, 0x0319
    75de:	89 1b       	sub	r24, r25
    75e0:	80 93 19 03 	sts	0x0319, r24

	if(blinkState) {
    75e4:	88 23       	and	r24, r24
    75e6:	39 f4       	brne	.+14     	; 0x75f6 <toggleBlueLed+0x1e>
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
		OCR1C = 255;
	} else {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC to get the maximum output power; this is due to the fact 
    75e8:	80 91 80 00 	lds	r24, 0x0080
    75ec:	87 7f       	andi	r24, 0xF7	; 247
    75ee:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// that the minimum duty cycle when the output compare is enable is 1 
    75f2:	2f 98       	cbi	0x05, 7	; 5
    75f4:	08 95       	ret
void toggleBlueLed() {

	blinkState = 1 - blinkState;

	if(blinkState) {
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
    75f6:	80 91 80 00 	lds	r24, 0x0080
    75fa:	88 60       	ori	r24, 0x08	; 8
    75fc:	80 93 80 00 	sts	0x0080, r24
		OCR1C = 255;
    7600:	8f ef       	ldi	r24, 0xFF	; 255
    7602:	90 e0       	ldi	r25, 0x00	; 0
    7604:	90 93 8d 00 	sts	0x008D, r25
    7608:	80 93 8c 00 	sts	0x008C, r24
    760c:	08 95       	ret

0000760e <updateRedLed>:

}

void updateRedLed(unsigned char value) {

	if(value == 0) {
    760e:	88 23       	and	r24, r24
    7610:	59 f0       	breq	.+22     	; 0x7628 <updateRedLed+0x1a>
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1A1);	// always enable OCA in case it was disabled
    7612:	90 91 80 00 	lds	r25, 0x0080
    7616:	90 68       	ori	r25, 0x80	; 128
    7618:	90 93 80 00 	sts	0x0080, r25
		OCR1A = value;
    761c:	90 e0       	ldi	r25, 0x00	; 0
    761e:	90 93 89 00 	sts	0x0089, r25
    7622:	80 93 88 00 	sts	0x0088, r24
    7626:	08 95       	ret
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
    7628:	80 91 80 00 	lds	r24, 0x0080
    762c:	8f 77       	andi	r24, 0x7F	; 127
    762e:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
    7632:	2d 98       	cbi	0x05, 5	; 5
    7634:	08 95       	ret

00007636 <updateGreenLed>:

}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
    7636:	88 23       	and	r24, r24
    7638:	59 f0       	breq	.+22     	; 0x7650 <updateGreenLed+0x1a>
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
	} else {	
		TCCR1A |= (1 << COM1B1);	// always enable OCA in case it was disabled
    763a:	90 91 80 00 	lds	r25, 0x0080
    763e:	90 62       	ori	r25, 0x20	; 32
    7640:	90 93 80 00 	sts	0x0080, r25
		OCR1B = value;
    7644:	90 e0       	ldi	r25, 0x00	; 0
    7646:	90 93 8b 00 	sts	0x008B, r25
    764a:	80 93 8a 00 	sts	0x008A, r24
    764e:	08 95       	ret
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
    7650:	80 91 80 00 	lds	r24, 0x0080
    7654:	8f 7d       	andi	r24, 0xDF	; 223
    7656:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
    765a:	2e 98       	cbi	0x05, 6	; 5
    765c:	08 95       	ret

0000765e <updateBlueLed>:

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
    765e:	88 23       	and	r24, r24
    7660:	59 f0       	breq	.+22     	; 0x7678 <updateBlueLed+0x1a>
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1C1);	// always enable OCA in case it was disabled
    7662:	90 91 80 00 	lds	r25, 0x0080
    7666:	98 60       	ori	r25, 0x08	; 8
    7668:	90 93 80 00 	sts	0x0080, r25
		OCR1C = value;
    766c:	90 e0       	ldi	r25, 0x00	; 0
    766e:	90 93 8d 00 	sts	0x008D, r25
    7672:	80 93 8c 00 	sts	0x008C, r24
    7676:	08 95       	ret
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
    7678:	80 91 80 00 	lds	r24, 0x0080
    767c:	87 7f       	andi	r24, 0xF7	; 247
    767e:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
    7682:	2f 98       	cbi	0x05, 7	; 5
    7684:	08 95       	ret

00007686 <setGreenLed>:

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    7686:	83 30       	cpi	r24, 0x03	; 3
    7688:	09 f4       	brne	.+2      	; 0x768c <setGreenLed+0x6>
    768a:	5a c0       	rjmp	.+180    	; 0x7740 <setGreenLed+0xba>
    768c:	84 30       	cpi	r24, 0x04	; 4
    768e:	80 f0       	brcs	.+32     	; 0x76b0 <setGreenLed+0x2a>
    7690:	85 30       	cpi	r24, 0x05	; 5
    7692:	09 f4       	brne	.+2      	; 0x7696 <setGreenLed+0x10>
    7694:	41 c0       	rjmp	.+130    	; 0x7718 <setGreenLed+0x92>
    7696:	85 30       	cpi	r24, 0x05	; 5
    7698:	d0 f4       	brcc	.+52     	; 0x76ce <setGreenLed+0x48>
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
    769a:	66 23       	and	r22, r22
    769c:	09 f4       	brne	.+2      	; 0x76a0 <setGreenLed+0x1a>
    769e:	68 c0       	rjmp	.+208    	; 0x7770 <setGreenLed+0xea>
    76a0:	80 91 0b 01 	lds	r24, 0x010B
    76a4:	8f 7e       	andi	r24, 0xEF	; 239
    76a6:	80 93 0b 01 	sts	0x010B, r24
    76aa:	80 91 0b 01 	lds	r24, 0x010B
    76ae:	08 95       	ret

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    76b0:	81 30       	cpi	r24, 0x01	; 1
    76b2:	e1 f1       	breq	.+120    	; 0x772c <setGreenLed+0xa6>
    76b4:	82 30       	cpi	r24, 0x02	; 2
    76b6:	80 f0       	brcs	.+32     	; 0x76d8 <setGreenLed+0x52>
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
    76b8:	66 23       	and	r22, r22
    76ba:	09 f4       	brne	.+2      	; 0x76be <setGreenLed+0x38>
    76bc:	46 c0       	rjmp	.+140    	; 0x774a <setGreenLed+0xc4>
    76be:	80 91 0b 01 	lds	r24, 0x010B
    76c2:	8b 7f       	andi	r24, 0xFB	; 251
    76c4:	80 93 0b 01 	sts	0x010B, r24
    76c8:	80 91 0b 01 	lds	r24, 0x010B
    76cc:	08 95       	ret

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    76ce:	86 30       	cpi	r24, 0x06	; 6
    76d0:	c9 f0       	breq	.+50     	; 0x7704 <setGreenLed+0x7e>
    76d2:	87 30       	cpi	r24, 0x07	; 7
    76d4:	61 f0       	breq	.+24     	; 0x76ee <setGreenLed+0x68>
    76d6:	08 95       	ret

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
    76d8:	66 23       	and	r22, r22
    76da:	09 f4       	brne	.+2      	; 0x76de <setGreenLed+0x58>
    76dc:	51 c0       	rjmp	.+162    	; 0x7780 <setGreenLed+0xfa>
    76de:	80 91 0b 01 	lds	r24, 0x010B
    76e2:	8e 7f       	andi	r24, 0xFE	; 254
    76e4:	80 93 0b 01 	sts	0x010B, r24
    76e8:	80 91 0b 01 	lds	r24, 0x010B
    76ec:	08 95       	ret
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
				break;

		case 7:	isOn?GREEN_LED7_ON:GREEN_LED7_OFF;
    76ee:	66 23       	and	r22, r22
    76f0:	09 f0       	breq	.+2      	; 0x76f4 <setGreenLed+0x6e>
    76f2:	5e c0       	rjmp	.+188    	; 0x77b0 <setGreenLed+0x12a>
    76f4:	80 91 0b 01 	lds	r24, 0x010B
    76f8:	80 68       	ori	r24, 0x80	; 128
    76fa:	80 93 0b 01 	sts	0x010B, r24
    76fe:	80 91 0b 01 	lds	r24, 0x010B
    7702:	08 95       	ret
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
    7704:	66 23       	and	r22, r22
    7706:	49 f1       	breq	.+82     	; 0x775a <setGreenLed+0xd4>
    7708:	80 91 0b 01 	lds	r24, 0x010B
    770c:	8f 7b       	andi	r24, 0xBF	; 191
    770e:	80 93 0b 01 	sts	0x010B, r24
    7712:	80 91 0b 01 	lds	r24, 0x010B
    7716:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
    7718:	66 23       	and	r22, r22
    771a:	d1 f1       	breq	.+116    	; 0x7790 <setGreenLed+0x10a>
    771c:	80 91 0b 01 	lds	r24, 0x010B
    7720:	8f 7d       	andi	r24, 0xDF	; 223
    7722:	80 93 0b 01 	sts	0x010B, r24
    7726:	80 91 0b 01 	lds	r24, 0x010B
    772a:	08 95       	ret
	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
    772c:	66 23       	and	r22, r22
    772e:	c1 f1       	breq	.+112    	; 0x77a0 <setGreenLed+0x11a>
    7730:	80 91 0b 01 	lds	r24, 0x010B
    7734:	8d 7f       	andi	r24, 0xFD	; 253
    7736:	80 93 0b 01 	sts	0x010B, r24
    773a:	80 91 0b 01 	lds	r24, 0x010B
    773e:	08 95       	ret
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
    7740:	66 23       	and	r22, r22
    7742:	99 f0       	breq	.+38     	; 0x776a <setGreenLed+0xe4>
    7744:	a3 98       	cbi	0x14, 3	; 20
    7746:	84 b3       	in	r24, 0x14	; 20
    7748:	08 95       	ret
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
    774a:	80 91 0b 01 	lds	r24, 0x010B
    774e:	84 60       	ori	r24, 0x04	; 4
    7750:	80 93 0b 01 	sts	0x010B, r24
    7754:	80 91 0b 01 	lds	r24, 0x010B
    7758:	08 95       	ret
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
    775a:	80 91 0b 01 	lds	r24, 0x010B
    775e:	80 64       	ori	r24, 0x40	; 64
    7760:	80 93 0b 01 	sts	0x010B, r24
    7764:	80 91 0b 01 	lds	r24, 0x010B
    7768:	08 95       	ret
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
    776a:	a3 9a       	sbi	0x14, 3	; 20
    776c:	84 b3       	in	r24, 0x14	; 20
    776e:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
    7770:	80 91 0b 01 	lds	r24, 0x010B
    7774:	80 61       	ori	r24, 0x10	; 16
    7776:	80 93 0b 01 	sts	0x010B, r24
    777a:	80 91 0b 01 	lds	r24, 0x010B
    777e:	08 95       	ret

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
    7780:	80 91 0b 01 	lds	r24, 0x010B
    7784:	81 60       	ori	r24, 0x01	; 1
    7786:	80 93 0b 01 	sts	0x010B, r24
    778a:	80 91 0b 01 	lds	r24, 0x010B
    778e:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
    7790:	80 91 0b 01 	lds	r24, 0x010B
    7794:	80 62       	ori	r24, 0x20	; 32
    7796:	80 93 0b 01 	sts	0x010B, r24
    779a:	80 91 0b 01 	lds	r24, 0x010B
    779e:	08 95       	ret
	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
    77a0:	80 91 0b 01 	lds	r24, 0x010B
    77a4:	82 60       	ori	r24, 0x02	; 2
    77a6:	80 93 0b 01 	sts	0x010B, r24
    77aa:	80 91 0b 01 	lds	r24, 0x010B
    77ae:	08 95       	ret
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
				break;

		case 7:	isOn?GREEN_LED7_ON:GREEN_LED7_OFF;
    77b0:	80 91 0b 01 	lds	r24, 0x010B
    77b4:	8f 77       	andi	r24, 0x7F	; 127
    77b6:	80 93 0b 01 	sts	0x010B, r24
    77ba:	80 91 0b 01 	lds	r24, 0x010B
    77be:	08 95       	ret

000077c0 <turnOffGreenLeds>:

}

void turnOffGreenLeds() {

	GREEN_LED0_OFF;
    77c0:	eb e0       	ldi	r30, 0x0B	; 11
    77c2:	f1 e0       	ldi	r31, 0x01	; 1
    77c4:	80 81       	ld	r24, Z
    77c6:	81 60       	ori	r24, 0x01	; 1
    77c8:	80 83       	st	Z, r24
	GREEN_LED1_OFF;
    77ca:	80 81       	ld	r24, Z
    77cc:	82 60       	ori	r24, 0x02	; 2
    77ce:	80 83       	st	Z, r24
	GREEN_LED2_OFF;
    77d0:	80 81       	ld	r24, Z
    77d2:	84 60       	ori	r24, 0x04	; 4
    77d4:	80 83       	st	Z, r24
	GREEN_LED3_OFF;
    77d6:	a3 9a       	sbi	0x14, 3	; 20
	GREEN_LED4_OFF;
    77d8:	80 81       	ld	r24, Z
    77da:	80 61       	ori	r24, 0x10	; 16
    77dc:	80 83       	st	Z, r24
	GREEN_LED5_OFF;
    77de:	80 81       	ld	r24, Z
    77e0:	80 62       	ori	r24, 0x20	; 32
    77e2:	80 83       	st	Z, r24
	GREEN_LED6_OFF;
    77e4:	80 81       	ld	r24, Z
    77e6:	80 64       	ori	r24, 0x40	; 64
    77e8:	80 83       	st	Z, r24
	GREEN_LED7_OFF;
    77ea:	80 81       	ld	r24, Z
    77ec:	80 68       	ori	r24, 0x80	; 128
    77ee:	80 83       	st	Z, r24

}
    77f0:	08 95       	ret

000077f2 <turnOnGreenLeds>:


void turnOnGreenLeds() {

	GREEN_LED0_ON;
    77f2:	eb e0       	ldi	r30, 0x0B	; 11
    77f4:	f1 e0       	ldi	r31, 0x01	; 1
    77f6:	80 81       	ld	r24, Z
    77f8:	8e 7f       	andi	r24, 0xFE	; 254
    77fa:	80 83       	st	Z, r24
	GREEN_LED1_ON;
    77fc:	80 81       	ld	r24, Z
    77fe:	8d 7f       	andi	r24, 0xFD	; 253
    7800:	80 83       	st	Z, r24
	GREEN_LED2_ON;
    7802:	80 81       	ld	r24, Z
    7804:	8b 7f       	andi	r24, 0xFB	; 251
    7806:	80 83       	st	Z, r24
	GREEN_LED3_ON;
    7808:	a3 98       	cbi	0x14, 3	; 20
	GREEN_LED4_ON;
    780a:	80 81       	ld	r24, Z
    780c:	8f 7e       	andi	r24, 0xEF	; 239
    780e:	80 83       	st	Z, r24
	GREEN_LED5_ON;
    7810:	80 81       	ld	r24, Z
    7812:	8f 7d       	andi	r24, 0xDF	; 223
    7814:	80 83       	st	Z, r24
	GREEN_LED6_ON;
    7816:	80 81       	ld	r24, Z
    7818:	8f 7b       	andi	r24, 0xBF	; 191
    781a:	80 83       	st	Z, r24
	GREEN_LED7_ON;
    781c:	80 81       	ld	r24, Z
    781e:	8f 77       	andi	r24, 0x7F	; 127
    7820:	80 83       	st	Z, r24

}
    7822:	08 95       	ret

00007824 <initAccelerometer>:

void initAccelerometer() {

	unsigned char ret;

	i2c_init();		// init I2C bus
    7824:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <i2c_init>
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7828:	80 91 14 02 	lds	r24, 0x0214
    782c:	0e 94 ed 1b 	call	0x37da	; 0x37da <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    7830:	88 23       	and	r24, r24
    7832:	49 f4       	brne	.+18     	; 0x7846 <initAccelerometer+0x22>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    7834:	86 e1       	ldi	r24, 0x16	; 22
    7836:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    783a:	85 e4       	ldi	r24, 0x45	; 69
    783c:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    7840:	0e 94 60 1c 	call	0x38c0	; 0x38c0 <i2c_stop>
    7844:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    7846:	0e 94 60 1c 	call	0x38c0	; 0x38c0 <i2c_stop>
	i2c_init();		// init I2C bus

	ret = initMMA7455L();

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
    784a:	86 ea       	ldi	r24, 0xA6	; 166
    784c:	90 e0       	ldi	r25, 0x00	; 0
    784e:	90 93 15 02 	sts	0x0215, r25
    7852:	80 93 14 02 	sts	0x0214, r24
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7856:	86 ea       	ldi	r24, 0xA6	; 166
    7858:	0e 94 ed 1b 	call	0x37da	; 0x37da <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    785c:	88 23       	and	r24, r24
    785e:	41 f5       	brne	.+80     	; 0x78b0 <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    7860:	8d e2       	ldi	r24, 0x2D	; 45
    7862:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <i2c_write>
        i2c_write(0x08);	// measurement mode
    7866:	88 e0       	ldi	r24, 0x08	; 8
    7868:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    786c:	0e 94 60 1c 	call	0x38c0	; 0x38c0 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7870:	80 91 14 02 	lds	r24, 0x0214
    7874:	0e 94 ed 1b 	call	0x37da	; 0x37da <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    7878:	88 23       	and	r24, r24
    787a:	d1 f4       	brne	.+52     	; 0x78b0 <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    787c:	81 e3       	ldi	r24, 0x31	; 49
    787e:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    7882:	80 e0       	ldi	r24, 0x00	; 0
    7884:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    7888:	0e 94 60 1c 	call	0x38c0	; 0x38c0 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    788c:	80 91 14 02 	lds	r24, 0x0214
    7890:	0e 94 ed 1b 	call	0x37da	; 0x37da <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    7894:	88 23       	and	r24, r24
    7896:	61 f4       	brne	.+24     	; 0x78b0 <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    7898:	8c e2       	ldi	r24, 0x2C	; 44
    789a:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    789e:	89 e0       	ldi	r24, 0x09	; 9
    78a0:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    78a4:	0e 94 60 1c 	call	0x38c0	; 0x38c0 <i2c_stop>
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
		} else {
			useAccel = USE_ADXL345;
    78a8:	81 e0       	ldi	r24, 0x01	; 1
    78aa:	80 93 29 04 	sts	0x0429, r24
    78ae:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    78b0:	0e 94 60 1c 	call	0x38c0	; 0x38c0 <i2c_stop>

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
    78b4:	82 e0       	ldi	r24, 0x02	; 2
    78b6:	80 93 29 04 	sts	0x0429, r24
    78ba:	08 95       	ret

000078bc <initMMA7455L>:
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    78bc:	80 91 14 02 	lds	r24, 0x0214
    78c0:	0e 94 ed 1b 	call	0x37da	; 0x37da <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    78c4:	88 23       	and	r24, r24
    78c6:	51 f4       	brne	.+20     	; 0x78dc <initMMA7455L+0x20>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    78c8:	86 e1       	ldi	r24, 0x16	; 22
    78ca:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    78ce:	85 e4       	ldi	r24, 0x45	; 69
    78d0:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    78d4:	0e 94 60 1c 	call	0x38c0	; 0x38c0 <i2c_stop>
    }

	return 0;				// configuration ok
    78d8:	80 e0       	ldi	r24, 0x00	; 0

}
    78da:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    78dc:	0e 94 60 1c 	call	0x38c0	; 0x38c0 <i2c_stop>
		return 1;
    78e0:	81 e0       	ldi	r24, 0x01	; 1
    78e2:	08 95       	ret

000078e4 <initADXL345>:
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    78e4:	80 91 14 02 	lds	r24, 0x0214
    78e8:	0e 94 ed 1b 	call	0x37da	; 0x37da <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    78ec:	88 23       	and	r24, r24
    78ee:	31 f5       	brne	.+76     	; 0x793c <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    78f0:	8d e2       	ldi	r24, 0x2D	; 45
    78f2:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <i2c_write>
        i2c_write(0x08);	// measurement mode
    78f6:	88 e0       	ldi	r24, 0x08	; 8
    78f8:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    78fc:	0e 94 60 1c 	call	0x38c0	; 0x38c0 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7900:	80 91 14 02 	lds	r24, 0x0214
    7904:	0e 94 ed 1b 	call	0x37da	; 0x37da <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    7908:	88 23       	and	r24, r24
    790a:	c1 f4       	brne	.+48     	; 0x793c <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    790c:	81 e3       	ldi	r24, 0x31	; 49
    790e:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    7912:	80 e0       	ldi	r24, 0x00	; 0
    7914:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    7918:	0e 94 60 1c 	call	0x38c0	; 0x38c0 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    791c:	80 91 14 02 	lds	r24, 0x0214
    7920:	0e 94 ed 1b 	call	0x37da	; 0x37da <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    7924:	88 23       	and	r24, r24
    7926:	51 f4       	brne	.+20     	; 0x793c <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    7928:	8c e2       	ldi	r24, 0x2C	; 44
    792a:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    792e:	89 e0       	ldi	r24, 0x09	; 9
    7930:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    7934:	0e 94 60 1c 	call	0x38c0	; 0x38c0 <i2c_stop>
    }

	return 0;
    7938:	80 e0       	ldi	r24, 0x00	; 0

}
    793a:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    793c:	0e 94 60 1c 	call	0x38c0	; 0x38c0 <i2c_stop>
		return 1;
    7940:	81 e0       	ldi	r24, 0x01	; 1
    7942:	08 95       	ret

00007944 <readAccelXY>:

	return 0;

}

void readAccelXY() {
    7944:	ff 92       	push	r15
    7946:	0f 93       	push	r16
    7948:	1f 93       	push	r17
    794a:	df 93       	push	r29
    794c:	cf 93       	push	r28
    794e:	0f 92       	push	r0
    7950:	cd b7       	in	r28, 0x3d	; 61
    7952:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[4];

	if(useAccel == USE_MMAX7455L) {
    7954:	80 91 29 04 	lds	r24, 0x0429
    7958:	88 23       	and	r24, r24
    795a:	91 f0       	breq	.+36     	; 0x7980 <readAccelXY+0x3c>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else if(useAccel == USE_ADXL345) {
    795c:	81 30       	cpi	r24, 0x01	; 1
    795e:	09 f4       	brne	.+2      	; 0x7962 <readAccelXY+0x1e>
    7960:	88 c0       	rjmp	.+272    	; 0x7a72 <readAccelXY+0x12e>
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else {

		accX = 0;
    7962:	10 92 2b 04 	sts	0x042B, r1
    7966:	10 92 2a 04 	sts	0x042A, r1
		accY = 0;
    796a:	10 92 2d 04 	sts	0x042D, r1
    796e:	10 92 2c 04 	sts	0x042C, r1

	}

}
    7972:	0f 90       	pop	r0
    7974:	cf 91       	pop	r28
    7976:	df 91       	pop	r29
    7978:	1f 91       	pop	r17
    797a:	0f 91       	pop	r16
    797c:	ff 90       	pop	r15
    797e:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    7980:	80 91 14 02 	lds	r24, 0x0214
    7984:	0e 94 ed 1b 	call	0x37da	; 0x37da <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    7988:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
		i2c_write(0x32);											// sends address to read from (X LSB)
    798a:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    798e:	80 91 14 02 	lds	r24, 0x0214
    7992:	8f 5f       	subi	r24, 0xFF	; 255
    7994:	0e 94 3a 1c 	call	0x3874	; 0x3874 <i2c_rep_start>

		for(i=0; i<3; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    7998:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <i2c_readAck>
    799c:	08 2f       	mov	r16, r24
    799e:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <i2c_readAck>
    79a2:	f8 2e       	mov	r15, r24
    79a4:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <i2c_readAck>
    79a8:	18 2f       	mov	r17, r24
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    79aa:	0e 94 84 1c 	call	0x3908	; 0x3908 <i2c_readNak>
		i2c_stop();													// set stop conditon = release bus
    79ae:	89 83       	std	Y+1, r24	; 0x01
    79b0:	0e 94 60 1c 	call	0x38c0	; 0x38c0 <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    79b4:	90 91 0b 09 	lds	r25, 0x090B
    79b8:	89 81       	ldd	r24, Y+1	; 0x01
    79ba:	99 23       	and	r25, r25
    79bc:	39 f1       	breq	.+78     	; 0x7a0c <readAccelXY+0xc8>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    79be:	4f 2d       	mov	r20, r15
    79c0:	55 27       	eor	r21, r21
    79c2:	47 fd       	sbrc	r20, 7
    79c4:	50 95       	com	r21
    79c6:	54 2f       	mov	r21, r20
    79c8:	44 27       	eor	r20, r20
    79ca:	60 2f       	mov	r22, r16
    79cc:	77 27       	eor	r23, r23
    79ce:	67 fd       	sbrc	r22, 7
    79d0:	70 95       	com	r23
    79d2:	46 2b       	or	r20, r22
    79d4:	57 2b       	or	r21, r23
    79d6:	50 93 2b 04 	sts	0x042B, r21
    79da:	40 93 2a 04 	sts	0x042A, r20
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    79de:	28 2f       	mov	r18, r24
    79e0:	33 27       	eor	r19, r19
    79e2:	27 fd       	sbrc	r18, 7
    79e4:	30 95       	com	r19
    79e6:	32 2f       	mov	r19, r18
    79e8:	22 27       	eor	r18, r18
    79ea:	81 2f       	mov	r24, r17
    79ec:	99 27       	eor	r25, r25
    79ee:	87 fd       	sbrc	r24, 7
    79f0:	90 95       	com	r25
    79f2:	28 2b       	or	r18, r24
    79f4:	39 2b       	or	r19, r25
    79f6:	30 93 2d 04 	sts	0x042D, r19
    79fa:	20 93 2c 04 	sts	0x042C, r18
		accX = 0;
		accY = 0;

	}

}
    79fe:	0f 90       	pop	r0
    7a00:	cf 91       	pop	r28
    7a02:	df 91       	pop	r29
    7a04:	1f 91       	pop	r17
    7a06:	0f 91       	pop	r16
    7a08:	ff 90       	pop	r15
    7a0a:	08 95       	ret

		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    7a0c:	4f 2d       	mov	r20, r15
    7a0e:	55 27       	eor	r21, r21
    7a10:	47 fd       	sbrc	r20, 7
    7a12:	50 95       	com	r21
    7a14:	54 2f       	mov	r21, r20
    7a16:	44 27       	eor	r20, r20
    7a18:	60 2f       	mov	r22, r16
    7a1a:	77 27       	eor	r23, r23
    7a1c:	67 fd       	sbrc	r22, 7
    7a1e:	70 95       	com	r23
    7a20:	46 2b       	or	r20, r22
    7a22:	57 2b       	or	r21, r23
    7a24:	60 91 30 04 	lds	r22, 0x0430
    7a28:	70 91 31 04 	lds	r23, 0x0431
    7a2c:	46 1b       	sub	r20, r22
    7a2e:	57 0b       	sbc	r21, r23
    7a30:	50 93 2b 04 	sts	0x042B, r21
    7a34:	40 93 2a 04 	sts	0x042A, r20
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    7a38:	28 2f       	mov	r18, r24
    7a3a:	33 27       	eor	r19, r19
    7a3c:	27 fd       	sbrc	r18, 7
    7a3e:	30 95       	com	r19
    7a40:	32 2f       	mov	r19, r18
    7a42:	22 27       	eor	r18, r18
    7a44:	81 2f       	mov	r24, r17
    7a46:	99 27       	eor	r25, r25
    7a48:	87 fd       	sbrc	r24, 7
    7a4a:	90 95       	com	r25
    7a4c:	28 2b       	or	r18, r24
    7a4e:	39 2b       	or	r19, r25
    7a50:	80 91 32 04 	lds	r24, 0x0432
    7a54:	90 91 33 04 	lds	r25, 0x0433
    7a58:	28 1b       	sub	r18, r24
    7a5a:	39 0b       	sbc	r19, r25
    7a5c:	30 93 2d 04 	sts	0x042D, r19
    7a60:	20 93 2c 04 	sts	0x042C, r18
		accX = 0;
		accY = 0;

	}

}
    7a64:	0f 90       	pop	r0
    7a66:	cf 91       	pop	r28
    7a68:	df 91       	pop	r29
    7a6a:	1f 91       	pop	r17
    7a6c:	0f 91       	pop	r16
    7a6e:	ff 90       	pop	r15
    7a70:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    7a72:	80 91 14 02 	lds	r24, 0x0214
    7a76:	0e 94 ed 1b 	call	0x37da	; 0x37da <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    7a7a:	82 e3       	ldi	r24, 0x32	; 50
    7a7c:	86 cf       	rjmp	.-244    	; 0x798a <readAccelXY+0x46>

00007a7e <readAccelXYZ>:

	}

}

void readAccelXYZ() {
    7a7e:	df 93       	push	r29
    7a80:	cf 93       	push	r28
    7a82:	00 d0       	rcall	.+0      	; 0x7a84 <readAccelXYZ+0x6>
    7a84:	00 d0       	rcall	.+0      	; 0x7a86 <readAccelXYZ+0x8>
    7a86:	cd b7       	in	r28, 0x3d	; 61
    7a88:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[6];

	if(useAccel == USE_MMAX7455L) {
    7a8a:	80 91 29 04 	lds	r24, 0x0429
    7a8e:	88 23       	and	r24, r24
    7a90:	c1 f0       	breq	.+48     	; 0x7ac2 <readAccelXYZ+0x44>
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    7a92:	81 30       	cpi	r24, 0x01	; 1
    7a94:	09 f4       	brne	.+2      	; 0x7a98 <readAccelXYZ+0x1a>
    7a96:	ad c0       	rjmp	.+346    	; 0x7bf2 <readAccelXYZ+0x174>
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else {

		accX = 0;
    7a98:	10 92 2b 04 	sts	0x042B, r1
    7a9c:	10 92 2a 04 	sts	0x042A, r1
		accY = 0;
    7aa0:	10 92 2d 04 	sts	0x042D, r1
    7aa4:	10 92 2c 04 	sts	0x042C, r1
		accZ = 0;
    7aa8:	10 92 2f 04 	sts	0x042F, r1
    7aac:	10 92 2e 04 	sts	0x042E, r1

	}

}
    7ab0:	26 96       	adiw	r28, 0x06	; 6
    7ab2:	0f b6       	in	r0, 0x3f	; 63
    7ab4:	f8 94       	cli
    7ab6:	de bf       	out	0x3e, r29	; 62
    7ab8:	0f be       	out	0x3f, r0	; 63
    7aba:	cd bf       	out	0x3d, r28	; 61
    7abc:	cf 91       	pop	r28
    7abe:	df 91       	pop	r29
    7ac0:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    7ac2:	80 91 14 02 	lds	r24, 0x0214
    7ac6:	0e 94 ed 1b 	call	0x37da	; 0x37da <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    7aca:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
		i2c_write(0x32);											// sends address to read from (X LSB)
    7acc:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    7ad0:	80 91 14 02 	lds	r24, 0x0214
    7ad4:	8f 5f       	subi	r24, 0xFF	; 255
    7ad6:	0e 94 3a 1c 	call	0x3874	; 0x3874 <i2c_rep_start>

		for(i=0; i<5; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    7ada:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <i2c_readAck>
    7ade:	89 83       	std	Y+1, r24	; 0x01
    7ae0:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <i2c_readAck>
    7ae4:	8a 83       	std	Y+2, r24	; 0x02
    7ae6:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <i2c_readAck>
    7aea:	8b 83       	std	Y+3, r24	; 0x03
    7aec:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <i2c_readAck>
    7af0:	8c 83       	std	Y+4, r24	; 0x04
    7af2:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <i2c_readAck>
    7af6:	8d 83       	std	Y+5, r24	; 0x05
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    7af8:	0e 94 84 1c 	call	0x3908	; 0x3908 <i2c_readNak>
    7afc:	8e 83       	std	Y+6, r24	; 0x06
		i2c_stop();													// set stop conditon = release bus
    7afe:	0e 94 60 1c 	call	0x38c0	; 0x38c0 <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    7b02:	80 91 0b 09 	lds	r24, 0x090B
    7b06:	88 23       	and	r24, r24
    7b08:	89 f1       	breq	.+98     	; 0x7b6c <readAccelXYZ+0xee>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    7b0a:	8a 81       	ldd	r24, Y+2	; 0x02
    7b0c:	99 27       	eor	r25, r25
    7b0e:	87 fd       	sbrc	r24, 7
    7b10:	90 95       	com	r25
    7b12:	98 2f       	mov	r25, r24
    7b14:	88 27       	eor	r24, r24
    7b16:	29 81       	ldd	r18, Y+1	; 0x01
    7b18:	33 27       	eor	r19, r19
    7b1a:	27 fd       	sbrc	r18, 7
    7b1c:	30 95       	com	r19
    7b1e:	82 2b       	or	r24, r18
    7b20:	93 2b       	or	r25, r19
    7b22:	90 93 2b 04 	sts	0x042B, r25
    7b26:	80 93 2a 04 	sts	0x042A, r24
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    7b2a:	8c 81       	ldd	r24, Y+4	; 0x04
    7b2c:	99 27       	eor	r25, r25
    7b2e:	87 fd       	sbrc	r24, 7
    7b30:	90 95       	com	r25
    7b32:	98 2f       	mov	r25, r24
    7b34:	88 27       	eor	r24, r24
    7b36:	2b 81       	ldd	r18, Y+3	; 0x03
    7b38:	33 27       	eor	r19, r19
    7b3a:	27 fd       	sbrc	r18, 7
    7b3c:	30 95       	com	r19
    7b3e:	82 2b       	or	r24, r18
    7b40:	93 2b       	or	r25, r19
    7b42:	90 93 2d 04 	sts	0x042D, r25
    7b46:	80 93 2c 04 	sts	0x042C, r24
			accZ = ((signed int)buff[5]<<8)|buff[4];    			// Z axis
    7b4a:	8e 81       	ldd	r24, Y+6	; 0x06
    7b4c:	99 27       	eor	r25, r25
    7b4e:	87 fd       	sbrc	r24, 7
    7b50:	90 95       	com	r25
    7b52:	98 2f       	mov	r25, r24
    7b54:	88 27       	eor	r24, r24
    7b56:	2d 81       	ldd	r18, Y+5	; 0x05
    7b58:	33 27       	eor	r19, r19
    7b5a:	27 fd       	sbrc	r18, 7
    7b5c:	30 95       	com	r19
    7b5e:	82 2b       	or	r24, r18
    7b60:	93 2b       	or	r25, r19
    7b62:	90 93 2f 04 	sts	0x042F, r25
    7b66:	80 93 2e 04 	sts	0x042E, r24
    7b6a:	a2 cf       	rjmp	.-188    	; 0x7ab0 <readAccelXYZ+0x32>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    7b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    7b6e:	99 27       	eor	r25, r25
    7b70:	87 fd       	sbrc	r24, 7
    7b72:	90 95       	com	r25
    7b74:	98 2f       	mov	r25, r24
    7b76:	88 27       	eor	r24, r24
    7b78:	29 81       	ldd	r18, Y+1	; 0x01
    7b7a:	33 27       	eor	r19, r19
    7b7c:	27 fd       	sbrc	r18, 7
    7b7e:	30 95       	com	r19
    7b80:	82 2b       	or	r24, r18
    7b82:	93 2b       	or	r25, r19
    7b84:	20 91 30 04 	lds	r18, 0x0430
    7b88:	30 91 31 04 	lds	r19, 0x0431
    7b8c:	82 1b       	sub	r24, r18
    7b8e:	93 0b       	sbc	r25, r19
    7b90:	90 93 2b 04 	sts	0x042B, r25
    7b94:	80 93 2a 04 	sts	0x042A, r24
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    7b98:	8c 81       	ldd	r24, Y+4	; 0x04
    7b9a:	99 27       	eor	r25, r25
    7b9c:	87 fd       	sbrc	r24, 7
    7b9e:	90 95       	com	r25
    7ba0:	98 2f       	mov	r25, r24
    7ba2:	88 27       	eor	r24, r24
    7ba4:	2b 81       	ldd	r18, Y+3	; 0x03
    7ba6:	33 27       	eor	r19, r19
    7ba8:	27 fd       	sbrc	r18, 7
    7baa:	30 95       	com	r19
    7bac:	82 2b       	or	r24, r18
    7bae:	93 2b       	or	r25, r19
    7bb0:	20 91 32 04 	lds	r18, 0x0432
    7bb4:	30 91 33 04 	lds	r19, 0x0433
    7bb8:	82 1b       	sub	r24, r18
    7bba:	93 0b       	sbc	r25, r19
    7bbc:	90 93 2d 04 	sts	0x042D, r25
    7bc0:	80 93 2c 04 	sts	0x042C, r24
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
    7bc4:	8e 81       	ldd	r24, Y+6	; 0x06
    7bc6:	99 27       	eor	r25, r25
    7bc8:	87 fd       	sbrc	r24, 7
    7bca:	90 95       	com	r25
    7bcc:	98 2f       	mov	r25, r24
    7bce:	88 27       	eor	r24, r24
    7bd0:	2d 81       	ldd	r18, Y+5	; 0x05
    7bd2:	33 27       	eor	r19, r19
    7bd4:	27 fd       	sbrc	r18, 7
    7bd6:	30 95       	com	r19
    7bd8:	82 2b       	or	r24, r18
    7bda:	93 2b       	or	r25, r19
    7bdc:	20 91 34 04 	lds	r18, 0x0434
    7be0:	30 91 35 04 	lds	r19, 0x0435
    7be4:	82 1b       	sub	r24, r18
    7be6:	93 0b       	sbc	r25, r19
    7be8:	90 93 2f 04 	sts	0x042F, r25
    7bec:	80 93 2e 04 	sts	0x042E, r24
    7bf0:	5f cf       	rjmp	.-322    	; 0x7ab0 <readAccelXYZ+0x32>
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    7bf2:	80 91 14 02 	lds	r24, 0x0214
    7bf6:	0e 94 ed 1b 	call	0x37da	; 0x37da <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    7bfa:	82 e3       	ldi	r24, 0x32	; 50
    7bfc:	67 cf       	rjmp	.-306    	; 0x7acc <readAccelXYZ+0x4e>

00007bfe <calibrateSensors>:

#include "sensors.h"


void calibrateSensors() {
    7bfe:	cf 93       	push	r28
    7c00:	df 93       	push	r29

	unsigned int i=0;

	pwm_red = 0;
    7c02:	10 92 0c 02 	sts	0x020C, r1
	pwm_green = 0;
    7c06:	10 92 0d 02 	sts	0x020D, r1
	pwm_blue = 0;
    7c0a:	10 92 0e 02 	sts	0x020E, r1
	updateRedLed(pwm_red);
    7c0e:	80 e0       	ldi	r24, 0x00	; 0
    7c10:	0e 94 07 3b 	call	0x760e	; 0x760e <updateRedLed>
	updateGreenLed(pwm_green);
    7c14:	80 91 0d 02 	lds	r24, 0x020D
    7c18:	0e 94 1b 3b 	call	0x7636	; 0x7636 <updateGreenLed>
	updateBlueLed(pwm_blue);
    7c1c:	80 91 0e 02 	lds	r24, 0x020E
    7c20:	0e 94 2f 3b 	call	0x765e	; 0x765e <updateBlueLed>

	calibrationCycle = 0;
    7c24:	10 92 4c 04 	sts	0x044C, r1
    7c28:	10 92 4b 04 	sts	0x044B, r1
	startCalibration = 1;
    7c2c:	81 e0       	ldi	r24, 0x01	; 1
    7c2e:	80 93 0b 09 	sts	0x090B, r24
					}
					accOffsetXSum = 0;
					accOffsetYSum = 0;
					accOffsetZSum = 0;

					calibrationCycle++;
    7c32:	c1 e0       	ldi	r28, 0x01	; 1
    7c34:	d0 e0       	ldi	r29, 0x00	; 0
	calibrationCycle = 0;
	startCalibration = 1;

	while(startCalibration) {

		readAccelXYZ();
    7c36:	0e 94 3f 3d 	call	0x7a7e	; 0x7a7e <readAccelXYZ>

		if(calibrationCycle<=CALIBRATION_CYCLES) {
    7c3a:	20 91 4b 04 	lds	r18, 0x044B
    7c3e:	30 91 4c 04 	lds	r19, 0x044C
    7c42:	21 31       	cpi	r18, 0x11	; 17
    7c44:	31 05       	cpc	r19, r1
    7c46:	0c f4       	brge	.+2      	; 0x7c4a <calibrateSensors+0x4c>
    7c48:	35 c1       	rjmp	.+618    	; 0x7eb4 <calibrateSensors+0x2b6>
			continue;

		} else if(calibrationCycle > CALIBRATION_CYCLES) {

			for(i=0;i<12;i++) {
				proximityOffset[i] = proximitySum[i]>>4;
    7c4a:	80 91 89 02 	lds	r24, 0x0289
    7c4e:	90 91 8a 02 	lds	r25, 0x028A
    7c52:	a0 91 8b 02 	lds	r26, 0x028B
    7c56:	b0 91 8c 02 	lds	r27, 0x028C
    7c5a:	54 e0       	ldi	r21, 0x04	; 4
    7c5c:	b6 95       	lsr	r27
    7c5e:	a7 95       	ror	r26
    7c60:	97 95       	ror	r25
    7c62:	87 95       	ror	r24
    7c64:	5a 95       	dec	r21
    7c66:	d1 f7       	brne	.-12     	; 0x7c5c <calibrateSensors+0x5e>
    7c68:	90 93 72 02 	sts	0x0272, r25
    7c6c:	80 93 71 02 	sts	0x0271, r24
    7c70:	80 91 8d 02 	lds	r24, 0x028D
    7c74:	90 91 8e 02 	lds	r25, 0x028E
    7c78:	a0 91 8f 02 	lds	r26, 0x028F
    7c7c:	b0 91 90 02 	lds	r27, 0x0290
    7c80:	44 e0       	ldi	r20, 0x04	; 4
    7c82:	b6 95       	lsr	r27
    7c84:	a7 95       	ror	r26
    7c86:	97 95       	ror	r25
    7c88:	87 95       	ror	r24
    7c8a:	4a 95       	dec	r20
    7c8c:	d1 f7       	brne	.-12     	; 0x7c82 <calibrateSensors+0x84>
    7c8e:	90 93 74 02 	sts	0x0274, r25
    7c92:	80 93 73 02 	sts	0x0273, r24
    7c96:	80 91 91 02 	lds	r24, 0x0291
    7c9a:	90 91 92 02 	lds	r25, 0x0292
    7c9e:	a0 91 93 02 	lds	r26, 0x0293
    7ca2:	b0 91 94 02 	lds	r27, 0x0294
    7ca6:	34 e0       	ldi	r19, 0x04	; 4
    7ca8:	b6 95       	lsr	r27
    7caa:	a7 95       	ror	r26
    7cac:	97 95       	ror	r25
    7cae:	87 95       	ror	r24
    7cb0:	3a 95       	dec	r19
    7cb2:	d1 f7       	brne	.-12     	; 0x7ca8 <calibrateSensors+0xaa>
    7cb4:	90 93 76 02 	sts	0x0276, r25
    7cb8:	80 93 75 02 	sts	0x0275, r24
    7cbc:	80 91 95 02 	lds	r24, 0x0295
    7cc0:	90 91 96 02 	lds	r25, 0x0296
    7cc4:	a0 91 97 02 	lds	r26, 0x0297
    7cc8:	b0 91 98 02 	lds	r27, 0x0298
    7ccc:	24 e0       	ldi	r18, 0x04	; 4
    7cce:	b6 95       	lsr	r27
    7cd0:	a7 95       	ror	r26
    7cd2:	97 95       	ror	r25
    7cd4:	87 95       	ror	r24
    7cd6:	2a 95       	dec	r18
    7cd8:	d1 f7       	brne	.-12     	; 0x7cce <calibrateSensors+0xd0>
    7cda:	90 93 78 02 	sts	0x0278, r25
    7cde:	80 93 77 02 	sts	0x0277, r24
    7ce2:	80 91 99 02 	lds	r24, 0x0299
    7ce6:	90 91 9a 02 	lds	r25, 0x029A
    7cea:	a0 91 9b 02 	lds	r26, 0x029B
    7cee:	b0 91 9c 02 	lds	r27, 0x029C
    7cf2:	f4 e0       	ldi	r31, 0x04	; 4
    7cf4:	b6 95       	lsr	r27
    7cf6:	a7 95       	ror	r26
    7cf8:	97 95       	ror	r25
    7cfa:	87 95       	ror	r24
    7cfc:	fa 95       	dec	r31
    7cfe:	d1 f7       	brne	.-12     	; 0x7cf4 <calibrateSensors+0xf6>
    7d00:	90 93 7a 02 	sts	0x027A, r25
    7d04:	80 93 79 02 	sts	0x0279, r24
    7d08:	80 91 9d 02 	lds	r24, 0x029D
    7d0c:	90 91 9e 02 	lds	r25, 0x029E
    7d10:	a0 91 9f 02 	lds	r26, 0x029F
    7d14:	b0 91 a0 02 	lds	r27, 0x02A0
    7d18:	e4 e0       	ldi	r30, 0x04	; 4
    7d1a:	b6 95       	lsr	r27
    7d1c:	a7 95       	ror	r26
    7d1e:	97 95       	ror	r25
    7d20:	87 95       	ror	r24
    7d22:	ea 95       	dec	r30
    7d24:	d1 f7       	brne	.-12     	; 0x7d1a <calibrateSensors+0x11c>
    7d26:	90 93 7c 02 	sts	0x027C, r25
    7d2a:	80 93 7b 02 	sts	0x027B, r24
    7d2e:	80 91 a1 02 	lds	r24, 0x02A1
    7d32:	90 91 a2 02 	lds	r25, 0x02A2
    7d36:	a0 91 a3 02 	lds	r26, 0x02A3
    7d3a:	b0 91 a4 02 	lds	r27, 0x02A4
    7d3e:	74 e0       	ldi	r23, 0x04	; 4
    7d40:	b6 95       	lsr	r27
    7d42:	a7 95       	ror	r26
    7d44:	97 95       	ror	r25
    7d46:	87 95       	ror	r24
    7d48:	7a 95       	dec	r23
    7d4a:	d1 f7       	brne	.-12     	; 0x7d40 <calibrateSensors+0x142>
    7d4c:	90 93 7e 02 	sts	0x027E, r25
    7d50:	80 93 7d 02 	sts	0x027D, r24
    7d54:	80 91 a5 02 	lds	r24, 0x02A5
    7d58:	90 91 a6 02 	lds	r25, 0x02A6
    7d5c:	a0 91 a7 02 	lds	r26, 0x02A7
    7d60:	b0 91 a8 02 	lds	r27, 0x02A8
    7d64:	64 e0       	ldi	r22, 0x04	; 4
    7d66:	b6 95       	lsr	r27
    7d68:	a7 95       	ror	r26
    7d6a:	97 95       	ror	r25
    7d6c:	87 95       	ror	r24
    7d6e:	6a 95       	dec	r22
    7d70:	d1 f7       	brne	.-12     	; 0x7d66 <calibrateSensors+0x168>
    7d72:	90 93 80 02 	sts	0x0280, r25
    7d76:	80 93 7f 02 	sts	0x027F, r24
    7d7a:	80 91 ad 02 	lds	r24, 0x02AD
    7d7e:	90 91 ae 02 	lds	r25, 0x02AE
    7d82:	a0 91 af 02 	lds	r26, 0x02AF
    7d86:	b0 91 b0 02 	lds	r27, 0x02B0
    7d8a:	54 e0       	ldi	r21, 0x04	; 4
    7d8c:	b6 95       	lsr	r27
    7d8e:	a7 95       	ror	r26
    7d90:	97 95       	ror	r25
    7d92:	87 95       	ror	r24
    7d94:	5a 95       	dec	r21
    7d96:	d1 f7       	brne	.-12     	; 0x7d8c <calibrateSensors+0x18e>
    7d98:	9c 01       	movw	r18, r24
    7d9a:	80 91 b1 02 	lds	r24, 0x02B1
    7d9e:	90 91 b2 02 	lds	r25, 0x02B2
    7da2:	a0 91 b3 02 	lds	r26, 0x02B3
    7da6:	b0 91 b4 02 	lds	r27, 0x02B4
    7daa:	44 e0       	ldi	r20, 0x04	; 4
    7dac:	b6 95       	lsr	r27
    7dae:	a7 95       	ror	r26
    7db0:	97 95       	ror	r25
    7db2:	87 95       	ror	r24
    7db4:	4a 95       	dec	r20
    7db6:	d1 f7       	brne	.-12     	; 0x7dac <calibrateSensors+0x1ae>
    7db8:	bc 01       	movw	r22, r24
    7dba:	80 91 b5 02 	lds	r24, 0x02B5
    7dbe:	90 91 b6 02 	lds	r25, 0x02B6
    7dc2:	a0 91 b7 02 	lds	r26, 0x02B7
    7dc6:	b0 91 b8 02 	lds	r27, 0x02B8
    7dca:	f4 e0       	ldi	r31, 0x04	; 4
    7dcc:	b6 95       	lsr	r27
    7dce:	a7 95       	ror	r26
    7dd0:	97 95       	ror	r25
    7dd2:	87 95       	ror	r24
    7dd4:	fa 95       	dec	r31
    7dd6:	d1 f7       	brne	.-12     	; 0x7dcc <calibrateSensors+0x1ce>
    7dd8:	ac 01       	movw	r20, r24
    7dda:	80 91 a9 02 	lds	r24, 0x02A9
    7dde:	90 91 aa 02 	lds	r25, 0x02AA
    7de2:	a0 91 ab 02 	lds	r26, 0x02AB
    7de6:	b0 91 ac 02 	lds	r27, 0x02AC
    7dea:	e4 e0       	ldi	r30, 0x04	; 4
    7dec:	b6 95       	lsr	r27
    7dee:	a7 95       	ror	r26
    7df0:	97 95       	ror	r25
    7df2:	87 95       	ror	r24
    7df4:	ea 95       	dec	r30
    7df6:	d1 f7       	brne	.-12     	; 0x7dec <calibrateSensors+0x1ee>
			}

			for(i=8; i<12; i++) {
				proximityOffset[i] -= 512;	// move the "0" to 512 (values around 512)
    7df8:	80 50       	subi	r24, 0x00	; 0
    7dfa:	92 40       	sbci	r25, 0x02	; 2
    7dfc:	90 93 82 02 	sts	0x0282, r25
    7e00:	80 93 81 02 	sts	0x0281, r24
    7e04:	20 50       	subi	r18, 0x00	; 0
    7e06:	32 40       	sbci	r19, 0x02	; 2
    7e08:	30 93 84 02 	sts	0x0284, r19
    7e0c:	20 93 83 02 	sts	0x0283, r18
    7e10:	60 50       	subi	r22, 0x00	; 0
    7e12:	72 40       	sbci	r23, 0x02	; 2
    7e14:	70 93 86 02 	sts	0x0286, r23
    7e18:	60 93 85 02 	sts	0x0285, r22
    7e1c:	40 50       	subi	r20, 0x00	; 0
    7e1e:	52 40       	sbci	r21, 0x02	; 2
    7e20:	50 93 88 02 	sts	0x0288, r21
    7e24:	40 93 87 02 	sts	0x0287, r20
			}

			accOffsetX = accOffsetXSum>>4;
    7e28:	80 91 36 04 	lds	r24, 0x0436
    7e2c:	90 91 37 04 	lds	r25, 0x0437
    7e30:	95 95       	asr	r25
    7e32:	87 95       	ror	r24
    7e34:	95 95       	asr	r25
    7e36:	87 95       	ror	r24
    7e38:	95 95       	asr	r25
    7e3a:	87 95       	ror	r24
    7e3c:	95 95       	asr	r25
    7e3e:	87 95       	ror	r24
    7e40:	90 93 31 04 	sts	0x0431, r25
    7e44:	80 93 30 04 	sts	0x0430, r24
			accOffsetY = accOffsetYSum>>4;
    7e48:	80 91 38 04 	lds	r24, 0x0438
    7e4c:	90 91 39 04 	lds	r25, 0x0439
    7e50:	95 95       	asr	r25
    7e52:	87 95       	ror	r24
    7e54:	95 95       	asr	r25
    7e56:	87 95       	ror	r24
    7e58:	95 95       	asr	r25
    7e5a:	87 95       	ror	r24
    7e5c:	95 95       	asr	r25
    7e5e:	87 95       	ror	r24
    7e60:	90 93 33 04 	sts	0x0433, r25
    7e64:	80 93 32 04 	sts	0x0432, r24
			accOffsetZ = accOffsetZSum>>4;
    7e68:	80 91 3a 04 	lds	r24, 0x043A
    7e6c:	90 91 3b 04 	lds	r25, 0x043B
    7e70:	95 95       	asr	r25
    7e72:	87 95       	ror	r24
    7e74:	95 95       	asr	r25
    7e76:	87 95       	ror	r24
    7e78:	95 95       	asr	r25
    7e7a:	87 95       	ror	r24
    7e7c:	95 95       	asr	r25
    7e7e:	87 95       	ror	r24
    7e80:	90 93 35 04 	sts	0x0435, r25
    7e84:	80 93 34 04 	sts	0x0434, r24

			//proxUpdated = 0;
			//if(proxUpdated) {	
				startCalibration = 0;					
    7e88:	10 92 0b 09 	sts	0x090B, r1

		}

	}

	pwm_red = 255;
    7e8c:	8f ef       	ldi	r24, 0xFF	; 255
    7e8e:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    7e92:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    7e96:	80 93 0e 02 	sts	0x020E, r24
	updateRedLed(pwm_red);
    7e9a:	0e 94 07 3b 	call	0x760e	; 0x760e <updateRedLed>
	updateGreenLed(pwm_green);
    7e9e:	80 91 0d 02 	lds	r24, 0x020D
    7ea2:	0e 94 1b 3b 	call	0x7636	; 0x7636 <updateGreenLed>
	updateBlueLed(pwm_blue);
    7ea6:	80 91 0e 02 	lds	r24, 0x020E
    7eaa:	0e 94 2f 3b 	call	0x765e	; 0x765e <updateBlueLed>

}
    7eae:	df 91       	pop	r29
    7eb0:	cf 91       	pop	r28
    7eb2:	08 95       	ret

		readAccelXYZ();

		if(calibrationCycle<=CALIBRATION_CYCLES) {

			if(proxUpdated) {
    7eb4:	80 91 c0 02 	lds	r24, 0x02C0
    7eb8:	88 23       	and	r24, r24
    7eba:	09 f4       	brne	.+2      	; 0x7ebe <calibrateSensors+0x2c0>
    7ebc:	86 c1       	rjmp	.+780    	; 0x81ca <calibrateSensors+0x5cc>

				proxUpdated = 0;
    7ebe:	10 92 c0 02 	sts	0x02C0, r1

				if(calibrationCycle==0) {		// reset all variables
    7ec2:	21 15       	cp	r18, r1
    7ec4:	31 05       	cpc	r19, r1
    7ec6:	09 f4       	brne	.+2      	; 0x7eca <calibrateSensors+0x2cc>
    7ec8:	86 c1       	rjmp	.+780    	; 0x81d6 <calibrateSensors+0x5d8>
												// "proximityResult" hasn't the offset reset to 0. so we start the actual calibration
												// the next time
				}

				for (i=0;i<12;i++) {
					proximitySum[i] += proximityResult[i];
    7eca:	80 91 59 02 	lds	r24, 0x0259
    7ece:	90 91 5a 02 	lds	r25, 0x025A
    7ed2:	aa 27       	eor	r26, r26
    7ed4:	97 fd       	sbrc	r25, 7
    7ed6:	a0 95       	com	r26
    7ed8:	ba 2f       	mov	r27, r26
    7eda:	40 91 89 02 	lds	r20, 0x0289
    7ede:	50 91 8a 02 	lds	r21, 0x028A
    7ee2:	60 91 8b 02 	lds	r22, 0x028B
    7ee6:	70 91 8c 02 	lds	r23, 0x028C
    7eea:	84 0f       	add	r24, r20
    7eec:	95 1f       	adc	r25, r21
    7eee:	a6 1f       	adc	r26, r22
    7ef0:	b7 1f       	adc	r27, r23
    7ef2:	80 93 89 02 	sts	0x0289, r24
    7ef6:	90 93 8a 02 	sts	0x028A, r25
    7efa:	a0 93 8b 02 	sts	0x028B, r26
    7efe:	b0 93 8c 02 	sts	0x028C, r27
    7f02:	80 91 5b 02 	lds	r24, 0x025B
    7f06:	90 91 5c 02 	lds	r25, 0x025C
    7f0a:	aa 27       	eor	r26, r26
    7f0c:	97 fd       	sbrc	r25, 7
    7f0e:	a0 95       	com	r26
    7f10:	ba 2f       	mov	r27, r26
    7f12:	40 91 8d 02 	lds	r20, 0x028D
    7f16:	50 91 8e 02 	lds	r21, 0x028E
    7f1a:	60 91 8f 02 	lds	r22, 0x028F
    7f1e:	70 91 90 02 	lds	r23, 0x0290
    7f22:	84 0f       	add	r24, r20
    7f24:	95 1f       	adc	r25, r21
    7f26:	a6 1f       	adc	r26, r22
    7f28:	b7 1f       	adc	r27, r23
    7f2a:	80 93 8d 02 	sts	0x028D, r24
    7f2e:	90 93 8e 02 	sts	0x028E, r25
    7f32:	a0 93 8f 02 	sts	0x028F, r26
    7f36:	b0 93 90 02 	sts	0x0290, r27
    7f3a:	80 91 5d 02 	lds	r24, 0x025D
    7f3e:	90 91 5e 02 	lds	r25, 0x025E
    7f42:	aa 27       	eor	r26, r26
    7f44:	97 fd       	sbrc	r25, 7
    7f46:	a0 95       	com	r26
    7f48:	ba 2f       	mov	r27, r26
    7f4a:	40 91 91 02 	lds	r20, 0x0291
    7f4e:	50 91 92 02 	lds	r21, 0x0292
    7f52:	60 91 93 02 	lds	r22, 0x0293
    7f56:	70 91 94 02 	lds	r23, 0x0294
    7f5a:	84 0f       	add	r24, r20
    7f5c:	95 1f       	adc	r25, r21
    7f5e:	a6 1f       	adc	r26, r22
    7f60:	b7 1f       	adc	r27, r23
    7f62:	80 93 91 02 	sts	0x0291, r24
    7f66:	90 93 92 02 	sts	0x0292, r25
    7f6a:	a0 93 93 02 	sts	0x0293, r26
    7f6e:	b0 93 94 02 	sts	0x0294, r27
    7f72:	80 91 5f 02 	lds	r24, 0x025F
    7f76:	90 91 60 02 	lds	r25, 0x0260
    7f7a:	aa 27       	eor	r26, r26
    7f7c:	97 fd       	sbrc	r25, 7
    7f7e:	a0 95       	com	r26
    7f80:	ba 2f       	mov	r27, r26
    7f82:	40 91 95 02 	lds	r20, 0x0295
    7f86:	50 91 96 02 	lds	r21, 0x0296
    7f8a:	60 91 97 02 	lds	r22, 0x0297
    7f8e:	70 91 98 02 	lds	r23, 0x0298
    7f92:	84 0f       	add	r24, r20
    7f94:	95 1f       	adc	r25, r21
    7f96:	a6 1f       	adc	r26, r22
    7f98:	b7 1f       	adc	r27, r23
    7f9a:	80 93 95 02 	sts	0x0295, r24
    7f9e:	90 93 96 02 	sts	0x0296, r25
    7fa2:	a0 93 97 02 	sts	0x0297, r26
    7fa6:	b0 93 98 02 	sts	0x0298, r27
    7faa:	80 91 61 02 	lds	r24, 0x0261
    7fae:	90 91 62 02 	lds	r25, 0x0262
    7fb2:	aa 27       	eor	r26, r26
    7fb4:	97 fd       	sbrc	r25, 7
    7fb6:	a0 95       	com	r26
    7fb8:	ba 2f       	mov	r27, r26
    7fba:	40 91 99 02 	lds	r20, 0x0299
    7fbe:	50 91 9a 02 	lds	r21, 0x029A
    7fc2:	60 91 9b 02 	lds	r22, 0x029B
    7fc6:	70 91 9c 02 	lds	r23, 0x029C
    7fca:	84 0f       	add	r24, r20
    7fcc:	95 1f       	adc	r25, r21
    7fce:	a6 1f       	adc	r26, r22
    7fd0:	b7 1f       	adc	r27, r23
    7fd2:	80 93 99 02 	sts	0x0299, r24
    7fd6:	90 93 9a 02 	sts	0x029A, r25
    7fda:	a0 93 9b 02 	sts	0x029B, r26
    7fde:	b0 93 9c 02 	sts	0x029C, r27
    7fe2:	80 91 63 02 	lds	r24, 0x0263
    7fe6:	90 91 64 02 	lds	r25, 0x0264
    7fea:	aa 27       	eor	r26, r26
    7fec:	97 fd       	sbrc	r25, 7
    7fee:	a0 95       	com	r26
    7ff0:	ba 2f       	mov	r27, r26
    7ff2:	40 91 9d 02 	lds	r20, 0x029D
    7ff6:	50 91 9e 02 	lds	r21, 0x029E
    7ffa:	60 91 9f 02 	lds	r22, 0x029F
    7ffe:	70 91 a0 02 	lds	r23, 0x02A0
    8002:	84 0f       	add	r24, r20
    8004:	95 1f       	adc	r25, r21
    8006:	a6 1f       	adc	r26, r22
    8008:	b7 1f       	adc	r27, r23
    800a:	80 93 9d 02 	sts	0x029D, r24
    800e:	90 93 9e 02 	sts	0x029E, r25
    8012:	a0 93 9f 02 	sts	0x029F, r26
    8016:	b0 93 a0 02 	sts	0x02A0, r27
    801a:	80 91 65 02 	lds	r24, 0x0265
    801e:	90 91 66 02 	lds	r25, 0x0266
    8022:	aa 27       	eor	r26, r26
    8024:	97 fd       	sbrc	r25, 7
    8026:	a0 95       	com	r26
    8028:	ba 2f       	mov	r27, r26
    802a:	40 91 a1 02 	lds	r20, 0x02A1
    802e:	50 91 a2 02 	lds	r21, 0x02A2
    8032:	60 91 a3 02 	lds	r22, 0x02A3
    8036:	70 91 a4 02 	lds	r23, 0x02A4
    803a:	84 0f       	add	r24, r20
    803c:	95 1f       	adc	r25, r21
    803e:	a6 1f       	adc	r26, r22
    8040:	b7 1f       	adc	r27, r23
    8042:	80 93 a1 02 	sts	0x02A1, r24
    8046:	90 93 a2 02 	sts	0x02A2, r25
    804a:	a0 93 a3 02 	sts	0x02A3, r26
    804e:	b0 93 a4 02 	sts	0x02A4, r27
    8052:	80 91 67 02 	lds	r24, 0x0267
    8056:	90 91 68 02 	lds	r25, 0x0268
    805a:	aa 27       	eor	r26, r26
    805c:	97 fd       	sbrc	r25, 7
    805e:	a0 95       	com	r26
    8060:	ba 2f       	mov	r27, r26
    8062:	40 91 a5 02 	lds	r20, 0x02A5
    8066:	50 91 a6 02 	lds	r21, 0x02A6
    806a:	60 91 a7 02 	lds	r22, 0x02A7
    806e:	70 91 a8 02 	lds	r23, 0x02A8
    8072:	84 0f       	add	r24, r20
    8074:	95 1f       	adc	r25, r21
    8076:	a6 1f       	adc	r26, r22
    8078:	b7 1f       	adc	r27, r23
    807a:	80 93 a5 02 	sts	0x02A5, r24
    807e:	90 93 a6 02 	sts	0x02A6, r25
    8082:	a0 93 a7 02 	sts	0x02A7, r26
    8086:	b0 93 a8 02 	sts	0x02A8, r27
    808a:	80 91 69 02 	lds	r24, 0x0269
    808e:	90 91 6a 02 	lds	r25, 0x026A
    8092:	aa 27       	eor	r26, r26
    8094:	97 fd       	sbrc	r25, 7
    8096:	a0 95       	com	r26
    8098:	ba 2f       	mov	r27, r26
    809a:	40 91 a9 02 	lds	r20, 0x02A9
    809e:	50 91 aa 02 	lds	r21, 0x02AA
    80a2:	60 91 ab 02 	lds	r22, 0x02AB
    80a6:	70 91 ac 02 	lds	r23, 0x02AC
    80aa:	84 0f       	add	r24, r20
    80ac:	95 1f       	adc	r25, r21
    80ae:	a6 1f       	adc	r26, r22
    80b0:	b7 1f       	adc	r27, r23
    80b2:	80 93 a9 02 	sts	0x02A9, r24
    80b6:	90 93 aa 02 	sts	0x02AA, r25
    80ba:	a0 93 ab 02 	sts	0x02AB, r26
    80be:	b0 93 ac 02 	sts	0x02AC, r27
    80c2:	80 91 6b 02 	lds	r24, 0x026B
    80c6:	90 91 6c 02 	lds	r25, 0x026C
    80ca:	aa 27       	eor	r26, r26
    80cc:	97 fd       	sbrc	r25, 7
    80ce:	a0 95       	com	r26
    80d0:	ba 2f       	mov	r27, r26
    80d2:	40 91 ad 02 	lds	r20, 0x02AD
    80d6:	50 91 ae 02 	lds	r21, 0x02AE
    80da:	60 91 af 02 	lds	r22, 0x02AF
    80de:	70 91 b0 02 	lds	r23, 0x02B0
    80e2:	84 0f       	add	r24, r20
    80e4:	95 1f       	adc	r25, r21
    80e6:	a6 1f       	adc	r26, r22
    80e8:	b7 1f       	adc	r27, r23
    80ea:	80 93 ad 02 	sts	0x02AD, r24
    80ee:	90 93 ae 02 	sts	0x02AE, r25
    80f2:	a0 93 af 02 	sts	0x02AF, r26
    80f6:	b0 93 b0 02 	sts	0x02B0, r27
    80fa:	80 91 6d 02 	lds	r24, 0x026D
    80fe:	90 91 6e 02 	lds	r25, 0x026E
    8102:	aa 27       	eor	r26, r26
    8104:	97 fd       	sbrc	r25, 7
    8106:	a0 95       	com	r26
    8108:	ba 2f       	mov	r27, r26
    810a:	40 91 b1 02 	lds	r20, 0x02B1
    810e:	50 91 b2 02 	lds	r21, 0x02B2
    8112:	60 91 b3 02 	lds	r22, 0x02B3
    8116:	70 91 b4 02 	lds	r23, 0x02B4
    811a:	84 0f       	add	r24, r20
    811c:	95 1f       	adc	r25, r21
    811e:	a6 1f       	adc	r26, r22
    8120:	b7 1f       	adc	r27, r23
    8122:	80 93 b1 02 	sts	0x02B1, r24
    8126:	90 93 b2 02 	sts	0x02B2, r25
    812a:	a0 93 b3 02 	sts	0x02B3, r26
    812e:	b0 93 b4 02 	sts	0x02B4, r27
    8132:	80 91 6f 02 	lds	r24, 0x026F
    8136:	90 91 70 02 	lds	r25, 0x0270
    813a:	aa 27       	eor	r26, r26
    813c:	97 fd       	sbrc	r25, 7
    813e:	a0 95       	com	r26
    8140:	ba 2f       	mov	r27, r26
    8142:	40 91 b5 02 	lds	r20, 0x02B5
    8146:	50 91 b6 02 	lds	r21, 0x02B6
    814a:	60 91 b7 02 	lds	r22, 0x02B7
    814e:	70 91 b8 02 	lds	r23, 0x02B8
    8152:	84 0f       	add	r24, r20
    8154:	95 1f       	adc	r25, r21
    8156:	a6 1f       	adc	r26, r22
    8158:	b7 1f       	adc	r27, r23
    815a:	80 93 b5 02 	sts	0x02B5, r24
    815e:	90 93 b6 02 	sts	0x02B6, r25
    8162:	a0 93 b7 02 	sts	0x02B7, r26
    8166:	b0 93 b8 02 	sts	0x02B8, r27
				}

				accOffsetXSum += accX;
    816a:	80 91 36 04 	lds	r24, 0x0436
    816e:	90 91 37 04 	lds	r25, 0x0437
    8172:	40 91 2a 04 	lds	r20, 0x042A
    8176:	50 91 2b 04 	lds	r21, 0x042B
    817a:	84 0f       	add	r24, r20
    817c:	95 1f       	adc	r25, r21
    817e:	90 93 37 04 	sts	0x0437, r25
    8182:	80 93 36 04 	sts	0x0436, r24
				accOffsetYSum += accY;
    8186:	80 91 38 04 	lds	r24, 0x0438
    818a:	90 91 39 04 	lds	r25, 0x0439
    818e:	40 91 2c 04 	lds	r20, 0x042C
    8192:	50 91 2d 04 	lds	r21, 0x042D
    8196:	84 0f       	add	r24, r20
    8198:	95 1f       	adc	r25, r21
    819a:	90 93 39 04 	sts	0x0439, r25
    819e:	80 93 38 04 	sts	0x0438, r24
				accOffsetZSum += accZ;
    81a2:	80 91 3a 04 	lds	r24, 0x043A
    81a6:	90 91 3b 04 	lds	r25, 0x043B
    81aa:	40 91 2e 04 	lds	r20, 0x042E
    81ae:	50 91 2f 04 	lds	r21, 0x042F
    81b2:	84 0f       	add	r24, r20
    81b4:	95 1f       	adc	r25, r21
    81b6:	90 93 3b 04 	sts	0x043B, r25
    81ba:	80 93 3a 04 	sts	0x043A, r24

				calibrationCycle++;
    81be:	2f 5f       	subi	r18, 0xFF	; 255
    81c0:	3f 4f       	sbci	r19, 0xFF	; 255
    81c2:	30 93 4c 04 	sts	0x044C, r19
    81c6:	20 93 4b 04 	sts	0x044B, r18
    81ca:	80 91 0b 09 	lds	r24, 0x090B
	updateBlueLed(pwm_blue);

	calibrationCycle = 0;
	startCalibration = 1;

	while(startCalibration) {
    81ce:	88 23       	and	r24, r24
    81d0:	09 f0       	breq	.+2      	; 0x81d4 <calibrateSensors+0x5d6>
    81d2:	31 cd       	rjmp	.-1438   	; 0x7c36 <calibrateSensors+0x38>
    81d4:	5b ce       	rjmp	.-842    	; 0x7e8c <calibrateSensors+0x28e>

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    81d6:	10 92 89 02 	sts	0x0289, r1
    81da:	10 92 8a 02 	sts	0x028A, r1
    81de:	10 92 8b 02 	sts	0x028B, r1
    81e2:	10 92 8c 02 	sts	0x028C, r1
						proximityOffset[i] = 0;
    81e6:	10 92 72 02 	sts	0x0272, r1
    81ea:	10 92 71 02 	sts	0x0271, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    81ee:	10 92 8d 02 	sts	0x028D, r1
    81f2:	10 92 8e 02 	sts	0x028E, r1
    81f6:	10 92 8f 02 	sts	0x028F, r1
    81fa:	10 92 90 02 	sts	0x0290, r1
						proximityOffset[i] = 0;
    81fe:	10 92 74 02 	sts	0x0274, r1
    8202:	10 92 73 02 	sts	0x0273, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8206:	10 92 91 02 	sts	0x0291, r1
    820a:	10 92 92 02 	sts	0x0292, r1
    820e:	10 92 93 02 	sts	0x0293, r1
    8212:	10 92 94 02 	sts	0x0294, r1
						proximityOffset[i] = 0;
    8216:	10 92 76 02 	sts	0x0276, r1
    821a:	10 92 75 02 	sts	0x0275, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    821e:	10 92 95 02 	sts	0x0295, r1
    8222:	10 92 96 02 	sts	0x0296, r1
    8226:	10 92 97 02 	sts	0x0297, r1
    822a:	10 92 98 02 	sts	0x0298, r1
						proximityOffset[i] = 0;
    822e:	10 92 78 02 	sts	0x0278, r1
    8232:	10 92 77 02 	sts	0x0277, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8236:	10 92 99 02 	sts	0x0299, r1
    823a:	10 92 9a 02 	sts	0x029A, r1
    823e:	10 92 9b 02 	sts	0x029B, r1
    8242:	10 92 9c 02 	sts	0x029C, r1
						proximityOffset[i] = 0;
    8246:	10 92 7a 02 	sts	0x027A, r1
    824a:	10 92 79 02 	sts	0x0279, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    824e:	10 92 9d 02 	sts	0x029D, r1
    8252:	10 92 9e 02 	sts	0x029E, r1
    8256:	10 92 9f 02 	sts	0x029F, r1
    825a:	10 92 a0 02 	sts	0x02A0, r1
						proximityOffset[i] = 0;
    825e:	10 92 7c 02 	sts	0x027C, r1
    8262:	10 92 7b 02 	sts	0x027B, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8266:	10 92 a1 02 	sts	0x02A1, r1
    826a:	10 92 a2 02 	sts	0x02A2, r1
    826e:	10 92 a3 02 	sts	0x02A3, r1
    8272:	10 92 a4 02 	sts	0x02A4, r1
						proximityOffset[i] = 0;
    8276:	10 92 7e 02 	sts	0x027E, r1
    827a:	10 92 7d 02 	sts	0x027D, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    827e:	10 92 a5 02 	sts	0x02A5, r1
    8282:	10 92 a6 02 	sts	0x02A6, r1
    8286:	10 92 a7 02 	sts	0x02A7, r1
    828a:	10 92 a8 02 	sts	0x02A8, r1
						proximityOffset[i] = 0;
    828e:	10 92 80 02 	sts	0x0280, r1
    8292:	10 92 7f 02 	sts	0x027F, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8296:	10 92 a9 02 	sts	0x02A9, r1
    829a:	10 92 aa 02 	sts	0x02AA, r1
    829e:	10 92 ab 02 	sts	0x02AB, r1
    82a2:	10 92 ac 02 	sts	0x02AC, r1
						proximityOffset[i] = 0;
    82a6:	10 92 82 02 	sts	0x0282, r1
    82aa:	10 92 81 02 	sts	0x0281, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    82ae:	10 92 ad 02 	sts	0x02AD, r1
    82b2:	10 92 ae 02 	sts	0x02AE, r1
    82b6:	10 92 af 02 	sts	0x02AF, r1
    82ba:	10 92 b0 02 	sts	0x02B0, r1
						proximityOffset[i] = 0;
    82be:	10 92 84 02 	sts	0x0284, r1
    82c2:	10 92 83 02 	sts	0x0283, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    82c6:	10 92 b1 02 	sts	0x02B1, r1
    82ca:	10 92 b2 02 	sts	0x02B2, r1
    82ce:	10 92 b3 02 	sts	0x02B3, r1
    82d2:	10 92 b4 02 	sts	0x02B4, r1
						proximityOffset[i] = 0;
    82d6:	10 92 86 02 	sts	0x0286, r1
    82da:	10 92 85 02 	sts	0x0285, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    82de:	10 92 b5 02 	sts	0x02B5, r1
    82e2:	10 92 b6 02 	sts	0x02B6, r1
    82e6:	10 92 b7 02 	sts	0x02B7, r1
    82ea:	10 92 b8 02 	sts	0x02B8, r1
						proximityOffset[i] = 0;
    82ee:	10 92 88 02 	sts	0x0288, r1
    82f2:	10 92 87 02 	sts	0x0287, r1
					}
					accOffsetXSum = 0;
    82f6:	10 92 37 04 	sts	0x0437, r1
    82fa:	10 92 36 04 	sts	0x0436, r1
					accOffsetYSum = 0;
    82fe:	10 92 39 04 	sts	0x0439, r1
    8302:	10 92 38 04 	sts	0x0438, r1
					accOffsetZSum = 0;
    8306:	10 92 3b 04 	sts	0x043B, r1
    830a:	10 92 3a 04 	sts	0x043A, r1

					calibrationCycle++;
    830e:	d0 93 4c 04 	sts	0x044C, r29
    8312:	c0 93 4b 04 	sts	0x044B, r28
    8316:	80 91 0b 09 	lds	r24, 0x090B

					continue;					// the first time "proxUpdated" is set, all the proximity values saved in the array 
    831a:	59 cf       	rjmp	.-334    	; 0x81ce <calibrateSensors+0x5d0>

0000831c <readAccelXYZ_1>:

void readAccelXYZ_1() {

	int i = 0;

	if(useAccel == USE_MMAX7455L) {
    831c:	80 91 29 04 	lds	r24, 0x0429
    8320:	88 23       	and	r24, r24
    8322:	79 f0       	breq	.+30     	; 0x8342 <readAccelXYZ_1+0x26>
		for(i=0; i<2; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
		}
		return;

	} else if(useAccel == USE_ADXL345) {							
    8324:	81 30       	cpi	r24, 0x01	; 1
    8326:	11 f1       	breq	.+68     	; 0x836c <readAccelXYZ_1+0x50>
		}
		return;

	} else {

		accX = 0;
    8328:	10 92 2b 04 	sts	0x042B, r1
    832c:	10 92 2a 04 	sts	0x042A, r1
		accY = 0;
    8330:	10 92 2d 04 	sts	0x042D, r1
    8334:	10 92 2c 04 	sts	0x042C, r1
		accZ = 0;
    8338:	10 92 2f 04 	sts	0x042F, r1
    833c:	10 92 2e 04 	sts	0x042E, r1
    8340:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    8342:	80 91 14 02 	lds	r24, 0x0214
    8346:	0e 94 ed 1b 	call	0x37da	; 0x37da <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    834a:	80 e0       	ldi	r24, 0x00	; 0
    834c:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    8350:	80 91 14 02 	lds	r24, 0x0214
    8354:	8f 5f       	subi	r24, 0xFF	; 255
    8356:	0e 94 3a 1c 	call	0x3874	; 0x3874 <i2c_rep_start>

		for(i=0; i<2; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    835a:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <i2c_readAck>
    835e:	80 93 40 04 	sts	0x0440, r24
    8362:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <i2c_readAck>
    8366:	80 93 41 04 	sts	0x0441, r24
    836a:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    836c:	80 91 14 02 	lds	r24, 0x0214
    8370:	0e 94 ed 1b 	call	0x37da	; 0x37da <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    8374:	82 e3       	ldi	r24, 0x32	; 50
    8376:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    837a:	80 91 14 02 	lds	r24, 0x0214
    837e:	8f 5f       	subi	r24, 0xFF	; 255
    8380:	0e 94 3a 1c 	call	0x3874	; 0x3874 <i2c_rep_start>

		for(i=0; i<3; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    8384:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <i2c_readAck>
    8388:	80 93 40 04 	sts	0x0440, r24
    838c:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <i2c_readAck>
    8390:	80 93 41 04 	sts	0x0441, r24
    8394:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <i2c_readAck>
    8398:	80 93 42 04 	sts	0x0442, r24
    839c:	08 95       	ret

0000839e <readAccelXYZ_2>:

void readAccelXYZ_2() {

	int i = 2;

	if(useAccel == USE_MMAX7455L) {
    839e:	80 91 29 04 	lds	r24, 0x0429
    83a2:	88 23       	and	r24, r24
    83a4:	09 f0       	breq	.+2      	; 0x83a8 <readAccelXYZ_2+0xa>
    83a6:	4e c0       	rjmp	.+156    	; 0x8444 <readAccelXYZ_2+0xa6>

		for(i=2; i<5; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    83a8:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <i2c_readAck>
    83ac:	80 93 42 04 	sts	0x0442, r24
		}

	} else if(useAccel == USE_ADXL345) {							

		for(i=3; i<5; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    83b0:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <i2c_readAck>
    83b4:	80 93 43 04 	sts	0x0443, r24
    83b8:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <i2c_readAck>
    83bc:	80 93 44 04 	sts	0x0444, r24
		}
		accBuff[i] = i2c_readNak();									// read last byte sending NACK
    83c0:	0e 94 84 1c 	call	0x3908	; 0x3908 <i2c_readNak>
    83c4:	80 93 45 04 	sts	0x0445, r24
		i2c_stop();													// set stop conditon = release bus
    83c8:	0e 94 60 1c 	call	0x38c0	; 0x38c0 <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    83cc:	80 91 0b 09 	lds	r24, 0x090B
    83d0:	88 23       	and	r24, r24
    83d2:	09 f4       	brne	.+2      	; 0x83d6 <readAccelXYZ_2+0x38>
    83d4:	47 c0       	rjmp	.+142    	; 0x8464 <readAccelXYZ_2+0xc6>
			accX = ((signed int)accBuff[1]<<8)|accBuff[0];    			// X axis
    83d6:	80 91 41 04 	lds	r24, 0x0441
    83da:	99 27       	eor	r25, r25
    83dc:	87 fd       	sbrc	r24, 7
    83de:	90 95       	com	r25
    83e0:	98 2f       	mov	r25, r24
    83e2:	88 27       	eor	r24, r24
    83e4:	20 91 40 04 	lds	r18, 0x0440
    83e8:	33 27       	eor	r19, r19
    83ea:	27 fd       	sbrc	r18, 7
    83ec:	30 95       	com	r19
    83ee:	82 2b       	or	r24, r18
    83f0:	93 2b       	or	r25, r19
    83f2:	90 93 2b 04 	sts	0x042B, r25
    83f6:	80 93 2a 04 	sts	0x042A, r24
			accY = ((signed int)accBuff[3]<<8)|accBuff[2];    			// Y axis
    83fa:	80 91 43 04 	lds	r24, 0x0443
    83fe:	99 27       	eor	r25, r25
    8400:	87 fd       	sbrc	r24, 7
    8402:	90 95       	com	r25
    8404:	98 2f       	mov	r25, r24
    8406:	88 27       	eor	r24, r24
    8408:	20 91 42 04 	lds	r18, 0x0442
    840c:	33 27       	eor	r19, r19
    840e:	27 fd       	sbrc	r18, 7
    8410:	30 95       	com	r19
    8412:	82 2b       	or	r24, r18
    8414:	93 2b       	or	r25, r19
    8416:	90 93 2d 04 	sts	0x042D, r25
    841a:	80 93 2c 04 	sts	0x042C, r24
			accZ = ((signed int)accBuff[5]<<8)|accBuff[4];    			// Z axis
    841e:	80 91 45 04 	lds	r24, 0x0445
    8422:	99 27       	eor	r25, r25
    8424:	87 fd       	sbrc	r24, 7
    8426:	90 95       	com	r25
    8428:	98 2f       	mov	r25, r24
    842a:	88 27       	eor	r24, r24
    842c:	20 91 44 04 	lds	r18, 0x0444
    8430:	33 27       	eor	r19, r19
    8432:	27 fd       	sbrc	r18, 7
    8434:	30 95       	com	r19
    8436:	82 2b       	or	r24, r18
    8438:	93 2b       	or	r25, r19
    843a:	90 93 2f 04 	sts	0x042F, r25
    843e:	80 93 2e 04 	sts	0x042E, r24
    8442:	08 95       	ret
			accX = (((signed int)accBuff[1]<<8)|accBuff[0])-accOffsetX;	// X axis
			accY = (((signed int)accBuff[3]<<8)|accBuff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    8444:	81 30       	cpi	r24, 0x01	; 1
    8446:	09 f4       	brne	.+2      	; 0x844a <readAccelXYZ_2+0xac>
    8448:	b3 cf       	rjmp	.-154    	; 0x83b0 <readAccelXYZ_2+0x12>
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
		}

	} else {

		accX = 0;
    844a:	10 92 2b 04 	sts	0x042B, r1
    844e:	10 92 2a 04 	sts	0x042A, r1
		accY = 0;
    8452:	10 92 2d 04 	sts	0x042D, r1
    8456:	10 92 2c 04 	sts	0x042C, r1
		accZ = 0;
    845a:	10 92 2f 04 	sts	0x042F, r1
    845e:	10 92 2e 04 	sts	0x042E, r1
    8462:	08 95       	ret
		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)accBuff[1]<<8)|accBuff[0];    			// X axis
			accY = ((signed int)accBuff[3]<<8)|accBuff[2];    			// Y axis
			accZ = ((signed int)accBuff[5]<<8)|accBuff[4];    			// Z axis
		} else {													// else return the calibrated values
			accX = (((signed int)accBuff[1]<<8)|accBuff[0])-accOffsetX;	// X axis
    8464:	80 91 41 04 	lds	r24, 0x0441
    8468:	99 27       	eor	r25, r25
    846a:	87 fd       	sbrc	r24, 7
    846c:	90 95       	com	r25
    846e:	98 2f       	mov	r25, r24
    8470:	88 27       	eor	r24, r24
    8472:	20 91 40 04 	lds	r18, 0x0440
    8476:	33 27       	eor	r19, r19
    8478:	27 fd       	sbrc	r18, 7
    847a:	30 95       	com	r19
    847c:	82 2b       	or	r24, r18
    847e:	93 2b       	or	r25, r19
    8480:	20 91 30 04 	lds	r18, 0x0430
    8484:	30 91 31 04 	lds	r19, 0x0431
    8488:	82 1b       	sub	r24, r18
    848a:	93 0b       	sbc	r25, r19
    848c:	90 93 2b 04 	sts	0x042B, r25
    8490:	80 93 2a 04 	sts	0x042A, r24
			accY = (((signed int)accBuff[3]<<8)|accBuff[2])-accOffsetY;	// Y axis
    8494:	80 91 43 04 	lds	r24, 0x0443
    8498:	99 27       	eor	r25, r25
    849a:	87 fd       	sbrc	r24, 7
    849c:	90 95       	com	r25
    849e:	98 2f       	mov	r25, r24
    84a0:	88 27       	eor	r24, r24
    84a2:	20 91 42 04 	lds	r18, 0x0442
    84a6:	33 27       	eor	r19, r19
    84a8:	27 fd       	sbrc	r18, 7
    84aa:	30 95       	com	r19
    84ac:	82 2b       	or	r24, r18
    84ae:	93 2b       	or	r25, r19
    84b0:	20 91 32 04 	lds	r18, 0x0432
    84b4:	30 91 33 04 	lds	r19, 0x0433
    84b8:	82 1b       	sub	r24, r18
    84ba:	93 0b       	sbc	r25, r19
    84bc:	90 93 2d 04 	sts	0x042D, r25
    84c0:	80 93 2c 04 	sts	0x042C, r24
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
    84c4:	80 91 45 04 	lds	r24, 0x0445
    84c8:	99 27       	eor	r25, r25
    84ca:	87 fd       	sbrc	r24, 7
    84cc:	90 95       	com	r25
    84ce:	98 2f       	mov	r25, r24
    84d0:	88 27       	eor	r24, r24
    84d2:	20 91 44 04 	lds	r18, 0x0444
    84d6:	33 27       	eor	r19, r19
    84d8:	27 fd       	sbrc	r18, 7
    84da:	30 95       	com	r19
    84dc:	82 2b       	or	r24, r18
    84de:	93 2b       	or	r25, r19
    84e0:	20 91 34 04 	lds	r18, 0x0434
    84e4:	30 91 35 04 	lds	r19, 0x0435
    84e8:	82 1b       	sub	r24, r18
    84ea:	93 0b       	sbc	r25, r19
    84ec:	90 93 2f 04 	sts	0x042F, r25
    84f0:	80 93 2e 04 	sts	0x042E, r24
    84f4:	08 95       	ret

000084f6 <computeAngle>:

	}

}

void computeAngle() {
    84f6:	ef 92       	push	r14
    84f8:	ff 92       	push	r15
    84fa:	0f 93       	push	r16
    84fc:	1f 93       	push	r17

	unsigned int abs_acc_z=abs(accZ);
    84fe:	80 91 2e 04 	lds	r24, 0x042E
    8502:	90 91 2f 04 	lds	r25, 0x042F
    8506:	97 fd       	sbrc	r25, 7
    8508:	6c c0       	rjmp	.+216    	; 0x85e2 <computeAngle+0xec>

	// check the robot motion plane (horizontal or vertical) based on the Z axes;
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
    850a:	85 31       	cpi	r24, 0x15	; 21
    850c:	91 05       	cpc	r25, r1
    850e:	08 f0       	brcs	.+2      	; 0x8512 <computeAngle+0x1c>
    8510:	54 c0       	rjmp	.+168    	; 0x85ba <computeAngle+0xc4>
		currPosition = HORIZONTAL_POS;
    8512:	81 e0       	ldi	r24, 0x01	; 1
    8514:	80 93 15 02 	sts	0x0215, r24
    8518:	21 e0       	ldi	r18, 0x01	; 1
	} else {
		currPosition = VERTICAL_POS;	
	}
	if(currPosition != robotPosition) {			
    851a:	80 91 16 02 	lds	r24, 0x0216
    851e:	82 17       	cp	r24, r18
    8520:	09 f4       	brne	.+2      	; 0x8524 <computeAngle+0x2e>
    8522:	53 c0       	rjmp	.+166    	; 0x85ca <computeAngle+0xd4>
		timesInSamePos++;
    8524:	80 91 3e 04 	lds	r24, 0x043E
    8528:	90 91 3f 04 	lds	r25, 0x043F
    852c:	01 96       	adiw	r24, 0x01	; 1
    852e:	90 93 3f 04 	sts	0x043F, r25
    8532:	80 93 3e 04 	sts	0x043E, r24
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
    8536:	88 3c       	cpi	r24, 0xC8	; 200
    8538:	91 05       	cpc	r25, r1
    853a:	08 f0       	brcs	.+2      	; 0x853e <computeAngle+0x48>
    853c:	4b c0       	rjmp	.+150    	; 0x85d4 <computeAngle+0xde>
	} else {
		timesInSamePos = 0;
	}

	// compute the angle using the X and Y axis
	thetaAcc = atan2((float)accX, (float)accY);
    853e:	60 91 2a 04 	lds	r22, 0x042A
    8542:	70 91 2b 04 	lds	r23, 0x042B
    8546:	88 27       	eor	r24, r24
    8548:	77 fd       	sbrc	r23, 7
    854a:	80 95       	com	r24
    854c:	98 2f       	mov	r25, r24
    854e:	0e 94 ee 49 	call	0x93dc	; 0x93dc <__floatsisf>
    8552:	7b 01       	movw	r14, r22
    8554:	8c 01       	movw	r16, r24
    8556:	60 91 2c 04 	lds	r22, 0x042C
    855a:	70 91 2d 04 	lds	r23, 0x042D
    855e:	88 27       	eor	r24, r24
    8560:	77 fd       	sbrc	r23, 7
    8562:	80 95       	com	r24
    8564:	98 2f       	mov	r25, r24
    8566:	0e 94 ee 49 	call	0x93dc	; 0x93dc <__floatsisf>
    856a:	9b 01       	movw	r18, r22
    856c:	ac 01       	movw	r20, r24
    856e:	c8 01       	movw	r24, r16
    8570:	b7 01       	movw	r22, r14
    8572:	0e 94 f9 48 	call	0x91f2	; 0x91f2 <atan2>
    8576:	60 93 a2 04 	sts	0x04A2, r22
    857a:	70 93 a3 04 	sts	0x04A3, r23
    857e:	80 93 a4 04 	sts	0x04A4, r24
    8582:	90 93 a5 04 	sts	0x04A5, r25
	currentAngle = (signed int)(thetaAcc*RAD_2_DEG);
    8586:	21 ee       	ldi	r18, 0xE1	; 225
    8588:	3e e2       	ldi	r19, 0x2E	; 46
    858a:	45 e6       	ldi	r20, 0x65	; 101
    858c:	52 e4       	ldi	r21, 0x42	; 66
    858e:	0e 94 03 4b 	call	0x9606	; 0x9606 <__mulsf3>
    8592:	0e 94 bb 49 	call	0x9376	; 0x9376 <__fixsfsi>
    8596:	9b 01       	movw	r18, r22
    8598:	70 93 3d 04 	sts	0x043D, r23
    859c:	60 93 3c 04 	sts	0x043C, r22

	if(currentAngle < 0) {
    85a0:	77 ff       	sbrs	r23, 7
    85a2:	06 c0       	rjmp	.+12     	; 0x85b0 <computeAngle+0xba>
		currentAngle = currentAngle + (signed int)360;	// angles from 0 to 360
    85a4:	28 59       	subi	r18, 0x98	; 152
    85a6:	3e 4f       	sbci	r19, 0xFE	; 254
    85a8:	30 93 3d 04 	sts	0x043D, r19
    85ac:	20 93 3c 04 	sts	0x043C, r18
	}

}
    85b0:	1f 91       	pop	r17
    85b2:	0f 91       	pop	r16
    85b4:	ff 90       	pop	r15
    85b6:	ef 90       	pop	r14
    85b8:	08 95       	ret
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
		currPosition = HORIZONTAL_POS;
	} else {
		currPosition = VERTICAL_POS;	
    85ba:	10 92 15 02 	sts	0x0215, r1
    85be:	20 e0       	ldi	r18, 0x00	; 0
	}
	if(currPosition != robotPosition) {			
    85c0:	80 91 16 02 	lds	r24, 0x0216
    85c4:	82 17       	cp	r24, r18
    85c6:	09 f0       	breq	.+2      	; 0x85ca <computeAngle+0xd4>
    85c8:	ad cf       	rjmp	.-166    	; 0x8524 <computeAngle+0x2e>
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
			robotPosition = currPosition;
		}
	} else {
		timesInSamePos = 0;
    85ca:	10 92 3f 04 	sts	0x043F, r1
    85ce:	10 92 3e 04 	sts	0x043E, r1
    85d2:	b5 cf       	rjmp	.-150    	; 0x853e <computeAngle+0x48>
		currPosition = VERTICAL_POS;	
	}
	if(currPosition != robotPosition) {			
		timesInSamePos++;
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
    85d4:	10 92 3f 04 	sts	0x043F, r1
    85d8:	10 92 3e 04 	sts	0x043E, r1
			robotPosition = currPosition;
    85dc:	20 93 16 02 	sts	0x0216, r18
    85e0:	ae cf       	rjmp	.-164    	; 0x853e <computeAngle+0x48>

}

void computeAngle() {

	unsigned int abs_acc_z=abs(accZ);
    85e2:	90 95       	com	r25
    85e4:	81 95       	neg	r24
    85e6:	9f 4f       	sbci	r25, 0xFF	; 255
    85e8:	90 cf       	rjmp	.-224    	; 0x850a <computeAngle+0x14>

000085ea <writeCalibrationToFlash>:


#include "eepromIO.h"

void writeCalibrationToFlash() {	
	eeprom_update_block(calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
    85ea:	89 e0       	ldi	r24, 0x09	; 9
    85ec:	98 e0       	ldi	r25, 0x08	; 8
    85ee:	6c e6       	ldi	r22, 0x6C	; 108
    85f0:	7f e0       	ldi	r23, 0x0F	; 15
    85f2:	40 e9       	ldi	r20, 0x90	; 144
    85f4:	50 e0       	ldi	r21, 0x00	; 0
    85f6:	0e 94 94 4c 	call	0x9928	; 0x9928 <__eeupd_block_m2560>
	eeprom_update_word ((uint16_t*) CALIB_CHECK_ADDRESS, 0xAA55);   // to let know the calibration data are valid
    85fa:	8a e6       	ldi	r24, 0x6A	; 106
    85fc:	9f e0       	ldi	r25, 0x0F	; 15
    85fe:	65 e5       	ldi	r22, 0x55	; 85
    8600:	7a ea       	ldi	r23, 0xAA	; 170
    8602:	0e 94 b6 4c 	call	0x996c	; 0x996c <__eeupd_word_m2560>
}
    8606:	08 95       	ret

00008608 <readCalibrationFromFlash>:

void readCalibrationFromFlash() {
	eeprom_read_block (calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
    8608:	89 e0       	ldi	r24, 0x09	; 9
    860a:	98 e0       	ldi	r25, 0x08	; 8
    860c:	6c e6       	ldi	r22, 0x6C	; 108
    860e:	7f e0       	ldi	r23, 0x0F	; 15
    8610:	40 e9       	ldi	r20, 0x90	; 144
    8612:	50 e0       	ldi	r21, 0x00	; 0
    8614:	0e 94 76 4c 	call	0x98ec	; 0x98ec <__eerd_block_m2560>
}
    8618:	08 95       	ret

0000861a <irCommInit>:
#include "irCommunication.h"

void irCommInit(unsigned char mode) {
    861a:	1f 93       	push	r17
    861c:	18 2f       	mov	r17, r24
	if(mode==IRCOMM_MODE_RECEIVE) {
    861e:	81 30       	cpi	r24, 0x01	; 1
    8620:	81 f0       	breq	.+32     	; 0x8642 <irCommInit+0x28>
		irCommMinSensorValueCurr = irCommMinSensorValueBuff2;
		memset(irCommMaxSensorValueAdc, 0x00, 16);
		memset(irCommMinSensorValueAdc, 0xFF, 16);
		irCommEnabled = IRCOMM_MODE_RECEIVE;
		irCommState = IRCOMM_RX_IDLE_STATE;
	} else if(mode==IRCOMM_MODE_TRANSMIT) {
    8622:	82 30       	cpi	r24, 0x02	; 2
    8624:	39 f0       	breq	.+14     	; 0x8634 <irCommInit+0x1a>
		irCommEnabled = IRCOMM_MODE_TRANSMIT;
		irCommState = IRCOMM_TX_IDLE_STATE;
	} else if(mode==IRCOMM_MODE_RECEIVE_ONLY) {
    8626:	83 30       	cpi	r24, 0x03	; 3
    8628:	09 f4       	brne	.+2      	; 0x862c <irCommInit+0x12>
    862a:	40 c0       	rjmp	.+128    	; 0x86ac <irCommInit+0x92>
		irCommMinSensorValueCurr = irCommMinSensorValueBuff2;
		memset(irCommMaxSensorValueAdc, 0x00, 16);
		memset(irCommMinSensorValueAdc, 0xFF, 16);
		irCommEnabled = IRCOMM_MODE_RECEIVE_ONLY;
		irCommState = IRCOMM_RX_IDLE_STATE;
	} else if(mode==IRCOMM_MODE_TRANSMIT_ONLY) {
    862c:	84 30       	cpi	r24, 0x04	; 4
    862e:	11 f0       	breq	.+4      	; 0x8634 <irCommInit+0x1a>
		irCommEnabled = IRCOMM_MODE_TRANSMIT_ONLY;
		irCommState = IRCOMM_TX_IDLE_STATE;
	}
}
    8630:	1f 91       	pop	r17
    8632:	08 95       	ret
		memset(irCommMaxSensorValueAdc, 0x00, 16);
		memset(irCommMinSensorValueAdc, 0xFF, 16);
		irCommEnabled = IRCOMM_MODE_RECEIVE_ONLY;
		irCommState = IRCOMM_RX_IDLE_STATE;
	} else if(mode==IRCOMM_MODE_TRANSMIT_ONLY) {
		irCommEnabled = IRCOMM_MODE_TRANSMIT_ONLY;
    8634:	10 93 c2 04 	sts	0x04C2, r17
		irCommState = IRCOMM_TX_IDLE_STATE;
    8638:	81 e0       	ldi	r24, 0x01	; 1
    863a:	80 93 c4 04 	sts	0x04C4, r24
	}
}
    863e:	1f 91       	pop	r17
    8640:	08 95       	ret
#include "irCommunication.h"

void irCommInit(unsigned char mode) {
	if(mode==IRCOMM_MODE_RECEIVE) {
		irCommProxValuesAdc = irCommProxValuesBuff1;
    8642:	88 e2       	ldi	r24, 0x28	; 40
    8644:	95 e0       	ldi	r25, 0x05	; 5
    8646:	90 93 bd 07 	sts	0x07BD, r25
    864a:	80 93 bc 07 	sts	0x07BC, r24
		irCommProxValuesCurr = irCommProxValuesBuff2;
    864e:	88 e6       	ldi	r24, 0x68	; 104
    8650:	96 e0       	ldi	r25, 0x06	; 6
    8652:	90 93 a9 07 	sts	0x07A9, r25
    8656:	80 93 a8 07 	sts	0x07A8, r24
		irCommMaxSensorValueAdc = irCommMaxSensorValueBuff1;
    865a:	ef e9       	ldi	r30, 0x9F	; 159
    865c:	f8 e0       	ldi	r31, 0x08	; 8
    865e:	f0 93 c9 08 	sts	0x08C9, r31
    8662:	e0 93 c8 08 	sts	0x08C8, r30
		irCommMaxSensorValueCurr = irCommMaxSensorValueBuff2;
    8666:	85 ef       	ldi	r24, 0xF5	; 245
    8668:	98 e0       	ldi	r25, 0x08	; 8
    866a:	90 93 06 05 	sts	0x0506, r25
    866e:	80 93 05 05 	sts	0x0505, r24
		irCommMinSensorValueAdc = irCommMinSensorValueBuff1;
    8672:	2a ea       	ldi	r18, 0xAA	; 170
    8674:	37 e0       	ldi	r19, 0x07	; 7
    8676:	30 93 27 05 	sts	0x0527, r19
    867a:	20 93 26 05 	sts	0x0526, r18
		irCommMinSensorValueCurr = irCommMinSensorValueBuff2;
    867e:	89 ef       	ldi	r24, 0xF9	; 249
    8680:	97 e0       	ldi	r25, 0x07	; 7
    8682:	90 93 02 05 	sts	0x0502, r25
    8686:	80 93 01 05 	sts	0x0501, r24
		memset(irCommMaxSensorValueAdc, 0x00, 16);
    868a:	80 e1       	ldi	r24, 0x10	; 16
    868c:	df 01       	movw	r26, r30
    868e:	1d 92       	st	X+, r1
    8690:	8a 95       	dec	r24
    8692:	e9 f7       	brne	.-6      	; 0x868e <irCommInit+0x74>
		memset(irCommMinSensorValueAdc, 0xFF, 16);
    8694:	c9 01       	movw	r24, r18
    8696:	6f ef       	ldi	r22, 0xFF	; 255
    8698:	70 e0       	ldi	r23, 0x00	; 0
    869a:	40 e1       	ldi	r20, 0x10	; 16
    869c:	50 e0       	ldi	r21, 0x00	; 0
    869e:	0e 94 6f 4c 	call	0x98de	; 0x98de <memset>
		irCommEnabled = IRCOMM_MODE_RECEIVE;
    86a2:	10 93 c2 04 	sts	0x04C2, r17
		irCommState = IRCOMM_RX_IDLE_STATE;
    86a6:	10 93 c4 04 	sts	0x04C4, r17
    86aa:	c2 cf       	rjmp	.-124    	; 0x8630 <irCommInit+0x16>
	} else if(mode==IRCOMM_MODE_TRANSMIT) {
		irCommEnabled = IRCOMM_MODE_TRANSMIT;
		irCommState = IRCOMM_TX_IDLE_STATE;
	} else if(mode==IRCOMM_MODE_RECEIVE_ONLY) {
		irCommProxValuesAdc = irCommProxValuesBuff1;
    86ac:	88 e2       	ldi	r24, 0x28	; 40
    86ae:	95 e0       	ldi	r25, 0x05	; 5
    86b0:	90 93 bd 07 	sts	0x07BD, r25
    86b4:	80 93 bc 07 	sts	0x07BC, r24
		irCommProxValuesCurr = irCommProxValuesBuff2;
    86b8:	88 e6       	ldi	r24, 0x68	; 104
    86ba:	96 e0       	ldi	r25, 0x06	; 6
    86bc:	90 93 a9 07 	sts	0x07A9, r25
    86c0:	80 93 a8 07 	sts	0x07A8, r24
		irCommMaxSensorValueAdc = irCommMaxSensorValueBuff1;
    86c4:	ef e9       	ldi	r30, 0x9F	; 159
    86c6:	f8 e0       	ldi	r31, 0x08	; 8
    86c8:	f0 93 c9 08 	sts	0x08C9, r31
    86cc:	e0 93 c8 08 	sts	0x08C8, r30
		irCommMaxSensorValueCurr = irCommMaxSensorValueBuff2;
    86d0:	85 ef       	ldi	r24, 0xF5	; 245
    86d2:	98 e0       	ldi	r25, 0x08	; 8
    86d4:	90 93 06 05 	sts	0x0506, r25
    86d8:	80 93 05 05 	sts	0x0505, r24
		irCommMinSensorValueAdc = irCommMinSensorValueBuff1;
    86dc:	2a ea       	ldi	r18, 0xAA	; 170
    86de:	37 e0       	ldi	r19, 0x07	; 7
    86e0:	30 93 27 05 	sts	0x0527, r19
    86e4:	20 93 26 05 	sts	0x0526, r18
		irCommMinSensorValueCurr = irCommMinSensorValueBuff2;
    86e8:	89 ef       	ldi	r24, 0xF9	; 249
    86ea:	97 e0       	ldi	r25, 0x07	; 7
    86ec:	90 93 02 05 	sts	0x0502, r25
    86f0:	80 93 01 05 	sts	0x0501, r24
		memset(irCommMaxSensorValueAdc, 0x00, 16);
    86f4:	80 e1       	ldi	r24, 0x10	; 16
    86f6:	df 01       	movw	r26, r30
    86f8:	1d 92       	st	X+, r1
    86fa:	8a 95       	dec	r24
    86fc:	e9 f7       	brne	.-6      	; 0x86f8 <irCommInit+0xde>
		memset(irCommMinSensorValueAdc, 0xFF, 16);
    86fe:	c9 01       	movw	r24, r18
    8700:	6f ef       	ldi	r22, 0xFF	; 255
    8702:	70 e0       	ldi	r23, 0x00	; 0
    8704:	40 e1       	ldi	r20, 0x10	; 16
    8706:	50 e0       	ldi	r21, 0x00	; 0
    8708:	0e 94 6f 4c 	call	0x98de	; 0x98de <memset>
		irCommEnabled = IRCOMM_MODE_RECEIVE_ONLY;
    870c:	10 93 c2 04 	sts	0x04C2, r17
		irCommState = IRCOMM_RX_IDLE_STATE;
    8710:	81 e0       	ldi	r24, 0x01	; 1
    8712:	80 93 c4 04 	sts	0x04C4, r24
    8716:	8c cf       	rjmp	.-232    	; 0x8630 <irCommInit+0x16>

00008718 <irCommDeinit>:
		irCommState = IRCOMM_TX_IDLE_STATE;
	}
}

void irCommDeinit() {
	irCommEnabled = IRCOMM_MODE_SENSORS_SAMPLING;
    8718:	10 92 c2 04 	sts	0x04C2, r1
	irCommMode = IRCOMM_MODE_SENSORS_SAMPLING;
    871c:	10 92 c3 04 	sts	0x04C3, r1
}
    8720:	08 95       	ret

00008722 <irCommTasks>:

void irCommTasks() {
    8722:	7f 92       	push	r7
    8724:	8f 92       	push	r8
    8726:	9f 92       	push	r9
    8728:	af 92       	push	r10
    872a:	bf 92       	push	r11
    872c:	cf 92       	push	r12
    872e:	df 92       	push	r13
    8730:	ef 92       	push	r14
    8732:	ff 92       	push	r15
    8734:	0f 93       	push	r16
    8736:	1f 93       	push	r17
    8738:	cf 93       	push	r28
    873a:	df 93       	push	r29
	int i = 0;

	if(irCommMode==IRCOMM_MODE_RECEIVE) {
    873c:	00 91 c3 04 	lds	r16, 0x04C3
    8740:	01 30       	cpi	r16, 0x01	; 1
    8742:	09 f4       	brne	.+2      	; 0x8746 <irCommTasks+0x24>
    8744:	e1 c0       	rjmp	.+450    	; 0x8908 <irCommTasks+0x1e6>
				irCommState = IRCOMM_RX_IDLE_STATE;				
				break;
					
		}

	} else if(irCommMode==IRCOMM_MODE_TRANSMIT) {
    8746:	02 30       	cpi	r16, 0x02	; 2
    8748:	71 f0       	breq	.+28     	; 0x8766 <irCommTasks+0x44>

		}

	}

}
    874a:	df 91       	pop	r29
    874c:	cf 91       	pop	r28
    874e:	1f 91       	pop	r17
    8750:	0f 91       	pop	r16
    8752:	ff 90       	pop	r15
    8754:	ef 90       	pop	r14
    8756:	df 90       	pop	r13
    8758:	cf 90       	pop	r12
    875a:	bf 90       	pop	r11
    875c:	af 90       	pop	r10
    875e:	9f 90       	pop	r9
    8760:	8f 90       	pop	r8
    8762:	7f 90       	pop	r7
    8764:	08 95       	ret
					
		}

	} else if(irCommMode==IRCOMM_MODE_TRANSMIT) {

		switch(irCommState) {
    8766:	80 91 c4 04 	lds	r24, 0x04C4
    876a:	82 30       	cpi	r24, 0x02	; 2
    876c:	09 f4       	brne	.+2      	; 0x8770 <irCommTasks+0x4e>
    876e:	7d c2       	rjmp	.+1274   	; 0x8c6a <irCommTasks+0x548>
    8770:	85 30       	cpi	r24, 0x05	; 5
    8772:	59 f7       	brne	.-42     	; 0x874a <irCommTasks+0x28>
			case IRCOMM_TX_IDLE_STATE:					
				break;

			case IRCOMM_TX_PREPARE_TRANSMISSION:
				if((getTime100MicroSec() - irCommTxWaitStartTime) < PAUSE_500_MSEC) {
    8774:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <getTime100MicroSec>
    8778:	20 91 f3 04 	lds	r18, 0x04F3
    877c:	30 91 f4 04 	lds	r19, 0x04F4
    8780:	40 91 f5 04 	lds	r20, 0x04F5
    8784:	50 91 f6 04 	lds	r21, 0x04F6
    8788:	62 1b       	sub	r22, r18
    878a:	73 0b       	sbc	r23, r19
    878c:	84 0b       	sbc	r24, r20
    878e:	95 0b       	sbc	r25, r21
    8790:	67 3c       	cpi	r22, 0xC7	; 199
    8792:	b2 e1       	ldi	r27, 0x12	; 18
    8794:	7b 07       	cpc	r23, r27
    8796:	b0 e0       	ldi	r27, 0x00	; 0
    8798:	8b 07       	cpc	r24, r27
    879a:	b0 e0       	ldi	r27, 0x00	; 0
    879c:	9b 07       	cpc	r25, r27
    879e:	a8 f2       	brcs	.-86     	; 0x874a <irCommTasks+0x28>
					break;
				}
				updateBlueLed(0);
    87a0:	80 e0       	ldi	r24, 0x00	; 0
    87a2:	0e 94 2f 3b 	call	0x765e	; 0x765e <updateBlueLed>
				irCommTickCounter = getTime100MicroSec()-irCommTickCounter2;
    87a6:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <getTime100MicroSec>
    87aa:	20 91 cc 04 	lds	r18, 0x04CC
    87ae:	30 91 cd 04 	lds	r19, 0x04CD
    87b2:	40 91 ce 04 	lds	r20, 0x04CE
    87b6:	50 91 cf 04 	lds	r21, 0x04CF
    87ba:	62 1b       	sub	r22, r18
    87bc:	73 0b       	sbc	r23, r19
    87be:	84 0b       	sbc	r24, r20
    87c0:	95 0b       	sbc	r25, r21
    87c2:	60 93 c8 04 	sts	0x04C8, r22
    87c6:	70 93 c9 04 	sts	0x04C9, r23
    87ca:	80 93 ca 04 	sts	0x04CA, r24
    87ce:	90 93 cb 04 	sts	0x04CB, r25
				irCommTickCounter2 = getTime100MicroSec();
    87d2:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <getTime100MicroSec>
    87d6:	60 93 cc 04 	sts	0x04CC, r22
    87da:	70 93 cd 04 	sts	0x04CD, r23
    87de:	80 93 ce 04 	sts	0x04CE, r24
    87e2:	90 93 cf 04 	sts	0x04CF, r25
				irCommTxBitToTransmit[0] = 2;	// start bit
    87e6:	00 93 0d 05 	sts	0x050D, r16
				irCommTxBitToTransmit[1] = 2;	// start bit
    87ea:	00 93 0e 05 	sts	0x050E, r16
    87ee:	80 91 f1 04 	lds	r24, 0x04F1
    87f2:	90 e0       	ldi	r25, 0x00	; 0
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    87f4:	9c 01       	movw	r18, r24
    87f6:	21 70       	andi	r18, 0x01	; 1
    87f8:	30 70       	andi	r19, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    87fa:	20 93 16 05 	sts	0x0516, r18
void irCommDeinit() {
	irCommEnabled = IRCOMM_MODE_SENSORS_SAMPLING;
	irCommMode = IRCOMM_MODE_SENSORS_SAMPLING;
}

void irCommTasks() {
    87fe:	41 e0       	ldi	r20, 0x01	; 1
    8800:	21 30       	cpi	r18, 0x01	; 1
    8802:	31 05       	cpc	r19, r1
    8804:	09 f0       	breq	.+2      	; 0x8808 <irCommTasks+0xe6>
    8806:	40 e0       	ldi	r20, 0x00	; 0
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit
				irCommTxBitToTransmit[1] = 2;	// start bit
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    8808:	9c 01       	movw	r18, r24
    880a:	35 95       	asr	r19
    880c:	27 95       	ror	r18
    880e:	21 70       	andi	r18, 0x01	; 1
    8810:	30 70       	andi	r19, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    8812:	20 93 15 05 	sts	0x0515, r18
					if(irCommTempValue==1) {
    8816:	21 30       	cpi	r18, 0x01	; 1
    8818:	31 05       	cpc	r19, r1
    881a:	09 f4       	brne	.+2      	; 0x881e <irCommTasks+0xfc>
    881c:	42 c4       	rjmp	.+2180   	; 0x90a2 <irCommTasks+0x980>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit
				irCommTxBitToTransmit[1] = 2;	// start bit
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    881e:	9c 01       	movw	r18, r24
    8820:	35 95       	asr	r19
    8822:	27 95       	ror	r18
    8824:	35 95       	asr	r19
    8826:	27 95       	ror	r18
    8828:	21 70       	andi	r18, 0x01	; 1
    882a:	30 70       	andi	r19, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    882c:	20 93 14 05 	sts	0x0514, r18
					if(irCommTempValue==1) {
    8830:	21 30       	cpi	r18, 0x01	; 1
    8832:	31 05       	cpc	r19, r1
    8834:	09 f4       	brne	.+2      	; 0x8838 <irCommTasks+0x116>
    8836:	33 c4       	rjmp	.+2150   	; 0x909e <irCommTasks+0x97c>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit
				irCommTxBitToTransmit[1] = 2;	// start bit
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    8838:	9c 01       	movw	r18, r24
    883a:	35 95       	asr	r19
    883c:	27 95       	ror	r18
    883e:	35 95       	asr	r19
    8840:	27 95       	ror	r18
    8842:	35 95       	asr	r19
    8844:	27 95       	ror	r18
    8846:	21 70       	andi	r18, 0x01	; 1
    8848:	30 70       	andi	r19, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    884a:	20 93 13 05 	sts	0x0513, r18
					if(irCommTempValue==1) {
    884e:	21 30       	cpi	r18, 0x01	; 1
    8850:	31 05       	cpc	r19, r1
    8852:	09 f4       	brne	.+2      	; 0x8856 <irCommTasks+0x134>
    8854:	22 c4       	rjmp	.+2116   	; 0x909a <irCommTasks+0x978>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit
				irCommTxBitToTransmit[1] = 2;	// start bit
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    8856:	9c 01       	movw	r18, r24
    8858:	35 95       	asr	r19
    885a:	27 95       	ror	r18
    885c:	35 95       	asr	r19
    885e:	27 95       	ror	r18
    8860:	35 95       	asr	r19
    8862:	27 95       	ror	r18
    8864:	35 95       	asr	r19
    8866:	27 95       	ror	r18
    8868:	21 70       	andi	r18, 0x01	; 1
    886a:	30 70       	andi	r19, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    886c:	20 93 12 05 	sts	0x0512, r18
					if(irCommTempValue==1) {
    8870:	21 30       	cpi	r18, 0x01	; 1
    8872:	31 05       	cpc	r19, r1
    8874:	09 f4       	brne	.+2      	; 0x8878 <irCommTasks+0x156>
    8876:	0f c4       	rjmp	.+2078   	; 0x9096 <irCommTasks+0x974>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit
				irCommTxBitToTransmit[1] = 2;	// start bit
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    8878:	9c 01       	movw	r18, r24
    887a:	35 95       	asr	r19
    887c:	27 95       	ror	r18
    887e:	35 95       	asr	r19
    8880:	27 95       	ror	r18
    8882:	35 95       	asr	r19
    8884:	27 95       	ror	r18
    8886:	35 95       	asr	r19
    8888:	27 95       	ror	r18
    888a:	35 95       	asr	r19
    888c:	27 95       	ror	r18
    888e:	21 70       	andi	r18, 0x01	; 1
    8890:	30 70       	andi	r19, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    8892:	20 93 11 05 	sts	0x0511, r18
					if(irCommTempValue==1) {
    8896:	21 30       	cpi	r18, 0x01	; 1
    8898:	31 05       	cpc	r19, r1
    889a:	09 f4       	brne	.+2      	; 0x889e <irCommTasks+0x17c>
    889c:	06 c4       	rjmp	.+2060   	; 0x90aa <irCommTasks+0x988>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit
				irCommTxBitToTransmit[1] = 2;	// start bit
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    889e:	9c 01       	movw	r18, r24
    88a0:	02 2e       	mov	r0, r18
    88a2:	23 2f       	mov	r18, r19
    88a4:	00 0c       	add	r0, r0
    88a6:	22 1f       	adc	r18, r18
    88a8:	33 0b       	sbc	r19, r19
    88aa:	00 0c       	add	r0, r0
    88ac:	22 1f       	adc	r18, r18
    88ae:	33 1f       	adc	r19, r19
    88b0:	21 70       	andi	r18, 0x01	; 1
    88b2:	30 70       	andi	r19, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    88b4:	20 93 10 05 	sts	0x0510, r18
					if(irCommTempValue==1) {
    88b8:	21 30       	cpi	r18, 0x01	; 1
    88ba:	31 05       	cpc	r19, r1
    88bc:	09 f4       	brne	.+2      	; 0x88c0 <irCommTasks+0x19e>
    88be:	f3 c3       	rjmp	.+2022   	; 0x90a6 <irCommTasks+0x984>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit
				irCommTxBitToTransmit[1] = 2;	// start bit
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    88c0:	88 0f       	add	r24, r24
    88c2:	89 2f       	mov	r24, r25
    88c4:	88 1f       	adc	r24, r24
    88c6:	99 0b       	sbc	r25, r25
    88c8:	91 95       	neg	r25
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    88ca:	80 93 0f 05 	sts	0x050F, r24
					if(irCommTempValue==1) {
    88ce:	81 30       	cpi	r24, 0x01	; 1
    88d0:	91 05       	cpc	r25, r1
    88d2:	09 f4       	brne	.+2      	; 0x88d6 <irCommTasks+0x1b4>
    88d4:	de c3       	rjmp	.+1980   	; 0x9092 <irCommTasks+0x970>
						irCommTxCrc++;
    88d6:	90 93 c6 04 	sts	0x04C6, r25
    88da:	80 93 c5 04 	sts	0x04C5, r24
					}
				}
				irCommTxCrc = irCommTxCrc % 4;
    88de:	43 70       	andi	r20, 0x03	; 3
				irCommTxCrc = 4 - irCommTxCrc;
    88e0:	84 e0       	ldi	r24, 0x04	; 4
    88e2:	84 1b       	sub	r24, r20
    88e4:	80 93 f7 04 	sts	0x04F7, r24
				irCommTxBitToTransmit[10] = (irCommTxCrc>>1)&0x01;
    88e8:	98 2f       	mov	r25, r24
    88ea:	96 95       	lsr	r25
    88ec:	91 70       	andi	r25, 0x01	; 1
    88ee:	90 93 17 05 	sts	0x0517, r25
				irCommTxBitToTransmit[11] = irCommTxCrc&0x01;	
    88f2:	81 70       	andi	r24, 0x01	; 1
    88f4:	80 93 18 05 	sts	0x0518, r24
				irCommTxBitCount = 0;							
    88f8:	10 92 f8 04 	sts	0x04F8, r1
				irCommTxPulseState = 0;	
    88fc:	10 92 f9 04 	sts	0x04F9, r1
				irCommState = IRCOMM_TX_COMPUTE_TIMINGS;				
    8900:	82 e0       	ldi	r24, 0x02	; 2
    8902:	80 93 c4 04 	sts	0x04C4, r24
				break;
    8906:	21 cf       	rjmp	.-446    	; 0x874a <irCommTasks+0x28>
void irCommTasks() {
	int i = 0;

	if(irCommMode==IRCOMM_MODE_RECEIVE) {

		switch(irCommState) {
    8908:	80 91 c4 04 	lds	r24, 0x04C4
    890c:	83 30       	cpi	r24, 0x03	; 3
    890e:	09 f4       	brne	.+2      	; 0x8912 <irCommTasks+0x1f0>
    8910:	fc c0       	rjmp	.+504    	; 0x8b0a <irCommTasks+0x3e8>
    8912:	84 30       	cpi	r24, 0x04	; 4
    8914:	08 f0       	brcs	.+2      	; 0x8918 <irCommTasks+0x1f6>
    8916:	fc c1       	rjmp	.+1016   	; 0x8d10 <irCommTasks+0x5ee>
    8918:	82 30       	cpi	r24, 0x02	; 2
    891a:	09 f0       	breq	.+2      	; 0x891e <irCommTasks+0x1fc>
    891c:	16 cf       	rjmp	.-468    	; 0x874a <irCommTasks+0x28>
			case IRCOMM_RX_IDLE_STATE:				
				break;

			case IRCOMM_RX_MAX_SENSOR_STATE:
				irCommRxMaxDiff = 0;
    891e:	10 92 bb 07 	sts	0x07BB, r1
    8922:	10 92 ba 07 	sts	0x07BA, r1
    			irCommRxMaxSensor = -1;
    8926:	8f ef       	ldi	r24, 0xFF	; 255
    8928:	9f ef       	ldi	r25, 0xFF	; 255
    892a:	90 93 0a 09 	sts	0x090A, r25
    892e:	80 93 09 09 	sts	0x0909, r24
    8932:	a0 91 05 05 	lds	r26, 0x0505
    8936:	b0 91 06 05 	lds	r27, 0x0506
    893a:	e0 91 01 05 	lds	r30, 0x0501
    893e:	f0 91 02 05 	lds	r31, 0x0502
				for(i=0; i<8; i++) {
					if ((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) > irCommRxMaxDiff) {
    8942:	8d 91       	ld	r24, X+
    8944:	9c 91       	ld	r25, X
    8946:	11 97       	sbiw	r26, 0x01	; 1
    8948:	20 81       	ld	r18, Z
    894a:	31 81       	ldd	r19, Z+1	; 0x01
    894c:	82 1b       	sub	r24, r18
    894e:	93 0b       	sbc	r25, r19
    8950:	18 16       	cp	r1, r24
    8952:	19 06       	cpc	r1, r25
    8954:	44 f4       	brge	.+16     	; 0x8966 <irCommTasks+0x244>
						irCommRxMaxDiff = irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i];
    8956:	90 93 bb 07 	sts	0x07BB, r25
    895a:	80 93 ba 07 	sts	0x07BA, r24
						irCommRxMaxSensor = i;
    895e:	10 92 0a 09 	sts	0x090A, r1
    8962:	10 92 09 09 	sts	0x0909, r1

			case IRCOMM_RX_MAX_SENSOR_STATE:
				irCommRxMaxDiff = 0;
    			irCommRxMaxSensor = -1;
				for(i=0; i<8; i++) {
					if ((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) > irCommRxMaxDiff) {
    8966:	12 96       	adiw	r26, 0x02	; 2
    8968:	2d 91       	ld	r18, X+
    896a:	3c 91       	ld	r19, X
    896c:	13 97       	sbiw	r26, 0x03	; 3
    896e:	82 81       	ldd	r24, Z+2	; 0x02
    8970:	93 81       	ldd	r25, Z+3	; 0x03
    8972:	28 1b       	sub	r18, r24
    8974:	39 0b       	sbc	r19, r25
    8976:	80 91 ba 07 	lds	r24, 0x07BA
    897a:	90 91 bb 07 	lds	r25, 0x07BB
    897e:	82 17       	cp	r24, r18
    8980:	93 07       	cpc	r25, r19
    8982:	5c f4       	brge	.+22     	; 0x899a <irCommTasks+0x278>
						irCommRxMaxDiff = irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i];
    8984:	30 93 bb 07 	sts	0x07BB, r19
    8988:	20 93 ba 07 	sts	0x07BA, r18
						irCommRxMaxSensor = i;
    898c:	81 e0       	ldi	r24, 0x01	; 1
    898e:	90 e0       	ldi	r25, 0x00	; 0
    8990:	90 93 0a 09 	sts	0x090A, r25
    8994:	80 93 09 09 	sts	0x0909, r24
    8998:	c9 01       	movw	r24, r18

			case IRCOMM_RX_MAX_SENSOR_STATE:
				irCommRxMaxDiff = 0;
    			irCommRxMaxSensor = -1;
				for(i=0; i<8; i++) {
					if ((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) > irCommRxMaxDiff) {
    899a:	14 96       	adiw	r26, 0x04	; 4
    899c:	2d 91       	ld	r18, X+
    899e:	3c 91       	ld	r19, X
    89a0:	15 97       	sbiw	r26, 0x05	; 5
    89a2:	44 81       	ldd	r20, Z+4	; 0x04
    89a4:	55 81       	ldd	r21, Z+5	; 0x05
    89a6:	24 1b       	sub	r18, r20
    89a8:	35 0b       	sbc	r19, r21
    89aa:	82 17       	cp	r24, r18
    89ac:	93 07       	cpc	r25, r19
    89ae:	5c f4       	brge	.+22     	; 0x89c6 <irCommTasks+0x2a4>
						irCommRxMaxDiff = irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i];
    89b0:	30 93 bb 07 	sts	0x07BB, r19
    89b4:	20 93 ba 07 	sts	0x07BA, r18
						irCommRxMaxSensor = i;
    89b8:	82 e0       	ldi	r24, 0x02	; 2
    89ba:	90 e0       	ldi	r25, 0x00	; 0
    89bc:	90 93 0a 09 	sts	0x090A, r25
    89c0:	80 93 09 09 	sts	0x0909, r24
    89c4:	c9 01       	movw	r24, r18

			case IRCOMM_RX_MAX_SENSOR_STATE:
				irCommRxMaxDiff = 0;
    			irCommRxMaxSensor = -1;
				for(i=0; i<8; i++) {
					if ((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) > irCommRxMaxDiff) {
    89c6:	16 96       	adiw	r26, 0x06	; 6
    89c8:	2d 91       	ld	r18, X+
    89ca:	3c 91       	ld	r19, X
    89cc:	17 97       	sbiw	r26, 0x07	; 7
    89ce:	46 81       	ldd	r20, Z+6	; 0x06
    89d0:	57 81       	ldd	r21, Z+7	; 0x07
    89d2:	24 1b       	sub	r18, r20
    89d4:	35 0b       	sbc	r19, r21
    89d6:	82 17       	cp	r24, r18
    89d8:	93 07       	cpc	r25, r19
    89da:	5c f4       	brge	.+22     	; 0x89f2 <irCommTasks+0x2d0>
						irCommRxMaxDiff = irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i];
    89dc:	30 93 bb 07 	sts	0x07BB, r19
    89e0:	20 93 ba 07 	sts	0x07BA, r18
						irCommRxMaxSensor = i;
    89e4:	83 e0       	ldi	r24, 0x03	; 3
    89e6:	90 e0       	ldi	r25, 0x00	; 0
    89e8:	90 93 0a 09 	sts	0x090A, r25
    89ec:	80 93 09 09 	sts	0x0909, r24
    89f0:	c9 01       	movw	r24, r18

			case IRCOMM_RX_MAX_SENSOR_STATE:
				irCommRxMaxDiff = 0;
    			irCommRxMaxSensor = -1;
				for(i=0; i<8; i++) {
					if ((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) > irCommRxMaxDiff) {
    89f2:	18 96       	adiw	r26, 0x08	; 8
    89f4:	2d 91       	ld	r18, X+
    89f6:	3c 91       	ld	r19, X
    89f8:	19 97       	sbiw	r26, 0x09	; 9
    89fa:	40 85       	ldd	r20, Z+8	; 0x08
    89fc:	51 85       	ldd	r21, Z+9	; 0x09
    89fe:	24 1b       	sub	r18, r20
    8a00:	35 0b       	sbc	r19, r21
    8a02:	82 17       	cp	r24, r18
    8a04:	93 07       	cpc	r25, r19
    8a06:	5c f4       	brge	.+22     	; 0x8a1e <irCommTasks+0x2fc>
						irCommRxMaxDiff = irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i];
    8a08:	30 93 bb 07 	sts	0x07BB, r19
    8a0c:	20 93 ba 07 	sts	0x07BA, r18
						irCommRxMaxSensor = i;
    8a10:	84 e0       	ldi	r24, 0x04	; 4
    8a12:	90 e0       	ldi	r25, 0x00	; 0
    8a14:	90 93 0a 09 	sts	0x090A, r25
    8a18:	80 93 09 09 	sts	0x0909, r24
    8a1c:	c9 01       	movw	r24, r18

			case IRCOMM_RX_MAX_SENSOR_STATE:
				irCommRxMaxDiff = 0;
    			irCommRxMaxSensor = -1;
				for(i=0; i<8; i++) {
					if ((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) > irCommRxMaxDiff) {
    8a1e:	1a 96       	adiw	r26, 0x0a	; 10
    8a20:	2d 91       	ld	r18, X+
    8a22:	3c 91       	ld	r19, X
    8a24:	1b 97       	sbiw	r26, 0x0b	; 11
    8a26:	42 85       	ldd	r20, Z+10	; 0x0a
    8a28:	53 85       	ldd	r21, Z+11	; 0x0b
    8a2a:	24 1b       	sub	r18, r20
    8a2c:	35 0b       	sbc	r19, r21
    8a2e:	82 17       	cp	r24, r18
    8a30:	93 07       	cpc	r25, r19
    8a32:	5c f4       	brge	.+22     	; 0x8a4a <irCommTasks+0x328>
						irCommRxMaxDiff = irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i];
    8a34:	30 93 bb 07 	sts	0x07BB, r19
    8a38:	20 93 ba 07 	sts	0x07BA, r18
						irCommRxMaxSensor = i;
    8a3c:	85 e0       	ldi	r24, 0x05	; 5
    8a3e:	90 e0       	ldi	r25, 0x00	; 0
    8a40:	90 93 0a 09 	sts	0x090A, r25
    8a44:	80 93 09 09 	sts	0x0909, r24
    8a48:	c9 01       	movw	r24, r18

			case IRCOMM_RX_MAX_SENSOR_STATE:
				irCommRxMaxDiff = 0;
    			irCommRxMaxSensor = -1;
				for(i=0; i<8; i++) {
					if ((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) > irCommRxMaxDiff) {
    8a4a:	1c 96       	adiw	r26, 0x0c	; 12
    8a4c:	2d 91       	ld	r18, X+
    8a4e:	3c 91       	ld	r19, X
    8a50:	1d 97       	sbiw	r26, 0x0d	; 13
    8a52:	44 85       	ldd	r20, Z+12	; 0x0c
    8a54:	55 85       	ldd	r21, Z+13	; 0x0d
    8a56:	24 1b       	sub	r18, r20
    8a58:	35 0b       	sbc	r19, r21
    8a5a:	82 17       	cp	r24, r18
    8a5c:	93 07       	cpc	r25, r19
    8a5e:	5c f4       	brge	.+22     	; 0x8a76 <irCommTasks+0x354>
						irCommRxMaxDiff = irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i];
    8a60:	30 93 bb 07 	sts	0x07BB, r19
    8a64:	20 93 ba 07 	sts	0x07BA, r18
						irCommRxMaxSensor = i;
    8a68:	86 e0       	ldi	r24, 0x06	; 6
    8a6a:	90 e0       	ldi	r25, 0x00	; 0
    8a6c:	90 93 0a 09 	sts	0x090A, r25
    8a70:	80 93 09 09 	sts	0x0909, r24
    8a74:	c9 01       	movw	r24, r18

			case IRCOMM_RX_MAX_SENSOR_STATE:
				irCommRxMaxDiff = 0;
    			irCommRxMaxSensor = -1;
				for(i=0; i<8; i++) {
					if ((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) > irCommRxMaxDiff) {
    8a76:	1e 96       	adiw	r26, 0x0e	; 14
    8a78:	2d 91       	ld	r18, X+
    8a7a:	3c 91       	ld	r19, X
    8a7c:	1f 97       	sbiw	r26, 0x0f	; 15
    8a7e:	46 85       	ldd	r20, Z+14	; 0x0e
    8a80:	57 85       	ldd	r21, Z+15	; 0x0f
    8a82:	24 1b       	sub	r18, r20
    8a84:	35 0b       	sbc	r19, r21
    8a86:	82 17       	cp	r24, r18
    8a88:	93 07       	cpc	r25, r19
    8a8a:	5c f4       	brge	.+22     	; 0x8aa2 <irCommTasks+0x380>
						irCommRxMaxDiff = irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i];
    8a8c:	30 93 bb 07 	sts	0x07BB, r19
    8a90:	20 93 ba 07 	sts	0x07BA, r18
						irCommRxMaxSensor = i;
    8a94:	87 e0       	ldi	r24, 0x07	; 7
    8a96:	90 e0       	ldi	r25, 0x00	; 0
    8a98:	90 93 0a 09 	sts	0x090A, r25
    8a9c:	80 93 09 09 	sts	0x0909, r24
    8aa0:	c9 01       	movw	r24, r18
					}
				}
				irCommRxMaxSensorTemp = irCommRxMaxSensor;
    8aa2:	20 91 09 09 	lds	r18, 0x0909
    8aa6:	30 91 0a 09 	lds	r19, 0x090A
    8aaa:	30 93 c1 08 	sts	0x08C1, r19
    8aae:	20 93 c0 08 	sts	0x08C0, r18
				irCommRxMaxDiffTemp = irCommRxMaxDiff;
    8ab2:	90 93 f4 08 	sts	0x08F4, r25
    8ab6:	80 93 f3 08 	sts	0x08F3, r24
				irCommMaxSensorValueCurrTemp = irCommMaxSensorValueCurr[irCommRxMaxSensor];
    8aba:	22 0f       	add	r18, r18
    8abc:	33 1f       	adc	r19, r19
    8abe:	a2 0f       	add	r26, r18
    8ac0:	b3 1f       	adc	r27, r19
    8ac2:	4d 91       	ld	r20, X+
    8ac4:	5c 91       	ld	r21, X
    8ac6:	11 97       	sbiw	r26, 0x01	; 1
    8ac8:	50 93 04 05 	sts	0x0504, r21
    8acc:	40 93 03 05 	sts	0x0503, r20
				irCommMinSensorValueCurrTemp = irCommMinSensorValueCurr[irCommRxMaxSensor];
    8ad0:	e2 0f       	add	r30, r18
    8ad2:	f3 1f       	adc	r31, r19
    8ad4:	20 81       	ld	r18, Z
    8ad6:	31 81       	ldd	r19, Z+1	; 0x01
    8ad8:	30 93 c3 08 	sts	0x08C3, r19
    8adc:	20 93 c2 08 	sts	0x08C2, r18


				//if(irCommRxMaxSensor == -1) {
				//	updateRedLed(0);
				//}
				if(irCommRxMaxDiff >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    8ae0:	88 32       	cpi	r24, 0x28	; 40
    8ae2:	91 05       	cpc	r25, r1
    8ae4:	0c f0       	brlt	.+2      	; 0x8ae8 <irCommTasks+0x3c6>
    8ae6:	06 c2       	rjmp	.+1036   	; 0x8ef4 <irCommTasks+0x7d2>
					irCommState = IRCOMM_RX_DETECT_START_BIT_STATE;
				} else {
					irCommRxStartBitDetected = 0;
    8ae8:	10 92 ed 04 	sts	0x04ED, r1
					if(irCommEnabled == IRCOMM_MODE_RECEIVE) {
    8aec:	80 91 c2 04 	lds	r24, 0x04C2
    8af0:	81 30       	cpi	r24, 0x01	; 1
    8af2:	09 f0       	breq	.+2      	; 0x8af6 <irCommTasks+0x3d4>
    8af4:	26 c1       	rjmp	.+588    	; 0x8d42 <irCommTasks+0x620>
				} else {
					irCommRxByteExpected++;
				}
				*/				
				if(irCommEnabled == IRCOMM_MODE_RECEIVE) {
					currentProx = 0;
    8af6:	10 92 24 02 	sts	0x0224, r1
					adcSaveDataTo = SKIP_SAMPLE;
    8afa:	85 e0       	ldi	r24, 0x05	; 5
    8afc:	80 93 b9 02 	sts	0x02B9, r24
					adcSamplingState = 0;
    8b00:	10 92 ba 02 	sts	0x02BA, r1
					irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    8b04:	10 92 c3 04 	sts	0x04C3, r1
    8b08:	1c c1       	rjmp	.+568    	; 0x8d42 <irCommTasks+0x620>
				break;

			case IRCOMM_RX_DETECT_START_BIT_STATE:
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
				irCommTempMin = 1024;
    8b0a:	80 e0       	ldi	r24, 0x00	; 0
    8b0c:	94 e0       	ldi	r25, 0x04	; 4
    8b0e:	90 93 db 04 	sts	0x04DB, r25
    8b12:	80 93 da 04 	sts	0x04DA, r24
				irCommTempMax = 0;
    8b16:	10 92 d9 04 	sts	0x04D9, r1
    8b1a:	10 92 d8 04 	sts	0x04D8, r1
				irCommShiftCount = 0;
    8b1e:	10 92 dc 04 	sts	0x04DC, r1
				irCommComputeShift = 1;
    8b22:	00 93 dd 04 	sts	0x04DD, r16
    8b26:	ca ec       	ldi	r28, 0xCA	; 202
    8b28:	d8 e0       	ldi	r29, 0x08	; 8
    8b2a:	fe eb       	ldi	r31, 0xBE	; 190
    8b2c:	ef 2e       	mov	r14, r31
    8b2e:	f7 e0       	ldi	r31, 0x07	; 7
    8b30:	ff 2e       	mov	r15, r31
    8b32:	6e 01       	movw	r12, r28
    8b34:	00 e0       	ldi	r16, 0x00	; 0
    8b36:	10 e0       	ldi	r17, 0x00	; 0
    8b38:	77 24       	eor	r7, r7
    8b3a:	73 94       	inc	r7
    8b3c:	20 e0       	ldi	r18, 0x00	; 0
    8b3e:	30 e0       	ldi	r19, 0x00	; 0
    8b40:	a9 01       	movw	r20, r18
							} else if(irCommMaxSensorSignal[i] == irCommTempMin) {
								irCommRxPeakHighToLow = 1;
							} else {
								updateRedLed(0);
							}
							irCommTempMin = 1024;
    8b42:	a1 2c       	mov	r10, r1
    8b44:	e4 e0       	ldi	r30, 0x04	; 4
    8b46:	be 2e       	mov	r11, r30
							irCommTempMax = 0;
							irCommComputeShift = 2;
    8b48:	72 e0       	ldi	r23, 0x02	; 2
    8b4a:	97 2e       	mov	r9, r23
						irCommTempValue = (irCommTempMax - irCommTempMin);
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
							if(irCommMaxSensorSignal[i] == irCommTempMax) {
								irCommRxPeakHighToLow = 0;
							} else if(irCommMaxSensorSignal[i] == irCommTempMin) {
								irCommRxPeakHighToLow = 1;
    8b4c:	88 24       	eor	r8, r8
    8b4e:	83 94       	inc	r8
    8b50:	14 c0       	rjmp	.+40     	; 0x8b7a <irCommTasks+0x458>
							irCommTempMax = 0;
							irCommComputeShift = 2;
							irCommShiftCount--;	// the current sample is already part of the signal start thus do not skip it
							irCommRxStartPeakDuration = 0;
						}
					 } else if(irCommComputeShift == 2) {		
    8b52:	27 2d       	mov	r18, r7
    8b54:	22 30       	cpi	r18, 0x02	; 2
    8b56:	09 f4       	brne	.+2      	; 0x8b5a <irCommTasks+0x438>
    8b58:	a7 c0       	rjmp	.+334    	; 0x8ca8 <irCommTasks+0x586>
						}	
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
							if((irCommMaxSensorSignal[i]==irCommTempMax) && (irCommRxPeakHighToLow==1)) {
								irCommComputeShift = 0;
							} else if((irCommMaxSensorSignal[i]==irCommTempMin) && (irCommRxPeakHighToLow==0)) {
								irCommComputeShift = 0;
    8b5a:	08 5f       	subi	r16, 0xF8	; 248
    8b5c:	1f 4f       	sbci	r17, 0xFF	; 255
				irCommProxSum = 0;
				irCommTempMin = 1024;
				irCommTempMax = 0;
				irCommShiftCount = 0;
				irCommComputeShift = 1;
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    8b5e:	00 3a       	cpi	r16, 0xA0	; 160
    8b60:	11 05       	cpc	r17, r1
    8b62:	09 f4       	brne	.+2      	; 0x8b66 <irCommTasks+0x444>
    8b64:	78 c1       	rjmp	.+752    	; 0x8e56 <irCommTasks+0x734>
    8b66:	20 91 d4 04 	lds	r18, 0x04D4
    8b6a:	30 91 d5 04 	lds	r19, 0x04D5
    8b6e:	40 91 d6 04 	lds	r20, 0x04D6
    8b72:	50 91 d7 04 	lds	r21, 0x04D7
    8b76:	70 90 dd 04 	lds	r7, 0x04DD
					irCommMaxSensorSignal[i] = irCommProxValuesCurr[irCommRxMaxSensor+i*8];
    8b7a:	80 91 09 09 	lds	r24, 0x0909
    8b7e:	90 91 0a 09 	lds	r25, 0x090A
    8b82:	80 0f       	add	r24, r16
    8b84:	91 1f       	adc	r25, r17
    8b86:	88 0f       	add	r24, r24
    8b88:	99 1f       	adc	r25, r25
    8b8a:	e0 91 a8 07 	lds	r30, 0x07A8
    8b8e:	f0 91 a9 07 	lds	r31, 0x07A9
    8b92:	e8 0f       	add	r30, r24
    8b94:	f9 1f       	adc	r31, r25
    8b96:	01 90       	ld	r0, Z+
    8b98:	f0 81       	ld	r31, Z
    8b9a:	e0 2d       	mov	r30, r0
    8b9c:	d6 01       	movw	r26, r12
    8b9e:	ed 93       	st	X+, r30
    8ba0:	fd 93       	st	X+, r31
    8ba2:	6d 01       	movw	r12, r26
					irCommMaxSensorSignalTemp[i] = irCommMaxSensorSignal[i];
    8ba4:	d7 01       	movw	r26, r14
    8ba6:	ed 93       	st	X+, r30
    8ba8:	fd 93       	st	X+, r31
    8baa:	7d 01       	movw	r14, r26
					irCommProxSum += irCommMaxSensorSignal[i];
    8bac:	bf 01       	movw	r22, r30
    8bae:	88 27       	eor	r24, r24
    8bb0:	77 fd       	sbrc	r23, 7
    8bb2:	80 95       	com	r24
    8bb4:	98 2f       	mov	r25, r24
    8bb6:	62 0f       	add	r22, r18
    8bb8:	73 1f       	adc	r23, r19
    8bba:	84 1f       	adc	r24, r20
    8bbc:	95 1f       	adc	r25, r21
    8bbe:	60 93 d4 04 	sts	0x04D4, r22
    8bc2:	70 93 d5 04 	sts	0x04D5, r23
    8bc6:	80 93 d6 04 	sts	0x04D6, r24
    8bca:	90 93 d7 04 	sts	0x04D7, r25
					if(irCommComputeShift == 1) {	// compute the shift between the rx sampling and tx signal
    8bce:	b7 2d       	mov	r27, r7
    8bd0:	b1 30       	cpi	r27, 0x01	; 1
    8bd2:	09 f0       	breq	.+2      	; 0x8bd6 <irCommTasks+0x4b4>
    8bd4:	be cf       	rjmp	.-132    	; 0x8b52 <irCommTasks+0x430>
						irCommShiftCount++;								
    8bd6:	70 90 dc 04 	lds	r7, 0x04DC
    8bda:	73 94       	inc	r7
    8bdc:	70 92 dc 04 	sts	0x04DC, r7
						if(irCommTempMin > irCommMaxSensorSignal[i]) {
    8be0:	a0 91 da 04 	lds	r26, 0x04DA
    8be4:	b0 91 db 04 	lds	r27, 0x04DB
    8be8:	ea 17       	cp	r30, r26
    8bea:	fb 07       	cpc	r31, r27
    8bec:	2c f4       	brge	.+10     	; 0x8bf8 <irCommTasks+0x4d6>
							irCommTempMin = irCommMaxSensorSignal[i];
    8bee:	f0 93 db 04 	sts	0x04DB, r31
    8bf2:	e0 93 da 04 	sts	0x04DA, r30
    8bf6:	df 01       	movw	r26, r30
						}
						if(irCommTempMax < irCommMaxSensorSignal[i]) {
    8bf8:	40 91 d8 04 	lds	r20, 0x04D8
    8bfc:	50 91 d9 04 	lds	r21, 0x04D9
    8c00:	4e 17       	cp	r20, r30
    8c02:	5f 07       	cpc	r21, r31
    8c04:	2c f4       	brge	.+10     	; 0x8c10 <irCommTasks+0x4ee>
							irCommTempMax = irCommMaxSensorSignal[i];
    8c06:	f0 93 d9 04 	sts	0x04D9, r31
    8c0a:	e0 93 d8 04 	sts	0x04D8, r30
    8c0e:	af 01       	movw	r20, r30
						}
						irCommTempValue = (irCommTempMax - irCommTempMin);
    8c10:	9a 01       	movw	r18, r20
    8c12:	2a 1b       	sub	r18, r26
    8c14:	3b 0b       	sbc	r19, r27
    8c16:	30 93 c6 04 	sts	0x04C6, r19
    8c1a:	20 93 c5 04 	sts	0x04C5, r18
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    8c1e:	28 32       	cpi	r18, 0x28	; 40
    8c20:	31 05       	cpc	r19, r1
    8c22:	0c f4       	brge	.+2      	; 0x8c26 <irCommTasks+0x504>
    8c24:	9a cf       	rjmp	.-204    	; 0x8b5a <irCommTasks+0x438>
							if(irCommMaxSensorSignal[i] == irCommTempMax) {
    8c26:	e4 17       	cp	r30, r20
    8c28:	f5 07       	cpc	r31, r21
    8c2a:	09 f4       	brne	.+2      	; 0x8c2e <irCommTasks+0x50c>
    8c2c:	c9 c1       	rjmp	.+914    	; 0x8fc0 <irCommTasks+0x89e>
								irCommRxPeakHighToLow = 0;
							} else if(irCommMaxSensorSignal[i] == irCommTempMin) {
    8c2e:	ea 17       	cp	r30, r26
    8c30:	fb 07       	cpc	r31, r27
    8c32:	09 f0       	breq	.+2      	; 0x8c36 <irCommTasks+0x514>
    8c34:	8a c0       	rjmp	.+276    	; 0x8d4a <irCommTasks+0x628>
								irCommRxPeakHighToLow = 1;
    8c36:	80 92 ee 04 	sts	0x04EE, r8
							} else {
								updateRedLed(0);
							}
							irCommTempMin = 1024;
    8c3a:	b0 92 db 04 	sts	0x04DB, r11
    8c3e:	a0 92 da 04 	sts	0x04DA, r10
							irCommTempMax = 0;
    8c42:	10 92 d9 04 	sts	0x04D9, r1
    8c46:	10 92 d8 04 	sts	0x04D8, r1
							irCommComputeShift = 2;
    8c4a:	90 92 dd 04 	sts	0x04DD, r9
							irCommShiftCount--;	// the current sample is already part of the signal start thus do not skip it
    8c4e:	7a 94       	dec	r7
    8c50:	70 92 dc 04 	sts	0x04DC, r7
							irCommRxStartPeakDuration = 0;
    8c54:	10 92 ef 04 	sts	0x04EF, r1
    8c58:	60 91 d4 04 	lds	r22, 0x04D4
    8c5c:	70 91 d5 04 	lds	r23, 0x04D5
    8c60:	80 91 d6 04 	lds	r24, 0x04D6
    8c64:	90 91 d7 04 	lds	r25, 0x04D7
    8c68:	78 cf       	rjmp	.-272    	; 0x8b5a <irCommTasks+0x438>
				irCommTxPulseState = 0;	
				irCommState = IRCOMM_TX_COMPUTE_TIMINGS;				
				break;

			case IRCOMM_TX_COMPUTE_TIMINGS:
				if(irCommTxBitToTransmit[irCommTxBitCount] == 2) {
    8c6a:	e0 91 f8 04 	lds	r30, 0x04F8
    8c6e:	f0 e0       	ldi	r31, 0x00	; 0
    8c70:	e3 5f       	subi	r30, 0xF3	; 243
    8c72:	fa 4f       	sbci	r31, 0xFA	; 250
    8c74:	20 81       	ld	r18, Z
    8c76:	22 30       	cpi	r18, 0x02	; 2
    8c78:	09 f4       	brne	.+2      	; 0x8c7c <irCommTasks+0x55a>
    8c7a:	c9 c1       	rjmp	.+914    	; 0x900e <irCommTasks+0x8ec>
					irCommTxDuration = IRCOMM_BIT_START_DURATION;					
					irCommTxSwitchCount = IRCOMM_BIT_START_SWITCH_COUNT;
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 1) {
    8c7c:	21 30       	cpi	r18, 0x01	; 1
    8c7e:	09 f4       	brne	.+2      	; 0x8c82 <irCommTasks+0x560>
    8c80:	3d c1       	rjmp	.+634    	; 0x8efc <irCommTasks+0x7da>
					irCommTxDuration = IRCOMM_BIT1_DURATOIN;					
					irCommTxSwitchCount = IRCOMM_BIT1_SWITCH_COUNT;
				} else {
					irCommTxDuration = IRCOMM_BIT0_DURATION;						
    8c82:	8e e1       	ldi	r24, 0x1E	; 30
    8c84:	90 e0       	ldi	r25, 0x00	; 0
    8c86:	90 93 fb 04 	sts	0x04FB, r25
    8c8a:	80 93 fa 04 	sts	0x04FA, r24
					irCommTxSwitchCount = IRCOMM_BIT0_SWITCH_COUNT;
    8c8e:	88 e0       	ldi	r24, 0x08	; 8
    8c90:	80 93 fc 04 	sts	0x04FC, r24
				}
				irCommTxDurationCycle = 0;
    8c94:	10 92 fe 04 	sts	0x04FE, r1
				irCommTxSwitchCounter = 0;						
    8c98:	10 92 fd 04 	sts	0x04FD, r1
				irCommState = IRCOMM_TX_TRANSMIT_BIT;
    8c9c:	83 e0       	ldi	r24, 0x03	; 3
    8c9e:	80 93 c4 04 	sts	0x04C4, r24
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ1;
    8ca2:	80 93 f0 04 	sts	0x04F0, r24
    8ca6:	51 cd       	rjmp	.-1374   	; 0x874a <irCommTasks+0x28>
							irCommComputeShift = 2;
							irCommShiftCount--;	// the current sample is already part of the signal start thus do not skip it
							irCommRxStartPeakDuration = 0;
						}
					 } else if(irCommComputeShift == 2) {		
					 	irCommRxStartPeakDuration++;					
    8ca8:	20 91 ef 04 	lds	r18, 0x04EF
    8cac:	2f 5f       	subi	r18, 0xFF	; 255
    8cae:	20 93 ef 04 	sts	0x04EF, r18
						if(irCommTempMin > irCommMaxSensorSignal[i]) {
    8cb2:	a0 91 da 04 	lds	r26, 0x04DA
    8cb6:	b0 91 db 04 	lds	r27, 0x04DB
    8cba:	ea 17       	cp	r30, r26
    8cbc:	fb 07       	cpc	r31, r27
    8cbe:	2c f4       	brge	.+10     	; 0x8cca <irCommTasks+0x5a8>
							irCommTempMin = irCommMaxSensorSignal[i];
    8cc0:	f0 93 db 04 	sts	0x04DB, r31
    8cc4:	e0 93 da 04 	sts	0x04DA, r30
    8cc8:	df 01       	movw	r26, r30
						}
						if(irCommTempMax < irCommMaxSensorSignal[i]) {
    8cca:	40 91 d8 04 	lds	r20, 0x04D8
    8cce:	50 91 d9 04 	lds	r21, 0x04D9
    8cd2:	4e 17       	cp	r20, r30
    8cd4:	5f 07       	cpc	r21, r31
    8cd6:	2c f4       	brge	.+10     	; 0x8ce2 <irCommTasks+0x5c0>
							irCommTempMax = irCommMaxSensorSignal[i];
    8cd8:	f0 93 d9 04 	sts	0x04D9, r31
    8cdc:	e0 93 d8 04 	sts	0x04D8, r30
    8ce0:	af 01       	movw	r20, r30
						}	
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    8ce2:	9a 01       	movw	r18, r20
    8ce4:	2a 1b       	sub	r18, r26
    8ce6:	3b 0b       	sbc	r19, r27
    8ce8:	28 32       	cpi	r18, 0x28	; 40
    8cea:	31 05       	cpc	r19, r1
    8cec:	0c f4       	brge	.+2      	; 0x8cf0 <irCommTasks+0x5ce>
    8cee:	35 cf       	rjmp	.-406    	; 0x8b5a <irCommTasks+0x438>
							if((irCommMaxSensorSignal[i]==irCommTempMax) && (irCommRxPeakHighToLow==1)) {
    8cf0:	e4 17       	cp	r30, r20
    8cf2:	f5 07       	cpc	r31, r21
    8cf4:	09 f4       	brne	.+2      	; 0x8cf8 <irCommTasks+0x5d6>
    8cf6:	67 c1       	rjmp	.+718    	; 0x8fc6 <irCommTasks+0x8a4>
								irCommComputeShift = 0;
							} else if((irCommMaxSensorSignal[i]==irCommTempMin) && (irCommRxPeakHighToLow==0)) {
    8cf8:	ea 17       	cp	r30, r26
    8cfa:	fb 07       	cpc	r31, r27
    8cfc:	09 f0       	breq	.+2      	; 0x8d00 <irCommTasks+0x5de>
    8cfe:	2d cf       	rjmp	.-422    	; 0x8b5a <irCommTasks+0x438>
    8d00:	20 91 ee 04 	lds	r18, 0x04EE
    8d04:	22 23       	and	r18, r18
    8d06:	09 f0       	breq	.+2      	; 0x8d0a <irCommTasks+0x5e8>
    8d08:	28 cf       	rjmp	.-432    	; 0x8b5a <irCommTasks+0x438>
								irCommComputeShift = 0;
    8d0a:	10 92 dd 04 	sts	0x04DD, r1
    8d0e:	25 cf       	rjmp	.-438    	; 0x8b5a <irCommTasks+0x438>
void irCommTasks() {
	int i = 0;

	if(irCommMode==IRCOMM_MODE_RECEIVE) {

		switch(irCommState) {
    8d10:	86 30       	cpi	r24, 0x06	; 6
    8d12:	09 f1       	breq	.+66     	; 0x8d56 <irCommTasks+0x634>
    8d14:	87 30       	cpi	r24, 0x07	; 7
    8d16:	09 f0       	breq	.+2      	; 0x8d1a <irCommTasks+0x5f8>
    8d18:	18 cd       	rjmp	.-1488   	; 0x874a <irCommTasks+0x28>
					irCommState = IRCOMM_RX_WAITING_BIT;
				}							
				break;

			case IRCOMM_RX_CHECK_CRC:
				irCommRxCrcError = (irCommRxCrc + (irCommRxBitReceived[8]<<1) + irCommRxBitReceived[9])&0x03;
    8d1a:	80 91 22 05 	lds	r24, 0x0522
    8d1e:	90 91 d3 04 	lds	r25, 0x04D3
    8d22:	89 0f       	add	r24, r25
    8d24:	90 91 21 05 	lds	r25, 0x0521
    8d28:	99 0f       	add	r25, r25
    8d2a:	89 0f       	add	r24, r25
    8d2c:	83 70       	andi	r24, 0x03	; 3
    8d2e:	80 93 e4 04 	sts	0x04E4, r24
				if(irCommRxCrcError==0) {
    8d32:	88 23       	and	r24, r24
    8d34:	09 f4       	brne	.+2      	; 0x8d38 <irCommTasks+0x616>
    8d36:	d3 c0       	rjmp	.+422    	; 0x8ede <irCommTasks+0x7bc>
					irCommRxSequenceCount++;
				} else {
					irCommRxByteExpected++;
				}
				*/				
				if(irCommEnabled == IRCOMM_MODE_RECEIVE) {
    8d38:	80 91 c2 04 	lds	r24, 0x04C2
    8d3c:	81 30       	cpi	r24, 0x01	; 1
    8d3e:	09 f4       	brne	.+2      	; 0x8d42 <irCommTasks+0x620>
    8d40:	da ce       	rjmp	.-588    	; 0x8af6 <irCommTasks+0x3d4>
					currentProx = 0;
					adcSaveDataTo = SKIP_SAMPLE;
					adcSamplingState = 0;
					irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
				}
				irCommState = IRCOMM_RX_IDLE_STATE;				
    8d42:	81 e0       	ldi	r24, 0x01	; 1
    8d44:	80 93 c4 04 	sts	0x04C4, r24
				break;
    8d48:	00 cd       	rjmp	.-1536   	; 0x874a <irCommTasks+0x28>
							if(irCommMaxSensorSignal[i] == irCommTempMax) {
								irCommRxPeakHighToLow = 0;
							} else if(irCommMaxSensorSignal[i] == irCommTempMin) {
								irCommRxPeakHighToLow = 1;
							} else {
								updateRedLed(0);
    8d4a:	80 e0       	ldi	r24, 0x00	; 0
    8d4c:	0e 94 07 3b 	call	0x760e	; 0x760e <updateRedLed>
    8d50:	70 90 dc 04 	lds	r7, 0x04DC
    8d54:	72 cf       	rjmp	.-284    	; 0x8c3a <irCommTasks+0x518>
			case IRCOMM_RX_WAITING_BIT:
				break;

			case IRCOMM_RX_READ_BIT:
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
    8d56:	10 92 d4 04 	sts	0x04D4, r1
    8d5a:	10 92 d5 04 	sts	0x04D5, r1
    8d5e:	10 92 d6 04 	sts	0x04D6, r1
    8d62:	10 92 d7 04 	sts	0x04D7, r1
				irCommTempMin = 1024;
    8d66:	80 e0       	ldi	r24, 0x00	; 0
    8d68:	94 e0       	ldi	r25, 0x04	; 4
    8d6a:	90 93 db 04 	sts	0x04DB, r25
    8d6e:	80 93 da 04 	sts	0x04DA, r24
				irCommTempMax = 0;
    8d72:	10 92 d9 04 	sts	0x04D9, r1
    8d76:	10 92 d8 04 	sts	0x04D8, r1
void irCommDeinit() {
	irCommEnabled = IRCOMM_MODE_SENSORS_SAMPLING;
	irCommMode = IRCOMM_MODE_SENSORS_SAMPLING;
}

void irCommTasks() {
    8d7a:	80 91 09 09 	lds	r24, 0x0909
    8d7e:	90 91 0a 09 	lds	r25, 0x090A
    8d82:	88 0f       	add	r24, r24
    8d84:	99 1f       	adc	r25, r25
    8d86:	e0 91 a8 07 	lds	r30, 0x07A8
    8d8a:	f0 91 a9 07 	lds	r31, 0x07A9
    8d8e:	e8 0f       	add	r30, r24
    8d90:	f9 1f       	adc	r31, r25

			case IRCOMM_RX_READ_BIT:
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
				irCommTempMin = 1024;
				irCommTempMax = 0;
    8d92:	ca ec       	ldi	r28, 0xCA	; 202
    8d94:	d8 e0       	ldi	r29, 0x08	; 8
void irCommDeinit() {
	irCommEnabled = IRCOMM_MODE_SENSORS_SAMPLING;
	irCommMode = IRCOMM_MODE_SENSORS_SAMPLING;
}

void irCommTasks() {
    8d96:	de 01       	movw	r26, r28
    8d98:	60 e0       	ldi	r22, 0x00	; 0
    8d9a:	70 e0       	ldi	r23, 0x00	; 0
    8d9c:	cb 01       	movw	r24, r22
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
				irCommTempMin = 1024;
				irCommTempMax = 0;
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
					irCommMaxSensorSignal[i] = irCommProxValuesCurr[irCommRxMaxSensor+i*8];
    8d9e:	20 81       	ld	r18, Z
    8da0:	31 81       	ldd	r19, Z+1	; 0x01
    8da2:	2d 93       	st	X+, r18
    8da4:	3d 93       	st	X+, r19
					irCommProxSum += irCommMaxSensorSignal[i];
    8da6:	44 27       	eor	r20, r20
    8da8:	37 fd       	sbrc	r19, 7
    8daa:	40 95       	com	r20
    8dac:	54 2f       	mov	r21, r20
    8dae:	62 0f       	add	r22, r18
    8db0:	73 1f       	adc	r23, r19
    8db2:	84 1f       	adc	r24, r20
    8db4:	95 1f       	adc	r25, r21
    8db6:	70 96       	adiw	r30, 0x10	; 16
			case IRCOMM_RX_READ_BIT:
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
				irCommTempMin = 1024;
				irCommTempMax = 0;
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    8db8:	28 e0       	ldi	r18, 0x08	; 8
    8dba:	a2 3f       	cpi	r26, 0xF2	; 242
    8dbc:	b2 07       	cpc	r27, r18
    8dbe:	79 f7       	brne	.-34     	; 0x8d9e <irCommTasks+0x67c>
    8dc0:	60 93 d4 04 	sts	0x04D4, r22
    8dc4:	70 93 d5 04 	sts	0x04D5, r23
    8dc8:	80 93 d6 04 	sts	0x04D6, r24
    8dcc:	90 93 d7 04 	sts	0x04D7, r25
					irCommMaxSensorSignal[i] = irCommProxValuesCurr[irCommRxMaxSensor+i*8];
					irCommProxSum += irCommMaxSensorSignal[i];
				}
				irCommProxMean = (int)(irCommProxSum / IRCOMM_SAMPLING_WINDOW);
    8dd0:	24 e1       	ldi	r18, 0x14	; 20
    8dd2:	30 e0       	ldi	r19, 0x00	; 0
    8dd4:	40 e0       	ldi	r20, 0x00	; 0
    8dd6:	50 e0       	ldi	r21, 0x00	; 0
    8dd8:	0e 94 d4 4b 	call	0x97a8	; 0x97a8 <__divmodsi4>
    8ddc:	b9 01       	movw	r22, r18
    8dde:	30 93 df 04 	sts	0x04DF, r19
    8de2:	20 93 de 04 	sts	0x04DE, r18

				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
					irCommMaxSensorSignal[i] -= irCommProxMean;
    8de6:	88 81       	ld	r24, Y
    8de8:	99 81       	ldd	r25, Y+1	; 0x01
    8dea:	86 1b       	sub	r24, r22
    8dec:	97 0b       	sbc	r25, r23
    8dee:	89 93       	st	Y+, r24
    8df0:	99 93       	st	Y+, r25
					irCommProxSum += irCommMaxSensorSignal[i];
				}
				irCommProxMean = (int)(irCommProxSum / IRCOMM_SAMPLING_WINDOW);

				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    8df2:	88 e0       	ldi	r24, 0x08	; 8
    8df4:	c2 3f       	cpi	r28, 0xF2	; 242
    8df6:	d8 07       	cpc	r29, r24
    8df8:	b1 f7       	brne	.-20     	; 0x8de6 <irCommTasks+0x6c4>
					irCommMaxSensorSignal[i] -= irCommProxMean;
				}
						
				// start counting number of switch around mean signal
				if(irCommMaxSensorSignal[0] > 0) {
    8dfa:	80 91 ca 08 	lds	r24, 0x08CA
    8dfe:	90 91 cb 08 	lds	r25, 0x08CB
    8e02:	18 16       	cp	r1, r24
    8e04:	19 06       	cpc	r1, r25
    8e06:	0c f0       	brlt	.+2      	; 0x8e0a <irCommTasks+0x6e8>
    8e08:	83 c0       	rjmp	.+262    	; 0x8f10 <irCommTasks+0x7ee>
					irCommSignalState = 1;
    8e0a:	81 e0       	ldi	r24, 0x01	; 1
    8e0c:	80 93 e0 04 	sts	0x04E0, r24
    8e10:	21 e0       	ldi	r18, 0x01	; 1
    8e12:	38 2f       	mov	r19, r24
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
    8e14:	10 92 e2 04 	sts	0x04E2, r1
    8e18:	10 92 e1 04 	sts	0x04E1, r1
    8e1c:	ec ec       	ldi	r30, 0xCC	; 204
    8e1e:	f8 e0       	ldi	r31, 0x08	; 8
    8e20:	08 c0       	rjmp	.+16     	; 0x8e32 <irCommTasks+0x710>
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
    8e22:	27 fd       	sbrc	r18, 7
    8e24:	8c c0       	rjmp	.+280    	; 0x8f3e <irCommTasks+0x81c>
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
    8e26:	a8 e0       	ldi	r26, 0x08	; 8
    8e28:	e2 3f       	cpi	r30, 0xF2	; 242
    8e2a:	fa 07       	cpc	r31, r26
    8e2c:	09 f4       	brne	.+2      	; 0x8e30 <irCommTasks+0x70e>
    8e2e:	a8 c0       	rjmp	.+336    	; 0x8f80 <irCommTasks+0x85e>
    8e30:	23 2f       	mov	r18, r19
					if(irCommMaxSensorSignal[i] > 0) {
    8e32:	81 91       	ld	r24, Z+
    8e34:	91 91       	ld	r25, Z+
    8e36:	18 16       	cp	r1, r24
    8e38:	19 06       	cpc	r1, r25
    8e3a:	9c f3       	brlt	.-26     	; 0x8e22 <irCommTasks+0x700>
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
							irCommSwitchCount++;
						}
					} else {
						if(irCommSignalState > 0) {
    8e3c:	12 16       	cp	r1, r18
    8e3e:	9c f7       	brge	.-26     	; 0x8e26 <irCommTasks+0x704>
							irCommSignalState = -1;
							irCommSwitchCount++;
    8e40:	80 91 e1 04 	lds	r24, 0x04E1
    8e44:	90 91 e2 04 	lds	r25, 0x04E2
    8e48:	01 96       	adiw	r24, 0x01	; 1
    8e4a:	90 93 e2 04 	sts	0x04E2, r25
    8e4e:	80 93 e1 04 	sts	0x04E1, r24
							irCommSignalState = 1;
							irCommSwitchCount++;
						}
					} else {
						if(irCommSignalState > 0) {
							irCommSignalState = -1;
    8e52:	3f ef       	ldi	r19, 0xFF	; 255
    8e54:	e8 cf       	rjmp	.-48     	; 0x8e26 <irCommTasks+0x704>
				}
				
				//if(irCommComputeShift == 1) {	// it should not be never 1 because the difference between min and max in the current signal
				//	updateRedLed(0);			// is at least IRCOMM_DETECTION_AMPLITUDE_THR (checked in the previous state)
				//}
				irCommProxMean = (int)(irCommProxSum / IRCOMM_SAMPLING_WINDOW);
    8e56:	24 e1       	ldi	r18, 0x14	; 20
    8e58:	30 e0       	ldi	r19, 0x00	; 0
    8e5a:	40 e0       	ldi	r20, 0x00	; 0
    8e5c:	50 e0       	ldi	r21, 0x00	; 0
    8e5e:	0e 94 d4 4b 	call	0x97a8	; 0x97a8 <__divmodsi4>
    8e62:	b9 01       	movw	r22, r18
    8e64:	30 93 df 04 	sts	0x04DF, r19
    8e68:	20 93 de 04 	sts	0x04DE, r18
void irCommDeinit() {
	irCommEnabled = IRCOMM_MODE_SENSORS_SAMPLING;
	irCommMode = IRCOMM_MODE_SENSORS_SAMPLING;
}

void irCommTasks() {
    8e6c:	22 ef       	ldi	r18, 0xF2	; 242
    8e6e:	38 e0       	ldi	r19, 0x08	; 8
				//}
				irCommProxMean = (int)(irCommProxSum / IRCOMM_SAMPLING_WINDOW);

				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
					irCommMaxSensorSignal[i] -= irCommProxMean;
    8e70:	88 81       	ld	r24, Y
    8e72:	99 81       	ldd	r25, Y+1	; 0x01
    8e74:	86 1b       	sub	r24, r22
    8e76:	97 0b       	sbc	r25, r23
    8e78:	89 93       	st	Y+, r24
    8e7a:	99 93       	st	Y+, r25
				//	updateRedLed(0);			// is at least IRCOMM_DETECTION_AMPLITUDE_THR (checked in the previous state)
				//}
				irCommProxMean = (int)(irCommProxSum / IRCOMM_SAMPLING_WINDOW);

				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    8e7c:	88 e0       	ldi	r24, 0x08	; 8
    8e7e:	c2 3f       	cpi	r28, 0xF2	; 242
    8e80:	d8 07       	cpc	r29, r24
    8e82:	b1 f7       	brne	.-20     	; 0x8e70 <irCommTasks+0x74e>
					irCommMaxSensorSignal[i] -= irCommProxMean;
				}
						
				// start counting number of switch around mean signal
				if(irCommMaxSensorSignal[0] > 0) {
    8e84:	80 91 ca 08 	lds	r24, 0x08CA
    8e88:	90 91 cb 08 	lds	r25, 0x08CB
    8e8c:	18 16       	cp	r1, r24
    8e8e:	19 06       	cpc	r1, r25
    8e90:	0c f0       	brlt	.+2      	; 0x8e94 <irCommTasks+0x772>
    8e92:	44 c0       	rjmp	.+136    	; 0x8f1c <irCommTasks+0x7fa>
					irCommSignalState = 1;
    8e94:	81 e0       	ldi	r24, 0x01	; 1
    8e96:	80 93 e0 04 	sts	0x04E0, r24
    8e9a:	41 e0       	ldi	r20, 0x01	; 1
    8e9c:	58 2f       	mov	r21, r24
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
    8e9e:	10 92 e2 04 	sts	0x04E2, r1
    8ea2:	10 92 e1 04 	sts	0x04E1, r1
    8ea6:	ec ec       	ldi	r30, 0xCC	; 204
    8ea8:	f8 e0       	ldi	r31, 0x08	; 8
    8eaa:	07 c0       	rjmp	.+14     	; 0x8eba <irCommTasks+0x798>
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
    8eac:	47 fd       	sbrc	r20, 7
    8eae:	3c c0       	rjmp	.+120    	; 0x8f28 <irCommTasks+0x806>
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
    8eb0:	2e 17       	cp	r18, r30
    8eb2:	3f 07       	cpc	r19, r31
    8eb4:	09 f4       	brne	.+2      	; 0x8eb8 <irCommTasks+0x796>
    8eb6:	4e c0       	rjmp	.+156    	; 0x8f54 <irCommTasks+0x832>
    8eb8:	45 2f       	mov	r20, r21
					if(irCommMaxSensorSignal[i] > 0) {
    8eba:	81 91       	ld	r24, Z+
    8ebc:	91 91       	ld	r25, Z+
    8ebe:	18 16       	cp	r1, r24
    8ec0:	19 06       	cpc	r1, r25
    8ec2:	a4 f3       	brlt	.-24     	; 0x8eac <irCommTasks+0x78a>
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
							irCommSwitchCount++;
						}
					} else {
						if(irCommSignalState > 0) {
    8ec4:	14 16       	cp	r1, r20
    8ec6:	a4 f7       	brge	.-24     	; 0x8eb0 <irCommTasks+0x78e>
							irCommSignalState = -1;
							irCommSwitchCount++;
    8ec8:	80 91 e1 04 	lds	r24, 0x04E1
    8ecc:	90 91 e2 04 	lds	r25, 0x04E2
    8ed0:	01 96       	adiw	r24, 0x01	; 1
    8ed2:	90 93 e2 04 	sts	0x04E2, r25
    8ed6:	80 93 e1 04 	sts	0x04E1, r24
							irCommSignalState = 1;
							irCommSwitchCount++;
						}
					} else {
						if(irCommSignalState > 0) {
							irCommSignalState = -1;
    8eda:	5f ef       	ldi	r21, 0xFF	; 255
    8edc:	e9 cf       	rjmp	.-46     	; 0x8eb0 <irCommTasks+0x78e>
				break;

			case IRCOMM_RX_CHECK_CRC:
				irCommRxCrcError = (irCommRxCrc + (irCommRxBitReceived[8]<<1) + irCommRxBitReceived[9])&0x03;
				if(irCommRxCrcError==0) {
					irCommRxLastDataReceived = irCommRxByte;
    8ede:	80 91 e5 04 	lds	r24, 0x04E5
    8ee2:	80 93 ea 04 	sts	0x04EA, r24
					irCommRxReceivingSensor = irCommRxMaxSensor;
    8ee6:	80 91 09 09 	lds	r24, 0x0909
    8eea:	80 93 18 02 	sts	0x0218, r24
					irCommRxDataAvailabled = 1;					
    8eee:	00 93 eb 04 	sts	0x04EB, r16
    8ef2:	22 cf       	rjmp	.-444    	; 0x8d38 <irCommTasks+0x616>

				//if(irCommRxMaxSensor == -1) {
				//	updateRedLed(0);
				//}
				if(irCommRxMaxDiff >= IRCOMM_DETECTION_AMPLITUDE_THR) {
					irCommState = IRCOMM_RX_DETECT_START_BIT_STATE;
    8ef4:	83 e0       	ldi	r24, 0x03	; 3
    8ef6:	80 93 c4 04 	sts	0x04C4, r24
    8efa:	27 cc       	rjmp	.-1970   	; 0x874a <irCommTasks+0x28>
			case IRCOMM_TX_COMPUTE_TIMINGS:
				if(irCommTxBitToTransmit[irCommTxBitCount] == 2) {
					irCommTxDuration = IRCOMM_BIT_START_DURATION;					
					irCommTxSwitchCount = IRCOMM_BIT_START_SWITCH_COUNT;
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 1) {
					irCommTxDuration = IRCOMM_BIT1_DURATOIN;					
    8efc:	8c e3       	ldi	r24, 0x3C	; 60
    8efe:	90 e0       	ldi	r25, 0x00	; 0
    8f00:	90 93 fb 04 	sts	0x04FB, r25
    8f04:	80 93 fa 04 	sts	0x04FA, r24
					irCommTxSwitchCount = IRCOMM_BIT1_SWITCH_COUNT;
    8f08:	84 e0       	ldi	r24, 0x04	; 4
    8f0a:	80 93 fc 04 	sts	0x04FC, r24
    8f0e:	c2 ce       	rjmp	.-636    	; 0x8c94 <irCommTasks+0x572>
						
				// start counting number of switch around mean signal
				if(irCommMaxSensorSignal[0] > 0) {
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
    8f10:	8f ef       	ldi	r24, 0xFF	; 255
    8f12:	80 93 e0 04 	sts	0x04E0, r24
    8f16:	2f ef       	ldi	r18, 0xFF	; 255
    8f18:	38 2f       	mov	r19, r24
    8f1a:	7c cf       	rjmp	.-264    	; 0x8e14 <irCommTasks+0x6f2>
						
				// start counting number of switch around mean signal
				if(irCommMaxSensorSignal[0] > 0) {
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
    8f1c:	8f ef       	ldi	r24, 0xFF	; 255
    8f1e:	80 93 e0 04 	sts	0x04E0, r24
    8f22:	4f ef       	ldi	r20, 0xFF	; 255
    8f24:	58 2f       	mov	r21, r24
    8f26:	bb cf       	rjmp	.-138    	; 0x8e9e <irCommTasks+0x77c>
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
							irCommSwitchCount++;
    8f28:	80 91 e1 04 	lds	r24, 0x04E1
    8f2c:	90 91 e2 04 	lds	r25, 0x04E2
    8f30:	01 96       	adiw	r24, 0x01	; 1
    8f32:	90 93 e2 04 	sts	0x04E2, r25
    8f36:	80 93 e1 04 	sts	0x04E1, r24
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
    8f3a:	51 e0       	ldi	r21, 0x01	; 1
    8f3c:	b9 cf       	rjmp	.-142    	; 0x8eb0 <irCommTasks+0x78e>
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
							irCommSwitchCount++;
    8f3e:	80 91 e1 04 	lds	r24, 0x04E1
    8f42:	90 91 e2 04 	lds	r25, 0x04E2
    8f46:	01 96       	adiw	r24, 0x01	; 1
    8f48:	90 93 e2 04 	sts	0x04E2, r25
    8f4c:	80 93 e1 04 	sts	0x04E1, r24
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
    8f50:	31 e0       	ldi	r19, 0x01	; 1
    8f52:	69 cf       	rjmp	.-302    	; 0x8e26 <irCommTasks+0x704>
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
    8f54:	50 93 e0 04 	sts	0x04E0, r21
						}
					}
				}
				// check if a start bit is detected											
				//if(irCommSwitchCount >= IRCOMM_START_BIT_MIN_SWITCH_COUNT) {
				if((irCommSwitchCount==2) && (irCommRxStartPeakDuration>=9) && (irCommRxStartPeakDuration<=11)) {
    8f58:	80 91 e1 04 	lds	r24, 0x04E1
    8f5c:	90 91 e2 04 	lds	r25, 0x04E2
    8f60:	82 30       	cpi	r24, 0x02	; 2
    8f62:	91 05       	cpc	r25, r1
    8f64:	09 f4       	brne	.+2      	; 0x8f68 <irCommTasks+0x846>
    8f66:	60 c0       	rjmp	.+192    	; 0x9028 <irCommTasks+0x906>
					irCommRxBitCount = 0;	
					irCommRxCrc = 0;	
					irCommRxByte = 0;
					irCommState = IRCOMM_RX_SYNC_SIGNAL;																										
				} else {
					if(irCommSwitchCount == 1) {
    8f68:	80 91 e1 04 	lds	r24, 0x04E1
    8f6c:	90 91 e2 04 	lds	r25, 0x04E2
    8f70:	81 30       	cpi	r24, 0x01	; 1
    8f72:	91 05       	cpc	r25, r1
    8f74:	09 f0       	breq	.+2      	; 0x8f78 <irCommTasks+0x856>
    8f76:	e0 ce       	rjmp	.-576    	; 0x8d38 <irCommTasks+0x616>
						irCommRxStartBitDetected = 1;
    8f78:	81 e0       	ldi	r24, 0x01	; 1
    8f7a:	80 93 ed 04 	sts	0x04ED, r24
    8f7e:	dc ce       	rjmp	.-584    	; 0x8d38 <irCommTasks+0x616>
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
    8f80:	30 93 e0 04 	sts	0x04E0, r19
							irCommSwitchCount++;
						}
					}
				}
				// check whether we received either a "0" or a "1"
				if(irCommSwitchCount >= (IRCOMM_BIT0_SWITCH_COUNT-2)) {
    8f84:	80 91 e1 04 	lds	r24, 0x04E1
    8f88:	90 91 e2 04 	lds	r25, 0x04E2
    8f8c:	86 30       	cpi	r24, 0x06	; 6
    8f8e:	91 05       	cpc	r25, r1
    8f90:	00 f1       	brcs	.+64     	; 0x8fd2 <irCommTasks+0x8b0>
					irCommRxBitReceived[irCommRxBitCount] = 0;
    8f92:	80 91 e3 04 	lds	r24, 0x04E3
    8f96:	e8 2f       	mov	r30, r24
    8f98:	f0 e0       	ldi	r31, 0x00	; 0
    8f9a:	e7 5e       	subi	r30, 0xE7	; 231
    8f9c:	fa 4f       	sbci	r31, 0xFA	; 250
    8f9e:	10 82       	st	Z, r1
					if(irCommRxBitCount<8) {	// do not consider the crc for byte interpretation
    8fa0:	88 30       	cpi	r24, 0x08	; 8
    8fa2:	28 f4       	brcc	.+10     	; 0x8fae <irCommTasks+0x88c>
						irCommRxByte = irCommRxByte<<1;	// bit0, only shift
    8fa4:	90 91 e5 04 	lds	r25, 0x04E5
    8fa8:	99 0f       	add	r25, r25
    8faa:	90 93 e5 04 	sts	0x04E5, r25
						adcSamplingState = 0;
						irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
					}
					irCommState = IRCOMM_RX_IDLE_STATE;
				}
				irCommRxBitCount++;
    8fae:	8f 5f       	subi	r24, 0xFF	; 255
    8fb0:	80 93 e3 04 	sts	0x04E3, r24
				if(irCommRxBitCount == 10) {	// received 8 bit of data + 2 bit of crc
    8fb4:	8a 30       	cpi	r24, 0x0A	; 10
    8fb6:	a1 f1       	breq	.+104    	; 0x9020 <irCommTasks+0x8fe>
					irCommState = IRCOMM_RX_CHECK_CRC;
				} else {
					irCommState = IRCOMM_RX_WAITING_BIT;
    8fb8:	85 e0       	ldi	r24, 0x05	; 5
    8fba:	80 93 c4 04 	sts	0x04C4, r24
    8fbe:	c5 cb       	rjmp	.-2166   	; 0x874a <irCommTasks+0x28>
							irCommTempMax = irCommMaxSensorSignal[i];
						}
						irCommTempValue = (irCommTempMax - irCommTempMin);
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
							if(irCommMaxSensorSignal[i] == irCommTempMax) {
								irCommRxPeakHighToLow = 0;
    8fc0:	10 92 ee 04 	sts	0x04EE, r1
    8fc4:	3a ce       	rjmp	.-908    	; 0x8c3a <irCommTasks+0x518>
						}
						if(irCommTempMax < irCommMaxSensorSignal[i]) {
							irCommTempMax = irCommMaxSensorSignal[i];
						}	
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
							if((irCommMaxSensorSignal[i]==irCommTempMax) && (irCommRxPeakHighToLow==1)) {
    8fc6:	20 91 ee 04 	lds	r18, 0x04EE
    8fca:	21 30       	cpi	r18, 0x01	; 1
    8fcc:	09 f0       	breq	.+2      	; 0x8fd0 <irCommTasks+0x8ae>
    8fce:	94 ce       	rjmp	.-728    	; 0x8cf8 <irCommTasks+0x5d6>
    8fd0:	9c ce       	rjmp	.-712    	; 0x8d0a <irCommTasks+0x5e8>
				if(irCommSwitchCount >= (IRCOMM_BIT0_SWITCH_COUNT-2)) {
					irCommRxBitReceived[irCommRxBitCount] = 0;
					if(irCommRxBitCount<8) {	// do not consider the crc for byte interpretation
						irCommRxByte = irCommRxByte<<1;	// bit0, only shift
					}
				} else if(irCommSwitchCount >= (IRCOMM_BIT1_SWITCH_COUNT-1)) {
    8fd2:	80 91 e1 04 	lds	r24, 0x04E1
    8fd6:	90 91 e2 04 	lds	r25, 0x04E2
    8fda:	83 30       	cpi	r24, 0x03	; 3
    8fdc:	91 05       	cpc	r25, r1
    8fde:	08 f4       	brcc	.+2      	; 0x8fe2 <irCommTasks+0x8c0>
    8fe0:	4e c0       	rjmp	.+156    	; 0x907e <irCommTasks+0x95c>
					irCommRxBitReceived[irCommRxBitCount] = 1;
    8fe2:	80 91 e3 04 	lds	r24, 0x04E3
    8fe6:	e8 2f       	mov	r30, r24
    8fe8:	f0 e0       	ldi	r31, 0x00	; 0
    8fea:	e7 5e       	subi	r30, 0xE7	; 231
    8fec:	fa 4f       	sbci	r31, 0xFA	; 250
    8fee:	91 e0       	ldi	r25, 0x01	; 1
    8ff0:	90 83       	st	Z, r25
					if(irCommRxBitCount<8) {	// do not consider the crc for byte interpretation
    8ff2:	88 30       	cpi	r24, 0x08	; 8
    8ff4:	e0 f6       	brcc	.-72     	; 0x8fae <irCommTasks+0x88c>
						irCommRxCrc++;
    8ff6:	90 91 d3 04 	lds	r25, 0x04D3
    8ffa:	9f 5f       	subi	r25, 0xFF	; 255
    8ffc:	90 93 d3 04 	sts	0x04D3, r25
						irCommRxByte = irCommRxByte<<1;	// bit1, shift and add 1
    9000:	90 91 e5 04 	lds	r25, 0x04E5
    9004:	99 0f       	add	r25, r25
						irCommRxByte += 1;
    9006:	9f 5f       	subi	r25, 0xFF	; 255
    9008:	90 93 e5 04 	sts	0x04E5, r25
    900c:	d0 cf       	rjmp	.-96     	; 0x8fae <irCommTasks+0x88c>
				irCommState = IRCOMM_TX_COMPUTE_TIMINGS;				
				break;

			case IRCOMM_TX_COMPUTE_TIMINGS:
				if(irCommTxBitToTransmit[irCommTxBitCount] == 2) {
					irCommTxDuration = IRCOMM_BIT_START_DURATION;					
    900e:	88 e7       	ldi	r24, 0x78	; 120
    9010:	90 e0       	ldi	r25, 0x00	; 0
    9012:	90 93 fb 04 	sts	0x04FB, r25
    9016:	80 93 fa 04 	sts	0x04FA, r24
					irCommTxSwitchCount = IRCOMM_BIT_START_SWITCH_COUNT;
    901a:	20 93 fc 04 	sts	0x04FC, r18
    901e:	3a ce       	rjmp	.-908    	; 0x8c94 <irCommTasks+0x572>
					}
					irCommState = IRCOMM_RX_IDLE_STATE;
				}
				irCommRxBitCount++;
				if(irCommRxBitCount == 10) {	// received 8 bit of data + 2 bit of crc
					irCommState = IRCOMM_RX_CHECK_CRC;
    9020:	87 e0       	ldi	r24, 0x07	; 7
    9022:	80 93 c4 04 	sts	0x04C4, r24
    9026:	91 cb       	rjmp	.-2270   	; 0x874a <irCommTasks+0x28>
						}
					}
				}
				// check if a start bit is detected											
				//if(irCommSwitchCount >= IRCOMM_START_BIT_MIN_SWITCH_COUNT) {
				if((irCommSwitchCount==2) && (irCommRxStartPeakDuration>=9) && (irCommRxStartPeakDuration<=11)) {
    9028:	80 91 ef 04 	lds	r24, 0x04EF
    902c:	89 30       	cpi	r24, 0x09	; 9
    902e:	08 f4       	brcc	.+2      	; 0x9032 <irCommTasks+0x910>
    9030:	9b cf       	rjmp	.-202    	; 0x8f68 <irCommTasks+0x846>
    9032:	8c 30       	cpi	r24, 0x0C	; 12
    9034:	08 f0       	brcs	.+2      	; 0x9038 <irCommTasks+0x916>
    9036:	98 cf       	rjmp	.-208    	; 0x8f68 <irCommTasks+0x846>
					if(irCommRxPeakHighToLow == 1) {
    9038:	80 91 ee 04 	lds	r24, 0x04EE
    903c:	81 30       	cpi	r24, 0x01	; 1
    903e:	09 f4       	brne	.+2      	; 0x9042 <irCommTasks+0x920>
    9040:	40 c0       	rjmp	.+128    	; 0x90c2 <irCommTasks+0x9a0>
						irCommShiftCount = IRCOMM_SAMPLING_WINDOW/2 + irCommShiftCount;
					} else {
						if(irCommRxStartBitDetected == 1) {
    9042:	80 91 ed 04 	lds	r24, 0x04ED
    9046:	81 30       	cpi	r24, 0x01	; 1
    9048:	09 f4       	brne	.+2      	; 0x904c <irCommTasks+0x92a>
    904a:	41 c0       	rjmp	.+130    	; 0x90ce <irCommTasks+0x9ac>
							irCommShiftCount = irCommShiftCount;
						} else {
							irCommShiftCount = IRCOMM_SAMPLING_WINDOW + irCommShiftCount;
    904c:	80 91 dc 04 	lds	r24, 0x04DC
    9050:	8c 5e       	subi	r24, 0xEC	; 236
    9052:	80 93 dc 04 	sts	0x04DC, r24
						}
					}
					irCommShiftCountTemp = irCommShiftCount;
    9056:	80 93 0c 09 	sts	0x090C, r24
					irCommRxPeakHighToLow = 0;
    905a:	10 92 ee 04 	sts	0x04EE, r1
					irCommRxStartBitDetected = 0;
    905e:	10 92 ed 04 	sts	0x04ED, r1
					irCommSecondBitSkipped = 0;
    9062:	10 92 e6 04 	sts	0x04E6, r1
					irCommShiftCounter = 0;
    9066:	10 92 e7 04 	sts	0x04E7, r1
					irCommRxBitCount = 0;	
    906a:	10 92 e3 04 	sts	0x04E3, r1
					irCommRxCrc = 0;	
    906e:	10 92 d3 04 	sts	0x04D3, r1
					irCommRxByte = 0;
    9072:	10 92 e5 04 	sts	0x04E5, r1
					irCommState = IRCOMM_RX_SYNC_SIGNAL;																										
    9076:	84 e0       	ldi	r24, 0x04	; 4
    9078:	80 93 c4 04 	sts	0x04C4, r24
    907c:	66 cb       	rjmp	.-2356   	; 0x874a <irCommTasks+0x28>
						irCommRxByte = irCommRxByte<<1;	// bit1, shift and add 1
						irCommRxByte += 1;
					}
				} else {	// error...no significant signal perceived
					//irCommRxBitReceived[irCommRxBitCount] = 0xFF;
					if(irCommEnabled == IRCOMM_MODE_RECEIVE) {
    907e:	80 91 c2 04 	lds	r24, 0x04C2
    9082:	81 30       	cpi	r24, 0x01	; 1
    9084:	a1 f0       	breq	.+40     	; 0x90ae <irCommTasks+0x98c>
						currentProx = 0;
						adcSaveDataTo = SKIP_SAMPLE;
						adcSamplingState = 0;
						irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
					}
					irCommState = IRCOMM_RX_IDLE_STATE;
    9086:	81 e0       	ldi	r24, 0x01	; 1
    9088:	80 93 c4 04 	sts	0x04C4, r24
    908c:	80 91 e3 04 	lds	r24, 0x04E3
    9090:	8e cf       	rjmp	.-228    	; 0x8fae <irCommTasks+0x88c>
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
					irCommTxBitToTransmit[9-i] = irCommTempValue;
					if(irCommTempValue==1) {
						irCommTxCrc++;
    9092:	4f 5f       	subi	r20, 0xFF	; 255
    9094:	20 cc       	rjmp	.-1984   	; 0x88d6 <irCommTasks+0x1b4>
    9096:	4f 5f       	subi	r20, 0xFF	; 255
    9098:	ef cb       	rjmp	.-2082   	; 0x8878 <irCommTasks+0x156>
    909a:	4f 5f       	subi	r20, 0xFF	; 255
    909c:	dc cb       	rjmp	.-2120   	; 0x8856 <irCommTasks+0x134>
    909e:	4f 5f       	subi	r20, 0xFF	; 255
    90a0:	cb cb       	rjmp	.-2154   	; 0x8838 <irCommTasks+0x116>
    90a2:	4f 5f       	subi	r20, 0xFF	; 255
    90a4:	bc cb       	rjmp	.-2184   	; 0x881e <irCommTasks+0xfc>
    90a6:	4f 5f       	subi	r20, 0xFF	; 255
    90a8:	0b cc       	rjmp	.-2026   	; 0x88c0 <irCommTasks+0x19e>
    90aa:	4f 5f       	subi	r20, 0xFF	; 255
    90ac:	f8 cb       	rjmp	.-2064   	; 0x889e <irCommTasks+0x17c>
						irCommRxByte += 1;
					}
				} else {	// error...no significant signal perceived
					//irCommRxBitReceived[irCommRxBitCount] = 0xFF;
					if(irCommEnabled == IRCOMM_MODE_RECEIVE) {
						currentProx = 0;
    90ae:	10 92 24 02 	sts	0x0224, r1
						adcSaveDataTo = SKIP_SAMPLE;
    90b2:	85 e0       	ldi	r24, 0x05	; 5
    90b4:	80 93 b9 02 	sts	0x02B9, r24
						adcSamplingState = 0;
    90b8:	10 92 ba 02 	sts	0x02BA, r1
						irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    90bc:	10 92 c3 04 	sts	0x04C3, r1
    90c0:	e2 cf       	rjmp	.-60     	; 0x9086 <irCommTasks+0x964>
				}
				// check if a start bit is detected											
				//if(irCommSwitchCount >= IRCOMM_START_BIT_MIN_SWITCH_COUNT) {
				if((irCommSwitchCount==2) && (irCommRxStartPeakDuration>=9) && (irCommRxStartPeakDuration<=11)) {
					if(irCommRxPeakHighToLow == 1) {
						irCommShiftCount = IRCOMM_SAMPLING_WINDOW/2 + irCommShiftCount;
    90c2:	80 91 dc 04 	lds	r24, 0x04DC
    90c6:	86 5f       	subi	r24, 0xF6	; 246
    90c8:	80 93 dc 04 	sts	0x04DC, r24
    90cc:	c4 cf       	rjmp	.-120    	; 0x9056 <irCommTasks+0x934>
					} else {
						if(irCommRxStartBitDetected == 1) {
    90ce:	80 91 dc 04 	lds	r24, 0x04DC
    90d2:	c1 cf       	rjmp	.-126    	; 0x9056 <irCommTasks+0x934>

000090d4 <irCommSendData>:

}


void irCommSendData(unsigned char value, unsigned char sensorMask) {
	irCommTxByte = value;
    90d4:	80 93 f1 04 	sts	0x04F1, r24
	irCommTxByteEnqueued = 1;
    90d8:	81 e0       	ldi	r24, 0x01	; 1
    90da:	80 93 f2 04 	sts	0x04F2, r24
	irCommTxSensorMask = sensorMask;
    90de:	60 93 ff 04 	sts	0x04FF, r22
}
    90e2:	08 95       	ret

000090e4 <irCommDataSent>:

unsigned char irCommDataSent() {
	if(irCommTxByteEnqueued==1) {
		return 0;
    90e4:	81 e0       	ldi	r24, 0x01	; 1
    90e6:	90 91 f2 04 	lds	r25, 0x04F2
    90ea:	91 30       	cpi	r25, 0x01	; 1
    90ec:	09 f0       	breq	.+2      	; 0x90f0 <irCommDataSent+0xc>
	} else {
		return 1;
	}
}
    90ee:	08 95       	ret
	irCommTxSensorMask = sensorMask;
}

unsigned char irCommDataSent() {
	if(irCommTxByteEnqueued==1) {
		return 0;
    90f0:	80 e0       	ldi	r24, 0x00	; 0
	} else {
		return 1;
	}
}
    90f2:	08 95       	ret

000090f4 <irCommDataAvailable>:

unsigned char irCommDataAvailable() {
	return irCommRxDataAvailabled;
}
    90f4:	80 91 eb 04 	lds	r24, 0x04EB
    90f8:	08 95       	ret

000090fa <irCommReadData>:

unsigned char irCommReadData() {
	irCommRxDataAvailabled = 0;
    90fa:	10 92 eb 04 	sts	0x04EB, r1
	return irCommRxLastDataReceived;
}
    90fe:	80 91 ea 04 	lds	r24, 0x04EA
    9102:	08 95       	ret

00009104 <irCommReceivingSensor>:

signed char irCommReceivingSensor() {
	return irCommRxReceivingSensor;
}
    9104:	80 91 18 02 	lds	r24, 0x0218
    9108:	08 95       	ret

0000910a <__subsf3>:
    910a:	50 58       	subi	r21, 0x80	; 128

0000910c <__addsf3>:
    910c:	bb 27       	eor	r27, r27
    910e:	aa 27       	eor	r26, r26
    9110:	0e d0       	rcall	.+28     	; 0x912e <__addsf3x>
    9112:	27 c2       	rjmp	.+1102   	; 0x9562 <__fp_round>
    9114:	f0 d1       	rcall	.+992    	; 0x94f6 <__fp_pscA>
    9116:	30 f0       	brcs	.+12     	; 0x9124 <__addsf3+0x18>
    9118:	f5 d1       	rcall	.+1002   	; 0x9504 <__fp_pscB>
    911a:	20 f0       	brcs	.+8      	; 0x9124 <__addsf3+0x18>
    911c:	31 f4       	brne	.+12     	; 0x912a <__addsf3+0x1e>
    911e:	9f 3f       	cpi	r25, 0xFF	; 255
    9120:	11 f4       	brne	.+4      	; 0x9126 <__addsf3+0x1a>
    9122:	1e f4       	brtc	.+6      	; 0x912a <__addsf3+0x1e>
    9124:	c0 c1       	rjmp	.+896    	; 0x94a6 <__fp_nan>
    9126:	0e f4       	brtc	.+2      	; 0x912a <__addsf3+0x1e>
    9128:	e0 95       	com	r30
    912a:	e7 fb       	bst	r30, 7
    912c:	b6 c1       	rjmp	.+876    	; 0x949a <__fp_inf>

0000912e <__addsf3x>:
    912e:	e9 2f       	mov	r30, r25
    9130:	3a d2       	rcall	.+1140   	; 0x95a6 <__fp_split3>
    9132:	80 f3       	brcs	.-32     	; 0x9114 <__addsf3+0x8>
    9134:	ba 17       	cp	r27, r26
    9136:	62 07       	cpc	r22, r18
    9138:	73 07       	cpc	r23, r19
    913a:	84 07       	cpc	r24, r20
    913c:	95 07       	cpc	r25, r21
    913e:	18 f0       	brcs	.+6      	; 0x9146 <__addsf3x+0x18>
    9140:	71 f4       	brne	.+28     	; 0x915e <__addsf3x+0x30>
    9142:	9e f5       	brtc	.+102    	; 0x91aa <__addsf3x+0x7c>
    9144:	52 c2       	rjmp	.+1188   	; 0x95ea <__fp_zero>
    9146:	0e f4       	brtc	.+2      	; 0x914a <__addsf3x+0x1c>
    9148:	e0 95       	com	r30
    914a:	0b 2e       	mov	r0, r27
    914c:	ba 2f       	mov	r27, r26
    914e:	a0 2d       	mov	r26, r0
    9150:	0b 01       	movw	r0, r22
    9152:	b9 01       	movw	r22, r18
    9154:	90 01       	movw	r18, r0
    9156:	0c 01       	movw	r0, r24
    9158:	ca 01       	movw	r24, r20
    915a:	a0 01       	movw	r20, r0
    915c:	11 24       	eor	r1, r1
    915e:	ff 27       	eor	r31, r31
    9160:	59 1b       	sub	r21, r25
    9162:	99 f0       	breq	.+38     	; 0x918a <__addsf3x+0x5c>
    9164:	59 3f       	cpi	r21, 0xF9	; 249
    9166:	50 f4       	brcc	.+20     	; 0x917c <__addsf3x+0x4e>
    9168:	50 3e       	cpi	r21, 0xE0	; 224
    916a:	68 f1       	brcs	.+90     	; 0x91c6 <__addsf3x+0x98>
    916c:	1a 16       	cp	r1, r26
    916e:	f0 40       	sbci	r31, 0x00	; 0
    9170:	a2 2f       	mov	r26, r18
    9172:	23 2f       	mov	r18, r19
    9174:	34 2f       	mov	r19, r20
    9176:	44 27       	eor	r20, r20
    9178:	58 5f       	subi	r21, 0xF8	; 248
    917a:	f3 cf       	rjmp	.-26     	; 0x9162 <__addsf3x+0x34>
    917c:	46 95       	lsr	r20
    917e:	37 95       	ror	r19
    9180:	27 95       	ror	r18
    9182:	a7 95       	ror	r26
    9184:	f0 40       	sbci	r31, 0x00	; 0
    9186:	53 95       	inc	r21
    9188:	c9 f7       	brne	.-14     	; 0x917c <__addsf3x+0x4e>
    918a:	7e f4       	brtc	.+30     	; 0x91aa <__addsf3x+0x7c>
    918c:	1f 16       	cp	r1, r31
    918e:	ba 0b       	sbc	r27, r26
    9190:	62 0b       	sbc	r22, r18
    9192:	73 0b       	sbc	r23, r19
    9194:	84 0b       	sbc	r24, r20
    9196:	ba f0       	brmi	.+46     	; 0x91c6 <__addsf3x+0x98>
    9198:	91 50       	subi	r25, 0x01	; 1
    919a:	a1 f0       	breq	.+40     	; 0x91c4 <__addsf3x+0x96>
    919c:	ff 0f       	add	r31, r31
    919e:	bb 1f       	adc	r27, r27
    91a0:	66 1f       	adc	r22, r22
    91a2:	77 1f       	adc	r23, r23
    91a4:	88 1f       	adc	r24, r24
    91a6:	c2 f7       	brpl	.-16     	; 0x9198 <__addsf3x+0x6a>
    91a8:	0e c0       	rjmp	.+28     	; 0x91c6 <__addsf3x+0x98>
    91aa:	ba 0f       	add	r27, r26
    91ac:	62 1f       	adc	r22, r18
    91ae:	73 1f       	adc	r23, r19
    91b0:	84 1f       	adc	r24, r20
    91b2:	48 f4       	brcc	.+18     	; 0x91c6 <__addsf3x+0x98>
    91b4:	87 95       	ror	r24
    91b6:	77 95       	ror	r23
    91b8:	67 95       	ror	r22
    91ba:	b7 95       	ror	r27
    91bc:	f7 95       	ror	r31
    91be:	9e 3f       	cpi	r25, 0xFE	; 254
    91c0:	08 f0       	brcs	.+2      	; 0x91c4 <__addsf3x+0x96>
    91c2:	b3 cf       	rjmp	.-154    	; 0x912a <__addsf3+0x1e>
    91c4:	93 95       	inc	r25
    91c6:	88 0f       	add	r24, r24
    91c8:	08 f0       	brcs	.+2      	; 0x91cc <__addsf3x+0x9e>
    91ca:	99 27       	eor	r25, r25
    91cc:	ee 0f       	add	r30, r30
    91ce:	97 95       	ror	r25
    91d0:	87 95       	ror	r24
    91d2:	08 95       	ret
    91d4:	90 d1       	rcall	.+800    	; 0x94f6 <__fp_pscA>
    91d6:	58 f0       	brcs	.+22     	; 0x91ee <__addsf3x+0xc0>
    91d8:	80 e8       	ldi	r24, 0x80	; 128
    91da:	91 e0       	ldi	r25, 0x01	; 1
    91dc:	09 f4       	brne	.+2      	; 0x91e0 <__addsf3x+0xb2>
    91de:	9e ef       	ldi	r25, 0xFE	; 254
    91e0:	91 d1       	rcall	.+802    	; 0x9504 <__fp_pscB>
    91e2:	28 f0       	brcs	.+10     	; 0x91ee <__addsf3x+0xc0>
    91e4:	40 e8       	ldi	r20, 0x80	; 128
    91e6:	51 e0       	ldi	r21, 0x01	; 1
    91e8:	59 f4       	brne	.+22     	; 0x9200 <atan2+0xe>
    91ea:	5e ef       	ldi	r21, 0xFE	; 254
    91ec:	09 c0       	rjmp	.+18     	; 0x9200 <atan2+0xe>
    91ee:	5b c1       	rjmp	.+694    	; 0x94a6 <__fp_nan>
    91f0:	fc c1       	rjmp	.+1016   	; 0x95ea <__fp_zero>

000091f2 <atan2>:
    91f2:	e9 2f       	mov	r30, r25
    91f4:	e0 78       	andi	r30, 0x80	; 128
    91f6:	d7 d1       	rcall	.+942    	; 0x95a6 <__fp_split3>
    91f8:	68 f3       	brcs	.-38     	; 0x91d4 <__addsf3x+0xa6>
    91fa:	09 2e       	mov	r0, r25
    91fc:	05 2a       	or	r0, r21
    91fe:	c1 f3       	breq	.-16     	; 0x91f0 <__addsf3x+0xc2>
    9200:	26 17       	cp	r18, r22
    9202:	37 07       	cpc	r19, r23
    9204:	48 07       	cpc	r20, r24
    9206:	59 07       	cpc	r21, r25
    9208:	38 f0       	brcs	.+14     	; 0x9218 <atan2+0x26>
    920a:	0e 2e       	mov	r0, r30
    920c:	07 f8       	bld	r0, 7
    920e:	e0 25       	eor	r30, r0
    9210:	69 f0       	breq	.+26     	; 0x922c <atan2+0x3a>
    9212:	e0 25       	eor	r30, r0
    9214:	e0 64       	ori	r30, 0x40	; 64
    9216:	0a c0       	rjmp	.+20     	; 0x922c <atan2+0x3a>
    9218:	ef 63       	ori	r30, 0x3F	; 63
    921a:	07 f8       	bld	r0, 7
    921c:	00 94       	com	r0
    921e:	07 fa       	bst	r0, 7
    9220:	db 01       	movw	r26, r22
    9222:	b9 01       	movw	r22, r18
    9224:	9d 01       	movw	r18, r26
    9226:	dc 01       	movw	r26, r24
    9228:	ca 01       	movw	r24, r20
    922a:	ad 01       	movw	r20, r26
    922c:	ef 93       	push	r30
    922e:	4a d0       	rcall	.+148    	; 0x92c4 <__divsf3_pse>
    9230:	98 d1       	rcall	.+816    	; 0x9562 <__fp_round>
    9232:	0a d0       	rcall	.+20     	; 0x9248 <atan>
    9234:	5f 91       	pop	r21
    9236:	55 23       	and	r21, r21
    9238:	31 f0       	breq	.+12     	; 0x9246 <atan2+0x54>
    923a:	2b ed       	ldi	r18, 0xDB	; 219
    923c:	3f e0       	ldi	r19, 0x0F	; 15
    923e:	49 e4       	ldi	r20, 0x49	; 73
    9240:	50 fd       	sbrc	r21, 0
    9242:	49 ec       	ldi	r20, 0xC9	; 201
    9244:	63 cf       	rjmp	.-314    	; 0x910c <__addsf3>
    9246:	08 95       	ret

00009248 <atan>:
    9248:	df 93       	push	r29
    924a:	dd 27       	eor	r29, r29
    924c:	b9 2f       	mov	r27, r25
    924e:	bf 77       	andi	r27, 0x7F	; 127
    9250:	40 e8       	ldi	r20, 0x80	; 128
    9252:	5f e3       	ldi	r21, 0x3F	; 63
    9254:	16 16       	cp	r1, r22
    9256:	17 06       	cpc	r1, r23
    9258:	48 07       	cpc	r20, r24
    925a:	5b 07       	cpc	r21, r27
    925c:	10 f4       	brcc	.+4      	; 0x9262 <atan+0x1a>
    925e:	d9 2f       	mov	r29, r25
    9260:	cb d1       	rcall	.+918    	; 0x95f8 <inverse>
    9262:	9f 93       	push	r25
    9264:	8f 93       	push	r24
    9266:	7f 93       	push	r23
    9268:	6f 93       	push	r22
    926a:	36 d2       	rcall	.+1132   	; 0x96d8 <square>
    926c:	ee e4       	ldi	r30, 0x4E	; 78
    926e:	f1 e0       	ldi	r31, 0x01	; 1
    9270:	1d d1       	rcall	.+570    	; 0x94ac <__fp_powser>
    9272:	77 d1       	rcall	.+750    	; 0x9562 <__fp_round>
    9274:	2f 91       	pop	r18
    9276:	3f 91       	pop	r19
    9278:	4f 91       	pop	r20
    927a:	5f 91       	pop	r21
    927c:	d0 d1       	rcall	.+928    	; 0x961e <__mulsf3x>
    927e:	dd 23       	and	r29, r29
    9280:	49 f0       	breq	.+18     	; 0x9294 <atan+0x4c>
    9282:	90 58       	subi	r25, 0x80	; 128
    9284:	a2 ea       	ldi	r26, 0xA2	; 162
    9286:	2a ed       	ldi	r18, 0xDA	; 218
    9288:	3f e0       	ldi	r19, 0x0F	; 15
    928a:	49 ec       	ldi	r20, 0xC9	; 201
    928c:	5f e3       	ldi	r21, 0x3F	; 63
    928e:	d0 78       	andi	r29, 0x80	; 128
    9290:	5d 27       	eor	r21, r29
    9292:	4d df       	rcall	.-358    	; 0x912e <__addsf3x>
    9294:	df 91       	pop	r29
    9296:	65 c1       	rjmp	.+714    	; 0x9562 <__fp_round>

00009298 <__cmpsf2>:
    9298:	dc d0       	rcall	.+440    	; 0x9452 <__fp_cmp>
    929a:	08 f4       	brcc	.+2      	; 0x929e <__cmpsf2+0x6>
    929c:	81 e0       	ldi	r24, 0x01	; 1
    929e:	08 95       	ret

000092a0 <cos>:
    92a0:	39 d1       	rcall	.+626    	; 0x9514 <__fp_rempio2>
    92a2:	e3 95       	inc	r30
    92a4:	6f c1       	rjmp	.+734    	; 0x9584 <__fp_sinus>

000092a6 <__divsf3>:
    92a6:	0c d0       	rcall	.+24     	; 0x92c0 <__divsf3x>
    92a8:	5c c1       	rjmp	.+696    	; 0x9562 <__fp_round>
    92aa:	2c d1       	rcall	.+600    	; 0x9504 <__fp_pscB>
    92ac:	40 f0       	brcs	.+16     	; 0x92be <__divsf3+0x18>
    92ae:	23 d1       	rcall	.+582    	; 0x94f6 <__fp_pscA>
    92b0:	30 f0       	brcs	.+12     	; 0x92be <__divsf3+0x18>
    92b2:	21 f4       	brne	.+8      	; 0x92bc <__divsf3+0x16>
    92b4:	5f 3f       	cpi	r21, 0xFF	; 255
    92b6:	19 f0       	breq	.+6      	; 0x92be <__divsf3+0x18>
    92b8:	f0 c0       	rjmp	.+480    	; 0x949a <__fp_inf>
    92ba:	51 11       	cpse	r21, r1
    92bc:	97 c1       	rjmp	.+814    	; 0x95ec <__fp_szero>
    92be:	f3 c0       	rjmp	.+486    	; 0x94a6 <__fp_nan>

000092c0 <__divsf3x>:
    92c0:	72 d1       	rcall	.+740    	; 0x95a6 <__fp_split3>
    92c2:	98 f3       	brcs	.-26     	; 0x92aa <__divsf3+0x4>

000092c4 <__divsf3_pse>:
    92c4:	99 23       	and	r25, r25
    92c6:	c9 f3       	breq	.-14     	; 0x92ba <__divsf3+0x14>
    92c8:	55 23       	and	r21, r21
    92ca:	b1 f3       	breq	.-20     	; 0x92b8 <__divsf3+0x12>
    92cc:	95 1b       	sub	r25, r21
    92ce:	55 0b       	sbc	r21, r21
    92d0:	bb 27       	eor	r27, r27
    92d2:	aa 27       	eor	r26, r26
    92d4:	62 17       	cp	r22, r18
    92d6:	73 07       	cpc	r23, r19
    92d8:	84 07       	cpc	r24, r20
    92da:	38 f0       	brcs	.+14     	; 0x92ea <__divsf3_pse+0x26>
    92dc:	9f 5f       	subi	r25, 0xFF	; 255
    92de:	5f 4f       	sbci	r21, 0xFF	; 255
    92e0:	22 0f       	add	r18, r18
    92e2:	33 1f       	adc	r19, r19
    92e4:	44 1f       	adc	r20, r20
    92e6:	aa 1f       	adc	r26, r26
    92e8:	a9 f3       	breq	.-22     	; 0x92d4 <__divsf3_pse+0x10>
    92ea:	33 d0       	rcall	.+102    	; 0x9352 <__divsf3_pse+0x8e>
    92ec:	0e 2e       	mov	r0, r30
    92ee:	3a f0       	brmi	.+14     	; 0x92fe <__divsf3_pse+0x3a>
    92f0:	e0 e8       	ldi	r30, 0x80	; 128
    92f2:	30 d0       	rcall	.+96     	; 0x9354 <__divsf3_pse+0x90>
    92f4:	91 50       	subi	r25, 0x01	; 1
    92f6:	50 40       	sbci	r21, 0x00	; 0
    92f8:	e6 95       	lsr	r30
    92fa:	00 1c       	adc	r0, r0
    92fc:	ca f7       	brpl	.-14     	; 0x92f0 <__divsf3_pse+0x2c>
    92fe:	29 d0       	rcall	.+82     	; 0x9352 <__divsf3_pse+0x8e>
    9300:	fe 2f       	mov	r31, r30
    9302:	27 d0       	rcall	.+78     	; 0x9352 <__divsf3_pse+0x8e>
    9304:	66 0f       	add	r22, r22
    9306:	77 1f       	adc	r23, r23
    9308:	88 1f       	adc	r24, r24
    930a:	bb 1f       	adc	r27, r27
    930c:	26 17       	cp	r18, r22
    930e:	37 07       	cpc	r19, r23
    9310:	48 07       	cpc	r20, r24
    9312:	ab 07       	cpc	r26, r27
    9314:	b0 e8       	ldi	r27, 0x80	; 128
    9316:	09 f0       	breq	.+2      	; 0x931a <__divsf3_pse+0x56>
    9318:	bb 0b       	sbc	r27, r27
    931a:	80 2d       	mov	r24, r0
    931c:	bf 01       	movw	r22, r30
    931e:	ff 27       	eor	r31, r31
    9320:	93 58       	subi	r25, 0x83	; 131
    9322:	5f 4f       	sbci	r21, 0xFF	; 255
    9324:	2a f0       	brmi	.+10     	; 0x9330 <__divsf3_pse+0x6c>
    9326:	9e 3f       	cpi	r25, 0xFE	; 254
    9328:	51 05       	cpc	r21, r1
    932a:	68 f0       	brcs	.+26     	; 0x9346 <__divsf3_pse+0x82>
    932c:	b6 c0       	rjmp	.+364    	; 0x949a <__fp_inf>
    932e:	5e c1       	rjmp	.+700    	; 0x95ec <__fp_szero>
    9330:	5f 3f       	cpi	r21, 0xFF	; 255
    9332:	ec f3       	brlt	.-6      	; 0x932e <__divsf3_pse+0x6a>
    9334:	98 3e       	cpi	r25, 0xE8	; 232
    9336:	dc f3       	brlt	.-10     	; 0x932e <__divsf3_pse+0x6a>
    9338:	86 95       	lsr	r24
    933a:	77 95       	ror	r23
    933c:	67 95       	ror	r22
    933e:	b7 95       	ror	r27
    9340:	f7 95       	ror	r31
    9342:	9f 5f       	subi	r25, 0xFF	; 255
    9344:	c9 f7       	brne	.-14     	; 0x9338 <__divsf3_pse+0x74>
    9346:	88 0f       	add	r24, r24
    9348:	91 1d       	adc	r25, r1
    934a:	96 95       	lsr	r25
    934c:	87 95       	ror	r24
    934e:	97 f9       	bld	r25, 7
    9350:	08 95       	ret
    9352:	e1 e0       	ldi	r30, 0x01	; 1
    9354:	66 0f       	add	r22, r22
    9356:	77 1f       	adc	r23, r23
    9358:	88 1f       	adc	r24, r24
    935a:	bb 1f       	adc	r27, r27
    935c:	62 17       	cp	r22, r18
    935e:	73 07       	cpc	r23, r19
    9360:	84 07       	cpc	r24, r20
    9362:	ba 07       	cpc	r27, r26
    9364:	20 f0       	brcs	.+8      	; 0x936e <__divsf3_pse+0xaa>
    9366:	62 1b       	sub	r22, r18
    9368:	73 0b       	sbc	r23, r19
    936a:	84 0b       	sbc	r24, r20
    936c:	ba 0b       	sbc	r27, r26
    936e:	ee 1f       	adc	r30, r30
    9370:	88 f7       	brcc	.-30     	; 0x9354 <__divsf3_pse+0x90>
    9372:	e0 95       	com	r30
    9374:	08 95       	ret

00009376 <__fixsfsi>:
    9376:	04 d0       	rcall	.+8      	; 0x9380 <__fixunssfsi>
    9378:	68 94       	set
    937a:	b1 11       	cpse	r27, r1
    937c:	37 c1       	rjmp	.+622    	; 0x95ec <__fp_szero>
    937e:	08 95       	ret

00009380 <__fixunssfsi>:
    9380:	1a d1       	rcall	.+564    	; 0x95b6 <__fp_splitA>
    9382:	88 f0       	brcs	.+34     	; 0x93a6 <__fixunssfsi+0x26>
    9384:	9f 57       	subi	r25, 0x7F	; 127
    9386:	90 f0       	brcs	.+36     	; 0x93ac <__fixunssfsi+0x2c>
    9388:	b9 2f       	mov	r27, r25
    938a:	99 27       	eor	r25, r25
    938c:	b7 51       	subi	r27, 0x17	; 23
    938e:	a0 f0       	brcs	.+40     	; 0x93b8 <__fixunssfsi+0x38>
    9390:	d1 f0       	breq	.+52     	; 0x93c6 <__fixunssfsi+0x46>
    9392:	66 0f       	add	r22, r22
    9394:	77 1f       	adc	r23, r23
    9396:	88 1f       	adc	r24, r24
    9398:	99 1f       	adc	r25, r25
    939a:	1a f0       	brmi	.+6      	; 0x93a2 <__fixunssfsi+0x22>
    939c:	ba 95       	dec	r27
    939e:	c9 f7       	brne	.-14     	; 0x9392 <__fixunssfsi+0x12>
    93a0:	12 c0       	rjmp	.+36     	; 0x93c6 <__fixunssfsi+0x46>
    93a2:	b1 30       	cpi	r27, 0x01	; 1
    93a4:	81 f0       	breq	.+32     	; 0x93c6 <__fixunssfsi+0x46>
    93a6:	21 d1       	rcall	.+578    	; 0x95ea <__fp_zero>
    93a8:	b1 e0       	ldi	r27, 0x01	; 1
    93aa:	08 95       	ret
    93ac:	1e c1       	rjmp	.+572    	; 0x95ea <__fp_zero>
    93ae:	67 2f       	mov	r22, r23
    93b0:	78 2f       	mov	r23, r24
    93b2:	88 27       	eor	r24, r24
    93b4:	b8 5f       	subi	r27, 0xF8	; 248
    93b6:	39 f0       	breq	.+14     	; 0x93c6 <__fixunssfsi+0x46>
    93b8:	b9 3f       	cpi	r27, 0xF9	; 249
    93ba:	cc f3       	brlt	.-14     	; 0x93ae <__fixunssfsi+0x2e>
    93bc:	86 95       	lsr	r24
    93be:	77 95       	ror	r23
    93c0:	67 95       	ror	r22
    93c2:	b3 95       	inc	r27
    93c4:	d9 f7       	brne	.-10     	; 0x93bc <__fixunssfsi+0x3c>
    93c6:	3e f4       	brtc	.+14     	; 0x93d6 <__fixunssfsi+0x56>
    93c8:	90 95       	com	r25
    93ca:	80 95       	com	r24
    93cc:	70 95       	com	r23
    93ce:	61 95       	neg	r22
    93d0:	7f 4f       	sbci	r23, 0xFF	; 255
    93d2:	8f 4f       	sbci	r24, 0xFF	; 255
    93d4:	9f 4f       	sbci	r25, 0xFF	; 255
    93d6:	08 95       	ret

000093d8 <__floatunsisf>:
    93d8:	e8 94       	clt
    93da:	09 c0       	rjmp	.+18     	; 0x93ee <__floatsisf+0x12>

000093dc <__floatsisf>:
    93dc:	97 fb       	bst	r25, 7
    93de:	3e f4       	brtc	.+14     	; 0x93ee <__floatsisf+0x12>
    93e0:	90 95       	com	r25
    93e2:	80 95       	com	r24
    93e4:	70 95       	com	r23
    93e6:	61 95       	neg	r22
    93e8:	7f 4f       	sbci	r23, 0xFF	; 255
    93ea:	8f 4f       	sbci	r24, 0xFF	; 255
    93ec:	9f 4f       	sbci	r25, 0xFF	; 255
    93ee:	99 23       	and	r25, r25
    93f0:	a9 f0       	breq	.+42     	; 0x941c <__floatsisf+0x40>
    93f2:	f9 2f       	mov	r31, r25
    93f4:	96 e9       	ldi	r25, 0x96	; 150
    93f6:	bb 27       	eor	r27, r27
    93f8:	93 95       	inc	r25
    93fa:	f6 95       	lsr	r31
    93fc:	87 95       	ror	r24
    93fe:	77 95       	ror	r23
    9400:	67 95       	ror	r22
    9402:	b7 95       	ror	r27
    9404:	f1 11       	cpse	r31, r1
    9406:	f8 cf       	rjmp	.-16     	; 0x93f8 <__floatsisf+0x1c>
    9408:	fa f4       	brpl	.+62     	; 0x9448 <__floatsisf+0x6c>
    940a:	bb 0f       	add	r27, r27
    940c:	11 f4       	brne	.+4      	; 0x9412 <__floatsisf+0x36>
    940e:	60 ff       	sbrs	r22, 0
    9410:	1b c0       	rjmp	.+54     	; 0x9448 <__floatsisf+0x6c>
    9412:	6f 5f       	subi	r22, 0xFF	; 255
    9414:	7f 4f       	sbci	r23, 0xFF	; 255
    9416:	8f 4f       	sbci	r24, 0xFF	; 255
    9418:	9f 4f       	sbci	r25, 0xFF	; 255
    941a:	16 c0       	rjmp	.+44     	; 0x9448 <__floatsisf+0x6c>
    941c:	88 23       	and	r24, r24
    941e:	11 f0       	breq	.+4      	; 0x9424 <__floatsisf+0x48>
    9420:	96 e9       	ldi	r25, 0x96	; 150
    9422:	11 c0       	rjmp	.+34     	; 0x9446 <__floatsisf+0x6a>
    9424:	77 23       	and	r23, r23
    9426:	21 f0       	breq	.+8      	; 0x9430 <__floatsisf+0x54>
    9428:	9e e8       	ldi	r25, 0x8E	; 142
    942a:	87 2f       	mov	r24, r23
    942c:	76 2f       	mov	r23, r22
    942e:	05 c0       	rjmp	.+10     	; 0x943a <__floatsisf+0x5e>
    9430:	66 23       	and	r22, r22
    9432:	71 f0       	breq	.+28     	; 0x9450 <__floatsisf+0x74>
    9434:	96 e8       	ldi	r25, 0x86	; 134
    9436:	86 2f       	mov	r24, r22
    9438:	70 e0       	ldi	r23, 0x00	; 0
    943a:	60 e0       	ldi	r22, 0x00	; 0
    943c:	2a f0       	brmi	.+10     	; 0x9448 <__floatsisf+0x6c>
    943e:	9a 95       	dec	r25
    9440:	66 0f       	add	r22, r22
    9442:	77 1f       	adc	r23, r23
    9444:	88 1f       	adc	r24, r24
    9446:	da f7       	brpl	.-10     	; 0x943e <__floatsisf+0x62>
    9448:	88 0f       	add	r24, r24
    944a:	96 95       	lsr	r25
    944c:	87 95       	ror	r24
    944e:	97 f9       	bld	r25, 7
    9450:	08 95       	ret

00009452 <__fp_cmp>:
    9452:	99 0f       	add	r25, r25
    9454:	00 08       	sbc	r0, r0
    9456:	55 0f       	add	r21, r21
    9458:	aa 0b       	sbc	r26, r26
    945a:	e0 e8       	ldi	r30, 0x80	; 128
    945c:	fe ef       	ldi	r31, 0xFE	; 254
    945e:	16 16       	cp	r1, r22
    9460:	17 06       	cpc	r1, r23
    9462:	e8 07       	cpc	r30, r24
    9464:	f9 07       	cpc	r31, r25
    9466:	c0 f0       	brcs	.+48     	; 0x9498 <__fp_cmp+0x46>
    9468:	12 16       	cp	r1, r18
    946a:	13 06       	cpc	r1, r19
    946c:	e4 07       	cpc	r30, r20
    946e:	f5 07       	cpc	r31, r21
    9470:	98 f0       	brcs	.+38     	; 0x9498 <__fp_cmp+0x46>
    9472:	62 1b       	sub	r22, r18
    9474:	73 0b       	sbc	r23, r19
    9476:	84 0b       	sbc	r24, r20
    9478:	95 0b       	sbc	r25, r21
    947a:	39 f4       	brne	.+14     	; 0x948a <__fp_cmp+0x38>
    947c:	0a 26       	eor	r0, r26
    947e:	61 f0       	breq	.+24     	; 0x9498 <__fp_cmp+0x46>
    9480:	23 2b       	or	r18, r19
    9482:	24 2b       	or	r18, r20
    9484:	25 2b       	or	r18, r21
    9486:	21 f4       	brne	.+8      	; 0x9490 <__fp_cmp+0x3e>
    9488:	08 95       	ret
    948a:	0a 26       	eor	r0, r26
    948c:	09 f4       	brne	.+2      	; 0x9490 <__fp_cmp+0x3e>
    948e:	a1 40       	sbci	r26, 0x01	; 1
    9490:	a6 95       	lsr	r26
    9492:	8f ef       	ldi	r24, 0xFF	; 255
    9494:	81 1d       	adc	r24, r1
    9496:	81 1d       	adc	r24, r1
    9498:	08 95       	ret

0000949a <__fp_inf>:
    949a:	97 f9       	bld	r25, 7
    949c:	9f 67       	ori	r25, 0x7F	; 127
    949e:	80 e8       	ldi	r24, 0x80	; 128
    94a0:	70 e0       	ldi	r23, 0x00	; 0
    94a2:	60 e0       	ldi	r22, 0x00	; 0
    94a4:	08 95       	ret

000094a6 <__fp_nan>:
    94a6:	9f ef       	ldi	r25, 0xFF	; 255
    94a8:	80 ec       	ldi	r24, 0xC0	; 192
    94aa:	08 95       	ret

000094ac <__fp_powser>:
    94ac:	df 93       	push	r29
    94ae:	cf 93       	push	r28
    94b0:	1f 93       	push	r17
    94b2:	0f 93       	push	r16
    94b4:	ff 92       	push	r15
    94b6:	ef 92       	push	r14
    94b8:	df 92       	push	r13
    94ba:	7b 01       	movw	r14, r22
    94bc:	8c 01       	movw	r16, r24
    94be:	68 94       	set
    94c0:	05 c0       	rjmp	.+10     	; 0x94cc <__fp_powser+0x20>
    94c2:	da 2e       	mov	r13, r26
    94c4:	ef 01       	movw	r28, r30
    94c6:	ab d0       	rcall	.+342    	; 0x961e <__mulsf3x>
    94c8:	fe 01       	movw	r30, r28
    94ca:	e8 94       	clt
    94cc:	a5 91       	lpm	r26, Z+
    94ce:	25 91       	lpm	r18, Z+
    94d0:	35 91       	lpm	r19, Z+
    94d2:	45 91       	lpm	r20, Z+
    94d4:	55 91       	lpm	r21, Z+
    94d6:	ae f3       	brts	.-22     	; 0x94c2 <__fp_powser+0x16>
    94d8:	ef 01       	movw	r28, r30
    94da:	29 de       	rcall	.-942    	; 0x912e <__addsf3x>
    94dc:	fe 01       	movw	r30, r28
    94de:	97 01       	movw	r18, r14
    94e0:	a8 01       	movw	r20, r16
    94e2:	da 94       	dec	r13
    94e4:	79 f7       	brne	.-34     	; 0x94c4 <__fp_powser+0x18>
    94e6:	df 90       	pop	r13
    94e8:	ef 90       	pop	r14
    94ea:	ff 90       	pop	r15
    94ec:	0f 91       	pop	r16
    94ee:	1f 91       	pop	r17
    94f0:	cf 91       	pop	r28
    94f2:	df 91       	pop	r29
    94f4:	08 95       	ret

000094f6 <__fp_pscA>:
    94f6:	00 24       	eor	r0, r0
    94f8:	0a 94       	dec	r0
    94fa:	16 16       	cp	r1, r22
    94fc:	17 06       	cpc	r1, r23
    94fe:	18 06       	cpc	r1, r24
    9500:	09 06       	cpc	r0, r25
    9502:	08 95       	ret

00009504 <__fp_pscB>:
    9504:	00 24       	eor	r0, r0
    9506:	0a 94       	dec	r0
    9508:	12 16       	cp	r1, r18
    950a:	13 06       	cpc	r1, r19
    950c:	14 06       	cpc	r1, r20
    950e:	05 06       	cpc	r0, r21
    9510:	08 95       	ret
    9512:	c9 cf       	rjmp	.-110    	; 0x94a6 <__fp_nan>

00009514 <__fp_rempio2>:
    9514:	50 d0       	rcall	.+160    	; 0x95b6 <__fp_splitA>
    9516:	e8 f3       	brcs	.-6      	; 0x9512 <__fp_pscB+0xe>
    9518:	e8 94       	clt
    951a:	e0 e0       	ldi	r30, 0x00	; 0
    951c:	bb 27       	eor	r27, r27
    951e:	9f 57       	subi	r25, 0x7F	; 127
    9520:	f0 f0       	brcs	.+60     	; 0x955e <__fp_rempio2+0x4a>
    9522:	2a ed       	ldi	r18, 0xDA	; 218
    9524:	3f e0       	ldi	r19, 0x0F	; 15
    9526:	49 ec       	ldi	r20, 0xC9	; 201
    9528:	06 c0       	rjmp	.+12     	; 0x9536 <__fp_rempio2+0x22>
    952a:	ee 0f       	add	r30, r30
    952c:	bb 0f       	add	r27, r27
    952e:	66 1f       	adc	r22, r22
    9530:	77 1f       	adc	r23, r23
    9532:	88 1f       	adc	r24, r24
    9534:	28 f0       	brcs	.+10     	; 0x9540 <__fp_rempio2+0x2c>
    9536:	b2 3a       	cpi	r27, 0xA2	; 162
    9538:	62 07       	cpc	r22, r18
    953a:	73 07       	cpc	r23, r19
    953c:	84 07       	cpc	r24, r20
    953e:	28 f0       	brcs	.+10     	; 0x954a <__fp_rempio2+0x36>
    9540:	b2 5a       	subi	r27, 0xA2	; 162
    9542:	62 0b       	sbc	r22, r18
    9544:	73 0b       	sbc	r23, r19
    9546:	84 0b       	sbc	r24, r20
    9548:	e3 95       	inc	r30
    954a:	9a 95       	dec	r25
    954c:	72 f7       	brpl	.-36     	; 0x952a <__fp_rempio2+0x16>
    954e:	80 38       	cpi	r24, 0x80	; 128
    9550:	30 f4       	brcc	.+12     	; 0x955e <__fp_rempio2+0x4a>
    9552:	9a 95       	dec	r25
    9554:	bb 0f       	add	r27, r27
    9556:	66 1f       	adc	r22, r22
    9558:	77 1f       	adc	r23, r23
    955a:	88 1f       	adc	r24, r24
    955c:	d2 f7       	brpl	.-12     	; 0x9552 <__fp_rempio2+0x3e>
    955e:	90 48       	sbci	r25, 0x80	; 128
    9560:	c0 c0       	rjmp	.+384    	; 0x96e2 <__fp_mpack_finite>

00009562 <__fp_round>:
    9562:	09 2e       	mov	r0, r25
    9564:	03 94       	inc	r0
    9566:	00 0c       	add	r0, r0
    9568:	11 f4       	brne	.+4      	; 0x956e <__fp_round+0xc>
    956a:	88 23       	and	r24, r24
    956c:	52 f0       	brmi	.+20     	; 0x9582 <__fp_round+0x20>
    956e:	bb 0f       	add	r27, r27
    9570:	40 f4       	brcc	.+16     	; 0x9582 <__fp_round+0x20>
    9572:	bf 2b       	or	r27, r31
    9574:	11 f4       	brne	.+4      	; 0x957a <__fp_round+0x18>
    9576:	60 ff       	sbrs	r22, 0
    9578:	04 c0       	rjmp	.+8      	; 0x9582 <__fp_round+0x20>
    957a:	6f 5f       	subi	r22, 0xFF	; 255
    957c:	7f 4f       	sbci	r23, 0xFF	; 255
    957e:	8f 4f       	sbci	r24, 0xFF	; 255
    9580:	9f 4f       	sbci	r25, 0xFF	; 255
    9582:	08 95       	ret

00009584 <__fp_sinus>:
    9584:	ef 93       	push	r30
    9586:	e0 ff       	sbrs	r30, 0
    9588:	06 c0       	rjmp	.+12     	; 0x9596 <__fp_sinus+0x12>
    958a:	a2 ea       	ldi	r26, 0xA2	; 162
    958c:	2a ed       	ldi	r18, 0xDA	; 218
    958e:	3f e0       	ldi	r19, 0x0F	; 15
    9590:	49 ec       	ldi	r20, 0xC9	; 201
    9592:	5f eb       	ldi	r21, 0xBF	; 191
    9594:	cc dd       	rcall	.-1128   	; 0x912e <__addsf3x>
    9596:	e5 df       	rcall	.-54     	; 0x9562 <__fp_round>
    9598:	0f 90       	pop	r0
    959a:	03 94       	inc	r0
    959c:	01 fc       	sbrc	r0, 1
    959e:	90 58       	subi	r25, 0x80	; 128
    95a0:	eb e7       	ldi	r30, 0x7B	; 123
    95a2:	f1 e0       	ldi	r31, 0x01	; 1
    95a4:	aa c0       	rjmp	.+340    	; 0x96fa <__fp_powsodd>

000095a6 <__fp_split3>:
    95a6:	57 fd       	sbrc	r21, 7
    95a8:	90 58       	subi	r25, 0x80	; 128
    95aa:	44 0f       	add	r20, r20
    95ac:	55 1f       	adc	r21, r21
    95ae:	59 f0       	breq	.+22     	; 0x95c6 <__fp_splitA+0x10>
    95b0:	5f 3f       	cpi	r21, 0xFF	; 255
    95b2:	71 f0       	breq	.+28     	; 0x95d0 <__fp_splitA+0x1a>
    95b4:	47 95       	ror	r20

000095b6 <__fp_splitA>:
    95b6:	88 0f       	add	r24, r24
    95b8:	97 fb       	bst	r25, 7
    95ba:	99 1f       	adc	r25, r25
    95bc:	61 f0       	breq	.+24     	; 0x95d6 <__fp_splitA+0x20>
    95be:	9f 3f       	cpi	r25, 0xFF	; 255
    95c0:	79 f0       	breq	.+30     	; 0x95e0 <__fp_splitA+0x2a>
    95c2:	87 95       	ror	r24
    95c4:	08 95       	ret
    95c6:	12 16       	cp	r1, r18
    95c8:	13 06       	cpc	r1, r19
    95ca:	14 06       	cpc	r1, r20
    95cc:	55 1f       	adc	r21, r21
    95ce:	f2 cf       	rjmp	.-28     	; 0x95b4 <__fp_split3+0xe>
    95d0:	46 95       	lsr	r20
    95d2:	f1 df       	rcall	.-30     	; 0x95b6 <__fp_splitA>
    95d4:	08 c0       	rjmp	.+16     	; 0x95e6 <__fp_splitA+0x30>
    95d6:	16 16       	cp	r1, r22
    95d8:	17 06       	cpc	r1, r23
    95da:	18 06       	cpc	r1, r24
    95dc:	99 1f       	adc	r25, r25
    95de:	f1 cf       	rjmp	.-30     	; 0x95c2 <__fp_splitA+0xc>
    95e0:	86 95       	lsr	r24
    95e2:	71 05       	cpc	r23, r1
    95e4:	61 05       	cpc	r22, r1
    95e6:	08 94       	sec
    95e8:	08 95       	ret

000095ea <__fp_zero>:
    95ea:	e8 94       	clt

000095ec <__fp_szero>:
    95ec:	bb 27       	eor	r27, r27
    95ee:	66 27       	eor	r22, r22
    95f0:	77 27       	eor	r23, r23
    95f2:	cb 01       	movw	r24, r22
    95f4:	97 f9       	bld	r25, 7
    95f6:	08 95       	ret

000095f8 <inverse>:
    95f8:	9b 01       	movw	r18, r22
    95fa:	ac 01       	movw	r20, r24
    95fc:	60 e0       	ldi	r22, 0x00	; 0
    95fe:	70 e0       	ldi	r23, 0x00	; 0
    9600:	80 e8       	ldi	r24, 0x80	; 128
    9602:	9f e3       	ldi	r25, 0x3F	; 63
    9604:	50 ce       	rjmp	.-864    	; 0x92a6 <__divsf3>

00009606 <__mulsf3>:
    9606:	0b d0       	rcall	.+22     	; 0x961e <__mulsf3x>
    9608:	ac cf       	rjmp	.-168    	; 0x9562 <__fp_round>
    960a:	75 df       	rcall	.-278    	; 0x94f6 <__fp_pscA>
    960c:	28 f0       	brcs	.+10     	; 0x9618 <__mulsf3+0x12>
    960e:	7a df       	rcall	.-268    	; 0x9504 <__fp_pscB>
    9610:	18 f0       	brcs	.+6      	; 0x9618 <__mulsf3+0x12>
    9612:	95 23       	and	r25, r21
    9614:	09 f0       	breq	.+2      	; 0x9618 <__mulsf3+0x12>
    9616:	41 cf       	rjmp	.-382    	; 0x949a <__fp_inf>
    9618:	46 cf       	rjmp	.-372    	; 0x94a6 <__fp_nan>
    961a:	11 24       	eor	r1, r1
    961c:	e7 cf       	rjmp	.-50     	; 0x95ec <__fp_szero>

0000961e <__mulsf3x>:
    961e:	c3 df       	rcall	.-122    	; 0x95a6 <__fp_split3>
    9620:	a0 f3       	brcs	.-24     	; 0x960a <__mulsf3+0x4>

00009622 <__mulsf3_pse>:
    9622:	95 9f       	mul	r25, r21
    9624:	d1 f3       	breq	.-12     	; 0x961a <__mulsf3+0x14>
    9626:	95 0f       	add	r25, r21
    9628:	50 e0       	ldi	r21, 0x00	; 0
    962a:	55 1f       	adc	r21, r21
    962c:	62 9f       	mul	r22, r18
    962e:	f0 01       	movw	r30, r0
    9630:	72 9f       	mul	r23, r18
    9632:	bb 27       	eor	r27, r27
    9634:	f0 0d       	add	r31, r0
    9636:	b1 1d       	adc	r27, r1
    9638:	63 9f       	mul	r22, r19
    963a:	aa 27       	eor	r26, r26
    963c:	f0 0d       	add	r31, r0
    963e:	b1 1d       	adc	r27, r1
    9640:	aa 1f       	adc	r26, r26
    9642:	64 9f       	mul	r22, r20
    9644:	66 27       	eor	r22, r22
    9646:	b0 0d       	add	r27, r0
    9648:	a1 1d       	adc	r26, r1
    964a:	66 1f       	adc	r22, r22
    964c:	82 9f       	mul	r24, r18
    964e:	22 27       	eor	r18, r18
    9650:	b0 0d       	add	r27, r0
    9652:	a1 1d       	adc	r26, r1
    9654:	62 1f       	adc	r22, r18
    9656:	73 9f       	mul	r23, r19
    9658:	b0 0d       	add	r27, r0
    965a:	a1 1d       	adc	r26, r1
    965c:	62 1f       	adc	r22, r18
    965e:	83 9f       	mul	r24, r19
    9660:	a0 0d       	add	r26, r0
    9662:	61 1d       	adc	r22, r1
    9664:	22 1f       	adc	r18, r18
    9666:	74 9f       	mul	r23, r20
    9668:	33 27       	eor	r19, r19
    966a:	a0 0d       	add	r26, r0
    966c:	61 1d       	adc	r22, r1
    966e:	23 1f       	adc	r18, r19
    9670:	84 9f       	mul	r24, r20
    9672:	60 0d       	add	r22, r0
    9674:	21 1d       	adc	r18, r1
    9676:	82 2f       	mov	r24, r18
    9678:	76 2f       	mov	r23, r22
    967a:	6a 2f       	mov	r22, r26
    967c:	11 24       	eor	r1, r1
    967e:	9f 57       	subi	r25, 0x7F	; 127
    9680:	50 40       	sbci	r21, 0x00	; 0
    9682:	8a f0       	brmi	.+34     	; 0x96a6 <__mulsf3_pse+0x84>
    9684:	e1 f0       	breq	.+56     	; 0x96be <__mulsf3_pse+0x9c>
    9686:	88 23       	and	r24, r24
    9688:	4a f0       	brmi	.+18     	; 0x969c <__mulsf3_pse+0x7a>
    968a:	ee 0f       	add	r30, r30
    968c:	ff 1f       	adc	r31, r31
    968e:	bb 1f       	adc	r27, r27
    9690:	66 1f       	adc	r22, r22
    9692:	77 1f       	adc	r23, r23
    9694:	88 1f       	adc	r24, r24
    9696:	91 50       	subi	r25, 0x01	; 1
    9698:	50 40       	sbci	r21, 0x00	; 0
    969a:	a9 f7       	brne	.-22     	; 0x9686 <__mulsf3_pse+0x64>
    969c:	9e 3f       	cpi	r25, 0xFE	; 254
    969e:	51 05       	cpc	r21, r1
    96a0:	70 f0       	brcs	.+28     	; 0x96be <__mulsf3_pse+0x9c>
    96a2:	fb ce       	rjmp	.-522    	; 0x949a <__fp_inf>
    96a4:	a3 cf       	rjmp	.-186    	; 0x95ec <__fp_szero>
    96a6:	5f 3f       	cpi	r21, 0xFF	; 255
    96a8:	ec f3       	brlt	.-6      	; 0x96a4 <__mulsf3_pse+0x82>
    96aa:	98 3e       	cpi	r25, 0xE8	; 232
    96ac:	dc f3       	brlt	.-10     	; 0x96a4 <__mulsf3_pse+0x82>
    96ae:	86 95       	lsr	r24
    96b0:	77 95       	ror	r23
    96b2:	67 95       	ror	r22
    96b4:	b7 95       	ror	r27
    96b6:	f7 95       	ror	r31
    96b8:	e7 95       	ror	r30
    96ba:	9f 5f       	subi	r25, 0xFF	; 255
    96bc:	c1 f7       	brne	.-16     	; 0x96ae <__mulsf3_pse+0x8c>
    96be:	fe 2b       	or	r31, r30
    96c0:	88 0f       	add	r24, r24
    96c2:	91 1d       	adc	r25, r1
    96c4:	96 95       	lsr	r25
    96c6:	87 95       	ror	r24
    96c8:	97 f9       	bld	r25, 7
    96ca:	08 95       	ret

000096cc <sin>:
    96cc:	9f 93       	push	r25
    96ce:	22 df       	rcall	.-444    	; 0x9514 <__fp_rempio2>
    96d0:	0f 90       	pop	r0
    96d2:	07 fc       	sbrc	r0, 7
    96d4:	ee 5f       	subi	r30, 0xFE	; 254
    96d6:	56 cf       	rjmp	.-340    	; 0x9584 <__fp_sinus>

000096d8 <square>:
    96d8:	9b 01       	movw	r18, r22
    96da:	ac 01       	movw	r20, r24
    96dc:	94 cf       	rjmp	.-216    	; 0x9606 <__mulsf3>

000096de <__fp_mpack>:
    96de:	9f 3f       	cpi	r25, 0xFF	; 255
    96e0:	31 f0       	breq	.+12     	; 0x96ee <__fp_mpack_finite+0xc>

000096e2 <__fp_mpack_finite>:
    96e2:	91 50       	subi	r25, 0x01	; 1
    96e4:	20 f4       	brcc	.+8      	; 0x96ee <__fp_mpack_finite+0xc>
    96e6:	87 95       	ror	r24
    96e8:	77 95       	ror	r23
    96ea:	67 95       	ror	r22
    96ec:	b7 95       	ror	r27
    96ee:	88 0f       	add	r24, r24
    96f0:	91 1d       	adc	r25, r1
    96f2:	96 95       	lsr	r25
    96f4:	87 95       	ror	r24
    96f6:	97 f9       	bld	r25, 7
    96f8:	08 95       	ret

000096fa <__fp_powsodd>:
    96fa:	9f 93       	push	r25
    96fc:	8f 93       	push	r24
    96fe:	7f 93       	push	r23
    9700:	6f 93       	push	r22
    9702:	ff 93       	push	r31
    9704:	ef 93       	push	r30
    9706:	9b 01       	movw	r18, r22
    9708:	ac 01       	movw	r20, r24
    970a:	7d df       	rcall	.-262    	; 0x9606 <__mulsf3>
    970c:	ef 91       	pop	r30
    970e:	ff 91       	pop	r31
    9710:	cd de       	rcall	.-614    	; 0x94ac <__fp_powser>
    9712:	2f 91       	pop	r18
    9714:	3f 91       	pop	r19
    9716:	4f 91       	pop	r20
    9718:	5f 91       	pop	r21
    971a:	75 cf       	rjmp	.-278    	; 0x9606 <__mulsf3>

0000971c <__mulsi3>:
    971c:	62 9f       	mul	r22, r18
    971e:	d0 01       	movw	r26, r0
    9720:	73 9f       	mul	r23, r19
    9722:	f0 01       	movw	r30, r0
    9724:	82 9f       	mul	r24, r18
    9726:	e0 0d       	add	r30, r0
    9728:	f1 1d       	adc	r31, r1
    972a:	64 9f       	mul	r22, r20
    972c:	e0 0d       	add	r30, r0
    972e:	f1 1d       	adc	r31, r1
    9730:	92 9f       	mul	r25, r18
    9732:	f0 0d       	add	r31, r0
    9734:	83 9f       	mul	r24, r19
    9736:	f0 0d       	add	r31, r0
    9738:	74 9f       	mul	r23, r20
    973a:	f0 0d       	add	r31, r0
    973c:	65 9f       	mul	r22, r21
    973e:	f0 0d       	add	r31, r0
    9740:	99 27       	eor	r25, r25
    9742:	72 9f       	mul	r23, r18
    9744:	b0 0d       	add	r27, r0
    9746:	e1 1d       	adc	r30, r1
    9748:	f9 1f       	adc	r31, r25
    974a:	63 9f       	mul	r22, r19
    974c:	b0 0d       	add	r27, r0
    974e:	e1 1d       	adc	r30, r1
    9750:	f9 1f       	adc	r31, r25
    9752:	bd 01       	movw	r22, r26
    9754:	cf 01       	movw	r24, r30
    9756:	11 24       	eor	r1, r1
    9758:	08 95       	ret

0000975a <__udivmodhi4>:
    975a:	aa 1b       	sub	r26, r26
    975c:	bb 1b       	sub	r27, r27
    975e:	51 e1       	ldi	r21, 0x11	; 17
    9760:	07 c0       	rjmp	.+14     	; 0x9770 <__udivmodhi4_ep>

00009762 <__udivmodhi4_loop>:
    9762:	aa 1f       	adc	r26, r26
    9764:	bb 1f       	adc	r27, r27
    9766:	a6 17       	cp	r26, r22
    9768:	b7 07       	cpc	r27, r23
    976a:	10 f0       	brcs	.+4      	; 0x9770 <__udivmodhi4_ep>
    976c:	a6 1b       	sub	r26, r22
    976e:	b7 0b       	sbc	r27, r23

00009770 <__udivmodhi4_ep>:
    9770:	88 1f       	adc	r24, r24
    9772:	99 1f       	adc	r25, r25
    9774:	5a 95       	dec	r21
    9776:	a9 f7       	brne	.-22     	; 0x9762 <__udivmodhi4_loop>
    9778:	80 95       	com	r24
    977a:	90 95       	com	r25
    977c:	bc 01       	movw	r22, r24
    977e:	cd 01       	movw	r24, r26
    9780:	08 95       	ret

00009782 <__divmodhi4>:
    9782:	97 fb       	bst	r25, 7
    9784:	09 2e       	mov	r0, r25
    9786:	07 26       	eor	r0, r23
    9788:	0a d0       	rcall	.+20     	; 0x979e <__divmodhi4_neg1>
    978a:	77 fd       	sbrc	r23, 7
    978c:	04 d0       	rcall	.+8      	; 0x9796 <__divmodhi4_neg2>
    978e:	e5 df       	rcall	.-54     	; 0x975a <__udivmodhi4>
    9790:	06 d0       	rcall	.+12     	; 0x979e <__divmodhi4_neg1>
    9792:	00 20       	and	r0, r0
    9794:	1a f4       	brpl	.+6      	; 0x979c <__divmodhi4_exit>

00009796 <__divmodhi4_neg2>:
    9796:	70 95       	com	r23
    9798:	61 95       	neg	r22
    979a:	7f 4f       	sbci	r23, 0xFF	; 255

0000979c <__divmodhi4_exit>:
    979c:	08 95       	ret

0000979e <__divmodhi4_neg1>:
    979e:	f6 f7       	brtc	.-4      	; 0x979c <__divmodhi4_exit>
    97a0:	90 95       	com	r25
    97a2:	81 95       	neg	r24
    97a4:	9f 4f       	sbci	r25, 0xFF	; 255
    97a6:	08 95       	ret

000097a8 <__divmodsi4>:
    97a8:	97 fb       	bst	r25, 7
    97aa:	09 2e       	mov	r0, r25
    97ac:	05 26       	eor	r0, r21
    97ae:	0e d0       	rcall	.+28     	; 0x97cc <__divmodsi4_neg1>
    97b0:	57 fd       	sbrc	r21, 7
    97b2:	04 d0       	rcall	.+8      	; 0x97bc <__divmodsi4_neg2>
    97b4:	14 d0       	rcall	.+40     	; 0x97de <__udivmodsi4>
    97b6:	0a d0       	rcall	.+20     	; 0x97cc <__divmodsi4_neg1>
    97b8:	00 1c       	adc	r0, r0
    97ba:	38 f4       	brcc	.+14     	; 0x97ca <__divmodsi4_exit>

000097bc <__divmodsi4_neg2>:
    97bc:	50 95       	com	r21
    97be:	40 95       	com	r20
    97c0:	30 95       	com	r19
    97c2:	21 95       	neg	r18
    97c4:	3f 4f       	sbci	r19, 0xFF	; 255
    97c6:	4f 4f       	sbci	r20, 0xFF	; 255
    97c8:	5f 4f       	sbci	r21, 0xFF	; 255

000097ca <__divmodsi4_exit>:
    97ca:	08 95       	ret

000097cc <__divmodsi4_neg1>:
    97cc:	f6 f7       	brtc	.-4      	; 0x97ca <__divmodsi4_exit>
    97ce:	90 95       	com	r25
    97d0:	80 95       	com	r24
    97d2:	70 95       	com	r23
    97d4:	61 95       	neg	r22
    97d6:	7f 4f       	sbci	r23, 0xFF	; 255
    97d8:	8f 4f       	sbci	r24, 0xFF	; 255
    97da:	9f 4f       	sbci	r25, 0xFF	; 255
    97dc:	08 95       	ret

000097de <__udivmodsi4>:
    97de:	a1 e2       	ldi	r26, 0x21	; 33
    97e0:	1a 2e       	mov	r1, r26
    97e2:	aa 1b       	sub	r26, r26
    97e4:	bb 1b       	sub	r27, r27
    97e6:	fd 01       	movw	r30, r26
    97e8:	0d c0       	rjmp	.+26     	; 0x9804 <__udivmodsi4_ep>

000097ea <__udivmodsi4_loop>:
    97ea:	aa 1f       	adc	r26, r26
    97ec:	bb 1f       	adc	r27, r27
    97ee:	ee 1f       	adc	r30, r30
    97f0:	ff 1f       	adc	r31, r31
    97f2:	a2 17       	cp	r26, r18
    97f4:	b3 07       	cpc	r27, r19
    97f6:	e4 07       	cpc	r30, r20
    97f8:	f5 07       	cpc	r31, r21
    97fa:	20 f0       	brcs	.+8      	; 0x9804 <__udivmodsi4_ep>
    97fc:	a2 1b       	sub	r26, r18
    97fe:	b3 0b       	sbc	r27, r19
    9800:	e4 0b       	sbc	r30, r20
    9802:	f5 0b       	sbc	r31, r21

00009804 <__udivmodsi4_ep>:
    9804:	66 1f       	adc	r22, r22
    9806:	77 1f       	adc	r23, r23
    9808:	88 1f       	adc	r24, r24
    980a:	99 1f       	adc	r25, r25
    980c:	1a 94       	dec	r1
    980e:	69 f7       	brne	.-38     	; 0x97ea <__udivmodsi4_loop>
    9810:	60 95       	com	r22
    9812:	70 95       	com	r23
    9814:	80 95       	com	r24
    9816:	90 95       	com	r25
    9818:	9b 01       	movw	r18, r22
    981a:	ac 01       	movw	r20, r24
    981c:	bd 01       	movw	r22, r26
    981e:	cf 01       	movw	r24, r30
    9820:	08 95       	ret

00009822 <do_rand>:
    9822:	af 92       	push	r10
    9824:	bf 92       	push	r11
    9826:	cf 92       	push	r12
    9828:	df 92       	push	r13
    982a:	ef 92       	push	r14
    982c:	ff 92       	push	r15
    982e:	0f 93       	push	r16
    9830:	1f 93       	push	r17
    9832:	cf 93       	push	r28
    9834:	df 93       	push	r29
    9836:	ec 01       	movw	r28, r24
    9838:	68 81       	ld	r22, Y
    983a:	79 81       	ldd	r23, Y+1	; 0x01
    983c:	8a 81       	ldd	r24, Y+2	; 0x02
    983e:	9b 81       	ldd	r25, Y+3	; 0x03
    9840:	61 15       	cp	r22, r1
    9842:	71 05       	cpc	r23, r1
    9844:	81 05       	cpc	r24, r1
    9846:	91 05       	cpc	r25, r1
    9848:	21 f4       	brne	.+8      	; 0x9852 <do_rand+0x30>
    984a:	64 e2       	ldi	r22, 0x24	; 36
    984c:	79 ed       	ldi	r23, 0xD9	; 217
    984e:	8b e5       	ldi	r24, 0x5B	; 91
    9850:	97 e0       	ldi	r25, 0x07	; 7
    9852:	2d e1       	ldi	r18, 0x1D	; 29
    9854:	33 ef       	ldi	r19, 0xF3	; 243
    9856:	41 e0       	ldi	r20, 0x01	; 1
    9858:	50 e0       	ldi	r21, 0x00	; 0
    985a:	0e 94 d4 4b 	call	0x97a8	; 0x97a8 <__divmodsi4>
    985e:	79 01       	movw	r14, r18
    9860:	8a 01       	movw	r16, r20
    9862:	27 ea       	ldi	r18, 0xA7	; 167
    9864:	31 e4       	ldi	r19, 0x41	; 65
    9866:	40 e0       	ldi	r20, 0x00	; 0
    9868:	50 e0       	ldi	r21, 0x00	; 0
    986a:	0e 94 8e 4b 	call	0x971c	; 0x971c <__mulsi3>
    986e:	5b 01       	movw	r10, r22
    9870:	6c 01       	movw	r12, r24
    9872:	c8 01       	movw	r24, r16
    9874:	b7 01       	movw	r22, r14
    9876:	2c ee       	ldi	r18, 0xEC	; 236
    9878:	34 ef       	ldi	r19, 0xF4	; 244
    987a:	4f ef       	ldi	r20, 0xFF	; 255
    987c:	5f ef       	ldi	r21, 0xFF	; 255
    987e:	0e 94 8e 4b 	call	0x971c	; 0x971c <__mulsi3>
    9882:	6a 0d       	add	r22, r10
    9884:	7b 1d       	adc	r23, r11
    9886:	8c 1d       	adc	r24, r12
    9888:	9d 1d       	adc	r25, r13
    988a:	97 ff       	sbrs	r25, 7
    988c:	04 c0       	rjmp	.+8      	; 0x9896 <do_rand+0x74>
    988e:	61 50       	subi	r22, 0x01	; 1
    9890:	70 40       	sbci	r23, 0x00	; 0
    9892:	80 40       	sbci	r24, 0x00	; 0
    9894:	90 48       	sbci	r25, 0x80	; 128
    9896:	68 83       	st	Y, r22
    9898:	79 83       	std	Y+1, r23	; 0x01
    989a:	8a 83       	std	Y+2, r24	; 0x02
    989c:	9b 83       	std	Y+3, r25	; 0x03
    989e:	7f 77       	andi	r23, 0x7F	; 127
    98a0:	cb 01       	movw	r24, r22
    98a2:	df 91       	pop	r29
    98a4:	cf 91       	pop	r28
    98a6:	1f 91       	pop	r17
    98a8:	0f 91       	pop	r16
    98aa:	ff 90       	pop	r15
    98ac:	ef 90       	pop	r14
    98ae:	df 90       	pop	r13
    98b0:	cf 90       	pop	r12
    98b2:	bf 90       	pop	r11
    98b4:	af 90       	pop	r10
    98b6:	08 95       	ret

000098b8 <rand_r>:
    98b8:	0e 94 11 4c 	call	0x9822	; 0x9822 <do_rand>
    98bc:	08 95       	ret

000098be <rand>:
    98be:	89 e1       	ldi	r24, 0x19	; 25
    98c0:	92 e0       	ldi	r25, 0x02	; 2
    98c2:	0e 94 11 4c 	call	0x9822	; 0x9822 <do_rand>
    98c6:	08 95       	ret

000098c8 <srand>:
    98c8:	a0 e0       	ldi	r26, 0x00	; 0
    98ca:	b0 e0       	ldi	r27, 0x00	; 0
    98cc:	80 93 19 02 	sts	0x0219, r24
    98d0:	90 93 1a 02 	sts	0x021A, r25
    98d4:	a0 93 1b 02 	sts	0x021B, r26
    98d8:	b0 93 1c 02 	sts	0x021C, r27
    98dc:	08 95       	ret

000098de <memset>:
    98de:	dc 01       	movw	r26, r24
    98e0:	01 c0       	rjmp	.+2      	; 0x98e4 <memset+0x6>
    98e2:	6d 93       	st	X+, r22
    98e4:	41 50       	subi	r20, 0x01	; 1
    98e6:	50 40       	sbci	r21, 0x00	; 0
    98e8:	e0 f7       	brcc	.-8      	; 0x98e2 <memset+0x4>
    98ea:	08 95       	ret

000098ec <__eerd_block_m2560>:
    98ec:	dc 01       	movw	r26, r24
    98ee:	cb 01       	movw	r24, r22

000098f0 <__eerd_blraw_m2560>:
    98f0:	fc 01       	movw	r30, r24
    98f2:	f9 99       	sbic	0x1f, 1	; 31
    98f4:	fe cf       	rjmp	.-4      	; 0x98f2 <__eerd_blraw_m2560+0x2>
    98f6:	06 c0       	rjmp	.+12     	; 0x9904 <__eerd_blraw_m2560+0x14>
    98f8:	f2 bd       	out	0x22, r31	; 34
    98fa:	e1 bd       	out	0x21, r30	; 33
    98fc:	f8 9a       	sbi	0x1f, 0	; 31
    98fe:	31 96       	adiw	r30, 0x01	; 1
    9900:	00 b4       	in	r0, 0x20	; 32
    9902:	0d 92       	st	X+, r0
    9904:	41 50       	subi	r20, 0x01	; 1
    9906:	50 40       	sbci	r21, 0x00	; 0
    9908:	b8 f7       	brcc	.-18     	; 0x98f8 <__eerd_blraw_m2560+0x8>
    990a:	08 95       	ret

0000990c <__eerd_byte_m2560>:
    990c:	f9 99       	sbic	0x1f, 1	; 31
    990e:	fe cf       	rjmp	.-4      	; 0x990c <__eerd_byte_m2560>
    9910:	92 bd       	out	0x22, r25	; 34
    9912:	81 bd       	out	0x21, r24	; 33
    9914:	f8 9a       	sbi	0x1f, 0	; 31
    9916:	99 27       	eor	r25, r25
    9918:	80 b5       	in	r24, 0x20	; 32
    991a:	08 95       	ret

0000991c <__eerd_word_m2560>:
    991c:	a8 e1       	ldi	r26, 0x18	; 24
    991e:	b0 e0       	ldi	r27, 0x00	; 0
    9920:	42 e0       	ldi	r20, 0x02	; 2
    9922:	50 e0       	ldi	r21, 0x00	; 0
    9924:	0c 94 78 4c 	jmp	0x98f0	; 0x98f0 <__eerd_blraw_m2560>

00009928 <__eeupd_block_m2560>:
    9928:	dc 01       	movw	r26, r24
    992a:	a4 0f       	add	r26, r20
    992c:	b5 1f       	adc	r27, r21
    992e:	41 50       	subi	r20, 0x01	; 1
    9930:	50 40       	sbci	r21, 0x00	; 0
    9932:	48 f0       	brcs	.+18     	; 0x9946 <__eeupd_block_m2560+0x1e>
    9934:	cb 01       	movw	r24, r22
    9936:	84 0f       	add	r24, r20
    9938:	95 1f       	adc	r25, r21
    993a:	2e 91       	ld	r18, -X
    993c:	0e 94 a5 4c 	call	0x994a	; 0x994a <__eeupd_r18_m2560>
    9940:	41 50       	subi	r20, 0x01	; 1
    9942:	50 40       	sbci	r21, 0x00	; 0
    9944:	d0 f7       	brcc	.-12     	; 0x993a <__eeupd_block_m2560+0x12>
    9946:	08 95       	ret

00009948 <__eeupd_byte_m2560>:
    9948:	26 2f       	mov	r18, r22

0000994a <__eeupd_r18_m2560>:
    994a:	f9 99       	sbic	0x1f, 1	; 31
    994c:	fe cf       	rjmp	.-4      	; 0x994a <__eeupd_r18_m2560>
    994e:	92 bd       	out	0x22, r25	; 34
    9950:	81 bd       	out	0x21, r24	; 33
    9952:	f8 9a       	sbi	0x1f, 0	; 31
    9954:	01 97       	sbiw	r24, 0x01	; 1
    9956:	00 b4       	in	r0, 0x20	; 32
    9958:	02 16       	cp	r0, r18
    995a:	39 f0       	breq	.+14     	; 0x996a <__eeupd_r18_m2560+0x20>
    995c:	1f ba       	out	0x1f, r1	; 31
    995e:	20 bd       	out	0x20, r18	; 32
    9960:	0f b6       	in	r0, 0x3f	; 63
    9962:	f8 94       	cli
    9964:	fa 9a       	sbi	0x1f, 2	; 31
    9966:	f9 9a       	sbi	0x1f, 1	; 31
    9968:	0f be       	out	0x3f, r0	; 63
    996a:	08 95       	ret

0000996c <__eeupd_word_m2560>:
    996c:	01 96       	adiw	r24, 0x01	; 1
    996e:	27 2f       	mov	r18, r23
    9970:	0e 94 a5 4c 	call	0x994a	; 0x994a <__eeupd_r18_m2560>
    9974:	0c 94 a4 4c 	jmp	0x9948	; 0x9948 <__eeupd_byte_m2560>

00009978 <__eewr_byte_m2560>:
    9978:	26 2f       	mov	r18, r22

0000997a <__eewr_r18_m2560>:
    997a:	f9 99       	sbic	0x1f, 1	; 31
    997c:	fe cf       	rjmp	.-4      	; 0x997a <__eewr_r18_m2560>
    997e:	1f ba       	out	0x1f, r1	; 31
    9980:	92 bd       	out	0x22, r25	; 34
    9982:	81 bd       	out	0x21, r24	; 33
    9984:	20 bd       	out	0x20, r18	; 32
    9986:	0f b6       	in	r0, 0x3f	; 63
    9988:	f8 94       	cli
    998a:	fa 9a       	sbi	0x1f, 2	; 31
    998c:	f9 9a       	sbi	0x1f, 1	; 31
    998e:	0f be       	out	0x3f, r0	; 63
    9990:	01 96       	adiw	r24, 0x01	; 1
    9992:	08 95       	ret

00009994 <__eewr_word_m2560>:
    9994:	0e 94 bc 4c 	call	0x9978	; 0x9978 <__eewr_byte_m2560>
    9998:	27 2f       	mov	r18, r23
    999a:	0c 94 bd 4c 	jmp	0x997a	; 0x997a <__eewr_r18_m2560>

0000999e <_exit>:
    999e:	ff cf       	rjmp	.-2      	; 0x999e <_exit>
