
Elisa3-avr-studio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800200  0000a6ba  0000a74e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000a6ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000943  0080021e  0080021e  0000a76c  2**0
                  ALLOC
  3 .stab         00003780  00000000  00000000  0000a76c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f1b  00000000  00000000  0000deec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000238  00000000  00000000  0000ee07  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000025a8  00000000  00000000  0000f03f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006486  00000000  00000000  000115e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001273  00000000  00000000  00017a6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00007e89  00000000  00000000  00018ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000008e0  00000000  00000000  00020b6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001cbf  00000000  00000000  0002144c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000268c  00000000  00000000  0002310b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000296  00000000  00000000  00025797  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000128  00000000  00000000  00025a2d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__ctors_end>
       4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
       8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
       c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      10:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      14:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      18:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      1c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      20:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      24:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      28:	0c 94 59 12 	jmp	0x24b2	; 0x24b2 <__vector_10>
      2c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      30:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      34:	0c 94 8d 12 	jmp	0x251a	; 0x251a <__vector_13>
      38:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      3c:	0c 94 45 1e 	jmp	0x3c8a	; 0x3c8a <__vector_15>
      40:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      44:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      48:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      4c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      50:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      54:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      58:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      5c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      60:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      64:	0c 94 09 1d 	jmp	0x3a12	; 0x3a12 <__vector_25>
      68:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      6c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      70:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      74:	0c 94 17 1f 	jmp	0x3e2e	; 0x3e2e <__vector_29>
      78:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      7c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      80:	0c 94 78 38 	jmp	0x70f0	; 0x70f0 <__vector_32>
      84:	0c 94 8e 38 	jmp	0x711c	; 0x711c <__vector_33>
      88:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      8c:	0c 94 eb 37 	jmp	0x6fd6	; 0x6fd6 <__vector_35>
      90:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      94:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      98:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      9c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      a0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      a4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      a8:	0c 94 bf 37 	jmp	0x6f7e	; 0x6f7e <__vector_42>
      ac:	0c 94 d5 37 	jmp	0x6faa	; 0x6faa <__vector_43>
      b0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      b4:	0c 94 28 37 	jmp	0x6e50	; 0x6e50 <__vector_45>
      b8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      bc:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      c0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      c4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      c8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      cc:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      d0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      d4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      d8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      dc:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      e0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      e4:	6a 15       	cp	r22, r10
      e6:	4e 15       	cp	r20, r14
      e8:	1c 15       	cp	r17, r12
      ea:	07 15       	cp	r16, r7
      ec:	de 14       	cp	r13, r14
      ee:	cc 14       	cp	r12, r12
      f0:	a3 14       	cp	r10, r3
      f2:	87 14       	cp	r8, r7
      f4:	4e 14       	cp	r4, r14
      f6:	36 14       	cp	r3, r6
      f8:	cf 13       	cpse	r28, r31
      fa:	cf 13       	cpse	r28, r31
      fc:	cf 13       	cpse	r28, r31
      fe:	cf 13       	cpse	r28, r31
     100:	cf 13       	cpse	r28, r31
     102:	cf 13       	cpse	r28, r31
     104:	7b 14       	cp	r7, r11
     106:	2b 14       	cp	r2, r11
     108:	cf 13       	cpse	r28, r31
     10a:	cf 13       	cpse	r28, r31
     10c:	cf 13       	cpse	r28, r31
     10e:	cf 13       	cpse	r28, r31
     110:	cf 13       	cpse	r28, r31
     112:	cf 13       	cpse	r28, r31
     114:	cf 13       	cpse	r28, r31
     116:	cf 13       	cpse	r28, r31
     118:	cf 13       	cpse	r28, r31
     11a:	cf 13       	cpse	r28, r31
     11c:	cf 13       	cpse	r28, r31
     11e:	cf 13       	cpse	r28, r31
     120:	4e 14       	cp	r4, r14
     122:	1c 15       	cp	r17, r12
     124:	03 14       	cp	r0, r3
     126:	f6 13       	cpse	r31, r22
     128:	cf 13       	cpse	r28, r31
     12a:	cf 13       	cpse	r28, r31
     12c:	cf 13       	cpse	r28, r31
     12e:	cf 13       	cpse	r28, r31
     130:	cf 13       	cpse	r28, r31
     132:	cf 13       	cpse	r28, r31
     134:	cf 13       	cpse	r28, r31
     136:	cf 13       	cpse	r28, r31
     138:	cf 13       	cpse	r28, r31
     13a:	cf 13       	cpse	r28, r31
     13c:	cf 13       	cpse	r28, r31
     13e:	cf 13       	cpse	r28, r31
     140:	de 14       	cp	r13, r14
     142:	a3 14       	cp	r10, r3
     144:	cf 13       	cpse	r28, r31
     146:	cf 13       	cpse	r28, r31
     148:	6a 15       	cp	r22, r10
     14a:	cc 14       	cp	r12, r12
     14c:	0f 14       	cp	r0, r15
     14e:	08 4a       	sbci	r16, 0xA8	; 168
     150:	d7 3b       	cpi	r29, 0xB7	; 183
     152:	3b ce       	rjmp	.-906    	; 0xfffffdca <__eeprom_end+0xff7efdca>
     154:	01 6e       	ori	r16, 0xE1	; 225
     156:	84 bc       	out	0x24, r8	; 36
     158:	bf fd       	.word	0xfdbf	; ????
     15a:	c1 2f       	mov	r28, r17
     15c:	3d 6c       	ori	r19, 0xCD	; 205
     15e:	74 31       	cpi	r23, 0x14	; 20
     160:	9a bd       	out	0x2a, r25	; 42
     162:	56 83       	std	Z+6, r21	; 0x06
     164:	3d da       	rcall	.-2950   	; 0xfffff5e0 <__eeprom_end+0xff7ef5e0>
     166:	3d 00       	.word	0x003d	; ????
     168:	c7 7f       	andi	r28, 0xF7	; 247
     16a:	11 be       	out	0x31, r1	; 49
     16c:	d9 e4       	ldi	r29, 0x49	; 73
     16e:	bb 4c       	sbci	r27, 0xCB	; 203
     170:	3e 91       	ld	r19, -X
     172:	6b aa       	std	Y+51, r6	; 0x33
     174:	aa be       	out	0x3a, r10	; 58
     176:	00 00       	nop
     178:	00 80       	ld	r0, Z
     17a:	3f 05       	cpc	r19, r15
     17c:	a8 4c       	sbci	r26, 0xC8	; 200
     17e:	cd b2       	in	r12, 0x1d	; 29
     180:	d4 4e       	sbci	r29, 0xE4	; 228
     182:	b9 38       	cpi	r27, 0x89	; 137
     184:	36 a9       	ldd	r19, Z+54	; 0x36
     186:	02 0c       	add	r0, r2
     188:	50 b9       	out	0x00, r21	; 0
     18a:	91 86       	std	Z+9, r9	; 0x09
     18c:	88 08       	sbc	r8, r8
     18e:	3c a6       	std	Y+44, r3	; 0x2c
     190:	aa aa       	std	Y+50, r10	; 0x32
     192:	2a be       	out	0x3a, r2	; 58
     194:	00 00       	nop
     196:	00 80       	ld	r0, Z
     198:	3f 00       	.word	0x003f	; ????

0000019a <__ctors_end>:
     19a:	11 24       	eor	r1, r1
     19c:	1f be       	out	0x3f, r1	; 63
     19e:	cf ef       	ldi	r28, 0xFF	; 255
     1a0:	d1 e2       	ldi	r29, 0x21	; 33
     1a2:	de bf       	out	0x3e, r29	; 62
     1a4:	cd bf       	out	0x3d, r28	; 61
     1a6:	00 e0       	ldi	r16, 0x00	; 0
     1a8:	0c bf       	out	0x3c, r16	; 60

000001aa <__do_copy_data>:
     1aa:	12 e0       	ldi	r17, 0x02	; 2
     1ac:	a0 e0       	ldi	r26, 0x00	; 0
     1ae:	b2 e0       	ldi	r27, 0x02	; 2
     1b0:	ea eb       	ldi	r30, 0xBA	; 186
     1b2:	f6 ea       	ldi	r31, 0xA6	; 166
     1b4:	02 c0       	rjmp	.+4      	; 0x1ba <.do_copy_data_start>

000001b6 <.do_copy_data_loop>:
     1b6:	05 90       	lpm	r0, Z+
     1b8:	0d 92       	st	X+, r0

000001ba <.do_copy_data_start>:
     1ba:	ae 31       	cpi	r26, 0x1E	; 30
     1bc:	b1 07       	cpc	r27, r17
     1be:	d9 f7       	brne	.-10     	; 0x1b6 <.do_copy_data_loop>

000001c0 <__do_clear_bss>:
     1c0:	1b e0       	ldi	r17, 0x0B	; 11
     1c2:	ae e1       	ldi	r26, 0x1E	; 30
     1c4:	b2 e0       	ldi	r27, 0x02	; 2
     1c6:	01 c0       	rjmp	.+2      	; 0x1ca <.do_clear_bss_start>

000001c8 <.do_clear_bss_loop>:
     1c8:	1d 92       	st	X+, r1

000001ca <.do_clear_bss_start>:
     1ca:	a1 36       	cpi	r26, 0x61	; 97
     1cc:	b1 07       	cpc	r27, r17
     1ce:	e1 f7       	brne	.-8      	; 0x1c8 <.do_clear_bss_loop>
     1d0:	0e 94 ee 00 	call	0x1dc	; 0x1dc <main>
     1d4:	0c 94 5c 53 	jmp	0xa6b8	; 0xa6b8 <_exit>

000001d8 <__bad_interrupt>:
     1d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001dc <main>:
#include "nRF24L01.h"
#include "behaviors.h"
#include "sensors.h"
#include "irCommunication.h"

int main(void) {
     1dc:	2f 92       	push	r2
     1de:	3f 92       	push	r3
     1e0:	4f 92       	push	r4
     1e2:	5f 92       	push	r5
     1e4:	6f 92       	push	r6
     1e6:	7f 92       	push	r7
     1e8:	8f 92       	push	r8
     1ea:	9f 92       	push	r9
     1ec:	af 92       	push	r10
     1ee:	bf 92       	push	r11
     1f0:	cf 92       	push	r12
     1f2:	df 92       	push	r13
     1f4:	ef 92       	push	r14
     1f6:	ff 92       	push	r15
     1f8:	0f 93       	push	r16
     1fa:	1f 93       	push	r17
     1fc:	df 93       	push	r29
     1fe:	cf 93       	push	r28
     200:	00 d0       	rcall	.+0      	; 0x202 <main+0x26>
     202:	0f 92       	push	r0
     204:	cd b7       	in	r28, 0x3d	; 61
     206:	de b7       	in	r29, 0x3e	; 62
	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
	unsigned char prevSelector=0;
	unsigned int i=0;
	unsigned int currRand=0, currRand2=0;

	initPeripherals();
     208:	0e 94 e4 1d 	call	0x3bc8	; 0x3bc8 <initPeripherals>

	calibrateSensors();
     20c:	0e 94 2a 3e 	call	0x7c54	; 0x7c54 <calibrateSensors>

	initBehaviors();
     210:	0e 94 a4 38 	call	0x7148	; 0x7148 <initBehaviors>

	startTime = getTime100MicroSec();
     214:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <getTime100MicroSec>
     218:	6b 01       	movw	r12, r22
     21a:	7c 01       	movw	r14, r24

	speedStepCounter = getTime100MicroSec();
     21c:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <getTime100MicroSec>
     220:	9b 01       	movw	r18, r22
     222:	ac 01       	movw	r20, r24
     224:	60 93 60 04 	sts	0x0460, r22
     228:	30 93 61 04 	sts	0x0461, r19
     22c:	40 93 62 04 	sts	0x0462, r20
     230:	50 93 63 04 	sts	0x0463, r21
     234:	10 92 64 04 	sts	0x0464, r1
     238:	10 92 65 04 	sts	0x0465, r1
     23c:	10 92 66 04 	sts	0x0466, r1
     240:	10 92 67 04 	sts	0x0467, r1
int main(void) {

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
	unsigned char prevSelector=0;
	unsigned int i=0;
	unsigned int currRand=0, currRand2=0;
     244:	aa 24       	eor	r10, r10
     246:	bb 24       	eor	r11, r11
#include "irCommunication.h"

int main(void) {

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
	unsigned char prevSelector=0;
     248:	00 e0       	ldi	r16, 0x00	; 0
#include "sensors.h"
#include "irCommunication.h"

int main(void) {

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
     24a:	19 82       	std	Y+1, r1	; 0x01
     24c:	1a 82       	std	Y+2, r1	; 0x02
     24e:	1b 82       	std	Y+3, r1	; 0x03
     250:	1c 82       	std	Y+4, r1	; 0x04
		computeAngle();

		// turn off the rgb leds after one half second in the "charger demo"
		if(currentSelector==7) {
			if((getTime100MicroSec()-turnOffLedsTime) > PAUSE_500_MSEC) {
				pwm_red = 255;
     252:	1f ef       	ldi	r17, 0xFF	; 255
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption

				switch(rgbState) {
					case 0:
						pwm_red = 255 - currRand;	
						rgbState = 1;
     254:	22 24       	eor	r2, r2
     256:	23 94       	inc	r2
	eeprom_update_block(calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
*/

	while(1) {

		currentSelector = getSelector();	// update selector position
     258:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <getSelector>
     25c:	80 93 4c 04 	sts	0x044C, r24

		readAccelXYZ();						// update accelerometer values to compute the angle
     260:	0e 94 6a 3d 	call	0x7ad4	; 0x7ad4 <readAccelXYZ>

		computeAngle();
     264:	0e 94 a6 42 	call	0x854c	; 0x854c <computeAngle>

		// turn off the rgb leds after one half second in the "charger demo"
		if(currentSelector==7) {
     268:	80 91 4c 04 	lds	r24, 0x044C
     26c:	87 30       	cpi	r24, 0x07	; 7
     26e:	09 f4       	brne	.+2      	; 0x272 <main+0x96>
     270:	59 c2       	rjmp	.+1202   	; 0x724 <main+0x548>
				pwm_green = 255;
				pwm_blue = 255;			
			}
		}

		endTime = getTime100MicroSec();
     272:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <getTime100MicroSec>
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
     276:	6c 19       	sub	r22, r12
     278:	7d 09       	sbc	r23, r13
     27a:	8e 09       	sbc	r24, r14
     27c:	9f 09       	sbc	r25, r15
     27e:	6e 31       	cpi	r22, 0x1E	; 30
     280:	4b e4       	ldi	r20, 0x4B	; 75
     282:	74 07       	cpc	r23, r20
     284:	40 e0       	ldi	r20, 0x00	; 0
     286:	84 07       	cpc	r24, r20
     288:	40 e0       	ldi	r20, 0x00	; 0
     28a:	94 07       	cpc	r25, r20
     28c:	08 f0       	brcs	.+2      	; 0x290 <main+0xb4>
     28e:	36 c2       	rjmp	.+1132   	; 0x6fc <main+0x520>
			startTime = getTime100MicroSec();
		}

		
		//if(calibrateOdomFlag==0) {
			handleIRRemoteCommands();
     290:	0e 94 bd 13 	call	0x277a	; 0x277a <handleIRRemoteCommands>
		//}


		//if(calibrateOdomFlag==0) {
			handleRFCommands();
     294:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <handleRFCommands>
		//}


		if(calibrateOdomFlag==0) {
     298:	80 91 4e 05 	lds	r24, 0x054E
     29c:	88 23       	and	r24, r24
     29e:	09 f4       	brne	.+2      	; 0x2a2 <main+0xc6>
     2a0:	fd c0       	rjmp	.+506    	; 0x49c <main+0x2c0>

		//if(currentSelector!=6 && currentSelector!=15) {
		//	usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		//}

		switch(currentSelector) {
     2a2:	80 91 4c 04 	lds	r24, 0x044C
     2a6:	87 30       	cpi	r24, 0x07	; 7
     2a8:	09 f4       	brne	.+2      	; 0x2ac <main+0xd0>
     2aa:	e8 c1       	rjmp	.+976    	; 0x67c <main+0x4a0>
     2ac:	88 30       	cpi	r24, 0x08	; 8
     2ae:	08 f0       	brcs	.+2      	; 0x2b2 <main+0xd6>
     2b0:	61 c0       	rjmp	.+194    	; 0x374 <main+0x198>
     2b2:	83 30       	cpi	r24, 0x03	; 3
     2b4:	09 f4       	brne	.+2      	; 0x2b8 <main+0xdc>
     2b6:	92 c2       	rjmp	.+1316   	; 0x7dc <main+0x600>
     2b8:	84 30       	cpi	r24, 0x04	; 4
     2ba:	08 f0       	brcs	.+2      	; 0x2be <main+0xe2>
     2bc:	4d c2       	rjmp	.+1178   	; 0x758 <main+0x57c>
     2be:	81 30       	cpi	r24, 0x01	; 1
     2c0:	09 f4       	brne	.+2      	; 0x2c4 <main+0xe8>
     2c2:	34 c3       	rjmp	.+1640   	; 0x92c <main+0x750>
     2c4:	82 30       	cpi	r24, 0x02	; 2
     2c6:	08 f0       	brcs	.+2      	; 0x2ca <main+0xee>
     2c8:	8b c2       	rjmp	.+1302   	; 0x7e0 <main+0x604>
    
			case 0:	// motors in direct power control (no speed control)
					handleMotorsWithNoController();
     2ca:	0e 94 cc 25 	call	0x4b98	; 0x4b98 <handleMotorsWithNoController>
     2ce:	80 91 4c 04 	lds	r24, 0x044C
					//usart0Transmit(currentOsccal,1);
					break;

		}

		if(currentSelector!=0) {
     2d2:	88 23       	and	r24, r24
     2d4:	09 f0       	breq	.+2      	; 0x2d8 <main+0xfc>
     2d6:	dd c0       	rjmp	.+442    	; 0x492 <main+0x2b6>
     2d8:	80 e0       	ldi	r24, 0x00	; 0
			handleMotorsWithSpeedController();  
		}

		if(prevSelector != currentSelector) {	// in case the selector is changed, reset the robot state
     2da:	08 17       	cp	r16, r24
     2dc:	09 f4       	brne	.+2      	; 0x2e0 <main+0x104>
     2de:	bc cf       	rjmp	.-136    	; 0x258 <main+0x7c>
			disableObstacleAvoidance();
     2e0:	0e 94 eb 3a 	call	0x75d6	; 0x75d6 <disableObstacleAvoidance>
			disableCliffAvoidance();
     2e4:	0e 94 f2 3a 	call	0x75e4	; 0x75e4 <disableCliffAvoidance>
			GREEN_LED0_OFF;
     2e8:	80 91 0b 01 	lds	r24, 0x010B
     2ec:	81 60       	ori	r24, 0x01	; 1
     2ee:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED1_OFF;
     2f2:	80 91 0b 01 	lds	r24, 0x010B
     2f6:	82 60       	ori	r24, 0x02	; 2
     2f8:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED2_OFF;
     2fc:	80 91 0b 01 	lds	r24, 0x010B
     300:	84 60       	ori	r24, 0x04	; 4
     302:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED3_OFF;
     306:	a3 9a       	sbi	0x14, 3	; 20
			GREEN_LED4_OFF;
     308:	80 91 0b 01 	lds	r24, 0x010B
     30c:	80 61       	ori	r24, 0x10	; 16
     30e:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED5_OFF;
     312:	80 91 0b 01 	lds	r24, 0x010B
     316:	80 62       	ori	r24, 0x20	; 32
     318:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED6_OFF;
     31c:	80 91 0b 01 	lds	r24, 0x010B
     320:	80 64       	ori	r24, 0x40	; 64
     322:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED7_OFF;
     326:	80 91 0b 01 	lds	r24, 0x010B
     32a:	80 68       	ori	r24, 0x80	; 128
     32c:	80 93 0b 01 	sts	0x010B, r24
			pwm_red = 255;
     330:	10 93 0c 02 	sts	0x020C, r17
			pwm_green = 255;
     334:	10 93 0d 02 	sts	0x020D, r17
			pwm_blue = 255;
     338:	10 93 0e 02 	sts	0x020E, r17
			updateRedLed(pwm_red);
     33c:	8f ef       	ldi	r24, 0xFF	; 255
     33e:	0e 94 32 3b 	call	0x7664	; 0x7664 <updateRedLed>
			updateGreenLed(pwm_green);
     342:	80 91 0d 02 	lds	r24, 0x020D
     346:	0e 94 46 3b 	call	0x768c	; 0x768c <updateGreenLed>
			updateBlueLed(pwm_blue);
     34a:	80 91 0e 02 	lds	r24, 0x020E
     34e:	0e 94 5a 3b 	call	0x76b4	; 0x76b4 <updateBlueLed>
			setRightSpeed(0);
     352:	80 e0       	ldi	r24, 0x00	; 0
     354:	0e 94 19 27 	call	0x4e32	; 0x4e32 <setRightSpeed>
			setLeftSpeed(0);
     358:	80 e0       	ldi	r24, 0x00	; 0
     35a:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <setLeftSpeed>
			rgbState = 0;
     35e:	10 92 1c 03 	sts	0x031C, r1
			calibrationWritten = 0;
     362:	10 92 69 04 	sts	0x0469, r1
			demoState = 0;
     366:	10 92 50 04 	sts	0x0450, r1

			irCommState = 0;
     36a:	10 92 c6 04 	sts	0x04C6, r1
     36e:	00 91 4c 04 	lds	r16, 0x044C
     372:	72 cf       	rjmp	.-284    	; 0x258 <main+0x7c>

		//if(currentSelector!=6 && currentSelector!=15) {
		//	usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		//}

		switch(currentSelector) {
     374:	8b 30       	cpi	r24, 0x0B	; 11
     376:	09 f4       	brne	.+2      	; 0x37a <main+0x19e>
     378:	c0 c2       	rjmp	.+1408   	; 0x8fa <main+0x71e>
     37a:	8c 30       	cpi	r24, 0x0C	; 12
     37c:	08 f0       	brcs	.+2      	; 0x380 <main+0x1a4>
     37e:	18 c2       	rjmp	.+1072   	; 0x7b0 <main+0x5d4>
     380:	89 30       	cpi	r24, 0x09	; 9
     382:	09 f4       	brne	.+2      	; 0x386 <main+0x1aa>
     384:	3e c2       	rjmp	.+1148   	; 0x802 <main+0x626>
     386:	8a 30       	cpi	r24, 0x0A	; 10
     388:	08 f4       	brcc	.+2      	; 0x38c <main+0x1b0>
     38a:	2f c2       	rjmp	.+1118   	; 0x7ea <main+0x60e>
							break;
					}
					break;

			case 10:// obstacle avoidance with random colors; 4 seconds motion and 10 seconds pause					
					switch(demoState) {
     38c:	80 91 50 04 	lds	r24, 0x0450
     390:	81 30       	cpi	r24, 0x01	; 1
     392:	09 f4       	brne	.+2      	; 0x396 <main+0x1ba>
     394:	79 c7       	rjmp	.+3826   	; 0x1288 <main+0x10ac>
     396:	81 30       	cpi	r24, 0x01	; 1
     398:	08 f0       	brcs	.+2      	; 0x39c <main+0x1c0>
     39a:	53 c4       	rjmp	.+2214   	; 0xc42 <main+0xa66>
						case 0: // get first clock tick and start moving the robot with obstacle avoidance enabled
							demoStartTime = getTime100MicroSec();
     39c:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <getTime100MicroSec>
     3a0:	60 93 54 04 	sts	0x0454, r22
     3a4:	70 93 55 04 	sts	0x0455, r23
     3a8:	80 93 56 04 	sts	0x0456, r24
     3ac:	90 93 57 04 	sts	0x0457, r25
							demoEndTime = getTime100MicroSec();							
     3b0:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <getTime100MicroSec>
     3b4:	60 93 5c 04 	sts	0x045C, r22
     3b8:	70 93 5d 04 	sts	0x045D, r23
     3bc:	80 93 5e 04 	sts	0x045E, r24
     3c0:	90 93 5f 04 	sts	0x045F, r25
							demoStartTime2 = getTime100MicroSec();
     3c4:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <getTime100MicroSec>
     3c8:	60 93 58 04 	sts	0x0458, r22
     3cc:	70 93 59 04 	sts	0x0459, r23
     3d0:	80 93 5a 04 	sts	0x045A, r24
     3d4:	90 93 5b 04 	sts	0x045B, r25
							enableObstacleAvoidance();
     3d8:	0e 94 e7 3a 	call	0x75ce	; 0x75ce <enableObstacleAvoidance>
							setLeftSpeed(20);
     3dc:	84 e1       	ldi	r24, 0x14	; 20
     3de:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <setLeftSpeed>
							setRightSpeed(20);
     3e2:	84 e1       	ldi	r24, 0x14	; 20
     3e4:	0e 94 19 27 	call	0x4e32	; 0x4e32 <setRightSpeed>
							demoState = 1;
     3e8:	20 92 50 04 	sts	0x0450, r2
								demoState = 1;							
							}
							break;
					}	
					
					switch(rgbLedState) {
     3ec:	80 91 6b 04 	lds	r24, 0x046B
     3f0:	81 30       	cpi	r24, 0x01	; 1
     3f2:	09 f4       	brne	.+2      	; 0x3f6 <main+0x21a>
     3f4:	59 c4       	rjmp	.+2226   	; 0xca8 <main+0xacc>
     3f6:	81 30       	cpi	r24, 0x01	; 1
     3f8:	08 f0       	brcs	.+2      	; 0x3fc <main+0x220>
     3fa:	ba c3       	rjmp	.+1908   	; 0xb70 <main+0x994>
						case 0:							
							pwm_red = 255;
     3fc:	10 93 0c 02 	sts	0x020C, r17
							pwm_green = 255;
     400:	10 93 0d 02 	sts	0x020D, r17
							pwm_blue = 255;
     404:	10 93 0e 02 	sts	0x020E, r17
							if((getTime100MicroSec()-demoEndTime) >= (PAUSE_100_MSEC)) {
     408:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <getTime100MicroSec>
     40c:	9b 01       	movw	r18, r22
     40e:	ac 01       	movw	r20, r24
     410:	80 91 5c 04 	lds	r24, 0x045C
     414:	90 91 5d 04 	lds	r25, 0x045D
     418:	a0 91 5e 04 	lds	r26, 0x045E
     41c:	b0 91 5f 04 	lds	r27, 0x045F
     420:	28 1b       	sub	r18, r24
     422:	39 0b       	sbc	r19, r25
     424:	4a 0b       	sbc	r20, r26
     426:	5b 0b       	sbc	r21, r27
     428:	21 3c       	cpi	r18, 0xC1	; 193
     42a:	e3 e0       	ldi	r30, 0x03	; 3
     42c:	3e 07       	cpc	r19, r30
     42e:	e0 e0       	ldi	r30, 0x00	; 0
     430:	4e 07       	cpc	r20, r30
     432:	e0 e0       	ldi	r30, 0x00	; 0
     434:	5e 07       	cpc	r21, r30
     436:	10 f0       	brcs	.+4      	; 0x43c <main+0x260>
     438:	0c 94 58 0b 	jmp	0x16b0	; 0x16b0 <main+0x14d4>
									greenLedState = 0;
								}
								setGreenLed(greenLedState, 1);
								demoEndTime = getTime100MicroSec();											
							}
							if((getTime100MicroSec()-demoStartTime2) >= (PAUSE_2_SEC)) {
     43c:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <getTime100MicroSec>
     440:	9b 01       	movw	r18, r22
     442:	ac 01       	movw	r20, r24
     444:	80 91 58 04 	lds	r24, 0x0458
     448:	90 91 59 04 	lds	r25, 0x0459
     44c:	a0 91 5a 04 	lds	r26, 0x045A
     450:	b0 91 5b 04 	lds	r27, 0x045B
     454:	28 1b       	sub	r18, r24
     456:	39 0b       	sbc	r19, r25
     458:	4a 0b       	sbc	r20, r26
     45a:	5b 0b       	sbc	r21, r27
     45c:	2e 31       	cpi	r18, 0x1E	; 30
     45e:	fb e4       	ldi	r31, 0x4B	; 75
     460:	3f 07       	cpc	r19, r31
     462:	f0 e0       	ldi	r31, 0x00	; 0
     464:	4f 07       	cpc	r20, r31
     466:	f0 e0       	ldi	r31, 0x00	; 0
     468:	5f 07       	cpc	r21, r31
     46a:	10 f0       	brcs	.+4      	; 0x470 <main+0x294>
     46c:	0c 94 4a 0b 	jmp	0x1694	; 0x1694 <main+0x14b8>
								rgbLedState = 1;
								demoStartTime2 = getTime100MicroSec();
							}
							updateRedLed(pwm_red);
     470:	80 91 0c 02 	lds	r24, 0x020C
     474:	0e 94 32 3b 	call	0x7664	; 0x7664 <updateRedLed>
							updateGreenLed(pwm_green);
     478:	80 91 0d 02 	lds	r24, 0x020D
     47c:	0e 94 46 3b 	call	0x768c	; 0x768c <updateGreenLed>
							updateBlueLed(pwm_blue);
     480:	80 91 0e 02 	lds	r24, 0x020E
     484:	0e 94 5a 3b 	call	0x76b4	; 0x76b4 <updateBlueLed>
     488:	80 91 4c 04 	lds	r24, 0x044C
					//usart0Transmit(currentOsccal,1);
					break;

		}

		if(currentSelector!=0) {
     48c:	88 23       	and	r24, r24
     48e:	09 f4       	brne	.+2      	; 0x492 <main+0x2b6>
     490:	23 cf       	rjmp	.-442    	; 0x2d8 <main+0xfc>
			handleMotorsWithSpeedController();  
     492:	0e 94 76 32 	call	0x64ec	; 0x64ec <handleMotorsWithSpeedController>
     496:	80 91 4c 04 	lds	r24, 0x044C
     49a:	1f cf       	rjmp	.-450    	; 0x2da <main+0xfe>
			handleRFCommands();
		//}


		if(calibrateOdomFlag==0) {
			if((getTime100MicroSec()-speedStepCounter) >= SPEED_STEP_DELAY) {
     49c:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <getTime100MicroSec>
     4a0:	9b 01       	movw	r18, r22
     4a2:	ac 01       	movw	r20, r24
     4a4:	60 e0       	ldi	r22, 0x00	; 0
     4a6:	70 e0       	ldi	r23, 0x00	; 0
     4a8:	cb 01       	movw	r24, r22
     4aa:	f0 91 60 04 	lds	r31, 0x0460
     4ae:	e0 91 61 04 	lds	r30, 0x0461
     4b2:	80 90 62 04 	lds	r8, 0x0462
     4b6:	40 90 63 04 	lds	r4, 0x0463
     4ba:	30 90 64 04 	lds	r3, 0x0464
     4be:	50 90 65 04 	lds	r5, 0x0465
     4c2:	60 90 66 04 	lds	r6, 0x0466
     4c6:	70 90 67 04 	lds	r7, 0x0467
     4ca:	b2 2f       	mov	r27, r18
     4cc:	bf 1b       	sub	r27, r31
     4ce:	a1 e0       	ldi	r26, 0x01	; 1
     4d0:	2b 17       	cp	r18, r27
     4d2:	08 f0       	brcs	.+2      	; 0x4d6 <main+0x2fa>
     4d4:	a0 e0       	ldi	r26, 0x00	; 0
     4d6:	f3 2f       	mov	r31, r19
     4d8:	fe 1b       	sub	r31, r30
     4da:	ef 2f       	mov	r30, r31
     4dc:	f1 e0       	ldi	r31, 0x01	; 1
     4de:	3e 17       	cp	r19, r30
     4e0:	08 f0       	brcs	.+2      	; 0x4e4 <main+0x308>
     4e2:	f0 e0       	ldi	r31, 0x00	; 0
     4e4:	9e 2e       	mov	r9, r30
     4e6:	9a 1a       	sub	r9, r26
     4e8:	a9 2d       	mov	r26, r9
     4ea:	99 24       	eor	r9, r9
     4ec:	93 94       	inc	r9
     4ee:	ea 17       	cp	r30, r26
     4f0:	08 f0       	brcs	.+2      	; 0x4f4 <main+0x318>
     4f2:	99 24       	eor	r9, r9
     4f4:	f9 29       	or	r31, r9
     4f6:	e4 2f       	mov	r30, r20
     4f8:	e8 19       	sub	r30, r8
     4fa:	8e 2e       	mov	r8, r30
     4fc:	e1 e0       	ldi	r30, 0x01	; 1
     4fe:	48 15       	cp	r20, r8
     500:	08 f0       	brcs	.+2      	; 0x504 <main+0x328>
     502:	e0 e0       	ldi	r30, 0x00	; 0
     504:	98 2c       	mov	r9, r8
     506:	9f 1a       	sub	r9, r31
     508:	f1 e0       	ldi	r31, 0x01	; 1
     50a:	89 14       	cp	r8, r9
     50c:	08 f0       	brcs	.+2      	; 0x510 <main+0x334>
     50e:	f0 e0       	ldi	r31, 0x00	; 0
     510:	ef 2b       	or	r30, r31
     512:	f5 2f       	mov	r31, r21
     514:	f4 19       	sub	r31, r4
     516:	4f 2e       	mov	r4, r31
     518:	f1 e0       	ldi	r31, 0x01	; 1
     51a:	54 15       	cp	r21, r4
     51c:	08 f0       	brcs	.+2      	; 0x520 <main+0x344>
     51e:	f0 e0       	ldi	r31, 0x00	; 0
     520:	84 2c       	mov	r8, r4
     522:	8e 1a       	sub	r8, r30
     524:	e1 e0       	ldi	r30, 0x01	; 1
     526:	48 14       	cp	r4, r8
     528:	08 f0       	brcs	.+2      	; 0x52c <main+0x350>
     52a:	e0 e0       	ldi	r30, 0x00	; 0
     52c:	fe 2b       	or	r31, r30
     52e:	31 94       	neg	r3
     530:	e1 e0       	ldi	r30, 0x01	; 1
     532:	63 15       	cp	r22, r3
     534:	08 f0       	brcs	.+2      	; 0x538 <main+0x35c>
     536:	e0 e0       	ldi	r30, 0x00	; 0
     538:	43 2c       	mov	r4, r3
     53a:	4f 1a       	sub	r4, r31
     53c:	f1 e0       	ldi	r31, 0x01	; 1
     53e:	34 14       	cp	r3, r4
     540:	08 f0       	brcs	.+2      	; 0x544 <main+0x368>
     542:	f0 e0       	ldi	r31, 0x00	; 0
     544:	ef 2b       	or	r30, r31
     546:	51 94       	neg	r5
     548:	f1 e0       	ldi	r31, 0x01	; 1
     54a:	75 15       	cp	r23, r5
     54c:	08 f0       	brcs	.+2      	; 0x550 <main+0x374>
     54e:	f0 e0       	ldi	r31, 0x00	; 0
     550:	35 2c       	mov	r3, r5
     552:	3e 1a       	sub	r3, r30
     554:	e1 e0       	ldi	r30, 0x01	; 1
     556:	53 14       	cp	r5, r3
     558:	08 f0       	brcs	.+2      	; 0x55c <main+0x380>
     55a:	e0 e0       	ldi	r30, 0x00	; 0
     55c:	fe 2b       	or	r31, r30
     55e:	61 94       	neg	r6
     560:	e1 e0       	ldi	r30, 0x01	; 1
     562:	86 15       	cp	r24, r6
     564:	08 f0       	brcs	.+2      	; 0x568 <main+0x38c>
     566:	e0 e0       	ldi	r30, 0x00	; 0
     568:	96 2d       	mov	r25, r6
     56a:	9f 1b       	sub	r25, r31
     56c:	81 e0       	ldi	r24, 0x01	; 1
     56e:	69 16       	cp	r6, r25
     570:	08 f0       	brcs	.+2      	; 0x574 <main+0x398>
     572:	80 e0       	ldi	r24, 0x00	; 0
     574:	e8 2b       	or	r30, r24
     576:	71 94       	neg	r7
     578:	7e 16       	cp	r7, r30
     57a:	91 f4       	brne	.+36     	; 0x5a0 <main+0x3c4>
     57c:	99 23       	and	r25, r25
     57e:	81 f4       	brne	.+32     	; 0x5a0 <main+0x3c4>
     580:	33 20       	and	r3, r3
     582:	71 f4       	brne	.+28     	; 0x5a0 <main+0x3c4>
     584:	44 20       	and	r4, r4
     586:	61 f4       	brne	.+24     	; 0x5a0 <main+0x3c4>
     588:	88 20       	and	r8, r8
     58a:	51 f4       	brne	.+20     	; 0x5a0 <main+0x3c4>
     58c:	99 20       	and	r9, r9
     58e:	41 f4       	brne	.+16     	; 0x5a0 <main+0x3c4>
     590:	a2 30       	cpi	r26, 0x02	; 2
     592:	30 f4       	brcc	.+12     	; 0x5a0 <main+0x3c4>
     594:	a1 30       	cpi	r26, 0x01	; 1
     596:	09 f0       	breq	.+2      	; 0x59a <main+0x3be>
     598:	84 ce       	rjmp	.-760    	; 0x2a2 <main+0xc6>
     59a:	b0 39       	cpi	r27, 0x90	; 144
     59c:	08 f4       	brcc	.+2      	; 0x5a0 <main+0x3c4>
     59e:	81 ce       	rjmp	.-766    	; 0x2a2 <main+0xc6>
				speedStepCounter = getTime100MicroSec();
     5a0:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <getTime100MicroSec>
     5a4:	9b 01       	movw	r18, r22
     5a6:	ac 01       	movw	r20, r24
     5a8:	60 93 60 04 	sts	0x0460, r22
     5ac:	30 93 61 04 	sts	0x0461, r19
     5b0:	40 93 62 04 	sts	0x0462, r20
     5b4:	50 93 63 04 	sts	0x0463, r21
     5b8:	10 92 64 04 	sts	0x0464, r1
     5bc:	10 92 65 04 	sts	0x0465, r1
     5c0:	10 92 66 04 	sts	0x0466, r1
     5c4:	10 92 67 04 	sts	0x0467, r1

				if(softAccEnabled) {
     5c8:	80 91 68 04 	lds	r24, 0x0468
     5cc:	88 23       	and	r24, r24
     5ce:	09 f4       	brne	.+2      	; 0x5d2 <main+0x3f6>
     5d0:	cb c1       	rjmp	.+918    	; 0x968 <main+0x78c>
					if(pwm_right_desired == 0) {
     5d2:	80 91 f9 02 	lds	r24, 0x02F9
     5d6:	90 91 fa 02 	lds	r25, 0x02FA
     5da:	00 97       	sbiw	r24, 0x00	; 0
     5dc:	09 f4       	brne	.+2      	; 0x5e0 <main+0x404>
     5de:	69 c2       	rjmp	.+1234   	; 0xab2 <main+0x8d6>
						pwm_intermediate_right_desired = 0;
					} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
     5e0:	20 91 fd 02 	lds	r18, 0x02FD
     5e4:	30 91 fe 02 	lds	r19, 0x02FE
     5e8:	28 9f       	mul	r18, r24
     5ea:	a0 01       	movw	r20, r0
     5ec:	29 9f       	mul	r18, r25
     5ee:	50 0d       	add	r21, r0
     5f0:	38 9f       	mul	r19, r24
     5f2:	50 0d       	add	r21, r0
     5f4:	11 24       	eor	r1, r1
     5f6:	57 fd       	sbrc	r21, 7
     5f8:	5c c2       	rjmp	.+1208   	; 0xab2 <main+0x8d6>
						pwm_intermediate_right_desired = 0;
					} else if(pwm_right_desired > pwm_intermediate_right_desired) {
     5fa:	28 17       	cp	r18, r24
     5fc:	39 07       	cpc	r19, r25
     5fe:	14 f0       	brlt	.+4      	; 0x604 <main+0x428>
     600:	0c 94 0a 0b 	jmp	0x1614	; 0x1614 <main+0x1438>
						pwm_intermediate_right_desired += speedStep;
     604:	40 91 17 02 	lds	r20, 0x0217
     608:	24 0f       	add	r18, r20
     60a:	31 1d       	adc	r19, r1
     60c:	30 93 fe 02 	sts	0x02FE, r19
     610:	20 93 fd 02 	sts	0x02FD, r18
						if(pwm_intermediate_right_desired > pwm_right_desired) {
     614:	82 17       	cp	r24, r18
     616:	93 07       	cpc	r25, r19
     618:	24 f4       	brge	.+8      	; 0x622 <main+0x446>
							pwm_intermediate_right_desired = pwm_right_desired;
						}
					} else if(pwm_right_desired < pwm_intermediate_right_desired) {
						pwm_intermediate_right_desired -= speedStep;
						if(pwm_intermediate_right_desired < pwm_right_desired) {
							pwm_intermediate_right_desired = pwm_right_desired;
     61a:	90 93 fe 02 	sts	0x02FE, r25
     61e:	80 93 fd 02 	sts	0x02FD, r24
						}					
					}
	
					if(pwm_left_desired == 0) {
     622:	80 91 fb 02 	lds	r24, 0x02FB
     626:	90 91 fc 02 	lds	r25, 0x02FC
     62a:	00 97       	sbiw	r24, 0x00	; 0
     62c:	09 f4       	brne	.+2      	; 0x630 <main+0x454>
     62e:	3c c2       	rjmp	.+1144   	; 0xaa8 <main+0x8cc>
						pwm_intermediate_left_desired = 0;
					} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
     630:	20 91 ff 02 	lds	r18, 0x02FF
     634:	30 91 00 03 	lds	r19, 0x0300
     638:	28 9f       	mul	r18, r24
     63a:	a0 01       	movw	r20, r0
     63c:	29 9f       	mul	r18, r25
     63e:	50 0d       	add	r21, r0
     640:	38 9f       	mul	r19, r24
     642:	50 0d       	add	r21, r0
     644:	11 24       	eor	r1, r1
     646:	57 fd       	sbrc	r21, 7
     648:	2f c2       	rjmp	.+1118   	; 0xaa8 <main+0x8cc>
						pwm_intermediate_left_desired = 0;
					} else if(pwm_left_desired > pwm_intermediate_left_desired) {
     64a:	28 17       	cp	r18, r24
     64c:	39 07       	cpc	r19, r25
     64e:	0c f0       	brlt	.+2      	; 0x652 <main+0x476>
     650:	f4 c7       	rjmp	.+4072   	; 0x163a <main+0x145e>
						pwm_intermediate_left_desired += speedStep;
     652:	40 91 17 02 	lds	r20, 0x0217
     656:	24 0f       	add	r18, r20
     658:	31 1d       	adc	r19, r1
     65a:	30 93 00 03 	sts	0x0300, r19
     65e:	20 93 ff 02 	sts	0x02FF, r18
						if(pwm_intermediate_left_desired > pwm_left_desired) {
     662:	82 17       	cp	r24, r18
     664:	93 07       	cpc	r25, r19
     666:	0c f0       	brlt	.+2      	; 0x66a <main+0x48e>
     668:	1c ce       	rjmp	.-968    	; 0x2a2 <main+0xc6>
							pwm_intermediate_left_desired = pwm_left_desired;
						}					
					}
				} else {
					pwm_intermediate_right_desired = pwm_right_desired;
					pwm_intermediate_left_desired = pwm_left_desired;
     66a:	90 93 00 03 	sts	0x0300, r25
     66e:	80 93 ff 02 	sts	0x02FF, r24

		//if(currentSelector!=6 && currentSelector!=15) {
		//	usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		//}

		switch(currentSelector) {
     672:	80 91 4c 04 	lds	r24, 0x044C
     676:	87 30       	cpi	r24, 0x07	; 7
     678:	09 f0       	breq	.+2      	; 0x67c <main+0x4a0>
     67a:	18 ce       	rjmp	.-976    	; 0x2ac <main+0xd0>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
     67c:	80 91 50 04 	lds	r24, 0x0450
     680:	82 30       	cpi	r24, 0x02	; 2
     682:	09 f4       	brne	.+2      	; 0x686 <main+0x4aa>
     684:	15 c7       	rjmp	.+3626   	; 0x14b0 <main+0x12d4>
     686:	83 30       	cpi	r24, 0x03	; 3
     688:	08 f0       	brcs	.+2      	; 0x68c <main+0x4b0>
     68a:	18 c2       	rjmp	.+1072   	; 0xabc <main+0x8e0>
     68c:	88 23       	and	r24, r24
     68e:	09 f0       	breq	.+2      	; 0x692 <main+0x4b6>
     690:	32 c6       	rjmp	.+3172   	; 0x12f6 <main+0x111a>
						case 0:	// move around
							turnOffGreenLeds();
     692:	0e 94 0b 3c 	call	0x7816	; 0x7816 <turnOffGreenLeds>
							GREEN_LED0_ON;
     696:	80 91 0b 01 	lds	r24, 0x010B
     69a:	8e 7f       	andi	r24, 0xFE	; 254
     69c:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED1_ON;
							lineFound = 0;
     6a0:	10 92 51 04 	sts	0x0451, r1
							enableObstacleAvoidance();
     6a4:	0e 94 e7 3a 	call	0x75ce	; 0x75ce <enableObstacleAvoidance>
							setRightSpeed(20);
     6a8:	84 e1       	ldi	r24, 0x14	; 20
     6aa:	0e 94 19 27 	call	0x4e32	; 0x4e32 <setRightSpeed>
							setLeftSpeed(20);
     6ae:	84 e1       	ldi	r24, 0x14	; 20
     6b0:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <setLeftSpeed>
							demoEndTime = getTime100MicroSec();
     6b4:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <getTime100MicroSec>
     6b8:	9b 01       	movw	r18, r22
     6ba:	ac 01       	movw	r20, r24
     6bc:	60 93 5c 04 	sts	0x045C, r22
     6c0:	70 93 5d 04 	sts	0x045D, r23
     6c4:	80 93 5e 04 	sts	0x045E, r24
     6c8:	90 93 5f 04 	sts	0x045F, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {
     6cc:	80 91 54 04 	lds	r24, 0x0454
     6d0:	90 91 55 04 	lds	r25, 0x0455
     6d4:	a0 91 56 04 	lds	r26, 0x0456
     6d8:	b0 91 57 04 	lds	r27, 0x0457
     6dc:	28 1b       	sub	r18, r24
     6de:	39 0b       	sbc	r19, r25
     6e0:	4a 0b       	sbc	r20, r26
     6e2:	5b 0b       	sbc	r21, r27
     6e4:	23 33       	cpi	r18, 0x33	; 51
     6e6:	6f ee       	ldi	r22, 0xEF	; 239
     6e8:	36 07       	cpc	r19, r22
     6ea:	62 e0       	ldi	r22, 0x02	; 2
     6ec:	46 07       	cpc	r20, r22
     6ee:	60 e0       	ldi	r22, 0x00	; 0
     6f0:	56 07       	cpc	r21, r22
     6f2:	08 f4       	brcc	.+2      	; 0x6f6 <main+0x51a>
     6f4:	bd ce       	rjmp	.-646    	; 0x470 <main+0x294>

								if(proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {
									outOfLine++;
									if(outOfLine > 250) {
										chargeContact = 0;
										demoState = 1;
     6f6:	20 92 50 04 	sts	0x0450, r2
										break;
     6fa:	ba ce       	rjmp	.-652    	; 0x470 <main+0x294>
			}
		}

		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
     6fc:	0e 94 c4 1e 	call	0x3d88	; 0x3d88 <readBatteryLevel>
             		
			if(currentSelector==4 || currentSelector==5) {
     700:	80 91 4c 04 	lds	r24, 0x044C
     704:	98 2f       	mov	r25, r24
     706:	94 50       	subi	r25, 0x04	; 4
     708:	92 30       	cpi	r25, 0x02	; 2
     70a:	08 f4       	brcc	.+2      	; 0x70e <main+0x532>
     70c:	3a c1       	rjmp	.+628    	; 0x982 <main+0x7a6>
					}
				} else {	// do nothing => all 3 leds turned on

				}

			} else if(currentSelector==7) {
     70e:	87 30       	cpi	r24, 0x07	; 7
     710:	09 f4       	brne	.+2      	; 0x714 <main+0x538>
     712:	62 c1       	rjmp	.+708    	; 0x9d8 <main+0x7fc>

				}

				turnOffLedsTime = getTime100MicroSec();

			} else if(currentSelector==6) {
     714:	86 30       	cpi	r24, 0x06	; 6
     716:	09 f4       	brne	.+2      	; 0x71a <main+0x53e>
     718:	0e c1       	rjmp	.+540    	; 0x936 <main+0x75a>
						rgbState = 0;
					}
				}
			}

			startTime = getTime100MicroSec();
     71a:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <getTime100MicroSec>
     71e:	6b 01       	movw	r12, r22
     720:	7c 01       	movw	r14, r24
     722:	b6 cd       	rjmp	.-1172   	; 0x290 <main+0xb4>

		computeAngle();

		// turn off the rgb leds after one half second in the "charger demo"
		if(currentSelector==7) {
			if((getTime100MicroSec()-turnOffLedsTime) > PAUSE_500_MSEC) {
     724:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <getTime100MicroSec>
     728:	29 81       	ldd	r18, Y+1	; 0x01
     72a:	3a 81       	ldd	r19, Y+2	; 0x02
     72c:	4b 81       	ldd	r20, Y+3	; 0x03
     72e:	5c 81       	ldd	r21, Y+4	; 0x04
     730:	62 1b       	sub	r22, r18
     732:	73 0b       	sbc	r23, r19
     734:	84 0b       	sbc	r24, r20
     736:	95 0b       	sbc	r25, r21
     738:	68 3c       	cpi	r22, 0xC8	; 200
     73a:	32 e1       	ldi	r19, 0x12	; 18
     73c:	73 07       	cpc	r23, r19
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	83 07       	cpc	r24, r19
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	93 07       	cpc	r25, r19
     746:	08 f4       	brcc	.+2      	; 0x74a <main+0x56e>
     748:	94 cd       	rjmp	.-1240   	; 0x272 <main+0x96>
				pwm_red = 255;
     74a:	10 93 0c 02 	sts	0x020C, r17
				pwm_green = 255;
     74e:	10 93 0d 02 	sts	0x020D, r17
				pwm_blue = 255;			
     752:	10 93 0e 02 	sts	0x020E, r17
     756:	8d cd       	rjmp	.-1254   	; 0x272 <main+0x96>

		//if(currentSelector!=6 && currentSelector!=15) {
		//	usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		//}

		switch(currentSelector) {
     758:	85 30       	cpi	r24, 0x05	; 5
     75a:	09 f4       	brne	.+2      	; 0x75e <main+0x582>
     75c:	8e c0       	rjmp	.+284    	; 0x87a <main+0x69e>
     75e:	86 30       	cpi	r24, 0x06	; 6
     760:	08 f4       	brcc	.+2      	; 0x764 <main+0x588>
     762:	66 c0       	rjmp	.+204    	; 0x830 <main+0x654>
					setLeftSpeed(25);
					setRightSpeed(25);
					break;

			case 6:	// robot testing
					switch(menuChoice) {
     764:	80 91 23 04 	lds	r24, 0x0423
     768:	81 30       	cpi	r24, 0x01	; 1
     76a:	09 f4       	brne	.+2      	; 0x76e <main+0x592>
     76c:	fa c2       	rjmp	.+1524   	; 0xd62 <main+0xb86>
     76e:	81 30       	cpi	r24, 0x01	; 1
     770:	08 f0       	brcs	.+2      	; 0x774 <main+0x598>
     772:	39 c2       	rjmp	.+1138   	; 0xbe6 <main+0xa0a>
						case 0:
							setRightSpeed(0);
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	0e 94 19 27 	call	0x4e32	; 0x4e32 <setRightSpeed>
							setLeftSpeed(0);
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <setLeftSpeed>
							turnOffGreenLeds();
     780:	0e 94 0b 3c 	call	0x7816	; 0x7816 <turnOffGreenLeds>
							pwm_red=255;
     784:	10 93 0c 02 	sts	0x020C, r17
							pwm_green=255;
     788:	10 93 0d 02 	sts	0x020D, r17
							pwm_blue=255;
     78c:	10 93 0e 02 	sts	0x020E, r17
							updateRedLed(pwm_red);
     790:	8f ef       	ldi	r24, 0xFF	; 255
     792:	0e 94 32 3b 	call	0x7664	; 0x7664 <updateRedLed>
							updateGreenLed(pwm_green);
     796:	80 91 0d 02 	lds	r24, 0x020D
     79a:	0e 94 46 3b 	call	0x768c	; 0x768c <updateGreenLed>
							updateBlueLed(pwm_blue);
     79e:	80 91 0e 02 	lds	r24, 0x020E
     7a2:	0e 94 5a 3b 	call	0x76b4	; 0x76b4 <updateBlueLed>
							LED_IR1_HIGH;
     7a6:	44 9a       	sbi	0x08, 4	; 8
							LED_IR2_HIGH;
     7a8:	45 9a       	sbi	0x08, 5	; 8
     7aa:	80 91 4c 04 	lds	r24, 0x044C
							break;
     7ae:	91 cd       	rjmp	.-1246   	; 0x2d2 <main+0xf6>

		//if(currentSelector!=6 && currentSelector!=15) {
		//	usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		//}

		switch(currentSelector) {
     7b0:	8d 30       	cpi	r24, 0x0D	; 13
     7b2:	09 f4       	brne	.+2      	; 0x7b6 <main+0x5da>
     7b4:	92 c0       	rjmp	.+292    	; 0x8da <main+0x6fe>
     7b6:	8d 30       	cpi	r24, 0x0D	; 13
     7b8:	08 f4       	brcc	.+2      	; 0x7bc <main+0x5e0>
     7ba:	76 c0       	rjmp	.+236    	; 0x8a8 <main+0x6cc>
     7bc:	8e 30       	cpi	r24, 0x0E	; 14
     7be:	09 f0       	breq	.+2      	; 0x7c2 <main+0x5e6>
     7c0:	88 cd       	rjmp	.-1264   	; 0x2d2 <main+0xf6>
						break;
				}
				break;
			
			case 14: // IR comm receiver
				switch(demoState) {
     7c2:	80 91 50 04 	lds	r24, 0x0450
     7c6:	88 23       	and	r24, r24
     7c8:	09 f0       	breq	.+2      	; 0x7cc <main+0x5f0>
     7ca:	61 c1       	rjmp	.+706    	; 0xa8e <main+0x8b2>
					case 0:
						irCommInit(IRCOMM_MODE_RECEIVE);
     7cc:	81 e0       	ldi	r24, 0x01	; 1
     7ce:	0e 94 38 43 	call	0x8670	; 0x8670 <irCommInit>
						//enableObstacleAvoidance();
						//setLeftSpeed(25);
						//setRightSpeed(25);
						demoState = 1;
     7d2:	20 92 50 04 	sts	0x0450, r2
     7d6:	80 91 4c 04 	lds	r24, 0x044C
						break;
     7da:	7b cd       	rjmp	.-1290   	; 0x2d2 <main+0xf6>
             		enableCliffAvoidance();
					break;
    
			case 3:	// both obstacle and cliff avoidance enabled (the robot does not move untill commands are
					// received from the radio or tv remote)
            		enableObstacleAvoidance();
     7dc:	0e 94 e7 3a 	call	0x75ce	; 0x75ce <enableObstacleAvoidance>
					enableCliffAvoidance();
     7e0:	0e 94 ee 3a 	call	0x75dc	; 0x75dc <enableCliffAvoidance>
     7e4:	80 91 4c 04 	lds	r24, 0x044C
					break;
     7e8:	74 cd       	rjmp	.-1304   	; 0x2d2 <main+0xf6>
					updateBlueLed(pwm_blue);

					break;
  
			case 8:	// motors calibration
					irEnabled = 1;
     7ea:	20 92 12 02 	sts	0x0212, r2
					if(calibrateOdomFlag==1) {
     7ee:	80 91 4e 05 	lds	r24, 0x054E
     7f2:	81 30       	cpi	r24, 0x01	; 1
     7f4:	09 f0       	breq	.+2      	; 0x7f8 <main+0x61c>
     7f6:	4d ce       	rjmp	.-870    	; 0x492 <main+0x2b6>
						handleCalibration();
     7f8:	0e 94 1d 28 	call	0x503a	; 0x503a <handleCalibration>
     7fc:	80 91 4c 04 	lds	r24, 0x044C
     800:	68 cd       	rjmp	.-1328   	; 0x2d2 <main+0xf6>
					break;

			case 9:	// write default calibration values; wait 2 seconds before start writing the calibration values
					// in eeprom in order to avoid rewriting the data involuntarily when moving the selector and passing 
					// through selector position 9
					switch(demoState) {
     802:	80 91 50 04 	lds	r24, 0x0450
     806:	81 30       	cpi	r24, 0x01	; 1
     808:	09 f4       	brne	.+2      	; 0x80c <main+0x630>
     80a:	14 c5       	rjmp	.+2600   	; 0x1234 <main+0x1058>
     80c:	81 30       	cpi	r24, 0x01	; 1
     80e:	08 f0       	brcs	.+2      	; 0x812 <main+0x636>
     810:	09 c2       	rjmp	.+1042   	; 0xc24 <main+0xa48>
						case 0:
							demoStartTime = getTime100MicroSec();
     812:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <getTime100MicroSec>
     816:	60 93 54 04 	sts	0x0454, r22
     81a:	70 93 55 04 	sts	0x0455, r23
     81e:	80 93 56 04 	sts	0x0456, r24
     822:	90 93 57 04 	sts	0x0457, r25
							demoState = 1;
     826:	20 92 50 04 	sts	0x0450, r2
     82a:	80 91 4c 04 	lds	r24, 0x044C
							break;
     82e:	51 cd       	rjmp	.-1374   	; 0x2d2 <main+0xf6>
            		enableObstacleAvoidance();
					enableCliffAvoidance();
					break;
            
			case 4:	// random colors on RGB leds; small green leds turned on
					GREEN_LED0_ON;
     830:	80 91 0b 01 	lds	r24, 0x010B
     834:	8e 7f       	andi	r24, 0xFE	; 254
     836:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED1_ON;
     83a:	80 91 0b 01 	lds	r24, 0x010B
     83e:	8d 7f       	andi	r24, 0xFD	; 253
     840:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED2_ON;
     844:	80 91 0b 01 	lds	r24, 0x010B
     848:	8b 7f       	andi	r24, 0xFB	; 251
     84a:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED3_ON;
     84e:	a3 98       	cbi	0x14, 3	; 20
					GREEN_LED4_ON;
     850:	80 91 0b 01 	lds	r24, 0x010B
     854:	8f 7e       	andi	r24, 0xEF	; 239
     856:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED5_ON;
     85a:	80 91 0b 01 	lds	r24, 0x010B
     85e:	8f 7d       	andi	r24, 0xDF	; 223
     860:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED6_ON;
     864:	80 91 0b 01 	lds	r24, 0x010B
     868:	8f 7b       	andi	r24, 0xBF	; 191
     86a:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED7_ON;
     86e:	80 91 0b 01 	lds	r24, 0x010B
     872:	8f 77       	andi	r24, 0x7F	; 127
     874:	80 93 0b 01 	sts	0x010B, r24
     878:	fb cd       	rjmp	.-1034   	; 0x470 <main+0x294>
					updateBlueLed(pwm_blue);
					break;
             
			case 5:	// random colors on RGB leds; obstacle avoidance enabled; robot start moving automatically
					// (motors speed setting)
					updateRedLed(pwm_red);
     87a:	80 91 0c 02 	lds	r24, 0x020C
     87e:	0e 94 32 3b 	call	0x7664	; 0x7664 <updateRedLed>
					updateGreenLed(pwm_green);
     882:	80 91 0d 02 	lds	r24, 0x020D
     886:	0e 94 46 3b 	call	0x768c	; 0x768c <updateGreenLed>
					updateBlueLed(pwm_blue);
     88a:	80 91 0e 02 	lds	r24, 0x020E
     88e:	0e 94 5a 3b 	call	0x76b4	; 0x76b4 <updateBlueLed>
					enableObstacleAvoidance();
     892:	0e 94 e7 3a 	call	0x75ce	; 0x75ce <enableObstacleAvoidance>
					setLeftSpeed(25);
     896:	89 e1       	ldi	r24, 0x19	; 25
     898:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <setLeftSpeed>
					setRightSpeed(25);
     89c:	89 e1       	ldi	r24, 0x19	; 25
     89e:	0e 94 19 27 	call	0x4e32	; 0x4e32 <setRightSpeed>
     8a2:	80 91 4c 04 	lds	r24, 0x044C
					break;
     8a6:	15 cd       	rjmp	.-1494   	; 0x2d2 <main+0xf6>
						setLeftSpeed(0);
						setRightSpeed(0);
					}
					break;

			case 12:if(leftMotSteps <= 6000) {
     8a8:	60 91 d5 02 	lds	r22, 0x02D5
     8ac:	70 91 d6 02 	lds	r23, 0x02D6
     8b0:	80 91 d7 02 	lds	r24, 0x02D7
     8b4:	90 91 d8 02 	lds	r25, 0x02D8
     8b8:	20 e0       	ldi	r18, 0x00	; 0
     8ba:	30 e8       	ldi	r19, 0x80	; 128
     8bc:	4b eb       	ldi	r20, 0xBB	; 187
     8be:	55 e4       	ldi	r21, 0x45	; 69
     8c0:	0e 94 d9 4f 	call	0x9fb2	; 0x9fb2 <__cmpsf2>
     8c4:	18 16       	cp	r1, r24
     8c6:	4c f1       	brlt	.+82     	; 0x91a <main+0x73e>
						setLeftSpeed(40);
     8c8:	88 e2       	ldi	r24, 0x28	; 40
     8ca:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <setLeftSpeed>
						setRightSpeed(40);
     8ce:	88 e2       	ldi	r24, 0x28	; 40
     8d0:	0e 94 19 27 	call	0x4e32	; 0x4e32 <setRightSpeed>
     8d4:	80 91 4c 04 	lds	r24, 0x044C
     8d8:	fc cc       	rjmp	.-1544   	; 0x2d2 <main+0xf6>
						setRightSpeed(0);
					}
					break;

			case 13: // IR comm transmitter
				switch(demoState) {
     8da:	80 91 50 04 	lds	r24, 0x0450
     8de:	81 30       	cpi	r24, 0x01	; 1
     8e0:	09 f4       	brne	.+2      	; 0x8e4 <main+0x708>
     8e2:	c7 c4       	rjmp	.+2446   	; 0x1272 <main+0x1096>
     8e4:	81 30       	cpi	r24, 0x01	; 1
     8e6:	08 f0       	brcs	.+2      	; 0x8ea <main+0x70e>
     8e8:	2c c1       	rjmp	.+600    	; 0xb42 <main+0x966>
					case 0:
						irCommInit(IRCOMM_MODE_TRANSMIT);
     8ea:	82 e0       	ldi	r24, 0x02	; 2
     8ec:	0e 94 38 43 	call	0x8670	; 0x8670 <irCommInit>
						//enableObstacleAvoidance();
						//setLeftSpeed(15);
						//setRightSpeed(-15);
						demoState = 1;
     8f0:	20 92 50 04 	sts	0x0450, r2
     8f4:	80 91 4c 04 	lds	r24, 0x044C
						break;
     8f8:	ec cc       	rjmp	.-1576   	; 0x2d2 <main+0xf6>
					}
					

					break;

			case 11:if(leftMotSteps <= 5000) {
     8fa:	60 91 d5 02 	lds	r22, 0x02D5
     8fe:	70 91 d6 02 	lds	r23, 0x02D6
     902:	80 91 d7 02 	lds	r24, 0x02D7
     906:	90 91 d8 02 	lds	r25, 0x02D8
     90a:	20 e0       	ldi	r18, 0x00	; 0
     90c:	30 e4       	ldi	r19, 0x40	; 64
     90e:	4c e9       	ldi	r20, 0x9C	; 156
     910:	55 e4       	ldi	r21, 0x45	; 69
     912:	0e 94 d9 4f 	call	0x9fb2	; 0x9fb2 <__cmpsf2>
     916:	18 16       	cp	r1, r24
     918:	bc f6       	brge	.-82     	; 0x8c8 <main+0x6ec>

			case 12:if(leftMotSteps <= 6000) {
						setLeftSpeed(40);
						setRightSpeed(40);
					} else {
						setLeftSpeed(0);
     91a:	80 e0       	ldi	r24, 0x00	; 0
     91c:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <setLeftSpeed>
						setRightSpeed(0);
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	0e 94 19 27 	call	0x4e32	; 0x4e32 <setRightSpeed>
     926:	80 91 4c 04 	lds	r24, 0x044C
     92a:	d3 cc       	rjmp	.-1626   	; 0x2d2 <main+0xf6>
					handleMotorsWithNoController();
					break;
             
			case 1:	// obstacle avoidance enabled (the robot does not move untill commands are 
					// received from the radio or tv remote)
             		enableObstacleAvoidance();
     92c:	0e 94 e7 3a 	call	0x75ce	; 0x75ce <enableObstacleAvoidance>
     930:	80 91 4c 04 	lds	r24, 0x044C
					break;
     934:	ce cc       	rjmp	.-1636   	; 0x2d2 <main+0xf6>
				}

				turnOffLedsTime = getTime100MicroSec();

			} else if(currentSelector==6) {
				if(menuChoice==1 && rfFlags<=1) {
     936:	80 91 23 04 	lds	r24, 0x0423
     93a:	81 30       	cpi	r24, 0x01	; 1
     93c:	09 f0       	breq	.+2      	; 0x940 <main+0x764>
     93e:	ed ce       	rjmp	.-550    	; 0x71a <main+0x53e>
     940:	90 91 17 03 	lds	r25, 0x0317
     944:	92 30       	cpi	r25, 0x02	; 2
     946:	08 f0       	brcs	.+2      	; 0x94a <main+0x76e>
     948:	e8 ce       	rjmp	.-560    	; 0x71a <main+0x53e>
					if(rgbState == 0) {
     94a:	90 91 1c 03 	lds	r25, 0x031C
     94e:	99 23       	and	r25, r25
     950:	09 f0       	breq	.+2      	; 0x954 <main+0x778>
     952:	21 c7       	rjmp	.+3650   	; 0x1796 <main+0x15ba>
						pwm_red = 254;
     954:	4e ef       	ldi	r20, 0xFE	; 254
     956:	40 93 0c 02 	sts	0x020C, r20
						pwm_green = 255;
     95a:	10 93 0d 02 	sts	0x020D, r17
						pwm_blue = 255;
     95e:	10 93 0e 02 	sts	0x020E, r17
						rgbState = 1;
     962:	80 93 1c 03 	sts	0x031C, r24
     966:	d9 ce       	rjmp	.-590    	; 0x71a <main+0x53e>
						if(pwm_intermediate_left_desired < pwm_left_desired) {
							pwm_intermediate_left_desired = pwm_left_desired;
						}					
					}
				} else {
					pwm_intermediate_right_desired = pwm_right_desired;
     968:	80 91 f9 02 	lds	r24, 0x02F9
     96c:	90 91 fa 02 	lds	r25, 0x02FA
     970:	90 93 fe 02 	sts	0x02FE, r25
     974:	80 93 fd 02 	sts	0x02FD, r24
					pwm_intermediate_left_desired = pwm_left_desired;
     978:	80 91 fb 02 	lds	r24, 0x02FB
     97c:	90 91 fc 02 	lds	r25, 0x02FC
     980:	74 ce       	rjmp	.-792    	; 0x66a <main+0x48e>
		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
             		
			if(currentSelector==4 || currentSelector==5) {
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption
     982:	0e 94 ec 52 	call	0xa5d8	; 0xa5d8 <rand>
     986:	6e e1       	ldi	r22, 0x1E	; 30
     988:	70 e0       	ldi	r23, 0x00	; 0
     98a:	0e 94 4e 52 	call	0xa49c	; 0xa49c <__divmodhi4>
     98e:	a8 0e       	add	r10, r24
     990:	b9 1e       	adc	r11, r25
     992:	5f e7       	ldi	r21, 0x7F	; 127
     994:	a5 22       	and	r10, r21
     996:	bb 24       	eor	r11, r11

				switch(rgbState) {
     998:	80 91 1c 03 	lds	r24, 0x031C
     99c:	81 30       	cpi	r24, 0x01	; 1
     99e:	09 f4       	brne	.+2      	; 0x9a2 <main+0x7c6>
     9a0:	e5 c4       	rjmp	.+2506   	; 0x136c <main+0x1190>
     9a2:	81 30       	cpi	r24, 0x01	; 1
     9a4:	08 f0       	brcs	.+2      	; 0x9a8 <main+0x7cc>
     9a6:	9d c4       	rjmp	.+2362   	; 0x12e2 <main+0x1106>
					case 0:
						pwm_red = 255 - currRand;	
     9a8:	8a 2d       	mov	r24, r10
     9aa:	80 95       	com	r24
     9ac:	80 93 0c 02 	sts	0x020C, r24
						rgbState = 1;
     9b0:	20 92 1c 03 	sts	0x031C, r2
						pwm_blue = 255 - currRand;
						rgbState = 0;
						break;
				}
				
				if(currRand<32) {
     9b4:	80 e2       	ldi	r24, 0x20	; 32
     9b6:	a8 16       	cp	r10, r24
     9b8:	b1 04       	cpc	r11, r1
     9ba:	08 f0       	brcs	.+2      	; 0x9be <main+0x7e2>
     9bc:	b9 c1       	rjmp	.+882    	; 0xd30 <main+0xb54>
					if(pwm_green!=255 && pwm_blue!=255) {	// do not turn on all leds
     9be:	80 91 0d 02 	lds	r24, 0x020D
     9c2:	8f 3f       	cpi	r24, 0xFF	; 255
     9c4:	09 f4       	brne	.+2      	; 0x9c8 <main+0x7ec>
     9c6:	a9 ce       	rjmp	.-686    	; 0x71a <main+0x53e>
     9c8:	80 91 0e 02 	lds	r24, 0x020E
     9cc:	8f 3f       	cpi	r24, 0xFF	; 255
     9ce:	09 f4       	brne	.+2      	; 0x9d2 <main+0x7f6>
     9d0:	a4 ce       	rjmp	.-696    	; 0x71a <main+0x53e>
						pwm_red = 255;
     9d2:	10 93 0c 02 	sts	0x020C, r17
     9d6:	a1 ce       	rjmp	.-702    	; 0x71a <main+0x53e>

				}

			} else if(currentSelector==7) {

				srand(TCNT3);
     9d8:	80 91 94 00 	lds	r24, 0x0094
     9dc:	90 91 95 00 	lds	r25, 0x0095
     9e0:	0e 94 f1 52 	call	0xa5e2	; 0xa5e2 <srand>
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption
     9e4:	0e 94 ec 52 	call	0xa5d8	; 0xa5d8 <rand>
     9e8:	6e e1       	ldi	r22, 0x1E	; 30
     9ea:	70 e0       	ldi	r23, 0x00	; 0
     9ec:	0e 94 4e 52 	call	0xa49c	; 0xa49c <__divmodhi4>
     9f0:	4c 01       	movw	r8, r24
     9f2:	8a 0c       	add	r8, r10
     9f4:	9b 1c       	adc	r9, r11
     9f6:	ff e7       	ldi	r31, 0x7F	; 127
     9f8:	8f 22       	and	r8, r31
     9fa:	99 24       	eor	r9, r9

				pwm_red = 255 - currRand;
     9fc:	88 2d       	mov	r24, r8
     9fe:	80 95       	com	r24
     a00:	80 93 0c 02 	sts	0x020C, r24
				
				srand(TCNT3);
     a04:	80 91 94 00 	lds	r24, 0x0094
     a08:	90 91 95 00 	lds	r25, 0x0095
     a0c:	0e 94 f1 52 	call	0xa5e2	; 0xa5e2 <srand>
				currRand = (currRand + rand()%30) % 128;	
     a10:	0e 94 ec 52 	call	0xa5d8	; 0xa5d8 <rand>
     a14:	6e e1       	ldi	r22, 0x1E	; 30
     a16:	70 e0       	ldi	r23, 0x00	; 0
     a18:	0e 94 4e 52 	call	0xa49c	; 0xa49c <__divmodhi4>
     a1c:	6c 01       	movw	r12, r24
     a1e:	c8 0c       	add	r12, r8
     a20:	d9 1c       	adc	r13, r9
     a22:	2f e7       	ldi	r18, 0x7F	; 127
     a24:	c2 22       	and	r12, r18
     a26:	dd 24       	eor	r13, r13
				pwm_green = 255 - currRand;
     a28:	8c 2d       	mov	r24, r12
     a2a:	80 95       	com	r24
     a2c:	80 93 0d 02 	sts	0x020D, r24

				srand(TCNT3);
     a30:	80 91 94 00 	lds	r24, 0x0094
     a34:	90 91 95 00 	lds	r25, 0x0095
     a38:	0e 94 f1 52 	call	0xa5e2	; 0xa5e2 <srand>
				currRand = (currRand + rand()%30) % 128;
     a3c:	0e 94 ec 52 	call	0xa5d8	; 0xa5d8 <rand>
     a40:	6e e1       	ldi	r22, 0x1E	; 30
     a42:	70 e0       	ldi	r23, 0x00	; 0
     a44:	0e 94 4e 52 	call	0xa49c	; 0xa49c <__divmodhi4>
     a48:	5c 01       	movw	r10, r24
     a4a:	ac 0c       	add	r10, r12
     a4c:	bd 1c       	adc	r11, r13
     a4e:	3f e7       	ldi	r19, 0x7F	; 127
     a50:	a3 22       	and	r10, r19
     a52:	bb 24       	eor	r11, r11
				pwm_blue = 255 - currRand;
     a54:	8a 2d       	mov	r24, r10
     a56:	80 95       	com	r24
     a58:	80 93 0e 02 	sts	0x020E, r24

			
				srand(TCNT3);
     a5c:	80 91 94 00 	lds	r24, 0x0094
     a60:	90 91 95 00 	lds	r25, 0x0095
     a64:	0e 94 f1 52 	call	0xa5e2	; 0xa5e2 <srand>
				currRand2 = rand()%128;
     a68:	0e 94 ec 52 	call	0xa5d8	; 0xa5d8 <rand>
     a6c:	60 e8       	ldi	r22, 0x80	; 128
     a6e:	70 e0       	ldi	r23, 0x00	; 0
     a70:	0e 94 4e 52 	call	0xa49c	; 0xa49c <__divmodhi4>
				if(currRand2<32) {
     a74:	80 32       	cpi	r24, 0x20	; 32
     a76:	91 05       	cpc	r25, r1
     a78:	08 f0       	brcs	.+2      	; 0xa7c <main+0x8a0>
     a7a:	6c c1       	rjmp	.+728    	; 0xd54 <main+0xb78>
					pwm_red = 255;
     a7c:	10 93 0c 02 	sts	0x020C, r17
					pwm_blue = 255;
				} else {	// do nothing => all 3 leds turned on

				}

				turnOffLedsTime = getTime100MicroSec();
     a80:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <getTime100MicroSec>
     a84:	69 83       	std	Y+1, r22	; 0x01
     a86:	7a 83       	std	Y+2, r23	; 0x02
     a88:	8b 83       	std	Y+3, r24	; 0x03
     a8a:	9c 83       	std	Y+4, r25	; 0x04
     a8c:	46 ce       	rjmp	.-884    	; 0x71a <main+0x53e>
						break;
				}
				break;
			
			case 14: // IR comm receiver
				switch(demoState) {
     a8e:	81 30       	cpi	r24, 0x01	; 1
     a90:	09 f0       	breq	.+2      	; 0xa94 <main+0x8b8>
     a92:	ff cc       	rjmp	.-1538   	; 0x492 <main+0x2b6>
						//setRightSpeed(25);
						demoState = 1;
						break;

					case 1:
						irCommTasks();
     a94:	0e 94 65 44 	call	0x88ca	; 0x88ca <irCommTasks>
						if(irCommDataAvailable()==1) {
     a98:	0e 94 07 4f 	call	0x9e0e	; 0x9e0e <irCommDataAvailable>
     a9c:	81 30       	cpi	r24, 0x01	; 1
     a9e:	09 f4       	brne	.+2      	; 0xaa2 <main+0x8c6>
     aa0:	5f c6       	rjmp	.+3262   	; 0x1760 <main+0x1584>
							i = irCommReadData();
     aa2:	80 91 4c 04 	lds	r24, 0x044C
     aa6:	15 cc       	rjmp	.-2006   	; 0x2d2 <main+0xf6>
					}
	
					if(pwm_left_desired == 0) {
						pwm_intermediate_left_desired = 0;
					} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
						pwm_intermediate_left_desired = 0;
     aa8:	10 92 00 03 	sts	0x0300, r1
     aac:	10 92 ff 02 	sts	0x02FF, r1
     ab0:	f8 cb       	rjmp	.-2064   	; 0x2a2 <main+0xc6>

				if(softAccEnabled) {
					if(pwm_right_desired == 0) {
						pwm_intermediate_right_desired = 0;
					} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
						pwm_intermediate_right_desired = 0;
     ab2:	10 92 fe 02 	sts	0x02FE, r1
     ab6:	10 92 fd 02 	sts	0x02FD, r1
     aba:	b3 cd       	rjmp	.-1178   	; 0x622 <main+0x446>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
     abc:	84 30       	cpi	r24, 0x04	; 4
     abe:	09 f4       	brne	.+2      	; 0xac2 <main+0x8e6>
     ac0:	b4 c4       	rjmp	.+2408   	; 0x142a <main+0x124e>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	08 f4       	brcc	.+2      	; 0xac8 <main+0x8ec>
     ac6:	6c c4       	rjmp	.+2264   	; 0x13a0 <main+0x11c4>
     ac8:	85 30       	cpi	r24, 0x05	; 5
     aca:	09 f0       	breq	.+2      	; 0xace <main+0x8f2>
     acc:	d1 cc       	rjmp	.-1630   	; 0x470 <main+0x294>
							//pwm_green = 0;
							//pwm_blue = 255;													
							break;

						case 5:	// turn around
							turnOffGreenLeds();
     ace:	0e 94 0b 3c 	call	0x7816	; 0x7816 <turnOffGreenLeds>
							GREEN_LED6_ON;
     ad2:	80 91 0b 01 	lds	r24, 0x010B
     ad6:	8f 7b       	andi	r24, 0xBF	; 191
     ad8:	80 93 0b 01 	sts	0x010B, r24
							GREEN_LED7_ON;
     adc:	80 91 0b 01 	lds	r24, 0x010B
     ae0:	8f 77       	andi	r24, 0x7F	; 127
     ae2:	80 93 0b 01 	sts	0x010B, r24
							demoEndTime = getTime100MicroSec();
     ae6:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <getTime100MicroSec>
     aea:	9b 01       	movw	r18, r22
     aec:	ac 01       	movw	r20, r24
     aee:	60 93 5c 04 	sts	0x045C, r22
     af2:	70 93 5d 04 	sts	0x045D, r23
     af6:	80 93 5e 04 	sts	0x045E, r24
     afa:	90 93 5f 04 	sts	0x045F, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_750_MSEC)) {
     afe:	80 91 54 04 	lds	r24, 0x0454
     b02:	90 91 55 04 	lds	r25, 0x0455
     b06:	a0 91 56 04 	lds	r26, 0x0456
     b0a:	b0 91 57 04 	lds	r27, 0x0457
     b0e:	28 1b       	sub	r18, r24
     b10:	39 0b       	sbc	r19, r25
     b12:	4a 0b       	sbc	r20, r26
     b14:	5b 0b       	sbc	r21, r27
     b16:	2b 32       	cpi	r18, 0x2B	; 43
     b18:	9c e1       	ldi	r25, 0x1C	; 28
     b1a:	39 07       	cpc	r19, r25
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	49 07       	cpc	r20, r25
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	59 07       	cpc	r21, r25
     b24:	08 f4       	brcc	.+2      	; 0xb28 <main+0x94c>
     b26:	a4 cc       	rjmp	.-1720   	; 0x470 <main+0x294>
								demoStartTime = getTime100MicroSec();
     b28:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <getTime100MicroSec>
     b2c:	60 93 54 04 	sts	0x0454, r22
     b30:	70 93 55 04 	sts	0x0455, r23
     b34:	80 93 56 04 	sts	0x0456, r24
     b38:	90 93 57 04 	sts	0x0457, r25
								demoState = 0;							
     b3c:	10 92 50 04 	sts	0x0450, r1
     b40:	97 cc       	rjmp	.-1746   	; 0x470 <main+0x294>
						setRightSpeed(0);
					}
					break;

			case 13: // IR comm transmitter
				switch(demoState) {
     b42:	82 30       	cpi	r24, 0x02	; 2
     b44:	09 f0       	breq	.+2      	; 0xb48 <main+0x96c>
     b46:	a5 cc       	rjmp	.-1718   	; 0x492 <main+0x2b6>
						//irCommSendData(irCommRxByteExpected, 0xFF);												
						demoState = 2;
						break;

					case 2:
						irCommTasks();
     b48:	0e 94 65 44 	call	0x88ca	; 0x88ca <irCommTasks>
						if(irCommDataSent()==1) {
     b4c:	0e 94 ff 4e 	call	0x9dfe	; 0x9dfe <irCommDataSent>
     b50:	81 30       	cpi	r24, 0x01	; 1
     b52:	09 f0       	breq	.+2      	; 0xb56 <main+0x97a>
     b54:	a6 cf       	rjmp	.-180    	; 0xaa2 <main+0x8c6>
							demoState = 1;
     b56:	80 93 50 04 	sts	0x0450, r24
							//setGreenLed(irCommRxByteExpected, 1);						
							//irCommRxByteExpected++;
							//if(irCommRxByteExpected==8) {
							//	irCommRxByteExpected=0;
							//}
							if(irCommRxByteExpected<255) {
     b5a:	80 91 fc 04 	lds	r24, 0x04FC
     b5e:	8f 3f       	cpi	r24, 0xFF	; 255
     b60:	09 f4       	brne	.+2      	; 0xb64 <main+0x988>
     b62:	32 c6       	rjmp	.+3172   	; 0x17c8 <main+0x15ec>
								irCommRxByteExpected++;
     b64:	8f 5f       	subi	r24, 0xFF	; 255
     b66:	80 93 fc 04 	sts	0x04FC, r24
     b6a:	80 91 4c 04 	lds	r24, 0x044C
     b6e:	b1 cb       	rjmp	.-2206   	; 0x2d2 <main+0xf6>
								demoState = 1;							
							}
							break;
					}	
					
					switch(rgbLedState) {
     b70:	82 30       	cpi	r24, 0x02	; 2
     b72:	09 f0       	breq	.+2      	; 0xb76 <main+0x99a>
     b74:	96 cf       	rjmp	.-212    	; 0xaa2 <main+0x8c6>
							updateBlueLed(pwm_blue);
							rgbLedState = 2;
							break;

						case 2:
							if((getTime100MicroSec()-demoStartTime2) >= (PAUSE_500_MSEC)) {
     b76:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <getTime100MicroSec>
     b7a:	9b 01       	movw	r18, r22
     b7c:	ac 01       	movw	r20, r24
     b7e:	80 91 58 04 	lds	r24, 0x0458
     b82:	90 91 59 04 	lds	r25, 0x0459
     b86:	a0 91 5a 04 	lds	r26, 0x045A
     b8a:	b0 91 5b 04 	lds	r27, 0x045B
     b8e:	28 1b       	sub	r18, r24
     b90:	39 0b       	sbc	r19, r25
     b92:	4a 0b       	sbc	r20, r26
     b94:	5b 0b       	sbc	r21, r27
     b96:	27 3c       	cpi	r18, 0xC7	; 199
     b98:	62 e1       	ldi	r22, 0x12	; 18
     b9a:	36 07       	cpc	r19, r22
     b9c:	60 e0       	ldi	r22, 0x00	; 0
     b9e:	46 07       	cpc	r20, r22
     ba0:	60 e0       	ldi	r22, 0x00	; 0
     ba2:	56 07       	cpc	r21, r22
     ba4:	08 f4       	brcc	.+2      	; 0xba8 <main+0x9cc>
     ba6:	7d cf       	rjmp	.-262    	; 0xaa2 <main+0x8c6>
								rgbLedState = 0;
     ba8:	10 92 6b 04 	sts	0x046B, r1
								demoStartTime2 = getTime100MicroSec();
     bac:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <getTime100MicroSec>
     bb0:	60 93 58 04 	sts	0x0458, r22
     bb4:	70 93 59 04 	sts	0x0459, r23
     bb8:	80 93 5a 04 	sts	0x045A, r24
     bbc:	90 93 5b 04 	sts	0x045B, r25
								demoEndTime = getTime100MicroSec();
     bc0:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <getTime100MicroSec>
     bc4:	60 93 5c 04 	sts	0x045C, r22
     bc8:	70 93 5d 04 	sts	0x045D, r23
     bcc:	80 93 5e 04 	sts	0x045E, r24
     bd0:	90 93 5f 04 	sts	0x045F, r25
								greenLedState = 0;
     bd4:	10 92 6a 04 	sts	0x046A, r1
								setGreenLed(greenLedState, 1);
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	61 e0       	ldi	r22, 0x01	; 1
     bdc:	0e 94 6e 3b 	call	0x76dc	; 0x76dc <setGreenLed>
     be0:	80 91 4c 04 	lds	r24, 0x044C
     be4:	76 cb       	rjmp	.-2324   	; 0x2d2 <main+0xf6>
					setLeftSpeed(25);
					setRightSpeed(25);
					break;

			case 6:	// robot testing
					switch(menuChoice) {
     be6:	82 30       	cpi	r24, 0x02	; 2
     be8:	09 f0       	breq	.+2      	; 0xbec <main+0xa10>
     bea:	53 cc       	rjmp	.-1882   	; 0x492 <main+0x2b6>
							}

							break;

						case 2:	// address writing in eeprom
							if(addressReceived) {
     bec:	80 91 24 04 	lds	r24, 0x0424
     bf0:	88 23       	and	r24, r24
     bf2:	09 f4       	brne	.+2      	; 0xbf6 <main+0xa1a>
     bf4:	4e cc       	rjmp	.-1892   	; 0x492 <main+0x2b6>
								turnOnGreenLeds();
     bf6:	0e 94 24 3c 	call	0x7848	; 0x7848 <turnOnGreenLeds>
								eeprom_write_word((uint16_t*)4094, rfAddress);
     bfa:	60 91 15 03 	lds	r22, 0x0315
     bfe:	70 91 16 03 	lds	r23, 0x0316
     c02:	8e ef       	ldi	r24, 0xFE	; 254
     c04:	9f e0       	ldi	r25, 0x0F	; 15
     c06:	0e 94 57 53 	call	0xa6ae	; 0xa6ae <__eewr_word_m2560>
								turnOffGreenLeds();
     c0a:	0e 94 0b 3c 	call	0x7816	; 0x7816 <turnOffGreenLeds>
								usart0Transmit(0xAA, 1);	// successfully written
     c0e:	8a ea       	ldi	r24, 0xAA	; 170
     c10:	61 e0       	ldi	r22, 0x01	; 1
     c12:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
								addressReceived = 0;
     c16:	10 92 24 04 	sts	0x0424, r1
								menuChoice = 0;
     c1a:	10 92 23 04 	sts	0x0423, r1
     c1e:	80 91 4c 04 	lds	r24, 0x044C
     c22:	57 cb       	rjmp	.-2386   	; 0x2d2 <main+0xf6>
					break;

			case 9:	// write default calibration values; wait 2 seconds before start writing the calibration values
					// in eeprom in order to avoid rewriting the data involuntarily when moving the selector and passing 
					// through selector position 9
					switch(demoState) {
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	09 f0       	breq	.+2      	; 0xc2a <main+0xa4e>
     c28:	34 cc       	rjmp	.-1944   	; 0x492 <main+0x2b6>
								demoState = 2;
							}
							break;						

						case 2:
							if(!calibrationWritten) {
     c2a:	80 91 69 04 	lds	r24, 0x0469
     c2e:	88 23       	and	r24, r24
     c30:	09 f0       	breq	.+2      	; 0xc34 <main+0xa58>
     c32:	2f cc       	rjmp	.-1954   	; 0x492 <main+0x2b6>
								calibrationWritten = 1;
     c34:	20 92 69 04 	sts	0x0469, r2
								writeDefaultCalibration();
     c38:	0e 94 59 35 	call	0x6ab2	; 0x6ab2 <writeDefaultCalibration>
     c3c:	80 91 4c 04 	lds	r24, 0x044C
     c40:	48 cb       	rjmp	.-2416   	; 0x2d2 <main+0xf6>
							break;
					}
					break;

			case 10:// obstacle avoidance with random colors; 4 seconds motion and 10 seconds pause					
					switch(demoState) {
     c42:	82 30       	cpi	r24, 0x02	; 2
     c44:	09 f0       	breq	.+2      	; 0xc48 <main+0xa6c>
     c46:	d2 cb       	rjmp	.-2140   	; 0x3ec <main+0x210>
								demoState = 2;							
							}
							break;

						case 2: // pause							
							if((getTime100MicroSec()-demoStartTime) >= (PAUSE_10_SEC)) {
     c48:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <getTime100MicroSec>
     c4c:	9b 01       	movw	r18, r22
     c4e:	ac 01       	movw	r20, r24
     c50:	80 91 54 04 	lds	r24, 0x0454
     c54:	90 91 55 04 	lds	r25, 0x0455
     c58:	a0 91 56 04 	lds	r26, 0x0456
     c5c:	b0 91 57 04 	lds	r27, 0x0457
     c60:	28 1b       	sub	r18, r24
     c62:	39 0b       	sbc	r19, r25
     c64:	4a 0b       	sbc	r20, r26
     c66:	5b 0b       	sbc	r21, r27
     c68:	2a 39       	cpi	r18, 0x9A	; 154
     c6a:	97 e7       	ldi	r25, 0x77	; 119
     c6c:	39 07       	cpc	r19, r25
     c6e:	91 e0       	ldi	r25, 0x01	; 1
     c70:	49 07       	cpc	r20, r25
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	59 07       	cpc	r21, r25
     c76:	08 f4       	brcc	.+2      	; 0xc7a <main+0xa9e>
     c78:	b9 cb       	rjmp	.-2190   	; 0x3ec <main+0x210>
								setRightSpeed(20);
     c7a:	84 e1       	ldi	r24, 0x14	; 20
     c7c:	0e 94 19 27 	call	0x4e32	; 0x4e32 <setRightSpeed>
								setLeftSpeed(20);								
     c80:	84 e1       	ldi	r24, 0x14	; 20
     c82:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <setLeftSpeed>
								demoStartTime = getTime100MicroSec();								
     c86:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <getTime100MicroSec>
     c8a:	60 93 54 04 	sts	0x0454, r22
     c8e:	70 93 55 04 	sts	0x0455, r23
     c92:	80 93 56 04 	sts	0x0456, r24
     c96:	90 93 57 04 	sts	0x0457, r25
								demoState = 1;							
     c9a:	20 92 50 04 	sts	0x0450, r2
							}
							break;
					}	
					
					switch(rgbLedState) {
     c9e:	80 91 6b 04 	lds	r24, 0x046B
     ca2:	81 30       	cpi	r24, 0x01	; 1
     ca4:	09 f0       	breq	.+2      	; 0xca8 <main+0xacc>
     ca6:	a7 cb       	rjmp	.-2226   	; 0x3f6 <main+0x21a>
							updateGreenLed(pwm_green);
							updateBlueLed(pwm_blue);
							break;

						case 1:		
							turnOffGreenLeds();					
     ca8:	0e 94 0b 3c 	call	0x7816	; 0x7816 <turnOffGreenLeds>
							currRand = rand()% 128;	// 0 to 255 is the maximum, we use 0 to 127 to get brighter colors
     cac:	0e 94 ec 52 	call	0xa5d8	; 0xa5d8 <rand>
     cb0:	60 e8       	ldi	r22, 0x80	; 128
     cb2:	70 e0       	ldi	r23, 0x00	; 0
     cb4:	0e 94 4e 52 	call	0xa49c	; 0xa49c <__divmodhi4>
							if(currRand > 95) {
     cb8:	80 36       	cpi	r24, 0x60	; 96
     cba:	91 05       	cpc	r25, r1
     cbc:	08 f4       	brcc	.+2      	; 0xcc0 <main+0xae4>
     cbe:	a7 c4       	rjmp	.+2382   	; 0x160e <main+0x1432>
								pwm_red = 255;
     cc0:	10 93 0c 02 	sts	0x020C, r17
							} else {
								pwm_red = currRand;
							}

							currRand = rand()% 128;
     cc4:	0e 94 ec 52 	call	0xa5d8	; 0xa5d8 <rand>
     cc8:	60 e8       	ldi	r22, 0x80	; 128
     cca:	70 e0       	ldi	r23, 0x00	; 0
     ccc:	0e 94 4e 52 	call	0xa49c	; 0xa49c <__divmodhi4>
							if(currRand > 95) {
     cd0:	80 36       	cpi	r24, 0x60	; 96
     cd2:	91 05       	cpc	r25, r1
     cd4:	08 f4       	brcc	.+2      	; 0xcd8 <main+0xafc>
     cd6:	98 c4       	rjmp	.+2352   	; 0x1608 <main+0x142c>
								pwm_green = 255;
     cd8:	10 93 0d 02 	sts	0x020D, r17
							} else {
								pwm_green = currRand;
							}

							currRand = rand()% 128;
     cdc:	0e 94 ec 52 	call	0xa5d8	; 0xa5d8 <rand>
     ce0:	60 e8       	ldi	r22, 0x80	; 128
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	0e 94 4e 52 	call	0xa49c	; 0xa49c <__divmodhi4>
							if(currRand > 95) {
     ce8:	80 36       	cpi	r24, 0x60	; 96
     cea:	91 05       	cpc	r25, r1
     cec:	08 f4       	brcc	.+2      	; 0xcf0 <main+0xb14>
     cee:	89 c4       	rjmp	.+2322   	; 0x1602 <main+0x1426>
								pwm_blue = 255;
     cf0:	10 93 0e 02 	sts	0x020E, r17
							} else {
								pwm_blue = currRand;
							}

							currRand = rand()% 200;
     cf4:	0e 94 ec 52 	call	0xa5d8	; 0xa5d8 <rand>
     cf8:	68 ec       	ldi	r22, 0xC8	; 200
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	0e 94 4e 52 	call	0xa49c	; 0xa49c <__divmodhi4>
     d00:	5c 01       	movw	r10, r24
							if(currRand<50) {
     d02:	82 33       	cpi	r24, 0x32	; 50
     d04:	91 05       	cpc	r25, r1
     d06:	08 f0       	brcs	.+2      	; 0xd0a <main+0xb2e>
     d08:	73 c4       	rjmp	.+2278   	; 0x15f0 <main+0x1414>
								pwm_red = 255;
     d0a:	10 93 0c 02 	sts	0x020C, r17
     d0e:	8f ef       	ldi	r24, 0xFF	; 255
							} else if(currRand<100) {
								pwm_green = 255;
							} else if (currRand<150) {	
								pwm_blue = 255;
							}
							updateRedLed(pwm_red);
     d10:	0e 94 32 3b 	call	0x7664	; 0x7664 <updateRedLed>
							updateGreenLed(pwm_green);
     d14:	80 91 0d 02 	lds	r24, 0x020D
     d18:	0e 94 46 3b 	call	0x768c	; 0x768c <updateGreenLed>
							updateBlueLed(pwm_blue);
     d1c:	80 91 0e 02 	lds	r24, 0x020E
     d20:	0e 94 5a 3b 	call	0x76b4	; 0x76b4 <updateBlueLed>
							rgbLedState = 2;
     d24:	52 e0       	ldi	r21, 0x02	; 2
     d26:	50 93 6b 04 	sts	0x046B, r21
     d2a:	80 91 4c 04 	lds	r24, 0x044C
							break;
     d2e:	d1 ca       	rjmp	.-2654   	; 0x2d2 <main+0xf6>
				
				if(currRand<32) {
					if(pwm_green!=255 && pwm_blue!=255) {	// do not turn on all leds
						pwm_red = 255;
					}
				} else if(currRand<64) {
     d30:	90 e4       	ldi	r25, 0x40	; 64
     d32:	a9 16       	cp	r10, r25
     d34:	b1 04       	cpc	r11, r1
     d36:	08 f0       	brcs	.+2      	; 0xd3a <main+0xb5e>
     d38:	21 c3       	rjmp	.+1602   	; 0x137c <main+0x11a0>
					if(pwm_red!=255 && pwm_blue!=255) {
     d3a:	80 91 0c 02 	lds	r24, 0x020C
     d3e:	8f 3f       	cpi	r24, 0xFF	; 255
     d40:	09 f4       	brne	.+2      	; 0xd44 <main+0xb68>
     d42:	eb cc       	rjmp	.-1578   	; 0x71a <main+0x53e>
     d44:	80 91 0e 02 	lds	r24, 0x020E
     d48:	8f 3f       	cpi	r24, 0xFF	; 255
     d4a:	09 f4       	brne	.+2      	; 0xd4e <main+0xb72>
     d4c:	e6 cc       	rjmp	.-1588   	; 0x71a <main+0x53e>
						pwm_green = 255;
     d4e:	10 93 0d 02 	sts	0x020D, r17
     d52:	e3 cc       	rjmp	.-1594   	; 0x71a <main+0x53e>
			
				srand(TCNT3);
				currRand2 = rand()%128;
				if(currRand2<32) {
					pwm_red = 255;
				} else if(currRand2<64) {
     d54:	80 34       	cpi	r24, 0x40	; 64
     d56:	91 05       	cpc	r25, r1
     d58:	08 f0       	brcs	.+2      	; 0xd5c <main+0xb80>
     d5a:	27 c4       	rjmp	.+2126   	; 0x15aa <main+0x13ce>
					pwm_green = 255;
     d5c:	10 93 0d 02 	sts	0x020D, r17
     d60:	8f ce       	rjmp	.-738    	; 0xa80 <main+0x8a4>
							break;

						case 1:	// send sensors data and activate actuators
							//setRightSpeed(20);
							//setLeftSpeed(20);
							turnOnGreenLeds();
     d62:	0e 94 24 3c 	call	0x7848	; 0x7848 <turnOnGreenLeds>
							updateRedLed(pwm_red);
     d66:	80 91 0c 02 	lds	r24, 0x020C
     d6a:	0e 94 32 3b 	call	0x7664	; 0x7664 <updateRedLed>
							updateGreenLed(pwm_green);
     d6e:	80 91 0d 02 	lds	r24, 0x020D
     d72:	0e 94 46 3b 	call	0x768c	; 0x768c <updateGreenLed>
							updateBlueLed(pwm_blue);
     d76:	80 91 0e 02 	lds	r24, 0x020E
     d7a:	0e 94 5a 3b 	call	0x76b4	; 0x76b4 <updateBlueLed>
							LED_IR1_LOW;
     d7e:	44 98       	cbi	0x08, 4	; 8
							LED_IR2_LOW;
     d80:	45 98       	cbi	0x08, 5	; 8
							
							if(getDataNow) {
     d82:	80 91 26 04 	lds	r24, 0x0426
     d86:	88 23       	and	r24, r24
     d88:	09 f4       	brne	.+2      	; 0xd8c <main+0xbb0>
     d8a:	8b ce       	rjmp	.-746    	; 0xaa2 <main+0x8c6>
								getDataNow = 0;	
     d8c:	10 92 26 04 	sts	0x0426, r1
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     d90:	80 91 59 02 	lds	r24, 0x0259
     d94:	61 e0       	ldi	r22, 0x01	; 1
     d96:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     d9a:	80 91 5a 02 	lds	r24, 0x025A
     d9e:	61 e0       	ldi	r22, 0x01	; 1
     da0:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     da4:	80 91 29 02 	lds	r24, 0x0229
     da8:	90 91 2a 02 	lds	r25, 0x022A
     dac:	61 e0       	ldi	r22, 0x01	; 1
     dae:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     db2:	80 91 29 02 	lds	r24, 0x0229
     db6:	90 91 2a 02 	lds	r25, 0x022A
     dba:	89 2f       	mov	r24, r25
     dbc:	61 e0       	ldi	r22, 0x01	; 1
     dbe:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     dc2:	80 91 5b 02 	lds	r24, 0x025B
     dc6:	61 e0       	ldi	r22, 0x01	; 1
     dc8:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     dcc:	80 91 5c 02 	lds	r24, 0x025C
     dd0:	61 e0       	ldi	r22, 0x01	; 1
     dd2:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     dd6:	80 91 2d 02 	lds	r24, 0x022D
     dda:	90 91 2e 02 	lds	r25, 0x022E
     dde:	61 e0       	ldi	r22, 0x01	; 1
     de0:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     de4:	80 91 2d 02 	lds	r24, 0x022D
     de8:	90 91 2e 02 	lds	r25, 0x022E
     dec:	89 2f       	mov	r24, r25
     dee:	61 e0       	ldi	r22, 0x01	; 1
     df0:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     df4:	80 91 5d 02 	lds	r24, 0x025D
     df8:	61 e0       	ldi	r22, 0x01	; 1
     dfa:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     dfe:	80 91 5e 02 	lds	r24, 0x025E
     e02:	61 e0       	ldi	r22, 0x01	; 1
     e04:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     e08:	80 91 31 02 	lds	r24, 0x0231
     e0c:	90 91 32 02 	lds	r25, 0x0232
     e10:	61 e0       	ldi	r22, 0x01	; 1
     e12:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     e16:	80 91 31 02 	lds	r24, 0x0231
     e1a:	90 91 32 02 	lds	r25, 0x0232
     e1e:	89 2f       	mov	r24, r25
     e20:	61 e0       	ldi	r22, 0x01	; 1
     e22:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     e26:	80 91 5f 02 	lds	r24, 0x025F
     e2a:	61 e0       	ldi	r22, 0x01	; 1
     e2c:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     e30:	80 91 60 02 	lds	r24, 0x0260
     e34:	61 e0       	ldi	r22, 0x01	; 1
     e36:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     e3a:	80 91 35 02 	lds	r24, 0x0235
     e3e:	90 91 36 02 	lds	r25, 0x0236
     e42:	61 e0       	ldi	r22, 0x01	; 1
     e44:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     e48:	80 91 35 02 	lds	r24, 0x0235
     e4c:	90 91 36 02 	lds	r25, 0x0236
     e50:	89 2f       	mov	r24, r25
     e52:	61 e0       	ldi	r22, 0x01	; 1
     e54:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     e58:	80 91 61 02 	lds	r24, 0x0261
     e5c:	61 e0       	ldi	r22, 0x01	; 1
     e5e:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     e62:	80 91 62 02 	lds	r24, 0x0262
     e66:	61 e0       	ldi	r22, 0x01	; 1
     e68:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     e6c:	80 91 39 02 	lds	r24, 0x0239
     e70:	90 91 3a 02 	lds	r25, 0x023A
     e74:	61 e0       	ldi	r22, 0x01	; 1
     e76:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     e7a:	80 91 39 02 	lds	r24, 0x0239
     e7e:	90 91 3a 02 	lds	r25, 0x023A
     e82:	89 2f       	mov	r24, r25
     e84:	61 e0       	ldi	r22, 0x01	; 1
     e86:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     e8a:	80 91 63 02 	lds	r24, 0x0263
     e8e:	61 e0       	ldi	r22, 0x01	; 1
     e90:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     e94:	80 91 64 02 	lds	r24, 0x0264
     e98:	61 e0       	ldi	r22, 0x01	; 1
     e9a:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     e9e:	80 91 3d 02 	lds	r24, 0x023D
     ea2:	90 91 3e 02 	lds	r25, 0x023E
     ea6:	61 e0       	ldi	r22, 0x01	; 1
     ea8:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     eac:	80 91 3d 02 	lds	r24, 0x023D
     eb0:	90 91 3e 02 	lds	r25, 0x023E
     eb4:	89 2f       	mov	r24, r25
     eb6:	61 e0       	ldi	r22, 0x01	; 1
     eb8:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     ebc:	80 91 65 02 	lds	r24, 0x0265
     ec0:	61 e0       	ldi	r22, 0x01	; 1
     ec2:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     ec6:	80 91 66 02 	lds	r24, 0x0266
     eca:	61 e0       	ldi	r22, 0x01	; 1
     ecc:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     ed0:	80 91 41 02 	lds	r24, 0x0241
     ed4:	90 91 42 02 	lds	r25, 0x0242
     ed8:	61 e0       	ldi	r22, 0x01	; 1
     eda:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     ede:	80 91 41 02 	lds	r24, 0x0241
     ee2:	90 91 42 02 	lds	r25, 0x0242
     ee6:	89 2f       	mov	r24, r25
     ee8:	61 e0       	ldi	r22, 0x01	; 1
     eea:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     eee:	80 91 67 02 	lds	r24, 0x0267
     ef2:	61 e0       	ldi	r22, 0x01	; 1
     ef4:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     ef8:	80 91 68 02 	lds	r24, 0x0268
     efc:	61 e0       	ldi	r22, 0x01	; 1
     efe:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     f02:	80 91 45 02 	lds	r24, 0x0245
     f06:	90 91 46 02 	lds	r25, 0x0246
     f0a:	61 e0       	ldi	r22, 0x01	; 1
     f0c:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     f10:	80 91 45 02 	lds	r24, 0x0245
     f14:	90 91 46 02 	lds	r25, 0x0246
     f18:	89 2f       	mov	r24, r25
     f1a:	61 e0       	ldi	r22, 0x01	; 1
     f1c:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     f20:	80 91 69 02 	lds	r24, 0x0269
     f24:	61 e0       	ldi	r22, 0x01	; 1
     f26:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     f2a:	80 91 6a 02 	lds	r24, 0x026A
     f2e:	61 e0       	ldi	r22, 0x01	; 1
     f30:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     f34:	80 91 49 02 	lds	r24, 0x0249
     f38:	90 91 4a 02 	lds	r25, 0x024A
     f3c:	61 e0       	ldi	r22, 0x01	; 1
     f3e:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     f42:	80 91 49 02 	lds	r24, 0x0249
     f46:	90 91 4a 02 	lds	r25, 0x024A
     f4a:	89 2f       	mov	r24, r25
     f4c:	61 e0       	ldi	r22, 0x01	; 1
     f4e:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     f52:	80 91 6b 02 	lds	r24, 0x026B
     f56:	61 e0       	ldi	r22, 0x01	; 1
     f58:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     f5c:	80 91 6c 02 	lds	r24, 0x026C
     f60:	61 e0       	ldi	r22, 0x01	; 1
     f62:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     f66:	80 91 4d 02 	lds	r24, 0x024D
     f6a:	90 91 4e 02 	lds	r25, 0x024E
     f6e:	61 e0       	ldi	r22, 0x01	; 1
     f70:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     f74:	80 91 4d 02 	lds	r24, 0x024D
     f78:	90 91 4e 02 	lds	r25, 0x024E
     f7c:	89 2f       	mov	r24, r25
     f7e:	61 e0       	ldi	r22, 0x01	; 1
     f80:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     f84:	80 91 6d 02 	lds	r24, 0x026D
     f88:	61 e0       	ldi	r22, 0x01	; 1
     f8a:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     f8e:	80 91 6e 02 	lds	r24, 0x026E
     f92:	61 e0       	ldi	r22, 0x01	; 1
     f94:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     f98:	80 91 51 02 	lds	r24, 0x0251
     f9c:	90 91 52 02 	lds	r25, 0x0252
     fa0:	61 e0       	ldi	r22, 0x01	; 1
     fa2:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     fa6:	80 91 51 02 	lds	r24, 0x0251
     faa:	90 91 52 02 	lds	r25, 0x0252
     fae:	89 2f       	mov	r24, r25
     fb0:	61 e0       	ldi	r22, 0x01	; 1
     fb2:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     fb6:	80 91 6f 02 	lds	r24, 0x026F
     fba:	61 e0       	ldi	r22, 0x01	; 1
     fbc:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     fc0:	80 91 70 02 	lds	r24, 0x0270
     fc4:	61 e0       	ldi	r22, 0x01	; 1
     fc6:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     fca:	80 91 55 02 	lds	r24, 0x0255
     fce:	90 91 56 02 	lds	r25, 0x0256
     fd2:	61 e0       	ldi	r22, 0x01	; 1
     fd4:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     fd8:	80 91 55 02 	lds	r24, 0x0255
     fdc:	90 91 56 02 	lds	r25, 0x0256
     fe0:	89 2f       	mov	r24, r25
     fe2:	61 e0       	ldi	r22, 0x01	; 1
     fe4:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
								}
								usart0Transmit(accX&0xFF,1);
     fe8:	80 91 2c 04 	lds	r24, 0x042C
     fec:	61 e0       	ldi	r22, 0x01	; 1
     fee:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
								usart0Transmit(accX>>8,1);
     ff2:	80 91 2d 04 	lds	r24, 0x042D
     ff6:	61 e0       	ldi	r22, 0x01	; 1
     ff8:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
								usart0Transmit(accY&0xFF,1);
     ffc:	80 91 2e 04 	lds	r24, 0x042E
    1000:	61 e0       	ldi	r22, 0x01	; 1
    1002:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
								usart0Transmit(accY>>8,1);
    1006:	80 91 2f 04 	lds	r24, 0x042F
    100a:	61 e0       	ldi	r22, 0x01	; 1
    100c:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
								usart0Transmit(accZ&0xFF,1);
    1010:	80 91 30 04 	lds	r24, 0x0430
    1014:	61 e0       	ldi	r22, 0x01	; 1
    1016:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
								usart0Transmit(accZ>>8,1);
    101a:	80 91 31 04 	lds	r24, 0x0431
    101e:	61 e0       	ldi	r22, 0x01	; 1
    1020:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
								usart0Transmit(irCommand,1);
    1024:	80 91 27 04 	lds	r24, 0x0427
    1028:	61 e0       	ldi	r22, 0x01	; 1
    102a:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
								usart0Transmit(currentSelector,1);
    102e:	80 91 4c 04 	lds	r24, 0x044C
    1032:	61 e0       	ldi	r22, 0x01	; 1
    1034:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
								usart0Transmit(BUTTON0,1);
    1038:	80 91 03 01 	lds	r24, 0x0103
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	80 72       	andi	r24, 0x20	; 32
    1040:	90 70       	andi	r25, 0x00	; 0
    1042:	95 95       	asr	r25
    1044:	87 95       	ror	r24
    1046:	95 95       	asr	r25
    1048:	87 95       	ror	r24
    104a:	95 95       	asr	r25
    104c:	87 95       	ror	r24
    104e:	95 95       	asr	r25
    1050:	87 95       	ror	r24
    1052:	95 95       	asr	r25
    1054:	87 95       	ror	r24
    1056:	61 e0       	ldi	r22, 0x01	; 1
    1058:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
								usart0Transmit(rfFlags,1);
    105c:	80 91 17 03 	lds	r24, 0x0317
    1060:	61 e0       	ldi	r22, 0x01	; 1
    1062:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
								usart0Transmit(((unsigned int)(theta*573.0))&0xFF,1);	// radians to degrees => 573 = 1800/PI
    1066:	60 91 6f 04 	lds	r22, 0x046F
    106a:	70 91 70 04 	lds	r23, 0x0470
    106e:	80 91 71 04 	lds	r24, 0x0471
    1072:	90 91 72 04 	lds	r25, 0x0472
    1076:	20 e0       	ldi	r18, 0x00	; 0
    1078:	30 e4       	ldi	r19, 0x40	; 64
    107a:	4f e0       	ldi	r20, 0x0F	; 15
    107c:	54 e4       	ldi	r21, 0x44	; 68
    107e:	0e 94 90 51 	call	0xa320	; 0xa320 <__mulsf3>
    1082:	0e 94 4d 50 	call	0xa09a	; 0xa09a <__fixunssfsi>
    1086:	86 2f       	mov	r24, r22
    1088:	61 e0       	ldi	r22, 0x01	; 1
    108a:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
								usart0Transmit(((unsigned int)(theta*573.0))>>8,1);
    108e:	60 91 6f 04 	lds	r22, 0x046F
    1092:	70 91 70 04 	lds	r23, 0x0470
    1096:	80 91 71 04 	lds	r24, 0x0471
    109a:	90 91 72 04 	lds	r25, 0x0472
    109e:	20 e0       	ldi	r18, 0x00	; 0
    10a0:	30 e4       	ldi	r19, 0x40	; 64
    10a2:	4f e0       	ldi	r20, 0x0F	; 15
    10a4:	54 e4       	ldi	r21, 0x44	; 68
    10a6:	0e 94 90 51 	call	0xa320	; 0xa320 <__mulsf3>
    10aa:	0e 94 4d 50 	call	0xa09a	; 0xa09a <__fixunssfsi>
    10ae:	87 2f       	mov	r24, r23
    10b0:	61 e0       	ldi	r22, 0x01	; 1
    10b2:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
								usart0Transmit(((unsigned int)xPos)&0xFF,1);
    10b6:	60 91 77 04 	lds	r22, 0x0477
    10ba:	70 91 78 04 	lds	r23, 0x0478
    10be:	80 91 79 04 	lds	r24, 0x0479
    10c2:	90 91 7a 04 	lds	r25, 0x047A
    10c6:	0e 94 4d 50 	call	0xa09a	; 0xa09a <__fixunssfsi>
    10ca:	86 2f       	mov	r24, r22
    10cc:	61 e0       	ldi	r22, 0x01	; 1
    10ce:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
								usart0Transmit(((unsigned int)xPos)>>8,1);
    10d2:	60 91 77 04 	lds	r22, 0x0477
    10d6:	70 91 78 04 	lds	r23, 0x0478
    10da:	80 91 79 04 	lds	r24, 0x0479
    10de:	90 91 7a 04 	lds	r25, 0x047A
    10e2:	0e 94 4d 50 	call	0xa09a	; 0xa09a <__fixunssfsi>
    10e6:	87 2f       	mov	r24, r23
    10e8:	61 e0       	ldi	r22, 0x01	; 1
    10ea:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
								usart0Transmit(((unsigned int)yPos)&0xFF,1);
    10ee:	60 91 7b 04 	lds	r22, 0x047B
    10f2:	70 91 7c 04 	lds	r23, 0x047C
    10f6:	80 91 7d 04 	lds	r24, 0x047D
    10fa:	90 91 7e 04 	lds	r25, 0x047E
    10fe:	0e 94 4d 50 	call	0xa09a	; 0xa09a <__fixunssfsi>
    1102:	86 2f       	mov	r24, r22
    1104:	61 e0       	ldi	r22, 0x01	; 1
    1106:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
								usart0Transmit(((unsigned int)yPos)>>8,1);
    110a:	60 91 7b 04 	lds	r22, 0x047B
    110e:	70 91 7c 04 	lds	r23, 0x047C
    1112:	80 91 7d 04 	lds	r24, 0x047D
    1116:	90 91 7e 04 	lds	r25, 0x047E
    111a:	0e 94 4d 50 	call	0xa09a	; 0xa09a <__fixunssfsi>
    111e:	87 2f       	mov	r24, r23
    1120:	61 e0       	ldi	r22, 0x01	; 1
    1122:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)&0xFF,1);
    1126:	60 91 d5 02 	lds	r22, 0x02D5
    112a:	70 91 d6 02 	lds	r23, 0x02D6
    112e:	80 91 d7 02 	lds	r24, 0x02D7
    1132:	90 91 d8 02 	lds	r25, 0x02D8
    1136:	0e 94 48 50 	call	0xa090	; 0xa090 <__fixsfsi>
    113a:	86 2f       	mov	r24, r22
    113c:	61 e0       	ldi	r22, 0x01	; 1
    113e:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)>>8,1);
    1142:	60 91 d5 02 	lds	r22, 0x02D5
    1146:	70 91 d6 02 	lds	r23, 0x02D6
    114a:	80 91 d7 02 	lds	r24, 0x02D7
    114e:	90 91 d8 02 	lds	r25, 0x02D8
    1152:	0e 94 48 50 	call	0xa090	; 0xa090 <__fixsfsi>
    1156:	87 2f       	mov	r24, r23
    1158:	61 e0       	ldi	r22, 0x01	; 1
    115a:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)>>16,1);
    115e:	60 91 d5 02 	lds	r22, 0x02D5
    1162:	70 91 d6 02 	lds	r23, 0x02D6
    1166:	80 91 d7 02 	lds	r24, 0x02D7
    116a:	90 91 d8 02 	lds	r25, 0x02D8
    116e:	0e 94 48 50 	call	0xa090	; 0xa090 <__fixsfsi>
    1172:	61 e0       	ldi	r22, 0x01	; 1
    1174:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)>>24,1);
    1178:	60 91 d5 02 	lds	r22, 0x02D5
    117c:	70 91 d6 02 	lds	r23, 0x02D6
    1180:	80 91 d7 02 	lds	r24, 0x02D7
    1184:	90 91 d8 02 	lds	r25, 0x02D8
    1188:	0e 94 48 50 	call	0xa090	; 0xa090 <__fixsfsi>
    118c:	89 2f       	mov	r24, r25
    118e:	61 e0       	ldi	r22, 0x01	; 1
    1190:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)&0xFF,1);
    1194:	60 91 d1 02 	lds	r22, 0x02D1
    1198:	70 91 d2 02 	lds	r23, 0x02D2
    119c:	80 91 d3 02 	lds	r24, 0x02D3
    11a0:	90 91 d4 02 	lds	r25, 0x02D4
    11a4:	0e 94 48 50 	call	0xa090	; 0xa090 <__fixsfsi>
    11a8:	86 2f       	mov	r24, r22
    11aa:	61 e0       	ldi	r22, 0x01	; 1
    11ac:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)>>8,1);
    11b0:	60 91 d1 02 	lds	r22, 0x02D1
    11b4:	70 91 d2 02 	lds	r23, 0x02D2
    11b8:	80 91 d3 02 	lds	r24, 0x02D3
    11bc:	90 91 d4 02 	lds	r25, 0x02D4
    11c0:	0e 94 48 50 	call	0xa090	; 0xa090 <__fixsfsi>
    11c4:	87 2f       	mov	r24, r23
    11c6:	61 e0       	ldi	r22, 0x01	; 1
    11c8:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)>>16,1);
    11cc:	60 91 d1 02 	lds	r22, 0x02D1
    11d0:	70 91 d2 02 	lds	r23, 0x02D2
    11d4:	80 91 d3 02 	lds	r24, 0x02D3
    11d8:	90 91 d4 02 	lds	r25, 0x02D4
    11dc:	0e 94 48 50 	call	0xa090	; 0xa090 <__fixsfsi>
    11e0:	61 e0       	ldi	r22, 0x01	; 1
    11e2:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)>>24,1);
    11e6:	60 91 d1 02 	lds	r22, 0x02D1
    11ea:	70 91 d2 02 	lds	r23, 0x02D2
    11ee:	80 91 d3 02 	lds	r24, 0x02D3
    11f2:	90 91 d4 02 	lds	r25, 0x02D4
    11f6:	0e 94 48 50 	call	0xa090	; 0xa090 <__fixsfsi>
    11fa:	89 2f       	mov	r24, r25
    11fc:	61 e0       	ldi	r22, 0x01	; 1
    11fe:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
								usart0Transmit(pwm_left_desired>>2, 1);
    1202:	80 91 fb 02 	lds	r24, 0x02FB
    1206:	90 91 fc 02 	lds	r25, 0x02FC
    120a:	95 95       	asr	r25
    120c:	87 95       	ror	r24
    120e:	95 95       	asr	r25
    1210:	87 95       	ror	r24
    1212:	61 e0       	ldi	r22, 0x01	; 1
    1214:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
								usart0Transmit(pwm_right_desired>>2, 1);
    1218:	80 91 f9 02 	lds	r24, 0x02F9
    121c:	90 91 fa 02 	lds	r25, 0x02FA
    1220:	95 95       	asr	r25
    1222:	87 95       	ror	r24
    1224:	95 95       	asr	r25
    1226:	87 95       	ror	r24
    1228:	61 e0       	ldi	r22, 0x01	; 1
    122a:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
    122e:	80 91 4c 04 	lds	r24, 0x044C
    1232:	4f c8       	rjmp	.-3938   	; 0x2d2 <main+0xf6>
							demoStartTime = getTime100MicroSec();
							demoState = 1;
							break;

						case 1:
							if((getTime100MicroSec()-demoStartTime) >= (PAUSE_2_SEC)) {
    1234:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <getTime100MicroSec>
    1238:	9b 01       	movw	r18, r22
    123a:	ac 01       	movw	r20, r24
    123c:	80 91 54 04 	lds	r24, 0x0454
    1240:	90 91 55 04 	lds	r25, 0x0455
    1244:	a0 91 56 04 	lds	r26, 0x0456
    1248:	b0 91 57 04 	lds	r27, 0x0457
    124c:	28 1b       	sub	r18, r24
    124e:	39 0b       	sbc	r19, r25
    1250:	4a 0b       	sbc	r20, r26
    1252:	5b 0b       	sbc	r21, r27
    1254:	2e 31       	cpi	r18, 0x1E	; 30
    1256:	eb e4       	ldi	r30, 0x4B	; 75
    1258:	3e 07       	cpc	r19, r30
    125a:	e0 e0       	ldi	r30, 0x00	; 0
    125c:	4e 07       	cpc	r20, r30
    125e:	e0 e0       	ldi	r30, 0x00	; 0
    1260:	5e 07       	cpc	r21, r30
    1262:	08 f4       	brcc	.+2      	; 0x1266 <main+0x108a>
    1264:	1e cc       	rjmp	.-1988   	; 0xaa2 <main+0x8c6>
								demoState = 2;
    1266:	f2 e0       	ldi	r31, 0x02	; 2
    1268:	f0 93 50 04 	sts	0x0450, r31
    126c:	80 91 4c 04 	lds	r24, 0x044C
    1270:	30 c8       	rjmp	.-4000   	; 0x2d2 <main+0xf6>
						//setRightSpeed(-15);
						demoState = 1;
						break;

					case 1:						
						irCommSendData(irCommRxByteExpected, 0x01);	
    1272:	80 91 fc 04 	lds	r24, 0x04FC
    1276:	61 e0       	ldi	r22, 0x01	; 1
    1278:	0e 94 f7 4e 	call	0x9dee	; 0x9dee <irCommSendData>
						//irCommSendData(irCommRxByteExpected, 0xFF);												
						demoState = 2;
    127c:	82 e0       	ldi	r24, 0x02	; 2
    127e:	80 93 50 04 	sts	0x0450, r24
    1282:	80 91 4c 04 	lds	r24, 0x044C
						break;
    1286:	25 c8       	rjmp	.-4022   	; 0x2d2 <main+0xf6>
							setLeftSpeed(20);
							setRightSpeed(20);
							demoState = 1;
							break;
						case 1: // motion					
							if((getTime100MicroSec()-demoStartTime) >= (PAUSE_4_SEC)) {
    1288:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <getTime100MicroSec>
    128c:	9b 01       	movw	r18, r22
    128e:	ac 01       	movw	r20, r24
    1290:	80 91 54 04 	lds	r24, 0x0454
    1294:	90 91 55 04 	lds	r25, 0x0455
    1298:	a0 91 56 04 	lds	r26, 0x0456
    129c:	b0 91 57 04 	lds	r27, 0x0457
    12a0:	28 1b       	sub	r18, r24
    12a2:	39 0b       	sbc	r19, r25
    12a4:	4a 0b       	sbc	r20, r26
    12a6:	5b 0b       	sbc	r21, r27
    12a8:	2e 33       	cpi	r18, 0x3E	; 62
    12aa:	66 e9       	ldi	r22, 0x96	; 150
    12ac:	36 07       	cpc	r19, r22
    12ae:	60 e0       	ldi	r22, 0x00	; 0
    12b0:	46 07       	cpc	r20, r22
    12b2:	60 e0       	ldi	r22, 0x00	; 0
    12b4:	56 07       	cpc	r21, r22
    12b6:	08 f4       	brcc	.+2      	; 0x12ba <main+0x10de>
    12b8:	99 c8       	rjmp	.-3790   	; 0x3ec <main+0x210>
								setRightSpeed(0);
    12ba:	80 e0       	ldi	r24, 0x00	; 0
    12bc:	0e 94 19 27 	call	0x4e32	; 0x4e32 <setRightSpeed>
								setLeftSpeed(0);								
    12c0:	80 e0       	ldi	r24, 0x00	; 0
    12c2:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <setLeftSpeed>
								demoStartTime = getTime100MicroSec();
    12c6:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <getTime100MicroSec>
    12ca:	60 93 54 04 	sts	0x0454, r22
    12ce:	70 93 55 04 	sts	0x0455, r23
    12d2:	80 93 56 04 	sts	0x0456, r24
    12d6:	90 93 57 04 	sts	0x0457, r25
								demoState = 2;							
    12da:	82 e0       	ldi	r24, 0x02	; 2
    12dc:	80 93 50 04 	sts	0x0450, r24
    12e0:	85 c8       	rjmp	.-3830   	; 0x3ec <main+0x210>
			readBatteryLevel();				// the battery level is updated every two seconds
             		
			if(currentSelector==4 || currentSelector==5) {
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption

				switch(rgbState) {
    12e2:	82 30       	cpi	r24, 0x02	; 2
    12e4:	09 f0       	breq	.+2      	; 0x12e8 <main+0x110c>
    12e6:	66 cb       	rjmp	.-2356   	; 0x9b4 <main+0x7d8>
						pwm_green = 255 - currRand;
						rgbState = 2;
						break;

					case 2:
						pwm_blue = 255 - currRand;
    12e8:	8a 2d       	mov	r24, r10
    12ea:	80 95       	com	r24
    12ec:	80 93 0e 02 	sts	0x020E, r24
						rgbState = 0;
    12f0:	10 92 1c 03 	sts	0x031C, r1
						break;
    12f4:	5f cb       	rjmp	.-2370   	; 0x9b4 <main+0x7d8>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
    12f6:	81 30       	cpi	r24, 0x01	; 1
    12f8:	09 f0       	breq	.+2      	; 0x12fc <main+0x1120>
    12fa:	ba c8       	rjmp	.-3724   	; 0x470 <main+0x294>
							//pwm_green = 255;
							//pwm_blue = 255;
							break;

						case 1:	// search for a line
							turnOffGreenLeds();
    12fc:	0e 94 0b 3c 	call	0x7816	; 0x7816 <turnOffGreenLeds>
							GREEN_LED2_ON;
    1300:	80 91 0b 01 	lds	r24, 0x010B
    1304:	8b 7f       	andi	r24, 0xFB	; 251
    1306:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED3_ON;
							outOfLine = 0;
    130a:	10 92 52 04 	sts	0x0452, r1
							enableObstacleAvoidance();
    130e:	0e 94 e7 3a 	call	0x75ce	; 0x75ce <enableObstacleAvoidance>
							setRightSpeed(15);
    1312:	8f e0       	ldi	r24, 0x0F	; 15
    1314:	0e 94 19 27 	call	0x4e32	; 0x4e32 <setRightSpeed>
							setLeftSpeed(15);
    1318:	8f e0       	ldi	r24, 0x0F	; 15
    131a:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <setLeftSpeed>
							if(proximityResult[9]<LINE_IN_THR || proximityResult[10]<LINE_IN_THR || proximityResult[8]<LINE_IN_THR || proximityResult[11]<LINE_IN_THR) {
    131e:	80 91 6b 02 	lds	r24, 0x026B
    1322:	90 91 6c 02 	lds	r25, 0x026C
    1326:	e1 e0       	ldi	r30, 0x01	; 1
    1328:	80 39       	cpi	r24, 0x90	; 144
    132a:	9e 07       	cpc	r25, r30
    132c:	0c f4       	brge	.+2      	; 0x1330 <main+0x1154>
    132e:	44 c1       	rjmp	.+648    	; 0x15b8 <main+0x13dc>
    1330:	80 91 6d 02 	lds	r24, 0x026D
    1334:	90 91 6e 02 	lds	r25, 0x026E
    1338:	f1 e0       	ldi	r31, 0x01	; 1
    133a:	80 39       	cpi	r24, 0x90	; 144
    133c:	9f 07       	cpc	r25, r31
    133e:	0c f4       	brge	.+2      	; 0x1342 <main+0x1166>
    1340:	3b c1       	rjmp	.+630    	; 0x15b8 <main+0x13dc>
    1342:	80 91 69 02 	lds	r24, 0x0269
    1346:	90 91 6a 02 	lds	r25, 0x026A
    134a:	21 e0       	ldi	r18, 0x01	; 1
    134c:	80 39       	cpi	r24, 0x90	; 144
    134e:	92 07       	cpc	r25, r18
    1350:	0c f4       	brge	.+2      	; 0x1354 <main+0x1178>
    1352:	32 c1       	rjmp	.+612    	; 0x15b8 <main+0x13dc>
    1354:	80 91 6f 02 	lds	r24, 0x026F
    1358:	90 91 70 02 	lds	r25, 0x0270
    135c:	31 e0       	ldi	r19, 0x01	; 1
    135e:	80 39       	cpi	r24, 0x90	; 144
    1360:	93 07       	cpc	r25, r19
    1362:	0c f4       	brge	.+2      	; 0x1366 <main+0x118a>
    1364:	29 c1       	rjmp	.+594    	; 0x15b8 <main+0x13dc>
									demoStartTime = getTime100MicroSec();
									demoState = 2;
									break;
								}
							} else {
								lineFound = 0;
    1366:	10 92 51 04 	sts	0x0451, r1
    136a:	82 c8       	rjmp	.-3836   	; 0x470 <main+0x294>
						pwm_red = 255 - currRand;	
						rgbState = 1;
						break;

					case 1:
						pwm_green = 255 - currRand;
    136c:	8a 2d       	mov	r24, r10
    136e:	80 95       	com	r24
    1370:	80 93 0d 02 	sts	0x020D, r24
						rgbState = 2;
    1374:	62 e0       	ldi	r22, 0x02	; 2
    1376:	60 93 1c 03 	sts	0x031C, r22
						break;
    137a:	1c cb       	rjmp	.-2504   	; 0x9b4 <main+0x7d8>
					}
				} else if(currRand<64) {
					if(pwm_red!=255 && pwm_blue!=255) {
						pwm_green = 255;
					}
				} else if (currRand<96) {
    137c:	e0 e6       	ldi	r30, 0x60	; 96
    137e:	ae 16       	cp	r10, r30
    1380:	b1 04       	cpc	r11, r1
    1382:	08 f0       	brcs	.+2      	; 0x1386 <main+0x11aa>
    1384:	ca c9       	rjmp	.-3180   	; 0x71a <main+0x53e>
					if(pwm_red!=255 && pwm_green!=255) {
    1386:	80 91 0c 02 	lds	r24, 0x020C
    138a:	8f 3f       	cpi	r24, 0xFF	; 255
    138c:	09 f4       	brne	.+2      	; 0x1390 <main+0x11b4>
    138e:	c5 c9       	rjmp	.-3190   	; 0x71a <main+0x53e>
    1390:	80 91 0d 02 	lds	r24, 0x020D
    1394:	8f 3f       	cpi	r24, 0xFF	; 255
    1396:	09 f4       	brne	.+2      	; 0x139a <main+0x11be>
    1398:	c0 c9       	rjmp	.-3200   	; 0x71a <main+0x53e>
						pwm_blue = 255;
    139a:	10 93 0e 02 	sts	0x020E, r17
    139e:	bd c9       	rjmp	.-3206   	; 0x71a <main+0x53e>
							//pwm_green = 255;
							//pwm_blue = 0;
							break;

						case 3:	// charge for some time
							turnOffGreenLeds();
    13a0:	0e 94 0b 3c 	call	0x7816	; 0x7816 <turnOffGreenLeds>
							GREEN_LED6_ON;
    13a4:	80 91 0b 01 	lds	r24, 0x010B
    13a8:	8f 7b       	andi	r24, 0xBF	; 191
    13aa:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED7_ON;
							demoEndTime = getTime100MicroSec();
    13ae:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <getTime100MicroSec>
    13b2:	9b 01       	movw	r18, r22
    13b4:	ac 01       	movw	r20, r24
    13b6:	60 93 5c 04 	sts	0x045C, r22
    13ba:	70 93 5d 04 	sts	0x045D, r23
    13be:	80 93 5e 04 	sts	0x045E, r24
    13c2:	90 93 5f 04 	sts	0x045F, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_30_SEC)) {
    13c6:	80 91 54 04 	lds	r24, 0x0454
    13ca:	90 91 55 04 	lds	r25, 0x0455
    13ce:	a0 91 56 04 	lds	r26, 0x0456
    13d2:	b0 91 57 04 	lds	r27, 0x0457
    13d6:	28 1b       	sub	r18, r24
    13d8:	39 0b       	sbc	r19, r25
    13da:	4a 0b       	sbc	r20, r26
    13dc:	5b 0b       	sbc	r21, r27
    13de:	2d 3c       	cpi	r18, 0xCD	; 205
    13e0:	66 e6       	ldi	r22, 0x66	; 102
    13e2:	36 07       	cpc	r19, r22
    13e4:	64 e0       	ldi	r22, 0x04	; 4
    13e6:	46 07       	cpc	r20, r22
    13e8:	60 e0       	ldi	r22, 0x00	; 0
    13ea:	56 07       	cpc	r21, r22
    13ec:	08 f4       	brcc	.+2      	; 0x13f0 <main+0x1214>
    13ee:	38 c1       	rjmp	.+624    	; 0x1660 <main+0x1484>
								if(batteryLevel<890) {//860) {	// stay in charge if too much discharged (consider the fact that the robot
    13f0:	80 91 bd 02 	lds	r24, 0x02BD
    13f4:	90 91 be 02 	lds	r25, 0x02BE
    13f8:	e3 e0       	ldi	r30, 0x03	; 3
    13fa:	8a 37       	cpi	r24, 0x7A	; 122
    13fc:	9e 07       	cpc	r25, r30
    13fe:	08 f4       	brcc	.+2      	; 0x1402 <main+0x1226>
    1400:	3d c1       	rjmp	.+634    	; 0x167c <main+0x14a0>
														// is still in charge thus the battery value measured is higher)
									demoStartTime = getTime100MicroSec();
									break;
								} else {
									setRightSpeed(-13);
    1402:	83 ef       	ldi	r24, 0xF3	; 243
    1404:	0e 94 19 27 	call	0x4e32	; 0x4e32 <setRightSpeed>
									setLeftSpeed(-13);
    1408:	83 ef       	ldi	r24, 0xF3	; 243
    140a:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <setLeftSpeed>
									demoStartTime = getTime100MicroSec();
    140e:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <getTime100MicroSec>
    1412:	60 93 54 04 	sts	0x0454, r22
    1416:	70 93 55 04 	sts	0x0455, r23
    141a:	80 93 56 04 	sts	0x0456, r24
    141e:	90 93 57 04 	sts	0x0457, r25
									demoState = 4;
    1422:	f4 e0       	ldi	r31, 0x04	; 4
    1424:	f0 93 50 04 	sts	0x0450, r31
									break;
    1428:	23 c8       	rjmp	.-4026   	; 0x470 <main+0x294>
							//pwm_green = 255;
							//pwm_blue = 0;
							break;
						
						case 4: // go back from charger
							turnOffGreenLeds();
    142a:	0e 94 0b 3c 	call	0x7816	; 0x7816 <turnOffGreenLeds>
							GREEN_LED6_ON;
    142e:	80 91 0b 01 	lds	r24, 0x010B
    1432:	8f 7b       	andi	r24, 0xBF	; 191
    1434:	80 93 0b 01 	sts	0x010B, r24
							GREEN_LED7_ON;
    1438:	80 91 0b 01 	lds	r24, 0x010B
    143c:	8f 77       	andi	r24, 0x7F	; 127
    143e:	80 93 0b 01 	sts	0x010B, r24
							demoEndTime = getTime100MicroSec();
    1442:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <getTime100MicroSec>
    1446:	9b 01       	movw	r18, r22
    1448:	ac 01       	movw	r20, r24
    144a:	60 93 5c 04 	sts	0x045C, r22
    144e:	70 93 5d 04 	sts	0x045D, r23
    1452:	80 93 5e 04 	sts	0x045E, r24
    1456:	90 93 5f 04 	sts	0x045F, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_1_SEC)) {
    145a:	80 91 54 04 	lds	r24, 0x0454
    145e:	90 91 55 04 	lds	r25, 0x0455
    1462:	a0 91 56 04 	lds	r26, 0x0456
    1466:	b0 91 57 04 	lds	r27, 0x0457
    146a:	28 1b       	sub	r18, r24
    146c:	39 0b       	sbc	r19, r25
    146e:	4a 0b       	sbc	r20, r26
    1470:	5b 0b       	sbc	r21, r27
    1472:	2f 38       	cpi	r18, 0x8F	; 143
    1474:	65 e2       	ldi	r22, 0x25	; 37
    1476:	36 07       	cpc	r19, r22
    1478:	60 e0       	ldi	r22, 0x00	; 0
    147a:	46 07       	cpc	r20, r22
    147c:	60 e0       	ldi	r22, 0x00	; 0
    147e:	56 07       	cpc	r21, r22
    1480:	10 f4       	brcc	.+4      	; 0x1486 <main+0x12aa>
    1482:	0c 94 38 02 	jmp	0x470	; 0x470 <main+0x294>
								setRightSpeed(20);
    1486:	84 e1       	ldi	r24, 0x14	; 20
    1488:	0e 94 19 27 	call	0x4e32	; 0x4e32 <setRightSpeed>
								setLeftSpeed(-20);								
    148c:	8c ee       	ldi	r24, 0xEC	; 236
    148e:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <setLeftSpeed>
								demoStartTime = getTime100MicroSec();
    1492:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <getTime100MicroSec>
    1496:	60 93 54 04 	sts	0x0454, r22
    149a:	70 93 55 04 	sts	0x0455, r23
    149e:	80 93 56 04 	sts	0x0456, r24
    14a2:	90 93 57 04 	sts	0x0457, r25
								demoState = 5;							
    14a6:	85 e0       	ldi	r24, 0x05	; 5
    14a8:	80 93 50 04 	sts	0x0450, r24
    14ac:	0c 94 38 02 	jmp	0x470	; 0x470 <main+0x294>
							//pwm_green = 0;
							//pwm_blue = 255;
							break;

						case 2:	// line found, follow it
							turnOffGreenLeds();
    14b0:	0e 94 0b 3c 	call	0x7816	; 0x7816 <turnOffGreenLeds>
							GREEN_LED4_ON;
    14b4:	80 91 0b 01 	lds	r24, 0x010B
    14b8:	8f 7e       	andi	r24, 0xEF	; 239
    14ba:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED5_ON;
							disableObstacleAvoidance();
    14be:	0e 94 eb 3a 	call	0x75d6	; 0x75d6 <disableObstacleAvoidance>

							demoEndTime = getTime100MicroSec();
    14c2:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <getTime100MicroSec>
    14c6:	9b 01       	movw	r18, r22
    14c8:	ac 01       	movw	r20, r24
    14ca:	60 93 5c 04 	sts	0x045C, r22
    14ce:	70 93 5d 04 	sts	0x045D, r23
    14d2:	80 93 5e 04 	sts	0x045E, r24
    14d6:	90 93 5f 04 	sts	0x045F, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {	// the robot seems to be blocked somehow
    14da:	80 91 54 04 	lds	r24, 0x0454
    14de:	90 91 55 04 	lds	r25, 0x0455
    14e2:	a0 91 56 04 	lds	r26, 0x0456
    14e6:	b0 91 57 04 	lds	r27, 0x0457
    14ea:	28 1b       	sub	r18, r24
    14ec:	39 0b       	sbc	r19, r25
    14ee:	4a 0b       	sbc	r20, r26
    14f0:	5b 0b       	sbc	r21, r27
    14f2:	23 33       	cpi	r18, 0x33	; 51
    14f4:	6f ee       	ldi	r22, 0xEF	; 239
    14f6:	36 07       	cpc	r19, r22
    14f8:	62 e0       	ldi	r22, 0x02	; 2
    14fa:	46 07       	cpc	r20, r22
    14fc:	60 e0       	ldi	r22, 0x00	; 0
    14fe:	56 07       	cpc	r21, r22
    1500:	08 f0       	brcs	.+2      	; 0x1504 <main+0x1328>
    1502:	31 c1       	rjmp	.+610    	; 0x1766 <main+0x158a>
								demoStartTime = getTime100MicroSec();
								demoState = 4;
								break;
							}

							if(CHARGE_ON) {
    1504:	80 91 03 01 	lds	r24, 0x0103
    1508:	84 ff       	sbrs	r24, 4
    150a:	0e c1       	rjmp	.+540    	; 0x1728 <main+0x154c>
								outOfLine = 0;
    150c:	10 92 52 04 	sts	0x0452, r1
								chargeContact++;
    1510:	80 91 53 04 	lds	r24, 0x0453
    1514:	8f 5f       	subi	r24, 0xFF	; 255
    1516:	80 93 53 04 	sts	0x0453, r24
								if(chargeContact > 20) {
    151a:	85 31       	cpi	r24, 0x15	; 21
    151c:	08 f0       	brcs	.+2      	; 0x1520 <main+0x1344>
    151e:	5a c1       	rjmp	.+692    	; 0x17d4 <main+0x15f8>
    1520:	80 91 6b 02 	lds	r24, 0x026B
    1524:	90 91 6c 02 	lds	r25, 0x026C
								} else {
									outOfLine = 0;
								}
							}
							
							if(proximityResult[8]<LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR && proximityResult[11]>LINE_OUT_THR) {	// left ground is the only within the black line => turn left
    1528:	20 91 69 02 	lds	r18, 0x0269
    152c:	30 91 6a 02 	lds	r19, 0x026A
    1530:	41 e0       	ldi	r20, 0x01	; 1
    1532:	22 3c       	cpi	r18, 0xC2	; 194
    1534:	34 07       	cpc	r19, r20
    1536:	ac f4       	brge	.+42     	; 0x1562 <main+0x1386>
    1538:	51 e0       	ldi	r21, 0x01	; 1
    153a:	83 3c       	cpi	r24, 0xC3	; 195
    153c:	95 07       	cpc	r25, r21
    153e:	8c f0       	brlt	.+34     	; 0x1562 <main+0x1386>
    1540:	40 91 6d 02 	lds	r20, 0x026D
    1544:	50 91 6e 02 	lds	r21, 0x026E
    1548:	61 e0       	ldi	r22, 0x01	; 1
    154a:	43 3c       	cpi	r20, 0xC3	; 195
    154c:	56 07       	cpc	r21, r22
    154e:	4c f0       	brlt	.+18     	; 0x1562 <main+0x1386>
    1550:	40 91 6f 02 	lds	r20, 0x026F
    1554:	50 91 70 02 	lds	r21, 0x0270
    1558:	e1 e0       	ldi	r30, 0x01	; 1
    155a:	43 3c       	cpi	r20, 0xC3	; 195
    155c:	5e 07       	cpc	r21, r30
    155e:	0c f0       	brlt	.+2      	; 0x1562 <main+0x1386>
    1560:	62 c1       	rjmp	.+708    	; 0x1826 <main+0x164a>
								setLeftSpeed(-10);
								setRightSpeed(15);
							} else if(proximityResult[11]<LINE_OUT_THR && proximityResult[8]>LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {	// right ground is the only within the black line => turn right
    1562:	40 91 6f 02 	lds	r20, 0x026F
    1566:	50 91 70 02 	lds	r21, 0x0270
    156a:	f1 e0       	ldi	r31, 0x01	; 1
    156c:	42 3c       	cpi	r20, 0xC2	; 194
    156e:	5f 07       	cpc	r21, r31
    1570:	0c f0       	brlt	.+2      	; 0x1574 <main+0x1398>
    1572:	c4 c0       	rjmp	.+392    	; 0x16fc <main+0x1520>
    1574:	41 e0       	ldi	r20, 0x01	; 1
    1576:	23 3c       	cpi	r18, 0xC3	; 195
    1578:	34 07       	cpc	r19, r20
    157a:	0c f4       	brge	.+2      	; 0x157e <main+0x13a2>
    157c:	bf c0       	rjmp	.+382    	; 0x16fc <main+0x1520>
    157e:	51 e0       	ldi	r21, 0x01	; 1
    1580:	83 3c       	cpi	r24, 0xC3	; 195
    1582:	95 07       	cpc	r25, r21
    1584:	0c f4       	brge	.+2      	; 0x1588 <main+0x13ac>
    1586:	bf c0       	rjmp	.+382    	; 0x1706 <main+0x152a>
    1588:	80 91 6d 02 	lds	r24, 0x026D
    158c:	90 91 6e 02 	lds	r25, 0x026E
    1590:	61 e0       	ldi	r22, 0x01	; 1
    1592:	83 3c       	cpi	r24, 0xC3	; 195
    1594:	96 07       	cpc	r25, r22
    1596:	0c f0       	brlt	.+2      	; 0x159a <main+0x13be>
    1598:	3e c1       	rjmp	.+636    	; 0x1816 <main+0x163a>
								setLeftSpeed(15);
								setRightSpeed(-10);
							} else if(proximityResult[9]>LINE_OUT_THR) {	// center left is leaving the line => turn right
								setLeftSpeed(15);
    159a:	8f e0       	ldi	r24, 0x0F	; 15
    159c:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <setLeftSpeed>
								setRightSpeed(-5);
    15a0:	8b ef       	ldi	r24, 0xFB	; 251
    15a2:	0e 94 19 27 	call	0x4e32	; 0x4e32 <setRightSpeed>
    15a6:	0c 94 38 02 	jmp	0x470	; 0x470 <main+0x294>
				currRand2 = rand()%128;
				if(currRand2<32) {
					pwm_red = 255;
				} else if(currRand2<64) {
					pwm_green = 255;
				} else if (currRand2<96) {
    15aa:	80 36       	cpi	r24, 0x60	; 96
    15ac:	91 05       	cpc	r25, r1
    15ae:	08 f0       	brcs	.+2      	; 0x15b2 <main+0x13d6>
    15b0:	67 ca       	rjmp	.-2866   	; 0xa80 <main+0x8a4>
					pwm_blue = 255;
    15b2:	10 93 0e 02 	sts	0x020E, r17
    15b6:	64 ca       	rjmp	.-2872   	; 0xa80 <main+0x8a4>
							outOfLine = 0;
							enableObstacleAvoidance();
							setRightSpeed(15);
							setLeftSpeed(15);
							if(proximityResult[9]<LINE_IN_THR || proximityResult[10]<LINE_IN_THR || proximityResult[8]<LINE_IN_THR || proximityResult[11]<LINE_IN_THR) {
								lineFound++;
    15b8:	80 91 51 04 	lds	r24, 0x0451
    15bc:	8f 5f       	subi	r24, 0xFF	; 255
    15be:	80 93 51 04 	sts	0x0451, r24
								if(lineFound > 10) {
    15c2:	8b 30       	cpi	r24, 0x0B	; 11
    15c4:	10 f4       	brcc	.+4      	; 0x15ca <main+0x13ee>
    15c6:	0c 94 38 02 	jmp	0x470	; 0x470 <main+0x294>
									outOfLine = 0;
    15ca:	10 92 52 04 	sts	0x0452, r1
									chargeContact = 0;
    15ce:	10 92 53 04 	sts	0x0453, r1
									demoStartTime = getTime100MicroSec();
    15d2:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <getTime100MicroSec>
    15d6:	60 93 54 04 	sts	0x0454, r22
    15da:	70 93 55 04 	sts	0x0455, r23
    15de:	80 93 56 04 	sts	0x0456, r24
    15e2:	90 93 57 04 	sts	0x0457, r25
									demoState = 2;
    15e6:	42 e0       	ldi	r20, 0x02	; 2
    15e8:	40 93 50 04 	sts	0x0450, r20
									break;
    15ec:	0c 94 38 02 	jmp	0x470	; 0x470 <main+0x294>
							}

							currRand = rand()% 200;
							if(currRand<50) {
								pwm_red = 255;
							} else if(currRand<100) {
    15f0:	84 36       	cpi	r24, 0x64	; 100
    15f2:	91 05       	cpc	r25, r1
    15f4:	08 f0       	brcs	.+2      	; 0x15f8 <main+0x141c>
    15f6:	7a c0       	rjmp	.+244    	; 0x16ec <main+0x1510>
								pwm_green = 255;
    15f8:	10 93 0d 02 	sts	0x020D, r17
    15fc:	80 91 0c 02 	lds	r24, 0x020C
    1600:	87 cb       	rjmp	.-2290   	; 0xd10 <main+0xb34>

							currRand = rand()% 128;
							if(currRand > 95) {
								pwm_blue = 255;
							} else {
								pwm_blue = currRand;
    1602:	80 93 0e 02 	sts	0x020E, r24
    1606:	76 cb       	rjmp	.-2324   	; 0xcf4 <main+0xb18>

							currRand = rand()% 128;
							if(currRand > 95) {
								pwm_green = 255;
							} else {
								pwm_green = currRand;
    1608:	80 93 0d 02 	sts	0x020D, r24
    160c:	67 cb       	rjmp	.-2354   	; 0xcdc <main+0xb00>
							turnOffGreenLeds();					
							currRand = rand()% 128;	// 0 to 255 is the maximum, we use 0 to 127 to get brighter colors
							if(currRand > 95) {
								pwm_red = 255;
							} else {
								pwm_red = currRand;
    160e:	80 93 0c 02 	sts	0x020C, r24
    1612:	58 cb       	rjmp	.-2384   	; 0xcc4 <main+0xae8>
					} else if(pwm_right_desired > pwm_intermediate_right_desired) {
						pwm_intermediate_right_desired += speedStep;
						if(pwm_intermediate_right_desired > pwm_right_desired) {
							pwm_intermediate_right_desired = pwm_right_desired;
						}
					} else if(pwm_right_desired < pwm_intermediate_right_desired) {
    1614:	82 17       	cp	r24, r18
    1616:	93 07       	cpc	r25, r19
    1618:	0c f0       	brlt	.+2      	; 0x161c <main+0x1440>
    161a:	03 c8       	rjmp	.-4090   	; 0x622 <main+0x446>
						pwm_intermediate_right_desired -= speedStep;
    161c:	40 91 17 02 	lds	r20, 0x0217
    1620:	24 1b       	sub	r18, r20
    1622:	31 09       	sbc	r19, r1
    1624:	30 93 fe 02 	sts	0x02FE, r19
    1628:	20 93 fd 02 	sts	0x02FD, r18
						if(pwm_intermediate_right_desired < pwm_right_desired) {
    162c:	28 17       	cp	r18, r24
    162e:	39 07       	cpc	r19, r25
    1630:	14 f0       	brlt	.+4      	; 0x1636 <main+0x145a>
    1632:	0c 94 11 03 	jmp	0x622	; 0x622 <main+0x446>
    1636:	0c 94 0d 03 	jmp	0x61a	; 0x61a <main+0x43e>
					} else if(pwm_left_desired > pwm_intermediate_left_desired) {
						pwm_intermediate_left_desired += speedStep;
						if(pwm_intermediate_left_desired > pwm_left_desired) {
							pwm_intermediate_left_desired = pwm_left_desired;
						}
					} else if(pwm_left_desired < pwm_intermediate_left_desired) {
    163a:	82 17       	cp	r24, r18
    163c:	93 07       	cpc	r25, r19
    163e:	14 f0       	brlt	.+4      	; 0x1644 <main+0x1468>
    1640:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <main+0xc6>
						pwm_intermediate_left_desired -= speedStep;
    1644:	40 91 17 02 	lds	r20, 0x0217
    1648:	24 1b       	sub	r18, r20
    164a:	31 09       	sbc	r19, r1
    164c:	30 93 00 03 	sts	0x0300, r19
    1650:	20 93 ff 02 	sts	0x02FF, r18
						if(pwm_intermediate_left_desired < pwm_left_desired) {
    1654:	28 17       	cp	r18, r24
    1656:	39 07       	cpc	r19, r25
    1658:	14 f0       	brlt	.+4      	; 0x165e <main+0x1482>
    165a:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <main+0xc6>
    165e:	05 c8       	rjmp	.-4086   	; 0x66a <main+0x48e>
									demoStartTime = getTime100MicroSec();
									demoState = 4;
									break;
								}
							}
							if(!CHARGE_ON) {
    1660:	80 91 03 01 	lds	r24, 0x0103
    1664:	84 ff       	sbrs	r24, 4
    1666:	02 c0       	rjmp	.+4      	; 0x166c <main+0x1490>
    1668:	0c 94 38 02 	jmp	0x470	; 0x470 <main+0x294>
								chargeContact = 0;
    166c:	10 92 53 04 	sts	0x0453, r1
								outOfLine = 0;
    1670:	10 92 52 04 	sts	0x0452, r1
								demoState = 2;
    1674:	82 e0       	ldi	r24, 0x02	; 2
    1676:	98 2e       	mov	r9, r24
    1678:	90 92 50 04 	sts	0x0450, r9
								demoStartTime = getTime100MicroSec();
    167c:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <getTime100MicroSec>
    1680:	60 93 54 04 	sts	0x0454, r22
    1684:	70 93 55 04 	sts	0x0455, r23
    1688:	80 93 56 04 	sts	0x0456, r24
    168c:	90 93 57 04 	sts	0x0457, r25
								break;						
    1690:	0c 94 38 02 	jmp	0x470	; 0x470 <main+0x294>
								}
								setGreenLed(greenLedState, 1);
								demoEndTime = getTime100MicroSec();											
							}
							if((getTime100MicroSec()-demoStartTime2) >= (PAUSE_2_SEC)) {
								rgbLedState = 1;
    1694:	20 92 6b 04 	sts	0x046B, r2
								demoStartTime2 = getTime100MicroSec();
    1698:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <getTime100MicroSec>
    169c:	60 93 58 04 	sts	0x0458, r22
    16a0:	70 93 59 04 	sts	0x0459, r23
    16a4:	80 93 5a 04 	sts	0x045A, r24
    16a8:	90 93 5b 04 	sts	0x045B, r25
    16ac:	0c 94 38 02 	jmp	0x470	; 0x470 <main+0x294>
						case 0:							
							pwm_red = 255;
							pwm_green = 255;
							pwm_blue = 255;
							if((getTime100MicroSec()-demoEndTime) >= (PAUSE_100_MSEC)) {
								setGreenLed(greenLedState, 0);
    16b0:	80 91 6a 04 	lds	r24, 0x046A
    16b4:	60 e0       	ldi	r22, 0x00	; 0
    16b6:	0e 94 6e 3b 	call	0x76dc	; 0x76dc <setGreenLed>
								greenLedState++;
    16ba:	80 91 6a 04 	lds	r24, 0x046A
    16be:	8f 5f       	subi	r24, 0xFF	; 255
    16c0:	80 93 6a 04 	sts	0x046A, r24
								if(greenLedState > 7) {
    16c4:	88 30       	cpi	r24, 0x08	; 8
    16c6:	18 f0       	brcs	.+6      	; 0x16ce <main+0x14f2>
									greenLedState = 0;
    16c8:	10 92 6a 04 	sts	0x046A, r1
    16cc:	80 e0       	ldi	r24, 0x00	; 0
								}
								setGreenLed(greenLedState, 1);
    16ce:	61 e0       	ldi	r22, 0x01	; 1
    16d0:	0e 94 6e 3b 	call	0x76dc	; 0x76dc <setGreenLed>
								demoEndTime = getTime100MicroSec();											
    16d4:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <getTime100MicroSec>
    16d8:	60 93 5c 04 	sts	0x045C, r22
    16dc:	70 93 5d 04 	sts	0x045D, r23
    16e0:	80 93 5e 04 	sts	0x045E, r24
    16e4:	90 93 5f 04 	sts	0x045F, r25
    16e8:	0c 94 1e 02 	jmp	0x43c	; 0x43c <main+0x260>
							currRand = rand()% 200;
							if(currRand<50) {
								pwm_red = 255;
							} else if(currRand<100) {
								pwm_green = 255;
							} else if (currRand<150) {	
    16ec:	86 39       	cpi	r24, 0x96	; 150
    16ee:	91 05       	cpc	r25, r1
    16f0:	10 f4       	brcc	.+4      	; 0x16f6 <main+0x151a>
								pwm_blue = 255;
    16f2:	10 93 0e 02 	sts	0x020E, r17
    16f6:	80 91 0c 02 	lds	r24, 0x020C
    16fa:	0a cb       	rjmp	.-2540   	; 0xd10 <main+0xb34>
								setLeftSpeed(-10);
								setRightSpeed(15);
							} else if(proximityResult[11]<LINE_OUT_THR && proximityResult[8]>LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {	// right ground is the only within the black line => turn right
								setLeftSpeed(15);
								setRightSpeed(-10);
							} else if(proximityResult[9]>LINE_OUT_THR) {	// center left is leaving the line => turn right
    16fc:	e1 e0       	ldi	r30, 0x01	; 1
    16fe:	83 3c       	cpi	r24, 0xC3	; 195
    1700:	9e 07       	cpc	r25, r30
    1702:	0c f0       	brlt	.+2      	; 0x1706 <main+0x152a>
    1704:	4a cf       	rjmp	.-364    	; 0x159a <main+0x13be>
								setRightSpeed(-5);
								//outOfLine++;
								//if(outOfLine > 250) {
								//	demoState = 1;
								//}
							} else if(proximityResult[10]>LINE_OUT_THR) {	// center right is leaving the lnie => turn left
    1706:	80 91 6d 02 	lds	r24, 0x026D
    170a:	90 91 6e 02 	lds	r25, 0x026E
    170e:	f1 e0       	ldi	r31, 0x01	; 1
    1710:	83 3c       	cpi	r24, 0xC3	; 195
    1712:	9f 07       	cpc	r25, r31
    1714:	0c f4       	brge	.+2      	; 0x1718 <main+0x153c>
    1716:	50 c0       	rjmp	.+160    	; 0x17b8 <main+0x15dc>
								setLeftSpeed(-5);
    1718:	8b ef       	ldi	r24, 0xFB	; 251
    171a:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <setLeftSpeed>
								setRightSpeed(15);
    171e:	8f e0       	ldi	r24, 0x0F	; 15
    1720:	0e 94 19 27 	call	0x4e32	; 0x4e32 <setRightSpeed>
    1724:	0c 94 38 02 	jmp	0x470	; 0x470 <main+0x294>
									demoStartTime = getTime100MicroSec();
									demoState = 3;
									break;
								}
							} else {
								chargeContact = 0;
    1728:	10 92 53 04 	sts	0x0453, r1

								if(proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {
    172c:	80 91 6b 02 	lds	r24, 0x026B
    1730:	90 91 6c 02 	lds	r25, 0x026C
    1734:	e1 e0       	ldi	r30, 0x01	; 1
    1736:	83 3c       	cpi	r24, 0xC3	; 195
    1738:	9e 07       	cpc	r25, r30
    173a:	54 f1       	brlt	.+84     	; 0x1790 <main+0x15b4>
    173c:	20 91 6d 02 	lds	r18, 0x026D
    1740:	30 91 6e 02 	lds	r19, 0x026E
    1744:	f1 e0       	ldi	r31, 0x01	; 1
    1746:	23 3c       	cpi	r18, 0xC3	; 195
    1748:	3f 07       	cpc	r19, r31
    174a:	14 f1       	brlt	.+68     	; 0x1790 <main+0x15b4>
									outOfLine++;
    174c:	20 91 52 04 	lds	r18, 0x0452
    1750:	2f 5f       	subi	r18, 0xFF	; 255
    1752:	20 93 52 04 	sts	0x0452, r18
									if(outOfLine > 250) {
    1756:	2b 3f       	cpi	r18, 0xFB	; 251
    1758:	08 f4       	brcc	.+2      	; 0x175c <main+0x1580>
    175a:	e6 ce       	rjmp	.-564    	; 0x1528 <main+0x134c>
    175c:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <main+0x51a>
						break;

					case 1:
						irCommTasks();
						if(irCommDataAvailable()==1) {
							i = irCommReadData();
    1760:	0e 94 0a 4f 	call	0x9e14	; 0x9e14 <irCommReadData>
    1764:	9e c9       	rjmp	.-3268   	; 0xaa2 <main+0x8c6>
							disableObstacleAvoidance();

							demoEndTime = getTime100MicroSec();
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {	// the robot seems to be blocked somehow
								// go back for a while
								setRightSpeed(-20);
    1766:	8c ee       	ldi	r24, 0xEC	; 236
    1768:	0e 94 19 27 	call	0x4e32	; 0x4e32 <setRightSpeed>
								setLeftSpeed(-20);
    176c:	8c ee       	ldi	r24, 0xEC	; 236
    176e:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <setLeftSpeed>
								demoStartTime = getTime100MicroSec();
    1772:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <getTime100MicroSec>
    1776:	60 93 54 04 	sts	0x0454, r22
    177a:	70 93 55 04 	sts	0x0455, r23
    177e:	80 93 56 04 	sts	0x0456, r24
    1782:	90 93 57 04 	sts	0x0457, r25
								demoState = 4;
    1786:	84 e0       	ldi	r24, 0x04	; 4
    1788:	80 93 50 04 	sts	0x0450, r24
								break;
    178c:	0c 94 38 02 	jmp	0x470	; 0x470 <main+0x294>
										chargeContact = 0;
										demoState = 1;
										break;
									}
								} else {
									outOfLine = 0;
    1790:	10 92 52 04 	sts	0x0452, r1
    1794:	c9 ce       	rjmp	.-622    	; 0x1528 <main+0x134c>
					if(rgbState == 0) {
						pwm_red = 254;
						pwm_green = 255;
						pwm_blue = 255;
						rgbState = 1;
					} else if(rgbState == 1) {
    1796:	91 30       	cpi	r25, 0x01	; 1
    1798:	91 f1       	breq	.+100    	; 0x17fe <main+0x1622>
						pwm_red = 255;
						pwm_green = 254;
						pwm_blue = 255;
						rgbState = 2;
					} else if(rgbState == 2) {
    179a:	92 30       	cpi	r25, 0x02	; 2
    179c:	11 f0       	breq	.+4      	; 0x17a2 <main+0x15c6>
    179e:	0c 94 8d 03 	jmp	0x71a	; 0x71a <main+0x53e>
						pwm_red = 255;
    17a2:	10 93 0c 02 	sts	0x020C, r17
						pwm_green = 255;
    17a6:	10 93 0d 02 	sts	0x020D, r17
						pwm_blue = 254;
    17aa:	8e ef       	ldi	r24, 0xFE	; 254
    17ac:	80 93 0e 02 	sts	0x020E, r24
						rgbState = 0;
    17b0:	10 92 1c 03 	sts	0x031C, r1
    17b4:	0c 94 8d 03 	jmp	0x71a	; 0x71a <main+0x53e>
								//outOfLine++;
								//if(outOfLine > 250) {
								//	demoState = 1;
								//}
							} else {
								setRightSpeed(15);
    17b8:	8f e0       	ldi	r24, 0x0F	; 15
    17ba:	0e 94 19 27 	call	0x4e32	; 0x4e32 <setRightSpeed>
								setLeftSpeed(15);
    17be:	8f e0       	ldi	r24, 0x0F	; 15
    17c0:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <setLeftSpeed>
    17c4:	0c 94 38 02 	jmp	0x470	; 0x470 <main+0x294>
							//	irCommRxByteExpected=0;
							//}
							if(irCommRxByteExpected<255) {
								irCommRxByteExpected++;
							} else {
								irCommRxByteExpected = 0;
    17c8:	10 92 fc 04 	sts	0x04FC, r1
    17cc:	80 91 4c 04 	lds	r24, 0x044C
    17d0:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <main+0xf6>

							if(CHARGE_ON) {
								outOfLine = 0;
								chargeContact++;
								if(chargeContact > 20) {
									setLeftSpeed(0);
    17d4:	80 e0       	ldi	r24, 0x00	; 0
    17d6:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <setLeftSpeed>
									setRightSpeed(0);
    17da:	80 e0       	ldi	r24, 0x00	; 0
    17dc:	0e 94 19 27 	call	0x4e32	; 0x4e32 <setRightSpeed>
									demoStartTime = getTime100MicroSec();
    17e0:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <getTime100MicroSec>
    17e4:	60 93 54 04 	sts	0x0454, r22
    17e8:	70 93 55 04 	sts	0x0455, r23
    17ec:	80 93 56 04 	sts	0x0456, r24
    17f0:	90 93 57 04 	sts	0x0457, r25
									demoState = 3;
    17f4:	93 e0       	ldi	r25, 0x03	; 3
    17f6:	90 93 50 04 	sts	0x0450, r25
									break;
    17fa:	0c 94 38 02 	jmp	0x470	; 0x470 <main+0x294>
						pwm_red = 254;
						pwm_green = 255;
						pwm_blue = 255;
						rgbState = 1;
					} else if(rgbState == 1) {
						pwm_red = 255;
    17fe:	10 93 0c 02 	sts	0x020C, r17
						pwm_green = 254;
    1802:	5e ef       	ldi	r21, 0xFE	; 254
    1804:	50 93 0d 02 	sts	0x020D, r21
						pwm_blue = 255;
    1808:	10 93 0e 02 	sts	0x020E, r17
						rgbState = 2;
    180c:	62 e0       	ldi	r22, 0x02	; 2
    180e:	60 93 1c 03 	sts	0x031C, r22
    1812:	0c 94 8d 03 	jmp	0x71a	; 0x71a <main+0x53e>
							
							if(proximityResult[8]<LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR && proximityResult[11]>LINE_OUT_THR) {	// left ground is the only within the black line => turn left
								setLeftSpeed(-10);
								setRightSpeed(15);
							} else if(proximityResult[11]<LINE_OUT_THR && proximityResult[8]>LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {	// right ground is the only within the black line => turn right
								setLeftSpeed(15);
    1816:	8f e0       	ldi	r24, 0x0F	; 15
    1818:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <setLeftSpeed>
								setRightSpeed(-10);
    181c:	86 ef       	ldi	r24, 0xF6	; 246
    181e:	0e 94 19 27 	call	0x4e32	; 0x4e32 <setRightSpeed>
    1822:	0c 94 38 02 	jmp	0x470	; 0x470 <main+0x294>
									outOfLine = 0;
								}
							}
							
							if(proximityResult[8]<LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR && proximityResult[11]>LINE_OUT_THR) {	// left ground is the only within the black line => turn left
								setLeftSpeed(-10);
    1826:	86 ef       	ldi	r24, 0xF6	; 246
    1828:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <setLeftSpeed>
								setRightSpeed(15);
    182c:	8f e0       	ldi	r24, 0x0F	; 15
    182e:	0e 94 19 27 	call	0x4e32	; 0x4e32 <setRightSpeed>
    1832:	0c 94 38 02 	jmp	0x470	; 0x470 <main+0x294>

00001836 <SPI_WAIT>:
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	90 e0       	ldi	r25, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
    183a:	21 e0       	ldi	r18, 0x01	; 1
		}
	
		if(SPSR & _BV(SPIF)) {
    183c:	0d b4       	in	r0, 0x2d	; 45
    183e:	07 fc       	sbrc	r0, 7
    1840:	0a c0       	rjmp	.+20     	; 0x1856 <SPI_WAIT+0x20>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1842:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
    1844:	37 e2       	ldi	r19, 0x27	; 39
    1846:	80 31       	cpi	r24, 0x10	; 16
    1848:	93 07       	cpc	r25, r19
    184a:	c0 f3       	brcs	.-16     	; 0x183c <SPI_WAIT+0x6>
			spiCommError = 1;
    184c:	20 93 18 03 	sts	0x0318, r18
		}
	
		if(SPSR & _BV(SPIF)) {
    1850:	0d b4       	in	r0, 0x2d	; 45
    1852:	07 fe       	sbrs	r0, 7
    1854:	f6 cf       	rjmp	.-20     	; 0x1842 <SPI_WAIT+0xc>
			return;
		}
	}
}
    1856:	08 95       	ret

00001858 <initSPI>:

void initSPI() {

    SPI_DDR &= ~((1<<SPI_MOSI)|(1<<SPI_MISO)|(1<<SPI_SS)|(1<<SPI_SCK));
    1858:	84 b1       	in	r24, 0x04	; 4
    185a:	80 7f       	andi	r24, 0xF0	; 240
    185c:	84 b9       	out	0x04, r24	; 4
    // Define the following pins as output
    SPI_DDR |= ((1<<SPI_MOSI)|(1<<SPI_SS)|(1<<SPI_SCK));
    185e:	84 b1       	in	r24, 0x04	; 4
    1860:	87 60       	ori	r24, 0x07	; 7
    1862:	84 b9       	out	0x04, r24	; 4

    
    SPCR = ((1<<SPE)|               // SPI Enable
    1864:	80 e5       	ldi	r24, 0x50	; 80
    1866:	8c bd       	out	0x2c, r24	; 44
            (1<<MSTR)|              // 1:Master/ 0:Slave
            (0<<SPR1)|(0<<SPR0)|    // SPI Clock Rate => default 1/4 => 2 MHz
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR |= (1<<SPI2X);              // Double Clock Rate
    1868:	8d b5       	in	r24, 0x2d	; 45
    186a:	81 60       	ori	r24, 0x01	; 1
    186c:	8d bd       	out	0x2d, r24	; 45

}
    186e:	08 95       	ret

00001870 <closeSPI>:

void closeSPI() {

	SPCR = 0x00;
    1870:	1c bc       	out	0x2c, r1	; 44
	SPSR = 0x00;
    1872:	1d bc       	out	0x2d, r1	; 45
}
    1874:	08 95       	ret

00001876 <SPI_ReadWrite_Block>:

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1876:	44 23       	and	r20, r20
    1878:	09 f1       	breq	.+66     	; 0x18bc <SPI_ReadWrite_Block+0x46>
    187a:	a6 2f       	mov	r26, r22
    187c:	b7 2f       	mov	r27, r23
    187e:	e8 2f       	mov	r30, r24
    1880:	f9 2f       	mov	r31, r25
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
    1882:	91 e0       	ldi	r25, 0x01	; 1
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
    1884:	21 91       	ld	r18, Z+
    1886:	2e bd       	out	0x2e, r18	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1888:	21 e0       	ldi	r18, 0x01	; 1
    188a:	30 e0       	ldi	r19, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
    188c:	0d b4       	in	r0, 0x2d	; 45
    188e:	07 fc       	sbrc	r0, 7
    1890:	0b c0       	rjmp	.+22     	; 0x18a8 <SPI_ReadWrite_Block+0x32>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1892:	2f 5f       	subi	r18, 0xFF	; 255
    1894:	3f 4f       	sbci	r19, 0xFF	; 255
		if(timeout>=10000) {
    1896:	57 e2       	ldi	r21, 0x27	; 39
    1898:	20 31       	cpi	r18, 0x10	; 16
    189a:	35 07       	cpc	r19, r21
    189c:	b8 f3       	brcs	.-18     	; 0x188c <SPI_ReadWrite_Block+0x16>
			spiCommError = 1;
    189e:	90 93 18 03 	sts	0x0318, r25
		}
	
		if(SPSR & _BV(SPIF)) {
    18a2:	0d b4       	in	r0, 0x2d	; 45
    18a4:	07 fe       	sbrs	r0, 7
    18a6:	f5 cf       	rjmp	.-22     	; 0x1892 <SPI_ReadWrite_Block+0x1c>
void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
          SPI_WAIT();
		  if(spiCommError) {
    18a8:	20 91 18 03 	lds	r18, 0x0318
    18ac:	22 23       	and	r18, r18
    18ae:	31 f4       	brne	.+12     	; 0x18bc <SPI_ReadWrite_Block+0x46>
			return;
		  }
          buffer[i] = SPDR;
    18b0:	2e b5       	in	r18, 0x2e	; 46
    18b2:	2d 93       	st	X+, r18
	SPSR = 0x00;
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    18b4:	2e 2f       	mov	r18, r30
    18b6:	28 1b       	sub	r18, r24
    18b8:	24 17       	cp	r18, r20
    18ba:	20 f3       	brcs	.-56     	; 0x1884 <SPI_ReadWrite_Block+0xe>
    18bc:	08 95       	ret

000018be <SPI_Write_Block>:
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    18be:	66 23       	and	r22, r22
    18c0:	e9 f0       	breq	.+58     	; 0x18fc <SPI_Write_Block+0x3e>
    18c2:	e8 2f       	mov	r30, r24
    18c4:	f9 2f       	mov	r31, r25
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
    18c6:	91 e0       	ldi	r25, 0x01	; 1
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
    18c8:	21 91       	ld	r18, Z+
    18ca:	2e bd       	out	0x2e, r18	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    18cc:	21 e0       	ldi	r18, 0x01	; 1
    18ce:	30 e0       	ldi	r19, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
    18d0:	0d b4       	in	r0, 0x2d	; 45
    18d2:	07 fc       	sbrc	r0, 7
    18d4:	0b c0       	rjmp	.+22     	; 0x18ec <SPI_Write_Block+0x2e>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    18d6:	2f 5f       	subi	r18, 0xFF	; 255
    18d8:	3f 4f       	sbci	r19, 0xFF	; 255
		if(timeout>=10000) {
    18da:	47 e2       	ldi	r20, 0x27	; 39
    18dc:	20 31       	cpi	r18, 0x10	; 16
    18de:	34 07       	cpc	r19, r20
    18e0:	b8 f3       	brcs	.-18     	; 0x18d0 <SPI_Write_Block+0x12>
			spiCommError = 1;
    18e2:	90 93 18 03 	sts	0x0318, r25
		}
	
		if(SPSR & _BV(SPIF)) {
    18e6:	0d b4       	in	r0, 0x2d	; 45
    18e8:	07 fe       	sbrs	r0, 7
    18ea:	f5 cf       	rjmp	.-22     	; 0x18d6 <SPI_Write_Block+0x18>
void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
          SPI_WAIT();
		  if(spiCommError) {
    18ec:	20 91 18 03 	lds	r18, 0x0318
    18f0:	22 23       	and	r18, r18
    18f2:	21 f4       	brne	.+8      	; 0x18fc <SPI_Write_Block+0x3e>
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    18f4:	2e 2f       	mov	r18, r30
    18f6:	28 1b       	sub	r18, r24
    18f8:	26 17       	cp	r18, r22
    18fa:	30 f3       	brcs	.-52     	; 0x18c8 <SPI_Write_Block+0xa>
    18fc:	08 95       	ret

000018fe <SPI_Write_Byte>:
    }

}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    18fe:	8e bd       	out	0x2e, r24	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	90 e0       	ldi	r25, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
    1904:	21 e0       	ldi	r18, 0x01	; 1
		}
	
		if(SPSR & _BV(SPIF)) {
    1906:	0d b4       	in	r0, 0x2d	; 45
    1908:	07 fc       	sbrc	r0, 7
    190a:	0a c0       	rjmp	.+20     	; 0x1920 <SPI_Write_Byte+0x22>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    190c:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
    190e:	37 e2       	ldi	r19, 0x27	; 39
    1910:	80 31       	cpi	r24, 0x10	; 16
    1912:	93 07       	cpc	r25, r19
    1914:	c0 f3       	brcs	.-16     	; 0x1906 <SPI_Write_Byte+0x8>
			spiCommError = 1;
    1916:	20 93 18 03 	sts	0x0318, r18
		}
	
		if(SPSR & _BV(SPIF)) {
    191a:	0d b4       	in	r0, 0x2d	; 45
    191c:	07 fe       	sbrs	r0, 7
    191e:	f6 cf       	rjmp	.-20     	; 0x190c <SPI_Write_Byte+0xe>
}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    SPI_WAIT();
    return SPDR;
    1920:	8e b5       	in	r24, 0x2e	; 46
}
    1922:	08 95       	ret

00001924 <mirf_config>:


void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
    1924:	0f 93       	push	r16
    1926:	1f 93       	push	r17
    1928:	df 93       	push	r29
    192a:	cf 93       	push	r28
    192c:	00 d0       	rcall	.+0      	; 0x192e <mirf_config+0xa>
    192e:	cd b7       	in	r28, 0x3d	; 61
    1930:	de b7       	in	r29, 0x3e	; 62
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1932:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1934:	80 e2       	ldi	r24, 0x20	; 32
    1936:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    SPI_Write_Byte(value);
    193a:	8d e0       	ldi	r24, 0x0D	; 13
    193c:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    mirf_CSN_hi;
    1940:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1942:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1944:	83 e2       	ldi	r24, 0x23	; 35
    1946:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    SPI_Write_Byte(value);
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    mirf_CSN_hi;
    1950:	28 9a       	sbi	0x05, 0	; 5

	// address width
	mirf_config_register(SETUP_AW, 0x01);

	// tx address
	temp[0] = (rfAddress>>8)&0xFF;
    1952:	80 91 15 03 	lds	r24, 0x0315
    1956:	90 91 16 03 	lds	r25, 0x0316
    195a:	99 83       	std	Y+1, r25	; 0x01
	temp[1] = rfAddress & 0xFF;
    195c:	8a 83       	std	Y+2, r24	; 0x02
	temp[2] = 0x00;
    195e:	1b 82       	std	Y+3, r1	; 0x03
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1960:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1962:	80 e3       	ldi	r24, 0x30	; 48
    1964:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1968:	8e 01       	movw	r16, r28
    196a:	0f 5f       	subi	r16, 0xFF	; 255
    196c:	1f 4f       	sbci	r17, 0xFF	; 255
    196e:	c8 01       	movw	r24, r16
    1970:	63 e0       	ldi	r22, 0x03	; 3
    1972:	0e 94 5f 0c 	call	0x18be	; 0x18be <SPI_Write_Block>
    mirf_CSN_hi;
    1976:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1978:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    197a:	8a e2       	ldi	r24, 0x2A	; 42
    197c:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1980:	c8 01       	movw	r24, r16
    1982:	63 e0       	ldi	r22, 0x03	; 3
    1984:	0e 94 5f 0c 	call	0x18be	; 0x18be <SPI_Write_Block>
    mirf_CSN_hi;
    1988:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    198a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    198c:	81 e2       	ldi	r24, 0x21	; 33
    198e:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    mirf_CSN_hi;
    1998:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    199a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    199c:	82 e2       	ldi	r24, 0x22	; 34
    199e:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    SPI_Write_Byte(value);
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    mirf_CSN_hi;
    19a8:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    19aa:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    19ac:	84 e2       	ldi	r24, 0x24	; 36
    19ae:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    SPI_Write_Byte(value);
    19b2:	82 e1       	ldi	r24, 0x12	; 18
    19b4:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    mirf_CSN_hi;
    19b8:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    19ba:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    19bc:	85 e2       	ldi	r24, 0x25	; 37
    19be:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    SPI_Write_Byte(value);
    19c2:	88 e2       	ldi	r24, 0x28	; 40
    19c4:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    mirf_CSN_hi;
    19c8:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    19ca:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    19cc:	81 e3       	ldi	r24, 0x31	; 49
    19ce:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    SPI_Write_Byte(value);
    19d2:	8d e0       	ldi	r24, 0x0D	; 13
    19d4:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    mirf_CSN_hi;
    19d8:	28 9a       	sbi	0x05, 0	; 5

	// RX payload size; it isn't needed because the dynamic payload length is activated for ACK+PAYLOAD feature
    mirf_config_register(RX_PW_P0, PAYLOAD_SIZE);

	// enable extra features
    mirf_CSN_lo;
    19da:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_ACTIVATE);
    19dc:	80 e5       	ldi	r24, 0x50	; 80
    19de:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    SPI_Write_Byte(0x73);
    19e2:	83 e7       	ldi	r24, 0x73	; 115
    19e4:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    mirf_CSN_hi;
    19e8:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    19ea:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    19ec:	8c e3       	ldi	r24, 0x3C	; 60
    19ee:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    SPI_Write_Byte(value);
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    mirf_CSN_hi;
    19f8:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    19fa:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    19fc:	8d e3       	ldi	r24, 0x3D	; 61
    19fe:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1a02:	86 e0       	ldi	r24, 0x06	; 6
    1a04:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    mirf_CSN_hi;
    1a08:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1a0a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1a0c:	80 e2       	ldi	r24, 0x20	; 32
    1a0e:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1a12:	8f e0       	ldi	r24, 0x0F	; 15
    1a14:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    mirf_CSN_hi;
    1a18:	28 9a       	sbi	0x05, 0	; 5

    // Start receiver 
    //PTX = 0;        // Start in receiving mode
    //RX_POWERUP;     // Power up in receiving mode
    //mirf_CE_hi;     // Listening for pakets
}
    1a1a:	0f 90       	pop	r0
    1a1c:	0f 90       	pop	r0
    1a1e:	0f 90       	pop	r0
    1a20:	cf 91       	pop	r28
    1a22:	df 91       	pop	r29
    1a24:	1f 91       	pop	r17
    1a26:	0f 91       	pop	r16
    1a28:	08 95       	ret

00001a2a <mirf_init>:
// Initializes pins as interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    //DDRB |= ((1<<CSN)|(1<<CE));
    mirf_CE_hi;
    1a2a:	2c 9a       	sbi	0x05, 4	; 5
    mirf_CSN_hi;
    1a2c:	28 9a       	sbi	0x05, 0	; 5

	mirf_config();
    1a2e:	0e 94 92 0c 	call	0x1924	; 0x1924 <mirf_config>
}
    1a32:	08 95       	ret

00001a34 <mirf_set_RADDR>:
    //mirf_CE_hi;     // Listening for pakets
}

void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    1a34:	cf 93       	push	r28
    1a36:	df 93       	push	r29
    1a38:	ec 01       	movw	r28, r24
    mirf_CE_lo;
    1a3a:	2c 98       	cbi	0x05, 4	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1a3c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1a3e:	8a e2       	ldi	r24, 0x2A	; 42
    1a40:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1a44:	ce 01       	movw	r24, r28
    1a46:	65 e0       	ldi	r22, 0x05	; 5
    1a48:	0e 94 5f 0c 	call	0x18be	; 0x18be <SPI_Write_Block>
    mirf_CSN_hi;
    1a4c:	28 9a       	sbi	0x05, 0	; 5
void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    mirf_CE_lo;
    mirf_write_register(RX_ADDR_P0,adr,5);
    mirf_CE_hi;
    1a4e:	2c 9a       	sbi	0x05, 4	; 5
}
    1a50:	df 91       	pop	r29
    1a52:	cf 91       	pop	r28
    1a54:	08 95       	ret

00001a56 <mirf_set_TADDR>:

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
    1a56:	cf 93       	push	r28
    1a58:	df 93       	push	r29
    1a5a:	ec 01       	movw	r28, r24
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1a5c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1a5e:	80 e3       	ldi	r24, 0x30	; 48
    1a60:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1a64:	ce 01       	movw	r24, r28
    1a66:	65 e0       	ldi	r22, 0x05	; 5
    1a68:	0e 94 5f 0c 	call	0x18be	; 0x18be <SPI_Write_Block>
    mirf_CSN_hi;
    1a6c:	28 9a       	sbi	0x05, 0	; 5

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
	mirf_write_register(TX_ADDR, adr,5);
}
    1a6e:	df 91       	pop	r29
    1a70:	cf 91       	pop	r28
    1a72:	08 95       	ret

00001a74 <mirf_data_ready>:
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
    1a74:	80 91 15 05 	lds	r24, 0x0515
    1a78:	88 23       	and	r24, r24
    1a7a:	11 f0       	breq	.+4      	; 0x1a80 <mirf_data_ready+0xc>
    1a7c:	80 e0       	ldi	r24, 0x00	; 0
    mirf_CSN_lo;                                // Pull down chip select
    status = SPI_Write_Byte(NOP);               // Read status register
    mirf_CSN_hi;                                // Pull up chip select
    return status & (1<<RX_DR);

}
    1a7e:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    1a80:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
    1a82:	8f ef       	ldi	r24, 0xFF	; 255
    1a84:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
    1a88:	28 9a       	sbi	0x05, 0	; 5
    return status & (1<<RX_DR);
    1a8a:	80 74       	andi	r24, 0x40	; 64
    1a8c:	08 95       	ret

00001a8e <rx_fifo_is_empty>:

}

uint8_t rx_fifo_is_empty() {
    1a8e:	df 93       	push	r29
    1a90:	cf 93       	push	r28
    1a92:	0f 92       	push	r0
    1a94:	cd b7       	in	r28, 0x3d	; 61
    1a96:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t fifo_status = 0;
    1a98:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
    1a9a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    1a9c:	87 e1       	ldi	r24, 0x17	; 23
    1a9e:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    1aa2:	be 01       	movw	r22, r28
    1aa4:	6f 5f       	subi	r22, 0xFF	; 255
    1aa6:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa8:	cb 01       	movw	r24, r22
    1aaa:	41 e0       	ldi	r20, 0x01	; 1
    1aac:	0e 94 3b 0c 	call	0x1876	; 0x1876 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    1ab0:	28 9a       	sbi	0x05, 0	; 5
	
	uint8_t fifo_status = 0;

	mirf_read_register(FIFO_STATUS, &fifo_status, 1);
	
	return (uint8_t)(fifo_status&0x01);
    1ab2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ab4:	81 70       	andi	r24, 0x01	; 1
    1ab6:	0f 90       	pop	r0
    1ab8:	cf 91       	pop	r28
    1aba:	df 91       	pop	r29
    1abc:	08 95       	ret

00001abe <flush_rx_fifo>:

void flush_rx_fifo() {

    mirf_CSN_lo;
    1abe:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
    1ac0:	82 ee       	ldi	r24, 0xE2	; 226
    1ac2:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    mirf_CSN_hi;
    1ac6:	28 9a       	sbi	0x05, 0	; 5

}
    1ac8:	08 95       	ret

00001aca <mirf_get_data>:

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    1aca:	cf 93       	push	r28
    1acc:	df 93       	push	r29
    1ace:	ec 01       	movw	r28, r24
    mirf_CSN_lo;                               		// Pull down chip select
    1ad0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    1ad2:	81 e6       	ldi	r24, 0x61	; 97
    1ad4:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    1ad8:	ce 01       	movw	r24, r28
    1ada:	be 01       	movw	r22, r28
    1adc:	4d e0       	ldi	r20, 0x0D	; 13
    1ade:	0e 94 3b 0c 	call	0x1876	; 0x1876 <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
    1ae2:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1ae4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1ae6:	87 e2       	ldi	r24, 0x27	; 39
    1ae8:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1aec:	80 e4       	ldi	r24, 0x40	; 64
    1aee:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    mirf_CSN_hi;
    1af2:	28 9a       	sbi	0x05, 0	; 5
    mirf_CSN_lo;                               		// Pull down chip select
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    mirf_CSN_hi;                               		// Pull up chip select
    mirf_config_register(STATUS,(1<<RX_DR));   		// Reset status register
}
    1af4:	df 91       	pop	r29
    1af6:	cf 91       	pop	r28
    1af8:	08 95       	ret

00001afa <mirf_config_register>:

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    1afa:	df 93       	push	r29
    1afc:	cf 93       	push	r28
    1afe:	0f 92       	push	r0
    1b00:	cd b7       	in	r28, 0x3d	; 61
    1b02:	de b7       	in	r29, 0x3e	; 62
    mirf_CSN_lo;
    1b04:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1b06:	8f 71       	andi	r24, 0x1F	; 31
    1b08:	80 62       	ori	r24, 0x20	; 32
    1b0a:	69 83       	std	Y+1, r22	; 0x01
    1b0c:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1b10:	69 81       	ldd	r22, Y+1	; 0x01
    1b12:	86 2f       	mov	r24, r22
    1b14:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    mirf_CSN_hi;
    1b18:	28 9a       	sbi	0x05, 0	; 5
}
    1b1a:	0f 90       	pop	r0
    1b1c:	cf 91       	pop	r28
    1b1e:	df 91       	pop	r29
    1b20:	08 95       	ret

00001b22 <mirf_read_register>:

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    1b22:	0f 93       	push	r16
    1b24:	1f 93       	push	r17
    1b26:	df 93       	push	r29
    1b28:	cf 93       	push	r28
    1b2a:	0f 92       	push	r0
    1b2c:	cd b7       	in	r28, 0x3d	; 61
    1b2e:	de b7       	in	r29, 0x3e	; 62
    1b30:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    1b32:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    1b34:	8f 71       	andi	r24, 0x1F	; 31
    1b36:	49 83       	std	Y+1, r20	; 0x01
    1b38:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    1b3c:	c8 01       	movw	r24, r16
    1b3e:	b8 01       	movw	r22, r16
    1b40:	49 81       	ldd	r20, Y+1	; 0x01
    1b42:	0e 94 3b 0c 	call	0x1876	; 0x1876 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    1b46:	28 9a       	sbi	0x05, 0	; 5
}
    1b48:	0f 90       	pop	r0
    1b4a:	cf 91       	pop	r28
    1b4c:	df 91       	pop	r29
    1b4e:	1f 91       	pop	r17
    1b50:	0f 91       	pop	r16
    1b52:	08 95       	ret

00001b54 <mirf_write_register>:

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    1b54:	0f 93       	push	r16
    1b56:	1f 93       	push	r17
    1b58:	df 93       	push	r29
    1b5a:	cf 93       	push	r28
    1b5c:	0f 92       	push	r0
    1b5e:	cd b7       	in	r28, 0x3d	; 61
    1b60:	de b7       	in	r29, 0x3e	; 62
    1b62:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    1b64:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1b66:	8f 71       	andi	r24, 0x1F	; 31
    1b68:	80 62       	ori	r24, 0x20	; 32
    1b6a:	49 83       	std	Y+1, r20	; 0x01
    1b6c:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1b70:	c8 01       	movw	r24, r16
    1b72:	49 81       	ldd	r20, Y+1	; 0x01
    1b74:	64 2f       	mov	r22, r20
    1b76:	0e 94 5f 0c 	call	0x18be	; 0x18be <SPI_Write_Block>
    mirf_CSN_hi;
    1b7a:	28 9a       	sbi	0x05, 0	; 5
}
    1b7c:	0f 90       	pop	r0
    1b7e:	cf 91       	pop	r28
    1b80:	df 91       	pop	r29
    1b82:	1f 91       	pop	r17
    1b84:	0f 91       	pop	r16
    1b86:	08 95       	ret

00001b88 <mirf_send>:


void mirf_send(uint8_t * value, uint8_t len) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
    1b88:	0f 93       	push	r16
    1b8a:	1f 93       	push	r17
    1b8c:	df 93       	push	r29
    1b8e:	cf 93       	push	r28
    1b90:	0f 92       	push	r0
    1b92:	cd b7       	in	r28, 0x3d	; 61
    1b94:	de b7       	in	r29, 0x3e	; 62
    1b96:	8c 01       	movw	r16, r24
    while (PTX) {}                  // Wait until last paket is send
    1b98:	80 91 15 05 	lds	r24, 0x0515
    1b9c:	88 23       	and	r24, r24
    1b9e:	e1 f7       	brne	.-8      	; 0x1b98 <mirf_send+0x10>

    mirf_CE_lo;
    1ba0:	2c 98       	cbi	0x05, 4	; 5

    PTX = 1;                        // Set to transmitter mode
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	80 93 15 05 	sts	0x0515, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1ba8:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1baa:	80 e2       	ldi	r24, 0x20	; 32
    1bac:	69 83       	std	Y+1, r22	; 0x01
    1bae:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1bb2:	8a e4       	ldi	r24, 0x4A	; 74
    1bb4:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    mirf_CSN_hi;
    1bb8:	28 9a       	sbi	0x05, 0	; 5
    mirf_CE_lo;

    PTX = 1;                        // Set to transmitter mode
    TX_POWERUP;                     // Power up
    
    mirf_CSN_lo;                    // Pull down chip select
    1bba:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( FLUSH_TX );     // Write cmd to flush tx fifo
    1bbc:	81 ee       	ldi	r24, 0xE1	; 225
    1bbe:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    mirf_CSN_hi;                    // Pull up chip select
    1bc2:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CSN_lo;                    // Pull down chip select
    1bc4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( W_TX_PAYLOAD ); // Write cmd to write payload
    1bc6:	80 ea       	ldi	r24, 0xA0	; 160
    1bc8:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    SPI_Write_Block(value,len);   // Write payload
    1bcc:	c8 01       	movw	r24, r16
    1bce:	69 81       	ldd	r22, Y+1	; 0x01
    1bd0:	0e 94 5f 0c 	call	0x18be	; 0x18be <SPI_Write_Block>
    mirf_CSN_hi;                    // Pull up chip select
    1bd4:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CE_hi;                     // Start transmission
    1bd6:	2c 9a       	sbi	0x05, 4	; 5
}
    1bd8:	0f 90       	pop	r0
    1bda:	cf 91       	pop	r28
    1bdc:	df 91       	pop	r29
    1bde:	1f 91       	pop	r17
    1be0:	0f 91       	pop	r16
    1be2:	08 95       	ret

00001be4 <writeAckPayload>:

void writeAckPayload(unsigned char *data, unsigned char size) {
    1be4:	ef 92       	push	r14
    1be6:	ff 92       	push	r15
    1be8:	0f 93       	push	r16
    1bea:	1f 93       	push	r17
    1bec:	df 93       	push	r29
    1bee:	cf 93       	push	r28
    1bf0:	0f 92       	push	r0
    1bf2:	cd b7       	in	r28, 0x3d	; 61
    1bf4:	de b7       	in	r29, 0x3e	; 62
    1bf6:	18 2f       	mov	r17, r24
    1bf8:	06 2f       	mov	r16, r22
	return pWidth;
}

void flushTxFifo() {

    mirf_CSN_lo;
    1bfa:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    1bfc:	81 ee       	ldi	r24, 0xE1	; 225
    1bfe:	99 83       	std	Y+1, r25	; 0x01
    1c00:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    mirf_CSN_hi;
    1c04:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
    1c06:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
    1c08:	88 ea       	ldi	r24, 0xA8	; 168
    1c0a:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>

	for(k=0; k<size; k++) {
    1c0e:	99 81       	ldd	r25, Y+1	; 0x01
    1c10:	00 23       	and	r16, r16
    1c12:	61 f0       	breq	.+24     	; 0x1c2c <writeAckPayload+0x48>
    1c14:	61 2f       	mov	r22, r17
    1c16:	79 2f       	mov	r23, r25
    1c18:	7b 01       	movw	r14, r22
		SPI_Write_Byte(data[k]);
    1c1a:	f7 01       	movw	r30, r14
    1c1c:	81 91       	ld	r24, Z+
    1c1e:	7f 01       	movw	r14, r30
    1c20:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>

    mirf_CSN_lo;

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);

	for(k=0; k<size; k++) {
    1c24:	8e 2d       	mov	r24, r14
    1c26:	81 1b       	sub	r24, r17
    1c28:	80 17       	cp	r24, r16
    1c2a:	b8 f3       	brcs	.-18     	; 0x1c1a <writeAckPayload+0x36>
		SPI_Write_Byte(data[k]);
	}	

    mirf_CSN_hi;
    1c2c:	28 9a       	sbi	0x05, 0	; 5


}
    1c2e:	0f 90       	pop	r0
    1c30:	cf 91       	pop	r28
    1c32:	df 91       	pop	r29
    1c34:	1f 91       	pop	r17
    1c36:	0f 91       	pop	r16
    1c38:	ff 90       	pop	r15
    1c3a:	ef 90       	pop	r14
    1c3c:	08 95       	ret

00001c3e <readPayloadWidthFromTopFifo>:

uint8_t readPayloadWidthFromTopFifo() {
	uint8_t pWidth = 0;

    mirf_CSN_lo;
    1c3e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_R_RX_PL_WID);
    1c40:	80 e6       	ldi	r24, 0x60	; 96
    1c42:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
	pWidth = SPI_Write_Byte(NOP); 	// not specified in the datasheet but the "NRF_R_RX_PL_WID" has a parameter,
    1c46:	8f ef       	ldi	r24, 0xFF	; 255
    1c48:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
									// we need to send a NOP to receive the actual payload size
    mirf_CSN_hi;
    1c4c:	28 9a       	sbi	0x05, 0	; 5
	
	return pWidth;
}
    1c4e:	08 95       	ret

00001c50 <readPayloadWidthFromPipe0>:

uint8_t readPayloadWidthFromPipe0() {
    1c50:	df 93       	push	r29
    1c52:	cf 93       	push	r28
    1c54:	0f 92       	push	r0
    1c56:	cd b7       	in	r28, 0x3d	; 61
    1c58:	de b7       	in	r29, 0x3e	; 62
	uint8_t pWidth = 0;
    1c5a:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
    1c5c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    1c5e:	81 e1       	ldi	r24, 0x11	; 17
    1c60:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    1c64:	be 01       	movw	r22, r28
    1c66:	6f 5f       	subi	r22, 0xFF	; 255
    1c68:	7f 4f       	sbci	r23, 0xFF	; 255
    1c6a:	cb 01       	movw	r24, r22
    1c6c:	41 e0       	ldi	r20, 0x01	; 1
    1c6e:	0e 94 3b 0c 	call	0x1876	; 0x1876 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    1c72:	28 9a       	sbi	0x05, 0	; 5
	uint8_t pWidth = 0;

	mirf_read_register(RX_PW_P0, &pWidth, 1);
	
	return pWidth;
}
    1c74:	89 81       	ldd	r24, Y+1	; 0x01
    1c76:	0f 90       	pop	r0
    1c78:	cf 91       	pop	r28
    1c7a:	df 91       	pop	r29
    1c7c:	08 95       	ret

00001c7e <flushTxFifo>:

void flushTxFifo() {

    mirf_CSN_lo;
    1c7e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    1c80:	81 ee       	ldi	r24, 0xE1	; 225
    1c82:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    mirf_CSN_hi;
    1c86:	28 9a       	sbi	0x05, 0	; 5

}
    1c88:	08 95       	ret

00001c8a <handleRFCommands>:

void handleRFCommands() {
    1c8a:	ff 92       	push	r15
    1c8c:	0f 93       	push	r16
    1c8e:	1f 93       	push	r17
    1c90:	df 93       	push	r29
    1c92:	cf 93       	push	r28
    1c94:	0f 92       	push	r0
    1c96:	cd b7       	in	r28, 0x3d	; 61
    1c98:	de b7       	in	r29, 0x3e	; 62
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
    1c9a:	80 91 15 05 	lds	r24, 0x0515
    1c9e:	88 23       	and	r24, r24
    1ca0:	39 f0       	breq	.+14     	; 0x1cb0 <handleRFCommands+0x26>

		

	}

}
    1ca2:	0f 90       	pop	r0
    1ca4:	cf 91       	pop	r28
    1ca6:	df 91       	pop	r29
    1ca8:	1f 91       	pop	r17
    1caa:	0f 91       	pop	r16
    1cac:	ff 90       	pop	r15
    1cae:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    1cb0:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
    1cb2:	8f ef       	ldi	r24, 0xFF	; 255
    1cb4:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
    1cb8:	28 9a       	sbi	0x05, 0	; 5

	unsigned int i=0;
	//uint8_t pWidth = 0;
	//uint8_t pWidthP0 = 0;

	if(mirf_data_ready()) {
    1cba:	86 ff       	sbrs	r24, 6
    1cbc:	f2 cf       	rjmp	.-28     	; 0x1ca2 <handleRFCommands+0x18>
		//if(spiCommError) {
		//	usart0Transmit(0xFE,1);
		//	return;
		//}

		rfFlags |= 0x02;
    1cbe:	80 91 17 03 	lds	r24, 0x0317
    1cc2:	82 60       	ori	r24, 0x02	; 2
    1cc4:	80 93 17 03 	sts	0x0317, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1cc8:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1cca:	87 e2       	ldi	r24, 0x27	; 39
    1ccc:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1cd0:	80 e7       	ldi	r24, 0x70	; 112
    1cd2:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    mirf_CSN_hi;
    1cd6:	28 9a       	sbi	0x05, 0	; 5

}

uint8_t rx_fifo_is_empty() {
	
	uint8_t fifo_status = 0;
    1cd8:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
    1cda:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    1cdc:	87 e1       	ldi	r24, 0x17	; 23
    1cde:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    1ce2:	be 01       	movw	r22, r28
    1ce4:	6f 5f       	subi	r22, 0xFF	; 255
    1ce6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ce8:	cb 01       	movw	r24, r22
    1cea:	41 e0       	ldi	r20, 0x01	; 1
    1cec:	0e 94 3b 0c 	call	0x1876	; 0x1876 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    1cf0:	28 9a       	sbi	0x05, 0	; 5
	
	uint8_t fifo_status = 0;

	mirf_read_register(FIFO_STATUS, &fifo_status, 1);
	
	return (uint8_t)(fifo_status&0x01);
    1cf2:	89 81       	ldd	r24, Y+1	; 0x01
		// aren't present in the fifo with consequent wrong data read and wrong behavior of the robot.
		// To avoid this situtation we add this check before actually reading from the fifo to be 
		// sure there are correct data to be read.
		// We don't know why the IRQ for data reception is raised, maybe is not correctly reset sometimes
		// or it is raised when it shouldn't...
		if(rx_fifo_is_empty()) {
    1cf4:	80 fd       	sbrc	r24, 0
    1cf6:	d5 cf       	rjmp	.-86     	; 0x1ca2 <handleRFCommands+0x18>
}

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    mirf_CSN_lo;                               		// Pull down chip select
    1cf8:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    1cfa:	81 e6       	ldi	r24, 0x61	; 97
    1cfc:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    1d00:	8c e6       	ldi	r24, 0x6C	; 108
    1d02:	99 e0       	ldi	r25, 0x09	; 9
    1d04:	bc 01       	movw	r22, r24
    1d06:	4d e0       	ldi	r20, 0x0D	; 13
    1d08:	0e 94 3b 0c 	call	0x1876	; 0x1876 <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
    1d0c:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1d0e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1d10:	87 e2       	ldi	r24, 0x27	; 39
    1d12:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1d16:	80 e4       	ldi	r24, 0x40	; 64
    1d18:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    mirf_CSN_hi;
    1d1c:	28 9a       	sbi	0x05, 0	; 5
	return (uint8_t)(fifo_status&0x01);
}

void flush_rx_fifo() {

    mirf_CSN_lo;
    1d1e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
    1d20:	82 ee       	ldi	r24, 0xE2	; 226
    1d22:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    mirf_CSN_hi;
    1d26:	28 9a       	sbi	0x05, 0	; 5
		mirf_get_data(rfData);
		flush_rx_fifo();

		//usartTransmit(rfData[0]);

		if(rfDebugMode==1) {
    1d28:	80 91 19 03 	lds	r24, 0x0319
    1d2c:	81 30       	cpi	r24, 0x01	; 1
    1d2e:	09 f4       	brne	.+2      	; 0x1d32 <handleRFCommands+0xa8>
    1d30:	4b c1       	rjmp	.+662    	; 0x1fc8 <handleRFCommands+0x33e>

			//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
			// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
			// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    1d32:	40 91 6c 09 	lds	r20, 0x096C
    1d36:	24 2f       	mov	r18, r20
    1d38:	44 23       	and	r20, r20
    1d3a:	09 f0       	breq	.+2      	; 0x1d3e <handleRFCommands+0xb4>
    1d3c:	9c c1       	rjmp	.+824    	; 0x2076 <handleRFCommands+0x3ec>
    1d3e:	50 91 6d 09 	lds	r21, 0x096D
    1d42:	e5 2f       	mov	r30, r21
    1d44:	55 23       	and	r21, r21
    1d46:	09 f4       	brne	.+2      	; 0x1d4a <handleRFCommands+0xc0>
    1d48:	10 c2       	rjmp	.+1056   	; 0x216a <handleRFCommands+0x4e0>

				sleep(60);
    1d4a:	00 91 6e 09 	lds	r16, 0x096E

			}

			if(calibrateOdomFlag==0) { 
    1d4e:	80 91 4e 05 	lds	r24, 0x054E
    1d52:	88 23       	and	r24, r24
    1d54:	41 f5       	brne	.+80     	; 0x1da6 <handleRFCommands+0x11c>
				speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    1d56:	70 91 70 09 	lds	r23, 0x0970
    1d5a:	27 2f       	mov	r18, r23
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	2f 77       	andi	r18, 0x7F	; 127
    1d60:	30 70       	andi	r19, 0x00	; 0
    1d62:	30 93 14 03 	sts	0x0314, r19
    1d66:	20 93 13 03 	sts	0x0313, r18
				speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
    1d6a:	60 91 71 09 	lds	r22, 0x0971
    1d6e:	86 2f       	mov	r24, r22
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	8f 77       	andi	r24, 0x7F	; 127
    1d74:	90 70       	andi	r25, 0x00	; 0
    1d76:	90 93 12 03 	sts	0x0312, r25
    1d7a:	80 93 11 03 	sts	0x0311, r24
											// in the same range of the measured speed that is 0..800.
											// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
											// this means that the range is more or less 0..400.


				if((rfData[4]&0x80)==0x80) {			// motor right forward
    1d7e:	77 fd       	sbrc	r23, 7
    1d80:	03 c0       	rjmp	.+6      	; 0x1d88 <handleRFCommands+0xfe>
					pwm_right_desired = speedr; 		// speed received (0..127) is expressed in 1/5 of mm/s (0..635 mm/s)
				} else {								// backward
					pwm_right_desired = -(speedr);
    1d82:	30 95       	com	r19
    1d84:	21 95       	neg	r18
    1d86:	3f 4f       	sbci	r19, 0xFF	; 255
    1d88:	30 93 fa 02 	sts	0x02FA, r19
    1d8c:	20 93 f9 02 	sts	0x02F9, r18
				}

				if((rfData[5]&0x80)==0x80) {			// motor left forward
    1d90:	67 fd       	sbrc	r22, 7
    1d92:	03 c0       	rjmp	.+6      	; 0x1d9a <handleRFCommands+0x110>
					pwm_left_desired = speedl;
				} else {								// backward
					pwm_left_desired = -(speedl);
    1d94:	90 95       	com	r25
    1d96:	81 95       	neg	r24
    1d98:	9f 4f       	sbci	r25, 0xFF	; 255
    1d9a:	90 93 fc 02 	sts	0x02FC, r25
    1d9e:	80 93 fb 02 	sts	0x02FB, r24
    1da2:	24 2f       	mov	r18, r20
    1da4:	e5 2f       	mov	r30, r21

			}


			for(i=0; i<3; i++) {
				dataLED[i]=rfData[i]&0xFF;
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	30 93 55 09 	sts	0x0955, r19
    1dac:	20 93 54 09 	sts	0x0954, r18
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	f0 93 57 09 	sts	0x0957, r31
    1db6:	e0 93 56 09 	sts	0x0956, r30
    1dba:	10 e0       	ldi	r17, 0x00	; 0
    1dbc:	10 93 59 09 	sts	0x0959, r17
    1dc0:	00 93 58 09 	sts	0x0958, r16
			}
			pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
    1dc4:	92 2f       	mov	r25, r18
    1dc6:	88 27       	eor	r24, r24
    1dc8:	82 1b       	sub	r24, r18
    1dca:	93 0b       	sbc	r25, r19
    1dcc:	24 e6       	ldi	r18, 0x64	; 100
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	b9 01       	movw	r22, r18
    1dd2:	0e 94 3a 52 	call	0xa474	; 0xa474 <__udivmodhi4>
    1dd6:	f6 2e       	mov	r15, r22
    1dd8:	f0 94       	com	r15
    1dda:	f0 92 0c 02 	sts	0x020C, r15
			pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
    1dde:	5e 2f       	mov	r21, r30
    1de0:	44 27       	eor	r20, r20
    1de2:	4e 1b       	sub	r20, r30
    1de4:	5f 0b       	sbc	r21, r31
    1de6:	ca 01       	movw	r24, r20
    1de8:	b9 01       	movw	r22, r18
    1dea:	0e 94 3a 52 	call	0xa474	; 0xa474 <__udivmodhi4>
    1dee:	60 95       	com	r22
    1df0:	60 93 0e 02 	sts	0x020E, r22
			pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
    1df4:	50 2f       	mov	r21, r16
    1df6:	44 27       	eor	r20, r20
    1df8:	40 1b       	sub	r20, r16
    1dfa:	51 0b       	sbc	r21, r17
    1dfc:	ca 01       	movw	r24, r20
    1dfe:	b9 01       	movw	r22, r18
    1e00:	0e 94 3a 52 	call	0xa474	; 0xa474 <__udivmodhi4>
    1e04:	60 95       	com	r22
    1e06:	60 93 0d 02 	sts	0x020D, r22
			updateRedLed(pwm_red);
    1e0a:	8f 2d       	mov	r24, r15
    1e0c:	0e 94 32 3b 	call	0x7664	; 0x7664 <updateRedLed>
			updateGreenLed(pwm_green);
    1e10:	80 91 0d 02 	lds	r24, 0x020D
    1e14:	0e 94 46 3b 	call	0x768c	; 0x768c <updateGreenLed>
			updateBlueLed(pwm_blue);
    1e18:	80 91 0e 02 	lds	r24, 0x020E
    1e1c:	0e 94 5a 3b 	call	0x76b4	; 0x76b4 <updateBlueLed>


			if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
    1e20:	80 91 6f 09 	lds	r24, 0x096F
    1e24:	80 ff       	sbrs	r24, 0
    1e26:	59 c1       	rjmp	.+690    	; 0x20da <handleRFCommands+0x450>
				LED_IR1_LOW;
    1e28:	44 98       	cbi	0x08, 4	; 8
			} else {
				LED_IR1_HIGH;
			}

			if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
    1e2a:	81 ff       	sbrs	r24, 1
    1e2c:	54 c1       	rjmp	.+680    	; 0x20d6 <handleRFCommands+0x44c>
				LED_IR2_LOW;
    1e2e:	45 98       	cbi	0x08, 5	; 8
			} else {
				LED_IR2_HIGH;
			}

			if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
    1e30:	98 2f       	mov	r25, r24
    1e32:	82 ff       	sbrs	r24, 2
    1e34:	4d c1       	rjmp	.+666    	; 0x20d0 <handleRFCommands+0x446>
				irEnabled = 1;
    1e36:	21 e0       	ldi	r18, 0x01	; 1
    1e38:	20 93 12 02 	sts	0x0212, r18
			} else {
				irEnabled = 0;
			}

			if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
    1e3c:	84 fd       	sbrc	r24, 4
    1e3e:	a2 c1       	rjmp	.+836    	; 0x2184 <handleRFCommands+0x4fa>
				calibrateSensors();
				resetOdometry();
			}

			if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
    1e40:	86 ff       	sbrs	r24, 6
    1e42:	43 c1       	rjmp	.+646    	; 0x20ca <handleRFCommands+0x440>
				obstacleAvoidanceEnabled = 1;
    1e44:	81 e0       	ldi	r24, 0x01	; 1
    1e46:	80 93 6c 04 	sts	0x046C, r24
			} else {
				obstacleAvoidanceEnabled = 0;
			}

			if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
    1e4a:	97 fd       	sbrc	r25, 7
    1e4c:	c6 c1       	rjmp	.+908    	; 0x21da <handleRFCommands+0x550>
				cliffAvoidanceEnabled = 1;
			} else {
				cliffAvoidanceEnabled = 0;
    1e4e:	10 92 6d 04 	sts	0x046D, r1
			}

			// handle small green leds
			#ifdef HW_REV_3_1			

				if(bit_is_set(rfData[6], 0) ) {
    1e52:	80 91 72 09 	lds	r24, 0x0972
    1e56:	80 ff       	sbrs	r24, 0
    1e58:	32 c1       	rjmp	.+612    	; 0x20be <handleRFCommands+0x434>
					GREEN_LED0_ON;
    1e5a:	80 91 0b 01 	lds	r24, 0x010B
    1e5e:	8e 7f       	andi	r24, 0xFE	; 254
    1e60:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED0_OFF;
				}
				
				if(bit_is_set(rfData[6], 1) ) {
    1e64:	80 91 72 09 	lds	r24, 0x0972
    1e68:	81 ff       	sbrs	r24, 1
    1e6a:	23 c1       	rjmp	.+582    	; 0x20b2 <handleRFCommands+0x428>
					GREEN_LED1_ON;
    1e6c:	80 91 0b 01 	lds	r24, 0x010B
    1e70:	8d 7f       	andi	r24, 0xFD	; 253
    1e72:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED1_OFF;
				}
				
				if(bit_is_set(rfData[6], 2) ) {
    1e76:	80 91 72 09 	lds	r24, 0x0972
    1e7a:	82 ff       	sbrs	r24, 2
    1e7c:	14 c1       	rjmp	.+552    	; 0x20a6 <handleRFCommands+0x41c>
					GREEN_LED2_ON;
    1e7e:	80 91 0b 01 	lds	r24, 0x010B
    1e82:	8b 7f       	andi	r24, 0xFB	; 251
    1e84:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED2_OFF;
				}												

				if(bit_is_set(rfData[6], 3) ) {
    1e88:	80 91 72 09 	lds	r24, 0x0972
    1e8c:	83 ff       	sbrs	r24, 3
    1e8e:	09 c1       	rjmp	.+530    	; 0x20a2 <handleRFCommands+0x418>
					GREEN_LED3_ON;
    1e90:	a3 98       	cbi	0x14, 3	; 20
				} else {
					GREEN_LED3_OFF;
				}

				if(bit_is_set(rfData[6], 4) ) {
    1e92:	80 91 72 09 	lds	r24, 0x0972
    1e96:	84 ff       	sbrs	r24, 4
    1e98:	fe c0       	rjmp	.+508    	; 0x2096 <handleRFCommands+0x40c>
					GREEN_LED4_ON;
    1e9a:	80 91 0b 01 	lds	r24, 0x010B
    1e9e:	8f 7e       	andi	r24, 0xEF	; 239
    1ea0:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED4_OFF;
				}

				if(bit_is_set(rfData[6], 5) ) {
    1ea4:	80 91 72 09 	lds	r24, 0x0972
    1ea8:	85 ff       	sbrs	r24, 5
    1eaa:	ef c0       	rjmp	.+478    	; 0x208a <handleRFCommands+0x400>
					GREEN_LED5_ON;
    1eac:	80 91 0b 01 	lds	r24, 0x010B
    1eb0:	8f 7d       	andi	r24, 0xDF	; 223
    1eb2:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED5_OFF;
				}

				if(bit_is_set(rfData[6], 6) ) {
    1eb6:	80 91 72 09 	lds	r24, 0x0972
    1eba:	86 ff       	sbrs	r24, 6
    1ebc:	e0 c0       	rjmp	.+448    	; 0x207e <handleRFCommands+0x3f4>
					GREEN_LED6_ON;
    1ebe:	80 91 0b 01 	lds	r24, 0x010B
    1ec2:	8f 7b       	andi	r24, 0xBF	; 191
    1ec4:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED6_OFF;
				}

				if(bit_is_set(rfData[6], 7) ) {
    1ec8:	80 91 72 09 	lds	r24, 0x0972
    1ecc:	87 fd       	sbrc	r24, 7
    1ece:	7f c1       	rjmp	.+766    	; 0x21ce <handleRFCommands+0x544>
					GREEN_LED7_ON;
				} else {
					GREEN_LED7_OFF;
    1ed0:	80 91 0b 01 	lds	r24, 0x010B
    1ed4:	80 68       	ori	r24, 0x80	; 128
    1ed6:	80 93 0b 01 	sts	0x010B, r24
				}

			#endif
		
			if(currentSelector == 8) {
    1eda:	80 91 4c 04 	lds	r24, 0x044C
    1ede:	88 30       	cpi	r24, 0x08	; 8
    1ee0:	09 f4       	brne	.+2      	; 0x1ee4 <handleRFCommands+0x25a>
    1ee2:	58 c1       	rjmp	.+688    	; 0x2194 <handleRFCommands+0x50a>

			// read and handle the remaining bytes of the payload (at the moment not used)


			// write back the ack payload
			ackPayload[0] = packetId&0xFF;
    1ee4:	80 91 0b 02 	lds	r24, 0x020B
    1ee8:	80 93 a4 08 	sts	0x08A4, r24

			switch(packetId) {
    1eec:	85 30       	cpi	r24, 0x05	; 5
    1eee:	09 f4       	brne	.+2      	; 0x1ef2 <handleRFCommands+0x268>
    1ef0:	78 c1       	rjmp	.+752    	; 0x21e2 <handleRFCommands+0x558>
    1ef2:	86 30       	cpi	r24, 0x06	; 6
    1ef4:	08 f4       	brcc	.+2      	; 0x1ef8 <handleRFCommands+0x26e>
    1ef6:	f3 c0       	rjmp	.+486    	; 0x20de <handleRFCommands+0x454>
    1ef8:	86 30       	cpi	r24, 0x06	; 6
    1efa:	09 f4       	brne	.+2      	; 0x1efe <handleRFCommands+0x274>
    1efc:	34 c2       	rjmp	.+1128   	; 0x2366 <__stack+0x167>
    1efe:	87 30       	cpi	r24, 0x07	; 7
    1f00:	09 f0       	breq	.+2      	; 0x1f04 <handleRFCommands+0x27a>
    1f02:	62 c0       	rjmp	.+196    	; 0x1fc8 <handleRFCommands+0x33e>
					packetId = 7;
					break;


				case 7:
					ackPayload[1] = ((signed long int)leftMotSteps)&0xFF;
    1f04:	60 91 d5 02 	lds	r22, 0x02D5
    1f08:	70 91 d6 02 	lds	r23, 0x02D6
    1f0c:	80 91 d7 02 	lds	r24, 0x02D7
    1f10:	90 91 d8 02 	lds	r25, 0x02D8
    1f14:	0e 94 48 50 	call	0xa090	; 0xa090 <__fixsfsi>
    1f18:	60 93 a5 08 	sts	0x08A5, r22
					ackPayload[2] = ((signed long int)leftMotSteps)>>8;
    1f1c:	70 93 a6 08 	sts	0x08A6, r23
					ackPayload[3] = ((signed long int)leftMotSteps)>>16;
    1f20:	80 93 a7 08 	sts	0x08A7, r24
					ackPayload[4] = ((signed long int)leftMotSteps)>>24;
    1f24:	90 93 a8 08 	sts	0x08A8, r25
					ackPayload[5] = ((signed long int)rightMotSteps)&0xFF;
    1f28:	60 91 d1 02 	lds	r22, 0x02D1
    1f2c:	70 91 d2 02 	lds	r23, 0x02D2
    1f30:	80 91 d3 02 	lds	r24, 0x02D3
    1f34:	90 91 d4 02 	lds	r25, 0x02D4
    1f38:	0e 94 48 50 	call	0xa090	; 0xa090 <__fixsfsi>
    1f3c:	60 93 a9 08 	sts	0x08A9, r22
					ackPayload[6] = ((signed long int)rightMotSteps)>>8;
    1f40:	70 93 aa 08 	sts	0x08AA, r23
					ackPayload[7] = ((signed long int)rightMotSteps)>>16;
    1f44:	80 93 ab 08 	sts	0x08AB, r24
					ackPayload[8] = ((signed long int)rightMotSteps)>>24;
    1f48:	90 93 ac 08 	sts	0x08AC, r25
					lastTheta = theta;
    1f4c:	60 91 6f 04 	lds	r22, 0x046F
    1f50:	70 91 70 04 	lds	r23, 0x0470
    1f54:	80 91 71 04 	lds	r24, 0x0471
    1f58:	90 91 72 04 	lds	r25, 0x0472
    1f5c:	60 93 73 04 	sts	0x0473, r22
    1f60:	70 93 74 04 	sts	0x0474, r23
    1f64:	80 93 75 04 	sts	0x0475, r24
    1f68:	90 93 76 04 	sts	0x0476, r25
					ackPayload[9] = ((signed int)(lastTheta*573.0))&0xFF;	// radians to degrees => 573 = 1800/PI
    1f6c:	20 e0       	ldi	r18, 0x00	; 0
    1f6e:	30 e4       	ldi	r19, 0x40	; 64
    1f70:	4f e0       	ldi	r20, 0x0F	; 15
    1f72:	54 e4       	ldi	r21, 0x44	; 68
    1f74:	0e 94 90 51 	call	0xa320	; 0xa320 <__mulsf3>
    1f78:	0e 94 48 50 	call	0xa090	; 0xa090 <__fixsfsi>
    1f7c:	26 2f       	mov	r18, r22
    1f7e:	20 93 ad 08 	sts	0x08AD, r18
					ackPayload[10] = ((signed int)(lastTheta*573.0))>>8;				
    1f82:	70 93 ae 08 	sts	0x08AE, r23
					ackPayload[11] = ((unsigned int)xPos)&0xFF;
    1f86:	60 91 77 04 	lds	r22, 0x0477
    1f8a:	70 91 78 04 	lds	r23, 0x0478
    1f8e:	80 91 79 04 	lds	r24, 0x0479
    1f92:	90 91 7a 04 	lds	r25, 0x047A
    1f96:	0e 94 4d 50 	call	0xa09a	; 0xa09a <__fixunssfsi>
    1f9a:	60 93 af 08 	sts	0x08AF, r22
					ackPayload[12] = ((unsigned int)xPos)>>8;
    1f9e:	70 93 b0 08 	sts	0x08B0, r23
					ackPayload[13] = ((unsigned int)yPos)&0xFF;
    1fa2:	60 91 7b 04 	lds	r22, 0x047B
    1fa6:	70 91 7c 04 	lds	r23, 0x047C
    1faa:	80 91 7d 04 	lds	r24, 0x047D
    1fae:	90 91 7e 04 	lds	r25, 0x047E
    1fb2:	0e 94 4d 50 	call	0xa09a	; 0xa09a <__fixunssfsi>
    1fb6:	60 93 b1 08 	sts	0x08B1, r22
					ackPayload[14] = ((unsigned int)yPos)>>8;
    1fba:	70 93 b2 08 	sts	0x08B2, r23
					//ackPayload[10] = ((unsigned int)(thetaOld*573.0))>>8;
					//ackPayload[11] = ((unsigned int)xPosOld)&0xFF;
					//ackPayload[12] = ((unsigned int)xPosOld)>>8;
					//ackPayload[13] = ((unsigned int)yPosOld)&0xFF;
					//ackPayload[14] = ((unsigned int)yPosOld)>>8;
					ackPayload[15] = 0;
    1fbe:	10 92 b3 08 	sts	0x08B3, r1
					packetId = 3;
    1fc2:	83 e0       	ldi	r24, 0x03	; 3
    1fc4:	80 93 0b 02 	sts	0x020B, r24
	return pWidth;
}

void flushTxFifo() {

    mirf_CSN_lo;
    1fc8:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    1fca:	81 ee       	ldi	r24, 0xE1	; 225
    1fcc:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    mirf_CSN_hi;
    1fd0:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
    1fd2:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
    1fd4:	88 ea       	ldi	r24, 0xA8	; 168
    1fd6:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>

	for(k=0; k<size; k++) {
		SPI_Write_Byte(data[k]);
    1fda:	80 91 a4 08 	lds	r24, 0x08A4
    1fde:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    1fe2:	80 91 a5 08 	lds	r24, 0x08A5
    1fe6:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    1fea:	80 91 a6 08 	lds	r24, 0x08A6
    1fee:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    1ff2:	80 91 a7 08 	lds	r24, 0x08A7
    1ff6:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    1ffa:	80 91 a8 08 	lds	r24, 0x08A8
    1ffe:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    2002:	80 91 a9 08 	lds	r24, 0x08A9
    2006:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    200a:	80 91 aa 08 	lds	r24, 0x08AA
    200e:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    2012:	80 91 ab 08 	lds	r24, 0x08AB
    2016:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    201a:	80 91 ac 08 	lds	r24, 0x08AC
    201e:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    2022:	80 91 ad 08 	lds	r24, 0x08AD
    2026:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    202a:	80 91 ae 08 	lds	r24, 0x08AE
    202e:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    2032:	80 91 af 08 	lds	r24, 0x08AF
    2036:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    203a:	80 91 b0 08 	lds	r24, 0x08B0
    203e:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    2042:	80 91 b1 08 	lds	r24, 0x08B1
    2046:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    204a:	80 91 b2 08 	lds	r24, 0x08B2
    204e:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
    2052:	80 91 b3 08 	lds	r24, 0x08B3
    2056:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <SPI_Write_Byte>
	}	

    mirf_CSN_hi;
    205a:	28 9a       	sbi	0x05, 0	; 5

		

	}

}
    205c:	0f 90       	pop	r0
    205e:	cf 91       	pop	r28
    2060:	df 91       	pop	r29
    2062:	1f 91       	pop	r17
    2064:	0f 91       	pop	r16
    2066:	ff 90       	pop	r15
    2068:	08 95       	ret
			// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
			// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {

				sleep(60);
    206a:	8c e3       	ldi	r24, 0x3C	; 60
    206c:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <sleep>
    2070:	40 91 6c 09 	lds	r20, 0x096C
    2074:	24 2f       	mov	r18, r20
    2076:	50 91 6d 09 	lds	r21, 0x096D
    207a:	e5 2f       	mov	r30, r21
    207c:	66 ce       	rjmp	.-820    	; 0x1d4a <handleRFCommands+0xc0>
				}

				if(bit_is_set(rfData[6], 6) ) {
					GREEN_LED6_ON;
				} else {
					GREEN_LED6_OFF;
    207e:	80 91 0b 01 	lds	r24, 0x010B
    2082:	80 64       	ori	r24, 0x40	; 64
    2084:	80 93 0b 01 	sts	0x010B, r24
    2088:	1f cf       	rjmp	.-450    	; 0x1ec8 <handleRFCommands+0x23e>
				}

				if(bit_is_set(rfData[6], 5) ) {
					GREEN_LED5_ON;
				} else {
					GREEN_LED5_OFF;
    208a:	80 91 0b 01 	lds	r24, 0x010B
    208e:	80 62       	ori	r24, 0x20	; 32
    2090:	80 93 0b 01 	sts	0x010B, r24
    2094:	10 cf       	rjmp	.-480    	; 0x1eb6 <handleRFCommands+0x22c>
				}

				if(bit_is_set(rfData[6], 4) ) {
					GREEN_LED4_ON;
				} else {
					GREEN_LED4_OFF;
    2096:	80 91 0b 01 	lds	r24, 0x010B
    209a:	80 61       	ori	r24, 0x10	; 16
    209c:	80 93 0b 01 	sts	0x010B, r24
    20a0:	01 cf       	rjmp	.-510    	; 0x1ea4 <handleRFCommands+0x21a>
				}												

				if(bit_is_set(rfData[6], 3) ) {
					GREEN_LED3_ON;
				} else {
					GREEN_LED3_OFF;
    20a2:	a3 9a       	sbi	0x14, 3	; 20
    20a4:	f6 ce       	rjmp	.-532    	; 0x1e92 <handleRFCommands+0x208>
				}
				
				if(bit_is_set(rfData[6], 2) ) {
					GREEN_LED2_ON;
				} else {
					GREEN_LED2_OFF;
    20a6:	80 91 0b 01 	lds	r24, 0x010B
    20aa:	84 60       	ori	r24, 0x04	; 4
    20ac:	80 93 0b 01 	sts	0x010B, r24
    20b0:	eb ce       	rjmp	.-554    	; 0x1e88 <handleRFCommands+0x1fe>
				}
				
				if(bit_is_set(rfData[6], 1) ) {
					GREEN_LED1_ON;
				} else {
					GREEN_LED1_OFF;
    20b2:	80 91 0b 01 	lds	r24, 0x010B
    20b6:	82 60       	ori	r24, 0x02	; 2
    20b8:	80 93 0b 01 	sts	0x010B, r24
    20bc:	dc ce       	rjmp	.-584    	; 0x1e76 <handleRFCommands+0x1ec>
			#ifdef HW_REV_3_1			

				if(bit_is_set(rfData[6], 0) ) {
					GREEN_LED0_ON;
				} else {
					GREEN_LED0_OFF;
    20be:	80 91 0b 01 	lds	r24, 0x010B
    20c2:	81 60       	ori	r24, 0x01	; 1
    20c4:	80 93 0b 01 	sts	0x010B, r24
    20c8:	cd ce       	rjmp	.-614    	; 0x1e64 <handleRFCommands+0x1da>
			}

			if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
				obstacleAvoidanceEnabled = 1;
			} else {
				obstacleAvoidanceEnabled = 0;
    20ca:	10 92 6c 04 	sts	0x046C, r1
    20ce:	bd ce       	rjmp	.-646    	; 0x1e4a <handleRFCommands+0x1c0>
			}

			if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
				irEnabled = 1;
			} else {
				irEnabled = 0;
    20d0:	10 92 12 02 	sts	0x0212, r1
    20d4:	b3 ce       	rjmp	.-666    	; 0x1e3c <handleRFCommands+0x1b2>
			}

			if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
				LED_IR2_LOW;
			} else {
				LED_IR2_HIGH;
    20d6:	45 9a       	sbi	0x08, 5	; 8
    20d8:	ab ce       	rjmp	.-682    	; 0x1e30 <handleRFCommands+0x1a6>


			if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
				LED_IR1_LOW;
			} else {
				LED_IR1_HIGH;
    20da:	44 9a       	sbi	0x08, 4	; 8
    20dc:	a6 ce       	rjmp	.-692    	; 0x1e2a <handleRFCommands+0x1a0>


			// write back the ack payload
			ackPayload[0] = packetId&0xFF;

			switch(packetId) {
    20de:	83 30       	cpi	r24, 0x03	; 3
    20e0:	09 f4       	brne	.+2      	; 0x20e4 <handleRFCommands+0x45a>
    20e2:	db c0       	rjmp	.+438    	; 0x229a <__stack+0x9b>
    20e4:	84 30       	cpi	r24, 0x04	; 4
    20e6:	09 f0       	breq	.+2      	; 0x20ea <handleRFCommands+0x460>
    20e8:	6f cf       	rjmp	.-290    	; 0x1fc8 <handleRFCommands+0x33e>
					#endif
					packetId = 4;
					break;

				case 4:
					ackPayload[1] = proximityResult[4]&0xFF;
    20ea:	90 91 61 02 	lds	r25, 0x0261
    20ee:	80 91 62 02 	lds	r24, 0x0262
    20f2:	90 93 a5 08 	sts	0x08A5, r25
					ackPayload[2] = proximityResult[4]>>8;
    20f6:	80 93 a6 08 	sts	0x08A6, r24
					ackPayload[3] = proximityResult[8]&0xFF;
    20fa:	90 91 69 02 	lds	r25, 0x0269
    20fe:	80 91 6a 02 	lds	r24, 0x026A
    2102:	90 93 a7 08 	sts	0x08A7, r25
					ackPayload[4] = proximityResult[8]>>8;
    2106:	80 93 a8 08 	sts	0x08A8, r24
					ackPayload[5] = proximityResult[9]&0xFF;
    210a:	90 91 6b 02 	lds	r25, 0x026B
    210e:	80 91 6c 02 	lds	r24, 0x026C
    2112:	90 93 a9 08 	sts	0x08A9, r25
					ackPayload[6] = proximityResult[9]>>8;
    2116:	80 93 aa 08 	sts	0x08AA, r24
					ackPayload[7] = proximityResult[10]&0xFF;
    211a:	90 91 6d 02 	lds	r25, 0x026D
    211e:	80 91 6e 02 	lds	r24, 0x026E
    2122:	90 93 ab 08 	sts	0x08AB, r25
					ackPayload[8] = proximityResult[10]>>8;
    2126:	80 93 ac 08 	sts	0x08AC, r24
					ackPayload[9] = proximityResult[11]&0xFF;
    212a:	90 91 6f 02 	lds	r25, 0x026F
    212e:	80 91 70 02 	lds	r24, 0x0270
    2132:	90 93 ad 08 	sts	0x08AD, r25
					ackPayload[10] = proximityResult[11]>>8;
    2136:	80 93 ae 08 	sts	0x08AE, r24
					ackPayload[11] = accX&0xFF;
    213a:	90 91 2c 04 	lds	r25, 0x042C
    213e:	80 91 2d 04 	lds	r24, 0x042D
    2142:	90 93 af 08 	sts	0x08AF, r25
					ackPayload[12] = accX>>8;
    2146:	80 93 b0 08 	sts	0x08B0, r24
					ackPayload[13] = accY&0xFF;
    214a:	90 91 2e 04 	lds	r25, 0x042E
    214e:	80 91 2f 04 	lds	r24, 0x042F
    2152:	90 93 b1 08 	sts	0x08B1, r25
					ackPayload[14] = accY>>8;
    2156:	80 93 b2 08 	sts	0x08B2, r24
					ackPayload[15] = irCommand;
    215a:	80 91 27 04 	lds	r24, 0x0427
    215e:	80 93 b3 08 	sts	0x08B3, r24
					packetId = 5;
    2162:	85 e0       	ldi	r24, 0x05	; 5
    2164:	80 93 0b 02 	sts	0x020B, r24
					break;
    2168:	2f cf       	rjmp	.-418    	; 0x1fc8 <handleRFCommands+0x33e>

			//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
			// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
			// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    216a:	00 91 6e 09 	lds	r16, 0x096E
    216e:	00 23       	and	r16, r16
    2170:	09 f0       	breq	.+2      	; 0x2174 <handleRFCommands+0x4ea>
    2172:	4b c1       	rjmp	.+662    	; 0x240a <__stack+0x20b>
    2174:	80 91 6f 09 	lds	r24, 0x096F
    2178:	88 30       	cpi	r24, 0x08	; 8
    217a:	09 f4       	brne	.+2      	; 0x217e <handleRFCommands+0x4f4>
    217c:	48 c1       	rjmp	.+656    	; 0x240e <__stack+0x20f>
    217e:	e0 2f       	mov	r30, r16
    2180:	20 2f       	mov	r18, r16
    2182:	e5 cd       	rjmp	.-1078   	; 0x1d4e <handleRFCommands+0xc4>
			} else {
				irEnabled = 0;
			}

			if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
				calibrateSensors();
    2184:	0e 94 2a 3e 	call	0x7c54	; 0x7c54 <calibrateSensors>
				resetOdometry();
    2188:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <resetOdometry>
    218c:	90 91 6f 09 	lds	r25, 0x096F
    2190:	89 2f       	mov	r24, r25
    2192:	56 ce       	rjmp	.-852    	; 0x1e40 <handleRFCommands+0x1b6>
				}

			#endif
		
			if(currentSelector == 8) {
				if(calibrateOdomFlag==0) {
    2194:	80 91 4e 05 	lds	r24, 0x054E
    2198:	88 23       	and	r24, r24
    219a:	09 f0       	breq	.+2      	; 0x219e <handleRFCommands+0x514>
    219c:	a3 ce       	rjmp	.-698    	; 0x1ee4 <handleRFCommands+0x25a>
					if((rfData[7]&0b00000001)==0b00000001) {
    219e:	80 91 73 09 	lds	r24, 0x0973
    21a2:	80 ff       	sbrs	r24, 0
    21a4:	9f ce       	rjmp	.-706    	; 0x1ee4 <handleRFCommands+0x25a>
						calibrateSensors();
    21a6:	0e 94 2a 3e 	call	0x7c54	; 0x7c54 <calibrateSensors>
						proximityResult[8] = 1023;	// because the first time this value could be low after calibration
    21aa:	8f ef       	ldi	r24, 0xFF	; 255
    21ac:	93 e0       	ldi	r25, 0x03	; 3
    21ae:	90 93 6a 02 	sts	0x026A, r25
    21b2:	80 93 69 02 	sts	0x0269, r24
						proximityResult[11] = 1023;	// and in that case a false black line will be detected
    21b6:	90 93 70 02 	sts	0x0270, r25
    21ba:	80 93 6f 02 	sts	0x026F, r24
						calibState = 0;
    21be:	10 92 43 0b 	sts	0x0B43, r1
						calibVelIndex = 1;
    21c2:	81 e0       	ldi	r24, 0x01	; 1
    21c4:	80 93 9d 08 	sts	0x089D, r24
						calibrateOdomFlag = 1;
    21c8:	80 93 4e 05 	sts	0x054E, r24
    21cc:	8b ce       	rjmp	.-746    	; 0x1ee4 <handleRFCommands+0x25a>
				} else {
					GREEN_LED6_OFF;
				}

				if(bit_is_set(rfData[6], 7) ) {
					GREEN_LED7_ON;
    21ce:	80 91 0b 01 	lds	r24, 0x010B
    21d2:	8f 77       	andi	r24, 0x7F	; 127
    21d4:	80 93 0b 01 	sts	0x010B, r24
    21d8:	80 ce       	rjmp	.-768    	; 0x1eda <handleRFCommands+0x250>
			} else {
				obstacleAvoidanceEnabled = 0;
			}

			if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
				cliffAvoidanceEnabled = 1;
    21da:	81 e0       	ldi	r24, 0x01	; 1
    21dc:	80 93 6d 04 	sts	0x046D, r24
    21e0:	38 ce       	rjmp	.-912    	; 0x1e52 <handleRFCommands+0x1c8>
					ackPayload[15] = irCommand;
					packetId = 5;
					break;

				case 5:
					ackPayload[1] = proximityValue[0]&0xFF;
    21e2:	80 91 29 02 	lds	r24, 0x0229
    21e6:	90 91 2a 02 	lds	r25, 0x022A
    21ea:	80 93 a5 08 	sts	0x08A5, r24
					ackPayload[2] = proximityValue[0]>>8;
    21ee:	80 91 29 02 	lds	r24, 0x0229
    21f2:	90 91 2a 02 	lds	r25, 0x022A
    21f6:	90 93 a6 08 	sts	0x08A6, r25
					ackPayload[3] = proximityValue[2]&0xFF;
    21fa:	80 91 2d 02 	lds	r24, 0x022D
    21fe:	90 91 2e 02 	lds	r25, 0x022E
    2202:	80 93 a7 08 	sts	0x08A7, r24
					ackPayload[4] = proximityValue[2]>>8;
    2206:	80 91 2d 02 	lds	r24, 0x022D
    220a:	90 91 2e 02 	lds	r25, 0x022E
    220e:	90 93 a8 08 	sts	0x08A8, r25
					ackPayload[5] = proximityValue[4]&0xFF;
    2212:	80 91 31 02 	lds	r24, 0x0231
    2216:	90 91 32 02 	lds	r25, 0x0232
    221a:	80 93 a9 08 	sts	0x08A9, r24
					ackPayload[6] = proximityValue[4]>>8;
    221e:	80 91 31 02 	lds	r24, 0x0231
    2222:	90 91 32 02 	lds	r25, 0x0232
    2226:	90 93 aa 08 	sts	0x08AA, r25
					ackPayload[7] = proximityValue[6]&0xFF;
    222a:	80 91 35 02 	lds	r24, 0x0235
    222e:	90 91 36 02 	lds	r25, 0x0236
    2232:	80 93 ab 08 	sts	0x08AB, r24
					ackPayload[8] = proximityValue[6]>>8;
    2236:	80 91 35 02 	lds	r24, 0x0235
    223a:	90 91 36 02 	lds	r25, 0x0236
    223e:	90 93 ac 08 	sts	0x08AC, r25
					ackPayload[9] = proximityValue[10]&0xFF;
    2242:	80 91 3d 02 	lds	r24, 0x023D
    2246:	90 91 3e 02 	lds	r25, 0x023E
    224a:	80 93 ad 08 	sts	0x08AD, r24
					ackPayload[10] = proximityValue[10]>>8;
    224e:	80 91 3d 02 	lds	r24, 0x023D
    2252:	90 91 3e 02 	lds	r25, 0x023E
    2256:	90 93 ae 08 	sts	0x08AE, r25
					ackPayload[11] = proximityValue[12]&0xFF;
    225a:	80 91 41 02 	lds	r24, 0x0241
    225e:	90 91 42 02 	lds	r25, 0x0242
    2262:	80 93 af 08 	sts	0x08AF, r24
					ackPayload[12] = proximityValue[12]>>8;
    2266:	80 91 41 02 	lds	r24, 0x0241
    226a:	90 91 42 02 	lds	r25, 0x0242
    226e:	90 93 b0 08 	sts	0x08B0, r25
					ackPayload[13] = proximityValue[14]&0xFF;
    2272:	80 91 45 02 	lds	r24, 0x0245
    2276:	90 91 46 02 	lds	r25, 0x0246
    227a:	80 93 b1 08 	sts	0x08B1, r24
					ackPayload[14] = proximityValue[14]>>8;
    227e:	80 91 45 02 	lds	r24, 0x0245
    2282:	90 91 46 02 	lds	r25, 0x0246
    2286:	90 93 b2 08 	sts	0x08B2, r25
					ackPayload[15] = currentSelector;
    228a:	80 91 4c 04 	lds	r24, 0x044C
    228e:	80 93 b3 08 	sts	0x08B3, r24
					packetId = 6;
    2292:	86 e0       	ldi	r24, 0x06	; 6
    2294:	80 93 0b 02 	sts	0x020B, r24
					break;
    2298:	97 ce       	rjmp	.-722    	; 0x1fc8 <handleRFCommands+0x33e>
			// write back the ack payload
			ackPayload[0] = packetId&0xFF;

			switch(packetId) {
				case 3:
					ackPayload[1] = proximityResult[0]&0xFF;
    229a:	90 91 59 02 	lds	r25, 0x0259
    229e:	80 91 5a 02 	lds	r24, 0x025A
    22a2:	90 93 a5 08 	sts	0x08A5, r25
					ackPayload[2] = proximityResult[0]>>8;
    22a6:	80 93 a6 08 	sts	0x08A6, r24
					ackPayload[3] = proximityResult[1]&0xFF;
    22aa:	90 91 5b 02 	lds	r25, 0x025B
    22ae:	80 91 5c 02 	lds	r24, 0x025C
    22b2:	90 93 a7 08 	sts	0x08A7, r25
					ackPayload[4] = proximityResult[1]>>8;
    22b6:	80 93 a8 08 	sts	0x08A8, r24
					ackPayload[5] = proximityResult[2]&0xFF;
    22ba:	90 91 5d 02 	lds	r25, 0x025D
    22be:	80 91 5e 02 	lds	r24, 0x025E
    22c2:	90 93 a9 08 	sts	0x08A9, r25
					ackPayload[6] = proximityResult[2]>>8;
    22c6:	80 93 aa 08 	sts	0x08AA, r24
					ackPayload[7] = proximityResult[3]&0xFF;
    22ca:	90 91 5f 02 	lds	r25, 0x025F
    22ce:	80 91 60 02 	lds	r24, 0x0260
    22d2:	90 93 ab 08 	sts	0x08AB, r25
					ackPayload[8] = proximityResult[3]>>8;
    22d6:	80 93 ac 08 	sts	0x08AC, r24
					ackPayload[9] = proximityResult[5]&0xFF;
    22da:	90 91 63 02 	lds	r25, 0x0263
    22de:	80 91 64 02 	lds	r24, 0x0264
    22e2:	90 93 ad 08 	sts	0x08AD, r25
					ackPayload[10] = proximityResult[5]>>8;
    22e6:	80 93 ae 08 	sts	0x08AE, r24
					ackPayload[11] = proximityResult[6]&0xFF;
    22ea:	90 91 65 02 	lds	r25, 0x0265
    22ee:	80 91 66 02 	lds	r24, 0x0266
    22f2:	90 93 af 08 	sts	0x08AF, r25
					ackPayload[12] = proximityResult[6]>>8;
    22f6:	80 93 b0 08 	sts	0x08B0, r24
					ackPayload[13] = proximityResult[7]&0xFF;
    22fa:	90 91 67 02 	lds	r25, 0x0267
    22fe:	80 91 68 02 	lds	r24, 0x0268
    2302:	90 93 b1 08 	sts	0x08B1, r25
					ackPayload[14] = proximityResult[7]>>8;
    2306:	80 93 b2 08 	sts	0x08B2, r24
					#ifdef HW_REV_3_1
						ackPayload[15] = CHARGE_ON | (BUTTON0 << 1) | (CHARGE_STAT << 2);
    230a:	30 91 03 01 	lds	r19, 0x0103
    230e:	80 91 03 01 	lds	r24, 0x0103
    2312:	20 91 03 01 	lds	r18, 0x0103
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	80 72       	andi	r24, 0x20	; 32
    231a:	90 70       	andi	r25, 0x00	; 0
    231c:	95 95       	asr	r25
    231e:	87 95       	ror	r24
    2320:	95 95       	asr	r25
    2322:	87 95       	ror	r24
    2324:	95 95       	asr	r25
    2326:	87 95       	ror	r24
    2328:	95 95       	asr	r25
    232a:	87 95       	ror	r24
    232c:	95 95       	asr	r25
    232e:	87 95       	ror	r24
    2330:	88 0f       	add	r24, r24
    2332:	99 1f       	adc	r25, r25
    2334:	22 1f       	adc	r18, r18
    2336:	22 27       	eor	r18, r18
    2338:	22 1f       	adc	r18, r18
    233a:	22 0f       	add	r18, r18
    233c:	22 0f       	add	r18, r18
    233e:	28 2b       	or	r18, r24
    2340:	83 2f       	mov	r24, r19
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	80 71       	andi	r24, 0x10	; 16
    2346:	90 70       	andi	r25, 0x00	; 0
    2348:	95 95       	asr	r25
    234a:	87 95       	ror	r24
    234c:	95 95       	asr	r25
    234e:	87 95       	ror	r24
    2350:	95 95       	asr	r25
    2352:	87 95       	ror	r24
    2354:	95 95       	asr	r25
    2356:	87 95       	ror	r24
    2358:	28 2b       	or	r18, r24
    235a:	20 93 b3 08 	sts	0x08B3, r18
					#else
						ackPayload[15] = CHARGE_ON | (BUTTON0 << 1);
					#endif
					packetId = 4;
    235e:	84 e0       	ldi	r24, 0x04	; 4
    2360:	80 93 0b 02 	sts	0x020B, r24
					break;
    2364:	31 ce       	rjmp	.-926    	; 0x1fc8 <handleRFCommands+0x33e>
					ackPayload[15] = currentSelector;
					packetId = 6;
					break;

				case 6:
					ackPayload[1] = proximityValue[8]&0xFF;
    2366:	80 91 39 02 	lds	r24, 0x0239
    236a:	90 91 3a 02 	lds	r25, 0x023A
    236e:	80 93 a5 08 	sts	0x08A5, r24
					ackPayload[2] = proximityValue[8]>>8;
    2372:	80 91 39 02 	lds	r24, 0x0239
    2376:	90 91 3a 02 	lds	r25, 0x023A
    237a:	90 93 a6 08 	sts	0x08A6, r25
					ackPayload[3] = proximityValue[16]&0xFF;
    237e:	80 91 49 02 	lds	r24, 0x0249
    2382:	90 91 4a 02 	lds	r25, 0x024A
    2386:	80 93 a7 08 	sts	0x08A7, r24
					ackPayload[4] = proximityValue[16]>>8;
    238a:	80 91 49 02 	lds	r24, 0x0249
    238e:	90 91 4a 02 	lds	r25, 0x024A
    2392:	90 93 a8 08 	sts	0x08A8, r25
					ackPayload[5] = proximityValue[18]&0xFF;
    2396:	80 91 4d 02 	lds	r24, 0x024D
    239a:	90 91 4e 02 	lds	r25, 0x024E
    239e:	80 93 a9 08 	sts	0x08A9, r24
					ackPayload[6] = proximityValue[18]>>8;
    23a2:	80 91 4d 02 	lds	r24, 0x024D
    23a6:	90 91 4e 02 	lds	r25, 0x024E
    23aa:	90 93 aa 08 	sts	0x08AA, r25
					ackPayload[7] = proximityValue[20]&0xFF;
    23ae:	80 91 51 02 	lds	r24, 0x0251
    23b2:	90 91 52 02 	lds	r25, 0x0252
    23b6:	80 93 ab 08 	sts	0x08AB, r24
					ackPayload[8] = proximityValue[20]>>8;
    23ba:	80 91 51 02 	lds	r24, 0x0251
    23be:	90 91 52 02 	lds	r25, 0x0252
    23c2:	90 93 ac 08 	sts	0x08AC, r25
					ackPayload[9] = proximityValue[22]&0xFF;
    23c6:	80 91 55 02 	lds	r24, 0x0255
    23ca:	90 91 56 02 	lds	r25, 0x0256
    23ce:	80 93 ad 08 	sts	0x08AD, r24
					ackPayload[10] = proximityValue[22]>>8;
    23d2:	80 91 55 02 	lds	r24, 0x0255
    23d6:	90 91 56 02 	lds	r25, 0x0256
    23da:	90 93 ae 08 	sts	0x08AE, r25
					ackPayload[11] = accZ&0xFF;
    23de:	90 91 30 04 	lds	r25, 0x0430
    23e2:	80 91 31 04 	lds	r24, 0x0431
    23e6:	90 93 af 08 	sts	0x08AF, r25
					ackPayload[12] = accZ>>8;	
    23ea:	80 93 b0 08 	sts	0x08B0, r24
					ackPayload[13] = batteryLevel&0xFF;
    23ee:	90 91 bd 02 	lds	r25, 0x02BD
    23f2:	80 91 be 02 	lds	r24, 0x02BE
    23f6:	90 93 b1 08 	sts	0x08B1, r25
					ackPayload[14] = batteryLevel>>8;
    23fa:	80 93 b2 08 	sts	0x08B2, r24
					ackPayload[15] = 0;
    23fe:	10 92 b3 08 	sts	0x08B3, r1
					packetId = 7;
    2402:	87 e0       	ldi	r24, 0x07	; 7
    2404:	80 93 0b 02 	sts	0x020B, r24
					break;
    2408:	df cd       	rjmp	.-1090   	; 0x1fc8 <handleRFCommands+0x33e>

			//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
			// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
			// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    240a:	25 2f       	mov	r18, r21
    240c:	a0 cc       	rjmp	.-1728   	; 0x1d4e <handleRFCommands+0xc4>
    240e:	80 91 70 09 	lds	r24, 0x0970
    2412:	88 23       	and	r24, r24
    2414:	09 f0       	breq	.+2      	; 0x2418 <__stack+0x219>
    2416:	b3 ce       	rjmp	.-666    	; 0x217e <handleRFCommands+0x4f4>
    2418:	80 91 71 09 	lds	r24, 0x0971
    241c:	88 23       	and	r24, r24
    241e:	09 f4       	brne	.+2      	; 0x2422 <__stack+0x223>
    2420:	24 ce       	rjmp	.-952    	; 0x206a <handleRFCommands+0x3e0>
    2422:	e0 e0       	ldi	r30, 0x00	; 0
    2424:	20 e0       	ldi	r18, 0x00	; 0
    2426:	93 cc       	rjmp	.-1754   	; 0x1d4e <handleRFCommands+0xc4>

00002428 <rfEnableDebugMode>:
	}

}

void rfEnableDebugMode() {
	rfDebugMode = 1;
    2428:	81 e0       	ldi	r24, 0x01	; 1
    242a:	80 93 19 03 	sts	0x0319, r24
	rfDebugCounter = 3;
    242e:	83 e0       	ldi	r24, 0x03	; 3
    2430:	80 93 1a 03 	sts	0x031A, r24
}
    2434:	08 95       	ret

00002436 <rfDisableDebugMode>:

void rfDisableDebugMode() {
	rfDebugMode = 0;
    2436:	10 92 19 03 	sts	0x0319, r1
}
    243a:	08 95       	ret

0000243c <rfDebugSendData>:

void rfDebugSendData() {
	ackPayload[0] = rfDebugCounter;
    243c:	80 91 1a 03 	lds	r24, 0x031A
    2440:	80 93 a4 08 	sts	0x08A4, r24
	while(rfData[0] != rfDebugCounter) {
    2444:	90 91 6c 09 	lds	r25, 0x096C
    2448:	89 17       	cp	r24, r25
    244a:	41 f0       	breq	.+16     	; 0x245c <rfDebugSendData+0x20>
		handleRFCommands();
    244c:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <handleRFCommands>
	rfDebugMode = 0;
}

void rfDebugSendData() {
	ackPayload[0] = rfDebugCounter;
	while(rfData[0] != rfDebugCounter) {
    2450:	80 91 1a 03 	lds	r24, 0x031A
    2454:	90 91 6c 09 	lds	r25, 0x096C
    2458:	98 17       	cp	r25, r24
    245a:	c1 f7       	brne	.-16     	; 0x244c <rfDebugSendData+0x10>
		handleRFCommands();
	}
	ackPayload[0] = 0x00;
    245c:	10 92 a4 08 	sts	0x08A4, r1
	if(rfDebugCounter < 255) {
    2460:	8f 3f       	cpi	r24, 0xFF	; 255
    2462:	21 f0       	breq	.+8      	; 0x246c <rfDebugSendData+0x30>
		rfDebugCounter++;
    2464:	8f 5f       	subi	r24, 0xFF	; 255
    2466:	80 93 1a 03 	sts	0x031A, r24
    246a:	08 95       	ret
	} else {
		rfDebugCounter = 3;
    246c:	83 e0       	ldi	r24, 0x03	; 3
    246e:	80 93 1a 03 	sts	0x031A, r24
    2472:	08 95       	ret

00002474 <rfDebugNextPacket>:
	}
}

void rfDebugNextPacket() {
	rfDebugCounter = 3;
    2474:	83 e0       	ldi	r24, 0x03	; 3
    2476:	80 93 1a 03 	sts	0x031A, r24
}
    247a:	08 95       	ret

0000247c <init_ir_remote_control>:
static unsigned char check_temp = 0;
unsigned char address = 0;
unsigned char data_ir = 0;
unsigned char check = 2;

void init_ir_remote_control(void) { 	
    247c:	cf 93       	push	r28
    247e:	df 93       	push	r29

	PCICR = 0;
    2480:	c8 e6       	ldi	r28, 0x68	; 104
    2482:	d0 e0       	ldi	r29, 0x00	; 0
    2484:	18 82       	st	Y, r1
	PCMSK1 = 0;
    2486:	ac e6       	ldi	r26, 0x6C	; 108
    2488:	b0 e0       	ldi	r27, 0x00	; 0
    248a:	1c 92       	st	X, r1
	TCCR2A = 0;
    248c:	e0 eb       	ldi	r30, 0xB0	; 176
    248e:	f0 e0       	ldi	r31, 0x00	; 0
    2490:	10 82       	st	Z, r1
	TCCR2B = 0;
    2492:	10 92 b1 00 	sts	0x00B1, r1
	TIMSK2 = 0;
    2496:	10 92 70 00 	sts	0x0070, r1

	PCICR |= (1 << PCIE1);			// enable interrupt on change of PCINT15:8 pins
    249a:	88 81       	ld	r24, Y
    249c:	82 60       	ori	r24, 0x02	; 2
    249e:	88 83       	st	Y, r24
	PCMSK1 |= (1 << PCINT15);		// enable PCINT15
    24a0:	8c 91       	ld	r24, X
    24a2:	80 68       	ori	r24, 0x80	; 128
    24a4:	8c 93       	st	X, r24
	TCCR2A |= (1 << WGM21); 		// mode 2 => CTC mode
    24a6:	80 81       	ld	r24, Z
    24a8:	82 60       	ori	r24, 0x02	; 2
    24aa:	80 83       	st	Z, r24

}
    24ac:	df 91       	pop	r29
    24ae:	cf 91       	pop	r28
    24b0:	08 95       	ret

000024b2 <__vector_10>:

// external interrupt service routine
ISR(PCINT1_vect) {
    24b2:	1f 92       	push	r1
    24b4:	0f 92       	push	r0
    24b6:	0f b6       	in	r0, 0x3f	; 63
    24b8:	0f 92       	push	r0
    24ba:	11 24       	eor	r1, r1
    24bc:	8f 93       	push	r24

	if(irEnabled) {						// if the robot is configured to accept TV remote commands
    24be:	80 91 12 02 	lds	r24, 0x0212
    24c2:	88 23       	and	r24, r24
    24c4:	21 f1       	breq	.+72     	; 0x250e <__vector_10+0x5c>

		if(bit_is_clear(PINJ, 6)) {		// the interrupt is generated at every pin state change; we only look
    24c6:	80 91 03 01 	lds	r24, 0x0103
    24ca:	86 fd       	sbrc	r24, 6
    24cc:	20 c0       	rjmp	.+64     	; 0x250e <__vector_10+0x5c>
										// for the falling edge
			PCICR &= ~(1 << PCIE1);		// disable external interrupt
    24ce:	80 91 68 00 	lds	r24, 0x0068
    24d2:	8d 7f       	andi	r24, 0xFD	; 253
    24d4:	80 93 68 00 	sts	0x0068, r24
			PCMSK1 &= ~(1 << PCINT15);
    24d8:	80 91 6c 00 	lds	r24, 0x006C
    24dc:	8f 77       	andi	r24, 0x7F	; 127
    24de:	80 93 6c 00 	sts	0x006C, r24
		
			// check the pin change isn't due to a glitch; to check this verify that
			// the pin remain low for at least 400 us (the giltches last about 200 us)
			// 0.4 / 0.032 = 13 => 0.416 us
			checkGlitch = 1;							// we're checking if this is a glitch
    24e2:	81 e0       	ldi	r24, 0x01	; 1
    24e4:	80 93 13 02 	sts	0x0213, r24
			OCR2A = 13;									// output compare register
    24e8:	8d e0       	ldi	r24, 0x0D	; 13
    24ea:	80 93 b3 00 	sts	0x00B3, r24
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    24ee:	80 91 b1 00 	lds	r24, 0x00B1
    24f2:	86 60       	ori	r24, 0x06	; 6
    24f4:	80 93 b1 00 	sts	0x00B1, r24
			TIMSK2 |= (1 << OCIE2A);					// enable output compare interrupt
    24f8:	80 91 70 00 	lds	r24, 0x0070
    24fc:	82 60       	ori	r24, 0x02	; 2
    24fe:	80 93 70 00 	sts	0x0070, r24

			check_temp = address_temp = data_temp = 0;
    2502:	10 92 20 02 	sts	0x0220, r1
    2506:	10 92 21 02 	sts	0x0221, r1
    250a:	10 92 22 02 	sts	0x0222, r1

		}

	}
	
}
    250e:	8f 91       	pop	r24
    2510:	0f 90       	pop	r0
    2512:	0f be       	out	0x3f, r0	; 63
    2514:	0f 90       	pop	r0
    2516:	1f 90       	pop	r1
    2518:	18 95       	reti

0000251a <__vector_13>:

ISR(TIMER2_COMPA_vect) {
    251a:	1f 92       	push	r1
    251c:	0f 92       	push	r0
    251e:	0f b6       	in	r0, 0x3f	; 63
    2520:	0f 92       	push	r0
    2522:	11 24       	eor	r1, r1
    2524:	2f 93       	push	r18
    2526:	3f 93       	push	r19
    2528:	4f 93       	push	r20
    252a:	5f 93       	push	r21
    252c:	8f 93       	push	r24
    252e:	9f 93       	push	r25

	static int i = -1;

	//PORTB ^= (1 << 5);	// toggle red led

	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);		// stop timer2
    2530:	80 91 b1 00 	lds	r24, 0x00B1
    2534:	88 7f       	andi	r24, 0xF8	; 248
    2536:	80 93 b1 00 	sts	0x00B1, r24
	
		if(checkGlitch) {					// if checking this is a glitch
    253a:	80 91 13 02 	lds	r24, 0x0213
    253e:	88 23       	and	r24, r24
    2540:	a9 f0       	breq	.+42     	; 0x256c <__vector_13+0x52>

			if(REMOTE) {					// if high it is a glitch
    2542:	80 91 03 01 	lds	r24, 0x0103
    2546:	86 ff       	sbrs	r24, 6
    2548:	65 c0       	rjmp	.+202    	; 0x2614 <__vector_13+0xfa>

				PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    254a:	80 91 68 00 	lds	r24, 0x0068
    254e:	82 60       	ori	r24, 0x02	; 2
    2550:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    2554:	80 91 6c 00 	lds	r24, 0x006C
    2558:	80 68       	ori	r24, 0x80	; 128
    255a:	80 93 6c 00 	sts	0x006C, r24
				i = -1;			
    255e:	8f ef       	ldi	r24, 0xFF	; 255
    2560:	9f ef       	ldi	r25, 0xFF	; 255
    2562:	90 93 02 02 	sts	0x0202, r25
    2566:	80 93 01 02 	sts	0x0201, r24
    256a:	49 c0       	rjmp	.+146    	; 0x25fe <__vector_13+0xe4>
			}

		} else {


			if (i == -1) { 						// start bit confirmed
    256c:	80 91 01 02 	lds	r24, 0x0201
    2570:	90 91 02 02 	lds	r25, 0x0202
    2574:	2f ef       	ldi	r18, 0xFF	; 255
    2576:	8f 3f       	cpi	r24, 0xFF	; 255
    2578:	92 07       	cpc	r25, r18
    257a:	09 f4       	brne	.+2      	; 0x257e <__vector_13+0x64>
    257c:	63 c0       	rjmp	.+198    	; 0x2644 <__vector_13+0x12a>
					check_temp = address_temp = data_temp = 0;
					i=0;

				}

			} else if (i == 1)	{ 						// check bit read and change timer period
    257e:	81 30       	cpi	r24, 0x01	; 1
    2580:	91 05       	cpc	r25, r1
    2582:	09 f4       	brne	.+2      	; 0x2586 <__vector_13+0x6c>
    2584:	98 c0       	rjmp	.+304    	; 0x26b6 <__vector_13+0x19c>
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
    2586:	9c 01       	movw	r18, r24
    2588:	22 50       	subi	r18, 0x02	; 2
    258a:	30 40       	sbci	r19, 0x00	; 0
    258c:	25 30       	cpi	r18, 0x05	; 5
    258e:	31 05       	cpc	r19, r1
    2590:	08 f4       	brcc	.+2      	; 0x2594 <__vector_13+0x7a>
    2592:	67 c0       	rjmp	.+206    	; 0x2662 <__vector_13+0x148>

				unsigned char temp = REMOTE;
				temp <<= 6-i;
				address_temp += temp;

			} else if ((i > 6) && (i < 13 )) { 			// we read data
    2594:	9c 01       	movw	r18, r24
    2596:	27 50       	subi	r18, 0x07	; 7
    2598:	30 40       	sbci	r19, 0x00	; 0
    259a:	26 30       	cpi	r18, 0x06	; 6
    259c:	31 05       	cpc	r19, r1
    259e:	08 f0       	brcs	.+2      	; 0x25a2 <__vector_13+0x88>
    25a0:	bd c0       	rjmp	.+378    	; 0x271c <__vector_13+0x202>

				OCR2A = 54;
    25a2:	26 e3       	ldi	r18, 0x36	; 54
    25a4:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    25a8:	20 91 b1 00 	lds	r18, 0x00B1
    25ac:	26 60       	ori	r18, 0x06	; 6
    25ae:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    25b2:	20 91 70 00 	lds	r18, 0x0070
    25b6:	22 60       	ori	r18, 0x02	; 2
    25b8:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    25bc:	20 91 03 01 	lds	r18, 0x0103
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	20 74       	andi	r18, 0x40	; 64
    25c4:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6+6-i;
    25c6:	00 24       	eor	r0, r0
    25c8:	22 0f       	add	r18, r18
    25ca:	33 1f       	adc	r19, r19
    25cc:	00 1c       	adc	r0, r0
    25ce:	22 0f       	add	r18, r18
    25d0:	33 1f       	adc	r19, r19
    25d2:	00 1c       	adc	r0, r0
    25d4:	23 2f       	mov	r18, r19
    25d6:	30 2d       	mov	r19, r0
    25d8:	4c e0       	ldi	r20, 0x0C	; 12
    25da:	50 e0       	ldi	r21, 0x00	; 0
    25dc:	48 1b       	sub	r20, r24
    25de:	59 0b       	sbc	r21, r25
    25e0:	02 c0       	rjmp	.+4      	; 0x25e6 <__vector_13+0xcc>
    25e2:	22 0f       	add	r18, r18
    25e4:	33 1f       	adc	r19, r19
    25e6:	4a 95       	dec	r20
    25e8:	e2 f7       	brpl	.-8      	; 0x25e2 <__vector_13+0xc8>
				data_temp += temp;
    25ea:	40 91 20 02 	lds	r20, 0x0220
    25ee:	42 0f       	add	r20, r18
    25f0:	40 93 20 02 	sts	0x0220, r20

				i = -1;
				check = check_temp;
				address = address_temp;
				data_ir = data_temp;
				command_received=1;
    25f4:	01 96       	adiw	r24, 0x01	; 1

		}
	
		if(i!=-1) {

			i++;
    25f6:	90 93 02 02 	sts	0x0202, r25
    25fa:	80 93 01 02 	sts	0x0201, r24

		}

}
    25fe:	9f 91       	pop	r25
    2600:	8f 91       	pop	r24
    2602:	5f 91       	pop	r21
    2604:	4f 91       	pop	r20
    2606:	3f 91       	pop	r19
    2608:	2f 91       	pop	r18
    260a:	0f 90       	pop	r0
    260c:	0f be       	out	0x3f, r0	; 63
    260e:	0f 90       	pop	r0
    2610:	1f 90       	pop	r1
    2612:	18 95       	reti
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
				i = -1;			

			} else {						// not a glitch => real command received

				checkGlitch = 0;
    2614:	10 92 13 02 	sts	0x0213, r1

				// activate the IR Receiver with a 2.1 ms cycle value
				// we set the resolution of the timer to be 0.032 ms (prescaler 1/256) so:
				// 2.1 / 0.032 = 64 to be set in the output compare register (=> 2.048 ms)
				// but we already wait 0.416 us => 13, so 64-13=51
				OCR2A = 51;								// output compare register
    2618:	83 e3       	ldi	r24, 0x33	; 51
    261a:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    261e:	80 91 b1 00 	lds	r24, 0x00B1
    2622:	86 60       	ori	r24, 0x06	; 6
    2624:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    2628:	80 91 70 00 	lds	r24, 0x0070
    262c:	82 60       	ori	r24, 0x02	; 2
    262e:	80 93 70 00 	sts	0x0070, r24
    2632:	80 91 01 02 	lds	r24, 0x0201
    2636:	90 91 02 02 	lds	r25, 0x0202

			} 

		}
	
		if(i!=-1) {
    263a:	2f ef       	ldi	r18, 0xFF	; 255
    263c:	8f 3f       	cpi	r24, 0xFF	; 255
    263e:	92 07       	cpc	r25, r18
    2640:	c9 f6       	brne	.-78     	; 0x25f4 <__vector_13+0xda>
    2642:	dd cf       	rjmp	.-70     	; 0x25fe <__vector_13+0xe4>
		} else {


			if (i == -1) { 						// start bit confirmed

				if(REMOTE) {					// double check => if high it is only a noise
    2644:	20 91 03 01 	lds	r18, 0x0103
    2648:	26 ff       	sbrs	r18, 6
    264a:	52 c0       	rjmp	.+164    	; 0x26f0 <__vector_13+0x1d6>

					PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    264c:	20 91 68 00 	lds	r18, 0x0068
    2650:	22 60       	ori	r18, 0x02	; 2
    2652:	20 93 68 00 	sts	0x0068, r18
					PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    2656:	20 91 6c 00 	lds	r18, 0x006C
    265a:	20 68       	ori	r18, 0x80	; 128
    265c:	20 93 6c 00 	sts	0x006C, r18
    2660:	ce cf       	rjmp	.-100    	; 0x25fe <__vector_13+0xe4>
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
		
				OCR2A = 54;
    2662:	26 e3       	ldi	r18, 0x36	; 54
    2664:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    2668:	20 91 b1 00 	lds	r18, 0x00B1
    266c:	26 60       	ori	r18, 0x06	; 6
    266e:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    2672:	20 91 70 00 	lds	r18, 0x0070
    2676:	22 60       	ori	r18, 0x02	; 2
    2678:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    267c:	20 91 03 01 	lds	r18, 0x0103
    2680:	30 e0       	ldi	r19, 0x00	; 0
    2682:	20 74       	andi	r18, 0x40	; 64
    2684:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6-i;
    2686:	00 24       	eor	r0, r0
    2688:	22 0f       	add	r18, r18
    268a:	33 1f       	adc	r19, r19
    268c:	00 1c       	adc	r0, r0
    268e:	22 0f       	add	r18, r18
    2690:	33 1f       	adc	r19, r19
    2692:	00 1c       	adc	r0, r0
    2694:	23 2f       	mov	r18, r19
    2696:	30 2d       	mov	r19, r0
    2698:	46 e0       	ldi	r20, 0x06	; 6
    269a:	50 e0       	ldi	r21, 0x00	; 0
    269c:	48 1b       	sub	r20, r24
    269e:	59 0b       	sbc	r21, r25
    26a0:	02 c0       	rjmp	.+4      	; 0x26a6 <__vector_13+0x18c>
    26a2:	22 0f       	add	r18, r18
    26a4:	33 1f       	adc	r19, r19
    26a6:	4a 95       	dec	r20
    26a8:	e2 f7       	brpl	.-8      	; 0x26a2 <__vector_13+0x188>
				address_temp += temp;
    26aa:	40 91 21 02 	lds	r20, 0x0221
    26ae:	42 0f       	add	r20, r18
    26b0:	40 93 21 02 	sts	0x0221, r20
    26b4:	9f cf       	rjmp	.-194    	; 0x25f4 <__vector_13+0xda>

				}

			} else if (i == 1)	{ 						// check bit read and change timer period

				check_temp = REMOTE;	   				// read the check bit
    26b6:	20 91 03 01 	lds	r18, 0x0103
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	20 74       	andi	r18, 0x40	; 64
    26be:	30 70       	andi	r19, 0x00	; 0
    26c0:	02 2e       	mov	r0, r18
    26c2:	23 2f       	mov	r18, r19
    26c4:	00 0c       	add	r0, r0
    26c6:	22 1f       	adc	r18, r18
    26c8:	33 0b       	sbc	r19, r19
    26ca:	00 0c       	add	r0, r0
    26cc:	22 1f       	adc	r18, r18
    26ce:	33 1f       	adc	r19, r19
    26d0:	20 93 22 02 	sts	0x0222, r18
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
    26d4:	26 e3       	ldi	r18, 0x36	; 54
    26d6:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    26da:	20 91 b1 00 	lds	r18, 0x00B1
    26de:	26 60       	ori	r18, 0x06	; 6
    26e0:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    26e4:	20 91 70 00 	lds	r18, 0x0070
    26e8:	22 60       	ori	r18, 0x02	; 2
    26ea:	20 93 70 00 	sts	0x0070, r18
    26ee:	82 cf       	rjmp	.-252    	; 0x25f4 <__vector_13+0xda>

				} else {	// read the check bit
			
					//cycle value is 0.9 ms to go to check bit so:
					// 0.9 / 0.032 = 28 => 0.896
					OCR2A = 28;								// output compare register
    26f0:	8c e1       	ldi	r24, 0x1C	; 28
    26f2:	80 93 b3 00 	sts	0x00B3, r24
					TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    26f6:	80 91 b1 00 	lds	r24, 0x00B1
    26fa:	86 60       	ori	r24, 0x06	; 6
    26fc:	80 93 b1 00 	sts	0x00B1, r24
					TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt					
    2700:	80 91 70 00 	lds	r24, 0x0070
    2704:	82 60       	ori	r24, 0x02	; 2
    2706:	80 93 70 00 	sts	0x0070, r24

					check_temp = address_temp = data_temp = 0;
    270a:	10 92 20 02 	sts	0x0220, r1
    270e:	10 92 21 02 	sts	0x0221, r1
    2712:	10 92 22 02 	sts	0x0222, r1
    2716:	81 e0       	ldi	r24, 0x01	; 1
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	6d cf       	rjmp	.-294    	; 0x25f6 <__vector_13+0xdc>

				unsigned char temp = REMOTE;
				temp <<= 6+6-i;
				data_temp += temp;

			} else if (i == 13) { 						// last bit read
    271c:	8d 30       	cpi	r24, 0x0D	; 13
    271e:	91 05       	cpc	r25, r1
    2720:	09 f0       	breq	.+2      	; 0x2724 <__vector_13+0x20a>
    2722:	68 cf       	rjmp	.-304    	; 0x25f4 <__vector_13+0xda>
				
				TIMSK2 = 0;								// disable all interrupt for timer2
    2724:	10 92 70 00 	sts	0x0070, r1
				PCICR |= (1 << PCIE1);					// enable external interrupt to receive next command
    2728:	80 91 68 00 	lds	r24, 0x0068
    272c:	82 60       	ori	r24, 0x02	; 2
    272e:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);				// clear interrupt flag
    2732:	80 91 6c 00 	lds	r24, 0x006C
    2736:	80 68       	ori	r24, 0x80	; 128
    2738:	80 93 6c 00 	sts	0x006C, r24

				i = -1;
    273c:	8f ef       	ldi	r24, 0xFF	; 255
    273e:	9f ef       	ldi	r25, 0xFF	; 255
    2740:	90 93 02 02 	sts	0x0202, r25
    2744:	80 93 01 02 	sts	0x0201, r24
				check = check_temp;
    2748:	80 91 22 02 	lds	r24, 0x0222
    274c:	80 93 00 02 	sts	0x0200, r24
				address = address_temp;
    2750:	80 91 21 02 	lds	r24, 0x0221
    2754:	80 93 1e 02 	sts	0x021E, r24
				data_ir = data_temp;
    2758:	80 91 20 02 	lds	r24, 0x0220
    275c:	80 93 1f 02 	sts	0x021F, r24
				command_received=1;
    2760:	81 e0       	ldi	r24, 0x01	; 1
    2762:	80 93 28 04 	sts	0x0428, r24
    2766:	4b cf       	rjmp	.-362    	; 0x25fe <__vector_13+0xe4>

00002768 <ir_remote_get_check>:

}

unsigned char ir_remote_get_check(void) {
	return check;
}
    2768:	80 91 00 02 	lds	r24, 0x0200
    276c:	08 95       	ret

0000276e <ir_remote_get_address>:

unsigned char ir_remote_get_address(void) {
	return address;
}
    276e:	80 91 1e 02 	lds	r24, 0x021E
    2772:	08 95       	ret

00002774 <ir_remote_get_data>:

unsigned char ir_remote_get_data(void) {
	return data_ir;
}
    2774:	80 91 1f 02 	lds	r24, 0x021F
    2778:	08 95       	ret

0000277a <handleIRRemoteCommands>:

void handleIRRemoteCommands() {

	if(irEnabled) {
    277a:	80 91 12 02 	lds	r24, 0x0212
    277e:	88 23       	and	r24, r24
    2780:	51 f1       	breq	.+84     	; 0x27d6 <handleIRRemoteCommands+0x5c>

		if(command_received) {
    2782:	80 91 28 04 	lds	r24, 0x0428
    2786:	88 23       	and	r24, r24
    2788:	31 f1       	breq	.+76     	; 0x27d6 <handleIRRemoteCommands+0x5c>
unsigned char ir_remote_get_address(void) {
	return address;
}

unsigned char ir_remote_get_data(void) {
	return data_ir;
    278a:	e0 91 1f 02 	lds	r30, 0x021F

	if(irEnabled) {

		if(command_received) {

            irCommand = ir_remote_get_data();
    278e:	e0 93 27 04 	sts	0x0427, r30

		    //usartTransmit(irCommand);

			command_received = 0;
    2792:	10 92 28 04 	sts	0x0428, r1

			switch(irCommand) {
    2796:	f0 e0       	ldi	r31, 0x00	; 0
    2798:	e5 33       	cpi	r30, 0x35	; 53
    279a:	f1 05       	cpc	r31, r1
    279c:	e8 f0       	brcs	.+58     	; 0x27d8 <handleIRRemoteCommands+0x5e>
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 1;
							break;
						case 3:
							obstacleAvoidanceEnabled = 1;
							cliffAvoidanceEnabled = 1;
    279e:	20 91 f9 02 	lds	r18, 0x02F9
    27a2:	30 91 fa 02 	lds	r19, 0x02FA
    27a6:	80 91 fb 02 	lds	r24, 0x02FB
    27aa:	90 91 fc 02 	lds	r25, 0x02FC
	               	break;

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
    27ae:	37 fd       	sbrc	r19, 7
    27b0:	b9 c1       	rjmp	.+882    	; 0x2b24 <handleIRRemoteCommands+0x3aa>
				speedr = pwm_right_desired;
			} else {
				speedr = (-pwm_right_desired);
    27b2:	30 93 14 03 	sts	0x0314, r19
    27b6:	20 93 13 03 	sts	0x0313, r18
			}
			if(pwm_left_desired >= 0) {
    27ba:	97 fd       	sbrc	r25, 7
    27bc:	05 c0       	rjmp	.+10     	; 0x27c8 <handleIRRemoteCommands+0x4e>
				speedl = pwm_left_desired;
    27be:	90 93 12 03 	sts	0x0312, r25
    27c2:	80 93 11 03 	sts	0x0311, r24
    27c6:	08 95       	ret
			} else {
				speedl = (-pwm_left_desired);
    27c8:	90 95       	com	r25
    27ca:	81 95       	neg	r24
    27cc:	9f 4f       	sbci	r25, 0xFF	; 255
    27ce:	90 93 12 03 	sts	0x0312, r25
    27d2:	80 93 11 03 	sts	0x0311, r24
    27d6:	08 95       	ret

		    //usartTransmit(irCommand);

			command_received = 0;

			switch(irCommand) {
    27d8:	ee 58       	subi	r30, 0x8E	; 142
    27da:	ff 4f       	sbci	r31, 0xFF	; 255
    27dc:	ee 0f       	add	r30, r30
    27de:	ff 1f       	adc	r31, r31
    27e0:	05 90       	lpm	r0, Z+
    27e2:	f4 91       	lpm	r31, Z+
    27e4:	e0 2d       	mov	r30, r0
    27e6:	19 94       	eijmp
						case 0:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 0;
							break;
						case 1:
							obstacleAvoidanceEnabled = 1;
    27e8:	80 93 6c 04 	sts	0x046C, r24
							cliffAvoidanceEnabled = 0;
    27ec:	10 92 6d 04 	sts	0x046D, r1
    27f0:	20 91 f9 02 	lds	r18, 0x02F9
    27f4:	30 91 fa 02 	lds	r19, 0x02FA
    27f8:	80 91 fb 02 	lds	r24, 0x02FB
    27fc:	90 91 fc 02 	lds	r25, 0x02FC
							break;
    2800:	d6 cf       	rjmp	.-84     	; 0x27ae <handleIRRemoteCommands+0x34>
						case 2:
							obstacleAvoidanceEnabled = 0;
    2802:	10 92 6c 04 	sts	0x046C, r1
							cliffAvoidanceEnabled = 1;
    2806:	81 e0       	ldi	r24, 0x01	; 1
    2808:	80 93 6d 04 	sts	0x046D, r24
    280c:	20 91 f9 02 	lds	r18, 0x02F9
    2810:	30 91 fa 02 	lds	r19, 0x02FA
    2814:	80 91 fb 02 	lds	r24, 0x02FB
    2818:	90 91 fc 02 	lds	r25, 0x02FC
							break;
    281c:	c8 cf       	rjmp	.-112    	; 0x27ae <handleIRRemoteCommands+0x34>
				case 33:	// program -
					cliffAvoidanceEnabled = 0;
					break;

				case 52:	// av/tv button
					behaviorState = (behaviorState+1)%4;
    281e:	80 91 2a 04 	lds	r24, 0x042A
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	01 96       	adiw	r24, 0x01	; 1
    2826:	83 70       	andi	r24, 0x03	; 3
    2828:	90 70       	andi	r25, 0x00	; 0
    282a:	80 93 2a 04 	sts	0x042A, r24
					switch(behaviorState) {
    282e:	82 30       	cpi	r24, 0x02	; 2
    2830:	41 f3       	breq	.-48     	; 0x2802 <handleIRRemoteCommands+0x88>
    2832:	83 30       	cpi	r24, 0x03	; 3
    2834:	09 f4       	brne	.+2      	; 0x2838 <handleIRRemoteCommands+0xbe>
    2836:	8a c1       	rjmp	.+788    	; 0x2b4c <handleIRRemoteCommands+0x3d2>
    2838:	81 30       	cpi	r24, 0x01	; 1
    283a:	b1 f2       	breq	.-84     	; 0x27e8 <handleIRRemoteCommands+0x6e>
						case 0:
							obstacleAvoidanceEnabled = 0;
    283c:	10 92 6c 04 	sts	0x046C, r1
							cliffAvoidanceEnabled = 0;
    2840:	10 92 6d 04 	sts	0x046D, r1
    2844:	20 91 f9 02 	lds	r18, 0x02F9
    2848:	30 91 fa 02 	lds	r19, 0x02FA
    284c:	80 91 fb 02 	lds	r24, 0x02FB
    2850:	90 91 fc 02 	lds	r25, 0x02FC
							break;
    2854:	ac cf       	rjmp	.-168    	; 0x27ae <handleIRRemoteCommands+0x34>
				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
					break;

				case 17:	// volume -
					obstacleAvoidanceEnabled = 0;
    2856:	10 92 6c 04 	sts	0x046C, r1
    285a:	20 91 f9 02 	lds	r18, 0x02F9
    285e:	30 91 fa 02 	lds	r19, 0x02FA
    2862:	80 91 fb 02 	lds	r24, 0x02FB
    2866:	90 91 fc 02 	lds	r25, 0x02FC
					break;
    286a:	a1 cf       	rjmp	.-190    	; 0x27ae <handleIRRemoteCommands+0x34>
					pwm_right_desired += STEP_MOTORS;
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
					break;

				case 9:	// left motor backward
					pwm_left_desired -= STEP_MOTORS;
    286c:	80 91 fb 02 	lds	r24, 0x02FB
    2870:	90 91 fc 02 	lds	r25, 0x02FC
    2874:	02 97       	sbiw	r24, 0x02	; 2
    2876:	90 93 fc 02 	sts	0x02FC, r25
    287a:	80 93 fb 02 	sts	0x02FB, r24
	           	    if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    287e:	2e ef       	ldi	r18, 0xFE	; 254
    2880:	80 30       	cpi	r24, 0x00	; 0
    2882:	92 07       	cpc	r25, r18
    2884:	9c f5       	brge	.+102    	; 0x28ec <handleIRRemoteCommands+0x172>
    2886:	80 e0       	ldi	r24, 0x00	; 0
    2888:	9e ef       	ldi	r25, 0xFE	; 254
    288a:	90 93 fc 02 	sts	0x02FC, r25
    288e:	80 93 fb 02 	sts	0x02FB, r24
    2892:	20 91 f9 02 	lds	r18, 0x02F9
    2896:	30 91 fa 02 	lds	r19, 0x02FA
    289a:	89 cf       	rjmp	.-238    	; 0x27ae <handleIRRemoteCommands+0x34>
    	            if (pwm_left_desired > (MAX_MOTORS_PWM/2)) pwm_left_desired = (MAX_MOTORS_PWM/2);
               		break;

				case 8:	// both motors backward
				case 30:
					if(pwm_right_desired < pwm_left) {
    289c:	20 91 f9 02 	lds	r18, 0x02F9
    28a0:	30 91 fa 02 	lds	r19, 0x02FA
    28a4:	80 91 f7 02 	lds	r24, 0x02F7
    28a8:	90 91 f8 02 	lds	r25, 0x02F8
    28ac:	28 17       	cp	r18, r24
    28ae:	39 07       	cpc	r19, r25
    28b0:	24 f0       	brlt	.+8      	; 0x28ba <handleIRRemoteCommands+0x140>
						pwm_left_desired  = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
    28b2:	20 91 fb 02 	lds	r18, 0x02FB
    28b6:	30 91 fc 02 	lds	r19, 0x02FC
					}
					pwm_right_desired -= STEP_MOTORS;
    28ba:	22 50       	subi	r18, 0x02	; 2
    28bc:	30 40       	sbci	r19, 0x00	; 0
    28be:	30 93 fa 02 	sts	0x02FA, r19
    28c2:	20 93 f9 02 	sts	0x02F9, r18
					pwm_left_desired -= STEP_MOTORS;
    28c6:	c9 01       	movw	r24, r18
    28c8:	30 93 fc 02 	sts	0x02FC, r19
    28cc:	20 93 fb 02 	sts	0x02FB, r18
	                if (pwm_right_desired < -(MAX_MOTORS_PWM/2)) pwm_right_desired = -(MAX_MOTORS_PWM/2);
    28d0:	4e ef       	ldi	r20, 0xFE	; 254
    28d2:	20 30       	cpi	r18, 0x00	; 0
    28d4:	34 07       	cpc	r19, r20
    28d6:	34 f4       	brge	.+12     	; 0x28e4 <handleIRRemoteCommands+0x16a>
    28d8:	40 e0       	ldi	r20, 0x00	; 0
    28da:	5e ef       	ldi	r21, 0xFE	; 254
    28dc:	50 93 fa 02 	sts	0x02FA, r21
    28e0:	40 93 f9 02 	sts	0x02F9, r20
    	            if (pwm_left_desired < -(MAX_MOTORS_PWM/2)) pwm_left_desired = -(MAX_MOTORS_PWM/2);
    28e4:	4e ef       	ldi	r20, 0xFE	; 254
    28e6:	20 30       	cpi	r18, 0x00	; 0
    28e8:	34 07       	cpc	r19, r20
    28ea:	6c f2       	brlt	.-102    	; 0x2886 <handleIRRemoteCommands+0x10c>
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    28ec:	20 91 f9 02 	lds	r18, 0x02F9
    28f0:	30 91 fa 02 	lds	r19, 0x02FA
    28f4:	5c cf       	rjmp	.-328    	; 0x27ae <handleIRRemoteCommands+0x34>
					updateBlueLed(pwm_blue);

	               	break;

				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
    28f6:	81 e0       	ldi	r24, 0x01	; 1
    28f8:	80 93 6c 04 	sts	0x046C, r24
    28fc:	20 91 f9 02 	lds	r18, 0x02F9
    2900:	30 91 fa 02 	lds	r19, 0x02FA
    2904:	80 91 fb 02 	lds	r24, 0x02FB
    2908:	90 91 fc 02 	lds	r25, 0x02FC
					break;
    290c:	50 cf       	rjmp	.-352    	; 0x27ae <handleIRRemoteCommands+0x34>
					pwm_left_desired -= STEP_MOTORS;
	           	    if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 7:	// right motor backward
					pwm_right_desired -= STEP_MOTORS;
    290e:	20 91 f9 02 	lds	r18, 0x02F9
    2912:	30 91 fa 02 	lds	r19, 0x02FA
    2916:	22 50       	subi	r18, 0x02	; 2
    2918:	30 40       	sbci	r19, 0x00	; 0
    291a:	30 93 fa 02 	sts	0x02FA, r19
    291e:	20 93 f9 02 	sts	0x02F9, r18
	               	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    2922:	4e ef       	ldi	r20, 0xFE	; 254
    2924:	20 30       	cpi	r18, 0x00	; 0
    2926:	34 07       	cpc	r19, r20
    2928:	0c f0       	brlt	.+2      	; 0x292c <handleIRRemoteCommands+0x1b2>
    292a:	3d cf       	rjmp	.-390    	; 0x27a6 <handleIRRemoteCommands+0x2c>
    292c:	80 e0       	ldi	r24, 0x00	; 0
    292e:	9e ef       	ldi	r25, 0xFE	; 254
    2930:	90 93 fa 02 	sts	0x02FA, r25
    2934:	80 93 f9 02 	sts	0x02F9, r24
    2938:	80 91 fb 02 	lds	r24, 0x02FB
    293c:	90 91 fc 02 	lds	r25, 0x02FC
    2940:	20 e0       	ldi	r18, 0x00	; 0
    2942:	32 e0       	ldi	r19, 0x02	; 2
    2944:	36 cf       	rjmp	.-404    	; 0x27b2 <handleIRRemoteCommands+0x38>
    	            if (pwm_left_desired < -(MAX_MOTORS_PWM/2)) pwm_left_desired = -(MAX_MOTORS_PWM/2);
                  	break;

				case 6:	// both motors right
				case 47:
					pwm_right_desired -= STEP_MOTORS;
    2946:	20 91 f9 02 	lds	r18, 0x02F9
    294a:	30 91 fa 02 	lds	r19, 0x02FA
    294e:	22 50       	subi	r18, 0x02	; 2
    2950:	30 40       	sbci	r19, 0x00	; 0
    2952:	30 93 fa 02 	sts	0x02FA, r19
    2956:	20 93 f9 02 	sts	0x02F9, r18
					pwm_left_desired += STEP_MOTORS;
    295a:	80 91 fb 02 	lds	r24, 0x02FB
    295e:	90 91 fc 02 	lds	r25, 0x02FC
    2962:	02 96       	adiw	r24, 0x02	; 2
    2964:	90 93 fc 02 	sts	0x02FC, r25
    2968:	80 93 fb 02 	sts	0x02FB, r24
                	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    296c:	4e ef       	ldi	r20, 0xFE	; 254
    296e:	20 30       	cpi	r18, 0x00	; 0
    2970:	34 07       	cpc	r19, r20
    2972:	34 f4       	brge	.+12     	; 0x2980 <handleIRRemoteCommands+0x206>
    2974:	20 e0       	ldi	r18, 0x00	; 0
    2976:	3e ef       	ldi	r19, 0xFE	; 254
    2978:	30 93 fa 02 	sts	0x02FA, r19
    297c:	20 93 f9 02 	sts	0x02F9, r18
                	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    2980:	42 e0       	ldi	r20, 0x02	; 2
    2982:	81 30       	cpi	r24, 0x01	; 1
    2984:	94 07       	cpc	r25, r20
    2986:	0c f4       	brge	.+2      	; 0x298a <handleIRRemoteCommands+0x210>
    2988:	12 cf       	rjmp	.-476    	; 0x27ae <handleIRRemoteCommands+0x34>
    298a:	80 e0       	ldi	r24, 0x00	; 0
    298c:	92 e0       	ldi	r25, 0x02	; 2
    298e:	90 93 fc 02 	sts	0x02FC, r25
    2992:	80 93 fb 02 	sts	0x02FB, r24
    2996:	0b cf       	rjmp	.-490    	; 0x27ae <handleIRRemoteCommands+0x34>
			switch(irCommand) {
				// sometimes there are two cases for the same command because two different
				// remote controls are used; one of this do not contain "numbers"
				case 5:	// stop motors
				case 51:
					pwm_right_desired = 0;
    2998:	10 92 fa 02 	sts	0x02FA, r1
    299c:	10 92 f9 02 	sts	0x02F9, r1
					pwm_left_desired = 0;
    29a0:	10 92 fc 02 	sts	0x02FC, r1
    29a4:	10 92 fb 02 	sts	0x02FB, r1
					if(currentSelector == 8) {
    29a8:	80 91 4c 04 	lds	r24, 0x044C
    29ac:	88 30       	cpi	r24, 0x08	; 8
    29ae:	09 f4       	brne	.+2      	; 0x29b2 <handleIRRemoteCommands+0x238>
    29b0:	db c0       	rjmp	.+438    	; 0x2b68 <handleIRRemoteCommands+0x3ee>
    29b2:	80 e0       	ldi	r24, 0x00	; 0
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	20 e0       	ldi	r18, 0x00	; 0
    29b8:	30 e0       	ldi	r19, 0x00	; 0
    29ba:	fb ce       	rjmp	.-522    	; 0x27b2 <handleIRRemoteCommands+0x38>
                	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
					break;

				case 4:	// both motors left
				case 46:
					pwm_right_desired += STEP_MOTORS;
    29bc:	20 91 f9 02 	lds	r18, 0x02F9
    29c0:	30 91 fa 02 	lds	r19, 0x02FA
    29c4:	2e 5f       	subi	r18, 0xFE	; 254
    29c6:	3f 4f       	sbci	r19, 0xFF	; 255
    29c8:	30 93 fa 02 	sts	0x02FA, r19
    29cc:	20 93 f9 02 	sts	0x02F9, r18
					pwm_left_desired -= STEP_MOTORS;
    29d0:	80 91 fb 02 	lds	r24, 0x02FB
    29d4:	90 91 fc 02 	lds	r25, 0x02FC
    29d8:	02 97       	sbiw	r24, 0x02	; 2
    29da:	90 93 fc 02 	sts	0x02FC, r25
    29de:	80 93 fb 02 	sts	0x02FB, r24
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    29e2:	42 e0       	ldi	r20, 0x02	; 2
    29e4:	21 30       	cpi	r18, 0x01	; 1
    29e6:	34 07       	cpc	r19, r20
    29e8:	34 f0       	brlt	.+12     	; 0x29f6 <handleIRRemoteCommands+0x27c>
    29ea:	20 e0       	ldi	r18, 0x00	; 0
    29ec:	32 e0       	ldi	r19, 0x02	; 2
    29ee:	30 93 fa 02 	sts	0x02FA, r19
    29f2:	20 93 f9 02 	sts	0x02F9, r18
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    29f6:	4e ef       	ldi	r20, 0xFE	; 254
    29f8:	80 30       	cpi	r24, 0x00	; 0
    29fa:	94 07       	cpc	r25, r20
    29fc:	0c f0       	brlt	.+2      	; 0x2a00 <handleIRRemoteCommands+0x286>
    29fe:	d7 ce       	rjmp	.-594    	; 0x27ae <handleIRRemoteCommands+0x34>
    2a00:	80 e0       	ldi	r24, 0x00	; 0
    2a02:	9e ef       	ldi	r25, 0xFE	; 254
    2a04:	90 93 fc 02 	sts	0x02FC, r25
    2a08:	80 93 fb 02 	sts	0x02FB, r24
    2a0c:	d0 ce       	rjmp	.-608    	; 0x27ae <handleIRRemoteCommands+0x34>
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
    2a0e:	80 91 fb 02 	lds	r24, 0x02FB
    2a12:	90 91 fc 02 	lds	r25, 0x02FC
    2a16:	02 96       	adiw	r24, 0x02	; 2
    2a18:	90 93 fc 02 	sts	0x02FC, r25
    2a1c:	80 93 fb 02 	sts	0x02FB, r24
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    2a20:	22 e0       	ldi	r18, 0x02	; 2
    2a22:	81 30       	cpi	r24, 0x01	; 1
    2a24:	92 07       	cpc	r25, r18
    2a26:	0c f4       	brge	.+2      	; 0x2a2a <handleIRRemoteCommands+0x2b0>
    2a28:	61 cf       	rjmp	.-318    	; 0x28ec <handleIRRemoteCommands+0x172>
    2a2a:	80 e0       	ldi	r24, 0x00	; 0
    2a2c:	92 e0       	ldi	r25, 0x02	; 2
    2a2e:	90 93 fc 02 	sts	0x02FC, r25
    2a32:	80 93 fb 02 	sts	0x02FB, r24
    2a36:	5a cf       	rjmp	.-332    	; 0x28ec <handleIRRemoteCommands+0x172>
					}
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    2a38:	20 91 f9 02 	lds	r18, 0x02F9
    2a3c:	30 91 fa 02 	lds	r19, 0x02FA
    2a40:	80 91 fb 02 	lds	r24, 0x02FB
    2a44:	90 91 fc 02 	lds	r25, 0x02FC
    2a48:	82 17       	cp	r24, r18
    2a4a:	93 07       	cpc	r25, r19
    2a4c:	0c f4       	brge	.+2      	; 0x2a50 <handleIRRemoteCommands+0x2d6>
    2a4e:	6e c0       	rjmp	.+220    	; 0x2b2c <handleIRRemoteCommands+0x3b2>
    2a50:	9c 01       	movw	r18, r24
						pwm_left_desired = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
					}
					pwm_right_desired += STEP_MOTORS;
    2a52:	2e 5f       	subi	r18, 0xFE	; 254
    2a54:	3f 4f       	sbci	r19, 0xFF	; 255
    2a56:	30 93 fa 02 	sts	0x02FA, r19
    2a5a:	20 93 f9 02 	sts	0x02F9, r18
					pwm_left_desired += STEP_MOTORS;
    2a5e:	02 96       	adiw	r24, 0x02	; 2
    2a60:	90 93 fc 02 	sts	0x02FC, r25
    2a64:	80 93 fb 02 	sts	0x02FB, r24
	                if (pwm_right_desired > (MAX_MOTORS_PWM/2)) pwm_right_desired = (MAX_MOTORS_PWM/2);
    2a68:	42 e0       	ldi	r20, 0x02	; 2
    2a6a:	21 30       	cpi	r18, 0x01	; 1
    2a6c:	34 07       	cpc	r19, r20
    2a6e:	34 f0       	brlt	.+12     	; 0x2a7c <handleIRRemoteCommands+0x302>
    2a70:	20 e0       	ldi	r18, 0x00	; 0
    2a72:	32 e0       	ldi	r19, 0x02	; 2
    2a74:	30 93 fa 02 	sts	0x02FA, r19
    2a78:	20 93 f9 02 	sts	0x02F9, r18
    	            if (pwm_left_desired > (MAX_MOTORS_PWM/2)) pwm_left_desired = (MAX_MOTORS_PWM/2);
    2a7c:	22 e0       	ldi	r18, 0x02	; 2
    2a7e:	81 30       	cpi	r24, 0x01	; 1
    2a80:	92 07       	cpc	r25, r18
    2a82:	0c f4       	brge	.+2      	; 0x2a86 <handleIRRemoteCommands+0x30c>
    2a84:	33 cf       	rjmp	.-410    	; 0x28ec <handleIRRemoteCommands+0x172>
    2a86:	80 e0       	ldi	r24, 0x00	; 0
    2a88:	92 e0       	ldi	r25, 0x02	; 2
    2a8a:	90 93 fc 02 	sts	0x02FC, r25
    2a8e:	80 93 fb 02 	sts	0x02FB, r24
    2a92:	20 91 f9 02 	lds	r18, 0x02F9
    2a96:	30 91 fa 02 	lds	r19, 0x02FA
    2a9a:	89 ce       	rjmp	.-750    	; 0x27ae <handleIRRemoteCommands+0x34>
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
					break;

				case 1:	// right motor forward
					pwm_right_desired += STEP_MOTORS;
    2a9c:	20 91 f9 02 	lds	r18, 0x02F9
    2aa0:	30 91 fa 02 	lds	r19, 0x02FA
    2aa4:	2e 5f       	subi	r18, 0xFE	; 254
    2aa6:	3f 4f       	sbci	r19, 0xFF	; 255
    2aa8:	30 93 fa 02 	sts	0x02FA, r19
    2aac:	20 93 f9 02 	sts	0x02F9, r18
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    2ab0:	42 e0       	ldi	r20, 0x02	; 2
    2ab2:	21 30       	cpi	r18, 0x01	; 1
    2ab4:	34 07       	cpc	r19, r20
    2ab6:	0c f4       	brge	.+2      	; 0x2aba <handleIRRemoteCommands+0x340>
    2ab8:	76 ce       	rjmp	.-788    	; 0x27a6 <handleIRRemoteCommands+0x2c>
    2aba:	80 e0       	ldi	r24, 0x00	; 0
    2abc:	92 e0       	ldi	r25, 0x02	; 2
    2abe:	90 93 fa 02 	sts	0x02FA, r25
    2ac2:	80 93 f9 02 	sts	0x02F9, r24
    2ac6:	80 91 fb 02 	lds	r24, 0x02FB
    2aca:	90 91 fc 02 	lds	r25, 0x02FC
	               	break;

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
    2ace:	20 e0       	ldi	r18, 0x00	; 0
    2ad0:	32 e0       	ldi	r19, 0x02	; 2
    2ad2:	6f ce       	rjmp	.-802    	; 0x27b2 <handleIRRemoteCommands+0x38>
	               	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
					break;

	           	case 0:	// colors
				case 50:
					colorState = (colorState+1)%5;
    2ad4:	80 91 29 04 	lds	r24, 0x0429
    2ad8:	90 e0       	ldi	r25, 0x00	; 0
    2ada:	01 96       	adiw	r24, 0x01	; 1
    2adc:	65 e0       	ldi	r22, 0x05	; 5
    2ade:	70 e0       	ldi	r23, 0x00	; 0
    2ae0:	0e 94 4e 52 	call	0xa49c	; 0xa49c <__divmodhi4>
    2ae4:	80 93 29 04 	sts	0x0429, r24

					if(colorState==0) {			// turn on blue and off all IRs
    2ae8:	88 23       	and	r24, r24
    2aea:	11 f5       	brne	.+68     	; 0x2b30 <handleIRRemoteCommands+0x3b6>
						LED_IR1_HIGH;
    2aec:	44 9a       	sbi	0x08, 4	; 8
						LED_IR2_HIGH;
    2aee:	45 9a       	sbi	0x08, 5	; 8
						pwm_blue = 0;
    2af0:	10 92 0e 02 	sts	0x020E, r1
						pwm_green = MAX_LEDS_PWM;
    2af4:	8f ef       	ldi	r24, 0xFF	; 255
    2af6:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = MAX_LEDS_PWM;
    2afa:	80 93 0c 02 	sts	0x020C, r24
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					}

					updateRedLed(pwm_red);
    2afe:	0e 94 32 3b 	call	0x7664	; 0x7664 <updateRedLed>
					updateGreenLed(pwm_green);
    2b02:	80 91 0d 02 	lds	r24, 0x020D
    2b06:	0e 94 46 3b 	call	0x768c	; 0x768c <updateGreenLed>
					updateBlueLed(pwm_blue);
    2b0a:	80 91 0e 02 	lds	r24, 0x020E
    2b0e:	0e 94 5a 3b 	call	0x76b4	; 0x76b4 <updateBlueLed>
    2b12:	20 91 f9 02 	lds	r18, 0x02F9
    2b16:	30 91 fa 02 	lds	r19, 0x02FA
    2b1a:	80 91 fb 02 	lds	r24, 0x02FB
    2b1e:	90 91 fc 02 	lds	r25, 0x02FC

	               	break;
    2b22:	45 ce       	rjmp	.-886    	; 0x27ae <handleIRRemoteCommands+0x34>

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
				speedr = pwm_right_desired;
    2b24:	30 95       	com	r19
    2b26:	21 95       	neg	r18
    2b28:	3f 4f       	sbci	r19, 0xFF	; 255
    2b2a:	43 ce       	rjmp	.-890    	; 0x27b2 <handleIRRemoteCommands+0x38>
					}
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    2b2c:	c9 01       	movw	r24, r18
    2b2e:	91 cf       	rjmp	.-222    	; 0x2a52 <handleIRRemoteCommands+0x2d8>
						LED_IR1_HIGH;
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
    2b30:	81 30       	cpi	r24, 0x01	; 1
    2b32:	91 f0       	breq	.+36     	; 0x2b58 <handleIRRemoteCommands+0x3de>
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = 0;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==2) {	// turn on red and on all IRs
    2b34:	82 30       	cpi	r24, 0x02	; 2
    2b36:	a1 f1       	breq	.+104    	; 0x2ba0 <handleIRRemoteCommands+0x426>
						LED_IR1_LOW;
						LED_IR2_LOW;
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = 0;
					} else if(colorState==3) {	// turn on white
    2b38:	83 30       	cpi	r24, 0x03	; 3
    2b3a:	e9 f1       	breq	.+122    	; 0x2bb6 <handleIRRemoteCommands+0x43c>
						pwm_blue = 0;
						pwm_green = 0;
						pwm_red = 0;
					} else if(colorState==4) {	// turn off all leds
						pwm_blue = MAX_LEDS_PWM;
    2b3c:	8f ef       	ldi	r24, 0xFF	; 255
    2b3e:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = MAX_LEDS_PWM;
    2b42:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = MAX_LEDS_PWM;
    2b46:	80 93 0c 02 	sts	0x020C, r24
    2b4a:	d9 cf       	rjmp	.-78     	; 0x2afe <handleIRRemoteCommands+0x384>
						case 2:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 1;
							break;
						case 3:
							obstacleAvoidanceEnabled = 1;
    2b4c:	81 e0       	ldi	r24, 0x01	; 1
    2b4e:	80 93 6c 04 	sts	0x046C, r24
							cliffAvoidanceEnabled = 1;
    2b52:	80 93 6d 04 	sts	0x046D, r24
    2b56:	23 ce       	rjmp	.-954    	; 0x279e <handleIRRemoteCommands+0x24>
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
						pwm_blue = MAX_LEDS_PWM;
    2b58:	8f ef       	ldi	r24, 0xFF	; 255
    2b5a:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = 0;
    2b5e:	10 92 0d 02 	sts	0x020D, r1
						pwm_red = MAX_LEDS_PWM;
    2b62:	80 93 0c 02 	sts	0x020C, r24
    2b66:	cb cf       	rjmp	.-106    	; 0x2afe <handleIRRemoteCommands+0x384>
				case 5:	// stop motors
				case 51:
					pwm_right_desired = 0;
					pwm_left_desired = 0;
					if(currentSelector == 8) {
						calibrateSensors();
    2b68:	0e 94 2a 3e 	call	0x7c54	; 0x7c54 <calibrateSensors>
						proximityResult[8] = 1023;	// because the first time this value could be low after calibration
    2b6c:	8f ef       	ldi	r24, 0xFF	; 255
    2b6e:	93 e0       	ldi	r25, 0x03	; 3
    2b70:	90 93 6a 02 	sts	0x026A, r25
    2b74:	80 93 69 02 	sts	0x0269, r24
						proximityResult[11] = 1023;	// and in that case a false black line will be detected
    2b78:	90 93 70 02 	sts	0x0270, r25
    2b7c:	80 93 6f 02 	sts	0x026F, r24
						calibState = 0;
    2b80:	10 92 43 0b 	sts	0x0B43, r1
						calibVelIndex = 1;
    2b84:	81 e0       	ldi	r24, 0x01	; 1
    2b86:	80 93 9d 08 	sts	0x089D, r24
						calibrateOdomFlag = 1;
    2b8a:	80 93 4e 05 	sts	0x054E, r24
    2b8e:	20 91 f9 02 	lds	r18, 0x02F9
    2b92:	30 91 fa 02 	lds	r19, 0x02FA
    2b96:	80 91 fb 02 	lds	r24, 0x02FB
    2b9a:	90 91 fc 02 	lds	r25, 0x02FC
    2b9e:	07 ce       	rjmp	.-1010   	; 0x27ae <handleIRRemoteCommands+0x34>
					} else if(colorState==1) {	// turn on green
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = 0;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==2) {	// turn on red and on all IRs
						LED_IR1_LOW;
    2ba0:	44 98       	cbi	0x08, 4	; 8
						LED_IR2_LOW;
    2ba2:	45 98       	cbi	0x08, 5	; 8
						pwm_blue = MAX_LEDS_PWM;
    2ba4:	8f ef       	ldi	r24, 0xFF	; 255
    2ba6:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = MAX_LEDS_PWM;
    2baa:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = 0;
    2bae:	10 92 0c 02 	sts	0x020C, r1
    2bb2:	80 e0       	ldi	r24, 0x00	; 0
    2bb4:	a4 cf       	rjmp	.-184    	; 0x2afe <handleIRRemoteCommands+0x384>
					} else if(colorState==3) {	// turn on white
						pwm_blue = 0;
    2bb6:	10 92 0e 02 	sts	0x020E, r1
						pwm_green = 0;
    2bba:	10 92 0d 02 	sts	0x020D, r1
						pwm_red = 0;
    2bbe:	10 92 0c 02 	sts	0x020C, r1
    2bc2:	80 e0       	ldi	r24, 0x00	; 0
    2bc4:	9c cf       	rjmp	.-200    	; 0x2afe <handleIRRemoteCommands+0x384>

00002bc6 <init_speed_control>:
	//d_speed_control = 5;
	//i_speed_control = 10;
	//i_limit_speed_control = 3200;
	//k_ff_speed_control_left = INIT_KFF;
	//k_ff_speed_control_right = INIT_KFF;
}
    2bc6:	08 95       	ret

00002bc8 <start_vertical_speed_control_left>:

void start_vertical_speed_control_left(signed int *pwm_left) {
    2bc8:	cf 92       	push	r12
    2bca:	df 92       	push	r13
    2bcc:	ef 92       	push	r14
    2bce:	ff 92       	push	r15
    2bd0:	0f 93       	push	r16
    2bd2:	1f 93       	push	r17
    2bd4:	cf 93       	push	r28
    2bd6:	df 93       	push	r29
    2bd8:	fc 01       	movw	r30, r24
	
	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).
	
	if(*pwm_left==0) {
    2bda:	80 81       	ld	r24, Z
    2bdc:	91 81       	ldd	r25, Z+1	; 0x01
    2bde:	00 97       	sbiw	r24, 0x00	; 0
    2be0:	09 f4       	brne	.+2      	; 0x2be4 <start_vertical_speed_control_left+0x1c>
    2be2:	f7 c0       	rjmp	.+494    	; 0x2dd2 <start_vertical_speed_control_left+0x20a>
		delta_left_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    2be4:	20 91 3e 04 	lds	r18, 0x043E
    2be8:	30 91 3f 04 	lds	r19, 0x043F
    2bec:	41 e0       	ldi	r20, 0x01	; 1
    2bee:	2e 30       	cpi	r18, 0x0E	; 14
    2bf0:	34 07       	cpc	r19, r20
    2bf2:	0c f4       	brge	.+2      	; 0x2bf6 <start_vertical_speed_control_left+0x2e>
    2bf4:	c7 c0       	rjmp	.+398    	; 0x2d84 <start_vertical_speed_control_left+0x1bc>
		if(*pwm_left > 0) {
    2bf6:	18 16       	cp	r1, r24
    2bf8:	19 06       	cpc	r1, r25
    2bfa:	0c f0       	brlt	.+2      	; 0x2bfe <start_vertical_speed_control_left+0x36>
    2bfc:	68 c1       	rjmp	.+720    	; 0x2ece <start_vertical_speed_control_left+0x306>
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
    2bfe:	88 e6       	ldi	r24, 0x68	; 104
    2c00:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    2c02:	82 1b       	sub	r24, r18
    2c04:	93 0b       	sbc	r25, r19
    2c06:	95 95       	asr	r25
    2c08:	87 95       	ror	r24
    2c0a:	95 95       	asr	r25
    2c0c:	87 95       	ror	r24
    2c0e:	29 e1       	ldi	r18, 0x19	; 25
    2c10:	30 e0       	ldi	r19, 0x00	; 0
    2c12:	28 1b       	sub	r18, r24
    2c14:	39 0b       	sbc	r19, r25
    2c16:	30 93 04 02 	sts	0x0204, r19
    2c1a:	20 93 03 02 	sts	0x0203, r18
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
		}
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    2c1e:	c0 91 53 05 	lds	r28, 0x0553
    2c22:	d0 91 54 05 	lds	r29, 0x0554
    2c26:	d0 93 6b 09 	sts	0x096B, r29
    2c2a:	c0 93 6a 09 	sts	0x096A, r28
	if(*pwm_left >= 0) {
    2c2e:	80 81       	ld	r24, Z
    2c30:	91 81       	ldd	r25, Z+1	; 0x01
    2c32:	97 fd       	sbrc	r25, 7
    2c34:	2e c1       	rjmp	.+604    	; 0x2e92 <start_vertical_speed_control_left+0x2ca>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    2c36:	20 91 f1 02 	lds	r18, 0x02F1
    2c3a:	30 91 f2 02 	lds	r19, 0x02F2
    2c3e:	dc 01       	movw	r26, r24
    2c40:	a2 1b       	sub	r26, r18
    2c42:	b3 0b       	sbc	r27, r19
    2c44:	b0 93 54 05 	sts	0x0554, r27
    2c48:	a0 93 53 05 	sts	0x0553, r26
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;
    2c4c:	80 91 09 03 	lds	r24, 0x0309
    2c50:	90 91 0a 03 	lds	r25, 0x030A
    2c54:	8a 0f       	add	r24, r26
    2c56:	9b 1f       	adc	r25, r27
    2c58:	90 93 0a 03 	sts	0x030A, r25
    2c5c:	80 93 09 03 	sts	0x0309, r24

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
    2c60:	66 e0       	ldi	r22, 0x06	; 6
    2c62:	81 34       	cpi	r24, 0x41	; 65
    2c64:	96 07       	cpc	r25, r22
    2c66:	0c f4       	brge	.+2      	; 0x2c6a <start_vertical_speed_control_left+0xa2>
    2c68:	cb c0       	rjmp	.+406    	; 0x2e00 <start_vertical_speed_control_left+0x238>
		delta_left_speed_sum = I_LIMIT_VERTICAL;
    2c6a:	80 e4       	ldi	r24, 0x40	; 64
    2c6c:	96 e0       	ldi	r25, 0x06	; 6
    2c6e:	90 93 0a 03 	sts	0x030A, r25
    2c72:	80 93 09 03 	sts	0x0309, r24
    2c76:	10 ec       	ldi	r17, 0xC0	; 192
    2c78:	c1 2e       	mov	r12, r17
    2c7a:	12 e1       	ldi	r17, 0x12	; 18
    2c7c:	d1 2e       	mov	r13, r17
    2c7e:	e1 2c       	mov	r14, r1
    2c80:	f1 2c       	mov	r15, r1
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_left_speed_controller = (signed long int)(k_ff_speed_control_left*(*pwm_left));
    2c82:	00 81       	ld	r16, Z
    2c84:	11 81       	ldd	r17, Z+1	; 0x01
	pwm_left_speed_controller += (signed long int)(P_VERTICAL * delta_left_speed_current);
    2c86:	9d 01       	movw	r18, r26
    2c88:	22 0f       	add	r18, r18
    2c8a:	33 1f       	adc	r19, r19
    2c8c:	2a 0f       	add	r18, r26
    2c8e:	3b 1f       	adc	r19, r27
    2c90:	22 0f       	add	r18, r18
    2c92:	33 1f       	adc	r19, r19
    2c94:	22 0f       	add	r18, r18
    2c96:	33 1f       	adc	r19, r19
    2c98:	22 0f       	add	r18, r18
    2c9a:	33 1f       	adc	r19, r19
    2c9c:	2a 0f       	add	r18, r26
    2c9e:	3b 1f       	adc	r19, r27
    2ca0:	44 27       	eor	r20, r20
    2ca2:	37 fd       	sbrc	r19, 7
    2ca4:	40 95       	com	r20
    2ca6:	54 2f       	mov	r21, r20
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_left_speed_controller = (signed long int)(k_ff_speed_control_left*(*pwm_left));
    2ca8:	80 91 03 02 	lds	r24, 0x0203
    2cac:	90 91 04 02 	lds	r25, 0x0204
    2cb0:	08 9f       	mul	r16, r24
    2cb2:	b0 01       	movw	r22, r0
    2cb4:	09 9f       	mul	r16, r25
    2cb6:	70 0d       	add	r23, r0
    2cb8:	18 9f       	mul	r17, r24
    2cba:	70 0d       	add	r23, r0
    2cbc:	11 24       	eor	r1, r1
    2cbe:	88 27       	eor	r24, r24
    2cc0:	77 fd       	sbrc	r23, 7
    2cc2:	80 95       	com	r24
    2cc4:	98 2f       	mov	r25, r24
	pwm_left_speed_controller += (signed long int)(P_VERTICAL * delta_left_speed_current);
    2cc6:	26 0f       	add	r18, r22
    2cc8:	37 1f       	adc	r19, r23
    2cca:	48 1f       	adc	r20, r24
    2ccc:	59 1f       	adc	r21, r25
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
    2cce:	ac 1b       	sub	r26, r28
    2cd0:	bd 0b       	sbc	r27, r29
    2cd2:	aa 0f       	add	r26, r26
    2cd4:	bb 1f       	adc	r27, r27
    2cd6:	bd 01       	movw	r22, r26
    2cd8:	cb 01       	movw	r24, r22
    2cda:	aa 27       	eor	r26, r26
    2cdc:	97 fd       	sbrc	r25, 7
    2cde:	a0 95       	com	r26
    2ce0:	ba 2f       	mov	r27, r26
    2ce2:	28 0f       	add	r18, r24
    2ce4:	39 1f       	adc	r19, r25
    2ce6:	4a 1f       	adc	r20, r26
    2ce8:	5b 1f       	adc	r21, r27
	pwm_left_speed_controller += (signed long int)(I_VERTICAL*delta_left_speed_sum);
    2cea:	2c 0d       	add	r18, r12
    2cec:	3d 1d       	adc	r19, r13
    2cee:	4e 1d       	adc	r20, r14
    2cf0:	5f 1d       	adc	r21, r15
    2cf2:	20 93 05 03 	sts	0x0305, r18
    2cf6:	30 93 06 03 	sts	0x0306, r19
    2cfa:	40 93 07 03 	sts	0x0307, r20
    2cfe:	50 93 08 03 	sts	0x0308, r21

	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    2d02:	57 fd       	sbrc	r21, 7
    2d04:	9d c0       	rjmp	.+314    	; 0x2e40 <start_vertical_speed_control_left+0x278>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    2d06:	12 16       	cp	r1, r18
    2d08:	13 06       	cpc	r1, r19
    2d0a:	14 06       	cpc	r1, r20
    2d0c:	15 06       	cpc	r1, r21
    2d0e:	0c f0       	brlt	.+2      	; 0x2d12 <start_vertical_speed_control_left+0x14a>
    2d10:	a4 c0       	rjmp	.+328    	; 0x2e5a <start_vertical_speed_control_left+0x292>
    2d12:	17 fd       	sbrc	r17, 7
    2d14:	c9 c0       	rjmp	.+402    	; 0x2ea8 <start_vertical_speed_control_left+0x2e0>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    2d16:	21 3c       	cpi	r18, 0xC1	; 193
    2d18:	7d e5       	ldi	r23, 0x5D	; 93
    2d1a:	37 07       	cpc	r19, r23
    2d1c:	70 e0       	ldi	r23, 0x00	; 0
    2d1e:	47 07       	cpc	r20, r23
    2d20:	70 e0       	ldi	r23, 0x00	; 0
    2d22:	57 07       	cpc	r21, r23
    2d24:	0c f4       	brge	.+2      	; 0x2d28 <start_vertical_speed_control_left+0x160>
    2d26:	99 c0       	rjmp	.+306    	; 0x2e5a <start_vertical_speed_control_left+0x292>
    2d28:	80 ec       	ldi	r24, 0xC0	; 192
    2d2a:	9d e5       	ldi	r25, 0x5D	; 93
    2d2c:	a0 e0       	ldi	r26, 0x00	; 0
    2d2e:	b0 e0       	ldi	r27, 0x00	; 0
    2d30:	80 93 05 03 	sts	0x0305, r24
    2d34:	90 93 06 03 	sts	0x0306, r25
    2d38:	a0 93 07 03 	sts	0x0307, r26
    2d3c:	b0 93 08 03 	sts	0x0308, r27
    2d40:	2c ed       	ldi	r18, 0xDC	; 220
    2d42:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = (signed int)(pwm_left_speed_controller>>4);
    2d44:	31 83       	std	Z+1, r19	; 0x01
    2d46:	20 83       	st	Z, r18

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
    2d48:	80 91 eb 02 	lds	r24, 0x02EB
    2d4c:	90 91 ec 02 	lds	r25, 0x02EC
    2d50:	18 16       	cp	r1, r24
    2d52:	19 06       	cpc	r1, r25
    2d54:	0c f0       	brlt	.+2      	; 0x2d58 <start_vertical_speed_control_left+0x190>
    2d56:	98 c0       	rjmp	.+304    	; 0x2e88 <start_vertical_speed_control_left+0x2c0>
		*pwm_left += 1;
    2d58:	2f 5f       	subi	r18, 0xFF	; 255
    2d5a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d5c:	31 83       	std	Z+1, r19	; 0x01
    2d5e:	20 83       	st	Z, r18
	} else {
		*pwm_left -= 1;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    2d60:	42 e0       	ldi	r20, 0x02	; 2
    2d62:	21 30       	cpi	r18, 0x01	; 1
    2d64:	34 07       	cpc	r19, r20
    2d66:	0c f4       	brge	.+2      	; 0x2d6a <start_vertical_speed_control_left+0x1a2>
    2d68:	41 c0       	rjmp	.+130    	; 0x2dec <start_vertical_speed_control_left+0x224>
    2d6a:	80 e0       	ldi	r24, 0x00	; 0
    2d6c:	92 e0       	ldi	r25, 0x02	; 2
    2d6e:	91 83       	std	Z+1, r25	; 0x01
    2d70:	80 83       	st	Z, r24
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);


}
    2d72:	df 91       	pop	r29
    2d74:	cf 91       	pop	r28
    2d76:	1f 91       	pop	r17
    2d78:	0f 91       	pop	r16
    2d7a:	ff 90       	pop	r15
    2d7c:	ef 90       	pop	r14
    2d7e:	df 90       	pop	r13
    2d80:	cf 90       	pop	r12
    2d82:	08 95       	ret
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    2d84:	24 3b       	cpi	r18, 0xB4	; 180
    2d86:	31 05       	cpc	r19, r1
    2d88:	94 f4       	brge	.+36     	; 0x2dae <start_vertical_speed_control_left+0x1e6>
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
    2d8a:	2a 35       	cpi	r18, 0x5A	; 90
    2d8c:	31 05       	cpc	r19, r1
    2d8e:	7c f4       	brge	.+30     	; 0x2dae <start_vertical_speed_control_left+0x1e6>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
    2d90:	18 16       	cp	r1, r24
    2d92:	19 06       	cpc	r1, r25
    2d94:	0c f0       	brlt	.+2      	; 0x2d98 <start_vertical_speed_control_left+0x1d0>
    2d96:	a9 c0       	rjmp	.+338    	; 0x2eea <start_vertical_speed_control_left+0x322>
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
    2d98:	35 95       	asr	r19
    2d9a:	27 95       	ror	r18
    2d9c:	35 95       	asr	r19
    2d9e:	27 95       	ror	r18
    2da0:	27 5e       	subi	r18, 0xE7	; 231
    2da2:	3f 4f       	sbci	r19, 0xFF	; 255
    2da4:	30 93 04 02 	sts	0x0204, r19
    2da8:	20 93 03 02 	sts	0x0203, r18
    2dac:	38 cf       	rjmp	.-400    	; 0x2c1e <start_vertical_speed_control_left+0x56>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
    2dae:	18 16       	cp	r1, r24
    2db0:	19 06       	cpc	r1, r25
    2db2:	0c f0       	brlt	.+2      	; 0x2db6 <start_vertical_speed_control_left+0x1ee>
    2db4:	42 c0       	rjmp	.+132    	; 0x2e3a <start_vertical_speed_control_left+0x272>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
    2db6:	84 eb       	ldi	r24, 0xB4	; 180
    2db8:	90 e0       	ldi	r25, 0x00	; 0
    2dba:	82 1b       	sub	r24, r18
    2dbc:	93 0b       	sbc	r25, r19
    2dbe:	95 95       	asr	r25
    2dc0:	87 95       	ror	r24
    2dc2:	95 95       	asr	r25
    2dc4:	87 95       	ror	r24
    2dc6:	49 96       	adiw	r24, 0x19	; 25
    2dc8:	90 93 04 02 	sts	0x0204, r25
    2dcc:	80 93 03 02 	sts	0x0203, r24
    2dd0:	26 cf       	rjmp	.-436    	; 0x2c1e <start_vertical_speed_control_left+0x56>
void start_vertical_speed_control_left(signed int *pwm_left) {
	
	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).
	
	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    2dd2:	10 92 0a 03 	sts	0x030A, r1
    2dd6:	10 92 09 03 	sts	0x0309, r1
		delta_left_speed_current = 0;
    2dda:	10 92 54 05 	sts	0x0554, r1
    2dde:	10 92 53 05 	sts	0x0553, r1
		delta_left_speed_prev = 0;
    2de2:	10 92 6b 09 	sts	0x096B, r1
    2de6:	10 92 6a 09 	sts	0x096A, r1
		return;
    2dea:	c3 cf       	rjmp	.-122    	; 0x2d72 <start_vertical_speed_control_left+0x1aa>
	} else {
		*pwm_left -= 1;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    2dec:	6e ef       	ldi	r22, 0xFE	; 254
    2dee:	20 30       	cpi	r18, 0x00	; 0
    2df0:	36 07       	cpc	r19, r22
    2df2:	0c f0       	brlt	.+2      	; 0x2df6 <start_vertical_speed_control_left+0x22e>
    2df4:	be cf       	rjmp	.-132    	; 0x2d72 <start_vertical_speed_control_left+0x1aa>
    2df6:	80 e0       	ldi	r24, 0x00	; 0
    2df8:	9e ef       	ldi	r25, 0xFE	; 254
    2dfa:	91 83       	std	Z+1, r25	; 0x01
    2dfc:	80 83       	st	Z, r24
    2dfe:	b9 cf       	rjmp	.-142    	; 0x2d72 <start_vertical_speed_control_left+0x1aa>
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    2e00:	79 ef       	ldi	r23, 0xF9	; 249
    2e02:	80 3c       	cpi	r24, 0xC0	; 192
    2e04:	97 07       	cpc	r25, r23
    2e06:	7c f4       	brge	.+30     	; 0x2e26 <start_vertical_speed_control_left+0x25e>
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
    2e08:	80 ec       	ldi	r24, 0xC0	; 192
    2e0a:	99 ef       	ldi	r25, 0xF9	; 249
    2e0c:	90 93 0a 03 	sts	0x030A, r25
    2e10:	80 93 09 03 	sts	0x0309, r24
    2e14:	60 e4       	ldi	r22, 0x40	; 64
    2e16:	c6 2e       	mov	r12, r22
    2e18:	6d ee       	ldi	r22, 0xED	; 237
    2e1a:	d6 2e       	mov	r13, r22
    2e1c:	6f ef       	ldi	r22, 0xFF	; 255
    2e1e:	e6 2e       	mov	r14, r22
    2e20:	6f ef       	ldi	r22, 0xFF	; 255
    2e22:	f6 2e       	mov	r15, r22
    2e24:	2e cf       	rjmp	.-420    	; 0x2c82 <start_vertical_speed_control_left+0xba>
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    2e26:	6c 01       	movw	r12, r24
    2e28:	cc 0c       	add	r12, r12
    2e2a:	dd 1c       	adc	r13, r13
    2e2c:	c8 0e       	add	r12, r24
    2e2e:	d9 1e       	adc	r13, r25
    2e30:	ee 24       	eor	r14, r14
    2e32:	d7 fc       	sbrc	r13, 7
    2e34:	e0 94       	com	r14
    2e36:	fe 2c       	mov	r15, r14
    2e38:	24 cf       	rjmp	.-440    	; 0x2c82 <start_vertical_speed_control_left+0xba>
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    2e3a:	84 eb       	ldi	r24, 0xB4	; 180
    2e3c:	90 e0       	ldi	r25, 0x00	; 0
    2e3e:	e1 ce       	rjmp	.-574    	; 0x2c02 <start_vertical_speed_control_left+0x3a>
	pwm_left_speed_controller += (signed long int)(P_VERTICAL * delta_left_speed_current);
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
	pwm_left_speed_controller += (signed long int)(I_VERTICAL*delta_left_speed_sum);

	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    2e40:	17 fd       	sbrc	r17, 7
    2e42:	0b c0       	rjmp	.+22     	; 0x2e5a <start_vertical_speed_control_left+0x292>
		pwm_left_speed_controller = 0;
    2e44:	10 92 05 03 	sts	0x0305, r1
    2e48:	10 92 06 03 	sts	0x0306, r1
    2e4c:	10 92 07 03 	sts	0x0307, r1
    2e50:	10 92 08 03 	sts	0x0308, r1
    2e54:	20 e0       	ldi	r18, 0x00	; 0
    2e56:	30 e0       	ldi	r19, 0x00	; 0
    2e58:	a9 01       	movw	r20, r18
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    2e5a:	20 34       	cpi	r18, 0x40	; 64
    2e5c:	82 ea       	ldi	r24, 0xA2	; 162
    2e5e:	38 07       	cpc	r19, r24
    2e60:	8f ef       	ldi	r24, 0xFF	; 255
    2e62:	48 07       	cpc	r20, r24
    2e64:	8f ef       	ldi	r24, 0xFF	; 255
    2e66:	58 07       	cpc	r21, r24
    2e68:	54 f5       	brge	.+84     	; 0x2ebe <start_vertical_speed_control_left+0x2f6>
    2e6a:	80 e4       	ldi	r24, 0x40	; 64
    2e6c:	92 ea       	ldi	r25, 0xA2	; 162
    2e6e:	af ef       	ldi	r26, 0xFF	; 255
    2e70:	bf ef       	ldi	r27, 0xFF	; 255
    2e72:	80 93 05 03 	sts	0x0305, r24
    2e76:	90 93 06 03 	sts	0x0306, r25
    2e7a:	a0 93 07 03 	sts	0x0307, r26
    2e7e:	b0 93 08 03 	sts	0x0308, r27
    2e82:	24 e2       	ldi	r18, 0x24	; 36
    2e84:	3a ef       	ldi	r19, 0xFA	; 250
    2e86:	5e cf       	rjmp	.-324    	; 0x2d44 <start_vertical_speed_control_left+0x17c>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
		*pwm_left += 1;
	} else {
		*pwm_left -= 1;
    2e88:	21 50       	subi	r18, 0x01	; 1
    2e8a:	30 40       	sbci	r19, 0x00	; 0
    2e8c:	31 83       	std	Z+1, r19	; 0x01
    2e8e:	20 83       	st	Z, r18
    2e90:	67 cf       	rjmp	.-306    	; 0x2d60 <start_vertical_speed_control_left+0x198>
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    2e92:	a0 91 f1 02 	lds	r26, 0x02F1
    2e96:	b0 91 f2 02 	lds	r27, 0x02F2
    2e9a:	a8 0f       	add	r26, r24
    2e9c:	b9 1f       	adc	r27, r25
    2e9e:	b0 93 54 05 	sts	0x0554, r27
    2ea2:	a0 93 53 05 	sts	0x0553, r26
    2ea6:	d2 ce       	rjmp	.-604    	; 0x2c4c <start_vertical_speed_control_left+0x84>
	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    2ea8:	10 92 05 03 	sts	0x0305, r1
    2eac:	10 92 06 03 	sts	0x0306, r1
    2eb0:	10 92 07 03 	sts	0x0307, r1
    2eb4:	10 92 08 03 	sts	0x0308, r1
    2eb8:	20 e0       	ldi	r18, 0x00	; 0
    2eba:	30 e0       	ldi	r19, 0x00	; 0
    2ebc:	a9 01       	movw	r20, r18
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    2ebe:	84 e0       	ldi	r24, 0x04	; 4
    2ec0:	55 95       	asr	r21
    2ec2:	47 95       	ror	r20
    2ec4:	37 95       	ror	r19
    2ec6:	27 95       	ror	r18
    2ec8:	8a 95       	dec	r24
    2eca:	d1 f7       	brne	.-12     	; 0x2ec0 <start_vertical_speed_control_left+0x2f8>
    2ecc:	3b cf       	rjmp	.-394    	; 0x2d44 <start_vertical_speed_control_left+0x17c>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
    2ece:	88 e6       	ldi	r24, 0x68	; 104
    2ed0:	91 e0       	ldi	r25, 0x01	; 1
    2ed2:	82 1b       	sub	r24, r18
    2ed4:	93 0b       	sbc	r25, r19
    2ed6:	95 95       	asr	r25
    2ed8:	87 95       	ror	r24
    2eda:	95 95       	asr	r25
    2edc:	87 95       	ror	r24
    2ede:	49 96       	adiw	r24, 0x19	; 25
    2ee0:	90 93 04 02 	sts	0x0204, r25
    2ee4:	80 93 03 02 	sts	0x0203, r24
    2ee8:	9a ce       	rjmp	.-716    	; 0x2c1e <start_vertical_speed_control_left+0x56>
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
    2eea:	35 95       	asr	r19
    2eec:	27 95       	ror	r18
    2eee:	35 95       	asr	r19
    2ef0:	27 95       	ror	r18
    2ef2:	89 e1       	ldi	r24, 0x19	; 25
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	82 1b       	sub	r24, r18
    2ef8:	93 0b       	sbc	r25, r19
    2efa:	90 93 04 02 	sts	0x0204, r25
    2efe:	80 93 03 02 	sts	0x0203, r24
    2f02:	8d ce       	rjmp	.-742    	; 0x2c1e <start_vertical_speed_control_left+0x56>

00002f04 <start_vertical_speed_control_right>:


}


void start_vertical_speed_control_right(signed int *pwm_right) {
    2f04:	cf 92       	push	r12
    2f06:	df 92       	push	r13
    2f08:	ef 92       	push	r14
    2f0a:	ff 92       	push	r15
    2f0c:	0f 93       	push	r16
    2f0e:	1f 93       	push	r17
    2f10:	cf 93       	push	r28
    2f12:	df 93       	push	r29
    2f14:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    2f16:	80 81       	ld	r24, Z
    2f18:	91 81       	ldd	r25, Z+1	; 0x01
    2f1a:	00 97       	sbiw	r24, 0x00	; 0
    2f1c:	09 f4       	brne	.+2      	; 0x2f20 <start_vertical_speed_control_right+0x1c>
    2f1e:	f7 c0       	rjmp	.+494    	; 0x310e <start_vertical_speed_control_right+0x20a>
		delta_right_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    2f20:	20 91 3e 04 	lds	r18, 0x043E
    2f24:	30 91 3f 04 	lds	r19, 0x043F
    2f28:	41 e0       	ldi	r20, 0x01	; 1
    2f2a:	2e 30       	cpi	r18, 0x0E	; 14
    2f2c:	34 07       	cpc	r19, r20
    2f2e:	0c f4       	brge	.+2      	; 0x2f32 <start_vertical_speed_control_right+0x2e>
    2f30:	c7 c0       	rjmp	.+398    	; 0x30c0 <start_vertical_speed_control_right+0x1bc>
		if(*pwm_right > 0) {
    2f32:	18 16       	cp	r1, r24
    2f34:	19 06       	cpc	r1, r25
    2f36:	0c f0       	brlt	.+2      	; 0x2f3a <start_vertical_speed_control_right+0x36>
    2f38:	68 c1       	rjmp	.+720    	; 0x320a <start_vertical_speed_control_right+0x306>
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
    2f3a:	88 e6       	ldi	r24, 0x68	; 104
    2f3c:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    2f3e:	82 1b       	sub	r24, r18
    2f40:	93 0b       	sbc	r25, r19
    2f42:	95 95       	asr	r25
    2f44:	87 95       	ror	r24
    2f46:	95 95       	asr	r25
    2f48:	87 95       	ror	r24
    2f4a:	29 e1       	ldi	r18, 0x19	; 25
    2f4c:	30 e0       	ldi	r19, 0x00	; 0
    2f4e:	28 1b       	sub	r18, r24
    2f50:	39 0b       	sbc	r19, r25
    2f52:	30 93 06 02 	sts	0x0206, r19
    2f56:	20 93 05 02 	sts	0x0205, r18
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
		}
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    2f5a:	c0 91 09 0b 	lds	r28, 0x0B09
    2f5e:	d0 91 0a 0b 	lds	r29, 0x0B0A
    2f62:	d0 93 a3 08 	sts	0x08A3, r29
    2f66:	c0 93 a2 08 	sts	0x08A2, r28
	if(*pwm_right >= 0) {
    2f6a:	80 81       	ld	r24, Z
    2f6c:	91 81       	ldd	r25, Z+1	; 0x01
    2f6e:	97 fd       	sbrc	r25, 7
    2f70:	2e c1       	rjmp	.+604    	; 0x31ce <start_vertical_speed_control_right+0x2ca>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    2f72:	20 91 f3 02 	lds	r18, 0x02F3
    2f76:	30 91 f4 02 	lds	r19, 0x02F4
    2f7a:	dc 01       	movw	r26, r24
    2f7c:	a2 1b       	sub	r26, r18
    2f7e:	b3 0b       	sbc	r27, r19
    2f80:	b0 93 0a 0b 	sts	0x0B0A, r27
    2f84:	a0 93 09 0b 	sts	0x0B09, r26
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    2f88:	80 91 0b 03 	lds	r24, 0x030B
    2f8c:	90 91 0c 03 	lds	r25, 0x030C
    2f90:	8a 0f       	add	r24, r26
    2f92:	9b 1f       	adc	r25, r27
    2f94:	90 93 0c 03 	sts	0x030C, r25
    2f98:	80 93 0b 03 	sts	0x030B, r24

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
    2f9c:	66 e0       	ldi	r22, 0x06	; 6
    2f9e:	81 34       	cpi	r24, 0x41	; 65
    2fa0:	96 07       	cpc	r25, r22
    2fa2:	0c f4       	brge	.+2      	; 0x2fa6 <start_vertical_speed_control_right+0xa2>
    2fa4:	cb c0       	rjmp	.+406    	; 0x313c <start_vertical_speed_control_right+0x238>
		delta_right_speed_sum = I_LIMIT_VERTICAL;
    2fa6:	80 e4       	ldi	r24, 0x40	; 64
    2fa8:	96 e0       	ldi	r25, 0x06	; 6
    2faa:	90 93 0c 03 	sts	0x030C, r25
    2fae:	80 93 0b 03 	sts	0x030B, r24
    2fb2:	40 ec       	ldi	r20, 0xC0	; 192
    2fb4:	c4 2e       	mov	r12, r20
    2fb6:	42 e1       	ldi	r20, 0x12	; 18
    2fb8:	d4 2e       	mov	r13, r20
    2fba:	e1 2c       	mov	r14, r1
    2fbc:	f1 2c       	mov	r15, r1
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_right_speed_controller = (signed long int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
    2fbe:	00 81       	ld	r16, Z
    2fc0:	11 81       	ldd	r17, Z+1	; 0x01
	pwm_right_speed_controller += (signed long int)(P_VERTICAL * delta_right_speed_current);
    2fc2:	9d 01       	movw	r18, r26
    2fc4:	22 0f       	add	r18, r18
    2fc6:	33 1f       	adc	r19, r19
    2fc8:	2a 0f       	add	r18, r26
    2fca:	3b 1f       	adc	r19, r27
    2fcc:	22 0f       	add	r18, r18
    2fce:	33 1f       	adc	r19, r19
    2fd0:	22 0f       	add	r18, r18
    2fd2:	33 1f       	adc	r19, r19
    2fd4:	22 0f       	add	r18, r18
    2fd6:	33 1f       	adc	r19, r19
    2fd8:	2a 0f       	add	r18, r26
    2fda:	3b 1f       	adc	r19, r27
    2fdc:	44 27       	eor	r20, r20
    2fde:	37 fd       	sbrc	r19, 7
    2fe0:	40 95       	com	r20
    2fe2:	54 2f       	mov	r21, r20
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_right_speed_controller = (signed long int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
    2fe4:	80 91 05 02 	lds	r24, 0x0205
    2fe8:	90 91 06 02 	lds	r25, 0x0206
    2fec:	08 9f       	mul	r16, r24
    2fee:	b0 01       	movw	r22, r0
    2ff0:	09 9f       	mul	r16, r25
    2ff2:	70 0d       	add	r23, r0
    2ff4:	18 9f       	mul	r17, r24
    2ff6:	70 0d       	add	r23, r0
    2ff8:	11 24       	eor	r1, r1
    2ffa:	88 27       	eor	r24, r24
    2ffc:	77 fd       	sbrc	r23, 7
    2ffe:	80 95       	com	r24
    3000:	98 2f       	mov	r25, r24
	pwm_right_speed_controller += (signed long int)(P_VERTICAL * delta_right_speed_current);
    3002:	26 0f       	add	r18, r22
    3004:	37 1f       	adc	r19, r23
    3006:	48 1f       	adc	r20, r24
    3008:	59 1f       	adc	r21, r25
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
    300a:	ac 1b       	sub	r26, r28
    300c:	bd 0b       	sbc	r27, r29
    300e:	aa 0f       	add	r26, r26
    3010:	bb 1f       	adc	r27, r27
    3012:	bd 01       	movw	r22, r26
    3014:	cb 01       	movw	r24, r22
    3016:	aa 27       	eor	r26, r26
    3018:	97 fd       	sbrc	r25, 7
    301a:	a0 95       	com	r26
    301c:	ba 2f       	mov	r27, r26
    301e:	28 0f       	add	r18, r24
    3020:	39 1f       	adc	r19, r25
    3022:	4a 1f       	adc	r20, r26
    3024:	5b 1f       	adc	r21, r27
	pwm_right_speed_controller += (signed long int)(I_VERTICAL*delta_right_speed_sum);
    3026:	2c 0d       	add	r18, r12
    3028:	3d 1d       	adc	r19, r13
    302a:	4e 1d       	adc	r20, r14
    302c:	5f 1d       	adc	r21, r15
    302e:	20 93 01 03 	sts	0x0301, r18
    3032:	30 93 02 03 	sts	0x0302, r19
    3036:	40 93 03 03 	sts	0x0303, r20
    303a:	50 93 04 03 	sts	0x0304, r21

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    303e:	57 fd       	sbrc	r21, 7
    3040:	9d c0       	rjmp	.+314    	; 0x317c <start_vertical_speed_control_right+0x278>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    3042:	12 16       	cp	r1, r18
    3044:	13 06       	cpc	r1, r19
    3046:	14 06       	cpc	r1, r20
    3048:	15 06       	cpc	r1, r21
    304a:	0c f0       	brlt	.+2      	; 0x304e <start_vertical_speed_control_right+0x14a>
    304c:	a4 c0       	rjmp	.+328    	; 0x3196 <start_vertical_speed_control_right+0x292>
    304e:	17 fd       	sbrc	r17, 7
    3050:	c9 c0       	rjmp	.+402    	; 0x31e4 <start_vertical_speed_control_right+0x2e0>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    3052:	21 3c       	cpi	r18, 0xC1	; 193
    3054:	7d e5       	ldi	r23, 0x5D	; 93
    3056:	37 07       	cpc	r19, r23
    3058:	70 e0       	ldi	r23, 0x00	; 0
    305a:	47 07       	cpc	r20, r23
    305c:	70 e0       	ldi	r23, 0x00	; 0
    305e:	57 07       	cpc	r21, r23
    3060:	0c f4       	brge	.+2      	; 0x3064 <start_vertical_speed_control_right+0x160>
    3062:	99 c0       	rjmp	.+306    	; 0x3196 <start_vertical_speed_control_right+0x292>
    3064:	80 ec       	ldi	r24, 0xC0	; 192
    3066:	9d e5       	ldi	r25, 0x5D	; 93
    3068:	a0 e0       	ldi	r26, 0x00	; 0
    306a:	b0 e0       	ldi	r27, 0x00	; 0
    306c:	80 93 01 03 	sts	0x0301, r24
    3070:	90 93 02 03 	sts	0x0302, r25
    3074:	a0 93 03 03 	sts	0x0303, r26
    3078:	b0 93 04 03 	sts	0x0304, r27
    307c:	2c ed       	ldi	r18, 0xDC	; 220
    307e:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = (signed int)(pwm_right_speed_controller>>4);
    3080:	31 83       	std	Z+1, r19	; 0x01
    3082:	20 83       	st	Z, r18

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
    3084:	80 91 e9 02 	lds	r24, 0x02E9
    3088:	90 91 ea 02 	lds	r25, 0x02EA
    308c:	18 16       	cp	r1, r24
    308e:	19 06       	cpc	r1, r25
    3090:	0c f0       	brlt	.+2      	; 0x3094 <start_vertical_speed_control_right+0x190>
    3092:	98 c0       	rjmp	.+304    	; 0x31c4 <start_vertical_speed_control_right+0x2c0>
		*pwm_right += 1;
    3094:	2f 5f       	subi	r18, 0xFF	; 255
    3096:	3f 4f       	sbci	r19, 0xFF	; 255
    3098:	31 83       	std	Z+1, r19	; 0x01
    309a:	20 83       	st	Z, r18
	} else {
		*pwm_right -= 1;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    309c:	42 e0       	ldi	r20, 0x02	; 2
    309e:	21 30       	cpi	r18, 0x01	; 1
    30a0:	34 07       	cpc	r19, r20
    30a2:	0c f4       	brge	.+2      	; 0x30a6 <start_vertical_speed_control_right+0x1a2>
    30a4:	41 c0       	rjmp	.+130    	; 0x3128 <start_vertical_speed_control_right+0x224>
    30a6:	80 e0       	ldi	r24, 0x00	; 0
    30a8:	92 e0       	ldi	r25, 0x02	; 2
    30aa:	91 83       	std	Z+1, r25	; 0x01
    30ac:	80 83       	st	Z, r24
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    30ae:	df 91       	pop	r29
    30b0:	cf 91       	pop	r28
    30b2:	1f 91       	pop	r17
    30b4:	0f 91       	pop	r16
    30b6:	ff 90       	pop	r15
    30b8:	ef 90       	pop	r14
    30ba:	df 90       	pop	r13
    30bc:	cf 90       	pop	r12
    30be:	08 95       	ret
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    30c0:	24 3b       	cpi	r18, 0xB4	; 180
    30c2:	31 05       	cpc	r19, r1
    30c4:	94 f4       	brge	.+36     	; 0x30ea <start_vertical_speed_control_right+0x1e6>
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
    30c6:	2a 35       	cpi	r18, 0x5A	; 90
    30c8:	31 05       	cpc	r19, r1
    30ca:	7c f4       	brge	.+30     	; 0x30ea <start_vertical_speed_control_right+0x1e6>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
    30cc:	18 16       	cp	r1, r24
    30ce:	19 06       	cpc	r1, r25
    30d0:	0c f0       	brlt	.+2      	; 0x30d4 <start_vertical_speed_control_right+0x1d0>
    30d2:	a9 c0       	rjmp	.+338    	; 0x3226 <start_vertical_speed_control_right+0x322>
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
    30d4:	35 95       	asr	r19
    30d6:	27 95       	ror	r18
    30d8:	35 95       	asr	r19
    30da:	27 95       	ror	r18
    30dc:	27 5e       	subi	r18, 0xE7	; 231
    30de:	3f 4f       	sbci	r19, 0xFF	; 255
    30e0:	30 93 06 02 	sts	0x0206, r19
    30e4:	20 93 05 02 	sts	0x0205, r18
    30e8:	38 cf       	rjmp	.-400    	; 0x2f5a <start_vertical_speed_control_right+0x56>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
    30ea:	18 16       	cp	r1, r24
    30ec:	19 06       	cpc	r1, r25
    30ee:	0c f0       	brlt	.+2      	; 0x30f2 <start_vertical_speed_control_right+0x1ee>
    30f0:	42 c0       	rjmp	.+132    	; 0x3176 <start_vertical_speed_control_right+0x272>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
    30f2:	84 eb       	ldi	r24, 0xB4	; 180
    30f4:	90 e0       	ldi	r25, 0x00	; 0
    30f6:	82 1b       	sub	r24, r18
    30f8:	93 0b       	sbc	r25, r19
    30fa:	95 95       	asr	r25
    30fc:	87 95       	ror	r24
    30fe:	95 95       	asr	r25
    3100:	87 95       	ror	r24
    3102:	49 96       	adiw	r24, 0x19	; 25
    3104:	90 93 06 02 	sts	0x0206, r25
    3108:	80 93 05 02 	sts	0x0205, r24
    310c:	26 cf       	rjmp	.-436    	; 0x2f5a <start_vertical_speed_control_right+0x56>
void start_vertical_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    310e:	10 92 0c 03 	sts	0x030C, r1
    3112:	10 92 0b 03 	sts	0x030B, r1
		delta_right_speed_current = 0;
    3116:	10 92 0a 0b 	sts	0x0B0A, r1
    311a:	10 92 09 0b 	sts	0x0B09, r1
		delta_right_speed_prev = 0;
    311e:	10 92 a3 08 	sts	0x08A3, r1
    3122:	10 92 a2 08 	sts	0x08A2, r1
		return;
    3126:	c3 cf       	rjmp	.-122    	; 0x30ae <start_vertical_speed_control_right+0x1aa>
	} else {
		*pwm_right -= 1;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    3128:	6e ef       	ldi	r22, 0xFE	; 254
    312a:	20 30       	cpi	r18, 0x00	; 0
    312c:	36 07       	cpc	r19, r22
    312e:	0c f0       	brlt	.+2      	; 0x3132 <start_vertical_speed_control_right+0x22e>
    3130:	be cf       	rjmp	.-132    	; 0x30ae <start_vertical_speed_control_right+0x1aa>
    3132:	80 e0       	ldi	r24, 0x00	; 0
    3134:	9e ef       	ldi	r25, 0xFE	; 254
    3136:	91 83       	std	Z+1, r25	; 0x01
    3138:	80 83       	st	Z, r24
    313a:	b9 cf       	rjmp	.-142    	; 0x30ae <start_vertical_speed_control_right+0x1aa>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    313c:	79 ef       	ldi	r23, 0xF9	; 249
    313e:	80 3c       	cpi	r24, 0xC0	; 192
    3140:	97 07       	cpc	r25, r23
    3142:	7c f4       	brge	.+30     	; 0x3162 <start_vertical_speed_control_right+0x25e>
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
    3144:	80 ec       	ldi	r24, 0xC0	; 192
    3146:	99 ef       	ldi	r25, 0xF9	; 249
    3148:	90 93 0c 03 	sts	0x030C, r25
    314c:	80 93 0b 03 	sts	0x030B, r24
    3150:	20 e4       	ldi	r18, 0x40	; 64
    3152:	c2 2e       	mov	r12, r18
    3154:	2d ee       	ldi	r18, 0xED	; 237
    3156:	d2 2e       	mov	r13, r18
    3158:	2f ef       	ldi	r18, 0xFF	; 255
    315a:	e2 2e       	mov	r14, r18
    315c:	2f ef       	ldi	r18, 0xFF	; 255
    315e:	f2 2e       	mov	r15, r18
    3160:	2e cf       	rjmp	.-420    	; 0x2fbe <start_vertical_speed_control_right+0xba>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    3162:	6c 01       	movw	r12, r24
    3164:	cc 0c       	add	r12, r12
    3166:	dd 1c       	adc	r13, r13
    3168:	c8 0e       	add	r12, r24
    316a:	d9 1e       	adc	r13, r25
    316c:	ee 24       	eor	r14, r14
    316e:	d7 fc       	sbrc	r13, 7
    3170:	e0 94       	com	r14
    3172:	fe 2c       	mov	r15, r14
    3174:	24 cf       	rjmp	.-440    	; 0x2fbe <start_vertical_speed_control_right+0xba>
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    3176:	84 eb       	ldi	r24, 0xB4	; 180
    3178:	90 e0       	ldi	r25, 0x00	; 0
    317a:	e1 ce       	rjmp	.-574    	; 0x2f3e <start_vertical_speed_control_right+0x3a>
	pwm_right_speed_controller += (signed long int)(P_VERTICAL * delta_right_speed_current);
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
	pwm_right_speed_controller += (signed long int)(I_VERTICAL*delta_right_speed_sum);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    317c:	17 fd       	sbrc	r17, 7
    317e:	0b c0       	rjmp	.+22     	; 0x3196 <start_vertical_speed_control_right+0x292>
		pwm_right_speed_controller = 0;
    3180:	10 92 01 03 	sts	0x0301, r1
    3184:	10 92 02 03 	sts	0x0302, r1
    3188:	10 92 03 03 	sts	0x0303, r1
    318c:	10 92 04 03 	sts	0x0304, r1
    3190:	20 e0       	ldi	r18, 0x00	; 0
    3192:	30 e0       	ldi	r19, 0x00	; 0
    3194:	a9 01       	movw	r20, r18
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    3196:	20 34       	cpi	r18, 0x40	; 64
    3198:	82 ea       	ldi	r24, 0xA2	; 162
    319a:	38 07       	cpc	r19, r24
    319c:	8f ef       	ldi	r24, 0xFF	; 255
    319e:	48 07       	cpc	r20, r24
    31a0:	8f ef       	ldi	r24, 0xFF	; 255
    31a2:	58 07       	cpc	r21, r24
    31a4:	54 f5       	brge	.+84     	; 0x31fa <start_vertical_speed_control_right+0x2f6>
    31a6:	80 e4       	ldi	r24, 0x40	; 64
    31a8:	92 ea       	ldi	r25, 0xA2	; 162
    31aa:	af ef       	ldi	r26, 0xFF	; 255
    31ac:	bf ef       	ldi	r27, 0xFF	; 255
    31ae:	80 93 01 03 	sts	0x0301, r24
    31b2:	90 93 02 03 	sts	0x0302, r25
    31b6:	a0 93 03 03 	sts	0x0303, r26
    31ba:	b0 93 04 03 	sts	0x0304, r27
    31be:	24 e2       	ldi	r18, 0x24	; 36
    31c0:	3a ef       	ldi	r19, 0xFA	; 250
    31c2:	5e cf       	rjmp	.-324    	; 0x3080 <start_vertical_speed_control_right+0x17c>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
		*pwm_right += 1;
	} else {
		*pwm_right -= 1;
    31c4:	21 50       	subi	r18, 0x01	; 1
    31c6:	30 40       	sbci	r19, 0x00	; 0
    31c8:	31 83       	std	Z+1, r19	; 0x01
    31ca:	20 83       	st	Z, r18
    31cc:	67 cf       	rjmp	.-306    	; 0x309c <start_vertical_speed_control_right+0x198>
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    31ce:	a0 91 f3 02 	lds	r26, 0x02F3
    31d2:	b0 91 f4 02 	lds	r27, 0x02F4
    31d6:	a8 0f       	add	r26, r24
    31d8:	b9 1f       	adc	r27, r25
    31da:	b0 93 0a 0b 	sts	0x0B0A, r27
    31de:	a0 93 09 0b 	sts	0x0B09, r26
    31e2:	d2 ce       	rjmp	.-604    	; 0x2f88 <start_vertical_speed_control_right+0x84>
	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    31e4:	10 92 01 03 	sts	0x0301, r1
    31e8:	10 92 02 03 	sts	0x0302, r1
    31ec:	10 92 03 03 	sts	0x0303, r1
    31f0:	10 92 04 03 	sts	0x0304, r1
    31f4:	20 e0       	ldi	r18, 0x00	; 0
    31f6:	30 e0       	ldi	r19, 0x00	; 0
    31f8:	a9 01       	movw	r20, r18
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    31fa:	64 e0       	ldi	r22, 0x04	; 4
    31fc:	55 95       	asr	r21
    31fe:	47 95       	ror	r20
    3200:	37 95       	ror	r19
    3202:	27 95       	ror	r18
    3204:	6a 95       	dec	r22
    3206:	d1 f7       	brne	.-12     	; 0x31fc <start_vertical_speed_control_right+0x2f8>
    3208:	3b cf       	rjmp	.-394    	; 0x3080 <start_vertical_speed_control_right+0x17c>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
    320a:	88 e6       	ldi	r24, 0x68	; 104
    320c:	91 e0       	ldi	r25, 0x01	; 1
    320e:	82 1b       	sub	r24, r18
    3210:	93 0b       	sbc	r25, r19
    3212:	95 95       	asr	r25
    3214:	87 95       	ror	r24
    3216:	95 95       	asr	r25
    3218:	87 95       	ror	r24
    321a:	49 96       	adiw	r24, 0x19	; 25
    321c:	90 93 06 02 	sts	0x0206, r25
    3220:	80 93 05 02 	sts	0x0205, r24
    3224:	9a ce       	rjmp	.-716    	; 0x2f5a <start_vertical_speed_control_right+0x56>
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
    3226:	35 95       	asr	r19
    3228:	27 95       	ror	r18
    322a:	35 95       	asr	r19
    322c:	27 95       	ror	r18
    322e:	89 e1       	ldi	r24, 0x19	; 25
    3230:	90 e0       	ldi	r25, 0x00	; 0
    3232:	82 1b       	sub	r24, r18
    3234:	93 0b       	sbc	r25, r19
    3236:	90 93 06 02 	sts	0x0206, r25
    323a:	80 93 05 02 	sts	0x0205, r24
    323e:	8d ce       	rjmp	.-742    	; 0x2f5a <start_vertical_speed_control_right+0x56>

00003240 <start_horizontal_speed_control_right>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_right(signed int *pwm_right) {
    3240:	cf 92       	push	r12
    3242:	df 92       	push	r13
    3244:	ef 92       	push	r14
    3246:	ff 92       	push	r15
    3248:	0f 93       	push	r16
    324a:	1f 93       	push	r17
    324c:	cf 93       	push	r28
    324e:	df 93       	push	r29
    3250:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    3252:	80 81       	ld	r24, Z
    3254:	91 81       	ldd	r25, Z+1	; 0x01
    3256:	00 97       	sbiw	r24, 0x00	; 0
    3258:	09 f4       	brne	.+2      	; 0x325c <start_horizontal_speed_control_right+0x1c>
    325a:	b8 c0       	rjmp	.+368    	; 0x33cc <start_horizontal_speed_control_right+0x18c>
		delta_right_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    325c:	c0 91 09 0b 	lds	r28, 0x0B09
    3260:	d0 91 0a 0b 	lds	r29, 0x0B0A
    3264:	d0 93 a3 08 	sts	0x08A3, r29
    3268:	c0 93 a2 08 	sts	0x08A2, r28
	if(*pwm_right >= 0) {
    326c:	80 81       	ld	r24, Z
    326e:	91 81       	ldd	r25, Z+1	; 0x01
    3270:	97 fd       	sbrc	r25, 7
    3272:	cd c0       	rjmp	.+410    	; 0x340e <start_horizontal_speed_control_right+0x1ce>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    3274:	20 91 f3 02 	lds	r18, 0x02F3
    3278:	30 91 f4 02 	lds	r19, 0x02F4
    327c:	dc 01       	movw	r26, r24
    327e:	a2 1b       	sub	r26, r18
    3280:	b3 0b       	sbc	r27, r19
    3282:	b0 93 0a 0b 	sts	0x0B0A, r27
    3286:	a0 93 09 0b 	sts	0x0B09, r26
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}

	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    328a:	c0 90 0b 03 	lds	r12, 0x030B
    328e:	d0 90 0c 03 	lds	r13, 0x030C
    3292:	ca 0e       	add	r12, r26
    3294:	db 1e       	adc	r13, r27
    3296:	d0 92 0c 03 	sts	0x030C, r13
    329a:	c0 92 0b 03 	sts	0x030B, r12

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
    329e:	81 e4       	ldi	r24, 0x41	; 65
    32a0:	c8 16       	cp	r12, r24
    32a2:	86 e0       	ldi	r24, 0x06	; 6
    32a4:	d8 06       	cpc	r13, r24
    32a6:	0c f4       	brge	.+2      	; 0x32aa <start_horizontal_speed_control_right+0x6a>
    32a8:	9e c0       	rjmp	.+316    	; 0x33e6 <start_horizontal_speed_control_right+0x1a6>
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
    32aa:	80 e4       	ldi	r24, 0x40	; 64
    32ac:	96 e0       	ldi	r25, 0x06	; 6
    32ae:	90 93 0c 03 	sts	0x030C, r25
    32b2:	80 93 0b 03 	sts	0x030B, r24
    32b6:	10 e8       	ldi	r17, 0x80	; 128
    32b8:	c1 2e       	mov	r12, r17
    32ba:	1c e0       	ldi	r17, 0x0C	; 12
    32bc:	d1 2e       	mov	r13, r17
    32be:	e1 2c       	mov	r14, r1
    32c0:	f1 2c       	mov	r15, r1
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
	}		

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed long int)((*pwm_right) << 3);
    32c2:	00 81       	ld	r16, Z
    32c4:	11 81       	ldd	r17, Z+1	; 0x01
	pwm_right_speed_controller += (signed long int)(delta_right_speed_current*P_HORIZONTAL);
    32c6:	cd 01       	movw	r24, r26
    32c8:	88 0f       	add	r24, r24
    32ca:	99 1f       	adc	r25, r25
    32cc:	8a 0f       	add	r24, r26
    32ce:	9b 1f       	adc	r25, r27
    32d0:	9c 01       	movw	r18, r24
    32d2:	22 0f       	add	r18, r18
    32d4:	33 1f       	adc	r19, r19
    32d6:	22 0f       	add	r18, r18
    32d8:	33 1f       	adc	r19, r19
    32da:	28 0f       	add	r18, r24
    32dc:	39 1f       	adc	r19, r25
    32de:	44 27       	eor	r20, r20
    32e0:	37 fd       	sbrc	r19, 7
    32e2:	40 95       	com	r20
    32e4:	54 2f       	mov	r21, r20
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
	}		

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed long int)((*pwm_right) << 3);
    32e6:	b8 01       	movw	r22, r16
    32e8:	66 0f       	add	r22, r22
    32ea:	77 1f       	adc	r23, r23
    32ec:	66 0f       	add	r22, r22
    32ee:	77 1f       	adc	r23, r23
    32f0:	66 0f       	add	r22, r22
    32f2:	77 1f       	adc	r23, r23
    32f4:	88 27       	eor	r24, r24
    32f6:	77 fd       	sbrc	r23, 7
    32f8:	80 95       	com	r24
    32fa:	98 2f       	mov	r25, r24
	pwm_right_speed_controller += (signed long int)(delta_right_speed_current*P_HORIZONTAL);
    32fc:	26 0f       	add	r18, r22
    32fe:	37 1f       	adc	r19, r23
    3300:	48 1f       	adc	r20, r24
    3302:	59 1f       	adc	r21, r25
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
    3304:	ac 1b       	sub	r26, r28
    3306:	bd 0b       	sbc	r27, r29
    3308:	cd 01       	movw	r24, r26
    330a:	88 0f       	add	r24, r24
    330c:	99 1f       	adc	r25, r25
    330e:	8a 0f       	add	r24, r26
    3310:	9b 1f       	adc	r25, r27
    3312:	aa 27       	eor	r26, r26
    3314:	97 fd       	sbrc	r25, 7
    3316:	a0 95       	com	r26
    3318:	ba 2f       	mov	r27, r26
    331a:	28 0f       	add	r18, r24
    331c:	39 1f       	adc	r19, r25
    331e:	4a 1f       	adc	r20, r26
    3320:	5b 1f       	adc	r21, r27
	pwm_right_speed_controller += (signed long int)(delta_right_speed_sum*I_HORIZONTAL);
    3322:	2c 0d       	add	r18, r12
    3324:	3d 1d       	adc	r19, r13
    3326:	4e 1d       	adc	r20, r14
    3328:	5f 1d       	adc	r21, r15
    332a:	20 93 01 03 	sts	0x0301, r18
    332e:	30 93 02 03 	sts	0x0302, r19
    3332:	40 93 03 03 	sts	0x0303, r20
    3336:	50 93 04 03 	sts	0x0304, r21

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    333a:	57 fd       	sbrc	r21, 7
    333c:	7a c0       	rjmp	.+244    	; 0x3432 <start_horizontal_speed_control_right+0x1f2>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    333e:	12 16       	cp	r1, r18
    3340:	13 06       	cpc	r1, r19
    3342:	14 06       	cpc	r1, r20
    3344:	15 06       	cpc	r1, r21
    3346:	0c f0       	brlt	.+2      	; 0x334a <start_horizontal_speed_control_right+0x10a>
    3348:	81 c0       	rjmp	.+258    	; 0x344c <start_horizontal_speed_control_right+0x20c>
    334a:	17 fd       	sbrc	r17, 7
    334c:	ad c0       	rjmp	.+346    	; 0x34a8 <start_horizontal_speed_control_right+0x268>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    334e:	21 3c       	cpi	r18, 0xC1	; 193
    3350:	8d e5       	ldi	r24, 0x5D	; 93
    3352:	38 07       	cpc	r19, r24
    3354:	80 e0       	ldi	r24, 0x00	; 0
    3356:	48 07       	cpc	r20, r24
    3358:	80 e0       	ldi	r24, 0x00	; 0
    335a:	58 07       	cpc	r21, r24
    335c:	0c f4       	brge	.+2      	; 0x3360 <start_horizontal_speed_control_right+0x120>
    335e:	76 c0       	rjmp	.+236    	; 0x344c <start_horizontal_speed_control_right+0x20c>
    3360:	80 ec       	ldi	r24, 0xC0	; 192
    3362:	9d e5       	ldi	r25, 0x5D	; 93
    3364:	a0 e0       	ldi	r26, 0x00	; 0
    3366:	b0 e0       	ldi	r27, 0x00	; 0
    3368:	80 93 01 03 	sts	0x0301, r24
    336c:	90 93 02 03 	sts	0x0302, r25
    3370:	a0 93 03 03 	sts	0x0303, r26
    3374:	b0 93 04 03 	sts	0x0304, r27
    3378:	2c ed       	ldi	r18, 0xDC	; 220
    337a:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = (signed int)(pwm_right_speed_controller>>4);
    337c:	31 83       	std	Z+1, r19	; 0x01
    337e:	20 83       	st	Z, r18

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
    3380:	80 91 e9 02 	lds	r24, 0x02E9
    3384:	90 91 ea 02 	lds	r25, 0x02EA
    3388:	18 16       	cp	r1, r24
    338a:	19 06       	cpc	r1, r25
    338c:	0c f0       	brlt	.+2      	; 0x3390 <start_horizontal_speed_control_right+0x150>
    338e:	87 c0       	rjmp	.+270    	; 0x349e <start_horizontal_speed_control_right+0x25e>
		*pwm_right += 1;
    3390:	2f 5f       	subi	r18, 0xFF	; 255
    3392:	3f 4f       	sbci	r19, 0xFF	; 255
    3394:	31 83       	std	Z+1, r19	; 0x01
    3396:	20 83       	st	Z, r18
	} else {
		*pwm_right -= 1;
	}

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
    3398:	12 16       	cp	r1, r18
    339a:	13 06       	cpc	r1, r19
    339c:	0c f0       	brlt	.+2      	; 0x33a0 <start_horizontal_speed_control_right+0x160>
    339e:	6d c0       	rjmp	.+218    	; 0x347a <start_horizontal_speed_control_right+0x23a>
		*pwm_right += 30;
    33a0:	22 5e       	subi	r18, 0xE2	; 226
    33a2:	3f 4f       	sbci	r19, 0xFF	; 255
    33a4:	31 83       	std	Z+1, r19	; 0x01
    33a6:	20 83       	st	Z, r18
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    33a8:	82 e0       	ldi	r24, 0x02	; 2
    33aa:	21 30       	cpi	r18, 0x01	; 1
    33ac:	38 07       	cpc	r19, r24
    33ae:	0c f4       	brge	.+2      	; 0x33b2 <start_horizontal_speed_control_right+0x172>
    33b0:	6c c0       	rjmp	.+216    	; 0x348a <start_horizontal_speed_control_right+0x24a>
    33b2:	80 e0       	ldi	r24, 0x00	; 0
    33b4:	92 e0       	ldi	r25, 0x02	; 2
    33b6:	91 83       	std	Z+1, r25	; 0x01
    33b8:	80 83       	st	Z, r24
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    33ba:	df 91       	pop	r29
    33bc:	cf 91       	pop	r28
    33be:	1f 91       	pop	r17
    33c0:	0f 91       	pop	r16
    33c2:	ff 90       	pop	r15
    33c4:	ef 90       	pop	r14
    33c6:	df 90       	pop	r13
    33c8:	cf 90       	pop	r12
    33ca:	08 95       	ret
void start_horizontal_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    33cc:	10 92 0c 03 	sts	0x030C, r1
    33d0:	10 92 0b 03 	sts	0x030B, r1
		delta_right_speed_current = 0;
    33d4:	10 92 0a 0b 	sts	0x0B0A, r1
    33d8:	10 92 09 0b 	sts	0x0B09, r1
		delta_right_speed_prev = 0;
    33dc:	10 92 a3 08 	sts	0x08A3, r1
    33e0:	10 92 a2 08 	sts	0x08A2, r1
		return;
    33e4:	ea cf       	rjmp	.-44     	; 0x33ba <start_horizontal_speed_control_right+0x17a>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    33e6:	80 ec       	ldi	r24, 0xC0	; 192
    33e8:	c8 16       	cp	r12, r24
    33ea:	89 ef       	ldi	r24, 0xF9	; 249
    33ec:	d8 06       	cpc	r13, r24
    33ee:	d4 f4       	brge	.+52     	; 0x3424 <start_horizontal_speed_control_right+0x1e4>
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
    33f0:	80 ec       	ldi	r24, 0xC0	; 192
    33f2:	99 ef       	ldi	r25, 0xF9	; 249
    33f4:	90 93 0c 03 	sts	0x030C, r25
    33f8:	80 93 0b 03 	sts	0x030B, r24
    33fc:	60 e8       	ldi	r22, 0x80	; 128
    33fe:	c6 2e       	mov	r12, r22
    3400:	63 ef       	ldi	r22, 0xF3	; 243
    3402:	d6 2e       	mov	r13, r22
    3404:	6f ef       	ldi	r22, 0xFF	; 255
    3406:	e6 2e       	mov	r14, r22
    3408:	6f ef       	ldi	r22, 0xFF	; 255
    340a:	f6 2e       	mov	r15, r22
    340c:	5a cf       	rjmp	.-332    	; 0x32c2 <start_horizontal_speed_control_right+0x82>
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    340e:	a0 91 f3 02 	lds	r26, 0x02F3
    3412:	b0 91 f4 02 	lds	r27, 0x02F4
    3416:	a8 0f       	add	r26, r24
    3418:	b9 1f       	adc	r27, r25
    341a:	b0 93 0a 0b 	sts	0x0B0A, r27
    341e:	a0 93 09 0b 	sts	0x0B09, r26
    3422:	33 cf       	rjmp	.-410    	; 0x328a <start_horizontal_speed_control_right+0x4a>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    3424:	cc 0c       	add	r12, r12
    3426:	dd 1c       	adc	r13, r13
    3428:	ee 24       	eor	r14, r14
    342a:	d7 fc       	sbrc	r13, 7
    342c:	e0 94       	com	r14
    342e:	fe 2c       	mov	r15, r14
    3430:	48 cf       	rjmp	.-368    	; 0x32c2 <start_horizontal_speed_control_right+0x82>
	pwm_right_speed_controller += (signed long int)(delta_right_speed_current*P_HORIZONTAL);
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
	pwm_right_speed_controller += (signed long int)(delta_right_speed_sum*I_HORIZONTAL);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    3432:	17 fd       	sbrc	r17, 7
    3434:	0b c0       	rjmp	.+22     	; 0x344c <start_horizontal_speed_control_right+0x20c>
		pwm_right_speed_controller = 0;
    3436:	10 92 01 03 	sts	0x0301, r1
    343a:	10 92 02 03 	sts	0x0302, r1
    343e:	10 92 03 03 	sts	0x0303, r1
    3442:	10 92 04 03 	sts	0x0304, r1
    3446:	20 e0       	ldi	r18, 0x00	; 0
    3448:	30 e0       	ldi	r19, 0x00	; 0
    344a:	a9 01       	movw	r20, r18
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    344c:	20 34       	cpi	r18, 0x40	; 64
    344e:	82 ea       	ldi	r24, 0xA2	; 162
    3450:	38 07       	cpc	r19, r24
    3452:	8f ef       	ldi	r24, 0xFF	; 255
    3454:	48 07       	cpc	r20, r24
    3456:	8f ef       	ldi	r24, 0xFF	; 255
    3458:	58 07       	cpc	r21, r24
    345a:	8c f5       	brge	.+98     	; 0x34be <start_horizontal_speed_control_right+0x27e>
    345c:	80 e4       	ldi	r24, 0x40	; 64
    345e:	92 ea       	ldi	r25, 0xA2	; 162
    3460:	af ef       	ldi	r26, 0xFF	; 255
    3462:	bf ef       	ldi	r27, 0xFF	; 255
    3464:	80 93 01 03 	sts	0x0301, r24
    3468:	90 93 02 03 	sts	0x0302, r25
    346c:	a0 93 03 03 	sts	0x0303, r26
    3470:	b0 93 04 03 	sts	0x0304, r27
    3474:	24 e2       	ldi	r18, 0x24	; 36
    3476:	3a ef       	ldi	r19, 0xFA	; 250
    3478:	81 cf       	rjmp	.-254    	; 0x337c <start_horizontal_speed_control_right+0x13c>
	}

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
		*pwm_right += 30;
	} else if(*pwm_right < 0) {
    347a:	21 15       	cp	r18, r1
    347c:	31 05       	cpc	r19, r1
    347e:	09 f4       	brne	.+2      	; 0x3482 <start_horizontal_speed_control_right+0x242>
    3480:	9c cf       	rjmp	.-200    	; 0x33ba <start_horizontal_speed_control_right+0x17a>
		*pwm_right -= 30;
    3482:	2e 51       	subi	r18, 0x1E	; 30
    3484:	30 40       	sbci	r19, 0x00	; 0
    3486:	31 83       	std	Z+1, r19	; 0x01
    3488:	20 83       	st	Z, r18
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    348a:	8e ef       	ldi	r24, 0xFE	; 254
    348c:	20 30       	cpi	r18, 0x00	; 0
    348e:	38 07       	cpc	r19, r24
    3490:	0c f0       	brlt	.+2      	; 0x3494 <start_horizontal_speed_control_right+0x254>
    3492:	93 cf       	rjmp	.-218    	; 0x33ba <start_horizontal_speed_control_right+0x17a>
    3494:	80 e0       	ldi	r24, 0x00	; 0
    3496:	9e ef       	ldi	r25, 0xFE	; 254
    3498:	91 83       	std	Z+1, r25	; 0x01
    349a:	80 83       	st	Z, r24
    349c:	8e cf       	rjmp	.-228    	; 0x33ba <start_horizontal_speed_control_right+0x17a>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
		*pwm_right += 1;
	} else {
		*pwm_right -= 1;
    349e:	21 50       	subi	r18, 0x01	; 1
    34a0:	30 40       	sbci	r19, 0x00	; 0
    34a2:	31 83       	std	Z+1, r19	; 0x01
    34a4:	20 83       	st	Z, r18
    34a6:	78 cf       	rjmp	.-272    	; 0x3398 <start_horizontal_speed_control_right+0x158>
	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    34a8:	10 92 01 03 	sts	0x0301, r1
    34ac:	10 92 02 03 	sts	0x0302, r1
    34b0:	10 92 03 03 	sts	0x0303, r1
    34b4:	10 92 04 03 	sts	0x0304, r1
    34b8:	20 e0       	ldi	r18, 0x00	; 0
    34ba:	30 e0       	ldi	r19, 0x00	; 0
    34bc:	a9 01       	movw	r20, r18
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    34be:	14 e0       	ldi	r17, 0x04	; 4
    34c0:	55 95       	asr	r21
    34c2:	47 95       	ror	r20
    34c4:	37 95       	ror	r19
    34c6:	27 95       	ror	r18
    34c8:	1a 95       	dec	r17
    34ca:	d1 f7       	brne	.-12     	; 0x34c0 <start_horizontal_speed_control_right+0x280>
    34cc:	57 cf       	rjmp	.-338    	; 0x337c <start_horizontal_speed_control_right+0x13c>

000034ce <start_horizontal_speed_control_left>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_left(signed int *pwm_left) {
    34ce:	cf 92       	push	r12
    34d0:	df 92       	push	r13
    34d2:	ef 92       	push	r14
    34d4:	ff 92       	push	r15
    34d6:	0f 93       	push	r16
    34d8:	1f 93       	push	r17
    34da:	cf 93       	push	r28
    34dc:	df 93       	push	r29
    34de:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
    34e0:	80 81       	ld	r24, Z
    34e2:	91 81       	ldd	r25, Z+1	; 0x01
    34e4:	00 97       	sbiw	r24, 0x00	; 0
    34e6:	09 f4       	brne	.+2      	; 0x34ea <start_horizontal_speed_control_left+0x1c>
    34e8:	b8 c0       	rjmp	.+368    	; 0x365a <start_horizontal_speed_control_left+0x18c>
		delta_left_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    34ea:	c0 91 53 05 	lds	r28, 0x0553
    34ee:	d0 91 54 05 	lds	r29, 0x0554
    34f2:	d0 93 6b 09 	sts	0x096B, r29
    34f6:	c0 93 6a 09 	sts	0x096A, r28
	if(*pwm_left >= 0) {
    34fa:	80 81       	ld	r24, Z
    34fc:	91 81       	ldd	r25, Z+1	; 0x01
    34fe:	97 fd       	sbrc	r25, 7
    3500:	cd c0       	rjmp	.+410    	; 0x369c <start_horizontal_speed_control_left+0x1ce>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    3502:	20 91 f1 02 	lds	r18, 0x02F1
    3506:	30 91 f2 02 	lds	r19, 0x02F2
    350a:	dc 01       	movw	r26, r24
    350c:	a2 1b       	sub	r26, r18
    350e:	b3 0b       	sbc	r27, r19
    3510:	b0 93 54 05 	sts	0x0554, r27
    3514:	a0 93 53 05 	sts	0x0553, r26
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;
    3518:	c0 90 09 03 	lds	r12, 0x0309
    351c:	d0 90 0a 03 	lds	r13, 0x030A
    3520:	ca 0e       	add	r12, r26
    3522:	db 1e       	adc	r13, r27
    3524:	d0 92 0a 03 	sts	0x030A, r13
    3528:	c0 92 09 03 	sts	0x0309, r12

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
    352c:	81 e4       	ldi	r24, 0x41	; 65
    352e:	c8 16       	cp	r12, r24
    3530:	86 e0       	ldi	r24, 0x06	; 6
    3532:	d8 06       	cpc	r13, r24
    3534:	0c f4       	brge	.+2      	; 0x3538 <start_horizontal_speed_control_left+0x6a>
    3536:	9e c0       	rjmp	.+316    	; 0x3674 <start_horizontal_speed_control_left+0x1a6>
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
    3538:	80 e4       	ldi	r24, 0x40	; 64
    353a:	96 e0       	ldi	r25, 0x06	; 6
    353c:	90 93 0a 03 	sts	0x030A, r25
    3540:	80 93 09 03 	sts	0x0309, r24
    3544:	10 e8       	ldi	r17, 0x80	; 128
    3546:	c1 2e       	mov	r12, r17
    3548:	1c e0       	ldi	r17, 0x0C	; 12
    354a:	d1 2e       	mov	r13, r17
    354c:	e1 2c       	mov	r14, r1
    354e:	f1 2c       	mov	r15, r1
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed long int)((*pwm_left) << 3);
    3550:	00 81       	ld	r16, Z
    3552:	11 81       	ldd	r17, Z+1	; 0x01
	pwm_left_speed_controller += (signed long int)(delta_left_speed_current*P_HORIZONTAL);
    3554:	cd 01       	movw	r24, r26
    3556:	88 0f       	add	r24, r24
    3558:	99 1f       	adc	r25, r25
    355a:	8a 0f       	add	r24, r26
    355c:	9b 1f       	adc	r25, r27
    355e:	9c 01       	movw	r18, r24
    3560:	22 0f       	add	r18, r18
    3562:	33 1f       	adc	r19, r19
    3564:	22 0f       	add	r18, r18
    3566:	33 1f       	adc	r19, r19
    3568:	28 0f       	add	r18, r24
    356a:	39 1f       	adc	r19, r25
    356c:	44 27       	eor	r20, r20
    356e:	37 fd       	sbrc	r19, 7
    3570:	40 95       	com	r20
    3572:	54 2f       	mov	r21, r20
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed long int)((*pwm_left) << 3);
    3574:	b8 01       	movw	r22, r16
    3576:	66 0f       	add	r22, r22
    3578:	77 1f       	adc	r23, r23
    357a:	66 0f       	add	r22, r22
    357c:	77 1f       	adc	r23, r23
    357e:	66 0f       	add	r22, r22
    3580:	77 1f       	adc	r23, r23
    3582:	88 27       	eor	r24, r24
    3584:	77 fd       	sbrc	r23, 7
    3586:	80 95       	com	r24
    3588:	98 2f       	mov	r25, r24
	pwm_left_speed_controller += (signed long int)(delta_left_speed_current*P_HORIZONTAL);
    358a:	26 0f       	add	r18, r22
    358c:	37 1f       	adc	r19, r23
    358e:	48 1f       	adc	r20, r24
    3590:	59 1f       	adc	r21, r25
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
    3592:	ac 1b       	sub	r26, r28
    3594:	bd 0b       	sbc	r27, r29
    3596:	cd 01       	movw	r24, r26
    3598:	88 0f       	add	r24, r24
    359a:	99 1f       	adc	r25, r25
    359c:	8a 0f       	add	r24, r26
    359e:	9b 1f       	adc	r25, r27
    35a0:	aa 27       	eor	r26, r26
    35a2:	97 fd       	sbrc	r25, 7
    35a4:	a0 95       	com	r26
    35a6:	ba 2f       	mov	r27, r26
    35a8:	28 0f       	add	r18, r24
    35aa:	39 1f       	adc	r19, r25
    35ac:	4a 1f       	adc	r20, r26
    35ae:	5b 1f       	adc	r21, r27
	pwm_left_speed_controller += (signed long int)(delta_left_speed_sum*I_HORIZONTAL);
    35b0:	2c 0d       	add	r18, r12
    35b2:	3d 1d       	adc	r19, r13
    35b4:	4e 1d       	adc	r20, r14
    35b6:	5f 1d       	adc	r21, r15
    35b8:	20 93 05 03 	sts	0x0305, r18
    35bc:	30 93 06 03 	sts	0x0306, r19
    35c0:	40 93 07 03 	sts	0x0307, r20
    35c4:	50 93 08 03 	sts	0x0308, r21

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    35c8:	57 fd       	sbrc	r21, 7
    35ca:	7a c0       	rjmp	.+244    	; 0x36c0 <start_horizontal_speed_control_left+0x1f2>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    35cc:	12 16       	cp	r1, r18
    35ce:	13 06       	cpc	r1, r19
    35d0:	14 06       	cpc	r1, r20
    35d2:	15 06       	cpc	r1, r21
    35d4:	0c f0       	brlt	.+2      	; 0x35d8 <start_horizontal_speed_control_left+0x10a>
    35d6:	81 c0       	rjmp	.+258    	; 0x36da <start_horizontal_speed_control_left+0x20c>
    35d8:	17 fd       	sbrc	r17, 7
    35da:	ad c0       	rjmp	.+346    	; 0x3736 <start_horizontal_speed_control_left+0x268>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    35dc:	21 3c       	cpi	r18, 0xC1	; 193
    35de:	8d e5       	ldi	r24, 0x5D	; 93
    35e0:	38 07       	cpc	r19, r24
    35e2:	80 e0       	ldi	r24, 0x00	; 0
    35e4:	48 07       	cpc	r20, r24
    35e6:	80 e0       	ldi	r24, 0x00	; 0
    35e8:	58 07       	cpc	r21, r24
    35ea:	0c f4       	brge	.+2      	; 0x35ee <start_horizontal_speed_control_left+0x120>
    35ec:	76 c0       	rjmp	.+236    	; 0x36da <start_horizontal_speed_control_left+0x20c>
    35ee:	80 ec       	ldi	r24, 0xC0	; 192
    35f0:	9d e5       	ldi	r25, 0x5D	; 93
    35f2:	a0 e0       	ldi	r26, 0x00	; 0
    35f4:	b0 e0       	ldi	r27, 0x00	; 0
    35f6:	80 93 05 03 	sts	0x0305, r24
    35fa:	90 93 06 03 	sts	0x0306, r25
    35fe:	a0 93 07 03 	sts	0x0307, r26
    3602:	b0 93 08 03 	sts	0x0308, r27
    3606:	2c ed       	ldi	r18, 0xDC	; 220
    3608:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = (signed int)(pwm_left_speed_controller>>4);
    360a:	31 83       	std	Z+1, r19	; 0x01
    360c:	20 83       	st	Z, r18

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
    360e:	80 91 eb 02 	lds	r24, 0x02EB
    3612:	90 91 ec 02 	lds	r25, 0x02EC
    3616:	18 16       	cp	r1, r24
    3618:	19 06       	cpc	r1, r25
    361a:	0c f0       	brlt	.+2      	; 0x361e <start_horizontal_speed_control_left+0x150>
    361c:	87 c0       	rjmp	.+270    	; 0x372c <start_horizontal_speed_control_left+0x25e>
		*pwm_left += 1;
    361e:	2f 5f       	subi	r18, 0xFF	; 255
    3620:	3f 4f       	sbci	r19, 0xFF	; 255
    3622:	31 83       	std	Z+1, r19	; 0x01
    3624:	20 83       	st	Z, r18
	} else {
		*pwm_left -= 1;
	}

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
    3626:	12 16       	cp	r1, r18
    3628:	13 06       	cpc	r1, r19
    362a:	0c f0       	brlt	.+2      	; 0x362e <start_horizontal_speed_control_left+0x160>
    362c:	6d c0       	rjmp	.+218    	; 0x3708 <start_horizontal_speed_control_left+0x23a>
		*pwm_left += 30;
    362e:	22 5e       	subi	r18, 0xE2	; 226
    3630:	3f 4f       	sbci	r19, 0xFF	; 255
    3632:	31 83       	std	Z+1, r19	; 0x01
    3634:	20 83       	st	Z, r18
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    3636:	82 e0       	ldi	r24, 0x02	; 2
    3638:	21 30       	cpi	r18, 0x01	; 1
    363a:	38 07       	cpc	r19, r24
    363c:	0c f4       	brge	.+2      	; 0x3640 <start_horizontal_speed_control_left+0x172>
    363e:	6c c0       	rjmp	.+216    	; 0x3718 <start_horizontal_speed_control_left+0x24a>
    3640:	80 e0       	ldi	r24, 0x00	; 0
    3642:	92 e0       	ldi	r25, 0x02	; 2
    3644:	91 83       	std	Z+1, r25	; 0x01
    3646:	80 83       	st	Z, r24
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);

}
    3648:	df 91       	pop	r29
    364a:	cf 91       	pop	r28
    364c:	1f 91       	pop	r17
    364e:	0f 91       	pop	r16
    3650:	ff 90       	pop	r15
    3652:	ef 90       	pop	r14
    3654:	df 90       	pop	r13
    3656:	cf 90       	pop	r12
    3658:	08 95       	ret
void start_horizontal_speed_control_left(signed int *pwm_left) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    365a:	10 92 0a 03 	sts	0x030A, r1
    365e:	10 92 09 03 	sts	0x0309, r1
		delta_left_speed_current = 0;
    3662:	10 92 54 05 	sts	0x0554, r1
    3666:	10 92 53 05 	sts	0x0553, r1
		delta_left_speed_prev = 0;
    366a:	10 92 6b 09 	sts	0x096B, r1
    366e:	10 92 6a 09 	sts	0x096A, r1
		return;
    3672:	ea cf       	rjmp	.-44     	; 0x3648 <start_horizontal_speed_control_left+0x17a>
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    3674:	80 ec       	ldi	r24, 0xC0	; 192
    3676:	c8 16       	cp	r12, r24
    3678:	89 ef       	ldi	r24, 0xF9	; 249
    367a:	d8 06       	cpc	r13, r24
    367c:	d4 f4       	brge	.+52     	; 0x36b2 <start_horizontal_speed_control_left+0x1e4>
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
    367e:	80 ec       	ldi	r24, 0xC0	; 192
    3680:	99 ef       	ldi	r25, 0xF9	; 249
    3682:	90 93 0a 03 	sts	0x030A, r25
    3686:	80 93 09 03 	sts	0x0309, r24
    368a:	60 e8       	ldi	r22, 0x80	; 128
    368c:	c6 2e       	mov	r12, r22
    368e:	63 ef       	ldi	r22, 0xF3	; 243
    3690:	d6 2e       	mov	r13, r22
    3692:	6f ef       	ldi	r22, 0xFF	; 255
    3694:	e6 2e       	mov	r14, r22
    3696:	6f ef       	ldi	r22, 0xFF	; 255
    3698:	f6 2e       	mov	r15, r22
    369a:	5a cf       	rjmp	.-332    	; 0x3550 <start_horizontal_speed_control_left+0x82>
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    369c:	a0 91 f1 02 	lds	r26, 0x02F1
    36a0:	b0 91 f2 02 	lds	r27, 0x02F2
    36a4:	a8 0f       	add	r26, r24
    36a6:	b9 1f       	adc	r27, r25
    36a8:	b0 93 54 05 	sts	0x0554, r27
    36ac:	a0 93 53 05 	sts	0x0553, r26
    36b0:	33 cf       	rjmp	.-410    	; 0x3518 <start_horizontal_speed_control_left+0x4a>
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    36b2:	cc 0c       	add	r12, r12
    36b4:	dd 1c       	adc	r13, r13
    36b6:	ee 24       	eor	r14, r14
    36b8:	d7 fc       	sbrc	r13, 7
    36ba:	e0 94       	com	r14
    36bc:	fe 2c       	mov	r15, r14
    36be:	48 cf       	rjmp	.-368    	; 0x3550 <start_horizontal_speed_control_left+0x82>
	pwm_left_speed_controller += (signed long int)(delta_left_speed_current*P_HORIZONTAL);
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
	pwm_left_speed_controller += (signed long int)(delta_left_speed_sum*I_HORIZONTAL);

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    36c0:	17 fd       	sbrc	r17, 7
    36c2:	0b c0       	rjmp	.+22     	; 0x36da <start_horizontal_speed_control_left+0x20c>
		pwm_left_speed_controller = 0;
    36c4:	10 92 05 03 	sts	0x0305, r1
    36c8:	10 92 06 03 	sts	0x0306, r1
    36cc:	10 92 07 03 	sts	0x0307, r1
    36d0:	10 92 08 03 	sts	0x0308, r1
    36d4:	20 e0       	ldi	r18, 0x00	; 0
    36d6:	30 e0       	ldi	r19, 0x00	; 0
    36d8:	a9 01       	movw	r20, r18
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    36da:	20 34       	cpi	r18, 0x40	; 64
    36dc:	82 ea       	ldi	r24, 0xA2	; 162
    36de:	38 07       	cpc	r19, r24
    36e0:	8f ef       	ldi	r24, 0xFF	; 255
    36e2:	48 07       	cpc	r20, r24
    36e4:	8f ef       	ldi	r24, 0xFF	; 255
    36e6:	58 07       	cpc	r21, r24
    36e8:	8c f5       	brge	.+98     	; 0x374c <start_horizontal_speed_control_left+0x27e>
    36ea:	80 e4       	ldi	r24, 0x40	; 64
    36ec:	92 ea       	ldi	r25, 0xA2	; 162
    36ee:	af ef       	ldi	r26, 0xFF	; 255
    36f0:	bf ef       	ldi	r27, 0xFF	; 255
    36f2:	80 93 05 03 	sts	0x0305, r24
    36f6:	90 93 06 03 	sts	0x0306, r25
    36fa:	a0 93 07 03 	sts	0x0307, r26
    36fe:	b0 93 08 03 	sts	0x0308, r27
    3702:	24 e2       	ldi	r18, 0x24	; 36
    3704:	3a ef       	ldi	r19, 0xFA	; 250
    3706:	81 cf       	rjmp	.-254    	; 0x360a <start_horizontal_speed_control_left+0x13c>
	}

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
		*pwm_left += 30;
	} else if(*pwm_left < 0) {
    3708:	21 15       	cp	r18, r1
    370a:	31 05       	cpc	r19, r1
    370c:	09 f4       	brne	.+2      	; 0x3710 <start_horizontal_speed_control_left+0x242>
    370e:	9c cf       	rjmp	.-200    	; 0x3648 <start_horizontal_speed_control_left+0x17a>
		*pwm_left -= 30;
    3710:	2e 51       	subi	r18, 0x1E	; 30
    3712:	30 40       	sbci	r19, 0x00	; 0
    3714:	31 83       	std	Z+1, r19	; 0x01
    3716:	20 83       	st	Z, r18
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    3718:	8e ef       	ldi	r24, 0xFE	; 254
    371a:	20 30       	cpi	r18, 0x00	; 0
    371c:	38 07       	cpc	r19, r24
    371e:	0c f0       	brlt	.+2      	; 0x3722 <start_horizontal_speed_control_left+0x254>
    3720:	93 cf       	rjmp	.-218    	; 0x3648 <start_horizontal_speed_control_left+0x17a>
    3722:	80 e0       	ldi	r24, 0x00	; 0
    3724:	9e ef       	ldi	r25, 0xFE	; 254
    3726:	91 83       	std	Z+1, r25	; 0x01
    3728:	80 83       	st	Z, r24
    372a:	8e cf       	rjmp	.-228    	; 0x3648 <start_horizontal_speed_control_left+0x17a>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
		*pwm_left += 1;
	} else {
		*pwm_left -= 1;
    372c:	21 50       	subi	r18, 0x01	; 1
    372e:	30 40       	sbci	r19, 0x00	; 0
    3730:	31 83       	std	Z+1, r19	; 0x01
    3732:	20 83       	st	Z, r18
    3734:	78 cf       	rjmp	.-272    	; 0x3626 <start_horizontal_speed_control_left+0x158>
	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    3736:	10 92 05 03 	sts	0x0305, r1
    373a:	10 92 06 03 	sts	0x0306, r1
    373e:	10 92 07 03 	sts	0x0307, r1
    3742:	10 92 08 03 	sts	0x0308, r1
    3746:	20 e0       	ldi	r18, 0x00	; 0
    3748:	30 e0       	ldi	r19, 0x00	; 0
    374a:	a9 01       	movw	r20, r18
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    374c:	04 e0       	ldi	r16, 0x04	; 4
    374e:	55 95       	asr	r21
    3750:	47 95       	ror	r20
    3752:	37 95       	ror	r19
    3754:	27 95       	ror	r18
    3756:	0a 95       	dec	r16
    3758:	d1 f7       	brne	.-12     	; 0x374e <start_horizontal_speed_control_left+0x280>
    375a:	57 cf       	rjmp	.-338    	; 0x360a <start_horizontal_speed_control_left+0x13c>

0000375c <initPortsIO>:
#include "ports_io.h"


void initPortsIO(void) {

	MCUCR |= (1 << PUD);	// pull-up disable for all ports
    375c:	85 b7       	in	r24, 0x35	; 53
    375e:	80 61       	ori	r24, 0x10	; 16
    3760:	85 bf       	out	0x35, r24	; 53

	DDRA = 0xFF;			// proximity pulses as output
    3762:	8f ef       	ldi	r24, 0xFF	; 255
    3764:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;			// proximity pulses turned off
    3766:	12 b8       	out	0x02, r1	; 2
	
	DDRB = 0xF7;			// pwm for led r/g/b as output; CE, MOSI, SCK, SS as output (master) 
    3768:	97 ef       	ldi	r25, 0xF7	; 247
    376a:	94 b9       	out	0x04, r25	; 4
	PORTB = 0xE0;			// r,g,b leds turned off on high state
    376c:	90 ee       	ldi	r25, 0xE0	; 224
    376e:	95 b9       	out	0x05, r25	; 5

	DDRC = 0xF0;			// selector as input; IR leds as output; sens-enable, sleep as output
    3770:	90 ef       	ldi	r25, 0xF0	; 240
    3772:	97 b9       	out	0x07, r25	; 7
	PORTC = 0xB0;			// sleep = 1 (no sleep), sense_enable=0, IR leds = 1
    3774:	90 eb       	ldi	r25, 0xB0	; 176
    3776:	98 b9       	out	0x08, r25	; 8

	DDRD = 0xFC;			// all pins to output; when usart and i2c peripherals are activated they change the pins direction accordingly
    3778:	9c ef       	ldi	r25, 0xFC	; 252
    377a:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0x03;			// default for unused pins is 0
    377c:	93 e0       	ldi	r25, 0x03	; 3
    377e:	9b b9       	out	0x0b, r25	; 11

	DDRE = 0xFF;			// all pins to output (pwm and dir for motor right as output; when usart is activated it changes the pins direction accordingly)
    3780:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    3782:	1e b8       	out	0x0e, r1	; 14

	DDRF = 0x00;			// adc channel pins as input		
    3784:	10 ba       	out	0x10, r1	; 16

	DDRG = 0xFF;			// unused pins as output
    3786:	83 bb       	out	0x13, r24	; 19
	if(hardwareRevision == HW_REV_3_0) {
    3788:	80 91 4f 04 	lds	r24, 0x044F
    378c:	88 23       	and	r24, r24
    378e:	e1 f0       	breq	.+56     	; 0x37c8 <initPortsIO+0x6c>
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    3790:	81 30       	cpi	r24, 0x01	; 1
    3792:	d1 f0       	breq	.+52     	; 0x37c8 <initPortsIO+0x6c>
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    3794:	82 30       	cpi	r24, 0x02	; 2
    3796:	51 f1       	breq	.+84     	; 0x37ec <initPortsIO+0x90>
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
	}	

	DDRH = 0xFF;			// all pins to output; when usart is activated it changes the pins direction accordingly
    3798:	9f ef       	ldi	r25, 0xFF	; 255
    379a:	90 93 01 01 	sts	0x0101, r25
	PORTH = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    379e:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
    37a2:	9f e0       	ldi	r25, 0x0F	; 15
    37a4:	90 93 04 01 	sts	0x0104, r25
	if(hardwareRevision == HW_REV_3_0) {
    37a8:	88 23       	and	r24, r24
    37aa:	a9 f4       	brne	.+42     	; 0x37d6 <initPortsIO+0x7a>
		PORTJ &= 0x00;		// cliff pulse turned off
    37ac:	90 91 05 01 	lds	r25, 0x0105
    37b0:	10 92 05 01 	sts	0x0105, r1
	if(hardwareRevision == HW_REV_3_1) {
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.1)"
	}	

	DDRK = 0x00;			// adc channel pins as input
    37b4:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;			// all pins to output
    37b8:	9f ef       	ldi	r25, 0xFF	; 255
    37ba:	90 93 0a 01 	sts	0x010A, r25
	if(hardwareRevision == HW_REV_3_0) {
    37be:	88 23       	and	r24, r24
    37c0:	29 f4       	brne	.+10     	; 0x37cc <initPortsIO+0x70>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
    37c2:	10 92 0b 01 	sts	0x010B, r1
    37c6:	08 95       	ret
	DDRG = 0xFF;			// unused pins as output
	if(hardwareRevision == HW_REV_3_0) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
    37c8:	14 ba       	out	0x14, r1	; 20
    37ca:	e6 cf       	rjmp	.-52     	; 0x3798 <initPortsIO+0x3c>

	DDRL = 0xFF;			// all pins to output
	if(hardwareRevision == HW_REV_3_0) {
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
    37cc:	81 30       	cpi	r24, 0x01	; 1
    37ce:	c9 f3       	breq	.-14     	; 0x37c2 <initPortsIO+0x66>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    37d0:	82 30       	cpi	r24, 0x02	; 2
    37d2:	41 f0       	breq	.+16     	; 0x37e4 <initPortsIO+0x88>
    37d4:	08 95       	ret
	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
	if(hardwareRevision == HW_REV_3_0) {
		PORTJ &= 0x00;		// cliff pulse turned off
		//#warning "Normal logic for ground sensors (hw rev 3.0)"
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    37d6:	81 30       	cpi	r24, 0x01	; 1
    37d8:	11 f0       	breq	.+4      	; 0x37de <initPortsIO+0x82>
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.0.1)"
	}
	if(hardwareRevision == HW_REV_3_1) {
    37da:	82 30       	cpi	r24, 0x02	; 2
    37dc:	59 f7       	brne	.-42     	; 0x37b4 <initPortsIO+0x58>
		PORTJ = 0x0F;
    37de:	90 93 05 01 	sts	0x0105, r25
    37e2:	e8 cf       	rjmp	.-48     	; 0x37b4 <initPortsIO+0x58>
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTL = 0xF7;		// pwm (unused) to 0, leds turned off on high state
    37e4:	87 ef       	ldi	r24, 0xF7	; 247
    37e6:	80 93 0b 01 	sts	0x010B, r24
    37ea:	08 95       	ret
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
    37ec:	98 e0       	ldi	r25, 0x08	; 8
    37ee:	94 bb       	out	0x14, r25	; 20
    37f0:	d3 cf       	rjmp	.-90     	; 0x3798 <initPortsIO+0x3c>

000037f2 <i2c_close>:

/* I2C clock in Hz */
#define SCL_CLOCK  440000L

void i2c_close() {
	TWBR = 0x00;
    37f2:	10 92 b8 00 	sts	0x00B8, r1
	TWCR = 0x00;
    37f6:	10 92 bc 00 	sts	0x00BC, r1
}
    37fa:	08 95       	ret

000037fc <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
    sbi(PORTD, 0);
    37fc:	58 9a       	sbi	0x0b, 0	; 11
    sbi(PORTD, 1);
    37fe:	59 9a       	sbi	0x0b, 1	; 11

  TWSR = 0;                         /* no prescaler */
    3800:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    3804:	81 e0       	ldi	r24, 0x01	; 1
    3806:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
    380a:	08 95       	ret

0000380c <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    380c:	94 ea       	ldi	r25, 0xA4	; 164
    380e:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    3812:	90 91 bc 00 	lds	r25, 0x00BC
    3816:	97 ff       	sbrs	r25, 7
    3818:	fc cf       	rjmp	.-8      	; 0x3812 <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    381a:	90 91 b9 00 	lds	r25, 0x00B9
    381e:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    3820:	98 30       	cpi	r25, 0x08	; 8
    3822:	21 f0       	breq	.+8      	; 0x382c <i2c_start+0x20>
    3824:	90 31       	cpi	r25, 0x10	; 16
    3826:	11 f0       	breq	.+4      	; 0x382c <i2c_start+0x20>
		//usartTransmit(twst);
		return 1;
    3828:	81 e0       	ldi	r24, 0x01	; 1
    382a:	08 95       	ret
	}

	// send device address
	TWDR = address;
    382c:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    3830:	84 e8       	ldi	r24, 0x84	; 132
    3832:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    3836:	80 91 bc 00 	lds	r24, 0x00BC
    383a:	87 ff       	sbrs	r24, 7
    383c:	fc cf       	rjmp	.-8      	; 0x3836 <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    383e:	90 91 b9 00 	lds	r25, 0x00B9
    3842:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    3844:	98 31       	cpi	r25, 0x18	; 24
    3846:	21 f0       	breq	.+8      	; 0x3850 <i2c_start+0x44>

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    3848:	81 e0       	ldi	r24, 0x01	; 1
    384a:	90 34       	cpi	r25, 0x40	; 64
    384c:	19 f0       	breq	.+6      	; 0x3854 <i2c_start+0x48>
		return 1;
	}

	return 0;

}/* i2c_start */
    384e:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    3850:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    3852:	08 95       	ret

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    3854:	80 e0       	ldi	r24, 0x00	; 0
    3856:	08 95       	ret

00003858 <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    3858:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    385a:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    385c:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    385e:	20 93 bc 00 	sts	0x00BC, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    3862:	90 91 bc 00 	lds	r25, 0x00BC
    3866:	97 ff       	sbrs	r25, 7
    3868:	fc cf       	rjmp	.-8      	; 0x3862 <i2c_start_wait+0xa>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    386a:	90 91 b9 00 	lds	r25, 0x00B9
    386e:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    3870:	98 30       	cpi	r25, 0x08	; 8
    3872:	11 f0       	breq	.+4      	; 0x3878 <i2c_start_wait+0x20>
    3874:	90 31       	cpi	r25, 0x10	; 16
    3876:	99 f7       	brne	.-26     	; 0x385e <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    3878:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    387c:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    3880:	90 91 bc 00 	lds	r25, 0x00BC
    3884:	97 ff       	sbrs	r25, 7
    3886:	fc cf       	rjmp	.-8      	; 0x3880 <i2c_start_wait+0x28>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    3888:	90 91 b9 00 	lds	r25, 0x00B9
    388c:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    388e:	90 32       	cpi	r25, 0x20	; 32
    3890:	19 f0       	breq	.+6      	; 0x3898 <i2c_start_wait+0x40>
    3892:	98 35       	cpi	r25, 0x58	; 88
    3894:	09 f0       	breq	.+2      	; 0x3898 <i2c_start_wait+0x40>
    3896:	08 95       	ret
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    3898:	40 93 bc 00 	sts	0x00BC, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    389c:	90 91 bc 00 	lds	r25, 0x00BC
    38a0:	94 fd       	sbrc	r25, 4
    38a2:	fc cf       	rjmp	.-8      	; 0x389c <i2c_start_wait+0x44>
    38a4:	dc cf       	rjmp	.-72     	; 0x385e <i2c_start_wait+0x6>

000038a6 <i2c_rep_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    38a6:	94 ea       	ldi	r25, 0xA4	; 164
    38a8:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    38ac:	90 91 bc 00 	lds	r25, 0x00BC
    38b0:	97 ff       	sbrs	r25, 7
    38b2:	fc cf       	rjmp	.-8      	; 0x38ac <i2c_rep_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    38b4:	90 91 b9 00 	lds	r25, 0x00B9
    38b8:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    38ba:	98 30       	cpi	r25, 0x08	; 8
    38bc:	21 f0       	breq	.+8      	; 0x38c6 <i2c_rep_start+0x20>
    38be:	90 31       	cpi	r25, 0x10	; 16
    38c0:	11 f0       	breq	.+4      	; 0x38c6 <i2c_rep_start+0x20>
		//usartTransmit(twst);
		return 1;
    38c2:	81 e0       	ldi	r24, 0x01	; 1
    38c4:	08 95       	ret
	}

	// send device address
	TWDR = address;
    38c6:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    38ca:	84 e8       	ldi	r24, 0x84	; 132
    38cc:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    38d0:	80 91 bc 00 	lds	r24, 0x00BC
    38d4:	87 ff       	sbrs	r24, 7
    38d6:	fc cf       	rjmp	.-8      	; 0x38d0 <i2c_rep_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    38d8:	90 91 b9 00 	lds	r25, 0x00B9
    38dc:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    38de:	98 31       	cpi	r25, 0x18	; 24
    38e0:	21 f0       	breq	.+8      	; 0x38ea <i2c_rep_start+0x44>
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    38e2:	81 e0       	ldi	r24, 0x01	; 1
    38e4:	90 34       	cpi	r25, 0x40	; 64
    38e6:	19 f0       	breq	.+6      	; 0x38ee <i2c_rep_start+0x48>
{
    return i2c_start( address );

}/* i2c_rep_start */
    38e8:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    38ea:	80 e0       	ldi	r24, 0x00	; 0
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    38ec:	08 95       	ret
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    38ee:	80 e0       	ldi	r24, 0x00	; 0
    38f0:	08 95       	ret

000038f2 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    38f2:	84 e9       	ldi	r24, 0x94	; 148
    38f4:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    38f8:	80 91 bc 00 	lds	r24, 0x00BC
    38fc:	84 fd       	sbrc	r24, 4
    38fe:	fc cf       	rjmp	.-8      	; 0x38f8 <i2c_stop+0x6>

}/* i2c_stop */
    3900:	08 95       	ret

00003902 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    3902:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    3906:	84 e8       	ldi	r24, 0x84	; 132
    3908:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    390c:	80 91 bc 00 	lds	r24, 0x00BC
    3910:	87 ff       	sbrs	r24, 7
    3912:	fc cf       	rjmp	.-8      	; 0x390c <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    3914:	90 91 b9 00 	lds	r25, 0x00B9
    3918:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    391a:	81 e0       	ldi	r24, 0x01	; 1
    391c:	98 32       	cpi	r25, 0x28	; 40
    391e:	09 f0       	breq	.+2      	; 0x3922 <i2c_write+0x20>
	return 0;

}/* i2c_write */
    3920:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
    3922:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
    3924:	08 95       	ret

00003926 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    3926:	84 ec       	ldi	r24, 0xC4	; 196
    3928:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    392c:	80 91 bc 00 	lds	r24, 0x00BC
    3930:	87 ff       	sbrs	r24, 7
    3932:	fc cf       	rjmp	.-8      	; 0x392c <i2c_readAck+0x6>

    return TWDR;
    3934:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    3938:	08 95       	ret

0000393a <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    393a:	84 e8       	ldi	r24, 0x84	; 132
    393c:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    3940:	80 91 bc 00 	lds	r24, 0x00BC
    3944:	87 ff       	sbrs	r24, 7
    3946:	fc cf       	rjmp	.-8      	; 0x3940 <i2c_readNak+0x6>
	
    return TWDR;
    3948:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    394c:	08 95       	ret

0000394e <initUsart0>:
	// @38400 baud: 8000000/16/38400-1 = 12 => 8000000/16/13 = 38461 => 100-(38400/38461*100)=0.15% of error
	// Double speed mode:
	// @57600 baud: 8000000/8/57600-1 = 16 => 8000000/8/17 = 58823 => 100-(57600/58823*100)=2.08% of error	


	UBRR0H = 0;												// set baudrate
    394e:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 16;
    3952:	80 e1       	ldi	r24, 0x10	; 16
    3954:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0A  |= (1 << U2X0);									// enable double speed
    3958:	e0 ec       	ldi	r30, 0xC0	; 192
    395a:	f0 e0       	ldi	r31, 0x00	; 0
    395c:	80 81       	ld	r24, Z
    395e:	82 60       	ori	r24, 0x02	; 2
    3960:	80 83       	st	Z, r24
	//UCSR0A &= ~(1 << U2X0);
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);	// enable uart0 transmitter and receiver; enable rx interrupt for use with aseba
    3962:	e1 ec       	ldi	r30, 0xC1	; 193
    3964:	f0 e0       	ldi	r31, 0x00	; 0
    3966:	80 81       	ld	r24, Z
    3968:	88 69       	ori	r24, 0x98	; 152
    396a:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);					// set frame format: 8-bit data, no parity, 1 stop bit
    396c:	e2 ec       	ldi	r30, 0xC2	; 194
    396e:	f0 e0       	ldi	r31, 0x00	; 0
    3970:	80 81       	ld	r24, Z
    3972:	86 60       	ori	r24, 0x06	; 6
    3974:	80 83       	st	Z, r24



}
    3976:	08 95       	ret

00003978 <initUsart1>:

void initUsart1() {

	UBRR1H = 0;												// set baudrate
    3978:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = 16;
    397c:	80 e1       	ldi	r24, 0x10	; 16
    397e:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1A  |= (1 << U2X1);									// enable double speed
    3982:	e8 ec       	ldi	r30, 0xC8	; 200
    3984:	f0 e0       	ldi	r31, 0x00	; 0
    3986:	80 81       	ld	r24, Z
    3988:	82 60       	ori	r24, 0x02	; 2
    398a:	80 83       	st	Z, r24
	//UCSR0A &= ~(1 << U2X1);
	UCSR1B |= (1 << TXEN1) | (1 << RXEN1);					// enable uart0 transmitter and receiver
    398c:	e9 ec       	ldi	r30, 0xC9	; 201
    398e:	f0 e0       	ldi	r31, 0x00	; 0
    3990:	80 81       	ld	r24, Z
    3992:	88 61       	ori	r24, 0x18	; 24
    3994:	80 83       	st	Z, r24
	UCSR1C |= (1<<UCSZ11) | (1<<UCSZ10);					// set frame format: 8-bit data, no parity, 1 stop bit
    3996:	ea ec       	ldi	r30, 0xCA	; 202
    3998:	f0 e0       	ldi	r31, 0x00	; 0
    399a:	80 81       	ld	r24, Z
    399c:	86 60       	ori	r24, 0x06	; 6
    399e:	80 83       	st	Z, r24

}
    39a0:	08 95       	ret

000039a2 <closeUsart>:

void closeUsart() {

	UCSR0A = 0x00;	// clear all usart registers
    39a2:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0x00;
    39a6:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 0x00;
    39aa:	10 92 c2 00 	sts	0x00C2, r1

}
    39ae:	08 95       	ret

000039b0 <usart0Transmit>:

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    39b0:	90 91 c0 00 	lds	r25, 0x00C0
    39b4:	95 ff       	sbrs	r25, 5
    39b6:	fc cf       	rjmp	.-8      	; 0x39b0 <usart0Transmit>
	UDR0 = data;						// put data into buffer, sends the data
    39b8:	80 93 c6 00 	sts	0x00C6, r24
	if(isBlocking) {
    39bc:	66 23       	and	r22, r22
    39be:	21 f0       	breq	.+8      	; 0x39c8 <usart0Transmit+0x18>
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    39c0:	80 91 c0 00 	lds	r24, 0x00C0
    39c4:	86 ff       	sbrs	r24, 6
    39c6:	fc cf       	rjmp	.-8      	; 0x39c0 <usart0Transmit+0x10>
    39c8:	08 95       	ret

000039ca <usart1Transmit>:
	}
}

void usart1Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR1A & (1<<UDRE1)));		// wait for empty transmit buffer
    39ca:	90 91 c8 00 	lds	r25, 0x00C8
    39ce:	95 ff       	sbrs	r25, 5
    39d0:	fc cf       	rjmp	.-8      	; 0x39ca <usart1Transmit>
	UDR1 = data;						// put data into buffer, sends the data
    39d2:	80 93 ce 00 	sts	0x00CE, r24
	if(isBlocking) {
    39d6:	66 23       	and	r22, r22
    39d8:	21 f0       	breq	.+8      	; 0x39e2 <usart1Transmit+0x18>
		while (!(UCSR1A & (1<<TXC1)));	// wait transmission complete
    39da:	80 91 c8 00 	lds	r24, 0x00C8
    39de:	86 ff       	sbrs	r24, 6
    39e0:	fc cf       	rjmp	.-8      	; 0x39da <usart1Transmit+0x10>
    39e2:	08 95       	ret

000039e4 <usart0InputBufferEmpty>:

}

char usart0InputBufferEmpty() {

	if(UCSR0A & (1<<RXC0)) {	// something received
    39e4:	80 91 c0 00 	lds	r24, 0x00C0
		return 0;
    39e8:	80 95       	com	r24
	} else {
		return 1;
	}

}
    39ea:	88 1f       	adc	r24, r24
    39ec:	88 27       	eor	r24, r24
    39ee:	88 1f       	adc	r24, r24
    39f0:	08 95       	ret

000039f2 <usart0Receive>:

unsigned char usart0Receive() {

	unsigned int i=0;

	while(usart0InputBufferEmpty()) {
    39f2:	87 e9       	ldi	r24, 0x97	; 151
    39f4:	90 e0       	ldi	r25, 0x00	; 0

}

char usart0InputBufferEmpty() {

	if(UCSR0A & (1<<RXC0)) {	// something received
    39f6:	20 91 c0 00 	lds	r18, 0x00C0
    39fa:	27 fd       	sbrc	r18, 7
    39fc:	07 c0       	rjmp	.+14     	; 0x3a0c <usart0Receive+0x1a>
			commError = 1;
			return 0;				// timeout
		}
	}								// wait for data to be received

	return UDR0;					// get and return received data from buffer
    39fe:	01 97       	sbiw	r24, 0x01	; 1

	unsigned int i=0;

	while(usart0InputBufferEmpty()) {
		i++;
		if(i>150) {
    3a00:	d1 f7       	brne	.-12     	; 0x39f6 <usart0Receive+0x4>
			/*
			if(UCSR0A & (1<<3)) {	// overflow flag
			}
			*/
			commError = 1;
    3a02:	81 e0       	ldi	r24, 0x01	; 1
    3a04:	80 93 1e 03 	sts	0x031E, r24
			return 0;				// timeout
    3a08:	80 e0       	ldi	r24, 0x00	; 0
    3a0a:	08 95       	ret
		}
	}								// wait for data to be received

	return UDR0;					// get and return received data from buffer
    3a0c:	80 91 c6 00 	lds	r24, 0x00C6

}
    3a10:	08 95       	ret

00003a12 <__vector_25>:
		}
	}
}
*/

ISR(USART0_RX_vect) {
    3a12:	1f 92       	push	r1
    3a14:	0f 92       	push	r0
    3a16:	0f b6       	in	r0, 0x3f	; 63
    3a18:	0f 92       	push	r0
    3a1a:	0b b6       	in	r0, 0x3b	; 59
    3a1c:	0f 92       	push	r0
    3a1e:	11 24       	eor	r1, r1
    3a20:	2f 93       	push	r18
    3a22:	3f 93       	push	r19
    3a24:	4f 93       	push	r20
    3a26:	5f 93       	push	r21
    3a28:	6f 93       	push	r22
    3a2a:	7f 93       	push	r23
    3a2c:	8f 93       	push	r24
    3a2e:	9f 93       	push	r25
    3a30:	af 93       	push	r26
    3a32:	bf 93       	push	r27
    3a34:	ef 93       	push	r30
    3a36:	ff 93       	push	r31

	char receivedByte = UDR0;
    3a38:	90 91 c6 00 	lds	r25, 0x00C6


	if(currentSelector==14) {
    3a3c:	80 91 4c 04 	lds	r24, 0x044C
    3a40:	8e 30       	cpi	r24, 0x0E	; 14
    3a42:	09 f4       	brne	.+2      	; 0x3a46 <__vector_25+0x34>
    3a44:	3f c0       	rjmp	.+126    	; 0x3ac4 <__vector_25+0xb2>
		if(receivedByte == 0xAA) {
			irCommSendValues = 1;
		}
	} else if(currentSelector==15) {
    3a46:	8f 30       	cpi	r24, 0x0F	; 15
    3a48:	09 f4       	brne	.+2      	; 0x3a4c <__vector_25+0x3a>
    3a4a:	42 c0       	rjmp	.+132    	; 0x3ad0 <__vector_25+0xbe>
			eeprom_write_byte((uint8_t*) 4093, currentOsccal); 
		}

	} else {

		if(chooseMenu) {
    3a4c:	80 91 11 02 	lds	r24, 0x0211
    3a50:	88 23       	and	r24, r24
    3a52:	09 f5       	brne	.+66     	; 0x3a96 <__vector_25+0x84>
			chooseMenu = 0;
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
    3a54:	80 91 23 04 	lds	r24, 0x0423
    3a58:	81 30       	cpi	r24, 0x01	; 1
    3a5a:	09 f4       	brne	.+2      	; 0x3a5e <__vector_25+0x4c>
    3a5c:	65 c0       	rjmp	.+202    	; 0x3b28 <__vector_25+0x116>
    3a5e:	82 30       	cpi	r24, 0x02	; 2
    3a60:	f1 f4       	brne	.+60     	; 0x3a9e <__vector_25+0x8c>
						menuChoice = 0;
					}
					break;

				case 2:	// address writing in eeprom
					if(menuState == 0) { // receive rf address LSB:
    3a62:	40 91 25 04 	lds	r20, 0x0425
    3a66:	44 23       	and	r20, r20
    3a68:	09 f4       	brne	.+2      	; 0x3a6c <__vector_25+0x5a>
    3a6a:	74 c0       	rjmp	.+232    	; 0x3b54 <__vector_25+0x142>
						rfAddress = (unsigned int)receivedByte&0x00FF;
						menuState = 1;
					} else if(menuState == 1) { // receive rf address MSB
    3a6c:	41 30       	cpi	r20, 0x01	; 1
    3a6e:	b9 f4       	brne	.+46     	; 0x3a9e <__vector_25+0x8c>
						rfAddress |= ((unsigned int)receivedByte<<8);
    3a70:	39 2f       	mov	r19, r25
    3a72:	20 e0       	ldi	r18, 0x00	; 0
    3a74:	80 91 15 03 	lds	r24, 0x0315
    3a78:	90 91 16 03 	lds	r25, 0x0316
    3a7c:	82 2b       	or	r24, r18
    3a7e:	93 2b       	or	r25, r19
    3a80:	90 93 16 03 	sts	0x0316, r25
    3a84:	80 93 15 03 	sts	0x0315, r24
						addressReceived = 1;
    3a88:	40 93 24 04 	sts	0x0424, r20
						menuState = 0;
    3a8c:	10 92 25 04 	sts	0x0425, r1
						chooseMenu = 1;
    3a90:	40 93 11 02 	sts	0x0211, r20
    3a94:	04 c0       	rjmp	.+8      	; 0x3a9e <__vector_25+0x8c>
		}

	} else {

		if(chooseMenu) {
			chooseMenu = 0;
    3a96:	10 92 11 02 	sts	0x0211, r1
			menuChoice = receivedByte;
    3a9a:	90 93 23 04 	sts	0x0423, r25
			}
		}

	}

}
    3a9e:	ff 91       	pop	r31
    3aa0:	ef 91       	pop	r30
    3aa2:	bf 91       	pop	r27
    3aa4:	af 91       	pop	r26
    3aa6:	9f 91       	pop	r25
    3aa8:	8f 91       	pop	r24
    3aaa:	7f 91       	pop	r23
    3aac:	6f 91       	pop	r22
    3aae:	5f 91       	pop	r21
    3ab0:	4f 91       	pop	r20
    3ab2:	3f 91       	pop	r19
    3ab4:	2f 91       	pop	r18
    3ab6:	0f 90       	pop	r0
    3ab8:	0b be       	out	0x3b, r0	; 59
    3aba:	0f 90       	pop	r0
    3abc:	0f be       	out	0x3f, r0	; 63
    3abe:	0f 90       	pop	r0
    3ac0:	1f 90       	pop	r1
    3ac2:	18 95       	reti

	char receivedByte = UDR0;


	if(currentSelector==14) {
		if(receivedByte == 0xAA) {
    3ac4:	9a 3a       	cpi	r25, 0xAA	; 170
    3ac6:	59 f7       	brne	.-42     	; 0x3a9e <__vector_25+0x8c>
			irCommSendValues = 1;
    3ac8:	81 e0       	ldi	r24, 0x01	; 1
    3aca:	80 93 c9 04 	sts	0x04C9, r24
    3ace:	e7 cf       	rjmp	.-50     	; 0x3a9e <__vector_25+0x8c>
		}
	} else if(currentSelector==15) {

		if(receivedByte == '+') {
    3ad0:	9b 32       	cpi	r25, 0x2B	; 43
    3ad2:	01 f1       	breq	.+64     	; 0x3b14 <__vector_25+0x102>
				currentOsccal++;
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
    3ad4:	9d 32       	cpi	r25, 0x2D	; 45
    3ad6:	91 f1       	breq	.+100    	; 0x3b3c <__vector_25+0x12a>
				currentOsccal--;	
			}
			OSCCAL = currentOsccal;;
		}

		if(receivedByte == 'g') {
    3ad8:	97 36       	cpi	r25, 0x67	; 103
    3ada:	09 f0       	breq	.+2      	; 0x3ade <__vector_25+0xcc>
    3adc:	43 c0       	rjmp	.+134    	; 0x3b64 <__vector_25+0x152>
			usart0Transmit(irCommand,1);
    3ade:	90 91 27 04 	lds	r25, 0x0427

}

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    3ae2:	80 91 c0 00 	lds	r24, 0x00C0
    3ae6:	85 ff       	sbrs	r24, 5
    3ae8:	fc cf       	rjmp	.-8      	; 0x3ae2 <__vector_25+0xd0>
	UDR0 = data;						// put data into buffer, sends the data
    3aea:	90 93 c6 00 	sts	0x00C6, r25
	if(isBlocking) {
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    3aee:	80 91 c0 00 	lds	r24, 0x00C0
    3af2:	86 ff       	sbrs	r24, 6
    3af4:	fc cf       	rjmp	.-8      	; 0x3aee <__vector_25+0xdc>
			OSCCAL = currentOsccal;;
		}

		if(receivedByte == 'g') {
			usart0Transmit(irCommand,1);
			currentOsccal = OSCCAL;
    3af6:	90 91 66 00 	lds	r25, 0x0066
    3afa:	90 93 30 05 	sts	0x0530, r25

}

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    3afe:	80 91 c0 00 	lds	r24, 0x00C0
    3b02:	85 ff       	sbrs	r24, 5
    3b04:	fc cf       	rjmp	.-8      	; 0x3afe <__vector_25+0xec>
	UDR0 = data;						// put data into buffer, sends the data
    3b06:	90 93 c6 00 	sts	0x00C6, r25
	if(isBlocking) {
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    3b0a:	80 91 c0 00 	lds	r24, 0x00C0
    3b0e:	86 ff       	sbrs	r24, 6
    3b10:	fc cf       	rjmp	.-8      	; 0x3b0a <__vector_25+0xf8>
    3b12:	c5 cf       	rjmp	.-118    	; 0x3a9e <__vector_25+0x8c>
			irCommSendValues = 1;
		}
	} else if(currentSelector==15) {

		if(receivedByte == '+') {
			if(currentOsccal<255) {
    3b14:	80 91 30 05 	lds	r24, 0x0530
    3b18:	8f 3f       	cpi	r24, 0xFF	; 255
    3b1a:	d1 f0       	breq	.+52     	; 0x3b50 <__vector_25+0x13e>
				currentOsccal++;
    3b1c:	8f 5f       	subi	r24, 0xFF	; 255
    3b1e:	80 93 30 05 	sts	0x0530, r24

		if(receivedByte == '-') {
			if(currentOsccal>0) {
				currentOsccal--;	
			}
			OSCCAL = currentOsccal;;
    3b22:	80 93 66 00 	sts	0x0066, r24
    3b26:	bb cf       	rjmp	.-138    	; 0x3a9e <__vector_25+0x8c>
			chooseMenu = 0;
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
				case 1: // send sensors data and activate actuators
					if(receivedByte == 0xAA) {
    3b28:	9a 3a       	cpi	r25, 0xAA	; 170
    3b2a:	31 f1       	breq	.+76     	; 0x3b78 <__vector_25+0x166>
						getDataNow = 1;
					} else if(receivedByte == 0x55) {
    3b2c:	95 35       	cpi	r25, 0x55	; 85
    3b2e:	09 f0       	breq	.+2      	; 0x3b32 <__vector_25+0x120>
    3b30:	b6 cf       	rjmp	.-148    	; 0x3a9e <__vector_25+0x8c>
						chooseMenu = 1;
    3b32:	80 93 11 02 	sts	0x0211, r24
						menuChoice = 0;
    3b36:	10 92 23 04 	sts	0x0423, r1
    3b3a:	b1 cf       	rjmp	.-158    	; 0x3a9e <__vector_25+0x8c>
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
			if(currentOsccal>0) {
    3b3c:	80 91 30 05 	lds	r24, 0x0530
    3b40:	88 23       	and	r24, r24
    3b42:	21 f0       	breq	.+8      	; 0x3b4c <__vector_25+0x13a>
				currentOsccal--;	
    3b44:	81 50       	subi	r24, 0x01	; 1
    3b46:	80 93 30 05 	sts	0x0530, r24
    3b4a:	eb cf       	rjmp	.-42     	; 0x3b22 <__vector_25+0x110>
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
			if(currentOsccal>0) {
    3b4c:	80 e0       	ldi	r24, 0x00	; 0
    3b4e:	e9 cf       	rjmp	.-46     	; 0x3b22 <__vector_25+0x110>
			irCommSendValues = 1;
		}
	} else if(currentSelector==15) {

		if(receivedByte == '+') {
			if(currentOsccal<255) {
    3b50:	8f ef       	ldi	r24, 0xFF	; 255
    3b52:	e7 cf       	rjmp	.-50     	; 0x3b22 <__vector_25+0x110>
					}
					break;

				case 2:	// address writing in eeprom
					if(menuState == 0) { // receive rf address LSB:
						rfAddress = (unsigned int)receivedByte&0x00FF;
    3b54:	90 93 15 03 	sts	0x0315, r25
    3b58:	10 92 16 03 	sts	0x0316, r1
						menuState = 1;
    3b5c:	81 e0       	ldi	r24, 0x01	; 1
    3b5e:	80 93 25 04 	sts	0x0425, r24
    3b62:	9d cf       	rjmp	.-198    	; 0x3a9e <__vector_25+0x8c>
			usart0Transmit(irCommand,1);
			currentOsccal = OSCCAL;
			usart0Transmit(currentOsccal,1);
		}

		if(receivedByte == 's') {
    3b64:	93 37       	cpi	r25, 0x73	; 115
    3b66:	09 f0       	breq	.+2      	; 0x3b6a <__vector_25+0x158>
    3b68:	9a cf       	rjmp	.-204    	; 0x3a9e <__vector_25+0x8c>
			eeprom_write_byte((uint8_t*) 4093, currentOsccal); 
    3b6a:	8d ef       	ldi	r24, 0xFD	; 253
    3b6c:	9f e0       	ldi	r25, 0x0F	; 15
    3b6e:	60 91 30 05 	lds	r22, 0x0530
    3b72:	0e 94 49 53 	call	0xa692	; 0xa692 <__eewr_byte_m2560>
    3b76:	93 cf       	rjmp	.-218    	; 0x3a9e <__vector_25+0x8c>
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
				case 1: // send sensors data and activate actuators
					if(receivedByte == 0xAA) {
						getDataNow = 1;
    3b78:	80 93 26 04 	sts	0x0426, r24
    3b7c:	90 cf       	rjmp	.-224    	; 0x3a9e <__vector_25+0x8c>

00003b7e <getSelector>:

#include "utility.h"

unsigned char getSelector() {
   return (SEL0) + 2*(SEL1) + 4*(SEL2) + 8*(SEL3);
    3b7e:	86 b1       	in	r24, 0x06	; 6
    3b80:	66 b1       	in	r22, 0x06	; 6
    3b82:	26 b1       	in	r18, 0x06	; 6
    3b84:	46 b1       	in	r20, 0x06	; 6
    3b86:	30 e0       	ldi	r19, 0x00	; 0
    3b88:	28 70       	andi	r18, 0x08	; 8
    3b8a:	30 70       	andi	r19, 0x00	; 0
    3b8c:	35 95       	asr	r19
    3b8e:	27 95       	ror	r18
    3b90:	35 95       	asr	r19
    3b92:	27 95       	ror	r18
    3b94:	35 95       	asr	r19
    3b96:	27 95       	ror	r18
    3b98:	22 0f       	add	r18, r18
    3b9a:	33 1f       	adc	r19, r19
    3b9c:	70 e0       	ldi	r23, 0x00	; 0
    3b9e:	64 70       	andi	r22, 0x04	; 4
    3ba0:	70 70       	andi	r23, 0x00	; 0
    3ba2:	75 95       	asr	r23
    3ba4:	67 95       	ror	r22
    3ba6:	75 95       	asr	r23
    3ba8:	67 95       	ror	r22
    3baa:	26 0f       	add	r18, r22
    3bac:	37 1f       	adc	r19, r23
    3bae:	22 0f       	add	r18, r18
    3bb0:	33 1f       	adc	r19, r19
    3bb2:	50 e0       	ldi	r21, 0x00	; 0
    3bb4:	42 70       	andi	r20, 0x02	; 2
    3bb6:	50 70       	andi	r21, 0x00	; 0
    3bb8:	55 95       	asr	r21
    3bba:	47 95       	ror	r20
    3bbc:	24 0f       	add	r18, r20
    3bbe:	35 1f       	adc	r19, r21
    3bc0:	22 0f       	add	r18, r18
    3bc2:	81 70       	andi	r24, 0x01	; 1
}
    3bc4:	82 0f       	add	r24, r18
    3bc6:	08 95       	ret

00003bc8 <initPeripherals>:
    

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
    3bc8:	f8 94       	cli
	
	// reset all registers touched by arduino in the "init()" functions (wiring.c) not used by the robot
	TCCR0A = 0;
    3bca:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
    3bcc:	15 bc       	out	0x25, r1	; 37
	TIMSK0 = 0;
    3bce:	10 92 6e 00 	sts	0x006E, r1
	TCCR5A = 0;
    3bd2:	10 92 20 01 	sts	0x0120, r1
	TCCR5B = 0;
    3bd6:	10 92 21 01 	sts	0x0121, r1

	rfAddress = eeprom_read_word((uint16_t*)4094);
    3bda:	8e ef       	ldi	r24, 0xFE	; 254
    3bdc:	9f e0       	ldi	r25, 0x0F	; 15
    3bde:	0e 94 1b 53 	call	0xa636	; 0xa636 <__eerd_word_m2560>
    3be2:	90 93 16 03 	sts	0x0316, r25
    3be6:	80 93 15 03 	sts	0x0315, r24
	currentOsccal = eeprom_read_byte((uint8_t*)4093);
    3bea:	8d ef       	ldi	r24, 0xFD	; 253
    3bec:	9f e0       	ldi	r25, 0x0F	; 15
    3bee:	0e 94 13 53 	call	0xa626	; 0xa626 <__eerd_byte_m2560>
    3bf2:	80 93 30 05 	sts	0x0530, r24
	if(currentOsccal!=0 && currentOsccal!=255) { // clear memory
    3bf6:	98 2f       	mov	r25, r24
    3bf8:	91 50       	subi	r25, 0x01	; 1
    3bfa:	9e 3f       	cpi	r25, 0xFE	; 254
    3bfc:	e8 f5       	brcc	.+122    	; 0x3c78 <initPeripherals+0xb0>
		OSCCAL = currentOsccal;
    3bfe:	80 93 66 00 	sts	0x0066, r24
		currentOsccal = OSCCAL;
		eeprom_write_byte((uint8_t*) 4093, currentOsccal);
	}
	
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
    3c02:	80 91 15 03 	lds	r24, 0x0315
    3c06:	90 91 16 03 	lds	r25, 0x0316
    3c0a:	9c 01       	movw	r18, r24
    3c0c:	21 58       	subi	r18, 0x81	; 129
    3c0e:	3c 40       	sbci	r19, 0x0C	; 12
    3c10:	23 30       	cpi	r18, 0x03	; 3
    3c12:	31 05       	cpc	r19, r1
    3c14:	08 f5       	brcc	.+66     	; 0x3c58 <initPeripherals+0x90>
		hardwareRevision = HW_REV_3_0;
    3c16:	10 92 4f 04 	sts	0x044F, r1

	if(rfAddress > 3203) {
		hardwareRevision = HW_REV_3_1;
	}

	initCalibration();
    3c1a:	0e 94 1a 37 	call	0x6e34	; 0x6e34 <initCalibration>
	initPortsIO();
    3c1e:	0e 94 ae 1b 	call	0x375c	; 0x375c <initPortsIO>
	initAdc();
    3c22:	0e 94 f4 1e 	call	0x3de8	; 0x3de8 <initAdc>
	initMotors();
    3c26:	0e 94 5e 25 	call	0x4abc	; 0x4abc <initMotors>
	initRGBleds();
    3c2a:	0e 94 f5 3a 	call	0x75ea	; 0x75ea <initRGBleds>
	initSPI();
    3c2e:	0e 94 2c 0c 	call	0x1858	; 0x1858 <initSPI>
	mirf_init();
    3c32:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <mirf_init>
	if(spiCommError==0) {
    3c36:	80 91 18 03 	lds	r24, 0x0318
    3c3a:	88 23       	and	r24, r24
    3c3c:	29 f4       	brne	.+10     	; 0x3c48 <initPeripherals+0x80>
		rfFlags |= 1;
    3c3e:	80 91 17 03 	lds	r24, 0x0317
    3c42:	81 60       	ori	r24, 0x01	; 1
    3c44:	80 93 17 03 	sts	0x0317, r24
	}
	initUsart0();
    3c48:	0e 94 a7 1c 	call	0x394e	; 0x394e <initUsart0>
	initAccelerometer();
    3c4c:	0e 94 3d 3c 	call	0x787a	; 0x787a <initAccelerometer>
	init_ir_remote_control();
    3c50:	0e 94 3e 12 	call	0x247c	; 0x247c <init_ir_remote_control>

	sei();			// enable global interrupts
    3c54:	78 94       	sei

	
}
    3c56:	08 95       	ret
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
		hardwareRevision = HW_REV_3_0;
	}

	if(rfAddress == 3200) {
    3c58:	2c e0       	ldi	r18, 0x0C	; 12
    3c5a:	80 38       	cpi	r24, 0x80	; 128
    3c5c:	92 07       	cpc	r25, r18
    3c5e:	21 f4       	brne	.+8      	; 0x3c68 <initPeripherals+0xa0>
		hardwareRevision = HW_REV_3_0_1;
    3c60:	81 e0       	ldi	r24, 0x01	; 1
    3c62:	80 93 4f 04 	sts	0x044F, r24
    3c66:	d9 cf       	rjmp	.-78     	; 0x3c1a <initPeripherals+0x52>
	}

	if(rfAddress > 3203) {
    3c68:	2c e0       	ldi	r18, 0x0C	; 12
    3c6a:	84 38       	cpi	r24, 0x84	; 132
    3c6c:	92 07       	cpc	r25, r18
    3c6e:	a8 f2       	brcs	.-86     	; 0x3c1a <initPeripherals+0x52>
		hardwareRevision = HW_REV_3_1;
    3c70:	82 e0       	ldi	r24, 0x02	; 2
    3c72:	80 93 4f 04 	sts	0x044F, r24
    3c76:	d1 cf       	rjmp	.-94     	; 0x3c1a <initPeripherals+0x52>
	rfAddress = eeprom_read_word((uint16_t*)4094);
	currentOsccal = eeprom_read_byte((uint8_t*)4093);
	if(currentOsccal!=0 && currentOsccal!=255) { // clear memory
		OSCCAL = currentOsccal;
	} else {
		currentOsccal = OSCCAL;
    3c78:	60 91 66 00 	lds	r22, 0x0066
    3c7c:	60 93 30 05 	sts	0x0530, r22
		eeprom_write_byte((uint8_t*) 4093, currentOsccal);
    3c80:	8d ef       	ldi	r24, 0xFD	; 253
    3c82:	9f e0       	ldi	r25, 0x0F	; 15
    3c84:	0e 94 49 53 	call	0xa692	; 0xa692 <__eewr_byte_m2560>
    3c88:	bc cf       	rjmp	.-136    	; 0x3c02 <initPeripherals+0x3a>

00003c8a <__vector_15>:

	
}

// used only for wake-up from sleep
ISR(TIMER2_OVF_vect) {
    3c8a:	1f 92       	push	r1
    3c8c:	0f 92       	push	r0
    3c8e:	0f b6       	in	r0, 0x3f	; 63
    3c90:	0f 92       	push	r0
    3c92:	11 24       	eor	r1, r1

}
    3c94:	0f 90       	pop	r0
    3c96:	0f be       	out	0x3f, r0	; 63
    3c98:	0f 90       	pop	r0
    3c9a:	1f 90       	pop	r1
    3c9c:	18 95       	reti

00003c9e <sleep>:

void sleep(unsigned char seconds) {
    3c9e:	cf 93       	push	r28
    3ca0:	df 93       	push	r29

	unsigned int pause = seconds*30;	// the timer2 used to wake-up from sleep is configured to run at 30 Hz
    3ca2:	9e e1       	ldi	r25, 0x1E	; 30
    3ca4:	89 9f       	mul	r24, r25
    3ca6:	e0 01       	movw	r28, r0
    3ca8:	11 24       	eor	r1, r1

	// disable external interrupt because it uses the timer2 to interpret the tv
	// remote signal and the timer2 must be free in order to be used for wake-up from sleep
	PCICR &= ~(1 << PCIE1);			// disable interrupt from falling edge
    3caa:	80 91 68 00 	lds	r24, 0x0068
    3cae:	8d 7f       	andi	r24, 0xFD	; 253
    3cb0:	80 93 68 00 	sts	0x0068, r24
	PCMSK1 &= ~(1 << PCINT15);		
    3cb4:	80 91 6c 00 	lds	r24, 0x006C
    3cb8:	8f 77       	andi	r24, 0x7F	; 127
    3cba:	80 93 6c 00 	sts	0x006C, r24
	PCIFR |= (1 << PCIF1);			// clear interrupt flag
    3cbe:	d9 9a       	sbi	0x1b, 1	; 27

	// disable adc
	ADCSRA = 0x00;					// disable interrupt and turn off adc
    3cc0:	10 92 7a 00 	sts	0x007A, r1
	ADCSRA |= (1 << ADIF);			// clear interrupt flag
    3cc4:	80 91 7a 00 	lds	r24, 0x007A
    3cc8:	80 61       	ori	r24, 0x10	; 16
    3cca:	80 93 7a 00 	sts	0x007A, r24

	// disable motors pwm
	TCCR3A = 0x00;	// turn off timer
    3cce:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0x00;
    3cd2:	10 92 91 00 	sts	0x0091, r1
	TIMSK3 = 0x00;	// disable interrupt
    3cd6:	10 92 71 00 	sts	0x0071, r1
	TIFR3 |= (1 << OCF3A) | (1 << OCF3B) | (1 << TOV3);	// clear output compares and timer overflow interrupt flags
    3cda:	88 b3       	in	r24, 0x18	; 24
    3cdc:	87 60       	ori	r24, 0x07	; 7
    3cde:	88 bb       	out	0x18, r24	; 24
	TCCR4A = 0x00;
    3ce0:	10 92 a0 00 	sts	0x00A0, r1
	TCCR4B = 0x00;
    3ce4:	10 92 a1 00 	sts	0x00A1, r1
	TIMSK4 = 0x00;
    3ce8:	10 92 72 00 	sts	0x0072, r1
	TIFR4 |= (1 << OCF4A) | (1 << OCF4B) | (1 << TOV4);	// clear output compares and timer overflow interrupt flags
    3cec:	89 b3       	in	r24, 0x19	; 25
    3cee:	87 60       	ori	r24, 0x07	; 7
    3cf0:	89 bb       	out	0x19, r24	; 25

	// disable leds pwm
	TCCR1A = 0x00;	// turn off timer
    3cf2:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x00;
    3cf6:	10 92 81 00 	sts	0x0081, r1

	// close communication channels
	closeUsart();
    3cfa:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <closeUsart>
	closeSPI();
    3cfe:	0e 94 38 0c 	call	0x1870	; 0x1870 <closeSPI>
	i2c_close();
    3d02:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <i2c_close>

	// set port pins
	initPortsIO();
    3d06:	0e 94 ae 1b 	call	0x375c	; 0x375c <initPortsIO>
	//PORTB &= ~(1 << 4);	// radio CE pin
	//DDRD = 0xFF;
	//PORTD = 0x00;	// I2C and uart pins to 0

	// set extendend standby mode and enable it
	SMCR |= (1 << SM2) | (1 << SM1) | (1 << SM0) | (1 << SE);	// extended standby
    3d0a:	83 b7       	in	r24, 0x33	; 51
    3d0c:	8f 60       	ori	r24, 0x0F	; 15
    3d0e:	83 bf       	out	0x33, r24	; 51

	// set timer2 for wake-up: 
	// source clock = 8 MHz
	// prescaler = 1/1024 => 7812.5 Hz
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
    3d10:	81 e0       	ldi	r24, 0x01	; 1
    3d12:	80 93 70 00 	sts	0x0070, r24
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
    3d16:	80 91 b0 00 	lds	r24, 0x00B0
    3d1a:	8d 7f       	andi	r24, 0xFD	; 253
    3d1c:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler
    3d20:	80 91 b1 00 	lds	r24, 0x00B1
    3d24:	87 60       	ori	r24, 0x07	; 7
    3d26:	80 93 b1 00 	sts	0x00B1, r24

	while(pause > 0) {	
    3d2a:	20 97       	sbiw	r28, 0x00	; 0
    3d2c:	19 f0       	breq	.+6      	; 0x3d34 <sleep+0x96>
		// enter extended standby mode
		//sleep_cpu();
		__asm__("sleep");
    3d2e:	88 95       	sleep
		pause--;
    3d30:	21 97       	sbiw	r28, 0x01	; 1
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler

	while(pause > 0) {	
    3d32:	e9 f7       	brne	.-6      	; 0x3d2e <sleep+0x90>
//		PORTB ^= (1 << 6);
	}

	// disable power mode
	//SMCR &= ~(1 << SE);
	SMCR = 0x00;
    3d34:	13 be       	out	0x33, r1	; 51

	// disable timer2 and its timer overflow interrupt
	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);	// disable timer2
    3d36:	80 91 b1 00 	lds	r24, 0x00B1
    3d3a:	88 7f       	andi	r24, 0xF8	; 248
    3d3c:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;					// disable all interrupt for timer2
    3d40:	10 92 70 00 	sts	0x0070, r1
	TCCR2A |= (1 << WGM21); 	// mode 2 => CTC mode
    3d44:	80 91 b0 00 	lds	r24, 0x00B0
    3d48:	82 60       	ori	r24, 0x02	; 2
    3d4a:	80 93 b0 00 	sts	0x00B0, r24

	pwm_red = 255;
    3d4e:	8f ef       	ldi	r24, 0xFF	; 255
    3d50:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    3d54:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    3d58:	80 93 0e 02 	sts	0x020E, r24
	pwm_right = 0;
    3d5c:	10 92 f6 02 	sts	0x02F6, r1
    3d60:	10 92 f5 02 	sts	0x02F5, r1
	pwm_left = 0;
    3d64:	10 92 f8 02 	sts	0x02F8, r1
    3d68:	10 92 f7 02 	sts	0x02F7, r1
	initPeripherals();
    3d6c:	0e 94 e4 1d 	call	0x3bc8	; 0x3bc8 <initPeripherals>

}
    3d70:	df 91       	pop	r29
    3d72:	cf 91       	pop	r28
    3d74:	08 95       	ret

00003d76 <getTime100MicroSec>:

unsigned long int getTime100MicroSec() {
    3d76:	60 91 48 04 	lds	r22, 0x0448
    3d7a:	70 91 49 04 	lds	r23, 0x0449
	return clockTick;
}
    3d7e:	80 91 4a 04 	lds	r24, 0x044A
    3d82:	90 91 4b 04 	lds	r25, 0x044B
    3d86:	08 95       	ret

00003d88 <readBatteryLevel>:

void readBatteryLevel() {
	measBattery = 1;
    3d88:	81 e0       	ldi	r24, 0x01	; 1
    3d8a:	80 93 bf 02 	sts	0x02BF, r24
}
    3d8e:	08 95       	ret

00003d90 <resetOdometry>:

void resetOdometry() {
	leftMotSteps = 0;
    3d90:	80 e0       	ldi	r24, 0x00	; 0
    3d92:	90 e0       	ldi	r25, 0x00	; 0
    3d94:	dc 01       	movw	r26, r24
    3d96:	80 93 d5 02 	sts	0x02D5, r24
    3d9a:	90 93 d6 02 	sts	0x02D6, r25
    3d9e:	a0 93 d7 02 	sts	0x02D7, r26
    3da2:	b0 93 d8 02 	sts	0x02D8, r27
	rightMotSteps = 0;
    3da6:	80 93 d1 02 	sts	0x02D1, r24
    3daa:	90 93 d2 02 	sts	0x02D2, r25
    3dae:	a0 93 d3 02 	sts	0x02D3, r26
    3db2:	b0 93 d4 02 	sts	0x02D4, r27
	theta = 0;
    3db6:	80 93 6f 04 	sts	0x046F, r24
    3dba:	90 93 70 04 	sts	0x0470, r25
    3dbe:	a0 93 71 04 	sts	0x0471, r26
    3dc2:	b0 93 72 04 	sts	0x0472, r27
	xPos = 0;
    3dc6:	80 93 77 04 	sts	0x0477, r24
    3dca:	90 93 78 04 	sts	0x0478, r25
    3dce:	a0 93 79 04 	sts	0x0479, r26
    3dd2:	b0 93 7a 04 	sts	0x047A, r27
	yPos = 0;
    3dd6:	80 93 7b 04 	sts	0x047B, r24
    3dda:	90 93 7c 04 	sts	0x047C, r25
    3dde:	a0 93 7d 04 	sts	0x047D, r26
    3de2:	b0 93 7e 04 	sts	0x047E, r27
}
    3de6:	08 95       	ret

00003de8 <initAdc>:

#include "adc.h"


void initAdc(void) {
    3de8:	cf 93       	push	r28
    3dea:	df 93       	push	r29
	// ADMUX  -----> REFS1	REFS0	 ADLAR	MUX4	MUX3 	 MUX2	MUX1	MUX0
	// default		 0		0		 0		0		0		 0		0		0
	// ADCSRB -----> -		ACME	 - 		- 		MUX5 	 ADTS2 	ADTS1 	ADTS0
	// default		 0		0		 0		0		0		 0		0		0

	ADCSRA = 0;
    3dec:	ea e7       	ldi	r30, 0x7A	; 122
    3dee:	f0 e0       	ldi	r31, 0x00	; 0
    3df0:	10 82       	st	Z, r1
	ADCSRB = 0;
    3df2:	ab e7       	ldi	r26, 0x7B	; 123
    3df4:	b0 e0       	ldi	r27, 0x00	; 0
    3df6:	1c 92       	st	X, r1
	ADMUX = 0;
    3df8:	cc e7       	ldi	r28, 0x7C	; 124
    3dfa:	d0 e0       	ldi	r29, 0x00	; 0
    3dfc:	18 82       	st	Y, r1

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// 1/64 prescaler => 8 MHz/64=125 KHz => Tad (adc clock)
    3dfe:	80 81       	ld	r24, Z
    3e00:	86 60       	ori	r24, 0x06	; 6
    3e02:	80 83       	st	Z, r24
											// one sample need 13 Tad in free running mode, so interrupt 
											// frequency is 125/13=9.6 KHz (104 us between adc interrupts)
	ADMUX |= (1 << REFS0); 	// voltage reference to AVCC (external)
    3e04:	88 81       	ld	r24, Y
    3e06:	80 64       	ori	r24, 0x40	; 64
    3e08:	88 83       	st	Y, r24
	ADCSRA |= (1 << ADATE); // auto-trigger mode: the new sampling is started just after the last one is completed
    3e0a:	80 81       	ld	r24, Z
    3e0c:	80 62       	ori	r24, 0x20	; 32
    3e0e:	80 83       	st	Z, r24
	ADCSRB &= 0xF8;			// for safety...ADTS2:0 in ADCSRB should be already set to free running by default (0b000)
    3e10:	8c 91       	ld	r24, X
    3e12:	88 7f       	andi	r24, 0xF8	; 248
    3e14:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADIE);	// enable interrupt on conversion completion
    3e16:	80 81       	ld	r24, Z
    3e18:	88 60       	ori	r24, 0x08	; 8
    3e1a:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	// enable ADC
    3e1c:	80 81       	ld	r24, Z
    3e1e:	80 68       	ori	r24, 0x80	; 128
    3e20:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);	// start first conversion (start from channel 0)
    3e22:	80 81       	ld	r24, Z
    3e24:	80 64       	ori	r24, 0x40	; 64
    3e26:	80 83       	st	Z, r24

}
    3e28:	df 91       	pop	r29
    3e2a:	cf 91       	pop	r28
    3e2c:	08 95       	ret

00003e2e <__vector_29>:

ISR(ADC_vect) {
    3e2e:	1f 92       	push	r1
    3e30:	0f 92       	push	r0
    3e32:	0f b6       	in	r0, 0x3f	; 63
    3e34:	0f 92       	push	r0
    3e36:	0b b6       	in	r0, 0x3b	; 59
    3e38:	0f 92       	push	r0
    3e3a:	11 24       	eor	r1, r1
    3e3c:	1f 93       	push	r17
    3e3e:	2f 93       	push	r18
    3e40:	3f 93       	push	r19
    3e42:	4f 93       	push	r20
    3e44:	5f 93       	push	r21
    3e46:	6f 93       	push	r22
    3e48:	7f 93       	push	r23
    3e4a:	8f 93       	push	r24
    3e4c:	9f 93       	push	r25
    3e4e:	af 93       	push	r26
    3e50:	bf 93       	push	r27
    3e52:	ef 93       	push	r30
    3e54:	ff 93       	push	r31
	// channel 15:    active phase when going forward: motor left current; passive phase when going backward: motor left velocity


	//LED_BLUE_ON;

	clockTick++;				// this variable is used as base time for timed processes/functions (e,g, delay); 
    3e56:	80 91 48 04 	lds	r24, 0x0448
    3e5a:	90 91 49 04 	lds	r25, 0x0449
    3e5e:	a0 91 4a 04 	lds	r26, 0x044A
    3e62:	b0 91 4b 04 	lds	r27, 0x044B
    3e66:	01 96       	adiw	r24, 0x01	; 1
    3e68:	a1 1d       	adc	r26, r1
    3e6a:	b1 1d       	adc	r27, r1
    3e6c:	80 93 48 04 	sts	0x0448, r24
    3e70:	90 93 49 04 	sts	0x0449, r25
    3e74:	a0 93 4a 04 	sts	0x044A, r26
    3e78:	b0 93 4b 04 	sts	0x044B, r27
								// resolution of 104 us based on adc interrupts

	unsigned int value = ADCL;			// get the sample; low byte must be read first!!
    3e7c:	80 91 78 00 	lds	r24, 0x0078
    3e80:	90 e0       	ldi	r25, 0x00	; 0
	value = (ADCH<<8) | value;
    3e82:	40 91 79 00 	lds	r20, 0x0079
    3e86:	34 2f       	mov	r19, r20
    3e88:	20 e0       	ldi	r18, 0x00	; 0
    3e8a:	82 2b       	or	r24, r18
    3e8c:	93 2b       	or	r25, r19
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    3e8e:	20 91 b9 02 	lds	r18, 0x02B9
    3e92:	22 30       	cpi	r18, 0x02	; 2
    3e94:	09 f4       	brne	.+2      	; 0x3e98 <__vector_29+0x6a>
    3e96:	ec c1       	rjmp	.+984    	; 0x4270 <__vector_29+0x442>
    3e98:	23 30       	cpi	r18, 0x03	; 3
    3e9a:	08 f4       	brcc	.+2      	; 0x3e9e <__vector_29+0x70>
    3e9c:	4c c0       	rjmp	.+152    	; 0x3f36 <__vector_29+0x108>
    3e9e:	24 30       	cpi	r18, 0x04	; 4
    3ea0:	09 f4       	brne	.+2      	; 0x3ea4 <__vector_29+0x76>
    3ea2:	10 c2       	rjmp	.+1056   	; 0x42c4 <__vector_29+0x496>
    3ea4:	24 30       	cpi	r18, 0x04	; 4
    3ea6:	08 f0       	brcs	.+2      	; 0x3eaa <__vector_29+0x7c>
    3ea8:	55 c1       	rjmp	.+682    	; 0x4154 <__vector_29+0x326>
				}
			}
			break;

		case SAVE_TO_LEFT_MOTOR_CURRENT:
			left_current_avg += value;
    3eaa:	20 91 e1 02 	lds	r18, 0x02E1
    3eae:	30 91 e2 02 	lds	r19, 0x02E2
    3eb2:	28 0f       	add	r18, r24
    3eb4:	39 1f       	adc	r19, r25
			left_current_avg = left_current_avg >> 1;
    3eb6:	36 95       	lsr	r19
    3eb8:	27 95       	ror	r18
    3eba:	30 93 e2 02 	sts	0x02E2, r19
    3ebe:	20 93 e1 02 	sts	0x02E1, r18
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
    3ec2:	80 91 c5 04 	lds	r24, 0x04C5
    3ec6:	82 30       	cpi	r24, 0x02	; 2
    3ec8:	09 f0       	breq	.+2      	; 0x3ecc <__vector_29+0x9e>
    3eca:	4b c0       	rjmp	.+150    	; 0x3f62 <__vector_29+0x134>
		switch(irCommAdcTxState) {
    3ecc:	80 91 04 05 	lds	r24, 0x0504
    3ed0:	81 30       	cpi	r24, 0x01	; 1
    3ed2:	09 f4       	brne	.+2      	; 0x3ed6 <__vector_29+0xa8>
    3ed4:	cb c2       	rjmp	.+1430   	; 0x446c <__vector_29+0x63e>
    3ed6:	81 30       	cpi	r24, 0x01	; 1
    3ed8:	08 f0       	brcs	.+2      	; 0x3edc <__vector_29+0xae>
    3eda:	22 c2       	rjmp	.+1092   	; 0x4320 <__vector_29+0x4f2>
				}
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ1;
				break;

			case IRCOMM_TX_ADC_IDLE:
				if(irCommTxByteEnqueued==1) {					
    3edc:	80 91 06 05 	lds	r24, 0x0506
    3ee0:	81 30       	cpi	r24, 0x01	; 1
    3ee2:	09 f4       	brne	.+2      	; 0x3ee6 <__vector_29+0xb8>
    3ee4:	3e c3       	rjmp	.+1660   	; 0x4562 <__vector_29+0x734>
    3ee6:	80 91 ba 02 	lds	r24, 0x02BA
	
	}

	// channel selection in the adc register; continuously manually change the channel 
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
    3eea:	90 91 23 02 	lds	r25, 0x0223
    3eee:	98 30       	cpi	r25, 0x08	; 8
    3ef0:	08 f0       	brcs	.+2      	; 0x3ef4 <__vector_29+0xc6>
    3ef2:	76 c1       	rjmp	.+748    	; 0x41e0 <__vector_29+0x3b2>
		ADCSRB &= ~(1 << MUX5);
    3ef4:	90 91 7b 00 	lds	r25, 0x007B
    3ef8:	97 7f       	andi	r25, 0xF7	; 247
    3efa:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + currentAdChannel;
    3efe:	90 91 23 02 	lds	r25, 0x0223
    3f02:	90 5c       	subi	r25, 0xC0	; 192
    3f04:	90 93 7c 00 	sts	0x007C, r25
		ADCSRB |= (1 << MUX5);
		ADMUX = 0x40 + (currentAdChannel-8);
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if((adcSamplingState==2) && (irCommMode==IRCOMM_MODE_SENSORS_SAMPLING)) {
    3f08:	82 30       	cpi	r24, 0x02	; 2
    3f0a:	09 f4       	brne	.+2      	; 0x3f0e <__vector_29+0xe0>
    3f0c:	76 c1       	rjmp	.+748    	; 0x41fa <__vector_29+0x3cc>

	}

	//LED_BLUE_OFF;

}
    3f0e:	ff 91       	pop	r31
    3f10:	ef 91       	pop	r30
    3f12:	bf 91       	pop	r27
    3f14:	af 91       	pop	r26
    3f16:	9f 91       	pop	r25
    3f18:	8f 91       	pop	r24
    3f1a:	7f 91       	pop	r23
    3f1c:	6f 91       	pop	r22
    3f1e:	5f 91       	pop	r21
    3f20:	4f 91       	pop	r20
    3f22:	3f 91       	pop	r19
    3f24:	2f 91       	pop	r18
    3f26:	1f 91       	pop	r17
    3f28:	0f 90       	pop	r0
    3f2a:	0b be       	out	0x3b, r0	; 59
    3f2c:	0f 90       	pop	r0
    3f2e:	0f be       	out	0x3f, r0	; 63
    3f30:	0f 90       	pop	r0
    3f32:	1f 90       	pop	r1
    3f34:	18 95       	reti
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    3f36:	22 23       	and	r18, r18
    3f38:	09 f4       	brne	.+2      	; 0x3f3c <__vector_29+0x10e>
    3f3a:	78 c0       	rjmp	.+240    	; 0x402c <__vector_29+0x1fe>
    3f3c:	21 30       	cpi	r18, 0x01	; 1
    3f3e:	61 f4       	brne	.+24     	; 0x3f58 <__vector_29+0x12a>
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
			}											// is sampled; thus 12 sensors x 2 phases = 24 samples
			break;

		case SAVE_TO_RIGHT_MOTOR_CURRENT:
			right_current_avg += value;
    3f40:	20 91 e3 02 	lds	r18, 0x02E3
    3f44:	30 91 e4 02 	lds	r19, 0x02E4
    3f48:	28 0f       	add	r18, r24
    3f4a:	39 1f       	adc	r19, r25
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
    3f4c:	36 95       	lsr	r19
    3f4e:	27 95       	ror	r18
    3f50:	30 93 e4 02 	sts	0x02E4, r19
    3f54:	20 93 e3 02 	sts	0x02E3, r18
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
    3f58:	80 91 c5 04 	lds	r24, 0x04C5
    3f5c:	82 30       	cpi	r24, 0x02	; 2
    3f5e:	09 f4       	brne	.+2      	; 0x3f62 <__vector_29+0x134>
    3f60:	b5 cf       	rjmp	.-150    	; 0x3ecc <__vector_29+0x9e>
					irCommAdcTxState = IRCOMM_TX_ADC_TURN_OFF_SENSORS;
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
    3f62:	81 30       	cpi	r24, 0x01	; 1
    3f64:	09 f4       	brne	.+2      	; 0x3f68 <__vector_29+0x13a>
    3f66:	63 c1       	rjmp	.+710    	; 0x422e <__vector_29+0x400>
			case 12:
				adcSaveDataTo = SKIP_SAMPLE;
				break;

		}
	} else if(irCommMode==IRCOMM_MODE_SENSORS_SAMPLING) {
    3f68:	88 23       	and	r24, r24
    3f6a:	09 f0       	breq	.+2      	; 0x3f6e <__vector_29+0x140>
    3f6c:	bc cf       	rjmp	.-136    	; 0x3ee6 <__vector_29+0xb8>
		switch(adcSamplingState) {
    3f6e:	80 91 ba 02 	lds	r24, 0x02BA
    3f72:	82 30       	cpi	r24, 0x02	; 2
    3f74:	09 f4       	brne	.+2      	; 0x3f78 <__vector_29+0x14a>
    3f76:	52 c3       	rjmp	.+1700   	; 0x461c <__vector_29+0x7ee>
    3f78:	83 30       	cpi	r24, 0x03	; 3
    3f7a:	08 f0       	brcs	.+2      	; 0x3f7e <__vector_29+0x150>
    3f7c:	fe c1       	rjmp	.+1020   	; 0x437a <__vector_29+0x54c>
    3f7e:	88 23       	and	r24, r24
    3f80:	09 f4       	brne	.+2      	; 0x3f84 <__vector_29+0x156>
    3f82:	ab c2       	rjmp	.+1366   	; 0x44da <__vector_29+0x6ac>
    3f84:	81 30       	cpi	r24, 0x01	; 1
    3f86:	09 f0       	breq	.+2      	; 0x3f8a <__vector_29+0x15c>
    3f88:	b0 cf       	rjmp	.-160    	; 0x3eea <__vector_29+0xbc>
				}
				adcSamplingState = 1;
				break;

			case 1:	// left motor
				currentAdChannel = currentMotLeftChannel;
    3f8a:	80 91 25 02 	lds	r24, 0x0225
    3f8e:	80 93 23 02 	sts	0x0223, r24
				leftChannelPhase = leftMotorPhase;
    3f92:	80 91 28 02 	lds	r24, 0x0228
    3f96:	80 93 bc 02 	sts	0x02BC, r24
				adcSaveDataTo = SAVE_TO_PROX;
    3f9a:	10 92 b9 02 	sts	0x02B9, r1
				adcSamplingState = 2;
    3f9e:	82 e0       	ldi	r24, 0x02	; 2
    3fa0:	80 93 ba 02 	sts	0x02BA, r24
				if(irCommEnabled==IRCOMM_MODE_RECEIVE && currentProx==23) {					
    3fa4:	10 91 c4 04 	lds	r17, 0x04C4
    3fa8:	11 30       	cpi	r17, 0x01	; 1
    3faa:	09 f4       	brne	.+2      	; 0x3fae <__vector_29+0x180>
    3fac:	4b c4       	rjmp	.+2198   	; 0x4844 <__vector_29+0xa16>
					irCommRxWindowSamples = 0;
					memset(irCommMaxSensorValueAdc, 0x00, 16);
					memset(irCommMinSensorValueAdc, 0xFF, 16);
					irCommMode = IRCOMM_MODE_RECEIVE;
				}
				if(irCommEnabled==IRCOMM_MODE_TRANSMIT && currentProx==23) {
    3fae:	12 30       	cpi	r17, 0x02	; 2
    3fb0:	09 f4       	brne	.+2      	; 0x3fb4 <__vector_29+0x186>
    3fb2:	37 c4       	rjmp	.+2158   	; 0x4822 <__vector_29+0x9f4>
						irCommAdcTxState = IRCOMM_TX_ADC_TURN_OFF_SENSORS;
					} else {
						irCommMode=IRCOMM_MODE_SENSORS_SAMPLING; // no data to be transmitted, restart sensors sampling
					}
				}
				if(irCommEnabled==IRCOMM_MODE_RECEIVE_ONLY && currentProx==23) {					
    3fb4:	13 30       	cpi	r17, 0x03	; 3
    3fb6:	29 f5       	brne	.+74     	; 0x4002 <__vector_29+0x1d4>
    3fb8:	80 91 24 02 	lds	r24, 0x0224
    3fbc:	87 31       	cpi	r24, 0x17	; 23
    3fbe:	09 f0       	breq	.+2      	; 0x3fc2 <__vector_29+0x194>
    3fc0:	92 cf       	rjmp	.-220    	; 0x3ee6 <__vector_29+0xb8>
					currentAdChannel = 0;	// prox0					
    3fc2:	10 92 23 02 	sts	0x0223, r1
					measBattery = 0;
    3fc6:	10 92 bf 02 	sts	0x02BF, r1
					irCommAdcRxState = 0;					
    3fca:	10 92 e6 04 	sts	0x04E6, r1
					irCommRxWindowSamples = 0;
    3fce:	10 92 e7 04 	sts	0x04E7, r1
					memset(irCommMaxSensorValueAdc, 0x00, 16);
    3fd2:	e0 91 19 0b 	lds	r30, 0x0B19
    3fd6:	f0 91 1a 0b 	lds	r31, 0x0B1A
    3fda:	80 e1       	ldi	r24, 0x10	; 16
    3fdc:	df 01       	movw	r26, r30
    3fde:	1d 92       	st	X+, r1
    3fe0:	8a 95       	dec	r24
    3fe2:	e9 f7       	brne	.-6      	; 0x3fde <__vector_29+0x1b0>
					memset(irCommMinSensorValueAdc, 0xFF, 16);
    3fe4:	80 91 a7 05 	lds	r24, 0x05A7
    3fe8:	90 91 a8 05 	lds	r25, 0x05A8
    3fec:	6f ef       	ldi	r22, 0xFF	; 255
    3fee:	70 e0       	ldi	r23, 0x00	; 0
    3ff0:	40 e1       	ldi	r20, 0x10	; 16
    3ff2:	50 e0       	ldi	r21, 0x00	; 0
    3ff4:	0e 94 fc 52 	call	0xa5f8	; 0xa5f8 <memset>
					irCommMode = IRCOMM_MODE_RECEIVE;
    3ff8:	81 e0       	ldi	r24, 0x01	; 1
    3ffa:	80 93 c5 04 	sts	0x04C5, r24
    3ffe:	10 91 c4 04 	lds	r17, 0x04C4
				}
				if(irCommEnabled==IRCOMM_MODE_TRANSMIT_ONLY && currentProx==23) {
    4002:	14 30       	cpi	r17, 0x04	; 4
    4004:	09 f0       	breq	.+2      	; 0x4008 <__vector_29+0x1da>
    4006:	6f cf       	rjmp	.-290    	; 0x3ee6 <__vector_29+0xb8>
    4008:	80 91 24 02 	lds	r24, 0x0224
    400c:	87 31       	cpi	r24, 0x17	; 23
    400e:	09 f0       	breq	.+2      	; 0x4012 <__vector_29+0x1e4>
    4010:	6a cf       	rjmp	.-300    	; 0x3ee6 <__vector_29+0xb8>
					irCommMode = IRCOMM_MODE_TRANSMIT;
    4012:	82 e0       	ldi	r24, 0x02	; 2
    4014:	80 93 c5 04 	sts	0x04C5, r24
					if(irCommTxByteEnqueued==1) {
    4018:	80 91 06 05 	lds	r24, 0x0506
    401c:	81 30       	cpi	r24, 0x01	; 1
    401e:	09 f4       	brne	.+2      	; 0x4022 <__vector_29+0x1f4>
    4020:	a0 c2       	rjmp	.+1344   	; 0x4562 <__vector_29+0x734>
						irCommAdcTxState = IRCOMM_TX_ADC_TURN_OFF_SENSORS;
					} else {
						irCommAdcTxState = IRCOMM_TX_ADC_IDLE;
    4022:	10 92 04 05 	sts	0x0504, r1
    4026:	80 91 ba 02 	lds	r24, 0x02BA
    402a:	5f cf       	rjmp	.-322    	; 0x3eea <__vector_29+0xbc>
			}
			currentProx++;
			break;

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    402c:	60 91 24 02 	lds	r22, 0x0224
    4030:	6e 30       	cpi	r22, 0x0E	; 14
    4032:	09 f4       	brne	.+2      	; 0x4036 <__vector_29+0x208>
    4034:	06 c3       	rjmp	.+1548   	; 0x4642 <__vector_29+0x814>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
				measBattery = 0;
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
			} else {
				proximityValue[currentProx] = value;	// even indexes contain ambient values; odd indexes contains "reflected" values
    4036:	26 2f       	mov	r18, r22
    4038:	30 e0       	ldi	r19, 0x00	; 0
    403a:	f9 01       	movw	r30, r18
    403c:	ee 0f       	add	r30, r30
    403e:	ff 1f       	adc	r31, r31
    4040:	e7 5d       	subi	r30, 0xD7	; 215
    4042:	fd 4f       	sbci	r31, 0xFD	; 253
    4044:	91 83       	std	Z+1, r25	; 0x01
    4046:	80 83       	st	Z, r24
			}

			if(currentProx & 0x01) {
    4048:	20 ff       	sbrs	r18, 0
    404a:	78 c0       	rjmp	.+240    	; 0x413c <__vector_29+0x30e>
				//if(currentProx < 16) {	// prox
					proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
    404c:	f9 01       	movw	r30, r18
    404e:	ee 0f       	add	r30, r30
    4050:	ff 1f       	adc	r31, r31
    4052:	e9 5d       	subi	r30, 0xD9	; 217
    4054:	fd 4f       	sbci	r31, 0xFD	; 253
    4056:	80 81       	ld	r24, Z
    4058:	91 81       	ldd	r25, Z+1	; 0x01
    405a:	f9 01       	movw	r30, r18
    405c:	ee 0f       	add	r30, r30
    405e:	ff 1f       	adc	r31, r31
    4060:	e7 5d       	subi	r30, 0xD7	; 215
    4062:	fd 4f       	sbci	r31, 0xFD	; 253
    4064:	40 81       	ld	r20, Z
    4066:	51 81       	ldd	r21, Z+1	; 0x01
    4068:	26 2f       	mov	r18, r22
    406a:	26 95       	lsr	r18
    406c:	30 e0       	ldi	r19, 0x00	; 0
    406e:	84 1b       	sub	r24, r20
    4070:	95 0b       	sbc	r25, r21
    4072:	22 0f       	add	r18, r18
    4074:	33 1f       	adc	r19, r19
    4076:	f9 01       	movw	r30, r18
    4078:	ef 58       	subi	r30, 0x8F	; 143
    407a:	fd 4f       	sbci	r31, 0xFD	; 253
    407c:	40 81       	ld	r20, Z
    407e:	51 81       	ldd	r21, Z+1	; 0x01
    4080:	84 1b       	sub	r24, r20
    4082:	95 0b       	sbc	r25, r21
    4084:	f9 01       	movw	r30, r18
    4086:	e7 5a       	subi	r30, 0xA7	; 167
    4088:	fd 4f       	sbci	r31, 0xFD	; 253
    408a:	91 83       	std	Z+1, r25	; 0x01
    408c:	80 83       	st	Z, r24
				//} else {	// ground
				//	proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx];
				//}
				if(proximityResult[currentProx>>1] < 0) {
    408e:	97 fd       	sbrc	r25, 7
    4090:	02 c3       	rjmp	.+1540   	; 0x4696 <__vector_29+0x868>
					proximityResult[currentProx>>1] = 0;
				}
				if(proximityResult[currentProx>>1] > 1024) {
    4092:	44 e0       	ldi	r20, 0x04	; 4
    4094:	81 30       	cpi	r24, 0x01	; 1
    4096:	94 07       	cpc	r25, r20
    4098:	24 f0       	brlt	.+8      	; 0x40a2 <__vector_29+0x274>
					proximityResult[currentProx>>1] = 1024;
    409a:	80 e0       	ldi	r24, 0x00	; 0
    409c:	94 e0       	ldi	r25, 0x04	; 4
    409e:	91 83       	std	Z+1, r25	; 0x01
    40a0:	80 83       	st	Z, r24
				// 1) from 0 to PHASE1: y = x (where x = proximity value9
				// 2) from PHASE1 to PHASE2: y = x/2 + 30
				// 3) from PHASE2 to PHASE3: y = x/4 + 75
				// 4) from PHASE3 upwards: y = x/8 + 127.5
				// The linearized values are used for the obstacles avoidance.
				if(currentProx < 16) {	// only for proximity (not ground sensors)
    40a2:	60 31       	cpi	r22, 0x10	; 16
    40a4:	50 f4       	brcc	.+20     	; 0x40ba <__vector_29+0x28c>
					
					if(proximityResult[currentProx>>1] < PHASE1) {
    40a6:	8c 33       	cpi	r24, 0x3C	; 60
    40a8:	91 05       	cpc	r25, r1
    40aa:	0c f0       	brlt	.+2      	; 0x40ae <__vector_29+0x280>
    40ac:	f9 c2       	rjmp	.+1522   	; 0x46a0 <__vector_29+0x872>

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];
    40ae:	2f 53       	subi	r18, 0x3F	; 63
    40b0:	3d 4f       	sbci	r19, 0xFD	; 253
    40b2:	d9 01       	movw	r26, r18
    40b4:	11 96       	adiw	r26, 0x01	; 1
    40b6:	9c 93       	st	X, r25
    40b8:	8e 93       	st	-X, r24
				}

				// the cliff avoidance behavior is inserted within this interrupt service routine in order to react
				// as fast as possible; the maximum speed usable with cliff avoidance is 30 in all kind of surface 
				// (apart from black ones) after calibration.
				if(cliffAvoidanceEnabled) {
    40ba:	80 91 6d 04 	lds	r24, 0x046D
    40be:	88 23       	and	r24, r24
    40c0:	09 f4       	brne	.+2      	; 0x40c4 <__vector_29+0x296>
    40c2:	1c c2       	rjmp	.+1080   	; 0x44fc <__vector_29+0x6ce>
					if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    40c4:	80 91 69 02 	lds	r24, 0x0269
    40c8:	90 91 6a 02 	lds	r25, 0x026A
    40cc:	f1 e0       	ldi	r31, 0x01	; 1
    40ce:	84 3a       	cpi	r24, 0xA4	; 164
    40d0:	9f 07       	cpc	r25, r31
    40d2:	cc f0       	brlt	.+50     	; 0x4106 <__vector_29+0x2d8>
    40d4:	80 91 6b 02 	lds	r24, 0x026B
    40d8:	90 91 6c 02 	lds	r25, 0x026C
    40dc:	21 e0       	ldi	r18, 0x01	; 1
    40de:	84 3a       	cpi	r24, 0xA4	; 164
    40e0:	92 07       	cpc	r25, r18
    40e2:	8c f0       	brlt	.+34     	; 0x4106 <__vector_29+0x2d8>
    40e4:	80 91 6d 02 	lds	r24, 0x026D
    40e8:	90 91 6e 02 	lds	r25, 0x026E
    40ec:	41 e0       	ldi	r20, 0x01	; 1
    40ee:	84 3a       	cpi	r24, 0xA4	; 164
    40f0:	94 07       	cpc	r25, r20
    40f2:	4c f0       	brlt	.+18     	; 0x4106 <__vector_29+0x2d8>
    40f4:	80 91 6f 02 	lds	r24, 0x026F
    40f8:	90 91 70 02 	lds	r25, 0x0270
    40fc:	a1 e0       	ldi	r26, 0x01	; 1
    40fe:	84 3a       	cpi	r24, 0xA4	; 164
    4100:	9a 07       	cpc	r25, r26
    4102:	0c f0       	brlt	.+2      	; 0x4106 <__vector_29+0x2d8>
    4104:	fb c1       	rjmp	.+1014   	; 0x44fc <__vector_29+0x6ce>
					//if(proximityResult[8]<(proximityOffset[8]>>1) || proximityResult[9]<(proximityOffset[9]>>1) || proximityResult[10]<(proximityOffset[10]>>1) || proximityResult[11]<(proximityOffset[11]>>1)) {
						cliffDetectedFlag = 1;
    4106:	81 e0       	ldi	r24, 0x01	; 1
    4108:	80 93 6e 04 	sts	0x046E, r24
						//LED_RED_ON;			
						// set resulting velocity to 0 and change the pwm registers directly to be able
						// to stop as fast as possible (the next pwm cycle)
						// left motor
						pwm_left = 0;
    410c:	10 92 f8 02 	sts	0x02F8, r1
    4110:	10 92 f7 02 	sts	0x02F7, r1
						OCR4A = 0;
    4114:	10 92 a9 00 	sts	0x00A9, r1
    4118:	10 92 a8 00 	sts	0x00A8, r1
						OCR4B = 0;
    411c:	10 92 ab 00 	sts	0x00AB, r1
    4120:	10 92 aa 00 	sts	0x00AA, r1
						// right motor
						pwm_right = 0;
    4124:	10 92 f6 02 	sts	0x02F6, r1
    4128:	10 92 f5 02 	sts	0x02F5, r1
						OCR3A = 0;
    412c:	10 92 99 00 	sts	0x0099, r1
    4130:	10 92 98 00 	sts	0x0098, r1
						OCR3B = 0;
    4134:	10 92 9b 00 	sts	0x009B, r1
    4138:	10 92 9a 00 	sts	0x009A, r1
				} else {
					cliffDetectedFlag = 0;
				}

			}			
			currentProx++;
    413c:	6f 5f       	subi	r22, 0xFF	; 255
    413e:	60 93 24 02 	sts	0x0224, r22
			if(currentProx > 23) {						// in total there are 8 proximity sensors and 4 ground sensors => 12 sensors
    4142:	68 31       	cpi	r22, 0x18	; 24
    4144:	08 f4       	brcc	.+2      	; 0x4148 <__vector_29+0x31a>
    4146:	08 cf       	rjmp	.-496    	; 0x3f58 <__vector_29+0x12a>
				currentProx = 0;						// for each one there is a passive phase in which the ambient light is sampled,
    4148:	10 92 24 02 	sts	0x0224, r1
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
    414c:	81 e0       	ldi	r24, 0x01	; 1
    414e:	80 93 c0 02 	sts	0x02C0, r24
    4152:	02 cf       	rjmp	.-508    	; 0x3f58 <__vector_29+0x12a>
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    4154:	26 30       	cpi	r18, 0x06	; 6
    4156:	09 f0       	breq	.+2      	; 0x415a <__vector_29+0x32c>
    4158:	ff ce       	rjmp	.-514    	; 0x3f58 <__vector_29+0x12a>
		case SAVE_TO_PROX_IRCOMM:
			irCommProxValuesAdc[currentProx+irCommRxWindowSamples*8] = value;
    415a:	20 91 e7 04 	lds	r18, 0x04E7
    415e:	30 e0       	ldi	r19, 0x00	; 0
    4160:	40 91 24 02 	lds	r20, 0x0224
    4164:	22 0f       	add	r18, r18
    4166:	33 1f       	adc	r19, r19
    4168:	22 0f       	add	r18, r18
    416a:	33 1f       	adc	r19, r19
    416c:	22 0f       	add	r18, r18
    416e:	33 1f       	adc	r19, r19
    4170:	24 0f       	add	r18, r20
    4172:	31 1d       	adc	r19, r1
    4174:	22 0f       	add	r18, r18
    4176:	33 1f       	adc	r19, r19
    4178:	e0 91 4b 08 	lds	r30, 0x084B
    417c:	f0 91 4c 08 	lds	r31, 0x084C
    4180:	e2 0f       	add	r30, r18
    4182:	f3 1f       	adc	r31, r19
    4184:	91 83       	std	Z+1, r25	; 0x01
    4186:	80 83       	st	Z, r24
			// get the min and max values in the sampling window for all the sensors
			if(irCommMaxSensorValueAdc[currentProx] < value) {
    4188:	60 91 24 02 	lds	r22, 0x0224
    418c:	26 2f       	mov	r18, r22
    418e:	30 e0       	ldi	r19, 0x00	; 0
    4190:	22 0f       	add	r18, r18
    4192:	33 1f       	adc	r19, r19
    4194:	e0 91 19 0b 	lds	r30, 0x0B19
    4198:	f0 91 1a 0b 	lds	r31, 0x0B1A
    419c:	e2 0f       	add	r30, r18
    419e:	f3 1f       	adc	r31, r19
    41a0:	40 81       	ld	r20, Z
    41a2:	51 81       	ldd	r21, Z+1	; 0x01
    41a4:	48 17       	cp	r20, r24
    41a6:	59 07       	cpc	r21, r25
    41a8:	40 f4       	brcc	.+16     	; 0x41ba <__vector_29+0x38c>
				irCommMaxSensorValueAdc[currentProx] = value;
    41aa:	91 83       	std	Z+1, r25	; 0x01
    41ac:	80 83       	st	Z, r24
    41ae:	60 91 24 02 	lds	r22, 0x0224
    41b2:	26 2f       	mov	r18, r22
    41b4:	30 e0       	ldi	r19, 0x00	; 0
    41b6:	22 0f       	add	r18, r18
    41b8:	33 1f       	adc	r19, r19
			}
			if(irCommMinSensorValueAdc[currentProx] > value) {
    41ba:	e0 91 a7 05 	lds	r30, 0x05A7
    41be:	f0 91 a8 05 	lds	r31, 0x05A8
    41c2:	e2 0f       	add	r30, r18
    41c4:	f3 1f       	adc	r31, r19
    41c6:	20 81       	ld	r18, Z
    41c8:	31 81       	ldd	r19, Z+1	; 0x01
    41ca:	82 17       	cp	r24, r18
    41cc:	93 07       	cpc	r25, r19
    41ce:	20 f4       	brcc	.+8      	; 0x41d8 <__vector_29+0x3aa>
				irCommMinSensorValueAdc[currentProx] = value;
    41d0:	91 83       	std	Z+1, r25	; 0x01
    41d2:	80 83       	st	Z, r24
    41d4:	60 91 24 02 	lds	r22, 0x0224
			}
			currentProx++;
    41d8:	6f 5f       	subi	r22, 0xFF	; 255
    41da:	60 93 24 02 	sts	0x0224, r22
			break;
    41de:	bc ce       	rjmp	.-648    	; 0x3f58 <__vector_29+0x12a>
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
		ADCSRB &= ~(1 << MUX5);
		ADMUX = 0x40 + currentAdChannel;
	} else {						// MUX5=1 + ADMUX=0..7 => adc channel=8..15
		ADCSRB |= (1 << MUX5);
    41e0:	90 91 7b 00 	lds	r25, 0x007B
    41e4:	98 60       	ori	r25, 0x08	; 8
    41e6:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + (currentAdChannel-8);
    41ea:	90 91 23 02 	lds	r25, 0x0223
    41ee:	98 5c       	subi	r25, 0xC8	; 200
    41f0:	90 93 7c 00 	sts	0x007C, r25
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if((adcSamplingState==2) && (irCommMode==IRCOMM_MODE_SENSORS_SAMPLING)) {
    41f4:	82 30       	cpi	r24, 0x02	; 2
    41f6:	09 f0       	breq	.+2      	; 0x41fa <__vector_29+0x3cc>
    41f8:	8a ce       	rjmp	.-748    	; 0x3f0e <__vector_29+0xe0>
    41fa:	80 91 c5 04 	lds	r24, 0x04C5
    41fe:	88 23       	and	r24, r24
    4200:	09 f0       	breq	.+2      	; 0x4204 <__vector_29+0x3d6>
    4202:	85 ce       	rjmp	.-758    	; 0x3f0e <__vector_29+0xe0>

		if(hardwareRevision == HW_REV_3_0) {
    4204:	20 91 4f 04 	lds	r18, 0x044F
    4208:	22 23       	and	r18, r18
    420a:	39 f4       	brne	.+14     	; 0x421a <__vector_29+0x3ec>
			PORTJ &= 0xF0;
    420c:	80 91 05 01 	lds	r24, 0x0105
    4210:	80 7f       	andi	r24, 0xF0	; 240
    4212:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    4216:	12 b8       	out	0x02, r1	; 2
    4218:	7a ce       	rjmp	.-780    	; 0x3f0e <__vector_29+0xe0>
			//#warning "turn off pulse with 0 (hw rev 3.0)"
		}

		if(hardwareRevision == HW_REV_3_0_1) {
    421a:	21 30       	cpi	r18, 0x01	; 1
    421c:	19 f0       	breq	.+6      	; 0x4224 <__vector_29+0x3f6>
			PORTJ = 0xFF;
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0.1)"
		}

		if(hardwareRevision == HW_REV_3_1) {
    421e:	22 30       	cpi	r18, 0x02	; 2
    4220:	09 f0       	breq	.+2      	; 0x4224 <__vector_29+0x3f6>
    4222:	75 ce       	rjmp	.-790    	; 0x3f0e <__vector_29+0xe0>
			PORTJ = 0xFF;
    4224:	8f ef       	ldi	r24, 0xFF	; 255
    4226:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    422a:	12 b8       	out	0x02, r1	; 2
    422c:	70 ce       	rjmp	.-800    	; 0x3f0e <__vector_29+0xe0>
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
    422e:	90 91 e6 04 	lds	r25, 0x04E6
    4232:	96 30       	cpi	r25, 0x06	; 6
    4234:	09 f4       	brne	.+2      	; 0x4238 <__vector_29+0x40a>
    4236:	a6 c2       	rjmp	.+1356   	; 0x4784 <__vector_29+0x956>
    4238:	97 30       	cpi	r25, 0x07	; 7
    423a:	08 f0       	brcs	.+2      	; 0x423e <__vector_29+0x410>
    423c:	ce c0       	rjmp	.+412    	; 0x43da <__vector_29+0x5ac>
    423e:	92 30       	cpi	r25, 0x02	; 2
    4240:	09 f4       	brne	.+2      	; 0x4244 <__vector_29+0x416>
    4242:	41 c2       	rjmp	.+1154   	; 0x46c6 <__vector_29+0x898>
    4244:	93 30       	cpi	r25, 0x03	; 3
    4246:	08 f4       	brcc	.+2      	; 0x424a <__vector_29+0x41c>
    4248:	78 c1       	rjmp	.+752    	; 0x453a <__vector_29+0x70c>
    424a:	94 30       	cpi	r25, 0x04	; 4
    424c:	09 f4       	brne	.+2      	; 0x4250 <__vector_29+0x422>
    424e:	8c c2       	rjmp	.+1304   	; 0x4768 <__vector_29+0x93a>
    4250:	95 30       	cpi	r25, 0x05	; 5
    4252:	08 f4       	brcc	.+2      	; 0x4256 <__vector_29+0x428>
    4254:	7b c2       	rjmp	.+1270   	; 0x474c <__vector_29+0x91e>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 5;
				break;

			case 5:
				currentAdChannel = currentProx+1;
    4256:	80 91 24 02 	lds	r24, 0x0224
    425a:	8f 5f       	subi	r24, 0xFF	; 255
    425c:	80 93 23 02 	sts	0x0223, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    4260:	86 e0       	ldi	r24, 0x06	; 6
    4262:	80 93 b9 02 	sts	0x02B9, r24
				irCommAdcRxState = 6;
    4266:	80 93 e6 04 	sts	0x04E6, r24
    426a:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    426e:	3d ce       	rjmp	.-902    	; 0x3eea <__vector_29+0xbc>
			right_current_avg += value;
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
			break;

		case SAVE_TO_RIGHT_MOTOR_VEL:
			if(firstSampleRight > 0) {
    4270:	20 91 09 02 	lds	r18, 0x0209
    4274:	22 23       	and	r18, r18
    4276:	09 f4       	brne	.+2      	; 0x427a <__vector_29+0x44c>
    4278:	6f ce       	rjmp	.-802    	; 0x3f58 <__vector_29+0x12a>
			    // sometimes it was noticed that the velocity is sampled even if the pwm
			    // is in its active phase; as a workaround simply skip the samples in these
			    // cases
				if(((PINE & _BV(PE3))>>3) || ((PINE & _BV(PE4))>>4)) {  // if active phase for either forward or backward direction
    427a:	63 99       	sbic	0x0c, 3	; 12
    427c:	6d ce       	rjmp	.-806    	; 0x3f58 <__vector_29+0x12a>
    427e:	64 99       	sbic	0x0c, 4	; 12
    4280:	6b ce       	rjmp	.-810    	; 0x3f58 <__vector_29+0x12a>
					//LED_RED_ON;
					break;
				}
				firstSampleRight++;
    4282:	42 2f       	mov	r20, r18
    4284:	4f 5f       	subi	r20, 0xFF	; 255
    4286:	40 93 09 02 	sts	0x0209, r20
				if(firstSampleRight > 4) {				// to skip undesired samples (3 samples skipped) in which there could be glitches
    428a:	45 30       	cpi	r20, 0x05	; 5
    428c:	08 f4       	brcc	.+2      	; 0x4290 <__vector_29+0x462>
    428e:	64 ce       	rjmp	.-824    	; 0x3f58 <__vector_29+0x12a>
					if(pwm_right != 0) {
    4290:	20 91 f5 02 	lds	r18, 0x02F5
    4294:	30 91 f6 02 	lds	r19, 0x02F6
    4298:	21 15       	cp	r18, r1
    429a:	31 05       	cpc	r19, r1
    429c:	51 f0       	breq	.+20     	; 0x42b2 <__vector_29+0x484>
						right_vel_sum += value;
    429e:	20 91 ef 02 	lds	r18, 0x02EF
    42a2:	30 91 f0 02 	lds	r19, 0x02F0
    42a6:	28 0f       	add	r18, r24
    42a8:	39 1f       	adc	r19, r25
    42aa:	30 93 f0 02 	sts	0x02F0, r19
    42ae:	20 93 ef 02 	sts	0x02EF, r18
					}
					if(firstSampleRight==8) {			// number of samples to take for the speed computation (average of 4 samples)
    42b2:	48 30       	cpi	r20, 0x08	; 8
    42b4:	09 f0       	breq	.+2      	; 0x42b8 <__vector_29+0x48a>
    42b6:	50 ce       	rjmp	.-864    	; 0x3f58 <__vector_29+0x12a>
						firstSampleRight = 0;
    42b8:	10 92 09 02 	sts	0x0209, r1
						compute_right_vel = 1;
    42bc:	81 e0       	ldi	r24, 0x01	; 1
    42be:	80 93 08 02 	sts	0x0208, r24
    42c2:	4a ce       	rjmp	.-876    	; 0x3f58 <__vector_29+0x12a>
			left_current_avg += value;
			left_current_avg = left_current_avg >> 1;
			break;

		case SAVE_TO_LEFT_MOTOR_VEL:
			if(firstSampleLeft > 0) {
    42c4:	20 91 0a 02 	lds	r18, 0x020A
    42c8:	22 23       	and	r18, r18
    42ca:	09 f4       	brne	.+2      	; 0x42ce <__vector_29+0x4a0>
    42cc:	45 ce       	rjmp	.-886    	; 0x3f58 <__vector_29+0x12a>
				if(((PINH & _BV(PH3))>>3) || ((PINH & _BV(PH4))>>4)) {
    42ce:	30 91 00 01 	lds	r19, 0x0100
    42d2:	33 fd       	sbrc	r19, 3
    42d4:	41 ce       	rjmp	.-894    	; 0x3f58 <__vector_29+0x12a>
    42d6:	30 91 00 01 	lds	r19, 0x0100
    42da:	34 fd       	sbrc	r19, 4
    42dc:	3d ce       	rjmp	.-902    	; 0x3f58 <__vector_29+0x12a>
					//LED_RED_ON;
					break;
				}
				firstSampleLeft++;
    42de:	42 2f       	mov	r20, r18
    42e0:	4f 5f       	subi	r20, 0xFF	; 255
    42e2:	40 93 0a 02 	sts	0x020A, r20
				if(firstSampleLeft > 4) {
    42e6:	45 30       	cpi	r20, 0x05	; 5
    42e8:	08 f4       	brcc	.+2      	; 0x42ec <__vector_29+0x4be>
    42ea:	36 ce       	rjmp	.-916    	; 0x3f58 <__vector_29+0x12a>
					if(pwm_left != 0) {
    42ec:	20 91 f7 02 	lds	r18, 0x02F7
    42f0:	30 91 f8 02 	lds	r19, 0x02F8
    42f4:	21 15       	cp	r18, r1
    42f6:	31 05       	cpc	r19, r1
    42f8:	51 f0       	breq	.+20     	; 0x430e <__vector_29+0x4e0>
						left_vel_sum += value;
    42fa:	20 91 ed 02 	lds	r18, 0x02ED
    42fe:	30 91 ee 02 	lds	r19, 0x02EE
    4302:	28 0f       	add	r18, r24
    4304:	39 1f       	adc	r19, r25
    4306:	30 93 ee 02 	sts	0x02EE, r19
    430a:	20 93 ed 02 	sts	0x02ED, r18
					}
					if(firstSampleLeft==8) {
    430e:	48 30       	cpi	r20, 0x08	; 8
    4310:	09 f0       	breq	.+2      	; 0x4314 <__vector_29+0x4e6>
    4312:	22 ce       	rjmp	.-956    	; 0x3f58 <__vector_29+0x12a>
						firstSampleLeft = 0;
    4314:	10 92 0a 02 	sts	0x020A, r1
						compute_left_vel = 1;
    4318:	81 e0       	ldi	r24, 0x01	; 1
    431a:	80 93 07 02 	sts	0x0207, r24
    431e:	1c ce       	rjmp	.-968    	; 0x3f58 <__vector_29+0x12a>
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
		switch(irCommAdcTxState) {
    4320:	83 30       	cpi	r24, 0x03	; 3
    4322:	09 f4       	brne	.+2      	; 0x4326 <__vector_29+0x4f8>
    4324:	7c c0       	rjmp	.+248    	; 0x441e <__vector_29+0x5f0>
    4326:	84 30       	cpi	r24, 0x04	; 4
    4328:	09 f0       	breq	.+2      	; 0x432c <__vector_29+0x4fe>
    432a:	dd cd       	rjmp	.-1094   	; 0x3ee6 <__vector_29+0xb8>
				}
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ2;
				break;

			case IRCOMM_TX_ADC_TRANSMISSION_SEQ2:
				irCommTxDurationCycle++;
    432c:	20 91 12 05 	lds	r18, 0x0512
    4330:	2f 5f       	subi	r18, 0xFF	; 255
    4332:	20 93 12 05 	sts	0x0512, r18
				if(irCommTxDurationCycle == irCommTxDuration) {
    4336:	30 e0       	ldi	r19, 0x00	; 0
    4338:	80 91 0e 05 	lds	r24, 0x050E
    433c:	90 91 0f 05 	lds	r25, 0x050F
    4340:	28 17       	cp	r18, r24
    4342:	39 07       	cpc	r19, r25
    4344:	09 f4       	brne	.+2      	; 0x4348 <__vector_29+0x51a>
    4346:	3b c1       	rjmp	.+630    	; 0x45be <__vector_29+0x790>
						}
						adcSaveDataTo = SKIP_SAMPLE;
						break;
					}
				}
				currentAdChannel = currentMotLeftChannel;
    4348:	80 91 25 02 	lds	r24, 0x0225
    434c:	80 93 23 02 	sts	0x0223, r24
				leftChannelPhase = leftMotorPhase;
    4350:	80 91 28 02 	lds	r24, 0x0228
    4354:	80 93 bc 02 	sts	0x02BC, r24
				if(rightChannelPhase == ACTIVE_PHASE) {
    4358:	80 91 bb 02 	lds	r24, 0x02BB
    435c:	88 23       	and	r24, r24
    435e:	09 f4       	brne	.+2      	; 0x4362 <__vector_29+0x534>
    4360:	d9 c0       	rjmp	.+434    	; 0x4514 <__vector_29+0x6e6>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    4362:	81 30       	cpi	r24, 0x01	; 1
    4364:	09 f4       	brne	.+2      	; 0x4368 <__vector_29+0x53a>
    4366:	bf c2       	rjmp	.+1406   	; 0x48e6 <__vector_29+0xab8>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4368:	85 e0       	ldi	r24, 0x05	; 5
    436a:	80 93 b9 02 	sts	0x02B9, r24
				}
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ1;
    436e:	83 e0       	ldi	r24, 0x03	; 3
    4370:	80 93 04 05 	sts	0x0504, r24
    4374:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    4378:	b8 cd       	rjmp	.-1168   	; 0x3eea <__vector_29+0xbc>
				adcSaveDataTo = SKIP_SAMPLE;
				break;

		}
	} else if(irCommMode==IRCOMM_MODE_SENSORS_SAMPLING) {
		switch(adcSamplingState) {
    437a:	83 30       	cpi	r24, 0x03	; 3
    437c:	09 f4       	brne	.+2      	; 0x4380 <__vector_29+0x552>
    437e:	3b c1       	rjmp	.+630    	; 0x45f6 <__vector_29+0x7c8>
    4380:	84 30       	cpi	r24, 0x04	; 4
    4382:	09 f0       	breq	.+2      	; 0x4386 <__vector_29+0x558>
    4384:	b2 cd       	rjmp	.-1180   	; 0x3eea <__vector_29+0xbc>
				}
				adcSamplingState = 4;
				break;

			case 4:	// right motor
				currentAdChannel = currentMotRightChannel;
    4386:	90 91 26 02 	lds	r25, 0x0226
    438a:	90 93 23 02 	sts	0x0223, r25
				rightChannelPhase = rightMotorPhase;
    438e:	90 91 27 02 	lds	r25, 0x0227
    4392:	90 93 bb 02 	sts	0x02BB, r25
				if(leftChannelPhase == ACTIVE_PHASE) {
    4396:	90 91 bc 02 	lds	r25, 0x02BC
    439a:	99 23       	and	r25, r25
    439c:	09 f0       	breq	.+2      	; 0x43a0 <__vector_29+0x572>
    439e:	67 c1       	rjmp	.+718    	; 0x466e <__vector_29+0x840>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    43a0:	83 e0       	ldi	r24, 0x03	; 3
    43a2:	80 93 b9 02 	sts	0x02B9, r24
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 0;
    43a6:	10 92 ba 02 	sts	0x02BA, r1

				if(currentProx==14 && measBattery==1) {
    43aa:	60 91 24 02 	lds	r22, 0x0224
    43ae:	6e 30       	cpi	r22, 0x0E	; 14
    43b0:	09 f4       	brne	.+2      	; 0x43b4 <__vector_29+0x586>
    43b2:	30 c2       	rjmp	.+1120   	; 0x4814 <__vector_29+0x9e6>
					measBattery=2;
					SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
				}

				// turn on the IR pulses for the proximities only in their active phases
				if(currentProx & 0x01) {
    43b4:	86 2f       	mov	r24, r22
    43b6:	90 e0       	ldi	r25, 0x00	; 0
    43b8:	60 ff       	sbrs	r22, 0
    43ba:	95 cd       	rjmp	.-1238   	; 0x3ee6 <__vector_29+0xb8>
					if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
    43bc:	60 31       	cpi	r22, 0x10	; 16
    43be:	08 f0       	brcs	.+2      	; 0x43c2 <__vector_29+0x594>
    43c0:	48 c2       	rjmp	.+1168   	; 0x4852 <__vector_29+0xa24>
											// PORTA for proximity sensors, PORTJ for ground sensors
						PORTA = (1 << (currentProx>>1));	// pulse on
    43c2:	66 95       	lsr	r22
    43c4:	81 e0       	ldi	r24, 0x01	; 1
    43c6:	90 e0       	ldi	r25, 0x00	; 0
    43c8:	02 c0       	rjmp	.+4      	; 0x43ce <__vector_29+0x5a0>
    43ca:	88 0f       	add	r24, r24
    43cc:	99 1f       	adc	r25, r25
    43ce:	6a 95       	dec	r22
    43d0:	e2 f7       	brpl	.-8      	; 0x43ca <__vector_29+0x59c>
    43d2:	82 b9       	out	0x02, r24	; 2
    43d4:	80 91 ba 02 	lds	r24, 0x02BA
    43d8:	88 cd       	rjmp	.-1264   	; 0x3eea <__vector_29+0xbc>
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
    43da:	99 30       	cpi	r25, 0x09	; 9
    43dc:	09 f4       	brne	.+2      	; 0x43e0 <__vector_29+0x5b2>
    43de:	9e c1       	rjmp	.+828    	; 0x471c <__vector_29+0x8ee>
    43e0:	9a 30       	cpi	r25, 0x0A	; 10
    43e2:	08 f0       	brcs	.+2      	; 0x43e6 <__vector_29+0x5b8>
    43e4:	9b c0       	rjmp	.+310    	; 0x451c <__vector_29+0x6ee>
    43e6:	97 30       	cpi	r25, 0x07	; 7
    43e8:	09 f4       	brne	.+2      	; 0x43ec <__vector_29+0x5be>
    43ea:	7b c1       	rjmp	.+758    	; 0x46e2 <__vector_29+0x8b4>
    43ec:	98 30       	cpi	r25, 0x08	; 8
    43ee:	09 f0       	breq	.+2      	; 0x43f2 <__vector_29+0x5c4>
    43f0:	7a cd       	rjmp	.-1292   	; 0x3ee6 <__vector_29+0xb8>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 8;
				break;

			case 8:
				currentAdChannel = currentMotRightChannel;
    43f2:	80 91 26 02 	lds	r24, 0x0226
    43f6:	80 93 23 02 	sts	0x0223, r24
				rightChannelPhase = rightMotorPhase;
    43fa:	80 91 27 02 	lds	r24, 0x0227
    43fe:	80 93 bb 02 	sts	0x02BB, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    4402:	80 91 bc 02 	lds	r24, 0x02BC
    4406:	88 23       	and	r24, r24
    4408:	09 f0       	breq	.+2      	; 0x440c <__vector_29+0x5de>
    440a:	7c c2       	rjmp	.+1272   	; 0x4904 <__vector_29+0xad6>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    440c:	83 e0       	ldi	r24, 0x03	; 3
    440e:	80 93 b9 02 	sts	0x02B9, r24
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				irCommAdcRxState = 9;
    4412:	89 e0       	ldi	r24, 0x09	; 9
    4414:	80 93 e6 04 	sts	0x04E6, r24
    4418:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    441c:	66 cd       	rjmp	.-1332   	; 0x3eea <__vector_29+0xbc>

			case IRCOMM_TX_ADC_WAIT_PREPARATION:
				break;

			case IRCOMM_TX_ADC_TRANSMISSION_SEQ1:
				irCommTxDurationCycle++;
    441e:	20 91 12 05 	lds	r18, 0x0512
    4422:	2f 5f       	subi	r18, 0xFF	; 255
    4424:	20 93 12 05 	sts	0x0512, r18
				if(irCommTxDurationCycle == irCommTxDuration) {
    4428:	30 e0       	ldi	r19, 0x00	; 0
    442a:	80 91 0e 05 	lds	r24, 0x050E
    442e:	90 91 0f 05 	lds	r25, 0x050F
    4432:	28 17       	cp	r18, r24
    4434:	39 07       	cpc	r19, r25
    4436:	09 f4       	brne	.+2      	; 0x443a <__vector_29+0x60c>
    4438:	99 c0       	rjmp	.+306    	; 0x456c <__vector_29+0x73e>
						}						
						adcSaveDataTo = SKIP_SAMPLE;
						break;
					}
				}	
				currentAdChannel = currentMotRightChannel;
    443a:	80 91 26 02 	lds	r24, 0x0226
    443e:	80 93 23 02 	sts	0x0223, r24
				rightChannelPhase = rightMotorPhase;
    4442:	80 91 27 02 	lds	r24, 0x0227
    4446:	80 93 bb 02 	sts	0x02BB, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    444a:	80 91 bc 02 	lds	r24, 0x02BC
    444e:	88 23       	and	r24, r24
    4450:	09 f4       	brne	.+2      	; 0x4454 <__vector_29+0x626>
    4452:	5c c0       	rjmp	.+184    	; 0x450c <__vector_29+0x6de>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    4454:	81 30       	cpi	r24, 0x01	; 1
    4456:	09 f4       	brne	.+2      	; 0x445a <__vector_29+0x62c>
    4458:	51 c2       	rjmp	.+1186   	; 0x48fc <__vector_29+0xace>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    445a:	85 e0       	ldi	r24, 0x05	; 5
    445c:	80 93 b9 02 	sts	0x02B9, r24
				}
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ2;
    4460:	84 e0       	ldi	r24, 0x04	; 4
    4462:	80 93 04 05 	sts	0x0504, r24
    4466:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    446a:	3f cd       	rjmp	.-1410   	; 0x3eea <__vector_29+0xbc>
	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
		switch(irCommAdcTxState) {
			case IRCOMM_TX_ADC_TURN_OFF_SENSORS:
				// turn off all proximity
				if(hardwareRevision == HW_REV_3_0) {
    446c:	20 91 4f 04 	lds	r18, 0x044F
    4470:	22 23       	and	r18, r18
    4472:	51 f5       	brne	.+84     	; 0x44c8 <__vector_29+0x69a>
					PORTJ &= 0xF0;	// ground
    4474:	80 91 05 01 	lds	r24, 0x0105
    4478:	80 7f       	andi	r24, 0xF0	; 240
    447a:	80 93 05 01 	sts	0x0105, r24
					PORTA = 0x00;	// proximity
    447e:	12 b8       	out	0x02, r1	; 2

				if(hardwareRevision == HW_REV_3_1) {
					PORTJ = 0xFF;	// ground
					PORTA = 0x00;	// proximtiy
				}
				currentAdChannel = currentMotLeftChannel;
    4480:	80 91 25 02 	lds	r24, 0x0225
    4484:	80 93 23 02 	sts	0x0223, r24
				leftChannelPhase = leftMotorPhase;
    4488:	80 91 28 02 	lds	r24, 0x0228
    448c:	80 93 bc 02 	sts	0x02BC, r24
				adcSaveDataTo = SKIP_SAMPLE;				
    4490:	85 e0       	ldi	r24, 0x05	; 5
    4492:	80 93 b9 02 	sts	0x02B9, r24
				irCommState = IRCOMM_TX_PREPARE_TRANSMISSION;
    4496:	80 93 c6 04 	sts	0x04C6, r24
				irCommTxWaitStartTime = getTime100MicroSec();
    449a:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <getTime100MicroSec>
    449e:	60 93 07 05 	sts	0x0507, r22
    44a2:	70 93 08 05 	sts	0x0508, r23
    44a6:	80 93 09 05 	sts	0x0509, r24
    44aa:	90 93 0a 05 	sts	0x050A, r25
				irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;
    44ae:	82 e0       	ldi	r24, 0x02	; 2
    44b0:	80 93 04 05 	sts	0x0504, r24
				if(irCommTxSensorGroup==0) {
    44b4:	80 91 14 05 	lds	r24, 0x0514
    44b8:	88 23       	and	r24, r24
    44ba:	19 f5       	brne	.+70     	; 0x4502 <__vector_29+0x6d4>
					irCommTxSensorGroup = 1;
    44bc:	81 e0       	ldi	r24, 0x01	; 1
    44be:	80 93 14 05 	sts	0x0514, r24
    44c2:	80 91 ba 02 	lds	r24, 0x02BA
    44c6:	11 cd       	rjmp	.-1502   	; 0x3eea <__vector_29+0xbc>
				if(hardwareRevision == HW_REV_3_0) {
					PORTJ &= 0xF0;	// ground
					PORTA = 0x00;	// proximity
				}

				if(hardwareRevision == HW_REV_3_0_1) {
    44c8:	21 30       	cpi	r18, 0x01	; 1
    44ca:	11 f0       	breq	.+4      	; 0x44d0 <__vector_29+0x6a2>
					PORTJ = 0xFF;	// ground
					PORTA = 0x00;	// proximity
				}

				if(hardwareRevision == HW_REV_3_1) {
    44cc:	22 30       	cpi	r18, 0x02	; 2
    44ce:	c1 f6       	brne	.-80     	; 0x4480 <__vector_29+0x652>
					PORTJ = 0xFF;	// ground
    44d0:	8f ef       	ldi	r24, 0xFF	; 255
    44d2:	80 93 05 01 	sts	0x0105, r24
					PORTA = 0x00;	// proximtiy
    44d6:	12 b8       	out	0x02, r1	; 2
    44d8:	d3 cf       	rjmp	.-90     	; 0x4480 <__vector_29+0x652>
		}
	} else if(irCommMode==IRCOMM_MODE_SENSORS_SAMPLING) {
		switch(adcSamplingState) {

			case 0:	// proximity
				currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
    44da:	80 91 24 02 	lds	r24, 0x0224
    44de:	86 95       	lsr	r24
    44e0:	80 93 23 02 	sts	0x0223, r24
																// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
				if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
    44e4:	80 91 bb 02 	lds	r24, 0x02BB
    44e8:	88 23       	and	r24, r24
    44ea:	09 f0       	breq	.+2      	; 0x44ee <__vector_29+0x6c0>
    44ec:	b9 c0       	rjmp	.+370    	; 0x4660 <__vector_29+0x832>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    44ee:	81 e0       	ldi	r24, 0x01	; 1
    44f0:	80 93 b9 02 	sts	0x02B9, r24
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 1;
    44f4:	81 e0       	ldi	r24, 0x01	; 1
    44f6:	80 93 ba 02 	sts	0x02BA, r24
				break;
    44fa:	f7 cc       	rjmp	.-1554   	; 0x3eea <__vector_29+0xbc>
					} else {
						cliffDetectedFlag = 0;
						//LED_RED_OFF;
					}
				} else {
					cliffDetectedFlag = 0;
    44fc:	10 92 6e 04 	sts	0x046E, r1
    4500:	1d ce       	rjmp	.-966    	; 0x413c <__vector_29+0x30e>
				irCommTxWaitStartTime = getTime100MicroSec();
				irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;
				if(irCommTxSensorGroup==0) {
					irCommTxSensorGroup = 1;
				} else {
					irCommTxSensorGroup = 0;
    4502:	10 92 14 05 	sts	0x0514, r1
    4506:	80 91 ba 02 	lds	r24, 0x02BA
    450a:	ef cc       	rjmp	.-1570   	; 0x3eea <__vector_29+0xbc>
					}
				}	
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    450c:	83 e0       	ldi	r24, 0x03	; 3
    450e:	80 93 b9 02 	sts	0x02B9, r24
    4512:	a6 cf       	rjmp	.-180    	; 0x4460 <__vector_29+0x632>
					}
				}
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    4514:	81 e0       	ldi	r24, 0x01	; 1
    4516:	80 93 b9 02 	sts	0x02B9, r24
    451a:	29 cf       	rjmp	.-430    	; 0x436e <__vector_29+0x540>
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
    451c:	9b 30       	cpi	r25, 0x0B	; 11
    451e:	09 f4       	brne	.+2      	; 0x4522 <__vector_29+0x6f4>
    4520:	68 c1       	rjmp	.+720    	; 0x47f2 <__vector_29+0x9c4>
    4522:	9b 30       	cpi	r25, 0x0B	; 11
    4524:	08 f4       	brcc	.+2      	; 0x4528 <__vector_29+0x6fa>
    4526:	3b c1       	rjmp	.+630    	; 0x479e <__vector_29+0x970>
    4528:	9c 30       	cpi	r25, 0x0C	; 12
    452a:	09 f0       	breq	.+2      	; 0x452e <__vector_29+0x700>
    452c:	dc cc       	rjmp	.-1608   	; 0x3ee6 <__vector_29+0xb8>
				}
				irCommAdcRxState = 0;
				break;

			case 12:
				adcSaveDataTo = SKIP_SAMPLE;
    452e:	85 e0       	ldi	r24, 0x05	; 5
    4530:	80 93 b9 02 	sts	0x02B9, r24
    4534:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    4538:	d8 cc       	rjmp	.-1616   	; 0x3eea <__vector_29+0xbc>
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
    453a:	99 23       	and	r25, r25
    453c:	09 f4       	brne	.+2      	; 0x4540 <__vector_29+0x712>
    453e:	e2 c0       	rjmp	.+452    	; 0x4704 <__vector_29+0x8d6>
    4540:	91 30       	cpi	r25, 0x01	; 1
    4542:	09 f0       	breq	.+2      	; 0x4546 <__vector_29+0x718>
    4544:	d0 cc       	rjmp	.-1632   	; 0x3ee6 <__vector_29+0xb8>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 1;
				break;

			case 1:
				currentAdChannel = currentProx+1;
    4546:	80 91 24 02 	lds	r24, 0x0224
    454a:	8f 5f       	subi	r24, 0xFF	; 255
    454c:	80 93 23 02 	sts	0x0223, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    4550:	86 e0       	ldi	r24, 0x06	; 6
    4552:	80 93 b9 02 	sts	0x02B9, r24
				irCommAdcRxState = 2;
    4556:	82 e0       	ldi	r24, 0x02	; 2
    4558:	80 93 e6 04 	sts	0x04E6, r24
    455c:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    4560:	c4 cc       	rjmp	.-1656   	; 0x3eea <__vector_29+0xbc>
					irCommMode = IRCOMM_MODE_RECEIVE;
				}
				if(irCommEnabled==IRCOMM_MODE_TRANSMIT_ONLY && currentProx==23) {
					irCommMode = IRCOMM_MODE_TRANSMIT;
					if(irCommTxByteEnqueued==1) {
						irCommAdcTxState = IRCOMM_TX_ADC_TURN_OFF_SENSORS;
    4562:	80 93 04 05 	sts	0x0504, r24
    4566:	80 91 ba 02 	lds	r24, 0x02BA
    456a:	bf cc       	rjmp	.-1666   	; 0x3eea <__vector_29+0xbc>
				break;

			case IRCOMM_TX_ADC_TRANSMISSION_SEQ1:
				irCommTxDurationCycle++;
				if(irCommTxDurationCycle == irCommTxDuration) {
					irCommTxDurationCycle = 0;
    456c:	10 92 12 05 	sts	0x0512, r1
					if(irCommTxPulseState == 0) {
    4570:	80 91 0d 05 	lds	r24, 0x050D
    4574:	88 23       	and	r24, r24
    4576:	09 f0       	breq	.+2      	; 0x457a <__vector_29+0x74c>
    4578:	b2 c1       	rjmp	.+868    	; 0x48de <__vector_29+0xab0>
						irCommTxPulseState = 1;
    457a:	81 e0       	ldi	r24, 0x01	; 1
    457c:	80 93 0d 05 	sts	0x050D, r24
						//PORTA = 0xFF;
						//PORTA = 0x01;
						//PORTA = irCommTxSensorMask;
						if(irCommTxSensorGroup==0) {
    4580:	80 91 14 05 	lds	r24, 0x0514
    4584:	88 23       	and	r24, r24
    4586:	09 f0       	breq	.+2      	; 0x458a <__vector_29+0x75c>
    4588:	ee c1       	rjmp	.+988    	; 0x4966 <__vector_29+0xb38>
							PORTA = 0xAA;
    458a:	8a ea       	ldi	r24, 0xAA	; 170
    458c:	82 b9       	out	0x02, r24	; 2
						}
					} else {
						irCommTxPulseState = 0;
						PORTA = 0x00;
					}
					irCommTxSwitchCounter++;
    458e:	80 91 11 05 	lds	r24, 0x0511
    4592:	8f 5f       	subi	r24, 0xFF	; 255
    4594:	80 93 11 05 	sts	0x0511, r24
					if(irCommTxSwitchCounter == irCommTxSwitchCount) {
    4598:	90 91 10 05 	lds	r25, 0x0510
    459c:	89 17       	cp	r24, r25
    459e:	09 f0       	breq	.+2      	; 0x45a2 <__vector_29+0x774>
    45a0:	4c cf       	rjmp	.-360    	; 0x443a <__vector_29+0x60c>
						irCommTxPulseState = 0;
						PORTA = 0x00;
					}
					irCommTxSwitchCounter++;
					if(irCommTxSwitchCounter == irCommTxSwitchCount) {
						irCommTxBitCount++;
    45a2:	80 91 0c 05 	lds	r24, 0x050C
    45a6:	8f 5f       	subi	r24, 0xFF	; 255
    45a8:	80 93 0c 05 	sts	0x050C, r24
						if(irCommTxBitCount==12) {
    45ac:	8c 30       	cpi	r24, 0x0C	; 12
    45ae:	09 f4       	brne	.+2      	; 0x45b2 <__vector_29+0x784>
    45b0:	e2 c1       	rjmp	.+964    	; 0x4976 <__vector_29+0xb48>
								adcSamplingState = 0;
								irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
							}
							PORTA = 0x00;
						} else {
							irCommState = IRCOMM_TX_COMPUTE_TIMINGS;
    45b2:	82 e0       	ldi	r24, 0x02	; 2
    45b4:	80 93 c6 04 	sts	0x04C6, r24
						}
						irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;
    45b8:	80 93 04 05 	sts	0x0504, r24
    45bc:	b8 cf       	rjmp	.-144    	; 0x452e <__vector_29+0x700>
				break;

			case IRCOMM_TX_ADC_TRANSMISSION_SEQ2:
				irCommTxDurationCycle++;
				if(irCommTxDurationCycle == irCommTxDuration) {
					irCommTxDurationCycle = 0;
    45be:	10 92 12 05 	sts	0x0512, r1
					if(irCommTxPulseState == 0) {
    45c2:	80 91 0d 05 	lds	r24, 0x050D
    45c6:	88 23       	and	r24, r24
    45c8:	09 f0       	breq	.+2      	; 0x45cc <__vector_29+0x79e>
    45ca:	85 c1       	rjmp	.+778    	; 0x48d6 <__vector_29+0xaa8>
						irCommTxPulseState = 1;
    45cc:	81 e0       	ldi	r24, 0x01	; 1
    45ce:	80 93 0d 05 	sts	0x050D, r24
						//PORTA = 0xFF;
						//PORTA = 0x01;
						//PORTA = irCommTxSensorMask;
						if(irCommTxSensorGroup==0) {
    45d2:	80 91 14 05 	lds	r24, 0x0514
    45d6:	88 23       	and	r24, r24
    45d8:	09 f0       	breq	.+2      	; 0x45dc <__vector_29+0x7ae>
    45da:	c2 c1       	rjmp	.+900    	; 0x4960 <__vector_29+0xb32>
							PORTA = 0xAA;
    45dc:	8a ea       	ldi	r24, 0xAA	; 170
    45de:	82 b9       	out	0x02, r24	; 2
						}
					} else {
						irCommTxPulseState = 0;
						PORTA = 0x00;
					}
					irCommTxSwitchCounter++;
    45e0:	80 91 11 05 	lds	r24, 0x0511
    45e4:	8f 5f       	subi	r24, 0xFF	; 255
    45e6:	80 93 11 05 	sts	0x0511, r24
					if(irCommTxSwitchCounter == irCommTxSwitchCount) {
    45ea:	90 91 10 05 	lds	r25, 0x0510
    45ee:	89 17       	cp	r24, r25
    45f0:	09 f0       	breq	.+2      	; 0x45f4 <__vector_29+0x7c6>
    45f2:	aa ce       	rjmp	.-684    	; 0x4348 <__vector_29+0x51a>
    45f4:	d6 cf       	rjmp	.-84     	; 0x45a2 <__vector_29+0x774>
				}
				adcSamplingState = 3;
				break;

			case 3:	// left motor
				currentAdChannel = currentMotLeftChannel;
    45f6:	80 91 25 02 	lds	r24, 0x0225
    45fa:	80 93 23 02 	sts	0x0223, r24
				leftChannelPhase = leftMotorPhase;
    45fe:	80 91 28 02 	lds	r24, 0x0228
    4602:	80 93 bc 02 	sts	0x02BC, r24
				if(rightChannelPhase == ACTIVE_PHASE) {
    4606:	80 91 bb 02 	lds	r24, 0x02BB
    460a:	88 23       	and	r24, r24
    460c:	e9 f5       	brne	.+122    	; 0x4688 <__vector_29+0x85a>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    460e:	81 e0       	ldi	r24, 0x01	; 1
    4610:	80 93 b9 02 	sts	0x02B9, r24
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 4;
    4614:	84 e0       	ldi	r24, 0x04	; 4
    4616:	80 93 ba 02 	sts	0x02BA, r24
				break;
    461a:	67 cc       	rjmp	.-1842   	; 0x3eea <__vector_29+0xbc>
					}					
				}
				break;

			case 2:	// right motor
				currentAdChannel = currentMotRightChannel;
    461c:	80 91 26 02 	lds	r24, 0x0226
    4620:	80 93 23 02 	sts	0x0223, r24
				rightChannelPhase = rightMotorPhase;
    4624:	80 91 27 02 	lds	r24, 0x0227
    4628:	80 93 bb 02 	sts	0x02BB, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    462c:	80 91 bc 02 	lds	r24, 0x02BC
    4630:	88 23       	and	r24, r24
    4632:	19 f5       	brne	.+70     	; 0x467a <__vector_29+0x84c>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    4634:	83 e0       	ldi	r24, 0x03	; 3
    4636:	80 93 b9 02 	sts	0x02B9, r24
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 3;
    463a:	83 e0       	ldi	r24, 0x03	; 3
    463c:	80 93 ba 02 	sts	0x02BA, r24
				break;
    4640:	54 cc       	rjmp	.-1880   	; 0x3eea <__vector_29+0xbc>
			}
			currentProx++;
			break;

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    4642:	20 91 bf 02 	lds	r18, 0x02BF
    4646:	22 30       	cpi	r18, 0x02	; 2
    4648:	09 f0       	breq	.+2      	; 0x464c <__vector_29+0x81e>
    464a:	f5 cc       	rjmp	.-1558   	; 0x4036 <__vector_29+0x208>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
    464c:	90 93 be 02 	sts	0x02BE, r25
    4650:	80 93 bd 02 	sts	0x02BD, r24
				measBattery = 0;
    4654:	10 92 bf 02 	sts	0x02BF, r1
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
    4658:	46 98       	cbi	0x08, 6	; 8
    465a:	2e e0       	ldi	r18, 0x0E	; 14
    465c:	30 e0       	ldi	r19, 0x00	; 0
    465e:	f4 cc       	rjmp	.-1560   	; 0x4048 <__vector_29+0x21a>
			case 0:	// proximity
				currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
																// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
				if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    4660:	81 30       	cpi	r24, 0x01	; 1
    4662:	09 f4       	brne	.+2      	; 0x4666 <__vector_29+0x838>
    4664:	5a c1       	rjmp	.+692    	; 0x491a <__vector_29+0xaec>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4666:	85 e0       	ldi	r24, 0x05	; 5
    4668:	80 93 b9 02 	sts	0x02B9, r24
    466c:	43 cf       	rjmp	.-378    	; 0x44f4 <__vector_29+0x6c6>
			case 4:	// right motor
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    466e:	91 30       	cpi	r25, 0x01	; 1
    4670:	09 f0       	breq	.+2      	; 0x4674 <__vector_29+0x846>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4672:	85 e0       	ldi	r24, 0x05	; 5
    4674:	80 93 b9 02 	sts	0x02B9, r24
    4678:	96 ce       	rjmp	.-724    	; 0x43a6 <__vector_29+0x578>
			case 2:	// right motor
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    467a:	81 30       	cpi	r24, 0x01	; 1
    467c:	09 f4       	brne	.+2      	; 0x4680 <__vector_29+0x852>
    467e:	51 c1       	rjmp	.+674    	; 0x4922 <__vector_29+0xaf4>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4680:	85 e0       	ldi	r24, 0x05	; 5
    4682:	80 93 b9 02 	sts	0x02B9, r24
    4686:	d9 cf       	rjmp	.-78     	; 0x463a <__vector_29+0x80c>
			case 3:	// left motor
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    4688:	81 30       	cpi	r24, 0x01	; 1
    468a:	09 f4       	brne	.+2      	; 0x468e <__vector_29+0x860>
    468c:	42 c1       	rjmp	.+644    	; 0x4912 <__vector_29+0xae4>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    468e:	85 e0       	ldi	r24, 0x05	; 5
    4690:	80 93 b9 02 	sts	0x02B9, r24
    4694:	bf cf       	rjmp	.-130    	; 0x4614 <__vector_29+0x7e6>
					proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
				//} else {	// ground
				//	proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx];
				//}
				if(proximityResult[currentProx>>1] < 0) {
					proximityResult[currentProx>>1] = 0;
    4696:	11 82       	std	Z+1, r1	; 0x01
    4698:	10 82       	st	Z, r1
    469a:	80 e0       	ldi	r24, 0x00	; 0
    469c:	90 e0       	ldi	r25, 0x00	; 0
    469e:	01 cd       	rjmp	.-1534   	; 0x40a2 <__vector_29+0x274>
					
					if(proximityResult[currentProx>>1] < PHASE1) {

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
    46a0:	ac 01       	movw	r20, r24
    46a2:	44 5c       	subi	r20, 0xC4	; 196
    46a4:	5f 4f       	sbci	r21, 0xFF	; 255
    46a6:	55 95       	asr	r21
    46a8:	47 95       	ror	r20
    46aa:	48 37       	cpi	r20, 0x78	; 120
    46ac:	51 05       	cpc	r21, r1
    46ae:	0c f0       	brlt	.+2      	; 0x46b2 <__vector_29+0x884>
    46b0:	f9 c0       	rjmp	.+498    	; 0x48a4 <__vector_29+0xa76>
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;
    46b2:	2f 53       	subi	r18, 0x3F	; 63
    46b4:	3d 4f       	sbci	r19, 0xFD	; 253
    46b6:	cc 97       	sbiw	r24, 0x3c	; 60
    46b8:	95 95       	asr	r25
    46ba:	87 95       	ror	r24
    46bc:	cc 96       	adiw	r24, 0x3c	; 60
    46be:	f9 01       	movw	r30, r18
    46c0:	91 83       	std	Z+1, r25	; 0x01
    46c2:	80 83       	st	Z, r24
    46c4:	fa cc       	rjmp	.-1548   	; 0x40ba <__vector_29+0x28c>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 2;
				break;

			case 2:
				currentAdChannel = currentProx+1;
    46c6:	80 91 24 02 	lds	r24, 0x0224
    46ca:	8f 5f       	subi	r24, 0xFF	; 255
    46cc:	80 93 23 02 	sts	0x0223, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    46d0:	86 e0       	ldi	r24, 0x06	; 6
    46d2:	80 93 b9 02 	sts	0x02B9, r24
				irCommAdcRxState = 3;
    46d6:	83 e0       	ldi	r24, 0x03	; 3
    46d8:	80 93 e6 04 	sts	0x04E6, r24
    46dc:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    46e0:	04 cc       	rjmp	.-2040   	; 0x3eea <__vector_29+0xbc>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 7;
				break;

			case 7:
				currentAdChannel = currentMotLeftChannel;
    46e2:	80 91 25 02 	lds	r24, 0x0225
    46e6:	80 93 23 02 	sts	0x0223, r24
				leftChannelPhase = leftMotorPhase;
    46ea:	80 91 28 02 	lds	r24, 0x0228
    46ee:	80 93 bc 02 	sts	0x02BC, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    46f2:	86 e0       	ldi	r24, 0x06	; 6
    46f4:	80 93 b9 02 	sts	0x02B9, r24
				irCommAdcRxState = 8;
    46f8:	88 e0       	ldi	r24, 0x08	; 8
    46fa:	80 93 e6 04 	sts	0x04E6, r24
    46fe:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    4702:	f3 cb       	rjmp	.-2074   	; 0x3eea <__vector_29+0xbc>

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
			case 0:				
				currentProx = 0;
    4704:	10 92 24 02 	sts	0x0224, r1
				currentAdChannel = currentProx+1;				
    4708:	80 93 23 02 	sts	0x0223, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    470c:	96 e0       	ldi	r25, 0x06	; 6
    470e:	90 93 b9 02 	sts	0x02B9, r25
				irCommAdcRxState = 1;
    4712:	80 93 e6 04 	sts	0x04E6, r24
    4716:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    471a:	e7 cb       	rjmp	.-2098   	; 0x3eea <__vector_29+0xbc>
				}
				irCommAdcRxState = 9;
				break;

			case 9:
				currentAdChannel = currentMotLeftChannel;
    471c:	90 91 25 02 	lds	r25, 0x0225
    4720:	90 93 23 02 	sts	0x0223, r25
				leftChannelPhase = leftMotorPhase;
    4724:	90 91 28 02 	lds	r25, 0x0228
    4728:	90 93 bc 02 	sts	0x02BC, r25
				if(rightChannelPhase == ACTIVE_PHASE) {
    472c:	90 91 bb 02 	lds	r25, 0x02BB
    4730:	99 23       	and	r25, r25
    4732:	21 f0       	breq	.+8      	; 0x473c <__vector_29+0x90e>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    4734:	91 30       	cpi	r25, 0x01	; 1
    4736:	09 f4       	brne	.+2      	; 0x473a <__vector_29+0x90c>
    4738:	32 c1       	rjmp	.+612    	; 0x499e <__vector_29+0xb70>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    473a:	85 e0       	ldi	r24, 0x05	; 5
    473c:	80 93 b9 02 	sts	0x02B9, r24
				}
				irCommAdcRxState = 10;
    4740:	8a e0       	ldi	r24, 0x0A	; 10
    4742:	80 93 e6 04 	sts	0x04E6, r24
    4746:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    474a:	cf cb       	rjmp	.-2146   	; 0x3eea <__vector_29+0xbc>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 3;
				break;

			case 3:
				currentAdChannel = currentProx+1;
    474c:	80 91 24 02 	lds	r24, 0x0224
    4750:	8f 5f       	subi	r24, 0xFF	; 255
    4752:	80 93 23 02 	sts	0x0223, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    4756:	86 e0       	ldi	r24, 0x06	; 6
    4758:	80 93 b9 02 	sts	0x02B9, r24
				irCommAdcRxState = 4;
    475c:	84 e0       	ldi	r24, 0x04	; 4
    475e:	80 93 e6 04 	sts	0x04E6, r24
    4762:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    4766:	c1 cb       	rjmp	.-2174   	; 0x3eea <__vector_29+0xbc>

			case 4:
				currentAdChannel = currentProx+1;
    4768:	80 91 24 02 	lds	r24, 0x0224
    476c:	8f 5f       	subi	r24, 0xFF	; 255
    476e:	80 93 23 02 	sts	0x0223, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    4772:	86 e0       	ldi	r24, 0x06	; 6
    4774:	80 93 b9 02 	sts	0x02B9, r24
				irCommAdcRxState = 5;
    4778:	85 e0       	ldi	r24, 0x05	; 5
    477a:	80 93 e6 04 	sts	0x04E6, r24
    477e:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    4782:	b3 cb       	rjmp	.-2202   	; 0x3eea <__vector_29+0xbc>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 6;
				break;

			case 6:
				currentAdChannel = currentProx+1;
    4784:	80 91 24 02 	lds	r24, 0x0224
    4788:	8f 5f       	subi	r24, 0xFF	; 255
    478a:	80 93 23 02 	sts	0x0223, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    478e:	90 93 b9 02 	sts	0x02B9, r25
				irCommAdcRxState = 7;
    4792:	87 e0       	ldi	r24, 0x07	; 7
    4794:	80 93 e6 04 	sts	0x04E6, r24
    4798:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    479c:	a6 cb       	rjmp	.-2228   	; 0x3eea <__vector_29+0xbc>
				}
				irCommAdcRxState = 10;
				break;

			case 10:
				currentAdChannel = currentMotRightChannel;
    479e:	80 91 26 02 	lds	r24, 0x0226
    47a2:	80 93 23 02 	sts	0x0223, r24
				rightChannelPhase = rightMotorPhase;
    47a6:	80 91 27 02 	lds	r24, 0x0227
    47aa:	80 93 bb 02 	sts	0x02BB, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    47ae:	80 91 bc 02 	lds	r24, 0x02BC
    47b2:	88 23       	and	r24, r24
    47b4:	09 f0       	breq	.+2      	; 0x47b8 <__vector_29+0x98a>
    47b6:	9b c0       	rjmp	.+310    	; 0x48ee <__vector_29+0xac0>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    47b8:	83 e0       	ldi	r24, 0x03	; 3
    47ba:	80 93 b9 02 	sts	0x02B9, r24
					}
				} else {
					irCommRxWindowSamples++;
				}
				*/
				if(irCommRxBitSkipped < 254) {	// safety check
    47be:	90 91 00 05 	lds	r25, 0x0500
    47c2:	9e 3f       	cpi	r25, 0xFE	; 254
    47c4:	18 f4       	brcc	.+6      	; 0x47cc <__vector_29+0x99e>
					irCommRxBitSkipped++;
    47c6:	9f 5f       	subi	r25, 0xFF	; 255
    47c8:	90 93 00 05 	sts	0x0500, r25
				}
				irCommRxWindowSamples++;
    47cc:	80 91 e7 04 	lds	r24, 0x04E7
    47d0:	8f 5f       	subi	r24, 0xFF	; 255
    47d2:	80 93 e7 04 	sts	0x04E7, r24
				if(irCommState==IRCOMM_RX_SYNC_SIGNAL) {
    47d6:	20 91 c6 04 	lds	r18, 0x04C6
    47da:	24 30       	cpi	r18, 0x04	; 4
    47dc:	09 f4       	brne	.+2      	; 0x47e0 <__vector_29+0x9b2>
    47de:	b5 c0       	rjmp	.+362    	; 0x494a <__vector_29+0xb1c>
					if(irCommRxBitSkipped >= irCommShiftCount) {
						irCommState = IRCOMM_RX_WAITING_BIT;
					}
				}

				if(irCommRxWindowSamples == IRCOMM_SAMPLING_WINDOW) {					
    47e0:	84 31       	cpi	r24, 0x14	; 20
    47e2:	09 f4       	brne	.+2      	; 0x47e6 <__vector_29+0x9b8>
    47e4:	e8 c0       	rjmp	.+464    	; 0x49b6 <__vector_29+0xb88>
				} else {
					irCommTickCounter = 0;
					updateBlueLed(0);
				}
				*/
				irCommAdcRxState = 11;
    47e6:	8b e0       	ldi	r24, 0x0B	; 11
    47e8:	80 93 e6 04 	sts	0x04E6, r24
    47ec:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    47f0:	7c cb       	rjmp	.-2312   	; 0x3eea <__vector_29+0xbc>

			case 11:
				currentAdChannel = 0;	// prox0
    47f2:	10 92 23 02 	sts	0x0223, r1
				if(rightChannelPhase == ACTIVE_PHASE) {
    47f6:	90 91 bb 02 	lds	r25, 0x02BB
    47fa:	99 23       	and	r25, r25
    47fc:	21 f0       	breq	.+8      	; 0x4806 <__vector_29+0x9d8>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    47fe:	91 30       	cpi	r25, 0x01	; 1
    4800:	09 f4       	brne	.+2      	; 0x4804 <__vector_29+0x9d6>
    4802:	2d c1       	rjmp	.+602    	; 0x4a5e <__vector_29+0xc30>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4804:	85 e0       	ldi	r24, 0x05	; 5
    4806:	80 93 b9 02 	sts	0x02B9, r24
				}
				irCommAdcRxState = 0;
    480a:	10 92 e6 04 	sts	0x04E6, r1
    480e:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    4812:	6b cb       	rjmp	.-2346   	; 0x3eea <__vector_29+0xbc>
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 0;

				if(currentProx==14 && measBattery==1) {
    4814:	80 91 bf 02 	lds	r24, 0x02BF
    4818:	81 30       	cpi	r24, 0x01	; 1
    481a:	09 f4       	brne	.+2      	; 0x481e <__vector_29+0x9f0>
    481c:	a7 c0       	rjmp	.+334    	; 0x496c <__vector_29+0xb3e>
    481e:	80 e0       	ldi	r24, 0x00	; 0
    4820:	64 cb       	rjmp	.-2360   	; 0x3eea <__vector_29+0xbc>
					irCommRxWindowSamples = 0;
					memset(irCommMaxSensorValueAdc, 0x00, 16);
					memset(irCommMinSensorValueAdc, 0xFF, 16);
					irCommMode = IRCOMM_MODE_RECEIVE;
				}
				if(irCommEnabled==IRCOMM_MODE_TRANSMIT && currentProx==23) {
    4822:	80 91 24 02 	lds	r24, 0x0224
    4826:	87 31       	cpi	r24, 0x17	; 23
    4828:	09 f0       	breq	.+2      	; 0x482c <__vector_29+0x9fe>
    482a:	5d cb       	rjmp	.-2374   	; 0x3ee6 <__vector_29+0xb8>
					irCommMode = IRCOMM_MODE_TRANSMIT;
    482c:	10 93 c5 04 	sts	0x04C5, r17
					if(irCommTxByteEnqueued==1) {
    4830:	80 91 06 05 	lds	r24, 0x0506
    4834:	81 30       	cpi	r24, 0x01	; 1
    4836:	09 f4       	brne	.+2      	; 0x483a <__vector_29+0xa0c>
    4838:	94 ce       	rjmp	.-728    	; 0x4562 <__vector_29+0x734>
						irCommAdcTxState = IRCOMM_TX_ADC_TURN_OFF_SENSORS;
					} else {
						irCommMode=IRCOMM_MODE_SENSORS_SAMPLING; // no data to be transmitted, restart sensors sampling
    483a:	10 92 c5 04 	sts	0x04C5, r1
    483e:	80 91 ba 02 	lds	r24, 0x02BA
    4842:	53 cb       	rjmp	.-2394   	; 0x3eea <__vector_29+0xbc>
			case 1:	// left motor
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				adcSaveDataTo = SAVE_TO_PROX;
				adcSamplingState = 2;
				if(irCommEnabled==IRCOMM_MODE_RECEIVE && currentProx==23) {					
    4844:	80 91 24 02 	lds	r24, 0x0224
    4848:	87 31       	cpi	r24, 0x17	; 23
    484a:	09 f4       	brne	.+2      	; 0x484e <__vector_29+0xa20>
    484c:	0c c1       	rjmp	.+536    	; 0x4a66 <__vector_29+0xc38>
    484e:	82 e0       	ldi	r24, 0x02	; 2
    4850:	4c cb       	rjmp	.-2408   	; 0x3eea <__vector_29+0xbc>
				if(currentProx & 0x01) {
					if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
											// PORTA for proximity sensors, PORTJ for ground sensors
						PORTA = (1 << (currentProx>>1));	// pulse on
					} else {
						if(hardwareRevision == HW_REV_3_0) {
    4852:	20 91 4f 04 	lds	r18, 0x044F
    4856:	22 23       	and	r18, r18
    4858:	79 f4       	brne	.+30     	; 0x4878 <__vector_29+0xa4a>
							PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
    485a:	40 97       	sbiw	r24, 0x10	; 16
    485c:	95 95       	asr	r25
    485e:	87 95       	ror	r24
    4860:	21 e0       	ldi	r18, 0x01	; 1
    4862:	30 e0       	ldi	r19, 0x00	; 0
    4864:	02 c0       	rjmp	.+4      	; 0x486a <__vector_29+0xa3c>
    4866:	22 0f       	add	r18, r18
    4868:	33 1f       	adc	r19, r19
    486a:	8a 95       	dec	r24
    486c:	e2 f7       	brpl	.-8      	; 0x4866 <__vector_29+0xa38>
    486e:	20 93 05 01 	sts	0x0105, r18
    4872:	80 91 ba 02 	lds	r24, 0x02BA
    4876:	39 cb       	rjmp	.-2446   	; 0x3eea <__vector_29+0xbc>
						}

						if(hardwareRevision == HW_REV_3_0_1) {
    4878:	21 30       	cpi	r18, 0x01	; 1
    487a:	19 f0       	breq	.+6      	; 0x4882 <__vector_29+0xa54>
							PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
						}

						if(hardwareRevision == HW_REV_3_1) {
    487c:	22 30       	cpi	r18, 0x02	; 2
    487e:	09 f0       	breq	.+2      	; 0x4882 <__vector_29+0xa54>
    4880:	32 cb       	rjmp	.-2460   	; 0x3ee6 <__vector_29+0xb8>
							PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
    4882:	40 91 05 01 	lds	r20, 0x0105
    4886:	40 97       	sbiw	r24, 0x10	; 16
    4888:	95 95       	asr	r25
    488a:	87 95       	ror	r24
    488c:	21 e0       	ldi	r18, 0x01	; 1
    488e:	30 e0       	ldi	r19, 0x00	; 0
    4890:	02 c0       	rjmp	.+4      	; 0x4896 <__vector_29+0xa68>
    4892:	22 0f       	add	r18, r18
    4894:	33 1f       	adc	r19, r19
    4896:	8a 95       	dec	r24
    4898:	e2 f7       	brpl	.-8      	; 0x4892 <__vector_29+0xa64>
    489a:	20 95       	com	r18
    489c:	24 23       	and	r18, r20
    489e:	20 93 05 01 	sts	0x0105, r18
    48a2:	21 cb       	rjmp	.-2494   	; 0x3ee6 <__vector_29+0xb8>

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;

					} else if(((proximityResult[currentProx>>1]+300)>>2) < PHASE3) {
    48a4:	ac 01       	movw	r20, r24
    48a6:	44 5d       	subi	r20, 0xD4	; 212
    48a8:	5e 4f       	sbci	r21, 0xFE	; 254
    48aa:	55 95       	asr	r21
    48ac:	47 95       	ror	r20
    48ae:	55 95       	asr	r21
    48b0:	47 95       	ror	r20
    48b2:	44 3b       	cpi	r20, 0xB4	; 180
    48b4:	51 05       	cpc	r21, r1
    48b6:	cc f5       	brge	.+114    	; 0x492a <__vector_29+0xafc>

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-180)>>2) + PHASE2;
    48b8:	2f 53       	subi	r18, 0x3F	; 63
    48ba:	3d 4f       	sbci	r19, 0xFD	; 253
    48bc:	84 5b       	subi	r24, 0xB4	; 180
    48be:	90 40       	sbci	r25, 0x00	; 0
    48c0:	95 95       	asr	r25
    48c2:	87 95       	ror	r24
    48c4:	95 95       	asr	r25
    48c6:	87 95       	ror	r24
    48c8:	88 58       	subi	r24, 0x88	; 136
    48ca:	9f 4f       	sbci	r25, 0xFF	; 255
    48cc:	d9 01       	movw	r26, r18
    48ce:	11 96       	adiw	r26, 0x01	; 1
    48d0:	9c 93       	st	X, r25
    48d2:	8e 93       	st	-X, r24
    48d4:	f2 cb       	rjmp	.-2076   	; 0x40ba <__vector_29+0x28c>
							PORTA = 0xAA;
						} else {
							PORTA = 0x55;
						}
					} else {
						irCommTxPulseState = 0;
    48d6:	10 92 0d 05 	sts	0x050D, r1
						PORTA = 0x00;
    48da:	12 b8       	out	0x02, r1	; 2
    48dc:	81 ce       	rjmp	.-766    	; 0x45e0 <__vector_29+0x7b2>
							PORTA = 0xAA;
						} else {
							PORTA = 0x55;
						}
					} else {
						irCommTxPulseState = 0;
    48de:	10 92 0d 05 	sts	0x050D, r1
						PORTA = 0x00;
    48e2:	12 b8       	out	0x02, r1	; 2
    48e4:	54 ce       	rjmp	.-856    	; 0x458e <__vector_29+0x760>
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    48e6:	82 e0       	ldi	r24, 0x02	; 2
    48e8:	80 93 b9 02 	sts	0x02B9, r24
    48ec:	40 cd       	rjmp	.-1408   	; 0x436e <__vector_29+0x540>
			case 10:
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    48ee:	81 30       	cpi	r24, 0x01	; 1
    48f0:	09 f4       	brne	.+2      	; 0x48f4 <__vector_29+0xac6>
    48f2:	5d c0       	rjmp	.+186    	; 0x49ae <__vector_29+0xb80>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    48f4:	85 e0       	ldi	r24, 0x05	; 5
    48f6:	80 93 b9 02 	sts	0x02B9, r24
    48fa:	61 cf       	rjmp	.-318    	; 0x47be <__vector_29+0x990>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    48fc:	84 e0       	ldi	r24, 0x04	; 4
    48fe:	80 93 b9 02 	sts	0x02B9, r24
    4902:	ae cd       	rjmp	.-1188   	; 0x4460 <__vector_29+0x632>
			case 8:
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    4904:	81 30       	cpi	r24, 0x01	; 1
    4906:	09 f4       	brne	.+2      	; 0x490a <__vector_29+0xadc>
    4908:	4e c0       	rjmp	.+156    	; 0x49a6 <__vector_29+0xb78>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    490a:	85 e0       	ldi	r24, 0x05	; 5
    490c:	80 93 b9 02 	sts	0x02B9, r24
    4910:	80 cd       	rjmp	.-1280   	; 0x4412 <__vector_29+0x5e4>
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    4912:	82 e0       	ldi	r24, 0x02	; 2
    4914:	80 93 b9 02 	sts	0x02B9, r24
    4918:	7d ce       	rjmp	.-774    	; 0x4614 <__vector_29+0x7e6>
				currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
																// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
				if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    491a:	82 e0       	ldi	r24, 0x02	; 2
    491c:	80 93 b9 02 	sts	0x02B9, r24
    4920:	e9 cd       	rjmp	.-1070   	; 0x44f4 <__vector_29+0x6c6>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    4922:	84 e0       	ldi	r24, 0x04	; 4
    4924:	80 93 b9 02 	sts	0x02B9, r24
    4928:	88 ce       	rjmp	.-752    	; 0x463a <__vector_29+0x80c>

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-180)>>2) + PHASE2;

					} else {

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-420)>>3) + PHASE3;
    492a:	2f 53       	subi	r18, 0x3F	; 63
    492c:	3d 4f       	sbci	r19, 0xFD	; 253
    492e:	84 5a       	subi	r24, 0xA4	; 164
    4930:	91 40       	sbci	r25, 0x01	; 1
    4932:	95 95       	asr	r25
    4934:	87 95       	ror	r24
    4936:	95 95       	asr	r25
    4938:	87 95       	ror	r24
    493a:	95 95       	asr	r25
    493c:	87 95       	ror	r24
    493e:	8c 54       	subi	r24, 0x4C	; 76
    4940:	9f 4f       	sbci	r25, 0xFF	; 255
    4942:	f9 01       	movw	r30, r18
    4944:	91 83       	std	Z+1, r25	; 0x01
    4946:	80 83       	st	Z, r24
    4948:	b8 cb       	rjmp	.-2192   	; 0x40ba <__vector_29+0x28c>
				if(irCommRxBitSkipped < 254) {	// safety check
					irCommRxBitSkipped++;
				}
				irCommRxWindowSamples++;
				if(irCommState==IRCOMM_RX_SYNC_SIGNAL) {
					irCommRxWindowSamples = 0;
    494a:	10 92 e7 04 	sts	0x04E7, r1
					if(irCommRxBitSkipped >= irCommShiftCount) {
    494e:	80 91 f1 04 	lds	r24, 0x04F1
    4952:	98 17       	cp	r25, r24
    4954:	08 f4       	brcc	.+2      	; 0x4958 <__vector_29+0xb2a>
    4956:	47 cf       	rjmp	.-370    	; 0x47e6 <__vector_29+0x9b8>
						irCommState = IRCOMM_RX_WAITING_BIT;
    4958:	85 e0       	ldi	r24, 0x05	; 5
    495a:	80 93 c6 04 	sts	0x04C6, r24
    495e:	43 cf       	rjmp	.-378    	; 0x47e6 <__vector_29+0x9b8>
						//PORTA = 0x01;
						//PORTA = irCommTxSensorMask;
						if(irCommTxSensorGroup==0) {
							PORTA = 0xAA;
						} else {
							PORTA = 0x55;
    4960:	85 e5       	ldi	r24, 0x55	; 85
    4962:	82 b9       	out	0x02, r24	; 2
    4964:	3d ce       	rjmp	.-902    	; 0x45e0 <__vector_29+0x7b2>
						//PORTA = 0x01;
						//PORTA = irCommTxSensorMask;
						if(irCommTxSensorGroup==0) {
							PORTA = 0xAA;
						} else {
							PORTA = 0x55;
    4966:	85 e5       	ldi	r24, 0x55	; 85
    4968:	82 b9       	out	0x02, r24	; 2
    496a:	11 ce       	rjmp	.-990    	; 0x458e <__vector_29+0x760>
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 0;

				if(currentProx==14 && measBattery==1) {
					measBattery=2;
    496c:	82 e0       	ldi	r24, 0x02	; 2
    496e:	80 93 bf 02 	sts	0x02BF, r24
					SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
    4972:	46 9a       	sbi	0x08, 6	; 8
    4974:	1f cd       	rjmp	.-1474   	; 0x43b4 <__vector_29+0x586>
					}
					irCommTxSwitchCounter++;
					if(irCommTxSwitchCounter == irCommTxSwitchCount) {
						irCommTxBitCount++;
						if(irCommTxBitCount==12) {
							irCommState = IRCOMM_TX_IDLE_STATE;
    4976:	81 e0       	ldi	r24, 0x01	; 1
    4978:	80 93 c6 04 	sts	0x04C6, r24
							irCommTxByteEnqueued = 0;
    497c:	10 92 06 05 	sts	0x0506, r1
							if(irCommEnabled == IRCOMM_MODE_TRANSMIT) {
    4980:	80 91 c4 04 	lds	r24, 0x04C4
    4984:	82 30       	cpi	r24, 0x02	; 2
    4986:	09 f4       	brne	.+2      	; 0x498a <__vector_29+0xb5c>
    4988:	8e c0       	rjmp	.+284    	; 0x4aa6 <__vector_29+0xc78>
								adcSamplingState = 0;
								irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
							}
							PORTA = 0x00;
    498a:	12 b8       	out	0x02, r1	; 2
						} else {
							irCommState = IRCOMM_TX_COMPUTE_TIMINGS;
						}
						irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;
    498c:	92 e0       	ldi	r25, 0x02	; 2
    498e:	90 93 04 05 	sts	0x0504, r25
						if((irCommTxBitCount==12) && (irCommEnabled==IRCOMM_MODE_TRANSMIT_ONLY)) {
    4992:	84 30       	cpi	r24, 0x04	; 4
    4994:	09 f0       	breq	.+2      	; 0x4998 <__vector_29+0xb6a>
    4996:	cb cd       	rjmp	.-1130   	; 0x452e <__vector_29+0x700>
							irCommAdcTxState = IRCOMM_TX_ADC_IDLE;
    4998:	10 92 04 05 	sts	0x0504, r1
    499c:	c8 cd       	rjmp	.-1136   	; 0x452e <__vector_29+0x700>
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    499e:	82 e0       	ldi	r24, 0x02	; 2
    49a0:	80 93 b9 02 	sts	0x02B9, r24
    49a4:	cd ce       	rjmp	.-614    	; 0x4740 <__vector_29+0x912>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    49a6:	84 e0       	ldi	r24, 0x04	; 4
    49a8:	80 93 b9 02 	sts	0x02B9, r24
    49ac:	32 cd       	rjmp	.-1436   	; 0x4412 <__vector_29+0x5e4>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    49ae:	84 e0       	ldi	r24, 0x04	; 4
    49b0:	80 93 b9 02 	sts	0x02B9, r24
    49b4:	04 cf       	rjmp	.-504    	; 0x47be <__vector_29+0x990>
						irCommState = IRCOMM_RX_WAITING_BIT;
					}
				}

				if(irCommRxWindowSamples == IRCOMM_SAMPLING_WINDOW) {					
					irCommRxWindowSamples = 0;
    49b6:	10 92 e7 04 	sts	0x04E7, r1
					irCommTempPointer = irCommProxValuesCurr;
    49ba:	80 91 2d 08 	lds	r24, 0x082D
    49be:	90 91 2e 08 	lds	r25, 0x082E
					irCommProxValuesCurr = irCommProxValuesAdc;
    49c2:	20 91 4b 08 	lds	r18, 0x084B
    49c6:	30 91 4c 08 	lds	r19, 0x084C
    49ca:	30 93 2e 08 	sts	0x082E, r19
    49ce:	20 93 2d 08 	sts	0x082D, r18
					irCommProxValuesAdc = irCommTempPointer;
    49d2:	90 93 4c 08 	sts	0x084C, r25
    49d6:	80 93 4b 08 	sts	0x084B, r24
					irCommTempPointer = irCommMaxSensorValueCurr;
    49da:	50 91 2a 05 	lds	r21, 0x052A
    49de:	40 91 2b 05 	lds	r20, 0x052B
					irCommMaxSensorValueCurr = irCommMaxSensorValueAdc;
    49e2:	80 91 19 0b 	lds	r24, 0x0B19
    49e6:	90 91 1a 0b 	lds	r25, 0x0B1A
    49ea:	90 93 2b 05 	sts	0x052B, r25
    49ee:	80 93 2a 05 	sts	0x052A, r24
					irCommMaxSensorValueAdc = irCommTempPointer;
    49f2:	50 93 19 0b 	sts	0x0B19, r21
    49f6:	40 93 1a 0b 	sts	0x0B1A, r20
					irCommTempPointer = irCommMinSensorValueCurr;
    49fa:	80 91 16 05 	lds	r24, 0x0516
    49fe:	90 91 17 05 	lds	r25, 0x0517
    4a02:	90 93 5b 0b 	sts	0x0B5B, r25
    4a06:	80 93 5a 0b 	sts	0x0B5A, r24
					irCommMinSensorValueCurr = irCommMinSensorValueAdc;
    4a0a:	20 91 a7 05 	lds	r18, 0x05A7
    4a0e:	30 91 a8 05 	lds	r19, 0x05A8
    4a12:	30 93 17 05 	sts	0x0517, r19
    4a16:	20 93 16 05 	sts	0x0516, r18
					irCommMinSensorValueAdc = irCommTempPointer;
    4a1a:	90 93 a8 05 	sts	0x05A8, r25
    4a1e:	80 93 a7 05 	sts	0x05A7, r24
					memset(irCommMaxSensorValueAdc, 0x00, 16);
    4a22:	e5 2f       	mov	r30, r21
    4a24:	f4 2f       	mov	r31, r20
    4a26:	80 e1       	ldi	r24, 0x10	; 16
    4a28:	df 01       	movw	r26, r30
    4a2a:	1d 92       	st	X+, r1
    4a2c:	8a 95       	dec	r24
    4a2e:	e9 f7       	brne	.-6      	; 0x4a2a <__vector_29+0xbfc>
					memset(irCommMinSensorValueAdc, 0xFF, 16);
    4a30:	80 91 a7 05 	lds	r24, 0x05A7
    4a34:	90 91 a8 05 	lds	r25, 0x05A8
    4a38:	6f ef       	ldi	r22, 0xFF	; 255
    4a3a:	70 e0       	ldi	r23, 0x00	; 0
    4a3c:	40 e1       	ldi	r20, 0x10	; 16
    4a3e:	50 e0       	ldi	r21, 0x00	; 0
    4a40:	0e 94 fc 52 	call	0xa5f8	; 0xa5f8 <memset>
					if(irCommState == IRCOMM_RX_IDLE_STATE) {
    4a44:	80 91 c6 04 	lds	r24, 0x04C6
    4a48:	81 30       	cpi	r24, 0x01	; 1
    4a4a:	91 f1       	breq	.+100    	; 0x4ab0 <__vector_29+0xc82>
						irCommRxBitSkipped = 0;
					}
					//if(irCommState == IRCOMM_RX_SYNC_SIGNAL) {
					//	irCommSecondBitSkipped = 1;	// the second start bit is just sampled, skip it and sync with the received signal						
					//}
					if(irCommState == IRCOMM_RX_WAITING_BIT) {
    4a4c:	80 91 c6 04 	lds	r24, 0x04C6
    4a50:	85 30       	cpi	r24, 0x05	; 5
    4a52:	09 f0       	breq	.+2      	; 0x4a56 <__vector_29+0xc28>
    4a54:	c8 ce       	rjmp	.-624    	; 0x47e6 <__vector_29+0x9b8>
						irCommState = IRCOMM_RX_READ_BIT;
    4a56:	86 e0       	ldi	r24, 0x06	; 6
    4a58:	80 93 c6 04 	sts	0x04C6, r24
    4a5c:	c4 ce       	rjmp	.-632    	; 0x47e6 <__vector_29+0x9b8>
			case 11:
				currentAdChannel = 0;	// prox0
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    4a5e:	82 e0       	ldi	r24, 0x02	; 2
    4a60:	80 93 b9 02 	sts	0x02B9, r24
    4a64:	d2 ce       	rjmp	.-604    	; 0x480a <__vector_29+0x9dc>
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				adcSaveDataTo = SAVE_TO_PROX;
				adcSamplingState = 2;
				if(irCommEnabled==IRCOMM_MODE_RECEIVE && currentProx==23) {					
					currentAdChannel = 0;	// prox0					
    4a66:	10 92 23 02 	sts	0x0223, r1
					measBattery = 0;
    4a6a:	10 92 bf 02 	sts	0x02BF, r1
					irCommAdcRxState = 0;					
    4a6e:	10 92 e6 04 	sts	0x04E6, r1
					irCommRxWindowSamples = 0;
    4a72:	10 92 e7 04 	sts	0x04E7, r1
					memset(irCommMaxSensorValueAdc, 0x00, 16);
    4a76:	e0 91 19 0b 	lds	r30, 0x0B19
    4a7a:	f0 91 1a 0b 	lds	r31, 0x0B1A
    4a7e:	80 e1       	ldi	r24, 0x10	; 16
    4a80:	df 01       	movw	r26, r30
    4a82:	1d 92       	st	X+, r1
    4a84:	8a 95       	dec	r24
    4a86:	e9 f7       	brne	.-6      	; 0x4a82 <__vector_29+0xc54>
					memset(irCommMinSensorValueAdc, 0xFF, 16);
    4a88:	80 91 a7 05 	lds	r24, 0x05A7
    4a8c:	90 91 a8 05 	lds	r25, 0x05A8
    4a90:	6f ef       	ldi	r22, 0xFF	; 255
    4a92:	70 e0       	ldi	r23, 0x00	; 0
    4a94:	40 e1       	ldi	r20, 0x10	; 16
    4a96:	50 e0       	ldi	r21, 0x00	; 0
    4a98:	0e 94 fc 52 	call	0xa5f8	; 0xa5f8 <memset>
					irCommMode = IRCOMM_MODE_RECEIVE;
    4a9c:	10 93 c5 04 	sts	0x04C5, r17
    4aa0:	10 91 c4 04 	lds	r17, 0x04C4
    4aa4:	84 ca       	rjmp	.-2808   	; 0x3fae <__vector_29+0x180>
						irCommTxBitCount++;
						if(irCommTxBitCount==12) {
							irCommState = IRCOMM_TX_IDLE_STATE;
							irCommTxByteEnqueued = 0;
							if(irCommEnabled == IRCOMM_MODE_TRANSMIT) {
								adcSamplingState = 0;
    4aa6:	10 92 ba 02 	sts	0x02BA, r1
								irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    4aaa:	10 92 c5 04 	sts	0x04C5, r1
    4aae:	6d cf       	rjmp	.-294    	; 0x498a <__vector_29+0xb5c>
					irCommMinSensorValueCurr = irCommMinSensorValueAdc;
					irCommMinSensorValueAdc = irCommTempPointer;
					memset(irCommMaxSensorValueAdc, 0x00, 16);
					memset(irCommMinSensorValueAdc, 0xFF, 16);
					if(irCommState == IRCOMM_RX_IDLE_STATE) {
						irCommState = IRCOMM_RX_MAX_SENSOR_STATE;
    4ab0:	82 e0       	ldi	r24, 0x02	; 2
    4ab2:	80 93 c6 04 	sts	0x04C6, r24
						irCommRxBitSkipped = 0;
    4ab6:	10 92 00 05 	sts	0x0500, r1
    4aba:	c8 cf       	rjmp	.-112    	; 0x4a4c <__vector_29+0xc1e>

00004abc <initMotors>:

#include "motors.h"

void initMotors() {
    4abc:	0f 93       	push	r16
    4abe:	1f 93       	push	r17
    4ac0:	cf 93       	push	r28
    4ac2:	df 93       	push	r29
	// Using 10-bit resolution (waveform generation mode 7) we have a period of: 8000000/1024 = 7812.5 Hz
	// We need to apply a prescaler to the timer in such a way to get the desired period:
	// 7812.5/100 = 78.125 => ideal prescaler, the nearest one is 1/64 and we get a period of:
	// 8000000/64/1024 = 122 Hz

	TCCR3A = 0;
    4ac4:	e0 e9       	ldi	r30, 0x90	; 144
    4ac6:	f0 e0       	ldi	r31, 0x00	; 0
    4ac8:	10 82       	st	Z, r1
	TCCR3B = 0;
    4aca:	41 e9       	ldi	r20, 0x91	; 145
    4acc:	50 e0       	ldi	r21, 0x00	; 0
    4ace:	da 01       	movw	r26, r20
    4ad0:	1c 92       	st	X, r1
	TIMSK3 = 0;
    4ad2:	21 e7       	ldi	r18, 0x71	; 113
    4ad4:	30 e0       	ldi	r19, 0x00	; 0
    4ad6:	e9 01       	movw	r28, r18
    4ad8:	18 82       	st	Y, r1
	TCCR4A = 0;
    4ada:	a0 ea       	ldi	r26, 0xA0	; 160
    4adc:	b0 e0       	ldi	r27, 0x00	; 0
    4ade:	1c 92       	st	X, r1
	TCCR4B = 0;
    4ae0:	81 ea       	ldi	r24, 0xA1	; 161
    4ae2:	90 e0       	ldi	r25, 0x00	; 0
    4ae4:	ec 01       	movw	r28, r24
    4ae6:	18 82       	st	Y, r1
	TIMSK4 = 0;
    4ae8:	02 e7       	ldi	r16, 0x72	; 114
    4aea:	10 e0       	ldi	r17, 0x00	; 0
    4aec:	e8 01       	movw	r28, r16
    4aee:	18 82       	st	Y, r1

	TCCR3A |= (1 << COM3A1) | (1 << WGM31) | (1 << WGM30); 	// enable OCA; clear on match, set at bottom
    4af0:	60 81       	ld	r22, Z
    4af2:	63 68       	ori	r22, 0x83	; 131
    4af4:	60 83       	st	Z, r22
	TCCR3A |= (1 << WGM31) | (1 << WGM30);
    4af6:	60 81       	ld	r22, Z
    4af8:	63 60       	ori	r22, 0x03	; 3
    4afa:	60 83       	st	Z, r22
	TCCR3B |= (1 << WGM32) | (1 << CS31) | (1 << CS30);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    4afc:	ea 01       	movw	r28, r20
    4afe:	68 81       	ld	r22, Y
    4b00:	6b 60       	ori	r22, 0x0B	; 11
    4b02:	68 83       	st	Y, r22
	// the values for motors goes from 0 (stopped) to 1023 (max power)
	OCR3A = pwm_right;
    4b04:	40 91 f5 02 	lds	r20, 0x02F5
    4b08:	50 91 f6 02 	lds	r21, 0x02F6
    4b0c:	50 93 99 00 	sts	0x0099, r21
    4b10:	40 93 98 00 	sts	0x0098, r20
	OCR3B = 0;
    4b14:	10 92 9b 00 	sts	0x009B, r1
    4b18:	10 92 9a 00 	sts	0x009A, r1
	TIMSK3 |= (1 << TOIE3);		// Enable timer overflow interrupt
    4b1c:	e9 01       	movw	r28, r18
    4b1e:	48 81       	ld	r20, Y
    4b20:	41 60       	ori	r20, 0x01	; 1
    4b22:	48 83       	st	Y, r20

	// stop right motor
	TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    4b24:	20 81       	ld	r18, Z
    4b26:	2f 75       	andi	r18, 0x5F	; 95
    4b28:	20 83       	st	Z, r18
	PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    4b2a:	2e b1       	in	r18, 0x0e	; 14
    4b2c:	27 7e       	andi	r18, 0xE7	; 231
    4b2e:	2e b9       	out	0x0e, r18	; 14

	// Motor left timer4/pwm
	// same configuration as timer3
	TCCR4A |= (1 << COM4A1) | (1 << WGM41) | (1 << WGM40); 	// enable OCA; clear on match, set at bottom
    4b30:	2c 91       	ld	r18, X
    4b32:	23 68       	ori	r18, 0x83	; 131
    4b34:	2c 93       	st	X, r18
	TCCR4B |= (1 << WGM42) | (1 << CS41) | (1 << CS40);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    4b36:	fc 01       	movw	r30, r24
    4b38:	20 81       	ld	r18, Z
    4b3a:	2b 60       	ori	r18, 0x0B	; 11
    4b3c:	20 83       	st	Z, r18
	// the values for motors goes from 0 (stopped) to 1024 (max power)
	OCR4A = pwm_left;
    4b3e:	80 91 f7 02 	lds	r24, 0x02F7
    4b42:	90 91 f8 02 	lds	r25, 0x02F8
    4b46:	90 93 a9 00 	sts	0x00A9, r25
    4b4a:	80 93 a8 00 	sts	0x00A8, r24
	OCR4B = 0;
    4b4e:	10 92 ab 00 	sts	0x00AB, r1
    4b52:	10 92 aa 00 	sts	0x00AA, r1
	TIMSK4 |= (1 << TOIE4);		// Enable timer overflow interrupt
    4b56:	e8 01       	movw	r28, r16
    4b58:	88 81       	ld	r24, Y
    4b5a:	81 60       	ori	r24, 0x01	; 1
    4b5c:	88 83       	st	Y, r24
	// stop left motor
	TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    4b5e:	8c 91       	ld	r24, X
    4b60:	8f 75       	andi	r24, 0x5F	; 95
    4b62:	8c 93       	st	X, r24
	PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    4b64:	e2 e0       	ldi	r30, 0x02	; 2
    4b66:	f1 e0       	ldi	r31, 0x01	; 1
    4b68:	80 81       	ld	r24, Z
    4b6a:	87 7e       	andi	r24, 0xE7	; 231
    4b6c:	80 83       	st	Z, r24


}
    4b6e:	df 91       	pop	r29
    4b70:	cf 91       	pop	r28
    4b72:	1f 91       	pop	r17
    4b74:	0f 91       	pop	r16
    4b76:	08 95       	ret

00004b78 <cast_speed>:

signed int cast_speed(signed int vel) {
    4b78:	28 2f       	mov	r18, r24
    4b7a:	39 2f       	mov	r19, r25
    4b7c:	8e ef       	ldi	r24, 0xFE	; 254
    4b7e:	20 30       	cpi	r18, 0x00	; 0
    4b80:	38 07       	cpc	r19, r24
    4b82:	14 f4       	brge	.+4      	; 0x4b88 <cast_speed+0x10>
    4b84:	20 e0       	ldi	r18, 0x00	; 0
    4b86:	3e ef       	ldi	r19, 0xFE	; 254
    4b88:	82 e0       	ldi	r24, 0x02	; 2
    4b8a:	21 30       	cpi	r18, 0x01	; 1
    4b8c:	38 07       	cpc	r19, r24
    4b8e:	14 f0       	brlt	.+4      	; 0x4b94 <cast_speed+0x1c>
    4b90:	20 e0       	ldi	r18, 0x00	; 0
    4b92:	32 e0       	ldi	r19, 0x02	; 2
        vel = MAX_MOTORS_PWM/2;
    } else if(vel < -(MAX_MOTORS_PWM/2)) {
        vel = -(MAX_MOTORS_PWM/2);
    }
    return vel;
}
    4b94:	c9 01       	movw	r24, r18
    4b96:	08 95       	ret

00004b98 <handleMotorsWithNoController>:

void handleMotorsWithNoController() {

	// compute velocities even if they aren't used
	if(compute_left_vel) {
    4b98:	80 91 07 02 	lds	r24, 0x0207
    4b9c:	88 23       	and	r24, r24
    4b9e:	c1 f1       	breq	.+112    	; 0x4c10 <handleMotorsWithNoController+0x78>
		last_left_vel = left_vel_sum>>2;
    4ba0:	60 91 ed 02 	lds	r22, 0x02ED
    4ba4:	70 91 ee 02 	lds	r23, 0x02EE
    4ba8:	76 95       	lsr	r23
    4baa:	67 95       	ror	r22
    4bac:	76 95       	lsr	r23
    4bae:	67 95       	ror	r22
    4bb0:	70 93 f2 02 	sts	0x02F2, r23
    4bb4:	60 93 f1 02 	sts	0x02F1, r22
		compute_left_vel = 0;
    4bb8:	10 92 07 02 	sts	0x0207, r1
		left_vel_sum = 0;
    4bbc:	10 92 ee 02 	sts	0x02EE, r1
    4bc0:	10 92 ed 02 	sts	0x02ED, r1

		if(pwm_left_desired >= 0) {
    4bc4:	80 91 fb 02 	lds	r24, 0x02FB
    4bc8:	90 91 fc 02 	lds	r25, 0x02FC
    4bcc:	97 fd       	sbrc	r25, 7
    4bce:	e3 c0       	rjmp	.+454    	; 0x4d96 <handleMotorsWithNoController+0x1fe>
			leftMotSteps += (last_left_vel>>3);
    4bd0:	75 95       	asr	r23
    4bd2:	67 95       	ror	r22
    4bd4:	75 95       	asr	r23
    4bd6:	67 95       	ror	r22
    4bd8:	75 95       	asr	r23
    4bda:	67 95       	ror	r22
    4bdc:	88 27       	eor	r24, r24
    4bde:	77 fd       	sbrc	r23, 7
    4be0:	80 95       	com	r24
    4be2:	98 2f       	mov	r25, r24
    4be4:	0e 94 7b 50 	call	0xa0f6	; 0xa0f6 <__floatsisf>
    4be8:	9b 01       	movw	r18, r22
    4bea:	ac 01       	movw	r20, r24
    4bec:	60 91 d5 02 	lds	r22, 0x02D5
    4bf0:	70 91 d6 02 	lds	r23, 0x02D6
    4bf4:	80 91 d7 02 	lds	r24, 0x02D7
    4bf8:	90 91 d8 02 	lds	r25, 0x02D8
    4bfc:	0e 94 13 4f 	call	0x9e26	; 0x9e26 <__addsf3>
    4c00:	60 93 d5 02 	sts	0x02D5, r22
    4c04:	70 93 d6 02 	sts	0x02D6, r23
    4c08:	80 93 d7 02 	sts	0x02D7, r24
    4c0c:	90 93 d8 02 	sts	0x02D8, r25
		} else {
			leftMotSteps -= (last_left_vel>>3);
		}
	}

	if(compute_right_vel) {
    4c10:	80 91 08 02 	lds	r24, 0x0208
    4c14:	88 23       	and	r24, r24
    4c16:	c1 f1       	breq	.+112    	; 0x4c88 <handleMotorsWithNoController+0xf0>
		last_right_vel = right_vel_sum>>2;
    4c18:	60 91 ef 02 	lds	r22, 0x02EF
    4c1c:	70 91 f0 02 	lds	r23, 0x02F0
    4c20:	76 95       	lsr	r23
    4c22:	67 95       	ror	r22
    4c24:	76 95       	lsr	r23
    4c26:	67 95       	ror	r22
    4c28:	70 93 f4 02 	sts	0x02F4, r23
    4c2c:	60 93 f3 02 	sts	0x02F3, r22
		compute_right_vel = 0;
    4c30:	10 92 08 02 	sts	0x0208, r1
		right_vel_sum = 0;
    4c34:	10 92 f0 02 	sts	0x02F0, r1
    4c38:	10 92 ef 02 	sts	0x02EF, r1

		if(pwm_right_desired >= 0) {
    4c3c:	80 91 f9 02 	lds	r24, 0x02F9
    4c40:	90 91 fa 02 	lds	r25, 0x02FA
    4c44:	97 fd       	sbrc	r25, 7
    4c46:	86 c0       	rjmp	.+268    	; 0x4d54 <handleMotorsWithNoController+0x1bc>
			rightMotSteps += (last_right_vel>>3);
    4c48:	75 95       	asr	r23
    4c4a:	67 95       	ror	r22
    4c4c:	75 95       	asr	r23
    4c4e:	67 95       	ror	r22
    4c50:	75 95       	asr	r23
    4c52:	67 95       	ror	r22
    4c54:	88 27       	eor	r24, r24
    4c56:	77 fd       	sbrc	r23, 7
    4c58:	80 95       	com	r24
    4c5a:	98 2f       	mov	r25, r24
    4c5c:	0e 94 7b 50 	call	0xa0f6	; 0xa0f6 <__floatsisf>
    4c60:	9b 01       	movw	r18, r22
    4c62:	ac 01       	movw	r20, r24
    4c64:	60 91 d1 02 	lds	r22, 0x02D1
    4c68:	70 91 d2 02 	lds	r23, 0x02D2
    4c6c:	80 91 d3 02 	lds	r24, 0x02D3
    4c70:	90 91 d4 02 	lds	r25, 0x02D4
    4c74:	0e 94 13 4f 	call	0x9e26	; 0x9e26 <__addsf3>
    4c78:	60 93 d1 02 	sts	0x02D1, r22
    4c7c:	70 93 d2 02 	sts	0x02D2, r23
    4c80:	80 93 d3 02 	sts	0x02D3, r24
    4c84:	90 93 d4 02 	sts	0x02D4, r25
		} else {
			rightMotSteps -= (last_right_vel>>3);
		}
	}

	pwm_right_working = pwm_intermediate_right_desired*BYTE_TO_MM_S;	// pwm in the range -635..635 (127*BYTE_TO_MM_S)
    4c88:	20 91 fd 02 	lds	r18, 0x02FD
    4c8c:	30 91 fe 02 	lds	r19, 0x02FE
    4c90:	c9 01       	movw	r24, r18
    4c92:	88 0f       	add	r24, r24
    4c94:	99 1f       	adc	r25, r25
    4c96:	88 0f       	add	r24, r24
    4c98:	99 1f       	adc	r25, r25
    4c9a:	82 0f       	add	r24, r18
    4c9c:	93 1f       	adc	r25, r19
    4c9e:	90 93 0e 03 	sts	0x030E, r25
    4ca2:	80 93 0d 03 	sts	0x030D, r24
	pwm_left_working = pwm_intermediate_left_desired*BYTE_TO_MM_S;	
    4ca6:	40 91 ff 02 	lds	r20, 0x02FF
    4caa:	50 91 00 03 	lds	r21, 0x0300
    4cae:	9a 01       	movw	r18, r20
    4cb0:	22 0f       	add	r18, r18
    4cb2:	33 1f       	adc	r19, r19
    4cb4:	22 0f       	add	r18, r18
    4cb6:	33 1f       	adc	r19, r19
    4cb8:	24 0f       	add	r18, r20
    4cba:	35 1f       	adc	r19, r21
    4cbc:	52 2f       	mov	r21, r18
    4cbe:	43 2f       	mov	r20, r19
    4cc0:	20 93 0f 03 	sts	0x030F, r18
    4cc4:	30 93 10 03 	sts	0x0310, r19
	if(obstacleAvoidanceEnabled) {
    4cc8:	20 91 6c 04 	lds	r18, 0x046C
    4ccc:	22 23       	and	r18, r18
    4cce:	39 f5       	brne	.+78     	; 0x4d1e <handleMotorsWithNoController+0x186>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);		// out is in the range -MAX_MOTORS_PWM/2..MAX_MOTORS_PWM/2
	}
	//pwm_left_desired_to_control = cast_speed(pwm_left_working);		// pwm in the range -MAX_MOTORS_PWM/2..MAX_MOTORS_PWM/2
	//pwm_right_desired_to_control = cast_speed(pwm_right_working);

	pwm_left = pwm_left_working;
    4cd0:	50 93 f7 02 	sts	0x02F7, r21
    4cd4:	40 93 f8 02 	sts	0x02F8, r20
	pwm_right = pwm_right_working;
    4cd8:	90 93 f6 02 	sts	0x02F6, r25
    4cdc:	80 93 f5 02 	sts	0x02F5, r24

	if(pwm_right > 0) {
    4ce0:	18 16       	cp	r1, r24
    4ce2:	19 06       	cpc	r1, r25
    4ce4:	5c f5       	brge	.+86     	; 0x4d3c <handleMotorsWithNoController+0x1a4>
		OCR3A = (unsigned int)pwm_right;
    4ce6:	90 93 99 00 	sts	0x0099, r25
    4cea:	80 93 98 00 	sts	0x0098, r24
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
		OCR3B = 0;
	}
	if(pwm_left > 0) {
    4cee:	80 91 f7 02 	lds	r24, 0x02F7
    4cf2:	90 91 f8 02 	lds	r25, 0x02F8
    4cf6:	18 16       	cp	r1, r24
    4cf8:	19 06       	cpc	r1, r25
    4cfa:	2c f4       	brge	.+10     	; 0x4d06 <handleMotorsWithNoController+0x16e>
		OCR4A = (unsigned int)pwm_left;
    4cfc:	90 93 a9 00 	sts	0x00A9, r25
    4d00:	80 93 a8 00 	sts	0x00A8, r24
    4d04:	08 95       	ret
	} else if(pwm_left < 0) {
    4d06:	00 97       	sbiw	r24, 0x00	; 0
    4d08:	09 f0       	breq	.+2      	; 0x4d0c <handleMotorsWithNoController+0x174>
    4d0a:	6e c0       	rjmp	.+220    	; 0x4de8 <handleMotorsWithNoController+0x250>
		OCR4B =(unsigned int)( -pwm_left);
	} else {
		OCR4A = 0;
    4d0c:	10 92 a9 00 	sts	0x00A9, r1
    4d10:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    4d14:	10 92 ab 00 	sts	0x00AB, r1
    4d18:	10 92 aa 00 	sts	0x00AA, r1
    4d1c:	08 95       	ret
	}

	pwm_right_working = pwm_intermediate_right_desired*BYTE_TO_MM_S;	// pwm in the range -635..635 (127*BYTE_TO_MM_S)
	pwm_left_working = pwm_intermediate_left_desired*BYTE_TO_MM_S;	
	if(obstacleAvoidanceEnabled) {
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);		// out is in the range -MAX_MOTORS_PWM/2..MAX_MOTORS_PWM/2
    4d1e:	8f e0       	ldi	r24, 0x0F	; 15
    4d20:	93 e0       	ldi	r25, 0x03	; 3
    4d22:	6d e0       	ldi	r22, 0x0D	; 13
    4d24:	73 e0       	ldi	r23, 0x03	; 3
    4d26:	0e 94 ab 38 	call	0x7156	; 0x7156 <obstacleAvoidance>
    4d2a:	50 91 0f 03 	lds	r21, 0x030F
    4d2e:	40 91 10 03 	lds	r20, 0x0310
    4d32:	80 91 0d 03 	lds	r24, 0x030D
    4d36:	90 91 0e 03 	lds	r25, 0x030E
    4d3a:	ca cf       	rjmp	.-108    	; 0x4cd0 <handleMotorsWithNoController+0x138>
	pwm_left = pwm_left_working;
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
    4d3c:	00 97       	sbiw	r24, 0x00	; 0
    4d3e:	09 f0       	breq	.+2      	; 0x4d42 <handleMotorsWithNoController+0x1aa>
    4d40:	4b c0       	rjmp	.+150    	; 0x4dd8 <handleMotorsWithNoController+0x240>
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
    4d42:	10 92 99 00 	sts	0x0099, r1
    4d46:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    4d4a:	10 92 9b 00 	sts	0x009B, r1
    4d4e:	10 92 9a 00 	sts	0x009A, r1
    4d52:	cd cf       	rjmp	.-102    	; 0x4cee <handleMotorsWithNoController+0x156>
		right_vel_sum = 0;

		if(pwm_right_desired >= 0) {
			rightMotSteps += (last_right_vel>>3);
		} else {
			rightMotSteps -= (last_right_vel>>3);
    4d54:	75 95       	asr	r23
    4d56:	67 95       	ror	r22
    4d58:	75 95       	asr	r23
    4d5a:	67 95       	ror	r22
    4d5c:	75 95       	asr	r23
    4d5e:	67 95       	ror	r22
    4d60:	88 27       	eor	r24, r24
    4d62:	77 fd       	sbrc	r23, 7
    4d64:	80 95       	com	r24
    4d66:	98 2f       	mov	r25, r24
    4d68:	0e 94 7b 50 	call	0xa0f6	; 0xa0f6 <__floatsisf>
    4d6c:	9b 01       	movw	r18, r22
    4d6e:	ac 01       	movw	r20, r24
    4d70:	60 91 d1 02 	lds	r22, 0x02D1
    4d74:	70 91 d2 02 	lds	r23, 0x02D2
    4d78:	80 91 d3 02 	lds	r24, 0x02D3
    4d7c:	90 91 d4 02 	lds	r25, 0x02D4
    4d80:	0e 94 12 4f 	call	0x9e24	; 0x9e24 <__subsf3>
    4d84:	60 93 d1 02 	sts	0x02D1, r22
    4d88:	70 93 d2 02 	sts	0x02D2, r23
    4d8c:	80 93 d3 02 	sts	0x02D3, r24
    4d90:	90 93 d4 02 	sts	0x02D4, r25
    4d94:	79 cf       	rjmp	.-270    	; 0x4c88 <handleMotorsWithNoController+0xf0>
		left_vel_sum = 0;

		if(pwm_left_desired >= 0) {
			leftMotSteps += (last_left_vel>>3);
		} else {
			leftMotSteps -= (last_left_vel>>3);
    4d96:	75 95       	asr	r23
    4d98:	67 95       	ror	r22
    4d9a:	75 95       	asr	r23
    4d9c:	67 95       	ror	r22
    4d9e:	75 95       	asr	r23
    4da0:	67 95       	ror	r22
    4da2:	88 27       	eor	r24, r24
    4da4:	77 fd       	sbrc	r23, 7
    4da6:	80 95       	com	r24
    4da8:	98 2f       	mov	r25, r24
    4daa:	0e 94 7b 50 	call	0xa0f6	; 0xa0f6 <__floatsisf>
    4dae:	9b 01       	movw	r18, r22
    4db0:	ac 01       	movw	r20, r24
    4db2:	60 91 d5 02 	lds	r22, 0x02D5
    4db6:	70 91 d6 02 	lds	r23, 0x02D6
    4dba:	80 91 d7 02 	lds	r24, 0x02D7
    4dbe:	90 91 d8 02 	lds	r25, 0x02D8
    4dc2:	0e 94 12 4f 	call	0x9e24	; 0x9e24 <__subsf3>
    4dc6:	60 93 d5 02 	sts	0x02D5, r22
    4dca:	70 93 d6 02 	sts	0x02D6, r23
    4dce:	80 93 d7 02 	sts	0x02D7, r24
    4dd2:	90 93 d8 02 	sts	0x02D8, r25
    4dd6:	1c cf       	rjmp	.-456    	; 0x4c10 <handleMotorsWithNoController+0x78>
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
		OCR3B = (unsigned int)(-pwm_right);
    4dd8:	90 95       	com	r25
    4dda:	81 95       	neg	r24
    4ddc:	9f 4f       	sbci	r25, 0xFF	; 255
    4dde:	90 93 9b 00 	sts	0x009B, r25
    4de2:	80 93 9a 00 	sts	0x009A, r24
    4de6:	83 cf       	rjmp	.-250    	; 0x4cee <handleMotorsWithNoController+0x156>
		OCR3B = 0;
	}
	if(pwm_left > 0) {
		OCR4A = (unsigned int)pwm_left;
	} else if(pwm_left < 0) {
		OCR4B =(unsigned int)( -pwm_left);
    4de8:	90 95       	com	r25
    4dea:	81 95       	neg	r24
    4dec:	9f 4f       	sbci	r25, 0xFF	; 255
    4dee:	90 93 ab 00 	sts	0x00AB, r25
    4df2:	80 93 aa 00 	sts	0x00AA, r24
    4df6:	08 95       	ret

00004df8 <setLeftSpeed>:
}

// vel expressed in 1/5 of mm/s
void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    4df8:	28 2f       	mov	r18, r24
    4dfa:	33 27       	eor	r19, r19
    4dfc:	27 fd       	sbrc	r18, 7
    4dfe:	30 95       	com	r19
    4e00:	37 fd       	sbrc	r19, 7
    4e02:	13 c0       	rjmp	.+38     	; 0x4e2a <setLeftSpeed+0x32>
    4e04:	30 93 12 03 	sts	0x0312, r19
    4e08:	20 93 11 03 	sts	0x0311, r18

    if(vel >= 0) {
    4e0c:	87 fd       	sbrc	r24, 7
    4e0e:	05 c0       	rjmp	.+10     	; 0x4e1a <setLeftSpeed+0x22>
        pwm_left_desired = speedl;
    } else {
        pwm_left_desired = -(speedl);
    4e10:	30 93 fc 02 	sts	0x02FC, r19
    4e14:	20 93 fb 02 	sts	0x02FB, r18
    4e18:	08 95       	ret
    4e1a:	30 95       	com	r19
    4e1c:	21 95       	neg	r18
    4e1e:	3f 4f       	sbci	r19, 0xFF	; 255
    4e20:	30 93 fc 02 	sts	0x02FC, r19
    4e24:	20 93 fb 02 	sts	0x02FB, r18
    4e28:	08 95       	ret
}

// vel expressed in 1/5 of mm/s
void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    4e2a:	30 95       	com	r19
    4e2c:	21 95       	neg	r18
    4e2e:	3f 4f       	sbci	r19, 0xFF	; 255
    4e30:	e9 cf       	rjmp	.-46     	; 0x4e04 <setLeftSpeed+0xc>

00004e32 <setRightSpeed>:

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    4e32:	28 2f       	mov	r18, r24
    4e34:	33 27       	eor	r19, r19
    4e36:	27 fd       	sbrc	r18, 7
    4e38:	30 95       	com	r19
    4e3a:	37 fd       	sbrc	r19, 7
    4e3c:	13 c0       	rjmp	.+38     	; 0x4e64 <setRightSpeed+0x32>
    4e3e:	30 93 14 03 	sts	0x0314, r19
    4e42:	20 93 13 03 	sts	0x0313, r18

    if(vel >= 0) {
    4e46:	87 fd       	sbrc	r24, 7
    4e48:	05 c0       	rjmp	.+10     	; 0x4e54 <setRightSpeed+0x22>
        pwm_right_desired = speedr;
    } else {
        pwm_right_desired = -(speedr);
    4e4a:	30 93 fa 02 	sts	0x02FA, r19
    4e4e:	20 93 f9 02 	sts	0x02F9, r18
    4e52:	08 95       	ret
    4e54:	30 95       	com	r19
    4e56:	21 95       	neg	r18
    4e58:	3f 4f       	sbci	r19, 0xFF	; 255
    4e5a:	30 93 fa 02 	sts	0x02FA, r19
    4e5e:	20 93 f9 02 	sts	0x02F9, r18
    4e62:	08 95       	ret

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    4e64:	30 95       	com	r19
    4e66:	21 95       	neg	r18
    4e68:	3f 4f       	sbci	r19, 0xFF	; 255
    4e6a:	e9 cf       	rjmp	.-46     	; 0x4e3e <setRightSpeed+0xc>

00004e6c <updateOdomData>:
}


void updateOdomData() {

    if(calibWheel == LEFT_WHEEL_FW_SC) {
    4e6c:	80 91 33 05 	lds	r24, 0x0533
    4e70:	88 23       	and	r24, r24
    4e72:	89 f5       	brne	.+98     	; 0x4ed6 <updateOdomData+0x6a>
        if(calibVelIndex>1) {
    4e74:	e0 91 9d 08 	lds	r30, 0x089D
    4e78:	e2 30       	cpi	r30, 0x02	; 2
    4e7a:	08 f4       	brcc	.+2      	; 0x4e7e <updateOdomData+0x12>
    4e7c:	96 c0       	rjmp	.+300    	; 0x4faa <updateOdomData+0x13e>
            if(calibration[calibVelIndex-2][1] >= tempVel) {  // check that we have always increasing values of speed, otherwise there
    4e7e:	f0 e0       	ldi	r31, 0x00	; 0
    4e80:	df 01       	movw	r26, r30
    4e82:	a2 95       	swap	r26
    4e84:	b2 95       	swap	r27
    4e86:	b0 7f       	andi	r27, 0xF0	; 240
    4e88:	ba 27       	eor	r27, r26
    4e8a:	a0 7f       	andi	r26, 0xF0	; 240
    4e8c:	ba 27       	eor	r27, r26
    4e8e:	ac 55       	subi	r26, 0x5C	; 92
    4e90:	b7 4f       	sbci	r27, 0xF7	; 247
    4e92:	12 96       	adiw	r26, 0x02	; 2
    4e94:	2d 91       	ld	r18, X+
    4e96:	3c 91       	ld	r19, X
    4e98:	13 97       	sbiw	r26, 0x03	; 3
    4e9a:	80 91 58 0b 	lds	r24, 0x0B58
    4e9e:	90 91 59 0b 	lds	r25, 0x0B59
    4ea2:	28 17       	cp	r18, r24
    4ea4:	39 07       	cpc	r19, r25
    4ea6:	34 f0       	brlt	.+12     	; 0x4eb4 <updateOdomData+0x48>
                tempVel = calibration[calibVelIndex-2][1]+1; // will be problems when getting data from the lookup table
    4ea8:	c9 01       	movw	r24, r18
    4eaa:	01 96       	adiw	r24, 0x01	; 1
    4eac:	90 93 59 0b 	sts	0x0B59, r25
    4eb0:	80 93 58 0b 	sts	0x0B58, r24
            }
        }
        calibration[calibVelIndex-1][0] = avgLeftSpeed;
    4eb4:	e2 95       	swap	r30
    4eb6:	f2 95       	swap	r31
    4eb8:	f0 7f       	andi	r31, 0xF0	; 240
    4eba:	fe 27       	eor	r31, r30
    4ebc:	e0 7f       	andi	r30, 0xF0	; 240
    4ebe:	fe 27       	eor	r31, r30
    4ec0:	ec 54       	subi	r30, 0x4C	; 76
    4ec2:	f7 4f       	sbci	r31, 0xF7	; 247
    4ec4:	20 91 b4 04 	lds	r18, 0x04B4
    4ec8:	30 91 b5 04 	lds	r19, 0x04B5
    4ecc:	31 83       	std	Z+1, r19	; 0x01
    4ece:	20 83       	st	Z, r18
        calibration[calibVelIndex-1][1] = tempVel;
    4ed0:	93 83       	std	Z+3, r25	; 0x03
    4ed2:	82 83       	std	Z+2, r24	; 0x02
    4ed4:	08 95       	ret
    } else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    4ed6:	81 30       	cpi	r24, 0x01	; 1
    4ed8:	31 f0       	breq	.+12     	; 0x4ee6 <updateOdomData+0x7a>
                tempVel = calibration[calibVelIndex-2][3]+1;
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
        calibration[calibVelIndex-1][3] = tempVel;
    } else if(calibWheel == LEFT_WHEEL_BW_SC) {
    4eda:	82 30       	cpi	r24, 0x02	; 2
    4edc:	09 f4       	brne	.+2      	; 0x4ee0 <updateOdomData+0x74>
    4ede:	6b c0       	rjmp	.+214    	; 0x4fb6 <updateOdomData+0x14a>
                tempVel = calibration[calibVelIndex-2][5]+1;
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
        calibration[calibVelIndex-1][5] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    4ee0:	83 30       	cpi	r24, 0x03	; 3
    4ee2:	91 f1       	breq	.+100    	; 0x4f48 <updateOdomData+0xdc>
    4ee4:	08 95       	ret
            }
        }
        calibration[calibVelIndex-1][0] = avgLeftSpeed;
        calibration[calibVelIndex-1][1] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_FW_SC) {
        if(calibVelIndex>1) {
    4ee6:	e0 91 9d 08 	lds	r30, 0x089D
    4eea:	e2 30       	cpi	r30, 0x02	; 2
    4eec:	08 f4       	brcc	.+2      	; 0x4ef0 <updateOdomData+0x84>
    4eee:	93 c0       	rjmp	.+294    	; 0x5016 <updateOdomData+0x1aa>
            if(calibration[calibVelIndex-2][3] >= tempVel) {
    4ef0:	f0 e0       	ldi	r31, 0x00	; 0
    4ef2:	df 01       	movw	r26, r30
    4ef4:	a2 95       	swap	r26
    4ef6:	b2 95       	swap	r27
    4ef8:	b0 7f       	andi	r27, 0xF0	; 240
    4efa:	ba 27       	eor	r27, r26
    4efc:	a0 7f       	andi	r26, 0xF0	; 240
    4efe:	ba 27       	eor	r27, r26
    4f00:	ac 55       	subi	r26, 0x5C	; 92
    4f02:	b7 4f       	sbci	r27, 0xF7	; 247
    4f04:	16 96       	adiw	r26, 0x06	; 6
    4f06:	2d 91       	ld	r18, X+
    4f08:	3c 91       	ld	r19, X
    4f0a:	17 97       	sbiw	r26, 0x07	; 7
    4f0c:	80 91 58 0b 	lds	r24, 0x0B58
    4f10:	90 91 59 0b 	lds	r25, 0x0B59
    4f14:	28 17       	cp	r18, r24
    4f16:	39 07       	cpc	r19, r25
    4f18:	34 f0       	brlt	.+12     	; 0x4f26 <updateOdomData+0xba>
                tempVel = calibration[calibVelIndex-2][3]+1;
    4f1a:	c9 01       	movw	r24, r18
    4f1c:	01 96       	adiw	r24, 0x01	; 1
    4f1e:	90 93 59 0b 	sts	0x0B59, r25
    4f22:	80 93 58 0b 	sts	0x0B58, r24
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
    4f26:	e2 95       	swap	r30
    4f28:	f2 95       	swap	r31
    4f2a:	f0 7f       	andi	r31, 0xF0	; 240
    4f2c:	fe 27       	eor	r31, r30
    4f2e:	e0 7f       	andi	r30, 0xF0	; 240
    4f30:	fe 27       	eor	r31, r30
    4f32:	ec 54       	subi	r30, 0x4C	; 76
    4f34:	f7 4f       	sbci	r31, 0xF7	; 247
    4f36:	20 91 b6 04 	lds	r18, 0x04B6
    4f3a:	30 91 b7 04 	lds	r19, 0x04B7
    4f3e:	35 83       	std	Z+5, r19	; 0x05
    4f40:	24 83       	std	Z+4, r18	; 0x04
        calibration[calibVelIndex-1][3] = tempVel;
    4f42:	97 83       	std	Z+7, r25	; 0x07
    4f44:	86 83       	std	Z+6, r24	; 0x06
    4f46:	08 95       	ret
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
        calibration[calibVelIndex-1][5] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    4f48:	e0 91 9d 08 	lds	r30, 0x089D
    4f4c:	e2 30       	cpi	r30, 0x02	; 2
    4f4e:	08 f4       	brcc	.+2      	; 0x4f52 <updateOdomData+0xe6>
    4f50:	68 c0       	rjmp	.+208    	; 0x5022 <updateOdomData+0x1b6>
            if(calibration[calibVelIndex-2][7] >= tempVel) {
    4f52:	f0 e0       	ldi	r31, 0x00	; 0
    4f54:	df 01       	movw	r26, r30
    4f56:	a2 95       	swap	r26
    4f58:	b2 95       	swap	r27
    4f5a:	b0 7f       	andi	r27, 0xF0	; 240
    4f5c:	ba 27       	eor	r27, r26
    4f5e:	a0 7f       	andi	r26, 0xF0	; 240
    4f60:	ba 27       	eor	r27, r26
    4f62:	ac 55       	subi	r26, 0x5C	; 92
    4f64:	b7 4f       	sbci	r27, 0xF7	; 247
    4f66:	1e 96       	adiw	r26, 0x0e	; 14
    4f68:	2d 91       	ld	r18, X+
    4f6a:	3c 91       	ld	r19, X
    4f6c:	1f 97       	sbiw	r26, 0x0f	; 15
    4f6e:	80 91 58 0b 	lds	r24, 0x0B58
    4f72:	90 91 59 0b 	lds	r25, 0x0B59
    4f76:	28 17       	cp	r18, r24
    4f78:	39 07       	cpc	r19, r25
    4f7a:	34 f0       	brlt	.+12     	; 0x4f88 <updateOdomData+0x11c>
                tempVel = calibration[calibVelIndex-2][7]+1;
    4f7c:	c9 01       	movw	r24, r18
    4f7e:	01 96       	adiw	r24, 0x01	; 1
    4f80:	90 93 59 0b 	sts	0x0B59, r25
    4f84:	80 93 58 0b 	sts	0x0B58, r24
            }
        }
		calibration[calibVelIndex-1][6] = avgRightSpeed;
    4f88:	e2 95       	swap	r30
    4f8a:	f2 95       	swap	r31
    4f8c:	f0 7f       	andi	r31, 0xF0	; 240
    4f8e:	fe 27       	eor	r31, r30
    4f90:	e0 7f       	andi	r30, 0xF0	; 240
    4f92:	fe 27       	eor	r31, r30
    4f94:	ec 54       	subi	r30, 0x4C	; 76
    4f96:	f7 4f       	sbci	r31, 0xF7	; 247
    4f98:	20 91 b6 04 	lds	r18, 0x04B6
    4f9c:	30 91 b7 04 	lds	r19, 0x04B7
    4fa0:	35 87       	std	Z+13, r19	; 0x0d
    4fa2:	24 87       	std	Z+12, r18	; 0x0c
        calibration[calibVelIndex-1][7] = tempVel;
    4fa4:	97 87       	std	Z+15, r25	; 0x0f
    4fa6:	86 87       	std	Z+14, r24	; 0x0e
    4fa8:	08 95       	ret


void updateOdomData() {

    if(calibWheel == LEFT_WHEEL_FW_SC) {
        if(calibVelIndex>1) {
    4faa:	f0 e0       	ldi	r31, 0x00	; 0
    4fac:	80 91 58 0b 	lds	r24, 0x0B58
    4fb0:	90 91 59 0b 	lds	r25, 0x0B59
    4fb4:	7f cf       	rjmp	.-258    	; 0x4eb4 <updateOdomData+0x48>
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
        calibration[calibVelIndex-1][3] = tempVel;
    } else if(calibWheel == LEFT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    4fb6:	e0 91 9d 08 	lds	r30, 0x089D
    4fba:	e2 30       	cpi	r30, 0x02	; 2
    4fbc:	c0 f1       	brcs	.+112    	; 0x502e <updateOdomData+0x1c2>
            if(calibration[calibVelIndex-2][5] >= tempVel) {
    4fbe:	f0 e0       	ldi	r31, 0x00	; 0
    4fc0:	df 01       	movw	r26, r30
    4fc2:	a2 95       	swap	r26
    4fc4:	b2 95       	swap	r27
    4fc6:	b0 7f       	andi	r27, 0xF0	; 240
    4fc8:	ba 27       	eor	r27, r26
    4fca:	a0 7f       	andi	r26, 0xF0	; 240
    4fcc:	ba 27       	eor	r27, r26
    4fce:	ac 55       	subi	r26, 0x5C	; 92
    4fd0:	b7 4f       	sbci	r27, 0xF7	; 247
    4fd2:	1a 96       	adiw	r26, 0x0a	; 10
    4fd4:	2d 91       	ld	r18, X+
    4fd6:	3c 91       	ld	r19, X
    4fd8:	1b 97       	sbiw	r26, 0x0b	; 11
    4fda:	80 91 58 0b 	lds	r24, 0x0B58
    4fde:	90 91 59 0b 	lds	r25, 0x0B59
    4fe2:	28 17       	cp	r18, r24
    4fe4:	39 07       	cpc	r19, r25
    4fe6:	34 f0       	brlt	.+12     	; 0x4ff4 <updateOdomData+0x188>
                tempVel = calibration[calibVelIndex-2][5]+1;
    4fe8:	c9 01       	movw	r24, r18
    4fea:	01 96       	adiw	r24, 0x01	; 1
    4fec:	90 93 59 0b 	sts	0x0B59, r25
    4ff0:	80 93 58 0b 	sts	0x0B58, r24
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
    4ff4:	e2 95       	swap	r30
    4ff6:	f2 95       	swap	r31
    4ff8:	f0 7f       	andi	r31, 0xF0	; 240
    4ffa:	fe 27       	eor	r31, r30
    4ffc:	e0 7f       	andi	r30, 0xF0	; 240
    4ffe:	fe 27       	eor	r31, r30
    5000:	ec 54       	subi	r30, 0x4C	; 76
    5002:	f7 4f       	sbci	r31, 0xF7	; 247
    5004:	20 91 b4 04 	lds	r18, 0x04B4
    5008:	30 91 b5 04 	lds	r19, 0x04B5
    500c:	31 87       	std	Z+9, r19	; 0x09
    500e:	20 87       	std	Z+8, r18	; 0x08
        calibration[calibVelIndex-1][5] = tempVel;
    5010:	93 87       	std	Z+11, r25	; 0x0b
    5012:	82 87       	std	Z+10, r24	; 0x0a
    5014:	08 95       	ret
            }
        }
        calibration[calibVelIndex-1][0] = avgLeftSpeed;
        calibration[calibVelIndex-1][1] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_FW_SC) {
        if(calibVelIndex>1) {
    5016:	f0 e0       	ldi	r31, 0x00	; 0
    5018:	80 91 58 0b 	lds	r24, 0x0B58
    501c:	90 91 59 0b 	lds	r25, 0x0B59
    5020:	82 cf       	rjmp	.-252    	; 0x4f26 <updateOdomData+0xba>
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
        calibration[calibVelIndex-1][5] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    5022:	f0 e0       	ldi	r31, 0x00	; 0
    5024:	80 91 58 0b 	lds	r24, 0x0B58
    5028:	90 91 59 0b 	lds	r25, 0x0B59
    502c:	ad cf       	rjmp	.-166    	; 0x4f88 <updateOdomData+0x11c>
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
        calibration[calibVelIndex-1][3] = tempVel;
    } else if(calibWheel == LEFT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    502e:	f0 e0       	ldi	r31, 0x00	; 0
    5030:	80 91 58 0b 	lds	r24, 0x0B58
    5034:	90 91 59 0b 	lds	r25, 0x0B59
    5038:	dd cf       	rjmp	.-70     	; 0x4ff4 <updateOdomData+0x188>

0000503a <handleCalibration>:

}

void handleCalibration() {

	switch(calibState) {
    503a:	80 91 43 0b 	lds	r24, 0x0B43
    503e:	82 30       	cpi	r24, 0x02	; 2
    5040:	09 f4       	brne	.+2      	; 0x5044 <handleCalibration+0xa>
    5042:	d0 c0       	rjmp	.+416    	; 0x51e4 <handleCalibration+0x1aa>
    5044:	83 30       	cpi	r24, 0x03	; 3
    5046:	08 f4       	brcc	.+2      	; 0x504a <handleCalibration+0x10>
    5048:	3f c0       	rjmp	.+126    	; 0x50c8 <handleCalibration+0x8e>
    504a:	84 30       	cpi	r24, 0x04	; 4
    504c:	09 f4       	brne	.+2      	; 0x5050 <handleCalibration+0x16>
    504e:	91 c0       	rjmp	.+290    	; 0x5172 <handleCalibration+0x138>
    5050:	84 30       	cpi	r24, 0x04	; 4
    5052:	08 f0       	brcs	.+2      	; 0x5056 <handleCalibration+0x1c>
    5054:	63 c0       	rjmp	.+198    	; 0x511c <handleCalibration+0xe2>
                calibState = 5;
			}
            break;

		case 3: // look for black line again, stop time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    5056:	80 91 33 05 	lds	r24, 0x0533
    505a:	88 23       	and	r24, r24
    505c:	09 f4       	brne	.+2      	; 0x5060 <handleCalibration+0x26>
    505e:	e1 c0       	rjmp	.+450    	; 0x5222 <handleCalibration+0x1e8>
    5060:	82 30       	cpi	r24, 0x02	; 2
    5062:	09 f4       	brne	.+2      	; 0x5066 <handleCalibration+0x2c>
    5064:	de c0       	rjmp	.+444    	; 0x5222 <handleCalibration+0x1e8>
                    updateOdomData();
                    calibState = 4;
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
            	if(proximityResult[11]<(512-2*HYSTERESIS_THR)) {
    5066:	80 91 6f 02 	lds	r24, 0x026F
    506a:	90 91 70 02 	lds	r25, 0x0270
    506e:	21 e0       	ldi	r18, 0x01	; 1
    5070:	8a 36       	cpi	r24, 0x6A	; 106
    5072:	92 07       	cpc	r25, r18
    5074:	0c f4       	brge	.+2      	; 0x5078 <handleCalibration+0x3e>
    5076:	8a c1       	rjmp	.+788    	; 0x538c <handleCalibration+0x352>
					updateOdomData();
                    calibState = 4;
                    timeoutOdometry = getTime100MicroSec();;
				}
			}
			if((getTime100MicroSec() - timeoutOdometry)>PAUSE_60_SEC) {    // the robot seems to be still, go to next velcoity
    5078:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <getTime100MicroSec>
    507c:	20 91 13 0b 	lds	r18, 0x0B13
    5080:	30 91 14 0b 	lds	r19, 0x0B14
    5084:	40 91 15 0b 	lds	r20, 0x0B15
    5088:	50 91 16 0b 	lds	r21, 0x0B16
    508c:	62 1b       	sub	r22, r18
    508e:	73 0b       	sbc	r23, r19
    5090:	84 0b       	sbc	r24, r20
    5092:	95 0b       	sbc	r25, r21
    5094:	6c 39       	cpi	r22, 0x9C	; 156
    5096:	2d ec       	ldi	r18, 0xCD	; 205
    5098:	72 07       	cpc	r23, r18
    509a:	28 e0       	ldi	r18, 0x08	; 8
    509c:	82 07       	cpc	r24, r18
    509e:	20 e0       	ldi	r18, 0x00	; 0
    50a0:	92 07       	cpc	r25, r18
    50a2:	d8 f1       	brcs	.+118    	; 0x511a <handleCalibration+0xe0>
            	tempVel = 0;
    50a4:	10 92 59 0b 	sts	0x0B59, r1
    50a8:	10 92 58 0b 	sts	0x0B58, r1
				avgLeftSpeed = 0;
    50ac:	10 92 b5 04 	sts	0x04B5, r1
    50b0:	10 92 b4 04 	sts	0x04B4, r1
				avgRightSpeed = 0;
    50b4:	10 92 b7 04 	sts	0x04B7, r1
    50b8:	10 92 b6 04 	sts	0x04B6, r1
                updateOdomData();
    50bc:	0e 94 36 27 	call	0x4e6c	; 0x4e6c <updateOdomData>
                calibState = 5;
    50c0:	85 e0       	ldi	r24, 0x05	; 5
    50c2:	80 93 43 0b 	sts	0x0B43, r24
    50c6:	08 95       	ret

}

void handleCalibration() {

	switch(calibState) {
    50c8:	88 23       	and	r24, r24
    50ca:	29 f5       	brne	.+74     	; 0x5116 <handleCalibration+0xdc>

    	case 0: // set speed
        	if(calibWheel == LEFT_WHEEL_FW_SC) {
    50cc:	80 91 33 05 	lds	r24, 0x0533
    50d0:	88 23       	and	r24, r24
    50d2:	09 f0       	breq	.+2      	; 0x50d6 <handleCalibration+0x9c>
    50d4:	3c c1       	rjmp	.+632    	; 0x534e <handleCalibration+0x314>
				pwm_intermediate_right_desired = 0;
    50d6:	10 92 fe 02 	sts	0x02FE, r1
    50da:	10 92 fd 02 	sts	0x02FD, r1
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
    50de:	90 91 9d 08 	lds	r25, 0x089D
    50e2:	85 e0       	ldi	r24, 0x05	; 5
    50e4:	98 9f       	mul	r25, r24
    50e6:	c0 01       	movw	r24, r0
    50e8:	11 24       	eor	r1, r1
    50ea:	88 0f       	add	r24, r24
    50ec:	99 1f       	adc	r25, r25
    50ee:	88 0f       	add	r24, r24
    50f0:	99 1f       	adc	r25, r25
    50f2:	90 93 00 03 	sts	0x0300, r25
    50f6:	80 93 ff 02 	sts	0x02FF, r24
				pwm_intermediate_left_desired = -((INDEX_STEP*calibVelIndex)<<2);
        	} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
				pwm_intermediate_right_desired = -((INDEX_STEP*calibVelIndex)<<2);
				pwm_intermediate_left_desired = 0;
			}               
            calibState = 1;
    50fa:	81 e0       	ldi	r24, 0x01	; 1
    50fc:	80 93 43 0b 	sts	0x0B43, r24
            timeoutOdometry = getTime100MicroSec();
    5100:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <getTime100MicroSec>
    5104:	60 93 13 0b 	sts	0x0B13, r22
    5108:	70 93 14 0b 	sts	0x0B14, r23
    510c:	80 93 15 0b 	sts	0x0B15, r24
    5110:	90 93 16 0b 	sts	0x0B16, r25
            break;
    5114:	08 95       	ret

}

void handleCalibration() {

	switch(calibState) {
    5116:	81 30       	cpi	r24, 0x01	; 1
    5118:	71 f0       	breq	.+28     	; 0x5136 <handleCalibration+0xfc>
    511a:	08 95       	ret
    511c:	85 30       	cpi	r24, 0x05	; 5
    511e:	e9 f7       	brne	.-6      	; 0x511a <handleCalibration+0xe0>
                calibState = 5;
			}
            break;

		case 5:
        	calibVelIndex++;
    5120:	80 91 9d 08 	lds	r24, 0x089D
    5124:	8f 5f       	subi	r24, 0xFF	; 255
    5126:	80 93 9d 08 	sts	0x089D, r24
            if(calibVelIndex == 10) {
    512a:	8a 30       	cpi	r24, 0x0A	; 10
    512c:	09 f4       	brne	.+2      	; 0x5130 <handleCalibration+0xf6>
    512e:	8b c1       	rjmp	.+790    	; 0x5446 <handleCalibration+0x40c>
					// red off
					writeCalibrationToFlash();
					calibrateOdomFlag = 0;
				}
			}
			calibState = 0;
    5130:	10 92 43 0b 	sts	0x0B43, r1
    5134:	08 95       	ret
            calibState = 1;
            timeoutOdometry = getTime100MicroSec();
            break;

		case 1: // look for black line, start time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    5136:	80 91 33 05 	lds	r24, 0x0533
    513a:	88 23       	and	r24, r24
    513c:	09 f4       	brne	.+2      	; 0x5140 <handleCalibration+0x106>
    513e:	d0 c0       	rjmp	.+416    	; 0x52e0 <handleCalibration+0x2a6>
    5140:	82 30       	cpi	r24, 0x02	; 2
    5142:	09 f4       	brne	.+2      	; 0x5146 <handleCalibration+0x10c>
    5144:	cd c0       	rjmp	.+410    	; 0x52e0 <handleCalibration+0x2a6>
                    timeOdometry = getTime100MicroSec();;
                    calibState = 2;
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
            	if(proximityResult[11]<(512-2*HYSTERESIS_THR)) {
    5146:	80 91 6f 02 	lds	r24, 0x026F
    514a:	90 91 70 02 	lds	r25, 0x0270
    514e:	21 e0       	ldi	r18, 0x01	; 1
    5150:	8a 36       	cpi	r24, 0x6A	; 106
    5152:	92 07       	cpc	r25, r18
    5154:	0c f0       	brlt	.+2      	; 0x5158 <handleCalibration+0x11e>
    5156:	90 cf       	rjmp	.-224    	; 0x5078 <handleCalibration+0x3e>
				//if((proximityResult[11])<(proximityOffset[11]>>1)) {	
					rightSumCount = 0;
    5158:	10 92 b3 04 	sts	0x04B3, r1
    515c:	10 92 b2 04 	sts	0x04B2, r1
					rightSpeedSumOdom = 0;
    5160:	10 92 ac 04 	sts	0x04AC, r1
    5164:	10 92 ad 04 	sts	0x04AD, r1
    5168:	10 92 ae 04 	sts	0x04AE, r1
    516c:	10 92 af 04 	sts	0x04AF, r1
    5170:	cc c0       	rjmp	.+408    	; 0x530a <handleCalibration+0x2d0>
                calibState = 5;
			}
            break;

		case 4: // exit from black line again
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    5172:	80 91 33 05 	lds	r24, 0x0533
    5176:	88 23       	and	r24, r24
    5178:	49 f1       	breq	.+82     	; 0x51cc <handleCalibration+0x192>
    517a:	82 30       	cpi	r24, 0x02	; 2
    517c:	39 f1       	breq	.+78     	; 0x51cc <handleCalibration+0x192>
            	if(proximityResult[8]>(512-HYSTERESIS_THR)) {
				//if((proximityResult[8])>(proximityOffset[8]>>1)) {	
                	calibState = 5;
				}
			} else {
            	if(proximityResult[11]>(512-HYSTERESIS_THR)) {
    517e:	80 91 6f 02 	lds	r24, 0x026F
    5182:	90 91 70 02 	lds	r25, 0x0270
    5186:	21 e0       	ldi	r18, 0x01	; 1
    5188:	86 3b       	cpi	r24, 0xB6	; 182
    518a:	92 07       	cpc	r25, r18
    518c:	3c f5       	brge	.+78     	; 0x51dc <handleCalibration+0x1a2>
				//if((proximityResult[11])>(proximityOffset[11]>>1)) {	
					calibState = 5;
				}
			}
            if((getTime100MicroSec() - timeoutOdometry)>PAUSE_60_SEC) {    // the robot seems to be still, go to next velocity
    518e:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <getTime100MicroSec>
    5192:	20 91 13 0b 	lds	r18, 0x0B13
    5196:	30 91 14 0b 	lds	r19, 0x0B14
    519a:	40 91 15 0b 	lds	r20, 0x0B15
    519e:	50 91 16 0b 	lds	r21, 0x0B16
    51a2:	62 1b       	sub	r22, r18
    51a4:	73 0b       	sbc	r23, r19
    51a6:	84 0b       	sbc	r24, r20
    51a8:	95 0b       	sbc	r25, r21
    51aa:	6c 39       	cpi	r22, 0x9C	; 156
    51ac:	2d ec       	ldi	r18, 0xCD	; 205
    51ae:	72 07       	cpc	r23, r18
    51b0:	28 e0       	ldi	r18, 0x08	; 8
    51b2:	82 07       	cpc	r24, r18
    51b4:	20 e0       	ldi	r18, 0x00	; 0
    51b6:	92 07       	cpc	r25, r18
    51b8:	08 f4       	brcc	.+2      	; 0x51bc <handleCalibration+0x182>
    51ba:	af cf       	rjmp	.-162    	; 0x511a <handleCalibration+0xe0>
            	tempVel = 0;
    51bc:	10 92 59 0b 	sts	0x0B59, r1
    51c0:	10 92 58 0b 	sts	0x0B58, r1
                //updateOdomData();
                calibState = 5;
    51c4:	85 e0       	ldi	r24, 0x05	; 5
    51c6:	80 93 43 0b 	sts	0x0B43, r24
    51ca:	08 95       	ret
			}
            break;

		case 4: // exit from black line again
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
            	if(proximityResult[8]>(512-HYSTERESIS_THR)) {
    51cc:	80 91 69 02 	lds	r24, 0x0269
    51d0:	90 91 6a 02 	lds	r25, 0x026A
    51d4:	21 e0       	ldi	r18, 0x01	; 1
    51d6:	86 3b       	cpi	r24, 0xB6	; 182
    51d8:	92 07       	cpc	r25, r18
    51da:	cc f2       	brlt	.-78     	; 0x518e <handleCalibration+0x154>
                	calibState = 5;
				}
			} else {
            	if(proximityResult[11]>(512-HYSTERESIS_THR)) {
				//if((proximityResult[11])>(proximityOffset[11]>>1)) {	
					calibState = 5;
    51dc:	85 e0       	ldi	r24, 0x05	; 5
    51de:	80 93 43 0b 	sts	0x0B43, r24
    51e2:	d5 cf       	rjmp	.-86     	; 0x518e <handleCalibration+0x154>
                calibState = 5;
			}
			break;

		case 2: // exit from black line
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    51e4:	80 91 33 05 	lds	r24, 0x0533
    51e8:	88 23       	and	r24, r24
    51ea:	09 f4       	brne	.+2      	; 0x51ee <handleCalibration+0x1b4>
    51ec:	a6 c0       	rjmp	.+332    	; 0x533a <handleCalibration+0x300>
    51ee:	82 30       	cpi	r24, 0x02	; 2
    51f0:	09 f4       	brne	.+2      	; 0x51f4 <handleCalibration+0x1ba>
    51f2:	a3 c0       	rjmp	.+326    	; 0x533a <handleCalibration+0x300>
				//if((proximityResult[8])>(proximityOffset[8]>>1)) {	
                	calibState = 3;
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
            	if(proximityResult[11]>(512-HYSTERESIS_THR)) {
    51f4:	80 91 6f 02 	lds	r24, 0x026F
    51f8:	90 91 70 02 	lds	r25, 0x0270
    51fc:	21 e0       	ldi	r18, 0x01	; 1
    51fe:	86 3b       	cpi	r24, 0xB6	; 182
    5200:	92 07       	cpc	r25, r18
    5202:	0c f4       	brge	.+2      	; 0x5206 <handleCalibration+0x1cc>
    5204:	39 cf       	rjmp	.-398    	; 0x5078 <handleCalibration+0x3e>
				//if((proximityResult[11])>(proximityOffset[11]>>1)) {	
                	calibState = 3;
    5206:	83 e0       	ldi	r24, 0x03	; 3
    5208:	80 93 43 0b 	sts	0x0B43, r24
                    timeoutOdometry = getTime100MicroSec();;
    520c:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <getTime100MicroSec>
    5210:	60 93 13 0b 	sts	0x0B13, r22
    5214:	70 93 14 0b 	sts	0x0B14, r23
    5218:	80 93 15 0b 	sts	0x0B15, r24
    521c:	90 93 16 0b 	sts	0x0B16, r25
    5220:	2b cf       	rjmp	.-426    	; 0x5078 <handleCalibration+0x3e>
			}
            break;

		case 3: // look for black line again, stop time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
            	if(proximityResult[8]<(512-2*HYSTERESIS_THR)) {
    5222:	80 91 69 02 	lds	r24, 0x0269
    5226:	90 91 6a 02 	lds	r25, 0x026A
    522a:	21 e0       	ldi	r18, 0x01	; 1
    522c:	8a 36       	cpi	r24, 0x6A	; 106
    522e:	92 07       	cpc	r25, r18
    5230:	0c f0       	brlt	.+2      	; 0x5234 <handleCalibration+0x1fa>
    5232:	22 cf       	rjmp	.-444    	; 0x5078 <handleCalibration+0x3e>
				//if((proximityResult[8])<(proximityOffset[8]>>1)) {	
                	timeOdometry = getTime100MicroSec() - timeOdometry;
    5234:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <getTime100MicroSec>
    5238:	20 91 2c 05 	lds	r18, 0x052C
    523c:	30 91 2d 05 	lds	r19, 0x052D
    5240:	40 91 2e 05 	lds	r20, 0x052E
    5244:	50 91 2f 05 	lds	r21, 0x052F
    5248:	62 1b       	sub	r22, r18
    524a:	73 0b       	sbc	r23, r19
    524c:	84 0b       	sbc	r24, r20
    524e:	95 0b       	sbc	r25, r21
    5250:	60 93 2c 05 	sts	0x052C, r22
    5254:	70 93 2d 05 	sts	0x052D, r23
    5258:	80 93 2e 05 	sts	0x052E, r24
    525c:	90 93 2f 05 	sts	0x052F, r25
                    tempVel = (unsigned int)(DISTANCE_MM/((float)timeOdometry*104.0/1000000.0));
    5260:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <__floatunsisf>
    5264:	20 e0       	ldi	r18, 0x00	; 0
    5266:	30 e0       	ldi	r19, 0x00	; 0
    5268:	40 ed       	ldi	r20, 0xD0	; 208
    526a:	52 e4       	ldi	r21, 0x42	; 66
    526c:	0e 94 90 51 	call	0xa320	; 0xa320 <__mulsf3>
    5270:	20 e0       	ldi	r18, 0x00	; 0
    5272:	34 e2       	ldi	r19, 0x24	; 36
    5274:	44 e7       	ldi	r20, 0x74	; 116
    5276:	59 e4       	ldi	r21, 0x49	; 73
    5278:	0e 94 e0 4f 	call	0x9fc0	; 0x9fc0 <__divsf3>
    527c:	9b 01       	movw	r18, r22
    527e:	ac 01       	movw	r20, r24
    5280:	64 e1       	ldi	r22, 0x14	; 20
    5282:	7e e2       	ldi	r23, 0x2E	; 46
    5284:	88 e7       	ldi	r24, 0x78	; 120
    5286:	93 e4       	ldi	r25, 0x43	; 67
    5288:	0e 94 e0 4f 	call	0x9fc0	; 0x9fc0 <__divsf3>
    528c:	0e 94 4d 50 	call	0xa09a	; 0xa09a <__fixunssfsi>
    5290:	70 93 59 0b 	sts	0x0B59, r23
    5294:	60 93 58 0b 	sts	0x0B58, r22
					avgLeftSpeed = leftSpeedSumOdom/leftSumCount;
    5298:	20 91 b0 04 	lds	r18, 0x04B0
    529c:	30 91 b1 04 	lds	r19, 0x04B1
    52a0:	40 e0       	ldi	r20, 0x00	; 0
    52a2:	50 e0       	ldi	r21, 0x00	; 0
    52a4:	60 91 a8 04 	lds	r22, 0x04A8
    52a8:	70 91 a9 04 	lds	r23, 0x04A9
    52ac:	80 91 aa 04 	lds	r24, 0x04AA
    52b0:	90 91 ab 04 	lds	r25, 0x04AB
    52b4:	0e 94 61 52 	call	0xa4c2	; 0xa4c2 <__divmodsi4>
    52b8:	30 93 b5 04 	sts	0x04B5, r19
    52bc:	20 93 b4 04 	sts	0x04B4, r18
            	if(proximityResult[11]<(512-2*HYSTERESIS_THR)) {
				//if((proximityResult[11])<(proximityOffset[11]>>1)) {	
                	timeOdometry = getTime100MicroSec() - timeOdometry;
                    tempVel = (unsigned int)(DISTANCE_MM/((float)timeOdometry*104.0/1000000.0));
                    avgRightSpeed = rightSpeedSumOdom/rightSumCount;
					updateOdomData();
    52c0:	0e 94 36 27 	call	0x4e6c	; 0x4e6c <updateOdomData>
                    calibState = 4;
    52c4:	84 e0       	ldi	r24, 0x04	; 4
    52c6:	80 93 43 0b 	sts	0x0B43, r24
                    timeoutOdometry = getTime100MicroSec();;
    52ca:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <getTime100MicroSec>
    52ce:	60 93 13 0b 	sts	0x0B13, r22
    52d2:	70 93 14 0b 	sts	0x0B14, r23
    52d6:	80 93 15 0b 	sts	0x0B15, r24
    52da:	90 93 16 0b 	sts	0x0B16, r25
    52de:	cc ce       	rjmp	.-616    	; 0x5078 <handleCalibration+0x3e>
            timeoutOdometry = getTime100MicroSec();
            break;

		case 1: // look for black line, start time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
            	if(proximityResult[8]<(512-2*HYSTERESIS_THR)) {
    52e0:	80 91 69 02 	lds	r24, 0x0269
    52e4:	90 91 6a 02 	lds	r25, 0x026A
    52e8:	21 e0       	ldi	r18, 0x01	; 1
    52ea:	8a 36       	cpi	r24, 0x6A	; 106
    52ec:	92 07       	cpc	r25, r18
    52ee:	0c f0       	brlt	.+2      	; 0x52f2 <handleCalibration+0x2b8>
    52f0:	c3 ce       	rjmp	.-634    	; 0x5078 <handleCalibration+0x3e>
				//if((proximityResult[8])<(proximityOffset[8]>>1)) {				
                	leftSumCount = 0;
    52f2:	10 92 b1 04 	sts	0x04B1, r1
    52f6:	10 92 b0 04 	sts	0x04B0, r1
                    leftSpeedSumOdom = 0;
    52fa:	10 92 a8 04 	sts	0x04A8, r1
    52fe:	10 92 a9 04 	sts	0x04A9, r1
    5302:	10 92 aa 04 	sts	0x04AA, r1
    5306:	10 92 ab 04 	sts	0x04AB, r1
			} else {
            	if(proximityResult[11]<(512-2*HYSTERESIS_THR)) {
				//if((proximityResult[11])<(proximityOffset[11]>>1)) {	
					rightSumCount = 0;
					rightSpeedSumOdom = 0;
                    timeOdometry = getTime100MicroSec();;
    530a:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <getTime100MicroSec>
    530e:	60 93 2c 05 	sts	0x052C, r22
    5312:	70 93 2d 05 	sts	0x052D, r23
    5316:	80 93 2e 05 	sts	0x052E, r24
    531a:	90 93 2f 05 	sts	0x052F, r25
                    calibState = 2;
    531e:	82 e0       	ldi	r24, 0x02	; 2
    5320:	80 93 43 0b 	sts	0x0B43, r24
                    timeoutOdometry = getTime100MicroSec();;
    5324:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <getTime100MicroSec>
    5328:	60 93 13 0b 	sts	0x0B13, r22
    532c:	70 93 14 0b 	sts	0x0B14, r23
    5330:	80 93 15 0b 	sts	0x0B15, r24
    5334:	90 93 16 0b 	sts	0x0B16, r25
    5338:	9f ce       	rjmp	.-706    	; 0x5078 <handleCalibration+0x3e>
			}
			break;

		case 2: // exit from black line
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
            	if(proximityResult[8]>(512-HYSTERESIS_THR)) {
    533a:	80 91 69 02 	lds	r24, 0x0269
    533e:	90 91 6a 02 	lds	r25, 0x026A
    5342:	21 e0       	ldi	r18, 0x01	; 1
    5344:	86 3b       	cpi	r24, 0xB6	; 182
    5346:	92 07       	cpc	r25, r18
    5348:	0c f4       	brge	.+2      	; 0x534c <handleCalibration+0x312>
    534a:	96 ce       	rjmp	.-724    	; 0x5078 <handleCalibration+0x3e>
    534c:	5c cf       	rjmp	.-328    	; 0x5206 <handleCalibration+0x1cc>

    	case 0: // set speed
        	if(calibWheel == LEFT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = 0;
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    534e:	81 30       	cpi	r24, 0x01	; 1
    5350:	09 f4       	brne	.+2      	; 0x5354 <handleCalibration+0x31a>
    5352:	84 c0       	rjmp	.+264    	; 0x545c <handleCalibration+0x422>
				pwm_intermediate_right_desired = (INDEX_STEP*calibVelIndex)<<2;
				pwm_intermediate_left_desired = 0;
			} else if(calibWheel == LEFT_WHEEL_BW_SC) {
    5354:	82 30       	cpi	r24, 0x02	; 2
    5356:	09 f4       	brne	.+2      	; 0x535a <handleCalibration+0x320>
    5358:	60 c0       	rjmp	.+192    	; 0x541a <handleCalibration+0x3e0>
				pwm_intermediate_right_desired = 0;
				pwm_intermediate_left_desired = -((INDEX_STEP*calibVelIndex)<<2);
        	} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    535a:	83 30       	cpi	r24, 0x03	; 3
    535c:	09 f0       	breq	.+2      	; 0x5360 <handleCalibration+0x326>
    535e:	cd ce       	rjmp	.-614    	; 0x50fa <handleCalibration+0xc0>
				pwm_intermediate_right_desired = -((INDEX_STEP*calibVelIndex)<<2);
    5360:	90 91 9d 08 	lds	r25, 0x089D
    5364:	85 e0       	ldi	r24, 0x05	; 5
    5366:	98 9f       	mul	r25, r24
    5368:	c0 01       	movw	r24, r0
    536a:	11 24       	eor	r1, r1
    536c:	88 0f       	add	r24, r24
    536e:	99 1f       	adc	r25, r25
    5370:	88 0f       	add	r24, r24
    5372:	99 1f       	adc	r25, r25
    5374:	90 95       	com	r25
    5376:	81 95       	neg	r24
    5378:	9f 4f       	sbci	r25, 0xFF	; 255
    537a:	90 93 fe 02 	sts	0x02FE, r25
    537e:	80 93 fd 02 	sts	0x02FD, r24
				pwm_intermediate_left_desired = 0;
    5382:	10 92 00 03 	sts	0x0300, r1
    5386:	10 92 ff 02 	sts	0x02FF, r1
    538a:	b7 ce       	rjmp	.-658    	; 0x50fa <handleCalibration+0xc0>
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
            	if(proximityResult[11]<(512-2*HYSTERESIS_THR)) {
				//if((proximityResult[11])<(proximityOffset[11]>>1)) {	
                	timeOdometry = getTime100MicroSec() - timeOdometry;
    538c:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <getTime100MicroSec>
    5390:	20 91 2c 05 	lds	r18, 0x052C
    5394:	30 91 2d 05 	lds	r19, 0x052D
    5398:	40 91 2e 05 	lds	r20, 0x052E
    539c:	50 91 2f 05 	lds	r21, 0x052F
    53a0:	62 1b       	sub	r22, r18
    53a2:	73 0b       	sbc	r23, r19
    53a4:	84 0b       	sbc	r24, r20
    53a6:	95 0b       	sbc	r25, r21
    53a8:	60 93 2c 05 	sts	0x052C, r22
    53ac:	70 93 2d 05 	sts	0x052D, r23
    53b0:	80 93 2e 05 	sts	0x052E, r24
    53b4:	90 93 2f 05 	sts	0x052F, r25
                    tempVel = (unsigned int)(DISTANCE_MM/((float)timeOdometry*104.0/1000000.0));
    53b8:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <__floatunsisf>
    53bc:	20 e0       	ldi	r18, 0x00	; 0
    53be:	30 e0       	ldi	r19, 0x00	; 0
    53c0:	40 ed       	ldi	r20, 0xD0	; 208
    53c2:	52 e4       	ldi	r21, 0x42	; 66
    53c4:	0e 94 90 51 	call	0xa320	; 0xa320 <__mulsf3>
    53c8:	20 e0       	ldi	r18, 0x00	; 0
    53ca:	34 e2       	ldi	r19, 0x24	; 36
    53cc:	44 e7       	ldi	r20, 0x74	; 116
    53ce:	59 e4       	ldi	r21, 0x49	; 73
    53d0:	0e 94 e0 4f 	call	0x9fc0	; 0x9fc0 <__divsf3>
    53d4:	9b 01       	movw	r18, r22
    53d6:	ac 01       	movw	r20, r24
    53d8:	64 e1       	ldi	r22, 0x14	; 20
    53da:	7e e2       	ldi	r23, 0x2E	; 46
    53dc:	88 e7       	ldi	r24, 0x78	; 120
    53de:	93 e4       	ldi	r25, 0x43	; 67
    53e0:	0e 94 e0 4f 	call	0x9fc0	; 0x9fc0 <__divsf3>
    53e4:	0e 94 4d 50 	call	0xa09a	; 0xa09a <__fixunssfsi>
    53e8:	70 93 59 0b 	sts	0x0B59, r23
    53ec:	60 93 58 0b 	sts	0x0B58, r22
                    avgRightSpeed = rightSpeedSumOdom/rightSumCount;
    53f0:	20 91 b2 04 	lds	r18, 0x04B2
    53f4:	30 91 b3 04 	lds	r19, 0x04B3
    53f8:	40 e0       	ldi	r20, 0x00	; 0
    53fa:	50 e0       	ldi	r21, 0x00	; 0
    53fc:	60 91 ac 04 	lds	r22, 0x04AC
    5400:	70 91 ad 04 	lds	r23, 0x04AD
    5404:	80 91 ae 04 	lds	r24, 0x04AE
    5408:	90 91 af 04 	lds	r25, 0x04AF
    540c:	0e 94 61 52 	call	0xa4c2	; 0xa4c2 <__divmodsi4>
    5410:	30 93 b7 04 	sts	0x04B7, r19
    5414:	20 93 b6 04 	sts	0x04B6, r18
    5418:	53 cf       	rjmp	.-346    	; 0x52c0 <handleCalibration+0x286>
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = (INDEX_STEP*calibVelIndex)<<2;
				pwm_intermediate_left_desired = 0;
			} else if(calibWheel == LEFT_WHEEL_BW_SC) {
				pwm_intermediate_right_desired = 0;
    541a:	10 92 fe 02 	sts	0x02FE, r1
    541e:	10 92 fd 02 	sts	0x02FD, r1
				pwm_intermediate_left_desired = -((INDEX_STEP*calibVelIndex)<<2);
    5422:	90 91 9d 08 	lds	r25, 0x089D
    5426:	85 e0       	ldi	r24, 0x05	; 5
    5428:	98 9f       	mul	r25, r24
    542a:	c0 01       	movw	r24, r0
    542c:	11 24       	eor	r1, r1
    542e:	88 0f       	add	r24, r24
    5430:	99 1f       	adc	r25, r25
    5432:	88 0f       	add	r24, r24
    5434:	99 1f       	adc	r25, r25
    5436:	90 95       	com	r25
    5438:	81 95       	neg	r24
    543a:	9f 4f       	sbci	r25, 0xFF	; 255
    543c:	90 93 00 03 	sts	0x0300, r25
    5440:	80 93 ff 02 	sts	0x02FF, r24
    5444:	5a ce       	rjmp	.-844    	; 0x50fa <handleCalibration+0xc0>
            break;

		case 5:
        	calibVelIndex++;
            if(calibVelIndex == 10) {
            	calibVelIndex = 1;
    5446:	91 e0       	ldi	r25, 0x01	; 1
    5448:	90 93 9d 08 	sts	0x089D, r25
                if(calibWheel == LEFT_WHEEL_FW_SC) {
    544c:	80 91 33 05 	lds	r24, 0x0533
    5450:	88 23       	and	r24, r24
    5452:	b9 f4       	brne	.+46     	; 0x5482 <handleCalibration+0x448>
                	calibWheel = LEFT_WHEEL_BW_SC;
    5454:	82 e0       	ldi	r24, 0x02	; 2
    5456:	80 93 33 05 	sts	0x0533, r24
    545a:	6a ce       	rjmp	.-812    	; 0x5130 <handleCalibration+0xf6>
    	case 0: // set speed
        	if(calibWheel == LEFT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = 0;
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = (INDEX_STEP*calibVelIndex)<<2;
    545c:	90 91 9d 08 	lds	r25, 0x089D
    5460:	85 e0       	ldi	r24, 0x05	; 5
    5462:	98 9f       	mul	r25, r24
    5464:	c0 01       	movw	r24, r0
    5466:	11 24       	eor	r1, r1
    5468:	88 0f       	add	r24, r24
    546a:	99 1f       	adc	r25, r25
    546c:	88 0f       	add	r24, r24
    546e:	99 1f       	adc	r25, r25
    5470:	90 93 fe 02 	sts	0x02FE, r25
    5474:	80 93 fd 02 	sts	0x02FD, r24
				pwm_intermediate_left_desired = 0;
    5478:	10 92 00 03 	sts	0x0300, r1
    547c:	10 92 ff 02 	sts	0x02FF, r1
    5480:	3c ce       	rjmp	.-904    	; 0x50fa <handleCalibration+0xc0>
        	calibVelIndex++;
            if(calibVelIndex == 10) {
            	calibVelIndex = 1;
                if(calibWheel == LEFT_WHEEL_FW_SC) {
                	calibWheel = LEFT_WHEEL_BW_SC;
				} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    5482:	81 30       	cpi	r24, 0x01	; 1
    5484:	61 f0       	breq	.+24     	; 0x549e <handleCalibration+0x464>
                	calibWheel = RIGHT_WHEEL_BW_SC;
				} else if(calibWheel == LEFT_WHEEL_BW_SC) {
    5486:	82 30       	cpi	r24, 0x02	; 2
    5488:	71 f0       	breq	.+28     	; 0x54a6 <handleCalibration+0x46c>
                	calibWheel = RIGHT_WHEEL_FW_SC;
					calibrateOdomFlag = 0;
					// red on
				} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    548a:	83 30       	cpi	r24, 0x03	; 3
    548c:	09 f0       	breq	.+2      	; 0x5490 <handleCalibration+0x456>
    548e:	50 ce       	rjmp	.-864    	; 0x5130 <handleCalibration+0xf6>
                	calibWheel = LEFT_WHEEL_FW_SC;					
    5490:	10 92 33 05 	sts	0x0533, r1
					// red off
					writeCalibrationToFlash();
    5494:	0e 94 20 43 	call	0x8640	; 0x8640 <writeCalibrationToFlash>
					calibrateOdomFlag = 0;
    5498:	10 92 4e 05 	sts	0x054E, r1
    549c:	49 ce       	rjmp	.-878    	; 0x5130 <handleCalibration+0xf6>
            if(calibVelIndex == 10) {
            	calibVelIndex = 1;
                if(calibWheel == LEFT_WHEEL_FW_SC) {
                	calibWheel = LEFT_WHEEL_BW_SC;
				} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
                	calibWheel = RIGHT_WHEEL_BW_SC;
    549e:	83 e0       	ldi	r24, 0x03	; 3
    54a0:	80 93 33 05 	sts	0x0533, r24
    54a4:	45 ce       	rjmp	.-886    	; 0x5130 <handleCalibration+0xf6>
				} else if(calibWheel == LEFT_WHEEL_BW_SC) {
                	calibWheel = RIGHT_WHEEL_FW_SC;
    54a6:	90 93 33 05 	sts	0x0533, r25
					calibrateOdomFlag = 0;
    54aa:	10 92 4e 05 	sts	0x054E, r1
    54ae:	40 ce       	rjmp	.-896    	; 0x5130 <handleCalibration+0xf6>

000054b0 <getInputFromSpeed>:

}

// extract data to pass to speed controller given a desired speed in mm/s
// mode => return a measured speed 0..1023
signed int getInputFromSpeed(signed int s, unsigned char mode) {
    54b0:	af 92       	push	r10
    54b2:	bf 92       	push	r11
    54b4:	cf 92       	push	r12
    54b6:	df 92       	push	r13
    54b8:	ef 92       	push	r14
    54ba:	ff 92       	push	r15
    54bc:	0f 93       	push	r16
    54be:	1f 93       	push	r17
    54c0:	cf 93       	push	r28
    54c2:	df 93       	push	r29
    
    int i = 0;
    signed int currVel = s*BYTE_TO_MM_S;
    54c4:	9c 01       	movw	r18, r24
    54c6:	22 0f       	add	r18, r18
    54c8:	33 1f       	adc	r19, r19
    54ca:	22 0f       	add	r18, r18
    54cc:	33 1f       	adc	r19, r19
    54ce:	28 0f       	add	r18, r24
    54d0:	39 1f       	adc	r19, r25
    signed int temp = 0;

    if(currVel == 0) {
    54d2:	21 15       	cp	r18, r1
    54d4:	31 05       	cpc	r19, r1
    54d6:	09 f4       	brne	.+2      	; 0x54da <getInputFromSpeed+0x2a>
    54d8:	7b c0       	rjmp	.+246    	; 0x55d0 <getInputFromSpeed+0x120>
        return 0;
    }

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
    54da:	86 2f       	mov	r24, r22
    54dc:	82 50       	subi	r24, 0x02	; 2
    54de:	82 30       	cpi	r24, 0x02	; 2
    54e0:	08 f4       	brcc	.+2      	; 0x54e4 <getInputFromSpeed+0x34>
    54e2:	84 c0       	rjmp	.+264    	; 0x55ec <getInputFromSpeed+0x13c>
        currVel = -currVel; // consider only positive values
    54e4:	66 23       	and	r22, r22
    54e6:	09 f0       	breq	.+2      	; 0x54ea <getInputFromSpeed+0x3a>
    54e8:	84 c0       	rjmp	.+264    	; 0x55f2 <getInputFromSpeed+0x142>
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
    54ea:	80 91 c6 08 	lds	r24, 0x08C6
    54ee:	90 91 c7 08 	lds	r25, 0x08C7
    54f2:	82 17       	cp	r24, r18
    54f4:	93 07       	cpc	r25, r19
    54f6:	0c f0       	brlt	.+2      	; 0x54fa <getInputFromSpeed+0x4a>
    54f8:	1b c2       	rjmp	.+1078   	; 0x5930 <getInputFromSpeed+0x480>
    54fa:	80 91 d6 08 	lds	r24, 0x08D6
    54fe:	90 91 d7 08 	lds	r25, 0x08D7
    5502:	82 17       	cp	r24, r18
    5504:	93 07       	cpc	r25, r19
    5506:	0c f0       	brlt	.+2      	; 0x550a <getInputFromSpeed+0x5a>
    5508:	1c c2       	rjmp	.+1080   	; 0x5942 <getInputFromSpeed+0x492>
    550a:	80 91 e6 08 	lds	r24, 0x08E6
    550e:	90 91 e7 08 	lds	r25, 0x08E7
    5512:	82 17       	cp	r24, r18
    5514:	93 07       	cpc	r25, r19
    5516:	0c f0       	brlt	.+2      	; 0x551a <getInputFromSpeed+0x6a>
    5518:	17 c2       	rjmp	.+1070   	; 0x5948 <getInputFromSpeed+0x498>
    551a:	80 91 f6 08 	lds	r24, 0x08F6
    551e:	90 91 f7 08 	lds	r25, 0x08F7
    5522:	82 17       	cp	r24, r18
    5524:	93 07       	cpc	r25, r19
    5526:	0c f0       	brlt	.+2      	; 0x552a <getInputFromSpeed+0x7a>
    5528:	12 c2       	rjmp	.+1060   	; 0x594e <getInputFromSpeed+0x49e>
    552a:	80 91 06 09 	lds	r24, 0x0906
    552e:	90 91 07 09 	lds	r25, 0x0907
    5532:	82 17       	cp	r24, r18
    5534:	93 07       	cpc	r25, r19
    5536:	0c f0       	brlt	.+2      	; 0x553a <getInputFromSpeed+0x8a>
    5538:	fe c1       	rjmp	.+1020   	; 0x5936 <getInputFromSpeed+0x486>
    553a:	80 91 16 09 	lds	r24, 0x0916
    553e:	90 91 17 09 	lds	r25, 0x0917
    5542:	82 17       	cp	r24, r18
    5544:	93 07       	cpc	r25, r19
    5546:	0c f0       	brlt	.+2      	; 0x554a <getInputFromSpeed+0x9a>
    5548:	f9 c1       	rjmp	.+1010   	; 0x593c <getInputFromSpeed+0x48c>
    554a:	80 91 26 09 	lds	r24, 0x0926
    554e:	90 91 27 09 	lds	r25, 0x0927
    5552:	82 17       	cp	r24, r18
    5554:	93 07       	cpc	r25, r19
    5556:	0c f0       	brlt	.+2      	; 0x555a <getInputFromSpeed+0xaa>
    5558:	02 c2       	rjmp	.+1028   	; 0x595e <getInputFromSpeed+0x4ae>
    555a:	80 91 36 09 	lds	r24, 0x0936
    555e:	90 91 37 09 	lds	r25, 0x0937
    5562:	82 17       	cp	r24, r18
    5564:	93 07       	cpc	r25, r19
    5566:	0c f0       	brlt	.+2      	; 0x556a <getInputFromSpeed+0xba>
    5568:	fd c1       	rjmp	.+1018   	; 0x5964 <getInputFromSpeed+0x4b4>
    556a:	c0 91 46 09 	lds	r28, 0x0946
    556e:	d0 91 47 09 	lds	r29, 0x0947
    5572:	c2 17       	cp	r28, r18
    5574:	d3 07       	cpc	r29, r19
    5576:	0c f0       	brlt	.+2      	; 0x557a <getInputFromSpeed+0xca>
    5578:	7a c1       	rjmp	.+756    	; 0x586e <getInputFromSpeed+0x3be>
            temp = currVel*calibration[0][6]/calibration[0][7];
            temp = -temp;
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
    557a:	b9 01       	movw	r22, r18
    557c:	88 27       	eor	r24, r24
    557e:	77 fd       	sbrc	r23, 7
    5580:	80 95       	com	r24
    5582:	98 2f       	mov	r25, r24
    5584:	0e 94 7b 50 	call	0xa0f6	; 0xa0f6 <__floatsisf>
    5588:	7b 01       	movw	r14, r22
    558a:	8c 01       	movw	r16, r24
    558c:	60 91 44 09 	lds	r22, 0x0944
    5590:	70 91 45 09 	lds	r23, 0x0945
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
    5594:	88 27       	eor	r24, r24
    5596:	77 fd       	sbrc	r23, 7
    5598:	80 95       	com	r24
    559a:	98 2f       	mov	r25, r24
    559c:	0e 94 7b 50 	call	0xa0f6	; 0xa0f6 <__floatsisf>
    55a0:	9b 01       	movw	r18, r22
    55a2:	ac 01       	movw	r20, r24
    55a4:	c8 01       	movw	r24, r16
    55a6:	b7 01       	movw	r22, r14
    55a8:	0e 94 90 51 	call	0xa320	; 0xa320 <__mulsf3>
    55ac:	7b 01       	movw	r14, r22
    55ae:	8c 01       	movw	r16, r24
    55b0:	be 01       	movw	r22, r28
    55b2:	88 27       	eor	r24, r24
    55b4:	77 fd       	sbrc	r23, 7
    55b6:	80 95       	com	r24
    55b8:	98 2f       	mov	r25, r24
    55ba:	0e 94 7b 50 	call	0xa0f6	; 0xa0f6 <__floatsisf>
    55be:	9b 01       	movw	r18, r22
    55c0:	ac 01       	movw	r20, r24
    55c2:	c8 01       	movw	r24, r16
    55c4:	b7 01       	movw	r22, r14
    55c6:	0e 94 e0 4f 	call	0x9fc0	; 0x9fc0 <__divsf3>
    55ca:	0e 94 48 50 	call	0xa090	; 0xa090 <__fixsfsi>
    55ce:	02 c0       	rjmp	.+4      	; 0x55d4 <getInputFromSpeed+0x124>
// mode => return a measured speed 0..1023
signed int getInputFromSpeed(signed int s, unsigned char mode) {
    
    int i = 0;
    signed int currVel = s*BYTE_TO_MM_S;
    signed int temp = 0;
    55d0:	60 e0       	ldi	r22, 0x00	; 0
    55d2:	70 e0       	ldi	r23, 0x00	; 0
            temp = -temp;
        }        
    }
    
    return temp;
}
    55d4:	cb 01       	movw	r24, r22
    55d6:	df 91       	pop	r29
    55d8:	cf 91       	pop	r28
    55da:	1f 91       	pop	r17
    55dc:	0f 91       	pop	r16
    55de:	ff 90       	pop	r15
    55e0:	ef 90       	pop	r14
    55e2:	df 90       	pop	r13
    55e4:	cf 90       	pop	r12
    55e6:	bf 90       	pop	r11
    55e8:	af 90       	pop	r10
    55ea:	08 95       	ret
    if(currVel == 0) {
        return 0;
    }

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
        currVel = -currVel; // consider only positive values
    55ec:	30 95       	com	r19
    55ee:	21 95       	neg	r18
    55f0:	3f 4f       	sbci	r19, 0xFF	; 255
    55f2:	63 30       	cpi	r22, 0x03	; 3
    55f4:	09 f4       	brne	.+2      	; 0x55f8 <getInputFromSpeed+0x148>
    55f6:	f3 c0       	rjmp	.+486    	; 0x57de <getInputFromSpeed+0x32e>
    55f8:	62 30       	cpi	r22, 0x02	; 2
    55fa:	01 f1       	breq	.+64     	; 0x563c <getInputFromSpeed+0x18c>
    55fc:	61 30       	cpi	r22, 0x01	; 1
    55fe:	09 f4       	brne	.+2      	; 0x5602 <getInputFromSpeed+0x152>
    5600:	98 c0       	rjmp	.+304    	; 0x5732 <getInputFromSpeed+0x282>
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][6]/calibration[0][7];
            temp = -temp;
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
    5602:	66 23       	and	r22, r22
    5604:	09 f4       	brne	.+2      	; 0x5608 <getInputFromSpeed+0x158>
    5606:	90 c0       	rjmp	.+288    	; 0x5728 <getInputFromSpeed+0x278>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
    5608:	61 30       	cpi	r22, 0x01	; 1
    560a:	09 f4       	brne	.+2      	; 0x560e <getInputFromSpeed+0x15e>
    560c:	8c c1       	rjmp	.+792    	; 0x5926 <getInputFromSpeed+0x476>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
        } else if(mode==LEFT_WHEEL_BW_SC) {
    560e:	62 30       	cpi	r22, 0x02	; 2
    5610:	09 f4       	brne	.+2      	; 0x5614 <getInputFromSpeed+0x164>
    5612:	a0 c1       	rjmp	.+832    	; 0x5954 <getInputFromSpeed+0x4a4>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][4]/(float)calibration[CALIBRATION_SAMPLES-1][5]);
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
    5614:	63 30       	cpi	r22, 0x03	; 3
    5616:	e1 f6       	brne	.-72     	; 0x55d0 <getInputFromSpeed+0x120>
    5618:	c0 91 52 09 	lds	r28, 0x0952
    561c:	d0 91 53 09 	lds	r29, 0x0953
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][6]/(float)calibration[CALIBRATION_SAMPLES-1][7]);
    5620:	b9 01       	movw	r22, r18
    5622:	88 27       	eor	r24, r24
    5624:	77 fd       	sbrc	r23, 7
    5626:	80 95       	com	r24
    5628:	98 2f       	mov	r25, r24
    562a:	0e 94 7b 50 	call	0xa0f6	; 0xa0f6 <__floatsisf>
    562e:	7b 01       	movw	r14, r22
    5630:	8c 01       	movw	r16, r24
    5632:	60 91 50 09 	lds	r22, 0x0950
    5636:	70 91 51 09 	lds	r23, 0x0951
    563a:	55 c0       	rjmp	.+170    	; 0x56e6 <getInputFromSpeed+0x236>
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            if(calibration[i][3] >= currVel) {
                break;
            }
        } else if(mode==LEFT_WHEEL_BW_SC) {
            if(calibration[i][5] >= currVel) {
    563c:	80 91 ce 08 	lds	r24, 0x08CE
    5640:	90 91 cf 08 	lds	r25, 0x08CF
    5644:	82 17       	cp	r24, r18
    5646:	93 07       	cpc	r25, r19
    5648:	0c f0       	brlt	.+2      	; 0x564c <getInputFromSpeed+0x19c>
    564a:	72 c1       	rjmp	.+740    	; 0x5930 <getInputFromSpeed+0x480>
    564c:	80 91 de 08 	lds	r24, 0x08DE
    5650:	90 91 df 08 	lds	r25, 0x08DF
    5654:	82 17       	cp	r24, r18
    5656:	93 07       	cpc	r25, r19
    5658:	0c f0       	brlt	.+2      	; 0x565c <getInputFromSpeed+0x1ac>
    565a:	73 c1       	rjmp	.+742    	; 0x5942 <getInputFromSpeed+0x492>
    565c:	80 91 ee 08 	lds	r24, 0x08EE
    5660:	90 91 ef 08 	lds	r25, 0x08EF
    5664:	82 17       	cp	r24, r18
    5666:	93 07       	cpc	r25, r19
    5668:	0c f0       	brlt	.+2      	; 0x566c <getInputFromSpeed+0x1bc>
    566a:	6e c1       	rjmp	.+732    	; 0x5948 <getInputFromSpeed+0x498>
    566c:	80 91 fe 08 	lds	r24, 0x08FE
    5670:	90 91 ff 08 	lds	r25, 0x08FF
    5674:	82 17       	cp	r24, r18
    5676:	93 07       	cpc	r25, r19
    5678:	0c f0       	brlt	.+2      	; 0x567c <getInputFromSpeed+0x1cc>
    567a:	69 c1       	rjmp	.+722    	; 0x594e <getInputFromSpeed+0x49e>
    567c:	80 91 0e 09 	lds	r24, 0x090E
    5680:	90 91 0f 09 	lds	r25, 0x090F
    5684:	82 17       	cp	r24, r18
    5686:	93 07       	cpc	r25, r19
    5688:	0c f0       	brlt	.+2      	; 0x568c <getInputFromSpeed+0x1dc>
    568a:	55 c1       	rjmp	.+682    	; 0x5936 <getInputFromSpeed+0x486>
    568c:	80 91 1e 09 	lds	r24, 0x091E
    5690:	90 91 1f 09 	lds	r25, 0x091F
    5694:	82 17       	cp	r24, r18
    5696:	93 07       	cpc	r25, r19
    5698:	0c f0       	brlt	.+2      	; 0x569c <getInputFromSpeed+0x1ec>
    569a:	50 c1       	rjmp	.+672    	; 0x593c <getInputFromSpeed+0x48c>
    569c:	80 91 2e 09 	lds	r24, 0x092E
    56a0:	90 91 2f 09 	lds	r25, 0x092F
    56a4:	82 17       	cp	r24, r18
    56a6:	93 07       	cpc	r25, r19
    56a8:	0c f0       	brlt	.+2      	; 0x56ac <getInputFromSpeed+0x1fc>
    56aa:	59 c1       	rjmp	.+690    	; 0x595e <getInputFromSpeed+0x4ae>
    56ac:	80 91 3e 09 	lds	r24, 0x093E
    56b0:	90 91 3f 09 	lds	r25, 0x093F
    56b4:	82 17       	cp	r24, r18
    56b6:	93 07       	cpc	r25, r19
    56b8:	0c f0       	brlt	.+2      	; 0x56bc <getInputFromSpeed+0x20c>
    56ba:	54 c1       	rjmp	.+680    	; 0x5964 <getInputFromSpeed+0x4b4>
    56bc:	c0 91 4e 09 	lds	r28, 0x094E
    56c0:	d0 91 4f 09 	lds	r29, 0x094F
    56c4:	c2 17       	cp	r28, r18
    56c6:	d3 07       	cpc	r29, r19
    56c8:	0c f0       	brlt	.+2      	; 0x56cc <getInputFromSpeed+0x21c>
    56ca:	d1 c0       	rjmp	.+418    	; 0x586e <getInputFromSpeed+0x3be>
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][4]/(float)calibration[CALIBRATION_SAMPLES-1][5]);
    56cc:	b9 01       	movw	r22, r18
    56ce:	88 27       	eor	r24, r24
    56d0:	77 fd       	sbrc	r23, 7
    56d2:	80 95       	com	r24
    56d4:	98 2f       	mov	r25, r24
    56d6:	0e 94 7b 50 	call	0xa0f6	; 0xa0f6 <__floatsisf>
    56da:	7b 01       	movw	r14, r22
    56dc:	8c 01       	movw	r16, r24
    56de:	60 91 4c 09 	lds	r22, 0x094C
    56e2:	70 91 4d 09 	lds	r23, 0x094D
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][6]/(float)calibration[CALIBRATION_SAMPLES-1][7]);
    56e6:	88 27       	eor	r24, r24
    56e8:	77 fd       	sbrc	r23, 7
    56ea:	80 95       	com	r24
    56ec:	98 2f       	mov	r25, r24
    56ee:	0e 94 7b 50 	call	0xa0f6	; 0xa0f6 <__floatsisf>
    56f2:	9b 01       	movw	r18, r22
    56f4:	ac 01       	movw	r20, r24
    56f6:	c8 01       	movw	r24, r16
    56f8:	b7 01       	movw	r22, r14
    56fa:	0e 94 90 51 	call	0xa320	; 0xa320 <__mulsf3>
    56fe:	7b 01       	movw	r14, r22
    5700:	8c 01       	movw	r16, r24
    5702:	be 01       	movw	r22, r28
    5704:	88 27       	eor	r24, r24
    5706:	77 fd       	sbrc	r23, 7
    5708:	80 95       	com	r24
    570a:	98 2f       	mov	r25, r24
    570c:	0e 94 7b 50 	call	0xa0f6	; 0xa0f6 <__floatsisf>
    5710:	9b 01       	movw	r18, r22
    5712:	ac 01       	movw	r20, r24
    5714:	c8 01       	movw	r24, r16
    5716:	b7 01       	movw	r22, r14
    5718:	0e 94 e0 4f 	call	0x9fc0	; 0x9fc0 <__divsf3>
    571c:	0e 94 48 50 	call	0xa090	; 0xa090 <__fixsfsi>
            temp = -temp;
    5720:	70 95       	com	r23
    5722:	61 95       	neg	r22
    5724:	7f 4f       	sbci	r23, 0xFF	; 255
    5726:	56 cf       	rjmp	.-340    	; 0x55d4 <getInputFromSpeed+0x124>
    5728:	c0 91 46 09 	lds	r28, 0x0946
    572c:	d0 91 47 09 	lds	r29, 0x0947
    5730:	24 cf       	rjmp	.-440    	; 0x557a <getInputFromSpeed+0xca>
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
                break;
            }
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            if(calibration[i][3] >= currVel) {
    5732:	80 91 ca 08 	lds	r24, 0x08CA
    5736:	90 91 cb 08 	lds	r25, 0x08CB
    573a:	82 17       	cp	r24, r18
    573c:	93 07       	cpc	r25, r19
    573e:	0c f0       	brlt	.+2      	; 0x5742 <getInputFromSpeed+0x292>
    5740:	f7 c0       	rjmp	.+494    	; 0x5930 <getInputFromSpeed+0x480>
    5742:	80 91 da 08 	lds	r24, 0x08DA
    5746:	90 91 db 08 	lds	r25, 0x08DB
    574a:	82 17       	cp	r24, r18
    574c:	93 07       	cpc	r25, r19
    574e:	0c f0       	brlt	.+2      	; 0x5752 <getInputFromSpeed+0x2a2>
    5750:	f8 c0       	rjmp	.+496    	; 0x5942 <getInputFromSpeed+0x492>
    5752:	80 91 ea 08 	lds	r24, 0x08EA
    5756:	90 91 eb 08 	lds	r25, 0x08EB
    575a:	82 17       	cp	r24, r18
    575c:	93 07       	cpc	r25, r19
    575e:	0c f0       	brlt	.+2      	; 0x5762 <getInputFromSpeed+0x2b2>
    5760:	f3 c0       	rjmp	.+486    	; 0x5948 <getInputFromSpeed+0x498>
    5762:	80 91 fa 08 	lds	r24, 0x08FA
    5766:	90 91 fb 08 	lds	r25, 0x08FB
    576a:	82 17       	cp	r24, r18
    576c:	93 07       	cpc	r25, r19
    576e:	0c f0       	brlt	.+2      	; 0x5772 <getInputFromSpeed+0x2c2>
    5770:	ee c0       	rjmp	.+476    	; 0x594e <getInputFromSpeed+0x49e>
    5772:	80 91 0a 09 	lds	r24, 0x090A
    5776:	90 91 0b 09 	lds	r25, 0x090B
    577a:	82 17       	cp	r24, r18
    577c:	93 07       	cpc	r25, r19
    577e:	0c f0       	brlt	.+2      	; 0x5782 <getInputFromSpeed+0x2d2>
    5780:	da c0       	rjmp	.+436    	; 0x5936 <getInputFromSpeed+0x486>
    5782:	80 91 1a 09 	lds	r24, 0x091A
    5786:	90 91 1b 09 	lds	r25, 0x091B
    578a:	82 17       	cp	r24, r18
    578c:	93 07       	cpc	r25, r19
    578e:	0c f0       	brlt	.+2      	; 0x5792 <getInputFromSpeed+0x2e2>
    5790:	d5 c0       	rjmp	.+426    	; 0x593c <getInputFromSpeed+0x48c>
    5792:	80 91 2a 09 	lds	r24, 0x092A
    5796:	90 91 2b 09 	lds	r25, 0x092B
    579a:	82 17       	cp	r24, r18
    579c:	93 07       	cpc	r25, r19
    579e:	0c f0       	brlt	.+2      	; 0x57a2 <getInputFromSpeed+0x2f2>
    57a0:	de c0       	rjmp	.+444    	; 0x595e <getInputFromSpeed+0x4ae>
    57a2:	80 91 3a 09 	lds	r24, 0x093A
    57a6:	90 91 3b 09 	lds	r25, 0x093B
    57aa:	82 17       	cp	r24, r18
    57ac:	93 07       	cpc	r25, r19
    57ae:	0c f0       	brlt	.+2      	; 0x57b2 <getInputFromSpeed+0x302>
    57b0:	d9 c0       	rjmp	.+434    	; 0x5964 <getInputFromSpeed+0x4b4>
    57b2:	c0 91 4a 09 	lds	r28, 0x094A
    57b6:	d0 91 4b 09 	lds	r29, 0x094B
    57ba:	c2 17       	cp	r28, r18
    57bc:	d3 07       	cpc	r29, r19
    57be:	0c f0       	brlt	.+2      	; 0x57c2 <getInputFromSpeed+0x312>
    57c0:	56 c0       	rjmp	.+172    	; 0x586e <getInputFromSpeed+0x3be>
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
    57c2:	b9 01       	movw	r22, r18
    57c4:	88 27       	eor	r24, r24
    57c6:	77 fd       	sbrc	r23, 7
    57c8:	80 95       	com	r24
    57ca:	98 2f       	mov	r25, r24
    57cc:	0e 94 7b 50 	call	0xa0f6	; 0xa0f6 <__floatsisf>
    57d0:	7b 01       	movw	r14, r22
    57d2:	8c 01       	movw	r16, r24
    57d4:	60 91 48 09 	lds	r22, 0x0948
    57d8:	70 91 49 09 	lds	r23, 0x0949
    57dc:	db ce       	rjmp	.-586    	; 0x5594 <getInputFromSpeed+0xe4>
        } else if(mode==LEFT_WHEEL_BW_SC) {
            if(calibration[i][5] >= currVel) {
                break;
            }
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            if(calibration[i][7] >= currVel) {
    57de:	80 91 d2 08 	lds	r24, 0x08D2
    57e2:	90 91 d3 08 	lds	r25, 0x08D3
    57e6:	82 17       	cp	r24, r18
    57e8:	93 07       	cpc	r25, r19
    57ea:	0c f0       	brlt	.+2      	; 0x57ee <getInputFromSpeed+0x33e>
    57ec:	a1 c0       	rjmp	.+322    	; 0x5930 <getInputFromSpeed+0x480>
    57ee:	80 91 e2 08 	lds	r24, 0x08E2
    57f2:	90 91 e3 08 	lds	r25, 0x08E3
    57f6:	82 17       	cp	r24, r18
    57f8:	93 07       	cpc	r25, r19
    57fa:	0c f0       	brlt	.+2      	; 0x57fe <getInputFromSpeed+0x34e>
    57fc:	a2 c0       	rjmp	.+324    	; 0x5942 <getInputFromSpeed+0x492>
    57fe:	80 91 f2 08 	lds	r24, 0x08F2
    5802:	90 91 f3 08 	lds	r25, 0x08F3
    5806:	82 17       	cp	r24, r18
    5808:	93 07       	cpc	r25, r19
    580a:	0c f0       	brlt	.+2      	; 0x580e <getInputFromSpeed+0x35e>
    580c:	9d c0       	rjmp	.+314    	; 0x5948 <getInputFromSpeed+0x498>
    580e:	80 91 02 09 	lds	r24, 0x0902
    5812:	90 91 03 09 	lds	r25, 0x0903
    5816:	82 17       	cp	r24, r18
    5818:	93 07       	cpc	r25, r19
    581a:	0c f0       	brlt	.+2      	; 0x581e <getInputFromSpeed+0x36e>
    581c:	98 c0       	rjmp	.+304    	; 0x594e <getInputFromSpeed+0x49e>
    581e:	80 91 12 09 	lds	r24, 0x0912
    5822:	90 91 13 09 	lds	r25, 0x0913
    5826:	82 17       	cp	r24, r18
    5828:	93 07       	cpc	r25, r19
    582a:	0c f0       	brlt	.+2      	; 0x582e <getInputFromSpeed+0x37e>
    582c:	84 c0       	rjmp	.+264    	; 0x5936 <getInputFromSpeed+0x486>
    582e:	80 91 22 09 	lds	r24, 0x0922
    5832:	90 91 23 09 	lds	r25, 0x0923
    5836:	82 17       	cp	r24, r18
    5838:	93 07       	cpc	r25, r19
    583a:	0c f0       	brlt	.+2      	; 0x583e <getInputFromSpeed+0x38e>
    583c:	7f c0       	rjmp	.+254    	; 0x593c <getInputFromSpeed+0x48c>
    583e:	80 91 32 09 	lds	r24, 0x0932
    5842:	90 91 33 09 	lds	r25, 0x0933
    5846:	82 17       	cp	r24, r18
    5848:	93 07       	cpc	r25, r19
    584a:	0c f0       	brlt	.+2      	; 0x584e <getInputFromSpeed+0x39e>
    584c:	88 c0       	rjmp	.+272    	; 0x595e <getInputFromSpeed+0x4ae>
    584e:	80 91 42 09 	lds	r24, 0x0942
    5852:	90 91 43 09 	lds	r25, 0x0943
    5856:	82 17       	cp	r24, r18
    5858:	93 07       	cpc	r25, r19
    585a:	0c f0       	brlt	.+2      	; 0x585e <getInputFromSpeed+0x3ae>
    585c:	83 c0       	rjmp	.+262    	; 0x5964 <getInputFromSpeed+0x4b4>
    585e:	c0 91 52 09 	lds	r28, 0x0952
    5862:	d0 91 53 09 	lds	r29, 0x0953
    5866:	c2 17       	cp	r28, r18
    5868:	d3 07       	cpc	r29, r19
    586a:	0c f4       	brge	.+2      	; 0x586e <getInputFromSpeed+0x3be>
    586c:	d9 ce       	rjmp	.-590    	; 0x5620 <getInputFromSpeed+0x170>
        currVel = -currVel; // consider only positive values
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
    586e:	c8 e0       	ldi	r28, 0x08	; 8
    5870:	d0 e0       	ldi	r29, 0x00	; 0
                break;
            }
        } 
    }

    if(i==0) {  // the velocity is lower than first saved in the matrix
    5872:	20 97       	sbiw	r28, 0x00	; 0
    5874:	09 f0       	breq	.+2      	; 0x5878 <getInputFromSpeed+0x3c8>
    5876:	79 c0       	rjmp	.+242    	; 0x596a <getInputFromSpeed+0x4ba>
        if(mode==LEFT_WHEEL_FW_SC) {
    5878:	66 23       	and	r22, r22
    587a:	91 f4       	brne	.+36     	; 0x58a0 <getInputFromSpeed+0x3f0>
            temp = (currVel*calibration[0][0])/calibration[0][1];
    587c:	40 91 c4 08 	lds	r20, 0x08C4
    5880:	50 91 c5 08 	lds	r21, 0x08C5
    5884:	24 9f       	mul	r18, r20
    5886:	c0 01       	movw	r24, r0
    5888:	25 9f       	mul	r18, r21
    588a:	90 0d       	add	r25, r0
    588c:	34 9f       	mul	r19, r20
    588e:	90 0d       	add	r25, r0
    5890:	11 24       	eor	r1, r1
    5892:	60 91 c6 08 	lds	r22, 0x08C6
    5896:	70 91 c7 08 	lds	r23, 0x08C7
    589a:	0e 94 4e 52 	call	0xa49c	; 0xa49c <__divmodhi4>
    589e:	9a ce       	rjmp	.-716    	; 0x55d4 <getInputFromSpeed+0x124>
        } else if(mode==RIGHT_WHEEL_FW_SC) {
    58a0:	61 30       	cpi	r22, 0x01	; 1
    58a2:	d1 f0       	breq	.+52     	; 0x58d8 <getInputFromSpeed+0x428>
            temp = (currVel*calibration[0][2])/calibration[0][3];
        } else if(mode==LEFT_WHEEL_BW_SC) {
    58a4:	62 30       	cpi	r22, 0x02	; 2
    58a6:	51 f1       	breq	.+84     	; 0x58fc <getInputFromSpeed+0x44c>
            temp = currVel*calibration[0][4]/calibration[0][5];
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
    58a8:	63 30       	cpi	r22, 0x03	; 3
    58aa:	09 f0       	breq	.+2      	; 0x58ae <getInputFromSpeed+0x3fe>
    58ac:	91 ce       	rjmp	.-734    	; 0x55d0 <getInputFromSpeed+0x120>
            temp = currVel*calibration[0][6]/calibration[0][7];
    58ae:	40 91 d0 08 	lds	r20, 0x08D0
    58b2:	50 91 d1 08 	lds	r21, 0x08D1
    58b6:	24 9f       	mul	r18, r20
    58b8:	c0 01       	movw	r24, r0
    58ba:	25 9f       	mul	r18, r21
    58bc:	90 0d       	add	r25, r0
    58be:	34 9f       	mul	r19, r20
    58c0:	90 0d       	add	r25, r0
    58c2:	11 24       	eor	r1, r1
    58c4:	60 91 d2 08 	lds	r22, 0x08D2
    58c8:	70 91 d3 08 	lds	r23, 0x08D3
    58cc:	0e 94 4e 52 	call	0xa49c	; 0xa49c <__divmodhi4>
            temp = -temp;
    58d0:	70 95       	com	r23
    58d2:	61 95       	neg	r22
    58d4:	7f 4f       	sbci	r23, 0xFF	; 255
    58d6:	7e ce       	rjmp	.-772    	; 0x55d4 <getInputFromSpeed+0x124>

    if(i==0) {  // the velocity is lower than first saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][0])/calibration[0][1];
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][2])/calibration[0][3];
    58d8:	40 91 c8 08 	lds	r20, 0x08C8
    58dc:	50 91 c9 08 	lds	r21, 0x08C9
    58e0:	24 9f       	mul	r18, r20
    58e2:	c0 01       	movw	r24, r0
    58e4:	25 9f       	mul	r18, r21
    58e6:	90 0d       	add	r25, r0
    58e8:	34 9f       	mul	r19, r20
    58ea:	90 0d       	add	r25, r0
    58ec:	11 24       	eor	r1, r1
    58ee:	60 91 ca 08 	lds	r22, 0x08CA
    58f2:	70 91 cb 08 	lds	r23, 0x08CB
    58f6:	0e 94 4e 52 	call	0xa49c	; 0xa49c <__divmodhi4>
    58fa:	6c ce       	rjmp	.-808    	; 0x55d4 <getInputFromSpeed+0x124>
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][4]/calibration[0][5];
    58fc:	40 91 cc 08 	lds	r20, 0x08CC
    5900:	50 91 cd 08 	lds	r21, 0x08CD
    5904:	24 9f       	mul	r18, r20
    5906:	c0 01       	movw	r24, r0
    5908:	25 9f       	mul	r18, r21
    590a:	90 0d       	add	r25, r0
    590c:	34 9f       	mul	r19, r20
    590e:	90 0d       	add	r25, r0
    5910:	11 24       	eor	r1, r1
    5912:	60 91 ce 08 	lds	r22, 0x08CE
    5916:	70 91 cf 08 	lds	r23, 0x08CF
    591a:	0e 94 4e 52 	call	0xa49c	; 0xa49c <__divmodhi4>
            temp = -temp;
    591e:	70 95       	com	r23
    5920:	61 95       	neg	r22
    5922:	7f 4f       	sbci	r23, 0xFF	; 255
    5924:	57 ce       	rjmp	.-850    	; 0x55d4 <getInputFromSpeed+0x124>
    5926:	c0 91 4a 09 	lds	r28, 0x094A
    592a:	d0 91 4b 09 	lds	r29, 0x094B
    592e:	49 cf       	rjmp	.-366    	; 0x57c2 <getInputFromSpeed+0x312>

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
        currVel = -currVel; // consider only positive values
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    5930:	c0 e0       	ldi	r28, 0x00	; 0
    5932:	d0 e0       	ldi	r29, 0x00	; 0
    5934:	9e cf       	rjmp	.-196    	; 0x5872 <getInputFromSpeed+0x3c2>
    5936:	c4 e0       	ldi	r28, 0x04	; 4
    5938:	d0 e0       	ldi	r29, 0x00	; 0
    593a:	9b cf       	rjmp	.-202    	; 0x5872 <getInputFromSpeed+0x3c2>
    593c:	c5 e0       	ldi	r28, 0x05	; 5
    593e:	d0 e0       	ldi	r29, 0x00	; 0
    5940:	98 cf       	rjmp	.-208    	; 0x5872 <getInputFromSpeed+0x3c2>
    5942:	c1 e0       	ldi	r28, 0x01	; 1
    5944:	d0 e0       	ldi	r29, 0x00	; 0
    5946:	95 cf       	rjmp	.-214    	; 0x5872 <getInputFromSpeed+0x3c2>
    5948:	c2 e0       	ldi	r28, 0x02	; 2
    594a:	d0 e0       	ldi	r29, 0x00	; 0
    594c:	92 cf       	rjmp	.-220    	; 0x5872 <getInputFromSpeed+0x3c2>
    594e:	c3 e0       	ldi	r28, 0x03	; 3
    5950:	d0 e0       	ldi	r29, 0x00	; 0
    5952:	8f cf       	rjmp	.-226    	; 0x5872 <getInputFromSpeed+0x3c2>
    5954:	c0 91 4e 09 	lds	r28, 0x094E
    5958:	d0 91 4f 09 	lds	r29, 0x094F
    595c:	b7 ce       	rjmp	.-658    	; 0x56cc <getInputFromSpeed+0x21c>
    595e:	c6 e0       	ldi	r28, 0x06	; 6
    5960:	d0 e0       	ldi	r29, 0x00	; 0
    5962:	87 cf       	rjmp	.-242    	; 0x5872 <getInputFromSpeed+0x3c2>
    5964:	c7 e0       	ldi	r28, 0x07	; 7
    5966:	d0 e0       	ldi	r29, 0x00	; 0
    5968:	84 cf       	rjmp	.-248    	; 0x5872 <getInputFromSpeed+0x3c2>
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][6]/calibration[0][7];
            temp = -temp;
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    596a:	c9 30       	cpi	r28, 0x09	; 9
    596c:	d1 05       	cpc	r29, r1
    596e:	09 f4       	brne	.+2      	; 0x5972 <getInputFromSpeed+0x4c2>
    5970:	48 ce       	rjmp	.-880    	; 0x5602 <getInputFromSpeed+0x152>
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][6]/(float)calibration[CALIBRATION_SAMPLES-1][7]);
            temp = -temp;
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
    5972:	66 23       	and	r22, r22
    5974:	09 f0       	breq	.+2      	; 0x5978 <getInputFromSpeed+0x4c8>
    5976:	47 c0       	rjmp	.+142    	; 0x5a06 <getInputFromSpeed+0x556>
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
    5978:	fe 01       	movw	r30, r28
    597a:	e2 95       	swap	r30
    597c:	f2 95       	swap	r31
    597e:	f0 7f       	andi	r31, 0xF0	; 240
    5980:	fe 27       	eor	r31, r30
    5982:	e0 7f       	andi	r30, 0xF0	; 240
    5984:	fe 27       	eor	r31, r30
    5986:	ec 54       	subi	r30, 0x4C	; 76
    5988:	f7 4f       	sbci	r31, 0xF7	; 247
    598a:	c2 80       	ldd	r12, Z+2	; 0x02
    598c:	d3 80       	ldd	r13, Z+3	; 0x03
    598e:	a0 80       	ld	r10, Z
    5990:	b1 80       	ldd	r11, Z+1	; 0x01
    5992:	2c 19       	sub	r18, r12
    5994:	3d 09       	sbc	r19, r13
    5996:	b9 01       	movw	r22, r18
    5998:	88 27       	eor	r24, r24
    599a:	77 fd       	sbrc	r23, 7
    599c:	80 95       	com	r24
    599e:	98 2f       	mov	r25, r24
    59a0:	0e 94 7b 50 	call	0xa0f6	; 0xa0f6 <__floatsisf>
    59a4:	7b 01       	movw	r14, r22
    59a6:	8c 01       	movw	r16, r24
    59a8:	c2 95       	swap	r28
    59aa:	d2 95       	swap	r29
    59ac:	d0 7f       	andi	r29, 0xF0	; 240
    59ae:	dc 27       	eor	r29, r28
    59b0:	c0 7f       	andi	r28, 0xF0	; 240
    59b2:	dc 27       	eor	r29, r28
    59b4:	cc 53       	subi	r28, 0x3C	; 60
    59b6:	d7 4f       	sbci	r29, 0xF7	; 247
    59b8:	68 81       	ld	r22, Y
    59ba:	79 81       	ldd	r23, Y+1	; 0x01
    59bc:	6a 19       	sub	r22, r10
    59be:	7b 09       	sbc	r23, r11
    59c0:	88 27       	eor	r24, r24
    59c2:	77 fd       	sbrc	r23, 7
    59c4:	80 95       	com	r24
    59c6:	98 2f       	mov	r25, r24
    59c8:	0e 94 7b 50 	call	0xa0f6	; 0xa0f6 <__floatsisf>
    59cc:	9b 01       	movw	r18, r22
    59ce:	ac 01       	movw	r20, r24
    59d0:	c8 01       	movw	r24, r16
    59d2:	b7 01       	movw	r22, r14
    59d4:	0e 94 90 51 	call	0xa320	; 0xa320 <__mulsf3>
    59d8:	7b 01       	movw	r14, r22
    59da:	8c 01       	movw	r16, r24
    59dc:	6a 81       	ldd	r22, Y+2	; 0x02
    59de:	7b 81       	ldd	r23, Y+3	; 0x03
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
    59e0:	6c 19       	sub	r22, r12
    59e2:	7d 09       	sbc	r23, r13
    59e4:	88 27       	eor	r24, r24
    59e6:	77 fd       	sbrc	r23, 7
    59e8:	80 95       	com	r24
    59ea:	98 2f       	mov	r25, r24
    59ec:	0e 94 7b 50 	call	0xa0f6	; 0xa0f6 <__floatsisf>
    59f0:	9b 01       	movw	r18, r22
    59f2:	ac 01       	movw	r20, r24
    59f4:	c8 01       	movw	r24, r16
    59f6:	b7 01       	movw	r22, r14
    59f8:	0e 94 e0 4f 	call	0x9fc0	; 0x9fc0 <__divsf3>
    59fc:	0e 94 48 50 	call	0xa090	; 0xa090 <__fixsfsi>
    5a00:	6a 0d       	add	r22, r10
    5a02:	7b 1d       	adc	r23, r11
    5a04:	e7 cd       	rjmp	.-1074   	; 0x55d4 <getInputFromSpeed+0x124>
            temp = -temp;
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
        } else if(mode==RIGHT_WHEEL_FW_SC) {
    5a06:	61 30       	cpi	r22, 0x01	; 1
    5a08:	09 f4       	brne	.+2      	; 0x5a0c <getInputFromSpeed+0x55c>
    5a0a:	50 c0       	rjmp	.+160    	; 0x5aac <getInputFromSpeed+0x5fc>
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
        } else if(mode==LEFT_WHEEL_BW_SC) {
    5a0c:	62 30       	cpi	r22, 0x02	; 2
    5a0e:	09 f4       	brne	.+2      	; 0x5a12 <getInputFromSpeed+0x562>
    5a10:	82 c0       	rjmp	.+260    	; 0x5b16 <getInputFromSpeed+0x666>
            temp = calibration[i-1][4] + (signed int)(((float)(currVel-calibration[i-1][5])*(float)(calibration[i][4]-calibration[i-1][4]))/(float)(calibration[i][5]-calibration[i-1][5]));
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
    5a12:	63 30       	cpi	r22, 0x03	; 3
    5a14:	09 f0       	breq	.+2      	; 0x5a18 <getInputFromSpeed+0x568>
    5a16:	dc cd       	rjmp	.-1096   	; 0x55d0 <getInputFromSpeed+0x120>
            temp = calibration[i-1][6] + (signed int)(((float)(currVel-calibration[i-1][7])*(float)(calibration[i][6]-calibration[i-1][6]))/(float)(calibration[i][7]-calibration[i-1][7]));
    5a18:	fe 01       	movw	r30, r28
    5a1a:	e2 95       	swap	r30
    5a1c:	f2 95       	swap	r31
    5a1e:	f0 7f       	andi	r31, 0xF0	; 240
    5a20:	fe 27       	eor	r31, r30
    5a22:	e0 7f       	andi	r30, 0xF0	; 240
    5a24:	fe 27       	eor	r31, r30
    5a26:	ec 54       	subi	r30, 0x4C	; 76
    5a28:	f7 4f       	sbci	r31, 0xF7	; 247
    5a2a:	c6 84       	ldd	r12, Z+14	; 0x0e
    5a2c:	d7 84       	ldd	r13, Z+15	; 0x0f
    5a2e:	a4 84       	ldd	r10, Z+12	; 0x0c
    5a30:	b5 84       	ldd	r11, Z+13	; 0x0d
    5a32:	2c 19       	sub	r18, r12
    5a34:	3d 09       	sbc	r19, r13
    5a36:	b9 01       	movw	r22, r18
    5a38:	88 27       	eor	r24, r24
    5a3a:	77 fd       	sbrc	r23, 7
    5a3c:	80 95       	com	r24
    5a3e:	98 2f       	mov	r25, r24
    5a40:	0e 94 7b 50 	call	0xa0f6	; 0xa0f6 <__floatsisf>
    5a44:	7b 01       	movw	r14, r22
    5a46:	8c 01       	movw	r16, r24
    5a48:	c2 95       	swap	r28
    5a4a:	d2 95       	swap	r29
    5a4c:	d0 7f       	andi	r29, 0xF0	; 240
    5a4e:	dc 27       	eor	r29, r28
    5a50:	c0 7f       	andi	r28, 0xF0	; 240
    5a52:	dc 27       	eor	r29, r28
    5a54:	cc 53       	subi	r28, 0x3C	; 60
    5a56:	d7 4f       	sbci	r29, 0xF7	; 247
    5a58:	6c 85       	ldd	r22, Y+12	; 0x0c
    5a5a:	7d 85       	ldd	r23, Y+13	; 0x0d
    5a5c:	6a 19       	sub	r22, r10
    5a5e:	7b 09       	sbc	r23, r11
    5a60:	88 27       	eor	r24, r24
    5a62:	77 fd       	sbrc	r23, 7
    5a64:	80 95       	com	r24
    5a66:	98 2f       	mov	r25, r24
    5a68:	0e 94 7b 50 	call	0xa0f6	; 0xa0f6 <__floatsisf>
    5a6c:	9b 01       	movw	r18, r22
    5a6e:	ac 01       	movw	r20, r24
    5a70:	c8 01       	movw	r24, r16
    5a72:	b7 01       	movw	r22, r14
    5a74:	0e 94 90 51 	call	0xa320	; 0xa320 <__mulsf3>
    5a78:	7b 01       	movw	r14, r22
    5a7a:	8c 01       	movw	r16, r24
    5a7c:	6e 85       	ldd	r22, Y+14	; 0x0e
    5a7e:	7f 85       	ldd	r23, Y+15	; 0x0f
    5a80:	6c 19       	sub	r22, r12
    5a82:	7d 09       	sbc	r23, r13
    5a84:	88 27       	eor	r24, r24
    5a86:	77 fd       	sbrc	r23, 7
    5a88:	80 95       	com	r24
    5a8a:	98 2f       	mov	r25, r24
    5a8c:	0e 94 7b 50 	call	0xa0f6	; 0xa0f6 <__floatsisf>
    5a90:	9b 01       	movw	r18, r22
    5a92:	ac 01       	movw	r20, r24
    5a94:	c8 01       	movw	r24, r16
    5a96:	b7 01       	movw	r22, r14
    5a98:	0e 94 e0 4f 	call	0x9fc0	; 0x9fc0 <__divsf3>
    5a9c:	0e 94 48 50 	call	0xa090	; 0xa090 <__fixsfsi>
    5aa0:	6a 0d       	add	r22, r10
    5aa2:	7b 1d       	adc	r23, r11
            temp = -temp;
    5aa4:	70 95       	com	r23
    5aa6:	61 95       	neg	r22
    5aa8:	7f 4f       	sbci	r23, 0xFF	; 255
    5aaa:	94 cd       	rjmp	.-1240   	; 0x55d4 <getInputFromSpeed+0x124>
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
    5aac:	fe 01       	movw	r30, r28
    5aae:	e2 95       	swap	r30
    5ab0:	f2 95       	swap	r31
    5ab2:	f0 7f       	andi	r31, 0xF0	; 240
    5ab4:	fe 27       	eor	r31, r30
    5ab6:	e0 7f       	andi	r30, 0xF0	; 240
    5ab8:	fe 27       	eor	r31, r30
    5aba:	ec 54       	subi	r30, 0x4C	; 76
    5abc:	f7 4f       	sbci	r31, 0xF7	; 247
    5abe:	c6 80       	ldd	r12, Z+6	; 0x06
    5ac0:	d7 80       	ldd	r13, Z+7	; 0x07
    5ac2:	a4 80       	ldd	r10, Z+4	; 0x04
    5ac4:	b5 80       	ldd	r11, Z+5	; 0x05
    5ac6:	2c 19       	sub	r18, r12
    5ac8:	3d 09       	sbc	r19, r13
    5aca:	b9 01       	movw	r22, r18
    5acc:	88 27       	eor	r24, r24
    5ace:	77 fd       	sbrc	r23, 7
    5ad0:	80 95       	com	r24
    5ad2:	98 2f       	mov	r25, r24
    5ad4:	0e 94 7b 50 	call	0xa0f6	; 0xa0f6 <__floatsisf>
    5ad8:	7b 01       	movw	r14, r22
    5ada:	8c 01       	movw	r16, r24
    5adc:	c2 95       	swap	r28
    5ade:	d2 95       	swap	r29
    5ae0:	d0 7f       	andi	r29, 0xF0	; 240
    5ae2:	dc 27       	eor	r29, r28
    5ae4:	c0 7f       	andi	r28, 0xF0	; 240
    5ae6:	dc 27       	eor	r29, r28
    5ae8:	cc 53       	subi	r28, 0x3C	; 60
    5aea:	d7 4f       	sbci	r29, 0xF7	; 247
    5aec:	6c 81       	ldd	r22, Y+4	; 0x04
    5aee:	7d 81       	ldd	r23, Y+5	; 0x05
    5af0:	6a 19       	sub	r22, r10
    5af2:	7b 09       	sbc	r23, r11
    5af4:	88 27       	eor	r24, r24
    5af6:	77 fd       	sbrc	r23, 7
    5af8:	80 95       	com	r24
    5afa:	98 2f       	mov	r25, r24
    5afc:	0e 94 7b 50 	call	0xa0f6	; 0xa0f6 <__floatsisf>
    5b00:	9b 01       	movw	r18, r22
    5b02:	ac 01       	movw	r20, r24
    5b04:	c8 01       	movw	r24, r16
    5b06:	b7 01       	movw	r22, r14
    5b08:	0e 94 90 51 	call	0xa320	; 0xa320 <__mulsf3>
    5b0c:	7b 01       	movw	r14, r22
    5b0e:	8c 01       	movw	r16, r24
    5b10:	6e 81       	ldd	r22, Y+6	; 0x06
    5b12:	7f 81       	ldd	r23, Y+7	; 0x07
    5b14:	65 cf       	rjmp	.-310    	; 0x59e0 <getInputFromSpeed+0x530>
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = calibration[i-1][4] + (signed int)(((float)(currVel-calibration[i-1][5])*(float)(calibration[i][4]-calibration[i-1][4]))/(float)(calibration[i][5]-calibration[i-1][5]));
    5b16:	fe 01       	movw	r30, r28
    5b18:	e2 95       	swap	r30
    5b1a:	f2 95       	swap	r31
    5b1c:	f0 7f       	andi	r31, 0xF0	; 240
    5b1e:	fe 27       	eor	r31, r30
    5b20:	e0 7f       	andi	r30, 0xF0	; 240
    5b22:	fe 27       	eor	r31, r30
    5b24:	ec 54       	subi	r30, 0x4C	; 76
    5b26:	f7 4f       	sbci	r31, 0xF7	; 247
    5b28:	c2 84       	ldd	r12, Z+10	; 0x0a
    5b2a:	d3 84       	ldd	r13, Z+11	; 0x0b
    5b2c:	a0 84       	ldd	r10, Z+8	; 0x08
    5b2e:	b1 84       	ldd	r11, Z+9	; 0x09
    5b30:	2c 19       	sub	r18, r12
    5b32:	3d 09       	sbc	r19, r13
    5b34:	b9 01       	movw	r22, r18
    5b36:	88 27       	eor	r24, r24
    5b38:	77 fd       	sbrc	r23, 7
    5b3a:	80 95       	com	r24
    5b3c:	98 2f       	mov	r25, r24
    5b3e:	0e 94 7b 50 	call	0xa0f6	; 0xa0f6 <__floatsisf>
    5b42:	7b 01       	movw	r14, r22
    5b44:	8c 01       	movw	r16, r24
    5b46:	c2 95       	swap	r28
    5b48:	d2 95       	swap	r29
    5b4a:	d0 7f       	andi	r29, 0xF0	; 240
    5b4c:	dc 27       	eor	r29, r28
    5b4e:	c0 7f       	andi	r28, 0xF0	; 240
    5b50:	dc 27       	eor	r29, r28
    5b52:	cc 53       	subi	r28, 0x3C	; 60
    5b54:	d7 4f       	sbci	r29, 0xF7	; 247
    5b56:	68 85       	ldd	r22, Y+8	; 0x08
    5b58:	79 85       	ldd	r23, Y+9	; 0x09
    5b5a:	6a 19       	sub	r22, r10
    5b5c:	7b 09       	sbc	r23, r11
    5b5e:	88 27       	eor	r24, r24
    5b60:	77 fd       	sbrc	r23, 7
    5b62:	80 95       	com	r24
    5b64:	98 2f       	mov	r25, r24
    5b66:	0e 94 7b 50 	call	0xa0f6	; 0xa0f6 <__floatsisf>
    5b6a:	9b 01       	movw	r18, r22
    5b6c:	ac 01       	movw	r20, r24
    5b6e:	c8 01       	movw	r24, r16
    5b70:	b7 01       	movw	r22, r14
    5b72:	0e 94 90 51 	call	0xa320	; 0xa320 <__mulsf3>
    5b76:	7b 01       	movw	r14, r22
    5b78:	8c 01       	movw	r16, r24
    5b7a:	6a 85       	ldd	r22, Y+10	; 0x0a
    5b7c:	7b 85       	ldd	r23, Y+11	; 0x0b
    5b7e:	80 cf       	rjmp	.-256    	; 0x5a80 <getInputFromSpeed+0x5d0>

00005b80 <getRightSpeedFromInput>:
    
    return temp;
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {
    5b80:	8f 92       	push	r8
    5b82:	9f 92       	push	r9
    5b84:	af 92       	push	r10
    5b86:	bf 92       	push	r11
    5b88:	cf 92       	push	r12
    5b8a:	df 92       	push	r13
    5b8c:	ef 92       	push	r14
    5b8e:	ff 92       	push	r15
    5b90:	0f 93       	push	r16
    5b92:	1f 93       	push	r17
    5b94:	cf 93       	push	r28
    5b96:	df 93       	push	r29

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    5b98:	c0 91 f3 02 	lds	r28, 0x02F3
    5b9c:	d0 91 f4 02 	lds	r29, 0x02F4
    5ba0:	80 91 f5 02 	lds	r24, 0x02F5
    5ba4:	90 91 f6 02 	lds	r25, 0x02F6
    5ba8:	97 fd       	sbrc	r25, 7
    5baa:	d9 c0       	rjmp	.+434    	; 0x5d5e <getRightSpeedFromInput+0x1de>
    5bac:	60 91 c8 08 	lds	r22, 0x08C8
    5bb0:	70 91 c9 08 	lds	r23, 0x08C9
    5bb4:	6c 17       	cp	r22, r28
    5bb6:	7d 07       	cpc	r23, r29
    5bb8:	0c f0       	brlt	.+2      	; 0x5bbc <getRightSpeedFromInput+0x3c>
    5bba:	bd c0       	rjmp	.+378    	; 0x5d36 <getRightSpeedFromInput+0x1b6>
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    5bbc:	0f ef       	ldi	r16, 0xFF	; 255
    5bbe:	1f ef       	ldi	r17, 0xFF	; 255
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    5bc0:	80 91 d8 08 	lds	r24, 0x08D8
    5bc4:	90 91 d9 08 	lds	r25, 0x08D9
    5bc8:	8c 17       	cp	r24, r28
    5bca:	9d 07       	cpc	r25, r29
    5bcc:	44 f0       	brlt	.+16     	; 0x5bde <getRightSpeedFromInput+0x5e>
    
    return temp;
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {
    5bce:	81 e0       	ldi	r24, 0x01	; 1
    5bd0:	9f ef       	ldi	r25, 0xFF	; 255
    5bd2:	0f 3f       	cpi	r16, 0xFF	; 255
    5bd4:	19 07       	cpc	r17, r25
    5bd6:	09 f0       	breq	.+2      	; 0x5bda <getRightSpeedFromInput+0x5a>
    5bd8:	80 e0       	ldi	r24, 0x00	; 0
    5bda:	08 2f       	mov	r16, r24
    5bdc:	10 e0       	ldi	r17, 0x00	; 0

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    5bde:	80 91 e8 08 	lds	r24, 0x08E8
    5be2:	90 91 e9 08 	lds	r25, 0x08E9
    5be6:	8c 17       	cp	r24, r28
    5be8:	9d 07       	cpc	r25, r29
    5bea:	2c f0       	brlt	.+10     	; 0x5bf6 <getRightSpeedFromInput+0x76>
    5bec:	8f ef       	ldi	r24, 0xFF	; 255
    5bee:	0f 3f       	cpi	r16, 0xFF	; 255
    5bf0:	18 07       	cpc	r17, r24
    5bf2:	09 f4       	brne	.+2      	; 0x5bf6 <getRightSpeedFromInput+0x76>
    5bf4:	6c c1       	rjmp	.+728    	; 0x5ece <getRightSpeedFromInput+0x34e>
    5bf6:	80 91 f8 08 	lds	r24, 0x08F8
    5bfa:	90 91 f9 08 	lds	r25, 0x08F9
    5bfe:	8c 17       	cp	r24, r28
    5c00:	9d 07       	cpc	r25, r29
    5c02:	2c f0       	brlt	.+10     	; 0x5c0e <getRightSpeedFromInput+0x8e>
    5c04:	9f ef       	ldi	r25, 0xFF	; 255
    5c06:	0f 3f       	cpi	r16, 0xFF	; 255
    5c08:	19 07       	cpc	r17, r25
    5c0a:	09 f4       	brne	.+2      	; 0x5c0e <getRightSpeedFromInput+0x8e>
    5c0c:	72 c1       	rjmp	.+740    	; 0x5ef2 <getRightSpeedFromInput+0x372>
    5c0e:	80 91 08 09 	lds	r24, 0x0908
    5c12:	90 91 09 09 	lds	r25, 0x0909
    5c16:	8c 17       	cp	r24, r28
    5c18:	9d 07       	cpc	r25, r29
    5c1a:	2c f0       	brlt	.+10     	; 0x5c26 <getRightSpeedFromInput+0xa6>
    5c1c:	8f ef       	ldi	r24, 0xFF	; 255
    5c1e:	0f 3f       	cpi	r16, 0xFF	; 255
    5c20:	18 07       	cpc	r17, r24
    5c22:	09 f4       	brne	.+2      	; 0x5c26 <getRightSpeedFromInput+0xa6>
    5c24:	63 c1       	rjmp	.+710    	; 0x5eec <getRightSpeedFromInput+0x36c>
    5c26:	80 91 18 09 	lds	r24, 0x0918
    5c2a:	90 91 19 09 	lds	r25, 0x0919
    5c2e:	8c 17       	cp	r24, r28
    5c30:	9d 07       	cpc	r25, r29
    5c32:	2c f0       	brlt	.+10     	; 0x5c3e <getRightSpeedFromInput+0xbe>
    5c34:	9f ef       	ldi	r25, 0xFF	; 255
    5c36:	0f 3f       	cpi	r16, 0xFF	; 255
    5c38:	19 07       	cpc	r17, r25
    5c3a:	09 f4       	brne	.+2      	; 0x5c3e <getRightSpeedFromInput+0xbe>
    5c3c:	54 c1       	rjmp	.+680    	; 0x5ee6 <getRightSpeedFromInput+0x366>
    5c3e:	80 91 28 09 	lds	r24, 0x0928
    5c42:	90 91 29 09 	lds	r25, 0x0929
    5c46:	8c 17       	cp	r24, r28
    5c48:	9d 07       	cpc	r25, r29
    5c4a:	2c f0       	brlt	.+10     	; 0x5c56 <getRightSpeedFromInput+0xd6>
    5c4c:	8f ef       	ldi	r24, 0xFF	; 255
    5c4e:	0f 3f       	cpi	r16, 0xFF	; 255
    5c50:	18 07       	cpc	r17, r24
    5c52:	09 f4       	brne	.+2      	; 0x5c56 <getRightSpeedFromInput+0xd6>
    5c54:	45 c1       	rjmp	.+650    	; 0x5ee0 <getRightSpeedFromInput+0x360>
    5c56:	80 91 38 09 	lds	r24, 0x0938
    5c5a:	90 91 39 09 	lds	r25, 0x0939
    5c5e:	8c 17       	cp	r24, r28
    5c60:	9d 07       	cpc	r25, r29
    5c62:	2c f0       	brlt	.+10     	; 0x5c6e <getRightSpeedFromInput+0xee>
    5c64:	9f ef       	ldi	r25, 0xFF	; 255
    5c66:	0f 3f       	cpi	r16, 0xFF	; 255
    5c68:	19 07       	cpc	r17, r25
    5c6a:	09 f4       	brne	.+2      	; 0x5c6e <getRightSpeedFromInput+0xee>
    5c6c:	36 c1       	rjmp	.+620    	; 0x5eda <getRightSpeedFromInput+0x35a>
    5c6e:	e0 90 48 09 	lds	r14, 0x0948
    5c72:	f0 90 49 09 	lds	r15, 0x0949
    5c76:	ec 16       	cp	r14, r28
    5c78:	fd 06       	cpc	r15, r29
    5c7a:	2c f0       	brlt	.+10     	; 0x5c86 <getRightSpeedFromInput+0x106>
    5c7c:	8f ef       	ldi	r24, 0xFF	; 255
    5c7e:	0f 3f       	cpi	r16, 0xFF	; 255
    5c80:	18 07       	cpc	r17, r24
    5c82:	09 f4       	brne	.+2      	; 0x5c86 <getRightSpeedFromInput+0x106>
    5c84:	27 c1       	rjmp	.+590    	; 0x5ed4 <getRightSpeedFromInput+0x354>
			}
		}        
    }

    if(pwm_right >= 0) {
        if(last_right_vel == 0) {
    5c86:	20 97       	sbiw	r28, 0x00	; 0
    5c88:	09 f4       	brne	.+2      	; 0x5c8c <getRightSpeedFromInput+0x10c>
    5c8a:	58 c0       	rjmp	.+176    	; 0x5d3c <getRightSpeedFromInput+0x1bc>
            speedRightFromEnc = 0;
        } else {
            if(indFwR==0) {  // the velocity is lower than first saved in the matrix
    5c8c:	01 15       	cp	r16, r1
    5c8e:	11 05       	cpc	r17, r1
    5c90:	09 f4       	brne	.+2      	; 0x5c94 <getRightSpeedFromInput+0x114>
    5c92:	32 c1       	rjmp	.+612    	; 0x5ef8 <getRightSpeedFromInput+0x378>
                speedRightFromEnc = (last_right_vel*calibration[0][3])/calibration[0][2];
            } else if(indFwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    5c94:	9f ef       	ldi	r25, 0xFF	; 255
    5c96:	0f 3f       	cpi	r16, 0xFF	; 255
    5c98:	19 07       	cpc	r17, r25
    5c9a:	09 f4       	brne	.+2      	; 0x5c9e <getRightSpeedFromInput+0x11e>
    5c9c:	e9 c0       	rjmp	.+466    	; 0x5e70 <getRightSpeedFromInput+0x2f0>
                speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][3]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][2]);  // take the max
            } else {
                speedRightFromEnc = calibration[indFwR-1][3] + (signed int)(((float)(last_right_vel-calibration[indFwR-1][2])*(float)(calibration[indFwR][3]-calibration[indFwR-1][3]))/(float)(calibration[indFwR][2]-calibration[indFwR-1][2]));
    5c9e:	f8 01       	movw	r30, r16
    5ca0:	e2 95       	swap	r30
    5ca2:	f2 95       	swap	r31
    5ca4:	f0 7f       	andi	r31, 0xF0	; 240
    5ca6:	fe 27       	eor	r31, r30
    5ca8:	e0 7f       	andi	r30, 0xF0	; 240
    5caa:	fe 27       	eor	r31, r30
    5cac:	ec 54       	subi	r30, 0x4C	; 76
    5cae:	f7 4f       	sbci	r31, 0xF7	; 247
    5cb0:	a4 80       	ldd	r10, Z+4	; 0x04
    5cb2:	b5 80       	ldd	r11, Z+5	; 0x05
    5cb4:	86 80       	ldd	r8, Z+6	; 0x06
    5cb6:	97 80       	ldd	r9, Z+7	; 0x07
    5cb8:	ca 19       	sub	r28, r10
    5cba:	db 09       	sbc	r29, r11
    5cbc:	be 01       	movw	r22, r28
    5cbe:	88 27       	eor	r24, r24
    5cc0:	77 fd       	sbrc	r23, 7
    5cc2:	80 95       	com	r24
    5cc4:	98 2f       	mov	r25, r24
    5cc6:	0e 94 7b 50 	call	0xa0f6	; 0xa0f6 <__floatsisf>
    5cca:	6b 01       	movw	r12, r22
    5ccc:	7c 01       	movw	r14, r24
    5cce:	e8 01       	movw	r28, r16
    5cd0:	c2 95       	swap	r28
    5cd2:	d2 95       	swap	r29
    5cd4:	d0 7f       	andi	r29, 0xF0	; 240
    5cd6:	dc 27       	eor	r29, r28
    5cd8:	c0 7f       	andi	r28, 0xF0	; 240
    5cda:	dc 27       	eor	r29, r28
    5cdc:	cc 53       	subi	r28, 0x3C	; 60
    5cde:	d7 4f       	sbci	r29, 0xF7	; 247
    5ce0:	6e 81       	ldd	r22, Y+6	; 0x06
    5ce2:	7f 81       	ldd	r23, Y+7	; 0x07
    5ce4:	68 19       	sub	r22, r8
    5ce6:	79 09       	sbc	r23, r9
    5ce8:	88 27       	eor	r24, r24
    5cea:	77 fd       	sbrc	r23, 7
    5cec:	80 95       	com	r24
    5cee:	98 2f       	mov	r25, r24
    5cf0:	0e 94 7b 50 	call	0xa0f6	; 0xa0f6 <__floatsisf>
    5cf4:	9b 01       	movw	r18, r22
    5cf6:	ac 01       	movw	r20, r24
    5cf8:	c7 01       	movw	r24, r14
    5cfa:	b6 01       	movw	r22, r12
    5cfc:	0e 94 90 51 	call	0xa320	; 0xa320 <__mulsf3>
    5d00:	7b 01       	movw	r14, r22
    5d02:	8c 01       	movw	r16, r24
    5d04:	6c 81       	ldd	r22, Y+4	; 0x04
    5d06:	7d 81       	ldd	r23, Y+5	; 0x05
    5d08:	6a 19       	sub	r22, r10
    5d0a:	7b 09       	sbc	r23, r11
    5d0c:	88 27       	eor	r24, r24
    5d0e:	77 fd       	sbrc	r23, 7
    5d10:	80 95       	com	r24
    5d12:	98 2f       	mov	r25, r24
    5d14:	0e 94 7b 50 	call	0xa0f6	; 0xa0f6 <__floatsisf>
    5d18:	9b 01       	movw	r18, r22
    5d1a:	ac 01       	movw	r20, r24
    5d1c:	c8 01       	movw	r24, r16
    5d1e:	b7 01       	movw	r22, r14
    5d20:	0e 94 e0 4f 	call	0x9fc0	; 0x9fc0 <__divsf3>
    5d24:	0e 94 48 50 	call	0xa090	; 0xa090 <__fixsfsi>
    5d28:	68 0d       	add	r22, r8
    5d2a:	79 1d       	adc	r23, r9
    5d2c:	70 93 bb 04 	sts	0x04BB, r23
    5d30:	60 93 ba 04 	sts	0x04BA, r22
    5d34:	07 c0       	rjmp	.+14     	; 0x5d44 <getRightSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    5d36:	00 e0       	ldi	r16, 0x00	; 0
    5d38:	10 e0       	ldi	r17, 0x00	; 0
    5d3a:	42 cf       	rjmp	.-380    	; 0x5bc0 <getRightSpeedFromInput+0x40>
		}        
    }

    if(pwm_right >= 0) {
        if(last_right_vel == 0) {
            speedRightFromEnc = 0;
    5d3c:	10 92 bb 04 	sts	0x04BB, r1
    5d40:	10 92 ba 04 	sts	0x04BA, r1
        	speedRightFromEnc = calibration[indBwR-1][7] + (signed int)(((float)(last_right_vel-calibration[indBwR-1][6])*(float)(calibration[indBwR][7]-calibration[indBwR-1][7]))/(float)(calibration[indBwR][6]-calibration[indBwR-1][6]));
		}
		speedRightFromEnc = -speedRightFromEnc;
    }
    
}
    5d44:	df 91       	pop	r29
    5d46:	cf 91       	pop	r28
    5d48:	1f 91       	pop	r17
    5d4a:	0f 91       	pop	r16
    5d4c:	ff 90       	pop	r15
    5d4e:	ef 90       	pop	r14
    5d50:	df 90       	pop	r13
    5d52:	cf 90       	pop	r12
    5d54:	bf 90       	pop	r11
    5d56:	af 90       	pop	r10
    5d58:	9f 90       	pop	r9
    5d5a:	8f 90       	pop	r8
    5d5c:	08 95       	ret
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    5d5e:	60 91 d0 08 	lds	r22, 0x08D0
    5d62:	70 91 d1 08 	lds	r23, 0x08D1
    5d66:	6c 17       	cp	r22, r28
    5d68:	7d 07       	cpc	r23, r29
    5d6a:	0c f0       	brlt	.+2      	; 0x5d6e <getRightSpeedFromInput+0x1ee>
    5d6c:	7e c0       	rjmp	.+252    	; 0x5e6a <getRightSpeedFromInput+0x2ea>
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    5d6e:	0f ef       	ldi	r16, 0xFF	; 255
    5d70:	1f ef       	ldi	r17, 0xFF	; 255
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    5d72:	80 91 e0 08 	lds	r24, 0x08E0
    5d76:	90 91 e1 08 	lds	r25, 0x08E1
    5d7a:	8c 17       	cp	r24, r28
    5d7c:	9d 07       	cpc	r25, r29
    5d7e:	44 f0       	brlt	.+16     	; 0x5d90 <getRightSpeedFromInput+0x210>
    
    return temp;
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {
    5d80:	81 e0       	ldi	r24, 0x01	; 1
    5d82:	9f ef       	ldi	r25, 0xFF	; 255
    5d84:	0f 3f       	cpi	r16, 0xFF	; 255
    5d86:	19 07       	cpc	r17, r25
    5d88:	09 f0       	breq	.+2      	; 0x5d8c <getRightSpeedFromInput+0x20c>
    5d8a:	80 e0       	ldi	r24, 0x00	; 0
    5d8c:	08 2f       	mov	r16, r24
    5d8e:	10 e0       	ldi	r17, 0x00	; 0
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    5d90:	80 91 f0 08 	lds	r24, 0x08F0
    5d94:	90 91 f1 08 	lds	r25, 0x08F1
    5d98:	8c 17       	cp	r24, r28
    5d9a:	9d 07       	cpc	r25, r29
    5d9c:	2c f0       	brlt	.+10     	; 0x5da8 <getRightSpeedFromInput+0x228>
    5d9e:	8f ef       	ldi	r24, 0xFF	; 255
    5da0:	0f 3f       	cpi	r16, 0xFF	; 255
    5da2:	18 07       	cpc	r17, r24
    5da4:	09 f4       	brne	.+2      	; 0x5da8 <getRightSpeedFromInput+0x228>
    5da6:	19 c1       	rjmp	.+562    	; 0x5fda <getRightSpeedFromInput+0x45a>
    5da8:	80 91 00 09 	lds	r24, 0x0900
    5dac:	90 91 01 09 	lds	r25, 0x0901
    5db0:	8c 17       	cp	r24, r28
    5db2:	9d 07       	cpc	r25, r29
    5db4:	2c f0       	brlt	.+10     	; 0x5dc0 <getRightSpeedFromInput+0x240>
    5db6:	9f ef       	ldi	r25, 0xFF	; 255
    5db8:	0f 3f       	cpi	r16, 0xFF	; 255
    5dba:	19 07       	cpc	r17, r25
    5dbc:	09 f4       	brne	.+2      	; 0x5dc0 <getRightSpeedFromInput+0x240>
    5dbe:	0a c1       	rjmp	.+532    	; 0x5fd4 <getRightSpeedFromInput+0x454>
    5dc0:	80 91 10 09 	lds	r24, 0x0910
    5dc4:	90 91 11 09 	lds	r25, 0x0911
    5dc8:	8c 17       	cp	r24, r28
    5dca:	9d 07       	cpc	r25, r29
    5dcc:	2c f0       	brlt	.+10     	; 0x5dd8 <getRightSpeedFromInput+0x258>
    5dce:	8f ef       	ldi	r24, 0xFF	; 255
    5dd0:	0f 3f       	cpi	r16, 0xFF	; 255
    5dd2:	18 07       	cpc	r17, r24
    5dd4:	09 f4       	brne	.+2      	; 0x5dd8 <getRightSpeedFromInput+0x258>
    5dd6:	fb c0       	rjmp	.+502    	; 0x5fce <getRightSpeedFromInput+0x44e>
    5dd8:	80 91 20 09 	lds	r24, 0x0920
    5ddc:	90 91 21 09 	lds	r25, 0x0921
    5de0:	8c 17       	cp	r24, r28
    5de2:	9d 07       	cpc	r25, r29
    5de4:	2c f0       	brlt	.+10     	; 0x5df0 <getRightSpeedFromInput+0x270>
    5de6:	9f ef       	ldi	r25, 0xFF	; 255
    5de8:	0f 3f       	cpi	r16, 0xFF	; 255
    5dea:	19 07       	cpc	r17, r25
    5dec:	09 f4       	brne	.+2      	; 0x5df0 <getRightSpeedFromInput+0x270>
    5dee:	ec c0       	rjmp	.+472    	; 0x5fc8 <getRightSpeedFromInput+0x448>
    5df0:	80 91 30 09 	lds	r24, 0x0930
    5df4:	90 91 31 09 	lds	r25, 0x0931
    5df8:	8c 17       	cp	r24, r28
    5dfa:	9d 07       	cpc	r25, r29
    5dfc:	2c f0       	brlt	.+10     	; 0x5e08 <getRightSpeedFromInput+0x288>
    5dfe:	8f ef       	ldi	r24, 0xFF	; 255
    5e00:	0f 3f       	cpi	r16, 0xFF	; 255
    5e02:	18 07       	cpc	r17, r24
    5e04:	09 f4       	brne	.+2      	; 0x5e08 <getRightSpeedFromInput+0x288>
    5e06:	dd c0       	rjmp	.+442    	; 0x5fc2 <getRightSpeedFromInput+0x442>
    5e08:	80 91 40 09 	lds	r24, 0x0940
    5e0c:	90 91 41 09 	lds	r25, 0x0941
    5e10:	8c 17       	cp	r24, r28
    5e12:	9d 07       	cpc	r25, r29
    5e14:	2c f0       	brlt	.+10     	; 0x5e20 <getRightSpeedFromInput+0x2a0>
    5e16:	9f ef       	ldi	r25, 0xFF	; 255
    5e18:	0f 3f       	cpi	r16, 0xFF	; 255
    5e1a:	19 07       	cpc	r17, r25
    5e1c:	09 f4       	brne	.+2      	; 0x5e20 <getRightSpeedFromInput+0x2a0>
    5e1e:	ce c0       	rjmp	.+412    	; 0x5fbc <getRightSpeedFromInput+0x43c>
    5e20:	e0 90 50 09 	lds	r14, 0x0950
    5e24:	f0 90 51 09 	lds	r15, 0x0951
    5e28:	ec 16       	cp	r14, r28
    5e2a:	fd 06       	cpc	r15, r29
    5e2c:	2c f0       	brlt	.+10     	; 0x5e38 <getRightSpeedFromInput+0x2b8>
    5e2e:	8f ef       	ldi	r24, 0xFF	; 255
    5e30:	0f 3f       	cpi	r16, 0xFF	; 255
    5e32:	18 07       	cpc	r17, r24
    5e34:	09 f4       	brne	.+2      	; 0x5e38 <getRightSpeedFromInput+0x2b8>
    5e36:	bf c0       	rjmp	.+382    	; 0x5fb6 <getRightSpeedFromInput+0x436>
            } else {
                speedRightFromEnc = calibration[indFwR-1][3] + (signed int)(((float)(last_right_vel-calibration[indFwR-1][2])*(float)(calibration[indFwR][3]-calibration[indFwR-1][3]))/(float)(calibration[indFwR][2]-calibration[indFwR-1][2]));
            }
        }
    } else {
		if(indBwR==0) {  // the velocity is lower than first saved in the matrix
    5e38:	01 15       	cp	r16, r1
    5e3a:	11 05       	cpc	r17, r1
    5e3c:	09 f0       	breq	.+2      	; 0x5e40 <getRightSpeedFromInput+0x2c0>
    5e3e:	6e c0       	rjmp	.+220    	; 0x5f1c <getRightSpeedFromInput+0x39c>
        	speedRightFromEnc = (last_right_vel*calibration[0][7])/calibration[0][6];
    5e40:	20 91 d2 08 	lds	r18, 0x08D2
    5e44:	30 91 d3 08 	lds	r19, 0x08D3
    5e48:	c2 9f       	mul	r28, r18
    5e4a:	c0 01       	movw	r24, r0
    5e4c:	c3 9f       	mul	r28, r19
    5e4e:	90 0d       	add	r25, r0
    5e50:	d2 9f       	mul	r29, r18
    5e52:	90 0d       	add	r25, r0
    5e54:	11 24       	eor	r1, r1
    5e56:	0e 94 4e 52 	call	0xa49c	; 0xa49c <__divmodhi4>
		} else if(indBwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][7]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][6]);  // take the max
		} else {
        	speedRightFromEnc = calibration[indBwR-1][7] + (signed int)(((float)(last_right_vel-calibration[indBwR-1][6])*(float)(calibration[indBwR][7]-calibration[indBwR-1][7]))/(float)(calibration[indBwR][6]-calibration[indBwR-1][6]));
		}
		speedRightFromEnc = -speedRightFromEnc;
    5e5a:	70 95       	com	r23
    5e5c:	61 95       	neg	r22
    5e5e:	7f 4f       	sbci	r23, 0xFF	; 255
    5e60:	70 93 bb 04 	sts	0x04BB, r23
    5e64:	60 93 ba 04 	sts	0x04BA, r22
    5e68:	6d cf       	rjmp	.-294    	; 0x5d44 <getRightSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    5e6a:	00 e0       	ldi	r16, 0x00	; 0
    5e6c:	10 e0       	ldi	r17, 0x00	; 0
    5e6e:	81 cf       	rjmp	.-254    	; 0x5d72 <getRightSpeedFromInput+0x1f2>
            speedRightFromEnc = 0;
        } else {
            if(indFwR==0) {  // the velocity is lower than first saved in the matrix
                speedRightFromEnc = (last_right_vel*calibration[0][3])/calibration[0][2];
            } else if(indFwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
                speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][3]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][2]);  // take the max
    5e70:	60 91 4a 09 	lds	r22, 0x094A
    5e74:	70 91 4b 09 	lds	r23, 0x094B
    5e78:	88 27       	eor	r24, r24
    5e7a:	77 fd       	sbrc	r23, 7
    5e7c:	80 95       	com	r24
    5e7e:	98 2f       	mov	r25, r24
    5e80:	0e 94 7b 50 	call	0xa0f6	; 0xa0f6 <__floatsisf>
    5e84:	5b 01       	movw	r10, r22
    5e86:	6c 01       	movw	r12, r24
    5e88:	be 01       	movw	r22, r28
    5e8a:	88 27       	eor	r24, r24
    5e8c:	77 fd       	sbrc	r23, 7
    5e8e:	80 95       	com	r24
    5e90:	98 2f       	mov	r25, r24
    5e92:	0e 94 7b 50 	call	0xa0f6	; 0xa0f6 <__floatsisf>
    5e96:	9b 01       	movw	r18, r22
    5e98:	ac 01       	movw	r20, r24
    5e9a:	c6 01       	movw	r24, r12
    5e9c:	b5 01       	movw	r22, r10
    5e9e:	0e 94 90 51 	call	0xa320	; 0xa320 <__mulsf3>
    5ea2:	5b 01       	movw	r10, r22
    5ea4:	6c 01       	movw	r12, r24
    5ea6:	b7 01       	movw	r22, r14
    5ea8:	88 27       	eor	r24, r24
    5eaa:	77 fd       	sbrc	r23, 7
    5eac:	80 95       	com	r24
    5eae:	98 2f       	mov	r25, r24
    5eb0:	0e 94 7b 50 	call	0xa0f6	; 0xa0f6 <__floatsisf>
    5eb4:	9b 01       	movw	r18, r22
    5eb6:	ac 01       	movw	r20, r24
    5eb8:	c6 01       	movw	r24, r12
    5eba:	b5 01       	movw	r22, r10
    5ebc:	0e 94 e0 4f 	call	0x9fc0	; 0x9fc0 <__divsf3>
    5ec0:	0e 94 48 50 	call	0xa090	; 0xa090 <__fixsfsi>
    5ec4:	70 93 bb 04 	sts	0x04BB, r23
    5ec8:	60 93 ba 04 	sts	0x04BA, r22
    5ecc:	3b cf       	rjmp	.-394    	; 0x5d44 <getRightSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    5ece:	02 e0       	ldi	r16, 0x02	; 2
    5ed0:	10 e0       	ldi	r17, 0x00	; 0
    5ed2:	91 ce       	rjmp	.-734    	; 0x5bf6 <getRightSpeedFromInput+0x76>
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    5ed4:	08 e0       	ldi	r16, 0x08	; 8
    5ed6:	10 e0       	ldi	r17, 0x00	; 0
    5ed8:	d6 ce       	rjmp	.-596    	; 0x5c86 <getRightSpeedFromInput+0x106>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    5eda:	07 e0       	ldi	r16, 0x07	; 7
    5edc:	10 e0       	ldi	r17, 0x00	; 0
    5ede:	c7 ce       	rjmp	.-626    	; 0x5c6e <getRightSpeedFromInput+0xee>
    5ee0:	06 e0       	ldi	r16, 0x06	; 6
    5ee2:	10 e0       	ldi	r17, 0x00	; 0
    5ee4:	b8 ce       	rjmp	.-656    	; 0x5c56 <getRightSpeedFromInput+0xd6>
    5ee6:	05 e0       	ldi	r16, 0x05	; 5
    5ee8:	10 e0       	ldi	r17, 0x00	; 0
    5eea:	a9 ce       	rjmp	.-686    	; 0x5c3e <getRightSpeedFromInput+0xbe>
    5eec:	04 e0       	ldi	r16, 0x04	; 4
    5eee:	10 e0       	ldi	r17, 0x00	; 0
    5ef0:	9a ce       	rjmp	.-716    	; 0x5c26 <getRightSpeedFromInput+0xa6>
    5ef2:	03 e0       	ldi	r16, 0x03	; 3
    5ef4:	10 e0       	ldi	r17, 0x00	; 0
    5ef6:	8b ce       	rjmp	.-746    	; 0x5c0e <getRightSpeedFromInput+0x8e>
    if(pwm_right >= 0) {
        if(last_right_vel == 0) {
            speedRightFromEnc = 0;
        } else {
            if(indFwR==0) {  // the velocity is lower than first saved in the matrix
                speedRightFromEnc = (last_right_vel*calibration[0][3])/calibration[0][2];
    5ef8:	20 91 ca 08 	lds	r18, 0x08CA
    5efc:	30 91 cb 08 	lds	r19, 0x08CB
    5f00:	c2 9f       	mul	r28, r18
    5f02:	c0 01       	movw	r24, r0
    5f04:	c3 9f       	mul	r28, r19
    5f06:	90 0d       	add	r25, r0
    5f08:	d2 9f       	mul	r29, r18
    5f0a:	90 0d       	add	r25, r0
    5f0c:	11 24       	eor	r1, r1
    5f0e:	0e 94 4e 52 	call	0xa49c	; 0xa49c <__divmodhi4>
    5f12:	70 93 bb 04 	sts	0x04BB, r23
    5f16:	60 93 ba 04 	sts	0x04BA, r22
    5f1a:	14 cf       	rjmp	.-472    	; 0x5d44 <getRightSpeedFromInput+0x1c4>
            }
        }
    } else {
		if(indBwR==0) {  // the velocity is lower than first saved in the matrix
        	speedRightFromEnc = (last_right_vel*calibration[0][7])/calibration[0][6];
		} else if(indBwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    5f1c:	8f ef       	ldi	r24, 0xFF	; 255
    5f1e:	0f 3f       	cpi	r16, 0xFF	; 255
    5f20:	18 07       	cpc	r17, r24
    5f22:	09 f4       	brne	.+2      	; 0x5f26 <getRightSpeedFromInput+0x3a6>
    5f24:	5d c0       	rjmp	.+186    	; 0x5fe0 <getRightSpeedFromInput+0x460>
        	speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][7]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][6]);  // take the max
		} else {
        	speedRightFromEnc = calibration[indBwR-1][7] + (signed int)(((float)(last_right_vel-calibration[indBwR-1][6])*(float)(calibration[indBwR][7]-calibration[indBwR-1][7]))/(float)(calibration[indBwR][6]-calibration[indBwR-1][6]));
    5f26:	f8 01       	movw	r30, r16
    5f28:	e2 95       	swap	r30
    5f2a:	f2 95       	swap	r31
    5f2c:	f0 7f       	andi	r31, 0xF0	; 240
    5f2e:	fe 27       	eor	r31, r30
    5f30:	e0 7f       	andi	r30, 0xF0	; 240
    5f32:	fe 27       	eor	r31, r30
    5f34:	ec 54       	subi	r30, 0x4C	; 76
    5f36:	f7 4f       	sbci	r31, 0xF7	; 247
    5f38:	a4 84       	ldd	r10, Z+12	; 0x0c
    5f3a:	b5 84       	ldd	r11, Z+13	; 0x0d
    5f3c:	86 84       	ldd	r8, Z+14	; 0x0e
    5f3e:	97 84       	ldd	r9, Z+15	; 0x0f
    5f40:	ca 19       	sub	r28, r10
    5f42:	db 09       	sbc	r29, r11
    5f44:	be 01       	movw	r22, r28
    5f46:	88 27       	eor	r24, r24
    5f48:	77 fd       	sbrc	r23, 7
    5f4a:	80 95       	com	r24
    5f4c:	98 2f       	mov	r25, r24
    5f4e:	0e 94 7b 50 	call	0xa0f6	; 0xa0f6 <__floatsisf>
    5f52:	6b 01       	movw	r12, r22
    5f54:	7c 01       	movw	r14, r24
    5f56:	e8 01       	movw	r28, r16
    5f58:	c2 95       	swap	r28
    5f5a:	d2 95       	swap	r29
    5f5c:	d0 7f       	andi	r29, 0xF0	; 240
    5f5e:	dc 27       	eor	r29, r28
    5f60:	c0 7f       	andi	r28, 0xF0	; 240
    5f62:	dc 27       	eor	r29, r28
    5f64:	cc 53       	subi	r28, 0x3C	; 60
    5f66:	d7 4f       	sbci	r29, 0xF7	; 247
    5f68:	6e 85       	ldd	r22, Y+14	; 0x0e
    5f6a:	7f 85       	ldd	r23, Y+15	; 0x0f
    5f6c:	68 19       	sub	r22, r8
    5f6e:	79 09       	sbc	r23, r9
    5f70:	88 27       	eor	r24, r24
    5f72:	77 fd       	sbrc	r23, 7
    5f74:	80 95       	com	r24
    5f76:	98 2f       	mov	r25, r24
    5f78:	0e 94 7b 50 	call	0xa0f6	; 0xa0f6 <__floatsisf>
    5f7c:	9b 01       	movw	r18, r22
    5f7e:	ac 01       	movw	r20, r24
    5f80:	c7 01       	movw	r24, r14
    5f82:	b6 01       	movw	r22, r12
    5f84:	0e 94 90 51 	call	0xa320	; 0xa320 <__mulsf3>
    5f88:	7b 01       	movw	r14, r22
    5f8a:	8c 01       	movw	r16, r24
    5f8c:	6c 85       	ldd	r22, Y+12	; 0x0c
    5f8e:	7d 85       	ldd	r23, Y+13	; 0x0d
    5f90:	6a 19       	sub	r22, r10
    5f92:	7b 09       	sbc	r23, r11
    5f94:	88 27       	eor	r24, r24
    5f96:	77 fd       	sbrc	r23, 7
    5f98:	80 95       	com	r24
    5f9a:	98 2f       	mov	r25, r24
    5f9c:	0e 94 7b 50 	call	0xa0f6	; 0xa0f6 <__floatsisf>
    5fa0:	9b 01       	movw	r18, r22
    5fa2:	ac 01       	movw	r20, r24
    5fa4:	c8 01       	movw	r24, r16
    5fa6:	b7 01       	movw	r22, r14
    5fa8:	0e 94 e0 4f 	call	0x9fc0	; 0x9fc0 <__divsf3>
    5fac:	0e 94 48 50 	call	0xa090	; 0xa090 <__fixsfsi>
    5fb0:	68 0d       	add	r22, r8
    5fb2:	79 1d       	adc	r23, r9
    5fb4:	52 cf       	rjmp	.-348    	; 0x5e5a <getRightSpeedFromInput+0x2da>
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    5fb6:	08 e0       	ldi	r16, 0x08	; 8
    5fb8:	10 e0       	ldi	r17, 0x00	; 0
    5fba:	3e cf       	rjmp	.-388    	; 0x5e38 <getRightSpeedFromInput+0x2b8>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    5fbc:	07 e0       	ldi	r16, 0x07	; 7
    5fbe:	10 e0       	ldi	r17, 0x00	; 0
    5fc0:	2f cf       	rjmp	.-418    	; 0x5e20 <getRightSpeedFromInput+0x2a0>
    5fc2:	06 e0       	ldi	r16, 0x06	; 6
    5fc4:	10 e0       	ldi	r17, 0x00	; 0
    5fc6:	20 cf       	rjmp	.-448    	; 0x5e08 <getRightSpeedFromInput+0x288>
    5fc8:	05 e0       	ldi	r16, 0x05	; 5
    5fca:	10 e0       	ldi	r17, 0x00	; 0
    5fcc:	11 cf       	rjmp	.-478    	; 0x5df0 <getRightSpeedFromInput+0x270>
    5fce:	04 e0       	ldi	r16, 0x04	; 4
    5fd0:	10 e0       	ldi	r17, 0x00	; 0
    5fd2:	02 cf       	rjmp	.-508    	; 0x5dd8 <getRightSpeedFromInput+0x258>
    5fd4:	03 e0       	ldi	r16, 0x03	; 3
    5fd6:	10 e0       	ldi	r17, 0x00	; 0
    5fd8:	f3 ce       	rjmp	.-538    	; 0x5dc0 <getRightSpeedFromInput+0x240>
    5fda:	02 e0       	ldi	r16, 0x02	; 2
    5fdc:	10 e0       	ldi	r17, 0x00	; 0
    5fde:	e4 ce       	rjmp	.-568    	; 0x5da8 <getRightSpeedFromInput+0x228>
        }
    } else {
		if(indBwR==0) {  // the velocity is lower than first saved in the matrix
        	speedRightFromEnc = (last_right_vel*calibration[0][7])/calibration[0][6];
		} else if(indBwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][7]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][6]);  // take the max
    5fe0:	60 91 52 09 	lds	r22, 0x0952
    5fe4:	70 91 53 09 	lds	r23, 0x0953
    5fe8:	88 27       	eor	r24, r24
    5fea:	77 fd       	sbrc	r23, 7
    5fec:	80 95       	com	r24
    5fee:	98 2f       	mov	r25, r24
    5ff0:	0e 94 7b 50 	call	0xa0f6	; 0xa0f6 <__floatsisf>
    5ff4:	5b 01       	movw	r10, r22
    5ff6:	6c 01       	movw	r12, r24
    5ff8:	be 01       	movw	r22, r28
    5ffa:	88 27       	eor	r24, r24
    5ffc:	77 fd       	sbrc	r23, 7
    5ffe:	80 95       	com	r24
    6000:	98 2f       	mov	r25, r24
    6002:	0e 94 7b 50 	call	0xa0f6	; 0xa0f6 <__floatsisf>
    6006:	9b 01       	movw	r18, r22
    6008:	ac 01       	movw	r20, r24
    600a:	c6 01       	movw	r24, r12
    600c:	b5 01       	movw	r22, r10
    600e:	0e 94 90 51 	call	0xa320	; 0xa320 <__mulsf3>
    6012:	5b 01       	movw	r10, r22
    6014:	6c 01       	movw	r12, r24
    6016:	b7 01       	movw	r22, r14
    6018:	88 27       	eor	r24, r24
    601a:	77 fd       	sbrc	r23, 7
    601c:	80 95       	com	r24
    601e:	98 2f       	mov	r25, r24
    6020:	0e 94 7b 50 	call	0xa0f6	; 0xa0f6 <__floatsisf>
    6024:	9b 01       	movw	r18, r22
    6026:	ac 01       	movw	r20, r24
    6028:	c6 01       	movw	r24, r12
    602a:	b5 01       	movw	r22, r10
    602c:	0e 94 e0 4f 	call	0x9fc0	; 0x9fc0 <__divsf3>
    6030:	0e 94 48 50 	call	0xa090	; 0xa090 <__fixsfsi>
    6034:	12 cf       	rjmp	.-476    	; 0x5e5a <getRightSpeedFromInput+0x2da>

00006036 <getLeftSpeedFromInput>:
    }
    
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {
    6036:	8f 92       	push	r8
    6038:	9f 92       	push	r9
    603a:	af 92       	push	r10
    603c:	bf 92       	push	r11
    603e:	cf 92       	push	r12
    6040:	df 92       	push	r13
    6042:	ef 92       	push	r14
    6044:	ff 92       	push	r15
    6046:	0f 93       	push	r16
    6048:	1f 93       	push	r17
    604a:	cf 93       	push	r28
    604c:	df 93       	push	r29

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    604e:	c0 91 f1 02 	lds	r28, 0x02F1
    6052:	d0 91 f2 02 	lds	r29, 0x02F2
    6056:	80 91 f7 02 	lds	r24, 0x02F7
    605a:	90 91 f8 02 	lds	r25, 0x02F8
    605e:	97 fd       	sbrc	r25, 7
    6060:	d9 c0       	rjmp	.+434    	; 0x6214 <getLeftSpeedFromInput+0x1de>
    6062:	60 91 c4 08 	lds	r22, 0x08C4
    6066:	70 91 c5 08 	lds	r23, 0x08C5
    606a:	6c 17       	cp	r22, r28
    606c:	7d 07       	cpc	r23, r29
    606e:	0c f0       	brlt	.+2      	; 0x6072 <getLeftSpeedFromInput+0x3c>
    6070:	bd c0       	rjmp	.+378    	; 0x61ec <getLeftSpeedFromInput+0x1b6>
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    6072:	0f ef       	ldi	r16, 0xFF	; 255
    6074:	1f ef       	ldi	r17, 0xFF	; 255
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    6076:	80 91 d4 08 	lds	r24, 0x08D4
    607a:	90 91 d5 08 	lds	r25, 0x08D5
    607e:	8c 17       	cp	r24, r28
    6080:	9d 07       	cpc	r25, r29
    6082:	44 f0       	brlt	.+16     	; 0x6094 <getLeftSpeedFromInput+0x5e>
    }
    
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {
    6084:	81 e0       	ldi	r24, 0x01	; 1
    6086:	9f ef       	ldi	r25, 0xFF	; 255
    6088:	0f 3f       	cpi	r16, 0xFF	; 255
    608a:	19 07       	cpc	r17, r25
    608c:	09 f0       	breq	.+2      	; 0x6090 <getLeftSpeedFromInput+0x5a>
    608e:	80 e0       	ldi	r24, 0x00	; 0
    6090:	08 2f       	mov	r16, r24
    6092:	10 e0       	ldi	r17, 0x00	; 0

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    6094:	80 91 e4 08 	lds	r24, 0x08E4
    6098:	90 91 e5 08 	lds	r25, 0x08E5
    609c:	8c 17       	cp	r24, r28
    609e:	9d 07       	cpc	r25, r29
    60a0:	2c f0       	brlt	.+10     	; 0x60ac <getLeftSpeedFromInput+0x76>
    60a2:	8f ef       	ldi	r24, 0xFF	; 255
    60a4:	0f 3f       	cpi	r16, 0xFF	; 255
    60a6:	18 07       	cpc	r17, r24
    60a8:	09 f4       	brne	.+2      	; 0x60ac <getLeftSpeedFromInput+0x76>
    60aa:	6c c1       	rjmp	.+728    	; 0x6384 <getLeftSpeedFromInput+0x34e>
    60ac:	80 91 f4 08 	lds	r24, 0x08F4
    60b0:	90 91 f5 08 	lds	r25, 0x08F5
    60b4:	8c 17       	cp	r24, r28
    60b6:	9d 07       	cpc	r25, r29
    60b8:	2c f0       	brlt	.+10     	; 0x60c4 <getLeftSpeedFromInput+0x8e>
    60ba:	9f ef       	ldi	r25, 0xFF	; 255
    60bc:	0f 3f       	cpi	r16, 0xFF	; 255
    60be:	19 07       	cpc	r17, r25
    60c0:	09 f4       	brne	.+2      	; 0x60c4 <getLeftSpeedFromInput+0x8e>
    60c2:	72 c1       	rjmp	.+740    	; 0x63a8 <getLeftSpeedFromInput+0x372>
    60c4:	80 91 04 09 	lds	r24, 0x0904
    60c8:	90 91 05 09 	lds	r25, 0x0905
    60cc:	8c 17       	cp	r24, r28
    60ce:	9d 07       	cpc	r25, r29
    60d0:	2c f0       	brlt	.+10     	; 0x60dc <getLeftSpeedFromInput+0xa6>
    60d2:	8f ef       	ldi	r24, 0xFF	; 255
    60d4:	0f 3f       	cpi	r16, 0xFF	; 255
    60d6:	18 07       	cpc	r17, r24
    60d8:	09 f4       	brne	.+2      	; 0x60dc <getLeftSpeedFromInput+0xa6>
    60da:	63 c1       	rjmp	.+710    	; 0x63a2 <getLeftSpeedFromInput+0x36c>
    60dc:	80 91 14 09 	lds	r24, 0x0914
    60e0:	90 91 15 09 	lds	r25, 0x0915
    60e4:	8c 17       	cp	r24, r28
    60e6:	9d 07       	cpc	r25, r29
    60e8:	2c f0       	brlt	.+10     	; 0x60f4 <getLeftSpeedFromInput+0xbe>
    60ea:	9f ef       	ldi	r25, 0xFF	; 255
    60ec:	0f 3f       	cpi	r16, 0xFF	; 255
    60ee:	19 07       	cpc	r17, r25
    60f0:	09 f4       	brne	.+2      	; 0x60f4 <getLeftSpeedFromInput+0xbe>
    60f2:	54 c1       	rjmp	.+680    	; 0x639c <getLeftSpeedFromInput+0x366>
    60f4:	80 91 24 09 	lds	r24, 0x0924
    60f8:	90 91 25 09 	lds	r25, 0x0925
    60fc:	8c 17       	cp	r24, r28
    60fe:	9d 07       	cpc	r25, r29
    6100:	2c f0       	brlt	.+10     	; 0x610c <getLeftSpeedFromInput+0xd6>
    6102:	8f ef       	ldi	r24, 0xFF	; 255
    6104:	0f 3f       	cpi	r16, 0xFF	; 255
    6106:	18 07       	cpc	r17, r24
    6108:	09 f4       	brne	.+2      	; 0x610c <getLeftSpeedFromInput+0xd6>
    610a:	45 c1       	rjmp	.+650    	; 0x6396 <getLeftSpeedFromInput+0x360>
    610c:	80 91 34 09 	lds	r24, 0x0934
    6110:	90 91 35 09 	lds	r25, 0x0935
    6114:	8c 17       	cp	r24, r28
    6116:	9d 07       	cpc	r25, r29
    6118:	2c f0       	brlt	.+10     	; 0x6124 <getLeftSpeedFromInput+0xee>
    611a:	9f ef       	ldi	r25, 0xFF	; 255
    611c:	0f 3f       	cpi	r16, 0xFF	; 255
    611e:	19 07       	cpc	r17, r25
    6120:	09 f4       	brne	.+2      	; 0x6124 <getLeftSpeedFromInput+0xee>
    6122:	36 c1       	rjmp	.+620    	; 0x6390 <getLeftSpeedFromInput+0x35a>
    6124:	e0 90 44 09 	lds	r14, 0x0944
    6128:	f0 90 45 09 	lds	r15, 0x0945
    612c:	ec 16       	cp	r14, r28
    612e:	fd 06       	cpc	r15, r29
    6130:	2c f0       	brlt	.+10     	; 0x613c <getLeftSpeedFromInput+0x106>
    6132:	8f ef       	ldi	r24, 0xFF	; 255
    6134:	0f 3f       	cpi	r16, 0xFF	; 255
    6136:	18 07       	cpc	r17, r24
    6138:	09 f4       	brne	.+2      	; 0x613c <getLeftSpeedFromInput+0x106>
    613a:	27 c1       	rjmp	.+590    	; 0x638a <getLeftSpeedFromInput+0x354>
			}
		}     
    }

    if(pwm_left >= 0) {
        if(last_left_vel == 0) {
    613c:	20 97       	sbiw	r28, 0x00	; 0
    613e:	09 f4       	brne	.+2      	; 0x6142 <getLeftSpeedFromInput+0x10c>
    6140:	58 c0       	rjmp	.+176    	; 0x61f2 <getLeftSpeedFromInput+0x1bc>
            speedLeftFromEnc = 0;
        } else {
            if(indFwL==0) {  // the velocity is lower than first saved in the matrix
    6142:	01 15       	cp	r16, r1
    6144:	11 05       	cpc	r17, r1
    6146:	09 f4       	brne	.+2      	; 0x614a <getLeftSpeedFromInput+0x114>
    6148:	32 c1       	rjmp	.+612    	; 0x63ae <getLeftSpeedFromInput+0x378>
                speedLeftFromEnc = (last_left_vel*calibration[0][1])/calibration[0][0];
            } else if(indFwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    614a:	9f ef       	ldi	r25, 0xFF	; 255
    614c:	0f 3f       	cpi	r16, 0xFF	; 255
    614e:	19 07       	cpc	r17, r25
    6150:	09 f4       	brne	.+2      	; 0x6154 <getLeftSpeedFromInput+0x11e>
    6152:	e9 c0       	rjmp	.+466    	; 0x6326 <getLeftSpeedFromInput+0x2f0>
                speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][1]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][0]);  // take the max
            } else {
                speedLeftFromEnc = calibration[indFwL-1][1] + (signed int)(((float)(last_left_vel-calibration[indFwL-1][0])*(float)(calibration[indFwL][1]-calibration[indFwL-1][1]))/(float)(calibration[indFwL][0]-calibration[indFwL-1][0]));
    6154:	f8 01       	movw	r30, r16
    6156:	e2 95       	swap	r30
    6158:	f2 95       	swap	r31
    615a:	f0 7f       	andi	r31, 0xF0	; 240
    615c:	fe 27       	eor	r31, r30
    615e:	e0 7f       	andi	r30, 0xF0	; 240
    6160:	fe 27       	eor	r31, r30
    6162:	ec 54       	subi	r30, 0x4C	; 76
    6164:	f7 4f       	sbci	r31, 0xF7	; 247
    6166:	a0 80       	ld	r10, Z
    6168:	b1 80       	ldd	r11, Z+1	; 0x01
    616a:	82 80       	ldd	r8, Z+2	; 0x02
    616c:	93 80       	ldd	r9, Z+3	; 0x03
    616e:	ca 19       	sub	r28, r10
    6170:	db 09       	sbc	r29, r11
    6172:	be 01       	movw	r22, r28
    6174:	88 27       	eor	r24, r24
    6176:	77 fd       	sbrc	r23, 7
    6178:	80 95       	com	r24
    617a:	98 2f       	mov	r25, r24
    617c:	0e 94 7b 50 	call	0xa0f6	; 0xa0f6 <__floatsisf>
    6180:	6b 01       	movw	r12, r22
    6182:	7c 01       	movw	r14, r24
    6184:	e8 01       	movw	r28, r16
    6186:	c2 95       	swap	r28
    6188:	d2 95       	swap	r29
    618a:	d0 7f       	andi	r29, 0xF0	; 240
    618c:	dc 27       	eor	r29, r28
    618e:	c0 7f       	andi	r28, 0xF0	; 240
    6190:	dc 27       	eor	r29, r28
    6192:	cc 53       	subi	r28, 0x3C	; 60
    6194:	d7 4f       	sbci	r29, 0xF7	; 247
    6196:	6a 81       	ldd	r22, Y+2	; 0x02
    6198:	7b 81       	ldd	r23, Y+3	; 0x03
    619a:	68 19       	sub	r22, r8
    619c:	79 09       	sbc	r23, r9
    619e:	88 27       	eor	r24, r24
    61a0:	77 fd       	sbrc	r23, 7
    61a2:	80 95       	com	r24
    61a4:	98 2f       	mov	r25, r24
    61a6:	0e 94 7b 50 	call	0xa0f6	; 0xa0f6 <__floatsisf>
    61aa:	9b 01       	movw	r18, r22
    61ac:	ac 01       	movw	r20, r24
    61ae:	c7 01       	movw	r24, r14
    61b0:	b6 01       	movw	r22, r12
    61b2:	0e 94 90 51 	call	0xa320	; 0xa320 <__mulsf3>
    61b6:	7b 01       	movw	r14, r22
    61b8:	8c 01       	movw	r16, r24
    61ba:	68 81       	ld	r22, Y
    61bc:	79 81       	ldd	r23, Y+1	; 0x01
    61be:	6a 19       	sub	r22, r10
    61c0:	7b 09       	sbc	r23, r11
    61c2:	88 27       	eor	r24, r24
    61c4:	77 fd       	sbrc	r23, 7
    61c6:	80 95       	com	r24
    61c8:	98 2f       	mov	r25, r24
    61ca:	0e 94 7b 50 	call	0xa0f6	; 0xa0f6 <__floatsisf>
    61ce:	9b 01       	movw	r18, r22
    61d0:	ac 01       	movw	r20, r24
    61d2:	c8 01       	movw	r24, r16
    61d4:	b7 01       	movw	r22, r14
    61d6:	0e 94 e0 4f 	call	0x9fc0	; 0x9fc0 <__divsf3>
    61da:	0e 94 48 50 	call	0xa090	; 0xa090 <__fixsfsi>
    61de:	68 0d       	add	r22, r8
    61e0:	79 1d       	adc	r23, r9
    61e2:	70 93 b9 04 	sts	0x04B9, r23
    61e6:	60 93 b8 04 	sts	0x04B8, r22
    61ea:	07 c0       	rjmp	.+14     	; 0x61fa <getLeftSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    61ec:	00 e0       	ldi	r16, 0x00	; 0
    61ee:	10 e0       	ldi	r17, 0x00	; 0
    61f0:	42 cf       	rjmp	.-380    	; 0x6076 <getLeftSpeedFromInput+0x40>
		}     
    }

    if(pwm_left >= 0) {
        if(last_left_vel == 0) {
            speedLeftFromEnc = 0;
    61f2:	10 92 b9 04 	sts	0x04B9, r1
    61f6:	10 92 b8 04 	sts	0x04B8, r1
        	speedLeftFromEnc = calibration[indBwL-1][5] + (signed int)(((float)(last_left_vel-calibration[indBwL-1][4])*(float)(calibration[indBwL][5]-calibration[indBwL-1][5]))/(float)(calibration[indBwL][4]-calibration[indBwL-1][4]));
		}
		speedLeftFromEnc = -speedLeftFromEnc;
    }
    
}
    61fa:	df 91       	pop	r29
    61fc:	cf 91       	pop	r28
    61fe:	1f 91       	pop	r17
    6200:	0f 91       	pop	r16
    6202:	ff 90       	pop	r15
    6204:	ef 90       	pop	r14
    6206:	df 90       	pop	r13
    6208:	cf 90       	pop	r12
    620a:	bf 90       	pop	r11
    620c:	af 90       	pop	r10
    620e:	9f 90       	pop	r9
    6210:	8f 90       	pop	r8
    6212:	08 95       	ret
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    6214:	60 91 cc 08 	lds	r22, 0x08CC
    6218:	70 91 cd 08 	lds	r23, 0x08CD
    621c:	6c 17       	cp	r22, r28
    621e:	7d 07       	cpc	r23, r29
    6220:	0c f0       	brlt	.+2      	; 0x6224 <getLeftSpeedFromInput+0x1ee>
    6222:	7e c0       	rjmp	.+252    	; 0x6320 <getLeftSpeedFromInput+0x2ea>
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    6224:	0f ef       	ldi	r16, 0xFF	; 255
    6226:	1f ef       	ldi	r17, 0xFF	; 255
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    6228:	80 91 dc 08 	lds	r24, 0x08DC
    622c:	90 91 dd 08 	lds	r25, 0x08DD
    6230:	8c 17       	cp	r24, r28
    6232:	9d 07       	cpc	r25, r29
    6234:	44 f0       	brlt	.+16     	; 0x6246 <getLeftSpeedFromInput+0x210>
    }
    
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {
    6236:	81 e0       	ldi	r24, 0x01	; 1
    6238:	9f ef       	ldi	r25, 0xFF	; 255
    623a:	0f 3f       	cpi	r16, 0xFF	; 255
    623c:	19 07       	cpc	r17, r25
    623e:	09 f0       	breq	.+2      	; 0x6242 <getLeftSpeedFromInput+0x20c>
    6240:	80 e0       	ldi	r24, 0x00	; 0
    6242:	08 2f       	mov	r16, r24
    6244:	10 e0       	ldi	r17, 0x00	; 0
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    6246:	80 91 ec 08 	lds	r24, 0x08EC
    624a:	90 91 ed 08 	lds	r25, 0x08ED
    624e:	8c 17       	cp	r24, r28
    6250:	9d 07       	cpc	r25, r29
    6252:	2c f0       	brlt	.+10     	; 0x625e <getLeftSpeedFromInput+0x228>
    6254:	8f ef       	ldi	r24, 0xFF	; 255
    6256:	0f 3f       	cpi	r16, 0xFF	; 255
    6258:	18 07       	cpc	r17, r24
    625a:	09 f4       	brne	.+2      	; 0x625e <getLeftSpeedFromInput+0x228>
    625c:	19 c1       	rjmp	.+562    	; 0x6490 <getLeftSpeedFromInput+0x45a>
    625e:	80 91 fc 08 	lds	r24, 0x08FC
    6262:	90 91 fd 08 	lds	r25, 0x08FD
    6266:	8c 17       	cp	r24, r28
    6268:	9d 07       	cpc	r25, r29
    626a:	2c f0       	brlt	.+10     	; 0x6276 <getLeftSpeedFromInput+0x240>
    626c:	9f ef       	ldi	r25, 0xFF	; 255
    626e:	0f 3f       	cpi	r16, 0xFF	; 255
    6270:	19 07       	cpc	r17, r25
    6272:	09 f4       	brne	.+2      	; 0x6276 <getLeftSpeedFromInput+0x240>
    6274:	0a c1       	rjmp	.+532    	; 0x648a <getLeftSpeedFromInput+0x454>
    6276:	80 91 0c 09 	lds	r24, 0x090C
    627a:	90 91 0d 09 	lds	r25, 0x090D
    627e:	8c 17       	cp	r24, r28
    6280:	9d 07       	cpc	r25, r29
    6282:	2c f0       	brlt	.+10     	; 0x628e <getLeftSpeedFromInput+0x258>
    6284:	8f ef       	ldi	r24, 0xFF	; 255
    6286:	0f 3f       	cpi	r16, 0xFF	; 255
    6288:	18 07       	cpc	r17, r24
    628a:	09 f4       	brne	.+2      	; 0x628e <getLeftSpeedFromInput+0x258>
    628c:	fb c0       	rjmp	.+502    	; 0x6484 <getLeftSpeedFromInput+0x44e>
    628e:	80 91 1c 09 	lds	r24, 0x091C
    6292:	90 91 1d 09 	lds	r25, 0x091D
    6296:	8c 17       	cp	r24, r28
    6298:	9d 07       	cpc	r25, r29
    629a:	2c f0       	brlt	.+10     	; 0x62a6 <getLeftSpeedFromInput+0x270>
    629c:	9f ef       	ldi	r25, 0xFF	; 255
    629e:	0f 3f       	cpi	r16, 0xFF	; 255
    62a0:	19 07       	cpc	r17, r25
    62a2:	09 f4       	brne	.+2      	; 0x62a6 <getLeftSpeedFromInput+0x270>
    62a4:	ec c0       	rjmp	.+472    	; 0x647e <getLeftSpeedFromInput+0x448>
    62a6:	80 91 2c 09 	lds	r24, 0x092C
    62aa:	90 91 2d 09 	lds	r25, 0x092D
    62ae:	8c 17       	cp	r24, r28
    62b0:	9d 07       	cpc	r25, r29
    62b2:	2c f0       	brlt	.+10     	; 0x62be <getLeftSpeedFromInput+0x288>
    62b4:	8f ef       	ldi	r24, 0xFF	; 255
    62b6:	0f 3f       	cpi	r16, 0xFF	; 255
    62b8:	18 07       	cpc	r17, r24
    62ba:	09 f4       	brne	.+2      	; 0x62be <getLeftSpeedFromInput+0x288>
    62bc:	dd c0       	rjmp	.+442    	; 0x6478 <getLeftSpeedFromInput+0x442>
    62be:	80 91 3c 09 	lds	r24, 0x093C
    62c2:	90 91 3d 09 	lds	r25, 0x093D
    62c6:	8c 17       	cp	r24, r28
    62c8:	9d 07       	cpc	r25, r29
    62ca:	2c f0       	brlt	.+10     	; 0x62d6 <getLeftSpeedFromInput+0x2a0>
    62cc:	9f ef       	ldi	r25, 0xFF	; 255
    62ce:	0f 3f       	cpi	r16, 0xFF	; 255
    62d0:	19 07       	cpc	r17, r25
    62d2:	09 f4       	brne	.+2      	; 0x62d6 <getLeftSpeedFromInput+0x2a0>
    62d4:	ce c0       	rjmp	.+412    	; 0x6472 <getLeftSpeedFromInput+0x43c>
    62d6:	e0 90 4c 09 	lds	r14, 0x094C
    62da:	f0 90 4d 09 	lds	r15, 0x094D
    62de:	ec 16       	cp	r14, r28
    62e0:	fd 06       	cpc	r15, r29
    62e2:	2c f0       	brlt	.+10     	; 0x62ee <getLeftSpeedFromInput+0x2b8>
    62e4:	8f ef       	ldi	r24, 0xFF	; 255
    62e6:	0f 3f       	cpi	r16, 0xFF	; 255
    62e8:	18 07       	cpc	r17, r24
    62ea:	09 f4       	brne	.+2      	; 0x62ee <getLeftSpeedFromInput+0x2b8>
    62ec:	bf c0       	rjmp	.+382    	; 0x646c <getLeftSpeedFromInput+0x436>
            } else {
                speedLeftFromEnc = calibration[indFwL-1][1] + (signed int)(((float)(last_left_vel-calibration[indFwL-1][0])*(float)(calibration[indFwL][1]-calibration[indFwL-1][1]))/(float)(calibration[indFwL][0]-calibration[indFwL-1][0]));
            }
        }
    } else {
		if(indBwL==0) {  // the velocity is lower than first saved in the matrix
    62ee:	01 15       	cp	r16, r1
    62f0:	11 05       	cpc	r17, r1
    62f2:	09 f0       	breq	.+2      	; 0x62f6 <getLeftSpeedFromInput+0x2c0>
    62f4:	6e c0       	rjmp	.+220    	; 0x63d2 <getLeftSpeedFromInput+0x39c>
        	speedLeftFromEnc = (last_left_vel*calibration[0][5])/calibration[0][4];
    62f6:	20 91 ce 08 	lds	r18, 0x08CE
    62fa:	30 91 cf 08 	lds	r19, 0x08CF
    62fe:	c2 9f       	mul	r28, r18
    6300:	c0 01       	movw	r24, r0
    6302:	c3 9f       	mul	r28, r19
    6304:	90 0d       	add	r25, r0
    6306:	d2 9f       	mul	r29, r18
    6308:	90 0d       	add	r25, r0
    630a:	11 24       	eor	r1, r1
    630c:	0e 94 4e 52 	call	0xa49c	; 0xa49c <__divmodhi4>
		} else if(indBwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][5]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][4]);  // take the max
		} else {
        	speedLeftFromEnc = calibration[indBwL-1][5] + (signed int)(((float)(last_left_vel-calibration[indBwL-1][4])*(float)(calibration[indBwL][5]-calibration[indBwL-1][5]))/(float)(calibration[indBwL][4]-calibration[indBwL-1][4]));
		}
		speedLeftFromEnc = -speedLeftFromEnc;
    6310:	70 95       	com	r23
    6312:	61 95       	neg	r22
    6314:	7f 4f       	sbci	r23, 0xFF	; 255
    6316:	70 93 b9 04 	sts	0x04B9, r23
    631a:	60 93 b8 04 	sts	0x04B8, r22
    631e:	6d cf       	rjmp	.-294    	; 0x61fa <getLeftSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    6320:	00 e0       	ldi	r16, 0x00	; 0
    6322:	10 e0       	ldi	r17, 0x00	; 0
    6324:	81 cf       	rjmp	.-254    	; 0x6228 <getLeftSpeedFromInput+0x1f2>
            speedLeftFromEnc = 0;
        } else {
            if(indFwL==0) {  // the velocity is lower than first saved in the matrix
                speedLeftFromEnc = (last_left_vel*calibration[0][1])/calibration[0][0];
            } else if(indFwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
                speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][1]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][0]);  // take the max
    6326:	60 91 46 09 	lds	r22, 0x0946
    632a:	70 91 47 09 	lds	r23, 0x0947
    632e:	88 27       	eor	r24, r24
    6330:	77 fd       	sbrc	r23, 7
    6332:	80 95       	com	r24
    6334:	98 2f       	mov	r25, r24
    6336:	0e 94 7b 50 	call	0xa0f6	; 0xa0f6 <__floatsisf>
    633a:	5b 01       	movw	r10, r22
    633c:	6c 01       	movw	r12, r24
    633e:	be 01       	movw	r22, r28
    6340:	88 27       	eor	r24, r24
    6342:	77 fd       	sbrc	r23, 7
    6344:	80 95       	com	r24
    6346:	98 2f       	mov	r25, r24
    6348:	0e 94 7b 50 	call	0xa0f6	; 0xa0f6 <__floatsisf>
    634c:	9b 01       	movw	r18, r22
    634e:	ac 01       	movw	r20, r24
    6350:	c6 01       	movw	r24, r12
    6352:	b5 01       	movw	r22, r10
    6354:	0e 94 90 51 	call	0xa320	; 0xa320 <__mulsf3>
    6358:	5b 01       	movw	r10, r22
    635a:	6c 01       	movw	r12, r24
    635c:	b7 01       	movw	r22, r14
    635e:	88 27       	eor	r24, r24
    6360:	77 fd       	sbrc	r23, 7
    6362:	80 95       	com	r24
    6364:	98 2f       	mov	r25, r24
    6366:	0e 94 7b 50 	call	0xa0f6	; 0xa0f6 <__floatsisf>
    636a:	9b 01       	movw	r18, r22
    636c:	ac 01       	movw	r20, r24
    636e:	c6 01       	movw	r24, r12
    6370:	b5 01       	movw	r22, r10
    6372:	0e 94 e0 4f 	call	0x9fc0	; 0x9fc0 <__divsf3>
    6376:	0e 94 48 50 	call	0xa090	; 0xa090 <__fixsfsi>
    637a:	70 93 b9 04 	sts	0x04B9, r23
    637e:	60 93 b8 04 	sts	0x04B8, r22
    6382:	3b cf       	rjmp	.-394    	; 0x61fa <getLeftSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    6384:	02 e0       	ldi	r16, 0x02	; 2
    6386:	10 e0       	ldi	r17, 0x00	; 0
    6388:	91 ce       	rjmp	.-734    	; 0x60ac <getLeftSpeedFromInput+0x76>
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    638a:	08 e0       	ldi	r16, 0x08	; 8
    638c:	10 e0       	ldi	r17, 0x00	; 0
    638e:	d6 ce       	rjmp	.-596    	; 0x613c <getLeftSpeedFromInput+0x106>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    6390:	07 e0       	ldi	r16, 0x07	; 7
    6392:	10 e0       	ldi	r17, 0x00	; 0
    6394:	c7 ce       	rjmp	.-626    	; 0x6124 <getLeftSpeedFromInput+0xee>
    6396:	06 e0       	ldi	r16, 0x06	; 6
    6398:	10 e0       	ldi	r17, 0x00	; 0
    639a:	b8 ce       	rjmp	.-656    	; 0x610c <getLeftSpeedFromInput+0xd6>
    639c:	05 e0       	ldi	r16, 0x05	; 5
    639e:	10 e0       	ldi	r17, 0x00	; 0
    63a0:	a9 ce       	rjmp	.-686    	; 0x60f4 <getLeftSpeedFromInput+0xbe>
    63a2:	04 e0       	ldi	r16, 0x04	; 4
    63a4:	10 e0       	ldi	r17, 0x00	; 0
    63a6:	9a ce       	rjmp	.-716    	; 0x60dc <getLeftSpeedFromInput+0xa6>
    63a8:	03 e0       	ldi	r16, 0x03	; 3
    63aa:	10 e0       	ldi	r17, 0x00	; 0
    63ac:	8b ce       	rjmp	.-746    	; 0x60c4 <getLeftSpeedFromInput+0x8e>
    if(pwm_left >= 0) {
        if(last_left_vel == 0) {
            speedLeftFromEnc = 0;
        } else {
            if(indFwL==0) {  // the velocity is lower than first saved in the matrix
                speedLeftFromEnc = (last_left_vel*calibration[0][1])/calibration[0][0];
    63ae:	20 91 c6 08 	lds	r18, 0x08C6
    63b2:	30 91 c7 08 	lds	r19, 0x08C7
    63b6:	c2 9f       	mul	r28, r18
    63b8:	c0 01       	movw	r24, r0
    63ba:	c3 9f       	mul	r28, r19
    63bc:	90 0d       	add	r25, r0
    63be:	d2 9f       	mul	r29, r18
    63c0:	90 0d       	add	r25, r0
    63c2:	11 24       	eor	r1, r1
    63c4:	0e 94 4e 52 	call	0xa49c	; 0xa49c <__divmodhi4>
    63c8:	70 93 b9 04 	sts	0x04B9, r23
    63cc:	60 93 b8 04 	sts	0x04B8, r22
    63d0:	14 cf       	rjmp	.-472    	; 0x61fa <getLeftSpeedFromInput+0x1c4>
            }
        }
    } else {
		if(indBwL==0) {  // the velocity is lower than first saved in the matrix
        	speedLeftFromEnc = (last_left_vel*calibration[0][5])/calibration[0][4];
		} else if(indBwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    63d2:	8f ef       	ldi	r24, 0xFF	; 255
    63d4:	0f 3f       	cpi	r16, 0xFF	; 255
    63d6:	18 07       	cpc	r17, r24
    63d8:	09 f4       	brne	.+2      	; 0x63dc <getLeftSpeedFromInput+0x3a6>
    63da:	5d c0       	rjmp	.+186    	; 0x6496 <getLeftSpeedFromInput+0x460>
        	speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][5]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][4]);  // take the max
		} else {
        	speedLeftFromEnc = calibration[indBwL-1][5] + (signed int)(((float)(last_left_vel-calibration[indBwL-1][4])*(float)(calibration[indBwL][5]-calibration[indBwL-1][5]))/(float)(calibration[indBwL][4]-calibration[indBwL-1][4]));
    63dc:	f8 01       	movw	r30, r16
    63de:	e2 95       	swap	r30
    63e0:	f2 95       	swap	r31
    63e2:	f0 7f       	andi	r31, 0xF0	; 240
    63e4:	fe 27       	eor	r31, r30
    63e6:	e0 7f       	andi	r30, 0xF0	; 240
    63e8:	fe 27       	eor	r31, r30
    63ea:	ec 54       	subi	r30, 0x4C	; 76
    63ec:	f7 4f       	sbci	r31, 0xF7	; 247
    63ee:	a0 84       	ldd	r10, Z+8	; 0x08
    63f0:	b1 84       	ldd	r11, Z+9	; 0x09
    63f2:	82 84       	ldd	r8, Z+10	; 0x0a
    63f4:	93 84       	ldd	r9, Z+11	; 0x0b
    63f6:	ca 19       	sub	r28, r10
    63f8:	db 09       	sbc	r29, r11
    63fa:	be 01       	movw	r22, r28
    63fc:	88 27       	eor	r24, r24
    63fe:	77 fd       	sbrc	r23, 7
    6400:	80 95       	com	r24
    6402:	98 2f       	mov	r25, r24
    6404:	0e 94 7b 50 	call	0xa0f6	; 0xa0f6 <__floatsisf>
    6408:	6b 01       	movw	r12, r22
    640a:	7c 01       	movw	r14, r24
    640c:	e8 01       	movw	r28, r16
    640e:	c2 95       	swap	r28
    6410:	d2 95       	swap	r29
    6412:	d0 7f       	andi	r29, 0xF0	; 240
    6414:	dc 27       	eor	r29, r28
    6416:	c0 7f       	andi	r28, 0xF0	; 240
    6418:	dc 27       	eor	r29, r28
    641a:	cc 53       	subi	r28, 0x3C	; 60
    641c:	d7 4f       	sbci	r29, 0xF7	; 247
    641e:	6a 85       	ldd	r22, Y+10	; 0x0a
    6420:	7b 85       	ldd	r23, Y+11	; 0x0b
    6422:	68 19       	sub	r22, r8
    6424:	79 09       	sbc	r23, r9
    6426:	88 27       	eor	r24, r24
    6428:	77 fd       	sbrc	r23, 7
    642a:	80 95       	com	r24
    642c:	98 2f       	mov	r25, r24
    642e:	0e 94 7b 50 	call	0xa0f6	; 0xa0f6 <__floatsisf>
    6432:	9b 01       	movw	r18, r22
    6434:	ac 01       	movw	r20, r24
    6436:	c7 01       	movw	r24, r14
    6438:	b6 01       	movw	r22, r12
    643a:	0e 94 90 51 	call	0xa320	; 0xa320 <__mulsf3>
    643e:	7b 01       	movw	r14, r22
    6440:	8c 01       	movw	r16, r24
    6442:	68 85       	ldd	r22, Y+8	; 0x08
    6444:	79 85       	ldd	r23, Y+9	; 0x09
    6446:	6a 19       	sub	r22, r10
    6448:	7b 09       	sbc	r23, r11
    644a:	88 27       	eor	r24, r24
    644c:	77 fd       	sbrc	r23, 7
    644e:	80 95       	com	r24
    6450:	98 2f       	mov	r25, r24
    6452:	0e 94 7b 50 	call	0xa0f6	; 0xa0f6 <__floatsisf>
    6456:	9b 01       	movw	r18, r22
    6458:	ac 01       	movw	r20, r24
    645a:	c8 01       	movw	r24, r16
    645c:	b7 01       	movw	r22, r14
    645e:	0e 94 e0 4f 	call	0x9fc0	; 0x9fc0 <__divsf3>
    6462:	0e 94 48 50 	call	0xa090	; 0xa090 <__fixsfsi>
    6466:	68 0d       	add	r22, r8
    6468:	79 1d       	adc	r23, r9
    646a:	52 cf       	rjmp	.-348    	; 0x6310 <getLeftSpeedFromInput+0x2da>
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    646c:	08 e0       	ldi	r16, 0x08	; 8
    646e:	10 e0       	ldi	r17, 0x00	; 0
    6470:	3e cf       	rjmp	.-388    	; 0x62ee <getLeftSpeedFromInput+0x2b8>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    6472:	07 e0       	ldi	r16, 0x07	; 7
    6474:	10 e0       	ldi	r17, 0x00	; 0
    6476:	2f cf       	rjmp	.-418    	; 0x62d6 <getLeftSpeedFromInput+0x2a0>
    6478:	06 e0       	ldi	r16, 0x06	; 6
    647a:	10 e0       	ldi	r17, 0x00	; 0
    647c:	20 cf       	rjmp	.-448    	; 0x62be <getLeftSpeedFromInput+0x288>
    647e:	05 e0       	ldi	r16, 0x05	; 5
    6480:	10 e0       	ldi	r17, 0x00	; 0
    6482:	11 cf       	rjmp	.-478    	; 0x62a6 <getLeftSpeedFromInput+0x270>
    6484:	04 e0       	ldi	r16, 0x04	; 4
    6486:	10 e0       	ldi	r17, 0x00	; 0
    6488:	02 cf       	rjmp	.-508    	; 0x628e <getLeftSpeedFromInput+0x258>
    648a:	03 e0       	ldi	r16, 0x03	; 3
    648c:	10 e0       	ldi	r17, 0x00	; 0
    648e:	f3 ce       	rjmp	.-538    	; 0x6276 <getLeftSpeedFromInput+0x240>
    6490:	02 e0       	ldi	r16, 0x02	; 2
    6492:	10 e0       	ldi	r17, 0x00	; 0
    6494:	e4 ce       	rjmp	.-568    	; 0x625e <getLeftSpeedFromInput+0x228>
        }
    } else {
		if(indBwL==0) {  // the velocity is lower than first saved in the matrix
        	speedLeftFromEnc = (last_left_vel*calibration[0][5])/calibration[0][4];
		} else if(indBwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][5]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][4]);  // take the max
    6496:	60 91 4e 09 	lds	r22, 0x094E
    649a:	70 91 4f 09 	lds	r23, 0x094F
    649e:	88 27       	eor	r24, r24
    64a0:	77 fd       	sbrc	r23, 7
    64a2:	80 95       	com	r24
    64a4:	98 2f       	mov	r25, r24
    64a6:	0e 94 7b 50 	call	0xa0f6	; 0xa0f6 <__floatsisf>
    64aa:	5b 01       	movw	r10, r22
    64ac:	6c 01       	movw	r12, r24
    64ae:	be 01       	movw	r22, r28
    64b0:	88 27       	eor	r24, r24
    64b2:	77 fd       	sbrc	r23, 7
    64b4:	80 95       	com	r24
    64b6:	98 2f       	mov	r25, r24
    64b8:	0e 94 7b 50 	call	0xa0f6	; 0xa0f6 <__floatsisf>
    64bc:	9b 01       	movw	r18, r22
    64be:	ac 01       	movw	r20, r24
    64c0:	c6 01       	movw	r24, r12
    64c2:	b5 01       	movw	r22, r10
    64c4:	0e 94 90 51 	call	0xa320	; 0xa320 <__mulsf3>
    64c8:	5b 01       	movw	r10, r22
    64ca:	6c 01       	movw	r12, r24
    64cc:	b7 01       	movw	r22, r14
    64ce:	88 27       	eor	r24, r24
    64d0:	77 fd       	sbrc	r23, 7
    64d2:	80 95       	com	r24
    64d4:	98 2f       	mov	r25, r24
    64d6:	0e 94 7b 50 	call	0xa0f6	; 0xa0f6 <__floatsisf>
    64da:	9b 01       	movw	r18, r22
    64dc:	ac 01       	movw	r20, r24
    64de:	c6 01       	movw	r24, r12
    64e0:	b5 01       	movw	r22, r10
    64e2:	0e 94 e0 4f 	call	0x9fc0	; 0x9fc0 <__divsf3>
    64e6:	0e 94 48 50 	call	0xa090	; 0xa090 <__fixsfsi>
    64ea:	12 cf       	rjmp	.-476    	; 0x6310 <getLeftSpeedFromInput+0x2da>

000064ec <handleMotorsWithSpeedController>:
		OCR4B = 0;
	}

}

void handleMotorsWithSpeedController() {
    64ec:	2f 92       	push	r2
    64ee:	3f 92       	push	r3
    64f0:	4f 92       	push	r4
    64f2:	5f 92       	push	r5
    64f4:	6f 92       	push	r6
    64f6:	7f 92       	push	r7
    64f8:	8f 92       	push	r8
    64fa:	9f 92       	push	r9
    64fc:	af 92       	push	r10
    64fe:	bf 92       	push	r11
    6500:	cf 92       	push	r12
    6502:	df 92       	push	r13
    6504:	ef 92       	push	r14
    6506:	ff 92       	push	r15
    6508:	0f 93       	push	r16
    650a:	1f 93       	push	r17

	if(calibrateOdomFlag==1) {
    650c:	80 91 4e 05 	lds	r24, 0x054E
    6510:	81 30       	cpi	r24, 0x01	; 1
    6512:	09 f4       	brne	.+2      	; 0x6516 <handleMotorsWithSpeedController+0x2a>
    6514:	28 c2       	rjmp	.+1104   	; 0x6966 <handleMotorsWithSpeedController+0x47a>
		pwm_right_working = pwm_intermediate_right_desired;
		pwm_left_working = pwm_intermediate_left_desired;
	} else {
		if(pwm_intermediate_right_desired >= 0) {		// pwm in the range -127..127
    6516:	80 91 fd 02 	lds	r24, 0x02FD
    651a:	90 91 fe 02 	lds	r25, 0x02FE
    651e:	97 fd       	sbrc	r25, 7
    6520:	9a c2       	rjmp	.+1332   	; 0x6a56 <handleMotorsWithSpeedController+0x56a>
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_FW_SC);
    6522:	61 e0       	ldi	r22, 0x01	; 1
    6524:	0e 94 58 2a 	call	0x54b0	; 0x54b0 <getInputFromSpeed>
    6528:	90 93 0e 03 	sts	0x030E, r25
    652c:	80 93 0d 03 	sts	0x030D, r24
		} else {
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_BW_SC);
		}
		if(pwm_intermediate_left_desired >= 0) {		// pwm in the range -127..127
    6530:	80 91 ff 02 	lds	r24, 0x02FF
    6534:	90 91 00 03 	lds	r25, 0x0300
    6538:	97 fd       	sbrc	r25, 7
    653a:	85 c2       	rjmp	.+1290   	; 0x6a46 <handleMotorsWithSpeedController+0x55a>
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_FW_SC);
    653c:	60 e0       	ldi	r22, 0x00	; 0
    653e:	0e 94 58 2a 	call	0x54b0	; 0x54b0 <getInputFromSpeed>
    6542:	90 93 10 03 	sts	0x0310, r25
    6546:	80 93 0f 03 	sts	0x030F, r24
		} else {
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_BW_SC);
		}
	}

	if(obstacleAvoidanceEnabled) {
    654a:	20 91 6c 04 	lds	r18, 0x046C
    654e:	22 23       	and	r18, r18
    6550:	09 f0       	breq	.+2      	; 0x6554 <handleMotorsWithSpeedController+0x68>
    6552:	fe c1       	rjmp	.+1020   	; 0x6950 <handleMotorsWithSpeedController+0x464>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
	}
	pwm_left_desired_to_control = pwm_left_working;
    6554:	90 93 ec 02 	sts	0x02EC, r25
    6558:	80 93 eb 02 	sts	0x02EB, r24
	pwm_right_desired_to_control = pwm_right_working;
    655c:	80 91 0d 03 	lds	r24, 0x030D
    6560:	90 91 0e 03 	lds	r25, 0x030E
    6564:	90 93 ea 02 	sts	0x02EA, r25
    6568:	80 93 e9 02 	sts	0x02E9, r24

	if(compute_left_vel) {
    656c:	80 91 07 02 	lds	r24, 0x0207
    6570:	88 23       	and	r24, r24
    6572:	09 f4       	brne	.+2      	; 0x6576 <handleMotorsWithSpeedController+0x8a>
    6574:	93 c0       	rjmp	.+294    	; 0x669c <handleMotorsWithSpeedController+0x1b0>

		last_left_vel = left_vel_sum>>2;
    6576:	20 91 ed 02 	lds	r18, 0x02ED
    657a:	30 91 ee 02 	lds	r19, 0x02EE
    657e:	36 95       	lsr	r19
    6580:	27 95       	ror	r18
    6582:	36 95       	lsr	r19
    6584:	27 95       	ror	r18
    6586:	30 93 f2 02 	sts	0x02F2, r19
    658a:	20 93 f1 02 	sts	0x02F1, r18
		compute_left_vel = 0;
    658e:	10 92 07 02 	sts	0x0207, r1
		left_vel_sum = 0;
    6592:	10 92 ee 02 	sts	0x02EE, r1
    6596:	10 92 ed 02 	sts	0x02ED, r1
		
		if(calibrateOdomFlag==1) {
    659a:	80 91 4e 05 	lds	r24, 0x054E
    659e:	81 30       	cpi	r24, 0x01	; 1
    65a0:	09 f4       	brne	.+2      	; 0x65a4 <handleMotorsWithSpeedController+0xb8>
    65a2:	08 c2       	rjmp	.+1040   	; 0x69b4 <handleMotorsWithSpeedController+0x4c8>
			leftSpeedSumOdom += last_left_vel;
			leftSumCount++;
		}

		getLeftSpeedFromInput();	// get speed in mm/s
    65a4:	0e 94 1b 30 	call	0x6036	; 0x6036 <getLeftSpeedFromInput>
		leftDistPrev = leftDist;
    65a8:	80 91 93 04 	lds	r24, 0x0493
    65ac:	90 91 94 04 	lds	r25, 0x0494
    65b0:	a0 91 95 04 	lds	r26, 0x0495
    65b4:	b0 91 96 04 	lds	r27, 0x0496
    65b8:	80 93 9b 04 	sts	0x049B, r24
    65bc:	90 93 9c 04 	sts	0x049C, r25
    65c0:	a0 93 9d 04 	sts	0x049D, r26
    65c4:	b0 93 9e 04 	sts	0x049E, r27
		//timeOdometry = getTime100MicroSec()-timeLeftOdom;
		leftDist += ((float)speedLeftFromEnc*((float)(getTime100MicroSec()-timeLeftOdom)*104.0))/1000000.0;	// distance in mm				
    65c8:	60 91 b8 04 	lds	r22, 0x04B8
    65cc:	70 91 b9 04 	lds	r23, 0x04B9
    65d0:	88 27       	eor	r24, r24
    65d2:	77 fd       	sbrc	r23, 7
    65d4:	80 95       	com	r24
    65d6:	98 2f       	mov	r25, r24
    65d8:	0e 94 7b 50 	call	0xa0f6	; 0xa0f6 <__floatsisf>
    65dc:	7b 01       	movw	r14, r22
    65de:	8c 01       	movw	r16, r24
    65e0:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <getTime100MicroSec>
    65e4:	20 91 bc 04 	lds	r18, 0x04BC
    65e8:	30 91 bd 04 	lds	r19, 0x04BD
    65ec:	40 91 be 04 	lds	r20, 0x04BE
    65f0:	50 91 bf 04 	lds	r21, 0x04BF
    65f4:	62 1b       	sub	r22, r18
    65f6:	73 0b       	sbc	r23, r19
    65f8:	84 0b       	sbc	r24, r20
    65fa:	95 0b       	sbc	r25, r21
    65fc:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <__floatunsisf>
    6600:	20 e0       	ldi	r18, 0x00	; 0
    6602:	30 e0       	ldi	r19, 0x00	; 0
    6604:	40 ed       	ldi	r20, 0xD0	; 208
    6606:	52 e4       	ldi	r21, 0x42	; 66
    6608:	0e 94 90 51 	call	0xa320	; 0xa320 <__mulsf3>
    660c:	9b 01       	movw	r18, r22
    660e:	ac 01       	movw	r20, r24
    6610:	c8 01       	movw	r24, r16
    6612:	b7 01       	movw	r22, r14
    6614:	0e 94 90 51 	call	0xa320	; 0xa320 <__mulsf3>
    6618:	20 e0       	ldi	r18, 0x00	; 0
    661a:	34 e2       	ldi	r19, 0x24	; 36
    661c:	44 e7       	ldi	r20, 0x74	; 116
    661e:	59 e4       	ldi	r21, 0x49	; 73
    6620:	0e 94 e0 4f 	call	0x9fc0	; 0x9fc0 <__divsf3>
    6624:	9b 01       	movw	r18, r22
    6626:	ac 01       	movw	r20, r24
    6628:	60 91 93 04 	lds	r22, 0x0493
    662c:	70 91 94 04 	lds	r23, 0x0494
    6630:	80 91 95 04 	lds	r24, 0x0495
    6634:	90 91 96 04 	lds	r25, 0x0496
    6638:	0e 94 13 4f 	call	0x9e26	; 0x9e26 <__addsf3>
    663c:	60 93 93 04 	sts	0x0493, r22
    6640:	70 93 94 04 	sts	0x0494, r23
    6644:	80 93 95 04 	sts	0x0495, r24
    6648:	90 93 96 04 	sts	0x0496, r25
		timeLeftOdom = getTime100MicroSec();
    664c:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <getTime100MicroSec>
    6650:	60 93 bc 04 	sts	0x04BC, r22
    6654:	70 93 bd 04 	sts	0x04BD, r23
    6658:	80 93 be 04 	sts	0x04BE, r24
    665c:	90 93 bf 04 	sts	0x04BF, r25
		} else {
			leftMotSteps -= ((float)(last_left_vel>>3))*(LEFT_ENC_OFFSET-ENC_SLOPE*((float)(last_left_vel>>2)))/1000.0;
		}

*/
		if(robotPosition == HORIZONTAL_POS) {
    6660:	80 91 16 02 	lds	r24, 0x0216
    6664:	81 30       	cpi	r24, 0x01	; 1
    6666:	09 f4       	brne	.+2      	; 0x666a <handleMotorsWithSpeedController+0x17e>
    6668:	c7 c1       	rjmp	.+910    	; 0x69f8 <handleMotorsWithSpeedController+0x50c>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_left(&pwm_left_working);
			//PORTB |= (1 << 5);
		} else {
			//PORTB &= ~(1 << 6);
			start_vertical_speed_control_left(&pwm_left_working);
    666a:	8f e0       	ldi	r24, 0x0F	; 15
    666c:	93 e0       	ldi	r25, 0x03	; 3
    666e:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <start_vertical_speed_control_left>
			//PORTB |= (1 << 6);
		}

		pwm_left = pwm_left_working;
    6672:	80 91 0f 03 	lds	r24, 0x030F
    6676:	90 91 10 03 	lds	r25, 0x0310
    667a:	90 93 f8 02 	sts	0x02F8, r25
    667e:	80 93 f7 02 	sts	0x02F7, r24

		if(pwm_left > 0) {
    6682:	18 16       	cp	r1, r24
    6684:	19 06       	cpc	r1, r25
    6686:	0c f0       	brlt	.+2      	; 0x668a <handleMotorsWithSpeedController+0x19e>
    6688:	f9 c1       	rjmp	.+1010   	; 0x6a7c <handleMotorsWithSpeedController+0x590>
			OCR4A = (unsigned int)pwm_left;
    668a:	90 93 a9 00 	sts	0x00A9, r25
    668e:	80 93 a8 00 	sts	0x00A8, r24
		} else {
			OCR4A = 0;
			OCR4B = 0;
		}

		computeOdometry++;
    6692:	80 91 a3 04 	lds	r24, 0x04A3
    6696:	8f 5f       	subi	r24, 0xFF	; 255
    6698:	80 93 a3 04 	sts	0x04A3, r24

	}

	if(compute_right_vel) {
    669c:	80 91 08 02 	lds	r24, 0x0208
    66a0:	88 23       	and	r24, r24
    66a2:	09 f0       	breq	.+2      	; 0x66a6 <handleMotorsWithSpeedController+0x1ba>
    66a4:	c1 c0       	rjmp	.+386    	; 0x6828 <handleMotorsWithSpeedController+0x33c>
    66a6:	80 91 a3 04 	lds	r24, 0x04A3

		computeOdometry++;

	}

	if(computeOdometry>=2) {	// compute odometry when we get the last encoders values for both wheels
    66aa:	82 30       	cpi	r24, 0x02	; 2
    66ac:	08 f4       	brcc	.+2      	; 0x66b0 <handleMotorsWithSpeedController+0x1c4>
    66ae:	ab c0       	rjmp	.+342    	; 0x6806 <handleMotorsWithSpeedController+0x31a>

		// the odometry computation takes about 1 ms

		computeOdometry = 0;
    66b0:	10 92 a3 04 	sts	0x04A3, r1

		deltaDist = ((rightDist-rightDistPrev)+(leftDist-leftDistPrev))/2.0;
    66b4:	60 90 97 04 	lds	r6, 0x0497
    66b8:	70 90 98 04 	lds	r7, 0x0498
    66bc:	80 90 99 04 	lds	r8, 0x0499
    66c0:	90 90 9a 04 	lds	r9, 0x049A
    66c4:	20 90 93 04 	lds	r2, 0x0493
    66c8:	30 90 94 04 	lds	r3, 0x0494
    66cc:	40 90 95 04 	lds	r4, 0x0495
    66d0:	50 90 96 04 	lds	r5, 0x0496
    66d4:	c4 01       	movw	r24, r8
    66d6:	b3 01       	movw	r22, r6
    66d8:	20 91 9f 04 	lds	r18, 0x049F
    66dc:	30 91 a0 04 	lds	r19, 0x04A0
    66e0:	40 91 a1 04 	lds	r20, 0x04A1
    66e4:	50 91 a2 04 	lds	r21, 0x04A2
    66e8:	0e 94 12 4f 	call	0x9e24	; 0x9e24 <__subsf3>
    66ec:	7b 01       	movw	r14, r22
    66ee:	8c 01       	movw	r16, r24
    66f0:	c2 01       	movw	r24, r4
    66f2:	b1 01       	movw	r22, r2
    66f4:	20 91 9b 04 	lds	r18, 0x049B
    66f8:	30 91 9c 04 	lds	r19, 0x049C
    66fc:	40 91 9d 04 	lds	r20, 0x049D
    6700:	50 91 9e 04 	lds	r21, 0x049E
    6704:	0e 94 12 4f 	call	0x9e24	; 0x9e24 <__subsf3>
    6708:	9b 01       	movw	r18, r22
    670a:	ac 01       	movw	r20, r24
    670c:	c8 01       	movw	r24, r16
    670e:	b7 01       	movw	r22, r14
    6710:	0e 94 13 4f 	call	0x9e26	; 0x9e26 <__addsf3>
    6714:	20 e0       	ldi	r18, 0x00	; 0
    6716:	30 e0       	ldi	r19, 0x00	; 0
    6718:	40 e0       	ldi	r20, 0x00	; 0
    671a:	5f e3       	ldi	r21, 0x3F	; 63
    671c:	0e 94 90 51 	call	0xa320	; 0xa320 <__mulsf3>
    6720:	d6 2e       	mov	r13, r22
    6722:	c7 2e       	mov	r12, r23
    6724:	b8 2e       	mov	r11, r24
    6726:	a9 2e       	mov	r10, r25
    6728:	a6 01       	movw	r20, r12
    672a:	95 01       	movw	r18, r10
    672c:	85 2f       	mov	r24, r21
    672e:	94 2f       	mov	r25, r20
    6730:	a3 2f       	mov	r26, r19
    6732:	b2 2f       	mov	r27, r18
    6734:	80 93 7f 04 	sts	0x047F, r24
    6738:	90 93 80 04 	sts	0x0480, r25
    673c:	a0 93 81 04 	sts	0x0481, r26
    6740:	b0 93 82 04 	sts	0x0482, r27

		if(robotPosition == HORIZONTAL_POS) {
    6744:	80 91 16 02 	lds	r24, 0x0216
    6748:	81 30       	cpi	r24, 0x01	; 1
    674a:	09 f4       	brne	.+2      	; 0x674e <handleMotorsWithSpeedController+0x262>
    674c:	1d c1       	rjmp	.+570    	; 0x6988 <handleMotorsWithSpeedController+0x49c>
			//thetaOld = (rightMotSteps - leftMotSteps)/WHEEL_DIST;	// radians
			theta = (rightDist-leftDist)/WHEEL_DIST;
		} else {
			//thetaOld = thetaAcc;
			theta = thetaAcc;
    674e:	f0 90 a4 04 	lds	r15, 0x04A4
    6752:	00 91 a5 04 	lds	r16, 0x04A5
    6756:	10 91 a6 04 	lds	r17, 0x04A6
    675a:	e0 90 a7 04 	lds	r14, 0x04A7
    675e:	8f 2d       	mov	r24, r15
    6760:	90 2f       	mov	r25, r16
    6762:	a1 2f       	mov	r26, r17
    6764:	be 2d       	mov	r27, r14
    6766:	80 93 6f 04 	sts	0x046F, r24
    676a:	90 93 70 04 	sts	0x0470, r25
    676e:	a0 93 71 04 	sts	0x0471, r26
    6772:	b0 93 72 04 	sts	0x0472, r27
		}

		//deltaDistOld = ((rightMotSteps-rightMotStepsOld)+(leftMotSteps-leftMotStepsOld))/2.0;

		xPos = xPos + cos(theta)*deltaDist;				
    6776:	6f 2d       	mov	r22, r15
    6778:	70 2f       	mov	r23, r16
    677a:	81 2f       	mov	r24, r17
    677c:	9e 2d       	mov	r25, r14
    677e:	0e 94 dd 4f 	call	0x9fba	; 0x9fba <cos>
    6782:	9b 01       	movw	r18, r22
    6784:	ac 01       	movw	r20, r24
    6786:	d6 01       	movw	r26, r12
    6788:	f5 01       	movw	r30, r10
    678a:	6b 2f       	mov	r22, r27
    678c:	7c 2d       	mov	r23, r12
    678e:	8f 2f       	mov	r24, r31
    6790:	9a 2d       	mov	r25, r10
    6792:	0e 94 90 51 	call	0xa320	; 0xa320 <__mulsf3>
    6796:	9b 01       	movw	r18, r22
    6798:	ac 01       	movw	r20, r24
    679a:	60 91 77 04 	lds	r22, 0x0477
    679e:	70 91 78 04 	lds	r23, 0x0478
    67a2:	80 91 79 04 	lds	r24, 0x0479
    67a6:	90 91 7a 04 	lds	r25, 0x047A
    67aa:	0e 94 13 4f 	call	0x9e26	; 0x9e26 <__addsf3>
    67ae:	60 93 77 04 	sts	0x0477, r22
    67b2:	70 93 78 04 	sts	0x0478, r23
    67b6:	80 93 79 04 	sts	0x0479, r24
    67ba:	90 93 7a 04 	sts	0x047A, r25
		yPos = yPos + sin(theta)*deltaDist;
    67be:	6f 2d       	mov	r22, r15
    67c0:	70 2f       	mov	r23, r16
    67c2:	81 2f       	mov	r24, r17
    67c4:	9e 2d       	mov	r25, r14
    67c6:	0e 94 f3 51 	call	0xa3e6	; 0xa3e6 <sin>
    67ca:	9b 01       	movw	r18, r22
    67cc:	ac 01       	movw	r20, r24
    67ce:	d6 01       	movw	r26, r12
    67d0:	f5 01       	movw	r30, r10
    67d2:	6b 2f       	mov	r22, r27
    67d4:	7c 2d       	mov	r23, r12
    67d6:	8f 2f       	mov	r24, r31
    67d8:	9a 2d       	mov	r25, r10
    67da:	0e 94 90 51 	call	0xa320	; 0xa320 <__mulsf3>
    67de:	9b 01       	movw	r18, r22
    67e0:	ac 01       	movw	r20, r24
    67e2:	60 91 7b 04 	lds	r22, 0x047B
    67e6:	70 91 7c 04 	lds	r23, 0x047C
    67ea:	80 91 7d 04 	lds	r24, 0x047D
    67ee:	90 91 7e 04 	lds	r25, 0x047E
    67f2:	0e 94 13 4f 	call	0x9e26	; 0x9e26 <__addsf3>
    67f6:	60 93 7b 04 	sts	0x047B, r22
    67fa:	70 93 7c 04 	sts	0x047C, r23
    67fe:	80 93 7d 04 	sts	0x047D, r24
    6802:	90 93 7e 04 	sts	0x047E, r25
		//xPosOld = xPosOld + cos(thetaOld)*deltaDistOld;				
		//yPosOld = yPosOld + sin(thetaOld)*deltaDistOld;

	}

}
    6806:	1f 91       	pop	r17
    6808:	0f 91       	pop	r16
    680a:	ff 90       	pop	r15
    680c:	ef 90       	pop	r14
    680e:	df 90       	pop	r13
    6810:	cf 90       	pop	r12
    6812:	bf 90       	pop	r11
    6814:	af 90       	pop	r10
    6816:	9f 90       	pop	r9
    6818:	8f 90       	pop	r8
    681a:	7f 90       	pop	r7
    681c:	6f 90       	pop	r6
    681e:	5f 90       	pop	r5
    6820:	4f 90       	pop	r4
    6822:	3f 90       	pop	r3
    6824:	2f 90       	pop	r2
    6826:	08 95       	ret

	}

	if(compute_right_vel) {

		last_right_vel = right_vel_sum>>2;
    6828:	20 91 ef 02 	lds	r18, 0x02EF
    682c:	30 91 f0 02 	lds	r19, 0x02F0
    6830:	36 95       	lsr	r19
    6832:	27 95       	ror	r18
    6834:	36 95       	lsr	r19
    6836:	27 95       	ror	r18
    6838:	30 93 f4 02 	sts	0x02F4, r19
    683c:	20 93 f3 02 	sts	0x02F3, r18
		compute_right_vel = 0;
    6840:	10 92 08 02 	sts	0x0208, r1
		right_vel_sum = 0;
    6844:	10 92 f0 02 	sts	0x02F0, r1
    6848:	10 92 ef 02 	sts	0x02EF, r1

		if(calibrateOdomFlag==1) {
    684c:	80 91 4e 05 	lds	r24, 0x054E
    6850:	81 30       	cpi	r24, 0x01	; 1
    6852:	09 f4       	brne	.+2      	; 0x6856 <handleMotorsWithSpeedController+0x36a>
    6854:	d6 c0       	rjmp	.+428    	; 0x6a02 <handleMotorsWithSpeedController+0x516>
			rightSpeedSumOdom += last_right_vel;
			rightSumCount++;
		}

		getRightSpeedFromInput();
    6856:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <getRightSpeedFromInput>
		rightDistPrev = rightDist;
    685a:	80 91 97 04 	lds	r24, 0x0497
    685e:	90 91 98 04 	lds	r25, 0x0498
    6862:	a0 91 99 04 	lds	r26, 0x0499
    6866:	b0 91 9a 04 	lds	r27, 0x049A
    686a:	80 93 9f 04 	sts	0x049F, r24
    686e:	90 93 a0 04 	sts	0x04A0, r25
    6872:	a0 93 a1 04 	sts	0x04A1, r26
    6876:	b0 93 a2 04 	sts	0x04A2, r27
		rightDist += ((float)speedRightFromEnc*((float)(getTime100MicroSec()-timeRightOdom)*104.0))/1000000.0;	// distance in mm				
    687a:	60 91 ba 04 	lds	r22, 0x04BA
    687e:	70 91 bb 04 	lds	r23, 0x04BB
    6882:	88 27       	eor	r24, r24
    6884:	77 fd       	sbrc	r23, 7
    6886:	80 95       	com	r24
    6888:	98 2f       	mov	r25, r24
    688a:	0e 94 7b 50 	call	0xa0f6	; 0xa0f6 <__floatsisf>
    688e:	7b 01       	movw	r14, r22
    6890:	8c 01       	movw	r16, r24
    6892:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <getTime100MicroSec>
    6896:	20 91 c0 04 	lds	r18, 0x04C0
    689a:	30 91 c1 04 	lds	r19, 0x04C1
    689e:	40 91 c2 04 	lds	r20, 0x04C2
    68a2:	50 91 c3 04 	lds	r21, 0x04C3
    68a6:	62 1b       	sub	r22, r18
    68a8:	73 0b       	sbc	r23, r19
    68aa:	84 0b       	sbc	r24, r20
    68ac:	95 0b       	sbc	r25, r21
    68ae:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <__floatunsisf>
    68b2:	20 e0       	ldi	r18, 0x00	; 0
    68b4:	30 e0       	ldi	r19, 0x00	; 0
    68b6:	40 ed       	ldi	r20, 0xD0	; 208
    68b8:	52 e4       	ldi	r21, 0x42	; 66
    68ba:	0e 94 90 51 	call	0xa320	; 0xa320 <__mulsf3>
    68be:	9b 01       	movw	r18, r22
    68c0:	ac 01       	movw	r20, r24
    68c2:	c8 01       	movw	r24, r16
    68c4:	b7 01       	movw	r22, r14
    68c6:	0e 94 90 51 	call	0xa320	; 0xa320 <__mulsf3>
    68ca:	20 e0       	ldi	r18, 0x00	; 0
    68cc:	34 e2       	ldi	r19, 0x24	; 36
    68ce:	44 e7       	ldi	r20, 0x74	; 116
    68d0:	59 e4       	ldi	r21, 0x49	; 73
    68d2:	0e 94 e0 4f 	call	0x9fc0	; 0x9fc0 <__divsf3>
    68d6:	9b 01       	movw	r18, r22
    68d8:	ac 01       	movw	r20, r24
    68da:	60 91 97 04 	lds	r22, 0x0497
    68de:	70 91 98 04 	lds	r23, 0x0498
    68e2:	80 91 99 04 	lds	r24, 0x0499
    68e6:	90 91 9a 04 	lds	r25, 0x049A
    68ea:	0e 94 13 4f 	call	0x9e26	; 0x9e26 <__addsf3>
    68ee:	60 93 97 04 	sts	0x0497, r22
    68f2:	70 93 98 04 	sts	0x0498, r23
    68f6:	80 93 99 04 	sts	0x0499, r24
    68fa:	90 93 9a 04 	sts	0x049A, r25
		timeRightOdom = getTime100MicroSec();
    68fe:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <getTime100MicroSec>
    6902:	60 93 c0 04 	sts	0x04C0, r22
    6906:	70 93 c1 04 	sts	0x04C1, r23
    690a:	80 93 c2 04 	sts	0x04C2, r24
    690e:	90 93 c3 04 	sts	0x04C3, r25
		} else {
			rightMotSteps -= ((float)(last_right_vel>>3))*(RIGHT_ENC_OFFSET-ENC_SLOPE*((float)(last_right_vel>>2)))/1000.0;
		}
*/

		if(robotPosition == HORIZONTAL_POS) {
    6912:	80 91 16 02 	lds	r24, 0x0216
    6916:	81 30       	cpi	r24, 0x01	; 1
    6918:	09 f4       	brne	.+2      	; 0x691c <handleMotorsWithSpeedController+0x430>
    691a:	47 c0       	rjmp	.+142    	; 0x69aa <handleMotorsWithSpeedController+0x4be>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_right(&pwm_right_working);
			//PORTB |= (1 << 5);
		} else {
			//PORTB &= ~(1 << 6);
			start_vertical_speed_control_right(&pwm_right_working);
    691c:	8d e0       	ldi	r24, 0x0D	; 13
    691e:	93 e0       	ldi	r25, 0x03	; 3
    6920:	0e 94 82 17 	call	0x2f04	; 0x2f04 <start_vertical_speed_control_right>
			//PORTB |= (1 << 6);
		}

		pwm_right = pwm_right_working;
    6924:	80 91 0d 03 	lds	r24, 0x030D
    6928:	90 91 0e 03 	lds	r25, 0x030E
    692c:	90 93 f6 02 	sts	0x02F6, r25
    6930:	80 93 f5 02 	sts	0x02F5, r24

		if(pwm_right > 0) {
    6934:	18 16       	cp	r1, r24
    6936:	19 06       	cpc	r1, r25
    6938:	0c f0       	brlt	.+2      	; 0x693c <handleMotorsWithSpeedController+0x450>
    693a:	95 c0       	rjmp	.+298    	; 0x6a66 <handleMotorsWithSpeedController+0x57a>
			OCR3A = (unsigned int)pwm_right;
    693c:	90 93 99 00 	sts	0x0099, r25
    6940:	80 93 98 00 	sts	0x0098, r24
		} else {
			OCR3A = 0;
			OCR3B = 0;
		}

		computeOdometry++;
    6944:	80 91 a3 04 	lds	r24, 0x04A3
    6948:	8f 5f       	subi	r24, 0xFF	; 255
    694a:	80 93 a3 04 	sts	0x04A3, r24
    694e:	ad ce       	rjmp	.-678    	; 0x66aa <handleMotorsWithSpeedController+0x1be>
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_BW_SC);
		}
	}

	if(obstacleAvoidanceEnabled) {
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
    6950:	8f e0       	ldi	r24, 0x0F	; 15
    6952:	93 e0       	ldi	r25, 0x03	; 3
    6954:	6d e0       	ldi	r22, 0x0D	; 13
    6956:	73 e0       	ldi	r23, 0x03	; 3
    6958:	0e 94 ab 38 	call	0x7156	; 0x7156 <obstacleAvoidance>
    695c:	80 91 0f 03 	lds	r24, 0x030F
    6960:	90 91 10 03 	lds	r25, 0x0310
    6964:	f7 cd       	rjmp	.-1042   	; 0x6554 <handleMotorsWithSpeedController+0x68>
}

void handleMotorsWithSpeedController() {

	if(calibrateOdomFlag==1) {
		pwm_right_working = pwm_intermediate_right_desired;
    6966:	80 91 fd 02 	lds	r24, 0x02FD
    696a:	90 91 fe 02 	lds	r25, 0x02FE
    696e:	90 93 0e 03 	sts	0x030E, r25
    6972:	80 93 0d 03 	sts	0x030D, r24
		pwm_left_working = pwm_intermediate_left_desired;
    6976:	80 91 ff 02 	lds	r24, 0x02FF
    697a:	90 91 00 03 	lds	r25, 0x0300
    697e:	90 93 10 03 	sts	0x0310, r25
    6982:	80 93 0f 03 	sts	0x030F, r24
    6986:	e1 cd       	rjmp	.-1086   	; 0x654a <handleMotorsWithSpeedController+0x5e>

		deltaDist = ((rightDist-rightDistPrev)+(leftDist-leftDistPrev))/2.0;

		if(robotPosition == HORIZONTAL_POS) {
			//thetaOld = (rightMotSteps - leftMotSteps)/WHEEL_DIST;	// radians
			theta = (rightDist-leftDist)/WHEEL_DIST;
    6988:	c4 01       	movw	r24, r8
    698a:	b3 01       	movw	r22, r6
    698c:	a2 01       	movw	r20, r4
    698e:	91 01       	movw	r18, r2
    6990:	0e 94 12 4f 	call	0x9e24	; 0x9e24 <__subsf3>
    6994:	20 e0       	ldi	r18, 0x00	; 0
    6996:	30 e0       	ldi	r19, 0x00	; 0
    6998:	4e e1       	ldi	r20, 0x1E	; 30
    699a:	52 e4       	ldi	r21, 0x42	; 66
    699c:	0e 94 e0 4f 	call	0x9fc0	; 0x9fc0 <__divsf3>
    69a0:	f6 2e       	mov	r15, r22
    69a2:	07 2f       	mov	r16, r23
    69a4:	18 2f       	mov	r17, r24
    69a6:	e9 2e       	mov	r14, r25
    69a8:	da ce       	rjmp	.-588    	; 0x675e <handleMotorsWithSpeedController+0x272>
		}
*/

		if(robotPosition == HORIZONTAL_POS) {
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_right(&pwm_right_working);
    69aa:	8d e0       	ldi	r24, 0x0D	; 13
    69ac:	93 e0       	ldi	r25, 0x03	; 3
    69ae:	0e 94 20 19 	call	0x3240	; 0x3240 <start_horizontal_speed_control_right>
    69b2:	b8 cf       	rjmp	.-144    	; 0x6924 <handleMotorsWithSpeedController+0x438>
		last_left_vel = left_vel_sum>>2;
		compute_left_vel = 0;
		left_vel_sum = 0;
		
		if(calibrateOdomFlag==1) {
			leftSpeedSumOdom += last_left_vel;
    69b4:	44 27       	eor	r20, r20
    69b6:	37 fd       	sbrc	r19, 7
    69b8:	40 95       	com	r20
    69ba:	54 2f       	mov	r21, r20
    69bc:	80 91 a8 04 	lds	r24, 0x04A8
    69c0:	90 91 a9 04 	lds	r25, 0x04A9
    69c4:	a0 91 aa 04 	lds	r26, 0x04AA
    69c8:	b0 91 ab 04 	lds	r27, 0x04AB
    69cc:	82 0f       	add	r24, r18
    69ce:	93 1f       	adc	r25, r19
    69d0:	a4 1f       	adc	r26, r20
    69d2:	b5 1f       	adc	r27, r21
    69d4:	80 93 a8 04 	sts	0x04A8, r24
    69d8:	90 93 a9 04 	sts	0x04A9, r25
    69dc:	a0 93 aa 04 	sts	0x04AA, r26
    69e0:	b0 93 ab 04 	sts	0x04AB, r27
			leftSumCount++;
    69e4:	80 91 b0 04 	lds	r24, 0x04B0
    69e8:	90 91 b1 04 	lds	r25, 0x04B1
    69ec:	01 96       	adiw	r24, 0x01	; 1
    69ee:	90 93 b1 04 	sts	0x04B1, r25
    69f2:	80 93 b0 04 	sts	0x04B0, r24
    69f6:	d6 cd       	rjmp	.-1108   	; 0x65a4 <handleMotorsWithSpeedController+0xb8>
		}

*/
		if(robotPosition == HORIZONTAL_POS) {
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_left(&pwm_left_working);
    69f8:	8f e0       	ldi	r24, 0x0F	; 15
    69fa:	93 e0       	ldi	r25, 0x03	; 3
    69fc:	0e 94 67 1a 	call	0x34ce	; 0x34ce <start_horizontal_speed_control_left>
    6a00:	38 ce       	rjmp	.-912    	; 0x6672 <handleMotorsWithSpeedController+0x186>
		last_right_vel = right_vel_sum>>2;
		compute_right_vel = 0;
		right_vel_sum = 0;

		if(calibrateOdomFlag==1) {
			rightSpeedSumOdom += last_right_vel;
    6a02:	44 27       	eor	r20, r20
    6a04:	37 fd       	sbrc	r19, 7
    6a06:	40 95       	com	r20
    6a08:	54 2f       	mov	r21, r20
    6a0a:	80 91 ac 04 	lds	r24, 0x04AC
    6a0e:	90 91 ad 04 	lds	r25, 0x04AD
    6a12:	a0 91 ae 04 	lds	r26, 0x04AE
    6a16:	b0 91 af 04 	lds	r27, 0x04AF
    6a1a:	82 0f       	add	r24, r18
    6a1c:	93 1f       	adc	r25, r19
    6a1e:	a4 1f       	adc	r26, r20
    6a20:	b5 1f       	adc	r27, r21
    6a22:	80 93 ac 04 	sts	0x04AC, r24
    6a26:	90 93 ad 04 	sts	0x04AD, r25
    6a2a:	a0 93 ae 04 	sts	0x04AE, r26
    6a2e:	b0 93 af 04 	sts	0x04AF, r27
			rightSumCount++;
    6a32:	80 91 b2 04 	lds	r24, 0x04B2
    6a36:	90 91 b3 04 	lds	r25, 0x04B3
    6a3a:	01 96       	adiw	r24, 0x01	; 1
    6a3c:	90 93 b3 04 	sts	0x04B3, r25
    6a40:	80 93 b2 04 	sts	0x04B2, r24
    6a44:	08 cf       	rjmp	.-496    	; 0x6856 <handleMotorsWithSpeedController+0x36a>
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_BW_SC);
		}
		if(pwm_intermediate_left_desired >= 0) {		// pwm in the range -127..127
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_FW_SC);
		} else {
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_BW_SC);
    6a46:	62 e0       	ldi	r22, 0x02	; 2
    6a48:	0e 94 58 2a 	call	0x54b0	; 0x54b0 <getInputFromSpeed>
    6a4c:	90 93 10 03 	sts	0x0310, r25
    6a50:	80 93 0f 03 	sts	0x030F, r24
    6a54:	7a cd       	rjmp	.-1292   	; 0x654a <handleMotorsWithSpeedController+0x5e>
		pwm_left_working = pwm_intermediate_left_desired;
	} else {
		if(pwm_intermediate_right_desired >= 0) {		// pwm in the range -127..127
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_FW_SC);
		} else {
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_BW_SC);
    6a56:	63 e0       	ldi	r22, 0x03	; 3
    6a58:	0e 94 58 2a 	call	0x54b0	; 0x54b0 <getInputFromSpeed>
    6a5c:	90 93 0e 03 	sts	0x030E, r25
    6a60:	80 93 0d 03 	sts	0x030D, r24
    6a64:	65 cd       	rjmp	.-1334   	; 0x6530 <handleMotorsWithSpeedController+0x44>

		pwm_right = pwm_right_working;

		if(pwm_right > 0) {
			OCR3A = (unsigned int)pwm_right;
		} else if(pwm_right < 0) {
    6a66:	00 97       	sbiw	r24, 0x00	; 0
    6a68:	a1 f4       	brne	.+40     	; 0x6a92 <handleMotorsWithSpeedController+0x5a6>
			OCR3B = (unsigned int)(-pwm_right);
		} else {
			OCR3A = 0;
    6a6a:	10 92 99 00 	sts	0x0099, r1
    6a6e:	10 92 98 00 	sts	0x0098, r1
			OCR3B = 0;
    6a72:	10 92 9b 00 	sts	0x009B, r1
    6a76:	10 92 9a 00 	sts	0x009A, r1
    6a7a:	64 cf       	rjmp	.-312    	; 0x6944 <handleMotorsWithSpeedController+0x458>

		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
    6a7c:	00 97       	sbiw	r24, 0x00	; 0
    6a7e:	89 f4       	brne	.+34     	; 0x6aa2 <handleMotorsWithSpeedController+0x5b6>
			OCR4B =(unsigned int)( -pwm_left);
		} else {
			OCR4A = 0;
    6a80:	10 92 a9 00 	sts	0x00A9, r1
    6a84:	10 92 a8 00 	sts	0x00A8, r1
			OCR4B = 0;
    6a88:	10 92 ab 00 	sts	0x00AB, r1
    6a8c:	10 92 aa 00 	sts	0x00AA, r1
    6a90:	00 ce       	rjmp	.-1024   	; 0x6692 <handleMotorsWithSpeedController+0x1a6>
		pwm_right = pwm_right_working;

		if(pwm_right > 0) {
			OCR3A = (unsigned int)pwm_right;
		} else if(pwm_right < 0) {
			OCR3B = (unsigned int)(-pwm_right);
    6a92:	90 95       	com	r25
    6a94:	81 95       	neg	r24
    6a96:	9f 4f       	sbci	r25, 0xFF	; 255
    6a98:	90 93 9b 00 	sts	0x009B, r25
    6a9c:	80 93 9a 00 	sts	0x009A, r24
    6aa0:	51 cf       	rjmp	.-350    	; 0x6944 <handleMotorsWithSpeedController+0x458>
		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
			OCR4B =(unsigned int)( -pwm_left);
    6aa2:	90 95       	com	r25
    6aa4:	81 95       	neg	r24
    6aa6:	9f 4f       	sbci	r25, 0xFF	; 255
    6aa8:	90 93 ab 00 	sts	0x00AB, r25
    6aac:	80 93 aa 00 	sts	0x00AA, r24
    6ab0:	f0 cd       	rjmp	.-1056   	; 0x6692 <handleMotorsWithSpeedController+0x1a6>

00006ab2 <writeDefaultCalibration>:
		speedLeftFromEnc = -speedLeftFromEnc;
    }
    
}

void writeDefaultCalibration() {
    6ab2:	2f 92       	push	r2
    6ab4:	3f 92       	push	r3
    6ab6:	4f 92       	push	r4
    6ab8:	5f 92       	push	r5
    6aba:	6f 92       	push	r6
    6abc:	7f 92       	push	r7
    6abe:	8f 92       	push	r8
    6ac0:	9f 92       	push	r9
    6ac2:	af 92       	push	r10
    6ac4:	bf 92       	push	r11
    6ac6:	cf 92       	push	r12
    6ac8:	df 92       	push	r13
    6aca:	ef 92       	push	r14
    6acc:	ff 92       	push	r15
    6ace:	0f 93       	push	r16
    6ad0:	1f 93       	push	r17
    6ad2:	cf 93       	push	r28
    6ad4:	df 93       	push	r29
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    	calibration[i][0] = i+1;
	}
    // the following values are taken from a field test
    // forward left, speed control enabled
    calibration[0][0] = 20;		// measured speed with back EMF (adc 0..1023)
    6ad6:	a4 e1       	ldi	r26, 0x14	; 20
    6ad8:	b0 e0       	ldi	r27, 0x00	; 0
    6ada:	b0 93 c5 08 	sts	0x08C5, r27
    6ade:	a0 93 c4 08 	sts	0x08C4, r26
    calibration[1][0] = 40;
    6ae2:	88 e2       	ldi	r24, 0x28	; 40
    6ae4:	90 e0       	ldi	r25, 0x00	; 0
    6ae6:	90 93 d5 08 	sts	0x08D5, r25
    6aea:	80 93 d4 08 	sts	0x08D4, r24
    calibration[2][0] = 59;
    6aee:	6b e3       	ldi	r22, 0x3B	; 59
    6af0:	70 e0       	ldi	r23, 0x00	; 0
    6af2:	70 93 e5 08 	sts	0x08E5, r23
    6af6:	60 93 e4 08 	sts	0x08E4, r22
    calibration[3][0] = 79;
    6afa:	0f e4       	ldi	r16, 0x4F	; 79
    6afc:	10 e0       	ldi	r17, 0x00	; 0
    6afe:	10 93 f5 08 	sts	0x08F5, r17
    6b02:	00 93 f4 08 	sts	0x08F4, r16
    calibration[4][0] = 100;
    6b06:	84 e6       	ldi	r24, 0x64	; 100
    6b08:	90 e0       	ldi	r25, 0x00	; 0
    6b0a:	90 93 05 09 	sts	0x0905, r25
    6b0e:	80 93 04 09 	sts	0x0904, r24
    calibration[5][0] = 120;
    6b12:	f8 e7       	ldi	r31, 0x78	; 120
    6b14:	af 2e       	mov	r10, r31
    6b16:	b1 2c       	mov	r11, r1
    6b18:	b0 92 15 09 	sts	0x0915, r11
    6b1c:	a0 92 14 09 	sts	0x0914, r10
    calibration[6][0] = 139;
    6b20:	8b e8       	ldi	r24, 0x8B	; 139
    6b22:	90 e0       	ldi	r25, 0x00	; 0
    6b24:	90 93 25 09 	sts	0x0925, r25
    6b28:	80 93 24 09 	sts	0x0924, r24
    calibration[7][0] = 159;
    6b2c:	2f e9       	ldi	r18, 0x9F	; 159
    6b2e:	30 e0       	ldi	r19, 0x00	; 0
    6b30:	30 93 35 09 	sts	0x0935, r19
    6b34:	20 93 34 09 	sts	0x0934, r18
	calibration[8][0] = 180;
    6b38:	44 eb       	ldi	r20, 0xB4	; 180
    6b3a:	50 e0       	ldi	r21, 0x00	; 0
    6b3c:	50 93 45 09 	sts	0x0945, r21
    6b40:	40 93 44 09 	sts	0x0944, r20
    calibration[0][1] = 19;    	// real speed measured in mm/s
    6b44:	63 e1       	ldi	r22, 0x13	; 19
    6b46:	70 e0       	ldi	r23, 0x00	; 0
    6b48:	70 93 c7 08 	sts	0x08C7, r23
    6b4c:	60 93 c6 08 	sts	0x08C6, r22
    calibration[1][1] = 47;
    6b50:	2f e2       	ldi	r18, 0x2F	; 47
    6b52:	30 e0       	ldi	r19, 0x00	; 0
    6b54:	30 93 d7 08 	sts	0x08D7, r19
    6b58:	20 93 d6 08 	sts	0x08D6, r18
    calibration[2][1] = 72;
    6b5c:	28 e4       	ldi	r18, 0x48	; 72
    6b5e:	30 e0       	ldi	r19, 0x00	; 0
    6b60:	30 93 e7 08 	sts	0x08E7, r19
    6b64:	20 93 e6 08 	sts	0x08E6, r18
    calibration[3][1] = 91;
    6b68:	2b e5       	ldi	r18, 0x5B	; 91
    6b6a:	30 e0       	ldi	r19, 0x00	; 0
    6b6c:	30 93 f7 08 	sts	0x08F7, r19
    6b70:	20 93 f6 08 	sts	0x08F6, r18
    calibration[4][1] = 109;
    6b74:	2d e6       	ldi	r18, 0x6D	; 109
    6b76:	30 e0       	ldi	r19, 0x00	; 0
    6b78:	30 93 07 09 	sts	0x0907, r19
    6b7c:	20 93 06 09 	sts	0x0906, r18
    calibration[5][1] = 125;
    6b80:	ed e7       	ldi	r30, 0x7D	; 125
    6b82:	6e 2e       	mov	r6, r30
    6b84:	71 2c       	mov	r7, r1
    6b86:	70 92 17 09 	sts	0x0917, r7
    6b8a:	60 92 16 09 	sts	0x0916, r6
    calibration[6][1] = 143;
    6b8e:	2f e8       	ldi	r18, 0x8F	; 143
    6b90:	30 e0       	ldi	r19, 0x00	; 0
    6b92:	30 93 27 09 	sts	0x0927, r19
    6b96:	20 93 26 09 	sts	0x0926, r18
    calibration[7][1] = 160;
    6b9a:	20 ea       	ldi	r18, 0xA0	; 160
    6b9c:	30 e0       	ldi	r19, 0x00	; 0
    6b9e:	30 93 37 09 	sts	0x0937, r19
    6ba2:	20 93 36 09 	sts	0x0936, r18
	calibration[8][1] = 174;
    6ba6:	ee ea       	ldi	r30, 0xAE	; 174
    6ba8:	f0 e0       	ldi	r31, 0x00	; 0
    6baa:	f0 93 47 09 	sts	0x0947, r31
    6bae:	e0 93 46 09 	sts	0x0946, r30
    // forward right, speed control enabled
    calibration[0][2] = 19;		// measured speed with back EMF (adc 0..1023)
    6bb2:	70 93 c9 08 	sts	0x08C9, r23
    6bb6:	60 93 c8 08 	sts	0x08C8, r22
    calibration[1][2] = 39;
    6bba:	e7 e2       	ldi	r30, 0x27	; 39
    6bbc:	f0 e0       	ldi	r31, 0x00	; 0
    6bbe:	f0 93 d9 08 	sts	0x08D9, r31
    6bc2:	e0 93 d8 08 	sts	0x08D8, r30
    calibration[2][2] = 60;
    6bc6:	cc e3       	ldi	r28, 0x3C	; 60
    6bc8:	d0 e0       	ldi	r29, 0x00	; 0
    6bca:	d0 93 e9 08 	sts	0x08E9, r29
    6bce:	c0 93 e8 08 	sts	0x08E8, r28
    calibration[3][2] = 80;
    6bd2:	60 e5       	ldi	r22, 0x50	; 80
    6bd4:	70 e0       	ldi	r23, 0x00	; 0
    6bd6:	70 93 f9 08 	sts	0x08F9, r23
    6bda:	60 93 f8 08 	sts	0x08F8, r22
    calibration[4][2] = 99;
    6bde:	63 e6       	ldi	r22, 0x63	; 99
    6be0:	e6 2e       	mov	r14, r22
    6be2:	f1 2c       	mov	r15, r1
    6be4:	f0 92 09 09 	sts	0x0909, r15
    6be8:	e0 92 08 09 	sts	0x0908, r14
    calibration[5][2] = 119;
    6bec:	67 e7       	ldi	r22, 0x77	; 119
    6bee:	70 e0       	ldi	r23, 0x00	; 0
    6bf0:	70 93 19 09 	sts	0x0919, r23
    6bf4:	60 93 18 09 	sts	0x0918, r22
    calibration[6][2] = 140;
    6bf8:	0f 2e       	mov	r0, r31
    6bfa:	fc e8       	ldi	r31, 0x8C	; 140
    6bfc:	cf 2e       	mov	r12, r31
    6bfe:	dd 24       	eor	r13, r13
    6c00:	f0 2d       	mov	r31, r0
    6c02:	d0 92 29 09 	sts	0x0929, r13
    6c06:	c0 92 28 09 	sts	0x0928, r12
    calibration[7][2] = 160;
    6c0a:	30 93 39 09 	sts	0x0939, r19
    6c0e:	20 93 38 09 	sts	0x0938, r18
	calibration[8][2] = 180;
    6c12:	50 93 49 09 	sts	0x0949, r21
    6c16:	40 93 48 09 	sts	0x0948, r20
    calibration[0][3] = 23;    	// real speed measured in mm/s
    6c1a:	0f 2e       	mov	r0, r31
    6c1c:	f7 e1       	ldi	r31, 0x17	; 23
    6c1e:	8f 2e       	mov	r8, r31
    6c20:	99 24       	eor	r9, r9
    6c22:	f0 2d       	mov	r31, r0
    6c24:	90 92 cb 08 	sts	0x08CB, r9
    6c28:	80 92 ca 08 	sts	0x08CA, r8
    calibration[1][3] = 46;
    6c2c:	0f 2e       	mov	r0, r31
    6c2e:	fe e2       	ldi	r31, 0x2E	; 46
    6c30:	4f 2e       	mov	r4, r31
    6c32:	55 24       	eor	r5, r5
    6c34:	f0 2d       	mov	r31, r0
    6c36:	50 92 db 08 	sts	0x08DB, r5
    6c3a:	40 92 da 08 	sts	0x08DA, r4
    calibration[2][3] = 64;
    6c3e:	88 24       	eor	r8, r8
    6c40:	99 24       	eor	r9, r9
    6c42:	68 94       	set
    6c44:	86 f8       	bld	r8, 6
    6c46:	90 92 eb 08 	sts	0x08EB, r9
    6c4a:	80 92 ea 08 	sts	0x08EA, r8
    calibration[3][3] = 81;
    6c4e:	0f 2e       	mov	r0, r31
    6c50:	f1 e5       	ldi	r31, 0x51	; 81
    6c52:	2f 2e       	mov	r2, r31
    6c54:	33 24       	eor	r3, r3
    6c56:	f0 2d       	mov	r31, r0
    6c58:	30 92 fb 08 	sts	0x08FB, r3
    6c5c:	20 92 fa 08 	sts	0x08FA, r2
    calibration[4][3] = 97;
    6c60:	0f 2e       	mov	r0, r31
    6c62:	f1 e6       	ldi	r31, 0x61	; 97
    6c64:	8f 2e       	mov	r8, r31
    6c66:	99 24       	eor	r9, r9
    6c68:	f0 2d       	mov	r31, r0
    6c6a:	90 92 0b 09 	sts	0x090B, r9
    6c6e:	80 92 0a 09 	sts	0x090A, r8
    calibration[5][3] = 112;
    6c72:	0f 2e       	mov	r0, r31
    6c74:	f0 e7       	ldi	r31, 0x70	; 112
    6c76:	8f 2e       	mov	r8, r31
    6c78:	99 24       	eor	r9, r9
    6c7a:	f0 2d       	mov	r31, r0
    6c7c:	90 92 1b 09 	sts	0x091B, r9
    6c80:	80 92 1a 09 	sts	0x091A, r8
    calibration[6][3] = 125;
    6c84:	70 92 2b 09 	sts	0x092B, r7
    6c88:	60 92 2a 09 	sts	0x092A, r6
    calibration[7][3] = 139;
    6c8c:	90 93 3b 09 	sts	0x093B, r25
    6c90:	80 93 3a 09 	sts	0x093A, r24
	calibration[8][3] = 152;
    6c94:	0f 2e       	mov	r0, r31
    6c96:	f8 e9       	ldi	r31, 0x98	; 152
    6c98:	8f 2e       	mov	r8, r31
    6c9a:	99 24       	eor	r9, r9
    6c9c:	f0 2d       	mov	r31, r0
    6c9e:	90 92 4b 09 	sts	0x094B, r9
    6ca2:	80 92 4a 09 	sts	0x094A, r8
    // backward left, speed control enabled
    calibration[0][4] = 20;		// measured speed with back EMF (adc 0..1023)
    6ca6:	b0 93 cd 08 	sts	0x08CD, r27
    6caa:	a0 93 cc 08 	sts	0x08CC, r26
    calibration[1][4] = 39;
    6cae:	f0 93 dd 08 	sts	0x08DD, r31
    6cb2:	e0 93 dc 08 	sts	0x08DC, r30
    calibration[2][4] = 60;
    6cb6:	d0 93 ed 08 	sts	0x08ED, r29
    6cba:	c0 93 ec 08 	sts	0x08EC, r28
    calibration[3][4] = 79;
    6cbe:	10 93 fd 08 	sts	0x08FD, r17
    6cc2:	00 93 fc 08 	sts	0x08FC, r16
    calibration[4][4] = 99;
    6cc6:	f0 92 0d 09 	sts	0x090D, r15
    6cca:	e0 92 0c 09 	sts	0x090C, r14
    calibration[5][4] = 120;
    6cce:	b0 92 1d 09 	sts	0x091D, r11
    6cd2:	a0 92 1c 09 	sts	0x091C, r10
    calibration[6][4] = 140;
    6cd6:	d0 92 2d 09 	sts	0x092D, r13
    6cda:	c0 92 2c 09 	sts	0x092C, r12
    calibration[7][4] = 160;
    6cde:	30 93 3d 09 	sts	0x093D, r19
    6ce2:	20 93 3c 09 	sts	0x093C, r18
	calibration[8][4] = 179;
    6ce6:	c3 eb       	ldi	r28, 0xB3	; 179
    6ce8:	d0 e0       	ldi	r29, 0x00	; 0
    6cea:	d0 93 4d 09 	sts	0x094D, r29
    6cee:	c0 93 4c 09 	sts	0x094C, r28
    calibration[0][5] = 18;    	// real speed measured in mm/s
    6cf2:	c2 e1       	ldi	r28, 0x12	; 18
    6cf4:	d0 e0       	ldi	r29, 0x00	; 0
    6cf6:	d0 93 cf 08 	sts	0x08CF, r29
    6cfa:	c0 93 ce 08 	sts	0x08CE, r28
    calibration[1][5] = 45;
    6cfe:	cd e2       	ldi	r28, 0x2D	; 45
    6d00:	d0 e0       	ldi	r29, 0x00	; 0
    6d02:	d0 93 df 08 	sts	0x08DF, r29
    6d06:	c0 93 de 08 	sts	0x08DE, r28
    calibration[2][5] = 68;
    6d0a:	c4 e4       	ldi	r28, 0x44	; 68
    6d0c:	d0 e0       	ldi	r29, 0x00	; 0
    6d0e:	d0 93 ef 08 	sts	0x08EF, r29
    6d12:	c0 93 ee 08 	sts	0x08EE, r28
    calibration[3][5] = 87;
    6d16:	c7 e5       	ldi	r28, 0x57	; 87
    6d18:	d0 e0       	ldi	r29, 0x00	; 0
    6d1a:	d0 93 ff 08 	sts	0x08FF, r29
    6d1e:	c0 93 fe 08 	sts	0x08FE, r28
    calibration[4][5] = 105;
    6d22:	c9 e6       	ldi	r28, 0x69	; 105
    6d24:	d0 e0       	ldi	r29, 0x00	; 0
    6d26:	d0 93 0f 09 	sts	0x090F, r29
    6d2a:	c0 93 0e 09 	sts	0x090E, r28
    calibration[5][5] = 119;
    6d2e:	70 93 1f 09 	sts	0x091F, r23
    6d32:	60 93 1e 09 	sts	0x091E, r22
    calibration[6][5] = 137;
    6d36:	c9 e8       	ldi	r28, 0x89	; 137
    6d38:	d0 e0       	ldi	r29, 0x00	; 0
    6d3a:	d0 93 2f 09 	sts	0x092F, r29
    6d3e:	c0 93 2e 09 	sts	0x092E, r28
    calibration[7][5] = 151;
    6d42:	c7 e9       	ldi	r28, 0x97	; 151
    6d44:	d0 e0       	ldi	r29, 0x00	; 0
    6d46:	d0 93 3f 09 	sts	0x093F, r29
    6d4a:	c0 93 3e 09 	sts	0x093E, r28
	calibration[8][5] = 168;
    6d4e:	c8 ea       	ldi	r28, 0xA8	; 168
    6d50:	d0 e0       	ldi	r29, 0x00	; 0
    6d52:	d0 93 4f 09 	sts	0x094F, r29
    6d56:	c0 93 4e 09 	sts	0x094E, r28
    // backward right, speed control enabled
    calibration[0][6] = 20;		// measured speed with back EMF (adc 0..1023)
    6d5a:	b0 93 d1 08 	sts	0x08D1, r27
    6d5e:	a0 93 d0 08 	sts	0x08D0, r26
    calibration[1][6] = 39;
    6d62:	f0 93 e1 08 	sts	0x08E1, r31
    6d66:	e0 93 e0 08 	sts	0x08E0, r30
    calibration[2][6] = 59;
    6d6a:	eb e3       	ldi	r30, 0x3B	; 59
    6d6c:	f0 e0       	ldi	r31, 0x00	; 0
    6d6e:	f0 93 f1 08 	sts	0x08F1, r31
    6d72:	e0 93 f0 08 	sts	0x08F0, r30
    calibration[3][6] = 80;
    6d76:	e0 e5       	ldi	r30, 0x50	; 80
    6d78:	f0 e0       	ldi	r31, 0x00	; 0
    6d7a:	f0 93 01 09 	sts	0x0901, r31
    6d7e:	e0 93 00 09 	sts	0x0900, r30
    calibration[4][6] = 100;
    6d82:	e4 e6       	ldi	r30, 0x64	; 100
    6d84:	f0 e0       	ldi	r31, 0x00	; 0
    6d86:	f0 93 11 09 	sts	0x0911, r31
    6d8a:	e0 93 10 09 	sts	0x0910, r30
    calibration[5][6] = 119;
    6d8e:	70 93 21 09 	sts	0x0921, r23
    6d92:	60 93 20 09 	sts	0x0920, r22
    calibration[6][6] = 139;
    6d96:	90 93 31 09 	sts	0x0931, r25
    6d9a:	80 93 30 09 	sts	0x0930, r24
    calibration[7][6] = 160;
    6d9e:	30 93 41 09 	sts	0x0941, r19
    6da2:	20 93 40 09 	sts	0x0940, r18
	calibration[8][6] = 180;
    6da6:	50 93 51 09 	sts	0x0951, r21
    6daa:	40 93 50 09 	sts	0x0950, r20
    calibration[0][7] = 22;    	// real speed measured in mm/s
    6dae:	26 e1       	ldi	r18, 0x16	; 22
    6db0:	30 e0       	ldi	r19, 0x00	; 0
    6db2:	30 93 d3 08 	sts	0x08D3, r19
    6db6:	20 93 d2 08 	sts	0x08D2, r18
    calibration[1][7] = 46;
    6dba:	50 92 e3 08 	sts	0x08E3, r5
    6dbe:	40 92 e2 08 	sts	0x08E2, r4
    calibration[2][7] = 65;
    6dc2:	21 e4       	ldi	r18, 0x41	; 65
    6dc4:	30 e0       	ldi	r19, 0x00	; 0
    6dc6:	30 93 f3 08 	sts	0x08F3, r19
    6dca:	20 93 f2 08 	sts	0x08F2, r18
    calibration[3][7] = 81;
    6dce:	30 92 03 09 	sts	0x0903, r3
    6dd2:	20 92 02 09 	sts	0x0902, r2
    calibration[4][7] = 96;
    6dd6:	20 e6       	ldi	r18, 0x60	; 96
    6dd8:	30 e0       	ldi	r19, 0x00	; 0
    6dda:	30 93 13 09 	sts	0x0913, r19
    6dde:	20 93 12 09 	sts	0x0912, r18
    calibration[5][7] = 111;
    6de2:	2f e6       	ldi	r18, 0x6F	; 111
    6de4:	30 e0       	ldi	r19, 0x00	; 0
    6de6:	30 93 23 09 	sts	0x0923, r19
    6dea:	20 93 22 09 	sts	0x0922, r18
    calibration[6][7] = 125;
    6dee:	70 92 33 09 	sts	0x0933, r7
    6df2:	60 92 32 09 	sts	0x0932, r6
    calibration[7][7] = 139;
    6df6:	90 93 43 09 	sts	0x0943, r25
    6dfa:	80 93 42 09 	sts	0x0942, r24
	calibration[8][7] = 153;
    6dfe:	89 e9       	ldi	r24, 0x99	; 153
    6e00:	90 e0       	ldi	r25, 0x00	; 0
    6e02:	90 93 53 09 	sts	0x0953, r25
    6e06:	80 93 52 09 	sts	0x0952, r24

    writeCalibrationToFlash();
    6e0a:	0e 94 20 43 	call	0x8640	; 0x8640 <writeCalibrationToFlash>
}
    6e0e:	df 91       	pop	r29
    6e10:	cf 91       	pop	r28
    6e12:	1f 91       	pop	r17
    6e14:	0f 91       	pop	r16
    6e16:	ff 90       	pop	r15
    6e18:	ef 90       	pop	r14
    6e1a:	df 90       	pop	r13
    6e1c:	cf 90       	pop	r12
    6e1e:	bf 90       	pop	r11
    6e20:	af 90       	pop	r10
    6e22:	9f 90       	pop	r9
    6e24:	8f 90       	pop	r8
    6e26:	7f 90       	pop	r7
    6e28:	6f 90       	pop	r6
    6e2a:	5f 90       	pop	r5
    6e2c:	4f 90       	pop	r4
    6e2e:	3f 90       	pop	r3
    6e30:	2f 90       	pop	r2
    6e32:	08 95       	ret

00006e34 <initCalibration>:

void initCalibration() {

    unsigned int temp=0;
 
 	temp = eeprom_read_word((uint16_t*)CALIB_CHECK_ADDRESS);
    6e34:	8a e6       	ldi	r24, 0x6A	; 106
    6e36:	9f e0       	ldi	r25, 0x0F	; 15
    6e38:	0e 94 1b 53 	call	0xa636	; 0xa636 <__eerd_word_m2560>

    if(temp==0xAA55) {   // valid odometry data saved in flash, read them
    6e3c:	2a ea       	ldi	r18, 0xAA	; 170
    6e3e:	85 35       	cpi	r24, 0x55	; 85
    6e40:	92 07       	cpc	r25, r18
    6e42:	19 f0       	breq	.+6      	; 0x6e4a <initCalibration+0x16>
        readCalibrationFromFlash();
    } else {
		writeDefaultCalibration();		
    6e44:	0e 94 59 35 	call	0x6ab2	; 0x6ab2 <writeDefaultCalibration>
    6e48:	08 95       	ret
    unsigned int temp=0;
 
 	temp = eeprom_read_word((uint16_t*)CALIB_CHECK_ADDRESS);

    if(temp==0xAA55) {   // valid odometry data saved in flash, read them
        readCalibrationFromFlash();
    6e4a:	0e 94 2f 43 	call	0x865e	; 0x865e <readCalibrationFromFlash>
    6e4e:	08 95       	ret

00006e50 <__vector_45>:
    }

}

// Motor left
ISR(TIMER4_OVF_vect) {
    6e50:	1f 92       	push	r1
    6e52:	0f 92       	push	r0
    6e54:	0f b6       	in	r0, 0x3f	; 63
    6e56:	0f 92       	push	r0
    6e58:	11 24       	eor	r1, r1
    6e5a:	8f 93       	push	r24
    6e5c:	9f 93       	push	r25

//	LED_GREEN_ON;

	if(cliffDetectedFlag) {
    6e5e:	80 91 6e 04 	lds	r24, 0x046E
    6e62:	88 23       	and	r24, r24
    6e64:	61 f0       	breq	.+24     	; 0x6e7e <__vector_45+0x2e>
		pwm_left = 0;
    6e66:	10 92 f8 02 	sts	0x02F8, r1
    6e6a:	10 92 f7 02 	sts	0x02F7, r1
		OCR4A = 0;
    6e6e:	10 92 a9 00 	sts	0x00A9, r1
    6e72:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    6e76:	10 92 ab 00 	sts	0x00AB, r1
    6e7a:	10 92 aa 00 	sts	0x00AA, r1
	}

	left_current_avg = 0;
    6e7e:	10 92 e2 02 	sts	0x02E2, r1
    6e82:	10 92 e1 02 	sts	0x02E1, r1

	// set pins mode based on controller output
	if(pwm_left == 0) {
    6e86:	80 91 f7 02 	lds	r24, 0x02F7
    6e8a:	90 91 f8 02 	lds	r25, 0x02F8
    6e8e:	00 97       	sbiw	r24, 0x00	; 0
    6e90:	41 f5       	brne	.+80     	; 0x6ee2 <__vector_45+0x92>


		//leftMotorPhase = NO_PHASE;
		//compute_left_vel = 1;

		if(pwm_left_desired_to_control >= 0) {
    6e92:	80 91 eb 02 	lds	r24, 0x02EB
    6e96:	90 91 ec 02 	lds	r25, 0x02EC
    6e9a:	97 fd       	sbrc	r25, 7
    6e9c:	69 c0       	rjmp	.+210    	; 0x6f70 <__vector_45+0x120>
			leftMotorPhase = PASSIVE_PHASE;
    6e9e:	81 e0       	ldi	r24, 0x01	; 1
    6ea0:	80 93 28 02 	sts	0x0228, r24
			currentMotLeftChannel = 14;
    6ea4:	8e e0       	ldi	r24, 0x0E	; 14
    6ea6:	80 93 25 02 	sts	0x0225, r24
		} else {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 15;
		}
		firstSampleLeft = 1;
    6eaa:	81 e0       	ldi	r24, 0x01	; 1
    6eac:	80 93 0a 02 	sts	0x020A, r24

		// select channel 15 to sample left current
		//currentMotLeftChannel = 15;
		TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    6eb0:	80 91 a0 00 	lds	r24, 0x00A0
    6eb4:	8f 75       	andi	r24, 0x5F	; 95
    6eb6:	80 93 a0 00 	sts	0x00A0, r24
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    6eba:	80 91 02 01 	lds	r24, 0x0102
    6ebe:	87 7e       	andi	r24, 0xE7	; 231
    6ec0:	80 93 02 01 	sts	0x0102, r24
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
    6ec4:	80 91 72 00 	lds	r24, 0x0072
    6ec8:	89 7f       	andi	r24, 0xF9	; 249
    6eca:	80 93 72 00 	sts	0x0072, r24
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
    6ece:	89 b3       	in	r24, 0x19	; 25
    6ed0:	86 60       	ori	r24, 0x06	; 6
    6ed2:	89 bb       	out	0x19, r24	; 25
	}
*/

//	LED_GREEN_OFF;

}
    6ed4:	9f 91       	pop	r25
    6ed6:	8f 91       	pop	r24
    6ed8:	0f 90       	pop	r0
    6eda:	0f be       	out	0x3f, r0	; 63
    6edc:	0f 90       	pop	r0
    6ede:	1f 90       	pop	r1
    6ee0:	18 95       	reti
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
	} else if(pwm_left > 0) {   		// move forward
    6ee2:	18 16       	cp	r1, r24
    6ee4:	19 06       	cpc	r1, r25
    6ee6:	2c f5       	brge	.+74     	; 0x6f32 <__vector_45+0xe2>
		leftMotorPhase = ACTIVE_PHASE;
    6ee8:	10 92 28 02 	sts	0x0228, r1
		// select channel 15 to sample left current
		currentMotLeftChannel = 15;
    6eec:	8f e0       	ldi	r24, 0x0F	; 15
    6eee:	80 93 25 02 	sts	0x0225, r24
		TCCR4A  &= ~(1 << COM4B1);		// disable OCB
    6ef2:	80 91 a0 00 	lds	r24, 0x00A0
    6ef6:	8f 7d       	andi	r24, 0xDF	; 223
    6ef8:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
    6efc:	80 91 72 00 	lds	r24, 0x0072
    6f00:	8b 7f       	andi	r24, 0xFB	; 251
    6f02:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 4);				// output to 0
    6f06:	80 91 02 01 	lds	r24, 0x0102
    6f0a:	8f 7e       	andi	r24, 0xEF	; 239
    6f0c:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4A1);		// enable OCA
    6f10:	80 91 a0 00 	lds	r24, 0x00A0
    6f14:	80 68       	ori	r24, 0x80	; 128
    6f16:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
    6f1a:	80 91 72 00 	lds	r24, 0x0072
    6f1e:	82 60       	ori	r24, 0x02	; 2
    6f20:	80 93 72 00 	sts	0x0072, r24
	}
*/

//	LED_GREEN_OFF;

}
    6f24:	9f 91       	pop	r25
    6f26:	8f 91       	pop	r24
    6f28:	0f 90       	pop	r0
    6f2a:	0f be       	out	0x3f, r0	; 63
    6f2c:	0f 90       	pop	r0
    6f2e:	1f 90       	pop	r1
    6f30:	18 95       	reti
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
		PORTH &= ~(1 << 4);				// output to 0
		TCCR4A |= (1 << COM4A1);		// enable OCA
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
	} else if(pwm_left < 0) {      		// move backward
		leftMotorPhase = ACTIVE_PHASE;
    6f32:	10 92 28 02 	sts	0x0228, r1
		// select channel 14 to sample left current
		currentMotLeftChannel = 14;
    6f36:	8e e0       	ldi	r24, 0x0E	; 14
    6f38:	80 93 25 02 	sts	0x0225, r24
		TCCR4A  &= ~(1 << COM4A1);		// disable OCA
    6f3c:	80 91 a0 00 	lds	r24, 0x00A0
    6f40:	8f 77       	andi	r24, 0x7F	; 127
    6f42:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4A);		// disable OCA interrupt
    6f46:	80 91 72 00 	lds	r24, 0x0072
    6f4a:	8d 7f       	andi	r24, 0xFD	; 253
    6f4c:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 3);				// output to 0
    6f50:	80 91 02 01 	lds	r24, 0x0102
    6f54:	87 7f       	andi	r24, 0xF7	; 247
    6f56:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4B1);		// enable OCB
    6f5a:	80 91 a0 00 	lds	r24, 0x00A0
    6f5e:	80 62       	ori	r24, 0x20	; 32
    6f60:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
    6f64:	80 91 72 00 	lds	r24, 0x0072
    6f68:	84 60       	ori	r24, 0x04	; 4
    6f6a:	80 93 72 00 	sts	0x0072, r24
    6f6e:	b2 cf       	rjmp	.-156    	; 0x6ed4 <__vector_45+0x84>

		if(pwm_left_desired_to_control >= 0) {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 14;
		} else {
			leftMotorPhase = PASSIVE_PHASE;
    6f70:	81 e0       	ldi	r24, 0x01	; 1
    6f72:	80 93 28 02 	sts	0x0228, r24
			currentMotLeftChannel = 15;
    6f76:	8f e0       	ldi	r24, 0x0F	; 15
    6f78:	80 93 25 02 	sts	0x0225, r24
    6f7c:	96 cf       	rjmp	.-212    	; 0x6eaa <__vector_45+0x5a>

00006f7e <__vector_42>:
//	LED_GREEN_OFF;

}

// motor left forward
ISR(TIMER4_COMPA_vect) {
    6f7e:	1f 92       	push	r1
    6f80:	0f 92       	push	r0
    6f82:	0f b6       	in	r0, 0x3f	; 63
    6f84:	0f 92       	push	r0
    6f86:	11 24       	eor	r1, r1
    6f88:	8f 93       	push	r24
    6f8a:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    6f8c:	81 e0       	ldi	r24, 0x01	; 1
    6f8e:	80 93 28 02 	sts	0x0228, r24
	// select channel 14 to sample the left velocity
	currentMotLeftChannel = 14;
    6f92:	9e e0       	ldi	r25, 0x0E	; 14
    6f94:	90 93 25 02 	sts	0x0225, r25

	firstSampleLeft = 1;
    6f98:	80 93 0a 02 	sts	0x020A, r24

//	LED_GREEN_OFF;

}
    6f9c:	9f 91       	pop	r25
    6f9e:	8f 91       	pop	r24
    6fa0:	0f 90       	pop	r0
    6fa2:	0f be       	out	0x3f, r0	; 63
    6fa4:	0f 90       	pop	r0
    6fa6:	1f 90       	pop	r1
    6fa8:	18 95       	reti

00006faa <__vector_43>:

// motor left backward
ISR(TIMER4_COMPB_vect) {
    6faa:	1f 92       	push	r1
    6fac:	0f 92       	push	r0
    6fae:	0f b6       	in	r0, 0x3f	; 63
    6fb0:	0f 92       	push	r0
    6fb2:	11 24       	eor	r1, r1
    6fb4:	8f 93       	push	r24
    6fb6:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    6fb8:	81 e0       	ldi	r24, 0x01	; 1
    6fba:	80 93 28 02 	sts	0x0228, r24
	// select channel 15 to sample the left velocity
	currentMotLeftChannel = 15;
    6fbe:	9f e0       	ldi	r25, 0x0F	; 15
    6fc0:	90 93 25 02 	sts	0x0225, r25

	firstSampleLeft = 1;
    6fc4:	80 93 0a 02 	sts	0x020A, r24

//	LED_GREEN_OFF;

}
    6fc8:	9f 91       	pop	r25
    6fca:	8f 91       	pop	r24
    6fcc:	0f 90       	pop	r0
    6fce:	0f be       	out	0x3f, r0	; 63
    6fd0:	0f 90       	pop	r0
    6fd2:	1f 90       	pop	r1
    6fd4:	18 95       	reti

00006fd6 <__vector_35>:

// Motor right
ISR(TIMER3_OVF_vect) {
    6fd6:	1f 92       	push	r1
    6fd8:	0f 92       	push	r0
    6fda:	0f b6       	in	r0, 0x3f	; 63
    6fdc:	0f 92       	push	r0
    6fde:	11 24       	eor	r1, r1
    6fe0:	8f 93       	push	r24
    6fe2:	9f 93       	push	r25

//	LED_GREEN_ON;

  	// PORTB ^= (1 << 7); // Toggle the LED

	if(cliffDetectedFlag) {
    6fe4:	80 91 6e 04 	lds	r24, 0x046E
    6fe8:	88 23       	and	r24, r24
    6fea:	61 f0       	breq	.+24     	; 0x7004 <__vector_35+0x2e>
		pwm_right = 0;
    6fec:	10 92 f6 02 	sts	0x02F6, r1
    6ff0:	10 92 f5 02 	sts	0x02F5, r1
		OCR3A = 0;
    6ff4:	10 92 99 00 	sts	0x0099, r1
    6ff8:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    6ffc:	10 92 9b 00 	sts	0x009B, r1
    7000:	10 92 9a 00 	sts	0x009A, r1
	}

	right_current_avg = 0;
    7004:	10 92 e4 02 	sts	0x02E4, r1
    7008:	10 92 e3 02 	sts	0x02E3, r1


	if(pwm_right == 0) {
    700c:	80 91 f5 02 	lds	r24, 0x02F5
    7010:	90 91 f6 02 	lds	r25, 0x02F6
    7014:	00 97       	sbiw	r24, 0x00	; 0
    7016:	31 f5       	brne	.+76     	; 0x7064 <__vector_35+0x8e>
		//firstSampleRight = 0;

		//rightMotorPhase = NO_PHASE;
		//compute_right_vel = 1;

		if(pwm_right_desired_to_control >= 0) {
    7018:	80 91 e9 02 	lds	r24, 0x02E9
    701c:	90 91 ea 02 	lds	r25, 0x02EA
    7020:	97 fd       	sbrc	r25, 7
    7022:	5f c0       	rjmp	.+190    	; 0x70e2 <__vector_35+0x10c>
			rightMotorPhase = PASSIVE_PHASE;
    7024:	81 e0       	ldi	r24, 0x01	; 1
    7026:	80 93 27 02 	sts	0x0227, r24
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
    702a:	8c e0       	ldi	r24, 0x0C	; 12
    702c:	80 93 26 02 	sts	0x0226, r24
		} else {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
		}
		firstSampleRight = 1;
    7030:	81 e0       	ldi	r24, 0x01	; 1
    7032:	80 93 09 02 	sts	0x0209, r24

		// select channel 13 to sample left current
		//currentMotRightChannel = 13;
		TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    7036:	80 91 90 00 	lds	r24, 0x0090
    703a:	8f 75       	andi	r24, 0x5F	; 95
    703c:	80 93 90 00 	sts	0x0090, r24
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    7040:	8e b1       	in	r24, 0x0e	; 14
    7042:	87 7e       	andi	r24, 0xE7	; 231
    7044:	8e b9       	out	0x0e, r24	; 14
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
    7046:	80 91 71 00 	lds	r24, 0x0071
    704a:	89 7f       	andi	r24, 0xF9	; 249
    704c:	80 93 71 00 	sts	0x0071, r24
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
    7050:	88 b3       	in	r24, 0x18	; 24
    7052:	86 60       	ori	r24, 0x06	; 6
    7054:	88 bb       	out	0x18, r24	; 24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    7056:	9f 91       	pop	r25
    7058:	8f 91       	pop	r24
    705a:	0f 90       	pop	r0
    705c:	0f be       	out	0x3f, r0	; 63
    705e:	0f 90       	pop	r0
    7060:	1f 90       	pop	r1
    7062:	18 95       	reti
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
	}else if(pwm_right > 0) {   		// move forward
    7064:	18 16       	cp	r1, r24
    7066:	19 06       	cpc	r1, r25
    7068:	0c f5       	brge	.+66     	; 0x70ac <__vector_35+0xd6>
		rightMotorPhase = ACTIVE_PHASE;
    706a:	10 92 27 02 	sts	0x0227, r1
		// select channel 13 to sample left current
		currentMotRightChannel = 13;
    706e:	8d e0       	ldi	r24, 0x0D	; 13
    7070:	80 93 26 02 	sts	0x0226, r24
		TCCR3A  &= ~(1 << COM3B1);		// disable OCB
    7074:	80 91 90 00 	lds	r24, 0x0090
    7078:	8f 7d       	andi	r24, 0xDF	; 223
    707a:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
    707e:	80 91 71 00 	lds	r24, 0x0071
    7082:	8b 7f       	andi	r24, 0xFB	; 251
    7084:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 4);				// output to 0
    7088:	74 98       	cbi	0x0e, 4	; 14
		TCCR3A |= (1 << COM3A1);		// enable OCA
    708a:	80 91 90 00 	lds	r24, 0x0090
    708e:	80 68       	ori	r24, 0x80	; 128
    7090:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
    7094:	80 91 71 00 	lds	r24, 0x0071
    7098:	82 60       	ori	r24, 0x02	; 2
    709a:	80 93 71 00 	sts	0x0071, r24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    709e:	9f 91       	pop	r25
    70a0:	8f 91       	pop	r24
    70a2:	0f 90       	pop	r0
    70a4:	0f be       	out	0x3f, r0	; 63
    70a6:	0f 90       	pop	r0
    70a8:	1f 90       	pop	r1
    70aa:	18 95       	reti
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
		PORTE &= ~(1 << 4);				// output to 0
		TCCR3A |= (1 << COM3A1);		// enable OCA
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
	} else if(pwm_right < 0) {      	// move backward
		rightMotorPhase = ACTIVE_PHASE;
    70ac:	10 92 27 02 	sts	0x0227, r1
		// select channel 12 to sample left current
		currentMotRightChannel = 12;
    70b0:	8c e0       	ldi	r24, 0x0C	; 12
    70b2:	80 93 26 02 	sts	0x0226, r24
		TCCR3A  &= ~(1 << COM3A1);		// disable OCA
    70b6:	80 91 90 00 	lds	r24, 0x0090
    70ba:	8f 77       	andi	r24, 0x7F	; 127
    70bc:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3A);		// disable OCA interrupt
    70c0:	80 91 71 00 	lds	r24, 0x0071
    70c4:	8d 7f       	andi	r24, 0xFD	; 253
    70c6:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 3);				// output to 0
    70ca:	73 98       	cbi	0x0e, 3	; 14
		TCCR3A |= (1 << COM3B1);		// enable OCB
    70cc:	80 91 90 00 	lds	r24, 0x0090
    70d0:	80 62       	ori	r24, 0x20	; 32
    70d2:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3B);		// enable OCB interrupt
    70d6:	80 91 71 00 	lds	r24, 0x0071
    70da:	84 60       	ori	r24, 0x04	; 4
    70dc:	80 93 71 00 	sts	0x0071, r24
    70e0:	ba cf       	rjmp	.-140    	; 0x7056 <__vector_35+0x80>
		if(pwm_right_desired_to_control >= 0) {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
		} else {
			rightMotorPhase = PASSIVE_PHASE;
    70e2:	81 e0       	ldi	r24, 0x01	; 1
    70e4:	80 93 27 02 	sts	0x0227, r24
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
    70e8:	8d e0       	ldi	r24, 0x0D	; 13
    70ea:	80 93 26 02 	sts	0x0226, r24
    70ee:	a0 cf       	rjmp	.-192    	; 0x7030 <__vector_35+0x5a>

000070f0 <__vector_32>:
//	LED_GREEN_OFF;

}

// motor right forward
ISR(TIMER3_COMPA_vect) {
    70f0:	1f 92       	push	r1
    70f2:	0f 92       	push	r0
    70f4:	0f b6       	in	r0, 0x3f	; 63
    70f6:	0f 92       	push	r0
    70f8:	11 24       	eor	r1, r1
    70fa:	8f 93       	push	r24
    70fc:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    70fe:	81 e0       	ldi	r24, 0x01	; 1
    7100:	80 93 27 02 	sts	0x0227, r24
	// select channel 12 to sample the right velocity
	currentMotRightChannel = 12;
    7104:	9c e0       	ldi	r25, 0x0C	; 12
    7106:	90 93 26 02 	sts	0x0226, r25

	firstSampleRight = 1;
    710a:	80 93 09 02 	sts	0x0209, r24

//	LED_RED_OFF;

}
    710e:	9f 91       	pop	r25
    7110:	8f 91       	pop	r24
    7112:	0f 90       	pop	r0
    7114:	0f be       	out	0x3f, r0	; 63
    7116:	0f 90       	pop	r0
    7118:	1f 90       	pop	r1
    711a:	18 95       	reti

0000711c <__vector_33>:

// motor right backward
ISR(TIMER3_COMPB_vect) {
    711c:	1f 92       	push	r1
    711e:	0f 92       	push	r0
    7120:	0f b6       	in	r0, 0x3f	; 63
    7122:	0f 92       	push	r0
    7124:	11 24       	eor	r1, r1
    7126:	8f 93       	push	r24
    7128:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    712a:	81 e0       	ldi	r24, 0x01	; 1
    712c:	80 93 27 02 	sts	0x0227, r24
	// select channel 13 to sample the right velocity
	currentMotRightChannel = 13;
    7130:	9d e0       	ldi	r25, 0x0D	; 13
    7132:	90 93 26 02 	sts	0x0226, r25

	firstSampleRight = 1;
    7136:	80 93 09 02 	sts	0x0209, r24

//	LED_RED_OFF;
}
    713a:	9f 91       	pop	r25
    713c:	8f 91       	pop	r24
    713e:	0f 90       	pop	r0
    7140:	0f be       	out	0x3f, r0	; 63
    7142:	0f 90       	pop	r0
    7144:	1f 90       	pop	r1
    7146:	18 95       	reti

00007148 <initBehaviors>:

#include "behaviors.h"

void initBehaviors() {

	srand(TCNT3);	// initialize random seed (used in obstacle avoidance)
    7148:	80 91 94 00 	lds	r24, 0x0094
    714c:	90 91 95 00 	lds	r25, 0x0095
    7150:	0e 94 f1 52 	call	0xa5e2	; 0xa5e2 <srand>

}
    7154:	08 95       	ret

00007156 <obstacleAvoidance>:

void obstacleAvoidance(signed int *pwmLeft, signed int *pwmRight) {
    7156:	2f 92       	push	r2
    7158:	3f 92       	push	r3
    715a:	4f 92       	push	r4
    715c:	5f 92       	push	r5
    715e:	6f 92       	push	r6
    7160:	7f 92       	push	r7
    7162:	8f 92       	push	r8
    7164:	9f 92       	push	r9
    7166:	af 92       	push	r10
    7168:	bf 92       	push	r11
    716a:	cf 92       	push	r12
    716c:	df 92       	push	r13
    716e:	ef 92       	push	r14
    7170:	ff 92       	push	r15
    7172:	0f 93       	push	r16
    7174:	1f 93       	push	r17
    7176:	df 93       	push	r29
    7178:	cf 93       	push	r28
    717a:	cd b7       	in	r28, 0x3d	; 61
    717c:	de b7       	in	r29, 0x3e	; 62
    717e:	28 97       	sbiw	r28, 0x08	; 8
    7180:	0f b6       	in	r0, 0x3f	; 63
    7182:	f8 94       	cli
    7184:	de bf       	out	0x3e, r29	; 62
    7186:	0f be       	out	0x3f, r0	; 63
    7188:	cd bf       	out	0x3d, r28	; 61
    718a:	3c 01       	movw	r6, r24
    718c:	7a 83       	std	Y+2, r23	; 0x02
    718e:	69 83       	std	Y+1, r22	; 0x01
	//	y	0		0.5		1		0.5		0		-0.5	-1		-0.5

	unsigned int i=0;
	signed int long res=0;
	signed int sumSensorsX=0, sumSensorsY=0;
	signed int desL=*pwmLeft, desR=*pwmRight;
    7190:	fc 01       	movw	r30, r24
    7192:	01 90       	ld	r0, Z+
    7194:	f0 81       	ld	r31, Z
    7196:	e0 2d       	mov	r30, r0
    7198:	fc 83       	std	Y+4, r31	; 0x04
    719a:	eb 83       	std	Y+3, r30	; 0x03
    719c:	fb 01       	movw	r30, r22
    719e:	01 90       	ld	r0, Z+
    71a0:	f0 81       	ld	r31, Z
    71a2:	e0 2d       	mov	r30, r0
    71a4:	fe 83       	std	Y+6, r31	; 0x06
    71a6:	ed 83       	std	Y+5, r30	; 0x05

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    71a8:	00 91 c1 02 	lds	r16, 0x02C1
    71ac:	10 91 c2 02 	lds	r17, 0x02C2
    71b0:	05 30       	cpi	r16, 0x05	; 5
    71b2:	11 05       	cpc	r17, r1
    71b4:	34 f4       	brge	.+12     	; 0x71c2 <obstacleAvoidance+0x6c>
			proximityResultLinear[i] = 0;
    71b6:	10 92 c2 02 	sts	0x02C2, r1
    71ba:	10 92 c1 02 	sts	0x02C1, r1
    71be:	00 e0       	ldi	r16, 0x00	; 0
    71c0:	10 e0       	ldi	r17, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    71c2:	60 91 c3 02 	lds	r22, 0x02C3
    71c6:	70 91 c4 02 	lds	r23, 0x02C4
    71ca:	65 30       	cpi	r22, 0x05	; 5
    71cc:	71 05       	cpc	r23, r1
    71ce:	34 f4       	brge	.+12     	; 0x71dc <obstacleAvoidance+0x86>
			proximityResultLinear[i] = 0;
    71d0:	10 92 c4 02 	sts	0x02C4, r1
    71d4:	10 92 c3 02 	sts	0x02C3, r1
    71d8:	60 e0       	ldi	r22, 0x00	; 0
    71da:	70 e0       	ldi	r23, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    71dc:	80 91 c5 02 	lds	r24, 0x02C5
    71e0:	90 91 c6 02 	lds	r25, 0x02C6
    71e4:	85 30       	cpi	r24, 0x05	; 5
    71e6:	91 05       	cpc	r25, r1
    71e8:	24 f4       	brge	.+8      	; 0x71f2 <obstacleAvoidance+0x9c>
			proximityResultLinear[i] = 0;
    71ea:	10 92 c6 02 	sts	0x02C6, r1
    71ee:	10 92 c5 02 	sts	0x02C5, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    71f2:	40 91 c7 02 	lds	r20, 0x02C7
    71f6:	50 91 c8 02 	lds	r21, 0x02C8
    71fa:	45 30       	cpi	r20, 0x05	; 5
    71fc:	51 05       	cpc	r21, r1
    71fe:	34 f4       	brge	.+12     	; 0x720c <obstacleAvoidance+0xb6>
			proximityResultLinear[i] = 0;
    7200:	10 92 c8 02 	sts	0x02C8, r1
    7204:	10 92 c7 02 	sts	0x02C7, r1
    7208:	40 e0       	ldi	r20, 0x00	; 0
    720a:	50 e0       	ldi	r21, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    720c:	40 90 c9 02 	lds	r4, 0x02C9
    7210:	50 90 ca 02 	lds	r5, 0x02CA
    7214:	f5 e0       	ldi	r31, 0x05	; 5
    7216:	4f 16       	cp	r4, r31
    7218:	51 04       	cpc	r5, r1
    721a:	34 f4       	brge	.+12     	; 0x7228 <obstacleAvoidance+0xd2>
			proximityResultLinear[i] = 0;
    721c:	10 92 ca 02 	sts	0x02CA, r1
    7220:	10 92 c9 02 	sts	0x02C9, r1
    7224:	44 24       	eor	r4, r4
    7226:	55 24       	eor	r5, r5
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    7228:	20 91 cb 02 	lds	r18, 0x02CB
    722c:	30 91 cc 02 	lds	r19, 0x02CC
    7230:	25 30       	cpi	r18, 0x05	; 5
    7232:	31 05       	cpc	r19, r1
    7234:	34 f4       	brge	.+12     	; 0x7242 <obstacleAvoidance+0xec>
			proximityResultLinear[i] = 0;
    7236:	10 92 cc 02 	sts	0x02CC, r1
    723a:	10 92 cb 02 	sts	0x02CB, r1
    723e:	20 e0       	ldi	r18, 0x00	; 0
    7240:	30 e0       	ldi	r19, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    7242:	80 91 cd 02 	lds	r24, 0x02CD
    7246:	90 91 ce 02 	lds	r25, 0x02CE
    724a:	85 30       	cpi	r24, 0x05	; 5
    724c:	91 05       	cpc	r25, r1
    724e:	24 f4       	brge	.+8      	; 0x7258 <obstacleAvoidance+0x102>
			proximityResultLinear[i] = 0;
    7250:	10 92 ce 02 	sts	0x02CE, r1
    7254:	10 92 cd 02 	sts	0x02CD, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    7258:	80 91 cf 02 	lds	r24, 0x02CF
    725c:	90 91 d0 02 	lds	r25, 0x02D0
    7260:	85 30       	cpi	r24, 0x05	; 5
    7262:	91 05       	cpc	r25, r1
    7264:	34 f4       	brge	.+12     	; 0x7272 <obstacleAvoidance+0x11c>
			proximityResultLinear[i] = 0;
    7266:	10 92 d0 02 	sts	0x02D0, r1
    726a:	10 92 cf 02 	sts	0x02CF, r1
    726e:	80 e0       	ldi	r24, 0x00	; 0
    7270:	90 e0       	ldi	r25, 0x00	; 0
	}

	// sum the contribution of each sensor (based on the previous weights table);
	// give more weight to prox2 and prox6 (side proximities) in order to get more stability in narrow aisles;
	// add some noise to the sum in order to escape from dead-lock positions
	sumSensorsX = -proximityResultLinear[0] - (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) + proximityResultLinear[4] + (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + ((rand()%60)-30);
    7272:	10 95       	com	r17
    7274:	01 95       	neg	r16
    7276:	1f 4f       	sbci	r17, 0xFF	; 255
    7278:	5b 01       	movw	r10, r22
    727a:	b5 94       	asr	r11
    727c:	a7 94       	ror	r10
    727e:	7a 01       	movw	r14, r20
    7280:	f5 94       	asr	r15
    7282:	e7 94       	ror	r14
    7284:	69 01       	movw	r12, r18
    7286:	d5 94       	asr	r13
    7288:	c7 94       	ror	r12
    728a:	4c 01       	movw	r8, r24
    728c:	95 94       	asr	r9
    728e:	87 94       	ror	r8
    7290:	0e 94 ec 52 	call	0xa5d8	; 0xa5d8 <rand>
    7294:	92 01       	movw	r18, r4
    7296:	2e 51       	subi	r18, 0x1E	; 30
    7298:	30 40       	sbci	r19, 0x00	; 0
    729a:	20 0f       	add	r18, r16
    729c:	31 1f       	adc	r19, r17
    729e:	2e 0d       	add	r18, r14
    72a0:	3f 1d       	adc	r19, r15
    72a2:	2c 0d       	add	r18, r12
    72a4:	3d 1d       	adc	r19, r13
    72a6:	2a 19       	sub	r18, r10
    72a8:	3b 09       	sbc	r19, r11
    72aa:	28 19       	sub	r18, r8
    72ac:	39 09       	sbc	r19, r9
    72ae:	6c e3       	ldi	r22, 0x3C	; 60
    72b0:	26 2e       	mov	r2, r22
    72b2:	31 2c       	mov	r3, r1
    72b4:	b1 01       	movw	r22, r2
    72b6:	0e 94 4e 52 	call	0xa49c	; 0xa49c <__divmodhi4>
    72ba:	28 0f       	add	r18, r24
    72bc:	39 1f       	adc	r19, r25
    72be:	38 87       	std	Y+8, r19	; 0x08
    72c0:	2f 83       	std	Y+7, r18	; 0x07
	//sumSensorsX = -proximityResultLinear[0]  + proximityResultLinear[4];	
	sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[2]>>2) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[6]>>2) - (proximityResultLinear[7]>>1)+ ((rand()%60)-30);
    72c2:	e0 90 c3 02 	lds	r14, 0x02C3
    72c6:	f0 90 c4 02 	lds	r15, 0x02C4
    72ca:	f5 94       	asr	r15
    72cc:	e7 94       	ror	r14
    72ce:	00 91 c5 02 	lds	r16, 0x02C5
    72d2:	10 91 c6 02 	lds	r17, 0x02C6
    72d6:	15 95       	asr	r17
    72d8:	07 95       	ror	r16
    72da:	15 95       	asr	r17
    72dc:	07 95       	ror	r16
    72de:	c0 90 c7 02 	lds	r12, 0x02C7
    72e2:	d0 90 c8 02 	lds	r13, 0x02C8
    72e6:	d5 94       	asr	r13
    72e8:	c7 94       	ror	r12
    72ea:	a0 90 cb 02 	lds	r10, 0x02CB
    72ee:	b0 90 cc 02 	lds	r11, 0x02CC
    72f2:	b5 94       	asr	r11
    72f4:	a7 94       	ror	r10
    72f6:	40 90 cd 02 	lds	r4, 0x02CD
    72fa:	50 90 ce 02 	lds	r5, 0x02CE
    72fe:	55 94       	asr	r5
    7300:	47 94       	ror	r4
    7302:	55 94       	asr	r5
    7304:	47 94       	ror	r4
    7306:	80 90 cf 02 	lds	r8, 0x02CF
    730a:	90 90 d0 02 	lds	r9, 0x02D0
    730e:	95 94       	asr	r9
    7310:	87 94       	ror	r8
    7312:	0e 94 ec 52 	call	0xa5d8	; 0xa5d8 <rand>
    7316:	97 01       	movw	r18, r14
    7318:	20 0f       	add	r18, r16
    731a:	31 1f       	adc	r19, r17
    731c:	2e 51       	subi	r18, 0x1E	; 30
    731e:	30 40       	sbci	r19, 0x00	; 0
    7320:	2c 0d       	add	r18, r12
    7322:	3d 1d       	adc	r19, r13
    7324:	2a 19       	sub	r18, r10
    7326:	3b 09       	sbc	r19, r11
    7328:	28 19       	sub	r18, r8
    732a:	39 09       	sbc	r19, r9
    732c:	24 19       	sub	r18, r4
    732e:	35 09       	sbc	r19, r5
    7330:	b1 01       	movw	r22, r2
    7332:	0e 94 4e 52 	call	0xa49c	; 0xa49c <__divmodhi4>
    7336:	28 0f       	add	r18, r24
    7338:	39 1f       	adc	r19, r25
	//sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + (rand()%30);

	// modify the velocity components based on sensor values
	if(desL >= 0) {
    733a:	4b 81       	ldd	r20, Y+3	; 0x03
    733c:	5c 81       	ldd	r21, Y+4	; 0x04
    733e:	57 fd       	sbrc	r21, 7
    7340:	e5 c0       	rjmp	.+458    	; 0x750c <obstacleAvoidance+0x3b6>
		res = (signed long int)desL + (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
    7342:	5a 01       	movw	r10, r20
    7344:	cc 24       	eor	r12, r12
    7346:	b7 fc       	sbrc	r11, 7
    7348:	c0 94       	com	r12
    734a:	dc 2c       	mov	r13, r12
    734c:	8f 81       	ldd	r24, Y+7	; 0x07
    734e:	98 85       	ldd	r25, Y+8	; 0x08
    7350:	1c 01       	movw	r2, r24
    7352:	44 24       	eor	r4, r4
    7354:	37 fc       	sbrc	r3, 7
    7356:	40 94       	com	r4
    7358:	54 2c       	mov	r5, r4
    735a:	79 01       	movw	r14, r18
    735c:	00 27       	eor	r16, r16
    735e:	f7 fc       	sbrc	r15, 7
    7360:	00 95       	com	r16
    7362:	10 2f       	mov	r17, r16
    7364:	c2 01       	movw	r24, r4
    7366:	b1 01       	movw	r22, r2
    7368:	6e 19       	sub	r22, r14
    736a:	7f 09       	sbc	r23, r15
    736c:	80 0b       	sbc	r24, r16
    736e:	91 0b       	sbc	r25, r17
    7370:	a6 01       	movw	r20, r12
    7372:	95 01       	movw	r18, r10
    7374:	0e 94 1b 52 	call	0xa436	; 0xa436 <__mulsi3>
    7378:	b6 e0       	ldi	r27, 0x06	; 6
    737a:	95 95       	asr	r25
    737c:	87 95       	ror	r24
    737e:	77 95       	ror	r23
    7380:	67 95       	ror	r22
    7382:	ba 95       	dec	r27
    7384:	d1 f7       	brne	.-12     	; 0x737a <obstacleAvoidance+0x224>
    7386:	6a 0d       	add	r22, r10
    7388:	7b 1d       	adc	r23, r11
    738a:	8c 1d       	adc	r24, r12
    738c:	9d 1d       	adc	r25, r13
		*pwmLeft = (signed int)res;
    738e:	f3 01       	movw	r30, r6
    7390:	71 83       	std	Z+1, r23	; 0x01
    7392:	60 83       	st	Z, r22
	} else {
		res = (signed long int)desL - (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
		*pwmLeft = (signed int)res;
	}
	if(desR >=0) {
    7394:	2d 81       	ldd	r18, Y+5	; 0x05
    7396:	3e 81       	ldd	r19, Y+6	; 0x06
    7398:	37 fd       	sbrc	r19, 7
    739a:	97 c0       	rjmp	.+302    	; 0x74ca <obstacleAvoidance+0x374>
		res = (signed long int)desR + (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
    739c:	59 01       	movw	r10, r18
    739e:	cc 24       	eor	r12, r12
    73a0:	b7 fc       	sbrc	r11, 7
    73a2:	c0 94       	com	r12
    73a4:	dc 2c       	mov	r13, r12
    73a6:	c8 01       	movw	r24, r16
    73a8:	b7 01       	movw	r22, r14
    73aa:	62 0d       	add	r22, r2
    73ac:	73 1d       	adc	r23, r3
    73ae:	84 1d       	adc	r24, r4
    73b0:	95 1d       	adc	r25, r5
    73b2:	a6 01       	movw	r20, r12
    73b4:	95 01       	movw	r18, r10
    73b6:	0e 94 1b 52 	call	0xa436	; 0xa436 <__mulsi3>
    73ba:	f6 e0       	ldi	r31, 0x06	; 6
    73bc:	95 95       	asr	r25
    73be:	87 95       	ror	r24
    73c0:	77 95       	ror	r23
    73c2:	67 95       	ror	r22
    73c4:	fa 95       	dec	r31
    73c6:	d1 f7       	brne	.-12     	; 0x73bc <obstacleAvoidance+0x266>
    73c8:	6a 0d       	add	r22, r10
    73ca:	7b 1d       	adc	r23, r11
    73cc:	8c 1d       	adc	r24, r12
    73ce:	9d 1d       	adc	r25, r13
		*pwmRight = (signed int)res;
    73d0:	9b 01       	movw	r18, r22
    73d2:	e9 81       	ldd	r30, Y+1	; 0x01
    73d4:	fa 81       	ldd	r31, Y+2	; 0x02
    73d6:	71 83       	std	Z+1, r23	; 0x01
    73d8:	60 83       	st	Z, r22
	} else {
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	}

	if(currentSelector == 10) {	// force a little bit the upwards direction in vertical motion
    73da:	80 91 4c 04 	lds	r24, 0x044C
    73de:	8a 30       	cpi	r24, 0x0A	; 10
    73e0:	09 f4       	brne	.+2      	; 0x73e4 <obstacleAvoidance+0x28e>
    73e2:	4b c0       	rjmp	.+150    	; 0x747a <obstacleAvoidance+0x324>
			}
		}
	}

	// force the values to be in the pwm maximum range
	if (*pwmRight>(MAX_MOTORS_PWM/2)) *pwmRight=(MAX_MOTORS_PWM/2);
    73e4:	f2 e0       	ldi	r31, 0x02	; 2
    73e6:	21 30       	cpi	r18, 0x01	; 1
    73e8:	3f 07       	cpc	r19, r31
    73ea:	44 f0       	brlt	.+16     	; 0x73fc <obstacleAvoidance+0x2a6>
    73ec:	80 e0       	ldi	r24, 0x00	; 0
    73ee:	92 e0       	ldi	r25, 0x02	; 2
    73f0:	e9 81       	ldd	r30, Y+1	; 0x01
    73f2:	fa 81       	ldd	r31, Y+2	; 0x02
    73f4:	91 83       	std	Z+1, r25	; 0x01
    73f6:	80 83       	st	Z, r24
    73f8:	20 e0       	ldi	r18, 0x00	; 0
    73fa:	32 e0       	ldi	r19, 0x02	; 2
	if (*pwmLeft>(MAX_MOTORS_PWM/2)) *pwmLeft=(MAX_MOTORS_PWM/2);
    73fc:	f3 01       	movw	r30, r6
    73fe:	80 81       	ld	r24, Z
    7400:	91 81       	ldd	r25, Z+1	; 0x01
    7402:	f2 e0       	ldi	r31, 0x02	; 2
    7404:	81 30       	cpi	r24, 0x01	; 1
    7406:	9f 07       	cpc	r25, r31
    7408:	4c f0       	brlt	.+18     	; 0x741c <obstacleAvoidance+0x2c6>
    740a:	80 e0       	ldi	r24, 0x00	; 0
    740c:	92 e0       	ldi	r25, 0x02	; 2
    740e:	f3 01       	movw	r30, r6
    7410:	91 83       	std	Z+1, r25	; 0x01
    7412:	80 83       	st	Z, r24
    7414:	e9 81       	ldd	r30, Y+1	; 0x01
    7416:	fa 81       	ldd	r31, Y+2	; 0x02
    7418:	20 81       	ld	r18, Z
    741a:	31 81       	ldd	r19, Z+1	; 0x01
	if (*pwmRight<-(MAX_MOTORS_PWM/2)) *pwmRight=-(MAX_MOTORS_PWM/2);
    741c:	fe ef       	ldi	r31, 0xFE	; 254
    741e:	20 30       	cpi	r18, 0x00	; 0
    7420:	3f 07       	cpc	r19, r31
    7422:	4c f4       	brge	.+18     	; 0x7436 <obstacleAvoidance+0x2e0>
    7424:	80 e0       	ldi	r24, 0x00	; 0
    7426:	9e ef       	ldi	r25, 0xFE	; 254
    7428:	e9 81       	ldd	r30, Y+1	; 0x01
    742a:	fa 81       	ldd	r31, Y+2	; 0x02
    742c:	91 83       	std	Z+1, r25	; 0x01
    742e:	80 83       	st	Z, r24
    7430:	f3 01       	movw	r30, r6
    7432:	80 81       	ld	r24, Z
    7434:	91 81       	ldd	r25, Z+1	; 0x01
	if (*pwmLeft<-(MAX_MOTORS_PWM/2)) *pwmLeft=-(MAX_MOTORS_PWM/2);
    7436:	fe ef       	ldi	r31, 0xFE	; 254
    7438:	80 30       	cpi	r24, 0x00	; 0
    743a:	9f 07       	cpc	r25, r31
    743c:	2c f4       	brge	.+10     	; 0x7448 <obstacleAvoidance+0x2f2>
    743e:	80 e0       	ldi	r24, 0x00	; 0
    7440:	9e ef       	ldi	r25, 0xFE	; 254
    7442:	f3 01       	movw	r30, r6
    7444:	91 83       	std	Z+1, r25	; 0x01
    7446:	80 83       	st	Z, r24

}
    7448:	28 96       	adiw	r28, 0x08	; 8
    744a:	0f b6       	in	r0, 0x3f	; 63
    744c:	f8 94       	cli
    744e:	de bf       	out	0x3e, r29	; 62
    7450:	0f be       	out	0x3f, r0	; 63
    7452:	cd bf       	out	0x3d, r28	; 61
    7454:	cf 91       	pop	r28
    7456:	df 91       	pop	r29
    7458:	1f 91       	pop	r17
    745a:	0f 91       	pop	r16
    745c:	ff 90       	pop	r15
    745e:	ef 90       	pop	r14
    7460:	df 90       	pop	r13
    7462:	cf 90       	pop	r12
    7464:	bf 90       	pop	r11
    7466:	af 90       	pop	r10
    7468:	9f 90       	pop	r9
    746a:	8f 90       	pop	r8
    746c:	7f 90       	pop	r7
    746e:	6f 90       	pop	r6
    7470:	5f 90       	pop	r5
    7472:	4f 90       	pop	r4
    7474:	3f 90       	pop	r3
    7476:	2f 90       	pop	r2
    7478:	08 95       	ret
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	}

	if(currentSelector == 10) {	// force a little bit the upwards direction in vertical motion
		if(desL!=0 && desR!=0) {
    747a:	2b 81       	ldd	r18, Y+3	; 0x03
    747c:	3c 81       	ldd	r19, Y+4	; 0x04
    747e:	21 15       	cp	r18, r1
    7480:	31 05       	cpc	r19, r1
    7482:	f1 f0       	breq	.+60     	; 0x74c0 <obstacleAvoidance+0x36a>
    7484:	2d 81       	ldd	r18, Y+5	; 0x05
    7486:	3e 81       	ldd	r19, Y+6	; 0x06
    7488:	21 15       	cp	r18, r1
    748a:	31 05       	cpc	r19, r1
    748c:	c9 f0       	breq	.+50     	; 0x74c0 <obstacleAvoidance+0x36a>
			if(currentAngle<270 && currentAngle>90) {
    748e:	80 91 3e 04 	lds	r24, 0x043E
    7492:	90 91 3f 04 	lds	r25, 0x043F
    7496:	8b 55       	subi	r24, 0x5B	; 91
    7498:	90 40       	sbci	r25, 0x00	; 0
    749a:	83 3b       	cpi	r24, 0xB3	; 179
    749c:	91 05       	cpc	r25, r1
    749e:	08 f0       	brcs	.+2      	; 0x74a2 <obstacleAvoidance+0x34c>
    74a0:	5f c0       	rjmp	.+190    	; 0x7560 <obstacleAvoidance+0x40a>
				*pwmLeft += 10;
    74a2:	f3 01       	movw	r30, r6
    74a4:	80 81       	ld	r24, Z
    74a6:	91 81       	ldd	r25, Z+1	; 0x01
    74a8:	0a 96       	adiw	r24, 0x0a	; 10
    74aa:	91 83       	std	Z+1, r25	; 0x01
    74ac:	80 83       	st	Z, r24
				*pwmRight -= 10;
    74ae:	e9 81       	ldd	r30, Y+1	; 0x01
    74b0:	fa 81       	ldd	r31, Y+2	; 0x02
    74b2:	20 81       	ld	r18, Z
    74b4:	31 81       	ldd	r19, Z+1	; 0x01
    74b6:	2a 50       	subi	r18, 0x0A	; 10
    74b8:	30 40       	sbci	r19, 0x00	; 0
    74ba:	31 83       	std	Z+1, r19	; 0x01
    74bc:	20 83       	st	Z, r18
    74be:	92 cf       	rjmp	.-220    	; 0x73e4 <obstacleAvoidance+0x28e>
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	}

	if(currentSelector == 10) {	// force a little bit the upwards direction in vertical motion
		if(desL!=0 && desR!=0) {
    74c0:	e9 81       	ldd	r30, Y+1	; 0x01
    74c2:	fa 81       	ldd	r31, Y+2	; 0x02
    74c4:	20 81       	ld	r18, Z
    74c6:	31 81       	ldd	r19, Z+1	; 0x01
    74c8:	8d cf       	rjmp	.-230    	; 0x73e4 <obstacleAvoidance+0x28e>
	}
	if(desR >=0) {
		res = (signed long int)desR + (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	} else {
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
    74ca:	59 01       	movw	r10, r18
    74cc:	cc 24       	eor	r12, r12
    74ce:	b7 fc       	sbrc	r11, 7
    74d0:	c0 94       	com	r12
    74d2:	dc 2c       	mov	r13, r12
    74d4:	c2 01       	movw	r24, r4
    74d6:	b1 01       	movw	r22, r2
    74d8:	6e 19       	sub	r22, r14
    74da:	7f 09       	sbc	r23, r15
    74dc:	80 0b       	sbc	r24, r16
    74de:	91 0b       	sbc	r25, r17
    74e0:	a6 01       	movw	r20, r12
    74e2:	95 01       	movw	r18, r10
    74e4:	0e 94 1b 52 	call	0xa436	; 0xa436 <__mulsi3>
    74e8:	e6 e0       	ldi	r30, 0x06	; 6
    74ea:	95 95       	asr	r25
    74ec:	87 95       	ror	r24
    74ee:	77 95       	ror	r23
    74f0:	67 95       	ror	r22
    74f2:	ea 95       	dec	r30
    74f4:	d1 f7       	brne	.-12     	; 0x74ea <obstacleAvoidance+0x394>
    74f6:	26 1b       	sub	r18, r22
    74f8:	37 0b       	sbc	r19, r23
    74fa:	48 0b       	sbc	r20, r24
    74fc:	59 0b       	sbc	r21, r25
    74fe:	da 01       	movw	r26, r20
    7500:	c9 01       	movw	r24, r18
		*pwmRight = (signed int)res;
    7502:	e9 81       	ldd	r30, Y+1	; 0x01
    7504:	fa 81       	ldd	r31, Y+2	; 0x02
    7506:	91 83       	std	Z+1, r25	; 0x01
    7508:	80 83       	st	Z, r24
    750a:	67 cf       	rjmp	.-306    	; 0x73da <obstacleAvoidance+0x284>
	// modify the velocity components based on sensor values
	if(desL >= 0) {
		res = (signed long int)desL + (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmLeft = (signed int)res;
	} else {
		res = (signed long int)desL - (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
    750c:	5a 01       	movw	r10, r20
    750e:	cc 24       	eor	r12, r12
    7510:	b7 fc       	sbrc	r11, 7
    7512:	c0 94       	com	r12
    7514:	dc 2c       	mov	r13, r12
    7516:	8f 81       	ldd	r24, Y+7	; 0x07
    7518:	98 85       	ldd	r25, Y+8	; 0x08
    751a:	1c 01       	movw	r2, r24
    751c:	44 24       	eor	r4, r4
    751e:	37 fc       	sbrc	r3, 7
    7520:	40 94       	com	r4
    7522:	54 2c       	mov	r5, r4
    7524:	79 01       	movw	r14, r18
    7526:	00 27       	eor	r16, r16
    7528:	f7 fc       	sbrc	r15, 7
    752a:	00 95       	com	r16
    752c:	10 2f       	mov	r17, r16
    752e:	c8 01       	movw	r24, r16
    7530:	b7 01       	movw	r22, r14
    7532:	62 0d       	add	r22, r2
    7534:	73 1d       	adc	r23, r3
    7536:	84 1d       	adc	r24, r4
    7538:	95 1d       	adc	r25, r5
    753a:	a6 01       	movw	r20, r12
    753c:	95 01       	movw	r18, r10
    753e:	0e 94 1b 52 	call	0xa436	; 0xa436 <__mulsi3>
    7542:	a6 e0       	ldi	r26, 0x06	; 6
    7544:	95 95       	asr	r25
    7546:	87 95       	ror	r24
    7548:	77 95       	ror	r23
    754a:	67 95       	ror	r22
    754c:	aa 95       	dec	r26
    754e:	d1 f7       	brne	.-12     	; 0x7544 <obstacleAvoidance+0x3ee>
    7550:	26 1b       	sub	r18, r22
    7552:	37 0b       	sbc	r19, r23
    7554:	48 0b       	sbc	r20, r24
    7556:	59 0b       	sbc	r21, r25
		*pwmLeft = (signed int)res;
    7558:	f3 01       	movw	r30, r6
    755a:	31 83       	std	Z+1, r19	; 0x01
    755c:	20 83       	st	Z, r18
    755e:	1a cf       	rjmp	.-460    	; 0x7394 <obstacleAvoidance+0x23e>
		if(desL!=0 && desR!=0) {
			if(currentAngle<270 && currentAngle>90) {
				*pwmLeft += 10;
				*pwmRight -= 10;
			} else {
				*pwmLeft -= 10;
    7560:	f3 01       	movw	r30, r6
    7562:	80 81       	ld	r24, Z
    7564:	91 81       	ldd	r25, Z+1	; 0x01
    7566:	0a 97       	sbiw	r24, 0x0a	; 10
    7568:	91 83       	std	Z+1, r25	; 0x01
    756a:	80 83       	st	Z, r24
				*pwmRight += 10;
    756c:	e9 81       	ldd	r30, Y+1	; 0x01
    756e:	fa 81       	ldd	r31, Y+2	; 0x02
    7570:	20 81       	ld	r18, Z
    7572:	31 81       	ldd	r19, Z+1	; 0x01
    7574:	26 5f       	subi	r18, 0xF6	; 246
    7576:	3f 4f       	sbci	r19, 0xFF	; 255
    7578:	31 83       	std	Z+1, r19	; 0x01
    757a:	20 83       	st	Z, r18
    757c:	33 cf       	rjmp	.-410    	; 0x73e4 <obstacleAvoidance+0x28e>

0000757e <cliffDetected>:


char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    757e:	80 91 69 02 	lds	r24, 0x0269
    7582:	90 91 6a 02 	lds	r25, 0x026A
    7586:	21 e0       	ldi	r18, 0x01	; 1
    7588:	84 3a       	cpi	r24, 0xA4	; 164
    758a:	92 07       	cpc	r25, r18
    758c:	d4 f0       	brlt	.+52     	; 0x75c2 <cliffDetected+0x44>
    758e:	80 91 6b 02 	lds	r24, 0x026B
    7592:	90 91 6c 02 	lds	r25, 0x026C
    7596:	21 e0       	ldi	r18, 0x01	; 1
    7598:	84 3a       	cpi	r24, 0xA4	; 164
    759a:	92 07       	cpc	r25, r18
    759c:	94 f0       	brlt	.+36     	; 0x75c2 <cliffDetected+0x44>
    759e:	80 91 6d 02 	lds	r24, 0x026D
    75a2:	90 91 6e 02 	lds	r25, 0x026E
    75a6:	21 e0       	ldi	r18, 0x01	; 1
    75a8:	84 3a       	cpi	r24, 0xA4	; 164
    75aa:	92 07       	cpc	r25, r18
    75ac:	74 f0       	brlt	.+28     	; 0x75ca <cliffDetected+0x4c>
	//if(proximityResult[8]<(proximityOffset[8]>>1) || proximityResult[9]<(proximityOffset[9]>>1) || proximityResult[10]<(proximityOffset[10]>>1) || proximityResult[11]<(proximityOffset[11]>>1)) {
		return 1;
    75ae:	81 e0       	ldi	r24, 0x01	; 1
    75b0:	20 91 6f 02 	lds	r18, 0x026F
    75b4:	30 91 70 02 	lds	r19, 0x0270
    75b8:	91 e0       	ldi	r25, 0x01	; 1
    75ba:	24 3a       	cpi	r18, 0xA4	; 164
    75bc:	39 07       	cpc	r19, r25
    75be:	1c f4       	brge	.+6      	; 0x75c6 <cliffDetected+0x48>
	} else {
		return 0;
	}


}
    75c0:	08 95       	ret
char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
	//if(proximityResult[8]<(proximityOffset[8]>>1) || proximityResult[9]<(proximityOffset[9]>>1) || proximityResult[10]<(proximityOffset[10]>>1) || proximityResult[11]<(proximityOffset[11]>>1)) {
		return 1;
    75c2:	81 e0       	ldi	r24, 0x01	; 1
    75c4:	08 95       	ret
    75c6:	80 e0       	ldi	r24, 0x00	; 0
    75c8:	08 95       	ret
    75ca:	81 e0       	ldi	r24, 0x01	; 1
	} else {
		return 0;
	}


}
    75cc:	08 95       	ret

000075ce <enableObstacleAvoidance>:

void enableObstacleAvoidance() {
	obstacleAvoidanceEnabled=1;
    75ce:	81 e0       	ldi	r24, 0x01	; 1
    75d0:	80 93 6c 04 	sts	0x046C, r24
}
    75d4:	08 95       	ret

000075d6 <disableObstacleAvoidance>:

void disableObstacleAvoidance() {
	obstacleAvoidanceEnabled=0;
    75d6:	10 92 6c 04 	sts	0x046C, r1
}
    75da:	08 95       	ret

000075dc <enableCliffAvoidance>:

void enableCliffAvoidance() {
	cliffAvoidanceEnabled=1;
    75dc:	81 e0       	ldi	r24, 0x01	; 1
    75de:	80 93 6d 04 	sts	0x046D, r24
}
    75e2:	08 95       	ret

000075e4 <disableCliffAvoidance>:

void disableCliffAvoidance() {
	cliffAvoidanceEnabled=0;
    75e4:	10 92 6d 04 	sts	0x046D, r1
}
    75e8:	08 95       	ret

000075ea <initRGBleds>:
	// Period freq = Fosc/TOP (max timer value) => TOP = Fosc/period freq
	// We need a frequency of about 30 KHz => 8000000/30000 = 266
	// The waveform generation mode let us chose the TOP value to be 256
	// thus we get period freq = 8000000/256 = 31250 Hz

	TCCR1A = 0;
    75ea:	a0 e8       	ldi	r26, 0x80	; 128
    75ec:	b0 e0       	ldi	r27, 0x00	; 0
    75ee:	1c 92       	st	X, r1
	TCCR1B = 0;
    75f0:	e1 e8       	ldi	r30, 0x81	; 129
    75f2:	f0 e0       	ldi	r31, 0x00	; 0
    75f4:	10 82       	st	Z, r1

	// enable OCA, OCB, OCC; clear on match, set at bottom
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << COM1C1) | (1 << WGM10); 	
    75f6:	8c 91       	ld	r24, X
    75f8:	89 6a       	ori	r24, 0xA9	; 169
    75fa:	8c 93       	st	X, r24
	// mode 5 => fast-pwm 8 bit; no prescaler
	TCCR1B |= (1 << WGM12) | (1 << CS10);										
    75fc:	80 81       	ld	r24, Z
    75fe:	89 60       	ori	r24, 0x09	; 9
    7600:	80 83       	st	Z, r24
	// the values for the leds pwm goes from 0 (max power on) to 255 (off)
	OCR1A = pwm_red;
    7602:	80 91 0c 02 	lds	r24, 0x020C
    7606:	90 e0       	ldi	r25, 0x00	; 0
    7608:	90 93 89 00 	sts	0x0089, r25
    760c:	80 93 88 00 	sts	0x0088, r24
	OCR1B = pwm_green;
    7610:	80 91 0d 02 	lds	r24, 0x020D
    7614:	90 e0       	ldi	r25, 0x00	; 0
    7616:	90 93 8b 00 	sts	0x008B, r25
    761a:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = pwm_blue;
    761e:	80 91 0e 02 	lds	r24, 0x020E
    7622:	90 e0       	ldi	r25, 0x00	; 0
    7624:	90 93 8d 00 	sts	0x008D, r25
    7628:	80 93 8c 00 	sts	0x008C, r24

}
    762c:	08 95       	ret

0000762e <toggleBlueLed>:

void toggleBlueLed() {

	blinkState = 1 - blinkState;
    762e:	81 e0       	ldi	r24, 0x01	; 1
    7630:	90 91 1b 03 	lds	r25, 0x031B
    7634:	89 1b       	sub	r24, r25
    7636:	80 93 1b 03 	sts	0x031B, r24

	if(blinkState) {
    763a:	88 23       	and	r24, r24
    763c:	39 f4       	brne	.+14     	; 0x764c <toggleBlueLed+0x1e>
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
		OCR1C = 255;
	} else {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC to get the maximum output power; this is due to the fact 
    763e:	80 91 80 00 	lds	r24, 0x0080
    7642:	87 7f       	andi	r24, 0xF7	; 247
    7644:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// that the minimum duty cycle when the output compare is enable is 1 
    7648:	2f 98       	cbi	0x05, 7	; 5
    764a:	08 95       	ret
void toggleBlueLed() {

	blinkState = 1 - blinkState;

	if(blinkState) {
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
    764c:	80 91 80 00 	lds	r24, 0x0080
    7650:	88 60       	ori	r24, 0x08	; 8
    7652:	80 93 80 00 	sts	0x0080, r24
		OCR1C = 255;
    7656:	8f ef       	ldi	r24, 0xFF	; 255
    7658:	90 e0       	ldi	r25, 0x00	; 0
    765a:	90 93 8d 00 	sts	0x008D, r25
    765e:	80 93 8c 00 	sts	0x008C, r24
    7662:	08 95       	ret

00007664 <updateRedLed>:

}

void updateRedLed(unsigned char value) {

	if(value == 0) {
    7664:	88 23       	and	r24, r24
    7666:	59 f0       	breq	.+22     	; 0x767e <updateRedLed+0x1a>
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1A1);	// always enable OCA in case it was disabled
    7668:	90 91 80 00 	lds	r25, 0x0080
    766c:	90 68       	ori	r25, 0x80	; 128
    766e:	90 93 80 00 	sts	0x0080, r25
		OCR1A = value;
    7672:	90 e0       	ldi	r25, 0x00	; 0
    7674:	90 93 89 00 	sts	0x0089, r25
    7678:	80 93 88 00 	sts	0x0088, r24
    767c:	08 95       	ret
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
    767e:	80 91 80 00 	lds	r24, 0x0080
    7682:	8f 77       	andi	r24, 0x7F	; 127
    7684:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
    7688:	2d 98       	cbi	0x05, 5	; 5
    768a:	08 95       	ret

0000768c <updateGreenLed>:

}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
    768c:	88 23       	and	r24, r24
    768e:	59 f0       	breq	.+22     	; 0x76a6 <updateGreenLed+0x1a>
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
	} else {	
		TCCR1A |= (1 << COM1B1);	// always enable OCA in case it was disabled
    7690:	90 91 80 00 	lds	r25, 0x0080
    7694:	90 62       	ori	r25, 0x20	; 32
    7696:	90 93 80 00 	sts	0x0080, r25
		OCR1B = value;
    769a:	90 e0       	ldi	r25, 0x00	; 0
    769c:	90 93 8b 00 	sts	0x008B, r25
    76a0:	80 93 8a 00 	sts	0x008A, r24
    76a4:	08 95       	ret
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
    76a6:	80 91 80 00 	lds	r24, 0x0080
    76aa:	8f 7d       	andi	r24, 0xDF	; 223
    76ac:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
    76b0:	2e 98       	cbi	0x05, 6	; 5
    76b2:	08 95       	ret

000076b4 <updateBlueLed>:

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
    76b4:	88 23       	and	r24, r24
    76b6:	59 f0       	breq	.+22     	; 0x76ce <updateBlueLed+0x1a>
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1C1);	// always enable OCA in case it was disabled
    76b8:	90 91 80 00 	lds	r25, 0x0080
    76bc:	98 60       	ori	r25, 0x08	; 8
    76be:	90 93 80 00 	sts	0x0080, r25
		OCR1C = value;
    76c2:	90 e0       	ldi	r25, 0x00	; 0
    76c4:	90 93 8d 00 	sts	0x008D, r25
    76c8:	80 93 8c 00 	sts	0x008C, r24
    76cc:	08 95       	ret
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
    76ce:	80 91 80 00 	lds	r24, 0x0080
    76d2:	87 7f       	andi	r24, 0xF7	; 247
    76d4:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
    76d8:	2f 98       	cbi	0x05, 7	; 5
    76da:	08 95       	ret

000076dc <setGreenLed>:

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    76dc:	83 30       	cpi	r24, 0x03	; 3
    76de:	09 f4       	brne	.+2      	; 0x76e2 <setGreenLed+0x6>
    76e0:	5a c0       	rjmp	.+180    	; 0x7796 <setGreenLed+0xba>
    76e2:	84 30       	cpi	r24, 0x04	; 4
    76e4:	80 f0       	brcs	.+32     	; 0x7706 <setGreenLed+0x2a>
    76e6:	85 30       	cpi	r24, 0x05	; 5
    76e8:	09 f4       	brne	.+2      	; 0x76ec <setGreenLed+0x10>
    76ea:	41 c0       	rjmp	.+130    	; 0x776e <setGreenLed+0x92>
    76ec:	85 30       	cpi	r24, 0x05	; 5
    76ee:	d0 f4       	brcc	.+52     	; 0x7724 <setGreenLed+0x48>
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
    76f0:	66 23       	and	r22, r22
    76f2:	09 f4       	brne	.+2      	; 0x76f6 <setGreenLed+0x1a>
    76f4:	68 c0       	rjmp	.+208    	; 0x77c6 <setGreenLed+0xea>
    76f6:	80 91 0b 01 	lds	r24, 0x010B
    76fa:	8f 7e       	andi	r24, 0xEF	; 239
    76fc:	80 93 0b 01 	sts	0x010B, r24
    7700:	80 91 0b 01 	lds	r24, 0x010B
    7704:	08 95       	ret

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    7706:	81 30       	cpi	r24, 0x01	; 1
    7708:	e1 f1       	breq	.+120    	; 0x7782 <setGreenLed+0xa6>
    770a:	82 30       	cpi	r24, 0x02	; 2
    770c:	80 f0       	brcs	.+32     	; 0x772e <setGreenLed+0x52>
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
    770e:	66 23       	and	r22, r22
    7710:	09 f4       	brne	.+2      	; 0x7714 <setGreenLed+0x38>
    7712:	46 c0       	rjmp	.+140    	; 0x77a0 <setGreenLed+0xc4>
    7714:	80 91 0b 01 	lds	r24, 0x010B
    7718:	8b 7f       	andi	r24, 0xFB	; 251
    771a:	80 93 0b 01 	sts	0x010B, r24
    771e:	80 91 0b 01 	lds	r24, 0x010B
    7722:	08 95       	ret

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    7724:	86 30       	cpi	r24, 0x06	; 6
    7726:	c9 f0       	breq	.+50     	; 0x775a <setGreenLed+0x7e>
    7728:	87 30       	cpi	r24, 0x07	; 7
    772a:	61 f0       	breq	.+24     	; 0x7744 <setGreenLed+0x68>
    772c:	08 95       	ret

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
    772e:	66 23       	and	r22, r22
    7730:	09 f4       	brne	.+2      	; 0x7734 <setGreenLed+0x58>
    7732:	51 c0       	rjmp	.+162    	; 0x77d6 <setGreenLed+0xfa>
    7734:	80 91 0b 01 	lds	r24, 0x010B
    7738:	8e 7f       	andi	r24, 0xFE	; 254
    773a:	80 93 0b 01 	sts	0x010B, r24
    773e:	80 91 0b 01 	lds	r24, 0x010B
    7742:	08 95       	ret
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
				break;

		case 7:	isOn?GREEN_LED7_ON:GREEN_LED7_OFF;
    7744:	66 23       	and	r22, r22
    7746:	09 f0       	breq	.+2      	; 0x774a <setGreenLed+0x6e>
    7748:	5e c0       	rjmp	.+188    	; 0x7806 <setGreenLed+0x12a>
    774a:	80 91 0b 01 	lds	r24, 0x010B
    774e:	80 68       	ori	r24, 0x80	; 128
    7750:	80 93 0b 01 	sts	0x010B, r24
    7754:	80 91 0b 01 	lds	r24, 0x010B
    7758:	08 95       	ret
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
    775a:	66 23       	and	r22, r22
    775c:	49 f1       	breq	.+82     	; 0x77b0 <setGreenLed+0xd4>
    775e:	80 91 0b 01 	lds	r24, 0x010B
    7762:	8f 7b       	andi	r24, 0xBF	; 191
    7764:	80 93 0b 01 	sts	0x010B, r24
    7768:	80 91 0b 01 	lds	r24, 0x010B
    776c:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
    776e:	66 23       	and	r22, r22
    7770:	d1 f1       	breq	.+116    	; 0x77e6 <setGreenLed+0x10a>
    7772:	80 91 0b 01 	lds	r24, 0x010B
    7776:	8f 7d       	andi	r24, 0xDF	; 223
    7778:	80 93 0b 01 	sts	0x010B, r24
    777c:	80 91 0b 01 	lds	r24, 0x010B
    7780:	08 95       	ret
	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
    7782:	66 23       	and	r22, r22
    7784:	c1 f1       	breq	.+112    	; 0x77f6 <setGreenLed+0x11a>
    7786:	80 91 0b 01 	lds	r24, 0x010B
    778a:	8d 7f       	andi	r24, 0xFD	; 253
    778c:	80 93 0b 01 	sts	0x010B, r24
    7790:	80 91 0b 01 	lds	r24, 0x010B
    7794:	08 95       	ret
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
    7796:	66 23       	and	r22, r22
    7798:	99 f0       	breq	.+38     	; 0x77c0 <setGreenLed+0xe4>
    779a:	a3 98       	cbi	0x14, 3	; 20
    779c:	84 b3       	in	r24, 0x14	; 20
    779e:	08 95       	ret
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
    77a0:	80 91 0b 01 	lds	r24, 0x010B
    77a4:	84 60       	ori	r24, 0x04	; 4
    77a6:	80 93 0b 01 	sts	0x010B, r24
    77aa:	80 91 0b 01 	lds	r24, 0x010B
    77ae:	08 95       	ret
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
    77b0:	80 91 0b 01 	lds	r24, 0x010B
    77b4:	80 64       	ori	r24, 0x40	; 64
    77b6:	80 93 0b 01 	sts	0x010B, r24
    77ba:	80 91 0b 01 	lds	r24, 0x010B
    77be:	08 95       	ret
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
    77c0:	a3 9a       	sbi	0x14, 3	; 20
    77c2:	84 b3       	in	r24, 0x14	; 20
    77c4:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
    77c6:	80 91 0b 01 	lds	r24, 0x010B
    77ca:	80 61       	ori	r24, 0x10	; 16
    77cc:	80 93 0b 01 	sts	0x010B, r24
    77d0:	80 91 0b 01 	lds	r24, 0x010B
    77d4:	08 95       	ret

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
    77d6:	80 91 0b 01 	lds	r24, 0x010B
    77da:	81 60       	ori	r24, 0x01	; 1
    77dc:	80 93 0b 01 	sts	0x010B, r24
    77e0:	80 91 0b 01 	lds	r24, 0x010B
    77e4:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
    77e6:	80 91 0b 01 	lds	r24, 0x010B
    77ea:	80 62       	ori	r24, 0x20	; 32
    77ec:	80 93 0b 01 	sts	0x010B, r24
    77f0:	80 91 0b 01 	lds	r24, 0x010B
    77f4:	08 95       	ret
	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
    77f6:	80 91 0b 01 	lds	r24, 0x010B
    77fa:	82 60       	ori	r24, 0x02	; 2
    77fc:	80 93 0b 01 	sts	0x010B, r24
    7800:	80 91 0b 01 	lds	r24, 0x010B
    7804:	08 95       	ret
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
				break;

		case 7:	isOn?GREEN_LED7_ON:GREEN_LED7_OFF;
    7806:	80 91 0b 01 	lds	r24, 0x010B
    780a:	8f 77       	andi	r24, 0x7F	; 127
    780c:	80 93 0b 01 	sts	0x010B, r24
    7810:	80 91 0b 01 	lds	r24, 0x010B
    7814:	08 95       	ret

00007816 <turnOffGreenLeds>:

}

void turnOffGreenLeds() {

	GREEN_LED0_OFF;
    7816:	eb e0       	ldi	r30, 0x0B	; 11
    7818:	f1 e0       	ldi	r31, 0x01	; 1
    781a:	80 81       	ld	r24, Z
    781c:	81 60       	ori	r24, 0x01	; 1
    781e:	80 83       	st	Z, r24
	GREEN_LED1_OFF;
    7820:	80 81       	ld	r24, Z
    7822:	82 60       	ori	r24, 0x02	; 2
    7824:	80 83       	st	Z, r24
	GREEN_LED2_OFF;
    7826:	80 81       	ld	r24, Z
    7828:	84 60       	ori	r24, 0x04	; 4
    782a:	80 83       	st	Z, r24
	GREEN_LED3_OFF;
    782c:	a3 9a       	sbi	0x14, 3	; 20
	GREEN_LED4_OFF;
    782e:	80 81       	ld	r24, Z
    7830:	80 61       	ori	r24, 0x10	; 16
    7832:	80 83       	st	Z, r24
	GREEN_LED5_OFF;
    7834:	80 81       	ld	r24, Z
    7836:	80 62       	ori	r24, 0x20	; 32
    7838:	80 83       	st	Z, r24
	GREEN_LED6_OFF;
    783a:	80 81       	ld	r24, Z
    783c:	80 64       	ori	r24, 0x40	; 64
    783e:	80 83       	st	Z, r24
	GREEN_LED7_OFF;
    7840:	80 81       	ld	r24, Z
    7842:	80 68       	ori	r24, 0x80	; 128
    7844:	80 83       	st	Z, r24

}
    7846:	08 95       	ret

00007848 <turnOnGreenLeds>:


void turnOnGreenLeds() {

	GREEN_LED0_ON;
    7848:	eb e0       	ldi	r30, 0x0B	; 11
    784a:	f1 e0       	ldi	r31, 0x01	; 1
    784c:	80 81       	ld	r24, Z
    784e:	8e 7f       	andi	r24, 0xFE	; 254
    7850:	80 83       	st	Z, r24
	GREEN_LED1_ON;
    7852:	80 81       	ld	r24, Z
    7854:	8d 7f       	andi	r24, 0xFD	; 253
    7856:	80 83       	st	Z, r24
	GREEN_LED2_ON;
    7858:	80 81       	ld	r24, Z
    785a:	8b 7f       	andi	r24, 0xFB	; 251
    785c:	80 83       	st	Z, r24
	GREEN_LED3_ON;
    785e:	a3 98       	cbi	0x14, 3	; 20
	GREEN_LED4_ON;
    7860:	80 81       	ld	r24, Z
    7862:	8f 7e       	andi	r24, 0xEF	; 239
    7864:	80 83       	st	Z, r24
	GREEN_LED5_ON;
    7866:	80 81       	ld	r24, Z
    7868:	8f 7d       	andi	r24, 0xDF	; 223
    786a:	80 83       	st	Z, r24
	GREEN_LED6_ON;
    786c:	80 81       	ld	r24, Z
    786e:	8f 7b       	andi	r24, 0xBF	; 191
    7870:	80 83       	st	Z, r24
	GREEN_LED7_ON;
    7872:	80 81       	ld	r24, Z
    7874:	8f 77       	andi	r24, 0x7F	; 127
    7876:	80 83       	st	Z, r24

}
    7878:	08 95       	ret

0000787a <initAccelerometer>:

void initAccelerometer() {

	unsigned char ret;

	i2c_init();		// init I2C bus
    787a:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <i2c_init>
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    787e:	80 91 14 02 	lds	r24, 0x0214
    7882:	0e 94 06 1c 	call	0x380c	; 0x380c <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    7886:	88 23       	and	r24, r24
    7888:	49 f4       	brne	.+18     	; 0x789c <initAccelerometer+0x22>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    788a:	86 e1       	ldi	r24, 0x16	; 22
    788c:	0e 94 81 1c 	call	0x3902	; 0x3902 <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    7890:	85 e4       	ldi	r24, 0x45	; 69
    7892:	0e 94 81 1c 	call	0x3902	; 0x3902 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    7896:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <i2c_stop>
    789a:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    789c:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <i2c_stop>
	i2c_init();		// init I2C bus

	ret = initMMA7455L();

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
    78a0:	86 ea       	ldi	r24, 0xA6	; 166
    78a2:	90 e0       	ldi	r25, 0x00	; 0
    78a4:	90 93 15 02 	sts	0x0215, r25
    78a8:	80 93 14 02 	sts	0x0214, r24
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    78ac:	86 ea       	ldi	r24, 0xA6	; 166
    78ae:	0e 94 06 1c 	call	0x380c	; 0x380c <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    78b2:	88 23       	and	r24, r24
    78b4:	41 f5       	brne	.+80     	; 0x7906 <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    78b6:	8d e2       	ldi	r24, 0x2D	; 45
    78b8:	0e 94 81 1c 	call	0x3902	; 0x3902 <i2c_write>
        i2c_write(0x08);	// measurement mode
    78bc:	88 e0       	ldi	r24, 0x08	; 8
    78be:	0e 94 81 1c 	call	0x3902	; 0x3902 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    78c2:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    78c6:	80 91 14 02 	lds	r24, 0x0214
    78ca:	0e 94 06 1c 	call	0x380c	; 0x380c <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    78ce:	88 23       	and	r24, r24
    78d0:	d1 f4       	brne	.+52     	; 0x7906 <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    78d2:	81 e3       	ldi	r24, 0x31	; 49
    78d4:	0e 94 81 1c 	call	0x3902	; 0x3902 <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    78d8:	80 e0       	ldi	r24, 0x00	; 0
    78da:	0e 94 81 1c 	call	0x3902	; 0x3902 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    78de:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    78e2:	80 91 14 02 	lds	r24, 0x0214
    78e6:	0e 94 06 1c 	call	0x380c	; 0x380c <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    78ea:	88 23       	and	r24, r24
    78ec:	61 f4       	brne	.+24     	; 0x7906 <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    78ee:	8c e2       	ldi	r24, 0x2C	; 44
    78f0:	0e 94 81 1c 	call	0x3902	; 0x3902 <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    78f4:	89 e0       	ldi	r24, 0x09	; 9
    78f6:	0e 94 81 1c 	call	0x3902	; 0x3902 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    78fa:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <i2c_stop>
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
		} else {
			useAccel = USE_ADXL345;
    78fe:	81 e0       	ldi	r24, 0x01	; 1
    7900:	80 93 2b 04 	sts	0x042B, r24
    7904:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    7906:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <i2c_stop>

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
    790a:	82 e0       	ldi	r24, 0x02	; 2
    790c:	80 93 2b 04 	sts	0x042B, r24
    7910:	08 95       	ret

00007912 <initMMA7455L>:
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7912:	80 91 14 02 	lds	r24, 0x0214
    7916:	0e 94 06 1c 	call	0x380c	; 0x380c <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    791a:	88 23       	and	r24, r24
    791c:	51 f4       	brne	.+20     	; 0x7932 <initMMA7455L+0x20>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    791e:	86 e1       	ldi	r24, 0x16	; 22
    7920:	0e 94 81 1c 	call	0x3902	; 0x3902 <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    7924:	85 e4       	ldi	r24, 0x45	; 69
    7926:	0e 94 81 1c 	call	0x3902	; 0x3902 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    792a:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <i2c_stop>
    }

	return 0;				// configuration ok
    792e:	80 e0       	ldi	r24, 0x00	; 0

}
    7930:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    7932:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <i2c_stop>
		return 1;
    7936:	81 e0       	ldi	r24, 0x01	; 1
    7938:	08 95       	ret

0000793a <initADXL345>:
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    793a:	80 91 14 02 	lds	r24, 0x0214
    793e:	0e 94 06 1c 	call	0x380c	; 0x380c <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    7942:	88 23       	and	r24, r24
    7944:	31 f5       	brne	.+76     	; 0x7992 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    7946:	8d e2       	ldi	r24, 0x2D	; 45
    7948:	0e 94 81 1c 	call	0x3902	; 0x3902 <i2c_write>
        i2c_write(0x08);	// measurement mode
    794c:	88 e0       	ldi	r24, 0x08	; 8
    794e:	0e 94 81 1c 	call	0x3902	; 0x3902 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    7952:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7956:	80 91 14 02 	lds	r24, 0x0214
    795a:	0e 94 06 1c 	call	0x380c	; 0x380c <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    795e:	88 23       	and	r24, r24
    7960:	c1 f4       	brne	.+48     	; 0x7992 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    7962:	81 e3       	ldi	r24, 0x31	; 49
    7964:	0e 94 81 1c 	call	0x3902	; 0x3902 <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    7968:	80 e0       	ldi	r24, 0x00	; 0
    796a:	0e 94 81 1c 	call	0x3902	; 0x3902 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    796e:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7972:	80 91 14 02 	lds	r24, 0x0214
    7976:	0e 94 06 1c 	call	0x380c	; 0x380c <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    797a:	88 23       	and	r24, r24
    797c:	51 f4       	brne	.+20     	; 0x7992 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    797e:	8c e2       	ldi	r24, 0x2C	; 44
    7980:	0e 94 81 1c 	call	0x3902	; 0x3902 <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    7984:	89 e0       	ldi	r24, 0x09	; 9
    7986:	0e 94 81 1c 	call	0x3902	; 0x3902 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    798a:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <i2c_stop>
    }

	return 0;
    798e:	80 e0       	ldi	r24, 0x00	; 0

}
    7990:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    7992:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <i2c_stop>
		return 1;
    7996:	81 e0       	ldi	r24, 0x01	; 1
    7998:	08 95       	ret

0000799a <readAccelXY>:

	return 0;

}

void readAccelXY() {
    799a:	ff 92       	push	r15
    799c:	0f 93       	push	r16
    799e:	1f 93       	push	r17
    79a0:	df 93       	push	r29
    79a2:	cf 93       	push	r28
    79a4:	0f 92       	push	r0
    79a6:	cd b7       	in	r28, 0x3d	; 61
    79a8:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[4];

	if(useAccel == USE_MMAX7455L) {
    79aa:	80 91 2b 04 	lds	r24, 0x042B
    79ae:	88 23       	and	r24, r24
    79b0:	91 f0       	breq	.+36     	; 0x79d6 <readAccelXY+0x3c>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else if(useAccel == USE_ADXL345) {
    79b2:	81 30       	cpi	r24, 0x01	; 1
    79b4:	09 f4       	brne	.+2      	; 0x79b8 <readAccelXY+0x1e>
    79b6:	88 c0       	rjmp	.+272    	; 0x7ac8 <readAccelXY+0x12e>
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else {

		accX = 0;
    79b8:	10 92 2d 04 	sts	0x042D, r1
    79bc:	10 92 2c 04 	sts	0x042C, r1
		accY = 0;
    79c0:	10 92 2f 04 	sts	0x042F, r1
    79c4:	10 92 2e 04 	sts	0x042E, r1

	}

}
    79c8:	0f 90       	pop	r0
    79ca:	cf 91       	pop	r28
    79cc:	df 91       	pop	r29
    79ce:	1f 91       	pop	r17
    79d0:	0f 91       	pop	r16
    79d2:	ff 90       	pop	r15
    79d4:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    79d6:	80 91 14 02 	lds	r24, 0x0214
    79da:	0e 94 06 1c 	call	0x380c	; 0x380c <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    79de:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
		i2c_write(0x32);											// sends address to read from (X LSB)
    79e0:	0e 94 81 1c 	call	0x3902	; 0x3902 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    79e4:	80 91 14 02 	lds	r24, 0x0214
    79e8:	8f 5f       	subi	r24, 0xFF	; 255
    79ea:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <i2c_rep_start>

		for(i=0; i<3; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    79ee:	0e 94 93 1c 	call	0x3926	; 0x3926 <i2c_readAck>
    79f2:	08 2f       	mov	r16, r24
    79f4:	0e 94 93 1c 	call	0x3926	; 0x3926 <i2c_readAck>
    79f8:	f8 2e       	mov	r15, r24
    79fa:	0e 94 93 1c 	call	0x3926	; 0x3926 <i2c_readAck>
    79fe:	18 2f       	mov	r17, r24
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    7a00:	0e 94 9d 1c 	call	0x393a	; 0x393a <i2c_readNak>
		i2c_stop();													// set stop conditon = release bus
    7a04:	89 83       	std	Y+1, r24	; 0x01
    7a06:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    7a0a:	90 91 5e 0b 	lds	r25, 0x0B5E
    7a0e:	89 81       	ldd	r24, Y+1	; 0x01
    7a10:	99 23       	and	r25, r25
    7a12:	39 f1       	breq	.+78     	; 0x7a62 <readAccelXY+0xc8>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    7a14:	4f 2d       	mov	r20, r15
    7a16:	55 27       	eor	r21, r21
    7a18:	47 fd       	sbrc	r20, 7
    7a1a:	50 95       	com	r21
    7a1c:	54 2f       	mov	r21, r20
    7a1e:	44 27       	eor	r20, r20
    7a20:	60 2f       	mov	r22, r16
    7a22:	77 27       	eor	r23, r23
    7a24:	67 fd       	sbrc	r22, 7
    7a26:	70 95       	com	r23
    7a28:	46 2b       	or	r20, r22
    7a2a:	57 2b       	or	r21, r23
    7a2c:	50 93 2d 04 	sts	0x042D, r21
    7a30:	40 93 2c 04 	sts	0x042C, r20
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    7a34:	28 2f       	mov	r18, r24
    7a36:	33 27       	eor	r19, r19
    7a38:	27 fd       	sbrc	r18, 7
    7a3a:	30 95       	com	r19
    7a3c:	32 2f       	mov	r19, r18
    7a3e:	22 27       	eor	r18, r18
    7a40:	81 2f       	mov	r24, r17
    7a42:	99 27       	eor	r25, r25
    7a44:	87 fd       	sbrc	r24, 7
    7a46:	90 95       	com	r25
    7a48:	28 2b       	or	r18, r24
    7a4a:	39 2b       	or	r19, r25
    7a4c:	30 93 2f 04 	sts	0x042F, r19
    7a50:	20 93 2e 04 	sts	0x042E, r18
		accX = 0;
		accY = 0;

	}

}
    7a54:	0f 90       	pop	r0
    7a56:	cf 91       	pop	r28
    7a58:	df 91       	pop	r29
    7a5a:	1f 91       	pop	r17
    7a5c:	0f 91       	pop	r16
    7a5e:	ff 90       	pop	r15
    7a60:	08 95       	ret

		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    7a62:	4f 2d       	mov	r20, r15
    7a64:	55 27       	eor	r21, r21
    7a66:	47 fd       	sbrc	r20, 7
    7a68:	50 95       	com	r21
    7a6a:	54 2f       	mov	r21, r20
    7a6c:	44 27       	eor	r20, r20
    7a6e:	60 2f       	mov	r22, r16
    7a70:	77 27       	eor	r23, r23
    7a72:	67 fd       	sbrc	r22, 7
    7a74:	70 95       	com	r23
    7a76:	46 2b       	or	r20, r22
    7a78:	57 2b       	or	r21, r23
    7a7a:	60 91 32 04 	lds	r22, 0x0432
    7a7e:	70 91 33 04 	lds	r23, 0x0433
    7a82:	46 1b       	sub	r20, r22
    7a84:	57 0b       	sbc	r21, r23
    7a86:	50 93 2d 04 	sts	0x042D, r21
    7a8a:	40 93 2c 04 	sts	0x042C, r20
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    7a8e:	28 2f       	mov	r18, r24
    7a90:	33 27       	eor	r19, r19
    7a92:	27 fd       	sbrc	r18, 7
    7a94:	30 95       	com	r19
    7a96:	32 2f       	mov	r19, r18
    7a98:	22 27       	eor	r18, r18
    7a9a:	81 2f       	mov	r24, r17
    7a9c:	99 27       	eor	r25, r25
    7a9e:	87 fd       	sbrc	r24, 7
    7aa0:	90 95       	com	r25
    7aa2:	28 2b       	or	r18, r24
    7aa4:	39 2b       	or	r19, r25
    7aa6:	80 91 34 04 	lds	r24, 0x0434
    7aaa:	90 91 35 04 	lds	r25, 0x0435
    7aae:	28 1b       	sub	r18, r24
    7ab0:	39 0b       	sbc	r19, r25
    7ab2:	30 93 2f 04 	sts	0x042F, r19
    7ab6:	20 93 2e 04 	sts	0x042E, r18
		accX = 0;
		accY = 0;

	}

}
    7aba:	0f 90       	pop	r0
    7abc:	cf 91       	pop	r28
    7abe:	df 91       	pop	r29
    7ac0:	1f 91       	pop	r17
    7ac2:	0f 91       	pop	r16
    7ac4:	ff 90       	pop	r15
    7ac6:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    7ac8:	80 91 14 02 	lds	r24, 0x0214
    7acc:	0e 94 06 1c 	call	0x380c	; 0x380c <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    7ad0:	82 e3       	ldi	r24, 0x32	; 50
    7ad2:	86 cf       	rjmp	.-244    	; 0x79e0 <readAccelXY+0x46>

00007ad4 <readAccelXYZ>:

	}

}

void readAccelXYZ() {
    7ad4:	df 93       	push	r29
    7ad6:	cf 93       	push	r28
    7ad8:	00 d0       	rcall	.+0      	; 0x7ada <readAccelXYZ+0x6>
    7ada:	00 d0       	rcall	.+0      	; 0x7adc <readAccelXYZ+0x8>
    7adc:	cd b7       	in	r28, 0x3d	; 61
    7ade:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[6];

	if(useAccel == USE_MMAX7455L) {
    7ae0:	80 91 2b 04 	lds	r24, 0x042B
    7ae4:	88 23       	and	r24, r24
    7ae6:	c1 f0       	breq	.+48     	; 0x7b18 <readAccelXYZ+0x44>
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    7ae8:	81 30       	cpi	r24, 0x01	; 1
    7aea:	09 f4       	brne	.+2      	; 0x7aee <readAccelXYZ+0x1a>
    7aec:	ad c0       	rjmp	.+346    	; 0x7c48 <readAccelXYZ+0x174>
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else {

		accX = 0;
    7aee:	10 92 2d 04 	sts	0x042D, r1
    7af2:	10 92 2c 04 	sts	0x042C, r1
		accY = 0;
    7af6:	10 92 2f 04 	sts	0x042F, r1
    7afa:	10 92 2e 04 	sts	0x042E, r1
		accZ = 0;
    7afe:	10 92 31 04 	sts	0x0431, r1
    7b02:	10 92 30 04 	sts	0x0430, r1

	}

}
    7b06:	26 96       	adiw	r28, 0x06	; 6
    7b08:	0f b6       	in	r0, 0x3f	; 63
    7b0a:	f8 94       	cli
    7b0c:	de bf       	out	0x3e, r29	; 62
    7b0e:	0f be       	out	0x3f, r0	; 63
    7b10:	cd bf       	out	0x3d, r28	; 61
    7b12:	cf 91       	pop	r28
    7b14:	df 91       	pop	r29
    7b16:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    7b18:	80 91 14 02 	lds	r24, 0x0214
    7b1c:	0e 94 06 1c 	call	0x380c	; 0x380c <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    7b20:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
		i2c_write(0x32);											// sends address to read from (X LSB)
    7b22:	0e 94 81 1c 	call	0x3902	; 0x3902 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    7b26:	80 91 14 02 	lds	r24, 0x0214
    7b2a:	8f 5f       	subi	r24, 0xFF	; 255
    7b2c:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <i2c_rep_start>

		for(i=0; i<5; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    7b30:	0e 94 93 1c 	call	0x3926	; 0x3926 <i2c_readAck>
    7b34:	89 83       	std	Y+1, r24	; 0x01
    7b36:	0e 94 93 1c 	call	0x3926	; 0x3926 <i2c_readAck>
    7b3a:	8a 83       	std	Y+2, r24	; 0x02
    7b3c:	0e 94 93 1c 	call	0x3926	; 0x3926 <i2c_readAck>
    7b40:	8b 83       	std	Y+3, r24	; 0x03
    7b42:	0e 94 93 1c 	call	0x3926	; 0x3926 <i2c_readAck>
    7b46:	8c 83       	std	Y+4, r24	; 0x04
    7b48:	0e 94 93 1c 	call	0x3926	; 0x3926 <i2c_readAck>
    7b4c:	8d 83       	std	Y+5, r24	; 0x05
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    7b4e:	0e 94 9d 1c 	call	0x393a	; 0x393a <i2c_readNak>
    7b52:	8e 83       	std	Y+6, r24	; 0x06
		i2c_stop();													// set stop conditon = release bus
    7b54:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    7b58:	80 91 5e 0b 	lds	r24, 0x0B5E
    7b5c:	88 23       	and	r24, r24
    7b5e:	89 f1       	breq	.+98     	; 0x7bc2 <readAccelXYZ+0xee>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    7b60:	8a 81       	ldd	r24, Y+2	; 0x02
    7b62:	99 27       	eor	r25, r25
    7b64:	87 fd       	sbrc	r24, 7
    7b66:	90 95       	com	r25
    7b68:	98 2f       	mov	r25, r24
    7b6a:	88 27       	eor	r24, r24
    7b6c:	29 81       	ldd	r18, Y+1	; 0x01
    7b6e:	33 27       	eor	r19, r19
    7b70:	27 fd       	sbrc	r18, 7
    7b72:	30 95       	com	r19
    7b74:	82 2b       	or	r24, r18
    7b76:	93 2b       	or	r25, r19
    7b78:	90 93 2d 04 	sts	0x042D, r25
    7b7c:	80 93 2c 04 	sts	0x042C, r24
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    7b80:	8c 81       	ldd	r24, Y+4	; 0x04
    7b82:	99 27       	eor	r25, r25
    7b84:	87 fd       	sbrc	r24, 7
    7b86:	90 95       	com	r25
    7b88:	98 2f       	mov	r25, r24
    7b8a:	88 27       	eor	r24, r24
    7b8c:	2b 81       	ldd	r18, Y+3	; 0x03
    7b8e:	33 27       	eor	r19, r19
    7b90:	27 fd       	sbrc	r18, 7
    7b92:	30 95       	com	r19
    7b94:	82 2b       	or	r24, r18
    7b96:	93 2b       	or	r25, r19
    7b98:	90 93 2f 04 	sts	0x042F, r25
    7b9c:	80 93 2e 04 	sts	0x042E, r24
			accZ = ((signed int)buff[5]<<8)|buff[4];    			// Z axis
    7ba0:	8e 81       	ldd	r24, Y+6	; 0x06
    7ba2:	99 27       	eor	r25, r25
    7ba4:	87 fd       	sbrc	r24, 7
    7ba6:	90 95       	com	r25
    7ba8:	98 2f       	mov	r25, r24
    7baa:	88 27       	eor	r24, r24
    7bac:	2d 81       	ldd	r18, Y+5	; 0x05
    7bae:	33 27       	eor	r19, r19
    7bb0:	27 fd       	sbrc	r18, 7
    7bb2:	30 95       	com	r19
    7bb4:	82 2b       	or	r24, r18
    7bb6:	93 2b       	or	r25, r19
    7bb8:	90 93 31 04 	sts	0x0431, r25
    7bbc:	80 93 30 04 	sts	0x0430, r24
    7bc0:	a2 cf       	rjmp	.-188    	; 0x7b06 <readAccelXYZ+0x32>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    7bc2:	8a 81       	ldd	r24, Y+2	; 0x02
    7bc4:	99 27       	eor	r25, r25
    7bc6:	87 fd       	sbrc	r24, 7
    7bc8:	90 95       	com	r25
    7bca:	98 2f       	mov	r25, r24
    7bcc:	88 27       	eor	r24, r24
    7bce:	29 81       	ldd	r18, Y+1	; 0x01
    7bd0:	33 27       	eor	r19, r19
    7bd2:	27 fd       	sbrc	r18, 7
    7bd4:	30 95       	com	r19
    7bd6:	82 2b       	or	r24, r18
    7bd8:	93 2b       	or	r25, r19
    7bda:	20 91 32 04 	lds	r18, 0x0432
    7bde:	30 91 33 04 	lds	r19, 0x0433
    7be2:	82 1b       	sub	r24, r18
    7be4:	93 0b       	sbc	r25, r19
    7be6:	90 93 2d 04 	sts	0x042D, r25
    7bea:	80 93 2c 04 	sts	0x042C, r24
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    7bee:	8c 81       	ldd	r24, Y+4	; 0x04
    7bf0:	99 27       	eor	r25, r25
    7bf2:	87 fd       	sbrc	r24, 7
    7bf4:	90 95       	com	r25
    7bf6:	98 2f       	mov	r25, r24
    7bf8:	88 27       	eor	r24, r24
    7bfa:	2b 81       	ldd	r18, Y+3	; 0x03
    7bfc:	33 27       	eor	r19, r19
    7bfe:	27 fd       	sbrc	r18, 7
    7c00:	30 95       	com	r19
    7c02:	82 2b       	or	r24, r18
    7c04:	93 2b       	or	r25, r19
    7c06:	20 91 34 04 	lds	r18, 0x0434
    7c0a:	30 91 35 04 	lds	r19, 0x0435
    7c0e:	82 1b       	sub	r24, r18
    7c10:	93 0b       	sbc	r25, r19
    7c12:	90 93 2f 04 	sts	0x042F, r25
    7c16:	80 93 2e 04 	sts	0x042E, r24
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
    7c1a:	8e 81       	ldd	r24, Y+6	; 0x06
    7c1c:	99 27       	eor	r25, r25
    7c1e:	87 fd       	sbrc	r24, 7
    7c20:	90 95       	com	r25
    7c22:	98 2f       	mov	r25, r24
    7c24:	88 27       	eor	r24, r24
    7c26:	2d 81       	ldd	r18, Y+5	; 0x05
    7c28:	33 27       	eor	r19, r19
    7c2a:	27 fd       	sbrc	r18, 7
    7c2c:	30 95       	com	r19
    7c2e:	82 2b       	or	r24, r18
    7c30:	93 2b       	or	r25, r19
    7c32:	20 91 36 04 	lds	r18, 0x0436
    7c36:	30 91 37 04 	lds	r19, 0x0437
    7c3a:	82 1b       	sub	r24, r18
    7c3c:	93 0b       	sbc	r25, r19
    7c3e:	90 93 31 04 	sts	0x0431, r25
    7c42:	80 93 30 04 	sts	0x0430, r24
    7c46:	5f cf       	rjmp	.-322    	; 0x7b06 <readAccelXYZ+0x32>
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    7c48:	80 91 14 02 	lds	r24, 0x0214
    7c4c:	0e 94 06 1c 	call	0x380c	; 0x380c <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    7c50:	82 e3       	ldi	r24, 0x32	; 50
    7c52:	67 cf       	rjmp	.-306    	; 0x7b22 <readAccelXYZ+0x4e>

00007c54 <calibrateSensors>:

#include "sensors.h"


void calibrateSensors() {
    7c54:	cf 93       	push	r28
    7c56:	df 93       	push	r29

	unsigned int i=0;

	pwm_red = 0;
    7c58:	10 92 0c 02 	sts	0x020C, r1
	pwm_green = 0;
    7c5c:	10 92 0d 02 	sts	0x020D, r1
	pwm_blue = 0;
    7c60:	10 92 0e 02 	sts	0x020E, r1
	updateRedLed(pwm_red);
    7c64:	80 e0       	ldi	r24, 0x00	; 0
    7c66:	0e 94 32 3b 	call	0x7664	; 0x7664 <updateRedLed>
	updateGreenLed(pwm_green);
    7c6a:	80 91 0d 02 	lds	r24, 0x020D
    7c6e:	0e 94 46 3b 	call	0x768c	; 0x768c <updateGreenLed>
	updateBlueLed(pwm_blue);
    7c72:	80 91 0e 02 	lds	r24, 0x020E
    7c76:	0e 94 5a 3b 	call	0x76b4	; 0x76b4 <updateBlueLed>

	calibrationCycle = 0;
    7c7a:	10 92 4e 04 	sts	0x044E, r1
    7c7e:	10 92 4d 04 	sts	0x044D, r1
	startCalibration = 1;
    7c82:	81 e0       	ldi	r24, 0x01	; 1
    7c84:	80 93 5e 0b 	sts	0x0B5E, r24
					}
					accOffsetXSum = 0;
					accOffsetYSum = 0;
					accOffsetZSum = 0;

					calibrationCycle++;
    7c88:	c1 e0       	ldi	r28, 0x01	; 1
    7c8a:	d0 e0       	ldi	r29, 0x00	; 0
	calibrationCycle = 0;
	startCalibration = 1;

	while(startCalibration) {

		readAccelXYZ();
    7c8c:	0e 94 6a 3d 	call	0x7ad4	; 0x7ad4 <readAccelXYZ>

		if(calibrationCycle<=CALIBRATION_CYCLES) {
    7c90:	20 91 4d 04 	lds	r18, 0x044D
    7c94:	30 91 4e 04 	lds	r19, 0x044E
    7c98:	21 31       	cpi	r18, 0x11	; 17
    7c9a:	31 05       	cpc	r19, r1
    7c9c:	0c f4       	brge	.+2      	; 0x7ca0 <calibrateSensors+0x4c>
    7c9e:	35 c1       	rjmp	.+618    	; 0x7f0a <calibrateSensors+0x2b6>
			continue;

		} else if(calibrationCycle > CALIBRATION_CYCLES) {

			for(i=0;i<12;i++) {
				proximityOffset[i] = proximitySum[i]>>4;
    7ca0:	80 91 89 02 	lds	r24, 0x0289
    7ca4:	90 91 8a 02 	lds	r25, 0x028A
    7ca8:	a0 91 8b 02 	lds	r26, 0x028B
    7cac:	b0 91 8c 02 	lds	r27, 0x028C
    7cb0:	54 e0       	ldi	r21, 0x04	; 4
    7cb2:	b6 95       	lsr	r27
    7cb4:	a7 95       	ror	r26
    7cb6:	97 95       	ror	r25
    7cb8:	87 95       	ror	r24
    7cba:	5a 95       	dec	r21
    7cbc:	d1 f7       	brne	.-12     	; 0x7cb2 <calibrateSensors+0x5e>
    7cbe:	90 93 72 02 	sts	0x0272, r25
    7cc2:	80 93 71 02 	sts	0x0271, r24
    7cc6:	80 91 8d 02 	lds	r24, 0x028D
    7cca:	90 91 8e 02 	lds	r25, 0x028E
    7cce:	a0 91 8f 02 	lds	r26, 0x028F
    7cd2:	b0 91 90 02 	lds	r27, 0x0290
    7cd6:	44 e0       	ldi	r20, 0x04	; 4
    7cd8:	b6 95       	lsr	r27
    7cda:	a7 95       	ror	r26
    7cdc:	97 95       	ror	r25
    7cde:	87 95       	ror	r24
    7ce0:	4a 95       	dec	r20
    7ce2:	d1 f7       	brne	.-12     	; 0x7cd8 <calibrateSensors+0x84>
    7ce4:	90 93 74 02 	sts	0x0274, r25
    7ce8:	80 93 73 02 	sts	0x0273, r24
    7cec:	80 91 91 02 	lds	r24, 0x0291
    7cf0:	90 91 92 02 	lds	r25, 0x0292
    7cf4:	a0 91 93 02 	lds	r26, 0x0293
    7cf8:	b0 91 94 02 	lds	r27, 0x0294
    7cfc:	34 e0       	ldi	r19, 0x04	; 4
    7cfe:	b6 95       	lsr	r27
    7d00:	a7 95       	ror	r26
    7d02:	97 95       	ror	r25
    7d04:	87 95       	ror	r24
    7d06:	3a 95       	dec	r19
    7d08:	d1 f7       	brne	.-12     	; 0x7cfe <calibrateSensors+0xaa>
    7d0a:	90 93 76 02 	sts	0x0276, r25
    7d0e:	80 93 75 02 	sts	0x0275, r24
    7d12:	80 91 95 02 	lds	r24, 0x0295
    7d16:	90 91 96 02 	lds	r25, 0x0296
    7d1a:	a0 91 97 02 	lds	r26, 0x0297
    7d1e:	b0 91 98 02 	lds	r27, 0x0298
    7d22:	24 e0       	ldi	r18, 0x04	; 4
    7d24:	b6 95       	lsr	r27
    7d26:	a7 95       	ror	r26
    7d28:	97 95       	ror	r25
    7d2a:	87 95       	ror	r24
    7d2c:	2a 95       	dec	r18
    7d2e:	d1 f7       	brne	.-12     	; 0x7d24 <calibrateSensors+0xd0>
    7d30:	90 93 78 02 	sts	0x0278, r25
    7d34:	80 93 77 02 	sts	0x0277, r24
    7d38:	80 91 99 02 	lds	r24, 0x0299
    7d3c:	90 91 9a 02 	lds	r25, 0x029A
    7d40:	a0 91 9b 02 	lds	r26, 0x029B
    7d44:	b0 91 9c 02 	lds	r27, 0x029C
    7d48:	f4 e0       	ldi	r31, 0x04	; 4
    7d4a:	b6 95       	lsr	r27
    7d4c:	a7 95       	ror	r26
    7d4e:	97 95       	ror	r25
    7d50:	87 95       	ror	r24
    7d52:	fa 95       	dec	r31
    7d54:	d1 f7       	brne	.-12     	; 0x7d4a <calibrateSensors+0xf6>
    7d56:	90 93 7a 02 	sts	0x027A, r25
    7d5a:	80 93 79 02 	sts	0x0279, r24
    7d5e:	80 91 9d 02 	lds	r24, 0x029D
    7d62:	90 91 9e 02 	lds	r25, 0x029E
    7d66:	a0 91 9f 02 	lds	r26, 0x029F
    7d6a:	b0 91 a0 02 	lds	r27, 0x02A0
    7d6e:	e4 e0       	ldi	r30, 0x04	; 4
    7d70:	b6 95       	lsr	r27
    7d72:	a7 95       	ror	r26
    7d74:	97 95       	ror	r25
    7d76:	87 95       	ror	r24
    7d78:	ea 95       	dec	r30
    7d7a:	d1 f7       	brne	.-12     	; 0x7d70 <calibrateSensors+0x11c>
    7d7c:	90 93 7c 02 	sts	0x027C, r25
    7d80:	80 93 7b 02 	sts	0x027B, r24
    7d84:	80 91 a1 02 	lds	r24, 0x02A1
    7d88:	90 91 a2 02 	lds	r25, 0x02A2
    7d8c:	a0 91 a3 02 	lds	r26, 0x02A3
    7d90:	b0 91 a4 02 	lds	r27, 0x02A4
    7d94:	74 e0       	ldi	r23, 0x04	; 4
    7d96:	b6 95       	lsr	r27
    7d98:	a7 95       	ror	r26
    7d9a:	97 95       	ror	r25
    7d9c:	87 95       	ror	r24
    7d9e:	7a 95       	dec	r23
    7da0:	d1 f7       	brne	.-12     	; 0x7d96 <calibrateSensors+0x142>
    7da2:	90 93 7e 02 	sts	0x027E, r25
    7da6:	80 93 7d 02 	sts	0x027D, r24
    7daa:	80 91 a5 02 	lds	r24, 0x02A5
    7dae:	90 91 a6 02 	lds	r25, 0x02A6
    7db2:	a0 91 a7 02 	lds	r26, 0x02A7
    7db6:	b0 91 a8 02 	lds	r27, 0x02A8
    7dba:	64 e0       	ldi	r22, 0x04	; 4
    7dbc:	b6 95       	lsr	r27
    7dbe:	a7 95       	ror	r26
    7dc0:	97 95       	ror	r25
    7dc2:	87 95       	ror	r24
    7dc4:	6a 95       	dec	r22
    7dc6:	d1 f7       	brne	.-12     	; 0x7dbc <calibrateSensors+0x168>
    7dc8:	90 93 80 02 	sts	0x0280, r25
    7dcc:	80 93 7f 02 	sts	0x027F, r24
    7dd0:	80 91 ad 02 	lds	r24, 0x02AD
    7dd4:	90 91 ae 02 	lds	r25, 0x02AE
    7dd8:	a0 91 af 02 	lds	r26, 0x02AF
    7ddc:	b0 91 b0 02 	lds	r27, 0x02B0
    7de0:	54 e0       	ldi	r21, 0x04	; 4
    7de2:	b6 95       	lsr	r27
    7de4:	a7 95       	ror	r26
    7de6:	97 95       	ror	r25
    7de8:	87 95       	ror	r24
    7dea:	5a 95       	dec	r21
    7dec:	d1 f7       	brne	.-12     	; 0x7de2 <calibrateSensors+0x18e>
    7dee:	9c 01       	movw	r18, r24
    7df0:	80 91 b1 02 	lds	r24, 0x02B1
    7df4:	90 91 b2 02 	lds	r25, 0x02B2
    7df8:	a0 91 b3 02 	lds	r26, 0x02B3
    7dfc:	b0 91 b4 02 	lds	r27, 0x02B4
    7e00:	44 e0       	ldi	r20, 0x04	; 4
    7e02:	b6 95       	lsr	r27
    7e04:	a7 95       	ror	r26
    7e06:	97 95       	ror	r25
    7e08:	87 95       	ror	r24
    7e0a:	4a 95       	dec	r20
    7e0c:	d1 f7       	brne	.-12     	; 0x7e02 <calibrateSensors+0x1ae>
    7e0e:	bc 01       	movw	r22, r24
    7e10:	80 91 b5 02 	lds	r24, 0x02B5
    7e14:	90 91 b6 02 	lds	r25, 0x02B6
    7e18:	a0 91 b7 02 	lds	r26, 0x02B7
    7e1c:	b0 91 b8 02 	lds	r27, 0x02B8
    7e20:	f4 e0       	ldi	r31, 0x04	; 4
    7e22:	b6 95       	lsr	r27
    7e24:	a7 95       	ror	r26
    7e26:	97 95       	ror	r25
    7e28:	87 95       	ror	r24
    7e2a:	fa 95       	dec	r31
    7e2c:	d1 f7       	brne	.-12     	; 0x7e22 <calibrateSensors+0x1ce>
    7e2e:	ac 01       	movw	r20, r24
    7e30:	80 91 a9 02 	lds	r24, 0x02A9
    7e34:	90 91 aa 02 	lds	r25, 0x02AA
    7e38:	a0 91 ab 02 	lds	r26, 0x02AB
    7e3c:	b0 91 ac 02 	lds	r27, 0x02AC
    7e40:	e4 e0       	ldi	r30, 0x04	; 4
    7e42:	b6 95       	lsr	r27
    7e44:	a7 95       	ror	r26
    7e46:	97 95       	ror	r25
    7e48:	87 95       	ror	r24
    7e4a:	ea 95       	dec	r30
    7e4c:	d1 f7       	brne	.-12     	; 0x7e42 <calibrateSensors+0x1ee>
			}

			for(i=8; i<12; i++) {
				proximityOffset[i] -= 512;	// move the "0" to 512 (values around 512)
    7e4e:	80 50       	subi	r24, 0x00	; 0
    7e50:	92 40       	sbci	r25, 0x02	; 2
    7e52:	90 93 82 02 	sts	0x0282, r25
    7e56:	80 93 81 02 	sts	0x0281, r24
    7e5a:	20 50       	subi	r18, 0x00	; 0
    7e5c:	32 40       	sbci	r19, 0x02	; 2
    7e5e:	30 93 84 02 	sts	0x0284, r19
    7e62:	20 93 83 02 	sts	0x0283, r18
    7e66:	60 50       	subi	r22, 0x00	; 0
    7e68:	72 40       	sbci	r23, 0x02	; 2
    7e6a:	70 93 86 02 	sts	0x0286, r23
    7e6e:	60 93 85 02 	sts	0x0285, r22
    7e72:	40 50       	subi	r20, 0x00	; 0
    7e74:	52 40       	sbci	r21, 0x02	; 2
    7e76:	50 93 88 02 	sts	0x0288, r21
    7e7a:	40 93 87 02 	sts	0x0287, r20
			}

			accOffsetX = accOffsetXSum>>4;
    7e7e:	80 91 38 04 	lds	r24, 0x0438
    7e82:	90 91 39 04 	lds	r25, 0x0439
    7e86:	95 95       	asr	r25
    7e88:	87 95       	ror	r24
    7e8a:	95 95       	asr	r25
    7e8c:	87 95       	ror	r24
    7e8e:	95 95       	asr	r25
    7e90:	87 95       	ror	r24
    7e92:	95 95       	asr	r25
    7e94:	87 95       	ror	r24
    7e96:	90 93 33 04 	sts	0x0433, r25
    7e9a:	80 93 32 04 	sts	0x0432, r24
			accOffsetY = accOffsetYSum>>4;
    7e9e:	80 91 3a 04 	lds	r24, 0x043A
    7ea2:	90 91 3b 04 	lds	r25, 0x043B
    7ea6:	95 95       	asr	r25
    7ea8:	87 95       	ror	r24
    7eaa:	95 95       	asr	r25
    7eac:	87 95       	ror	r24
    7eae:	95 95       	asr	r25
    7eb0:	87 95       	ror	r24
    7eb2:	95 95       	asr	r25
    7eb4:	87 95       	ror	r24
    7eb6:	90 93 35 04 	sts	0x0435, r25
    7eba:	80 93 34 04 	sts	0x0434, r24
			accOffsetZ = accOffsetZSum>>4;
    7ebe:	80 91 3c 04 	lds	r24, 0x043C
    7ec2:	90 91 3d 04 	lds	r25, 0x043D
    7ec6:	95 95       	asr	r25
    7ec8:	87 95       	ror	r24
    7eca:	95 95       	asr	r25
    7ecc:	87 95       	ror	r24
    7ece:	95 95       	asr	r25
    7ed0:	87 95       	ror	r24
    7ed2:	95 95       	asr	r25
    7ed4:	87 95       	ror	r24
    7ed6:	90 93 37 04 	sts	0x0437, r25
    7eda:	80 93 36 04 	sts	0x0436, r24

			//proxUpdated = 0;
			//if(proxUpdated) {	
				startCalibration = 0;					
    7ede:	10 92 5e 0b 	sts	0x0B5E, r1

		}

	}

	pwm_red = 255;
    7ee2:	8f ef       	ldi	r24, 0xFF	; 255
    7ee4:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    7ee8:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    7eec:	80 93 0e 02 	sts	0x020E, r24
	updateRedLed(pwm_red);
    7ef0:	0e 94 32 3b 	call	0x7664	; 0x7664 <updateRedLed>
	updateGreenLed(pwm_green);
    7ef4:	80 91 0d 02 	lds	r24, 0x020D
    7ef8:	0e 94 46 3b 	call	0x768c	; 0x768c <updateGreenLed>
	updateBlueLed(pwm_blue);
    7efc:	80 91 0e 02 	lds	r24, 0x020E
    7f00:	0e 94 5a 3b 	call	0x76b4	; 0x76b4 <updateBlueLed>

}
    7f04:	df 91       	pop	r29
    7f06:	cf 91       	pop	r28
    7f08:	08 95       	ret

		readAccelXYZ();

		if(calibrationCycle<=CALIBRATION_CYCLES) {

			if(proxUpdated) {
    7f0a:	80 91 c0 02 	lds	r24, 0x02C0
    7f0e:	88 23       	and	r24, r24
    7f10:	09 f4       	brne	.+2      	; 0x7f14 <calibrateSensors+0x2c0>
    7f12:	86 c1       	rjmp	.+780    	; 0x8220 <calibrateSensors+0x5cc>

				proxUpdated = 0;
    7f14:	10 92 c0 02 	sts	0x02C0, r1

				if(calibrationCycle==0) {		// reset all variables
    7f18:	21 15       	cp	r18, r1
    7f1a:	31 05       	cpc	r19, r1
    7f1c:	09 f4       	brne	.+2      	; 0x7f20 <calibrateSensors+0x2cc>
    7f1e:	86 c1       	rjmp	.+780    	; 0x822c <calibrateSensors+0x5d8>
												// "proximityResult" hasn't the offset reset to 0. so we start the actual calibration
												// the next time
				}

				for (i=0;i<12;i++) {
					proximitySum[i] += proximityResult[i];
    7f20:	80 91 59 02 	lds	r24, 0x0259
    7f24:	90 91 5a 02 	lds	r25, 0x025A
    7f28:	aa 27       	eor	r26, r26
    7f2a:	97 fd       	sbrc	r25, 7
    7f2c:	a0 95       	com	r26
    7f2e:	ba 2f       	mov	r27, r26
    7f30:	40 91 89 02 	lds	r20, 0x0289
    7f34:	50 91 8a 02 	lds	r21, 0x028A
    7f38:	60 91 8b 02 	lds	r22, 0x028B
    7f3c:	70 91 8c 02 	lds	r23, 0x028C
    7f40:	84 0f       	add	r24, r20
    7f42:	95 1f       	adc	r25, r21
    7f44:	a6 1f       	adc	r26, r22
    7f46:	b7 1f       	adc	r27, r23
    7f48:	80 93 89 02 	sts	0x0289, r24
    7f4c:	90 93 8a 02 	sts	0x028A, r25
    7f50:	a0 93 8b 02 	sts	0x028B, r26
    7f54:	b0 93 8c 02 	sts	0x028C, r27
    7f58:	80 91 5b 02 	lds	r24, 0x025B
    7f5c:	90 91 5c 02 	lds	r25, 0x025C
    7f60:	aa 27       	eor	r26, r26
    7f62:	97 fd       	sbrc	r25, 7
    7f64:	a0 95       	com	r26
    7f66:	ba 2f       	mov	r27, r26
    7f68:	40 91 8d 02 	lds	r20, 0x028D
    7f6c:	50 91 8e 02 	lds	r21, 0x028E
    7f70:	60 91 8f 02 	lds	r22, 0x028F
    7f74:	70 91 90 02 	lds	r23, 0x0290
    7f78:	84 0f       	add	r24, r20
    7f7a:	95 1f       	adc	r25, r21
    7f7c:	a6 1f       	adc	r26, r22
    7f7e:	b7 1f       	adc	r27, r23
    7f80:	80 93 8d 02 	sts	0x028D, r24
    7f84:	90 93 8e 02 	sts	0x028E, r25
    7f88:	a0 93 8f 02 	sts	0x028F, r26
    7f8c:	b0 93 90 02 	sts	0x0290, r27
    7f90:	80 91 5d 02 	lds	r24, 0x025D
    7f94:	90 91 5e 02 	lds	r25, 0x025E
    7f98:	aa 27       	eor	r26, r26
    7f9a:	97 fd       	sbrc	r25, 7
    7f9c:	a0 95       	com	r26
    7f9e:	ba 2f       	mov	r27, r26
    7fa0:	40 91 91 02 	lds	r20, 0x0291
    7fa4:	50 91 92 02 	lds	r21, 0x0292
    7fa8:	60 91 93 02 	lds	r22, 0x0293
    7fac:	70 91 94 02 	lds	r23, 0x0294
    7fb0:	84 0f       	add	r24, r20
    7fb2:	95 1f       	adc	r25, r21
    7fb4:	a6 1f       	adc	r26, r22
    7fb6:	b7 1f       	adc	r27, r23
    7fb8:	80 93 91 02 	sts	0x0291, r24
    7fbc:	90 93 92 02 	sts	0x0292, r25
    7fc0:	a0 93 93 02 	sts	0x0293, r26
    7fc4:	b0 93 94 02 	sts	0x0294, r27
    7fc8:	80 91 5f 02 	lds	r24, 0x025F
    7fcc:	90 91 60 02 	lds	r25, 0x0260
    7fd0:	aa 27       	eor	r26, r26
    7fd2:	97 fd       	sbrc	r25, 7
    7fd4:	a0 95       	com	r26
    7fd6:	ba 2f       	mov	r27, r26
    7fd8:	40 91 95 02 	lds	r20, 0x0295
    7fdc:	50 91 96 02 	lds	r21, 0x0296
    7fe0:	60 91 97 02 	lds	r22, 0x0297
    7fe4:	70 91 98 02 	lds	r23, 0x0298
    7fe8:	84 0f       	add	r24, r20
    7fea:	95 1f       	adc	r25, r21
    7fec:	a6 1f       	adc	r26, r22
    7fee:	b7 1f       	adc	r27, r23
    7ff0:	80 93 95 02 	sts	0x0295, r24
    7ff4:	90 93 96 02 	sts	0x0296, r25
    7ff8:	a0 93 97 02 	sts	0x0297, r26
    7ffc:	b0 93 98 02 	sts	0x0298, r27
    8000:	80 91 61 02 	lds	r24, 0x0261
    8004:	90 91 62 02 	lds	r25, 0x0262
    8008:	aa 27       	eor	r26, r26
    800a:	97 fd       	sbrc	r25, 7
    800c:	a0 95       	com	r26
    800e:	ba 2f       	mov	r27, r26
    8010:	40 91 99 02 	lds	r20, 0x0299
    8014:	50 91 9a 02 	lds	r21, 0x029A
    8018:	60 91 9b 02 	lds	r22, 0x029B
    801c:	70 91 9c 02 	lds	r23, 0x029C
    8020:	84 0f       	add	r24, r20
    8022:	95 1f       	adc	r25, r21
    8024:	a6 1f       	adc	r26, r22
    8026:	b7 1f       	adc	r27, r23
    8028:	80 93 99 02 	sts	0x0299, r24
    802c:	90 93 9a 02 	sts	0x029A, r25
    8030:	a0 93 9b 02 	sts	0x029B, r26
    8034:	b0 93 9c 02 	sts	0x029C, r27
    8038:	80 91 63 02 	lds	r24, 0x0263
    803c:	90 91 64 02 	lds	r25, 0x0264
    8040:	aa 27       	eor	r26, r26
    8042:	97 fd       	sbrc	r25, 7
    8044:	a0 95       	com	r26
    8046:	ba 2f       	mov	r27, r26
    8048:	40 91 9d 02 	lds	r20, 0x029D
    804c:	50 91 9e 02 	lds	r21, 0x029E
    8050:	60 91 9f 02 	lds	r22, 0x029F
    8054:	70 91 a0 02 	lds	r23, 0x02A0
    8058:	84 0f       	add	r24, r20
    805a:	95 1f       	adc	r25, r21
    805c:	a6 1f       	adc	r26, r22
    805e:	b7 1f       	adc	r27, r23
    8060:	80 93 9d 02 	sts	0x029D, r24
    8064:	90 93 9e 02 	sts	0x029E, r25
    8068:	a0 93 9f 02 	sts	0x029F, r26
    806c:	b0 93 a0 02 	sts	0x02A0, r27
    8070:	80 91 65 02 	lds	r24, 0x0265
    8074:	90 91 66 02 	lds	r25, 0x0266
    8078:	aa 27       	eor	r26, r26
    807a:	97 fd       	sbrc	r25, 7
    807c:	a0 95       	com	r26
    807e:	ba 2f       	mov	r27, r26
    8080:	40 91 a1 02 	lds	r20, 0x02A1
    8084:	50 91 a2 02 	lds	r21, 0x02A2
    8088:	60 91 a3 02 	lds	r22, 0x02A3
    808c:	70 91 a4 02 	lds	r23, 0x02A4
    8090:	84 0f       	add	r24, r20
    8092:	95 1f       	adc	r25, r21
    8094:	a6 1f       	adc	r26, r22
    8096:	b7 1f       	adc	r27, r23
    8098:	80 93 a1 02 	sts	0x02A1, r24
    809c:	90 93 a2 02 	sts	0x02A2, r25
    80a0:	a0 93 a3 02 	sts	0x02A3, r26
    80a4:	b0 93 a4 02 	sts	0x02A4, r27
    80a8:	80 91 67 02 	lds	r24, 0x0267
    80ac:	90 91 68 02 	lds	r25, 0x0268
    80b0:	aa 27       	eor	r26, r26
    80b2:	97 fd       	sbrc	r25, 7
    80b4:	a0 95       	com	r26
    80b6:	ba 2f       	mov	r27, r26
    80b8:	40 91 a5 02 	lds	r20, 0x02A5
    80bc:	50 91 a6 02 	lds	r21, 0x02A6
    80c0:	60 91 a7 02 	lds	r22, 0x02A7
    80c4:	70 91 a8 02 	lds	r23, 0x02A8
    80c8:	84 0f       	add	r24, r20
    80ca:	95 1f       	adc	r25, r21
    80cc:	a6 1f       	adc	r26, r22
    80ce:	b7 1f       	adc	r27, r23
    80d0:	80 93 a5 02 	sts	0x02A5, r24
    80d4:	90 93 a6 02 	sts	0x02A6, r25
    80d8:	a0 93 a7 02 	sts	0x02A7, r26
    80dc:	b0 93 a8 02 	sts	0x02A8, r27
    80e0:	80 91 69 02 	lds	r24, 0x0269
    80e4:	90 91 6a 02 	lds	r25, 0x026A
    80e8:	aa 27       	eor	r26, r26
    80ea:	97 fd       	sbrc	r25, 7
    80ec:	a0 95       	com	r26
    80ee:	ba 2f       	mov	r27, r26
    80f0:	40 91 a9 02 	lds	r20, 0x02A9
    80f4:	50 91 aa 02 	lds	r21, 0x02AA
    80f8:	60 91 ab 02 	lds	r22, 0x02AB
    80fc:	70 91 ac 02 	lds	r23, 0x02AC
    8100:	84 0f       	add	r24, r20
    8102:	95 1f       	adc	r25, r21
    8104:	a6 1f       	adc	r26, r22
    8106:	b7 1f       	adc	r27, r23
    8108:	80 93 a9 02 	sts	0x02A9, r24
    810c:	90 93 aa 02 	sts	0x02AA, r25
    8110:	a0 93 ab 02 	sts	0x02AB, r26
    8114:	b0 93 ac 02 	sts	0x02AC, r27
    8118:	80 91 6b 02 	lds	r24, 0x026B
    811c:	90 91 6c 02 	lds	r25, 0x026C
    8120:	aa 27       	eor	r26, r26
    8122:	97 fd       	sbrc	r25, 7
    8124:	a0 95       	com	r26
    8126:	ba 2f       	mov	r27, r26
    8128:	40 91 ad 02 	lds	r20, 0x02AD
    812c:	50 91 ae 02 	lds	r21, 0x02AE
    8130:	60 91 af 02 	lds	r22, 0x02AF
    8134:	70 91 b0 02 	lds	r23, 0x02B0
    8138:	84 0f       	add	r24, r20
    813a:	95 1f       	adc	r25, r21
    813c:	a6 1f       	adc	r26, r22
    813e:	b7 1f       	adc	r27, r23
    8140:	80 93 ad 02 	sts	0x02AD, r24
    8144:	90 93 ae 02 	sts	0x02AE, r25
    8148:	a0 93 af 02 	sts	0x02AF, r26
    814c:	b0 93 b0 02 	sts	0x02B0, r27
    8150:	80 91 6d 02 	lds	r24, 0x026D
    8154:	90 91 6e 02 	lds	r25, 0x026E
    8158:	aa 27       	eor	r26, r26
    815a:	97 fd       	sbrc	r25, 7
    815c:	a0 95       	com	r26
    815e:	ba 2f       	mov	r27, r26
    8160:	40 91 b1 02 	lds	r20, 0x02B1
    8164:	50 91 b2 02 	lds	r21, 0x02B2
    8168:	60 91 b3 02 	lds	r22, 0x02B3
    816c:	70 91 b4 02 	lds	r23, 0x02B4
    8170:	84 0f       	add	r24, r20
    8172:	95 1f       	adc	r25, r21
    8174:	a6 1f       	adc	r26, r22
    8176:	b7 1f       	adc	r27, r23
    8178:	80 93 b1 02 	sts	0x02B1, r24
    817c:	90 93 b2 02 	sts	0x02B2, r25
    8180:	a0 93 b3 02 	sts	0x02B3, r26
    8184:	b0 93 b4 02 	sts	0x02B4, r27
    8188:	80 91 6f 02 	lds	r24, 0x026F
    818c:	90 91 70 02 	lds	r25, 0x0270
    8190:	aa 27       	eor	r26, r26
    8192:	97 fd       	sbrc	r25, 7
    8194:	a0 95       	com	r26
    8196:	ba 2f       	mov	r27, r26
    8198:	40 91 b5 02 	lds	r20, 0x02B5
    819c:	50 91 b6 02 	lds	r21, 0x02B6
    81a0:	60 91 b7 02 	lds	r22, 0x02B7
    81a4:	70 91 b8 02 	lds	r23, 0x02B8
    81a8:	84 0f       	add	r24, r20
    81aa:	95 1f       	adc	r25, r21
    81ac:	a6 1f       	adc	r26, r22
    81ae:	b7 1f       	adc	r27, r23
    81b0:	80 93 b5 02 	sts	0x02B5, r24
    81b4:	90 93 b6 02 	sts	0x02B6, r25
    81b8:	a0 93 b7 02 	sts	0x02B7, r26
    81bc:	b0 93 b8 02 	sts	0x02B8, r27
				}

				accOffsetXSum += accX;
    81c0:	80 91 38 04 	lds	r24, 0x0438
    81c4:	90 91 39 04 	lds	r25, 0x0439
    81c8:	40 91 2c 04 	lds	r20, 0x042C
    81cc:	50 91 2d 04 	lds	r21, 0x042D
    81d0:	84 0f       	add	r24, r20
    81d2:	95 1f       	adc	r25, r21
    81d4:	90 93 39 04 	sts	0x0439, r25
    81d8:	80 93 38 04 	sts	0x0438, r24
				accOffsetYSum += accY;
    81dc:	80 91 3a 04 	lds	r24, 0x043A
    81e0:	90 91 3b 04 	lds	r25, 0x043B
    81e4:	40 91 2e 04 	lds	r20, 0x042E
    81e8:	50 91 2f 04 	lds	r21, 0x042F
    81ec:	84 0f       	add	r24, r20
    81ee:	95 1f       	adc	r25, r21
    81f0:	90 93 3b 04 	sts	0x043B, r25
    81f4:	80 93 3a 04 	sts	0x043A, r24
				accOffsetZSum += accZ;
    81f8:	80 91 3c 04 	lds	r24, 0x043C
    81fc:	90 91 3d 04 	lds	r25, 0x043D
    8200:	40 91 30 04 	lds	r20, 0x0430
    8204:	50 91 31 04 	lds	r21, 0x0431
    8208:	84 0f       	add	r24, r20
    820a:	95 1f       	adc	r25, r21
    820c:	90 93 3d 04 	sts	0x043D, r25
    8210:	80 93 3c 04 	sts	0x043C, r24

				calibrationCycle++;
    8214:	2f 5f       	subi	r18, 0xFF	; 255
    8216:	3f 4f       	sbci	r19, 0xFF	; 255
    8218:	30 93 4e 04 	sts	0x044E, r19
    821c:	20 93 4d 04 	sts	0x044D, r18
    8220:	80 91 5e 0b 	lds	r24, 0x0B5E
	updateBlueLed(pwm_blue);

	calibrationCycle = 0;
	startCalibration = 1;

	while(startCalibration) {
    8224:	88 23       	and	r24, r24
    8226:	09 f0       	breq	.+2      	; 0x822a <calibrateSensors+0x5d6>
    8228:	31 cd       	rjmp	.-1438   	; 0x7c8c <calibrateSensors+0x38>
    822a:	5b ce       	rjmp	.-842    	; 0x7ee2 <calibrateSensors+0x28e>

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    822c:	10 92 89 02 	sts	0x0289, r1
    8230:	10 92 8a 02 	sts	0x028A, r1
    8234:	10 92 8b 02 	sts	0x028B, r1
    8238:	10 92 8c 02 	sts	0x028C, r1
						proximityOffset[i] = 0;
    823c:	10 92 72 02 	sts	0x0272, r1
    8240:	10 92 71 02 	sts	0x0271, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8244:	10 92 8d 02 	sts	0x028D, r1
    8248:	10 92 8e 02 	sts	0x028E, r1
    824c:	10 92 8f 02 	sts	0x028F, r1
    8250:	10 92 90 02 	sts	0x0290, r1
						proximityOffset[i] = 0;
    8254:	10 92 74 02 	sts	0x0274, r1
    8258:	10 92 73 02 	sts	0x0273, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    825c:	10 92 91 02 	sts	0x0291, r1
    8260:	10 92 92 02 	sts	0x0292, r1
    8264:	10 92 93 02 	sts	0x0293, r1
    8268:	10 92 94 02 	sts	0x0294, r1
						proximityOffset[i] = 0;
    826c:	10 92 76 02 	sts	0x0276, r1
    8270:	10 92 75 02 	sts	0x0275, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8274:	10 92 95 02 	sts	0x0295, r1
    8278:	10 92 96 02 	sts	0x0296, r1
    827c:	10 92 97 02 	sts	0x0297, r1
    8280:	10 92 98 02 	sts	0x0298, r1
						proximityOffset[i] = 0;
    8284:	10 92 78 02 	sts	0x0278, r1
    8288:	10 92 77 02 	sts	0x0277, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    828c:	10 92 99 02 	sts	0x0299, r1
    8290:	10 92 9a 02 	sts	0x029A, r1
    8294:	10 92 9b 02 	sts	0x029B, r1
    8298:	10 92 9c 02 	sts	0x029C, r1
						proximityOffset[i] = 0;
    829c:	10 92 7a 02 	sts	0x027A, r1
    82a0:	10 92 79 02 	sts	0x0279, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    82a4:	10 92 9d 02 	sts	0x029D, r1
    82a8:	10 92 9e 02 	sts	0x029E, r1
    82ac:	10 92 9f 02 	sts	0x029F, r1
    82b0:	10 92 a0 02 	sts	0x02A0, r1
						proximityOffset[i] = 0;
    82b4:	10 92 7c 02 	sts	0x027C, r1
    82b8:	10 92 7b 02 	sts	0x027B, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    82bc:	10 92 a1 02 	sts	0x02A1, r1
    82c0:	10 92 a2 02 	sts	0x02A2, r1
    82c4:	10 92 a3 02 	sts	0x02A3, r1
    82c8:	10 92 a4 02 	sts	0x02A4, r1
						proximityOffset[i] = 0;
    82cc:	10 92 7e 02 	sts	0x027E, r1
    82d0:	10 92 7d 02 	sts	0x027D, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    82d4:	10 92 a5 02 	sts	0x02A5, r1
    82d8:	10 92 a6 02 	sts	0x02A6, r1
    82dc:	10 92 a7 02 	sts	0x02A7, r1
    82e0:	10 92 a8 02 	sts	0x02A8, r1
						proximityOffset[i] = 0;
    82e4:	10 92 80 02 	sts	0x0280, r1
    82e8:	10 92 7f 02 	sts	0x027F, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    82ec:	10 92 a9 02 	sts	0x02A9, r1
    82f0:	10 92 aa 02 	sts	0x02AA, r1
    82f4:	10 92 ab 02 	sts	0x02AB, r1
    82f8:	10 92 ac 02 	sts	0x02AC, r1
						proximityOffset[i] = 0;
    82fc:	10 92 82 02 	sts	0x0282, r1
    8300:	10 92 81 02 	sts	0x0281, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8304:	10 92 ad 02 	sts	0x02AD, r1
    8308:	10 92 ae 02 	sts	0x02AE, r1
    830c:	10 92 af 02 	sts	0x02AF, r1
    8310:	10 92 b0 02 	sts	0x02B0, r1
						proximityOffset[i] = 0;
    8314:	10 92 84 02 	sts	0x0284, r1
    8318:	10 92 83 02 	sts	0x0283, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    831c:	10 92 b1 02 	sts	0x02B1, r1
    8320:	10 92 b2 02 	sts	0x02B2, r1
    8324:	10 92 b3 02 	sts	0x02B3, r1
    8328:	10 92 b4 02 	sts	0x02B4, r1
						proximityOffset[i] = 0;
    832c:	10 92 86 02 	sts	0x0286, r1
    8330:	10 92 85 02 	sts	0x0285, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8334:	10 92 b5 02 	sts	0x02B5, r1
    8338:	10 92 b6 02 	sts	0x02B6, r1
    833c:	10 92 b7 02 	sts	0x02B7, r1
    8340:	10 92 b8 02 	sts	0x02B8, r1
						proximityOffset[i] = 0;
    8344:	10 92 88 02 	sts	0x0288, r1
    8348:	10 92 87 02 	sts	0x0287, r1
					}
					accOffsetXSum = 0;
    834c:	10 92 39 04 	sts	0x0439, r1
    8350:	10 92 38 04 	sts	0x0438, r1
					accOffsetYSum = 0;
    8354:	10 92 3b 04 	sts	0x043B, r1
    8358:	10 92 3a 04 	sts	0x043A, r1
					accOffsetZSum = 0;
    835c:	10 92 3d 04 	sts	0x043D, r1
    8360:	10 92 3c 04 	sts	0x043C, r1

					calibrationCycle++;
    8364:	d0 93 4e 04 	sts	0x044E, r29
    8368:	c0 93 4d 04 	sts	0x044D, r28
    836c:	80 91 5e 0b 	lds	r24, 0x0B5E

					continue;					// the first time "proxUpdated" is set, all the proximity values saved in the array 
    8370:	59 cf       	rjmp	.-334    	; 0x8224 <calibrateSensors+0x5d0>

00008372 <readAccelXYZ_1>:

void readAccelXYZ_1() {

	int i = 0;

	if(useAccel == USE_MMAX7455L) {
    8372:	80 91 2b 04 	lds	r24, 0x042B
    8376:	88 23       	and	r24, r24
    8378:	79 f0       	breq	.+30     	; 0x8398 <readAccelXYZ_1+0x26>
		for(i=0; i<2; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
		}
		return;

	} else if(useAccel == USE_ADXL345) {							
    837a:	81 30       	cpi	r24, 0x01	; 1
    837c:	11 f1       	breq	.+68     	; 0x83c2 <readAccelXYZ_1+0x50>
		}
		return;

	} else {

		accX = 0;
    837e:	10 92 2d 04 	sts	0x042D, r1
    8382:	10 92 2c 04 	sts	0x042C, r1
		accY = 0;
    8386:	10 92 2f 04 	sts	0x042F, r1
    838a:	10 92 2e 04 	sts	0x042E, r1
		accZ = 0;
    838e:	10 92 31 04 	sts	0x0431, r1
    8392:	10 92 30 04 	sts	0x0430, r1
    8396:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    8398:	80 91 14 02 	lds	r24, 0x0214
    839c:	0e 94 06 1c 	call	0x380c	; 0x380c <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    83a0:	80 e0       	ldi	r24, 0x00	; 0
    83a2:	0e 94 81 1c 	call	0x3902	; 0x3902 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    83a6:	80 91 14 02 	lds	r24, 0x0214
    83aa:	8f 5f       	subi	r24, 0xFF	; 255
    83ac:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <i2c_rep_start>

		for(i=0; i<2; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    83b0:	0e 94 93 1c 	call	0x3926	; 0x3926 <i2c_readAck>
    83b4:	80 93 42 04 	sts	0x0442, r24
    83b8:	0e 94 93 1c 	call	0x3926	; 0x3926 <i2c_readAck>
    83bc:	80 93 43 04 	sts	0x0443, r24
    83c0:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    83c2:	80 91 14 02 	lds	r24, 0x0214
    83c6:	0e 94 06 1c 	call	0x380c	; 0x380c <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    83ca:	82 e3       	ldi	r24, 0x32	; 50
    83cc:	0e 94 81 1c 	call	0x3902	; 0x3902 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    83d0:	80 91 14 02 	lds	r24, 0x0214
    83d4:	8f 5f       	subi	r24, 0xFF	; 255
    83d6:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <i2c_rep_start>

		for(i=0; i<3; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    83da:	0e 94 93 1c 	call	0x3926	; 0x3926 <i2c_readAck>
    83de:	80 93 42 04 	sts	0x0442, r24
    83e2:	0e 94 93 1c 	call	0x3926	; 0x3926 <i2c_readAck>
    83e6:	80 93 43 04 	sts	0x0443, r24
    83ea:	0e 94 93 1c 	call	0x3926	; 0x3926 <i2c_readAck>
    83ee:	80 93 44 04 	sts	0x0444, r24
    83f2:	08 95       	ret

000083f4 <readAccelXYZ_2>:

void readAccelXYZ_2() {

	int i = 2;

	if(useAccel == USE_MMAX7455L) {
    83f4:	80 91 2b 04 	lds	r24, 0x042B
    83f8:	88 23       	and	r24, r24
    83fa:	09 f0       	breq	.+2      	; 0x83fe <readAccelXYZ_2+0xa>
    83fc:	4e c0       	rjmp	.+156    	; 0x849a <readAccelXYZ_2+0xa6>

		for(i=2; i<5; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    83fe:	0e 94 93 1c 	call	0x3926	; 0x3926 <i2c_readAck>
    8402:	80 93 44 04 	sts	0x0444, r24
		}

	} else if(useAccel == USE_ADXL345) {							

		for(i=3; i<5; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    8406:	0e 94 93 1c 	call	0x3926	; 0x3926 <i2c_readAck>
    840a:	80 93 45 04 	sts	0x0445, r24
    840e:	0e 94 93 1c 	call	0x3926	; 0x3926 <i2c_readAck>
    8412:	80 93 46 04 	sts	0x0446, r24
		}
		accBuff[i] = i2c_readNak();									// read last byte sending NACK
    8416:	0e 94 9d 1c 	call	0x393a	; 0x393a <i2c_readNak>
    841a:	80 93 47 04 	sts	0x0447, r24
		i2c_stop();													// set stop conditon = release bus
    841e:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    8422:	80 91 5e 0b 	lds	r24, 0x0B5E
    8426:	88 23       	and	r24, r24
    8428:	09 f4       	brne	.+2      	; 0x842c <readAccelXYZ_2+0x38>
    842a:	47 c0       	rjmp	.+142    	; 0x84ba <readAccelXYZ_2+0xc6>
			accX = ((signed int)accBuff[1]<<8)|accBuff[0];    			// X axis
    842c:	80 91 43 04 	lds	r24, 0x0443
    8430:	99 27       	eor	r25, r25
    8432:	87 fd       	sbrc	r24, 7
    8434:	90 95       	com	r25
    8436:	98 2f       	mov	r25, r24
    8438:	88 27       	eor	r24, r24
    843a:	20 91 42 04 	lds	r18, 0x0442
    843e:	33 27       	eor	r19, r19
    8440:	27 fd       	sbrc	r18, 7
    8442:	30 95       	com	r19
    8444:	82 2b       	or	r24, r18
    8446:	93 2b       	or	r25, r19
    8448:	90 93 2d 04 	sts	0x042D, r25
    844c:	80 93 2c 04 	sts	0x042C, r24
			accY = ((signed int)accBuff[3]<<8)|accBuff[2];    			// Y axis
    8450:	80 91 45 04 	lds	r24, 0x0445
    8454:	99 27       	eor	r25, r25
    8456:	87 fd       	sbrc	r24, 7
    8458:	90 95       	com	r25
    845a:	98 2f       	mov	r25, r24
    845c:	88 27       	eor	r24, r24
    845e:	20 91 44 04 	lds	r18, 0x0444
    8462:	33 27       	eor	r19, r19
    8464:	27 fd       	sbrc	r18, 7
    8466:	30 95       	com	r19
    8468:	82 2b       	or	r24, r18
    846a:	93 2b       	or	r25, r19
    846c:	90 93 2f 04 	sts	0x042F, r25
    8470:	80 93 2e 04 	sts	0x042E, r24
			accZ = ((signed int)accBuff[5]<<8)|accBuff[4];    			// Z axis
    8474:	80 91 47 04 	lds	r24, 0x0447
    8478:	99 27       	eor	r25, r25
    847a:	87 fd       	sbrc	r24, 7
    847c:	90 95       	com	r25
    847e:	98 2f       	mov	r25, r24
    8480:	88 27       	eor	r24, r24
    8482:	20 91 46 04 	lds	r18, 0x0446
    8486:	33 27       	eor	r19, r19
    8488:	27 fd       	sbrc	r18, 7
    848a:	30 95       	com	r19
    848c:	82 2b       	or	r24, r18
    848e:	93 2b       	or	r25, r19
    8490:	90 93 31 04 	sts	0x0431, r25
    8494:	80 93 30 04 	sts	0x0430, r24
    8498:	08 95       	ret
			accX = (((signed int)accBuff[1]<<8)|accBuff[0])-accOffsetX;	// X axis
			accY = (((signed int)accBuff[3]<<8)|accBuff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    849a:	81 30       	cpi	r24, 0x01	; 1
    849c:	09 f4       	brne	.+2      	; 0x84a0 <readAccelXYZ_2+0xac>
    849e:	b3 cf       	rjmp	.-154    	; 0x8406 <readAccelXYZ_2+0x12>
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
		}

	} else {

		accX = 0;
    84a0:	10 92 2d 04 	sts	0x042D, r1
    84a4:	10 92 2c 04 	sts	0x042C, r1
		accY = 0;
    84a8:	10 92 2f 04 	sts	0x042F, r1
    84ac:	10 92 2e 04 	sts	0x042E, r1
		accZ = 0;
    84b0:	10 92 31 04 	sts	0x0431, r1
    84b4:	10 92 30 04 	sts	0x0430, r1
    84b8:	08 95       	ret
		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)accBuff[1]<<8)|accBuff[0];    			// X axis
			accY = ((signed int)accBuff[3]<<8)|accBuff[2];    			// Y axis
			accZ = ((signed int)accBuff[5]<<8)|accBuff[4];    			// Z axis
		} else {													// else return the calibrated values
			accX = (((signed int)accBuff[1]<<8)|accBuff[0])-accOffsetX;	// X axis
    84ba:	80 91 43 04 	lds	r24, 0x0443
    84be:	99 27       	eor	r25, r25
    84c0:	87 fd       	sbrc	r24, 7
    84c2:	90 95       	com	r25
    84c4:	98 2f       	mov	r25, r24
    84c6:	88 27       	eor	r24, r24
    84c8:	20 91 42 04 	lds	r18, 0x0442
    84cc:	33 27       	eor	r19, r19
    84ce:	27 fd       	sbrc	r18, 7
    84d0:	30 95       	com	r19
    84d2:	82 2b       	or	r24, r18
    84d4:	93 2b       	or	r25, r19
    84d6:	20 91 32 04 	lds	r18, 0x0432
    84da:	30 91 33 04 	lds	r19, 0x0433
    84de:	82 1b       	sub	r24, r18
    84e0:	93 0b       	sbc	r25, r19
    84e2:	90 93 2d 04 	sts	0x042D, r25
    84e6:	80 93 2c 04 	sts	0x042C, r24
			accY = (((signed int)accBuff[3]<<8)|accBuff[2])-accOffsetY;	// Y axis
    84ea:	80 91 45 04 	lds	r24, 0x0445
    84ee:	99 27       	eor	r25, r25
    84f0:	87 fd       	sbrc	r24, 7
    84f2:	90 95       	com	r25
    84f4:	98 2f       	mov	r25, r24
    84f6:	88 27       	eor	r24, r24
    84f8:	20 91 44 04 	lds	r18, 0x0444
    84fc:	33 27       	eor	r19, r19
    84fe:	27 fd       	sbrc	r18, 7
    8500:	30 95       	com	r19
    8502:	82 2b       	or	r24, r18
    8504:	93 2b       	or	r25, r19
    8506:	20 91 34 04 	lds	r18, 0x0434
    850a:	30 91 35 04 	lds	r19, 0x0435
    850e:	82 1b       	sub	r24, r18
    8510:	93 0b       	sbc	r25, r19
    8512:	90 93 2f 04 	sts	0x042F, r25
    8516:	80 93 2e 04 	sts	0x042E, r24
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
    851a:	80 91 47 04 	lds	r24, 0x0447
    851e:	99 27       	eor	r25, r25
    8520:	87 fd       	sbrc	r24, 7
    8522:	90 95       	com	r25
    8524:	98 2f       	mov	r25, r24
    8526:	88 27       	eor	r24, r24
    8528:	20 91 46 04 	lds	r18, 0x0446
    852c:	33 27       	eor	r19, r19
    852e:	27 fd       	sbrc	r18, 7
    8530:	30 95       	com	r19
    8532:	82 2b       	or	r24, r18
    8534:	93 2b       	or	r25, r19
    8536:	20 91 36 04 	lds	r18, 0x0436
    853a:	30 91 37 04 	lds	r19, 0x0437
    853e:	82 1b       	sub	r24, r18
    8540:	93 0b       	sbc	r25, r19
    8542:	90 93 31 04 	sts	0x0431, r25
    8546:	80 93 30 04 	sts	0x0430, r24
    854a:	08 95       	ret

0000854c <computeAngle>:

	}

}

void computeAngle() {
    854c:	ef 92       	push	r14
    854e:	ff 92       	push	r15
    8550:	0f 93       	push	r16
    8552:	1f 93       	push	r17

	unsigned int abs_acc_z=abs(accZ);
    8554:	80 91 30 04 	lds	r24, 0x0430
    8558:	90 91 31 04 	lds	r25, 0x0431
    855c:	97 fd       	sbrc	r25, 7
    855e:	6c c0       	rjmp	.+216    	; 0x8638 <computeAngle+0xec>

	// check the robot motion plane (horizontal or vertical) based on the Z axes;
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
    8560:	85 31       	cpi	r24, 0x15	; 21
    8562:	91 05       	cpc	r25, r1
    8564:	08 f0       	brcs	.+2      	; 0x8568 <computeAngle+0x1c>
    8566:	54 c0       	rjmp	.+168    	; 0x8610 <computeAngle+0xc4>
		currPosition = HORIZONTAL_POS;
    8568:	81 e0       	ldi	r24, 0x01	; 1
    856a:	80 93 15 02 	sts	0x0215, r24
    856e:	21 e0       	ldi	r18, 0x01	; 1
	} else {
		currPosition = VERTICAL_POS;	
	}
	if(currPosition != robotPosition) {			
    8570:	80 91 16 02 	lds	r24, 0x0216
    8574:	82 17       	cp	r24, r18
    8576:	09 f4       	brne	.+2      	; 0x857a <computeAngle+0x2e>
    8578:	53 c0       	rjmp	.+166    	; 0x8620 <computeAngle+0xd4>
		timesInSamePos++;
    857a:	80 91 40 04 	lds	r24, 0x0440
    857e:	90 91 41 04 	lds	r25, 0x0441
    8582:	01 96       	adiw	r24, 0x01	; 1
    8584:	90 93 41 04 	sts	0x0441, r25
    8588:	80 93 40 04 	sts	0x0440, r24
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
    858c:	88 3c       	cpi	r24, 0xC8	; 200
    858e:	91 05       	cpc	r25, r1
    8590:	08 f0       	brcs	.+2      	; 0x8594 <computeAngle+0x48>
    8592:	4b c0       	rjmp	.+150    	; 0x862a <computeAngle+0xde>
	} else {
		timesInSamePos = 0;
	}

	// compute the angle using the X and Y axis
	thetaAcc = atan2((float)accX, (float)accY);
    8594:	60 91 2c 04 	lds	r22, 0x042C
    8598:	70 91 2d 04 	lds	r23, 0x042D
    859c:	88 27       	eor	r24, r24
    859e:	77 fd       	sbrc	r23, 7
    85a0:	80 95       	com	r24
    85a2:	98 2f       	mov	r25, r24
    85a4:	0e 94 7b 50 	call	0xa0f6	; 0xa0f6 <__floatsisf>
    85a8:	7b 01       	movw	r14, r22
    85aa:	8c 01       	movw	r16, r24
    85ac:	60 91 2e 04 	lds	r22, 0x042E
    85b0:	70 91 2f 04 	lds	r23, 0x042F
    85b4:	88 27       	eor	r24, r24
    85b6:	77 fd       	sbrc	r23, 7
    85b8:	80 95       	com	r24
    85ba:	98 2f       	mov	r25, r24
    85bc:	0e 94 7b 50 	call	0xa0f6	; 0xa0f6 <__floatsisf>
    85c0:	9b 01       	movw	r18, r22
    85c2:	ac 01       	movw	r20, r24
    85c4:	c8 01       	movw	r24, r16
    85c6:	b7 01       	movw	r22, r14
    85c8:	0e 94 86 4f 	call	0x9f0c	; 0x9f0c <atan2>
    85cc:	60 93 a4 04 	sts	0x04A4, r22
    85d0:	70 93 a5 04 	sts	0x04A5, r23
    85d4:	80 93 a6 04 	sts	0x04A6, r24
    85d8:	90 93 a7 04 	sts	0x04A7, r25
	currentAngle = (signed int)(thetaAcc*RAD_2_DEG);
    85dc:	21 ee       	ldi	r18, 0xE1	; 225
    85de:	3e e2       	ldi	r19, 0x2E	; 46
    85e0:	45 e6       	ldi	r20, 0x65	; 101
    85e2:	52 e4       	ldi	r21, 0x42	; 66
    85e4:	0e 94 90 51 	call	0xa320	; 0xa320 <__mulsf3>
    85e8:	0e 94 48 50 	call	0xa090	; 0xa090 <__fixsfsi>
    85ec:	9b 01       	movw	r18, r22
    85ee:	70 93 3f 04 	sts	0x043F, r23
    85f2:	60 93 3e 04 	sts	0x043E, r22

	if(currentAngle < 0) {
    85f6:	77 ff       	sbrs	r23, 7
    85f8:	06 c0       	rjmp	.+12     	; 0x8606 <computeAngle+0xba>
		currentAngle = currentAngle + (signed int)360;	// angles from 0 to 360
    85fa:	28 59       	subi	r18, 0x98	; 152
    85fc:	3e 4f       	sbci	r19, 0xFE	; 254
    85fe:	30 93 3f 04 	sts	0x043F, r19
    8602:	20 93 3e 04 	sts	0x043E, r18
	}

}
    8606:	1f 91       	pop	r17
    8608:	0f 91       	pop	r16
    860a:	ff 90       	pop	r15
    860c:	ef 90       	pop	r14
    860e:	08 95       	ret
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
		currPosition = HORIZONTAL_POS;
	} else {
		currPosition = VERTICAL_POS;	
    8610:	10 92 15 02 	sts	0x0215, r1
    8614:	20 e0       	ldi	r18, 0x00	; 0
	}
	if(currPosition != robotPosition) {			
    8616:	80 91 16 02 	lds	r24, 0x0216
    861a:	82 17       	cp	r24, r18
    861c:	09 f0       	breq	.+2      	; 0x8620 <computeAngle+0xd4>
    861e:	ad cf       	rjmp	.-166    	; 0x857a <computeAngle+0x2e>
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
			robotPosition = currPosition;
		}
	} else {
		timesInSamePos = 0;
    8620:	10 92 41 04 	sts	0x0441, r1
    8624:	10 92 40 04 	sts	0x0440, r1
    8628:	b5 cf       	rjmp	.-150    	; 0x8594 <computeAngle+0x48>
		currPosition = VERTICAL_POS;	
	}
	if(currPosition != robotPosition) {			
		timesInSamePos++;
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
    862a:	10 92 41 04 	sts	0x0441, r1
    862e:	10 92 40 04 	sts	0x0440, r1
			robotPosition = currPosition;
    8632:	20 93 16 02 	sts	0x0216, r18
    8636:	ae cf       	rjmp	.-164    	; 0x8594 <computeAngle+0x48>

}

void computeAngle() {

	unsigned int abs_acc_z=abs(accZ);
    8638:	90 95       	com	r25
    863a:	81 95       	neg	r24
    863c:	9f 4f       	sbci	r25, 0xFF	; 255
    863e:	90 cf       	rjmp	.-224    	; 0x8560 <computeAngle+0x14>

00008640 <writeCalibrationToFlash>:


#include "eepromIO.h"

void writeCalibrationToFlash() {	
	eeprom_update_block(calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
    8640:	84 ec       	ldi	r24, 0xC4	; 196
    8642:	98 e0       	ldi	r25, 0x08	; 8
    8644:	6c e6       	ldi	r22, 0x6C	; 108
    8646:	7f e0       	ldi	r23, 0x0F	; 15
    8648:	40 e9       	ldi	r20, 0x90	; 144
    864a:	50 e0       	ldi	r21, 0x00	; 0
    864c:	0e 94 21 53 	call	0xa642	; 0xa642 <__eeupd_block_m2560>
	eeprom_update_word ((uint16_t*) CALIB_CHECK_ADDRESS, 0xAA55);   // to let know the calibration data are valid
    8650:	8a e6       	ldi	r24, 0x6A	; 106
    8652:	9f e0       	ldi	r25, 0x0F	; 15
    8654:	65 e5       	ldi	r22, 0x55	; 85
    8656:	7a ea       	ldi	r23, 0xAA	; 170
    8658:	0e 94 43 53 	call	0xa686	; 0xa686 <__eeupd_word_m2560>
}
    865c:	08 95       	ret

0000865e <readCalibrationFromFlash>:

void readCalibrationFromFlash() {
	eeprom_read_block (calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
    865e:	84 ec       	ldi	r24, 0xC4	; 196
    8660:	98 e0       	ldi	r25, 0x08	; 8
    8662:	6c e6       	ldi	r22, 0x6C	; 108
    8664:	7f e0       	ldi	r23, 0x0F	; 15
    8666:	40 e9       	ldi	r20, 0x90	; 144
    8668:	50 e0       	ldi	r21, 0x00	; 0
    866a:	0e 94 03 53 	call	0xa606	; 0xa606 <__eerd_block_m2560>
}
    866e:	08 95       	ret

00008670 <irCommInit>:
#include "irCommunication.h"

void irCommInit(unsigned char mode) {
    8670:	1f 93       	push	r17
    8672:	18 2f       	mov	r17, r24
	if(mode==IRCOMM_MODE_RECEIVE) {
    8674:	81 30       	cpi	r24, 0x01	; 1
    8676:	81 f0       	breq	.+32     	; 0x8698 <irCommInit+0x28>
		irCommMinSensorValueCurr = irCommMinSensorValueBuff2;
		memset(irCommMaxSensorValueAdc, 0x00, 16);
		memset(irCommMinSensorValueAdc, 0xFF, 16);
		irCommEnabled = IRCOMM_MODE_RECEIVE;
		irCommState = IRCOMM_RX_IDLE_STATE;
	} else if(mode==IRCOMM_MODE_TRANSMIT) {
    8678:	82 30       	cpi	r24, 0x02	; 2
    867a:	39 f0       	breq	.+14     	; 0x868a <irCommInit+0x1a>
		irCommEnabled = IRCOMM_MODE_TRANSMIT;
		irCommState = IRCOMM_TX_IDLE_STATE;
	} else if(mode==IRCOMM_MODE_RECEIVE_ONLY) {
    867c:	83 30       	cpi	r24, 0x03	; 3
    867e:	09 f4       	brne	.+2      	; 0x8682 <irCommInit+0x12>
    8680:	40 c0       	rjmp	.+128    	; 0x8702 <irCommInit+0x92>
		irCommMinSensorValueCurr = irCommMinSensorValueBuff2;
		memset(irCommMaxSensorValueAdc, 0x00, 16);
		memset(irCommMinSensorValueAdc, 0xFF, 16);
		irCommEnabled = IRCOMM_MODE_RECEIVE_ONLY;
		irCommState = IRCOMM_RX_IDLE_STATE;
	} else if(mode==IRCOMM_MODE_TRANSMIT_ONLY) {
    8682:	84 30       	cpi	r24, 0x04	; 4
    8684:	11 f0       	breq	.+4      	; 0x868a <irCommInit+0x1a>
		irCommEnabled = IRCOMM_MODE_TRANSMIT_ONLY;
		irCommState = IRCOMM_TX_IDLE_STATE;
	}
}
    8686:	1f 91       	pop	r17
    8688:	08 95       	ret
		memset(irCommMaxSensorValueAdc, 0x00, 16);
		memset(irCommMinSensorValueAdc, 0xFF, 16);
		irCommEnabled = IRCOMM_MODE_RECEIVE_ONLY;
		irCommState = IRCOMM_RX_IDLE_STATE;
	} else if(mode==IRCOMM_MODE_TRANSMIT_ONLY) {
		irCommEnabled = IRCOMM_MODE_TRANSMIT_ONLY;
    868a:	10 93 c4 04 	sts	0x04C4, r17
		irCommState = IRCOMM_TX_IDLE_STATE;
    868e:	81 e0       	ldi	r24, 0x01	; 1
    8690:	80 93 c6 04 	sts	0x04C6, r24
	}
}
    8694:	1f 91       	pop	r17
    8696:	08 95       	ret
#include "irCommunication.h"

void irCommInit(unsigned char mode) {
	if(mode==IRCOMM_MODE_RECEIVE) {
		irCommProxValuesAdc = irCommProxValuesBuff1;
    8698:	8b ea       	ldi	r24, 0xAB	; 171
    869a:	95 e0       	ldi	r25, 0x05	; 5
    869c:	90 93 4c 08 	sts	0x084C, r25
    86a0:	80 93 4b 08 	sts	0x084B, r24
		irCommProxValuesCurr = irCommProxValuesBuff2;
    86a4:	8d ee       	ldi	r24, 0xED	; 237
    86a6:	96 e0       	ldi	r25, 0x06	; 6
    86a8:	90 93 2e 08 	sts	0x082E, r25
    86ac:	80 93 2d 08 	sts	0x082D, r24
		irCommMaxSensorValueAdc = irCommMaxSensorValueBuff1;
    86b0:	ea e5       	ldi	r30, 0x5A	; 90
    86b2:	f9 e0       	ldi	r31, 0x09	; 9
    86b4:	f0 93 1a 0b 	sts	0x0B1A, r31
    86b8:	e0 93 19 0b 	sts	0x0B19, r30
		irCommMaxSensorValueCurr = irCommMaxSensorValueBuff2;
    86bc:	88 e4       	ldi	r24, 0x48	; 72
    86be:	9b e0       	ldi	r25, 0x0B	; 11
    86c0:	90 93 2b 05 	sts	0x052B, r25
    86c4:	80 93 2a 05 	sts	0x052A, r24
		irCommMinSensorValueAdc = irCommMinSensorValueBuff1;
    86c8:	2f e2       	ldi	r18, 0x2F	; 47
    86ca:	38 e0       	ldi	r19, 0x08	; 8
    86cc:	30 93 a8 05 	sts	0x05A8, r19
    86d0:	20 93 a7 05 	sts	0x05A7, r18
		irCommMinSensorValueCurr = irCommMinSensorValueBuff2;
    86d4:	84 eb       	ldi	r24, 0xB4	; 180
    86d6:	98 e0       	ldi	r25, 0x08	; 8
    86d8:	90 93 17 05 	sts	0x0517, r25
    86dc:	80 93 16 05 	sts	0x0516, r24
		memset(irCommMaxSensorValueAdc, 0x00, 16);
    86e0:	80 e1       	ldi	r24, 0x10	; 16
    86e2:	df 01       	movw	r26, r30
    86e4:	1d 92       	st	X+, r1
    86e6:	8a 95       	dec	r24
    86e8:	e9 f7       	brne	.-6      	; 0x86e4 <irCommInit+0x74>
		memset(irCommMinSensorValueAdc, 0xFF, 16);
    86ea:	c9 01       	movw	r24, r18
    86ec:	6f ef       	ldi	r22, 0xFF	; 255
    86ee:	70 e0       	ldi	r23, 0x00	; 0
    86f0:	40 e1       	ldi	r20, 0x10	; 16
    86f2:	50 e0       	ldi	r21, 0x00	; 0
    86f4:	0e 94 fc 52 	call	0xa5f8	; 0xa5f8 <memset>
		irCommEnabled = IRCOMM_MODE_RECEIVE;
    86f8:	10 93 c4 04 	sts	0x04C4, r17
		irCommState = IRCOMM_RX_IDLE_STATE;
    86fc:	10 93 c6 04 	sts	0x04C6, r17
    8700:	c2 cf       	rjmp	.-124    	; 0x8686 <irCommInit+0x16>
	} else if(mode==IRCOMM_MODE_TRANSMIT) {
		irCommEnabled = IRCOMM_MODE_TRANSMIT;
		irCommState = IRCOMM_TX_IDLE_STATE;
	} else if(mode==IRCOMM_MODE_RECEIVE_ONLY) {
		irCommProxValuesAdc = irCommProxValuesBuff1;
    8702:	8b ea       	ldi	r24, 0xAB	; 171
    8704:	95 e0       	ldi	r25, 0x05	; 5
    8706:	90 93 4c 08 	sts	0x084C, r25
    870a:	80 93 4b 08 	sts	0x084B, r24
		irCommProxValuesCurr = irCommProxValuesBuff2;
    870e:	8d ee       	ldi	r24, 0xED	; 237
    8710:	96 e0       	ldi	r25, 0x06	; 6
    8712:	90 93 2e 08 	sts	0x082E, r25
    8716:	80 93 2d 08 	sts	0x082D, r24
		irCommMaxSensorValueAdc = irCommMaxSensorValueBuff1;
    871a:	ea e5       	ldi	r30, 0x5A	; 90
    871c:	f9 e0       	ldi	r31, 0x09	; 9
    871e:	f0 93 1a 0b 	sts	0x0B1A, r31
    8722:	e0 93 19 0b 	sts	0x0B19, r30
		irCommMaxSensorValueCurr = irCommMaxSensorValueBuff2;
    8726:	88 e4       	ldi	r24, 0x48	; 72
    8728:	9b e0       	ldi	r25, 0x0B	; 11
    872a:	90 93 2b 05 	sts	0x052B, r25
    872e:	80 93 2a 05 	sts	0x052A, r24
		irCommMinSensorValueAdc = irCommMinSensorValueBuff1;
    8732:	2f e2       	ldi	r18, 0x2F	; 47
    8734:	38 e0       	ldi	r19, 0x08	; 8
    8736:	30 93 a8 05 	sts	0x05A8, r19
    873a:	20 93 a7 05 	sts	0x05A7, r18
		irCommMinSensorValueCurr = irCommMinSensorValueBuff2;
    873e:	84 eb       	ldi	r24, 0xB4	; 180
    8740:	98 e0       	ldi	r25, 0x08	; 8
    8742:	90 93 17 05 	sts	0x0517, r25
    8746:	80 93 16 05 	sts	0x0516, r24
		memset(irCommMaxSensorValueAdc, 0x00, 16);
    874a:	80 e1       	ldi	r24, 0x10	; 16
    874c:	df 01       	movw	r26, r30
    874e:	1d 92       	st	X+, r1
    8750:	8a 95       	dec	r24
    8752:	e9 f7       	brne	.-6      	; 0x874e <irCommInit+0xde>
		memset(irCommMinSensorValueAdc, 0xFF, 16);
    8754:	c9 01       	movw	r24, r18
    8756:	6f ef       	ldi	r22, 0xFF	; 255
    8758:	70 e0       	ldi	r23, 0x00	; 0
    875a:	40 e1       	ldi	r20, 0x10	; 16
    875c:	50 e0       	ldi	r21, 0x00	; 0
    875e:	0e 94 fc 52 	call	0xa5f8	; 0xa5f8 <memset>
		irCommEnabled = IRCOMM_MODE_RECEIVE_ONLY;
    8762:	10 93 c4 04 	sts	0x04C4, r17
		irCommState = IRCOMM_RX_IDLE_STATE;
    8766:	81 e0       	ldi	r24, 0x01	; 1
    8768:	80 93 c6 04 	sts	0x04C6, r24
    876c:	8c cf       	rjmp	.-232    	; 0x8686 <irCommInit+0x16>

0000876e <irCommDeinit>:
		irCommState = IRCOMM_TX_IDLE_STATE;
	}
}

void irCommDeinit() {
	irCommEnabled = IRCOMM_MODE_SENSORS_SAMPLING;
    876e:	10 92 c4 04 	sts	0x04C4, r1
	irCommMode = IRCOMM_MODE_SENSORS_SAMPLING;
    8772:	10 92 c5 04 	sts	0x04C5, r1
}
    8776:	08 95       	ret

00008778 <resetDebugVariables>:

void resetDebugVariables() {
    8778:	ef 92       	push	r14
    877a:	ff 92       	push	r15
    877c:	0f 93       	push	r16
    877e:	1f 93       	push	r17
    8780:	cf 93       	push	r28
    8782:	df 93       	push	r29
	irCommRxMaxSensorIndexTemp=0;
    8784:	10 92 d5 04 	sts	0x04D5, r1
	irCommRxMaxDiffIndexTemp=0;
    8788:	10 92 d6 04 	sts	0x04D6, r1
	irCommMaxSensorValueCurrIndexTemp=0;
    878c:	10 92 d9 04 	sts	0x04D9, r1
	irCommMinSensorValueCurrIndexTemp=0;
    8790:	10 92 da 04 	sts	0x04DA, r1
	memset(irCommRxMaxSensorTemp, 0xFF, 4);
    8794:	ee 24       	eor	r14, r14
    8796:	ea 94       	dec	r14
    8798:	fe 2c       	mov	r15, r14
    879a:	87 01       	movw	r16, r14
    879c:	e0 92 0b 0b 	sts	0x0B0B, r14
    87a0:	f0 92 0c 0b 	sts	0x0B0C, r15
    87a4:	00 93 0d 0b 	sts	0x0B0D, r16
    87a8:	10 93 0e 0b 	sts	0x0B0E, r17
	memset(irCommRxMaxDiffTemp, 0xFF, 4);
    87ac:	e0 92 44 0b 	sts	0x0B44, r14
    87b0:	f0 92 45 0b 	sts	0x0B45, r15
    87b4:	00 93 46 0b 	sts	0x0B46, r16
    87b8:	10 93 47 0b 	sts	0x0B47, r17
	memset(irCommMaxSensorValueCurrTemp, 0xFF, 4);
    87bc:	e0 92 18 05 	sts	0x0518, r14
    87c0:	f0 92 19 05 	sts	0x0519, r15
    87c4:	00 93 1a 05 	sts	0x051A, r16
    87c8:	10 93 1b 05 	sts	0x051B, r17
	memset(irCommMinSensorValueCurrTemp, 0xFF, 4);
    87cc:	e0 92 0f 0b 	sts	0x0B0F, r14
    87d0:	f0 92 10 0b 	sts	0x0B10, r15
    87d4:	00 93 11 0b 	sts	0x0B11, r16
    87d8:	10 93 12 0b 	sts	0x0B12, r17

	irCommStateIndexTemp = 0;					
    87dc:	10 92 e2 04 	sts	0x04E2, r1
	memset(irCommStateTemp, 0xFF, 14);
    87e0:	8c e1       	ldi	r24, 0x1C	; 28
    87e2:	95 e0       	ldi	r25, 0x05	; 5
    87e4:	6f ef       	ldi	r22, 0xFF	; 255
    87e6:	70 e0       	ldi	r23, 0x00	; 0
    87e8:	4e e0       	ldi	r20, 0x0E	; 14
    87ea:	50 e0       	ldi	r21, 0x00	; 0
    87ec:	0e 94 fc 52 	call	0xa5f8	; 0xa5f8 <memset>

	irCommShiftCountFinalIndexTemp = 0;
    87f0:	10 92 dc 04 	sts	0x04DC, r1
	memset(irCommShiftCountFinalTemp, 0xFF, 2);
    87f4:	cf ef       	ldi	r28, 0xFF	; 255
    87f6:	df ef       	ldi	r29, 0xFF	; 255
    87f8:	d0 93 18 0b 	sts	0x0B18, r29
    87fc:	c0 93 17 0b 	sts	0x0B17, r28
	irCommRxStartBitDetectedIndexTemp = 0;
    8800:	10 92 e1 04 	sts	0x04E1, r1
	memset(irCommRxStartBitDetectedTemp, 0xFF, 2);
    8804:	d0 93 56 05 	sts	0x0556, r29
    8808:	c0 93 55 05 	sts	0x0555, r28
	irCommSwitchCountIndexTemp = 0;
    880c:	10 92 d8 04 	sts	0x04D8, r1
	memset(irCommSwitchCountTemp, 0xFF, 2);
    8810:	d0 93 32 05 	sts	0x0532, r29
    8814:	c0 93 31 05 	sts	0x0531, r28
	irCommMaxSensorSignalFiltIndexTemp = 0;
    8818:	10 92 d4 04 	sts	0x04D4, r1
	memset(irCommMaxSensorSignalFiltTemp, 0xFF, 80);
    881c:	87 e5       	ldi	r24, 0x57	; 87
    881e:	95 e0       	ldi	r25, 0x05	; 5
    8820:	6f ef       	ldi	r22, 0xFF	; 255
    8822:	70 e0       	ldi	r23, 0x00	; 0
    8824:	40 e5       	ldi	r20, 0x50	; 80
    8826:	50 e0       	ldi	r21, 0x00	; 0
    8828:	0e 94 fc 52 	call	0xa5f8	; 0xa5f8 <memset>
	irCommMaxSensorSignalIndexTemp = 0;
    882c:	10 92 d3 04 	sts	0x04D3, r1
	memset(irCommMaxSensorSignalTemp, 0xFF, 80);
    8830:	8d e4       	ldi	r24, 0x4D	; 77
    8832:	98 e0       	ldi	r25, 0x08	; 8
    8834:	6f ef       	ldi	r22, 0xFF	; 255
    8836:	70 e0       	ldi	r23, 0x00	; 0
    8838:	40 e5       	ldi	r20, 0x50	; 80
    883a:	50 e0       	ldi	r21, 0x00	; 0
    883c:	0e 94 fc 52 	call	0xa5f8	; 0xa5f8 <memset>
	irCommProxMeanIndexTemp = 0;
    8840:	10 92 d7 04 	sts	0x04D7, r1
	memset(irCommProxMeanTemp, 0xFF, 4);
    8844:	e0 92 4f 05 	sts	0x054F, r14
    8848:	f0 92 50 05 	sts	0x0550, r15
    884c:	00 93 51 05 	sts	0x0551, r16
    8850:	10 93 52 05 	sts	0x0552, r17
	irCommComputeShiftIndexTemp = 0;
    8854:	10 92 de 04 	sts	0x04DE, r1
	memset(irCommComputeShiftTemp, 0xFF, 2);
    8858:	d0 93 4d 05 	sts	0x054D, r29
    885c:	c0 93 4c 05 	sts	0x054C, r28
	irCommShiftCountIndexTemp = 0;
    8860:	10 92 db 04 	sts	0x04DB, r1
	memset(irCommShiftCountTemp, 0xFF, 2);
    8864:	d0 93 60 0b 	sts	0x0B60, r29
    8868:	c0 93 5f 0b 	sts	0x0B5F, r28
	irCommRxPeakHighToLowIndexTemp = 0;
    886c:	10 92 df 04 	sts	0x04DF, r1
	memset(irCommRxPeakHighToLowTemp, 0xFF, 2);
    8870:	d0 93 aa 05 	sts	0x05AA, r29
    8874:	c0 93 a9 05 	sts	0x05A9, r28
	irCommRxStartPeakDurationIndexTemp = 0;
    8878:	10 92 e0 04 	sts	0x04E0, r1
	memset(irCommRxStartPeakDurationTemp, 0xFF, 2);
    887c:	d0 93 ec 06 	sts	0x06EC, r29
    8880:	c0 93 eb 06 	sts	0x06EB, r28
	irCommStartDiffIndexTemp = 0;
    8884:	10 92 dd 04 	sts	0x04DD, r1
	memset(irCommSyncStateTemp, 0xFF, 2);
    8888:	d0 93 4b 05 	sts	0x054B, r29
    888c:	c0 93 4a 05 	sts	0x054A, r28
	irCommSyncStateIndexTemp = 0;
    8890:	10 92 e3 04 	sts	0x04E3, r1
	memset(irCommBitsSignalTemp, 0xFF, 400);
    8894:	89 e7       	ldi	r24, 0x79	; 121
    8896:	99 e0       	ldi	r25, 0x09	; 9
    8898:	6f ef       	ldi	r22, 0xFF	; 255
    889a:	70 e0       	ldi	r23, 0x00	; 0
    889c:	40 e9       	ldi	r20, 0x90	; 144
    889e:	51 e0       	ldi	r21, 0x01	; 1
    88a0:	0e 94 fc 52 	call	0xa5f8	; 0xa5f8 <memset>
	irCommBitsSignalIndexTemp = 0;
    88a4:	10 92 e4 04 	sts	0x04E4, r1
	memset(irCommRxBitReceivedTemp, 0xFF, 10);
    88a8:	8f e3       	ldi	r24, 0x3F	; 63
    88aa:	98 e0       	ldi	r25, 0x08	; 8
    88ac:	6f ef       	ldi	r22, 0xFF	; 255
    88ae:	70 e0       	ldi	r23, 0x00	; 0
    88b0:	4a e0       	ldi	r20, 0x0A	; 10
    88b2:	50 e0       	ldi	r21, 0x00	; 0
    88b4:	0e 94 fc 52 	call	0xa5f8	; 0xa5f8 <memset>
	irCommRxBitReceivedIndexTemp = 0;
    88b8:	10 92 e5 04 	sts	0x04E5, r1
	
	
}
    88bc:	df 91       	pop	r29
    88be:	cf 91       	pop	r28
    88c0:	1f 91       	pop	r17
    88c2:	0f 91       	pop	r16
    88c4:	ff 90       	pop	r15
    88c6:	ef 90       	pop	r14
    88c8:	08 95       	ret

000088ca <irCommTasks>:

void irCommTasks() {
    88ca:	4f 92       	push	r4
    88cc:	5f 92       	push	r5
    88ce:	6f 92       	push	r6
    88d0:	7f 92       	push	r7
    88d2:	8f 92       	push	r8
    88d4:	9f 92       	push	r9
    88d6:	af 92       	push	r10
    88d8:	bf 92       	push	r11
    88da:	cf 92       	push	r12
    88dc:	df 92       	push	r13
    88de:	ef 92       	push	r14
    88e0:	ff 92       	push	r15
    88e2:	0f 93       	push	r16
    88e4:	1f 93       	push	r17
    88e6:	df 93       	push	r29
    88e8:	cf 93       	push	r28
    88ea:	0f 92       	push	r0
    88ec:	0f 92       	push	r0
    88ee:	cd b7       	in	r28, 0x3d	; 61
    88f0:	de b7       	in	r29, 0x3e	; 62
	int i = 0;

	if(irCommMode==IRCOMM_MODE_RECEIVE) {
    88f2:	00 91 c5 04 	lds	r16, 0x04C5
    88f6:	01 30       	cpi	r16, 0x01	; 1
    88f8:	09 f4       	brne	.+2      	; 0x88fc <irCommTasks+0x32>
    88fa:	e4 c0       	rjmp	.+456    	; 0x8ac4 <irCommTasks+0x1fa>
			case IRCOMM_RX_STOP:
				break;
					
		}

	} else if(irCommMode==IRCOMM_MODE_TRANSMIT) {
    88fc:	02 30       	cpi	r16, 0x02	; 2
    88fe:	99 f0       	breq	.+38     	; 0x8926 <irCommTasks+0x5c>

		}

	}

}
    8900:	0f 90       	pop	r0
    8902:	0f 90       	pop	r0
    8904:	cf 91       	pop	r28
    8906:	df 91       	pop	r29
    8908:	1f 91       	pop	r17
    890a:	0f 91       	pop	r16
    890c:	ff 90       	pop	r15
    890e:	ef 90       	pop	r14
    8910:	df 90       	pop	r13
    8912:	cf 90       	pop	r12
    8914:	bf 90       	pop	r11
    8916:	af 90       	pop	r10
    8918:	9f 90       	pop	r9
    891a:	8f 90       	pop	r8
    891c:	7f 90       	pop	r7
    891e:	6f 90       	pop	r6
    8920:	5f 90       	pop	r5
    8922:	4f 90       	pop	r4
    8924:	08 95       	ret
					
		}

	} else if(irCommMode==IRCOMM_MODE_TRANSMIT) {

		switch(irCommState) {
    8926:	80 91 c6 04 	lds	r24, 0x04C6
    892a:	82 30       	cpi	r24, 0x02	; 2
    892c:	09 f4       	brne	.+2      	; 0x8930 <irCommTasks+0x66>
    892e:	5f c1       	rjmp	.+702    	; 0x8bee <irCommTasks+0x324>
    8930:	85 30       	cpi	r24, 0x05	; 5
    8932:	31 f7       	brne	.-52     	; 0x8900 <irCommTasks+0x36>
			case IRCOMM_TX_IDLE_STATE:					
				break;

			case IRCOMM_TX_PREPARE_TRANSMISSION:
				if((getTime100MicroSec() - irCommTxWaitStartTime) < PAUSE_100_MSEC) {
    8934:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <getTime100MicroSec>
    8938:	20 91 07 05 	lds	r18, 0x0507
    893c:	30 91 08 05 	lds	r19, 0x0508
    8940:	40 91 09 05 	lds	r20, 0x0509
    8944:	50 91 0a 05 	lds	r21, 0x050A
    8948:	62 1b       	sub	r22, r18
    894a:	73 0b       	sbc	r23, r19
    894c:	84 0b       	sbc	r24, r20
    894e:	95 0b       	sbc	r25, r21
    8950:	61 3c       	cpi	r22, 0xC1	; 193
    8952:	23 e0       	ldi	r18, 0x03	; 3
    8954:	72 07       	cpc	r23, r18
    8956:	20 e0       	ldi	r18, 0x00	; 0
    8958:	82 07       	cpc	r24, r18
    895a:	20 e0       	ldi	r18, 0x00	; 0
    895c:	92 07       	cpc	r25, r18
    895e:	80 f2       	brcs	.-96     	; 0x8900 <irCommTasks+0x36>
					//updateBlueLed(0);
					break;
				}
				//updateBlueLed(255);
				//updateBlueLed(0);
				irCommTickCounter = getTime100MicroSec()-irCommTickCounter2;
    8960:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <getTime100MicroSec>
    8964:	20 91 ce 04 	lds	r18, 0x04CE
    8968:	30 91 cf 04 	lds	r19, 0x04CF
    896c:	40 91 d0 04 	lds	r20, 0x04D0
    8970:	50 91 d1 04 	lds	r21, 0x04D1
    8974:	62 1b       	sub	r22, r18
    8976:	73 0b       	sbc	r23, r19
    8978:	84 0b       	sbc	r24, r20
    897a:	95 0b       	sbc	r25, r21
    897c:	60 93 ca 04 	sts	0x04CA, r22
    8980:	70 93 cb 04 	sts	0x04CB, r23
    8984:	80 93 cc 04 	sts	0x04CC, r24
    8988:	90 93 cd 04 	sts	0x04CD, r25
				irCommTickCounter2 = getTime100MicroSec();
    898c:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <getTime100MicroSec>
    8990:	60 93 ce 04 	sts	0x04CE, r22
    8994:	70 93 cf 04 	sts	0x04CF, r23
    8998:	80 93 d0 04 	sts	0x04D0, r24
    899c:	90 93 d1 04 	sts	0x04D1, r25
				irCommTxBitToTransmit[0] = 2;	// start bit 1
    89a0:	00 93 34 05 	sts	0x0534, r16
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
    89a4:	83 e0       	ldi	r24, 0x03	; 3
    89a6:	80 93 35 05 	sts	0x0535, r24
    89aa:	80 91 05 05 	lds	r24, 0x0505
    89ae:	90 e0       	ldi	r25, 0x00	; 0
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    89b0:	9c 01       	movw	r18, r24
    89b2:	21 70       	andi	r18, 0x01	; 1
    89b4:	30 70       	andi	r19, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    89b6:	20 93 3d 05 	sts	0x053D, r18
	irCommRxBitReceivedIndexTemp = 0;
	
	
}

void irCommTasks() {
    89ba:	41 e0       	ldi	r20, 0x01	; 1
    89bc:	21 30       	cpi	r18, 0x01	; 1
    89be:	31 05       	cpc	r19, r1
    89c0:	09 f0       	breq	.+2      	; 0x89c4 <irCommTasks+0xfa>
    89c2:	40 e0       	ldi	r20, 0x00	; 0
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    89c4:	9c 01       	movw	r18, r24
    89c6:	35 95       	asr	r19
    89c8:	27 95       	ror	r18
    89ca:	21 70       	andi	r18, 0x01	; 1
    89cc:	30 70       	andi	r19, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    89ce:	20 93 3c 05 	sts	0x053C, r18
					if(irCommTempValue==1) {
    89d2:	21 30       	cpi	r18, 0x01	; 1
    89d4:	31 05       	cpc	r19, r1
    89d6:	09 f4       	brne	.+2      	; 0x89da <irCommTasks+0x110>
    89d8:	f6 c7       	rjmp	.+4076   	; 0x99c6 <irCommTasks+0x10fc>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    89da:	9c 01       	movw	r18, r24
    89dc:	35 95       	asr	r19
    89de:	27 95       	ror	r18
    89e0:	35 95       	asr	r19
    89e2:	27 95       	ror	r18
    89e4:	21 70       	andi	r18, 0x01	; 1
    89e6:	30 70       	andi	r19, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    89e8:	20 93 3b 05 	sts	0x053B, r18
					if(irCommTempValue==1) {
    89ec:	21 30       	cpi	r18, 0x01	; 1
    89ee:	31 05       	cpc	r19, r1
    89f0:	09 f4       	brne	.+2      	; 0x89f4 <irCommTasks+0x12a>
    89f2:	e7 c7       	rjmp	.+4046   	; 0x99c2 <irCommTasks+0x10f8>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    89f4:	9c 01       	movw	r18, r24
    89f6:	35 95       	asr	r19
    89f8:	27 95       	ror	r18
    89fa:	35 95       	asr	r19
    89fc:	27 95       	ror	r18
    89fe:	35 95       	asr	r19
    8a00:	27 95       	ror	r18
    8a02:	21 70       	andi	r18, 0x01	; 1
    8a04:	30 70       	andi	r19, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    8a06:	20 93 3a 05 	sts	0x053A, r18
					if(irCommTempValue==1) {
    8a0a:	21 30       	cpi	r18, 0x01	; 1
    8a0c:	31 05       	cpc	r19, r1
    8a0e:	09 f4       	brne	.+2      	; 0x8a12 <irCommTasks+0x148>
    8a10:	d6 c7       	rjmp	.+4012   	; 0x99be <irCommTasks+0x10f4>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    8a12:	9c 01       	movw	r18, r24
    8a14:	35 95       	asr	r19
    8a16:	27 95       	ror	r18
    8a18:	35 95       	asr	r19
    8a1a:	27 95       	ror	r18
    8a1c:	35 95       	asr	r19
    8a1e:	27 95       	ror	r18
    8a20:	35 95       	asr	r19
    8a22:	27 95       	ror	r18
    8a24:	21 70       	andi	r18, 0x01	; 1
    8a26:	30 70       	andi	r19, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    8a28:	20 93 39 05 	sts	0x0539, r18
					if(irCommTempValue==1) {
    8a2c:	21 30       	cpi	r18, 0x01	; 1
    8a2e:	31 05       	cpc	r19, r1
    8a30:	09 f4       	brne	.+2      	; 0x8a34 <irCommTasks+0x16a>
    8a32:	c3 c7       	rjmp	.+3974   	; 0x99ba <irCommTasks+0x10f0>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    8a34:	9c 01       	movw	r18, r24
    8a36:	35 95       	asr	r19
    8a38:	27 95       	ror	r18
    8a3a:	35 95       	asr	r19
    8a3c:	27 95       	ror	r18
    8a3e:	35 95       	asr	r19
    8a40:	27 95       	ror	r18
    8a42:	35 95       	asr	r19
    8a44:	27 95       	ror	r18
    8a46:	35 95       	asr	r19
    8a48:	27 95       	ror	r18
    8a4a:	21 70       	andi	r18, 0x01	; 1
    8a4c:	30 70       	andi	r19, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    8a4e:	20 93 38 05 	sts	0x0538, r18
					if(irCommTempValue==1) {
    8a52:	21 30       	cpi	r18, 0x01	; 1
    8a54:	31 05       	cpc	r19, r1
    8a56:	09 f4       	brne	.+2      	; 0x8a5a <irCommTasks+0x190>
    8a58:	ae c7       	rjmp	.+3932   	; 0x99b6 <irCommTasks+0x10ec>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    8a5a:	9c 01       	movw	r18, r24
    8a5c:	02 2e       	mov	r0, r18
    8a5e:	23 2f       	mov	r18, r19
    8a60:	00 0c       	add	r0, r0
    8a62:	22 1f       	adc	r18, r18
    8a64:	33 0b       	sbc	r19, r19
    8a66:	00 0c       	add	r0, r0
    8a68:	22 1f       	adc	r18, r18
    8a6a:	33 1f       	adc	r19, r19
    8a6c:	21 70       	andi	r18, 0x01	; 1
    8a6e:	30 70       	andi	r19, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    8a70:	20 93 37 05 	sts	0x0537, r18
					if(irCommTempValue==1) {
    8a74:	21 30       	cpi	r18, 0x01	; 1
    8a76:	31 05       	cpc	r19, r1
    8a78:	09 f4       	brne	.+2      	; 0x8a7c <irCommTasks+0x1b2>
    8a7a:	9b c7       	rjmp	.+3894   	; 0x99b2 <irCommTasks+0x10e8>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    8a7c:	88 0f       	add	r24, r24
    8a7e:	89 2f       	mov	r24, r25
    8a80:	88 1f       	adc	r24, r24
    8a82:	99 0b       	sbc	r25, r25
    8a84:	91 95       	neg	r25
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    8a86:	80 93 36 05 	sts	0x0536, r24
					if(irCommTempValue==1) {
    8a8a:	81 30       	cpi	r24, 0x01	; 1
    8a8c:	91 05       	cpc	r25, r1
    8a8e:	09 f4       	brne	.+2      	; 0x8a92 <irCommTasks+0x1c8>
    8a90:	8e c7       	rjmp	.+3868   	; 0x99ae <irCommTasks+0x10e4>
						irCommTxCrc++;
    8a92:	90 93 c8 04 	sts	0x04C8, r25
    8a96:	80 93 c7 04 	sts	0x04C7, r24
					}
					//irCommTxBitToTransmit[9-i] = 2;
				}
				irCommTxCrc = irCommTxCrc % 4;
    8a9a:	43 70       	andi	r20, 0x03	; 3
				irCommTxCrc = 4 - irCommTxCrc;
    8a9c:	84 e0       	ldi	r24, 0x04	; 4
    8a9e:	84 1b       	sub	r24, r20
    8aa0:	80 93 0b 05 	sts	0x050B, r24
				irCommTxBitToTransmit[10] = (irCommTxCrc>>1)&0x01;
    8aa4:	98 2f       	mov	r25, r24
    8aa6:	96 95       	lsr	r25
    8aa8:	91 70       	andi	r25, 0x01	; 1
    8aaa:	90 93 3e 05 	sts	0x053E, r25
				irCommTxBitToTransmit[11] = irCommTxCrc&0x01;	
    8aae:	81 70       	andi	r24, 0x01	; 1
    8ab0:	80 93 3f 05 	sts	0x053F, r24
				irCommTxBitCount = 0;							
    8ab4:	10 92 0c 05 	sts	0x050C, r1
				irCommTxPulseState = 0;	
    8ab8:	10 92 0d 05 	sts	0x050D, r1
				irCommState = IRCOMM_TX_COMPUTE_TIMINGS;				
    8abc:	82 e0       	ldi	r24, 0x02	; 2
    8abe:	80 93 c6 04 	sts	0x04C6, r24
				break;
    8ac2:	1e cf       	rjmp	.-452    	; 0x8900 <irCommTasks+0x36>
void irCommTasks() {
	int i = 0;

	if(irCommMode==IRCOMM_MODE_RECEIVE) {

		switch(irCommState) {
    8ac4:	80 91 c6 04 	lds	r24, 0x04C6
    8ac8:	86 30       	cpi	r24, 0x06	; 6
    8aca:	09 f4       	brne	.+2      	; 0x8ace <irCommTasks+0x204>
    8acc:	67 c2       	rjmp	.+1230   	; 0x8f9c <irCommTasks+0x6d2>
    8ace:	87 30       	cpi	r24, 0x07	; 7
    8ad0:	08 f0       	brcs	.+2      	; 0x8ad4 <irCommTasks+0x20a>
    8ad2:	bf c0       	rjmp	.+382    	; 0x8c52 <irCommTasks+0x388>
    8ad4:	82 30       	cpi	r24, 0x02	; 2
    8ad6:	09 f4       	brne	.+2      	; 0x8ada <irCommTasks+0x210>
    8ad8:	b6 c3       	rjmp	.+1900   	; 0x9246 <irCommTasks+0x97c>
    8ada:	83 30       	cpi	r24, 0x03	; 3
    8adc:	09 f0       	breq	.+2      	; 0x8ae0 <irCommTasks+0x216>
    8ade:	10 cf       	rjmp	.-480    	; 0x8900 <irCommTasks+0x36>
												
				break;

			case IRCOMM_RX_DETECT_START_BIT_STATE:
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
    8ae0:	10 92 e9 04 	sts	0x04E9, r1
    8ae4:	10 92 ea 04 	sts	0x04EA, r1
    8ae8:	10 92 eb 04 	sts	0x04EB, r1
    8aec:	10 92 ec 04 	sts	0x04EC, r1
				irCommTempMin = 1024;
    8af0:	80 e0       	ldi	r24, 0x00	; 0
    8af2:	94 e0       	ldi	r25, 0x04	; 4
    8af4:	90 93 f0 04 	sts	0x04F0, r25
    8af8:	80 93 ef 04 	sts	0x04EF, r24
				irCommTempMax = 0;
    8afc:	10 92 ee 04 	sts	0x04EE, r1
    8b00:	10 92 ed 04 	sts	0x04ED, r1
				irCommShiftCount = 0;
    8b04:	10 92 f1 04 	sts	0x04F1, r1
				irCommComputeShift = 1;												
    8b08:	00 93 f2 04 	sts	0x04F2, r16
    8b0c:	bb e1       	ldi	r27, 0x1B	; 27
    8b0e:	4b 2e       	mov	r4, r27
    8b10:	bb e0       	ldi	r27, 0x0B	; 11
    8b12:	5b 2e       	mov	r5, r27
    8b14:	92 01       	movw	r18, r4
    8b16:	00 e0       	ldi	r16, 0x00	; 0
    8b18:	10 e0       	ldi	r17, 0x00	; 0
    8b1a:	bb 24       	eor	r11, r11
    8b1c:	b3 94       	inc	r11
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
					irCommMaxSensorSignal[i] = irCommProxValuesCurr[irCommRxMaxSensor+i*8];

					if(irCommMaxSensorSignalIndexTemp>39) {
						irCommMaxSensorSignalIndexTemp = 39;
    8b1e:	a7 e2       	ldi	r26, 0x27	; 39
    8b20:	aa 2e       	mov	r10, r26
							} else if(irCommMaxSensorSignal[i] == irCommTempMin) {
								irCommRxPeakHighToLow = 1;
							} else {
								//updateGreenLed(0);
							}
							irCommTempMin = 1024;
    8b22:	81 2c       	mov	r8, r1
    8b24:	f4 e0       	ldi	r31, 0x04	; 4
    8b26:	9f 2e       	mov	r9, r31
							irCommTempMax = 0;
							irCommComputeShift = 2;
    8b28:	e2 e0       	ldi	r30, 0x02	; 2
    8b2a:	7e 2e       	mov	r7, r30
							

							if(irCommMaxSensorSignal[i] == irCommTempMax) {
								irCommRxPeakHighToLow = 0;
							} else if(irCommMaxSensorSignal[i] == irCommTempMin) {
								irCommRxPeakHighToLow = 1;
    8b2c:	66 24       	eor	r6, r6
    8b2e:	63 94       	inc	r6
    8b30:	34 c0       	rjmp	.+104    	; 0x8b9a <irCommTasks+0x2d0>

					if(irCommMaxSensorSignalIndexTemp>39) {
						irCommMaxSensorSignalIndexTemp = 39;
						updateRedLed(0);
					}
					irCommMaxSensorSignalTemp[irCommMaxSensorSignalIndexTemp] = irCommMaxSensorSignal[i];
    8b32:	e8 2f       	mov	r30, r24
    8b34:	f0 e0       	ldi	r31, 0x00	; 0
    8b36:	ee 0f       	add	r30, r30
    8b38:	ff 1f       	adc	r31, r31
    8b3a:	e3 5b       	subi	r30, 0xB3	; 179
    8b3c:	f7 4f       	sbci	r31, 0xF7	; 247
    8b3e:	51 83       	std	Z+1, r21	; 0x01
    8b40:	40 83       	st	Z, r20
					irCommMaxSensorSignalIndexTemp++;					
    8b42:	8f 5f       	subi	r24, 0xFF	; 255
    8b44:	80 93 d3 04 	sts	0x04D3, r24

					irCommProxSum += irCommMaxSensorSignal[i];
    8b48:	6a 01       	movw	r12, r20
    8b4a:	ee 24       	eor	r14, r14
    8b4c:	d7 fc       	sbrc	r13, 7
    8b4e:	e0 94       	com	r14
    8b50:	fe 2c       	mov	r15, r14
    8b52:	80 91 e9 04 	lds	r24, 0x04E9
    8b56:	90 91 ea 04 	lds	r25, 0x04EA
    8b5a:	a0 91 eb 04 	lds	r26, 0x04EB
    8b5e:	b0 91 ec 04 	lds	r27, 0x04EC
    8b62:	8c 0d       	add	r24, r12
    8b64:	9d 1d       	adc	r25, r13
    8b66:	ae 1d       	adc	r26, r14
    8b68:	bf 1d       	adc	r27, r15
    8b6a:	80 93 e9 04 	sts	0x04E9, r24
    8b6e:	90 93 ea 04 	sts	0x04EA, r25
    8b72:	a0 93 eb 04 	sts	0x04EB, r26
    8b76:	b0 93 ec 04 	sts	0x04EC, r27
					if(irCommComputeShift == 1) {	// compute the shift between the rx sampling and tx signal
    8b7a:	bb 2d       	mov	r27, r11
    8b7c:	b1 30       	cpi	r27, 0x01	; 1
    8b7e:	09 f4       	brne	.+2      	; 0x8b82 <irCommTasks+0x2b8>
    8b80:	bd c2       	rjmp	.+1402   	; 0x90fc <irCommTasks+0x832>
							irCommTempMax = 0;
							irCommComputeShift = 2;
							irCommShiftCount--;	// the current sample is already part of the signal start thus do not skip it
							irCommRxStartPeakDuration = 0;
						}
					 } else if(irCommComputeShift == 2) {		
    8b82:	fb 2d       	mov	r31, r11
    8b84:	f2 30       	cpi	r31, 0x02	; 2
    8b86:	09 f4       	brne	.+2      	; 0x8b8a <irCommTasks+0x2c0>
    8b88:	29 c3       	rjmp	.+1618   	; 0x91dc <irCommTasks+0x912>
						}	
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
							if((irCommMaxSensorSignal[i]==irCommTempMax) && (irCommRxPeakHighToLow==1)) {
								irCommComputeShift = 0;
							} else if((irCommMaxSensorSignal[i]==irCommTempMin) && (irCommRxPeakHighToLow==0)) {
								irCommComputeShift = 0;
    8b8a:	08 5f       	subi	r16, 0xF8	; 248
    8b8c:	1f 4f       	sbci	r17, 0xFF	; 255
    8b8e:	2e 5f       	subi	r18, 0xFE	; 254
    8b90:	3f 4f       	sbci	r19, 0xFF	; 255
				irCommProxSum = 0;
				irCommTempMin = 1024;
				irCommTempMax = 0;
				irCommShiftCount = 0;
				irCommComputeShift = 1;												
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    8b92:	00 3a       	cpi	r16, 0xA0	; 160
    8b94:	11 05       	cpc	r17, r1
    8b96:	09 f4       	brne	.+2      	; 0x8b9a <irCommTasks+0x2d0>
    8b98:	97 c4       	rjmp	.+2350   	; 0x94c8 <irCommTasks+0xbfe>
					irCommMaxSensorSignal[i] = irCommProxValuesCurr[irCommRxMaxSensor+i*8];
    8b9a:	80 91 5c 0b 	lds	r24, 0x0B5C
    8b9e:	90 91 5d 0b 	lds	r25, 0x0B5D
    8ba2:	80 0f       	add	r24, r16
    8ba4:	91 1f       	adc	r25, r17
    8ba6:	88 0f       	add	r24, r24
    8ba8:	99 1f       	adc	r25, r25
    8baa:	e0 91 2d 08 	lds	r30, 0x082D
    8bae:	f0 91 2e 08 	lds	r31, 0x082E
    8bb2:	e8 0f       	add	r30, r24
    8bb4:	f9 1f       	adc	r31, r25
    8bb6:	40 81       	ld	r20, Z
    8bb8:	51 81       	ldd	r21, Z+1	; 0x01
    8bba:	f9 01       	movw	r30, r18
    8bbc:	51 83       	std	Z+1, r21	; 0x01
    8bbe:	40 83       	st	Z, r20

					if(irCommMaxSensorSignalIndexTemp>39) {
    8bc0:	80 91 d3 04 	lds	r24, 0x04D3
    8bc4:	88 32       	cpi	r24, 0x28	; 40
    8bc6:	08 f4       	brcc	.+2      	; 0x8bca <irCommTasks+0x300>
    8bc8:	b4 cf       	rjmp	.-152    	; 0x8b32 <irCommTasks+0x268>
						irCommMaxSensorSignalIndexTemp = 39;
    8bca:	a0 92 d3 04 	sts	0x04D3, r10
						updateRedLed(0);
    8bce:	80 e0       	ldi	r24, 0x00	; 0
    8bd0:	29 83       	std	Y+1, r18	; 0x01
    8bd2:	3a 83       	std	Y+2, r19	; 0x02
    8bd4:	0e 94 32 3b 	call	0x7664	; 0x7664 <updateRedLed>
    8bd8:	80 91 d3 04 	lds	r24, 0x04D3
    8bdc:	29 81       	ldd	r18, Y+1	; 0x01
    8bde:	3a 81       	ldd	r19, Y+2	; 0x02
    8be0:	d9 01       	movw	r26, r18
    8be2:	4d 91       	ld	r20, X+
    8be4:	5c 91       	ld	r21, X
    8be6:	11 97       	sbiw	r26, 0x01	; 1
    8be8:	b0 90 f2 04 	lds	r11, 0x04F2
    8bec:	a2 cf       	rjmp	.-188    	; 0x8b32 <irCommTasks+0x268>
				irCommTxPulseState = 0;	
				irCommState = IRCOMM_TX_COMPUTE_TIMINGS;				
				break;

			case IRCOMM_TX_COMPUTE_TIMINGS:
				updateBlueLed(255);
    8bee:	8f ef       	ldi	r24, 0xFF	; 255
    8bf0:	0e 94 5a 3b 	call	0x76b4	; 0x76b4 <updateBlueLed>
				if(irCommTxBitToTransmit[irCommTxBitCount] == 3) {
    8bf4:	20 91 0c 05 	lds	r18, 0x050C
    8bf8:	e2 2f       	mov	r30, r18
    8bfa:	f0 e0       	ldi	r31, 0x00	; 0
    8bfc:	ec 5c       	subi	r30, 0xCC	; 204
    8bfe:	fa 4f       	sbci	r31, 0xFA	; 250
    8c00:	00 81       	ld	r16, Z
    8c02:	03 30       	cpi	r16, 0x03	; 3
    8c04:	09 f4       	brne	.+2      	; 0x8c08 <irCommTasks+0x33e>
    8c06:	9b c6       	rjmp	.+3382   	; 0x993e <irCommTasks+0x1074>
					updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START2_DURATION;					
					irCommTxSwitchCount = IRCOMM_BIT_START2_SWITCH_COUNT;
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 2) {
    8c08:	02 30       	cpi	r16, 0x02	; 2
    8c0a:	09 f4       	brne	.+2      	; 0x8c0e <irCommTasks+0x344>
    8c0c:	c2 c6       	rjmp	.+3460   	; 0x9992 <irCommTasks+0x10c8>
					updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START1_DURATION;					
					irCommTxSwitchCount = IRCOMM_BIT_START1_SWITCH_COUNT;
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 1) {
    8c0e:	01 30       	cpi	r16, 0x01	; 1
    8c10:	09 f4       	brne	.+2      	; 0x8c14 <irCommTasks+0x34a>
    8c12:	6a c2       	rjmp	.+1236   	; 0x90e8 <irCommTasks+0x81e>
					irCommTxDuration = IRCOMM_BIT1_DURATOIN;					
					irCommTxSwitchCount = IRCOMM_BIT1_SWITCH_COUNT;
				} else {
					irCommTxDuration = IRCOMM_BIT0_DURATION;						
    8c14:	8e e1       	ldi	r24, 0x1E	; 30
    8c16:	90 e0       	ldi	r25, 0x00	; 0
    8c18:	90 93 0f 05 	sts	0x050F, r25
    8c1c:	80 93 0e 05 	sts	0x050E, r24
					irCommTxSwitchCount = IRCOMM_BIT0_SWITCH_COUNT;
    8c20:	88 e0       	ldi	r24, 0x08	; 8
    8c22:	80 93 10 05 	sts	0x0510, r24
				}
				if(irCommTxBitCount == 0) {
    8c26:	22 23       	and	r18, r18
    8c28:	51 f4       	brne	.+20     	; 0x8c3e <irCommTasks+0x374>
					//PORTA = irCommTxSensorMask;
					if(irCommTxSensorGroup==0) {
    8c2a:	80 91 14 05 	lds	r24, 0x0514
    8c2e:	88 23       	and	r24, r24
    8c30:	09 f0       	breq	.+2      	; 0x8c34 <irCommTasks+0x36a>
    8c32:	27 c6       	rjmp	.+3150   	; 0x9882 <irCommTasks+0xfb8>
						PORTA = 0xAA;
    8c34:	8a ea       	ldi	r24, 0xAA	; 170
    8c36:	82 b9       	out	0x02, r24	; 2
					} else {
						PORTA = 0x55;
					}					
					irCommTxPulseState = 1;
    8c38:	81 e0       	ldi	r24, 0x01	; 1
    8c3a:	80 93 0d 05 	sts	0x050D, r24
				}
				irCommTxDurationCycle = 0;
    8c3e:	10 92 12 05 	sts	0x0512, r1
				irCommTxSwitchCounter = 0;						
    8c42:	10 92 11 05 	sts	0x0511, r1
				irCommState = IRCOMM_TX_TRANSMIT_BIT;
    8c46:	83 e0       	ldi	r24, 0x03	; 3
    8c48:	80 93 c6 04 	sts	0x04C6, r24
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ1;
    8c4c:	80 93 04 05 	sts	0x0504, r24
    8c50:	57 ce       	rjmp	.-850    	; 0x8900 <irCommTasks+0x36>
void irCommTasks() {
	int i = 0;

	if(irCommMode==IRCOMM_MODE_RECEIVE) {

		switch(irCommState) {
    8c52:	87 30       	cpi	r24, 0x07	; 7
    8c54:	09 f4       	brne	.+2      	; 0x8c58 <irCommTasks+0x38e>
    8c56:	f3 c4       	rjmp	.+2534   	; 0x963e <irCommTasks+0xd74>
    8c58:	88 30       	cpi	r24, 0x08	; 8
    8c5a:	09 f0       	breq	.+2      	; 0x8c5e <irCommTasks+0x394>
    8c5c:	51 ce       	rjmp	.-862    	; 0x8900 <irCommTasks+0x36>
				irCommState = IRCOMM_RX_IDLE_STATE;

				break;

			case IRCOMM_RX_DEBUG:								
				irCommSendValues = 0;						
    8c5e:	10 92 c9 04 	sts	0x04C9, r1
				while(irCommSendValues==0);	// wait for the start from the uart (computer)
    8c62:	80 91 c9 04 	lds	r24, 0x04C9
    8c66:	88 23       	and	r24, r24
    8c68:	e1 f3       	breq	.-8      	; 0x8c62 <irCommTasks+0x398>
				usart0Transmit(0xFF, 1);
    8c6a:	8f ef       	ldi	r24, 0xFF	; 255
    8c6c:	61 e0       	ldi	r22, 0x01	; 1
    8c6e:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
				usart0Transmit(irCommRxMaxSensorTemp[0],1);
    8c72:	80 91 0b 0b 	lds	r24, 0x0B0B
    8c76:	61 e0       	ldi	r22, 0x01	; 1
    8c78:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
				usart0Transmit(irCommRxMaxSensorTemp[1],1);
    8c7c:	80 91 0d 0b 	lds	r24, 0x0B0D
    8c80:	61 e0       	ldi	r22, 0x01	; 1
    8c82:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
				usart0Transmit(irCommRxMaxDiffTemp[0]&0xFF,1);
    8c86:	80 91 44 0b 	lds	r24, 0x0B44
    8c8a:	61 e0       	ldi	r22, 0x01	; 1
    8c8c:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
				usart0Transmit(irCommRxMaxDiffTemp[0]>>8,1);
    8c90:	80 91 45 0b 	lds	r24, 0x0B45
    8c94:	61 e0       	ldi	r22, 0x01	; 1
    8c96:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
				usart0Transmit(irCommRxMaxDiffTemp[1]&0xFF,1);
    8c9a:	80 91 46 0b 	lds	r24, 0x0B46
    8c9e:	61 e0       	ldi	r22, 0x01	; 1
    8ca0:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
				usart0Transmit(irCommRxMaxDiffTemp[1]>>8,1);
    8ca4:	80 91 47 0b 	lds	r24, 0x0B47
    8ca8:	61 e0       	ldi	r22, 0x01	; 1
    8caa:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
				usart0Transmit(irCommProxMeanTemp[0]&0xFF,1);
    8cae:	80 91 4f 05 	lds	r24, 0x054F
    8cb2:	61 e0       	ldi	r22, 0x01	; 1
    8cb4:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
				usart0Transmit(irCommProxMeanTemp[0]>>8,1);
    8cb8:	80 91 50 05 	lds	r24, 0x0550
    8cbc:	61 e0       	ldi	r22, 0x01	; 1
    8cbe:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
				usart0Transmit(irCommProxMeanTemp[1]&0xFF,1);
    8cc2:	80 91 51 05 	lds	r24, 0x0551
    8cc6:	61 e0       	ldi	r22, 0x01	; 1
    8cc8:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
				usart0Transmit(irCommProxMeanTemp[1]>>8,1);
    8ccc:	80 91 52 05 	lds	r24, 0x0552
    8cd0:	61 e0       	ldi	r22, 0x01	; 1
    8cd2:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
				usart0Transmit(irCommSwitchCountTemp[0],1);
    8cd6:	80 91 31 05 	lds	r24, 0x0531
    8cda:	61 e0       	ldi	r22, 0x01	; 1
    8cdc:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
				usart0Transmit(irCommSwitchCountTemp[1],1);
    8ce0:	80 91 32 05 	lds	r24, 0x0532
    8ce4:	61 e0       	ldi	r22, 0x01	; 1
    8ce6:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
    8cea:	bd e4       	ldi	r27, 0x4D	; 77
    8cec:	cb 2e       	mov	r12, r27
    8cee:	b8 e0       	ldi	r27, 0x08	; 8
    8cf0:	db 2e       	mov	r13, r27
    8cf2:	07 e5       	ldi	r16, 0x57	; 87
    8cf4:	15 e0       	ldi	r17, 0x05	; 5
				for(i=0; i<IRCOMM_SAMPLING_WINDOW*2; i++) {
					irCommTempValue = irCommMaxSensorSignalTemp[i];
    8cf6:	f6 01       	movw	r30, r12
    8cf8:	80 81       	ld	r24, Z
    8cfa:	91 81       	ldd	r25, Z+1	; 0x01
    8cfc:	22 e0       	ldi	r18, 0x02	; 2
    8cfe:	30 e0       	ldi	r19, 0x00	; 0
    8d00:	c2 0e       	add	r12, r18
    8d02:	d3 1e       	adc	r13, r19
    8d04:	80 93 c7 04 	sts	0x04C7, r24
    8d08:	90 93 c8 04 	sts	0x04C8, r25
					usart0Transmit(irCommTempValue&0xFF,1);
    8d0c:	61 e0       	ldi	r22, 0x01	; 1
    8d0e:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
					usart0Transmit(irCommTempValue>>8,1);
    8d12:	80 91 c8 04 	lds	r24, 0x04C8
    8d16:	61 e0       	ldi	r22, 0x01	; 1
    8d18:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
					irCommTempValue = irCommMaxSensorSignalFiltTemp[i];
    8d1c:	d8 01       	movw	r26, r16
    8d1e:	8c 91       	ld	r24, X
    8d20:	11 96       	adiw	r26, 0x01	; 1
    8d22:	9c 91       	ld	r25, X
    8d24:	0e 5f       	subi	r16, 0xFE	; 254
    8d26:	1f 4f       	sbci	r17, 0xFF	; 255
    8d28:	80 93 c7 04 	sts	0x04C7, r24
    8d2c:	90 93 c8 04 	sts	0x04C8, r25
					usart0Transmit(irCommTempValue&0xFF,1);
    8d30:	61 e0       	ldi	r22, 0x01	; 1
    8d32:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
					usart0Transmit(irCommTempValue>>8,1);
    8d36:	80 91 c8 04 	lds	r24, 0x04C8
    8d3a:	61 e0       	ldi	r22, 0x01	; 1
    8d3c:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
				usart0Transmit(irCommProxMeanTemp[0]>>8,1);
				usart0Transmit(irCommProxMeanTemp[1]&0xFF,1);
				usart0Transmit(irCommProxMeanTemp[1]>>8,1);
				usart0Transmit(irCommSwitchCountTemp[0],1);
				usart0Transmit(irCommSwitchCountTemp[1],1);
				for(i=0; i<IRCOMM_SAMPLING_WINDOW*2; i++) {
    8d40:	bd e9       	ldi	r27, 0x9D	; 157
    8d42:	cb 16       	cp	r12, r27
    8d44:	b8 e0       	ldi	r27, 0x08	; 8
    8d46:	db 06       	cpc	r13, r27
    8d48:	b1 f6       	brne	.-84     	; 0x8cf6 <irCommTasks+0x42c>
					usart0Transmit(irCommTempValue>>8,1);
					irCommTempValue = irCommMaxSensorSignalFiltTemp[i];
					usart0Transmit(irCommTempValue&0xFF,1);
					usart0Transmit(irCommTempValue>>8,1);
				}
				usart0Transmit(irCommMaxSensorValueCurrTemp[0]&0xFF,1);
    8d4a:	80 91 18 05 	lds	r24, 0x0518
    8d4e:	61 e0       	ldi	r22, 0x01	; 1
    8d50:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
				usart0Transmit(irCommMaxSensorValueCurrTemp[0]>>8,1);
    8d54:	80 91 19 05 	lds	r24, 0x0519
    8d58:	61 e0       	ldi	r22, 0x01	; 1
    8d5a:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
				usart0Transmit(irCommMaxSensorValueCurrTemp[1]&0xFF,1);
    8d5e:	80 91 1a 05 	lds	r24, 0x051A
    8d62:	61 e0       	ldi	r22, 0x01	; 1
    8d64:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
				usart0Transmit(irCommMaxSensorValueCurrTemp[1]>>8,1);
    8d68:	80 91 1b 05 	lds	r24, 0x051B
    8d6c:	61 e0       	ldi	r22, 0x01	; 1
    8d6e:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
				usart0Transmit(irCommMinSensorValueCurrTemp[0]&0xFF,1);
    8d72:	80 91 0f 0b 	lds	r24, 0x0B0F
    8d76:	61 e0       	ldi	r22, 0x01	; 1
    8d78:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
				usart0Transmit(irCommMinSensorValueCurrTemp[0]>>8,1);
    8d7c:	80 91 10 0b 	lds	r24, 0x0B10
    8d80:	61 e0       	ldi	r22, 0x01	; 1
    8d82:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
				usart0Transmit(irCommMinSensorValueCurrTemp[1]&0xFF,1);
    8d86:	80 91 11 0b 	lds	r24, 0x0B11
    8d8a:	61 e0       	ldi	r22, 0x01	; 1
    8d8c:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
				usart0Transmit(irCommMinSensorValueCurrTemp[1]>>8,1);
    8d90:	80 91 12 0b 	lds	r24, 0x0B12
    8d94:	61 e0       	ldi	r22, 0x01	; 1
    8d96:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
				usart0Transmit(irCommShiftCountTemp[0],1);
    8d9a:	80 91 5f 0b 	lds	r24, 0x0B5F
    8d9e:	61 e0       	ldi	r22, 0x01	; 1
    8da0:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
				usart0Transmit(irCommShiftCountTemp[1],1);
    8da4:	80 91 60 0b 	lds	r24, 0x0B60
    8da8:	61 e0       	ldi	r22, 0x01	; 1
    8daa:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
				usart0Transmit(irCommShiftCountFinalTemp[0],1);
    8dae:	80 91 17 0b 	lds	r24, 0x0B17
    8db2:	61 e0       	ldi	r22, 0x01	; 1
    8db4:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
				usart0Transmit(irCommShiftCountFinalTemp[1],1);
    8db8:	80 91 18 0b 	lds	r24, 0x0B18
    8dbc:	61 e0       	ldi	r22, 0x01	; 1
    8dbe:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
				usart0Transmit(irCommStartDiffTemp[0]&0xFF,1);
    8dc2:	80 91 9e 08 	lds	r24, 0x089E
    8dc6:	61 e0       	ldi	r22, 0x01	; 1
    8dc8:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
				usart0Transmit(irCommStartDiffTemp[0]>>8,1);
    8dcc:	80 91 9f 08 	lds	r24, 0x089F
    8dd0:	61 e0       	ldi	r22, 0x01	; 1
    8dd2:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
				usart0Transmit(irCommStartDiffTemp[1]&0xFF,1);
    8dd6:	80 91 a0 08 	lds	r24, 0x08A0
    8dda:	61 e0       	ldi	r22, 0x01	; 1
    8ddc:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
				usart0Transmit(irCommStartDiffTemp[1]>>8,1);
    8de0:	80 91 a1 08 	lds	r24, 0x08A1
    8de4:	61 e0       	ldi	r22, 0x01	; 1
    8de6:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
				usart0Transmit(irCommComputeShiftTemp[0],1);
    8dea:	80 91 4c 05 	lds	r24, 0x054C
    8dee:	61 e0       	ldi	r22, 0x01	; 1
    8df0:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
				usart0Transmit(irCommComputeShiftTemp[1],1);
    8df4:	80 91 4d 05 	lds	r24, 0x054D
    8df8:	61 e0       	ldi	r22, 0x01	; 1
    8dfa:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
				usart0Transmit(irCommRxPeakHighToLowTemp[0],1);
    8dfe:	80 91 a9 05 	lds	r24, 0x05A9
    8e02:	61 e0       	ldi	r22, 0x01	; 1
    8e04:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
				usart0Transmit(irCommRxPeakHighToLowTemp[1],1);
    8e08:	80 91 aa 05 	lds	r24, 0x05AA
    8e0c:	61 e0       	ldi	r22, 0x01	; 1
    8e0e:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
				usart0Transmit(irCommRxStartPeakDurationTemp[0],1);
    8e12:	80 91 eb 06 	lds	r24, 0x06EB
    8e16:	61 e0       	ldi	r22, 0x01	; 1
    8e18:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
				usart0Transmit(irCommRxStartPeakDurationTemp[1],1);
    8e1c:	80 91 ec 06 	lds	r24, 0x06EC
    8e20:	61 e0       	ldi	r22, 0x01	; 1
    8e22:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
				usart0Transmit(irCommRxStartBitDetectedTemp[0],1);
    8e26:	80 91 55 05 	lds	r24, 0x0555
    8e2a:	61 e0       	ldi	r22, 0x01	; 1
    8e2c:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
				usart0Transmit(irCommRxStartBitDetectedTemp[1],1);
    8e30:	80 91 56 05 	lds	r24, 0x0556
    8e34:	61 e0       	ldi	r22, 0x01	; 1
    8e36:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
				usart0Transmit(irCommSyncStateTemp[0],1);
    8e3a:	80 91 4a 05 	lds	r24, 0x054A
    8e3e:	61 e0       	ldi	r22, 0x01	; 1
    8e40:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
				usart0Transmit(irCommSyncStateTemp[1],1);
    8e44:	80 91 4b 05 	lds	r24, 0x054B
    8e48:	61 e0       	ldi	r22, 0x01	; 1
    8e4a:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
				for(i=0; i<14; i++) {
					usart0Transmit(irCommStateTemp[i],1);
    8e4e:	80 91 1c 05 	lds	r24, 0x051C
    8e52:	61 e0       	ldi	r22, 0x01	; 1
    8e54:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
    8e58:	80 91 1d 05 	lds	r24, 0x051D
    8e5c:	61 e0       	ldi	r22, 0x01	; 1
    8e5e:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
    8e62:	80 91 1e 05 	lds	r24, 0x051E
    8e66:	61 e0       	ldi	r22, 0x01	; 1
    8e68:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
    8e6c:	80 91 1f 05 	lds	r24, 0x051F
    8e70:	61 e0       	ldi	r22, 0x01	; 1
    8e72:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
    8e76:	80 91 20 05 	lds	r24, 0x0520
    8e7a:	61 e0       	ldi	r22, 0x01	; 1
    8e7c:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
    8e80:	80 91 21 05 	lds	r24, 0x0521
    8e84:	61 e0       	ldi	r22, 0x01	; 1
    8e86:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
    8e8a:	80 91 22 05 	lds	r24, 0x0522
    8e8e:	61 e0       	ldi	r22, 0x01	; 1
    8e90:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
    8e94:	80 91 23 05 	lds	r24, 0x0523
    8e98:	61 e0       	ldi	r22, 0x01	; 1
    8e9a:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
    8e9e:	80 91 24 05 	lds	r24, 0x0524
    8ea2:	61 e0       	ldi	r22, 0x01	; 1
    8ea4:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
    8ea8:	80 91 25 05 	lds	r24, 0x0525
    8eac:	61 e0       	ldi	r22, 0x01	; 1
    8eae:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
    8eb2:	80 91 26 05 	lds	r24, 0x0526
    8eb6:	61 e0       	ldi	r22, 0x01	; 1
    8eb8:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
    8ebc:	80 91 27 05 	lds	r24, 0x0527
    8ec0:	61 e0       	ldi	r22, 0x01	; 1
    8ec2:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
    8ec6:	80 91 28 05 	lds	r24, 0x0528
    8eca:	61 e0       	ldi	r22, 0x01	; 1
    8ecc:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
    8ed0:	80 91 29 05 	lds	r24, 0x0529
    8ed4:	61 e0       	ldi	r22, 0x01	; 1
    8ed6:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
    8eda:	09 e7       	ldi	r16, 0x79	; 121
    8edc:	19 e0       	ldi	r17, 0x09	; 9
				}
				for(i=0; i<200; i++) {
					irCommTempValue = irCommBitsSignalTemp[i];
    8ede:	f8 01       	movw	r30, r16
    8ee0:	80 81       	ld	r24, Z
    8ee2:	91 81       	ldd	r25, Z+1	; 0x01
    8ee4:	0e 5f       	subi	r16, 0xFE	; 254
    8ee6:	1f 4f       	sbci	r17, 0xFF	; 255
    8ee8:	80 93 c7 04 	sts	0x04C7, r24
    8eec:	90 93 c8 04 	sts	0x04C8, r25
					usart0Transmit(irCommTempValue&0xFF,1);
    8ef0:	61 e0       	ldi	r22, 0x01	; 1
    8ef2:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
					usart0Transmit(irCommTempValue>>8,1);
    8ef6:	80 91 c8 04 	lds	r24, 0x04C8
    8efa:	61 e0       	ldi	r22, 0x01	; 1
    8efc:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
				usart0Transmit(irCommSyncStateTemp[0],1);
				usart0Transmit(irCommSyncStateTemp[1],1);
				for(i=0; i<14; i++) {
					usart0Transmit(irCommStateTemp[i],1);
				}
				for(i=0; i<200; i++) {
    8f00:	fb e0       	ldi	r31, 0x0B	; 11
    8f02:	09 30       	cpi	r16, 0x09	; 9
    8f04:	1f 07       	cpc	r17, r31
    8f06:	59 f7       	brne	.-42     	; 0x8ede <irCommTasks+0x614>
					irCommTempValue = irCommBitsSignalTemp[i];
					usart0Transmit(irCommTempValue&0xFF,1);
					usart0Transmit(irCommTempValue>>8,1);
				}
				for(i=0; i<10; i++) {
					usart0Transmit(irCommRxBitReceivedTemp[i],1);
    8f08:	80 91 3f 08 	lds	r24, 0x083F
    8f0c:	61 e0       	ldi	r22, 0x01	; 1
    8f0e:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
    8f12:	80 91 40 08 	lds	r24, 0x0840
    8f16:	61 e0       	ldi	r22, 0x01	; 1
    8f18:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
    8f1c:	80 91 41 08 	lds	r24, 0x0841
    8f20:	61 e0       	ldi	r22, 0x01	; 1
    8f22:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
    8f26:	80 91 42 08 	lds	r24, 0x0842
    8f2a:	61 e0       	ldi	r22, 0x01	; 1
    8f2c:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
    8f30:	80 91 43 08 	lds	r24, 0x0843
    8f34:	61 e0       	ldi	r22, 0x01	; 1
    8f36:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
    8f3a:	80 91 44 08 	lds	r24, 0x0844
    8f3e:	61 e0       	ldi	r22, 0x01	; 1
    8f40:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
    8f44:	80 91 45 08 	lds	r24, 0x0845
    8f48:	61 e0       	ldi	r22, 0x01	; 1
    8f4a:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
    8f4e:	80 91 46 08 	lds	r24, 0x0846
    8f52:	61 e0       	ldi	r22, 0x01	; 1
    8f54:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
    8f58:	80 91 47 08 	lds	r24, 0x0847
    8f5c:	61 e0       	ldi	r22, 0x01	; 1
    8f5e:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
    8f62:	80 91 48 08 	lds	r24, 0x0848
    8f66:	61 e0       	ldi	r22, 0x01	; 1
    8f68:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
				}
				usart0Transmit(irCommRxCrc,1);
    8f6c:	80 91 e8 04 	lds	r24, 0x04E8
    8f70:	61 e0       	ldi	r22, 0x01	; 1
    8f72:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
				usart0Transmit(irCommRxCrcError,1);
    8f76:	80 91 f8 04 	lds	r24, 0x04F8
    8f7a:	61 e0       	ldi	r22, 0x01	; 1
    8f7c:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
				usart0Transmit(irCommRxByte,1);
    8f80:	80 91 f9 04 	lds	r24, 0x04F9
    8f84:	61 e0       	ldi	r22, 0x01	; 1
    8f86:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
				usart0Transmit(irCommRxByteExpected,1);				
    8f8a:	80 91 fc 04 	lds	r24, 0x04FC
    8f8e:	61 e0       	ldi	r22, 0x01	; 1
    8f90:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>

				irCommState = IRCOMM_RX_STOP;
    8f94:	89 e0       	ldi	r24, 0x09	; 9
    8f96:	80 93 c6 04 	sts	0x04C6, r24
				break;
    8f9a:	b2 cc       	rjmp	.-1692   	; 0x8900 <irCommTasks+0x36>
			case IRCOMM_RX_WAITING_BIT:
				break;

			case IRCOMM_RX_READ_BIT:
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
    8f9c:	10 92 e9 04 	sts	0x04E9, r1
    8fa0:	10 92 ea 04 	sts	0x04EA, r1
    8fa4:	10 92 eb 04 	sts	0x04EB, r1
    8fa8:	10 92 ec 04 	sts	0x04EC, r1
				irCommTempMin = 1024;
    8fac:	80 e0       	ldi	r24, 0x00	; 0
    8fae:	94 e0       	ldi	r25, 0x04	; 4
    8fb0:	90 93 f0 04 	sts	0x04F0, r25
    8fb4:	80 93 ef 04 	sts	0x04EF, r24
				irCommTempMax = 0;
    8fb8:	10 92 ee 04 	sts	0x04EE, r1
    8fbc:	10 92 ed 04 	sts	0x04ED, r1
	irCommRxBitReceivedIndexTemp = 0;
	
	
}

void irCommTasks() {
    8fc0:	80 91 5c 0b 	lds	r24, 0x0B5C
    8fc4:	90 91 5d 0b 	lds	r25, 0x0B5D
    8fc8:	88 0f       	add	r24, r24
    8fca:	99 1f       	adc	r25, r25
    8fcc:	e0 91 2d 08 	lds	r30, 0x082D
    8fd0:	f0 91 2e 08 	lds	r31, 0x082E
    8fd4:	e8 0f       	add	r30, r24
    8fd6:	f9 1f       	adc	r31, r25

			case IRCOMM_RX_READ_BIT:
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
				irCommTempMin = 1024;
				irCommTempMax = 0;
    8fd8:	0b e1       	ldi	r16, 0x1B	; 27
    8fda:	1b e0       	ldi	r17, 0x0B	; 11
	irCommRxBitReceivedIndexTemp = 0;
	
	
}

void irCommTasks() {
    8fdc:	58 e2       	ldi	r21, 0x28	; 40
    8fde:	a5 2e       	mov	r10, r21
    8fe0:	b1 2c       	mov	r11, r1
    8fe2:	a0 0e       	add	r10, r16
    8fe4:	b1 1e       	adc	r11, r17
    8fe6:	48 01       	movw	r8, r16
    8fe8:	60 e0       	ldi	r22, 0x00	; 0
    8fea:	70 e0       	ldi	r23, 0x00	; 0
    8fec:	40 e0       	ldi	r20, 0x00	; 0
    8fee:	54 e0       	ldi	r21, 0x04	; 4
    8ff0:	cc 24       	eor	r12, r12
    8ff2:	dd 24       	eor	r13, r13
    8ff4:	76 01       	movw	r14, r12
    8ff6:	08 c0       	rjmp	.+16     	; 0x9008 <irCommTasks+0x73e>
			case IRCOMM_RX_READ_BIT:
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
				irCommTempMin = 1024;
				irCommTempMax = 0;
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    8ff8:	40 91 ef 04 	lds	r20, 0x04EF
    8ffc:	50 91 f0 04 	lds	r21, 0x04F0
    9000:	60 91 ed 04 	lds	r22, 0x04ED
    9004:	70 91 ee 04 	lds	r23, 0x04EE
					irCommMaxSensorSignal[i] = irCommProxValuesCurr[irCommRxMaxSensor+i*8];
    9008:	20 81       	ld	r18, Z
    900a:	31 81       	ldd	r19, Z+1	; 0x01
    900c:	d4 01       	movw	r26, r8
    900e:	2d 93       	st	X+, r18
    9010:	3d 93       	st	X+, r19
    9012:	4d 01       	movw	r8, r26
					irCommProxSum += irCommMaxSensorSignal[i];
    9014:	c9 01       	movw	r24, r18
    9016:	aa 27       	eor	r26, r26
    9018:	97 fd       	sbrc	r25, 7
    901a:	a0 95       	com	r26
    901c:	ba 2f       	mov	r27, r26
    901e:	c8 0e       	add	r12, r24
    9020:	d9 1e       	adc	r13, r25
    9022:	ea 1e       	adc	r14, r26
    9024:	fb 1e       	adc	r15, r27
					if(irCommTempMin > irCommMaxSensorSignal[i]) {
    9026:	24 17       	cp	r18, r20
    9028:	35 07       	cpc	r19, r21
    902a:	2c f4       	brge	.+10     	; 0x9036 <irCommTasks+0x76c>
						irCommTempMin = irCommMaxSensorSignal[i];
    902c:	30 93 f0 04 	sts	0x04F0, r19
    9030:	20 93 ef 04 	sts	0x04EF, r18
    9034:	a9 01       	movw	r20, r18
					}
					if(irCommTempMax < irCommMaxSensorSignal[i]) {
    9036:	62 17       	cp	r22, r18
    9038:	73 07       	cpc	r23, r19
    903a:	2c f4       	brge	.+10     	; 0x9046 <irCommTasks+0x77c>
						irCommTempMax = irCommMaxSensorSignal[i];
    903c:	30 93 ee 04 	sts	0x04EE, r19
    9040:	20 93 ed 04 	sts	0x04ED, r18
    9044:	b9 01       	movw	r22, r18
    9046:	70 96       	adiw	r30, 0x10	; 16
			case IRCOMM_RX_READ_BIT:
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
				irCommTempMin = 1024;
				irCommTempMax = 0;
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    9048:	b3 e4       	ldi	r27, 0x43	; 67
    904a:	8b 16       	cp	r8, r27
    904c:	bb e0       	ldi	r27, 0x0B	; 11
    904e:	9b 06       	cpc	r9, r27
    9050:	99 f6       	brne	.-90     	; 0x8ff8 <irCommTasks+0x72e>
    9052:	c0 92 e9 04 	sts	0x04E9, r12
    9056:	d0 92 ea 04 	sts	0x04EA, r13
    905a:	e0 92 eb 04 	sts	0x04EB, r14
    905e:	f0 92 ec 04 	sts	0x04EC, r15
					if(irCommTempMax < irCommMaxSensorSignal[i]) {
						irCommTempMax = irCommMaxSensorSignal[i];
					}
				}

				if((irCommTempMax-irCommTempMin) < IRCOMM_DETECTION_AMPLITUDE_THR) {	// error...no significant signal perceived					
    9062:	64 1b       	sub	r22, r20
    9064:	75 0b       	sbc	r23, r21
    9066:	68 32       	cpi	r22, 0x28	; 40
    9068:	71 05       	cpc	r23, r1
    906a:	0c f4       	brge	.+2      	; 0x906e <irCommTasks+0x7a4>
    906c:	81 c3       	rjmp	.+1794   	; 0x9770 <irCommTasks+0xea6>

					resetDebugVariables();
					break;
				}

				irCommProxMean = (int)(irCommProxSum / IRCOMM_SAMPLING_WINDOW);
    906e:	c7 01       	movw	r24, r14
    9070:	b6 01       	movw	r22, r12
    9072:	24 e1       	ldi	r18, 0x14	; 20
    9074:	30 e0       	ldi	r19, 0x00	; 0
    9076:	40 e0       	ldi	r20, 0x00	; 0
    9078:	50 e0       	ldi	r21, 0x00	; 0
    907a:	0e 94 61 52 	call	0xa4c2	; 0xa4c2 <__divmodsi4>
    907e:	b9 01       	movw	r22, r18
    9080:	30 93 f4 04 	sts	0x04F4, r19
    9084:	20 93 f3 04 	sts	0x04F3, r18
    9088:	20 91 e4 04 	lds	r18, 0x04E4
				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
					irCommMaxSensorSignal[i] -= irCommProxMean;

					if(irCommBitsSignalIndexTemp>199) {
						irCommBitsSignalIndexTemp = 199;
    908c:	47 ec       	ldi	r20, 0xC7	; 199
    908e:	c4 2e       	mov	r12, r20
    9090:	16 c0       	rjmp	.+44     	; 0x90be <irCommTasks+0x7f4>
						updateRedLed(0);
					}
					irCommBitsSignalTemp[irCommBitsSignalIndexTemp] = irCommMaxSensorSignal[i];
    9092:	e2 2f       	mov	r30, r18
    9094:	f0 e0       	ldi	r31, 0x00	; 0
    9096:	ee 0f       	add	r30, r30
    9098:	ff 1f       	adc	r31, r31
    909a:	e7 58       	subi	r30, 0x87	; 135
    909c:	f6 4f       	sbci	r31, 0xF6	; 246
    909e:	91 83       	std	Z+1, r25	; 0x01
    90a0:	80 83       	st	Z, r24
					irCommBitsSignalIndexTemp++;
    90a2:	2f 5f       	subi	r18, 0xFF	; 255
    90a4:	20 93 e4 04 	sts	0x04E4, r18
    90a8:	0e 5f       	subi	r16, 0xFE	; 254
    90aa:	1f 4f       	sbci	r17, 0xFF	; 255
				}

				irCommProxMean = (int)(irCommProxSum / IRCOMM_SAMPLING_WINDOW);

				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    90ac:	bb e0       	ldi	r27, 0x0B	; 11
    90ae:	03 34       	cpi	r16, 0x43	; 67
    90b0:	1b 07       	cpc	r17, r27
    90b2:	09 f4       	brne	.+2      	; 0x90b6 <irCommTasks+0x7ec>
    90b4:	71 c3       	rjmp	.+1762   	; 0x9798 <irCommTasks+0xece>
    90b6:	60 91 f3 04 	lds	r22, 0x04F3
    90ba:	70 91 f4 04 	lds	r23, 0x04F4
					irCommMaxSensorSignal[i] -= irCommProxMean;
    90be:	f8 01       	movw	r30, r16
    90c0:	80 81       	ld	r24, Z
    90c2:	91 81       	ldd	r25, Z+1	; 0x01
    90c4:	86 1b       	sub	r24, r22
    90c6:	97 0b       	sbc	r25, r23
    90c8:	91 83       	std	Z+1, r25	; 0x01
    90ca:	80 83       	st	Z, r24

					if(irCommBitsSignalIndexTemp>199) {
    90cc:	28 3c       	cpi	r18, 0xC8	; 200
    90ce:	08 f3       	brcs	.-62     	; 0x9092 <irCommTasks+0x7c8>
						irCommBitsSignalIndexTemp = 199;
    90d0:	c0 92 e4 04 	sts	0x04E4, r12
						updateRedLed(0);
    90d4:	80 e0       	ldi	r24, 0x00	; 0
    90d6:	0e 94 32 3b 	call	0x7664	; 0x7664 <updateRedLed>
    90da:	20 91 e4 04 	lds	r18, 0x04E4
    90de:	d8 01       	movw	r26, r16
    90e0:	8d 91       	ld	r24, X+
    90e2:	9c 91       	ld	r25, X
    90e4:	11 97       	sbiw	r26, 0x01	; 1
    90e6:	d5 cf       	rjmp	.-86     	; 0x9092 <irCommTasks+0x7c8>
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 2) {
					updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START1_DURATION;					
					irCommTxSwitchCount = IRCOMM_BIT_START1_SWITCH_COUNT;
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 1) {
					irCommTxDuration = IRCOMM_BIT1_DURATOIN;					
    90e8:	8c e3       	ldi	r24, 0x3C	; 60
    90ea:	90 e0       	ldi	r25, 0x00	; 0
    90ec:	90 93 0f 05 	sts	0x050F, r25
    90f0:	80 93 0e 05 	sts	0x050E, r24
					irCommTxSwitchCount = IRCOMM_BIT1_SWITCH_COUNT;
    90f4:	84 e0       	ldi	r24, 0x04	; 4
    90f6:	80 93 10 05 	sts	0x0510, r24
    90fa:	95 cd       	rjmp	.-1238   	; 0x8c26 <irCommTasks+0x35c>
					irCommMaxSensorSignalTemp[irCommMaxSensorSignalIndexTemp] = irCommMaxSensorSignal[i];
					irCommMaxSensorSignalIndexTemp++;					

					irCommProxSum += irCommMaxSensorSignal[i];
					if(irCommComputeShift == 1) {	// compute the shift between the rx sampling and tx signal
						irCommShiftCount++;								
    90fc:	a0 91 f1 04 	lds	r26, 0x04F1
    9100:	af 5f       	subi	r26, 0xFF	; 255
    9102:	a0 93 f1 04 	sts	0x04F1, r26
						if(irCommTempMin > irCommMaxSensorSignal[i]) {
    9106:	80 91 ef 04 	lds	r24, 0x04EF
    910a:	90 91 f0 04 	lds	r25, 0x04F0
    910e:	48 17       	cp	r20, r24
    9110:	59 07       	cpc	r21, r25
    9112:	2c f4       	brge	.+10     	; 0x911e <irCommTasks+0x854>
							irCommTempMin = irCommMaxSensorSignal[i];
    9114:	50 93 f0 04 	sts	0x04F0, r21
    9118:	40 93 ef 04 	sts	0x04EF, r20
    911c:	ca 01       	movw	r24, r20
						}
						if(irCommTempMax < irCommMaxSensorSignal[i]) {
    911e:	60 91 ed 04 	lds	r22, 0x04ED
    9122:	70 91 ee 04 	lds	r23, 0x04EE
    9126:	64 17       	cp	r22, r20
    9128:	75 07       	cpc	r23, r21
    912a:	2c f4       	brge	.+10     	; 0x9136 <irCommTasks+0x86c>
							irCommTempMax = irCommMaxSensorSignal[i];
    912c:	50 93 ee 04 	sts	0x04EE, r21
    9130:	40 93 ed 04 	sts	0x04ED, r20
    9134:	ba 01       	movw	r22, r20
						}
						irCommTempValue = (irCommTempMax - irCommTempMin);						
    9136:	fb 01       	movw	r30, r22
    9138:	e8 1b       	sub	r30, r24
    913a:	f9 0b       	sbc	r31, r25
    913c:	cf 01       	movw	r24, r30
    913e:	ce 2e       	mov	r12, r30
    9140:	b9 2f       	mov	r27, r25
    9142:	e0 93 c7 04 	sts	0x04C7, r30
    9146:	90 93 c8 04 	sts	0x04C8, r25
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    914a:	e8 32       	cpi	r30, 0x28	; 40
    914c:	f1 05       	cpc	r31, r1
    914e:	0c f4       	brge	.+2      	; 0x9152 <irCommTasks+0x888>
    9150:	1c cd       	rjmp	.-1480   	; 0x8b8a <irCommTasks+0x2c0>

							if(irCommStartDiffIndexTemp>1) {
    9152:	80 91 dd 04 	lds	r24, 0x04DD
    9156:	82 30       	cpi	r24, 0x02	; 2
    9158:	c0 f0       	brcs	.+48     	; 0x918a <irCommTasks+0x8c0>
								irCommStartDiffIndexTemp = 1;
    915a:	60 92 dd 04 	sts	0x04DD, r6
								updateRedLed(0);
    915e:	80 e0       	ldi	r24, 0x00	; 0
    9160:	29 83       	std	Y+1, r18	; 0x01
    9162:	3a 83       	std	Y+2, r19	; 0x02
    9164:	0e 94 32 3b 	call	0x7664	; 0x7664 <updateRedLed>
    9168:	80 91 dd 04 	lds	r24, 0x04DD
    916c:	c0 90 c7 04 	lds	r12, 0x04C7
    9170:	b0 91 c8 04 	lds	r27, 0x04C8
    9174:	29 81       	ldd	r18, Y+1	; 0x01
    9176:	3a 81       	ldd	r19, Y+2	; 0x02
    9178:	f9 01       	movw	r30, r18
    917a:	40 81       	ld	r20, Z
    917c:	51 81       	ldd	r21, Z+1	; 0x01
    917e:	60 91 ed 04 	lds	r22, 0x04ED
    9182:	70 91 ee 04 	lds	r23, 0x04EE
    9186:	a0 91 f1 04 	lds	r26, 0x04F1
							}
							irCommStartDiffTemp[irCommStartDiffIndexTemp] = irCommTempValue;
    918a:	e8 2f       	mov	r30, r24
    918c:	f0 e0       	ldi	r31, 0x00	; 0
    918e:	ee 0f       	add	r30, r30
    9190:	ff 1f       	adc	r31, r31
    9192:	e2 56       	subi	r30, 0x62	; 98
    9194:	f7 4f       	sbci	r31, 0xF7	; 247
    9196:	c0 82       	st	Z, r12
    9198:	b1 83       	std	Z+1, r27	; 0x01
							irCommStartDiffIndexTemp++;
    919a:	8f 5f       	subi	r24, 0xFF	; 255
    919c:	80 93 dd 04 	sts	0x04DD, r24
							

							if(irCommMaxSensorSignal[i] == irCommTempMax) {
    91a0:	46 17       	cp	r20, r22
    91a2:	57 07       	cpc	r21, r23
    91a4:	09 f4       	brne	.+2      	; 0x91a8 <irCommTasks+0x8de>
    91a6:	de c2       	rjmp	.+1468   	; 0x9764 <irCommTasks+0xe9a>
								irCommRxPeakHighToLow = 0;
							} else if(irCommMaxSensorSignal[i] == irCommTempMin) {
    91a8:	80 91 ef 04 	lds	r24, 0x04EF
    91ac:	90 91 f0 04 	lds	r25, 0x04F0
    91b0:	84 17       	cp	r24, r20
    91b2:	95 07       	cpc	r25, r21
    91b4:	09 f4       	brne	.+2      	; 0x91b8 <irCommTasks+0x8ee>
    91b6:	e7 c2       	rjmp	.+1486   	; 0x9786 <irCommTasks+0xebc>
								irCommRxPeakHighToLow = 1;
							} else {
								//updateGreenLed(0);
							}
							irCommTempMin = 1024;
    91b8:	90 92 f0 04 	sts	0x04F0, r9
    91bc:	80 92 ef 04 	sts	0x04EF, r8
							irCommTempMax = 0;
    91c0:	10 92 ee 04 	sts	0x04EE, r1
    91c4:	10 92 ed 04 	sts	0x04ED, r1
							irCommComputeShift = 2;
    91c8:	70 92 f2 04 	sts	0x04F2, r7
							irCommShiftCount--;	// the current sample is already part of the signal start thus do not skip it
    91cc:	a1 50       	subi	r26, 0x01	; 1
    91ce:	a0 93 f1 04 	sts	0x04F1, r26
							irCommRxStartPeakDuration = 0;
    91d2:	10 92 03 05 	sts	0x0503, r1
    91d6:	b2 e0       	ldi	r27, 0x02	; 2
    91d8:	bb 2e       	mov	r11, r27
    91da:	d7 cc       	rjmp	.-1618   	; 0x8b8a <irCommTasks+0x2c0>
						}
					 } else if(irCommComputeShift == 2) {		
					 	irCommRxStartPeakDuration++;					
    91dc:	80 91 03 05 	lds	r24, 0x0503
    91e0:	8f 5f       	subi	r24, 0xFF	; 255
    91e2:	80 93 03 05 	sts	0x0503, r24
						if(irCommTempMin > irCommMaxSensorSignal[i]) {
    91e6:	60 91 ef 04 	lds	r22, 0x04EF
    91ea:	70 91 f0 04 	lds	r23, 0x04F0
    91ee:	46 17       	cp	r20, r22
    91f0:	57 07       	cpc	r21, r23
    91f2:	2c f4       	brge	.+10     	; 0x91fe <irCommTasks+0x934>
							irCommTempMin = irCommMaxSensorSignal[i];
    91f4:	50 93 f0 04 	sts	0x04F0, r21
    91f8:	40 93 ef 04 	sts	0x04EF, r20
    91fc:	ba 01       	movw	r22, r20
						}
						if(irCommTempMax < irCommMaxSensorSignal[i]) {
    91fe:	80 91 ed 04 	lds	r24, 0x04ED
    9202:	90 91 ee 04 	lds	r25, 0x04EE
    9206:	84 17       	cp	r24, r20
    9208:	95 07       	cpc	r25, r21
    920a:	2c f4       	brge	.+10     	; 0x9216 <irCommTasks+0x94c>
							irCommTempMax = irCommMaxSensorSignal[i];
    920c:	50 93 ee 04 	sts	0x04EE, r21
    9210:	40 93 ed 04 	sts	0x04ED, r20
    9214:	ca 01       	movw	r24, r20
						}	
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    9216:	fc 01       	movw	r30, r24
    9218:	e6 1b       	sub	r30, r22
    921a:	f7 0b       	sbc	r31, r23
    921c:	e8 32       	cpi	r30, 0x28	; 40
    921e:	f1 05       	cpc	r31, r1
    9220:	0c f4       	brge	.+2      	; 0x9224 <irCommTasks+0x95a>
    9222:	b3 cc       	rjmp	.-1690   	; 0x8b8a <irCommTasks+0x2c0>
							if((irCommMaxSensorSignal[i]==irCommTempMax) && (irCommRxPeakHighToLow==1)) {
    9224:	48 17       	cp	r20, r24
    9226:	59 07       	cpc	r21, r25
    9228:	09 f4       	brne	.+2      	; 0x922c <irCommTasks+0x962>
    922a:	b0 c2       	rjmp	.+1376   	; 0x978c <irCommTasks+0xec2>
								irCommComputeShift = 0;
							} else if((irCommMaxSensorSignal[i]==irCommTempMin) && (irCommRxPeakHighToLow==0)) {
    922c:	46 17       	cp	r20, r22
    922e:	57 07       	cpc	r21, r23
    9230:	09 f0       	breq	.+2      	; 0x9234 <irCommTasks+0x96a>
    9232:	ab cc       	rjmp	.-1706   	; 0x8b8a <irCommTasks+0x2c0>
    9234:	80 91 02 05 	lds	r24, 0x0502
    9238:	88 23       	and	r24, r24
    923a:	09 f0       	breq	.+2      	; 0x923e <irCommTasks+0x974>
    923c:	a6 cc       	rjmp	.-1716   	; 0x8b8a <irCommTasks+0x2c0>
								irCommComputeShift = 0;
    923e:	10 92 f2 04 	sts	0x04F2, r1
    9242:	bb 24       	eor	r11, r11
    9244:	a2 cc       	rjmp	.-1724   	; 0x8b8a <irCommTasks+0x2c0>
		switch(irCommState) {
			case IRCOMM_RX_IDLE_STATE:				
				break;

			case IRCOMM_RX_MAX_SENSOR_STATE:				
				irCommRxMaxDiff = -1;
    9246:	8f ef       	ldi	r24, 0xFF	; 255
    9248:	9f ef       	ldi	r25, 0xFF	; 255
    924a:	90 93 4a 08 	sts	0x084A, r25
    924e:	80 93 49 08 	sts	0x0849, r24
    			irCommRxMaxSensor = -1;
    9252:	90 93 5d 0b 	sts	0x0B5D, r25
    9256:	80 93 5c 0b 	sts	0x0B5C, r24
    925a:	a0 91 2a 05 	lds	r26, 0x052A
    925e:	b0 91 2b 05 	lds	r27, 0x052B
    9262:	c0 90 16 05 	lds	r12, 0x0516
    9266:	d0 90 17 05 	lds	r13, 0x0517
				for(i=0; i<8; i++) {
					if ((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) > irCommRxMaxDiff) {
    926a:	8d 91       	ld	r24, X+
    926c:	9c 91       	ld	r25, X
    926e:	11 97       	sbiw	r26, 0x01	; 1
    9270:	f6 01       	movw	r30, r12
    9272:	20 81       	ld	r18, Z
    9274:	31 81       	ldd	r19, Z+1	; 0x01
    9276:	82 1b       	sub	r24, r18
    9278:	93 0b       	sbc	r25, r19
    927a:	97 fd       	sbrc	r25, 7
    927c:	08 c0       	rjmp	.+16     	; 0x928e <irCommTasks+0x9c4>
						irCommRxMaxDiff = irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i];
    927e:	90 93 4a 08 	sts	0x084A, r25
    9282:	80 93 49 08 	sts	0x0849, r24
						irCommRxMaxSensor = i;
    9286:	10 92 5d 0b 	sts	0x0B5D, r1
    928a:	10 92 5c 0b 	sts	0x0B5C, r1

			case IRCOMM_RX_MAX_SENSOR_STATE:				
				irCommRxMaxDiff = -1;
    			irCommRxMaxSensor = -1;
				for(i=0; i<8; i++) {
					if ((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) > irCommRxMaxDiff) {
    928e:	12 96       	adiw	r26, 0x02	; 2
    9290:	2d 91       	ld	r18, X+
    9292:	3c 91       	ld	r19, X
    9294:	13 97       	sbiw	r26, 0x03	; 3
    9296:	f6 01       	movw	r30, r12
    9298:	82 81       	ldd	r24, Z+2	; 0x02
    929a:	93 81       	ldd	r25, Z+3	; 0x03
    929c:	28 1b       	sub	r18, r24
    929e:	39 0b       	sbc	r19, r25
    92a0:	80 91 49 08 	lds	r24, 0x0849
    92a4:	90 91 4a 08 	lds	r25, 0x084A
    92a8:	82 17       	cp	r24, r18
    92aa:	93 07       	cpc	r25, r19
    92ac:	5c f4       	brge	.+22     	; 0x92c4 <irCommTasks+0x9fa>
						irCommRxMaxDiff = irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i];
    92ae:	30 93 4a 08 	sts	0x084A, r19
    92b2:	20 93 49 08 	sts	0x0849, r18
						irCommRxMaxSensor = i;
    92b6:	81 e0       	ldi	r24, 0x01	; 1
    92b8:	90 e0       	ldi	r25, 0x00	; 0
    92ba:	90 93 5d 0b 	sts	0x0B5D, r25
    92be:	80 93 5c 0b 	sts	0x0B5C, r24
    92c2:	c9 01       	movw	r24, r18

			case IRCOMM_RX_MAX_SENSOR_STATE:				
				irCommRxMaxDiff = -1;
    			irCommRxMaxSensor = -1;
				for(i=0; i<8; i++) {
					if ((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) > irCommRxMaxDiff) {
    92c4:	14 96       	adiw	r26, 0x04	; 4
    92c6:	2d 91       	ld	r18, X+
    92c8:	3c 91       	ld	r19, X
    92ca:	15 97       	sbiw	r26, 0x05	; 5
    92cc:	f6 01       	movw	r30, r12
    92ce:	44 81       	ldd	r20, Z+4	; 0x04
    92d0:	55 81       	ldd	r21, Z+5	; 0x05
    92d2:	24 1b       	sub	r18, r20
    92d4:	35 0b       	sbc	r19, r21
    92d6:	82 17       	cp	r24, r18
    92d8:	93 07       	cpc	r25, r19
    92da:	5c f4       	brge	.+22     	; 0x92f2 <irCommTasks+0xa28>
						irCommRxMaxDiff = irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i];
    92dc:	30 93 4a 08 	sts	0x084A, r19
    92e0:	20 93 49 08 	sts	0x0849, r18
						irCommRxMaxSensor = i;
    92e4:	82 e0       	ldi	r24, 0x02	; 2
    92e6:	90 e0       	ldi	r25, 0x00	; 0
    92e8:	90 93 5d 0b 	sts	0x0B5D, r25
    92ec:	80 93 5c 0b 	sts	0x0B5C, r24
    92f0:	c9 01       	movw	r24, r18

			case IRCOMM_RX_MAX_SENSOR_STATE:				
				irCommRxMaxDiff = -1;
    			irCommRxMaxSensor = -1;
				for(i=0; i<8; i++) {
					if ((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) > irCommRxMaxDiff) {
    92f2:	16 96       	adiw	r26, 0x06	; 6
    92f4:	2d 91       	ld	r18, X+
    92f6:	3c 91       	ld	r19, X
    92f8:	17 97       	sbiw	r26, 0x07	; 7
    92fa:	f6 01       	movw	r30, r12
    92fc:	46 81       	ldd	r20, Z+6	; 0x06
    92fe:	57 81       	ldd	r21, Z+7	; 0x07
    9300:	24 1b       	sub	r18, r20
    9302:	35 0b       	sbc	r19, r21
    9304:	82 17       	cp	r24, r18
    9306:	93 07       	cpc	r25, r19
    9308:	5c f4       	brge	.+22     	; 0x9320 <irCommTasks+0xa56>
						irCommRxMaxDiff = irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i];
    930a:	30 93 4a 08 	sts	0x084A, r19
    930e:	20 93 49 08 	sts	0x0849, r18
						irCommRxMaxSensor = i;
    9312:	83 e0       	ldi	r24, 0x03	; 3
    9314:	90 e0       	ldi	r25, 0x00	; 0
    9316:	90 93 5d 0b 	sts	0x0B5D, r25
    931a:	80 93 5c 0b 	sts	0x0B5C, r24
    931e:	c9 01       	movw	r24, r18

			case IRCOMM_RX_MAX_SENSOR_STATE:				
				irCommRxMaxDiff = -1;
    			irCommRxMaxSensor = -1;
				for(i=0; i<8; i++) {
					if ((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) > irCommRxMaxDiff) {
    9320:	18 96       	adiw	r26, 0x08	; 8
    9322:	2d 91       	ld	r18, X+
    9324:	3c 91       	ld	r19, X
    9326:	19 97       	sbiw	r26, 0x09	; 9
    9328:	f6 01       	movw	r30, r12
    932a:	40 85       	ldd	r20, Z+8	; 0x08
    932c:	51 85       	ldd	r21, Z+9	; 0x09
    932e:	24 1b       	sub	r18, r20
    9330:	35 0b       	sbc	r19, r21
    9332:	82 17       	cp	r24, r18
    9334:	93 07       	cpc	r25, r19
    9336:	5c f4       	brge	.+22     	; 0x934e <irCommTasks+0xa84>
						irCommRxMaxDiff = irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i];
    9338:	30 93 4a 08 	sts	0x084A, r19
    933c:	20 93 49 08 	sts	0x0849, r18
						irCommRxMaxSensor = i;
    9340:	84 e0       	ldi	r24, 0x04	; 4
    9342:	90 e0       	ldi	r25, 0x00	; 0
    9344:	90 93 5d 0b 	sts	0x0B5D, r25
    9348:	80 93 5c 0b 	sts	0x0B5C, r24
    934c:	c9 01       	movw	r24, r18

			case IRCOMM_RX_MAX_SENSOR_STATE:				
				irCommRxMaxDiff = -1;
    			irCommRxMaxSensor = -1;
				for(i=0; i<8; i++) {
					if ((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) > irCommRxMaxDiff) {
    934e:	1a 96       	adiw	r26, 0x0a	; 10
    9350:	2d 91       	ld	r18, X+
    9352:	3c 91       	ld	r19, X
    9354:	1b 97       	sbiw	r26, 0x0b	; 11
    9356:	f6 01       	movw	r30, r12
    9358:	42 85       	ldd	r20, Z+10	; 0x0a
    935a:	53 85       	ldd	r21, Z+11	; 0x0b
    935c:	24 1b       	sub	r18, r20
    935e:	35 0b       	sbc	r19, r21
    9360:	82 17       	cp	r24, r18
    9362:	93 07       	cpc	r25, r19
    9364:	5c f4       	brge	.+22     	; 0x937c <irCommTasks+0xab2>
						irCommRxMaxDiff = irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i];
    9366:	30 93 4a 08 	sts	0x084A, r19
    936a:	20 93 49 08 	sts	0x0849, r18
						irCommRxMaxSensor = i;
    936e:	85 e0       	ldi	r24, 0x05	; 5
    9370:	90 e0       	ldi	r25, 0x00	; 0
    9372:	90 93 5d 0b 	sts	0x0B5D, r25
    9376:	80 93 5c 0b 	sts	0x0B5C, r24
    937a:	c9 01       	movw	r24, r18

			case IRCOMM_RX_MAX_SENSOR_STATE:				
				irCommRxMaxDiff = -1;
    			irCommRxMaxSensor = -1;
				for(i=0; i<8; i++) {
					if ((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) > irCommRxMaxDiff) {
    937c:	1c 96       	adiw	r26, 0x0c	; 12
    937e:	2d 91       	ld	r18, X+
    9380:	3c 91       	ld	r19, X
    9382:	1d 97       	sbiw	r26, 0x0d	; 13
    9384:	f6 01       	movw	r30, r12
    9386:	44 85       	ldd	r20, Z+12	; 0x0c
    9388:	55 85       	ldd	r21, Z+13	; 0x0d
    938a:	24 1b       	sub	r18, r20
    938c:	35 0b       	sbc	r19, r21
    938e:	82 17       	cp	r24, r18
    9390:	93 07       	cpc	r25, r19
    9392:	5c f4       	brge	.+22     	; 0x93aa <irCommTasks+0xae0>
						irCommRxMaxDiff = irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i];
    9394:	30 93 4a 08 	sts	0x084A, r19
    9398:	20 93 49 08 	sts	0x0849, r18
						irCommRxMaxSensor = i;
    939c:	86 e0       	ldi	r24, 0x06	; 6
    939e:	90 e0       	ldi	r25, 0x00	; 0
    93a0:	90 93 5d 0b 	sts	0x0B5D, r25
    93a4:	80 93 5c 0b 	sts	0x0B5C, r24
    93a8:	c9 01       	movw	r24, r18

			case IRCOMM_RX_MAX_SENSOR_STATE:				
				irCommRxMaxDiff = -1;
    			irCommRxMaxSensor = -1;
				for(i=0; i<8; i++) {
					if ((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) > irCommRxMaxDiff) {
    93aa:	1e 96       	adiw	r26, 0x0e	; 14
    93ac:	2d 91       	ld	r18, X+
    93ae:	3c 91       	ld	r19, X
    93b0:	1f 97       	sbiw	r26, 0x0f	; 15
    93b2:	f6 01       	movw	r30, r12
    93b4:	46 85       	ldd	r20, Z+14	; 0x0e
    93b6:	57 85       	ldd	r21, Z+15	; 0x0f
    93b8:	24 1b       	sub	r18, r20
    93ba:	35 0b       	sbc	r19, r21
    93bc:	82 17       	cp	r24, r18
    93be:	93 07       	cpc	r25, r19
    93c0:	5c f4       	brge	.+22     	; 0x93d8 <irCommTasks+0xb0e>
						irCommRxMaxDiff = irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i];
    93c2:	30 93 4a 08 	sts	0x084A, r19
    93c6:	20 93 49 08 	sts	0x0849, r18
						irCommRxMaxSensor = i;
    93ca:	87 e0       	ldi	r24, 0x07	; 7
    93cc:	90 e0       	ldi	r25, 0x00	; 0
    93ce:	90 93 5d 0b 	sts	0x0B5D, r25
    93d2:	80 93 5c 0b 	sts	0x0B5C, r24
    93d6:	c9 01       	movw	r24, r18
					}
				}

				if(irCommRxMaxSensorIndexTemp>1) {
    93d8:	20 91 d5 04 	lds	r18, 0x04D5
    93dc:	22 30       	cpi	r18, 0x02	; 2
    93de:	08 f4       	brcc	.+2      	; 0x93e2 <irCommTasks+0xb18>
    93e0:	9c c2       	rjmp	.+1336   	; 0x991a <irCommTasks+0x1050>
    93e2:	42 e0       	ldi	r20, 0x02	; 2
    93e4:	61 e0       	ldi	r22, 0x01	; 1
    93e6:	70 e0       	ldi	r23, 0x00	; 0
					irCommRxMaxSensorIndexTemp = 1;
					//updateBlueLed(0);
				}
				irCommRxMaxSensorTemp[irCommRxMaxSensorIndexTemp] = irCommRxMaxSensor;
    93e8:	20 91 5c 0b 	lds	r18, 0x0B5C
    93ec:	30 91 5d 0b 	lds	r19, 0x0B5D
    93f0:	66 0f       	add	r22, r22
    93f2:	77 1f       	adc	r23, r23
    93f4:	65 5f       	subi	r22, 0xF5	; 245
    93f6:	74 4f       	sbci	r23, 0xF4	; 244
    93f8:	fb 01       	movw	r30, r22
    93fa:	31 83       	std	Z+1, r19	; 0x01
    93fc:	20 83       	st	Z, r18
				irCommRxMaxSensorIndexTemp++;
    93fe:	40 93 d5 04 	sts	0x04D5, r20
					
				if(irCommRxMaxDiffIndexTemp>1) {
    9402:	40 91 d6 04 	lds	r20, 0x04D6
    9406:	42 30       	cpi	r20, 0x02	; 2
    9408:	08 f4       	brcc	.+2      	; 0x940c <irCommTasks+0xb42>
    940a:	91 c2       	rjmp	.+1314   	; 0x992e <irCommTasks+0x1064>
    940c:	42 e0       	ldi	r20, 0x02	; 2
    940e:	61 e0       	ldi	r22, 0x01	; 1
    9410:	70 e0       	ldi	r23, 0x00	; 0
					irCommRxMaxDiffIndexTemp = 1;
					//updateBlueLed(0);
				}
				irCommRxMaxDiffTemp[irCommRxMaxDiffIndexTemp] = irCommRxMaxDiff;
    9412:	66 0f       	add	r22, r22
    9414:	77 1f       	adc	r23, r23
    9416:	6c 5b       	subi	r22, 0xBC	; 188
    9418:	74 4f       	sbci	r23, 0xF4	; 244
    941a:	fb 01       	movw	r30, r22
    941c:	91 83       	std	Z+1, r25	; 0x01
    941e:	80 83       	st	Z, r24
				irCommRxMaxDiffIndexTemp++;
    9420:	40 93 d6 04 	sts	0x04D6, r20
				
				if(irCommMaxSensorValueCurrIndexTemp>1) {
    9424:	40 91 d9 04 	lds	r20, 0x04D9
    9428:	42 30       	cpi	r20, 0x02	; 2
    942a:	08 f4       	brcc	.+2      	; 0x942e <irCommTasks+0xb64>
    942c:	7b c2       	rjmp	.+1270   	; 0x9924 <irCommTasks+0x105a>
					irCommMaxSensorValueCurrIndexTemp = 1;
    942e:	41 e0       	ldi	r20, 0x01	; 1
    9430:	40 93 d9 04 	sts	0x04D9, r20
    9434:	62 e0       	ldi	r22, 0x02	; 2
    9436:	01 e0       	ldi	r16, 0x01	; 1
    9438:	10 e0       	ldi	r17, 0x00	; 0
					//updateBlueLed(0);
				}
				irCommMaxSensorValueCurrTemp[irCommMaxSensorValueCurrIndexTemp] = irCommMaxSensorValueCurr[irCommRxMaxSensor];
    943a:	22 0f       	add	r18, r18
    943c:	33 1f       	adc	r19, r19
    943e:	00 0f       	add	r16, r16
    9440:	11 1f       	adc	r17, r17
    9442:	08 5e       	subi	r16, 0xE8	; 232
    9444:	1a 4f       	sbci	r17, 0xFA	; 250
    9446:	a2 0f       	add	r26, r18
    9448:	b3 1f       	adc	r27, r19
    944a:	4d 91       	ld	r20, X+
    944c:	5c 91       	ld	r21, X
    944e:	d8 01       	movw	r26, r16
    9450:	11 96       	adiw	r26, 0x01	; 1
    9452:	5c 93       	st	X, r21
    9454:	4e 93       	st	-X, r20
				irCommMaxSensorValueCurrIndexTemp++;
    9456:	60 93 d9 04 	sts	0x04D9, r22
				
				if(irCommMinSensorValueCurrIndexTemp>1) {
    945a:	40 91 da 04 	lds	r20, 0x04DA
    945e:	42 30       	cpi	r20, 0x02	; 2
    9460:	08 f4       	brcc	.+2      	; 0x9464 <irCommTasks+0xb9a>
    9462:	69 c2       	rjmp	.+1234   	; 0x9936 <irCommTasks+0x106c>
					irCommMinSensorValueCurrIndexTemp = 1;
    9464:	41 e0       	ldi	r20, 0x01	; 1
    9466:	40 93 da 04 	sts	0x04DA, r20
    946a:	42 e0       	ldi	r20, 0x02	; 2
    946c:	a1 e0       	ldi	r26, 0x01	; 1
    946e:	b0 e0       	ldi	r27, 0x00	; 0
					//updateBlueLed(0);
				}
				irCommMinSensorValueCurrTemp[irCommMinSensorValueCurrIndexTemp] = irCommMinSensorValueCurr[irCommRxMaxSensor];
    9470:	aa 0f       	add	r26, r26
    9472:	bb 1f       	adc	r27, r27
    9474:	a1 5f       	subi	r26, 0xF1	; 241
    9476:	b4 4f       	sbci	r27, 0xF4	; 244
    9478:	f6 01       	movw	r30, r12
    947a:	e2 0f       	add	r30, r18
    947c:	f3 1f       	adc	r31, r19
    947e:	20 81       	ld	r18, Z
    9480:	31 81       	ldd	r19, Z+1	; 0x01
    9482:	11 96       	adiw	r26, 0x01	; 1
    9484:	3c 93       	st	X, r19
    9486:	2e 93       	st	-X, r18
				irCommMinSensorValueCurrIndexTemp++;			
    9488:	40 93 da 04 	sts	0x04DA, r20


				//if(irCommRxMaxSensor == -1) {
				//	updateRedLed(0);
				//}
				if(irCommRxMaxDiff >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    948c:	88 32       	cpi	r24, 0x28	; 40
    948e:	91 05       	cpc	r25, r1
    9490:	0c f4       	brge	.+2      	; 0x9494 <irCommTasks+0xbca>
    9492:	e6 c1       	rjmp	.+972    	; 0x9860 <irCommTasks+0xf96>
					irCommState = IRCOMM_RX_DETECT_START_BIT_STATE;	
    9494:	83 e0       	ldi	r24, 0x03	; 3
    9496:	80 93 c6 04 	sts	0x04C6, r24
					
					if(irCommStateIndexTemp>13) {
    949a:	80 91 e2 04 	lds	r24, 0x04E2
    949e:	8e 30       	cpi	r24, 0x0E	; 14
    94a0:	40 f0       	brcs	.+16     	; 0x94b2 <irCommTasks+0xbe8>
						irCommStateIndexTemp = 13;
    94a2:	8d e0       	ldi	r24, 0x0D	; 13
    94a4:	80 93 e2 04 	sts	0x04E2, r24
						updateBlueLed(0);
    94a8:	80 e0       	ldi	r24, 0x00	; 0
    94aa:	0e 94 5a 3b 	call	0x76b4	; 0x76b4 <updateBlueLed>
    94ae:	80 91 e2 04 	lds	r24, 0x04E2

					if(irCommStateIndexTemp>13) {
						irCommStateIndexTemp = 13;
						updateRedLed(0);
					}
					irCommStateTemp[irCommStateIndexTemp] = irCommState;
    94b2:	90 91 c6 04 	lds	r25, 0x04C6
    94b6:	e8 2f       	mov	r30, r24
    94b8:	f0 e0       	ldi	r31, 0x00	; 0
    94ba:	e4 5e       	subi	r30, 0xE4	; 228
    94bc:	fa 4f       	sbci	r31, 0xFA	; 250
    94be:	90 83       	st	Z, r25
					irCommStateIndexTemp++;
    94c0:	8f 5f       	subi	r24, 0xFF	; 255
    94c2:	80 93 e2 04 	sts	0x04E2, r24
    94c6:	1c ca       	rjmp	.-3016   	; 0x8900 <irCommTasks+0x36>
						}											
					 }

				}

				if(irCommComputeShiftIndexTemp>1) {
    94c8:	80 91 de 04 	lds	r24, 0x04DE
    94cc:	82 30       	cpi	r24, 0x02	; 2
    94ce:	50 f0       	brcs	.+20     	; 0x94e4 <irCommTasks+0xc1a>
					irCommComputeShiftIndexTemp = 1;
    94d0:	81 e0       	ldi	r24, 0x01	; 1
    94d2:	80 93 de 04 	sts	0x04DE, r24
					updateRedLed(0);
    94d6:	80 e0       	ldi	r24, 0x00	; 0
    94d8:	0e 94 32 3b 	call	0x7664	; 0x7664 <updateRedLed>
    94dc:	80 91 de 04 	lds	r24, 0x04DE
    94e0:	b0 90 f2 04 	lds	r11, 0x04F2
				}
				irCommComputeShiftTemp[irCommComputeShiftIndexTemp] = irCommComputeShift;
    94e4:	e8 2f       	mov	r30, r24
    94e6:	f0 e0       	ldi	r31, 0x00	; 0
    94e8:	e4 5b       	subi	r30, 0xB4	; 180
    94ea:	fa 4f       	sbci	r31, 0xFA	; 250
    94ec:	b0 82       	st	Z, r11
				irCommComputeShiftIndexTemp++;
    94ee:	8f 5f       	subi	r24, 0xFF	; 255
    94f0:	80 93 de 04 	sts	0x04DE, r24
				
				if(irCommShiftCountIndexTemp>1) {
    94f4:	80 91 db 04 	lds	r24, 0x04DB
    94f8:	82 30       	cpi	r24, 0x02	; 2
    94fa:	40 f0       	brcs	.+16     	; 0x950c <irCommTasks+0xc42>
					irCommShiftCountIndexTemp = 1;
    94fc:	81 e0       	ldi	r24, 0x01	; 1
    94fe:	80 93 db 04 	sts	0x04DB, r24
					updateRedLed(0);
    9502:	80 e0       	ldi	r24, 0x00	; 0
    9504:	0e 94 32 3b 	call	0x7664	; 0x7664 <updateRedLed>
    9508:	80 91 db 04 	lds	r24, 0x04DB
				}
				irCommShiftCountTemp[irCommShiftCountIndexTemp] = irCommShiftCount;
    950c:	e8 2f       	mov	r30, r24
    950e:	f0 e0       	ldi	r31, 0x00	; 0
    9510:	e1 5a       	subi	r30, 0xA1	; 161
    9512:	f4 4f       	sbci	r31, 0xF4	; 244
    9514:	90 91 f1 04 	lds	r25, 0x04F1
    9518:	90 83       	st	Z, r25
				irCommShiftCountIndexTemp++;
    951a:	8f 5f       	subi	r24, 0xFF	; 255
    951c:	80 93 db 04 	sts	0x04DB, r24
				
				if(irCommRxPeakHighToLowIndexTemp>1) {
    9520:	80 91 df 04 	lds	r24, 0x04DF
    9524:	82 30       	cpi	r24, 0x02	; 2
    9526:	40 f0       	brcs	.+16     	; 0x9538 <irCommTasks+0xc6e>
					irCommRxPeakHighToLowIndexTemp = 1;
    9528:	81 e0       	ldi	r24, 0x01	; 1
    952a:	80 93 df 04 	sts	0x04DF, r24
					updateRedLed(0);
    952e:	80 e0       	ldi	r24, 0x00	; 0
    9530:	0e 94 32 3b 	call	0x7664	; 0x7664 <updateRedLed>
    9534:	80 91 df 04 	lds	r24, 0x04DF
				}
				irCommRxPeakHighToLowTemp[irCommRxPeakHighToLowIndexTemp] = irCommRxPeakHighToLow;
    9538:	e8 2f       	mov	r30, r24
    953a:	f0 e0       	ldi	r31, 0x00	; 0
    953c:	e7 55       	subi	r30, 0x57	; 87
    953e:	fa 4f       	sbci	r31, 0xFA	; 250
    9540:	90 91 02 05 	lds	r25, 0x0502
    9544:	90 83       	st	Z, r25
				irCommRxPeakHighToLowIndexTemp++;
    9546:	8f 5f       	subi	r24, 0xFF	; 255
    9548:	80 93 df 04 	sts	0x04DF, r24
				
				if(irCommRxStartPeakDurationIndexTemp>1) {
    954c:	80 91 e0 04 	lds	r24, 0x04E0
    9550:	82 30       	cpi	r24, 0x02	; 2
    9552:	40 f0       	brcs	.+16     	; 0x9564 <irCommTasks+0xc9a>
					irCommRxStartPeakDurationIndexTemp = 1;
    9554:	81 e0       	ldi	r24, 0x01	; 1
    9556:	80 93 e0 04 	sts	0x04E0, r24
					updateRedLed(0);
    955a:	80 e0       	ldi	r24, 0x00	; 0
    955c:	0e 94 32 3b 	call	0x7664	; 0x7664 <updateRedLed>
    9560:	80 91 e0 04 	lds	r24, 0x04E0
				}
				irCommRxStartPeakDurationTemp[irCommRxStartPeakDurationIndexTemp] = irCommRxStartPeakDuration;
    9564:	e8 2f       	mov	r30, r24
    9566:	f0 e0       	ldi	r31, 0x00	; 0
    9568:	e5 51       	subi	r30, 0x15	; 21
    956a:	f9 4f       	sbci	r31, 0xF9	; 249
    956c:	90 91 03 05 	lds	r25, 0x0503
    9570:	90 83       	st	Z, r25
				irCommRxStartPeakDurationIndexTemp++;
    9572:	8f 5f       	subi	r24, 0xFF	; 255
    9574:	80 93 e0 04 	sts	0x04E0, r24
					
				
				//if(irCommComputeShift != 0) {	// it should not be never 1 because the difference between min and max in the current signal
					//updateRedLed(0);			// is at least IRCOMM_DETECTION_AMPLITUDE_THR (checked in the previous state)
				//}
				irCommProxMean = (int)(irCommProxSum / IRCOMM_SAMPLING_WINDOW);
    9578:	60 91 e9 04 	lds	r22, 0x04E9
    957c:	70 91 ea 04 	lds	r23, 0x04EA
    9580:	80 91 eb 04 	lds	r24, 0x04EB
    9584:	90 91 ec 04 	lds	r25, 0x04EC
    9588:	24 e1       	ldi	r18, 0x14	; 20
    958a:	30 e0       	ldi	r19, 0x00	; 0
    958c:	40 e0       	ldi	r20, 0x00	; 0
    958e:	50 e0       	ldi	r21, 0x00	; 0
    9590:	0e 94 61 52 	call	0xa4c2	; 0xa4c2 <__divmodsi4>
    9594:	b9 01       	movw	r22, r18
    9596:	30 93 f4 04 	sts	0x04F4, r19
    959a:	20 93 f3 04 	sts	0x04F3, r18

				if(irCommProxMeanIndexTemp>1) {
    959e:	80 91 d7 04 	lds	r24, 0x04D7
    95a2:	82 30       	cpi	r24, 0x02	; 2
    95a4:	60 f0       	brcs	.+24     	; 0x95be <irCommTasks+0xcf4>
					irCommProxMeanIndexTemp = 1;
    95a6:	81 e0       	ldi	r24, 0x01	; 1
    95a8:	80 93 d7 04 	sts	0x04D7, r24
					updateRedLed(0);
    95ac:	80 e0       	ldi	r24, 0x00	; 0
    95ae:	0e 94 32 3b 	call	0x7664	; 0x7664 <updateRedLed>
    95b2:	80 91 d7 04 	lds	r24, 0x04D7
    95b6:	60 91 f3 04 	lds	r22, 0x04F3
    95ba:	70 91 f4 04 	lds	r23, 0x04F4
				}
				irCommProxMeanTemp[irCommProxMeanIndexTemp] = irCommProxMean;
    95be:	e8 2f       	mov	r30, r24
    95c0:	f0 e0       	ldi	r31, 0x00	; 0
    95c2:	ee 0f       	add	r30, r30
    95c4:	ff 1f       	adc	r31, r31
    95c6:	e1 5b       	subi	r30, 0xB1	; 177
    95c8:	fa 4f       	sbci	r31, 0xFA	; 250
    95ca:	71 83       	std	Z+1, r23	; 0x01
    95cc:	60 83       	st	Z, r22
				irCommProxMeanIndexTemp++;
    95ce:	8f 5f       	subi	r24, 0xFF	; 255
    95d0:	80 93 d7 04 	sts	0x04D7, r24
    95d4:	20 91 d4 04 	lds	r18, 0x04D4
	irCommRxBitReceivedIndexTemp = 0;
	
	
}

void irCommTasks() {
    95d8:	03 e4       	ldi	r16, 0x43	; 67
    95da:	1b e0       	ldi	r17, 0x0B	; 11
				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
					irCommMaxSensorSignal[i] -= irCommProxMean;

					if(irCommMaxSensorSignalFiltIndexTemp>39) {
						irCommMaxSensorSignalFiltIndexTemp = 39;
    95dc:	e7 e2       	ldi	r30, 0x27	; 39
    95de:	ce 2e       	mov	r12, r30
    95e0:	18 c0       	rjmp	.+48     	; 0x9612 <irCommTasks+0xd48>
						updateRedLed(0);
					}
					irCommMaxSensorSignalFiltTemp[irCommMaxSensorSignalFiltIndexTemp] = irCommMaxSensorSignal[i];
    95e2:	e2 2f       	mov	r30, r18
    95e4:	f0 e0       	ldi	r31, 0x00	; 0
    95e6:	ee 0f       	add	r30, r30
    95e8:	ff 1f       	adc	r31, r31
    95ea:	e9 5a       	subi	r30, 0xA9	; 169
    95ec:	fa 4f       	sbci	r31, 0xFA	; 250
    95ee:	91 83       	std	Z+1, r25	; 0x01
    95f0:	80 83       	st	Z, r24
					irCommMaxSensorSignalFiltIndexTemp++;
    95f2:	2f 5f       	subi	r18, 0xFF	; 255
    95f4:	20 93 d4 04 	sts	0x04D4, r18
    95f8:	82 e0       	ldi	r24, 0x02	; 2
    95fa:	90 e0       	ldi	r25, 0x00	; 0
    95fc:	48 0e       	add	r4, r24
    95fe:	59 1e       	adc	r5, r25
				irCommProxMeanTemp[irCommProxMeanIndexTemp] = irCommProxMean;
				irCommProxMeanIndexTemp++;
				

				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    9600:	93 e4       	ldi	r25, 0x43	; 67
    9602:	49 16       	cp	r4, r25
    9604:	9b e0       	ldi	r25, 0x0B	; 11
    9606:	59 06       	cpc	r5, r25
    9608:	e1 f1       	breq	.+120    	; 0x9682 <irCommTasks+0xdb8>
    960a:	60 91 f3 04 	lds	r22, 0x04F3
    960e:	70 91 f4 04 	lds	r23, 0x04F4
					irCommMaxSensorSignal[i] -= irCommProxMean;
    9612:	d2 01       	movw	r26, r4
    9614:	8d 91       	ld	r24, X+
    9616:	9c 91       	ld	r25, X
    9618:	11 97       	sbiw	r26, 0x01	; 1
    961a:	86 1b       	sub	r24, r22
    961c:	97 0b       	sbc	r25, r23
    961e:	11 96       	adiw	r26, 0x01	; 1
    9620:	9c 93       	st	X, r25
    9622:	8e 93       	st	-X, r24

					if(irCommMaxSensorSignalFiltIndexTemp>39) {
    9624:	28 32       	cpi	r18, 0x28	; 40
    9626:	e8 f2       	brcs	.-70     	; 0x95e2 <irCommTasks+0xd18>
						irCommMaxSensorSignalFiltIndexTemp = 39;
    9628:	c0 92 d4 04 	sts	0x04D4, r12
						updateRedLed(0);
    962c:	80 e0       	ldi	r24, 0x00	; 0
    962e:	0e 94 32 3b 	call	0x7664	; 0x7664 <updateRedLed>
    9632:	20 91 d4 04 	lds	r18, 0x04D4
    9636:	f2 01       	movw	r30, r4
    9638:	80 81       	ld	r24, Z
    963a:	91 81       	ldd	r25, Z+1	; 0x01
    963c:	d2 cf       	rjmp	.-92     	; 0x95e2 <irCommTasks+0xd18>

				}							
				break;

			case IRCOMM_RX_CHECK_CRC:
				irCommRxCrcError = (irCommRxCrc + (irCommRxBitReceived[8]<<1) + irCommRxBitReceived[9])&0x03;
    963e:	80 91 49 05 	lds	r24, 0x0549
    9642:	90 91 e8 04 	lds	r25, 0x04E8
    9646:	89 0f       	add	r24, r25
    9648:	90 91 48 05 	lds	r25, 0x0548
    964c:	99 0f       	add	r25, r25
    964e:	89 0f       	add	r24, r25
    9650:	83 70       	andi	r24, 0x03	; 3
    9652:	80 93 f8 04 	sts	0x04F8, r24
				if(irCommRxCrcError==0) {
    9656:	88 23       	and	r24, r24
    9658:	09 f4       	brne	.+2      	; 0x965c <irCommTasks+0xd92>
    965a:	16 c1       	rjmp	.+556    	; 0x9888 <irCommTasks+0xfbe>
					updateBlueLed(0);
					usart0Transmit(irCommRxByte,1);		
					updateBlueLed(255);
				}
												
				if(irCommEnabled == IRCOMM_MODE_RECEIVE) {
    965c:	80 91 c4 04 	lds	r24, 0x04C4
    9660:	81 30       	cpi	r24, 0x01	; 1
    9662:	49 f4       	brne	.+18     	; 0x9676 <irCommTasks+0xdac>
					currentProx = 0;
    9664:	10 92 24 02 	sts	0x0224, r1
					adcSaveDataTo = SKIP_SAMPLE;
    9668:	85 e0       	ldi	r24, 0x05	; 5
    966a:	80 93 b9 02 	sts	0x02B9, r24
					adcSamplingState = 0;
    966e:	10 92 ba 02 	sts	0x02BA, r1
					irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    9672:	10 92 c5 04 	sts	0x04C5, r1
				} else {
					irCommRxByteExpected++;
				}				
				*/

				resetDebugVariables();
    9676:	0e 94 bc 43 	call	0x8778	; 0x8778 <resetDebugVariables>

				irCommState = IRCOMM_RX_IDLE_STATE;
    967a:	81 e0       	ldi	r24, 0x01	; 1
    967c:	80 93 c6 04 	sts	0x04C6, r24

				break;
    9680:	3f c9       	rjmp	.-3458   	; 0x8900 <irCommTasks+0x36>
					irCommMaxSensorSignalFiltIndexTemp++;
					
				}
						
				// start counting number of switch around mean signal
				if(irCommMaxSensorSignal[0] > 0) {
    9682:	80 91 1b 0b 	lds	r24, 0x0B1B
    9686:	90 91 1c 0b 	lds	r25, 0x0B1C
    968a:	18 16       	cp	r1, r24
    968c:	19 06       	cpc	r1, r25
    968e:	0c f0       	brlt	.+2      	; 0x9692 <irCommTasks+0xdc8>
    9690:	3e c1       	rjmp	.+636    	; 0x990e <irCommTasks+0x1044>
					irCommSignalState = 1;
    9692:	81 e0       	ldi	r24, 0x01	; 1
    9694:	80 93 f5 04 	sts	0x04F5, r24
    9698:	21 e0       	ldi	r18, 0x01	; 1
    969a:	38 2f       	mov	r19, r24
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
    969c:	ed e1       	ldi	r30, 0x1D	; 29
    969e:	fb e0       	ldi	r31, 0x0B	; 11
    96a0:	40 e0       	ldi	r20, 0x00	; 0
    96a2:	06 c0       	rjmp	.+12     	; 0x96b0 <irCommTasks+0xde6>
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
    96a4:	27 fd       	sbrc	r18, 7
    96a6:	0e c0       	rjmp	.+28     	; 0x96c4 <irCommTasks+0xdfa>
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
    96a8:	0e 17       	cp	r16, r30
    96aa:	1f 07       	cpc	r17, r31
    96ac:	71 f0       	breq	.+28     	; 0x96ca <irCommTasks+0xe00>
    96ae:	23 2f       	mov	r18, r19
					if(irCommMaxSensorSignal[i] > 0) {
    96b0:	81 91       	ld	r24, Z+
    96b2:	91 91       	ld	r25, Z+
    96b4:	18 16       	cp	r1, r24
    96b6:	19 06       	cpc	r1, r25
    96b8:	ac f3       	brlt	.-22     	; 0x96a4 <irCommTasks+0xdda>
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
							irCommSwitchCount++;
						}
					} else {
						if(irCommSignalState > 0) {
    96ba:	12 16       	cp	r1, r18
    96bc:	ac f7       	brge	.-22     	; 0x96a8 <irCommTasks+0xdde>
							irCommSignalState = -1;
							irCommSwitchCount++;
    96be:	4f 5f       	subi	r20, 0xFF	; 255
							irCommSignalState = 1;
							irCommSwitchCount++;
						}
					} else {
						if(irCommSignalState > 0) {
							irCommSignalState = -1;
    96c0:	3f ef       	ldi	r19, 0xFF	; 255
    96c2:	f2 cf       	rjmp	.-28     	; 0x96a8 <irCommTasks+0xdde>
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
							irCommSwitchCount++;
    96c4:	4f 5f       	subi	r20, 0xFF	; 255
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
    96c6:	31 e0       	ldi	r19, 0x01	; 1
    96c8:	ef cf       	rjmp	.-34     	; 0x96a8 <irCommTasks+0xdde>
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
    96ca:	30 93 f5 04 	sts	0x04F5, r19
    96ce:	40 93 f6 04 	sts	0x04F6, r20
							irCommSwitchCount++;
						}
					}
				}

				if(irCommSwitchCountIndexTemp>1) {
    96d2:	80 91 d8 04 	lds	r24, 0x04D8
    96d6:	82 30       	cpi	r24, 0x02	; 2
    96d8:	40 f0       	brcs	.+16     	; 0x96ea <irCommTasks+0xe20>
					irCommSwitchCountIndexTemp = 1;
    96da:	81 e0       	ldi	r24, 0x01	; 1
    96dc:	80 93 d8 04 	sts	0x04D8, r24
					updateRedLed(0);
    96e0:	80 e0       	ldi	r24, 0x00	; 0
    96e2:	0e 94 32 3b 	call	0x7664	; 0x7664 <updateRedLed>
    96e6:	80 91 d8 04 	lds	r24, 0x04D8
				}
				irCommSwitchCountTemp[irCommSwitchCountIndexTemp] = irCommSwitchCount;
    96ea:	e8 2f       	mov	r30, r24
    96ec:	f0 e0       	ldi	r31, 0x00	; 0
    96ee:	ef 5c       	subi	r30, 0xCF	; 207
    96f0:	fa 4f       	sbci	r31, 0xFA	; 250
    96f2:	90 91 f6 04 	lds	r25, 0x04F6
    96f6:	90 83       	st	Z, r25
				irCommSwitchCountIndexTemp++;
    96f8:	8f 5f       	subi	r24, 0xFF	; 255
    96fa:	80 93 d8 04 	sts	0x04D8, r24
				

				turnOffGreenLeds();
    96fe:	0e 94 0b 3c 	call	0x7816	; 0x7816 <turnOffGreenLeds>
				if(irCommRxPeakHighToLow==1) {
    9702:	90 91 02 05 	lds	r25, 0x0502
    9706:	91 30       	cpi	r25, 0x01	; 1
    9708:	09 f4       	brne	.+2      	; 0x970c <irCommTasks+0xe42>
    970a:	d4 c0       	rjmp	.+424    	; 0x98b4 <irCommTasks+0xfea>
							resetDebugVariables();				
							break;
						}
					}
				} else {
					if(irCommRxStartBitDetected==1) {
    970c:	90 91 01 05 	lds	r25, 0x0501
    9710:	91 30       	cpi	r25, 0x01	; 1
    9712:	09 f4       	brne	.+2      	; 0x9716 <irCommTasks+0xe4c>
    9714:	5a c1       	rjmp	.+692    	; 0x99ca <irCommTasks+0x1100>

							resetDebugVariables();				
							break;
						}
					} else {
						if(irCommSwitchCount==2) {
    9716:	90 91 f6 04 	lds	r25, 0x04F6
    971a:	92 30       	cpi	r25, 0x02	; 2
    971c:	09 f4       	brne	.+2      	; 0x9720 <irCommTasks+0xe56>
    971e:	7f c1       	rjmp	.+766    	; 0x9a1e <irCommTasks+0x1154>
							irCommShiftCounter = 0;
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else if(irCommSwitchCount==1) {
    9720:	91 30       	cpi	r25, 0x01	; 1
    9722:	09 f4       	brne	.+2      	; 0x9726 <irCommTasks+0xe5c>
    9724:	0e c2       	rjmp	.+1052   	; 0x9b42 <irCommTasks+0x1278>
								irCommRxCrc = 0;	
								irCommRxByte = 0;
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
							}
						} else {
							if(irCommEnabled == IRCOMM_MODE_RECEIVE) {
    9726:	80 91 c4 04 	lds	r24, 0x04C4
    972a:	81 30       	cpi	r24, 0x01	; 1
    972c:	09 f4       	brne	.+2      	; 0x9730 <irCommTasks+0xe66>
    972e:	5a c2       	rjmp	.+1204   	; 0x9be4 <irCommTasks+0x131a>
								currentProx = 0;
								adcSaveDataTo = SKIP_SAMPLE;
								adcSamplingState = 0;
								irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
							}
							irCommState = IRCOMM_RX_IDLE_STATE;
    9730:	91 e0       	ldi	r25, 0x01	; 1
    9732:	90 93 c6 04 	sts	0x04C6, r25

							if(irCommSyncStateIndexTemp>1) {
    9736:	80 91 e3 04 	lds	r24, 0x04E3
    973a:	82 30       	cpi	r24, 0x02	; 2
    973c:	38 f0       	brcs	.+14     	; 0x974c <irCommTasks+0xe82>
								irCommSyncStateIndexTemp = 1;
    973e:	90 93 e3 04 	sts	0x04E3, r25
								updateRedLed(0);
    9742:	80 e0       	ldi	r24, 0x00	; 0
    9744:	0e 94 32 3b 	call	0x7664	; 0x7664 <updateRedLed>
    9748:	80 91 e3 04 	lds	r24, 0x04E3
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 15;
    974c:	e8 2f       	mov	r30, r24
    974e:	f0 e0       	ldi	r31, 0x00	; 0
    9750:	e6 5b       	subi	r30, 0xB6	; 182
    9752:	fa 4f       	sbci	r31, 0xFA	; 250
    9754:	9f e0       	ldi	r25, 0x0F	; 15
    9756:	90 83       	st	Z, r25
							irCommSyncStateIndexTemp++;
    9758:	8f 5f       	subi	r24, 0xFF	; 255
    975a:	80 93 e3 04 	sts	0x04E3, r24
							//irCommState = IRCOMM_RX_DEBUG;
							//irCommAdcRxState = 12;
							//updateRedLed(0);
							//break;

							resetDebugVariables();				
    975e:	0e 94 bc 43 	call	0x8778	; 0x8778 <resetDebugVariables>
							break;				
    9762:	ce c8       	rjmp	.-3684   	; 0x8900 <irCommTasks+0x36>
							irCommStartDiffTemp[irCommStartDiffIndexTemp] = irCommTempValue;
							irCommStartDiffIndexTemp++;
							

							if(irCommMaxSensorSignal[i] == irCommTempMax) {
								irCommRxPeakHighToLow = 0;
    9764:	10 92 02 05 	sts	0x0502, r1
    9768:	27 cd       	rjmp	.-1458   	; 0x91b8 <irCommTasks+0x8ee>
						irCommRxByte = irCommRxByte<<1;	// bit1, shift and add 1
						irCommRxByte += 1;
					}
				} else {	// error...no significant signal perceived
					//irCommRxBitReceived[irCommRxBitCount] = 0xFF;
					updateBlueLed(0);
    976a:	80 e0       	ldi	r24, 0x00	; 0
    976c:	0e 94 5a 3b 	call	0x76b4	; 0x76b4 <updateBlueLed>
					if(irCommEnabled == IRCOMM_MODE_RECEIVE) {
    9770:	80 91 c4 04 	lds	r24, 0x04C4
    9774:	81 30       	cpi	r24, 0x01	; 1
    9776:	09 f4       	brne	.+2      	; 0x977a <irCommTasks+0xeb0>
    9778:	7a c0       	rjmp	.+244    	; 0x986e <irCommTasks+0xfa4>
						currentProx = 0;
						adcSaveDataTo = SKIP_SAMPLE;
						adcSamplingState = 0;
						irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
					}
					irCommState = IRCOMM_RX_IDLE_STATE;
    977a:	81 e0       	ldi	r24, 0x01	; 1
    977c:	80 93 c6 04 	sts	0x04C6, r24

					//irCommState = IRCOMM_RX_DEBUG;
					//irCommAdcRxState = 12;
					//break;

					resetDebugVariables();
    9780:	0e 94 bc 43 	call	0x8778	; 0x8778 <resetDebugVariables>
					break;
    9784:	bd c8       	rjmp	.-3718   	; 0x8900 <irCommTasks+0x36>
							

							if(irCommMaxSensorSignal[i] == irCommTempMax) {
								irCommRxPeakHighToLow = 0;
							} else if(irCommMaxSensorSignal[i] == irCommTempMin) {
								irCommRxPeakHighToLow = 1;
    9786:	60 92 02 05 	sts	0x0502, r6
    978a:	16 cd       	rjmp	.-1492   	; 0x91b8 <irCommTasks+0x8ee>
						}
						if(irCommTempMax < irCommMaxSensorSignal[i]) {
							irCommTempMax = irCommMaxSensorSignal[i];
						}	
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
							if((irCommMaxSensorSignal[i]==irCommTempMax) && (irCommRxPeakHighToLow==1)) {
    978c:	80 91 02 05 	lds	r24, 0x0502
    9790:	81 30       	cpi	r24, 0x01	; 1
    9792:	09 f0       	breq	.+2      	; 0x9796 <irCommTasks+0xecc>
    9794:	4b cd       	rjmp	.-1386   	; 0x922c <irCommTasks+0x962>
    9796:	53 cd       	rjmp	.-1370   	; 0x923e <irCommTasks+0x974>
					irCommBitsSignalTemp[irCommBitsSignalIndexTemp] = irCommMaxSensorSignal[i];
					irCommBitsSignalIndexTemp++;
				}
						
				// start counting number of switch around mean signal
				if(irCommMaxSensorSignal[0] > 0) {
    9798:	80 91 1b 0b 	lds	r24, 0x0B1B
    979c:	90 91 1c 0b 	lds	r25, 0x0B1C
    97a0:	18 16       	cp	r1, r24
    97a2:	19 06       	cpc	r1, r25
    97a4:	0c f0       	brlt	.+2      	; 0x97a8 <irCommTasks+0xede>
    97a6:	a3 c1       	rjmp	.+838    	; 0x9aee <irCommTasks+0x1224>
					irCommSignalState = 1;
    97a8:	81 e0       	ldi	r24, 0x01	; 1
    97aa:	80 93 f5 04 	sts	0x04F5, r24
    97ae:	21 e0       	ldi	r18, 0x01	; 1
    97b0:	38 2f       	mov	r19, r24
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
    97b2:	ed e1       	ldi	r30, 0x1D	; 29
    97b4:	fb e0       	ldi	r31, 0x0B	; 11
    97b6:	40 e0       	ldi	r20, 0x00	; 0
    97b8:	06 c0       	rjmp	.+12     	; 0x97c6 <irCommTasks+0xefc>
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
    97ba:	27 fd       	sbrc	r18, 7
    97bc:	0e c0       	rjmp	.+28     	; 0x97da <irCommTasks+0xf10>
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
    97be:	ae 16       	cp	r10, r30
    97c0:	bf 06       	cpc	r11, r31
    97c2:	71 f0       	breq	.+28     	; 0x97e0 <irCommTasks+0xf16>
    97c4:	23 2f       	mov	r18, r19
					if(irCommMaxSensorSignal[i] > 0) {
    97c6:	81 91       	ld	r24, Z+
    97c8:	91 91       	ld	r25, Z+
    97ca:	18 16       	cp	r1, r24
    97cc:	19 06       	cpc	r1, r25
    97ce:	ac f3       	brlt	.-22     	; 0x97ba <irCommTasks+0xef0>
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
							irCommSwitchCount++;
						}
					} else {
						if(irCommSignalState > 0) {
    97d0:	12 16       	cp	r1, r18
    97d2:	ac f7       	brge	.-22     	; 0x97be <irCommTasks+0xef4>
							irCommSignalState = -1;
							irCommSwitchCount++;
    97d4:	4f 5f       	subi	r20, 0xFF	; 255
							irCommSignalState = 1;
							irCommSwitchCount++;
						}
					} else {
						if(irCommSignalState > 0) {
							irCommSignalState = -1;
    97d6:	3f ef       	ldi	r19, 0xFF	; 255
    97d8:	f2 cf       	rjmp	.-28     	; 0x97be <irCommTasks+0xef4>
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
							irCommSwitchCount++;
    97da:	4f 5f       	subi	r20, 0xFF	; 255
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
    97dc:	31 e0       	ldi	r19, 0x01	; 1
    97de:	ef cf       	rjmp	.-34     	; 0x97be <irCommTasks+0xef4>
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
    97e0:	30 93 f5 04 	sts	0x04F5, r19
    97e4:	40 93 f6 04 	sts	0x04F6, r20
							irCommSwitchCount++;
						}
					}
				}
				// check whether we received either a "0" or a "1"
				if(irCommSwitchCount >= (IRCOMM_BIT0_SWITCH_COUNT-2)) {
    97e8:	46 30       	cpi	r20, 0x06	; 6
    97ea:	08 f4       	brcc	.+2      	; 0x97ee <irCommTasks+0xf24>
    97ec:	b7 c0       	rjmp	.+366    	; 0x995c <irCommTasks+0x1092>
					irCommRxBitReceived[irCommRxBitCount] = 0;
    97ee:	80 91 f7 04 	lds	r24, 0x04F7
    97f2:	e8 2f       	mov	r30, r24
    97f4:	f0 e0       	ldi	r31, 0x00	; 0
    97f6:	e0 5c       	subi	r30, 0xC0	; 192
    97f8:	fa 4f       	sbci	r31, 0xFA	; 250
    97fa:	10 82       	st	Z, r1
					if(irCommRxBitCount<8) {	// do not consider the crc for byte interpretation
    97fc:	88 30       	cpi	r24, 0x08	; 8
    97fe:	08 f0       	brcs	.+2      	; 0x9802 <irCommTasks+0xf38>
    9800:	7c c1       	rjmp	.+760    	; 0x9afa <irCommTasks+0x1230>
						irCommRxByte = irCommRxByte<<1;	// bit0, only shift
    9802:	90 91 f9 04 	lds	r25, 0x04F9
    9806:	99 0f       	add	r25, r25
    9808:	90 93 f9 04 	sts	0x04F9, r25
    980c:	20 e0       	ldi	r18, 0x00	; 0
					resetDebugVariables();
					break;

				}

				if(irCommRxBitReceivedIndexTemp>9) {
    980e:	90 91 e5 04 	lds	r25, 0x04E5
    9812:	9a 30       	cpi	r25, 0x0A	; 10
    9814:	08 f0       	brcs	.+2      	; 0x9818 <irCommTasks+0xf4e>
    9816:	85 c1       	rjmp	.+778    	; 0x9b22 <irCommTasks+0x1258>
					irCommRxBitReceivedIndexTemp = 9;
					updateRedLed(0);
				}
				irCommRxBitReceivedTemp[irCommRxBitReceivedIndexTemp] = irCommRxBitReceived[irCommRxBitCount];
    9818:	e9 2f       	mov	r30, r25
    981a:	f0 e0       	ldi	r31, 0x00	; 0
    981c:	e1 5c       	subi	r30, 0xC1	; 193
    981e:	f7 4f       	sbci	r31, 0xF7	; 247
    9820:	20 83       	st	Z, r18
				irCommRxBitReceivedIndexTemp++;
    9822:	9f 5f       	subi	r25, 0xFF	; 255
    9824:	90 93 e5 04 	sts	0x04E5, r25

				setGreenLed(irCommRxBitCount, 1);
    9828:	61 e0       	ldi	r22, 0x01	; 1
    982a:	0e 94 6e 3b 	call	0x76dc	; 0x76dc <setGreenLed>

				irCommRxBitCount++;
    982e:	80 91 f7 04 	lds	r24, 0x04F7
    9832:	8f 5f       	subi	r24, 0xFF	; 255
    9834:	80 93 f7 04 	sts	0x04F7, r24
				if(irCommRxBitCount == 10) {	// received 8 bit of data + 2 bit of crc
    9838:	8a 30       	cpi	r24, 0x0A	; 10
    983a:	09 f4       	brne	.+2      	; 0x983e <irCommTasks+0xf74>
    983c:	69 c1       	rjmp	.+722    	; 0x9b10 <irCommTasks+0x1246>
					}
					irCommStateTemp[irCommStateIndexTemp] = irCommState;
					irCommStateIndexTemp++;

				} else {
					irCommState = IRCOMM_RX_WAITING_BIT;
    983e:	85 e0       	ldi	r24, 0x05	; 5
    9840:	80 93 c6 04 	sts	0x04C6, r24

					if(irCommStateIndexTemp>13) {
    9844:	80 91 e2 04 	lds	r24, 0x04E2
    9848:	8e 30       	cpi	r24, 0x0E	; 14
    984a:	08 f4       	brcc	.+2      	; 0x984e <irCommTasks+0xf84>
    984c:	32 ce       	rjmp	.-924    	; 0x94b2 <irCommTasks+0xbe8>
						irCommStateIndexTemp = 13;
    984e:	8d e0       	ldi	r24, 0x0D	; 13
    9850:	80 93 e2 04 	sts	0x04E2, r24
						updateRedLed(0);
    9854:	80 e0       	ldi	r24, 0x00	; 0
    9856:	0e 94 32 3b 	call	0x7664	; 0x7664 <updateRedLed>
    985a:	80 91 e2 04 	lds	r24, 0x04E2
    985e:	29 ce       	rjmp	.-942    	; 0x94b2 <irCommTasks+0xbe8>
					//if(irCommRxStartBitDetected == 1) {	// signal becomes too low to be reliable...or something else happened				
					//	irCommState = IRCOMM_RX_DEBUG;
					//	irCommAdcRxState = 12;
					//	updateGreenLed(0);
					//} else {
						irCommRxStartBitDetected = 0;
    9860:	10 92 01 05 	sts	0x0501, r1
						if(irCommEnabled == IRCOMM_MODE_RECEIVE) {
    9864:	80 91 c4 04 	lds	r24, 0x04C4
    9868:	81 30       	cpi	r24, 0x01	; 1
    986a:	09 f0       	breq	.+2      	; 0x986e <irCommTasks+0xfa4>
    986c:	86 cf       	rjmp	.-244    	; 0x977a <irCommTasks+0xeb0>
					}
				} else {	// error...no significant signal perceived
					//irCommRxBitReceived[irCommRxBitCount] = 0xFF;
					updateBlueLed(0);
					if(irCommEnabled == IRCOMM_MODE_RECEIVE) {
						currentProx = 0;
    986e:	10 92 24 02 	sts	0x0224, r1
						adcSaveDataTo = SKIP_SAMPLE;
    9872:	85 e0       	ldi	r24, 0x05	; 5
    9874:	80 93 b9 02 	sts	0x02B9, r24
						adcSamplingState = 0;
    9878:	10 92 ba 02 	sts	0x02BA, r1
						irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    987c:	10 92 c5 04 	sts	0x04C5, r1
    9880:	7c cf       	rjmp	.-264    	; 0x977a <irCommTasks+0xeb0>
				if(irCommTxBitCount == 0) {
					//PORTA = irCommTxSensorMask;
					if(irCommTxSensorGroup==0) {
						PORTA = 0xAA;
					} else {
						PORTA = 0x55;
    9882:	85 e5       	ldi	r24, 0x55	; 85
    9884:	82 b9       	out	0x02, r24	; 2
    9886:	d8 c9       	rjmp	.-3152   	; 0x8c38 <irCommTasks+0x36e>
				break;

			case IRCOMM_RX_CHECK_CRC:
				irCommRxCrcError = (irCommRxCrc + (irCommRxBitReceived[8]<<1) + irCommRxBitReceived[9])&0x03;
				if(irCommRxCrcError==0) {
					irCommRxLastDataReceived = irCommRxByte;
    9888:	80 91 f9 04 	lds	r24, 0x04F9
    988c:	80 93 fe 04 	sts	0x04FE, r24
					irCommRxReceivingSensor = irCommRxMaxSensor;
    9890:	80 91 5c 0b 	lds	r24, 0x0B5C
    9894:	80 93 18 02 	sts	0x0218, r24
					irCommRxDataAvailable = 1;
    9898:	00 93 ff 04 	sts	0x04FF, r16
					updateBlueLed(0);
    989c:	80 e0       	ldi	r24, 0x00	; 0
    989e:	0e 94 5a 3b 	call	0x76b4	; 0x76b4 <updateBlueLed>
					usart0Transmit(irCommRxByte,1);		
    98a2:	80 91 f9 04 	lds	r24, 0x04F9
    98a6:	61 e0       	ldi	r22, 0x01	; 1
    98a8:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <usart0Transmit>
					updateBlueLed(255);
    98ac:	8f ef       	ldi	r24, 0xFF	; 255
    98ae:	0e 94 5a 3b 	call	0x76b4	; 0x76b4 <updateBlueLed>
    98b2:	d4 ce       	rjmp	.-600    	; 0x965c <irCommTasks+0xd92>
				irCommSwitchCountIndexTemp++;
				

				turnOffGreenLeds();
				if(irCommRxPeakHighToLow==1) {
					if(irCommRxStartBitDetected==1) {
    98b4:	20 91 01 05 	lds	r18, 0x0501
    98b8:	21 30       	cpi	r18, 0x01	; 1
    98ba:	09 f4       	brne	.+2      	; 0x98be <irCommTasks+0xff4>
    98bc:	69 c1       	rjmp	.+722    	; 0x9b90 <irCommTasks+0x12c6>

							resetDebugVariables();				
							break;
						}
					} else {
						if(irCommSwitchCount==2) {
    98be:	20 91 f6 04 	lds	r18, 0x04F6
    98c2:	22 30       	cpi	r18, 0x02	; 2
    98c4:	09 f4       	brne	.+2      	; 0x98c8 <irCommTasks+0xffe>
    98c6:	a9 c1       	rjmp	.+850    	; 0x9c1a <irCommTasks+0x1350>
							irCommShiftCounter = 0;
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else if(irCommSwitchCount==1) {		
    98c8:	21 30       	cpi	r18, 0x01	; 1
    98ca:	09 f4       	brne	.+2      	; 0x98ce <irCommTasks+0x1004>
    98cc:	d8 c1       	rjmp	.+944    	; 0x9c7e <irCommTasks+0x13b4>
								irCommState = IRCOMM_RX_IDLE_STATE;

								irCommSyncStateIndexTemp++;
							}							
						} else {							
							if(irCommEnabled == IRCOMM_MODE_RECEIVE) {
    98ce:	80 91 c4 04 	lds	r24, 0x04C4
    98d2:	81 30       	cpi	r24, 0x01	; 1
    98d4:	09 f4       	brne	.+2      	; 0x98d8 <irCommTasks+0x100e>
    98d6:	31 c2       	rjmp	.+1122   	; 0x9d3a <irCommTasks+0x1470>
								currentProx = 0;
								adcSaveDataTo = SKIP_SAMPLE;
								adcSamplingState = 0;
								irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
							}
							irCommState = IRCOMM_RX_IDLE_STATE;	
    98d8:	91 e0       	ldi	r25, 0x01	; 1
    98da:	90 93 c6 04 	sts	0x04C6, r25

							if(irCommSyncStateIndexTemp>1) {
    98de:	80 91 e3 04 	lds	r24, 0x04E3
    98e2:	82 30       	cpi	r24, 0x02	; 2
    98e4:	38 f0       	brcs	.+14     	; 0x98f4 <irCommTasks+0x102a>
								irCommSyncStateIndexTemp = 1;
    98e6:	90 93 e3 04 	sts	0x04E3, r25
								updateRedLed(0);
    98ea:	80 e0       	ldi	r24, 0x00	; 0
    98ec:	0e 94 32 3b 	call	0x7664	; 0x7664 <updateRedLed>
    98f0:	80 91 e3 04 	lds	r24, 0x04E3
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 11;
    98f4:	e8 2f       	mov	r30, r24
    98f6:	f0 e0       	ldi	r31, 0x00	; 0
    98f8:	e6 5b       	subi	r30, 0xB6	; 182
    98fa:	fa 4f       	sbci	r31, 0xFA	; 250
    98fc:	9b e0       	ldi	r25, 0x0B	; 11
    98fe:	90 83       	st	Z, r25
							irCommSyncStateIndexTemp++;
    9900:	8f 5f       	subi	r24, 0xFF	; 255
    9902:	80 93 e3 04 	sts	0x04E3, r24
							//irCommState = IRCOMM_RX_DEBUG;
							//irCommAdcRxState = 12;
							//updateRedLed(0);
							//break;

							resetDebugVariables();				
    9906:	0e 94 bc 43 	call	0x8778	; 0x8778 <resetDebugVariables>
							break;
    990a:	0c 94 80 44 	jmp	0x8900	; 0x8900 <irCommTasks+0x36>
						
				// start counting number of switch around mean signal
				if(irCommMaxSensorSignal[0] > 0) {
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
    990e:	8f ef       	ldi	r24, 0xFF	; 255
    9910:	80 93 f5 04 	sts	0x04F5, r24
    9914:	2f ef       	ldi	r18, 0xFF	; 255
    9916:	38 2f       	mov	r19, r24
    9918:	c1 ce       	rjmp	.-638    	; 0x969c <irCommTasks+0xdd2>
						irCommRxMaxDiff = irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i];
						irCommRxMaxSensor = i;
					}
				}

				if(irCommRxMaxSensorIndexTemp>1) {
    991a:	62 2f       	mov	r22, r18
    991c:	70 e0       	ldi	r23, 0x00	; 0
    991e:	42 2f       	mov	r20, r18
    9920:	4f 5f       	subi	r20, 0xFF	; 255
    9922:	62 cd       	rjmp	.-1340   	; 0x93e8 <irCommTasks+0xb1e>
					//updateBlueLed(0);
				}
				irCommRxMaxDiffTemp[irCommRxMaxDiffIndexTemp] = irCommRxMaxDiff;
				irCommRxMaxDiffIndexTemp++;
				
				if(irCommMaxSensorValueCurrIndexTemp>1) {
    9924:	04 2f       	mov	r16, r20
    9926:	10 e0       	ldi	r17, 0x00	; 0
    9928:	64 2f       	mov	r22, r20
    992a:	6f 5f       	subi	r22, 0xFF	; 255
    992c:	86 cd       	rjmp	.-1268   	; 0x943a <irCommTasks+0xb70>
					//updateBlueLed(0);
				}
				irCommRxMaxSensorTemp[irCommRxMaxSensorIndexTemp] = irCommRxMaxSensor;
				irCommRxMaxSensorIndexTemp++;
					
				if(irCommRxMaxDiffIndexTemp>1) {
    992e:	64 2f       	mov	r22, r20
    9930:	70 e0       	ldi	r23, 0x00	; 0
    9932:	4f 5f       	subi	r20, 0xFF	; 255
    9934:	6e cd       	rjmp	.-1316   	; 0x9412 <irCommTasks+0xb48>
					//updateBlueLed(0);
				}
				irCommMaxSensorValueCurrTemp[irCommMaxSensorValueCurrIndexTemp] = irCommMaxSensorValueCurr[irCommRxMaxSensor];
				irCommMaxSensorValueCurrIndexTemp++;
				
				if(irCommMinSensorValueCurrIndexTemp>1) {
    9936:	a4 2f       	mov	r26, r20
    9938:	b0 e0       	ldi	r27, 0x00	; 0
    993a:	4f 5f       	subi	r20, 0xFF	; 255
    993c:	99 cd       	rjmp	.-1230   	; 0x9470 <irCommTasks+0xba6>
				break;

			case IRCOMM_TX_COMPUTE_TIMINGS:
				updateBlueLed(255);
				if(irCommTxBitToTransmit[irCommTxBitCount] == 3) {
					updateBlueLed(0);
    993e:	80 e0       	ldi	r24, 0x00	; 0
    9940:	0e 94 5a 3b 	call	0x76b4	; 0x76b4 <updateBlueLed>
					irCommTxDuration = IRCOMM_BIT_START2_DURATION;					
    9944:	80 ef       	ldi	r24, 0xF0	; 240
    9946:	90 e0       	ldi	r25, 0x00	; 0
    9948:	90 93 0f 05 	sts	0x050F, r25
    994c:	80 93 0e 05 	sts	0x050E, r24
					irCommTxSwitchCount = IRCOMM_BIT_START2_SWITCH_COUNT;
    9950:	81 e0       	ldi	r24, 0x01	; 1
    9952:	80 93 10 05 	sts	0x0510, r24
    9956:	20 91 0c 05 	lds	r18, 0x050C
    995a:	65 c9       	rjmp	.-3382   	; 0x8c26 <irCommTasks+0x35c>
				if(irCommSwitchCount >= (IRCOMM_BIT0_SWITCH_COUNT-2)) {
					irCommRxBitReceived[irCommRxBitCount] = 0;
					if(irCommRxBitCount<8) {	// do not consider the crc for byte interpretation
						irCommRxByte = irCommRxByte<<1;	// bit0, only shift
					}
				} else if(irCommSwitchCount >= (IRCOMM_BIT1_SWITCH_COUNT-1)) {
    995c:	43 30       	cpi	r20, 0x03	; 3
    995e:	08 f4       	brcc	.+2      	; 0x9962 <irCommTasks+0x1098>
    9960:	04 cf       	rjmp	.-504    	; 0x976a <irCommTasks+0xea0>
					irCommRxBitReceived[irCommRxBitCount] = 1;
    9962:	80 91 f7 04 	lds	r24, 0x04F7
    9966:	e8 2f       	mov	r30, r24
    9968:	f0 e0       	ldi	r31, 0x00	; 0
    996a:	e0 5c       	subi	r30, 0xC0	; 192
    996c:	fa 4f       	sbci	r31, 0xFA	; 250
    996e:	91 e0       	ldi	r25, 0x01	; 1
    9970:	90 83       	st	Z, r25
					if(irCommRxBitCount<8) {	// do not consider the crc for byte interpretation
    9972:	88 30       	cpi	r24, 0x08	; 8
    9974:	08 f0       	brcs	.+2      	; 0x9978 <irCommTasks+0x10ae>
    9976:	0a c1       	rjmp	.+532    	; 0x9b8c <irCommTasks+0x12c2>
						irCommRxCrc++;
    9978:	90 91 e8 04 	lds	r25, 0x04E8
    997c:	9f 5f       	subi	r25, 0xFF	; 255
    997e:	90 93 e8 04 	sts	0x04E8, r25
						irCommRxByte = irCommRxByte<<1;	// bit1, shift and add 1
    9982:	90 91 f9 04 	lds	r25, 0x04F9
    9986:	99 0f       	add	r25, r25
						irCommRxByte += 1;
    9988:	9f 5f       	subi	r25, 0xFF	; 255
    998a:	90 93 f9 04 	sts	0x04F9, r25
    998e:	21 e0       	ldi	r18, 0x01	; 1
    9990:	3e cf       	rjmp	.-388    	; 0x980e <irCommTasks+0xf44>
				if(irCommTxBitToTransmit[irCommTxBitCount] == 3) {
					updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START2_DURATION;					
					irCommTxSwitchCount = IRCOMM_BIT_START2_SWITCH_COUNT;
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 2) {
					updateBlueLed(0);
    9992:	80 e0       	ldi	r24, 0x00	; 0
    9994:	0e 94 5a 3b 	call	0x76b4	; 0x76b4 <updateBlueLed>
					irCommTxDuration = IRCOMM_BIT_START1_DURATION;					
    9998:	88 e7       	ldi	r24, 0x78	; 120
    999a:	90 e0       	ldi	r25, 0x00	; 0
    999c:	90 93 0f 05 	sts	0x050F, r25
    99a0:	80 93 0e 05 	sts	0x050E, r24
					irCommTxSwitchCount = IRCOMM_BIT_START1_SWITCH_COUNT;
    99a4:	00 93 10 05 	sts	0x0510, r16
    99a8:	20 91 0c 05 	lds	r18, 0x050C
    99ac:	3c c9       	rjmp	.-3464   	; 0x8c26 <irCommTasks+0x35c>
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
					irCommTxBitToTransmit[9-i] = irCommTempValue;
					if(irCommTempValue==1) {
						irCommTxCrc++;
    99ae:	4f 5f       	subi	r20, 0xFF	; 255
    99b0:	70 c8       	rjmp	.-3872   	; 0x8a92 <irCommTasks+0x1c8>
    99b2:	4f 5f       	subi	r20, 0xFF	; 255
    99b4:	63 c8       	rjmp	.-3898   	; 0x8a7c <irCommTasks+0x1b2>
    99b6:	4f 5f       	subi	r20, 0xFF	; 255
    99b8:	50 c8       	rjmp	.-3936   	; 0x8a5a <irCommTasks+0x190>
    99ba:	4f 5f       	subi	r20, 0xFF	; 255
    99bc:	3b c8       	rjmp	.-3978   	; 0x8a34 <irCommTasks+0x16a>
    99be:	4f 5f       	subi	r20, 0xFF	; 255
    99c0:	28 c8       	rjmp	.-4016   	; 0x8a12 <irCommTasks+0x148>
    99c2:	4f 5f       	subi	r20, 0xFF	; 255
    99c4:	17 c8       	rjmp	.-4050   	; 0x89f4 <irCommTasks+0x12a>
    99c6:	4f 5f       	subi	r20, 0xFF	; 255
    99c8:	08 c8       	rjmp	.-4080   	; 0x89da <irCommTasks+0x110>
							break;
						}
					}
				} else {
					if(irCommRxStartBitDetected==1) {
						if(irCommSwitchCount==2) {
    99ca:	20 91 f6 04 	lds	r18, 0x04F6
    99ce:	22 30       	cpi	r18, 0x02	; 2
    99d0:	09 f4       	brne	.+2      	; 0x99d4 <irCommTasks+0x110a>
    99d2:	12 c1       	rjmp	.+548    	; 0x9bf8 <irCommTasks+0x132e>
							irCommShiftCounter = 0;
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else if(irCommSwitchCount==1) {
    99d4:	21 30       	cpi	r18, 0x01	; 1
    99d6:	09 f4       	brne	.+2      	; 0x99da <irCommTasks+0x1110>
    99d8:	7e c1       	rjmp	.+764    	; 0x9cd6 <irCommTasks+0x140c>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_WAITING_BIT;
						} else {
							irCommRxStartBitDetected = 0;
    99da:	10 92 01 05 	sts	0x0501, r1
							if(irCommEnabled == IRCOMM_MODE_RECEIVE) {
    99de:	80 91 c4 04 	lds	r24, 0x04C4
    99e2:	81 30       	cpi	r24, 0x01	; 1
    99e4:	09 f4       	brne	.+2      	; 0x99e8 <irCommTasks+0x111e>
    99e6:	9f c1       	rjmp	.+830    	; 0x9d26 <irCommTasks+0x145c>
								currentProx = 0;
								adcSaveDataTo = SKIP_SAMPLE;
								adcSamplingState = 0;
								irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
							}
							irCommState = IRCOMM_RX_IDLE_STATE;	
    99e8:	91 e0       	ldi	r25, 0x01	; 1
    99ea:	90 93 c6 04 	sts	0x04C6, r25

							if(irCommSyncStateIndexTemp>1) {
    99ee:	80 91 e3 04 	lds	r24, 0x04E3
    99f2:	82 30       	cpi	r24, 0x02	; 2
    99f4:	38 f0       	brcs	.+14     	; 0x9a04 <irCommTasks+0x113a>
								irCommSyncStateIndexTemp = 1;
    99f6:	90 93 e3 04 	sts	0x04E3, r25
								updateRedLed(0);
    99fa:	80 e0       	ldi	r24, 0x00	; 0
    99fc:	0e 94 32 3b 	call	0x7664	; 0x7664 <updateRedLed>
    9a00:	80 91 e3 04 	lds	r24, 0x04E3
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 13;
    9a04:	e8 2f       	mov	r30, r24
    9a06:	f0 e0       	ldi	r31, 0x00	; 0
    9a08:	e6 5b       	subi	r30, 0xB6	; 182
    9a0a:	fa 4f       	sbci	r31, 0xFA	; 250
    9a0c:	9d e0       	ldi	r25, 0x0D	; 13
    9a0e:	90 83       	st	Z, r25
							irCommSyncStateIndexTemp++;
    9a10:	8f 5f       	subi	r24, 0xFF	; 255
    9a12:	80 93 e3 04 	sts	0x04E3, r24
							//irCommState = IRCOMM_RX_DEBUG;
							//irCommAdcRxState = 12;
							//updateRedLed(0);
							//break;

							resetDebugVariables();				
    9a16:	0e 94 bc 43 	call	0x8778	; 0x8778 <resetDebugVariables>
							break;
    9a1a:	0c 94 80 44 	jmp	0x8900	; 0x8900 <irCommTasks+0x36>
						}
					} else {
						if(irCommSwitchCount==2) {
							if(irCommSyncStateIndexTemp>1) {
    9a1e:	80 91 e3 04 	lds	r24, 0x04E3
    9a22:	82 30       	cpi	r24, 0x02	; 2
    9a24:	40 f0       	brcs	.+16     	; 0x9a36 <irCommTasks+0x116c>
								irCommSyncStateIndexTemp = 1;
    9a26:	81 e0       	ldi	r24, 0x01	; 1
    9a28:	80 93 e3 04 	sts	0x04E3, r24
								updateRedLed(0);
    9a2c:	80 e0       	ldi	r24, 0x00	; 0
    9a2e:	0e 94 32 3b 	call	0x7664	; 0x7664 <updateRedLed>
    9a32:	80 91 e3 04 	lds	r24, 0x04E3
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 1;
    9a36:	e8 2f       	mov	r30, r24
    9a38:	f0 e0       	ldi	r31, 0x00	; 0
    9a3a:	e6 5b       	subi	r30, 0xB6	; 182
    9a3c:	fa 4f       	sbci	r31, 0xFA	; 250
    9a3e:	91 e0       	ldi	r25, 0x01	; 1
						if(irCommSwitchCount==2) {
							if(irCommSyncStateIndexTemp>1) {
								irCommSyncStateIndexTemp = 1;
								updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 5;
    9a40:	90 83       	st	Z, r25
							irCommSyncStateIndexTemp++;
    9a42:	8f 5f       	subi	r24, 0xFF	; 255
    9a44:	80 93 e3 04 	sts	0x04E3, r24

							irCommShiftCount = IRCOMM_SAMPLING_WINDOW/2 + irCommShiftCount;
    9a48:	80 91 f1 04 	lds	r24, 0x04F1
    9a4c:	86 5f       	subi	r24, 0xF6	; 246
    9a4e:	80 93 f1 04 	sts	0x04F1, r24
							irCommRxPeakHighToLow = 0;
    9a52:	10 92 02 05 	sts	0x0502, r1
							irCommRxStartBitDetected = 0;
    9a56:	10 92 01 05 	sts	0x0501, r1
							irCommSecondBitSkipped = 0;
    9a5a:	10 92 fa 04 	sts	0x04FA, r1
							irCommShiftCounter = 0;
    9a5e:	10 92 fb 04 	sts	0x04FB, r1
							irCommRxBitCount = 0;	
    9a62:	10 92 f7 04 	sts	0x04F7, r1
							irCommRxCrc = 0;	
    9a66:	10 92 e8 04 	sts	0x04E8, r1
							irCommRxByte = 0;
    9a6a:	10 92 f9 04 	sts	0x04F9, r1
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
    9a6e:	84 e0       	ldi	r24, 0x04	; 4
    9a70:	80 93 c6 04 	sts	0x04C6, r24
							break;				
						}
					}
				}
	
				if(irCommStateIndexTemp>13) {
    9a74:	80 91 e2 04 	lds	r24, 0x04E2
    9a78:	8e 30       	cpi	r24, 0x0E	; 14
    9a7a:	08 f0       	brcs	.+2      	; 0x9a7e <irCommTasks+0x11b4>
    9a7c:	40 c0       	rjmp	.+128    	; 0x9afe <irCommTasks+0x1234>
					irCommStateIndexTemp = 13;
					updateRedLed(0);
				}
				irCommStateTemp[irCommStateIndexTemp] = irCommState;
    9a7e:	90 91 c6 04 	lds	r25, 0x04C6
    9a82:	e8 2f       	mov	r30, r24
    9a84:	f0 e0       	ldi	r31, 0x00	; 0
    9a86:	e4 5e       	subi	r30, 0xE4	; 228
    9a88:	fa 4f       	sbci	r31, 0xFA	; 250
    9a8a:	90 83       	st	Z, r25
				irCommStateIndexTemp++;
    9a8c:	8f 5f       	subi	r24, 0xFF	; 255
    9a8e:	80 93 e2 04 	sts	0x04E2, r24
				
				if(irCommShiftCountFinalIndexTemp>1) {
    9a92:	80 91 dc 04 	lds	r24, 0x04DC
    9a96:	82 30       	cpi	r24, 0x02	; 2
    9a98:	40 f0       	brcs	.+16     	; 0x9aaa <irCommTasks+0x11e0>
					irCommShiftCountFinalIndexTemp = 1;
    9a9a:	81 e0       	ldi	r24, 0x01	; 1
    9a9c:	80 93 dc 04 	sts	0x04DC, r24
					updateRedLed(0);
    9aa0:	80 e0       	ldi	r24, 0x00	; 0
    9aa2:	0e 94 32 3b 	call	0x7664	; 0x7664 <updateRedLed>
    9aa6:	80 91 dc 04 	lds	r24, 0x04DC
				}
				irCommShiftCountFinalTemp[irCommShiftCountFinalIndexTemp] = irCommShiftCount;
    9aaa:	e8 2f       	mov	r30, r24
    9aac:	f0 e0       	ldi	r31, 0x00	; 0
    9aae:	e9 5e       	subi	r30, 0xE9	; 233
    9ab0:	f4 4f       	sbci	r31, 0xF4	; 244
    9ab2:	90 91 f1 04 	lds	r25, 0x04F1
    9ab6:	90 83       	st	Z, r25
				irCommShiftCountFinalIndexTemp++;
    9ab8:	8f 5f       	subi	r24, 0xFF	; 255
    9aba:	80 93 dc 04 	sts	0x04DC, r24
				
				if(irCommRxStartBitDetectedIndexTemp>1) {
    9abe:	80 91 e1 04 	lds	r24, 0x04E1
    9ac2:	82 30       	cpi	r24, 0x02	; 2
    9ac4:	40 f0       	brcs	.+16     	; 0x9ad6 <irCommTasks+0x120c>
					irCommRxStartBitDetectedIndexTemp = 1;
    9ac6:	81 e0       	ldi	r24, 0x01	; 1
    9ac8:	80 93 e1 04 	sts	0x04E1, r24
					updateRedLed(0);
    9acc:	80 e0       	ldi	r24, 0x00	; 0
    9ace:	0e 94 32 3b 	call	0x7664	; 0x7664 <updateRedLed>
    9ad2:	80 91 e1 04 	lds	r24, 0x04E1
				}
				irCommRxStartBitDetectedTemp[irCommRxStartBitDetectedIndexTemp] = irCommRxStartBitDetected;
    9ad6:	e8 2f       	mov	r30, r24
    9ad8:	f0 e0       	ldi	r31, 0x00	; 0
    9ada:	eb 5a       	subi	r30, 0xAB	; 171
    9adc:	fa 4f       	sbci	r31, 0xFA	; 250
    9ade:	90 91 01 05 	lds	r25, 0x0501
    9ae2:	90 83       	st	Z, r25
				irCommRxStartBitDetectedIndexTemp++;			
    9ae4:	8f 5f       	subi	r24, 0xFF	; 255
    9ae6:	80 93 e1 04 	sts	0x04E1, r24
					usart0Transmit(irCommState,1);					
				}
				updateBlueLed(255);
				*/

				break;
    9aea:	0c 94 80 44 	jmp	0x8900	; 0x8900 <irCommTasks+0x36>
						
				// start counting number of switch around mean signal
				if(irCommMaxSensorSignal[0] > 0) {
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
    9aee:	8f ef       	ldi	r24, 0xFF	; 255
    9af0:	80 93 f5 04 	sts	0x04F5, r24
    9af4:	2f ef       	ldi	r18, 0xFF	; 255
    9af6:	38 2f       	mov	r19, r24
    9af8:	5c ce       	rjmp	.-840    	; 0x97b2 <irCommTasks+0xee8>
					}
				}
				// check whether we received either a "0" or a "1"
				if(irCommSwitchCount >= (IRCOMM_BIT0_SWITCH_COUNT-2)) {
					irCommRxBitReceived[irCommRxBitCount] = 0;
					if(irCommRxBitCount<8) {	// do not consider the crc for byte interpretation
    9afa:	20 e0       	ldi	r18, 0x00	; 0
    9afc:	88 ce       	rjmp	.-752    	; 0x980e <irCommTasks+0xf44>
						}
					}
				}
	
				if(irCommStateIndexTemp>13) {
					irCommStateIndexTemp = 13;
    9afe:	8d e0       	ldi	r24, 0x0D	; 13
    9b00:	80 93 e2 04 	sts	0x04E2, r24
					updateRedLed(0);
    9b04:	80 e0       	ldi	r24, 0x00	; 0
    9b06:	0e 94 32 3b 	call	0x7664	; 0x7664 <updateRedLed>
    9b0a:	80 91 e2 04 	lds	r24, 0x04E2
    9b0e:	b7 cf       	rjmp	.-146    	; 0x9a7e <irCommTasks+0x11b4>

				setGreenLed(irCommRxBitCount, 1);

				irCommRxBitCount++;
				if(irCommRxBitCount == 10) {	// received 8 bit of data + 2 bit of crc
					irCommState = IRCOMM_RX_CHECK_CRC;
    9b10:	87 e0       	ldi	r24, 0x07	; 7
    9b12:	80 93 c6 04 	sts	0x04C6, r24

					if(irCommStateIndexTemp>13) {
    9b16:	80 91 e2 04 	lds	r24, 0x04E2
    9b1a:	8e 30       	cpi	r24, 0x0E	; 14
    9b1c:	08 f4       	brcc	.+2      	; 0x9b20 <irCommTasks+0x1256>
    9b1e:	c9 cc       	rjmp	.-1646   	; 0x94b2 <irCommTasks+0xbe8>
    9b20:	96 ce       	rjmp	.-724    	; 0x984e <irCommTasks+0xf84>
					break;

				}

				if(irCommRxBitReceivedIndexTemp>9) {
					irCommRxBitReceivedIndexTemp = 9;
    9b22:	89 e0       	ldi	r24, 0x09	; 9
    9b24:	80 93 e5 04 	sts	0x04E5, r24
					updateRedLed(0);
    9b28:	80 e0       	ldi	r24, 0x00	; 0
    9b2a:	0e 94 32 3b 	call	0x7664	; 0x7664 <updateRedLed>
    9b2e:	90 91 e5 04 	lds	r25, 0x04E5
    9b32:	80 91 f7 04 	lds	r24, 0x04F7
    9b36:	e8 2f       	mov	r30, r24
    9b38:	f0 e0       	ldi	r31, 0x00	; 0
    9b3a:	e0 5c       	subi	r30, 0xC0	; 192
    9b3c:	fa 4f       	sbci	r31, 0xFA	; 250
    9b3e:	20 81       	ld	r18, Z
    9b40:	6b ce       	rjmp	.-810    	; 0x9818 <irCommTasks+0xf4e>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else if(irCommSwitchCount==1) {
							if(irCommRxStartPeakDuration > IRCOMM_SAMPLING_WINDOW/2) {
    9b42:	80 91 03 05 	lds	r24, 0x0503
    9b46:	8b 30       	cpi	r24, 0x0B	; 11
    9b48:	08 f4       	brcc	.+2      	; 0x9b4c <irCommTasks+0x1282>
    9b4a:	81 c0       	rjmp	.+258    	; 0x9c4e <irCommTasks+0x1384>
								if(irCommEnabled == IRCOMM_MODE_RECEIVE) {
    9b4c:	80 91 c4 04 	lds	r24, 0x04C4
    9b50:	81 30       	cpi	r24, 0x01	; 1
    9b52:	09 f4       	brne	.+2      	; 0x9b56 <irCommTasks+0x128c>
    9b54:	42 c1       	rjmp	.+644    	; 0x9dda <irCommTasks+0x1510>
									currentProx = 0;
									adcSaveDataTo = SKIP_SAMPLE;
									adcSamplingState = 0;
									irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
								}
								irCommState = IRCOMM_RX_IDLE_STATE;
    9b56:	91 e0       	ldi	r25, 0x01	; 1
    9b58:	90 93 c6 04 	sts	0x04C6, r25

								if(irCommSyncStateIndexTemp>1) {
    9b5c:	80 91 e3 04 	lds	r24, 0x04E3
    9b60:	82 30       	cpi	r24, 0x02	; 2
    9b62:	38 f0       	brcs	.+14     	; 0x9b72 <irCommTasks+0x12a8>
									irCommSyncStateIndexTemp = 1;
    9b64:	90 93 e3 04 	sts	0x04E3, r25
									updateRedLed(0);
    9b68:	80 e0       	ldi	r24, 0x00	; 0
    9b6a:	0e 94 32 3b 	call	0x7664	; 0x7664 <updateRedLed>
    9b6e:	80 91 e3 04 	lds	r24, 0x04E3
								}
								irCommSyncStateTemp[irCommSyncStateIndexTemp] = 14;
    9b72:	e8 2f       	mov	r30, r24
    9b74:	f0 e0       	ldi	r31, 0x00	; 0
    9b76:	e6 5b       	subi	r30, 0xB6	; 182
    9b78:	fa 4f       	sbci	r31, 0xFA	; 250
    9b7a:	9e e0       	ldi	r25, 0x0E	; 14
    9b7c:	90 83       	st	Z, r25
								irCommSyncStateIndexTemp++;
    9b7e:	8f 5f       	subi	r24, 0xFF	; 255
    9b80:	80 93 e3 04 	sts	0x04E3, r24
								//irCommState = IRCOMM_RX_DEBUG;
								//irCommAdcRxState = 12;
								//updateRedLed(0);
								//break;

								resetDebugVariables();				
    9b84:	0e 94 bc 43 	call	0x8778	; 0x8778 <resetDebugVariables>
								break;
    9b88:	0c 94 80 44 	jmp	0x8900	; 0x8900 <irCommTasks+0x36>
					if(irCommRxBitCount<8) {	// do not consider the crc for byte interpretation
						irCommRxByte = irCommRxByte<<1;	// bit0, only shift
					}
				} else if(irCommSwitchCount >= (IRCOMM_BIT1_SWITCH_COUNT-1)) {
					irCommRxBitReceived[irCommRxBitCount] = 1;
					if(irCommRxBitCount<8) {	// do not consider the crc for byte interpretation
    9b8c:	21 e0       	ldi	r18, 0x01	; 1
    9b8e:	3f ce       	rjmp	.-898    	; 0x980e <irCommTasks+0xf44>
				

				turnOffGreenLeds();
				if(irCommRxPeakHighToLow==1) {
					if(irCommRxStartBitDetected==1) {
						if(irCommSwitchCount==2) {
    9b90:	90 91 f6 04 	lds	r25, 0x04F6
    9b94:	92 30       	cpi	r25, 0x02	; 2
    9b96:	09 f4       	brne	.+2      	; 0x9b9a <irCommTasks+0x12d0>
    9b98:	05 c1       	rjmp	.+522    	; 0x9da4 <irCommTasks+0x14da>
							irCommShiftCounter = 0;
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_WAITING_BIT;
						} else if(irCommSwitchCount==1) {
    9b9a:	91 30       	cpi	r25, 0x01	; 1
    9b9c:	09 f4       	brne	.+2      	; 0x9ba0 <irCommTasks+0x12d6>
    9b9e:	ed c0       	rjmp	.+474    	; 0x9d7a <irCommTasks+0x14b0>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else {
							irCommRxStartBitDetected = 0;
    9ba0:	10 92 01 05 	sts	0x0501, r1
							if(irCommEnabled == IRCOMM_MODE_RECEIVE) {
    9ba4:	80 91 c4 04 	lds	r24, 0x04C4
    9ba8:	81 30       	cpi	r24, 0x01	; 1
    9baa:	09 f4       	brne	.+2      	; 0x9bae <irCommTasks+0x12e4>
    9bac:	0c c1       	rjmp	.+536    	; 0x9dc6 <irCommTasks+0x14fc>
								currentProx = 0;
								adcSaveDataTo = SKIP_SAMPLE;
								adcSamplingState = 0;
								irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
							}
							irCommState = IRCOMM_RX_IDLE_STATE;	
    9bae:	91 e0       	ldi	r25, 0x01	; 1
    9bb0:	90 93 c6 04 	sts	0x04C6, r25

							if(irCommSyncStateIndexTemp>1) {
    9bb4:	80 91 e3 04 	lds	r24, 0x04E3
    9bb8:	82 30       	cpi	r24, 0x02	; 2
    9bba:	38 f0       	brcs	.+14     	; 0x9bca <irCommTasks+0x1300>
								irCommSyncStateIndexTemp = 1;
    9bbc:	90 93 e3 04 	sts	0x04E3, r25
								updateRedLed(0);
    9bc0:	80 e0       	ldi	r24, 0x00	; 0
    9bc2:	0e 94 32 3b 	call	0x7664	; 0x7664 <updateRedLed>
    9bc6:	80 91 e3 04 	lds	r24, 0x04E3
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 12;
    9bca:	e8 2f       	mov	r30, r24
    9bcc:	f0 e0       	ldi	r31, 0x00	; 0
    9bce:	e6 5b       	subi	r30, 0xB6	; 182
    9bd0:	fa 4f       	sbci	r31, 0xFA	; 250
    9bd2:	9c e0       	ldi	r25, 0x0C	; 12
    9bd4:	90 83       	st	Z, r25
							irCommSyncStateIndexTemp++;
    9bd6:	8f 5f       	subi	r24, 0xFF	; 255
    9bd8:	80 93 e3 04 	sts	0x04E3, r24
							//irCommState = IRCOMM_RX_DEBUG;
							//irCommAdcRxState = 12;
							//updateRedLed(0);
							//break;

							resetDebugVariables();				
    9bdc:	0e 94 bc 43 	call	0x8778	; 0x8778 <resetDebugVariables>
							break;
    9be0:	0c 94 80 44 	jmp	0x8900	; 0x8900 <irCommTasks+0x36>
								irCommRxByte = 0;
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
							}
						} else {
							if(irCommEnabled == IRCOMM_MODE_RECEIVE) {
								currentProx = 0;
    9be4:	10 92 24 02 	sts	0x0224, r1
								adcSaveDataTo = SKIP_SAMPLE;
    9be8:	85 e0       	ldi	r24, 0x05	; 5
    9bea:	80 93 b9 02 	sts	0x02B9, r24
								adcSamplingState = 0;
    9bee:	10 92 ba 02 	sts	0x02BA, r1
								irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    9bf2:	10 92 c5 04 	sts	0x04C5, r1
    9bf6:	9c cd       	rjmp	.-1224   	; 0x9730 <irCommTasks+0xe66>
						}
					}
				} else {
					if(irCommRxStartBitDetected==1) {
						if(irCommSwitchCount==2) {
							if(irCommSyncStateIndexTemp>1) {
    9bf8:	80 91 e3 04 	lds	r24, 0x04E3
    9bfc:	82 30       	cpi	r24, 0x02	; 2
    9bfe:	38 f0       	brcs	.+14     	; 0x9c0e <irCommTasks+0x1344>
								irCommSyncStateIndexTemp = 1;
    9c00:	90 93 e3 04 	sts	0x04E3, r25
								updateRedLed(0);
    9c04:	80 e0       	ldi	r24, 0x00	; 0
    9c06:	0e 94 32 3b 	call	0x7664	; 0x7664 <updateRedLed>
    9c0a:	80 91 e3 04 	lds	r24, 0x04E3
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 5;
    9c0e:	e8 2f       	mov	r30, r24
    9c10:	f0 e0       	ldi	r31, 0x00	; 0
    9c12:	e6 5b       	subi	r30, 0xB6	; 182
    9c14:	fa 4f       	sbci	r31, 0xFA	; 250
    9c16:	95 e0       	ldi	r25, 0x05	; 5
    9c18:	13 cf       	rjmp	.-474    	; 0x9a40 <irCommTasks+0x1176>
							resetDebugVariables();				
							break;
						}
					} else {
						if(irCommSwitchCount==2) {
							if(irCommSyncStateIndexTemp>1) {
    9c1a:	80 91 e3 04 	lds	r24, 0x04E3
    9c1e:	82 30       	cpi	r24, 0x02	; 2
    9c20:	38 f0       	brcs	.+14     	; 0x9c30 <irCommTasks+0x1366>
								irCommSyncStateIndexTemp = 1;
    9c22:	90 93 e3 04 	sts	0x04E3, r25
								updateRedLed(0);
    9c26:	80 e0       	ldi	r24, 0x00	; 0
    9c28:	0e 94 32 3b 	call	0x7664	; 0x7664 <updateRedLed>
    9c2c:	80 91 e3 04 	lds	r24, 0x04E3
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 3;
    9c30:	e8 2f       	mov	r30, r24
    9c32:	f0 e0       	ldi	r31, 0x00	; 0
    9c34:	e6 5b       	subi	r30, 0xB6	; 182
    9c36:	fa 4f       	sbci	r31, 0xFA	; 250
    9c38:	93 e0       	ldi	r25, 0x03	; 3
    9c3a:	90 83       	st	Z, r25
							irCommSyncStateIndexTemp++;
    9c3c:	8f 5f       	subi	r24, 0xFF	; 255
    9c3e:	80 93 e3 04 	sts	0x04E3, r24

							irCommShiftCount = IRCOMM_SAMPLING_WINDOW + irCommShiftCount;
    9c42:	80 91 f1 04 	lds	r24, 0x04F1
    9c46:	8c 5e       	subi	r24, 0xEC	; 236
    9c48:	80 93 f1 04 	sts	0x04F1, r24
    9c4c:	02 cf       	rjmp	.-508    	; 0x9a52 <irCommTasks+0x1188>
								//break;

								resetDebugVariables();				
								break;
							} else {
								if(irCommSyncStateIndexTemp>1) {
    9c4e:	80 91 e3 04 	lds	r24, 0x04E3
    9c52:	82 30       	cpi	r24, 0x02	; 2
    9c54:	38 f0       	brcs	.+14     	; 0x9c64 <irCommTasks+0x139a>
									irCommSyncStateIndexTemp = 1;
    9c56:	90 93 e3 04 	sts	0x04E3, r25
									updateRedLed(0);
    9c5a:	80 e0       	ldi	r24, 0x00	; 0
    9c5c:	0e 94 32 3b 	call	0x7664	; 0x7664 <updateRedLed>
    9c60:	80 91 e3 04 	lds	r24, 0x04E3
								}
								irCommSyncStateTemp[irCommSyncStateIndexTemp] = 7;
    9c64:	e8 2f       	mov	r30, r24
    9c66:	f0 e0       	ldi	r31, 0x00	; 0
    9c68:	e6 5b       	subi	r30, 0xB6	; 182
    9c6a:	fa 4f       	sbci	r31, 0xFA	; 250
    9c6c:	97 e0       	ldi	r25, 0x07	; 7
    9c6e:	90 83       	st	Z, r25
								irCommSyncStateIndexTemp++;
    9c70:	8f 5f       	subi	r24, 0xFF	; 255
    9c72:	80 93 e3 04 	sts	0x04E3, r24

								irCommShiftCount = IRCOMM_SAMPLING_WINDOW;
    9c76:	84 e1       	ldi	r24, 0x14	; 20
    9c78:	80 93 f1 04 	sts	0x04F1, r24
    9c7c:	ea ce       	rjmp	.-556    	; 0x9a52 <irCommTasks+0x1188>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else if(irCommSwitchCount==1) {		
							irCommRxStartBitDetected = 1;					
    9c7e:	20 93 01 05 	sts	0x0501, r18
							if(irCommRxStartPeakDuration > IRCOMM_SAMPLING_WINDOW/2) {
    9c82:	80 91 03 05 	lds	r24, 0x0503
    9c86:	8b 30       	cpi	r24, 0x0B	; 11
    9c88:	08 f4       	brcc	.+2      	; 0x9c8c <irCommTasks+0x13c2>
    9c8a:	61 c0       	rjmp	.+194    	; 0x9d4e <irCommTasks+0x1484>
								if(irCommSyncStateIndexTemp>1) {
    9c8c:	80 91 e3 04 	lds	r24, 0x04E3
    9c90:	82 30       	cpi	r24, 0x02	; 2
    9c92:	38 f0       	brcs	.+14     	; 0x9ca2 <irCommTasks+0x13d8>
									irCommSyncStateIndexTemp = 1;
    9c94:	20 93 e3 04 	sts	0x04E3, r18
									updateRedLed(0);
    9c98:	80 e0       	ldi	r24, 0x00	; 0
    9c9a:	0e 94 32 3b 	call	0x7664	; 0x7664 <updateRedLed>
    9c9e:	80 91 e3 04 	lds	r24, 0x04E3
								}
								irCommSyncStateTemp[irCommSyncStateIndexTemp] = 4;
    9ca2:	e8 2f       	mov	r30, r24
    9ca4:	f0 e0       	ldi	r31, 0x00	; 0
    9ca6:	e6 5b       	subi	r30, 0xB6	; 182
    9ca8:	fa 4f       	sbci	r31, 0xFA	; 250
    9caa:	94 e0       	ldi	r25, 0x04	; 4
    9cac:	90 83       	st	Z, r25
								irCommSyncStateIndexTemp++;
    9cae:	8f 5f       	subi	r24, 0xFF	; 255
    9cb0:	80 93 e3 04 	sts	0x04E3, r24

								//irCommShiftCount = irCommShiftCount;
								irCommRxPeakHighToLow = 0;
    9cb4:	10 92 02 05 	sts	0x0502, r1
								irCommRxStartBitDetected = 0;
    9cb8:	10 92 01 05 	sts	0x0501, r1
								irCommSecondBitSkipped = 0;
    9cbc:	10 92 fa 04 	sts	0x04FA, r1
								irCommShiftCounter = 0;
    9cc0:	10 92 fb 04 	sts	0x04FB, r1
								irCommRxBitCount = 0;	
    9cc4:	10 92 f7 04 	sts	0x04F7, r1
								irCommRxCrc = 0;	
    9cc8:	10 92 e8 04 	sts	0x04E8, r1
								irCommRxByte = 0;
    9ccc:	10 92 f9 04 	sts	0x04F9, r1
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
    9cd0:	90 93 c6 04 	sts	0x04C6, r25
    9cd4:	cf ce       	rjmp	.-610    	; 0x9a74 <irCommTasks+0x11aa>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else if(irCommSwitchCount==1) {
							if(irCommSyncStateIndexTemp>1) {
    9cd6:	80 91 e3 04 	lds	r24, 0x04E3
    9cda:	82 30       	cpi	r24, 0x02	; 2
    9cdc:	38 f0       	brcs	.+14     	; 0x9cec <irCommTasks+0x1422>
								irCommSyncStateIndexTemp = 1;
    9cde:	20 93 e3 04 	sts	0x04E3, r18
								updateRedLed(0);
    9ce2:	80 e0       	ldi	r24, 0x00	; 0
    9ce4:	0e 94 32 3b 	call	0x7664	; 0x7664 <updateRedLed>
    9ce8:	80 91 e3 04 	lds	r24, 0x04E3
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 8;
    9cec:	e8 2f       	mov	r30, r24
    9cee:	f0 e0       	ldi	r31, 0x00	; 0
    9cf0:	e6 5b       	subi	r30, 0xB6	; 182
    9cf2:	fa 4f       	sbci	r31, 0xFA	; 250
    9cf4:	98 e0       	ldi	r25, 0x08	; 8
    9cf6:	90 83       	st	Z, r25
							irCommSyncStateIndexTemp++;
    9cf8:	8f 5f       	subi	r24, 0xFF	; 255
    9cfa:	80 93 e3 04 	sts	0x04E3, r24

							irCommShiftCount = 0;
    9cfe:	10 92 f1 04 	sts	0x04F1, r1
							irCommRxPeakHighToLow = 0;
    9d02:	10 92 02 05 	sts	0x0502, r1
							irCommRxStartBitDetected = 0;
    9d06:	10 92 01 05 	sts	0x0501, r1
							irCommSecondBitSkipped = 0;
    9d0a:	10 92 fa 04 	sts	0x04FA, r1
							irCommShiftCounter = 0;
    9d0e:	10 92 fb 04 	sts	0x04FB, r1
							irCommRxBitCount = 0;	
    9d12:	10 92 f7 04 	sts	0x04F7, r1
							irCommRxCrc = 0;	
    9d16:	10 92 e8 04 	sts	0x04E8, r1
							irCommRxByte = 0;
    9d1a:	10 92 f9 04 	sts	0x04F9, r1
							irCommState = IRCOMM_RX_WAITING_BIT;
    9d1e:	85 e0       	ldi	r24, 0x05	; 5
    9d20:	80 93 c6 04 	sts	0x04C6, r24
    9d24:	a7 ce       	rjmp	.-690    	; 0x9a74 <irCommTasks+0x11aa>
						} else {
							irCommRxStartBitDetected = 0;
							if(irCommEnabled == IRCOMM_MODE_RECEIVE) {
								currentProx = 0;
    9d26:	10 92 24 02 	sts	0x0224, r1
								adcSaveDataTo = SKIP_SAMPLE;
    9d2a:	85 e0       	ldi	r24, 0x05	; 5
    9d2c:	80 93 b9 02 	sts	0x02B9, r24
								adcSamplingState = 0;
    9d30:	10 92 ba 02 	sts	0x02BA, r1
								irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    9d34:	10 92 c5 04 	sts	0x04C5, r1
    9d38:	57 ce       	rjmp	.-850    	; 0x99e8 <irCommTasks+0x111e>

								irCommSyncStateIndexTemp++;
							}							
						} else {							
							if(irCommEnabled == IRCOMM_MODE_RECEIVE) {
								currentProx = 0;
    9d3a:	10 92 24 02 	sts	0x0224, r1
								adcSaveDataTo = SKIP_SAMPLE;
    9d3e:	85 e0       	ldi	r24, 0x05	; 5
    9d40:	80 93 b9 02 	sts	0x02B9, r24
								adcSamplingState = 0;
    9d44:	10 92 ba 02 	sts	0x02BA, r1
								irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    9d48:	10 92 c5 04 	sts	0x04C5, r1
    9d4c:	c5 cd       	rjmp	.-1142   	; 0x98d8 <irCommTasks+0x100e>
								irCommRxBitCount = 0;	
								irCommRxCrc = 0;	
								irCommRxByte = 0;
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
							} else {
								if(irCommEnabled == IRCOMM_MODE_RECEIVE) {
    9d4e:	80 91 c4 04 	lds	r24, 0x04C4
    9d52:	81 30       	cpi	r24, 0x01	; 1
    9d54:	49 f4       	brne	.+18     	; 0x9d68 <irCommTasks+0x149e>
									currentProx = 0;
    9d56:	10 92 24 02 	sts	0x0224, r1
									adcSaveDataTo = SKIP_SAMPLE;
    9d5a:	85 e0       	ldi	r24, 0x05	; 5
    9d5c:	80 93 b9 02 	sts	0x02B9, r24
									adcSamplingState = 0;
    9d60:	10 92 ba 02 	sts	0x02BA, r1
									irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    9d64:	10 92 c5 04 	sts	0x04C5, r1
								}
								irCommState = IRCOMM_RX_IDLE_STATE;
    9d68:	81 e0       	ldi	r24, 0x01	; 1
    9d6a:	80 93 c6 04 	sts	0x04C6, r24

								irCommSyncStateIndexTemp++;
    9d6e:	80 91 e3 04 	lds	r24, 0x04E3
    9d72:	8f 5f       	subi	r24, 0xFF	; 255
    9d74:	80 93 e3 04 	sts	0x04E3, r24
    9d78:	7d ce       	rjmp	.-774    	; 0x9a74 <irCommTasks+0x11aa>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_WAITING_BIT;
						} else if(irCommSwitchCount==1) {
							if(irCommSyncStateIndexTemp>1) {
    9d7a:	80 91 e3 04 	lds	r24, 0x04E3
    9d7e:	82 30       	cpi	r24, 0x02	; 2
    9d80:	38 f0       	brcs	.+14     	; 0x9d90 <irCommTasks+0x14c6>
								irCommSyncStateIndexTemp = 1;
    9d82:	90 93 e3 04 	sts	0x04E3, r25
								updateRedLed(0);
    9d86:	80 e0       	ldi	r24, 0x00	; 0
    9d88:	0e 94 32 3b 	call	0x7664	; 0x7664 <updateRedLed>
    9d8c:	80 91 e3 04 	lds	r24, 0x04E3
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 2;
    9d90:	e8 2f       	mov	r30, r24
    9d92:	f0 e0       	ldi	r31, 0x00	; 0
    9d94:	e6 5b       	subi	r30, 0xB6	; 182
    9d96:	fa 4f       	sbci	r31, 0xFA	; 250
    9d98:	92 e0       	ldi	r25, 0x02	; 2
    9d9a:	90 83       	st	Z, r25
							irCommSyncStateIndexTemp++;
    9d9c:	8f 5f       	subi	r24, 0xFF	; 255
    9d9e:	80 93 e3 04 	sts	0x04E3, r24
    9da2:	57 ce       	rjmp	.-850    	; 0x9a52 <irCommTasks+0x1188>

				turnOffGreenLeds();
				if(irCommRxPeakHighToLow==1) {
					if(irCommRxStartBitDetected==1) {
						if(irCommSwitchCount==2) {
							if(irCommSyncStateIndexTemp>1) {
    9da4:	80 91 e3 04 	lds	r24, 0x04E3
    9da8:	82 30       	cpi	r24, 0x02	; 2
    9daa:	38 f0       	brcs	.+14     	; 0x9dba <irCommTasks+0x14f0>
								irCommSyncStateIndexTemp = 1;
    9dac:	20 93 e3 04 	sts	0x04E3, r18
								updateRedLed(0);
    9db0:	80 e0       	ldi	r24, 0x00	; 0
    9db2:	0e 94 32 3b 	call	0x7664	; 0x7664 <updateRedLed>
    9db6:	80 91 e3 04 	lds	r24, 0x04E3
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 6;
    9dba:	e8 2f       	mov	r30, r24
    9dbc:	f0 e0       	ldi	r31, 0x00	; 0
    9dbe:	e6 5b       	subi	r30, 0xB6	; 182
    9dc0:	fa 4f       	sbci	r31, 0xFA	; 250
    9dc2:	96 e0       	ldi	r25, 0x06	; 6
    9dc4:	98 cf       	rjmp	.-208    	; 0x9cf6 <irCommTasks+0x142c>
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else {
							irCommRxStartBitDetected = 0;
							if(irCommEnabled == IRCOMM_MODE_RECEIVE) {
								currentProx = 0;
    9dc6:	10 92 24 02 	sts	0x0224, r1
								adcSaveDataTo = SKIP_SAMPLE;
    9dca:	85 e0       	ldi	r24, 0x05	; 5
    9dcc:	80 93 b9 02 	sts	0x02B9, r24
								adcSamplingState = 0;
    9dd0:	10 92 ba 02 	sts	0x02BA, r1
								irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    9dd4:	10 92 c5 04 	sts	0x04C5, r1
    9dd8:	ea ce       	rjmp	.-556    	; 0x9bae <irCommTasks+0x12e4>
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else if(irCommSwitchCount==1) {
							if(irCommRxStartPeakDuration > IRCOMM_SAMPLING_WINDOW/2) {
								if(irCommEnabled == IRCOMM_MODE_RECEIVE) {
									currentProx = 0;
    9dda:	10 92 24 02 	sts	0x0224, r1
									adcSaveDataTo = SKIP_SAMPLE;
    9dde:	85 e0       	ldi	r24, 0x05	; 5
    9de0:	80 93 b9 02 	sts	0x02B9, r24
									adcSamplingState = 0;
    9de4:	10 92 ba 02 	sts	0x02BA, r1
									irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    9de8:	10 92 c5 04 	sts	0x04C5, r1
    9dec:	b4 ce       	rjmp	.-664    	; 0x9b56 <irCommTasks+0x128c>

00009dee <irCommSendData>:

}


void irCommSendData(unsigned char value, unsigned char sensorMask) {
	irCommTxByte = value;
    9dee:	80 93 05 05 	sts	0x0505, r24
	irCommTxByteEnqueued = 1;
    9df2:	81 e0       	ldi	r24, 0x01	; 1
    9df4:	80 93 06 05 	sts	0x0506, r24
	irCommTxSensorMask = sensorMask;
    9df8:	60 93 13 05 	sts	0x0513, r22
}
    9dfc:	08 95       	ret

00009dfe <irCommDataSent>:

unsigned char irCommDataSent() {
	if(irCommTxByteEnqueued==1) {
		return 0;
    9dfe:	81 e0       	ldi	r24, 0x01	; 1
    9e00:	90 91 06 05 	lds	r25, 0x0506
    9e04:	91 30       	cpi	r25, 0x01	; 1
    9e06:	09 f0       	breq	.+2      	; 0x9e0a <irCommDataSent+0xc>
	} else {
		return 1;
	}
}
    9e08:	08 95       	ret
	irCommTxSensorMask = sensorMask;
}

unsigned char irCommDataSent() {
	if(irCommTxByteEnqueued==1) {
		return 0;
    9e0a:	80 e0       	ldi	r24, 0x00	; 0
	} else {
		return 1;
	}
}
    9e0c:	08 95       	ret

00009e0e <irCommDataAvailable>:

unsigned char irCommDataAvailable() {
	return irCommRxDataAvailable;
}
    9e0e:	80 91 ff 04 	lds	r24, 0x04FF
    9e12:	08 95       	ret

00009e14 <irCommReadData>:

unsigned char irCommReadData() {
	irCommRxDataAvailable = 0;
    9e14:	10 92 ff 04 	sts	0x04FF, r1
	return irCommRxLastDataReceived;
}
    9e18:	80 91 fe 04 	lds	r24, 0x04FE
    9e1c:	08 95       	ret

00009e1e <irCommReceivingSensor>:

signed char irCommReceivingSensor() {
	return irCommRxReceivingSensor;
}
    9e1e:	80 91 18 02 	lds	r24, 0x0218
    9e22:	08 95       	ret

00009e24 <__subsf3>:
    9e24:	50 58       	subi	r21, 0x80	; 128

00009e26 <__addsf3>:
    9e26:	bb 27       	eor	r27, r27
    9e28:	aa 27       	eor	r26, r26
    9e2a:	0e d0       	rcall	.+28     	; 0x9e48 <__addsf3x>
    9e2c:	27 c2       	rjmp	.+1102   	; 0xa27c <__fp_round>
    9e2e:	f0 d1       	rcall	.+992    	; 0xa210 <__fp_pscA>
    9e30:	30 f0       	brcs	.+12     	; 0x9e3e <__addsf3+0x18>
    9e32:	f5 d1       	rcall	.+1002   	; 0xa21e <__fp_pscB>
    9e34:	20 f0       	brcs	.+8      	; 0x9e3e <__addsf3+0x18>
    9e36:	31 f4       	brne	.+12     	; 0x9e44 <__addsf3+0x1e>
    9e38:	9f 3f       	cpi	r25, 0xFF	; 255
    9e3a:	11 f4       	brne	.+4      	; 0x9e40 <__addsf3+0x1a>
    9e3c:	1e f4       	brtc	.+6      	; 0x9e44 <__addsf3+0x1e>
    9e3e:	c0 c1       	rjmp	.+896    	; 0xa1c0 <__fp_nan>
    9e40:	0e f4       	brtc	.+2      	; 0x9e44 <__addsf3+0x1e>
    9e42:	e0 95       	com	r30
    9e44:	e7 fb       	bst	r30, 7
    9e46:	b6 c1       	rjmp	.+876    	; 0xa1b4 <__fp_inf>

00009e48 <__addsf3x>:
    9e48:	e9 2f       	mov	r30, r25
    9e4a:	3a d2       	rcall	.+1140   	; 0xa2c0 <__fp_split3>
    9e4c:	80 f3       	brcs	.-32     	; 0x9e2e <__addsf3+0x8>
    9e4e:	ba 17       	cp	r27, r26
    9e50:	62 07       	cpc	r22, r18
    9e52:	73 07       	cpc	r23, r19
    9e54:	84 07       	cpc	r24, r20
    9e56:	95 07       	cpc	r25, r21
    9e58:	18 f0       	brcs	.+6      	; 0x9e60 <__addsf3x+0x18>
    9e5a:	71 f4       	brne	.+28     	; 0x9e78 <__addsf3x+0x30>
    9e5c:	9e f5       	brtc	.+102    	; 0x9ec4 <__addsf3x+0x7c>
    9e5e:	52 c2       	rjmp	.+1188   	; 0xa304 <__fp_zero>
    9e60:	0e f4       	brtc	.+2      	; 0x9e64 <__addsf3x+0x1c>
    9e62:	e0 95       	com	r30
    9e64:	0b 2e       	mov	r0, r27
    9e66:	ba 2f       	mov	r27, r26
    9e68:	a0 2d       	mov	r26, r0
    9e6a:	0b 01       	movw	r0, r22
    9e6c:	b9 01       	movw	r22, r18
    9e6e:	90 01       	movw	r18, r0
    9e70:	0c 01       	movw	r0, r24
    9e72:	ca 01       	movw	r24, r20
    9e74:	a0 01       	movw	r20, r0
    9e76:	11 24       	eor	r1, r1
    9e78:	ff 27       	eor	r31, r31
    9e7a:	59 1b       	sub	r21, r25
    9e7c:	99 f0       	breq	.+38     	; 0x9ea4 <__addsf3x+0x5c>
    9e7e:	59 3f       	cpi	r21, 0xF9	; 249
    9e80:	50 f4       	brcc	.+20     	; 0x9e96 <__addsf3x+0x4e>
    9e82:	50 3e       	cpi	r21, 0xE0	; 224
    9e84:	68 f1       	brcs	.+90     	; 0x9ee0 <__addsf3x+0x98>
    9e86:	1a 16       	cp	r1, r26
    9e88:	f0 40       	sbci	r31, 0x00	; 0
    9e8a:	a2 2f       	mov	r26, r18
    9e8c:	23 2f       	mov	r18, r19
    9e8e:	34 2f       	mov	r19, r20
    9e90:	44 27       	eor	r20, r20
    9e92:	58 5f       	subi	r21, 0xF8	; 248
    9e94:	f3 cf       	rjmp	.-26     	; 0x9e7c <__addsf3x+0x34>
    9e96:	46 95       	lsr	r20
    9e98:	37 95       	ror	r19
    9e9a:	27 95       	ror	r18
    9e9c:	a7 95       	ror	r26
    9e9e:	f0 40       	sbci	r31, 0x00	; 0
    9ea0:	53 95       	inc	r21
    9ea2:	c9 f7       	brne	.-14     	; 0x9e96 <__addsf3x+0x4e>
    9ea4:	7e f4       	brtc	.+30     	; 0x9ec4 <__addsf3x+0x7c>
    9ea6:	1f 16       	cp	r1, r31
    9ea8:	ba 0b       	sbc	r27, r26
    9eaa:	62 0b       	sbc	r22, r18
    9eac:	73 0b       	sbc	r23, r19
    9eae:	84 0b       	sbc	r24, r20
    9eb0:	ba f0       	brmi	.+46     	; 0x9ee0 <__addsf3x+0x98>
    9eb2:	91 50       	subi	r25, 0x01	; 1
    9eb4:	a1 f0       	breq	.+40     	; 0x9ede <__addsf3x+0x96>
    9eb6:	ff 0f       	add	r31, r31
    9eb8:	bb 1f       	adc	r27, r27
    9eba:	66 1f       	adc	r22, r22
    9ebc:	77 1f       	adc	r23, r23
    9ebe:	88 1f       	adc	r24, r24
    9ec0:	c2 f7       	brpl	.-16     	; 0x9eb2 <__addsf3x+0x6a>
    9ec2:	0e c0       	rjmp	.+28     	; 0x9ee0 <__addsf3x+0x98>
    9ec4:	ba 0f       	add	r27, r26
    9ec6:	62 1f       	adc	r22, r18
    9ec8:	73 1f       	adc	r23, r19
    9eca:	84 1f       	adc	r24, r20
    9ecc:	48 f4       	brcc	.+18     	; 0x9ee0 <__addsf3x+0x98>
    9ece:	87 95       	ror	r24
    9ed0:	77 95       	ror	r23
    9ed2:	67 95       	ror	r22
    9ed4:	b7 95       	ror	r27
    9ed6:	f7 95       	ror	r31
    9ed8:	9e 3f       	cpi	r25, 0xFE	; 254
    9eda:	08 f0       	brcs	.+2      	; 0x9ede <__addsf3x+0x96>
    9edc:	b3 cf       	rjmp	.-154    	; 0x9e44 <__addsf3+0x1e>
    9ede:	93 95       	inc	r25
    9ee0:	88 0f       	add	r24, r24
    9ee2:	08 f0       	brcs	.+2      	; 0x9ee6 <__addsf3x+0x9e>
    9ee4:	99 27       	eor	r25, r25
    9ee6:	ee 0f       	add	r30, r30
    9ee8:	97 95       	ror	r25
    9eea:	87 95       	ror	r24
    9eec:	08 95       	ret
    9eee:	90 d1       	rcall	.+800    	; 0xa210 <__fp_pscA>
    9ef0:	58 f0       	brcs	.+22     	; 0x9f08 <__addsf3x+0xc0>
    9ef2:	80 e8       	ldi	r24, 0x80	; 128
    9ef4:	91 e0       	ldi	r25, 0x01	; 1
    9ef6:	09 f4       	brne	.+2      	; 0x9efa <__addsf3x+0xb2>
    9ef8:	9e ef       	ldi	r25, 0xFE	; 254
    9efa:	91 d1       	rcall	.+802    	; 0xa21e <__fp_pscB>
    9efc:	28 f0       	brcs	.+10     	; 0x9f08 <__addsf3x+0xc0>
    9efe:	40 e8       	ldi	r20, 0x80	; 128
    9f00:	51 e0       	ldi	r21, 0x01	; 1
    9f02:	59 f4       	brne	.+22     	; 0x9f1a <atan2+0xe>
    9f04:	5e ef       	ldi	r21, 0xFE	; 254
    9f06:	09 c0       	rjmp	.+18     	; 0x9f1a <atan2+0xe>
    9f08:	5b c1       	rjmp	.+694    	; 0xa1c0 <__fp_nan>
    9f0a:	fc c1       	rjmp	.+1016   	; 0xa304 <__fp_zero>

00009f0c <atan2>:
    9f0c:	e9 2f       	mov	r30, r25
    9f0e:	e0 78       	andi	r30, 0x80	; 128
    9f10:	d7 d1       	rcall	.+942    	; 0xa2c0 <__fp_split3>
    9f12:	68 f3       	brcs	.-38     	; 0x9eee <__addsf3x+0xa6>
    9f14:	09 2e       	mov	r0, r25
    9f16:	05 2a       	or	r0, r21
    9f18:	c1 f3       	breq	.-16     	; 0x9f0a <__addsf3x+0xc2>
    9f1a:	26 17       	cp	r18, r22
    9f1c:	37 07       	cpc	r19, r23
    9f1e:	48 07       	cpc	r20, r24
    9f20:	59 07       	cpc	r21, r25
    9f22:	38 f0       	brcs	.+14     	; 0x9f32 <atan2+0x26>
    9f24:	0e 2e       	mov	r0, r30
    9f26:	07 f8       	bld	r0, 7
    9f28:	e0 25       	eor	r30, r0
    9f2a:	69 f0       	breq	.+26     	; 0x9f46 <atan2+0x3a>
    9f2c:	e0 25       	eor	r30, r0
    9f2e:	e0 64       	ori	r30, 0x40	; 64
    9f30:	0a c0       	rjmp	.+20     	; 0x9f46 <atan2+0x3a>
    9f32:	ef 63       	ori	r30, 0x3F	; 63
    9f34:	07 f8       	bld	r0, 7
    9f36:	00 94       	com	r0
    9f38:	07 fa       	bst	r0, 7
    9f3a:	db 01       	movw	r26, r22
    9f3c:	b9 01       	movw	r22, r18
    9f3e:	9d 01       	movw	r18, r26
    9f40:	dc 01       	movw	r26, r24
    9f42:	ca 01       	movw	r24, r20
    9f44:	ad 01       	movw	r20, r26
    9f46:	ef 93       	push	r30
    9f48:	4a d0       	rcall	.+148    	; 0x9fde <__divsf3_pse>
    9f4a:	98 d1       	rcall	.+816    	; 0xa27c <__fp_round>
    9f4c:	0a d0       	rcall	.+20     	; 0x9f62 <atan>
    9f4e:	5f 91       	pop	r21
    9f50:	55 23       	and	r21, r21
    9f52:	31 f0       	breq	.+12     	; 0x9f60 <atan2+0x54>
    9f54:	2b ed       	ldi	r18, 0xDB	; 219
    9f56:	3f e0       	ldi	r19, 0x0F	; 15
    9f58:	49 e4       	ldi	r20, 0x49	; 73
    9f5a:	50 fd       	sbrc	r21, 0
    9f5c:	49 ec       	ldi	r20, 0xC9	; 201
    9f5e:	63 cf       	rjmp	.-314    	; 0x9e26 <__addsf3>
    9f60:	08 95       	ret

00009f62 <atan>:
    9f62:	df 93       	push	r29
    9f64:	dd 27       	eor	r29, r29
    9f66:	b9 2f       	mov	r27, r25
    9f68:	bf 77       	andi	r27, 0x7F	; 127
    9f6a:	40 e8       	ldi	r20, 0x80	; 128
    9f6c:	5f e3       	ldi	r21, 0x3F	; 63
    9f6e:	16 16       	cp	r1, r22
    9f70:	17 06       	cpc	r1, r23
    9f72:	48 07       	cpc	r20, r24
    9f74:	5b 07       	cpc	r21, r27
    9f76:	10 f4       	brcc	.+4      	; 0x9f7c <atan+0x1a>
    9f78:	d9 2f       	mov	r29, r25
    9f7a:	cb d1       	rcall	.+918    	; 0xa312 <inverse>
    9f7c:	9f 93       	push	r25
    9f7e:	8f 93       	push	r24
    9f80:	7f 93       	push	r23
    9f82:	6f 93       	push	r22
    9f84:	36 d2       	rcall	.+1132   	; 0xa3f2 <square>
    9f86:	ee e4       	ldi	r30, 0x4E	; 78
    9f88:	f1 e0       	ldi	r31, 0x01	; 1
    9f8a:	1d d1       	rcall	.+570    	; 0xa1c6 <__fp_powser>
    9f8c:	77 d1       	rcall	.+750    	; 0xa27c <__fp_round>
    9f8e:	2f 91       	pop	r18
    9f90:	3f 91       	pop	r19
    9f92:	4f 91       	pop	r20
    9f94:	5f 91       	pop	r21
    9f96:	d0 d1       	rcall	.+928    	; 0xa338 <__mulsf3x>
    9f98:	dd 23       	and	r29, r29
    9f9a:	49 f0       	breq	.+18     	; 0x9fae <atan+0x4c>
    9f9c:	90 58       	subi	r25, 0x80	; 128
    9f9e:	a2 ea       	ldi	r26, 0xA2	; 162
    9fa0:	2a ed       	ldi	r18, 0xDA	; 218
    9fa2:	3f e0       	ldi	r19, 0x0F	; 15
    9fa4:	49 ec       	ldi	r20, 0xC9	; 201
    9fa6:	5f e3       	ldi	r21, 0x3F	; 63
    9fa8:	d0 78       	andi	r29, 0x80	; 128
    9faa:	5d 27       	eor	r21, r29
    9fac:	4d df       	rcall	.-358    	; 0x9e48 <__addsf3x>
    9fae:	df 91       	pop	r29
    9fb0:	65 c1       	rjmp	.+714    	; 0xa27c <__fp_round>

00009fb2 <__cmpsf2>:
    9fb2:	dc d0       	rcall	.+440    	; 0xa16c <__fp_cmp>
    9fb4:	08 f4       	brcc	.+2      	; 0x9fb8 <__cmpsf2+0x6>
    9fb6:	81 e0       	ldi	r24, 0x01	; 1
    9fb8:	08 95       	ret

00009fba <cos>:
    9fba:	39 d1       	rcall	.+626    	; 0xa22e <__fp_rempio2>
    9fbc:	e3 95       	inc	r30
    9fbe:	6f c1       	rjmp	.+734    	; 0xa29e <__fp_sinus>

00009fc0 <__divsf3>:
    9fc0:	0c d0       	rcall	.+24     	; 0x9fda <__divsf3x>
    9fc2:	5c c1       	rjmp	.+696    	; 0xa27c <__fp_round>
    9fc4:	2c d1       	rcall	.+600    	; 0xa21e <__fp_pscB>
    9fc6:	40 f0       	brcs	.+16     	; 0x9fd8 <__divsf3+0x18>
    9fc8:	23 d1       	rcall	.+582    	; 0xa210 <__fp_pscA>
    9fca:	30 f0       	brcs	.+12     	; 0x9fd8 <__divsf3+0x18>
    9fcc:	21 f4       	brne	.+8      	; 0x9fd6 <__divsf3+0x16>
    9fce:	5f 3f       	cpi	r21, 0xFF	; 255
    9fd0:	19 f0       	breq	.+6      	; 0x9fd8 <__divsf3+0x18>
    9fd2:	f0 c0       	rjmp	.+480    	; 0xa1b4 <__fp_inf>
    9fd4:	51 11       	cpse	r21, r1
    9fd6:	97 c1       	rjmp	.+814    	; 0xa306 <__fp_szero>
    9fd8:	f3 c0       	rjmp	.+486    	; 0xa1c0 <__fp_nan>

00009fda <__divsf3x>:
    9fda:	72 d1       	rcall	.+740    	; 0xa2c0 <__fp_split3>
    9fdc:	98 f3       	brcs	.-26     	; 0x9fc4 <__divsf3+0x4>

00009fde <__divsf3_pse>:
    9fde:	99 23       	and	r25, r25
    9fe0:	c9 f3       	breq	.-14     	; 0x9fd4 <__divsf3+0x14>
    9fe2:	55 23       	and	r21, r21
    9fe4:	b1 f3       	breq	.-20     	; 0x9fd2 <__divsf3+0x12>
    9fe6:	95 1b       	sub	r25, r21
    9fe8:	55 0b       	sbc	r21, r21
    9fea:	bb 27       	eor	r27, r27
    9fec:	aa 27       	eor	r26, r26
    9fee:	62 17       	cp	r22, r18
    9ff0:	73 07       	cpc	r23, r19
    9ff2:	84 07       	cpc	r24, r20
    9ff4:	38 f0       	brcs	.+14     	; 0xa004 <__divsf3_pse+0x26>
    9ff6:	9f 5f       	subi	r25, 0xFF	; 255
    9ff8:	5f 4f       	sbci	r21, 0xFF	; 255
    9ffa:	22 0f       	add	r18, r18
    9ffc:	33 1f       	adc	r19, r19
    9ffe:	44 1f       	adc	r20, r20
    a000:	aa 1f       	adc	r26, r26
    a002:	a9 f3       	breq	.-22     	; 0x9fee <__divsf3_pse+0x10>
    a004:	33 d0       	rcall	.+102    	; 0xa06c <__divsf3_pse+0x8e>
    a006:	0e 2e       	mov	r0, r30
    a008:	3a f0       	brmi	.+14     	; 0xa018 <__divsf3_pse+0x3a>
    a00a:	e0 e8       	ldi	r30, 0x80	; 128
    a00c:	30 d0       	rcall	.+96     	; 0xa06e <__divsf3_pse+0x90>
    a00e:	91 50       	subi	r25, 0x01	; 1
    a010:	50 40       	sbci	r21, 0x00	; 0
    a012:	e6 95       	lsr	r30
    a014:	00 1c       	adc	r0, r0
    a016:	ca f7       	brpl	.-14     	; 0xa00a <__divsf3_pse+0x2c>
    a018:	29 d0       	rcall	.+82     	; 0xa06c <__divsf3_pse+0x8e>
    a01a:	fe 2f       	mov	r31, r30
    a01c:	27 d0       	rcall	.+78     	; 0xa06c <__divsf3_pse+0x8e>
    a01e:	66 0f       	add	r22, r22
    a020:	77 1f       	adc	r23, r23
    a022:	88 1f       	adc	r24, r24
    a024:	bb 1f       	adc	r27, r27
    a026:	26 17       	cp	r18, r22
    a028:	37 07       	cpc	r19, r23
    a02a:	48 07       	cpc	r20, r24
    a02c:	ab 07       	cpc	r26, r27
    a02e:	b0 e8       	ldi	r27, 0x80	; 128
    a030:	09 f0       	breq	.+2      	; 0xa034 <__divsf3_pse+0x56>
    a032:	bb 0b       	sbc	r27, r27
    a034:	80 2d       	mov	r24, r0
    a036:	bf 01       	movw	r22, r30
    a038:	ff 27       	eor	r31, r31
    a03a:	93 58       	subi	r25, 0x83	; 131
    a03c:	5f 4f       	sbci	r21, 0xFF	; 255
    a03e:	2a f0       	brmi	.+10     	; 0xa04a <__divsf3_pse+0x6c>
    a040:	9e 3f       	cpi	r25, 0xFE	; 254
    a042:	51 05       	cpc	r21, r1
    a044:	68 f0       	brcs	.+26     	; 0xa060 <__divsf3_pse+0x82>
    a046:	b6 c0       	rjmp	.+364    	; 0xa1b4 <__fp_inf>
    a048:	5e c1       	rjmp	.+700    	; 0xa306 <__fp_szero>
    a04a:	5f 3f       	cpi	r21, 0xFF	; 255
    a04c:	ec f3       	brlt	.-6      	; 0xa048 <__divsf3_pse+0x6a>
    a04e:	98 3e       	cpi	r25, 0xE8	; 232
    a050:	dc f3       	brlt	.-10     	; 0xa048 <__divsf3_pse+0x6a>
    a052:	86 95       	lsr	r24
    a054:	77 95       	ror	r23
    a056:	67 95       	ror	r22
    a058:	b7 95       	ror	r27
    a05a:	f7 95       	ror	r31
    a05c:	9f 5f       	subi	r25, 0xFF	; 255
    a05e:	c9 f7       	brne	.-14     	; 0xa052 <__divsf3_pse+0x74>
    a060:	88 0f       	add	r24, r24
    a062:	91 1d       	adc	r25, r1
    a064:	96 95       	lsr	r25
    a066:	87 95       	ror	r24
    a068:	97 f9       	bld	r25, 7
    a06a:	08 95       	ret
    a06c:	e1 e0       	ldi	r30, 0x01	; 1
    a06e:	66 0f       	add	r22, r22
    a070:	77 1f       	adc	r23, r23
    a072:	88 1f       	adc	r24, r24
    a074:	bb 1f       	adc	r27, r27
    a076:	62 17       	cp	r22, r18
    a078:	73 07       	cpc	r23, r19
    a07a:	84 07       	cpc	r24, r20
    a07c:	ba 07       	cpc	r27, r26
    a07e:	20 f0       	brcs	.+8      	; 0xa088 <__divsf3_pse+0xaa>
    a080:	62 1b       	sub	r22, r18
    a082:	73 0b       	sbc	r23, r19
    a084:	84 0b       	sbc	r24, r20
    a086:	ba 0b       	sbc	r27, r26
    a088:	ee 1f       	adc	r30, r30
    a08a:	88 f7       	brcc	.-30     	; 0xa06e <__divsf3_pse+0x90>
    a08c:	e0 95       	com	r30
    a08e:	08 95       	ret

0000a090 <__fixsfsi>:
    a090:	04 d0       	rcall	.+8      	; 0xa09a <__fixunssfsi>
    a092:	68 94       	set
    a094:	b1 11       	cpse	r27, r1
    a096:	37 c1       	rjmp	.+622    	; 0xa306 <__fp_szero>
    a098:	08 95       	ret

0000a09a <__fixunssfsi>:
    a09a:	1a d1       	rcall	.+564    	; 0xa2d0 <__fp_splitA>
    a09c:	88 f0       	brcs	.+34     	; 0xa0c0 <__fixunssfsi+0x26>
    a09e:	9f 57       	subi	r25, 0x7F	; 127
    a0a0:	90 f0       	brcs	.+36     	; 0xa0c6 <__fixunssfsi+0x2c>
    a0a2:	b9 2f       	mov	r27, r25
    a0a4:	99 27       	eor	r25, r25
    a0a6:	b7 51       	subi	r27, 0x17	; 23
    a0a8:	a0 f0       	brcs	.+40     	; 0xa0d2 <__fixunssfsi+0x38>
    a0aa:	d1 f0       	breq	.+52     	; 0xa0e0 <__fixunssfsi+0x46>
    a0ac:	66 0f       	add	r22, r22
    a0ae:	77 1f       	adc	r23, r23
    a0b0:	88 1f       	adc	r24, r24
    a0b2:	99 1f       	adc	r25, r25
    a0b4:	1a f0       	brmi	.+6      	; 0xa0bc <__fixunssfsi+0x22>
    a0b6:	ba 95       	dec	r27
    a0b8:	c9 f7       	brne	.-14     	; 0xa0ac <__fixunssfsi+0x12>
    a0ba:	12 c0       	rjmp	.+36     	; 0xa0e0 <__fixunssfsi+0x46>
    a0bc:	b1 30       	cpi	r27, 0x01	; 1
    a0be:	81 f0       	breq	.+32     	; 0xa0e0 <__fixunssfsi+0x46>
    a0c0:	21 d1       	rcall	.+578    	; 0xa304 <__fp_zero>
    a0c2:	b1 e0       	ldi	r27, 0x01	; 1
    a0c4:	08 95       	ret
    a0c6:	1e c1       	rjmp	.+572    	; 0xa304 <__fp_zero>
    a0c8:	67 2f       	mov	r22, r23
    a0ca:	78 2f       	mov	r23, r24
    a0cc:	88 27       	eor	r24, r24
    a0ce:	b8 5f       	subi	r27, 0xF8	; 248
    a0d0:	39 f0       	breq	.+14     	; 0xa0e0 <__fixunssfsi+0x46>
    a0d2:	b9 3f       	cpi	r27, 0xF9	; 249
    a0d4:	cc f3       	brlt	.-14     	; 0xa0c8 <__fixunssfsi+0x2e>
    a0d6:	86 95       	lsr	r24
    a0d8:	77 95       	ror	r23
    a0da:	67 95       	ror	r22
    a0dc:	b3 95       	inc	r27
    a0de:	d9 f7       	brne	.-10     	; 0xa0d6 <__fixunssfsi+0x3c>
    a0e0:	3e f4       	brtc	.+14     	; 0xa0f0 <__fixunssfsi+0x56>
    a0e2:	90 95       	com	r25
    a0e4:	80 95       	com	r24
    a0e6:	70 95       	com	r23
    a0e8:	61 95       	neg	r22
    a0ea:	7f 4f       	sbci	r23, 0xFF	; 255
    a0ec:	8f 4f       	sbci	r24, 0xFF	; 255
    a0ee:	9f 4f       	sbci	r25, 0xFF	; 255
    a0f0:	08 95       	ret

0000a0f2 <__floatunsisf>:
    a0f2:	e8 94       	clt
    a0f4:	09 c0       	rjmp	.+18     	; 0xa108 <__floatsisf+0x12>

0000a0f6 <__floatsisf>:
    a0f6:	97 fb       	bst	r25, 7
    a0f8:	3e f4       	brtc	.+14     	; 0xa108 <__floatsisf+0x12>
    a0fa:	90 95       	com	r25
    a0fc:	80 95       	com	r24
    a0fe:	70 95       	com	r23
    a100:	61 95       	neg	r22
    a102:	7f 4f       	sbci	r23, 0xFF	; 255
    a104:	8f 4f       	sbci	r24, 0xFF	; 255
    a106:	9f 4f       	sbci	r25, 0xFF	; 255
    a108:	99 23       	and	r25, r25
    a10a:	a9 f0       	breq	.+42     	; 0xa136 <__floatsisf+0x40>
    a10c:	f9 2f       	mov	r31, r25
    a10e:	96 e9       	ldi	r25, 0x96	; 150
    a110:	bb 27       	eor	r27, r27
    a112:	93 95       	inc	r25
    a114:	f6 95       	lsr	r31
    a116:	87 95       	ror	r24
    a118:	77 95       	ror	r23
    a11a:	67 95       	ror	r22
    a11c:	b7 95       	ror	r27
    a11e:	f1 11       	cpse	r31, r1
    a120:	f8 cf       	rjmp	.-16     	; 0xa112 <__floatsisf+0x1c>
    a122:	fa f4       	brpl	.+62     	; 0xa162 <__floatsisf+0x6c>
    a124:	bb 0f       	add	r27, r27
    a126:	11 f4       	brne	.+4      	; 0xa12c <__floatsisf+0x36>
    a128:	60 ff       	sbrs	r22, 0
    a12a:	1b c0       	rjmp	.+54     	; 0xa162 <__floatsisf+0x6c>
    a12c:	6f 5f       	subi	r22, 0xFF	; 255
    a12e:	7f 4f       	sbci	r23, 0xFF	; 255
    a130:	8f 4f       	sbci	r24, 0xFF	; 255
    a132:	9f 4f       	sbci	r25, 0xFF	; 255
    a134:	16 c0       	rjmp	.+44     	; 0xa162 <__floatsisf+0x6c>
    a136:	88 23       	and	r24, r24
    a138:	11 f0       	breq	.+4      	; 0xa13e <__floatsisf+0x48>
    a13a:	96 e9       	ldi	r25, 0x96	; 150
    a13c:	11 c0       	rjmp	.+34     	; 0xa160 <__floatsisf+0x6a>
    a13e:	77 23       	and	r23, r23
    a140:	21 f0       	breq	.+8      	; 0xa14a <__floatsisf+0x54>
    a142:	9e e8       	ldi	r25, 0x8E	; 142
    a144:	87 2f       	mov	r24, r23
    a146:	76 2f       	mov	r23, r22
    a148:	05 c0       	rjmp	.+10     	; 0xa154 <__floatsisf+0x5e>
    a14a:	66 23       	and	r22, r22
    a14c:	71 f0       	breq	.+28     	; 0xa16a <__floatsisf+0x74>
    a14e:	96 e8       	ldi	r25, 0x86	; 134
    a150:	86 2f       	mov	r24, r22
    a152:	70 e0       	ldi	r23, 0x00	; 0
    a154:	60 e0       	ldi	r22, 0x00	; 0
    a156:	2a f0       	brmi	.+10     	; 0xa162 <__floatsisf+0x6c>
    a158:	9a 95       	dec	r25
    a15a:	66 0f       	add	r22, r22
    a15c:	77 1f       	adc	r23, r23
    a15e:	88 1f       	adc	r24, r24
    a160:	da f7       	brpl	.-10     	; 0xa158 <__floatsisf+0x62>
    a162:	88 0f       	add	r24, r24
    a164:	96 95       	lsr	r25
    a166:	87 95       	ror	r24
    a168:	97 f9       	bld	r25, 7
    a16a:	08 95       	ret

0000a16c <__fp_cmp>:
    a16c:	99 0f       	add	r25, r25
    a16e:	00 08       	sbc	r0, r0
    a170:	55 0f       	add	r21, r21
    a172:	aa 0b       	sbc	r26, r26
    a174:	e0 e8       	ldi	r30, 0x80	; 128
    a176:	fe ef       	ldi	r31, 0xFE	; 254
    a178:	16 16       	cp	r1, r22
    a17a:	17 06       	cpc	r1, r23
    a17c:	e8 07       	cpc	r30, r24
    a17e:	f9 07       	cpc	r31, r25
    a180:	c0 f0       	brcs	.+48     	; 0xa1b2 <__fp_cmp+0x46>
    a182:	12 16       	cp	r1, r18
    a184:	13 06       	cpc	r1, r19
    a186:	e4 07       	cpc	r30, r20
    a188:	f5 07       	cpc	r31, r21
    a18a:	98 f0       	brcs	.+38     	; 0xa1b2 <__fp_cmp+0x46>
    a18c:	62 1b       	sub	r22, r18
    a18e:	73 0b       	sbc	r23, r19
    a190:	84 0b       	sbc	r24, r20
    a192:	95 0b       	sbc	r25, r21
    a194:	39 f4       	brne	.+14     	; 0xa1a4 <__fp_cmp+0x38>
    a196:	0a 26       	eor	r0, r26
    a198:	61 f0       	breq	.+24     	; 0xa1b2 <__fp_cmp+0x46>
    a19a:	23 2b       	or	r18, r19
    a19c:	24 2b       	or	r18, r20
    a19e:	25 2b       	or	r18, r21
    a1a0:	21 f4       	brne	.+8      	; 0xa1aa <__fp_cmp+0x3e>
    a1a2:	08 95       	ret
    a1a4:	0a 26       	eor	r0, r26
    a1a6:	09 f4       	brne	.+2      	; 0xa1aa <__fp_cmp+0x3e>
    a1a8:	a1 40       	sbci	r26, 0x01	; 1
    a1aa:	a6 95       	lsr	r26
    a1ac:	8f ef       	ldi	r24, 0xFF	; 255
    a1ae:	81 1d       	adc	r24, r1
    a1b0:	81 1d       	adc	r24, r1
    a1b2:	08 95       	ret

0000a1b4 <__fp_inf>:
    a1b4:	97 f9       	bld	r25, 7
    a1b6:	9f 67       	ori	r25, 0x7F	; 127
    a1b8:	80 e8       	ldi	r24, 0x80	; 128
    a1ba:	70 e0       	ldi	r23, 0x00	; 0
    a1bc:	60 e0       	ldi	r22, 0x00	; 0
    a1be:	08 95       	ret

0000a1c0 <__fp_nan>:
    a1c0:	9f ef       	ldi	r25, 0xFF	; 255
    a1c2:	80 ec       	ldi	r24, 0xC0	; 192
    a1c4:	08 95       	ret

0000a1c6 <__fp_powser>:
    a1c6:	df 93       	push	r29
    a1c8:	cf 93       	push	r28
    a1ca:	1f 93       	push	r17
    a1cc:	0f 93       	push	r16
    a1ce:	ff 92       	push	r15
    a1d0:	ef 92       	push	r14
    a1d2:	df 92       	push	r13
    a1d4:	7b 01       	movw	r14, r22
    a1d6:	8c 01       	movw	r16, r24
    a1d8:	68 94       	set
    a1da:	05 c0       	rjmp	.+10     	; 0xa1e6 <__fp_powser+0x20>
    a1dc:	da 2e       	mov	r13, r26
    a1de:	ef 01       	movw	r28, r30
    a1e0:	ab d0       	rcall	.+342    	; 0xa338 <__mulsf3x>
    a1e2:	fe 01       	movw	r30, r28
    a1e4:	e8 94       	clt
    a1e6:	a5 91       	lpm	r26, Z+
    a1e8:	25 91       	lpm	r18, Z+
    a1ea:	35 91       	lpm	r19, Z+
    a1ec:	45 91       	lpm	r20, Z+
    a1ee:	55 91       	lpm	r21, Z+
    a1f0:	ae f3       	brts	.-22     	; 0xa1dc <__fp_powser+0x16>
    a1f2:	ef 01       	movw	r28, r30
    a1f4:	29 de       	rcall	.-942    	; 0x9e48 <__addsf3x>
    a1f6:	fe 01       	movw	r30, r28
    a1f8:	97 01       	movw	r18, r14
    a1fa:	a8 01       	movw	r20, r16
    a1fc:	da 94       	dec	r13
    a1fe:	79 f7       	brne	.-34     	; 0xa1de <__fp_powser+0x18>
    a200:	df 90       	pop	r13
    a202:	ef 90       	pop	r14
    a204:	ff 90       	pop	r15
    a206:	0f 91       	pop	r16
    a208:	1f 91       	pop	r17
    a20a:	cf 91       	pop	r28
    a20c:	df 91       	pop	r29
    a20e:	08 95       	ret

0000a210 <__fp_pscA>:
    a210:	00 24       	eor	r0, r0
    a212:	0a 94       	dec	r0
    a214:	16 16       	cp	r1, r22
    a216:	17 06       	cpc	r1, r23
    a218:	18 06       	cpc	r1, r24
    a21a:	09 06       	cpc	r0, r25
    a21c:	08 95       	ret

0000a21e <__fp_pscB>:
    a21e:	00 24       	eor	r0, r0
    a220:	0a 94       	dec	r0
    a222:	12 16       	cp	r1, r18
    a224:	13 06       	cpc	r1, r19
    a226:	14 06       	cpc	r1, r20
    a228:	05 06       	cpc	r0, r21
    a22a:	08 95       	ret
    a22c:	c9 cf       	rjmp	.-110    	; 0xa1c0 <__fp_nan>

0000a22e <__fp_rempio2>:
    a22e:	50 d0       	rcall	.+160    	; 0xa2d0 <__fp_splitA>
    a230:	e8 f3       	brcs	.-6      	; 0xa22c <__fp_pscB+0xe>
    a232:	e8 94       	clt
    a234:	e0 e0       	ldi	r30, 0x00	; 0
    a236:	bb 27       	eor	r27, r27
    a238:	9f 57       	subi	r25, 0x7F	; 127
    a23a:	f0 f0       	brcs	.+60     	; 0xa278 <__fp_rempio2+0x4a>
    a23c:	2a ed       	ldi	r18, 0xDA	; 218
    a23e:	3f e0       	ldi	r19, 0x0F	; 15
    a240:	49 ec       	ldi	r20, 0xC9	; 201
    a242:	06 c0       	rjmp	.+12     	; 0xa250 <__fp_rempio2+0x22>
    a244:	ee 0f       	add	r30, r30
    a246:	bb 0f       	add	r27, r27
    a248:	66 1f       	adc	r22, r22
    a24a:	77 1f       	adc	r23, r23
    a24c:	88 1f       	adc	r24, r24
    a24e:	28 f0       	brcs	.+10     	; 0xa25a <__fp_rempio2+0x2c>
    a250:	b2 3a       	cpi	r27, 0xA2	; 162
    a252:	62 07       	cpc	r22, r18
    a254:	73 07       	cpc	r23, r19
    a256:	84 07       	cpc	r24, r20
    a258:	28 f0       	brcs	.+10     	; 0xa264 <__fp_rempio2+0x36>
    a25a:	b2 5a       	subi	r27, 0xA2	; 162
    a25c:	62 0b       	sbc	r22, r18
    a25e:	73 0b       	sbc	r23, r19
    a260:	84 0b       	sbc	r24, r20
    a262:	e3 95       	inc	r30
    a264:	9a 95       	dec	r25
    a266:	72 f7       	brpl	.-36     	; 0xa244 <__fp_rempio2+0x16>
    a268:	80 38       	cpi	r24, 0x80	; 128
    a26a:	30 f4       	brcc	.+12     	; 0xa278 <__fp_rempio2+0x4a>
    a26c:	9a 95       	dec	r25
    a26e:	bb 0f       	add	r27, r27
    a270:	66 1f       	adc	r22, r22
    a272:	77 1f       	adc	r23, r23
    a274:	88 1f       	adc	r24, r24
    a276:	d2 f7       	brpl	.-12     	; 0xa26c <__fp_rempio2+0x3e>
    a278:	90 48       	sbci	r25, 0x80	; 128
    a27a:	c0 c0       	rjmp	.+384    	; 0xa3fc <__fp_mpack_finite>

0000a27c <__fp_round>:
    a27c:	09 2e       	mov	r0, r25
    a27e:	03 94       	inc	r0
    a280:	00 0c       	add	r0, r0
    a282:	11 f4       	brne	.+4      	; 0xa288 <__fp_round+0xc>
    a284:	88 23       	and	r24, r24
    a286:	52 f0       	brmi	.+20     	; 0xa29c <__fp_round+0x20>
    a288:	bb 0f       	add	r27, r27
    a28a:	40 f4       	brcc	.+16     	; 0xa29c <__fp_round+0x20>
    a28c:	bf 2b       	or	r27, r31
    a28e:	11 f4       	brne	.+4      	; 0xa294 <__fp_round+0x18>
    a290:	60 ff       	sbrs	r22, 0
    a292:	04 c0       	rjmp	.+8      	; 0xa29c <__fp_round+0x20>
    a294:	6f 5f       	subi	r22, 0xFF	; 255
    a296:	7f 4f       	sbci	r23, 0xFF	; 255
    a298:	8f 4f       	sbci	r24, 0xFF	; 255
    a29a:	9f 4f       	sbci	r25, 0xFF	; 255
    a29c:	08 95       	ret

0000a29e <__fp_sinus>:
    a29e:	ef 93       	push	r30
    a2a0:	e0 ff       	sbrs	r30, 0
    a2a2:	06 c0       	rjmp	.+12     	; 0xa2b0 <__fp_sinus+0x12>
    a2a4:	a2 ea       	ldi	r26, 0xA2	; 162
    a2a6:	2a ed       	ldi	r18, 0xDA	; 218
    a2a8:	3f e0       	ldi	r19, 0x0F	; 15
    a2aa:	49 ec       	ldi	r20, 0xC9	; 201
    a2ac:	5f eb       	ldi	r21, 0xBF	; 191
    a2ae:	cc dd       	rcall	.-1128   	; 0x9e48 <__addsf3x>
    a2b0:	e5 df       	rcall	.-54     	; 0xa27c <__fp_round>
    a2b2:	0f 90       	pop	r0
    a2b4:	03 94       	inc	r0
    a2b6:	01 fc       	sbrc	r0, 1
    a2b8:	90 58       	subi	r25, 0x80	; 128
    a2ba:	eb e7       	ldi	r30, 0x7B	; 123
    a2bc:	f1 e0       	ldi	r31, 0x01	; 1
    a2be:	aa c0       	rjmp	.+340    	; 0xa414 <__fp_powsodd>

0000a2c0 <__fp_split3>:
    a2c0:	57 fd       	sbrc	r21, 7
    a2c2:	90 58       	subi	r25, 0x80	; 128
    a2c4:	44 0f       	add	r20, r20
    a2c6:	55 1f       	adc	r21, r21
    a2c8:	59 f0       	breq	.+22     	; 0xa2e0 <__fp_splitA+0x10>
    a2ca:	5f 3f       	cpi	r21, 0xFF	; 255
    a2cc:	71 f0       	breq	.+28     	; 0xa2ea <__fp_splitA+0x1a>
    a2ce:	47 95       	ror	r20

0000a2d0 <__fp_splitA>:
    a2d0:	88 0f       	add	r24, r24
    a2d2:	97 fb       	bst	r25, 7
    a2d4:	99 1f       	adc	r25, r25
    a2d6:	61 f0       	breq	.+24     	; 0xa2f0 <__fp_splitA+0x20>
    a2d8:	9f 3f       	cpi	r25, 0xFF	; 255
    a2da:	79 f0       	breq	.+30     	; 0xa2fa <__fp_splitA+0x2a>
    a2dc:	87 95       	ror	r24
    a2de:	08 95       	ret
    a2e0:	12 16       	cp	r1, r18
    a2e2:	13 06       	cpc	r1, r19
    a2e4:	14 06       	cpc	r1, r20
    a2e6:	55 1f       	adc	r21, r21
    a2e8:	f2 cf       	rjmp	.-28     	; 0xa2ce <__fp_split3+0xe>
    a2ea:	46 95       	lsr	r20
    a2ec:	f1 df       	rcall	.-30     	; 0xa2d0 <__fp_splitA>
    a2ee:	08 c0       	rjmp	.+16     	; 0xa300 <__fp_splitA+0x30>
    a2f0:	16 16       	cp	r1, r22
    a2f2:	17 06       	cpc	r1, r23
    a2f4:	18 06       	cpc	r1, r24
    a2f6:	99 1f       	adc	r25, r25
    a2f8:	f1 cf       	rjmp	.-30     	; 0xa2dc <__fp_splitA+0xc>
    a2fa:	86 95       	lsr	r24
    a2fc:	71 05       	cpc	r23, r1
    a2fe:	61 05       	cpc	r22, r1
    a300:	08 94       	sec
    a302:	08 95       	ret

0000a304 <__fp_zero>:
    a304:	e8 94       	clt

0000a306 <__fp_szero>:
    a306:	bb 27       	eor	r27, r27
    a308:	66 27       	eor	r22, r22
    a30a:	77 27       	eor	r23, r23
    a30c:	cb 01       	movw	r24, r22
    a30e:	97 f9       	bld	r25, 7
    a310:	08 95       	ret

0000a312 <inverse>:
    a312:	9b 01       	movw	r18, r22
    a314:	ac 01       	movw	r20, r24
    a316:	60 e0       	ldi	r22, 0x00	; 0
    a318:	70 e0       	ldi	r23, 0x00	; 0
    a31a:	80 e8       	ldi	r24, 0x80	; 128
    a31c:	9f e3       	ldi	r25, 0x3F	; 63
    a31e:	50 ce       	rjmp	.-864    	; 0x9fc0 <__divsf3>

0000a320 <__mulsf3>:
    a320:	0b d0       	rcall	.+22     	; 0xa338 <__mulsf3x>
    a322:	ac cf       	rjmp	.-168    	; 0xa27c <__fp_round>
    a324:	75 df       	rcall	.-278    	; 0xa210 <__fp_pscA>
    a326:	28 f0       	brcs	.+10     	; 0xa332 <__mulsf3+0x12>
    a328:	7a df       	rcall	.-268    	; 0xa21e <__fp_pscB>
    a32a:	18 f0       	brcs	.+6      	; 0xa332 <__mulsf3+0x12>
    a32c:	95 23       	and	r25, r21
    a32e:	09 f0       	breq	.+2      	; 0xa332 <__mulsf3+0x12>
    a330:	41 cf       	rjmp	.-382    	; 0xa1b4 <__fp_inf>
    a332:	46 cf       	rjmp	.-372    	; 0xa1c0 <__fp_nan>
    a334:	11 24       	eor	r1, r1
    a336:	e7 cf       	rjmp	.-50     	; 0xa306 <__fp_szero>

0000a338 <__mulsf3x>:
    a338:	c3 df       	rcall	.-122    	; 0xa2c0 <__fp_split3>
    a33a:	a0 f3       	brcs	.-24     	; 0xa324 <__mulsf3+0x4>

0000a33c <__mulsf3_pse>:
    a33c:	95 9f       	mul	r25, r21
    a33e:	d1 f3       	breq	.-12     	; 0xa334 <__mulsf3+0x14>
    a340:	95 0f       	add	r25, r21
    a342:	50 e0       	ldi	r21, 0x00	; 0
    a344:	55 1f       	adc	r21, r21
    a346:	62 9f       	mul	r22, r18
    a348:	f0 01       	movw	r30, r0
    a34a:	72 9f       	mul	r23, r18
    a34c:	bb 27       	eor	r27, r27
    a34e:	f0 0d       	add	r31, r0
    a350:	b1 1d       	adc	r27, r1
    a352:	63 9f       	mul	r22, r19
    a354:	aa 27       	eor	r26, r26
    a356:	f0 0d       	add	r31, r0
    a358:	b1 1d       	adc	r27, r1
    a35a:	aa 1f       	adc	r26, r26
    a35c:	64 9f       	mul	r22, r20
    a35e:	66 27       	eor	r22, r22
    a360:	b0 0d       	add	r27, r0
    a362:	a1 1d       	adc	r26, r1
    a364:	66 1f       	adc	r22, r22
    a366:	82 9f       	mul	r24, r18
    a368:	22 27       	eor	r18, r18
    a36a:	b0 0d       	add	r27, r0
    a36c:	a1 1d       	adc	r26, r1
    a36e:	62 1f       	adc	r22, r18
    a370:	73 9f       	mul	r23, r19
    a372:	b0 0d       	add	r27, r0
    a374:	a1 1d       	adc	r26, r1
    a376:	62 1f       	adc	r22, r18
    a378:	83 9f       	mul	r24, r19
    a37a:	a0 0d       	add	r26, r0
    a37c:	61 1d       	adc	r22, r1
    a37e:	22 1f       	adc	r18, r18
    a380:	74 9f       	mul	r23, r20
    a382:	33 27       	eor	r19, r19
    a384:	a0 0d       	add	r26, r0
    a386:	61 1d       	adc	r22, r1
    a388:	23 1f       	adc	r18, r19
    a38a:	84 9f       	mul	r24, r20
    a38c:	60 0d       	add	r22, r0
    a38e:	21 1d       	adc	r18, r1
    a390:	82 2f       	mov	r24, r18
    a392:	76 2f       	mov	r23, r22
    a394:	6a 2f       	mov	r22, r26
    a396:	11 24       	eor	r1, r1
    a398:	9f 57       	subi	r25, 0x7F	; 127
    a39a:	50 40       	sbci	r21, 0x00	; 0
    a39c:	8a f0       	brmi	.+34     	; 0xa3c0 <__mulsf3_pse+0x84>
    a39e:	e1 f0       	breq	.+56     	; 0xa3d8 <__mulsf3_pse+0x9c>
    a3a0:	88 23       	and	r24, r24
    a3a2:	4a f0       	brmi	.+18     	; 0xa3b6 <__mulsf3_pse+0x7a>
    a3a4:	ee 0f       	add	r30, r30
    a3a6:	ff 1f       	adc	r31, r31
    a3a8:	bb 1f       	adc	r27, r27
    a3aa:	66 1f       	adc	r22, r22
    a3ac:	77 1f       	adc	r23, r23
    a3ae:	88 1f       	adc	r24, r24
    a3b0:	91 50       	subi	r25, 0x01	; 1
    a3b2:	50 40       	sbci	r21, 0x00	; 0
    a3b4:	a9 f7       	brne	.-22     	; 0xa3a0 <__mulsf3_pse+0x64>
    a3b6:	9e 3f       	cpi	r25, 0xFE	; 254
    a3b8:	51 05       	cpc	r21, r1
    a3ba:	70 f0       	brcs	.+28     	; 0xa3d8 <__mulsf3_pse+0x9c>
    a3bc:	fb ce       	rjmp	.-522    	; 0xa1b4 <__fp_inf>
    a3be:	a3 cf       	rjmp	.-186    	; 0xa306 <__fp_szero>
    a3c0:	5f 3f       	cpi	r21, 0xFF	; 255
    a3c2:	ec f3       	brlt	.-6      	; 0xa3be <__mulsf3_pse+0x82>
    a3c4:	98 3e       	cpi	r25, 0xE8	; 232
    a3c6:	dc f3       	brlt	.-10     	; 0xa3be <__mulsf3_pse+0x82>
    a3c8:	86 95       	lsr	r24
    a3ca:	77 95       	ror	r23
    a3cc:	67 95       	ror	r22
    a3ce:	b7 95       	ror	r27
    a3d0:	f7 95       	ror	r31
    a3d2:	e7 95       	ror	r30
    a3d4:	9f 5f       	subi	r25, 0xFF	; 255
    a3d6:	c1 f7       	brne	.-16     	; 0xa3c8 <__mulsf3_pse+0x8c>
    a3d8:	fe 2b       	or	r31, r30
    a3da:	88 0f       	add	r24, r24
    a3dc:	91 1d       	adc	r25, r1
    a3de:	96 95       	lsr	r25
    a3e0:	87 95       	ror	r24
    a3e2:	97 f9       	bld	r25, 7
    a3e4:	08 95       	ret

0000a3e6 <sin>:
    a3e6:	9f 93       	push	r25
    a3e8:	22 df       	rcall	.-444    	; 0xa22e <__fp_rempio2>
    a3ea:	0f 90       	pop	r0
    a3ec:	07 fc       	sbrc	r0, 7
    a3ee:	ee 5f       	subi	r30, 0xFE	; 254
    a3f0:	56 cf       	rjmp	.-340    	; 0xa29e <__fp_sinus>

0000a3f2 <square>:
    a3f2:	9b 01       	movw	r18, r22
    a3f4:	ac 01       	movw	r20, r24
    a3f6:	94 cf       	rjmp	.-216    	; 0xa320 <__mulsf3>

0000a3f8 <__fp_mpack>:
    a3f8:	9f 3f       	cpi	r25, 0xFF	; 255
    a3fa:	31 f0       	breq	.+12     	; 0xa408 <__fp_mpack_finite+0xc>

0000a3fc <__fp_mpack_finite>:
    a3fc:	91 50       	subi	r25, 0x01	; 1
    a3fe:	20 f4       	brcc	.+8      	; 0xa408 <__fp_mpack_finite+0xc>
    a400:	87 95       	ror	r24
    a402:	77 95       	ror	r23
    a404:	67 95       	ror	r22
    a406:	b7 95       	ror	r27
    a408:	88 0f       	add	r24, r24
    a40a:	91 1d       	adc	r25, r1
    a40c:	96 95       	lsr	r25
    a40e:	87 95       	ror	r24
    a410:	97 f9       	bld	r25, 7
    a412:	08 95       	ret

0000a414 <__fp_powsodd>:
    a414:	9f 93       	push	r25
    a416:	8f 93       	push	r24
    a418:	7f 93       	push	r23
    a41a:	6f 93       	push	r22
    a41c:	ff 93       	push	r31
    a41e:	ef 93       	push	r30
    a420:	9b 01       	movw	r18, r22
    a422:	ac 01       	movw	r20, r24
    a424:	7d df       	rcall	.-262    	; 0xa320 <__mulsf3>
    a426:	ef 91       	pop	r30
    a428:	ff 91       	pop	r31
    a42a:	cd de       	rcall	.-614    	; 0xa1c6 <__fp_powser>
    a42c:	2f 91       	pop	r18
    a42e:	3f 91       	pop	r19
    a430:	4f 91       	pop	r20
    a432:	5f 91       	pop	r21
    a434:	75 cf       	rjmp	.-278    	; 0xa320 <__mulsf3>

0000a436 <__mulsi3>:
    a436:	62 9f       	mul	r22, r18
    a438:	d0 01       	movw	r26, r0
    a43a:	73 9f       	mul	r23, r19
    a43c:	f0 01       	movw	r30, r0
    a43e:	82 9f       	mul	r24, r18
    a440:	e0 0d       	add	r30, r0
    a442:	f1 1d       	adc	r31, r1
    a444:	64 9f       	mul	r22, r20
    a446:	e0 0d       	add	r30, r0
    a448:	f1 1d       	adc	r31, r1
    a44a:	92 9f       	mul	r25, r18
    a44c:	f0 0d       	add	r31, r0
    a44e:	83 9f       	mul	r24, r19
    a450:	f0 0d       	add	r31, r0
    a452:	74 9f       	mul	r23, r20
    a454:	f0 0d       	add	r31, r0
    a456:	65 9f       	mul	r22, r21
    a458:	f0 0d       	add	r31, r0
    a45a:	99 27       	eor	r25, r25
    a45c:	72 9f       	mul	r23, r18
    a45e:	b0 0d       	add	r27, r0
    a460:	e1 1d       	adc	r30, r1
    a462:	f9 1f       	adc	r31, r25
    a464:	63 9f       	mul	r22, r19
    a466:	b0 0d       	add	r27, r0
    a468:	e1 1d       	adc	r30, r1
    a46a:	f9 1f       	adc	r31, r25
    a46c:	bd 01       	movw	r22, r26
    a46e:	cf 01       	movw	r24, r30
    a470:	11 24       	eor	r1, r1
    a472:	08 95       	ret

0000a474 <__udivmodhi4>:
    a474:	aa 1b       	sub	r26, r26
    a476:	bb 1b       	sub	r27, r27
    a478:	51 e1       	ldi	r21, 0x11	; 17
    a47a:	07 c0       	rjmp	.+14     	; 0xa48a <__udivmodhi4_ep>

0000a47c <__udivmodhi4_loop>:
    a47c:	aa 1f       	adc	r26, r26
    a47e:	bb 1f       	adc	r27, r27
    a480:	a6 17       	cp	r26, r22
    a482:	b7 07       	cpc	r27, r23
    a484:	10 f0       	brcs	.+4      	; 0xa48a <__udivmodhi4_ep>
    a486:	a6 1b       	sub	r26, r22
    a488:	b7 0b       	sbc	r27, r23

0000a48a <__udivmodhi4_ep>:
    a48a:	88 1f       	adc	r24, r24
    a48c:	99 1f       	adc	r25, r25
    a48e:	5a 95       	dec	r21
    a490:	a9 f7       	brne	.-22     	; 0xa47c <__udivmodhi4_loop>
    a492:	80 95       	com	r24
    a494:	90 95       	com	r25
    a496:	bc 01       	movw	r22, r24
    a498:	cd 01       	movw	r24, r26
    a49a:	08 95       	ret

0000a49c <__divmodhi4>:
    a49c:	97 fb       	bst	r25, 7
    a49e:	09 2e       	mov	r0, r25
    a4a0:	07 26       	eor	r0, r23
    a4a2:	0a d0       	rcall	.+20     	; 0xa4b8 <__divmodhi4_neg1>
    a4a4:	77 fd       	sbrc	r23, 7
    a4a6:	04 d0       	rcall	.+8      	; 0xa4b0 <__divmodhi4_neg2>
    a4a8:	e5 df       	rcall	.-54     	; 0xa474 <__udivmodhi4>
    a4aa:	06 d0       	rcall	.+12     	; 0xa4b8 <__divmodhi4_neg1>
    a4ac:	00 20       	and	r0, r0
    a4ae:	1a f4       	brpl	.+6      	; 0xa4b6 <__divmodhi4_exit>

0000a4b0 <__divmodhi4_neg2>:
    a4b0:	70 95       	com	r23
    a4b2:	61 95       	neg	r22
    a4b4:	7f 4f       	sbci	r23, 0xFF	; 255

0000a4b6 <__divmodhi4_exit>:
    a4b6:	08 95       	ret

0000a4b8 <__divmodhi4_neg1>:
    a4b8:	f6 f7       	brtc	.-4      	; 0xa4b6 <__divmodhi4_exit>
    a4ba:	90 95       	com	r25
    a4bc:	81 95       	neg	r24
    a4be:	9f 4f       	sbci	r25, 0xFF	; 255
    a4c0:	08 95       	ret

0000a4c2 <__divmodsi4>:
    a4c2:	97 fb       	bst	r25, 7
    a4c4:	09 2e       	mov	r0, r25
    a4c6:	05 26       	eor	r0, r21
    a4c8:	0e d0       	rcall	.+28     	; 0xa4e6 <__divmodsi4_neg1>
    a4ca:	57 fd       	sbrc	r21, 7
    a4cc:	04 d0       	rcall	.+8      	; 0xa4d6 <__divmodsi4_neg2>
    a4ce:	14 d0       	rcall	.+40     	; 0xa4f8 <__udivmodsi4>
    a4d0:	0a d0       	rcall	.+20     	; 0xa4e6 <__divmodsi4_neg1>
    a4d2:	00 1c       	adc	r0, r0
    a4d4:	38 f4       	brcc	.+14     	; 0xa4e4 <__divmodsi4_exit>

0000a4d6 <__divmodsi4_neg2>:
    a4d6:	50 95       	com	r21
    a4d8:	40 95       	com	r20
    a4da:	30 95       	com	r19
    a4dc:	21 95       	neg	r18
    a4de:	3f 4f       	sbci	r19, 0xFF	; 255
    a4e0:	4f 4f       	sbci	r20, 0xFF	; 255
    a4e2:	5f 4f       	sbci	r21, 0xFF	; 255

0000a4e4 <__divmodsi4_exit>:
    a4e4:	08 95       	ret

0000a4e6 <__divmodsi4_neg1>:
    a4e6:	f6 f7       	brtc	.-4      	; 0xa4e4 <__divmodsi4_exit>
    a4e8:	90 95       	com	r25
    a4ea:	80 95       	com	r24
    a4ec:	70 95       	com	r23
    a4ee:	61 95       	neg	r22
    a4f0:	7f 4f       	sbci	r23, 0xFF	; 255
    a4f2:	8f 4f       	sbci	r24, 0xFF	; 255
    a4f4:	9f 4f       	sbci	r25, 0xFF	; 255
    a4f6:	08 95       	ret

0000a4f8 <__udivmodsi4>:
    a4f8:	a1 e2       	ldi	r26, 0x21	; 33
    a4fa:	1a 2e       	mov	r1, r26
    a4fc:	aa 1b       	sub	r26, r26
    a4fe:	bb 1b       	sub	r27, r27
    a500:	fd 01       	movw	r30, r26
    a502:	0d c0       	rjmp	.+26     	; 0xa51e <__udivmodsi4_ep>

0000a504 <__udivmodsi4_loop>:
    a504:	aa 1f       	adc	r26, r26
    a506:	bb 1f       	adc	r27, r27
    a508:	ee 1f       	adc	r30, r30
    a50a:	ff 1f       	adc	r31, r31
    a50c:	a2 17       	cp	r26, r18
    a50e:	b3 07       	cpc	r27, r19
    a510:	e4 07       	cpc	r30, r20
    a512:	f5 07       	cpc	r31, r21
    a514:	20 f0       	brcs	.+8      	; 0xa51e <__udivmodsi4_ep>
    a516:	a2 1b       	sub	r26, r18
    a518:	b3 0b       	sbc	r27, r19
    a51a:	e4 0b       	sbc	r30, r20
    a51c:	f5 0b       	sbc	r31, r21

0000a51e <__udivmodsi4_ep>:
    a51e:	66 1f       	adc	r22, r22
    a520:	77 1f       	adc	r23, r23
    a522:	88 1f       	adc	r24, r24
    a524:	99 1f       	adc	r25, r25
    a526:	1a 94       	dec	r1
    a528:	69 f7       	brne	.-38     	; 0xa504 <__udivmodsi4_loop>
    a52a:	60 95       	com	r22
    a52c:	70 95       	com	r23
    a52e:	80 95       	com	r24
    a530:	90 95       	com	r25
    a532:	9b 01       	movw	r18, r22
    a534:	ac 01       	movw	r20, r24
    a536:	bd 01       	movw	r22, r26
    a538:	cf 01       	movw	r24, r30
    a53a:	08 95       	ret

0000a53c <do_rand>:
    a53c:	af 92       	push	r10
    a53e:	bf 92       	push	r11
    a540:	cf 92       	push	r12
    a542:	df 92       	push	r13
    a544:	ef 92       	push	r14
    a546:	ff 92       	push	r15
    a548:	0f 93       	push	r16
    a54a:	1f 93       	push	r17
    a54c:	cf 93       	push	r28
    a54e:	df 93       	push	r29
    a550:	ec 01       	movw	r28, r24
    a552:	68 81       	ld	r22, Y
    a554:	79 81       	ldd	r23, Y+1	; 0x01
    a556:	8a 81       	ldd	r24, Y+2	; 0x02
    a558:	9b 81       	ldd	r25, Y+3	; 0x03
    a55a:	61 15       	cp	r22, r1
    a55c:	71 05       	cpc	r23, r1
    a55e:	81 05       	cpc	r24, r1
    a560:	91 05       	cpc	r25, r1
    a562:	21 f4       	brne	.+8      	; 0xa56c <do_rand+0x30>
    a564:	64 e2       	ldi	r22, 0x24	; 36
    a566:	79 ed       	ldi	r23, 0xD9	; 217
    a568:	8b e5       	ldi	r24, 0x5B	; 91
    a56a:	97 e0       	ldi	r25, 0x07	; 7
    a56c:	2d e1       	ldi	r18, 0x1D	; 29
    a56e:	33 ef       	ldi	r19, 0xF3	; 243
    a570:	41 e0       	ldi	r20, 0x01	; 1
    a572:	50 e0       	ldi	r21, 0x00	; 0
    a574:	0e 94 61 52 	call	0xa4c2	; 0xa4c2 <__divmodsi4>
    a578:	79 01       	movw	r14, r18
    a57a:	8a 01       	movw	r16, r20
    a57c:	27 ea       	ldi	r18, 0xA7	; 167
    a57e:	31 e4       	ldi	r19, 0x41	; 65
    a580:	40 e0       	ldi	r20, 0x00	; 0
    a582:	50 e0       	ldi	r21, 0x00	; 0
    a584:	0e 94 1b 52 	call	0xa436	; 0xa436 <__mulsi3>
    a588:	5b 01       	movw	r10, r22
    a58a:	6c 01       	movw	r12, r24
    a58c:	c8 01       	movw	r24, r16
    a58e:	b7 01       	movw	r22, r14
    a590:	2c ee       	ldi	r18, 0xEC	; 236
    a592:	34 ef       	ldi	r19, 0xF4	; 244
    a594:	4f ef       	ldi	r20, 0xFF	; 255
    a596:	5f ef       	ldi	r21, 0xFF	; 255
    a598:	0e 94 1b 52 	call	0xa436	; 0xa436 <__mulsi3>
    a59c:	6a 0d       	add	r22, r10
    a59e:	7b 1d       	adc	r23, r11
    a5a0:	8c 1d       	adc	r24, r12
    a5a2:	9d 1d       	adc	r25, r13
    a5a4:	97 ff       	sbrs	r25, 7
    a5a6:	04 c0       	rjmp	.+8      	; 0xa5b0 <do_rand+0x74>
    a5a8:	61 50       	subi	r22, 0x01	; 1
    a5aa:	70 40       	sbci	r23, 0x00	; 0
    a5ac:	80 40       	sbci	r24, 0x00	; 0
    a5ae:	90 48       	sbci	r25, 0x80	; 128
    a5b0:	68 83       	st	Y, r22
    a5b2:	79 83       	std	Y+1, r23	; 0x01
    a5b4:	8a 83       	std	Y+2, r24	; 0x02
    a5b6:	9b 83       	std	Y+3, r25	; 0x03
    a5b8:	7f 77       	andi	r23, 0x7F	; 127
    a5ba:	cb 01       	movw	r24, r22
    a5bc:	df 91       	pop	r29
    a5be:	cf 91       	pop	r28
    a5c0:	1f 91       	pop	r17
    a5c2:	0f 91       	pop	r16
    a5c4:	ff 90       	pop	r15
    a5c6:	ef 90       	pop	r14
    a5c8:	df 90       	pop	r13
    a5ca:	cf 90       	pop	r12
    a5cc:	bf 90       	pop	r11
    a5ce:	af 90       	pop	r10
    a5d0:	08 95       	ret

0000a5d2 <rand_r>:
    a5d2:	0e 94 9e 52 	call	0xa53c	; 0xa53c <do_rand>
    a5d6:	08 95       	ret

0000a5d8 <rand>:
    a5d8:	89 e1       	ldi	r24, 0x19	; 25
    a5da:	92 e0       	ldi	r25, 0x02	; 2
    a5dc:	0e 94 9e 52 	call	0xa53c	; 0xa53c <do_rand>
    a5e0:	08 95       	ret

0000a5e2 <srand>:
    a5e2:	a0 e0       	ldi	r26, 0x00	; 0
    a5e4:	b0 e0       	ldi	r27, 0x00	; 0
    a5e6:	80 93 19 02 	sts	0x0219, r24
    a5ea:	90 93 1a 02 	sts	0x021A, r25
    a5ee:	a0 93 1b 02 	sts	0x021B, r26
    a5f2:	b0 93 1c 02 	sts	0x021C, r27
    a5f6:	08 95       	ret

0000a5f8 <memset>:
    a5f8:	dc 01       	movw	r26, r24
    a5fa:	01 c0       	rjmp	.+2      	; 0xa5fe <memset+0x6>
    a5fc:	6d 93       	st	X+, r22
    a5fe:	41 50       	subi	r20, 0x01	; 1
    a600:	50 40       	sbci	r21, 0x00	; 0
    a602:	e0 f7       	brcc	.-8      	; 0xa5fc <memset+0x4>
    a604:	08 95       	ret

0000a606 <__eerd_block_m2560>:
    a606:	dc 01       	movw	r26, r24
    a608:	cb 01       	movw	r24, r22

0000a60a <__eerd_blraw_m2560>:
    a60a:	fc 01       	movw	r30, r24
    a60c:	f9 99       	sbic	0x1f, 1	; 31
    a60e:	fe cf       	rjmp	.-4      	; 0xa60c <__eerd_blraw_m2560+0x2>
    a610:	06 c0       	rjmp	.+12     	; 0xa61e <__eerd_blraw_m2560+0x14>
    a612:	f2 bd       	out	0x22, r31	; 34
    a614:	e1 bd       	out	0x21, r30	; 33
    a616:	f8 9a       	sbi	0x1f, 0	; 31
    a618:	31 96       	adiw	r30, 0x01	; 1
    a61a:	00 b4       	in	r0, 0x20	; 32
    a61c:	0d 92       	st	X+, r0
    a61e:	41 50       	subi	r20, 0x01	; 1
    a620:	50 40       	sbci	r21, 0x00	; 0
    a622:	b8 f7       	brcc	.-18     	; 0xa612 <__eerd_blraw_m2560+0x8>
    a624:	08 95       	ret

0000a626 <__eerd_byte_m2560>:
    a626:	f9 99       	sbic	0x1f, 1	; 31
    a628:	fe cf       	rjmp	.-4      	; 0xa626 <__eerd_byte_m2560>
    a62a:	92 bd       	out	0x22, r25	; 34
    a62c:	81 bd       	out	0x21, r24	; 33
    a62e:	f8 9a       	sbi	0x1f, 0	; 31
    a630:	99 27       	eor	r25, r25
    a632:	80 b5       	in	r24, 0x20	; 32
    a634:	08 95       	ret

0000a636 <__eerd_word_m2560>:
    a636:	a8 e1       	ldi	r26, 0x18	; 24
    a638:	b0 e0       	ldi	r27, 0x00	; 0
    a63a:	42 e0       	ldi	r20, 0x02	; 2
    a63c:	50 e0       	ldi	r21, 0x00	; 0
    a63e:	0c 94 05 53 	jmp	0xa60a	; 0xa60a <__eerd_blraw_m2560>

0000a642 <__eeupd_block_m2560>:
    a642:	dc 01       	movw	r26, r24
    a644:	a4 0f       	add	r26, r20
    a646:	b5 1f       	adc	r27, r21
    a648:	41 50       	subi	r20, 0x01	; 1
    a64a:	50 40       	sbci	r21, 0x00	; 0
    a64c:	48 f0       	brcs	.+18     	; 0xa660 <__eeupd_block_m2560+0x1e>
    a64e:	cb 01       	movw	r24, r22
    a650:	84 0f       	add	r24, r20
    a652:	95 1f       	adc	r25, r21
    a654:	2e 91       	ld	r18, -X
    a656:	0e 94 32 53 	call	0xa664	; 0xa664 <__eeupd_r18_m2560>
    a65a:	41 50       	subi	r20, 0x01	; 1
    a65c:	50 40       	sbci	r21, 0x00	; 0
    a65e:	d0 f7       	brcc	.-12     	; 0xa654 <__eeupd_block_m2560+0x12>
    a660:	08 95       	ret

0000a662 <__eeupd_byte_m2560>:
    a662:	26 2f       	mov	r18, r22

0000a664 <__eeupd_r18_m2560>:
    a664:	f9 99       	sbic	0x1f, 1	; 31
    a666:	fe cf       	rjmp	.-4      	; 0xa664 <__eeupd_r18_m2560>
    a668:	92 bd       	out	0x22, r25	; 34
    a66a:	81 bd       	out	0x21, r24	; 33
    a66c:	f8 9a       	sbi	0x1f, 0	; 31
    a66e:	01 97       	sbiw	r24, 0x01	; 1
    a670:	00 b4       	in	r0, 0x20	; 32
    a672:	02 16       	cp	r0, r18
    a674:	39 f0       	breq	.+14     	; 0xa684 <__eeupd_r18_m2560+0x20>
    a676:	1f ba       	out	0x1f, r1	; 31
    a678:	20 bd       	out	0x20, r18	; 32
    a67a:	0f b6       	in	r0, 0x3f	; 63
    a67c:	f8 94       	cli
    a67e:	fa 9a       	sbi	0x1f, 2	; 31
    a680:	f9 9a       	sbi	0x1f, 1	; 31
    a682:	0f be       	out	0x3f, r0	; 63
    a684:	08 95       	ret

0000a686 <__eeupd_word_m2560>:
    a686:	01 96       	adiw	r24, 0x01	; 1
    a688:	27 2f       	mov	r18, r23
    a68a:	0e 94 32 53 	call	0xa664	; 0xa664 <__eeupd_r18_m2560>
    a68e:	0c 94 31 53 	jmp	0xa662	; 0xa662 <__eeupd_byte_m2560>

0000a692 <__eewr_byte_m2560>:
    a692:	26 2f       	mov	r18, r22

0000a694 <__eewr_r18_m2560>:
    a694:	f9 99       	sbic	0x1f, 1	; 31
    a696:	fe cf       	rjmp	.-4      	; 0xa694 <__eewr_r18_m2560>
    a698:	1f ba       	out	0x1f, r1	; 31
    a69a:	92 bd       	out	0x22, r25	; 34
    a69c:	81 bd       	out	0x21, r24	; 33
    a69e:	20 bd       	out	0x20, r18	; 32
    a6a0:	0f b6       	in	r0, 0x3f	; 63
    a6a2:	f8 94       	cli
    a6a4:	fa 9a       	sbi	0x1f, 2	; 31
    a6a6:	f9 9a       	sbi	0x1f, 1	; 31
    a6a8:	0f be       	out	0x3f, r0	; 63
    a6aa:	01 96       	adiw	r24, 0x01	; 1
    a6ac:	08 95       	ret

0000a6ae <__eewr_word_m2560>:
    a6ae:	0e 94 49 53 	call	0xa692	; 0xa692 <__eewr_byte_m2560>
    a6b2:	27 2f       	mov	r18, r23
    a6b4:	0c 94 4a 53 	jmp	0xa694	; 0xa694 <__eewr_r18_m2560>

0000a6b8 <_exit>:
    a6b8:	ff cf       	rjmp	.-2      	; 0xa6b8 <_exit>
